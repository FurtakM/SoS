// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 32 0 0
// InitAmerican ;
  15: CALL 866 0 0
// InitRussian ;
  19: CALL 1114 0 0
// DebugMode ;
  23: CALL 160 0 0
// Action ;
  27: CALL 2673 0 0
// end ;
  31: END
// export debug ; export mission_prefix ; export active_russian_dialog , bobby_in_squad , powell_contact , macmilan_use_radio , cyrus_in_squad , active_road_patrol , macmilan_in_trap , meta_action , end_mission , bobby_saved , cyrus_saved , send_troops_to_forest , active_powell_dialog ; function Init ; begin
  32: LD_INT 0
  34: PPUSH
// mission_prefix := 01_ ;
  35: LD_ADDR_EXP 2
  39: PUSH
  40: LD_STRING 01_
  42: ST_TO_ADDR
// debug := 0 ;
  43: LD_ADDR_EXP 1
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// active_russian_dialog := false ;
  51: LD_ADDR_EXP 3
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// bobby_in_squad := false ;
  59: LD_ADDR_EXP 4
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// cyrus_in_squad := false ;
  67: LD_ADDR_EXP 7
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// powell_contact := false ;
  75: LD_ADDR_EXP 5
  79: PUSH
  80: LD_INT 0
  82: ST_TO_ADDR
// macmilan_use_radio := false ;
  83: LD_ADDR_EXP 6
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// active_road_patrol := false ;
  91: LD_ADDR_EXP 8
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// macmilan_in_trap := false ;
  99: LD_ADDR_EXP 9
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// meta_action := false ;
 107: LD_ADDR_EXP 10
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// end_mission := false ;
 115: LD_ADDR_EXP 11
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// bobby_saved := false ;
 123: LD_ADDR_EXP 12
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// cyrus_saved := false ;
 131: LD_ADDR_EXP 13
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// send_troops_to_forest := false ;
 139: LD_ADDR_EXP 14
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// active_powell_dialog := false ;
 147: LD_ADDR_EXP 15
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// end ;
 155: LD_VAR 0 1
 159: RET
// function DebugMode ; var i ; begin
 160: LD_INT 0
 162: PPUSH
 163: PPUSH
// if not debug then
 164: LD_EXP 1
 168: NOT
 169: IFFALSE 173
// exit ;
 171: GO 192
// Difficulty := 3 ;
 173: LD_ADDR_OWVAR 67
 177: PUSH
 178: LD_INT 3
 180: ST_TO_ADDR
// TurnFogOff ( ) ;
 181: CALL_OW 537
// FogOff ( 1 ) ;
 185: LD_INT 1
 187: PPUSH
 188: CALL_OW 344
// end ; end_of_file
 192: LD_VAR 0 1
 196: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 197: LD_INT 0
 199: PPUSH
 200: PPUSH
 201: PPUSH
// uc_side := GetSide ( b ) ;
 202: LD_ADDR_OWVAR 20
 206: PUSH
 207: LD_VAR 0 2
 211: PPUSH
 212: CALL_OW 255
 216: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 217: LD_ADDR_OWVAR 21
 221: PUSH
 222: LD_VAR 0 2
 226: PPUSH
 227: CALL_OW 248
 231: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 232: LD_INT 0
 234: PPUSH
 235: LD_INT 1
 237: PPUSH
 238: LD_VAR 0 1
 242: PPUSH
 243: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
 247: LD_ADDR_VAR 0 5
 251: PUSH
 252: LD_VAR 0 2
 256: PPUSH
 257: CALL_OW 254
 261: PUSH
 262: LD_INT 3
 264: MINUS
 265: ST_TO_ADDR
// if dir < 0 then
 266: LD_VAR 0 5
 270: PUSH
 271: LD_INT 0
 273: LESS
 274: IFFALSE 290
// dir := 6 + dir ;
 276: LD_ADDR_VAR 0 5
 280: PUSH
 281: LD_INT 6
 283: PUSH
 284: LD_VAR 0 5
 288: PLUS
 289: ST_TO_ADDR
// un := CreateHuman ;
 290: LD_ADDR_VAR 0 4
 294: PUSH
 295: CALL_OW 44
 299: ST_TO_ADDR
// SetDir ( un , dir ) ;
 300: LD_VAR 0 4
 304: PPUSH
 305: LD_VAR 0 5
 309: PPUSH
 310: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 314: LD_VAR 0 4
 318: PPUSH
 319: LD_VAR 0 2
 323: PPUSH
 324: CALL_OW 52
// end ;
 328: LD_VAR 0 3
 332: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 333: LD_INT 0
 335: PPUSH
// uc_side := side ;
 336: LD_ADDR_OWVAR 20
 340: PUSH
 341: LD_VAR 0 1
 345: ST_TO_ADDR
// uc_nation := nation ;
 346: LD_ADDR_OWVAR 21
 350: PUSH
 351: LD_VAR 0 2
 355: ST_TO_ADDR
// vc_chassis := chassis ;
 356: LD_ADDR_OWVAR 37
 360: PUSH
 361: LD_VAR 0 3
 365: ST_TO_ADDR
// vc_engine := engine ;
 366: LD_ADDR_OWVAR 39
 370: PUSH
 371: LD_VAR 0 4
 375: ST_TO_ADDR
// vc_control := control ;
 376: LD_ADDR_OWVAR 38
 380: PUSH
 381: LD_VAR 0 5
 385: ST_TO_ADDR
// vc_weapon := weapon ;
 386: LD_ADDR_OWVAR 40
 390: PUSH
 391: LD_VAR 0 6
 395: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 396: LD_ADDR_OWVAR 41
 400: PUSH
 401: LD_VAR 0 7
 405: ST_TO_ADDR
// result := CreateVehicle ;
 406: LD_ADDR_VAR 0 8
 410: PUSH
 411: CALL_OW 45
 415: ST_TO_ADDR
// end ;
 416: LD_VAR 0 8
 420: RET
// export function ComPatrol ( unit , mode , pause , coords ) ; var i ; begin
 421: LD_INT 0
 423: PPUSH
 424: PPUSH
// while ( active_road_patrol ) do
 425: LD_EXP 8
 429: IFFALSE 783
// begin Wait ( 0 0$01 ) ;
 431: LD_INT 35
 433: PPUSH
 434: CALL_OW 67
// if not unit then
 438: LD_VAR 0 1
 442: NOT
 443: IFFALSE 447
// exit ;
 445: GO 783
// if mode = road then
 447: LD_VAR 0 2
 451: PUSH
 452: LD_STRING road
 454: EQUAL
 455: IFFALSE 511
// if GetFuel ( unit ) < 50 and not See ( 1 , unit ) and not HasTask ( unit ) then
 457: LD_VAR 0 1
 461: PPUSH
 462: CALL_OW 261
 466: PUSH
 467: LD_INT 50
 469: LESS
 470: PUSH
 471: LD_INT 1
 473: PPUSH
 474: LD_VAR 0 1
 478: PPUSH
 479: CALL_OW 292
 483: NOT
 484: AND
 485: PUSH
 486: LD_VAR 0 1
 490: PPUSH
 491: CALL_OW 314
 495: NOT
 496: AND
 497: IFFALSE 511
// SetFuel ( unit , 100 ) ;
 499: LD_VAR 0 1
 503: PPUSH
 504: LD_INT 100
 506: PPUSH
 507: CALL_OW 240
// if mode = forest then
 511: LD_VAR 0 2
 515: PUSH
 516: LD_STRING forest
 518: EQUAL
 519: IFFALSE 599
// if GetLives ( unit ) < 600 then
 521: LD_VAR 0 1
 525: PPUSH
 526: CALL_OW 256
 530: PUSH
 531: LD_INT 600
 533: LESS
 534: IFFALSE 599
// begin ComMoveXY ( unit , 42 , 3 ) ;
 536: LD_VAR 0 1
 540: PPUSH
 541: LD_INT 42
 543: PPUSH
 544: LD_INT 3
 546: PPUSH
 547: CALL_OW 111
// SetRememberedX ( unit , GetX ( unit ) ) ;
 551: LD_VAR 0 1
 555: PPUSH
 556: LD_VAR 0 1
 560: PPUSH
 561: CALL_OW 250
 565: PPUSH
 566: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
 570: LD_VAR 0 1
 574: PPUSH
 575: LD_VAR 0 1
 579: PPUSH
 580: CALL_OW 251
 584: PPUSH
 585: CALL_OW 232
// send_troops_to_forest := true ;
 589: LD_ADDR_EXP 14
 593: PUSH
 594: LD_INT 1
 596: ST_TO_ADDR
// break ;
 597: GO 783
// end ; if not HasTask ( unit ) then
 599: LD_VAR 0 1
 603: PPUSH
 604: CALL_OW 314
 608: NOT
 609: IFFALSE 781
// begin for i = 1 to coords do
 611: LD_ADDR_VAR 0 6
 615: PUSH
 616: DOUBLE
 617: LD_INT 1
 619: DEC
 620: ST_TO_ADDR
 621: LD_VAR 0 4
 625: PUSH
 626: FOR_TO
 627: IFFALSE 694
// begin AddComAgressiveMove ( unit , coords [ i ] , coords [ i + 1 ] ) ;
 629: LD_VAR 0 1
 633: PPUSH
 634: LD_VAR 0 4
 638: PUSH
 639: LD_VAR 0 6
 643: ARRAY
 644: PPUSH
 645: LD_VAR 0 4
 649: PUSH
 650: LD_VAR 0 6
 654: PUSH
 655: LD_INT 1
 657: PLUS
 658: ARRAY
 659: PPUSH
 660: CALL_OW 174
// AddComWait ( unit , pause ) ;
 664: LD_VAR 0 1
 668: PPUSH
 669: LD_VAR 0 3
 673: PPUSH
 674: CALL_OW 202
// i := i + 1 ;
 678: LD_ADDR_VAR 0 6
 682: PUSH
 683: LD_VAR 0 6
 687: PUSH
 688: LD_INT 1
 690: PLUS
 691: ST_TO_ADDR
// end ;
 692: GO 626
 694: POP
 695: POP
// for i = coords downto 1 do
 696: LD_ADDR_VAR 0 6
 700: PUSH
 701: DOUBLE
 702: LD_VAR 0 4
 706: INC
 707: ST_TO_ADDR
 708: LD_INT 1
 710: PUSH
 711: FOR_DOWNTO
 712: IFFALSE 779
// begin AddComAgressiveMove ( unit , coords [ i - 1 ] , coords [ i ] ) ;
 714: LD_VAR 0 1
 718: PPUSH
 719: LD_VAR 0 4
 723: PUSH
 724: LD_VAR 0 6
 728: PUSH
 729: LD_INT 1
 731: MINUS
 732: ARRAY
 733: PPUSH
 734: LD_VAR 0 4
 738: PUSH
 739: LD_VAR 0 6
 743: ARRAY
 744: PPUSH
 745: CALL_OW 174
// AddComWait ( unit , pause ) ;
 749: LD_VAR 0 1
 753: PPUSH
 754: LD_VAR 0 3
 758: PPUSH
 759: CALL_OW 202
// i := i - 1 ;
 763: LD_ADDR_VAR 0 6
 767: PUSH
 768: LD_VAR 0 6
 772: PUSH
 773: LD_INT 1
 775: MINUS
 776: ST_TO_ADDR
// end ;
 777: GO 711
 779: POP
 780: POP
// end ; end ;
 781: GO 425
// end ;
 783: LD_VAR 0 5
 787: RET
// export function DebugSay ( dialog ) ; var speaker ; begin
 788: LD_INT 0
 790: PPUSH
 791: PPUSH
// uc_nation := 1 ;
 792: LD_ADDR_OWVAR 21
 796: PUSH
 797: LD_INT 1
 799: ST_TO_ADDR
// uc_side := 0 ;
 800: LD_ADDR_OWVAR 20
 804: PUSH
 805: LD_INT 0
 807: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
 808: LD_INT 0
 810: PPUSH
 811: LD_INT 1
 813: PPUSH
 814: LD_INT 0
 816: PPUSH
 817: CALL_OW 380
// hc_name := speaker ;
 821: LD_ADDR_OWVAR 26
 825: PUSH
 826: LD_STRING speaker
 828: ST_TO_ADDR
// hc_gallery :=  ;
 829: LD_ADDR_OWVAR 33
 833: PUSH
 834: LD_STRING 
 836: ST_TO_ADDR
// speaker := CreateHuman ;
 837: LD_ADDR_VAR 0 3
 841: PUSH
 842: CALL_OW 44
 846: ST_TO_ADDR
// Say ( speaker , dialog ) ;
 847: LD_VAR 0 3
 851: PPUSH
 852: LD_VAR 0 1
 856: PPUSH
 857: CALL_OW 88
// end ; end_of_file
 861: LD_VAR 0 2
 865: RET
// export JMM , Bobby , Cyrus , Powell , fakePokryshkin ; export function InitAmerican ; begin
 866: LD_INT 0
 868: PPUSH
// uc_nation := 1 ;
 869: LD_ADDR_OWVAR 21
 873: PUSH
 874: LD_INT 1
 876: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , false ,  ) ;
 877: LD_ADDR_EXP 16
 881: PUSH
 882: LD_STRING JMM
 884: PPUSH
 885: LD_INT 0
 887: PPUSH
 888: LD_STRING 
 890: PPUSH
 891: CALL 20989 0 3
 895: ST_TO_ADDR
// uc_side := 4 ;
 896: LD_ADDR_OWVAR 20
 900: PUSH
 901: LD_INT 4
 903: ST_TO_ADDR
// hc_gallery := us ;
 904: LD_ADDR_OWVAR 33
 908: PUSH
 909: LD_STRING us
 911: ST_TO_ADDR
// hc_face_number := 7 ;
 912: LD_ADDR_OWVAR 34
 916: PUSH
 917: LD_INT 7
 919: ST_TO_ADDR
// hc_sex := sex_male ;
 920: LD_ADDR_OWVAR 27
 924: PUSH
 925: LD_INT 1
 927: ST_TO_ADDR
// hc_name := . ;
 928: LD_ADDR_OWVAR 26
 932: PUSH
 933: LD_STRING .
 935: ST_TO_ADDR
// hc_class := 1 ;
 936: LD_ADDR_OWVAR 28
 940: PUSH
 941: LD_INT 1
 943: ST_TO_ADDR
// Powell := CreateHuman ;
 944: LD_ADDR_EXP 19
 948: PUSH
 949: CALL_OW 44
 953: ST_TO_ADDR
// hc_name := . ;
 954: LD_ADDR_OWVAR 26
 958: PUSH
 959: LD_STRING .
 961: ST_TO_ADDR
// hc_gallery := ru ;
 962: LD_ADDR_OWVAR 33
 966: PUSH
 967: LD_STRING ru
 969: ST_TO_ADDR
// hc_face_number := 4 ;
 970: LD_ADDR_OWVAR 34
 974: PUSH
 975: LD_INT 4
 977: ST_TO_ADDR
// hc_sex := sex_male ;
 978: LD_ADDR_OWVAR 27
 982: PUSH
 983: LD_INT 1
 985: ST_TO_ADDR
// fakePokryshkin := CreateHuman ;
 986: LD_ADDR_EXP 20
 990: PUSH
 991: CALL_OW 44
 995: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , false ,  ) ;
 996: LD_ADDR_EXP 17
1000: PUSH
1001: LD_STRING Bobby
1003: PPUSH
1004: LD_INT 0
1006: PPUSH
1007: LD_STRING 
1009: PPUSH
1010: CALL 20989 0 3
1014: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , false ,  ) ;
1015: LD_ADDR_EXP 18
1019: PUSH
1020: LD_STRING Cyrus
1022: PPUSH
1023: LD_INT 0
1025: PPUSH
1026: LD_STRING 
1028: PPUSH
1029: CALL 20989 0 3
1033: ST_TO_ADDR
// case Difficulty of 1 :
1034: LD_OWVAR 67
1038: PUSH
1039: LD_INT 1
1041: DOUBLE
1042: EQUAL
1043: IFTRUE 1047
1045: GO 1062
1047: POP
// SetLives ( Bobby , 500 ) ; 2 :
1048: LD_EXP 17
1052: PPUSH
1053: LD_INT 500
1055: PPUSH
1056: CALL_OW 234
1060: GO 1109
1062: LD_INT 2
1064: DOUBLE
1065: EQUAL
1066: IFTRUE 1070
1068: GO 1085
1070: POP
// SetLives ( Bobby , 460 ) ; 3 :
1071: LD_EXP 17
1075: PPUSH
1076: LD_INT 460
1078: PPUSH
1079: CALL_OW 234
1083: GO 1109
1085: LD_INT 3
1087: DOUBLE
1088: EQUAL
1089: IFTRUE 1093
1091: GO 1108
1093: POP
// SetLives ( Bobby , 420 ) ; end ;
1094: LD_EXP 17
1098: PPUSH
1099: LD_INT 420
1101: PPUSH
1102: CALL_OW 234
1106: GO 1109
1108: POP
// end ; end_of_file
1109: LD_VAR 0 1
1113: RET
// export russian_troops_1 , russian_troops_2 , russian_patrol_tanks , russian_meta_guards , russian_patrol_forest ; export Pokryshkin ; export function InitRussian ; var skill , i , un ; begin
1114: LD_INT 0
1116: PPUSH
1117: PPUSH
1118: PPUSH
1119: PPUSH
// skill := [ 1 , 2 , 3 ] [ Difficulty ] ;
1120: LD_ADDR_VAR 0 2
1124: PUSH
1125: LD_INT 1
1127: PUSH
1128: LD_INT 2
1130: PUSH
1131: LD_INT 3
1133: PUSH
1134: EMPTY
1135: LIST
1136: LIST
1137: LIST
1138: PUSH
1139: LD_OWVAR 67
1143: ARRAY
1144: ST_TO_ADDR
// uc_side := 3 ;
1145: LD_ADDR_OWVAR 20
1149: PUSH
1150: LD_INT 3
1152: ST_TO_ADDR
// uc_nation := 3 ;
1153: LD_ADDR_OWVAR 21
1157: PUSH
1158: LD_INT 3
1160: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
1161: LD_ADDR_EXP 26
1165: PUSH
1166: LD_STRING Pokryshkin
1168: PPUSH
1169: LD_INT 0
1171: PPUSH
1172: LD_STRING 
1174: PPUSH
1175: CALL 20989 0 3
1179: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 44 , 5 , false ) ;
1180: LD_EXP 26
1184: PPUSH
1185: LD_INT 44
1187: PPUSH
1188: LD_INT 5
1190: PPUSH
1191: LD_INT 0
1193: PPUSH
1194: CALL_OW 48
// hc_importance := 0 ;
1198: LD_ADDR_OWVAR 32
1202: PUSH
1203: LD_INT 0
1205: ST_TO_ADDR
// hc_gallery :=  ;
1206: LD_ADDR_OWVAR 33
1210: PUSH
1211: LD_STRING 
1213: ST_TO_ADDR
// hc_name :=  ;
1214: LD_ADDR_OWVAR 26
1218: PUSH
1219: LD_STRING 
1221: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1222: LD_INT 1
1224: PPUSH
1225: LD_INT 1
1227: PPUSH
1228: LD_VAR 0 2
1232: PPUSH
1233: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1237: LD_ADDR_OWVAR 33
1241: PUSH
1242: LD_STRING SecondCharsGal
1244: ST_TO_ADDR
// hc_face_number := 69 ;
1245: LD_ADDR_OWVAR 34
1249: PUSH
1250: LD_INT 69
1252: ST_TO_ADDR
// hc_sex := sex_male ;
1253: LD_ADDR_OWVAR 27
1257: PUSH
1258: LD_INT 1
1260: ST_TO_ADDR
// hc_name := Ilja Ivanov ;
1261: LD_ADDR_OWVAR 26
1265: PUSH
1266: LD_STRING Ilja Ivanov
1268: ST_TO_ADDR
// un := CreateHuman ;
1269: LD_ADDR_VAR 0 4
1273: PUSH
1274: CALL_OW 44
1278: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 1 , un ) ;
1279: LD_ADDR_EXP 21
1283: PUSH
1284: LD_EXP 21
1288: PPUSH
1289: LD_INT 1
1291: PPUSH
1292: LD_VAR 0 4
1296: PPUSH
1297: CALL_OW 2
1301: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1302: LD_VAR 0 4
1306: PPUSH
1307: LD_INT 3
1309: PPUSH
1310: LD_INT 0
1312: PPUSH
1313: CALL_OW 49
// PrepareHuman ( sex_male , 1 , skill ) ;
1317: LD_INT 1
1319: PPUSH
1320: LD_INT 1
1322: PPUSH
1323: LD_VAR 0 2
1327: PPUSH
1328: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1332: LD_ADDR_OWVAR 33
1336: PUSH
1337: LD_STRING SecondCharsGal
1339: ST_TO_ADDR
// hc_face_number := 70 ;
1340: LD_ADDR_OWVAR 34
1344: PUSH
1345: LD_INT 70
1347: ST_TO_ADDR
// hc_name := Pavel Starczy ;
1348: LD_ADDR_OWVAR 26
1352: PUSH
1353: LD_STRING Pavel Starczy
1355: ST_TO_ADDR
// un := CreateHuman ;
1356: LD_ADDR_VAR 0 4
1360: PUSH
1361: CALL_OW 44
1365: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 2 , un ) ;
1366: LD_ADDR_EXP 21
1370: PUSH
1371: LD_EXP 21
1375: PPUSH
1376: LD_INT 2
1378: PPUSH
1379: LD_VAR 0 4
1383: PPUSH
1384: CALL_OW 2
1388: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1389: LD_VAR 0 4
1393: PPUSH
1394: LD_INT 3
1396: PPUSH
1397: LD_INT 0
1399: PPUSH
1400: CALL_OW 49
// InitHc ;
1404: CALL_OW 19
// for i = 1 to 7 do
1408: LD_ADDR_VAR 0 3
1412: PUSH
1413: DOUBLE
1414: LD_INT 1
1416: DEC
1417: ST_TO_ADDR
1418: LD_INT 7
1420: PUSH
1421: FOR_TO
1422: IFFALSE 1573
// begin PrepareHuman ( false , 1 , skill ) ;
1424: LD_INT 0
1426: PPUSH
1427: LD_INT 1
1429: PPUSH
1430: LD_VAR 0 2
1434: PPUSH
1435: CALL_OW 380
// un := CreateHuman ;
1439: LD_ADDR_VAR 0 4
1443: PUSH
1444: CALL_OW 44
1448: ST_TO_ADDR
// if i mod 2 = 0 then
1449: LD_VAR 0 3
1453: PUSH
1454: LD_INT 2
1456: MOD
1457: PUSH
1458: LD_INT 0
1460: EQUAL
1461: IFFALSE 1518
// begin russian_troops_1 := Insert ( russian_troops_1 , russian_troops_1 + 1 , un ) ;
1463: LD_ADDR_EXP 21
1467: PUSH
1468: LD_EXP 21
1472: PPUSH
1473: LD_EXP 21
1477: PUSH
1478: LD_INT 1
1480: PLUS
1481: PPUSH
1482: LD_VAR 0 4
1486: PPUSH
1487: CALL_OW 2
1491: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1492: LD_VAR 0 4
1496: PPUSH
1497: LD_INT 3
1499: PPUSH
1500: LD_INT 0
1502: PPUSH
1503: CALL_OW 49
// ComHold ( un ) ;
1507: LD_VAR 0 4
1511: PPUSH
1512: CALL_OW 140
// end else
1516: GO 1571
// begin russian_troops_2 := Insert ( russian_troops_2 , russian_troops_2 + 1 , un ) ;
1518: LD_ADDR_EXP 22
1522: PUSH
1523: LD_EXP 22
1527: PPUSH
1528: LD_EXP 22
1532: PUSH
1533: LD_INT 1
1535: PLUS
1536: PPUSH
1537: LD_VAR 0 4
1541: PPUSH
1542: CALL_OW 2
1546: ST_TO_ADDR
// PlaceUnitArea ( un , guard_south , false ) ;
1547: LD_VAR 0 4
1551: PPUSH
1552: LD_INT 4
1554: PPUSH
1555: LD_INT 0
1557: PPUSH
1558: CALL_OW 49
// ComHold ( un ) ;
1562: LD_VAR 0 4
1566: PPUSH
1567: CALL_OW 140
// end ; end ;
1571: GO 1421
1573: POP
1574: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) do
1575: LD_ADDR_VAR 0 3
1579: PUSH
1580: LD_INT 22
1582: PUSH
1583: LD_INT 3
1585: PUSH
1586: EMPTY
1587: LIST
1588: LIST
1589: PUSH
1590: LD_INT 30
1592: PUSH
1593: LD_INT 31
1595: PUSH
1596: EMPTY
1597: LIST
1598: LIST
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: PPUSH
1604: CALL_OW 69
1608: PUSH
1609: FOR_IN
1610: IFFALSE 1628
// PrepareSolBun ( skill , i ) ;
1612: LD_VAR 0 2
1616: PPUSH
1617: LD_VAR 0 3
1621: PPUSH
1622: CALL 197 0 2
1626: GO 1609
1628: POP
1629: POP
// for i = 1 to 2 do
1630: LD_ADDR_VAR 0 3
1634: PUSH
1635: DOUBLE
1636: LD_INT 1
1638: DEC
1639: ST_TO_ADDR
1640: LD_INT 2
1642: PUSH
1643: FOR_TO
1644: IFFALSE 1775
// begin un := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1646: LD_ADDR_VAR 0 4
1650: PUSH
1651: LD_INT 3
1653: PPUSH
1654: LD_INT 3
1656: PPUSH
1657: LD_INT 22
1659: PPUSH
1660: LD_INT 1
1662: PPUSH
1663: LD_INT 1
1665: PPUSH
1666: LD_INT 42
1668: PPUSH
1669: LD_INT 100
1671: PPUSH
1672: CALL 333 0 7
1676: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
1677: LD_INT 0
1679: PPUSH
1680: LD_INT 3
1682: PPUSH
1683: LD_VAR 0 2
1687: PPUSH
1688: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1692: CALL_OW 44
1696: PPUSH
1697: LD_VAR 0 4
1701: PPUSH
1702: CALL_OW 52
// PlaceUnitXY ( un , [ 23 , 131 ] [ i ] , [ 14 , 87 ] [ i ] , false ) ;
1706: LD_VAR 0 4
1710: PPUSH
1711: LD_INT 23
1713: PUSH
1714: LD_INT 131
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: PUSH
1721: LD_VAR 0 3
1725: ARRAY
1726: PPUSH
1727: LD_INT 14
1729: PUSH
1730: LD_INT 87
1732: PUSH
1733: EMPTY
1734: LIST
1735: LIST
1736: PUSH
1737: LD_VAR 0 3
1741: ARRAY
1742: PPUSH
1743: LD_INT 0
1745: PPUSH
1746: CALL_OW 48
// russian_patrol_tanks := Insert ( russian_patrol_tanks , 1 , un ) ;
1750: LD_ADDR_EXP 23
1754: PUSH
1755: LD_EXP 23
1759: PPUSH
1760: LD_INT 1
1762: PPUSH
1763: LD_VAR 0 4
1767: PPUSH
1768: CALL_OW 2
1772: ST_TO_ADDR
// end ;
1773: GO 1643
1775: POP
1776: POP
// for i = 1 to 2 do
1777: LD_ADDR_VAR 0 3
1781: PUSH
1782: DOUBLE
1783: LD_INT 1
1785: DEC
1786: ST_TO_ADDR
1787: LD_INT 2
1789: PUSH
1790: FOR_TO
1791: IFFALSE 1882
// begin PrepareHuman ( [ sex_female , sex_male , sex_male ] [ i ] , 1 , 1 ) ;
1793: LD_INT 2
1795: PUSH
1796: LD_INT 1
1798: PUSH
1799: LD_INT 1
1801: PUSH
1802: EMPTY
1803: LIST
1804: LIST
1805: LIST
1806: PUSH
1807: LD_VAR 0 3
1811: ARRAY
1812: PPUSH
1813: LD_INT 1
1815: PPUSH
1816: LD_INT 1
1818: PPUSH
1819: CALL_OW 380
// un := CreateHuman ;
1823: LD_ADDR_VAR 0 4
1827: PUSH
1828: CALL_OW 44
1832: ST_TO_ADDR
// russian_meta_guards := Insert ( russian_meta_guards , 1 , un ) ;
1833: LD_ADDR_EXP 24
1837: PUSH
1838: LD_EXP 24
1842: PPUSH
1843: LD_INT 1
1845: PPUSH
1846: LD_VAR 0 4
1850: PPUSH
1851: CALL_OW 2
1855: ST_TO_ADDR
// PlaceUnitArea ( un , exitArea , false ) ;
1856: LD_VAR 0 4
1860: PPUSH
1861: LD_INT 10
1863: PPUSH
1864: LD_INT 0
1866: PPUSH
1867: CALL_OW 49
// ComHold ( un ) ;
1871: LD_VAR 0 4
1875: PPUSH
1876: CALL_OW 140
// end ;
1880: GO 1790
1882: POP
1883: POP
// if Difficulty < 3 then
1884: LD_OWVAR 67
1888: PUSH
1889: LD_INT 3
1891: LESS
1892: IFFALSE 1896
// exit ;
1894: GO 1939
// PrepareHuman ( false , 1 , skill ) ;
1896: LD_INT 0
1898: PPUSH
1899: LD_INT 1
1901: PPUSH
1902: LD_VAR 0 2
1906: PPUSH
1907: CALL_OW 380
// russian_patrol_forest := CreateHuman ;
1911: LD_ADDR_EXP 25
1915: PUSH
1916: CALL_OW 44
1920: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_forest , 82 , 2 , false ) ;
1921: LD_EXP 25
1925: PPUSH
1926: LD_INT 82
1928: PPUSH
1929: LD_INT 2
1931: PPUSH
1932: LD_INT 0
1934: PPUSH
1935: CALL_OW 48
// end ;
1939: LD_VAR 0 1
1943: RET
// every 0 0$01 trigger active_road_patrol do
1944: LD_EXP 8
1948: IFFALSE 2014
1950: GO 1952
1952: DISABLE
// ComPatrol ( russian_patrol_tanks [ 1 ] , road , 0 0$02 , [ 131 , 87 , 107 , 75 , 107 , 66 , 114 , 61 , 107 , 34 ] ) ;
1953: LD_EXP 23
1957: PUSH
1958: LD_INT 1
1960: ARRAY
1961: PPUSH
1962: LD_STRING road
1964: PPUSH
1965: LD_INT 70
1967: PPUSH
1968: LD_INT 131
1970: PUSH
1971: LD_INT 87
1973: PUSH
1974: LD_INT 107
1976: PUSH
1977: LD_INT 75
1979: PUSH
1980: LD_INT 107
1982: PUSH
1983: LD_INT 66
1985: PUSH
1986: LD_INT 114
1988: PUSH
1989: LD_INT 61
1991: PUSH
1992: LD_INT 107
1994: PUSH
1995: LD_INT 34
1997: PUSH
1998: EMPTY
1999: LIST
2000: LIST
2001: LIST
2002: LIST
2003: LIST
2004: LIST
2005: LIST
2006: LIST
2007: LIST
2008: LIST
2009: PPUSH
2010: CALL 421 0 4
2014: END
// every 0 0$01 trigger active_road_patrol do
2015: LD_EXP 8
2019: IFFALSE 2077
2021: GO 2023
2023: DISABLE
// ComPatrol ( russian_patrol_tanks [ 2 ] , road , 0 0$02 , [ 21 , 12 , 37 , 30 , 65 , 62 , 107 , 76 ] ) ;
2024: LD_EXP 23
2028: PUSH
2029: LD_INT 2
2031: ARRAY
2032: PPUSH
2033: LD_STRING road
2035: PPUSH
2036: LD_INT 70
2038: PPUSH
2039: LD_INT 21
2041: PUSH
2042: LD_INT 12
2044: PUSH
2045: LD_INT 37
2047: PUSH
2048: LD_INT 30
2050: PUSH
2051: LD_INT 65
2053: PUSH
2054: LD_INT 62
2056: PUSH
2057: LD_INT 107
2059: PUSH
2060: LD_INT 76
2062: PUSH
2063: EMPTY
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: LIST
2070: LIST
2071: LIST
2072: PPUSH
2073: CALL 421 0 4
2077: END
// every 0 0$01 trigger IsOk ( russian_patrol_forest ) do
2078: LD_EXP 25
2082: PPUSH
2083: CALL_OW 302
2087: IFFALSE 2149
2089: GO 2091
2091: DISABLE
// ComPatrol ( russian_patrol_forest , forest , 0 0$01 , [ 52 , 15 , 81 , 9 , 120 , 52 , 135 , 80 , 122 , 95 ] ) ;
2092: LD_EXP 25
2096: PPUSH
2097: LD_STRING forest
2099: PPUSH
2100: LD_INT 35
2102: PPUSH
2103: LD_INT 52
2105: PUSH
2106: LD_INT 15
2108: PUSH
2109: LD_INT 81
2111: PUSH
2112: LD_INT 9
2114: PUSH
2115: LD_INT 120
2117: PUSH
2118: LD_INT 52
2120: PUSH
2121: LD_INT 135
2123: PUSH
2124: LD_INT 80
2126: PUSH
2127: LD_INT 122
2129: PUSH
2130: LD_INT 95
2132: PUSH
2133: EMPTY
2134: LIST
2135: LIST
2136: LIST
2137: LIST
2138: LIST
2139: LIST
2140: LIST
2141: LIST
2142: LIST
2143: LIST
2144: PPUSH
2145: CALL 421 0 4
2149: END
// every 0 0$01 trigger macmilan_use_radio do
2150: LD_EXP 6
2154: IFFALSE 2215
2156: GO 2158
2158: DISABLE
// begin active_road_patrol := false ;
2159: LD_ADDR_EXP 8
2163: PUSH
2164: LD_INT 0
2166: ST_TO_ADDR
// ComStop ( russian_patrol_tanks ) ;
2167: LD_EXP 23
2171: PPUSH
2172: CALL_OW 141
// AddComAgressiveMove ( russian_patrol_tanks , 72 , 41 ) ;
2176: LD_EXP 23
2180: PPUSH
2181: LD_INT 72
2183: PPUSH
2184: LD_INT 41
2186: PPUSH
2187: CALL_OW 174
// ComExitBuilding ( russian_troops_2 ) ;
2191: LD_EXP 22
2195: PPUSH
2196: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , 72 , 41 ) ;
2200: LD_EXP 22
2204: PPUSH
2205: LD_INT 72
2207: PPUSH
2208: LD_INT 41
2210: PPUSH
2211: CALL_OW 174
// end ;
2215: END
// every 0 0$03 trigger FilterUnitsInArea ( def_south , [ f_side , 1 ] ) do var un ;
2216: LD_INT 9
2218: PPUSH
2219: LD_INT 22
2221: PUSH
2222: LD_INT 1
2224: PUSH
2225: EMPTY
2226: LIST
2227: LIST
2228: PPUSH
2229: CALL_OW 70
2233: IFFALSE 2307
2235: GO 2237
2237: DISABLE
2238: LD_INT 0
2240: PPUSH
// begin enable ;
2241: ENABLE
// un := FilterUnitsInArea ( def_south , [ f_side , 1 ] ) [ 1 ] ;
2242: LD_ADDR_VAR 0 1
2246: PUSH
2247: LD_INT 9
2249: PPUSH
2250: LD_INT 22
2252: PUSH
2253: LD_INT 1
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: PPUSH
2260: CALL_OW 70
2264: PUSH
2265: LD_INT 1
2267: ARRAY
2268: ST_TO_ADDR
// ComExitBuilding ( russian_troops_2 ) ;
2269: LD_EXP 22
2273: PPUSH
2274: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , GetX ( un ) , GetY ( un ) ) ;
2278: LD_EXP 22
2282: PPUSH
2283: LD_VAR 0 1
2287: PPUSH
2288: CALL_OW 250
2292: PPUSH
2293: LD_VAR 0 1
2297: PPUSH
2298: CALL_OW 251
2302: PPUSH
2303: CALL_OW 174
// end ;
2307: PPOPN 1
2309: END
// every 0 0$01 trigger ( GetLives ( russian_patrol_tanks [ 1 ] ) < 999 or GetLives ( russian_patrol_tanks [ 2 ] ) < 999 ) and See ( 3 , JMM ) do
2310: LD_EXP 23
2314: PUSH
2315: LD_INT 1
2317: ARRAY
2318: PPUSH
2319: CALL_OW 256
2323: PUSH
2324: LD_INT 999
2326: LESS
2327: PUSH
2328: LD_EXP 23
2332: PUSH
2333: LD_INT 2
2335: ARRAY
2336: PPUSH
2337: CALL_OW 256
2341: PUSH
2342: LD_INT 999
2344: LESS
2345: OR
2346: PUSH
2347: LD_INT 3
2349: PPUSH
2350: LD_EXP 16
2354: PPUSH
2355: CALL_OW 292
2359: AND
2360: IFFALSE 2387
2362: GO 2364
2364: DISABLE
// begin active_road_patrol := false ;
2365: LD_ADDR_EXP 8
2369: PUSH
2370: LD_INT 0
2372: ST_TO_ADDR
// ComAttackUnit ( russian_patrol_tanks , JMM ) ;
2373: LD_EXP 23
2377: PPUSH
2378: LD_EXP 16
2382: PPUSH
2383: CALL_OW 115
// end ;
2387: END
// every 0 0$01 trigger macmilan_in_trap do
2388: LD_EXP 9
2392: IFFALSE 2438
2394: GO 2396
2396: DISABLE
// begin ComExitBuilding ( russian_troops_2 ) ;
2397: LD_EXP 22
2401: PPUSH
2402: CALL_OW 122
// ComAttackUnit ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , JMM ) ;
2406: LD_EXP 21
2410: PUSH
2411: LD_EXP 22
2415: ADD
2416: PUSH
2417: LD_EXP 26
2421: ADD
2422: PUSH
2423: LD_EXP 23
2427: ADD
2428: PPUSH
2429: LD_EXP 16
2433: PPUSH
2434: CALL_OW 115
// end ;
2438: END
// every 0 0$01 trigger meta_action do
2439: LD_EXP 10
2443: IFFALSE 2489
2445: GO 2447
2447: DISABLE
// begin active_road_patrol := false ;
2448: LD_ADDR_EXP 8
2452: PUSH
2453: LD_INT 0
2455: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , 93 , 1 ) ;
2456: LD_EXP 21
2460: PUSH
2461: LD_EXP 22
2465: ADD
2466: PUSH
2467: LD_EXP 26
2471: ADD
2472: PUSH
2473: LD_EXP 23
2477: ADD
2478: PPUSH
2479: LD_INT 93
2481: PPUSH
2482: LD_INT 1
2484: PPUSH
2485: CALL_OW 114
// end ;
2489: END
// every 0 0$1 trigger GetLives ( Pokryshkin ) < 1000 do
2490: LD_EXP 26
2494: PPUSH
2495: CALL_OW 256
2499: PUSH
2500: LD_INT 1000
2502: LESS
2503: IFFALSE 2554
2505: GO 2507
2507: DISABLE
// begin enable ;
2508: ENABLE
// if HexInfo ( 18 , 1 ) = Pokryshkin then
2509: LD_INT 18
2511: PPUSH
2512: LD_INT 1
2514: PPUSH
2515: CALL_OW 428
2519: PUSH
2520: LD_EXP 26
2524: EQUAL
2525: IFFALSE 2539
// begin RemoveUnit ( Pokryshkin ) ;
2527: LD_EXP 26
2531: PPUSH
2532: CALL_OW 64
// disable ;
2536: DISABLE
// end else
2537: GO 2554
// ComMoveXY ( Pokryshkin , 18 , 1 ) ;
2539: LD_EXP 26
2543: PPUSH
2544: LD_INT 18
2546: PPUSH
2547: LD_INT 1
2549: PPUSH
2550: CALL_OW 111
// end ;
2554: END
// every 0 0$20 trigger send_troops_to_forest do
2555: LD_EXP 14
2559: IFFALSE 2613
2561: GO 2563
2563: DISABLE
// begin if not IsOk ( russian_patrol_forest ) then
2564: LD_EXP 25
2568: PPUSH
2569: CALL_OW 302
2573: NOT
2574: IFFALSE 2578
// exit ;
2576: GO 2613
// ComAgressiveMove ( russian_troops_1 ^ Pokryshkin , GetRememberedX ( russian_patrol_forest ) , GetRememberedY ( russian_patrol_forest ) ) ;
2578: LD_EXP 21
2582: PUSH
2583: LD_EXP 26
2587: ADD
2588: PPUSH
2589: LD_EXP 25
2593: PPUSH
2594: CALL_OW 252
2598: PPUSH
2599: LD_EXP 25
2603: PPUSH
2604: CALL_OW 253
2608: PPUSH
2609: CALL_OW 114
// end ;
2613: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) = 3 then
2614: LD_VAR 0 1
2618: PPUSH
2619: CALL_OW 255
2623: PUSH
2624: LD_INT 3
2626: EQUAL
2627: IFFALSE 2670
// begin wait ( 11 ) ;
2629: LD_INT 11
2631: PPUSH
2632: CALL_OW 67
// ComEnterUnit ( driver , NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_depot ] ) , driver ) ) ;
2636: LD_VAR 0 1
2640: PPUSH
2641: LD_INT 30
2643: PUSH
2644: LD_INT 0
2646: PUSH
2647: EMPTY
2648: LIST
2649: LIST
2650: PPUSH
2651: CALL_OW 69
2655: PPUSH
2656: LD_VAR 0 1
2660: PPUSH
2661: CALL_OW 74
2665: PPUSH
2666: CALL_OW 120
// end ; end ; end_of_file
2670: PPOPN 4
2672: END
// export function Action ; var i ; begin
2673: LD_INT 0
2675: PPUSH
2676: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
2677: LD_ADDR_VAR 0 2
2681: PUSH
2682: LD_INT 22
2684: PUSH
2685: LD_INT 3
2687: PUSH
2688: EMPTY
2689: LIST
2690: LIST
2691: PUSH
2692: LD_INT 25
2694: PUSH
2695: LD_INT 1
2697: PUSH
2698: EMPTY
2699: LIST
2700: LIST
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: PPUSH
2706: CALL_OW 69
2710: PUSH
2711: FOR_IN
2712: IFFALSE 2725
// ComHold ( i ) ;
2714: LD_VAR 0 2
2718: PPUSH
2719: CALL_OW 140
2723: GO 2711
2725: POP
2726: POP
// InGameOn ;
2727: CALL_OW 8
// CenterOnXY ( 79 , 76 ) ;
2731: LD_INT 79
2733: PPUSH
2734: LD_INT 76
2736: PPUSH
2737: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
2741: LD_INT 10
2743: PPUSH
2744: CALL_OW 67
// PlaceUnitXY ( JMM , 80 , 79 , true ) ;
2748: LD_EXP 16
2752: PPUSH
2753: LD_INT 80
2755: PPUSH
2756: LD_INT 79
2758: PPUSH
2759: LD_INT 1
2761: PPUSH
2762: CALL_OW 48
// Wait ( 0 0$03 ) ;
2766: LD_INT 105
2768: PPUSH
2769: CALL_OW 67
// ComMoveXY ( JMM , 80 , 76 ) ;
2773: LD_EXP 16
2777: PPUSH
2778: LD_INT 80
2780: PPUSH
2781: LD_INT 76
2783: PPUSH
2784: CALL_OW 111
// Say ( JMM , D1-JMM-1 ) ;
2788: LD_EXP 16
2792: PPUSH
2793: LD_STRING D1-JMM-1
2795: PPUSH
2796: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2800: LD_INT 10
2802: PPUSH
2803: CALL_OW 67
// ComMoveXY ( JMM , 76 , 76 ) ;
2807: LD_EXP 16
2811: PPUSH
2812: LD_INT 76
2814: PPUSH
2815: LD_INT 76
2817: PPUSH
2818: CALL_OW 111
// Say ( JMM , D1-JMM-1a ) ;
2822: LD_EXP 16
2826: PPUSH
2827: LD_STRING D1-JMM-1a
2829: PPUSH
2830: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2834: LD_INT 10
2836: PPUSH
2837: CALL_OW 67
// ComTurnXY ( JMM , 83 , 66 ) ;
2841: LD_EXP 16
2845: PPUSH
2846: LD_INT 83
2848: PPUSH
2849: LD_INT 66
2851: PPUSH
2852: CALL_OW 118
// Say ( JMM , D1-JMM-1b ) ;
2856: LD_EXP 16
2860: PPUSH
2861: LD_STRING D1-JMM-1b
2863: PPUSH
2864: CALL_OW 88
// Wait ( 0 0$0.5 ) ;
2868: LD_INT 18
2870: PPUSH
2871: CALL_OW 67
// Say ( JMM , D1-JMM-1c ) ;
2875: LD_EXP 16
2879: PPUSH
2880: LD_STRING D1-JMM-1c
2882: PPUSH
2883: CALL_OW 88
// Wait ( 0 0$0.2 ) ;
2887: LD_INT 7
2889: PPUSH
2890: CALL_OW 67
// SayRadioNoFace ( Powell , D1-Pow-1 ) ;
2894: LD_EXP 19
2898: PPUSH
2899: LD_STRING D1-Pow-1
2901: PPUSH
2902: CALL_OW 586
// Say ( JMM , D1-JMM-2 ) ;
2906: LD_EXP 16
2910: PPUSH
2911: LD_STRING D1-JMM-2
2913: PPUSH
2914: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-2 ) ;
2918: LD_EXP 19
2922: PPUSH
2923: LD_STRING D1-Pow-2
2925: PPUSH
2926: CALL_OW 586
// Say ( JMM , D1-JMM-3 ) ;
2930: LD_EXP 16
2934: PPUSH
2935: LD_STRING D1-JMM-3
2937: PPUSH
2938: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-3 ) ;
2942: LD_EXP 19
2946: PPUSH
2947: LD_STRING D1-Pow-3
2949: PPUSH
2950: CALL_OW 586
// Say ( JMM , D1-JMM-4 ) ;
2954: LD_EXP 16
2958: PPUSH
2959: LD_STRING D1-JMM-4
2961: PPUSH
2962: CALL_OW 88
// ComFree ( JMM ) ;
2966: LD_EXP 16
2970: PPUSH
2971: CALL_OW 139
// Wait ( 0 0$0.3 ) ;
2975: LD_INT 10
2977: PPUSH
2978: CALL_OW 67
// InGameOff ;
2982: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
2986: LD_STRING M1
2988: PPUSH
2989: CALL_OW 337
// SaveForQuickRestart ;
2993: CALL_OW 22
// active_russian_dialog := true ;
2997: LD_ADDR_EXP 3
3001: PUSH
3002: LD_INT 1
3004: ST_TO_ADDR
// active_road_patrol := true ;
3005: LD_ADDR_EXP 8
3009: PUSH
3010: LD_INT 1
3012: ST_TO_ADDR
// if Difficulty < 3 then
3013: LD_OWVAR 67
3017: PUSH
3018: LD_INT 3
3020: LESS
3021: IFFALSE 3052
// begin PlaceUnitXY ( Bobby , 41 , 71 , false ) ;
3023: LD_EXP 17
3027: PPUSH
3028: LD_INT 41
3030: PPUSH
3031: LD_INT 71
3033: PPUSH
3034: LD_INT 0
3036: PPUSH
3037: CALL_OW 48
// ComHold ( Bobby ) ;
3041: LD_EXP 17
3045: PPUSH
3046: CALL_OW 140
// end else
3050: GO 3100
// begin SetDir ( Bobby , 5 ) ;
3052: LD_EXP 17
3056: PPUSH
3057: LD_INT 5
3059: PPUSH
3060: CALL_OW 233
// PlaceUnitXY ( Bobby , 105 , 98 , false ) ;
3064: LD_EXP 17
3068: PPUSH
3069: LD_INT 105
3071: PPUSH
3072: LD_INT 98
3074: PPUSH
3075: LD_INT 0
3077: PPUSH
3078: CALL_OW 48
// ComCrawl ( Bobby ) ;
3082: LD_EXP 17
3086: PPUSH
3087: CALL_OW 137
// AddComHold ( Bobby ) ;
3091: LD_EXP 17
3095: PPUSH
3096: CALL_OW 200
// end ; PlaceUnitXY ( Cyrus , 90 , 42 , false ) ;
3100: LD_EXP 18
3104: PPUSH
3105: LD_INT 90
3107: PPUSH
3108: LD_INT 42
3110: PPUSH
3111: LD_INT 0
3113: PPUSH
3114: CALL_OW 48
// ComMoveXY ( Cyrus , 79 , 34 ) ;
3118: LD_EXP 18
3122: PPUSH
3123: LD_INT 79
3125: PPUSH
3126: LD_INT 34
3128: PPUSH
3129: CALL_OW 111
// AddComCrawl ( Cyrus ) ;
3133: LD_EXP 18
3137: PPUSH
3138: CALL_OW 197
// end ;
3142: LD_VAR 0 1
3146: RET
// every 0 0$01 trigger active_russian_dialog do var wait_points ;
3147: LD_EXP 3
3151: IFFALSE 3745
3153: GO 3155
3155: DISABLE
3156: LD_INT 0
3158: PPUSH
// begin wait_points := 0 ;
3159: LD_ADDR_VAR 0 1
3163: PUSH
3164: LD_INT 0
3166: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
3167: LD_INT 70
3169: PPUSH
3170: CALL_OW 67
// ComAgressiveMove ( russian_troops_1 , 79 , 83 ) ;
3174: LD_EXP 21
3178: PPUSH
3179: LD_INT 79
3181: PPUSH
3182: LD_INT 83
3184: PPUSH
3185: CALL_OW 114
// Say ( russian_troops_1 [ 2 ] , D1R-Rus1-1 ) ;
3189: LD_EXP 21
3193: PUSH
3194: LD_INT 2
3196: ARRAY
3197: PPUSH
3198: LD_STRING D1R-Rus1-1
3200: PPUSH
3201: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1R-Rus2-1 ) ;
3205: LD_EXP 21
3209: PUSH
3210: LD_INT 1
3212: ARRAY
3213: PPUSH
3214: LD_STRING D1R-Rus2-1
3216: PPUSH
3217: CALL_OW 88
// ComAgressiveMove ( russian_troops_2 , 91 , 80 ) ;
3221: LD_EXP 22
3225: PPUSH
3226: LD_INT 91
3228: PPUSH
3229: LD_INT 80
3231: PPUSH
3232: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
3236: LD_INT 35
3238: PPUSH
3239: CALL_OW 67
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 79 , 82 ) < 6 ;
3243: LD_EXP 21
3247: PUSH
3248: LD_INT 1
3250: ARRAY
3251: PPUSH
3252: LD_INT 79
3254: PPUSH
3255: LD_INT 82
3257: PPUSH
3258: CALL_OW 297
3262: PUSH
3263: LD_INT 6
3265: LESS
3266: IFFALSE 3236
// if not IsInArea ( JMM , jmm_spot ) then
3268: LD_EXP 16
3272: PPUSH
3273: LD_INT 5
3275: PPUSH
3276: CALL_OW 308
3280: NOT
3281: IFFALSE 3301
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1 ) else
3283: LD_EXP 21
3287: PUSH
3288: LD_INT 1
3290: ARRAY
3291: PPUSH
3292: LD_STRING D1Ra-Rus2-1
3294: PPUSH
3295: CALL_OW 88
3299: GO 3368
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3301: LD_EXP 21
3305: PUSH
3306: LD_INT 2
3308: ARRAY
3309: PPUSH
3310: LD_STRING D1Rb-Rus1-1
3312: PPUSH
3313: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Rb-Rus2-1 ) ;
3317: LD_EXP 21
3321: PUSH
3322: LD_INT 1
3324: ARRAY
3325: PPUSH
3326: LD_STRING D1Rb-Rus2-1
3328: PPUSH
3329: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 , GetX ( JMM ) , GetY ( JMM ) ) ;
3333: LD_EXP 21
3337: PUSH
3338: LD_EXP 22
3342: ADD
3343: PPUSH
3344: LD_EXP 16
3348: PPUSH
3349: CALL_OW 250
3353: PPUSH
3354: LD_EXP 16
3358: PPUSH
3359: CALL_OW 251
3363: PPUSH
3364: CALL_OW 114
// end ; wait_points := 10 ;
3368: LD_ADDR_VAR 0 1
3372: PUSH
3373: LD_INT 10
3375: ST_TO_ADDR
// if Difficulty > 1 then
3376: LD_OWVAR 67
3380: PUSH
3381: LD_INT 1
3383: GREATER
3384: IFFALSE 3466
// begin ComAgressiveMove ( russian_troops_1 , 78 , 95 ) ;
3386: LD_EXP 21
3390: PPUSH
3391: LD_INT 78
3393: PPUSH
3394: LD_INT 95
3396: PPUSH
3397: CALL_OW 114
// AddComWait ( russian_troops_1 , 0 0$05 ) ;
3401: LD_EXP 21
3405: PPUSH
3406: LD_INT 175
3408: PPUSH
3409: CALL_OW 202
// wait_points := wait_points + 15 ;
3413: LD_ADDR_VAR 0 1
3417: PUSH
3418: LD_VAR 0 1
3422: PUSH
3423: LD_INT 15
3425: PLUS
3426: ST_TO_ADDR
// if Difficulty > 2 then
3427: LD_OWVAR 67
3431: PUSH
3432: LD_INT 2
3434: GREATER
3435: IFFALSE 3466
// begin AddComAgressiveMove ( russian_troops_1 , 65 , 79 ) ;
3437: LD_EXP 21
3441: PPUSH
3442: LD_INT 65
3444: PPUSH
3445: LD_INT 79
3447: PPUSH
3448: CALL_OW 174
// wait_points := wait_points + 5 ;
3452: LD_ADDR_VAR 0 1
3456: PUSH
3457: LD_VAR 0 1
3461: PUSH
3462: LD_INT 5
3464: PLUS
3465: ST_TO_ADDR
// end ; end ; repeat wait ( 0 0$01 ) ;
3466: LD_INT 35
3468: PPUSH
3469: CALL_OW 67
// wait_points := wait_points - 1 ;
3473: LD_ADDR_VAR 0 1
3477: PUSH
3478: LD_VAR 0 1
3482: PUSH
3483: LD_INT 1
3485: MINUS
3486: ST_TO_ADDR
// if See ( 3 , JMM ) then
3487: LD_INT 3
3489: PPUSH
3490: LD_EXP 16
3494: PPUSH
3495: CALL_OW 292
3499: IFFALSE 3553
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3501: LD_EXP 21
3505: PUSH
3506: LD_INT 2
3508: ARRAY
3509: PPUSH
3510: LD_STRING D1Rb-Rus1-1
3512: PPUSH
3513: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3517: LD_EXP 21
3521: PPUSH
3522: LD_EXP 16
3526: PPUSH
3527: CALL_OW 250
3531: PPUSH
3532: LD_EXP 16
3536: PPUSH
3537: CALL_OW 251
3541: PPUSH
3542: CALL_OW 114
// Wait ( 0 0$03 ) ;
3546: LD_INT 105
3548: PPUSH
3549: CALL_OW 67
// end ; until wait_points = 0 ;
3553: LD_VAR 0 1
3557: PUSH
3558: LD_INT 0
3560: EQUAL
3561: IFFALSE 3466
// Say ( russian_troops_1 [ 2 ] , D1Rc-Rus1-1 ) ;
3563: LD_EXP 21
3567: PUSH
3568: LD_INT 2
3570: ARRAY
3571: PPUSH
3572: LD_STRING D1Rc-Rus1-1
3574: PPUSH
3575: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1a ) ;
3579: LD_EXP 21
3583: PUSH
3584: LD_INT 1
3586: ARRAY
3587: PPUSH
3588: LD_STRING D1Ra-Rus2-1a
3590: PPUSH
3591: CALL_OW 88
// active_powell_dialog := true ;
3595: LD_ADDR_EXP 15
3599: PUSH
3600: LD_INT 1
3602: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3603: LD_EXP 21
3607: PPUSH
3608: LD_INT 45
3610: PPUSH
3611: LD_INT 5
3613: PPUSH
3614: CALL_OW 114
// ComEnterUnit ( russian_troops_2 , rbar1 ) ;
3618: LD_EXP 22
3622: PPUSH
3623: LD_INT 26
3625: PPUSH
3626: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
3630: LD_INT 35
3632: PPUSH
3633: CALL_OW 67
// if See ( 3 , JMM ) then
3637: LD_INT 3
3639: PPUSH
3640: LD_EXP 16
3644: PPUSH
3645: CALL_OW 292
3649: IFFALSE 3705
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3651: LD_EXP 21
3655: PUSH
3656: LD_INT 2
3658: ARRAY
3659: PPUSH
3660: LD_STRING D1Rb-Rus1-1
3662: PPUSH
3663: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3667: LD_EXP 21
3671: PPUSH
3672: LD_EXP 16
3676: PPUSH
3677: CALL_OW 250
3681: PPUSH
3682: LD_EXP 16
3686: PPUSH
3687: CALL_OW 251
3691: PPUSH
3692: CALL_OW 114
// Wait ( 0 0$50 ) ;
3696: LD_INT 1750
3698: PPUSH
3699: CALL_OW 67
// end else
3703: GO 3720
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3705: LD_EXP 21
3709: PPUSH
3710: LD_INT 45
3712: PPUSH
3713: LD_INT 5
3715: PPUSH
3716: CALL_OW 114
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 45 , 5 ) < 10 ;
3720: LD_EXP 21
3724: PUSH
3725: LD_INT 1
3727: ARRAY
3728: PPUSH
3729: LD_INT 45
3731: PPUSH
3732: LD_INT 5
3734: PPUSH
3735: CALL_OW 297
3739: PUSH
3740: LD_INT 10
3742: LESS
3743: IFFALSE 3630
// end ;
3745: PPOPN 1
3747: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 6 ] ] ) and Difficulty = 1 do
3748: LD_INT 22
3750: PUSH
3751: LD_INT 3
3753: PUSH
3754: EMPTY
3755: LIST
3756: LIST
3757: PUSH
3758: LD_INT 92
3760: PUSH
3761: LD_INT 80
3763: PUSH
3764: LD_INT 83
3766: PUSH
3767: LD_INT 6
3769: PUSH
3770: EMPTY
3771: LIST
3772: LIST
3773: LIST
3774: LIST
3775: PUSH
3776: EMPTY
3777: LIST
3778: LIST
3779: PPUSH
3780: CALL_OW 69
3784: PUSH
3785: LD_OWVAR 67
3789: PUSH
3790: LD_INT 1
3792: EQUAL
3793: AND
3794: IFFALSE 3875
3796: GO 3798
3798: DISABLE
// begin PlaceSeeing ( 80 , 83 , 1 , - 7 ) ;
3799: LD_INT 80
3801: PPUSH
3802: LD_INT 83
3804: PPUSH
3805: LD_INT 1
3807: PPUSH
3808: LD_INT 7
3810: NEG
3811: PPUSH
3812: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
3816: LD_INT 35
3818: PPUSH
3819: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 10 ] ] ) ;
3823: LD_INT 22
3825: PUSH
3826: LD_INT 3
3828: PUSH
3829: EMPTY
3830: LIST
3831: LIST
3832: PUSH
3833: LD_INT 92
3835: PUSH
3836: LD_INT 80
3838: PUSH
3839: LD_INT 83
3841: PUSH
3842: LD_INT 10
3844: PUSH
3845: EMPTY
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: PUSH
3851: EMPTY
3852: LIST
3853: LIST
3854: PPUSH
3855: CALL_OW 69
3859: NOT
3860: IFFALSE 3816
// RemoveSeeing ( 80 , 83 , 1 ) ;
3862: LD_INT 80
3864: PPUSH
3865: LD_INT 83
3867: PPUSH
3868: LD_INT 1
3870: PPUSH
3871: CALL_OW 331
// end ;
3875: END
// every 0 0$02 trigger GetDistUnits ( JMM , Bobby ) < 9 and IsOk ( Bobby ) do
3876: LD_EXP 16
3880: PPUSH
3881: LD_EXP 17
3885: PPUSH
3886: CALL_OW 296
3890: PUSH
3891: LD_INT 9
3893: LESS
3894: PUSH
3895: LD_EXP 17
3899: PPUSH
3900: CALL_OW 302
3904: AND
3905: IFFALSE 4356
3907: GO 3909
3909: DISABLE
// begin ComWalk ( Bobby ) ;
3910: LD_EXP 17
3914: PPUSH
3915: CALL_OW 138
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
3919: LD_EXP 17
3923: PPUSH
3924: LD_EXP 16
3928: PPUSH
3929: CALL_OW 250
3933: PPUSH
3934: LD_EXP 16
3938: PPUSH
3939: CALL_OW 251
3943: PPUSH
3944: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
3948: LD_INT 35
3950: PPUSH
3951: CALL_OW 67
// until See ( 4 , JMM ) ;
3955: LD_INT 4
3957: PPUSH
3958: LD_EXP 16
3962: PPUSH
3963: CALL_OW 292
3967: IFFALSE 3948
// InGameOn ;
3969: CALL_OW 8
// ComTurnUnit ( JMM , Bobby ) ;
3973: LD_EXP 16
3977: PPUSH
3978: LD_EXP 17
3982: PPUSH
3983: CALL_OW 119
// if cyrus_in_squad and IsOk ( Cyrus ) and GetDistUnits ( JMM , Cyrus ) < 10 then
3987: LD_EXP 7
3991: PUSH
3992: LD_EXP 18
3996: PPUSH
3997: CALL_OW 302
4001: AND
4002: PUSH
4003: LD_EXP 16
4007: PPUSH
4008: LD_EXP 18
4012: PPUSH
4013: CALL_OW 296
4017: PUSH
4018: LD_INT 10
4020: LESS
4021: AND
4022: IFFALSE 4067
// begin ComMoveXY ( Cyrus , GetX ( JMM ) , GetY ( JMM ) ) ;
4024: LD_EXP 18
4028: PPUSH
4029: LD_EXP 16
4033: PPUSH
4034: CALL_OW 250
4038: PPUSH
4039: LD_EXP 16
4043: PPUSH
4044: CALL_OW 251
4048: PPUSH
4049: CALL_OW 111
// AddComTurnUnit ( Cyrus , Bobby ) ;
4053: LD_EXP 18
4057: PPUSH
4058: LD_EXP 17
4062: PPUSH
4063: CALL_OW 179
// end ; Say ( JMM , D2-JMM-1 ) ;
4067: LD_EXP 16
4071: PPUSH
4072: LD_STRING D2-JMM-1
4074: PPUSH
4075: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
4079: LD_INT 10
4081: PPUSH
4082: CALL_OW 67
// ComTurnUnit ( Bobby , JMM ) ;
4086: LD_EXP 17
4090: PPUSH
4091: LD_EXP 16
4095: PPUSH
4096: CALL_OW 119
// Say ( Bobby , D2-Bobby-1 ) ;
4100: LD_EXP 17
4104: PPUSH
4105: LD_STRING D2-Bobby-1
4107: PPUSH
4108: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
4112: LD_EXP 16
4116: PPUSH
4117: LD_STRING D2-JMM-2
4119: PPUSH
4120: CALL_OW 88
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4124: LD_EXP 17
4128: PPUSH
4129: LD_EXP 16
4133: PPUSH
4134: CALL_OW 250
4138: PPUSH
4139: LD_EXP 16
4143: PPUSH
4144: CALL_OW 251
4148: PPUSH
4149: CALL_OW 111
// Say ( Bobby , D2-Bobby-2 ) ;
4153: LD_EXP 17
4157: PPUSH
4158: LD_STRING D2-Bobby-2
4160: PPUSH
4161: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
4165: LD_EXP 16
4169: PPUSH
4170: LD_STRING D2-JMM-3
4172: PPUSH
4173: CALL_OW 88
// ComTurnUnit ( Bobby , JMM ) ;
4177: LD_EXP 17
4181: PPUSH
4182: LD_EXP 16
4186: PPUSH
4187: CALL_OW 119
// Say ( Bobby , D2-Bobby-3 ) ;
4191: LD_EXP 17
4195: PPUSH
4196: LD_STRING D2-Bobby-3
4198: PPUSH
4199: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
4203: LD_EXP 16
4207: PPUSH
4208: LD_STRING D2-JMM-4
4210: PPUSH
4211: CALL_OW 88
// Say ( Bobby , D2-Bobby-4 ) ;
4215: LD_EXP 17
4219: PPUSH
4220: LD_STRING D2-Bobby-4
4222: PPUSH
4223: CALL_OW 88
// Say ( JMM , D2-JMM-5 ) ;
4227: LD_EXP 16
4231: PPUSH
4232: LD_STRING D2-JMM-5
4234: PPUSH
4235: CALL_OW 88
// Say ( Bobby , D2-Bobby-5 ) ;
4239: LD_EXP 17
4243: PPUSH
4244: LD_STRING D2-Bobby-5
4246: PPUSH
4247: CALL_OW 88
// Say ( JMM , D2-JMM-6 ) ;
4251: LD_EXP 16
4255: PPUSH
4256: LD_STRING D2-JMM-6
4258: PPUSH
4259: CALL_OW 88
// if not powell_contact then
4263: LD_EXP 5
4267: NOT
4268: IFFALSE 4294
// begin Say ( Bobby , D2-Bobby-6 ) ;
4270: LD_EXP 17
4274: PPUSH
4275: LD_STRING D2-Bobby-6
4277: PPUSH
4278: CALL_OW 88
// Say ( JMM , D2-JMM-7 ) ;
4282: LD_EXP 16
4286: PPUSH
4287: LD_STRING D2-JMM-7
4289: PPUSH
4290: CALL_OW 88
// end ; InGameOff ;
4294: CALL_OW 9
// SetSide ( Bobby , 1 ) ;
4298: LD_EXP 17
4302: PPUSH
4303: LD_INT 1
4305: PPUSH
4306: CALL_OW 235
// ComFree ( [ JMM , Bobby ] ) ;
4310: LD_EXP 16
4314: PUSH
4315: LD_EXP 17
4319: PUSH
4320: EMPTY
4321: LIST
4322: LIST
4323: PPUSH
4324: CALL_OW 139
// bobby_in_squad := true ;
4328: LD_ADDR_EXP 4
4332: PUSH
4333: LD_INT 1
4335: ST_TO_ADDR
// if powell_contact and not cyrus_in_squad then
4336: LD_EXP 5
4340: PUSH
4341: LD_EXP 7
4345: NOT
4346: AND
4347: IFFALSE 4356
// ChangeMissionObjectives ( M2b ) ;
4349: LD_STRING M2b
4351: PPUSH
4352: CALL_OW 337
// end ;
4356: END
// every 0 0$45 trigger active_russian_dialog and not bobby_in_squad and Difficulty < 3 do
4357: LD_EXP 3
4361: PUSH
4362: LD_EXP 4
4366: NOT
4367: AND
4368: PUSH
4369: LD_OWVAR 67
4373: PUSH
4374: LD_INT 3
4376: LESS
4377: AND
4378: IFFALSE 4398
4380: GO 4382
4382: DISABLE
// ComMoveXY ( Bobby , 75 , 83 ) ;
4383: LD_EXP 17
4387: PPUSH
4388: LD_INT 75
4390: PPUSH
4391: LD_INT 83
4393: PPUSH
4394: CALL_OW 111
4398: END
// every 0 0$10 trigger cyrus_in_squad and not bobby_in_squad do
4399: LD_EXP 7
4403: PUSH
4404: LD_EXP 4
4408: NOT
4409: AND
4410: IFFALSE 4439
4412: GO 4414
4414: DISABLE
// begin ComMoveXY ( Bobby , 105 , 97 ) ;
4415: LD_EXP 17
4419: PPUSH
4420: LD_INT 105
4422: PPUSH
4423: LD_INT 97
4425: PPUSH
4426: CALL_OW 111
// AddComCrawl ( Bobby ) ;
4430: LD_EXP 17
4434: PPUSH
4435: CALL_OW 197
// end ;
4439: END
// every 0 0$01 trigger IsInArea ( JMM , obstacle_area ) and GetDistUnits ( JMM , Bobby ) < 7 and bobby_in_squad do
4440: LD_EXP 16
4444: PPUSH
4445: LD_INT 6
4447: PPUSH
4448: CALL_OW 308
4452: PUSH
4453: LD_EXP 16
4457: PPUSH
4458: LD_EXP 17
4462: PPUSH
4463: CALL_OW 296
4467: PUSH
4468: LD_INT 7
4470: LESS
4471: AND
4472: PUSH
4473: LD_EXP 4
4477: AND
4478: IFFALSE 4525
4480: GO 4482
4482: DISABLE
// begin ComHold ( [ JMM , Bobby ] ) ;
4483: LD_EXP 16
4487: PUSH
4488: LD_EXP 17
4492: PUSH
4493: EMPTY
4494: LIST
4495: LIST
4496: PPUSH
4497: CALL_OW 140
// Say ( JMM , D2a-JMM-1 ) ;
4501: LD_EXP 16
4505: PPUSH
4506: LD_STRING D2a-JMM-1
4508: PPUSH
4509: CALL_OW 88
// Say ( Bobby , D2a-Bobby-1 ) ;
4513: LD_EXP 17
4517: PPUSH
4518: LD_STRING D2a-Bobby-1
4520: PPUSH
4521: CALL_OW 88
// end ;
4525: END
// every 0 0$50 trigger active_powell_dialog and not See ( 3 , JMM ) do
4526: LD_EXP 15
4530: PUSH
4531: LD_INT 3
4533: PPUSH
4534: LD_EXP 16
4538: PPUSH
4539: CALL_OW 292
4543: NOT
4544: AND
4545: IFFALSE 4716
4547: GO 4549
4549: DISABLE
// begin wait ( 0 0$5 ) ;
4550: LD_INT 175
4552: PPUSH
4553: CALL_OW 67
// InGameOn ;
4557: CALL_OW 8
// DialogueOn ;
4561: CALL_OW 6
// SayRadioNoFace ( Powell , D3-Pow-1 ) ;
4565: LD_EXP 19
4569: PPUSH
4570: LD_STRING D3-Pow-1
4572: PPUSH
4573: CALL_OW 586
// Say ( JMM , D3-JMM-1 ) ;
4577: LD_EXP 16
4581: PPUSH
4582: LD_STRING D3-JMM-1
4584: PPUSH
4585: CALL_OW 88
// SayRadioNoFace ( Powell , D3-Pow-2 ) ;
4589: LD_EXP 19
4593: PPUSH
4594: LD_STRING D3-Pow-2
4596: PPUSH
4597: CALL_OW 586
// Say ( JMM , D3-JMM-2 ) ;
4601: LD_EXP 16
4605: PPUSH
4606: LD_STRING D3-JMM-2
4608: PPUSH
4609: CALL_OW 88
// SayRadioNoFace ( Powell , D3-Pow-3 ) ;
4613: LD_EXP 19
4617: PPUSH
4618: LD_STRING D3-Pow-3
4620: PPUSH
4621: CALL_OW 586
// DialogueOff ;
4625: CALL_OW 7
// InGameOff ;
4629: CALL_OW 9
// powell_contact := true ;
4633: LD_ADDR_EXP 5
4637: PUSH
4638: LD_INT 1
4640: ST_TO_ADDR
// SetAreaMapShow ( exitArea , 1 ) ;
4641: LD_INT 10
4643: PPUSH
4644: LD_INT 1
4646: PPUSH
4647: CALL_OW 424
// uc_side := 4 ;
4651: LD_ADDR_OWVAR 20
4655: PUSH
4656: LD_INT 4
4658: ST_TO_ADDR
// uc_nation := 1 ;
4659: LD_ADDR_OWVAR 21
4663: PUSH
4664: LD_INT 1
4666: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
4667: LD_ADDR_EXP 19
4671: PUSH
4672: LD_STRING Powell
4674: PPUSH
4675: LD_INT 0
4677: PPUSH
4678: LD_STRING 
4680: PPUSH
4681: CALL 20989 0 3
4685: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
4686: LD_STRING M2
4688: PPUSH
4689: CALL_OW 337
// if not bobby_in_squad then
4693: LD_EXP 4
4697: NOT
4698: IFFALSE 4709
// ChangeMissionObjectives ( M2a ) else
4700: LD_STRING M2a
4702: PPUSH
4703: CALL_OW 337
4707: GO 4716
// ChangeMissionObjectives ( M2b ) ;
4709: LD_STRING M2b
4711: PPUSH
4712: CALL_OW 337
// end ;
4716: END
// every 0 0$01 trigger IsInArea ( JMM , fakeArea ) do
4717: LD_EXP 16
4721: PPUSH
4722: LD_INT 7
4724: PPUSH
4725: CALL_OW 308
4729: IFFALSE 4864
4731: GO 4733
4733: DISABLE
// begin DialogueOn ;
4734: CALL_OW 6
// SayRadioNoFace ( fakePokryshkin , D4-Rus3-1 ) ;
4738: LD_EXP 20
4742: PPUSH
4743: LD_STRING D4-Rus3-1
4745: PPUSH
4746: CALL_OW 586
// DialogueOff ;
4750: CALL_OW 7
// ChangeMissionObjectives ( M3a ) ;
4754: LD_STRING M3a
4756: PPUSH
4757: CALL_OW 337
// SetAreaMapShow ( fakeEnd , 1 ) ;
4761: LD_INT 11
4763: PPUSH
4764: LD_INT 1
4766: PPUSH
4767: CALL_OW 424
// Wait ( 0 0$02 ) ;
4771: LD_INT 70
4773: PPUSH
4774: CALL_OW 67
// DialogueOn ;
4778: CALL_OW 6
// SayRadioNoFace ( Powell , D4-Pow-1 ) ;
4782: LD_EXP 19
4786: PPUSH
4787: LD_STRING D4-Pow-1
4789: PPUSH
4790: CALL_OW 586
// DialogueOff ;
4794: CALL_OW 7
// ChangeMissionObjectives ( M3b ) ;
4798: LD_STRING M3b
4800: PPUSH
4801: CALL_OW 337
// case Query ( Q1 ) of 1 :
4805: LD_STRING Q1
4807: PPUSH
4808: CALL_OW 97
4812: PUSH
4813: LD_INT 1
4815: DOUBLE
4816: EQUAL
4817: IFTRUE 4821
4819: GO 4852
4821: POP
// begin macmilan_use_radio := true ;
4822: LD_ADDR_EXP 6
4826: PUSH
4827: LD_INT 1
4829: ST_TO_ADDR
// DialogueOn ;
4830: CALL_OW 6
// Say ( JMM , D4a-JMM-1 ) ;
4834: LD_EXP 16
4838: PPUSH
4839: LD_STRING D4a-JMM-1
4841: PPUSH
4842: CALL_OW 88
// DialogueOff ;
4846: CALL_OW 7
// end ; 2 :
4850: GO 4864
4852: LD_INT 2
4854: DOUBLE
4855: EQUAL
4856: IFTRUE 4860
4858: GO 4863
4860: POP
// ; end ;
4861: GO 4864
4863: POP
// end ;
4864: END
// every 0 0$02 trigger GetDistUnits ( JMM , Cyrus ) < 8 and IsOk ( Cyrus ) do
4865: LD_EXP 16
4869: PPUSH
4870: LD_EXP 18
4874: PPUSH
4875: CALL_OW 296
4879: PUSH
4880: LD_INT 8
4882: LESS
4883: PUSH
4884: LD_EXP 18
4888: PPUSH
4889: CALL_OW 302
4893: AND
4894: IFFALSE 5185
4896: GO 4898
4898: DISABLE
// begin InGameOn ;
4899: CALL_OW 8
// ComMoveXY ( JMM , GetX ( Cyrus ) , GetY ( Cyrus ) ) ;
4903: LD_EXP 16
4907: PPUSH
4908: LD_EXP 18
4912: PPUSH
4913: CALL_OW 250
4917: PPUSH
4918: LD_EXP 18
4922: PPUSH
4923: CALL_OW 251
4927: PPUSH
4928: CALL_OW 111
// if IsOk ( Bobby ) and bobby_in_squad then
4932: LD_EXP 17
4936: PPUSH
4937: CALL_OW 302
4941: PUSH
4942: LD_EXP 4
4946: AND
4947: IFFALSE 4978
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4949: LD_EXP 17
4953: PPUSH
4954: LD_EXP 16
4958: PPUSH
4959: CALL_OW 250
4963: PPUSH
4964: LD_EXP 16
4968: PPUSH
4969: CALL_OW 251
4973: PPUSH
4974: CALL_OW 111
// Say ( JMM , D5-JMM-1 ) ;
4978: LD_EXP 16
4982: PPUSH
4983: LD_STRING D5-JMM-1
4985: PPUSH
4986: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
4990: LD_INT 10
4992: PPUSH
4993: CALL_OW 67
// ComTurnUnit ( JMM , Cyrus ) ;
4997: LD_EXP 16
5001: PPUSH
5002: LD_EXP 18
5006: PPUSH
5007: CALL_OW 119
// ComWalk ( Cyrus ) ;
5011: LD_EXP 18
5015: PPUSH
5016: CALL_OW 138
// ComTurnUnit ( Cyrus , JMM ) ;
5020: LD_EXP 18
5024: PPUSH
5025: LD_EXP 16
5029: PPUSH
5030: CALL_OW 119
// Say ( Cyrus , D5-Cyrus-1 ) ;
5034: LD_EXP 18
5038: PPUSH
5039: LD_STRING D5-Cyrus-1
5041: PPUSH
5042: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5046: LD_EXP 17
5050: PPUSH
5051: CALL_OW 302
5055: PUSH
5056: LD_EXP 4
5060: AND
5061: IFFALSE 5101
// begin ComTurnUnit ( Bobby , Cyrus ) ;
5063: LD_EXP 17
5067: PPUSH
5068: LD_EXP 18
5072: PPUSH
5073: CALL_OW 119
// Say ( Bobby , D5-Bobby-1 ) ;
5077: LD_EXP 17
5081: PPUSH
5082: LD_STRING D5-Bobby-1
5084: PPUSH
5085: CALL_OW 88
// Say ( JMM , D5-JMM-2 ) ;
5089: LD_EXP 16
5093: PPUSH
5094: LD_STRING D5-JMM-2
5096: PPUSH
5097: CALL_OW 88
// end ; InGameOff ;
5101: CALL_OW 9
// cyrus_in_squad := true ;
5105: LD_ADDR_EXP 7
5109: PUSH
5110: LD_INT 1
5112: ST_TO_ADDR
// SetSide ( Cyrus , 1 ) ;
5113: LD_EXP 18
5117: PPUSH
5118: LD_INT 1
5120: PPUSH
5121: CALL_OW 235
// if powell_contact and not bobby_in_squad then
5125: LD_EXP 5
5129: PUSH
5130: LD_EXP 4
5134: NOT
5135: AND
5136: IFFALSE 5145
// ChangeMissionObjectives ( M2b ) ;
5138: LD_STRING M2b
5140: PPUSH
5141: CALL_OW 337
// if not bobby_in_squad and GetSide ( Bobby ) = 4 and IsOk ( Bobby ) then
5145: LD_EXP 4
5149: NOT
5150: PUSH
5151: LD_EXP 17
5155: PPUSH
5156: CALL_OW 255
5160: PUSH
5161: LD_INT 4
5163: EQUAL
5164: AND
5165: PUSH
5166: LD_EXP 17
5170: PPUSH
5171: CALL_OW 302
5175: AND
5176: IFFALSE 5185
// SetAchievement ( ACH_CYRUS ) ;
5178: LD_STRING ACH_CYRUS
5180: PPUSH
5181: CALL_OW 543
// end ;
5185: END
// every 0 0$01 trigger bobby_in_squad and cyrus_in_squad do
5186: LD_EXP 4
5190: PUSH
5191: LD_EXP 7
5195: AND
5196: IFFALSE 5208
5198: GO 5200
5200: DISABLE
// ChangeMissionObjectives ( M2c ) ;
5201: LD_STRING M2c
5203: PPUSH
5204: CALL_OW 337
5208: END
// every 0 0$01 trigger IsInArea ( JMM , trap ) do
5209: LD_EXP 16
5213: PPUSH
5214: LD_INT 8
5216: PPUSH
5217: CALL_OW 308
5221: IFFALSE 5273
5223: GO 5225
5225: DISABLE
// begin macmilan_in_trap := true ;
5226: LD_ADDR_EXP 9
5230: PUSH
5231: LD_INT 1
5233: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
5234: LD_INT 35
5236: PPUSH
5237: CALL_OW 67
// DialogueOn ;
5241: CALL_OW 6
// Say ( Pokryshkin , D5-Pok-1 ) ;
5245: LD_EXP 26
5249: PPUSH
5250: LD_STRING D5-Pok-1
5252: PPUSH
5253: CALL_OW 88
// DialogueOff ;
5257: CALL_OW 7
// Say ( JMM , D4b-JMM-1 ) ;
5261: LD_EXP 16
5265: PPUSH
5266: LD_STRING D4b-JMM-1
5268: PPUSH
5269: CALL_OW 88
// end ;
5273: END
// every 0 0$01 trigger GetDistUnits ( JMM , russian_meta_guards [ russian_meta_guards ] ) < 12 or UnitFilter ( russian_meta_guards , [ f_not , [ f_lives , 990 ] ] ) do var i , hp ;
5274: LD_EXP 16
5278: PPUSH
5279: LD_EXP 24
5283: PUSH
5284: LD_EXP 24
5288: ARRAY
5289: PPUSH
5290: CALL_OW 296
5294: PUSH
5295: LD_INT 12
5297: LESS
5298: PUSH
5299: LD_EXP 24
5303: PPUSH
5304: LD_INT 3
5306: PUSH
5307: LD_INT 24
5309: PUSH
5310: LD_INT 990
5312: PUSH
5313: EMPTY
5314: LIST
5315: LIST
5316: PUSH
5317: EMPTY
5318: LIST
5319: LIST
5320: PPUSH
5321: CALL_OW 72
5325: OR
5326: IFFALSE 5556
5328: GO 5330
5330: DISABLE
5331: LD_INT 0
5333: PPUSH
5334: PPUSH
// begin hp := [ 300 , 250 , 200 ] [ Difficulty ] ;
5335: LD_ADDR_VAR 0 2
5339: PUSH
5340: LD_INT 300
5342: PUSH
5343: LD_INT 250
5345: PUSH
5346: LD_INT 200
5348: PUSH
5349: EMPTY
5350: LIST
5351: LIST
5352: LIST
5353: PUSH
5354: LD_OWVAR 67
5358: ARRAY
5359: ST_TO_ADDR
// for i in russian_meta_guards do
5360: LD_ADDR_VAR 0 1
5364: PUSH
5365: LD_EXP 24
5369: PUSH
5370: FOR_IN
5371: IFFALSE 5411
// if IsOk ( i ) then
5373: LD_VAR 0 1
5377: PPUSH
5378: CALL_OW 302
5382: IFFALSE 5409
// SetLives ( i , GetLives ( i ) - hp ) ;
5384: LD_VAR 0 1
5388: PPUSH
5389: LD_VAR 0 1
5393: PPUSH
5394: CALL_OW 256
5398: PUSH
5399: LD_VAR 0 2
5403: MINUS
5404: PPUSH
5405: CALL_OW 234
5409: GO 5370
5411: POP
5412: POP
// DialogueOn ;
5413: CALL_OW 6
// Say ( russian_meta_guards [ russian_meta_guards ] , D6-FRus1-1 ) ;
5417: LD_EXP 24
5421: PUSH
5422: LD_EXP 24
5426: ARRAY
5427: PPUSH
5428: LD_STRING D6-FRus1-1
5430: PPUSH
5431: CALL_OW 88
// Say ( JMM , D6-JMM-1 ) ;
5435: LD_EXP 16
5439: PPUSH
5440: LD_STRING D6-JMM-1
5442: PPUSH
5443: CALL_OW 88
// if IsOk ( Cyrus ) and cyrus_in_squad then
5447: LD_EXP 18
5451: PPUSH
5452: CALL_OW 302
5456: PUSH
5457: LD_EXP 7
5461: AND
5462: IFFALSE 5476
// Say ( Cyrus , D6-Cyrus-1 ) ;
5464: LD_EXP 18
5468: PPUSH
5469: LD_STRING D6-Cyrus-1
5471: PPUSH
5472: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5476: LD_EXP 17
5480: PPUSH
5481: CALL_OW 302
5485: PUSH
5486: LD_EXP 4
5490: AND
5491: IFFALSE 5505
// Say ( Bobby , D6-Bobby-1 ) ;
5493: LD_EXP 17
5497: PPUSH
5498: LD_STRING D6-Bobby-1
5500: PPUSH
5501: CALL_OW 88
// DialogueOff ;
5505: CALL_OW 7
// Wait ( [ 0 0$04 , 0 0$03 , 0 0$02 ] [ Difficulty ] ) ;
5509: LD_INT 140
5511: PUSH
5512: LD_INT 105
5514: PUSH
5515: LD_INT 70
5517: PUSH
5518: EMPTY
5519: LIST
5520: LIST
5521: LIST
5522: PUSH
5523: LD_OWVAR 67
5527: ARRAY
5528: PPUSH
5529: CALL_OW 67
// meta_action := true ;
5533: LD_ADDR_EXP 10
5537: PUSH
5538: LD_INT 1
5540: ST_TO_ADDR
// ComAgressiveMove ( russian_meta_guards , 94 , 8 ) ;
5541: LD_EXP 24
5545: PPUSH
5546: LD_INT 94
5548: PPUSH
5549: LD_INT 8
5551: PPUSH
5552: CALL_OW 114
// end ;
5556: PPOPN 2
5558: END
// every 0 0$01 trigger GetDistUnitXY ( JMM , 93 , 1 ) < 5 and FilterAllUnits ( [ f_side , 1 ] ) > 1 do
5559: LD_EXP 16
5563: PPUSH
5564: LD_INT 93
5566: PPUSH
5567: LD_INT 1
5569: PPUSH
5570: CALL_OW 297
5574: PUSH
5575: LD_INT 5
5577: LESS
5578: PUSH
5579: LD_INT 22
5581: PUSH
5582: LD_INT 1
5584: PUSH
5585: EMPTY
5586: LIST
5587: LIST
5588: PPUSH
5589: CALL_OW 69
5593: PUSH
5594: LD_INT 1
5596: GREATER
5597: AND
5598: IFFALSE 5615
5600: GO 5602
5602: DISABLE
// Say ( JMM , D6a-JMM-1 ) ;
5603: LD_EXP 16
5607: PPUSH
5608: LD_STRING D6a-JMM-1
5610: PPUSH
5611: CALL_OW 88
5615: END
// on UnitGoesToRed ( un ) do begin if un = JMM then
5616: LD_VAR 0 1
5620: PUSH
5621: LD_EXP 16
5625: EQUAL
5626: IFFALSE 5635
// YouLost ( JMM ) ;
5628: LD_STRING JMM
5630: PPUSH
5631: CALL_OW 104
// end ;
5635: PPOPN 1
5637: END
// on UnitDestroyed ( un ) do begin if un = JMM then
5638: LD_VAR 0 1
5642: PUSH
5643: LD_EXP 16
5647: EQUAL
5648: IFFALSE 5657
// YouLost ( JMM ) ;
5650: LD_STRING JMM
5652: PPUSH
5653: CALL_OW 104
// end ;
5657: PPOPN 1
5659: END
// every 0 0$01 trigger IsInArea ( Bobby , exitArea ) do
5660: LD_EXP 17
5664: PPUSH
5665: LD_INT 10
5667: PPUSH
5668: CALL_OW 308
5672: IFFALSE 5721
5674: GO 5676
5676: DISABLE
// begin bobby_saved := true ;
5677: LD_ADDR_EXP 12
5681: PUSH
5682: LD_INT 1
5684: ST_TO_ADDR
// SaveVariable ( GetLives ( Bobby ) , 01_BobbyLifePoints_1 ) ;
5685: LD_EXP 17
5689: PPUSH
5690: CALL_OW 256
5694: PPUSH
5695: LD_STRING 01_BobbyLifePoints_1
5697: PPUSH
5698: CALL_OW 39
// RemoveUnit ( Bobby ) ;
5702: LD_EXP 17
5706: PPUSH
5707: CALL_OW 64
// AddMedal ( Bobby , 1 ) ;
5711: LD_STRING Bobby
5713: PPUSH
5714: LD_INT 1
5716: PPUSH
5717: CALL_OW 101
// end ;
5721: END
// every 0 0$01 trigger IsInArea ( Cyrus , exitArea ) do
5722: LD_EXP 18
5726: PPUSH
5727: LD_INT 10
5729: PPUSH
5730: CALL_OW 308
5734: IFFALSE 5783
5736: GO 5738
5738: DISABLE
// begin cyrus_saved := true ;
5739: LD_ADDR_EXP 13
5743: PUSH
5744: LD_INT 1
5746: ST_TO_ADDR
// SaveVariable ( GetLives ( Cyrus ) , 01_CyrusLifePoints_1 ) ;
5747: LD_EXP 18
5751: PPUSH
5752: CALL_OW 256
5756: PPUSH
5757: LD_STRING 01_CyrusLifePoints_1
5759: PPUSH
5760: CALL_OW 39
// RemoveUnit ( Cyrus ) ;
5764: LD_EXP 18
5768: PPUSH
5769: CALL_OW 64
// AddMedal ( Cyrus , 1 ) ;
5773: LD_STRING Cyrus
5775: PPUSH
5776: LD_INT 1
5778: PPUSH
5779: CALL_OW 101
// end ;
5783: END
// every 0 0$01 trigger IsInArea ( JMM , exitArea ) do var i , to_reward , wait_for_them , m1 , m2 , m3 ;
5784: LD_EXP 16
5788: PPUSH
5789: LD_INT 10
5791: PPUSH
5792: CALL_OW 308
5796: IFFALSE 6404
5798: GO 5800
5800: DISABLE
5801: LD_INT 0
5803: PPUSH
5804: PPUSH
5805: PPUSH
5806: PPUSH
5807: PPUSH
5808: PPUSH
// begin if macmilan_use_radio then
5809: LD_EXP 6
5813: IFFALSE 5822
// SetAchievement ( ACH_RADIO ) ;
5815: LD_STRING ACH_RADIO
5817: PPUSH
5818: CALL_OW 543
// if ( not cyrus_saved and cyrus_in_squad and IsOk ( Cyrus ) ) or ( not bobby_saved and bobby_in_squad and IsOk ( Bobby ) ) then
5822: LD_EXP 13
5826: NOT
5827: PUSH
5828: LD_EXP 7
5832: AND
5833: PUSH
5834: LD_EXP 18
5838: PPUSH
5839: CALL_OW 302
5843: AND
5844: PUSH
5845: LD_EXP 12
5849: NOT
5850: PUSH
5851: LD_EXP 4
5855: AND
5856: PUSH
5857: LD_EXP 17
5861: PPUSH
5862: CALL_OW 302
5866: AND
5867: OR
5868: IFFALSE 5909
// case Query ( Q2 ) of 1 :
5870: LD_STRING Q2
5872: PPUSH
5873: CALL_OW 97
5877: PUSH
5878: LD_INT 1
5880: DOUBLE
5881: EQUAL
5882: IFTRUE 5886
5884: GO 5897
5886: POP
// wait_for_them := true ; 2 :
5887: LD_ADDR_VAR 0 3
5891: PUSH
5892: LD_INT 1
5894: ST_TO_ADDR
5895: GO 5909
5897: LD_INT 2
5899: DOUBLE
5900: EQUAL
5901: IFTRUE 5905
5903: GO 5908
5905: POP
// ; end ;
5906: GO 5909
5908: POP
// if wait_for_them then
5909: LD_VAR 0 3
5913: IFFALSE 6026
// repeat wait ( 0 0$01 ) ;
5915: LD_INT 35
5917: PPUSH
5918: CALL_OW 67
// until ( cyrus_saved and bobby_saved ) or ( cyrus_saved and ( not bobby_in_squad or IsDying ( Bobby ) or IsDead ( Bobby ) ) ) or ( bobby_saved and ( not cyrus_in_squad or IsDying ( Cyrus ) or IsDead ( Cyrus ) ) ) or ( IsDead ( Bobby ) and IsDead ( Cyrus ) ) ;
5922: LD_EXP 13
5926: PUSH
5927: LD_EXP 12
5931: AND
5932: PUSH
5933: LD_EXP 13
5937: PUSH
5938: LD_EXP 4
5942: NOT
5943: PUSH
5944: LD_EXP 17
5948: PPUSH
5949: CALL_OW 303
5953: OR
5954: PUSH
5955: LD_EXP 17
5959: PPUSH
5960: CALL_OW 301
5964: OR
5965: AND
5966: OR
5967: PUSH
5968: LD_EXP 12
5972: PUSH
5973: LD_EXP 7
5977: NOT
5978: PUSH
5979: LD_EXP 18
5983: PPUSH
5984: CALL_OW 303
5988: OR
5989: PUSH
5990: LD_EXP 18
5994: PPUSH
5995: CALL_OW 301
5999: OR
6000: AND
6001: OR
6002: PUSH
6003: LD_EXP 17
6007: PPUSH
6008: CALL_OW 301
6012: PUSH
6013: LD_EXP 18
6017: PPUSH
6018: CALL_OW 301
6022: AND
6023: OR
6024: IFFALSE 5915
// SaveVariable ( GetLives ( JMM ) , 01_JMMLifePoints_1 ) ;
6026: LD_EXP 16
6030: PPUSH
6031: CALL_OW 256
6035: PPUSH
6036: LD_STRING 01_JMMLifePoints_1
6038: PPUSH
6039: CALL_OW 39
// RemoveUnit ( JMM ) ;
6043: LD_EXP 16
6047: PPUSH
6048: CALL_OW 64
// to_reward := [ JMM ] ;
6052: LD_ADDR_VAR 0 2
6056: PUSH
6057: LD_EXP 16
6061: PUSH
6062: EMPTY
6063: LIST
6064: ST_TO_ADDR
// if bobby_saved then
6065: LD_EXP 12
6069: IFFALSE 6087
// to_reward := to_reward ^ Bobby ;
6071: LD_ADDR_VAR 0 2
6075: PUSH
6076: LD_VAR 0 2
6080: PUSH
6081: LD_EXP 17
6085: ADD
6086: ST_TO_ADDR
// if cyrus_saved then
6087: LD_EXP 13
6091: IFFALSE 6109
// to_reward := to_reward ^ Cyrus ;
6093: LD_ADDR_VAR 0 2
6097: PUSH
6098: LD_VAR 0 2
6102: PUSH
6103: LD_EXP 18
6107: ADD
6108: ST_TO_ADDR
// m1 := true ;
6109: LD_ADDR_VAR 0 4
6113: PUSH
6114: LD_INT 1
6116: ST_TO_ADDR
// m2 := bobby_saved ;
6117: LD_ADDR_VAR 0 5
6121: PUSH
6122: LD_EXP 12
6126: ST_TO_ADDR
// m3 := cyrus_saved ;
6127: LD_ADDR_VAR 0 6
6131: PUSH
6132: LD_EXP 13
6136: ST_TO_ADDR
// AddMedal ( JMM , 1 ) ;
6137: LD_STRING JMM
6139: PPUSH
6140: LD_INT 1
6142: PPUSH
6143: CALL_OW 101
// if not bobby_in_squad then
6147: LD_EXP 4
6151: NOT
6152: IFFALSE 6165
// AddMedal ( Bobby , - 1 ) ;
6154: LD_STRING Bobby
6156: PPUSH
6157: LD_INT 1
6159: NEG
6160: PPUSH
6161: CALL_OW 101
// if not bobby_saved and ( IsDying ( Bobby ) or IsDead ( Bobby ) ) then
6165: LD_EXP 12
6169: NOT
6170: PUSH
6171: LD_EXP 17
6175: PPUSH
6176: CALL_OW 303
6180: PUSH
6181: LD_EXP 17
6185: PPUSH
6186: CALL_OW 301
6190: OR
6191: AND
6192: IFFALSE 6205
// AddMedal ( Bobby , - 2 ) ;
6194: LD_STRING Bobby
6196: PPUSH
6197: LD_INT 2
6199: NEG
6200: PPUSH
6201: CALL_OW 101
// if not cyrus_in_squad then
6205: LD_EXP 7
6209: NOT
6210: IFFALSE 6223
// AddMedal ( Cyrus , - 1 ) ;
6212: LD_STRING Cyrus
6214: PPUSH
6215: LD_INT 1
6217: NEG
6218: PPUSH
6219: CALL_OW 101
// if not cyrus_saved and ( IsDying ( Cyrus ) or IsDead ( Cyrus ) ) then
6223: LD_EXP 13
6227: NOT
6228: PUSH
6229: LD_EXP 18
6233: PPUSH
6234: CALL_OW 303
6238: PUSH
6239: LD_EXP 18
6243: PPUSH
6244: CALL_OW 301
6248: OR
6249: AND
6250: IFFALSE 6263
// AddMedal ( Cyrus , - 2 ) ;
6252: LD_STRING Cyrus
6254: PPUSH
6255: LD_INT 2
6257: NEG
6258: PPUSH
6259: CALL_OW 101
// if Difficulty = 3 and m1 and m2 and m3 then
6263: LD_OWVAR 67
6267: PUSH
6268: LD_INT 3
6270: EQUAL
6271: PUSH
6272: LD_VAR 0 4
6276: AND
6277: PUSH
6278: LD_VAR 0 5
6282: AND
6283: PUSH
6284: LD_VAR 0 6
6288: AND
6289: IFFALSE 6301
// SetAchievementEX ( ACH_AMER , 1 ) ;
6291: LD_STRING ACH_AMER
6293: PPUSH
6294: LD_INT 1
6296: PPUSH
6297: CALL_OW 564
// GiveMedals ( MAIN ) ;
6301: LD_STRING MAIN
6303: PPUSH
6304: CALL_OW 102
// RewardPeople ( to_reward ) ;
6308: LD_VAR 0 2
6312: PPUSH
6313: CALL_OW 43
// if bobby_saved then
6317: LD_EXP 12
6321: IFFALSE 6341
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
6323: LD_EXP 17
6327: PPUSH
6328: LD_EXP 2
6332: PUSH
6333: LD_STRING Bobby
6335: STR
6336: PPUSH
6337: CALL_OW 38
// if cyrus_saved then
6341: LD_EXP 13
6345: IFFALSE 6365
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
6347: LD_EXP 18
6351: PPUSH
6352: LD_EXP 2
6356: PUSH
6357: LD_STRING Cyrus
6359: STR
6360: PPUSH
6361: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
6365: LD_EXP 16
6369: PPUSH
6370: LD_EXP 2
6374: PUSH
6375: LD_STRING JMM
6377: STR
6378: PPUSH
6379: CALL_OW 38
// if tick <= 3 3$00 then
6383: LD_OWVAR 1
6387: PUSH
6388: LD_INT 6300
6390: LESSEQUAL
6391: IFFALSE 6400
// SetAchievement ( ACH_ASPEED_1 ) ;
6393: LD_STRING ACH_ASPEED_1
6395: PPUSH
6396: CALL_OW 543
// YouWin ;
6400: CALL_OW 103
// end ; end_of_file end_of_file
6404: PPOPN 6
6406: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
6407: LD_VAR 0 2
6411: PUSH
6412: LD_INT 100
6414: EQUAL
6415: IFFALSE 7364
// begin if not StreamModeActive then
6417: LD_EXP 27
6421: NOT
6422: IFFALSE 6432
// StreamModeActive := true ;
6424: LD_ADDR_EXP 27
6428: PUSH
6429: LD_INT 1
6431: ST_TO_ADDR
// if p3 = 0 then
6432: LD_VAR 0 3
6436: PUSH
6437: LD_INT 0
6439: EQUAL
6440: IFFALSE 6446
// InitStreamMode ;
6442: CALL 7597 0 0
// if p3 = 1 then
6446: LD_VAR 0 3
6450: PUSH
6451: LD_INT 1
6453: EQUAL
6454: IFFALSE 6464
// sRocket := true ;
6456: LD_ADDR_EXP 32
6460: PUSH
6461: LD_INT 1
6463: ST_TO_ADDR
// if p3 = 2 then
6464: LD_VAR 0 3
6468: PUSH
6469: LD_INT 2
6471: EQUAL
6472: IFFALSE 6482
// sSpeed := true ;
6474: LD_ADDR_EXP 31
6478: PUSH
6479: LD_INT 1
6481: ST_TO_ADDR
// if p3 = 3 then
6482: LD_VAR 0 3
6486: PUSH
6487: LD_INT 3
6489: EQUAL
6490: IFFALSE 6500
// sEngine := true ;
6492: LD_ADDR_EXP 33
6496: PUSH
6497: LD_INT 1
6499: ST_TO_ADDR
// if p3 = 4 then
6500: LD_VAR 0 3
6504: PUSH
6505: LD_INT 4
6507: EQUAL
6508: IFFALSE 6518
// sSpec := true ;
6510: LD_ADDR_EXP 30
6514: PUSH
6515: LD_INT 1
6517: ST_TO_ADDR
// if p3 = 5 then
6518: LD_VAR 0 3
6522: PUSH
6523: LD_INT 5
6525: EQUAL
6526: IFFALSE 6536
// sLevel := true ;
6528: LD_ADDR_EXP 34
6532: PUSH
6533: LD_INT 1
6535: ST_TO_ADDR
// if p3 = 6 then
6536: LD_VAR 0 3
6540: PUSH
6541: LD_INT 6
6543: EQUAL
6544: IFFALSE 6554
// sArmoury := true ;
6546: LD_ADDR_EXP 35
6550: PUSH
6551: LD_INT 1
6553: ST_TO_ADDR
// if p3 = 7 then
6554: LD_VAR 0 3
6558: PUSH
6559: LD_INT 7
6561: EQUAL
6562: IFFALSE 6572
// sRadar := true ;
6564: LD_ADDR_EXP 36
6568: PUSH
6569: LD_INT 1
6571: ST_TO_ADDR
// if p3 = 8 then
6572: LD_VAR 0 3
6576: PUSH
6577: LD_INT 8
6579: EQUAL
6580: IFFALSE 6590
// sBunker := true ;
6582: LD_ADDR_EXP 37
6586: PUSH
6587: LD_INT 1
6589: ST_TO_ADDR
// if p3 = 9 then
6590: LD_VAR 0 3
6594: PUSH
6595: LD_INT 9
6597: EQUAL
6598: IFFALSE 6608
// sHack := true ;
6600: LD_ADDR_EXP 38
6604: PUSH
6605: LD_INT 1
6607: ST_TO_ADDR
// if p3 = 10 then
6608: LD_VAR 0 3
6612: PUSH
6613: LD_INT 10
6615: EQUAL
6616: IFFALSE 6626
// sFire := true ;
6618: LD_ADDR_EXP 39
6622: PUSH
6623: LD_INT 1
6625: ST_TO_ADDR
// if p3 = 11 then
6626: LD_VAR 0 3
6630: PUSH
6631: LD_INT 11
6633: EQUAL
6634: IFFALSE 6644
// sRefresh := true ;
6636: LD_ADDR_EXP 40
6640: PUSH
6641: LD_INT 1
6643: ST_TO_ADDR
// if p3 = 12 then
6644: LD_VAR 0 3
6648: PUSH
6649: LD_INT 12
6651: EQUAL
6652: IFFALSE 6662
// sExp := true ;
6654: LD_ADDR_EXP 41
6658: PUSH
6659: LD_INT 1
6661: ST_TO_ADDR
// if p3 = 13 then
6662: LD_VAR 0 3
6666: PUSH
6667: LD_INT 13
6669: EQUAL
6670: IFFALSE 6680
// sDepot := true ;
6672: LD_ADDR_EXP 42
6676: PUSH
6677: LD_INT 1
6679: ST_TO_ADDR
// if p3 = 14 then
6680: LD_VAR 0 3
6684: PUSH
6685: LD_INT 14
6687: EQUAL
6688: IFFALSE 6698
// sFlag := true ;
6690: LD_ADDR_EXP 43
6694: PUSH
6695: LD_INT 1
6697: ST_TO_ADDR
// if p3 = 15 then
6698: LD_VAR 0 3
6702: PUSH
6703: LD_INT 15
6705: EQUAL
6706: IFFALSE 6716
// sKamikadze := true ;
6708: LD_ADDR_EXP 51
6712: PUSH
6713: LD_INT 1
6715: ST_TO_ADDR
// if p3 = 16 then
6716: LD_VAR 0 3
6720: PUSH
6721: LD_INT 16
6723: EQUAL
6724: IFFALSE 6734
// sTroll := true ;
6726: LD_ADDR_EXP 52
6730: PUSH
6731: LD_INT 1
6733: ST_TO_ADDR
// if p3 = 17 then
6734: LD_VAR 0 3
6738: PUSH
6739: LD_INT 17
6741: EQUAL
6742: IFFALSE 6752
// sSlow := true ;
6744: LD_ADDR_EXP 53
6748: PUSH
6749: LD_INT 1
6751: ST_TO_ADDR
// if p3 = 18 then
6752: LD_VAR 0 3
6756: PUSH
6757: LD_INT 18
6759: EQUAL
6760: IFFALSE 6770
// sLack := true ;
6762: LD_ADDR_EXP 54
6766: PUSH
6767: LD_INT 1
6769: ST_TO_ADDR
// if p3 = 19 then
6770: LD_VAR 0 3
6774: PUSH
6775: LD_INT 19
6777: EQUAL
6778: IFFALSE 6788
// sTank := true ;
6780: LD_ADDR_EXP 56
6784: PUSH
6785: LD_INT 1
6787: ST_TO_ADDR
// if p3 = 20 then
6788: LD_VAR 0 3
6792: PUSH
6793: LD_INT 20
6795: EQUAL
6796: IFFALSE 6806
// sRemote := true ;
6798: LD_ADDR_EXP 57
6802: PUSH
6803: LD_INT 1
6805: ST_TO_ADDR
// if p3 = 21 then
6806: LD_VAR 0 3
6810: PUSH
6811: LD_INT 21
6813: EQUAL
6814: IFFALSE 6824
// sPowell := true ;
6816: LD_ADDR_EXP 58
6820: PUSH
6821: LD_INT 1
6823: ST_TO_ADDR
// if p3 = 22 then
6824: LD_VAR 0 3
6828: PUSH
6829: LD_INT 22
6831: EQUAL
6832: IFFALSE 6842
// sTeleport := true ;
6834: LD_ADDR_EXP 61
6838: PUSH
6839: LD_INT 1
6841: ST_TO_ADDR
// if p3 = 23 then
6842: LD_VAR 0 3
6846: PUSH
6847: LD_INT 23
6849: EQUAL
6850: IFFALSE 6860
// sOilTower := true ;
6852: LD_ADDR_EXP 63
6856: PUSH
6857: LD_INT 1
6859: ST_TO_ADDR
// if p3 = 24 then
6860: LD_VAR 0 3
6864: PUSH
6865: LD_INT 24
6867: EQUAL
6868: IFFALSE 6878
// sShovel := true ;
6870: LD_ADDR_EXP 64
6874: PUSH
6875: LD_INT 1
6877: ST_TO_ADDR
// if p3 = 25 then
6878: LD_VAR 0 3
6882: PUSH
6883: LD_INT 25
6885: EQUAL
6886: IFFALSE 6896
// sSheik := true ;
6888: LD_ADDR_EXP 65
6892: PUSH
6893: LD_INT 1
6895: ST_TO_ADDR
// if p3 = 26 then
6896: LD_VAR 0 3
6900: PUSH
6901: LD_INT 26
6903: EQUAL
6904: IFFALSE 6914
// sEarthquake := true ;
6906: LD_ADDR_EXP 67
6910: PUSH
6911: LD_INT 1
6913: ST_TO_ADDR
// if p3 = 27 then
6914: LD_VAR 0 3
6918: PUSH
6919: LD_INT 27
6921: EQUAL
6922: IFFALSE 6932
// sAI := true ;
6924: LD_ADDR_EXP 68
6928: PUSH
6929: LD_INT 1
6931: ST_TO_ADDR
// if p3 = 28 then
6932: LD_VAR 0 3
6936: PUSH
6937: LD_INT 28
6939: EQUAL
6940: IFFALSE 6950
// sCargo := true ;
6942: LD_ADDR_EXP 71
6946: PUSH
6947: LD_INT 1
6949: ST_TO_ADDR
// if p3 = 29 then
6950: LD_VAR 0 3
6954: PUSH
6955: LD_INT 29
6957: EQUAL
6958: IFFALSE 6968
// sDLaser := true ;
6960: LD_ADDR_EXP 72
6964: PUSH
6965: LD_INT 1
6967: ST_TO_ADDR
// if p3 = 30 then
6968: LD_VAR 0 3
6972: PUSH
6973: LD_INT 30
6975: EQUAL
6976: IFFALSE 6986
// sExchange := true ;
6978: LD_ADDR_EXP 73
6982: PUSH
6983: LD_INT 1
6985: ST_TO_ADDR
// if p3 = 31 then
6986: LD_VAR 0 3
6990: PUSH
6991: LD_INT 31
6993: EQUAL
6994: IFFALSE 7004
// sFac := true ;
6996: LD_ADDR_EXP 74
7000: PUSH
7001: LD_INT 1
7003: ST_TO_ADDR
// if p3 = 32 then
7004: LD_VAR 0 3
7008: PUSH
7009: LD_INT 32
7011: EQUAL
7012: IFFALSE 7022
// sPower := true ;
7014: LD_ADDR_EXP 75
7018: PUSH
7019: LD_INT 1
7021: ST_TO_ADDR
// if p3 = 33 then
7022: LD_VAR 0 3
7026: PUSH
7027: LD_INT 33
7029: EQUAL
7030: IFFALSE 7040
// sRandom := true ;
7032: LD_ADDR_EXP 76
7036: PUSH
7037: LD_INT 1
7039: ST_TO_ADDR
// if p3 = 34 then
7040: LD_VAR 0 3
7044: PUSH
7045: LD_INT 34
7047: EQUAL
7048: IFFALSE 7058
// sShield := true ;
7050: LD_ADDR_EXP 77
7054: PUSH
7055: LD_INT 1
7057: ST_TO_ADDR
// if p3 = 35 then
7058: LD_VAR 0 3
7062: PUSH
7063: LD_INT 35
7065: EQUAL
7066: IFFALSE 7076
// sTime := true ;
7068: LD_ADDR_EXP 78
7072: PUSH
7073: LD_INT 1
7075: ST_TO_ADDR
// if p3 = 36 then
7076: LD_VAR 0 3
7080: PUSH
7081: LD_INT 36
7083: EQUAL
7084: IFFALSE 7094
// sTools := true ;
7086: LD_ADDR_EXP 79
7090: PUSH
7091: LD_INT 1
7093: ST_TO_ADDR
// if p3 = 101 then
7094: LD_VAR 0 3
7098: PUSH
7099: LD_INT 101
7101: EQUAL
7102: IFFALSE 7112
// sSold := true ;
7104: LD_ADDR_EXP 44
7108: PUSH
7109: LD_INT 1
7111: ST_TO_ADDR
// if p3 = 102 then
7112: LD_VAR 0 3
7116: PUSH
7117: LD_INT 102
7119: EQUAL
7120: IFFALSE 7130
// sDiff := true ;
7122: LD_ADDR_EXP 45
7126: PUSH
7127: LD_INT 1
7129: ST_TO_ADDR
// if p3 = 103 then
7130: LD_VAR 0 3
7134: PUSH
7135: LD_INT 103
7137: EQUAL
7138: IFFALSE 7148
// sFog := true ;
7140: LD_ADDR_EXP 48
7144: PUSH
7145: LD_INT 1
7147: ST_TO_ADDR
// if p3 = 104 then
7148: LD_VAR 0 3
7152: PUSH
7153: LD_INT 104
7155: EQUAL
7156: IFFALSE 7166
// sReset := true ;
7158: LD_ADDR_EXP 49
7162: PUSH
7163: LD_INT 1
7165: ST_TO_ADDR
// if p3 = 105 then
7166: LD_VAR 0 3
7170: PUSH
7171: LD_INT 105
7173: EQUAL
7174: IFFALSE 7184
// sSun := true ;
7176: LD_ADDR_EXP 50
7180: PUSH
7181: LD_INT 1
7183: ST_TO_ADDR
// if p3 = 106 then
7184: LD_VAR 0 3
7188: PUSH
7189: LD_INT 106
7191: EQUAL
7192: IFFALSE 7202
// sTiger := true ;
7194: LD_ADDR_EXP 46
7198: PUSH
7199: LD_INT 1
7201: ST_TO_ADDR
// if p3 = 107 then
7202: LD_VAR 0 3
7206: PUSH
7207: LD_INT 107
7209: EQUAL
7210: IFFALSE 7220
// sBomb := true ;
7212: LD_ADDR_EXP 47
7216: PUSH
7217: LD_INT 1
7219: ST_TO_ADDR
// if p3 = 108 then
7220: LD_VAR 0 3
7224: PUSH
7225: LD_INT 108
7227: EQUAL
7228: IFFALSE 7238
// sWound := true ;
7230: LD_ADDR_EXP 55
7234: PUSH
7235: LD_INT 1
7237: ST_TO_ADDR
// if p3 = 109 then
7238: LD_VAR 0 3
7242: PUSH
7243: LD_INT 109
7245: EQUAL
7246: IFFALSE 7256
// sBetray := true ;
7248: LD_ADDR_EXP 59
7252: PUSH
7253: LD_INT 1
7255: ST_TO_ADDR
// if p3 = 110 then
7256: LD_VAR 0 3
7260: PUSH
7261: LD_INT 110
7263: EQUAL
7264: IFFALSE 7274
// sContamin := true ;
7266: LD_ADDR_EXP 60
7270: PUSH
7271: LD_INT 1
7273: ST_TO_ADDR
// if p3 = 111 then
7274: LD_VAR 0 3
7278: PUSH
7279: LD_INT 111
7281: EQUAL
7282: IFFALSE 7292
// sOil := true ;
7284: LD_ADDR_EXP 62
7288: PUSH
7289: LD_INT 1
7291: ST_TO_ADDR
// if p3 = 112 then
7292: LD_VAR 0 3
7296: PUSH
7297: LD_INT 112
7299: EQUAL
7300: IFFALSE 7310
// sStu := true ;
7302: LD_ADDR_EXP 66
7306: PUSH
7307: LD_INT 1
7309: ST_TO_ADDR
// if p3 = 113 then
7310: LD_VAR 0 3
7314: PUSH
7315: LD_INT 113
7317: EQUAL
7318: IFFALSE 7328
// sBazooka := true ;
7320: LD_ADDR_EXP 69
7324: PUSH
7325: LD_INT 1
7327: ST_TO_ADDR
// if p3 = 114 then
7328: LD_VAR 0 3
7332: PUSH
7333: LD_INT 114
7335: EQUAL
7336: IFFALSE 7346
// sMortar := true ;
7338: LD_ADDR_EXP 70
7342: PUSH
7343: LD_INT 1
7345: ST_TO_ADDR
// if p3 = 115 then
7346: LD_VAR 0 3
7350: PUSH
7351: LD_INT 115
7353: EQUAL
7354: IFFALSE 7364
// sRanger := true ;
7356: LD_ADDR_EXP 80
7360: PUSH
7361: LD_INT 1
7363: ST_TO_ADDR
// end ; if p2 = 101 then
7364: LD_VAR 0 2
7368: PUSH
7369: LD_INT 101
7371: EQUAL
7372: IFFALSE 7575
// begin case p3 of 1 :
7374: LD_VAR 0 3
7378: PUSH
7379: LD_INT 1
7381: DOUBLE
7382: EQUAL
7383: IFTRUE 7387
7385: GO 7394
7387: POP
// hHackUnlimitedResources ; 2 :
7388: CALL 17669 0 0
7392: GO 7575
7394: LD_INT 2
7396: DOUBLE
7397: EQUAL
7398: IFTRUE 7402
7400: GO 7409
7402: POP
// hHackSetLevel10 ; 3 :
7403: CALL 17802 0 0
7407: GO 7575
7409: LD_INT 3
7411: DOUBLE
7412: EQUAL
7413: IFTRUE 7417
7415: GO 7424
7417: POP
// hHackSetLevel10YourUnits ; 4 :
7418: CALL 17887 0 0
7422: GO 7575
7424: LD_INT 4
7426: DOUBLE
7427: EQUAL
7428: IFTRUE 7432
7430: GO 7454
7432: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
7433: LD_VAR 0 4
7437: PPUSH
7438: LD_VAR 0 5
7442: PPUSH
7443: LD_VAR 0 6
7447: PPUSH
7448: CALL 17977 0 3
7452: GO 7575
7454: LD_INT 5
7456: DOUBLE
7457: EQUAL
7458: IFTRUE 7462
7460: GO 7469
7462: POP
// hHackSpawnVehicle ; 6 :
7463: CALL 18038 0 0
7467: GO 7575
7469: LD_INT 6
7471: DOUBLE
7472: EQUAL
7473: IFTRUE 7477
7475: GO 7484
7477: POP
// hHackInvincible ; 7 :
7478: CALL 18584 0 0
7482: GO 7575
7484: LD_INT 7
7486: DOUBLE
7487: EQUAL
7488: IFTRUE 7492
7490: GO 7499
7492: POP
// hHackInvisible ; 8 :
7493: CALL 18695 0 0
7497: GO 7575
7499: LD_INT 8
7501: DOUBLE
7502: EQUAL
7503: IFTRUE 7507
7505: GO 7514
7507: POP
// hHackChangeYourSide ; 9 :
7508: CALL 18752 0 0
7512: GO 7575
7514: LD_INT 9
7516: DOUBLE
7517: EQUAL
7518: IFTRUE 7522
7520: GO 7529
7522: POP
// hHackChangeUnitSide ; 10 :
7523: CALL 18794 0 0
7527: GO 7575
7529: LD_INT 10
7531: DOUBLE
7532: EQUAL
7533: IFTRUE 7537
7535: GO 7544
7537: POP
// hHackFog ; 11 :
7538: CALL 18895 0 0
7542: GO 7575
7544: LD_INT 11
7546: DOUBLE
7547: EQUAL
7548: IFTRUE 7552
7550: GO 7559
7552: POP
// hHackApeman ; 12 :
7553: CALL 18910 0 0
7557: GO 7575
7559: LD_INT 12
7561: DOUBLE
7562: EQUAL
7563: IFTRUE 7567
7565: GO 7574
7567: POP
// hHackBoom ; end ;
7568: CALL 18995 0 0
7572: GO 7575
7574: POP
// end ; end ;
7575: PPOPN 6
7577: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
7578: GO 7580
7580: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
7581: LD_STRING initStreamRollete();
7583: PPUSH
7584: CALL_OW 559
// InitStreamMode ;
7588: CALL 7597 0 0
// DefineStreamItems ( ) ;
7592: CALL 8037 0 0
// end ;
7596: END
// function InitStreamMode ; begin
7597: LD_INT 0
7599: PPUSH
// streamModeActive := false ;
7600: LD_ADDR_EXP 27
7604: PUSH
7605: LD_INT 0
7607: ST_TO_ADDR
// normalCounter := 36 ;
7608: LD_ADDR_EXP 28
7612: PUSH
7613: LD_INT 36
7615: ST_TO_ADDR
// hardcoreCounter := 16 ;
7616: LD_ADDR_EXP 29
7620: PUSH
7621: LD_INT 16
7623: ST_TO_ADDR
// sRocket := false ;
7624: LD_ADDR_EXP 32
7628: PUSH
7629: LD_INT 0
7631: ST_TO_ADDR
// sSpeed := false ;
7632: LD_ADDR_EXP 31
7636: PUSH
7637: LD_INT 0
7639: ST_TO_ADDR
// sEngine := false ;
7640: LD_ADDR_EXP 33
7644: PUSH
7645: LD_INT 0
7647: ST_TO_ADDR
// sSpec := false ;
7648: LD_ADDR_EXP 30
7652: PUSH
7653: LD_INT 0
7655: ST_TO_ADDR
// sLevel := false ;
7656: LD_ADDR_EXP 34
7660: PUSH
7661: LD_INT 0
7663: ST_TO_ADDR
// sArmoury := false ;
7664: LD_ADDR_EXP 35
7668: PUSH
7669: LD_INT 0
7671: ST_TO_ADDR
// sRadar := false ;
7672: LD_ADDR_EXP 36
7676: PUSH
7677: LD_INT 0
7679: ST_TO_ADDR
// sBunker := false ;
7680: LD_ADDR_EXP 37
7684: PUSH
7685: LD_INT 0
7687: ST_TO_ADDR
// sHack := false ;
7688: LD_ADDR_EXP 38
7692: PUSH
7693: LD_INT 0
7695: ST_TO_ADDR
// sFire := false ;
7696: LD_ADDR_EXP 39
7700: PUSH
7701: LD_INT 0
7703: ST_TO_ADDR
// sRefresh := false ;
7704: LD_ADDR_EXP 40
7708: PUSH
7709: LD_INT 0
7711: ST_TO_ADDR
// sExp := false ;
7712: LD_ADDR_EXP 41
7716: PUSH
7717: LD_INT 0
7719: ST_TO_ADDR
// sDepot := false ;
7720: LD_ADDR_EXP 42
7724: PUSH
7725: LD_INT 0
7727: ST_TO_ADDR
// sFlag := false ;
7728: LD_ADDR_EXP 43
7732: PUSH
7733: LD_INT 0
7735: ST_TO_ADDR
// sKamikadze := false ;
7736: LD_ADDR_EXP 51
7740: PUSH
7741: LD_INT 0
7743: ST_TO_ADDR
// sTroll := false ;
7744: LD_ADDR_EXP 52
7748: PUSH
7749: LD_INT 0
7751: ST_TO_ADDR
// sSlow := false ;
7752: LD_ADDR_EXP 53
7756: PUSH
7757: LD_INT 0
7759: ST_TO_ADDR
// sLack := false ;
7760: LD_ADDR_EXP 54
7764: PUSH
7765: LD_INT 0
7767: ST_TO_ADDR
// sTank := false ;
7768: LD_ADDR_EXP 56
7772: PUSH
7773: LD_INT 0
7775: ST_TO_ADDR
// sRemote := false ;
7776: LD_ADDR_EXP 57
7780: PUSH
7781: LD_INT 0
7783: ST_TO_ADDR
// sPowell := false ;
7784: LD_ADDR_EXP 58
7788: PUSH
7789: LD_INT 0
7791: ST_TO_ADDR
// sTeleport := false ;
7792: LD_ADDR_EXP 61
7796: PUSH
7797: LD_INT 0
7799: ST_TO_ADDR
// sOilTower := false ;
7800: LD_ADDR_EXP 63
7804: PUSH
7805: LD_INT 0
7807: ST_TO_ADDR
// sShovel := false ;
7808: LD_ADDR_EXP 64
7812: PUSH
7813: LD_INT 0
7815: ST_TO_ADDR
// sSheik := false ;
7816: LD_ADDR_EXP 65
7820: PUSH
7821: LD_INT 0
7823: ST_TO_ADDR
// sEarthquake := false ;
7824: LD_ADDR_EXP 67
7828: PUSH
7829: LD_INT 0
7831: ST_TO_ADDR
// sAI := false ;
7832: LD_ADDR_EXP 68
7836: PUSH
7837: LD_INT 0
7839: ST_TO_ADDR
// sCargo := false ;
7840: LD_ADDR_EXP 71
7844: PUSH
7845: LD_INT 0
7847: ST_TO_ADDR
// sDLaser := false ;
7848: LD_ADDR_EXP 72
7852: PUSH
7853: LD_INT 0
7855: ST_TO_ADDR
// sExchange := false ;
7856: LD_ADDR_EXP 73
7860: PUSH
7861: LD_INT 0
7863: ST_TO_ADDR
// sFac := false ;
7864: LD_ADDR_EXP 74
7868: PUSH
7869: LD_INT 0
7871: ST_TO_ADDR
// sPower := false ;
7872: LD_ADDR_EXP 75
7876: PUSH
7877: LD_INT 0
7879: ST_TO_ADDR
// sRandom := false ;
7880: LD_ADDR_EXP 76
7884: PUSH
7885: LD_INT 0
7887: ST_TO_ADDR
// sShield := false ;
7888: LD_ADDR_EXP 77
7892: PUSH
7893: LD_INT 0
7895: ST_TO_ADDR
// sTime := false ;
7896: LD_ADDR_EXP 78
7900: PUSH
7901: LD_INT 0
7903: ST_TO_ADDR
// sTools := false ;
7904: LD_ADDR_EXP 79
7908: PUSH
7909: LD_INT 0
7911: ST_TO_ADDR
// sSold := false ;
7912: LD_ADDR_EXP 44
7916: PUSH
7917: LD_INT 0
7919: ST_TO_ADDR
// sDiff := false ;
7920: LD_ADDR_EXP 45
7924: PUSH
7925: LD_INT 0
7927: ST_TO_ADDR
// sFog := false ;
7928: LD_ADDR_EXP 48
7932: PUSH
7933: LD_INT 0
7935: ST_TO_ADDR
// sReset := false ;
7936: LD_ADDR_EXP 49
7940: PUSH
7941: LD_INT 0
7943: ST_TO_ADDR
// sSun := false ;
7944: LD_ADDR_EXP 50
7948: PUSH
7949: LD_INT 0
7951: ST_TO_ADDR
// sTiger := false ;
7952: LD_ADDR_EXP 46
7956: PUSH
7957: LD_INT 0
7959: ST_TO_ADDR
// sBomb := false ;
7960: LD_ADDR_EXP 47
7964: PUSH
7965: LD_INT 0
7967: ST_TO_ADDR
// sWound := false ;
7968: LD_ADDR_EXP 55
7972: PUSH
7973: LD_INT 0
7975: ST_TO_ADDR
// sBetray := false ;
7976: LD_ADDR_EXP 59
7980: PUSH
7981: LD_INT 0
7983: ST_TO_ADDR
// sContamin := false ;
7984: LD_ADDR_EXP 60
7988: PUSH
7989: LD_INT 0
7991: ST_TO_ADDR
// sOil := false ;
7992: LD_ADDR_EXP 62
7996: PUSH
7997: LD_INT 0
7999: ST_TO_ADDR
// sStu := false ;
8000: LD_ADDR_EXP 66
8004: PUSH
8005: LD_INT 0
8007: ST_TO_ADDR
// sBazooka := false ;
8008: LD_ADDR_EXP 69
8012: PUSH
8013: LD_INT 0
8015: ST_TO_ADDR
// sMortar := false ;
8016: LD_ADDR_EXP 70
8020: PUSH
8021: LD_INT 0
8023: ST_TO_ADDR
// sRanger := false ;
8024: LD_ADDR_EXP 80
8028: PUSH
8029: LD_INT 0
8031: ST_TO_ADDR
// end ;
8032: LD_VAR 0 1
8036: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
8037: LD_INT 0
8039: PPUSH
8040: PPUSH
8041: PPUSH
8042: PPUSH
8043: PPUSH
// result := [ ] ;
8044: LD_ADDR_VAR 0 1
8048: PUSH
8049: EMPTY
8050: ST_TO_ADDR
// if campaign_id = 1 then
8051: LD_OWVAR 69
8055: PUSH
8056: LD_INT 1
8058: EQUAL
8059: IFFALSE 10997
// begin case mission_number of 1 :
8061: LD_OWVAR 70
8065: PUSH
8066: LD_INT 1
8068: DOUBLE
8069: EQUAL
8070: IFTRUE 8074
8072: GO 8138
8074: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
8075: LD_ADDR_VAR 0 1
8079: PUSH
8080: LD_INT 2
8082: PUSH
8083: LD_INT 4
8085: PUSH
8086: LD_INT 11
8088: PUSH
8089: LD_INT 12
8091: PUSH
8092: LD_INT 15
8094: PUSH
8095: LD_INT 16
8097: PUSH
8098: LD_INT 22
8100: PUSH
8101: LD_INT 23
8103: PUSH
8104: LD_INT 26
8106: PUSH
8107: EMPTY
8108: LIST
8109: LIST
8110: LIST
8111: LIST
8112: LIST
8113: LIST
8114: LIST
8115: LIST
8116: LIST
8117: PUSH
8118: LD_INT 101
8120: PUSH
8121: LD_INT 102
8123: PUSH
8124: LD_INT 106
8126: PUSH
8127: EMPTY
8128: LIST
8129: LIST
8130: LIST
8131: PUSH
8132: EMPTY
8133: LIST
8134: LIST
8135: ST_TO_ADDR
8136: GO 10995
8138: LD_INT 2
8140: DOUBLE
8141: EQUAL
8142: IFTRUE 8146
8144: GO 8218
8146: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
8147: LD_ADDR_VAR 0 1
8151: PUSH
8152: LD_INT 2
8154: PUSH
8155: LD_INT 4
8157: PUSH
8158: LD_INT 11
8160: PUSH
8161: LD_INT 12
8163: PUSH
8164: LD_INT 15
8166: PUSH
8167: LD_INT 16
8169: PUSH
8170: LD_INT 22
8172: PUSH
8173: LD_INT 23
8175: PUSH
8176: LD_INT 26
8178: PUSH
8179: EMPTY
8180: LIST
8181: LIST
8182: LIST
8183: LIST
8184: LIST
8185: LIST
8186: LIST
8187: LIST
8188: LIST
8189: PUSH
8190: LD_INT 101
8192: PUSH
8193: LD_INT 102
8195: PUSH
8196: LD_INT 105
8198: PUSH
8199: LD_INT 106
8201: PUSH
8202: LD_INT 108
8204: PUSH
8205: EMPTY
8206: LIST
8207: LIST
8208: LIST
8209: LIST
8210: LIST
8211: PUSH
8212: EMPTY
8213: LIST
8214: LIST
8215: ST_TO_ADDR
8216: GO 10995
8218: LD_INT 3
8220: DOUBLE
8221: EQUAL
8222: IFTRUE 8226
8224: GO 8302
8226: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
8227: LD_ADDR_VAR 0 1
8231: PUSH
8232: LD_INT 2
8234: PUSH
8235: LD_INT 4
8237: PUSH
8238: LD_INT 5
8240: PUSH
8241: LD_INT 11
8243: PUSH
8244: LD_INT 12
8246: PUSH
8247: LD_INT 15
8249: PUSH
8250: LD_INT 16
8252: PUSH
8253: LD_INT 22
8255: PUSH
8256: LD_INT 26
8258: PUSH
8259: LD_INT 36
8261: PUSH
8262: EMPTY
8263: LIST
8264: LIST
8265: LIST
8266: LIST
8267: LIST
8268: LIST
8269: LIST
8270: LIST
8271: LIST
8272: LIST
8273: PUSH
8274: LD_INT 101
8276: PUSH
8277: LD_INT 102
8279: PUSH
8280: LD_INT 105
8282: PUSH
8283: LD_INT 106
8285: PUSH
8286: LD_INT 108
8288: PUSH
8289: EMPTY
8290: LIST
8291: LIST
8292: LIST
8293: LIST
8294: LIST
8295: PUSH
8296: EMPTY
8297: LIST
8298: LIST
8299: ST_TO_ADDR
8300: GO 10995
8302: LD_INT 4
8304: DOUBLE
8305: EQUAL
8306: IFTRUE 8310
8308: GO 8394
8310: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
8311: LD_ADDR_VAR 0 1
8315: PUSH
8316: LD_INT 2
8318: PUSH
8319: LD_INT 4
8321: PUSH
8322: LD_INT 5
8324: PUSH
8325: LD_INT 8
8327: PUSH
8328: LD_INT 11
8330: PUSH
8331: LD_INT 12
8333: PUSH
8334: LD_INT 15
8336: PUSH
8337: LD_INT 16
8339: PUSH
8340: LD_INT 22
8342: PUSH
8343: LD_INT 23
8345: PUSH
8346: LD_INT 26
8348: PUSH
8349: LD_INT 36
8351: PUSH
8352: EMPTY
8353: LIST
8354: LIST
8355: LIST
8356: LIST
8357: LIST
8358: LIST
8359: LIST
8360: LIST
8361: LIST
8362: LIST
8363: LIST
8364: LIST
8365: PUSH
8366: LD_INT 101
8368: PUSH
8369: LD_INT 102
8371: PUSH
8372: LD_INT 105
8374: PUSH
8375: LD_INT 106
8377: PUSH
8378: LD_INT 108
8380: PUSH
8381: EMPTY
8382: LIST
8383: LIST
8384: LIST
8385: LIST
8386: LIST
8387: PUSH
8388: EMPTY
8389: LIST
8390: LIST
8391: ST_TO_ADDR
8392: GO 10995
8394: LD_INT 5
8396: DOUBLE
8397: EQUAL
8398: IFTRUE 8402
8400: GO 8502
8402: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
8403: LD_ADDR_VAR 0 1
8407: PUSH
8408: LD_INT 2
8410: PUSH
8411: LD_INT 4
8413: PUSH
8414: LD_INT 5
8416: PUSH
8417: LD_INT 6
8419: PUSH
8420: LD_INT 8
8422: PUSH
8423: LD_INT 11
8425: PUSH
8426: LD_INT 12
8428: PUSH
8429: LD_INT 15
8431: PUSH
8432: LD_INT 16
8434: PUSH
8435: LD_INT 22
8437: PUSH
8438: LD_INT 23
8440: PUSH
8441: LD_INT 25
8443: PUSH
8444: LD_INT 26
8446: PUSH
8447: LD_INT 36
8449: PUSH
8450: EMPTY
8451: LIST
8452: LIST
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: LIST
8458: LIST
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: LIST
8464: LIST
8465: PUSH
8466: LD_INT 101
8468: PUSH
8469: LD_INT 102
8471: PUSH
8472: LD_INT 105
8474: PUSH
8475: LD_INT 106
8477: PUSH
8478: LD_INT 108
8480: PUSH
8481: LD_INT 109
8483: PUSH
8484: LD_INT 112
8486: PUSH
8487: EMPTY
8488: LIST
8489: LIST
8490: LIST
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: PUSH
8496: EMPTY
8497: LIST
8498: LIST
8499: ST_TO_ADDR
8500: GO 10995
8502: LD_INT 6
8504: DOUBLE
8505: EQUAL
8506: IFTRUE 8510
8508: GO 8630
8510: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
8511: LD_ADDR_VAR 0 1
8515: PUSH
8516: LD_INT 2
8518: PUSH
8519: LD_INT 4
8521: PUSH
8522: LD_INT 5
8524: PUSH
8525: LD_INT 6
8527: PUSH
8528: LD_INT 8
8530: PUSH
8531: LD_INT 11
8533: PUSH
8534: LD_INT 12
8536: PUSH
8537: LD_INT 15
8539: PUSH
8540: LD_INT 16
8542: PUSH
8543: LD_INT 20
8545: PUSH
8546: LD_INT 21
8548: PUSH
8549: LD_INT 22
8551: PUSH
8552: LD_INT 23
8554: PUSH
8555: LD_INT 25
8557: PUSH
8558: LD_INT 26
8560: PUSH
8561: LD_INT 30
8563: PUSH
8564: LD_INT 31
8566: PUSH
8567: LD_INT 32
8569: PUSH
8570: LD_INT 36
8572: PUSH
8573: EMPTY
8574: LIST
8575: LIST
8576: LIST
8577: LIST
8578: LIST
8579: LIST
8580: LIST
8581: LIST
8582: LIST
8583: LIST
8584: LIST
8585: LIST
8586: LIST
8587: LIST
8588: LIST
8589: LIST
8590: LIST
8591: LIST
8592: LIST
8593: PUSH
8594: LD_INT 101
8596: PUSH
8597: LD_INT 102
8599: PUSH
8600: LD_INT 105
8602: PUSH
8603: LD_INT 106
8605: PUSH
8606: LD_INT 108
8608: PUSH
8609: LD_INT 109
8611: PUSH
8612: LD_INT 112
8614: PUSH
8615: EMPTY
8616: LIST
8617: LIST
8618: LIST
8619: LIST
8620: LIST
8621: LIST
8622: LIST
8623: PUSH
8624: EMPTY
8625: LIST
8626: LIST
8627: ST_TO_ADDR
8628: GO 10995
8630: LD_INT 7
8632: DOUBLE
8633: EQUAL
8634: IFTRUE 8638
8636: GO 8738
8638: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
8639: LD_ADDR_VAR 0 1
8643: PUSH
8644: LD_INT 2
8646: PUSH
8647: LD_INT 4
8649: PUSH
8650: LD_INT 5
8652: PUSH
8653: LD_INT 7
8655: PUSH
8656: LD_INT 11
8658: PUSH
8659: LD_INT 12
8661: PUSH
8662: LD_INT 15
8664: PUSH
8665: LD_INT 16
8667: PUSH
8668: LD_INT 20
8670: PUSH
8671: LD_INT 21
8673: PUSH
8674: LD_INT 22
8676: PUSH
8677: LD_INT 23
8679: PUSH
8680: LD_INT 25
8682: PUSH
8683: LD_INT 26
8685: PUSH
8686: EMPTY
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: LIST
8698: LIST
8699: LIST
8700: LIST
8701: PUSH
8702: LD_INT 101
8704: PUSH
8705: LD_INT 102
8707: PUSH
8708: LD_INT 103
8710: PUSH
8711: LD_INT 105
8713: PUSH
8714: LD_INT 106
8716: PUSH
8717: LD_INT 108
8719: PUSH
8720: LD_INT 112
8722: PUSH
8723: EMPTY
8724: LIST
8725: LIST
8726: LIST
8727: LIST
8728: LIST
8729: LIST
8730: LIST
8731: PUSH
8732: EMPTY
8733: LIST
8734: LIST
8735: ST_TO_ADDR
8736: GO 10995
8738: LD_INT 8
8740: DOUBLE
8741: EQUAL
8742: IFTRUE 8746
8744: GO 8874
8746: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
8747: LD_ADDR_VAR 0 1
8751: PUSH
8752: LD_INT 2
8754: PUSH
8755: LD_INT 4
8757: PUSH
8758: LD_INT 5
8760: PUSH
8761: LD_INT 6
8763: PUSH
8764: LD_INT 7
8766: PUSH
8767: LD_INT 8
8769: PUSH
8770: LD_INT 11
8772: PUSH
8773: LD_INT 12
8775: PUSH
8776: LD_INT 15
8778: PUSH
8779: LD_INT 16
8781: PUSH
8782: LD_INT 20
8784: PUSH
8785: LD_INT 21
8787: PUSH
8788: LD_INT 22
8790: PUSH
8791: LD_INT 23
8793: PUSH
8794: LD_INT 25
8796: PUSH
8797: LD_INT 26
8799: PUSH
8800: LD_INT 30
8802: PUSH
8803: LD_INT 31
8805: PUSH
8806: LD_INT 32
8808: PUSH
8809: LD_INT 36
8811: PUSH
8812: EMPTY
8813: LIST
8814: LIST
8815: LIST
8816: LIST
8817: LIST
8818: LIST
8819: LIST
8820: LIST
8821: LIST
8822: LIST
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: LIST
8831: LIST
8832: LIST
8833: PUSH
8834: LD_INT 101
8836: PUSH
8837: LD_INT 102
8839: PUSH
8840: LD_INT 103
8842: PUSH
8843: LD_INT 105
8845: PUSH
8846: LD_INT 106
8848: PUSH
8849: LD_INT 108
8851: PUSH
8852: LD_INT 109
8854: PUSH
8855: LD_INT 112
8857: PUSH
8858: EMPTY
8859: LIST
8860: LIST
8861: LIST
8862: LIST
8863: LIST
8864: LIST
8865: LIST
8866: LIST
8867: PUSH
8868: EMPTY
8869: LIST
8870: LIST
8871: ST_TO_ADDR
8872: GO 10995
8874: LD_INT 9
8876: DOUBLE
8877: EQUAL
8878: IFTRUE 8882
8880: GO 9018
8882: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
8883: LD_ADDR_VAR 0 1
8887: PUSH
8888: LD_INT 2
8890: PUSH
8891: LD_INT 4
8893: PUSH
8894: LD_INT 5
8896: PUSH
8897: LD_INT 6
8899: PUSH
8900: LD_INT 7
8902: PUSH
8903: LD_INT 8
8905: PUSH
8906: LD_INT 11
8908: PUSH
8909: LD_INT 12
8911: PUSH
8912: LD_INT 15
8914: PUSH
8915: LD_INT 16
8917: PUSH
8918: LD_INT 20
8920: PUSH
8921: LD_INT 21
8923: PUSH
8924: LD_INT 22
8926: PUSH
8927: LD_INT 23
8929: PUSH
8930: LD_INT 25
8932: PUSH
8933: LD_INT 26
8935: PUSH
8936: LD_INT 28
8938: PUSH
8939: LD_INT 30
8941: PUSH
8942: LD_INT 31
8944: PUSH
8945: LD_INT 32
8947: PUSH
8948: LD_INT 36
8950: PUSH
8951: EMPTY
8952: LIST
8953: LIST
8954: LIST
8955: LIST
8956: LIST
8957: LIST
8958: LIST
8959: LIST
8960: LIST
8961: LIST
8962: LIST
8963: LIST
8964: LIST
8965: LIST
8966: LIST
8967: LIST
8968: LIST
8969: LIST
8970: LIST
8971: LIST
8972: LIST
8973: PUSH
8974: LD_INT 101
8976: PUSH
8977: LD_INT 102
8979: PUSH
8980: LD_INT 103
8982: PUSH
8983: LD_INT 105
8985: PUSH
8986: LD_INT 106
8988: PUSH
8989: LD_INT 108
8991: PUSH
8992: LD_INT 109
8994: PUSH
8995: LD_INT 112
8997: PUSH
8998: LD_INT 114
9000: PUSH
9001: EMPTY
9002: LIST
9003: LIST
9004: LIST
9005: LIST
9006: LIST
9007: LIST
9008: LIST
9009: LIST
9010: LIST
9011: PUSH
9012: EMPTY
9013: LIST
9014: LIST
9015: ST_TO_ADDR
9016: GO 10995
9018: LD_INT 10
9020: DOUBLE
9021: EQUAL
9022: IFTRUE 9026
9024: GO 9210
9026: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
9027: LD_ADDR_VAR 0 1
9031: PUSH
9032: LD_INT 2
9034: PUSH
9035: LD_INT 4
9037: PUSH
9038: LD_INT 5
9040: PUSH
9041: LD_INT 6
9043: PUSH
9044: LD_INT 7
9046: PUSH
9047: LD_INT 8
9049: PUSH
9050: LD_INT 9
9052: PUSH
9053: LD_INT 10
9055: PUSH
9056: LD_INT 11
9058: PUSH
9059: LD_INT 12
9061: PUSH
9062: LD_INT 13
9064: PUSH
9065: LD_INT 14
9067: PUSH
9068: LD_INT 15
9070: PUSH
9071: LD_INT 16
9073: PUSH
9074: LD_INT 17
9076: PUSH
9077: LD_INT 18
9079: PUSH
9080: LD_INT 19
9082: PUSH
9083: LD_INT 20
9085: PUSH
9086: LD_INT 21
9088: PUSH
9089: LD_INT 22
9091: PUSH
9092: LD_INT 23
9094: PUSH
9095: LD_INT 24
9097: PUSH
9098: LD_INT 25
9100: PUSH
9101: LD_INT 26
9103: PUSH
9104: LD_INT 28
9106: PUSH
9107: LD_INT 30
9109: PUSH
9110: LD_INT 31
9112: PUSH
9113: LD_INT 32
9115: PUSH
9116: LD_INT 36
9118: PUSH
9119: EMPTY
9120: LIST
9121: LIST
9122: LIST
9123: LIST
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: PUSH
9150: LD_INT 101
9152: PUSH
9153: LD_INT 102
9155: PUSH
9156: LD_INT 103
9158: PUSH
9159: LD_INT 104
9161: PUSH
9162: LD_INT 105
9164: PUSH
9165: LD_INT 106
9167: PUSH
9168: LD_INT 107
9170: PUSH
9171: LD_INT 108
9173: PUSH
9174: LD_INT 109
9176: PUSH
9177: LD_INT 110
9179: PUSH
9180: LD_INT 111
9182: PUSH
9183: LD_INT 112
9185: PUSH
9186: LD_INT 114
9188: PUSH
9189: EMPTY
9190: LIST
9191: LIST
9192: LIST
9193: LIST
9194: LIST
9195: LIST
9196: LIST
9197: LIST
9198: LIST
9199: LIST
9200: LIST
9201: LIST
9202: LIST
9203: PUSH
9204: EMPTY
9205: LIST
9206: LIST
9207: ST_TO_ADDR
9208: GO 10995
9210: LD_INT 11
9212: DOUBLE
9213: EQUAL
9214: IFTRUE 9218
9216: GO 9410
9218: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
9219: LD_ADDR_VAR 0 1
9223: PUSH
9224: LD_INT 2
9226: PUSH
9227: LD_INT 3
9229: PUSH
9230: LD_INT 4
9232: PUSH
9233: LD_INT 5
9235: PUSH
9236: LD_INT 6
9238: PUSH
9239: LD_INT 7
9241: PUSH
9242: LD_INT 8
9244: PUSH
9245: LD_INT 9
9247: PUSH
9248: LD_INT 10
9250: PUSH
9251: LD_INT 11
9253: PUSH
9254: LD_INT 12
9256: PUSH
9257: LD_INT 13
9259: PUSH
9260: LD_INT 14
9262: PUSH
9263: LD_INT 15
9265: PUSH
9266: LD_INT 16
9268: PUSH
9269: LD_INT 17
9271: PUSH
9272: LD_INT 18
9274: PUSH
9275: LD_INT 19
9277: PUSH
9278: LD_INT 20
9280: PUSH
9281: LD_INT 21
9283: PUSH
9284: LD_INT 22
9286: PUSH
9287: LD_INT 23
9289: PUSH
9290: LD_INT 24
9292: PUSH
9293: LD_INT 25
9295: PUSH
9296: LD_INT 26
9298: PUSH
9299: LD_INT 28
9301: PUSH
9302: LD_INT 30
9304: PUSH
9305: LD_INT 31
9307: PUSH
9308: LD_INT 32
9310: PUSH
9311: LD_INT 34
9313: PUSH
9314: LD_INT 36
9316: PUSH
9317: EMPTY
9318: LIST
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: LIST
9324: LIST
9325: LIST
9326: LIST
9327: LIST
9328: LIST
9329: LIST
9330: LIST
9331: LIST
9332: LIST
9333: LIST
9334: LIST
9335: LIST
9336: LIST
9337: LIST
9338: LIST
9339: LIST
9340: LIST
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: PUSH
9350: LD_INT 101
9352: PUSH
9353: LD_INT 102
9355: PUSH
9356: LD_INT 103
9358: PUSH
9359: LD_INT 104
9361: PUSH
9362: LD_INT 105
9364: PUSH
9365: LD_INT 106
9367: PUSH
9368: LD_INT 107
9370: PUSH
9371: LD_INT 108
9373: PUSH
9374: LD_INT 109
9376: PUSH
9377: LD_INT 110
9379: PUSH
9380: LD_INT 111
9382: PUSH
9383: LD_INT 112
9385: PUSH
9386: LD_INT 114
9388: PUSH
9389: EMPTY
9390: LIST
9391: LIST
9392: LIST
9393: LIST
9394: LIST
9395: LIST
9396: LIST
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: LIST
9402: LIST
9403: PUSH
9404: EMPTY
9405: LIST
9406: LIST
9407: ST_TO_ADDR
9408: GO 10995
9410: LD_INT 12
9412: DOUBLE
9413: EQUAL
9414: IFTRUE 9418
9416: GO 9626
9418: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
9419: LD_ADDR_VAR 0 1
9423: PUSH
9424: LD_INT 1
9426: PUSH
9427: LD_INT 2
9429: PUSH
9430: LD_INT 3
9432: PUSH
9433: LD_INT 4
9435: PUSH
9436: LD_INT 5
9438: PUSH
9439: LD_INT 6
9441: PUSH
9442: LD_INT 7
9444: PUSH
9445: LD_INT 8
9447: PUSH
9448: LD_INT 9
9450: PUSH
9451: LD_INT 10
9453: PUSH
9454: LD_INT 11
9456: PUSH
9457: LD_INT 12
9459: PUSH
9460: LD_INT 13
9462: PUSH
9463: LD_INT 14
9465: PUSH
9466: LD_INT 15
9468: PUSH
9469: LD_INT 16
9471: PUSH
9472: LD_INT 17
9474: PUSH
9475: LD_INT 18
9477: PUSH
9478: LD_INT 19
9480: PUSH
9481: LD_INT 20
9483: PUSH
9484: LD_INT 21
9486: PUSH
9487: LD_INT 22
9489: PUSH
9490: LD_INT 23
9492: PUSH
9493: LD_INT 24
9495: PUSH
9496: LD_INT 25
9498: PUSH
9499: LD_INT 26
9501: PUSH
9502: LD_INT 27
9504: PUSH
9505: LD_INT 28
9507: PUSH
9508: LD_INT 30
9510: PUSH
9511: LD_INT 31
9513: PUSH
9514: LD_INT 32
9516: PUSH
9517: LD_INT 33
9519: PUSH
9520: LD_INT 34
9522: PUSH
9523: LD_INT 36
9525: PUSH
9526: EMPTY
9527: LIST
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: LIST
9538: LIST
9539: LIST
9540: LIST
9541: LIST
9542: LIST
9543: LIST
9544: LIST
9545: LIST
9546: LIST
9547: LIST
9548: LIST
9549: LIST
9550: LIST
9551: LIST
9552: LIST
9553: LIST
9554: LIST
9555: LIST
9556: LIST
9557: LIST
9558: LIST
9559: LIST
9560: LIST
9561: PUSH
9562: LD_INT 101
9564: PUSH
9565: LD_INT 102
9567: PUSH
9568: LD_INT 103
9570: PUSH
9571: LD_INT 104
9573: PUSH
9574: LD_INT 105
9576: PUSH
9577: LD_INT 106
9579: PUSH
9580: LD_INT 107
9582: PUSH
9583: LD_INT 108
9585: PUSH
9586: LD_INT 109
9588: PUSH
9589: LD_INT 110
9591: PUSH
9592: LD_INT 111
9594: PUSH
9595: LD_INT 112
9597: PUSH
9598: LD_INT 113
9600: PUSH
9601: LD_INT 114
9603: PUSH
9604: EMPTY
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: PUSH
9620: EMPTY
9621: LIST
9622: LIST
9623: ST_TO_ADDR
9624: GO 10995
9626: LD_INT 13
9628: DOUBLE
9629: EQUAL
9630: IFTRUE 9634
9632: GO 9830
9634: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
9635: LD_ADDR_VAR 0 1
9639: PUSH
9640: LD_INT 1
9642: PUSH
9643: LD_INT 2
9645: PUSH
9646: LD_INT 3
9648: PUSH
9649: LD_INT 4
9651: PUSH
9652: LD_INT 5
9654: PUSH
9655: LD_INT 8
9657: PUSH
9658: LD_INT 9
9660: PUSH
9661: LD_INT 10
9663: PUSH
9664: LD_INT 11
9666: PUSH
9667: LD_INT 12
9669: PUSH
9670: LD_INT 14
9672: PUSH
9673: LD_INT 15
9675: PUSH
9676: LD_INT 16
9678: PUSH
9679: LD_INT 17
9681: PUSH
9682: LD_INT 18
9684: PUSH
9685: LD_INT 19
9687: PUSH
9688: LD_INT 20
9690: PUSH
9691: LD_INT 21
9693: PUSH
9694: LD_INT 22
9696: PUSH
9697: LD_INT 23
9699: PUSH
9700: LD_INT 24
9702: PUSH
9703: LD_INT 25
9705: PUSH
9706: LD_INT 26
9708: PUSH
9709: LD_INT 27
9711: PUSH
9712: LD_INT 28
9714: PUSH
9715: LD_INT 30
9717: PUSH
9718: LD_INT 31
9720: PUSH
9721: LD_INT 32
9723: PUSH
9724: LD_INT 33
9726: PUSH
9727: LD_INT 34
9729: PUSH
9730: LD_INT 36
9732: PUSH
9733: EMPTY
9734: LIST
9735: LIST
9736: LIST
9737: LIST
9738: LIST
9739: LIST
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: LIST
9745: LIST
9746: LIST
9747: LIST
9748: LIST
9749: LIST
9750: LIST
9751: LIST
9752: LIST
9753: LIST
9754: LIST
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: PUSH
9766: LD_INT 101
9768: PUSH
9769: LD_INT 102
9771: PUSH
9772: LD_INT 103
9774: PUSH
9775: LD_INT 104
9777: PUSH
9778: LD_INT 105
9780: PUSH
9781: LD_INT 106
9783: PUSH
9784: LD_INT 107
9786: PUSH
9787: LD_INT 108
9789: PUSH
9790: LD_INT 109
9792: PUSH
9793: LD_INT 110
9795: PUSH
9796: LD_INT 111
9798: PUSH
9799: LD_INT 112
9801: PUSH
9802: LD_INT 113
9804: PUSH
9805: LD_INT 114
9807: PUSH
9808: EMPTY
9809: LIST
9810: LIST
9811: LIST
9812: LIST
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: LIST
9823: PUSH
9824: EMPTY
9825: LIST
9826: LIST
9827: ST_TO_ADDR
9828: GO 10995
9830: LD_INT 14
9832: DOUBLE
9833: EQUAL
9834: IFTRUE 9838
9836: GO 10050
9838: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
9839: LD_ADDR_VAR 0 1
9843: PUSH
9844: LD_INT 1
9846: PUSH
9847: LD_INT 2
9849: PUSH
9850: LD_INT 3
9852: PUSH
9853: LD_INT 4
9855: PUSH
9856: LD_INT 5
9858: PUSH
9859: LD_INT 6
9861: PUSH
9862: LD_INT 7
9864: PUSH
9865: LD_INT 8
9867: PUSH
9868: LD_INT 9
9870: PUSH
9871: LD_INT 10
9873: PUSH
9874: LD_INT 11
9876: PUSH
9877: LD_INT 12
9879: PUSH
9880: LD_INT 13
9882: PUSH
9883: LD_INT 14
9885: PUSH
9886: LD_INT 15
9888: PUSH
9889: LD_INT 16
9891: PUSH
9892: LD_INT 17
9894: PUSH
9895: LD_INT 18
9897: PUSH
9898: LD_INT 19
9900: PUSH
9901: LD_INT 20
9903: PUSH
9904: LD_INT 21
9906: PUSH
9907: LD_INT 22
9909: PUSH
9910: LD_INT 23
9912: PUSH
9913: LD_INT 24
9915: PUSH
9916: LD_INT 25
9918: PUSH
9919: LD_INT 26
9921: PUSH
9922: LD_INT 27
9924: PUSH
9925: LD_INT 28
9927: PUSH
9928: LD_INT 29
9930: PUSH
9931: LD_INT 30
9933: PUSH
9934: LD_INT 31
9936: PUSH
9937: LD_INT 32
9939: PUSH
9940: LD_INT 33
9942: PUSH
9943: LD_INT 34
9945: PUSH
9946: LD_INT 36
9948: PUSH
9949: EMPTY
9950: LIST
9951: LIST
9952: LIST
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: LIST
9985: PUSH
9986: LD_INT 101
9988: PUSH
9989: LD_INT 102
9991: PUSH
9992: LD_INT 103
9994: PUSH
9995: LD_INT 104
9997: PUSH
9998: LD_INT 105
10000: PUSH
10001: LD_INT 106
10003: PUSH
10004: LD_INT 107
10006: PUSH
10007: LD_INT 108
10009: PUSH
10010: LD_INT 109
10012: PUSH
10013: LD_INT 110
10015: PUSH
10016: LD_INT 111
10018: PUSH
10019: LD_INT 112
10021: PUSH
10022: LD_INT 113
10024: PUSH
10025: LD_INT 114
10027: PUSH
10028: EMPTY
10029: LIST
10030: LIST
10031: LIST
10032: LIST
10033: LIST
10034: LIST
10035: LIST
10036: LIST
10037: LIST
10038: LIST
10039: LIST
10040: LIST
10041: LIST
10042: LIST
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: ST_TO_ADDR
10048: GO 10995
10050: LD_INT 15
10052: DOUBLE
10053: EQUAL
10054: IFTRUE 10058
10056: GO 10270
10058: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
10059: LD_ADDR_VAR 0 1
10063: PUSH
10064: LD_INT 1
10066: PUSH
10067: LD_INT 2
10069: PUSH
10070: LD_INT 3
10072: PUSH
10073: LD_INT 4
10075: PUSH
10076: LD_INT 5
10078: PUSH
10079: LD_INT 6
10081: PUSH
10082: LD_INT 7
10084: PUSH
10085: LD_INT 8
10087: PUSH
10088: LD_INT 9
10090: PUSH
10091: LD_INT 10
10093: PUSH
10094: LD_INT 11
10096: PUSH
10097: LD_INT 12
10099: PUSH
10100: LD_INT 13
10102: PUSH
10103: LD_INT 14
10105: PUSH
10106: LD_INT 15
10108: PUSH
10109: LD_INT 16
10111: PUSH
10112: LD_INT 17
10114: PUSH
10115: LD_INT 18
10117: PUSH
10118: LD_INT 19
10120: PUSH
10121: LD_INT 20
10123: PUSH
10124: LD_INT 21
10126: PUSH
10127: LD_INT 22
10129: PUSH
10130: LD_INT 23
10132: PUSH
10133: LD_INT 24
10135: PUSH
10136: LD_INT 25
10138: PUSH
10139: LD_INT 26
10141: PUSH
10142: LD_INT 27
10144: PUSH
10145: LD_INT 28
10147: PUSH
10148: LD_INT 29
10150: PUSH
10151: LD_INT 30
10153: PUSH
10154: LD_INT 31
10156: PUSH
10157: LD_INT 32
10159: PUSH
10160: LD_INT 33
10162: PUSH
10163: LD_INT 34
10165: PUSH
10166: LD_INT 36
10168: PUSH
10169: EMPTY
10170: LIST
10171: LIST
10172: LIST
10173: LIST
10174: LIST
10175: LIST
10176: LIST
10177: LIST
10178: LIST
10179: LIST
10180: LIST
10181: LIST
10182: LIST
10183: LIST
10184: LIST
10185: LIST
10186: LIST
10187: LIST
10188: LIST
10189: LIST
10190: LIST
10191: LIST
10192: LIST
10193: LIST
10194: LIST
10195: LIST
10196: LIST
10197: LIST
10198: LIST
10199: LIST
10200: LIST
10201: LIST
10202: LIST
10203: LIST
10204: LIST
10205: PUSH
10206: LD_INT 101
10208: PUSH
10209: LD_INT 102
10211: PUSH
10212: LD_INT 103
10214: PUSH
10215: LD_INT 104
10217: PUSH
10218: LD_INT 105
10220: PUSH
10221: LD_INT 106
10223: PUSH
10224: LD_INT 107
10226: PUSH
10227: LD_INT 108
10229: PUSH
10230: LD_INT 109
10232: PUSH
10233: LD_INT 110
10235: PUSH
10236: LD_INT 111
10238: PUSH
10239: LD_INT 112
10241: PUSH
10242: LD_INT 113
10244: PUSH
10245: LD_INT 114
10247: PUSH
10248: EMPTY
10249: LIST
10250: LIST
10251: LIST
10252: LIST
10253: LIST
10254: LIST
10255: LIST
10256: LIST
10257: LIST
10258: LIST
10259: LIST
10260: LIST
10261: LIST
10262: LIST
10263: PUSH
10264: EMPTY
10265: LIST
10266: LIST
10267: ST_TO_ADDR
10268: GO 10995
10270: LD_INT 16
10272: DOUBLE
10273: EQUAL
10274: IFTRUE 10278
10276: GO 10402
10278: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
10279: LD_ADDR_VAR 0 1
10283: PUSH
10284: LD_INT 2
10286: PUSH
10287: LD_INT 4
10289: PUSH
10290: LD_INT 5
10292: PUSH
10293: LD_INT 7
10295: PUSH
10296: LD_INT 11
10298: PUSH
10299: LD_INT 12
10301: PUSH
10302: LD_INT 15
10304: PUSH
10305: LD_INT 16
10307: PUSH
10308: LD_INT 20
10310: PUSH
10311: LD_INT 21
10313: PUSH
10314: LD_INT 22
10316: PUSH
10317: LD_INT 23
10319: PUSH
10320: LD_INT 25
10322: PUSH
10323: LD_INT 26
10325: PUSH
10326: LD_INT 30
10328: PUSH
10329: LD_INT 31
10331: PUSH
10332: LD_INT 32
10334: PUSH
10335: LD_INT 33
10337: PUSH
10338: LD_INT 34
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: LIST
10345: LIST
10346: LIST
10347: LIST
10348: LIST
10349: LIST
10350: LIST
10351: LIST
10352: LIST
10353: LIST
10354: LIST
10355: LIST
10356: LIST
10357: LIST
10358: LIST
10359: LIST
10360: LIST
10361: PUSH
10362: LD_INT 101
10364: PUSH
10365: LD_INT 102
10367: PUSH
10368: LD_INT 103
10370: PUSH
10371: LD_INT 106
10373: PUSH
10374: LD_INT 108
10376: PUSH
10377: LD_INT 112
10379: PUSH
10380: LD_INT 113
10382: PUSH
10383: LD_INT 114
10385: PUSH
10386: EMPTY
10387: LIST
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: LIST
10395: PUSH
10396: EMPTY
10397: LIST
10398: LIST
10399: ST_TO_ADDR
10400: GO 10995
10402: LD_INT 17
10404: DOUBLE
10405: EQUAL
10406: IFTRUE 10410
10408: GO 10622
10410: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
10411: LD_ADDR_VAR 0 1
10415: PUSH
10416: LD_INT 1
10418: PUSH
10419: LD_INT 2
10421: PUSH
10422: LD_INT 3
10424: PUSH
10425: LD_INT 4
10427: PUSH
10428: LD_INT 5
10430: PUSH
10431: LD_INT 6
10433: PUSH
10434: LD_INT 7
10436: PUSH
10437: LD_INT 8
10439: PUSH
10440: LD_INT 9
10442: PUSH
10443: LD_INT 10
10445: PUSH
10446: LD_INT 11
10448: PUSH
10449: LD_INT 12
10451: PUSH
10452: LD_INT 13
10454: PUSH
10455: LD_INT 14
10457: PUSH
10458: LD_INT 15
10460: PUSH
10461: LD_INT 16
10463: PUSH
10464: LD_INT 17
10466: PUSH
10467: LD_INT 18
10469: PUSH
10470: LD_INT 19
10472: PUSH
10473: LD_INT 20
10475: PUSH
10476: LD_INT 21
10478: PUSH
10479: LD_INT 22
10481: PUSH
10482: LD_INT 23
10484: PUSH
10485: LD_INT 24
10487: PUSH
10488: LD_INT 25
10490: PUSH
10491: LD_INT 26
10493: PUSH
10494: LD_INT 27
10496: PUSH
10497: LD_INT 28
10499: PUSH
10500: LD_INT 29
10502: PUSH
10503: LD_INT 30
10505: PUSH
10506: LD_INT 31
10508: PUSH
10509: LD_INT 32
10511: PUSH
10512: LD_INT 33
10514: PUSH
10515: LD_INT 34
10517: PUSH
10518: LD_INT 36
10520: PUSH
10521: EMPTY
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: LIST
10546: LIST
10547: LIST
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: LIST
10557: PUSH
10558: LD_INT 101
10560: PUSH
10561: LD_INT 102
10563: PUSH
10564: LD_INT 103
10566: PUSH
10567: LD_INT 104
10569: PUSH
10570: LD_INT 105
10572: PUSH
10573: LD_INT 106
10575: PUSH
10576: LD_INT 107
10578: PUSH
10579: LD_INT 108
10581: PUSH
10582: LD_INT 109
10584: PUSH
10585: LD_INT 110
10587: PUSH
10588: LD_INT 111
10590: PUSH
10591: LD_INT 112
10593: PUSH
10594: LD_INT 113
10596: PUSH
10597: LD_INT 114
10599: PUSH
10600: EMPTY
10601: LIST
10602: LIST
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: PUSH
10616: EMPTY
10617: LIST
10618: LIST
10619: ST_TO_ADDR
10620: GO 10995
10622: LD_INT 18
10624: DOUBLE
10625: EQUAL
10626: IFTRUE 10630
10628: GO 10766
10630: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
10631: LD_ADDR_VAR 0 1
10635: PUSH
10636: LD_INT 2
10638: PUSH
10639: LD_INT 4
10641: PUSH
10642: LD_INT 5
10644: PUSH
10645: LD_INT 7
10647: PUSH
10648: LD_INT 11
10650: PUSH
10651: LD_INT 12
10653: PUSH
10654: LD_INT 15
10656: PUSH
10657: LD_INT 16
10659: PUSH
10660: LD_INT 20
10662: PUSH
10663: LD_INT 21
10665: PUSH
10666: LD_INT 22
10668: PUSH
10669: LD_INT 23
10671: PUSH
10672: LD_INT 25
10674: PUSH
10675: LD_INT 26
10677: PUSH
10678: LD_INT 30
10680: PUSH
10681: LD_INT 31
10683: PUSH
10684: LD_INT 32
10686: PUSH
10687: LD_INT 33
10689: PUSH
10690: LD_INT 34
10692: PUSH
10693: LD_INT 35
10695: PUSH
10696: LD_INT 36
10698: PUSH
10699: EMPTY
10700: LIST
10701: LIST
10702: LIST
10703: LIST
10704: LIST
10705: LIST
10706: LIST
10707: LIST
10708: LIST
10709: LIST
10710: LIST
10711: LIST
10712: LIST
10713: LIST
10714: LIST
10715: LIST
10716: LIST
10717: LIST
10718: LIST
10719: LIST
10720: LIST
10721: PUSH
10722: LD_INT 101
10724: PUSH
10725: LD_INT 102
10727: PUSH
10728: LD_INT 103
10730: PUSH
10731: LD_INT 106
10733: PUSH
10734: LD_INT 108
10736: PUSH
10737: LD_INT 112
10739: PUSH
10740: LD_INT 113
10742: PUSH
10743: LD_INT 114
10745: PUSH
10746: LD_INT 115
10748: PUSH
10749: EMPTY
10750: LIST
10751: LIST
10752: LIST
10753: LIST
10754: LIST
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: PUSH
10760: EMPTY
10761: LIST
10762: LIST
10763: ST_TO_ADDR
10764: GO 10995
10766: LD_INT 19
10768: DOUBLE
10769: EQUAL
10770: IFTRUE 10774
10772: GO 10994
10774: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
10775: LD_ADDR_VAR 0 1
10779: PUSH
10780: LD_INT 1
10782: PUSH
10783: LD_INT 2
10785: PUSH
10786: LD_INT 3
10788: PUSH
10789: LD_INT 4
10791: PUSH
10792: LD_INT 5
10794: PUSH
10795: LD_INT 6
10797: PUSH
10798: LD_INT 7
10800: PUSH
10801: LD_INT 8
10803: PUSH
10804: LD_INT 9
10806: PUSH
10807: LD_INT 10
10809: PUSH
10810: LD_INT 11
10812: PUSH
10813: LD_INT 12
10815: PUSH
10816: LD_INT 13
10818: PUSH
10819: LD_INT 14
10821: PUSH
10822: LD_INT 15
10824: PUSH
10825: LD_INT 16
10827: PUSH
10828: LD_INT 17
10830: PUSH
10831: LD_INT 18
10833: PUSH
10834: LD_INT 19
10836: PUSH
10837: LD_INT 20
10839: PUSH
10840: LD_INT 21
10842: PUSH
10843: LD_INT 22
10845: PUSH
10846: LD_INT 23
10848: PUSH
10849: LD_INT 24
10851: PUSH
10852: LD_INT 25
10854: PUSH
10855: LD_INT 26
10857: PUSH
10858: LD_INT 27
10860: PUSH
10861: LD_INT 28
10863: PUSH
10864: LD_INT 29
10866: PUSH
10867: LD_INT 30
10869: PUSH
10870: LD_INT 31
10872: PUSH
10873: LD_INT 32
10875: PUSH
10876: LD_INT 33
10878: PUSH
10879: LD_INT 34
10881: PUSH
10882: LD_INT 35
10884: PUSH
10885: LD_INT 36
10887: PUSH
10888: EMPTY
10889: LIST
10890: LIST
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: LIST
10901: LIST
10902: LIST
10903: LIST
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: LIST
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: PUSH
10926: LD_INT 101
10928: PUSH
10929: LD_INT 102
10931: PUSH
10932: LD_INT 103
10934: PUSH
10935: LD_INT 104
10937: PUSH
10938: LD_INT 105
10940: PUSH
10941: LD_INT 106
10943: PUSH
10944: LD_INT 107
10946: PUSH
10947: LD_INT 108
10949: PUSH
10950: LD_INT 109
10952: PUSH
10953: LD_INT 110
10955: PUSH
10956: LD_INT 111
10958: PUSH
10959: LD_INT 112
10961: PUSH
10962: LD_INT 113
10964: PUSH
10965: LD_INT 114
10967: PUSH
10968: LD_INT 115
10970: PUSH
10971: EMPTY
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: PUSH
10988: EMPTY
10989: LIST
10990: LIST
10991: ST_TO_ADDR
10992: GO 10995
10994: POP
// end else
10995: GO 11214
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
10997: LD_ADDR_VAR 0 1
11001: PUSH
11002: LD_INT 1
11004: PUSH
11005: LD_INT 2
11007: PUSH
11008: LD_INT 3
11010: PUSH
11011: LD_INT 4
11013: PUSH
11014: LD_INT 5
11016: PUSH
11017: LD_INT 6
11019: PUSH
11020: LD_INT 7
11022: PUSH
11023: LD_INT 8
11025: PUSH
11026: LD_INT 9
11028: PUSH
11029: LD_INT 10
11031: PUSH
11032: LD_INT 11
11034: PUSH
11035: LD_INT 12
11037: PUSH
11038: LD_INT 13
11040: PUSH
11041: LD_INT 14
11043: PUSH
11044: LD_INT 15
11046: PUSH
11047: LD_INT 16
11049: PUSH
11050: LD_INT 17
11052: PUSH
11053: LD_INT 18
11055: PUSH
11056: LD_INT 19
11058: PUSH
11059: LD_INT 20
11061: PUSH
11062: LD_INT 21
11064: PUSH
11065: LD_INT 22
11067: PUSH
11068: LD_INT 23
11070: PUSH
11071: LD_INT 24
11073: PUSH
11074: LD_INT 25
11076: PUSH
11077: LD_INT 26
11079: PUSH
11080: LD_INT 27
11082: PUSH
11083: LD_INT 28
11085: PUSH
11086: LD_INT 29
11088: PUSH
11089: LD_INT 30
11091: PUSH
11092: LD_INT 31
11094: PUSH
11095: LD_INT 32
11097: PUSH
11098: LD_INT 33
11100: PUSH
11101: LD_INT 34
11103: PUSH
11104: LD_INT 35
11106: PUSH
11107: LD_INT 36
11109: PUSH
11110: EMPTY
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: LIST
11124: LIST
11125: LIST
11126: LIST
11127: LIST
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: LIST
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: LIST
11147: PUSH
11148: LD_INT 101
11150: PUSH
11151: LD_INT 102
11153: PUSH
11154: LD_INT 103
11156: PUSH
11157: LD_INT 104
11159: PUSH
11160: LD_INT 105
11162: PUSH
11163: LD_INT 106
11165: PUSH
11166: LD_INT 107
11168: PUSH
11169: LD_INT 108
11171: PUSH
11172: LD_INT 109
11174: PUSH
11175: LD_INT 110
11177: PUSH
11178: LD_INT 111
11180: PUSH
11181: LD_INT 112
11183: PUSH
11184: LD_INT 113
11186: PUSH
11187: LD_INT 114
11189: PUSH
11190: LD_INT 115
11192: PUSH
11193: EMPTY
11194: LIST
11195: LIST
11196: LIST
11197: LIST
11198: LIST
11199: LIST
11200: LIST
11201: LIST
11202: LIST
11203: LIST
11204: LIST
11205: LIST
11206: LIST
11207: LIST
11208: LIST
11209: PUSH
11210: EMPTY
11211: LIST
11212: LIST
11213: ST_TO_ADDR
// if result then
11214: LD_VAR 0 1
11218: IFFALSE 11507
// begin normal :=  ;
11220: LD_ADDR_VAR 0 3
11224: PUSH
11225: LD_STRING 
11227: ST_TO_ADDR
// hardcore :=  ;
11228: LD_ADDR_VAR 0 4
11232: PUSH
11233: LD_STRING 
11235: ST_TO_ADDR
// for i = 1 to normalCounter do
11236: LD_ADDR_VAR 0 5
11240: PUSH
11241: DOUBLE
11242: LD_INT 1
11244: DEC
11245: ST_TO_ADDR
11246: LD_EXP 28
11250: PUSH
11251: FOR_TO
11252: IFFALSE 11353
// begin tmp := 0 ;
11254: LD_ADDR_VAR 0 2
11258: PUSH
11259: LD_STRING 0
11261: ST_TO_ADDR
// if result [ 1 ] then
11262: LD_VAR 0 1
11266: PUSH
11267: LD_INT 1
11269: ARRAY
11270: IFFALSE 11335
// if result [ 1 ] [ 1 ] = i then
11272: LD_VAR 0 1
11276: PUSH
11277: LD_INT 1
11279: ARRAY
11280: PUSH
11281: LD_INT 1
11283: ARRAY
11284: PUSH
11285: LD_VAR 0 5
11289: EQUAL
11290: IFFALSE 11335
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
11292: LD_ADDR_VAR 0 1
11296: PUSH
11297: LD_VAR 0 1
11301: PPUSH
11302: LD_INT 1
11304: PPUSH
11305: LD_VAR 0 1
11309: PUSH
11310: LD_INT 1
11312: ARRAY
11313: PPUSH
11314: LD_INT 1
11316: PPUSH
11317: CALL_OW 3
11321: PPUSH
11322: CALL_OW 1
11326: ST_TO_ADDR
// tmp := 1 ;
11327: LD_ADDR_VAR 0 2
11331: PUSH
11332: LD_STRING 1
11334: ST_TO_ADDR
// end ; normal := normal & tmp ;
11335: LD_ADDR_VAR 0 3
11339: PUSH
11340: LD_VAR 0 3
11344: PUSH
11345: LD_VAR 0 2
11349: STR
11350: ST_TO_ADDR
// end ;
11351: GO 11251
11353: POP
11354: POP
// for i = 1 to hardcoreCounter do
11355: LD_ADDR_VAR 0 5
11359: PUSH
11360: DOUBLE
11361: LD_INT 1
11363: DEC
11364: ST_TO_ADDR
11365: LD_EXP 29
11369: PUSH
11370: FOR_TO
11371: IFFALSE 11476
// begin tmp := 0 ;
11373: LD_ADDR_VAR 0 2
11377: PUSH
11378: LD_STRING 0
11380: ST_TO_ADDR
// if result [ 2 ] then
11381: LD_VAR 0 1
11385: PUSH
11386: LD_INT 2
11388: ARRAY
11389: IFFALSE 11458
// if result [ 2 ] [ 1 ] = 100 + i then
11391: LD_VAR 0 1
11395: PUSH
11396: LD_INT 2
11398: ARRAY
11399: PUSH
11400: LD_INT 1
11402: ARRAY
11403: PUSH
11404: LD_INT 100
11406: PUSH
11407: LD_VAR 0 5
11411: PLUS
11412: EQUAL
11413: IFFALSE 11458
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
11415: LD_ADDR_VAR 0 1
11419: PUSH
11420: LD_VAR 0 1
11424: PPUSH
11425: LD_INT 2
11427: PPUSH
11428: LD_VAR 0 1
11432: PUSH
11433: LD_INT 2
11435: ARRAY
11436: PPUSH
11437: LD_INT 1
11439: PPUSH
11440: CALL_OW 3
11444: PPUSH
11445: CALL_OW 1
11449: ST_TO_ADDR
// tmp := 1 ;
11450: LD_ADDR_VAR 0 2
11454: PUSH
11455: LD_STRING 1
11457: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
11458: LD_ADDR_VAR 0 4
11462: PUSH
11463: LD_VAR 0 4
11467: PUSH
11468: LD_VAR 0 2
11472: STR
11473: ST_TO_ADDR
// end ;
11474: GO 11370
11476: POP
11477: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
11478: LD_STRING getStreamItemsFromMission("
11480: PUSH
11481: LD_VAR 0 3
11485: STR
11486: PUSH
11487: LD_STRING ","
11489: STR
11490: PUSH
11491: LD_VAR 0 4
11495: STR
11496: PUSH
11497: LD_STRING ")
11499: STR
11500: PPUSH
11501: CALL_OW 559
// end else
11505: GO 11514
// ToLua ( getStreamItemsFromMission("","") ) ;
11507: LD_STRING getStreamItemsFromMission("","")
11509: PPUSH
11510: CALL_OW 559
// end ;
11514: LD_VAR 0 1
11518: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11519: LD_EXP 27
11523: PUSH
11524: LD_EXP 32
11528: AND
11529: IFFALSE 11653
11531: GO 11533
11533: DISABLE
11534: LD_INT 0
11536: PPUSH
11537: PPUSH
// begin enable ;
11538: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11539: LD_ADDR_VAR 0 2
11543: PUSH
11544: LD_INT 22
11546: PUSH
11547: LD_OWVAR 2
11551: PUSH
11552: EMPTY
11553: LIST
11554: LIST
11555: PUSH
11556: LD_INT 2
11558: PUSH
11559: LD_INT 34
11561: PUSH
11562: LD_INT 7
11564: PUSH
11565: EMPTY
11566: LIST
11567: LIST
11568: PUSH
11569: LD_INT 34
11571: PUSH
11572: LD_INT 45
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: PUSH
11579: LD_INT 34
11581: PUSH
11582: LD_INT 28
11584: PUSH
11585: EMPTY
11586: LIST
11587: LIST
11588: PUSH
11589: LD_INT 34
11591: PUSH
11592: LD_INT 47
11594: PUSH
11595: EMPTY
11596: LIST
11597: LIST
11598: PUSH
11599: EMPTY
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: PUSH
11606: EMPTY
11607: LIST
11608: LIST
11609: PPUSH
11610: CALL_OW 69
11614: ST_TO_ADDR
// if not tmp then
11615: LD_VAR 0 2
11619: NOT
11620: IFFALSE 11624
// exit ;
11622: GO 11653
// for i in tmp do
11624: LD_ADDR_VAR 0 1
11628: PUSH
11629: LD_VAR 0 2
11633: PUSH
11634: FOR_IN
11635: IFFALSE 11651
// begin SetLives ( i , 0 ) ;
11637: LD_VAR 0 1
11641: PPUSH
11642: LD_INT 0
11644: PPUSH
11645: CALL_OW 234
// end ;
11649: GO 11634
11651: POP
11652: POP
// end ;
11653: PPOPN 2
11655: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11656: LD_EXP 27
11660: PUSH
11661: LD_EXP 33
11665: AND
11666: IFFALSE 11750
11668: GO 11670
11670: DISABLE
11671: LD_INT 0
11673: PPUSH
11674: PPUSH
// begin enable ;
11675: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11676: LD_ADDR_VAR 0 2
11680: PUSH
11681: LD_INT 22
11683: PUSH
11684: LD_OWVAR 2
11688: PUSH
11689: EMPTY
11690: LIST
11691: LIST
11692: PUSH
11693: LD_INT 32
11695: PUSH
11696: LD_INT 3
11698: PUSH
11699: EMPTY
11700: LIST
11701: LIST
11702: PUSH
11703: EMPTY
11704: LIST
11705: LIST
11706: PPUSH
11707: CALL_OW 69
11711: ST_TO_ADDR
// if not tmp then
11712: LD_VAR 0 2
11716: NOT
11717: IFFALSE 11721
// exit ;
11719: GO 11750
// for i in tmp do
11721: LD_ADDR_VAR 0 1
11725: PUSH
11726: LD_VAR 0 2
11730: PUSH
11731: FOR_IN
11732: IFFALSE 11748
// begin SetLives ( i , 0 ) ;
11734: LD_VAR 0 1
11738: PPUSH
11739: LD_INT 0
11741: PPUSH
11742: CALL_OW 234
// end ;
11746: GO 11731
11748: POP
11749: POP
// end ;
11750: PPOPN 2
11752: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11753: LD_EXP 27
11757: PUSH
11758: LD_EXP 30
11762: AND
11763: IFFALSE 11856
11765: GO 11767
11767: DISABLE
11768: LD_INT 0
11770: PPUSH
// begin enable ;
11771: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11772: LD_ADDR_VAR 0 1
11776: PUSH
11777: LD_INT 22
11779: PUSH
11780: LD_OWVAR 2
11784: PUSH
11785: EMPTY
11786: LIST
11787: LIST
11788: PUSH
11789: LD_INT 2
11791: PUSH
11792: LD_INT 25
11794: PUSH
11795: LD_INT 5
11797: PUSH
11798: EMPTY
11799: LIST
11800: LIST
11801: PUSH
11802: LD_INT 25
11804: PUSH
11805: LD_INT 9
11807: PUSH
11808: EMPTY
11809: LIST
11810: LIST
11811: PUSH
11812: LD_INT 25
11814: PUSH
11815: LD_INT 8
11817: PUSH
11818: EMPTY
11819: LIST
11820: LIST
11821: PUSH
11822: EMPTY
11823: LIST
11824: LIST
11825: LIST
11826: LIST
11827: PUSH
11828: EMPTY
11829: LIST
11830: LIST
11831: PPUSH
11832: CALL_OW 69
11836: PUSH
11837: FOR_IN
11838: IFFALSE 11854
// begin SetClass ( i , 1 ) ;
11840: LD_VAR 0 1
11844: PPUSH
11845: LD_INT 1
11847: PPUSH
11848: CALL_OW 336
// end ;
11852: GO 11837
11854: POP
11855: POP
// end ;
11856: PPOPN 1
11858: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
11859: LD_EXP 27
11863: PUSH
11864: LD_EXP 31
11868: AND
11869: PUSH
11870: LD_OWVAR 65
11874: PUSH
11875: LD_INT 7
11877: LESS
11878: AND
11879: IFFALSE 11893
11881: GO 11883
11883: DISABLE
// begin enable ;
11884: ENABLE
// game_speed := 7 ;
11885: LD_ADDR_OWVAR 65
11889: PUSH
11890: LD_INT 7
11892: ST_TO_ADDR
// end ;
11893: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11894: LD_EXP 27
11898: PUSH
11899: LD_EXP 34
11903: AND
11904: IFFALSE 12106
11906: GO 11908
11908: DISABLE
11909: LD_INT 0
11911: PPUSH
11912: PPUSH
11913: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11914: LD_ADDR_VAR 0 3
11918: PUSH
11919: LD_INT 81
11921: PUSH
11922: LD_OWVAR 2
11926: PUSH
11927: EMPTY
11928: LIST
11929: LIST
11930: PUSH
11931: LD_INT 21
11933: PUSH
11934: LD_INT 1
11936: PUSH
11937: EMPTY
11938: LIST
11939: LIST
11940: PUSH
11941: EMPTY
11942: LIST
11943: LIST
11944: PPUSH
11945: CALL_OW 69
11949: ST_TO_ADDR
// if not tmp then
11950: LD_VAR 0 3
11954: NOT
11955: IFFALSE 11959
// exit ;
11957: GO 12106
// if tmp > 5 then
11959: LD_VAR 0 3
11963: PUSH
11964: LD_INT 5
11966: GREATER
11967: IFFALSE 11979
// k := 5 else
11969: LD_ADDR_VAR 0 2
11973: PUSH
11974: LD_INT 5
11976: ST_TO_ADDR
11977: GO 11989
// k := tmp ;
11979: LD_ADDR_VAR 0 2
11983: PUSH
11984: LD_VAR 0 3
11988: ST_TO_ADDR
// for i := 1 to k do
11989: LD_ADDR_VAR 0 1
11993: PUSH
11994: DOUBLE
11995: LD_INT 1
11997: DEC
11998: ST_TO_ADDR
11999: LD_VAR 0 2
12003: PUSH
12004: FOR_TO
12005: IFFALSE 12104
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
12007: LD_VAR 0 3
12011: PUSH
12012: LD_VAR 0 1
12016: ARRAY
12017: PPUSH
12018: LD_VAR 0 1
12022: PUSH
12023: LD_INT 4
12025: MOD
12026: PUSH
12027: LD_INT 1
12029: PLUS
12030: PPUSH
12031: CALL_OW 259
12035: PUSH
12036: LD_INT 10
12038: LESS
12039: IFFALSE 12102
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12041: LD_VAR 0 3
12045: PUSH
12046: LD_VAR 0 1
12050: ARRAY
12051: PPUSH
12052: LD_VAR 0 1
12056: PUSH
12057: LD_INT 4
12059: MOD
12060: PUSH
12061: LD_INT 1
12063: PLUS
12064: PPUSH
12065: LD_VAR 0 3
12069: PUSH
12070: LD_VAR 0 1
12074: ARRAY
12075: PPUSH
12076: LD_VAR 0 1
12080: PUSH
12081: LD_INT 4
12083: MOD
12084: PUSH
12085: LD_INT 1
12087: PLUS
12088: PPUSH
12089: CALL_OW 259
12093: PUSH
12094: LD_INT 1
12096: PLUS
12097: PPUSH
12098: CALL_OW 237
12102: GO 12004
12104: POP
12105: POP
// end ;
12106: PPOPN 3
12108: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12109: LD_EXP 27
12113: PUSH
12114: LD_EXP 35
12118: AND
12119: IFFALSE 12139
12121: GO 12123
12123: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12124: LD_INT 4
12126: PPUSH
12127: LD_OWVAR 2
12131: PPUSH
12132: LD_INT 0
12134: PPUSH
12135: CALL_OW 324
12139: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12140: LD_EXP 27
12144: PUSH
12145: LD_EXP 64
12149: AND
12150: IFFALSE 12170
12152: GO 12154
12154: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
12155: LD_INT 19
12157: PPUSH
12158: LD_OWVAR 2
12162: PPUSH
12163: LD_INT 0
12165: PPUSH
12166: CALL_OW 324
12170: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
12171: LD_EXP 27
12175: PUSH
12176: LD_EXP 36
12180: AND
12181: IFFALSE 12283
12183: GO 12185
12185: DISABLE
12186: LD_INT 0
12188: PPUSH
12189: PPUSH
// begin enable ;
12190: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
12191: LD_ADDR_VAR 0 2
12195: PUSH
12196: LD_INT 22
12198: PUSH
12199: LD_OWVAR 2
12203: PUSH
12204: EMPTY
12205: LIST
12206: LIST
12207: PUSH
12208: LD_INT 2
12210: PUSH
12211: LD_INT 34
12213: PUSH
12214: LD_INT 11
12216: PUSH
12217: EMPTY
12218: LIST
12219: LIST
12220: PUSH
12221: LD_INT 34
12223: PUSH
12224: LD_INT 30
12226: PUSH
12227: EMPTY
12228: LIST
12229: LIST
12230: PUSH
12231: EMPTY
12232: LIST
12233: LIST
12234: LIST
12235: PUSH
12236: EMPTY
12237: LIST
12238: LIST
12239: PPUSH
12240: CALL_OW 69
12244: ST_TO_ADDR
// if not tmp then
12245: LD_VAR 0 2
12249: NOT
12250: IFFALSE 12254
// exit ;
12252: GO 12283
// for i in tmp do
12254: LD_ADDR_VAR 0 1
12258: PUSH
12259: LD_VAR 0 2
12263: PUSH
12264: FOR_IN
12265: IFFALSE 12281
// begin SetLives ( i , 0 ) ;
12267: LD_VAR 0 1
12271: PPUSH
12272: LD_INT 0
12274: PPUSH
12275: CALL_OW 234
// end ;
12279: GO 12264
12281: POP
12282: POP
// end ;
12283: PPOPN 2
12285: END
// every 0 0$1 trigger StreamModeActive and sBunker do
12286: LD_EXP 27
12290: PUSH
12291: LD_EXP 37
12295: AND
12296: IFFALSE 12316
12298: GO 12300
12300: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
12301: LD_INT 32
12303: PPUSH
12304: LD_OWVAR 2
12308: PPUSH
12309: LD_INT 0
12311: PPUSH
12312: CALL_OW 324
12316: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12317: LD_EXP 27
12321: PUSH
12322: LD_EXP 38
12326: AND
12327: IFFALSE 12508
12329: GO 12331
12331: DISABLE
12332: LD_INT 0
12334: PPUSH
12335: PPUSH
12336: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12337: LD_ADDR_VAR 0 2
12341: PUSH
12342: LD_INT 22
12344: PUSH
12345: LD_OWVAR 2
12349: PUSH
12350: EMPTY
12351: LIST
12352: LIST
12353: PUSH
12354: LD_INT 33
12356: PUSH
12357: LD_INT 3
12359: PUSH
12360: EMPTY
12361: LIST
12362: LIST
12363: PUSH
12364: EMPTY
12365: LIST
12366: LIST
12367: PPUSH
12368: CALL_OW 69
12372: ST_TO_ADDR
// if not tmp then
12373: LD_VAR 0 2
12377: NOT
12378: IFFALSE 12382
// exit ;
12380: GO 12508
// side := 0 ;
12382: LD_ADDR_VAR 0 3
12386: PUSH
12387: LD_INT 0
12389: ST_TO_ADDR
// for i := 1 to 8 do
12390: LD_ADDR_VAR 0 1
12394: PUSH
12395: DOUBLE
12396: LD_INT 1
12398: DEC
12399: ST_TO_ADDR
12400: LD_INT 8
12402: PUSH
12403: FOR_TO
12404: IFFALSE 12452
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12406: LD_OWVAR 2
12410: PUSH
12411: LD_VAR 0 1
12415: NONEQUAL
12416: PUSH
12417: LD_OWVAR 2
12421: PPUSH
12422: LD_VAR 0 1
12426: PPUSH
12427: CALL_OW 81
12431: PUSH
12432: LD_INT 2
12434: EQUAL
12435: AND
12436: IFFALSE 12450
// begin side := i ;
12438: LD_ADDR_VAR 0 3
12442: PUSH
12443: LD_VAR 0 1
12447: ST_TO_ADDR
// break ;
12448: GO 12452
// end ;
12450: GO 12403
12452: POP
12453: POP
// if not side then
12454: LD_VAR 0 3
12458: NOT
12459: IFFALSE 12463
// exit ;
12461: GO 12508
// for i := 1 to tmp do
12463: LD_ADDR_VAR 0 1
12467: PUSH
12468: DOUBLE
12469: LD_INT 1
12471: DEC
12472: ST_TO_ADDR
12473: LD_VAR 0 2
12477: PUSH
12478: FOR_TO
12479: IFFALSE 12506
// if Prob ( 60 ) then
12481: LD_INT 60
12483: PPUSH
12484: CALL_OW 13
12488: IFFALSE 12504
// SetSide ( i , side ) ;
12490: LD_VAR 0 1
12494: PPUSH
12495: LD_VAR 0 3
12499: PPUSH
12500: CALL_OW 235
12504: GO 12478
12506: POP
12507: POP
// end ;
12508: PPOPN 3
12510: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12511: LD_EXP 27
12515: PUSH
12516: LD_EXP 40
12520: AND
12521: IFFALSE 12640
12523: GO 12525
12525: DISABLE
12526: LD_INT 0
12528: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12529: LD_ADDR_VAR 0 1
12533: PUSH
12534: LD_INT 22
12536: PUSH
12537: LD_OWVAR 2
12541: PUSH
12542: EMPTY
12543: LIST
12544: LIST
12545: PUSH
12546: LD_INT 21
12548: PUSH
12549: LD_INT 1
12551: PUSH
12552: EMPTY
12553: LIST
12554: LIST
12555: PUSH
12556: LD_INT 3
12558: PUSH
12559: LD_INT 23
12561: PUSH
12562: LD_INT 0
12564: PUSH
12565: EMPTY
12566: LIST
12567: LIST
12568: PUSH
12569: EMPTY
12570: LIST
12571: LIST
12572: PUSH
12573: EMPTY
12574: LIST
12575: LIST
12576: LIST
12577: PPUSH
12578: CALL_OW 69
12582: PUSH
12583: FOR_IN
12584: IFFALSE 12638
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12586: LD_VAR 0 1
12590: PPUSH
12591: CALL_OW 257
12595: PUSH
12596: LD_INT 1
12598: PUSH
12599: LD_INT 2
12601: PUSH
12602: LD_INT 3
12604: PUSH
12605: LD_INT 4
12607: PUSH
12608: EMPTY
12609: LIST
12610: LIST
12611: LIST
12612: LIST
12613: IN
12614: IFFALSE 12636
// SetClass ( un , rand ( 1 , 4 ) ) ;
12616: LD_VAR 0 1
12620: PPUSH
12621: LD_INT 1
12623: PPUSH
12624: LD_INT 4
12626: PPUSH
12627: CALL_OW 12
12631: PPUSH
12632: CALL_OW 336
12636: GO 12583
12638: POP
12639: POP
// end ;
12640: PPOPN 1
12642: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12643: LD_EXP 27
12647: PUSH
12648: LD_EXP 39
12652: AND
12653: IFFALSE 12732
12655: GO 12657
12657: DISABLE
12658: LD_INT 0
12660: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12661: LD_ADDR_VAR 0 1
12665: PUSH
12666: LD_INT 22
12668: PUSH
12669: LD_OWVAR 2
12673: PUSH
12674: EMPTY
12675: LIST
12676: LIST
12677: PUSH
12678: LD_INT 21
12680: PUSH
12681: LD_INT 3
12683: PUSH
12684: EMPTY
12685: LIST
12686: LIST
12687: PUSH
12688: EMPTY
12689: LIST
12690: LIST
12691: PPUSH
12692: CALL_OW 69
12696: ST_TO_ADDR
// if not tmp then
12697: LD_VAR 0 1
12701: NOT
12702: IFFALSE 12706
// exit ;
12704: GO 12732
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12706: LD_VAR 0 1
12710: PUSH
12711: LD_INT 1
12713: PPUSH
12714: LD_VAR 0 1
12718: PPUSH
12719: CALL_OW 12
12723: ARRAY
12724: PPUSH
12725: LD_INT 100
12727: PPUSH
12728: CALL_OW 234
// end ;
12732: PPOPN 1
12734: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12735: LD_EXP 27
12739: PUSH
12740: LD_EXP 41
12744: AND
12745: IFFALSE 12843
12747: GO 12749
12749: DISABLE
12750: LD_INT 0
12752: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12753: LD_ADDR_VAR 0 1
12757: PUSH
12758: LD_INT 22
12760: PUSH
12761: LD_OWVAR 2
12765: PUSH
12766: EMPTY
12767: LIST
12768: LIST
12769: PUSH
12770: LD_INT 21
12772: PUSH
12773: LD_INT 1
12775: PUSH
12776: EMPTY
12777: LIST
12778: LIST
12779: PUSH
12780: EMPTY
12781: LIST
12782: LIST
12783: PPUSH
12784: CALL_OW 69
12788: ST_TO_ADDR
// if not tmp then
12789: LD_VAR 0 1
12793: NOT
12794: IFFALSE 12798
// exit ;
12796: GO 12843
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12798: LD_VAR 0 1
12802: PUSH
12803: LD_INT 1
12805: PPUSH
12806: LD_VAR 0 1
12810: PPUSH
12811: CALL_OW 12
12815: ARRAY
12816: PPUSH
12817: LD_INT 1
12819: PPUSH
12820: LD_INT 4
12822: PPUSH
12823: CALL_OW 12
12827: PPUSH
12828: LD_INT 3000
12830: PPUSH
12831: LD_INT 9000
12833: PPUSH
12834: CALL_OW 12
12838: PPUSH
12839: CALL_OW 492
// end ;
12843: PPOPN 1
12845: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12846: LD_EXP 27
12850: PUSH
12851: LD_EXP 42
12855: AND
12856: IFFALSE 12876
12858: GO 12860
12860: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
12861: LD_INT 1
12863: PPUSH
12864: LD_OWVAR 2
12868: PPUSH
12869: LD_INT 0
12871: PPUSH
12872: CALL_OW 324
12876: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
12877: LD_EXP 27
12881: PUSH
12882: LD_EXP 43
12886: AND
12887: IFFALSE 12970
12889: GO 12891
12891: DISABLE
12892: LD_INT 0
12894: PPUSH
12895: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12896: LD_ADDR_VAR 0 2
12900: PUSH
12901: LD_INT 22
12903: PUSH
12904: LD_OWVAR 2
12908: PUSH
12909: EMPTY
12910: LIST
12911: LIST
12912: PUSH
12913: LD_INT 21
12915: PUSH
12916: LD_INT 3
12918: PUSH
12919: EMPTY
12920: LIST
12921: LIST
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: PPUSH
12927: CALL_OW 69
12931: ST_TO_ADDR
// if not tmp then
12932: LD_VAR 0 2
12936: NOT
12937: IFFALSE 12941
// exit ;
12939: GO 12970
// for i in tmp do
12941: LD_ADDR_VAR 0 1
12945: PUSH
12946: LD_VAR 0 2
12950: PUSH
12951: FOR_IN
12952: IFFALSE 12968
// SetBLevel ( i , 10 ) ;
12954: LD_VAR 0 1
12958: PPUSH
12959: LD_INT 10
12961: PPUSH
12962: CALL_OW 241
12966: GO 12951
12968: POP
12969: POP
// end ;
12970: PPOPN 2
12972: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12973: LD_EXP 27
12977: PUSH
12978: LD_EXP 44
12982: AND
12983: IFFALSE 13094
12985: GO 12987
12987: DISABLE
12988: LD_INT 0
12990: PPUSH
12991: PPUSH
12992: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12993: LD_ADDR_VAR 0 3
12997: PUSH
12998: LD_INT 22
13000: PUSH
13001: LD_OWVAR 2
13005: PUSH
13006: EMPTY
13007: LIST
13008: LIST
13009: PUSH
13010: LD_INT 25
13012: PUSH
13013: LD_INT 1
13015: PUSH
13016: EMPTY
13017: LIST
13018: LIST
13019: PUSH
13020: EMPTY
13021: LIST
13022: LIST
13023: PPUSH
13024: CALL_OW 69
13028: ST_TO_ADDR
// if not tmp then
13029: LD_VAR 0 3
13033: NOT
13034: IFFALSE 13038
// exit ;
13036: GO 13094
// un := tmp [ rand ( 1 , tmp ) ] ;
13038: LD_ADDR_VAR 0 2
13042: PUSH
13043: LD_VAR 0 3
13047: PUSH
13048: LD_INT 1
13050: PPUSH
13051: LD_VAR 0 3
13055: PPUSH
13056: CALL_OW 12
13060: ARRAY
13061: ST_TO_ADDR
// if Crawls ( un ) then
13062: LD_VAR 0 2
13066: PPUSH
13067: CALL_OW 318
13071: IFFALSE 13082
// ComWalk ( un ) ;
13073: LD_VAR 0 2
13077: PPUSH
13078: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13082: LD_VAR 0 2
13086: PPUSH
13087: LD_INT 5
13089: PPUSH
13090: CALL_OW 336
// end ;
13094: PPOPN 3
13096: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
13097: LD_EXP 27
13101: PUSH
13102: LD_EXP 45
13106: AND
13107: PUSH
13108: LD_OWVAR 67
13112: PUSH
13113: LD_INT 3
13115: LESS
13116: AND
13117: IFFALSE 13136
13119: GO 13121
13121: DISABLE
// Difficulty := Difficulty + 1 ;
13122: LD_ADDR_OWVAR 67
13126: PUSH
13127: LD_OWVAR 67
13131: PUSH
13132: LD_INT 1
13134: PLUS
13135: ST_TO_ADDR
13136: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
13137: LD_EXP 27
13141: PUSH
13142: LD_EXP 46
13146: AND
13147: IFFALSE 13250
13149: GO 13151
13151: DISABLE
13152: LD_INT 0
13154: PPUSH
// begin for i := 1 to 5 do
13155: LD_ADDR_VAR 0 1
13159: PUSH
13160: DOUBLE
13161: LD_INT 1
13163: DEC
13164: ST_TO_ADDR
13165: LD_INT 5
13167: PUSH
13168: FOR_TO
13169: IFFALSE 13248
// begin uc_nation := nation_nature ;
13171: LD_ADDR_OWVAR 21
13175: PUSH
13176: LD_INT 0
13178: ST_TO_ADDR
// uc_side := 0 ;
13179: LD_ADDR_OWVAR 20
13183: PUSH
13184: LD_INT 0
13186: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13187: LD_ADDR_OWVAR 29
13191: PUSH
13192: LD_INT 12
13194: PUSH
13195: LD_INT 12
13197: PUSH
13198: EMPTY
13199: LIST
13200: LIST
13201: ST_TO_ADDR
// hc_agressivity := 20 ;
13202: LD_ADDR_OWVAR 35
13206: PUSH
13207: LD_INT 20
13209: ST_TO_ADDR
// hc_class := class_tiger ;
13210: LD_ADDR_OWVAR 28
13214: PUSH
13215: LD_INT 14
13217: ST_TO_ADDR
// hc_gallery :=  ;
13218: LD_ADDR_OWVAR 33
13222: PUSH
13223: LD_STRING 
13225: ST_TO_ADDR
// hc_name :=  ;
13226: LD_ADDR_OWVAR 26
13230: PUSH
13231: LD_STRING 
13233: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
13234: CALL_OW 44
13238: PPUSH
13239: LD_INT 0
13241: PPUSH
13242: CALL_OW 51
// end ;
13246: GO 13168
13248: POP
13249: POP
// end ;
13250: PPOPN 1
13252: END
// every 0 0$1 trigger StreamModeActive and sBomb do
13253: LD_EXP 27
13257: PUSH
13258: LD_EXP 47
13262: AND
13263: IFFALSE 13272
13265: GO 13267
13267: DISABLE
// StreamSibBomb ;
13268: CALL 13273 0 0
13272: END
// export function StreamSibBomb ; var i , x , y ; begin
13273: LD_INT 0
13275: PPUSH
13276: PPUSH
13277: PPUSH
13278: PPUSH
// result := false ;
13279: LD_ADDR_VAR 0 1
13283: PUSH
13284: LD_INT 0
13286: ST_TO_ADDR
// for i := 1 to 16 do
13287: LD_ADDR_VAR 0 2
13291: PUSH
13292: DOUBLE
13293: LD_INT 1
13295: DEC
13296: ST_TO_ADDR
13297: LD_INT 16
13299: PUSH
13300: FOR_TO
13301: IFFALSE 13500
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13303: LD_ADDR_VAR 0 3
13307: PUSH
13308: LD_INT 10
13310: PUSH
13311: LD_INT 20
13313: PUSH
13314: LD_INT 30
13316: PUSH
13317: LD_INT 40
13319: PUSH
13320: LD_INT 50
13322: PUSH
13323: LD_INT 60
13325: PUSH
13326: LD_INT 70
13328: PUSH
13329: LD_INT 80
13331: PUSH
13332: LD_INT 90
13334: PUSH
13335: LD_INT 100
13337: PUSH
13338: LD_INT 110
13340: PUSH
13341: LD_INT 120
13343: PUSH
13344: LD_INT 130
13346: PUSH
13347: LD_INT 140
13349: PUSH
13350: LD_INT 150
13352: PUSH
13353: EMPTY
13354: LIST
13355: LIST
13356: LIST
13357: LIST
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: LIST
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: LIST
13369: PUSH
13370: LD_INT 1
13372: PPUSH
13373: LD_INT 15
13375: PPUSH
13376: CALL_OW 12
13380: ARRAY
13381: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13382: LD_ADDR_VAR 0 4
13386: PUSH
13387: LD_INT 10
13389: PUSH
13390: LD_INT 20
13392: PUSH
13393: LD_INT 30
13395: PUSH
13396: LD_INT 40
13398: PUSH
13399: LD_INT 50
13401: PUSH
13402: LD_INT 60
13404: PUSH
13405: LD_INT 70
13407: PUSH
13408: LD_INT 80
13410: PUSH
13411: LD_INT 90
13413: PUSH
13414: LD_INT 100
13416: PUSH
13417: LD_INT 110
13419: PUSH
13420: LD_INT 120
13422: PUSH
13423: LD_INT 130
13425: PUSH
13426: LD_INT 140
13428: PUSH
13429: LD_INT 150
13431: PUSH
13432: EMPTY
13433: LIST
13434: LIST
13435: LIST
13436: LIST
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: PUSH
13449: LD_INT 1
13451: PPUSH
13452: LD_INT 15
13454: PPUSH
13455: CALL_OW 12
13459: ARRAY
13460: ST_TO_ADDR
// if ValidHex ( x , y ) then
13461: LD_VAR 0 3
13465: PPUSH
13466: LD_VAR 0 4
13470: PPUSH
13471: CALL_OW 488
13475: IFFALSE 13498
// begin result := [ x , y ] ;
13477: LD_ADDR_VAR 0 1
13481: PUSH
13482: LD_VAR 0 3
13486: PUSH
13487: LD_VAR 0 4
13491: PUSH
13492: EMPTY
13493: LIST
13494: LIST
13495: ST_TO_ADDR
// break ;
13496: GO 13500
// end ; end ;
13498: GO 13300
13500: POP
13501: POP
// if result then
13502: LD_VAR 0 1
13506: IFFALSE 13566
// begin ToLua ( playSibBomb() ) ;
13508: LD_STRING playSibBomb()
13510: PPUSH
13511: CALL_OW 559
// wait ( 0 0$14 ) ;
13515: LD_INT 490
13517: PPUSH
13518: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13522: LD_VAR 0 1
13526: PUSH
13527: LD_INT 1
13529: ARRAY
13530: PPUSH
13531: LD_VAR 0 1
13535: PUSH
13536: LD_INT 2
13538: ARRAY
13539: PPUSH
13540: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13544: LD_VAR 0 1
13548: PUSH
13549: LD_INT 1
13551: ARRAY
13552: PPUSH
13553: LD_VAR 0 1
13557: PUSH
13558: LD_INT 2
13560: ARRAY
13561: PPUSH
13562: CALL_OW 429
// end ; end ;
13566: LD_VAR 0 1
13570: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13571: LD_EXP 27
13575: PUSH
13576: LD_EXP 49
13580: AND
13581: IFFALSE 13593
13583: GO 13585
13585: DISABLE
// YouLost (  ) ;
13586: LD_STRING 
13588: PPUSH
13589: CALL_OW 104
13593: END
// every 0 0$1 trigger StreamModeActive and sFog do
13594: LD_EXP 27
13598: PUSH
13599: LD_EXP 48
13603: AND
13604: IFFALSE 13618
13606: GO 13608
13608: DISABLE
// FogOff ( your_side ) ;
13609: LD_OWVAR 2
13613: PPUSH
13614: CALL_OW 344
13618: END
// every 0 0$1 trigger StreamModeActive and sSun do
13619: LD_EXP 27
13623: PUSH
13624: LD_EXP 50
13628: AND
13629: IFFALSE 13657
13631: GO 13633
13633: DISABLE
// begin solar_recharge_percent := 0 ;
13634: LD_ADDR_OWVAR 79
13638: PUSH
13639: LD_INT 0
13641: ST_TO_ADDR
// wait ( 5 5$00 ) ;
13642: LD_INT 10500
13644: PPUSH
13645: CALL_OW 67
// solar_recharge_percent := 100 ;
13649: LD_ADDR_OWVAR 79
13653: PUSH
13654: LD_INT 100
13656: ST_TO_ADDR
// end ;
13657: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13658: LD_EXP 27
13662: PUSH
13663: LD_EXP 51
13667: AND
13668: IFFALSE 13907
13670: GO 13672
13672: DISABLE
13673: LD_INT 0
13675: PPUSH
13676: PPUSH
13677: PPUSH
// begin tmp := [ ] ;
13678: LD_ADDR_VAR 0 3
13682: PUSH
13683: EMPTY
13684: ST_TO_ADDR
// for i := 1 to 6 do
13685: LD_ADDR_VAR 0 1
13689: PUSH
13690: DOUBLE
13691: LD_INT 1
13693: DEC
13694: ST_TO_ADDR
13695: LD_INT 6
13697: PUSH
13698: FOR_TO
13699: IFFALSE 13804
// begin uc_nation := nation_nature ;
13701: LD_ADDR_OWVAR 21
13705: PUSH
13706: LD_INT 0
13708: ST_TO_ADDR
// uc_side := 0 ;
13709: LD_ADDR_OWVAR 20
13713: PUSH
13714: LD_INT 0
13716: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13717: LD_ADDR_OWVAR 29
13721: PUSH
13722: LD_INT 12
13724: PUSH
13725: LD_INT 12
13727: PUSH
13728: EMPTY
13729: LIST
13730: LIST
13731: ST_TO_ADDR
// hc_agressivity := 20 ;
13732: LD_ADDR_OWVAR 35
13736: PUSH
13737: LD_INT 20
13739: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13740: LD_ADDR_OWVAR 28
13744: PUSH
13745: LD_INT 17
13747: ST_TO_ADDR
// hc_gallery :=  ;
13748: LD_ADDR_OWVAR 33
13752: PUSH
13753: LD_STRING 
13755: ST_TO_ADDR
// hc_name :=  ;
13756: LD_ADDR_OWVAR 26
13760: PUSH
13761: LD_STRING 
13763: ST_TO_ADDR
// un := CreateHuman ;
13764: LD_ADDR_VAR 0 2
13768: PUSH
13769: CALL_OW 44
13773: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13774: LD_VAR 0 2
13778: PPUSH
13779: LD_INT 1
13781: PPUSH
13782: CALL_OW 51
// tmp := tmp ^ un ;
13786: LD_ADDR_VAR 0 3
13790: PUSH
13791: LD_VAR 0 3
13795: PUSH
13796: LD_VAR 0 2
13800: ADD
13801: ST_TO_ADDR
// end ;
13802: GO 13698
13804: POP
13805: POP
// repeat wait ( 0 0$1 ) ;
13806: LD_INT 35
13808: PPUSH
13809: CALL_OW 67
// for un in tmp do
13813: LD_ADDR_VAR 0 2
13817: PUSH
13818: LD_VAR 0 3
13822: PUSH
13823: FOR_IN
13824: IFFALSE 13898
// begin if IsDead ( un ) then
13826: LD_VAR 0 2
13830: PPUSH
13831: CALL_OW 301
13835: IFFALSE 13855
// begin tmp := tmp diff un ;
13837: LD_ADDR_VAR 0 3
13841: PUSH
13842: LD_VAR 0 3
13846: PUSH
13847: LD_VAR 0 2
13851: DIFF
13852: ST_TO_ADDR
// continue ;
13853: GO 13823
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13855: LD_VAR 0 2
13859: PPUSH
13860: LD_INT 3
13862: PUSH
13863: LD_INT 22
13865: PUSH
13866: LD_INT 0
13868: PUSH
13869: EMPTY
13870: LIST
13871: LIST
13872: PUSH
13873: EMPTY
13874: LIST
13875: LIST
13876: PPUSH
13877: CALL_OW 69
13881: PPUSH
13882: LD_VAR 0 2
13886: PPUSH
13887: CALL_OW 74
13891: PPUSH
13892: CALL_OW 115
// end ;
13896: GO 13823
13898: POP
13899: POP
// until not tmp ;
13900: LD_VAR 0 3
13904: NOT
13905: IFFALSE 13806
// end ;
13907: PPOPN 3
13909: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13910: LD_EXP 27
13914: PUSH
13915: LD_EXP 52
13919: AND
13920: IFFALSE 13974
13922: GO 13924
13924: DISABLE
// begin ToLua ( displayTroll(); ) ;
13925: LD_STRING displayTroll();
13927: PPUSH
13928: CALL_OW 559
// wait ( 3 3$00 ) ;
13932: LD_INT 6300
13934: PPUSH
13935: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13939: LD_STRING hideTroll();
13941: PPUSH
13942: CALL_OW 559
// wait ( 1 1$00 ) ;
13946: LD_INT 2100
13948: PPUSH
13949: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13953: LD_STRING displayTroll();
13955: PPUSH
13956: CALL_OW 559
// wait ( 1 1$00 ) ;
13960: LD_INT 2100
13962: PPUSH
13963: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13967: LD_STRING hideTroll();
13969: PPUSH
13970: CALL_OW 559
// end ;
13974: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13975: LD_EXP 27
13979: PUSH
13980: LD_EXP 53
13984: AND
13985: IFFALSE 14048
13987: GO 13989
13989: DISABLE
13990: LD_INT 0
13992: PPUSH
// begin p := 0 ;
13993: LD_ADDR_VAR 0 1
13997: PUSH
13998: LD_INT 0
14000: ST_TO_ADDR
// repeat game_speed := 1 ;
14001: LD_ADDR_OWVAR 65
14005: PUSH
14006: LD_INT 1
14008: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14009: LD_INT 35
14011: PPUSH
14012: CALL_OW 67
// p := p + 1 ;
14016: LD_ADDR_VAR 0 1
14020: PUSH
14021: LD_VAR 0 1
14025: PUSH
14026: LD_INT 1
14028: PLUS
14029: ST_TO_ADDR
// until p >= 60 ;
14030: LD_VAR 0 1
14034: PUSH
14035: LD_INT 60
14037: GREATEREQUAL
14038: IFFALSE 14001
// game_speed := 4 ;
14040: LD_ADDR_OWVAR 65
14044: PUSH
14045: LD_INT 4
14047: ST_TO_ADDR
// end ;
14048: PPOPN 1
14050: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14051: LD_EXP 27
14055: PUSH
14056: LD_EXP 54
14060: AND
14061: IFFALSE 14207
14063: GO 14065
14065: DISABLE
14066: LD_INT 0
14068: PPUSH
14069: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14070: LD_ADDR_VAR 0 1
14074: PUSH
14075: LD_INT 22
14077: PUSH
14078: LD_OWVAR 2
14082: PUSH
14083: EMPTY
14084: LIST
14085: LIST
14086: PUSH
14087: LD_INT 2
14089: PUSH
14090: LD_INT 30
14092: PUSH
14093: LD_INT 0
14095: PUSH
14096: EMPTY
14097: LIST
14098: LIST
14099: PUSH
14100: LD_INT 30
14102: PUSH
14103: LD_INT 1
14105: PUSH
14106: EMPTY
14107: LIST
14108: LIST
14109: PUSH
14110: EMPTY
14111: LIST
14112: LIST
14113: LIST
14114: PUSH
14115: EMPTY
14116: LIST
14117: LIST
14118: PPUSH
14119: CALL_OW 69
14123: ST_TO_ADDR
// if not depot then
14124: LD_VAR 0 1
14128: NOT
14129: IFFALSE 14133
// exit ;
14131: GO 14207
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
14133: LD_ADDR_VAR 0 2
14137: PUSH
14138: LD_VAR 0 1
14142: PUSH
14143: LD_INT 1
14145: PPUSH
14146: LD_VAR 0 1
14150: PPUSH
14151: CALL_OW 12
14155: ARRAY
14156: PPUSH
14157: CALL_OW 274
14161: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
14162: LD_VAR 0 2
14166: PPUSH
14167: LD_INT 1
14169: PPUSH
14170: LD_INT 0
14172: PPUSH
14173: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
14177: LD_VAR 0 2
14181: PPUSH
14182: LD_INT 2
14184: PPUSH
14185: LD_INT 0
14187: PPUSH
14188: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
14192: LD_VAR 0 2
14196: PPUSH
14197: LD_INT 3
14199: PPUSH
14200: LD_INT 0
14202: PPUSH
14203: CALL_OW 277
// end ;
14207: PPOPN 2
14209: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
14210: LD_EXP 27
14214: PUSH
14215: LD_EXP 55
14219: AND
14220: IFFALSE 14317
14222: GO 14224
14224: DISABLE
14225: LD_INT 0
14227: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14228: LD_ADDR_VAR 0 1
14232: PUSH
14233: LD_INT 22
14235: PUSH
14236: LD_OWVAR 2
14240: PUSH
14241: EMPTY
14242: LIST
14243: LIST
14244: PUSH
14245: LD_INT 21
14247: PUSH
14248: LD_INT 1
14250: PUSH
14251: EMPTY
14252: LIST
14253: LIST
14254: PUSH
14255: LD_INT 3
14257: PUSH
14258: LD_INT 23
14260: PUSH
14261: LD_INT 0
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: PUSH
14268: EMPTY
14269: LIST
14270: LIST
14271: PUSH
14272: EMPTY
14273: LIST
14274: LIST
14275: LIST
14276: PPUSH
14277: CALL_OW 69
14281: ST_TO_ADDR
// if not tmp then
14282: LD_VAR 0 1
14286: NOT
14287: IFFALSE 14291
// exit ;
14289: GO 14317
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
14291: LD_VAR 0 1
14295: PUSH
14296: LD_INT 1
14298: PPUSH
14299: LD_VAR 0 1
14303: PPUSH
14304: CALL_OW 12
14308: ARRAY
14309: PPUSH
14310: LD_INT 200
14312: PPUSH
14313: CALL_OW 234
// end ;
14317: PPOPN 1
14319: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14320: LD_EXP 27
14324: PUSH
14325: LD_EXP 56
14329: AND
14330: IFFALSE 14409
14332: GO 14334
14334: DISABLE
14335: LD_INT 0
14337: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14338: LD_ADDR_VAR 0 1
14342: PUSH
14343: LD_INT 22
14345: PUSH
14346: LD_OWVAR 2
14350: PUSH
14351: EMPTY
14352: LIST
14353: LIST
14354: PUSH
14355: LD_INT 21
14357: PUSH
14358: LD_INT 2
14360: PUSH
14361: EMPTY
14362: LIST
14363: LIST
14364: PUSH
14365: EMPTY
14366: LIST
14367: LIST
14368: PPUSH
14369: CALL_OW 69
14373: ST_TO_ADDR
// if not tmp then
14374: LD_VAR 0 1
14378: NOT
14379: IFFALSE 14383
// exit ;
14381: GO 14409
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14383: LD_VAR 0 1
14387: PUSH
14388: LD_INT 1
14390: PPUSH
14391: LD_VAR 0 1
14395: PPUSH
14396: CALL_OW 12
14400: ARRAY
14401: PPUSH
14402: LD_INT 60
14404: PPUSH
14405: CALL_OW 234
// end ;
14409: PPOPN 1
14411: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14412: LD_EXP 27
14416: PUSH
14417: LD_EXP 57
14421: AND
14422: IFFALSE 14521
14424: GO 14426
14426: DISABLE
14427: LD_INT 0
14429: PPUSH
14430: PPUSH
// begin enable ;
14431: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14432: LD_ADDR_VAR 0 1
14436: PUSH
14437: LD_INT 22
14439: PUSH
14440: LD_OWVAR 2
14444: PUSH
14445: EMPTY
14446: LIST
14447: LIST
14448: PUSH
14449: LD_INT 61
14451: PUSH
14452: EMPTY
14453: LIST
14454: PUSH
14455: LD_INT 33
14457: PUSH
14458: LD_INT 2
14460: PUSH
14461: EMPTY
14462: LIST
14463: LIST
14464: PUSH
14465: EMPTY
14466: LIST
14467: LIST
14468: LIST
14469: PPUSH
14470: CALL_OW 69
14474: ST_TO_ADDR
// if not tmp then
14475: LD_VAR 0 1
14479: NOT
14480: IFFALSE 14484
// exit ;
14482: GO 14521
// for i in tmp do
14484: LD_ADDR_VAR 0 2
14488: PUSH
14489: LD_VAR 0 1
14493: PUSH
14494: FOR_IN
14495: IFFALSE 14519
// if IsControledBy ( i ) then
14497: LD_VAR 0 2
14501: PPUSH
14502: CALL_OW 312
14506: IFFALSE 14517
// ComUnlink ( i ) ;
14508: LD_VAR 0 2
14512: PPUSH
14513: CALL_OW 136
14517: GO 14494
14519: POP
14520: POP
// end ;
14521: PPOPN 2
14523: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14524: LD_EXP 27
14528: PUSH
14529: LD_EXP 58
14533: AND
14534: IFFALSE 14674
14536: GO 14538
14538: DISABLE
14539: LD_INT 0
14541: PPUSH
14542: PPUSH
// begin ToLua ( displayPowell(); ) ;
14543: LD_STRING displayPowell();
14545: PPUSH
14546: CALL_OW 559
// uc_side := 0 ;
14550: LD_ADDR_OWVAR 20
14554: PUSH
14555: LD_INT 0
14557: ST_TO_ADDR
// uc_nation := 2 ;
14558: LD_ADDR_OWVAR 21
14562: PUSH
14563: LD_INT 2
14565: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14566: LD_ADDR_OWVAR 37
14570: PUSH
14571: LD_INT 14
14573: ST_TO_ADDR
// vc_engine := engine_siberite ;
14574: LD_ADDR_OWVAR 39
14578: PUSH
14579: LD_INT 3
14581: ST_TO_ADDR
// vc_control := control_apeman ;
14582: LD_ADDR_OWVAR 38
14586: PUSH
14587: LD_INT 5
14589: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
14590: LD_ADDR_OWVAR 40
14594: PUSH
14595: LD_INT 29
14597: ST_TO_ADDR
// un := CreateVehicle ;
14598: LD_ADDR_VAR 0 2
14602: PUSH
14603: CALL_OW 45
14607: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14608: LD_VAR 0 2
14612: PPUSH
14613: LD_INT 1
14615: PPUSH
14616: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14620: LD_INT 35
14622: PPUSH
14623: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14627: LD_VAR 0 2
14631: PPUSH
14632: LD_INT 22
14634: PUSH
14635: LD_OWVAR 2
14639: PUSH
14640: EMPTY
14641: LIST
14642: LIST
14643: PPUSH
14644: CALL_OW 69
14648: PPUSH
14649: LD_VAR 0 2
14653: PPUSH
14654: CALL_OW 74
14658: PPUSH
14659: CALL_OW 115
// until IsDead ( un ) ;
14663: LD_VAR 0 2
14667: PPUSH
14668: CALL_OW 301
14672: IFFALSE 14620
// end ;
14674: PPOPN 2
14676: END
// every 0 0$1 trigger StreamModeActive and sStu do
14677: LD_EXP 27
14681: PUSH
14682: LD_EXP 66
14686: AND
14687: IFFALSE 14703
14689: GO 14691
14691: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14692: LD_STRING displayStucuk();
14694: PPUSH
14695: CALL_OW 559
// ResetFog ;
14699: CALL_OW 335
// end ;
14703: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14704: LD_EXP 27
14708: PUSH
14709: LD_EXP 59
14713: AND
14714: IFFALSE 14855
14716: GO 14718
14718: DISABLE
14719: LD_INT 0
14721: PPUSH
14722: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14723: LD_ADDR_VAR 0 2
14727: PUSH
14728: LD_INT 22
14730: PUSH
14731: LD_OWVAR 2
14735: PUSH
14736: EMPTY
14737: LIST
14738: LIST
14739: PUSH
14740: LD_INT 21
14742: PUSH
14743: LD_INT 1
14745: PUSH
14746: EMPTY
14747: LIST
14748: LIST
14749: PUSH
14750: EMPTY
14751: LIST
14752: LIST
14753: PPUSH
14754: CALL_OW 69
14758: ST_TO_ADDR
// if not tmp then
14759: LD_VAR 0 2
14763: NOT
14764: IFFALSE 14768
// exit ;
14766: GO 14855
// un := tmp [ rand ( 1 , tmp ) ] ;
14768: LD_ADDR_VAR 0 1
14772: PUSH
14773: LD_VAR 0 2
14777: PUSH
14778: LD_INT 1
14780: PPUSH
14781: LD_VAR 0 2
14785: PPUSH
14786: CALL_OW 12
14790: ARRAY
14791: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14792: LD_VAR 0 1
14796: PPUSH
14797: LD_INT 0
14799: PPUSH
14800: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14804: LD_VAR 0 1
14808: PPUSH
14809: LD_OWVAR 3
14813: PUSH
14814: LD_VAR 0 1
14818: DIFF
14819: PPUSH
14820: LD_VAR 0 1
14824: PPUSH
14825: CALL_OW 74
14829: PPUSH
14830: CALL_OW 115
// wait ( 0 0$20 ) ;
14834: LD_INT 700
14836: PPUSH
14837: CALL_OW 67
// SetSide ( un , your_side ) ;
14841: LD_VAR 0 1
14845: PPUSH
14846: LD_OWVAR 2
14850: PPUSH
14851: CALL_OW 235
// end ;
14855: PPOPN 2
14857: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
14858: LD_EXP 27
14862: PUSH
14863: LD_EXP 60
14867: AND
14868: IFFALSE 14974
14870: GO 14872
14872: DISABLE
14873: LD_INT 0
14875: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14876: LD_ADDR_VAR 0 1
14880: PUSH
14881: LD_INT 22
14883: PUSH
14884: LD_OWVAR 2
14888: PUSH
14889: EMPTY
14890: LIST
14891: LIST
14892: PUSH
14893: LD_INT 2
14895: PUSH
14896: LD_INT 30
14898: PUSH
14899: LD_INT 0
14901: PUSH
14902: EMPTY
14903: LIST
14904: LIST
14905: PUSH
14906: LD_INT 30
14908: PUSH
14909: LD_INT 1
14911: PUSH
14912: EMPTY
14913: LIST
14914: LIST
14915: PUSH
14916: EMPTY
14917: LIST
14918: LIST
14919: LIST
14920: PUSH
14921: EMPTY
14922: LIST
14923: LIST
14924: PPUSH
14925: CALL_OW 69
14929: ST_TO_ADDR
// if not depot then
14930: LD_VAR 0 1
14934: NOT
14935: IFFALSE 14939
// exit ;
14937: GO 14974
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14939: LD_VAR 0 1
14943: PUSH
14944: LD_INT 1
14946: ARRAY
14947: PPUSH
14948: CALL_OW 250
14952: PPUSH
14953: LD_VAR 0 1
14957: PUSH
14958: LD_INT 1
14960: ARRAY
14961: PPUSH
14962: CALL_OW 251
14966: PPUSH
14967: LD_INT 70
14969: PPUSH
14970: CALL_OW 495
// end ;
14974: PPOPN 1
14976: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14977: LD_EXP 27
14981: PUSH
14982: LD_EXP 61
14986: AND
14987: IFFALSE 15198
14989: GO 14991
14991: DISABLE
14992: LD_INT 0
14994: PPUSH
14995: PPUSH
14996: PPUSH
14997: PPUSH
14998: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14999: LD_ADDR_VAR 0 5
15003: PUSH
15004: LD_INT 22
15006: PUSH
15007: LD_OWVAR 2
15011: PUSH
15012: EMPTY
15013: LIST
15014: LIST
15015: PUSH
15016: LD_INT 21
15018: PUSH
15019: LD_INT 1
15021: PUSH
15022: EMPTY
15023: LIST
15024: LIST
15025: PUSH
15026: EMPTY
15027: LIST
15028: LIST
15029: PPUSH
15030: CALL_OW 69
15034: ST_TO_ADDR
// if not tmp then
15035: LD_VAR 0 5
15039: NOT
15040: IFFALSE 15044
// exit ;
15042: GO 15198
// for i in tmp do
15044: LD_ADDR_VAR 0 1
15048: PUSH
15049: LD_VAR 0 5
15053: PUSH
15054: FOR_IN
15055: IFFALSE 15196
// begin d := rand ( 0 , 5 ) ;
15057: LD_ADDR_VAR 0 4
15061: PUSH
15062: LD_INT 0
15064: PPUSH
15065: LD_INT 5
15067: PPUSH
15068: CALL_OW 12
15072: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15073: LD_ADDR_VAR 0 2
15077: PUSH
15078: LD_VAR 0 1
15082: PPUSH
15083: CALL_OW 250
15087: PPUSH
15088: LD_VAR 0 4
15092: PPUSH
15093: LD_INT 3
15095: PPUSH
15096: LD_INT 12
15098: PPUSH
15099: CALL_OW 12
15103: PPUSH
15104: CALL_OW 272
15108: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15109: LD_ADDR_VAR 0 3
15113: PUSH
15114: LD_VAR 0 1
15118: PPUSH
15119: CALL_OW 251
15123: PPUSH
15124: LD_VAR 0 4
15128: PPUSH
15129: LD_INT 3
15131: PPUSH
15132: LD_INT 12
15134: PPUSH
15135: CALL_OW 12
15139: PPUSH
15140: CALL_OW 273
15144: ST_TO_ADDR
// if ValidHex ( x , y ) then
15145: LD_VAR 0 2
15149: PPUSH
15150: LD_VAR 0 3
15154: PPUSH
15155: CALL_OW 488
15159: IFFALSE 15194
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
15161: LD_VAR 0 1
15165: PPUSH
15166: LD_VAR 0 2
15170: PPUSH
15171: LD_VAR 0 3
15175: PPUSH
15176: LD_INT 3
15178: PPUSH
15179: LD_INT 6
15181: PPUSH
15182: CALL_OW 12
15186: PPUSH
15187: LD_INT 1
15189: PPUSH
15190: CALL_OW 483
// end ;
15194: GO 15054
15196: POP
15197: POP
// end ;
15198: PPOPN 5
15200: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
15201: LD_EXP 27
15205: PUSH
15206: LD_EXP 62
15210: AND
15211: IFFALSE 15305
15213: GO 15215
15215: DISABLE
15216: LD_INT 0
15218: PPUSH
15219: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
15220: LD_ADDR_VAR 0 2
15224: PUSH
15225: LD_INT 22
15227: PUSH
15228: LD_OWVAR 2
15232: PUSH
15233: EMPTY
15234: LIST
15235: LIST
15236: PUSH
15237: LD_INT 32
15239: PUSH
15240: LD_INT 1
15242: PUSH
15243: EMPTY
15244: LIST
15245: LIST
15246: PUSH
15247: LD_INT 21
15249: PUSH
15250: LD_INT 2
15252: PUSH
15253: EMPTY
15254: LIST
15255: LIST
15256: PUSH
15257: EMPTY
15258: LIST
15259: LIST
15260: LIST
15261: PPUSH
15262: CALL_OW 69
15266: ST_TO_ADDR
// if not tmp then
15267: LD_VAR 0 2
15271: NOT
15272: IFFALSE 15276
// exit ;
15274: GO 15305
// for i in tmp do
15276: LD_ADDR_VAR 0 1
15280: PUSH
15281: LD_VAR 0 2
15285: PUSH
15286: FOR_IN
15287: IFFALSE 15303
// SetFuel ( i , 0 ) ;
15289: LD_VAR 0 1
15293: PPUSH
15294: LD_INT 0
15296: PPUSH
15297: CALL_OW 240
15301: GO 15286
15303: POP
15304: POP
// end ;
15305: PPOPN 2
15307: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
15308: LD_EXP 27
15312: PUSH
15313: LD_EXP 63
15317: AND
15318: IFFALSE 15384
15320: GO 15322
15322: DISABLE
15323: LD_INT 0
15325: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15326: LD_ADDR_VAR 0 1
15330: PUSH
15331: LD_INT 22
15333: PUSH
15334: LD_OWVAR 2
15338: PUSH
15339: EMPTY
15340: LIST
15341: LIST
15342: PUSH
15343: LD_INT 30
15345: PUSH
15346: LD_INT 29
15348: PUSH
15349: EMPTY
15350: LIST
15351: LIST
15352: PUSH
15353: EMPTY
15354: LIST
15355: LIST
15356: PPUSH
15357: CALL_OW 69
15361: ST_TO_ADDR
// if not tmp then
15362: LD_VAR 0 1
15366: NOT
15367: IFFALSE 15371
// exit ;
15369: GO 15384
// DestroyUnit ( tmp [ 1 ] ) ;
15371: LD_VAR 0 1
15375: PUSH
15376: LD_INT 1
15378: ARRAY
15379: PPUSH
15380: CALL_OW 65
// end ;
15384: PPOPN 1
15386: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
15387: LD_EXP 27
15391: PUSH
15392: LD_EXP 65
15396: AND
15397: IFFALSE 15526
15399: GO 15401
15401: DISABLE
15402: LD_INT 0
15404: PPUSH
// begin uc_side := 0 ;
15405: LD_ADDR_OWVAR 20
15409: PUSH
15410: LD_INT 0
15412: ST_TO_ADDR
// uc_nation := nation_arabian ;
15413: LD_ADDR_OWVAR 21
15417: PUSH
15418: LD_INT 2
15420: ST_TO_ADDR
// hc_gallery :=  ;
15421: LD_ADDR_OWVAR 33
15425: PUSH
15426: LD_STRING 
15428: ST_TO_ADDR
// hc_name :=  ;
15429: LD_ADDR_OWVAR 26
15433: PUSH
15434: LD_STRING 
15436: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
15437: LD_INT 1
15439: PPUSH
15440: LD_INT 11
15442: PPUSH
15443: LD_INT 10
15445: PPUSH
15446: CALL_OW 380
// un := CreateHuman ;
15450: LD_ADDR_VAR 0 1
15454: PUSH
15455: CALL_OW 44
15459: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15460: LD_VAR 0 1
15464: PPUSH
15465: LD_INT 1
15467: PPUSH
15468: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15472: LD_INT 35
15474: PPUSH
15475: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15479: LD_VAR 0 1
15483: PPUSH
15484: LD_INT 22
15486: PUSH
15487: LD_OWVAR 2
15491: PUSH
15492: EMPTY
15493: LIST
15494: LIST
15495: PPUSH
15496: CALL_OW 69
15500: PPUSH
15501: LD_VAR 0 1
15505: PPUSH
15506: CALL_OW 74
15510: PPUSH
15511: CALL_OW 115
// until IsDead ( un ) ;
15515: LD_VAR 0 1
15519: PPUSH
15520: CALL_OW 301
15524: IFFALSE 15472
// end ;
15526: PPOPN 1
15528: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15529: LD_EXP 27
15533: PUSH
15534: LD_EXP 67
15538: AND
15539: IFFALSE 15551
15541: GO 15543
15543: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15544: LD_STRING earthquake(getX(game), 0, 32)
15546: PPUSH
15547: CALL_OW 559
15551: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15552: LD_EXP 27
15556: PUSH
15557: LD_EXP 68
15561: AND
15562: IFFALSE 15653
15564: GO 15566
15566: DISABLE
15567: LD_INT 0
15569: PPUSH
// begin enable ;
15570: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15571: LD_ADDR_VAR 0 1
15575: PUSH
15576: LD_INT 22
15578: PUSH
15579: LD_OWVAR 2
15583: PUSH
15584: EMPTY
15585: LIST
15586: LIST
15587: PUSH
15588: LD_INT 21
15590: PUSH
15591: LD_INT 2
15593: PUSH
15594: EMPTY
15595: LIST
15596: LIST
15597: PUSH
15598: LD_INT 33
15600: PUSH
15601: LD_INT 3
15603: PUSH
15604: EMPTY
15605: LIST
15606: LIST
15607: PUSH
15608: EMPTY
15609: LIST
15610: LIST
15611: LIST
15612: PPUSH
15613: CALL_OW 69
15617: ST_TO_ADDR
// if not tmp then
15618: LD_VAR 0 1
15622: NOT
15623: IFFALSE 15627
// exit ;
15625: GO 15653
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15627: LD_VAR 0 1
15631: PUSH
15632: LD_INT 1
15634: PPUSH
15635: LD_VAR 0 1
15639: PPUSH
15640: CALL_OW 12
15644: ARRAY
15645: PPUSH
15646: LD_INT 1
15648: PPUSH
15649: CALL_OW 234
// end ;
15653: PPOPN 1
15655: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15656: LD_EXP 27
15660: PUSH
15661: LD_EXP 69
15665: AND
15666: IFFALSE 15807
15668: GO 15670
15670: DISABLE
15671: LD_INT 0
15673: PPUSH
15674: PPUSH
15675: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15676: LD_ADDR_VAR 0 3
15680: PUSH
15681: LD_INT 22
15683: PUSH
15684: LD_OWVAR 2
15688: PUSH
15689: EMPTY
15690: LIST
15691: LIST
15692: PUSH
15693: LD_INT 25
15695: PUSH
15696: LD_INT 1
15698: PUSH
15699: EMPTY
15700: LIST
15701: LIST
15702: PUSH
15703: EMPTY
15704: LIST
15705: LIST
15706: PPUSH
15707: CALL_OW 69
15711: ST_TO_ADDR
// if not tmp then
15712: LD_VAR 0 3
15716: NOT
15717: IFFALSE 15721
// exit ;
15719: GO 15807
// un := tmp [ rand ( 1 , tmp ) ] ;
15721: LD_ADDR_VAR 0 2
15725: PUSH
15726: LD_VAR 0 3
15730: PUSH
15731: LD_INT 1
15733: PPUSH
15734: LD_VAR 0 3
15738: PPUSH
15739: CALL_OW 12
15743: ARRAY
15744: ST_TO_ADDR
// if Crawls ( un ) then
15745: LD_VAR 0 2
15749: PPUSH
15750: CALL_OW 318
15754: IFFALSE 15765
// ComWalk ( un ) ;
15756: LD_VAR 0 2
15760: PPUSH
15761: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15765: LD_VAR 0 2
15769: PPUSH
15770: LD_INT 9
15772: PPUSH
15773: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15777: LD_INT 28
15779: PPUSH
15780: LD_OWVAR 2
15784: PPUSH
15785: LD_INT 2
15787: PPUSH
15788: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15792: LD_INT 29
15794: PPUSH
15795: LD_OWVAR 2
15799: PPUSH
15800: LD_INT 2
15802: PPUSH
15803: CALL_OW 322
// end ;
15807: PPOPN 3
15809: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15810: LD_EXP 27
15814: PUSH
15815: LD_EXP 70
15819: AND
15820: IFFALSE 15931
15822: GO 15824
15824: DISABLE
15825: LD_INT 0
15827: PPUSH
15828: PPUSH
15829: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15830: LD_ADDR_VAR 0 3
15834: PUSH
15835: LD_INT 22
15837: PUSH
15838: LD_OWVAR 2
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: PUSH
15847: LD_INT 25
15849: PUSH
15850: LD_INT 1
15852: PUSH
15853: EMPTY
15854: LIST
15855: LIST
15856: PUSH
15857: EMPTY
15858: LIST
15859: LIST
15860: PPUSH
15861: CALL_OW 69
15865: ST_TO_ADDR
// if not tmp then
15866: LD_VAR 0 3
15870: NOT
15871: IFFALSE 15875
// exit ;
15873: GO 15931
// un := tmp [ rand ( 1 , tmp ) ] ;
15875: LD_ADDR_VAR 0 2
15879: PUSH
15880: LD_VAR 0 3
15884: PUSH
15885: LD_INT 1
15887: PPUSH
15888: LD_VAR 0 3
15892: PPUSH
15893: CALL_OW 12
15897: ARRAY
15898: ST_TO_ADDR
// if Crawls ( un ) then
15899: LD_VAR 0 2
15903: PPUSH
15904: CALL_OW 318
15908: IFFALSE 15919
// ComWalk ( un ) ;
15910: LD_VAR 0 2
15914: PPUSH
15915: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15919: LD_VAR 0 2
15923: PPUSH
15924: LD_INT 8
15926: PPUSH
15927: CALL_OW 336
// end ;
15931: PPOPN 3
15933: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15934: LD_EXP 27
15938: PUSH
15939: LD_EXP 71
15943: AND
15944: IFFALSE 16088
15946: GO 15948
15948: DISABLE
15949: LD_INT 0
15951: PPUSH
15952: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15953: LD_ADDR_VAR 0 2
15957: PUSH
15958: LD_INT 22
15960: PUSH
15961: LD_OWVAR 2
15965: PUSH
15966: EMPTY
15967: LIST
15968: LIST
15969: PUSH
15970: LD_INT 21
15972: PUSH
15973: LD_INT 2
15975: PUSH
15976: EMPTY
15977: LIST
15978: LIST
15979: PUSH
15980: LD_INT 2
15982: PUSH
15983: LD_INT 34
15985: PUSH
15986: LD_INT 12
15988: PUSH
15989: EMPTY
15990: LIST
15991: LIST
15992: PUSH
15993: LD_INT 34
15995: PUSH
15996: LD_INT 51
15998: PUSH
15999: EMPTY
16000: LIST
16001: LIST
16002: PUSH
16003: LD_INT 34
16005: PUSH
16006: LD_INT 32
16008: PUSH
16009: EMPTY
16010: LIST
16011: LIST
16012: PUSH
16013: EMPTY
16014: LIST
16015: LIST
16016: LIST
16017: LIST
16018: PUSH
16019: EMPTY
16020: LIST
16021: LIST
16022: LIST
16023: PPUSH
16024: CALL_OW 69
16028: ST_TO_ADDR
// if not tmp then
16029: LD_VAR 0 2
16033: NOT
16034: IFFALSE 16038
// exit ;
16036: GO 16088
// for i in tmp do
16038: LD_ADDR_VAR 0 1
16042: PUSH
16043: LD_VAR 0 2
16047: PUSH
16048: FOR_IN
16049: IFFALSE 16086
// if GetCargo ( i , mat_artifact ) = 0 then
16051: LD_VAR 0 1
16055: PPUSH
16056: LD_INT 4
16058: PPUSH
16059: CALL_OW 289
16063: PUSH
16064: LD_INT 0
16066: EQUAL
16067: IFFALSE 16084
// SetCargo ( i , mat_siberit , 100 ) ;
16069: LD_VAR 0 1
16073: PPUSH
16074: LD_INT 3
16076: PPUSH
16077: LD_INT 100
16079: PPUSH
16080: CALL_OW 290
16084: GO 16048
16086: POP
16087: POP
// end ;
16088: PPOPN 2
16090: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16091: LD_EXP 27
16095: PUSH
16096: LD_EXP 72
16100: AND
16101: IFFALSE 16284
16103: GO 16105
16105: DISABLE
16106: LD_INT 0
16108: PPUSH
16109: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16110: LD_ADDR_VAR 0 2
16114: PUSH
16115: LD_INT 22
16117: PUSH
16118: LD_OWVAR 2
16122: PUSH
16123: EMPTY
16124: LIST
16125: LIST
16126: PPUSH
16127: CALL_OW 69
16131: ST_TO_ADDR
// if not tmp then
16132: LD_VAR 0 2
16136: NOT
16137: IFFALSE 16141
// exit ;
16139: GO 16284
// for i := 1 to 2 do
16141: LD_ADDR_VAR 0 1
16145: PUSH
16146: DOUBLE
16147: LD_INT 1
16149: DEC
16150: ST_TO_ADDR
16151: LD_INT 2
16153: PUSH
16154: FOR_TO
16155: IFFALSE 16282
// begin uc_side := your_side ;
16157: LD_ADDR_OWVAR 20
16161: PUSH
16162: LD_OWVAR 2
16166: ST_TO_ADDR
// uc_nation := nation_american ;
16167: LD_ADDR_OWVAR 21
16171: PUSH
16172: LD_INT 1
16174: ST_TO_ADDR
// vc_chassis := us_morphling ;
16175: LD_ADDR_OWVAR 37
16179: PUSH
16180: LD_INT 5
16182: ST_TO_ADDR
// vc_engine := engine_siberite ;
16183: LD_ADDR_OWVAR 39
16187: PUSH
16188: LD_INT 3
16190: ST_TO_ADDR
// vc_control := control_computer ;
16191: LD_ADDR_OWVAR 38
16195: PUSH
16196: LD_INT 3
16198: ST_TO_ADDR
// vc_weapon := us_double_laser ;
16199: LD_ADDR_OWVAR 40
16203: PUSH
16204: LD_INT 10
16206: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
16207: LD_VAR 0 2
16211: PUSH
16212: LD_INT 1
16214: ARRAY
16215: PPUSH
16216: CALL_OW 310
16220: NOT
16221: IFFALSE 16268
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
16223: CALL_OW 45
16227: PPUSH
16228: LD_VAR 0 2
16232: PUSH
16233: LD_INT 1
16235: ARRAY
16236: PPUSH
16237: CALL_OW 250
16241: PPUSH
16242: LD_VAR 0 2
16246: PUSH
16247: LD_INT 1
16249: ARRAY
16250: PPUSH
16251: CALL_OW 251
16255: PPUSH
16256: LD_INT 12
16258: PPUSH
16259: LD_INT 1
16261: PPUSH
16262: CALL_OW 50
16266: GO 16280
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16268: CALL_OW 45
16272: PPUSH
16273: LD_INT 1
16275: PPUSH
16276: CALL_OW 51
// end ;
16280: GO 16154
16282: POP
16283: POP
// end ;
16284: PPOPN 2
16286: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
16287: LD_EXP 27
16291: PUSH
16292: LD_EXP 73
16296: AND
16297: IFFALSE 16519
16299: GO 16301
16301: DISABLE
16302: LD_INT 0
16304: PPUSH
16305: PPUSH
16306: PPUSH
16307: PPUSH
16308: PPUSH
16309: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16310: LD_ADDR_VAR 0 6
16314: PUSH
16315: LD_INT 22
16317: PUSH
16318: LD_OWVAR 2
16322: PUSH
16323: EMPTY
16324: LIST
16325: LIST
16326: PUSH
16327: LD_INT 21
16329: PUSH
16330: LD_INT 1
16332: PUSH
16333: EMPTY
16334: LIST
16335: LIST
16336: PUSH
16337: LD_INT 3
16339: PUSH
16340: LD_INT 23
16342: PUSH
16343: LD_INT 0
16345: PUSH
16346: EMPTY
16347: LIST
16348: LIST
16349: PUSH
16350: EMPTY
16351: LIST
16352: LIST
16353: PUSH
16354: EMPTY
16355: LIST
16356: LIST
16357: LIST
16358: PPUSH
16359: CALL_OW 69
16363: ST_TO_ADDR
// if not tmp then
16364: LD_VAR 0 6
16368: NOT
16369: IFFALSE 16373
// exit ;
16371: GO 16519
// s1 := rand ( 1 , 4 ) ;
16373: LD_ADDR_VAR 0 2
16377: PUSH
16378: LD_INT 1
16380: PPUSH
16381: LD_INT 4
16383: PPUSH
16384: CALL_OW 12
16388: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
16389: LD_ADDR_VAR 0 4
16393: PUSH
16394: LD_VAR 0 6
16398: PUSH
16399: LD_INT 1
16401: ARRAY
16402: PPUSH
16403: LD_VAR 0 2
16407: PPUSH
16408: CALL_OW 259
16412: ST_TO_ADDR
// if s1 = 1 then
16413: LD_VAR 0 2
16417: PUSH
16418: LD_INT 1
16420: EQUAL
16421: IFFALSE 16441
// s2 := rand ( 2 , 4 ) else
16423: LD_ADDR_VAR 0 3
16427: PUSH
16428: LD_INT 2
16430: PPUSH
16431: LD_INT 4
16433: PPUSH
16434: CALL_OW 12
16438: ST_TO_ADDR
16439: GO 16449
// s2 := 1 ;
16441: LD_ADDR_VAR 0 3
16445: PUSH
16446: LD_INT 1
16448: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
16449: LD_ADDR_VAR 0 5
16453: PUSH
16454: LD_VAR 0 6
16458: PUSH
16459: LD_INT 1
16461: ARRAY
16462: PPUSH
16463: LD_VAR 0 3
16467: PPUSH
16468: CALL_OW 259
16472: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
16473: LD_VAR 0 6
16477: PUSH
16478: LD_INT 1
16480: ARRAY
16481: PPUSH
16482: LD_VAR 0 2
16486: PPUSH
16487: LD_VAR 0 5
16491: PPUSH
16492: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16496: LD_VAR 0 6
16500: PUSH
16501: LD_INT 1
16503: ARRAY
16504: PPUSH
16505: LD_VAR 0 3
16509: PPUSH
16510: LD_VAR 0 4
16514: PPUSH
16515: CALL_OW 237
// end ;
16519: PPOPN 6
16521: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16522: LD_EXP 27
16526: PUSH
16527: LD_EXP 74
16531: AND
16532: IFFALSE 16611
16534: GO 16536
16536: DISABLE
16537: LD_INT 0
16539: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16540: LD_ADDR_VAR 0 1
16544: PUSH
16545: LD_INT 22
16547: PUSH
16548: LD_OWVAR 2
16552: PUSH
16553: EMPTY
16554: LIST
16555: LIST
16556: PUSH
16557: LD_INT 30
16559: PUSH
16560: LD_INT 3
16562: PUSH
16563: EMPTY
16564: LIST
16565: LIST
16566: PUSH
16567: EMPTY
16568: LIST
16569: LIST
16570: PPUSH
16571: CALL_OW 69
16575: ST_TO_ADDR
// if not tmp then
16576: LD_VAR 0 1
16580: NOT
16581: IFFALSE 16585
// exit ;
16583: GO 16611
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16585: LD_VAR 0 1
16589: PUSH
16590: LD_INT 1
16592: PPUSH
16593: LD_VAR 0 1
16597: PPUSH
16598: CALL_OW 12
16602: ARRAY
16603: PPUSH
16604: LD_INT 1
16606: PPUSH
16607: CALL_OW 234
// end ;
16611: PPOPN 1
16613: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
16614: LD_EXP 27
16618: PUSH
16619: LD_EXP 75
16623: AND
16624: IFFALSE 16736
16626: GO 16628
16628: DISABLE
16629: LD_INT 0
16631: PPUSH
16632: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
16633: LD_ADDR_VAR 0 2
16637: PUSH
16638: LD_INT 22
16640: PUSH
16641: LD_OWVAR 2
16645: PUSH
16646: EMPTY
16647: LIST
16648: LIST
16649: PUSH
16650: LD_INT 2
16652: PUSH
16653: LD_INT 30
16655: PUSH
16656: LD_INT 27
16658: PUSH
16659: EMPTY
16660: LIST
16661: LIST
16662: PUSH
16663: LD_INT 30
16665: PUSH
16666: LD_INT 26
16668: PUSH
16669: EMPTY
16670: LIST
16671: LIST
16672: PUSH
16673: LD_INT 30
16675: PUSH
16676: LD_INT 28
16678: PUSH
16679: EMPTY
16680: LIST
16681: LIST
16682: PUSH
16683: EMPTY
16684: LIST
16685: LIST
16686: LIST
16687: LIST
16688: PUSH
16689: EMPTY
16690: LIST
16691: LIST
16692: PPUSH
16693: CALL_OW 69
16697: ST_TO_ADDR
// if not tmp then
16698: LD_VAR 0 2
16702: NOT
16703: IFFALSE 16707
// exit ;
16705: GO 16736
// for i in tmp do
16707: LD_ADDR_VAR 0 1
16711: PUSH
16712: LD_VAR 0 2
16716: PUSH
16717: FOR_IN
16718: IFFALSE 16734
// SetLives ( i , 1 ) ;
16720: LD_VAR 0 1
16724: PPUSH
16725: LD_INT 1
16727: PPUSH
16728: CALL_OW 234
16732: GO 16717
16734: POP
16735: POP
// end ;
16736: PPOPN 2
16738: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16739: LD_EXP 27
16743: PUSH
16744: LD_EXP 76
16748: AND
16749: IFFALSE 17023
16751: GO 16753
16753: DISABLE
16754: LD_INT 0
16756: PPUSH
16757: PPUSH
16758: PPUSH
// begin i := rand ( 1 , 7 ) ;
16759: LD_ADDR_VAR 0 1
16763: PUSH
16764: LD_INT 1
16766: PPUSH
16767: LD_INT 7
16769: PPUSH
16770: CALL_OW 12
16774: ST_TO_ADDR
// case i of 1 :
16775: LD_VAR 0 1
16779: PUSH
16780: LD_INT 1
16782: DOUBLE
16783: EQUAL
16784: IFTRUE 16788
16786: GO 16798
16788: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16789: LD_STRING earthquake(getX(game), 0, 32)
16791: PPUSH
16792: CALL_OW 559
16796: GO 17023
16798: LD_INT 2
16800: DOUBLE
16801: EQUAL
16802: IFTRUE 16806
16804: GO 16820
16806: POP
// begin ToLua ( displayStucuk(); ) ;
16807: LD_STRING displayStucuk();
16809: PPUSH
16810: CALL_OW 559
// ResetFog ;
16814: CALL_OW 335
// end ; 3 :
16818: GO 17023
16820: LD_INT 3
16822: DOUBLE
16823: EQUAL
16824: IFTRUE 16828
16826: GO 16932
16828: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16829: LD_ADDR_VAR 0 2
16833: PUSH
16834: LD_INT 22
16836: PUSH
16837: LD_OWVAR 2
16841: PUSH
16842: EMPTY
16843: LIST
16844: LIST
16845: PUSH
16846: LD_INT 25
16848: PUSH
16849: LD_INT 1
16851: PUSH
16852: EMPTY
16853: LIST
16854: LIST
16855: PUSH
16856: EMPTY
16857: LIST
16858: LIST
16859: PPUSH
16860: CALL_OW 69
16864: ST_TO_ADDR
// if not tmp then
16865: LD_VAR 0 2
16869: NOT
16870: IFFALSE 16874
// exit ;
16872: GO 17023
// un := tmp [ rand ( 1 , tmp ) ] ;
16874: LD_ADDR_VAR 0 3
16878: PUSH
16879: LD_VAR 0 2
16883: PUSH
16884: LD_INT 1
16886: PPUSH
16887: LD_VAR 0 2
16891: PPUSH
16892: CALL_OW 12
16896: ARRAY
16897: ST_TO_ADDR
// if Crawls ( un ) then
16898: LD_VAR 0 3
16902: PPUSH
16903: CALL_OW 318
16907: IFFALSE 16918
// ComWalk ( un ) ;
16909: LD_VAR 0 3
16913: PPUSH
16914: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16918: LD_VAR 0 3
16922: PPUSH
16923: LD_INT 8
16925: PPUSH
16926: CALL_OW 336
// end ; 4 :
16930: GO 17023
16932: LD_INT 4
16934: DOUBLE
16935: EQUAL
16936: IFTRUE 16940
16938: GO 17001
16940: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16941: LD_ADDR_VAR 0 2
16945: PUSH
16946: LD_INT 22
16948: PUSH
16949: LD_OWVAR 2
16953: PUSH
16954: EMPTY
16955: LIST
16956: LIST
16957: PUSH
16958: LD_INT 30
16960: PUSH
16961: LD_INT 29
16963: PUSH
16964: EMPTY
16965: LIST
16966: LIST
16967: PUSH
16968: EMPTY
16969: LIST
16970: LIST
16971: PPUSH
16972: CALL_OW 69
16976: ST_TO_ADDR
// if not tmp then
16977: LD_VAR 0 2
16981: NOT
16982: IFFALSE 16986
// exit ;
16984: GO 17023
// DestroyUnit ( tmp [ 1 ] ) ;
16986: LD_VAR 0 2
16990: PUSH
16991: LD_INT 1
16993: ARRAY
16994: PPUSH
16995: CALL_OW 65
// end ; 5 .. 7 :
16999: GO 17023
17001: LD_INT 5
17003: DOUBLE
17004: GREATEREQUAL
17005: IFFALSE 17013
17007: LD_INT 7
17009: DOUBLE
17010: LESSEQUAL
17011: IFTRUE 17015
17013: GO 17022
17015: POP
// StreamSibBomb ; end ;
17016: CALL 13273 0 0
17020: GO 17023
17022: POP
// end ;
17023: PPOPN 3
17025: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17026: LD_EXP 27
17030: PUSH
17031: LD_EXP 77
17035: AND
17036: IFFALSE 17192
17038: GO 17040
17040: DISABLE
17041: LD_INT 0
17043: PPUSH
17044: PPUSH
17045: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17046: LD_ADDR_VAR 0 2
17050: PUSH
17051: LD_INT 81
17053: PUSH
17054: LD_OWVAR 2
17058: PUSH
17059: EMPTY
17060: LIST
17061: LIST
17062: PUSH
17063: LD_INT 2
17065: PUSH
17066: LD_INT 21
17068: PUSH
17069: LD_INT 1
17071: PUSH
17072: EMPTY
17073: LIST
17074: LIST
17075: PUSH
17076: LD_INT 21
17078: PUSH
17079: LD_INT 2
17081: PUSH
17082: EMPTY
17083: LIST
17084: LIST
17085: PUSH
17086: EMPTY
17087: LIST
17088: LIST
17089: LIST
17090: PUSH
17091: EMPTY
17092: LIST
17093: LIST
17094: PPUSH
17095: CALL_OW 69
17099: ST_TO_ADDR
// if not tmp then
17100: LD_VAR 0 2
17104: NOT
17105: IFFALSE 17109
// exit ;
17107: GO 17192
// p := 0 ;
17109: LD_ADDR_VAR 0 3
17113: PUSH
17114: LD_INT 0
17116: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17117: LD_INT 35
17119: PPUSH
17120: CALL_OW 67
// p := p + 1 ;
17124: LD_ADDR_VAR 0 3
17128: PUSH
17129: LD_VAR 0 3
17133: PUSH
17134: LD_INT 1
17136: PLUS
17137: ST_TO_ADDR
// for i in tmp do
17138: LD_ADDR_VAR 0 1
17142: PUSH
17143: LD_VAR 0 2
17147: PUSH
17148: FOR_IN
17149: IFFALSE 17180
// if GetLives ( i ) < 1000 then
17151: LD_VAR 0 1
17155: PPUSH
17156: CALL_OW 256
17160: PUSH
17161: LD_INT 1000
17163: LESS
17164: IFFALSE 17178
// SetLives ( i , 1000 ) ;
17166: LD_VAR 0 1
17170: PPUSH
17171: LD_INT 1000
17173: PPUSH
17174: CALL_OW 234
17178: GO 17148
17180: POP
17181: POP
// until p > 20 ;
17182: LD_VAR 0 3
17186: PUSH
17187: LD_INT 20
17189: GREATER
17190: IFFALSE 17117
// end ;
17192: PPOPN 3
17194: END
// every 0 0$1 trigger StreamModeActive and sTime do
17195: LD_EXP 27
17199: PUSH
17200: LD_EXP 78
17204: AND
17205: IFFALSE 17240
17207: GO 17209
17209: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
17210: LD_INT 28
17212: PPUSH
17213: LD_OWVAR 2
17217: PPUSH
17218: LD_INT 2
17220: PPUSH
17221: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
17225: LD_INT 30
17227: PPUSH
17228: LD_OWVAR 2
17232: PPUSH
17233: LD_INT 2
17235: PPUSH
17236: CALL_OW 322
// end ;
17240: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
17241: LD_EXP 27
17245: PUSH
17246: LD_EXP 79
17250: AND
17251: IFFALSE 17372
17253: GO 17255
17255: DISABLE
17256: LD_INT 0
17258: PPUSH
17259: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17260: LD_ADDR_VAR 0 2
17264: PUSH
17265: LD_INT 22
17267: PUSH
17268: LD_OWVAR 2
17272: PUSH
17273: EMPTY
17274: LIST
17275: LIST
17276: PUSH
17277: LD_INT 21
17279: PUSH
17280: LD_INT 1
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: PUSH
17287: LD_INT 3
17289: PUSH
17290: LD_INT 23
17292: PUSH
17293: LD_INT 0
17295: PUSH
17296: EMPTY
17297: LIST
17298: LIST
17299: PUSH
17300: EMPTY
17301: LIST
17302: LIST
17303: PUSH
17304: EMPTY
17305: LIST
17306: LIST
17307: LIST
17308: PPUSH
17309: CALL_OW 69
17313: ST_TO_ADDR
// if not tmp then
17314: LD_VAR 0 2
17318: NOT
17319: IFFALSE 17323
// exit ;
17321: GO 17372
// for i in tmp do
17323: LD_ADDR_VAR 0 1
17327: PUSH
17328: LD_VAR 0 2
17332: PUSH
17333: FOR_IN
17334: IFFALSE 17370
// begin if Crawls ( i ) then
17336: LD_VAR 0 1
17340: PPUSH
17341: CALL_OW 318
17345: IFFALSE 17356
// ComWalk ( i ) ;
17347: LD_VAR 0 1
17351: PPUSH
17352: CALL_OW 138
// SetClass ( i , 2 ) ;
17356: LD_VAR 0 1
17360: PPUSH
17361: LD_INT 2
17363: PPUSH
17364: CALL_OW 336
// end ;
17368: GO 17333
17370: POP
17371: POP
// end ;
17372: PPOPN 2
17374: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
17375: LD_EXP 27
17379: PUSH
17380: LD_EXP 80
17384: AND
17385: IFFALSE 17666
17387: GO 17389
17389: DISABLE
17390: LD_INT 0
17392: PPUSH
17393: PPUSH
17394: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
17395: LD_OWVAR 2
17399: PPUSH
17400: LD_INT 9
17402: PPUSH
17403: LD_INT 1
17405: PPUSH
17406: LD_INT 1
17408: PPUSH
17409: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
17413: LD_INT 9
17415: PPUSH
17416: LD_OWVAR 2
17420: PPUSH
17421: CALL_OW 343
// uc_side := 9 ;
17425: LD_ADDR_OWVAR 20
17429: PUSH
17430: LD_INT 9
17432: ST_TO_ADDR
// uc_nation := 2 ;
17433: LD_ADDR_OWVAR 21
17437: PUSH
17438: LD_INT 2
17440: ST_TO_ADDR
// hc_name := Dark Warrior ;
17441: LD_ADDR_OWVAR 26
17445: PUSH
17446: LD_STRING Dark Warrior
17448: ST_TO_ADDR
// hc_gallery :=  ;
17449: LD_ADDR_OWVAR 33
17453: PUSH
17454: LD_STRING 
17456: ST_TO_ADDR
// hc_noskilllimit := true ;
17457: LD_ADDR_OWVAR 76
17461: PUSH
17462: LD_INT 1
17464: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
17465: LD_ADDR_OWVAR 31
17469: PUSH
17470: LD_INT 30
17472: PUSH
17473: LD_INT 30
17475: PUSH
17476: LD_INT 30
17478: PUSH
17479: LD_INT 30
17481: PUSH
17482: EMPTY
17483: LIST
17484: LIST
17485: LIST
17486: LIST
17487: ST_TO_ADDR
// un := CreateHuman ;
17488: LD_ADDR_VAR 0 3
17492: PUSH
17493: CALL_OW 44
17497: ST_TO_ADDR
// hc_noskilllimit := false ;
17498: LD_ADDR_OWVAR 76
17502: PUSH
17503: LD_INT 0
17505: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17506: LD_VAR 0 3
17510: PPUSH
17511: LD_INT 1
17513: PPUSH
17514: CALL_OW 51
// p := 0 ;
17518: LD_ADDR_VAR 0 2
17522: PUSH
17523: LD_INT 0
17525: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17526: LD_INT 35
17528: PPUSH
17529: CALL_OW 67
// p := p + 1 ;
17533: LD_ADDR_VAR 0 2
17537: PUSH
17538: LD_VAR 0 2
17542: PUSH
17543: LD_INT 1
17545: PLUS
17546: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17547: LD_VAR 0 3
17551: PPUSH
17552: CALL_OW 256
17556: PUSH
17557: LD_INT 1000
17559: LESS
17560: IFFALSE 17574
// SetLives ( un , 1000 ) ;
17562: LD_VAR 0 3
17566: PPUSH
17567: LD_INT 1000
17569: PPUSH
17570: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
17574: LD_VAR 0 3
17578: PPUSH
17579: LD_INT 81
17581: PUSH
17582: LD_OWVAR 2
17586: PUSH
17587: EMPTY
17588: LIST
17589: LIST
17590: PUSH
17591: LD_INT 91
17593: PUSH
17594: LD_VAR 0 3
17598: PUSH
17599: LD_INT 30
17601: PUSH
17602: EMPTY
17603: LIST
17604: LIST
17605: LIST
17606: PUSH
17607: EMPTY
17608: LIST
17609: LIST
17610: PPUSH
17611: CALL_OW 69
17615: PPUSH
17616: LD_VAR 0 3
17620: PPUSH
17621: CALL_OW 74
17625: PPUSH
17626: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
17630: LD_VAR 0 2
17634: PUSH
17635: LD_INT 60
17637: GREATER
17638: PUSH
17639: LD_VAR 0 3
17643: PPUSH
17644: CALL_OW 301
17648: OR
17649: IFFALSE 17526
// if un then
17651: LD_VAR 0 3
17655: IFFALSE 17666
// RemoveUnit ( un ) ;
17657: LD_VAR 0 3
17661: PPUSH
17662: CALL_OW 64
// end ;
17666: PPOPN 3
17668: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
17669: LD_INT 0
17671: PPUSH
17672: PPUSH
17673: PPUSH
17674: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17675: LD_ADDR_VAR 0 4
17679: PUSH
17680: LD_INT 22
17682: PUSH
17683: LD_OWVAR 2
17687: PUSH
17688: EMPTY
17689: LIST
17690: LIST
17691: PUSH
17692: LD_INT 2
17694: PUSH
17695: LD_INT 30
17697: PUSH
17698: LD_INT 0
17700: PUSH
17701: EMPTY
17702: LIST
17703: LIST
17704: PUSH
17705: LD_INT 30
17707: PUSH
17708: LD_INT 1
17710: PUSH
17711: EMPTY
17712: LIST
17713: LIST
17714: PUSH
17715: EMPTY
17716: LIST
17717: LIST
17718: LIST
17719: PUSH
17720: EMPTY
17721: LIST
17722: LIST
17723: PPUSH
17724: CALL_OW 69
17728: ST_TO_ADDR
// if not tmp then
17729: LD_VAR 0 4
17733: NOT
17734: IFFALSE 17738
// exit ;
17736: GO 17797
// for i in tmp do
17738: LD_ADDR_VAR 0 2
17742: PUSH
17743: LD_VAR 0 4
17747: PUSH
17748: FOR_IN
17749: IFFALSE 17795
// for j = 1 to 3 do
17751: LD_ADDR_VAR 0 3
17755: PUSH
17756: DOUBLE
17757: LD_INT 1
17759: DEC
17760: ST_TO_ADDR
17761: LD_INT 3
17763: PUSH
17764: FOR_TO
17765: IFFALSE 17791
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
17767: LD_VAR 0 2
17771: PPUSH
17772: CALL_OW 274
17776: PPUSH
17777: LD_VAR 0 3
17781: PPUSH
17782: LD_INT 99999
17784: PPUSH
17785: CALL_OW 277
17789: GO 17764
17791: POP
17792: POP
17793: GO 17748
17795: POP
17796: POP
// end ;
17797: LD_VAR 0 1
17801: RET
// export function hHackSetLevel10 ; var i , j ; begin
17802: LD_INT 0
17804: PPUSH
17805: PPUSH
17806: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17807: LD_ADDR_VAR 0 2
17811: PUSH
17812: LD_INT 21
17814: PUSH
17815: LD_INT 1
17817: PUSH
17818: EMPTY
17819: LIST
17820: LIST
17821: PPUSH
17822: CALL_OW 69
17826: PUSH
17827: FOR_IN
17828: IFFALSE 17880
// if IsSelected ( i ) then
17830: LD_VAR 0 2
17834: PPUSH
17835: CALL_OW 306
17839: IFFALSE 17878
// begin for j := 1 to 4 do
17841: LD_ADDR_VAR 0 3
17845: PUSH
17846: DOUBLE
17847: LD_INT 1
17849: DEC
17850: ST_TO_ADDR
17851: LD_INT 4
17853: PUSH
17854: FOR_TO
17855: IFFALSE 17876
// SetSkill ( i , j , 10 ) ;
17857: LD_VAR 0 2
17861: PPUSH
17862: LD_VAR 0 3
17866: PPUSH
17867: LD_INT 10
17869: PPUSH
17870: CALL_OW 237
17874: GO 17854
17876: POP
17877: POP
// end ;
17878: GO 17827
17880: POP
17881: POP
// end ;
17882: LD_VAR 0 1
17886: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
17887: LD_INT 0
17889: PPUSH
17890: PPUSH
17891: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
17892: LD_ADDR_VAR 0 2
17896: PUSH
17897: LD_INT 22
17899: PUSH
17900: LD_OWVAR 2
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: PUSH
17909: LD_INT 21
17911: PUSH
17912: LD_INT 1
17914: PUSH
17915: EMPTY
17916: LIST
17917: LIST
17918: PUSH
17919: EMPTY
17920: LIST
17921: LIST
17922: PPUSH
17923: CALL_OW 69
17927: PUSH
17928: FOR_IN
17929: IFFALSE 17970
// begin for j := 1 to 4 do
17931: LD_ADDR_VAR 0 3
17935: PUSH
17936: DOUBLE
17937: LD_INT 1
17939: DEC
17940: ST_TO_ADDR
17941: LD_INT 4
17943: PUSH
17944: FOR_TO
17945: IFFALSE 17966
// SetSkill ( i , j , 10 ) ;
17947: LD_VAR 0 2
17951: PPUSH
17952: LD_VAR 0 3
17956: PPUSH
17957: LD_INT 10
17959: PPUSH
17960: CALL_OW 237
17964: GO 17944
17966: POP
17967: POP
// end ;
17968: GO 17928
17970: POP
17971: POP
// end ;
17972: LD_VAR 0 1
17976: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
17977: LD_INT 0
17979: PPUSH
// uc_side := your_side ;
17980: LD_ADDR_OWVAR 20
17984: PUSH
17985: LD_OWVAR 2
17989: ST_TO_ADDR
// uc_nation := nation ;
17990: LD_ADDR_OWVAR 21
17994: PUSH
17995: LD_VAR 0 1
17999: ST_TO_ADDR
// InitHc ;
18000: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
18004: LD_INT 0
18006: PPUSH
18007: LD_VAR 0 2
18011: PPUSH
18012: LD_VAR 0 3
18016: PPUSH
18017: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
18021: CALL_OW 44
18025: PPUSH
18026: LD_INT 1
18028: PPUSH
18029: CALL_OW 51
// end ;
18033: LD_VAR 0 4
18037: RET
// export function hHackSpawnVehicle ; begin
18038: LD_INT 0
18040: PPUSH
// uc_side := your_side ;
18041: LD_ADDR_OWVAR 20
18045: PUSH
18046: LD_OWVAR 2
18050: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
18051: LD_ADDR_OWVAR 21
18055: PUSH
18056: LD_INT 1
18058: PPUSH
18059: LD_INT 3
18061: PPUSH
18062: CALL_OW 12
18066: ST_TO_ADDR
// InitVc ;
18067: CALL_OW 20
// case uc_nation of 1 :
18071: LD_OWVAR 21
18075: PUSH
18076: LD_INT 1
18078: DOUBLE
18079: EQUAL
18080: IFTRUE 18084
18082: GO 18228
18084: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
18085: LD_ADDR_OWVAR 37
18089: PUSH
18090: LD_INT 1
18092: PUSH
18093: LD_INT 2
18095: PUSH
18096: LD_INT 3
18098: PUSH
18099: LD_INT 4
18101: PUSH
18102: LD_INT 5
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: LIST
18109: LIST
18110: LIST
18111: PUSH
18112: LD_INT 1
18114: PPUSH
18115: LD_INT 5
18117: PPUSH
18118: CALL_OW 12
18122: ARRAY
18123: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
18124: LD_ADDR_OWVAR 39
18128: PUSH
18129: LD_INT 1
18131: PPUSH
18132: LD_INT 3
18134: PPUSH
18135: CALL_OW 12
18139: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
18140: LD_ADDR_OWVAR 38
18144: PUSH
18145: LD_INT 1
18147: PUSH
18148: LD_INT 2
18150: PUSH
18151: LD_INT 3
18153: PUSH
18154: EMPTY
18155: LIST
18156: LIST
18157: LIST
18158: PUSH
18159: LD_INT 1
18161: PPUSH
18162: LD_INT 3
18164: PPUSH
18165: CALL_OW 12
18169: ARRAY
18170: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
18171: LD_ADDR_OWVAR 40
18175: PUSH
18176: LD_INT 2
18178: PUSH
18179: LD_INT 4
18181: PUSH
18182: LD_INT 5
18184: PUSH
18185: LD_INT 3
18187: PUSH
18188: LD_INT 7
18190: PUSH
18191: LD_INT 8
18193: PUSH
18194: LD_INT 9
18196: PUSH
18197: LD_INT 10
18199: PUSH
18200: LD_INT 6
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: LIST
18207: LIST
18208: LIST
18209: LIST
18210: LIST
18211: LIST
18212: LIST
18213: PUSH
18214: LD_INT 1
18216: PPUSH
18217: LD_INT 9
18219: PPUSH
18220: CALL_OW 12
18224: ARRAY
18225: ST_TO_ADDR
// end ; 2 :
18226: GO 18493
18228: LD_INT 2
18230: DOUBLE
18231: EQUAL
18232: IFTRUE 18236
18234: GO 18360
18236: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
18237: LD_ADDR_OWVAR 37
18241: PUSH
18242: LD_INT 11
18244: PUSH
18245: LD_INT 12
18247: PUSH
18248: LD_INT 13
18250: PUSH
18251: LD_INT 14
18253: PUSH
18254: EMPTY
18255: LIST
18256: LIST
18257: LIST
18258: LIST
18259: PUSH
18260: LD_INT 1
18262: PPUSH
18263: LD_INT 4
18265: PPUSH
18266: CALL_OW 12
18270: ARRAY
18271: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
18272: LD_ADDR_OWVAR 39
18276: PUSH
18277: LD_INT 1
18279: PPUSH
18280: LD_INT 3
18282: PPUSH
18283: CALL_OW 12
18287: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
18288: LD_ADDR_OWVAR 38
18292: PUSH
18293: LD_INT 1
18295: PUSH
18296: LD_INT 2
18298: PUSH
18299: LD_INT 5
18301: PUSH
18302: EMPTY
18303: LIST
18304: LIST
18305: LIST
18306: PUSH
18307: LD_INT 1
18309: PPUSH
18310: LD_INT 3
18312: PPUSH
18313: CALL_OW 12
18317: ARRAY
18318: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
18319: LD_ADDR_OWVAR 40
18323: PUSH
18324: LD_INT 24
18326: PUSH
18327: LD_INT 26
18329: PUSH
18330: LD_INT 27
18332: PUSH
18333: LD_INT 28
18335: PUSH
18336: LD_INT 29
18338: PUSH
18339: EMPTY
18340: LIST
18341: LIST
18342: LIST
18343: LIST
18344: LIST
18345: PUSH
18346: LD_INT 1
18348: PPUSH
18349: LD_INT 5
18351: PPUSH
18352: CALL_OW 12
18356: ARRAY
18357: ST_TO_ADDR
// end ; 3 :
18358: GO 18493
18360: LD_INT 3
18362: DOUBLE
18363: EQUAL
18364: IFTRUE 18368
18366: GO 18492
18368: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
18369: LD_ADDR_OWVAR 37
18373: PUSH
18374: LD_INT 21
18376: PUSH
18377: LD_INT 23
18379: PUSH
18380: LD_INT 22
18382: PUSH
18383: LD_INT 24
18385: PUSH
18386: EMPTY
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: PUSH
18392: LD_INT 1
18394: PPUSH
18395: LD_INT 4
18397: PPUSH
18398: CALL_OW 12
18402: ARRAY
18403: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
18404: LD_ADDR_OWVAR 39
18408: PUSH
18409: LD_INT 1
18411: PPUSH
18412: LD_INT 3
18414: PPUSH
18415: CALL_OW 12
18419: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
18420: LD_ADDR_OWVAR 38
18424: PUSH
18425: LD_INT 1
18427: PUSH
18428: LD_INT 3
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: PUSH
18435: LD_INT 1
18437: PPUSH
18438: LD_INT 2
18440: PPUSH
18441: CALL_OW 12
18445: ARRAY
18446: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
18447: LD_ADDR_OWVAR 40
18451: PUSH
18452: LD_INT 42
18454: PUSH
18455: LD_INT 43
18457: PUSH
18458: LD_INT 44
18460: PUSH
18461: LD_INT 46
18463: PUSH
18464: LD_INT 48
18466: PUSH
18467: LD_INT 47
18469: PUSH
18470: EMPTY
18471: LIST
18472: LIST
18473: LIST
18474: LIST
18475: LIST
18476: LIST
18477: PUSH
18478: LD_INT 1
18480: PPUSH
18481: LD_INT 6
18483: PPUSH
18484: CALL_OW 12
18488: ARRAY
18489: ST_TO_ADDR
// end ; end ;
18490: GO 18493
18492: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
18493: CALL_OW 45
18497: PPUSH
18498: LD_INT 1
18500: PPUSH
18501: CALL_OW 51
// end ;
18505: LD_VAR 0 1
18509: RET
// export hInvincible ; every 1 do
18510: GO 18512
18512: DISABLE
// hInvincible := [ ] ;
18513: LD_ADDR_EXP 81
18517: PUSH
18518: EMPTY
18519: ST_TO_ADDR
18520: END
// every 10 do var i ;
18521: GO 18523
18523: DISABLE
18524: LD_INT 0
18526: PPUSH
// begin enable ;
18527: ENABLE
// if not hInvincible then
18528: LD_EXP 81
18532: NOT
18533: IFFALSE 18537
// exit ;
18535: GO 18581
// for i in hInvincible do
18537: LD_ADDR_VAR 0 1
18541: PUSH
18542: LD_EXP 81
18546: PUSH
18547: FOR_IN
18548: IFFALSE 18579
// if GetLives ( i ) < 1000 then
18550: LD_VAR 0 1
18554: PPUSH
18555: CALL_OW 256
18559: PUSH
18560: LD_INT 1000
18562: LESS
18563: IFFALSE 18577
// SetLives ( i , 1000 ) ;
18565: LD_VAR 0 1
18569: PPUSH
18570: LD_INT 1000
18572: PPUSH
18573: CALL_OW 234
18577: GO 18547
18579: POP
18580: POP
// end ;
18581: PPOPN 1
18583: END
// export function hHackInvincible ; var i ; begin
18584: LD_INT 0
18586: PPUSH
18587: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
18588: LD_ADDR_VAR 0 2
18592: PUSH
18593: LD_INT 2
18595: PUSH
18596: LD_INT 21
18598: PUSH
18599: LD_INT 1
18601: PUSH
18602: EMPTY
18603: LIST
18604: LIST
18605: PUSH
18606: LD_INT 21
18608: PUSH
18609: LD_INT 2
18611: PUSH
18612: EMPTY
18613: LIST
18614: LIST
18615: PUSH
18616: EMPTY
18617: LIST
18618: LIST
18619: LIST
18620: PPUSH
18621: CALL_OW 69
18625: PUSH
18626: FOR_IN
18627: IFFALSE 18688
// if IsSelected ( i ) then
18629: LD_VAR 0 2
18633: PPUSH
18634: CALL_OW 306
18638: IFFALSE 18686
// begin if i in hInvincible then
18640: LD_VAR 0 2
18644: PUSH
18645: LD_EXP 81
18649: IN
18650: IFFALSE 18670
// hInvincible := hInvincible diff i else
18652: LD_ADDR_EXP 81
18656: PUSH
18657: LD_EXP 81
18661: PUSH
18662: LD_VAR 0 2
18666: DIFF
18667: ST_TO_ADDR
18668: GO 18686
// hInvincible := hInvincible union i ;
18670: LD_ADDR_EXP 81
18674: PUSH
18675: LD_EXP 81
18679: PUSH
18680: LD_VAR 0 2
18684: UNION
18685: ST_TO_ADDR
// end ;
18686: GO 18626
18688: POP
18689: POP
// end ;
18690: LD_VAR 0 1
18694: RET
// export function hHackInvisible ; var i , j ; begin
18695: LD_INT 0
18697: PPUSH
18698: PPUSH
18699: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18700: LD_ADDR_VAR 0 2
18704: PUSH
18705: LD_INT 21
18707: PUSH
18708: LD_INT 1
18710: PUSH
18711: EMPTY
18712: LIST
18713: LIST
18714: PPUSH
18715: CALL_OW 69
18719: PUSH
18720: FOR_IN
18721: IFFALSE 18745
// if IsSelected ( i ) then
18723: LD_VAR 0 2
18727: PPUSH
18728: CALL_OW 306
18732: IFFALSE 18743
// ComForceInvisible ( i ) ;
18734: LD_VAR 0 2
18738: PPUSH
18739: CALL_OW 496
18743: GO 18720
18745: POP
18746: POP
// end ;
18747: LD_VAR 0 1
18751: RET
// export function hHackChangeYourSide ; begin
18752: LD_INT 0
18754: PPUSH
// if your_side = 8 then
18755: LD_OWVAR 2
18759: PUSH
18760: LD_INT 8
18762: EQUAL
18763: IFFALSE 18775
// your_side := 0 else
18765: LD_ADDR_OWVAR 2
18769: PUSH
18770: LD_INT 0
18772: ST_TO_ADDR
18773: GO 18789
// your_side := your_side + 1 ;
18775: LD_ADDR_OWVAR 2
18779: PUSH
18780: LD_OWVAR 2
18784: PUSH
18785: LD_INT 1
18787: PLUS
18788: ST_TO_ADDR
// end ;
18789: LD_VAR 0 1
18793: RET
// export function hHackChangeUnitSide ; var i , j ; begin
18794: LD_INT 0
18796: PPUSH
18797: PPUSH
18798: PPUSH
// for i in all_units do
18799: LD_ADDR_VAR 0 2
18803: PUSH
18804: LD_OWVAR 3
18808: PUSH
18809: FOR_IN
18810: IFFALSE 18888
// if IsSelected ( i ) then
18812: LD_VAR 0 2
18816: PPUSH
18817: CALL_OW 306
18821: IFFALSE 18886
// begin j := GetSide ( i ) ;
18823: LD_ADDR_VAR 0 3
18827: PUSH
18828: LD_VAR 0 2
18832: PPUSH
18833: CALL_OW 255
18837: ST_TO_ADDR
// if j = 8 then
18838: LD_VAR 0 3
18842: PUSH
18843: LD_INT 8
18845: EQUAL
18846: IFFALSE 18858
// j := 0 else
18848: LD_ADDR_VAR 0 3
18852: PUSH
18853: LD_INT 0
18855: ST_TO_ADDR
18856: GO 18872
// j := j + 1 ;
18858: LD_ADDR_VAR 0 3
18862: PUSH
18863: LD_VAR 0 3
18867: PUSH
18868: LD_INT 1
18870: PLUS
18871: ST_TO_ADDR
// SetSide ( i , j ) ;
18872: LD_VAR 0 2
18876: PPUSH
18877: LD_VAR 0 3
18881: PPUSH
18882: CALL_OW 235
// end ;
18886: GO 18809
18888: POP
18889: POP
// end ;
18890: LD_VAR 0 1
18894: RET
// export function hHackFog ; begin
18895: LD_INT 0
18897: PPUSH
// FogOff ( true ) ;
18898: LD_INT 1
18900: PPUSH
18901: CALL_OW 344
// end ;
18905: LD_VAR 0 1
18909: RET
// export function hHackApeman ; begin
18910: LD_INT 0
18912: PPUSH
// uc_side := your_side ;
18913: LD_ADDR_OWVAR 20
18917: PUSH
18918: LD_OWVAR 2
18922: ST_TO_ADDR
// uc_nation := 0 ;
18923: LD_ADDR_OWVAR 21
18927: PUSH
18928: LD_INT 0
18930: ST_TO_ADDR
// hc_name :=  ;
18931: LD_ADDR_OWVAR 26
18935: PUSH
18936: LD_STRING 
18938: ST_TO_ADDR
// hc_gallery :=  ;
18939: LD_ADDR_OWVAR 33
18943: PUSH
18944: LD_STRING 
18946: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
18947: LD_ADDR_OWVAR 31
18951: PUSH
18952: LD_INT 0
18954: PUSH
18955: LD_INT 0
18957: PUSH
18958: LD_INT 0
18960: PUSH
18961: LD_INT 0
18963: PUSH
18964: EMPTY
18965: LIST
18966: LIST
18967: LIST
18968: LIST
18969: ST_TO_ADDR
// hc_class := class_apeman ;
18970: LD_ADDR_OWVAR 28
18974: PUSH
18975: LD_INT 12
18977: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
18978: CALL_OW 44
18982: PPUSH
18983: LD_INT 1
18985: PPUSH
18986: CALL_OW 51
// end ;
18990: LD_VAR 0 1
18994: RET
// export function hHackBoom ; begin
18995: LD_INT 0
18997: PPUSH
// uc_side := your_side ;
18998: LD_ADDR_OWVAR 20
19002: PUSH
19003: LD_OWVAR 2
19007: ST_TO_ADDR
// uc_nation := 1 ;
19008: LD_ADDR_OWVAR 21
19012: PUSH
19013: LD_INT 1
19015: ST_TO_ADDR
// vc_chassis := us_morphling ;
19016: LD_ADDR_OWVAR 37
19020: PUSH
19021: LD_INT 5
19023: ST_TO_ADDR
// vc_engine := engine_siberite ;
19024: LD_ADDR_OWVAR 39
19028: PUSH
19029: LD_INT 3
19031: ST_TO_ADDR
// vc_control := control_computer ;
19032: LD_ADDR_OWVAR 38
19036: PUSH
19037: LD_INT 3
19039: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
19040: LD_ADDR_OWVAR 40
19044: PUSH
19045: LD_INT 8
19047: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19048: CALL_OW 45
19052: PPUSH
19053: LD_INT 1
19055: PPUSH
19056: CALL_OW 51
// end ; end_of_file
19060: LD_VAR 0 1
19064: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
19065: LD_INT 0
19067: PPUSH
19068: PPUSH
19069: PPUSH
19070: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
19071: LD_VAR 0 1
19075: PPUSH
19076: CALL_OW 264
19080: PUSH
19081: LD_EXP 92
19085: EQUAL
19086: IFFALSE 19158
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
19088: LD_INT 68
19090: PPUSH
19091: LD_VAR 0 1
19095: PPUSH
19096: CALL_OW 255
19100: PPUSH
19101: CALL_OW 321
19105: PUSH
19106: LD_INT 2
19108: EQUAL
19109: IFFALSE 19121
// eff := 70 else
19111: LD_ADDR_VAR 0 4
19115: PUSH
19116: LD_INT 70
19118: ST_TO_ADDR
19119: GO 19129
// eff := 30 ;
19121: LD_ADDR_VAR 0 4
19125: PUSH
19126: LD_INT 30
19128: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
19129: LD_VAR 0 1
19133: PPUSH
19134: CALL_OW 250
19138: PPUSH
19139: LD_VAR 0 1
19143: PPUSH
19144: CALL_OW 251
19148: PPUSH
19149: LD_VAR 0 4
19153: PPUSH
19154: CALL_OW 495
// end ; end ;
19158: LD_VAR 0 2
19162: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
19163: LD_INT 0
19165: PPUSH
// end ;
19166: LD_VAR 0 4
19170: RET
// export function SOS_Command ( cmd ) ; begin
19171: LD_INT 0
19173: PPUSH
// end ;
19174: LD_VAR 0 2
19178: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
19179: LD_VAR 0 1
19183: PUSH
19184: LD_INT 254
19186: EQUAL
19187: PUSH
19188: LD_VAR 0 2
19192: PPUSH
19193: CALL_OW 264
19197: PUSH
19198: LD_EXP 90
19202: EQUAL
19203: AND
19204: PUSH
19205: LD_VAR 0 3
19209: PPUSH
19210: CALL_OW 263
19214: PUSH
19215: LD_INT 3
19217: EQUAL
19218: AND
19219: IFFALSE 19235
// HackDestroyVehicle ( unit , selectedUnit ) ;
19221: LD_VAR 0 2
19225: PPUSH
19226: LD_VAR 0 3
19230: PPUSH
19231: CALL 20742 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
19235: LD_VAR 0 1
19239: PUSH
19240: LD_INT 255
19242: EQUAL
19243: PUSH
19244: LD_VAR 0 2
19248: PPUSH
19249: CALL_OW 264
19253: PUSH
19254: LD_INT 14
19256: PUSH
19257: LD_INT 53
19259: PUSH
19260: EMPTY
19261: LIST
19262: LIST
19263: IN
19264: AND
19265: PUSH
19266: LD_VAR 0 4
19270: PPUSH
19271: LD_VAR 0 5
19275: PPUSH
19276: CALL_OW 488
19280: AND
19281: IFFALSE 19305
// CutTreeXYR ( unit , x , y , 12 ) ;
19283: LD_VAR 0 2
19287: PPUSH
19288: LD_VAR 0 4
19292: PPUSH
19293: LD_VAR 0 5
19297: PPUSH
19298: LD_INT 12
19300: PPUSH
19301: CALL 19308 0 4
// end ;
19305: PPOPN 5
19307: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
19308: LD_INT 0
19310: PPUSH
19311: PPUSH
19312: PPUSH
19313: PPUSH
19314: PPUSH
19315: PPUSH
19316: PPUSH
19317: PPUSH
19318: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
19319: LD_VAR 0 1
19323: NOT
19324: PUSH
19325: LD_VAR 0 2
19329: PPUSH
19330: LD_VAR 0 3
19334: PPUSH
19335: CALL_OW 488
19339: NOT
19340: OR
19341: PUSH
19342: LD_VAR 0 4
19346: NOT
19347: OR
19348: IFFALSE 19352
// exit ;
19350: GO 19692
// list := [ ] ;
19352: LD_ADDR_VAR 0 13
19356: PUSH
19357: EMPTY
19358: ST_TO_ADDR
// if x - r < 0 then
19359: LD_VAR 0 2
19363: PUSH
19364: LD_VAR 0 4
19368: MINUS
19369: PUSH
19370: LD_INT 0
19372: LESS
19373: IFFALSE 19385
// min_x := 0 else
19375: LD_ADDR_VAR 0 7
19379: PUSH
19380: LD_INT 0
19382: ST_TO_ADDR
19383: GO 19401
// min_x := x - r ;
19385: LD_ADDR_VAR 0 7
19389: PUSH
19390: LD_VAR 0 2
19394: PUSH
19395: LD_VAR 0 4
19399: MINUS
19400: ST_TO_ADDR
// if y - r < 0 then
19401: LD_VAR 0 3
19405: PUSH
19406: LD_VAR 0 4
19410: MINUS
19411: PUSH
19412: LD_INT 0
19414: LESS
19415: IFFALSE 19427
// min_y := 0 else
19417: LD_ADDR_VAR 0 8
19421: PUSH
19422: LD_INT 0
19424: ST_TO_ADDR
19425: GO 19443
// min_y := y - r ;
19427: LD_ADDR_VAR 0 8
19431: PUSH
19432: LD_VAR 0 3
19436: PUSH
19437: LD_VAR 0 4
19441: MINUS
19442: ST_TO_ADDR
// max_x := x + r ;
19443: LD_ADDR_VAR 0 9
19447: PUSH
19448: LD_VAR 0 2
19452: PUSH
19453: LD_VAR 0 4
19457: PLUS
19458: ST_TO_ADDR
// max_y := y + r ;
19459: LD_ADDR_VAR 0 10
19463: PUSH
19464: LD_VAR 0 3
19468: PUSH
19469: LD_VAR 0 4
19473: PLUS
19474: ST_TO_ADDR
// for _x = min_x to max_x do
19475: LD_ADDR_VAR 0 11
19479: PUSH
19480: DOUBLE
19481: LD_VAR 0 7
19485: DEC
19486: ST_TO_ADDR
19487: LD_VAR 0 9
19491: PUSH
19492: FOR_TO
19493: IFFALSE 19610
// for _y = min_y to max_y do
19495: LD_ADDR_VAR 0 12
19499: PUSH
19500: DOUBLE
19501: LD_VAR 0 8
19505: DEC
19506: ST_TO_ADDR
19507: LD_VAR 0 10
19511: PUSH
19512: FOR_TO
19513: IFFALSE 19606
// begin if not ValidHex ( _x , _y ) then
19515: LD_VAR 0 11
19519: PPUSH
19520: LD_VAR 0 12
19524: PPUSH
19525: CALL_OW 488
19529: NOT
19530: IFFALSE 19534
// continue ;
19532: GO 19512
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
19534: LD_VAR 0 11
19538: PPUSH
19539: LD_VAR 0 12
19543: PPUSH
19544: CALL_OW 351
19548: PUSH
19549: LD_VAR 0 11
19553: PPUSH
19554: LD_VAR 0 12
19558: PPUSH
19559: CALL_OW 554
19563: AND
19564: IFFALSE 19604
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
19566: LD_ADDR_VAR 0 13
19570: PUSH
19571: LD_VAR 0 13
19575: PPUSH
19576: LD_VAR 0 13
19580: PUSH
19581: LD_INT 1
19583: PLUS
19584: PPUSH
19585: LD_VAR 0 11
19589: PUSH
19590: LD_VAR 0 12
19594: PUSH
19595: EMPTY
19596: LIST
19597: LIST
19598: PPUSH
19599: CALL_OW 2
19603: ST_TO_ADDR
// end ;
19604: GO 19512
19606: POP
19607: POP
19608: GO 19492
19610: POP
19611: POP
// if not list then
19612: LD_VAR 0 13
19616: NOT
19617: IFFALSE 19621
// exit ;
19619: GO 19692
// for i in list do
19621: LD_ADDR_VAR 0 6
19625: PUSH
19626: LD_VAR 0 13
19630: PUSH
19631: FOR_IN
19632: IFFALSE 19690
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
19634: LD_VAR 0 1
19638: PPUSH
19639: LD_STRING M
19641: PUSH
19642: LD_VAR 0 6
19646: PUSH
19647: LD_INT 1
19649: ARRAY
19650: PUSH
19651: LD_VAR 0 6
19655: PUSH
19656: LD_INT 2
19658: ARRAY
19659: PUSH
19660: LD_INT 0
19662: PUSH
19663: LD_INT 0
19665: PUSH
19666: LD_INT 0
19668: PUSH
19669: LD_INT 0
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: LIST
19676: LIST
19677: LIST
19678: LIST
19679: LIST
19680: PUSH
19681: EMPTY
19682: LIST
19683: PPUSH
19684: CALL_OW 447
19688: GO 19631
19690: POP
19691: POP
// end ;
19692: LD_VAR 0 5
19696: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
19697: LD_EXP 82
19701: NOT
19702: IFFALSE 19752
19704: GO 19706
19706: DISABLE
// begin initHack := true ;
19707: LD_ADDR_EXP 82
19711: PUSH
19712: LD_INT 1
19714: ST_TO_ADDR
// hackTanks := [ ] ;
19715: LD_ADDR_EXP 83
19719: PUSH
19720: EMPTY
19721: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
19722: LD_ADDR_EXP 84
19726: PUSH
19727: EMPTY
19728: ST_TO_ADDR
// hackLimit := 3 ;
19729: LD_ADDR_EXP 85
19733: PUSH
19734: LD_INT 3
19736: ST_TO_ADDR
// hackDist := 12 ;
19737: LD_ADDR_EXP 86
19741: PUSH
19742: LD_INT 12
19744: ST_TO_ADDR
// hackCounter := [ ] ;
19745: LD_ADDR_EXP 87
19749: PUSH
19750: EMPTY
19751: ST_TO_ADDR
// end ;
19752: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
19753: LD_EXP 82
19757: PUSH
19758: LD_INT 34
19760: PUSH
19761: LD_EXP 90
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: PPUSH
19770: CALL_OW 69
19774: AND
19775: IFFALSE 20030
19777: GO 19779
19779: DISABLE
19780: LD_INT 0
19782: PPUSH
19783: PPUSH
// begin enable ;
19784: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
19785: LD_ADDR_VAR 0 1
19789: PUSH
19790: LD_INT 34
19792: PUSH
19793: LD_EXP 90
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: PPUSH
19802: CALL_OW 69
19806: PUSH
19807: FOR_IN
19808: IFFALSE 20028
// begin if not i in hackTanks then
19810: LD_VAR 0 1
19814: PUSH
19815: LD_EXP 83
19819: IN
19820: NOT
19821: IFFALSE 19904
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
19823: LD_ADDR_EXP 83
19827: PUSH
19828: LD_EXP 83
19832: PPUSH
19833: LD_EXP 83
19837: PUSH
19838: LD_INT 1
19840: PLUS
19841: PPUSH
19842: LD_VAR 0 1
19846: PPUSH
19847: CALL_OW 1
19851: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
19852: LD_ADDR_EXP 84
19856: PUSH
19857: LD_EXP 84
19861: PPUSH
19862: LD_EXP 84
19866: PUSH
19867: LD_INT 1
19869: PLUS
19870: PPUSH
19871: EMPTY
19872: PPUSH
19873: CALL_OW 1
19877: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
19878: LD_ADDR_EXP 87
19882: PUSH
19883: LD_EXP 87
19887: PPUSH
19888: LD_EXP 87
19892: PUSH
19893: LD_INT 1
19895: PLUS
19896: PPUSH
19897: EMPTY
19898: PPUSH
19899: CALL_OW 1
19903: ST_TO_ADDR
// end ; if not IsOk ( i ) then
19904: LD_VAR 0 1
19908: PPUSH
19909: CALL_OW 302
19913: NOT
19914: IFFALSE 19927
// begin HackUnlinkAll ( i ) ;
19916: LD_VAR 0 1
19920: PPUSH
19921: CALL 20033 0 1
// continue ;
19925: GO 19807
// end ; HackCheckCapturedStatus ( i ) ;
19927: LD_VAR 0 1
19931: PPUSH
19932: CALL 20476 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
19936: LD_ADDR_VAR 0 2
19940: PUSH
19941: LD_INT 81
19943: PUSH
19944: LD_VAR 0 1
19948: PPUSH
19949: CALL_OW 255
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: PUSH
19958: LD_INT 33
19960: PUSH
19961: LD_INT 3
19963: PUSH
19964: EMPTY
19965: LIST
19966: LIST
19967: PUSH
19968: LD_INT 91
19970: PUSH
19971: LD_VAR 0 1
19975: PUSH
19976: LD_EXP 86
19980: PUSH
19981: EMPTY
19982: LIST
19983: LIST
19984: LIST
19985: PUSH
19986: LD_INT 50
19988: PUSH
19989: EMPTY
19990: LIST
19991: PUSH
19992: EMPTY
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: PPUSH
19998: CALL_OW 69
20002: ST_TO_ADDR
// if not tmp then
20003: LD_VAR 0 2
20007: NOT
20008: IFFALSE 20012
// continue ;
20010: GO 19807
// HackLink ( i , tmp ) ;
20012: LD_VAR 0 1
20016: PPUSH
20017: LD_VAR 0 2
20021: PPUSH
20022: CALL 20169 0 2
// end ;
20026: GO 19807
20028: POP
20029: POP
// end ;
20030: PPOPN 2
20032: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
20033: LD_INT 0
20035: PPUSH
20036: PPUSH
20037: PPUSH
// if not hack in hackTanks then
20038: LD_VAR 0 1
20042: PUSH
20043: LD_EXP 83
20047: IN
20048: NOT
20049: IFFALSE 20053
// exit ;
20051: GO 20164
// index := GetElementIndex ( hackTanks , hack ) ;
20053: LD_ADDR_VAR 0 4
20057: PUSH
20058: LD_EXP 83
20062: PPUSH
20063: LD_VAR 0 1
20067: PPUSH
20068: CALL 25720 0 2
20072: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
20073: LD_EXP 84
20077: PUSH
20078: LD_VAR 0 4
20082: ARRAY
20083: IFFALSE 20164
// begin for i in hackTanksCaptured [ index ] do
20085: LD_ADDR_VAR 0 3
20089: PUSH
20090: LD_EXP 84
20094: PUSH
20095: LD_VAR 0 4
20099: ARRAY
20100: PUSH
20101: FOR_IN
20102: IFFALSE 20128
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
20104: LD_VAR 0 3
20108: PUSH
20109: LD_INT 1
20111: ARRAY
20112: PPUSH
20113: LD_VAR 0 3
20117: PUSH
20118: LD_INT 2
20120: ARRAY
20121: PPUSH
20122: CALL_OW 235
20126: GO 20101
20128: POP
20129: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
20130: LD_ADDR_EXP 84
20134: PUSH
20135: LD_EXP 84
20139: PPUSH
20140: LD_VAR 0 4
20144: PPUSH
20145: EMPTY
20146: PPUSH
20147: CALL_OW 1
20151: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
20152: LD_VAR 0 1
20156: PPUSH
20157: LD_INT 0
20159: PPUSH
20160: CALL_OW 505
// end ; end ;
20164: LD_VAR 0 2
20168: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
20169: LD_INT 0
20171: PPUSH
20172: PPUSH
20173: PPUSH
// if not hack in hackTanks or not vehicles then
20174: LD_VAR 0 1
20178: PUSH
20179: LD_EXP 83
20183: IN
20184: NOT
20185: PUSH
20186: LD_VAR 0 2
20190: NOT
20191: OR
20192: IFFALSE 20196
// exit ;
20194: GO 20471
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
20196: LD_ADDR_VAR 0 2
20200: PUSH
20201: LD_VAR 0 1
20205: PPUSH
20206: LD_VAR 0 2
20210: PPUSH
20211: LD_INT 1
20213: PPUSH
20214: LD_INT 1
20216: PPUSH
20217: CALL 26370 0 4
20221: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
20222: LD_ADDR_VAR 0 5
20226: PUSH
20227: LD_EXP 83
20231: PPUSH
20232: LD_VAR 0 1
20236: PPUSH
20237: CALL 25720 0 2
20241: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
20242: LD_EXP 84
20246: PUSH
20247: LD_VAR 0 5
20251: ARRAY
20252: PUSH
20253: LD_EXP 85
20257: LESS
20258: IFFALSE 20447
// begin for i := 1 to vehicles do
20260: LD_ADDR_VAR 0 4
20264: PUSH
20265: DOUBLE
20266: LD_INT 1
20268: DEC
20269: ST_TO_ADDR
20270: LD_VAR 0 2
20274: PUSH
20275: FOR_TO
20276: IFFALSE 20445
// begin if hackTanksCaptured [ index ] = hackLimit then
20278: LD_EXP 84
20282: PUSH
20283: LD_VAR 0 5
20287: ARRAY
20288: PUSH
20289: LD_EXP 85
20293: EQUAL
20294: IFFALSE 20298
// break ;
20296: GO 20445
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
20298: LD_ADDR_EXP 87
20302: PUSH
20303: LD_EXP 87
20307: PPUSH
20308: LD_VAR 0 5
20312: PPUSH
20313: LD_EXP 87
20317: PUSH
20318: LD_VAR 0 5
20322: ARRAY
20323: PUSH
20324: LD_INT 1
20326: PLUS
20327: PPUSH
20328: CALL_OW 1
20332: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
20333: LD_ADDR_EXP 84
20337: PUSH
20338: LD_EXP 84
20342: PPUSH
20343: LD_VAR 0 5
20347: PUSH
20348: LD_EXP 84
20352: PUSH
20353: LD_VAR 0 5
20357: ARRAY
20358: PUSH
20359: LD_INT 1
20361: PLUS
20362: PUSH
20363: EMPTY
20364: LIST
20365: LIST
20366: PPUSH
20367: LD_VAR 0 2
20371: PUSH
20372: LD_VAR 0 4
20376: ARRAY
20377: PUSH
20378: LD_VAR 0 2
20382: PUSH
20383: LD_VAR 0 4
20387: ARRAY
20388: PPUSH
20389: CALL_OW 255
20393: PUSH
20394: EMPTY
20395: LIST
20396: LIST
20397: PPUSH
20398: CALL 25935 0 3
20402: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
20403: LD_VAR 0 2
20407: PUSH
20408: LD_VAR 0 4
20412: ARRAY
20413: PPUSH
20414: LD_VAR 0 1
20418: PPUSH
20419: CALL_OW 255
20423: PPUSH
20424: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
20428: LD_VAR 0 2
20432: PUSH
20433: LD_VAR 0 4
20437: ARRAY
20438: PPUSH
20439: CALL_OW 141
// end ;
20443: GO 20275
20445: POP
20446: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
20447: LD_VAR 0 1
20451: PPUSH
20452: LD_EXP 84
20456: PUSH
20457: LD_VAR 0 5
20461: ARRAY
20462: PUSH
20463: LD_INT 0
20465: PLUS
20466: PPUSH
20467: CALL_OW 505
// end ;
20471: LD_VAR 0 3
20475: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
20476: LD_INT 0
20478: PPUSH
20479: PPUSH
20480: PPUSH
20481: PPUSH
// if not hack in hackTanks then
20482: LD_VAR 0 1
20486: PUSH
20487: LD_EXP 83
20491: IN
20492: NOT
20493: IFFALSE 20497
// exit ;
20495: GO 20737
// index := GetElementIndex ( hackTanks , hack ) ;
20497: LD_ADDR_VAR 0 4
20501: PUSH
20502: LD_EXP 83
20506: PPUSH
20507: LD_VAR 0 1
20511: PPUSH
20512: CALL 25720 0 2
20516: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
20517: LD_ADDR_VAR 0 3
20521: PUSH
20522: DOUBLE
20523: LD_EXP 84
20527: PUSH
20528: LD_VAR 0 4
20532: ARRAY
20533: INC
20534: ST_TO_ADDR
20535: LD_INT 1
20537: PUSH
20538: FOR_DOWNTO
20539: IFFALSE 20711
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
20541: LD_ADDR_VAR 0 5
20545: PUSH
20546: LD_EXP 84
20550: PUSH
20551: LD_VAR 0 4
20555: ARRAY
20556: PUSH
20557: LD_VAR 0 3
20561: ARRAY
20562: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
20563: LD_VAR 0 5
20567: PUSH
20568: LD_INT 1
20570: ARRAY
20571: PPUSH
20572: CALL_OW 302
20576: NOT
20577: PUSH
20578: LD_VAR 0 5
20582: PUSH
20583: LD_INT 1
20585: ARRAY
20586: PPUSH
20587: CALL_OW 255
20591: PUSH
20592: LD_VAR 0 1
20596: PPUSH
20597: CALL_OW 255
20601: NONEQUAL
20602: OR
20603: IFFALSE 20709
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
20605: LD_VAR 0 5
20609: PUSH
20610: LD_INT 1
20612: ARRAY
20613: PPUSH
20614: CALL_OW 305
20618: PUSH
20619: LD_VAR 0 5
20623: PUSH
20624: LD_INT 1
20626: ARRAY
20627: PPUSH
20628: CALL_OW 255
20632: PUSH
20633: LD_VAR 0 1
20637: PPUSH
20638: CALL_OW 255
20642: EQUAL
20643: AND
20644: IFFALSE 20668
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
20646: LD_VAR 0 5
20650: PUSH
20651: LD_INT 1
20653: ARRAY
20654: PPUSH
20655: LD_VAR 0 5
20659: PUSH
20660: LD_INT 2
20662: ARRAY
20663: PPUSH
20664: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
20668: LD_ADDR_EXP 84
20672: PUSH
20673: LD_EXP 84
20677: PPUSH
20678: LD_VAR 0 4
20682: PPUSH
20683: LD_EXP 84
20687: PUSH
20688: LD_VAR 0 4
20692: ARRAY
20693: PPUSH
20694: LD_VAR 0 3
20698: PPUSH
20699: CALL_OW 3
20703: PPUSH
20704: CALL_OW 1
20708: ST_TO_ADDR
// end ; end ;
20709: GO 20538
20711: POP
20712: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
20713: LD_VAR 0 1
20717: PPUSH
20718: LD_EXP 84
20722: PUSH
20723: LD_VAR 0 4
20727: ARRAY
20728: PUSH
20729: LD_INT 0
20731: PLUS
20732: PPUSH
20733: CALL_OW 505
// end ;
20737: LD_VAR 0 2
20741: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
20742: LD_INT 0
20744: PPUSH
20745: PPUSH
20746: PPUSH
20747: PPUSH
// if not hack in hackTanks then
20748: LD_VAR 0 1
20752: PUSH
20753: LD_EXP 83
20757: IN
20758: NOT
20759: IFFALSE 20763
// exit ;
20761: GO 20848
// index := GetElementIndex ( hackTanks , hack ) ;
20763: LD_ADDR_VAR 0 5
20767: PUSH
20768: LD_EXP 83
20772: PPUSH
20773: LD_VAR 0 1
20777: PPUSH
20778: CALL 25720 0 2
20782: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
20783: LD_ADDR_VAR 0 4
20787: PUSH
20788: DOUBLE
20789: LD_INT 1
20791: DEC
20792: ST_TO_ADDR
20793: LD_EXP 84
20797: PUSH
20798: LD_VAR 0 5
20802: ARRAY
20803: PUSH
20804: FOR_TO
20805: IFFALSE 20846
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
20807: LD_EXP 84
20811: PUSH
20812: LD_VAR 0 5
20816: ARRAY
20817: PUSH
20818: LD_VAR 0 4
20822: ARRAY
20823: PUSH
20824: LD_INT 1
20826: ARRAY
20827: PUSH
20828: LD_VAR 0 2
20832: EQUAL
20833: IFFALSE 20844
// KillUnit ( vehicle ) ;
20835: LD_VAR 0 2
20839: PPUSH
20840: CALL_OW 66
20844: GO 20804
20846: POP
20847: POP
// end ; end_of_file
20848: LD_VAR 0 3
20852: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
20853: LD_INT 0
20855: PPUSH
// ar_crane := 88 ;
20856: LD_ADDR_EXP 94
20860: PUSH
20861: LD_INT 88
20863: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
20864: LD_ADDR_EXP 89
20868: PUSH
20869: LD_INT 89
20871: ST_TO_ADDR
// us_hack := 99 ;
20872: LD_ADDR_EXP 90
20876: PUSH
20877: LD_INT 99
20879: ST_TO_ADDR
// us_artillery := 97 ;
20880: LD_ADDR_EXP 91
20884: PUSH
20885: LD_INT 97
20887: ST_TO_ADDR
// ar_bio_bomb := 91 ;
20888: LD_ADDR_EXP 92
20892: PUSH
20893: LD_INT 91
20895: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
20896: LD_ADDR_EXP 93
20900: PUSH
20901: LD_INT 92
20903: ST_TO_ADDR
// ru_radar := 98 ;
20904: LD_ADDR_EXP 88
20908: PUSH
20909: LD_INT 98
20911: ST_TO_ADDR
// tech_Artillery := 80 ;
20912: LD_ADDR_EXP 95
20916: PUSH
20917: LD_INT 80
20919: ST_TO_ADDR
// tech_RadMat := 81 ;
20920: LD_ADDR_EXP 96
20924: PUSH
20925: LD_INT 81
20927: ST_TO_ADDR
// tech_BasicTools := 82 ;
20928: LD_ADDR_EXP 97
20932: PUSH
20933: LD_INT 82
20935: ST_TO_ADDR
// tech_Cargo := 83 ;
20936: LD_ADDR_EXP 98
20940: PUSH
20941: LD_INT 83
20943: ST_TO_ADDR
// tech_Track := 84 ;
20944: LD_ADDR_EXP 99
20948: PUSH
20949: LD_INT 84
20951: ST_TO_ADDR
// tech_Crane := 85 ;
20952: LD_ADDR_EXP 100
20956: PUSH
20957: LD_INT 85
20959: ST_TO_ADDR
// tech_Bulldozer := 86 ;
20960: LD_ADDR_EXP 101
20964: PUSH
20965: LD_INT 86
20967: ST_TO_ADDR
// tech_Hovercraft := 87 ;
20968: LD_ADDR_EXP 102
20972: PUSH
20973: LD_INT 87
20975: ST_TO_ADDR
// end ;
20976: LD_VAR 0 1
20980: RET
// every 1 do
20981: GO 20983
20983: DISABLE
// InitGlobalVariables ; end_of_file
20984: CALL 20853 0 0
20988: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
20989: LD_INT 0
20991: PPUSH
20992: PPUSH
// if exist_mode then
20993: LD_VAR 0 2
20997: IFFALSE 21022
// unit := CreateCharacter ( prefix & ident ) else
20999: LD_ADDR_VAR 0 5
21003: PUSH
21004: LD_VAR 0 3
21008: PUSH
21009: LD_VAR 0 1
21013: STR
21014: PPUSH
21015: CALL_OW 34
21019: ST_TO_ADDR
21020: GO 21037
// unit := NewCharacter ( ident ) ;
21022: LD_ADDR_VAR 0 5
21026: PUSH
21027: LD_VAR 0 1
21031: PPUSH
21032: CALL_OW 25
21036: ST_TO_ADDR
// result := unit ;
21037: LD_ADDR_VAR 0 4
21041: PUSH
21042: LD_VAR 0 5
21046: ST_TO_ADDR
// end ;
21047: LD_VAR 0 4
21051: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
21052: LD_INT 0
21054: PPUSH
21055: PPUSH
// if not side or not nation then
21056: LD_VAR 0 1
21060: NOT
21061: PUSH
21062: LD_VAR 0 2
21066: NOT
21067: OR
21068: IFFALSE 21072
// exit ;
21070: GO 21836
// case nation of nation_american :
21072: LD_VAR 0 2
21076: PUSH
21077: LD_INT 1
21079: DOUBLE
21080: EQUAL
21081: IFTRUE 21085
21083: GO 21299
21085: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
21086: LD_ADDR_VAR 0 4
21090: PUSH
21091: LD_INT 35
21093: PUSH
21094: LD_INT 45
21096: PUSH
21097: LD_INT 46
21099: PUSH
21100: LD_INT 47
21102: PUSH
21103: LD_INT 82
21105: PUSH
21106: LD_INT 83
21108: PUSH
21109: LD_INT 84
21111: PUSH
21112: LD_INT 85
21114: PUSH
21115: LD_INT 86
21117: PUSH
21118: LD_INT 1
21120: PUSH
21121: LD_INT 2
21123: PUSH
21124: LD_INT 6
21126: PUSH
21127: LD_INT 15
21129: PUSH
21130: LD_INT 16
21132: PUSH
21133: LD_INT 7
21135: PUSH
21136: LD_INT 12
21138: PUSH
21139: LD_INT 13
21141: PUSH
21142: LD_INT 10
21144: PUSH
21145: LD_INT 14
21147: PUSH
21148: LD_INT 20
21150: PUSH
21151: LD_INT 21
21153: PUSH
21154: LD_INT 22
21156: PUSH
21157: LD_INT 25
21159: PUSH
21160: LD_INT 32
21162: PUSH
21163: LD_INT 27
21165: PUSH
21166: LD_INT 36
21168: PUSH
21169: LD_INT 69
21171: PUSH
21172: LD_INT 39
21174: PUSH
21175: LD_INT 34
21177: PUSH
21178: LD_INT 40
21180: PUSH
21181: LD_INT 48
21183: PUSH
21184: LD_INT 49
21186: PUSH
21187: LD_INT 50
21189: PUSH
21190: LD_INT 51
21192: PUSH
21193: LD_INT 52
21195: PUSH
21196: LD_INT 53
21198: PUSH
21199: LD_INT 54
21201: PUSH
21202: LD_INT 55
21204: PUSH
21205: LD_INT 56
21207: PUSH
21208: LD_INT 57
21210: PUSH
21211: LD_INT 58
21213: PUSH
21214: LD_INT 59
21216: PUSH
21217: LD_INT 60
21219: PUSH
21220: LD_INT 61
21222: PUSH
21223: LD_INT 62
21225: PUSH
21226: LD_INT 80
21228: PUSH
21229: LD_INT 82
21231: PUSH
21232: LD_INT 83
21234: PUSH
21235: LD_INT 84
21237: PUSH
21238: LD_INT 85
21240: PUSH
21241: LD_INT 86
21243: PUSH
21244: EMPTY
21245: LIST
21246: LIST
21247: LIST
21248: LIST
21249: LIST
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: LIST
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: LIST
21285: LIST
21286: LIST
21287: LIST
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: ST_TO_ADDR
21297: GO 21760
21299: LD_INT 2
21301: DOUBLE
21302: EQUAL
21303: IFTRUE 21307
21305: GO 21529
21307: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
21308: LD_ADDR_VAR 0 4
21312: PUSH
21313: LD_INT 35
21315: PUSH
21316: LD_INT 45
21318: PUSH
21319: LD_INT 46
21321: PUSH
21322: LD_INT 47
21324: PUSH
21325: LD_INT 82
21327: PUSH
21328: LD_INT 83
21330: PUSH
21331: LD_INT 84
21333: PUSH
21334: LD_INT 85
21336: PUSH
21337: LD_INT 87
21339: PUSH
21340: LD_INT 70
21342: PUSH
21343: LD_INT 1
21345: PUSH
21346: LD_INT 11
21348: PUSH
21349: LD_INT 3
21351: PUSH
21352: LD_INT 4
21354: PUSH
21355: LD_INT 5
21357: PUSH
21358: LD_INT 6
21360: PUSH
21361: LD_INT 15
21363: PUSH
21364: LD_INT 18
21366: PUSH
21367: LD_INT 7
21369: PUSH
21370: LD_INT 17
21372: PUSH
21373: LD_INT 8
21375: PUSH
21376: LD_INT 20
21378: PUSH
21379: LD_INT 21
21381: PUSH
21382: LD_INT 22
21384: PUSH
21385: LD_INT 72
21387: PUSH
21388: LD_INT 26
21390: PUSH
21391: LD_INT 69
21393: PUSH
21394: LD_INT 39
21396: PUSH
21397: LD_INT 40
21399: PUSH
21400: LD_INT 41
21402: PUSH
21403: LD_INT 42
21405: PUSH
21406: LD_INT 43
21408: PUSH
21409: LD_INT 48
21411: PUSH
21412: LD_INT 49
21414: PUSH
21415: LD_INT 50
21417: PUSH
21418: LD_INT 51
21420: PUSH
21421: LD_INT 52
21423: PUSH
21424: LD_INT 53
21426: PUSH
21427: LD_INT 54
21429: PUSH
21430: LD_INT 55
21432: PUSH
21433: LD_INT 56
21435: PUSH
21436: LD_INT 60
21438: PUSH
21439: LD_INT 61
21441: PUSH
21442: LD_INT 62
21444: PUSH
21445: LD_INT 66
21447: PUSH
21448: LD_INT 67
21450: PUSH
21451: LD_INT 68
21453: PUSH
21454: LD_INT 81
21456: PUSH
21457: LD_INT 82
21459: PUSH
21460: LD_INT 83
21462: PUSH
21463: LD_INT 84
21465: PUSH
21466: LD_INT 85
21468: PUSH
21469: LD_INT 87
21471: PUSH
21472: EMPTY
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: ST_TO_ADDR
21527: GO 21760
21529: LD_INT 3
21531: DOUBLE
21532: EQUAL
21533: IFTRUE 21537
21535: GO 21759
21537: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
21538: LD_ADDR_VAR 0 4
21542: PUSH
21543: LD_INT 46
21545: PUSH
21546: LD_INT 47
21548: PUSH
21549: LD_INT 1
21551: PUSH
21552: LD_INT 2
21554: PUSH
21555: LD_INT 82
21557: PUSH
21558: LD_INT 83
21560: PUSH
21561: LD_INT 84
21563: PUSH
21564: LD_INT 85
21566: PUSH
21567: LD_INT 86
21569: PUSH
21570: LD_INT 11
21572: PUSH
21573: LD_INT 9
21575: PUSH
21576: LD_INT 20
21578: PUSH
21579: LD_INT 19
21581: PUSH
21582: LD_INT 21
21584: PUSH
21585: LD_INT 24
21587: PUSH
21588: LD_INT 22
21590: PUSH
21591: LD_INT 25
21593: PUSH
21594: LD_INT 28
21596: PUSH
21597: LD_INT 29
21599: PUSH
21600: LD_INT 30
21602: PUSH
21603: LD_INT 31
21605: PUSH
21606: LD_INT 37
21608: PUSH
21609: LD_INT 38
21611: PUSH
21612: LD_INT 32
21614: PUSH
21615: LD_INT 27
21617: PUSH
21618: LD_INT 33
21620: PUSH
21621: LD_INT 69
21623: PUSH
21624: LD_INT 39
21626: PUSH
21627: LD_INT 34
21629: PUSH
21630: LD_INT 40
21632: PUSH
21633: LD_INT 71
21635: PUSH
21636: LD_INT 23
21638: PUSH
21639: LD_INT 44
21641: PUSH
21642: LD_INT 48
21644: PUSH
21645: LD_INT 49
21647: PUSH
21648: LD_INT 50
21650: PUSH
21651: LD_INT 51
21653: PUSH
21654: LD_INT 52
21656: PUSH
21657: LD_INT 53
21659: PUSH
21660: LD_INT 54
21662: PUSH
21663: LD_INT 55
21665: PUSH
21666: LD_INT 56
21668: PUSH
21669: LD_INT 57
21671: PUSH
21672: LD_INT 58
21674: PUSH
21675: LD_INT 59
21677: PUSH
21678: LD_INT 63
21680: PUSH
21681: LD_INT 64
21683: PUSH
21684: LD_INT 65
21686: PUSH
21687: LD_INT 82
21689: PUSH
21690: LD_INT 83
21692: PUSH
21693: LD_INT 84
21695: PUSH
21696: LD_INT 85
21698: PUSH
21699: LD_INT 86
21701: PUSH
21702: EMPTY
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: ST_TO_ADDR
21757: GO 21760
21759: POP
// if state > - 1 and state < 3 then
21760: LD_VAR 0 3
21764: PUSH
21765: LD_INT 1
21767: NEG
21768: GREATER
21769: PUSH
21770: LD_VAR 0 3
21774: PUSH
21775: LD_INT 3
21777: LESS
21778: AND
21779: IFFALSE 21836
// for i in result do
21781: LD_ADDR_VAR 0 5
21785: PUSH
21786: LD_VAR 0 4
21790: PUSH
21791: FOR_IN
21792: IFFALSE 21834
// if GetTech ( i , side ) <> state then
21794: LD_VAR 0 5
21798: PPUSH
21799: LD_VAR 0 1
21803: PPUSH
21804: CALL_OW 321
21808: PUSH
21809: LD_VAR 0 3
21813: NONEQUAL
21814: IFFALSE 21832
// result := result diff i ;
21816: LD_ADDR_VAR 0 4
21820: PUSH
21821: LD_VAR 0 4
21825: PUSH
21826: LD_VAR 0 5
21830: DIFF
21831: ST_TO_ADDR
21832: GO 21791
21834: POP
21835: POP
// end ;
21836: LD_VAR 0 4
21840: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
21841: LD_INT 0
21843: PPUSH
21844: PPUSH
21845: PPUSH
// result := true ;
21846: LD_ADDR_VAR 0 3
21850: PUSH
21851: LD_INT 1
21853: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
21854: LD_ADDR_VAR 0 5
21858: PUSH
21859: LD_VAR 0 2
21863: PPUSH
21864: CALL_OW 480
21868: ST_TO_ADDR
// if not tmp then
21869: LD_VAR 0 5
21873: NOT
21874: IFFALSE 21878
// exit ;
21876: GO 21927
// for i in tmp do
21878: LD_ADDR_VAR 0 4
21882: PUSH
21883: LD_VAR 0 5
21887: PUSH
21888: FOR_IN
21889: IFFALSE 21925
// if GetTech ( i , side ) <> state_researched then
21891: LD_VAR 0 4
21895: PPUSH
21896: LD_VAR 0 1
21900: PPUSH
21901: CALL_OW 321
21905: PUSH
21906: LD_INT 2
21908: NONEQUAL
21909: IFFALSE 21923
// begin result := false ;
21911: LD_ADDR_VAR 0 3
21915: PUSH
21916: LD_INT 0
21918: ST_TO_ADDR
// exit ;
21919: POP
21920: POP
21921: GO 21927
// end ;
21923: GO 21888
21925: POP
21926: POP
// end ;
21927: LD_VAR 0 3
21931: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
21932: LD_INT 0
21934: PPUSH
21935: PPUSH
21936: PPUSH
21937: PPUSH
21938: PPUSH
21939: PPUSH
21940: PPUSH
21941: PPUSH
21942: PPUSH
21943: PPUSH
21944: PPUSH
21945: PPUSH
21946: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
21947: LD_VAR 0 1
21951: NOT
21952: PUSH
21953: LD_VAR 0 1
21957: PPUSH
21958: CALL_OW 257
21962: PUSH
21963: LD_INT 9
21965: NONEQUAL
21966: OR
21967: IFFALSE 21971
// exit ;
21969: GO 22544
// side := GetSide ( unit ) ;
21971: LD_ADDR_VAR 0 9
21975: PUSH
21976: LD_VAR 0 1
21980: PPUSH
21981: CALL_OW 255
21985: ST_TO_ADDR
// tech_space := tech_spacanom ;
21986: LD_ADDR_VAR 0 12
21990: PUSH
21991: LD_INT 29
21993: ST_TO_ADDR
// tech_time := tech_taurad ;
21994: LD_ADDR_VAR 0 13
21998: PUSH
21999: LD_INT 28
22001: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
22002: LD_ADDR_VAR 0 11
22006: PUSH
22007: LD_VAR 0 1
22011: PPUSH
22012: CALL_OW 310
22016: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
22017: LD_VAR 0 11
22021: PPUSH
22022: CALL_OW 247
22026: PUSH
22027: LD_INT 2
22029: EQUAL
22030: IFFALSE 22034
// exit ;
22032: GO 22544
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22034: LD_ADDR_VAR 0 8
22038: PUSH
22039: LD_INT 81
22041: PUSH
22042: LD_VAR 0 9
22046: PUSH
22047: EMPTY
22048: LIST
22049: LIST
22050: PUSH
22051: LD_INT 3
22053: PUSH
22054: LD_INT 21
22056: PUSH
22057: LD_INT 3
22059: PUSH
22060: EMPTY
22061: LIST
22062: LIST
22063: PUSH
22064: EMPTY
22065: LIST
22066: LIST
22067: PUSH
22068: EMPTY
22069: LIST
22070: LIST
22071: PPUSH
22072: CALL_OW 69
22076: ST_TO_ADDR
// if not tmp then
22077: LD_VAR 0 8
22081: NOT
22082: IFFALSE 22086
// exit ;
22084: GO 22544
// if in_unit then
22086: LD_VAR 0 11
22090: IFFALSE 22114
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
22092: LD_ADDR_VAR 0 10
22096: PUSH
22097: LD_VAR 0 8
22101: PPUSH
22102: LD_VAR 0 11
22106: PPUSH
22107: CALL_OW 74
22111: ST_TO_ADDR
22112: GO 22134
// enemy := NearestUnitToUnit ( tmp , unit ) ;
22114: LD_ADDR_VAR 0 10
22118: PUSH
22119: LD_VAR 0 8
22123: PPUSH
22124: LD_VAR 0 1
22128: PPUSH
22129: CALL_OW 74
22133: ST_TO_ADDR
// if not enemy then
22134: LD_VAR 0 10
22138: NOT
22139: IFFALSE 22143
// exit ;
22141: GO 22544
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
22143: LD_VAR 0 11
22147: PUSH
22148: LD_VAR 0 11
22152: PPUSH
22153: LD_VAR 0 10
22157: PPUSH
22158: CALL_OW 296
22162: PUSH
22163: LD_INT 13
22165: GREATER
22166: AND
22167: PUSH
22168: LD_VAR 0 1
22172: PPUSH
22173: LD_VAR 0 10
22177: PPUSH
22178: CALL_OW 296
22182: PUSH
22183: LD_INT 12
22185: GREATER
22186: OR
22187: IFFALSE 22191
// exit ;
22189: GO 22544
// missile := [ 1 ] ;
22191: LD_ADDR_VAR 0 14
22195: PUSH
22196: LD_INT 1
22198: PUSH
22199: EMPTY
22200: LIST
22201: ST_TO_ADDR
// if Researched ( side , tech_space ) then
22202: LD_VAR 0 9
22206: PPUSH
22207: LD_VAR 0 12
22211: PPUSH
22212: CALL_OW 325
22216: IFFALSE 22245
// missile := Insert ( missile , missile + 1 , 2 ) ;
22218: LD_ADDR_VAR 0 14
22222: PUSH
22223: LD_VAR 0 14
22227: PPUSH
22228: LD_VAR 0 14
22232: PUSH
22233: LD_INT 1
22235: PLUS
22236: PPUSH
22237: LD_INT 2
22239: PPUSH
22240: CALL_OW 2
22244: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
22245: LD_VAR 0 9
22249: PPUSH
22250: LD_VAR 0 13
22254: PPUSH
22255: CALL_OW 325
22259: PUSH
22260: LD_VAR 0 10
22264: PPUSH
22265: CALL_OW 255
22269: PPUSH
22270: LD_VAR 0 13
22274: PPUSH
22275: CALL_OW 325
22279: NOT
22280: AND
22281: IFFALSE 22310
// missile := Insert ( missile , missile + 1 , 3 ) ;
22283: LD_ADDR_VAR 0 14
22287: PUSH
22288: LD_VAR 0 14
22292: PPUSH
22293: LD_VAR 0 14
22297: PUSH
22298: LD_INT 1
22300: PLUS
22301: PPUSH
22302: LD_INT 3
22304: PPUSH
22305: CALL_OW 2
22309: ST_TO_ADDR
// if missile < 2 then
22310: LD_VAR 0 14
22314: PUSH
22315: LD_INT 2
22317: LESS
22318: IFFALSE 22322
// exit ;
22320: GO 22544
// x := GetX ( enemy ) ;
22322: LD_ADDR_VAR 0 4
22326: PUSH
22327: LD_VAR 0 10
22331: PPUSH
22332: CALL_OW 250
22336: ST_TO_ADDR
// y := GetY ( enemy ) ;
22337: LD_ADDR_VAR 0 5
22341: PUSH
22342: LD_VAR 0 10
22346: PPUSH
22347: CALL_OW 251
22351: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
22352: LD_ADDR_VAR 0 6
22356: PUSH
22357: LD_VAR 0 4
22361: PUSH
22362: LD_INT 1
22364: NEG
22365: PPUSH
22366: LD_INT 1
22368: PPUSH
22369: CALL_OW 12
22373: PLUS
22374: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
22375: LD_ADDR_VAR 0 7
22379: PUSH
22380: LD_VAR 0 5
22384: PUSH
22385: LD_INT 1
22387: NEG
22388: PPUSH
22389: LD_INT 1
22391: PPUSH
22392: CALL_OW 12
22396: PLUS
22397: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22398: LD_VAR 0 6
22402: PPUSH
22403: LD_VAR 0 7
22407: PPUSH
22408: CALL_OW 488
22412: NOT
22413: IFFALSE 22435
// begin _x := x ;
22415: LD_ADDR_VAR 0 6
22419: PUSH
22420: LD_VAR 0 4
22424: ST_TO_ADDR
// _y := y ;
22425: LD_ADDR_VAR 0 7
22429: PUSH
22430: LD_VAR 0 5
22434: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
22435: LD_ADDR_VAR 0 3
22439: PUSH
22440: LD_INT 1
22442: PPUSH
22443: LD_VAR 0 14
22447: PPUSH
22448: CALL_OW 12
22452: ST_TO_ADDR
// case i of 1 :
22453: LD_VAR 0 3
22457: PUSH
22458: LD_INT 1
22460: DOUBLE
22461: EQUAL
22462: IFTRUE 22466
22464: GO 22483
22466: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
22467: LD_VAR 0 1
22471: PPUSH
22472: LD_VAR 0 10
22476: PPUSH
22477: CALL_OW 115
22481: GO 22544
22483: LD_INT 2
22485: DOUBLE
22486: EQUAL
22487: IFTRUE 22491
22489: GO 22513
22491: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
22492: LD_VAR 0 1
22496: PPUSH
22497: LD_VAR 0 6
22501: PPUSH
22502: LD_VAR 0 7
22506: PPUSH
22507: CALL_OW 153
22511: GO 22544
22513: LD_INT 3
22515: DOUBLE
22516: EQUAL
22517: IFTRUE 22521
22519: GO 22543
22521: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
22522: LD_VAR 0 1
22526: PPUSH
22527: LD_VAR 0 6
22531: PPUSH
22532: LD_VAR 0 7
22536: PPUSH
22537: CALL_OW 154
22541: GO 22544
22543: POP
// end ;
22544: LD_VAR 0 2
22548: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
22549: LD_INT 0
22551: PPUSH
22552: PPUSH
22553: PPUSH
22554: PPUSH
22555: PPUSH
22556: PPUSH
// if not unit or not building then
22557: LD_VAR 0 1
22561: NOT
22562: PUSH
22563: LD_VAR 0 2
22567: NOT
22568: OR
22569: IFFALSE 22573
// exit ;
22571: GO 22731
// x := GetX ( building ) ;
22573: LD_ADDR_VAR 0 5
22577: PUSH
22578: LD_VAR 0 2
22582: PPUSH
22583: CALL_OW 250
22587: ST_TO_ADDR
// y := GetY ( building ) ;
22588: LD_ADDR_VAR 0 6
22592: PUSH
22593: LD_VAR 0 2
22597: PPUSH
22598: CALL_OW 251
22602: ST_TO_ADDR
// for i = 0 to 5 do
22603: LD_ADDR_VAR 0 4
22607: PUSH
22608: DOUBLE
22609: LD_INT 0
22611: DEC
22612: ST_TO_ADDR
22613: LD_INT 5
22615: PUSH
22616: FOR_TO
22617: IFFALSE 22729
// begin _x := ShiftX ( x , i , 3 ) ;
22619: LD_ADDR_VAR 0 7
22623: PUSH
22624: LD_VAR 0 5
22628: PPUSH
22629: LD_VAR 0 4
22633: PPUSH
22634: LD_INT 3
22636: PPUSH
22637: CALL_OW 272
22641: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
22642: LD_ADDR_VAR 0 8
22646: PUSH
22647: LD_VAR 0 6
22651: PPUSH
22652: LD_VAR 0 4
22656: PPUSH
22657: LD_INT 3
22659: PPUSH
22660: CALL_OW 273
22664: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22665: LD_VAR 0 7
22669: PPUSH
22670: LD_VAR 0 8
22674: PPUSH
22675: CALL_OW 488
22679: NOT
22680: IFFALSE 22684
// continue ;
22682: GO 22616
// if HexInfo ( _x , _y ) = 0 then
22684: LD_VAR 0 7
22688: PPUSH
22689: LD_VAR 0 8
22693: PPUSH
22694: CALL_OW 428
22698: PUSH
22699: LD_INT 0
22701: EQUAL
22702: IFFALSE 22727
// begin ComMoveXY ( unit , _x , _y ) ;
22704: LD_VAR 0 1
22708: PPUSH
22709: LD_VAR 0 7
22713: PPUSH
22714: LD_VAR 0 8
22718: PPUSH
22719: CALL_OW 111
// exit ;
22723: POP
22724: POP
22725: GO 22731
// end ; end ;
22727: GO 22616
22729: POP
22730: POP
// end ;
22731: LD_VAR 0 3
22735: RET
// export function ScanBase ( side , base_area ) ; begin
22736: LD_INT 0
22738: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
22739: LD_ADDR_VAR 0 3
22743: PUSH
22744: LD_VAR 0 2
22748: PPUSH
22749: LD_INT 81
22751: PUSH
22752: LD_VAR 0 1
22756: PUSH
22757: EMPTY
22758: LIST
22759: LIST
22760: PPUSH
22761: CALL_OW 70
22765: ST_TO_ADDR
// end ;
22766: LD_VAR 0 3
22770: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
22771: LD_INT 0
22773: PPUSH
22774: PPUSH
22775: PPUSH
22776: PPUSH
// result := false ;
22777: LD_ADDR_VAR 0 2
22781: PUSH
22782: LD_INT 0
22784: ST_TO_ADDR
// side := GetSide ( unit ) ;
22785: LD_ADDR_VAR 0 3
22789: PUSH
22790: LD_VAR 0 1
22794: PPUSH
22795: CALL_OW 255
22799: ST_TO_ADDR
// nat := GetNation ( unit ) ;
22800: LD_ADDR_VAR 0 4
22804: PUSH
22805: LD_VAR 0 1
22809: PPUSH
22810: CALL_OW 248
22814: ST_TO_ADDR
// case nat of 1 :
22815: LD_VAR 0 4
22819: PUSH
22820: LD_INT 1
22822: DOUBLE
22823: EQUAL
22824: IFTRUE 22828
22826: GO 22839
22828: POP
// tech := tech_lassight ; 2 :
22829: LD_ADDR_VAR 0 5
22833: PUSH
22834: LD_INT 12
22836: ST_TO_ADDR
22837: GO 22878
22839: LD_INT 2
22841: DOUBLE
22842: EQUAL
22843: IFTRUE 22847
22845: GO 22858
22847: POP
// tech := tech_mortar ; 3 :
22848: LD_ADDR_VAR 0 5
22852: PUSH
22853: LD_INT 41
22855: ST_TO_ADDR
22856: GO 22878
22858: LD_INT 3
22860: DOUBLE
22861: EQUAL
22862: IFTRUE 22866
22864: GO 22877
22866: POP
// tech := tech_bazooka ; end ;
22867: LD_ADDR_VAR 0 5
22871: PUSH
22872: LD_INT 44
22874: ST_TO_ADDR
22875: GO 22878
22877: POP
// if Researched ( side , tech ) then
22878: LD_VAR 0 3
22882: PPUSH
22883: LD_VAR 0 5
22887: PPUSH
22888: CALL_OW 325
22892: IFFALSE 22919
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
22894: LD_ADDR_VAR 0 2
22898: PUSH
22899: LD_INT 5
22901: PUSH
22902: LD_INT 8
22904: PUSH
22905: LD_INT 9
22907: PUSH
22908: EMPTY
22909: LIST
22910: LIST
22911: LIST
22912: PUSH
22913: LD_VAR 0 4
22917: ARRAY
22918: ST_TO_ADDR
// end ;
22919: LD_VAR 0 2
22923: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
22924: LD_INT 0
22926: PPUSH
22927: PPUSH
22928: PPUSH
// if not mines then
22929: LD_VAR 0 2
22933: NOT
22934: IFFALSE 22938
// exit ;
22936: GO 23082
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22938: LD_ADDR_VAR 0 5
22942: PUSH
22943: LD_INT 81
22945: PUSH
22946: LD_VAR 0 1
22950: PUSH
22951: EMPTY
22952: LIST
22953: LIST
22954: PUSH
22955: LD_INT 3
22957: PUSH
22958: LD_INT 21
22960: PUSH
22961: LD_INT 3
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: PUSH
22968: EMPTY
22969: LIST
22970: LIST
22971: PUSH
22972: EMPTY
22973: LIST
22974: LIST
22975: PPUSH
22976: CALL_OW 69
22980: ST_TO_ADDR
// for i in mines do
22981: LD_ADDR_VAR 0 4
22985: PUSH
22986: LD_VAR 0 2
22990: PUSH
22991: FOR_IN
22992: IFFALSE 23080
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
22994: LD_VAR 0 4
22998: PUSH
22999: LD_INT 1
23001: ARRAY
23002: PPUSH
23003: LD_VAR 0 4
23007: PUSH
23008: LD_INT 2
23010: ARRAY
23011: PPUSH
23012: CALL_OW 458
23016: NOT
23017: IFFALSE 23021
// continue ;
23019: GO 22991
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23021: LD_VAR 0 4
23025: PUSH
23026: LD_INT 1
23028: ARRAY
23029: PPUSH
23030: LD_VAR 0 4
23034: PUSH
23035: LD_INT 2
23037: ARRAY
23038: PPUSH
23039: CALL_OW 428
23043: PUSH
23044: LD_VAR 0 5
23048: IN
23049: IFFALSE 23078
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23051: LD_VAR 0 4
23055: PUSH
23056: LD_INT 1
23058: ARRAY
23059: PPUSH
23060: LD_VAR 0 4
23064: PUSH
23065: LD_INT 2
23067: ARRAY
23068: PPUSH
23069: LD_VAR 0 1
23073: PPUSH
23074: CALL_OW 456
// end ;
23078: GO 22991
23080: POP
23081: POP
// end ;
23082: LD_VAR 0 3
23086: RET
// export function Count ( array ) ; var i ; begin
23087: LD_INT 0
23089: PPUSH
23090: PPUSH
// result := 0 ;
23091: LD_ADDR_VAR 0 2
23095: PUSH
23096: LD_INT 0
23098: ST_TO_ADDR
// for i in array do
23099: LD_ADDR_VAR 0 3
23103: PUSH
23104: LD_VAR 0 1
23108: PUSH
23109: FOR_IN
23110: IFFALSE 23134
// if i then
23112: LD_VAR 0 3
23116: IFFALSE 23132
// result := result + 1 ;
23118: LD_ADDR_VAR 0 2
23122: PUSH
23123: LD_VAR 0 2
23127: PUSH
23128: LD_INT 1
23130: PLUS
23131: ST_TO_ADDR
23132: GO 23109
23134: POP
23135: POP
// end ;
23136: LD_VAR 0 2
23140: RET
// export function IsEmpty ( building ) ; begin
23141: LD_INT 0
23143: PPUSH
// if not building then
23144: LD_VAR 0 1
23148: NOT
23149: IFFALSE 23153
// exit ;
23151: GO 23196
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23153: LD_ADDR_VAR 0 2
23157: PUSH
23158: LD_VAR 0 1
23162: PUSH
23163: LD_INT 22
23165: PUSH
23166: LD_VAR 0 1
23170: PPUSH
23171: CALL_OW 255
23175: PUSH
23176: EMPTY
23177: LIST
23178: LIST
23179: PUSH
23180: LD_INT 58
23182: PUSH
23183: EMPTY
23184: LIST
23185: PUSH
23186: EMPTY
23187: LIST
23188: LIST
23189: PPUSH
23190: CALL_OW 69
23194: IN
23195: ST_TO_ADDR
// end ;
23196: LD_VAR 0 2
23200: RET
// export function IsNotFull ( building ) ; begin
23201: LD_INT 0
23203: PPUSH
// if not building then
23204: LD_VAR 0 1
23208: NOT
23209: IFFALSE 23213
// exit ;
23211: GO 23232
// result := UnitsInside ( building ) < 6 ;
23213: LD_ADDR_VAR 0 2
23217: PUSH
23218: LD_VAR 0 1
23222: PPUSH
23223: CALL_OW 313
23227: PUSH
23228: LD_INT 6
23230: LESS
23231: ST_TO_ADDR
// end ;
23232: LD_VAR 0 2
23236: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
23237: LD_INT 0
23239: PPUSH
23240: PPUSH
23241: PPUSH
23242: PPUSH
// tmp := [ ] ;
23243: LD_ADDR_VAR 0 3
23247: PUSH
23248: EMPTY
23249: ST_TO_ADDR
// list := [ ] ;
23250: LD_ADDR_VAR 0 5
23254: PUSH
23255: EMPTY
23256: ST_TO_ADDR
// for i = 16 to 25 do
23257: LD_ADDR_VAR 0 4
23261: PUSH
23262: DOUBLE
23263: LD_INT 16
23265: DEC
23266: ST_TO_ADDR
23267: LD_INT 25
23269: PUSH
23270: FOR_TO
23271: IFFALSE 23344
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
23273: LD_ADDR_VAR 0 3
23277: PUSH
23278: LD_VAR 0 3
23282: PUSH
23283: LD_INT 22
23285: PUSH
23286: LD_VAR 0 1
23290: PPUSH
23291: CALL_OW 255
23295: PUSH
23296: EMPTY
23297: LIST
23298: LIST
23299: PUSH
23300: LD_INT 91
23302: PUSH
23303: LD_VAR 0 1
23307: PUSH
23308: LD_INT 6
23310: PUSH
23311: EMPTY
23312: LIST
23313: LIST
23314: LIST
23315: PUSH
23316: LD_INT 30
23318: PUSH
23319: LD_VAR 0 4
23323: PUSH
23324: EMPTY
23325: LIST
23326: LIST
23327: PUSH
23328: EMPTY
23329: LIST
23330: LIST
23331: LIST
23332: PUSH
23333: EMPTY
23334: LIST
23335: PPUSH
23336: CALL_OW 69
23340: ADD
23341: ST_TO_ADDR
23342: GO 23270
23344: POP
23345: POP
// for i = 1 to tmp do
23346: LD_ADDR_VAR 0 4
23350: PUSH
23351: DOUBLE
23352: LD_INT 1
23354: DEC
23355: ST_TO_ADDR
23356: LD_VAR 0 3
23360: PUSH
23361: FOR_TO
23362: IFFALSE 23450
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
23364: LD_ADDR_VAR 0 5
23368: PUSH
23369: LD_VAR 0 5
23373: PUSH
23374: LD_VAR 0 3
23378: PUSH
23379: LD_VAR 0 4
23383: ARRAY
23384: PPUSH
23385: CALL_OW 266
23389: PUSH
23390: LD_VAR 0 3
23394: PUSH
23395: LD_VAR 0 4
23399: ARRAY
23400: PPUSH
23401: CALL_OW 250
23405: PUSH
23406: LD_VAR 0 3
23410: PUSH
23411: LD_VAR 0 4
23415: ARRAY
23416: PPUSH
23417: CALL_OW 251
23421: PUSH
23422: LD_VAR 0 3
23426: PUSH
23427: LD_VAR 0 4
23431: ARRAY
23432: PPUSH
23433: CALL_OW 254
23437: PUSH
23438: EMPTY
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: PUSH
23444: EMPTY
23445: LIST
23446: ADD
23447: ST_TO_ADDR
23448: GO 23361
23450: POP
23451: POP
// result := list ;
23452: LD_ADDR_VAR 0 2
23456: PUSH
23457: LD_VAR 0 5
23461: ST_TO_ADDR
// end ;
23462: LD_VAR 0 2
23466: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
23467: LD_INT 0
23469: PPUSH
23470: PPUSH
23471: PPUSH
23472: PPUSH
23473: PPUSH
23474: PPUSH
23475: PPUSH
// if not factory then
23476: LD_VAR 0 1
23480: NOT
23481: IFFALSE 23485
// exit ;
23483: GO 24078
// if control = control_apeman then
23485: LD_VAR 0 4
23489: PUSH
23490: LD_INT 5
23492: EQUAL
23493: IFFALSE 23602
// begin tmp := UnitsInside ( factory ) ;
23495: LD_ADDR_VAR 0 8
23499: PUSH
23500: LD_VAR 0 1
23504: PPUSH
23505: CALL_OW 313
23509: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
23510: LD_VAR 0 8
23514: PPUSH
23515: LD_INT 25
23517: PUSH
23518: LD_INT 12
23520: PUSH
23521: EMPTY
23522: LIST
23523: LIST
23524: PPUSH
23525: CALL_OW 72
23529: NOT
23530: IFFALSE 23540
// control := control_manual ;
23532: LD_ADDR_VAR 0 4
23536: PUSH
23537: LD_INT 1
23539: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
23540: LD_ADDR_VAR 0 8
23544: PUSH
23545: LD_VAR 0 1
23549: PPUSH
23550: CALL 23237 0 1
23554: ST_TO_ADDR
// if tmp then
23555: LD_VAR 0 8
23559: IFFALSE 23602
// begin for i in tmp do
23561: LD_ADDR_VAR 0 7
23565: PUSH
23566: LD_VAR 0 8
23570: PUSH
23571: FOR_IN
23572: IFFALSE 23600
// if i [ 1 ] = b_ext_radio then
23574: LD_VAR 0 7
23578: PUSH
23579: LD_INT 1
23581: ARRAY
23582: PUSH
23583: LD_INT 22
23585: EQUAL
23586: IFFALSE 23598
// begin control := control_remote ;
23588: LD_ADDR_VAR 0 4
23592: PUSH
23593: LD_INT 2
23595: ST_TO_ADDR
// break ;
23596: GO 23600
// end ;
23598: GO 23571
23600: POP
23601: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23602: LD_VAR 0 1
23606: PPUSH
23607: LD_VAR 0 2
23611: PPUSH
23612: LD_VAR 0 3
23616: PPUSH
23617: LD_VAR 0 4
23621: PPUSH
23622: LD_VAR 0 5
23626: PPUSH
23627: CALL_OW 448
23631: IFFALSE 23666
// begin result := [ chassis , engine , control , weapon ] ;
23633: LD_ADDR_VAR 0 6
23637: PUSH
23638: LD_VAR 0 2
23642: PUSH
23643: LD_VAR 0 3
23647: PUSH
23648: LD_VAR 0 4
23652: PUSH
23653: LD_VAR 0 5
23657: PUSH
23658: EMPTY
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: ST_TO_ADDR
// exit ;
23664: GO 24078
// end ; _chassis := AvailableChassisList ( factory ) ;
23666: LD_ADDR_VAR 0 9
23670: PUSH
23671: LD_VAR 0 1
23675: PPUSH
23676: CALL_OW 475
23680: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
23681: LD_ADDR_VAR 0 11
23685: PUSH
23686: LD_VAR 0 1
23690: PPUSH
23691: CALL_OW 476
23695: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
23696: LD_ADDR_VAR 0 12
23700: PUSH
23701: LD_VAR 0 1
23705: PPUSH
23706: CALL_OW 477
23710: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
23711: LD_ADDR_VAR 0 10
23715: PUSH
23716: LD_VAR 0 1
23720: PPUSH
23721: CALL_OW 478
23725: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
23726: LD_VAR 0 9
23730: NOT
23731: PUSH
23732: LD_VAR 0 11
23736: NOT
23737: OR
23738: PUSH
23739: LD_VAR 0 12
23743: NOT
23744: OR
23745: PUSH
23746: LD_VAR 0 10
23750: NOT
23751: OR
23752: IFFALSE 23787
// begin result := [ chassis , engine , control , weapon ] ;
23754: LD_ADDR_VAR 0 6
23758: PUSH
23759: LD_VAR 0 2
23763: PUSH
23764: LD_VAR 0 3
23768: PUSH
23769: LD_VAR 0 4
23773: PUSH
23774: LD_VAR 0 5
23778: PUSH
23779: EMPTY
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: ST_TO_ADDR
// exit ;
23785: GO 24078
// end ; if not chassis in _chassis then
23787: LD_VAR 0 2
23791: PUSH
23792: LD_VAR 0 9
23796: IN
23797: NOT
23798: IFFALSE 23824
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
23800: LD_ADDR_VAR 0 2
23804: PUSH
23805: LD_VAR 0 9
23809: PUSH
23810: LD_INT 1
23812: PPUSH
23813: LD_VAR 0 9
23817: PPUSH
23818: CALL_OW 12
23822: ARRAY
23823: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
23824: LD_VAR 0 2
23828: PPUSH
23829: LD_VAR 0 3
23833: PPUSH
23834: CALL 24083 0 2
23838: NOT
23839: IFFALSE 23898
// repeat engine := _engine [ 1 ] ;
23841: LD_ADDR_VAR 0 3
23845: PUSH
23846: LD_VAR 0 11
23850: PUSH
23851: LD_INT 1
23853: ARRAY
23854: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
23855: LD_ADDR_VAR 0 11
23859: PUSH
23860: LD_VAR 0 11
23864: PPUSH
23865: LD_INT 1
23867: PPUSH
23868: CALL_OW 3
23872: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
23873: LD_VAR 0 2
23877: PPUSH
23878: LD_VAR 0 3
23882: PPUSH
23883: CALL 24083 0 2
23887: PUSH
23888: LD_VAR 0 11
23892: PUSH
23893: EMPTY
23894: EQUAL
23895: OR
23896: IFFALSE 23841
// if not control in _control then
23898: LD_VAR 0 4
23902: PUSH
23903: LD_VAR 0 12
23907: IN
23908: NOT
23909: IFFALSE 23935
// control := _control [ rand ( 1 , _control ) ] ;
23911: LD_ADDR_VAR 0 4
23915: PUSH
23916: LD_VAR 0 12
23920: PUSH
23921: LD_INT 1
23923: PPUSH
23924: LD_VAR 0 12
23928: PPUSH
23929: CALL_OW 12
23933: ARRAY
23934: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
23935: LD_VAR 0 2
23939: PPUSH
23940: LD_VAR 0 5
23944: PPUSH
23945: CALL 24303 0 2
23949: NOT
23950: IFFALSE 24009
// repeat weapon := _weapon [ 1 ] ;
23952: LD_ADDR_VAR 0 5
23956: PUSH
23957: LD_VAR 0 10
23961: PUSH
23962: LD_INT 1
23964: ARRAY
23965: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
23966: LD_ADDR_VAR 0 10
23970: PUSH
23971: LD_VAR 0 10
23975: PPUSH
23976: LD_INT 1
23978: PPUSH
23979: CALL_OW 3
23983: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
23984: LD_VAR 0 2
23988: PPUSH
23989: LD_VAR 0 5
23993: PPUSH
23994: CALL 24303 0 2
23998: PUSH
23999: LD_VAR 0 10
24003: PUSH
24004: EMPTY
24005: EQUAL
24006: OR
24007: IFFALSE 23952
// result := [ ] ;
24009: LD_ADDR_VAR 0 6
24013: PUSH
24014: EMPTY
24015: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24016: LD_VAR 0 1
24020: PPUSH
24021: LD_VAR 0 2
24025: PPUSH
24026: LD_VAR 0 3
24030: PPUSH
24031: LD_VAR 0 4
24035: PPUSH
24036: LD_VAR 0 5
24040: PPUSH
24041: CALL_OW 448
24045: IFFALSE 24078
// result := [ chassis , engine , control , weapon ] ;
24047: LD_ADDR_VAR 0 6
24051: PUSH
24052: LD_VAR 0 2
24056: PUSH
24057: LD_VAR 0 3
24061: PUSH
24062: LD_VAR 0 4
24066: PUSH
24067: LD_VAR 0 5
24071: PUSH
24072: EMPTY
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: ST_TO_ADDR
// end ;
24078: LD_VAR 0 6
24082: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24083: LD_INT 0
24085: PPUSH
// if not chassis or not engine then
24086: LD_VAR 0 1
24090: NOT
24091: PUSH
24092: LD_VAR 0 2
24096: NOT
24097: OR
24098: IFFALSE 24102
// exit ;
24100: GO 24298
// case engine of engine_solar :
24102: LD_VAR 0 2
24106: PUSH
24107: LD_INT 2
24109: DOUBLE
24110: EQUAL
24111: IFTRUE 24115
24113: GO 24153
24115: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24116: LD_ADDR_VAR 0 3
24120: PUSH
24121: LD_INT 11
24123: PUSH
24124: LD_INT 12
24126: PUSH
24127: LD_INT 13
24129: PUSH
24130: LD_INT 14
24132: PUSH
24133: LD_INT 1
24135: PUSH
24136: LD_INT 2
24138: PUSH
24139: LD_INT 3
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: ST_TO_ADDR
24151: GO 24282
24153: LD_INT 1
24155: DOUBLE
24156: EQUAL
24157: IFTRUE 24161
24159: GO 24223
24161: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24162: LD_ADDR_VAR 0 3
24166: PUSH
24167: LD_INT 11
24169: PUSH
24170: LD_INT 12
24172: PUSH
24173: LD_INT 13
24175: PUSH
24176: LD_INT 14
24178: PUSH
24179: LD_INT 1
24181: PUSH
24182: LD_INT 2
24184: PUSH
24185: LD_INT 3
24187: PUSH
24188: LD_INT 4
24190: PUSH
24191: LD_INT 5
24193: PUSH
24194: LD_INT 21
24196: PUSH
24197: LD_INT 23
24199: PUSH
24200: LD_INT 22
24202: PUSH
24203: LD_INT 24
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: ST_TO_ADDR
24221: GO 24282
24223: LD_INT 3
24225: DOUBLE
24226: EQUAL
24227: IFTRUE 24231
24229: GO 24281
24231: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24232: LD_ADDR_VAR 0 3
24236: PUSH
24237: LD_INT 13
24239: PUSH
24240: LD_INT 14
24242: PUSH
24243: LD_INT 2
24245: PUSH
24246: LD_INT 3
24248: PUSH
24249: LD_INT 4
24251: PUSH
24252: LD_INT 5
24254: PUSH
24255: LD_INT 21
24257: PUSH
24258: LD_INT 22
24260: PUSH
24261: LD_INT 23
24263: PUSH
24264: LD_INT 24
24266: PUSH
24267: EMPTY
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: ST_TO_ADDR
24279: GO 24282
24281: POP
// result := ( chassis in result ) ;
24282: LD_ADDR_VAR 0 3
24286: PUSH
24287: LD_VAR 0 1
24291: PUSH
24292: LD_VAR 0 3
24296: IN
24297: ST_TO_ADDR
// end ;
24298: LD_VAR 0 3
24302: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
24303: LD_INT 0
24305: PPUSH
// if not chassis or not weapon then
24306: LD_VAR 0 1
24310: NOT
24311: PUSH
24312: LD_VAR 0 2
24316: NOT
24317: OR
24318: IFFALSE 24322
// exit ;
24320: GO 25348
// case weapon of us_machine_gun :
24322: LD_VAR 0 2
24326: PUSH
24327: LD_INT 2
24329: DOUBLE
24330: EQUAL
24331: IFTRUE 24335
24333: GO 24365
24335: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
24336: LD_ADDR_VAR 0 3
24340: PUSH
24341: LD_INT 1
24343: PUSH
24344: LD_INT 2
24346: PUSH
24347: LD_INT 3
24349: PUSH
24350: LD_INT 4
24352: PUSH
24353: LD_INT 5
24355: PUSH
24356: EMPTY
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: ST_TO_ADDR
24363: GO 25332
24365: LD_INT 3
24367: DOUBLE
24368: EQUAL
24369: IFTRUE 24373
24371: GO 24403
24373: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
24374: LD_ADDR_VAR 0 3
24378: PUSH
24379: LD_INT 1
24381: PUSH
24382: LD_INT 2
24384: PUSH
24385: LD_INT 3
24387: PUSH
24388: LD_INT 4
24390: PUSH
24391: LD_INT 5
24393: PUSH
24394: EMPTY
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: ST_TO_ADDR
24401: GO 25332
24403: LD_INT 11
24405: DOUBLE
24406: EQUAL
24407: IFTRUE 24411
24409: GO 24441
24411: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
24412: LD_ADDR_VAR 0 3
24416: PUSH
24417: LD_INT 1
24419: PUSH
24420: LD_INT 2
24422: PUSH
24423: LD_INT 3
24425: PUSH
24426: LD_INT 4
24428: PUSH
24429: LD_INT 5
24431: PUSH
24432: EMPTY
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: ST_TO_ADDR
24439: GO 25332
24441: LD_INT 4
24443: DOUBLE
24444: EQUAL
24445: IFTRUE 24449
24447: GO 24475
24449: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
24450: LD_ADDR_VAR 0 3
24454: PUSH
24455: LD_INT 2
24457: PUSH
24458: LD_INT 3
24460: PUSH
24461: LD_INT 4
24463: PUSH
24464: LD_INT 5
24466: PUSH
24467: EMPTY
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: ST_TO_ADDR
24473: GO 25332
24475: LD_INT 5
24477: DOUBLE
24478: EQUAL
24479: IFTRUE 24483
24481: GO 24509
24483: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
24484: LD_ADDR_VAR 0 3
24488: PUSH
24489: LD_INT 2
24491: PUSH
24492: LD_INT 3
24494: PUSH
24495: LD_INT 4
24497: PUSH
24498: LD_INT 5
24500: PUSH
24501: EMPTY
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: ST_TO_ADDR
24507: GO 25332
24509: LD_INT 9
24511: DOUBLE
24512: EQUAL
24513: IFTRUE 24517
24515: GO 24543
24517: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
24518: LD_ADDR_VAR 0 3
24522: PUSH
24523: LD_INT 2
24525: PUSH
24526: LD_INT 3
24528: PUSH
24529: LD_INT 4
24531: PUSH
24532: LD_INT 5
24534: PUSH
24535: EMPTY
24536: LIST
24537: LIST
24538: LIST
24539: LIST
24540: ST_TO_ADDR
24541: GO 25332
24543: LD_INT 7
24545: DOUBLE
24546: EQUAL
24547: IFTRUE 24551
24549: GO 24577
24551: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
24552: LD_ADDR_VAR 0 3
24556: PUSH
24557: LD_INT 2
24559: PUSH
24560: LD_INT 3
24562: PUSH
24563: LD_INT 4
24565: PUSH
24566: LD_INT 5
24568: PUSH
24569: EMPTY
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: ST_TO_ADDR
24575: GO 25332
24577: LD_INT 12
24579: DOUBLE
24580: EQUAL
24581: IFTRUE 24585
24583: GO 24611
24585: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
24586: LD_ADDR_VAR 0 3
24590: PUSH
24591: LD_INT 2
24593: PUSH
24594: LD_INT 3
24596: PUSH
24597: LD_INT 4
24599: PUSH
24600: LD_INT 5
24602: PUSH
24603: EMPTY
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: ST_TO_ADDR
24609: GO 25332
24611: LD_INT 13
24613: DOUBLE
24614: EQUAL
24615: IFTRUE 24619
24617: GO 24645
24619: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
24620: LD_ADDR_VAR 0 3
24624: PUSH
24625: LD_INT 2
24627: PUSH
24628: LD_INT 3
24630: PUSH
24631: LD_INT 4
24633: PUSH
24634: LD_INT 5
24636: PUSH
24637: EMPTY
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: ST_TO_ADDR
24643: GO 25332
24645: LD_INT 14
24647: DOUBLE
24648: EQUAL
24649: IFTRUE 24653
24651: GO 24671
24653: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
24654: LD_ADDR_VAR 0 3
24658: PUSH
24659: LD_INT 4
24661: PUSH
24662: LD_INT 5
24664: PUSH
24665: EMPTY
24666: LIST
24667: LIST
24668: ST_TO_ADDR
24669: GO 25332
24671: LD_INT 6
24673: DOUBLE
24674: EQUAL
24675: IFTRUE 24679
24677: GO 24697
24679: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
24680: LD_ADDR_VAR 0 3
24684: PUSH
24685: LD_INT 4
24687: PUSH
24688: LD_INT 5
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: ST_TO_ADDR
24695: GO 25332
24697: LD_INT 10
24699: DOUBLE
24700: EQUAL
24701: IFTRUE 24705
24703: GO 24723
24705: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
24706: LD_ADDR_VAR 0 3
24710: PUSH
24711: LD_INT 4
24713: PUSH
24714: LD_INT 5
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: ST_TO_ADDR
24721: GO 25332
24723: LD_INT 22
24725: DOUBLE
24726: EQUAL
24727: IFTRUE 24731
24729: GO 24757
24731: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
24732: LD_ADDR_VAR 0 3
24736: PUSH
24737: LD_INT 11
24739: PUSH
24740: LD_INT 12
24742: PUSH
24743: LD_INT 13
24745: PUSH
24746: LD_INT 14
24748: PUSH
24749: EMPTY
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: ST_TO_ADDR
24755: GO 25332
24757: LD_INT 23
24759: DOUBLE
24760: EQUAL
24761: IFTRUE 24765
24763: GO 24791
24765: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
24766: LD_ADDR_VAR 0 3
24770: PUSH
24771: LD_INT 11
24773: PUSH
24774: LD_INT 12
24776: PUSH
24777: LD_INT 13
24779: PUSH
24780: LD_INT 14
24782: PUSH
24783: EMPTY
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: ST_TO_ADDR
24789: GO 25332
24791: LD_INT 24
24793: DOUBLE
24794: EQUAL
24795: IFTRUE 24799
24797: GO 24825
24799: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
24800: LD_ADDR_VAR 0 3
24804: PUSH
24805: LD_INT 11
24807: PUSH
24808: LD_INT 12
24810: PUSH
24811: LD_INT 13
24813: PUSH
24814: LD_INT 14
24816: PUSH
24817: EMPTY
24818: LIST
24819: LIST
24820: LIST
24821: LIST
24822: ST_TO_ADDR
24823: GO 25332
24825: LD_INT 30
24827: DOUBLE
24828: EQUAL
24829: IFTRUE 24833
24831: GO 24859
24833: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
24834: LD_ADDR_VAR 0 3
24838: PUSH
24839: LD_INT 11
24841: PUSH
24842: LD_INT 12
24844: PUSH
24845: LD_INT 13
24847: PUSH
24848: LD_INT 14
24850: PUSH
24851: EMPTY
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: ST_TO_ADDR
24857: GO 25332
24859: LD_INT 25
24861: DOUBLE
24862: EQUAL
24863: IFTRUE 24867
24865: GO 24885
24867: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
24868: LD_ADDR_VAR 0 3
24872: PUSH
24873: LD_INT 13
24875: PUSH
24876: LD_INT 14
24878: PUSH
24879: EMPTY
24880: LIST
24881: LIST
24882: ST_TO_ADDR
24883: GO 25332
24885: LD_INT 27
24887: DOUBLE
24888: EQUAL
24889: IFTRUE 24893
24891: GO 24911
24893: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
24894: LD_ADDR_VAR 0 3
24898: PUSH
24899: LD_INT 13
24901: PUSH
24902: LD_INT 14
24904: PUSH
24905: EMPTY
24906: LIST
24907: LIST
24908: ST_TO_ADDR
24909: GO 25332
24911: LD_INT 28
24913: DOUBLE
24914: EQUAL
24915: IFTRUE 24919
24917: GO 24937
24919: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
24920: LD_ADDR_VAR 0 3
24924: PUSH
24925: LD_INT 13
24927: PUSH
24928: LD_INT 14
24930: PUSH
24931: EMPTY
24932: LIST
24933: LIST
24934: ST_TO_ADDR
24935: GO 25332
24937: LD_INT 29
24939: DOUBLE
24940: EQUAL
24941: IFTRUE 24945
24943: GO 24963
24945: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
24946: LD_ADDR_VAR 0 3
24950: PUSH
24951: LD_INT 13
24953: PUSH
24954: LD_INT 14
24956: PUSH
24957: EMPTY
24958: LIST
24959: LIST
24960: ST_TO_ADDR
24961: GO 25332
24963: LD_INT 31
24965: DOUBLE
24966: EQUAL
24967: IFTRUE 24971
24969: GO 24989
24971: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
24972: LD_ADDR_VAR 0 3
24976: PUSH
24977: LD_INT 13
24979: PUSH
24980: LD_INT 14
24982: PUSH
24983: EMPTY
24984: LIST
24985: LIST
24986: ST_TO_ADDR
24987: GO 25332
24989: LD_INT 26
24991: DOUBLE
24992: EQUAL
24993: IFTRUE 24997
24995: GO 25015
24997: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
24998: LD_ADDR_VAR 0 3
25002: PUSH
25003: LD_INT 13
25005: PUSH
25006: LD_INT 14
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: ST_TO_ADDR
25013: GO 25332
25015: LD_INT 42
25017: DOUBLE
25018: EQUAL
25019: IFTRUE 25023
25021: GO 25049
25023: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25024: LD_ADDR_VAR 0 3
25028: PUSH
25029: LD_INT 21
25031: PUSH
25032: LD_INT 22
25034: PUSH
25035: LD_INT 23
25037: PUSH
25038: LD_INT 24
25040: PUSH
25041: EMPTY
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: ST_TO_ADDR
25047: GO 25332
25049: LD_INT 43
25051: DOUBLE
25052: EQUAL
25053: IFTRUE 25057
25055: GO 25083
25057: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25058: LD_ADDR_VAR 0 3
25062: PUSH
25063: LD_INT 21
25065: PUSH
25066: LD_INT 22
25068: PUSH
25069: LD_INT 23
25071: PUSH
25072: LD_INT 24
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: ST_TO_ADDR
25081: GO 25332
25083: LD_INT 44
25085: DOUBLE
25086: EQUAL
25087: IFTRUE 25091
25089: GO 25117
25091: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25092: LD_ADDR_VAR 0 3
25096: PUSH
25097: LD_INT 21
25099: PUSH
25100: LD_INT 22
25102: PUSH
25103: LD_INT 23
25105: PUSH
25106: LD_INT 24
25108: PUSH
25109: EMPTY
25110: LIST
25111: LIST
25112: LIST
25113: LIST
25114: ST_TO_ADDR
25115: GO 25332
25117: LD_INT 45
25119: DOUBLE
25120: EQUAL
25121: IFTRUE 25125
25123: GO 25151
25125: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25126: LD_ADDR_VAR 0 3
25130: PUSH
25131: LD_INT 21
25133: PUSH
25134: LD_INT 22
25136: PUSH
25137: LD_INT 23
25139: PUSH
25140: LD_INT 24
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: LIST
25147: LIST
25148: ST_TO_ADDR
25149: GO 25332
25151: LD_INT 49
25153: DOUBLE
25154: EQUAL
25155: IFTRUE 25159
25157: GO 25185
25159: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25160: LD_ADDR_VAR 0 3
25164: PUSH
25165: LD_INT 21
25167: PUSH
25168: LD_INT 22
25170: PUSH
25171: LD_INT 23
25173: PUSH
25174: LD_INT 24
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: ST_TO_ADDR
25183: GO 25332
25185: LD_INT 51
25187: DOUBLE
25188: EQUAL
25189: IFTRUE 25193
25191: GO 25219
25193: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
25194: LD_ADDR_VAR 0 3
25198: PUSH
25199: LD_INT 21
25201: PUSH
25202: LD_INT 22
25204: PUSH
25205: LD_INT 23
25207: PUSH
25208: LD_INT 24
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: LIST
25215: LIST
25216: ST_TO_ADDR
25217: GO 25332
25219: LD_INT 52
25221: DOUBLE
25222: EQUAL
25223: IFTRUE 25227
25225: GO 25253
25227: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
25228: LD_ADDR_VAR 0 3
25232: PUSH
25233: LD_INT 21
25235: PUSH
25236: LD_INT 22
25238: PUSH
25239: LD_INT 23
25241: PUSH
25242: LD_INT 24
25244: PUSH
25245: EMPTY
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: ST_TO_ADDR
25251: GO 25332
25253: LD_INT 53
25255: DOUBLE
25256: EQUAL
25257: IFTRUE 25261
25259: GO 25279
25261: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
25262: LD_ADDR_VAR 0 3
25266: PUSH
25267: LD_INT 23
25269: PUSH
25270: LD_INT 24
25272: PUSH
25273: EMPTY
25274: LIST
25275: LIST
25276: ST_TO_ADDR
25277: GO 25332
25279: LD_INT 46
25281: DOUBLE
25282: EQUAL
25283: IFTRUE 25287
25285: GO 25305
25287: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
25288: LD_ADDR_VAR 0 3
25292: PUSH
25293: LD_INT 23
25295: PUSH
25296: LD_INT 24
25298: PUSH
25299: EMPTY
25300: LIST
25301: LIST
25302: ST_TO_ADDR
25303: GO 25332
25305: LD_INT 47
25307: DOUBLE
25308: EQUAL
25309: IFTRUE 25313
25311: GO 25331
25313: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25314: LD_ADDR_VAR 0 3
25318: PUSH
25319: LD_INT 23
25321: PUSH
25322: LD_INT 24
25324: PUSH
25325: EMPTY
25326: LIST
25327: LIST
25328: ST_TO_ADDR
25329: GO 25332
25331: POP
// result := ( chassis in result ) ;
25332: LD_ADDR_VAR 0 3
25336: PUSH
25337: LD_VAR 0 1
25341: PUSH
25342: LD_VAR 0 3
25346: IN
25347: ST_TO_ADDR
// end ;
25348: LD_VAR 0 3
25352: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
25353: LD_INT 0
25355: PPUSH
25356: PPUSH
25357: PPUSH
25358: PPUSH
25359: PPUSH
25360: PPUSH
25361: PPUSH
// result := array ;
25362: LD_ADDR_VAR 0 5
25366: PUSH
25367: LD_VAR 0 1
25371: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
25372: LD_VAR 0 1
25376: NOT
25377: PUSH
25378: LD_VAR 0 2
25382: NOT
25383: OR
25384: PUSH
25385: LD_VAR 0 3
25389: NOT
25390: OR
25391: PUSH
25392: LD_VAR 0 2
25396: PUSH
25397: LD_VAR 0 1
25401: GREATER
25402: OR
25403: PUSH
25404: LD_VAR 0 3
25408: PUSH
25409: LD_VAR 0 1
25413: GREATER
25414: OR
25415: IFFALSE 25419
// exit ;
25417: GO 25715
// if direction then
25419: LD_VAR 0 4
25423: IFFALSE 25487
// begin d := 1 ;
25425: LD_ADDR_VAR 0 9
25429: PUSH
25430: LD_INT 1
25432: ST_TO_ADDR
// if i_from > i_to then
25433: LD_VAR 0 2
25437: PUSH
25438: LD_VAR 0 3
25442: GREATER
25443: IFFALSE 25469
// length := ( array - i_from ) + i_to else
25445: LD_ADDR_VAR 0 11
25449: PUSH
25450: LD_VAR 0 1
25454: PUSH
25455: LD_VAR 0 2
25459: MINUS
25460: PUSH
25461: LD_VAR 0 3
25465: PLUS
25466: ST_TO_ADDR
25467: GO 25485
// length := i_to - i_from ;
25469: LD_ADDR_VAR 0 11
25473: PUSH
25474: LD_VAR 0 3
25478: PUSH
25479: LD_VAR 0 2
25483: MINUS
25484: ST_TO_ADDR
// end else
25485: GO 25548
// begin d := - 1 ;
25487: LD_ADDR_VAR 0 9
25491: PUSH
25492: LD_INT 1
25494: NEG
25495: ST_TO_ADDR
// if i_from > i_to then
25496: LD_VAR 0 2
25500: PUSH
25501: LD_VAR 0 3
25505: GREATER
25506: IFFALSE 25526
// length := i_from - i_to else
25508: LD_ADDR_VAR 0 11
25512: PUSH
25513: LD_VAR 0 2
25517: PUSH
25518: LD_VAR 0 3
25522: MINUS
25523: ST_TO_ADDR
25524: GO 25548
// length := ( array - i_to ) + i_from ;
25526: LD_ADDR_VAR 0 11
25530: PUSH
25531: LD_VAR 0 1
25535: PUSH
25536: LD_VAR 0 3
25540: MINUS
25541: PUSH
25542: LD_VAR 0 2
25546: PLUS
25547: ST_TO_ADDR
// end ; if not length then
25548: LD_VAR 0 11
25552: NOT
25553: IFFALSE 25557
// exit ;
25555: GO 25715
// tmp := array ;
25557: LD_ADDR_VAR 0 10
25561: PUSH
25562: LD_VAR 0 1
25566: ST_TO_ADDR
// for i = 1 to length do
25567: LD_ADDR_VAR 0 6
25571: PUSH
25572: DOUBLE
25573: LD_INT 1
25575: DEC
25576: ST_TO_ADDR
25577: LD_VAR 0 11
25581: PUSH
25582: FOR_TO
25583: IFFALSE 25703
// begin for j = 1 to array do
25585: LD_ADDR_VAR 0 7
25589: PUSH
25590: DOUBLE
25591: LD_INT 1
25593: DEC
25594: ST_TO_ADDR
25595: LD_VAR 0 1
25599: PUSH
25600: FOR_TO
25601: IFFALSE 25689
// begin k := j + d ;
25603: LD_ADDR_VAR 0 8
25607: PUSH
25608: LD_VAR 0 7
25612: PUSH
25613: LD_VAR 0 9
25617: PLUS
25618: ST_TO_ADDR
// if k > array then
25619: LD_VAR 0 8
25623: PUSH
25624: LD_VAR 0 1
25628: GREATER
25629: IFFALSE 25639
// k := 1 ;
25631: LD_ADDR_VAR 0 8
25635: PUSH
25636: LD_INT 1
25638: ST_TO_ADDR
// if not k then
25639: LD_VAR 0 8
25643: NOT
25644: IFFALSE 25656
// k := array ;
25646: LD_ADDR_VAR 0 8
25650: PUSH
25651: LD_VAR 0 1
25655: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
25656: LD_ADDR_VAR 0 10
25660: PUSH
25661: LD_VAR 0 10
25665: PPUSH
25666: LD_VAR 0 8
25670: PPUSH
25671: LD_VAR 0 1
25675: PUSH
25676: LD_VAR 0 7
25680: ARRAY
25681: PPUSH
25682: CALL_OW 1
25686: ST_TO_ADDR
// end ;
25687: GO 25600
25689: POP
25690: POP
// array := tmp ;
25691: LD_ADDR_VAR 0 1
25695: PUSH
25696: LD_VAR 0 10
25700: ST_TO_ADDR
// end ;
25701: GO 25582
25703: POP
25704: POP
// result := array ;
25705: LD_ADDR_VAR 0 5
25709: PUSH
25710: LD_VAR 0 1
25714: ST_TO_ADDR
// end ;
25715: LD_VAR 0 5
25719: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
25720: LD_INT 0
25722: PPUSH
25723: PPUSH
// result := 0 ;
25724: LD_ADDR_VAR 0 3
25728: PUSH
25729: LD_INT 0
25731: ST_TO_ADDR
// if not array or not value in array then
25732: LD_VAR 0 1
25736: NOT
25737: PUSH
25738: LD_VAR 0 2
25742: PUSH
25743: LD_VAR 0 1
25747: IN
25748: NOT
25749: OR
25750: IFFALSE 25754
// exit ;
25752: GO 25808
// for i = 1 to array do
25754: LD_ADDR_VAR 0 4
25758: PUSH
25759: DOUBLE
25760: LD_INT 1
25762: DEC
25763: ST_TO_ADDR
25764: LD_VAR 0 1
25768: PUSH
25769: FOR_TO
25770: IFFALSE 25806
// if value = array [ i ] then
25772: LD_VAR 0 2
25776: PUSH
25777: LD_VAR 0 1
25781: PUSH
25782: LD_VAR 0 4
25786: ARRAY
25787: EQUAL
25788: IFFALSE 25804
// begin result := i ;
25790: LD_ADDR_VAR 0 3
25794: PUSH
25795: LD_VAR 0 4
25799: ST_TO_ADDR
// exit ;
25800: POP
25801: POP
25802: GO 25808
// end ;
25804: GO 25769
25806: POP
25807: POP
// end ;
25808: LD_VAR 0 3
25812: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
25813: LD_INT 0
25815: PPUSH
// vc_chassis := chassis ;
25816: LD_ADDR_OWVAR 37
25820: PUSH
25821: LD_VAR 0 1
25825: ST_TO_ADDR
// vc_engine := engine ;
25826: LD_ADDR_OWVAR 39
25830: PUSH
25831: LD_VAR 0 2
25835: ST_TO_ADDR
// vc_control := control ;
25836: LD_ADDR_OWVAR 38
25840: PUSH
25841: LD_VAR 0 3
25845: ST_TO_ADDR
// vc_weapon := weapon ;
25846: LD_ADDR_OWVAR 40
25850: PUSH
25851: LD_VAR 0 4
25855: ST_TO_ADDR
// vc_fuel_battery := fuel ;
25856: LD_ADDR_OWVAR 41
25860: PUSH
25861: LD_VAR 0 5
25865: ST_TO_ADDR
// end ;
25866: LD_VAR 0 6
25870: RET
// export function WantPlant ( unit ) ; var task ; begin
25871: LD_INT 0
25873: PPUSH
25874: PPUSH
// result := false ;
25875: LD_ADDR_VAR 0 2
25879: PUSH
25880: LD_INT 0
25882: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
25883: LD_ADDR_VAR 0 3
25887: PUSH
25888: LD_VAR 0 1
25892: PPUSH
25893: CALL_OW 437
25897: ST_TO_ADDR
// if task then
25898: LD_VAR 0 3
25902: IFFALSE 25930
// if task [ 1 ] [ 1 ] = p then
25904: LD_VAR 0 3
25908: PUSH
25909: LD_INT 1
25911: ARRAY
25912: PUSH
25913: LD_INT 1
25915: ARRAY
25916: PUSH
25917: LD_STRING p
25919: EQUAL
25920: IFFALSE 25930
// result := true ;
25922: LD_ADDR_VAR 0 2
25926: PUSH
25927: LD_INT 1
25929: ST_TO_ADDR
// end ;
25930: LD_VAR 0 2
25934: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
25935: LD_INT 0
25937: PPUSH
25938: PPUSH
25939: PPUSH
25940: PPUSH
// if pos < 1 then
25941: LD_VAR 0 2
25945: PUSH
25946: LD_INT 1
25948: LESS
25949: IFFALSE 25953
// exit ;
25951: GO 26256
// if pos = 1 then
25953: LD_VAR 0 2
25957: PUSH
25958: LD_INT 1
25960: EQUAL
25961: IFFALSE 25994
// result := Replace ( arr , pos [ 1 ] , value ) else
25963: LD_ADDR_VAR 0 4
25967: PUSH
25968: LD_VAR 0 1
25972: PPUSH
25973: LD_VAR 0 2
25977: PUSH
25978: LD_INT 1
25980: ARRAY
25981: PPUSH
25982: LD_VAR 0 3
25986: PPUSH
25987: CALL_OW 1
25991: ST_TO_ADDR
25992: GO 26256
// begin tmp := arr ;
25994: LD_ADDR_VAR 0 6
25998: PUSH
25999: LD_VAR 0 1
26003: ST_TO_ADDR
// s_arr := [ tmp ] ;
26004: LD_ADDR_VAR 0 7
26008: PUSH
26009: LD_VAR 0 6
26013: PUSH
26014: EMPTY
26015: LIST
26016: ST_TO_ADDR
// for i = 1 to pos - 1 do
26017: LD_ADDR_VAR 0 5
26021: PUSH
26022: DOUBLE
26023: LD_INT 1
26025: DEC
26026: ST_TO_ADDR
26027: LD_VAR 0 2
26031: PUSH
26032: LD_INT 1
26034: MINUS
26035: PUSH
26036: FOR_TO
26037: IFFALSE 26082
// begin tmp := tmp [ pos [ i ] ] ;
26039: LD_ADDR_VAR 0 6
26043: PUSH
26044: LD_VAR 0 6
26048: PUSH
26049: LD_VAR 0 2
26053: PUSH
26054: LD_VAR 0 5
26058: ARRAY
26059: ARRAY
26060: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26061: LD_ADDR_VAR 0 7
26065: PUSH
26066: LD_VAR 0 7
26070: PUSH
26071: LD_VAR 0 6
26075: PUSH
26076: EMPTY
26077: LIST
26078: ADD
26079: ST_TO_ADDR
// end ;
26080: GO 26036
26082: POP
26083: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26084: LD_ADDR_VAR 0 6
26088: PUSH
26089: LD_VAR 0 6
26093: PPUSH
26094: LD_VAR 0 2
26098: PUSH
26099: LD_VAR 0 2
26103: ARRAY
26104: PPUSH
26105: LD_VAR 0 3
26109: PPUSH
26110: CALL_OW 1
26114: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26115: LD_ADDR_VAR 0 7
26119: PUSH
26120: LD_VAR 0 7
26124: PPUSH
26125: LD_VAR 0 7
26129: PPUSH
26130: LD_VAR 0 6
26134: PPUSH
26135: CALL_OW 1
26139: ST_TO_ADDR
// for i = s_arr downto 2 do
26140: LD_ADDR_VAR 0 5
26144: PUSH
26145: DOUBLE
26146: LD_VAR 0 7
26150: INC
26151: ST_TO_ADDR
26152: LD_INT 2
26154: PUSH
26155: FOR_DOWNTO
26156: IFFALSE 26240
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26158: LD_ADDR_VAR 0 6
26162: PUSH
26163: LD_VAR 0 7
26167: PUSH
26168: LD_VAR 0 5
26172: PUSH
26173: LD_INT 1
26175: MINUS
26176: ARRAY
26177: PPUSH
26178: LD_VAR 0 2
26182: PUSH
26183: LD_VAR 0 5
26187: PUSH
26188: LD_INT 1
26190: MINUS
26191: ARRAY
26192: PPUSH
26193: LD_VAR 0 7
26197: PUSH
26198: LD_VAR 0 5
26202: ARRAY
26203: PPUSH
26204: CALL_OW 1
26208: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
26209: LD_ADDR_VAR 0 7
26213: PUSH
26214: LD_VAR 0 7
26218: PPUSH
26219: LD_VAR 0 5
26223: PUSH
26224: LD_INT 1
26226: MINUS
26227: PPUSH
26228: LD_VAR 0 6
26232: PPUSH
26233: CALL_OW 1
26237: ST_TO_ADDR
// end ;
26238: GO 26155
26240: POP
26241: POP
// result := s_arr [ 1 ] ;
26242: LD_ADDR_VAR 0 4
26246: PUSH
26247: LD_VAR 0 7
26251: PUSH
26252: LD_INT 1
26254: ARRAY
26255: ST_TO_ADDR
// end ; end ;
26256: LD_VAR 0 4
26260: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
26261: LD_INT 0
26263: PPUSH
26264: PPUSH
// if not list then
26265: LD_VAR 0 1
26269: NOT
26270: IFFALSE 26274
// exit ;
26272: GO 26365
// i := list [ pos1 ] ;
26274: LD_ADDR_VAR 0 5
26278: PUSH
26279: LD_VAR 0 1
26283: PUSH
26284: LD_VAR 0 2
26288: ARRAY
26289: ST_TO_ADDR
// if not i then
26290: LD_VAR 0 5
26294: NOT
26295: IFFALSE 26299
// exit ;
26297: GO 26365
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
26299: LD_ADDR_VAR 0 1
26303: PUSH
26304: LD_VAR 0 1
26308: PPUSH
26309: LD_VAR 0 2
26313: PPUSH
26314: LD_VAR 0 1
26318: PUSH
26319: LD_VAR 0 3
26323: ARRAY
26324: PPUSH
26325: CALL_OW 1
26329: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26330: LD_ADDR_VAR 0 1
26334: PUSH
26335: LD_VAR 0 1
26339: PPUSH
26340: LD_VAR 0 3
26344: PPUSH
26345: LD_VAR 0 5
26349: PPUSH
26350: CALL_OW 1
26354: ST_TO_ADDR
// result := list ;
26355: LD_ADDR_VAR 0 4
26359: PUSH
26360: LD_VAR 0 1
26364: ST_TO_ADDR
// end ;
26365: LD_VAR 0 4
26369: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
26370: LD_INT 0
26372: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
26373: LD_ADDR_VAR 0 5
26377: PUSH
26378: LD_VAR 0 1
26382: PPUSH
26383: CALL_OW 250
26387: PPUSH
26388: LD_VAR 0 1
26392: PPUSH
26393: CALL_OW 251
26397: PPUSH
26398: LD_VAR 0 2
26402: PPUSH
26403: LD_VAR 0 3
26407: PPUSH
26408: LD_VAR 0 4
26412: PPUSH
26413: CALL 26423 0 5
26417: ST_TO_ADDR
// end ;
26418: LD_VAR 0 5
26422: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
26423: LD_INT 0
26425: PPUSH
26426: PPUSH
26427: PPUSH
26428: PPUSH
// if not list then
26429: LD_VAR 0 3
26433: NOT
26434: IFFALSE 26438
// exit ;
26436: GO 26826
// result := [ ] ;
26438: LD_ADDR_VAR 0 6
26442: PUSH
26443: EMPTY
26444: ST_TO_ADDR
// for i in list do
26445: LD_ADDR_VAR 0 7
26449: PUSH
26450: LD_VAR 0 3
26454: PUSH
26455: FOR_IN
26456: IFFALSE 26658
// begin tmp := GetDistUnitXY ( i , x , y ) ;
26458: LD_ADDR_VAR 0 9
26462: PUSH
26463: LD_VAR 0 7
26467: PPUSH
26468: LD_VAR 0 1
26472: PPUSH
26473: LD_VAR 0 2
26477: PPUSH
26478: CALL_OW 297
26482: ST_TO_ADDR
// if not result then
26483: LD_VAR 0 6
26487: NOT
26488: IFFALSE 26514
// result := [ [ i , tmp ] ] else
26490: LD_ADDR_VAR 0 6
26494: PUSH
26495: LD_VAR 0 7
26499: PUSH
26500: LD_VAR 0 9
26504: PUSH
26505: EMPTY
26506: LIST
26507: LIST
26508: PUSH
26509: EMPTY
26510: LIST
26511: ST_TO_ADDR
26512: GO 26656
// begin if result [ result ] [ 2 ] < tmp then
26514: LD_VAR 0 6
26518: PUSH
26519: LD_VAR 0 6
26523: ARRAY
26524: PUSH
26525: LD_INT 2
26527: ARRAY
26528: PUSH
26529: LD_VAR 0 9
26533: LESS
26534: IFFALSE 26576
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
26536: LD_ADDR_VAR 0 6
26540: PUSH
26541: LD_VAR 0 6
26545: PPUSH
26546: LD_VAR 0 6
26550: PUSH
26551: LD_INT 1
26553: PLUS
26554: PPUSH
26555: LD_VAR 0 7
26559: PUSH
26560: LD_VAR 0 9
26564: PUSH
26565: EMPTY
26566: LIST
26567: LIST
26568: PPUSH
26569: CALL_OW 2
26573: ST_TO_ADDR
26574: GO 26656
// for j = 1 to result do
26576: LD_ADDR_VAR 0 8
26580: PUSH
26581: DOUBLE
26582: LD_INT 1
26584: DEC
26585: ST_TO_ADDR
26586: LD_VAR 0 6
26590: PUSH
26591: FOR_TO
26592: IFFALSE 26654
// begin if tmp < result [ j ] [ 2 ] then
26594: LD_VAR 0 9
26598: PUSH
26599: LD_VAR 0 6
26603: PUSH
26604: LD_VAR 0 8
26608: ARRAY
26609: PUSH
26610: LD_INT 2
26612: ARRAY
26613: LESS
26614: IFFALSE 26652
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26616: LD_ADDR_VAR 0 6
26620: PUSH
26621: LD_VAR 0 6
26625: PPUSH
26626: LD_VAR 0 8
26630: PPUSH
26631: LD_VAR 0 7
26635: PUSH
26636: LD_VAR 0 9
26640: PUSH
26641: EMPTY
26642: LIST
26643: LIST
26644: PPUSH
26645: CALL_OW 2
26649: ST_TO_ADDR
// break ;
26650: GO 26654
// end ; end ;
26652: GO 26591
26654: POP
26655: POP
// end ; end ;
26656: GO 26455
26658: POP
26659: POP
// if result and not asc then
26660: LD_VAR 0 6
26664: PUSH
26665: LD_VAR 0 4
26669: NOT
26670: AND
26671: IFFALSE 26746
// begin tmp := result ;
26673: LD_ADDR_VAR 0 9
26677: PUSH
26678: LD_VAR 0 6
26682: ST_TO_ADDR
// for i = tmp downto 1 do
26683: LD_ADDR_VAR 0 7
26687: PUSH
26688: DOUBLE
26689: LD_VAR 0 9
26693: INC
26694: ST_TO_ADDR
26695: LD_INT 1
26697: PUSH
26698: FOR_DOWNTO
26699: IFFALSE 26744
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
26701: LD_ADDR_VAR 0 6
26705: PUSH
26706: LD_VAR 0 6
26710: PPUSH
26711: LD_VAR 0 9
26715: PUSH
26716: LD_VAR 0 7
26720: MINUS
26721: PUSH
26722: LD_INT 1
26724: PLUS
26725: PPUSH
26726: LD_VAR 0 9
26730: PUSH
26731: LD_VAR 0 7
26735: ARRAY
26736: PPUSH
26737: CALL_OW 1
26741: ST_TO_ADDR
26742: GO 26698
26744: POP
26745: POP
// end ; tmp := [ ] ;
26746: LD_ADDR_VAR 0 9
26750: PUSH
26751: EMPTY
26752: ST_TO_ADDR
// if mode then
26753: LD_VAR 0 5
26757: IFFALSE 26826
// begin for i = 1 to result do
26759: LD_ADDR_VAR 0 7
26763: PUSH
26764: DOUBLE
26765: LD_INT 1
26767: DEC
26768: ST_TO_ADDR
26769: LD_VAR 0 6
26773: PUSH
26774: FOR_TO
26775: IFFALSE 26814
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
26777: LD_ADDR_VAR 0 9
26781: PUSH
26782: LD_VAR 0 9
26786: PPUSH
26787: LD_VAR 0 7
26791: PPUSH
26792: LD_VAR 0 6
26796: PUSH
26797: LD_VAR 0 7
26801: ARRAY
26802: PUSH
26803: LD_INT 1
26805: ARRAY
26806: PPUSH
26807: CALL_OW 1
26811: ST_TO_ADDR
26812: GO 26774
26814: POP
26815: POP
// result := tmp ;
26816: LD_ADDR_VAR 0 6
26820: PUSH
26821: LD_VAR 0 9
26825: ST_TO_ADDR
// end ; end ;
26826: LD_VAR 0 6
26830: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
26831: LD_INT 0
26833: PPUSH
26834: PPUSH
26835: PPUSH
26836: PPUSH
26837: PPUSH
26838: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
26839: LD_ADDR_VAR 0 5
26843: PUSH
26844: LD_INT 0
26846: PUSH
26847: LD_INT 0
26849: PUSH
26850: LD_INT 0
26852: PUSH
26853: EMPTY
26854: PUSH
26855: EMPTY
26856: LIST
26857: LIST
26858: LIST
26859: LIST
26860: ST_TO_ADDR
// if not x or not y then
26861: LD_VAR 0 2
26865: NOT
26866: PUSH
26867: LD_VAR 0 3
26871: NOT
26872: OR
26873: IFFALSE 26877
// exit ;
26875: GO 28523
// if not range then
26877: LD_VAR 0 4
26881: NOT
26882: IFFALSE 26892
// range := 10 ;
26884: LD_ADDR_VAR 0 4
26888: PUSH
26889: LD_INT 10
26891: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26892: LD_ADDR_VAR 0 8
26896: PUSH
26897: LD_INT 81
26899: PUSH
26900: LD_VAR 0 1
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: PUSH
26909: LD_INT 92
26911: PUSH
26912: LD_VAR 0 2
26916: PUSH
26917: LD_VAR 0 3
26921: PUSH
26922: LD_VAR 0 4
26926: PUSH
26927: EMPTY
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: PUSH
26933: LD_INT 3
26935: PUSH
26936: LD_INT 21
26938: PUSH
26939: LD_INT 3
26941: PUSH
26942: EMPTY
26943: LIST
26944: LIST
26945: PUSH
26946: EMPTY
26947: LIST
26948: LIST
26949: PUSH
26950: EMPTY
26951: LIST
26952: LIST
26953: LIST
26954: PPUSH
26955: CALL_OW 69
26959: ST_TO_ADDR
// if not tmp then
26960: LD_VAR 0 8
26964: NOT
26965: IFFALSE 26969
// exit ;
26967: GO 28523
// for i in tmp do
26969: LD_ADDR_VAR 0 6
26973: PUSH
26974: LD_VAR 0 8
26978: PUSH
26979: FOR_IN
26980: IFFALSE 28498
// begin points := [ 0 , 0 , 0 ] ;
26982: LD_ADDR_VAR 0 9
26986: PUSH
26987: LD_INT 0
26989: PUSH
26990: LD_INT 0
26992: PUSH
26993: LD_INT 0
26995: PUSH
26996: EMPTY
26997: LIST
26998: LIST
26999: LIST
27000: ST_TO_ADDR
// bpoints := 1 ;
27001: LD_ADDR_VAR 0 10
27005: PUSH
27006: LD_INT 1
27008: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27009: LD_VAR 0 6
27013: PPUSH
27014: CALL_OW 247
27018: PUSH
27019: LD_INT 1
27021: DOUBLE
27022: EQUAL
27023: IFTRUE 27027
27025: GO 27605
27027: POP
// begin if GetClass ( i ) = 1 then
27028: LD_VAR 0 6
27032: PPUSH
27033: CALL_OW 257
27037: PUSH
27038: LD_INT 1
27040: EQUAL
27041: IFFALSE 27062
// points := [ 10 , 5 , 3 ] ;
27043: LD_ADDR_VAR 0 9
27047: PUSH
27048: LD_INT 10
27050: PUSH
27051: LD_INT 5
27053: PUSH
27054: LD_INT 3
27056: PUSH
27057: EMPTY
27058: LIST
27059: LIST
27060: LIST
27061: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27062: LD_VAR 0 6
27066: PPUSH
27067: CALL_OW 257
27071: PUSH
27072: LD_INT 2
27074: PUSH
27075: LD_INT 3
27077: PUSH
27078: LD_INT 4
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: LIST
27085: IN
27086: IFFALSE 27107
// points := [ 3 , 2 , 1 ] ;
27088: LD_ADDR_VAR 0 9
27092: PUSH
27093: LD_INT 3
27095: PUSH
27096: LD_INT 2
27098: PUSH
27099: LD_INT 1
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: LIST
27106: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27107: LD_VAR 0 6
27111: PPUSH
27112: CALL_OW 257
27116: PUSH
27117: LD_INT 5
27119: EQUAL
27120: IFFALSE 27141
// points := [ 130 , 5 , 2 ] ;
27122: LD_ADDR_VAR 0 9
27126: PUSH
27127: LD_INT 130
27129: PUSH
27130: LD_INT 5
27132: PUSH
27133: LD_INT 2
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: LIST
27140: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27141: LD_VAR 0 6
27145: PPUSH
27146: CALL_OW 257
27150: PUSH
27151: LD_INT 8
27153: EQUAL
27154: IFFALSE 27175
// points := [ 35 , 35 , 30 ] ;
27156: LD_ADDR_VAR 0 9
27160: PUSH
27161: LD_INT 35
27163: PUSH
27164: LD_INT 35
27166: PUSH
27167: LD_INT 30
27169: PUSH
27170: EMPTY
27171: LIST
27172: LIST
27173: LIST
27174: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27175: LD_VAR 0 6
27179: PPUSH
27180: CALL_OW 257
27184: PUSH
27185: LD_INT 9
27187: EQUAL
27188: IFFALSE 27209
// points := [ 20 , 55 , 40 ] ;
27190: LD_ADDR_VAR 0 9
27194: PUSH
27195: LD_INT 20
27197: PUSH
27198: LD_INT 55
27200: PUSH
27201: LD_INT 40
27203: PUSH
27204: EMPTY
27205: LIST
27206: LIST
27207: LIST
27208: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27209: LD_VAR 0 6
27213: PPUSH
27214: CALL_OW 257
27218: PUSH
27219: LD_INT 12
27221: PUSH
27222: LD_INT 16
27224: PUSH
27225: EMPTY
27226: LIST
27227: LIST
27228: IN
27229: IFFALSE 27250
// points := [ 5 , 3 , 2 ] ;
27231: LD_ADDR_VAR 0 9
27235: PUSH
27236: LD_INT 5
27238: PUSH
27239: LD_INT 3
27241: PUSH
27242: LD_INT 2
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: LIST
27249: ST_TO_ADDR
// if GetClass ( i ) = 17 then
27250: LD_VAR 0 6
27254: PPUSH
27255: CALL_OW 257
27259: PUSH
27260: LD_INT 17
27262: EQUAL
27263: IFFALSE 27284
// points := [ 100 , 50 , 75 ] ;
27265: LD_ADDR_VAR 0 9
27269: PUSH
27270: LD_INT 100
27272: PUSH
27273: LD_INT 50
27275: PUSH
27276: LD_INT 75
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: LIST
27283: ST_TO_ADDR
// if GetClass ( i ) = 15 then
27284: LD_VAR 0 6
27288: PPUSH
27289: CALL_OW 257
27293: PUSH
27294: LD_INT 15
27296: EQUAL
27297: IFFALSE 27318
// points := [ 10 , 5 , 3 ] ;
27299: LD_ADDR_VAR 0 9
27303: PUSH
27304: LD_INT 10
27306: PUSH
27307: LD_INT 5
27309: PUSH
27310: LD_INT 3
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: LIST
27317: ST_TO_ADDR
// if GetClass ( i ) = 14 then
27318: LD_VAR 0 6
27322: PPUSH
27323: CALL_OW 257
27327: PUSH
27328: LD_INT 14
27330: EQUAL
27331: IFFALSE 27352
// points := [ 10 , 0 , 0 ] ;
27333: LD_ADDR_VAR 0 9
27337: PUSH
27338: LD_INT 10
27340: PUSH
27341: LD_INT 0
27343: PUSH
27344: LD_INT 0
27346: PUSH
27347: EMPTY
27348: LIST
27349: LIST
27350: LIST
27351: ST_TO_ADDR
// if GetClass ( i ) = 11 then
27352: LD_VAR 0 6
27356: PPUSH
27357: CALL_OW 257
27361: PUSH
27362: LD_INT 11
27364: EQUAL
27365: IFFALSE 27386
// points := [ 30 , 10 , 5 ] ;
27367: LD_ADDR_VAR 0 9
27371: PUSH
27372: LD_INT 30
27374: PUSH
27375: LD_INT 10
27377: PUSH
27378: LD_INT 5
27380: PUSH
27381: EMPTY
27382: LIST
27383: LIST
27384: LIST
27385: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
27386: LD_VAR 0 1
27390: PPUSH
27391: LD_INT 5
27393: PPUSH
27394: CALL_OW 321
27398: PUSH
27399: LD_INT 2
27401: EQUAL
27402: IFFALSE 27419
// bpoints := bpoints * 1.8 ;
27404: LD_ADDR_VAR 0 10
27408: PUSH
27409: LD_VAR 0 10
27413: PUSH
27414: LD_REAL  1.80000000000000E+0000
27417: MUL
27418: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
27419: LD_VAR 0 6
27423: PPUSH
27424: CALL_OW 257
27428: PUSH
27429: LD_INT 1
27431: PUSH
27432: LD_INT 2
27434: PUSH
27435: LD_INT 3
27437: PUSH
27438: LD_INT 4
27440: PUSH
27441: EMPTY
27442: LIST
27443: LIST
27444: LIST
27445: LIST
27446: IN
27447: PUSH
27448: LD_VAR 0 1
27452: PPUSH
27453: LD_INT 51
27455: PPUSH
27456: CALL_OW 321
27460: PUSH
27461: LD_INT 2
27463: EQUAL
27464: AND
27465: IFFALSE 27482
// bpoints := bpoints * 1.2 ;
27467: LD_ADDR_VAR 0 10
27471: PUSH
27472: LD_VAR 0 10
27476: PUSH
27477: LD_REAL  1.20000000000000E+0000
27480: MUL
27481: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
27482: LD_VAR 0 6
27486: PPUSH
27487: CALL_OW 257
27491: PUSH
27492: LD_INT 5
27494: PUSH
27495: LD_INT 7
27497: PUSH
27498: LD_INT 9
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: LIST
27505: IN
27506: PUSH
27507: LD_VAR 0 1
27511: PPUSH
27512: LD_INT 52
27514: PPUSH
27515: CALL_OW 321
27519: PUSH
27520: LD_INT 2
27522: EQUAL
27523: AND
27524: IFFALSE 27541
// bpoints := bpoints * 1.5 ;
27526: LD_ADDR_VAR 0 10
27530: PUSH
27531: LD_VAR 0 10
27535: PUSH
27536: LD_REAL  1.50000000000000E+0000
27539: MUL
27540: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
27541: LD_VAR 0 1
27545: PPUSH
27546: LD_INT 66
27548: PPUSH
27549: CALL_OW 321
27553: PUSH
27554: LD_INT 2
27556: EQUAL
27557: IFFALSE 27574
// bpoints := bpoints * 1.1 ;
27559: LD_ADDR_VAR 0 10
27563: PUSH
27564: LD_VAR 0 10
27568: PUSH
27569: LD_REAL  1.10000000000000E+0000
27572: MUL
27573: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
27574: LD_ADDR_VAR 0 10
27578: PUSH
27579: LD_VAR 0 10
27583: PUSH
27584: LD_VAR 0 6
27588: PPUSH
27589: LD_INT 1
27591: PPUSH
27592: CALL_OW 259
27596: PUSH
27597: LD_REAL  1.15000000000000E+0000
27600: MUL
27601: MUL
27602: ST_TO_ADDR
// end ; unit_vehicle :
27603: GO 28427
27605: LD_INT 2
27607: DOUBLE
27608: EQUAL
27609: IFTRUE 27613
27611: GO 28415
27613: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
27614: LD_VAR 0 6
27618: PPUSH
27619: CALL_OW 264
27623: PUSH
27624: LD_INT 2
27626: PUSH
27627: LD_INT 42
27629: PUSH
27630: LD_INT 24
27632: PUSH
27633: EMPTY
27634: LIST
27635: LIST
27636: LIST
27637: IN
27638: IFFALSE 27659
// points := [ 25 , 5 , 3 ] ;
27640: LD_ADDR_VAR 0 9
27644: PUSH
27645: LD_INT 25
27647: PUSH
27648: LD_INT 5
27650: PUSH
27651: LD_INT 3
27653: PUSH
27654: EMPTY
27655: LIST
27656: LIST
27657: LIST
27658: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
27659: LD_VAR 0 6
27663: PPUSH
27664: CALL_OW 264
27668: PUSH
27669: LD_INT 4
27671: PUSH
27672: LD_INT 43
27674: PUSH
27675: LD_INT 25
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: LIST
27682: IN
27683: IFFALSE 27704
// points := [ 40 , 15 , 5 ] ;
27685: LD_ADDR_VAR 0 9
27689: PUSH
27690: LD_INT 40
27692: PUSH
27693: LD_INT 15
27695: PUSH
27696: LD_INT 5
27698: PUSH
27699: EMPTY
27700: LIST
27701: LIST
27702: LIST
27703: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
27704: LD_VAR 0 6
27708: PPUSH
27709: CALL_OW 264
27713: PUSH
27714: LD_INT 3
27716: PUSH
27717: LD_INT 23
27719: PUSH
27720: EMPTY
27721: LIST
27722: LIST
27723: IN
27724: IFFALSE 27745
// points := [ 7 , 25 , 8 ] ;
27726: LD_ADDR_VAR 0 9
27730: PUSH
27731: LD_INT 7
27733: PUSH
27734: LD_INT 25
27736: PUSH
27737: LD_INT 8
27739: PUSH
27740: EMPTY
27741: LIST
27742: LIST
27743: LIST
27744: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
27745: LD_VAR 0 6
27749: PPUSH
27750: CALL_OW 264
27754: PUSH
27755: LD_INT 5
27757: PUSH
27758: LD_INT 27
27760: PUSH
27761: LD_INT 44
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: LIST
27768: IN
27769: IFFALSE 27790
// points := [ 14 , 50 , 16 ] ;
27771: LD_ADDR_VAR 0 9
27775: PUSH
27776: LD_INT 14
27778: PUSH
27779: LD_INT 50
27781: PUSH
27782: LD_INT 16
27784: PUSH
27785: EMPTY
27786: LIST
27787: LIST
27788: LIST
27789: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
27790: LD_VAR 0 6
27794: PPUSH
27795: CALL_OW 264
27799: PUSH
27800: LD_INT 6
27802: PUSH
27803: LD_INT 46
27805: PUSH
27806: EMPTY
27807: LIST
27808: LIST
27809: IN
27810: IFFALSE 27831
// points := [ 32 , 120 , 70 ] ;
27812: LD_ADDR_VAR 0 9
27816: PUSH
27817: LD_INT 32
27819: PUSH
27820: LD_INT 120
27822: PUSH
27823: LD_INT 70
27825: PUSH
27826: EMPTY
27827: LIST
27828: LIST
27829: LIST
27830: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
27831: LD_VAR 0 6
27835: PPUSH
27836: CALL_OW 264
27840: PUSH
27841: LD_INT 7
27843: PUSH
27844: LD_INT 28
27846: PUSH
27847: LD_INT 45
27849: PUSH
27850: EMPTY
27851: LIST
27852: LIST
27853: LIST
27854: IN
27855: IFFALSE 27876
// points := [ 35 , 20 , 45 ] ;
27857: LD_ADDR_VAR 0 9
27861: PUSH
27862: LD_INT 35
27864: PUSH
27865: LD_INT 20
27867: PUSH
27868: LD_INT 45
27870: PUSH
27871: EMPTY
27872: LIST
27873: LIST
27874: LIST
27875: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
27876: LD_VAR 0 6
27880: PPUSH
27881: CALL_OW 264
27885: PUSH
27886: LD_INT 47
27888: PUSH
27889: EMPTY
27890: LIST
27891: IN
27892: IFFALSE 27913
// points := [ 67 , 45 , 75 ] ;
27894: LD_ADDR_VAR 0 9
27898: PUSH
27899: LD_INT 67
27901: PUSH
27902: LD_INT 45
27904: PUSH
27905: LD_INT 75
27907: PUSH
27908: EMPTY
27909: LIST
27910: LIST
27911: LIST
27912: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
27913: LD_VAR 0 6
27917: PPUSH
27918: CALL_OW 264
27922: PUSH
27923: LD_INT 26
27925: PUSH
27926: EMPTY
27927: LIST
27928: IN
27929: IFFALSE 27950
// points := [ 120 , 30 , 80 ] ;
27931: LD_ADDR_VAR 0 9
27935: PUSH
27936: LD_INT 120
27938: PUSH
27939: LD_INT 30
27941: PUSH
27942: LD_INT 80
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: LIST
27949: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
27950: LD_VAR 0 6
27954: PPUSH
27955: CALL_OW 264
27959: PUSH
27960: LD_INT 22
27962: PUSH
27963: EMPTY
27964: LIST
27965: IN
27966: IFFALSE 27987
// points := [ 40 , 1 , 1 ] ;
27968: LD_ADDR_VAR 0 9
27972: PUSH
27973: LD_INT 40
27975: PUSH
27976: LD_INT 1
27978: PUSH
27979: LD_INT 1
27981: PUSH
27982: EMPTY
27983: LIST
27984: LIST
27985: LIST
27986: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
27987: LD_VAR 0 6
27991: PPUSH
27992: CALL_OW 264
27996: PUSH
27997: LD_INT 29
27999: PUSH
28000: EMPTY
28001: LIST
28002: IN
28003: IFFALSE 28024
// points := [ 70 , 200 , 400 ] ;
28005: LD_ADDR_VAR 0 9
28009: PUSH
28010: LD_INT 70
28012: PUSH
28013: LD_INT 200
28015: PUSH
28016: LD_INT 400
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: LIST
28023: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28024: LD_VAR 0 6
28028: PPUSH
28029: CALL_OW 264
28033: PUSH
28034: LD_INT 14
28036: PUSH
28037: LD_INT 53
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: IN
28044: IFFALSE 28065
// points := [ 40 , 10 , 20 ] ;
28046: LD_ADDR_VAR 0 9
28050: PUSH
28051: LD_INT 40
28053: PUSH
28054: LD_INT 10
28056: PUSH
28057: LD_INT 20
28059: PUSH
28060: EMPTY
28061: LIST
28062: LIST
28063: LIST
28064: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28065: LD_VAR 0 6
28069: PPUSH
28070: CALL_OW 264
28074: PUSH
28075: LD_INT 9
28077: PUSH
28078: EMPTY
28079: LIST
28080: IN
28081: IFFALSE 28102
// points := [ 5 , 70 , 20 ] ;
28083: LD_ADDR_VAR 0 9
28087: PUSH
28088: LD_INT 5
28090: PUSH
28091: LD_INT 70
28093: PUSH
28094: LD_INT 20
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: LIST
28101: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28102: LD_VAR 0 6
28106: PPUSH
28107: CALL_OW 264
28111: PUSH
28112: LD_INT 10
28114: PUSH
28115: EMPTY
28116: LIST
28117: IN
28118: IFFALSE 28139
// points := [ 35 , 110 , 70 ] ;
28120: LD_ADDR_VAR 0 9
28124: PUSH
28125: LD_INT 35
28127: PUSH
28128: LD_INT 110
28130: PUSH
28131: LD_INT 70
28133: PUSH
28134: EMPTY
28135: LIST
28136: LIST
28137: LIST
28138: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28139: LD_VAR 0 6
28143: PPUSH
28144: CALL_OW 265
28148: PUSH
28149: LD_INT 25
28151: EQUAL
28152: IFFALSE 28173
// points := [ 80 , 65 , 100 ] ;
28154: LD_ADDR_VAR 0 9
28158: PUSH
28159: LD_INT 80
28161: PUSH
28162: LD_INT 65
28164: PUSH
28165: LD_INT 100
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: LIST
28172: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28173: LD_VAR 0 6
28177: PPUSH
28178: CALL_OW 263
28182: PUSH
28183: LD_INT 1
28185: EQUAL
28186: IFFALSE 28221
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28188: LD_ADDR_VAR 0 10
28192: PUSH
28193: LD_VAR 0 10
28197: PUSH
28198: LD_VAR 0 6
28202: PPUSH
28203: CALL_OW 311
28207: PPUSH
28208: LD_INT 3
28210: PPUSH
28211: CALL_OW 259
28215: PUSH
28216: LD_INT 4
28218: MUL
28219: MUL
28220: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28221: LD_VAR 0 6
28225: PPUSH
28226: CALL_OW 263
28230: PUSH
28231: LD_INT 2
28233: EQUAL
28234: IFFALSE 28285
// begin j := IsControledBy ( i ) ;
28236: LD_ADDR_VAR 0 7
28240: PUSH
28241: LD_VAR 0 6
28245: PPUSH
28246: CALL_OW 312
28250: ST_TO_ADDR
// if j then
28251: LD_VAR 0 7
28255: IFFALSE 28285
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
28257: LD_ADDR_VAR 0 10
28261: PUSH
28262: LD_VAR 0 10
28266: PUSH
28267: LD_VAR 0 7
28271: PPUSH
28272: LD_INT 3
28274: PPUSH
28275: CALL_OW 259
28279: PUSH
28280: LD_INT 3
28282: MUL
28283: MUL
28284: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
28285: LD_VAR 0 6
28289: PPUSH
28290: CALL_OW 264
28294: PUSH
28295: LD_INT 5
28297: PUSH
28298: LD_INT 6
28300: PUSH
28301: LD_INT 46
28303: PUSH
28304: LD_INT 44
28306: PUSH
28307: LD_INT 47
28309: PUSH
28310: LD_INT 45
28312: PUSH
28313: LD_INT 28
28315: PUSH
28316: LD_INT 7
28318: PUSH
28319: LD_INT 27
28321: PUSH
28322: LD_INT 29
28324: PUSH
28325: EMPTY
28326: LIST
28327: LIST
28328: LIST
28329: LIST
28330: LIST
28331: LIST
28332: LIST
28333: LIST
28334: LIST
28335: LIST
28336: IN
28337: PUSH
28338: LD_VAR 0 1
28342: PPUSH
28343: LD_INT 52
28345: PPUSH
28346: CALL_OW 321
28350: PUSH
28351: LD_INT 2
28353: EQUAL
28354: AND
28355: IFFALSE 28372
// bpoints := bpoints * 1.2 ;
28357: LD_ADDR_VAR 0 10
28361: PUSH
28362: LD_VAR 0 10
28366: PUSH
28367: LD_REAL  1.20000000000000E+0000
28370: MUL
28371: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
28372: LD_VAR 0 6
28376: PPUSH
28377: CALL_OW 264
28381: PUSH
28382: LD_INT 6
28384: PUSH
28385: LD_INT 46
28387: PUSH
28388: LD_INT 47
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: LIST
28395: IN
28396: IFFALSE 28413
// bpoints := bpoints * 1.2 ;
28398: LD_ADDR_VAR 0 10
28402: PUSH
28403: LD_VAR 0 10
28407: PUSH
28408: LD_REAL  1.20000000000000E+0000
28411: MUL
28412: ST_TO_ADDR
// end ; unit_building :
28413: GO 28427
28415: LD_INT 3
28417: DOUBLE
28418: EQUAL
28419: IFTRUE 28423
28421: GO 28426
28423: POP
// ; end ;
28424: GO 28427
28426: POP
// for j = 1 to 3 do
28427: LD_ADDR_VAR 0 7
28431: PUSH
28432: DOUBLE
28433: LD_INT 1
28435: DEC
28436: ST_TO_ADDR
28437: LD_INT 3
28439: PUSH
28440: FOR_TO
28441: IFFALSE 28494
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
28443: LD_ADDR_VAR 0 5
28447: PUSH
28448: LD_VAR 0 5
28452: PPUSH
28453: LD_VAR 0 7
28457: PPUSH
28458: LD_VAR 0 5
28462: PUSH
28463: LD_VAR 0 7
28467: ARRAY
28468: PUSH
28469: LD_VAR 0 9
28473: PUSH
28474: LD_VAR 0 7
28478: ARRAY
28479: PUSH
28480: LD_VAR 0 10
28484: MUL
28485: PLUS
28486: PPUSH
28487: CALL_OW 1
28491: ST_TO_ADDR
28492: GO 28440
28494: POP
28495: POP
// end ;
28496: GO 26979
28498: POP
28499: POP
// result := Replace ( result , 4 , tmp ) ;
28500: LD_ADDR_VAR 0 5
28504: PUSH
28505: LD_VAR 0 5
28509: PPUSH
28510: LD_INT 4
28512: PPUSH
28513: LD_VAR 0 8
28517: PPUSH
28518: CALL_OW 1
28522: ST_TO_ADDR
// end ;
28523: LD_VAR 0 5
28527: RET
// export function DangerAtRange ( unit , range ) ; begin
28528: LD_INT 0
28530: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
28531: LD_ADDR_VAR 0 3
28535: PUSH
28536: LD_VAR 0 1
28540: PPUSH
28541: CALL_OW 255
28545: PPUSH
28546: LD_VAR 0 1
28550: PPUSH
28551: CALL_OW 250
28555: PPUSH
28556: LD_VAR 0 1
28560: PPUSH
28561: CALL_OW 251
28565: PPUSH
28566: LD_VAR 0 2
28570: PPUSH
28571: CALL 26831 0 4
28575: ST_TO_ADDR
// end ;
28576: LD_VAR 0 3
28580: RET
// export function DangerInArea ( side , area ) ; begin
28581: LD_INT 0
28583: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
28584: LD_ADDR_VAR 0 3
28588: PUSH
28589: LD_VAR 0 2
28593: PPUSH
28594: LD_INT 81
28596: PUSH
28597: LD_VAR 0 1
28601: PUSH
28602: EMPTY
28603: LIST
28604: LIST
28605: PPUSH
28606: CALL_OW 70
28610: ST_TO_ADDR
// end ;
28611: LD_VAR 0 3
28615: RET
// export function IsExtension ( b ) ; begin
28616: LD_INT 0
28618: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
28619: LD_ADDR_VAR 0 2
28623: PUSH
28624: LD_VAR 0 1
28628: PUSH
28629: LD_INT 23
28631: PUSH
28632: LD_INT 20
28634: PUSH
28635: LD_INT 22
28637: PUSH
28638: LD_INT 17
28640: PUSH
28641: LD_INT 24
28643: PUSH
28644: LD_INT 21
28646: PUSH
28647: LD_INT 19
28649: PUSH
28650: LD_INT 16
28652: PUSH
28653: LD_INT 25
28655: PUSH
28656: LD_INT 18
28658: PUSH
28659: EMPTY
28660: LIST
28661: LIST
28662: LIST
28663: LIST
28664: LIST
28665: LIST
28666: LIST
28667: LIST
28668: LIST
28669: LIST
28670: IN
28671: ST_TO_ADDR
// end ;
28672: LD_VAR 0 2
28676: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
28677: LD_INT 0
28679: PPUSH
28680: PPUSH
28681: PPUSH
// result := [ ] ;
28682: LD_ADDR_VAR 0 3
28686: PUSH
28687: EMPTY
28688: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
28689: LD_ADDR_VAR 0 4
28693: PUSH
28694: LD_VAR 0 2
28698: PPUSH
28699: LD_INT 21
28701: PUSH
28702: LD_INT 3
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: PPUSH
28709: CALL_OW 70
28713: ST_TO_ADDR
// if not tmp then
28714: LD_VAR 0 4
28718: NOT
28719: IFFALSE 28723
// exit ;
28721: GO 28781
// for i in tmp do
28723: LD_ADDR_VAR 0 5
28727: PUSH
28728: LD_VAR 0 4
28732: PUSH
28733: FOR_IN
28734: IFFALSE 28769
// if GetBase ( i ) <> base then
28736: LD_VAR 0 5
28740: PPUSH
28741: CALL_OW 274
28745: PUSH
28746: LD_VAR 0 1
28750: NONEQUAL
28751: IFFALSE 28767
// ComLinkToBase ( base , i ) ;
28753: LD_VAR 0 1
28757: PPUSH
28758: LD_VAR 0 5
28762: PPUSH
28763: CALL_OW 169
28767: GO 28733
28769: POP
28770: POP
// result := tmp ;
28771: LD_ADDR_VAR 0 3
28775: PUSH
28776: LD_VAR 0 4
28780: ST_TO_ADDR
// end ;
28781: LD_VAR 0 3
28785: RET
// export function ComComplete ( unit , b ) ; var i ; begin
28786: LD_INT 0
28788: PPUSH
28789: PPUSH
// if BuildingStatus ( b ) = bs_build then
28790: LD_VAR 0 2
28794: PPUSH
28795: CALL_OW 461
28799: PUSH
28800: LD_INT 1
28802: EQUAL
28803: IFFALSE 28863
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
28805: LD_VAR 0 1
28809: PPUSH
28810: LD_STRING h
28812: PUSH
28813: LD_VAR 0 2
28817: PPUSH
28818: CALL_OW 250
28822: PUSH
28823: LD_VAR 0 2
28827: PPUSH
28828: CALL_OW 251
28832: PUSH
28833: LD_VAR 0 2
28837: PUSH
28838: LD_INT 0
28840: PUSH
28841: LD_INT 0
28843: PUSH
28844: LD_INT 0
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: LIST
28851: LIST
28852: LIST
28853: LIST
28854: LIST
28855: PUSH
28856: EMPTY
28857: LIST
28858: PPUSH
28859: CALL_OW 446
// end ;
28863: LD_VAR 0 3
28867: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
28868: LD_INT 0
28870: PPUSH
28871: PPUSH
28872: PPUSH
28873: PPUSH
28874: PPUSH
28875: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
28876: LD_VAR 0 1
28880: NOT
28881: PUSH
28882: LD_VAR 0 1
28886: PPUSH
28887: CALL_OW 263
28891: PUSH
28892: LD_INT 2
28894: EQUAL
28895: NOT
28896: OR
28897: IFFALSE 28901
// exit ;
28899: GO 29217
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
28901: LD_ADDR_VAR 0 6
28905: PUSH
28906: LD_INT 22
28908: PUSH
28909: LD_VAR 0 1
28913: PPUSH
28914: CALL_OW 255
28918: PUSH
28919: EMPTY
28920: LIST
28921: LIST
28922: PUSH
28923: LD_INT 2
28925: PUSH
28926: LD_INT 30
28928: PUSH
28929: LD_INT 36
28931: PUSH
28932: EMPTY
28933: LIST
28934: LIST
28935: PUSH
28936: LD_INT 34
28938: PUSH
28939: LD_INT 31
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: PUSH
28946: EMPTY
28947: LIST
28948: LIST
28949: LIST
28950: PUSH
28951: EMPTY
28952: LIST
28953: LIST
28954: PPUSH
28955: CALL_OW 69
28959: ST_TO_ADDR
// if not tmp then
28960: LD_VAR 0 6
28964: NOT
28965: IFFALSE 28969
// exit ;
28967: GO 29217
// result := [ ] ;
28969: LD_ADDR_VAR 0 2
28973: PUSH
28974: EMPTY
28975: ST_TO_ADDR
// for i in tmp do
28976: LD_ADDR_VAR 0 3
28980: PUSH
28981: LD_VAR 0 6
28985: PUSH
28986: FOR_IN
28987: IFFALSE 29058
// begin t := UnitsInside ( i ) ;
28989: LD_ADDR_VAR 0 4
28993: PUSH
28994: LD_VAR 0 3
28998: PPUSH
28999: CALL_OW 313
29003: ST_TO_ADDR
// if t then
29004: LD_VAR 0 4
29008: IFFALSE 29056
// for j in t do
29010: LD_ADDR_VAR 0 7
29014: PUSH
29015: LD_VAR 0 4
29019: PUSH
29020: FOR_IN
29021: IFFALSE 29054
// result := Insert ( result , result + 1 , j ) ;
29023: LD_ADDR_VAR 0 2
29027: PUSH
29028: LD_VAR 0 2
29032: PPUSH
29033: LD_VAR 0 2
29037: PUSH
29038: LD_INT 1
29040: PLUS
29041: PPUSH
29042: LD_VAR 0 7
29046: PPUSH
29047: CALL_OW 2
29051: ST_TO_ADDR
29052: GO 29020
29054: POP
29055: POP
// end ;
29056: GO 28986
29058: POP
29059: POP
// if not result then
29060: LD_VAR 0 2
29064: NOT
29065: IFFALSE 29069
// exit ;
29067: GO 29217
// mech := result [ 1 ] ;
29069: LD_ADDR_VAR 0 5
29073: PUSH
29074: LD_VAR 0 2
29078: PUSH
29079: LD_INT 1
29081: ARRAY
29082: ST_TO_ADDR
// if result > 1 then
29083: LD_VAR 0 2
29087: PUSH
29088: LD_INT 1
29090: GREATER
29091: IFFALSE 29203
// for i = 2 to result do
29093: LD_ADDR_VAR 0 3
29097: PUSH
29098: DOUBLE
29099: LD_INT 2
29101: DEC
29102: ST_TO_ADDR
29103: LD_VAR 0 2
29107: PUSH
29108: FOR_TO
29109: IFFALSE 29201
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29111: LD_ADDR_VAR 0 4
29115: PUSH
29116: LD_VAR 0 2
29120: PUSH
29121: LD_VAR 0 3
29125: ARRAY
29126: PPUSH
29127: LD_INT 3
29129: PPUSH
29130: CALL_OW 259
29134: PUSH
29135: LD_VAR 0 2
29139: PUSH
29140: LD_VAR 0 3
29144: ARRAY
29145: PPUSH
29146: CALL_OW 432
29150: MINUS
29151: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29152: LD_VAR 0 4
29156: PUSH
29157: LD_VAR 0 5
29161: PPUSH
29162: LD_INT 3
29164: PPUSH
29165: CALL_OW 259
29169: PUSH
29170: LD_VAR 0 5
29174: PPUSH
29175: CALL_OW 432
29179: MINUS
29180: GREATEREQUAL
29181: IFFALSE 29199
// mech := result [ i ] ;
29183: LD_ADDR_VAR 0 5
29187: PUSH
29188: LD_VAR 0 2
29192: PUSH
29193: LD_VAR 0 3
29197: ARRAY
29198: ST_TO_ADDR
// end ;
29199: GO 29108
29201: POP
29202: POP
// ComLinkTo ( vehicle , mech ) ;
29203: LD_VAR 0 1
29207: PPUSH
29208: LD_VAR 0 5
29212: PPUSH
29213: CALL_OW 135
// end ;
29217: LD_VAR 0 2
29221: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
29222: LD_INT 0
29224: PPUSH
29225: PPUSH
29226: PPUSH
29227: PPUSH
29228: PPUSH
29229: PPUSH
29230: PPUSH
29231: PPUSH
29232: PPUSH
29233: PPUSH
29234: PPUSH
29235: PPUSH
29236: PPUSH
// result := [ ] ;
29237: LD_ADDR_VAR 0 7
29241: PUSH
29242: EMPTY
29243: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
29244: LD_VAR 0 1
29248: PPUSH
29249: CALL_OW 266
29253: PUSH
29254: LD_INT 0
29256: PUSH
29257: LD_INT 1
29259: PUSH
29260: EMPTY
29261: LIST
29262: LIST
29263: IN
29264: NOT
29265: IFFALSE 29269
// exit ;
29267: GO 30900
// if name then
29269: LD_VAR 0 3
29273: IFFALSE 29289
// SetBName ( base_dep , name ) ;
29275: LD_VAR 0 1
29279: PPUSH
29280: LD_VAR 0 3
29284: PPUSH
29285: CALL_OW 500
// base := GetBase ( base_dep ) ;
29289: LD_ADDR_VAR 0 15
29293: PUSH
29294: LD_VAR 0 1
29298: PPUSH
29299: CALL_OW 274
29303: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
29304: LD_ADDR_VAR 0 16
29308: PUSH
29309: LD_VAR 0 1
29313: PPUSH
29314: CALL_OW 255
29318: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
29319: LD_ADDR_VAR 0 17
29323: PUSH
29324: LD_VAR 0 1
29328: PPUSH
29329: CALL_OW 248
29333: ST_TO_ADDR
// if sources then
29334: LD_VAR 0 5
29338: IFFALSE 29385
// for i = 1 to 3 do
29340: LD_ADDR_VAR 0 8
29344: PUSH
29345: DOUBLE
29346: LD_INT 1
29348: DEC
29349: ST_TO_ADDR
29350: LD_INT 3
29352: PUSH
29353: FOR_TO
29354: IFFALSE 29383
// AddResourceType ( base , i , sources [ i ] ) ;
29356: LD_VAR 0 15
29360: PPUSH
29361: LD_VAR 0 8
29365: PPUSH
29366: LD_VAR 0 5
29370: PUSH
29371: LD_VAR 0 8
29375: ARRAY
29376: PPUSH
29377: CALL_OW 276
29381: GO 29353
29383: POP
29384: POP
// buildings := GetBaseBuildings ( base , area ) ;
29385: LD_ADDR_VAR 0 18
29389: PUSH
29390: LD_VAR 0 15
29394: PPUSH
29395: LD_VAR 0 2
29399: PPUSH
29400: CALL 28677 0 2
29404: ST_TO_ADDR
// InitHc ;
29405: CALL_OW 19
// InitUc ;
29409: CALL_OW 18
// uc_side := side ;
29413: LD_ADDR_OWVAR 20
29417: PUSH
29418: LD_VAR 0 16
29422: ST_TO_ADDR
// uc_nation := nation ;
29423: LD_ADDR_OWVAR 21
29427: PUSH
29428: LD_VAR 0 17
29432: ST_TO_ADDR
// if buildings then
29433: LD_VAR 0 18
29437: IFFALSE 30759
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
29439: LD_ADDR_VAR 0 19
29443: PUSH
29444: LD_VAR 0 18
29448: PPUSH
29449: LD_INT 2
29451: PUSH
29452: LD_INT 30
29454: PUSH
29455: LD_INT 29
29457: PUSH
29458: EMPTY
29459: LIST
29460: LIST
29461: PUSH
29462: LD_INT 30
29464: PUSH
29465: LD_INT 30
29467: PUSH
29468: EMPTY
29469: LIST
29470: LIST
29471: PUSH
29472: EMPTY
29473: LIST
29474: LIST
29475: LIST
29476: PPUSH
29477: CALL_OW 72
29481: ST_TO_ADDR
// if tmp then
29482: LD_VAR 0 19
29486: IFFALSE 29534
// for i in tmp do
29488: LD_ADDR_VAR 0 8
29492: PUSH
29493: LD_VAR 0 19
29497: PUSH
29498: FOR_IN
29499: IFFALSE 29532
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
29501: LD_VAR 0 8
29505: PPUSH
29506: CALL_OW 250
29510: PPUSH
29511: LD_VAR 0 8
29515: PPUSH
29516: CALL_OW 251
29520: PPUSH
29521: LD_VAR 0 16
29525: PPUSH
29526: CALL_OW 441
29530: GO 29498
29532: POP
29533: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
29534: LD_VAR 0 18
29538: PPUSH
29539: LD_INT 2
29541: PUSH
29542: LD_INT 30
29544: PUSH
29545: LD_INT 32
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: PUSH
29552: LD_INT 30
29554: PUSH
29555: LD_INT 33
29557: PUSH
29558: EMPTY
29559: LIST
29560: LIST
29561: PUSH
29562: EMPTY
29563: LIST
29564: LIST
29565: LIST
29566: PPUSH
29567: CALL_OW 72
29571: IFFALSE 29659
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
29573: LD_ADDR_VAR 0 8
29577: PUSH
29578: LD_VAR 0 18
29582: PPUSH
29583: LD_INT 2
29585: PUSH
29586: LD_INT 30
29588: PUSH
29589: LD_INT 32
29591: PUSH
29592: EMPTY
29593: LIST
29594: LIST
29595: PUSH
29596: LD_INT 30
29598: PUSH
29599: LD_INT 33
29601: PUSH
29602: EMPTY
29603: LIST
29604: LIST
29605: PUSH
29606: EMPTY
29607: LIST
29608: LIST
29609: LIST
29610: PPUSH
29611: CALL_OW 72
29615: PUSH
29616: FOR_IN
29617: IFFALSE 29657
// begin if not GetBWeapon ( i ) then
29619: LD_VAR 0 8
29623: PPUSH
29624: CALL_OW 269
29628: NOT
29629: IFFALSE 29655
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
29631: LD_VAR 0 8
29635: PPUSH
29636: LD_VAR 0 8
29640: PPUSH
29641: LD_VAR 0 2
29645: PPUSH
29646: CALL 30905 0 2
29650: PPUSH
29651: CALL_OW 431
// end ;
29655: GO 29616
29657: POP
29658: POP
// end ; for i = 1 to personel do
29659: LD_ADDR_VAR 0 8
29663: PUSH
29664: DOUBLE
29665: LD_INT 1
29667: DEC
29668: ST_TO_ADDR
29669: LD_VAR 0 6
29673: PUSH
29674: FOR_TO
29675: IFFALSE 30739
// begin if i > 4 then
29677: LD_VAR 0 8
29681: PUSH
29682: LD_INT 4
29684: GREATER
29685: IFFALSE 29689
// break ;
29687: GO 30739
// case i of 1 :
29689: LD_VAR 0 8
29693: PUSH
29694: LD_INT 1
29696: DOUBLE
29697: EQUAL
29698: IFTRUE 29702
29700: GO 29782
29702: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
29703: LD_ADDR_VAR 0 12
29707: PUSH
29708: LD_VAR 0 18
29712: PPUSH
29713: LD_INT 22
29715: PUSH
29716: LD_VAR 0 16
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: PUSH
29725: LD_INT 58
29727: PUSH
29728: EMPTY
29729: LIST
29730: PUSH
29731: LD_INT 2
29733: PUSH
29734: LD_INT 30
29736: PUSH
29737: LD_INT 32
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: PUSH
29744: LD_INT 30
29746: PUSH
29747: LD_INT 4
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: PUSH
29754: LD_INT 30
29756: PUSH
29757: LD_INT 5
29759: PUSH
29760: EMPTY
29761: LIST
29762: LIST
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: LIST
29768: LIST
29769: PUSH
29770: EMPTY
29771: LIST
29772: LIST
29773: LIST
29774: PPUSH
29775: CALL_OW 72
29779: ST_TO_ADDR
29780: GO 30004
29782: LD_INT 2
29784: DOUBLE
29785: EQUAL
29786: IFTRUE 29790
29788: GO 29852
29790: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
29791: LD_ADDR_VAR 0 12
29795: PUSH
29796: LD_VAR 0 18
29800: PPUSH
29801: LD_INT 22
29803: PUSH
29804: LD_VAR 0 16
29808: PUSH
29809: EMPTY
29810: LIST
29811: LIST
29812: PUSH
29813: LD_INT 2
29815: PUSH
29816: LD_INT 30
29818: PUSH
29819: LD_INT 0
29821: PUSH
29822: EMPTY
29823: LIST
29824: LIST
29825: PUSH
29826: LD_INT 30
29828: PUSH
29829: LD_INT 1
29831: PUSH
29832: EMPTY
29833: LIST
29834: LIST
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: LIST
29840: PUSH
29841: EMPTY
29842: LIST
29843: LIST
29844: PPUSH
29845: CALL_OW 72
29849: ST_TO_ADDR
29850: GO 30004
29852: LD_INT 3
29854: DOUBLE
29855: EQUAL
29856: IFTRUE 29860
29858: GO 29922
29860: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
29861: LD_ADDR_VAR 0 12
29865: PUSH
29866: LD_VAR 0 18
29870: PPUSH
29871: LD_INT 22
29873: PUSH
29874: LD_VAR 0 16
29878: PUSH
29879: EMPTY
29880: LIST
29881: LIST
29882: PUSH
29883: LD_INT 2
29885: PUSH
29886: LD_INT 30
29888: PUSH
29889: LD_INT 2
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: PUSH
29896: LD_INT 30
29898: PUSH
29899: LD_INT 3
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: LIST
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: PPUSH
29915: CALL_OW 72
29919: ST_TO_ADDR
29920: GO 30004
29922: LD_INT 4
29924: DOUBLE
29925: EQUAL
29926: IFTRUE 29930
29928: GO 30003
29930: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
29931: LD_ADDR_VAR 0 12
29935: PUSH
29936: LD_VAR 0 18
29940: PPUSH
29941: LD_INT 22
29943: PUSH
29944: LD_VAR 0 16
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: PUSH
29953: LD_INT 2
29955: PUSH
29956: LD_INT 30
29958: PUSH
29959: LD_INT 6
29961: PUSH
29962: EMPTY
29963: LIST
29964: LIST
29965: PUSH
29966: LD_INT 30
29968: PUSH
29969: LD_INT 7
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: PUSH
29976: LD_INT 30
29978: PUSH
29979: LD_INT 8
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: LIST
29990: LIST
29991: PUSH
29992: EMPTY
29993: LIST
29994: LIST
29995: PPUSH
29996: CALL_OW 72
30000: ST_TO_ADDR
30001: GO 30004
30003: POP
// if i = 1 then
30004: LD_VAR 0 8
30008: PUSH
30009: LD_INT 1
30011: EQUAL
30012: IFFALSE 30123
// begin tmp := [ ] ;
30014: LD_ADDR_VAR 0 19
30018: PUSH
30019: EMPTY
30020: ST_TO_ADDR
// for j in f do
30021: LD_ADDR_VAR 0 9
30025: PUSH
30026: LD_VAR 0 12
30030: PUSH
30031: FOR_IN
30032: IFFALSE 30105
// if GetBType ( j ) = b_bunker then
30034: LD_VAR 0 9
30038: PPUSH
30039: CALL_OW 266
30043: PUSH
30044: LD_INT 32
30046: EQUAL
30047: IFFALSE 30074
// tmp := Insert ( tmp , 1 , j ) else
30049: LD_ADDR_VAR 0 19
30053: PUSH
30054: LD_VAR 0 19
30058: PPUSH
30059: LD_INT 1
30061: PPUSH
30062: LD_VAR 0 9
30066: PPUSH
30067: CALL_OW 2
30071: ST_TO_ADDR
30072: GO 30103
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30074: LD_ADDR_VAR 0 19
30078: PUSH
30079: LD_VAR 0 19
30083: PPUSH
30084: LD_VAR 0 19
30088: PUSH
30089: LD_INT 1
30091: PLUS
30092: PPUSH
30093: LD_VAR 0 9
30097: PPUSH
30098: CALL_OW 2
30102: ST_TO_ADDR
30103: GO 30031
30105: POP
30106: POP
// if tmp then
30107: LD_VAR 0 19
30111: IFFALSE 30123
// f := tmp ;
30113: LD_ADDR_VAR 0 12
30117: PUSH
30118: LD_VAR 0 19
30122: ST_TO_ADDR
// end ; x := personel [ i ] ;
30123: LD_ADDR_VAR 0 13
30127: PUSH
30128: LD_VAR 0 6
30132: PUSH
30133: LD_VAR 0 8
30137: ARRAY
30138: ST_TO_ADDR
// if x = - 1 then
30139: LD_VAR 0 13
30143: PUSH
30144: LD_INT 1
30146: NEG
30147: EQUAL
30148: IFFALSE 30357
// begin for j in f do
30150: LD_ADDR_VAR 0 9
30154: PUSH
30155: LD_VAR 0 12
30159: PUSH
30160: FOR_IN
30161: IFFALSE 30353
// repeat InitHc ;
30163: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30167: LD_VAR 0 9
30171: PPUSH
30172: CALL_OW 266
30176: PUSH
30177: LD_INT 5
30179: EQUAL
30180: IFFALSE 30250
// begin if UnitsInside ( j ) < 3 then
30182: LD_VAR 0 9
30186: PPUSH
30187: CALL_OW 313
30191: PUSH
30192: LD_INT 3
30194: LESS
30195: IFFALSE 30231
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30197: LD_INT 0
30199: PPUSH
30200: LD_INT 5
30202: PUSH
30203: LD_INT 8
30205: PUSH
30206: LD_INT 9
30208: PUSH
30209: EMPTY
30210: LIST
30211: LIST
30212: LIST
30213: PUSH
30214: LD_VAR 0 17
30218: ARRAY
30219: PPUSH
30220: LD_VAR 0 4
30224: PPUSH
30225: CALL_OW 380
30229: GO 30248
// PrepareHuman ( false , i , skill ) ;
30231: LD_INT 0
30233: PPUSH
30234: LD_VAR 0 8
30238: PPUSH
30239: LD_VAR 0 4
30243: PPUSH
30244: CALL_OW 380
// end else
30248: GO 30267
// PrepareHuman ( false , i , skill ) ;
30250: LD_INT 0
30252: PPUSH
30253: LD_VAR 0 8
30257: PPUSH
30258: LD_VAR 0 4
30262: PPUSH
30263: CALL_OW 380
// un := CreateHuman ;
30267: LD_ADDR_VAR 0 14
30271: PUSH
30272: CALL_OW 44
30276: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30277: LD_ADDR_VAR 0 7
30281: PUSH
30282: LD_VAR 0 7
30286: PPUSH
30287: LD_INT 1
30289: PPUSH
30290: LD_VAR 0 14
30294: PPUSH
30295: CALL_OW 2
30299: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
30300: LD_VAR 0 14
30304: PPUSH
30305: LD_VAR 0 9
30309: PPUSH
30310: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
30314: LD_VAR 0 9
30318: PPUSH
30319: CALL_OW 313
30323: PUSH
30324: LD_INT 6
30326: EQUAL
30327: PUSH
30328: LD_VAR 0 9
30332: PPUSH
30333: CALL_OW 266
30337: PUSH
30338: LD_INT 32
30340: PUSH
30341: LD_INT 31
30343: PUSH
30344: EMPTY
30345: LIST
30346: LIST
30347: IN
30348: OR
30349: IFFALSE 30163
30351: GO 30160
30353: POP
30354: POP
// end else
30355: GO 30737
// for j = 1 to x do
30357: LD_ADDR_VAR 0 9
30361: PUSH
30362: DOUBLE
30363: LD_INT 1
30365: DEC
30366: ST_TO_ADDR
30367: LD_VAR 0 13
30371: PUSH
30372: FOR_TO
30373: IFFALSE 30735
// begin InitHc ;
30375: CALL_OW 19
// if not f then
30379: LD_VAR 0 12
30383: NOT
30384: IFFALSE 30473
// begin PrepareHuman ( false , i , skill ) ;
30386: LD_INT 0
30388: PPUSH
30389: LD_VAR 0 8
30393: PPUSH
30394: LD_VAR 0 4
30398: PPUSH
30399: CALL_OW 380
// un := CreateHuman ;
30403: LD_ADDR_VAR 0 14
30407: PUSH
30408: CALL_OW 44
30412: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30413: LD_ADDR_VAR 0 7
30417: PUSH
30418: LD_VAR 0 7
30422: PPUSH
30423: LD_INT 1
30425: PPUSH
30426: LD_VAR 0 14
30430: PPUSH
30431: CALL_OW 2
30435: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30436: LD_VAR 0 14
30440: PPUSH
30441: LD_VAR 0 1
30445: PPUSH
30446: CALL_OW 250
30450: PPUSH
30451: LD_VAR 0 1
30455: PPUSH
30456: CALL_OW 251
30460: PPUSH
30461: LD_INT 10
30463: PPUSH
30464: LD_INT 0
30466: PPUSH
30467: CALL_OW 50
// continue ;
30471: GO 30372
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
30473: LD_VAR 0 12
30477: PUSH
30478: LD_INT 1
30480: ARRAY
30481: PPUSH
30482: CALL_OW 313
30486: PUSH
30487: LD_VAR 0 12
30491: PUSH
30492: LD_INT 1
30494: ARRAY
30495: PPUSH
30496: CALL_OW 266
30500: PUSH
30501: LD_INT 32
30503: PUSH
30504: LD_INT 31
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: IN
30511: AND
30512: PUSH
30513: LD_VAR 0 12
30517: PUSH
30518: LD_INT 1
30520: ARRAY
30521: PPUSH
30522: CALL_OW 313
30526: PUSH
30527: LD_INT 6
30529: EQUAL
30530: OR
30531: IFFALSE 30551
// f := Delete ( f , 1 ) ;
30533: LD_ADDR_VAR 0 12
30537: PUSH
30538: LD_VAR 0 12
30542: PPUSH
30543: LD_INT 1
30545: PPUSH
30546: CALL_OW 3
30550: ST_TO_ADDR
// if not f then
30551: LD_VAR 0 12
30555: NOT
30556: IFFALSE 30574
// begin x := x + 2 ;
30558: LD_ADDR_VAR 0 13
30562: PUSH
30563: LD_VAR 0 13
30567: PUSH
30568: LD_INT 2
30570: PLUS
30571: ST_TO_ADDR
// continue ;
30572: GO 30372
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
30574: LD_VAR 0 12
30578: PUSH
30579: LD_INT 1
30581: ARRAY
30582: PPUSH
30583: CALL_OW 266
30587: PUSH
30588: LD_INT 5
30590: EQUAL
30591: IFFALSE 30665
// begin if UnitsInside ( f [ 1 ] ) < 3 then
30593: LD_VAR 0 12
30597: PUSH
30598: LD_INT 1
30600: ARRAY
30601: PPUSH
30602: CALL_OW 313
30606: PUSH
30607: LD_INT 3
30609: LESS
30610: IFFALSE 30646
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30612: LD_INT 0
30614: PPUSH
30615: LD_INT 5
30617: PUSH
30618: LD_INT 8
30620: PUSH
30621: LD_INT 9
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: LIST
30628: PUSH
30629: LD_VAR 0 17
30633: ARRAY
30634: PPUSH
30635: LD_VAR 0 4
30639: PPUSH
30640: CALL_OW 380
30644: GO 30663
// PrepareHuman ( false , i , skill ) ;
30646: LD_INT 0
30648: PPUSH
30649: LD_VAR 0 8
30653: PPUSH
30654: LD_VAR 0 4
30658: PPUSH
30659: CALL_OW 380
// end else
30663: GO 30682
// PrepareHuman ( false , i , skill ) ;
30665: LD_INT 0
30667: PPUSH
30668: LD_VAR 0 8
30672: PPUSH
30673: LD_VAR 0 4
30677: PPUSH
30678: CALL_OW 380
// un := CreateHuman ;
30682: LD_ADDR_VAR 0 14
30686: PUSH
30687: CALL_OW 44
30691: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30692: LD_ADDR_VAR 0 7
30696: PUSH
30697: LD_VAR 0 7
30701: PPUSH
30702: LD_INT 1
30704: PPUSH
30705: LD_VAR 0 14
30709: PPUSH
30710: CALL_OW 2
30714: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
30715: LD_VAR 0 14
30719: PPUSH
30720: LD_VAR 0 12
30724: PUSH
30725: LD_INT 1
30727: ARRAY
30728: PPUSH
30729: CALL_OW 52
// end ;
30733: GO 30372
30735: POP
30736: POP
// end ;
30737: GO 29674
30739: POP
30740: POP
// result := result ^ buildings ;
30741: LD_ADDR_VAR 0 7
30745: PUSH
30746: LD_VAR 0 7
30750: PUSH
30751: LD_VAR 0 18
30755: ADD
30756: ST_TO_ADDR
// end else
30757: GO 30900
// begin for i = 1 to personel do
30759: LD_ADDR_VAR 0 8
30763: PUSH
30764: DOUBLE
30765: LD_INT 1
30767: DEC
30768: ST_TO_ADDR
30769: LD_VAR 0 6
30773: PUSH
30774: FOR_TO
30775: IFFALSE 30898
// begin if i > 4 then
30777: LD_VAR 0 8
30781: PUSH
30782: LD_INT 4
30784: GREATER
30785: IFFALSE 30789
// break ;
30787: GO 30898
// x := personel [ i ] ;
30789: LD_ADDR_VAR 0 13
30793: PUSH
30794: LD_VAR 0 6
30798: PUSH
30799: LD_VAR 0 8
30803: ARRAY
30804: ST_TO_ADDR
// if x = - 1 then
30805: LD_VAR 0 13
30809: PUSH
30810: LD_INT 1
30812: NEG
30813: EQUAL
30814: IFFALSE 30818
// continue ;
30816: GO 30774
// PrepareHuman ( false , i , skill ) ;
30818: LD_INT 0
30820: PPUSH
30821: LD_VAR 0 8
30825: PPUSH
30826: LD_VAR 0 4
30830: PPUSH
30831: CALL_OW 380
// un := CreateHuman ;
30835: LD_ADDR_VAR 0 14
30839: PUSH
30840: CALL_OW 44
30844: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30845: LD_VAR 0 14
30849: PPUSH
30850: LD_VAR 0 1
30854: PPUSH
30855: CALL_OW 250
30859: PPUSH
30860: LD_VAR 0 1
30864: PPUSH
30865: CALL_OW 251
30869: PPUSH
30870: LD_INT 10
30872: PPUSH
30873: LD_INT 0
30875: PPUSH
30876: CALL_OW 50
// result := result ^ un ;
30880: LD_ADDR_VAR 0 7
30884: PUSH
30885: LD_VAR 0 7
30889: PUSH
30890: LD_VAR 0 14
30894: ADD
30895: ST_TO_ADDR
// end ;
30896: GO 30774
30898: POP
30899: POP
// end ; end ;
30900: LD_VAR 0 7
30904: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
30905: LD_INT 0
30907: PPUSH
30908: PPUSH
30909: PPUSH
30910: PPUSH
30911: PPUSH
30912: PPUSH
30913: PPUSH
30914: PPUSH
30915: PPUSH
30916: PPUSH
30917: PPUSH
30918: PPUSH
30919: PPUSH
30920: PPUSH
30921: PPUSH
30922: PPUSH
// result := false ;
30923: LD_ADDR_VAR 0 3
30927: PUSH
30928: LD_INT 0
30930: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
30931: LD_VAR 0 1
30935: NOT
30936: PUSH
30937: LD_VAR 0 1
30941: PPUSH
30942: CALL_OW 266
30946: PUSH
30947: LD_INT 32
30949: PUSH
30950: LD_INT 33
30952: PUSH
30953: EMPTY
30954: LIST
30955: LIST
30956: IN
30957: NOT
30958: OR
30959: IFFALSE 30963
// exit ;
30961: GO 32099
// nat := GetNation ( tower ) ;
30963: LD_ADDR_VAR 0 12
30967: PUSH
30968: LD_VAR 0 1
30972: PPUSH
30973: CALL_OW 248
30977: ST_TO_ADDR
// side := GetSide ( tower ) ;
30978: LD_ADDR_VAR 0 16
30982: PUSH
30983: LD_VAR 0 1
30987: PPUSH
30988: CALL_OW 255
30992: ST_TO_ADDR
// x := GetX ( tower ) ;
30993: LD_ADDR_VAR 0 10
30997: PUSH
30998: LD_VAR 0 1
31002: PPUSH
31003: CALL_OW 250
31007: ST_TO_ADDR
// y := GetY ( tower ) ;
31008: LD_ADDR_VAR 0 11
31012: PUSH
31013: LD_VAR 0 1
31017: PPUSH
31018: CALL_OW 251
31022: ST_TO_ADDR
// if not x or not y then
31023: LD_VAR 0 10
31027: NOT
31028: PUSH
31029: LD_VAR 0 11
31033: NOT
31034: OR
31035: IFFALSE 31039
// exit ;
31037: GO 32099
// weapon := 0 ;
31039: LD_ADDR_VAR 0 18
31043: PUSH
31044: LD_INT 0
31046: ST_TO_ADDR
// fac_list := [ ] ;
31047: LD_ADDR_VAR 0 17
31051: PUSH
31052: EMPTY
31053: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
31054: LD_ADDR_VAR 0 6
31058: PUSH
31059: LD_VAR 0 1
31063: PPUSH
31064: CALL_OW 274
31068: PPUSH
31069: LD_VAR 0 2
31073: PPUSH
31074: CALL 28677 0 2
31078: PPUSH
31079: LD_INT 30
31081: PUSH
31082: LD_INT 3
31084: PUSH
31085: EMPTY
31086: LIST
31087: LIST
31088: PPUSH
31089: CALL_OW 72
31093: ST_TO_ADDR
// if not factories then
31094: LD_VAR 0 6
31098: NOT
31099: IFFALSE 31103
// exit ;
31101: GO 32099
// for i in factories do
31103: LD_ADDR_VAR 0 8
31107: PUSH
31108: LD_VAR 0 6
31112: PUSH
31113: FOR_IN
31114: IFFALSE 31139
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31116: LD_ADDR_VAR 0 17
31120: PUSH
31121: LD_VAR 0 17
31125: PUSH
31126: LD_VAR 0 8
31130: PPUSH
31131: CALL_OW 478
31135: UNION
31136: ST_TO_ADDR
31137: GO 31113
31139: POP
31140: POP
// if not fac_list then
31141: LD_VAR 0 17
31145: NOT
31146: IFFALSE 31150
// exit ;
31148: GO 32099
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31150: LD_ADDR_VAR 0 5
31154: PUSH
31155: LD_INT 4
31157: PUSH
31158: LD_INT 5
31160: PUSH
31161: LD_INT 9
31163: PUSH
31164: LD_INT 10
31166: PUSH
31167: LD_INT 6
31169: PUSH
31170: LD_INT 7
31172: PUSH
31173: LD_INT 11
31175: PUSH
31176: EMPTY
31177: LIST
31178: LIST
31179: LIST
31180: LIST
31181: LIST
31182: LIST
31183: LIST
31184: PUSH
31185: LD_INT 27
31187: PUSH
31188: LD_INT 28
31190: PUSH
31191: LD_INT 26
31193: PUSH
31194: LD_INT 30
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: LIST
31201: LIST
31202: PUSH
31203: LD_INT 43
31205: PUSH
31206: LD_INT 44
31208: PUSH
31209: LD_INT 46
31211: PUSH
31212: LD_INT 45
31214: PUSH
31215: LD_INT 47
31217: PUSH
31218: LD_INT 49
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: LIST
31225: LIST
31226: LIST
31227: LIST
31228: PUSH
31229: EMPTY
31230: LIST
31231: LIST
31232: LIST
31233: PUSH
31234: LD_VAR 0 12
31238: ARRAY
31239: ST_TO_ADDR
// for i in list do
31240: LD_ADDR_VAR 0 8
31244: PUSH
31245: LD_VAR 0 5
31249: PUSH
31250: FOR_IN
31251: IFFALSE 31284
// if not i in fac_list then
31253: LD_VAR 0 8
31257: PUSH
31258: LD_VAR 0 17
31262: IN
31263: NOT
31264: IFFALSE 31282
// list := list diff i ;
31266: LD_ADDR_VAR 0 5
31270: PUSH
31271: LD_VAR 0 5
31275: PUSH
31276: LD_VAR 0 8
31280: DIFF
31281: ST_TO_ADDR
31282: GO 31250
31284: POP
31285: POP
// if not list then
31286: LD_VAR 0 5
31290: NOT
31291: IFFALSE 31295
// exit ;
31293: GO 32099
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
31295: LD_VAR 0 12
31299: PUSH
31300: LD_INT 3
31302: EQUAL
31303: PUSH
31304: LD_INT 49
31306: PUSH
31307: LD_VAR 0 5
31311: IN
31312: AND
31313: PUSH
31314: LD_INT 31
31316: PPUSH
31317: LD_VAR 0 16
31321: PPUSH
31322: CALL_OW 321
31326: PUSH
31327: LD_INT 2
31329: EQUAL
31330: AND
31331: IFFALSE 31391
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
31333: LD_INT 22
31335: PUSH
31336: LD_VAR 0 16
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: PUSH
31345: LD_INT 35
31347: PUSH
31348: LD_INT 49
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: PUSH
31355: LD_INT 91
31357: PUSH
31358: LD_VAR 0 1
31362: PUSH
31363: LD_INT 10
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: LIST
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: LIST
31375: PPUSH
31376: CALL_OW 69
31380: NOT
31381: IFFALSE 31391
// weapon := ru_time_lapser ;
31383: LD_ADDR_VAR 0 18
31387: PUSH
31388: LD_INT 49
31390: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
31391: LD_VAR 0 12
31395: PUSH
31396: LD_INT 1
31398: PUSH
31399: LD_INT 2
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: IN
31406: PUSH
31407: LD_INT 11
31409: PUSH
31410: LD_VAR 0 5
31414: IN
31415: PUSH
31416: LD_INT 30
31418: PUSH
31419: LD_VAR 0 5
31423: IN
31424: OR
31425: AND
31426: PUSH
31427: LD_INT 6
31429: PPUSH
31430: LD_VAR 0 16
31434: PPUSH
31435: CALL_OW 321
31439: PUSH
31440: LD_INT 2
31442: EQUAL
31443: AND
31444: IFFALSE 31609
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
31446: LD_INT 22
31448: PUSH
31449: LD_VAR 0 16
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: PUSH
31458: LD_INT 2
31460: PUSH
31461: LD_INT 35
31463: PUSH
31464: LD_INT 11
31466: PUSH
31467: EMPTY
31468: LIST
31469: LIST
31470: PUSH
31471: LD_INT 35
31473: PUSH
31474: LD_INT 30
31476: PUSH
31477: EMPTY
31478: LIST
31479: LIST
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: LIST
31485: PUSH
31486: LD_INT 91
31488: PUSH
31489: LD_VAR 0 1
31493: PUSH
31494: LD_INT 18
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: LIST
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: LIST
31506: PPUSH
31507: CALL_OW 69
31511: NOT
31512: PUSH
31513: LD_INT 22
31515: PUSH
31516: LD_VAR 0 16
31520: PUSH
31521: EMPTY
31522: LIST
31523: LIST
31524: PUSH
31525: LD_INT 2
31527: PUSH
31528: LD_INT 30
31530: PUSH
31531: LD_INT 32
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: PUSH
31538: LD_INT 30
31540: PUSH
31541: LD_INT 33
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: LIST
31552: PUSH
31553: LD_INT 91
31555: PUSH
31556: LD_VAR 0 1
31560: PUSH
31561: LD_INT 12
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: LIST
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: LIST
31573: PUSH
31574: EMPTY
31575: LIST
31576: PPUSH
31577: CALL_OW 69
31581: PUSH
31582: LD_INT 2
31584: GREATER
31585: AND
31586: IFFALSE 31609
// weapon := [ us_radar , ar_radar ] [ nat ] ;
31588: LD_ADDR_VAR 0 18
31592: PUSH
31593: LD_INT 11
31595: PUSH
31596: LD_INT 30
31598: PUSH
31599: EMPTY
31600: LIST
31601: LIST
31602: PUSH
31603: LD_VAR 0 12
31607: ARRAY
31608: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
31609: LD_VAR 0 18
31613: NOT
31614: PUSH
31615: LD_INT 40
31617: PPUSH
31618: LD_VAR 0 16
31622: PPUSH
31623: CALL_OW 321
31627: PUSH
31628: LD_INT 2
31630: EQUAL
31631: AND
31632: PUSH
31633: LD_INT 7
31635: PUSH
31636: LD_VAR 0 5
31640: IN
31641: PUSH
31642: LD_INT 28
31644: PUSH
31645: LD_VAR 0 5
31649: IN
31650: OR
31651: PUSH
31652: LD_INT 45
31654: PUSH
31655: LD_VAR 0 5
31659: IN
31660: OR
31661: AND
31662: IFFALSE 31916
// begin hex := GetHexInfo ( x , y ) ;
31664: LD_ADDR_VAR 0 4
31668: PUSH
31669: LD_VAR 0 10
31673: PPUSH
31674: LD_VAR 0 11
31678: PPUSH
31679: CALL_OW 546
31683: ST_TO_ADDR
// if hex [ 1 ] then
31684: LD_VAR 0 4
31688: PUSH
31689: LD_INT 1
31691: ARRAY
31692: IFFALSE 31696
// exit ;
31694: GO 32099
// height := hex [ 2 ] ;
31696: LD_ADDR_VAR 0 15
31700: PUSH
31701: LD_VAR 0 4
31705: PUSH
31706: LD_INT 2
31708: ARRAY
31709: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
31710: LD_ADDR_VAR 0 14
31714: PUSH
31715: LD_INT 0
31717: PUSH
31718: LD_INT 2
31720: PUSH
31721: LD_INT 3
31723: PUSH
31724: LD_INT 5
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: LIST
31731: LIST
31732: ST_TO_ADDR
// for i in tmp do
31733: LD_ADDR_VAR 0 8
31737: PUSH
31738: LD_VAR 0 14
31742: PUSH
31743: FOR_IN
31744: IFFALSE 31914
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
31746: LD_ADDR_VAR 0 9
31750: PUSH
31751: LD_VAR 0 10
31755: PPUSH
31756: LD_VAR 0 8
31760: PPUSH
31761: LD_INT 5
31763: PPUSH
31764: CALL_OW 272
31768: PUSH
31769: LD_VAR 0 11
31773: PPUSH
31774: LD_VAR 0 8
31778: PPUSH
31779: LD_INT 5
31781: PPUSH
31782: CALL_OW 273
31786: PUSH
31787: EMPTY
31788: LIST
31789: LIST
31790: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
31791: LD_VAR 0 9
31795: PUSH
31796: LD_INT 1
31798: ARRAY
31799: PPUSH
31800: LD_VAR 0 9
31804: PUSH
31805: LD_INT 2
31807: ARRAY
31808: PPUSH
31809: CALL_OW 488
31813: IFFALSE 31912
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
31815: LD_ADDR_VAR 0 4
31819: PUSH
31820: LD_VAR 0 9
31824: PUSH
31825: LD_INT 1
31827: ARRAY
31828: PPUSH
31829: LD_VAR 0 9
31833: PUSH
31834: LD_INT 2
31836: ARRAY
31837: PPUSH
31838: CALL_OW 546
31842: ST_TO_ADDR
// if hex [ 1 ] then
31843: LD_VAR 0 4
31847: PUSH
31848: LD_INT 1
31850: ARRAY
31851: IFFALSE 31855
// continue ;
31853: GO 31743
// h := hex [ 2 ] ;
31855: LD_ADDR_VAR 0 13
31859: PUSH
31860: LD_VAR 0 4
31864: PUSH
31865: LD_INT 2
31867: ARRAY
31868: ST_TO_ADDR
// if h + 7 < height then
31869: LD_VAR 0 13
31873: PUSH
31874: LD_INT 7
31876: PLUS
31877: PUSH
31878: LD_VAR 0 15
31882: LESS
31883: IFFALSE 31912
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
31885: LD_ADDR_VAR 0 18
31889: PUSH
31890: LD_INT 7
31892: PUSH
31893: LD_INT 28
31895: PUSH
31896: LD_INT 45
31898: PUSH
31899: EMPTY
31900: LIST
31901: LIST
31902: LIST
31903: PUSH
31904: LD_VAR 0 12
31908: ARRAY
31909: ST_TO_ADDR
// break ;
31910: GO 31914
// end ; end ; end ;
31912: GO 31743
31914: POP
31915: POP
// end ; if not weapon then
31916: LD_VAR 0 18
31920: NOT
31921: IFFALSE 31981
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
31923: LD_ADDR_VAR 0 5
31927: PUSH
31928: LD_VAR 0 5
31932: PUSH
31933: LD_INT 11
31935: PUSH
31936: LD_INT 30
31938: PUSH
31939: LD_INT 49
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: LIST
31946: DIFF
31947: ST_TO_ADDR
// if not list then
31948: LD_VAR 0 5
31952: NOT
31953: IFFALSE 31957
// exit ;
31955: GO 32099
// weapon := list [ rand ( 1 , list ) ] ;
31957: LD_ADDR_VAR 0 18
31961: PUSH
31962: LD_VAR 0 5
31966: PUSH
31967: LD_INT 1
31969: PPUSH
31970: LD_VAR 0 5
31974: PPUSH
31975: CALL_OW 12
31979: ARRAY
31980: ST_TO_ADDR
// end ; if weapon then
31981: LD_VAR 0 18
31985: IFFALSE 32099
// begin tmp := CostOfWeapon ( weapon ) ;
31987: LD_ADDR_VAR 0 14
31991: PUSH
31992: LD_VAR 0 18
31996: PPUSH
31997: CALL_OW 451
32001: ST_TO_ADDR
// j := GetBase ( tower ) ;
32002: LD_ADDR_VAR 0 9
32006: PUSH
32007: LD_VAR 0 1
32011: PPUSH
32012: CALL_OW 274
32016: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32017: LD_VAR 0 9
32021: PPUSH
32022: LD_INT 1
32024: PPUSH
32025: CALL_OW 275
32029: PUSH
32030: LD_VAR 0 14
32034: PUSH
32035: LD_INT 1
32037: ARRAY
32038: GREATEREQUAL
32039: PUSH
32040: LD_VAR 0 9
32044: PPUSH
32045: LD_INT 2
32047: PPUSH
32048: CALL_OW 275
32052: PUSH
32053: LD_VAR 0 14
32057: PUSH
32058: LD_INT 2
32060: ARRAY
32061: GREATEREQUAL
32062: AND
32063: PUSH
32064: LD_VAR 0 9
32068: PPUSH
32069: LD_INT 3
32071: PPUSH
32072: CALL_OW 275
32076: PUSH
32077: LD_VAR 0 14
32081: PUSH
32082: LD_INT 3
32084: ARRAY
32085: GREATEREQUAL
32086: AND
32087: IFFALSE 32099
// result := weapon ;
32089: LD_ADDR_VAR 0 3
32093: PUSH
32094: LD_VAR 0 18
32098: ST_TO_ADDR
// end ; end ;
32099: LD_VAR 0 3
32103: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32104: LD_INT 0
32106: PPUSH
32107: PPUSH
// result := true ;
32108: LD_ADDR_VAR 0 3
32112: PUSH
32113: LD_INT 1
32115: ST_TO_ADDR
// if array1 = array2 then
32116: LD_VAR 0 1
32120: PUSH
32121: LD_VAR 0 2
32125: EQUAL
32126: IFFALSE 32186
// begin for i = 1 to array1 do
32128: LD_ADDR_VAR 0 4
32132: PUSH
32133: DOUBLE
32134: LD_INT 1
32136: DEC
32137: ST_TO_ADDR
32138: LD_VAR 0 1
32142: PUSH
32143: FOR_TO
32144: IFFALSE 32182
// if array1 [ i ] <> array2 [ i ] then
32146: LD_VAR 0 1
32150: PUSH
32151: LD_VAR 0 4
32155: ARRAY
32156: PUSH
32157: LD_VAR 0 2
32161: PUSH
32162: LD_VAR 0 4
32166: ARRAY
32167: NONEQUAL
32168: IFFALSE 32180
// begin result := false ;
32170: LD_ADDR_VAR 0 3
32174: PUSH
32175: LD_INT 0
32177: ST_TO_ADDR
// break ;
32178: GO 32182
// end ;
32180: GO 32143
32182: POP
32183: POP
// end else
32184: GO 32194
// result := false ;
32186: LD_ADDR_VAR 0 3
32190: PUSH
32191: LD_INT 0
32193: ST_TO_ADDR
// end ;
32194: LD_VAR 0 3
32198: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32199: LD_INT 0
32201: PPUSH
32202: PPUSH
32203: PPUSH
// pom := GetBase ( fac ) ;
32204: LD_ADDR_VAR 0 5
32208: PUSH
32209: LD_VAR 0 1
32213: PPUSH
32214: CALL_OW 274
32218: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32219: LD_ADDR_VAR 0 4
32223: PUSH
32224: LD_VAR 0 2
32228: PUSH
32229: LD_INT 1
32231: ARRAY
32232: PPUSH
32233: LD_VAR 0 2
32237: PUSH
32238: LD_INT 2
32240: ARRAY
32241: PPUSH
32242: LD_VAR 0 2
32246: PUSH
32247: LD_INT 3
32249: ARRAY
32250: PPUSH
32251: LD_VAR 0 2
32255: PUSH
32256: LD_INT 4
32258: ARRAY
32259: PPUSH
32260: CALL_OW 449
32264: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32265: LD_ADDR_VAR 0 3
32269: PUSH
32270: LD_VAR 0 5
32274: PPUSH
32275: LD_INT 1
32277: PPUSH
32278: CALL_OW 275
32282: PUSH
32283: LD_VAR 0 4
32287: PUSH
32288: LD_INT 1
32290: ARRAY
32291: GREATEREQUAL
32292: PUSH
32293: LD_VAR 0 5
32297: PPUSH
32298: LD_INT 2
32300: PPUSH
32301: CALL_OW 275
32305: PUSH
32306: LD_VAR 0 4
32310: PUSH
32311: LD_INT 2
32313: ARRAY
32314: GREATEREQUAL
32315: AND
32316: PUSH
32317: LD_VAR 0 5
32321: PPUSH
32322: LD_INT 3
32324: PPUSH
32325: CALL_OW 275
32329: PUSH
32330: LD_VAR 0 4
32334: PUSH
32335: LD_INT 3
32337: ARRAY
32338: GREATEREQUAL
32339: AND
32340: ST_TO_ADDR
// end ;
32341: LD_VAR 0 3
32345: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
32346: LD_INT 0
32348: PPUSH
32349: PPUSH
32350: PPUSH
32351: PPUSH
// pom := GetBase ( building ) ;
32352: LD_ADDR_VAR 0 3
32356: PUSH
32357: LD_VAR 0 1
32361: PPUSH
32362: CALL_OW 274
32366: ST_TO_ADDR
// if not pom then
32367: LD_VAR 0 3
32371: NOT
32372: IFFALSE 32376
// exit ;
32374: GO 32546
// btype := GetBType ( building ) ;
32376: LD_ADDR_VAR 0 5
32380: PUSH
32381: LD_VAR 0 1
32385: PPUSH
32386: CALL_OW 266
32390: ST_TO_ADDR
// if btype = b_armoury then
32391: LD_VAR 0 5
32395: PUSH
32396: LD_INT 4
32398: EQUAL
32399: IFFALSE 32409
// btype := b_barracks ;
32401: LD_ADDR_VAR 0 5
32405: PUSH
32406: LD_INT 5
32408: ST_TO_ADDR
// if btype = b_depot then
32409: LD_VAR 0 5
32413: PUSH
32414: LD_INT 0
32416: EQUAL
32417: IFFALSE 32427
// btype := b_warehouse ;
32419: LD_ADDR_VAR 0 5
32423: PUSH
32424: LD_INT 1
32426: ST_TO_ADDR
// if btype = b_workshop then
32427: LD_VAR 0 5
32431: PUSH
32432: LD_INT 2
32434: EQUAL
32435: IFFALSE 32445
// btype := b_factory ;
32437: LD_ADDR_VAR 0 5
32441: PUSH
32442: LD_INT 3
32444: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32445: LD_ADDR_VAR 0 4
32449: PUSH
32450: LD_VAR 0 5
32454: PPUSH
32455: LD_VAR 0 1
32459: PPUSH
32460: CALL_OW 248
32464: PPUSH
32465: CALL_OW 450
32469: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32470: LD_ADDR_VAR 0 2
32474: PUSH
32475: LD_VAR 0 3
32479: PPUSH
32480: LD_INT 1
32482: PPUSH
32483: CALL_OW 275
32487: PUSH
32488: LD_VAR 0 4
32492: PUSH
32493: LD_INT 1
32495: ARRAY
32496: GREATEREQUAL
32497: PUSH
32498: LD_VAR 0 3
32502: PPUSH
32503: LD_INT 2
32505: PPUSH
32506: CALL_OW 275
32510: PUSH
32511: LD_VAR 0 4
32515: PUSH
32516: LD_INT 2
32518: ARRAY
32519: GREATEREQUAL
32520: AND
32521: PUSH
32522: LD_VAR 0 3
32526: PPUSH
32527: LD_INT 3
32529: PPUSH
32530: CALL_OW 275
32534: PUSH
32535: LD_VAR 0 4
32539: PUSH
32540: LD_INT 3
32542: ARRAY
32543: GREATEREQUAL
32544: AND
32545: ST_TO_ADDR
// end ;
32546: LD_VAR 0 2
32550: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
32551: LD_INT 0
32553: PPUSH
32554: PPUSH
32555: PPUSH
// pom := GetBase ( building ) ;
32556: LD_ADDR_VAR 0 4
32560: PUSH
32561: LD_VAR 0 1
32565: PPUSH
32566: CALL_OW 274
32570: ST_TO_ADDR
// if not pom then
32571: LD_VAR 0 4
32575: NOT
32576: IFFALSE 32580
// exit ;
32578: GO 32681
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32580: LD_ADDR_VAR 0 5
32584: PUSH
32585: LD_VAR 0 2
32589: PPUSH
32590: LD_VAR 0 1
32594: PPUSH
32595: CALL_OW 248
32599: PPUSH
32600: CALL_OW 450
32604: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32605: LD_ADDR_VAR 0 3
32609: PUSH
32610: LD_VAR 0 4
32614: PPUSH
32615: LD_INT 1
32617: PPUSH
32618: CALL_OW 275
32622: PUSH
32623: LD_VAR 0 5
32627: PUSH
32628: LD_INT 1
32630: ARRAY
32631: GREATEREQUAL
32632: PUSH
32633: LD_VAR 0 4
32637: PPUSH
32638: LD_INT 2
32640: PPUSH
32641: CALL_OW 275
32645: PUSH
32646: LD_VAR 0 5
32650: PUSH
32651: LD_INT 2
32653: ARRAY
32654: GREATEREQUAL
32655: AND
32656: PUSH
32657: LD_VAR 0 4
32661: PPUSH
32662: LD_INT 3
32664: PPUSH
32665: CALL_OW 275
32669: PUSH
32670: LD_VAR 0 5
32674: PUSH
32675: LD_INT 3
32677: ARRAY
32678: GREATEREQUAL
32679: AND
32680: ST_TO_ADDR
// end ;
32681: LD_VAR 0 3
32685: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
32686: LD_INT 0
32688: PPUSH
32689: PPUSH
32690: PPUSH
32691: PPUSH
32692: PPUSH
32693: PPUSH
32694: PPUSH
32695: PPUSH
32696: PPUSH
32697: PPUSH
// result := false ;
32698: LD_ADDR_VAR 0 6
32702: PUSH
32703: LD_INT 0
32705: ST_TO_ADDR
// if not base or not btype or not x or not y then
32706: LD_VAR 0 1
32710: NOT
32711: PUSH
32712: LD_VAR 0 2
32716: NOT
32717: OR
32718: PUSH
32719: LD_VAR 0 3
32723: NOT
32724: OR
32725: PUSH
32726: LD_VAR 0 4
32730: NOT
32731: OR
32732: IFFALSE 32736
// exit ;
32734: GO 33345
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
32736: LD_ADDR_VAR 0 12
32740: PUSH
32741: LD_VAR 0 2
32745: PPUSH
32746: LD_VAR 0 3
32750: PPUSH
32751: LD_VAR 0 4
32755: PPUSH
32756: LD_VAR 0 5
32760: PPUSH
32761: LD_VAR 0 1
32765: PUSH
32766: LD_INT 1
32768: ARRAY
32769: PPUSH
32770: CALL_OW 248
32774: PPUSH
32775: LD_INT 0
32777: PPUSH
32778: CALL 34182 0 6
32782: ST_TO_ADDR
// if not hexes then
32783: LD_VAR 0 12
32787: NOT
32788: IFFALSE 32792
// exit ;
32790: GO 33345
// for i = 1 to hexes do
32792: LD_ADDR_VAR 0 7
32796: PUSH
32797: DOUBLE
32798: LD_INT 1
32800: DEC
32801: ST_TO_ADDR
32802: LD_VAR 0 12
32806: PUSH
32807: FOR_TO
32808: IFFALSE 33343
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32810: LD_ADDR_VAR 0 11
32814: PUSH
32815: LD_VAR 0 12
32819: PUSH
32820: LD_VAR 0 7
32824: ARRAY
32825: PUSH
32826: LD_INT 1
32828: ARRAY
32829: PPUSH
32830: LD_VAR 0 12
32834: PUSH
32835: LD_VAR 0 7
32839: ARRAY
32840: PUSH
32841: LD_INT 2
32843: ARRAY
32844: PPUSH
32845: CALL_OW 428
32849: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
32850: LD_VAR 0 12
32854: PUSH
32855: LD_VAR 0 7
32859: ARRAY
32860: PUSH
32861: LD_INT 1
32863: ARRAY
32864: PPUSH
32865: LD_VAR 0 12
32869: PUSH
32870: LD_VAR 0 7
32874: ARRAY
32875: PUSH
32876: LD_INT 2
32878: ARRAY
32879: PPUSH
32880: CALL_OW 351
32884: PUSH
32885: LD_VAR 0 12
32889: PUSH
32890: LD_VAR 0 7
32894: ARRAY
32895: PUSH
32896: LD_INT 1
32898: ARRAY
32899: PPUSH
32900: LD_VAR 0 12
32904: PUSH
32905: LD_VAR 0 7
32909: ARRAY
32910: PUSH
32911: LD_INT 2
32913: ARRAY
32914: PPUSH
32915: CALL_OW 488
32919: NOT
32920: OR
32921: PUSH
32922: LD_VAR 0 11
32926: PPUSH
32927: CALL_OW 247
32931: PUSH
32932: LD_INT 3
32934: EQUAL
32935: OR
32936: IFFALSE 32942
// exit ;
32938: POP
32939: POP
32940: GO 33345
// if not tmp or not tmp in base then
32942: LD_VAR 0 11
32946: NOT
32947: PUSH
32948: LD_VAR 0 11
32952: PUSH
32953: LD_VAR 0 1
32957: IN
32958: NOT
32959: OR
32960: IFFALSE 32964
// continue ;
32962: GO 32807
// result := true ;
32964: LD_ADDR_VAR 0 6
32968: PUSH
32969: LD_INT 1
32971: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32972: LD_ADDR_VAR 0 15
32976: PUSH
32977: LD_VAR 0 1
32981: PPUSH
32982: LD_INT 22
32984: PUSH
32985: LD_VAR 0 11
32989: PPUSH
32990: CALL_OW 255
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: PUSH
32999: LD_INT 2
33001: PUSH
33002: LD_INT 30
33004: PUSH
33005: LD_INT 0
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: PUSH
33012: LD_INT 30
33014: PUSH
33015: LD_INT 1
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: PUSH
33022: EMPTY
33023: LIST
33024: LIST
33025: LIST
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: PPUSH
33031: CALL_OW 72
33035: ST_TO_ADDR
// if dep then
33036: LD_VAR 0 15
33040: IFFALSE 33176
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33042: LD_ADDR_VAR 0 14
33046: PUSH
33047: LD_VAR 0 15
33051: PUSH
33052: LD_INT 1
33054: ARRAY
33055: PPUSH
33056: CALL_OW 250
33060: PPUSH
33061: LD_VAR 0 15
33065: PUSH
33066: LD_INT 1
33068: ARRAY
33069: PPUSH
33070: CALL_OW 254
33074: PPUSH
33075: LD_INT 5
33077: PPUSH
33078: CALL_OW 272
33082: PUSH
33083: LD_VAR 0 15
33087: PUSH
33088: LD_INT 1
33090: ARRAY
33091: PPUSH
33092: CALL_OW 251
33096: PPUSH
33097: LD_VAR 0 15
33101: PUSH
33102: LD_INT 1
33104: ARRAY
33105: PPUSH
33106: CALL_OW 254
33110: PPUSH
33111: LD_INT 5
33113: PPUSH
33114: CALL_OW 273
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33123: LD_VAR 0 14
33127: PUSH
33128: LD_INT 1
33130: ARRAY
33131: PPUSH
33132: LD_VAR 0 14
33136: PUSH
33137: LD_INT 2
33139: ARRAY
33140: PPUSH
33141: CALL_OW 488
33145: IFFALSE 33176
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33147: LD_VAR 0 11
33151: PPUSH
33152: LD_VAR 0 14
33156: PUSH
33157: LD_INT 1
33159: ARRAY
33160: PPUSH
33161: LD_VAR 0 14
33165: PUSH
33166: LD_INT 2
33168: ARRAY
33169: PPUSH
33170: CALL_OW 111
// continue ;
33174: GO 32807
// end ; end ; r := GetDir ( tmp ) ;
33176: LD_ADDR_VAR 0 13
33180: PUSH
33181: LD_VAR 0 11
33185: PPUSH
33186: CALL_OW 254
33190: ST_TO_ADDR
// if r = 5 then
33191: LD_VAR 0 13
33195: PUSH
33196: LD_INT 5
33198: EQUAL
33199: IFFALSE 33209
// r := 0 ;
33201: LD_ADDR_VAR 0 13
33205: PUSH
33206: LD_INT 0
33208: ST_TO_ADDR
// for j = r to 5 do
33209: LD_ADDR_VAR 0 8
33213: PUSH
33214: DOUBLE
33215: LD_VAR 0 13
33219: DEC
33220: ST_TO_ADDR
33221: LD_INT 5
33223: PUSH
33224: FOR_TO
33225: IFFALSE 33339
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
33227: LD_ADDR_VAR 0 9
33231: PUSH
33232: LD_VAR 0 11
33236: PPUSH
33237: CALL_OW 250
33241: PPUSH
33242: LD_VAR 0 8
33246: PPUSH
33247: LD_INT 2
33249: PPUSH
33250: CALL_OW 272
33254: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
33255: LD_ADDR_VAR 0 10
33259: PUSH
33260: LD_VAR 0 11
33264: PPUSH
33265: CALL_OW 251
33269: PPUSH
33270: LD_VAR 0 8
33274: PPUSH
33275: LD_INT 2
33277: PPUSH
33278: CALL_OW 273
33282: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
33283: LD_VAR 0 9
33287: PPUSH
33288: LD_VAR 0 10
33292: PPUSH
33293: CALL_OW 488
33297: PUSH
33298: LD_VAR 0 9
33302: PPUSH
33303: LD_VAR 0 10
33307: PPUSH
33308: CALL_OW 428
33312: NOT
33313: AND
33314: IFFALSE 33337
// begin ComMoveXY ( tmp , _x , _y ) ;
33316: LD_VAR 0 11
33320: PPUSH
33321: LD_VAR 0 9
33325: PPUSH
33326: LD_VAR 0 10
33330: PPUSH
33331: CALL_OW 111
// break ;
33335: GO 33339
// end ; end ;
33337: GO 33224
33339: POP
33340: POP
// end ;
33341: GO 32807
33343: POP
33344: POP
// end ;
33345: LD_VAR 0 6
33349: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
33350: LD_INT 0
33352: PPUSH
33353: PPUSH
33354: PPUSH
33355: PPUSH
33356: PPUSH
33357: PPUSH
33358: PPUSH
33359: PPUSH
33360: PPUSH
33361: PPUSH
// result := false ;
33362: LD_ADDR_VAR 0 6
33366: PUSH
33367: LD_INT 0
33369: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
33370: LD_VAR 0 1
33374: NOT
33375: PUSH
33376: LD_VAR 0 1
33380: PPUSH
33381: CALL_OW 266
33385: PUSH
33386: LD_INT 0
33388: PUSH
33389: LD_INT 1
33391: PUSH
33392: EMPTY
33393: LIST
33394: LIST
33395: IN
33396: NOT
33397: OR
33398: PUSH
33399: LD_VAR 0 2
33403: NOT
33404: OR
33405: PUSH
33406: LD_VAR 0 5
33410: PUSH
33411: LD_INT 0
33413: PUSH
33414: LD_INT 1
33416: PUSH
33417: LD_INT 2
33419: PUSH
33420: LD_INT 3
33422: PUSH
33423: LD_INT 4
33425: PUSH
33426: LD_INT 5
33428: PUSH
33429: EMPTY
33430: LIST
33431: LIST
33432: LIST
33433: LIST
33434: LIST
33435: LIST
33436: IN
33437: NOT
33438: OR
33439: PUSH
33440: LD_VAR 0 3
33444: PPUSH
33445: LD_VAR 0 4
33449: PPUSH
33450: CALL_OW 488
33454: NOT
33455: OR
33456: IFFALSE 33460
// exit ;
33458: GO 34177
// pom := GetBase ( depot ) ;
33460: LD_ADDR_VAR 0 10
33464: PUSH
33465: LD_VAR 0 1
33469: PPUSH
33470: CALL_OW 274
33474: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
33475: LD_ADDR_VAR 0 11
33479: PUSH
33480: LD_VAR 0 2
33484: PPUSH
33485: LD_VAR 0 1
33489: PPUSH
33490: CALL_OW 248
33494: PPUSH
33495: CALL_OW 450
33499: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
33500: LD_VAR 0 10
33504: PPUSH
33505: LD_INT 1
33507: PPUSH
33508: CALL_OW 275
33512: PUSH
33513: LD_VAR 0 11
33517: PUSH
33518: LD_INT 1
33520: ARRAY
33521: GREATEREQUAL
33522: PUSH
33523: LD_VAR 0 10
33527: PPUSH
33528: LD_INT 2
33530: PPUSH
33531: CALL_OW 275
33535: PUSH
33536: LD_VAR 0 11
33540: PUSH
33541: LD_INT 2
33543: ARRAY
33544: GREATEREQUAL
33545: AND
33546: PUSH
33547: LD_VAR 0 10
33551: PPUSH
33552: LD_INT 3
33554: PPUSH
33555: CALL_OW 275
33559: PUSH
33560: LD_VAR 0 11
33564: PUSH
33565: LD_INT 3
33567: ARRAY
33568: GREATEREQUAL
33569: AND
33570: NOT
33571: IFFALSE 33575
// exit ;
33573: GO 34177
// if GetBType ( depot ) = b_depot then
33575: LD_VAR 0 1
33579: PPUSH
33580: CALL_OW 266
33584: PUSH
33585: LD_INT 0
33587: EQUAL
33588: IFFALSE 33600
// dist := 28 else
33590: LD_ADDR_VAR 0 14
33594: PUSH
33595: LD_INT 28
33597: ST_TO_ADDR
33598: GO 33608
// dist := 36 ;
33600: LD_ADDR_VAR 0 14
33604: PUSH
33605: LD_INT 36
33607: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
33608: LD_VAR 0 1
33612: PPUSH
33613: LD_VAR 0 3
33617: PPUSH
33618: LD_VAR 0 4
33622: PPUSH
33623: CALL_OW 297
33627: PUSH
33628: LD_VAR 0 14
33632: GREATER
33633: IFFALSE 33637
// exit ;
33635: GO 34177
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
33637: LD_ADDR_VAR 0 12
33641: PUSH
33642: LD_VAR 0 2
33646: PPUSH
33647: LD_VAR 0 3
33651: PPUSH
33652: LD_VAR 0 4
33656: PPUSH
33657: LD_VAR 0 5
33661: PPUSH
33662: LD_VAR 0 1
33666: PPUSH
33667: CALL_OW 248
33671: PPUSH
33672: LD_INT 0
33674: PPUSH
33675: CALL 34182 0 6
33679: ST_TO_ADDR
// if not hexes then
33680: LD_VAR 0 12
33684: NOT
33685: IFFALSE 33689
// exit ;
33687: GO 34177
// hex := GetHexInfo ( x , y ) ;
33689: LD_ADDR_VAR 0 15
33693: PUSH
33694: LD_VAR 0 3
33698: PPUSH
33699: LD_VAR 0 4
33703: PPUSH
33704: CALL_OW 546
33708: ST_TO_ADDR
// if hex [ 1 ] then
33709: LD_VAR 0 15
33713: PUSH
33714: LD_INT 1
33716: ARRAY
33717: IFFALSE 33721
// exit ;
33719: GO 34177
// height := hex [ 2 ] ;
33721: LD_ADDR_VAR 0 13
33725: PUSH
33726: LD_VAR 0 15
33730: PUSH
33731: LD_INT 2
33733: ARRAY
33734: ST_TO_ADDR
// for i = 1 to hexes do
33735: LD_ADDR_VAR 0 7
33739: PUSH
33740: DOUBLE
33741: LD_INT 1
33743: DEC
33744: ST_TO_ADDR
33745: LD_VAR 0 12
33749: PUSH
33750: FOR_TO
33751: IFFALSE 34081
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
33753: LD_VAR 0 12
33757: PUSH
33758: LD_VAR 0 7
33762: ARRAY
33763: PUSH
33764: LD_INT 1
33766: ARRAY
33767: PPUSH
33768: LD_VAR 0 12
33772: PUSH
33773: LD_VAR 0 7
33777: ARRAY
33778: PUSH
33779: LD_INT 2
33781: ARRAY
33782: PPUSH
33783: CALL_OW 488
33787: NOT
33788: PUSH
33789: LD_VAR 0 12
33793: PUSH
33794: LD_VAR 0 7
33798: ARRAY
33799: PUSH
33800: LD_INT 1
33802: ARRAY
33803: PPUSH
33804: LD_VAR 0 12
33808: PUSH
33809: LD_VAR 0 7
33813: ARRAY
33814: PUSH
33815: LD_INT 2
33817: ARRAY
33818: PPUSH
33819: CALL_OW 428
33823: PUSH
33824: LD_INT 0
33826: GREATER
33827: OR
33828: PUSH
33829: LD_VAR 0 12
33833: PUSH
33834: LD_VAR 0 7
33838: ARRAY
33839: PUSH
33840: LD_INT 1
33842: ARRAY
33843: PPUSH
33844: LD_VAR 0 12
33848: PUSH
33849: LD_VAR 0 7
33853: ARRAY
33854: PUSH
33855: LD_INT 2
33857: ARRAY
33858: PPUSH
33859: CALL_OW 351
33863: OR
33864: IFFALSE 33870
// exit ;
33866: POP
33867: POP
33868: GO 34177
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33870: LD_ADDR_VAR 0 8
33874: PUSH
33875: LD_VAR 0 12
33879: PUSH
33880: LD_VAR 0 7
33884: ARRAY
33885: PUSH
33886: LD_INT 1
33888: ARRAY
33889: PPUSH
33890: LD_VAR 0 12
33894: PUSH
33895: LD_VAR 0 7
33899: ARRAY
33900: PUSH
33901: LD_INT 2
33903: ARRAY
33904: PPUSH
33905: CALL_OW 546
33909: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
33910: LD_VAR 0 8
33914: PUSH
33915: LD_INT 1
33917: ARRAY
33918: PUSH
33919: LD_VAR 0 8
33923: PUSH
33924: LD_INT 2
33926: ARRAY
33927: PUSH
33928: LD_VAR 0 13
33932: PUSH
33933: LD_INT 2
33935: PLUS
33936: GREATER
33937: OR
33938: PUSH
33939: LD_VAR 0 8
33943: PUSH
33944: LD_INT 2
33946: ARRAY
33947: PUSH
33948: LD_VAR 0 13
33952: PUSH
33953: LD_INT 2
33955: MINUS
33956: LESS
33957: OR
33958: PUSH
33959: LD_VAR 0 8
33963: PUSH
33964: LD_INT 3
33966: ARRAY
33967: PUSH
33968: LD_INT 0
33970: PUSH
33971: LD_INT 8
33973: PUSH
33974: LD_INT 9
33976: PUSH
33977: LD_INT 10
33979: PUSH
33980: LD_INT 11
33982: PUSH
33983: LD_INT 12
33985: PUSH
33986: LD_INT 13
33988: PUSH
33989: LD_INT 16
33991: PUSH
33992: LD_INT 17
33994: PUSH
33995: LD_INT 18
33997: PUSH
33998: LD_INT 19
34000: PUSH
34001: LD_INT 20
34003: PUSH
34004: LD_INT 21
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: LIST
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: IN
34022: NOT
34023: OR
34024: PUSH
34025: LD_VAR 0 8
34029: PUSH
34030: LD_INT 5
34032: ARRAY
34033: NOT
34034: OR
34035: PUSH
34036: LD_VAR 0 8
34040: PUSH
34041: LD_INT 6
34043: ARRAY
34044: PUSH
34045: LD_INT 1
34047: PUSH
34048: LD_INT 2
34050: PUSH
34051: LD_INT 7
34053: PUSH
34054: LD_INT 9
34056: PUSH
34057: LD_INT 10
34059: PUSH
34060: LD_INT 11
34062: PUSH
34063: EMPTY
34064: LIST
34065: LIST
34066: LIST
34067: LIST
34068: LIST
34069: LIST
34070: IN
34071: NOT
34072: OR
34073: IFFALSE 34079
// exit ;
34075: POP
34076: POP
34077: GO 34177
// end ;
34079: GO 33750
34081: POP
34082: POP
// side := GetSide ( depot ) ;
34083: LD_ADDR_VAR 0 9
34087: PUSH
34088: LD_VAR 0 1
34092: PPUSH
34093: CALL_OW 255
34097: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
34098: LD_VAR 0 9
34102: PPUSH
34103: LD_VAR 0 3
34107: PPUSH
34108: LD_VAR 0 4
34112: PPUSH
34113: LD_INT 20
34115: PPUSH
34116: CALL 26831 0 4
34120: PUSH
34121: LD_INT 4
34123: ARRAY
34124: IFFALSE 34128
// exit ;
34126: GO 34177
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
34128: LD_VAR 0 2
34132: PUSH
34133: LD_INT 29
34135: PUSH
34136: LD_INT 30
34138: PUSH
34139: EMPTY
34140: LIST
34141: LIST
34142: IN
34143: PUSH
34144: LD_VAR 0 3
34148: PPUSH
34149: LD_VAR 0 4
34153: PPUSH
34154: LD_VAR 0 9
34158: PPUSH
34159: CALL_OW 440
34163: NOT
34164: AND
34165: IFFALSE 34169
// exit ;
34167: GO 34177
// result := true ;
34169: LD_ADDR_VAR 0 6
34173: PUSH
34174: LD_INT 1
34176: ST_TO_ADDR
// end ;
34177: LD_VAR 0 6
34181: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
34182: LD_INT 0
34184: PPUSH
34185: PPUSH
34186: PPUSH
34187: PPUSH
34188: PPUSH
34189: PPUSH
34190: PPUSH
34191: PPUSH
34192: PPUSH
34193: PPUSH
34194: PPUSH
34195: PPUSH
34196: PPUSH
34197: PPUSH
34198: PPUSH
34199: PPUSH
34200: PPUSH
34201: PPUSH
34202: PPUSH
34203: PPUSH
34204: PPUSH
34205: PPUSH
34206: PPUSH
34207: PPUSH
34208: PPUSH
34209: PPUSH
34210: PPUSH
34211: PPUSH
34212: PPUSH
34213: PPUSH
34214: PPUSH
34215: PPUSH
34216: PPUSH
34217: PPUSH
34218: PPUSH
34219: PPUSH
34220: PPUSH
34221: PPUSH
34222: PPUSH
34223: PPUSH
34224: PPUSH
34225: PPUSH
34226: PPUSH
34227: PPUSH
34228: PPUSH
34229: PPUSH
34230: PPUSH
34231: PPUSH
34232: PPUSH
34233: PPUSH
34234: PPUSH
34235: PPUSH
34236: PPUSH
34237: PPUSH
34238: PPUSH
34239: PPUSH
34240: PPUSH
34241: PPUSH
// result = [ ] ;
34242: LD_ADDR_VAR 0 7
34246: PUSH
34247: EMPTY
34248: ST_TO_ADDR
// temp_list = [ ] ;
34249: LD_ADDR_VAR 0 9
34253: PUSH
34254: EMPTY
34255: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
34256: LD_VAR 0 4
34260: PUSH
34261: LD_INT 0
34263: PUSH
34264: LD_INT 1
34266: PUSH
34267: LD_INT 2
34269: PUSH
34270: LD_INT 3
34272: PUSH
34273: LD_INT 4
34275: PUSH
34276: LD_INT 5
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: LIST
34283: LIST
34284: LIST
34285: LIST
34286: IN
34287: NOT
34288: PUSH
34289: LD_VAR 0 1
34293: PUSH
34294: LD_INT 0
34296: PUSH
34297: LD_INT 1
34299: PUSH
34300: EMPTY
34301: LIST
34302: LIST
34303: IN
34304: PUSH
34305: LD_VAR 0 5
34309: PUSH
34310: LD_INT 1
34312: PUSH
34313: LD_INT 2
34315: PUSH
34316: LD_INT 3
34318: PUSH
34319: EMPTY
34320: LIST
34321: LIST
34322: LIST
34323: IN
34324: NOT
34325: AND
34326: OR
34327: IFFALSE 34331
// exit ;
34329: GO 52722
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
34331: LD_VAR 0 1
34335: PUSH
34336: LD_INT 6
34338: PUSH
34339: LD_INT 7
34341: PUSH
34342: LD_INT 8
34344: PUSH
34345: LD_INT 13
34347: PUSH
34348: LD_INT 12
34350: PUSH
34351: LD_INT 15
34353: PUSH
34354: LD_INT 11
34356: PUSH
34357: LD_INT 14
34359: PUSH
34360: LD_INT 10
34362: PUSH
34363: EMPTY
34364: LIST
34365: LIST
34366: LIST
34367: LIST
34368: LIST
34369: LIST
34370: LIST
34371: LIST
34372: LIST
34373: IN
34374: IFFALSE 34384
// btype = b_lab ;
34376: LD_ADDR_VAR 0 1
34380: PUSH
34381: LD_INT 6
34383: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
34384: LD_VAR 0 6
34388: PUSH
34389: LD_INT 0
34391: PUSH
34392: LD_INT 1
34394: PUSH
34395: LD_INT 2
34397: PUSH
34398: EMPTY
34399: LIST
34400: LIST
34401: LIST
34402: IN
34403: NOT
34404: PUSH
34405: LD_VAR 0 1
34409: PUSH
34410: LD_INT 0
34412: PUSH
34413: LD_INT 1
34415: PUSH
34416: LD_INT 2
34418: PUSH
34419: LD_INT 3
34421: PUSH
34422: LD_INT 6
34424: PUSH
34425: LD_INT 36
34427: PUSH
34428: LD_INT 4
34430: PUSH
34431: LD_INT 5
34433: PUSH
34434: LD_INT 31
34436: PUSH
34437: LD_INT 32
34439: PUSH
34440: LD_INT 33
34442: PUSH
34443: EMPTY
34444: LIST
34445: LIST
34446: LIST
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: IN
34456: NOT
34457: PUSH
34458: LD_VAR 0 6
34462: PUSH
34463: LD_INT 1
34465: EQUAL
34466: AND
34467: OR
34468: PUSH
34469: LD_VAR 0 1
34473: PUSH
34474: LD_INT 2
34476: PUSH
34477: LD_INT 3
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: IN
34484: NOT
34485: PUSH
34486: LD_VAR 0 6
34490: PUSH
34491: LD_INT 2
34493: EQUAL
34494: AND
34495: OR
34496: IFFALSE 34506
// mode = 0 ;
34498: LD_ADDR_VAR 0 6
34502: PUSH
34503: LD_INT 0
34505: ST_TO_ADDR
// case mode of 0 :
34506: LD_VAR 0 6
34510: PUSH
34511: LD_INT 0
34513: DOUBLE
34514: EQUAL
34515: IFTRUE 34519
34517: GO 45972
34519: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34520: LD_ADDR_VAR 0 11
34524: PUSH
34525: LD_INT 0
34527: PUSH
34528: LD_INT 0
34530: PUSH
34531: EMPTY
34532: LIST
34533: LIST
34534: PUSH
34535: LD_INT 0
34537: PUSH
34538: LD_INT 1
34540: NEG
34541: PUSH
34542: EMPTY
34543: LIST
34544: LIST
34545: PUSH
34546: LD_INT 1
34548: PUSH
34549: LD_INT 0
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: PUSH
34556: LD_INT 1
34558: PUSH
34559: LD_INT 1
34561: PUSH
34562: EMPTY
34563: LIST
34564: LIST
34565: PUSH
34566: LD_INT 0
34568: PUSH
34569: LD_INT 1
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: PUSH
34576: LD_INT 1
34578: NEG
34579: PUSH
34580: LD_INT 0
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: PUSH
34587: LD_INT 1
34589: NEG
34590: PUSH
34591: LD_INT 1
34593: NEG
34594: PUSH
34595: EMPTY
34596: LIST
34597: LIST
34598: PUSH
34599: LD_INT 1
34601: NEG
34602: PUSH
34603: LD_INT 2
34605: NEG
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: PUSH
34611: LD_INT 0
34613: PUSH
34614: LD_INT 2
34616: NEG
34617: PUSH
34618: EMPTY
34619: LIST
34620: LIST
34621: PUSH
34622: LD_INT 1
34624: PUSH
34625: LD_INT 1
34627: NEG
34628: PUSH
34629: EMPTY
34630: LIST
34631: LIST
34632: PUSH
34633: LD_INT 1
34635: PUSH
34636: LD_INT 2
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: PUSH
34643: LD_INT 0
34645: PUSH
34646: LD_INT 2
34648: PUSH
34649: EMPTY
34650: LIST
34651: LIST
34652: PUSH
34653: LD_INT 1
34655: NEG
34656: PUSH
34657: LD_INT 1
34659: PUSH
34660: EMPTY
34661: LIST
34662: LIST
34663: PUSH
34664: LD_INT 1
34666: PUSH
34667: LD_INT 3
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: PUSH
34674: LD_INT 0
34676: PUSH
34677: LD_INT 3
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: PUSH
34684: LD_INT 1
34686: NEG
34687: PUSH
34688: LD_INT 2
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: PUSH
34695: EMPTY
34696: LIST
34697: LIST
34698: LIST
34699: LIST
34700: LIST
34701: LIST
34702: LIST
34703: LIST
34704: LIST
34705: LIST
34706: LIST
34707: LIST
34708: LIST
34709: LIST
34710: LIST
34711: LIST
34712: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34713: LD_ADDR_VAR 0 12
34717: PUSH
34718: LD_INT 0
34720: PUSH
34721: LD_INT 0
34723: PUSH
34724: EMPTY
34725: LIST
34726: LIST
34727: PUSH
34728: LD_INT 0
34730: PUSH
34731: LD_INT 1
34733: NEG
34734: PUSH
34735: EMPTY
34736: LIST
34737: LIST
34738: PUSH
34739: LD_INT 1
34741: PUSH
34742: LD_INT 0
34744: PUSH
34745: EMPTY
34746: LIST
34747: LIST
34748: PUSH
34749: LD_INT 1
34751: PUSH
34752: LD_INT 1
34754: PUSH
34755: EMPTY
34756: LIST
34757: LIST
34758: PUSH
34759: LD_INT 0
34761: PUSH
34762: LD_INT 1
34764: PUSH
34765: EMPTY
34766: LIST
34767: LIST
34768: PUSH
34769: LD_INT 1
34771: NEG
34772: PUSH
34773: LD_INT 0
34775: PUSH
34776: EMPTY
34777: LIST
34778: LIST
34779: PUSH
34780: LD_INT 1
34782: NEG
34783: PUSH
34784: LD_INT 1
34786: NEG
34787: PUSH
34788: EMPTY
34789: LIST
34790: LIST
34791: PUSH
34792: LD_INT 1
34794: PUSH
34795: LD_INT 1
34797: NEG
34798: PUSH
34799: EMPTY
34800: LIST
34801: LIST
34802: PUSH
34803: LD_INT 2
34805: PUSH
34806: LD_INT 0
34808: PUSH
34809: EMPTY
34810: LIST
34811: LIST
34812: PUSH
34813: LD_INT 2
34815: PUSH
34816: LD_INT 1
34818: PUSH
34819: EMPTY
34820: LIST
34821: LIST
34822: PUSH
34823: LD_INT 1
34825: NEG
34826: PUSH
34827: LD_INT 1
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: PUSH
34834: LD_INT 2
34836: NEG
34837: PUSH
34838: LD_INT 0
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: PUSH
34845: LD_INT 2
34847: NEG
34848: PUSH
34849: LD_INT 1
34851: NEG
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: PUSH
34857: LD_INT 2
34859: NEG
34860: PUSH
34861: LD_INT 1
34863: PUSH
34864: EMPTY
34865: LIST
34866: LIST
34867: PUSH
34868: LD_INT 3
34870: NEG
34871: PUSH
34872: LD_INT 0
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: PUSH
34879: LD_INT 3
34881: NEG
34882: PUSH
34883: LD_INT 1
34885: NEG
34886: PUSH
34887: EMPTY
34888: LIST
34889: LIST
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: LIST
34895: LIST
34896: LIST
34897: LIST
34898: LIST
34899: LIST
34900: LIST
34901: LIST
34902: LIST
34903: LIST
34904: LIST
34905: LIST
34906: LIST
34907: LIST
34908: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34909: LD_ADDR_VAR 0 13
34913: PUSH
34914: LD_INT 0
34916: PUSH
34917: LD_INT 0
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PUSH
34924: LD_INT 0
34926: PUSH
34927: LD_INT 1
34929: NEG
34930: PUSH
34931: EMPTY
34932: LIST
34933: LIST
34934: PUSH
34935: LD_INT 1
34937: PUSH
34938: LD_INT 0
34940: PUSH
34941: EMPTY
34942: LIST
34943: LIST
34944: PUSH
34945: LD_INT 1
34947: PUSH
34948: LD_INT 1
34950: PUSH
34951: EMPTY
34952: LIST
34953: LIST
34954: PUSH
34955: LD_INT 0
34957: PUSH
34958: LD_INT 1
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: PUSH
34965: LD_INT 1
34967: NEG
34968: PUSH
34969: LD_INT 0
34971: PUSH
34972: EMPTY
34973: LIST
34974: LIST
34975: PUSH
34976: LD_INT 1
34978: NEG
34979: PUSH
34980: LD_INT 1
34982: NEG
34983: PUSH
34984: EMPTY
34985: LIST
34986: LIST
34987: PUSH
34988: LD_INT 1
34990: NEG
34991: PUSH
34992: LD_INT 2
34994: NEG
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: PUSH
35000: LD_INT 2
35002: PUSH
35003: LD_INT 1
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: PUSH
35010: LD_INT 2
35012: PUSH
35013: LD_INT 2
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: PUSH
35020: LD_INT 1
35022: PUSH
35023: LD_INT 2
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: PUSH
35030: LD_INT 2
35032: NEG
35033: PUSH
35034: LD_INT 1
35036: NEG
35037: PUSH
35038: EMPTY
35039: LIST
35040: LIST
35041: PUSH
35042: LD_INT 2
35044: NEG
35045: PUSH
35046: LD_INT 2
35048: NEG
35049: PUSH
35050: EMPTY
35051: LIST
35052: LIST
35053: PUSH
35054: LD_INT 2
35056: NEG
35057: PUSH
35058: LD_INT 3
35060: NEG
35061: PUSH
35062: EMPTY
35063: LIST
35064: LIST
35065: PUSH
35066: LD_INT 3
35068: NEG
35069: PUSH
35070: LD_INT 2
35072: NEG
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: PUSH
35078: LD_INT 3
35080: NEG
35081: PUSH
35082: LD_INT 3
35084: NEG
35085: PUSH
35086: EMPTY
35087: LIST
35088: LIST
35089: PUSH
35090: EMPTY
35091: LIST
35092: LIST
35093: LIST
35094: LIST
35095: LIST
35096: LIST
35097: LIST
35098: LIST
35099: LIST
35100: LIST
35101: LIST
35102: LIST
35103: LIST
35104: LIST
35105: LIST
35106: LIST
35107: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35108: LD_ADDR_VAR 0 14
35112: PUSH
35113: LD_INT 0
35115: PUSH
35116: LD_INT 0
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: PUSH
35123: LD_INT 0
35125: PUSH
35126: LD_INT 1
35128: NEG
35129: PUSH
35130: EMPTY
35131: LIST
35132: LIST
35133: PUSH
35134: LD_INT 1
35136: PUSH
35137: LD_INT 0
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: PUSH
35144: LD_INT 1
35146: PUSH
35147: LD_INT 1
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PUSH
35154: LD_INT 0
35156: PUSH
35157: LD_INT 1
35159: PUSH
35160: EMPTY
35161: LIST
35162: LIST
35163: PUSH
35164: LD_INT 1
35166: NEG
35167: PUSH
35168: LD_INT 0
35170: PUSH
35171: EMPTY
35172: LIST
35173: LIST
35174: PUSH
35175: LD_INT 1
35177: NEG
35178: PUSH
35179: LD_INT 1
35181: NEG
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: PUSH
35187: LD_INT 1
35189: NEG
35190: PUSH
35191: LD_INT 2
35193: NEG
35194: PUSH
35195: EMPTY
35196: LIST
35197: LIST
35198: PUSH
35199: LD_INT 0
35201: PUSH
35202: LD_INT 2
35204: NEG
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: PUSH
35210: LD_INT 1
35212: PUSH
35213: LD_INT 1
35215: NEG
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: PUSH
35221: LD_INT 1
35223: PUSH
35224: LD_INT 2
35226: PUSH
35227: EMPTY
35228: LIST
35229: LIST
35230: PUSH
35231: LD_INT 0
35233: PUSH
35234: LD_INT 2
35236: PUSH
35237: EMPTY
35238: LIST
35239: LIST
35240: PUSH
35241: LD_INT 1
35243: NEG
35244: PUSH
35245: LD_INT 1
35247: PUSH
35248: EMPTY
35249: LIST
35250: LIST
35251: PUSH
35252: LD_INT 1
35254: NEG
35255: PUSH
35256: LD_INT 3
35258: NEG
35259: PUSH
35260: EMPTY
35261: LIST
35262: LIST
35263: PUSH
35264: LD_INT 0
35266: PUSH
35267: LD_INT 3
35269: NEG
35270: PUSH
35271: EMPTY
35272: LIST
35273: LIST
35274: PUSH
35275: LD_INT 1
35277: PUSH
35278: LD_INT 2
35280: NEG
35281: PUSH
35282: EMPTY
35283: LIST
35284: LIST
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: LIST
35290: LIST
35291: LIST
35292: LIST
35293: LIST
35294: LIST
35295: LIST
35296: LIST
35297: LIST
35298: LIST
35299: LIST
35300: LIST
35301: LIST
35302: LIST
35303: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35304: LD_ADDR_VAR 0 15
35308: PUSH
35309: LD_INT 0
35311: PUSH
35312: LD_INT 0
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: PUSH
35319: LD_INT 0
35321: PUSH
35322: LD_INT 1
35324: NEG
35325: PUSH
35326: EMPTY
35327: LIST
35328: LIST
35329: PUSH
35330: LD_INT 1
35332: PUSH
35333: LD_INT 0
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: PUSH
35340: LD_INT 1
35342: PUSH
35343: LD_INT 1
35345: PUSH
35346: EMPTY
35347: LIST
35348: LIST
35349: PUSH
35350: LD_INT 0
35352: PUSH
35353: LD_INT 1
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: PUSH
35360: LD_INT 1
35362: NEG
35363: PUSH
35364: LD_INT 0
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: PUSH
35371: LD_INT 1
35373: NEG
35374: PUSH
35375: LD_INT 1
35377: NEG
35378: PUSH
35379: EMPTY
35380: LIST
35381: LIST
35382: PUSH
35383: LD_INT 1
35385: PUSH
35386: LD_INT 1
35388: NEG
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: PUSH
35394: LD_INT 2
35396: PUSH
35397: LD_INT 0
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: PUSH
35404: LD_INT 2
35406: PUSH
35407: LD_INT 1
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: PUSH
35414: LD_INT 1
35416: NEG
35417: PUSH
35418: LD_INT 1
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: PUSH
35425: LD_INT 2
35427: NEG
35428: PUSH
35429: LD_INT 0
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: PUSH
35436: LD_INT 2
35438: NEG
35439: PUSH
35440: LD_INT 1
35442: NEG
35443: PUSH
35444: EMPTY
35445: LIST
35446: LIST
35447: PUSH
35448: LD_INT 2
35450: PUSH
35451: LD_INT 1
35453: NEG
35454: PUSH
35455: EMPTY
35456: LIST
35457: LIST
35458: PUSH
35459: LD_INT 3
35461: PUSH
35462: LD_INT 0
35464: PUSH
35465: EMPTY
35466: LIST
35467: LIST
35468: PUSH
35469: LD_INT 3
35471: PUSH
35472: LD_INT 1
35474: PUSH
35475: EMPTY
35476: LIST
35477: LIST
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: LIST
35483: LIST
35484: LIST
35485: LIST
35486: LIST
35487: LIST
35488: LIST
35489: LIST
35490: LIST
35491: LIST
35492: LIST
35493: LIST
35494: LIST
35495: LIST
35496: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35497: LD_ADDR_VAR 0 16
35501: PUSH
35502: LD_INT 0
35504: PUSH
35505: LD_INT 0
35507: PUSH
35508: EMPTY
35509: LIST
35510: LIST
35511: PUSH
35512: LD_INT 0
35514: PUSH
35515: LD_INT 1
35517: NEG
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: PUSH
35523: LD_INT 1
35525: PUSH
35526: LD_INT 0
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: PUSH
35533: LD_INT 1
35535: PUSH
35536: LD_INT 1
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: PUSH
35543: LD_INT 0
35545: PUSH
35546: LD_INT 1
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: PUSH
35553: LD_INT 1
35555: NEG
35556: PUSH
35557: LD_INT 0
35559: PUSH
35560: EMPTY
35561: LIST
35562: LIST
35563: PUSH
35564: LD_INT 1
35566: NEG
35567: PUSH
35568: LD_INT 1
35570: NEG
35571: PUSH
35572: EMPTY
35573: LIST
35574: LIST
35575: PUSH
35576: LD_INT 1
35578: NEG
35579: PUSH
35580: LD_INT 2
35582: NEG
35583: PUSH
35584: EMPTY
35585: LIST
35586: LIST
35587: PUSH
35588: LD_INT 2
35590: PUSH
35591: LD_INT 1
35593: PUSH
35594: EMPTY
35595: LIST
35596: LIST
35597: PUSH
35598: LD_INT 2
35600: PUSH
35601: LD_INT 2
35603: PUSH
35604: EMPTY
35605: LIST
35606: LIST
35607: PUSH
35608: LD_INT 1
35610: PUSH
35611: LD_INT 2
35613: PUSH
35614: EMPTY
35615: LIST
35616: LIST
35617: PUSH
35618: LD_INT 2
35620: NEG
35621: PUSH
35622: LD_INT 1
35624: NEG
35625: PUSH
35626: EMPTY
35627: LIST
35628: LIST
35629: PUSH
35630: LD_INT 2
35632: NEG
35633: PUSH
35634: LD_INT 2
35636: NEG
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: PUSH
35642: LD_INT 3
35644: PUSH
35645: LD_INT 2
35647: PUSH
35648: EMPTY
35649: LIST
35650: LIST
35651: PUSH
35652: LD_INT 3
35654: PUSH
35655: LD_INT 3
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: PUSH
35662: LD_INT 2
35664: PUSH
35665: LD_INT 3
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: LIST
35676: LIST
35677: LIST
35678: LIST
35679: LIST
35680: LIST
35681: LIST
35682: LIST
35683: LIST
35684: LIST
35685: LIST
35686: LIST
35687: LIST
35688: LIST
35689: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35690: LD_ADDR_VAR 0 17
35694: PUSH
35695: LD_INT 0
35697: PUSH
35698: LD_INT 0
35700: PUSH
35701: EMPTY
35702: LIST
35703: LIST
35704: PUSH
35705: LD_INT 0
35707: PUSH
35708: LD_INT 1
35710: NEG
35711: PUSH
35712: EMPTY
35713: LIST
35714: LIST
35715: PUSH
35716: LD_INT 1
35718: PUSH
35719: LD_INT 0
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: PUSH
35726: LD_INT 1
35728: PUSH
35729: LD_INT 1
35731: PUSH
35732: EMPTY
35733: LIST
35734: LIST
35735: PUSH
35736: LD_INT 0
35738: PUSH
35739: LD_INT 1
35741: PUSH
35742: EMPTY
35743: LIST
35744: LIST
35745: PUSH
35746: LD_INT 1
35748: NEG
35749: PUSH
35750: LD_INT 0
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: PUSH
35757: LD_INT 1
35759: NEG
35760: PUSH
35761: LD_INT 1
35763: NEG
35764: PUSH
35765: EMPTY
35766: LIST
35767: LIST
35768: PUSH
35769: LD_INT 1
35771: NEG
35772: PUSH
35773: LD_INT 2
35775: NEG
35776: PUSH
35777: EMPTY
35778: LIST
35779: LIST
35780: PUSH
35781: LD_INT 0
35783: PUSH
35784: LD_INT 2
35786: NEG
35787: PUSH
35788: EMPTY
35789: LIST
35790: LIST
35791: PUSH
35792: LD_INT 1
35794: PUSH
35795: LD_INT 1
35797: NEG
35798: PUSH
35799: EMPTY
35800: LIST
35801: LIST
35802: PUSH
35803: LD_INT 2
35805: PUSH
35806: LD_INT 0
35808: PUSH
35809: EMPTY
35810: LIST
35811: LIST
35812: PUSH
35813: LD_INT 2
35815: PUSH
35816: LD_INT 1
35818: PUSH
35819: EMPTY
35820: LIST
35821: LIST
35822: PUSH
35823: LD_INT 2
35825: PUSH
35826: LD_INT 2
35828: PUSH
35829: EMPTY
35830: LIST
35831: LIST
35832: PUSH
35833: LD_INT 1
35835: PUSH
35836: LD_INT 2
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: PUSH
35843: LD_INT 0
35845: PUSH
35846: LD_INT 2
35848: PUSH
35849: EMPTY
35850: LIST
35851: LIST
35852: PUSH
35853: LD_INT 1
35855: NEG
35856: PUSH
35857: LD_INT 1
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: PUSH
35864: LD_INT 2
35866: NEG
35867: PUSH
35868: LD_INT 0
35870: PUSH
35871: EMPTY
35872: LIST
35873: LIST
35874: PUSH
35875: LD_INT 2
35877: NEG
35878: PUSH
35879: LD_INT 1
35881: NEG
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: PUSH
35887: LD_INT 2
35889: NEG
35890: PUSH
35891: LD_INT 2
35893: NEG
35894: PUSH
35895: EMPTY
35896: LIST
35897: LIST
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: LIST
35903: LIST
35904: LIST
35905: LIST
35906: LIST
35907: LIST
35908: LIST
35909: LIST
35910: LIST
35911: LIST
35912: LIST
35913: LIST
35914: LIST
35915: LIST
35916: LIST
35917: LIST
35918: LIST
35919: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35920: LD_ADDR_VAR 0 18
35924: PUSH
35925: LD_INT 0
35927: PUSH
35928: LD_INT 0
35930: PUSH
35931: EMPTY
35932: LIST
35933: LIST
35934: PUSH
35935: LD_INT 0
35937: PUSH
35938: LD_INT 1
35940: NEG
35941: PUSH
35942: EMPTY
35943: LIST
35944: LIST
35945: PUSH
35946: LD_INT 1
35948: PUSH
35949: LD_INT 0
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: PUSH
35956: LD_INT 1
35958: PUSH
35959: LD_INT 1
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: PUSH
35966: LD_INT 0
35968: PUSH
35969: LD_INT 1
35971: PUSH
35972: EMPTY
35973: LIST
35974: LIST
35975: PUSH
35976: LD_INT 1
35978: NEG
35979: PUSH
35980: LD_INT 0
35982: PUSH
35983: EMPTY
35984: LIST
35985: LIST
35986: PUSH
35987: LD_INT 1
35989: NEG
35990: PUSH
35991: LD_INT 1
35993: NEG
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: PUSH
35999: LD_INT 1
36001: NEG
36002: PUSH
36003: LD_INT 2
36005: NEG
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: PUSH
36011: LD_INT 0
36013: PUSH
36014: LD_INT 2
36016: NEG
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: PUSH
36022: LD_INT 1
36024: PUSH
36025: LD_INT 1
36027: NEG
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: PUSH
36033: LD_INT 2
36035: PUSH
36036: LD_INT 0
36038: PUSH
36039: EMPTY
36040: LIST
36041: LIST
36042: PUSH
36043: LD_INT 2
36045: PUSH
36046: LD_INT 1
36048: PUSH
36049: EMPTY
36050: LIST
36051: LIST
36052: PUSH
36053: LD_INT 2
36055: PUSH
36056: LD_INT 2
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: PUSH
36063: LD_INT 1
36065: PUSH
36066: LD_INT 2
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: PUSH
36073: LD_INT 0
36075: PUSH
36076: LD_INT 2
36078: PUSH
36079: EMPTY
36080: LIST
36081: LIST
36082: PUSH
36083: LD_INT 1
36085: NEG
36086: PUSH
36087: LD_INT 1
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: PUSH
36094: LD_INT 2
36096: NEG
36097: PUSH
36098: LD_INT 0
36100: PUSH
36101: EMPTY
36102: LIST
36103: LIST
36104: PUSH
36105: LD_INT 2
36107: NEG
36108: PUSH
36109: LD_INT 1
36111: NEG
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: PUSH
36117: LD_INT 2
36119: NEG
36120: PUSH
36121: LD_INT 2
36123: NEG
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: LIST
36133: LIST
36134: LIST
36135: LIST
36136: LIST
36137: LIST
36138: LIST
36139: LIST
36140: LIST
36141: LIST
36142: LIST
36143: LIST
36144: LIST
36145: LIST
36146: LIST
36147: LIST
36148: LIST
36149: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36150: LD_ADDR_VAR 0 19
36154: PUSH
36155: LD_INT 0
36157: PUSH
36158: LD_INT 0
36160: PUSH
36161: EMPTY
36162: LIST
36163: LIST
36164: PUSH
36165: LD_INT 0
36167: PUSH
36168: LD_INT 1
36170: NEG
36171: PUSH
36172: EMPTY
36173: LIST
36174: LIST
36175: PUSH
36176: LD_INT 1
36178: PUSH
36179: LD_INT 0
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: PUSH
36186: LD_INT 1
36188: PUSH
36189: LD_INT 1
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: PUSH
36196: LD_INT 0
36198: PUSH
36199: LD_INT 1
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: PUSH
36206: LD_INT 1
36208: NEG
36209: PUSH
36210: LD_INT 0
36212: PUSH
36213: EMPTY
36214: LIST
36215: LIST
36216: PUSH
36217: LD_INT 1
36219: NEG
36220: PUSH
36221: LD_INT 1
36223: NEG
36224: PUSH
36225: EMPTY
36226: LIST
36227: LIST
36228: PUSH
36229: LD_INT 1
36231: NEG
36232: PUSH
36233: LD_INT 2
36235: NEG
36236: PUSH
36237: EMPTY
36238: LIST
36239: LIST
36240: PUSH
36241: LD_INT 0
36243: PUSH
36244: LD_INT 2
36246: NEG
36247: PUSH
36248: EMPTY
36249: LIST
36250: LIST
36251: PUSH
36252: LD_INT 1
36254: PUSH
36255: LD_INT 1
36257: NEG
36258: PUSH
36259: EMPTY
36260: LIST
36261: LIST
36262: PUSH
36263: LD_INT 2
36265: PUSH
36266: LD_INT 0
36268: PUSH
36269: EMPTY
36270: LIST
36271: LIST
36272: PUSH
36273: LD_INT 2
36275: PUSH
36276: LD_INT 1
36278: PUSH
36279: EMPTY
36280: LIST
36281: LIST
36282: PUSH
36283: LD_INT 2
36285: PUSH
36286: LD_INT 2
36288: PUSH
36289: EMPTY
36290: LIST
36291: LIST
36292: PUSH
36293: LD_INT 1
36295: PUSH
36296: LD_INT 2
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: PUSH
36303: LD_INT 0
36305: PUSH
36306: LD_INT 2
36308: PUSH
36309: EMPTY
36310: LIST
36311: LIST
36312: PUSH
36313: LD_INT 1
36315: NEG
36316: PUSH
36317: LD_INT 1
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: PUSH
36324: LD_INT 2
36326: NEG
36327: PUSH
36328: LD_INT 0
36330: PUSH
36331: EMPTY
36332: LIST
36333: LIST
36334: PUSH
36335: LD_INT 2
36337: NEG
36338: PUSH
36339: LD_INT 1
36341: NEG
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: PUSH
36347: LD_INT 2
36349: NEG
36350: PUSH
36351: LD_INT 2
36353: NEG
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: PUSH
36359: EMPTY
36360: LIST
36361: LIST
36362: LIST
36363: LIST
36364: LIST
36365: LIST
36366: LIST
36367: LIST
36368: LIST
36369: LIST
36370: LIST
36371: LIST
36372: LIST
36373: LIST
36374: LIST
36375: LIST
36376: LIST
36377: LIST
36378: LIST
36379: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36380: LD_ADDR_VAR 0 20
36384: PUSH
36385: LD_INT 0
36387: PUSH
36388: LD_INT 0
36390: PUSH
36391: EMPTY
36392: LIST
36393: LIST
36394: PUSH
36395: LD_INT 0
36397: PUSH
36398: LD_INT 1
36400: NEG
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: PUSH
36406: LD_INT 1
36408: PUSH
36409: LD_INT 0
36411: PUSH
36412: EMPTY
36413: LIST
36414: LIST
36415: PUSH
36416: LD_INT 1
36418: PUSH
36419: LD_INT 1
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: PUSH
36426: LD_INT 0
36428: PUSH
36429: LD_INT 1
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: PUSH
36436: LD_INT 1
36438: NEG
36439: PUSH
36440: LD_INT 0
36442: PUSH
36443: EMPTY
36444: LIST
36445: LIST
36446: PUSH
36447: LD_INT 1
36449: NEG
36450: PUSH
36451: LD_INT 1
36453: NEG
36454: PUSH
36455: EMPTY
36456: LIST
36457: LIST
36458: PUSH
36459: LD_INT 1
36461: NEG
36462: PUSH
36463: LD_INT 2
36465: NEG
36466: PUSH
36467: EMPTY
36468: LIST
36469: LIST
36470: PUSH
36471: LD_INT 0
36473: PUSH
36474: LD_INT 2
36476: NEG
36477: PUSH
36478: EMPTY
36479: LIST
36480: LIST
36481: PUSH
36482: LD_INT 1
36484: PUSH
36485: LD_INT 1
36487: NEG
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: PUSH
36493: LD_INT 2
36495: PUSH
36496: LD_INT 0
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: PUSH
36503: LD_INT 2
36505: PUSH
36506: LD_INT 1
36508: PUSH
36509: EMPTY
36510: LIST
36511: LIST
36512: PUSH
36513: LD_INT 2
36515: PUSH
36516: LD_INT 2
36518: PUSH
36519: EMPTY
36520: LIST
36521: LIST
36522: PUSH
36523: LD_INT 1
36525: PUSH
36526: LD_INT 2
36528: PUSH
36529: EMPTY
36530: LIST
36531: LIST
36532: PUSH
36533: LD_INT 0
36535: PUSH
36536: LD_INT 2
36538: PUSH
36539: EMPTY
36540: LIST
36541: LIST
36542: PUSH
36543: LD_INT 1
36545: NEG
36546: PUSH
36547: LD_INT 1
36549: PUSH
36550: EMPTY
36551: LIST
36552: LIST
36553: PUSH
36554: LD_INT 2
36556: NEG
36557: PUSH
36558: LD_INT 0
36560: PUSH
36561: EMPTY
36562: LIST
36563: LIST
36564: PUSH
36565: LD_INT 2
36567: NEG
36568: PUSH
36569: LD_INT 1
36571: NEG
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: PUSH
36577: LD_INT 2
36579: NEG
36580: PUSH
36581: LD_INT 2
36583: NEG
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: LIST
36593: LIST
36594: LIST
36595: LIST
36596: LIST
36597: LIST
36598: LIST
36599: LIST
36600: LIST
36601: LIST
36602: LIST
36603: LIST
36604: LIST
36605: LIST
36606: LIST
36607: LIST
36608: LIST
36609: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36610: LD_ADDR_VAR 0 21
36614: PUSH
36615: LD_INT 0
36617: PUSH
36618: LD_INT 0
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: PUSH
36625: LD_INT 0
36627: PUSH
36628: LD_INT 1
36630: NEG
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: PUSH
36636: LD_INT 1
36638: PUSH
36639: LD_INT 0
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: PUSH
36646: LD_INT 1
36648: PUSH
36649: LD_INT 1
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: PUSH
36656: LD_INT 0
36658: PUSH
36659: LD_INT 1
36661: PUSH
36662: EMPTY
36663: LIST
36664: LIST
36665: PUSH
36666: LD_INT 1
36668: NEG
36669: PUSH
36670: LD_INT 0
36672: PUSH
36673: EMPTY
36674: LIST
36675: LIST
36676: PUSH
36677: LD_INT 1
36679: NEG
36680: PUSH
36681: LD_INT 1
36683: NEG
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: PUSH
36689: LD_INT 1
36691: NEG
36692: PUSH
36693: LD_INT 2
36695: NEG
36696: PUSH
36697: EMPTY
36698: LIST
36699: LIST
36700: PUSH
36701: LD_INT 0
36703: PUSH
36704: LD_INT 2
36706: NEG
36707: PUSH
36708: EMPTY
36709: LIST
36710: LIST
36711: PUSH
36712: LD_INT 1
36714: PUSH
36715: LD_INT 1
36717: NEG
36718: PUSH
36719: EMPTY
36720: LIST
36721: LIST
36722: PUSH
36723: LD_INT 2
36725: PUSH
36726: LD_INT 0
36728: PUSH
36729: EMPTY
36730: LIST
36731: LIST
36732: PUSH
36733: LD_INT 2
36735: PUSH
36736: LD_INT 1
36738: PUSH
36739: EMPTY
36740: LIST
36741: LIST
36742: PUSH
36743: LD_INT 2
36745: PUSH
36746: LD_INT 2
36748: PUSH
36749: EMPTY
36750: LIST
36751: LIST
36752: PUSH
36753: LD_INT 1
36755: PUSH
36756: LD_INT 2
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: PUSH
36763: LD_INT 0
36765: PUSH
36766: LD_INT 2
36768: PUSH
36769: EMPTY
36770: LIST
36771: LIST
36772: PUSH
36773: LD_INT 1
36775: NEG
36776: PUSH
36777: LD_INT 1
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: PUSH
36784: LD_INT 2
36786: NEG
36787: PUSH
36788: LD_INT 0
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: PUSH
36795: LD_INT 2
36797: NEG
36798: PUSH
36799: LD_INT 1
36801: NEG
36802: PUSH
36803: EMPTY
36804: LIST
36805: LIST
36806: PUSH
36807: LD_INT 2
36809: NEG
36810: PUSH
36811: LD_INT 2
36813: NEG
36814: PUSH
36815: EMPTY
36816: LIST
36817: LIST
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: LIST
36823: LIST
36824: LIST
36825: LIST
36826: LIST
36827: LIST
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: LIST
36836: LIST
36837: LIST
36838: LIST
36839: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36840: LD_ADDR_VAR 0 22
36844: PUSH
36845: LD_INT 0
36847: PUSH
36848: LD_INT 0
36850: PUSH
36851: EMPTY
36852: LIST
36853: LIST
36854: PUSH
36855: LD_INT 0
36857: PUSH
36858: LD_INT 1
36860: NEG
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: PUSH
36866: LD_INT 1
36868: PUSH
36869: LD_INT 0
36871: PUSH
36872: EMPTY
36873: LIST
36874: LIST
36875: PUSH
36876: LD_INT 1
36878: PUSH
36879: LD_INT 1
36881: PUSH
36882: EMPTY
36883: LIST
36884: LIST
36885: PUSH
36886: LD_INT 0
36888: PUSH
36889: LD_INT 1
36891: PUSH
36892: EMPTY
36893: LIST
36894: LIST
36895: PUSH
36896: LD_INT 1
36898: NEG
36899: PUSH
36900: LD_INT 0
36902: PUSH
36903: EMPTY
36904: LIST
36905: LIST
36906: PUSH
36907: LD_INT 1
36909: NEG
36910: PUSH
36911: LD_INT 1
36913: NEG
36914: PUSH
36915: EMPTY
36916: LIST
36917: LIST
36918: PUSH
36919: LD_INT 1
36921: NEG
36922: PUSH
36923: LD_INT 2
36925: NEG
36926: PUSH
36927: EMPTY
36928: LIST
36929: LIST
36930: PUSH
36931: LD_INT 0
36933: PUSH
36934: LD_INT 2
36936: NEG
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: PUSH
36942: LD_INT 1
36944: PUSH
36945: LD_INT 1
36947: NEG
36948: PUSH
36949: EMPTY
36950: LIST
36951: LIST
36952: PUSH
36953: LD_INT 2
36955: PUSH
36956: LD_INT 0
36958: PUSH
36959: EMPTY
36960: LIST
36961: LIST
36962: PUSH
36963: LD_INT 2
36965: PUSH
36966: LD_INT 1
36968: PUSH
36969: EMPTY
36970: LIST
36971: LIST
36972: PUSH
36973: LD_INT 2
36975: PUSH
36976: LD_INT 2
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: PUSH
36983: LD_INT 1
36985: PUSH
36986: LD_INT 2
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: PUSH
36993: LD_INT 0
36995: PUSH
36996: LD_INT 2
36998: PUSH
36999: EMPTY
37000: LIST
37001: LIST
37002: PUSH
37003: LD_INT 1
37005: NEG
37006: PUSH
37007: LD_INT 1
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: PUSH
37014: LD_INT 2
37016: NEG
37017: PUSH
37018: LD_INT 0
37020: PUSH
37021: EMPTY
37022: LIST
37023: LIST
37024: PUSH
37025: LD_INT 2
37027: NEG
37028: PUSH
37029: LD_INT 1
37031: NEG
37032: PUSH
37033: EMPTY
37034: LIST
37035: LIST
37036: PUSH
37037: LD_INT 2
37039: NEG
37040: PUSH
37041: LD_INT 2
37043: NEG
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: LIST
37065: LIST
37066: LIST
37067: LIST
37068: LIST
37069: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37070: LD_ADDR_VAR 0 23
37074: PUSH
37075: LD_INT 0
37077: PUSH
37078: LD_INT 0
37080: PUSH
37081: EMPTY
37082: LIST
37083: LIST
37084: PUSH
37085: LD_INT 0
37087: PUSH
37088: LD_INT 1
37090: NEG
37091: PUSH
37092: EMPTY
37093: LIST
37094: LIST
37095: PUSH
37096: LD_INT 1
37098: PUSH
37099: LD_INT 0
37101: PUSH
37102: EMPTY
37103: LIST
37104: LIST
37105: PUSH
37106: LD_INT 1
37108: PUSH
37109: LD_INT 1
37111: PUSH
37112: EMPTY
37113: LIST
37114: LIST
37115: PUSH
37116: LD_INT 0
37118: PUSH
37119: LD_INT 1
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: PUSH
37126: LD_INT 1
37128: NEG
37129: PUSH
37130: LD_INT 0
37132: PUSH
37133: EMPTY
37134: LIST
37135: LIST
37136: PUSH
37137: LD_INT 1
37139: NEG
37140: PUSH
37141: LD_INT 1
37143: NEG
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: PUSH
37149: LD_INT 1
37151: NEG
37152: PUSH
37153: LD_INT 2
37155: NEG
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: PUSH
37161: LD_INT 0
37163: PUSH
37164: LD_INT 2
37166: NEG
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: PUSH
37172: LD_INT 1
37174: PUSH
37175: LD_INT 1
37177: NEG
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: PUSH
37183: LD_INT 2
37185: PUSH
37186: LD_INT 0
37188: PUSH
37189: EMPTY
37190: LIST
37191: LIST
37192: PUSH
37193: LD_INT 2
37195: PUSH
37196: LD_INT 1
37198: PUSH
37199: EMPTY
37200: LIST
37201: LIST
37202: PUSH
37203: LD_INT 2
37205: PUSH
37206: LD_INT 2
37208: PUSH
37209: EMPTY
37210: LIST
37211: LIST
37212: PUSH
37213: LD_INT 1
37215: PUSH
37216: LD_INT 2
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: PUSH
37223: LD_INT 0
37225: PUSH
37226: LD_INT 2
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: PUSH
37233: LD_INT 1
37235: NEG
37236: PUSH
37237: LD_INT 1
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: PUSH
37244: LD_INT 2
37246: NEG
37247: PUSH
37248: LD_INT 0
37250: PUSH
37251: EMPTY
37252: LIST
37253: LIST
37254: PUSH
37255: LD_INT 2
37257: NEG
37258: PUSH
37259: LD_INT 1
37261: NEG
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: PUSH
37267: LD_INT 2
37269: NEG
37270: PUSH
37271: LD_INT 2
37273: NEG
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: PUSH
37279: LD_INT 2
37281: NEG
37282: PUSH
37283: LD_INT 3
37285: NEG
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: PUSH
37291: LD_INT 1
37293: NEG
37294: PUSH
37295: LD_INT 3
37297: NEG
37298: PUSH
37299: EMPTY
37300: LIST
37301: LIST
37302: PUSH
37303: LD_INT 1
37305: PUSH
37306: LD_INT 2
37308: NEG
37309: PUSH
37310: EMPTY
37311: LIST
37312: LIST
37313: PUSH
37314: LD_INT 2
37316: PUSH
37317: LD_INT 1
37319: NEG
37320: PUSH
37321: EMPTY
37322: LIST
37323: LIST
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: LIST
37329: LIST
37330: LIST
37331: LIST
37332: LIST
37333: LIST
37334: LIST
37335: LIST
37336: LIST
37337: LIST
37338: LIST
37339: LIST
37340: LIST
37341: LIST
37342: LIST
37343: LIST
37344: LIST
37345: LIST
37346: LIST
37347: LIST
37348: LIST
37349: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
37350: LD_ADDR_VAR 0 24
37354: PUSH
37355: LD_INT 0
37357: PUSH
37358: LD_INT 0
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: PUSH
37365: LD_INT 0
37367: PUSH
37368: LD_INT 1
37370: NEG
37371: PUSH
37372: EMPTY
37373: LIST
37374: LIST
37375: PUSH
37376: LD_INT 1
37378: PUSH
37379: LD_INT 0
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: PUSH
37386: LD_INT 1
37388: PUSH
37389: LD_INT 1
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: PUSH
37396: LD_INT 0
37398: PUSH
37399: LD_INT 1
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: PUSH
37406: LD_INT 1
37408: NEG
37409: PUSH
37410: LD_INT 0
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: PUSH
37417: LD_INT 1
37419: NEG
37420: PUSH
37421: LD_INT 1
37423: NEG
37424: PUSH
37425: EMPTY
37426: LIST
37427: LIST
37428: PUSH
37429: LD_INT 1
37431: NEG
37432: PUSH
37433: LD_INT 2
37435: NEG
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: PUSH
37441: LD_INT 0
37443: PUSH
37444: LD_INT 2
37446: NEG
37447: PUSH
37448: EMPTY
37449: LIST
37450: LIST
37451: PUSH
37452: LD_INT 1
37454: PUSH
37455: LD_INT 1
37457: NEG
37458: PUSH
37459: EMPTY
37460: LIST
37461: LIST
37462: PUSH
37463: LD_INT 2
37465: PUSH
37466: LD_INT 0
37468: PUSH
37469: EMPTY
37470: LIST
37471: LIST
37472: PUSH
37473: LD_INT 2
37475: PUSH
37476: LD_INT 1
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: PUSH
37483: LD_INT 2
37485: PUSH
37486: LD_INT 2
37488: PUSH
37489: EMPTY
37490: LIST
37491: LIST
37492: PUSH
37493: LD_INT 1
37495: PUSH
37496: LD_INT 2
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: PUSH
37503: LD_INT 0
37505: PUSH
37506: LD_INT 2
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: LD_INT 1
37515: NEG
37516: PUSH
37517: LD_INT 1
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: PUSH
37524: LD_INT 2
37526: NEG
37527: PUSH
37528: LD_INT 0
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: PUSH
37535: LD_INT 2
37537: NEG
37538: PUSH
37539: LD_INT 1
37541: NEG
37542: PUSH
37543: EMPTY
37544: LIST
37545: LIST
37546: PUSH
37547: LD_INT 2
37549: NEG
37550: PUSH
37551: LD_INT 2
37553: NEG
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: PUSH
37559: LD_INT 1
37561: PUSH
37562: LD_INT 2
37564: NEG
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: PUSH
37570: LD_INT 2
37572: PUSH
37573: LD_INT 1
37575: NEG
37576: PUSH
37577: EMPTY
37578: LIST
37579: LIST
37580: PUSH
37581: LD_INT 3
37583: PUSH
37584: LD_INT 1
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: PUSH
37591: LD_INT 3
37593: PUSH
37594: LD_INT 2
37596: PUSH
37597: EMPTY
37598: LIST
37599: LIST
37600: PUSH
37601: EMPTY
37602: LIST
37603: LIST
37604: LIST
37605: LIST
37606: LIST
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: LIST
37614: LIST
37615: LIST
37616: LIST
37617: LIST
37618: LIST
37619: LIST
37620: LIST
37621: LIST
37622: LIST
37623: LIST
37624: LIST
37625: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
37626: LD_ADDR_VAR 0 25
37630: PUSH
37631: LD_INT 0
37633: PUSH
37634: LD_INT 0
37636: PUSH
37637: EMPTY
37638: LIST
37639: LIST
37640: PUSH
37641: LD_INT 0
37643: PUSH
37644: LD_INT 1
37646: NEG
37647: PUSH
37648: EMPTY
37649: LIST
37650: LIST
37651: PUSH
37652: LD_INT 1
37654: PUSH
37655: LD_INT 0
37657: PUSH
37658: EMPTY
37659: LIST
37660: LIST
37661: PUSH
37662: LD_INT 1
37664: PUSH
37665: LD_INT 1
37667: PUSH
37668: EMPTY
37669: LIST
37670: LIST
37671: PUSH
37672: LD_INT 0
37674: PUSH
37675: LD_INT 1
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: PUSH
37682: LD_INT 1
37684: NEG
37685: PUSH
37686: LD_INT 0
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PUSH
37693: LD_INT 1
37695: NEG
37696: PUSH
37697: LD_INT 1
37699: NEG
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: PUSH
37705: LD_INT 1
37707: NEG
37708: PUSH
37709: LD_INT 2
37711: NEG
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: PUSH
37717: LD_INT 0
37719: PUSH
37720: LD_INT 2
37722: NEG
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: PUSH
37728: LD_INT 1
37730: PUSH
37731: LD_INT 1
37733: NEG
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: PUSH
37739: LD_INT 2
37741: PUSH
37742: LD_INT 0
37744: PUSH
37745: EMPTY
37746: LIST
37747: LIST
37748: PUSH
37749: LD_INT 2
37751: PUSH
37752: LD_INT 1
37754: PUSH
37755: EMPTY
37756: LIST
37757: LIST
37758: PUSH
37759: LD_INT 2
37761: PUSH
37762: LD_INT 2
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: PUSH
37769: LD_INT 1
37771: PUSH
37772: LD_INT 2
37774: PUSH
37775: EMPTY
37776: LIST
37777: LIST
37778: PUSH
37779: LD_INT 0
37781: PUSH
37782: LD_INT 2
37784: PUSH
37785: EMPTY
37786: LIST
37787: LIST
37788: PUSH
37789: LD_INT 1
37791: NEG
37792: PUSH
37793: LD_INT 1
37795: PUSH
37796: EMPTY
37797: LIST
37798: LIST
37799: PUSH
37800: LD_INT 2
37802: NEG
37803: PUSH
37804: LD_INT 0
37806: PUSH
37807: EMPTY
37808: LIST
37809: LIST
37810: PUSH
37811: LD_INT 2
37813: NEG
37814: PUSH
37815: LD_INT 1
37817: NEG
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: PUSH
37823: LD_INT 2
37825: NEG
37826: PUSH
37827: LD_INT 2
37829: NEG
37830: PUSH
37831: EMPTY
37832: LIST
37833: LIST
37834: PUSH
37835: LD_INT 3
37837: PUSH
37838: LD_INT 1
37840: PUSH
37841: EMPTY
37842: LIST
37843: LIST
37844: PUSH
37845: LD_INT 3
37847: PUSH
37848: LD_INT 2
37850: PUSH
37851: EMPTY
37852: LIST
37853: LIST
37854: PUSH
37855: LD_INT 2
37857: PUSH
37858: LD_INT 3
37860: PUSH
37861: EMPTY
37862: LIST
37863: LIST
37864: PUSH
37865: LD_INT 1
37867: PUSH
37868: LD_INT 3
37870: PUSH
37871: EMPTY
37872: LIST
37873: LIST
37874: PUSH
37875: EMPTY
37876: LIST
37877: LIST
37878: LIST
37879: LIST
37880: LIST
37881: LIST
37882: LIST
37883: LIST
37884: LIST
37885: LIST
37886: LIST
37887: LIST
37888: LIST
37889: LIST
37890: LIST
37891: LIST
37892: LIST
37893: LIST
37894: LIST
37895: LIST
37896: LIST
37897: LIST
37898: LIST
37899: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37900: LD_ADDR_VAR 0 26
37904: PUSH
37905: LD_INT 0
37907: PUSH
37908: LD_INT 0
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: PUSH
37915: LD_INT 0
37917: PUSH
37918: LD_INT 1
37920: NEG
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: PUSH
37926: LD_INT 1
37928: PUSH
37929: LD_INT 0
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: PUSH
37936: LD_INT 1
37938: PUSH
37939: LD_INT 1
37941: PUSH
37942: EMPTY
37943: LIST
37944: LIST
37945: PUSH
37946: LD_INT 0
37948: PUSH
37949: LD_INT 1
37951: PUSH
37952: EMPTY
37953: LIST
37954: LIST
37955: PUSH
37956: LD_INT 1
37958: NEG
37959: PUSH
37960: LD_INT 0
37962: PUSH
37963: EMPTY
37964: LIST
37965: LIST
37966: PUSH
37967: LD_INT 1
37969: NEG
37970: PUSH
37971: LD_INT 1
37973: NEG
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: PUSH
37979: LD_INT 1
37981: NEG
37982: PUSH
37983: LD_INT 2
37985: NEG
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: PUSH
37991: LD_INT 0
37993: PUSH
37994: LD_INT 2
37996: NEG
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: PUSH
38002: LD_INT 1
38004: PUSH
38005: LD_INT 1
38007: NEG
38008: PUSH
38009: EMPTY
38010: LIST
38011: LIST
38012: PUSH
38013: LD_INT 2
38015: PUSH
38016: LD_INT 0
38018: PUSH
38019: EMPTY
38020: LIST
38021: LIST
38022: PUSH
38023: LD_INT 2
38025: PUSH
38026: LD_INT 1
38028: PUSH
38029: EMPTY
38030: LIST
38031: LIST
38032: PUSH
38033: LD_INT 2
38035: PUSH
38036: LD_INT 2
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: PUSH
38043: LD_INT 1
38045: PUSH
38046: LD_INT 2
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: PUSH
38053: LD_INT 0
38055: PUSH
38056: LD_INT 2
38058: PUSH
38059: EMPTY
38060: LIST
38061: LIST
38062: PUSH
38063: LD_INT 1
38065: NEG
38066: PUSH
38067: LD_INT 1
38069: PUSH
38070: EMPTY
38071: LIST
38072: LIST
38073: PUSH
38074: LD_INT 2
38076: NEG
38077: PUSH
38078: LD_INT 0
38080: PUSH
38081: EMPTY
38082: LIST
38083: LIST
38084: PUSH
38085: LD_INT 2
38087: NEG
38088: PUSH
38089: LD_INT 1
38091: NEG
38092: PUSH
38093: EMPTY
38094: LIST
38095: LIST
38096: PUSH
38097: LD_INT 2
38099: NEG
38100: PUSH
38101: LD_INT 2
38103: NEG
38104: PUSH
38105: EMPTY
38106: LIST
38107: LIST
38108: PUSH
38109: LD_INT 2
38111: PUSH
38112: LD_INT 3
38114: PUSH
38115: EMPTY
38116: LIST
38117: LIST
38118: PUSH
38119: LD_INT 1
38121: PUSH
38122: LD_INT 3
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: PUSH
38129: LD_INT 1
38131: NEG
38132: PUSH
38133: LD_INT 2
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: PUSH
38140: LD_INT 2
38142: NEG
38143: PUSH
38144: LD_INT 1
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: PUSH
38151: EMPTY
38152: LIST
38153: LIST
38154: LIST
38155: LIST
38156: LIST
38157: LIST
38158: LIST
38159: LIST
38160: LIST
38161: LIST
38162: LIST
38163: LIST
38164: LIST
38165: LIST
38166: LIST
38167: LIST
38168: LIST
38169: LIST
38170: LIST
38171: LIST
38172: LIST
38173: LIST
38174: LIST
38175: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38176: LD_ADDR_VAR 0 27
38180: PUSH
38181: LD_INT 0
38183: PUSH
38184: LD_INT 0
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: PUSH
38191: LD_INT 0
38193: PUSH
38194: LD_INT 1
38196: NEG
38197: PUSH
38198: EMPTY
38199: LIST
38200: LIST
38201: PUSH
38202: LD_INT 1
38204: PUSH
38205: LD_INT 0
38207: PUSH
38208: EMPTY
38209: LIST
38210: LIST
38211: PUSH
38212: LD_INT 1
38214: PUSH
38215: LD_INT 1
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: PUSH
38222: LD_INT 0
38224: PUSH
38225: LD_INT 1
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PUSH
38232: LD_INT 1
38234: NEG
38235: PUSH
38236: LD_INT 0
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: PUSH
38243: LD_INT 1
38245: NEG
38246: PUSH
38247: LD_INT 1
38249: NEG
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PUSH
38255: LD_INT 1
38257: NEG
38258: PUSH
38259: LD_INT 2
38261: NEG
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PUSH
38267: LD_INT 0
38269: PUSH
38270: LD_INT 2
38272: NEG
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PUSH
38278: LD_INT 1
38280: PUSH
38281: LD_INT 1
38283: NEG
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: LD_INT 2
38291: PUSH
38292: LD_INT 0
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: PUSH
38299: LD_INT 2
38301: PUSH
38302: LD_INT 1
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: PUSH
38309: LD_INT 2
38311: PUSH
38312: LD_INT 2
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: PUSH
38319: LD_INT 1
38321: PUSH
38322: LD_INT 2
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: PUSH
38329: LD_INT 0
38331: PUSH
38332: LD_INT 2
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: PUSH
38339: LD_INT 1
38341: NEG
38342: PUSH
38343: LD_INT 1
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: PUSH
38350: LD_INT 2
38352: NEG
38353: PUSH
38354: LD_INT 0
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: PUSH
38361: LD_INT 2
38363: NEG
38364: PUSH
38365: LD_INT 1
38367: NEG
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: PUSH
38373: LD_INT 2
38375: NEG
38376: PUSH
38377: LD_INT 2
38379: NEG
38380: PUSH
38381: EMPTY
38382: LIST
38383: LIST
38384: PUSH
38385: LD_INT 1
38387: NEG
38388: PUSH
38389: LD_INT 2
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: PUSH
38396: LD_INT 2
38398: NEG
38399: PUSH
38400: LD_INT 1
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: PUSH
38407: LD_INT 3
38409: NEG
38410: PUSH
38411: LD_INT 1
38413: NEG
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: PUSH
38419: LD_INT 3
38421: NEG
38422: PUSH
38423: LD_INT 2
38425: NEG
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: LIST
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38456: LD_ADDR_VAR 0 28
38460: PUSH
38461: LD_INT 0
38463: PUSH
38464: LD_INT 0
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: PUSH
38471: LD_INT 0
38473: PUSH
38474: LD_INT 1
38476: NEG
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: PUSH
38482: LD_INT 1
38484: PUSH
38485: LD_INT 0
38487: PUSH
38488: EMPTY
38489: LIST
38490: LIST
38491: PUSH
38492: LD_INT 1
38494: PUSH
38495: LD_INT 1
38497: PUSH
38498: EMPTY
38499: LIST
38500: LIST
38501: PUSH
38502: LD_INT 0
38504: PUSH
38505: LD_INT 1
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: PUSH
38512: LD_INT 1
38514: NEG
38515: PUSH
38516: LD_INT 0
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: PUSH
38523: LD_INT 1
38525: NEG
38526: PUSH
38527: LD_INT 1
38529: NEG
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: PUSH
38535: LD_INT 1
38537: NEG
38538: PUSH
38539: LD_INT 2
38541: NEG
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: PUSH
38547: LD_INT 0
38549: PUSH
38550: LD_INT 2
38552: NEG
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: PUSH
38558: LD_INT 1
38560: PUSH
38561: LD_INT 1
38563: NEG
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: LD_INT 2
38571: PUSH
38572: LD_INT 0
38574: PUSH
38575: EMPTY
38576: LIST
38577: LIST
38578: PUSH
38579: LD_INT 2
38581: PUSH
38582: LD_INT 1
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: PUSH
38589: LD_INT 2
38591: PUSH
38592: LD_INT 2
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: PUSH
38599: LD_INT 1
38601: PUSH
38602: LD_INT 2
38604: PUSH
38605: EMPTY
38606: LIST
38607: LIST
38608: PUSH
38609: LD_INT 0
38611: PUSH
38612: LD_INT 2
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: PUSH
38619: LD_INT 1
38621: NEG
38622: PUSH
38623: LD_INT 1
38625: PUSH
38626: EMPTY
38627: LIST
38628: LIST
38629: PUSH
38630: LD_INT 2
38632: NEG
38633: PUSH
38634: LD_INT 0
38636: PUSH
38637: EMPTY
38638: LIST
38639: LIST
38640: PUSH
38641: LD_INT 2
38643: NEG
38644: PUSH
38645: LD_INT 1
38647: NEG
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: PUSH
38653: LD_INT 2
38655: NEG
38656: PUSH
38657: LD_INT 2
38659: NEG
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: PUSH
38665: LD_INT 2
38667: NEG
38668: PUSH
38669: LD_INT 3
38671: NEG
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: PUSH
38677: LD_INT 1
38679: NEG
38680: PUSH
38681: LD_INT 3
38683: NEG
38684: PUSH
38685: EMPTY
38686: LIST
38687: LIST
38688: PUSH
38689: LD_INT 3
38691: NEG
38692: PUSH
38693: LD_INT 1
38695: NEG
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: PUSH
38701: LD_INT 3
38703: NEG
38704: PUSH
38705: LD_INT 2
38707: NEG
38708: PUSH
38709: EMPTY
38710: LIST
38711: LIST
38712: PUSH
38713: EMPTY
38714: LIST
38715: LIST
38716: LIST
38717: LIST
38718: LIST
38719: LIST
38720: LIST
38721: LIST
38722: LIST
38723: LIST
38724: LIST
38725: LIST
38726: LIST
38727: LIST
38728: LIST
38729: LIST
38730: LIST
38731: LIST
38732: LIST
38733: LIST
38734: LIST
38735: LIST
38736: LIST
38737: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38738: LD_ADDR_VAR 0 29
38742: PUSH
38743: LD_INT 0
38745: PUSH
38746: LD_INT 0
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: PUSH
38753: LD_INT 0
38755: PUSH
38756: LD_INT 1
38758: NEG
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: PUSH
38764: LD_INT 1
38766: PUSH
38767: LD_INT 0
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: PUSH
38774: LD_INT 1
38776: PUSH
38777: LD_INT 1
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: PUSH
38784: LD_INT 0
38786: PUSH
38787: LD_INT 1
38789: PUSH
38790: EMPTY
38791: LIST
38792: LIST
38793: PUSH
38794: LD_INT 1
38796: NEG
38797: PUSH
38798: LD_INT 0
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: PUSH
38805: LD_INT 1
38807: NEG
38808: PUSH
38809: LD_INT 1
38811: NEG
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PUSH
38817: LD_INT 1
38819: NEG
38820: PUSH
38821: LD_INT 2
38823: NEG
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: PUSH
38829: LD_INT 0
38831: PUSH
38832: LD_INT 2
38834: NEG
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: PUSH
38840: LD_INT 1
38842: PUSH
38843: LD_INT 1
38845: NEG
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PUSH
38851: LD_INT 2
38853: PUSH
38854: LD_INT 0
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: LD_INT 2
38863: PUSH
38864: LD_INT 1
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: PUSH
38871: LD_INT 1
38873: PUSH
38874: LD_INT 2
38876: PUSH
38877: EMPTY
38878: LIST
38879: LIST
38880: PUSH
38881: LD_INT 0
38883: PUSH
38884: LD_INT 2
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: LD_INT 1
38893: NEG
38894: PUSH
38895: LD_INT 1
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: PUSH
38902: LD_INT 2
38904: NEG
38905: PUSH
38906: LD_INT 1
38908: NEG
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: PUSH
38914: LD_INT 2
38916: NEG
38917: PUSH
38918: LD_INT 2
38920: NEG
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: PUSH
38926: LD_INT 2
38928: NEG
38929: PUSH
38930: LD_INT 3
38932: NEG
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: PUSH
38938: LD_INT 2
38940: PUSH
38941: LD_INT 1
38943: NEG
38944: PUSH
38945: EMPTY
38946: LIST
38947: LIST
38948: PUSH
38949: LD_INT 3
38951: PUSH
38952: LD_INT 1
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: PUSH
38959: LD_INT 1
38961: PUSH
38962: LD_INT 3
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: PUSH
38969: LD_INT 1
38971: NEG
38972: PUSH
38973: LD_INT 2
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: PUSH
38980: LD_INT 3
38982: NEG
38983: PUSH
38984: LD_INT 2
38986: NEG
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: LIST
38996: LIST
38997: LIST
38998: LIST
38999: LIST
39000: LIST
39001: LIST
39002: LIST
39003: LIST
39004: LIST
39005: LIST
39006: LIST
39007: LIST
39008: LIST
39009: LIST
39010: LIST
39011: LIST
39012: LIST
39013: LIST
39014: LIST
39015: LIST
39016: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39017: LD_ADDR_VAR 0 30
39021: PUSH
39022: LD_INT 0
39024: PUSH
39025: LD_INT 0
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: PUSH
39032: LD_INT 0
39034: PUSH
39035: LD_INT 1
39037: NEG
39038: PUSH
39039: EMPTY
39040: LIST
39041: LIST
39042: PUSH
39043: LD_INT 1
39045: PUSH
39046: LD_INT 0
39048: PUSH
39049: EMPTY
39050: LIST
39051: LIST
39052: PUSH
39053: LD_INT 1
39055: PUSH
39056: LD_INT 1
39058: PUSH
39059: EMPTY
39060: LIST
39061: LIST
39062: PUSH
39063: LD_INT 0
39065: PUSH
39066: LD_INT 1
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: PUSH
39073: LD_INT 1
39075: NEG
39076: PUSH
39077: LD_INT 0
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: PUSH
39084: LD_INT 1
39086: NEG
39087: PUSH
39088: LD_INT 1
39090: NEG
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: PUSH
39096: LD_INT 1
39098: NEG
39099: PUSH
39100: LD_INT 2
39102: NEG
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: PUSH
39108: LD_INT 0
39110: PUSH
39111: LD_INT 2
39113: NEG
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: PUSH
39119: LD_INT 1
39121: PUSH
39122: LD_INT 1
39124: NEG
39125: PUSH
39126: EMPTY
39127: LIST
39128: LIST
39129: PUSH
39130: LD_INT 2
39132: PUSH
39133: LD_INT 0
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PUSH
39140: LD_INT 2
39142: PUSH
39143: LD_INT 1
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: PUSH
39150: LD_INT 2
39152: PUSH
39153: LD_INT 2
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: PUSH
39160: LD_INT 1
39162: PUSH
39163: LD_INT 2
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: PUSH
39170: LD_INT 1
39172: NEG
39173: PUSH
39174: LD_INT 1
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: PUSH
39181: LD_INT 2
39183: NEG
39184: PUSH
39185: LD_INT 0
39187: PUSH
39188: EMPTY
39189: LIST
39190: LIST
39191: PUSH
39192: LD_INT 2
39194: NEG
39195: PUSH
39196: LD_INT 1
39198: NEG
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: LD_INT 1
39206: NEG
39207: PUSH
39208: LD_INT 3
39210: NEG
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: PUSH
39216: LD_INT 1
39218: PUSH
39219: LD_INT 2
39221: NEG
39222: PUSH
39223: EMPTY
39224: LIST
39225: LIST
39226: PUSH
39227: LD_INT 3
39229: PUSH
39230: LD_INT 2
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: PUSH
39237: LD_INT 2
39239: PUSH
39240: LD_INT 3
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: PUSH
39247: LD_INT 2
39249: NEG
39250: PUSH
39251: LD_INT 1
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: PUSH
39258: LD_INT 3
39260: NEG
39261: PUSH
39262: LD_INT 1
39264: NEG
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: LIST
39274: LIST
39275: LIST
39276: LIST
39277: LIST
39278: LIST
39279: LIST
39280: LIST
39281: LIST
39282: LIST
39283: LIST
39284: LIST
39285: LIST
39286: LIST
39287: LIST
39288: LIST
39289: LIST
39290: LIST
39291: LIST
39292: LIST
39293: LIST
39294: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39295: LD_ADDR_VAR 0 31
39299: PUSH
39300: LD_INT 0
39302: PUSH
39303: LD_INT 0
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: PUSH
39310: LD_INT 0
39312: PUSH
39313: LD_INT 1
39315: NEG
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: PUSH
39321: LD_INT 1
39323: PUSH
39324: LD_INT 0
39326: PUSH
39327: EMPTY
39328: LIST
39329: LIST
39330: PUSH
39331: LD_INT 1
39333: PUSH
39334: LD_INT 1
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: PUSH
39341: LD_INT 0
39343: PUSH
39344: LD_INT 1
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: PUSH
39351: LD_INT 1
39353: NEG
39354: PUSH
39355: LD_INT 0
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: PUSH
39362: LD_INT 1
39364: NEG
39365: PUSH
39366: LD_INT 1
39368: NEG
39369: PUSH
39370: EMPTY
39371: LIST
39372: LIST
39373: PUSH
39374: LD_INT 1
39376: NEG
39377: PUSH
39378: LD_INT 2
39380: NEG
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: PUSH
39386: LD_INT 1
39388: PUSH
39389: LD_INT 1
39391: NEG
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: PUSH
39397: LD_INT 2
39399: PUSH
39400: LD_INT 0
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: PUSH
39407: LD_INT 2
39409: PUSH
39410: LD_INT 1
39412: PUSH
39413: EMPTY
39414: LIST
39415: LIST
39416: PUSH
39417: LD_INT 2
39419: PUSH
39420: LD_INT 2
39422: PUSH
39423: EMPTY
39424: LIST
39425: LIST
39426: PUSH
39427: LD_INT 1
39429: PUSH
39430: LD_INT 2
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 0
39439: PUSH
39440: LD_INT 2
39442: PUSH
39443: EMPTY
39444: LIST
39445: LIST
39446: PUSH
39447: LD_INT 1
39449: NEG
39450: PUSH
39451: LD_INT 1
39453: PUSH
39454: EMPTY
39455: LIST
39456: LIST
39457: PUSH
39458: LD_INT 2
39460: NEG
39461: PUSH
39462: LD_INT 1
39464: NEG
39465: PUSH
39466: EMPTY
39467: LIST
39468: LIST
39469: PUSH
39470: LD_INT 2
39472: NEG
39473: PUSH
39474: LD_INT 2
39476: NEG
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: PUSH
39482: LD_INT 2
39484: NEG
39485: PUSH
39486: LD_INT 3
39488: NEG
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: PUSH
39494: LD_INT 2
39496: PUSH
39497: LD_INT 1
39499: NEG
39500: PUSH
39501: EMPTY
39502: LIST
39503: LIST
39504: PUSH
39505: LD_INT 3
39507: PUSH
39508: LD_INT 1
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: PUSH
39515: LD_INT 1
39517: PUSH
39518: LD_INT 3
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: PUSH
39525: LD_INT 1
39527: NEG
39528: PUSH
39529: LD_INT 2
39531: PUSH
39532: EMPTY
39533: LIST
39534: LIST
39535: PUSH
39536: LD_INT 3
39538: NEG
39539: PUSH
39540: LD_INT 2
39542: NEG
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: LIST
39569: LIST
39570: LIST
39571: LIST
39572: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39573: LD_ADDR_VAR 0 32
39577: PUSH
39578: LD_INT 0
39580: PUSH
39581: LD_INT 0
39583: PUSH
39584: EMPTY
39585: LIST
39586: LIST
39587: PUSH
39588: LD_INT 0
39590: PUSH
39591: LD_INT 1
39593: NEG
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: PUSH
39599: LD_INT 1
39601: PUSH
39602: LD_INT 0
39604: PUSH
39605: EMPTY
39606: LIST
39607: LIST
39608: PUSH
39609: LD_INT 1
39611: PUSH
39612: LD_INT 1
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: PUSH
39619: LD_INT 0
39621: PUSH
39622: LD_INT 1
39624: PUSH
39625: EMPTY
39626: LIST
39627: LIST
39628: PUSH
39629: LD_INT 1
39631: NEG
39632: PUSH
39633: LD_INT 0
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: PUSH
39640: LD_INT 1
39642: NEG
39643: PUSH
39644: LD_INT 1
39646: NEG
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: PUSH
39652: LD_INT 1
39654: NEG
39655: PUSH
39656: LD_INT 2
39658: NEG
39659: PUSH
39660: EMPTY
39661: LIST
39662: LIST
39663: PUSH
39664: LD_INT 0
39666: PUSH
39667: LD_INT 2
39669: NEG
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: PUSH
39675: LD_INT 1
39677: PUSH
39678: LD_INT 1
39680: NEG
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: LD_INT 2
39688: PUSH
39689: LD_INT 1
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: PUSH
39696: LD_INT 2
39698: PUSH
39699: LD_INT 2
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: PUSH
39706: LD_INT 1
39708: PUSH
39709: LD_INT 2
39711: PUSH
39712: EMPTY
39713: LIST
39714: LIST
39715: PUSH
39716: LD_INT 0
39718: PUSH
39719: LD_INT 2
39721: PUSH
39722: EMPTY
39723: LIST
39724: LIST
39725: PUSH
39726: LD_INT 1
39728: NEG
39729: PUSH
39730: LD_INT 1
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: PUSH
39737: LD_INT 2
39739: NEG
39740: PUSH
39741: LD_INT 0
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: PUSH
39748: LD_INT 2
39750: NEG
39751: PUSH
39752: LD_INT 1
39754: NEG
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: PUSH
39760: LD_INT 1
39762: NEG
39763: PUSH
39764: LD_INT 3
39766: NEG
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: PUSH
39772: LD_INT 1
39774: PUSH
39775: LD_INT 2
39777: NEG
39778: PUSH
39779: EMPTY
39780: LIST
39781: LIST
39782: PUSH
39783: LD_INT 3
39785: PUSH
39786: LD_INT 2
39788: PUSH
39789: EMPTY
39790: LIST
39791: LIST
39792: PUSH
39793: LD_INT 2
39795: PUSH
39796: LD_INT 3
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: PUSH
39803: LD_INT 2
39805: NEG
39806: PUSH
39807: LD_INT 1
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: PUSH
39814: LD_INT 3
39816: NEG
39817: PUSH
39818: LD_INT 1
39820: NEG
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: LIST
39830: LIST
39831: LIST
39832: LIST
39833: LIST
39834: LIST
39835: LIST
39836: LIST
39837: LIST
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: LIST
39843: LIST
39844: LIST
39845: LIST
39846: LIST
39847: LIST
39848: LIST
39849: LIST
39850: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39851: LD_ADDR_VAR 0 33
39855: PUSH
39856: LD_INT 0
39858: PUSH
39859: LD_INT 0
39861: PUSH
39862: EMPTY
39863: LIST
39864: LIST
39865: PUSH
39866: LD_INT 0
39868: PUSH
39869: LD_INT 1
39871: NEG
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: PUSH
39877: LD_INT 1
39879: PUSH
39880: LD_INT 0
39882: PUSH
39883: EMPTY
39884: LIST
39885: LIST
39886: PUSH
39887: LD_INT 1
39889: PUSH
39890: LD_INT 1
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: PUSH
39897: LD_INT 0
39899: PUSH
39900: LD_INT 1
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: PUSH
39907: LD_INT 1
39909: NEG
39910: PUSH
39911: LD_INT 0
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PUSH
39918: LD_INT 1
39920: NEG
39921: PUSH
39922: LD_INT 1
39924: NEG
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: LD_INT 1
39932: NEG
39933: PUSH
39934: LD_INT 2
39936: NEG
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: PUSH
39942: LD_INT 1
39944: PUSH
39945: LD_INT 1
39947: NEG
39948: PUSH
39949: EMPTY
39950: LIST
39951: LIST
39952: PUSH
39953: LD_INT 2
39955: PUSH
39956: LD_INT 0
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: PUSH
39963: LD_INT 2
39965: PUSH
39966: LD_INT 1
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: PUSH
39973: LD_INT 1
39975: PUSH
39976: LD_INT 2
39978: PUSH
39979: EMPTY
39980: LIST
39981: LIST
39982: PUSH
39983: LD_INT 0
39985: PUSH
39986: LD_INT 2
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: PUSH
39993: LD_INT 1
39995: NEG
39996: PUSH
39997: LD_INT 1
39999: PUSH
40000: EMPTY
40001: LIST
40002: LIST
40003: PUSH
40004: LD_INT 2
40006: NEG
40007: PUSH
40008: LD_INT 0
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: PUSH
40015: LD_INT 2
40017: NEG
40018: PUSH
40019: LD_INT 1
40021: NEG
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: PUSH
40027: LD_INT 2
40029: NEG
40030: PUSH
40031: LD_INT 2
40033: NEG
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: PUSH
40039: LD_INT 2
40041: NEG
40042: PUSH
40043: LD_INT 3
40045: NEG
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: PUSH
40051: LD_INT 2
40053: PUSH
40054: LD_INT 1
40056: NEG
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: LD_INT 3
40064: PUSH
40065: LD_INT 1
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: PUSH
40072: LD_INT 1
40074: PUSH
40075: LD_INT 3
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PUSH
40082: LD_INT 1
40084: NEG
40085: PUSH
40086: LD_INT 2
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: PUSH
40093: LD_INT 3
40095: NEG
40096: PUSH
40097: LD_INT 2
40099: NEG
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: LIST
40109: LIST
40110: LIST
40111: LIST
40112: LIST
40113: LIST
40114: LIST
40115: LIST
40116: LIST
40117: LIST
40118: LIST
40119: LIST
40120: LIST
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: LIST
40126: LIST
40127: LIST
40128: LIST
40129: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40130: LD_ADDR_VAR 0 34
40134: PUSH
40135: LD_INT 0
40137: PUSH
40138: LD_INT 0
40140: PUSH
40141: EMPTY
40142: LIST
40143: LIST
40144: PUSH
40145: LD_INT 0
40147: PUSH
40148: LD_INT 1
40150: NEG
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: PUSH
40156: LD_INT 1
40158: PUSH
40159: LD_INT 0
40161: PUSH
40162: EMPTY
40163: LIST
40164: LIST
40165: PUSH
40166: LD_INT 1
40168: PUSH
40169: LD_INT 1
40171: PUSH
40172: EMPTY
40173: LIST
40174: LIST
40175: PUSH
40176: LD_INT 0
40178: PUSH
40179: LD_INT 1
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: PUSH
40186: LD_INT 1
40188: NEG
40189: PUSH
40190: LD_INT 0
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: PUSH
40197: LD_INT 1
40199: NEG
40200: PUSH
40201: LD_INT 1
40203: NEG
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: LD_INT 1
40211: NEG
40212: PUSH
40213: LD_INT 2
40215: NEG
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: LD_INT 0
40223: PUSH
40224: LD_INT 2
40226: NEG
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PUSH
40232: LD_INT 1
40234: PUSH
40235: LD_INT 1
40237: NEG
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PUSH
40243: LD_INT 2
40245: PUSH
40246: LD_INT 1
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 2
40255: PUSH
40256: LD_INT 2
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 1
40265: PUSH
40266: LD_INT 2
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: PUSH
40273: LD_INT 1
40275: NEG
40276: PUSH
40277: LD_INT 1
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: PUSH
40284: LD_INT 2
40286: NEG
40287: PUSH
40288: LD_INT 0
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: LD_INT 2
40297: NEG
40298: PUSH
40299: LD_INT 1
40301: NEG
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: PUSH
40307: LD_INT 2
40309: NEG
40310: PUSH
40311: LD_INT 2
40313: NEG
40314: PUSH
40315: EMPTY
40316: LIST
40317: LIST
40318: PUSH
40319: LD_INT 1
40321: NEG
40322: PUSH
40323: LD_INT 3
40325: NEG
40326: PUSH
40327: EMPTY
40328: LIST
40329: LIST
40330: PUSH
40331: LD_INT 1
40333: PUSH
40334: LD_INT 2
40336: NEG
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: PUSH
40342: LD_INT 3
40344: PUSH
40345: LD_INT 2
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: PUSH
40352: LD_INT 2
40354: PUSH
40355: LD_INT 3
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: PUSH
40362: LD_INT 2
40364: NEG
40365: PUSH
40366: LD_INT 1
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PUSH
40373: LD_INT 3
40375: NEG
40376: PUSH
40377: LD_INT 1
40379: NEG
40380: PUSH
40381: EMPTY
40382: LIST
40383: LIST
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: LIST
40389: LIST
40390: LIST
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: LIST
40407: LIST
40408: LIST
40409: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40410: LD_ADDR_VAR 0 35
40414: PUSH
40415: LD_INT 0
40417: PUSH
40418: LD_INT 0
40420: PUSH
40421: EMPTY
40422: LIST
40423: LIST
40424: PUSH
40425: LD_INT 0
40427: PUSH
40428: LD_INT 1
40430: NEG
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 1
40438: PUSH
40439: LD_INT 0
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: LD_INT 1
40448: PUSH
40449: LD_INT 1
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: LD_INT 0
40458: PUSH
40459: LD_INT 1
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PUSH
40466: LD_INT 1
40468: NEG
40469: PUSH
40470: LD_INT 0
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: PUSH
40477: LD_INT 1
40479: NEG
40480: PUSH
40481: LD_INT 1
40483: NEG
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PUSH
40489: LD_INT 2
40491: PUSH
40492: LD_INT 1
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: PUSH
40499: LD_INT 2
40501: NEG
40502: PUSH
40503: LD_INT 1
40505: NEG
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: LIST
40515: LIST
40516: LIST
40517: LIST
40518: LIST
40519: LIST
40520: LIST
40521: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40522: LD_ADDR_VAR 0 36
40526: PUSH
40527: LD_INT 0
40529: PUSH
40530: LD_INT 0
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: LD_INT 0
40539: PUSH
40540: LD_INT 1
40542: NEG
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: PUSH
40548: LD_INT 1
40550: PUSH
40551: LD_INT 0
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PUSH
40558: LD_INT 1
40560: PUSH
40561: LD_INT 1
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: LD_INT 0
40570: PUSH
40571: LD_INT 1
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: LD_INT 1
40580: NEG
40581: PUSH
40582: LD_INT 0
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: PUSH
40589: LD_INT 1
40591: NEG
40592: PUSH
40593: LD_INT 1
40595: NEG
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PUSH
40601: LD_INT 1
40603: NEG
40604: PUSH
40605: LD_INT 2
40607: NEG
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: PUSH
40613: LD_INT 1
40615: PUSH
40616: LD_INT 2
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40634: LD_ADDR_VAR 0 37
40638: PUSH
40639: LD_INT 0
40641: PUSH
40642: LD_INT 0
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: PUSH
40649: LD_INT 0
40651: PUSH
40652: LD_INT 1
40654: NEG
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: PUSH
40660: LD_INT 1
40662: PUSH
40663: LD_INT 0
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PUSH
40670: LD_INT 1
40672: PUSH
40673: LD_INT 1
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PUSH
40680: LD_INT 0
40682: PUSH
40683: LD_INT 1
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: PUSH
40690: LD_INT 1
40692: NEG
40693: PUSH
40694: LD_INT 0
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 1
40703: NEG
40704: PUSH
40705: LD_INT 1
40707: NEG
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: LD_INT 1
40715: PUSH
40716: LD_INT 1
40718: NEG
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: LD_INT 1
40726: NEG
40727: PUSH
40728: LD_INT 1
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: LIST
40739: LIST
40740: LIST
40741: LIST
40742: LIST
40743: LIST
40744: LIST
40745: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40746: LD_ADDR_VAR 0 38
40750: PUSH
40751: LD_INT 0
40753: PUSH
40754: LD_INT 0
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: PUSH
40761: LD_INT 0
40763: PUSH
40764: LD_INT 1
40766: NEG
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: PUSH
40772: LD_INT 1
40774: PUSH
40775: LD_INT 0
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: PUSH
40782: LD_INT 1
40784: PUSH
40785: LD_INT 1
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: PUSH
40792: LD_INT 0
40794: PUSH
40795: LD_INT 1
40797: PUSH
40798: EMPTY
40799: LIST
40800: LIST
40801: PUSH
40802: LD_INT 1
40804: NEG
40805: PUSH
40806: LD_INT 0
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: PUSH
40813: LD_INT 1
40815: NEG
40816: PUSH
40817: LD_INT 1
40819: NEG
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PUSH
40825: LD_INT 2
40827: PUSH
40828: LD_INT 1
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: PUSH
40835: LD_INT 2
40837: NEG
40838: PUSH
40839: LD_INT 1
40841: NEG
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: LIST
40851: LIST
40852: LIST
40853: LIST
40854: LIST
40855: LIST
40856: LIST
40857: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40858: LD_ADDR_VAR 0 39
40862: PUSH
40863: LD_INT 0
40865: PUSH
40866: LD_INT 0
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: PUSH
40873: LD_INT 0
40875: PUSH
40876: LD_INT 1
40878: NEG
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: PUSH
40884: LD_INT 1
40886: PUSH
40887: LD_INT 0
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: PUSH
40894: LD_INT 1
40896: PUSH
40897: LD_INT 1
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: PUSH
40904: LD_INT 0
40906: PUSH
40907: LD_INT 1
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: PUSH
40914: LD_INT 1
40916: NEG
40917: PUSH
40918: LD_INT 0
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: PUSH
40925: LD_INT 1
40927: NEG
40928: PUSH
40929: LD_INT 1
40931: NEG
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: LD_INT 1
40939: NEG
40940: PUSH
40941: LD_INT 2
40943: NEG
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: LD_INT 1
40951: PUSH
40952: LD_INT 2
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40970: LD_ADDR_VAR 0 40
40974: PUSH
40975: LD_INT 0
40977: PUSH
40978: LD_INT 0
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: PUSH
40985: LD_INT 0
40987: PUSH
40988: LD_INT 1
40990: NEG
40991: PUSH
40992: EMPTY
40993: LIST
40994: LIST
40995: PUSH
40996: LD_INT 1
40998: PUSH
40999: LD_INT 0
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: PUSH
41006: LD_INT 1
41008: PUSH
41009: LD_INT 1
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: PUSH
41016: LD_INT 0
41018: PUSH
41019: LD_INT 1
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: PUSH
41026: LD_INT 1
41028: NEG
41029: PUSH
41030: LD_INT 0
41032: PUSH
41033: EMPTY
41034: LIST
41035: LIST
41036: PUSH
41037: LD_INT 1
41039: NEG
41040: PUSH
41041: LD_INT 1
41043: NEG
41044: PUSH
41045: EMPTY
41046: LIST
41047: LIST
41048: PUSH
41049: LD_INT 1
41051: PUSH
41052: LD_INT 1
41054: NEG
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PUSH
41060: LD_INT 1
41062: NEG
41063: PUSH
41064: LD_INT 1
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: LIST
41075: LIST
41076: LIST
41077: LIST
41078: LIST
41079: LIST
41080: LIST
41081: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41082: LD_ADDR_VAR 0 41
41086: PUSH
41087: LD_INT 0
41089: PUSH
41090: LD_INT 0
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: PUSH
41097: LD_INT 0
41099: PUSH
41100: LD_INT 1
41102: NEG
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: PUSH
41108: LD_INT 1
41110: PUSH
41111: LD_INT 0
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: PUSH
41118: LD_INT 1
41120: PUSH
41121: LD_INT 1
41123: PUSH
41124: EMPTY
41125: LIST
41126: LIST
41127: PUSH
41128: LD_INT 0
41130: PUSH
41131: LD_INT 1
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: PUSH
41138: LD_INT 1
41140: NEG
41141: PUSH
41142: LD_INT 0
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: PUSH
41149: LD_INT 1
41151: NEG
41152: PUSH
41153: LD_INT 1
41155: NEG
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: PUSH
41161: LD_INT 1
41163: NEG
41164: PUSH
41165: LD_INT 2
41167: NEG
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: PUSH
41173: LD_INT 1
41175: PUSH
41176: LD_INT 1
41178: NEG
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: PUSH
41184: LD_INT 2
41186: PUSH
41187: LD_INT 0
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: PUSH
41194: LD_INT 2
41196: PUSH
41197: LD_INT 1
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: LD_INT 2
41206: PUSH
41207: LD_INT 2
41209: PUSH
41210: EMPTY
41211: LIST
41212: LIST
41213: PUSH
41214: LD_INT 1
41216: PUSH
41217: LD_INT 2
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PUSH
41224: LD_INT 1
41226: NEG
41227: PUSH
41228: LD_INT 1
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: PUSH
41235: LD_INT 2
41237: NEG
41238: PUSH
41239: LD_INT 0
41241: PUSH
41242: EMPTY
41243: LIST
41244: LIST
41245: PUSH
41246: LD_INT 2
41248: NEG
41249: PUSH
41250: LD_INT 1
41252: NEG
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: PUSH
41258: LD_INT 2
41260: NEG
41261: PUSH
41262: LD_INT 2
41264: NEG
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: PUSH
41270: LD_INT 2
41272: NEG
41273: PUSH
41274: LD_INT 3
41276: NEG
41277: PUSH
41278: EMPTY
41279: LIST
41280: LIST
41281: PUSH
41282: LD_INT 2
41284: PUSH
41285: LD_INT 1
41287: NEG
41288: PUSH
41289: EMPTY
41290: LIST
41291: LIST
41292: PUSH
41293: LD_INT 3
41295: PUSH
41296: LD_INT 0
41298: PUSH
41299: EMPTY
41300: LIST
41301: LIST
41302: PUSH
41303: LD_INT 3
41305: PUSH
41306: LD_INT 1
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: PUSH
41313: LD_INT 3
41315: PUSH
41316: LD_INT 2
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: PUSH
41323: LD_INT 3
41325: PUSH
41326: LD_INT 3
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: PUSH
41333: LD_INT 2
41335: PUSH
41336: LD_INT 3
41338: PUSH
41339: EMPTY
41340: LIST
41341: LIST
41342: PUSH
41343: LD_INT 2
41345: NEG
41346: PUSH
41347: LD_INT 1
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: PUSH
41354: LD_INT 3
41356: NEG
41357: PUSH
41358: LD_INT 0
41360: PUSH
41361: EMPTY
41362: LIST
41363: LIST
41364: PUSH
41365: LD_INT 3
41367: NEG
41368: PUSH
41369: LD_INT 1
41371: NEG
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 3
41379: NEG
41380: PUSH
41381: LD_INT 2
41383: NEG
41384: PUSH
41385: EMPTY
41386: LIST
41387: LIST
41388: PUSH
41389: LD_INT 3
41391: NEG
41392: PUSH
41393: LD_INT 3
41395: NEG
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: LIST
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: LIST
41430: LIST
41431: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41432: LD_ADDR_VAR 0 42
41436: PUSH
41437: LD_INT 0
41439: PUSH
41440: LD_INT 0
41442: PUSH
41443: EMPTY
41444: LIST
41445: LIST
41446: PUSH
41447: LD_INT 0
41449: PUSH
41450: LD_INT 1
41452: NEG
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 1
41460: PUSH
41461: LD_INT 0
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 1
41470: PUSH
41471: LD_INT 1
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: LD_INT 0
41480: PUSH
41481: LD_INT 1
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 1
41490: NEG
41491: PUSH
41492: LD_INT 0
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: PUSH
41499: LD_INT 1
41501: NEG
41502: PUSH
41503: LD_INT 1
41505: NEG
41506: PUSH
41507: EMPTY
41508: LIST
41509: LIST
41510: PUSH
41511: LD_INT 1
41513: NEG
41514: PUSH
41515: LD_INT 2
41517: NEG
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PUSH
41523: LD_INT 0
41525: PUSH
41526: LD_INT 2
41528: NEG
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: PUSH
41534: LD_INT 1
41536: PUSH
41537: LD_INT 1
41539: NEG
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: PUSH
41545: LD_INT 2
41547: PUSH
41548: LD_INT 1
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: PUSH
41555: LD_INT 2
41557: PUSH
41558: LD_INT 2
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: PUSH
41565: LD_INT 1
41567: PUSH
41568: LD_INT 2
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: PUSH
41575: LD_INT 0
41577: PUSH
41578: LD_INT 2
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: PUSH
41585: LD_INT 1
41587: NEG
41588: PUSH
41589: LD_INT 1
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: LD_INT 2
41598: NEG
41599: PUSH
41600: LD_INT 1
41602: NEG
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: LD_INT 2
41610: NEG
41611: PUSH
41612: LD_INT 2
41614: NEG
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: LD_INT 2
41622: NEG
41623: PUSH
41624: LD_INT 3
41626: NEG
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: LD_INT 1
41634: NEG
41635: PUSH
41636: LD_INT 3
41638: NEG
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: PUSH
41644: LD_INT 0
41646: PUSH
41647: LD_INT 3
41649: NEG
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: PUSH
41655: LD_INT 1
41657: PUSH
41658: LD_INT 2
41660: NEG
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: PUSH
41666: LD_INT 3
41668: PUSH
41669: LD_INT 2
41671: PUSH
41672: EMPTY
41673: LIST
41674: LIST
41675: PUSH
41676: LD_INT 3
41678: PUSH
41679: LD_INT 3
41681: PUSH
41682: EMPTY
41683: LIST
41684: LIST
41685: PUSH
41686: LD_INT 2
41688: PUSH
41689: LD_INT 3
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: PUSH
41696: LD_INT 1
41698: PUSH
41699: LD_INT 3
41701: PUSH
41702: EMPTY
41703: LIST
41704: LIST
41705: PUSH
41706: LD_INT 0
41708: PUSH
41709: LD_INT 3
41711: PUSH
41712: EMPTY
41713: LIST
41714: LIST
41715: PUSH
41716: LD_INT 1
41718: NEG
41719: PUSH
41720: LD_INT 2
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: PUSH
41727: LD_INT 3
41729: NEG
41730: PUSH
41731: LD_INT 2
41733: NEG
41734: PUSH
41735: EMPTY
41736: LIST
41737: LIST
41738: PUSH
41739: LD_INT 3
41741: NEG
41742: PUSH
41743: LD_INT 3
41745: NEG
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: LIST
41755: LIST
41756: LIST
41757: LIST
41758: LIST
41759: LIST
41760: LIST
41761: LIST
41762: LIST
41763: LIST
41764: LIST
41765: LIST
41766: LIST
41767: LIST
41768: LIST
41769: LIST
41770: LIST
41771: LIST
41772: LIST
41773: LIST
41774: LIST
41775: LIST
41776: LIST
41777: LIST
41778: LIST
41779: LIST
41780: LIST
41781: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41782: LD_ADDR_VAR 0 43
41786: PUSH
41787: LD_INT 0
41789: PUSH
41790: LD_INT 0
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: PUSH
41797: LD_INT 0
41799: PUSH
41800: LD_INT 1
41802: NEG
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: PUSH
41808: LD_INT 1
41810: PUSH
41811: LD_INT 0
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: PUSH
41818: LD_INT 1
41820: PUSH
41821: LD_INT 1
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: PUSH
41828: LD_INT 0
41830: PUSH
41831: LD_INT 1
41833: PUSH
41834: EMPTY
41835: LIST
41836: LIST
41837: PUSH
41838: LD_INT 1
41840: NEG
41841: PUSH
41842: LD_INT 0
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: PUSH
41849: LD_INT 1
41851: NEG
41852: PUSH
41853: LD_INT 1
41855: NEG
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: LD_INT 1
41863: NEG
41864: PUSH
41865: LD_INT 2
41867: NEG
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PUSH
41873: LD_INT 0
41875: PUSH
41876: LD_INT 2
41878: NEG
41879: PUSH
41880: EMPTY
41881: LIST
41882: LIST
41883: PUSH
41884: LD_INT 1
41886: PUSH
41887: LD_INT 1
41889: NEG
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: PUSH
41895: LD_INT 2
41897: PUSH
41898: LD_INT 0
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: PUSH
41905: LD_INT 2
41907: PUSH
41908: LD_INT 1
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: PUSH
41915: LD_INT 1
41917: PUSH
41918: LD_INT 2
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: LD_INT 0
41927: PUSH
41928: LD_INT 2
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: LD_INT 1
41937: NEG
41938: PUSH
41939: LD_INT 1
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PUSH
41946: LD_INT 2
41948: NEG
41949: PUSH
41950: LD_INT 0
41952: PUSH
41953: EMPTY
41954: LIST
41955: LIST
41956: PUSH
41957: LD_INT 2
41959: NEG
41960: PUSH
41961: LD_INT 1
41963: NEG
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 1
41971: NEG
41972: PUSH
41973: LD_INT 3
41975: NEG
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: PUSH
41981: LD_INT 0
41983: PUSH
41984: LD_INT 3
41986: NEG
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: PUSH
41992: LD_INT 1
41994: PUSH
41995: LD_INT 2
41997: NEG
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: PUSH
42003: LD_INT 2
42005: PUSH
42006: LD_INT 1
42008: NEG
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: PUSH
42014: LD_INT 3
42016: PUSH
42017: LD_INT 0
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: PUSH
42024: LD_INT 3
42026: PUSH
42027: LD_INT 1
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: PUSH
42034: LD_INT 1
42036: PUSH
42037: LD_INT 3
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PUSH
42044: LD_INT 0
42046: PUSH
42047: LD_INT 3
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: PUSH
42054: LD_INT 1
42056: NEG
42057: PUSH
42058: LD_INT 2
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: PUSH
42065: LD_INT 2
42067: NEG
42068: PUSH
42069: LD_INT 1
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: PUSH
42076: LD_INT 3
42078: NEG
42079: PUSH
42080: LD_INT 0
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: PUSH
42087: LD_INT 3
42089: NEG
42090: PUSH
42091: LD_INT 1
42093: NEG
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: LIST
42105: LIST
42106: LIST
42107: LIST
42108: LIST
42109: LIST
42110: LIST
42111: LIST
42112: LIST
42113: LIST
42114: LIST
42115: LIST
42116: LIST
42117: LIST
42118: LIST
42119: LIST
42120: LIST
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42130: LD_ADDR_VAR 0 44
42134: PUSH
42135: LD_INT 0
42137: PUSH
42138: LD_INT 0
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: LD_INT 0
42147: PUSH
42148: LD_INT 1
42150: NEG
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 1
42158: PUSH
42159: LD_INT 0
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PUSH
42166: LD_INT 1
42168: PUSH
42169: LD_INT 1
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: PUSH
42176: LD_INT 0
42178: PUSH
42179: LD_INT 1
42181: PUSH
42182: EMPTY
42183: LIST
42184: LIST
42185: PUSH
42186: LD_INT 1
42188: NEG
42189: PUSH
42190: LD_INT 0
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: PUSH
42197: LD_INT 1
42199: NEG
42200: PUSH
42201: LD_INT 1
42203: NEG
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: LD_INT 1
42211: NEG
42212: PUSH
42213: LD_INT 2
42215: NEG
42216: PUSH
42217: EMPTY
42218: LIST
42219: LIST
42220: PUSH
42221: LD_INT 1
42223: PUSH
42224: LD_INT 1
42226: NEG
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: PUSH
42232: LD_INT 2
42234: PUSH
42235: LD_INT 0
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: PUSH
42242: LD_INT 2
42244: PUSH
42245: LD_INT 1
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: PUSH
42252: LD_INT 2
42254: PUSH
42255: LD_INT 2
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: PUSH
42262: LD_INT 1
42264: PUSH
42265: LD_INT 2
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 1
42274: NEG
42275: PUSH
42276: LD_INT 1
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PUSH
42283: LD_INT 2
42285: NEG
42286: PUSH
42287: LD_INT 0
42289: PUSH
42290: EMPTY
42291: LIST
42292: LIST
42293: PUSH
42294: LD_INT 2
42296: NEG
42297: PUSH
42298: LD_INT 1
42300: NEG
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: PUSH
42306: LD_INT 2
42308: NEG
42309: PUSH
42310: LD_INT 2
42312: NEG
42313: PUSH
42314: EMPTY
42315: LIST
42316: LIST
42317: PUSH
42318: LD_INT 2
42320: NEG
42321: PUSH
42322: LD_INT 3
42324: NEG
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: PUSH
42330: LD_INT 2
42332: PUSH
42333: LD_INT 1
42335: NEG
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: PUSH
42341: LD_INT 3
42343: PUSH
42344: LD_INT 0
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: PUSH
42351: LD_INT 3
42353: PUSH
42354: LD_INT 1
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: PUSH
42361: LD_INT 3
42363: PUSH
42364: LD_INT 2
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: LD_INT 3
42373: PUSH
42374: LD_INT 3
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 2
42383: PUSH
42384: LD_INT 3
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 2
42393: NEG
42394: PUSH
42395: LD_INT 1
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: PUSH
42402: LD_INT 3
42404: NEG
42405: PUSH
42406: LD_INT 0
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: LD_INT 3
42415: NEG
42416: PUSH
42417: LD_INT 1
42419: NEG
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: LD_INT 3
42427: NEG
42428: PUSH
42429: LD_INT 2
42431: NEG
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 3
42439: NEG
42440: PUSH
42441: LD_INT 3
42443: NEG
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: LIST
42474: LIST
42475: LIST
42476: LIST
42477: LIST
42478: LIST
42479: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42480: LD_ADDR_VAR 0 45
42484: PUSH
42485: LD_INT 0
42487: PUSH
42488: LD_INT 0
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: LD_INT 0
42497: PUSH
42498: LD_INT 1
42500: NEG
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: LD_INT 1
42508: PUSH
42509: LD_INT 0
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: LD_INT 1
42518: PUSH
42519: LD_INT 1
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: PUSH
42526: LD_INT 0
42528: PUSH
42529: LD_INT 1
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: LD_INT 1
42538: NEG
42539: PUSH
42540: LD_INT 0
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: PUSH
42547: LD_INT 1
42549: NEG
42550: PUSH
42551: LD_INT 1
42553: NEG
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: PUSH
42559: LD_INT 1
42561: NEG
42562: PUSH
42563: LD_INT 2
42565: NEG
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: PUSH
42571: LD_INT 0
42573: PUSH
42574: LD_INT 2
42576: NEG
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: PUSH
42582: LD_INT 1
42584: PUSH
42585: LD_INT 1
42587: NEG
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: PUSH
42593: LD_INT 2
42595: PUSH
42596: LD_INT 1
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: LD_INT 2
42605: PUSH
42606: LD_INT 2
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: LD_INT 1
42615: PUSH
42616: LD_INT 2
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 0
42625: PUSH
42626: LD_INT 2
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: PUSH
42633: LD_INT 1
42635: NEG
42636: PUSH
42637: LD_INT 1
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 2
42646: NEG
42647: PUSH
42648: LD_INT 1
42650: NEG
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: PUSH
42656: LD_INT 2
42658: NEG
42659: PUSH
42660: LD_INT 2
42662: NEG
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: PUSH
42668: LD_INT 2
42670: NEG
42671: PUSH
42672: LD_INT 3
42674: NEG
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: PUSH
42680: LD_INT 1
42682: NEG
42683: PUSH
42684: LD_INT 3
42686: NEG
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 0
42694: PUSH
42695: LD_INT 3
42697: NEG
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: PUSH
42703: LD_INT 1
42705: PUSH
42706: LD_INT 2
42708: NEG
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: LD_INT 3
42716: PUSH
42717: LD_INT 2
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: PUSH
42724: LD_INT 3
42726: PUSH
42727: LD_INT 3
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: PUSH
42734: LD_INT 2
42736: PUSH
42737: LD_INT 3
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: PUSH
42744: LD_INT 1
42746: PUSH
42747: LD_INT 3
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: PUSH
42754: LD_INT 0
42756: PUSH
42757: LD_INT 3
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: LD_INT 1
42766: NEG
42767: PUSH
42768: LD_INT 2
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: LD_INT 3
42777: NEG
42778: PUSH
42779: LD_INT 2
42781: NEG
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: LD_INT 3
42789: NEG
42790: PUSH
42791: LD_INT 3
42793: NEG
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: LIST
42803: LIST
42804: LIST
42805: LIST
42806: LIST
42807: LIST
42808: LIST
42809: LIST
42810: LIST
42811: LIST
42812: LIST
42813: LIST
42814: LIST
42815: LIST
42816: LIST
42817: LIST
42818: LIST
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42830: LD_ADDR_VAR 0 46
42834: PUSH
42835: LD_INT 0
42837: PUSH
42838: LD_INT 0
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 0
42847: PUSH
42848: LD_INT 1
42850: NEG
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: PUSH
42856: LD_INT 1
42858: PUSH
42859: LD_INT 0
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: PUSH
42866: LD_INT 1
42868: PUSH
42869: LD_INT 1
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: LD_INT 0
42878: PUSH
42879: LD_INT 1
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: PUSH
42886: LD_INT 1
42888: NEG
42889: PUSH
42890: LD_INT 0
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: LD_INT 1
42899: NEG
42900: PUSH
42901: LD_INT 1
42903: NEG
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PUSH
42909: LD_INT 1
42911: NEG
42912: PUSH
42913: LD_INT 2
42915: NEG
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: PUSH
42921: LD_INT 0
42923: PUSH
42924: LD_INT 2
42926: NEG
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: PUSH
42932: LD_INT 1
42934: PUSH
42935: LD_INT 1
42937: NEG
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: PUSH
42943: LD_INT 2
42945: PUSH
42946: LD_INT 0
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PUSH
42953: LD_INT 2
42955: PUSH
42956: LD_INT 1
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PUSH
42963: LD_INT 1
42965: PUSH
42966: LD_INT 2
42968: PUSH
42969: EMPTY
42970: LIST
42971: LIST
42972: PUSH
42973: LD_INT 0
42975: PUSH
42976: LD_INT 2
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: LD_INT 1
42985: NEG
42986: PUSH
42987: LD_INT 1
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 2
42996: NEG
42997: PUSH
42998: LD_INT 0
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: PUSH
43005: LD_INT 2
43007: NEG
43008: PUSH
43009: LD_INT 1
43011: NEG
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: PUSH
43017: LD_INT 1
43019: NEG
43020: PUSH
43021: LD_INT 3
43023: NEG
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: PUSH
43029: LD_INT 0
43031: PUSH
43032: LD_INT 3
43034: NEG
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: PUSH
43040: LD_INT 1
43042: PUSH
43043: LD_INT 2
43045: NEG
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PUSH
43051: LD_INT 2
43053: PUSH
43054: LD_INT 1
43056: NEG
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: LD_INT 3
43064: PUSH
43065: LD_INT 0
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: PUSH
43072: LD_INT 3
43074: PUSH
43075: LD_INT 1
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: PUSH
43082: LD_INT 1
43084: PUSH
43085: LD_INT 3
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: PUSH
43092: LD_INT 0
43094: PUSH
43095: LD_INT 3
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: PUSH
43102: LD_INT 1
43104: NEG
43105: PUSH
43106: LD_INT 2
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: PUSH
43113: LD_INT 2
43115: NEG
43116: PUSH
43117: LD_INT 1
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: PUSH
43124: LD_INT 3
43126: NEG
43127: PUSH
43128: LD_INT 0
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: PUSH
43135: LD_INT 3
43137: NEG
43138: PUSH
43139: LD_INT 1
43141: NEG
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: LIST
43151: LIST
43152: LIST
43153: LIST
43154: LIST
43155: LIST
43156: LIST
43157: LIST
43158: LIST
43159: LIST
43160: LIST
43161: LIST
43162: LIST
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: LIST
43173: LIST
43174: LIST
43175: LIST
43176: LIST
43177: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43178: LD_ADDR_VAR 0 47
43182: PUSH
43183: LD_INT 0
43185: PUSH
43186: LD_INT 0
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: PUSH
43193: LD_INT 0
43195: PUSH
43196: LD_INT 1
43198: NEG
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: PUSH
43204: LD_INT 1
43206: PUSH
43207: LD_INT 0
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: LD_INT 1
43216: PUSH
43217: LD_INT 1
43219: PUSH
43220: EMPTY
43221: LIST
43222: LIST
43223: PUSH
43224: LD_INT 0
43226: PUSH
43227: LD_INT 1
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 1
43236: NEG
43237: PUSH
43238: LD_INT 0
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: PUSH
43245: LD_INT 1
43247: NEG
43248: PUSH
43249: LD_INT 1
43251: NEG
43252: PUSH
43253: EMPTY
43254: LIST
43255: LIST
43256: PUSH
43257: LD_INT 1
43259: NEG
43260: PUSH
43261: LD_INT 2
43263: NEG
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PUSH
43269: LD_INT 0
43271: PUSH
43272: LD_INT 2
43274: NEG
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 1
43282: PUSH
43283: LD_INT 1
43285: NEG
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: PUSH
43291: LD_INT 2
43293: NEG
43294: PUSH
43295: LD_INT 1
43297: NEG
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 2
43305: NEG
43306: PUSH
43307: LD_INT 2
43309: NEG
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: LIST
43319: LIST
43320: LIST
43321: LIST
43322: LIST
43323: LIST
43324: LIST
43325: LIST
43326: LIST
43327: LIST
43328: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43329: LD_ADDR_VAR 0 48
43333: PUSH
43334: LD_INT 0
43336: PUSH
43337: LD_INT 0
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PUSH
43344: LD_INT 0
43346: PUSH
43347: LD_INT 1
43349: NEG
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: PUSH
43355: LD_INT 1
43357: PUSH
43358: LD_INT 0
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: LD_INT 1
43367: PUSH
43368: LD_INT 1
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: LD_INT 0
43377: PUSH
43378: LD_INT 1
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: LD_INT 1
43387: NEG
43388: PUSH
43389: LD_INT 0
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: LD_INT 1
43398: NEG
43399: PUSH
43400: LD_INT 1
43402: NEG
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: PUSH
43408: LD_INT 1
43410: NEG
43411: PUSH
43412: LD_INT 2
43414: NEG
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: PUSH
43420: LD_INT 0
43422: PUSH
43423: LD_INT 2
43425: NEG
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_INT 1
43433: PUSH
43434: LD_INT 1
43436: NEG
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: PUSH
43442: LD_INT 2
43444: PUSH
43445: LD_INT 0
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: PUSH
43452: LD_INT 2
43454: PUSH
43455: LD_INT 1
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43476: LD_ADDR_VAR 0 49
43480: PUSH
43481: LD_INT 0
43483: PUSH
43484: LD_INT 0
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 0
43493: PUSH
43494: LD_INT 1
43496: NEG
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: PUSH
43502: LD_INT 1
43504: PUSH
43505: LD_INT 0
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 1
43514: PUSH
43515: LD_INT 1
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 0
43524: PUSH
43525: LD_INT 1
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 1
43534: NEG
43535: PUSH
43536: LD_INT 0
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 1
43545: NEG
43546: PUSH
43547: LD_INT 1
43549: NEG
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: LD_INT 1
43557: PUSH
43558: LD_INT 1
43560: NEG
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: LD_INT 2
43568: PUSH
43569: LD_INT 0
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: PUSH
43576: LD_INT 2
43578: PUSH
43579: LD_INT 1
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: LD_INT 2
43588: PUSH
43589: LD_INT 2
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 1
43598: PUSH
43599: LD_INT 2
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: LIST
43612: LIST
43613: LIST
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43620: LD_ADDR_VAR 0 50
43624: PUSH
43625: LD_INT 0
43627: PUSH
43628: LD_INT 0
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: LD_INT 0
43637: PUSH
43638: LD_INT 1
43640: NEG
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: LD_INT 1
43648: PUSH
43649: LD_INT 0
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: LD_INT 1
43658: PUSH
43659: LD_INT 1
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: PUSH
43666: LD_INT 0
43668: PUSH
43669: LD_INT 1
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: LD_INT 1
43678: NEG
43679: PUSH
43680: LD_INT 0
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: LD_INT 1
43689: NEG
43690: PUSH
43691: LD_INT 1
43693: NEG
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 2
43701: PUSH
43702: LD_INT 1
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PUSH
43709: LD_INT 2
43711: PUSH
43712: LD_INT 2
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: PUSH
43719: LD_INT 1
43721: PUSH
43722: LD_INT 2
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: PUSH
43729: LD_INT 0
43731: PUSH
43732: LD_INT 2
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: LD_INT 1
43741: NEG
43742: PUSH
43743: LD_INT 1
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: LIST
43754: LIST
43755: LIST
43756: LIST
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43764: LD_ADDR_VAR 0 51
43768: PUSH
43769: LD_INT 0
43771: PUSH
43772: LD_INT 0
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: LD_INT 0
43781: PUSH
43782: LD_INT 1
43784: NEG
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_INT 1
43792: PUSH
43793: LD_INT 0
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: LD_INT 1
43802: PUSH
43803: LD_INT 1
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: PUSH
43810: LD_INT 0
43812: PUSH
43813: LD_INT 1
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: PUSH
43820: LD_INT 1
43822: NEG
43823: PUSH
43824: LD_INT 0
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: LD_INT 1
43833: NEG
43834: PUSH
43835: LD_INT 1
43837: NEG
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PUSH
43843: LD_INT 1
43845: PUSH
43846: LD_INT 2
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: PUSH
43853: LD_INT 0
43855: PUSH
43856: LD_INT 2
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: PUSH
43863: LD_INT 1
43865: NEG
43866: PUSH
43867: LD_INT 1
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 2
43876: NEG
43877: PUSH
43878: LD_INT 0
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 2
43887: NEG
43888: PUSH
43889: LD_INT 1
43891: NEG
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: LIST
43901: LIST
43902: LIST
43903: LIST
43904: LIST
43905: LIST
43906: LIST
43907: LIST
43908: LIST
43909: LIST
43910: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43911: LD_ADDR_VAR 0 52
43915: PUSH
43916: LD_INT 0
43918: PUSH
43919: LD_INT 0
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: LD_INT 0
43928: PUSH
43929: LD_INT 1
43931: NEG
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: LD_INT 1
43939: PUSH
43940: LD_INT 0
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 1
43949: PUSH
43950: LD_INT 1
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 0
43959: PUSH
43960: LD_INT 1
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 1
43969: NEG
43970: PUSH
43971: LD_INT 0
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: LD_INT 1
43980: NEG
43981: PUSH
43982: LD_INT 1
43984: NEG
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 1
43992: NEG
43993: PUSH
43994: LD_INT 2
43996: NEG
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 1
44004: NEG
44005: PUSH
44006: LD_INT 1
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: LD_INT 2
44015: NEG
44016: PUSH
44017: LD_INT 0
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: PUSH
44024: LD_INT 2
44026: NEG
44027: PUSH
44028: LD_INT 1
44030: NEG
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: LD_INT 2
44038: NEG
44039: PUSH
44040: LD_INT 2
44042: NEG
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: PUSH
44048: EMPTY
44049: LIST
44050: LIST
44051: LIST
44052: LIST
44053: LIST
44054: LIST
44055: LIST
44056: LIST
44057: LIST
44058: LIST
44059: LIST
44060: LIST
44061: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44062: LD_ADDR_VAR 0 53
44066: PUSH
44067: LD_INT 0
44069: PUSH
44070: LD_INT 0
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 0
44079: PUSH
44080: LD_INT 1
44082: NEG
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 1
44090: PUSH
44091: LD_INT 0
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 1
44100: PUSH
44101: LD_INT 1
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 0
44110: PUSH
44111: LD_INT 1
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 1
44120: NEG
44121: PUSH
44122: LD_INT 0
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 1
44131: NEG
44132: PUSH
44133: LD_INT 1
44135: NEG
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 1
44143: NEG
44144: PUSH
44145: LD_INT 2
44147: NEG
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 0
44155: PUSH
44156: LD_INT 2
44158: NEG
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: LD_INT 1
44166: PUSH
44167: LD_INT 1
44169: NEG
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: PUSH
44175: LD_INT 2
44177: PUSH
44178: LD_INT 0
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: LD_INT 2
44187: PUSH
44188: LD_INT 1
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 2
44197: PUSH
44198: LD_INT 2
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: LD_INT 1
44207: PUSH
44208: LD_INT 2
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 0
44217: PUSH
44218: LD_INT 2
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: PUSH
44225: LD_INT 1
44227: NEG
44228: PUSH
44229: LD_INT 1
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: LD_INT 2
44238: NEG
44239: PUSH
44240: LD_INT 0
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: LD_INT 2
44249: NEG
44250: PUSH
44251: LD_INT 1
44253: NEG
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: LD_INT 2
44261: NEG
44262: PUSH
44263: LD_INT 2
44265: NEG
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: LIST
44275: LIST
44276: LIST
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: LIST
44289: LIST
44290: LIST
44291: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44292: LD_ADDR_VAR 0 54
44296: PUSH
44297: LD_INT 0
44299: PUSH
44300: LD_INT 0
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: LD_INT 0
44309: PUSH
44310: LD_INT 1
44312: NEG
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PUSH
44318: LD_INT 1
44320: PUSH
44321: LD_INT 0
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: PUSH
44328: LD_INT 1
44330: PUSH
44331: LD_INT 1
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: LD_INT 0
44340: PUSH
44341: LD_INT 1
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: PUSH
44348: LD_INT 1
44350: NEG
44351: PUSH
44352: LD_INT 0
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: PUSH
44359: LD_INT 1
44361: NEG
44362: PUSH
44363: LD_INT 1
44365: NEG
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 1
44373: NEG
44374: PUSH
44375: LD_INT 2
44377: NEG
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: LD_INT 0
44385: PUSH
44386: LD_INT 2
44388: NEG
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: PUSH
44394: LD_INT 1
44396: PUSH
44397: LD_INT 1
44399: NEG
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: PUSH
44405: LD_INT 2
44407: PUSH
44408: LD_INT 0
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: PUSH
44415: LD_INT 2
44417: PUSH
44418: LD_INT 1
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: PUSH
44425: LD_INT 2
44427: PUSH
44428: LD_INT 2
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: PUSH
44435: LD_INT 1
44437: PUSH
44438: LD_INT 2
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: PUSH
44445: LD_INT 0
44447: PUSH
44448: LD_INT 2
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PUSH
44455: LD_INT 1
44457: NEG
44458: PUSH
44459: LD_INT 1
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 2
44468: NEG
44469: PUSH
44470: LD_INT 0
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: PUSH
44477: LD_INT 2
44479: NEG
44480: PUSH
44481: LD_INT 1
44483: NEG
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: PUSH
44489: LD_INT 2
44491: NEG
44492: PUSH
44493: LD_INT 2
44495: NEG
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44522: LD_ADDR_VAR 0 55
44526: PUSH
44527: LD_INT 0
44529: PUSH
44530: LD_INT 0
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 0
44539: PUSH
44540: LD_INT 1
44542: NEG
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: PUSH
44548: LD_INT 1
44550: PUSH
44551: LD_INT 0
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: PUSH
44558: LD_INT 1
44560: PUSH
44561: LD_INT 1
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: LD_INT 0
44570: PUSH
44571: LD_INT 1
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_INT 1
44580: NEG
44581: PUSH
44582: LD_INT 0
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 1
44591: NEG
44592: PUSH
44593: LD_INT 1
44595: NEG
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: PUSH
44601: LD_INT 1
44603: NEG
44604: PUSH
44605: LD_INT 2
44607: NEG
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 0
44615: PUSH
44616: LD_INT 2
44618: NEG
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 1
44626: PUSH
44627: LD_INT 1
44629: NEG
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: LD_INT 2
44637: PUSH
44638: LD_INT 0
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: PUSH
44645: LD_INT 2
44647: PUSH
44648: LD_INT 1
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PUSH
44655: LD_INT 2
44657: PUSH
44658: LD_INT 2
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: LD_INT 1
44667: PUSH
44668: LD_INT 2
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: LD_INT 0
44677: PUSH
44678: LD_INT 2
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: PUSH
44685: LD_INT 1
44687: NEG
44688: PUSH
44689: LD_INT 1
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: PUSH
44696: LD_INT 2
44698: NEG
44699: PUSH
44700: LD_INT 0
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PUSH
44707: LD_INT 2
44709: NEG
44710: PUSH
44711: LD_INT 1
44713: NEG
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 2
44721: NEG
44722: PUSH
44723: LD_INT 2
44725: NEG
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: LIST
44735: LIST
44736: LIST
44737: LIST
44738: LIST
44739: LIST
44740: LIST
44741: LIST
44742: LIST
44743: LIST
44744: LIST
44745: LIST
44746: LIST
44747: LIST
44748: LIST
44749: LIST
44750: LIST
44751: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44752: LD_ADDR_VAR 0 56
44756: PUSH
44757: LD_INT 0
44759: PUSH
44760: LD_INT 0
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: LD_INT 0
44769: PUSH
44770: LD_INT 1
44772: NEG
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 1
44780: PUSH
44781: LD_INT 0
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 1
44790: PUSH
44791: LD_INT 1
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 0
44800: PUSH
44801: LD_INT 1
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: LD_INT 1
44810: NEG
44811: PUSH
44812: LD_INT 0
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 1
44821: NEG
44822: PUSH
44823: LD_INT 1
44825: NEG
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 1
44833: NEG
44834: PUSH
44835: LD_INT 2
44837: NEG
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 0
44845: PUSH
44846: LD_INT 2
44848: NEG
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 1
44856: PUSH
44857: LD_INT 1
44859: NEG
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 2
44867: PUSH
44868: LD_INT 0
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: LD_INT 2
44877: PUSH
44878: LD_INT 1
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 2
44887: PUSH
44888: LD_INT 2
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: LD_INT 1
44897: PUSH
44898: LD_INT 2
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: PUSH
44905: LD_INT 0
44907: PUSH
44908: LD_INT 2
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: PUSH
44915: LD_INT 1
44917: NEG
44918: PUSH
44919: LD_INT 1
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: LD_INT 2
44928: NEG
44929: PUSH
44930: LD_INT 0
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: LD_INT 2
44939: NEG
44940: PUSH
44941: LD_INT 1
44943: NEG
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: LD_INT 2
44951: NEG
44952: PUSH
44953: LD_INT 2
44955: NEG
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44982: LD_ADDR_VAR 0 57
44986: PUSH
44987: LD_INT 0
44989: PUSH
44990: LD_INT 0
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 0
44999: PUSH
45000: LD_INT 1
45002: NEG
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 1
45010: PUSH
45011: LD_INT 0
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: PUSH
45018: LD_INT 1
45020: PUSH
45021: LD_INT 1
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 0
45030: PUSH
45031: LD_INT 1
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: LD_INT 1
45040: NEG
45041: PUSH
45042: LD_INT 0
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 1
45051: NEG
45052: PUSH
45053: LD_INT 1
45055: NEG
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 1
45063: NEG
45064: PUSH
45065: LD_INT 2
45067: NEG
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 0
45075: PUSH
45076: LD_INT 2
45078: NEG
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 1
45086: PUSH
45087: LD_INT 1
45089: NEG
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 2
45097: PUSH
45098: LD_INT 0
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 2
45107: PUSH
45108: LD_INT 1
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 2
45117: PUSH
45118: LD_INT 2
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 1
45127: PUSH
45128: LD_INT 2
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: LD_INT 0
45137: PUSH
45138: LD_INT 2
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: PUSH
45145: LD_INT 1
45147: NEG
45148: PUSH
45149: LD_INT 1
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 2
45158: NEG
45159: PUSH
45160: LD_INT 0
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: LD_INT 2
45169: NEG
45170: PUSH
45171: LD_INT 1
45173: NEG
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 2
45181: NEG
45182: PUSH
45183: LD_INT 2
45185: NEG
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45212: LD_ADDR_VAR 0 58
45216: PUSH
45217: LD_INT 0
45219: PUSH
45220: LD_INT 0
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 0
45229: PUSH
45230: LD_INT 1
45232: NEG
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 1
45240: PUSH
45241: LD_INT 0
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 1
45250: PUSH
45251: LD_INT 1
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 0
45260: PUSH
45261: LD_INT 1
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: LD_INT 1
45270: NEG
45271: PUSH
45272: LD_INT 0
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 1
45281: NEG
45282: PUSH
45283: LD_INT 1
45285: NEG
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 1
45293: NEG
45294: PUSH
45295: LD_INT 2
45297: NEG
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: LD_INT 0
45305: PUSH
45306: LD_INT 2
45308: NEG
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 1
45316: PUSH
45317: LD_INT 1
45319: NEG
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 2
45327: PUSH
45328: LD_INT 0
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 2
45337: PUSH
45338: LD_INT 1
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 2
45347: PUSH
45348: LD_INT 2
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 1
45357: PUSH
45358: LD_INT 2
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 0
45367: PUSH
45368: LD_INT 2
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 1
45377: NEG
45378: PUSH
45379: LD_INT 1
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PUSH
45386: LD_INT 2
45388: NEG
45389: PUSH
45390: LD_INT 0
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 2
45399: NEG
45400: PUSH
45401: LD_INT 1
45403: NEG
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 2
45411: NEG
45412: PUSH
45413: LD_INT 2
45415: NEG
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: LIST
45441: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45442: LD_ADDR_VAR 0 59
45446: PUSH
45447: LD_INT 0
45449: PUSH
45450: LD_INT 0
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 0
45459: PUSH
45460: LD_INT 1
45462: NEG
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 1
45470: PUSH
45471: LD_INT 0
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 1
45480: PUSH
45481: LD_INT 1
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 0
45490: PUSH
45491: LD_INT 1
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 1
45500: NEG
45501: PUSH
45502: LD_INT 0
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 1
45511: NEG
45512: PUSH
45513: LD_INT 1
45515: NEG
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45530: LD_ADDR_VAR 0 60
45534: PUSH
45535: LD_INT 0
45537: PUSH
45538: LD_INT 0
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 0
45547: PUSH
45548: LD_INT 1
45550: NEG
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 1
45558: PUSH
45559: LD_INT 0
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 1
45568: PUSH
45569: LD_INT 1
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: LD_INT 0
45578: PUSH
45579: LD_INT 1
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 1
45588: NEG
45589: PUSH
45590: LD_INT 0
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 1
45599: NEG
45600: PUSH
45601: LD_INT 1
45603: NEG
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45618: LD_ADDR_VAR 0 61
45622: PUSH
45623: LD_INT 0
45625: PUSH
45626: LD_INT 0
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: LD_INT 0
45635: PUSH
45636: LD_INT 1
45638: NEG
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: LD_INT 1
45646: PUSH
45647: LD_INT 0
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 1
45656: PUSH
45657: LD_INT 1
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 0
45666: PUSH
45667: LD_INT 1
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_INT 1
45676: NEG
45677: PUSH
45678: LD_INT 0
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 1
45687: NEG
45688: PUSH
45689: LD_INT 1
45691: NEG
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: LIST
45701: LIST
45702: LIST
45703: LIST
45704: LIST
45705: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45706: LD_ADDR_VAR 0 62
45710: PUSH
45711: LD_INT 0
45713: PUSH
45714: LD_INT 0
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 0
45723: PUSH
45724: LD_INT 1
45726: NEG
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 1
45734: PUSH
45735: LD_INT 0
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: LD_INT 1
45744: PUSH
45745: LD_INT 1
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 0
45754: PUSH
45755: LD_INT 1
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 1
45764: NEG
45765: PUSH
45766: LD_INT 0
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 1
45775: NEG
45776: PUSH
45777: LD_INT 1
45779: NEG
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45794: LD_ADDR_VAR 0 63
45798: PUSH
45799: LD_INT 0
45801: PUSH
45802: LD_INT 0
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 0
45811: PUSH
45812: LD_INT 1
45814: NEG
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 1
45822: PUSH
45823: LD_INT 0
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 1
45832: PUSH
45833: LD_INT 1
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 0
45842: PUSH
45843: LD_INT 1
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 1
45852: NEG
45853: PUSH
45854: LD_INT 0
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_INT 1
45863: NEG
45864: PUSH
45865: LD_INT 1
45867: NEG
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: LIST
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45882: LD_ADDR_VAR 0 64
45886: PUSH
45887: LD_INT 0
45889: PUSH
45890: LD_INT 0
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: LD_INT 0
45899: PUSH
45900: LD_INT 1
45902: NEG
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: LD_INT 1
45910: PUSH
45911: LD_INT 0
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: PUSH
45918: LD_INT 1
45920: PUSH
45921: LD_INT 1
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: LD_INT 0
45930: PUSH
45931: LD_INT 1
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_INT 1
45940: NEG
45941: PUSH
45942: LD_INT 0
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 1
45951: NEG
45952: PUSH
45953: LD_INT 1
45955: NEG
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: ST_TO_ADDR
// end ; 1 :
45970: GO 51867
45972: LD_INT 1
45974: DOUBLE
45975: EQUAL
45976: IFTRUE 45980
45978: GO 48603
45980: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45981: LD_ADDR_VAR 0 11
45985: PUSH
45986: LD_INT 1
45988: NEG
45989: PUSH
45990: LD_INT 3
45992: NEG
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 0
46000: PUSH
46001: LD_INT 3
46003: NEG
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 1
46011: PUSH
46012: LD_INT 2
46014: NEG
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: LIST
46024: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46025: LD_ADDR_VAR 0 12
46029: PUSH
46030: LD_INT 2
46032: PUSH
46033: LD_INT 1
46035: NEG
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 3
46043: PUSH
46044: LD_INT 0
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 3
46053: PUSH
46054: LD_INT 1
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: LIST
46065: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46066: LD_ADDR_VAR 0 13
46070: PUSH
46071: LD_INT 3
46073: PUSH
46074: LD_INT 2
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: LD_INT 3
46083: PUSH
46084: LD_INT 3
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 2
46093: PUSH
46094: LD_INT 3
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: LIST
46105: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46106: LD_ADDR_VAR 0 14
46110: PUSH
46111: LD_INT 1
46113: PUSH
46114: LD_INT 3
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 0
46123: PUSH
46124: LD_INT 3
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 1
46133: NEG
46134: PUSH
46135: LD_INT 2
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: LIST
46146: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46147: LD_ADDR_VAR 0 15
46151: PUSH
46152: LD_INT 2
46154: NEG
46155: PUSH
46156: LD_INT 1
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 3
46165: NEG
46166: PUSH
46167: LD_INT 0
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 3
46176: NEG
46177: PUSH
46178: LD_INT 1
46180: NEG
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: LIST
46190: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46191: LD_ADDR_VAR 0 16
46195: PUSH
46196: LD_INT 2
46198: NEG
46199: PUSH
46200: LD_INT 3
46202: NEG
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 3
46210: NEG
46211: PUSH
46212: LD_INT 2
46214: NEG
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 3
46222: NEG
46223: PUSH
46224: LD_INT 3
46226: NEG
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: LIST
46236: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46237: LD_ADDR_VAR 0 17
46241: PUSH
46242: LD_INT 1
46244: NEG
46245: PUSH
46246: LD_INT 3
46248: NEG
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 0
46256: PUSH
46257: LD_INT 3
46259: NEG
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 1
46267: PUSH
46268: LD_INT 2
46270: NEG
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: LIST
46280: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46281: LD_ADDR_VAR 0 18
46285: PUSH
46286: LD_INT 2
46288: PUSH
46289: LD_INT 1
46291: NEG
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 3
46299: PUSH
46300: LD_INT 0
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 3
46309: PUSH
46310: LD_INT 1
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: LIST
46321: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46322: LD_ADDR_VAR 0 19
46326: PUSH
46327: LD_INT 3
46329: PUSH
46330: LD_INT 2
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 3
46339: PUSH
46340: LD_INT 3
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 2
46349: PUSH
46350: LD_INT 3
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: LIST
46361: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46362: LD_ADDR_VAR 0 20
46366: PUSH
46367: LD_INT 1
46369: PUSH
46370: LD_INT 3
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: PUSH
46377: LD_INT 0
46379: PUSH
46380: LD_INT 3
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: LD_INT 1
46389: NEG
46390: PUSH
46391: LD_INT 2
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: LIST
46402: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46403: LD_ADDR_VAR 0 21
46407: PUSH
46408: LD_INT 2
46410: NEG
46411: PUSH
46412: LD_INT 1
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 3
46421: NEG
46422: PUSH
46423: LD_INT 0
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 3
46432: NEG
46433: PUSH
46434: LD_INT 1
46436: NEG
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: LIST
46446: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46447: LD_ADDR_VAR 0 22
46451: PUSH
46452: LD_INT 2
46454: NEG
46455: PUSH
46456: LD_INT 3
46458: NEG
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PUSH
46464: LD_INT 3
46466: NEG
46467: PUSH
46468: LD_INT 2
46470: NEG
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 3
46478: NEG
46479: PUSH
46480: LD_INT 3
46482: NEG
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: LIST
46492: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
46493: LD_ADDR_VAR 0 23
46497: PUSH
46498: LD_INT 0
46500: PUSH
46501: LD_INT 3
46503: NEG
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 1
46511: NEG
46512: PUSH
46513: LD_INT 4
46515: NEG
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 1
46523: PUSH
46524: LD_INT 3
46526: NEG
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: LIST
46536: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
46537: LD_ADDR_VAR 0 24
46541: PUSH
46542: LD_INT 3
46544: PUSH
46545: LD_INT 0
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 3
46554: PUSH
46555: LD_INT 1
46557: NEG
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 4
46565: PUSH
46566: LD_INT 1
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: LIST
46577: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
46578: LD_ADDR_VAR 0 25
46582: PUSH
46583: LD_INT 3
46585: PUSH
46586: LD_INT 3
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: LD_INT 4
46595: PUSH
46596: LD_INT 3
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 3
46605: PUSH
46606: LD_INT 4
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: LIST
46617: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
46618: LD_ADDR_VAR 0 26
46622: PUSH
46623: LD_INT 0
46625: PUSH
46626: LD_INT 3
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 1
46635: PUSH
46636: LD_INT 4
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 1
46645: NEG
46646: PUSH
46647: LD_INT 3
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: LIST
46658: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
46659: LD_ADDR_VAR 0 27
46663: PUSH
46664: LD_INT 3
46666: NEG
46667: PUSH
46668: LD_INT 0
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 3
46677: NEG
46678: PUSH
46679: LD_INT 1
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 4
46688: NEG
46689: PUSH
46690: LD_INT 1
46692: NEG
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: LIST
46702: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
46703: LD_ADDR_VAR 0 28
46707: PUSH
46708: LD_INT 3
46710: NEG
46711: PUSH
46712: LD_INT 3
46714: NEG
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: LD_INT 3
46722: NEG
46723: PUSH
46724: LD_INT 4
46726: NEG
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 4
46734: NEG
46735: PUSH
46736: LD_INT 3
46738: NEG
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: LIST
46748: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
46749: LD_ADDR_VAR 0 29
46753: PUSH
46754: LD_INT 1
46756: NEG
46757: PUSH
46758: LD_INT 3
46760: NEG
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 0
46768: PUSH
46769: LD_INT 3
46771: NEG
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 1
46779: PUSH
46780: LD_INT 2
46782: NEG
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 1
46790: NEG
46791: PUSH
46792: LD_INT 4
46794: NEG
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 0
46802: PUSH
46803: LD_INT 4
46805: NEG
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 1
46813: PUSH
46814: LD_INT 3
46816: NEG
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 1
46824: NEG
46825: PUSH
46826: LD_INT 5
46828: NEG
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 0
46836: PUSH
46837: LD_INT 5
46839: NEG
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 1
46847: PUSH
46848: LD_INT 4
46850: NEG
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 1
46858: NEG
46859: PUSH
46860: LD_INT 6
46862: NEG
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 0
46870: PUSH
46871: LD_INT 6
46873: NEG
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 1
46881: PUSH
46882: LD_INT 5
46884: NEG
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
46904: LD_ADDR_VAR 0 30
46908: PUSH
46909: LD_INT 2
46911: PUSH
46912: LD_INT 1
46914: NEG
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 3
46922: PUSH
46923: LD_INT 0
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 3
46932: PUSH
46933: LD_INT 1
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 3
46942: PUSH
46943: LD_INT 1
46945: NEG
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 4
46953: PUSH
46954: LD_INT 0
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 4
46963: PUSH
46964: LD_INT 1
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 4
46973: PUSH
46974: LD_INT 1
46976: NEG
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 5
46984: PUSH
46985: LD_INT 0
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 5
46994: PUSH
46995: LD_INT 1
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 5
47004: PUSH
47005: LD_INT 1
47007: NEG
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 6
47015: PUSH
47016: LD_INT 0
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 6
47025: PUSH
47026: LD_INT 1
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: LIST
47043: LIST
47044: LIST
47045: LIST
47046: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
47047: LD_ADDR_VAR 0 31
47051: PUSH
47052: LD_INT 3
47054: PUSH
47055: LD_INT 2
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 3
47064: PUSH
47065: LD_INT 3
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 2
47074: PUSH
47075: LD_INT 3
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 4
47084: PUSH
47085: LD_INT 3
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 4
47094: PUSH
47095: LD_INT 4
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 3
47104: PUSH
47105: LD_INT 4
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 5
47114: PUSH
47115: LD_INT 4
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 5
47124: PUSH
47125: LD_INT 5
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 4
47134: PUSH
47135: LD_INT 5
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 6
47144: PUSH
47145: LD_INT 5
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 6
47154: PUSH
47155: LD_INT 6
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 5
47164: PUSH
47165: LD_INT 6
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
47186: LD_ADDR_VAR 0 32
47190: PUSH
47191: LD_INT 1
47193: PUSH
47194: LD_INT 3
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 0
47203: PUSH
47204: LD_INT 3
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 1
47213: NEG
47214: PUSH
47215: LD_INT 2
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 1
47224: PUSH
47225: LD_INT 4
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 0
47234: PUSH
47235: LD_INT 4
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 1
47244: NEG
47245: PUSH
47246: LD_INT 3
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 1
47255: PUSH
47256: LD_INT 5
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 0
47265: PUSH
47266: LD_INT 5
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 1
47275: NEG
47276: PUSH
47277: LD_INT 4
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 1
47286: PUSH
47287: LD_INT 6
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 0
47296: PUSH
47297: LD_INT 6
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 1
47306: NEG
47307: PUSH
47308: LD_INT 5
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
47329: LD_ADDR_VAR 0 33
47333: PUSH
47334: LD_INT 2
47336: NEG
47337: PUSH
47338: LD_INT 1
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 3
47347: NEG
47348: PUSH
47349: LD_INT 0
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 3
47358: NEG
47359: PUSH
47360: LD_INT 1
47362: NEG
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 3
47370: NEG
47371: PUSH
47372: LD_INT 1
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 4
47381: NEG
47382: PUSH
47383: LD_INT 0
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 4
47392: NEG
47393: PUSH
47394: LD_INT 1
47396: NEG
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 4
47404: NEG
47405: PUSH
47406: LD_INT 1
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: PUSH
47413: LD_INT 5
47415: NEG
47416: PUSH
47417: LD_INT 0
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 5
47426: NEG
47427: PUSH
47428: LD_INT 1
47430: NEG
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 5
47438: NEG
47439: PUSH
47440: LD_INT 1
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 6
47449: NEG
47450: PUSH
47451: LD_INT 0
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 6
47460: NEG
47461: PUSH
47462: LD_INT 1
47464: NEG
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
47484: LD_ADDR_VAR 0 34
47488: PUSH
47489: LD_INT 2
47491: NEG
47492: PUSH
47493: LD_INT 3
47495: NEG
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_INT 3
47503: NEG
47504: PUSH
47505: LD_INT 2
47507: NEG
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 3
47515: NEG
47516: PUSH
47517: LD_INT 3
47519: NEG
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 3
47527: NEG
47528: PUSH
47529: LD_INT 4
47531: NEG
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 4
47539: NEG
47540: PUSH
47541: LD_INT 3
47543: NEG
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 4
47551: NEG
47552: PUSH
47553: LD_INT 4
47555: NEG
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 4
47563: NEG
47564: PUSH
47565: LD_INT 5
47567: NEG
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 5
47575: NEG
47576: PUSH
47577: LD_INT 4
47579: NEG
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 5
47587: NEG
47588: PUSH
47589: LD_INT 5
47591: NEG
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 5
47599: NEG
47600: PUSH
47601: LD_INT 6
47603: NEG
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 6
47611: NEG
47612: PUSH
47613: LD_INT 5
47615: NEG
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PUSH
47621: LD_INT 6
47623: NEG
47624: PUSH
47625: LD_INT 6
47627: NEG
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
47647: LD_ADDR_VAR 0 41
47651: PUSH
47652: LD_INT 0
47654: PUSH
47655: LD_INT 2
47657: NEG
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 1
47665: NEG
47666: PUSH
47667: LD_INT 3
47669: NEG
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: LD_INT 1
47677: PUSH
47678: LD_INT 2
47680: NEG
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: LIST
47690: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
47691: LD_ADDR_VAR 0 42
47695: PUSH
47696: LD_INT 2
47698: PUSH
47699: LD_INT 0
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: LD_INT 2
47708: PUSH
47709: LD_INT 1
47711: NEG
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 3
47719: PUSH
47720: LD_INT 1
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: LIST
47731: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
47732: LD_ADDR_VAR 0 43
47736: PUSH
47737: LD_INT 2
47739: PUSH
47740: LD_INT 2
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: PUSH
47747: LD_INT 3
47749: PUSH
47750: LD_INT 2
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: LD_INT 2
47759: PUSH
47760: LD_INT 3
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: LIST
47771: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
47772: LD_ADDR_VAR 0 44
47776: PUSH
47777: LD_INT 0
47779: PUSH
47780: LD_INT 2
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 1
47789: PUSH
47790: LD_INT 3
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 1
47799: NEG
47800: PUSH
47801: LD_INT 2
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: LIST
47812: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47813: LD_ADDR_VAR 0 45
47817: PUSH
47818: LD_INT 2
47820: NEG
47821: PUSH
47822: LD_INT 0
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 2
47831: NEG
47832: PUSH
47833: LD_INT 1
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 3
47842: NEG
47843: PUSH
47844: LD_INT 1
47846: NEG
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: LIST
47856: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
47857: LD_ADDR_VAR 0 46
47861: PUSH
47862: LD_INT 2
47864: NEG
47865: PUSH
47866: LD_INT 2
47868: NEG
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 2
47876: NEG
47877: PUSH
47878: LD_INT 3
47880: NEG
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 3
47888: NEG
47889: PUSH
47890: LD_INT 2
47892: NEG
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: LIST
47902: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
47903: LD_ADDR_VAR 0 47
47907: PUSH
47908: LD_INT 2
47910: NEG
47911: PUSH
47912: LD_INT 3
47914: NEG
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 1
47922: NEG
47923: PUSH
47924: LD_INT 3
47926: NEG
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47936: LD_ADDR_VAR 0 48
47940: PUSH
47941: LD_INT 1
47943: PUSH
47944: LD_INT 2
47946: NEG
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 2
47954: PUSH
47955: LD_INT 1
47957: NEG
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
47967: LD_ADDR_VAR 0 49
47971: PUSH
47972: LD_INT 3
47974: PUSH
47975: LD_INT 1
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 3
47984: PUSH
47985: LD_INT 2
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
47996: LD_ADDR_VAR 0 50
48000: PUSH
48001: LD_INT 2
48003: PUSH
48004: LD_INT 3
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: PUSH
48011: LD_INT 1
48013: PUSH
48014: LD_INT 3
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48025: LD_ADDR_VAR 0 51
48029: PUSH
48030: LD_INT 1
48032: NEG
48033: PUSH
48034: LD_INT 2
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: LD_INT 2
48043: NEG
48044: PUSH
48045: LD_INT 1
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48056: LD_ADDR_VAR 0 52
48060: PUSH
48061: LD_INT 3
48063: NEG
48064: PUSH
48065: LD_INT 1
48067: NEG
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 3
48075: NEG
48076: PUSH
48077: LD_INT 2
48079: NEG
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48089: LD_ADDR_VAR 0 53
48093: PUSH
48094: LD_INT 1
48096: NEG
48097: PUSH
48098: LD_INT 3
48100: NEG
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 0
48108: PUSH
48109: LD_INT 3
48111: NEG
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: LD_INT 1
48119: PUSH
48120: LD_INT 2
48122: NEG
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: LIST
48132: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48133: LD_ADDR_VAR 0 54
48137: PUSH
48138: LD_INT 2
48140: PUSH
48141: LD_INT 1
48143: NEG
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 3
48151: PUSH
48152: LD_INT 0
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 3
48161: PUSH
48162: LD_INT 1
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: LIST
48173: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48174: LD_ADDR_VAR 0 55
48178: PUSH
48179: LD_INT 3
48181: PUSH
48182: LD_INT 2
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 3
48191: PUSH
48192: LD_INT 3
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 2
48201: PUSH
48202: LD_INT 3
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: LIST
48213: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48214: LD_ADDR_VAR 0 56
48218: PUSH
48219: LD_INT 1
48221: PUSH
48222: LD_INT 3
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 0
48231: PUSH
48232: LD_INT 3
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 1
48241: NEG
48242: PUSH
48243: LD_INT 2
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: LIST
48254: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48255: LD_ADDR_VAR 0 57
48259: PUSH
48260: LD_INT 2
48262: NEG
48263: PUSH
48264: LD_INT 1
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 3
48273: NEG
48274: PUSH
48275: LD_INT 0
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 3
48284: NEG
48285: PUSH
48286: LD_INT 1
48288: NEG
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: LIST
48298: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48299: LD_ADDR_VAR 0 58
48303: PUSH
48304: LD_INT 2
48306: NEG
48307: PUSH
48308: LD_INT 3
48310: NEG
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: LD_INT 3
48318: NEG
48319: PUSH
48320: LD_INT 2
48322: NEG
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 3
48330: NEG
48331: PUSH
48332: LD_INT 3
48334: NEG
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: LIST
48344: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
48345: LD_ADDR_VAR 0 59
48349: PUSH
48350: LD_INT 1
48352: NEG
48353: PUSH
48354: LD_INT 2
48356: NEG
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 0
48364: PUSH
48365: LD_INT 2
48367: NEG
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: PUSH
48373: LD_INT 1
48375: PUSH
48376: LD_INT 1
48378: NEG
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: LIST
48388: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48389: LD_ADDR_VAR 0 60
48393: PUSH
48394: LD_INT 1
48396: PUSH
48397: LD_INT 1
48399: NEG
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 2
48407: PUSH
48408: LD_INT 0
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 2
48417: PUSH
48418: LD_INT 1
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: LIST
48429: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48430: LD_ADDR_VAR 0 61
48434: PUSH
48435: LD_INT 2
48437: PUSH
48438: LD_INT 1
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 2
48447: PUSH
48448: LD_INT 2
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 1
48457: PUSH
48458: LD_INT 2
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: LIST
48469: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48470: LD_ADDR_VAR 0 62
48474: PUSH
48475: LD_INT 1
48477: PUSH
48478: LD_INT 2
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 0
48487: PUSH
48488: LD_INT 2
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 1
48497: NEG
48498: PUSH
48499: LD_INT 1
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: LIST
48510: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48511: LD_ADDR_VAR 0 63
48515: PUSH
48516: LD_INT 1
48518: NEG
48519: PUSH
48520: LD_INT 1
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 2
48529: NEG
48530: PUSH
48531: LD_INT 0
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 2
48540: NEG
48541: PUSH
48542: LD_INT 1
48544: NEG
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: LIST
48554: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48555: LD_ADDR_VAR 0 64
48559: PUSH
48560: LD_INT 1
48562: NEG
48563: PUSH
48564: LD_INT 2
48566: NEG
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 2
48574: NEG
48575: PUSH
48576: LD_INT 1
48578: NEG
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 2
48586: NEG
48587: PUSH
48588: LD_INT 2
48590: NEG
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: LIST
48600: ST_TO_ADDR
// end ; 2 :
48601: GO 51867
48603: LD_INT 2
48605: DOUBLE
48606: EQUAL
48607: IFTRUE 48611
48609: GO 51866
48611: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
48612: LD_ADDR_VAR 0 29
48616: PUSH
48617: LD_INT 4
48619: PUSH
48620: LD_INT 0
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 4
48629: PUSH
48630: LD_INT 1
48632: NEG
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 5
48640: PUSH
48641: LD_INT 0
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 5
48650: PUSH
48651: LD_INT 1
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 4
48660: PUSH
48661: LD_INT 1
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: LD_INT 3
48670: PUSH
48671: LD_INT 0
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 3
48680: PUSH
48681: LD_INT 1
48683: NEG
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 3
48691: PUSH
48692: LD_INT 2
48694: NEG
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 5
48702: PUSH
48703: LD_INT 2
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 3
48712: PUSH
48713: LD_INT 3
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 3
48722: PUSH
48723: LD_INT 2
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 4
48732: PUSH
48733: LD_INT 3
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 4
48742: PUSH
48743: LD_INT 4
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: LD_INT 3
48752: PUSH
48753: LD_INT 4
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 2
48762: PUSH
48763: LD_INT 3
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: PUSH
48770: LD_INT 2
48772: PUSH
48773: LD_INT 2
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 4
48782: PUSH
48783: LD_INT 2
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: LD_INT 2
48792: PUSH
48793: LD_INT 4
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 0
48802: PUSH
48803: LD_INT 4
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 0
48812: PUSH
48813: LD_INT 3
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 1
48822: PUSH
48823: LD_INT 4
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 1
48832: PUSH
48833: LD_INT 5
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 0
48842: PUSH
48843: LD_INT 5
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 1
48852: NEG
48853: PUSH
48854: LD_INT 4
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 1
48863: NEG
48864: PUSH
48865: LD_INT 3
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 2
48874: PUSH
48875: LD_INT 5
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 2
48884: NEG
48885: PUSH
48886: LD_INT 3
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 3
48895: NEG
48896: PUSH
48897: LD_INT 0
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 3
48906: NEG
48907: PUSH
48908: LD_INT 1
48910: NEG
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 2
48918: NEG
48919: PUSH
48920: LD_INT 0
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PUSH
48927: LD_INT 2
48929: NEG
48930: PUSH
48931: LD_INT 1
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 3
48940: NEG
48941: PUSH
48942: LD_INT 1
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 4
48951: NEG
48952: PUSH
48953: LD_INT 0
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 4
48962: NEG
48963: PUSH
48964: LD_INT 1
48966: NEG
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 4
48974: NEG
48975: PUSH
48976: LD_INT 2
48978: NEG
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 2
48986: NEG
48987: PUSH
48988: LD_INT 2
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 4
48997: NEG
48998: PUSH
48999: LD_INT 4
49001: NEG
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 4
49009: NEG
49010: PUSH
49011: LD_INT 5
49013: NEG
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 3
49021: NEG
49022: PUSH
49023: LD_INT 4
49025: NEG
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: LD_INT 3
49033: NEG
49034: PUSH
49035: LD_INT 3
49037: NEG
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 4
49045: NEG
49046: PUSH
49047: LD_INT 3
49049: NEG
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: PUSH
49055: LD_INT 5
49057: NEG
49058: PUSH
49059: LD_INT 4
49061: NEG
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PUSH
49067: LD_INT 5
49069: NEG
49070: PUSH
49071: LD_INT 5
49073: NEG
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 3
49081: NEG
49082: PUSH
49083: LD_INT 5
49085: NEG
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 5
49093: NEG
49094: PUSH
49095: LD_INT 3
49097: NEG
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
49150: LD_ADDR_VAR 0 30
49154: PUSH
49155: LD_INT 4
49157: PUSH
49158: LD_INT 4
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 4
49167: PUSH
49168: LD_INT 3
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 5
49177: PUSH
49178: LD_INT 4
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 5
49187: PUSH
49188: LD_INT 5
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 4
49197: PUSH
49198: LD_INT 5
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 3
49207: PUSH
49208: LD_INT 4
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 3
49217: PUSH
49218: LD_INT 3
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: LD_INT 5
49227: PUSH
49228: LD_INT 3
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 3
49237: PUSH
49238: LD_INT 5
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 0
49247: PUSH
49248: LD_INT 3
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 0
49257: PUSH
49258: LD_INT 2
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: PUSH
49265: LD_INT 1
49267: PUSH
49268: LD_INT 3
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: LD_INT 1
49277: PUSH
49278: LD_INT 4
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 0
49287: PUSH
49288: LD_INT 4
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 1
49297: NEG
49298: PUSH
49299: LD_INT 3
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 1
49308: NEG
49309: PUSH
49310: LD_INT 2
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 2
49319: PUSH
49320: LD_INT 4
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 2
49329: NEG
49330: PUSH
49331: LD_INT 2
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 4
49340: NEG
49341: PUSH
49342: LD_INT 0
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 4
49351: NEG
49352: PUSH
49353: LD_INT 1
49355: NEG
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 3
49363: NEG
49364: PUSH
49365: LD_INT 0
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: LD_INT 3
49374: NEG
49375: PUSH
49376: LD_INT 1
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 4
49385: NEG
49386: PUSH
49387: LD_INT 1
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 5
49396: NEG
49397: PUSH
49398: LD_INT 0
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: LD_INT 5
49407: NEG
49408: PUSH
49409: LD_INT 1
49411: NEG
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 5
49419: NEG
49420: PUSH
49421: LD_INT 2
49423: NEG
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 3
49431: NEG
49432: PUSH
49433: LD_INT 2
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 3
49442: NEG
49443: PUSH
49444: LD_INT 3
49446: NEG
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 3
49454: NEG
49455: PUSH
49456: LD_INT 4
49458: NEG
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 2
49466: NEG
49467: PUSH
49468: LD_INT 3
49470: NEG
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 2
49478: NEG
49479: PUSH
49480: LD_INT 2
49482: NEG
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 3
49490: NEG
49491: PUSH
49492: LD_INT 2
49494: NEG
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 4
49502: NEG
49503: PUSH
49504: LD_INT 3
49506: NEG
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 4
49514: NEG
49515: PUSH
49516: LD_INT 4
49518: NEG
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 2
49526: NEG
49527: PUSH
49528: LD_INT 4
49530: NEG
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 4
49538: NEG
49539: PUSH
49540: LD_INT 2
49542: NEG
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 0
49550: PUSH
49551: LD_INT 4
49553: NEG
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 0
49561: PUSH
49562: LD_INT 5
49564: NEG
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 1
49572: PUSH
49573: LD_INT 4
49575: NEG
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 1
49583: PUSH
49584: LD_INT 3
49586: NEG
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: LD_INT 0
49594: PUSH
49595: LD_INT 3
49597: NEG
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 1
49605: NEG
49606: PUSH
49607: LD_INT 4
49609: NEG
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: LD_INT 1
49617: NEG
49618: PUSH
49619: LD_INT 5
49621: NEG
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 2
49629: PUSH
49630: LD_INT 3
49632: NEG
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 2
49640: NEG
49641: PUSH
49642: LD_INT 5
49644: NEG
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
49697: LD_ADDR_VAR 0 31
49701: PUSH
49702: LD_INT 0
49704: PUSH
49705: LD_INT 4
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 0
49714: PUSH
49715: LD_INT 3
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 1
49724: PUSH
49725: LD_INT 4
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 1
49734: PUSH
49735: LD_INT 5
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 0
49744: PUSH
49745: LD_INT 5
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 1
49754: NEG
49755: PUSH
49756: LD_INT 4
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 1
49765: NEG
49766: PUSH
49767: LD_INT 3
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 2
49776: PUSH
49777: LD_INT 5
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 2
49786: NEG
49787: PUSH
49788: LD_INT 3
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 3
49797: NEG
49798: PUSH
49799: LD_INT 0
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 3
49808: NEG
49809: PUSH
49810: LD_INT 1
49812: NEG
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 2
49820: NEG
49821: PUSH
49822: LD_INT 0
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 2
49831: NEG
49832: PUSH
49833: LD_INT 1
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 3
49842: NEG
49843: PUSH
49844: LD_INT 1
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 4
49853: NEG
49854: PUSH
49855: LD_INT 0
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 4
49864: NEG
49865: PUSH
49866: LD_INT 1
49868: NEG
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 4
49876: NEG
49877: PUSH
49878: LD_INT 2
49880: NEG
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 2
49888: NEG
49889: PUSH
49890: LD_INT 2
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 4
49899: NEG
49900: PUSH
49901: LD_INT 4
49903: NEG
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 4
49911: NEG
49912: PUSH
49913: LD_INT 5
49915: NEG
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 3
49923: NEG
49924: PUSH
49925: LD_INT 4
49927: NEG
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 3
49935: NEG
49936: PUSH
49937: LD_INT 3
49939: NEG
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 4
49947: NEG
49948: PUSH
49949: LD_INT 3
49951: NEG
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: LD_INT 5
49959: NEG
49960: PUSH
49961: LD_INT 4
49963: NEG
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 5
49971: NEG
49972: PUSH
49973: LD_INT 5
49975: NEG
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 3
49983: NEG
49984: PUSH
49985: LD_INT 5
49987: NEG
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: LD_INT 5
49995: NEG
49996: PUSH
49997: LD_INT 3
49999: NEG
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: LD_INT 0
50007: PUSH
50008: LD_INT 3
50010: NEG
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 0
50018: PUSH
50019: LD_INT 4
50021: NEG
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 1
50029: PUSH
50030: LD_INT 3
50032: NEG
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 1
50040: PUSH
50041: LD_INT 2
50043: NEG
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 0
50051: PUSH
50052: LD_INT 2
50054: NEG
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 1
50062: NEG
50063: PUSH
50064: LD_INT 3
50066: NEG
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 1
50074: NEG
50075: PUSH
50076: LD_INT 4
50078: NEG
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 2
50086: PUSH
50087: LD_INT 2
50089: NEG
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 2
50097: NEG
50098: PUSH
50099: LD_INT 4
50101: NEG
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 4
50109: PUSH
50110: LD_INT 0
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 4
50119: PUSH
50120: LD_INT 1
50122: NEG
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 5
50130: PUSH
50131: LD_INT 0
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 5
50140: PUSH
50141: LD_INT 1
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: LD_INT 4
50150: PUSH
50151: LD_INT 1
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 3
50160: PUSH
50161: LD_INT 0
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: LD_INT 3
50170: PUSH
50171: LD_INT 1
50173: NEG
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 3
50181: PUSH
50182: LD_INT 2
50184: NEG
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: LD_INT 5
50192: PUSH
50193: LD_INT 2
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
50247: LD_ADDR_VAR 0 32
50251: PUSH
50252: LD_INT 4
50254: NEG
50255: PUSH
50256: LD_INT 0
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 4
50265: NEG
50266: PUSH
50267: LD_INT 1
50269: NEG
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 3
50277: NEG
50278: PUSH
50279: LD_INT 0
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 3
50288: NEG
50289: PUSH
50290: LD_INT 1
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: LD_INT 4
50299: NEG
50300: PUSH
50301: LD_INT 1
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: LD_INT 5
50310: NEG
50311: PUSH
50312: LD_INT 0
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: LD_INT 5
50321: NEG
50322: PUSH
50323: LD_INT 1
50325: NEG
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 5
50333: NEG
50334: PUSH
50335: LD_INT 2
50337: NEG
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 3
50345: NEG
50346: PUSH
50347: LD_INT 2
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 3
50356: NEG
50357: PUSH
50358: LD_INT 3
50360: NEG
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 3
50368: NEG
50369: PUSH
50370: LD_INT 4
50372: NEG
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: LD_INT 2
50380: NEG
50381: PUSH
50382: LD_INT 3
50384: NEG
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 2
50392: NEG
50393: PUSH
50394: LD_INT 2
50396: NEG
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 3
50404: NEG
50405: PUSH
50406: LD_INT 2
50408: NEG
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 4
50416: NEG
50417: PUSH
50418: LD_INT 3
50420: NEG
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PUSH
50426: LD_INT 4
50428: NEG
50429: PUSH
50430: LD_INT 4
50432: NEG
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 2
50440: NEG
50441: PUSH
50442: LD_INT 4
50444: NEG
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 4
50452: NEG
50453: PUSH
50454: LD_INT 2
50456: NEG
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: LD_INT 0
50464: PUSH
50465: LD_INT 4
50467: NEG
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 0
50475: PUSH
50476: LD_INT 5
50478: NEG
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 1
50486: PUSH
50487: LD_INT 4
50489: NEG
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 1
50497: PUSH
50498: LD_INT 3
50500: NEG
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 0
50508: PUSH
50509: LD_INT 3
50511: NEG
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 1
50519: NEG
50520: PUSH
50521: LD_INT 4
50523: NEG
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: PUSH
50529: LD_INT 1
50531: NEG
50532: PUSH
50533: LD_INT 5
50535: NEG
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 2
50543: PUSH
50544: LD_INT 3
50546: NEG
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 2
50554: NEG
50555: PUSH
50556: LD_INT 5
50558: NEG
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 3
50566: PUSH
50567: LD_INT 0
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 3
50576: PUSH
50577: LD_INT 1
50579: NEG
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 4
50587: PUSH
50588: LD_INT 0
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 4
50597: PUSH
50598: LD_INT 1
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 3
50607: PUSH
50608: LD_INT 1
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 2
50617: PUSH
50618: LD_INT 0
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 2
50627: PUSH
50628: LD_INT 1
50630: NEG
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 2
50638: PUSH
50639: LD_INT 2
50641: NEG
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 4
50649: PUSH
50650: LD_INT 2
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 4
50659: PUSH
50660: LD_INT 4
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 4
50669: PUSH
50670: LD_INT 3
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 5
50679: PUSH
50680: LD_INT 4
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 5
50689: PUSH
50690: LD_INT 5
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 4
50699: PUSH
50700: LD_INT 5
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 3
50709: PUSH
50710: LD_INT 4
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 3
50719: PUSH
50720: LD_INT 3
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 5
50729: PUSH
50730: LD_INT 3
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 3
50739: PUSH
50740: LD_INT 5
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
50794: LD_ADDR_VAR 0 33
50798: PUSH
50799: LD_INT 4
50801: NEG
50802: PUSH
50803: LD_INT 4
50805: NEG
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 4
50813: NEG
50814: PUSH
50815: LD_INT 5
50817: NEG
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 3
50825: NEG
50826: PUSH
50827: LD_INT 4
50829: NEG
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 3
50837: NEG
50838: PUSH
50839: LD_INT 3
50841: NEG
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 4
50849: NEG
50850: PUSH
50851: LD_INT 3
50853: NEG
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 5
50861: NEG
50862: PUSH
50863: LD_INT 4
50865: NEG
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 5
50873: NEG
50874: PUSH
50875: LD_INT 5
50877: NEG
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 3
50885: NEG
50886: PUSH
50887: LD_INT 5
50889: NEG
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 5
50897: NEG
50898: PUSH
50899: LD_INT 3
50901: NEG
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 0
50909: PUSH
50910: LD_INT 3
50912: NEG
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: LD_INT 0
50920: PUSH
50921: LD_INT 4
50923: NEG
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 1
50931: PUSH
50932: LD_INT 3
50934: NEG
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 1
50942: PUSH
50943: LD_INT 2
50945: NEG
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 0
50953: PUSH
50954: LD_INT 2
50956: NEG
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 1
50964: NEG
50965: PUSH
50966: LD_INT 3
50968: NEG
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 1
50976: NEG
50977: PUSH
50978: LD_INT 4
50980: NEG
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 2
50988: PUSH
50989: LD_INT 2
50991: NEG
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 2
50999: NEG
51000: PUSH
51001: LD_INT 4
51003: NEG
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 4
51011: PUSH
51012: LD_INT 0
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 4
51021: PUSH
51022: LD_INT 1
51024: NEG
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 5
51032: PUSH
51033: LD_INT 0
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 5
51042: PUSH
51043: LD_INT 1
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 4
51052: PUSH
51053: LD_INT 1
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 3
51062: PUSH
51063: LD_INT 0
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 3
51072: PUSH
51073: LD_INT 1
51075: NEG
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 3
51083: PUSH
51084: LD_INT 2
51086: NEG
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 5
51094: PUSH
51095: LD_INT 2
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 3
51104: PUSH
51105: LD_INT 3
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 3
51114: PUSH
51115: LD_INT 2
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 4
51124: PUSH
51125: LD_INT 3
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 4
51134: PUSH
51135: LD_INT 4
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: LD_INT 3
51144: PUSH
51145: LD_INT 4
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 2
51154: PUSH
51155: LD_INT 3
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 2
51164: PUSH
51165: LD_INT 2
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 4
51174: PUSH
51175: LD_INT 2
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 2
51184: PUSH
51185: LD_INT 4
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 0
51194: PUSH
51195: LD_INT 4
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: LD_INT 0
51204: PUSH
51205: LD_INT 3
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 1
51214: PUSH
51215: LD_INT 4
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 1
51224: PUSH
51225: LD_INT 5
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 0
51234: PUSH
51235: LD_INT 5
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 1
51244: NEG
51245: PUSH
51246: LD_INT 4
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 1
51255: NEG
51256: PUSH
51257: LD_INT 3
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 2
51266: PUSH
51267: LD_INT 5
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 2
51276: NEG
51277: PUSH
51278: LD_INT 3
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
51332: LD_ADDR_VAR 0 34
51336: PUSH
51337: LD_INT 0
51339: PUSH
51340: LD_INT 4
51342: NEG
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 0
51350: PUSH
51351: LD_INT 5
51353: NEG
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 1
51361: PUSH
51362: LD_INT 4
51364: NEG
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 1
51372: PUSH
51373: LD_INT 3
51375: NEG
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 0
51383: PUSH
51384: LD_INT 3
51386: NEG
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 1
51394: NEG
51395: PUSH
51396: LD_INT 4
51398: NEG
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: LD_INT 1
51406: NEG
51407: PUSH
51408: LD_INT 5
51410: NEG
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 2
51418: PUSH
51419: LD_INT 3
51421: NEG
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 2
51429: NEG
51430: PUSH
51431: LD_INT 5
51433: NEG
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 3
51441: PUSH
51442: LD_INT 0
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 3
51451: PUSH
51452: LD_INT 1
51454: NEG
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 4
51462: PUSH
51463: LD_INT 0
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 4
51472: PUSH
51473: LD_INT 1
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 3
51482: PUSH
51483: LD_INT 1
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 2
51492: PUSH
51493: LD_INT 0
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: LD_INT 2
51502: PUSH
51503: LD_INT 1
51505: NEG
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 2
51513: PUSH
51514: LD_INT 2
51516: NEG
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 4
51524: PUSH
51525: LD_INT 2
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 4
51534: PUSH
51535: LD_INT 4
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 4
51544: PUSH
51545: LD_INT 3
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 5
51554: PUSH
51555: LD_INT 4
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 5
51564: PUSH
51565: LD_INT 5
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 4
51574: PUSH
51575: LD_INT 5
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 3
51584: PUSH
51585: LD_INT 4
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 3
51594: PUSH
51595: LD_INT 3
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 5
51604: PUSH
51605: LD_INT 3
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 3
51614: PUSH
51615: LD_INT 5
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 0
51624: PUSH
51625: LD_INT 3
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 0
51634: PUSH
51635: LD_INT 2
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 1
51644: PUSH
51645: LD_INT 3
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 1
51654: PUSH
51655: LD_INT 4
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 0
51664: PUSH
51665: LD_INT 4
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 1
51674: NEG
51675: PUSH
51676: LD_INT 3
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 1
51685: NEG
51686: PUSH
51687: LD_INT 2
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 2
51696: PUSH
51697: LD_INT 4
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 2
51706: NEG
51707: PUSH
51708: LD_INT 2
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 4
51717: NEG
51718: PUSH
51719: LD_INT 0
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 4
51728: NEG
51729: PUSH
51730: LD_INT 1
51732: NEG
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 3
51740: NEG
51741: PUSH
51742: LD_INT 0
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 3
51751: NEG
51752: PUSH
51753: LD_INT 1
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 4
51762: NEG
51763: PUSH
51764: LD_INT 1
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 5
51773: NEG
51774: PUSH
51775: LD_INT 0
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 5
51784: NEG
51785: PUSH
51786: LD_INT 1
51788: NEG
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 5
51796: NEG
51797: PUSH
51798: LD_INT 2
51800: NEG
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 3
51808: NEG
51809: PUSH
51810: LD_INT 2
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: ST_TO_ADDR
// end ; end ;
51864: GO 51867
51866: POP
// case btype of b_depot , b_warehouse :
51867: LD_VAR 0 1
51871: PUSH
51872: LD_INT 0
51874: DOUBLE
51875: EQUAL
51876: IFTRUE 51886
51878: LD_INT 1
51880: DOUBLE
51881: EQUAL
51882: IFTRUE 51886
51884: GO 52087
51886: POP
// case nation of nation_american :
51887: LD_VAR 0 5
51891: PUSH
51892: LD_INT 1
51894: DOUBLE
51895: EQUAL
51896: IFTRUE 51900
51898: GO 51956
51900: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
51901: LD_ADDR_VAR 0 9
51905: PUSH
51906: LD_VAR 0 11
51910: PUSH
51911: LD_VAR 0 12
51915: PUSH
51916: LD_VAR 0 13
51920: PUSH
51921: LD_VAR 0 14
51925: PUSH
51926: LD_VAR 0 15
51930: PUSH
51931: LD_VAR 0 16
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: PUSH
51944: LD_VAR 0 4
51948: PUSH
51949: LD_INT 1
51951: PLUS
51952: ARRAY
51953: ST_TO_ADDR
51954: GO 52085
51956: LD_INT 2
51958: DOUBLE
51959: EQUAL
51960: IFTRUE 51964
51962: GO 52020
51964: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
51965: LD_ADDR_VAR 0 9
51969: PUSH
51970: LD_VAR 0 17
51974: PUSH
51975: LD_VAR 0 18
51979: PUSH
51980: LD_VAR 0 19
51984: PUSH
51985: LD_VAR 0 20
51989: PUSH
51990: LD_VAR 0 21
51994: PUSH
51995: LD_VAR 0 22
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: PUSH
52008: LD_VAR 0 4
52012: PUSH
52013: LD_INT 1
52015: PLUS
52016: ARRAY
52017: ST_TO_ADDR
52018: GO 52085
52020: LD_INT 3
52022: DOUBLE
52023: EQUAL
52024: IFTRUE 52028
52026: GO 52084
52028: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
52029: LD_ADDR_VAR 0 9
52033: PUSH
52034: LD_VAR 0 23
52038: PUSH
52039: LD_VAR 0 24
52043: PUSH
52044: LD_VAR 0 25
52048: PUSH
52049: LD_VAR 0 26
52053: PUSH
52054: LD_VAR 0 27
52058: PUSH
52059: LD_VAR 0 28
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: PUSH
52072: LD_VAR 0 4
52076: PUSH
52077: LD_INT 1
52079: PLUS
52080: ARRAY
52081: ST_TO_ADDR
52082: GO 52085
52084: POP
52085: GO 52640
52087: LD_INT 2
52089: DOUBLE
52090: EQUAL
52091: IFTRUE 52101
52093: LD_INT 3
52095: DOUBLE
52096: EQUAL
52097: IFTRUE 52101
52099: GO 52157
52101: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
52102: LD_ADDR_VAR 0 9
52106: PUSH
52107: LD_VAR 0 29
52111: PUSH
52112: LD_VAR 0 30
52116: PUSH
52117: LD_VAR 0 31
52121: PUSH
52122: LD_VAR 0 32
52126: PUSH
52127: LD_VAR 0 33
52131: PUSH
52132: LD_VAR 0 34
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: LIST
52144: PUSH
52145: LD_VAR 0 4
52149: PUSH
52150: LD_INT 1
52152: PLUS
52153: ARRAY
52154: ST_TO_ADDR
52155: GO 52640
52157: LD_INT 16
52159: DOUBLE
52160: EQUAL
52161: IFTRUE 52219
52163: LD_INT 17
52165: DOUBLE
52166: EQUAL
52167: IFTRUE 52219
52169: LD_INT 18
52171: DOUBLE
52172: EQUAL
52173: IFTRUE 52219
52175: LD_INT 19
52177: DOUBLE
52178: EQUAL
52179: IFTRUE 52219
52181: LD_INT 22
52183: DOUBLE
52184: EQUAL
52185: IFTRUE 52219
52187: LD_INT 20
52189: DOUBLE
52190: EQUAL
52191: IFTRUE 52219
52193: LD_INT 21
52195: DOUBLE
52196: EQUAL
52197: IFTRUE 52219
52199: LD_INT 23
52201: DOUBLE
52202: EQUAL
52203: IFTRUE 52219
52205: LD_INT 24
52207: DOUBLE
52208: EQUAL
52209: IFTRUE 52219
52211: LD_INT 25
52213: DOUBLE
52214: EQUAL
52215: IFTRUE 52219
52217: GO 52275
52219: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
52220: LD_ADDR_VAR 0 9
52224: PUSH
52225: LD_VAR 0 35
52229: PUSH
52230: LD_VAR 0 36
52234: PUSH
52235: LD_VAR 0 37
52239: PUSH
52240: LD_VAR 0 38
52244: PUSH
52245: LD_VAR 0 39
52249: PUSH
52250: LD_VAR 0 40
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: PUSH
52263: LD_VAR 0 4
52267: PUSH
52268: LD_INT 1
52270: PLUS
52271: ARRAY
52272: ST_TO_ADDR
52273: GO 52640
52275: LD_INT 6
52277: DOUBLE
52278: EQUAL
52279: IFTRUE 52331
52281: LD_INT 7
52283: DOUBLE
52284: EQUAL
52285: IFTRUE 52331
52287: LD_INT 8
52289: DOUBLE
52290: EQUAL
52291: IFTRUE 52331
52293: LD_INT 13
52295: DOUBLE
52296: EQUAL
52297: IFTRUE 52331
52299: LD_INT 12
52301: DOUBLE
52302: EQUAL
52303: IFTRUE 52331
52305: LD_INT 15
52307: DOUBLE
52308: EQUAL
52309: IFTRUE 52331
52311: LD_INT 11
52313: DOUBLE
52314: EQUAL
52315: IFTRUE 52331
52317: LD_INT 14
52319: DOUBLE
52320: EQUAL
52321: IFTRUE 52331
52323: LD_INT 10
52325: DOUBLE
52326: EQUAL
52327: IFTRUE 52331
52329: GO 52387
52331: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
52332: LD_ADDR_VAR 0 9
52336: PUSH
52337: LD_VAR 0 41
52341: PUSH
52342: LD_VAR 0 42
52346: PUSH
52347: LD_VAR 0 43
52351: PUSH
52352: LD_VAR 0 44
52356: PUSH
52357: LD_VAR 0 45
52361: PUSH
52362: LD_VAR 0 46
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: LIST
52371: LIST
52372: LIST
52373: LIST
52374: PUSH
52375: LD_VAR 0 4
52379: PUSH
52380: LD_INT 1
52382: PLUS
52383: ARRAY
52384: ST_TO_ADDR
52385: GO 52640
52387: LD_INT 36
52389: DOUBLE
52390: EQUAL
52391: IFTRUE 52395
52393: GO 52451
52395: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
52396: LD_ADDR_VAR 0 9
52400: PUSH
52401: LD_VAR 0 47
52405: PUSH
52406: LD_VAR 0 48
52410: PUSH
52411: LD_VAR 0 49
52415: PUSH
52416: LD_VAR 0 50
52420: PUSH
52421: LD_VAR 0 51
52425: PUSH
52426: LD_VAR 0 52
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: PUSH
52439: LD_VAR 0 4
52443: PUSH
52444: LD_INT 1
52446: PLUS
52447: ARRAY
52448: ST_TO_ADDR
52449: GO 52640
52451: LD_INT 4
52453: DOUBLE
52454: EQUAL
52455: IFTRUE 52477
52457: LD_INT 5
52459: DOUBLE
52460: EQUAL
52461: IFTRUE 52477
52463: LD_INT 34
52465: DOUBLE
52466: EQUAL
52467: IFTRUE 52477
52469: LD_INT 37
52471: DOUBLE
52472: EQUAL
52473: IFTRUE 52477
52475: GO 52533
52477: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
52478: LD_ADDR_VAR 0 9
52482: PUSH
52483: LD_VAR 0 53
52487: PUSH
52488: LD_VAR 0 54
52492: PUSH
52493: LD_VAR 0 55
52497: PUSH
52498: LD_VAR 0 56
52502: PUSH
52503: LD_VAR 0 57
52507: PUSH
52508: LD_VAR 0 58
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: PUSH
52521: LD_VAR 0 4
52525: PUSH
52526: LD_INT 1
52528: PLUS
52529: ARRAY
52530: ST_TO_ADDR
52531: GO 52640
52533: LD_INT 31
52535: DOUBLE
52536: EQUAL
52537: IFTRUE 52583
52539: LD_INT 32
52541: DOUBLE
52542: EQUAL
52543: IFTRUE 52583
52545: LD_INT 33
52547: DOUBLE
52548: EQUAL
52549: IFTRUE 52583
52551: LD_INT 27
52553: DOUBLE
52554: EQUAL
52555: IFTRUE 52583
52557: LD_INT 26
52559: DOUBLE
52560: EQUAL
52561: IFTRUE 52583
52563: LD_INT 28
52565: DOUBLE
52566: EQUAL
52567: IFTRUE 52583
52569: LD_INT 29
52571: DOUBLE
52572: EQUAL
52573: IFTRUE 52583
52575: LD_INT 30
52577: DOUBLE
52578: EQUAL
52579: IFTRUE 52583
52581: GO 52639
52583: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
52584: LD_ADDR_VAR 0 9
52588: PUSH
52589: LD_VAR 0 59
52593: PUSH
52594: LD_VAR 0 60
52598: PUSH
52599: LD_VAR 0 61
52603: PUSH
52604: LD_VAR 0 62
52608: PUSH
52609: LD_VAR 0 63
52613: PUSH
52614: LD_VAR 0 64
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: PUSH
52627: LD_VAR 0 4
52631: PUSH
52632: LD_INT 1
52634: PLUS
52635: ARRAY
52636: ST_TO_ADDR
52637: GO 52640
52639: POP
// temp_list2 = [ ] ;
52640: LD_ADDR_VAR 0 10
52644: PUSH
52645: EMPTY
52646: ST_TO_ADDR
// for i in temp_list do
52647: LD_ADDR_VAR 0 8
52651: PUSH
52652: LD_VAR 0 9
52656: PUSH
52657: FOR_IN
52658: IFFALSE 52710
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
52660: LD_ADDR_VAR 0 10
52664: PUSH
52665: LD_VAR 0 10
52669: PUSH
52670: LD_VAR 0 8
52674: PUSH
52675: LD_INT 1
52677: ARRAY
52678: PUSH
52679: LD_VAR 0 2
52683: PLUS
52684: PUSH
52685: LD_VAR 0 8
52689: PUSH
52690: LD_INT 2
52692: ARRAY
52693: PUSH
52694: LD_VAR 0 3
52698: PLUS
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: EMPTY
52705: LIST
52706: ADD
52707: ST_TO_ADDR
52708: GO 52657
52710: POP
52711: POP
// result = temp_list2 ;
52712: LD_ADDR_VAR 0 7
52716: PUSH
52717: LD_VAR 0 10
52721: ST_TO_ADDR
// end ;
52722: LD_VAR 0 7
52726: RET
// export function EnemyInRange ( unit , dist ) ; begin
52727: LD_INT 0
52729: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
52730: LD_ADDR_VAR 0 3
52734: PUSH
52735: LD_VAR 0 1
52739: PPUSH
52740: CALL_OW 255
52744: PPUSH
52745: LD_VAR 0 1
52749: PPUSH
52750: CALL_OW 250
52754: PPUSH
52755: LD_VAR 0 1
52759: PPUSH
52760: CALL_OW 251
52764: PPUSH
52765: LD_VAR 0 2
52769: PPUSH
52770: CALL 26831 0 4
52774: PUSH
52775: LD_INT 4
52777: ARRAY
52778: ST_TO_ADDR
// end ;
52779: LD_VAR 0 3
52783: RET
// export function PlayerSeeMe ( unit ) ; begin
52784: LD_INT 0
52786: PPUSH
// result := See ( your_side , unit ) ;
52787: LD_ADDR_VAR 0 2
52791: PUSH
52792: LD_OWVAR 2
52796: PPUSH
52797: LD_VAR 0 1
52801: PPUSH
52802: CALL_OW 292
52806: ST_TO_ADDR
// end ;
52807: LD_VAR 0 2
52811: RET
// export function ReverseDir ( unit ) ; begin
52812: LD_INT 0
52814: PPUSH
// if not unit then
52815: LD_VAR 0 1
52819: NOT
52820: IFFALSE 52824
// exit ;
52822: GO 52847
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
52824: LD_ADDR_VAR 0 2
52828: PUSH
52829: LD_VAR 0 1
52833: PPUSH
52834: CALL_OW 254
52838: PUSH
52839: LD_INT 3
52841: PLUS
52842: PUSH
52843: LD_INT 6
52845: MOD
52846: ST_TO_ADDR
// end ;
52847: LD_VAR 0 2
52851: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
52852: LD_INT 0
52854: PPUSH
52855: PPUSH
52856: PPUSH
52857: PPUSH
52858: PPUSH
// if not hexes then
52859: LD_VAR 0 2
52863: NOT
52864: IFFALSE 52868
// exit ;
52866: GO 53016
// dist := 9999 ;
52868: LD_ADDR_VAR 0 5
52872: PUSH
52873: LD_INT 9999
52875: ST_TO_ADDR
// for i = 1 to hexes do
52876: LD_ADDR_VAR 0 4
52880: PUSH
52881: DOUBLE
52882: LD_INT 1
52884: DEC
52885: ST_TO_ADDR
52886: LD_VAR 0 2
52890: PUSH
52891: FOR_TO
52892: IFFALSE 53004
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
52894: LD_VAR 0 1
52898: PPUSH
52899: LD_VAR 0 2
52903: PUSH
52904: LD_VAR 0 4
52908: ARRAY
52909: PUSH
52910: LD_INT 1
52912: ARRAY
52913: PPUSH
52914: LD_VAR 0 2
52918: PUSH
52919: LD_VAR 0 4
52923: ARRAY
52924: PUSH
52925: LD_INT 2
52927: ARRAY
52928: PPUSH
52929: CALL_OW 297
52933: PUSH
52934: LD_VAR 0 5
52938: LESS
52939: IFFALSE 53002
// begin hex := hexes [ i ] ;
52941: LD_ADDR_VAR 0 7
52945: PUSH
52946: LD_VAR 0 2
52950: PUSH
52951: LD_VAR 0 4
52955: ARRAY
52956: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52957: LD_ADDR_VAR 0 5
52961: PUSH
52962: LD_VAR 0 1
52966: PPUSH
52967: LD_VAR 0 2
52971: PUSH
52972: LD_VAR 0 4
52976: ARRAY
52977: PUSH
52978: LD_INT 1
52980: ARRAY
52981: PPUSH
52982: LD_VAR 0 2
52986: PUSH
52987: LD_VAR 0 4
52991: ARRAY
52992: PUSH
52993: LD_INT 2
52995: ARRAY
52996: PPUSH
52997: CALL_OW 297
53001: ST_TO_ADDR
// end ; end ;
53002: GO 52891
53004: POP
53005: POP
// result := hex ;
53006: LD_ADDR_VAR 0 3
53010: PUSH
53011: LD_VAR 0 7
53015: ST_TO_ADDR
// end ;
53016: LD_VAR 0 3
53020: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
53021: LD_INT 0
53023: PPUSH
53024: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
53025: LD_VAR 0 1
53029: NOT
53030: PUSH
53031: LD_VAR 0 1
53035: PUSH
53036: LD_INT 21
53038: PUSH
53039: LD_INT 2
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 23
53048: PUSH
53049: LD_INT 2
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PPUSH
53060: CALL_OW 69
53064: IN
53065: NOT
53066: OR
53067: IFFALSE 53071
// exit ;
53069: GO 53118
// for i = 1 to 3 do
53071: LD_ADDR_VAR 0 3
53075: PUSH
53076: DOUBLE
53077: LD_INT 1
53079: DEC
53080: ST_TO_ADDR
53081: LD_INT 3
53083: PUSH
53084: FOR_TO
53085: IFFALSE 53116
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
53087: LD_VAR 0 1
53091: PPUSH
53092: CALL_OW 250
53096: PPUSH
53097: LD_VAR 0 1
53101: PPUSH
53102: CALL_OW 251
53106: PPUSH
53107: LD_INT 1
53109: PPUSH
53110: CALL_OW 453
53114: GO 53084
53116: POP
53117: POP
// end ;
53118: LD_VAR 0 2
53122: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
53123: LD_INT 0
53125: PPUSH
53126: PPUSH
53127: PPUSH
53128: PPUSH
53129: PPUSH
53130: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
53131: LD_VAR 0 1
53135: NOT
53136: PUSH
53137: LD_VAR 0 2
53141: NOT
53142: OR
53143: PUSH
53144: LD_VAR 0 1
53148: PPUSH
53149: CALL_OW 314
53153: OR
53154: IFFALSE 53158
// exit ;
53156: GO 53599
// x := GetX ( enemy_unit ) ;
53158: LD_ADDR_VAR 0 7
53162: PUSH
53163: LD_VAR 0 2
53167: PPUSH
53168: CALL_OW 250
53172: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
53173: LD_ADDR_VAR 0 8
53177: PUSH
53178: LD_VAR 0 2
53182: PPUSH
53183: CALL_OW 251
53187: ST_TO_ADDR
// if not x or not y then
53188: LD_VAR 0 7
53192: NOT
53193: PUSH
53194: LD_VAR 0 8
53198: NOT
53199: OR
53200: IFFALSE 53204
// exit ;
53202: GO 53599
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
53204: LD_ADDR_VAR 0 6
53208: PUSH
53209: LD_VAR 0 7
53213: PPUSH
53214: LD_INT 0
53216: PPUSH
53217: LD_INT 4
53219: PPUSH
53220: CALL_OW 272
53224: PUSH
53225: LD_VAR 0 8
53229: PPUSH
53230: LD_INT 0
53232: PPUSH
53233: LD_INT 4
53235: PPUSH
53236: CALL_OW 273
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_VAR 0 7
53249: PPUSH
53250: LD_INT 1
53252: PPUSH
53253: LD_INT 4
53255: PPUSH
53256: CALL_OW 272
53260: PUSH
53261: LD_VAR 0 8
53265: PPUSH
53266: LD_INT 1
53268: PPUSH
53269: LD_INT 4
53271: PPUSH
53272: CALL_OW 273
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_VAR 0 7
53285: PPUSH
53286: LD_INT 2
53288: PPUSH
53289: LD_INT 4
53291: PPUSH
53292: CALL_OW 272
53296: PUSH
53297: LD_VAR 0 8
53301: PPUSH
53302: LD_INT 2
53304: PPUSH
53305: LD_INT 4
53307: PPUSH
53308: CALL_OW 273
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_VAR 0 7
53321: PPUSH
53322: LD_INT 3
53324: PPUSH
53325: LD_INT 4
53327: PPUSH
53328: CALL_OW 272
53332: PUSH
53333: LD_VAR 0 8
53337: PPUSH
53338: LD_INT 3
53340: PPUSH
53341: LD_INT 4
53343: PPUSH
53344: CALL_OW 273
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_VAR 0 7
53357: PPUSH
53358: LD_INT 4
53360: PPUSH
53361: LD_INT 4
53363: PPUSH
53364: CALL_OW 272
53368: PUSH
53369: LD_VAR 0 8
53373: PPUSH
53374: LD_INT 4
53376: PPUSH
53377: LD_INT 4
53379: PPUSH
53380: CALL_OW 273
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_VAR 0 7
53393: PPUSH
53394: LD_INT 5
53396: PPUSH
53397: LD_INT 4
53399: PPUSH
53400: CALL_OW 272
53404: PUSH
53405: LD_VAR 0 8
53409: PPUSH
53410: LD_INT 5
53412: PPUSH
53413: LD_INT 4
53415: PPUSH
53416: CALL_OW 273
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: ST_TO_ADDR
// for i = tmp downto 1 do
53433: LD_ADDR_VAR 0 4
53437: PUSH
53438: DOUBLE
53439: LD_VAR 0 6
53443: INC
53444: ST_TO_ADDR
53445: LD_INT 1
53447: PUSH
53448: FOR_DOWNTO
53449: IFFALSE 53550
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
53451: LD_VAR 0 6
53455: PUSH
53456: LD_VAR 0 4
53460: ARRAY
53461: PUSH
53462: LD_INT 1
53464: ARRAY
53465: PPUSH
53466: LD_VAR 0 6
53470: PUSH
53471: LD_VAR 0 4
53475: ARRAY
53476: PUSH
53477: LD_INT 2
53479: ARRAY
53480: PPUSH
53481: CALL_OW 488
53485: NOT
53486: PUSH
53487: LD_VAR 0 6
53491: PUSH
53492: LD_VAR 0 4
53496: ARRAY
53497: PUSH
53498: LD_INT 1
53500: ARRAY
53501: PPUSH
53502: LD_VAR 0 6
53506: PUSH
53507: LD_VAR 0 4
53511: ARRAY
53512: PUSH
53513: LD_INT 2
53515: ARRAY
53516: PPUSH
53517: CALL_OW 428
53521: PUSH
53522: LD_INT 0
53524: NONEQUAL
53525: OR
53526: IFFALSE 53548
// tmp := Delete ( tmp , i ) ;
53528: LD_ADDR_VAR 0 6
53532: PUSH
53533: LD_VAR 0 6
53537: PPUSH
53538: LD_VAR 0 4
53542: PPUSH
53543: CALL_OW 3
53547: ST_TO_ADDR
53548: GO 53448
53550: POP
53551: POP
// j := GetClosestHex ( unit , tmp ) ;
53552: LD_ADDR_VAR 0 5
53556: PUSH
53557: LD_VAR 0 1
53561: PPUSH
53562: LD_VAR 0 6
53566: PPUSH
53567: CALL 52852 0 2
53571: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
53572: LD_VAR 0 1
53576: PPUSH
53577: LD_VAR 0 5
53581: PUSH
53582: LD_INT 1
53584: ARRAY
53585: PPUSH
53586: LD_VAR 0 5
53590: PUSH
53591: LD_INT 2
53593: ARRAY
53594: PPUSH
53595: CALL_OW 111
// end ;
53599: LD_VAR 0 3
53603: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
53604: LD_INT 0
53606: PPUSH
53607: PPUSH
53608: PPUSH
// uc_side = 0 ;
53609: LD_ADDR_OWVAR 20
53613: PUSH
53614: LD_INT 0
53616: ST_TO_ADDR
// uc_nation = 0 ;
53617: LD_ADDR_OWVAR 21
53621: PUSH
53622: LD_INT 0
53624: ST_TO_ADDR
// InitHc ;
53625: CALL_OW 19
// InitVc ;
53629: CALL_OW 20
// if mastodonts then
53633: LD_VAR 0 6
53637: IFFALSE 53704
// for i = 1 to mastodonts do
53639: LD_ADDR_VAR 0 11
53643: PUSH
53644: DOUBLE
53645: LD_INT 1
53647: DEC
53648: ST_TO_ADDR
53649: LD_VAR 0 6
53653: PUSH
53654: FOR_TO
53655: IFFALSE 53702
// begin vc_chassis := 31 ;
53657: LD_ADDR_OWVAR 37
53661: PUSH
53662: LD_INT 31
53664: ST_TO_ADDR
// vc_control := control_rider ;
53665: LD_ADDR_OWVAR 38
53669: PUSH
53670: LD_INT 4
53672: ST_TO_ADDR
// animal := CreateVehicle ;
53673: LD_ADDR_VAR 0 12
53677: PUSH
53678: CALL_OW 45
53682: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53683: LD_VAR 0 12
53687: PPUSH
53688: LD_VAR 0 8
53692: PPUSH
53693: LD_INT 0
53695: PPUSH
53696: CALL 55773 0 3
// end ;
53700: GO 53654
53702: POP
53703: POP
// if horses then
53704: LD_VAR 0 5
53708: IFFALSE 53775
// for i = 1 to horses do
53710: LD_ADDR_VAR 0 11
53714: PUSH
53715: DOUBLE
53716: LD_INT 1
53718: DEC
53719: ST_TO_ADDR
53720: LD_VAR 0 5
53724: PUSH
53725: FOR_TO
53726: IFFALSE 53773
// begin hc_class := 21 ;
53728: LD_ADDR_OWVAR 28
53732: PUSH
53733: LD_INT 21
53735: ST_TO_ADDR
// hc_gallery :=  ;
53736: LD_ADDR_OWVAR 33
53740: PUSH
53741: LD_STRING 
53743: ST_TO_ADDR
// animal := CreateHuman ;
53744: LD_ADDR_VAR 0 12
53748: PUSH
53749: CALL_OW 44
53753: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53754: LD_VAR 0 12
53758: PPUSH
53759: LD_VAR 0 8
53763: PPUSH
53764: LD_INT 0
53766: PPUSH
53767: CALL 55773 0 3
// end ;
53771: GO 53725
53773: POP
53774: POP
// if birds then
53775: LD_VAR 0 1
53779: IFFALSE 53846
// for i = 1 to birds do
53781: LD_ADDR_VAR 0 11
53785: PUSH
53786: DOUBLE
53787: LD_INT 1
53789: DEC
53790: ST_TO_ADDR
53791: LD_VAR 0 1
53795: PUSH
53796: FOR_TO
53797: IFFALSE 53844
// begin hc_class = 18 ;
53799: LD_ADDR_OWVAR 28
53803: PUSH
53804: LD_INT 18
53806: ST_TO_ADDR
// hc_gallery =  ;
53807: LD_ADDR_OWVAR 33
53811: PUSH
53812: LD_STRING 
53814: ST_TO_ADDR
// animal := CreateHuman ;
53815: LD_ADDR_VAR 0 12
53819: PUSH
53820: CALL_OW 44
53824: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53825: LD_VAR 0 12
53829: PPUSH
53830: LD_VAR 0 8
53834: PPUSH
53835: LD_INT 0
53837: PPUSH
53838: CALL 55773 0 3
// end ;
53842: GO 53796
53844: POP
53845: POP
// if tigers then
53846: LD_VAR 0 2
53850: IFFALSE 53934
// for i = 1 to tigers do
53852: LD_ADDR_VAR 0 11
53856: PUSH
53857: DOUBLE
53858: LD_INT 1
53860: DEC
53861: ST_TO_ADDR
53862: LD_VAR 0 2
53866: PUSH
53867: FOR_TO
53868: IFFALSE 53932
// begin hc_class = class_tiger ;
53870: LD_ADDR_OWVAR 28
53874: PUSH
53875: LD_INT 14
53877: ST_TO_ADDR
// hc_gallery =  ;
53878: LD_ADDR_OWVAR 33
53882: PUSH
53883: LD_STRING 
53885: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
53886: LD_ADDR_OWVAR 35
53890: PUSH
53891: LD_INT 7
53893: NEG
53894: PPUSH
53895: LD_INT 7
53897: PPUSH
53898: CALL_OW 12
53902: ST_TO_ADDR
// animal := CreateHuman ;
53903: LD_ADDR_VAR 0 12
53907: PUSH
53908: CALL_OW 44
53912: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53913: LD_VAR 0 12
53917: PPUSH
53918: LD_VAR 0 8
53922: PPUSH
53923: LD_INT 0
53925: PPUSH
53926: CALL 55773 0 3
// end ;
53930: GO 53867
53932: POP
53933: POP
// if apemans then
53934: LD_VAR 0 3
53938: IFFALSE 54061
// for i = 1 to apemans do
53940: LD_ADDR_VAR 0 11
53944: PUSH
53945: DOUBLE
53946: LD_INT 1
53948: DEC
53949: ST_TO_ADDR
53950: LD_VAR 0 3
53954: PUSH
53955: FOR_TO
53956: IFFALSE 54059
// begin hc_class = class_apeman ;
53958: LD_ADDR_OWVAR 28
53962: PUSH
53963: LD_INT 12
53965: ST_TO_ADDR
// hc_gallery =  ;
53966: LD_ADDR_OWVAR 33
53970: PUSH
53971: LD_STRING 
53973: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
53974: LD_ADDR_OWVAR 35
53978: PUSH
53979: LD_INT 5
53981: NEG
53982: PPUSH
53983: LD_INT 5
53985: PPUSH
53986: CALL_OW 12
53990: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
53991: LD_ADDR_OWVAR 31
53995: PUSH
53996: LD_INT 1
53998: PPUSH
53999: LD_INT 3
54001: PPUSH
54002: CALL_OW 12
54006: PUSH
54007: LD_INT 1
54009: PPUSH
54010: LD_INT 3
54012: PPUSH
54013: CALL_OW 12
54017: PUSH
54018: LD_INT 0
54020: PUSH
54021: LD_INT 0
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: ST_TO_ADDR
// animal := CreateHuman ;
54030: LD_ADDR_VAR 0 12
54034: PUSH
54035: CALL_OW 44
54039: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54040: LD_VAR 0 12
54044: PPUSH
54045: LD_VAR 0 8
54049: PPUSH
54050: LD_INT 0
54052: PPUSH
54053: CALL 55773 0 3
// end ;
54057: GO 53955
54059: POP
54060: POP
// if enchidnas then
54061: LD_VAR 0 4
54065: IFFALSE 54132
// for i = 1 to enchidnas do
54067: LD_ADDR_VAR 0 11
54071: PUSH
54072: DOUBLE
54073: LD_INT 1
54075: DEC
54076: ST_TO_ADDR
54077: LD_VAR 0 4
54081: PUSH
54082: FOR_TO
54083: IFFALSE 54130
// begin hc_class = 13 ;
54085: LD_ADDR_OWVAR 28
54089: PUSH
54090: LD_INT 13
54092: ST_TO_ADDR
// hc_gallery =  ;
54093: LD_ADDR_OWVAR 33
54097: PUSH
54098: LD_STRING 
54100: ST_TO_ADDR
// animal := CreateHuman ;
54101: LD_ADDR_VAR 0 12
54105: PUSH
54106: CALL_OW 44
54110: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54111: LD_VAR 0 12
54115: PPUSH
54116: LD_VAR 0 8
54120: PPUSH
54121: LD_INT 0
54123: PPUSH
54124: CALL 55773 0 3
// end ;
54128: GO 54082
54130: POP
54131: POP
// if fishes then
54132: LD_VAR 0 7
54136: IFFALSE 54203
// for i = 1 to fishes do
54138: LD_ADDR_VAR 0 11
54142: PUSH
54143: DOUBLE
54144: LD_INT 1
54146: DEC
54147: ST_TO_ADDR
54148: LD_VAR 0 7
54152: PUSH
54153: FOR_TO
54154: IFFALSE 54201
// begin hc_class = 20 ;
54156: LD_ADDR_OWVAR 28
54160: PUSH
54161: LD_INT 20
54163: ST_TO_ADDR
// hc_gallery =  ;
54164: LD_ADDR_OWVAR 33
54168: PUSH
54169: LD_STRING 
54171: ST_TO_ADDR
// animal := CreateHuman ;
54172: LD_ADDR_VAR 0 12
54176: PUSH
54177: CALL_OW 44
54181: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
54182: LD_VAR 0 12
54186: PPUSH
54187: LD_VAR 0 9
54191: PPUSH
54192: LD_INT 0
54194: PPUSH
54195: CALL 55773 0 3
// end ;
54199: GO 54153
54201: POP
54202: POP
// end ;
54203: LD_VAR 0 10
54207: RET
// export function WantHeal ( sci , unit ) ; begin
54208: LD_INT 0
54210: PPUSH
// if GetTaskList ( sci ) > 0 then
54211: LD_VAR 0 1
54215: PPUSH
54216: CALL_OW 437
54220: PUSH
54221: LD_INT 0
54223: GREATER
54224: IFFALSE 54294
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
54226: LD_VAR 0 1
54230: PPUSH
54231: CALL_OW 437
54235: PUSH
54236: LD_INT 1
54238: ARRAY
54239: PUSH
54240: LD_INT 1
54242: ARRAY
54243: PUSH
54244: LD_STRING l
54246: EQUAL
54247: PUSH
54248: LD_VAR 0 1
54252: PPUSH
54253: CALL_OW 437
54257: PUSH
54258: LD_INT 1
54260: ARRAY
54261: PUSH
54262: LD_INT 4
54264: ARRAY
54265: PUSH
54266: LD_VAR 0 2
54270: EQUAL
54271: AND
54272: IFFALSE 54284
// result := true else
54274: LD_ADDR_VAR 0 3
54278: PUSH
54279: LD_INT 1
54281: ST_TO_ADDR
54282: GO 54292
// result := false ;
54284: LD_ADDR_VAR 0 3
54288: PUSH
54289: LD_INT 0
54291: ST_TO_ADDR
// end else
54292: GO 54302
// result := false ;
54294: LD_ADDR_VAR 0 3
54298: PUSH
54299: LD_INT 0
54301: ST_TO_ADDR
// end ;
54302: LD_VAR 0 3
54306: RET
// export function HealTarget ( sci ) ; begin
54307: LD_INT 0
54309: PPUSH
// if not sci then
54310: LD_VAR 0 1
54314: NOT
54315: IFFALSE 54319
// exit ;
54317: GO 54384
// result := 0 ;
54319: LD_ADDR_VAR 0 2
54323: PUSH
54324: LD_INT 0
54326: ST_TO_ADDR
// if GetTaskList ( sci ) then
54327: LD_VAR 0 1
54331: PPUSH
54332: CALL_OW 437
54336: IFFALSE 54384
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
54338: LD_VAR 0 1
54342: PPUSH
54343: CALL_OW 437
54347: PUSH
54348: LD_INT 1
54350: ARRAY
54351: PUSH
54352: LD_INT 1
54354: ARRAY
54355: PUSH
54356: LD_STRING l
54358: EQUAL
54359: IFFALSE 54384
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
54361: LD_ADDR_VAR 0 2
54365: PUSH
54366: LD_VAR 0 1
54370: PPUSH
54371: CALL_OW 437
54375: PUSH
54376: LD_INT 1
54378: ARRAY
54379: PUSH
54380: LD_INT 4
54382: ARRAY
54383: ST_TO_ADDR
// end ;
54384: LD_VAR 0 2
54388: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
54389: LD_INT 0
54391: PPUSH
54392: PPUSH
54393: PPUSH
54394: PPUSH
// if not base_units then
54395: LD_VAR 0 1
54399: NOT
54400: IFFALSE 54404
// exit ;
54402: GO 54491
// result := false ;
54404: LD_ADDR_VAR 0 2
54408: PUSH
54409: LD_INT 0
54411: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
54412: LD_ADDR_VAR 0 5
54416: PUSH
54417: LD_VAR 0 1
54421: PPUSH
54422: LD_INT 21
54424: PUSH
54425: LD_INT 3
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PPUSH
54432: CALL_OW 72
54436: ST_TO_ADDR
// if not tmp then
54437: LD_VAR 0 5
54441: NOT
54442: IFFALSE 54446
// exit ;
54444: GO 54491
// for i in tmp do
54446: LD_ADDR_VAR 0 3
54450: PUSH
54451: LD_VAR 0 5
54455: PUSH
54456: FOR_IN
54457: IFFALSE 54489
// begin result := EnemyInRange ( i , 22 ) ;
54459: LD_ADDR_VAR 0 2
54463: PUSH
54464: LD_VAR 0 3
54468: PPUSH
54469: LD_INT 22
54471: PPUSH
54472: CALL 52727 0 2
54476: ST_TO_ADDR
// if result then
54477: LD_VAR 0 2
54481: IFFALSE 54487
// exit ;
54483: POP
54484: POP
54485: GO 54491
// end ;
54487: GO 54456
54489: POP
54490: POP
// end ;
54491: LD_VAR 0 2
54495: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
54496: LD_INT 0
54498: PPUSH
54499: PPUSH
// if not units then
54500: LD_VAR 0 1
54504: NOT
54505: IFFALSE 54509
// exit ;
54507: GO 54579
// result := [ ] ;
54509: LD_ADDR_VAR 0 3
54513: PUSH
54514: EMPTY
54515: ST_TO_ADDR
// for i in units do
54516: LD_ADDR_VAR 0 4
54520: PUSH
54521: LD_VAR 0 1
54525: PUSH
54526: FOR_IN
54527: IFFALSE 54577
// if GetTag ( i ) = tag then
54529: LD_VAR 0 4
54533: PPUSH
54534: CALL_OW 110
54538: PUSH
54539: LD_VAR 0 2
54543: EQUAL
54544: IFFALSE 54575
// result := Insert ( result , result + 1 , i ) ;
54546: LD_ADDR_VAR 0 3
54550: PUSH
54551: LD_VAR 0 3
54555: PPUSH
54556: LD_VAR 0 3
54560: PUSH
54561: LD_INT 1
54563: PLUS
54564: PPUSH
54565: LD_VAR 0 4
54569: PPUSH
54570: CALL_OW 2
54574: ST_TO_ADDR
54575: GO 54526
54577: POP
54578: POP
// end ;
54579: LD_VAR 0 3
54583: RET
// export function IsDriver ( un ) ; begin
54584: LD_INT 0
54586: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
54587: LD_ADDR_VAR 0 2
54591: PUSH
54592: LD_VAR 0 1
54596: PUSH
54597: LD_INT 55
54599: PUSH
54600: EMPTY
54601: LIST
54602: PPUSH
54603: CALL_OW 69
54607: IN
54608: ST_TO_ADDR
// end ;
54609: LD_VAR 0 2
54613: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
54614: LD_INT 0
54616: PPUSH
54617: PPUSH
// list := [ ] ;
54618: LD_ADDR_VAR 0 5
54622: PUSH
54623: EMPTY
54624: ST_TO_ADDR
// case d of 0 :
54625: LD_VAR 0 3
54629: PUSH
54630: LD_INT 0
54632: DOUBLE
54633: EQUAL
54634: IFTRUE 54638
54636: GO 54771
54638: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
54639: LD_ADDR_VAR 0 5
54643: PUSH
54644: LD_VAR 0 1
54648: PUSH
54649: LD_INT 4
54651: MINUS
54652: PUSH
54653: LD_VAR 0 2
54657: PUSH
54658: LD_INT 4
54660: MINUS
54661: PUSH
54662: LD_INT 2
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: LIST
54669: PUSH
54670: LD_VAR 0 1
54674: PUSH
54675: LD_INT 3
54677: MINUS
54678: PUSH
54679: LD_VAR 0 2
54683: PUSH
54684: LD_INT 1
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: LIST
54691: PUSH
54692: LD_VAR 0 1
54696: PUSH
54697: LD_INT 4
54699: PLUS
54700: PUSH
54701: LD_VAR 0 2
54705: PUSH
54706: LD_INT 4
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: LIST
54713: PUSH
54714: LD_VAR 0 1
54718: PUSH
54719: LD_INT 3
54721: PLUS
54722: PUSH
54723: LD_VAR 0 2
54727: PUSH
54728: LD_INT 3
54730: PLUS
54731: PUSH
54732: LD_INT 5
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: LIST
54739: PUSH
54740: LD_VAR 0 1
54744: PUSH
54745: LD_VAR 0 2
54749: PUSH
54750: LD_INT 4
54752: PLUS
54753: PUSH
54754: LD_INT 0
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: LIST
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: LIST
54766: LIST
54767: LIST
54768: ST_TO_ADDR
// end ; 1 :
54769: GO 55469
54771: LD_INT 1
54773: DOUBLE
54774: EQUAL
54775: IFTRUE 54779
54777: GO 54912
54779: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
54780: LD_ADDR_VAR 0 5
54784: PUSH
54785: LD_VAR 0 1
54789: PUSH
54790: LD_VAR 0 2
54794: PUSH
54795: LD_INT 4
54797: MINUS
54798: PUSH
54799: LD_INT 3
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: LIST
54806: PUSH
54807: LD_VAR 0 1
54811: PUSH
54812: LD_INT 3
54814: MINUS
54815: PUSH
54816: LD_VAR 0 2
54820: PUSH
54821: LD_INT 3
54823: MINUS
54824: PUSH
54825: LD_INT 2
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: LIST
54832: PUSH
54833: LD_VAR 0 1
54837: PUSH
54838: LD_INT 4
54840: MINUS
54841: PUSH
54842: LD_VAR 0 2
54846: PUSH
54847: LD_INT 1
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: LIST
54854: PUSH
54855: LD_VAR 0 1
54859: PUSH
54860: LD_VAR 0 2
54864: PUSH
54865: LD_INT 3
54867: PLUS
54868: PUSH
54869: LD_INT 0
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: LIST
54876: PUSH
54877: LD_VAR 0 1
54881: PUSH
54882: LD_INT 4
54884: PLUS
54885: PUSH
54886: LD_VAR 0 2
54890: PUSH
54891: LD_INT 4
54893: PLUS
54894: PUSH
54895: LD_INT 5
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: LIST
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: ST_TO_ADDR
// end ; 2 :
54910: GO 55469
54912: LD_INT 2
54914: DOUBLE
54915: EQUAL
54916: IFTRUE 54920
54918: GO 55049
54920: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
54921: LD_ADDR_VAR 0 5
54925: PUSH
54926: LD_VAR 0 1
54930: PUSH
54931: LD_VAR 0 2
54935: PUSH
54936: LD_INT 3
54938: MINUS
54939: PUSH
54940: LD_INT 3
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: LIST
54947: PUSH
54948: LD_VAR 0 1
54952: PUSH
54953: LD_INT 4
54955: PLUS
54956: PUSH
54957: LD_VAR 0 2
54961: PUSH
54962: LD_INT 4
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: LIST
54969: PUSH
54970: LD_VAR 0 1
54974: PUSH
54975: LD_VAR 0 2
54979: PUSH
54980: LD_INT 4
54982: PLUS
54983: PUSH
54984: LD_INT 0
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: LIST
54991: PUSH
54992: LD_VAR 0 1
54996: PUSH
54997: LD_INT 3
54999: MINUS
55000: PUSH
55001: LD_VAR 0 2
55005: PUSH
55006: LD_INT 1
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: LIST
55013: PUSH
55014: LD_VAR 0 1
55018: PUSH
55019: LD_INT 4
55021: MINUS
55022: PUSH
55023: LD_VAR 0 2
55027: PUSH
55028: LD_INT 4
55030: MINUS
55031: PUSH
55032: LD_INT 2
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: LIST
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: LIST
55044: LIST
55045: LIST
55046: ST_TO_ADDR
// end ; 3 :
55047: GO 55469
55049: LD_INT 3
55051: DOUBLE
55052: EQUAL
55053: IFTRUE 55057
55055: GO 55190
55057: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
55058: LD_ADDR_VAR 0 5
55062: PUSH
55063: LD_VAR 0 1
55067: PUSH
55068: LD_INT 3
55070: PLUS
55071: PUSH
55072: LD_VAR 0 2
55076: PUSH
55077: LD_INT 4
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: LIST
55084: PUSH
55085: LD_VAR 0 1
55089: PUSH
55090: LD_INT 4
55092: PLUS
55093: PUSH
55094: LD_VAR 0 2
55098: PUSH
55099: LD_INT 4
55101: PLUS
55102: PUSH
55103: LD_INT 5
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: LIST
55110: PUSH
55111: LD_VAR 0 1
55115: PUSH
55116: LD_INT 4
55118: MINUS
55119: PUSH
55120: LD_VAR 0 2
55124: PUSH
55125: LD_INT 1
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: LIST
55132: PUSH
55133: LD_VAR 0 1
55137: PUSH
55138: LD_VAR 0 2
55142: PUSH
55143: LD_INT 4
55145: MINUS
55146: PUSH
55147: LD_INT 3
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: LIST
55154: PUSH
55155: LD_VAR 0 1
55159: PUSH
55160: LD_INT 3
55162: MINUS
55163: PUSH
55164: LD_VAR 0 2
55168: PUSH
55169: LD_INT 3
55171: MINUS
55172: PUSH
55173: LD_INT 2
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: LIST
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: ST_TO_ADDR
// end ; 4 :
55188: GO 55469
55190: LD_INT 4
55192: DOUBLE
55193: EQUAL
55194: IFTRUE 55198
55196: GO 55331
55198: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
55199: LD_ADDR_VAR 0 5
55203: PUSH
55204: LD_VAR 0 1
55208: PUSH
55209: LD_VAR 0 2
55213: PUSH
55214: LD_INT 4
55216: PLUS
55217: PUSH
55218: LD_INT 0
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: LIST
55225: PUSH
55226: LD_VAR 0 1
55230: PUSH
55231: LD_INT 3
55233: PLUS
55234: PUSH
55235: LD_VAR 0 2
55239: PUSH
55240: LD_INT 3
55242: PLUS
55243: PUSH
55244: LD_INT 5
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: LIST
55251: PUSH
55252: LD_VAR 0 1
55256: PUSH
55257: LD_INT 4
55259: PLUS
55260: PUSH
55261: LD_VAR 0 2
55265: PUSH
55266: LD_INT 4
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: LIST
55273: PUSH
55274: LD_VAR 0 1
55278: PUSH
55279: LD_VAR 0 2
55283: PUSH
55284: LD_INT 3
55286: MINUS
55287: PUSH
55288: LD_INT 3
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: LIST
55295: PUSH
55296: LD_VAR 0 1
55300: PUSH
55301: LD_INT 4
55303: MINUS
55304: PUSH
55305: LD_VAR 0 2
55309: PUSH
55310: LD_INT 4
55312: MINUS
55313: PUSH
55314: LD_INT 2
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: LIST
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: ST_TO_ADDR
// end ; 5 :
55329: GO 55469
55331: LD_INT 5
55333: DOUBLE
55334: EQUAL
55335: IFTRUE 55339
55337: GO 55468
55339: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
55340: LD_ADDR_VAR 0 5
55344: PUSH
55345: LD_VAR 0 1
55349: PUSH
55350: LD_INT 4
55352: MINUS
55353: PUSH
55354: LD_VAR 0 2
55358: PUSH
55359: LD_INT 1
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: LIST
55366: PUSH
55367: LD_VAR 0 1
55371: PUSH
55372: LD_VAR 0 2
55376: PUSH
55377: LD_INT 4
55379: MINUS
55380: PUSH
55381: LD_INT 3
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: LIST
55388: PUSH
55389: LD_VAR 0 1
55393: PUSH
55394: LD_INT 4
55396: PLUS
55397: PUSH
55398: LD_VAR 0 2
55402: PUSH
55403: LD_INT 4
55405: PLUS
55406: PUSH
55407: LD_INT 5
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: LIST
55414: PUSH
55415: LD_VAR 0 1
55419: PUSH
55420: LD_INT 3
55422: PLUS
55423: PUSH
55424: LD_VAR 0 2
55428: PUSH
55429: LD_INT 4
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: LIST
55436: PUSH
55437: LD_VAR 0 1
55441: PUSH
55442: LD_VAR 0 2
55446: PUSH
55447: LD_INT 3
55449: PLUS
55450: PUSH
55451: LD_INT 0
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: LIST
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: ST_TO_ADDR
// end ; end ;
55466: GO 55469
55468: POP
// result := list ;
55469: LD_ADDR_VAR 0 4
55473: PUSH
55474: LD_VAR 0 5
55478: ST_TO_ADDR
// end ;
55479: LD_VAR 0 4
55483: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
55484: LD_INT 0
55486: PPUSH
55487: PPUSH
55488: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
55489: LD_VAR 0 1
55493: NOT
55494: PUSH
55495: LD_VAR 0 2
55499: PUSH
55500: LD_INT 1
55502: PUSH
55503: LD_INT 2
55505: PUSH
55506: LD_INT 3
55508: PUSH
55509: LD_INT 4
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: IN
55518: NOT
55519: OR
55520: IFFALSE 55524
// exit ;
55522: GO 55616
// tmp := [ ] ;
55524: LD_ADDR_VAR 0 5
55528: PUSH
55529: EMPTY
55530: ST_TO_ADDR
// for i in units do
55531: LD_ADDR_VAR 0 4
55535: PUSH
55536: LD_VAR 0 1
55540: PUSH
55541: FOR_IN
55542: IFFALSE 55585
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
55544: LD_ADDR_VAR 0 5
55548: PUSH
55549: LD_VAR 0 5
55553: PPUSH
55554: LD_VAR 0 5
55558: PUSH
55559: LD_INT 1
55561: PLUS
55562: PPUSH
55563: LD_VAR 0 4
55567: PPUSH
55568: LD_VAR 0 2
55572: PPUSH
55573: CALL_OW 259
55577: PPUSH
55578: CALL_OW 2
55582: ST_TO_ADDR
55583: GO 55541
55585: POP
55586: POP
// if not tmp then
55587: LD_VAR 0 5
55591: NOT
55592: IFFALSE 55596
// exit ;
55594: GO 55616
// result := SortListByListDesc ( units , tmp ) ;
55596: LD_ADDR_VAR 0 3
55600: PUSH
55601: LD_VAR 0 1
55605: PPUSH
55606: LD_VAR 0 5
55610: PPUSH
55611: CALL_OW 77
55615: ST_TO_ADDR
// end ;
55616: LD_VAR 0 3
55620: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
55621: LD_INT 0
55623: PPUSH
55624: PPUSH
55625: PPUSH
// x := GetX ( building ) ;
55626: LD_ADDR_VAR 0 4
55630: PUSH
55631: LD_VAR 0 2
55635: PPUSH
55636: CALL_OW 250
55640: ST_TO_ADDR
// y := GetY ( building ) ;
55641: LD_ADDR_VAR 0 5
55645: PUSH
55646: LD_VAR 0 2
55650: PPUSH
55651: CALL_OW 251
55655: ST_TO_ADDR
// if GetTaskList ( unit ) then
55656: LD_VAR 0 1
55660: PPUSH
55661: CALL_OW 437
55665: IFFALSE 55760
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
55667: LD_STRING e
55669: PUSH
55670: LD_VAR 0 1
55674: PPUSH
55675: CALL_OW 437
55679: PUSH
55680: LD_INT 1
55682: ARRAY
55683: PUSH
55684: LD_INT 1
55686: ARRAY
55687: EQUAL
55688: PUSH
55689: LD_VAR 0 4
55693: PUSH
55694: LD_VAR 0 1
55698: PPUSH
55699: CALL_OW 437
55703: PUSH
55704: LD_INT 1
55706: ARRAY
55707: PUSH
55708: LD_INT 2
55710: ARRAY
55711: EQUAL
55712: AND
55713: PUSH
55714: LD_VAR 0 5
55718: PUSH
55719: LD_VAR 0 1
55723: PPUSH
55724: CALL_OW 437
55728: PUSH
55729: LD_INT 1
55731: ARRAY
55732: PUSH
55733: LD_INT 3
55735: ARRAY
55736: EQUAL
55737: AND
55738: IFFALSE 55750
// result := true else
55740: LD_ADDR_VAR 0 3
55744: PUSH
55745: LD_INT 1
55747: ST_TO_ADDR
55748: GO 55758
// result := false ;
55750: LD_ADDR_VAR 0 3
55754: PUSH
55755: LD_INT 0
55757: ST_TO_ADDR
// end else
55758: GO 55768
// result := false ;
55760: LD_ADDR_VAR 0 3
55764: PUSH
55765: LD_INT 0
55767: ST_TO_ADDR
// end ;
55768: LD_VAR 0 3
55772: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
55773: LD_INT 0
55775: PPUSH
55776: PPUSH
55777: PPUSH
55778: PPUSH
// if not unit or not area then
55779: LD_VAR 0 1
55783: NOT
55784: PUSH
55785: LD_VAR 0 2
55789: NOT
55790: OR
55791: IFFALSE 55795
// exit ;
55793: GO 55959
// tmp := AreaToList ( area , i ) ;
55795: LD_ADDR_VAR 0 6
55799: PUSH
55800: LD_VAR 0 2
55804: PPUSH
55805: LD_VAR 0 5
55809: PPUSH
55810: CALL_OW 517
55814: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
55815: LD_ADDR_VAR 0 5
55819: PUSH
55820: DOUBLE
55821: LD_INT 1
55823: DEC
55824: ST_TO_ADDR
55825: LD_VAR 0 6
55829: PUSH
55830: LD_INT 1
55832: ARRAY
55833: PUSH
55834: FOR_TO
55835: IFFALSE 55957
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
55837: LD_ADDR_VAR 0 7
55841: PUSH
55842: LD_VAR 0 6
55846: PUSH
55847: LD_INT 1
55849: ARRAY
55850: PUSH
55851: LD_VAR 0 5
55855: ARRAY
55856: PUSH
55857: LD_VAR 0 6
55861: PUSH
55862: LD_INT 2
55864: ARRAY
55865: PUSH
55866: LD_VAR 0 5
55870: ARRAY
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
55876: LD_VAR 0 7
55880: PUSH
55881: LD_INT 1
55883: ARRAY
55884: PPUSH
55885: LD_VAR 0 7
55889: PUSH
55890: LD_INT 2
55892: ARRAY
55893: PPUSH
55894: CALL_OW 428
55898: PUSH
55899: LD_INT 0
55901: EQUAL
55902: IFFALSE 55955
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
55904: LD_VAR 0 1
55908: PPUSH
55909: LD_VAR 0 7
55913: PUSH
55914: LD_INT 1
55916: ARRAY
55917: PPUSH
55918: LD_VAR 0 7
55922: PUSH
55923: LD_INT 2
55925: ARRAY
55926: PPUSH
55927: LD_VAR 0 3
55931: PPUSH
55932: CALL_OW 48
// result := IsPlaced ( unit ) ;
55936: LD_ADDR_VAR 0 4
55940: PUSH
55941: LD_VAR 0 1
55945: PPUSH
55946: CALL_OW 305
55950: ST_TO_ADDR
// exit ;
55951: POP
55952: POP
55953: GO 55959
// end ; end ;
55955: GO 55834
55957: POP
55958: POP
// end ;
55959: LD_VAR 0 4
55963: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
55964: LD_INT 0
55966: PPUSH
55967: PPUSH
55968: PPUSH
// if not side or side > 8 then
55969: LD_VAR 0 1
55973: NOT
55974: PUSH
55975: LD_VAR 0 1
55979: PUSH
55980: LD_INT 8
55982: GREATER
55983: OR
55984: IFFALSE 55988
// exit ;
55986: GO 56175
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
55988: LD_ADDR_VAR 0 4
55992: PUSH
55993: LD_INT 22
55995: PUSH
55996: LD_VAR 0 1
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 21
56007: PUSH
56008: LD_INT 3
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PPUSH
56019: CALL_OW 69
56023: ST_TO_ADDR
// if not tmp then
56024: LD_VAR 0 4
56028: NOT
56029: IFFALSE 56033
// exit ;
56031: GO 56175
// enable_addtolog := true ;
56033: LD_ADDR_OWVAR 81
56037: PUSH
56038: LD_INT 1
56040: ST_TO_ADDR
// AddToLog ( [ ) ;
56041: LD_STRING [
56043: PPUSH
56044: CALL_OW 561
// for i in tmp do
56048: LD_ADDR_VAR 0 3
56052: PUSH
56053: LD_VAR 0 4
56057: PUSH
56058: FOR_IN
56059: IFFALSE 56166
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
56061: LD_STRING [
56063: PUSH
56064: LD_VAR 0 3
56068: PPUSH
56069: CALL_OW 266
56073: STR
56074: PUSH
56075: LD_STRING , 
56077: STR
56078: PUSH
56079: LD_VAR 0 3
56083: PPUSH
56084: CALL_OW 250
56088: STR
56089: PUSH
56090: LD_STRING , 
56092: STR
56093: PUSH
56094: LD_VAR 0 3
56098: PPUSH
56099: CALL_OW 251
56103: STR
56104: PUSH
56105: LD_STRING , 
56107: STR
56108: PUSH
56109: LD_VAR 0 3
56113: PPUSH
56114: CALL_OW 254
56118: STR
56119: PUSH
56120: LD_STRING , 
56122: STR
56123: PUSH
56124: LD_VAR 0 3
56128: PPUSH
56129: LD_INT 1
56131: PPUSH
56132: CALL_OW 268
56136: STR
56137: PUSH
56138: LD_STRING , 
56140: STR
56141: PUSH
56142: LD_VAR 0 3
56146: PPUSH
56147: LD_INT 2
56149: PPUSH
56150: CALL_OW 268
56154: STR
56155: PUSH
56156: LD_STRING ],
56158: STR
56159: PPUSH
56160: CALL_OW 561
// end ;
56164: GO 56058
56166: POP
56167: POP
// AddToLog ( ]; ) ;
56168: LD_STRING ];
56170: PPUSH
56171: CALL_OW 561
// end ;
56175: LD_VAR 0 2
56179: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
56180: LD_INT 0
56182: PPUSH
56183: PPUSH
56184: PPUSH
56185: PPUSH
56186: PPUSH
// if not area or not rate or not max then
56187: LD_VAR 0 1
56191: NOT
56192: PUSH
56193: LD_VAR 0 2
56197: NOT
56198: OR
56199: PUSH
56200: LD_VAR 0 4
56204: NOT
56205: OR
56206: IFFALSE 56210
// exit ;
56208: GO 56402
// while 1 do
56210: LD_INT 1
56212: IFFALSE 56402
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
56214: LD_ADDR_VAR 0 9
56218: PUSH
56219: LD_VAR 0 1
56223: PPUSH
56224: LD_INT 1
56226: PPUSH
56227: CALL_OW 287
56231: PUSH
56232: LD_INT 10
56234: MUL
56235: ST_TO_ADDR
// r := rate / 10 ;
56236: LD_ADDR_VAR 0 7
56240: PUSH
56241: LD_VAR 0 2
56245: PUSH
56246: LD_INT 10
56248: DIVREAL
56249: ST_TO_ADDR
// time := 1 1$00 ;
56250: LD_ADDR_VAR 0 8
56254: PUSH
56255: LD_INT 2100
56257: ST_TO_ADDR
// if amount < min then
56258: LD_VAR 0 9
56262: PUSH
56263: LD_VAR 0 3
56267: LESS
56268: IFFALSE 56286
// r := r * 2 else
56270: LD_ADDR_VAR 0 7
56274: PUSH
56275: LD_VAR 0 7
56279: PUSH
56280: LD_INT 2
56282: MUL
56283: ST_TO_ADDR
56284: GO 56312
// if amount > max then
56286: LD_VAR 0 9
56290: PUSH
56291: LD_VAR 0 4
56295: GREATER
56296: IFFALSE 56312
// r := r / 2 ;
56298: LD_ADDR_VAR 0 7
56302: PUSH
56303: LD_VAR 0 7
56307: PUSH
56308: LD_INT 2
56310: DIVREAL
56311: ST_TO_ADDR
// time := time / r ;
56312: LD_ADDR_VAR 0 8
56316: PUSH
56317: LD_VAR 0 8
56321: PUSH
56322: LD_VAR 0 7
56326: DIVREAL
56327: ST_TO_ADDR
// if time < 0 then
56328: LD_VAR 0 8
56332: PUSH
56333: LD_INT 0
56335: LESS
56336: IFFALSE 56353
// time := time * - 1 ;
56338: LD_ADDR_VAR 0 8
56342: PUSH
56343: LD_VAR 0 8
56347: PUSH
56348: LD_INT 1
56350: NEG
56351: MUL
56352: ST_TO_ADDR
// wait ( time ) ;
56353: LD_VAR 0 8
56357: PPUSH
56358: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
56362: LD_INT 35
56364: PPUSH
56365: LD_INT 875
56367: PPUSH
56368: CALL_OW 12
56372: PPUSH
56373: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
56377: LD_INT 1
56379: PPUSH
56380: LD_INT 5
56382: PPUSH
56383: CALL_OW 12
56387: PPUSH
56388: LD_VAR 0 1
56392: PPUSH
56393: LD_INT 1
56395: PPUSH
56396: CALL_OW 55
// end ;
56400: GO 56210
// end ;
56402: LD_VAR 0 5
56406: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
56407: LD_INT 0
56409: PPUSH
56410: PPUSH
56411: PPUSH
56412: PPUSH
56413: PPUSH
56414: PPUSH
56415: PPUSH
56416: PPUSH
// if not turrets or not factories then
56417: LD_VAR 0 1
56421: NOT
56422: PUSH
56423: LD_VAR 0 2
56427: NOT
56428: OR
56429: IFFALSE 56433
// exit ;
56431: GO 56740
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
56433: LD_ADDR_VAR 0 10
56437: PUSH
56438: LD_INT 5
56440: PUSH
56441: LD_INT 6
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 2
56450: PUSH
56451: LD_INT 4
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 3
56460: PUSH
56461: LD_INT 5
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 24
56475: PUSH
56476: LD_INT 25
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: LD_INT 23
56485: PUSH
56486: LD_INT 27
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 42
56499: PUSH
56500: LD_INT 43
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 44
56509: PUSH
56510: LD_INT 46
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 45
56519: PUSH
56520: LD_INT 47
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: LIST
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: LIST
56536: ST_TO_ADDR
// result := [ ] ;
56537: LD_ADDR_VAR 0 3
56541: PUSH
56542: EMPTY
56543: ST_TO_ADDR
// for i in turrets do
56544: LD_ADDR_VAR 0 4
56548: PUSH
56549: LD_VAR 0 1
56553: PUSH
56554: FOR_IN
56555: IFFALSE 56738
// begin nat := GetNation ( i ) ;
56557: LD_ADDR_VAR 0 7
56561: PUSH
56562: LD_VAR 0 4
56566: PPUSH
56567: CALL_OW 248
56571: ST_TO_ADDR
// weapon := 0 ;
56572: LD_ADDR_VAR 0 8
56576: PUSH
56577: LD_INT 0
56579: ST_TO_ADDR
// if not nat then
56580: LD_VAR 0 7
56584: NOT
56585: IFFALSE 56589
// continue ;
56587: GO 56554
// for j in list [ nat ] do
56589: LD_ADDR_VAR 0 5
56593: PUSH
56594: LD_VAR 0 10
56598: PUSH
56599: LD_VAR 0 7
56603: ARRAY
56604: PUSH
56605: FOR_IN
56606: IFFALSE 56647
// if GetBWeapon ( i ) = j [ 1 ] then
56608: LD_VAR 0 4
56612: PPUSH
56613: CALL_OW 269
56617: PUSH
56618: LD_VAR 0 5
56622: PUSH
56623: LD_INT 1
56625: ARRAY
56626: EQUAL
56627: IFFALSE 56645
// begin weapon := j [ 2 ] ;
56629: LD_ADDR_VAR 0 8
56633: PUSH
56634: LD_VAR 0 5
56638: PUSH
56639: LD_INT 2
56641: ARRAY
56642: ST_TO_ADDR
// break ;
56643: GO 56647
// end ;
56645: GO 56605
56647: POP
56648: POP
// if not weapon then
56649: LD_VAR 0 8
56653: NOT
56654: IFFALSE 56658
// continue ;
56656: GO 56554
// for k in factories do
56658: LD_ADDR_VAR 0 6
56662: PUSH
56663: LD_VAR 0 2
56667: PUSH
56668: FOR_IN
56669: IFFALSE 56734
// begin weapons := AvailableWeaponList ( k ) ;
56671: LD_ADDR_VAR 0 9
56675: PUSH
56676: LD_VAR 0 6
56680: PPUSH
56681: CALL_OW 478
56685: ST_TO_ADDR
// if not weapons then
56686: LD_VAR 0 9
56690: NOT
56691: IFFALSE 56695
// continue ;
56693: GO 56668
// if weapon in weapons then
56695: LD_VAR 0 8
56699: PUSH
56700: LD_VAR 0 9
56704: IN
56705: IFFALSE 56732
// begin result := [ i , weapon ] ;
56707: LD_ADDR_VAR 0 3
56711: PUSH
56712: LD_VAR 0 4
56716: PUSH
56717: LD_VAR 0 8
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: ST_TO_ADDR
// exit ;
56726: POP
56727: POP
56728: POP
56729: POP
56730: GO 56740
// end ; end ;
56732: GO 56668
56734: POP
56735: POP
// end ;
56736: GO 56554
56738: POP
56739: POP
// end ;
56740: LD_VAR 0 3
56744: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
56745: LD_INT 0
56747: PPUSH
// if not side or side > 8 then
56748: LD_VAR 0 3
56752: NOT
56753: PUSH
56754: LD_VAR 0 3
56758: PUSH
56759: LD_INT 8
56761: GREATER
56762: OR
56763: IFFALSE 56767
// exit ;
56765: GO 56826
// if not range then
56767: LD_VAR 0 4
56771: NOT
56772: IFFALSE 56783
// range := - 12 ;
56774: LD_ADDR_VAR 0 4
56778: PUSH
56779: LD_INT 12
56781: NEG
56782: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
56783: LD_VAR 0 1
56787: PPUSH
56788: LD_VAR 0 2
56792: PPUSH
56793: LD_VAR 0 3
56797: PPUSH
56798: LD_VAR 0 4
56802: PPUSH
56803: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
56807: LD_VAR 0 1
56811: PPUSH
56812: LD_VAR 0 2
56816: PPUSH
56817: LD_VAR 0 3
56821: PPUSH
56822: CALL_OW 331
// end ;
56826: LD_VAR 0 5
56830: RET
// export function Video ( mode ) ; begin
56831: LD_INT 0
56833: PPUSH
// ingame_video = mode ;
56834: LD_ADDR_OWVAR 52
56838: PUSH
56839: LD_VAR 0 1
56843: ST_TO_ADDR
// interface_hidden = mode ;
56844: LD_ADDR_OWVAR 54
56848: PUSH
56849: LD_VAR 0 1
56853: ST_TO_ADDR
// end ;
56854: LD_VAR 0 2
56858: RET
// export function Join ( array , element ) ; begin
56859: LD_INT 0
56861: PPUSH
// result := Replace ( array , array + 1 , element ) ;
56862: LD_ADDR_VAR 0 3
56866: PUSH
56867: LD_VAR 0 1
56871: PPUSH
56872: LD_VAR 0 1
56876: PUSH
56877: LD_INT 1
56879: PLUS
56880: PPUSH
56881: LD_VAR 0 2
56885: PPUSH
56886: CALL_OW 1
56890: ST_TO_ADDR
// end ;
56891: LD_VAR 0 3
56895: RET
// export function JoinUnion ( array , element ) ; begin
56896: LD_INT 0
56898: PPUSH
// result := array union element ;
56899: LD_ADDR_VAR 0 3
56903: PUSH
56904: LD_VAR 0 1
56908: PUSH
56909: LD_VAR 0 2
56913: UNION
56914: ST_TO_ADDR
// end ;
56915: LD_VAR 0 3
56919: RET
// export function GetBehemoths ( side ) ; begin
56920: LD_INT 0
56922: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
56923: LD_ADDR_VAR 0 2
56927: PUSH
56928: LD_INT 22
56930: PUSH
56931: LD_VAR 0 1
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: LD_INT 31
56942: PUSH
56943: LD_INT 25
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PPUSH
56954: CALL_OW 69
56958: ST_TO_ADDR
// end ;
56959: LD_VAR 0 2
56963: RET
// export function Shuffle ( array ) ; var i , index ; begin
56964: LD_INT 0
56966: PPUSH
56967: PPUSH
56968: PPUSH
// result := [ ] ;
56969: LD_ADDR_VAR 0 2
56973: PUSH
56974: EMPTY
56975: ST_TO_ADDR
// if not array then
56976: LD_VAR 0 1
56980: NOT
56981: IFFALSE 56985
// exit ;
56983: GO 57084
// Randomize ;
56985: CALL_OW 10
// for i = array downto 1 do
56989: LD_ADDR_VAR 0 3
56993: PUSH
56994: DOUBLE
56995: LD_VAR 0 1
56999: INC
57000: ST_TO_ADDR
57001: LD_INT 1
57003: PUSH
57004: FOR_DOWNTO
57005: IFFALSE 57082
// begin index := rand ( 1 , array ) ;
57007: LD_ADDR_VAR 0 4
57011: PUSH
57012: LD_INT 1
57014: PPUSH
57015: LD_VAR 0 1
57019: PPUSH
57020: CALL_OW 12
57024: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
57025: LD_ADDR_VAR 0 2
57029: PUSH
57030: LD_VAR 0 2
57034: PPUSH
57035: LD_VAR 0 2
57039: PUSH
57040: LD_INT 1
57042: PLUS
57043: PPUSH
57044: LD_VAR 0 1
57048: PUSH
57049: LD_VAR 0 4
57053: ARRAY
57054: PPUSH
57055: CALL_OW 2
57059: ST_TO_ADDR
// array := Delete ( array , index ) ;
57060: LD_ADDR_VAR 0 1
57064: PUSH
57065: LD_VAR 0 1
57069: PPUSH
57070: LD_VAR 0 4
57074: PPUSH
57075: CALL_OW 3
57079: ST_TO_ADDR
// end ;
57080: GO 57004
57082: POP
57083: POP
// end ;
57084: LD_VAR 0 2
57088: RET
// export function GetBaseMaterials ( base ) ; begin
57089: LD_INT 0
57091: PPUSH
// result := [ 0 , 0 , 0 ] ;
57092: LD_ADDR_VAR 0 2
57096: PUSH
57097: LD_INT 0
57099: PUSH
57100: LD_INT 0
57102: PUSH
57103: LD_INT 0
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: LIST
57110: ST_TO_ADDR
// if not base then
57111: LD_VAR 0 1
57115: NOT
57116: IFFALSE 57120
// exit ;
57118: GO 57169
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
57120: LD_ADDR_VAR 0 2
57124: PUSH
57125: LD_VAR 0 1
57129: PPUSH
57130: LD_INT 1
57132: PPUSH
57133: CALL_OW 275
57137: PUSH
57138: LD_VAR 0 1
57142: PPUSH
57143: LD_INT 2
57145: PPUSH
57146: CALL_OW 275
57150: PUSH
57151: LD_VAR 0 1
57155: PPUSH
57156: LD_INT 3
57158: PPUSH
57159: CALL_OW 275
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: LIST
57168: ST_TO_ADDR
// end ;
57169: LD_VAR 0 2
57173: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
57174: LD_INT 0
57176: PPUSH
57177: PPUSH
// result := array ;
57178: LD_ADDR_VAR 0 3
57182: PUSH
57183: LD_VAR 0 1
57187: ST_TO_ADDR
// if size > 0 then
57188: LD_VAR 0 2
57192: PUSH
57193: LD_INT 0
57195: GREATER
57196: IFFALSE 57242
// for i := array downto size do
57198: LD_ADDR_VAR 0 4
57202: PUSH
57203: DOUBLE
57204: LD_VAR 0 1
57208: INC
57209: ST_TO_ADDR
57210: LD_VAR 0 2
57214: PUSH
57215: FOR_DOWNTO
57216: IFFALSE 57240
// result := Delete ( result , result ) ;
57218: LD_ADDR_VAR 0 3
57222: PUSH
57223: LD_VAR 0 3
57227: PPUSH
57228: LD_VAR 0 3
57232: PPUSH
57233: CALL_OW 3
57237: ST_TO_ADDR
57238: GO 57215
57240: POP
57241: POP
// end ;
57242: LD_VAR 0 3
57246: RET
// export function ComExit ( unit ) ; var tmp ; begin
57247: LD_INT 0
57249: PPUSH
57250: PPUSH
// if not IsInUnit ( unit ) then
57251: LD_VAR 0 1
57255: PPUSH
57256: CALL_OW 310
57260: NOT
57261: IFFALSE 57265
// exit ;
57263: GO 57325
// tmp := IsInUnit ( unit ) ;
57265: LD_ADDR_VAR 0 3
57269: PUSH
57270: LD_VAR 0 1
57274: PPUSH
57275: CALL_OW 310
57279: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
57280: LD_VAR 0 3
57284: PPUSH
57285: CALL_OW 247
57289: PUSH
57290: LD_INT 2
57292: EQUAL
57293: IFFALSE 57306
// ComExitVehicle ( unit ) else
57295: LD_VAR 0 1
57299: PPUSH
57300: CALL_OW 121
57304: GO 57315
// ComExitBuilding ( unit ) ;
57306: LD_VAR 0 1
57310: PPUSH
57311: CALL_OW 122
// result := tmp ;
57315: LD_ADDR_VAR 0 2
57319: PUSH
57320: LD_VAR 0 3
57324: ST_TO_ADDR
// end ;
57325: LD_VAR 0 2
57329: RET
// export function ResetHc ; begin
57330: LD_INT 0
57332: PPUSH
// InitHc ;
57333: CALL_OW 19
// hc_importance := 0 ;
57337: LD_ADDR_OWVAR 32
57341: PUSH
57342: LD_INT 0
57344: ST_TO_ADDR
// end ;
57345: LD_VAR 0 1
57349: RET
