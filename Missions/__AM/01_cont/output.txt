// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 32 0 0
// InitAmerican ;
  15: CALL 866 0 0
// InitRussian ;
  19: CALL 1137 0 0
// DebugMode ;
  23: CALL 160 0 0
// Action ;
  27: CALL 2932 0 0
// end ;
  31: END
// export debug ; export mission_prefix ; export active_russian_dialog , bobby_in_squad , powell_contact , macmilan_use_radio , cyrus_in_squad , active_road_patrol , macmilan_in_trap , meta_action , end_mission , bobby_saved , cyrus_saved , send_troops_to_forest , active_powell_dialog ; function Init ; begin
  32: LD_INT 0
  34: PPUSH
// mission_prefix := 01_ ;
  35: LD_ADDR_EXP 2
  39: PUSH
  40: LD_STRING 01_
  42: ST_TO_ADDR
// debug := false ;
  43: LD_ADDR_EXP 1
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// active_russian_dialog := false ;
  51: LD_ADDR_EXP 3
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// bobby_in_squad := false ;
  59: LD_ADDR_EXP 4
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// cyrus_in_squad := false ;
  67: LD_ADDR_EXP 7
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// powell_contact := false ;
  75: LD_ADDR_EXP 5
  79: PUSH
  80: LD_INT 0
  82: ST_TO_ADDR
// macmilan_use_radio := false ;
  83: LD_ADDR_EXP 6
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// active_road_patrol := false ;
  91: LD_ADDR_EXP 8
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// macmilan_in_trap := false ;
  99: LD_ADDR_EXP 9
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// meta_action := false ;
 107: LD_ADDR_EXP 10
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// end_mission := false ;
 115: LD_ADDR_EXP 11
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// bobby_saved := false ;
 123: LD_ADDR_EXP 12
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// cyrus_saved := false ;
 131: LD_ADDR_EXP 13
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// send_troops_to_forest := false ;
 139: LD_ADDR_EXP 14
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// active_powell_dialog := false ;
 147: LD_ADDR_EXP 15
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// end ;
 155: LD_VAR 0 1
 159: RET
// function DebugMode ; var i ; begin
 160: LD_INT 0
 162: PPUSH
 163: PPUSH
// if not debug then
 164: LD_EXP 1
 168: NOT
 169: IFFALSE 173
// exit ;
 171: GO 192
// Difficulty := 4 ;
 173: LD_ADDR_OWVAR 67
 177: PUSH
 178: LD_INT 4
 180: ST_TO_ADDR
// TurnFogOff ( ) ;
 181: CALL_OW 537
// FogOff ( 1 ) ;
 185: LD_INT 1
 187: PPUSH
 188: CALL_OW 344
// end ; end_of_file
 192: LD_VAR 0 1
 196: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 197: LD_INT 0
 199: PPUSH
 200: PPUSH
 201: PPUSH
// uc_side := GetSide ( b ) ;
 202: LD_ADDR_OWVAR 20
 206: PUSH
 207: LD_VAR 0 2
 211: PPUSH
 212: CALL_OW 255
 216: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 217: LD_ADDR_OWVAR 21
 221: PUSH
 222: LD_VAR 0 2
 226: PPUSH
 227: CALL_OW 248
 231: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 232: LD_INT 0
 234: PPUSH
 235: LD_INT 1
 237: PPUSH
 238: LD_VAR 0 1
 242: PPUSH
 243: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
 247: LD_ADDR_VAR 0 5
 251: PUSH
 252: LD_VAR 0 2
 256: PPUSH
 257: CALL_OW 254
 261: PUSH
 262: LD_INT 3
 264: MINUS
 265: ST_TO_ADDR
// if dir < 0 then
 266: LD_VAR 0 5
 270: PUSH
 271: LD_INT 0
 273: LESS
 274: IFFALSE 290
// dir := 6 + dir ;
 276: LD_ADDR_VAR 0 5
 280: PUSH
 281: LD_INT 6
 283: PUSH
 284: LD_VAR 0 5
 288: PLUS
 289: ST_TO_ADDR
// un := CreateHuman ;
 290: LD_ADDR_VAR 0 4
 294: PUSH
 295: CALL_OW 44
 299: ST_TO_ADDR
// SetDir ( un , dir ) ;
 300: LD_VAR 0 4
 304: PPUSH
 305: LD_VAR 0 5
 309: PPUSH
 310: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 314: LD_VAR 0 4
 318: PPUSH
 319: LD_VAR 0 2
 323: PPUSH
 324: CALL_OW 52
// end ;
 328: LD_VAR 0 3
 332: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 333: LD_INT 0
 335: PPUSH
// uc_side := side ;
 336: LD_ADDR_OWVAR 20
 340: PUSH
 341: LD_VAR 0 1
 345: ST_TO_ADDR
// uc_nation := nation ;
 346: LD_ADDR_OWVAR 21
 350: PUSH
 351: LD_VAR 0 2
 355: ST_TO_ADDR
// vc_chassis := chassis ;
 356: LD_ADDR_OWVAR 37
 360: PUSH
 361: LD_VAR 0 3
 365: ST_TO_ADDR
// vc_engine := engine ;
 366: LD_ADDR_OWVAR 39
 370: PUSH
 371: LD_VAR 0 4
 375: ST_TO_ADDR
// vc_control := control ;
 376: LD_ADDR_OWVAR 38
 380: PUSH
 381: LD_VAR 0 5
 385: ST_TO_ADDR
// vc_weapon := weapon ;
 386: LD_ADDR_OWVAR 40
 390: PUSH
 391: LD_VAR 0 6
 395: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 396: LD_ADDR_OWVAR 41
 400: PUSH
 401: LD_VAR 0 7
 405: ST_TO_ADDR
// result := CreateVehicle ;
 406: LD_ADDR_VAR 0 8
 410: PUSH
 411: CALL_OW 45
 415: ST_TO_ADDR
// end ;
 416: LD_VAR 0 8
 420: RET
// export function ComPatrol ( unit , mode , pause , coords ) ; var i ; begin
 421: LD_INT 0
 423: PPUSH
 424: PPUSH
// while ( active_road_patrol ) do
 425: LD_EXP 8
 429: IFFALSE 783
// begin Wait ( 0 0$01 ) ;
 431: LD_INT 35
 433: PPUSH
 434: CALL_OW 67
// if not unit then
 438: LD_VAR 0 1
 442: NOT
 443: IFFALSE 447
// exit ;
 445: GO 783
// if mode = road then
 447: LD_VAR 0 2
 451: PUSH
 452: LD_STRING road
 454: EQUAL
 455: IFFALSE 511
// if GetFuel ( unit ) < 50 and not See ( 1 , unit ) and not HasTask ( unit ) then
 457: LD_VAR 0 1
 461: PPUSH
 462: CALL_OW 261
 466: PUSH
 467: LD_INT 50
 469: LESS
 470: PUSH
 471: LD_INT 1
 473: PPUSH
 474: LD_VAR 0 1
 478: PPUSH
 479: CALL_OW 292
 483: NOT
 484: AND
 485: PUSH
 486: LD_VAR 0 1
 490: PPUSH
 491: CALL_OW 314
 495: NOT
 496: AND
 497: IFFALSE 511
// SetFuel ( unit , 100 ) ;
 499: LD_VAR 0 1
 503: PPUSH
 504: LD_INT 100
 506: PPUSH
 507: CALL_OW 240
// if mode = forest then
 511: LD_VAR 0 2
 515: PUSH
 516: LD_STRING forest
 518: EQUAL
 519: IFFALSE 599
// if GetLives ( unit ) < 600 then
 521: LD_VAR 0 1
 525: PPUSH
 526: CALL_OW 256
 530: PUSH
 531: LD_INT 600
 533: LESS
 534: IFFALSE 599
// begin ComMoveXY ( unit , 42 , 3 ) ;
 536: LD_VAR 0 1
 540: PPUSH
 541: LD_INT 42
 543: PPUSH
 544: LD_INT 3
 546: PPUSH
 547: CALL_OW 111
// SetRememberedX ( unit , GetX ( unit ) ) ;
 551: LD_VAR 0 1
 555: PPUSH
 556: LD_VAR 0 1
 560: PPUSH
 561: CALL_OW 250
 565: PPUSH
 566: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
 570: LD_VAR 0 1
 574: PPUSH
 575: LD_VAR 0 1
 579: PPUSH
 580: CALL_OW 251
 584: PPUSH
 585: CALL_OW 232
// send_troops_to_forest := true ;
 589: LD_ADDR_EXP 14
 593: PUSH
 594: LD_INT 1
 596: ST_TO_ADDR
// break ;
 597: GO 783
// end ; if not HasTask ( unit ) then
 599: LD_VAR 0 1
 603: PPUSH
 604: CALL_OW 314
 608: NOT
 609: IFFALSE 781
// begin for i = 1 to coords do
 611: LD_ADDR_VAR 0 6
 615: PUSH
 616: DOUBLE
 617: LD_INT 1
 619: DEC
 620: ST_TO_ADDR
 621: LD_VAR 0 4
 625: PUSH
 626: FOR_TO
 627: IFFALSE 694
// begin AddComAgressiveMove ( unit , coords [ i ] , coords [ i + 1 ] ) ;
 629: LD_VAR 0 1
 633: PPUSH
 634: LD_VAR 0 4
 638: PUSH
 639: LD_VAR 0 6
 643: ARRAY
 644: PPUSH
 645: LD_VAR 0 4
 649: PUSH
 650: LD_VAR 0 6
 654: PUSH
 655: LD_INT 1
 657: PLUS
 658: ARRAY
 659: PPUSH
 660: CALL_OW 174
// AddComWait ( unit , pause ) ;
 664: LD_VAR 0 1
 668: PPUSH
 669: LD_VAR 0 3
 673: PPUSH
 674: CALL_OW 202
// i := i + 1 ;
 678: LD_ADDR_VAR 0 6
 682: PUSH
 683: LD_VAR 0 6
 687: PUSH
 688: LD_INT 1
 690: PLUS
 691: ST_TO_ADDR
// end ;
 692: GO 626
 694: POP
 695: POP
// for i = coords downto 1 do
 696: LD_ADDR_VAR 0 6
 700: PUSH
 701: DOUBLE
 702: LD_VAR 0 4
 706: INC
 707: ST_TO_ADDR
 708: LD_INT 1
 710: PUSH
 711: FOR_DOWNTO
 712: IFFALSE 779
// begin AddComAgressiveMove ( unit , coords [ i - 1 ] , coords [ i ] ) ;
 714: LD_VAR 0 1
 718: PPUSH
 719: LD_VAR 0 4
 723: PUSH
 724: LD_VAR 0 6
 728: PUSH
 729: LD_INT 1
 731: MINUS
 732: ARRAY
 733: PPUSH
 734: LD_VAR 0 4
 738: PUSH
 739: LD_VAR 0 6
 743: ARRAY
 744: PPUSH
 745: CALL_OW 174
// AddComWait ( unit , pause ) ;
 749: LD_VAR 0 1
 753: PPUSH
 754: LD_VAR 0 3
 758: PPUSH
 759: CALL_OW 202
// i := i - 1 ;
 763: LD_ADDR_VAR 0 6
 767: PUSH
 768: LD_VAR 0 6
 772: PUSH
 773: LD_INT 1
 775: MINUS
 776: ST_TO_ADDR
// end ;
 777: GO 711
 779: POP
 780: POP
// end ; end ;
 781: GO 425
// end ;
 783: LD_VAR 0 5
 787: RET
// export function DebugSay ( dialog ) ; var speaker ; begin
 788: LD_INT 0
 790: PPUSH
 791: PPUSH
// uc_nation := 1 ;
 792: LD_ADDR_OWVAR 21
 796: PUSH
 797: LD_INT 1
 799: ST_TO_ADDR
// uc_side := 0 ;
 800: LD_ADDR_OWVAR 20
 804: PUSH
 805: LD_INT 0
 807: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
 808: LD_INT 0
 810: PPUSH
 811: LD_INT 1
 813: PPUSH
 814: LD_INT 0
 816: PPUSH
 817: CALL_OW 380
// hc_name := speaker ;
 821: LD_ADDR_OWVAR 26
 825: PUSH
 826: LD_STRING speaker
 828: ST_TO_ADDR
// hc_gallery :=  ;
 829: LD_ADDR_OWVAR 33
 833: PUSH
 834: LD_STRING 
 836: ST_TO_ADDR
// speaker := CreateHuman ;
 837: LD_ADDR_VAR 0 3
 841: PUSH
 842: CALL_OW 44
 846: ST_TO_ADDR
// Say ( speaker , dialog ) ;
 847: LD_VAR 0 3
 851: PPUSH
 852: LD_VAR 0 1
 856: PPUSH
 857: CALL_OW 88
// end ; end_of_file
 861: LD_VAR 0 2
 865: RET
// export JMM , Bobby , Cyrus , Powell , fakePokryshkin ; export function InitAmerican ; begin
 866: LD_INT 0
 868: PPUSH
// uc_nation := 1 ;
 869: LD_ADDR_OWVAR 21
 873: PUSH
 874: LD_INT 1
 876: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , false ,  ) ;
 877: LD_ADDR_EXP 16
 881: PUSH
 882: LD_STRING JMM
 884: PPUSH
 885: LD_INT 0
 887: PPUSH
 888: LD_STRING 
 890: PPUSH
 891: CALL 27761 0 3
 895: ST_TO_ADDR
// uc_side := 4 ;
 896: LD_ADDR_OWVAR 20
 900: PUSH
 901: LD_INT 4
 903: ST_TO_ADDR
// hc_gallery := us ;
 904: LD_ADDR_OWVAR 33
 908: PUSH
 909: LD_STRING us
 911: ST_TO_ADDR
// hc_face_number := 7 ;
 912: LD_ADDR_OWVAR 34
 916: PUSH
 917: LD_INT 7
 919: ST_TO_ADDR
// hc_sex := sex_male ;
 920: LD_ADDR_OWVAR 27
 924: PUSH
 925: LD_INT 1
 927: ST_TO_ADDR
// hc_name := . ;
 928: LD_ADDR_OWVAR 26
 932: PUSH
 933: LD_STRING .
 935: ST_TO_ADDR
// hc_class := 1 ;
 936: LD_ADDR_OWVAR 28
 940: PUSH
 941: LD_INT 1
 943: ST_TO_ADDR
// Powell := CreateHuman ;
 944: LD_ADDR_EXP 19
 948: PUSH
 949: CALL_OW 44
 953: ST_TO_ADDR
// hc_name := . ;
 954: LD_ADDR_OWVAR 26
 958: PUSH
 959: LD_STRING .
 961: ST_TO_ADDR
// hc_gallery := ru ;
 962: LD_ADDR_OWVAR 33
 966: PUSH
 967: LD_STRING ru
 969: ST_TO_ADDR
// hc_face_number := 4 ;
 970: LD_ADDR_OWVAR 34
 974: PUSH
 975: LD_INT 4
 977: ST_TO_ADDR
// hc_sex := sex_male ;
 978: LD_ADDR_OWVAR 27
 982: PUSH
 983: LD_INT 1
 985: ST_TO_ADDR
// fakePokryshkin := CreateHuman ;
 986: LD_ADDR_EXP 20
 990: PUSH
 991: CALL_OW 44
 995: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , false ,  ) ;
 996: LD_ADDR_EXP 17
1000: PUSH
1001: LD_STRING Bobby
1003: PPUSH
1004: LD_INT 0
1006: PPUSH
1007: LD_STRING 
1009: PPUSH
1010: CALL 27761 0 3
1014: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , false ,  ) ;
1015: LD_ADDR_EXP 18
1019: PUSH
1020: LD_STRING Cyrus
1022: PPUSH
1023: LD_INT 0
1025: PPUSH
1026: LD_STRING 
1028: PPUSH
1029: CALL 27761 0 3
1033: ST_TO_ADDR
// case Difficulty of 1 :
1034: LD_OWVAR 67
1038: PUSH
1039: LD_INT 1
1041: DOUBLE
1042: EQUAL
1043: IFTRUE 1047
1045: GO 1062
1047: POP
// SetLives ( Bobby , 500 ) ; 2 :
1048: LD_EXP 17
1052: PPUSH
1053: LD_INT 500
1055: PPUSH
1056: CALL_OW 234
1060: GO 1132
1062: LD_INT 2
1064: DOUBLE
1065: EQUAL
1066: IFTRUE 1070
1068: GO 1085
1070: POP
// SetLives ( Bobby , 460 ) ; 3 :
1071: LD_EXP 17
1075: PPUSH
1076: LD_INT 460
1078: PPUSH
1079: CALL_OW 234
1083: GO 1132
1085: LD_INT 3
1087: DOUBLE
1088: EQUAL
1089: IFTRUE 1093
1091: GO 1108
1093: POP
// SetLives ( Bobby , 420 ) ; 4 :
1094: LD_EXP 17
1098: PPUSH
1099: LD_INT 420
1101: PPUSH
1102: CALL_OW 234
1106: GO 1132
1108: LD_INT 4
1110: DOUBLE
1111: EQUAL
1112: IFTRUE 1116
1114: GO 1131
1116: POP
// SetLives ( Bobby , 400 ) ; end ;
1117: LD_EXP 17
1121: PPUSH
1122: LD_INT 400
1124: PPUSH
1125: CALL_OW 234
1129: GO 1132
1131: POP
// end ; end_of_file
1132: LD_VAR 0 1
1136: RET
// export russian_troops_1 , russian_troops_2 , russian_patrol_tanks , russian_meta_guards , russian_patrol_forest , russian_patrol_hidden ; export Pokryshkin ; export function InitRussian ; var skill , i , un ; begin
1137: LD_INT 0
1139: PPUSH
1140: PPUSH
1141: PPUSH
1142: PPUSH
// skill := [ 1 , 2 , 3 , 4 ] [ Difficulty ] ;
1143: LD_ADDR_VAR 0 2
1147: PUSH
1148: LD_INT 1
1150: PUSH
1151: LD_INT 2
1153: PUSH
1154: LD_INT 3
1156: PUSH
1157: LD_INT 4
1159: PUSH
1160: EMPTY
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: PUSH
1166: LD_OWVAR 67
1170: ARRAY
1171: ST_TO_ADDR
// uc_side := 3 ;
1172: LD_ADDR_OWVAR 20
1176: PUSH
1177: LD_INT 3
1179: ST_TO_ADDR
// uc_nation := 3 ;
1180: LD_ADDR_OWVAR 21
1184: PUSH
1185: LD_INT 3
1187: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
1188: LD_ADDR_EXP 27
1192: PUSH
1193: LD_STRING Pokryshkin
1195: PPUSH
1196: LD_INT 0
1198: PPUSH
1199: LD_STRING 
1201: PPUSH
1202: CALL 27761 0 3
1206: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 44 , 5 , false ) ;
1207: LD_EXP 27
1211: PPUSH
1212: LD_INT 44
1214: PPUSH
1215: LD_INT 5
1217: PPUSH
1218: LD_INT 0
1220: PPUSH
1221: CALL_OW 48
// hc_importance := 0 ;
1225: LD_ADDR_OWVAR 32
1229: PUSH
1230: LD_INT 0
1232: ST_TO_ADDR
// hc_gallery :=  ;
1233: LD_ADDR_OWVAR 33
1237: PUSH
1238: LD_STRING 
1240: ST_TO_ADDR
// hc_name :=  ;
1241: LD_ADDR_OWVAR 26
1245: PUSH
1246: LD_STRING 
1248: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1249: LD_INT 1
1251: PPUSH
1252: LD_INT 1
1254: PPUSH
1255: LD_VAR 0 2
1259: PPUSH
1260: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1264: LD_ADDR_OWVAR 33
1268: PUSH
1269: LD_STRING SecondCharsGal
1271: ST_TO_ADDR
// hc_face_number := 69 ;
1272: LD_ADDR_OWVAR 34
1276: PUSH
1277: LD_INT 69
1279: ST_TO_ADDR
// hc_sex := sex_male ;
1280: LD_ADDR_OWVAR 27
1284: PUSH
1285: LD_INT 1
1287: ST_TO_ADDR
// hc_name := Ilja Ivanov ;
1288: LD_ADDR_OWVAR 26
1292: PUSH
1293: LD_STRING Ilja Ivanov
1295: ST_TO_ADDR
// un := CreateHuman ;
1296: LD_ADDR_VAR 0 4
1300: PUSH
1301: CALL_OW 44
1305: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 1 , un ) ;
1306: LD_ADDR_EXP 21
1310: PUSH
1311: LD_EXP 21
1315: PPUSH
1316: LD_INT 1
1318: PPUSH
1319: LD_VAR 0 4
1323: PPUSH
1324: CALL_OW 2
1328: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1329: LD_VAR 0 4
1333: PPUSH
1334: LD_INT 3
1336: PPUSH
1337: LD_INT 0
1339: PPUSH
1340: CALL_OW 49
// PrepareHuman ( sex_male , 1 , skill ) ;
1344: LD_INT 1
1346: PPUSH
1347: LD_INT 1
1349: PPUSH
1350: LD_VAR 0 2
1354: PPUSH
1355: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1359: LD_ADDR_OWVAR 33
1363: PUSH
1364: LD_STRING SecondCharsGal
1366: ST_TO_ADDR
// hc_face_number := 70 ;
1367: LD_ADDR_OWVAR 34
1371: PUSH
1372: LD_INT 70
1374: ST_TO_ADDR
// hc_name := Pavel Starczy ;
1375: LD_ADDR_OWVAR 26
1379: PUSH
1380: LD_STRING Pavel Starczy
1382: ST_TO_ADDR
// un := CreateHuman ;
1383: LD_ADDR_VAR 0 4
1387: PUSH
1388: CALL_OW 44
1392: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 2 , un ) ;
1393: LD_ADDR_EXP 21
1397: PUSH
1398: LD_EXP 21
1402: PPUSH
1403: LD_INT 2
1405: PPUSH
1406: LD_VAR 0 4
1410: PPUSH
1411: CALL_OW 2
1415: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1416: LD_VAR 0 4
1420: PPUSH
1421: LD_INT 3
1423: PPUSH
1424: LD_INT 0
1426: PPUSH
1427: CALL_OW 49
// InitHc ;
1431: CALL_OW 19
// for i = 1 to 7 do
1435: LD_ADDR_VAR 0 3
1439: PUSH
1440: DOUBLE
1441: LD_INT 1
1443: DEC
1444: ST_TO_ADDR
1445: LD_INT 7
1447: PUSH
1448: FOR_TO
1449: IFFALSE 1600
// begin PrepareHuman ( false , 1 , skill ) ;
1451: LD_INT 0
1453: PPUSH
1454: LD_INT 1
1456: PPUSH
1457: LD_VAR 0 2
1461: PPUSH
1462: CALL_OW 380
// un := CreateHuman ;
1466: LD_ADDR_VAR 0 4
1470: PUSH
1471: CALL_OW 44
1475: ST_TO_ADDR
// if i mod 2 = 0 then
1476: LD_VAR 0 3
1480: PUSH
1481: LD_INT 2
1483: MOD
1484: PUSH
1485: LD_INT 0
1487: EQUAL
1488: IFFALSE 1545
// begin russian_troops_1 := Insert ( russian_troops_1 , russian_troops_1 + 1 , un ) ;
1490: LD_ADDR_EXP 21
1494: PUSH
1495: LD_EXP 21
1499: PPUSH
1500: LD_EXP 21
1504: PUSH
1505: LD_INT 1
1507: PLUS
1508: PPUSH
1509: LD_VAR 0 4
1513: PPUSH
1514: CALL_OW 2
1518: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1519: LD_VAR 0 4
1523: PPUSH
1524: LD_INT 3
1526: PPUSH
1527: LD_INT 0
1529: PPUSH
1530: CALL_OW 49
// ComHold ( un ) ;
1534: LD_VAR 0 4
1538: PPUSH
1539: CALL_OW 140
// end else
1543: GO 1598
// begin russian_troops_2 := Insert ( russian_troops_2 , russian_troops_2 + 1 , un ) ;
1545: LD_ADDR_EXP 22
1549: PUSH
1550: LD_EXP 22
1554: PPUSH
1555: LD_EXP 22
1559: PUSH
1560: LD_INT 1
1562: PLUS
1563: PPUSH
1564: LD_VAR 0 4
1568: PPUSH
1569: CALL_OW 2
1573: ST_TO_ADDR
// PlaceUnitArea ( un , guard_south , false ) ;
1574: LD_VAR 0 4
1578: PPUSH
1579: LD_INT 4
1581: PPUSH
1582: LD_INT 0
1584: PPUSH
1585: CALL_OW 49
// ComHold ( un ) ;
1589: LD_VAR 0 4
1593: PPUSH
1594: CALL_OW 140
// end ; end ;
1598: GO 1448
1600: POP
1601: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) do
1602: LD_ADDR_VAR 0 3
1606: PUSH
1607: LD_INT 22
1609: PUSH
1610: LD_INT 3
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: PUSH
1617: LD_INT 30
1619: PUSH
1620: LD_INT 31
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: PUSH
1627: EMPTY
1628: LIST
1629: LIST
1630: PPUSH
1631: CALL_OW 69
1635: PUSH
1636: FOR_IN
1637: IFFALSE 1655
// PrepareSolBun ( skill , i ) ;
1639: LD_VAR 0 2
1643: PPUSH
1644: LD_VAR 0 3
1648: PPUSH
1649: CALL 197 0 2
1653: GO 1636
1655: POP
1656: POP
// for i = 1 to 3 do
1657: LD_ADDR_VAR 0 3
1661: PUSH
1662: DOUBLE
1663: LD_INT 1
1665: DEC
1666: ST_TO_ADDR
1667: LD_INT 3
1669: PUSH
1670: FOR_TO
1671: IFFALSE 1807
// begin un := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1673: LD_ADDR_VAR 0 4
1677: PUSH
1678: LD_INT 3
1680: PPUSH
1681: LD_INT 3
1683: PPUSH
1684: LD_INT 22
1686: PPUSH
1687: LD_INT 1
1689: PPUSH
1690: LD_INT 1
1692: PPUSH
1693: LD_INT 42
1695: PPUSH
1696: LD_INT 100
1698: PPUSH
1699: CALL 333 0 7
1703: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
1704: LD_INT 0
1706: PPUSH
1707: LD_INT 3
1709: PPUSH
1710: LD_VAR 0 2
1714: PPUSH
1715: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1719: CALL_OW 44
1723: PPUSH
1724: LD_VAR 0 4
1728: PPUSH
1729: CALL_OW 52
// PlaceUnitXY ( un , [ 131 , 23 , 167 ] [ i ] , [ 87 , 14 , 95 ] [ i ] , false ) ;
1733: LD_VAR 0 4
1737: PPUSH
1738: LD_INT 131
1740: PUSH
1741: LD_INT 23
1743: PUSH
1744: LD_INT 167
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: LIST
1751: PUSH
1752: LD_VAR 0 3
1756: ARRAY
1757: PPUSH
1758: LD_INT 87
1760: PUSH
1761: LD_INT 14
1763: PUSH
1764: LD_INT 95
1766: PUSH
1767: EMPTY
1768: LIST
1769: LIST
1770: LIST
1771: PUSH
1772: LD_VAR 0 3
1776: ARRAY
1777: PPUSH
1778: LD_INT 0
1780: PPUSH
1781: CALL_OW 48
// russian_patrol_tanks := Join ( russian_patrol_tanks , un ) ;
1785: LD_ADDR_EXP 23
1789: PUSH
1790: LD_EXP 23
1794: PPUSH
1795: LD_VAR 0 4
1799: PPUSH
1800: CALL 65452 0 2
1804: ST_TO_ADDR
// end ;
1805: GO 1670
1807: POP
1808: POP
// for i = 1 to 2 do
1809: LD_ADDR_VAR 0 3
1813: PUSH
1814: DOUBLE
1815: LD_INT 1
1817: DEC
1818: ST_TO_ADDR
1819: LD_INT 2
1821: PUSH
1822: FOR_TO
1823: IFFALSE 1914
// begin PrepareHuman ( [ sex_female , sex_male , sex_male ] [ i ] , 1 , 1 ) ;
1825: LD_INT 2
1827: PUSH
1828: LD_INT 1
1830: PUSH
1831: LD_INT 1
1833: PUSH
1834: EMPTY
1835: LIST
1836: LIST
1837: LIST
1838: PUSH
1839: LD_VAR 0 3
1843: ARRAY
1844: PPUSH
1845: LD_INT 1
1847: PPUSH
1848: LD_INT 1
1850: PPUSH
1851: CALL_OW 380
// un := CreateHuman ;
1855: LD_ADDR_VAR 0 4
1859: PUSH
1860: CALL_OW 44
1864: ST_TO_ADDR
// russian_meta_guards := Insert ( russian_meta_guards , 1 , un ) ;
1865: LD_ADDR_EXP 24
1869: PUSH
1870: LD_EXP 24
1874: PPUSH
1875: LD_INT 1
1877: PPUSH
1878: LD_VAR 0 4
1882: PPUSH
1883: CALL_OW 2
1887: ST_TO_ADDR
// PlaceUnitArea ( un , exitArea , false ) ;
1888: LD_VAR 0 4
1892: PPUSH
1893: LD_INT 10
1895: PPUSH
1896: LD_INT 0
1898: PPUSH
1899: CALL_OW 49
// ComHold ( un ) ;
1903: LD_VAR 0 4
1907: PPUSH
1908: CALL_OW 140
// end ;
1912: GO 1822
1914: POP
1915: POP
// if Difficulty < 3 then
1916: LD_OWVAR 67
1920: PUSH
1921: LD_INT 3
1923: LESS
1924: IFFALSE 1928
// exit ;
1926: GO 1999
// PrepareHuman ( false , 1 , skill ) ;
1928: LD_INT 0
1930: PPUSH
1931: LD_INT 1
1933: PPUSH
1934: LD_VAR 0 2
1938: PPUSH
1939: CALL_OW 380
// russian_patrol_forest := CreateHuman ;
1943: LD_ADDR_EXP 25
1947: PUSH
1948: CALL_OW 44
1952: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_forest , 82 , 2 , false ) ;
1953: LD_EXP 25
1957: PPUSH
1958: LD_INT 82
1960: PPUSH
1961: LD_INT 2
1963: PPUSH
1964: LD_INT 0
1966: PPUSH
1967: CALL_OW 48
// russian_patrol_hidden := CreateHuman ;
1971: LD_ADDR_EXP 26
1975: PUSH
1976: CALL_OW 44
1980: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_hidden , 136 , 30 , false ) ;
1981: LD_EXP 26
1985: PPUSH
1986: LD_INT 136
1988: PPUSH
1989: LD_INT 30
1991: PPUSH
1992: LD_INT 0
1994: PPUSH
1995: CALL_OW 48
// end ;
1999: LD_VAR 0 1
2003: RET
// every 0 0$01 trigger active_road_patrol do
2004: LD_EXP 8
2008: IFFALSE 2074
2010: GO 2012
2012: DISABLE
// ComPatrol ( russian_patrol_tanks [ 1 ] , road , 0 0$02 , [ 131 , 87 , 107 , 75 , 107 , 66 , 114 , 61 , 107 , 34 ] ) ;
2013: LD_EXP 23
2017: PUSH
2018: LD_INT 1
2020: ARRAY
2021: PPUSH
2022: LD_STRING road
2024: PPUSH
2025: LD_INT 70
2027: PPUSH
2028: LD_INT 131
2030: PUSH
2031: LD_INT 87
2033: PUSH
2034: LD_INT 107
2036: PUSH
2037: LD_INT 75
2039: PUSH
2040: LD_INT 107
2042: PUSH
2043: LD_INT 66
2045: PUSH
2046: LD_INT 114
2048: PUSH
2049: LD_INT 61
2051: PUSH
2052: LD_INT 107
2054: PUSH
2055: LD_INT 34
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: PPUSH
2070: CALL 421 0 4
2074: END
// every 0 0$01 trigger active_road_patrol do
2075: LD_EXP 8
2079: IFFALSE 2137
2081: GO 2083
2083: DISABLE
// ComPatrol ( russian_patrol_tanks [ 2 ] , road , 0 0$02 , [ 21 , 12 , 37 , 30 , 65 , 62 , 107 , 76 ] ) ;
2084: LD_EXP 23
2088: PUSH
2089: LD_INT 2
2091: ARRAY
2092: PPUSH
2093: LD_STRING road
2095: PPUSH
2096: LD_INT 70
2098: PPUSH
2099: LD_INT 21
2101: PUSH
2102: LD_INT 12
2104: PUSH
2105: LD_INT 37
2107: PUSH
2108: LD_INT 30
2110: PUSH
2111: LD_INT 65
2113: PUSH
2114: LD_INT 62
2116: PUSH
2117: LD_INT 107
2119: PUSH
2120: LD_INT 76
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: PPUSH
2133: CALL 421 0 4
2137: END
// every 0 0$01 trigger active_road_patrol do
2138: LD_EXP 8
2142: IFFALSE 2200
2144: GO 2146
2146: DISABLE
// ComPatrol ( russian_patrol_tanks [ 3 ] , road , 0 0$02 , [ 167 , 95 , 147 , 81 , 144 , 66 , 149 , 55 ] ) ;
2147: LD_EXP 23
2151: PUSH
2152: LD_INT 3
2154: ARRAY
2155: PPUSH
2156: LD_STRING road
2158: PPUSH
2159: LD_INT 70
2161: PPUSH
2162: LD_INT 167
2164: PUSH
2165: LD_INT 95
2167: PUSH
2168: LD_INT 147
2170: PUSH
2171: LD_INT 81
2173: PUSH
2174: LD_INT 144
2176: PUSH
2177: LD_INT 66
2179: PUSH
2180: LD_INT 149
2182: PUSH
2183: LD_INT 55
2185: PUSH
2186: EMPTY
2187: LIST
2188: LIST
2189: LIST
2190: LIST
2191: LIST
2192: LIST
2193: LIST
2194: LIST
2195: PPUSH
2196: CALL 421 0 4
2200: END
// every 0 0$01 trigger IsOk ( russian_patrol_forest ) do
2201: LD_EXP 25
2205: PPUSH
2206: CALL_OW 302
2210: IFFALSE 2272
2212: GO 2214
2214: DISABLE
// ComPatrol ( russian_patrol_forest , forest , 0 0$01 , [ 52 , 15 , 81 , 9 , 120 , 52 , 135 , 80 , 122 , 95 ] ) ;
2215: LD_EXP 25
2219: PPUSH
2220: LD_STRING forest
2222: PPUSH
2223: LD_INT 35
2225: PPUSH
2226: LD_INT 52
2228: PUSH
2229: LD_INT 15
2231: PUSH
2232: LD_INT 81
2234: PUSH
2235: LD_INT 9
2237: PUSH
2238: LD_INT 120
2240: PUSH
2241: LD_INT 52
2243: PUSH
2244: LD_INT 135
2246: PUSH
2247: LD_INT 80
2249: PUSH
2250: LD_INT 122
2252: PUSH
2253: LD_INT 95
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: LIST
2260: LIST
2261: LIST
2262: LIST
2263: LIST
2264: LIST
2265: LIST
2266: LIST
2267: PPUSH
2268: CALL 421 0 4
2272: END
// every 0 0$01 trigger IsOk ( russian_patrol_hidden ) do
2273: LD_EXP 26
2277: PPUSH
2278: CALL_OW 302
2282: IFFALSE 2336
2284: GO 2286
2286: DISABLE
// ComPatrol ( russian_patrol_hidden , forest , 0 0$02 , [ 137 , 30 , 127 , 23 , 122 , 16 , 114 , 3 ] ) ;
2287: LD_EXP 26
2291: PPUSH
2292: LD_STRING forest
2294: PPUSH
2295: LD_INT 70
2297: PPUSH
2298: LD_INT 137
2300: PUSH
2301: LD_INT 30
2303: PUSH
2304: LD_INT 127
2306: PUSH
2307: LD_INT 23
2309: PUSH
2310: LD_INT 122
2312: PUSH
2313: LD_INT 16
2315: PUSH
2316: LD_INT 114
2318: PUSH
2319: LD_INT 3
2321: PUSH
2322: EMPTY
2323: LIST
2324: LIST
2325: LIST
2326: LIST
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: PPUSH
2332: CALL 421 0 4
2336: END
// every 0 0$01 trigger macmilan_use_radio do
2337: LD_EXP 6
2341: IFFALSE 2402
2343: GO 2345
2345: DISABLE
// begin active_road_patrol := false ;
2346: LD_ADDR_EXP 8
2350: PUSH
2351: LD_INT 0
2353: ST_TO_ADDR
// ComStop ( russian_patrol_tanks ) ;
2354: LD_EXP 23
2358: PPUSH
2359: CALL_OW 141
// AddComAgressiveMove ( russian_patrol_tanks , 72 , 41 ) ;
2363: LD_EXP 23
2367: PPUSH
2368: LD_INT 72
2370: PPUSH
2371: LD_INT 41
2373: PPUSH
2374: CALL_OW 174
// ComExitBuilding ( russian_troops_2 ) ;
2378: LD_EXP 22
2382: PPUSH
2383: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , 72 , 41 ) ;
2387: LD_EXP 22
2391: PPUSH
2392: LD_INT 72
2394: PPUSH
2395: LD_INT 41
2397: PPUSH
2398: CALL_OW 174
// end ;
2402: END
// every 0 0$03 trigger FilterUnitsInArea ( def_south , [ f_side , 1 ] ) do var un ;
2403: LD_INT 9
2405: PPUSH
2406: LD_INT 22
2408: PUSH
2409: LD_INT 1
2411: PUSH
2412: EMPTY
2413: LIST
2414: LIST
2415: PPUSH
2416: CALL_OW 70
2420: IFFALSE 2494
2422: GO 2424
2424: DISABLE
2425: LD_INT 0
2427: PPUSH
// begin enable ;
2428: ENABLE
// un := FilterUnitsInArea ( def_south , [ f_side , 1 ] ) [ 1 ] ;
2429: LD_ADDR_VAR 0 1
2433: PUSH
2434: LD_INT 9
2436: PPUSH
2437: LD_INT 22
2439: PUSH
2440: LD_INT 1
2442: PUSH
2443: EMPTY
2444: LIST
2445: LIST
2446: PPUSH
2447: CALL_OW 70
2451: PUSH
2452: LD_INT 1
2454: ARRAY
2455: ST_TO_ADDR
// ComExitBuilding ( russian_troops_2 ) ;
2456: LD_EXP 22
2460: PPUSH
2461: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , GetX ( un ) , GetY ( un ) ) ;
2465: LD_EXP 22
2469: PPUSH
2470: LD_VAR 0 1
2474: PPUSH
2475: CALL_OW 250
2479: PPUSH
2480: LD_VAR 0 1
2484: PPUSH
2485: CALL_OW 251
2489: PPUSH
2490: CALL_OW 174
// end ;
2494: PPOPN 1
2496: END
// every 0 0$01 trigger ( GetLives ( russian_patrol_tanks [ 1 ] ) < 999 or GetLives ( russian_patrol_tanks [ 2 ] ) < 999 ) and See ( 3 , JMM ) do
2497: LD_EXP 23
2501: PUSH
2502: LD_INT 1
2504: ARRAY
2505: PPUSH
2506: CALL_OW 256
2510: PUSH
2511: LD_INT 999
2513: LESS
2514: PUSH
2515: LD_EXP 23
2519: PUSH
2520: LD_INT 2
2522: ARRAY
2523: PPUSH
2524: CALL_OW 256
2528: PUSH
2529: LD_INT 999
2531: LESS
2532: OR
2533: PUSH
2534: LD_INT 3
2536: PPUSH
2537: LD_EXP 16
2541: PPUSH
2542: CALL_OW 292
2546: AND
2547: IFFALSE 2574
2549: GO 2551
2551: DISABLE
// begin active_road_patrol := false ;
2552: LD_ADDR_EXP 8
2556: PUSH
2557: LD_INT 0
2559: ST_TO_ADDR
// ComAttackUnit ( russian_patrol_tanks , JMM ) ;
2560: LD_EXP 23
2564: PPUSH
2565: LD_EXP 16
2569: PPUSH
2570: CALL_OW 115
// end ;
2574: END
// every 0 0$01 trigger macmilan_in_trap do
2575: LD_EXP 9
2579: IFFALSE 2625
2581: GO 2583
2583: DISABLE
// begin ComExitBuilding ( russian_troops_2 ) ;
2584: LD_EXP 22
2588: PPUSH
2589: CALL_OW 122
// ComAttackUnit ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , JMM ) ;
2593: LD_EXP 21
2597: PUSH
2598: LD_EXP 22
2602: ADD
2603: PUSH
2604: LD_EXP 27
2608: ADD
2609: PUSH
2610: LD_EXP 23
2614: ADD
2615: PPUSH
2616: LD_EXP 16
2620: PPUSH
2621: CALL_OW 115
// end ;
2625: END
// every 0 0$01 trigger meta_action do
2626: LD_EXP 10
2630: IFFALSE 2748
2632: GO 2634
2634: DISABLE
// begin active_road_patrol := false ;
2635: LD_ADDR_EXP 8
2639: PUSH
2640: LD_INT 0
2642: ST_TO_ADDR
// if FilterUnitsInArea ( secretRoad , [ f_side , 1 ] ) then
2643: LD_INT 15
2645: PPUSH
2646: LD_INT 22
2648: PUSH
2649: LD_INT 1
2651: PUSH
2652: EMPTY
2653: LIST
2654: LIST
2655: PPUSH
2656: CALL_OW 70
2660: IFFALSE 2715
// begin ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 , 104 , 10 ) ;
2662: LD_EXP 21
2666: PUSH
2667: LD_EXP 22
2671: ADD
2672: PPUSH
2673: LD_INT 104
2675: PPUSH
2676: LD_INT 10
2678: PPUSH
2679: CALL_OW 114
// ComAgressiveMove ( russian_patrol_tanks , 96 , 14 ) ;
2683: LD_EXP 23
2687: PPUSH
2688: LD_INT 96
2690: PPUSH
2691: LD_INT 14
2693: PPUSH
2694: CALL_OW 114
// ComAgressiveMove ( Pokryshkin , 85 , 4 ) ;
2698: LD_EXP 27
2702: PPUSH
2703: LD_INT 85
2705: PPUSH
2706: LD_INT 4
2708: PPUSH
2709: CALL_OW 114
// end else
2713: GO 2748
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , 93 , 1 ) ;
2715: LD_EXP 21
2719: PUSH
2720: LD_EXP 22
2724: ADD
2725: PUSH
2726: LD_EXP 27
2730: ADD
2731: PUSH
2732: LD_EXP 23
2736: ADD
2737: PPUSH
2738: LD_INT 93
2740: PPUSH
2741: LD_INT 1
2743: PPUSH
2744: CALL_OW 114
// end ;
2748: END
// every 0 0$1 trigger GetLives ( Pokryshkin ) < 1000 do
2749: LD_EXP 27
2753: PPUSH
2754: CALL_OW 256
2758: PUSH
2759: LD_INT 1000
2761: LESS
2762: IFFALSE 2813
2764: GO 2766
2766: DISABLE
// begin enable ;
2767: ENABLE
// if HexInfo ( 18 , 1 ) = Pokryshkin then
2768: LD_INT 18
2770: PPUSH
2771: LD_INT 1
2773: PPUSH
2774: CALL_OW 428
2778: PUSH
2779: LD_EXP 27
2783: EQUAL
2784: IFFALSE 2798
// begin RemoveUnit ( Pokryshkin ) ;
2786: LD_EXP 27
2790: PPUSH
2791: CALL_OW 64
// disable ;
2795: DISABLE
// end else
2796: GO 2813
// ComMoveXY ( Pokryshkin , 18 , 1 ) ;
2798: LD_EXP 27
2802: PPUSH
2803: LD_INT 18
2805: PPUSH
2806: LD_INT 1
2808: PPUSH
2809: CALL_OW 111
// end ;
2813: END
// every 0 0$20 trigger send_troops_to_forest do
2814: LD_EXP 14
2818: IFFALSE 2872
2820: GO 2822
2822: DISABLE
// begin if not IsOk ( russian_patrol_forest ) then
2823: LD_EXP 25
2827: PPUSH
2828: CALL_OW 302
2832: NOT
2833: IFFALSE 2837
// exit ;
2835: GO 2872
// ComAgressiveMove ( russian_troops_1 ^ Pokryshkin , GetRememberedX ( russian_patrol_forest ) , GetRememberedY ( russian_patrol_forest ) ) ;
2837: LD_EXP 21
2841: PUSH
2842: LD_EXP 27
2846: ADD
2847: PPUSH
2848: LD_EXP 25
2852: PPUSH
2853: CALL_OW 252
2857: PPUSH
2858: LD_EXP 25
2862: PPUSH
2863: CALL_OW 253
2867: PPUSH
2868: CALL_OW 114
// end ;
2872: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) = 3 then
2873: LD_VAR 0 1
2877: PPUSH
2878: CALL_OW 255
2882: PUSH
2883: LD_INT 3
2885: EQUAL
2886: IFFALSE 2929
// begin wait ( 11 ) ;
2888: LD_INT 11
2890: PPUSH
2891: CALL_OW 67
// ComEnterUnit ( driver , NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_depot ] ) , driver ) ) ;
2895: LD_VAR 0 1
2899: PPUSH
2900: LD_INT 30
2902: PUSH
2903: LD_INT 0
2905: PUSH
2906: EMPTY
2907: LIST
2908: LIST
2909: PPUSH
2910: CALL_OW 69
2914: PPUSH
2915: LD_VAR 0 1
2919: PPUSH
2920: CALL_OW 74
2924: PPUSH
2925: CALL_OW 120
// end ; end ; end_of_file
2929: PPOPN 4
2931: END
// export function Action ; var i ; begin
2932: LD_INT 0
2934: PPUSH
2935: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
2936: LD_ADDR_VAR 0 2
2940: PUSH
2941: LD_INT 22
2943: PUSH
2944: LD_INT 3
2946: PUSH
2947: EMPTY
2948: LIST
2949: LIST
2950: PUSH
2951: LD_INT 25
2953: PUSH
2954: LD_INT 1
2956: PUSH
2957: EMPTY
2958: LIST
2959: LIST
2960: PUSH
2961: EMPTY
2962: LIST
2963: LIST
2964: PPUSH
2965: CALL_OW 69
2969: PUSH
2970: FOR_IN
2971: IFFALSE 2984
// ComHold ( i ) ;
2973: LD_VAR 0 2
2977: PPUSH
2978: CALL_OW 140
2982: GO 2970
2984: POP
2985: POP
// InGameOn ;
2986: CALL_OW 8
// CenterOnXY ( 79 , 76 ) ;
2990: LD_INT 79
2992: PPUSH
2993: LD_INT 76
2995: PPUSH
2996: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
3000: LD_INT 10
3002: PPUSH
3003: CALL_OW 67
// PlaceUnitXY ( JMM , 80 , 79 , true ) ;
3007: LD_EXP 16
3011: PPUSH
3012: LD_INT 80
3014: PPUSH
3015: LD_INT 79
3017: PPUSH
3018: LD_INT 1
3020: PPUSH
3021: CALL_OW 48
// Wait ( 0 0$03 ) ;
3025: LD_INT 105
3027: PPUSH
3028: CALL_OW 67
// ComMoveXY ( JMM , 80 , 76 ) ;
3032: LD_EXP 16
3036: PPUSH
3037: LD_INT 80
3039: PPUSH
3040: LD_INT 76
3042: PPUSH
3043: CALL_OW 111
// Say ( JMM , D1-JMM-1 ) ;
3047: LD_EXP 16
3051: PPUSH
3052: LD_STRING D1-JMM-1
3054: PPUSH
3055: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
3059: LD_INT 10
3061: PPUSH
3062: CALL_OW 67
// ComMoveXY ( JMM , 76 , 76 ) ;
3066: LD_EXP 16
3070: PPUSH
3071: LD_INT 76
3073: PPUSH
3074: LD_INT 76
3076: PPUSH
3077: CALL_OW 111
// Say ( JMM , D1-JMM-1a ) ;
3081: LD_EXP 16
3085: PPUSH
3086: LD_STRING D1-JMM-1a
3088: PPUSH
3089: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
3093: LD_INT 10
3095: PPUSH
3096: CALL_OW 67
// ComTurnXY ( JMM , 83 , 66 ) ;
3100: LD_EXP 16
3104: PPUSH
3105: LD_INT 83
3107: PPUSH
3108: LD_INT 66
3110: PPUSH
3111: CALL_OW 118
// Say ( JMM , D1-JMM-1b ) ;
3115: LD_EXP 16
3119: PPUSH
3120: LD_STRING D1-JMM-1b
3122: PPUSH
3123: CALL_OW 88
// Wait ( 0 0$0.5 ) ;
3127: LD_INT 18
3129: PPUSH
3130: CALL_OW 67
// Say ( JMM , D1-JMM-1c ) ;
3134: LD_EXP 16
3138: PPUSH
3139: LD_STRING D1-JMM-1c
3141: PPUSH
3142: CALL_OW 88
// Wait ( 0 0$0.2 ) ;
3146: LD_INT 7
3148: PPUSH
3149: CALL_OW 67
// SayRadioNoFaceNoName ( Powell , D1-Pow-1 ) ;
3153: LD_EXP 19
3157: PPUSH
3158: LD_STRING D1-Pow-1
3160: PPUSH
3161: CALL 69371 0 2
// Say ( JMM , D1-JMM-2 ) ;
3165: LD_EXP 16
3169: PPUSH
3170: LD_STRING D1-JMM-2
3172: PPUSH
3173: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D1-Pow-2 ) ;
3177: LD_EXP 19
3181: PPUSH
3182: LD_STRING D1-Pow-2
3184: PPUSH
3185: CALL 69371 0 2
// Say ( JMM , D1-JMM-3 ) ;
3189: LD_EXP 16
3193: PPUSH
3194: LD_STRING D1-JMM-3
3196: PPUSH
3197: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D1-Pow-3 ) ;
3201: LD_EXP 19
3205: PPUSH
3206: LD_STRING D1-Pow-3
3208: PPUSH
3209: CALL 69371 0 2
// Say ( JMM , D1-JMM-4 ) ;
3213: LD_EXP 16
3217: PPUSH
3218: LD_STRING D1-JMM-4
3220: PPUSH
3221: CALL_OW 88
// ComFree ( JMM ) ;
3225: LD_EXP 16
3229: PPUSH
3230: CALL_OW 139
// Wait ( 0 0$0.3 ) ;
3234: LD_INT 10
3236: PPUSH
3237: CALL_OW 67
// InGameOff ;
3241: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
3245: LD_STRING M1
3247: PPUSH
3248: CALL_OW 337
// SaveForQuickRestart ;
3252: CALL_OW 22
// active_russian_dialog := true ;
3256: LD_ADDR_EXP 3
3260: PUSH
3261: LD_INT 1
3263: ST_TO_ADDR
// active_road_patrol := true ;
3264: LD_ADDR_EXP 8
3268: PUSH
3269: LD_INT 1
3271: ST_TO_ADDR
// if Difficulty < 3 then
3272: LD_OWVAR 67
3276: PUSH
3277: LD_INT 3
3279: LESS
3280: IFFALSE 3311
// begin PlaceUnitXY ( Bobby , 41 , 71 , false ) ;
3282: LD_EXP 17
3286: PPUSH
3287: LD_INT 41
3289: PPUSH
3290: LD_INT 71
3292: PPUSH
3293: LD_INT 0
3295: PPUSH
3296: CALL_OW 48
// ComHold ( Bobby ) ;
3300: LD_EXP 17
3304: PPUSH
3305: CALL_OW 140
// end else
3309: GO 3359
// begin SetDir ( Bobby , 5 ) ;
3311: LD_EXP 17
3315: PPUSH
3316: LD_INT 5
3318: PPUSH
3319: CALL_OW 233
// PlaceUnitXY ( Bobby , 105 , 98 , false ) ;
3323: LD_EXP 17
3327: PPUSH
3328: LD_INT 105
3330: PPUSH
3331: LD_INT 98
3333: PPUSH
3334: LD_INT 0
3336: PPUSH
3337: CALL_OW 48
// ComCrawl ( Bobby ) ;
3341: LD_EXP 17
3345: PPUSH
3346: CALL_OW 137
// AddComHold ( Bobby ) ;
3350: LD_EXP 17
3354: PPUSH
3355: CALL_OW 200
// end ; if Difficulty < 3 then
3359: LD_OWVAR 67
3363: PUSH
3364: LD_INT 3
3366: LESS
3367: IFFALSE 3404
// begin PlaceUnitXY ( Cyrus , 90 , 42 , false ) ;
3369: LD_EXP 18
3373: PPUSH
3374: LD_INT 90
3376: PPUSH
3377: LD_INT 42
3379: PPUSH
3380: LD_INT 0
3382: PPUSH
3383: CALL_OW 48
// ComMoveXY ( Cyrus , 79 , 34 ) ;
3387: LD_EXP 18
3391: PPUSH
3392: LD_INT 79
3394: PPUSH
3395: LD_INT 34
3397: PPUSH
3398: CALL_OW 111
// end else
3402: GO 3452
// if Difficulty = 3 then
3404: LD_OWVAR 67
3408: PUSH
3409: LD_INT 3
3411: EQUAL
3412: IFFALSE 3434
// PlaceUnitXY ( Cyrus , 125 , 42 , false ) else
3414: LD_EXP 18
3418: PPUSH
3419: LD_INT 125
3421: PPUSH
3422: LD_INT 42
3424: PPUSH
3425: LD_INT 0
3427: PPUSH
3428: CALL_OW 48
3432: GO 3452
// PlaceUnitXY ( Cyrus , 154 , 97 , false ) ;
3434: LD_EXP 18
3438: PPUSH
3439: LD_INT 154
3441: PPUSH
3442: LD_INT 97
3444: PPUSH
3445: LD_INT 0
3447: PPUSH
3448: CALL_OW 48
// AddComCrawl ( Cyrus ) ;
3452: LD_EXP 18
3456: PPUSH
3457: CALL_OW 197
// AddComHold ( Cyrus ) ;
3461: LD_EXP 18
3465: PPUSH
3466: CALL_OW 200
// end ;
3470: LD_VAR 0 1
3474: RET
// every 0 0$01 trigger active_russian_dialog do var wait_points ;
3475: LD_EXP 3
3479: IFFALSE 4073
3481: GO 3483
3483: DISABLE
3484: LD_INT 0
3486: PPUSH
// begin wait_points := 0 ;
3487: LD_ADDR_VAR 0 1
3491: PUSH
3492: LD_INT 0
3494: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
3495: LD_INT 70
3497: PPUSH
3498: CALL_OW 67
// ComAgressiveMove ( russian_troops_1 , 79 , 83 ) ;
3502: LD_EXP 21
3506: PPUSH
3507: LD_INT 79
3509: PPUSH
3510: LD_INT 83
3512: PPUSH
3513: CALL_OW 114
// Say ( russian_troops_1 [ 2 ] , D1R-Rus1-1 ) ;
3517: LD_EXP 21
3521: PUSH
3522: LD_INT 2
3524: ARRAY
3525: PPUSH
3526: LD_STRING D1R-Rus1-1
3528: PPUSH
3529: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1R-Rus2-1 ) ;
3533: LD_EXP 21
3537: PUSH
3538: LD_INT 1
3540: ARRAY
3541: PPUSH
3542: LD_STRING D1R-Rus2-1
3544: PPUSH
3545: CALL_OW 88
// ComAgressiveMove ( russian_troops_2 , 91 , 80 ) ;
3549: LD_EXP 22
3553: PPUSH
3554: LD_INT 91
3556: PPUSH
3557: LD_INT 80
3559: PPUSH
3560: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
3564: LD_INT 35
3566: PPUSH
3567: CALL_OW 67
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 79 , 82 ) < 6 ;
3571: LD_EXP 21
3575: PUSH
3576: LD_INT 1
3578: ARRAY
3579: PPUSH
3580: LD_INT 79
3582: PPUSH
3583: LD_INT 82
3585: PPUSH
3586: CALL_OW 297
3590: PUSH
3591: LD_INT 6
3593: LESS
3594: IFFALSE 3564
// if not IsInArea ( JMM , jmm_spot ) then
3596: LD_EXP 16
3600: PPUSH
3601: LD_INT 5
3603: PPUSH
3604: CALL_OW 308
3608: NOT
3609: IFFALSE 3629
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1 ) else
3611: LD_EXP 21
3615: PUSH
3616: LD_INT 1
3618: ARRAY
3619: PPUSH
3620: LD_STRING D1Ra-Rus2-1
3622: PPUSH
3623: CALL_OW 88
3627: GO 3696
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3629: LD_EXP 21
3633: PUSH
3634: LD_INT 2
3636: ARRAY
3637: PPUSH
3638: LD_STRING D1Rb-Rus1-1
3640: PPUSH
3641: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Rb-Rus2-1 ) ;
3645: LD_EXP 21
3649: PUSH
3650: LD_INT 1
3652: ARRAY
3653: PPUSH
3654: LD_STRING D1Rb-Rus2-1
3656: PPUSH
3657: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 , GetX ( JMM ) , GetY ( JMM ) ) ;
3661: LD_EXP 21
3665: PUSH
3666: LD_EXP 22
3670: ADD
3671: PPUSH
3672: LD_EXP 16
3676: PPUSH
3677: CALL_OW 250
3681: PPUSH
3682: LD_EXP 16
3686: PPUSH
3687: CALL_OW 251
3691: PPUSH
3692: CALL_OW 114
// end ; wait_points := 10 ;
3696: LD_ADDR_VAR 0 1
3700: PUSH
3701: LD_INT 10
3703: ST_TO_ADDR
// if Difficulty > 1 then
3704: LD_OWVAR 67
3708: PUSH
3709: LD_INT 1
3711: GREATER
3712: IFFALSE 3794
// begin ComAgressiveMove ( russian_troops_1 , 78 , 95 ) ;
3714: LD_EXP 21
3718: PPUSH
3719: LD_INT 78
3721: PPUSH
3722: LD_INT 95
3724: PPUSH
3725: CALL_OW 114
// AddComWait ( russian_troops_1 , 0 0$05 ) ;
3729: LD_EXP 21
3733: PPUSH
3734: LD_INT 175
3736: PPUSH
3737: CALL_OW 202
// wait_points := wait_points + 15 ;
3741: LD_ADDR_VAR 0 1
3745: PUSH
3746: LD_VAR 0 1
3750: PUSH
3751: LD_INT 15
3753: PLUS
3754: ST_TO_ADDR
// if Difficulty > 2 then
3755: LD_OWVAR 67
3759: PUSH
3760: LD_INT 2
3762: GREATER
3763: IFFALSE 3794
// begin AddComAgressiveMove ( russian_troops_1 , 65 , 79 ) ;
3765: LD_EXP 21
3769: PPUSH
3770: LD_INT 65
3772: PPUSH
3773: LD_INT 79
3775: PPUSH
3776: CALL_OW 174
// wait_points := wait_points + 5 ;
3780: LD_ADDR_VAR 0 1
3784: PUSH
3785: LD_VAR 0 1
3789: PUSH
3790: LD_INT 5
3792: PLUS
3793: ST_TO_ADDR
// end ; end ; repeat wait ( 0 0$01 ) ;
3794: LD_INT 35
3796: PPUSH
3797: CALL_OW 67
// wait_points := wait_points - 1 ;
3801: LD_ADDR_VAR 0 1
3805: PUSH
3806: LD_VAR 0 1
3810: PUSH
3811: LD_INT 1
3813: MINUS
3814: ST_TO_ADDR
// if See ( 3 , JMM ) then
3815: LD_INT 3
3817: PPUSH
3818: LD_EXP 16
3822: PPUSH
3823: CALL_OW 292
3827: IFFALSE 3881
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3829: LD_EXP 21
3833: PUSH
3834: LD_INT 2
3836: ARRAY
3837: PPUSH
3838: LD_STRING D1Rb-Rus1-1
3840: PPUSH
3841: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3845: LD_EXP 21
3849: PPUSH
3850: LD_EXP 16
3854: PPUSH
3855: CALL_OW 250
3859: PPUSH
3860: LD_EXP 16
3864: PPUSH
3865: CALL_OW 251
3869: PPUSH
3870: CALL_OW 114
// Wait ( 0 0$03 ) ;
3874: LD_INT 105
3876: PPUSH
3877: CALL_OW 67
// end ; until wait_points = 0 ;
3881: LD_VAR 0 1
3885: PUSH
3886: LD_INT 0
3888: EQUAL
3889: IFFALSE 3794
// Say ( russian_troops_1 [ 2 ] , D1Rc-Rus1-1 ) ;
3891: LD_EXP 21
3895: PUSH
3896: LD_INT 2
3898: ARRAY
3899: PPUSH
3900: LD_STRING D1Rc-Rus1-1
3902: PPUSH
3903: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1a ) ;
3907: LD_EXP 21
3911: PUSH
3912: LD_INT 1
3914: ARRAY
3915: PPUSH
3916: LD_STRING D1Ra-Rus2-1a
3918: PPUSH
3919: CALL_OW 88
// active_powell_dialog := true ;
3923: LD_ADDR_EXP 15
3927: PUSH
3928: LD_INT 1
3930: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3931: LD_EXP 21
3935: PPUSH
3936: LD_INT 45
3938: PPUSH
3939: LD_INT 5
3941: PPUSH
3942: CALL_OW 114
// ComEnterUnit ( russian_troops_2 , rbar1 ) ;
3946: LD_EXP 22
3950: PPUSH
3951: LD_INT 26
3953: PPUSH
3954: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
3958: LD_INT 35
3960: PPUSH
3961: CALL_OW 67
// if See ( 3 , JMM ) then
3965: LD_INT 3
3967: PPUSH
3968: LD_EXP 16
3972: PPUSH
3973: CALL_OW 292
3977: IFFALSE 4033
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3979: LD_EXP 21
3983: PUSH
3984: LD_INT 2
3986: ARRAY
3987: PPUSH
3988: LD_STRING D1Rb-Rus1-1
3990: PPUSH
3991: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3995: LD_EXP 21
3999: PPUSH
4000: LD_EXP 16
4004: PPUSH
4005: CALL_OW 250
4009: PPUSH
4010: LD_EXP 16
4014: PPUSH
4015: CALL_OW 251
4019: PPUSH
4020: CALL_OW 114
// Wait ( 0 0$50 ) ;
4024: LD_INT 1750
4026: PPUSH
4027: CALL_OW 67
// end else
4031: GO 4048
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
4033: LD_EXP 21
4037: PPUSH
4038: LD_INT 45
4040: PPUSH
4041: LD_INT 5
4043: PPUSH
4044: CALL_OW 114
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 45 , 5 ) < 10 ;
4048: LD_EXP 21
4052: PUSH
4053: LD_INT 1
4055: ARRAY
4056: PPUSH
4057: LD_INT 45
4059: PPUSH
4060: LD_INT 5
4062: PPUSH
4063: CALL_OW 297
4067: PUSH
4068: LD_INT 10
4070: LESS
4071: IFFALSE 3958
// end ;
4073: PPOPN 1
4075: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 6 ] ] ) and Difficulty = 1 do
4076: LD_INT 22
4078: PUSH
4079: LD_INT 3
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: PUSH
4086: LD_INT 92
4088: PUSH
4089: LD_INT 80
4091: PUSH
4092: LD_INT 83
4094: PUSH
4095: LD_INT 6
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: LIST
4102: LIST
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: PPUSH
4108: CALL_OW 69
4112: PUSH
4113: LD_OWVAR 67
4117: PUSH
4118: LD_INT 1
4120: EQUAL
4121: AND
4122: IFFALSE 4203
4124: GO 4126
4126: DISABLE
// begin PlaceSeeing ( 80 , 83 , 1 , - 7 ) ;
4127: LD_INT 80
4129: PPUSH
4130: LD_INT 83
4132: PPUSH
4133: LD_INT 1
4135: PPUSH
4136: LD_INT 7
4138: NEG
4139: PPUSH
4140: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
4144: LD_INT 35
4146: PPUSH
4147: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 10 ] ] ) ;
4151: LD_INT 22
4153: PUSH
4154: LD_INT 3
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: PUSH
4161: LD_INT 92
4163: PUSH
4164: LD_INT 80
4166: PUSH
4167: LD_INT 83
4169: PUSH
4170: LD_INT 10
4172: PUSH
4173: EMPTY
4174: LIST
4175: LIST
4176: LIST
4177: LIST
4178: PUSH
4179: EMPTY
4180: LIST
4181: LIST
4182: PPUSH
4183: CALL_OW 69
4187: NOT
4188: IFFALSE 4144
// RemoveSeeing ( 80 , 83 , 1 ) ;
4190: LD_INT 80
4192: PPUSH
4193: LD_INT 83
4195: PPUSH
4196: LD_INT 1
4198: PPUSH
4199: CALL_OW 331
// end ;
4203: END
// every 0 0$02 trigger GetDistUnits ( JMM , Bobby ) < 6 and IsOk ( Bobby ) do
4204: LD_EXP 16
4208: PPUSH
4209: LD_EXP 17
4213: PPUSH
4214: CALL_OW 296
4218: PUSH
4219: LD_INT 6
4221: LESS
4222: PUSH
4223: LD_EXP 17
4227: PPUSH
4228: CALL_OW 302
4232: AND
4233: IFFALSE 4692
4235: GO 4237
4237: DISABLE
// begin ComWalk ( Bobby ) ;
4238: LD_EXP 17
4242: PPUSH
4243: CALL_OW 138
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4247: LD_EXP 17
4251: PPUSH
4252: LD_EXP 16
4256: PPUSH
4257: CALL_OW 250
4261: PPUSH
4262: LD_EXP 16
4266: PPUSH
4267: CALL_OW 251
4271: PPUSH
4272: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
4276: LD_INT 35
4278: PPUSH
4279: CALL_OW 67
// until See ( 4 , JMM ) ;
4283: LD_INT 4
4285: PPUSH
4286: LD_EXP 16
4290: PPUSH
4291: CALL_OW 292
4295: IFFALSE 4276
// InGameOn ;
4297: CALL_OW 8
// ComTurnUnit ( JMM , Bobby ) ;
4301: LD_EXP 16
4305: PPUSH
4306: LD_EXP 17
4310: PPUSH
4311: CALL_OW 119
// if cyrus_in_squad and IsOk ( Cyrus ) and GetDistUnits ( JMM , Cyrus ) < 10 then
4315: LD_EXP 7
4319: PUSH
4320: LD_EXP 18
4324: PPUSH
4325: CALL_OW 302
4329: AND
4330: PUSH
4331: LD_EXP 16
4335: PPUSH
4336: LD_EXP 18
4340: PPUSH
4341: CALL_OW 296
4345: PUSH
4346: LD_INT 10
4348: LESS
4349: AND
4350: IFFALSE 4395
// begin ComMoveXY ( Cyrus , GetX ( JMM ) , GetY ( JMM ) ) ;
4352: LD_EXP 18
4356: PPUSH
4357: LD_EXP 16
4361: PPUSH
4362: CALL_OW 250
4366: PPUSH
4367: LD_EXP 16
4371: PPUSH
4372: CALL_OW 251
4376: PPUSH
4377: CALL_OW 111
// AddComTurnUnit ( Cyrus , Bobby ) ;
4381: LD_EXP 18
4385: PPUSH
4386: LD_EXP 17
4390: PPUSH
4391: CALL_OW 179
// end ; Say ( JMM , D2-JMM-1 ) ;
4395: LD_EXP 16
4399: PPUSH
4400: LD_STRING D2-JMM-1
4402: PPUSH
4403: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
4407: LD_INT 10
4409: PPUSH
4410: CALL_OW 67
// ComTurnUnit ( Bobby , JMM ) ;
4414: LD_EXP 17
4418: PPUSH
4419: LD_EXP 16
4423: PPUSH
4424: CALL_OW 119
// Say ( Bobby , D2-Bobby-1 ) ;
4428: LD_EXP 17
4432: PPUSH
4433: LD_STRING D2-Bobby-1
4435: PPUSH
4436: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
4440: LD_EXP 16
4444: PPUSH
4445: LD_STRING D2-JMM-2
4447: PPUSH
4448: CALL_OW 88
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4452: LD_EXP 17
4456: PPUSH
4457: LD_EXP 16
4461: PPUSH
4462: CALL_OW 250
4466: PPUSH
4467: LD_EXP 16
4471: PPUSH
4472: CALL_OW 251
4476: PPUSH
4477: CALL_OW 111
// Say ( Bobby , D2-Bobby-2 ) ;
4481: LD_EXP 17
4485: PPUSH
4486: LD_STRING D2-Bobby-2
4488: PPUSH
4489: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
4493: LD_EXP 16
4497: PPUSH
4498: LD_STRING D2-JMM-3
4500: PPUSH
4501: CALL_OW 88
// ComTurnUnit ( Bobby , JMM ) ;
4505: LD_EXP 17
4509: PPUSH
4510: LD_EXP 16
4514: PPUSH
4515: CALL_OW 119
// DialogueOn ;
4519: CALL_OW 6
// Say ( Bobby , D2-Bobby-3 ) ;
4523: LD_EXP 17
4527: PPUSH
4528: LD_STRING D2-Bobby-3
4530: PPUSH
4531: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
4535: LD_EXP 16
4539: PPUSH
4540: LD_STRING D2-JMM-4
4542: PPUSH
4543: CALL_OW 88
// Say ( Bobby , D2-Bobby-4 ) ;
4547: LD_EXP 17
4551: PPUSH
4552: LD_STRING D2-Bobby-4
4554: PPUSH
4555: CALL_OW 88
// Say ( JMM , D2-JMM-5 ) ;
4559: LD_EXP 16
4563: PPUSH
4564: LD_STRING D2-JMM-5
4566: PPUSH
4567: CALL_OW 88
// Say ( Bobby , D2-Bobby-5 ) ;
4571: LD_EXP 17
4575: PPUSH
4576: LD_STRING D2-Bobby-5
4578: PPUSH
4579: CALL_OW 88
// Say ( JMM , D2-JMM-6 ) ;
4583: LD_EXP 16
4587: PPUSH
4588: LD_STRING D2-JMM-6
4590: PPUSH
4591: CALL_OW 88
// if not powell_contact then
4595: LD_EXP 5
4599: NOT
4600: IFFALSE 4626
// begin Say ( Bobby , D2-Bobby-6 ) ;
4602: LD_EXP 17
4606: PPUSH
4607: LD_STRING D2-Bobby-6
4609: PPUSH
4610: CALL_OW 88
// Say ( JMM , D2-JMM-7 ) ;
4614: LD_EXP 16
4618: PPUSH
4619: LD_STRING D2-JMM-7
4621: PPUSH
4622: CALL_OW 88
// end ; DialogueOff ;
4626: CALL_OW 7
// InGameOff ;
4630: CALL_OW 9
// SetSide ( Bobby , 1 ) ;
4634: LD_EXP 17
4638: PPUSH
4639: LD_INT 1
4641: PPUSH
4642: CALL_OW 235
// ComFree ( [ JMM , Bobby ] ) ;
4646: LD_EXP 16
4650: PUSH
4651: LD_EXP 17
4655: PUSH
4656: EMPTY
4657: LIST
4658: LIST
4659: PPUSH
4660: CALL_OW 139
// bobby_in_squad := true ;
4664: LD_ADDR_EXP 4
4668: PUSH
4669: LD_INT 1
4671: ST_TO_ADDR
// if powell_contact and not cyrus_in_squad then
4672: LD_EXP 5
4676: PUSH
4677: LD_EXP 7
4681: NOT
4682: AND
4683: IFFALSE 4692
// ChangeMissionObjectives ( M2b ) ;
4685: LD_STRING M2b
4687: PPUSH
4688: CALL_OW 337
// end ;
4692: END
// every 0 0$10 trigger active_russian_dialog and Difficulty < 3 do
4693: LD_EXP 3
4697: PUSH
4698: LD_OWVAR 67
4702: PUSH
4703: LD_INT 3
4705: LESS
4706: AND
4707: IFFALSE 4741
4709: GO 4711
4711: DISABLE
// begin wait ( 1 1$00 ) ;
4712: LD_INT 2100
4714: PPUSH
4715: CALL_OW 67
// if not bobby_in_squad then
4719: LD_EXP 4
4723: NOT
4724: IFFALSE 4741
// ComMoveXY ( Bobby , 75 , 83 ) ;
4726: LD_EXP 17
4730: PPUSH
4731: LD_INT 75
4733: PPUSH
4734: LD_INT 83
4736: PPUSH
4737: CALL_OW 111
// end ;
4741: END
// every 0 0$10 trigger cyrus_in_squad and not bobby_in_squad do
4742: LD_EXP 7
4746: PUSH
4747: LD_EXP 4
4751: NOT
4752: AND
4753: IFFALSE 4782
4755: GO 4757
4757: DISABLE
// begin ComMoveXY ( Bobby , 105 , 97 ) ;
4758: LD_EXP 17
4762: PPUSH
4763: LD_INT 105
4765: PPUSH
4766: LD_INT 97
4768: PPUSH
4769: CALL_OW 111
// AddComCrawl ( Bobby ) ;
4773: LD_EXP 17
4777: PPUSH
4778: CALL_OW 197
// end ;
4782: END
// every 0 0$01 trigger IsInArea ( JMM , obstacle_area ) and GetDistUnits ( JMM , Bobby ) < 7 and bobby_in_squad do
4783: LD_EXP 16
4787: PPUSH
4788: LD_INT 6
4790: PPUSH
4791: CALL_OW 308
4795: PUSH
4796: LD_EXP 16
4800: PPUSH
4801: LD_EXP 17
4805: PPUSH
4806: CALL_OW 296
4810: PUSH
4811: LD_INT 7
4813: LESS
4814: AND
4815: PUSH
4816: LD_EXP 4
4820: AND
4821: IFFALSE 4868
4823: GO 4825
4825: DISABLE
// begin ComHold ( [ JMM , Bobby ] ) ;
4826: LD_EXP 16
4830: PUSH
4831: LD_EXP 17
4835: PUSH
4836: EMPTY
4837: LIST
4838: LIST
4839: PPUSH
4840: CALL_OW 140
// Say ( JMM , D2a-JMM-1 ) ;
4844: LD_EXP 16
4848: PPUSH
4849: LD_STRING D2a-JMM-1
4851: PPUSH
4852: CALL_OW 88
// Say ( Bobby , D2a-Bobby-1 ) ;
4856: LD_EXP 17
4860: PPUSH
4861: LD_STRING D2a-Bobby-1
4863: PPUSH
4864: CALL_OW 88
// end ;
4868: END
// every 0 0$50 trigger active_powell_dialog and not See ( 3 , JMM ) do
4869: LD_EXP 15
4873: PUSH
4874: LD_INT 3
4876: PPUSH
4877: LD_EXP 16
4881: PPUSH
4882: CALL_OW 292
4886: NOT
4887: AND
4888: IFFALSE 5059
4890: GO 4892
4892: DISABLE
// begin wait ( 0 0$5 ) ;
4893: LD_INT 175
4895: PPUSH
4896: CALL_OW 67
// InGameOn ;
4900: CALL_OW 8
// DialogueOn ;
4904: CALL_OW 6
// SayRadioNoFaceNoName ( Powell , D3-Pow-1 ) ;
4908: LD_EXP 19
4912: PPUSH
4913: LD_STRING D3-Pow-1
4915: PPUSH
4916: CALL 69371 0 2
// Say ( JMM , D3-JMM-1 ) ;
4920: LD_EXP 16
4924: PPUSH
4925: LD_STRING D3-JMM-1
4927: PPUSH
4928: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D3-Pow-2 ) ;
4932: LD_EXP 19
4936: PPUSH
4937: LD_STRING D3-Pow-2
4939: PPUSH
4940: CALL 69371 0 2
// Say ( JMM , D3-JMM-2 ) ;
4944: LD_EXP 16
4948: PPUSH
4949: LD_STRING D3-JMM-2
4951: PPUSH
4952: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D3-Pow-3 ) ;
4956: LD_EXP 19
4960: PPUSH
4961: LD_STRING D3-Pow-3
4963: PPUSH
4964: CALL 69371 0 2
// DialogueOff ;
4968: CALL_OW 7
// InGameOff ;
4972: CALL_OW 9
// powell_contact := true ;
4976: LD_ADDR_EXP 5
4980: PUSH
4981: LD_INT 1
4983: ST_TO_ADDR
// SetAreaMapShow ( exitArea , 1 ) ;
4984: LD_INT 10
4986: PPUSH
4987: LD_INT 1
4989: PPUSH
4990: CALL_OW 424
// uc_side := 4 ;
4994: LD_ADDR_OWVAR 20
4998: PUSH
4999: LD_INT 4
5001: ST_TO_ADDR
// uc_nation := 1 ;
5002: LD_ADDR_OWVAR 21
5006: PUSH
5007: LD_INT 1
5009: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
5010: LD_ADDR_EXP 19
5014: PUSH
5015: LD_STRING Powell
5017: PPUSH
5018: LD_INT 0
5020: PPUSH
5021: LD_STRING 
5023: PPUSH
5024: CALL 27761 0 3
5028: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
5029: LD_STRING M2
5031: PPUSH
5032: CALL_OW 337
// if not bobby_in_squad then
5036: LD_EXP 4
5040: NOT
5041: IFFALSE 5052
// ChangeMissionObjectives ( M2a ) else
5043: LD_STRING M2a
5045: PPUSH
5046: CALL_OW 337
5050: GO 5059
// ChangeMissionObjectives ( M2b ) ;
5052: LD_STRING M2b
5054: PPUSH
5055: CALL_OW 337
// end ;
5059: END
// every 0 0$01 trigger IsInArea ( JMM , fakeArea ) do
5060: LD_EXP 16
5064: PPUSH
5065: LD_INT 7
5067: PPUSH
5068: CALL_OW 308
5072: IFFALSE 5207
5074: GO 5076
5076: DISABLE
// begin DialogueOn ;
5077: CALL_OW 6
// SayRadioNoFaceNoName ( fakePokryshkin , D4-Rus3-1 ) ;
5081: LD_EXP 20
5085: PPUSH
5086: LD_STRING D4-Rus3-1
5088: PPUSH
5089: CALL 69371 0 2
// DialogueOff ;
5093: CALL_OW 7
// ChangeMissionObjectives ( M3a ) ;
5097: LD_STRING M3a
5099: PPUSH
5100: CALL_OW 337
// SetAreaMapShow ( fakeEnd , 1 ) ;
5104: LD_INT 11
5106: PPUSH
5107: LD_INT 1
5109: PPUSH
5110: CALL_OW 424
// Wait ( 0 0$02 ) ;
5114: LD_INT 70
5116: PPUSH
5117: CALL_OW 67
// DialogueOn ;
5121: CALL_OW 6
// SayRadioNoFace ( Powell , D4-Pow-1 ) ;
5125: LD_EXP 19
5129: PPUSH
5130: LD_STRING D4-Pow-1
5132: PPUSH
5133: CALL_OW 586
// DialogueOff ;
5137: CALL_OW 7
// ChangeMissionObjectives ( M3b ) ;
5141: LD_STRING M3b
5143: PPUSH
5144: CALL_OW 337
// case Query ( Q1 ) of 1 :
5148: LD_STRING Q1
5150: PPUSH
5151: CALL_OW 97
5155: PUSH
5156: LD_INT 1
5158: DOUBLE
5159: EQUAL
5160: IFTRUE 5164
5162: GO 5195
5164: POP
// begin macmilan_use_radio := true ;
5165: LD_ADDR_EXP 6
5169: PUSH
5170: LD_INT 1
5172: ST_TO_ADDR
// DialogueOn ;
5173: CALL_OW 6
// Say ( JMM , D4a-JMM-1 ) ;
5177: LD_EXP 16
5181: PPUSH
5182: LD_STRING D4a-JMM-1
5184: PPUSH
5185: CALL_OW 88
// DialogueOff ;
5189: CALL_OW 7
// end ; 2 :
5193: GO 5207
5195: LD_INT 2
5197: DOUBLE
5198: EQUAL
5199: IFTRUE 5203
5201: GO 5206
5203: POP
// ; end ;
5204: GO 5207
5206: POP
// end ;
5207: END
// every 0 0$02 trigger GetDistUnits ( JMM , Cyrus ) < 8 and IsOk ( Cyrus ) do
5208: LD_EXP 16
5212: PPUSH
5213: LD_EXP 18
5217: PPUSH
5218: CALL_OW 296
5222: PUSH
5223: LD_INT 8
5225: LESS
5226: PUSH
5227: LD_EXP 18
5231: PPUSH
5232: CALL_OW 302
5236: AND
5237: IFFALSE 5528
5239: GO 5241
5241: DISABLE
// begin InGameOn ;
5242: CALL_OW 8
// ComMoveXY ( JMM , GetX ( Cyrus ) , GetY ( Cyrus ) ) ;
5246: LD_EXP 16
5250: PPUSH
5251: LD_EXP 18
5255: PPUSH
5256: CALL_OW 250
5260: PPUSH
5261: LD_EXP 18
5265: PPUSH
5266: CALL_OW 251
5270: PPUSH
5271: CALL_OW 111
// if IsOk ( Bobby ) and bobby_in_squad then
5275: LD_EXP 17
5279: PPUSH
5280: CALL_OW 302
5284: PUSH
5285: LD_EXP 4
5289: AND
5290: IFFALSE 5321
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
5292: LD_EXP 17
5296: PPUSH
5297: LD_EXP 16
5301: PPUSH
5302: CALL_OW 250
5306: PPUSH
5307: LD_EXP 16
5311: PPUSH
5312: CALL_OW 251
5316: PPUSH
5317: CALL_OW 111
// Say ( JMM , D5-JMM-1 ) ;
5321: LD_EXP 16
5325: PPUSH
5326: LD_STRING D5-JMM-1
5328: PPUSH
5329: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
5333: LD_INT 10
5335: PPUSH
5336: CALL_OW 67
// ComTurnUnit ( JMM , Cyrus ) ;
5340: LD_EXP 16
5344: PPUSH
5345: LD_EXP 18
5349: PPUSH
5350: CALL_OW 119
// ComWalk ( Cyrus ) ;
5354: LD_EXP 18
5358: PPUSH
5359: CALL_OW 138
// ComTurnUnit ( Cyrus , JMM ) ;
5363: LD_EXP 18
5367: PPUSH
5368: LD_EXP 16
5372: PPUSH
5373: CALL_OW 119
// Say ( Cyrus , D5-Cyrus-1 ) ;
5377: LD_EXP 18
5381: PPUSH
5382: LD_STRING D5-Cyrus-1
5384: PPUSH
5385: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5389: LD_EXP 17
5393: PPUSH
5394: CALL_OW 302
5398: PUSH
5399: LD_EXP 4
5403: AND
5404: IFFALSE 5444
// begin ComTurnUnit ( Bobby , Cyrus ) ;
5406: LD_EXP 17
5410: PPUSH
5411: LD_EXP 18
5415: PPUSH
5416: CALL_OW 119
// Say ( Bobby , D5-Bobby-1 ) ;
5420: LD_EXP 17
5424: PPUSH
5425: LD_STRING D5-Bobby-1
5427: PPUSH
5428: CALL_OW 88
// Say ( JMM , D5-JMM-2 ) ;
5432: LD_EXP 16
5436: PPUSH
5437: LD_STRING D5-JMM-2
5439: PPUSH
5440: CALL_OW 88
// end ; InGameOff ;
5444: CALL_OW 9
// cyrus_in_squad := true ;
5448: LD_ADDR_EXP 7
5452: PUSH
5453: LD_INT 1
5455: ST_TO_ADDR
// SetSide ( Cyrus , 1 ) ;
5456: LD_EXP 18
5460: PPUSH
5461: LD_INT 1
5463: PPUSH
5464: CALL_OW 235
// if powell_contact and not bobby_in_squad then
5468: LD_EXP 5
5472: PUSH
5473: LD_EXP 4
5477: NOT
5478: AND
5479: IFFALSE 5488
// ChangeMissionObjectives ( M2b ) ;
5481: LD_STRING M2b
5483: PPUSH
5484: CALL_OW 337
// if not bobby_in_squad and GetSide ( Bobby ) = 4 and IsOk ( Bobby ) then
5488: LD_EXP 4
5492: NOT
5493: PUSH
5494: LD_EXP 17
5498: PPUSH
5499: CALL_OW 255
5503: PUSH
5504: LD_INT 4
5506: EQUAL
5507: AND
5508: PUSH
5509: LD_EXP 17
5513: PPUSH
5514: CALL_OW 302
5518: AND
5519: IFFALSE 5528
// SetAchievement ( ACH_CYRUS ) ;
5521: LD_STRING ACH_CYRUS
5523: PPUSH
5524: CALL_OW 543
// end ;
5528: END
// every 0 0$01 trigger bobby_in_squad and cyrus_in_squad do
5529: LD_EXP 4
5533: PUSH
5534: LD_EXP 7
5538: AND
5539: IFFALSE 5551
5541: GO 5543
5543: DISABLE
// ChangeMissionObjectives ( M2c ) ;
5544: LD_STRING M2c
5546: PPUSH
5547: CALL_OW 337
5551: END
// every 0 0$01 trigger IsInArea ( JMM , trap ) do
5552: LD_EXP 16
5556: PPUSH
5557: LD_INT 8
5559: PPUSH
5560: CALL_OW 308
5564: IFFALSE 5616
5566: GO 5568
5568: DISABLE
// begin macmilan_in_trap := true ;
5569: LD_ADDR_EXP 9
5573: PUSH
5574: LD_INT 1
5576: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
5577: LD_INT 35
5579: PPUSH
5580: CALL_OW 67
// DialogueOn ;
5584: CALL_OW 6
// Say ( Pokryshkin , D5-Pok-1 ) ;
5588: LD_EXP 27
5592: PPUSH
5593: LD_STRING D5-Pok-1
5595: PPUSH
5596: CALL_OW 88
// DialogueOff ;
5600: CALL_OW 7
// Say ( JMM , D4b-JMM-1 ) ;
5604: LD_EXP 16
5608: PPUSH
5609: LD_STRING D4b-JMM-1
5611: PPUSH
5612: CALL_OW 88
// end ;
5616: END
// every 0 0$01 trigger ( IsInArea ( JMM , endRoadArea ) and GetDistUnits ( JMM , russian_meta_guards [ russian_meta_guards ] ) < 12 ) or UnitFilter ( russian_meta_guards , [ f_not , [ f_lives , 990 ] ] ) do var i , hp ;
5617: LD_EXP 16
5621: PPUSH
5622: LD_INT 13
5624: PPUSH
5625: CALL_OW 308
5629: PUSH
5630: LD_EXP 16
5634: PPUSH
5635: LD_EXP 24
5639: PUSH
5640: LD_EXP 24
5644: ARRAY
5645: PPUSH
5646: CALL_OW 296
5650: PUSH
5651: LD_INT 12
5653: LESS
5654: AND
5655: PUSH
5656: LD_EXP 24
5660: PPUSH
5661: LD_INT 3
5663: PUSH
5664: LD_INT 24
5666: PUSH
5667: LD_INT 990
5669: PUSH
5670: EMPTY
5671: LIST
5672: LIST
5673: PUSH
5674: EMPTY
5675: LIST
5676: LIST
5677: PPUSH
5678: CALL_OW 72
5682: OR
5683: IFFALSE 5951
5685: GO 5687
5687: DISABLE
5688: LD_INT 0
5690: PPUSH
5691: PPUSH
// begin hp := [ 300 , 250 , 200 , 150 ] [ Difficulty ] ;
5692: LD_ADDR_VAR 0 2
5696: PUSH
5697: LD_INT 300
5699: PUSH
5700: LD_INT 250
5702: PUSH
5703: LD_INT 200
5705: PUSH
5706: LD_INT 150
5708: PUSH
5709: EMPTY
5710: LIST
5711: LIST
5712: LIST
5713: LIST
5714: PUSH
5715: LD_OWVAR 67
5719: ARRAY
5720: ST_TO_ADDR
// for i in russian_meta_guards do
5721: LD_ADDR_VAR 0 1
5725: PUSH
5726: LD_EXP 24
5730: PUSH
5731: FOR_IN
5732: IFFALSE 5772
// if IsOk ( i ) then
5734: LD_VAR 0 1
5738: PPUSH
5739: CALL_OW 302
5743: IFFALSE 5770
// SetLives ( i , GetLives ( i ) - hp ) ;
5745: LD_VAR 0 1
5749: PPUSH
5750: LD_VAR 0 1
5754: PPUSH
5755: CALL_OW 256
5759: PUSH
5760: LD_VAR 0 2
5764: MINUS
5765: PPUSH
5766: CALL_OW 234
5770: GO 5731
5772: POP
5773: POP
// DialogueOn ;
5774: CALL_OW 6
// Say ( russian_meta_guards [ russian_meta_guards ] , D6-FRus1-1 ) ;
5778: LD_EXP 24
5782: PUSH
5783: LD_EXP 24
5787: ARRAY
5788: PPUSH
5789: LD_STRING D6-FRus1-1
5791: PPUSH
5792: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] ] ) > 1 then
5796: LD_INT 22
5798: PUSH
5799: LD_INT 1
5801: PUSH
5802: EMPTY
5803: LIST
5804: LIST
5805: PUSH
5806: LD_INT 50
5808: PUSH
5809: EMPTY
5810: LIST
5811: PUSH
5812: EMPTY
5813: LIST
5814: LIST
5815: PPUSH
5816: CALL_OW 69
5820: PUSH
5821: LD_INT 1
5823: GREATER
5824: IFFALSE 5838
// Say ( JMM , D6-JMM-1 ) ;
5826: LD_EXP 16
5830: PPUSH
5831: LD_STRING D6-JMM-1
5833: PPUSH
5834: CALL_OW 88
// if IsOk ( Cyrus ) and cyrus_in_squad then
5838: LD_EXP 18
5842: PPUSH
5843: CALL_OW 302
5847: PUSH
5848: LD_EXP 7
5852: AND
5853: IFFALSE 5867
// Say ( Cyrus , D6-Cyrus-1 ) ;
5855: LD_EXP 18
5859: PPUSH
5860: LD_STRING D6-Cyrus-1
5862: PPUSH
5863: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5867: LD_EXP 17
5871: PPUSH
5872: CALL_OW 302
5876: PUSH
5877: LD_EXP 4
5881: AND
5882: IFFALSE 5896
// Say ( Bobby , D6-Bobby-1 ) ;
5884: LD_EXP 17
5888: PPUSH
5889: LD_STRING D6-Bobby-1
5891: PPUSH
5892: CALL_OW 88
// DialogueOff ;
5896: CALL_OW 7
// Wait ( [ 0 0$04 , 0 0$03 , 0 0$02 , 0 0$02 ] [ Difficulty ] ) ;
5900: LD_INT 140
5902: PUSH
5903: LD_INT 105
5905: PUSH
5906: LD_INT 70
5908: PUSH
5909: LD_INT 70
5911: PUSH
5912: EMPTY
5913: LIST
5914: LIST
5915: LIST
5916: LIST
5917: PUSH
5918: LD_OWVAR 67
5922: ARRAY
5923: PPUSH
5924: CALL_OW 67
// meta_action := true ;
5928: LD_ADDR_EXP 10
5932: PUSH
5933: LD_INT 1
5935: ST_TO_ADDR
// ComAgressiveMove ( russian_meta_guards , 94 , 8 ) ;
5936: LD_EXP 24
5940: PPUSH
5941: LD_INT 94
5943: PPUSH
5944: LD_INT 8
5946: PPUSH
5947: CALL_OW 114
// end ;
5951: PPOPN 2
5953: END
// every 0 0$1 trigger IsInArea ( JMM , secretPassage ) do
5954: LD_EXP 16
5958: PPUSH
5959: LD_INT 14
5961: PPUSH
5962: CALL_OW 308
5966: IFFALSE 5978
5968: GO 5970
5970: DISABLE
// SetAchievement ( ACH_SECRET ) ;
5971: LD_STRING ACH_SECRET
5973: PPUSH
5974: CALL_OW 543
5978: END
// every 0 0$01 trigger GetDistUnitXY ( JMM , 93 , 1 ) < 5 and FilterAllUnits ( [ f_side , 1 ] ) > 1 do
5979: LD_EXP 16
5983: PPUSH
5984: LD_INT 93
5986: PPUSH
5987: LD_INT 1
5989: PPUSH
5990: CALL_OW 297
5994: PUSH
5995: LD_INT 5
5997: LESS
5998: PUSH
5999: LD_INT 22
6001: PUSH
6002: LD_INT 1
6004: PUSH
6005: EMPTY
6006: LIST
6007: LIST
6008: PPUSH
6009: CALL_OW 69
6013: PUSH
6014: LD_INT 1
6016: GREATER
6017: AND
6018: IFFALSE 6035
6020: GO 6022
6022: DISABLE
// Say ( JMM , D6a-JMM-1 ) ;
6023: LD_EXP 16
6027: PPUSH
6028: LD_STRING D6a-JMM-1
6030: PPUSH
6031: CALL_OW 88
6035: END
// every 0 0$01 trigger IsInArea ( Bobby , exitArea ) or IsInArea ( Bobby , hiddenEnd ) do
6036: LD_EXP 17
6040: PPUSH
6041: LD_INT 10
6043: PPUSH
6044: CALL_OW 308
6048: PUSH
6049: LD_EXP 17
6053: PPUSH
6054: LD_INT 12
6056: PPUSH
6057: CALL_OW 308
6061: OR
6062: IFFALSE 6118
6064: GO 6066
6066: DISABLE
// begin bobby_saved := true ;
6067: LD_ADDR_EXP 12
6071: PUSH
6072: LD_INT 1
6074: ST_TO_ADDR
// SaveVariable ( GetLives ( Bobby ) , 01_BobbyLifePoints_1 ) ;
6075: LD_EXP 17
6079: PPUSH
6080: CALL_OW 256
6084: PPUSH
6085: LD_STRING 01_BobbyLifePoints_1
6087: PPUSH
6088: CALL_OW 39
// RemoveUnit ( Bobby ) ;
6092: LD_EXP 17
6096: PPUSH
6097: CALL_OW 64
// AddMedal ( Bobby , 1 ) ;
6101: LD_STRING Bobby
6103: PPUSH
6104: LD_INT 1
6106: PPUSH
6107: CALL_OW 101
// ToLua ( enableBioCharacter(BIO_BOBBY) ) ;
6111: LD_STRING enableBioCharacter(BIO_BOBBY)
6113: PPUSH
6114: CALL_OW 559
// end ;
6118: END
// every 0 0$01 trigger IsInArea ( Cyrus , exitArea ) or IsInArea ( Cyrus , hiddenEnd ) do
6119: LD_EXP 18
6123: PPUSH
6124: LD_INT 10
6126: PPUSH
6127: CALL_OW 308
6131: PUSH
6132: LD_EXP 18
6136: PPUSH
6137: LD_INT 12
6139: PPUSH
6140: CALL_OW 308
6144: OR
6145: IFFALSE 6201
6147: GO 6149
6149: DISABLE
// begin cyrus_saved := true ;
6150: LD_ADDR_EXP 13
6154: PUSH
6155: LD_INT 1
6157: ST_TO_ADDR
// SaveVariable ( GetLives ( Cyrus ) , 01_CyrusLifePoints_1 ) ;
6158: LD_EXP 18
6162: PPUSH
6163: CALL_OW 256
6167: PPUSH
6168: LD_STRING 01_CyrusLifePoints_1
6170: PPUSH
6171: CALL_OW 39
// RemoveUnit ( Cyrus ) ;
6175: LD_EXP 18
6179: PPUSH
6180: CALL_OW 64
// AddMedal ( Cyrus , 1 ) ;
6184: LD_STRING Cyrus
6186: PPUSH
6187: LD_INT 1
6189: PPUSH
6190: CALL_OW 101
// ToLua ( enableBioCharacter(BIO_CYRUS) ) ;
6194: LD_STRING enableBioCharacter(BIO_CYRUS)
6196: PPUSH
6197: CALL_OW 559
// end ;
6201: END
// every 0 0$01 trigger IsInArea ( JMM , exitArea ) or IsInArea ( JMM , hiddenEnd ) do var i , to_reward , wait_for_them , m1 , m2 , m3 ;
6202: LD_EXP 16
6206: PPUSH
6207: LD_INT 10
6209: PPUSH
6210: CALL_OW 308
6214: PUSH
6215: LD_EXP 16
6219: PPUSH
6220: LD_INT 12
6222: PPUSH
6223: CALL_OW 308
6227: OR
6228: IFFALSE 6857
6230: GO 6232
6232: DISABLE
6233: LD_INT 0
6235: PPUSH
6236: PPUSH
6237: PPUSH
6238: PPUSH
6239: PPUSH
6240: PPUSH
// begin if macmilan_use_radio then
6241: LD_EXP 6
6245: IFFALSE 6254
// SetAchievement ( ACH_RADIO ) ;
6247: LD_STRING ACH_RADIO
6249: PPUSH
6250: CALL_OW 543
// if ( not cyrus_saved and cyrus_in_squad and IsOk ( Cyrus ) ) or ( not bobby_saved and bobby_in_squad and IsOk ( Bobby ) ) then
6254: LD_EXP 13
6258: NOT
6259: PUSH
6260: LD_EXP 7
6264: AND
6265: PUSH
6266: LD_EXP 18
6270: PPUSH
6271: CALL_OW 302
6275: AND
6276: PUSH
6277: LD_EXP 12
6281: NOT
6282: PUSH
6283: LD_EXP 4
6287: AND
6288: PUSH
6289: LD_EXP 17
6293: PPUSH
6294: CALL_OW 302
6298: AND
6299: OR
6300: IFFALSE 6341
// case Query ( Q2 ) of 1 :
6302: LD_STRING Q2
6304: PPUSH
6305: CALL_OW 97
6309: PUSH
6310: LD_INT 1
6312: DOUBLE
6313: EQUAL
6314: IFTRUE 6318
6316: GO 6329
6318: POP
// wait_for_them := true ; 2 :
6319: LD_ADDR_VAR 0 3
6323: PUSH
6324: LD_INT 1
6326: ST_TO_ADDR
6327: GO 6341
6329: LD_INT 2
6331: DOUBLE
6332: EQUAL
6333: IFTRUE 6337
6335: GO 6340
6337: POP
// ; end ;
6338: GO 6341
6340: POP
// if wait_for_them then
6341: LD_VAR 0 3
6345: IFFALSE 6458
// repeat wait ( 0 0$01 ) ;
6347: LD_INT 35
6349: PPUSH
6350: CALL_OW 67
// until ( cyrus_saved and bobby_saved ) or ( cyrus_saved and ( not bobby_in_squad or IsDying ( Bobby ) or IsDead ( Bobby ) ) ) or ( bobby_saved and ( not cyrus_in_squad or IsDying ( Cyrus ) or IsDead ( Cyrus ) ) ) or ( IsDead ( Bobby ) and IsDead ( Cyrus ) ) ;
6354: LD_EXP 13
6358: PUSH
6359: LD_EXP 12
6363: AND
6364: PUSH
6365: LD_EXP 13
6369: PUSH
6370: LD_EXP 4
6374: NOT
6375: PUSH
6376: LD_EXP 17
6380: PPUSH
6381: CALL_OW 303
6385: OR
6386: PUSH
6387: LD_EXP 17
6391: PPUSH
6392: CALL_OW 301
6396: OR
6397: AND
6398: OR
6399: PUSH
6400: LD_EXP 12
6404: PUSH
6405: LD_EXP 7
6409: NOT
6410: PUSH
6411: LD_EXP 18
6415: PPUSH
6416: CALL_OW 303
6420: OR
6421: PUSH
6422: LD_EXP 18
6426: PPUSH
6427: CALL_OW 301
6431: OR
6432: AND
6433: OR
6434: PUSH
6435: LD_EXP 17
6439: PPUSH
6440: CALL_OW 301
6444: PUSH
6445: LD_EXP 18
6449: PPUSH
6450: CALL_OW 301
6454: AND
6455: OR
6456: IFFALSE 6347
// SaveVariable ( GetLives ( JMM ) , 01_JMMLifePoints_1 ) ;
6458: LD_EXP 16
6462: PPUSH
6463: CALL_OW 256
6467: PPUSH
6468: LD_STRING 01_JMMLifePoints_1
6470: PPUSH
6471: CALL_OW 39
// RemoveUnit ( JMM ) ;
6475: LD_EXP 16
6479: PPUSH
6480: CALL_OW 64
// to_reward := [ JMM ] ;
6484: LD_ADDR_VAR 0 2
6488: PUSH
6489: LD_EXP 16
6493: PUSH
6494: EMPTY
6495: LIST
6496: ST_TO_ADDR
// if bobby_saved then
6497: LD_EXP 12
6501: IFFALSE 6519
// to_reward := to_reward ^ Bobby ;
6503: LD_ADDR_VAR 0 2
6507: PUSH
6508: LD_VAR 0 2
6512: PUSH
6513: LD_EXP 17
6517: ADD
6518: ST_TO_ADDR
// if cyrus_saved then
6519: LD_EXP 13
6523: IFFALSE 6541
// to_reward := to_reward ^ Cyrus ;
6525: LD_ADDR_VAR 0 2
6529: PUSH
6530: LD_VAR 0 2
6534: PUSH
6535: LD_EXP 18
6539: ADD
6540: ST_TO_ADDR
// m1 := true ;
6541: LD_ADDR_VAR 0 4
6545: PUSH
6546: LD_INT 1
6548: ST_TO_ADDR
// m2 := bobby_saved ;
6549: LD_ADDR_VAR 0 5
6553: PUSH
6554: LD_EXP 12
6558: ST_TO_ADDR
// m3 := cyrus_saved ;
6559: LD_ADDR_VAR 0 6
6563: PUSH
6564: LD_EXP 13
6568: ST_TO_ADDR
// AddMedal ( JMM , 1 ) ;
6569: LD_STRING JMM
6571: PPUSH
6572: LD_INT 1
6574: PPUSH
6575: CALL_OW 101
// if not bobby_in_squad then
6579: LD_EXP 4
6583: NOT
6584: IFFALSE 6597
// AddMedal ( Bobby , - 1 ) ;
6586: LD_STRING Bobby
6588: PPUSH
6589: LD_INT 1
6591: NEG
6592: PPUSH
6593: CALL_OW 101
// if not bobby_saved and ( IsDying ( Bobby ) or IsDead ( Bobby ) ) then
6597: LD_EXP 12
6601: NOT
6602: PUSH
6603: LD_EXP 17
6607: PPUSH
6608: CALL_OW 303
6612: PUSH
6613: LD_EXP 17
6617: PPUSH
6618: CALL_OW 301
6622: OR
6623: AND
6624: IFFALSE 6637
// AddMedal ( Bobby , - 2 ) ;
6626: LD_STRING Bobby
6628: PPUSH
6629: LD_INT 2
6631: NEG
6632: PPUSH
6633: CALL_OW 101
// if not cyrus_in_squad then
6637: LD_EXP 7
6641: NOT
6642: IFFALSE 6655
// AddMedal ( Cyrus , - 1 ) ;
6644: LD_STRING Cyrus
6646: PPUSH
6647: LD_INT 1
6649: NEG
6650: PPUSH
6651: CALL_OW 101
// if not cyrus_saved and ( IsDying ( Cyrus ) or IsDead ( Cyrus ) ) then
6655: LD_EXP 13
6659: NOT
6660: PUSH
6661: LD_EXP 18
6665: PPUSH
6666: CALL_OW 303
6670: PUSH
6671: LD_EXP 18
6675: PPUSH
6676: CALL_OW 301
6680: OR
6681: AND
6682: IFFALSE 6695
// AddMedal ( Cyrus , - 2 ) ;
6684: LD_STRING Cyrus
6686: PPUSH
6687: LD_INT 2
6689: NEG
6690: PPUSH
6691: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 and m3 then
6695: LD_OWVAR 67
6699: PUSH
6700: LD_INT 3
6702: GREATEREQUAL
6703: PUSH
6704: LD_VAR 0 4
6708: AND
6709: PUSH
6710: LD_VAR 0 5
6714: AND
6715: PUSH
6716: LD_VAR 0 6
6720: AND
6721: IFFALSE 6733
// SetAchievementEX ( ACH_AMER , 1 ) ;
6723: LD_STRING ACH_AMER
6725: PPUSH
6726: LD_INT 1
6728: PPUSH
6729: CALL_OW 564
// GiveMedals ( MAIN ) ;
6733: LD_STRING MAIN
6735: PPUSH
6736: CALL_OW 102
// RewardPeople ( to_reward ) ;
6740: LD_VAR 0 2
6744: PPUSH
6745: CALL_OW 43
// if bobby_saved then
6749: LD_EXP 12
6753: IFFALSE 6773
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
6755: LD_EXP 17
6759: PPUSH
6760: LD_EXP 2
6764: PUSH
6765: LD_STRING Bobby
6767: STR
6768: PPUSH
6769: CALL_OW 38
// if cyrus_saved then
6773: LD_EXP 13
6777: IFFALSE 6797
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
6779: LD_EXP 18
6783: PPUSH
6784: LD_EXP 2
6788: PUSH
6789: LD_STRING Cyrus
6791: STR
6792: PPUSH
6793: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
6797: LD_EXP 16
6801: PPUSH
6802: LD_EXP 2
6806: PUSH
6807: LD_STRING JMM
6809: STR
6810: PPUSH
6811: CALL_OW 38
// if tick <= 3 3$00 then
6815: LD_OWVAR 1
6819: PUSH
6820: LD_INT 6300
6822: LESSEQUAL
6823: IFFALSE 6832
// SetAchievement ( ACH_ASPEED_1 ) ;
6825: LD_STRING ACH_ASPEED_1
6827: PPUSH
6828: CALL_OW 543
// ToLua ( enableBioCharacter(BIO_JMM) ) ;
6832: LD_STRING enableBioCharacter(BIO_JMM)
6834: PPUSH
6835: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_JOAN) ) ;
6839: LD_STRING enableBioCharacter(BIO_JOAN)
6841: PPUSH
6842: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_BARN) ) ;
6846: LD_STRING enableBioCharacter(BIO_BARN)
6848: PPUSH
6849: CALL_OW 559
// YouWin ;
6853: CALL_OW 103
// end ; end_of_file
6857: PPOPN 6
6859: END
// on UnitGoesToRed ( un ) do begin if un = JMM then
6860: LD_VAR 0 1
6864: PUSH
6865: LD_EXP 16
6869: EQUAL
6870: IFFALSE 6879
// YouLost ( JMM ) ;
6872: LD_STRING JMM
6874: PPUSH
6875: CALL_OW 104
// end ;
6879: PPOPN 1
6881: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
6882: LD_VAR 0 1
6886: PPUSH
6887: LD_VAR 0 2
6891: PPUSH
6892: CALL 22987 0 2
// end ;
6896: PPOPN 2
6898: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do var i ;
6899: LD_INT 0
6901: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) and killerSide = 1 then
6902: LD_VAR 0 1
6906: PUSH
6907: LD_INT 22
6909: PUSH
6910: LD_INT 1
6912: PUSH
6913: EMPTY
6914: LIST
6915: LIST
6916: PUSH
6917: LD_INT 23
6919: PUSH
6920: LD_INT 1
6922: PUSH
6923: EMPTY
6924: LIST
6925: LIST
6926: PUSH
6927: LD_INT 21
6929: PUSH
6930: LD_INT 1
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: PUSH
6937: EMPTY
6938: LIST
6939: LIST
6940: LIST
6941: PPUSH
6942: CALL_OW 69
6946: IN
6947: PUSH
6948: LD_VAR 0 2
6952: PUSH
6953: LD_INT 1
6955: EQUAL
6956: AND
6957: IFFALSE 7014
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_soldier ] ] ) do
6959: LD_ADDR_VAR 0 4
6963: PUSH
6964: LD_INT 22
6966: PUSH
6967: LD_INT 3
6969: PUSH
6970: EMPTY
6971: LIST
6972: LIST
6973: PUSH
6974: LD_INT 25
6976: PUSH
6977: LD_INT 1
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: PUSH
6984: EMPTY
6985: LIST
6986: LIST
6987: PPUSH
6988: CALL_OW 69
6992: PUSH
6993: FOR_IN
6994: IFFALSE 7012
// ComAttackUnit ( i , JMM ) ;
6996: LD_VAR 0 4
7000: PPUSH
7001: LD_EXP 16
7005: PPUSH
7006: CALL_OW 115
7010: GO 6993
7012: POP
7013: POP
// end ;
7014: PPOPN 4
7016: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
7017: LD_VAR 0 1
7021: PPUSH
7022: CALL 22867 0 1
// if un = JMM then
7026: LD_VAR 0 1
7030: PUSH
7031: LD_EXP 16
7035: EQUAL
7036: IFFALSE 7045
// YouLost ( JMM ) ;
7038: LD_STRING JMM
7040: PPUSH
7041: CALL_OW 104
// end ; end_of_file end_of_file
7045: PPOPN 1
7047: END
// export globalGameSaveCounter ; every 0 0$1 do
7048: GO 7050
7050: DISABLE
// begin enable ;
7051: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
7052: LD_STRING updateTimer(
7054: PUSH
7055: LD_OWVAR 1
7059: STR
7060: PUSH
7061: LD_STRING );
7063: STR
7064: PPUSH
7065: CALL_OW 559
// end ;
7069: END
// every 0 0$1 do
7070: GO 7072
7072: DISABLE
// begin globalGameSaveCounter := 0 ;
7073: LD_ADDR_EXP 28
7077: PUSH
7078: LD_INT 0
7080: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
7081: LD_STRING setGameSaveCounter(0)
7083: PPUSH
7084: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
7088: LD_STRING initStreamRollete();
7090: PPUSH
7091: CALL_OW 559
// InitStreamMode ;
7095: CALL 8438 0 0
// DefineStreamItems ( false ) ;
7099: LD_INT 0
7101: PPUSH
7102: CALL 8902 0 1
// end ;
7106: END
// export function SOS_MapStart ( ) ; begin
7107: LD_INT 0
7109: PPUSH
// if streamModeActive then
7110: LD_EXP 29
7114: IFFALSE 7123
// DefineStreamItems ( true ) ;
7116: LD_INT 1
7118: PPUSH
7119: CALL 8902 0 1
// UpdateLuaVariables ( ) ;
7123: CALL 7140 0 0
// UpdateFactoryWaypoints ( ) ;
7127: CALL 21771 0 0
// UpdateWarehouseGatheringPoints ( ) ;
7131: CALL 22028 0 0
// end ;
7135: LD_VAR 0 1
7139: RET
// function UpdateLuaVariables ( ) ; begin
7140: LD_INT 0
7142: PPUSH
// if globalGameSaveCounter then
7143: LD_EXP 28
7147: IFFALSE 7181
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
7149: LD_ADDR_EXP 28
7153: PUSH
7154: LD_EXP 28
7158: PPUSH
7159: CALL 66813 0 1
7163: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
7164: LD_STRING setGameSaveCounter(
7166: PUSH
7167: LD_EXP 28
7171: STR
7172: PUSH
7173: LD_STRING )
7175: STR
7176: PPUSH
7177: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
7181: LD_STRING setGameDifficulty(
7183: PUSH
7184: LD_OWVAR 67
7188: STR
7189: PUSH
7190: LD_STRING )
7192: STR
7193: PPUSH
7194: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
7198: LD_STRING displayDifficulty(
7200: PUSH
7201: LD_OWVAR 67
7205: STR
7206: PUSH
7207: LD_STRING )
7209: STR
7210: PPUSH
7211: CALL_OW 559
// end ;
7215: LD_VAR 0 1
7219: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7220: LD_INT 0
7222: PPUSH
// if p2 = stream_mode then
7223: LD_VAR 0 2
7227: PUSH
7228: LD_INT 100
7230: EQUAL
7231: IFFALSE 8234
// begin if not StreamModeActive then
7233: LD_EXP 29
7237: NOT
7238: IFFALSE 7248
// StreamModeActive := true ;
7240: LD_ADDR_EXP 29
7244: PUSH
7245: LD_INT 1
7247: ST_TO_ADDR
// if p3 = 0 then
7248: LD_VAR 0 3
7252: PUSH
7253: LD_INT 0
7255: EQUAL
7256: IFFALSE 7262
// InitStreamMode ;
7258: CALL 8438 0 0
// if p3 = 1 then
7262: LD_VAR 0 3
7266: PUSH
7267: LD_INT 1
7269: EQUAL
7270: IFFALSE 7280
// sRocket := true ;
7272: LD_ADDR_EXP 34
7276: PUSH
7277: LD_INT 1
7279: ST_TO_ADDR
// if p3 = 2 then
7280: LD_VAR 0 3
7284: PUSH
7285: LD_INT 2
7287: EQUAL
7288: IFFALSE 7298
// sSpeed := true ;
7290: LD_ADDR_EXP 33
7294: PUSH
7295: LD_INT 1
7297: ST_TO_ADDR
// if p3 = 3 then
7298: LD_VAR 0 3
7302: PUSH
7303: LD_INT 3
7305: EQUAL
7306: IFFALSE 7316
// sEngine := true ;
7308: LD_ADDR_EXP 35
7312: PUSH
7313: LD_INT 1
7315: ST_TO_ADDR
// if p3 = 4 then
7316: LD_VAR 0 3
7320: PUSH
7321: LD_INT 4
7323: EQUAL
7324: IFFALSE 7334
// sSpec := true ;
7326: LD_ADDR_EXP 32
7330: PUSH
7331: LD_INT 1
7333: ST_TO_ADDR
// if p3 = 5 then
7334: LD_VAR 0 3
7338: PUSH
7339: LD_INT 5
7341: EQUAL
7342: IFFALSE 7352
// sLevel := true ;
7344: LD_ADDR_EXP 36
7348: PUSH
7349: LD_INT 1
7351: ST_TO_ADDR
// if p3 = 6 then
7352: LD_VAR 0 3
7356: PUSH
7357: LD_INT 6
7359: EQUAL
7360: IFFALSE 7370
// sArmoury := true ;
7362: LD_ADDR_EXP 37
7366: PUSH
7367: LD_INT 1
7369: ST_TO_ADDR
// if p3 = 7 then
7370: LD_VAR 0 3
7374: PUSH
7375: LD_INT 7
7377: EQUAL
7378: IFFALSE 7388
// sRadar := true ;
7380: LD_ADDR_EXP 38
7384: PUSH
7385: LD_INT 1
7387: ST_TO_ADDR
// if p3 = 8 then
7388: LD_VAR 0 3
7392: PUSH
7393: LD_INT 8
7395: EQUAL
7396: IFFALSE 7406
// sBunker := true ;
7398: LD_ADDR_EXP 39
7402: PUSH
7403: LD_INT 1
7405: ST_TO_ADDR
// if p3 = 9 then
7406: LD_VAR 0 3
7410: PUSH
7411: LD_INT 9
7413: EQUAL
7414: IFFALSE 7424
// sHack := true ;
7416: LD_ADDR_EXP 40
7420: PUSH
7421: LD_INT 1
7423: ST_TO_ADDR
// if p3 = 10 then
7424: LD_VAR 0 3
7428: PUSH
7429: LD_INT 10
7431: EQUAL
7432: IFFALSE 7442
// sFire := true ;
7434: LD_ADDR_EXP 41
7438: PUSH
7439: LD_INT 1
7441: ST_TO_ADDR
// if p3 = 11 then
7442: LD_VAR 0 3
7446: PUSH
7447: LD_INT 11
7449: EQUAL
7450: IFFALSE 7460
// sRefresh := true ;
7452: LD_ADDR_EXP 42
7456: PUSH
7457: LD_INT 1
7459: ST_TO_ADDR
// if p3 = 12 then
7460: LD_VAR 0 3
7464: PUSH
7465: LD_INT 12
7467: EQUAL
7468: IFFALSE 7478
// sExp := true ;
7470: LD_ADDR_EXP 43
7474: PUSH
7475: LD_INT 1
7477: ST_TO_ADDR
// if p3 = 13 then
7478: LD_VAR 0 3
7482: PUSH
7483: LD_INT 13
7485: EQUAL
7486: IFFALSE 7496
// sDepot := true ;
7488: LD_ADDR_EXP 44
7492: PUSH
7493: LD_INT 1
7495: ST_TO_ADDR
// if p3 = 14 then
7496: LD_VAR 0 3
7500: PUSH
7501: LD_INT 14
7503: EQUAL
7504: IFFALSE 7514
// sFlag := true ;
7506: LD_ADDR_EXP 45
7510: PUSH
7511: LD_INT 1
7513: ST_TO_ADDR
// if p3 = 15 then
7514: LD_VAR 0 3
7518: PUSH
7519: LD_INT 15
7521: EQUAL
7522: IFFALSE 7532
// sKamikadze := true ;
7524: LD_ADDR_EXP 53
7528: PUSH
7529: LD_INT 1
7531: ST_TO_ADDR
// if p3 = 16 then
7532: LD_VAR 0 3
7536: PUSH
7537: LD_INT 16
7539: EQUAL
7540: IFFALSE 7550
// sTroll := true ;
7542: LD_ADDR_EXP 54
7546: PUSH
7547: LD_INT 1
7549: ST_TO_ADDR
// if p3 = 17 then
7550: LD_VAR 0 3
7554: PUSH
7555: LD_INT 17
7557: EQUAL
7558: IFFALSE 7568
// sSlow := true ;
7560: LD_ADDR_EXP 55
7564: PUSH
7565: LD_INT 1
7567: ST_TO_ADDR
// if p3 = 18 then
7568: LD_VAR 0 3
7572: PUSH
7573: LD_INT 18
7575: EQUAL
7576: IFFALSE 7586
// sLack := true ;
7578: LD_ADDR_EXP 56
7582: PUSH
7583: LD_INT 1
7585: ST_TO_ADDR
// if p3 = 19 then
7586: LD_VAR 0 3
7590: PUSH
7591: LD_INT 19
7593: EQUAL
7594: IFFALSE 7604
// sTank := true ;
7596: LD_ADDR_EXP 58
7600: PUSH
7601: LD_INT 1
7603: ST_TO_ADDR
// if p3 = 20 then
7604: LD_VAR 0 3
7608: PUSH
7609: LD_INT 20
7611: EQUAL
7612: IFFALSE 7622
// sRemote := true ;
7614: LD_ADDR_EXP 59
7618: PUSH
7619: LD_INT 1
7621: ST_TO_ADDR
// if p3 = 21 then
7622: LD_VAR 0 3
7626: PUSH
7627: LD_INT 21
7629: EQUAL
7630: IFFALSE 7640
// sPowell := true ;
7632: LD_ADDR_EXP 60
7636: PUSH
7637: LD_INT 1
7639: ST_TO_ADDR
// if p3 = 22 then
7640: LD_VAR 0 3
7644: PUSH
7645: LD_INT 22
7647: EQUAL
7648: IFFALSE 7658
// sTeleport := true ;
7650: LD_ADDR_EXP 63
7654: PUSH
7655: LD_INT 1
7657: ST_TO_ADDR
// if p3 = 23 then
7658: LD_VAR 0 3
7662: PUSH
7663: LD_INT 23
7665: EQUAL
7666: IFFALSE 7676
// sOilTower := true ;
7668: LD_ADDR_EXP 65
7672: PUSH
7673: LD_INT 1
7675: ST_TO_ADDR
// if p3 = 24 then
7676: LD_VAR 0 3
7680: PUSH
7681: LD_INT 24
7683: EQUAL
7684: IFFALSE 7694
// sShovel := true ;
7686: LD_ADDR_EXP 66
7690: PUSH
7691: LD_INT 1
7693: ST_TO_ADDR
// if p3 = 25 then
7694: LD_VAR 0 3
7698: PUSH
7699: LD_INT 25
7701: EQUAL
7702: IFFALSE 7712
// sSheik := true ;
7704: LD_ADDR_EXP 67
7708: PUSH
7709: LD_INT 1
7711: ST_TO_ADDR
// if p3 = 26 then
7712: LD_VAR 0 3
7716: PUSH
7717: LD_INT 26
7719: EQUAL
7720: IFFALSE 7730
// sEarthquake := true ;
7722: LD_ADDR_EXP 69
7726: PUSH
7727: LD_INT 1
7729: ST_TO_ADDR
// if p3 = 27 then
7730: LD_VAR 0 3
7734: PUSH
7735: LD_INT 27
7737: EQUAL
7738: IFFALSE 7748
// sAI := true ;
7740: LD_ADDR_EXP 70
7744: PUSH
7745: LD_INT 1
7747: ST_TO_ADDR
// if p3 = 28 then
7748: LD_VAR 0 3
7752: PUSH
7753: LD_INT 28
7755: EQUAL
7756: IFFALSE 7766
// sCargo := true ;
7758: LD_ADDR_EXP 73
7762: PUSH
7763: LD_INT 1
7765: ST_TO_ADDR
// if p3 = 29 then
7766: LD_VAR 0 3
7770: PUSH
7771: LD_INT 29
7773: EQUAL
7774: IFFALSE 7784
// sDLaser := true ;
7776: LD_ADDR_EXP 74
7780: PUSH
7781: LD_INT 1
7783: ST_TO_ADDR
// if p3 = 30 then
7784: LD_VAR 0 3
7788: PUSH
7789: LD_INT 30
7791: EQUAL
7792: IFFALSE 7802
// sExchange := true ;
7794: LD_ADDR_EXP 75
7798: PUSH
7799: LD_INT 1
7801: ST_TO_ADDR
// if p3 = 31 then
7802: LD_VAR 0 3
7806: PUSH
7807: LD_INT 31
7809: EQUAL
7810: IFFALSE 7820
// sFac := true ;
7812: LD_ADDR_EXP 76
7816: PUSH
7817: LD_INT 1
7819: ST_TO_ADDR
// if p3 = 32 then
7820: LD_VAR 0 3
7824: PUSH
7825: LD_INT 32
7827: EQUAL
7828: IFFALSE 7838
// sPower := true ;
7830: LD_ADDR_EXP 77
7834: PUSH
7835: LD_INT 1
7837: ST_TO_ADDR
// if p3 = 33 then
7838: LD_VAR 0 3
7842: PUSH
7843: LD_INT 33
7845: EQUAL
7846: IFFALSE 7856
// sRandom := true ;
7848: LD_ADDR_EXP 78
7852: PUSH
7853: LD_INT 1
7855: ST_TO_ADDR
// if p3 = 34 then
7856: LD_VAR 0 3
7860: PUSH
7861: LD_INT 34
7863: EQUAL
7864: IFFALSE 7874
// sShield := true ;
7866: LD_ADDR_EXP 79
7870: PUSH
7871: LD_INT 1
7873: ST_TO_ADDR
// if p3 = 35 then
7874: LD_VAR 0 3
7878: PUSH
7879: LD_INT 35
7881: EQUAL
7882: IFFALSE 7892
// sTime := true ;
7884: LD_ADDR_EXP 80
7888: PUSH
7889: LD_INT 1
7891: ST_TO_ADDR
// if p3 = 36 then
7892: LD_VAR 0 3
7896: PUSH
7897: LD_INT 36
7899: EQUAL
7900: IFFALSE 7910
// sTools := true ;
7902: LD_ADDR_EXP 81
7906: PUSH
7907: LD_INT 1
7909: ST_TO_ADDR
// if p3 = 101 then
7910: LD_VAR 0 3
7914: PUSH
7915: LD_INT 101
7917: EQUAL
7918: IFFALSE 7928
// sSold := true ;
7920: LD_ADDR_EXP 46
7924: PUSH
7925: LD_INT 1
7927: ST_TO_ADDR
// if p3 = 102 then
7928: LD_VAR 0 3
7932: PUSH
7933: LD_INT 102
7935: EQUAL
7936: IFFALSE 7946
// sDiff := true ;
7938: LD_ADDR_EXP 47
7942: PUSH
7943: LD_INT 1
7945: ST_TO_ADDR
// if p3 = 103 then
7946: LD_VAR 0 3
7950: PUSH
7951: LD_INT 103
7953: EQUAL
7954: IFFALSE 7964
// sFog := true ;
7956: LD_ADDR_EXP 50
7960: PUSH
7961: LD_INT 1
7963: ST_TO_ADDR
// if p3 = 104 then
7964: LD_VAR 0 3
7968: PUSH
7969: LD_INT 104
7971: EQUAL
7972: IFFALSE 7982
// sReset := true ;
7974: LD_ADDR_EXP 51
7978: PUSH
7979: LD_INT 1
7981: ST_TO_ADDR
// if p3 = 105 then
7982: LD_VAR 0 3
7986: PUSH
7987: LD_INT 105
7989: EQUAL
7990: IFFALSE 8000
// sSun := true ;
7992: LD_ADDR_EXP 52
7996: PUSH
7997: LD_INT 1
7999: ST_TO_ADDR
// if p3 = 106 then
8000: LD_VAR 0 3
8004: PUSH
8005: LD_INT 106
8007: EQUAL
8008: IFFALSE 8018
// sTiger := true ;
8010: LD_ADDR_EXP 48
8014: PUSH
8015: LD_INT 1
8017: ST_TO_ADDR
// if p3 = 107 then
8018: LD_VAR 0 3
8022: PUSH
8023: LD_INT 107
8025: EQUAL
8026: IFFALSE 8036
// sBomb := true ;
8028: LD_ADDR_EXP 49
8032: PUSH
8033: LD_INT 1
8035: ST_TO_ADDR
// if p3 = 108 then
8036: LD_VAR 0 3
8040: PUSH
8041: LD_INT 108
8043: EQUAL
8044: IFFALSE 8054
// sWound := true ;
8046: LD_ADDR_EXP 57
8050: PUSH
8051: LD_INT 1
8053: ST_TO_ADDR
// if p3 = 109 then
8054: LD_VAR 0 3
8058: PUSH
8059: LD_INT 109
8061: EQUAL
8062: IFFALSE 8072
// sBetray := true ;
8064: LD_ADDR_EXP 61
8068: PUSH
8069: LD_INT 1
8071: ST_TO_ADDR
// if p3 = 110 then
8072: LD_VAR 0 3
8076: PUSH
8077: LD_INT 110
8079: EQUAL
8080: IFFALSE 8090
// sContamin := true ;
8082: LD_ADDR_EXP 62
8086: PUSH
8087: LD_INT 1
8089: ST_TO_ADDR
// if p3 = 111 then
8090: LD_VAR 0 3
8094: PUSH
8095: LD_INT 111
8097: EQUAL
8098: IFFALSE 8108
// sOil := true ;
8100: LD_ADDR_EXP 64
8104: PUSH
8105: LD_INT 1
8107: ST_TO_ADDR
// if p3 = 112 then
8108: LD_VAR 0 3
8112: PUSH
8113: LD_INT 112
8115: EQUAL
8116: IFFALSE 8126
// sStu := true ;
8118: LD_ADDR_EXP 68
8122: PUSH
8123: LD_INT 1
8125: ST_TO_ADDR
// if p3 = 113 then
8126: LD_VAR 0 3
8130: PUSH
8131: LD_INT 113
8133: EQUAL
8134: IFFALSE 8144
// sBazooka := true ;
8136: LD_ADDR_EXP 71
8140: PUSH
8141: LD_INT 1
8143: ST_TO_ADDR
// if p3 = 114 then
8144: LD_VAR 0 3
8148: PUSH
8149: LD_INT 114
8151: EQUAL
8152: IFFALSE 8162
// sMortar := true ;
8154: LD_ADDR_EXP 72
8158: PUSH
8159: LD_INT 1
8161: ST_TO_ADDR
// if p3 = 115 then
8162: LD_VAR 0 3
8166: PUSH
8167: LD_INT 115
8169: EQUAL
8170: IFFALSE 8180
// sRanger := true ;
8172: LD_ADDR_EXP 82
8176: PUSH
8177: LD_INT 1
8179: ST_TO_ADDR
// if p3 = 116 then
8180: LD_VAR 0 3
8184: PUSH
8185: LD_INT 116
8187: EQUAL
8188: IFFALSE 8198
// sComputer := true ;
8190: LD_ADDR_EXP 83
8194: PUSH
8195: LD_INT 1
8197: ST_TO_ADDR
// if p3 = 117 then
8198: LD_VAR 0 3
8202: PUSH
8203: LD_INT 117
8205: EQUAL
8206: IFFALSE 8216
// s30 := true ;
8208: LD_ADDR_EXP 84
8212: PUSH
8213: LD_INT 1
8215: ST_TO_ADDR
// if p3 = 118 then
8216: LD_VAR 0 3
8220: PUSH
8221: LD_INT 118
8223: EQUAL
8224: IFFALSE 8234
// s60 := true ;
8226: LD_ADDR_EXP 85
8230: PUSH
8231: LD_INT 1
8233: ST_TO_ADDR
// end ; if p2 = hack_mode then
8234: LD_VAR 0 2
8238: PUSH
8239: LD_INT 101
8241: EQUAL
8242: IFFALSE 8370
// begin case p3 of 1 :
8244: LD_VAR 0 3
8248: PUSH
8249: LD_INT 1
8251: DOUBLE
8252: EQUAL
8253: IFTRUE 8257
8255: GO 8264
8257: POP
// hHackUnlimitedResources ; 2 :
8258: CALL 20517 0 0
8262: GO 8370
8264: LD_INT 2
8266: DOUBLE
8267: EQUAL
8268: IFTRUE 8272
8270: GO 8279
8272: POP
// hHackSetLevel10 ; 3 :
8273: CALL 20650 0 0
8277: GO 8370
8279: LD_INT 3
8281: DOUBLE
8282: EQUAL
8283: IFTRUE 8287
8285: GO 8294
8287: POP
// hHackSetLevel10YourUnits ; 4 :
8288: CALL 20735 0 0
8292: GO 8370
8294: LD_INT 4
8296: DOUBLE
8297: EQUAL
8298: IFTRUE 8302
8300: GO 8309
8302: POP
// hHackInvincible ; 5 :
8303: CALL 21183 0 0
8307: GO 8370
8309: LD_INT 5
8311: DOUBLE
8312: EQUAL
8313: IFTRUE 8317
8315: GO 8324
8317: POP
// hHackInvisible ; 6 :
8318: CALL 21294 0 0
8322: GO 8370
8324: LD_INT 6
8326: DOUBLE
8327: EQUAL
8328: IFTRUE 8332
8330: GO 8339
8332: POP
// hHackChangeYourSide ; 7 :
8333: CALL 21351 0 0
8337: GO 8370
8339: LD_INT 7
8341: DOUBLE
8342: EQUAL
8343: IFTRUE 8347
8345: GO 8354
8347: POP
// hHackChangeUnitSide ; 8 :
8348: CALL 21393 0 0
8352: GO 8370
8354: LD_INT 8
8356: DOUBLE
8357: EQUAL
8358: IFTRUE 8362
8360: GO 8369
8362: POP
// hHackFog ; end ;
8363: CALL 21494 0 0
8367: GO 8370
8369: POP
// end ; if p2 = game_save_mode then
8370: LD_VAR 0 2
8374: PUSH
8375: LD_INT 102
8377: EQUAL
8378: IFFALSE 8433
// begin if p3 = 1 then
8380: LD_VAR 0 3
8384: PUSH
8385: LD_INT 1
8387: EQUAL
8388: IFFALSE 8400
// globalGameSaveCounter := p4 ;
8390: LD_ADDR_EXP 28
8394: PUSH
8395: LD_VAR 0 4
8399: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
8400: LD_VAR 0 3
8404: PUSH
8405: LD_INT 2
8407: EQUAL
8408: PUSH
8409: LD_EXP 28
8413: AND
8414: IFFALSE 8433
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
8416: LD_STRING setGameSaveCounter(
8418: PUSH
8419: LD_EXP 28
8423: STR
8424: PUSH
8425: LD_STRING )
8427: STR
8428: PPUSH
8429: CALL_OW 559
// end ; end ;
8433: LD_VAR 0 7
8437: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
8438: LD_INT 0
8440: PPUSH
// streamModeActive := false ;
8441: LD_ADDR_EXP 29
8445: PUSH
8446: LD_INT 0
8448: ST_TO_ADDR
// normalCounter := 36 ;
8449: LD_ADDR_EXP 30
8453: PUSH
8454: LD_INT 36
8456: ST_TO_ADDR
// hardcoreCounter := 18 ;
8457: LD_ADDR_EXP 31
8461: PUSH
8462: LD_INT 18
8464: ST_TO_ADDR
// sRocket := false ;
8465: LD_ADDR_EXP 34
8469: PUSH
8470: LD_INT 0
8472: ST_TO_ADDR
// sSpeed := false ;
8473: LD_ADDR_EXP 33
8477: PUSH
8478: LD_INT 0
8480: ST_TO_ADDR
// sEngine := false ;
8481: LD_ADDR_EXP 35
8485: PUSH
8486: LD_INT 0
8488: ST_TO_ADDR
// sSpec := false ;
8489: LD_ADDR_EXP 32
8493: PUSH
8494: LD_INT 0
8496: ST_TO_ADDR
// sLevel := false ;
8497: LD_ADDR_EXP 36
8501: PUSH
8502: LD_INT 0
8504: ST_TO_ADDR
// sArmoury := false ;
8505: LD_ADDR_EXP 37
8509: PUSH
8510: LD_INT 0
8512: ST_TO_ADDR
// sRadar := false ;
8513: LD_ADDR_EXP 38
8517: PUSH
8518: LD_INT 0
8520: ST_TO_ADDR
// sBunker := false ;
8521: LD_ADDR_EXP 39
8525: PUSH
8526: LD_INT 0
8528: ST_TO_ADDR
// sHack := false ;
8529: LD_ADDR_EXP 40
8533: PUSH
8534: LD_INT 0
8536: ST_TO_ADDR
// sFire := false ;
8537: LD_ADDR_EXP 41
8541: PUSH
8542: LD_INT 0
8544: ST_TO_ADDR
// sRefresh := false ;
8545: LD_ADDR_EXP 42
8549: PUSH
8550: LD_INT 0
8552: ST_TO_ADDR
// sExp := false ;
8553: LD_ADDR_EXP 43
8557: PUSH
8558: LD_INT 0
8560: ST_TO_ADDR
// sDepot := false ;
8561: LD_ADDR_EXP 44
8565: PUSH
8566: LD_INT 0
8568: ST_TO_ADDR
// sFlag := false ;
8569: LD_ADDR_EXP 45
8573: PUSH
8574: LD_INT 0
8576: ST_TO_ADDR
// sKamikadze := false ;
8577: LD_ADDR_EXP 53
8581: PUSH
8582: LD_INT 0
8584: ST_TO_ADDR
// sTroll := false ;
8585: LD_ADDR_EXP 54
8589: PUSH
8590: LD_INT 0
8592: ST_TO_ADDR
// sSlow := false ;
8593: LD_ADDR_EXP 55
8597: PUSH
8598: LD_INT 0
8600: ST_TO_ADDR
// sLack := false ;
8601: LD_ADDR_EXP 56
8605: PUSH
8606: LD_INT 0
8608: ST_TO_ADDR
// sTank := false ;
8609: LD_ADDR_EXP 58
8613: PUSH
8614: LD_INT 0
8616: ST_TO_ADDR
// sRemote := false ;
8617: LD_ADDR_EXP 59
8621: PUSH
8622: LD_INT 0
8624: ST_TO_ADDR
// sPowell := false ;
8625: LD_ADDR_EXP 60
8629: PUSH
8630: LD_INT 0
8632: ST_TO_ADDR
// sTeleport := false ;
8633: LD_ADDR_EXP 63
8637: PUSH
8638: LD_INT 0
8640: ST_TO_ADDR
// sOilTower := false ;
8641: LD_ADDR_EXP 65
8645: PUSH
8646: LD_INT 0
8648: ST_TO_ADDR
// sShovel := false ;
8649: LD_ADDR_EXP 66
8653: PUSH
8654: LD_INT 0
8656: ST_TO_ADDR
// sSheik := false ;
8657: LD_ADDR_EXP 67
8661: PUSH
8662: LD_INT 0
8664: ST_TO_ADDR
// sEarthquake := false ;
8665: LD_ADDR_EXP 69
8669: PUSH
8670: LD_INT 0
8672: ST_TO_ADDR
// sAI := false ;
8673: LD_ADDR_EXP 70
8677: PUSH
8678: LD_INT 0
8680: ST_TO_ADDR
// sCargo := false ;
8681: LD_ADDR_EXP 73
8685: PUSH
8686: LD_INT 0
8688: ST_TO_ADDR
// sDLaser := false ;
8689: LD_ADDR_EXP 74
8693: PUSH
8694: LD_INT 0
8696: ST_TO_ADDR
// sExchange := false ;
8697: LD_ADDR_EXP 75
8701: PUSH
8702: LD_INT 0
8704: ST_TO_ADDR
// sFac := false ;
8705: LD_ADDR_EXP 76
8709: PUSH
8710: LD_INT 0
8712: ST_TO_ADDR
// sPower := false ;
8713: LD_ADDR_EXP 77
8717: PUSH
8718: LD_INT 0
8720: ST_TO_ADDR
// sRandom := false ;
8721: LD_ADDR_EXP 78
8725: PUSH
8726: LD_INT 0
8728: ST_TO_ADDR
// sShield := false ;
8729: LD_ADDR_EXP 79
8733: PUSH
8734: LD_INT 0
8736: ST_TO_ADDR
// sTime := false ;
8737: LD_ADDR_EXP 80
8741: PUSH
8742: LD_INT 0
8744: ST_TO_ADDR
// sTools := false ;
8745: LD_ADDR_EXP 81
8749: PUSH
8750: LD_INT 0
8752: ST_TO_ADDR
// sSold := false ;
8753: LD_ADDR_EXP 46
8757: PUSH
8758: LD_INT 0
8760: ST_TO_ADDR
// sDiff := false ;
8761: LD_ADDR_EXP 47
8765: PUSH
8766: LD_INT 0
8768: ST_TO_ADDR
// sFog := false ;
8769: LD_ADDR_EXP 50
8773: PUSH
8774: LD_INT 0
8776: ST_TO_ADDR
// sReset := false ;
8777: LD_ADDR_EXP 51
8781: PUSH
8782: LD_INT 0
8784: ST_TO_ADDR
// sSun := false ;
8785: LD_ADDR_EXP 52
8789: PUSH
8790: LD_INT 0
8792: ST_TO_ADDR
// sTiger := false ;
8793: LD_ADDR_EXP 48
8797: PUSH
8798: LD_INT 0
8800: ST_TO_ADDR
// sBomb := false ;
8801: LD_ADDR_EXP 49
8805: PUSH
8806: LD_INT 0
8808: ST_TO_ADDR
// sWound := false ;
8809: LD_ADDR_EXP 57
8813: PUSH
8814: LD_INT 0
8816: ST_TO_ADDR
// sBetray := false ;
8817: LD_ADDR_EXP 61
8821: PUSH
8822: LD_INT 0
8824: ST_TO_ADDR
// sContamin := false ;
8825: LD_ADDR_EXP 62
8829: PUSH
8830: LD_INT 0
8832: ST_TO_ADDR
// sOil := false ;
8833: LD_ADDR_EXP 64
8837: PUSH
8838: LD_INT 0
8840: ST_TO_ADDR
// sStu := false ;
8841: LD_ADDR_EXP 68
8845: PUSH
8846: LD_INT 0
8848: ST_TO_ADDR
// sBazooka := false ;
8849: LD_ADDR_EXP 71
8853: PUSH
8854: LD_INT 0
8856: ST_TO_ADDR
// sMortar := false ;
8857: LD_ADDR_EXP 72
8861: PUSH
8862: LD_INT 0
8864: ST_TO_ADDR
// sRanger := false ;
8865: LD_ADDR_EXP 82
8869: PUSH
8870: LD_INT 0
8872: ST_TO_ADDR
// sComputer := false ;
8873: LD_ADDR_EXP 83
8877: PUSH
8878: LD_INT 0
8880: ST_TO_ADDR
// s30 := false ;
8881: LD_ADDR_EXP 84
8885: PUSH
8886: LD_INT 0
8888: ST_TO_ADDR
// s60 := false ;
8889: LD_ADDR_EXP 85
8893: PUSH
8894: LD_INT 0
8896: ST_TO_ADDR
// end ;
8897: LD_VAR 0 1
8901: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
8902: LD_INT 0
8904: PPUSH
8905: PPUSH
8906: PPUSH
8907: PPUSH
8908: PPUSH
8909: PPUSH
8910: PPUSH
// result := [ ] ;
8911: LD_ADDR_VAR 0 2
8915: PUSH
8916: EMPTY
8917: ST_TO_ADDR
// if campaign_id = 1 then
8918: LD_OWVAR 69
8922: PUSH
8923: LD_INT 1
8925: EQUAL
8926: IFFALSE 12092
// begin case mission_number of 1 :
8928: LD_OWVAR 70
8932: PUSH
8933: LD_INT 1
8935: DOUBLE
8936: EQUAL
8937: IFTRUE 8941
8939: GO 9017
8941: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
8942: LD_ADDR_VAR 0 2
8946: PUSH
8947: LD_INT 2
8949: PUSH
8950: LD_INT 4
8952: PUSH
8953: LD_INT 11
8955: PUSH
8956: LD_INT 12
8958: PUSH
8959: LD_INT 15
8961: PUSH
8962: LD_INT 16
8964: PUSH
8965: LD_INT 22
8967: PUSH
8968: LD_INT 23
8970: PUSH
8971: LD_INT 26
8973: PUSH
8974: EMPTY
8975: LIST
8976: LIST
8977: LIST
8978: LIST
8979: LIST
8980: LIST
8981: LIST
8982: LIST
8983: LIST
8984: PUSH
8985: LD_INT 101
8987: PUSH
8988: LD_INT 102
8990: PUSH
8991: LD_INT 106
8993: PUSH
8994: LD_INT 116
8996: PUSH
8997: LD_INT 117
8999: PUSH
9000: LD_INT 118
9002: PUSH
9003: EMPTY
9004: LIST
9005: LIST
9006: LIST
9007: LIST
9008: LIST
9009: LIST
9010: PUSH
9011: EMPTY
9012: LIST
9013: LIST
9014: ST_TO_ADDR
9015: GO 12090
9017: LD_INT 2
9019: DOUBLE
9020: EQUAL
9021: IFTRUE 9025
9023: GO 9109
9025: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9026: LD_ADDR_VAR 0 2
9030: PUSH
9031: LD_INT 2
9033: PUSH
9034: LD_INT 4
9036: PUSH
9037: LD_INT 11
9039: PUSH
9040: LD_INT 12
9042: PUSH
9043: LD_INT 15
9045: PUSH
9046: LD_INT 16
9048: PUSH
9049: LD_INT 22
9051: PUSH
9052: LD_INT 23
9054: PUSH
9055: LD_INT 26
9057: PUSH
9058: EMPTY
9059: LIST
9060: LIST
9061: LIST
9062: LIST
9063: LIST
9064: LIST
9065: LIST
9066: LIST
9067: LIST
9068: PUSH
9069: LD_INT 101
9071: PUSH
9072: LD_INT 102
9074: PUSH
9075: LD_INT 105
9077: PUSH
9078: LD_INT 106
9080: PUSH
9081: LD_INT 108
9083: PUSH
9084: LD_INT 116
9086: PUSH
9087: LD_INT 117
9089: PUSH
9090: LD_INT 118
9092: PUSH
9093: EMPTY
9094: LIST
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: LIST
9100: LIST
9101: LIST
9102: PUSH
9103: EMPTY
9104: LIST
9105: LIST
9106: ST_TO_ADDR
9107: GO 12090
9109: LD_INT 3
9111: DOUBLE
9112: EQUAL
9113: IFTRUE 9117
9115: GO 9205
9117: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9118: LD_ADDR_VAR 0 2
9122: PUSH
9123: LD_INT 2
9125: PUSH
9126: LD_INT 4
9128: PUSH
9129: LD_INT 5
9131: PUSH
9132: LD_INT 11
9134: PUSH
9135: LD_INT 12
9137: PUSH
9138: LD_INT 15
9140: PUSH
9141: LD_INT 16
9143: PUSH
9144: LD_INT 22
9146: PUSH
9147: LD_INT 26
9149: PUSH
9150: LD_INT 36
9152: PUSH
9153: EMPTY
9154: LIST
9155: LIST
9156: LIST
9157: LIST
9158: LIST
9159: LIST
9160: LIST
9161: LIST
9162: LIST
9163: LIST
9164: PUSH
9165: LD_INT 101
9167: PUSH
9168: LD_INT 102
9170: PUSH
9171: LD_INT 105
9173: PUSH
9174: LD_INT 106
9176: PUSH
9177: LD_INT 108
9179: PUSH
9180: LD_INT 116
9182: PUSH
9183: LD_INT 117
9185: PUSH
9186: LD_INT 118
9188: PUSH
9189: EMPTY
9190: LIST
9191: LIST
9192: LIST
9193: LIST
9194: LIST
9195: LIST
9196: LIST
9197: LIST
9198: PUSH
9199: EMPTY
9200: LIST
9201: LIST
9202: ST_TO_ADDR
9203: GO 12090
9205: LD_INT 4
9207: DOUBLE
9208: EQUAL
9209: IFTRUE 9213
9211: GO 9309
9213: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9214: LD_ADDR_VAR 0 2
9218: PUSH
9219: LD_INT 2
9221: PUSH
9222: LD_INT 4
9224: PUSH
9225: LD_INT 5
9227: PUSH
9228: LD_INT 8
9230: PUSH
9231: LD_INT 11
9233: PUSH
9234: LD_INT 12
9236: PUSH
9237: LD_INT 15
9239: PUSH
9240: LD_INT 16
9242: PUSH
9243: LD_INT 22
9245: PUSH
9246: LD_INT 23
9248: PUSH
9249: LD_INT 26
9251: PUSH
9252: LD_INT 36
9254: PUSH
9255: EMPTY
9256: LIST
9257: LIST
9258: LIST
9259: LIST
9260: LIST
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: PUSH
9269: LD_INT 101
9271: PUSH
9272: LD_INT 102
9274: PUSH
9275: LD_INT 105
9277: PUSH
9278: LD_INT 106
9280: PUSH
9281: LD_INT 108
9283: PUSH
9284: LD_INT 116
9286: PUSH
9287: LD_INT 117
9289: PUSH
9290: LD_INT 118
9292: PUSH
9293: EMPTY
9294: LIST
9295: LIST
9296: LIST
9297: LIST
9298: LIST
9299: LIST
9300: LIST
9301: LIST
9302: PUSH
9303: EMPTY
9304: LIST
9305: LIST
9306: ST_TO_ADDR
9307: GO 12090
9309: LD_INT 5
9311: DOUBLE
9312: EQUAL
9313: IFTRUE 9317
9315: GO 9429
9317: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9318: LD_ADDR_VAR 0 2
9322: PUSH
9323: LD_INT 2
9325: PUSH
9326: LD_INT 4
9328: PUSH
9329: LD_INT 5
9331: PUSH
9332: LD_INT 6
9334: PUSH
9335: LD_INT 8
9337: PUSH
9338: LD_INT 11
9340: PUSH
9341: LD_INT 12
9343: PUSH
9344: LD_INT 15
9346: PUSH
9347: LD_INT 16
9349: PUSH
9350: LD_INT 22
9352: PUSH
9353: LD_INT 23
9355: PUSH
9356: LD_INT 25
9358: PUSH
9359: LD_INT 26
9361: PUSH
9362: LD_INT 36
9364: PUSH
9365: EMPTY
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: PUSH
9381: LD_INT 101
9383: PUSH
9384: LD_INT 102
9386: PUSH
9387: LD_INT 105
9389: PUSH
9390: LD_INT 106
9392: PUSH
9393: LD_INT 108
9395: PUSH
9396: LD_INT 109
9398: PUSH
9399: LD_INT 112
9401: PUSH
9402: LD_INT 116
9404: PUSH
9405: LD_INT 117
9407: PUSH
9408: LD_INT 118
9410: PUSH
9411: EMPTY
9412: LIST
9413: LIST
9414: LIST
9415: LIST
9416: LIST
9417: LIST
9418: LIST
9419: LIST
9420: LIST
9421: LIST
9422: PUSH
9423: EMPTY
9424: LIST
9425: LIST
9426: ST_TO_ADDR
9427: GO 12090
9429: LD_INT 6
9431: DOUBLE
9432: EQUAL
9433: IFTRUE 9437
9435: GO 9569
9437: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
9438: LD_ADDR_VAR 0 2
9442: PUSH
9443: LD_INT 2
9445: PUSH
9446: LD_INT 4
9448: PUSH
9449: LD_INT 5
9451: PUSH
9452: LD_INT 6
9454: PUSH
9455: LD_INT 8
9457: PUSH
9458: LD_INT 11
9460: PUSH
9461: LD_INT 12
9463: PUSH
9464: LD_INT 15
9466: PUSH
9467: LD_INT 16
9469: PUSH
9470: LD_INT 20
9472: PUSH
9473: LD_INT 21
9475: PUSH
9476: LD_INT 22
9478: PUSH
9479: LD_INT 23
9481: PUSH
9482: LD_INT 25
9484: PUSH
9485: LD_INT 26
9487: PUSH
9488: LD_INT 30
9490: PUSH
9491: LD_INT 31
9493: PUSH
9494: LD_INT 32
9496: PUSH
9497: LD_INT 36
9499: PUSH
9500: EMPTY
9501: LIST
9502: LIST
9503: LIST
9504: LIST
9505: LIST
9506: LIST
9507: LIST
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: LIST
9513: LIST
9514: LIST
9515: LIST
9516: LIST
9517: LIST
9518: LIST
9519: LIST
9520: PUSH
9521: LD_INT 101
9523: PUSH
9524: LD_INT 102
9526: PUSH
9527: LD_INT 105
9529: PUSH
9530: LD_INT 106
9532: PUSH
9533: LD_INT 108
9535: PUSH
9536: LD_INT 109
9538: PUSH
9539: LD_INT 112
9541: PUSH
9542: LD_INT 116
9544: PUSH
9545: LD_INT 117
9547: PUSH
9548: LD_INT 118
9550: PUSH
9551: EMPTY
9552: LIST
9553: LIST
9554: LIST
9555: LIST
9556: LIST
9557: LIST
9558: LIST
9559: LIST
9560: LIST
9561: LIST
9562: PUSH
9563: EMPTY
9564: LIST
9565: LIST
9566: ST_TO_ADDR
9567: GO 12090
9569: LD_INT 7
9571: DOUBLE
9572: EQUAL
9573: IFTRUE 9577
9575: GO 9689
9577: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
9578: LD_ADDR_VAR 0 2
9582: PUSH
9583: LD_INT 2
9585: PUSH
9586: LD_INT 4
9588: PUSH
9589: LD_INT 5
9591: PUSH
9592: LD_INT 7
9594: PUSH
9595: LD_INT 11
9597: PUSH
9598: LD_INT 12
9600: PUSH
9601: LD_INT 15
9603: PUSH
9604: LD_INT 16
9606: PUSH
9607: LD_INT 20
9609: PUSH
9610: LD_INT 21
9612: PUSH
9613: LD_INT 22
9615: PUSH
9616: LD_INT 23
9618: PUSH
9619: LD_INT 25
9621: PUSH
9622: LD_INT 26
9624: PUSH
9625: EMPTY
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: LIST
9631: LIST
9632: LIST
9633: LIST
9634: LIST
9635: LIST
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: PUSH
9641: LD_INT 101
9643: PUSH
9644: LD_INT 102
9646: PUSH
9647: LD_INT 103
9649: PUSH
9650: LD_INT 105
9652: PUSH
9653: LD_INT 106
9655: PUSH
9656: LD_INT 108
9658: PUSH
9659: LD_INT 112
9661: PUSH
9662: LD_INT 116
9664: PUSH
9665: LD_INT 117
9667: PUSH
9668: LD_INT 118
9670: PUSH
9671: EMPTY
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: PUSH
9683: EMPTY
9684: LIST
9685: LIST
9686: ST_TO_ADDR
9687: GO 12090
9689: LD_INT 8
9691: DOUBLE
9692: EQUAL
9693: IFTRUE 9697
9695: GO 9837
9697: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
9698: LD_ADDR_VAR 0 2
9702: PUSH
9703: LD_INT 2
9705: PUSH
9706: LD_INT 4
9708: PUSH
9709: LD_INT 5
9711: PUSH
9712: LD_INT 6
9714: PUSH
9715: LD_INT 7
9717: PUSH
9718: LD_INT 8
9720: PUSH
9721: LD_INT 11
9723: PUSH
9724: LD_INT 12
9726: PUSH
9727: LD_INT 15
9729: PUSH
9730: LD_INT 16
9732: PUSH
9733: LD_INT 20
9735: PUSH
9736: LD_INT 21
9738: PUSH
9739: LD_INT 22
9741: PUSH
9742: LD_INT 23
9744: PUSH
9745: LD_INT 25
9747: PUSH
9748: LD_INT 26
9750: PUSH
9751: LD_INT 30
9753: PUSH
9754: LD_INT 31
9756: PUSH
9757: LD_INT 32
9759: PUSH
9760: LD_INT 36
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: LIST
9782: LIST
9783: LIST
9784: PUSH
9785: LD_INT 101
9787: PUSH
9788: LD_INT 102
9790: PUSH
9791: LD_INT 103
9793: PUSH
9794: LD_INT 105
9796: PUSH
9797: LD_INT 106
9799: PUSH
9800: LD_INT 108
9802: PUSH
9803: LD_INT 109
9805: PUSH
9806: LD_INT 112
9808: PUSH
9809: LD_INT 116
9811: PUSH
9812: LD_INT 117
9814: PUSH
9815: LD_INT 118
9817: PUSH
9818: EMPTY
9819: LIST
9820: LIST
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: PUSH
9831: EMPTY
9832: LIST
9833: LIST
9834: ST_TO_ADDR
9835: GO 12090
9837: LD_INT 9
9839: DOUBLE
9840: EQUAL
9841: IFTRUE 9845
9843: GO 9993
9845: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
9846: LD_ADDR_VAR 0 2
9850: PUSH
9851: LD_INT 2
9853: PUSH
9854: LD_INT 4
9856: PUSH
9857: LD_INT 5
9859: PUSH
9860: LD_INT 6
9862: PUSH
9863: LD_INT 7
9865: PUSH
9866: LD_INT 8
9868: PUSH
9869: LD_INT 11
9871: PUSH
9872: LD_INT 12
9874: PUSH
9875: LD_INT 15
9877: PUSH
9878: LD_INT 16
9880: PUSH
9881: LD_INT 20
9883: PUSH
9884: LD_INT 21
9886: PUSH
9887: LD_INT 22
9889: PUSH
9890: LD_INT 23
9892: PUSH
9893: LD_INT 25
9895: PUSH
9896: LD_INT 26
9898: PUSH
9899: LD_INT 28
9901: PUSH
9902: LD_INT 30
9904: PUSH
9905: LD_INT 31
9907: PUSH
9908: LD_INT 32
9910: PUSH
9911: LD_INT 36
9913: PUSH
9914: EMPTY
9915: LIST
9916: LIST
9917: LIST
9918: LIST
9919: LIST
9920: LIST
9921: LIST
9922: LIST
9923: LIST
9924: LIST
9925: LIST
9926: LIST
9927: LIST
9928: LIST
9929: LIST
9930: LIST
9931: LIST
9932: LIST
9933: LIST
9934: LIST
9935: LIST
9936: PUSH
9937: LD_INT 101
9939: PUSH
9940: LD_INT 102
9942: PUSH
9943: LD_INT 103
9945: PUSH
9946: LD_INT 105
9948: PUSH
9949: LD_INT 106
9951: PUSH
9952: LD_INT 108
9954: PUSH
9955: LD_INT 109
9957: PUSH
9958: LD_INT 112
9960: PUSH
9961: LD_INT 114
9963: PUSH
9964: LD_INT 116
9966: PUSH
9967: LD_INT 117
9969: PUSH
9970: LD_INT 118
9972: PUSH
9973: EMPTY
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: LIST
9985: LIST
9986: PUSH
9987: EMPTY
9988: LIST
9989: LIST
9990: ST_TO_ADDR
9991: GO 12090
9993: LD_INT 10
9995: DOUBLE
9996: EQUAL
9997: IFTRUE 10001
9999: GO 10197
10001: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
10002: LD_ADDR_VAR 0 2
10006: PUSH
10007: LD_INT 2
10009: PUSH
10010: LD_INT 4
10012: PUSH
10013: LD_INT 5
10015: PUSH
10016: LD_INT 6
10018: PUSH
10019: LD_INT 7
10021: PUSH
10022: LD_INT 8
10024: PUSH
10025: LD_INT 9
10027: PUSH
10028: LD_INT 10
10030: PUSH
10031: LD_INT 11
10033: PUSH
10034: LD_INT 12
10036: PUSH
10037: LD_INT 13
10039: PUSH
10040: LD_INT 14
10042: PUSH
10043: LD_INT 15
10045: PUSH
10046: LD_INT 16
10048: PUSH
10049: LD_INT 17
10051: PUSH
10052: LD_INT 18
10054: PUSH
10055: LD_INT 19
10057: PUSH
10058: LD_INT 20
10060: PUSH
10061: LD_INT 21
10063: PUSH
10064: LD_INT 22
10066: PUSH
10067: LD_INT 23
10069: PUSH
10070: LD_INT 24
10072: PUSH
10073: LD_INT 25
10075: PUSH
10076: LD_INT 26
10078: PUSH
10079: LD_INT 28
10081: PUSH
10082: LD_INT 30
10084: PUSH
10085: LD_INT 31
10087: PUSH
10088: LD_INT 32
10090: PUSH
10091: LD_INT 36
10093: PUSH
10094: EMPTY
10095: LIST
10096: LIST
10097: LIST
10098: LIST
10099: LIST
10100: LIST
10101: LIST
10102: LIST
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: LIST
10120: LIST
10121: LIST
10122: LIST
10123: LIST
10124: PUSH
10125: LD_INT 101
10127: PUSH
10128: LD_INT 102
10130: PUSH
10131: LD_INT 103
10133: PUSH
10134: LD_INT 104
10136: PUSH
10137: LD_INT 105
10139: PUSH
10140: LD_INT 106
10142: PUSH
10143: LD_INT 107
10145: PUSH
10146: LD_INT 108
10148: PUSH
10149: LD_INT 109
10151: PUSH
10152: LD_INT 110
10154: PUSH
10155: LD_INT 111
10157: PUSH
10158: LD_INT 112
10160: PUSH
10161: LD_INT 114
10163: PUSH
10164: LD_INT 116
10166: PUSH
10167: LD_INT 117
10169: PUSH
10170: LD_INT 118
10172: PUSH
10173: EMPTY
10174: LIST
10175: LIST
10176: LIST
10177: LIST
10178: LIST
10179: LIST
10180: LIST
10181: LIST
10182: LIST
10183: LIST
10184: LIST
10185: LIST
10186: LIST
10187: LIST
10188: LIST
10189: LIST
10190: PUSH
10191: EMPTY
10192: LIST
10193: LIST
10194: ST_TO_ADDR
10195: GO 12090
10197: LD_INT 11
10199: DOUBLE
10200: EQUAL
10201: IFTRUE 10205
10203: GO 10409
10205: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10206: LD_ADDR_VAR 0 2
10210: PUSH
10211: LD_INT 2
10213: PUSH
10214: LD_INT 3
10216: PUSH
10217: LD_INT 4
10219: PUSH
10220: LD_INT 5
10222: PUSH
10223: LD_INT 6
10225: PUSH
10226: LD_INT 7
10228: PUSH
10229: LD_INT 8
10231: PUSH
10232: LD_INT 9
10234: PUSH
10235: LD_INT 10
10237: PUSH
10238: LD_INT 11
10240: PUSH
10241: LD_INT 12
10243: PUSH
10244: LD_INT 13
10246: PUSH
10247: LD_INT 14
10249: PUSH
10250: LD_INT 15
10252: PUSH
10253: LD_INT 16
10255: PUSH
10256: LD_INT 17
10258: PUSH
10259: LD_INT 18
10261: PUSH
10262: LD_INT 19
10264: PUSH
10265: LD_INT 20
10267: PUSH
10268: LD_INT 21
10270: PUSH
10271: LD_INT 22
10273: PUSH
10274: LD_INT 23
10276: PUSH
10277: LD_INT 24
10279: PUSH
10280: LD_INT 25
10282: PUSH
10283: LD_INT 26
10285: PUSH
10286: LD_INT 28
10288: PUSH
10289: LD_INT 30
10291: PUSH
10292: LD_INT 31
10294: PUSH
10295: LD_INT 32
10297: PUSH
10298: LD_INT 34
10300: PUSH
10301: LD_INT 36
10303: PUSH
10304: EMPTY
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: LIST
10316: LIST
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: LIST
10326: LIST
10327: LIST
10328: LIST
10329: LIST
10330: LIST
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: LIST
10336: PUSH
10337: LD_INT 101
10339: PUSH
10340: LD_INT 102
10342: PUSH
10343: LD_INT 103
10345: PUSH
10346: LD_INT 104
10348: PUSH
10349: LD_INT 105
10351: PUSH
10352: LD_INT 106
10354: PUSH
10355: LD_INT 107
10357: PUSH
10358: LD_INT 108
10360: PUSH
10361: LD_INT 109
10363: PUSH
10364: LD_INT 110
10366: PUSH
10367: LD_INT 111
10369: PUSH
10370: LD_INT 112
10372: PUSH
10373: LD_INT 114
10375: PUSH
10376: LD_INT 116
10378: PUSH
10379: LD_INT 117
10381: PUSH
10382: LD_INT 118
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: LIST
10399: LIST
10400: LIST
10401: LIST
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: ST_TO_ADDR
10407: GO 12090
10409: LD_INT 12
10411: DOUBLE
10412: EQUAL
10413: IFTRUE 10417
10415: GO 10637
10417: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
10418: LD_ADDR_VAR 0 2
10422: PUSH
10423: LD_INT 1
10425: PUSH
10426: LD_INT 2
10428: PUSH
10429: LD_INT 3
10431: PUSH
10432: LD_INT 4
10434: PUSH
10435: LD_INT 5
10437: PUSH
10438: LD_INT 6
10440: PUSH
10441: LD_INT 7
10443: PUSH
10444: LD_INT 8
10446: PUSH
10447: LD_INT 9
10449: PUSH
10450: LD_INT 10
10452: PUSH
10453: LD_INT 11
10455: PUSH
10456: LD_INT 12
10458: PUSH
10459: LD_INT 13
10461: PUSH
10462: LD_INT 14
10464: PUSH
10465: LD_INT 15
10467: PUSH
10468: LD_INT 16
10470: PUSH
10471: LD_INT 17
10473: PUSH
10474: LD_INT 18
10476: PUSH
10477: LD_INT 19
10479: PUSH
10480: LD_INT 20
10482: PUSH
10483: LD_INT 21
10485: PUSH
10486: LD_INT 22
10488: PUSH
10489: LD_INT 23
10491: PUSH
10492: LD_INT 24
10494: PUSH
10495: LD_INT 25
10497: PUSH
10498: LD_INT 26
10500: PUSH
10501: LD_INT 27
10503: PUSH
10504: LD_INT 28
10506: PUSH
10507: LD_INT 30
10509: PUSH
10510: LD_INT 31
10512: PUSH
10513: LD_INT 32
10515: PUSH
10516: LD_INT 33
10518: PUSH
10519: LD_INT 34
10521: PUSH
10522: LD_INT 36
10524: PUSH
10525: EMPTY
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: LIST
10546: LIST
10547: LIST
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: LIST
10557: LIST
10558: LIST
10559: LIST
10560: PUSH
10561: LD_INT 101
10563: PUSH
10564: LD_INT 102
10566: PUSH
10567: LD_INT 103
10569: PUSH
10570: LD_INT 104
10572: PUSH
10573: LD_INT 105
10575: PUSH
10576: LD_INT 106
10578: PUSH
10579: LD_INT 107
10581: PUSH
10582: LD_INT 108
10584: PUSH
10585: LD_INT 109
10587: PUSH
10588: LD_INT 110
10590: PUSH
10591: LD_INT 111
10593: PUSH
10594: LD_INT 112
10596: PUSH
10597: LD_INT 113
10599: PUSH
10600: LD_INT 114
10602: PUSH
10603: LD_INT 116
10605: PUSH
10606: LD_INT 117
10608: PUSH
10609: LD_INT 118
10611: PUSH
10612: EMPTY
10613: LIST
10614: LIST
10615: LIST
10616: LIST
10617: LIST
10618: LIST
10619: LIST
10620: LIST
10621: LIST
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: LIST
10627: LIST
10628: LIST
10629: LIST
10630: PUSH
10631: EMPTY
10632: LIST
10633: LIST
10634: ST_TO_ADDR
10635: GO 12090
10637: LD_INT 13
10639: DOUBLE
10640: EQUAL
10641: IFTRUE 10645
10643: GO 10853
10645: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
10646: LD_ADDR_VAR 0 2
10650: PUSH
10651: LD_INT 1
10653: PUSH
10654: LD_INT 2
10656: PUSH
10657: LD_INT 3
10659: PUSH
10660: LD_INT 4
10662: PUSH
10663: LD_INT 5
10665: PUSH
10666: LD_INT 8
10668: PUSH
10669: LD_INT 9
10671: PUSH
10672: LD_INT 10
10674: PUSH
10675: LD_INT 11
10677: PUSH
10678: LD_INT 12
10680: PUSH
10681: LD_INT 14
10683: PUSH
10684: LD_INT 15
10686: PUSH
10687: LD_INT 16
10689: PUSH
10690: LD_INT 17
10692: PUSH
10693: LD_INT 18
10695: PUSH
10696: LD_INT 19
10698: PUSH
10699: LD_INT 20
10701: PUSH
10702: LD_INT 21
10704: PUSH
10705: LD_INT 22
10707: PUSH
10708: LD_INT 23
10710: PUSH
10711: LD_INT 24
10713: PUSH
10714: LD_INT 25
10716: PUSH
10717: LD_INT 26
10719: PUSH
10720: LD_INT 27
10722: PUSH
10723: LD_INT 28
10725: PUSH
10726: LD_INT 30
10728: PUSH
10729: LD_INT 31
10731: PUSH
10732: LD_INT 32
10734: PUSH
10735: LD_INT 33
10737: PUSH
10738: LD_INT 34
10740: PUSH
10741: LD_INT 36
10743: PUSH
10744: EMPTY
10745: LIST
10746: LIST
10747: LIST
10748: LIST
10749: LIST
10750: LIST
10751: LIST
10752: LIST
10753: LIST
10754: LIST
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: LIST
10761: LIST
10762: LIST
10763: LIST
10764: LIST
10765: LIST
10766: LIST
10767: LIST
10768: LIST
10769: LIST
10770: LIST
10771: LIST
10772: LIST
10773: LIST
10774: LIST
10775: LIST
10776: PUSH
10777: LD_INT 101
10779: PUSH
10780: LD_INT 102
10782: PUSH
10783: LD_INT 103
10785: PUSH
10786: LD_INT 104
10788: PUSH
10789: LD_INT 105
10791: PUSH
10792: LD_INT 106
10794: PUSH
10795: LD_INT 107
10797: PUSH
10798: LD_INT 108
10800: PUSH
10801: LD_INT 109
10803: PUSH
10804: LD_INT 110
10806: PUSH
10807: LD_INT 111
10809: PUSH
10810: LD_INT 112
10812: PUSH
10813: LD_INT 113
10815: PUSH
10816: LD_INT 114
10818: PUSH
10819: LD_INT 116
10821: PUSH
10822: LD_INT 117
10824: PUSH
10825: LD_INT 118
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: PUSH
10847: EMPTY
10848: LIST
10849: LIST
10850: ST_TO_ADDR
10851: GO 12090
10853: LD_INT 14
10855: DOUBLE
10856: EQUAL
10857: IFTRUE 10861
10859: GO 11085
10861: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
10862: LD_ADDR_VAR 0 2
10866: PUSH
10867: LD_INT 1
10869: PUSH
10870: LD_INT 2
10872: PUSH
10873: LD_INT 3
10875: PUSH
10876: LD_INT 4
10878: PUSH
10879: LD_INT 5
10881: PUSH
10882: LD_INT 6
10884: PUSH
10885: LD_INT 7
10887: PUSH
10888: LD_INT 8
10890: PUSH
10891: LD_INT 9
10893: PUSH
10894: LD_INT 10
10896: PUSH
10897: LD_INT 11
10899: PUSH
10900: LD_INT 12
10902: PUSH
10903: LD_INT 13
10905: PUSH
10906: LD_INT 14
10908: PUSH
10909: LD_INT 15
10911: PUSH
10912: LD_INT 16
10914: PUSH
10915: LD_INT 17
10917: PUSH
10918: LD_INT 18
10920: PUSH
10921: LD_INT 19
10923: PUSH
10924: LD_INT 20
10926: PUSH
10927: LD_INT 21
10929: PUSH
10930: LD_INT 22
10932: PUSH
10933: LD_INT 23
10935: PUSH
10936: LD_INT 24
10938: PUSH
10939: LD_INT 25
10941: PUSH
10942: LD_INT 26
10944: PUSH
10945: LD_INT 27
10947: PUSH
10948: LD_INT 28
10950: PUSH
10951: LD_INT 29
10953: PUSH
10954: LD_INT 30
10956: PUSH
10957: LD_INT 31
10959: PUSH
10960: LD_INT 32
10962: PUSH
10963: LD_INT 33
10965: PUSH
10966: LD_INT 34
10968: PUSH
10969: LD_INT 36
10971: PUSH
10972: EMPTY
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: LIST
10999: LIST
11000: LIST
11001: LIST
11002: LIST
11003: LIST
11004: LIST
11005: LIST
11006: LIST
11007: LIST
11008: PUSH
11009: LD_INT 101
11011: PUSH
11012: LD_INT 102
11014: PUSH
11015: LD_INT 103
11017: PUSH
11018: LD_INT 104
11020: PUSH
11021: LD_INT 105
11023: PUSH
11024: LD_INT 106
11026: PUSH
11027: LD_INT 107
11029: PUSH
11030: LD_INT 108
11032: PUSH
11033: LD_INT 109
11035: PUSH
11036: LD_INT 110
11038: PUSH
11039: LD_INT 111
11041: PUSH
11042: LD_INT 112
11044: PUSH
11045: LD_INT 113
11047: PUSH
11048: LD_INT 114
11050: PUSH
11051: LD_INT 116
11053: PUSH
11054: LD_INT 117
11056: PUSH
11057: LD_INT 118
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: LIST
11071: LIST
11072: LIST
11073: LIST
11074: LIST
11075: LIST
11076: LIST
11077: LIST
11078: PUSH
11079: EMPTY
11080: LIST
11081: LIST
11082: ST_TO_ADDR
11083: GO 12090
11085: LD_INT 15
11087: DOUBLE
11088: EQUAL
11089: IFTRUE 11093
11091: GO 11317
11093: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11094: LD_ADDR_VAR 0 2
11098: PUSH
11099: LD_INT 1
11101: PUSH
11102: LD_INT 2
11104: PUSH
11105: LD_INT 3
11107: PUSH
11108: LD_INT 4
11110: PUSH
11111: LD_INT 5
11113: PUSH
11114: LD_INT 6
11116: PUSH
11117: LD_INT 7
11119: PUSH
11120: LD_INT 8
11122: PUSH
11123: LD_INT 9
11125: PUSH
11126: LD_INT 10
11128: PUSH
11129: LD_INT 11
11131: PUSH
11132: LD_INT 12
11134: PUSH
11135: LD_INT 13
11137: PUSH
11138: LD_INT 14
11140: PUSH
11141: LD_INT 15
11143: PUSH
11144: LD_INT 16
11146: PUSH
11147: LD_INT 17
11149: PUSH
11150: LD_INT 18
11152: PUSH
11153: LD_INT 19
11155: PUSH
11156: LD_INT 20
11158: PUSH
11159: LD_INT 21
11161: PUSH
11162: LD_INT 22
11164: PUSH
11165: LD_INT 23
11167: PUSH
11168: LD_INT 24
11170: PUSH
11171: LD_INT 25
11173: PUSH
11174: LD_INT 26
11176: PUSH
11177: LD_INT 27
11179: PUSH
11180: LD_INT 28
11182: PUSH
11183: LD_INT 29
11185: PUSH
11186: LD_INT 30
11188: PUSH
11189: LD_INT 31
11191: PUSH
11192: LD_INT 32
11194: PUSH
11195: LD_INT 33
11197: PUSH
11198: LD_INT 34
11200: PUSH
11201: LD_INT 36
11203: PUSH
11204: EMPTY
11205: LIST
11206: LIST
11207: LIST
11208: LIST
11209: LIST
11210: LIST
11211: LIST
11212: LIST
11213: LIST
11214: LIST
11215: LIST
11216: LIST
11217: LIST
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: LIST
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: LIST
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: PUSH
11241: LD_INT 101
11243: PUSH
11244: LD_INT 102
11246: PUSH
11247: LD_INT 103
11249: PUSH
11250: LD_INT 104
11252: PUSH
11253: LD_INT 105
11255: PUSH
11256: LD_INT 106
11258: PUSH
11259: LD_INT 107
11261: PUSH
11262: LD_INT 108
11264: PUSH
11265: LD_INT 109
11267: PUSH
11268: LD_INT 110
11270: PUSH
11271: LD_INT 111
11273: PUSH
11274: LD_INT 112
11276: PUSH
11277: LD_INT 113
11279: PUSH
11280: LD_INT 114
11282: PUSH
11283: LD_INT 116
11285: PUSH
11286: LD_INT 117
11288: PUSH
11289: LD_INT 118
11291: PUSH
11292: EMPTY
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: LIST
11300: LIST
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: LIST
11306: LIST
11307: LIST
11308: LIST
11309: LIST
11310: PUSH
11311: EMPTY
11312: LIST
11313: LIST
11314: ST_TO_ADDR
11315: GO 12090
11317: LD_INT 16
11319: DOUBLE
11320: EQUAL
11321: IFTRUE 11325
11323: GO 11461
11325: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11326: LD_ADDR_VAR 0 2
11330: PUSH
11331: LD_INT 2
11333: PUSH
11334: LD_INT 4
11336: PUSH
11337: LD_INT 5
11339: PUSH
11340: LD_INT 7
11342: PUSH
11343: LD_INT 11
11345: PUSH
11346: LD_INT 12
11348: PUSH
11349: LD_INT 15
11351: PUSH
11352: LD_INT 16
11354: PUSH
11355: LD_INT 20
11357: PUSH
11358: LD_INT 21
11360: PUSH
11361: LD_INT 22
11363: PUSH
11364: LD_INT 23
11366: PUSH
11367: LD_INT 25
11369: PUSH
11370: LD_INT 26
11372: PUSH
11373: LD_INT 30
11375: PUSH
11376: LD_INT 31
11378: PUSH
11379: LD_INT 32
11381: PUSH
11382: LD_INT 33
11384: PUSH
11385: LD_INT 34
11387: PUSH
11388: EMPTY
11389: LIST
11390: LIST
11391: LIST
11392: LIST
11393: LIST
11394: LIST
11395: LIST
11396: LIST
11397: LIST
11398: LIST
11399: LIST
11400: LIST
11401: LIST
11402: LIST
11403: LIST
11404: LIST
11405: LIST
11406: LIST
11407: LIST
11408: PUSH
11409: LD_INT 101
11411: PUSH
11412: LD_INT 102
11414: PUSH
11415: LD_INT 103
11417: PUSH
11418: LD_INT 106
11420: PUSH
11421: LD_INT 108
11423: PUSH
11424: LD_INT 112
11426: PUSH
11427: LD_INT 113
11429: PUSH
11430: LD_INT 114
11432: PUSH
11433: LD_INT 116
11435: PUSH
11436: LD_INT 117
11438: PUSH
11439: LD_INT 118
11441: PUSH
11442: EMPTY
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: PUSH
11455: EMPTY
11456: LIST
11457: LIST
11458: ST_TO_ADDR
11459: GO 12090
11461: LD_INT 17
11463: DOUBLE
11464: EQUAL
11465: IFTRUE 11469
11467: GO 11693
11469: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
11470: LD_ADDR_VAR 0 2
11474: PUSH
11475: LD_INT 1
11477: PUSH
11478: LD_INT 2
11480: PUSH
11481: LD_INT 3
11483: PUSH
11484: LD_INT 4
11486: PUSH
11487: LD_INT 5
11489: PUSH
11490: LD_INT 6
11492: PUSH
11493: LD_INT 7
11495: PUSH
11496: LD_INT 8
11498: PUSH
11499: LD_INT 9
11501: PUSH
11502: LD_INT 10
11504: PUSH
11505: LD_INT 11
11507: PUSH
11508: LD_INT 12
11510: PUSH
11511: LD_INT 13
11513: PUSH
11514: LD_INT 14
11516: PUSH
11517: LD_INT 15
11519: PUSH
11520: LD_INT 16
11522: PUSH
11523: LD_INT 17
11525: PUSH
11526: LD_INT 18
11528: PUSH
11529: LD_INT 19
11531: PUSH
11532: LD_INT 20
11534: PUSH
11535: LD_INT 21
11537: PUSH
11538: LD_INT 22
11540: PUSH
11541: LD_INT 23
11543: PUSH
11544: LD_INT 24
11546: PUSH
11547: LD_INT 25
11549: PUSH
11550: LD_INT 26
11552: PUSH
11553: LD_INT 27
11555: PUSH
11556: LD_INT 28
11558: PUSH
11559: LD_INT 29
11561: PUSH
11562: LD_INT 30
11564: PUSH
11565: LD_INT 31
11567: PUSH
11568: LD_INT 32
11570: PUSH
11571: LD_INT 33
11573: PUSH
11574: LD_INT 34
11576: PUSH
11577: LD_INT 36
11579: PUSH
11580: EMPTY
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: LIST
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: LIST
11607: LIST
11608: LIST
11609: LIST
11610: LIST
11611: LIST
11612: LIST
11613: LIST
11614: LIST
11615: LIST
11616: PUSH
11617: LD_INT 101
11619: PUSH
11620: LD_INT 102
11622: PUSH
11623: LD_INT 103
11625: PUSH
11626: LD_INT 104
11628: PUSH
11629: LD_INT 105
11631: PUSH
11632: LD_INT 106
11634: PUSH
11635: LD_INT 107
11637: PUSH
11638: LD_INT 108
11640: PUSH
11641: LD_INT 109
11643: PUSH
11644: LD_INT 110
11646: PUSH
11647: LD_INT 111
11649: PUSH
11650: LD_INT 112
11652: PUSH
11653: LD_INT 113
11655: PUSH
11656: LD_INT 114
11658: PUSH
11659: LD_INT 116
11661: PUSH
11662: LD_INT 117
11664: PUSH
11665: LD_INT 118
11667: PUSH
11668: EMPTY
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: LIST
11679: LIST
11680: LIST
11681: LIST
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: PUSH
11687: EMPTY
11688: LIST
11689: LIST
11690: ST_TO_ADDR
11691: GO 12090
11693: LD_INT 18
11695: DOUBLE
11696: EQUAL
11697: IFTRUE 11701
11699: GO 11849
11701: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
11702: LD_ADDR_VAR 0 2
11706: PUSH
11707: LD_INT 2
11709: PUSH
11710: LD_INT 4
11712: PUSH
11713: LD_INT 5
11715: PUSH
11716: LD_INT 7
11718: PUSH
11719: LD_INT 11
11721: PUSH
11722: LD_INT 12
11724: PUSH
11725: LD_INT 15
11727: PUSH
11728: LD_INT 16
11730: PUSH
11731: LD_INT 20
11733: PUSH
11734: LD_INT 21
11736: PUSH
11737: LD_INT 22
11739: PUSH
11740: LD_INT 23
11742: PUSH
11743: LD_INT 25
11745: PUSH
11746: LD_INT 26
11748: PUSH
11749: LD_INT 30
11751: PUSH
11752: LD_INT 31
11754: PUSH
11755: LD_INT 32
11757: PUSH
11758: LD_INT 33
11760: PUSH
11761: LD_INT 34
11763: PUSH
11764: LD_INT 35
11766: PUSH
11767: LD_INT 36
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: PUSH
11793: LD_INT 101
11795: PUSH
11796: LD_INT 102
11798: PUSH
11799: LD_INT 103
11801: PUSH
11802: LD_INT 106
11804: PUSH
11805: LD_INT 108
11807: PUSH
11808: LD_INT 112
11810: PUSH
11811: LD_INT 113
11813: PUSH
11814: LD_INT 114
11816: PUSH
11817: LD_INT 115
11819: PUSH
11820: LD_INT 116
11822: PUSH
11823: LD_INT 117
11825: PUSH
11826: LD_INT 118
11828: PUSH
11829: EMPTY
11830: LIST
11831: LIST
11832: LIST
11833: LIST
11834: LIST
11835: LIST
11836: LIST
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: PUSH
11843: EMPTY
11844: LIST
11845: LIST
11846: ST_TO_ADDR
11847: GO 12090
11849: LD_INT 19
11851: DOUBLE
11852: EQUAL
11853: IFTRUE 11857
11855: GO 12089
11857: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
11858: LD_ADDR_VAR 0 2
11862: PUSH
11863: LD_INT 1
11865: PUSH
11866: LD_INT 2
11868: PUSH
11869: LD_INT 3
11871: PUSH
11872: LD_INT 4
11874: PUSH
11875: LD_INT 5
11877: PUSH
11878: LD_INT 6
11880: PUSH
11881: LD_INT 7
11883: PUSH
11884: LD_INT 8
11886: PUSH
11887: LD_INT 9
11889: PUSH
11890: LD_INT 10
11892: PUSH
11893: LD_INT 11
11895: PUSH
11896: LD_INT 12
11898: PUSH
11899: LD_INT 13
11901: PUSH
11902: LD_INT 14
11904: PUSH
11905: LD_INT 15
11907: PUSH
11908: LD_INT 16
11910: PUSH
11911: LD_INT 17
11913: PUSH
11914: LD_INT 18
11916: PUSH
11917: LD_INT 19
11919: PUSH
11920: LD_INT 20
11922: PUSH
11923: LD_INT 21
11925: PUSH
11926: LD_INT 22
11928: PUSH
11929: LD_INT 23
11931: PUSH
11932: LD_INT 24
11934: PUSH
11935: LD_INT 25
11937: PUSH
11938: LD_INT 26
11940: PUSH
11941: LD_INT 27
11943: PUSH
11944: LD_INT 28
11946: PUSH
11947: LD_INT 29
11949: PUSH
11950: LD_INT 30
11952: PUSH
11953: LD_INT 31
11955: PUSH
11956: LD_INT 32
11958: PUSH
11959: LD_INT 33
11961: PUSH
11962: LD_INT 34
11964: PUSH
11965: LD_INT 35
11967: PUSH
11968: LD_INT 36
11970: PUSH
11971: EMPTY
11972: LIST
11973: LIST
11974: LIST
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: LIST
11999: LIST
12000: LIST
12001: LIST
12002: LIST
12003: LIST
12004: LIST
12005: LIST
12006: LIST
12007: LIST
12008: PUSH
12009: LD_INT 101
12011: PUSH
12012: LD_INT 102
12014: PUSH
12015: LD_INT 103
12017: PUSH
12018: LD_INT 104
12020: PUSH
12021: LD_INT 105
12023: PUSH
12024: LD_INT 106
12026: PUSH
12027: LD_INT 107
12029: PUSH
12030: LD_INT 108
12032: PUSH
12033: LD_INT 109
12035: PUSH
12036: LD_INT 110
12038: PUSH
12039: LD_INT 111
12041: PUSH
12042: LD_INT 112
12044: PUSH
12045: LD_INT 113
12047: PUSH
12048: LD_INT 114
12050: PUSH
12051: LD_INT 115
12053: PUSH
12054: LD_INT 116
12056: PUSH
12057: LD_INT 117
12059: PUSH
12060: LD_INT 118
12062: PUSH
12063: EMPTY
12064: LIST
12065: LIST
12066: LIST
12067: LIST
12068: LIST
12069: LIST
12070: LIST
12071: LIST
12072: LIST
12073: LIST
12074: LIST
12075: LIST
12076: LIST
12077: LIST
12078: LIST
12079: LIST
12080: LIST
12081: LIST
12082: PUSH
12083: EMPTY
12084: LIST
12085: LIST
12086: ST_TO_ADDR
12087: GO 12090
12089: POP
// end else
12090: GO 12321
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12092: LD_ADDR_VAR 0 2
12096: PUSH
12097: LD_INT 1
12099: PUSH
12100: LD_INT 2
12102: PUSH
12103: LD_INT 3
12105: PUSH
12106: LD_INT 4
12108: PUSH
12109: LD_INT 5
12111: PUSH
12112: LD_INT 6
12114: PUSH
12115: LD_INT 7
12117: PUSH
12118: LD_INT 8
12120: PUSH
12121: LD_INT 9
12123: PUSH
12124: LD_INT 10
12126: PUSH
12127: LD_INT 11
12129: PUSH
12130: LD_INT 12
12132: PUSH
12133: LD_INT 13
12135: PUSH
12136: LD_INT 14
12138: PUSH
12139: LD_INT 15
12141: PUSH
12142: LD_INT 16
12144: PUSH
12145: LD_INT 17
12147: PUSH
12148: LD_INT 18
12150: PUSH
12151: LD_INT 19
12153: PUSH
12154: LD_INT 20
12156: PUSH
12157: LD_INT 21
12159: PUSH
12160: LD_INT 22
12162: PUSH
12163: LD_INT 23
12165: PUSH
12166: LD_INT 24
12168: PUSH
12169: LD_INT 25
12171: PUSH
12172: LD_INT 26
12174: PUSH
12175: LD_INT 27
12177: PUSH
12178: LD_INT 28
12180: PUSH
12181: LD_INT 29
12183: PUSH
12184: LD_INT 30
12186: PUSH
12187: LD_INT 31
12189: PUSH
12190: LD_INT 32
12192: PUSH
12193: LD_INT 33
12195: PUSH
12196: LD_INT 34
12198: PUSH
12199: LD_INT 35
12201: PUSH
12202: LD_INT 36
12204: PUSH
12205: EMPTY
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: LIST
12233: LIST
12234: LIST
12235: LIST
12236: LIST
12237: LIST
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: PUSH
12243: LD_INT 101
12245: PUSH
12246: LD_INT 102
12248: PUSH
12249: LD_INT 103
12251: PUSH
12252: LD_INT 104
12254: PUSH
12255: LD_INT 105
12257: PUSH
12258: LD_INT 106
12260: PUSH
12261: LD_INT 107
12263: PUSH
12264: LD_INT 108
12266: PUSH
12267: LD_INT 109
12269: PUSH
12270: LD_INT 110
12272: PUSH
12273: LD_INT 111
12275: PUSH
12276: LD_INT 112
12278: PUSH
12279: LD_INT 113
12281: PUSH
12282: LD_INT 114
12284: PUSH
12285: LD_INT 115
12287: PUSH
12288: LD_INT 116
12290: PUSH
12291: LD_INT 117
12293: PUSH
12294: LD_INT 118
12296: PUSH
12297: EMPTY
12298: LIST
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: LIST
12307: LIST
12308: LIST
12309: LIST
12310: LIST
12311: LIST
12312: LIST
12313: LIST
12314: LIST
12315: LIST
12316: PUSH
12317: EMPTY
12318: LIST
12319: LIST
12320: ST_TO_ADDR
// if result then
12321: LD_VAR 0 2
12325: IFFALSE 13111
// begin normal :=  ;
12327: LD_ADDR_VAR 0 5
12331: PUSH
12332: LD_STRING 
12334: ST_TO_ADDR
// hardcore :=  ;
12335: LD_ADDR_VAR 0 6
12339: PUSH
12340: LD_STRING 
12342: ST_TO_ADDR
// active :=  ;
12343: LD_ADDR_VAR 0 7
12347: PUSH
12348: LD_STRING 
12350: ST_TO_ADDR
// for i = 1 to normalCounter do
12351: LD_ADDR_VAR 0 8
12355: PUSH
12356: DOUBLE
12357: LD_INT 1
12359: DEC
12360: ST_TO_ADDR
12361: LD_EXP 30
12365: PUSH
12366: FOR_TO
12367: IFFALSE 12468
// begin tmp := 0 ;
12369: LD_ADDR_VAR 0 3
12373: PUSH
12374: LD_STRING 0
12376: ST_TO_ADDR
// if result [ 1 ] then
12377: LD_VAR 0 2
12381: PUSH
12382: LD_INT 1
12384: ARRAY
12385: IFFALSE 12450
// if result [ 1 ] [ 1 ] = i then
12387: LD_VAR 0 2
12391: PUSH
12392: LD_INT 1
12394: ARRAY
12395: PUSH
12396: LD_INT 1
12398: ARRAY
12399: PUSH
12400: LD_VAR 0 8
12404: EQUAL
12405: IFFALSE 12450
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12407: LD_ADDR_VAR 0 2
12411: PUSH
12412: LD_VAR 0 2
12416: PPUSH
12417: LD_INT 1
12419: PPUSH
12420: LD_VAR 0 2
12424: PUSH
12425: LD_INT 1
12427: ARRAY
12428: PPUSH
12429: LD_INT 1
12431: PPUSH
12432: CALL_OW 3
12436: PPUSH
12437: CALL_OW 1
12441: ST_TO_ADDR
// tmp := 1 ;
12442: LD_ADDR_VAR 0 3
12446: PUSH
12447: LD_STRING 1
12449: ST_TO_ADDR
// end ; normal := normal & tmp ;
12450: LD_ADDR_VAR 0 5
12454: PUSH
12455: LD_VAR 0 5
12459: PUSH
12460: LD_VAR 0 3
12464: STR
12465: ST_TO_ADDR
// end ;
12466: GO 12366
12468: POP
12469: POP
// for i = 1 to hardcoreCounter do
12470: LD_ADDR_VAR 0 8
12474: PUSH
12475: DOUBLE
12476: LD_INT 1
12478: DEC
12479: ST_TO_ADDR
12480: LD_EXP 31
12484: PUSH
12485: FOR_TO
12486: IFFALSE 12591
// begin tmp := 0 ;
12488: LD_ADDR_VAR 0 3
12492: PUSH
12493: LD_STRING 0
12495: ST_TO_ADDR
// if result [ 2 ] then
12496: LD_VAR 0 2
12500: PUSH
12501: LD_INT 2
12503: ARRAY
12504: IFFALSE 12573
// if result [ 2 ] [ 1 ] = 100 + i then
12506: LD_VAR 0 2
12510: PUSH
12511: LD_INT 2
12513: ARRAY
12514: PUSH
12515: LD_INT 1
12517: ARRAY
12518: PUSH
12519: LD_INT 100
12521: PUSH
12522: LD_VAR 0 8
12526: PLUS
12527: EQUAL
12528: IFFALSE 12573
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12530: LD_ADDR_VAR 0 2
12534: PUSH
12535: LD_VAR 0 2
12539: PPUSH
12540: LD_INT 2
12542: PPUSH
12543: LD_VAR 0 2
12547: PUSH
12548: LD_INT 2
12550: ARRAY
12551: PPUSH
12552: LD_INT 1
12554: PPUSH
12555: CALL_OW 3
12559: PPUSH
12560: CALL_OW 1
12564: ST_TO_ADDR
// tmp := 1 ;
12565: LD_ADDR_VAR 0 3
12569: PUSH
12570: LD_STRING 1
12572: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12573: LD_ADDR_VAR 0 6
12577: PUSH
12578: LD_VAR 0 6
12582: PUSH
12583: LD_VAR 0 3
12587: STR
12588: ST_TO_ADDR
// end ;
12589: GO 12485
12591: POP
12592: POP
// if isGameLoad then
12593: LD_VAR 0 1
12597: IFFALSE 13072
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
12599: LD_ADDR_VAR 0 4
12603: PUSH
12604: LD_EXP 34
12608: PUSH
12609: LD_EXP 33
12613: PUSH
12614: LD_EXP 35
12618: PUSH
12619: LD_EXP 32
12623: PUSH
12624: LD_EXP 36
12628: PUSH
12629: LD_EXP 37
12633: PUSH
12634: LD_EXP 38
12638: PUSH
12639: LD_EXP 39
12643: PUSH
12644: LD_EXP 40
12648: PUSH
12649: LD_EXP 41
12653: PUSH
12654: LD_EXP 42
12658: PUSH
12659: LD_EXP 43
12663: PUSH
12664: LD_EXP 44
12668: PUSH
12669: LD_EXP 45
12673: PUSH
12674: LD_EXP 53
12678: PUSH
12679: LD_EXP 54
12683: PUSH
12684: LD_EXP 55
12688: PUSH
12689: LD_EXP 56
12693: PUSH
12694: LD_EXP 58
12698: PUSH
12699: LD_EXP 59
12703: PUSH
12704: LD_EXP 60
12708: PUSH
12709: LD_EXP 63
12713: PUSH
12714: LD_EXP 65
12718: PUSH
12719: LD_EXP 66
12723: PUSH
12724: LD_EXP 67
12728: PUSH
12729: LD_EXP 69
12733: PUSH
12734: LD_EXP 70
12738: PUSH
12739: LD_EXP 73
12743: PUSH
12744: LD_EXP 74
12748: PUSH
12749: LD_EXP 75
12753: PUSH
12754: LD_EXP 76
12758: PUSH
12759: LD_EXP 77
12763: PUSH
12764: LD_EXP 78
12768: PUSH
12769: LD_EXP 79
12773: PUSH
12774: LD_EXP 80
12778: PUSH
12779: LD_EXP 81
12783: PUSH
12784: LD_EXP 46
12788: PUSH
12789: LD_EXP 47
12793: PUSH
12794: LD_EXP 50
12798: PUSH
12799: LD_EXP 51
12803: PUSH
12804: LD_EXP 52
12808: PUSH
12809: LD_EXP 48
12813: PUSH
12814: LD_EXP 49
12818: PUSH
12819: LD_EXP 57
12823: PUSH
12824: LD_EXP 61
12828: PUSH
12829: LD_EXP 62
12833: PUSH
12834: LD_EXP 64
12838: PUSH
12839: LD_EXP 68
12843: PUSH
12844: LD_EXP 71
12848: PUSH
12849: LD_EXP 72
12853: PUSH
12854: LD_EXP 82
12858: PUSH
12859: LD_EXP 83
12863: PUSH
12864: LD_EXP 84
12868: PUSH
12869: LD_EXP 85
12873: PUSH
12874: EMPTY
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: LIST
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: LIST
12908: LIST
12909: LIST
12910: LIST
12911: LIST
12912: LIST
12913: LIST
12914: LIST
12915: LIST
12916: LIST
12917: LIST
12918: LIST
12919: LIST
12920: LIST
12921: LIST
12922: LIST
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: LIST
12928: LIST
12929: ST_TO_ADDR
// tmp :=  ;
12930: LD_ADDR_VAR 0 3
12934: PUSH
12935: LD_STRING 
12937: ST_TO_ADDR
// for i = 1 to normalCounter do
12938: LD_ADDR_VAR 0 8
12942: PUSH
12943: DOUBLE
12944: LD_INT 1
12946: DEC
12947: ST_TO_ADDR
12948: LD_EXP 30
12952: PUSH
12953: FOR_TO
12954: IFFALSE 12990
// begin if flags [ i ] then
12956: LD_VAR 0 4
12960: PUSH
12961: LD_VAR 0 8
12965: ARRAY
12966: IFFALSE 12988
// tmp := tmp & i & ; ;
12968: LD_ADDR_VAR 0 3
12972: PUSH
12973: LD_VAR 0 3
12977: PUSH
12978: LD_VAR 0 8
12982: STR
12983: PUSH
12984: LD_STRING ;
12986: STR
12987: ST_TO_ADDR
// end ;
12988: GO 12953
12990: POP
12991: POP
// for i = 1 to hardcoreCounter do
12992: LD_ADDR_VAR 0 8
12996: PUSH
12997: DOUBLE
12998: LD_INT 1
13000: DEC
13001: ST_TO_ADDR
13002: LD_EXP 31
13006: PUSH
13007: FOR_TO
13008: IFFALSE 13054
// begin if flags [ normalCounter + i ] then
13010: LD_VAR 0 4
13014: PUSH
13015: LD_EXP 30
13019: PUSH
13020: LD_VAR 0 8
13024: PLUS
13025: ARRAY
13026: IFFALSE 13052
// tmp := tmp & ( 100 + i ) & ; ;
13028: LD_ADDR_VAR 0 3
13032: PUSH
13033: LD_VAR 0 3
13037: PUSH
13038: LD_INT 100
13040: PUSH
13041: LD_VAR 0 8
13045: PLUS
13046: STR
13047: PUSH
13048: LD_STRING ;
13050: STR
13051: ST_TO_ADDR
// end ;
13052: GO 13007
13054: POP
13055: POP
// if tmp then
13056: LD_VAR 0 3
13060: IFFALSE 13072
// active := tmp ;
13062: LD_ADDR_VAR 0 7
13066: PUSH
13067: LD_VAR 0 3
13071: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
13072: LD_STRING getStreamItemsFromMission("
13074: PUSH
13075: LD_VAR 0 5
13079: STR
13080: PUSH
13081: LD_STRING ","
13083: STR
13084: PUSH
13085: LD_VAR 0 6
13089: STR
13090: PUSH
13091: LD_STRING ","
13093: STR
13094: PUSH
13095: LD_VAR 0 7
13099: STR
13100: PUSH
13101: LD_STRING ")
13103: STR
13104: PPUSH
13105: CALL_OW 559
// end else
13109: GO 13118
// ToLua ( getStreamItemsFromMission("","","") ) ;
13111: LD_STRING getStreamItemsFromMission("","","")
13113: PPUSH
13114: CALL_OW 559
// end ;
13118: LD_VAR 0 2
13122: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13123: LD_EXP 29
13127: PUSH
13128: LD_EXP 34
13132: AND
13133: IFFALSE 13257
13135: GO 13137
13137: DISABLE
13138: LD_INT 0
13140: PPUSH
13141: PPUSH
// begin enable ;
13142: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13143: LD_ADDR_VAR 0 2
13147: PUSH
13148: LD_INT 22
13150: PUSH
13151: LD_OWVAR 2
13155: PUSH
13156: EMPTY
13157: LIST
13158: LIST
13159: PUSH
13160: LD_INT 2
13162: PUSH
13163: LD_INT 34
13165: PUSH
13166: LD_INT 7
13168: PUSH
13169: EMPTY
13170: LIST
13171: LIST
13172: PUSH
13173: LD_INT 34
13175: PUSH
13176: LD_INT 45
13178: PUSH
13179: EMPTY
13180: LIST
13181: LIST
13182: PUSH
13183: LD_INT 34
13185: PUSH
13186: LD_INT 28
13188: PUSH
13189: EMPTY
13190: LIST
13191: LIST
13192: PUSH
13193: LD_INT 34
13195: PUSH
13196: LD_INT 47
13198: PUSH
13199: EMPTY
13200: LIST
13201: LIST
13202: PUSH
13203: EMPTY
13204: LIST
13205: LIST
13206: LIST
13207: LIST
13208: LIST
13209: PUSH
13210: EMPTY
13211: LIST
13212: LIST
13213: PPUSH
13214: CALL_OW 69
13218: ST_TO_ADDR
// if not tmp then
13219: LD_VAR 0 2
13223: NOT
13224: IFFALSE 13228
// exit ;
13226: GO 13257
// for i in tmp do
13228: LD_ADDR_VAR 0 1
13232: PUSH
13233: LD_VAR 0 2
13237: PUSH
13238: FOR_IN
13239: IFFALSE 13255
// begin SetLives ( i , 0 ) ;
13241: LD_VAR 0 1
13245: PPUSH
13246: LD_INT 0
13248: PPUSH
13249: CALL_OW 234
// end ;
13253: GO 13238
13255: POP
13256: POP
// end ;
13257: PPOPN 2
13259: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13260: LD_EXP 29
13264: PUSH
13265: LD_EXP 35
13269: AND
13270: IFFALSE 13354
13272: GO 13274
13274: DISABLE
13275: LD_INT 0
13277: PPUSH
13278: PPUSH
// begin enable ;
13279: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13280: LD_ADDR_VAR 0 2
13284: PUSH
13285: LD_INT 22
13287: PUSH
13288: LD_OWVAR 2
13292: PUSH
13293: EMPTY
13294: LIST
13295: LIST
13296: PUSH
13297: LD_INT 32
13299: PUSH
13300: LD_INT 3
13302: PUSH
13303: EMPTY
13304: LIST
13305: LIST
13306: PUSH
13307: EMPTY
13308: LIST
13309: LIST
13310: PPUSH
13311: CALL_OW 69
13315: ST_TO_ADDR
// if not tmp then
13316: LD_VAR 0 2
13320: NOT
13321: IFFALSE 13325
// exit ;
13323: GO 13354
// for i in tmp do
13325: LD_ADDR_VAR 0 1
13329: PUSH
13330: LD_VAR 0 2
13334: PUSH
13335: FOR_IN
13336: IFFALSE 13352
// begin SetLives ( i , 0 ) ;
13338: LD_VAR 0 1
13342: PPUSH
13343: LD_INT 0
13345: PPUSH
13346: CALL_OW 234
// end ;
13350: GO 13335
13352: POP
13353: POP
// end ;
13354: PPOPN 2
13356: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13357: LD_EXP 29
13361: PUSH
13362: LD_EXP 32
13366: AND
13367: IFFALSE 13460
13369: GO 13371
13371: DISABLE
13372: LD_INT 0
13374: PPUSH
// begin enable ;
13375: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13376: LD_ADDR_VAR 0 1
13380: PUSH
13381: LD_INT 22
13383: PUSH
13384: LD_OWVAR 2
13388: PUSH
13389: EMPTY
13390: LIST
13391: LIST
13392: PUSH
13393: LD_INT 2
13395: PUSH
13396: LD_INT 25
13398: PUSH
13399: LD_INT 5
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: PUSH
13406: LD_INT 25
13408: PUSH
13409: LD_INT 9
13411: PUSH
13412: EMPTY
13413: LIST
13414: LIST
13415: PUSH
13416: LD_INT 25
13418: PUSH
13419: LD_INT 8
13421: PUSH
13422: EMPTY
13423: LIST
13424: LIST
13425: PUSH
13426: EMPTY
13427: LIST
13428: LIST
13429: LIST
13430: LIST
13431: PUSH
13432: EMPTY
13433: LIST
13434: LIST
13435: PPUSH
13436: CALL_OW 69
13440: PUSH
13441: FOR_IN
13442: IFFALSE 13458
// begin SetClass ( i , 1 ) ;
13444: LD_VAR 0 1
13448: PPUSH
13449: LD_INT 1
13451: PPUSH
13452: CALL_OW 336
// end ;
13456: GO 13441
13458: POP
13459: POP
// end ;
13460: PPOPN 1
13462: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13463: LD_EXP 29
13467: PUSH
13468: LD_EXP 33
13472: AND
13473: PUSH
13474: LD_OWVAR 65
13478: PUSH
13479: LD_INT 7
13481: LESS
13482: AND
13483: IFFALSE 13497
13485: GO 13487
13487: DISABLE
// begin enable ;
13488: ENABLE
// game_speed := 7 ;
13489: LD_ADDR_OWVAR 65
13493: PUSH
13494: LD_INT 7
13496: ST_TO_ADDR
// end ;
13497: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13498: LD_EXP 29
13502: PUSH
13503: LD_EXP 36
13507: AND
13508: IFFALSE 13710
13510: GO 13512
13512: DISABLE
13513: LD_INT 0
13515: PPUSH
13516: PPUSH
13517: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13518: LD_ADDR_VAR 0 3
13522: PUSH
13523: LD_INT 81
13525: PUSH
13526: LD_OWVAR 2
13530: PUSH
13531: EMPTY
13532: LIST
13533: LIST
13534: PUSH
13535: LD_INT 21
13537: PUSH
13538: LD_INT 1
13540: PUSH
13541: EMPTY
13542: LIST
13543: LIST
13544: PUSH
13545: EMPTY
13546: LIST
13547: LIST
13548: PPUSH
13549: CALL_OW 69
13553: ST_TO_ADDR
// if not tmp then
13554: LD_VAR 0 3
13558: NOT
13559: IFFALSE 13563
// exit ;
13561: GO 13710
// if tmp > 5 then
13563: LD_VAR 0 3
13567: PUSH
13568: LD_INT 5
13570: GREATER
13571: IFFALSE 13583
// k := 5 else
13573: LD_ADDR_VAR 0 2
13577: PUSH
13578: LD_INT 5
13580: ST_TO_ADDR
13581: GO 13593
// k := tmp ;
13583: LD_ADDR_VAR 0 2
13587: PUSH
13588: LD_VAR 0 3
13592: ST_TO_ADDR
// for i := 1 to k do
13593: LD_ADDR_VAR 0 1
13597: PUSH
13598: DOUBLE
13599: LD_INT 1
13601: DEC
13602: ST_TO_ADDR
13603: LD_VAR 0 2
13607: PUSH
13608: FOR_TO
13609: IFFALSE 13708
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13611: LD_VAR 0 3
13615: PUSH
13616: LD_VAR 0 1
13620: ARRAY
13621: PPUSH
13622: LD_VAR 0 1
13626: PUSH
13627: LD_INT 4
13629: MOD
13630: PUSH
13631: LD_INT 1
13633: PLUS
13634: PPUSH
13635: CALL_OW 259
13639: PUSH
13640: LD_INT 10
13642: LESS
13643: IFFALSE 13706
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13645: LD_VAR 0 3
13649: PUSH
13650: LD_VAR 0 1
13654: ARRAY
13655: PPUSH
13656: LD_VAR 0 1
13660: PUSH
13661: LD_INT 4
13663: MOD
13664: PUSH
13665: LD_INT 1
13667: PLUS
13668: PPUSH
13669: LD_VAR 0 3
13673: PUSH
13674: LD_VAR 0 1
13678: ARRAY
13679: PPUSH
13680: LD_VAR 0 1
13684: PUSH
13685: LD_INT 4
13687: MOD
13688: PUSH
13689: LD_INT 1
13691: PLUS
13692: PPUSH
13693: CALL_OW 259
13697: PUSH
13698: LD_INT 1
13700: PLUS
13701: PPUSH
13702: CALL_OW 237
13706: GO 13608
13708: POP
13709: POP
// end ;
13710: PPOPN 3
13712: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13713: LD_EXP 29
13717: PUSH
13718: LD_EXP 37
13722: AND
13723: IFFALSE 13743
13725: GO 13727
13727: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13728: LD_INT 4
13730: PPUSH
13731: LD_OWVAR 2
13735: PPUSH
13736: LD_INT 0
13738: PPUSH
13739: CALL_OW 324
13743: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13744: LD_EXP 29
13748: PUSH
13749: LD_EXP 66
13753: AND
13754: IFFALSE 13774
13756: GO 13758
13758: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13759: LD_INT 19
13761: PPUSH
13762: LD_OWVAR 2
13766: PPUSH
13767: LD_INT 0
13769: PPUSH
13770: CALL_OW 324
13774: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13775: LD_EXP 29
13779: PUSH
13780: LD_EXP 38
13784: AND
13785: IFFALSE 13887
13787: GO 13789
13789: DISABLE
13790: LD_INT 0
13792: PPUSH
13793: PPUSH
// begin enable ;
13794: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13795: LD_ADDR_VAR 0 2
13799: PUSH
13800: LD_INT 22
13802: PUSH
13803: LD_OWVAR 2
13807: PUSH
13808: EMPTY
13809: LIST
13810: LIST
13811: PUSH
13812: LD_INT 2
13814: PUSH
13815: LD_INT 34
13817: PUSH
13818: LD_INT 11
13820: PUSH
13821: EMPTY
13822: LIST
13823: LIST
13824: PUSH
13825: LD_INT 34
13827: PUSH
13828: LD_INT 30
13830: PUSH
13831: EMPTY
13832: LIST
13833: LIST
13834: PUSH
13835: EMPTY
13836: LIST
13837: LIST
13838: LIST
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: PPUSH
13844: CALL_OW 69
13848: ST_TO_ADDR
// if not tmp then
13849: LD_VAR 0 2
13853: NOT
13854: IFFALSE 13858
// exit ;
13856: GO 13887
// for i in tmp do
13858: LD_ADDR_VAR 0 1
13862: PUSH
13863: LD_VAR 0 2
13867: PUSH
13868: FOR_IN
13869: IFFALSE 13885
// begin SetLives ( i , 0 ) ;
13871: LD_VAR 0 1
13875: PPUSH
13876: LD_INT 0
13878: PPUSH
13879: CALL_OW 234
// end ;
13883: GO 13868
13885: POP
13886: POP
// end ;
13887: PPOPN 2
13889: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13890: LD_EXP 29
13894: PUSH
13895: LD_EXP 39
13899: AND
13900: IFFALSE 13920
13902: GO 13904
13904: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13905: LD_INT 32
13907: PPUSH
13908: LD_OWVAR 2
13912: PPUSH
13913: LD_INT 0
13915: PPUSH
13916: CALL_OW 324
13920: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13921: LD_EXP 29
13925: PUSH
13926: LD_EXP 40
13930: AND
13931: IFFALSE 14112
13933: GO 13935
13935: DISABLE
13936: LD_INT 0
13938: PPUSH
13939: PPUSH
13940: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13941: LD_ADDR_VAR 0 2
13945: PUSH
13946: LD_INT 22
13948: PUSH
13949: LD_OWVAR 2
13953: PUSH
13954: EMPTY
13955: LIST
13956: LIST
13957: PUSH
13958: LD_INT 33
13960: PUSH
13961: LD_INT 3
13963: PUSH
13964: EMPTY
13965: LIST
13966: LIST
13967: PUSH
13968: EMPTY
13969: LIST
13970: LIST
13971: PPUSH
13972: CALL_OW 69
13976: ST_TO_ADDR
// if not tmp then
13977: LD_VAR 0 2
13981: NOT
13982: IFFALSE 13986
// exit ;
13984: GO 14112
// side := 0 ;
13986: LD_ADDR_VAR 0 3
13990: PUSH
13991: LD_INT 0
13993: ST_TO_ADDR
// for i := 1 to 8 do
13994: LD_ADDR_VAR 0 1
13998: PUSH
13999: DOUBLE
14000: LD_INT 1
14002: DEC
14003: ST_TO_ADDR
14004: LD_INT 8
14006: PUSH
14007: FOR_TO
14008: IFFALSE 14056
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14010: LD_OWVAR 2
14014: PUSH
14015: LD_VAR 0 1
14019: NONEQUAL
14020: PUSH
14021: LD_OWVAR 2
14025: PPUSH
14026: LD_VAR 0 1
14030: PPUSH
14031: CALL_OW 81
14035: PUSH
14036: LD_INT 2
14038: EQUAL
14039: AND
14040: IFFALSE 14054
// begin side := i ;
14042: LD_ADDR_VAR 0 3
14046: PUSH
14047: LD_VAR 0 1
14051: ST_TO_ADDR
// break ;
14052: GO 14056
// end ;
14054: GO 14007
14056: POP
14057: POP
// if not side then
14058: LD_VAR 0 3
14062: NOT
14063: IFFALSE 14067
// exit ;
14065: GO 14112
// for i := 1 to tmp do
14067: LD_ADDR_VAR 0 1
14071: PUSH
14072: DOUBLE
14073: LD_INT 1
14075: DEC
14076: ST_TO_ADDR
14077: LD_VAR 0 2
14081: PUSH
14082: FOR_TO
14083: IFFALSE 14110
// if Prob ( 60 ) then
14085: LD_INT 60
14087: PPUSH
14088: CALL_OW 13
14092: IFFALSE 14108
// SetSide ( i , side ) ;
14094: LD_VAR 0 1
14098: PPUSH
14099: LD_VAR 0 3
14103: PPUSH
14104: CALL_OW 235
14108: GO 14082
14110: POP
14111: POP
// end ;
14112: PPOPN 3
14114: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14115: LD_EXP 29
14119: PUSH
14120: LD_EXP 42
14124: AND
14125: IFFALSE 14244
14127: GO 14129
14129: DISABLE
14130: LD_INT 0
14132: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14133: LD_ADDR_VAR 0 1
14137: PUSH
14138: LD_INT 22
14140: PUSH
14141: LD_OWVAR 2
14145: PUSH
14146: EMPTY
14147: LIST
14148: LIST
14149: PUSH
14150: LD_INT 21
14152: PUSH
14153: LD_INT 1
14155: PUSH
14156: EMPTY
14157: LIST
14158: LIST
14159: PUSH
14160: LD_INT 3
14162: PUSH
14163: LD_INT 23
14165: PUSH
14166: LD_INT 0
14168: PUSH
14169: EMPTY
14170: LIST
14171: LIST
14172: PUSH
14173: EMPTY
14174: LIST
14175: LIST
14176: PUSH
14177: EMPTY
14178: LIST
14179: LIST
14180: LIST
14181: PPUSH
14182: CALL_OW 69
14186: PUSH
14187: FOR_IN
14188: IFFALSE 14242
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14190: LD_VAR 0 1
14194: PPUSH
14195: CALL_OW 257
14199: PUSH
14200: LD_INT 1
14202: PUSH
14203: LD_INT 2
14205: PUSH
14206: LD_INT 3
14208: PUSH
14209: LD_INT 4
14211: PUSH
14212: EMPTY
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: IN
14218: IFFALSE 14240
// SetClass ( un , rand ( 1 , 4 ) ) ;
14220: LD_VAR 0 1
14224: PPUSH
14225: LD_INT 1
14227: PPUSH
14228: LD_INT 4
14230: PPUSH
14231: CALL_OW 12
14235: PPUSH
14236: CALL_OW 336
14240: GO 14187
14242: POP
14243: POP
// end ;
14244: PPOPN 1
14246: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14247: LD_EXP 29
14251: PUSH
14252: LD_EXP 41
14256: AND
14257: IFFALSE 14336
14259: GO 14261
14261: DISABLE
14262: LD_INT 0
14264: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14265: LD_ADDR_VAR 0 1
14269: PUSH
14270: LD_INT 22
14272: PUSH
14273: LD_OWVAR 2
14277: PUSH
14278: EMPTY
14279: LIST
14280: LIST
14281: PUSH
14282: LD_INT 21
14284: PUSH
14285: LD_INT 3
14287: PUSH
14288: EMPTY
14289: LIST
14290: LIST
14291: PUSH
14292: EMPTY
14293: LIST
14294: LIST
14295: PPUSH
14296: CALL_OW 69
14300: ST_TO_ADDR
// if not tmp then
14301: LD_VAR 0 1
14305: NOT
14306: IFFALSE 14310
// exit ;
14308: GO 14336
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14310: LD_VAR 0 1
14314: PUSH
14315: LD_INT 1
14317: PPUSH
14318: LD_VAR 0 1
14322: PPUSH
14323: CALL_OW 12
14327: ARRAY
14328: PPUSH
14329: LD_INT 100
14331: PPUSH
14332: CALL_OW 234
// end ;
14336: PPOPN 1
14338: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14339: LD_EXP 29
14343: PUSH
14344: LD_EXP 43
14348: AND
14349: IFFALSE 14447
14351: GO 14353
14353: DISABLE
14354: LD_INT 0
14356: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14357: LD_ADDR_VAR 0 1
14361: PUSH
14362: LD_INT 22
14364: PUSH
14365: LD_OWVAR 2
14369: PUSH
14370: EMPTY
14371: LIST
14372: LIST
14373: PUSH
14374: LD_INT 21
14376: PUSH
14377: LD_INT 1
14379: PUSH
14380: EMPTY
14381: LIST
14382: LIST
14383: PUSH
14384: EMPTY
14385: LIST
14386: LIST
14387: PPUSH
14388: CALL_OW 69
14392: ST_TO_ADDR
// if not tmp then
14393: LD_VAR 0 1
14397: NOT
14398: IFFALSE 14402
// exit ;
14400: GO 14447
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14402: LD_VAR 0 1
14406: PUSH
14407: LD_INT 1
14409: PPUSH
14410: LD_VAR 0 1
14414: PPUSH
14415: CALL_OW 12
14419: ARRAY
14420: PPUSH
14421: LD_INT 1
14423: PPUSH
14424: LD_INT 4
14426: PPUSH
14427: CALL_OW 12
14431: PPUSH
14432: LD_INT 3000
14434: PPUSH
14435: LD_INT 9000
14437: PPUSH
14438: CALL_OW 12
14442: PPUSH
14443: CALL_OW 492
// end ;
14447: PPOPN 1
14449: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14450: LD_EXP 29
14454: PUSH
14455: LD_EXP 44
14459: AND
14460: IFFALSE 14480
14462: GO 14464
14464: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14465: LD_INT 1
14467: PPUSH
14468: LD_OWVAR 2
14472: PPUSH
14473: LD_INT 0
14475: PPUSH
14476: CALL_OW 324
14480: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14481: LD_EXP 29
14485: PUSH
14486: LD_EXP 45
14490: AND
14491: IFFALSE 14574
14493: GO 14495
14495: DISABLE
14496: LD_INT 0
14498: PPUSH
14499: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14500: LD_ADDR_VAR 0 2
14504: PUSH
14505: LD_INT 22
14507: PUSH
14508: LD_OWVAR 2
14512: PUSH
14513: EMPTY
14514: LIST
14515: LIST
14516: PUSH
14517: LD_INT 21
14519: PUSH
14520: LD_INT 3
14522: PUSH
14523: EMPTY
14524: LIST
14525: LIST
14526: PUSH
14527: EMPTY
14528: LIST
14529: LIST
14530: PPUSH
14531: CALL_OW 69
14535: ST_TO_ADDR
// if not tmp then
14536: LD_VAR 0 2
14540: NOT
14541: IFFALSE 14545
// exit ;
14543: GO 14574
// for i in tmp do
14545: LD_ADDR_VAR 0 1
14549: PUSH
14550: LD_VAR 0 2
14554: PUSH
14555: FOR_IN
14556: IFFALSE 14572
// SetBLevel ( i , 10 ) ;
14558: LD_VAR 0 1
14562: PPUSH
14563: LD_INT 10
14565: PPUSH
14566: CALL_OW 241
14570: GO 14555
14572: POP
14573: POP
// end ;
14574: PPOPN 2
14576: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14577: LD_EXP 29
14581: PUSH
14582: LD_EXP 46
14586: AND
14587: IFFALSE 14698
14589: GO 14591
14591: DISABLE
14592: LD_INT 0
14594: PPUSH
14595: PPUSH
14596: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14597: LD_ADDR_VAR 0 3
14601: PUSH
14602: LD_INT 22
14604: PUSH
14605: LD_OWVAR 2
14609: PUSH
14610: EMPTY
14611: LIST
14612: LIST
14613: PUSH
14614: LD_INT 25
14616: PUSH
14617: LD_INT 1
14619: PUSH
14620: EMPTY
14621: LIST
14622: LIST
14623: PUSH
14624: EMPTY
14625: LIST
14626: LIST
14627: PPUSH
14628: CALL_OW 69
14632: ST_TO_ADDR
// if not tmp then
14633: LD_VAR 0 3
14637: NOT
14638: IFFALSE 14642
// exit ;
14640: GO 14698
// un := tmp [ rand ( 1 , tmp ) ] ;
14642: LD_ADDR_VAR 0 2
14646: PUSH
14647: LD_VAR 0 3
14651: PUSH
14652: LD_INT 1
14654: PPUSH
14655: LD_VAR 0 3
14659: PPUSH
14660: CALL_OW 12
14664: ARRAY
14665: ST_TO_ADDR
// if Crawls ( un ) then
14666: LD_VAR 0 2
14670: PPUSH
14671: CALL_OW 318
14675: IFFALSE 14686
// ComWalk ( un ) ;
14677: LD_VAR 0 2
14681: PPUSH
14682: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14686: LD_VAR 0 2
14690: PPUSH
14691: LD_INT 5
14693: PPUSH
14694: CALL_OW 336
// end ;
14698: PPOPN 3
14700: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
14701: LD_EXP 29
14705: PUSH
14706: LD_EXP 47
14710: AND
14711: PUSH
14712: LD_OWVAR 67
14716: PUSH
14717: LD_INT 4
14719: LESS
14720: AND
14721: IFFALSE 14740
14723: GO 14725
14725: DISABLE
// begin Difficulty := Difficulty + 1 ;
14726: LD_ADDR_OWVAR 67
14730: PUSH
14731: LD_OWVAR 67
14735: PUSH
14736: LD_INT 1
14738: PLUS
14739: ST_TO_ADDR
// end ;
14740: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14741: LD_EXP 29
14745: PUSH
14746: LD_EXP 48
14750: AND
14751: IFFALSE 14854
14753: GO 14755
14755: DISABLE
14756: LD_INT 0
14758: PPUSH
// begin for i := 1 to 5 do
14759: LD_ADDR_VAR 0 1
14763: PUSH
14764: DOUBLE
14765: LD_INT 1
14767: DEC
14768: ST_TO_ADDR
14769: LD_INT 5
14771: PUSH
14772: FOR_TO
14773: IFFALSE 14852
// begin uc_nation := nation_nature ;
14775: LD_ADDR_OWVAR 21
14779: PUSH
14780: LD_INT 0
14782: ST_TO_ADDR
// uc_side := 0 ;
14783: LD_ADDR_OWVAR 20
14787: PUSH
14788: LD_INT 0
14790: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14791: LD_ADDR_OWVAR 29
14795: PUSH
14796: LD_INT 12
14798: PUSH
14799: LD_INT 12
14801: PUSH
14802: EMPTY
14803: LIST
14804: LIST
14805: ST_TO_ADDR
// hc_agressivity := 20 ;
14806: LD_ADDR_OWVAR 35
14810: PUSH
14811: LD_INT 20
14813: ST_TO_ADDR
// hc_class := class_tiger ;
14814: LD_ADDR_OWVAR 28
14818: PUSH
14819: LD_INT 14
14821: ST_TO_ADDR
// hc_gallery :=  ;
14822: LD_ADDR_OWVAR 33
14826: PUSH
14827: LD_STRING 
14829: ST_TO_ADDR
// hc_name :=  ;
14830: LD_ADDR_OWVAR 26
14834: PUSH
14835: LD_STRING 
14837: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14838: CALL_OW 44
14842: PPUSH
14843: LD_INT 0
14845: PPUSH
14846: CALL_OW 51
// end ;
14850: GO 14772
14852: POP
14853: POP
// end ;
14854: PPOPN 1
14856: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14857: LD_EXP 29
14861: PUSH
14862: LD_EXP 49
14866: AND
14867: IFFALSE 14876
14869: GO 14871
14871: DISABLE
// StreamSibBomb ;
14872: CALL 14877 0 0
14876: END
// export function StreamSibBomb ; var i , x , y ; begin
14877: LD_INT 0
14879: PPUSH
14880: PPUSH
14881: PPUSH
14882: PPUSH
// result := false ;
14883: LD_ADDR_VAR 0 1
14887: PUSH
14888: LD_INT 0
14890: ST_TO_ADDR
// for i := 1 to 16 do
14891: LD_ADDR_VAR 0 2
14895: PUSH
14896: DOUBLE
14897: LD_INT 1
14899: DEC
14900: ST_TO_ADDR
14901: LD_INT 16
14903: PUSH
14904: FOR_TO
14905: IFFALSE 15104
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14907: LD_ADDR_VAR 0 3
14911: PUSH
14912: LD_INT 10
14914: PUSH
14915: LD_INT 20
14917: PUSH
14918: LD_INT 30
14920: PUSH
14921: LD_INT 40
14923: PUSH
14924: LD_INT 50
14926: PUSH
14927: LD_INT 60
14929: PUSH
14930: LD_INT 70
14932: PUSH
14933: LD_INT 80
14935: PUSH
14936: LD_INT 90
14938: PUSH
14939: LD_INT 100
14941: PUSH
14942: LD_INT 110
14944: PUSH
14945: LD_INT 120
14947: PUSH
14948: LD_INT 130
14950: PUSH
14951: LD_INT 140
14953: PUSH
14954: LD_INT 150
14956: PUSH
14957: EMPTY
14958: LIST
14959: LIST
14960: LIST
14961: LIST
14962: LIST
14963: LIST
14964: LIST
14965: LIST
14966: LIST
14967: LIST
14968: LIST
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: PUSH
14974: LD_INT 1
14976: PPUSH
14977: LD_INT 15
14979: PPUSH
14980: CALL_OW 12
14984: ARRAY
14985: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14986: LD_ADDR_VAR 0 4
14990: PUSH
14991: LD_INT 10
14993: PUSH
14994: LD_INT 20
14996: PUSH
14997: LD_INT 30
14999: PUSH
15000: LD_INT 40
15002: PUSH
15003: LD_INT 50
15005: PUSH
15006: LD_INT 60
15008: PUSH
15009: LD_INT 70
15011: PUSH
15012: LD_INT 80
15014: PUSH
15015: LD_INT 90
15017: PUSH
15018: LD_INT 100
15020: PUSH
15021: LD_INT 110
15023: PUSH
15024: LD_INT 120
15026: PUSH
15027: LD_INT 130
15029: PUSH
15030: LD_INT 140
15032: PUSH
15033: LD_INT 150
15035: PUSH
15036: EMPTY
15037: LIST
15038: LIST
15039: LIST
15040: LIST
15041: LIST
15042: LIST
15043: LIST
15044: LIST
15045: LIST
15046: LIST
15047: LIST
15048: LIST
15049: LIST
15050: LIST
15051: LIST
15052: PUSH
15053: LD_INT 1
15055: PPUSH
15056: LD_INT 15
15058: PPUSH
15059: CALL_OW 12
15063: ARRAY
15064: ST_TO_ADDR
// if ValidHex ( x , y ) then
15065: LD_VAR 0 3
15069: PPUSH
15070: LD_VAR 0 4
15074: PPUSH
15075: CALL_OW 488
15079: IFFALSE 15102
// begin result := [ x , y ] ;
15081: LD_ADDR_VAR 0 1
15085: PUSH
15086: LD_VAR 0 3
15090: PUSH
15091: LD_VAR 0 4
15095: PUSH
15096: EMPTY
15097: LIST
15098: LIST
15099: ST_TO_ADDR
// break ;
15100: GO 15104
// end ; end ;
15102: GO 14904
15104: POP
15105: POP
// if result then
15106: LD_VAR 0 1
15110: IFFALSE 15170
// begin ToLua ( playSibBomb() ) ;
15112: LD_STRING playSibBomb()
15114: PPUSH
15115: CALL_OW 559
// wait ( 0 0$14 ) ;
15119: LD_INT 490
15121: PPUSH
15122: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15126: LD_VAR 0 1
15130: PUSH
15131: LD_INT 1
15133: ARRAY
15134: PPUSH
15135: LD_VAR 0 1
15139: PUSH
15140: LD_INT 2
15142: ARRAY
15143: PPUSH
15144: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15148: LD_VAR 0 1
15152: PUSH
15153: LD_INT 1
15155: ARRAY
15156: PPUSH
15157: LD_VAR 0 1
15161: PUSH
15162: LD_INT 2
15164: ARRAY
15165: PPUSH
15166: CALL_OW 429
// end ; end ;
15170: LD_VAR 0 1
15174: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15175: LD_EXP 29
15179: PUSH
15180: LD_EXP 51
15184: AND
15185: IFFALSE 15197
15187: GO 15189
15189: DISABLE
// YouLost (  ) ;
15190: LD_STRING 
15192: PPUSH
15193: CALL_OW 104
15197: END
// every 0 0$1 trigger StreamModeActive and sFog do
15198: LD_EXP 29
15202: PUSH
15203: LD_EXP 50
15207: AND
15208: IFFALSE 15222
15210: GO 15212
15212: DISABLE
// FogOff ( your_side ) ;
15213: LD_OWVAR 2
15217: PPUSH
15218: CALL_OW 344
15222: END
// every 0 0$1 trigger StreamModeActive and sSun do
15223: LD_EXP 29
15227: PUSH
15228: LD_EXP 52
15232: AND
15233: IFFALSE 15261
15235: GO 15237
15237: DISABLE
// begin solar_recharge_percent := 0 ;
15238: LD_ADDR_OWVAR 79
15242: PUSH
15243: LD_INT 0
15245: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15246: LD_INT 10500
15248: PPUSH
15249: CALL_OW 67
// solar_recharge_percent := 100 ;
15253: LD_ADDR_OWVAR 79
15257: PUSH
15258: LD_INT 100
15260: ST_TO_ADDR
// end ;
15261: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15262: LD_EXP 29
15266: PUSH
15267: LD_EXP 53
15271: AND
15272: IFFALSE 15511
15274: GO 15276
15276: DISABLE
15277: LD_INT 0
15279: PPUSH
15280: PPUSH
15281: PPUSH
// begin tmp := [ ] ;
15282: LD_ADDR_VAR 0 3
15286: PUSH
15287: EMPTY
15288: ST_TO_ADDR
// for i := 1 to 6 do
15289: LD_ADDR_VAR 0 1
15293: PUSH
15294: DOUBLE
15295: LD_INT 1
15297: DEC
15298: ST_TO_ADDR
15299: LD_INT 6
15301: PUSH
15302: FOR_TO
15303: IFFALSE 15408
// begin uc_nation := nation_nature ;
15305: LD_ADDR_OWVAR 21
15309: PUSH
15310: LD_INT 0
15312: ST_TO_ADDR
// uc_side := 0 ;
15313: LD_ADDR_OWVAR 20
15317: PUSH
15318: LD_INT 0
15320: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15321: LD_ADDR_OWVAR 29
15325: PUSH
15326: LD_INT 12
15328: PUSH
15329: LD_INT 12
15331: PUSH
15332: EMPTY
15333: LIST
15334: LIST
15335: ST_TO_ADDR
// hc_agressivity := 20 ;
15336: LD_ADDR_OWVAR 35
15340: PUSH
15341: LD_INT 20
15343: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15344: LD_ADDR_OWVAR 28
15348: PUSH
15349: LD_INT 17
15351: ST_TO_ADDR
// hc_gallery :=  ;
15352: LD_ADDR_OWVAR 33
15356: PUSH
15357: LD_STRING 
15359: ST_TO_ADDR
// hc_name :=  ;
15360: LD_ADDR_OWVAR 26
15364: PUSH
15365: LD_STRING 
15367: ST_TO_ADDR
// un := CreateHuman ;
15368: LD_ADDR_VAR 0 2
15372: PUSH
15373: CALL_OW 44
15377: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15378: LD_VAR 0 2
15382: PPUSH
15383: LD_INT 1
15385: PPUSH
15386: CALL_OW 51
// tmp := tmp ^ un ;
15390: LD_ADDR_VAR 0 3
15394: PUSH
15395: LD_VAR 0 3
15399: PUSH
15400: LD_VAR 0 2
15404: ADD
15405: ST_TO_ADDR
// end ;
15406: GO 15302
15408: POP
15409: POP
// repeat wait ( 0 0$1 ) ;
15410: LD_INT 35
15412: PPUSH
15413: CALL_OW 67
// for un in tmp do
15417: LD_ADDR_VAR 0 2
15421: PUSH
15422: LD_VAR 0 3
15426: PUSH
15427: FOR_IN
15428: IFFALSE 15502
// begin if IsDead ( un ) then
15430: LD_VAR 0 2
15434: PPUSH
15435: CALL_OW 301
15439: IFFALSE 15459
// begin tmp := tmp diff un ;
15441: LD_ADDR_VAR 0 3
15445: PUSH
15446: LD_VAR 0 3
15450: PUSH
15451: LD_VAR 0 2
15455: DIFF
15456: ST_TO_ADDR
// continue ;
15457: GO 15427
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15459: LD_VAR 0 2
15463: PPUSH
15464: LD_INT 3
15466: PUSH
15467: LD_INT 22
15469: PUSH
15470: LD_INT 0
15472: PUSH
15473: EMPTY
15474: LIST
15475: LIST
15476: PUSH
15477: EMPTY
15478: LIST
15479: LIST
15480: PPUSH
15481: CALL_OW 69
15485: PPUSH
15486: LD_VAR 0 2
15490: PPUSH
15491: CALL_OW 74
15495: PPUSH
15496: CALL_OW 115
// end ;
15500: GO 15427
15502: POP
15503: POP
// until not tmp ;
15504: LD_VAR 0 3
15508: NOT
15509: IFFALSE 15410
// end ;
15511: PPOPN 3
15513: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15514: LD_EXP 29
15518: PUSH
15519: LD_EXP 54
15523: AND
15524: IFFALSE 15578
15526: GO 15528
15528: DISABLE
// begin ToLua ( displayTroll(); ) ;
15529: LD_STRING displayTroll();
15531: PPUSH
15532: CALL_OW 559
// wait ( 3 3$00 ) ;
15536: LD_INT 6300
15538: PPUSH
15539: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15543: LD_STRING hideTroll();
15545: PPUSH
15546: CALL_OW 559
// wait ( 1 1$00 ) ;
15550: LD_INT 2100
15552: PPUSH
15553: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15557: LD_STRING displayTroll();
15559: PPUSH
15560: CALL_OW 559
// wait ( 1 1$00 ) ;
15564: LD_INT 2100
15566: PPUSH
15567: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15571: LD_STRING hideTroll();
15573: PPUSH
15574: CALL_OW 559
// end ;
15578: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15579: LD_EXP 29
15583: PUSH
15584: LD_EXP 55
15588: AND
15589: IFFALSE 15652
15591: GO 15593
15593: DISABLE
15594: LD_INT 0
15596: PPUSH
// begin p := 0 ;
15597: LD_ADDR_VAR 0 1
15601: PUSH
15602: LD_INT 0
15604: ST_TO_ADDR
// repeat game_speed := 1 ;
15605: LD_ADDR_OWVAR 65
15609: PUSH
15610: LD_INT 1
15612: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15613: LD_INT 35
15615: PPUSH
15616: CALL_OW 67
// p := p + 1 ;
15620: LD_ADDR_VAR 0 1
15624: PUSH
15625: LD_VAR 0 1
15629: PUSH
15630: LD_INT 1
15632: PLUS
15633: ST_TO_ADDR
// until p >= 60 ;
15634: LD_VAR 0 1
15638: PUSH
15639: LD_INT 60
15641: GREATEREQUAL
15642: IFFALSE 15605
// game_speed := 4 ;
15644: LD_ADDR_OWVAR 65
15648: PUSH
15649: LD_INT 4
15651: ST_TO_ADDR
// end ;
15652: PPOPN 1
15654: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15655: LD_EXP 29
15659: PUSH
15660: LD_EXP 56
15664: AND
15665: IFFALSE 15811
15667: GO 15669
15669: DISABLE
15670: LD_INT 0
15672: PPUSH
15673: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15674: LD_ADDR_VAR 0 1
15678: PUSH
15679: LD_INT 22
15681: PUSH
15682: LD_OWVAR 2
15686: PUSH
15687: EMPTY
15688: LIST
15689: LIST
15690: PUSH
15691: LD_INT 2
15693: PUSH
15694: LD_INT 30
15696: PUSH
15697: LD_INT 0
15699: PUSH
15700: EMPTY
15701: LIST
15702: LIST
15703: PUSH
15704: LD_INT 30
15706: PUSH
15707: LD_INT 1
15709: PUSH
15710: EMPTY
15711: LIST
15712: LIST
15713: PUSH
15714: EMPTY
15715: LIST
15716: LIST
15717: LIST
15718: PUSH
15719: EMPTY
15720: LIST
15721: LIST
15722: PPUSH
15723: CALL_OW 69
15727: ST_TO_ADDR
// if not depot then
15728: LD_VAR 0 1
15732: NOT
15733: IFFALSE 15737
// exit ;
15735: GO 15811
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15737: LD_ADDR_VAR 0 2
15741: PUSH
15742: LD_VAR 0 1
15746: PUSH
15747: LD_INT 1
15749: PPUSH
15750: LD_VAR 0 1
15754: PPUSH
15755: CALL_OW 12
15759: ARRAY
15760: PPUSH
15761: CALL_OW 274
15765: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15766: LD_VAR 0 2
15770: PPUSH
15771: LD_INT 1
15773: PPUSH
15774: LD_INT 0
15776: PPUSH
15777: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15781: LD_VAR 0 2
15785: PPUSH
15786: LD_INT 2
15788: PPUSH
15789: LD_INT 0
15791: PPUSH
15792: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15796: LD_VAR 0 2
15800: PPUSH
15801: LD_INT 3
15803: PPUSH
15804: LD_INT 0
15806: PPUSH
15807: CALL_OW 277
// end ;
15811: PPOPN 2
15813: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15814: LD_EXP 29
15818: PUSH
15819: LD_EXP 57
15823: AND
15824: IFFALSE 15921
15826: GO 15828
15828: DISABLE
15829: LD_INT 0
15831: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15832: LD_ADDR_VAR 0 1
15836: PUSH
15837: LD_INT 22
15839: PUSH
15840: LD_OWVAR 2
15844: PUSH
15845: EMPTY
15846: LIST
15847: LIST
15848: PUSH
15849: LD_INT 21
15851: PUSH
15852: LD_INT 1
15854: PUSH
15855: EMPTY
15856: LIST
15857: LIST
15858: PUSH
15859: LD_INT 3
15861: PUSH
15862: LD_INT 23
15864: PUSH
15865: LD_INT 0
15867: PUSH
15868: EMPTY
15869: LIST
15870: LIST
15871: PUSH
15872: EMPTY
15873: LIST
15874: LIST
15875: PUSH
15876: EMPTY
15877: LIST
15878: LIST
15879: LIST
15880: PPUSH
15881: CALL_OW 69
15885: ST_TO_ADDR
// if not tmp then
15886: LD_VAR 0 1
15890: NOT
15891: IFFALSE 15895
// exit ;
15893: GO 15921
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15895: LD_VAR 0 1
15899: PUSH
15900: LD_INT 1
15902: PPUSH
15903: LD_VAR 0 1
15907: PPUSH
15908: CALL_OW 12
15912: ARRAY
15913: PPUSH
15914: LD_INT 200
15916: PPUSH
15917: CALL_OW 234
// end ;
15921: PPOPN 1
15923: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15924: LD_EXP 29
15928: PUSH
15929: LD_EXP 58
15933: AND
15934: IFFALSE 16013
15936: GO 15938
15938: DISABLE
15939: LD_INT 0
15941: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15942: LD_ADDR_VAR 0 1
15946: PUSH
15947: LD_INT 22
15949: PUSH
15950: LD_OWVAR 2
15954: PUSH
15955: EMPTY
15956: LIST
15957: LIST
15958: PUSH
15959: LD_INT 21
15961: PUSH
15962: LD_INT 2
15964: PUSH
15965: EMPTY
15966: LIST
15967: LIST
15968: PUSH
15969: EMPTY
15970: LIST
15971: LIST
15972: PPUSH
15973: CALL_OW 69
15977: ST_TO_ADDR
// if not tmp then
15978: LD_VAR 0 1
15982: NOT
15983: IFFALSE 15987
// exit ;
15985: GO 16013
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15987: LD_VAR 0 1
15991: PUSH
15992: LD_INT 1
15994: PPUSH
15995: LD_VAR 0 1
15999: PPUSH
16000: CALL_OW 12
16004: ARRAY
16005: PPUSH
16006: LD_INT 60
16008: PPUSH
16009: CALL_OW 234
// end ;
16013: PPOPN 1
16015: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16016: LD_EXP 29
16020: PUSH
16021: LD_EXP 59
16025: AND
16026: IFFALSE 16125
16028: GO 16030
16030: DISABLE
16031: LD_INT 0
16033: PPUSH
16034: PPUSH
// begin enable ;
16035: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16036: LD_ADDR_VAR 0 1
16040: PUSH
16041: LD_INT 22
16043: PUSH
16044: LD_OWVAR 2
16048: PUSH
16049: EMPTY
16050: LIST
16051: LIST
16052: PUSH
16053: LD_INT 61
16055: PUSH
16056: EMPTY
16057: LIST
16058: PUSH
16059: LD_INT 33
16061: PUSH
16062: LD_INT 2
16064: PUSH
16065: EMPTY
16066: LIST
16067: LIST
16068: PUSH
16069: EMPTY
16070: LIST
16071: LIST
16072: LIST
16073: PPUSH
16074: CALL_OW 69
16078: ST_TO_ADDR
// if not tmp then
16079: LD_VAR 0 1
16083: NOT
16084: IFFALSE 16088
// exit ;
16086: GO 16125
// for i in tmp do
16088: LD_ADDR_VAR 0 2
16092: PUSH
16093: LD_VAR 0 1
16097: PUSH
16098: FOR_IN
16099: IFFALSE 16123
// if IsControledBy ( i ) then
16101: LD_VAR 0 2
16105: PPUSH
16106: CALL_OW 312
16110: IFFALSE 16121
// ComUnlink ( i ) ;
16112: LD_VAR 0 2
16116: PPUSH
16117: CALL_OW 136
16121: GO 16098
16123: POP
16124: POP
// end ;
16125: PPOPN 2
16127: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16128: LD_EXP 29
16132: PUSH
16133: LD_EXP 60
16137: AND
16138: IFFALSE 16278
16140: GO 16142
16142: DISABLE
16143: LD_INT 0
16145: PPUSH
16146: PPUSH
// begin ToLua ( displayPowell(); ) ;
16147: LD_STRING displayPowell();
16149: PPUSH
16150: CALL_OW 559
// uc_side := 0 ;
16154: LD_ADDR_OWVAR 20
16158: PUSH
16159: LD_INT 0
16161: ST_TO_ADDR
// uc_nation := 2 ;
16162: LD_ADDR_OWVAR 21
16166: PUSH
16167: LD_INT 2
16169: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16170: LD_ADDR_OWVAR 37
16174: PUSH
16175: LD_INT 14
16177: ST_TO_ADDR
// vc_engine := engine_siberite ;
16178: LD_ADDR_OWVAR 39
16182: PUSH
16183: LD_INT 3
16185: ST_TO_ADDR
// vc_control := control_apeman ;
16186: LD_ADDR_OWVAR 38
16190: PUSH
16191: LD_INT 5
16193: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16194: LD_ADDR_OWVAR 40
16198: PUSH
16199: LD_INT 29
16201: ST_TO_ADDR
// un := CreateVehicle ;
16202: LD_ADDR_VAR 0 2
16206: PUSH
16207: CALL_OW 45
16211: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16212: LD_VAR 0 2
16216: PPUSH
16217: LD_INT 1
16219: PPUSH
16220: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16224: LD_INT 35
16226: PPUSH
16227: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16231: LD_VAR 0 2
16235: PPUSH
16236: LD_INT 22
16238: PUSH
16239: LD_OWVAR 2
16243: PUSH
16244: EMPTY
16245: LIST
16246: LIST
16247: PPUSH
16248: CALL_OW 69
16252: PPUSH
16253: LD_VAR 0 2
16257: PPUSH
16258: CALL_OW 74
16262: PPUSH
16263: CALL_OW 115
// until IsDead ( un ) ;
16267: LD_VAR 0 2
16271: PPUSH
16272: CALL_OW 301
16276: IFFALSE 16224
// end ;
16278: PPOPN 2
16280: END
// every 0 0$1 trigger StreamModeActive and sStu do
16281: LD_EXP 29
16285: PUSH
16286: LD_EXP 68
16290: AND
16291: IFFALSE 16307
16293: GO 16295
16295: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16296: LD_STRING displayStucuk();
16298: PPUSH
16299: CALL_OW 559
// ResetFog ;
16303: CALL_OW 335
// end ;
16307: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16308: LD_EXP 29
16312: PUSH
16313: LD_EXP 61
16317: AND
16318: IFFALSE 16459
16320: GO 16322
16322: DISABLE
16323: LD_INT 0
16325: PPUSH
16326: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16327: LD_ADDR_VAR 0 2
16331: PUSH
16332: LD_INT 22
16334: PUSH
16335: LD_OWVAR 2
16339: PUSH
16340: EMPTY
16341: LIST
16342: LIST
16343: PUSH
16344: LD_INT 21
16346: PUSH
16347: LD_INT 1
16349: PUSH
16350: EMPTY
16351: LIST
16352: LIST
16353: PUSH
16354: EMPTY
16355: LIST
16356: LIST
16357: PPUSH
16358: CALL_OW 69
16362: ST_TO_ADDR
// if not tmp then
16363: LD_VAR 0 2
16367: NOT
16368: IFFALSE 16372
// exit ;
16370: GO 16459
// un := tmp [ rand ( 1 , tmp ) ] ;
16372: LD_ADDR_VAR 0 1
16376: PUSH
16377: LD_VAR 0 2
16381: PUSH
16382: LD_INT 1
16384: PPUSH
16385: LD_VAR 0 2
16389: PPUSH
16390: CALL_OW 12
16394: ARRAY
16395: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16396: LD_VAR 0 1
16400: PPUSH
16401: LD_INT 0
16403: PPUSH
16404: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16408: LD_VAR 0 1
16412: PPUSH
16413: LD_OWVAR 3
16417: PUSH
16418: LD_VAR 0 1
16422: DIFF
16423: PPUSH
16424: LD_VAR 0 1
16428: PPUSH
16429: CALL_OW 74
16433: PPUSH
16434: CALL_OW 115
// wait ( 0 0$20 ) ;
16438: LD_INT 700
16440: PPUSH
16441: CALL_OW 67
// SetSide ( un , your_side ) ;
16445: LD_VAR 0 1
16449: PPUSH
16450: LD_OWVAR 2
16454: PPUSH
16455: CALL_OW 235
// end ;
16459: PPOPN 2
16461: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16462: LD_EXP 29
16466: PUSH
16467: LD_EXP 62
16471: AND
16472: IFFALSE 16578
16474: GO 16476
16476: DISABLE
16477: LD_INT 0
16479: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16480: LD_ADDR_VAR 0 1
16484: PUSH
16485: LD_INT 22
16487: PUSH
16488: LD_OWVAR 2
16492: PUSH
16493: EMPTY
16494: LIST
16495: LIST
16496: PUSH
16497: LD_INT 2
16499: PUSH
16500: LD_INT 30
16502: PUSH
16503: LD_INT 0
16505: PUSH
16506: EMPTY
16507: LIST
16508: LIST
16509: PUSH
16510: LD_INT 30
16512: PUSH
16513: LD_INT 1
16515: PUSH
16516: EMPTY
16517: LIST
16518: LIST
16519: PUSH
16520: EMPTY
16521: LIST
16522: LIST
16523: LIST
16524: PUSH
16525: EMPTY
16526: LIST
16527: LIST
16528: PPUSH
16529: CALL_OW 69
16533: ST_TO_ADDR
// if not depot then
16534: LD_VAR 0 1
16538: NOT
16539: IFFALSE 16543
// exit ;
16541: GO 16578
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16543: LD_VAR 0 1
16547: PUSH
16548: LD_INT 1
16550: ARRAY
16551: PPUSH
16552: CALL_OW 250
16556: PPUSH
16557: LD_VAR 0 1
16561: PUSH
16562: LD_INT 1
16564: ARRAY
16565: PPUSH
16566: CALL_OW 251
16570: PPUSH
16571: LD_INT 70
16573: PPUSH
16574: CALL_OW 495
// end ;
16578: PPOPN 1
16580: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16581: LD_EXP 29
16585: PUSH
16586: LD_EXP 63
16590: AND
16591: IFFALSE 16802
16593: GO 16595
16595: DISABLE
16596: LD_INT 0
16598: PPUSH
16599: PPUSH
16600: PPUSH
16601: PPUSH
16602: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16603: LD_ADDR_VAR 0 5
16607: PUSH
16608: LD_INT 22
16610: PUSH
16611: LD_OWVAR 2
16615: PUSH
16616: EMPTY
16617: LIST
16618: LIST
16619: PUSH
16620: LD_INT 21
16622: PUSH
16623: LD_INT 1
16625: PUSH
16626: EMPTY
16627: LIST
16628: LIST
16629: PUSH
16630: EMPTY
16631: LIST
16632: LIST
16633: PPUSH
16634: CALL_OW 69
16638: ST_TO_ADDR
// if not tmp then
16639: LD_VAR 0 5
16643: NOT
16644: IFFALSE 16648
// exit ;
16646: GO 16802
// for i in tmp do
16648: LD_ADDR_VAR 0 1
16652: PUSH
16653: LD_VAR 0 5
16657: PUSH
16658: FOR_IN
16659: IFFALSE 16800
// begin d := rand ( 0 , 5 ) ;
16661: LD_ADDR_VAR 0 4
16665: PUSH
16666: LD_INT 0
16668: PPUSH
16669: LD_INT 5
16671: PPUSH
16672: CALL_OW 12
16676: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16677: LD_ADDR_VAR 0 2
16681: PUSH
16682: LD_VAR 0 1
16686: PPUSH
16687: CALL_OW 250
16691: PPUSH
16692: LD_VAR 0 4
16696: PPUSH
16697: LD_INT 3
16699: PPUSH
16700: LD_INT 12
16702: PPUSH
16703: CALL_OW 12
16707: PPUSH
16708: CALL_OW 272
16712: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16713: LD_ADDR_VAR 0 3
16717: PUSH
16718: LD_VAR 0 1
16722: PPUSH
16723: CALL_OW 251
16727: PPUSH
16728: LD_VAR 0 4
16732: PPUSH
16733: LD_INT 3
16735: PPUSH
16736: LD_INT 12
16738: PPUSH
16739: CALL_OW 12
16743: PPUSH
16744: CALL_OW 273
16748: ST_TO_ADDR
// if ValidHex ( x , y ) then
16749: LD_VAR 0 2
16753: PPUSH
16754: LD_VAR 0 3
16758: PPUSH
16759: CALL_OW 488
16763: IFFALSE 16798
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16765: LD_VAR 0 1
16769: PPUSH
16770: LD_VAR 0 2
16774: PPUSH
16775: LD_VAR 0 3
16779: PPUSH
16780: LD_INT 3
16782: PPUSH
16783: LD_INT 6
16785: PPUSH
16786: CALL_OW 12
16790: PPUSH
16791: LD_INT 1
16793: PPUSH
16794: CALL_OW 483
// end ;
16798: GO 16658
16800: POP
16801: POP
// end ;
16802: PPOPN 5
16804: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16805: LD_EXP 29
16809: PUSH
16810: LD_EXP 64
16814: AND
16815: IFFALSE 16909
16817: GO 16819
16819: DISABLE
16820: LD_INT 0
16822: PPUSH
16823: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16824: LD_ADDR_VAR 0 2
16828: PUSH
16829: LD_INT 22
16831: PUSH
16832: LD_OWVAR 2
16836: PUSH
16837: EMPTY
16838: LIST
16839: LIST
16840: PUSH
16841: LD_INT 32
16843: PUSH
16844: LD_INT 1
16846: PUSH
16847: EMPTY
16848: LIST
16849: LIST
16850: PUSH
16851: LD_INT 21
16853: PUSH
16854: LD_INT 2
16856: PUSH
16857: EMPTY
16858: LIST
16859: LIST
16860: PUSH
16861: EMPTY
16862: LIST
16863: LIST
16864: LIST
16865: PPUSH
16866: CALL_OW 69
16870: ST_TO_ADDR
// if not tmp then
16871: LD_VAR 0 2
16875: NOT
16876: IFFALSE 16880
// exit ;
16878: GO 16909
// for i in tmp do
16880: LD_ADDR_VAR 0 1
16884: PUSH
16885: LD_VAR 0 2
16889: PUSH
16890: FOR_IN
16891: IFFALSE 16907
// SetFuel ( i , 0 ) ;
16893: LD_VAR 0 1
16897: PPUSH
16898: LD_INT 0
16900: PPUSH
16901: CALL_OW 240
16905: GO 16890
16907: POP
16908: POP
// end ;
16909: PPOPN 2
16911: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16912: LD_EXP 29
16916: PUSH
16917: LD_EXP 65
16921: AND
16922: IFFALSE 16988
16924: GO 16926
16926: DISABLE
16927: LD_INT 0
16929: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16930: LD_ADDR_VAR 0 1
16934: PUSH
16935: LD_INT 22
16937: PUSH
16938: LD_OWVAR 2
16942: PUSH
16943: EMPTY
16944: LIST
16945: LIST
16946: PUSH
16947: LD_INT 30
16949: PUSH
16950: LD_INT 29
16952: PUSH
16953: EMPTY
16954: LIST
16955: LIST
16956: PUSH
16957: EMPTY
16958: LIST
16959: LIST
16960: PPUSH
16961: CALL_OW 69
16965: ST_TO_ADDR
// if not tmp then
16966: LD_VAR 0 1
16970: NOT
16971: IFFALSE 16975
// exit ;
16973: GO 16988
// DestroyUnit ( tmp [ 1 ] ) ;
16975: LD_VAR 0 1
16979: PUSH
16980: LD_INT 1
16982: ARRAY
16983: PPUSH
16984: CALL_OW 65
// end ;
16988: PPOPN 1
16990: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16991: LD_EXP 29
16995: PUSH
16996: LD_EXP 67
17000: AND
17001: IFFALSE 17130
17003: GO 17005
17005: DISABLE
17006: LD_INT 0
17008: PPUSH
// begin uc_side := 0 ;
17009: LD_ADDR_OWVAR 20
17013: PUSH
17014: LD_INT 0
17016: ST_TO_ADDR
// uc_nation := nation_arabian ;
17017: LD_ADDR_OWVAR 21
17021: PUSH
17022: LD_INT 2
17024: ST_TO_ADDR
// hc_gallery :=  ;
17025: LD_ADDR_OWVAR 33
17029: PUSH
17030: LD_STRING 
17032: ST_TO_ADDR
// hc_name :=  ;
17033: LD_ADDR_OWVAR 26
17037: PUSH
17038: LD_STRING 
17040: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17041: LD_INT 1
17043: PPUSH
17044: LD_INT 11
17046: PPUSH
17047: LD_INT 10
17049: PPUSH
17050: CALL_OW 380
// un := CreateHuman ;
17054: LD_ADDR_VAR 0 1
17058: PUSH
17059: CALL_OW 44
17063: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17064: LD_VAR 0 1
17068: PPUSH
17069: LD_INT 1
17071: PPUSH
17072: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17076: LD_INT 35
17078: PPUSH
17079: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17083: LD_VAR 0 1
17087: PPUSH
17088: LD_INT 22
17090: PUSH
17091: LD_OWVAR 2
17095: PUSH
17096: EMPTY
17097: LIST
17098: LIST
17099: PPUSH
17100: CALL_OW 69
17104: PPUSH
17105: LD_VAR 0 1
17109: PPUSH
17110: CALL_OW 74
17114: PPUSH
17115: CALL_OW 115
// until IsDead ( un ) ;
17119: LD_VAR 0 1
17123: PPUSH
17124: CALL_OW 301
17128: IFFALSE 17076
// end ;
17130: PPOPN 1
17132: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17133: LD_EXP 29
17137: PUSH
17138: LD_EXP 69
17142: AND
17143: IFFALSE 17155
17145: GO 17147
17147: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17148: LD_STRING earthquake(getX(game), 0, 32)
17150: PPUSH
17151: CALL_OW 559
17155: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17156: LD_EXP 29
17160: PUSH
17161: LD_EXP 70
17165: AND
17166: IFFALSE 17257
17168: GO 17170
17170: DISABLE
17171: LD_INT 0
17173: PPUSH
// begin enable ;
17174: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17175: LD_ADDR_VAR 0 1
17179: PUSH
17180: LD_INT 22
17182: PUSH
17183: LD_OWVAR 2
17187: PUSH
17188: EMPTY
17189: LIST
17190: LIST
17191: PUSH
17192: LD_INT 21
17194: PUSH
17195: LD_INT 2
17197: PUSH
17198: EMPTY
17199: LIST
17200: LIST
17201: PUSH
17202: LD_INT 33
17204: PUSH
17205: LD_INT 3
17207: PUSH
17208: EMPTY
17209: LIST
17210: LIST
17211: PUSH
17212: EMPTY
17213: LIST
17214: LIST
17215: LIST
17216: PPUSH
17217: CALL_OW 69
17221: ST_TO_ADDR
// if not tmp then
17222: LD_VAR 0 1
17226: NOT
17227: IFFALSE 17231
// exit ;
17229: GO 17257
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17231: LD_VAR 0 1
17235: PUSH
17236: LD_INT 1
17238: PPUSH
17239: LD_VAR 0 1
17243: PPUSH
17244: CALL_OW 12
17248: ARRAY
17249: PPUSH
17250: LD_INT 1
17252: PPUSH
17253: CALL_OW 234
// end ;
17257: PPOPN 1
17259: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17260: LD_EXP 29
17264: PUSH
17265: LD_EXP 71
17269: AND
17270: IFFALSE 17411
17272: GO 17274
17274: DISABLE
17275: LD_INT 0
17277: PPUSH
17278: PPUSH
17279: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17280: LD_ADDR_VAR 0 3
17284: PUSH
17285: LD_INT 22
17287: PUSH
17288: LD_OWVAR 2
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: PUSH
17297: LD_INT 25
17299: PUSH
17300: LD_INT 1
17302: PUSH
17303: EMPTY
17304: LIST
17305: LIST
17306: PUSH
17307: EMPTY
17308: LIST
17309: LIST
17310: PPUSH
17311: CALL_OW 69
17315: ST_TO_ADDR
// if not tmp then
17316: LD_VAR 0 3
17320: NOT
17321: IFFALSE 17325
// exit ;
17323: GO 17411
// un := tmp [ rand ( 1 , tmp ) ] ;
17325: LD_ADDR_VAR 0 2
17329: PUSH
17330: LD_VAR 0 3
17334: PUSH
17335: LD_INT 1
17337: PPUSH
17338: LD_VAR 0 3
17342: PPUSH
17343: CALL_OW 12
17347: ARRAY
17348: ST_TO_ADDR
// if Crawls ( un ) then
17349: LD_VAR 0 2
17353: PPUSH
17354: CALL_OW 318
17358: IFFALSE 17369
// ComWalk ( un ) ;
17360: LD_VAR 0 2
17364: PPUSH
17365: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17369: LD_VAR 0 2
17373: PPUSH
17374: LD_INT 9
17376: PPUSH
17377: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17381: LD_INT 28
17383: PPUSH
17384: LD_OWVAR 2
17388: PPUSH
17389: LD_INT 2
17391: PPUSH
17392: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17396: LD_INT 29
17398: PPUSH
17399: LD_OWVAR 2
17403: PPUSH
17404: LD_INT 2
17406: PPUSH
17407: CALL_OW 322
// end ;
17411: PPOPN 3
17413: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17414: LD_EXP 29
17418: PUSH
17419: LD_EXP 72
17423: AND
17424: IFFALSE 17535
17426: GO 17428
17428: DISABLE
17429: LD_INT 0
17431: PPUSH
17432: PPUSH
17433: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17434: LD_ADDR_VAR 0 3
17438: PUSH
17439: LD_INT 22
17441: PUSH
17442: LD_OWVAR 2
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: PUSH
17451: LD_INT 25
17453: PUSH
17454: LD_INT 1
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: PUSH
17461: EMPTY
17462: LIST
17463: LIST
17464: PPUSH
17465: CALL_OW 69
17469: ST_TO_ADDR
// if not tmp then
17470: LD_VAR 0 3
17474: NOT
17475: IFFALSE 17479
// exit ;
17477: GO 17535
// un := tmp [ rand ( 1 , tmp ) ] ;
17479: LD_ADDR_VAR 0 2
17483: PUSH
17484: LD_VAR 0 3
17488: PUSH
17489: LD_INT 1
17491: PPUSH
17492: LD_VAR 0 3
17496: PPUSH
17497: CALL_OW 12
17501: ARRAY
17502: ST_TO_ADDR
// if Crawls ( un ) then
17503: LD_VAR 0 2
17507: PPUSH
17508: CALL_OW 318
17512: IFFALSE 17523
// ComWalk ( un ) ;
17514: LD_VAR 0 2
17518: PPUSH
17519: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17523: LD_VAR 0 2
17527: PPUSH
17528: LD_INT 8
17530: PPUSH
17531: CALL_OW 336
// end ;
17535: PPOPN 3
17537: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17538: LD_EXP 29
17542: PUSH
17543: LD_EXP 73
17547: AND
17548: IFFALSE 17692
17550: GO 17552
17552: DISABLE
17553: LD_INT 0
17555: PPUSH
17556: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17557: LD_ADDR_VAR 0 2
17561: PUSH
17562: LD_INT 22
17564: PUSH
17565: LD_OWVAR 2
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: PUSH
17574: LD_INT 21
17576: PUSH
17577: LD_INT 2
17579: PUSH
17580: EMPTY
17581: LIST
17582: LIST
17583: PUSH
17584: LD_INT 2
17586: PUSH
17587: LD_INT 34
17589: PUSH
17590: LD_INT 12
17592: PUSH
17593: EMPTY
17594: LIST
17595: LIST
17596: PUSH
17597: LD_INT 34
17599: PUSH
17600: LD_INT 51
17602: PUSH
17603: EMPTY
17604: LIST
17605: LIST
17606: PUSH
17607: LD_INT 34
17609: PUSH
17610: LD_INT 32
17612: PUSH
17613: EMPTY
17614: LIST
17615: LIST
17616: PUSH
17617: EMPTY
17618: LIST
17619: LIST
17620: LIST
17621: LIST
17622: PUSH
17623: EMPTY
17624: LIST
17625: LIST
17626: LIST
17627: PPUSH
17628: CALL_OW 69
17632: ST_TO_ADDR
// if not tmp then
17633: LD_VAR 0 2
17637: NOT
17638: IFFALSE 17642
// exit ;
17640: GO 17692
// for i in tmp do
17642: LD_ADDR_VAR 0 1
17646: PUSH
17647: LD_VAR 0 2
17651: PUSH
17652: FOR_IN
17653: IFFALSE 17690
// if GetCargo ( i , mat_artifact ) = 0 then
17655: LD_VAR 0 1
17659: PPUSH
17660: LD_INT 4
17662: PPUSH
17663: CALL_OW 289
17667: PUSH
17668: LD_INT 0
17670: EQUAL
17671: IFFALSE 17688
// SetCargo ( i , mat_siberit , 100 ) ;
17673: LD_VAR 0 1
17677: PPUSH
17678: LD_INT 3
17680: PPUSH
17681: LD_INT 100
17683: PPUSH
17684: CALL_OW 290
17688: GO 17652
17690: POP
17691: POP
// end ;
17692: PPOPN 2
17694: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17695: LD_EXP 29
17699: PUSH
17700: LD_EXP 74
17704: AND
17705: IFFALSE 17888
17707: GO 17709
17709: DISABLE
17710: LD_INT 0
17712: PPUSH
17713: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17714: LD_ADDR_VAR 0 2
17718: PUSH
17719: LD_INT 22
17721: PUSH
17722: LD_OWVAR 2
17726: PUSH
17727: EMPTY
17728: LIST
17729: LIST
17730: PPUSH
17731: CALL_OW 69
17735: ST_TO_ADDR
// if not tmp then
17736: LD_VAR 0 2
17740: NOT
17741: IFFALSE 17745
// exit ;
17743: GO 17888
// for i := 1 to 2 do
17745: LD_ADDR_VAR 0 1
17749: PUSH
17750: DOUBLE
17751: LD_INT 1
17753: DEC
17754: ST_TO_ADDR
17755: LD_INT 2
17757: PUSH
17758: FOR_TO
17759: IFFALSE 17886
// begin uc_side := your_side ;
17761: LD_ADDR_OWVAR 20
17765: PUSH
17766: LD_OWVAR 2
17770: ST_TO_ADDR
// uc_nation := nation_american ;
17771: LD_ADDR_OWVAR 21
17775: PUSH
17776: LD_INT 1
17778: ST_TO_ADDR
// vc_chassis := us_morphling ;
17779: LD_ADDR_OWVAR 37
17783: PUSH
17784: LD_INT 5
17786: ST_TO_ADDR
// vc_engine := engine_siberite ;
17787: LD_ADDR_OWVAR 39
17791: PUSH
17792: LD_INT 3
17794: ST_TO_ADDR
// vc_control := control_computer ;
17795: LD_ADDR_OWVAR 38
17799: PUSH
17800: LD_INT 3
17802: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17803: LD_ADDR_OWVAR 40
17807: PUSH
17808: LD_INT 10
17810: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17811: LD_VAR 0 2
17815: PUSH
17816: LD_INT 1
17818: ARRAY
17819: PPUSH
17820: CALL_OW 310
17824: NOT
17825: IFFALSE 17872
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17827: CALL_OW 45
17831: PPUSH
17832: LD_VAR 0 2
17836: PUSH
17837: LD_INT 1
17839: ARRAY
17840: PPUSH
17841: CALL_OW 250
17845: PPUSH
17846: LD_VAR 0 2
17850: PUSH
17851: LD_INT 1
17853: ARRAY
17854: PPUSH
17855: CALL_OW 251
17859: PPUSH
17860: LD_INT 12
17862: PPUSH
17863: LD_INT 1
17865: PPUSH
17866: CALL_OW 50
17870: GO 17884
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17872: CALL_OW 45
17876: PPUSH
17877: LD_INT 1
17879: PPUSH
17880: CALL_OW 51
// end ;
17884: GO 17758
17886: POP
17887: POP
// end ;
17888: PPOPN 2
17890: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17891: LD_EXP 29
17895: PUSH
17896: LD_EXP 75
17900: AND
17901: IFFALSE 18123
17903: GO 17905
17905: DISABLE
17906: LD_INT 0
17908: PPUSH
17909: PPUSH
17910: PPUSH
17911: PPUSH
17912: PPUSH
17913: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17914: LD_ADDR_VAR 0 6
17918: PUSH
17919: LD_INT 22
17921: PUSH
17922: LD_OWVAR 2
17926: PUSH
17927: EMPTY
17928: LIST
17929: LIST
17930: PUSH
17931: LD_INT 21
17933: PUSH
17934: LD_INT 1
17936: PUSH
17937: EMPTY
17938: LIST
17939: LIST
17940: PUSH
17941: LD_INT 3
17943: PUSH
17944: LD_INT 23
17946: PUSH
17947: LD_INT 0
17949: PUSH
17950: EMPTY
17951: LIST
17952: LIST
17953: PUSH
17954: EMPTY
17955: LIST
17956: LIST
17957: PUSH
17958: EMPTY
17959: LIST
17960: LIST
17961: LIST
17962: PPUSH
17963: CALL_OW 69
17967: ST_TO_ADDR
// if not tmp then
17968: LD_VAR 0 6
17972: NOT
17973: IFFALSE 17977
// exit ;
17975: GO 18123
// s1 := rand ( 1 , 4 ) ;
17977: LD_ADDR_VAR 0 2
17981: PUSH
17982: LD_INT 1
17984: PPUSH
17985: LD_INT 4
17987: PPUSH
17988: CALL_OW 12
17992: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17993: LD_ADDR_VAR 0 4
17997: PUSH
17998: LD_VAR 0 6
18002: PUSH
18003: LD_INT 1
18005: ARRAY
18006: PPUSH
18007: LD_VAR 0 2
18011: PPUSH
18012: CALL_OW 259
18016: ST_TO_ADDR
// if s1 = 1 then
18017: LD_VAR 0 2
18021: PUSH
18022: LD_INT 1
18024: EQUAL
18025: IFFALSE 18045
// s2 := rand ( 2 , 4 ) else
18027: LD_ADDR_VAR 0 3
18031: PUSH
18032: LD_INT 2
18034: PPUSH
18035: LD_INT 4
18037: PPUSH
18038: CALL_OW 12
18042: ST_TO_ADDR
18043: GO 18053
// s2 := 1 ;
18045: LD_ADDR_VAR 0 3
18049: PUSH
18050: LD_INT 1
18052: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18053: LD_ADDR_VAR 0 5
18057: PUSH
18058: LD_VAR 0 6
18062: PUSH
18063: LD_INT 1
18065: ARRAY
18066: PPUSH
18067: LD_VAR 0 3
18071: PPUSH
18072: CALL_OW 259
18076: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18077: LD_VAR 0 6
18081: PUSH
18082: LD_INT 1
18084: ARRAY
18085: PPUSH
18086: LD_VAR 0 2
18090: PPUSH
18091: LD_VAR 0 5
18095: PPUSH
18096: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18100: LD_VAR 0 6
18104: PUSH
18105: LD_INT 1
18107: ARRAY
18108: PPUSH
18109: LD_VAR 0 3
18113: PPUSH
18114: LD_VAR 0 4
18118: PPUSH
18119: CALL_OW 237
// end ;
18123: PPOPN 6
18125: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18126: LD_EXP 29
18130: PUSH
18131: LD_EXP 76
18135: AND
18136: IFFALSE 18215
18138: GO 18140
18140: DISABLE
18141: LD_INT 0
18143: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18144: LD_ADDR_VAR 0 1
18148: PUSH
18149: LD_INT 22
18151: PUSH
18152: LD_OWVAR 2
18156: PUSH
18157: EMPTY
18158: LIST
18159: LIST
18160: PUSH
18161: LD_INT 30
18163: PUSH
18164: LD_INT 3
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: PUSH
18171: EMPTY
18172: LIST
18173: LIST
18174: PPUSH
18175: CALL_OW 69
18179: ST_TO_ADDR
// if not tmp then
18180: LD_VAR 0 1
18184: NOT
18185: IFFALSE 18189
// exit ;
18187: GO 18215
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18189: LD_VAR 0 1
18193: PUSH
18194: LD_INT 1
18196: PPUSH
18197: LD_VAR 0 1
18201: PPUSH
18202: CALL_OW 12
18206: ARRAY
18207: PPUSH
18208: LD_INT 1
18210: PPUSH
18211: CALL_OW 234
// end ;
18215: PPOPN 1
18217: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18218: LD_EXP 29
18222: PUSH
18223: LD_EXP 77
18227: AND
18228: IFFALSE 18340
18230: GO 18232
18232: DISABLE
18233: LD_INT 0
18235: PPUSH
18236: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18237: LD_ADDR_VAR 0 2
18241: PUSH
18242: LD_INT 22
18244: PUSH
18245: LD_OWVAR 2
18249: PUSH
18250: EMPTY
18251: LIST
18252: LIST
18253: PUSH
18254: LD_INT 2
18256: PUSH
18257: LD_INT 30
18259: PUSH
18260: LD_INT 27
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: PUSH
18267: LD_INT 30
18269: PUSH
18270: LD_INT 26
18272: PUSH
18273: EMPTY
18274: LIST
18275: LIST
18276: PUSH
18277: LD_INT 30
18279: PUSH
18280: LD_INT 28
18282: PUSH
18283: EMPTY
18284: LIST
18285: LIST
18286: PUSH
18287: EMPTY
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: PUSH
18293: EMPTY
18294: LIST
18295: LIST
18296: PPUSH
18297: CALL_OW 69
18301: ST_TO_ADDR
// if not tmp then
18302: LD_VAR 0 2
18306: NOT
18307: IFFALSE 18311
// exit ;
18309: GO 18340
// for i in tmp do
18311: LD_ADDR_VAR 0 1
18315: PUSH
18316: LD_VAR 0 2
18320: PUSH
18321: FOR_IN
18322: IFFALSE 18338
// SetLives ( i , 1 ) ;
18324: LD_VAR 0 1
18328: PPUSH
18329: LD_INT 1
18331: PPUSH
18332: CALL_OW 234
18336: GO 18321
18338: POP
18339: POP
// end ;
18340: PPOPN 2
18342: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18343: LD_EXP 29
18347: PUSH
18348: LD_EXP 78
18352: AND
18353: IFFALSE 18640
18355: GO 18357
18357: DISABLE
18358: LD_INT 0
18360: PPUSH
18361: PPUSH
18362: PPUSH
// begin i := rand ( 1 , 7 ) ;
18363: LD_ADDR_VAR 0 1
18367: PUSH
18368: LD_INT 1
18370: PPUSH
18371: LD_INT 7
18373: PPUSH
18374: CALL_OW 12
18378: ST_TO_ADDR
// case i of 1 :
18379: LD_VAR 0 1
18383: PUSH
18384: LD_INT 1
18386: DOUBLE
18387: EQUAL
18388: IFTRUE 18392
18390: GO 18402
18392: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18393: LD_STRING earthquake(getX(game), 0, 32)
18395: PPUSH
18396: CALL_OW 559
18400: GO 18640
18402: LD_INT 2
18404: DOUBLE
18405: EQUAL
18406: IFTRUE 18410
18408: GO 18424
18410: POP
// begin ToLua ( displayStucuk(); ) ;
18411: LD_STRING displayStucuk();
18413: PPUSH
18414: CALL_OW 559
// ResetFog ;
18418: CALL_OW 335
// end ; 3 :
18422: GO 18640
18424: LD_INT 3
18426: DOUBLE
18427: EQUAL
18428: IFTRUE 18432
18430: GO 18536
18432: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18433: LD_ADDR_VAR 0 2
18437: PUSH
18438: LD_INT 22
18440: PUSH
18441: LD_OWVAR 2
18445: PUSH
18446: EMPTY
18447: LIST
18448: LIST
18449: PUSH
18450: LD_INT 25
18452: PUSH
18453: LD_INT 1
18455: PUSH
18456: EMPTY
18457: LIST
18458: LIST
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: PPUSH
18464: CALL_OW 69
18468: ST_TO_ADDR
// if not tmp then
18469: LD_VAR 0 2
18473: NOT
18474: IFFALSE 18478
// exit ;
18476: GO 18640
// un := tmp [ rand ( 1 , tmp ) ] ;
18478: LD_ADDR_VAR 0 3
18482: PUSH
18483: LD_VAR 0 2
18487: PUSH
18488: LD_INT 1
18490: PPUSH
18491: LD_VAR 0 2
18495: PPUSH
18496: CALL_OW 12
18500: ARRAY
18501: ST_TO_ADDR
// if Crawls ( un ) then
18502: LD_VAR 0 3
18506: PPUSH
18507: CALL_OW 318
18511: IFFALSE 18522
// ComWalk ( un ) ;
18513: LD_VAR 0 3
18517: PPUSH
18518: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18522: LD_VAR 0 3
18526: PPUSH
18527: LD_INT 8
18529: PPUSH
18530: CALL_OW 336
// end ; 4 :
18534: GO 18640
18536: LD_INT 4
18538: DOUBLE
18539: EQUAL
18540: IFTRUE 18544
18542: GO 18618
18544: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18545: LD_ADDR_VAR 0 2
18549: PUSH
18550: LD_INT 22
18552: PUSH
18553: LD_OWVAR 2
18557: PUSH
18558: EMPTY
18559: LIST
18560: LIST
18561: PUSH
18562: LD_INT 30
18564: PUSH
18565: LD_INT 29
18567: PUSH
18568: EMPTY
18569: LIST
18570: LIST
18571: PUSH
18572: EMPTY
18573: LIST
18574: LIST
18575: PPUSH
18576: CALL_OW 69
18580: ST_TO_ADDR
// if not tmp then
18581: LD_VAR 0 2
18585: NOT
18586: IFFALSE 18590
// exit ;
18588: GO 18640
// CenterNowOnUnits ( tmp [ 1 ] ) ;
18590: LD_VAR 0 2
18594: PUSH
18595: LD_INT 1
18597: ARRAY
18598: PPUSH
18599: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
18603: LD_VAR 0 2
18607: PUSH
18608: LD_INT 1
18610: ARRAY
18611: PPUSH
18612: CALL_OW 65
// end ; 5 .. 7 :
18616: GO 18640
18618: LD_INT 5
18620: DOUBLE
18621: GREATEREQUAL
18622: IFFALSE 18630
18624: LD_INT 7
18626: DOUBLE
18627: LESSEQUAL
18628: IFTRUE 18632
18630: GO 18639
18632: POP
// StreamSibBomb ; end ;
18633: CALL 14877 0 0
18637: GO 18640
18639: POP
// end ;
18640: PPOPN 3
18642: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18643: LD_EXP 29
18647: PUSH
18648: LD_EXP 79
18652: AND
18653: IFFALSE 18809
18655: GO 18657
18657: DISABLE
18658: LD_INT 0
18660: PPUSH
18661: PPUSH
18662: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18663: LD_ADDR_VAR 0 2
18667: PUSH
18668: LD_INT 81
18670: PUSH
18671: LD_OWVAR 2
18675: PUSH
18676: EMPTY
18677: LIST
18678: LIST
18679: PUSH
18680: LD_INT 2
18682: PUSH
18683: LD_INT 21
18685: PUSH
18686: LD_INT 1
18688: PUSH
18689: EMPTY
18690: LIST
18691: LIST
18692: PUSH
18693: LD_INT 21
18695: PUSH
18696: LD_INT 2
18698: PUSH
18699: EMPTY
18700: LIST
18701: LIST
18702: PUSH
18703: EMPTY
18704: LIST
18705: LIST
18706: LIST
18707: PUSH
18708: EMPTY
18709: LIST
18710: LIST
18711: PPUSH
18712: CALL_OW 69
18716: ST_TO_ADDR
// if not tmp then
18717: LD_VAR 0 2
18721: NOT
18722: IFFALSE 18726
// exit ;
18724: GO 18809
// p := 0 ;
18726: LD_ADDR_VAR 0 3
18730: PUSH
18731: LD_INT 0
18733: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18734: LD_INT 35
18736: PPUSH
18737: CALL_OW 67
// p := p + 1 ;
18741: LD_ADDR_VAR 0 3
18745: PUSH
18746: LD_VAR 0 3
18750: PUSH
18751: LD_INT 1
18753: PLUS
18754: ST_TO_ADDR
// for i in tmp do
18755: LD_ADDR_VAR 0 1
18759: PUSH
18760: LD_VAR 0 2
18764: PUSH
18765: FOR_IN
18766: IFFALSE 18797
// if GetLives ( i ) < 1000 then
18768: LD_VAR 0 1
18772: PPUSH
18773: CALL_OW 256
18777: PUSH
18778: LD_INT 1000
18780: LESS
18781: IFFALSE 18795
// SetLives ( i , 1000 ) ;
18783: LD_VAR 0 1
18787: PPUSH
18788: LD_INT 1000
18790: PPUSH
18791: CALL_OW 234
18795: GO 18765
18797: POP
18798: POP
// until p > 20 ;
18799: LD_VAR 0 3
18803: PUSH
18804: LD_INT 20
18806: GREATER
18807: IFFALSE 18734
// end ;
18809: PPOPN 3
18811: END
// every 0 0$1 trigger StreamModeActive and sTime do
18812: LD_EXP 29
18816: PUSH
18817: LD_EXP 80
18821: AND
18822: IFFALSE 18857
18824: GO 18826
18826: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18827: LD_INT 28
18829: PPUSH
18830: LD_OWVAR 2
18834: PPUSH
18835: LD_INT 2
18837: PPUSH
18838: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18842: LD_INT 30
18844: PPUSH
18845: LD_OWVAR 2
18849: PPUSH
18850: LD_INT 2
18852: PPUSH
18853: CALL_OW 322
// end ;
18857: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18858: LD_EXP 29
18862: PUSH
18863: LD_EXP 81
18867: AND
18868: IFFALSE 18989
18870: GO 18872
18872: DISABLE
18873: LD_INT 0
18875: PPUSH
18876: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18877: LD_ADDR_VAR 0 2
18881: PUSH
18882: LD_INT 22
18884: PUSH
18885: LD_OWVAR 2
18889: PUSH
18890: EMPTY
18891: LIST
18892: LIST
18893: PUSH
18894: LD_INT 21
18896: PUSH
18897: LD_INT 1
18899: PUSH
18900: EMPTY
18901: LIST
18902: LIST
18903: PUSH
18904: LD_INT 3
18906: PUSH
18907: LD_INT 23
18909: PUSH
18910: LD_INT 0
18912: PUSH
18913: EMPTY
18914: LIST
18915: LIST
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: PUSH
18921: EMPTY
18922: LIST
18923: LIST
18924: LIST
18925: PPUSH
18926: CALL_OW 69
18930: ST_TO_ADDR
// if not tmp then
18931: LD_VAR 0 2
18935: NOT
18936: IFFALSE 18940
// exit ;
18938: GO 18989
// for i in tmp do
18940: LD_ADDR_VAR 0 1
18944: PUSH
18945: LD_VAR 0 2
18949: PUSH
18950: FOR_IN
18951: IFFALSE 18987
// begin if Crawls ( i ) then
18953: LD_VAR 0 1
18957: PPUSH
18958: CALL_OW 318
18962: IFFALSE 18973
// ComWalk ( i ) ;
18964: LD_VAR 0 1
18968: PPUSH
18969: CALL_OW 138
// SetClass ( i , 2 ) ;
18973: LD_VAR 0 1
18977: PPUSH
18978: LD_INT 2
18980: PPUSH
18981: CALL_OW 336
// end ;
18985: GO 18950
18987: POP
18988: POP
// end ;
18989: PPOPN 2
18991: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18992: LD_EXP 29
18996: PUSH
18997: LD_EXP 82
19001: AND
19002: IFFALSE 19290
19004: GO 19006
19006: DISABLE
19007: LD_INT 0
19009: PPUSH
19010: PPUSH
19011: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19012: LD_OWVAR 2
19016: PPUSH
19017: LD_INT 9
19019: PPUSH
19020: LD_INT 1
19022: PPUSH
19023: LD_INT 1
19025: PPUSH
19026: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19030: LD_INT 9
19032: PPUSH
19033: LD_OWVAR 2
19037: PPUSH
19038: CALL_OW 343
// uc_side := 9 ;
19042: LD_ADDR_OWVAR 20
19046: PUSH
19047: LD_INT 9
19049: ST_TO_ADDR
// uc_nation := 2 ;
19050: LD_ADDR_OWVAR 21
19054: PUSH
19055: LD_INT 2
19057: ST_TO_ADDR
// hc_name := Dark Warrior ;
19058: LD_ADDR_OWVAR 26
19062: PUSH
19063: LD_STRING Dark Warrior
19065: ST_TO_ADDR
// hc_gallery :=  ;
19066: LD_ADDR_OWVAR 33
19070: PUSH
19071: LD_STRING 
19073: ST_TO_ADDR
// hc_noskilllimit := true ;
19074: LD_ADDR_OWVAR 76
19078: PUSH
19079: LD_INT 1
19081: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19082: LD_ADDR_OWVAR 31
19086: PUSH
19087: LD_INT 30
19089: PUSH
19090: LD_INT 30
19092: PUSH
19093: LD_INT 30
19095: PUSH
19096: LD_INT 30
19098: PUSH
19099: EMPTY
19100: LIST
19101: LIST
19102: LIST
19103: LIST
19104: ST_TO_ADDR
// un := CreateHuman ;
19105: LD_ADDR_VAR 0 3
19109: PUSH
19110: CALL_OW 44
19114: ST_TO_ADDR
// hc_noskilllimit := false ;
19115: LD_ADDR_OWVAR 76
19119: PUSH
19120: LD_INT 0
19122: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19123: LD_VAR 0 3
19127: PPUSH
19128: LD_INT 1
19130: PPUSH
19131: CALL_OW 51
// ToLua ( playRanger() ) ;
19135: LD_STRING playRanger()
19137: PPUSH
19138: CALL_OW 559
// p := 0 ;
19142: LD_ADDR_VAR 0 2
19146: PUSH
19147: LD_INT 0
19149: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19150: LD_INT 35
19152: PPUSH
19153: CALL_OW 67
// p := p + 1 ;
19157: LD_ADDR_VAR 0 2
19161: PUSH
19162: LD_VAR 0 2
19166: PUSH
19167: LD_INT 1
19169: PLUS
19170: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19171: LD_VAR 0 3
19175: PPUSH
19176: CALL_OW 256
19180: PUSH
19181: LD_INT 1000
19183: LESS
19184: IFFALSE 19198
// SetLives ( un , 1000 ) ;
19186: LD_VAR 0 3
19190: PPUSH
19191: LD_INT 1000
19193: PPUSH
19194: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19198: LD_VAR 0 3
19202: PPUSH
19203: LD_INT 81
19205: PUSH
19206: LD_OWVAR 2
19210: PUSH
19211: EMPTY
19212: LIST
19213: LIST
19214: PUSH
19215: LD_INT 91
19217: PUSH
19218: LD_VAR 0 3
19222: PUSH
19223: LD_INT 30
19225: PUSH
19226: EMPTY
19227: LIST
19228: LIST
19229: LIST
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: PPUSH
19235: CALL_OW 69
19239: PPUSH
19240: LD_VAR 0 3
19244: PPUSH
19245: CALL_OW 74
19249: PPUSH
19250: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
19254: LD_VAR 0 2
19258: PUSH
19259: LD_INT 80
19261: GREATER
19262: PUSH
19263: LD_VAR 0 3
19267: PPUSH
19268: CALL_OW 301
19272: OR
19273: IFFALSE 19150
// if un then
19275: LD_VAR 0 3
19279: IFFALSE 19290
// RemoveUnit ( un ) ;
19281: LD_VAR 0 3
19285: PPUSH
19286: CALL_OW 64
// end ;
19290: PPOPN 3
19292: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
19293: LD_EXP 83
19297: IFFALSE 19413
19299: GO 19301
19301: DISABLE
19302: LD_INT 0
19304: PPUSH
19305: PPUSH
19306: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19307: LD_ADDR_VAR 0 2
19311: PUSH
19312: LD_INT 81
19314: PUSH
19315: LD_OWVAR 2
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: PUSH
19324: LD_INT 21
19326: PUSH
19327: LD_INT 1
19329: PUSH
19330: EMPTY
19331: LIST
19332: LIST
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: PPUSH
19338: CALL_OW 69
19342: ST_TO_ADDR
// ToLua ( playComputer() ) ;
19343: LD_STRING playComputer()
19345: PPUSH
19346: CALL_OW 559
// if not tmp then
19350: LD_VAR 0 2
19354: NOT
19355: IFFALSE 19359
// exit ;
19357: GO 19413
// for i in tmp do
19359: LD_ADDR_VAR 0 1
19363: PUSH
19364: LD_VAR 0 2
19368: PUSH
19369: FOR_IN
19370: IFFALSE 19411
// for j := 1 to 4 do
19372: LD_ADDR_VAR 0 3
19376: PUSH
19377: DOUBLE
19378: LD_INT 1
19380: DEC
19381: ST_TO_ADDR
19382: LD_INT 4
19384: PUSH
19385: FOR_TO
19386: IFFALSE 19407
// SetSkill ( i , j , 10 ) ;
19388: LD_VAR 0 1
19392: PPUSH
19393: LD_VAR 0 3
19397: PPUSH
19398: LD_INT 10
19400: PPUSH
19401: CALL_OW 237
19405: GO 19385
19407: POP
19408: POP
19409: GO 19369
19411: POP
19412: POP
// end ;
19413: PPOPN 3
19415: END
// every 0 0$1 trigger s30 do var i , tmp ;
19416: LD_EXP 84
19420: IFFALSE 19489
19422: GO 19424
19424: DISABLE
19425: LD_INT 0
19427: PPUSH
19428: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19429: LD_ADDR_VAR 0 2
19433: PUSH
19434: LD_INT 22
19436: PUSH
19437: LD_OWVAR 2
19441: PUSH
19442: EMPTY
19443: LIST
19444: LIST
19445: PPUSH
19446: CALL_OW 69
19450: ST_TO_ADDR
// if not tmp then
19451: LD_VAR 0 2
19455: NOT
19456: IFFALSE 19460
// exit ;
19458: GO 19489
// for i in tmp do
19460: LD_ADDR_VAR 0 1
19464: PUSH
19465: LD_VAR 0 2
19469: PUSH
19470: FOR_IN
19471: IFFALSE 19487
// SetLives ( i , 300 ) ;
19473: LD_VAR 0 1
19477: PPUSH
19478: LD_INT 300
19480: PPUSH
19481: CALL_OW 234
19485: GO 19470
19487: POP
19488: POP
// end ;
19489: PPOPN 2
19491: END
// every 0 0$1 trigger s60 do var i , tmp ;
19492: LD_EXP 85
19496: IFFALSE 19565
19498: GO 19500
19500: DISABLE
19501: LD_INT 0
19503: PPUSH
19504: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19505: LD_ADDR_VAR 0 2
19509: PUSH
19510: LD_INT 22
19512: PUSH
19513: LD_OWVAR 2
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: PPUSH
19522: CALL_OW 69
19526: ST_TO_ADDR
// if not tmp then
19527: LD_VAR 0 2
19531: NOT
19532: IFFALSE 19536
// exit ;
19534: GO 19565
// for i in tmp do
19536: LD_ADDR_VAR 0 1
19540: PUSH
19541: LD_VAR 0 2
19545: PUSH
19546: FOR_IN
19547: IFFALSE 19563
// SetLives ( i , 600 ) ;
19549: LD_VAR 0 1
19553: PPUSH
19554: LD_INT 600
19556: PPUSH
19557: CALL_OW 234
19561: GO 19546
19563: POP
19564: POP
// end ;
19565: PPOPN 2
19567: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19568: LD_INT 0
19570: PPUSH
// case cmd of 301 :
19571: LD_VAR 0 1
19575: PUSH
19576: LD_INT 301
19578: DOUBLE
19579: EQUAL
19580: IFTRUE 19584
19582: GO 19616
19584: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
19585: LD_VAR 0 6
19589: PPUSH
19590: LD_VAR 0 7
19594: PPUSH
19595: LD_VAR 0 8
19599: PPUSH
19600: LD_VAR 0 4
19604: PPUSH
19605: LD_VAR 0 5
19609: PPUSH
19610: CALL 20825 0 5
19614: GO 19737
19616: LD_INT 302
19618: DOUBLE
19619: EQUAL
19620: IFTRUE 19624
19622: GO 19661
19624: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
19625: LD_VAR 0 6
19629: PPUSH
19630: LD_VAR 0 7
19634: PPUSH
19635: LD_VAR 0 8
19639: PPUSH
19640: LD_VAR 0 9
19644: PPUSH
19645: LD_VAR 0 4
19649: PPUSH
19650: LD_VAR 0 5
19654: PPUSH
19655: CALL 20916 0 6
19659: GO 19737
19661: LD_INT 303
19663: DOUBLE
19664: EQUAL
19665: IFTRUE 19669
19667: GO 19706
19669: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
19670: LD_VAR 0 6
19674: PPUSH
19675: LD_VAR 0 7
19679: PPUSH
19680: LD_VAR 0 8
19684: PPUSH
19685: LD_VAR 0 9
19689: PPUSH
19690: LD_VAR 0 4
19694: PPUSH
19695: LD_VAR 0 5
19699: PPUSH
19700: CALL 19742 0 6
19704: GO 19737
19706: LD_INT 304
19708: DOUBLE
19709: EQUAL
19710: IFTRUE 19714
19712: GO 19736
19714: POP
// hHackTeleport ( unit , x , y ) ; end ;
19715: LD_VAR 0 2
19719: PPUSH
19720: LD_VAR 0 4
19724: PPUSH
19725: LD_VAR 0 5
19729: PPUSH
19730: CALL 21509 0 3
19734: GO 19737
19736: POP
// end ;
19737: LD_VAR 0 12
19741: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
19742: LD_INT 0
19744: PPUSH
19745: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
19746: LD_VAR 0 1
19750: PUSH
19751: LD_INT 1
19753: LESS
19754: PUSH
19755: LD_VAR 0 1
19759: PUSH
19760: LD_INT 3
19762: GREATER
19763: OR
19764: PUSH
19765: LD_VAR 0 5
19769: PPUSH
19770: LD_VAR 0 6
19774: PPUSH
19775: CALL_OW 428
19779: OR
19780: IFFALSE 19784
// exit ;
19782: GO 20512
// uc_side := your_side ;
19784: LD_ADDR_OWVAR 20
19788: PUSH
19789: LD_OWVAR 2
19793: ST_TO_ADDR
// uc_nation := nation ;
19794: LD_ADDR_OWVAR 21
19798: PUSH
19799: LD_VAR 0 1
19803: ST_TO_ADDR
// bc_level = 1 ;
19804: LD_ADDR_OWVAR 43
19808: PUSH
19809: LD_INT 1
19811: ST_TO_ADDR
// case btype of 1 :
19812: LD_VAR 0 2
19816: PUSH
19817: LD_INT 1
19819: DOUBLE
19820: EQUAL
19821: IFTRUE 19825
19823: GO 19836
19825: POP
// bc_type := b_depot ; 2 :
19826: LD_ADDR_OWVAR 42
19830: PUSH
19831: LD_INT 0
19833: ST_TO_ADDR
19834: GO 20456
19836: LD_INT 2
19838: DOUBLE
19839: EQUAL
19840: IFTRUE 19844
19842: GO 19855
19844: POP
// bc_type := b_warehouse ; 3 :
19845: LD_ADDR_OWVAR 42
19849: PUSH
19850: LD_INT 1
19852: ST_TO_ADDR
19853: GO 20456
19855: LD_INT 3
19857: DOUBLE
19858: EQUAL
19859: IFTRUE 19863
19861: GO 19874
19863: POP
// bc_type := b_lab ; 4 .. 9 :
19864: LD_ADDR_OWVAR 42
19868: PUSH
19869: LD_INT 6
19871: ST_TO_ADDR
19872: GO 20456
19874: LD_INT 4
19876: DOUBLE
19877: GREATEREQUAL
19878: IFFALSE 19886
19880: LD_INT 9
19882: DOUBLE
19883: LESSEQUAL
19884: IFTRUE 19888
19886: GO 19948
19888: POP
// begin bc_type := b_lab_half ;
19889: LD_ADDR_OWVAR 42
19893: PUSH
19894: LD_INT 7
19896: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
19897: LD_ADDR_OWVAR 44
19901: PUSH
19902: LD_INT 10
19904: PUSH
19905: LD_INT 11
19907: PUSH
19908: LD_INT 12
19910: PUSH
19911: LD_INT 15
19913: PUSH
19914: LD_INT 14
19916: PUSH
19917: LD_INT 13
19919: PUSH
19920: EMPTY
19921: LIST
19922: LIST
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: PUSH
19928: LD_VAR 0 2
19932: PUSH
19933: LD_INT 3
19935: MINUS
19936: ARRAY
19937: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
19938: LD_ADDR_OWVAR 45
19942: PUSH
19943: LD_INT 9
19945: ST_TO_ADDR
// end ; 10 .. 13 :
19946: GO 20456
19948: LD_INT 10
19950: DOUBLE
19951: GREATEREQUAL
19952: IFFALSE 19960
19954: LD_INT 13
19956: DOUBLE
19957: LESSEQUAL
19958: IFTRUE 19962
19960: GO 20039
19962: POP
// begin bc_type := b_lab_full ;
19963: LD_ADDR_OWVAR 42
19967: PUSH
19968: LD_INT 8
19970: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
19971: LD_ADDR_OWVAR 44
19975: PUSH
19976: LD_INT 10
19978: PUSH
19979: LD_INT 12
19981: PUSH
19982: LD_INT 14
19984: PUSH
19985: LD_INT 13
19987: PUSH
19988: EMPTY
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: PUSH
19994: LD_VAR 0 2
19998: PUSH
19999: LD_INT 9
20001: MINUS
20002: ARRAY
20003: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
20004: LD_ADDR_OWVAR 45
20008: PUSH
20009: LD_INT 11
20011: PUSH
20012: LD_INT 15
20014: PUSH
20015: LD_INT 12
20017: PUSH
20018: LD_INT 15
20020: PUSH
20021: EMPTY
20022: LIST
20023: LIST
20024: LIST
20025: LIST
20026: PUSH
20027: LD_VAR 0 2
20031: PUSH
20032: LD_INT 9
20034: MINUS
20035: ARRAY
20036: ST_TO_ADDR
// end ; 14 :
20037: GO 20456
20039: LD_INT 14
20041: DOUBLE
20042: EQUAL
20043: IFTRUE 20047
20045: GO 20058
20047: POP
// bc_type := b_workshop ; 15 :
20048: LD_ADDR_OWVAR 42
20052: PUSH
20053: LD_INT 2
20055: ST_TO_ADDR
20056: GO 20456
20058: LD_INT 15
20060: DOUBLE
20061: EQUAL
20062: IFTRUE 20066
20064: GO 20077
20066: POP
// bc_type := b_factory ; 16 :
20067: LD_ADDR_OWVAR 42
20071: PUSH
20072: LD_INT 3
20074: ST_TO_ADDR
20075: GO 20456
20077: LD_INT 16
20079: DOUBLE
20080: EQUAL
20081: IFTRUE 20085
20083: GO 20096
20085: POP
// bc_type := b_ext_gun ; 17 :
20086: LD_ADDR_OWVAR 42
20090: PUSH
20091: LD_INT 17
20093: ST_TO_ADDR
20094: GO 20456
20096: LD_INT 17
20098: DOUBLE
20099: EQUAL
20100: IFTRUE 20104
20102: GO 20132
20104: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20105: LD_ADDR_OWVAR 42
20109: PUSH
20110: LD_INT 19
20112: PUSH
20113: LD_INT 23
20115: PUSH
20116: LD_INT 19
20118: PUSH
20119: EMPTY
20120: LIST
20121: LIST
20122: LIST
20123: PUSH
20124: LD_VAR 0 1
20128: ARRAY
20129: ST_TO_ADDR
20130: GO 20456
20132: LD_INT 18
20134: DOUBLE
20135: EQUAL
20136: IFTRUE 20140
20138: GO 20151
20140: POP
// bc_type := b_ext_radar ; 19 :
20141: LD_ADDR_OWVAR 42
20145: PUSH
20146: LD_INT 20
20148: ST_TO_ADDR
20149: GO 20456
20151: LD_INT 19
20153: DOUBLE
20154: EQUAL
20155: IFTRUE 20159
20157: GO 20170
20159: POP
// bc_type := b_ext_radio ; 20 :
20160: LD_ADDR_OWVAR 42
20164: PUSH
20165: LD_INT 22
20167: ST_TO_ADDR
20168: GO 20456
20170: LD_INT 20
20172: DOUBLE
20173: EQUAL
20174: IFTRUE 20178
20176: GO 20189
20178: POP
// bc_type := b_ext_siberium ; 21 :
20179: LD_ADDR_OWVAR 42
20183: PUSH
20184: LD_INT 21
20186: ST_TO_ADDR
20187: GO 20456
20189: LD_INT 21
20191: DOUBLE
20192: EQUAL
20193: IFTRUE 20197
20195: GO 20208
20197: POP
// bc_type := b_ext_computer ; 22 :
20198: LD_ADDR_OWVAR 42
20202: PUSH
20203: LD_INT 24
20205: ST_TO_ADDR
20206: GO 20456
20208: LD_INT 22
20210: DOUBLE
20211: EQUAL
20212: IFTRUE 20216
20214: GO 20227
20216: POP
// bc_type := b_ext_track ; 23 :
20217: LD_ADDR_OWVAR 42
20221: PUSH
20222: LD_INT 16
20224: ST_TO_ADDR
20225: GO 20456
20227: LD_INT 23
20229: DOUBLE
20230: EQUAL
20231: IFTRUE 20235
20233: GO 20246
20235: POP
// bc_type := b_ext_laser ; 24 :
20236: LD_ADDR_OWVAR 42
20240: PUSH
20241: LD_INT 25
20243: ST_TO_ADDR
20244: GO 20456
20246: LD_INT 24
20248: DOUBLE
20249: EQUAL
20250: IFTRUE 20254
20252: GO 20265
20254: POP
// bc_type := b_control_tower ; 25 :
20255: LD_ADDR_OWVAR 42
20259: PUSH
20260: LD_INT 36
20262: ST_TO_ADDR
20263: GO 20456
20265: LD_INT 25
20267: DOUBLE
20268: EQUAL
20269: IFTRUE 20273
20271: GO 20284
20273: POP
// bc_type := b_breastwork ; 26 :
20274: LD_ADDR_OWVAR 42
20278: PUSH
20279: LD_INT 31
20281: ST_TO_ADDR
20282: GO 20456
20284: LD_INT 26
20286: DOUBLE
20287: EQUAL
20288: IFTRUE 20292
20290: GO 20303
20292: POP
// bc_type := b_bunker ; 27 :
20293: LD_ADDR_OWVAR 42
20297: PUSH
20298: LD_INT 32
20300: ST_TO_ADDR
20301: GO 20456
20303: LD_INT 27
20305: DOUBLE
20306: EQUAL
20307: IFTRUE 20311
20309: GO 20322
20311: POP
// bc_type := b_turret ; 28 :
20312: LD_ADDR_OWVAR 42
20316: PUSH
20317: LD_INT 33
20319: ST_TO_ADDR
20320: GO 20456
20322: LD_INT 28
20324: DOUBLE
20325: EQUAL
20326: IFTRUE 20330
20328: GO 20341
20330: POP
// bc_type := b_armoury ; 29 :
20331: LD_ADDR_OWVAR 42
20335: PUSH
20336: LD_INT 4
20338: ST_TO_ADDR
20339: GO 20456
20341: LD_INT 29
20343: DOUBLE
20344: EQUAL
20345: IFTRUE 20349
20347: GO 20360
20349: POP
// bc_type := b_barracks ; 30 :
20350: LD_ADDR_OWVAR 42
20354: PUSH
20355: LD_INT 5
20357: ST_TO_ADDR
20358: GO 20456
20360: LD_INT 30
20362: DOUBLE
20363: EQUAL
20364: IFTRUE 20368
20366: GO 20379
20368: POP
// bc_type := b_solar_power ; 31 :
20369: LD_ADDR_OWVAR 42
20373: PUSH
20374: LD_INT 27
20376: ST_TO_ADDR
20377: GO 20456
20379: LD_INT 31
20381: DOUBLE
20382: EQUAL
20383: IFTRUE 20387
20385: GO 20398
20387: POP
// bc_type := b_oil_power ; 32 :
20388: LD_ADDR_OWVAR 42
20392: PUSH
20393: LD_INT 26
20395: ST_TO_ADDR
20396: GO 20456
20398: LD_INT 32
20400: DOUBLE
20401: EQUAL
20402: IFTRUE 20406
20404: GO 20417
20406: POP
// bc_type := b_siberite_power ; 33 :
20407: LD_ADDR_OWVAR 42
20411: PUSH
20412: LD_INT 28
20414: ST_TO_ADDR
20415: GO 20456
20417: LD_INT 33
20419: DOUBLE
20420: EQUAL
20421: IFTRUE 20425
20423: GO 20436
20425: POP
// bc_type := b_oil_mine ; 34 :
20426: LD_ADDR_OWVAR 42
20430: PUSH
20431: LD_INT 29
20433: ST_TO_ADDR
20434: GO 20456
20436: LD_INT 34
20438: DOUBLE
20439: EQUAL
20440: IFTRUE 20444
20442: GO 20455
20444: POP
// bc_type := b_siberite_mine ; end ;
20445: LD_ADDR_OWVAR 42
20449: PUSH
20450: LD_INT 30
20452: ST_TO_ADDR
20453: GO 20456
20455: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
20456: LD_ADDR_VAR 0 8
20460: PUSH
20461: LD_VAR 0 5
20465: PPUSH
20466: LD_VAR 0 6
20470: PPUSH
20471: LD_VAR 0 3
20475: PPUSH
20476: CALL_OW 47
20480: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
20481: LD_OWVAR 42
20485: PUSH
20486: LD_INT 32
20488: PUSH
20489: LD_INT 33
20491: PUSH
20492: EMPTY
20493: LIST
20494: LIST
20495: IN
20496: IFFALSE 20512
// PlaceWeaponTurret ( b , weapon ) ;
20498: LD_VAR 0 8
20502: PPUSH
20503: LD_VAR 0 4
20507: PPUSH
20508: CALL_OW 431
// end ;
20512: LD_VAR 0 7
20516: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
20517: LD_INT 0
20519: PPUSH
20520: PPUSH
20521: PPUSH
20522: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20523: LD_ADDR_VAR 0 4
20527: PUSH
20528: LD_INT 22
20530: PUSH
20531: LD_OWVAR 2
20535: PUSH
20536: EMPTY
20537: LIST
20538: LIST
20539: PUSH
20540: LD_INT 2
20542: PUSH
20543: LD_INT 30
20545: PUSH
20546: LD_INT 0
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: PUSH
20553: LD_INT 30
20555: PUSH
20556: LD_INT 1
20558: PUSH
20559: EMPTY
20560: LIST
20561: LIST
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: LIST
20567: PUSH
20568: EMPTY
20569: LIST
20570: LIST
20571: PPUSH
20572: CALL_OW 69
20576: ST_TO_ADDR
// if not tmp then
20577: LD_VAR 0 4
20581: NOT
20582: IFFALSE 20586
// exit ;
20584: GO 20645
// for i in tmp do
20586: LD_ADDR_VAR 0 2
20590: PUSH
20591: LD_VAR 0 4
20595: PUSH
20596: FOR_IN
20597: IFFALSE 20643
// for j = 1 to 3 do
20599: LD_ADDR_VAR 0 3
20603: PUSH
20604: DOUBLE
20605: LD_INT 1
20607: DEC
20608: ST_TO_ADDR
20609: LD_INT 3
20611: PUSH
20612: FOR_TO
20613: IFFALSE 20639
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
20615: LD_VAR 0 2
20619: PPUSH
20620: CALL_OW 274
20624: PPUSH
20625: LD_VAR 0 3
20629: PPUSH
20630: LD_INT 99999
20632: PPUSH
20633: CALL_OW 277
20637: GO 20612
20639: POP
20640: POP
20641: GO 20596
20643: POP
20644: POP
// end ;
20645: LD_VAR 0 1
20649: RET
// export function hHackSetLevel10 ; var i , j ; begin
20650: LD_INT 0
20652: PPUSH
20653: PPUSH
20654: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20655: LD_ADDR_VAR 0 2
20659: PUSH
20660: LD_INT 21
20662: PUSH
20663: LD_INT 1
20665: PUSH
20666: EMPTY
20667: LIST
20668: LIST
20669: PPUSH
20670: CALL_OW 69
20674: PUSH
20675: FOR_IN
20676: IFFALSE 20728
// if IsSelected ( i ) then
20678: LD_VAR 0 2
20682: PPUSH
20683: CALL_OW 306
20687: IFFALSE 20726
// begin for j := 1 to 4 do
20689: LD_ADDR_VAR 0 3
20693: PUSH
20694: DOUBLE
20695: LD_INT 1
20697: DEC
20698: ST_TO_ADDR
20699: LD_INT 4
20701: PUSH
20702: FOR_TO
20703: IFFALSE 20724
// SetSkill ( i , j , 10 ) ;
20705: LD_VAR 0 2
20709: PPUSH
20710: LD_VAR 0 3
20714: PPUSH
20715: LD_INT 10
20717: PPUSH
20718: CALL_OW 237
20722: GO 20702
20724: POP
20725: POP
// end ;
20726: GO 20675
20728: POP
20729: POP
// end ;
20730: LD_VAR 0 1
20734: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
20735: LD_INT 0
20737: PPUSH
20738: PPUSH
20739: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
20740: LD_ADDR_VAR 0 2
20744: PUSH
20745: LD_INT 22
20747: PUSH
20748: LD_OWVAR 2
20752: PUSH
20753: EMPTY
20754: LIST
20755: LIST
20756: PUSH
20757: LD_INT 21
20759: PUSH
20760: LD_INT 1
20762: PUSH
20763: EMPTY
20764: LIST
20765: LIST
20766: PUSH
20767: EMPTY
20768: LIST
20769: LIST
20770: PPUSH
20771: CALL_OW 69
20775: PUSH
20776: FOR_IN
20777: IFFALSE 20818
// begin for j := 1 to 4 do
20779: LD_ADDR_VAR 0 3
20783: PUSH
20784: DOUBLE
20785: LD_INT 1
20787: DEC
20788: ST_TO_ADDR
20789: LD_INT 4
20791: PUSH
20792: FOR_TO
20793: IFFALSE 20814
// SetSkill ( i , j , 10 ) ;
20795: LD_VAR 0 2
20799: PPUSH
20800: LD_VAR 0 3
20804: PPUSH
20805: LD_INT 10
20807: PPUSH
20808: CALL_OW 237
20812: GO 20792
20814: POP
20815: POP
// end ;
20816: GO 20776
20818: POP
20819: POP
// end ;
20820: LD_VAR 0 1
20824: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
20825: LD_INT 0
20827: PPUSH
// uc_side := your_side ;
20828: LD_ADDR_OWVAR 20
20832: PUSH
20833: LD_OWVAR 2
20837: ST_TO_ADDR
// uc_nation := nation ;
20838: LD_ADDR_OWVAR 21
20842: PUSH
20843: LD_VAR 0 1
20847: ST_TO_ADDR
// InitHc ;
20848: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
20852: LD_INT 0
20854: PPUSH
20855: LD_VAR 0 2
20859: PPUSH
20860: LD_VAR 0 3
20864: PPUSH
20865: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
20869: LD_VAR 0 4
20873: PPUSH
20874: LD_VAR 0 5
20878: PPUSH
20879: CALL_OW 428
20883: PUSH
20884: LD_INT 0
20886: EQUAL
20887: IFFALSE 20911
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
20889: CALL_OW 44
20893: PPUSH
20894: LD_VAR 0 4
20898: PPUSH
20899: LD_VAR 0 5
20903: PPUSH
20904: LD_INT 1
20906: PPUSH
20907: CALL_OW 48
// end ;
20911: LD_VAR 0 6
20915: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
20916: LD_INT 0
20918: PPUSH
20919: PPUSH
// uc_side := your_side ;
20920: LD_ADDR_OWVAR 20
20924: PUSH
20925: LD_OWVAR 2
20929: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
20930: LD_VAR 0 1
20934: PUSH
20935: LD_INT 1
20937: PUSH
20938: LD_INT 2
20940: PUSH
20941: LD_INT 3
20943: PUSH
20944: LD_INT 4
20946: PUSH
20947: LD_INT 5
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: IN
20957: IFFALSE 20969
// uc_nation := nation_american else
20959: LD_ADDR_OWVAR 21
20963: PUSH
20964: LD_INT 1
20966: ST_TO_ADDR
20967: GO 21012
// if chassis in [ 11 , 12 , 13 , 14 ] then
20969: LD_VAR 0 1
20973: PUSH
20974: LD_INT 11
20976: PUSH
20977: LD_INT 12
20979: PUSH
20980: LD_INT 13
20982: PUSH
20983: LD_INT 14
20985: PUSH
20986: EMPTY
20987: LIST
20988: LIST
20989: LIST
20990: LIST
20991: IN
20992: IFFALSE 21004
// uc_nation := nation_arabian else
20994: LD_ADDR_OWVAR 21
20998: PUSH
20999: LD_INT 2
21001: ST_TO_ADDR
21002: GO 21012
// uc_nation := nation_russian ;
21004: LD_ADDR_OWVAR 21
21008: PUSH
21009: LD_INT 3
21011: ST_TO_ADDR
// vc_chassis := chassis ;
21012: LD_ADDR_OWVAR 37
21016: PUSH
21017: LD_VAR 0 1
21021: ST_TO_ADDR
// vc_engine := engine ;
21022: LD_ADDR_OWVAR 39
21026: PUSH
21027: LD_VAR 0 2
21031: ST_TO_ADDR
// vc_control := control ;
21032: LD_ADDR_OWVAR 38
21036: PUSH
21037: LD_VAR 0 3
21041: ST_TO_ADDR
// vc_weapon := weapon ;
21042: LD_ADDR_OWVAR 40
21046: PUSH
21047: LD_VAR 0 4
21051: ST_TO_ADDR
// un := CreateVehicle ;
21052: LD_ADDR_VAR 0 8
21056: PUSH
21057: CALL_OW 45
21061: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21062: LD_VAR 0 8
21066: PPUSH
21067: LD_INT 0
21069: PPUSH
21070: LD_INT 5
21072: PPUSH
21073: CALL_OW 12
21077: PPUSH
21078: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21082: LD_VAR 0 8
21086: PPUSH
21087: LD_VAR 0 5
21091: PPUSH
21092: LD_VAR 0 6
21096: PPUSH
21097: LD_INT 1
21099: PPUSH
21100: CALL_OW 48
// end ;
21104: LD_VAR 0 7
21108: RET
// export hInvincible ; every 1 do
21109: GO 21111
21111: DISABLE
// hInvincible := [ ] ;
21112: LD_ADDR_EXP 86
21116: PUSH
21117: EMPTY
21118: ST_TO_ADDR
21119: END
// every 10 do var i ;
21120: GO 21122
21122: DISABLE
21123: LD_INT 0
21125: PPUSH
// begin enable ;
21126: ENABLE
// if not hInvincible then
21127: LD_EXP 86
21131: NOT
21132: IFFALSE 21136
// exit ;
21134: GO 21180
// for i in hInvincible do
21136: LD_ADDR_VAR 0 1
21140: PUSH
21141: LD_EXP 86
21145: PUSH
21146: FOR_IN
21147: IFFALSE 21178
// if GetLives ( i ) < 1000 then
21149: LD_VAR 0 1
21153: PPUSH
21154: CALL_OW 256
21158: PUSH
21159: LD_INT 1000
21161: LESS
21162: IFFALSE 21176
// SetLives ( i , 1000 ) ;
21164: LD_VAR 0 1
21168: PPUSH
21169: LD_INT 1000
21171: PPUSH
21172: CALL_OW 234
21176: GO 21146
21178: POP
21179: POP
// end ;
21180: PPOPN 1
21182: END
// export function hHackInvincible ; var i ; begin
21183: LD_INT 0
21185: PPUSH
21186: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21187: LD_ADDR_VAR 0 2
21191: PUSH
21192: LD_INT 2
21194: PUSH
21195: LD_INT 21
21197: PUSH
21198: LD_INT 1
21200: PUSH
21201: EMPTY
21202: LIST
21203: LIST
21204: PUSH
21205: LD_INT 21
21207: PUSH
21208: LD_INT 2
21210: PUSH
21211: EMPTY
21212: LIST
21213: LIST
21214: PUSH
21215: EMPTY
21216: LIST
21217: LIST
21218: LIST
21219: PPUSH
21220: CALL_OW 69
21224: PUSH
21225: FOR_IN
21226: IFFALSE 21287
// if IsSelected ( i ) then
21228: LD_VAR 0 2
21232: PPUSH
21233: CALL_OW 306
21237: IFFALSE 21285
// begin if i in hInvincible then
21239: LD_VAR 0 2
21243: PUSH
21244: LD_EXP 86
21248: IN
21249: IFFALSE 21269
// hInvincible := hInvincible diff i else
21251: LD_ADDR_EXP 86
21255: PUSH
21256: LD_EXP 86
21260: PUSH
21261: LD_VAR 0 2
21265: DIFF
21266: ST_TO_ADDR
21267: GO 21285
// hInvincible := hInvincible union i ;
21269: LD_ADDR_EXP 86
21273: PUSH
21274: LD_EXP 86
21278: PUSH
21279: LD_VAR 0 2
21283: UNION
21284: ST_TO_ADDR
// end ;
21285: GO 21225
21287: POP
21288: POP
// end ;
21289: LD_VAR 0 1
21293: RET
// export function hHackInvisible ; var i , j ; begin
21294: LD_INT 0
21296: PPUSH
21297: PPUSH
21298: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21299: LD_ADDR_VAR 0 2
21303: PUSH
21304: LD_INT 21
21306: PUSH
21307: LD_INT 1
21309: PUSH
21310: EMPTY
21311: LIST
21312: LIST
21313: PPUSH
21314: CALL_OW 69
21318: PUSH
21319: FOR_IN
21320: IFFALSE 21344
// if IsSelected ( i ) then
21322: LD_VAR 0 2
21326: PPUSH
21327: CALL_OW 306
21331: IFFALSE 21342
// ComForceInvisible ( i ) ;
21333: LD_VAR 0 2
21337: PPUSH
21338: CALL_OW 496
21342: GO 21319
21344: POP
21345: POP
// end ;
21346: LD_VAR 0 1
21350: RET
// export function hHackChangeYourSide ; begin
21351: LD_INT 0
21353: PPUSH
// if your_side = 8 then
21354: LD_OWVAR 2
21358: PUSH
21359: LD_INT 8
21361: EQUAL
21362: IFFALSE 21374
// your_side := 0 else
21364: LD_ADDR_OWVAR 2
21368: PUSH
21369: LD_INT 0
21371: ST_TO_ADDR
21372: GO 21388
// your_side := your_side + 1 ;
21374: LD_ADDR_OWVAR 2
21378: PUSH
21379: LD_OWVAR 2
21383: PUSH
21384: LD_INT 1
21386: PLUS
21387: ST_TO_ADDR
// end ;
21388: LD_VAR 0 1
21392: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21393: LD_INT 0
21395: PPUSH
21396: PPUSH
21397: PPUSH
// for i in all_units do
21398: LD_ADDR_VAR 0 2
21402: PUSH
21403: LD_OWVAR 3
21407: PUSH
21408: FOR_IN
21409: IFFALSE 21487
// if IsSelected ( i ) then
21411: LD_VAR 0 2
21415: PPUSH
21416: CALL_OW 306
21420: IFFALSE 21485
// begin j := GetSide ( i ) ;
21422: LD_ADDR_VAR 0 3
21426: PUSH
21427: LD_VAR 0 2
21431: PPUSH
21432: CALL_OW 255
21436: ST_TO_ADDR
// if j = 8 then
21437: LD_VAR 0 3
21441: PUSH
21442: LD_INT 8
21444: EQUAL
21445: IFFALSE 21457
// j := 0 else
21447: LD_ADDR_VAR 0 3
21451: PUSH
21452: LD_INT 0
21454: ST_TO_ADDR
21455: GO 21471
// j := j + 1 ;
21457: LD_ADDR_VAR 0 3
21461: PUSH
21462: LD_VAR 0 3
21466: PUSH
21467: LD_INT 1
21469: PLUS
21470: ST_TO_ADDR
// SetSide ( i , j ) ;
21471: LD_VAR 0 2
21475: PPUSH
21476: LD_VAR 0 3
21480: PPUSH
21481: CALL_OW 235
// end ;
21485: GO 21408
21487: POP
21488: POP
// end ;
21489: LD_VAR 0 1
21493: RET
// export function hHackFog ; begin
21494: LD_INT 0
21496: PPUSH
// FogOff ( true ) ;
21497: LD_INT 1
21499: PPUSH
21500: CALL_OW 344
// end ;
21504: LD_VAR 0 1
21508: RET
// export function hHackTeleport ( unit , x , y ) ; begin
21509: LD_INT 0
21511: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
21512: LD_VAR 0 1
21516: PPUSH
21517: LD_VAR 0 2
21521: PPUSH
21522: LD_VAR 0 3
21526: PPUSH
21527: LD_INT 1
21529: PPUSH
21530: LD_INT 1
21532: PPUSH
21533: CALL_OW 483
// CenterOnXY ( x , y ) ;
21537: LD_VAR 0 2
21541: PPUSH
21542: LD_VAR 0 3
21546: PPUSH
21547: CALL_OW 84
// end ;
21551: LD_VAR 0 4
21555: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
21556: LD_INT 0
21558: PPUSH
21559: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
21560: LD_VAR 0 1
21564: NOT
21565: PUSH
21566: LD_VAR 0 2
21570: PPUSH
21571: LD_VAR 0 3
21575: PPUSH
21576: CALL_OW 488
21580: NOT
21581: OR
21582: PUSH
21583: LD_VAR 0 1
21587: PPUSH
21588: CALL_OW 266
21592: PUSH
21593: LD_INT 3
21595: NONEQUAL
21596: PUSH
21597: LD_VAR 0 1
21601: PPUSH
21602: CALL_OW 247
21606: PUSH
21607: LD_INT 1
21609: EQUAL
21610: NOT
21611: AND
21612: OR
21613: IFFALSE 21617
// exit ;
21615: GO 21766
// if GetType ( factory ) = unit_human then
21617: LD_VAR 0 1
21621: PPUSH
21622: CALL_OW 247
21626: PUSH
21627: LD_INT 1
21629: EQUAL
21630: IFFALSE 21647
// factory := IsInUnit ( factory ) ;
21632: LD_ADDR_VAR 0 1
21636: PUSH
21637: LD_VAR 0 1
21641: PPUSH
21642: CALL_OW 310
21646: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
21647: LD_VAR 0 1
21651: PPUSH
21652: CALL_OW 266
21656: PUSH
21657: LD_INT 3
21659: NONEQUAL
21660: IFFALSE 21664
// exit ;
21662: GO 21766
// if HexInfo ( x , y ) = factory then
21664: LD_VAR 0 2
21668: PPUSH
21669: LD_VAR 0 3
21673: PPUSH
21674: CALL_OW 428
21678: PUSH
21679: LD_VAR 0 1
21683: EQUAL
21684: IFFALSE 21711
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
21686: LD_ADDR_EXP 87
21690: PUSH
21691: LD_EXP 87
21695: PPUSH
21696: LD_VAR 0 1
21700: PPUSH
21701: LD_INT 0
21703: PPUSH
21704: CALL_OW 1
21708: ST_TO_ADDR
21709: GO 21762
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
21711: LD_ADDR_EXP 87
21715: PUSH
21716: LD_EXP 87
21720: PPUSH
21721: LD_VAR 0 1
21725: PPUSH
21726: LD_VAR 0 1
21730: PPUSH
21731: CALL_OW 255
21735: PUSH
21736: LD_VAR 0 1
21740: PUSH
21741: LD_VAR 0 2
21745: PUSH
21746: LD_VAR 0 3
21750: PUSH
21751: EMPTY
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: PPUSH
21757: CALL_OW 1
21761: ST_TO_ADDR
// UpdateFactoryWaypoints ;
21762: CALL 21771 0 0
// end ;
21766: LD_VAR 0 4
21770: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
21771: LD_INT 0
21773: PPUSH
21774: PPUSH
21775: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
21776: LD_STRING resetFactoryWaypoint();
21778: PPUSH
21779: CALL_OW 559
// if factoryWaypoints then
21783: LD_EXP 87
21787: IFFALSE 21913
// begin list := PrepareArray ( factoryWaypoints ) ;
21789: LD_ADDR_VAR 0 3
21793: PUSH
21794: LD_EXP 87
21798: PPUSH
21799: CALL 69210 0 1
21803: ST_TO_ADDR
// for i := 1 to list do
21804: LD_ADDR_VAR 0 2
21808: PUSH
21809: DOUBLE
21810: LD_INT 1
21812: DEC
21813: ST_TO_ADDR
21814: LD_VAR 0 3
21818: PUSH
21819: FOR_TO
21820: IFFALSE 21911
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
21822: LD_STRING setFactoryWaypointXY(
21824: PUSH
21825: LD_VAR 0 3
21829: PUSH
21830: LD_VAR 0 2
21834: ARRAY
21835: PUSH
21836: LD_INT 1
21838: ARRAY
21839: STR
21840: PUSH
21841: LD_STRING ,
21843: STR
21844: PUSH
21845: LD_VAR 0 3
21849: PUSH
21850: LD_VAR 0 2
21854: ARRAY
21855: PUSH
21856: LD_INT 2
21858: ARRAY
21859: STR
21860: PUSH
21861: LD_STRING ,
21863: STR
21864: PUSH
21865: LD_VAR 0 3
21869: PUSH
21870: LD_VAR 0 2
21874: ARRAY
21875: PUSH
21876: LD_INT 3
21878: ARRAY
21879: STR
21880: PUSH
21881: LD_STRING ,
21883: STR
21884: PUSH
21885: LD_VAR 0 3
21889: PUSH
21890: LD_VAR 0 2
21894: ARRAY
21895: PUSH
21896: LD_INT 4
21898: ARRAY
21899: STR
21900: PUSH
21901: LD_STRING )
21903: STR
21904: PPUSH
21905: CALL_OW 559
21909: GO 21819
21911: POP
21912: POP
// end ; end ;
21913: LD_VAR 0 1
21917: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
21918: LD_INT 0
21920: PPUSH
// if HexInfo ( x , y ) = warehouse then
21921: LD_VAR 0 2
21925: PPUSH
21926: LD_VAR 0 3
21930: PPUSH
21931: CALL_OW 428
21935: PUSH
21936: LD_VAR 0 1
21940: EQUAL
21941: IFFALSE 21968
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
21943: LD_ADDR_EXP 88
21947: PUSH
21948: LD_EXP 88
21952: PPUSH
21953: LD_VAR 0 1
21957: PPUSH
21958: LD_INT 0
21960: PPUSH
21961: CALL_OW 1
21965: ST_TO_ADDR
21966: GO 22019
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
21968: LD_ADDR_EXP 88
21972: PUSH
21973: LD_EXP 88
21977: PPUSH
21978: LD_VAR 0 1
21982: PPUSH
21983: LD_VAR 0 1
21987: PPUSH
21988: CALL_OW 255
21992: PUSH
21993: LD_VAR 0 1
21997: PUSH
21998: LD_VAR 0 2
22002: PUSH
22003: LD_VAR 0 3
22007: PUSH
22008: EMPTY
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: PPUSH
22014: CALL_OW 1
22018: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
22019: CALL 22028 0 0
// end ;
22023: LD_VAR 0 4
22027: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
22028: LD_INT 0
22030: PPUSH
22031: PPUSH
22032: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
22033: LD_STRING resetWarehouseGatheringPoints();
22035: PPUSH
22036: CALL_OW 559
// if warehouseGatheringPoints then
22040: LD_EXP 88
22044: IFFALSE 22170
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
22046: LD_ADDR_VAR 0 3
22050: PUSH
22051: LD_EXP 88
22055: PPUSH
22056: CALL 69210 0 1
22060: ST_TO_ADDR
// for i := 1 to list do
22061: LD_ADDR_VAR 0 2
22065: PUSH
22066: DOUBLE
22067: LD_INT 1
22069: DEC
22070: ST_TO_ADDR
22071: LD_VAR 0 3
22075: PUSH
22076: FOR_TO
22077: IFFALSE 22168
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22079: LD_STRING setWarehouseGatheringPointXY(
22081: PUSH
22082: LD_VAR 0 3
22086: PUSH
22087: LD_VAR 0 2
22091: ARRAY
22092: PUSH
22093: LD_INT 1
22095: ARRAY
22096: STR
22097: PUSH
22098: LD_STRING ,
22100: STR
22101: PUSH
22102: LD_VAR 0 3
22106: PUSH
22107: LD_VAR 0 2
22111: ARRAY
22112: PUSH
22113: LD_INT 2
22115: ARRAY
22116: STR
22117: PUSH
22118: LD_STRING ,
22120: STR
22121: PUSH
22122: LD_VAR 0 3
22126: PUSH
22127: LD_VAR 0 2
22131: ARRAY
22132: PUSH
22133: LD_INT 3
22135: ARRAY
22136: STR
22137: PUSH
22138: LD_STRING ,
22140: STR
22141: PUSH
22142: LD_VAR 0 3
22146: PUSH
22147: LD_VAR 0 2
22151: ARRAY
22152: PUSH
22153: LD_INT 4
22155: ARRAY
22156: STR
22157: PUSH
22158: LD_STRING )
22160: STR
22161: PPUSH
22162: CALL_OW 559
22166: GO 22076
22168: POP
22169: POP
// end ; end ;
22170: LD_VAR 0 1
22174: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
22175: LD_EXP 88
22179: IFFALSE 22864
22181: GO 22183
22183: DISABLE
22184: LD_INT 0
22186: PPUSH
22187: PPUSH
22188: PPUSH
22189: PPUSH
22190: PPUSH
22191: PPUSH
22192: PPUSH
22193: PPUSH
22194: PPUSH
// begin enable ;
22195: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
22196: LD_ADDR_VAR 0 3
22200: PUSH
22201: LD_EXP 88
22205: PPUSH
22206: CALL 69210 0 1
22210: ST_TO_ADDR
// if not list then
22211: LD_VAR 0 3
22215: NOT
22216: IFFALSE 22220
// exit ;
22218: GO 22864
// for i := 1 to list do
22220: LD_ADDR_VAR 0 1
22224: PUSH
22225: DOUBLE
22226: LD_INT 1
22228: DEC
22229: ST_TO_ADDR
22230: LD_VAR 0 3
22234: PUSH
22235: FOR_TO
22236: IFFALSE 22862
// begin depot := list [ i ] [ 2 ] ;
22238: LD_ADDR_VAR 0 8
22242: PUSH
22243: LD_VAR 0 3
22247: PUSH
22248: LD_VAR 0 1
22252: ARRAY
22253: PUSH
22254: LD_INT 2
22256: ARRAY
22257: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
22258: LD_ADDR_VAR 0 5
22262: PUSH
22263: LD_VAR 0 3
22267: PUSH
22268: LD_VAR 0 1
22272: ARRAY
22273: PUSH
22274: LD_INT 1
22276: ARRAY
22277: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
22278: LD_VAR 0 8
22282: PPUSH
22283: CALL_OW 301
22287: PUSH
22288: LD_VAR 0 5
22292: PUSH
22293: LD_VAR 0 8
22297: PPUSH
22298: CALL_OW 255
22302: NONEQUAL
22303: OR
22304: IFFALSE 22333
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
22306: LD_ADDR_EXP 88
22310: PUSH
22311: LD_EXP 88
22315: PPUSH
22316: LD_VAR 0 8
22320: PPUSH
22321: LD_INT 0
22323: PPUSH
22324: CALL_OW 1
22328: ST_TO_ADDR
// exit ;
22329: POP
22330: POP
22331: GO 22864
// end ; x := list [ i ] [ 3 ] ;
22333: LD_ADDR_VAR 0 6
22337: PUSH
22338: LD_VAR 0 3
22342: PUSH
22343: LD_VAR 0 1
22347: ARRAY
22348: PUSH
22349: LD_INT 3
22351: ARRAY
22352: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
22353: LD_ADDR_VAR 0 7
22357: PUSH
22358: LD_VAR 0 3
22362: PUSH
22363: LD_VAR 0 1
22367: ARRAY
22368: PUSH
22369: LD_INT 4
22371: ARRAY
22372: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
22373: LD_ADDR_VAR 0 9
22377: PUSH
22378: LD_VAR 0 6
22382: PPUSH
22383: LD_VAR 0 7
22387: PPUSH
22388: LD_INT 16
22390: PPUSH
22391: CALL 67798 0 3
22395: ST_TO_ADDR
// if not cratesNearbyPoint then
22396: LD_VAR 0 9
22400: NOT
22401: IFFALSE 22407
// exit ;
22403: POP
22404: POP
22405: GO 22864
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
22407: LD_ADDR_VAR 0 4
22411: PUSH
22412: LD_INT 22
22414: PUSH
22415: LD_VAR 0 5
22419: PUSH
22420: EMPTY
22421: LIST
22422: LIST
22423: PUSH
22424: LD_INT 3
22426: PUSH
22427: LD_INT 60
22429: PUSH
22430: EMPTY
22431: LIST
22432: PUSH
22433: EMPTY
22434: LIST
22435: LIST
22436: PUSH
22437: LD_INT 91
22439: PUSH
22440: LD_VAR 0 8
22444: PUSH
22445: LD_INT 6
22447: PUSH
22448: EMPTY
22449: LIST
22450: LIST
22451: LIST
22452: PUSH
22453: LD_INT 2
22455: PUSH
22456: LD_INT 25
22458: PUSH
22459: LD_INT 2
22461: PUSH
22462: EMPTY
22463: LIST
22464: LIST
22465: PUSH
22466: LD_INT 25
22468: PUSH
22469: LD_INT 16
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: PUSH
22476: EMPTY
22477: LIST
22478: LIST
22479: LIST
22480: PUSH
22481: EMPTY
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: PPUSH
22487: CALL_OW 69
22491: PUSH
22492: LD_VAR 0 8
22496: PPUSH
22497: CALL_OW 313
22501: PPUSH
22502: LD_INT 3
22504: PUSH
22505: LD_INT 60
22507: PUSH
22508: EMPTY
22509: LIST
22510: PUSH
22511: EMPTY
22512: LIST
22513: LIST
22514: PUSH
22515: LD_INT 2
22517: PUSH
22518: LD_INT 25
22520: PUSH
22521: LD_INT 2
22523: PUSH
22524: EMPTY
22525: LIST
22526: LIST
22527: PUSH
22528: LD_INT 25
22530: PUSH
22531: LD_INT 16
22533: PUSH
22534: EMPTY
22535: LIST
22536: LIST
22537: PUSH
22538: EMPTY
22539: LIST
22540: LIST
22541: LIST
22542: PUSH
22543: EMPTY
22544: LIST
22545: LIST
22546: PPUSH
22547: CALL_OW 72
22551: UNION
22552: ST_TO_ADDR
// if tmp then
22553: LD_VAR 0 4
22557: IFFALSE 22637
// begin tmp := ShrinkArray ( tmp , 3 ) ;
22559: LD_ADDR_VAR 0 4
22563: PUSH
22564: LD_VAR 0 4
22568: PPUSH
22569: LD_INT 3
22571: PPUSH
22572: CALL 65767 0 2
22576: ST_TO_ADDR
// for j in tmp do
22577: LD_ADDR_VAR 0 2
22581: PUSH
22582: LD_VAR 0 4
22586: PUSH
22587: FOR_IN
22588: IFFALSE 22631
// begin if IsInUnit ( j ) then
22590: LD_VAR 0 2
22594: PPUSH
22595: CALL_OW 310
22599: IFFALSE 22610
// ComExit ( j ) ;
22601: LD_VAR 0 2
22605: PPUSH
22606: CALL 65850 0 1
// AddComCollect ( j , x , y ) ;
22610: LD_VAR 0 2
22614: PPUSH
22615: LD_VAR 0 6
22619: PPUSH
22620: LD_VAR 0 7
22624: PPUSH
22625: CALL_OW 177
// end ;
22629: GO 22587
22631: POP
22632: POP
// exit ;
22633: POP
22634: POP
22635: GO 22864
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
22637: LD_ADDR_VAR 0 4
22641: PUSH
22642: LD_INT 22
22644: PUSH
22645: LD_VAR 0 5
22649: PUSH
22650: EMPTY
22651: LIST
22652: LIST
22653: PUSH
22654: LD_INT 91
22656: PUSH
22657: LD_VAR 0 8
22661: PUSH
22662: LD_INT 8
22664: PUSH
22665: EMPTY
22666: LIST
22667: LIST
22668: LIST
22669: PUSH
22670: LD_INT 2
22672: PUSH
22673: LD_INT 34
22675: PUSH
22676: LD_INT 12
22678: PUSH
22679: EMPTY
22680: LIST
22681: LIST
22682: PUSH
22683: LD_INT 34
22685: PUSH
22686: LD_INT 51
22688: PUSH
22689: EMPTY
22690: LIST
22691: LIST
22692: PUSH
22693: LD_INT 34
22695: PUSH
22696: LD_INT 32
22698: PUSH
22699: EMPTY
22700: LIST
22701: LIST
22702: PUSH
22703: LD_INT 34
22705: PUSH
22706: LD_INT 89
22708: PUSH
22709: EMPTY
22710: LIST
22711: LIST
22712: PUSH
22713: EMPTY
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: PUSH
22720: EMPTY
22721: LIST
22722: LIST
22723: LIST
22724: PPUSH
22725: CALL_OW 69
22729: ST_TO_ADDR
// if tmp then
22730: LD_VAR 0 4
22734: IFFALSE 22860
// begin for j in tmp do
22736: LD_ADDR_VAR 0 2
22740: PUSH
22741: LD_VAR 0 4
22745: PUSH
22746: FOR_IN
22747: IFFALSE 22858
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
22749: LD_VAR 0 2
22753: PPUSH
22754: CALL_OW 262
22758: PUSH
22759: LD_INT 3
22761: EQUAL
22762: PUSH
22763: LD_VAR 0 2
22767: PPUSH
22768: CALL_OW 261
22772: PUSH
22773: LD_INT 20
22775: GREATER
22776: OR
22777: PUSH
22778: LD_VAR 0 2
22782: PPUSH
22783: CALL_OW 314
22787: NOT
22788: AND
22789: PUSH
22790: LD_VAR 0 2
22794: PPUSH
22795: CALL_OW 263
22799: PUSH
22800: LD_INT 1
22802: NONEQUAL
22803: PUSH
22804: LD_VAR 0 2
22808: PPUSH
22809: CALL_OW 311
22813: OR
22814: AND
22815: IFFALSE 22856
// begin ComCollect ( j , x , y ) ;
22817: LD_VAR 0 2
22821: PPUSH
22822: LD_VAR 0 6
22826: PPUSH
22827: LD_VAR 0 7
22831: PPUSH
22832: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
22836: LD_VAR 0 2
22840: PPUSH
22841: LD_VAR 0 8
22845: PPUSH
22846: CALL_OW 172
// exit ;
22850: POP
22851: POP
22852: POP
22853: POP
22854: GO 22864
// end ;
22856: GO 22746
22858: POP
22859: POP
// end ; end ;
22860: GO 22235
22862: POP
22863: POP
// end ; end_of_file
22864: PPOPN 9
22866: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
22867: LD_INT 0
22869: PPUSH
22870: PPUSH
22871: PPUSH
22872: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
22873: LD_VAR 0 1
22877: PPUSH
22878: CALL_OW 264
22882: PUSH
22883: LD_INT 91
22885: EQUAL
22886: IFFALSE 22958
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
22888: LD_INT 68
22890: PPUSH
22891: LD_VAR 0 1
22895: PPUSH
22896: CALL_OW 255
22900: PPUSH
22901: CALL_OW 321
22905: PUSH
22906: LD_INT 2
22908: EQUAL
22909: IFFALSE 22921
// eff := 70 else
22911: LD_ADDR_VAR 0 4
22915: PUSH
22916: LD_INT 70
22918: ST_TO_ADDR
22919: GO 22929
// eff := 30 ;
22921: LD_ADDR_VAR 0 4
22925: PUSH
22926: LD_INT 30
22928: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
22929: LD_VAR 0 1
22933: PPUSH
22934: CALL_OW 250
22938: PPUSH
22939: LD_VAR 0 1
22943: PPUSH
22944: CALL_OW 251
22948: PPUSH
22949: LD_VAR 0 4
22953: PPUSH
22954: CALL_OW 495
// end ; end ;
22958: LD_VAR 0 2
22962: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
22963: LD_INT 0
22965: PPUSH
// end ;
22966: LD_VAR 0 4
22970: RET
// export function SOS_Command ( cmd ) ; begin
22971: LD_INT 0
22973: PPUSH
// end ;
22974: LD_VAR 0 2
22978: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
22979: LD_INT 0
22981: PPUSH
// end ;
22982: LD_VAR 0 6
22986: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
22987: LD_INT 0
22989: PPUSH
22990: PPUSH
// if not vehicle or not factory then
22991: LD_VAR 0 1
22995: NOT
22996: PUSH
22997: LD_VAR 0 2
23001: NOT
23002: OR
23003: IFFALSE 23007
// exit ;
23005: GO 23238
// if factoryWaypoints >= factory then
23007: LD_EXP 87
23011: PUSH
23012: LD_VAR 0 2
23016: GREATEREQUAL
23017: IFFALSE 23238
// if factoryWaypoints [ factory ] then
23019: LD_EXP 87
23023: PUSH
23024: LD_VAR 0 2
23028: ARRAY
23029: IFFALSE 23238
// begin if GetControl ( vehicle ) = control_manual then
23031: LD_VAR 0 1
23035: PPUSH
23036: CALL_OW 263
23040: PUSH
23041: LD_INT 1
23043: EQUAL
23044: IFFALSE 23125
// begin driver := IsDrivenBy ( vehicle ) ;
23046: LD_ADDR_VAR 0 4
23050: PUSH
23051: LD_VAR 0 1
23055: PPUSH
23056: CALL_OW 311
23060: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23061: LD_VAR 0 4
23065: PPUSH
23066: LD_EXP 87
23070: PUSH
23071: LD_VAR 0 2
23075: ARRAY
23076: PUSH
23077: LD_INT 3
23079: ARRAY
23080: PPUSH
23081: LD_EXP 87
23085: PUSH
23086: LD_VAR 0 2
23090: ARRAY
23091: PUSH
23092: LD_INT 4
23094: ARRAY
23095: PPUSH
23096: CALL_OW 171
// AddComExitVehicle ( driver ) ;
23100: LD_VAR 0 4
23104: PPUSH
23105: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
23109: LD_VAR 0 4
23113: PPUSH
23114: LD_VAR 0 2
23118: PPUSH
23119: CALL_OW 180
// end else
23123: GO 23238
// if GetControl ( vehicle ) = control_remote then
23125: LD_VAR 0 1
23129: PPUSH
23130: CALL_OW 263
23134: PUSH
23135: LD_INT 2
23137: EQUAL
23138: IFFALSE 23199
// begin wait ( 0 0$2 ) ;
23140: LD_INT 70
23142: PPUSH
23143: CALL_OW 67
// if Connect ( vehicle ) then
23147: LD_VAR 0 1
23151: PPUSH
23152: CALL 36069 0 1
23156: IFFALSE 23197
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23158: LD_VAR 0 1
23162: PPUSH
23163: LD_EXP 87
23167: PUSH
23168: LD_VAR 0 2
23172: ARRAY
23173: PUSH
23174: LD_INT 3
23176: ARRAY
23177: PPUSH
23178: LD_EXP 87
23182: PUSH
23183: LD_VAR 0 2
23187: ARRAY
23188: PUSH
23189: LD_INT 4
23191: ARRAY
23192: PPUSH
23193: CALL_OW 171
// end else
23197: GO 23238
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23199: LD_VAR 0 1
23203: PPUSH
23204: LD_EXP 87
23208: PUSH
23209: LD_VAR 0 2
23213: ARRAY
23214: PUSH
23215: LD_INT 3
23217: ARRAY
23218: PPUSH
23219: LD_EXP 87
23223: PUSH
23224: LD_VAR 0 2
23228: ARRAY
23229: PUSH
23230: LD_INT 4
23232: ARRAY
23233: PPUSH
23234: CALL_OW 171
// end ; end ;
23238: LD_VAR 0 3
23242: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
23243: LD_INT 0
23245: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
23246: LD_VAR 0 1
23250: PUSH
23251: LD_INT 250
23253: EQUAL
23254: PUSH
23255: LD_VAR 0 2
23259: PPUSH
23260: CALL_OW 264
23264: PUSH
23265: LD_INT 81
23267: EQUAL
23268: AND
23269: IFFALSE 23290
// MinerPlaceMine ( unit , x , y ) ;
23271: LD_VAR 0 2
23275: PPUSH
23276: LD_VAR 0 4
23280: PPUSH
23281: LD_VAR 0 5
23285: PPUSH
23286: CALL 26280 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
23290: LD_VAR 0 1
23294: PUSH
23295: LD_INT 251
23297: EQUAL
23298: PUSH
23299: LD_VAR 0 2
23303: PPUSH
23304: CALL_OW 264
23308: PUSH
23309: LD_INT 81
23311: EQUAL
23312: AND
23313: IFFALSE 23334
// MinerDetonateMine ( unit , x , y ) ;
23315: LD_VAR 0 2
23319: PPUSH
23320: LD_VAR 0 4
23324: PPUSH
23325: LD_VAR 0 5
23329: PPUSH
23330: CALL 26555 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
23334: LD_VAR 0 1
23338: PUSH
23339: LD_INT 252
23341: EQUAL
23342: PUSH
23343: LD_VAR 0 2
23347: PPUSH
23348: CALL_OW 264
23352: PUSH
23353: LD_INT 81
23355: EQUAL
23356: AND
23357: IFFALSE 23378
// MinerCreateMinefield ( unit , x , y ) ;
23359: LD_VAR 0 2
23363: PPUSH
23364: LD_VAR 0 4
23368: PPUSH
23369: LD_VAR 0 5
23373: PPUSH
23374: CALL 26972 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
23378: LD_VAR 0 1
23382: PUSH
23383: LD_INT 253
23385: EQUAL
23386: PUSH
23387: LD_VAR 0 2
23391: PPUSH
23392: CALL_OW 257
23396: PUSH
23397: LD_INT 5
23399: EQUAL
23400: AND
23401: IFFALSE 23422
// ComBinocular ( unit , x , y ) ;
23403: LD_VAR 0 2
23407: PPUSH
23408: LD_VAR 0 4
23412: PPUSH
23413: LD_VAR 0 5
23417: PPUSH
23418: CALL 27341 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
23422: LD_VAR 0 1
23426: PUSH
23427: LD_INT 254
23429: EQUAL
23430: PUSH
23431: LD_VAR 0 2
23435: PPUSH
23436: CALL_OW 264
23440: PUSH
23441: LD_INT 99
23443: EQUAL
23444: AND
23445: PUSH
23446: LD_VAR 0 3
23450: PPUSH
23451: CALL_OW 263
23455: PUSH
23456: LD_INT 3
23458: EQUAL
23459: AND
23460: IFFALSE 23476
// HackDestroyVehicle ( unit , selectedUnit ) ;
23462: LD_VAR 0 2
23466: PPUSH
23467: LD_VAR 0 3
23471: PPUSH
23472: CALL 25644 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
23476: LD_VAR 0 1
23480: PUSH
23481: LD_INT 255
23483: EQUAL
23484: PUSH
23485: LD_VAR 0 2
23489: PPUSH
23490: CALL_OW 264
23494: PUSH
23495: LD_INT 14
23497: PUSH
23498: LD_INT 53
23500: PUSH
23501: EMPTY
23502: LIST
23503: LIST
23504: IN
23505: AND
23506: PUSH
23507: LD_VAR 0 4
23511: PPUSH
23512: LD_VAR 0 5
23516: PPUSH
23517: CALL_OW 488
23521: AND
23522: IFFALSE 23546
// CutTreeXYR ( unit , x , y , 12 ) ;
23524: LD_VAR 0 2
23528: PPUSH
23529: LD_VAR 0 4
23533: PPUSH
23534: LD_VAR 0 5
23538: PPUSH
23539: LD_INT 12
23541: PPUSH
23542: CALL 23641 0 4
// if cmd = 256 then
23546: LD_VAR 0 1
23550: PUSH
23551: LD_INT 256
23553: EQUAL
23554: IFFALSE 23575
// SetFactoryWaypoint ( unit , x , y ) ;
23556: LD_VAR 0 2
23560: PPUSH
23561: LD_VAR 0 4
23565: PPUSH
23566: LD_VAR 0 5
23570: PPUSH
23571: CALL 21556 0 3
// if cmd = 257 then
23575: LD_VAR 0 1
23579: PUSH
23580: LD_INT 257
23582: EQUAL
23583: IFFALSE 23604
// SetWarehouseGatheringPoint ( unit , x , y ) ;
23585: LD_VAR 0 2
23589: PPUSH
23590: LD_VAR 0 4
23594: PPUSH
23595: LD_VAR 0 5
23599: PPUSH
23600: CALL 21918 0 3
// if cmd = 258 then
23604: LD_VAR 0 1
23608: PUSH
23609: LD_INT 258
23611: EQUAL
23612: IFFALSE 23636
// BurnTreeXYR ( unit , x , y , 8 ) ;
23614: LD_VAR 0 2
23618: PPUSH
23619: LD_VAR 0 4
23623: PPUSH
23624: LD_VAR 0 5
23628: PPUSH
23629: LD_INT 8
23631: PPUSH
23632: CALL 24035 0 4
// end ;
23636: LD_VAR 0 6
23640: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23641: LD_INT 0
23643: PPUSH
23644: PPUSH
23645: PPUSH
23646: PPUSH
23647: PPUSH
23648: PPUSH
23649: PPUSH
23650: PPUSH
23651: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
23652: LD_VAR 0 1
23656: PPUSH
23657: CALL_OW 302
23661: NOT
23662: PUSH
23663: LD_VAR 0 2
23667: PPUSH
23668: LD_VAR 0 3
23672: PPUSH
23673: CALL_OW 488
23677: NOT
23678: OR
23679: PUSH
23680: LD_VAR 0 4
23684: NOT
23685: OR
23686: IFFALSE 23690
// exit ;
23688: GO 24030
// list := [ ] ;
23690: LD_ADDR_VAR 0 13
23694: PUSH
23695: EMPTY
23696: ST_TO_ADDR
// if x - r < 0 then
23697: LD_VAR 0 2
23701: PUSH
23702: LD_VAR 0 4
23706: MINUS
23707: PUSH
23708: LD_INT 0
23710: LESS
23711: IFFALSE 23723
// min_x := 0 else
23713: LD_ADDR_VAR 0 7
23717: PUSH
23718: LD_INT 0
23720: ST_TO_ADDR
23721: GO 23739
// min_x := x - r ;
23723: LD_ADDR_VAR 0 7
23727: PUSH
23728: LD_VAR 0 2
23732: PUSH
23733: LD_VAR 0 4
23737: MINUS
23738: ST_TO_ADDR
// if y - r < 0 then
23739: LD_VAR 0 3
23743: PUSH
23744: LD_VAR 0 4
23748: MINUS
23749: PUSH
23750: LD_INT 0
23752: LESS
23753: IFFALSE 23765
// min_y := 0 else
23755: LD_ADDR_VAR 0 8
23759: PUSH
23760: LD_INT 0
23762: ST_TO_ADDR
23763: GO 23781
// min_y := y - r ;
23765: LD_ADDR_VAR 0 8
23769: PUSH
23770: LD_VAR 0 3
23774: PUSH
23775: LD_VAR 0 4
23779: MINUS
23780: ST_TO_ADDR
// max_x := x + r ;
23781: LD_ADDR_VAR 0 9
23785: PUSH
23786: LD_VAR 0 2
23790: PUSH
23791: LD_VAR 0 4
23795: PLUS
23796: ST_TO_ADDR
// max_y := y + r ;
23797: LD_ADDR_VAR 0 10
23801: PUSH
23802: LD_VAR 0 3
23806: PUSH
23807: LD_VAR 0 4
23811: PLUS
23812: ST_TO_ADDR
// for _x = min_x to max_x do
23813: LD_ADDR_VAR 0 11
23817: PUSH
23818: DOUBLE
23819: LD_VAR 0 7
23823: DEC
23824: ST_TO_ADDR
23825: LD_VAR 0 9
23829: PUSH
23830: FOR_TO
23831: IFFALSE 23948
// for _y = min_y to max_y do
23833: LD_ADDR_VAR 0 12
23837: PUSH
23838: DOUBLE
23839: LD_VAR 0 8
23843: DEC
23844: ST_TO_ADDR
23845: LD_VAR 0 10
23849: PUSH
23850: FOR_TO
23851: IFFALSE 23944
// begin if not ValidHex ( _x , _y ) then
23853: LD_VAR 0 11
23857: PPUSH
23858: LD_VAR 0 12
23862: PPUSH
23863: CALL_OW 488
23867: NOT
23868: IFFALSE 23872
// continue ;
23870: GO 23850
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23872: LD_VAR 0 11
23876: PPUSH
23877: LD_VAR 0 12
23881: PPUSH
23882: CALL_OW 351
23886: PUSH
23887: LD_VAR 0 11
23891: PPUSH
23892: LD_VAR 0 12
23896: PPUSH
23897: CALL_OW 554
23901: AND
23902: IFFALSE 23942
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23904: LD_ADDR_VAR 0 13
23908: PUSH
23909: LD_VAR 0 13
23913: PPUSH
23914: LD_VAR 0 13
23918: PUSH
23919: LD_INT 1
23921: PLUS
23922: PPUSH
23923: LD_VAR 0 11
23927: PUSH
23928: LD_VAR 0 12
23932: PUSH
23933: EMPTY
23934: LIST
23935: LIST
23936: PPUSH
23937: CALL_OW 2
23941: ST_TO_ADDR
// end ;
23942: GO 23850
23944: POP
23945: POP
23946: GO 23830
23948: POP
23949: POP
// if not list then
23950: LD_VAR 0 13
23954: NOT
23955: IFFALSE 23959
// exit ;
23957: GO 24030
// for i in list do
23959: LD_ADDR_VAR 0 6
23963: PUSH
23964: LD_VAR 0 13
23968: PUSH
23969: FOR_IN
23970: IFFALSE 24028
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23972: LD_VAR 0 1
23976: PPUSH
23977: LD_STRING M
23979: PUSH
23980: LD_VAR 0 6
23984: PUSH
23985: LD_INT 1
23987: ARRAY
23988: PUSH
23989: LD_VAR 0 6
23993: PUSH
23994: LD_INT 2
23996: ARRAY
23997: PUSH
23998: LD_INT 0
24000: PUSH
24001: LD_INT 0
24003: PUSH
24004: LD_INT 0
24006: PUSH
24007: LD_INT 0
24009: PUSH
24010: EMPTY
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: PUSH
24019: EMPTY
24020: LIST
24021: PPUSH
24022: CALL_OW 447
24026: GO 23969
24028: POP
24029: POP
// end ;
24030: LD_VAR 0 5
24034: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
24035: LD_INT 0
24037: PPUSH
24038: PPUSH
24039: PPUSH
24040: PPUSH
24041: PPUSH
24042: PPUSH
24043: PPUSH
24044: PPUSH
24045: PPUSH
24046: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
24047: LD_VAR 0 1
24051: PPUSH
24052: CALL_OW 302
24056: NOT
24057: PUSH
24058: LD_VAR 0 2
24062: PPUSH
24063: LD_VAR 0 3
24067: PPUSH
24068: CALL_OW 488
24072: NOT
24073: OR
24074: PUSH
24075: LD_VAR 0 4
24079: NOT
24080: OR
24081: IFFALSE 24085
// exit ;
24083: GO 24598
// list := [ ] ;
24085: LD_ADDR_VAR 0 13
24089: PUSH
24090: EMPTY
24091: ST_TO_ADDR
// if x - r < 0 then
24092: LD_VAR 0 2
24096: PUSH
24097: LD_VAR 0 4
24101: MINUS
24102: PUSH
24103: LD_INT 0
24105: LESS
24106: IFFALSE 24118
// min_x := 0 else
24108: LD_ADDR_VAR 0 7
24112: PUSH
24113: LD_INT 0
24115: ST_TO_ADDR
24116: GO 24134
// min_x := x - r ;
24118: LD_ADDR_VAR 0 7
24122: PUSH
24123: LD_VAR 0 2
24127: PUSH
24128: LD_VAR 0 4
24132: MINUS
24133: ST_TO_ADDR
// if y - r < 0 then
24134: LD_VAR 0 3
24138: PUSH
24139: LD_VAR 0 4
24143: MINUS
24144: PUSH
24145: LD_INT 0
24147: LESS
24148: IFFALSE 24160
// min_y := 0 else
24150: LD_ADDR_VAR 0 8
24154: PUSH
24155: LD_INT 0
24157: ST_TO_ADDR
24158: GO 24176
// min_y := y - r ;
24160: LD_ADDR_VAR 0 8
24164: PUSH
24165: LD_VAR 0 3
24169: PUSH
24170: LD_VAR 0 4
24174: MINUS
24175: ST_TO_ADDR
// max_x := x + r ;
24176: LD_ADDR_VAR 0 9
24180: PUSH
24181: LD_VAR 0 2
24185: PUSH
24186: LD_VAR 0 4
24190: PLUS
24191: ST_TO_ADDR
// max_y := y + r ;
24192: LD_ADDR_VAR 0 10
24196: PUSH
24197: LD_VAR 0 3
24201: PUSH
24202: LD_VAR 0 4
24206: PLUS
24207: ST_TO_ADDR
// for _x = min_x to max_x do
24208: LD_ADDR_VAR 0 11
24212: PUSH
24213: DOUBLE
24214: LD_VAR 0 7
24218: DEC
24219: ST_TO_ADDR
24220: LD_VAR 0 9
24224: PUSH
24225: FOR_TO
24226: IFFALSE 24343
// for _y = min_y to max_y do
24228: LD_ADDR_VAR 0 12
24232: PUSH
24233: DOUBLE
24234: LD_VAR 0 8
24238: DEC
24239: ST_TO_ADDR
24240: LD_VAR 0 10
24244: PUSH
24245: FOR_TO
24246: IFFALSE 24339
// begin if not ValidHex ( _x , _y ) then
24248: LD_VAR 0 11
24252: PPUSH
24253: LD_VAR 0 12
24257: PPUSH
24258: CALL_OW 488
24262: NOT
24263: IFFALSE 24267
// continue ;
24265: GO 24245
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24267: LD_VAR 0 11
24271: PPUSH
24272: LD_VAR 0 12
24276: PPUSH
24277: CALL_OW 351
24281: PUSH
24282: LD_VAR 0 11
24286: PPUSH
24287: LD_VAR 0 12
24291: PPUSH
24292: CALL_OW 554
24296: AND
24297: IFFALSE 24337
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
24299: LD_ADDR_VAR 0 13
24303: PUSH
24304: LD_VAR 0 13
24308: PPUSH
24309: LD_VAR 0 13
24313: PUSH
24314: LD_INT 1
24316: PLUS
24317: PPUSH
24318: LD_VAR 0 11
24322: PUSH
24323: LD_VAR 0 12
24327: PUSH
24328: EMPTY
24329: LIST
24330: LIST
24331: PPUSH
24332: CALL_OW 2
24336: ST_TO_ADDR
// end ;
24337: GO 24245
24339: POP
24340: POP
24341: GO 24225
24343: POP
24344: POP
// if not list then
24345: LD_VAR 0 13
24349: NOT
24350: IFFALSE 24354
// exit ;
24352: GO 24598
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
24354: LD_ADDR_VAR 0 13
24358: PUSH
24359: LD_VAR 0 1
24363: PPUSH
24364: LD_VAR 0 13
24368: PPUSH
24369: LD_INT 1
24371: PPUSH
24372: LD_INT 1
24374: PPUSH
24375: CALL 33211 0 4
24379: ST_TO_ADDR
// ComStop ( flame ) ;
24380: LD_VAR 0 1
24384: PPUSH
24385: CALL_OW 141
// for i in list do
24389: LD_ADDR_VAR 0 6
24393: PUSH
24394: LD_VAR 0 13
24398: PUSH
24399: FOR_IN
24400: IFFALSE 24431
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
24402: LD_VAR 0 1
24406: PPUSH
24407: LD_VAR 0 6
24411: PUSH
24412: LD_INT 1
24414: ARRAY
24415: PPUSH
24416: LD_VAR 0 6
24420: PUSH
24421: LD_INT 2
24423: ARRAY
24424: PPUSH
24425: CALL_OW 176
24429: GO 24399
24431: POP
24432: POP
// repeat wait ( 0 0$1 ) ;
24433: LD_INT 35
24435: PPUSH
24436: CALL_OW 67
// task := GetTaskList ( flame ) ;
24440: LD_ADDR_VAR 0 14
24444: PUSH
24445: LD_VAR 0 1
24449: PPUSH
24450: CALL_OW 437
24454: ST_TO_ADDR
// if not task then
24455: LD_VAR 0 14
24459: NOT
24460: IFFALSE 24464
// exit ;
24462: GO 24598
// if task [ 1 ] [ 1 ] <> | then
24464: LD_VAR 0 14
24468: PUSH
24469: LD_INT 1
24471: ARRAY
24472: PUSH
24473: LD_INT 1
24475: ARRAY
24476: PUSH
24477: LD_STRING |
24479: NONEQUAL
24480: IFFALSE 24484
// exit ;
24482: GO 24598
// _x := task [ 1 ] [ 2 ] ;
24484: LD_ADDR_VAR 0 11
24488: PUSH
24489: LD_VAR 0 14
24493: PUSH
24494: LD_INT 1
24496: ARRAY
24497: PUSH
24498: LD_INT 2
24500: ARRAY
24501: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
24502: LD_ADDR_VAR 0 12
24506: PUSH
24507: LD_VAR 0 14
24511: PUSH
24512: LD_INT 1
24514: ARRAY
24515: PUSH
24516: LD_INT 3
24518: ARRAY
24519: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
24520: LD_VAR 0 11
24524: PPUSH
24525: LD_VAR 0 12
24529: PPUSH
24530: CALL_OW 351
24534: NOT
24535: PUSH
24536: LD_VAR 0 11
24540: PPUSH
24541: LD_VAR 0 12
24545: PPUSH
24546: CALL_OW 554
24550: NOT
24551: OR
24552: IFFALSE 24586
// begin task := Delete ( task , 1 ) ;
24554: LD_ADDR_VAR 0 14
24558: PUSH
24559: LD_VAR 0 14
24563: PPUSH
24564: LD_INT 1
24566: PPUSH
24567: CALL_OW 3
24571: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
24572: LD_VAR 0 1
24576: PPUSH
24577: LD_VAR 0 14
24581: PPUSH
24582: CALL_OW 446
// end ; until not HasTask ( flame ) ;
24586: LD_VAR 0 1
24590: PPUSH
24591: CALL_OW 314
24595: NOT
24596: IFFALSE 24433
// end ;
24598: LD_VAR 0 5
24602: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
24603: LD_EXP 90
24607: NOT
24608: IFFALSE 24658
24610: GO 24612
24612: DISABLE
// begin initHack := true ;
24613: LD_ADDR_EXP 90
24617: PUSH
24618: LD_INT 1
24620: ST_TO_ADDR
// hackTanks := [ ] ;
24621: LD_ADDR_EXP 91
24625: PUSH
24626: EMPTY
24627: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
24628: LD_ADDR_EXP 92
24632: PUSH
24633: EMPTY
24634: ST_TO_ADDR
// hackLimit := 3 ;
24635: LD_ADDR_EXP 93
24639: PUSH
24640: LD_INT 3
24642: ST_TO_ADDR
// hackDist := 12 ;
24643: LD_ADDR_EXP 94
24647: PUSH
24648: LD_INT 12
24650: ST_TO_ADDR
// hackCounter := [ ] ;
24651: LD_ADDR_EXP 95
24655: PUSH
24656: EMPTY
24657: ST_TO_ADDR
// end ;
24658: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
24659: LD_EXP 90
24663: PUSH
24664: LD_INT 34
24666: PUSH
24667: LD_INT 99
24669: PUSH
24670: EMPTY
24671: LIST
24672: LIST
24673: PPUSH
24674: CALL_OW 69
24678: AND
24679: IFFALSE 24932
24681: GO 24683
24683: DISABLE
24684: LD_INT 0
24686: PPUSH
24687: PPUSH
// begin enable ;
24688: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
24689: LD_ADDR_VAR 0 1
24693: PUSH
24694: LD_INT 34
24696: PUSH
24697: LD_INT 99
24699: PUSH
24700: EMPTY
24701: LIST
24702: LIST
24703: PPUSH
24704: CALL_OW 69
24708: PUSH
24709: FOR_IN
24710: IFFALSE 24930
// begin if not i in hackTanks then
24712: LD_VAR 0 1
24716: PUSH
24717: LD_EXP 91
24721: IN
24722: NOT
24723: IFFALSE 24806
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
24725: LD_ADDR_EXP 91
24729: PUSH
24730: LD_EXP 91
24734: PPUSH
24735: LD_EXP 91
24739: PUSH
24740: LD_INT 1
24742: PLUS
24743: PPUSH
24744: LD_VAR 0 1
24748: PPUSH
24749: CALL_OW 1
24753: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
24754: LD_ADDR_EXP 92
24758: PUSH
24759: LD_EXP 92
24763: PPUSH
24764: LD_EXP 92
24768: PUSH
24769: LD_INT 1
24771: PLUS
24772: PPUSH
24773: EMPTY
24774: PPUSH
24775: CALL_OW 1
24779: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
24780: LD_ADDR_EXP 95
24784: PUSH
24785: LD_EXP 95
24789: PPUSH
24790: LD_EXP 95
24794: PUSH
24795: LD_INT 1
24797: PLUS
24798: PPUSH
24799: EMPTY
24800: PPUSH
24801: CALL_OW 1
24805: ST_TO_ADDR
// end ; if not IsOk ( i ) then
24806: LD_VAR 0 1
24810: PPUSH
24811: CALL_OW 302
24815: NOT
24816: IFFALSE 24829
// begin HackUnlinkAll ( i ) ;
24818: LD_VAR 0 1
24822: PPUSH
24823: CALL 24935 0 1
// continue ;
24827: GO 24709
// end ; HackCheckCapturedStatus ( i ) ;
24829: LD_VAR 0 1
24833: PPUSH
24834: CALL 25378 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
24838: LD_ADDR_VAR 0 2
24842: PUSH
24843: LD_INT 81
24845: PUSH
24846: LD_VAR 0 1
24850: PPUSH
24851: CALL_OW 255
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: PUSH
24860: LD_INT 33
24862: PUSH
24863: LD_INT 3
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: PUSH
24870: LD_INT 91
24872: PUSH
24873: LD_VAR 0 1
24877: PUSH
24878: LD_EXP 94
24882: PUSH
24883: EMPTY
24884: LIST
24885: LIST
24886: LIST
24887: PUSH
24888: LD_INT 50
24890: PUSH
24891: EMPTY
24892: LIST
24893: PUSH
24894: EMPTY
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: PPUSH
24900: CALL_OW 69
24904: ST_TO_ADDR
// if not tmp then
24905: LD_VAR 0 2
24909: NOT
24910: IFFALSE 24914
// continue ;
24912: GO 24709
// HackLink ( i , tmp ) ;
24914: LD_VAR 0 1
24918: PPUSH
24919: LD_VAR 0 2
24923: PPUSH
24924: CALL 25071 0 2
// end ;
24928: GO 24709
24930: POP
24931: POP
// end ;
24932: PPOPN 2
24934: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24935: LD_INT 0
24937: PPUSH
24938: PPUSH
24939: PPUSH
// if not hack in hackTanks then
24940: LD_VAR 0 1
24944: PUSH
24945: LD_EXP 91
24949: IN
24950: NOT
24951: IFFALSE 24955
// exit ;
24953: GO 25066
// index := GetElementIndex ( hackTanks , hack ) ;
24955: LD_ADDR_VAR 0 4
24959: PUSH
24960: LD_EXP 91
24964: PPUSH
24965: LD_VAR 0 1
24969: PPUSH
24970: CALL 32508 0 2
24974: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24975: LD_EXP 92
24979: PUSH
24980: LD_VAR 0 4
24984: ARRAY
24985: IFFALSE 25066
// begin for i in hackTanksCaptured [ index ] do
24987: LD_ADDR_VAR 0 3
24991: PUSH
24992: LD_EXP 92
24996: PUSH
24997: LD_VAR 0 4
25001: ARRAY
25002: PUSH
25003: FOR_IN
25004: IFFALSE 25030
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
25006: LD_VAR 0 3
25010: PUSH
25011: LD_INT 1
25013: ARRAY
25014: PPUSH
25015: LD_VAR 0 3
25019: PUSH
25020: LD_INT 2
25022: ARRAY
25023: PPUSH
25024: CALL_OW 235
25028: GO 25003
25030: POP
25031: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
25032: LD_ADDR_EXP 92
25036: PUSH
25037: LD_EXP 92
25041: PPUSH
25042: LD_VAR 0 4
25046: PPUSH
25047: EMPTY
25048: PPUSH
25049: CALL_OW 1
25053: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
25054: LD_VAR 0 1
25058: PPUSH
25059: LD_INT 0
25061: PPUSH
25062: CALL_OW 505
// end ; end ;
25066: LD_VAR 0 2
25070: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
25071: LD_INT 0
25073: PPUSH
25074: PPUSH
25075: PPUSH
// if not hack in hackTanks or not vehicles then
25076: LD_VAR 0 1
25080: PUSH
25081: LD_EXP 91
25085: IN
25086: NOT
25087: PUSH
25088: LD_VAR 0 2
25092: NOT
25093: OR
25094: IFFALSE 25098
// exit ;
25096: GO 25373
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
25098: LD_ADDR_VAR 0 2
25102: PUSH
25103: LD_VAR 0 1
25107: PPUSH
25108: LD_VAR 0 2
25112: PPUSH
25113: LD_INT 1
25115: PPUSH
25116: LD_INT 1
25118: PPUSH
25119: CALL 33158 0 4
25123: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
25124: LD_ADDR_VAR 0 5
25128: PUSH
25129: LD_EXP 91
25133: PPUSH
25134: LD_VAR 0 1
25138: PPUSH
25139: CALL 32508 0 2
25143: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
25144: LD_EXP 92
25148: PUSH
25149: LD_VAR 0 5
25153: ARRAY
25154: PUSH
25155: LD_EXP 93
25159: LESS
25160: IFFALSE 25349
// begin for i := 1 to vehicles do
25162: LD_ADDR_VAR 0 4
25166: PUSH
25167: DOUBLE
25168: LD_INT 1
25170: DEC
25171: ST_TO_ADDR
25172: LD_VAR 0 2
25176: PUSH
25177: FOR_TO
25178: IFFALSE 25347
// begin if hackTanksCaptured [ index ] = hackLimit then
25180: LD_EXP 92
25184: PUSH
25185: LD_VAR 0 5
25189: ARRAY
25190: PUSH
25191: LD_EXP 93
25195: EQUAL
25196: IFFALSE 25200
// break ;
25198: GO 25347
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
25200: LD_ADDR_EXP 95
25204: PUSH
25205: LD_EXP 95
25209: PPUSH
25210: LD_VAR 0 5
25214: PPUSH
25215: LD_EXP 95
25219: PUSH
25220: LD_VAR 0 5
25224: ARRAY
25225: PUSH
25226: LD_INT 1
25228: PLUS
25229: PPUSH
25230: CALL_OW 1
25234: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
25235: LD_ADDR_EXP 92
25239: PUSH
25240: LD_EXP 92
25244: PPUSH
25245: LD_VAR 0 5
25249: PUSH
25250: LD_EXP 92
25254: PUSH
25255: LD_VAR 0 5
25259: ARRAY
25260: PUSH
25261: LD_INT 1
25263: PLUS
25264: PUSH
25265: EMPTY
25266: LIST
25267: LIST
25268: PPUSH
25269: LD_VAR 0 2
25273: PUSH
25274: LD_VAR 0 4
25278: ARRAY
25279: PUSH
25280: LD_VAR 0 2
25284: PUSH
25285: LD_VAR 0 4
25289: ARRAY
25290: PPUSH
25291: CALL_OW 255
25295: PUSH
25296: EMPTY
25297: LIST
25298: LIST
25299: PPUSH
25300: CALL 32723 0 3
25304: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
25305: LD_VAR 0 2
25309: PUSH
25310: LD_VAR 0 4
25314: ARRAY
25315: PPUSH
25316: LD_VAR 0 1
25320: PPUSH
25321: CALL_OW 255
25325: PPUSH
25326: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
25330: LD_VAR 0 2
25334: PUSH
25335: LD_VAR 0 4
25339: ARRAY
25340: PPUSH
25341: CALL_OW 141
// end ;
25345: GO 25177
25347: POP
25348: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25349: LD_VAR 0 1
25353: PPUSH
25354: LD_EXP 92
25358: PUSH
25359: LD_VAR 0 5
25363: ARRAY
25364: PUSH
25365: LD_INT 0
25367: PLUS
25368: PPUSH
25369: CALL_OW 505
// end ;
25373: LD_VAR 0 3
25377: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
25378: LD_INT 0
25380: PPUSH
25381: PPUSH
25382: PPUSH
25383: PPUSH
// if not hack in hackTanks then
25384: LD_VAR 0 1
25388: PUSH
25389: LD_EXP 91
25393: IN
25394: NOT
25395: IFFALSE 25399
// exit ;
25397: GO 25639
// index := GetElementIndex ( hackTanks , hack ) ;
25399: LD_ADDR_VAR 0 4
25403: PUSH
25404: LD_EXP 91
25408: PPUSH
25409: LD_VAR 0 1
25413: PPUSH
25414: CALL 32508 0 2
25418: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
25419: LD_ADDR_VAR 0 3
25423: PUSH
25424: DOUBLE
25425: LD_EXP 92
25429: PUSH
25430: LD_VAR 0 4
25434: ARRAY
25435: INC
25436: ST_TO_ADDR
25437: LD_INT 1
25439: PUSH
25440: FOR_DOWNTO
25441: IFFALSE 25613
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
25443: LD_ADDR_VAR 0 5
25447: PUSH
25448: LD_EXP 92
25452: PUSH
25453: LD_VAR 0 4
25457: ARRAY
25458: PUSH
25459: LD_VAR 0 3
25463: ARRAY
25464: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
25465: LD_VAR 0 5
25469: PUSH
25470: LD_INT 1
25472: ARRAY
25473: PPUSH
25474: CALL_OW 302
25478: NOT
25479: PUSH
25480: LD_VAR 0 5
25484: PUSH
25485: LD_INT 1
25487: ARRAY
25488: PPUSH
25489: CALL_OW 255
25493: PUSH
25494: LD_VAR 0 1
25498: PPUSH
25499: CALL_OW 255
25503: NONEQUAL
25504: OR
25505: IFFALSE 25611
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
25507: LD_VAR 0 5
25511: PUSH
25512: LD_INT 1
25514: ARRAY
25515: PPUSH
25516: CALL_OW 305
25520: PUSH
25521: LD_VAR 0 5
25525: PUSH
25526: LD_INT 1
25528: ARRAY
25529: PPUSH
25530: CALL_OW 255
25534: PUSH
25535: LD_VAR 0 1
25539: PPUSH
25540: CALL_OW 255
25544: EQUAL
25545: AND
25546: IFFALSE 25570
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
25548: LD_VAR 0 5
25552: PUSH
25553: LD_INT 1
25555: ARRAY
25556: PPUSH
25557: LD_VAR 0 5
25561: PUSH
25562: LD_INT 2
25564: ARRAY
25565: PPUSH
25566: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
25570: LD_ADDR_EXP 92
25574: PUSH
25575: LD_EXP 92
25579: PPUSH
25580: LD_VAR 0 4
25584: PPUSH
25585: LD_EXP 92
25589: PUSH
25590: LD_VAR 0 4
25594: ARRAY
25595: PPUSH
25596: LD_VAR 0 3
25600: PPUSH
25601: CALL_OW 3
25605: PPUSH
25606: CALL_OW 1
25610: ST_TO_ADDR
// end ; end ;
25611: GO 25440
25613: POP
25614: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25615: LD_VAR 0 1
25619: PPUSH
25620: LD_EXP 92
25624: PUSH
25625: LD_VAR 0 4
25629: ARRAY
25630: PUSH
25631: LD_INT 0
25633: PLUS
25634: PPUSH
25635: CALL_OW 505
// end ;
25639: LD_VAR 0 2
25643: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
25644: LD_INT 0
25646: PPUSH
25647: PPUSH
25648: PPUSH
25649: PPUSH
// if not hack in hackTanks then
25650: LD_VAR 0 1
25654: PUSH
25655: LD_EXP 91
25659: IN
25660: NOT
25661: IFFALSE 25665
// exit ;
25663: GO 25750
// index := GetElementIndex ( hackTanks , hack ) ;
25665: LD_ADDR_VAR 0 5
25669: PUSH
25670: LD_EXP 91
25674: PPUSH
25675: LD_VAR 0 1
25679: PPUSH
25680: CALL 32508 0 2
25684: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
25685: LD_ADDR_VAR 0 4
25689: PUSH
25690: DOUBLE
25691: LD_INT 1
25693: DEC
25694: ST_TO_ADDR
25695: LD_EXP 92
25699: PUSH
25700: LD_VAR 0 5
25704: ARRAY
25705: PUSH
25706: FOR_TO
25707: IFFALSE 25748
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
25709: LD_EXP 92
25713: PUSH
25714: LD_VAR 0 5
25718: ARRAY
25719: PUSH
25720: LD_VAR 0 4
25724: ARRAY
25725: PUSH
25726: LD_INT 1
25728: ARRAY
25729: PUSH
25730: LD_VAR 0 2
25734: EQUAL
25735: IFFALSE 25746
// KillUnit ( vehicle ) ;
25737: LD_VAR 0 2
25741: PPUSH
25742: CALL_OW 66
25746: GO 25706
25748: POP
25749: POP
// end ;
25750: LD_VAR 0 3
25754: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
25755: LD_EXP 96
25759: NOT
25760: IFFALSE 25795
25762: GO 25764
25764: DISABLE
// begin initMiner := true ;
25765: LD_ADDR_EXP 96
25769: PUSH
25770: LD_INT 1
25772: ST_TO_ADDR
// minersList := [ ] ;
25773: LD_ADDR_EXP 97
25777: PUSH
25778: EMPTY
25779: ST_TO_ADDR
// minerMinesList := [ ] ;
25780: LD_ADDR_EXP 98
25784: PUSH
25785: EMPTY
25786: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
25787: LD_ADDR_EXP 99
25791: PUSH
25792: LD_INT 5
25794: ST_TO_ADDR
// end ;
25795: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
25796: LD_EXP 96
25800: PUSH
25801: LD_INT 34
25803: PUSH
25804: LD_INT 81
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: PPUSH
25811: CALL_OW 69
25815: AND
25816: IFFALSE 26277
25818: GO 25820
25820: DISABLE
25821: LD_INT 0
25823: PPUSH
25824: PPUSH
25825: PPUSH
25826: PPUSH
// begin enable ;
25827: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
25828: LD_ADDR_VAR 0 1
25832: PUSH
25833: LD_INT 34
25835: PUSH
25836: LD_INT 81
25838: PUSH
25839: EMPTY
25840: LIST
25841: LIST
25842: PPUSH
25843: CALL_OW 69
25847: PUSH
25848: FOR_IN
25849: IFFALSE 25921
// begin if not i in minersList then
25851: LD_VAR 0 1
25855: PUSH
25856: LD_EXP 97
25860: IN
25861: NOT
25862: IFFALSE 25919
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
25864: LD_ADDR_EXP 97
25868: PUSH
25869: LD_EXP 97
25873: PPUSH
25874: LD_EXP 97
25878: PUSH
25879: LD_INT 1
25881: PLUS
25882: PPUSH
25883: LD_VAR 0 1
25887: PPUSH
25888: CALL_OW 1
25892: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25893: LD_ADDR_EXP 98
25897: PUSH
25898: LD_EXP 98
25902: PPUSH
25903: LD_EXP 98
25907: PUSH
25908: LD_INT 1
25910: PLUS
25911: PPUSH
25912: EMPTY
25913: PPUSH
25914: CALL_OW 1
25918: ST_TO_ADDR
// end end ;
25919: GO 25848
25921: POP
25922: POP
// for i := minerMinesList downto 1 do
25923: LD_ADDR_VAR 0 1
25927: PUSH
25928: DOUBLE
25929: LD_EXP 98
25933: INC
25934: ST_TO_ADDR
25935: LD_INT 1
25937: PUSH
25938: FOR_DOWNTO
25939: IFFALSE 26275
// begin if IsLive ( minersList [ i ] ) then
25941: LD_EXP 97
25945: PUSH
25946: LD_VAR 0 1
25950: ARRAY
25951: PPUSH
25952: CALL_OW 300
25956: IFFALSE 25984
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
25958: LD_EXP 97
25962: PUSH
25963: LD_VAR 0 1
25967: ARRAY
25968: PPUSH
25969: LD_EXP 98
25973: PUSH
25974: LD_VAR 0 1
25978: ARRAY
25979: PPUSH
25980: CALL_OW 505
// if not minerMinesList [ i ] then
25984: LD_EXP 98
25988: PUSH
25989: LD_VAR 0 1
25993: ARRAY
25994: NOT
25995: IFFALSE 25999
// continue ;
25997: GO 25938
// for j := minerMinesList [ i ] downto 1 do
25999: LD_ADDR_VAR 0 2
26003: PUSH
26004: DOUBLE
26005: LD_EXP 98
26009: PUSH
26010: LD_VAR 0 1
26014: ARRAY
26015: INC
26016: ST_TO_ADDR
26017: LD_INT 1
26019: PUSH
26020: FOR_DOWNTO
26021: IFFALSE 26271
// begin side := GetSide ( minersList [ i ] ) ;
26023: LD_ADDR_VAR 0 3
26027: PUSH
26028: LD_EXP 97
26032: PUSH
26033: LD_VAR 0 1
26037: ARRAY
26038: PPUSH
26039: CALL_OW 255
26043: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
26044: LD_ADDR_VAR 0 4
26048: PUSH
26049: LD_EXP 98
26053: PUSH
26054: LD_VAR 0 1
26058: ARRAY
26059: PUSH
26060: LD_VAR 0 2
26064: ARRAY
26065: PUSH
26066: LD_INT 1
26068: ARRAY
26069: PPUSH
26070: LD_EXP 98
26074: PUSH
26075: LD_VAR 0 1
26079: ARRAY
26080: PUSH
26081: LD_VAR 0 2
26085: ARRAY
26086: PUSH
26087: LD_INT 2
26089: ARRAY
26090: PPUSH
26091: CALL_OW 428
26095: ST_TO_ADDR
// if not tmp then
26096: LD_VAR 0 4
26100: NOT
26101: IFFALSE 26105
// continue ;
26103: GO 26020
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
26105: LD_VAR 0 4
26109: PUSH
26110: LD_INT 81
26112: PUSH
26113: LD_VAR 0 3
26117: PUSH
26118: EMPTY
26119: LIST
26120: LIST
26121: PPUSH
26122: CALL_OW 69
26126: IN
26127: PUSH
26128: LD_EXP 98
26132: PUSH
26133: LD_VAR 0 1
26137: ARRAY
26138: PUSH
26139: LD_VAR 0 2
26143: ARRAY
26144: PUSH
26145: LD_INT 1
26147: ARRAY
26148: PPUSH
26149: LD_EXP 98
26153: PUSH
26154: LD_VAR 0 1
26158: ARRAY
26159: PUSH
26160: LD_VAR 0 2
26164: ARRAY
26165: PUSH
26166: LD_INT 2
26168: ARRAY
26169: PPUSH
26170: CALL_OW 458
26174: AND
26175: IFFALSE 26269
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
26177: LD_EXP 98
26181: PUSH
26182: LD_VAR 0 1
26186: ARRAY
26187: PUSH
26188: LD_VAR 0 2
26192: ARRAY
26193: PUSH
26194: LD_INT 1
26196: ARRAY
26197: PPUSH
26198: LD_EXP 98
26202: PUSH
26203: LD_VAR 0 1
26207: ARRAY
26208: PUSH
26209: LD_VAR 0 2
26213: ARRAY
26214: PUSH
26215: LD_INT 2
26217: ARRAY
26218: PPUSH
26219: LD_VAR 0 3
26223: PPUSH
26224: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
26228: LD_ADDR_EXP 98
26232: PUSH
26233: LD_EXP 98
26237: PPUSH
26238: LD_VAR 0 1
26242: PPUSH
26243: LD_EXP 98
26247: PUSH
26248: LD_VAR 0 1
26252: ARRAY
26253: PPUSH
26254: LD_VAR 0 2
26258: PPUSH
26259: CALL_OW 3
26263: PPUSH
26264: CALL_OW 1
26268: ST_TO_ADDR
// end ; end ;
26269: GO 26020
26271: POP
26272: POP
// end ;
26273: GO 25938
26275: POP
26276: POP
// end ;
26277: PPOPN 4
26279: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
26280: LD_INT 0
26282: PPUSH
26283: PPUSH
// result := false ;
26284: LD_ADDR_VAR 0 4
26288: PUSH
26289: LD_INT 0
26291: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
26292: LD_VAR 0 1
26296: PPUSH
26297: CALL_OW 264
26301: PUSH
26302: LD_INT 81
26304: EQUAL
26305: NOT
26306: IFFALSE 26310
// exit ;
26308: GO 26550
// index := GetElementIndex ( minersList , unit ) ;
26310: LD_ADDR_VAR 0 5
26314: PUSH
26315: LD_EXP 97
26319: PPUSH
26320: LD_VAR 0 1
26324: PPUSH
26325: CALL 32508 0 2
26329: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
26330: LD_EXP 98
26334: PUSH
26335: LD_VAR 0 5
26339: ARRAY
26340: PUSH
26341: LD_EXP 99
26345: GREATEREQUAL
26346: IFFALSE 26350
// exit ;
26348: GO 26550
// ComMoveXY ( unit , x , y ) ;
26350: LD_VAR 0 1
26354: PPUSH
26355: LD_VAR 0 2
26359: PPUSH
26360: LD_VAR 0 3
26364: PPUSH
26365: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26369: LD_INT 35
26371: PPUSH
26372: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
26376: LD_VAR 0 1
26380: PPUSH
26381: LD_VAR 0 2
26385: PPUSH
26386: LD_VAR 0 3
26390: PPUSH
26391: CALL 64249 0 3
26395: NOT
26396: PUSH
26397: LD_VAR 0 1
26401: PPUSH
26402: CALL_OW 314
26406: AND
26407: IFFALSE 26411
// exit ;
26409: GO 26550
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
26411: LD_VAR 0 2
26415: PPUSH
26416: LD_VAR 0 3
26420: PPUSH
26421: CALL_OW 428
26425: PUSH
26426: LD_VAR 0 1
26430: EQUAL
26431: PUSH
26432: LD_VAR 0 1
26436: PPUSH
26437: CALL_OW 314
26441: NOT
26442: AND
26443: IFFALSE 26369
// PlaySoundXY ( x , y , PlantMine ) ;
26445: LD_VAR 0 2
26449: PPUSH
26450: LD_VAR 0 3
26454: PPUSH
26455: LD_STRING PlantMine
26457: PPUSH
26458: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
26462: LD_VAR 0 2
26466: PPUSH
26467: LD_VAR 0 3
26471: PPUSH
26472: LD_VAR 0 1
26476: PPUSH
26477: CALL_OW 255
26481: PPUSH
26482: LD_INT 0
26484: PPUSH
26485: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
26489: LD_ADDR_EXP 98
26493: PUSH
26494: LD_EXP 98
26498: PPUSH
26499: LD_VAR 0 5
26503: PUSH
26504: LD_EXP 98
26508: PUSH
26509: LD_VAR 0 5
26513: ARRAY
26514: PUSH
26515: LD_INT 1
26517: PLUS
26518: PUSH
26519: EMPTY
26520: LIST
26521: LIST
26522: PPUSH
26523: LD_VAR 0 2
26527: PUSH
26528: LD_VAR 0 3
26532: PUSH
26533: EMPTY
26534: LIST
26535: LIST
26536: PPUSH
26537: CALL 32723 0 3
26541: ST_TO_ADDR
// result := true ;
26542: LD_ADDR_VAR 0 4
26546: PUSH
26547: LD_INT 1
26549: ST_TO_ADDR
// end ;
26550: LD_VAR 0 4
26554: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
26555: LD_INT 0
26557: PPUSH
26558: PPUSH
26559: PPUSH
// if not unit in minersList then
26560: LD_VAR 0 1
26564: PUSH
26565: LD_EXP 97
26569: IN
26570: NOT
26571: IFFALSE 26575
// exit ;
26573: GO 26967
// index := GetElementIndex ( minersList , unit ) ;
26575: LD_ADDR_VAR 0 6
26579: PUSH
26580: LD_EXP 97
26584: PPUSH
26585: LD_VAR 0 1
26589: PPUSH
26590: CALL 32508 0 2
26594: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
26595: LD_ADDR_VAR 0 5
26599: PUSH
26600: DOUBLE
26601: LD_EXP 98
26605: PUSH
26606: LD_VAR 0 6
26610: ARRAY
26611: INC
26612: ST_TO_ADDR
26613: LD_INT 1
26615: PUSH
26616: FOR_DOWNTO
26617: IFFALSE 26778
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
26619: LD_EXP 98
26623: PUSH
26624: LD_VAR 0 6
26628: ARRAY
26629: PUSH
26630: LD_VAR 0 5
26634: ARRAY
26635: PUSH
26636: LD_INT 1
26638: ARRAY
26639: PUSH
26640: LD_VAR 0 2
26644: EQUAL
26645: PUSH
26646: LD_EXP 98
26650: PUSH
26651: LD_VAR 0 6
26655: ARRAY
26656: PUSH
26657: LD_VAR 0 5
26661: ARRAY
26662: PUSH
26663: LD_INT 2
26665: ARRAY
26666: PUSH
26667: LD_VAR 0 3
26671: EQUAL
26672: AND
26673: IFFALSE 26776
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26675: LD_EXP 98
26679: PUSH
26680: LD_VAR 0 6
26684: ARRAY
26685: PUSH
26686: LD_VAR 0 5
26690: ARRAY
26691: PUSH
26692: LD_INT 1
26694: ARRAY
26695: PPUSH
26696: LD_EXP 98
26700: PUSH
26701: LD_VAR 0 6
26705: ARRAY
26706: PUSH
26707: LD_VAR 0 5
26711: ARRAY
26712: PUSH
26713: LD_INT 2
26715: ARRAY
26716: PPUSH
26717: LD_VAR 0 1
26721: PPUSH
26722: CALL_OW 255
26726: PPUSH
26727: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26731: LD_ADDR_EXP 98
26735: PUSH
26736: LD_EXP 98
26740: PPUSH
26741: LD_VAR 0 6
26745: PPUSH
26746: LD_EXP 98
26750: PUSH
26751: LD_VAR 0 6
26755: ARRAY
26756: PPUSH
26757: LD_VAR 0 5
26761: PPUSH
26762: CALL_OW 3
26766: PPUSH
26767: CALL_OW 1
26771: ST_TO_ADDR
// exit ;
26772: POP
26773: POP
26774: GO 26967
// end ; end ;
26776: GO 26616
26778: POP
26779: POP
// for i := minerMinesList [ index ] downto 1 do
26780: LD_ADDR_VAR 0 5
26784: PUSH
26785: DOUBLE
26786: LD_EXP 98
26790: PUSH
26791: LD_VAR 0 6
26795: ARRAY
26796: INC
26797: ST_TO_ADDR
26798: LD_INT 1
26800: PUSH
26801: FOR_DOWNTO
26802: IFFALSE 26965
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
26804: LD_EXP 98
26808: PUSH
26809: LD_VAR 0 6
26813: ARRAY
26814: PUSH
26815: LD_VAR 0 5
26819: ARRAY
26820: PUSH
26821: LD_INT 1
26823: ARRAY
26824: PPUSH
26825: LD_EXP 98
26829: PUSH
26830: LD_VAR 0 6
26834: ARRAY
26835: PUSH
26836: LD_VAR 0 5
26840: ARRAY
26841: PUSH
26842: LD_INT 2
26844: ARRAY
26845: PPUSH
26846: LD_VAR 0 2
26850: PPUSH
26851: LD_VAR 0 3
26855: PPUSH
26856: CALL_OW 298
26860: PUSH
26861: LD_INT 6
26863: LESS
26864: IFFALSE 26963
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26866: LD_EXP 98
26870: PUSH
26871: LD_VAR 0 6
26875: ARRAY
26876: PUSH
26877: LD_VAR 0 5
26881: ARRAY
26882: PUSH
26883: LD_INT 1
26885: ARRAY
26886: PPUSH
26887: LD_EXP 98
26891: PUSH
26892: LD_VAR 0 6
26896: ARRAY
26897: PUSH
26898: LD_VAR 0 5
26902: ARRAY
26903: PUSH
26904: LD_INT 2
26906: ARRAY
26907: PPUSH
26908: LD_VAR 0 1
26912: PPUSH
26913: CALL_OW 255
26917: PPUSH
26918: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26922: LD_ADDR_EXP 98
26926: PUSH
26927: LD_EXP 98
26931: PPUSH
26932: LD_VAR 0 6
26936: PPUSH
26937: LD_EXP 98
26941: PUSH
26942: LD_VAR 0 6
26946: ARRAY
26947: PPUSH
26948: LD_VAR 0 5
26952: PPUSH
26953: CALL_OW 3
26957: PPUSH
26958: CALL_OW 1
26962: ST_TO_ADDR
// end ; end ;
26963: GO 26801
26965: POP
26966: POP
// end ;
26967: LD_VAR 0 4
26971: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
26972: LD_INT 0
26974: PPUSH
26975: PPUSH
26976: PPUSH
26977: PPUSH
26978: PPUSH
26979: PPUSH
26980: PPUSH
26981: PPUSH
26982: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26983: LD_VAR 0 1
26987: PPUSH
26988: CALL_OW 264
26992: PUSH
26993: LD_INT 81
26995: EQUAL
26996: NOT
26997: PUSH
26998: LD_VAR 0 1
27002: PUSH
27003: LD_EXP 97
27007: IN
27008: NOT
27009: OR
27010: IFFALSE 27014
// exit ;
27012: GO 27336
// index := GetElementIndex ( minersList , unit ) ;
27014: LD_ADDR_VAR 0 6
27018: PUSH
27019: LD_EXP 97
27023: PPUSH
27024: LD_VAR 0 1
27028: PPUSH
27029: CALL 32508 0 2
27033: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
27034: LD_ADDR_VAR 0 8
27038: PUSH
27039: LD_EXP 99
27043: PUSH
27044: LD_EXP 98
27048: PUSH
27049: LD_VAR 0 6
27053: ARRAY
27054: MINUS
27055: ST_TO_ADDR
// if not minesFreeAmount then
27056: LD_VAR 0 8
27060: NOT
27061: IFFALSE 27065
// exit ;
27063: GO 27336
// tmp := [ ] ;
27065: LD_ADDR_VAR 0 7
27069: PUSH
27070: EMPTY
27071: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
27072: LD_ADDR_VAR 0 5
27076: PUSH
27077: DOUBLE
27078: LD_INT 1
27080: DEC
27081: ST_TO_ADDR
27082: LD_VAR 0 8
27086: PUSH
27087: FOR_TO
27088: IFFALSE 27283
// begin _d := rand ( 0 , 5 ) ;
27090: LD_ADDR_VAR 0 11
27094: PUSH
27095: LD_INT 0
27097: PPUSH
27098: LD_INT 5
27100: PPUSH
27101: CALL_OW 12
27105: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
27106: LD_ADDR_VAR 0 12
27110: PUSH
27111: LD_INT 2
27113: PPUSH
27114: LD_INT 6
27116: PPUSH
27117: CALL_OW 12
27121: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
27122: LD_ADDR_VAR 0 9
27126: PUSH
27127: LD_VAR 0 2
27131: PPUSH
27132: LD_VAR 0 11
27136: PPUSH
27137: LD_VAR 0 12
27141: PPUSH
27142: CALL_OW 272
27146: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
27147: LD_ADDR_VAR 0 10
27151: PUSH
27152: LD_VAR 0 3
27156: PPUSH
27157: LD_VAR 0 11
27161: PPUSH
27162: LD_VAR 0 12
27166: PPUSH
27167: CALL_OW 273
27171: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
27172: LD_VAR 0 9
27176: PPUSH
27177: LD_VAR 0 10
27181: PPUSH
27182: CALL_OW 488
27186: PUSH
27187: LD_VAR 0 9
27191: PUSH
27192: LD_VAR 0 10
27196: PUSH
27197: EMPTY
27198: LIST
27199: LIST
27200: PUSH
27201: LD_VAR 0 7
27205: IN
27206: NOT
27207: AND
27208: PUSH
27209: LD_VAR 0 9
27213: PPUSH
27214: LD_VAR 0 10
27218: PPUSH
27219: CALL_OW 458
27223: NOT
27224: AND
27225: IFFALSE 27267
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
27227: LD_ADDR_VAR 0 7
27231: PUSH
27232: LD_VAR 0 7
27236: PPUSH
27237: LD_VAR 0 7
27241: PUSH
27242: LD_INT 1
27244: PLUS
27245: PPUSH
27246: LD_VAR 0 9
27250: PUSH
27251: LD_VAR 0 10
27255: PUSH
27256: EMPTY
27257: LIST
27258: LIST
27259: PPUSH
27260: CALL_OW 1
27264: ST_TO_ADDR
27265: GO 27281
// i := i - 1 ;
27267: LD_ADDR_VAR 0 5
27271: PUSH
27272: LD_VAR 0 5
27276: PUSH
27277: LD_INT 1
27279: MINUS
27280: ST_TO_ADDR
// end ;
27281: GO 27087
27283: POP
27284: POP
// for i in tmp do
27285: LD_ADDR_VAR 0 5
27289: PUSH
27290: LD_VAR 0 7
27294: PUSH
27295: FOR_IN
27296: IFFALSE 27334
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
27298: LD_VAR 0 1
27302: PPUSH
27303: LD_VAR 0 5
27307: PUSH
27308: LD_INT 1
27310: ARRAY
27311: PPUSH
27312: LD_VAR 0 5
27316: PUSH
27317: LD_INT 2
27319: ARRAY
27320: PPUSH
27321: CALL 26280 0 3
27325: NOT
27326: IFFALSE 27332
// exit ;
27328: POP
27329: POP
27330: GO 27336
27332: GO 27295
27334: POP
27335: POP
// end ;
27336: LD_VAR 0 4
27340: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
27341: LD_INT 0
27343: PPUSH
27344: PPUSH
27345: PPUSH
27346: PPUSH
27347: PPUSH
27348: PPUSH
27349: PPUSH
// if not GetClass ( unit ) = class_sniper then
27350: LD_VAR 0 1
27354: PPUSH
27355: CALL_OW 257
27359: PUSH
27360: LD_INT 5
27362: EQUAL
27363: NOT
27364: IFFALSE 27368
// exit ;
27366: GO 27756
// dist := 8 ;
27368: LD_ADDR_VAR 0 5
27372: PUSH
27373: LD_INT 8
27375: ST_TO_ADDR
// viewRange := 12 ;
27376: LD_ADDR_VAR 0 7
27380: PUSH
27381: LD_INT 12
27383: ST_TO_ADDR
// side := GetSide ( unit ) ;
27384: LD_ADDR_VAR 0 6
27388: PUSH
27389: LD_VAR 0 1
27393: PPUSH
27394: CALL_OW 255
27398: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
27399: LD_INT 61
27401: PPUSH
27402: LD_VAR 0 6
27406: PPUSH
27407: CALL_OW 321
27411: PUSH
27412: LD_INT 2
27414: EQUAL
27415: IFFALSE 27425
// viewRange := 16 ;
27417: LD_ADDR_VAR 0 7
27421: PUSH
27422: LD_INT 16
27424: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
27425: LD_VAR 0 1
27429: PPUSH
27430: LD_VAR 0 2
27434: PPUSH
27435: LD_VAR 0 3
27439: PPUSH
27440: CALL_OW 297
27444: PUSH
27445: LD_VAR 0 5
27449: GREATER
27450: IFFALSE 27529
// begin ComMoveXY ( unit , x , y ) ;
27452: LD_VAR 0 1
27456: PPUSH
27457: LD_VAR 0 2
27461: PPUSH
27462: LD_VAR 0 3
27466: PPUSH
27467: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27471: LD_INT 35
27473: PPUSH
27474: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
27478: LD_VAR 0 1
27482: PPUSH
27483: LD_VAR 0 2
27487: PPUSH
27488: LD_VAR 0 3
27492: PPUSH
27493: CALL 64249 0 3
27497: NOT
27498: IFFALSE 27502
// exit ;
27500: GO 27756
// until GetDistUnitXY ( unit , x , y ) < dist ;
27502: LD_VAR 0 1
27506: PPUSH
27507: LD_VAR 0 2
27511: PPUSH
27512: LD_VAR 0 3
27516: PPUSH
27517: CALL_OW 297
27521: PUSH
27522: LD_VAR 0 5
27526: LESS
27527: IFFALSE 27471
// end ; ComTurnXY ( unit , x , y ) ;
27529: LD_VAR 0 1
27533: PPUSH
27534: LD_VAR 0 2
27538: PPUSH
27539: LD_VAR 0 3
27543: PPUSH
27544: CALL_OW 118
// wait ( 5 ) ;
27548: LD_INT 5
27550: PPUSH
27551: CALL_OW 67
// _d := GetDir ( unit ) ;
27555: LD_ADDR_VAR 0 10
27559: PUSH
27560: LD_VAR 0 1
27564: PPUSH
27565: CALL_OW 254
27569: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
27570: LD_ADDR_VAR 0 8
27574: PUSH
27575: LD_VAR 0 1
27579: PPUSH
27580: CALL_OW 250
27584: PPUSH
27585: LD_VAR 0 10
27589: PPUSH
27590: LD_VAR 0 5
27594: PPUSH
27595: CALL_OW 272
27599: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
27600: LD_ADDR_VAR 0 9
27604: PUSH
27605: LD_VAR 0 1
27609: PPUSH
27610: CALL_OW 251
27614: PPUSH
27615: LD_VAR 0 10
27619: PPUSH
27620: LD_VAR 0 5
27624: PPUSH
27625: CALL_OW 273
27629: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27630: LD_VAR 0 8
27634: PPUSH
27635: LD_VAR 0 9
27639: PPUSH
27640: CALL_OW 488
27644: NOT
27645: IFFALSE 27649
// exit ;
27647: GO 27756
// ComAnimCustom ( unit , 1 ) ;
27649: LD_VAR 0 1
27653: PPUSH
27654: LD_INT 1
27656: PPUSH
27657: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
27661: LD_VAR 0 8
27665: PPUSH
27666: LD_VAR 0 9
27670: PPUSH
27671: LD_VAR 0 6
27675: PPUSH
27676: LD_VAR 0 7
27680: PPUSH
27681: CALL_OW 330
// repeat wait ( 1 ) ;
27685: LD_INT 1
27687: PPUSH
27688: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
27692: LD_VAR 0 1
27696: PPUSH
27697: CALL_OW 316
27701: PUSH
27702: LD_VAR 0 1
27706: PPUSH
27707: CALL_OW 314
27711: OR
27712: PUSH
27713: LD_VAR 0 1
27717: PPUSH
27718: CALL_OW 302
27722: NOT
27723: OR
27724: PUSH
27725: LD_VAR 0 1
27729: PPUSH
27730: CALL_OW 301
27734: OR
27735: IFFALSE 27685
// RemoveSeeing ( _x , _y , side ) ;
27737: LD_VAR 0 8
27741: PPUSH
27742: LD_VAR 0 9
27746: PPUSH
27747: LD_VAR 0 6
27751: PPUSH
27752: CALL_OW 331
// end ; end_of_file
27756: LD_VAR 0 4
27760: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27761: LD_INT 0
27763: PPUSH
27764: PPUSH
// if exist_mode then
27765: LD_VAR 0 2
27769: IFFALSE 27794
// unit := CreateCharacter ( prefix & ident ) else
27771: LD_ADDR_VAR 0 5
27775: PUSH
27776: LD_VAR 0 3
27780: PUSH
27781: LD_VAR 0 1
27785: STR
27786: PPUSH
27787: CALL_OW 34
27791: ST_TO_ADDR
27792: GO 27809
// unit := NewCharacter ( ident ) ;
27794: LD_ADDR_VAR 0 5
27798: PUSH
27799: LD_VAR 0 1
27803: PPUSH
27804: CALL_OW 25
27808: ST_TO_ADDR
// result := unit ;
27809: LD_ADDR_VAR 0 4
27813: PUSH
27814: LD_VAR 0 5
27818: ST_TO_ADDR
// end ;
27819: LD_VAR 0 4
27823: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27824: LD_INT 0
27826: PPUSH
27827: PPUSH
// if not side or not nation then
27828: LD_VAR 0 1
27832: NOT
27833: PUSH
27834: LD_VAR 0 2
27838: NOT
27839: OR
27840: IFFALSE 27844
// exit ;
27842: GO 28612
// case nation of nation_american :
27844: LD_VAR 0 2
27848: PUSH
27849: LD_INT 1
27851: DOUBLE
27852: EQUAL
27853: IFTRUE 27857
27855: GO 28071
27857: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
27858: LD_ADDR_VAR 0 4
27862: PUSH
27863: LD_INT 35
27865: PUSH
27866: LD_INT 45
27868: PUSH
27869: LD_INT 46
27871: PUSH
27872: LD_INT 47
27874: PUSH
27875: LD_INT 82
27877: PUSH
27878: LD_INT 83
27880: PUSH
27881: LD_INT 84
27883: PUSH
27884: LD_INT 85
27886: PUSH
27887: LD_INT 86
27889: PUSH
27890: LD_INT 1
27892: PUSH
27893: LD_INT 2
27895: PUSH
27896: LD_INT 6
27898: PUSH
27899: LD_INT 15
27901: PUSH
27902: LD_INT 16
27904: PUSH
27905: LD_INT 7
27907: PUSH
27908: LD_INT 12
27910: PUSH
27911: LD_INT 13
27913: PUSH
27914: LD_INT 10
27916: PUSH
27917: LD_INT 14
27919: PUSH
27920: LD_INT 20
27922: PUSH
27923: LD_INT 21
27925: PUSH
27926: LD_INT 22
27928: PUSH
27929: LD_INT 25
27931: PUSH
27932: LD_INT 32
27934: PUSH
27935: LD_INT 27
27937: PUSH
27938: LD_INT 36
27940: PUSH
27941: LD_INT 69
27943: PUSH
27944: LD_INT 39
27946: PUSH
27947: LD_INT 34
27949: PUSH
27950: LD_INT 40
27952: PUSH
27953: LD_INT 48
27955: PUSH
27956: LD_INT 49
27958: PUSH
27959: LD_INT 50
27961: PUSH
27962: LD_INT 51
27964: PUSH
27965: LD_INT 52
27967: PUSH
27968: LD_INT 53
27970: PUSH
27971: LD_INT 54
27973: PUSH
27974: LD_INT 55
27976: PUSH
27977: LD_INT 56
27979: PUSH
27980: LD_INT 57
27982: PUSH
27983: LD_INT 58
27985: PUSH
27986: LD_INT 59
27988: PUSH
27989: LD_INT 60
27991: PUSH
27992: LD_INT 61
27994: PUSH
27995: LD_INT 62
27997: PUSH
27998: LD_INT 80
28000: PUSH
28001: LD_INT 82
28003: PUSH
28004: LD_INT 83
28006: PUSH
28007: LD_INT 84
28009: PUSH
28010: LD_INT 85
28012: PUSH
28013: LD_INT 86
28015: PUSH
28016: EMPTY
28017: LIST
28018: LIST
28019: LIST
28020: LIST
28021: LIST
28022: LIST
28023: LIST
28024: LIST
28025: LIST
28026: LIST
28027: LIST
28028: LIST
28029: LIST
28030: LIST
28031: LIST
28032: LIST
28033: LIST
28034: LIST
28035: LIST
28036: LIST
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: LIST
28046: LIST
28047: LIST
28048: LIST
28049: LIST
28050: LIST
28051: LIST
28052: LIST
28053: LIST
28054: LIST
28055: LIST
28056: LIST
28057: LIST
28058: LIST
28059: LIST
28060: LIST
28061: LIST
28062: LIST
28063: LIST
28064: LIST
28065: LIST
28066: LIST
28067: LIST
28068: ST_TO_ADDR
28069: GO 28536
28071: LD_INT 2
28073: DOUBLE
28074: EQUAL
28075: IFTRUE 28079
28077: GO 28305
28079: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
28080: LD_ADDR_VAR 0 4
28084: PUSH
28085: LD_INT 35
28087: PUSH
28088: LD_INT 45
28090: PUSH
28091: LD_INT 46
28093: PUSH
28094: LD_INT 47
28096: PUSH
28097: LD_INT 82
28099: PUSH
28100: LD_INT 83
28102: PUSH
28103: LD_INT 84
28105: PUSH
28106: LD_INT 85
28108: PUSH
28109: LD_INT 87
28111: PUSH
28112: LD_INT 70
28114: PUSH
28115: LD_INT 1
28117: PUSH
28118: LD_INT 11
28120: PUSH
28121: LD_INT 3
28123: PUSH
28124: LD_INT 4
28126: PUSH
28127: LD_INT 5
28129: PUSH
28130: LD_INT 6
28132: PUSH
28133: LD_INT 15
28135: PUSH
28136: LD_INT 18
28138: PUSH
28139: LD_INT 7
28141: PUSH
28142: LD_INT 17
28144: PUSH
28145: LD_INT 8
28147: PUSH
28148: LD_INT 20
28150: PUSH
28151: LD_INT 21
28153: PUSH
28154: LD_INT 22
28156: PUSH
28157: LD_INT 72
28159: PUSH
28160: LD_INT 26
28162: PUSH
28163: LD_INT 69
28165: PUSH
28166: LD_INT 39
28168: PUSH
28169: LD_INT 40
28171: PUSH
28172: LD_INT 41
28174: PUSH
28175: LD_INT 42
28177: PUSH
28178: LD_INT 43
28180: PUSH
28181: LD_INT 48
28183: PUSH
28184: LD_INT 49
28186: PUSH
28187: LD_INT 50
28189: PUSH
28190: LD_INT 51
28192: PUSH
28193: LD_INT 52
28195: PUSH
28196: LD_INT 53
28198: PUSH
28199: LD_INT 54
28201: PUSH
28202: LD_INT 55
28204: PUSH
28205: LD_INT 56
28207: PUSH
28208: LD_INT 60
28210: PUSH
28211: LD_INT 61
28213: PUSH
28214: LD_INT 62
28216: PUSH
28217: LD_INT 66
28219: PUSH
28220: LD_INT 67
28222: PUSH
28223: LD_INT 68
28225: PUSH
28226: LD_INT 81
28228: PUSH
28229: LD_INT 82
28231: PUSH
28232: LD_INT 83
28234: PUSH
28235: LD_INT 84
28237: PUSH
28238: LD_INT 85
28240: PUSH
28241: LD_INT 87
28243: PUSH
28244: LD_INT 88
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: LIST
28251: LIST
28252: LIST
28253: LIST
28254: LIST
28255: LIST
28256: LIST
28257: LIST
28258: LIST
28259: LIST
28260: LIST
28261: LIST
28262: LIST
28263: LIST
28264: LIST
28265: LIST
28266: LIST
28267: LIST
28268: LIST
28269: LIST
28270: LIST
28271: LIST
28272: LIST
28273: LIST
28274: LIST
28275: LIST
28276: LIST
28277: LIST
28278: LIST
28279: LIST
28280: LIST
28281: LIST
28282: LIST
28283: LIST
28284: LIST
28285: LIST
28286: LIST
28287: LIST
28288: LIST
28289: LIST
28290: LIST
28291: LIST
28292: LIST
28293: LIST
28294: LIST
28295: LIST
28296: LIST
28297: LIST
28298: LIST
28299: LIST
28300: LIST
28301: LIST
28302: ST_TO_ADDR
28303: GO 28536
28305: LD_INT 3
28307: DOUBLE
28308: EQUAL
28309: IFTRUE 28313
28311: GO 28535
28313: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
28314: LD_ADDR_VAR 0 4
28318: PUSH
28319: LD_INT 46
28321: PUSH
28322: LD_INT 47
28324: PUSH
28325: LD_INT 1
28327: PUSH
28328: LD_INT 2
28330: PUSH
28331: LD_INT 82
28333: PUSH
28334: LD_INT 83
28336: PUSH
28337: LD_INT 84
28339: PUSH
28340: LD_INT 85
28342: PUSH
28343: LD_INT 86
28345: PUSH
28346: LD_INT 11
28348: PUSH
28349: LD_INT 9
28351: PUSH
28352: LD_INT 20
28354: PUSH
28355: LD_INT 19
28357: PUSH
28358: LD_INT 21
28360: PUSH
28361: LD_INT 24
28363: PUSH
28364: LD_INT 22
28366: PUSH
28367: LD_INT 25
28369: PUSH
28370: LD_INT 28
28372: PUSH
28373: LD_INT 29
28375: PUSH
28376: LD_INT 30
28378: PUSH
28379: LD_INT 31
28381: PUSH
28382: LD_INT 37
28384: PUSH
28385: LD_INT 38
28387: PUSH
28388: LD_INT 32
28390: PUSH
28391: LD_INT 27
28393: PUSH
28394: LD_INT 33
28396: PUSH
28397: LD_INT 69
28399: PUSH
28400: LD_INT 39
28402: PUSH
28403: LD_INT 34
28405: PUSH
28406: LD_INT 40
28408: PUSH
28409: LD_INT 71
28411: PUSH
28412: LD_INT 23
28414: PUSH
28415: LD_INT 44
28417: PUSH
28418: LD_INT 48
28420: PUSH
28421: LD_INT 49
28423: PUSH
28424: LD_INT 50
28426: PUSH
28427: LD_INT 51
28429: PUSH
28430: LD_INT 52
28432: PUSH
28433: LD_INT 53
28435: PUSH
28436: LD_INT 54
28438: PUSH
28439: LD_INT 55
28441: PUSH
28442: LD_INT 56
28444: PUSH
28445: LD_INT 57
28447: PUSH
28448: LD_INT 58
28450: PUSH
28451: LD_INT 59
28453: PUSH
28454: LD_INT 63
28456: PUSH
28457: LD_INT 64
28459: PUSH
28460: LD_INT 65
28462: PUSH
28463: LD_INT 82
28465: PUSH
28466: LD_INT 83
28468: PUSH
28469: LD_INT 84
28471: PUSH
28472: LD_INT 85
28474: PUSH
28475: LD_INT 86
28477: PUSH
28478: EMPTY
28479: LIST
28480: LIST
28481: LIST
28482: LIST
28483: LIST
28484: LIST
28485: LIST
28486: LIST
28487: LIST
28488: LIST
28489: LIST
28490: LIST
28491: LIST
28492: LIST
28493: LIST
28494: LIST
28495: LIST
28496: LIST
28497: LIST
28498: LIST
28499: LIST
28500: LIST
28501: LIST
28502: LIST
28503: LIST
28504: LIST
28505: LIST
28506: LIST
28507: LIST
28508: LIST
28509: LIST
28510: LIST
28511: LIST
28512: LIST
28513: LIST
28514: LIST
28515: LIST
28516: LIST
28517: LIST
28518: LIST
28519: LIST
28520: LIST
28521: LIST
28522: LIST
28523: LIST
28524: LIST
28525: LIST
28526: LIST
28527: LIST
28528: LIST
28529: LIST
28530: LIST
28531: LIST
28532: ST_TO_ADDR
28533: GO 28536
28535: POP
// if state > - 1 and state < 3 then
28536: LD_VAR 0 3
28540: PUSH
28541: LD_INT 1
28543: NEG
28544: GREATER
28545: PUSH
28546: LD_VAR 0 3
28550: PUSH
28551: LD_INT 3
28553: LESS
28554: AND
28555: IFFALSE 28612
// for i in result do
28557: LD_ADDR_VAR 0 5
28561: PUSH
28562: LD_VAR 0 4
28566: PUSH
28567: FOR_IN
28568: IFFALSE 28610
// if GetTech ( i , side ) <> state then
28570: LD_VAR 0 5
28574: PPUSH
28575: LD_VAR 0 1
28579: PPUSH
28580: CALL_OW 321
28584: PUSH
28585: LD_VAR 0 3
28589: NONEQUAL
28590: IFFALSE 28608
// result := result diff i ;
28592: LD_ADDR_VAR 0 4
28596: PUSH
28597: LD_VAR 0 4
28601: PUSH
28602: LD_VAR 0 5
28606: DIFF
28607: ST_TO_ADDR
28608: GO 28567
28610: POP
28611: POP
// end ;
28612: LD_VAR 0 4
28616: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
28617: LD_INT 0
28619: PPUSH
28620: PPUSH
28621: PPUSH
// result := true ;
28622: LD_ADDR_VAR 0 3
28626: PUSH
28627: LD_INT 1
28629: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
28630: LD_ADDR_VAR 0 5
28634: PUSH
28635: LD_VAR 0 2
28639: PPUSH
28640: CALL_OW 480
28644: ST_TO_ADDR
// if not tmp then
28645: LD_VAR 0 5
28649: NOT
28650: IFFALSE 28654
// exit ;
28652: GO 28703
// for i in tmp do
28654: LD_ADDR_VAR 0 4
28658: PUSH
28659: LD_VAR 0 5
28663: PUSH
28664: FOR_IN
28665: IFFALSE 28701
// if GetTech ( i , side ) <> state_researched then
28667: LD_VAR 0 4
28671: PPUSH
28672: LD_VAR 0 1
28676: PPUSH
28677: CALL_OW 321
28681: PUSH
28682: LD_INT 2
28684: NONEQUAL
28685: IFFALSE 28699
// begin result := false ;
28687: LD_ADDR_VAR 0 3
28691: PUSH
28692: LD_INT 0
28694: ST_TO_ADDR
// exit ;
28695: POP
28696: POP
28697: GO 28703
// end ;
28699: GO 28664
28701: POP
28702: POP
// end ;
28703: LD_VAR 0 3
28707: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
28708: LD_INT 0
28710: PPUSH
28711: PPUSH
28712: PPUSH
28713: PPUSH
28714: PPUSH
28715: PPUSH
28716: PPUSH
28717: PPUSH
28718: PPUSH
28719: PPUSH
28720: PPUSH
28721: PPUSH
28722: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
28723: LD_VAR 0 1
28727: NOT
28728: PUSH
28729: LD_VAR 0 1
28733: PPUSH
28734: CALL_OW 257
28738: PUSH
28739: LD_INT 9
28741: NONEQUAL
28742: OR
28743: IFFALSE 28747
// exit ;
28745: GO 29320
// side := GetSide ( unit ) ;
28747: LD_ADDR_VAR 0 9
28751: PUSH
28752: LD_VAR 0 1
28756: PPUSH
28757: CALL_OW 255
28761: ST_TO_ADDR
// tech_space := tech_spacanom ;
28762: LD_ADDR_VAR 0 12
28766: PUSH
28767: LD_INT 29
28769: ST_TO_ADDR
// tech_time := tech_taurad ;
28770: LD_ADDR_VAR 0 13
28774: PUSH
28775: LD_INT 28
28777: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28778: LD_ADDR_VAR 0 11
28782: PUSH
28783: LD_VAR 0 1
28787: PPUSH
28788: CALL_OW 310
28792: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28793: LD_VAR 0 11
28797: PPUSH
28798: CALL_OW 247
28802: PUSH
28803: LD_INT 2
28805: EQUAL
28806: IFFALSE 28810
// exit ;
28808: GO 29320
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28810: LD_ADDR_VAR 0 8
28814: PUSH
28815: LD_INT 81
28817: PUSH
28818: LD_VAR 0 9
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: PUSH
28827: LD_INT 3
28829: PUSH
28830: LD_INT 21
28832: PUSH
28833: LD_INT 3
28835: PUSH
28836: EMPTY
28837: LIST
28838: LIST
28839: PUSH
28840: EMPTY
28841: LIST
28842: LIST
28843: PUSH
28844: EMPTY
28845: LIST
28846: LIST
28847: PPUSH
28848: CALL_OW 69
28852: ST_TO_ADDR
// if not tmp then
28853: LD_VAR 0 8
28857: NOT
28858: IFFALSE 28862
// exit ;
28860: GO 29320
// if in_unit then
28862: LD_VAR 0 11
28866: IFFALSE 28890
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28868: LD_ADDR_VAR 0 10
28872: PUSH
28873: LD_VAR 0 8
28877: PPUSH
28878: LD_VAR 0 11
28882: PPUSH
28883: CALL_OW 74
28887: ST_TO_ADDR
28888: GO 28910
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28890: LD_ADDR_VAR 0 10
28894: PUSH
28895: LD_VAR 0 8
28899: PPUSH
28900: LD_VAR 0 1
28904: PPUSH
28905: CALL_OW 74
28909: ST_TO_ADDR
// if not enemy then
28910: LD_VAR 0 10
28914: NOT
28915: IFFALSE 28919
// exit ;
28917: GO 29320
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28919: LD_VAR 0 11
28923: PUSH
28924: LD_VAR 0 11
28928: PPUSH
28929: LD_VAR 0 10
28933: PPUSH
28934: CALL_OW 296
28938: PUSH
28939: LD_INT 13
28941: GREATER
28942: AND
28943: PUSH
28944: LD_VAR 0 1
28948: PPUSH
28949: LD_VAR 0 10
28953: PPUSH
28954: CALL_OW 296
28958: PUSH
28959: LD_INT 12
28961: GREATER
28962: OR
28963: IFFALSE 28967
// exit ;
28965: GO 29320
// missile := [ 1 ] ;
28967: LD_ADDR_VAR 0 14
28971: PUSH
28972: LD_INT 1
28974: PUSH
28975: EMPTY
28976: LIST
28977: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28978: LD_VAR 0 9
28982: PPUSH
28983: LD_VAR 0 12
28987: PPUSH
28988: CALL_OW 325
28992: IFFALSE 29021
// missile := Replace ( missile , missile + 1 , 2 ) ;
28994: LD_ADDR_VAR 0 14
28998: PUSH
28999: LD_VAR 0 14
29003: PPUSH
29004: LD_VAR 0 14
29008: PUSH
29009: LD_INT 1
29011: PLUS
29012: PPUSH
29013: LD_INT 2
29015: PPUSH
29016: CALL_OW 1
29020: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29021: LD_VAR 0 9
29025: PPUSH
29026: LD_VAR 0 13
29030: PPUSH
29031: CALL_OW 325
29035: PUSH
29036: LD_VAR 0 10
29040: PPUSH
29041: CALL_OW 255
29045: PPUSH
29046: LD_VAR 0 13
29050: PPUSH
29051: CALL_OW 325
29055: NOT
29056: AND
29057: IFFALSE 29086
// missile := Replace ( missile , missile + 1 , 3 ) ;
29059: LD_ADDR_VAR 0 14
29063: PUSH
29064: LD_VAR 0 14
29068: PPUSH
29069: LD_VAR 0 14
29073: PUSH
29074: LD_INT 1
29076: PLUS
29077: PPUSH
29078: LD_INT 3
29080: PPUSH
29081: CALL_OW 1
29085: ST_TO_ADDR
// if missile < 2 then
29086: LD_VAR 0 14
29090: PUSH
29091: LD_INT 2
29093: LESS
29094: IFFALSE 29098
// exit ;
29096: GO 29320
// x := GetX ( enemy ) ;
29098: LD_ADDR_VAR 0 4
29102: PUSH
29103: LD_VAR 0 10
29107: PPUSH
29108: CALL_OW 250
29112: ST_TO_ADDR
// y := GetY ( enemy ) ;
29113: LD_ADDR_VAR 0 5
29117: PUSH
29118: LD_VAR 0 10
29122: PPUSH
29123: CALL_OW 251
29127: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
29128: LD_ADDR_VAR 0 6
29132: PUSH
29133: LD_VAR 0 4
29137: PUSH
29138: LD_INT 1
29140: NEG
29141: PPUSH
29142: LD_INT 1
29144: PPUSH
29145: CALL_OW 12
29149: PLUS
29150: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
29151: LD_ADDR_VAR 0 7
29155: PUSH
29156: LD_VAR 0 5
29160: PUSH
29161: LD_INT 1
29163: NEG
29164: PPUSH
29165: LD_INT 1
29167: PPUSH
29168: CALL_OW 12
29172: PLUS
29173: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29174: LD_VAR 0 6
29178: PPUSH
29179: LD_VAR 0 7
29183: PPUSH
29184: CALL_OW 488
29188: NOT
29189: IFFALSE 29211
// begin _x := x ;
29191: LD_ADDR_VAR 0 6
29195: PUSH
29196: LD_VAR 0 4
29200: ST_TO_ADDR
// _y := y ;
29201: LD_ADDR_VAR 0 7
29205: PUSH
29206: LD_VAR 0 5
29210: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
29211: LD_ADDR_VAR 0 3
29215: PUSH
29216: LD_INT 1
29218: PPUSH
29219: LD_VAR 0 14
29223: PPUSH
29224: CALL_OW 12
29228: ST_TO_ADDR
// case i of 1 :
29229: LD_VAR 0 3
29233: PUSH
29234: LD_INT 1
29236: DOUBLE
29237: EQUAL
29238: IFTRUE 29242
29240: GO 29259
29242: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
29243: LD_VAR 0 1
29247: PPUSH
29248: LD_VAR 0 10
29252: PPUSH
29253: CALL_OW 115
29257: GO 29320
29259: LD_INT 2
29261: DOUBLE
29262: EQUAL
29263: IFTRUE 29267
29265: GO 29289
29267: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
29268: LD_VAR 0 1
29272: PPUSH
29273: LD_VAR 0 6
29277: PPUSH
29278: LD_VAR 0 7
29282: PPUSH
29283: CALL_OW 153
29287: GO 29320
29289: LD_INT 3
29291: DOUBLE
29292: EQUAL
29293: IFTRUE 29297
29295: GO 29319
29297: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
29298: LD_VAR 0 1
29302: PPUSH
29303: LD_VAR 0 6
29307: PPUSH
29308: LD_VAR 0 7
29312: PPUSH
29313: CALL_OW 154
29317: GO 29320
29319: POP
// end ;
29320: LD_VAR 0 2
29324: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
29325: LD_INT 0
29327: PPUSH
29328: PPUSH
29329: PPUSH
29330: PPUSH
29331: PPUSH
29332: PPUSH
// if not unit or not building then
29333: LD_VAR 0 1
29337: NOT
29338: PUSH
29339: LD_VAR 0 2
29343: NOT
29344: OR
29345: IFFALSE 29349
// exit ;
29347: GO 29507
// x := GetX ( building ) ;
29349: LD_ADDR_VAR 0 5
29353: PUSH
29354: LD_VAR 0 2
29358: PPUSH
29359: CALL_OW 250
29363: ST_TO_ADDR
// y := GetY ( building ) ;
29364: LD_ADDR_VAR 0 6
29368: PUSH
29369: LD_VAR 0 2
29373: PPUSH
29374: CALL_OW 251
29378: ST_TO_ADDR
// for i = 0 to 5 do
29379: LD_ADDR_VAR 0 4
29383: PUSH
29384: DOUBLE
29385: LD_INT 0
29387: DEC
29388: ST_TO_ADDR
29389: LD_INT 5
29391: PUSH
29392: FOR_TO
29393: IFFALSE 29505
// begin _x := ShiftX ( x , i , 3 ) ;
29395: LD_ADDR_VAR 0 7
29399: PUSH
29400: LD_VAR 0 5
29404: PPUSH
29405: LD_VAR 0 4
29409: PPUSH
29410: LD_INT 3
29412: PPUSH
29413: CALL_OW 272
29417: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
29418: LD_ADDR_VAR 0 8
29422: PUSH
29423: LD_VAR 0 6
29427: PPUSH
29428: LD_VAR 0 4
29432: PPUSH
29433: LD_INT 3
29435: PPUSH
29436: CALL_OW 273
29440: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29441: LD_VAR 0 7
29445: PPUSH
29446: LD_VAR 0 8
29450: PPUSH
29451: CALL_OW 488
29455: NOT
29456: IFFALSE 29460
// continue ;
29458: GO 29392
// if HexInfo ( _x , _y ) = 0 then
29460: LD_VAR 0 7
29464: PPUSH
29465: LD_VAR 0 8
29469: PPUSH
29470: CALL_OW 428
29474: PUSH
29475: LD_INT 0
29477: EQUAL
29478: IFFALSE 29503
// begin ComMoveXY ( unit , _x , _y ) ;
29480: LD_VAR 0 1
29484: PPUSH
29485: LD_VAR 0 7
29489: PPUSH
29490: LD_VAR 0 8
29494: PPUSH
29495: CALL_OW 111
// exit ;
29499: POP
29500: POP
29501: GO 29507
// end ; end ;
29503: GO 29392
29505: POP
29506: POP
// end ;
29507: LD_VAR 0 3
29511: RET
// export function ScanBase ( side , base_area ) ; begin
29512: LD_INT 0
29514: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
29515: LD_ADDR_VAR 0 3
29519: PUSH
29520: LD_VAR 0 2
29524: PPUSH
29525: LD_INT 81
29527: PUSH
29528: LD_VAR 0 1
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: PPUSH
29537: CALL_OW 70
29541: ST_TO_ADDR
// end ;
29542: LD_VAR 0 3
29546: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
29547: LD_INT 0
29549: PPUSH
29550: PPUSH
29551: PPUSH
29552: PPUSH
// result := false ;
29553: LD_ADDR_VAR 0 2
29557: PUSH
29558: LD_INT 0
29560: ST_TO_ADDR
// side := GetSide ( unit ) ;
29561: LD_ADDR_VAR 0 3
29565: PUSH
29566: LD_VAR 0 1
29570: PPUSH
29571: CALL_OW 255
29575: ST_TO_ADDR
// nat := GetNation ( unit ) ;
29576: LD_ADDR_VAR 0 4
29580: PUSH
29581: LD_VAR 0 1
29585: PPUSH
29586: CALL_OW 248
29590: ST_TO_ADDR
// case nat of 1 :
29591: LD_VAR 0 4
29595: PUSH
29596: LD_INT 1
29598: DOUBLE
29599: EQUAL
29600: IFTRUE 29604
29602: GO 29615
29604: POP
// tech := tech_lassight ; 2 :
29605: LD_ADDR_VAR 0 5
29609: PUSH
29610: LD_INT 12
29612: ST_TO_ADDR
29613: GO 29654
29615: LD_INT 2
29617: DOUBLE
29618: EQUAL
29619: IFTRUE 29623
29621: GO 29634
29623: POP
// tech := tech_mortar ; 3 :
29624: LD_ADDR_VAR 0 5
29628: PUSH
29629: LD_INT 41
29631: ST_TO_ADDR
29632: GO 29654
29634: LD_INT 3
29636: DOUBLE
29637: EQUAL
29638: IFTRUE 29642
29640: GO 29653
29642: POP
// tech := tech_bazooka ; end ;
29643: LD_ADDR_VAR 0 5
29647: PUSH
29648: LD_INT 44
29650: ST_TO_ADDR
29651: GO 29654
29653: POP
// if Researched ( side , tech ) then
29654: LD_VAR 0 3
29658: PPUSH
29659: LD_VAR 0 5
29663: PPUSH
29664: CALL_OW 325
29668: IFFALSE 29695
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
29670: LD_ADDR_VAR 0 2
29674: PUSH
29675: LD_INT 5
29677: PUSH
29678: LD_INT 8
29680: PUSH
29681: LD_INT 9
29683: PUSH
29684: EMPTY
29685: LIST
29686: LIST
29687: LIST
29688: PUSH
29689: LD_VAR 0 4
29693: ARRAY
29694: ST_TO_ADDR
// end ;
29695: LD_VAR 0 2
29699: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
29700: LD_INT 0
29702: PPUSH
29703: PPUSH
29704: PPUSH
// if not mines then
29705: LD_VAR 0 2
29709: NOT
29710: IFFALSE 29714
// exit ;
29712: GO 29858
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29714: LD_ADDR_VAR 0 5
29718: PUSH
29719: LD_INT 81
29721: PUSH
29722: LD_VAR 0 1
29726: PUSH
29727: EMPTY
29728: LIST
29729: LIST
29730: PUSH
29731: LD_INT 3
29733: PUSH
29734: LD_INT 21
29736: PUSH
29737: LD_INT 3
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: PPUSH
29752: CALL_OW 69
29756: ST_TO_ADDR
// for i in mines do
29757: LD_ADDR_VAR 0 4
29761: PUSH
29762: LD_VAR 0 2
29766: PUSH
29767: FOR_IN
29768: IFFALSE 29856
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29770: LD_VAR 0 4
29774: PUSH
29775: LD_INT 1
29777: ARRAY
29778: PPUSH
29779: LD_VAR 0 4
29783: PUSH
29784: LD_INT 2
29786: ARRAY
29787: PPUSH
29788: CALL_OW 458
29792: NOT
29793: IFFALSE 29797
// continue ;
29795: GO 29767
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29797: LD_VAR 0 4
29801: PUSH
29802: LD_INT 1
29804: ARRAY
29805: PPUSH
29806: LD_VAR 0 4
29810: PUSH
29811: LD_INT 2
29813: ARRAY
29814: PPUSH
29815: CALL_OW 428
29819: PUSH
29820: LD_VAR 0 5
29824: IN
29825: IFFALSE 29854
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29827: LD_VAR 0 4
29831: PUSH
29832: LD_INT 1
29834: ARRAY
29835: PPUSH
29836: LD_VAR 0 4
29840: PUSH
29841: LD_INT 2
29843: ARRAY
29844: PPUSH
29845: LD_VAR 0 1
29849: PPUSH
29850: CALL_OW 456
// end ;
29854: GO 29767
29856: POP
29857: POP
// end ;
29858: LD_VAR 0 3
29862: RET
// export function Count ( array ) ; begin
29863: LD_INT 0
29865: PPUSH
// result := array + 0 ;
29866: LD_ADDR_VAR 0 2
29870: PUSH
29871: LD_VAR 0 1
29875: PUSH
29876: LD_INT 0
29878: PLUS
29879: ST_TO_ADDR
// end ;
29880: LD_VAR 0 2
29884: RET
// export function IsEmpty ( building ) ; begin
29885: LD_INT 0
29887: PPUSH
// if not building then
29888: LD_VAR 0 1
29892: NOT
29893: IFFALSE 29897
// exit ;
29895: GO 29940
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29897: LD_ADDR_VAR 0 2
29901: PUSH
29902: LD_VAR 0 1
29906: PUSH
29907: LD_INT 22
29909: PUSH
29910: LD_VAR 0 1
29914: PPUSH
29915: CALL_OW 255
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: PUSH
29924: LD_INT 58
29926: PUSH
29927: EMPTY
29928: LIST
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: PPUSH
29934: CALL_OW 69
29938: IN
29939: ST_TO_ADDR
// end ;
29940: LD_VAR 0 2
29944: RET
// export function IsNotFull ( building ) ; var places ; begin
29945: LD_INT 0
29947: PPUSH
29948: PPUSH
// if not building then
29949: LD_VAR 0 1
29953: NOT
29954: IFFALSE 29958
// exit ;
29956: GO 29986
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
29958: LD_ADDR_VAR 0 2
29962: PUSH
29963: LD_VAR 0 1
29967: PPUSH
29968: LD_INT 3
29970: PUSH
29971: LD_INT 62
29973: PUSH
29974: EMPTY
29975: LIST
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: PPUSH
29981: CALL_OW 72
29985: ST_TO_ADDR
// end ;
29986: LD_VAR 0 2
29990: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29991: LD_INT 0
29993: PPUSH
29994: PPUSH
29995: PPUSH
29996: PPUSH
// tmp := [ ] ;
29997: LD_ADDR_VAR 0 3
30001: PUSH
30002: EMPTY
30003: ST_TO_ADDR
// list := [ ] ;
30004: LD_ADDR_VAR 0 5
30008: PUSH
30009: EMPTY
30010: ST_TO_ADDR
// for i = 16 to 25 do
30011: LD_ADDR_VAR 0 4
30015: PUSH
30016: DOUBLE
30017: LD_INT 16
30019: DEC
30020: ST_TO_ADDR
30021: LD_INT 25
30023: PUSH
30024: FOR_TO
30025: IFFALSE 30098
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
30027: LD_ADDR_VAR 0 3
30031: PUSH
30032: LD_VAR 0 3
30036: PUSH
30037: LD_INT 22
30039: PUSH
30040: LD_VAR 0 1
30044: PPUSH
30045: CALL_OW 255
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: PUSH
30054: LD_INT 91
30056: PUSH
30057: LD_VAR 0 1
30061: PUSH
30062: LD_INT 6
30064: PUSH
30065: EMPTY
30066: LIST
30067: LIST
30068: LIST
30069: PUSH
30070: LD_INT 30
30072: PUSH
30073: LD_VAR 0 4
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: LIST
30086: PUSH
30087: EMPTY
30088: LIST
30089: PPUSH
30090: CALL_OW 69
30094: ADD
30095: ST_TO_ADDR
30096: GO 30024
30098: POP
30099: POP
// for i = 1 to tmp do
30100: LD_ADDR_VAR 0 4
30104: PUSH
30105: DOUBLE
30106: LD_INT 1
30108: DEC
30109: ST_TO_ADDR
30110: LD_VAR 0 3
30114: PUSH
30115: FOR_TO
30116: IFFALSE 30204
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
30118: LD_ADDR_VAR 0 5
30122: PUSH
30123: LD_VAR 0 5
30127: PUSH
30128: LD_VAR 0 3
30132: PUSH
30133: LD_VAR 0 4
30137: ARRAY
30138: PPUSH
30139: CALL_OW 266
30143: PUSH
30144: LD_VAR 0 3
30148: PUSH
30149: LD_VAR 0 4
30153: ARRAY
30154: PPUSH
30155: CALL_OW 250
30159: PUSH
30160: LD_VAR 0 3
30164: PUSH
30165: LD_VAR 0 4
30169: ARRAY
30170: PPUSH
30171: CALL_OW 251
30175: PUSH
30176: LD_VAR 0 3
30180: PUSH
30181: LD_VAR 0 4
30185: ARRAY
30186: PPUSH
30187: CALL_OW 254
30191: PUSH
30192: EMPTY
30193: LIST
30194: LIST
30195: LIST
30196: LIST
30197: PUSH
30198: EMPTY
30199: LIST
30200: ADD
30201: ST_TO_ADDR
30202: GO 30115
30204: POP
30205: POP
// result := list ;
30206: LD_ADDR_VAR 0 2
30210: PUSH
30211: LD_VAR 0 5
30215: ST_TO_ADDR
// end ;
30216: LD_VAR 0 2
30220: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
30221: LD_INT 0
30223: PPUSH
30224: PPUSH
30225: PPUSH
30226: PPUSH
30227: PPUSH
30228: PPUSH
30229: PPUSH
// if not factory then
30230: LD_VAR 0 1
30234: NOT
30235: IFFALSE 30239
// exit ;
30237: GO 30832
// if control = control_apeman then
30239: LD_VAR 0 4
30243: PUSH
30244: LD_INT 5
30246: EQUAL
30247: IFFALSE 30356
// begin tmp := UnitsInside ( factory ) ;
30249: LD_ADDR_VAR 0 8
30253: PUSH
30254: LD_VAR 0 1
30258: PPUSH
30259: CALL_OW 313
30263: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
30264: LD_VAR 0 8
30268: PPUSH
30269: LD_INT 25
30271: PUSH
30272: LD_INT 12
30274: PUSH
30275: EMPTY
30276: LIST
30277: LIST
30278: PPUSH
30279: CALL_OW 72
30283: NOT
30284: IFFALSE 30294
// control := control_manual ;
30286: LD_ADDR_VAR 0 4
30290: PUSH
30291: LD_INT 1
30293: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
30294: LD_ADDR_VAR 0 8
30298: PUSH
30299: LD_VAR 0 1
30303: PPUSH
30304: CALL 29991 0 1
30308: ST_TO_ADDR
// if tmp then
30309: LD_VAR 0 8
30313: IFFALSE 30356
// begin for i in tmp do
30315: LD_ADDR_VAR 0 7
30319: PUSH
30320: LD_VAR 0 8
30324: PUSH
30325: FOR_IN
30326: IFFALSE 30354
// if i [ 1 ] = b_ext_radio then
30328: LD_VAR 0 7
30332: PUSH
30333: LD_INT 1
30335: ARRAY
30336: PUSH
30337: LD_INT 22
30339: EQUAL
30340: IFFALSE 30352
// begin control := control_remote ;
30342: LD_ADDR_VAR 0 4
30346: PUSH
30347: LD_INT 2
30349: ST_TO_ADDR
// break ;
30350: GO 30354
// end ;
30352: GO 30325
30354: POP
30355: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30356: LD_VAR 0 1
30360: PPUSH
30361: LD_VAR 0 2
30365: PPUSH
30366: LD_VAR 0 3
30370: PPUSH
30371: LD_VAR 0 4
30375: PPUSH
30376: LD_VAR 0 5
30380: PPUSH
30381: CALL_OW 448
30385: IFFALSE 30420
// begin result := [ chassis , engine , control , weapon ] ;
30387: LD_ADDR_VAR 0 6
30391: PUSH
30392: LD_VAR 0 2
30396: PUSH
30397: LD_VAR 0 3
30401: PUSH
30402: LD_VAR 0 4
30406: PUSH
30407: LD_VAR 0 5
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: LIST
30416: LIST
30417: ST_TO_ADDR
// exit ;
30418: GO 30832
// end ; _chassis := AvailableChassisList ( factory ) ;
30420: LD_ADDR_VAR 0 9
30424: PUSH
30425: LD_VAR 0 1
30429: PPUSH
30430: CALL_OW 475
30434: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
30435: LD_ADDR_VAR 0 11
30439: PUSH
30440: LD_VAR 0 1
30444: PPUSH
30445: CALL_OW 476
30449: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
30450: LD_ADDR_VAR 0 12
30454: PUSH
30455: LD_VAR 0 1
30459: PPUSH
30460: CALL_OW 477
30464: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
30465: LD_ADDR_VAR 0 10
30469: PUSH
30470: LD_VAR 0 1
30474: PPUSH
30475: CALL_OW 478
30479: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
30480: LD_VAR 0 9
30484: NOT
30485: PUSH
30486: LD_VAR 0 11
30490: NOT
30491: OR
30492: PUSH
30493: LD_VAR 0 12
30497: NOT
30498: OR
30499: PUSH
30500: LD_VAR 0 10
30504: NOT
30505: OR
30506: IFFALSE 30541
// begin result := [ chassis , engine , control , weapon ] ;
30508: LD_ADDR_VAR 0 6
30512: PUSH
30513: LD_VAR 0 2
30517: PUSH
30518: LD_VAR 0 3
30522: PUSH
30523: LD_VAR 0 4
30527: PUSH
30528: LD_VAR 0 5
30532: PUSH
30533: EMPTY
30534: LIST
30535: LIST
30536: LIST
30537: LIST
30538: ST_TO_ADDR
// exit ;
30539: GO 30832
// end ; if not chassis in _chassis then
30541: LD_VAR 0 2
30545: PUSH
30546: LD_VAR 0 9
30550: IN
30551: NOT
30552: IFFALSE 30578
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
30554: LD_ADDR_VAR 0 2
30558: PUSH
30559: LD_VAR 0 9
30563: PUSH
30564: LD_INT 1
30566: PPUSH
30567: LD_VAR 0 9
30571: PPUSH
30572: CALL_OW 12
30576: ARRAY
30577: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
30578: LD_VAR 0 2
30582: PPUSH
30583: LD_VAR 0 3
30587: PPUSH
30588: CALL 30837 0 2
30592: NOT
30593: IFFALSE 30652
// repeat engine := _engine [ 1 ] ;
30595: LD_ADDR_VAR 0 3
30599: PUSH
30600: LD_VAR 0 11
30604: PUSH
30605: LD_INT 1
30607: ARRAY
30608: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
30609: LD_ADDR_VAR 0 11
30613: PUSH
30614: LD_VAR 0 11
30618: PPUSH
30619: LD_INT 1
30621: PPUSH
30622: CALL_OW 3
30626: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
30627: LD_VAR 0 2
30631: PPUSH
30632: LD_VAR 0 3
30636: PPUSH
30637: CALL 30837 0 2
30641: PUSH
30642: LD_VAR 0 11
30646: PUSH
30647: EMPTY
30648: EQUAL
30649: OR
30650: IFFALSE 30595
// if not control in _control then
30652: LD_VAR 0 4
30656: PUSH
30657: LD_VAR 0 12
30661: IN
30662: NOT
30663: IFFALSE 30689
// control := _control [ rand ( 1 , _control ) ] ;
30665: LD_ADDR_VAR 0 4
30669: PUSH
30670: LD_VAR 0 12
30674: PUSH
30675: LD_INT 1
30677: PPUSH
30678: LD_VAR 0 12
30682: PPUSH
30683: CALL_OW 12
30687: ARRAY
30688: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
30689: LD_VAR 0 2
30693: PPUSH
30694: LD_VAR 0 5
30698: PPUSH
30699: CALL 31057 0 2
30703: NOT
30704: IFFALSE 30763
// repeat weapon := _weapon [ 1 ] ;
30706: LD_ADDR_VAR 0 5
30710: PUSH
30711: LD_VAR 0 10
30715: PUSH
30716: LD_INT 1
30718: ARRAY
30719: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30720: LD_ADDR_VAR 0 10
30724: PUSH
30725: LD_VAR 0 10
30729: PPUSH
30730: LD_INT 1
30732: PPUSH
30733: CALL_OW 3
30737: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30738: LD_VAR 0 2
30742: PPUSH
30743: LD_VAR 0 5
30747: PPUSH
30748: CALL 31057 0 2
30752: PUSH
30753: LD_VAR 0 10
30757: PUSH
30758: EMPTY
30759: EQUAL
30760: OR
30761: IFFALSE 30706
// result := [ ] ;
30763: LD_ADDR_VAR 0 6
30767: PUSH
30768: EMPTY
30769: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30770: LD_VAR 0 1
30774: PPUSH
30775: LD_VAR 0 2
30779: PPUSH
30780: LD_VAR 0 3
30784: PPUSH
30785: LD_VAR 0 4
30789: PPUSH
30790: LD_VAR 0 5
30794: PPUSH
30795: CALL_OW 448
30799: IFFALSE 30832
// result := [ chassis , engine , control , weapon ] ;
30801: LD_ADDR_VAR 0 6
30805: PUSH
30806: LD_VAR 0 2
30810: PUSH
30811: LD_VAR 0 3
30815: PUSH
30816: LD_VAR 0 4
30820: PUSH
30821: LD_VAR 0 5
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: LIST
30830: LIST
30831: ST_TO_ADDR
// end ;
30832: LD_VAR 0 6
30836: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30837: LD_INT 0
30839: PPUSH
// if not chassis or not engine then
30840: LD_VAR 0 1
30844: NOT
30845: PUSH
30846: LD_VAR 0 2
30850: NOT
30851: OR
30852: IFFALSE 30856
// exit ;
30854: GO 31052
// case engine of engine_solar :
30856: LD_VAR 0 2
30860: PUSH
30861: LD_INT 2
30863: DOUBLE
30864: EQUAL
30865: IFTRUE 30869
30867: GO 30907
30869: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30870: LD_ADDR_VAR 0 3
30874: PUSH
30875: LD_INT 11
30877: PUSH
30878: LD_INT 12
30880: PUSH
30881: LD_INT 13
30883: PUSH
30884: LD_INT 14
30886: PUSH
30887: LD_INT 1
30889: PUSH
30890: LD_INT 2
30892: PUSH
30893: LD_INT 3
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: LIST
30900: LIST
30901: LIST
30902: LIST
30903: LIST
30904: ST_TO_ADDR
30905: GO 31036
30907: LD_INT 1
30909: DOUBLE
30910: EQUAL
30911: IFTRUE 30915
30913: GO 30977
30915: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30916: LD_ADDR_VAR 0 3
30920: PUSH
30921: LD_INT 11
30923: PUSH
30924: LD_INT 12
30926: PUSH
30927: LD_INT 13
30929: PUSH
30930: LD_INT 14
30932: PUSH
30933: LD_INT 1
30935: PUSH
30936: LD_INT 2
30938: PUSH
30939: LD_INT 3
30941: PUSH
30942: LD_INT 4
30944: PUSH
30945: LD_INT 5
30947: PUSH
30948: LD_INT 21
30950: PUSH
30951: LD_INT 23
30953: PUSH
30954: LD_INT 22
30956: PUSH
30957: LD_INT 24
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: LIST
30964: LIST
30965: LIST
30966: LIST
30967: LIST
30968: LIST
30969: LIST
30970: LIST
30971: LIST
30972: LIST
30973: LIST
30974: ST_TO_ADDR
30975: GO 31036
30977: LD_INT 3
30979: DOUBLE
30980: EQUAL
30981: IFTRUE 30985
30983: GO 31035
30985: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30986: LD_ADDR_VAR 0 3
30990: PUSH
30991: LD_INT 13
30993: PUSH
30994: LD_INT 14
30996: PUSH
30997: LD_INT 2
30999: PUSH
31000: LD_INT 3
31002: PUSH
31003: LD_INT 4
31005: PUSH
31006: LD_INT 5
31008: PUSH
31009: LD_INT 21
31011: PUSH
31012: LD_INT 22
31014: PUSH
31015: LD_INT 23
31017: PUSH
31018: LD_INT 24
31020: PUSH
31021: EMPTY
31022: LIST
31023: LIST
31024: LIST
31025: LIST
31026: LIST
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: ST_TO_ADDR
31033: GO 31036
31035: POP
// result := ( chassis in result ) ;
31036: LD_ADDR_VAR 0 3
31040: PUSH
31041: LD_VAR 0 1
31045: PUSH
31046: LD_VAR 0 3
31050: IN
31051: ST_TO_ADDR
// end ;
31052: LD_VAR 0 3
31056: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
31057: LD_INT 0
31059: PPUSH
// if not chassis or not weapon then
31060: LD_VAR 0 1
31064: NOT
31065: PUSH
31066: LD_VAR 0 2
31070: NOT
31071: OR
31072: IFFALSE 31076
// exit ;
31074: GO 32136
// case weapon of us_machine_gun :
31076: LD_VAR 0 2
31080: PUSH
31081: LD_INT 2
31083: DOUBLE
31084: EQUAL
31085: IFTRUE 31089
31087: GO 31119
31089: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
31090: LD_ADDR_VAR 0 3
31094: PUSH
31095: LD_INT 1
31097: PUSH
31098: LD_INT 2
31100: PUSH
31101: LD_INT 3
31103: PUSH
31104: LD_INT 4
31106: PUSH
31107: LD_INT 5
31109: PUSH
31110: EMPTY
31111: LIST
31112: LIST
31113: LIST
31114: LIST
31115: LIST
31116: ST_TO_ADDR
31117: GO 32120
31119: LD_INT 3
31121: DOUBLE
31122: EQUAL
31123: IFTRUE 31127
31125: GO 31157
31127: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
31128: LD_ADDR_VAR 0 3
31132: PUSH
31133: LD_INT 1
31135: PUSH
31136: LD_INT 2
31138: PUSH
31139: LD_INT 3
31141: PUSH
31142: LD_INT 4
31144: PUSH
31145: LD_INT 5
31147: PUSH
31148: EMPTY
31149: LIST
31150: LIST
31151: LIST
31152: LIST
31153: LIST
31154: ST_TO_ADDR
31155: GO 32120
31157: LD_INT 11
31159: DOUBLE
31160: EQUAL
31161: IFTRUE 31165
31163: GO 31195
31165: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
31166: LD_ADDR_VAR 0 3
31170: PUSH
31171: LD_INT 1
31173: PUSH
31174: LD_INT 2
31176: PUSH
31177: LD_INT 3
31179: PUSH
31180: LD_INT 4
31182: PUSH
31183: LD_INT 5
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: LIST
31190: LIST
31191: LIST
31192: ST_TO_ADDR
31193: GO 32120
31195: LD_INT 4
31197: DOUBLE
31198: EQUAL
31199: IFTRUE 31203
31201: GO 31229
31203: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
31204: LD_ADDR_VAR 0 3
31208: PUSH
31209: LD_INT 2
31211: PUSH
31212: LD_INT 3
31214: PUSH
31215: LD_INT 4
31217: PUSH
31218: LD_INT 5
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: LIST
31225: LIST
31226: ST_TO_ADDR
31227: GO 32120
31229: LD_INT 5
31231: DOUBLE
31232: EQUAL
31233: IFTRUE 31237
31235: GO 31263
31237: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
31238: LD_ADDR_VAR 0 3
31242: PUSH
31243: LD_INT 2
31245: PUSH
31246: LD_INT 3
31248: PUSH
31249: LD_INT 4
31251: PUSH
31252: LD_INT 5
31254: PUSH
31255: EMPTY
31256: LIST
31257: LIST
31258: LIST
31259: LIST
31260: ST_TO_ADDR
31261: GO 32120
31263: LD_INT 9
31265: DOUBLE
31266: EQUAL
31267: IFTRUE 31271
31269: GO 31297
31271: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
31272: LD_ADDR_VAR 0 3
31276: PUSH
31277: LD_INT 2
31279: PUSH
31280: LD_INT 3
31282: PUSH
31283: LD_INT 4
31285: PUSH
31286: LD_INT 5
31288: PUSH
31289: EMPTY
31290: LIST
31291: LIST
31292: LIST
31293: LIST
31294: ST_TO_ADDR
31295: GO 32120
31297: LD_INT 7
31299: DOUBLE
31300: EQUAL
31301: IFTRUE 31305
31303: GO 31331
31305: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
31306: LD_ADDR_VAR 0 3
31310: PUSH
31311: LD_INT 2
31313: PUSH
31314: LD_INT 3
31316: PUSH
31317: LD_INT 4
31319: PUSH
31320: LD_INT 5
31322: PUSH
31323: EMPTY
31324: LIST
31325: LIST
31326: LIST
31327: LIST
31328: ST_TO_ADDR
31329: GO 32120
31331: LD_INT 12
31333: DOUBLE
31334: EQUAL
31335: IFTRUE 31339
31337: GO 31365
31339: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
31340: LD_ADDR_VAR 0 3
31344: PUSH
31345: LD_INT 2
31347: PUSH
31348: LD_INT 3
31350: PUSH
31351: LD_INT 4
31353: PUSH
31354: LD_INT 5
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: LIST
31361: LIST
31362: ST_TO_ADDR
31363: GO 32120
31365: LD_INT 13
31367: DOUBLE
31368: EQUAL
31369: IFTRUE 31373
31371: GO 31399
31373: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
31374: LD_ADDR_VAR 0 3
31378: PUSH
31379: LD_INT 2
31381: PUSH
31382: LD_INT 3
31384: PUSH
31385: LD_INT 4
31387: PUSH
31388: LD_INT 5
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: LIST
31395: LIST
31396: ST_TO_ADDR
31397: GO 32120
31399: LD_INT 14
31401: DOUBLE
31402: EQUAL
31403: IFTRUE 31407
31405: GO 31425
31407: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
31408: LD_ADDR_VAR 0 3
31412: PUSH
31413: LD_INT 4
31415: PUSH
31416: LD_INT 5
31418: PUSH
31419: EMPTY
31420: LIST
31421: LIST
31422: ST_TO_ADDR
31423: GO 32120
31425: LD_INT 6
31427: DOUBLE
31428: EQUAL
31429: IFTRUE 31433
31431: GO 31451
31433: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
31434: LD_ADDR_VAR 0 3
31438: PUSH
31439: LD_INT 4
31441: PUSH
31442: LD_INT 5
31444: PUSH
31445: EMPTY
31446: LIST
31447: LIST
31448: ST_TO_ADDR
31449: GO 32120
31451: LD_INT 10
31453: DOUBLE
31454: EQUAL
31455: IFTRUE 31459
31457: GO 31477
31459: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
31460: LD_ADDR_VAR 0 3
31464: PUSH
31465: LD_INT 4
31467: PUSH
31468: LD_INT 5
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: ST_TO_ADDR
31475: GO 32120
31477: LD_INT 22
31479: DOUBLE
31480: EQUAL
31481: IFTRUE 31485
31483: GO 31511
31485: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
31486: LD_ADDR_VAR 0 3
31490: PUSH
31491: LD_INT 11
31493: PUSH
31494: LD_INT 12
31496: PUSH
31497: LD_INT 13
31499: PUSH
31500: LD_INT 14
31502: PUSH
31503: EMPTY
31504: LIST
31505: LIST
31506: LIST
31507: LIST
31508: ST_TO_ADDR
31509: GO 32120
31511: LD_INT 23
31513: DOUBLE
31514: EQUAL
31515: IFTRUE 31519
31517: GO 31545
31519: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
31520: LD_ADDR_VAR 0 3
31524: PUSH
31525: LD_INT 11
31527: PUSH
31528: LD_INT 12
31530: PUSH
31531: LD_INT 13
31533: PUSH
31534: LD_INT 14
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: LIST
31541: LIST
31542: ST_TO_ADDR
31543: GO 32120
31545: LD_INT 24
31547: DOUBLE
31548: EQUAL
31549: IFTRUE 31553
31551: GO 31579
31553: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
31554: LD_ADDR_VAR 0 3
31558: PUSH
31559: LD_INT 11
31561: PUSH
31562: LD_INT 12
31564: PUSH
31565: LD_INT 13
31567: PUSH
31568: LD_INT 14
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: ST_TO_ADDR
31577: GO 32120
31579: LD_INT 30
31581: DOUBLE
31582: EQUAL
31583: IFTRUE 31587
31585: GO 31613
31587: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
31588: LD_ADDR_VAR 0 3
31592: PUSH
31593: LD_INT 11
31595: PUSH
31596: LD_INT 12
31598: PUSH
31599: LD_INT 13
31601: PUSH
31602: LD_INT 14
31604: PUSH
31605: EMPTY
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: ST_TO_ADDR
31611: GO 32120
31613: LD_INT 25
31615: DOUBLE
31616: EQUAL
31617: IFTRUE 31621
31619: GO 31639
31621: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
31622: LD_ADDR_VAR 0 3
31626: PUSH
31627: LD_INT 13
31629: PUSH
31630: LD_INT 14
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: ST_TO_ADDR
31637: GO 32120
31639: LD_INT 27
31641: DOUBLE
31642: EQUAL
31643: IFTRUE 31647
31645: GO 31665
31647: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
31648: LD_ADDR_VAR 0 3
31652: PUSH
31653: LD_INT 13
31655: PUSH
31656: LD_INT 14
31658: PUSH
31659: EMPTY
31660: LIST
31661: LIST
31662: ST_TO_ADDR
31663: GO 32120
31665: LD_INT 92
31667: DOUBLE
31668: EQUAL
31669: IFTRUE 31673
31671: GO 31699
31673: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
31674: LD_ADDR_VAR 0 3
31678: PUSH
31679: LD_INT 11
31681: PUSH
31682: LD_INT 12
31684: PUSH
31685: LD_INT 13
31687: PUSH
31688: LD_INT 14
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: LIST
31695: LIST
31696: ST_TO_ADDR
31697: GO 32120
31699: LD_INT 28
31701: DOUBLE
31702: EQUAL
31703: IFTRUE 31707
31705: GO 31725
31707: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31708: LD_ADDR_VAR 0 3
31712: PUSH
31713: LD_INT 13
31715: PUSH
31716: LD_INT 14
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: ST_TO_ADDR
31723: GO 32120
31725: LD_INT 29
31727: DOUBLE
31728: EQUAL
31729: IFTRUE 31733
31731: GO 31751
31733: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31734: LD_ADDR_VAR 0 3
31738: PUSH
31739: LD_INT 13
31741: PUSH
31742: LD_INT 14
31744: PUSH
31745: EMPTY
31746: LIST
31747: LIST
31748: ST_TO_ADDR
31749: GO 32120
31751: LD_INT 31
31753: DOUBLE
31754: EQUAL
31755: IFTRUE 31759
31757: GO 31777
31759: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31760: LD_ADDR_VAR 0 3
31764: PUSH
31765: LD_INT 13
31767: PUSH
31768: LD_INT 14
31770: PUSH
31771: EMPTY
31772: LIST
31773: LIST
31774: ST_TO_ADDR
31775: GO 32120
31777: LD_INT 26
31779: DOUBLE
31780: EQUAL
31781: IFTRUE 31785
31783: GO 31803
31785: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31786: LD_ADDR_VAR 0 3
31790: PUSH
31791: LD_INT 13
31793: PUSH
31794: LD_INT 14
31796: PUSH
31797: EMPTY
31798: LIST
31799: LIST
31800: ST_TO_ADDR
31801: GO 32120
31803: LD_INT 42
31805: DOUBLE
31806: EQUAL
31807: IFTRUE 31811
31809: GO 31837
31811: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31812: LD_ADDR_VAR 0 3
31816: PUSH
31817: LD_INT 21
31819: PUSH
31820: LD_INT 22
31822: PUSH
31823: LD_INT 23
31825: PUSH
31826: LD_INT 24
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: ST_TO_ADDR
31835: GO 32120
31837: LD_INT 43
31839: DOUBLE
31840: EQUAL
31841: IFTRUE 31845
31843: GO 31871
31845: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31846: LD_ADDR_VAR 0 3
31850: PUSH
31851: LD_INT 21
31853: PUSH
31854: LD_INT 22
31856: PUSH
31857: LD_INT 23
31859: PUSH
31860: LD_INT 24
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: LIST
31867: LIST
31868: ST_TO_ADDR
31869: GO 32120
31871: LD_INT 44
31873: DOUBLE
31874: EQUAL
31875: IFTRUE 31879
31877: GO 31905
31879: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31880: LD_ADDR_VAR 0 3
31884: PUSH
31885: LD_INT 21
31887: PUSH
31888: LD_INT 22
31890: PUSH
31891: LD_INT 23
31893: PUSH
31894: LD_INT 24
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: LIST
31901: LIST
31902: ST_TO_ADDR
31903: GO 32120
31905: LD_INT 45
31907: DOUBLE
31908: EQUAL
31909: IFTRUE 31913
31911: GO 31939
31913: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31914: LD_ADDR_VAR 0 3
31918: PUSH
31919: LD_INT 21
31921: PUSH
31922: LD_INT 22
31924: PUSH
31925: LD_INT 23
31927: PUSH
31928: LD_INT 24
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: LIST
31935: LIST
31936: ST_TO_ADDR
31937: GO 32120
31939: LD_INT 49
31941: DOUBLE
31942: EQUAL
31943: IFTRUE 31947
31945: GO 31973
31947: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31948: LD_ADDR_VAR 0 3
31952: PUSH
31953: LD_INT 21
31955: PUSH
31956: LD_INT 22
31958: PUSH
31959: LD_INT 23
31961: PUSH
31962: LD_INT 24
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: LIST
31969: LIST
31970: ST_TO_ADDR
31971: GO 32120
31973: LD_INT 51
31975: DOUBLE
31976: EQUAL
31977: IFTRUE 31981
31979: GO 32007
31981: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31982: LD_ADDR_VAR 0 3
31986: PUSH
31987: LD_INT 21
31989: PUSH
31990: LD_INT 22
31992: PUSH
31993: LD_INT 23
31995: PUSH
31996: LD_INT 24
31998: PUSH
31999: EMPTY
32000: LIST
32001: LIST
32002: LIST
32003: LIST
32004: ST_TO_ADDR
32005: GO 32120
32007: LD_INT 52
32009: DOUBLE
32010: EQUAL
32011: IFTRUE 32015
32013: GO 32041
32015: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
32016: LD_ADDR_VAR 0 3
32020: PUSH
32021: LD_INT 21
32023: PUSH
32024: LD_INT 22
32026: PUSH
32027: LD_INT 23
32029: PUSH
32030: LD_INT 24
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: LIST
32037: LIST
32038: ST_TO_ADDR
32039: GO 32120
32041: LD_INT 53
32043: DOUBLE
32044: EQUAL
32045: IFTRUE 32049
32047: GO 32067
32049: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
32050: LD_ADDR_VAR 0 3
32054: PUSH
32055: LD_INT 23
32057: PUSH
32058: LD_INT 24
32060: PUSH
32061: EMPTY
32062: LIST
32063: LIST
32064: ST_TO_ADDR
32065: GO 32120
32067: LD_INT 46
32069: DOUBLE
32070: EQUAL
32071: IFTRUE 32075
32073: GO 32093
32075: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
32076: LD_ADDR_VAR 0 3
32080: PUSH
32081: LD_INT 23
32083: PUSH
32084: LD_INT 24
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: ST_TO_ADDR
32091: GO 32120
32093: LD_INT 47
32095: DOUBLE
32096: EQUAL
32097: IFTRUE 32101
32099: GO 32119
32101: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32102: LD_ADDR_VAR 0 3
32106: PUSH
32107: LD_INT 23
32109: PUSH
32110: LD_INT 24
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: ST_TO_ADDR
32117: GO 32120
32119: POP
// result := ( chassis in result ) ;
32120: LD_ADDR_VAR 0 3
32124: PUSH
32125: LD_VAR 0 1
32129: PUSH
32130: LD_VAR 0 3
32134: IN
32135: ST_TO_ADDR
// end ;
32136: LD_VAR 0 3
32140: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
32141: LD_INT 0
32143: PPUSH
32144: PPUSH
32145: PPUSH
32146: PPUSH
32147: PPUSH
32148: PPUSH
32149: PPUSH
// result := array ;
32150: LD_ADDR_VAR 0 5
32154: PUSH
32155: LD_VAR 0 1
32159: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
32160: LD_VAR 0 1
32164: NOT
32165: PUSH
32166: LD_VAR 0 2
32170: NOT
32171: OR
32172: PUSH
32173: LD_VAR 0 3
32177: NOT
32178: OR
32179: PUSH
32180: LD_VAR 0 2
32184: PUSH
32185: LD_VAR 0 1
32189: GREATER
32190: OR
32191: PUSH
32192: LD_VAR 0 3
32196: PUSH
32197: LD_VAR 0 1
32201: GREATER
32202: OR
32203: IFFALSE 32207
// exit ;
32205: GO 32503
// if direction then
32207: LD_VAR 0 4
32211: IFFALSE 32275
// begin d := 1 ;
32213: LD_ADDR_VAR 0 9
32217: PUSH
32218: LD_INT 1
32220: ST_TO_ADDR
// if i_from > i_to then
32221: LD_VAR 0 2
32225: PUSH
32226: LD_VAR 0 3
32230: GREATER
32231: IFFALSE 32257
// length := ( array - i_from ) + i_to else
32233: LD_ADDR_VAR 0 11
32237: PUSH
32238: LD_VAR 0 1
32242: PUSH
32243: LD_VAR 0 2
32247: MINUS
32248: PUSH
32249: LD_VAR 0 3
32253: PLUS
32254: ST_TO_ADDR
32255: GO 32273
// length := i_to - i_from ;
32257: LD_ADDR_VAR 0 11
32261: PUSH
32262: LD_VAR 0 3
32266: PUSH
32267: LD_VAR 0 2
32271: MINUS
32272: ST_TO_ADDR
// end else
32273: GO 32336
// begin d := - 1 ;
32275: LD_ADDR_VAR 0 9
32279: PUSH
32280: LD_INT 1
32282: NEG
32283: ST_TO_ADDR
// if i_from > i_to then
32284: LD_VAR 0 2
32288: PUSH
32289: LD_VAR 0 3
32293: GREATER
32294: IFFALSE 32314
// length := i_from - i_to else
32296: LD_ADDR_VAR 0 11
32300: PUSH
32301: LD_VAR 0 2
32305: PUSH
32306: LD_VAR 0 3
32310: MINUS
32311: ST_TO_ADDR
32312: GO 32336
// length := ( array - i_to ) + i_from ;
32314: LD_ADDR_VAR 0 11
32318: PUSH
32319: LD_VAR 0 1
32323: PUSH
32324: LD_VAR 0 3
32328: MINUS
32329: PUSH
32330: LD_VAR 0 2
32334: PLUS
32335: ST_TO_ADDR
// end ; if not length then
32336: LD_VAR 0 11
32340: NOT
32341: IFFALSE 32345
// exit ;
32343: GO 32503
// tmp := array ;
32345: LD_ADDR_VAR 0 10
32349: PUSH
32350: LD_VAR 0 1
32354: ST_TO_ADDR
// for i = 1 to length do
32355: LD_ADDR_VAR 0 6
32359: PUSH
32360: DOUBLE
32361: LD_INT 1
32363: DEC
32364: ST_TO_ADDR
32365: LD_VAR 0 11
32369: PUSH
32370: FOR_TO
32371: IFFALSE 32491
// begin for j = 1 to array do
32373: LD_ADDR_VAR 0 7
32377: PUSH
32378: DOUBLE
32379: LD_INT 1
32381: DEC
32382: ST_TO_ADDR
32383: LD_VAR 0 1
32387: PUSH
32388: FOR_TO
32389: IFFALSE 32477
// begin k := j + d ;
32391: LD_ADDR_VAR 0 8
32395: PUSH
32396: LD_VAR 0 7
32400: PUSH
32401: LD_VAR 0 9
32405: PLUS
32406: ST_TO_ADDR
// if k > array then
32407: LD_VAR 0 8
32411: PUSH
32412: LD_VAR 0 1
32416: GREATER
32417: IFFALSE 32427
// k := 1 ;
32419: LD_ADDR_VAR 0 8
32423: PUSH
32424: LD_INT 1
32426: ST_TO_ADDR
// if not k then
32427: LD_VAR 0 8
32431: NOT
32432: IFFALSE 32444
// k := array ;
32434: LD_ADDR_VAR 0 8
32438: PUSH
32439: LD_VAR 0 1
32443: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
32444: LD_ADDR_VAR 0 10
32448: PUSH
32449: LD_VAR 0 10
32453: PPUSH
32454: LD_VAR 0 8
32458: PPUSH
32459: LD_VAR 0 1
32463: PUSH
32464: LD_VAR 0 7
32468: ARRAY
32469: PPUSH
32470: CALL_OW 1
32474: ST_TO_ADDR
// end ;
32475: GO 32388
32477: POP
32478: POP
// array := tmp ;
32479: LD_ADDR_VAR 0 1
32483: PUSH
32484: LD_VAR 0 10
32488: ST_TO_ADDR
// end ;
32489: GO 32370
32491: POP
32492: POP
// result := array ;
32493: LD_ADDR_VAR 0 5
32497: PUSH
32498: LD_VAR 0 1
32502: ST_TO_ADDR
// end ;
32503: LD_VAR 0 5
32507: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
32508: LD_INT 0
32510: PPUSH
32511: PPUSH
// result := 0 ;
32512: LD_ADDR_VAR 0 3
32516: PUSH
32517: LD_INT 0
32519: ST_TO_ADDR
// if not array or not value in array then
32520: LD_VAR 0 1
32524: NOT
32525: PUSH
32526: LD_VAR 0 2
32530: PUSH
32531: LD_VAR 0 1
32535: IN
32536: NOT
32537: OR
32538: IFFALSE 32542
// exit ;
32540: GO 32596
// for i = 1 to array do
32542: LD_ADDR_VAR 0 4
32546: PUSH
32547: DOUBLE
32548: LD_INT 1
32550: DEC
32551: ST_TO_ADDR
32552: LD_VAR 0 1
32556: PUSH
32557: FOR_TO
32558: IFFALSE 32594
// if value = array [ i ] then
32560: LD_VAR 0 2
32564: PUSH
32565: LD_VAR 0 1
32569: PUSH
32570: LD_VAR 0 4
32574: ARRAY
32575: EQUAL
32576: IFFALSE 32592
// begin result := i ;
32578: LD_ADDR_VAR 0 3
32582: PUSH
32583: LD_VAR 0 4
32587: ST_TO_ADDR
// exit ;
32588: POP
32589: POP
32590: GO 32596
// end ;
32592: GO 32557
32594: POP
32595: POP
// end ;
32596: LD_VAR 0 3
32600: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
32601: LD_INT 0
32603: PPUSH
// vc_chassis := chassis ;
32604: LD_ADDR_OWVAR 37
32608: PUSH
32609: LD_VAR 0 1
32613: ST_TO_ADDR
// vc_engine := engine ;
32614: LD_ADDR_OWVAR 39
32618: PUSH
32619: LD_VAR 0 2
32623: ST_TO_ADDR
// vc_control := control ;
32624: LD_ADDR_OWVAR 38
32628: PUSH
32629: LD_VAR 0 3
32633: ST_TO_ADDR
// vc_weapon := weapon ;
32634: LD_ADDR_OWVAR 40
32638: PUSH
32639: LD_VAR 0 4
32643: ST_TO_ADDR
// vc_fuel_battery := fuel ;
32644: LD_ADDR_OWVAR 41
32648: PUSH
32649: LD_VAR 0 5
32653: ST_TO_ADDR
// end ;
32654: LD_VAR 0 6
32658: RET
// export function WantPlant ( unit ) ; var task ; begin
32659: LD_INT 0
32661: PPUSH
32662: PPUSH
// result := false ;
32663: LD_ADDR_VAR 0 2
32667: PUSH
32668: LD_INT 0
32670: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32671: LD_ADDR_VAR 0 3
32675: PUSH
32676: LD_VAR 0 1
32680: PPUSH
32681: CALL_OW 437
32685: ST_TO_ADDR
// if task then
32686: LD_VAR 0 3
32690: IFFALSE 32718
// if task [ 1 ] [ 1 ] = p then
32692: LD_VAR 0 3
32696: PUSH
32697: LD_INT 1
32699: ARRAY
32700: PUSH
32701: LD_INT 1
32703: ARRAY
32704: PUSH
32705: LD_STRING p
32707: EQUAL
32708: IFFALSE 32718
// result := true ;
32710: LD_ADDR_VAR 0 2
32714: PUSH
32715: LD_INT 1
32717: ST_TO_ADDR
// end ;
32718: LD_VAR 0 2
32722: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32723: LD_INT 0
32725: PPUSH
32726: PPUSH
32727: PPUSH
32728: PPUSH
// if pos < 1 then
32729: LD_VAR 0 2
32733: PUSH
32734: LD_INT 1
32736: LESS
32737: IFFALSE 32741
// exit ;
32739: GO 33044
// if pos = 1 then
32741: LD_VAR 0 2
32745: PUSH
32746: LD_INT 1
32748: EQUAL
32749: IFFALSE 32782
// result := Replace ( arr , pos [ 1 ] , value ) else
32751: LD_ADDR_VAR 0 4
32755: PUSH
32756: LD_VAR 0 1
32760: PPUSH
32761: LD_VAR 0 2
32765: PUSH
32766: LD_INT 1
32768: ARRAY
32769: PPUSH
32770: LD_VAR 0 3
32774: PPUSH
32775: CALL_OW 1
32779: ST_TO_ADDR
32780: GO 33044
// begin tmp := arr ;
32782: LD_ADDR_VAR 0 6
32786: PUSH
32787: LD_VAR 0 1
32791: ST_TO_ADDR
// s_arr := [ tmp ] ;
32792: LD_ADDR_VAR 0 7
32796: PUSH
32797: LD_VAR 0 6
32801: PUSH
32802: EMPTY
32803: LIST
32804: ST_TO_ADDR
// for i = 1 to pos - 1 do
32805: LD_ADDR_VAR 0 5
32809: PUSH
32810: DOUBLE
32811: LD_INT 1
32813: DEC
32814: ST_TO_ADDR
32815: LD_VAR 0 2
32819: PUSH
32820: LD_INT 1
32822: MINUS
32823: PUSH
32824: FOR_TO
32825: IFFALSE 32870
// begin tmp := tmp [ pos [ i ] ] ;
32827: LD_ADDR_VAR 0 6
32831: PUSH
32832: LD_VAR 0 6
32836: PUSH
32837: LD_VAR 0 2
32841: PUSH
32842: LD_VAR 0 5
32846: ARRAY
32847: ARRAY
32848: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32849: LD_ADDR_VAR 0 7
32853: PUSH
32854: LD_VAR 0 7
32858: PUSH
32859: LD_VAR 0 6
32863: PUSH
32864: EMPTY
32865: LIST
32866: ADD
32867: ST_TO_ADDR
// end ;
32868: GO 32824
32870: POP
32871: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32872: LD_ADDR_VAR 0 6
32876: PUSH
32877: LD_VAR 0 6
32881: PPUSH
32882: LD_VAR 0 2
32886: PUSH
32887: LD_VAR 0 2
32891: ARRAY
32892: PPUSH
32893: LD_VAR 0 3
32897: PPUSH
32898: CALL_OW 1
32902: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32903: LD_ADDR_VAR 0 7
32907: PUSH
32908: LD_VAR 0 7
32912: PPUSH
32913: LD_VAR 0 7
32917: PPUSH
32918: LD_VAR 0 6
32922: PPUSH
32923: CALL_OW 1
32927: ST_TO_ADDR
// for i = s_arr downto 2 do
32928: LD_ADDR_VAR 0 5
32932: PUSH
32933: DOUBLE
32934: LD_VAR 0 7
32938: INC
32939: ST_TO_ADDR
32940: LD_INT 2
32942: PUSH
32943: FOR_DOWNTO
32944: IFFALSE 33028
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32946: LD_ADDR_VAR 0 6
32950: PUSH
32951: LD_VAR 0 7
32955: PUSH
32956: LD_VAR 0 5
32960: PUSH
32961: LD_INT 1
32963: MINUS
32964: ARRAY
32965: PPUSH
32966: LD_VAR 0 2
32970: PUSH
32971: LD_VAR 0 5
32975: PUSH
32976: LD_INT 1
32978: MINUS
32979: ARRAY
32980: PPUSH
32981: LD_VAR 0 7
32985: PUSH
32986: LD_VAR 0 5
32990: ARRAY
32991: PPUSH
32992: CALL_OW 1
32996: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32997: LD_ADDR_VAR 0 7
33001: PUSH
33002: LD_VAR 0 7
33006: PPUSH
33007: LD_VAR 0 5
33011: PUSH
33012: LD_INT 1
33014: MINUS
33015: PPUSH
33016: LD_VAR 0 6
33020: PPUSH
33021: CALL_OW 1
33025: ST_TO_ADDR
// end ;
33026: GO 32943
33028: POP
33029: POP
// result := s_arr [ 1 ] ;
33030: LD_ADDR_VAR 0 4
33034: PUSH
33035: LD_VAR 0 7
33039: PUSH
33040: LD_INT 1
33042: ARRAY
33043: ST_TO_ADDR
// end ; end ;
33044: LD_VAR 0 4
33048: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
33049: LD_INT 0
33051: PPUSH
33052: PPUSH
// if not list then
33053: LD_VAR 0 1
33057: NOT
33058: IFFALSE 33062
// exit ;
33060: GO 33153
// i := list [ pos1 ] ;
33062: LD_ADDR_VAR 0 5
33066: PUSH
33067: LD_VAR 0 1
33071: PUSH
33072: LD_VAR 0 2
33076: ARRAY
33077: ST_TO_ADDR
// if not i then
33078: LD_VAR 0 5
33082: NOT
33083: IFFALSE 33087
// exit ;
33085: GO 33153
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
33087: LD_ADDR_VAR 0 1
33091: PUSH
33092: LD_VAR 0 1
33096: PPUSH
33097: LD_VAR 0 2
33101: PPUSH
33102: LD_VAR 0 1
33106: PUSH
33107: LD_VAR 0 3
33111: ARRAY
33112: PPUSH
33113: CALL_OW 1
33117: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
33118: LD_ADDR_VAR 0 1
33122: PUSH
33123: LD_VAR 0 1
33127: PPUSH
33128: LD_VAR 0 3
33132: PPUSH
33133: LD_VAR 0 5
33137: PPUSH
33138: CALL_OW 1
33142: ST_TO_ADDR
// result := list ;
33143: LD_ADDR_VAR 0 4
33147: PUSH
33148: LD_VAR 0 1
33152: ST_TO_ADDR
// end ;
33153: LD_VAR 0 4
33157: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
33158: LD_INT 0
33160: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
33161: LD_ADDR_VAR 0 5
33165: PUSH
33166: LD_VAR 0 1
33170: PPUSH
33171: CALL_OW 250
33175: PPUSH
33176: LD_VAR 0 1
33180: PPUSH
33181: CALL_OW 251
33185: PPUSH
33186: LD_VAR 0 2
33190: PPUSH
33191: LD_VAR 0 3
33195: PPUSH
33196: LD_VAR 0 4
33200: PPUSH
33201: CALL 33579 0 5
33205: ST_TO_ADDR
// end ;
33206: LD_VAR 0 5
33210: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
33211: LD_INT 0
33213: PPUSH
33214: PPUSH
33215: PPUSH
33216: PPUSH
// if not list or not unit then
33217: LD_VAR 0 2
33221: NOT
33222: PUSH
33223: LD_VAR 0 1
33227: NOT
33228: OR
33229: IFFALSE 33233
// exit ;
33231: GO 33574
// result := [ ] ;
33233: LD_ADDR_VAR 0 5
33237: PUSH
33238: EMPTY
33239: ST_TO_ADDR
// for i in list do
33240: LD_ADDR_VAR 0 6
33244: PUSH
33245: LD_VAR 0 2
33249: PUSH
33250: FOR_IN
33251: IFFALSE 33469
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
33253: LD_ADDR_VAR 0 8
33257: PUSH
33258: LD_VAR 0 1
33262: PPUSH
33263: LD_VAR 0 6
33267: PUSH
33268: LD_INT 1
33270: ARRAY
33271: PPUSH
33272: LD_VAR 0 6
33276: PUSH
33277: LD_INT 2
33279: ARRAY
33280: PPUSH
33281: CALL_OW 297
33285: ST_TO_ADDR
// if not Count ( result ) then
33286: LD_VAR 0 5
33290: PPUSH
33291: CALL 29863 0 1
33295: NOT
33296: IFFALSE 33329
// begin result := Join ( result , [ i , tmp ] ) ;
33298: LD_ADDR_VAR 0 5
33302: PUSH
33303: LD_VAR 0 5
33307: PPUSH
33308: LD_VAR 0 6
33312: PUSH
33313: LD_VAR 0 8
33317: PUSH
33318: EMPTY
33319: LIST
33320: LIST
33321: PPUSH
33322: CALL 65452 0 2
33326: ST_TO_ADDR
// continue ;
33327: GO 33250
// end ; if result [ result ] [ 2 ] <= tmp then
33329: LD_VAR 0 5
33333: PUSH
33334: LD_VAR 0 5
33338: ARRAY
33339: PUSH
33340: LD_INT 2
33342: ARRAY
33343: PUSH
33344: LD_VAR 0 8
33348: LESSEQUAL
33349: IFFALSE 33382
// result := Join ( result , [ i , tmp ] ) else
33351: LD_ADDR_VAR 0 5
33355: PUSH
33356: LD_VAR 0 5
33360: PPUSH
33361: LD_VAR 0 6
33365: PUSH
33366: LD_VAR 0 8
33370: PUSH
33371: EMPTY
33372: LIST
33373: LIST
33374: PPUSH
33375: CALL 65452 0 2
33379: ST_TO_ADDR
33380: GO 33467
// begin for j := 1 to Count ( result ) do
33382: LD_ADDR_VAR 0 7
33386: PUSH
33387: DOUBLE
33388: LD_INT 1
33390: DEC
33391: ST_TO_ADDR
33392: LD_VAR 0 5
33396: PPUSH
33397: CALL 29863 0 1
33401: PUSH
33402: FOR_TO
33403: IFFALSE 33465
// begin if tmp < result [ j ] [ 2 ] then
33405: LD_VAR 0 8
33409: PUSH
33410: LD_VAR 0 5
33414: PUSH
33415: LD_VAR 0 7
33419: ARRAY
33420: PUSH
33421: LD_INT 2
33423: ARRAY
33424: LESS
33425: IFFALSE 33463
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33427: LD_ADDR_VAR 0 5
33431: PUSH
33432: LD_VAR 0 5
33436: PPUSH
33437: LD_VAR 0 7
33441: PPUSH
33442: LD_VAR 0 6
33446: PUSH
33447: LD_VAR 0 8
33451: PUSH
33452: EMPTY
33453: LIST
33454: LIST
33455: PPUSH
33456: CALL_OW 2
33460: ST_TO_ADDR
// break ;
33461: GO 33465
// end ; end ;
33463: GO 33402
33465: POP
33466: POP
// end ; end ;
33467: GO 33250
33469: POP
33470: POP
// if result and not asc then
33471: LD_VAR 0 5
33475: PUSH
33476: LD_VAR 0 3
33480: NOT
33481: AND
33482: IFFALSE 33499
// result := ReverseArray ( result ) ;
33484: LD_ADDR_VAR 0 5
33488: PUSH
33489: LD_VAR 0 5
33493: PPUSH
33494: CALL 60739 0 1
33498: ST_TO_ADDR
// tmp := [ ] ;
33499: LD_ADDR_VAR 0 8
33503: PUSH
33504: EMPTY
33505: ST_TO_ADDR
// if mode then
33506: LD_VAR 0 4
33510: IFFALSE 33574
// begin for i := 1 to result do
33512: LD_ADDR_VAR 0 6
33516: PUSH
33517: DOUBLE
33518: LD_INT 1
33520: DEC
33521: ST_TO_ADDR
33522: LD_VAR 0 5
33526: PUSH
33527: FOR_TO
33528: IFFALSE 33562
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
33530: LD_ADDR_VAR 0 8
33534: PUSH
33535: LD_VAR 0 8
33539: PPUSH
33540: LD_VAR 0 5
33544: PUSH
33545: LD_VAR 0 6
33549: ARRAY
33550: PUSH
33551: LD_INT 1
33553: ARRAY
33554: PPUSH
33555: CALL 65452 0 2
33559: ST_TO_ADDR
33560: GO 33527
33562: POP
33563: POP
// result := tmp ;
33564: LD_ADDR_VAR 0 5
33568: PUSH
33569: LD_VAR 0 8
33573: ST_TO_ADDR
// end ; end ;
33574: LD_VAR 0 5
33578: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
33579: LD_INT 0
33581: PPUSH
33582: PPUSH
33583: PPUSH
33584: PPUSH
// if not list then
33585: LD_VAR 0 3
33589: NOT
33590: IFFALSE 33594
// exit ;
33592: GO 33982
// result := [ ] ;
33594: LD_ADDR_VAR 0 6
33598: PUSH
33599: EMPTY
33600: ST_TO_ADDR
// for i in list do
33601: LD_ADDR_VAR 0 7
33605: PUSH
33606: LD_VAR 0 3
33610: PUSH
33611: FOR_IN
33612: IFFALSE 33814
// begin tmp := GetDistUnitXY ( i , x , y ) ;
33614: LD_ADDR_VAR 0 9
33618: PUSH
33619: LD_VAR 0 7
33623: PPUSH
33624: LD_VAR 0 1
33628: PPUSH
33629: LD_VAR 0 2
33633: PPUSH
33634: CALL_OW 297
33638: ST_TO_ADDR
// if not result then
33639: LD_VAR 0 6
33643: NOT
33644: IFFALSE 33670
// result := [ [ i , tmp ] ] else
33646: LD_ADDR_VAR 0 6
33650: PUSH
33651: LD_VAR 0 7
33655: PUSH
33656: LD_VAR 0 9
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: PUSH
33665: EMPTY
33666: LIST
33667: ST_TO_ADDR
33668: GO 33812
// begin if result [ result ] [ 2 ] < tmp then
33670: LD_VAR 0 6
33674: PUSH
33675: LD_VAR 0 6
33679: ARRAY
33680: PUSH
33681: LD_INT 2
33683: ARRAY
33684: PUSH
33685: LD_VAR 0 9
33689: LESS
33690: IFFALSE 33732
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
33692: LD_ADDR_VAR 0 6
33696: PUSH
33697: LD_VAR 0 6
33701: PPUSH
33702: LD_VAR 0 6
33706: PUSH
33707: LD_INT 1
33709: PLUS
33710: PPUSH
33711: LD_VAR 0 7
33715: PUSH
33716: LD_VAR 0 9
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: PPUSH
33725: CALL_OW 2
33729: ST_TO_ADDR
33730: GO 33812
// for j = 1 to result do
33732: LD_ADDR_VAR 0 8
33736: PUSH
33737: DOUBLE
33738: LD_INT 1
33740: DEC
33741: ST_TO_ADDR
33742: LD_VAR 0 6
33746: PUSH
33747: FOR_TO
33748: IFFALSE 33810
// begin if tmp < result [ j ] [ 2 ] then
33750: LD_VAR 0 9
33754: PUSH
33755: LD_VAR 0 6
33759: PUSH
33760: LD_VAR 0 8
33764: ARRAY
33765: PUSH
33766: LD_INT 2
33768: ARRAY
33769: LESS
33770: IFFALSE 33808
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33772: LD_ADDR_VAR 0 6
33776: PUSH
33777: LD_VAR 0 6
33781: PPUSH
33782: LD_VAR 0 8
33786: PPUSH
33787: LD_VAR 0 7
33791: PUSH
33792: LD_VAR 0 9
33796: PUSH
33797: EMPTY
33798: LIST
33799: LIST
33800: PPUSH
33801: CALL_OW 2
33805: ST_TO_ADDR
// break ;
33806: GO 33810
// end ; end ;
33808: GO 33747
33810: POP
33811: POP
// end ; end ;
33812: GO 33611
33814: POP
33815: POP
// if result and not asc then
33816: LD_VAR 0 6
33820: PUSH
33821: LD_VAR 0 4
33825: NOT
33826: AND
33827: IFFALSE 33902
// begin tmp := result ;
33829: LD_ADDR_VAR 0 9
33833: PUSH
33834: LD_VAR 0 6
33838: ST_TO_ADDR
// for i = tmp downto 1 do
33839: LD_ADDR_VAR 0 7
33843: PUSH
33844: DOUBLE
33845: LD_VAR 0 9
33849: INC
33850: ST_TO_ADDR
33851: LD_INT 1
33853: PUSH
33854: FOR_DOWNTO
33855: IFFALSE 33900
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33857: LD_ADDR_VAR 0 6
33861: PUSH
33862: LD_VAR 0 6
33866: PPUSH
33867: LD_VAR 0 9
33871: PUSH
33872: LD_VAR 0 7
33876: MINUS
33877: PUSH
33878: LD_INT 1
33880: PLUS
33881: PPUSH
33882: LD_VAR 0 9
33886: PUSH
33887: LD_VAR 0 7
33891: ARRAY
33892: PPUSH
33893: CALL_OW 1
33897: ST_TO_ADDR
33898: GO 33854
33900: POP
33901: POP
// end ; tmp := [ ] ;
33902: LD_ADDR_VAR 0 9
33906: PUSH
33907: EMPTY
33908: ST_TO_ADDR
// if mode then
33909: LD_VAR 0 5
33913: IFFALSE 33982
// begin for i = 1 to result do
33915: LD_ADDR_VAR 0 7
33919: PUSH
33920: DOUBLE
33921: LD_INT 1
33923: DEC
33924: ST_TO_ADDR
33925: LD_VAR 0 6
33929: PUSH
33930: FOR_TO
33931: IFFALSE 33970
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
33933: LD_ADDR_VAR 0 9
33937: PUSH
33938: LD_VAR 0 9
33942: PPUSH
33943: LD_VAR 0 7
33947: PPUSH
33948: LD_VAR 0 6
33952: PUSH
33953: LD_VAR 0 7
33957: ARRAY
33958: PUSH
33959: LD_INT 1
33961: ARRAY
33962: PPUSH
33963: CALL_OW 1
33967: ST_TO_ADDR
33968: GO 33930
33970: POP
33971: POP
// result := tmp ;
33972: LD_ADDR_VAR 0 6
33976: PUSH
33977: LD_VAR 0 9
33981: ST_TO_ADDR
// end ; end ;
33982: LD_VAR 0 6
33986: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33987: LD_INT 0
33989: PPUSH
33990: PPUSH
33991: PPUSH
33992: PPUSH
33993: PPUSH
33994: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
33995: LD_ADDR_VAR 0 5
33999: PUSH
34000: LD_INT 0
34002: PUSH
34003: LD_INT 0
34005: PUSH
34006: LD_INT 0
34008: PUSH
34009: EMPTY
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: ST_TO_ADDR
// if not x or not y then
34017: LD_VAR 0 2
34021: NOT
34022: PUSH
34023: LD_VAR 0 3
34027: NOT
34028: OR
34029: IFFALSE 34033
// exit ;
34031: GO 35683
// if not range then
34033: LD_VAR 0 4
34037: NOT
34038: IFFALSE 34048
// range := 10 ;
34040: LD_ADDR_VAR 0 4
34044: PUSH
34045: LD_INT 10
34047: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34048: LD_ADDR_VAR 0 8
34052: PUSH
34053: LD_INT 81
34055: PUSH
34056: LD_VAR 0 1
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: PUSH
34065: LD_INT 92
34067: PUSH
34068: LD_VAR 0 2
34072: PUSH
34073: LD_VAR 0 3
34077: PUSH
34078: LD_VAR 0 4
34082: PUSH
34083: EMPTY
34084: LIST
34085: LIST
34086: LIST
34087: LIST
34088: PUSH
34089: LD_INT 3
34091: PUSH
34092: LD_INT 21
34094: PUSH
34095: LD_INT 3
34097: PUSH
34098: EMPTY
34099: LIST
34100: LIST
34101: PUSH
34102: EMPTY
34103: LIST
34104: LIST
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: LIST
34110: PPUSH
34111: CALL_OW 69
34115: ST_TO_ADDR
// if not tmp then
34116: LD_VAR 0 8
34120: NOT
34121: IFFALSE 34125
// exit ;
34123: GO 35683
// for i in tmp do
34125: LD_ADDR_VAR 0 6
34129: PUSH
34130: LD_VAR 0 8
34134: PUSH
34135: FOR_IN
34136: IFFALSE 35658
// begin points := [ 0 , 0 , 0 ] ;
34138: LD_ADDR_VAR 0 9
34142: PUSH
34143: LD_INT 0
34145: PUSH
34146: LD_INT 0
34148: PUSH
34149: LD_INT 0
34151: PUSH
34152: EMPTY
34153: LIST
34154: LIST
34155: LIST
34156: ST_TO_ADDR
// bpoints := 1 ;
34157: LD_ADDR_VAR 0 10
34161: PUSH
34162: LD_INT 1
34164: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34165: LD_VAR 0 6
34169: PPUSH
34170: CALL_OW 247
34174: PUSH
34175: LD_INT 1
34177: DOUBLE
34178: EQUAL
34179: IFTRUE 34183
34181: GO 34761
34183: POP
// begin if GetClass ( i ) = 1 then
34184: LD_VAR 0 6
34188: PPUSH
34189: CALL_OW 257
34193: PUSH
34194: LD_INT 1
34196: EQUAL
34197: IFFALSE 34218
// points := [ 10 , 5 , 3 ] ;
34199: LD_ADDR_VAR 0 9
34203: PUSH
34204: LD_INT 10
34206: PUSH
34207: LD_INT 5
34209: PUSH
34210: LD_INT 3
34212: PUSH
34213: EMPTY
34214: LIST
34215: LIST
34216: LIST
34217: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34218: LD_VAR 0 6
34222: PPUSH
34223: CALL_OW 257
34227: PUSH
34228: LD_INT 2
34230: PUSH
34231: LD_INT 3
34233: PUSH
34234: LD_INT 4
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: LIST
34241: IN
34242: IFFALSE 34263
// points := [ 3 , 2 , 1 ] ;
34244: LD_ADDR_VAR 0 9
34248: PUSH
34249: LD_INT 3
34251: PUSH
34252: LD_INT 2
34254: PUSH
34255: LD_INT 1
34257: PUSH
34258: EMPTY
34259: LIST
34260: LIST
34261: LIST
34262: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34263: LD_VAR 0 6
34267: PPUSH
34268: CALL_OW 257
34272: PUSH
34273: LD_INT 5
34275: EQUAL
34276: IFFALSE 34297
// points := [ 130 , 5 , 2 ] ;
34278: LD_ADDR_VAR 0 9
34282: PUSH
34283: LD_INT 130
34285: PUSH
34286: LD_INT 5
34288: PUSH
34289: LD_INT 2
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: LIST
34296: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34297: LD_VAR 0 6
34301: PPUSH
34302: CALL_OW 257
34306: PUSH
34307: LD_INT 8
34309: EQUAL
34310: IFFALSE 34331
// points := [ 35 , 35 , 30 ] ;
34312: LD_ADDR_VAR 0 9
34316: PUSH
34317: LD_INT 35
34319: PUSH
34320: LD_INT 35
34322: PUSH
34323: LD_INT 30
34325: PUSH
34326: EMPTY
34327: LIST
34328: LIST
34329: LIST
34330: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34331: LD_VAR 0 6
34335: PPUSH
34336: CALL_OW 257
34340: PUSH
34341: LD_INT 9
34343: EQUAL
34344: IFFALSE 34365
// points := [ 20 , 55 , 40 ] ;
34346: LD_ADDR_VAR 0 9
34350: PUSH
34351: LD_INT 20
34353: PUSH
34354: LD_INT 55
34356: PUSH
34357: LD_INT 40
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: LIST
34364: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34365: LD_VAR 0 6
34369: PPUSH
34370: CALL_OW 257
34374: PUSH
34375: LD_INT 12
34377: PUSH
34378: LD_INT 16
34380: PUSH
34381: EMPTY
34382: LIST
34383: LIST
34384: IN
34385: IFFALSE 34406
// points := [ 5 , 3 , 2 ] ;
34387: LD_ADDR_VAR 0 9
34391: PUSH
34392: LD_INT 5
34394: PUSH
34395: LD_INT 3
34397: PUSH
34398: LD_INT 2
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: LIST
34405: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34406: LD_VAR 0 6
34410: PPUSH
34411: CALL_OW 257
34415: PUSH
34416: LD_INT 17
34418: EQUAL
34419: IFFALSE 34440
// points := [ 100 , 50 , 75 ] ;
34421: LD_ADDR_VAR 0 9
34425: PUSH
34426: LD_INT 100
34428: PUSH
34429: LD_INT 50
34431: PUSH
34432: LD_INT 75
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: LIST
34439: ST_TO_ADDR
// if GetClass ( i ) = 15 then
34440: LD_VAR 0 6
34444: PPUSH
34445: CALL_OW 257
34449: PUSH
34450: LD_INT 15
34452: EQUAL
34453: IFFALSE 34474
// points := [ 10 , 5 , 3 ] ;
34455: LD_ADDR_VAR 0 9
34459: PUSH
34460: LD_INT 10
34462: PUSH
34463: LD_INT 5
34465: PUSH
34466: LD_INT 3
34468: PUSH
34469: EMPTY
34470: LIST
34471: LIST
34472: LIST
34473: ST_TO_ADDR
// if GetClass ( i ) = 14 then
34474: LD_VAR 0 6
34478: PPUSH
34479: CALL_OW 257
34483: PUSH
34484: LD_INT 14
34486: EQUAL
34487: IFFALSE 34508
// points := [ 10 , 0 , 0 ] ;
34489: LD_ADDR_VAR 0 9
34493: PUSH
34494: LD_INT 10
34496: PUSH
34497: LD_INT 0
34499: PUSH
34500: LD_INT 0
34502: PUSH
34503: EMPTY
34504: LIST
34505: LIST
34506: LIST
34507: ST_TO_ADDR
// if GetClass ( i ) = 11 then
34508: LD_VAR 0 6
34512: PPUSH
34513: CALL_OW 257
34517: PUSH
34518: LD_INT 11
34520: EQUAL
34521: IFFALSE 34542
// points := [ 30 , 10 , 5 ] ;
34523: LD_ADDR_VAR 0 9
34527: PUSH
34528: LD_INT 30
34530: PUSH
34531: LD_INT 10
34533: PUSH
34534: LD_INT 5
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: LIST
34541: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
34542: LD_VAR 0 1
34546: PPUSH
34547: LD_INT 5
34549: PPUSH
34550: CALL_OW 321
34554: PUSH
34555: LD_INT 2
34557: EQUAL
34558: IFFALSE 34575
// bpoints := bpoints * 1.8 ;
34560: LD_ADDR_VAR 0 10
34564: PUSH
34565: LD_VAR 0 10
34569: PUSH
34570: LD_REAL  1.80000000000000E+0000
34573: MUL
34574: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
34575: LD_VAR 0 6
34579: PPUSH
34580: CALL_OW 257
34584: PUSH
34585: LD_INT 1
34587: PUSH
34588: LD_INT 2
34590: PUSH
34591: LD_INT 3
34593: PUSH
34594: LD_INT 4
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: LIST
34601: LIST
34602: IN
34603: PUSH
34604: LD_VAR 0 1
34608: PPUSH
34609: LD_INT 51
34611: PPUSH
34612: CALL_OW 321
34616: PUSH
34617: LD_INT 2
34619: EQUAL
34620: AND
34621: IFFALSE 34638
// bpoints := bpoints * 1.2 ;
34623: LD_ADDR_VAR 0 10
34627: PUSH
34628: LD_VAR 0 10
34632: PUSH
34633: LD_REAL  1.20000000000000E+0000
34636: MUL
34637: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
34638: LD_VAR 0 6
34642: PPUSH
34643: CALL_OW 257
34647: PUSH
34648: LD_INT 5
34650: PUSH
34651: LD_INT 7
34653: PUSH
34654: LD_INT 9
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: LIST
34661: IN
34662: PUSH
34663: LD_VAR 0 1
34667: PPUSH
34668: LD_INT 52
34670: PPUSH
34671: CALL_OW 321
34675: PUSH
34676: LD_INT 2
34678: EQUAL
34679: AND
34680: IFFALSE 34697
// bpoints := bpoints * 1.5 ;
34682: LD_ADDR_VAR 0 10
34686: PUSH
34687: LD_VAR 0 10
34691: PUSH
34692: LD_REAL  1.50000000000000E+0000
34695: MUL
34696: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
34697: LD_VAR 0 1
34701: PPUSH
34702: LD_INT 66
34704: PPUSH
34705: CALL_OW 321
34709: PUSH
34710: LD_INT 2
34712: EQUAL
34713: IFFALSE 34730
// bpoints := bpoints * 1.1 ;
34715: LD_ADDR_VAR 0 10
34719: PUSH
34720: LD_VAR 0 10
34724: PUSH
34725: LD_REAL  1.10000000000000E+0000
34728: MUL
34729: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
34730: LD_ADDR_VAR 0 10
34734: PUSH
34735: LD_VAR 0 10
34739: PUSH
34740: LD_VAR 0 6
34744: PPUSH
34745: LD_INT 1
34747: PPUSH
34748: CALL_OW 259
34752: PUSH
34753: LD_REAL  1.15000000000000E+0000
34756: MUL
34757: MUL
34758: ST_TO_ADDR
// end ; unit_vehicle :
34759: GO 35587
34761: LD_INT 2
34763: DOUBLE
34764: EQUAL
34765: IFTRUE 34769
34767: GO 35575
34769: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
34770: LD_VAR 0 6
34774: PPUSH
34775: CALL_OW 264
34779: PUSH
34780: LD_INT 2
34782: PUSH
34783: LD_INT 42
34785: PUSH
34786: LD_INT 24
34788: PUSH
34789: EMPTY
34790: LIST
34791: LIST
34792: LIST
34793: IN
34794: IFFALSE 34815
// points := [ 25 , 5 , 3 ] ;
34796: LD_ADDR_VAR 0 9
34800: PUSH
34801: LD_INT 25
34803: PUSH
34804: LD_INT 5
34806: PUSH
34807: LD_INT 3
34809: PUSH
34810: EMPTY
34811: LIST
34812: LIST
34813: LIST
34814: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34815: LD_VAR 0 6
34819: PPUSH
34820: CALL_OW 264
34824: PUSH
34825: LD_INT 4
34827: PUSH
34828: LD_INT 43
34830: PUSH
34831: LD_INT 25
34833: PUSH
34834: EMPTY
34835: LIST
34836: LIST
34837: LIST
34838: IN
34839: IFFALSE 34860
// points := [ 40 , 15 , 5 ] ;
34841: LD_ADDR_VAR 0 9
34845: PUSH
34846: LD_INT 40
34848: PUSH
34849: LD_INT 15
34851: PUSH
34852: LD_INT 5
34854: PUSH
34855: EMPTY
34856: LIST
34857: LIST
34858: LIST
34859: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34860: LD_VAR 0 6
34864: PPUSH
34865: CALL_OW 264
34869: PUSH
34870: LD_INT 3
34872: PUSH
34873: LD_INT 23
34875: PUSH
34876: EMPTY
34877: LIST
34878: LIST
34879: IN
34880: IFFALSE 34901
// points := [ 7 , 25 , 8 ] ;
34882: LD_ADDR_VAR 0 9
34886: PUSH
34887: LD_INT 7
34889: PUSH
34890: LD_INT 25
34892: PUSH
34893: LD_INT 8
34895: PUSH
34896: EMPTY
34897: LIST
34898: LIST
34899: LIST
34900: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
34901: LD_VAR 0 6
34905: PPUSH
34906: CALL_OW 264
34910: PUSH
34911: LD_INT 5
34913: PUSH
34914: LD_INT 27
34916: PUSH
34917: LD_INT 44
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: LIST
34924: IN
34925: IFFALSE 34946
// points := [ 14 , 50 , 16 ] ;
34927: LD_ADDR_VAR 0 9
34931: PUSH
34932: LD_INT 14
34934: PUSH
34935: LD_INT 50
34937: PUSH
34938: LD_INT 16
34940: PUSH
34941: EMPTY
34942: LIST
34943: LIST
34944: LIST
34945: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
34946: LD_VAR 0 6
34950: PPUSH
34951: CALL_OW 264
34955: PUSH
34956: LD_INT 6
34958: PUSH
34959: LD_INT 46
34961: PUSH
34962: EMPTY
34963: LIST
34964: LIST
34965: IN
34966: IFFALSE 34987
// points := [ 32 , 120 , 70 ] ;
34968: LD_ADDR_VAR 0 9
34972: PUSH
34973: LD_INT 32
34975: PUSH
34976: LD_INT 120
34978: PUSH
34979: LD_INT 70
34981: PUSH
34982: EMPTY
34983: LIST
34984: LIST
34985: LIST
34986: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
34987: LD_VAR 0 6
34991: PPUSH
34992: CALL_OW 264
34996: PUSH
34997: LD_INT 7
34999: PUSH
35000: LD_INT 28
35002: PUSH
35003: LD_INT 45
35005: PUSH
35006: LD_INT 92
35008: PUSH
35009: EMPTY
35010: LIST
35011: LIST
35012: LIST
35013: LIST
35014: IN
35015: IFFALSE 35036
// points := [ 35 , 20 , 45 ] ;
35017: LD_ADDR_VAR 0 9
35021: PUSH
35022: LD_INT 35
35024: PUSH
35025: LD_INT 20
35027: PUSH
35028: LD_INT 45
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: LIST
35035: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35036: LD_VAR 0 6
35040: PPUSH
35041: CALL_OW 264
35045: PUSH
35046: LD_INT 47
35048: PUSH
35049: EMPTY
35050: LIST
35051: IN
35052: IFFALSE 35073
// points := [ 67 , 45 , 75 ] ;
35054: LD_ADDR_VAR 0 9
35058: PUSH
35059: LD_INT 67
35061: PUSH
35062: LD_INT 45
35064: PUSH
35065: LD_INT 75
35067: PUSH
35068: EMPTY
35069: LIST
35070: LIST
35071: LIST
35072: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35073: LD_VAR 0 6
35077: PPUSH
35078: CALL_OW 264
35082: PUSH
35083: LD_INT 26
35085: PUSH
35086: EMPTY
35087: LIST
35088: IN
35089: IFFALSE 35110
// points := [ 120 , 30 , 80 ] ;
35091: LD_ADDR_VAR 0 9
35095: PUSH
35096: LD_INT 120
35098: PUSH
35099: LD_INT 30
35101: PUSH
35102: LD_INT 80
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: LIST
35109: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35110: LD_VAR 0 6
35114: PPUSH
35115: CALL_OW 264
35119: PUSH
35120: LD_INT 22
35122: PUSH
35123: EMPTY
35124: LIST
35125: IN
35126: IFFALSE 35147
// points := [ 40 , 1 , 1 ] ;
35128: LD_ADDR_VAR 0 9
35132: PUSH
35133: LD_INT 40
35135: PUSH
35136: LD_INT 1
35138: PUSH
35139: LD_INT 1
35141: PUSH
35142: EMPTY
35143: LIST
35144: LIST
35145: LIST
35146: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35147: LD_VAR 0 6
35151: PPUSH
35152: CALL_OW 264
35156: PUSH
35157: LD_INT 29
35159: PUSH
35160: EMPTY
35161: LIST
35162: IN
35163: IFFALSE 35184
// points := [ 70 , 200 , 400 ] ;
35165: LD_ADDR_VAR 0 9
35169: PUSH
35170: LD_INT 70
35172: PUSH
35173: LD_INT 200
35175: PUSH
35176: LD_INT 400
35178: PUSH
35179: EMPTY
35180: LIST
35181: LIST
35182: LIST
35183: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35184: LD_VAR 0 6
35188: PPUSH
35189: CALL_OW 264
35193: PUSH
35194: LD_INT 14
35196: PUSH
35197: LD_INT 53
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: IN
35204: IFFALSE 35225
// points := [ 40 , 10 , 20 ] ;
35206: LD_ADDR_VAR 0 9
35210: PUSH
35211: LD_INT 40
35213: PUSH
35214: LD_INT 10
35216: PUSH
35217: LD_INT 20
35219: PUSH
35220: EMPTY
35221: LIST
35222: LIST
35223: LIST
35224: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35225: LD_VAR 0 6
35229: PPUSH
35230: CALL_OW 264
35234: PUSH
35235: LD_INT 9
35237: PUSH
35238: EMPTY
35239: LIST
35240: IN
35241: IFFALSE 35262
// points := [ 5 , 70 , 20 ] ;
35243: LD_ADDR_VAR 0 9
35247: PUSH
35248: LD_INT 5
35250: PUSH
35251: LD_INT 70
35253: PUSH
35254: LD_INT 20
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: LIST
35261: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35262: LD_VAR 0 6
35266: PPUSH
35267: CALL_OW 264
35271: PUSH
35272: LD_INT 10
35274: PUSH
35275: EMPTY
35276: LIST
35277: IN
35278: IFFALSE 35299
// points := [ 35 , 110 , 70 ] ;
35280: LD_ADDR_VAR 0 9
35284: PUSH
35285: LD_INT 35
35287: PUSH
35288: LD_INT 110
35290: PUSH
35291: LD_INT 70
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: LIST
35298: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35299: LD_VAR 0 6
35303: PPUSH
35304: CALL_OW 265
35308: PUSH
35309: LD_INT 25
35311: EQUAL
35312: IFFALSE 35333
// points := [ 80 , 65 , 100 ] ;
35314: LD_ADDR_VAR 0 9
35318: PUSH
35319: LD_INT 80
35321: PUSH
35322: LD_INT 65
35324: PUSH
35325: LD_INT 100
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: LIST
35332: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
35333: LD_VAR 0 6
35337: PPUSH
35338: CALL_OW 263
35342: PUSH
35343: LD_INT 1
35345: EQUAL
35346: IFFALSE 35381
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
35348: LD_ADDR_VAR 0 10
35352: PUSH
35353: LD_VAR 0 10
35357: PUSH
35358: LD_VAR 0 6
35362: PPUSH
35363: CALL_OW 311
35367: PPUSH
35368: LD_INT 3
35370: PPUSH
35371: CALL_OW 259
35375: PUSH
35376: LD_INT 4
35378: MUL
35379: MUL
35380: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35381: LD_VAR 0 6
35385: PPUSH
35386: CALL_OW 263
35390: PUSH
35391: LD_INT 2
35393: EQUAL
35394: IFFALSE 35445
// begin j := IsControledBy ( i ) ;
35396: LD_ADDR_VAR 0 7
35400: PUSH
35401: LD_VAR 0 6
35405: PPUSH
35406: CALL_OW 312
35410: ST_TO_ADDR
// if j then
35411: LD_VAR 0 7
35415: IFFALSE 35445
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35417: LD_ADDR_VAR 0 10
35421: PUSH
35422: LD_VAR 0 10
35426: PUSH
35427: LD_VAR 0 7
35431: PPUSH
35432: LD_INT 3
35434: PPUSH
35435: CALL_OW 259
35439: PUSH
35440: LD_INT 3
35442: MUL
35443: MUL
35444: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
35445: LD_VAR 0 6
35449: PPUSH
35450: CALL_OW 264
35454: PUSH
35455: LD_INT 5
35457: PUSH
35458: LD_INT 6
35460: PUSH
35461: LD_INT 46
35463: PUSH
35464: LD_INT 44
35466: PUSH
35467: LD_INT 47
35469: PUSH
35470: LD_INT 45
35472: PUSH
35473: LD_INT 28
35475: PUSH
35476: LD_INT 7
35478: PUSH
35479: LD_INT 27
35481: PUSH
35482: LD_INT 29
35484: PUSH
35485: EMPTY
35486: LIST
35487: LIST
35488: LIST
35489: LIST
35490: LIST
35491: LIST
35492: LIST
35493: LIST
35494: LIST
35495: LIST
35496: IN
35497: PUSH
35498: LD_VAR 0 1
35502: PPUSH
35503: LD_INT 52
35505: PPUSH
35506: CALL_OW 321
35510: PUSH
35511: LD_INT 2
35513: EQUAL
35514: AND
35515: IFFALSE 35532
// bpoints := bpoints * 1.2 ;
35517: LD_ADDR_VAR 0 10
35521: PUSH
35522: LD_VAR 0 10
35526: PUSH
35527: LD_REAL  1.20000000000000E+0000
35530: MUL
35531: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
35532: LD_VAR 0 6
35536: PPUSH
35537: CALL_OW 264
35541: PUSH
35542: LD_INT 6
35544: PUSH
35545: LD_INT 46
35547: PUSH
35548: LD_INT 47
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: LIST
35555: IN
35556: IFFALSE 35573
// bpoints := bpoints * 1.2 ;
35558: LD_ADDR_VAR 0 10
35562: PUSH
35563: LD_VAR 0 10
35567: PUSH
35568: LD_REAL  1.20000000000000E+0000
35571: MUL
35572: ST_TO_ADDR
// end ; unit_building :
35573: GO 35587
35575: LD_INT 3
35577: DOUBLE
35578: EQUAL
35579: IFTRUE 35583
35581: GO 35586
35583: POP
// ; end ;
35584: GO 35587
35586: POP
// for j = 1 to 3 do
35587: LD_ADDR_VAR 0 7
35591: PUSH
35592: DOUBLE
35593: LD_INT 1
35595: DEC
35596: ST_TO_ADDR
35597: LD_INT 3
35599: PUSH
35600: FOR_TO
35601: IFFALSE 35654
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
35603: LD_ADDR_VAR 0 5
35607: PUSH
35608: LD_VAR 0 5
35612: PPUSH
35613: LD_VAR 0 7
35617: PPUSH
35618: LD_VAR 0 5
35622: PUSH
35623: LD_VAR 0 7
35627: ARRAY
35628: PUSH
35629: LD_VAR 0 9
35633: PUSH
35634: LD_VAR 0 7
35638: ARRAY
35639: PUSH
35640: LD_VAR 0 10
35644: MUL
35645: PLUS
35646: PPUSH
35647: CALL_OW 1
35651: ST_TO_ADDR
35652: GO 35600
35654: POP
35655: POP
// end ;
35656: GO 34135
35658: POP
35659: POP
// result := Replace ( result , 4 , tmp ) ;
35660: LD_ADDR_VAR 0 5
35664: PUSH
35665: LD_VAR 0 5
35669: PPUSH
35670: LD_INT 4
35672: PPUSH
35673: LD_VAR 0 8
35677: PPUSH
35678: CALL_OW 1
35682: ST_TO_ADDR
// end ;
35683: LD_VAR 0 5
35687: RET
// export function DangerAtRange ( unit , range ) ; begin
35688: LD_INT 0
35690: PPUSH
// if not unit then
35691: LD_VAR 0 1
35695: NOT
35696: IFFALSE 35700
// exit ;
35698: GO 35745
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
35700: LD_ADDR_VAR 0 3
35704: PUSH
35705: LD_VAR 0 1
35709: PPUSH
35710: CALL_OW 255
35714: PPUSH
35715: LD_VAR 0 1
35719: PPUSH
35720: CALL_OW 250
35724: PPUSH
35725: LD_VAR 0 1
35729: PPUSH
35730: CALL_OW 251
35734: PPUSH
35735: LD_VAR 0 2
35739: PPUSH
35740: CALL 33987 0 4
35744: ST_TO_ADDR
// end ;
35745: LD_VAR 0 3
35749: RET
// export function DangerInArea ( side , area ) ; begin
35750: LD_INT 0
35752: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
35753: LD_ADDR_VAR 0 3
35757: PUSH
35758: LD_VAR 0 2
35762: PPUSH
35763: LD_INT 81
35765: PUSH
35766: LD_VAR 0 1
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: PPUSH
35775: CALL_OW 70
35779: ST_TO_ADDR
// end ;
35780: LD_VAR 0 3
35784: RET
// export function IsExtension ( b ) ; begin
35785: LD_INT 0
35787: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
35788: LD_ADDR_VAR 0 2
35792: PUSH
35793: LD_VAR 0 1
35797: PUSH
35798: LD_INT 23
35800: PUSH
35801: LD_INT 20
35803: PUSH
35804: LD_INT 22
35806: PUSH
35807: LD_INT 17
35809: PUSH
35810: LD_INT 24
35812: PUSH
35813: LD_INT 21
35815: PUSH
35816: LD_INT 19
35818: PUSH
35819: LD_INT 16
35821: PUSH
35822: LD_INT 25
35824: PUSH
35825: LD_INT 18
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: LIST
35832: LIST
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: LIST
35838: LIST
35839: IN
35840: ST_TO_ADDR
// end ;
35841: LD_VAR 0 2
35845: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
35846: LD_INT 0
35848: PPUSH
35849: PPUSH
35850: PPUSH
// result := [ ] ;
35851: LD_ADDR_VAR 0 4
35855: PUSH
35856: EMPTY
35857: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35858: LD_ADDR_VAR 0 5
35862: PUSH
35863: LD_VAR 0 2
35867: PPUSH
35868: LD_INT 21
35870: PUSH
35871: LD_INT 3
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: PPUSH
35878: CALL_OW 70
35882: ST_TO_ADDR
// if not tmp then
35883: LD_VAR 0 5
35887: NOT
35888: IFFALSE 35892
// exit ;
35890: GO 35956
// if checkLink then
35892: LD_VAR 0 3
35896: IFFALSE 35946
// begin for i in tmp do
35898: LD_ADDR_VAR 0 6
35902: PUSH
35903: LD_VAR 0 5
35907: PUSH
35908: FOR_IN
35909: IFFALSE 35944
// if GetBase ( i ) <> base then
35911: LD_VAR 0 6
35915: PPUSH
35916: CALL_OW 274
35920: PUSH
35921: LD_VAR 0 1
35925: NONEQUAL
35926: IFFALSE 35942
// ComLinkToBase ( base , i ) ;
35928: LD_VAR 0 1
35932: PPUSH
35933: LD_VAR 0 6
35937: PPUSH
35938: CALL_OW 169
35942: GO 35908
35944: POP
35945: POP
// end ; result := tmp ;
35946: LD_ADDR_VAR 0 4
35950: PUSH
35951: LD_VAR 0 5
35955: ST_TO_ADDR
// end ;
35956: LD_VAR 0 4
35960: RET
// export function ComComplete ( units , b ) ; var i ; begin
35961: LD_INT 0
35963: PPUSH
35964: PPUSH
// if not units then
35965: LD_VAR 0 1
35969: NOT
35970: IFFALSE 35974
// exit ;
35972: GO 36064
// for i in units do
35974: LD_ADDR_VAR 0 4
35978: PUSH
35979: LD_VAR 0 1
35983: PUSH
35984: FOR_IN
35985: IFFALSE 36062
// if BuildingStatus ( b ) = bs_build then
35987: LD_VAR 0 2
35991: PPUSH
35992: CALL_OW 461
35996: PUSH
35997: LD_INT 1
35999: EQUAL
36000: IFFALSE 36060
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36002: LD_VAR 0 4
36006: PPUSH
36007: LD_STRING h
36009: PUSH
36010: LD_VAR 0 2
36014: PPUSH
36015: CALL_OW 250
36019: PUSH
36020: LD_VAR 0 2
36024: PPUSH
36025: CALL_OW 251
36029: PUSH
36030: LD_VAR 0 2
36034: PUSH
36035: LD_INT 0
36037: PUSH
36038: LD_INT 0
36040: PUSH
36041: LD_INT 0
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: LIST
36048: LIST
36049: LIST
36050: LIST
36051: LIST
36052: PUSH
36053: EMPTY
36054: LIST
36055: PPUSH
36056: CALL_OW 446
36060: GO 35984
36062: POP
36063: POP
// end ;
36064: LD_VAR 0 3
36068: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36069: LD_INT 0
36071: PPUSH
36072: PPUSH
36073: PPUSH
36074: PPUSH
36075: PPUSH
36076: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
36077: LD_VAR 0 1
36081: NOT
36082: PUSH
36083: LD_VAR 0 1
36087: PPUSH
36088: CALL_OW 263
36092: PUSH
36093: LD_INT 2
36095: NONEQUAL
36096: OR
36097: IFFALSE 36101
// exit ;
36099: GO 36417
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36101: LD_ADDR_VAR 0 6
36105: PUSH
36106: LD_INT 22
36108: PUSH
36109: LD_VAR 0 1
36113: PPUSH
36114: CALL_OW 255
36118: PUSH
36119: EMPTY
36120: LIST
36121: LIST
36122: PUSH
36123: LD_INT 2
36125: PUSH
36126: LD_INT 30
36128: PUSH
36129: LD_INT 36
36131: PUSH
36132: EMPTY
36133: LIST
36134: LIST
36135: PUSH
36136: LD_INT 34
36138: PUSH
36139: LD_INT 31
36141: PUSH
36142: EMPTY
36143: LIST
36144: LIST
36145: PUSH
36146: EMPTY
36147: LIST
36148: LIST
36149: LIST
36150: PUSH
36151: EMPTY
36152: LIST
36153: LIST
36154: PPUSH
36155: CALL_OW 69
36159: ST_TO_ADDR
// if not tmp then
36160: LD_VAR 0 6
36164: NOT
36165: IFFALSE 36169
// exit ;
36167: GO 36417
// result := [ ] ;
36169: LD_ADDR_VAR 0 2
36173: PUSH
36174: EMPTY
36175: ST_TO_ADDR
// for i in tmp do
36176: LD_ADDR_VAR 0 3
36180: PUSH
36181: LD_VAR 0 6
36185: PUSH
36186: FOR_IN
36187: IFFALSE 36258
// begin t := UnitsInside ( i ) ;
36189: LD_ADDR_VAR 0 4
36193: PUSH
36194: LD_VAR 0 3
36198: PPUSH
36199: CALL_OW 313
36203: ST_TO_ADDR
// if t then
36204: LD_VAR 0 4
36208: IFFALSE 36256
// for j in t do
36210: LD_ADDR_VAR 0 7
36214: PUSH
36215: LD_VAR 0 4
36219: PUSH
36220: FOR_IN
36221: IFFALSE 36254
// result := Replace ( result , result + 1 , j ) ;
36223: LD_ADDR_VAR 0 2
36227: PUSH
36228: LD_VAR 0 2
36232: PPUSH
36233: LD_VAR 0 2
36237: PUSH
36238: LD_INT 1
36240: PLUS
36241: PPUSH
36242: LD_VAR 0 7
36246: PPUSH
36247: CALL_OW 1
36251: ST_TO_ADDR
36252: GO 36220
36254: POP
36255: POP
// end ;
36256: GO 36186
36258: POP
36259: POP
// if not result then
36260: LD_VAR 0 2
36264: NOT
36265: IFFALSE 36269
// exit ;
36267: GO 36417
// mech := result [ 1 ] ;
36269: LD_ADDR_VAR 0 5
36273: PUSH
36274: LD_VAR 0 2
36278: PUSH
36279: LD_INT 1
36281: ARRAY
36282: ST_TO_ADDR
// if result > 1 then
36283: LD_VAR 0 2
36287: PUSH
36288: LD_INT 1
36290: GREATER
36291: IFFALSE 36403
// begin for i = 2 to result do
36293: LD_ADDR_VAR 0 3
36297: PUSH
36298: DOUBLE
36299: LD_INT 2
36301: DEC
36302: ST_TO_ADDR
36303: LD_VAR 0 2
36307: PUSH
36308: FOR_TO
36309: IFFALSE 36401
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36311: LD_ADDR_VAR 0 4
36315: PUSH
36316: LD_VAR 0 2
36320: PUSH
36321: LD_VAR 0 3
36325: ARRAY
36326: PPUSH
36327: LD_INT 3
36329: PPUSH
36330: CALL_OW 259
36334: PUSH
36335: LD_VAR 0 2
36339: PUSH
36340: LD_VAR 0 3
36344: ARRAY
36345: PPUSH
36346: CALL_OW 432
36350: MINUS
36351: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
36352: LD_VAR 0 4
36356: PUSH
36357: LD_VAR 0 5
36361: PPUSH
36362: LD_INT 3
36364: PPUSH
36365: CALL_OW 259
36369: PUSH
36370: LD_VAR 0 5
36374: PPUSH
36375: CALL_OW 432
36379: MINUS
36380: GREATEREQUAL
36381: IFFALSE 36399
// mech := result [ i ] ;
36383: LD_ADDR_VAR 0 5
36387: PUSH
36388: LD_VAR 0 2
36392: PUSH
36393: LD_VAR 0 3
36397: ARRAY
36398: ST_TO_ADDR
// end ;
36399: GO 36308
36401: POP
36402: POP
// end ; ComLinkTo ( vehicle , mech ) ;
36403: LD_VAR 0 1
36407: PPUSH
36408: LD_VAR 0 5
36412: PPUSH
36413: CALL_OW 135
// end ;
36417: LD_VAR 0 2
36421: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36422: LD_INT 0
36424: PPUSH
36425: PPUSH
36426: PPUSH
36427: PPUSH
36428: PPUSH
36429: PPUSH
36430: PPUSH
36431: PPUSH
36432: PPUSH
36433: PPUSH
36434: PPUSH
36435: PPUSH
36436: PPUSH
// result := [ ] ;
36437: LD_ADDR_VAR 0 7
36441: PUSH
36442: EMPTY
36443: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
36444: LD_VAR 0 1
36448: PPUSH
36449: CALL_OW 266
36453: PUSH
36454: LD_INT 0
36456: PUSH
36457: LD_INT 1
36459: PUSH
36460: EMPTY
36461: LIST
36462: LIST
36463: IN
36464: NOT
36465: IFFALSE 36469
// exit ;
36467: GO 38103
// if name then
36469: LD_VAR 0 3
36473: IFFALSE 36489
// SetBName ( base_dep , name ) ;
36475: LD_VAR 0 1
36479: PPUSH
36480: LD_VAR 0 3
36484: PPUSH
36485: CALL_OW 500
// base := GetBase ( base_dep ) ;
36489: LD_ADDR_VAR 0 15
36493: PUSH
36494: LD_VAR 0 1
36498: PPUSH
36499: CALL_OW 274
36503: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
36504: LD_ADDR_VAR 0 16
36508: PUSH
36509: LD_VAR 0 1
36513: PPUSH
36514: CALL_OW 255
36518: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
36519: LD_ADDR_VAR 0 17
36523: PUSH
36524: LD_VAR 0 1
36528: PPUSH
36529: CALL_OW 248
36533: ST_TO_ADDR
// if sources then
36534: LD_VAR 0 5
36538: IFFALSE 36585
// for i = 1 to 3 do
36540: LD_ADDR_VAR 0 8
36544: PUSH
36545: DOUBLE
36546: LD_INT 1
36548: DEC
36549: ST_TO_ADDR
36550: LD_INT 3
36552: PUSH
36553: FOR_TO
36554: IFFALSE 36583
// AddResourceType ( base , i , sources [ i ] ) ;
36556: LD_VAR 0 15
36560: PPUSH
36561: LD_VAR 0 8
36565: PPUSH
36566: LD_VAR 0 5
36570: PUSH
36571: LD_VAR 0 8
36575: ARRAY
36576: PPUSH
36577: CALL_OW 276
36581: GO 36553
36583: POP
36584: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
36585: LD_ADDR_VAR 0 18
36589: PUSH
36590: LD_VAR 0 15
36594: PPUSH
36595: LD_VAR 0 2
36599: PPUSH
36600: LD_INT 1
36602: PPUSH
36603: CALL 35846 0 3
36607: ST_TO_ADDR
// InitHc ;
36608: CALL_OW 19
// InitUc ;
36612: CALL_OW 18
// uc_side := side ;
36616: LD_ADDR_OWVAR 20
36620: PUSH
36621: LD_VAR 0 16
36625: ST_TO_ADDR
// uc_nation := nation ;
36626: LD_ADDR_OWVAR 21
36630: PUSH
36631: LD_VAR 0 17
36635: ST_TO_ADDR
// if buildings then
36636: LD_VAR 0 18
36640: IFFALSE 37962
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
36642: LD_ADDR_VAR 0 19
36646: PUSH
36647: LD_VAR 0 18
36651: PPUSH
36652: LD_INT 2
36654: PUSH
36655: LD_INT 30
36657: PUSH
36658: LD_INT 29
36660: PUSH
36661: EMPTY
36662: LIST
36663: LIST
36664: PUSH
36665: LD_INT 30
36667: PUSH
36668: LD_INT 30
36670: PUSH
36671: EMPTY
36672: LIST
36673: LIST
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: LIST
36679: PPUSH
36680: CALL_OW 72
36684: ST_TO_ADDR
// if tmp then
36685: LD_VAR 0 19
36689: IFFALSE 36737
// for i in tmp do
36691: LD_ADDR_VAR 0 8
36695: PUSH
36696: LD_VAR 0 19
36700: PUSH
36701: FOR_IN
36702: IFFALSE 36735
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
36704: LD_VAR 0 8
36708: PPUSH
36709: CALL_OW 250
36713: PPUSH
36714: LD_VAR 0 8
36718: PPUSH
36719: CALL_OW 251
36723: PPUSH
36724: LD_VAR 0 16
36728: PPUSH
36729: CALL_OW 441
36733: GO 36701
36735: POP
36736: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
36737: LD_VAR 0 18
36741: PPUSH
36742: LD_INT 2
36744: PUSH
36745: LD_INT 30
36747: PUSH
36748: LD_INT 32
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: PUSH
36755: LD_INT 30
36757: PUSH
36758: LD_INT 33
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: PUSH
36765: EMPTY
36766: LIST
36767: LIST
36768: LIST
36769: PPUSH
36770: CALL_OW 72
36774: IFFALSE 36862
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
36776: LD_ADDR_VAR 0 8
36780: PUSH
36781: LD_VAR 0 18
36785: PPUSH
36786: LD_INT 2
36788: PUSH
36789: LD_INT 30
36791: PUSH
36792: LD_INT 32
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: PUSH
36799: LD_INT 30
36801: PUSH
36802: LD_INT 33
36804: PUSH
36805: EMPTY
36806: LIST
36807: LIST
36808: PUSH
36809: EMPTY
36810: LIST
36811: LIST
36812: LIST
36813: PPUSH
36814: CALL_OW 72
36818: PUSH
36819: FOR_IN
36820: IFFALSE 36860
// begin if not GetBWeapon ( i ) then
36822: LD_VAR 0 8
36826: PPUSH
36827: CALL_OW 269
36831: NOT
36832: IFFALSE 36858
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36834: LD_VAR 0 8
36838: PPUSH
36839: LD_VAR 0 8
36843: PPUSH
36844: LD_VAR 0 2
36848: PPUSH
36849: CALL 38108 0 2
36853: PPUSH
36854: CALL_OW 431
// end ;
36858: GO 36819
36860: POP
36861: POP
// end ; for i = 1 to personel do
36862: LD_ADDR_VAR 0 8
36866: PUSH
36867: DOUBLE
36868: LD_INT 1
36870: DEC
36871: ST_TO_ADDR
36872: LD_VAR 0 6
36876: PUSH
36877: FOR_TO
36878: IFFALSE 37942
// begin if i > 4 then
36880: LD_VAR 0 8
36884: PUSH
36885: LD_INT 4
36887: GREATER
36888: IFFALSE 36892
// break ;
36890: GO 37942
// case i of 1 :
36892: LD_VAR 0 8
36896: PUSH
36897: LD_INT 1
36899: DOUBLE
36900: EQUAL
36901: IFTRUE 36905
36903: GO 36985
36905: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36906: LD_ADDR_VAR 0 12
36910: PUSH
36911: LD_VAR 0 18
36915: PPUSH
36916: LD_INT 22
36918: PUSH
36919: LD_VAR 0 16
36923: PUSH
36924: EMPTY
36925: LIST
36926: LIST
36927: PUSH
36928: LD_INT 58
36930: PUSH
36931: EMPTY
36932: LIST
36933: PUSH
36934: LD_INT 2
36936: PUSH
36937: LD_INT 30
36939: PUSH
36940: LD_INT 32
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: PUSH
36947: LD_INT 30
36949: PUSH
36950: LD_INT 4
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: PUSH
36957: LD_INT 30
36959: PUSH
36960: LD_INT 5
36962: PUSH
36963: EMPTY
36964: LIST
36965: LIST
36966: PUSH
36967: EMPTY
36968: LIST
36969: LIST
36970: LIST
36971: LIST
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: LIST
36977: PPUSH
36978: CALL_OW 72
36982: ST_TO_ADDR
36983: GO 37207
36985: LD_INT 2
36987: DOUBLE
36988: EQUAL
36989: IFTRUE 36993
36991: GO 37055
36993: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
36994: LD_ADDR_VAR 0 12
36998: PUSH
36999: LD_VAR 0 18
37003: PPUSH
37004: LD_INT 22
37006: PUSH
37007: LD_VAR 0 16
37011: PUSH
37012: EMPTY
37013: LIST
37014: LIST
37015: PUSH
37016: LD_INT 2
37018: PUSH
37019: LD_INT 30
37021: PUSH
37022: LD_INT 0
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: PUSH
37029: LD_INT 30
37031: PUSH
37032: LD_INT 1
37034: PUSH
37035: EMPTY
37036: LIST
37037: LIST
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: LIST
37043: PUSH
37044: EMPTY
37045: LIST
37046: LIST
37047: PPUSH
37048: CALL_OW 72
37052: ST_TO_ADDR
37053: GO 37207
37055: LD_INT 3
37057: DOUBLE
37058: EQUAL
37059: IFTRUE 37063
37061: GO 37125
37063: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37064: LD_ADDR_VAR 0 12
37068: PUSH
37069: LD_VAR 0 18
37073: PPUSH
37074: LD_INT 22
37076: PUSH
37077: LD_VAR 0 16
37081: PUSH
37082: EMPTY
37083: LIST
37084: LIST
37085: PUSH
37086: LD_INT 2
37088: PUSH
37089: LD_INT 30
37091: PUSH
37092: LD_INT 2
37094: PUSH
37095: EMPTY
37096: LIST
37097: LIST
37098: PUSH
37099: LD_INT 30
37101: PUSH
37102: LD_INT 3
37104: PUSH
37105: EMPTY
37106: LIST
37107: LIST
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: LIST
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: PPUSH
37118: CALL_OW 72
37122: ST_TO_ADDR
37123: GO 37207
37125: LD_INT 4
37127: DOUBLE
37128: EQUAL
37129: IFTRUE 37133
37131: GO 37206
37133: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37134: LD_ADDR_VAR 0 12
37138: PUSH
37139: LD_VAR 0 18
37143: PPUSH
37144: LD_INT 22
37146: PUSH
37147: LD_VAR 0 16
37151: PUSH
37152: EMPTY
37153: LIST
37154: LIST
37155: PUSH
37156: LD_INT 2
37158: PUSH
37159: LD_INT 30
37161: PUSH
37162: LD_INT 6
37164: PUSH
37165: EMPTY
37166: LIST
37167: LIST
37168: PUSH
37169: LD_INT 30
37171: PUSH
37172: LD_INT 7
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: PUSH
37179: LD_INT 30
37181: PUSH
37182: LD_INT 8
37184: PUSH
37185: EMPTY
37186: LIST
37187: LIST
37188: PUSH
37189: EMPTY
37190: LIST
37191: LIST
37192: LIST
37193: LIST
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: PPUSH
37199: CALL_OW 72
37203: ST_TO_ADDR
37204: GO 37207
37206: POP
// if i = 1 then
37207: LD_VAR 0 8
37211: PUSH
37212: LD_INT 1
37214: EQUAL
37215: IFFALSE 37326
// begin tmp := [ ] ;
37217: LD_ADDR_VAR 0 19
37221: PUSH
37222: EMPTY
37223: ST_TO_ADDR
// for j in f do
37224: LD_ADDR_VAR 0 9
37228: PUSH
37229: LD_VAR 0 12
37233: PUSH
37234: FOR_IN
37235: IFFALSE 37308
// if GetBType ( j ) = b_bunker then
37237: LD_VAR 0 9
37241: PPUSH
37242: CALL_OW 266
37246: PUSH
37247: LD_INT 32
37249: EQUAL
37250: IFFALSE 37277
// tmp := Insert ( tmp , 1 , j ) else
37252: LD_ADDR_VAR 0 19
37256: PUSH
37257: LD_VAR 0 19
37261: PPUSH
37262: LD_INT 1
37264: PPUSH
37265: LD_VAR 0 9
37269: PPUSH
37270: CALL_OW 2
37274: ST_TO_ADDR
37275: GO 37306
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37277: LD_ADDR_VAR 0 19
37281: PUSH
37282: LD_VAR 0 19
37286: PPUSH
37287: LD_VAR 0 19
37291: PUSH
37292: LD_INT 1
37294: PLUS
37295: PPUSH
37296: LD_VAR 0 9
37300: PPUSH
37301: CALL_OW 2
37305: ST_TO_ADDR
37306: GO 37234
37308: POP
37309: POP
// if tmp then
37310: LD_VAR 0 19
37314: IFFALSE 37326
// f := tmp ;
37316: LD_ADDR_VAR 0 12
37320: PUSH
37321: LD_VAR 0 19
37325: ST_TO_ADDR
// end ; x := personel [ i ] ;
37326: LD_ADDR_VAR 0 13
37330: PUSH
37331: LD_VAR 0 6
37335: PUSH
37336: LD_VAR 0 8
37340: ARRAY
37341: ST_TO_ADDR
// if x = - 1 then
37342: LD_VAR 0 13
37346: PUSH
37347: LD_INT 1
37349: NEG
37350: EQUAL
37351: IFFALSE 37560
// begin for j in f do
37353: LD_ADDR_VAR 0 9
37357: PUSH
37358: LD_VAR 0 12
37362: PUSH
37363: FOR_IN
37364: IFFALSE 37556
// repeat InitHc ;
37366: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37370: LD_VAR 0 9
37374: PPUSH
37375: CALL_OW 266
37379: PUSH
37380: LD_INT 5
37382: EQUAL
37383: IFFALSE 37453
// begin if UnitsInside ( j ) < 3 then
37385: LD_VAR 0 9
37389: PPUSH
37390: CALL_OW 313
37394: PUSH
37395: LD_INT 3
37397: LESS
37398: IFFALSE 37434
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37400: LD_INT 0
37402: PPUSH
37403: LD_INT 5
37405: PUSH
37406: LD_INT 8
37408: PUSH
37409: LD_INT 9
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: LIST
37416: PUSH
37417: LD_VAR 0 17
37421: ARRAY
37422: PPUSH
37423: LD_VAR 0 4
37427: PPUSH
37428: CALL_OW 380
37432: GO 37451
// PrepareHuman ( false , i , skill ) ;
37434: LD_INT 0
37436: PPUSH
37437: LD_VAR 0 8
37441: PPUSH
37442: LD_VAR 0 4
37446: PPUSH
37447: CALL_OW 380
// end else
37451: GO 37470
// PrepareHuman ( false , i , skill ) ;
37453: LD_INT 0
37455: PPUSH
37456: LD_VAR 0 8
37460: PPUSH
37461: LD_VAR 0 4
37465: PPUSH
37466: CALL_OW 380
// un := CreateHuman ;
37470: LD_ADDR_VAR 0 14
37474: PUSH
37475: CALL_OW 44
37479: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37480: LD_ADDR_VAR 0 7
37484: PUSH
37485: LD_VAR 0 7
37489: PPUSH
37490: LD_INT 1
37492: PPUSH
37493: LD_VAR 0 14
37497: PPUSH
37498: CALL_OW 2
37502: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
37503: LD_VAR 0 14
37507: PPUSH
37508: LD_VAR 0 9
37512: PPUSH
37513: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
37517: LD_VAR 0 9
37521: PPUSH
37522: CALL_OW 313
37526: PUSH
37527: LD_INT 6
37529: EQUAL
37530: PUSH
37531: LD_VAR 0 9
37535: PPUSH
37536: CALL_OW 266
37540: PUSH
37541: LD_INT 32
37543: PUSH
37544: LD_INT 31
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: IN
37551: OR
37552: IFFALSE 37366
37554: GO 37363
37556: POP
37557: POP
// end else
37558: GO 37940
// for j = 1 to x do
37560: LD_ADDR_VAR 0 9
37564: PUSH
37565: DOUBLE
37566: LD_INT 1
37568: DEC
37569: ST_TO_ADDR
37570: LD_VAR 0 13
37574: PUSH
37575: FOR_TO
37576: IFFALSE 37938
// begin InitHc ;
37578: CALL_OW 19
// if not f then
37582: LD_VAR 0 12
37586: NOT
37587: IFFALSE 37676
// begin PrepareHuman ( false , i , skill ) ;
37589: LD_INT 0
37591: PPUSH
37592: LD_VAR 0 8
37596: PPUSH
37597: LD_VAR 0 4
37601: PPUSH
37602: CALL_OW 380
// un := CreateHuman ;
37606: LD_ADDR_VAR 0 14
37610: PUSH
37611: CALL_OW 44
37615: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37616: LD_ADDR_VAR 0 7
37620: PUSH
37621: LD_VAR 0 7
37625: PPUSH
37626: LD_INT 1
37628: PPUSH
37629: LD_VAR 0 14
37633: PPUSH
37634: CALL_OW 2
37638: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37639: LD_VAR 0 14
37643: PPUSH
37644: LD_VAR 0 1
37648: PPUSH
37649: CALL_OW 250
37653: PPUSH
37654: LD_VAR 0 1
37658: PPUSH
37659: CALL_OW 251
37663: PPUSH
37664: LD_INT 10
37666: PPUSH
37667: LD_INT 0
37669: PPUSH
37670: CALL_OW 50
// continue ;
37674: GO 37575
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
37676: LD_VAR 0 12
37680: PUSH
37681: LD_INT 1
37683: ARRAY
37684: PPUSH
37685: CALL_OW 313
37689: PUSH
37690: LD_VAR 0 12
37694: PUSH
37695: LD_INT 1
37697: ARRAY
37698: PPUSH
37699: CALL_OW 266
37703: PUSH
37704: LD_INT 32
37706: PUSH
37707: LD_INT 31
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: IN
37714: AND
37715: PUSH
37716: LD_VAR 0 12
37720: PUSH
37721: LD_INT 1
37723: ARRAY
37724: PPUSH
37725: CALL_OW 313
37729: PUSH
37730: LD_INT 6
37732: EQUAL
37733: OR
37734: IFFALSE 37754
// f := Delete ( f , 1 ) ;
37736: LD_ADDR_VAR 0 12
37740: PUSH
37741: LD_VAR 0 12
37745: PPUSH
37746: LD_INT 1
37748: PPUSH
37749: CALL_OW 3
37753: ST_TO_ADDR
// if not f then
37754: LD_VAR 0 12
37758: NOT
37759: IFFALSE 37777
// begin x := x + 2 ;
37761: LD_ADDR_VAR 0 13
37765: PUSH
37766: LD_VAR 0 13
37770: PUSH
37771: LD_INT 2
37773: PLUS
37774: ST_TO_ADDR
// continue ;
37775: GO 37575
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
37777: LD_VAR 0 12
37781: PUSH
37782: LD_INT 1
37784: ARRAY
37785: PPUSH
37786: CALL_OW 266
37790: PUSH
37791: LD_INT 5
37793: EQUAL
37794: IFFALSE 37868
// begin if UnitsInside ( f [ 1 ] ) < 3 then
37796: LD_VAR 0 12
37800: PUSH
37801: LD_INT 1
37803: ARRAY
37804: PPUSH
37805: CALL_OW 313
37809: PUSH
37810: LD_INT 3
37812: LESS
37813: IFFALSE 37849
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37815: LD_INT 0
37817: PPUSH
37818: LD_INT 5
37820: PUSH
37821: LD_INT 8
37823: PUSH
37824: LD_INT 9
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: LIST
37831: PUSH
37832: LD_VAR 0 17
37836: ARRAY
37837: PPUSH
37838: LD_VAR 0 4
37842: PPUSH
37843: CALL_OW 380
37847: GO 37866
// PrepareHuman ( false , i , skill ) ;
37849: LD_INT 0
37851: PPUSH
37852: LD_VAR 0 8
37856: PPUSH
37857: LD_VAR 0 4
37861: PPUSH
37862: CALL_OW 380
// end else
37866: GO 37885
// PrepareHuman ( false , i , skill ) ;
37868: LD_INT 0
37870: PPUSH
37871: LD_VAR 0 8
37875: PPUSH
37876: LD_VAR 0 4
37880: PPUSH
37881: CALL_OW 380
// un := CreateHuman ;
37885: LD_ADDR_VAR 0 14
37889: PUSH
37890: CALL_OW 44
37894: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37895: LD_ADDR_VAR 0 7
37899: PUSH
37900: LD_VAR 0 7
37904: PPUSH
37905: LD_INT 1
37907: PPUSH
37908: LD_VAR 0 14
37912: PPUSH
37913: CALL_OW 2
37917: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
37918: LD_VAR 0 14
37922: PPUSH
37923: LD_VAR 0 12
37927: PUSH
37928: LD_INT 1
37930: ARRAY
37931: PPUSH
37932: CALL_OW 52
// end ;
37936: GO 37575
37938: POP
37939: POP
// end ;
37940: GO 36877
37942: POP
37943: POP
// result := result ^ buildings ;
37944: LD_ADDR_VAR 0 7
37948: PUSH
37949: LD_VAR 0 7
37953: PUSH
37954: LD_VAR 0 18
37958: ADD
37959: ST_TO_ADDR
// end else
37960: GO 38103
// begin for i = 1 to personel do
37962: LD_ADDR_VAR 0 8
37966: PUSH
37967: DOUBLE
37968: LD_INT 1
37970: DEC
37971: ST_TO_ADDR
37972: LD_VAR 0 6
37976: PUSH
37977: FOR_TO
37978: IFFALSE 38101
// begin if i > 4 then
37980: LD_VAR 0 8
37984: PUSH
37985: LD_INT 4
37987: GREATER
37988: IFFALSE 37992
// break ;
37990: GO 38101
// x := personel [ i ] ;
37992: LD_ADDR_VAR 0 13
37996: PUSH
37997: LD_VAR 0 6
38001: PUSH
38002: LD_VAR 0 8
38006: ARRAY
38007: ST_TO_ADDR
// if x = - 1 then
38008: LD_VAR 0 13
38012: PUSH
38013: LD_INT 1
38015: NEG
38016: EQUAL
38017: IFFALSE 38021
// continue ;
38019: GO 37977
// PrepareHuman ( false , i , skill ) ;
38021: LD_INT 0
38023: PPUSH
38024: LD_VAR 0 8
38028: PPUSH
38029: LD_VAR 0 4
38033: PPUSH
38034: CALL_OW 380
// un := CreateHuman ;
38038: LD_ADDR_VAR 0 14
38042: PUSH
38043: CALL_OW 44
38047: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38048: LD_VAR 0 14
38052: PPUSH
38053: LD_VAR 0 1
38057: PPUSH
38058: CALL_OW 250
38062: PPUSH
38063: LD_VAR 0 1
38067: PPUSH
38068: CALL_OW 251
38072: PPUSH
38073: LD_INT 10
38075: PPUSH
38076: LD_INT 0
38078: PPUSH
38079: CALL_OW 50
// result := result ^ un ;
38083: LD_ADDR_VAR 0 7
38087: PUSH
38088: LD_VAR 0 7
38092: PUSH
38093: LD_VAR 0 14
38097: ADD
38098: ST_TO_ADDR
// end ;
38099: GO 37977
38101: POP
38102: POP
// end ; end ;
38103: LD_VAR 0 7
38107: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38108: LD_INT 0
38110: PPUSH
38111: PPUSH
38112: PPUSH
38113: PPUSH
38114: PPUSH
38115: PPUSH
38116: PPUSH
38117: PPUSH
38118: PPUSH
38119: PPUSH
38120: PPUSH
38121: PPUSH
38122: PPUSH
38123: PPUSH
38124: PPUSH
38125: PPUSH
// result := false ;
38126: LD_ADDR_VAR 0 3
38130: PUSH
38131: LD_INT 0
38133: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38134: LD_VAR 0 1
38138: NOT
38139: PUSH
38140: LD_VAR 0 1
38144: PPUSH
38145: CALL_OW 266
38149: PUSH
38150: LD_INT 32
38152: PUSH
38153: LD_INT 33
38155: PUSH
38156: EMPTY
38157: LIST
38158: LIST
38159: IN
38160: NOT
38161: OR
38162: IFFALSE 38166
// exit ;
38164: GO 39275
// nat := GetNation ( tower ) ;
38166: LD_ADDR_VAR 0 12
38170: PUSH
38171: LD_VAR 0 1
38175: PPUSH
38176: CALL_OW 248
38180: ST_TO_ADDR
// side := GetSide ( tower ) ;
38181: LD_ADDR_VAR 0 16
38185: PUSH
38186: LD_VAR 0 1
38190: PPUSH
38191: CALL_OW 255
38195: ST_TO_ADDR
// x := GetX ( tower ) ;
38196: LD_ADDR_VAR 0 10
38200: PUSH
38201: LD_VAR 0 1
38205: PPUSH
38206: CALL_OW 250
38210: ST_TO_ADDR
// y := GetY ( tower ) ;
38211: LD_ADDR_VAR 0 11
38215: PUSH
38216: LD_VAR 0 1
38220: PPUSH
38221: CALL_OW 251
38225: ST_TO_ADDR
// if not x or not y then
38226: LD_VAR 0 10
38230: NOT
38231: PUSH
38232: LD_VAR 0 11
38236: NOT
38237: OR
38238: IFFALSE 38242
// exit ;
38240: GO 39275
// weapon := 0 ;
38242: LD_ADDR_VAR 0 18
38246: PUSH
38247: LD_INT 0
38249: ST_TO_ADDR
// fac_list := [ ] ;
38250: LD_ADDR_VAR 0 17
38254: PUSH
38255: EMPTY
38256: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
38257: LD_ADDR_VAR 0 6
38261: PUSH
38262: LD_VAR 0 1
38266: PPUSH
38267: CALL_OW 274
38271: PPUSH
38272: LD_VAR 0 2
38276: PPUSH
38277: LD_INT 0
38279: PPUSH
38280: CALL 35846 0 3
38284: PPUSH
38285: LD_INT 30
38287: PUSH
38288: LD_INT 3
38290: PUSH
38291: EMPTY
38292: LIST
38293: LIST
38294: PPUSH
38295: CALL_OW 72
38299: ST_TO_ADDR
// if not factories then
38300: LD_VAR 0 6
38304: NOT
38305: IFFALSE 38309
// exit ;
38307: GO 39275
// for i in factories do
38309: LD_ADDR_VAR 0 8
38313: PUSH
38314: LD_VAR 0 6
38318: PUSH
38319: FOR_IN
38320: IFFALSE 38345
// fac_list := fac_list union AvailableWeaponList ( i ) ;
38322: LD_ADDR_VAR 0 17
38326: PUSH
38327: LD_VAR 0 17
38331: PUSH
38332: LD_VAR 0 8
38336: PPUSH
38337: CALL_OW 478
38341: UNION
38342: ST_TO_ADDR
38343: GO 38319
38345: POP
38346: POP
// if not fac_list then
38347: LD_VAR 0 17
38351: NOT
38352: IFFALSE 38356
// exit ;
38354: GO 39275
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
38356: LD_ADDR_VAR 0 5
38360: PUSH
38361: LD_INT 4
38363: PUSH
38364: LD_INT 5
38366: PUSH
38367: LD_INT 9
38369: PUSH
38370: LD_INT 10
38372: PUSH
38373: LD_INT 6
38375: PUSH
38376: LD_INT 7
38378: PUSH
38379: LD_INT 11
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: LIST
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: PUSH
38391: LD_INT 27
38393: PUSH
38394: LD_INT 28
38396: PUSH
38397: LD_INT 26
38399: PUSH
38400: LD_INT 30
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: LIST
38407: LIST
38408: PUSH
38409: LD_INT 43
38411: PUSH
38412: LD_INT 44
38414: PUSH
38415: LD_INT 46
38417: PUSH
38418: LD_INT 45
38420: PUSH
38421: LD_INT 47
38423: PUSH
38424: LD_INT 49
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: LIST
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: LIST
38439: PUSH
38440: LD_VAR 0 12
38444: ARRAY
38445: ST_TO_ADDR
// list := list isect fac_list ;
38446: LD_ADDR_VAR 0 5
38450: PUSH
38451: LD_VAR 0 5
38455: PUSH
38456: LD_VAR 0 17
38460: ISECT
38461: ST_TO_ADDR
// if not list then
38462: LD_VAR 0 5
38466: NOT
38467: IFFALSE 38471
// exit ;
38469: GO 39275
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
38471: LD_VAR 0 12
38475: PUSH
38476: LD_INT 3
38478: EQUAL
38479: PUSH
38480: LD_INT 49
38482: PUSH
38483: LD_VAR 0 5
38487: IN
38488: AND
38489: PUSH
38490: LD_INT 31
38492: PPUSH
38493: LD_VAR 0 16
38497: PPUSH
38498: CALL_OW 321
38502: PUSH
38503: LD_INT 2
38505: EQUAL
38506: AND
38507: IFFALSE 38567
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
38509: LD_INT 22
38511: PUSH
38512: LD_VAR 0 16
38516: PUSH
38517: EMPTY
38518: LIST
38519: LIST
38520: PUSH
38521: LD_INT 35
38523: PUSH
38524: LD_INT 49
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: PUSH
38531: LD_INT 91
38533: PUSH
38534: LD_VAR 0 1
38538: PUSH
38539: LD_INT 10
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: LIST
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: LIST
38551: PPUSH
38552: CALL_OW 69
38556: NOT
38557: IFFALSE 38567
// weapon := ru_time_lapser ;
38559: LD_ADDR_VAR 0 18
38563: PUSH
38564: LD_INT 49
38566: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
38567: LD_VAR 0 12
38571: PUSH
38572: LD_INT 1
38574: PUSH
38575: LD_INT 2
38577: PUSH
38578: EMPTY
38579: LIST
38580: LIST
38581: IN
38582: PUSH
38583: LD_INT 11
38585: PUSH
38586: LD_VAR 0 5
38590: IN
38591: PUSH
38592: LD_INT 30
38594: PUSH
38595: LD_VAR 0 5
38599: IN
38600: OR
38601: AND
38602: PUSH
38603: LD_INT 6
38605: PPUSH
38606: LD_VAR 0 16
38610: PPUSH
38611: CALL_OW 321
38615: PUSH
38616: LD_INT 2
38618: EQUAL
38619: AND
38620: IFFALSE 38785
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
38622: LD_INT 22
38624: PUSH
38625: LD_VAR 0 16
38629: PUSH
38630: EMPTY
38631: LIST
38632: LIST
38633: PUSH
38634: LD_INT 2
38636: PUSH
38637: LD_INT 35
38639: PUSH
38640: LD_INT 11
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: PUSH
38647: LD_INT 35
38649: PUSH
38650: LD_INT 30
38652: PUSH
38653: EMPTY
38654: LIST
38655: LIST
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: LIST
38661: PUSH
38662: LD_INT 91
38664: PUSH
38665: LD_VAR 0 1
38669: PUSH
38670: LD_INT 18
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: LIST
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: LIST
38682: PPUSH
38683: CALL_OW 69
38687: NOT
38688: PUSH
38689: LD_INT 22
38691: PUSH
38692: LD_VAR 0 16
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: PUSH
38701: LD_INT 2
38703: PUSH
38704: LD_INT 30
38706: PUSH
38707: LD_INT 32
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: PUSH
38714: LD_INT 30
38716: PUSH
38717: LD_INT 33
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: LIST
38728: PUSH
38729: LD_INT 91
38731: PUSH
38732: LD_VAR 0 1
38736: PUSH
38737: LD_INT 12
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: LIST
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: LIST
38749: PUSH
38750: EMPTY
38751: LIST
38752: PPUSH
38753: CALL_OW 69
38757: PUSH
38758: LD_INT 2
38760: GREATER
38761: AND
38762: IFFALSE 38785
// weapon := [ us_radar , ar_radar ] [ nat ] ;
38764: LD_ADDR_VAR 0 18
38768: PUSH
38769: LD_INT 11
38771: PUSH
38772: LD_INT 30
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PUSH
38779: LD_VAR 0 12
38783: ARRAY
38784: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
38785: LD_VAR 0 18
38789: NOT
38790: PUSH
38791: LD_INT 40
38793: PPUSH
38794: LD_VAR 0 16
38798: PPUSH
38799: CALL_OW 321
38803: PUSH
38804: LD_INT 2
38806: EQUAL
38807: AND
38808: PUSH
38809: LD_INT 7
38811: PUSH
38812: LD_VAR 0 5
38816: IN
38817: PUSH
38818: LD_INT 28
38820: PUSH
38821: LD_VAR 0 5
38825: IN
38826: OR
38827: PUSH
38828: LD_INT 45
38830: PUSH
38831: LD_VAR 0 5
38835: IN
38836: OR
38837: AND
38838: IFFALSE 39092
// begin hex := GetHexInfo ( x , y ) ;
38840: LD_ADDR_VAR 0 4
38844: PUSH
38845: LD_VAR 0 10
38849: PPUSH
38850: LD_VAR 0 11
38854: PPUSH
38855: CALL_OW 546
38859: ST_TO_ADDR
// if hex [ 1 ] then
38860: LD_VAR 0 4
38864: PUSH
38865: LD_INT 1
38867: ARRAY
38868: IFFALSE 38872
// exit ;
38870: GO 39275
// height := hex [ 2 ] ;
38872: LD_ADDR_VAR 0 15
38876: PUSH
38877: LD_VAR 0 4
38881: PUSH
38882: LD_INT 2
38884: ARRAY
38885: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
38886: LD_ADDR_VAR 0 14
38890: PUSH
38891: LD_INT 0
38893: PUSH
38894: LD_INT 2
38896: PUSH
38897: LD_INT 3
38899: PUSH
38900: LD_INT 5
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: LIST
38907: LIST
38908: ST_TO_ADDR
// for i in tmp do
38909: LD_ADDR_VAR 0 8
38913: PUSH
38914: LD_VAR 0 14
38918: PUSH
38919: FOR_IN
38920: IFFALSE 39090
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
38922: LD_ADDR_VAR 0 9
38926: PUSH
38927: LD_VAR 0 10
38931: PPUSH
38932: LD_VAR 0 8
38936: PPUSH
38937: LD_INT 5
38939: PPUSH
38940: CALL_OW 272
38944: PUSH
38945: LD_VAR 0 11
38949: PPUSH
38950: LD_VAR 0 8
38954: PPUSH
38955: LD_INT 5
38957: PPUSH
38958: CALL_OW 273
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
38967: LD_VAR 0 9
38971: PUSH
38972: LD_INT 1
38974: ARRAY
38975: PPUSH
38976: LD_VAR 0 9
38980: PUSH
38981: LD_INT 2
38983: ARRAY
38984: PPUSH
38985: CALL_OW 488
38989: IFFALSE 39088
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38991: LD_ADDR_VAR 0 4
38995: PUSH
38996: LD_VAR 0 9
39000: PUSH
39001: LD_INT 1
39003: ARRAY
39004: PPUSH
39005: LD_VAR 0 9
39009: PUSH
39010: LD_INT 2
39012: ARRAY
39013: PPUSH
39014: CALL_OW 546
39018: ST_TO_ADDR
// if hex [ 1 ] then
39019: LD_VAR 0 4
39023: PUSH
39024: LD_INT 1
39026: ARRAY
39027: IFFALSE 39031
// continue ;
39029: GO 38919
// h := hex [ 2 ] ;
39031: LD_ADDR_VAR 0 13
39035: PUSH
39036: LD_VAR 0 4
39040: PUSH
39041: LD_INT 2
39043: ARRAY
39044: ST_TO_ADDR
// if h + 7 < height then
39045: LD_VAR 0 13
39049: PUSH
39050: LD_INT 7
39052: PLUS
39053: PUSH
39054: LD_VAR 0 15
39058: LESS
39059: IFFALSE 39088
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39061: LD_ADDR_VAR 0 18
39065: PUSH
39066: LD_INT 7
39068: PUSH
39069: LD_INT 28
39071: PUSH
39072: LD_INT 45
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: LIST
39079: PUSH
39080: LD_VAR 0 12
39084: ARRAY
39085: ST_TO_ADDR
// break ;
39086: GO 39090
// end ; end ; end ;
39088: GO 38919
39090: POP
39091: POP
// end ; if not weapon then
39092: LD_VAR 0 18
39096: NOT
39097: IFFALSE 39157
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39099: LD_ADDR_VAR 0 5
39103: PUSH
39104: LD_VAR 0 5
39108: PUSH
39109: LD_INT 11
39111: PUSH
39112: LD_INT 30
39114: PUSH
39115: LD_INT 49
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: LIST
39122: DIFF
39123: ST_TO_ADDR
// if not list then
39124: LD_VAR 0 5
39128: NOT
39129: IFFALSE 39133
// exit ;
39131: GO 39275
// weapon := list [ rand ( 1 , list ) ] ;
39133: LD_ADDR_VAR 0 18
39137: PUSH
39138: LD_VAR 0 5
39142: PUSH
39143: LD_INT 1
39145: PPUSH
39146: LD_VAR 0 5
39150: PPUSH
39151: CALL_OW 12
39155: ARRAY
39156: ST_TO_ADDR
// end ; if weapon then
39157: LD_VAR 0 18
39161: IFFALSE 39275
// begin tmp := CostOfWeapon ( weapon ) ;
39163: LD_ADDR_VAR 0 14
39167: PUSH
39168: LD_VAR 0 18
39172: PPUSH
39173: CALL_OW 451
39177: ST_TO_ADDR
// j := GetBase ( tower ) ;
39178: LD_ADDR_VAR 0 9
39182: PUSH
39183: LD_VAR 0 1
39187: PPUSH
39188: CALL_OW 274
39192: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39193: LD_VAR 0 9
39197: PPUSH
39198: LD_INT 1
39200: PPUSH
39201: CALL_OW 275
39205: PUSH
39206: LD_VAR 0 14
39210: PUSH
39211: LD_INT 1
39213: ARRAY
39214: GREATEREQUAL
39215: PUSH
39216: LD_VAR 0 9
39220: PPUSH
39221: LD_INT 2
39223: PPUSH
39224: CALL_OW 275
39228: PUSH
39229: LD_VAR 0 14
39233: PUSH
39234: LD_INT 2
39236: ARRAY
39237: GREATEREQUAL
39238: AND
39239: PUSH
39240: LD_VAR 0 9
39244: PPUSH
39245: LD_INT 3
39247: PPUSH
39248: CALL_OW 275
39252: PUSH
39253: LD_VAR 0 14
39257: PUSH
39258: LD_INT 3
39260: ARRAY
39261: GREATEREQUAL
39262: AND
39263: IFFALSE 39275
// result := weapon ;
39265: LD_ADDR_VAR 0 3
39269: PUSH
39270: LD_VAR 0 18
39274: ST_TO_ADDR
// end ; end ;
39275: LD_VAR 0 3
39279: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39280: LD_INT 0
39282: PPUSH
39283: PPUSH
// result := true ;
39284: LD_ADDR_VAR 0 3
39288: PUSH
39289: LD_INT 1
39291: ST_TO_ADDR
// if array1 = array2 then
39292: LD_VAR 0 1
39296: PUSH
39297: LD_VAR 0 2
39301: EQUAL
39302: IFFALSE 39362
// begin for i = 1 to array1 do
39304: LD_ADDR_VAR 0 4
39308: PUSH
39309: DOUBLE
39310: LD_INT 1
39312: DEC
39313: ST_TO_ADDR
39314: LD_VAR 0 1
39318: PUSH
39319: FOR_TO
39320: IFFALSE 39358
// if array1 [ i ] <> array2 [ i ] then
39322: LD_VAR 0 1
39326: PUSH
39327: LD_VAR 0 4
39331: ARRAY
39332: PUSH
39333: LD_VAR 0 2
39337: PUSH
39338: LD_VAR 0 4
39342: ARRAY
39343: NONEQUAL
39344: IFFALSE 39356
// begin result := false ;
39346: LD_ADDR_VAR 0 3
39350: PUSH
39351: LD_INT 0
39353: ST_TO_ADDR
// break ;
39354: GO 39358
// end ;
39356: GO 39319
39358: POP
39359: POP
// end else
39360: GO 39370
// result := false ;
39362: LD_ADDR_VAR 0 3
39366: PUSH
39367: LD_INT 0
39369: ST_TO_ADDR
// end ;
39370: LD_VAR 0 3
39374: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
39375: LD_INT 0
39377: PPUSH
39378: PPUSH
// if not array1 or not array2 then
39379: LD_VAR 0 1
39383: NOT
39384: PUSH
39385: LD_VAR 0 2
39389: NOT
39390: OR
39391: IFFALSE 39395
// exit ;
39393: GO 39459
// result := true ;
39395: LD_ADDR_VAR 0 3
39399: PUSH
39400: LD_INT 1
39402: ST_TO_ADDR
// for i = 1 to array1 do
39403: LD_ADDR_VAR 0 4
39407: PUSH
39408: DOUBLE
39409: LD_INT 1
39411: DEC
39412: ST_TO_ADDR
39413: LD_VAR 0 1
39417: PUSH
39418: FOR_TO
39419: IFFALSE 39457
// if array1 [ i ] <> array2 [ i ] then
39421: LD_VAR 0 1
39425: PUSH
39426: LD_VAR 0 4
39430: ARRAY
39431: PUSH
39432: LD_VAR 0 2
39436: PUSH
39437: LD_VAR 0 4
39441: ARRAY
39442: NONEQUAL
39443: IFFALSE 39455
// begin result := false ;
39445: LD_ADDR_VAR 0 3
39449: PUSH
39450: LD_INT 0
39452: ST_TO_ADDR
// break ;
39453: GO 39457
// end ;
39455: GO 39418
39457: POP
39458: POP
// end ;
39459: LD_VAR 0 3
39463: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
39464: LD_INT 0
39466: PPUSH
39467: PPUSH
39468: PPUSH
// pom := GetBase ( fac ) ;
39469: LD_ADDR_VAR 0 5
39473: PUSH
39474: LD_VAR 0 1
39478: PPUSH
39479: CALL_OW 274
39483: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
39484: LD_ADDR_VAR 0 4
39488: PUSH
39489: LD_VAR 0 2
39493: PUSH
39494: LD_INT 1
39496: ARRAY
39497: PPUSH
39498: LD_VAR 0 2
39502: PUSH
39503: LD_INT 2
39505: ARRAY
39506: PPUSH
39507: LD_VAR 0 2
39511: PUSH
39512: LD_INT 3
39514: ARRAY
39515: PPUSH
39516: LD_VAR 0 2
39520: PUSH
39521: LD_INT 4
39523: ARRAY
39524: PPUSH
39525: CALL_OW 449
39529: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39530: LD_ADDR_VAR 0 3
39534: PUSH
39535: LD_VAR 0 5
39539: PPUSH
39540: LD_INT 1
39542: PPUSH
39543: CALL_OW 275
39547: PUSH
39548: LD_VAR 0 4
39552: PUSH
39553: LD_INT 1
39555: ARRAY
39556: GREATEREQUAL
39557: PUSH
39558: LD_VAR 0 5
39562: PPUSH
39563: LD_INT 2
39565: PPUSH
39566: CALL_OW 275
39570: PUSH
39571: LD_VAR 0 4
39575: PUSH
39576: LD_INT 2
39578: ARRAY
39579: GREATEREQUAL
39580: AND
39581: PUSH
39582: LD_VAR 0 5
39586: PPUSH
39587: LD_INT 3
39589: PPUSH
39590: CALL_OW 275
39594: PUSH
39595: LD_VAR 0 4
39599: PUSH
39600: LD_INT 3
39602: ARRAY
39603: GREATEREQUAL
39604: AND
39605: ST_TO_ADDR
// end ;
39606: LD_VAR 0 3
39610: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
39611: LD_INT 0
39613: PPUSH
39614: PPUSH
39615: PPUSH
39616: PPUSH
// pom := GetBase ( building ) ;
39617: LD_ADDR_VAR 0 3
39621: PUSH
39622: LD_VAR 0 1
39626: PPUSH
39627: CALL_OW 274
39631: ST_TO_ADDR
// if not pom then
39632: LD_VAR 0 3
39636: NOT
39637: IFFALSE 39641
// exit ;
39639: GO 39811
// btype := GetBType ( building ) ;
39641: LD_ADDR_VAR 0 5
39645: PUSH
39646: LD_VAR 0 1
39650: PPUSH
39651: CALL_OW 266
39655: ST_TO_ADDR
// if btype = b_armoury then
39656: LD_VAR 0 5
39660: PUSH
39661: LD_INT 4
39663: EQUAL
39664: IFFALSE 39674
// btype := b_barracks ;
39666: LD_ADDR_VAR 0 5
39670: PUSH
39671: LD_INT 5
39673: ST_TO_ADDR
// if btype = b_depot then
39674: LD_VAR 0 5
39678: PUSH
39679: LD_INT 0
39681: EQUAL
39682: IFFALSE 39692
// btype := b_warehouse ;
39684: LD_ADDR_VAR 0 5
39688: PUSH
39689: LD_INT 1
39691: ST_TO_ADDR
// if btype = b_workshop then
39692: LD_VAR 0 5
39696: PUSH
39697: LD_INT 2
39699: EQUAL
39700: IFFALSE 39710
// btype := b_factory ;
39702: LD_ADDR_VAR 0 5
39706: PUSH
39707: LD_INT 3
39709: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39710: LD_ADDR_VAR 0 4
39714: PUSH
39715: LD_VAR 0 5
39719: PPUSH
39720: LD_VAR 0 1
39724: PPUSH
39725: CALL_OW 248
39729: PPUSH
39730: CALL_OW 450
39734: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39735: LD_ADDR_VAR 0 2
39739: PUSH
39740: LD_VAR 0 3
39744: PPUSH
39745: LD_INT 1
39747: PPUSH
39748: CALL_OW 275
39752: PUSH
39753: LD_VAR 0 4
39757: PUSH
39758: LD_INT 1
39760: ARRAY
39761: GREATEREQUAL
39762: PUSH
39763: LD_VAR 0 3
39767: PPUSH
39768: LD_INT 2
39770: PPUSH
39771: CALL_OW 275
39775: PUSH
39776: LD_VAR 0 4
39780: PUSH
39781: LD_INT 2
39783: ARRAY
39784: GREATEREQUAL
39785: AND
39786: PUSH
39787: LD_VAR 0 3
39791: PPUSH
39792: LD_INT 3
39794: PPUSH
39795: CALL_OW 275
39799: PUSH
39800: LD_VAR 0 4
39804: PUSH
39805: LD_INT 3
39807: ARRAY
39808: GREATEREQUAL
39809: AND
39810: ST_TO_ADDR
// end ;
39811: LD_VAR 0 2
39815: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39816: LD_INT 0
39818: PPUSH
39819: PPUSH
39820: PPUSH
// pom := GetBase ( building ) ;
39821: LD_ADDR_VAR 0 4
39825: PUSH
39826: LD_VAR 0 1
39830: PPUSH
39831: CALL_OW 274
39835: ST_TO_ADDR
// if not pom then
39836: LD_VAR 0 4
39840: NOT
39841: IFFALSE 39845
// exit ;
39843: GO 39946
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39845: LD_ADDR_VAR 0 5
39849: PUSH
39850: LD_VAR 0 2
39854: PPUSH
39855: LD_VAR 0 1
39859: PPUSH
39860: CALL_OW 248
39864: PPUSH
39865: CALL_OW 450
39869: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39870: LD_ADDR_VAR 0 3
39874: PUSH
39875: LD_VAR 0 4
39879: PPUSH
39880: LD_INT 1
39882: PPUSH
39883: CALL_OW 275
39887: PUSH
39888: LD_VAR 0 5
39892: PUSH
39893: LD_INT 1
39895: ARRAY
39896: GREATEREQUAL
39897: PUSH
39898: LD_VAR 0 4
39902: PPUSH
39903: LD_INT 2
39905: PPUSH
39906: CALL_OW 275
39910: PUSH
39911: LD_VAR 0 5
39915: PUSH
39916: LD_INT 2
39918: ARRAY
39919: GREATEREQUAL
39920: AND
39921: PUSH
39922: LD_VAR 0 4
39926: PPUSH
39927: LD_INT 3
39929: PPUSH
39930: CALL_OW 275
39934: PUSH
39935: LD_VAR 0 5
39939: PUSH
39940: LD_INT 3
39942: ARRAY
39943: GREATEREQUAL
39944: AND
39945: ST_TO_ADDR
// end ;
39946: LD_VAR 0 3
39950: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
39951: LD_INT 0
39953: PPUSH
39954: PPUSH
39955: PPUSH
39956: PPUSH
39957: PPUSH
39958: PPUSH
39959: PPUSH
39960: PPUSH
39961: PPUSH
39962: PPUSH
39963: PPUSH
// result := false ;
39964: LD_ADDR_VAR 0 8
39968: PUSH
39969: LD_INT 0
39971: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
39972: LD_VAR 0 5
39976: NOT
39977: PUSH
39978: LD_VAR 0 1
39982: NOT
39983: OR
39984: PUSH
39985: LD_VAR 0 2
39989: NOT
39990: OR
39991: PUSH
39992: LD_VAR 0 3
39996: NOT
39997: OR
39998: IFFALSE 40002
// exit ;
40000: GO 40816
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
40002: LD_ADDR_VAR 0 14
40006: PUSH
40007: LD_VAR 0 1
40011: PPUSH
40012: LD_VAR 0 2
40016: PPUSH
40017: LD_VAR 0 3
40021: PPUSH
40022: LD_VAR 0 4
40026: PPUSH
40027: LD_VAR 0 5
40031: PUSH
40032: LD_INT 1
40034: ARRAY
40035: PPUSH
40036: CALL_OW 248
40040: PPUSH
40041: LD_INT 0
40043: PPUSH
40044: CALL 42069 0 6
40048: ST_TO_ADDR
// if not hexes then
40049: LD_VAR 0 14
40053: NOT
40054: IFFALSE 40058
// exit ;
40056: GO 40816
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40058: LD_ADDR_VAR 0 17
40062: PUSH
40063: LD_VAR 0 5
40067: PPUSH
40068: LD_INT 22
40070: PUSH
40071: LD_VAR 0 13
40075: PPUSH
40076: CALL_OW 255
40080: PUSH
40081: EMPTY
40082: LIST
40083: LIST
40084: PUSH
40085: LD_INT 2
40087: PUSH
40088: LD_INT 30
40090: PUSH
40091: LD_INT 0
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: LD_INT 30
40100: PUSH
40101: LD_INT 1
40103: PUSH
40104: EMPTY
40105: LIST
40106: LIST
40107: PUSH
40108: EMPTY
40109: LIST
40110: LIST
40111: LIST
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PPUSH
40117: CALL_OW 72
40121: ST_TO_ADDR
// for i = 1 to hexes do
40122: LD_ADDR_VAR 0 9
40126: PUSH
40127: DOUBLE
40128: LD_INT 1
40130: DEC
40131: ST_TO_ADDR
40132: LD_VAR 0 14
40136: PUSH
40137: FOR_TO
40138: IFFALSE 40814
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40140: LD_ADDR_VAR 0 13
40144: PUSH
40145: LD_VAR 0 14
40149: PUSH
40150: LD_VAR 0 9
40154: ARRAY
40155: PUSH
40156: LD_INT 1
40158: ARRAY
40159: PPUSH
40160: LD_VAR 0 14
40164: PUSH
40165: LD_VAR 0 9
40169: ARRAY
40170: PUSH
40171: LD_INT 2
40173: ARRAY
40174: PPUSH
40175: CALL_OW 428
40179: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40180: LD_VAR 0 14
40184: PUSH
40185: LD_VAR 0 9
40189: ARRAY
40190: PUSH
40191: LD_INT 1
40193: ARRAY
40194: PPUSH
40195: LD_VAR 0 14
40199: PUSH
40200: LD_VAR 0 9
40204: ARRAY
40205: PUSH
40206: LD_INT 2
40208: ARRAY
40209: PPUSH
40210: CALL_OW 351
40214: PUSH
40215: LD_VAR 0 14
40219: PUSH
40220: LD_VAR 0 9
40224: ARRAY
40225: PUSH
40226: LD_INT 1
40228: ARRAY
40229: PPUSH
40230: LD_VAR 0 14
40234: PUSH
40235: LD_VAR 0 9
40239: ARRAY
40240: PUSH
40241: LD_INT 2
40243: ARRAY
40244: PPUSH
40245: CALL_OW 488
40249: NOT
40250: OR
40251: PUSH
40252: LD_VAR 0 13
40256: PPUSH
40257: CALL_OW 247
40261: PUSH
40262: LD_INT 3
40264: EQUAL
40265: OR
40266: IFFALSE 40272
// exit ;
40268: POP
40269: POP
40270: GO 40816
// if not tmp then
40272: LD_VAR 0 13
40276: NOT
40277: IFFALSE 40281
// continue ;
40279: GO 40137
// result := true ;
40281: LD_ADDR_VAR 0 8
40285: PUSH
40286: LD_INT 1
40288: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
40289: LD_VAR 0 6
40293: PUSH
40294: LD_VAR 0 13
40298: PPUSH
40299: CALL_OW 247
40303: PUSH
40304: LD_INT 2
40306: EQUAL
40307: AND
40308: PUSH
40309: LD_VAR 0 13
40313: PPUSH
40314: CALL_OW 263
40318: PUSH
40319: LD_INT 1
40321: EQUAL
40322: AND
40323: IFFALSE 40487
// begin if IsDrivenBy ( tmp ) then
40325: LD_VAR 0 13
40329: PPUSH
40330: CALL_OW 311
40334: IFFALSE 40338
// continue ;
40336: GO 40137
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
40338: LD_VAR 0 6
40342: PPUSH
40343: LD_INT 3
40345: PUSH
40346: LD_INT 60
40348: PUSH
40349: EMPTY
40350: LIST
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: PUSH
40356: LD_INT 3
40358: PUSH
40359: LD_INT 55
40361: PUSH
40362: EMPTY
40363: LIST
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PPUSH
40373: CALL_OW 72
40377: IFFALSE 40485
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
40379: LD_ADDR_VAR 0 18
40383: PUSH
40384: LD_VAR 0 6
40388: PPUSH
40389: LD_INT 3
40391: PUSH
40392: LD_INT 60
40394: PUSH
40395: EMPTY
40396: LIST
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: PUSH
40402: LD_INT 3
40404: PUSH
40405: LD_INT 55
40407: PUSH
40408: EMPTY
40409: LIST
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: PPUSH
40419: CALL_OW 72
40423: PUSH
40424: LD_INT 1
40426: ARRAY
40427: ST_TO_ADDR
// if IsInUnit ( driver ) then
40428: LD_VAR 0 18
40432: PPUSH
40433: CALL_OW 310
40437: IFFALSE 40448
// ComExit ( driver ) ;
40439: LD_VAR 0 18
40443: PPUSH
40444: CALL 65850 0 1
// AddComEnterUnit ( driver , tmp ) ;
40448: LD_VAR 0 18
40452: PPUSH
40453: LD_VAR 0 13
40457: PPUSH
40458: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
40462: LD_VAR 0 18
40466: PPUSH
40467: LD_VAR 0 7
40471: PPUSH
40472: CALL_OW 173
// AddComExitVehicle ( driver ) ;
40476: LD_VAR 0 18
40480: PPUSH
40481: CALL_OW 181
// end ; continue ;
40485: GO 40137
// end ; if not cleaners or not tmp in cleaners then
40487: LD_VAR 0 6
40491: NOT
40492: PUSH
40493: LD_VAR 0 13
40497: PUSH
40498: LD_VAR 0 6
40502: IN
40503: NOT
40504: OR
40505: IFFALSE 40812
// begin if dep then
40507: LD_VAR 0 17
40511: IFFALSE 40647
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
40513: LD_ADDR_VAR 0 16
40517: PUSH
40518: LD_VAR 0 17
40522: PUSH
40523: LD_INT 1
40525: ARRAY
40526: PPUSH
40527: CALL_OW 250
40531: PPUSH
40532: LD_VAR 0 17
40536: PUSH
40537: LD_INT 1
40539: ARRAY
40540: PPUSH
40541: CALL_OW 254
40545: PPUSH
40546: LD_INT 5
40548: PPUSH
40549: CALL_OW 272
40553: PUSH
40554: LD_VAR 0 17
40558: PUSH
40559: LD_INT 1
40561: ARRAY
40562: PPUSH
40563: CALL_OW 251
40567: PPUSH
40568: LD_VAR 0 17
40572: PUSH
40573: LD_INT 1
40575: ARRAY
40576: PPUSH
40577: CALL_OW 254
40581: PPUSH
40582: LD_INT 5
40584: PPUSH
40585: CALL_OW 273
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
40594: LD_VAR 0 16
40598: PUSH
40599: LD_INT 1
40601: ARRAY
40602: PPUSH
40603: LD_VAR 0 16
40607: PUSH
40608: LD_INT 2
40610: ARRAY
40611: PPUSH
40612: CALL_OW 488
40616: IFFALSE 40647
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40618: LD_VAR 0 13
40622: PPUSH
40623: LD_VAR 0 16
40627: PUSH
40628: LD_INT 1
40630: ARRAY
40631: PPUSH
40632: LD_VAR 0 16
40636: PUSH
40637: LD_INT 2
40639: ARRAY
40640: PPUSH
40641: CALL_OW 111
// continue ;
40645: GO 40137
// end ; end ; r := GetDir ( tmp ) ;
40647: LD_ADDR_VAR 0 15
40651: PUSH
40652: LD_VAR 0 13
40656: PPUSH
40657: CALL_OW 254
40661: ST_TO_ADDR
// if r = 5 then
40662: LD_VAR 0 15
40666: PUSH
40667: LD_INT 5
40669: EQUAL
40670: IFFALSE 40680
// r := 0 ;
40672: LD_ADDR_VAR 0 15
40676: PUSH
40677: LD_INT 0
40679: ST_TO_ADDR
// for j = r to 5 do
40680: LD_ADDR_VAR 0 10
40684: PUSH
40685: DOUBLE
40686: LD_VAR 0 15
40690: DEC
40691: ST_TO_ADDR
40692: LD_INT 5
40694: PUSH
40695: FOR_TO
40696: IFFALSE 40810
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
40698: LD_ADDR_VAR 0 11
40702: PUSH
40703: LD_VAR 0 13
40707: PPUSH
40708: CALL_OW 250
40712: PPUSH
40713: LD_VAR 0 10
40717: PPUSH
40718: LD_INT 2
40720: PPUSH
40721: CALL_OW 272
40725: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
40726: LD_ADDR_VAR 0 12
40730: PUSH
40731: LD_VAR 0 13
40735: PPUSH
40736: CALL_OW 251
40740: PPUSH
40741: LD_VAR 0 10
40745: PPUSH
40746: LD_INT 2
40748: PPUSH
40749: CALL_OW 273
40753: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
40754: LD_VAR 0 11
40758: PPUSH
40759: LD_VAR 0 12
40763: PPUSH
40764: CALL_OW 488
40768: PUSH
40769: LD_VAR 0 11
40773: PPUSH
40774: LD_VAR 0 12
40778: PPUSH
40779: CALL_OW 428
40783: NOT
40784: AND
40785: IFFALSE 40808
// begin ComMoveXY ( tmp , _x , _y ) ;
40787: LD_VAR 0 13
40791: PPUSH
40792: LD_VAR 0 11
40796: PPUSH
40797: LD_VAR 0 12
40801: PPUSH
40802: CALL_OW 111
// break ;
40806: GO 40810
// end ; end ;
40808: GO 40695
40810: POP
40811: POP
// end ; end ;
40812: GO 40137
40814: POP
40815: POP
// end ;
40816: LD_VAR 0 8
40820: RET
// export function BuildingTechInvented ( side , btype ) ; begin
40821: LD_INT 0
40823: PPUSH
// result := true ;
40824: LD_ADDR_VAR 0 3
40828: PUSH
40829: LD_INT 1
40831: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
40832: LD_VAR 0 2
40836: PUSH
40837: LD_INT 24
40839: DOUBLE
40840: EQUAL
40841: IFTRUE 40851
40843: LD_INT 33
40845: DOUBLE
40846: EQUAL
40847: IFTRUE 40851
40849: GO 40876
40851: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
40852: LD_ADDR_VAR 0 3
40856: PUSH
40857: LD_INT 32
40859: PPUSH
40860: LD_VAR 0 1
40864: PPUSH
40865: CALL_OW 321
40869: PUSH
40870: LD_INT 2
40872: EQUAL
40873: ST_TO_ADDR
40874: GO 41192
40876: LD_INT 20
40878: DOUBLE
40879: EQUAL
40880: IFTRUE 40884
40882: GO 40909
40884: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
40885: LD_ADDR_VAR 0 3
40889: PUSH
40890: LD_INT 6
40892: PPUSH
40893: LD_VAR 0 1
40897: PPUSH
40898: CALL_OW 321
40902: PUSH
40903: LD_INT 2
40905: EQUAL
40906: ST_TO_ADDR
40907: GO 41192
40909: LD_INT 22
40911: DOUBLE
40912: EQUAL
40913: IFTRUE 40923
40915: LD_INT 36
40917: DOUBLE
40918: EQUAL
40919: IFTRUE 40923
40921: GO 40948
40923: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
40924: LD_ADDR_VAR 0 3
40928: PUSH
40929: LD_INT 15
40931: PPUSH
40932: LD_VAR 0 1
40936: PPUSH
40937: CALL_OW 321
40941: PUSH
40942: LD_INT 2
40944: EQUAL
40945: ST_TO_ADDR
40946: GO 41192
40948: LD_INT 30
40950: DOUBLE
40951: EQUAL
40952: IFTRUE 40956
40954: GO 40981
40956: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
40957: LD_ADDR_VAR 0 3
40961: PUSH
40962: LD_INT 20
40964: PPUSH
40965: LD_VAR 0 1
40969: PPUSH
40970: CALL_OW 321
40974: PUSH
40975: LD_INT 2
40977: EQUAL
40978: ST_TO_ADDR
40979: GO 41192
40981: LD_INT 28
40983: DOUBLE
40984: EQUAL
40985: IFTRUE 40995
40987: LD_INT 21
40989: DOUBLE
40990: EQUAL
40991: IFTRUE 40995
40993: GO 41020
40995: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
40996: LD_ADDR_VAR 0 3
41000: PUSH
41001: LD_INT 21
41003: PPUSH
41004: LD_VAR 0 1
41008: PPUSH
41009: CALL_OW 321
41013: PUSH
41014: LD_INT 2
41016: EQUAL
41017: ST_TO_ADDR
41018: GO 41192
41020: LD_INT 16
41022: DOUBLE
41023: EQUAL
41024: IFTRUE 41028
41026: GO 41053
41028: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
41029: LD_ADDR_VAR 0 3
41033: PUSH
41034: LD_INT 84
41036: PPUSH
41037: LD_VAR 0 1
41041: PPUSH
41042: CALL_OW 321
41046: PUSH
41047: LD_INT 2
41049: EQUAL
41050: ST_TO_ADDR
41051: GO 41192
41053: LD_INT 19
41055: DOUBLE
41056: EQUAL
41057: IFTRUE 41067
41059: LD_INT 23
41061: DOUBLE
41062: EQUAL
41063: IFTRUE 41067
41065: GO 41092
41067: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
41068: LD_ADDR_VAR 0 3
41072: PUSH
41073: LD_INT 83
41075: PPUSH
41076: LD_VAR 0 1
41080: PPUSH
41081: CALL_OW 321
41085: PUSH
41086: LD_INT 2
41088: EQUAL
41089: ST_TO_ADDR
41090: GO 41192
41092: LD_INT 17
41094: DOUBLE
41095: EQUAL
41096: IFTRUE 41100
41098: GO 41125
41100: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
41101: LD_ADDR_VAR 0 3
41105: PUSH
41106: LD_INT 39
41108: PPUSH
41109: LD_VAR 0 1
41113: PPUSH
41114: CALL_OW 321
41118: PUSH
41119: LD_INT 2
41121: EQUAL
41122: ST_TO_ADDR
41123: GO 41192
41125: LD_INT 18
41127: DOUBLE
41128: EQUAL
41129: IFTRUE 41133
41131: GO 41158
41133: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
41134: LD_ADDR_VAR 0 3
41138: PUSH
41139: LD_INT 40
41141: PPUSH
41142: LD_VAR 0 1
41146: PPUSH
41147: CALL_OW 321
41151: PUSH
41152: LD_INT 2
41154: EQUAL
41155: ST_TO_ADDR
41156: GO 41192
41158: LD_INT 27
41160: DOUBLE
41161: EQUAL
41162: IFTRUE 41166
41164: GO 41191
41166: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
41167: LD_ADDR_VAR 0 3
41171: PUSH
41172: LD_INT 35
41174: PPUSH
41175: LD_VAR 0 1
41179: PPUSH
41180: CALL_OW 321
41184: PUSH
41185: LD_INT 2
41187: EQUAL
41188: ST_TO_ADDR
41189: GO 41192
41191: POP
// end ;
41192: LD_VAR 0 3
41196: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
41197: LD_INT 0
41199: PPUSH
41200: PPUSH
41201: PPUSH
41202: PPUSH
41203: PPUSH
41204: PPUSH
41205: PPUSH
41206: PPUSH
41207: PPUSH
41208: PPUSH
41209: PPUSH
// result := false ;
41210: LD_ADDR_VAR 0 6
41214: PUSH
41215: LD_INT 0
41217: ST_TO_ADDR
// if btype = b_depot then
41218: LD_VAR 0 2
41222: PUSH
41223: LD_INT 0
41225: EQUAL
41226: IFFALSE 41238
// begin result := true ;
41228: LD_ADDR_VAR 0 6
41232: PUSH
41233: LD_INT 1
41235: ST_TO_ADDR
// exit ;
41236: GO 42064
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41238: LD_VAR 0 1
41242: NOT
41243: PUSH
41244: LD_VAR 0 1
41248: PPUSH
41249: CALL_OW 266
41253: PUSH
41254: LD_INT 0
41256: PUSH
41257: LD_INT 1
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: IN
41264: NOT
41265: OR
41266: PUSH
41267: LD_VAR 0 2
41271: NOT
41272: OR
41273: PUSH
41274: LD_VAR 0 5
41278: PUSH
41279: LD_INT 0
41281: PUSH
41282: LD_INT 1
41284: PUSH
41285: LD_INT 2
41287: PUSH
41288: LD_INT 3
41290: PUSH
41291: LD_INT 4
41293: PUSH
41294: LD_INT 5
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: LIST
41301: LIST
41302: LIST
41303: LIST
41304: IN
41305: NOT
41306: OR
41307: PUSH
41308: LD_VAR 0 3
41312: PPUSH
41313: LD_VAR 0 4
41317: PPUSH
41318: CALL_OW 488
41322: NOT
41323: OR
41324: IFFALSE 41328
// exit ;
41326: GO 42064
// side := GetSide ( depot ) ;
41328: LD_ADDR_VAR 0 9
41332: PUSH
41333: LD_VAR 0 1
41337: PPUSH
41338: CALL_OW 255
41342: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
41343: LD_VAR 0 9
41347: PPUSH
41348: LD_VAR 0 2
41352: PPUSH
41353: CALL 40821 0 2
41357: NOT
41358: IFFALSE 41362
// exit ;
41360: GO 42064
// pom := GetBase ( depot ) ;
41362: LD_ADDR_VAR 0 10
41366: PUSH
41367: LD_VAR 0 1
41371: PPUSH
41372: CALL_OW 274
41376: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
41377: LD_ADDR_VAR 0 11
41381: PUSH
41382: LD_VAR 0 2
41386: PPUSH
41387: LD_VAR 0 1
41391: PPUSH
41392: CALL_OW 248
41396: PPUSH
41397: CALL_OW 450
41401: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
41402: LD_VAR 0 10
41406: PPUSH
41407: LD_INT 1
41409: PPUSH
41410: CALL_OW 275
41414: PUSH
41415: LD_VAR 0 11
41419: PUSH
41420: LD_INT 1
41422: ARRAY
41423: GREATEREQUAL
41424: PUSH
41425: LD_VAR 0 10
41429: PPUSH
41430: LD_INT 2
41432: PPUSH
41433: CALL_OW 275
41437: PUSH
41438: LD_VAR 0 11
41442: PUSH
41443: LD_INT 2
41445: ARRAY
41446: GREATEREQUAL
41447: AND
41448: PUSH
41449: LD_VAR 0 10
41453: PPUSH
41454: LD_INT 3
41456: PPUSH
41457: CALL_OW 275
41461: PUSH
41462: LD_VAR 0 11
41466: PUSH
41467: LD_INT 3
41469: ARRAY
41470: GREATEREQUAL
41471: AND
41472: NOT
41473: IFFALSE 41477
// exit ;
41475: GO 42064
// if GetBType ( depot ) = b_depot then
41477: LD_VAR 0 1
41481: PPUSH
41482: CALL_OW 266
41486: PUSH
41487: LD_INT 0
41489: EQUAL
41490: IFFALSE 41502
// dist := 28 else
41492: LD_ADDR_VAR 0 14
41496: PUSH
41497: LD_INT 28
41499: ST_TO_ADDR
41500: GO 41510
// dist := 36 ;
41502: LD_ADDR_VAR 0 14
41506: PUSH
41507: LD_INT 36
41509: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
41510: LD_VAR 0 1
41514: PPUSH
41515: LD_VAR 0 3
41519: PPUSH
41520: LD_VAR 0 4
41524: PPUSH
41525: CALL_OW 297
41529: PUSH
41530: LD_VAR 0 14
41534: GREATER
41535: IFFALSE 41539
// exit ;
41537: GO 42064
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
41539: LD_ADDR_VAR 0 12
41543: PUSH
41544: LD_VAR 0 2
41548: PPUSH
41549: LD_VAR 0 3
41553: PPUSH
41554: LD_VAR 0 4
41558: PPUSH
41559: LD_VAR 0 5
41563: PPUSH
41564: LD_VAR 0 1
41568: PPUSH
41569: CALL_OW 248
41573: PPUSH
41574: LD_INT 0
41576: PPUSH
41577: CALL 42069 0 6
41581: ST_TO_ADDR
// if not hexes then
41582: LD_VAR 0 12
41586: NOT
41587: IFFALSE 41591
// exit ;
41589: GO 42064
// hex := GetHexInfo ( x , y ) ;
41591: LD_ADDR_VAR 0 15
41595: PUSH
41596: LD_VAR 0 3
41600: PPUSH
41601: LD_VAR 0 4
41605: PPUSH
41606: CALL_OW 546
41610: ST_TO_ADDR
// if hex [ 1 ] then
41611: LD_VAR 0 15
41615: PUSH
41616: LD_INT 1
41618: ARRAY
41619: IFFALSE 41623
// exit ;
41621: GO 42064
// height := hex [ 2 ] ;
41623: LD_ADDR_VAR 0 13
41627: PUSH
41628: LD_VAR 0 15
41632: PUSH
41633: LD_INT 2
41635: ARRAY
41636: ST_TO_ADDR
// for i = 1 to hexes do
41637: LD_ADDR_VAR 0 7
41641: PUSH
41642: DOUBLE
41643: LD_INT 1
41645: DEC
41646: ST_TO_ADDR
41647: LD_VAR 0 12
41651: PUSH
41652: FOR_TO
41653: IFFALSE 41983
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
41655: LD_VAR 0 12
41659: PUSH
41660: LD_VAR 0 7
41664: ARRAY
41665: PUSH
41666: LD_INT 1
41668: ARRAY
41669: PPUSH
41670: LD_VAR 0 12
41674: PUSH
41675: LD_VAR 0 7
41679: ARRAY
41680: PUSH
41681: LD_INT 2
41683: ARRAY
41684: PPUSH
41685: CALL_OW 488
41689: NOT
41690: PUSH
41691: LD_VAR 0 12
41695: PUSH
41696: LD_VAR 0 7
41700: ARRAY
41701: PUSH
41702: LD_INT 1
41704: ARRAY
41705: PPUSH
41706: LD_VAR 0 12
41710: PUSH
41711: LD_VAR 0 7
41715: ARRAY
41716: PUSH
41717: LD_INT 2
41719: ARRAY
41720: PPUSH
41721: CALL_OW 428
41725: PUSH
41726: LD_INT 0
41728: GREATER
41729: OR
41730: PUSH
41731: LD_VAR 0 12
41735: PUSH
41736: LD_VAR 0 7
41740: ARRAY
41741: PUSH
41742: LD_INT 1
41744: ARRAY
41745: PPUSH
41746: LD_VAR 0 12
41750: PUSH
41751: LD_VAR 0 7
41755: ARRAY
41756: PUSH
41757: LD_INT 2
41759: ARRAY
41760: PPUSH
41761: CALL_OW 351
41765: OR
41766: IFFALSE 41772
// exit ;
41768: POP
41769: POP
41770: GO 42064
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41772: LD_ADDR_VAR 0 8
41776: PUSH
41777: LD_VAR 0 12
41781: PUSH
41782: LD_VAR 0 7
41786: ARRAY
41787: PUSH
41788: LD_INT 1
41790: ARRAY
41791: PPUSH
41792: LD_VAR 0 12
41796: PUSH
41797: LD_VAR 0 7
41801: ARRAY
41802: PUSH
41803: LD_INT 2
41805: ARRAY
41806: PPUSH
41807: CALL_OW 546
41811: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41812: LD_VAR 0 8
41816: PUSH
41817: LD_INT 1
41819: ARRAY
41820: PUSH
41821: LD_VAR 0 8
41825: PUSH
41826: LD_INT 2
41828: ARRAY
41829: PUSH
41830: LD_VAR 0 13
41834: PUSH
41835: LD_INT 2
41837: PLUS
41838: GREATER
41839: OR
41840: PUSH
41841: LD_VAR 0 8
41845: PUSH
41846: LD_INT 2
41848: ARRAY
41849: PUSH
41850: LD_VAR 0 13
41854: PUSH
41855: LD_INT 2
41857: MINUS
41858: LESS
41859: OR
41860: PUSH
41861: LD_VAR 0 8
41865: PUSH
41866: LD_INT 3
41868: ARRAY
41869: PUSH
41870: LD_INT 0
41872: PUSH
41873: LD_INT 8
41875: PUSH
41876: LD_INT 9
41878: PUSH
41879: LD_INT 10
41881: PUSH
41882: LD_INT 11
41884: PUSH
41885: LD_INT 12
41887: PUSH
41888: LD_INT 13
41890: PUSH
41891: LD_INT 16
41893: PUSH
41894: LD_INT 17
41896: PUSH
41897: LD_INT 18
41899: PUSH
41900: LD_INT 19
41902: PUSH
41903: LD_INT 20
41905: PUSH
41906: LD_INT 21
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: LIST
41913: LIST
41914: LIST
41915: LIST
41916: LIST
41917: LIST
41918: LIST
41919: LIST
41920: LIST
41921: LIST
41922: LIST
41923: IN
41924: NOT
41925: OR
41926: PUSH
41927: LD_VAR 0 8
41931: PUSH
41932: LD_INT 5
41934: ARRAY
41935: NOT
41936: OR
41937: PUSH
41938: LD_VAR 0 8
41942: PUSH
41943: LD_INT 6
41945: ARRAY
41946: PUSH
41947: LD_INT 1
41949: PUSH
41950: LD_INT 2
41952: PUSH
41953: LD_INT 7
41955: PUSH
41956: LD_INT 9
41958: PUSH
41959: LD_INT 10
41961: PUSH
41962: LD_INT 11
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: LIST
41969: LIST
41970: LIST
41971: LIST
41972: IN
41973: NOT
41974: OR
41975: IFFALSE 41981
// exit ;
41977: POP
41978: POP
41979: GO 42064
// end ;
41981: GO 41652
41983: POP
41984: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41985: LD_VAR 0 9
41989: PPUSH
41990: LD_VAR 0 3
41994: PPUSH
41995: LD_VAR 0 4
41999: PPUSH
42000: LD_INT 20
42002: PPUSH
42003: CALL 33987 0 4
42007: PUSH
42008: LD_INT 4
42010: ARRAY
42011: IFFALSE 42015
// exit ;
42013: GO 42064
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42015: LD_VAR 0 2
42019: PUSH
42020: LD_INT 29
42022: PUSH
42023: LD_INT 30
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: IN
42030: PUSH
42031: LD_VAR 0 3
42035: PPUSH
42036: LD_VAR 0 4
42040: PPUSH
42041: LD_VAR 0 9
42045: PPUSH
42046: CALL_OW 440
42050: NOT
42051: AND
42052: IFFALSE 42056
// exit ;
42054: GO 42064
// result := true ;
42056: LD_ADDR_VAR 0 6
42060: PUSH
42061: LD_INT 1
42063: ST_TO_ADDR
// end ;
42064: LD_VAR 0 6
42068: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
42069: LD_INT 0
42071: PPUSH
42072: PPUSH
42073: PPUSH
42074: PPUSH
42075: PPUSH
42076: PPUSH
42077: PPUSH
42078: PPUSH
42079: PPUSH
42080: PPUSH
42081: PPUSH
42082: PPUSH
42083: PPUSH
42084: PPUSH
42085: PPUSH
42086: PPUSH
42087: PPUSH
42088: PPUSH
42089: PPUSH
42090: PPUSH
42091: PPUSH
42092: PPUSH
42093: PPUSH
42094: PPUSH
42095: PPUSH
42096: PPUSH
42097: PPUSH
42098: PPUSH
42099: PPUSH
42100: PPUSH
42101: PPUSH
42102: PPUSH
42103: PPUSH
42104: PPUSH
42105: PPUSH
42106: PPUSH
42107: PPUSH
42108: PPUSH
42109: PPUSH
42110: PPUSH
42111: PPUSH
42112: PPUSH
42113: PPUSH
42114: PPUSH
42115: PPUSH
42116: PPUSH
42117: PPUSH
42118: PPUSH
42119: PPUSH
42120: PPUSH
42121: PPUSH
42122: PPUSH
42123: PPUSH
42124: PPUSH
42125: PPUSH
42126: PPUSH
42127: PPUSH
42128: PPUSH
// result = [ ] ;
42129: LD_ADDR_VAR 0 7
42133: PUSH
42134: EMPTY
42135: ST_TO_ADDR
// temp_list = [ ] ;
42136: LD_ADDR_VAR 0 9
42140: PUSH
42141: EMPTY
42142: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42143: LD_VAR 0 4
42147: PUSH
42148: LD_INT 0
42150: PUSH
42151: LD_INT 1
42153: PUSH
42154: LD_INT 2
42156: PUSH
42157: LD_INT 3
42159: PUSH
42160: LD_INT 4
42162: PUSH
42163: LD_INT 5
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: LIST
42172: LIST
42173: IN
42174: NOT
42175: PUSH
42176: LD_VAR 0 1
42180: PUSH
42181: LD_INT 0
42183: PUSH
42184: LD_INT 1
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: IN
42191: PUSH
42192: LD_VAR 0 5
42196: PUSH
42197: LD_INT 1
42199: PUSH
42200: LD_INT 2
42202: PUSH
42203: LD_INT 3
42205: PUSH
42206: EMPTY
42207: LIST
42208: LIST
42209: LIST
42210: IN
42211: NOT
42212: AND
42213: OR
42214: IFFALSE 42218
// exit ;
42216: GO 60609
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42218: LD_VAR 0 1
42222: PUSH
42223: LD_INT 6
42225: PUSH
42226: LD_INT 7
42228: PUSH
42229: LD_INT 8
42231: PUSH
42232: LD_INT 13
42234: PUSH
42235: LD_INT 12
42237: PUSH
42238: LD_INT 15
42240: PUSH
42241: LD_INT 11
42243: PUSH
42244: LD_INT 14
42246: PUSH
42247: LD_INT 10
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: LIST
42254: LIST
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: IN
42261: IFFALSE 42271
// btype = b_lab ;
42263: LD_ADDR_VAR 0 1
42267: PUSH
42268: LD_INT 6
42270: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
42271: LD_VAR 0 6
42275: PUSH
42276: LD_INT 0
42278: PUSH
42279: LD_INT 1
42281: PUSH
42282: LD_INT 2
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: LIST
42289: IN
42290: NOT
42291: PUSH
42292: LD_VAR 0 1
42296: PUSH
42297: LD_INT 0
42299: PUSH
42300: LD_INT 1
42302: PUSH
42303: LD_INT 2
42305: PUSH
42306: LD_INT 3
42308: PUSH
42309: LD_INT 6
42311: PUSH
42312: LD_INT 36
42314: PUSH
42315: LD_INT 4
42317: PUSH
42318: LD_INT 5
42320: PUSH
42321: LD_INT 31
42323: PUSH
42324: LD_INT 32
42326: PUSH
42327: LD_INT 33
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: LIST
42336: LIST
42337: LIST
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: IN
42343: NOT
42344: PUSH
42345: LD_VAR 0 6
42349: PUSH
42350: LD_INT 1
42352: EQUAL
42353: AND
42354: OR
42355: PUSH
42356: LD_VAR 0 1
42360: PUSH
42361: LD_INT 2
42363: PUSH
42364: LD_INT 3
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: IN
42371: NOT
42372: PUSH
42373: LD_VAR 0 6
42377: PUSH
42378: LD_INT 2
42380: EQUAL
42381: AND
42382: OR
42383: IFFALSE 42393
// mode = 0 ;
42385: LD_ADDR_VAR 0 6
42389: PUSH
42390: LD_INT 0
42392: ST_TO_ADDR
// case mode of 0 :
42393: LD_VAR 0 6
42397: PUSH
42398: LD_INT 0
42400: DOUBLE
42401: EQUAL
42402: IFTRUE 42406
42404: GO 53859
42406: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42407: LD_ADDR_VAR 0 11
42411: PUSH
42412: LD_INT 0
42414: PUSH
42415: LD_INT 0
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 0
42424: PUSH
42425: LD_INT 1
42427: NEG
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: LD_INT 1
42435: PUSH
42436: LD_INT 0
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 1
42445: PUSH
42446: LD_INT 1
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: LD_INT 0
42455: PUSH
42456: LD_INT 1
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: PUSH
42463: LD_INT 1
42465: NEG
42466: PUSH
42467: LD_INT 0
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: PUSH
42474: LD_INT 1
42476: NEG
42477: PUSH
42478: LD_INT 1
42480: NEG
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: PUSH
42486: LD_INT 1
42488: NEG
42489: PUSH
42490: LD_INT 2
42492: NEG
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: PUSH
42498: LD_INT 0
42500: PUSH
42501: LD_INT 2
42503: NEG
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: PUSH
42509: LD_INT 1
42511: PUSH
42512: LD_INT 1
42514: NEG
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: PUSH
42520: LD_INT 1
42522: PUSH
42523: LD_INT 2
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 0
42532: PUSH
42533: LD_INT 2
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: PUSH
42540: LD_INT 1
42542: NEG
42543: PUSH
42544: LD_INT 1
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: PUSH
42551: LD_INT 1
42553: PUSH
42554: LD_INT 3
42556: PUSH
42557: EMPTY
42558: LIST
42559: LIST
42560: PUSH
42561: LD_INT 0
42563: PUSH
42564: LD_INT 3
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: PUSH
42571: LD_INT 1
42573: NEG
42574: PUSH
42575: LD_INT 2
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: PUSH
42582: EMPTY
42583: LIST
42584: LIST
42585: LIST
42586: LIST
42587: LIST
42588: LIST
42589: LIST
42590: LIST
42591: LIST
42592: LIST
42593: LIST
42594: LIST
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42600: LD_ADDR_VAR 0 12
42604: PUSH
42605: LD_INT 0
42607: PUSH
42608: LD_INT 0
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: PUSH
42615: LD_INT 0
42617: PUSH
42618: LD_INT 1
42620: NEG
42621: PUSH
42622: EMPTY
42623: LIST
42624: LIST
42625: PUSH
42626: LD_INT 1
42628: PUSH
42629: LD_INT 0
42631: PUSH
42632: EMPTY
42633: LIST
42634: LIST
42635: PUSH
42636: LD_INT 1
42638: PUSH
42639: LD_INT 1
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: PUSH
42646: LD_INT 0
42648: PUSH
42649: LD_INT 1
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: PUSH
42656: LD_INT 1
42658: NEG
42659: PUSH
42660: LD_INT 0
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: LD_INT 1
42669: NEG
42670: PUSH
42671: LD_INT 1
42673: NEG
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: PUSH
42679: LD_INT 1
42681: PUSH
42682: LD_INT 1
42684: NEG
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: LD_INT 2
42692: PUSH
42693: LD_INT 0
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: LD_INT 2
42702: PUSH
42703: LD_INT 1
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: PUSH
42710: LD_INT 1
42712: NEG
42713: PUSH
42714: LD_INT 1
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: PUSH
42721: LD_INT 2
42723: NEG
42724: PUSH
42725: LD_INT 0
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: PUSH
42732: LD_INT 2
42734: NEG
42735: PUSH
42736: LD_INT 1
42738: NEG
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: PUSH
42744: LD_INT 2
42746: NEG
42747: PUSH
42748: LD_INT 1
42750: PUSH
42751: EMPTY
42752: LIST
42753: LIST
42754: PUSH
42755: LD_INT 3
42757: NEG
42758: PUSH
42759: LD_INT 0
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: PUSH
42766: LD_INT 3
42768: NEG
42769: PUSH
42770: LD_INT 1
42772: NEG
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: LIST
42785: LIST
42786: LIST
42787: LIST
42788: LIST
42789: LIST
42790: LIST
42791: LIST
42792: LIST
42793: LIST
42794: LIST
42795: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42796: LD_ADDR_VAR 0 13
42800: PUSH
42801: LD_INT 0
42803: PUSH
42804: LD_INT 0
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: LD_INT 0
42813: PUSH
42814: LD_INT 1
42816: NEG
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: PUSH
42822: LD_INT 1
42824: PUSH
42825: LD_INT 0
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: PUSH
42832: LD_INT 1
42834: PUSH
42835: LD_INT 1
42837: PUSH
42838: EMPTY
42839: LIST
42840: LIST
42841: PUSH
42842: LD_INT 0
42844: PUSH
42845: LD_INT 1
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: PUSH
42852: LD_INT 1
42854: NEG
42855: PUSH
42856: LD_INT 0
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: PUSH
42863: LD_INT 1
42865: NEG
42866: PUSH
42867: LD_INT 1
42869: NEG
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: PUSH
42875: LD_INT 1
42877: NEG
42878: PUSH
42879: LD_INT 2
42881: NEG
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: PUSH
42887: LD_INT 2
42889: PUSH
42890: LD_INT 1
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: LD_INT 2
42899: PUSH
42900: LD_INT 2
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: PUSH
42907: LD_INT 1
42909: PUSH
42910: LD_INT 2
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: LD_INT 2
42919: NEG
42920: PUSH
42921: LD_INT 1
42923: NEG
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: LD_INT 2
42931: NEG
42932: PUSH
42933: LD_INT 2
42935: NEG
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PUSH
42941: LD_INT 2
42943: NEG
42944: PUSH
42945: LD_INT 3
42947: NEG
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PUSH
42953: LD_INT 3
42955: NEG
42956: PUSH
42957: LD_INT 2
42959: NEG
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: PUSH
42965: LD_INT 3
42967: NEG
42968: PUSH
42969: LD_INT 3
42971: NEG
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: LIST
42981: LIST
42982: LIST
42983: LIST
42984: LIST
42985: LIST
42986: LIST
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42995: LD_ADDR_VAR 0 14
42999: PUSH
43000: LD_INT 0
43002: PUSH
43003: LD_INT 0
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: LD_INT 0
43012: PUSH
43013: LD_INT 1
43015: NEG
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: PUSH
43021: LD_INT 1
43023: PUSH
43024: LD_INT 0
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PUSH
43031: LD_INT 1
43033: PUSH
43034: LD_INT 1
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: PUSH
43041: LD_INT 0
43043: PUSH
43044: LD_INT 1
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PUSH
43051: LD_INT 1
43053: NEG
43054: PUSH
43055: LD_INT 0
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: LD_INT 1
43064: NEG
43065: PUSH
43066: LD_INT 1
43068: NEG
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: PUSH
43074: LD_INT 1
43076: NEG
43077: PUSH
43078: LD_INT 2
43080: NEG
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: LD_INT 0
43088: PUSH
43089: LD_INT 2
43091: NEG
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: PUSH
43097: LD_INT 1
43099: PUSH
43100: LD_INT 1
43102: NEG
43103: PUSH
43104: EMPTY
43105: LIST
43106: LIST
43107: PUSH
43108: LD_INT 1
43110: PUSH
43111: LD_INT 2
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: LD_INT 0
43120: PUSH
43121: LD_INT 2
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: PUSH
43128: LD_INT 1
43130: NEG
43131: PUSH
43132: LD_INT 1
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: LD_INT 1
43141: NEG
43142: PUSH
43143: LD_INT 3
43145: NEG
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: PUSH
43151: LD_INT 0
43153: PUSH
43154: LD_INT 3
43156: NEG
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: PUSH
43162: LD_INT 1
43164: PUSH
43165: LD_INT 2
43167: NEG
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: LIST
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: LIST
43187: LIST
43188: LIST
43189: LIST
43190: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43191: LD_ADDR_VAR 0 15
43195: PUSH
43196: LD_INT 0
43198: PUSH
43199: LD_INT 0
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: PUSH
43206: LD_INT 0
43208: PUSH
43209: LD_INT 1
43211: NEG
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: LD_INT 1
43219: PUSH
43220: LD_INT 0
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: LD_INT 1
43229: PUSH
43230: LD_INT 1
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: PUSH
43237: LD_INT 0
43239: PUSH
43240: LD_INT 1
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: PUSH
43247: LD_INT 1
43249: NEG
43250: PUSH
43251: LD_INT 0
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 1
43260: NEG
43261: PUSH
43262: LD_INT 1
43264: NEG
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: PUSH
43270: LD_INT 1
43272: PUSH
43273: LD_INT 1
43275: NEG
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: LD_INT 2
43283: PUSH
43284: LD_INT 0
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: PUSH
43291: LD_INT 2
43293: PUSH
43294: LD_INT 1
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: PUSH
43301: LD_INT 1
43303: NEG
43304: PUSH
43305: LD_INT 1
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: PUSH
43312: LD_INT 2
43314: NEG
43315: PUSH
43316: LD_INT 0
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: LD_INT 2
43325: NEG
43326: PUSH
43327: LD_INT 1
43329: NEG
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: PUSH
43335: LD_INT 2
43337: PUSH
43338: LD_INT 1
43340: NEG
43341: PUSH
43342: EMPTY
43343: LIST
43344: LIST
43345: PUSH
43346: LD_INT 3
43348: PUSH
43349: LD_INT 0
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: LD_INT 3
43358: PUSH
43359: LD_INT 1
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: PUSH
43366: EMPTY
43367: LIST
43368: LIST
43369: LIST
43370: LIST
43371: LIST
43372: LIST
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: LIST
43380: LIST
43381: LIST
43382: LIST
43383: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43384: LD_ADDR_VAR 0 16
43388: PUSH
43389: LD_INT 0
43391: PUSH
43392: LD_INT 0
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PUSH
43399: LD_INT 0
43401: PUSH
43402: LD_INT 1
43404: NEG
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: PUSH
43410: LD_INT 1
43412: PUSH
43413: LD_INT 0
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: PUSH
43420: LD_INT 1
43422: PUSH
43423: LD_INT 1
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: PUSH
43430: LD_INT 0
43432: PUSH
43433: LD_INT 1
43435: PUSH
43436: EMPTY
43437: LIST
43438: LIST
43439: PUSH
43440: LD_INT 1
43442: NEG
43443: PUSH
43444: LD_INT 0
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: LD_INT 1
43453: NEG
43454: PUSH
43455: LD_INT 1
43457: NEG
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: PUSH
43463: LD_INT 1
43465: NEG
43466: PUSH
43467: LD_INT 2
43469: NEG
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: LD_INT 2
43477: PUSH
43478: LD_INT 1
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: LD_INT 2
43487: PUSH
43488: LD_INT 2
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: LD_INT 1
43497: PUSH
43498: LD_INT 2
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: LD_INT 2
43507: NEG
43508: PUSH
43509: LD_INT 1
43511: NEG
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 2
43519: NEG
43520: PUSH
43521: LD_INT 2
43523: NEG
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: PUSH
43529: LD_INT 3
43531: PUSH
43532: LD_INT 2
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: PUSH
43539: LD_INT 3
43541: PUSH
43542: LD_INT 3
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: PUSH
43549: LD_INT 2
43551: PUSH
43552: LD_INT 3
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: LIST
43573: LIST
43574: LIST
43575: LIST
43576: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43577: LD_ADDR_VAR 0 17
43581: PUSH
43582: LD_INT 0
43584: PUSH
43585: LD_INT 0
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: PUSH
43592: LD_INT 0
43594: PUSH
43595: LD_INT 1
43597: NEG
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: PUSH
43603: LD_INT 1
43605: PUSH
43606: LD_INT 0
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: PUSH
43613: LD_INT 1
43615: PUSH
43616: LD_INT 1
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: LD_INT 0
43625: PUSH
43626: LD_INT 1
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 1
43635: NEG
43636: PUSH
43637: LD_INT 0
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: PUSH
43644: LD_INT 1
43646: NEG
43647: PUSH
43648: LD_INT 1
43650: NEG
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: LD_INT 1
43658: NEG
43659: PUSH
43660: LD_INT 2
43662: NEG
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: PUSH
43668: LD_INT 0
43670: PUSH
43671: LD_INT 2
43673: NEG
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: PUSH
43679: LD_INT 1
43681: PUSH
43682: LD_INT 1
43684: NEG
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: LD_INT 2
43692: PUSH
43693: LD_INT 0
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: LD_INT 2
43702: PUSH
43703: LD_INT 1
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 2
43712: PUSH
43713: LD_INT 2
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 1
43722: PUSH
43723: LD_INT 2
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 0
43732: PUSH
43733: LD_INT 2
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PUSH
43740: LD_INT 1
43742: NEG
43743: PUSH
43744: LD_INT 1
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: LD_INT 2
43753: NEG
43754: PUSH
43755: LD_INT 0
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: LD_INT 2
43764: NEG
43765: PUSH
43766: LD_INT 1
43768: NEG
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 2
43776: NEG
43777: PUSH
43778: LD_INT 2
43780: NEG
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: LIST
43794: LIST
43795: LIST
43796: LIST
43797: LIST
43798: LIST
43799: LIST
43800: LIST
43801: LIST
43802: LIST
43803: LIST
43804: LIST
43805: LIST
43806: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43807: LD_ADDR_VAR 0 18
43811: PUSH
43812: LD_INT 0
43814: PUSH
43815: LD_INT 0
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: LD_INT 0
43824: PUSH
43825: LD_INT 1
43827: NEG
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: PUSH
43833: LD_INT 1
43835: PUSH
43836: LD_INT 0
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PUSH
43843: LD_INT 1
43845: PUSH
43846: LD_INT 1
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: PUSH
43853: LD_INT 0
43855: PUSH
43856: LD_INT 1
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: PUSH
43863: LD_INT 1
43865: NEG
43866: PUSH
43867: LD_INT 0
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 1
43876: NEG
43877: PUSH
43878: LD_INT 1
43880: NEG
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: PUSH
43886: LD_INT 1
43888: NEG
43889: PUSH
43890: LD_INT 2
43892: NEG
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: PUSH
43898: LD_INT 0
43900: PUSH
43901: LD_INT 2
43903: NEG
43904: PUSH
43905: EMPTY
43906: LIST
43907: LIST
43908: PUSH
43909: LD_INT 1
43911: PUSH
43912: LD_INT 1
43914: NEG
43915: PUSH
43916: EMPTY
43917: LIST
43918: LIST
43919: PUSH
43920: LD_INT 2
43922: PUSH
43923: LD_INT 0
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: PUSH
43930: LD_INT 2
43932: PUSH
43933: LD_INT 1
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: LD_INT 2
43942: PUSH
43943: LD_INT 2
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: LD_INT 1
43952: PUSH
43953: LD_INT 2
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: PUSH
43960: LD_INT 0
43962: PUSH
43963: LD_INT 2
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: PUSH
43970: LD_INT 1
43972: NEG
43973: PUSH
43974: LD_INT 1
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: PUSH
43981: LD_INT 2
43983: NEG
43984: PUSH
43985: LD_INT 0
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: LD_INT 2
43994: NEG
43995: PUSH
43996: LD_INT 1
43998: NEG
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 2
44006: NEG
44007: PUSH
44008: LD_INT 2
44010: NEG
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: LIST
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44037: LD_ADDR_VAR 0 19
44041: PUSH
44042: LD_INT 0
44044: PUSH
44045: LD_INT 0
44047: PUSH
44048: EMPTY
44049: LIST
44050: LIST
44051: PUSH
44052: LD_INT 0
44054: PUSH
44055: LD_INT 1
44057: NEG
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 1
44065: PUSH
44066: LD_INT 0
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: LD_INT 1
44075: PUSH
44076: LD_INT 1
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: PUSH
44083: LD_INT 0
44085: PUSH
44086: LD_INT 1
44088: PUSH
44089: EMPTY
44090: LIST
44091: LIST
44092: PUSH
44093: LD_INT 1
44095: NEG
44096: PUSH
44097: LD_INT 0
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: PUSH
44104: LD_INT 1
44106: NEG
44107: PUSH
44108: LD_INT 1
44110: NEG
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PUSH
44116: LD_INT 1
44118: NEG
44119: PUSH
44120: LD_INT 2
44122: NEG
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 0
44130: PUSH
44131: LD_INT 2
44133: NEG
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: LD_INT 1
44141: PUSH
44142: LD_INT 1
44144: NEG
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 2
44152: PUSH
44153: LD_INT 0
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 2
44162: PUSH
44163: LD_INT 1
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 2
44172: PUSH
44173: LD_INT 2
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 1
44182: PUSH
44183: LD_INT 2
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: PUSH
44190: LD_INT 0
44192: PUSH
44193: LD_INT 2
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_INT 1
44202: NEG
44203: PUSH
44204: LD_INT 1
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: LD_INT 2
44213: NEG
44214: PUSH
44215: LD_INT 0
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 2
44224: NEG
44225: PUSH
44226: LD_INT 1
44228: NEG
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 2
44236: NEG
44237: PUSH
44238: LD_INT 2
44240: NEG
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: LIST
44253: LIST
44254: LIST
44255: LIST
44256: LIST
44257: LIST
44258: LIST
44259: LIST
44260: LIST
44261: LIST
44262: LIST
44263: LIST
44264: LIST
44265: LIST
44266: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44267: LD_ADDR_VAR 0 20
44271: PUSH
44272: LD_INT 0
44274: PUSH
44275: LD_INT 0
44277: PUSH
44278: EMPTY
44279: LIST
44280: LIST
44281: PUSH
44282: LD_INT 0
44284: PUSH
44285: LD_INT 1
44287: NEG
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: LD_INT 1
44295: PUSH
44296: LD_INT 0
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 1
44305: PUSH
44306: LD_INT 1
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 0
44315: PUSH
44316: LD_INT 1
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PUSH
44323: LD_INT 1
44325: NEG
44326: PUSH
44327: LD_INT 0
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: PUSH
44334: LD_INT 1
44336: NEG
44337: PUSH
44338: LD_INT 1
44340: NEG
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 1
44348: NEG
44349: PUSH
44350: LD_INT 2
44352: NEG
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: LD_INT 0
44360: PUSH
44361: LD_INT 2
44363: NEG
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: PUSH
44369: LD_INT 1
44371: PUSH
44372: LD_INT 1
44374: NEG
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 2
44382: PUSH
44383: LD_INT 0
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: PUSH
44390: LD_INT 2
44392: PUSH
44393: LD_INT 1
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: LD_INT 2
44402: PUSH
44403: LD_INT 2
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 1
44412: PUSH
44413: LD_INT 2
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: LD_INT 0
44422: PUSH
44423: LD_INT 2
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: LD_INT 1
44432: NEG
44433: PUSH
44434: LD_INT 1
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: PUSH
44441: LD_INT 2
44443: NEG
44444: PUSH
44445: LD_INT 0
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: LD_INT 2
44454: NEG
44455: PUSH
44456: LD_INT 1
44458: NEG
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 2
44466: NEG
44467: PUSH
44468: LD_INT 2
44470: NEG
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44497: LD_ADDR_VAR 0 21
44501: PUSH
44502: LD_INT 0
44504: PUSH
44505: LD_INT 0
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 0
44514: PUSH
44515: LD_INT 1
44517: NEG
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: LD_INT 1
44525: PUSH
44526: LD_INT 0
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 1
44535: PUSH
44536: LD_INT 1
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 0
44545: PUSH
44546: LD_INT 1
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: LD_INT 1
44555: NEG
44556: PUSH
44557: LD_INT 0
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: LD_INT 1
44566: NEG
44567: PUSH
44568: LD_INT 1
44570: NEG
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 1
44578: NEG
44579: PUSH
44580: LD_INT 2
44582: NEG
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: LD_INT 0
44590: PUSH
44591: LD_INT 2
44593: NEG
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: LD_INT 1
44601: PUSH
44602: LD_INT 1
44604: NEG
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: LD_INT 2
44612: PUSH
44613: LD_INT 0
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: PUSH
44620: LD_INT 2
44622: PUSH
44623: LD_INT 1
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 2
44632: PUSH
44633: LD_INT 2
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: PUSH
44640: LD_INT 1
44642: PUSH
44643: LD_INT 2
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: PUSH
44650: LD_INT 0
44652: PUSH
44653: LD_INT 2
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: PUSH
44660: LD_INT 1
44662: NEG
44663: PUSH
44664: LD_INT 1
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: LD_INT 2
44673: NEG
44674: PUSH
44675: LD_INT 0
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: LD_INT 2
44684: NEG
44685: PUSH
44686: LD_INT 1
44688: NEG
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: LD_INT 2
44696: NEG
44697: PUSH
44698: LD_INT 2
44700: NEG
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: LIST
44717: LIST
44718: LIST
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: LIST
44725: LIST
44726: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44727: LD_ADDR_VAR 0 22
44731: PUSH
44732: LD_INT 0
44734: PUSH
44735: LD_INT 0
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: LD_INT 0
44744: PUSH
44745: LD_INT 1
44747: NEG
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 1
44755: PUSH
44756: LD_INT 0
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PUSH
44763: LD_INT 1
44765: PUSH
44766: LD_INT 1
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 0
44775: PUSH
44776: LD_INT 1
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: PUSH
44783: LD_INT 1
44785: NEG
44786: PUSH
44787: LD_INT 0
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: PUSH
44794: LD_INT 1
44796: NEG
44797: PUSH
44798: LD_INT 1
44800: NEG
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 1
44808: NEG
44809: PUSH
44810: LD_INT 2
44812: NEG
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PUSH
44818: LD_INT 0
44820: PUSH
44821: LD_INT 2
44823: NEG
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 1
44831: PUSH
44832: LD_INT 1
44834: NEG
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 2
44842: PUSH
44843: LD_INT 0
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: LD_INT 2
44852: PUSH
44853: LD_INT 1
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 2
44862: PUSH
44863: LD_INT 2
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 1
44872: PUSH
44873: LD_INT 2
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 0
44882: PUSH
44883: LD_INT 2
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 1
44892: NEG
44893: PUSH
44894: LD_INT 1
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: LD_INT 2
44903: NEG
44904: PUSH
44905: LD_INT 0
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 2
44914: NEG
44915: PUSH
44916: LD_INT 1
44918: NEG
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 2
44926: NEG
44927: PUSH
44928: LD_INT 2
44930: NEG
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: LIST
44940: LIST
44941: LIST
44942: LIST
44943: LIST
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: LIST
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44957: LD_ADDR_VAR 0 23
44961: PUSH
44962: LD_INT 0
44964: PUSH
44965: LD_INT 0
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: LD_INT 0
44974: PUSH
44975: LD_INT 1
44977: NEG
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 1
44985: PUSH
44986: LD_INT 0
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: LD_INT 1
44995: PUSH
44996: LD_INT 1
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PUSH
45003: LD_INT 0
45005: PUSH
45006: LD_INT 1
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 1
45015: NEG
45016: PUSH
45017: LD_INT 0
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: PUSH
45024: LD_INT 1
45026: NEG
45027: PUSH
45028: LD_INT 1
45030: NEG
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 1
45038: NEG
45039: PUSH
45040: LD_INT 2
45042: NEG
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: LD_INT 0
45050: PUSH
45051: LD_INT 2
45053: NEG
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 1
45061: PUSH
45062: LD_INT 1
45064: NEG
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 2
45072: PUSH
45073: LD_INT 0
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: LD_INT 2
45082: PUSH
45083: LD_INT 1
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: LD_INT 2
45092: PUSH
45093: LD_INT 2
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 1
45102: PUSH
45103: LD_INT 2
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: PUSH
45110: LD_INT 0
45112: PUSH
45113: LD_INT 2
45115: PUSH
45116: EMPTY
45117: LIST
45118: LIST
45119: PUSH
45120: LD_INT 1
45122: NEG
45123: PUSH
45124: LD_INT 1
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 2
45133: NEG
45134: PUSH
45135: LD_INT 0
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 2
45144: NEG
45145: PUSH
45146: LD_INT 1
45148: NEG
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 2
45156: NEG
45157: PUSH
45158: LD_INT 2
45160: NEG
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 2
45168: NEG
45169: PUSH
45170: LD_INT 3
45172: NEG
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: LD_INT 1
45180: NEG
45181: PUSH
45182: LD_INT 3
45184: NEG
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: LD_INT 1
45192: PUSH
45193: LD_INT 2
45195: NEG
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: LD_INT 2
45203: PUSH
45204: LD_INT 1
45206: NEG
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45237: LD_ADDR_VAR 0 24
45241: PUSH
45242: LD_INT 0
45244: PUSH
45245: LD_INT 0
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: PUSH
45252: LD_INT 0
45254: PUSH
45255: LD_INT 1
45257: NEG
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 1
45265: PUSH
45266: LD_INT 0
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 1
45275: PUSH
45276: LD_INT 1
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: LD_INT 0
45285: PUSH
45286: LD_INT 1
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 1
45295: NEG
45296: PUSH
45297: LD_INT 0
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: LD_INT 1
45306: NEG
45307: PUSH
45308: LD_INT 1
45310: NEG
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_INT 1
45318: NEG
45319: PUSH
45320: LD_INT 2
45322: NEG
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 0
45330: PUSH
45331: LD_INT 2
45333: NEG
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 1
45341: PUSH
45342: LD_INT 1
45344: NEG
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: PUSH
45350: LD_INT 2
45352: PUSH
45353: LD_INT 0
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 2
45362: PUSH
45363: LD_INT 1
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_INT 2
45372: PUSH
45373: LD_INT 2
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 1
45382: PUSH
45383: LD_INT 2
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 0
45392: PUSH
45393: LD_INT 2
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 1
45402: NEG
45403: PUSH
45404: LD_INT 1
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 2
45413: NEG
45414: PUSH
45415: LD_INT 0
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 2
45424: NEG
45425: PUSH
45426: LD_INT 1
45428: NEG
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: PUSH
45434: LD_INT 2
45436: NEG
45437: PUSH
45438: LD_INT 2
45440: NEG
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: PUSH
45446: LD_INT 1
45448: PUSH
45449: LD_INT 2
45451: NEG
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 2
45459: PUSH
45460: LD_INT 1
45462: NEG
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 3
45470: PUSH
45471: LD_INT 1
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 3
45480: PUSH
45481: LD_INT 2
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
45513: LD_ADDR_VAR 0 25
45517: PUSH
45518: LD_INT 0
45520: PUSH
45521: LD_INT 0
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 0
45530: PUSH
45531: LD_INT 1
45533: NEG
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 1
45541: PUSH
45542: LD_INT 0
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 1
45551: PUSH
45552: LD_INT 1
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 0
45561: PUSH
45562: LD_INT 1
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 1
45571: NEG
45572: PUSH
45573: LD_INT 0
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 1
45582: NEG
45583: PUSH
45584: LD_INT 1
45586: NEG
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 1
45594: NEG
45595: PUSH
45596: LD_INT 2
45598: NEG
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 0
45606: PUSH
45607: LD_INT 2
45609: NEG
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: PUSH
45615: LD_INT 1
45617: PUSH
45618: LD_INT 1
45620: NEG
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 2
45628: PUSH
45629: LD_INT 0
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 2
45638: PUSH
45639: LD_INT 1
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 2
45648: PUSH
45649: LD_INT 2
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 1
45658: PUSH
45659: LD_INT 2
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 0
45668: PUSH
45669: LD_INT 2
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 1
45678: NEG
45679: PUSH
45680: LD_INT 1
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: LD_INT 2
45689: NEG
45690: PUSH
45691: LD_INT 0
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 2
45700: NEG
45701: PUSH
45702: LD_INT 1
45704: NEG
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 2
45712: NEG
45713: PUSH
45714: LD_INT 2
45716: NEG
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: LD_INT 3
45724: PUSH
45725: LD_INT 1
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 3
45734: PUSH
45735: LD_INT 2
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: LD_INT 2
45744: PUSH
45745: LD_INT 3
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 1
45754: PUSH
45755: LD_INT 3
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: LIST
45779: LIST
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: LIST
45786: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45787: LD_ADDR_VAR 0 26
45791: PUSH
45792: LD_INT 0
45794: PUSH
45795: LD_INT 0
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 0
45804: PUSH
45805: LD_INT 1
45807: NEG
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: LD_INT 1
45815: PUSH
45816: LD_INT 0
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: LD_INT 1
45825: PUSH
45826: LD_INT 1
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 0
45835: PUSH
45836: LD_INT 1
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 1
45845: NEG
45846: PUSH
45847: LD_INT 0
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 1
45856: NEG
45857: PUSH
45858: LD_INT 1
45860: NEG
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 1
45868: NEG
45869: PUSH
45870: LD_INT 2
45872: NEG
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: PUSH
45878: LD_INT 0
45880: PUSH
45881: LD_INT 2
45883: NEG
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 1
45891: PUSH
45892: LD_INT 1
45894: NEG
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 2
45902: PUSH
45903: LD_INT 0
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 2
45912: PUSH
45913: LD_INT 1
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 2
45922: PUSH
45923: LD_INT 2
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 1
45932: PUSH
45933: LD_INT 2
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 0
45942: PUSH
45943: LD_INT 2
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 1
45952: NEG
45953: PUSH
45954: LD_INT 1
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 2
45963: NEG
45964: PUSH
45965: LD_INT 0
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 2
45974: NEG
45975: PUSH
45976: LD_INT 1
45978: NEG
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 2
45986: NEG
45987: PUSH
45988: LD_INT 2
45990: NEG
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 2
45998: PUSH
45999: LD_INT 3
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 1
46008: PUSH
46009: LD_INT 3
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 1
46018: NEG
46019: PUSH
46020: LD_INT 2
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 2
46029: NEG
46030: PUSH
46031: LD_INT 1
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: LIST
46058: LIST
46059: LIST
46060: LIST
46061: LIST
46062: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46063: LD_ADDR_VAR 0 27
46067: PUSH
46068: LD_INT 0
46070: PUSH
46071: LD_INT 0
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: LD_INT 0
46080: PUSH
46081: LD_INT 1
46083: NEG
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 1
46091: PUSH
46092: LD_INT 0
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: LD_INT 1
46101: PUSH
46102: LD_INT 1
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: LD_INT 0
46111: PUSH
46112: LD_INT 1
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 1
46121: NEG
46122: PUSH
46123: LD_INT 0
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 1
46132: NEG
46133: PUSH
46134: LD_INT 1
46136: NEG
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 1
46144: NEG
46145: PUSH
46146: LD_INT 2
46148: NEG
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: PUSH
46154: LD_INT 0
46156: PUSH
46157: LD_INT 2
46159: NEG
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: PUSH
46165: LD_INT 1
46167: PUSH
46168: LD_INT 1
46170: NEG
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 2
46178: PUSH
46179: LD_INT 0
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 2
46188: PUSH
46189: LD_INT 1
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: LD_INT 2
46198: PUSH
46199: LD_INT 2
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: LD_INT 1
46208: PUSH
46209: LD_INT 2
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: PUSH
46216: LD_INT 0
46218: PUSH
46219: LD_INT 2
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 1
46228: NEG
46229: PUSH
46230: LD_INT 1
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 2
46239: NEG
46240: PUSH
46241: LD_INT 0
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 2
46250: NEG
46251: PUSH
46252: LD_INT 1
46254: NEG
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 2
46262: NEG
46263: PUSH
46264: LD_INT 2
46266: NEG
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 1
46274: NEG
46275: PUSH
46276: LD_INT 2
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 2
46285: NEG
46286: PUSH
46287: LD_INT 1
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 3
46296: NEG
46297: PUSH
46298: LD_INT 1
46300: NEG
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 3
46308: NEG
46309: PUSH
46310: LD_INT 2
46312: NEG
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46343: LD_ADDR_VAR 0 28
46347: PUSH
46348: LD_INT 0
46350: PUSH
46351: LD_INT 0
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 0
46360: PUSH
46361: LD_INT 1
46363: NEG
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 1
46371: PUSH
46372: LD_INT 0
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 1
46381: PUSH
46382: LD_INT 1
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 0
46391: PUSH
46392: LD_INT 1
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 1
46401: NEG
46402: PUSH
46403: LD_INT 0
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 1
46412: NEG
46413: PUSH
46414: LD_INT 1
46416: NEG
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 1
46424: NEG
46425: PUSH
46426: LD_INT 2
46428: NEG
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 0
46436: PUSH
46437: LD_INT 2
46439: NEG
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 1
46447: PUSH
46448: LD_INT 1
46450: NEG
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 2
46458: PUSH
46459: LD_INT 0
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: PUSH
46466: LD_INT 2
46468: PUSH
46469: LD_INT 1
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 2
46478: PUSH
46479: LD_INT 2
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 1
46488: PUSH
46489: LD_INT 2
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: PUSH
46496: LD_INT 0
46498: PUSH
46499: LD_INT 2
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 1
46508: NEG
46509: PUSH
46510: LD_INT 1
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 2
46519: NEG
46520: PUSH
46521: LD_INT 0
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 2
46530: NEG
46531: PUSH
46532: LD_INT 1
46534: NEG
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 2
46542: NEG
46543: PUSH
46544: LD_INT 2
46546: NEG
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 2
46554: NEG
46555: PUSH
46556: LD_INT 3
46558: NEG
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 1
46566: NEG
46567: PUSH
46568: LD_INT 3
46570: NEG
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 3
46578: NEG
46579: PUSH
46580: LD_INT 1
46582: NEG
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 3
46590: NEG
46591: PUSH
46592: LD_INT 2
46594: NEG
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46625: LD_ADDR_VAR 0 29
46629: PUSH
46630: LD_INT 0
46632: PUSH
46633: LD_INT 0
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 0
46642: PUSH
46643: LD_INT 1
46645: NEG
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 1
46653: PUSH
46654: LD_INT 0
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 1
46663: PUSH
46664: LD_INT 1
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 0
46673: PUSH
46674: LD_INT 1
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: PUSH
46681: LD_INT 1
46683: NEG
46684: PUSH
46685: LD_INT 0
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: LD_INT 1
46694: NEG
46695: PUSH
46696: LD_INT 1
46698: NEG
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 1
46706: NEG
46707: PUSH
46708: LD_INT 2
46710: NEG
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 0
46718: PUSH
46719: LD_INT 2
46721: NEG
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: LD_INT 1
46729: PUSH
46730: LD_INT 1
46732: NEG
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 2
46740: PUSH
46741: LD_INT 0
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 2
46750: PUSH
46751: LD_INT 1
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 1
46760: PUSH
46761: LD_INT 2
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 0
46770: PUSH
46771: LD_INT 2
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: LD_INT 1
46780: NEG
46781: PUSH
46782: LD_INT 1
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PUSH
46789: LD_INT 2
46791: NEG
46792: PUSH
46793: LD_INT 1
46795: NEG
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 2
46803: NEG
46804: PUSH
46805: LD_INT 2
46807: NEG
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 2
46815: NEG
46816: PUSH
46817: LD_INT 3
46819: NEG
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: LD_INT 2
46827: PUSH
46828: LD_INT 1
46830: NEG
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 3
46838: PUSH
46839: LD_INT 1
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 1
46848: PUSH
46849: LD_INT 3
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 1
46858: NEG
46859: PUSH
46860: LD_INT 2
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 3
46869: NEG
46870: PUSH
46871: LD_INT 2
46873: NEG
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46904: LD_ADDR_VAR 0 30
46908: PUSH
46909: LD_INT 0
46911: PUSH
46912: LD_INT 0
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 0
46921: PUSH
46922: LD_INT 1
46924: NEG
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 1
46932: PUSH
46933: LD_INT 0
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 1
46942: PUSH
46943: LD_INT 1
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 0
46952: PUSH
46953: LD_INT 1
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PUSH
46960: LD_INT 1
46962: NEG
46963: PUSH
46964: LD_INT 0
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 1
46973: NEG
46974: PUSH
46975: LD_INT 1
46977: NEG
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 1
46985: NEG
46986: PUSH
46987: LD_INT 2
46989: NEG
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 0
46997: PUSH
46998: LD_INT 2
47000: NEG
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 1
47008: PUSH
47009: LD_INT 1
47011: NEG
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 2
47019: PUSH
47020: LD_INT 0
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 2
47029: PUSH
47030: LD_INT 1
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 2
47039: PUSH
47040: LD_INT 2
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 1
47049: PUSH
47050: LD_INT 2
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 1
47059: NEG
47060: PUSH
47061: LD_INT 1
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 2
47070: NEG
47071: PUSH
47072: LD_INT 0
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 2
47081: NEG
47082: PUSH
47083: LD_INT 1
47085: NEG
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 1
47093: NEG
47094: PUSH
47095: LD_INT 3
47097: NEG
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 1
47105: PUSH
47106: LD_INT 2
47108: NEG
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 3
47116: PUSH
47117: LD_INT 2
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 2
47126: PUSH
47127: LD_INT 3
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 2
47136: NEG
47137: PUSH
47138: LD_INT 1
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 3
47147: NEG
47148: PUSH
47149: LD_INT 1
47151: NEG
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47182: LD_ADDR_VAR 0 31
47186: PUSH
47187: LD_INT 0
47189: PUSH
47190: LD_INT 0
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 0
47199: PUSH
47200: LD_INT 1
47202: NEG
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 1
47210: PUSH
47211: LD_INT 0
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 1
47220: PUSH
47221: LD_INT 1
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 0
47230: PUSH
47231: LD_INT 1
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 1
47240: NEG
47241: PUSH
47242: LD_INT 0
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: LD_INT 1
47251: NEG
47252: PUSH
47253: LD_INT 1
47255: NEG
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 1
47263: NEG
47264: PUSH
47265: LD_INT 2
47267: NEG
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 1
47275: PUSH
47276: LD_INT 1
47278: NEG
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 2
47286: PUSH
47287: LD_INT 0
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 2
47296: PUSH
47297: LD_INT 1
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 2
47306: PUSH
47307: LD_INT 2
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 1
47316: PUSH
47317: LD_INT 2
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 0
47326: PUSH
47327: LD_INT 2
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 1
47336: NEG
47337: PUSH
47338: LD_INT 1
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 2
47347: NEG
47348: PUSH
47349: LD_INT 1
47351: NEG
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 2
47359: NEG
47360: PUSH
47361: LD_INT 2
47363: NEG
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 2
47371: NEG
47372: PUSH
47373: LD_INT 3
47375: NEG
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 2
47383: PUSH
47384: LD_INT 1
47386: NEG
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 3
47394: PUSH
47395: LD_INT 1
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 1
47404: PUSH
47405: LD_INT 3
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 1
47414: NEG
47415: PUSH
47416: LD_INT 2
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 3
47425: NEG
47426: PUSH
47427: LD_INT 2
47429: NEG
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47460: LD_ADDR_VAR 0 32
47464: PUSH
47465: LD_INT 0
47467: PUSH
47468: LD_INT 0
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 0
47477: PUSH
47478: LD_INT 1
47480: NEG
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 1
47488: PUSH
47489: LD_INT 0
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 1
47498: PUSH
47499: LD_INT 1
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 0
47508: PUSH
47509: LD_INT 1
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 1
47518: NEG
47519: PUSH
47520: LD_INT 0
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 1
47529: NEG
47530: PUSH
47531: LD_INT 1
47533: NEG
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 1
47541: NEG
47542: PUSH
47543: LD_INT 2
47545: NEG
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 0
47553: PUSH
47554: LD_INT 2
47556: NEG
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 1
47564: PUSH
47565: LD_INT 1
47567: NEG
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 2
47575: PUSH
47576: LD_INT 1
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 2
47585: PUSH
47586: LD_INT 2
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 1
47595: PUSH
47596: LD_INT 2
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 0
47605: PUSH
47606: LD_INT 2
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 1
47615: NEG
47616: PUSH
47617: LD_INT 1
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 2
47626: NEG
47627: PUSH
47628: LD_INT 0
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 2
47637: NEG
47638: PUSH
47639: LD_INT 1
47641: NEG
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 1
47649: NEG
47650: PUSH
47651: LD_INT 3
47653: NEG
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 1
47661: PUSH
47662: LD_INT 2
47664: NEG
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 3
47672: PUSH
47673: LD_INT 2
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 2
47682: PUSH
47683: LD_INT 3
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 2
47692: NEG
47693: PUSH
47694: LD_INT 1
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 3
47703: NEG
47704: PUSH
47705: LD_INT 1
47707: NEG
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47738: LD_ADDR_VAR 0 33
47742: PUSH
47743: LD_INT 0
47745: PUSH
47746: LD_INT 0
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: LD_INT 0
47755: PUSH
47756: LD_INT 1
47758: NEG
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 1
47766: PUSH
47767: LD_INT 0
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 1
47776: PUSH
47777: LD_INT 1
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PUSH
47784: LD_INT 0
47786: PUSH
47787: LD_INT 1
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 1
47796: NEG
47797: PUSH
47798: LD_INT 0
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: LD_INT 1
47807: NEG
47808: PUSH
47809: LD_INT 1
47811: NEG
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 1
47819: NEG
47820: PUSH
47821: LD_INT 2
47823: NEG
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 1
47831: PUSH
47832: LD_INT 1
47834: NEG
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 2
47842: PUSH
47843: LD_INT 0
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 2
47852: PUSH
47853: LD_INT 1
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 1
47862: PUSH
47863: LD_INT 2
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 0
47872: PUSH
47873: LD_INT 2
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 1
47882: NEG
47883: PUSH
47884: LD_INT 1
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 2
47893: NEG
47894: PUSH
47895: LD_INT 0
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 2
47904: NEG
47905: PUSH
47906: LD_INT 1
47908: NEG
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 2
47916: NEG
47917: PUSH
47918: LD_INT 2
47920: NEG
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 2
47928: NEG
47929: PUSH
47930: LD_INT 3
47932: NEG
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 2
47940: PUSH
47941: LD_INT 1
47943: NEG
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: LD_INT 3
47951: PUSH
47952: LD_INT 1
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 1
47961: PUSH
47962: LD_INT 3
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 1
47971: NEG
47972: PUSH
47973: LD_INT 2
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: LD_INT 3
47982: NEG
47983: PUSH
47984: LD_INT 2
47986: NEG
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48017: LD_ADDR_VAR 0 34
48021: PUSH
48022: LD_INT 0
48024: PUSH
48025: LD_INT 0
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 0
48034: PUSH
48035: LD_INT 1
48037: NEG
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 1
48045: PUSH
48046: LD_INT 0
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 1
48055: PUSH
48056: LD_INT 1
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 0
48065: PUSH
48066: LD_INT 1
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 1
48075: NEG
48076: PUSH
48077: LD_INT 0
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 1
48086: NEG
48087: PUSH
48088: LD_INT 1
48090: NEG
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 1
48098: NEG
48099: PUSH
48100: LD_INT 2
48102: NEG
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 0
48110: PUSH
48111: LD_INT 2
48113: NEG
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 1
48121: PUSH
48122: LD_INT 1
48124: NEG
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 2
48132: PUSH
48133: LD_INT 1
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 2
48142: PUSH
48143: LD_INT 2
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 1
48152: PUSH
48153: LD_INT 2
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 1
48162: NEG
48163: PUSH
48164: LD_INT 1
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 2
48173: NEG
48174: PUSH
48175: LD_INT 0
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 2
48184: NEG
48185: PUSH
48186: LD_INT 1
48188: NEG
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 2
48196: NEG
48197: PUSH
48198: LD_INT 2
48200: NEG
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 1
48208: NEG
48209: PUSH
48210: LD_INT 3
48212: NEG
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 1
48220: PUSH
48221: LD_INT 2
48223: NEG
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 3
48231: PUSH
48232: LD_INT 2
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 2
48241: PUSH
48242: LD_INT 3
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 2
48251: NEG
48252: PUSH
48253: LD_INT 1
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 3
48262: NEG
48263: PUSH
48264: LD_INT 1
48266: NEG
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: LIST
48276: LIST
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48297: LD_ADDR_VAR 0 35
48301: PUSH
48302: LD_INT 0
48304: PUSH
48305: LD_INT 0
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 0
48314: PUSH
48315: LD_INT 1
48317: NEG
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 1
48325: PUSH
48326: LD_INT 0
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 1
48335: PUSH
48336: LD_INT 1
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 0
48345: PUSH
48346: LD_INT 1
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 1
48355: NEG
48356: PUSH
48357: LD_INT 0
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 1
48366: NEG
48367: PUSH
48368: LD_INT 1
48370: NEG
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: LD_INT 2
48378: PUSH
48379: LD_INT 1
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 2
48388: NEG
48389: PUSH
48390: LD_INT 1
48392: NEG
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48409: LD_ADDR_VAR 0 36
48413: PUSH
48414: LD_INT 0
48416: PUSH
48417: LD_INT 0
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 0
48426: PUSH
48427: LD_INT 1
48429: NEG
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 1
48437: PUSH
48438: LD_INT 0
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 1
48447: PUSH
48448: LD_INT 1
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 0
48457: PUSH
48458: LD_INT 1
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 1
48467: NEG
48468: PUSH
48469: LD_INT 0
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 1
48478: NEG
48479: PUSH
48480: LD_INT 1
48482: NEG
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 1
48490: NEG
48491: PUSH
48492: LD_INT 2
48494: NEG
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 1
48502: PUSH
48503: LD_INT 2
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48521: LD_ADDR_VAR 0 37
48525: PUSH
48526: LD_INT 0
48528: PUSH
48529: LD_INT 0
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PUSH
48536: LD_INT 0
48538: PUSH
48539: LD_INT 1
48541: NEG
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: LD_INT 1
48549: PUSH
48550: LD_INT 0
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 1
48559: PUSH
48560: LD_INT 1
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: PUSH
48567: LD_INT 0
48569: PUSH
48570: LD_INT 1
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PUSH
48577: LD_INT 1
48579: NEG
48580: PUSH
48581: LD_INT 0
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 1
48590: NEG
48591: PUSH
48592: LD_INT 1
48594: NEG
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 1
48602: PUSH
48603: LD_INT 1
48605: NEG
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 1
48613: NEG
48614: PUSH
48615: LD_INT 1
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: LIST
48626: LIST
48627: LIST
48628: LIST
48629: LIST
48630: LIST
48631: LIST
48632: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48633: LD_ADDR_VAR 0 38
48637: PUSH
48638: LD_INT 0
48640: PUSH
48641: LD_INT 0
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 0
48650: PUSH
48651: LD_INT 1
48653: NEG
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 1
48661: PUSH
48662: LD_INT 0
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 1
48671: PUSH
48672: LD_INT 1
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 0
48681: PUSH
48682: LD_INT 1
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 1
48691: NEG
48692: PUSH
48693: LD_INT 0
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 1
48702: NEG
48703: PUSH
48704: LD_INT 1
48706: NEG
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 2
48714: PUSH
48715: LD_INT 1
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 2
48724: NEG
48725: PUSH
48726: LD_INT 1
48728: NEG
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: LIST
48738: LIST
48739: LIST
48740: LIST
48741: LIST
48742: LIST
48743: LIST
48744: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48745: LD_ADDR_VAR 0 39
48749: PUSH
48750: LD_INT 0
48752: PUSH
48753: LD_INT 0
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 0
48762: PUSH
48763: LD_INT 1
48765: NEG
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 1
48773: PUSH
48774: LD_INT 0
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 1
48783: PUSH
48784: LD_INT 1
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 0
48793: PUSH
48794: LD_INT 1
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: LD_INT 1
48803: NEG
48804: PUSH
48805: LD_INT 0
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 1
48814: NEG
48815: PUSH
48816: LD_INT 1
48818: NEG
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PUSH
48824: LD_INT 1
48826: NEG
48827: PUSH
48828: LD_INT 2
48830: NEG
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: LD_INT 1
48838: PUSH
48839: LD_INT 2
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48857: LD_ADDR_VAR 0 40
48861: PUSH
48862: LD_INT 0
48864: PUSH
48865: LD_INT 0
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 0
48874: PUSH
48875: LD_INT 1
48877: NEG
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 1
48885: PUSH
48886: LD_INT 0
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 1
48895: PUSH
48896: LD_INT 1
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: LD_INT 0
48905: PUSH
48906: LD_INT 1
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 1
48915: NEG
48916: PUSH
48917: LD_INT 0
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 1
48926: NEG
48927: PUSH
48928: LD_INT 1
48930: NEG
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 1
48938: PUSH
48939: LD_INT 1
48941: NEG
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 1
48949: NEG
48950: PUSH
48951: LD_INT 1
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48969: LD_ADDR_VAR 0 41
48973: PUSH
48974: LD_INT 0
48976: PUSH
48977: LD_INT 0
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 0
48986: PUSH
48987: LD_INT 1
48989: NEG
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 1
48997: PUSH
48998: LD_INT 0
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 1
49007: PUSH
49008: LD_INT 1
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 0
49017: PUSH
49018: LD_INT 1
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 1
49027: NEG
49028: PUSH
49029: LD_INT 0
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 1
49038: NEG
49039: PUSH
49040: LD_INT 1
49042: NEG
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 1
49050: NEG
49051: PUSH
49052: LD_INT 2
49054: NEG
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 1
49062: PUSH
49063: LD_INT 1
49065: NEG
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 2
49073: PUSH
49074: LD_INT 0
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 2
49083: PUSH
49084: LD_INT 1
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 2
49093: PUSH
49094: LD_INT 2
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: LD_INT 1
49103: PUSH
49104: LD_INT 2
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 1
49113: NEG
49114: PUSH
49115: LD_INT 1
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 2
49124: NEG
49125: PUSH
49126: LD_INT 0
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 2
49135: NEG
49136: PUSH
49137: LD_INT 1
49139: NEG
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 2
49147: NEG
49148: PUSH
49149: LD_INT 2
49151: NEG
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 2
49159: NEG
49160: PUSH
49161: LD_INT 3
49163: NEG
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: LD_INT 2
49171: PUSH
49172: LD_INT 1
49174: NEG
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: PUSH
49180: LD_INT 3
49182: PUSH
49183: LD_INT 0
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: LD_INT 3
49192: PUSH
49193: LD_INT 1
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 3
49202: PUSH
49203: LD_INT 2
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 3
49212: PUSH
49213: LD_INT 3
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 2
49222: PUSH
49223: LD_INT 3
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 2
49232: NEG
49233: PUSH
49234: LD_INT 1
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 3
49243: NEG
49244: PUSH
49245: LD_INT 0
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 3
49254: NEG
49255: PUSH
49256: LD_INT 1
49258: NEG
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 3
49266: NEG
49267: PUSH
49268: LD_INT 2
49270: NEG
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_INT 3
49278: NEG
49279: PUSH
49280: LD_INT 3
49282: NEG
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49319: LD_ADDR_VAR 0 42
49323: PUSH
49324: LD_INT 0
49326: PUSH
49327: LD_INT 0
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 0
49336: PUSH
49337: LD_INT 1
49339: NEG
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 1
49347: PUSH
49348: LD_INT 0
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 1
49357: PUSH
49358: LD_INT 1
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 0
49367: PUSH
49368: LD_INT 1
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 1
49377: NEG
49378: PUSH
49379: LD_INT 0
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 1
49388: NEG
49389: PUSH
49390: LD_INT 1
49392: NEG
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 1
49400: NEG
49401: PUSH
49402: LD_INT 2
49404: NEG
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 0
49412: PUSH
49413: LD_INT 2
49415: NEG
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: LD_INT 1
49423: PUSH
49424: LD_INT 1
49426: NEG
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 2
49434: PUSH
49435: LD_INT 1
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 2
49444: PUSH
49445: LD_INT 2
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 1
49454: PUSH
49455: LD_INT 2
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 0
49464: PUSH
49465: LD_INT 2
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 1
49474: NEG
49475: PUSH
49476: LD_INT 1
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: PUSH
49483: LD_INT 2
49485: NEG
49486: PUSH
49487: LD_INT 1
49489: NEG
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 2
49497: NEG
49498: PUSH
49499: LD_INT 2
49501: NEG
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 2
49509: NEG
49510: PUSH
49511: LD_INT 3
49513: NEG
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 1
49521: NEG
49522: PUSH
49523: LD_INT 3
49525: NEG
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 0
49533: PUSH
49534: LD_INT 3
49536: NEG
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 1
49544: PUSH
49545: LD_INT 2
49547: NEG
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 3
49555: PUSH
49556: LD_INT 2
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 3
49565: PUSH
49566: LD_INT 3
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 2
49575: PUSH
49576: LD_INT 3
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 1
49585: PUSH
49586: LD_INT 3
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 0
49595: PUSH
49596: LD_INT 3
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 1
49605: NEG
49606: PUSH
49607: LD_INT 2
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 3
49616: NEG
49617: PUSH
49618: LD_INT 2
49620: NEG
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: LD_INT 3
49628: NEG
49629: PUSH
49630: LD_INT 3
49632: NEG
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49669: LD_ADDR_VAR 0 43
49673: PUSH
49674: LD_INT 0
49676: PUSH
49677: LD_INT 0
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 0
49686: PUSH
49687: LD_INT 1
49689: NEG
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 1
49697: PUSH
49698: LD_INT 0
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: PUSH
49705: LD_INT 1
49707: PUSH
49708: LD_INT 1
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 0
49717: PUSH
49718: LD_INT 1
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 1
49727: NEG
49728: PUSH
49729: LD_INT 0
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 1
49738: NEG
49739: PUSH
49740: LD_INT 1
49742: NEG
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 1
49750: NEG
49751: PUSH
49752: LD_INT 2
49754: NEG
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PUSH
49760: LD_INT 0
49762: PUSH
49763: LD_INT 2
49765: NEG
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 1
49773: PUSH
49774: LD_INT 1
49776: NEG
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 2
49784: PUSH
49785: LD_INT 0
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 2
49794: PUSH
49795: LD_INT 1
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 1
49804: PUSH
49805: LD_INT 2
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 0
49814: PUSH
49815: LD_INT 2
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 1
49824: NEG
49825: PUSH
49826: LD_INT 1
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 2
49835: NEG
49836: PUSH
49837: LD_INT 0
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: LD_INT 2
49846: NEG
49847: PUSH
49848: LD_INT 1
49850: NEG
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: LD_INT 1
49858: NEG
49859: PUSH
49860: LD_INT 3
49862: NEG
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 0
49870: PUSH
49871: LD_INT 3
49873: NEG
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 1
49881: PUSH
49882: LD_INT 2
49884: NEG
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 2
49892: PUSH
49893: LD_INT 1
49895: NEG
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 3
49903: PUSH
49904: LD_INT 0
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 3
49913: PUSH
49914: LD_INT 1
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 1
49923: PUSH
49924: LD_INT 3
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 0
49933: PUSH
49934: LD_INT 3
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: LD_INT 1
49943: NEG
49944: PUSH
49945: LD_INT 2
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 2
49954: NEG
49955: PUSH
49956: LD_INT 1
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 3
49965: NEG
49966: PUSH
49967: LD_INT 0
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 3
49976: NEG
49977: PUSH
49978: LD_INT 1
49980: NEG
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: LIST
50015: LIST
50016: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50017: LD_ADDR_VAR 0 44
50021: PUSH
50022: LD_INT 0
50024: PUSH
50025: LD_INT 0
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 0
50034: PUSH
50035: LD_INT 1
50037: NEG
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 1
50045: PUSH
50046: LD_INT 0
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 1
50055: PUSH
50056: LD_INT 1
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 0
50065: PUSH
50066: LD_INT 1
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 1
50075: NEG
50076: PUSH
50077: LD_INT 0
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 1
50086: NEG
50087: PUSH
50088: LD_INT 1
50090: NEG
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: LD_INT 1
50098: NEG
50099: PUSH
50100: LD_INT 2
50102: NEG
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 1
50110: PUSH
50111: LD_INT 1
50113: NEG
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 2
50121: PUSH
50122: LD_INT 0
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 2
50131: PUSH
50132: LD_INT 1
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 2
50141: PUSH
50142: LD_INT 2
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 1
50151: PUSH
50152: LD_INT 2
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 1
50161: NEG
50162: PUSH
50163: LD_INT 1
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 2
50172: NEG
50173: PUSH
50174: LD_INT 0
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 2
50183: NEG
50184: PUSH
50185: LD_INT 1
50187: NEG
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 2
50195: NEG
50196: PUSH
50197: LD_INT 2
50199: NEG
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 2
50207: NEG
50208: PUSH
50209: LD_INT 3
50211: NEG
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 2
50219: PUSH
50220: LD_INT 1
50222: NEG
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: PUSH
50228: LD_INT 3
50230: PUSH
50231: LD_INT 0
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: PUSH
50238: LD_INT 3
50240: PUSH
50241: LD_INT 1
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 3
50250: PUSH
50251: LD_INT 2
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 3
50260: PUSH
50261: LD_INT 3
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: PUSH
50268: LD_INT 2
50270: PUSH
50271: LD_INT 3
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 2
50280: NEG
50281: PUSH
50282: LD_INT 1
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 3
50291: NEG
50292: PUSH
50293: LD_INT 0
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 3
50302: NEG
50303: PUSH
50304: LD_INT 1
50306: NEG
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 3
50314: NEG
50315: PUSH
50316: LD_INT 2
50318: NEG
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 3
50326: NEG
50327: PUSH
50328: LD_INT 3
50330: NEG
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50367: LD_ADDR_VAR 0 45
50371: PUSH
50372: LD_INT 0
50374: PUSH
50375: LD_INT 0
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 0
50384: PUSH
50385: LD_INT 1
50387: NEG
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 1
50395: PUSH
50396: LD_INT 0
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 1
50405: PUSH
50406: LD_INT 1
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: LD_INT 0
50415: PUSH
50416: LD_INT 1
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 1
50425: NEG
50426: PUSH
50427: LD_INT 0
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 1
50436: NEG
50437: PUSH
50438: LD_INT 1
50440: NEG
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 1
50448: NEG
50449: PUSH
50450: LD_INT 2
50452: NEG
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 0
50460: PUSH
50461: LD_INT 2
50463: NEG
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 1
50471: PUSH
50472: LD_INT 1
50474: NEG
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: LD_INT 2
50482: PUSH
50483: LD_INT 1
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 2
50492: PUSH
50493: LD_INT 2
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 1
50502: PUSH
50503: LD_INT 2
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 0
50512: PUSH
50513: LD_INT 2
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 1
50522: NEG
50523: PUSH
50524: LD_INT 1
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 2
50533: NEG
50534: PUSH
50535: LD_INT 1
50537: NEG
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 2
50545: NEG
50546: PUSH
50547: LD_INT 2
50549: NEG
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: PUSH
50555: LD_INT 2
50557: NEG
50558: PUSH
50559: LD_INT 3
50561: NEG
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 1
50569: NEG
50570: PUSH
50571: LD_INT 3
50573: NEG
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 0
50581: PUSH
50582: LD_INT 3
50584: NEG
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 1
50592: PUSH
50593: LD_INT 2
50595: NEG
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 3
50603: PUSH
50604: LD_INT 2
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 3
50613: PUSH
50614: LD_INT 3
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 2
50623: PUSH
50624: LD_INT 3
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: LD_INT 1
50633: PUSH
50634: LD_INT 3
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 0
50643: PUSH
50644: LD_INT 3
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 1
50653: NEG
50654: PUSH
50655: LD_INT 2
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 3
50664: NEG
50665: PUSH
50666: LD_INT 2
50668: NEG
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 3
50676: NEG
50677: PUSH
50678: LD_INT 3
50680: NEG
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: LIST
50714: LIST
50715: LIST
50716: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50717: LD_ADDR_VAR 0 46
50721: PUSH
50722: LD_INT 0
50724: PUSH
50725: LD_INT 0
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 0
50734: PUSH
50735: LD_INT 1
50737: NEG
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 1
50745: PUSH
50746: LD_INT 0
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 1
50755: PUSH
50756: LD_INT 1
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 0
50765: PUSH
50766: LD_INT 1
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 1
50775: NEG
50776: PUSH
50777: LD_INT 0
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 1
50786: NEG
50787: PUSH
50788: LD_INT 1
50790: NEG
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 1
50798: NEG
50799: PUSH
50800: LD_INT 2
50802: NEG
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: LD_INT 0
50810: PUSH
50811: LD_INT 2
50813: NEG
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 1
50821: PUSH
50822: LD_INT 1
50824: NEG
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 2
50832: PUSH
50833: LD_INT 0
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 2
50842: PUSH
50843: LD_INT 1
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 1
50852: PUSH
50853: LD_INT 2
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 0
50862: PUSH
50863: LD_INT 2
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 1
50872: NEG
50873: PUSH
50874: LD_INT 1
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 2
50883: NEG
50884: PUSH
50885: LD_INT 0
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 2
50894: NEG
50895: PUSH
50896: LD_INT 1
50898: NEG
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 1
50906: NEG
50907: PUSH
50908: LD_INT 3
50910: NEG
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 0
50918: PUSH
50919: LD_INT 3
50921: NEG
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 1
50929: PUSH
50930: LD_INT 2
50932: NEG
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 2
50940: PUSH
50941: LD_INT 1
50943: NEG
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 3
50951: PUSH
50952: LD_INT 0
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 3
50961: PUSH
50962: LD_INT 1
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 1
50971: PUSH
50972: LD_INT 3
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 0
50981: PUSH
50982: LD_INT 3
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 1
50991: NEG
50992: PUSH
50993: LD_INT 2
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 2
51002: NEG
51003: PUSH
51004: LD_INT 1
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 3
51013: NEG
51014: PUSH
51015: LD_INT 0
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 3
51024: NEG
51025: PUSH
51026: LD_INT 1
51028: NEG
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51065: LD_ADDR_VAR 0 47
51069: PUSH
51070: LD_INT 0
51072: PUSH
51073: LD_INT 0
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 0
51082: PUSH
51083: LD_INT 1
51085: NEG
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 1
51093: PUSH
51094: LD_INT 0
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 1
51103: PUSH
51104: LD_INT 1
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 0
51113: PUSH
51114: LD_INT 1
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 1
51123: NEG
51124: PUSH
51125: LD_INT 0
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 1
51134: NEG
51135: PUSH
51136: LD_INT 1
51138: NEG
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 1
51146: NEG
51147: PUSH
51148: LD_INT 2
51150: NEG
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 0
51158: PUSH
51159: LD_INT 2
51161: NEG
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 1
51169: PUSH
51170: LD_INT 1
51172: NEG
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 2
51180: NEG
51181: PUSH
51182: LD_INT 1
51184: NEG
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 2
51192: NEG
51193: PUSH
51194: LD_INT 2
51196: NEG
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51216: LD_ADDR_VAR 0 48
51220: PUSH
51221: LD_INT 0
51223: PUSH
51224: LD_INT 0
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 0
51233: PUSH
51234: LD_INT 1
51236: NEG
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 1
51244: PUSH
51245: LD_INT 0
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 1
51254: PUSH
51255: LD_INT 1
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 0
51264: PUSH
51265: LD_INT 1
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 1
51274: NEG
51275: PUSH
51276: LD_INT 0
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 1
51285: NEG
51286: PUSH
51287: LD_INT 1
51289: NEG
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 1
51297: NEG
51298: PUSH
51299: LD_INT 2
51301: NEG
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 0
51309: PUSH
51310: LD_INT 2
51312: NEG
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 1
51320: PUSH
51321: LD_INT 1
51323: NEG
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: LD_INT 2
51331: PUSH
51332: LD_INT 0
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 2
51341: PUSH
51342: LD_INT 1
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51363: LD_ADDR_VAR 0 49
51367: PUSH
51368: LD_INT 0
51370: PUSH
51371: LD_INT 0
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 0
51380: PUSH
51381: LD_INT 1
51383: NEG
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 1
51391: PUSH
51392: LD_INT 0
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 1
51401: PUSH
51402: LD_INT 1
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 0
51411: PUSH
51412: LD_INT 1
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 1
51421: NEG
51422: PUSH
51423: LD_INT 0
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 1
51432: NEG
51433: PUSH
51434: LD_INT 1
51436: NEG
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 1
51444: PUSH
51445: LD_INT 1
51447: NEG
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 2
51455: PUSH
51456: LD_INT 0
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 2
51465: PUSH
51466: LD_INT 1
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: LD_INT 2
51475: PUSH
51476: LD_INT 2
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 1
51485: PUSH
51486: LD_INT 2
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51507: LD_ADDR_VAR 0 50
51511: PUSH
51512: LD_INT 0
51514: PUSH
51515: LD_INT 0
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 0
51524: PUSH
51525: LD_INT 1
51527: NEG
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 1
51535: PUSH
51536: LD_INT 0
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 1
51545: PUSH
51546: LD_INT 1
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 0
51555: PUSH
51556: LD_INT 1
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 1
51565: NEG
51566: PUSH
51567: LD_INT 0
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 1
51576: NEG
51577: PUSH
51578: LD_INT 1
51580: NEG
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 2
51588: PUSH
51589: LD_INT 1
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 2
51598: PUSH
51599: LD_INT 2
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 1
51608: PUSH
51609: LD_INT 2
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 0
51618: PUSH
51619: LD_INT 2
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 1
51628: NEG
51629: PUSH
51630: LD_INT 1
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: LIST
51645: LIST
51646: LIST
51647: LIST
51648: LIST
51649: LIST
51650: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51651: LD_ADDR_VAR 0 51
51655: PUSH
51656: LD_INT 0
51658: PUSH
51659: LD_INT 0
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 0
51668: PUSH
51669: LD_INT 1
51671: NEG
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 1
51679: PUSH
51680: LD_INT 0
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 1
51689: PUSH
51690: LD_INT 1
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 0
51699: PUSH
51700: LD_INT 1
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 1
51709: NEG
51710: PUSH
51711: LD_INT 0
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 1
51720: NEG
51721: PUSH
51722: LD_INT 1
51724: NEG
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 1
51732: PUSH
51733: LD_INT 2
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 0
51742: PUSH
51743: LD_INT 2
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 1
51752: NEG
51753: PUSH
51754: LD_INT 1
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 2
51763: NEG
51764: PUSH
51765: LD_INT 0
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: LD_INT 2
51774: NEG
51775: PUSH
51776: LD_INT 1
51778: NEG
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51798: LD_ADDR_VAR 0 52
51802: PUSH
51803: LD_INT 0
51805: PUSH
51806: LD_INT 0
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 0
51815: PUSH
51816: LD_INT 1
51818: NEG
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: PUSH
51824: LD_INT 1
51826: PUSH
51827: LD_INT 0
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 1
51836: PUSH
51837: LD_INT 1
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 0
51846: PUSH
51847: LD_INT 1
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 1
51856: NEG
51857: PUSH
51858: LD_INT 0
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 1
51867: NEG
51868: PUSH
51869: LD_INT 1
51871: NEG
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: LD_INT 1
51879: NEG
51880: PUSH
51881: LD_INT 2
51883: NEG
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 1
51891: NEG
51892: PUSH
51893: LD_INT 1
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 2
51902: NEG
51903: PUSH
51904: LD_INT 0
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 2
51913: NEG
51914: PUSH
51915: LD_INT 1
51917: NEG
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 2
51925: NEG
51926: PUSH
51927: LD_INT 2
51929: NEG
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: LIST
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: LIST
51944: LIST
51945: LIST
51946: LIST
51947: LIST
51948: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51949: LD_ADDR_VAR 0 53
51953: PUSH
51954: LD_INT 0
51956: PUSH
51957: LD_INT 0
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 0
51966: PUSH
51967: LD_INT 1
51969: NEG
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 1
51977: PUSH
51978: LD_INT 0
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: PUSH
51985: LD_INT 1
51987: PUSH
51988: LD_INT 1
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: PUSH
51995: LD_INT 0
51997: PUSH
51998: LD_INT 1
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: LD_INT 1
52007: NEG
52008: PUSH
52009: LD_INT 0
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 1
52018: NEG
52019: PUSH
52020: LD_INT 1
52022: NEG
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 1
52030: NEG
52031: PUSH
52032: LD_INT 2
52034: NEG
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: LD_INT 0
52042: PUSH
52043: LD_INT 2
52045: NEG
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: LD_INT 1
52053: PUSH
52054: LD_INT 1
52056: NEG
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 2
52064: PUSH
52065: LD_INT 0
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 2
52074: PUSH
52075: LD_INT 1
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 2
52084: PUSH
52085: LD_INT 2
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 1
52094: PUSH
52095: LD_INT 2
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 0
52104: PUSH
52105: LD_INT 2
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 1
52114: NEG
52115: PUSH
52116: LD_INT 1
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 2
52125: NEG
52126: PUSH
52127: LD_INT 0
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 2
52136: NEG
52137: PUSH
52138: LD_INT 1
52140: NEG
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 2
52148: NEG
52149: PUSH
52150: LD_INT 2
52152: NEG
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52179: LD_ADDR_VAR 0 54
52183: PUSH
52184: LD_INT 0
52186: PUSH
52187: LD_INT 0
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 0
52196: PUSH
52197: LD_INT 1
52199: NEG
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 1
52207: PUSH
52208: LD_INT 0
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 1
52217: PUSH
52218: LD_INT 1
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 0
52227: PUSH
52228: LD_INT 1
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 1
52237: NEG
52238: PUSH
52239: LD_INT 0
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 1
52248: NEG
52249: PUSH
52250: LD_INT 1
52252: NEG
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 1
52260: NEG
52261: PUSH
52262: LD_INT 2
52264: NEG
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 0
52272: PUSH
52273: LD_INT 2
52275: NEG
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 1
52283: PUSH
52284: LD_INT 1
52286: NEG
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 2
52294: PUSH
52295: LD_INT 0
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 2
52304: PUSH
52305: LD_INT 1
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 2
52314: PUSH
52315: LD_INT 2
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 1
52324: PUSH
52325: LD_INT 2
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 0
52334: PUSH
52335: LD_INT 2
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 1
52344: NEG
52345: PUSH
52346: LD_INT 1
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 2
52355: NEG
52356: PUSH
52357: LD_INT 0
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 2
52366: NEG
52367: PUSH
52368: LD_INT 1
52370: NEG
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 2
52378: NEG
52379: PUSH
52380: LD_INT 2
52382: NEG
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52409: LD_ADDR_VAR 0 55
52413: PUSH
52414: LD_INT 0
52416: PUSH
52417: LD_INT 0
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 0
52426: PUSH
52427: LD_INT 1
52429: NEG
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 1
52437: PUSH
52438: LD_INT 0
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 1
52447: PUSH
52448: LD_INT 1
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 0
52457: PUSH
52458: LD_INT 1
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: LD_INT 1
52467: NEG
52468: PUSH
52469: LD_INT 0
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 1
52478: NEG
52479: PUSH
52480: LD_INT 1
52482: NEG
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 1
52490: NEG
52491: PUSH
52492: LD_INT 2
52494: NEG
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 0
52502: PUSH
52503: LD_INT 2
52505: NEG
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 1
52513: PUSH
52514: LD_INT 1
52516: NEG
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 2
52524: PUSH
52525: LD_INT 0
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 2
52534: PUSH
52535: LD_INT 1
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 2
52544: PUSH
52545: LD_INT 2
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 1
52554: PUSH
52555: LD_INT 2
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 0
52564: PUSH
52565: LD_INT 2
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 1
52574: NEG
52575: PUSH
52576: LD_INT 1
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 2
52585: NEG
52586: PUSH
52587: LD_INT 0
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 2
52596: NEG
52597: PUSH
52598: LD_INT 1
52600: NEG
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 2
52608: NEG
52609: PUSH
52610: LD_INT 2
52612: NEG
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52639: LD_ADDR_VAR 0 56
52643: PUSH
52644: LD_INT 0
52646: PUSH
52647: LD_INT 0
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 0
52656: PUSH
52657: LD_INT 1
52659: NEG
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: LD_INT 1
52667: PUSH
52668: LD_INT 0
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: LD_INT 1
52677: PUSH
52678: LD_INT 1
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 0
52687: PUSH
52688: LD_INT 1
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: LD_INT 1
52697: NEG
52698: PUSH
52699: LD_INT 0
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 1
52708: NEG
52709: PUSH
52710: LD_INT 1
52712: NEG
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 1
52720: NEG
52721: PUSH
52722: LD_INT 2
52724: NEG
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PUSH
52730: LD_INT 0
52732: PUSH
52733: LD_INT 2
52735: NEG
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 1
52743: PUSH
52744: LD_INT 1
52746: NEG
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 2
52754: PUSH
52755: LD_INT 0
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 2
52764: PUSH
52765: LD_INT 1
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 2
52774: PUSH
52775: LD_INT 2
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 1
52784: PUSH
52785: LD_INT 2
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: LD_INT 0
52794: PUSH
52795: LD_INT 2
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 1
52804: NEG
52805: PUSH
52806: LD_INT 1
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 2
52815: NEG
52816: PUSH
52817: LD_INT 0
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 2
52826: NEG
52827: PUSH
52828: LD_INT 1
52830: NEG
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 2
52838: NEG
52839: PUSH
52840: LD_INT 2
52842: NEG
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52869: LD_ADDR_VAR 0 57
52873: PUSH
52874: LD_INT 0
52876: PUSH
52877: LD_INT 0
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 0
52886: PUSH
52887: LD_INT 1
52889: NEG
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: LD_INT 1
52897: PUSH
52898: LD_INT 0
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 1
52907: PUSH
52908: LD_INT 1
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 0
52917: PUSH
52918: LD_INT 1
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 1
52927: NEG
52928: PUSH
52929: LD_INT 0
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 1
52938: NEG
52939: PUSH
52940: LD_INT 1
52942: NEG
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 1
52950: NEG
52951: PUSH
52952: LD_INT 2
52954: NEG
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 0
52962: PUSH
52963: LD_INT 2
52965: NEG
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 1
52973: PUSH
52974: LD_INT 1
52976: NEG
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 2
52984: PUSH
52985: LD_INT 0
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 2
52994: PUSH
52995: LD_INT 1
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 2
53004: PUSH
53005: LD_INT 2
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 1
53014: PUSH
53015: LD_INT 2
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 0
53024: PUSH
53025: LD_INT 2
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 1
53034: NEG
53035: PUSH
53036: LD_INT 1
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 2
53045: NEG
53046: PUSH
53047: LD_INT 0
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: LD_INT 2
53056: NEG
53057: PUSH
53058: LD_INT 1
53060: NEG
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 2
53068: NEG
53069: PUSH
53070: LD_INT 2
53072: NEG
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53099: LD_ADDR_VAR 0 58
53103: PUSH
53104: LD_INT 0
53106: PUSH
53107: LD_INT 0
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 0
53116: PUSH
53117: LD_INT 1
53119: NEG
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 1
53127: PUSH
53128: LD_INT 0
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 1
53137: PUSH
53138: LD_INT 1
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 0
53147: PUSH
53148: LD_INT 1
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 1
53157: NEG
53158: PUSH
53159: LD_INT 0
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 1
53168: NEG
53169: PUSH
53170: LD_INT 1
53172: NEG
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 1
53180: NEG
53181: PUSH
53182: LD_INT 2
53184: NEG
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 0
53192: PUSH
53193: LD_INT 2
53195: NEG
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 1
53203: PUSH
53204: LD_INT 1
53206: NEG
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 2
53214: PUSH
53215: LD_INT 0
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 2
53224: PUSH
53225: LD_INT 1
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 2
53234: PUSH
53235: LD_INT 2
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 1
53244: PUSH
53245: LD_INT 2
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 0
53254: PUSH
53255: LD_INT 2
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 1
53264: NEG
53265: PUSH
53266: LD_INT 1
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 2
53275: NEG
53276: PUSH
53277: LD_INT 0
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 2
53286: NEG
53287: PUSH
53288: LD_INT 1
53290: NEG
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 2
53298: NEG
53299: PUSH
53300: LD_INT 2
53302: NEG
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53329: LD_ADDR_VAR 0 59
53333: PUSH
53334: LD_INT 0
53336: PUSH
53337: LD_INT 0
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 0
53346: PUSH
53347: LD_INT 1
53349: NEG
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 1
53357: PUSH
53358: LD_INT 0
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: PUSH
53365: LD_INT 1
53367: PUSH
53368: LD_INT 1
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: LD_INT 0
53377: PUSH
53378: LD_INT 1
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: LD_INT 1
53387: NEG
53388: PUSH
53389: LD_INT 0
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 1
53398: NEG
53399: PUSH
53400: LD_INT 1
53402: NEG
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: LIST
53412: LIST
53413: LIST
53414: LIST
53415: LIST
53416: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53417: LD_ADDR_VAR 0 60
53421: PUSH
53422: LD_INT 0
53424: PUSH
53425: LD_INT 0
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 0
53434: PUSH
53435: LD_INT 1
53437: NEG
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: LD_INT 1
53445: PUSH
53446: LD_INT 0
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 1
53455: PUSH
53456: LD_INT 1
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 0
53465: PUSH
53466: LD_INT 1
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 1
53475: NEG
53476: PUSH
53477: LD_INT 0
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 1
53486: NEG
53487: PUSH
53488: LD_INT 1
53490: NEG
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53505: LD_ADDR_VAR 0 61
53509: PUSH
53510: LD_INT 0
53512: PUSH
53513: LD_INT 0
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 0
53522: PUSH
53523: LD_INT 1
53525: NEG
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 1
53533: PUSH
53534: LD_INT 0
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 1
53543: PUSH
53544: LD_INT 1
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 0
53553: PUSH
53554: LD_INT 1
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 1
53563: NEG
53564: PUSH
53565: LD_INT 0
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 1
53574: NEG
53575: PUSH
53576: LD_INT 1
53578: NEG
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53593: LD_ADDR_VAR 0 62
53597: PUSH
53598: LD_INT 0
53600: PUSH
53601: LD_INT 0
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 0
53610: PUSH
53611: LD_INT 1
53613: NEG
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 1
53621: PUSH
53622: LD_INT 0
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 1
53631: PUSH
53632: LD_INT 1
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 0
53641: PUSH
53642: LD_INT 1
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 1
53651: NEG
53652: PUSH
53653: LD_INT 0
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 1
53662: NEG
53663: PUSH
53664: LD_INT 1
53666: NEG
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53681: LD_ADDR_VAR 0 63
53685: PUSH
53686: LD_INT 0
53688: PUSH
53689: LD_INT 0
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 0
53698: PUSH
53699: LD_INT 1
53701: NEG
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: LD_INT 1
53709: PUSH
53710: LD_INT 0
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 1
53719: PUSH
53720: LD_INT 1
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 0
53729: PUSH
53730: LD_INT 1
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 1
53739: NEG
53740: PUSH
53741: LD_INT 0
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 1
53750: NEG
53751: PUSH
53752: LD_INT 1
53754: NEG
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53769: LD_ADDR_VAR 0 64
53773: PUSH
53774: LD_INT 0
53776: PUSH
53777: LD_INT 0
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: LD_INT 0
53786: PUSH
53787: LD_INT 1
53789: NEG
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 1
53797: PUSH
53798: LD_INT 0
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 1
53807: PUSH
53808: LD_INT 1
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_INT 0
53817: PUSH
53818: LD_INT 1
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 1
53827: NEG
53828: PUSH
53829: LD_INT 0
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 1
53838: NEG
53839: PUSH
53840: LD_INT 1
53842: NEG
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: ST_TO_ADDR
// end ; 1 :
53857: GO 59754
53859: LD_INT 1
53861: DOUBLE
53862: EQUAL
53863: IFTRUE 53867
53865: GO 56490
53867: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53868: LD_ADDR_VAR 0 11
53872: PUSH
53873: LD_INT 1
53875: NEG
53876: PUSH
53877: LD_INT 3
53879: NEG
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 0
53887: PUSH
53888: LD_INT 3
53890: NEG
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 1
53898: PUSH
53899: LD_INT 2
53901: NEG
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: LIST
53911: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53912: LD_ADDR_VAR 0 12
53916: PUSH
53917: LD_INT 2
53919: PUSH
53920: LD_INT 1
53922: NEG
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 3
53930: PUSH
53931: LD_INT 0
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 3
53940: PUSH
53941: LD_INT 1
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: LIST
53952: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53953: LD_ADDR_VAR 0 13
53957: PUSH
53958: LD_INT 3
53960: PUSH
53961: LD_INT 2
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 3
53970: PUSH
53971: LD_INT 3
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 2
53980: PUSH
53981: LD_INT 3
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: LIST
53992: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53993: LD_ADDR_VAR 0 14
53997: PUSH
53998: LD_INT 1
54000: PUSH
54001: LD_INT 3
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 0
54010: PUSH
54011: LD_INT 3
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 1
54020: NEG
54021: PUSH
54022: LD_INT 2
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: LIST
54033: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54034: LD_ADDR_VAR 0 15
54038: PUSH
54039: LD_INT 2
54041: NEG
54042: PUSH
54043: LD_INT 1
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: PUSH
54050: LD_INT 3
54052: NEG
54053: PUSH
54054: LD_INT 0
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 3
54063: NEG
54064: PUSH
54065: LD_INT 1
54067: NEG
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: LIST
54077: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54078: LD_ADDR_VAR 0 16
54082: PUSH
54083: LD_INT 2
54085: NEG
54086: PUSH
54087: LD_INT 3
54089: NEG
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 3
54097: NEG
54098: PUSH
54099: LD_INT 2
54101: NEG
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: LD_INT 3
54109: NEG
54110: PUSH
54111: LD_INT 3
54113: NEG
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: LIST
54123: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54124: LD_ADDR_VAR 0 17
54128: PUSH
54129: LD_INT 1
54131: NEG
54132: PUSH
54133: LD_INT 3
54135: NEG
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 0
54143: PUSH
54144: LD_INT 3
54146: NEG
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: PUSH
54152: LD_INT 1
54154: PUSH
54155: LD_INT 2
54157: NEG
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: LIST
54167: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54168: LD_ADDR_VAR 0 18
54172: PUSH
54173: LD_INT 2
54175: PUSH
54176: LD_INT 1
54178: NEG
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 3
54186: PUSH
54187: LD_INT 0
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 3
54196: PUSH
54197: LD_INT 1
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: LIST
54208: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54209: LD_ADDR_VAR 0 19
54213: PUSH
54214: LD_INT 3
54216: PUSH
54217: LD_INT 2
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 3
54226: PUSH
54227: LD_INT 3
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 2
54236: PUSH
54237: LD_INT 3
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: LIST
54248: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54249: LD_ADDR_VAR 0 20
54253: PUSH
54254: LD_INT 1
54256: PUSH
54257: LD_INT 3
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 0
54266: PUSH
54267: LD_INT 3
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 1
54276: NEG
54277: PUSH
54278: LD_INT 2
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: LIST
54289: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54290: LD_ADDR_VAR 0 21
54294: PUSH
54295: LD_INT 2
54297: NEG
54298: PUSH
54299: LD_INT 1
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 3
54308: NEG
54309: PUSH
54310: LD_INT 0
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 3
54319: NEG
54320: PUSH
54321: LD_INT 1
54323: NEG
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: LIST
54333: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54334: LD_ADDR_VAR 0 22
54338: PUSH
54339: LD_INT 2
54341: NEG
54342: PUSH
54343: LD_INT 3
54345: NEG
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 3
54353: NEG
54354: PUSH
54355: LD_INT 2
54357: NEG
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 3
54365: NEG
54366: PUSH
54367: LD_INT 3
54369: NEG
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: LIST
54379: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
54380: LD_ADDR_VAR 0 23
54384: PUSH
54385: LD_INT 0
54387: PUSH
54388: LD_INT 3
54390: NEG
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 1
54398: NEG
54399: PUSH
54400: LD_INT 4
54402: NEG
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 1
54410: PUSH
54411: LD_INT 3
54413: NEG
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: LIST
54423: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
54424: LD_ADDR_VAR 0 24
54428: PUSH
54429: LD_INT 3
54431: PUSH
54432: LD_INT 0
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 3
54441: PUSH
54442: LD_INT 1
54444: NEG
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 4
54452: PUSH
54453: LD_INT 1
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: LIST
54464: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
54465: LD_ADDR_VAR 0 25
54469: PUSH
54470: LD_INT 3
54472: PUSH
54473: LD_INT 3
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 4
54482: PUSH
54483: LD_INT 3
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 3
54492: PUSH
54493: LD_INT 4
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: LIST
54504: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
54505: LD_ADDR_VAR 0 26
54509: PUSH
54510: LD_INT 0
54512: PUSH
54513: LD_INT 3
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 1
54522: PUSH
54523: LD_INT 4
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 1
54532: NEG
54533: PUSH
54534: LD_INT 3
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: LIST
54545: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
54546: LD_ADDR_VAR 0 27
54550: PUSH
54551: LD_INT 3
54553: NEG
54554: PUSH
54555: LD_INT 0
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 3
54564: NEG
54565: PUSH
54566: LD_INT 1
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 4
54575: NEG
54576: PUSH
54577: LD_INT 1
54579: NEG
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: LIST
54589: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
54590: LD_ADDR_VAR 0 28
54594: PUSH
54595: LD_INT 3
54597: NEG
54598: PUSH
54599: LD_INT 3
54601: NEG
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 3
54609: NEG
54610: PUSH
54611: LD_INT 4
54613: NEG
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 4
54621: NEG
54622: PUSH
54623: LD_INT 3
54625: NEG
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: LIST
54635: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
54636: LD_ADDR_VAR 0 29
54640: PUSH
54641: LD_INT 1
54643: NEG
54644: PUSH
54645: LD_INT 3
54647: NEG
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 0
54655: PUSH
54656: LD_INT 3
54658: NEG
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 1
54666: PUSH
54667: LD_INT 2
54669: NEG
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 1
54677: NEG
54678: PUSH
54679: LD_INT 4
54681: NEG
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 0
54689: PUSH
54690: LD_INT 4
54692: NEG
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 1
54700: PUSH
54701: LD_INT 3
54703: NEG
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 1
54711: NEG
54712: PUSH
54713: LD_INT 5
54715: NEG
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 0
54723: PUSH
54724: LD_INT 5
54726: NEG
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 1
54734: PUSH
54735: LD_INT 4
54737: NEG
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 1
54745: NEG
54746: PUSH
54747: LD_INT 6
54749: NEG
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 0
54757: PUSH
54758: LD_INT 6
54760: NEG
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 1
54768: PUSH
54769: LD_INT 5
54771: NEG
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54791: LD_ADDR_VAR 0 30
54795: PUSH
54796: LD_INT 2
54798: PUSH
54799: LD_INT 1
54801: NEG
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 3
54809: PUSH
54810: LD_INT 0
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 3
54819: PUSH
54820: LD_INT 1
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: LD_INT 3
54829: PUSH
54830: LD_INT 1
54832: NEG
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 4
54840: PUSH
54841: LD_INT 0
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 4
54850: PUSH
54851: LD_INT 1
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 4
54860: PUSH
54861: LD_INT 1
54863: NEG
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 5
54871: PUSH
54872: LD_INT 0
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 5
54881: PUSH
54882: LD_INT 1
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 5
54891: PUSH
54892: LD_INT 1
54894: NEG
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 6
54902: PUSH
54903: LD_INT 0
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: LD_INT 6
54912: PUSH
54913: LD_INT 1
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54934: LD_ADDR_VAR 0 31
54938: PUSH
54939: LD_INT 3
54941: PUSH
54942: LD_INT 2
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 3
54951: PUSH
54952: LD_INT 3
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 2
54961: PUSH
54962: LD_INT 3
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 4
54971: PUSH
54972: LD_INT 3
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 4
54981: PUSH
54982: LD_INT 4
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 3
54991: PUSH
54992: LD_INT 4
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 5
55001: PUSH
55002: LD_INT 4
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 5
55011: PUSH
55012: LD_INT 5
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 4
55021: PUSH
55022: LD_INT 5
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 6
55031: PUSH
55032: LD_INT 5
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 6
55041: PUSH
55042: LD_INT 6
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 5
55051: PUSH
55052: LD_INT 6
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55073: LD_ADDR_VAR 0 32
55077: PUSH
55078: LD_INT 1
55080: PUSH
55081: LD_INT 3
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 0
55090: PUSH
55091: LD_INT 3
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: LD_INT 1
55100: NEG
55101: PUSH
55102: LD_INT 2
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 1
55111: PUSH
55112: LD_INT 4
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: LD_INT 0
55121: PUSH
55122: LD_INT 4
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 1
55131: NEG
55132: PUSH
55133: LD_INT 3
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 1
55142: PUSH
55143: LD_INT 5
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 0
55152: PUSH
55153: LD_INT 5
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 1
55162: NEG
55163: PUSH
55164: LD_INT 4
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: LD_INT 1
55173: PUSH
55174: LD_INT 6
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PUSH
55181: LD_INT 0
55183: PUSH
55184: LD_INT 6
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: LD_INT 1
55193: NEG
55194: PUSH
55195: LD_INT 5
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55216: LD_ADDR_VAR 0 33
55220: PUSH
55221: LD_INT 2
55223: NEG
55224: PUSH
55225: LD_INT 1
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 3
55234: NEG
55235: PUSH
55236: LD_INT 0
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 3
55245: NEG
55246: PUSH
55247: LD_INT 1
55249: NEG
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: PUSH
55255: LD_INT 3
55257: NEG
55258: PUSH
55259: LD_INT 1
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: LD_INT 4
55268: NEG
55269: PUSH
55270: LD_INT 0
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: PUSH
55277: LD_INT 4
55279: NEG
55280: PUSH
55281: LD_INT 1
55283: NEG
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 4
55291: NEG
55292: PUSH
55293: LD_INT 1
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 5
55302: NEG
55303: PUSH
55304: LD_INT 0
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 5
55313: NEG
55314: PUSH
55315: LD_INT 1
55317: NEG
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 5
55325: NEG
55326: PUSH
55327: LD_INT 1
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 6
55336: NEG
55337: PUSH
55338: LD_INT 0
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 6
55347: NEG
55348: PUSH
55349: LD_INT 1
55351: NEG
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
55371: LD_ADDR_VAR 0 34
55375: PUSH
55376: LD_INT 2
55378: NEG
55379: PUSH
55380: LD_INT 3
55382: NEG
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 3
55390: NEG
55391: PUSH
55392: LD_INT 2
55394: NEG
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 3
55402: NEG
55403: PUSH
55404: LD_INT 3
55406: NEG
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 3
55414: NEG
55415: PUSH
55416: LD_INT 4
55418: NEG
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 4
55426: NEG
55427: PUSH
55428: LD_INT 3
55430: NEG
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: LD_INT 4
55438: NEG
55439: PUSH
55440: LD_INT 4
55442: NEG
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 4
55450: NEG
55451: PUSH
55452: LD_INT 5
55454: NEG
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: LD_INT 5
55462: NEG
55463: PUSH
55464: LD_INT 4
55466: NEG
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: LD_INT 5
55474: NEG
55475: PUSH
55476: LD_INT 5
55478: NEG
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 5
55486: NEG
55487: PUSH
55488: LD_INT 6
55490: NEG
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 6
55498: NEG
55499: PUSH
55500: LD_INT 5
55502: NEG
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 6
55510: NEG
55511: PUSH
55512: LD_INT 6
55514: NEG
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
55534: LD_ADDR_VAR 0 41
55538: PUSH
55539: LD_INT 0
55541: PUSH
55542: LD_INT 2
55544: NEG
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 1
55552: NEG
55553: PUSH
55554: LD_INT 3
55556: NEG
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 1
55564: PUSH
55565: LD_INT 2
55567: NEG
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: LIST
55577: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
55578: LD_ADDR_VAR 0 42
55582: PUSH
55583: LD_INT 2
55585: PUSH
55586: LD_INT 0
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 2
55595: PUSH
55596: LD_INT 1
55598: NEG
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 3
55606: PUSH
55607: LD_INT 1
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: LIST
55618: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
55619: LD_ADDR_VAR 0 43
55623: PUSH
55624: LD_INT 2
55626: PUSH
55627: LD_INT 2
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 3
55636: PUSH
55637: LD_INT 2
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 2
55646: PUSH
55647: LD_INT 3
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: LIST
55658: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55659: LD_ADDR_VAR 0 44
55663: PUSH
55664: LD_INT 0
55666: PUSH
55667: LD_INT 2
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 1
55676: PUSH
55677: LD_INT 3
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 1
55686: NEG
55687: PUSH
55688: LD_INT 2
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: LIST
55699: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55700: LD_ADDR_VAR 0 45
55704: PUSH
55705: LD_INT 2
55707: NEG
55708: PUSH
55709: LD_INT 0
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 2
55718: NEG
55719: PUSH
55720: LD_INT 1
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 3
55729: NEG
55730: PUSH
55731: LD_INT 1
55733: NEG
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: LIST
55743: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55744: LD_ADDR_VAR 0 46
55748: PUSH
55749: LD_INT 2
55751: NEG
55752: PUSH
55753: LD_INT 2
55755: NEG
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 2
55763: NEG
55764: PUSH
55765: LD_INT 3
55767: NEG
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 3
55775: NEG
55776: PUSH
55777: LD_INT 2
55779: NEG
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: LIST
55789: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55790: LD_ADDR_VAR 0 47
55794: PUSH
55795: LD_INT 2
55797: NEG
55798: PUSH
55799: LD_INT 3
55801: NEG
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 1
55809: NEG
55810: PUSH
55811: LD_INT 3
55813: NEG
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55823: LD_ADDR_VAR 0 48
55827: PUSH
55828: LD_INT 1
55830: PUSH
55831: LD_INT 2
55833: NEG
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 2
55841: PUSH
55842: LD_INT 1
55844: NEG
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55854: LD_ADDR_VAR 0 49
55858: PUSH
55859: LD_INT 3
55861: PUSH
55862: LD_INT 1
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 3
55871: PUSH
55872: LD_INT 2
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55883: LD_ADDR_VAR 0 50
55887: PUSH
55888: LD_INT 2
55890: PUSH
55891: LD_INT 3
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 1
55900: PUSH
55901: LD_INT 3
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55912: LD_ADDR_VAR 0 51
55916: PUSH
55917: LD_INT 1
55919: NEG
55920: PUSH
55921: LD_INT 2
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 2
55930: NEG
55931: PUSH
55932: LD_INT 1
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55943: LD_ADDR_VAR 0 52
55947: PUSH
55948: LD_INT 3
55950: NEG
55951: PUSH
55952: LD_INT 1
55954: NEG
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 3
55962: NEG
55963: PUSH
55964: LD_INT 2
55966: NEG
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55976: LD_ADDR_VAR 0 53
55980: PUSH
55981: LD_INT 1
55983: NEG
55984: PUSH
55985: LD_INT 3
55987: NEG
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 0
55995: PUSH
55996: LD_INT 3
55998: NEG
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 1
56006: PUSH
56007: LD_INT 2
56009: NEG
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: LIST
56019: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56020: LD_ADDR_VAR 0 54
56024: PUSH
56025: LD_INT 2
56027: PUSH
56028: LD_INT 1
56030: NEG
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: LD_INT 3
56038: PUSH
56039: LD_INT 0
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 3
56048: PUSH
56049: LD_INT 1
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: LIST
56060: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56061: LD_ADDR_VAR 0 55
56065: PUSH
56066: LD_INT 3
56068: PUSH
56069: LD_INT 2
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 3
56078: PUSH
56079: LD_INT 3
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 2
56088: PUSH
56089: LD_INT 3
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: LIST
56100: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56101: LD_ADDR_VAR 0 56
56105: PUSH
56106: LD_INT 1
56108: PUSH
56109: LD_INT 3
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 0
56118: PUSH
56119: LD_INT 3
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 1
56128: NEG
56129: PUSH
56130: LD_INT 2
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: LIST
56141: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56142: LD_ADDR_VAR 0 57
56146: PUSH
56147: LD_INT 2
56149: NEG
56150: PUSH
56151: LD_INT 1
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 3
56160: NEG
56161: PUSH
56162: LD_INT 0
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 3
56171: NEG
56172: PUSH
56173: LD_INT 1
56175: NEG
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: LIST
56185: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56186: LD_ADDR_VAR 0 58
56190: PUSH
56191: LD_INT 2
56193: NEG
56194: PUSH
56195: LD_INT 3
56197: NEG
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 3
56205: NEG
56206: PUSH
56207: LD_INT 2
56209: NEG
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 3
56217: NEG
56218: PUSH
56219: LD_INT 3
56221: NEG
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: LIST
56231: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56232: LD_ADDR_VAR 0 59
56236: PUSH
56237: LD_INT 1
56239: NEG
56240: PUSH
56241: LD_INT 2
56243: NEG
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 0
56251: PUSH
56252: LD_INT 2
56254: NEG
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 1
56262: PUSH
56263: LD_INT 1
56265: NEG
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: LIST
56275: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56276: LD_ADDR_VAR 0 60
56280: PUSH
56281: LD_INT 1
56283: PUSH
56284: LD_INT 1
56286: NEG
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 2
56294: PUSH
56295: LD_INT 0
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 2
56304: PUSH
56305: LD_INT 1
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: LIST
56316: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56317: LD_ADDR_VAR 0 61
56321: PUSH
56322: LD_INT 2
56324: PUSH
56325: LD_INT 1
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 2
56334: PUSH
56335: LD_INT 2
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 1
56344: PUSH
56345: LD_INT 2
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: LIST
56356: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56357: LD_ADDR_VAR 0 62
56361: PUSH
56362: LD_INT 1
56364: PUSH
56365: LD_INT 2
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 0
56374: PUSH
56375: LD_INT 2
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 1
56384: NEG
56385: PUSH
56386: LD_INT 1
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: LIST
56397: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56398: LD_ADDR_VAR 0 63
56402: PUSH
56403: LD_INT 1
56405: NEG
56406: PUSH
56407: LD_INT 1
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 2
56416: NEG
56417: PUSH
56418: LD_INT 0
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 2
56427: NEG
56428: PUSH
56429: LD_INT 1
56431: NEG
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: LIST
56441: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56442: LD_ADDR_VAR 0 64
56446: PUSH
56447: LD_INT 1
56449: NEG
56450: PUSH
56451: LD_INT 2
56453: NEG
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 2
56461: NEG
56462: PUSH
56463: LD_INT 1
56465: NEG
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 2
56473: NEG
56474: PUSH
56475: LD_INT 2
56477: NEG
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: LIST
56487: ST_TO_ADDR
// end ; 2 :
56488: GO 59754
56490: LD_INT 2
56492: DOUBLE
56493: EQUAL
56494: IFTRUE 56498
56496: GO 59753
56498: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
56499: LD_ADDR_VAR 0 29
56503: PUSH
56504: LD_INT 4
56506: PUSH
56507: LD_INT 0
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: PUSH
56514: LD_INT 4
56516: PUSH
56517: LD_INT 1
56519: NEG
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 5
56527: PUSH
56528: LD_INT 0
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 5
56537: PUSH
56538: LD_INT 1
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 4
56547: PUSH
56548: LD_INT 1
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 3
56557: PUSH
56558: LD_INT 0
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 3
56567: PUSH
56568: LD_INT 1
56570: NEG
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 3
56578: PUSH
56579: LD_INT 2
56581: NEG
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 5
56589: PUSH
56590: LD_INT 2
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 3
56599: PUSH
56600: LD_INT 3
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 3
56609: PUSH
56610: LD_INT 2
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 4
56619: PUSH
56620: LD_INT 3
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: PUSH
56627: LD_INT 4
56629: PUSH
56630: LD_INT 4
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 3
56639: PUSH
56640: LD_INT 4
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 2
56649: PUSH
56650: LD_INT 3
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 2
56659: PUSH
56660: LD_INT 2
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 4
56669: PUSH
56670: LD_INT 2
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 2
56679: PUSH
56680: LD_INT 4
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 0
56689: PUSH
56690: LD_INT 4
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 0
56699: PUSH
56700: LD_INT 3
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: LD_INT 1
56709: PUSH
56710: LD_INT 4
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: LD_INT 1
56719: PUSH
56720: LD_INT 5
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: LD_INT 0
56729: PUSH
56730: LD_INT 5
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 1
56739: NEG
56740: PUSH
56741: LD_INT 4
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 1
56750: NEG
56751: PUSH
56752: LD_INT 3
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 2
56761: PUSH
56762: LD_INT 5
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 2
56771: NEG
56772: PUSH
56773: LD_INT 3
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 3
56782: NEG
56783: PUSH
56784: LD_INT 0
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 3
56793: NEG
56794: PUSH
56795: LD_INT 1
56797: NEG
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: LD_INT 2
56805: NEG
56806: PUSH
56807: LD_INT 0
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 2
56816: NEG
56817: PUSH
56818: LD_INT 1
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 3
56827: NEG
56828: PUSH
56829: LD_INT 1
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 4
56838: NEG
56839: PUSH
56840: LD_INT 0
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 4
56849: NEG
56850: PUSH
56851: LD_INT 1
56853: NEG
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 4
56861: NEG
56862: PUSH
56863: LD_INT 2
56865: NEG
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 2
56873: NEG
56874: PUSH
56875: LD_INT 2
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 4
56884: NEG
56885: PUSH
56886: LD_INT 4
56888: NEG
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 4
56896: NEG
56897: PUSH
56898: LD_INT 5
56900: NEG
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 3
56908: NEG
56909: PUSH
56910: LD_INT 4
56912: NEG
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 3
56920: NEG
56921: PUSH
56922: LD_INT 3
56924: NEG
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: LD_INT 4
56932: NEG
56933: PUSH
56934: LD_INT 3
56936: NEG
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 5
56944: NEG
56945: PUSH
56946: LD_INT 4
56948: NEG
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 5
56956: NEG
56957: PUSH
56958: LD_INT 5
56960: NEG
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 3
56968: NEG
56969: PUSH
56970: LD_INT 5
56972: NEG
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 5
56980: NEG
56981: PUSH
56982: LD_INT 3
56984: NEG
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: LIST
57020: LIST
57021: LIST
57022: LIST
57023: LIST
57024: LIST
57025: LIST
57026: LIST
57027: LIST
57028: LIST
57029: LIST
57030: LIST
57031: LIST
57032: LIST
57033: LIST
57034: LIST
57035: LIST
57036: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57037: LD_ADDR_VAR 0 30
57041: PUSH
57042: LD_INT 4
57044: PUSH
57045: LD_INT 4
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 4
57054: PUSH
57055: LD_INT 3
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 5
57064: PUSH
57065: LD_INT 4
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: LD_INT 5
57074: PUSH
57075: LD_INT 5
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 4
57084: PUSH
57085: LD_INT 5
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 3
57094: PUSH
57095: LD_INT 4
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 3
57104: PUSH
57105: LD_INT 3
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 5
57114: PUSH
57115: LD_INT 3
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 3
57124: PUSH
57125: LD_INT 5
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 0
57134: PUSH
57135: LD_INT 3
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 0
57144: PUSH
57145: LD_INT 2
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 1
57154: PUSH
57155: LD_INT 3
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 1
57164: PUSH
57165: LD_INT 4
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 0
57174: PUSH
57175: LD_INT 4
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 1
57184: NEG
57185: PUSH
57186: LD_INT 3
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: LD_INT 1
57195: NEG
57196: PUSH
57197: LD_INT 2
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 2
57206: PUSH
57207: LD_INT 4
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 2
57216: NEG
57217: PUSH
57218: LD_INT 2
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: LD_INT 4
57227: NEG
57228: PUSH
57229: LD_INT 0
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 4
57238: NEG
57239: PUSH
57240: LD_INT 1
57242: NEG
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 3
57250: NEG
57251: PUSH
57252: LD_INT 0
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 3
57261: NEG
57262: PUSH
57263: LD_INT 1
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 4
57272: NEG
57273: PUSH
57274: LD_INT 1
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 5
57283: NEG
57284: PUSH
57285: LD_INT 0
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 5
57294: NEG
57295: PUSH
57296: LD_INT 1
57298: NEG
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 5
57306: NEG
57307: PUSH
57308: LD_INT 2
57310: NEG
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 3
57318: NEG
57319: PUSH
57320: LD_INT 2
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 3
57329: NEG
57330: PUSH
57331: LD_INT 3
57333: NEG
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: LD_INT 3
57341: NEG
57342: PUSH
57343: LD_INT 4
57345: NEG
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 2
57353: NEG
57354: PUSH
57355: LD_INT 3
57357: NEG
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 2
57365: NEG
57366: PUSH
57367: LD_INT 2
57369: NEG
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 3
57377: NEG
57378: PUSH
57379: LD_INT 2
57381: NEG
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 4
57389: NEG
57390: PUSH
57391: LD_INT 3
57393: NEG
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 4
57401: NEG
57402: PUSH
57403: LD_INT 4
57405: NEG
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 2
57413: NEG
57414: PUSH
57415: LD_INT 4
57417: NEG
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: LD_INT 4
57425: NEG
57426: PUSH
57427: LD_INT 2
57429: NEG
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: LD_INT 0
57437: PUSH
57438: LD_INT 4
57440: NEG
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: PUSH
57446: LD_INT 0
57448: PUSH
57449: LD_INT 5
57451: NEG
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 1
57459: PUSH
57460: LD_INT 4
57462: NEG
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 1
57470: PUSH
57471: LD_INT 3
57473: NEG
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 0
57481: PUSH
57482: LD_INT 3
57484: NEG
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 1
57492: NEG
57493: PUSH
57494: LD_INT 4
57496: NEG
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: LD_INT 1
57504: NEG
57505: PUSH
57506: LD_INT 5
57508: NEG
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 2
57516: PUSH
57517: LD_INT 3
57519: NEG
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 2
57527: NEG
57528: PUSH
57529: LD_INT 5
57531: NEG
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: LIST
57549: LIST
57550: LIST
57551: LIST
57552: LIST
57553: LIST
57554: LIST
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: LIST
57560: LIST
57561: LIST
57562: LIST
57563: LIST
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: LIST
57569: LIST
57570: LIST
57571: LIST
57572: LIST
57573: LIST
57574: LIST
57575: LIST
57576: LIST
57577: LIST
57578: LIST
57579: LIST
57580: LIST
57581: LIST
57582: LIST
57583: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
57584: LD_ADDR_VAR 0 31
57588: PUSH
57589: LD_INT 0
57591: PUSH
57592: LD_INT 4
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 0
57601: PUSH
57602: LD_INT 3
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 1
57611: PUSH
57612: LD_INT 4
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 1
57621: PUSH
57622: LD_INT 5
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 0
57631: PUSH
57632: LD_INT 5
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 1
57641: NEG
57642: PUSH
57643: LD_INT 4
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 1
57652: NEG
57653: PUSH
57654: LD_INT 3
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 2
57663: PUSH
57664: LD_INT 5
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: LD_INT 2
57673: NEG
57674: PUSH
57675: LD_INT 3
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: LD_INT 3
57684: NEG
57685: PUSH
57686: LD_INT 0
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: LD_INT 3
57695: NEG
57696: PUSH
57697: LD_INT 1
57699: NEG
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 2
57707: NEG
57708: PUSH
57709: LD_INT 0
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 2
57718: NEG
57719: PUSH
57720: LD_INT 1
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 3
57729: NEG
57730: PUSH
57731: LD_INT 1
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 4
57740: NEG
57741: PUSH
57742: LD_INT 0
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 4
57751: NEG
57752: PUSH
57753: LD_INT 1
57755: NEG
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 4
57763: NEG
57764: PUSH
57765: LD_INT 2
57767: NEG
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 2
57775: NEG
57776: PUSH
57777: LD_INT 2
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 4
57786: NEG
57787: PUSH
57788: LD_INT 4
57790: NEG
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 4
57798: NEG
57799: PUSH
57800: LD_INT 5
57802: NEG
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 3
57810: NEG
57811: PUSH
57812: LD_INT 4
57814: NEG
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 3
57822: NEG
57823: PUSH
57824: LD_INT 3
57826: NEG
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: LD_INT 4
57834: NEG
57835: PUSH
57836: LD_INT 3
57838: NEG
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 5
57846: NEG
57847: PUSH
57848: LD_INT 4
57850: NEG
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 5
57858: NEG
57859: PUSH
57860: LD_INT 5
57862: NEG
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: LD_INT 3
57870: NEG
57871: PUSH
57872: LD_INT 5
57874: NEG
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 5
57882: NEG
57883: PUSH
57884: LD_INT 3
57886: NEG
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 0
57894: PUSH
57895: LD_INT 3
57897: NEG
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: LD_INT 0
57905: PUSH
57906: LD_INT 4
57908: NEG
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: LD_INT 1
57916: PUSH
57917: LD_INT 3
57919: NEG
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 1
57927: PUSH
57928: LD_INT 2
57930: NEG
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 0
57938: PUSH
57939: LD_INT 2
57941: NEG
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 1
57949: NEG
57950: PUSH
57951: LD_INT 3
57953: NEG
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 1
57961: NEG
57962: PUSH
57963: LD_INT 4
57965: NEG
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: LD_INT 2
57973: PUSH
57974: LD_INT 2
57976: NEG
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 2
57984: NEG
57985: PUSH
57986: LD_INT 4
57988: NEG
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 4
57996: PUSH
57997: LD_INT 0
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 4
58006: PUSH
58007: LD_INT 1
58009: NEG
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 5
58017: PUSH
58018: LD_INT 0
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 5
58027: PUSH
58028: LD_INT 1
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 4
58037: PUSH
58038: LD_INT 1
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 3
58047: PUSH
58048: LD_INT 0
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 3
58057: PUSH
58058: LD_INT 1
58060: NEG
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 3
58068: PUSH
58069: LD_INT 2
58071: NEG
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 5
58079: PUSH
58080: LD_INT 2
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: EMPTY
58088: LIST
58089: LIST
58090: LIST
58091: LIST
58092: LIST
58093: LIST
58094: LIST
58095: LIST
58096: LIST
58097: LIST
58098: LIST
58099: LIST
58100: LIST
58101: LIST
58102: LIST
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: LIST
58120: LIST
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: LIST
58131: LIST
58132: LIST
58133: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58134: LD_ADDR_VAR 0 32
58138: PUSH
58139: LD_INT 4
58141: NEG
58142: PUSH
58143: LD_INT 0
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 4
58152: NEG
58153: PUSH
58154: LD_INT 1
58156: NEG
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 3
58164: NEG
58165: PUSH
58166: LD_INT 0
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 3
58175: NEG
58176: PUSH
58177: LD_INT 1
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 4
58186: NEG
58187: PUSH
58188: LD_INT 1
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 5
58197: NEG
58198: PUSH
58199: LD_INT 0
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 5
58208: NEG
58209: PUSH
58210: LD_INT 1
58212: NEG
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 5
58220: NEG
58221: PUSH
58222: LD_INT 2
58224: NEG
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: PUSH
58230: LD_INT 3
58232: NEG
58233: PUSH
58234: LD_INT 2
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 3
58243: NEG
58244: PUSH
58245: LD_INT 3
58247: NEG
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 3
58255: NEG
58256: PUSH
58257: LD_INT 4
58259: NEG
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 2
58267: NEG
58268: PUSH
58269: LD_INT 3
58271: NEG
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 2
58279: NEG
58280: PUSH
58281: LD_INT 2
58283: NEG
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 3
58291: NEG
58292: PUSH
58293: LD_INT 2
58295: NEG
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 4
58303: NEG
58304: PUSH
58305: LD_INT 3
58307: NEG
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: LD_INT 4
58315: NEG
58316: PUSH
58317: LD_INT 4
58319: NEG
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: PUSH
58325: LD_INT 2
58327: NEG
58328: PUSH
58329: LD_INT 4
58331: NEG
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: PUSH
58337: LD_INT 4
58339: NEG
58340: PUSH
58341: LD_INT 2
58343: NEG
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: PUSH
58349: LD_INT 0
58351: PUSH
58352: LD_INT 4
58354: NEG
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 0
58362: PUSH
58363: LD_INT 5
58365: NEG
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 1
58373: PUSH
58374: LD_INT 4
58376: NEG
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 1
58384: PUSH
58385: LD_INT 3
58387: NEG
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 0
58395: PUSH
58396: LD_INT 3
58398: NEG
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 1
58406: NEG
58407: PUSH
58408: LD_INT 4
58410: NEG
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 1
58418: NEG
58419: PUSH
58420: LD_INT 5
58422: NEG
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 2
58430: PUSH
58431: LD_INT 3
58433: NEG
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 2
58441: NEG
58442: PUSH
58443: LD_INT 5
58445: NEG
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 3
58453: PUSH
58454: LD_INT 0
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 3
58463: PUSH
58464: LD_INT 1
58466: NEG
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 4
58474: PUSH
58475: LD_INT 0
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 4
58484: PUSH
58485: LD_INT 1
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 3
58494: PUSH
58495: LD_INT 1
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 2
58504: PUSH
58505: LD_INT 0
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: LD_INT 2
58514: PUSH
58515: LD_INT 1
58517: NEG
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: LD_INT 2
58525: PUSH
58526: LD_INT 2
58528: NEG
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 4
58536: PUSH
58537: LD_INT 2
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 4
58546: PUSH
58547: LD_INT 4
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: LD_INT 4
58556: PUSH
58557: LD_INT 3
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 5
58566: PUSH
58567: LD_INT 4
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 5
58576: PUSH
58577: LD_INT 5
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 4
58586: PUSH
58587: LD_INT 5
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 3
58596: PUSH
58597: LD_INT 4
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 3
58606: PUSH
58607: LD_INT 3
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 5
58616: PUSH
58617: LD_INT 3
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 3
58626: PUSH
58627: LD_INT 5
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: LIST
58638: LIST
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: LIST
58666: LIST
58667: LIST
58668: LIST
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: LIST
58674: LIST
58675: LIST
58676: LIST
58677: LIST
58678: LIST
58679: LIST
58680: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
58681: LD_ADDR_VAR 0 33
58685: PUSH
58686: LD_INT 4
58688: NEG
58689: PUSH
58690: LD_INT 4
58692: NEG
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PUSH
58698: LD_INT 4
58700: NEG
58701: PUSH
58702: LD_INT 5
58704: NEG
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: PUSH
58710: LD_INT 3
58712: NEG
58713: PUSH
58714: LD_INT 4
58716: NEG
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: LD_INT 3
58724: NEG
58725: PUSH
58726: LD_INT 3
58728: NEG
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: PUSH
58734: LD_INT 4
58736: NEG
58737: PUSH
58738: LD_INT 3
58740: NEG
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 5
58748: NEG
58749: PUSH
58750: LD_INT 4
58752: NEG
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 5
58760: NEG
58761: PUSH
58762: LD_INT 5
58764: NEG
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: LD_INT 3
58772: NEG
58773: PUSH
58774: LD_INT 5
58776: NEG
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 5
58784: NEG
58785: PUSH
58786: LD_INT 3
58788: NEG
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 0
58796: PUSH
58797: LD_INT 3
58799: NEG
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: LD_INT 0
58807: PUSH
58808: LD_INT 4
58810: NEG
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 1
58818: PUSH
58819: LD_INT 3
58821: NEG
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 1
58829: PUSH
58830: LD_INT 2
58832: NEG
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 0
58840: PUSH
58841: LD_INT 2
58843: NEG
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 1
58851: NEG
58852: PUSH
58853: LD_INT 3
58855: NEG
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 1
58863: NEG
58864: PUSH
58865: LD_INT 4
58867: NEG
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: LD_INT 2
58875: PUSH
58876: LD_INT 2
58878: NEG
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 2
58886: NEG
58887: PUSH
58888: LD_INT 4
58890: NEG
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 4
58898: PUSH
58899: LD_INT 0
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: LD_INT 4
58908: PUSH
58909: LD_INT 1
58911: NEG
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 5
58919: PUSH
58920: LD_INT 0
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: LD_INT 5
58929: PUSH
58930: LD_INT 1
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 4
58939: PUSH
58940: LD_INT 1
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: LD_INT 3
58949: PUSH
58950: LD_INT 0
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: LD_INT 3
58959: PUSH
58960: LD_INT 1
58962: NEG
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 3
58970: PUSH
58971: LD_INT 2
58973: NEG
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 5
58981: PUSH
58982: LD_INT 2
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: LD_INT 3
58991: PUSH
58992: LD_INT 3
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 3
59001: PUSH
59002: LD_INT 2
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 4
59011: PUSH
59012: LD_INT 3
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 4
59021: PUSH
59022: LD_INT 4
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: PUSH
59029: LD_INT 3
59031: PUSH
59032: LD_INT 4
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 2
59041: PUSH
59042: LD_INT 3
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: PUSH
59049: LD_INT 2
59051: PUSH
59052: LD_INT 2
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: LD_INT 4
59061: PUSH
59062: LD_INT 2
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: LD_INT 2
59071: PUSH
59072: LD_INT 4
59074: PUSH
59075: EMPTY
59076: LIST
59077: LIST
59078: PUSH
59079: LD_INT 0
59081: PUSH
59082: LD_INT 4
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: LD_INT 0
59091: PUSH
59092: LD_INT 3
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: LD_INT 1
59101: PUSH
59102: LD_INT 4
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 1
59111: PUSH
59112: LD_INT 5
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: LD_INT 0
59121: PUSH
59122: LD_INT 5
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: LD_INT 1
59131: NEG
59132: PUSH
59133: LD_INT 4
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PUSH
59140: LD_INT 1
59142: NEG
59143: PUSH
59144: LD_INT 3
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 2
59153: PUSH
59154: LD_INT 5
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 2
59163: NEG
59164: PUSH
59165: LD_INT 3
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: LIST
59189: LIST
59190: LIST
59191: LIST
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: LIST
59197: LIST
59198: LIST
59199: LIST
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: LIST
59205: LIST
59206: LIST
59207: LIST
59208: LIST
59209: LIST
59210: LIST
59211: LIST
59212: LIST
59213: LIST
59214: LIST
59215: LIST
59216: LIST
59217: LIST
59218: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59219: LD_ADDR_VAR 0 34
59223: PUSH
59224: LD_INT 0
59226: PUSH
59227: LD_INT 4
59229: NEG
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 0
59237: PUSH
59238: LD_INT 5
59240: NEG
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 1
59248: PUSH
59249: LD_INT 4
59251: NEG
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: PUSH
59257: LD_INT 1
59259: PUSH
59260: LD_INT 3
59262: NEG
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 0
59270: PUSH
59271: LD_INT 3
59273: NEG
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: LD_INT 1
59281: NEG
59282: PUSH
59283: LD_INT 4
59285: NEG
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: PUSH
59291: LD_INT 1
59293: NEG
59294: PUSH
59295: LD_INT 5
59297: NEG
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: LD_INT 2
59305: PUSH
59306: LD_INT 3
59308: NEG
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 2
59316: NEG
59317: PUSH
59318: LD_INT 5
59320: NEG
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: PUSH
59326: LD_INT 3
59328: PUSH
59329: LD_INT 0
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: LD_INT 3
59338: PUSH
59339: LD_INT 1
59341: NEG
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PUSH
59347: LD_INT 4
59349: PUSH
59350: LD_INT 0
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 4
59359: PUSH
59360: LD_INT 1
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 3
59369: PUSH
59370: LD_INT 1
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 2
59379: PUSH
59380: LD_INT 0
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 2
59389: PUSH
59390: LD_INT 1
59392: NEG
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 2
59400: PUSH
59401: LD_INT 2
59403: NEG
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 4
59411: PUSH
59412: LD_INT 2
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: LD_INT 4
59421: PUSH
59422: LD_INT 4
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: LD_INT 4
59431: PUSH
59432: LD_INT 3
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 5
59441: PUSH
59442: LD_INT 4
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 5
59451: PUSH
59452: LD_INT 5
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 4
59461: PUSH
59462: LD_INT 5
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 3
59471: PUSH
59472: LD_INT 4
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 3
59481: PUSH
59482: LD_INT 3
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: LD_INT 5
59491: PUSH
59492: LD_INT 3
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_INT 3
59501: PUSH
59502: LD_INT 5
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: LD_INT 0
59511: PUSH
59512: LD_INT 3
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 0
59521: PUSH
59522: LD_INT 2
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 1
59531: PUSH
59532: LD_INT 3
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 1
59541: PUSH
59542: LD_INT 4
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PUSH
59549: LD_INT 0
59551: PUSH
59552: LD_INT 4
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: LD_INT 1
59561: NEG
59562: PUSH
59563: LD_INT 3
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: PUSH
59570: LD_INT 1
59572: NEG
59573: PUSH
59574: LD_INT 2
59576: PUSH
59577: EMPTY
59578: LIST
59579: LIST
59580: PUSH
59581: LD_INT 2
59583: PUSH
59584: LD_INT 4
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: PUSH
59591: LD_INT 2
59593: NEG
59594: PUSH
59595: LD_INT 2
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: LD_INT 4
59604: NEG
59605: PUSH
59606: LD_INT 0
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 4
59615: NEG
59616: PUSH
59617: LD_INT 1
59619: NEG
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: LD_INT 3
59627: NEG
59628: PUSH
59629: LD_INT 0
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 3
59638: NEG
59639: PUSH
59640: LD_INT 1
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: LD_INT 4
59649: NEG
59650: PUSH
59651: LD_INT 1
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: PUSH
59658: LD_INT 5
59660: NEG
59661: PUSH
59662: LD_INT 0
59664: PUSH
59665: EMPTY
59666: LIST
59667: LIST
59668: PUSH
59669: LD_INT 5
59671: NEG
59672: PUSH
59673: LD_INT 1
59675: NEG
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: PUSH
59681: LD_INT 5
59683: NEG
59684: PUSH
59685: LD_INT 2
59687: NEG
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: PUSH
59693: LD_INT 3
59695: NEG
59696: PUSH
59697: LD_INT 2
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: LIST
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: ST_TO_ADDR
// end ; end ;
59751: GO 59754
59753: POP
// case btype of b_depot , b_warehouse :
59754: LD_VAR 0 1
59758: PUSH
59759: LD_INT 0
59761: DOUBLE
59762: EQUAL
59763: IFTRUE 59773
59765: LD_INT 1
59767: DOUBLE
59768: EQUAL
59769: IFTRUE 59773
59771: GO 59974
59773: POP
// case nation of nation_american :
59774: LD_VAR 0 5
59778: PUSH
59779: LD_INT 1
59781: DOUBLE
59782: EQUAL
59783: IFTRUE 59787
59785: GO 59843
59787: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
59788: LD_ADDR_VAR 0 9
59792: PUSH
59793: LD_VAR 0 11
59797: PUSH
59798: LD_VAR 0 12
59802: PUSH
59803: LD_VAR 0 13
59807: PUSH
59808: LD_VAR 0 14
59812: PUSH
59813: LD_VAR 0 15
59817: PUSH
59818: LD_VAR 0 16
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: LIST
59827: LIST
59828: LIST
59829: LIST
59830: PUSH
59831: LD_VAR 0 4
59835: PUSH
59836: LD_INT 1
59838: PLUS
59839: ARRAY
59840: ST_TO_ADDR
59841: GO 59972
59843: LD_INT 2
59845: DOUBLE
59846: EQUAL
59847: IFTRUE 59851
59849: GO 59907
59851: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59852: LD_ADDR_VAR 0 9
59856: PUSH
59857: LD_VAR 0 17
59861: PUSH
59862: LD_VAR 0 18
59866: PUSH
59867: LD_VAR 0 19
59871: PUSH
59872: LD_VAR 0 20
59876: PUSH
59877: LD_VAR 0 21
59881: PUSH
59882: LD_VAR 0 22
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: LIST
59891: LIST
59892: LIST
59893: LIST
59894: PUSH
59895: LD_VAR 0 4
59899: PUSH
59900: LD_INT 1
59902: PLUS
59903: ARRAY
59904: ST_TO_ADDR
59905: GO 59972
59907: LD_INT 3
59909: DOUBLE
59910: EQUAL
59911: IFTRUE 59915
59913: GO 59971
59915: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59916: LD_ADDR_VAR 0 9
59920: PUSH
59921: LD_VAR 0 23
59925: PUSH
59926: LD_VAR 0 24
59930: PUSH
59931: LD_VAR 0 25
59935: PUSH
59936: LD_VAR 0 26
59940: PUSH
59941: LD_VAR 0 27
59945: PUSH
59946: LD_VAR 0 28
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: PUSH
59959: LD_VAR 0 4
59963: PUSH
59964: LD_INT 1
59966: PLUS
59967: ARRAY
59968: ST_TO_ADDR
59969: GO 59972
59971: POP
59972: GO 60527
59974: LD_INT 2
59976: DOUBLE
59977: EQUAL
59978: IFTRUE 59988
59980: LD_INT 3
59982: DOUBLE
59983: EQUAL
59984: IFTRUE 59988
59986: GO 60044
59988: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59989: LD_ADDR_VAR 0 9
59993: PUSH
59994: LD_VAR 0 29
59998: PUSH
59999: LD_VAR 0 30
60003: PUSH
60004: LD_VAR 0 31
60008: PUSH
60009: LD_VAR 0 32
60013: PUSH
60014: LD_VAR 0 33
60018: PUSH
60019: LD_VAR 0 34
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: LIST
60028: LIST
60029: LIST
60030: LIST
60031: PUSH
60032: LD_VAR 0 4
60036: PUSH
60037: LD_INT 1
60039: PLUS
60040: ARRAY
60041: ST_TO_ADDR
60042: GO 60527
60044: LD_INT 16
60046: DOUBLE
60047: EQUAL
60048: IFTRUE 60106
60050: LD_INT 17
60052: DOUBLE
60053: EQUAL
60054: IFTRUE 60106
60056: LD_INT 18
60058: DOUBLE
60059: EQUAL
60060: IFTRUE 60106
60062: LD_INT 19
60064: DOUBLE
60065: EQUAL
60066: IFTRUE 60106
60068: LD_INT 22
60070: DOUBLE
60071: EQUAL
60072: IFTRUE 60106
60074: LD_INT 20
60076: DOUBLE
60077: EQUAL
60078: IFTRUE 60106
60080: LD_INT 21
60082: DOUBLE
60083: EQUAL
60084: IFTRUE 60106
60086: LD_INT 23
60088: DOUBLE
60089: EQUAL
60090: IFTRUE 60106
60092: LD_INT 24
60094: DOUBLE
60095: EQUAL
60096: IFTRUE 60106
60098: LD_INT 25
60100: DOUBLE
60101: EQUAL
60102: IFTRUE 60106
60104: GO 60162
60106: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60107: LD_ADDR_VAR 0 9
60111: PUSH
60112: LD_VAR 0 35
60116: PUSH
60117: LD_VAR 0 36
60121: PUSH
60122: LD_VAR 0 37
60126: PUSH
60127: LD_VAR 0 38
60131: PUSH
60132: LD_VAR 0 39
60136: PUSH
60137: LD_VAR 0 40
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: LIST
60146: LIST
60147: LIST
60148: LIST
60149: PUSH
60150: LD_VAR 0 4
60154: PUSH
60155: LD_INT 1
60157: PLUS
60158: ARRAY
60159: ST_TO_ADDR
60160: GO 60527
60162: LD_INT 6
60164: DOUBLE
60165: EQUAL
60166: IFTRUE 60218
60168: LD_INT 7
60170: DOUBLE
60171: EQUAL
60172: IFTRUE 60218
60174: LD_INT 8
60176: DOUBLE
60177: EQUAL
60178: IFTRUE 60218
60180: LD_INT 13
60182: DOUBLE
60183: EQUAL
60184: IFTRUE 60218
60186: LD_INT 12
60188: DOUBLE
60189: EQUAL
60190: IFTRUE 60218
60192: LD_INT 15
60194: DOUBLE
60195: EQUAL
60196: IFTRUE 60218
60198: LD_INT 11
60200: DOUBLE
60201: EQUAL
60202: IFTRUE 60218
60204: LD_INT 14
60206: DOUBLE
60207: EQUAL
60208: IFTRUE 60218
60210: LD_INT 10
60212: DOUBLE
60213: EQUAL
60214: IFTRUE 60218
60216: GO 60274
60218: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
60219: LD_ADDR_VAR 0 9
60223: PUSH
60224: LD_VAR 0 41
60228: PUSH
60229: LD_VAR 0 42
60233: PUSH
60234: LD_VAR 0 43
60238: PUSH
60239: LD_VAR 0 44
60243: PUSH
60244: LD_VAR 0 45
60248: PUSH
60249: LD_VAR 0 46
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: LIST
60258: LIST
60259: LIST
60260: LIST
60261: PUSH
60262: LD_VAR 0 4
60266: PUSH
60267: LD_INT 1
60269: PLUS
60270: ARRAY
60271: ST_TO_ADDR
60272: GO 60527
60274: LD_INT 36
60276: DOUBLE
60277: EQUAL
60278: IFTRUE 60282
60280: GO 60338
60282: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
60283: LD_ADDR_VAR 0 9
60287: PUSH
60288: LD_VAR 0 47
60292: PUSH
60293: LD_VAR 0 48
60297: PUSH
60298: LD_VAR 0 49
60302: PUSH
60303: LD_VAR 0 50
60307: PUSH
60308: LD_VAR 0 51
60312: PUSH
60313: LD_VAR 0 52
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: LIST
60322: LIST
60323: LIST
60324: LIST
60325: PUSH
60326: LD_VAR 0 4
60330: PUSH
60331: LD_INT 1
60333: PLUS
60334: ARRAY
60335: ST_TO_ADDR
60336: GO 60527
60338: LD_INT 4
60340: DOUBLE
60341: EQUAL
60342: IFTRUE 60364
60344: LD_INT 5
60346: DOUBLE
60347: EQUAL
60348: IFTRUE 60364
60350: LD_INT 34
60352: DOUBLE
60353: EQUAL
60354: IFTRUE 60364
60356: LD_INT 37
60358: DOUBLE
60359: EQUAL
60360: IFTRUE 60364
60362: GO 60420
60364: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
60365: LD_ADDR_VAR 0 9
60369: PUSH
60370: LD_VAR 0 53
60374: PUSH
60375: LD_VAR 0 54
60379: PUSH
60380: LD_VAR 0 55
60384: PUSH
60385: LD_VAR 0 56
60389: PUSH
60390: LD_VAR 0 57
60394: PUSH
60395: LD_VAR 0 58
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: LIST
60407: PUSH
60408: LD_VAR 0 4
60412: PUSH
60413: LD_INT 1
60415: PLUS
60416: ARRAY
60417: ST_TO_ADDR
60418: GO 60527
60420: LD_INT 31
60422: DOUBLE
60423: EQUAL
60424: IFTRUE 60470
60426: LD_INT 32
60428: DOUBLE
60429: EQUAL
60430: IFTRUE 60470
60432: LD_INT 33
60434: DOUBLE
60435: EQUAL
60436: IFTRUE 60470
60438: LD_INT 27
60440: DOUBLE
60441: EQUAL
60442: IFTRUE 60470
60444: LD_INT 26
60446: DOUBLE
60447: EQUAL
60448: IFTRUE 60470
60450: LD_INT 28
60452: DOUBLE
60453: EQUAL
60454: IFTRUE 60470
60456: LD_INT 29
60458: DOUBLE
60459: EQUAL
60460: IFTRUE 60470
60462: LD_INT 30
60464: DOUBLE
60465: EQUAL
60466: IFTRUE 60470
60468: GO 60526
60470: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
60471: LD_ADDR_VAR 0 9
60475: PUSH
60476: LD_VAR 0 59
60480: PUSH
60481: LD_VAR 0 60
60485: PUSH
60486: LD_VAR 0 61
60490: PUSH
60491: LD_VAR 0 62
60495: PUSH
60496: LD_VAR 0 63
60500: PUSH
60501: LD_VAR 0 64
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: LIST
60510: LIST
60511: LIST
60512: LIST
60513: PUSH
60514: LD_VAR 0 4
60518: PUSH
60519: LD_INT 1
60521: PLUS
60522: ARRAY
60523: ST_TO_ADDR
60524: GO 60527
60526: POP
// temp_list2 = [ ] ;
60527: LD_ADDR_VAR 0 10
60531: PUSH
60532: EMPTY
60533: ST_TO_ADDR
// for i in temp_list do
60534: LD_ADDR_VAR 0 8
60538: PUSH
60539: LD_VAR 0 9
60543: PUSH
60544: FOR_IN
60545: IFFALSE 60597
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
60547: LD_ADDR_VAR 0 10
60551: PUSH
60552: LD_VAR 0 10
60556: PUSH
60557: LD_VAR 0 8
60561: PUSH
60562: LD_INT 1
60564: ARRAY
60565: PUSH
60566: LD_VAR 0 2
60570: PLUS
60571: PUSH
60572: LD_VAR 0 8
60576: PUSH
60577: LD_INT 2
60579: ARRAY
60580: PUSH
60581: LD_VAR 0 3
60585: PLUS
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PUSH
60591: EMPTY
60592: LIST
60593: ADD
60594: ST_TO_ADDR
60595: GO 60544
60597: POP
60598: POP
// result = temp_list2 ;
60599: LD_ADDR_VAR 0 7
60603: PUSH
60604: LD_VAR 0 10
60608: ST_TO_ADDR
// end ;
60609: LD_VAR 0 7
60613: RET
// export function EnemyInRange ( unit , dist ) ; begin
60614: LD_INT 0
60616: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
60617: LD_ADDR_VAR 0 3
60621: PUSH
60622: LD_VAR 0 1
60626: PPUSH
60627: CALL_OW 255
60631: PPUSH
60632: LD_VAR 0 1
60636: PPUSH
60637: CALL_OW 250
60641: PPUSH
60642: LD_VAR 0 1
60646: PPUSH
60647: CALL_OW 251
60651: PPUSH
60652: LD_VAR 0 2
60656: PPUSH
60657: CALL 33987 0 4
60661: PUSH
60662: LD_INT 4
60664: ARRAY
60665: ST_TO_ADDR
// end ;
60666: LD_VAR 0 3
60670: RET
// export function PlayerSeeMe ( unit ) ; begin
60671: LD_INT 0
60673: PPUSH
// result := See ( your_side , unit ) ;
60674: LD_ADDR_VAR 0 2
60678: PUSH
60679: LD_OWVAR 2
60683: PPUSH
60684: LD_VAR 0 1
60688: PPUSH
60689: CALL_OW 292
60693: ST_TO_ADDR
// end ;
60694: LD_VAR 0 2
60698: RET
// export function ReverseDir ( unit ) ; begin
60699: LD_INT 0
60701: PPUSH
// if not unit then
60702: LD_VAR 0 1
60706: NOT
60707: IFFALSE 60711
// exit ;
60709: GO 60734
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
60711: LD_ADDR_VAR 0 2
60715: PUSH
60716: LD_VAR 0 1
60720: PPUSH
60721: CALL_OW 254
60725: PUSH
60726: LD_INT 3
60728: PLUS
60729: PUSH
60730: LD_INT 6
60732: MOD
60733: ST_TO_ADDR
// end ;
60734: LD_VAR 0 2
60738: RET
// export function ReverseArray ( array ) ; var i ; begin
60739: LD_INT 0
60741: PPUSH
60742: PPUSH
// if not array then
60743: LD_VAR 0 1
60747: NOT
60748: IFFALSE 60752
// exit ;
60750: GO 60807
// result := [ ] ;
60752: LD_ADDR_VAR 0 2
60756: PUSH
60757: EMPTY
60758: ST_TO_ADDR
// for i := array downto 1 do
60759: LD_ADDR_VAR 0 3
60763: PUSH
60764: DOUBLE
60765: LD_VAR 0 1
60769: INC
60770: ST_TO_ADDR
60771: LD_INT 1
60773: PUSH
60774: FOR_DOWNTO
60775: IFFALSE 60805
// result := Join ( result , array [ i ] ) ;
60777: LD_ADDR_VAR 0 2
60781: PUSH
60782: LD_VAR 0 2
60786: PPUSH
60787: LD_VAR 0 1
60791: PUSH
60792: LD_VAR 0 3
60796: ARRAY
60797: PPUSH
60798: CALL 65452 0 2
60802: ST_TO_ADDR
60803: GO 60774
60805: POP
60806: POP
// end ;
60807: LD_VAR 0 2
60811: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
60812: LD_INT 0
60814: PPUSH
60815: PPUSH
60816: PPUSH
60817: PPUSH
60818: PPUSH
60819: PPUSH
// if not unit or not hexes then
60820: LD_VAR 0 1
60824: NOT
60825: PUSH
60826: LD_VAR 0 2
60830: NOT
60831: OR
60832: IFFALSE 60836
// exit ;
60834: GO 60959
// dist := 9999 ;
60836: LD_ADDR_VAR 0 5
60840: PUSH
60841: LD_INT 9999
60843: ST_TO_ADDR
// for i = 1 to hexes do
60844: LD_ADDR_VAR 0 4
60848: PUSH
60849: DOUBLE
60850: LD_INT 1
60852: DEC
60853: ST_TO_ADDR
60854: LD_VAR 0 2
60858: PUSH
60859: FOR_TO
60860: IFFALSE 60947
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60862: LD_ADDR_VAR 0 6
60866: PUSH
60867: LD_VAR 0 1
60871: PPUSH
60872: LD_VAR 0 2
60876: PUSH
60877: LD_VAR 0 4
60881: ARRAY
60882: PUSH
60883: LD_INT 1
60885: ARRAY
60886: PPUSH
60887: LD_VAR 0 2
60891: PUSH
60892: LD_VAR 0 4
60896: ARRAY
60897: PUSH
60898: LD_INT 2
60900: ARRAY
60901: PPUSH
60902: CALL_OW 297
60906: ST_TO_ADDR
// if tdist < dist then
60907: LD_VAR 0 6
60911: PUSH
60912: LD_VAR 0 5
60916: LESS
60917: IFFALSE 60945
// begin hex := hexes [ i ] ;
60919: LD_ADDR_VAR 0 8
60923: PUSH
60924: LD_VAR 0 2
60928: PUSH
60929: LD_VAR 0 4
60933: ARRAY
60934: ST_TO_ADDR
// dist := tdist ;
60935: LD_ADDR_VAR 0 5
60939: PUSH
60940: LD_VAR 0 6
60944: ST_TO_ADDR
// end ; end ;
60945: GO 60859
60947: POP
60948: POP
// result := hex ;
60949: LD_ADDR_VAR 0 3
60953: PUSH
60954: LD_VAR 0 8
60958: ST_TO_ADDR
// end ;
60959: LD_VAR 0 3
60963: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60964: LD_INT 0
60966: PPUSH
60967: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60968: LD_VAR 0 1
60972: NOT
60973: PUSH
60974: LD_VAR 0 1
60978: PUSH
60979: LD_INT 21
60981: PUSH
60982: LD_INT 2
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 23
60991: PUSH
60992: LD_INT 2
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: PPUSH
61003: CALL_OW 69
61007: IN
61008: NOT
61009: OR
61010: IFFALSE 61014
// exit ;
61012: GO 61061
// for i = 1 to 3 do
61014: LD_ADDR_VAR 0 3
61018: PUSH
61019: DOUBLE
61020: LD_INT 1
61022: DEC
61023: ST_TO_ADDR
61024: LD_INT 3
61026: PUSH
61027: FOR_TO
61028: IFFALSE 61059
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61030: LD_VAR 0 1
61034: PPUSH
61035: CALL_OW 250
61039: PPUSH
61040: LD_VAR 0 1
61044: PPUSH
61045: CALL_OW 251
61049: PPUSH
61050: LD_INT 1
61052: PPUSH
61053: CALL_OW 453
61057: GO 61027
61059: POP
61060: POP
// end ;
61061: LD_VAR 0 2
61065: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61066: LD_INT 0
61068: PPUSH
61069: PPUSH
61070: PPUSH
61071: PPUSH
61072: PPUSH
61073: PPUSH
// if not unit or not enemy_unit then
61074: LD_VAR 0 1
61078: NOT
61079: PUSH
61080: LD_VAR 0 2
61084: NOT
61085: OR
61086: IFFALSE 61090
// exit ;
61088: GO 61557
// if GetLives ( i ) < 250 then
61090: LD_VAR 0 4
61094: PPUSH
61095: CALL_OW 256
61099: PUSH
61100: LD_INT 250
61102: LESS
61103: IFFALSE 61116
// begin ComAutodestruct ( i ) ;
61105: LD_VAR 0 4
61109: PPUSH
61110: CALL 60964 0 1
// exit ;
61114: GO 61557
// end ; x := GetX ( enemy_unit ) ;
61116: LD_ADDR_VAR 0 7
61120: PUSH
61121: LD_VAR 0 2
61125: PPUSH
61126: CALL_OW 250
61130: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61131: LD_ADDR_VAR 0 8
61135: PUSH
61136: LD_VAR 0 2
61140: PPUSH
61141: CALL_OW 251
61145: ST_TO_ADDR
// if not x or not y then
61146: LD_VAR 0 7
61150: NOT
61151: PUSH
61152: LD_VAR 0 8
61156: NOT
61157: OR
61158: IFFALSE 61162
// exit ;
61160: GO 61557
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
61162: LD_ADDR_VAR 0 6
61166: PUSH
61167: LD_VAR 0 7
61171: PPUSH
61172: LD_INT 0
61174: PPUSH
61175: LD_INT 4
61177: PPUSH
61178: CALL_OW 272
61182: PUSH
61183: LD_VAR 0 8
61187: PPUSH
61188: LD_INT 0
61190: PPUSH
61191: LD_INT 4
61193: PPUSH
61194: CALL_OW 273
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: LD_VAR 0 7
61207: PPUSH
61208: LD_INT 1
61210: PPUSH
61211: LD_INT 4
61213: PPUSH
61214: CALL_OW 272
61218: PUSH
61219: LD_VAR 0 8
61223: PPUSH
61224: LD_INT 1
61226: PPUSH
61227: LD_INT 4
61229: PPUSH
61230: CALL_OW 273
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: PUSH
61239: LD_VAR 0 7
61243: PPUSH
61244: LD_INT 2
61246: PPUSH
61247: LD_INT 4
61249: PPUSH
61250: CALL_OW 272
61254: PUSH
61255: LD_VAR 0 8
61259: PPUSH
61260: LD_INT 2
61262: PPUSH
61263: LD_INT 4
61265: PPUSH
61266: CALL_OW 273
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PUSH
61275: LD_VAR 0 7
61279: PPUSH
61280: LD_INT 3
61282: PPUSH
61283: LD_INT 4
61285: PPUSH
61286: CALL_OW 272
61290: PUSH
61291: LD_VAR 0 8
61295: PPUSH
61296: LD_INT 3
61298: PPUSH
61299: LD_INT 4
61301: PPUSH
61302: CALL_OW 273
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_VAR 0 7
61315: PPUSH
61316: LD_INT 4
61318: PPUSH
61319: LD_INT 4
61321: PPUSH
61322: CALL_OW 272
61326: PUSH
61327: LD_VAR 0 8
61331: PPUSH
61332: LD_INT 4
61334: PPUSH
61335: LD_INT 4
61337: PPUSH
61338: CALL_OW 273
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: LD_VAR 0 7
61351: PPUSH
61352: LD_INT 5
61354: PPUSH
61355: LD_INT 4
61357: PPUSH
61358: CALL_OW 272
61362: PUSH
61363: LD_VAR 0 8
61367: PPUSH
61368: LD_INT 5
61370: PPUSH
61371: LD_INT 4
61373: PPUSH
61374: CALL_OW 273
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: ST_TO_ADDR
// for i = tmp downto 1 do
61391: LD_ADDR_VAR 0 4
61395: PUSH
61396: DOUBLE
61397: LD_VAR 0 6
61401: INC
61402: ST_TO_ADDR
61403: LD_INT 1
61405: PUSH
61406: FOR_DOWNTO
61407: IFFALSE 61508
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
61409: LD_VAR 0 6
61413: PUSH
61414: LD_VAR 0 4
61418: ARRAY
61419: PUSH
61420: LD_INT 1
61422: ARRAY
61423: PPUSH
61424: LD_VAR 0 6
61428: PUSH
61429: LD_VAR 0 4
61433: ARRAY
61434: PUSH
61435: LD_INT 2
61437: ARRAY
61438: PPUSH
61439: CALL_OW 488
61443: NOT
61444: PUSH
61445: LD_VAR 0 6
61449: PUSH
61450: LD_VAR 0 4
61454: ARRAY
61455: PUSH
61456: LD_INT 1
61458: ARRAY
61459: PPUSH
61460: LD_VAR 0 6
61464: PUSH
61465: LD_VAR 0 4
61469: ARRAY
61470: PUSH
61471: LD_INT 2
61473: ARRAY
61474: PPUSH
61475: CALL_OW 428
61479: PUSH
61480: LD_INT 0
61482: NONEQUAL
61483: OR
61484: IFFALSE 61506
// tmp := Delete ( tmp , i ) ;
61486: LD_ADDR_VAR 0 6
61490: PUSH
61491: LD_VAR 0 6
61495: PPUSH
61496: LD_VAR 0 4
61500: PPUSH
61501: CALL_OW 3
61505: ST_TO_ADDR
61506: GO 61406
61508: POP
61509: POP
// j := GetClosestHex ( unit , tmp ) ;
61510: LD_ADDR_VAR 0 5
61514: PUSH
61515: LD_VAR 0 1
61519: PPUSH
61520: LD_VAR 0 6
61524: PPUSH
61525: CALL 60812 0 2
61529: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
61530: LD_VAR 0 1
61534: PPUSH
61535: LD_VAR 0 5
61539: PUSH
61540: LD_INT 1
61542: ARRAY
61543: PPUSH
61544: LD_VAR 0 5
61548: PUSH
61549: LD_INT 2
61551: ARRAY
61552: PPUSH
61553: CALL_OW 111
// end ;
61557: LD_VAR 0 3
61561: RET
// export function PrepareApemanSoldier ( ) ; begin
61562: LD_INT 0
61564: PPUSH
// uc_nation := 0 ;
61565: LD_ADDR_OWVAR 21
61569: PUSH
61570: LD_INT 0
61572: ST_TO_ADDR
// hc_sex := sex_male ;
61573: LD_ADDR_OWVAR 27
61577: PUSH
61578: LD_INT 1
61580: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
61581: LD_ADDR_OWVAR 28
61585: PUSH
61586: LD_INT 15
61588: ST_TO_ADDR
// hc_gallery :=  ;
61589: LD_ADDR_OWVAR 33
61593: PUSH
61594: LD_STRING 
61596: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61597: LD_ADDR_OWVAR 31
61601: PUSH
61602: LD_INT 0
61604: PPUSH
61605: LD_INT 3
61607: PPUSH
61608: CALL_OW 12
61612: PUSH
61613: LD_INT 0
61615: PPUSH
61616: LD_INT 3
61618: PPUSH
61619: CALL_OW 12
61623: PUSH
61624: LD_INT 0
61626: PUSH
61627: LD_INT 0
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: LIST
61634: LIST
61635: ST_TO_ADDR
// end ;
61636: LD_VAR 0 1
61640: RET
// export function PrepareApemanEngineer ( ) ; begin
61641: LD_INT 0
61643: PPUSH
// uc_nation := 0 ;
61644: LD_ADDR_OWVAR 21
61648: PUSH
61649: LD_INT 0
61651: ST_TO_ADDR
// hc_sex := sex_male ;
61652: LD_ADDR_OWVAR 27
61656: PUSH
61657: LD_INT 1
61659: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
61660: LD_ADDR_OWVAR 28
61664: PUSH
61665: LD_INT 16
61667: ST_TO_ADDR
// hc_gallery :=  ;
61668: LD_ADDR_OWVAR 33
61672: PUSH
61673: LD_STRING 
61675: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61676: LD_ADDR_OWVAR 31
61680: PUSH
61681: LD_INT 0
61683: PPUSH
61684: LD_INT 3
61686: PPUSH
61687: CALL_OW 12
61691: PUSH
61692: LD_INT 0
61694: PPUSH
61695: LD_INT 3
61697: PPUSH
61698: CALL_OW 12
61702: PUSH
61703: LD_INT 0
61705: PUSH
61706: LD_INT 0
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: ST_TO_ADDR
// end ;
61715: LD_VAR 0 1
61719: RET
// export function PrepareApeman ( agressivity ) ; begin
61720: LD_INT 0
61722: PPUSH
// uc_side := 0 ;
61723: LD_ADDR_OWVAR 20
61727: PUSH
61728: LD_INT 0
61730: ST_TO_ADDR
// uc_nation := 0 ;
61731: LD_ADDR_OWVAR 21
61735: PUSH
61736: LD_INT 0
61738: ST_TO_ADDR
// hc_sex := sex_male ;
61739: LD_ADDR_OWVAR 27
61743: PUSH
61744: LD_INT 1
61746: ST_TO_ADDR
// hc_class := class_apeman ;
61747: LD_ADDR_OWVAR 28
61751: PUSH
61752: LD_INT 12
61754: ST_TO_ADDR
// hc_gallery :=  ;
61755: LD_ADDR_OWVAR 33
61759: PUSH
61760: LD_STRING 
61762: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61763: LD_ADDR_OWVAR 35
61767: PUSH
61768: LD_VAR 0 1
61772: NEG
61773: PPUSH
61774: LD_VAR 0 1
61778: PPUSH
61779: CALL_OW 12
61783: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61784: LD_ADDR_OWVAR 31
61788: PUSH
61789: LD_INT 0
61791: PPUSH
61792: LD_INT 3
61794: PPUSH
61795: CALL_OW 12
61799: PUSH
61800: LD_INT 0
61802: PPUSH
61803: LD_INT 3
61805: PPUSH
61806: CALL_OW 12
61810: PUSH
61811: LD_INT 0
61813: PUSH
61814: LD_INT 0
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: ST_TO_ADDR
// end ;
61823: LD_VAR 0 2
61827: RET
// export function PrepareTiger ( agressivity ) ; begin
61828: LD_INT 0
61830: PPUSH
// uc_side := 0 ;
61831: LD_ADDR_OWVAR 20
61835: PUSH
61836: LD_INT 0
61838: ST_TO_ADDR
// uc_nation := 0 ;
61839: LD_ADDR_OWVAR 21
61843: PUSH
61844: LD_INT 0
61846: ST_TO_ADDR
// hc_class := class_tiger ;
61847: LD_ADDR_OWVAR 28
61851: PUSH
61852: LD_INT 14
61854: ST_TO_ADDR
// hc_gallery :=  ;
61855: LD_ADDR_OWVAR 33
61859: PUSH
61860: LD_STRING 
61862: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61863: LD_ADDR_OWVAR 35
61867: PUSH
61868: LD_VAR 0 1
61872: NEG
61873: PPUSH
61874: LD_VAR 0 1
61878: PPUSH
61879: CALL_OW 12
61883: ST_TO_ADDR
// end ;
61884: LD_VAR 0 2
61888: RET
// export function PrepareEnchidna ( ) ; begin
61889: LD_INT 0
61891: PPUSH
// uc_side := 0 ;
61892: LD_ADDR_OWVAR 20
61896: PUSH
61897: LD_INT 0
61899: ST_TO_ADDR
// uc_nation := 0 ;
61900: LD_ADDR_OWVAR 21
61904: PUSH
61905: LD_INT 0
61907: ST_TO_ADDR
// hc_class := class_baggie ;
61908: LD_ADDR_OWVAR 28
61912: PUSH
61913: LD_INT 13
61915: ST_TO_ADDR
// hc_gallery :=  ;
61916: LD_ADDR_OWVAR 33
61920: PUSH
61921: LD_STRING 
61923: ST_TO_ADDR
// end ;
61924: LD_VAR 0 1
61928: RET
// export function PrepareFrog ( ) ; begin
61929: LD_INT 0
61931: PPUSH
// uc_side := 0 ;
61932: LD_ADDR_OWVAR 20
61936: PUSH
61937: LD_INT 0
61939: ST_TO_ADDR
// uc_nation := 0 ;
61940: LD_ADDR_OWVAR 21
61944: PUSH
61945: LD_INT 0
61947: ST_TO_ADDR
// hc_class := class_frog ;
61948: LD_ADDR_OWVAR 28
61952: PUSH
61953: LD_INT 19
61955: ST_TO_ADDR
// hc_gallery :=  ;
61956: LD_ADDR_OWVAR 33
61960: PUSH
61961: LD_STRING 
61963: ST_TO_ADDR
// end ;
61964: LD_VAR 0 1
61968: RET
// export function PrepareFish ( ) ; begin
61969: LD_INT 0
61971: PPUSH
// uc_side := 0 ;
61972: LD_ADDR_OWVAR 20
61976: PUSH
61977: LD_INT 0
61979: ST_TO_ADDR
// uc_nation := 0 ;
61980: LD_ADDR_OWVAR 21
61984: PUSH
61985: LD_INT 0
61987: ST_TO_ADDR
// hc_class := class_fish ;
61988: LD_ADDR_OWVAR 28
61992: PUSH
61993: LD_INT 20
61995: ST_TO_ADDR
// hc_gallery :=  ;
61996: LD_ADDR_OWVAR 33
62000: PUSH
62001: LD_STRING 
62003: ST_TO_ADDR
// end ;
62004: LD_VAR 0 1
62008: RET
// export function PrepareBird ( ) ; begin
62009: LD_INT 0
62011: PPUSH
// uc_side := 0 ;
62012: LD_ADDR_OWVAR 20
62016: PUSH
62017: LD_INT 0
62019: ST_TO_ADDR
// uc_nation := 0 ;
62020: LD_ADDR_OWVAR 21
62024: PUSH
62025: LD_INT 0
62027: ST_TO_ADDR
// hc_class := class_phororhacos ;
62028: LD_ADDR_OWVAR 28
62032: PUSH
62033: LD_INT 18
62035: ST_TO_ADDR
// hc_gallery :=  ;
62036: LD_ADDR_OWVAR 33
62040: PUSH
62041: LD_STRING 
62043: ST_TO_ADDR
// end ;
62044: LD_VAR 0 1
62048: RET
// export function PrepareHorse ( ) ; begin
62049: LD_INT 0
62051: PPUSH
// uc_side := 0 ;
62052: LD_ADDR_OWVAR 20
62056: PUSH
62057: LD_INT 0
62059: ST_TO_ADDR
// uc_nation := 0 ;
62060: LD_ADDR_OWVAR 21
62064: PUSH
62065: LD_INT 0
62067: ST_TO_ADDR
// hc_class := class_horse ;
62068: LD_ADDR_OWVAR 28
62072: PUSH
62073: LD_INT 21
62075: ST_TO_ADDR
// hc_gallery :=  ;
62076: LD_ADDR_OWVAR 33
62080: PUSH
62081: LD_STRING 
62083: ST_TO_ADDR
// end ;
62084: LD_VAR 0 1
62088: RET
// export function PrepareMastodont ( ) ; begin
62089: LD_INT 0
62091: PPUSH
// uc_side := 0 ;
62092: LD_ADDR_OWVAR 20
62096: PUSH
62097: LD_INT 0
62099: ST_TO_ADDR
// uc_nation := 0 ;
62100: LD_ADDR_OWVAR 21
62104: PUSH
62105: LD_INT 0
62107: ST_TO_ADDR
// vc_chassis := class_mastodont ;
62108: LD_ADDR_OWVAR 37
62112: PUSH
62113: LD_INT 31
62115: ST_TO_ADDR
// vc_control := control_rider ;
62116: LD_ADDR_OWVAR 38
62120: PUSH
62121: LD_INT 4
62123: ST_TO_ADDR
// end ;
62124: LD_VAR 0 1
62128: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62129: LD_INT 0
62131: PPUSH
62132: PPUSH
62133: PPUSH
// uc_side = 0 ;
62134: LD_ADDR_OWVAR 20
62138: PUSH
62139: LD_INT 0
62141: ST_TO_ADDR
// uc_nation = 0 ;
62142: LD_ADDR_OWVAR 21
62146: PUSH
62147: LD_INT 0
62149: ST_TO_ADDR
// InitHc_All ( ) ;
62150: CALL_OW 584
// InitVc ;
62154: CALL_OW 20
// if mastodonts then
62158: LD_VAR 0 6
62162: IFFALSE 62229
// for i = 1 to mastodonts do
62164: LD_ADDR_VAR 0 11
62168: PUSH
62169: DOUBLE
62170: LD_INT 1
62172: DEC
62173: ST_TO_ADDR
62174: LD_VAR 0 6
62178: PUSH
62179: FOR_TO
62180: IFFALSE 62227
// begin vc_chassis := 31 ;
62182: LD_ADDR_OWVAR 37
62186: PUSH
62187: LD_INT 31
62189: ST_TO_ADDR
// vc_control := control_rider ;
62190: LD_ADDR_OWVAR 38
62194: PUSH
62195: LD_INT 4
62197: ST_TO_ADDR
// animal := CreateVehicle ;
62198: LD_ADDR_VAR 0 12
62202: PUSH
62203: CALL_OW 45
62207: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62208: LD_VAR 0 12
62212: PPUSH
62213: LD_VAR 0 8
62217: PPUSH
62218: LD_INT 0
62220: PPUSH
62221: CALL 64357 0 3
// end ;
62225: GO 62179
62227: POP
62228: POP
// if horses then
62229: LD_VAR 0 5
62233: IFFALSE 62300
// for i = 1 to horses do
62235: LD_ADDR_VAR 0 11
62239: PUSH
62240: DOUBLE
62241: LD_INT 1
62243: DEC
62244: ST_TO_ADDR
62245: LD_VAR 0 5
62249: PUSH
62250: FOR_TO
62251: IFFALSE 62298
// begin hc_class := 21 ;
62253: LD_ADDR_OWVAR 28
62257: PUSH
62258: LD_INT 21
62260: ST_TO_ADDR
// hc_gallery :=  ;
62261: LD_ADDR_OWVAR 33
62265: PUSH
62266: LD_STRING 
62268: ST_TO_ADDR
// animal := CreateHuman ;
62269: LD_ADDR_VAR 0 12
62273: PUSH
62274: CALL_OW 44
62278: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62279: LD_VAR 0 12
62283: PPUSH
62284: LD_VAR 0 8
62288: PPUSH
62289: LD_INT 0
62291: PPUSH
62292: CALL 64357 0 3
// end ;
62296: GO 62250
62298: POP
62299: POP
// if birds then
62300: LD_VAR 0 1
62304: IFFALSE 62371
// for i = 1 to birds do
62306: LD_ADDR_VAR 0 11
62310: PUSH
62311: DOUBLE
62312: LD_INT 1
62314: DEC
62315: ST_TO_ADDR
62316: LD_VAR 0 1
62320: PUSH
62321: FOR_TO
62322: IFFALSE 62369
// begin hc_class := 18 ;
62324: LD_ADDR_OWVAR 28
62328: PUSH
62329: LD_INT 18
62331: ST_TO_ADDR
// hc_gallery =  ;
62332: LD_ADDR_OWVAR 33
62336: PUSH
62337: LD_STRING 
62339: ST_TO_ADDR
// animal := CreateHuman ;
62340: LD_ADDR_VAR 0 12
62344: PUSH
62345: CALL_OW 44
62349: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62350: LD_VAR 0 12
62354: PPUSH
62355: LD_VAR 0 8
62359: PPUSH
62360: LD_INT 0
62362: PPUSH
62363: CALL 64357 0 3
// end ;
62367: GO 62321
62369: POP
62370: POP
// if tigers then
62371: LD_VAR 0 2
62375: IFFALSE 62459
// for i = 1 to tigers do
62377: LD_ADDR_VAR 0 11
62381: PUSH
62382: DOUBLE
62383: LD_INT 1
62385: DEC
62386: ST_TO_ADDR
62387: LD_VAR 0 2
62391: PUSH
62392: FOR_TO
62393: IFFALSE 62457
// begin hc_class = class_tiger ;
62395: LD_ADDR_OWVAR 28
62399: PUSH
62400: LD_INT 14
62402: ST_TO_ADDR
// hc_gallery =  ;
62403: LD_ADDR_OWVAR 33
62407: PUSH
62408: LD_STRING 
62410: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
62411: LD_ADDR_OWVAR 35
62415: PUSH
62416: LD_INT 7
62418: NEG
62419: PPUSH
62420: LD_INT 7
62422: PPUSH
62423: CALL_OW 12
62427: ST_TO_ADDR
// animal := CreateHuman ;
62428: LD_ADDR_VAR 0 12
62432: PUSH
62433: CALL_OW 44
62437: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62438: LD_VAR 0 12
62442: PPUSH
62443: LD_VAR 0 8
62447: PPUSH
62448: LD_INT 0
62450: PPUSH
62451: CALL 64357 0 3
// end ;
62455: GO 62392
62457: POP
62458: POP
// if apemans then
62459: LD_VAR 0 3
62463: IFFALSE 62586
// for i = 1 to apemans do
62465: LD_ADDR_VAR 0 11
62469: PUSH
62470: DOUBLE
62471: LD_INT 1
62473: DEC
62474: ST_TO_ADDR
62475: LD_VAR 0 3
62479: PUSH
62480: FOR_TO
62481: IFFALSE 62584
// begin hc_class = class_apeman ;
62483: LD_ADDR_OWVAR 28
62487: PUSH
62488: LD_INT 12
62490: ST_TO_ADDR
// hc_gallery =  ;
62491: LD_ADDR_OWVAR 33
62495: PUSH
62496: LD_STRING 
62498: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
62499: LD_ADDR_OWVAR 35
62503: PUSH
62504: LD_INT 2
62506: NEG
62507: PPUSH
62508: LD_INT 2
62510: PPUSH
62511: CALL_OW 12
62515: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
62516: LD_ADDR_OWVAR 31
62520: PUSH
62521: LD_INT 1
62523: PPUSH
62524: LD_INT 3
62526: PPUSH
62527: CALL_OW 12
62531: PUSH
62532: LD_INT 1
62534: PPUSH
62535: LD_INT 3
62537: PPUSH
62538: CALL_OW 12
62542: PUSH
62543: LD_INT 0
62545: PUSH
62546: LD_INT 0
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: LIST
62553: LIST
62554: ST_TO_ADDR
// animal := CreateHuman ;
62555: LD_ADDR_VAR 0 12
62559: PUSH
62560: CALL_OW 44
62564: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62565: LD_VAR 0 12
62569: PPUSH
62570: LD_VAR 0 8
62574: PPUSH
62575: LD_INT 0
62577: PPUSH
62578: CALL 64357 0 3
// end ;
62582: GO 62480
62584: POP
62585: POP
// if enchidnas then
62586: LD_VAR 0 4
62590: IFFALSE 62657
// for i = 1 to enchidnas do
62592: LD_ADDR_VAR 0 11
62596: PUSH
62597: DOUBLE
62598: LD_INT 1
62600: DEC
62601: ST_TO_ADDR
62602: LD_VAR 0 4
62606: PUSH
62607: FOR_TO
62608: IFFALSE 62655
// begin hc_class = 13 ;
62610: LD_ADDR_OWVAR 28
62614: PUSH
62615: LD_INT 13
62617: ST_TO_ADDR
// hc_gallery =  ;
62618: LD_ADDR_OWVAR 33
62622: PUSH
62623: LD_STRING 
62625: ST_TO_ADDR
// animal := CreateHuman ;
62626: LD_ADDR_VAR 0 12
62630: PUSH
62631: CALL_OW 44
62635: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62636: LD_VAR 0 12
62640: PPUSH
62641: LD_VAR 0 8
62645: PPUSH
62646: LD_INT 0
62648: PPUSH
62649: CALL 64357 0 3
// end ;
62653: GO 62607
62655: POP
62656: POP
// if fishes then
62657: LD_VAR 0 7
62661: IFFALSE 62728
// for i = 1 to fishes do
62663: LD_ADDR_VAR 0 11
62667: PUSH
62668: DOUBLE
62669: LD_INT 1
62671: DEC
62672: ST_TO_ADDR
62673: LD_VAR 0 7
62677: PUSH
62678: FOR_TO
62679: IFFALSE 62726
// begin hc_class = 20 ;
62681: LD_ADDR_OWVAR 28
62685: PUSH
62686: LD_INT 20
62688: ST_TO_ADDR
// hc_gallery =  ;
62689: LD_ADDR_OWVAR 33
62693: PUSH
62694: LD_STRING 
62696: ST_TO_ADDR
// animal := CreateHuman ;
62697: LD_ADDR_VAR 0 12
62701: PUSH
62702: CALL_OW 44
62706: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
62707: LD_VAR 0 12
62711: PPUSH
62712: LD_VAR 0 9
62716: PPUSH
62717: LD_INT 0
62719: PPUSH
62720: CALL 64357 0 3
// end ;
62724: GO 62678
62726: POP
62727: POP
// end ;
62728: LD_VAR 0 10
62732: RET
// export function WantHeal ( sci , unit ) ; begin
62733: LD_INT 0
62735: PPUSH
// if GetTaskList ( sci ) > 0 then
62736: LD_VAR 0 1
62740: PPUSH
62741: CALL_OW 437
62745: PUSH
62746: LD_INT 0
62748: GREATER
62749: IFFALSE 62819
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
62751: LD_VAR 0 1
62755: PPUSH
62756: CALL_OW 437
62760: PUSH
62761: LD_INT 1
62763: ARRAY
62764: PUSH
62765: LD_INT 1
62767: ARRAY
62768: PUSH
62769: LD_STRING l
62771: EQUAL
62772: PUSH
62773: LD_VAR 0 1
62777: PPUSH
62778: CALL_OW 437
62782: PUSH
62783: LD_INT 1
62785: ARRAY
62786: PUSH
62787: LD_INT 4
62789: ARRAY
62790: PUSH
62791: LD_VAR 0 2
62795: EQUAL
62796: AND
62797: IFFALSE 62809
// result := true else
62799: LD_ADDR_VAR 0 3
62803: PUSH
62804: LD_INT 1
62806: ST_TO_ADDR
62807: GO 62817
// result := false ;
62809: LD_ADDR_VAR 0 3
62813: PUSH
62814: LD_INT 0
62816: ST_TO_ADDR
// end else
62817: GO 62827
// result := false ;
62819: LD_ADDR_VAR 0 3
62823: PUSH
62824: LD_INT 0
62826: ST_TO_ADDR
// end ;
62827: LD_VAR 0 3
62831: RET
// export function HealTarget ( sci ) ; begin
62832: LD_INT 0
62834: PPUSH
// if not sci then
62835: LD_VAR 0 1
62839: NOT
62840: IFFALSE 62844
// exit ;
62842: GO 62909
// result := 0 ;
62844: LD_ADDR_VAR 0 2
62848: PUSH
62849: LD_INT 0
62851: ST_TO_ADDR
// if GetTaskList ( sci ) then
62852: LD_VAR 0 1
62856: PPUSH
62857: CALL_OW 437
62861: IFFALSE 62909
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62863: LD_VAR 0 1
62867: PPUSH
62868: CALL_OW 437
62872: PUSH
62873: LD_INT 1
62875: ARRAY
62876: PUSH
62877: LD_INT 1
62879: ARRAY
62880: PUSH
62881: LD_STRING l
62883: EQUAL
62884: IFFALSE 62909
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62886: LD_ADDR_VAR 0 2
62890: PUSH
62891: LD_VAR 0 1
62895: PPUSH
62896: CALL_OW 437
62900: PUSH
62901: LD_INT 1
62903: ARRAY
62904: PUSH
62905: LD_INT 4
62907: ARRAY
62908: ST_TO_ADDR
// end ;
62909: LD_VAR 0 2
62913: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62914: LD_INT 0
62916: PPUSH
62917: PPUSH
62918: PPUSH
62919: PPUSH
// if not base_units then
62920: LD_VAR 0 1
62924: NOT
62925: IFFALSE 62929
// exit ;
62927: GO 63016
// result := false ;
62929: LD_ADDR_VAR 0 2
62933: PUSH
62934: LD_INT 0
62936: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62937: LD_ADDR_VAR 0 5
62941: PUSH
62942: LD_VAR 0 1
62946: PPUSH
62947: LD_INT 21
62949: PUSH
62950: LD_INT 3
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PPUSH
62957: CALL_OW 72
62961: ST_TO_ADDR
// if not tmp then
62962: LD_VAR 0 5
62966: NOT
62967: IFFALSE 62971
// exit ;
62969: GO 63016
// for i in tmp do
62971: LD_ADDR_VAR 0 3
62975: PUSH
62976: LD_VAR 0 5
62980: PUSH
62981: FOR_IN
62982: IFFALSE 63014
// begin result := EnemyInRange ( i , 22 ) ;
62984: LD_ADDR_VAR 0 2
62988: PUSH
62989: LD_VAR 0 3
62993: PPUSH
62994: LD_INT 22
62996: PPUSH
62997: CALL 60614 0 2
63001: ST_TO_ADDR
// if result then
63002: LD_VAR 0 2
63006: IFFALSE 63012
// exit ;
63008: POP
63009: POP
63010: GO 63016
// end ;
63012: GO 62981
63014: POP
63015: POP
// end ;
63016: LD_VAR 0 2
63020: RET
// export function FilterByTag ( units , tag ) ; begin
63021: LD_INT 0
63023: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
63024: LD_ADDR_VAR 0 3
63028: PUSH
63029: LD_VAR 0 1
63033: PPUSH
63034: LD_INT 120
63036: PUSH
63037: LD_VAR 0 2
63041: PUSH
63042: EMPTY
63043: LIST
63044: LIST
63045: PPUSH
63046: CALL_OW 72
63050: ST_TO_ADDR
// end ;
63051: LD_VAR 0 3
63055: RET
// export function IsDriver ( un ) ; begin
63056: LD_INT 0
63058: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63059: LD_ADDR_VAR 0 2
63063: PUSH
63064: LD_VAR 0 1
63068: PUSH
63069: LD_INT 55
63071: PUSH
63072: EMPTY
63073: LIST
63074: PPUSH
63075: CALL_OW 69
63079: IN
63080: ST_TO_ADDR
// end ;
63081: LD_VAR 0 2
63085: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63086: LD_INT 0
63088: PPUSH
63089: PPUSH
// list := [ ] ;
63090: LD_ADDR_VAR 0 5
63094: PUSH
63095: EMPTY
63096: ST_TO_ADDR
// case d of 0 :
63097: LD_VAR 0 3
63101: PUSH
63102: LD_INT 0
63104: DOUBLE
63105: EQUAL
63106: IFTRUE 63110
63108: GO 63243
63110: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63111: LD_ADDR_VAR 0 5
63115: PUSH
63116: LD_VAR 0 1
63120: PUSH
63121: LD_INT 4
63123: MINUS
63124: PUSH
63125: LD_VAR 0 2
63129: PUSH
63130: LD_INT 4
63132: MINUS
63133: PUSH
63134: LD_INT 2
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: LIST
63141: PUSH
63142: LD_VAR 0 1
63146: PUSH
63147: LD_INT 3
63149: MINUS
63150: PUSH
63151: LD_VAR 0 2
63155: PUSH
63156: LD_INT 1
63158: PUSH
63159: EMPTY
63160: LIST
63161: LIST
63162: LIST
63163: PUSH
63164: LD_VAR 0 1
63168: PUSH
63169: LD_INT 4
63171: PLUS
63172: PUSH
63173: LD_VAR 0 2
63177: PUSH
63178: LD_INT 4
63180: PUSH
63181: EMPTY
63182: LIST
63183: LIST
63184: LIST
63185: PUSH
63186: LD_VAR 0 1
63190: PUSH
63191: LD_INT 3
63193: PLUS
63194: PUSH
63195: LD_VAR 0 2
63199: PUSH
63200: LD_INT 3
63202: PLUS
63203: PUSH
63204: LD_INT 5
63206: PUSH
63207: EMPTY
63208: LIST
63209: LIST
63210: LIST
63211: PUSH
63212: LD_VAR 0 1
63216: PUSH
63217: LD_VAR 0 2
63221: PUSH
63222: LD_INT 4
63224: PLUS
63225: PUSH
63226: LD_INT 0
63228: PUSH
63229: EMPTY
63230: LIST
63231: LIST
63232: LIST
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: LIST
63238: LIST
63239: LIST
63240: ST_TO_ADDR
// end ; 1 :
63241: GO 63941
63243: LD_INT 1
63245: DOUBLE
63246: EQUAL
63247: IFTRUE 63251
63249: GO 63384
63251: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63252: LD_ADDR_VAR 0 5
63256: PUSH
63257: LD_VAR 0 1
63261: PUSH
63262: LD_VAR 0 2
63266: PUSH
63267: LD_INT 4
63269: MINUS
63270: PUSH
63271: LD_INT 3
63273: PUSH
63274: EMPTY
63275: LIST
63276: LIST
63277: LIST
63278: PUSH
63279: LD_VAR 0 1
63283: PUSH
63284: LD_INT 3
63286: MINUS
63287: PUSH
63288: LD_VAR 0 2
63292: PUSH
63293: LD_INT 3
63295: MINUS
63296: PUSH
63297: LD_INT 2
63299: PUSH
63300: EMPTY
63301: LIST
63302: LIST
63303: LIST
63304: PUSH
63305: LD_VAR 0 1
63309: PUSH
63310: LD_INT 4
63312: MINUS
63313: PUSH
63314: LD_VAR 0 2
63318: PUSH
63319: LD_INT 1
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: LIST
63326: PUSH
63327: LD_VAR 0 1
63331: PUSH
63332: LD_VAR 0 2
63336: PUSH
63337: LD_INT 3
63339: PLUS
63340: PUSH
63341: LD_INT 0
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: LIST
63348: PUSH
63349: LD_VAR 0 1
63353: PUSH
63354: LD_INT 4
63356: PLUS
63357: PUSH
63358: LD_VAR 0 2
63362: PUSH
63363: LD_INT 4
63365: PLUS
63366: PUSH
63367: LD_INT 5
63369: PUSH
63370: EMPTY
63371: LIST
63372: LIST
63373: LIST
63374: PUSH
63375: EMPTY
63376: LIST
63377: LIST
63378: LIST
63379: LIST
63380: LIST
63381: ST_TO_ADDR
// end ; 2 :
63382: GO 63941
63384: LD_INT 2
63386: DOUBLE
63387: EQUAL
63388: IFTRUE 63392
63390: GO 63521
63392: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
63393: LD_ADDR_VAR 0 5
63397: PUSH
63398: LD_VAR 0 1
63402: PUSH
63403: LD_VAR 0 2
63407: PUSH
63408: LD_INT 3
63410: MINUS
63411: PUSH
63412: LD_INT 3
63414: PUSH
63415: EMPTY
63416: LIST
63417: LIST
63418: LIST
63419: PUSH
63420: LD_VAR 0 1
63424: PUSH
63425: LD_INT 4
63427: PLUS
63428: PUSH
63429: LD_VAR 0 2
63433: PUSH
63434: LD_INT 4
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: LIST
63441: PUSH
63442: LD_VAR 0 1
63446: PUSH
63447: LD_VAR 0 2
63451: PUSH
63452: LD_INT 4
63454: PLUS
63455: PUSH
63456: LD_INT 0
63458: PUSH
63459: EMPTY
63460: LIST
63461: LIST
63462: LIST
63463: PUSH
63464: LD_VAR 0 1
63468: PUSH
63469: LD_INT 3
63471: MINUS
63472: PUSH
63473: LD_VAR 0 2
63477: PUSH
63478: LD_INT 1
63480: PUSH
63481: EMPTY
63482: LIST
63483: LIST
63484: LIST
63485: PUSH
63486: LD_VAR 0 1
63490: PUSH
63491: LD_INT 4
63493: MINUS
63494: PUSH
63495: LD_VAR 0 2
63499: PUSH
63500: LD_INT 4
63502: MINUS
63503: PUSH
63504: LD_INT 2
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: LIST
63511: PUSH
63512: EMPTY
63513: LIST
63514: LIST
63515: LIST
63516: LIST
63517: LIST
63518: ST_TO_ADDR
// end ; 3 :
63519: GO 63941
63521: LD_INT 3
63523: DOUBLE
63524: EQUAL
63525: IFTRUE 63529
63527: GO 63662
63529: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
63530: LD_ADDR_VAR 0 5
63534: PUSH
63535: LD_VAR 0 1
63539: PUSH
63540: LD_INT 3
63542: PLUS
63543: PUSH
63544: LD_VAR 0 2
63548: PUSH
63549: LD_INT 4
63551: PUSH
63552: EMPTY
63553: LIST
63554: LIST
63555: LIST
63556: PUSH
63557: LD_VAR 0 1
63561: PUSH
63562: LD_INT 4
63564: PLUS
63565: PUSH
63566: LD_VAR 0 2
63570: PUSH
63571: LD_INT 4
63573: PLUS
63574: PUSH
63575: LD_INT 5
63577: PUSH
63578: EMPTY
63579: LIST
63580: LIST
63581: LIST
63582: PUSH
63583: LD_VAR 0 1
63587: PUSH
63588: LD_INT 4
63590: MINUS
63591: PUSH
63592: LD_VAR 0 2
63596: PUSH
63597: LD_INT 1
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: LIST
63604: PUSH
63605: LD_VAR 0 1
63609: PUSH
63610: LD_VAR 0 2
63614: PUSH
63615: LD_INT 4
63617: MINUS
63618: PUSH
63619: LD_INT 3
63621: PUSH
63622: EMPTY
63623: LIST
63624: LIST
63625: LIST
63626: PUSH
63627: LD_VAR 0 1
63631: PUSH
63632: LD_INT 3
63634: MINUS
63635: PUSH
63636: LD_VAR 0 2
63640: PUSH
63641: LD_INT 3
63643: MINUS
63644: PUSH
63645: LD_INT 2
63647: PUSH
63648: EMPTY
63649: LIST
63650: LIST
63651: LIST
63652: PUSH
63653: EMPTY
63654: LIST
63655: LIST
63656: LIST
63657: LIST
63658: LIST
63659: ST_TO_ADDR
// end ; 4 :
63660: GO 63941
63662: LD_INT 4
63664: DOUBLE
63665: EQUAL
63666: IFTRUE 63670
63668: GO 63803
63670: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
63671: LD_ADDR_VAR 0 5
63675: PUSH
63676: LD_VAR 0 1
63680: PUSH
63681: LD_VAR 0 2
63685: PUSH
63686: LD_INT 4
63688: PLUS
63689: PUSH
63690: LD_INT 0
63692: PUSH
63693: EMPTY
63694: LIST
63695: LIST
63696: LIST
63697: PUSH
63698: LD_VAR 0 1
63702: PUSH
63703: LD_INT 3
63705: PLUS
63706: PUSH
63707: LD_VAR 0 2
63711: PUSH
63712: LD_INT 3
63714: PLUS
63715: PUSH
63716: LD_INT 5
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: LIST
63723: PUSH
63724: LD_VAR 0 1
63728: PUSH
63729: LD_INT 4
63731: PLUS
63732: PUSH
63733: LD_VAR 0 2
63737: PUSH
63738: LD_INT 4
63740: PUSH
63741: EMPTY
63742: LIST
63743: LIST
63744: LIST
63745: PUSH
63746: LD_VAR 0 1
63750: PUSH
63751: LD_VAR 0 2
63755: PUSH
63756: LD_INT 3
63758: MINUS
63759: PUSH
63760: LD_INT 3
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: LIST
63767: PUSH
63768: LD_VAR 0 1
63772: PUSH
63773: LD_INT 4
63775: MINUS
63776: PUSH
63777: LD_VAR 0 2
63781: PUSH
63782: LD_INT 4
63784: MINUS
63785: PUSH
63786: LD_INT 2
63788: PUSH
63789: EMPTY
63790: LIST
63791: LIST
63792: LIST
63793: PUSH
63794: EMPTY
63795: LIST
63796: LIST
63797: LIST
63798: LIST
63799: LIST
63800: ST_TO_ADDR
// end ; 5 :
63801: GO 63941
63803: LD_INT 5
63805: DOUBLE
63806: EQUAL
63807: IFTRUE 63811
63809: GO 63940
63811: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63812: LD_ADDR_VAR 0 5
63816: PUSH
63817: LD_VAR 0 1
63821: PUSH
63822: LD_INT 4
63824: MINUS
63825: PUSH
63826: LD_VAR 0 2
63830: PUSH
63831: LD_INT 1
63833: PUSH
63834: EMPTY
63835: LIST
63836: LIST
63837: LIST
63838: PUSH
63839: LD_VAR 0 1
63843: PUSH
63844: LD_VAR 0 2
63848: PUSH
63849: LD_INT 4
63851: MINUS
63852: PUSH
63853: LD_INT 3
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: LIST
63860: PUSH
63861: LD_VAR 0 1
63865: PUSH
63866: LD_INT 4
63868: PLUS
63869: PUSH
63870: LD_VAR 0 2
63874: PUSH
63875: LD_INT 4
63877: PLUS
63878: PUSH
63879: LD_INT 5
63881: PUSH
63882: EMPTY
63883: LIST
63884: LIST
63885: LIST
63886: PUSH
63887: LD_VAR 0 1
63891: PUSH
63892: LD_INT 3
63894: PLUS
63895: PUSH
63896: LD_VAR 0 2
63900: PUSH
63901: LD_INT 4
63903: PUSH
63904: EMPTY
63905: LIST
63906: LIST
63907: LIST
63908: PUSH
63909: LD_VAR 0 1
63913: PUSH
63914: LD_VAR 0 2
63918: PUSH
63919: LD_INT 3
63921: PLUS
63922: PUSH
63923: LD_INT 0
63925: PUSH
63926: EMPTY
63927: LIST
63928: LIST
63929: LIST
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: LIST
63935: LIST
63936: LIST
63937: ST_TO_ADDR
// end ; end ;
63938: GO 63941
63940: POP
// result := list ;
63941: LD_ADDR_VAR 0 4
63945: PUSH
63946: LD_VAR 0 5
63950: ST_TO_ADDR
// end ;
63951: LD_VAR 0 4
63955: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
63956: LD_INT 0
63958: PPUSH
63959: PPUSH
63960: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
63961: LD_VAR 0 1
63965: NOT
63966: PUSH
63967: LD_VAR 0 2
63971: PUSH
63972: LD_INT 1
63974: PUSH
63975: LD_INT 2
63977: PUSH
63978: LD_INT 3
63980: PUSH
63981: LD_INT 4
63983: PUSH
63984: EMPTY
63985: LIST
63986: LIST
63987: LIST
63988: LIST
63989: IN
63990: NOT
63991: OR
63992: IFFALSE 63996
// exit ;
63994: GO 64079
// tmp := [ ] ;
63996: LD_ADDR_VAR 0 5
64000: PUSH
64001: EMPTY
64002: ST_TO_ADDR
// for i in units do
64003: LD_ADDR_VAR 0 4
64007: PUSH
64008: LD_VAR 0 1
64012: PUSH
64013: FOR_IN
64014: IFFALSE 64048
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
64016: LD_ADDR_VAR 0 5
64020: PUSH
64021: LD_VAR 0 5
64025: PPUSH
64026: LD_VAR 0 4
64030: PPUSH
64031: LD_VAR 0 2
64035: PPUSH
64036: CALL_OW 259
64040: PPUSH
64041: CALL 65452 0 2
64045: ST_TO_ADDR
64046: GO 64013
64048: POP
64049: POP
// if not tmp then
64050: LD_VAR 0 5
64054: NOT
64055: IFFALSE 64059
// exit ;
64057: GO 64079
// result := SortListByListDesc ( units , tmp ) ;
64059: LD_ADDR_VAR 0 3
64063: PUSH
64064: LD_VAR 0 1
64068: PPUSH
64069: LD_VAR 0 5
64073: PPUSH
64074: CALL_OW 77
64078: ST_TO_ADDR
// end ;
64079: LD_VAR 0 3
64083: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64084: LD_INT 0
64086: PPUSH
64087: PPUSH
64088: PPUSH
// result := false ;
64089: LD_ADDR_VAR 0 3
64093: PUSH
64094: LD_INT 0
64096: ST_TO_ADDR
// if not building then
64097: LD_VAR 0 2
64101: NOT
64102: IFFALSE 64106
// exit ;
64104: GO 64244
// x := GetX ( building ) ;
64106: LD_ADDR_VAR 0 4
64110: PUSH
64111: LD_VAR 0 2
64115: PPUSH
64116: CALL_OW 250
64120: ST_TO_ADDR
// y := GetY ( building ) ;
64121: LD_ADDR_VAR 0 5
64125: PUSH
64126: LD_VAR 0 2
64130: PPUSH
64131: CALL_OW 251
64135: ST_TO_ADDR
// if not x or not y then
64136: LD_VAR 0 4
64140: NOT
64141: PUSH
64142: LD_VAR 0 5
64146: NOT
64147: OR
64148: IFFALSE 64152
// exit ;
64150: GO 64244
// if GetTaskList ( unit ) then
64152: LD_VAR 0 1
64156: PPUSH
64157: CALL_OW 437
64161: IFFALSE 64244
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64163: LD_STRING e
64165: PUSH
64166: LD_VAR 0 1
64170: PPUSH
64171: CALL_OW 437
64175: PUSH
64176: LD_INT 1
64178: ARRAY
64179: PUSH
64180: LD_INT 1
64182: ARRAY
64183: EQUAL
64184: PUSH
64185: LD_VAR 0 4
64189: PUSH
64190: LD_VAR 0 1
64194: PPUSH
64195: CALL_OW 437
64199: PUSH
64200: LD_INT 1
64202: ARRAY
64203: PUSH
64204: LD_INT 2
64206: ARRAY
64207: EQUAL
64208: AND
64209: PUSH
64210: LD_VAR 0 5
64214: PUSH
64215: LD_VAR 0 1
64219: PPUSH
64220: CALL_OW 437
64224: PUSH
64225: LD_INT 1
64227: ARRAY
64228: PUSH
64229: LD_INT 3
64231: ARRAY
64232: EQUAL
64233: AND
64234: IFFALSE 64244
// result := true end ;
64236: LD_ADDR_VAR 0 3
64240: PUSH
64241: LD_INT 1
64243: ST_TO_ADDR
// end ;
64244: LD_VAR 0 3
64248: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64249: LD_INT 0
64251: PPUSH
// result := false ;
64252: LD_ADDR_VAR 0 4
64256: PUSH
64257: LD_INT 0
64259: ST_TO_ADDR
// if GetTaskList ( unit ) then
64260: LD_VAR 0 1
64264: PPUSH
64265: CALL_OW 437
64269: IFFALSE 64352
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64271: LD_STRING M
64273: PUSH
64274: LD_VAR 0 1
64278: PPUSH
64279: CALL_OW 437
64283: PUSH
64284: LD_INT 1
64286: ARRAY
64287: PUSH
64288: LD_INT 1
64290: ARRAY
64291: EQUAL
64292: PUSH
64293: LD_VAR 0 2
64297: PUSH
64298: LD_VAR 0 1
64302: PPUSH
64303: CALL_OW 437
64307: PUSH
64308: LD_INT 1
64310: ARRAY
64311: PUSH
64312: LD_INT 2
64314: ARRAY
64315: EQUAL
64316: AND
64317: PUSH
64318: LD_VAR 0 3
64322: PUSH
64323: LD_VAR 0 1
64327: PPUSH
64328: CALL_OW 437
64332: PUSH
64333: LD_INT 1
64335: ARRAY
64336: PUSH
64337: LD_INT 3
64339: ARRAY
64340: EQUAL
64341: AND
64342: IFFALSE 64352
// result := true ;
64344: LD_ADDR_VAR 0 4
64348: PUSH
64349: LD_INT 1
64351: ST_TO_ADDR
// end ; end ;
64352: LD_VAR 0 4
64356: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
64357: LD_INT 0
64359: PPUSH
64360: PPUSH
64361: PPUSH
64362: PPUSH
// if not unit or not area then
64363: LD_VAR 0 1
64367: NOT
64368: PUSH
64369: LD_VAR 0 2
64373: NOT
64374: OR
64375: IFFALSE 64379
// exit ;
64377: GO 64555
// tmp := AreaToList ( area , i ) ;
64379: LD_ADDR_VAR 0 6
64383: PUSH
64384: LD_VAR 0 2
64388: PPUSH
64389: LD_VAR 0 5
64393: PPUSH
64394: CALL_OW 517
64398: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64399: LD_ADDR_VAR 0 5
64403: PUSH
64404: DOUBLE
64405: LD_INT 1
64407: DEC
64408: ST_TO_ADDR
64409: LD_VAR 0 6
64413: PUSH
64414: LD_INT 1
64416: ARRAY
64417: PUSH
64418: FOR_TO
64419: IFFALSE 64553
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64421: LD_ADDR_VAR 0 7
64425: PUSH
64426: LD_VAR 0 6
64430: PUSH
64431: LD_INT 1
64433: ARRAY
64434: PUSH
64435: LD_VAR 0 5
64439: ARRAY
64440: PUSH
64441: LD_VAR 0 6
64445: PUSH
64446: LD_INT 2
64448: ARRAY
64449: PUSH
64450: LD_VAR 0 5
64454: ARRAY
64455: PUSH
64456: EMPTY
64457: LIST
64458: LIST
64459: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
64460: LD_INT 92
64462: PUSH
64463: LD_VAR 0 7
64467: PUSH
64468: LD_INT 1
64470: ARRAY
64471: PUSH
64472: LD_VAR 0 7
64476: PUSH
64477: LD_INT 2
64479: ARRAY
64480: PUSH
64481: LD_INT 2
64483: PUSH
64484: EMPTY
64485: LIST
64486: LIST
64487: LIST
64488: LIST
64489: PPUSH
64490: CALL_OW 69
64494: PUSH
64495: LD_INT 0
64497: EQUAL
64498: IFFALSE 64551
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
64500: LD_VAR 0 1
64504: PPUSH
64505: LD_VAR 0 7
64509: PUSH
64510: LD_INT 1
64512: ARRAY
64513: PPUSH
64514: LD_VAR 0 7
64518: PUSH
64519: LD_INT 2
64521: ARRAY
64522: PPUSH
64523: LD_VAR 0 3
64527: PPUSH
64528: CALL_OW 48
// result := IsPlaced ( unit ) ;
64532: LD_ADDR_VAR 0 4
64536: PUSH
64537: LD_VAR 0 1
64541: PPUSH
64542: CALL_OW 305
64546: ST_TO_ADDR
// exit ;
64547: POP
64548: POP
64549: GO 64555
// end ; end ;
64551: GO 64418
64553: POP
64554: POP
// end ;
64555: LD_VAR 0 4
64559: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
64560: LD_INT 0
64562: PPUSH
64563: PPUSH
64564: PPUSH
// if not side or side > 8 then
64565: LD_VAR 0 1
64569: NOT
64570: PUSH
64571: LD_VAR 0 1
64575: PUSH
64576: LD_INT 8
64578: GREATER
64579: OR
64580: IFFALSE 64584
// exit ;
64582: GO 64771
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
64584: LD_ADDR_VAR 0 4
64588: PUSH
64589: LD_INT 22
64591: PUSH
64592: LD_VAR 0 1
64596: PUSH
64597: EMPTY
64598: LIST
64599: LIST
64600: PUSH
64601: LD_INT 21
64603: PUSH
64604: LD_INT 3
64606: PUSH
64607: EMPTY
64608: LIST
64609: LIST
64610: PUSH
64611: EMPTY
64612: LIST
64613: LIST
64614: PPUSH
64615: CALL_OW 69
64619: ST_TO_ADDR
// if not tmp then
64620: LD_VAR 0 4
64624: NOT
64625: IFFALSE 64629
// exit ;
64627: GO 64771
// enable_addtolog := true ;
64629: LD_ADDR_OWVAR 81
64633: PUSH
64634: LD_INT 1
64636: ST_TO_ADDR
// AddToLog ( [ ) ;
64637: LD_STRING [
64639: PPUSH
64640: CALL_OW 561
// for i in tmp do
64644: LD_ADDR_VAR 0 3
64648: PUSH
64649: LD_VAR 0 4
64653: PUSH
64654: FOR_IN
64655: IFFALSE 64762
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
64657: LD_STRING [
64659: PUSH
64660: LD_VAR 0 3
64664: PPUSH
64665: CALL_OW 266
64669: STR
64670: PUSH
64671: LD_STRING , 
64673: STR
64674: PUSH
64675: LD_VAR 0 3
64679: PPUSH
64680: CALL_OW 250
64684: STR
64685: PUSH
64686: LD_STRING , 
64688: STR
64689: PUSH
64690: LD_VAR 0 3
64694: PPUSH
64695: CALL_OW 251
64699: STR
64700: PUSH
64701: LD_STRING , 
64703: STR
64704: PUSH
64705: LD_VAR 0 3
64709: PPUSH
64710: CALL_OW 254
64714: STR
64715: PUSH
64716: LD_STRING , 
64718: STR
64719: PUSH
64720: LD_VAR 0 3
64724: PPUSH
64725: LD_INT 1
64727: PPUSH
64728: CALL_OW 268
64732: STR
64733: PUSH
64734: LD_STRING , 
64736: STR
64737: PUSH
64738: LD_VAR 0 3
64742: PPUSH
64743: LD_INT 2
64745: PPUSH
64746: CALL_OW 268
64750: STR
64751: PUSH
64752: LD_STRING ],
64754: STR
64755: PPUSH
64756: CALL_OW 561
// end ;
64760: GO 64654
64762: POP
64763: POP
// AddToLog ( ]; ) ;
64764: LD_STRING ];
64766: PPUSH
64767: CALL_OW 561
// end ;
64771: LD_VAR 0 2
64775: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
64776: LD_INT 0
64778: PPUSH
64779: PPUSH
64780: PPUSH
64781: PPUSH
64782: PPUSH
// if not area or not rate or not max then
64783: LD_VAR 0 1
64787: NOT
64788: PUSH
64789: LD_VAR 0 2
64793: NOT
64794: OR
64795: PUSH
64796: LD_VAR 0 4
64800: NOT
64801: OR
64802: IFFALSE 64806
// exit ;
64804: GO 64995
// while 1 do
64806: LD_INT 1
64808: IFFALSE 64995
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64810: LD_ADDR_VAR 0 9
64814: PUSH
64815: LD_VAR 0 1
64819: PPUSH
64820: LD_INT 1
64822: PPUSH
64823: CALL_OW 287
64827: PUSH
64828: LD_INT 10
64830: MUL
64831: ST_TO_ADDR
// r := rate / 10 ;
64832: LD_ADDR_VAR 0 7
64836: PUSH
64837: LD_VAR 0 2
64841: PUSH
64842: LD_INT 10
64844: DIVREAL
64845: ST_TO_ADDR
// time := 1 1$00 ;
64846: LD_ADDR_VAR 0 8
64850: PUSH
64851: LD_INT 2100
64853: ST_TO_ADDR
// if amount < min then
64854: LD_VAR 0 9
64858: PUSH
64859: LD_VAR 0 3
64863: LESS
64864: IFFALSE 64882
// r := r * 2 else
64866: LD_ADDR_VAR 0 7
64870: PUSH
64871: LD_VAR 0 7
64875: PUSH
64876: LD_INT 2
64878: MUL
64879: ST_TO_ADDR
64880: GO 64908
// if amount > max then
64882: LD_VAR 0 9
64886: PUSH
64887: LD_VAR 0 4
64891: GREATER
64892: IFFALSE 64908
// r := r / 2 ;
64894: LD_ADDR_VAR 0 7
64898: PUSH
64899: LD_VAR 0 7
64903: PUSH
64904: LD_INT 2
64906: DIVREAL
64907: ST_TO_ADDR
// time := time / r ;
64908: LD_ADDR_VAR 0 8
64912: PUSH
64913: LD_VAR 0 8
64917: PUSH
64918: LD_VAR 0 7
64922: DIVREAL
64923: ST_TO_ADDR
// if time < 0 then
64924: LD_VAR 0 8
64928: PUSH
64929: LD_INT 0
64931: LESS
64932: IFFALSE 64949
// time := time * - 1 ;
64934: LD_ADDR_VAR 0 8
64938: PUSH
64939: LD_VAR 0 8
64943: PUSH
64944: LD_INT 1
64946: NEG
64947: MUL
64948: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
64949: LD_VAR 0 8
64953: PUSH
64954: LD_INT 35
64956: PPUSH
64957: LD_INT 875
64959: PPUSH
64960: CALL_OW 12
64964: PLUS
64965: PPUSH
64966: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64970: LD_INT 1
64972: PPUSH
64973: LD_INT 5
64975: PPUSH
64976: CALL_OW 12
64980: PPUSH
64981: LD_VAR 0 1
64985: PPUSH
64986: LD_INT 1
64988: PPUSH
64989: CALL_OW 55
// end ;
64993: GO 64806
// end ;
64995: LD_VAR 0 5
64999: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65000: LD_INT 0
65002: PPUSH
65003: PPUSH
65004: PPUSH
65005: PPUSH
65006: PPUSH
65007: PPUSH
65008: PPUSH
65009: PPUSH
// if not turrets or not factories then
65010: LD_VAR 0 1
65014: NOT
65015: PUSH
65016: LD_VAR 0 2
65020: NOT
65021: OR
65022: IFFALSE 65026
// exit ;
65024: GO 65333
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65026: LD_ADDR_VAR 0 10
65030: PUSH
65031: LD_INT 5
65033: PUSH
65034: LD_INT 6
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: PUSH
65041: LD_INT 2
65043: PUSH
65044: LD_INT 4
65046: PUSH
65047: EMPTY
65048: LIST
65049: LIST
65050: PUSH
65051: LD_INT 3
65053: PUSH
65054: LD_INT 5
65056: PUSH
65057: EMPTY
65058: LIST
65059: LIST
65060: PUSH
65061: EMPTY
65062: LIST
65063: LIST
65064: LIST
65065: PUSH
65066: LD_INT 24
65068: PUSH
65069: LD_INT 25
65071: PUSH
65072: EMPTY
65073: LIST
65074: LIST
65075: PUSH
65076: LD_INT 23
65078: PUSH
65079: LD_INT 27
65081: PUSH
65082: EMPTY
65083: LIST
65084: LIST
65085: PUSH
65086: EMPTY
65087: LIST
65088: LIST
65089: PUSH
65090: LD_INT 42
65092: PUSH
65093: LD_INT 43
65095: PUSH
65096: EMPTY
65097: LIST
65098: LIST
65099: PUSH
65100: LD_INT 44
65102: PUSH
65103: LD_INT 46
65105: PUSH
65106: EMPTY
65107: LIST
65108: LIST
65109: PUSH
65110: LD_INT 45
65112: PUSH
65113: LD_INT 47
65115: PUSH
65116: EMPTY
65117: LIST
65118: LIST
65119: PUSH
65120: EMPTY
65121: LIST
65122: LIST
65123: LIST
65124: PUSH
65125: EMPTY
65126: LIST
65127: LIST
65128: LIST
65129: ST_TO_ADDR
// result := [ ] ;
65130: LD_ADDR_VAR 0 3
65134: PUSH
65135: EMPTY
65136: ST_TO_ADDR
// for i in turrets do
65137: LD_ADDR_VAR 0 4
65141: PUSH
65142: LD_VAR 0 1
65146: PUSH
65147: FOR_IN
65148: IFFALSE 65331
// begin nat := GetNation ( i ) ;
65150: LD_ADDR_VAR 0 7
65154: PUSH
65155: LD_VAR 0 4
65159: PPUSH
65160: CALL_OW 248
65164: ST_TO_ADDR
// weapon := 0 ;
65165: LD_ADDR_VAR 0 8
65169: PUSH
65170: LD_INT 0
65172: ST_TO_ADDR
// if not nat then
65173: LD_VAR 0 7
65177: NOT
65178: IFFALSE 65182
// continue ;
65180: GO 65147
// for j in list [ nat ] do
65182: LD_ADDR_VAR 0 5
65186: PUSH
65187: LD_VAR 0 10
65191: PUSH
65192: LD_VAR 0 7
65196: ARRAY
65197: PUSH
65198: FOR_IN
65199: IFFALSE 65240
// if GetBWeapon ( i ) = j [ 1 ] then
65201: LD_VAR 0 4
65205: PPUSH
65206: CALL_OW 269
65210: PUSH
65211: LD_VAR 0 5
65215: PUSH
65216: LD_INT 1
65218: ARRAY
65219: EQUAL
65220: IFFALSE 65238
// begin weapon := j [ 2 ] ;
65222: LD_ADDR_VAR 0 8
65226: PUSH
65227: LD_VAR 0 5
65231: PUSH
65232: LD_INT 2
65234: ARRAY
65235: ST_TO_ADDR
// break ;
65236: GO 65240
// end ;
65238: GO 65198
65240: POP
65241: POP
// if not weapon then
65242: LD_VAR 0 8
65246: NOT
65247: IFFALSE 65251
// continue ;
65249: GO 65147
// for k in factories do
65251: LD_ADDR_VAR 0 6
65255: PUSH
65256: LD_VAR 0 2
65260: PUSH
65261: FOR_IN
65262: IFFALSE 65327
// begin weapons := AvailableWeaponList ( k ) ;
65264: LD_ADDR_VAR 0 9
65268: PUSH
65269: LD_VAR 0 6
65273: PPUSH
65274: CALL_OW 478
65278: ST_TO_ADDR
// if not weapons then
65279: LD_VAR 0 9
65283: NOT
65284: IFFALSE 65288
// continue ;
65286: GO 65261
// if weapon in weapons then
65288: LD_VAR 0 8
65292: PUSH
65293: LD_VAR 0 9
65297: IN
65298: IFFALSE 65325
// begin result := [ i , weapon ] ;
65300: LD_ADDR_VAR 0 3
65304: PUSH
65305: LD_VAR 0 4
65309: PUSH
65310: LD_VAR 0 8
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: ST_TO_ADDR
// exit ;
65319: POP
65320: POP
65321: POP
65322: POP
65323: GO 65333
// end ; end ;
65325: GO 65261
65327: POP
65328: POP
// end ;
65329: GO 65147
65331: POP
65332: POP
// end ;
65333: LD_VAR 0 3
65337: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65338: LD_INT 0
65340: PPUSH
// if not side or side > 8 then
65341: LD_VAR 0 3
65345: NOT
65346: PUSH
65347: LD_VAR 0 3
65351: PUSH
65352: LD_INT 8
65354: GREATER
65355: OR
65356: IFFALSE 65360
// exit ;
65358: GO 65419
// if not range then
65360: LD_VAR 0 4
65364: NOT
65365: IFFALSE 65376
// range := - 12 ;
65367: LD_ADDR_VAR 0 4
65371: PUSH
65372: LD_INT 12
65374: NEG
65375: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
65376: LD_VAR 0 1
65380: PPUSH
65381: LD_VAR 0 2
65385: PPUSH
65386: LD_VAR 0 3
65390: PPUSH
65391: LD_VAR 0 4
65395: PPUSH
65396: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65400: LD_VAR 0 1
65404: PPUSH
65405: LD_VAR 0 2
65409: PPUSH
65410: LD_VAR 0 3
65414: PPUSH
65415: CALL_OW 331
// end ;
65419: LD_VAR 0 5
65423: RET
// export function Video ( mode ) ; begin
65424: LD_INT 0
65426: PPUSH
// ingame_video = mode ;
65427: LD_ADDR_OWVAR 52
65431: PUSH
65432: LD_VAR 0 1
65436: ST_TO_ADDR
// interface_hidden = mode ;
65437: LD_ADDR_OWVAR 54
65441: PUSH
65442: LD_VAR 0 1
65446: ST_TO_ADDR
// end ;
65447: LD_VAR 0 2
65451: RET
// export function Join ( array , element ) ; begin
65452: LD_INT 0
65454: PPUSH
// result := Replace ( array , array + 1 , element ) ;
65455: LD_ADDR_VAR 0 3
65459: PUSH
65460: LD_VAR 0 1
65464: PPUSH
65465: LD_VAR 0 1
65469: PUSH
65470: LD_INT 1
65472: PLUS
65473: PPUSH
65474: LD_VAR 0 2
65478: PPUSH
65479: CALL_OW 1
65483: ST_TO_ADDR
// end ;
65484: LD_VAR 0 3
65488: RET
// export function JoinUnion ( array , element ) ; begin
65489: LD_INT 0
65491: PPUSH
// result := array union element ;
65492: LD_ADDR_VAR 0 3
65496: PUSH
65497: LD_VAR 0 1
65501: PUSH
65502: LD_VAR 0 2
65506: UNION
65507: ST_TO_ADDR
// end ;
65508: LD_VAR 0 3
65512: RET
// export function GetBehemoths ( side ) ; begin
65513: LD_INT 0
65515: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
65516: LD_ADDR_VAR 0 2
65520: PUSH
65521: LD_INT 22
65523: PUSH
65524: LD_VAR 0 1
65528: PUSH
65529: EMPTY
65530: LIST
65531: LIST
65532: PUSH
65533: LD_INT 31
65535: PUSH
65536: LD_INT 25
65538: PUSH
65539: EMPTY
65540: LIST
65541: LIST
65542: PUSH
65543: EMPTY
65544: LIST
65545: LIST
65546: PPUSH
65547: CALL_OW 69
65551: ST_TO_ADDR
// end ;
65552: LD_VAR 0 2
65556: RET
// export function Shuffle ( array ) ; var i , index ; begin
65557: LD_INT 0
65559: PPUSH
65560: PPUSH
65561: PPUSH
// result := [ ] ;
65562: LD_ADDR_VAR 0 2
65566: PUSH
65567: EMPTY
65568: ST_TO_ADDR
// if not array then
65569: LD_VAR 0 1
65573: NOT
65574: IFFALSE 65578
// exit ;
65576: GO 65677
// Randomize ;
65578: CALL_OW 10
// for i = array downto 1 do
65582: LD_ADDR_VAR 0 3
65586: PUSH
65587: DOUBLE
65588: LD_VAR 0 1
65592: INC
65593: ST_TO_ADDR
65594: LD_INT 1
65596: PUSH
65597: FOR_DOWNTO
65598: IFFALSE 65675
// begin index := rand ( 1 , array ) ;
65600: LD_ADDR_VAR 0 4
65604: PUSH
65605: LD_INT 1
65607: PPUSH
65608: LD_VAR 0 1
65612: PPUSH
65613: CALL_OW 12
65617: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
65618: LD_ADDR_VAR 0 2
65622: PUSH
65623: LD_VAR 0 2
65627: PPUSH
65628: LD_VAR 0 2
65632: PUSH
65633: LD_INT 1
65635: PLUS
65636: PPUSH
65637: LD_VAR 0 1
65641: PUSH
65642: LD_VAR 0 4
65646: ARRAY
65647: PPUSH
65648: CALL_OW 2
65652: ST_TO_ADDR
// array := Delete ( array , index ) ;
65653: LD_ADDR_VAR 0 1
65657: PUSH
65658: LD_VAR 0 1
65662: PPUSH
65663: LD_VAR 0 4
65667: PPUSH
65668: CALL_OW 3
65672: ST_TO_ADDR
// end ;
65673: GO 65597
65675: POP
65676: POP
// end ;
65677: LD_VAR 0 2
65681: RET
// export function GetBaseMaterials ( base ) ; begin
65682: LD_INT 0
65684: PPUSH
// result := [ 0 , 0 , 0 ] ;
65685: LD_ADDR_VAR 0 2
65689: PUSH
65690: LD_INT 0
65692: PUSH
65693: LD_INT 0
65695: PUSH
65696: LD_INT 0
65698: PUSH
65699: EMPTY
65700: LIST
65701: LIST
65702: LIST
65703: ST_TO_ADDR
// if not base then
65704: LD_VAR 0 1
65708: NOT
65709: IFFALSE 65713
// exit ;
65711: GO 65762
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
65713: LD_ADDR_VAR 0 2
65717: PUSH
65718: LD_VAR 0 1
65722: PPUSH
65723: LD_INT 1
65725: PPUSH
65726: CALL_OW 275
65730: PUSH
65731: LD_VAR 0 1
65735: PPUSH
65736: LD_INT 2
65738: PPUSH
65739: CALL_OW 275
65743: PUSH
65744: LD_VAR 0 1
65748: PPUSH
65749: LD_INT 3
65751: PPUSH
65752: CALL_OW 275
65756: PUSH
65757: EMPTY
65758: LIST
65759: LIST
65760: LIST
65761: ST_TO_ADDR
// end ;
65762: LD_VAR 0 2
65766: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
65767: LD_INT 0
65769: PPUSH
65770: PPUSH
// result := array ;
65771: LD_ADDR_VAR 0 3
65775: PUSH
65776: LD_VAR 0 1
65780: ST_TO_ADDR
// if size >= result then
65781: LD_VAR 0 2
65785: PUSH
65786: LD_VAR 0 3
65790: GREATEREQUAL
65791: IFFALSE 65795
// exit ;
65793: GO 65845
// if size then
65795: LD_VAR 0 2
65799: IFFALSE 65845
// for i := array downto size do
65801: LD_ADDR_VAR 0 4
65805: PUSH
65806: DOUBLE
65807: LD_VAR 0 1
65811: INC
65812: ST_TO_ADDR
65813: LD_VAR 0 2
65817: PUSH
65818: FOR_DOWNTO
65819: IFFALSE 65843
// result := Delete ( result , result ) ;
65821: LD_ADDR_VAR 0 3
65825: PUSH
65826: LD_VAR 0 3
65830: PPUSH
65831: LD_VAR 0 3
65835: PPUSH
65836: CALL_OW 3
65840: ST_TO_ADDR
65841: GO 65818
65843: POP
65844: POP
// end ;
65845: LD_VAR 0 3
65849: RET
// export function ComExit ( unit ) ; var tmp ; begin
65850: LD_INT 0
65852: PPUSH
65853: PPUSH
// if not IsInUnit ( unit ) then
65854: LD_VAR 0 1
65858: PPUSH
65859: CALL_OW 310
65863: NOT
65864: IFFALSE 65868
// exit ;
65866: GO 65928
// tmp := IsInUnit ( unit ) ;
65868: LD_ADDR_VAR 0 3
65872: PUSH
65873: LD_VAR 0 1
65877: PPUSH
65878: CALL_OW 310
65882: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65883: LD_VAR 0 3
65887: PPUSH
65888: CALL_OW 247
65892: PUSH
65893: LD_INT 2
65895: EQUAL
65896: IFFALSE 65909
// ComExitVehicle ( unit ) else
65898: LD_VAR 0 1
65902: PPUSH
65903: CALL_OW 121
65907: GO 65918
// ComExitBuilding ( unit ) ;
65909: LD_VAR 0 1
65913: PPUSH
65914: CALL_OW 122
// result := tmp ;
65918: LD_ADDR_VAR 0 2
65922: PUSH
65923: LD_VAR 0 3
65927: ST_TO_ADDR
// end ;
65928: LD_VAR 0 2
65932: RET
// export function ComExitAll ( units ) ; var i ; begin
65933: LD_INT 0
65935: PPUSH
65936: PPUSH
// if not units then
65937: LD_VAR 0 1
65941: NOT
65942: IFFALSE 65946
// exit ;
65944: GO 65972
// for i in units do
65946: LD_ADDR_VAR 0 3
65950: PUSH
65951: LD_VAR 0 1
65955: PUSH
65956: FOR_IN
65957: IFFALSE 65970
// ComExit ( i ) ;
65959: LD_VAR 0 3
65963: PPUSH
65964: CALL 65850 0 1
65968: GO 65956
65970: POP
65971: POP
// end ;
65972: LD_VAR 0 2
65976: RET
// export function ResetHc ; begin
65977: LD_INT 0
65979: PPUSH
// InitHc ;
65980: CALL_OW 19
// hc_importance := 0 ;
65984: LD_ADDR_OWVAR 32
65988: PUSH
65989: LD_INT 0
65991: ST_TO_ADDR
// end ;
65992: LD_VAR 0 1
65996: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
65997: LD_INT 0
65999: PPUSH
66000: PPUSH
66001: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66002: LD_ADDR_VAR 0 6
66006: PUSH
66007: LD_VAR 0 1
66011: PUSH
66012: LD_VAR 0 3
66016: PLUS
66017: PUSH
66018: LD_INT 2
66020: DIV
66021: ST_TO_ADDR
// if _x < 0 then
66022: LD_VAR 0 6
66026: PUSH
66027: LD_INT 0
66029: LESS
66030: IFFALSE 66047
// _x := _x * - 1 ;
66032: LD_ADDR_VAR 0 6
66036: PUSH
66037: LD_VAR 0 6
66041: PUSH
66042: LD_INT 1
66044: NEG
66045: MUL
66046: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66047: LD_ADDR_VAR 0 7
66051: PUSH
66052: LD_VAR 0 2
66056: PUSH
66057: LD_VAR 0 4
66061: PLUS
66062: PUSH
66063: LD_INT 2
66065: DIV
66066: ST_TO_ADDR
// if _y < 0 then
66067: LD_VAR 0 7
66071: PUSH
66072: LD_INT 0
66074: LESS
66075: IFFALSE 66092
// _y := _y * - 1 ;
66077: LD_ADDR_VAR 0 7
66081: PUSH
66082: LD_VAR 0 7
66086: PUSH
66087: LD_INT 1
66089: NEG
66090: MUL
66091: ST_TO_ADDR
// result := [ _x , _y ] ;
66092: LD_ADDR_VAR 0 5
66096: PUSH
66097: LD_VAR 0 6
66101: PUSH
66102: LD_VAR 0 7
66106: PUSH
66107: EMPTY
66108: LIST
66109: LIST
66110: ST_TO_ADDR
// end ;
66111: LD_VAR 0 5
66115: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66116: LD_INT 0
66118: PPUSH
66119: PPUSH
66120: PPUSH
66121: PPUSH
// task := GetTaskList ( unit ) ;
66122: LD_ADDR_VAR 0 7
66126: PUSH
66127: LD_VAR 0 1
66131: PPUSH
66132: CALL_OW 437
66136: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66137: LD_VAR 0 7
66141: NOT
66142: PUSH
66143: LD_VAR 0 1
66147: PPUSH
66148: LD_VAR 0 2
66152: PPUSH
66153: CALL_OW 308
66157: NOT
66158: AND
66159: IFFALSE 66163
// exit ;
66161: GO 66281
// if IsInArea ( unit , area ) then
66163: LD_VAR 0 1
66167: PPUSH
66168: LD_VAR 0 2
66172: PPUSH
66173: CALL_OW 308
66177: IFFALSE 66195
// begin ComMoveToArea ( unit , goAway ) ;
66179: LD_VAR 0 1
66183: PPUSH
66184: LD_VAR 0 3
66188: PPUSH
66189: CALL_OW 113
// exit ;
66193: GO 66281
// end ; if task [ 1 ] [ 1 ] <> M then
66195: LD_VAR 0 7
66199: PUSH
66200: LD_INT 1
66202: ARRAY
66203: PUSH
66204: LD_INT 1
66206: ARRAY
66207: PUSH
66208: LD_STRING M
66210: NONEQUAL
66211: IFFALSE 66215
// exit ;
66213: GO 66281
// x := task [ 1 ] [ 2 ] ;
66215: LD_ADDR_VAR 0 5
66219: PUSH
66220: LD_VAR 0 7
66224: PUSH
66225: LD_INT 1
66227: ARRAY
66228: PUSH
66229: LD_INT 2
66231: ARRAY
66232: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66233: LD_ADDR_VAR 0 6
66237: PUSH
66238: LD_VAR 0 7
66242: PUSH
66243: LD_INT 1
66245: ARRAY
66246: PUSH
66247: LD_INT 3
66249: ARRAY
66250: ST_TO_ADDR
// if InArea ( x , y , area ) then
66251: LD_VAR 0 5
66255: PPUSH
66256: LD_VAR 0 6
66260: PPUSH
66261: LD_VAR 0 2
66265: PPUSH
66266: CALL_OW 309
66270: IFFALSE 66281
// ComStop ( unit ) ;
66272: LD_VAR 0 1
66276: PPUSH
66277: CALL_OW 141
// end ;
66281: LD_VAR 0 4
66285: RET
// export function Abs ( value ) ; begin
66286: LD_INT 0
66288: PPUSH
// result := value ;
66289: LD_ADDR_VAR 0 2
66293: PUSH
66294: LD_VAR 0 1
66298: ST_TO_ADDR
// if value < 0 then
66299: LD_VAR 0 1
66303: PUSH
66304: LD_INT 0
66306: LESS
66307: IFFALSE 66324
// result := value * - 1 ;
66309: LD_ADDR_VAR 0 2
66313: PUSH
66314: LD_VAR 0 1
66318: PUSH
66319: LD_INT 1
66321: NEG
66322: MUL
66323: ST_TO_ADDR
// end ;
66324: LD_VAR 0 2
66328: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66329: LD_INT 0
66331: PPUSH
66332: PPUSH
66333: PPUSH
66334: PPUSH
66335: PPUSH
66336: PPUSH
66337: PPUSH
66338: PPUSH
// if not unit or not building then
66339: LD_VAR 0 1
66343: NOT
66344: PUSH
66345: LD_VAR 0 2
66349: NOT
66350: OR
66351: IFFALSE 66355
// exit ;
66353: GO 66581
// x := GetX ( building ) ;
66355: LD_ADDR_VAR 0 4
66359: PUSH
66360: LD_VAR 0 2
66364: PPUSH
66365: CALL_OW 250
66369: ST_TO_ADDR
// y := GetY ( building ) ;
66370: LD_ADDR_VAR 0 6
66374: PUSH
66375: LD_VAR 0 2
66379: PPUSH
66380: CALL_OW 251
66384: ST_TO_ADDR
// d := GetDir ( building ) ;
66385: LD_ADDR_VAR 0 8
66389: PUSH
66390: LD_VAR 0 2
66394: PPUSH
66395: CALL_OW 254
66399: ST_TO_ADDR
// r := 4 ;
66400: LD_ADDR_VAR 0 9
66404: PUSH
66405: LD_INT 4
66407: ST_TO_ADDR
// for i := 1 to 5 do
66408: LD_ADDR_VAR 0 10
66412: PUSH
66413: DOUBLE
66414: LD_INT 1
66416: DEC
66417: ST_TO_ADDR
66418: LD_INT 5
66420: PUSH
66421: FOR_TO
66422: IFFALSE 66579
// begin _x := ShiftX ( x , d , r + i ) ;
66424: LD_ADDR_VAR 0 5
66428: PUSH
66429: LD_VAR 0 4
66433: PPUSH
66434: LD_VAR 0 8
66438: PPUSH
66439: LD_VAR 0 9
66443: PUSH
66444: LD_VAR 0 10
66448: PLUS
66449: PPUSH
66450: CALL_OW 272
66454: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
66455: LD_ADDR_VAR 0 7
66459: PUSH
66460: LD_VAR 0 6
66464: PPUSH
66465: LD_VAR 0 8
66469: PPUSH
66470: LD_VAR 0 9
66474: PUSH
66475: LD_VAR 0 10
66479: PLUS
66480: PPUSH
66481: CALL_OW 273
66485: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
66486: LD_VAR 0 5
66490: PPUSH
66491: LD_VAR 0 7
66495: PPUSH
66496: CALL_OW 488
66500: PUSH
66501: LD_VAR 0 5
66505: PPUSH
66506: LD_VAR 0 7
66510: PPUSH
66511: CALL_OW 428
66515: PPUSH
66516: CALL_OW 247
66520: PUSH
66521: LD_INT 3
66523: PUSH
66524: LD_INT 2
66526: PUSH
66527: EMPTY
66528: LIST
66529: LIST
66530: IN
66531: NOT
66532: AND
66533: IFFALSE 66577
// begin ComMoveXY ( unit , _x , _y ) ;
66535: LD_VAR 0 1
66539: PPUSH
66540: LD_VAR 0 5
66544: PPUSH
66545: LD_VAR 0 7
66549: PPUSH
66550: CALL_OW 111
// result := [ _x , _y ] ;
66554: LD_ADDR_VAR 0 3
66558: PUSH
66559: LD_VAR 0 5
66563: PUSH
66564: LD_VAR 0 7
66568: PUSH
66569: EMPTY
66570: LIST
66571: LIST
66572: ST_TO_ADDR
// exit ;
66573: POP
66574: POP
66575: GO 66581
// end ; end ;
66577: GO 66421
66579: POP
66580: POP
// end ;
66581: LD_VAR 0 3
66585: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
66586: LD_INT 0
66588: PPUSH
66589: PPUSH
66590: PPUSH
// result := 0 ;
66591: LD_ADDR_VAR 0 3
66595: PUSH
66596: LD_INT 0
66598: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
66599: LD_VAR 0 1
66603: PUSH
66604: LD_INT 0
66606: LESS
66607: PUSH
66608: LD_VAR 0 1
66612: PUSH
66613: LD_INT 8
66615: GREATER
66616: OR
66617: PUSH
66618: LD_VAR 0 2
66622: PUSH
66623: LD_INT 0
66625: LESS
66626: OR
66627: PUSH
66628: LD_VAR 0 2
66632: PUSH
66633: LD_INT 8
66635: GREATER
66636: OR
66637: IFFALSE 66641
// exit ;
66639: GO 66716
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
66641: LD_ADDR_VAR 0 4
66645: PUSH
66646: LD_INT 22
66648: PUSH
66649: LD_VAR 0 2
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: PPUSH
66658: CALL_OW 69
66662: PUSH
66663: FOR_IN
66664: IFFALSE 66714
// begin un := UnitShoot ( i ) ;
66666: LD_ADDR_VAR 0 5
66670: PUSH
66671: LD_VAR 0 4
66675: PPUSH
66676: CALL_OW 504
66680: ST_TO_ADDR
// if GetSide ( un ) = side1 then
66681: LD_VAR 0 5
66685: PPUSH
66686: CALL_OW 255
66690: PUSH
66691: LD_VAR 0 1
66695: EQUAL
66696: IFFALSE 66712
// begin result := un ;
66698: LD_ADDR_VAR 0 3
66702: PUSH
66703: LD_VAR 0 5
66707: ST_TO_ADDR
// exit ;
66708: POP
66709: POP
66710: GO 66716
// end ; end ;
66712: GO 66663
66714: POP
66715: POP
// end ;
66716: LD_VAR 0 3
66720: RET
// export function GetCargoBay ( units ) ; begin
66721: LD_INT 0
66723: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
66724: LD_ADDR_VAR 0 2
66728: PUSH
66729: LD_VAR 0 1
66733: PPUSH
66734: LD_INT 2
66736: PUSH
66737: LD_INT 34
66739: PUSH
66740: LD_INT 12
66742: PUSH
66743: EMPTY
66744: LIST
66745: LIST
66746: PUSH
66747: LD_INT 34
66749: PUSH
66750: LD_INT 51
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: PUSH
66757: LD_INT 34
66759: PUSH
66760: LD_INT 32
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: PUSH
66767: LD_INT 34
66769: PUSH
66770: LD_INT 89
66772: PUSH
66773: EMPTY
66774: LIST
66775: LIST
66776: PUSH
66777: EMPTY
66778: LIST
66779: LIST
66780: LIST
66781: LIST
66782: LIST
66783: PPUSH
66784: CALL_OW 72
66788: ST_TO_ADDR
// end ;
66789: LD_VAR 0 2
66793: RET
// export function Negate ( value ) ; begin
66794: LD_INT 0
66796: PPUSH
// result := not value ;
66797: LD_ADDR_VAR 0 2
66801: PUSH
66802: LD_VAR 0 1
66806: NOT
66807: ST_TO_ADDR
// end ;
66808: LD_VAR 0 2
66812: RET
// export function Inc ( value ) ; begin
66813: LD_INT 0
66815: PPUSH
// result := value + 1 ;
66816: LD_ADDR_VAR 0 2
66820: PUSH
66821: LD_VAR 0 1
66825: PUSH
66826: LD_INT 1
66828: PLUS
66829: ST_TO_ADDR
// end ;
66830: LD_VAR 0 2
66834: RET
// export function Dec ( value ) ; begin
66835: LD_INT 0
66837: PPUSH
// result := value - 1 ;
66838: LD_ADDR_VAR 0 2
66842: PUSH
66843: LD_VAR 0 1
66847: PUSH
66848: LD_INT 1
66850: MINUS
66851: ST_TO_ADDR
// end ;
66852: LD_VAR 0 2
66856: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
66857: LD_INT 0
66859: PPUSH
66860: PPUSH
66861: PPUSH
66862: PPUSH
66863: PPUSH
66864: PPUSH
66865: PPUSH
66866: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
66867: LD_VAR 0 1
66871: PPUSH
66872: LD_VAR 0 2
66876: PPUSH
66877: CALL_OW 488
66881: NOT
66882: PUSH
66883: LD_VAR 0 3
66887: PPUSH
66888: LD_VAR 0 4
66892: PPUSH
66893: CALL_OW 488
66897: NOT
66898: OR
66899: IFFALSE 66912
// begin result := - 1 ;
66901: LD_ADDR_VAR 0 5
66905: PUSH
66906: LD_INT 1
66908: NEG
66909: ST_TO_ADDR
// exit ;
66910: GO 67147
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
66912: LD_ADDR_VAR 0 12
66916: PUSH
66917: LD_VAR 0 1
66921: PPUSH
66922: LD_VAR 0 2
66926: PPUSH
66927: LD_VAR 0 3
66931: PPUSH
66932: LD_VAR 0 4
66936: PPUSH
66937: CALL 65997 0 4
66941: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
66942: LD_ADDR_VAR 0 11
66946: PUSH
66947: LD_VAR 0 1
66951: PPUSH
66952: LD_VAR 0 2
66956: PPUSH
66957: LD_VAR 0 12
66961: PUSH
66962: LD_INT 1
66964: ARRAY
66965: PPUSH
66966: LD_VAR 0 12
66970: PUSH
66971: LD_INT 2
66973: ARRAY
66974: PPUSH
66975: CALL_OW 298
66979: ST_TO_ADDR
// distance := 9999 ;
66980: LD_ADDR_VAR 0 10
66984: PUSH
66985: LD_INT 9999
66987: ST_TO_ADDR
// for i := 0 to 5 do
66988: LD_ADDR_VAR 0 6
66992: PUSH
66993: DOUBLE
66994: LD_INT 0
66996: DEC
66997: ST_TO_ADDR
66998: LD_INT 5
67000: PUSH
67001: FOR_TO
67002: IFFALSE 67145
// begin _x := ShiftX ( x1 , i , centerDist ) ;
67004: LD_ADDR_VAR 0 7
67008: PUSH
67009: LD_VAR 0 1
67013: PPUSH
67014: LD_VAR 0 6
67018: PPUSH
67019: LD_VAR 0 11
67023: PPUSH
67024: CALL_OW 272
67028: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
67029: LD_ADDR_VAR 0 8
67033: PUSH
67034: LD_VAR 0 2
67038: PPUSH
67039: LD_VAR 0 6
67043: PPUSH
67044: LD_VAR 0 11
67048: PPUSH
67049: CALL_OW 273
67053: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
67054: LD_VAR 0 7
67058: PPUSH
67059: LD_VAR 0 8
67063: PPUSH
67064: CALL_OW 488
67068: NOT
67069: IFFALSE 67073
// continue ;
67071: GO 67001
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
67073: LD_ADDR_VAR 0 9
67077: PUSH
67078: LD_VAR 0 12
67082: PUSH
67083: LD_INT 1
67085: ARRAY
67086: PPUSH
67087: LD_VAR 0 12
67091: PUSH
67092: LD_INT 2
67094: ARRAY
67095: PPUSH
67096: LD_VAR 0 7
67100: PPUSH
67101: LD_VAR 0 8
67105: PPUSH
67106: CALL_OW 298
67110: ST_TO_ADDR
// if tmp < distance then
67111: LD_VAR 0 9
67115: PUSH
67116: LD_VAR 0 10
67120: LESS
67121: IFFALSE 67143
// begin result := i ;
67123: LD_ADDR_VAR 0 5
67127: PUSH
67128: LD_VAR 0 6
67132: ST_TO_ADDR
// distance := tmp ;
67133: LD_ADDR_VAR 0 10
67137: PUSH
67138: LD_VAR 0 9
67142: ST_TO_ADDR
// end ; end ;
67143: GO 67001
67145: POP
67146: POP
// end ;
67147: LD_VAR 0 5
67151: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67152: LD_INT 0
67154: PPUSH
67155: PPUSH
// if not driver or not IsInUnit ( driver ) then
67156: LD_VAR 0 1
67160: NOT
67161: PUSH
67162: LD_VAR 0 1
67166: PPUSH
67167: CALL_OW 310
67171: NOT
67172: OR
67173: IFFALSE 67177
// exit ;
67175: GO 67267
// vehicle := IsInUnit ( driver ) ;
67177: LD_ADDR_VAR 0 3
67181: PUSH
67182: LD_VAR 0 1
67186: PPUSH
67187: CALL_OW 310
67191: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67192: LD_VAR 0 1
67196: PPUSH
67197: LD_STRING \
67199: PUSH
67200: LD_INT 0
67202: PUSH
67203: LD_INT 0
67205: PUSH
67206: LD_INT 0
67208: PUSH
67209: LD_INT 0
67211: PUSH
67212: LD_INT 0
67214: PUSH
67215: LD_INT 0
67217: PUSH
67218: EMPTY
67219: LIST
67220: LIST
67221: LIST
67222: LIST
67223: LIST
67224: LIST
67225: LIST
67226: PUSH
67227: LD_STRING E
67229: PUSH
67230: LD_INT 0
67232: PUSH
67233: LD_INT 0
67235: PUSH
67236: LD_VAR 0 3
67240: PUSH
67241: LD_INT 0
67243: PUSH
67244: LD_INT 0
67246: PUSH
67247: LD_INT 0
67249: PUSH
67250: EMPTY
67251: LIST
67252: LIST
67253: LIST
67254: LIST
67255: LIST
67256: LIST
67257: LIST
67258: PUSH
67259: EMPTY
67260: LIST
67261: LIST
67262: PPUSH
67263: CALL_OW 446
// end ;
67267: LD_VAR 0 2
67271: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67272: LD_INT 0
67274: PPUSH
67275: PPUSH
// if not driver or not IsInUnit ( driver ) then
67276: LD_VAR 0 1
67280: NOT
67281: PUSH
67282: LD_VAR 0 1
67286: PPUSH
67287: CALL_OW 310
67291: NOT
67292: OR
67293: IFFALSE 67297
// exit ;
67295: GO 67387
// vehicle := IsInUnit ( driver ) ;
67297: LD_ADDR_VAR 0 3
67301: PUSH
67302: LD_VAR 0 1
67306: PPUSH
67307: CALL_OW 310
67311: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67312: LD_VAR 0 1
67316: PPUSH
67317: LD_STRING \
67319: PUSH
67320: LD_INT 0
67322: PUSH
67323: LD_INT 0
67325: PUSH
67326: LD_INT 0
67328: PUSH
67329: LD_INT 0
67331: PUSH
67332: LD_INT 0
67334: PUSH
67335: LD_INT 0
67337: PUSH
67338: EMPTY
67339: LIST
67340: LIST
67341: LIST
67342: LIST
67343: LIST
67344: LIST
67345: LIST
67346: PUSH
67347: LD_STRING E
67349: PUSH
67350: LD_INT 0
67352: PUSH
67353: LD_INT 0
67355: PUSH
67356: LD_VAR 0 3
67360: PUSH
67361: LD_INT 0
67363: PUSH
67364: LD_INT 0
67366: PUSH
67367: LD_INT 0
67369: PUSH
67370: EMPTY
67371: LIST
67372: LIST
67373: LIST
67374: LIST
67375: LIST
67376: LIST
67377: LIST
67378: PUSH
67379: EMPTY
67380: LIST
67381: LIST
67382: PPUSH
67383: CALL_OW 447
// end ;
67387: LD_VAR 0 2
67391: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
67392: LD_INT 0
67394: PPUSH
67395: PPUSH
67396: PPUSH
// tmp := [ ] ;
67397: LD_ADDR_VAR 0 5
67401: PUSH
67402: EMPTY
67403: ST_TO_ADDR
// for i in units do
67404: LD_ADDR_VAR 0 4
67408: PUSH
67409: LD_VAR 0 1
67413: PUSH
67414: FOR_IN
67415: IFFALSE 67453
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
67417: LD_ADDR_VAR 0 5
67421: PUSH
67422: LD_VAR 0 5
67426: PPUSH
67427: LD_VAR 0 5
67431: PUSH
67432: LD_INT 1
67434: PLUS
67435: PPUSH
67436: LD_VAR 0 4
67440: PPUSH
67441: CALL_OW 256
67445: PPUSH
67446: CALL_OW 2
67450: ST_TO_ADDR
67451: GO 67414
67453: POP
67454: POP
// if not tmp then
67455: LD_VAR 0 5
67459: NOT
67460: IFFALSE 67464
// exit ;
67462: GO 67512
// if asc then
67464: LD_VAR 0 2
67468: IFFALSE 67492
// result := SortListByListAsc ( units , tmp ) else
67470: LD_ADDR_VAR 0 3
67474: PUSH
67475: LD_VAR 0 1
67479: PPUSH
67480: LD_VAR 0 5
67484: PPUSH
67485: CALL_OW 76
67489: ST_TO_ADDR
67490: GO 67512
// result := SortListByListDesc ( units , tmp ) ;
67492: LD_ADDR_VAR 0 3
67496: PUSH
67497: LD_VAR 0 1
67501: PPUSH
67502: LD_VAR 0 5
67506: PPUSH
67507: CALL_OW 77
67511: ST_TO_ADDR
// end ;
67512: LD_VAR 0 3
67516: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
67517: LD_INT 0
67519: PPUSH
67520: PPUSH
// task := GetTaskList ( mech ) ;
67521: LD_ADDR_VAR 0 4
67525: PUSH
67526: LD_VAR 0 1
67530: PPUSH
67531: CALL_OW 437
67535: ST_TO_ADDR
// if not task then
67536: LD_VAR 0 4
67540: NOT
67541: IFFALSE 67545
// exit ;
67543: GO 67587
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
67545: LD_ADDR_VAR 0 3
67549: PUSH
67550: LD_VAR 0 4
67554: PUSH
67555: LD_INT 1
67557: ARRAY
67558: PUSH
67559: LD_INT 1
67561: ARRAY
67562: PUSH
67563: LD_STRING r
67565: EQUAL
67566: PUSH
67567: LD_VAR 0 4
67571: PUSH
67572: LD_INT 1
67574: ARRAY
67575: PUSH
67576: LD_INT 4
67578: ARRAY
67579: PUSH
67580: LD_VAR 0 2
67584: EQUAL
67585: AND
67586: ST_TO_ADDR
// end ;
67587: LD_VAR 0 3
67591: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
67592: LD_INT 0
67594: PPUSH
// SetDir ( unit , d ) ;
67595: LD_VAR 0 1
67599: PPUSH
67600: LD_VAR 0 4
67604: PPUSH
67605: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
67609: LD_VAR 0 1
67613: PPUSH
67614: LD_VAR 0 2
67618: PPUSH
67619: LD_VAR 0 3
67623: PPUSH
67624: LD_VAR 0 5
67628: PPUSH
67629: CALL_OW 48
// end ;
67633: LD_VAR 0 6
67637: RET
// export function ToNaturalNumber ( number ) ; begin
67638: LD_INT 0
67640: PPUSH
// result := number div 1 ;
67641: LD_ADDR_VAR 0 2
67645: PUSH
67646: LD_VAR 0 1
67650: PUSH
67651: LD_INT 1
67653: DIV
67654: ST_TO_ADDR
// if number < 0 then
67655: LD_VAR 0 1
67659: PUSH
67660: LD_INT 0
67662: LESS
67663: IFFALSE 67673
// result := 0 ;
67665: LD_ADDR_VAR 0 2
67669: PUSH
67670: LD_INT 0
67672: ST_TO_ADDR
// end ;
67673: LD_VAR 0 2
67677: RET
// export function SortByClass ( units , class ) ; var un ; begin
67678: LD_INT 0
67680: PPUSH
67681: PPUSH
// if not units or not class then
67682: LD_VAR 0 1
67686: NOT
67687: PUSH
67688: LD_VAR 0 2
67692: NOT
67693: OR
67694: IFFALSE 67698
// exit ;
67696: GO 67793
// result := [ ] ;
67698: LD_ADDR_VAR 0 3
67702: PUSH
67703: EMPTY
67704: ST_TO_ADDR
// for un in units do
67705: LD_ADDR_VAR 0 4
67709: PUSH
67710: LD_VAR 0 1
67714: PUSH
67715: FOR_IN
67716: IFFALSE 67791
// if GetClass ( un ) = class then
67718: LD_VAR 0 4
67722: PPUSH
67723: CALL_OW 257
67727: PUSH
67728: LD_VAR 0 2
67732: EQUAL
67733: IFFALSE 67760
// result := Insert ( result , 1 , un ) else
67735: LD_ADDR_VAR 0 3
67739: PUSH
67740: LD_VAR 0 3
67744: PPUSH
67745: LD_INT 1
67747: PPUSH
67748: LD_VAR 0 4
67752: PPUSH
67753: CALL_OW 2
67757: ST_TO_ADDR
67758: GO 67789
// result := Replace ( result , result + 1 , un ) ;
67760: LD_ADDR_VAR 0 3
67764: PUSH
67765: LD_VAR 0 3
67769: PPUSH
67770: LD_VAR 0 3
67774: PUSH
67775: LD_INT 1
67777: PLUS
67778: PPUSH
67779: LD_VAR 0 4
67783: PPUSH
67784: CALL_OW 1
67788: ST_TO_ADDR
67789: GO 67715
67791: POP
67792: POP
// end ;
67793: LD_VAR 0 3
67797: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
67798: LD_INT 0
67800: PPUSH
67801: PPUSH
67802: PPUSH
67803: PPUSH
67804: PPUSH
67805: PPUSH
67806: PPUSH
// result := [ ] ;
67807: LD_ADDR_VAR 0 4
67811: PUSH
67812: EMPTY
67813: ST_TO_ADDR
// if x - r < 0 then
67814: LD_VAR 0 1
67818: PUSH
67819: LD_VAR 0 3
67823: MINUS
67824: PUSH
67825: LD_INT 0
67827: LESS
67828: IFFALSE 67840
// min_x := 0 else
67830: LD_ADDR_VAR 0 8
67834: PUSH
67835: LD_INT 0
67837: ST_TO_ADDR
67838: GO 67856
// min_x := x - r ;
67840: LD_ADDR_VAR 0 8
67844: PUSH
67845: LD_VAR 0 1
67849: PUSH
67850: LD_VAR 0 3
67854: MINUS
67855: ST_TO_ADDR
// if y - r < 0 then
67856: LD_VAR 0 2
67860: PUSH
67861: LD_VAR 0 3
67865: MINUS
67866: PUSH
67867: LD_INT 0
67869: LESS
67870: IFFALSE 67882
// min_y := 0 else
67872: LD_ADDR_VAR 0 7
67876: PUSH
67877: LD_INT 0
67879: ST_TO_ADDR
67880: GO 67898
// min_y := y - r ;
67882: LD_ADDR_VAR 0 7
67886: PUSH
67887: LD_VAR 0 2
67891: PUSH
67892: LD_VAR 0 3
67896: MINUS
67897: ST_TO_ADDR
// max_x := x + r ;
67898: LD_ADDR_VAR 0 9
67902: PUSH
67903: LD_VAR 0 1
67907: PUSH
67908: LD_VAR 0 3
67912: PLUS
67913: ST_TO_ADDR
// max_y := y + r ;
67914: LD_ADDR_VAR 0 10
67918: PUSH
67919: LD_VAR 0 2
67923: PUSH
67924: LD_VAR 0 3
67928: PLUS
67929: ST_TO_ADDR
// for _x = min_x to max_x do
67930: LD_ADDR_VAR 0 5
67934: PUSH
67935: DOUBLE
67936: LD_VAR 0 8
67940: DEC
67941: ST_TO_ADDR
67942: LD_VAR 0 9
67946: PUSH
67947: FOR_TO
67948: IFFALSE 68049
// for _y = min_y to max_y do
67950: LD_ADDR_VAR 0 6
67954: PUSH
67955: DOUBLE
67956: LD_VAR 0 7
67960: DEC
67961: ST_TO_ADDR
67962: LD_VAR 0 10
67966: PUSH
67967: FOR_TO
67968: IFFALSE 68045
// begin if not ValidHex ( _x , _y ) then
67970: LD_VAR 0 5
67974: PPUSH
67975: LD_VAR 0 6
67979: PPUSH
67980: CALL_OW 488
67984: NOT
67985: IFFALSE 67989
// continue ;
67987: GO 67967
// if GetResourceTypeXY ( _x , _y ) then
67989: LD_VAR 0 5
67993: PPUSH
67994: LD_VAR 0 6
67998: PPUSH
67999: CALL_OW 283
68003: IFFALSE 68043
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
68005: LD_ADDR_VAR 0 4
68009: PUSH
68010: LD_VAR 0 4
68014: PPUSH
68015: LD_VAR 0 4
68019: PUSH
68020: LD_INT 1
68022: PLUS
68023: PPUSH
68024: LD_VAR 0 5
68028: PUSH
68029: LD_VAR 0 6
68033: PUSH
68034: EMPTY
68035: LIST
68036: LIST
68037: PPUSH
68038: CALL_OW 1
68042: ST_TO_ADDR
// end ;
68043: GO 67967
68045: POP
68046: POP
68047: GO 67947
68049: POP
68050: POP
// end ;
68051: LD_VAR 0 4
68055: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
68056: LD_INT 0
68058: PPUSH
68059: PPUSH
68060: PPUSH
68061: PPUSH
68062: PPUSH
68063: PPUSH
68064: PPUSH
68065: PPUSH
// if not units then
68066: LD_VAR 0 1
68070: NOT
68071: IFFALSE 68075
// exit ;
68073: GO 68599
// result := UnitFilter ( units , [ f_ok ] ) ;
68075: LD_ADDR_VAR 0 3
68079: PUSH
68080: LD_VAR 0 1
68084: PPUSH
68085: LD_INT 50
68087: PUSH
68088: EMPTY
68089: LIST
68090: PPUSH
68091: CALL_OW 72
68095: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
68096: LD_ADDR_VAR 0 8
68100: PUSH
68101: LD_VAR 0 1
68105: PUSH
68106: LD_INT 1
68108: ARRAY
68109: PPUSH
68110: CALL_OW 255
68114: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
68115: LD_ADDR_VAR 0 10
68119: PUSH
68120: LD_INT 29
68122: PUSH
68123: LD_INT 91
68125: PUSH
68126: LD_INT 49
68128: PUSH
68129: EMPTY
68130: LIST
68131: LIST
68132: LIST
68133: ST_TO_ADDR
// if not result then
68134: LD_VAR 0 3
68138: NOT
68139: IFFALSE 68143
// exit ;
68141: GO 68599
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
68143: LD_ADDR_VAR 0 5
68147: PUSH
68148: LD_INT 81
68150: PUSH
68151: LD_VAR 0 8
68155: PUSH
68156: EMPTY
68157: LIST
68158: LIST
68159: PPUSH
68160: CALL_OW 69
68164: ST_TO_ADDR
// for i in result do
68165: LD_ADDR_VAR 0 4
68169: PUSH
68170: LD_VAR 0 3
68174: PUSH
68175: FOR_IN
68176: IFFALSE 68597
// begin tag := GetTag ( i ) + 1 ;
68178: LD_ADDR_VAR 0 9
68182: PUSH
68183: LD_VAR 0 4
68187: PPUSH
68188: CALL_OW 110
68192: PUSH
68193: LD_INT 1
68195: PLUS
68196: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
68197: LD_ADDR_VAR 0 7
68201: PUSH
68202: LD_VAR 0 4
68206: PPUSH
68207: CALL_OW 250
68211: PPUSH
68212: LD_VAR 0 4
68216: PPUSH
68217: CALL_OW 251
68221: PPUSH
68222: LD_INT 6
68224: PPUSH
68225: CALL 67798 0 3
68229: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
68230: LD_VAR 0 4
68234: PPUSH
68235: CALL_OW 247
68239: PUSH
68240: LD_INT 2
68242: EQUAL
68243: PUSH
68244: LD_VAR 0 7
68248: AND
68249: PUSH
68250: LD_VAR 0 4
68254: PPUSH
68255: CALL_OW 264
68259: PUSH
68260: LD_VAR 0 10
68264: IN
68265: NOT
68266: AND
68267: IFFALSE 68306
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
68269: LD_VAR 0 4
68273: PPUSH
68274: LD_VAR 0 7
68278: PUSH
68279: LD_INT 1
68281: ARRAY
68282: PUSH
68283: LD_INT 1
68285: ARRAY
68286: PPUSH
68287: LD_VAR 0 7
68291: PUSH
68292: LD_INT 1
68294: ARRAY
68295: PUSH
68296: LD_INT 2
68298: ARRAY
68299: PPUSH
68300: CALL_OW 116
68304: GO 68595
// if path > tag then
68306: LD_VAR 0 2
68310: PUSH
68311: LD_VAR 0 9
68315: GREATER
68316: IFFALSE 68524
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
68318: LD_ADDR_VAR 0 6
68322: PUSH
68323: LD_VAR 0 5
68327: PPUSH
68328: LD_INT 91
68330: PUSH
68331: LD_VAR 0 4
68335: PUSH
68336: LD_INT 8
68338: PUSH
68339: EMPTY
68340: LIST
68341: LIST
68342: LIST
68343: PPUSH
68344: CALL_OW 72
68348: ST_TO_ADDR
// if nearEnemy then
68349: LD_VAR 0 6
68353: IFFALSE 68422
// begin if GetWeapon ( i ) = ru_time_lapser then
68355: LD_VAR 0 4
68359: PPUSH
68360: CALL_OW 264
68364: PUSH
68365: LD_INT 49
68367: EQUAL
68368: IFFALSE 68396
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
68370: LD_VAR 0 4
68374: PPUSH
68375: LD_VAR 0 6
68379: PPUSH
68380: LD_VAR 0 4
68384: PPUSH
68385: CALL_OW 74
68389: PPUSH
68390: CALL_OW 112
68394: GO 68420
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
68396: LD_VAR 0 4
68400: PPUSH
68401: LD_VAR 0 6
68405: PPUSH
68406: LD_VAR 0 4
68410: PPUSH
68411: CALL_OW 74
68415: PPUSH
68416: CALL 69524 0 2
// end else
68420: GO 68522
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
68422: LD_VAR 0 4
68426: PPUSH
68427: LD_VAR 0 2
68431: PUSH
68432: LD_VAR 0 9
68436: ARRAY
68437: PUSH
68438: LD_INT 1
68440: ARRAY
68441: PPUSH
68442: LD_VAR 0 2
68446: PUSH
68447: LD_VAR 0 9
68451: ARRAY
68452: PUSH
68453: LD_INT 2
68455: ARRAY
68456: PPUSH
68457: CALL_OW 297
68461: PUSH
68462: LD_INT 6
68464: GREATER
68465: IFFALSE 68508
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
68467: LD_VAR 0 4
68471: PPUSH
68472: LD_VAR 0 2
68476: PUSH
68477: LD_VAR 0 9
68481: ARRAY
68482: PUSH
68483: LD_INT 1
68485: ARRAY
68486: PPUSH
68487: LD_VAR 0 2
68491: PUSH
68492: LD_VAR 0 9
68496: ARRAY
68497: PUSH
68498: LD_INT 2
68500: ARRAY
68501: PPUSH
68502: CALL_OW 114
68506: GO 68522
// SetTag ( i , tag ) ;
68508: LD_VAR 0 4
68512: PPUSH
68513: LD_VAR 0 9
68517: PPUSH
68518: CALL_OW 109
// end else
68522: GO 68595
// if enemy then
68524: LD_VAR 0 5
68528: IFFALSE 68595
// begin if GetWeapon ( i ) = ru_time_lapser then
68530: LD_VAR 0 4
68534: PPUSH
68535: CALL_OW 264
68539: PUSH
68540: LD_INT 49
68542: EQUAL
68543: IFFALSE 68571
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
68545: LD_VAR 0 4
68549: PPUSH
68550: LD_VAR 0 5
68554: PPUSH
68555: LD_VAR 0 4
68559: PPUSH
68560: CALL_OW 74
68564: PPUSH
68565: CALL_OW 112
68569: GO 68595
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
68571: LD_VAR 0 4
68575: PPUSH
68576: LD_VAR 0 5
68580: PPUSH
68581: LD_VAR 0 4
68585: PPUSH
68586: CALL_OW 74
68590: PPUSH
68591: CALL 69524 0 2
// end ; end ;
68595: GO 68175
68597: POP
68598: POP
// end ;
68599: LD_VAR 0 3
68603: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
68604: LD_INT 0
68606: PPUSH
68607: PPUSH
68608: PPUSH
// if not unit or IsInUnit ( unit ) then
68609: LD_VAR 0 1
68613: NOT
68614: PUSH
68615: LD_VAR 0 1
68619: PPUSH
68620: CALL_OW 310
68624: OR
68625: IFFALSE 68629
// exit ;
68627: GO 68720
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
68629: LD_ADDR_VAR 0 4
68633: PUSH
68634: LD_VAR 0 1
68638: PPUSH
68639: CALL_OW 250
68643: PPUSH
68644: LD_VAR 0 2
68648: PPUSH
68649: LD_INT 1
68651: PPUSH
68652: CALL_OW 272
68656: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
68657: LD_ADDR_VAR 0 5
68661: PUSH
68662: LD_VAR 0 1
68666: PPUSH
68667: CALL_OW 251
68671: PPUSH
68672: LD_VAR 0 2
68676: PPUSH
68677: LD_INT 1
68679: PPUSH
68680: CALL_OW 273
68684: ST_TO_ADDR
// if ValidHex ( x , y ) then
68685: LD_VAR 0 4
68689: PPUSH
68690: LD_VAR 0 5
68694: PPUSH
68695: CALL_OW 488
68699: IFFALSE 68720
// ComTurnXY ( unit , x , y ) ;
68701: LD_VAR 0 1
68705: PPUSH
68706: LD_VAR 0 4
68710: PPUSH
68711: LD_VAR 0 5
68715: PPUSH
68716: CALL_OW 118
// end ;
68720: LD_VAR 0 3
68724: RET
// export function SeeUnits ( side , units ) ; var i ; begin
68725: LD_INT 0
68727: PPUSH
68728: PPUSH
// result := false ;
68729: LD_ADDR_VAR 0 3
68733: PUSH
68734: LD_INT 0
68736: ST_TO_ADDR
// if not units then
68737: LD_VAR 0 2
68741: NOT
68742: IFFALSE 68746
// exit ;
68744: GO 68791
// for i in units do
68746: LD_ADDR_VAR 0 4
68750: PUSH
68751: LD_VAR 0 2
68755: PUSH
68756: FOR_IN
68757: IFFALSE 68789
// if See ( side , i ) then
68759: LD_VAR 0 1
68763: PPUSH
68764: LD_VAR 0 4
68768: PPUSH
68769: CALL_OW 292
68773: IFFALSE 68787
// begin result := true ;
68775: LD_ADDR_VAR 0 3
68779: PUSH
68780: LD_INT 1
68782: ST_TO_ADDR
// exit ;
68783: POP
68784: POP
68785: GO 68791
// end ;
68787: GO 68756
68789: POP
68790: POP
// end ;
68791: LD_VAR 0 3
68795: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
68796: LD_INT 0
68798: PPUSH
68799: PPUSH
68800: PPUSH
68801: PPUSH
// if not unit or not points then
68802: LD_VAR 0 1
68806: NOT
68807: PUSH
68808: LD_VAR 0 2
68812: NOT
68813: OR
68814: IFFALSE 68818
// exit ;
68816: GO 68908
// dist := 99999 ;
68818: LD_ADDR_VAR 0 5
68822: PUSH
68823: LD_INT 99999
68825: ST_TO_ADDR
// for i in points do
68826: LD_ADDR_VAR 0 4
68830: PUSH
68831: LD_VAR 0 2
68835: PUSH
68836: FOR_IN
68837: IFFALSE 68906
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
68839: LD_ADDR_VAR 0 6
68843: PUSH
68844: LD_VAR 0 1
68848: PPUSH
68849: LD_VAR 0 4
68853: PUSH
68854: LD_INT 1
68856: ARRAY
68857: PPUSH
68858: LD_VAR 0 4
68862: PUSH
68863: LD_INT 2
68865: ARRAY
68866: PPUSH
68867: CALL_OW 297
68871: ST_TO_ADDR
// if tmpDist < dist then
68872: LD_VAR 0 6
68876: PUSH
68877: LD_VAR 0 5
68881: LESS
68882: IFFALSE 68904
// begin result := i ;
68884: LD_ADDR_VAR 0 3
68888: PUSH
68889: LD_VAR 0 4
68893: ST_TO_ADDR
// dist := tmpDist ;
68894: LD_ADDR_VAR 0 5
68898: PUSH
68899: LD_VAR 0 6
68903: ST_TO_ADDR
// end ; end ;
68904: GO 68836
68906: POP
68907: POP
// end ;
68908: LD_VAR 0 3
68912: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
68913: LD_INT 0
68915: PPUSH
// uc_side := side ;
68916: LD_ADDR_OWVAR 20
68920: PUSH
68921: LD_VAR 0 1
68925: ST_TO_ADDR
// uc_nation := 3 ;
68926: LD_ADDR_OWVAR 21
68930: PUSH
68931: LD_INT 3
68933: ST_TO_ADDR
// vc_chassis := 25 ;
68934: LD_ADDR_OWVAR 37
68938: PUSH
68939: LD_INT 25
68941: ST_TO_ADDR
// vc_engine := engine_siberite ;
68942: LD_ADDR_OWVAR 39
68946: PUSH
68947: LD_INT 3
68949: ST_TO_ADDR
// vc_control := control_computer ;
68950: LD_ADDR_OWVAR 38
68954: PUSH
68955: LD_INT 3
68957: ST_TO_ADDR
// vc_weapon := 59 ;
68958: LD_ADDR_OWVAR 40
68962: PUSH
68963: LD_INT 59
68965: ST_TO_ADDR
// result := CreateVehicle ;
68966: LD_ADDR_VAR 0 5
68970: PUSH
68971: CALL_OW 45
68975: ST_TO_ADDR
// SetDir ( result , d ) ;
68976: LD_VAR 0 5
68980: PPUSH
68981: LD_VAR 0 4
68985: PPUSH
68986: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
68990: LD_VAR 0 5
68994: PPUSH
68995: LD_VAR 0 2
68999: PPUSH
69000: LD_VAR 0 3
69004: PPUSH
69005: LD_INT 0
69007: PPUSH
69008: CALL_OW 48
// end ;
69012: LD_VAR 0 5
69016: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
69017: LD_INT 0
69019: PPUSH
69020: PPUSH
69021: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
69022: LD_ADDR_VAR 0 2
69026: PUSH
69027: LD_INT 0
69029: PUSH
69030: LD_INT 0
69032: PUSH
69033: LD_INT 0
69035: PUSH
69036: LD_INT 0
69038: PUSH
69039: EMPTY
69040: LIST
69041: LIST
69042: LIST
69043: LIST
69044: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
69045: LD_VAR 0 1
69049: NOT
69050: PUSH
69051: LD_VAR 0 1
69055: PPUSH
69056: CALL_OW 264
69060: PUSH
69061: LD_INT 12
69063: PUSH
69064: LD_INT 51
69066: PUSH
69067: LD_INT 32
69069: PUSH
69070: LD_INT 89
69072: PUSH
69073: EMPTY
69074: LIST
69075: LIST
69076: LIST
69077: LIST
69078: IN
69079: NOT
69080: OR
69081: IFFALSE 69085
// exit ;
69083: GO 69183
// for i := 1 to 3 do
69085: LD_ADDR_VAR 0 3
69089: PUSH
69090: DOUBLE
69091: LD_INT 1
69093: DEC
69094: ST_TO_ADDR
69095: LD_INT 3
69097: PUSH
69098: FOR_TO
69099: IFFALSE 69181
// begin tmp := GetCargo ( cargo , i ) ;
69101: LD_ADDR_VAR 0 4
69105: PUSH
69106: LD_VAR 0 1
69110: PPUSH
69111: LD_VAR 0 3
69115: PPUSH
69116: CALL_OW 289
69120: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
69121: LD_ADDR_VAR 0 2
69125: PUSH
69126: LD_VAR 0 2
69130: PPUSH
69131: LD_VAR 0 3
69135: PPUSH
69136: LD_VAR 0 4
69140: PPUSH
69141: CALL_OW 1
69145: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
69146: LD_ADDR_VAR 0 2
69150: PUSH
69151: LD_VAR 0 2
69155: PPUSH
69156: LD_INT 4
69158: PPUSH
69159: LD_VAR 0 2
69163: PUSH
69164: LD_INT 4
69166: ARRAY
69167: PUSH
69168: LD_VAR 0 4
69172: PLUS
69173: PPUSH
69174: CALL_OW 1
69178: ST_TO_ADDR
// end ;
69179: GO 69098
69181: POP
69182: POP
// end ;
69183: LD_VAR 0 2
69187: RET
// export function Length ( array ) ; begin
69188: LD_INT 0
69190: PPUSH
// result := array + 0 ;
69191: LD_ADDR_VAR 0 2
69195: PUSH
69196: LD_VAR 0 1
69200: PUSH
69201: LD_INT 0
69203: PLUS
69204: ST_TO_ADDR
// end ;
69205: LD_VAR 0 2
69209: RET
// export function PrepareArray ( array ) ; begin
69210: LD_INT 0
69212: PPUSH
// result := array diff 0 ;
69213: LD_ADDR_VAR 0 2
69217: PUSH
69218: LD_VAR 0 1
69222: PUSH
69223: LD_INT 0
69225: DIFF
69226: ST_TO_ADDR
// if not result [ 1 ] then
69227: LD_VAR 0 2
69231: PUSH
69232: LD_INT 1
69234: ARRAY
69235: NOT
69236: IFFALSE 69256
// result := Delete ( result , 1 ) ;
69238: LD_ADDR_VAR 0 2
69242: PUSH
69243: LD_VAR 0 2
69247: PPUSH
69248: LD_INT 1
69250: PPUSH
69251: CALL_OW 3
69255: ST_TO_ADDR
// end ;
69256: LD_VAR 0 2
69260: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
69261: LD_INT 0
69263: PPUSH
69264: PPUSH
69265: PPUSH
69266: PPUSH
// sibRocketRange := 25 ;
69267: LD_ADDR_VAR 0 6
69271: PUSH
69272: LD_INT 25
69274: ST_TO_ADDR
// result := false ;
69275: LD_ADDR_VAR 0 4
69279: PUSH
69280: LD_INT 0
69282: ST_TO_ADDR
// for i := 0 to 5 do
69283: LD_ADDR_VAR 0 5
69287: PUSH
69288: DOUBLE
69289: LD_INT 0
69291: DEC
69292: ST_TO_ADDR
69293: LD_INT 5
69295: PUSH
69296: FOR_TO
69297: IFFALSE 69364
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
69299: LD_VAR 0 1
69303: PPUSH
69304: LD_VAR 0 5
69308: PPUSH
69309: LD_VAR 0 6
69313: PPUSH
69314: CALL_OW 272
69318: PPUSH
69319: LD_VAR 0 2
69323: PPUSH
69324: LD_VAR 0 5
69328: PPUSH
69329: LD_VAR 0 6
69333: PPUSH
69334: CALL_OW 273
69338: PPUSH
69339: LD_VAR 0 3
69343: PPUSH
69344: CALL_OW 309
69348: IFFALSE 69362
// begin result := true ;
69350: LD_ADDR_VAR 0 4
69354: PUSH
69355: LD_INT 1
69357: ST_TO_ADDR
// exit ;
69358: POP
69359: POP
69360: GO 69366
// end ;
69362: GO 69296
69364: POP
69365: POP
// end ;
69366: LD_VAR 0 4
69370: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
69371: LD_INT 0
69373: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
69374: LD_VAR 0 1
69378: PPUSH
69379: LD_VAR 0 2
69383: PPUSH
69384: LD_INT 0
69386: PPUSH
69387: LD_INT 0
69389: PPUSH
69390: LD_INT 1
69392: PPUSH
69393: LD_INT 0
69395: PPUSH
69396: CALL_OW 587
// end ;
69400: LD_VAR 0 3
69404: RET
// export function CenterOnNow ( unit ) ; begin
69405: LD_INT 0
69407: PPUSH
// result := IsInUnit ( unit ) ;
69408: LD_ADDR_VAR 0 2
69412: PUSH
69413: LD_VAR 0 1
69417: PPUSH
69418: CALL_OW 310
69422: ST_TO_ADDR
// if not result then
69423: LD_VAR 0 2
69427: NOT
69428: IFFALSE 69440
// result := unit ;
69430: LD_ADDR_VAR 0 2
69434: PUSH
69435: LD_VAR 0 1
69439: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
69440: LD_VAR 0 1
69444: PPUSH
69445: CALL_OW 87
// end ;
69449: LD_VAR 0 2
69453: RET
// export function ComMoveHex ( unit , hex ) ; begin
69454: LD_INT 0
69456: PPUSH
// if not hex then
69457: LD_VAR 0 2
69461: NOT
69462: IFFALSE 69466
// exit ;
69464: GO 69519
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
69466: LD_VAR 0 2
69470: PUSH
69471: LD_INT 1
69473: ARRAY
69474: PPUSH
69475: LD_VAR 0 2
69479: PUSH
69480: LD_INT 2
69482: ARRAY
69483: PPUSH
69484: CALL_OW 428
69488: IFFALSE 69492
// exit ;
69490: GO 69519
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
69492: LD_VAR 0 1
69496: PPUSH
69497: LD_VAR 0 2
69501: PUSH
69502: LD_INT 1
69504: ARRAY
69505: PPUSH
69506: LD_VAR 0 2
69510: PUSH
69511: LD_INT 2
69513: ARRAY
69514: PPUSH
69515: CALL_OW 111
// end ;
69519: LD_VAR 0 3
69523: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
69524: LD_INT 0
69526: PPUSH
69527: PPUSH
69528: PPUSH
// if not unit or not enemy then
69529: LD_VAR 0 1
69533: NOT
69534: PUSH
69535: LD_VAR 0 2
69539: NOT
69540: OR
69541: IFFALSE 69545
// exit ;
69543: GO 69669
// x := GetX ( enemy ) ;
69545: LD_ADDR_VAR 0 4
69549: PUSH
69550: LD_VAR 0 2
69554: PPUSH
69555: CALL_OW 250
69559: ST_TO_ADDR
// y := GetY ( enemy ) ;
69560: LD_ADDR_VAR 0 5
69564: PUSH
69565: LD_VAR 0 2
69569: PPUSH
69570: CALL_OW 251
69574: ST_TO_ADDR
// if ValidHex ( x , y ) then
69575: LD_VAR 0 4
69579: PPUSH
69580: LD_VAR 0 5
69584: PPUSH
69585: CALL_OW 488
69589: IFFALSE 69669
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
69591: LD_VAR 0 2
69595: PPUSH
69596: CALL_OW 247
69600: PUSH
69601: LD_INT 3
69603: PUSH
69604: LD_INT 2
69606: PUSH
69607: EMPTY
69608: LIST
69609: LIST
69610: IN
69611: PUSH
69612: LD_VAR 0 1
69616: PPUSH
69617: CALL_OW 255
69621: PPUSH
69622: LD_VAR 0 2
69626: PPUSH
69627: CALL_OW 292
69631: OR
69632: IFFALSE 69650
// ComAttackUnit ( unit , enemy ) else
69634: LD_VAR 0 1
69638: PPUSH
69639: LD_VAR 0 2
69643: PPUSH
69644: CALL_OW 115
69648: GO 69669
// ComAgressiveMove ( unit , x , y ) ;
69650: LD_VAR 0 1
69654: PPUSH
69655: LD_VAR 0 4
69659: PPUSH
69660: LD_VAR 0 5
69664: PPUSH
69665: CALL_OW 114
// end ;
69669: LD_VAR 0 3
69673: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
69674: LD_INT 0
69676: PPUSH
69677: PPUSH
69678: PPUSH
// list := AreaToList ( area , 0 ) ;
69679: LD_ADDR_VAR 0 5
69683: PUSH
69684: LD_VAR 0 1
69688: PPUSH
69689: LD_INT 0
69691: PPUSH
69692: CALL_OW 517
69696: ST_TO_ADDR
// if not list then
69697: LD_VAR 0 5
69701: NOT
69702: IFFALSE 69706
// exit ;
69704: GO 69836
// if all then
69706: LD_VAR 0 2
69710: IFFALSE 69798
// begin for i := 1 to list [ 1 ] do
69712: LD_ADDR_VAR 0 4
69716: PUSH
69717: DOUBLE
69718: LD_INT 1
69720: DEC
69721: ST_TO_ADDR
69722: LD_VAR 0 5
69726: PUSH
69727: LD_INT 1
69729: ARRAY
69730: PUSH
69731: FOR_TO
69732: IFFALSE 69794
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
69734: LD_ADDR_VAR 0 3
69738: PUSH
69739: LD_VAR 0 3
69743: PPUSH
69744: LD_VAR 0 3
69748: PUSH
69749: LD_INT 1
69751: PLUS
69752: PPUSH
69753: LD_VAR 0 5
69757: PUSH
69758: LD_INT 1
69760: ARRAY
69761: PUSH
69762: LD_VAR 0 4
69766: ARRAY
69767: PUSH
69768: LD_VAR 0 5
69772: PUSH
69773: LD_INT 2
69775: ARRAY
69776: PUSH
69777: LD_VAR 0 4
69781: ARRAY
69782: PUSH
69783: EMPTY
69784: LIST
69785: LIST
69786: PPUSH
69787: CALL_OW 1
69791: ST_TO_ADDR
69792: GO 69731
69794: POP
69795: POP
// exit ;
69796: GO 69836
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
69798: LD_ADDR_VAR 0 3
69802: PUSH
69803: LD_VAR 0 5
69807: PUSH
69808: LD_INT 1
69810: ARRAY
69811: PUSH
69812: LD_INT 1
69814: ARRAY
69815: PUSH
69816: LD_VAR 0 5
69820: PUSH
69821: LD_INT 2
69823: ARRAY
69824: PUSH
69825: LD_INT 1
69827: ARRAY
69828: PUSH
69829: EMPTY
69830: LIST
69831: LIST
69832: PUSH
69833: EMPTY
69834: LIST
69835: ST_TO_ADDR
// end ;
69836: LD_VAR 0 3
69840: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
69841: LD_INT 0
69843: PPUSH
69844: PPUSH
// list := AreaToList ( area , 0 ) ;
69845: LD_ADDR_VAR 0 4
69849: PUSH
69850: LD_VAR 0 1
69854: PPUSH
69855: LD_INT 0
69857: PPUSH
69858: CALL_OW 517
69862: ST_TO_ADDR
// if not list then
69863: LD_VAR 0 4
69867: NOT
69868: IFFALSE 69872
// exit ;
69870: GO 69913
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
69872: LD_ADDR_VAR 0 3
69876: PUSH
69877: LD_VAR 0 4
69881: PUSH
69882: LD_INT 1
69884: ARRAY
69885: PUSH
69886: LD_INT 1
69888: ARRAY
69889: PUSH
69890: LD_VAR 0 4
69894: PUSH
69895: LD_INT 2
69897: ARRAY
69898: PUSH
69899: LD_INT 1
69901: ARRAY
69902: PUSH
69903: LD_VAR 0 2
69907: PUSH
69908: EMPTY
69909: LIST
69910: LIST
69911: LIST
69912: ST_TO_ADDR
// end ;
69913: LD_VAR 0 3
69917: RET
// export function First ( array ) ; begin
69918: LD_INT 0
69920: PPUSH
// if not array then
69921: LD_VAR 0 1
69925: NOT
69926: IFFALSE 69930
// exit ;
69928: GO 69944
// result := array [ 1 ] ;
69930: LD_ADDR_VAR 0 2
69934: PUSH
69935: LD_VAR 0 1
69939: PUSH
69940: LD_INT 1
69942: ARRAY
69943: ST_TO_ADDR
// end ;
69944: LD_VAR 0 2
69948: RET
// export function Last ( array ) ; begin
69949: LD_INT 0
69951: PPUSH
// if not array then
69952: LD_VAR 0 1
69956: NOT
69957: IFFALSE 69961
// exit ;
69959: GO 69977
// result := array [ array ] ;
69961: LD_ADDR_VAR 0 2
69965: PUSH
69966: LD_VAR 0 1
69970: PUSH
69971: LD_VAR 0 1
69975: ARRAY
69976: ST_TO_ADDR
// end ;
69977: LD_VAR 0 2
69981: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
69982: LD_INT 0
69984: PPUSH
69985: PPUSH
// result := [ ] ;
69986: LD_ADDR_VAR 0 5
69990: PUSH
69991: EMPTY
69992: ST_TO_ADDR
// if not array then
69993: LD_VAR 0 1
69997: NOT
69998: IFFALSE 70002
// exit ;
70000: GO 70114
// for i := 1 to array do
70002: LD_ADDR_VAR 0 6
70006: PUSH
70007: DOUBLE
70008: LD_INT 1
70010: DEC
70011: ST_TO_ADDR
70012: LD_VAR 0 1
70016: PUSH
70017: FOR_TO
70018: IFFALSE 70112
// if array [ i ] [ index ] = value then
70020: LD_VAR 0 1
70024: PUSH
70025: LD_VAR 0 6
70029: ARRAY
70030: PUSH
70031: LD_VAR 0 2
70035: ARRAY
70036: PUSH
70037: LD_VAR 0 3
70041: EQUAL
70042: IFFALSE 70110
// begin if indexColumn then
70044: LD_VAR 0 4
70048: IFFALSE 70084
// result := Join ( result , array [ i ] [ indexColumn ] ) else
70050: LD_ADDR_VAR 0 5
70054: PUSH
70055: LD_VAR 0 5
70059: PPUSH
70060: LD_VAR 0 1
70064: PUSH
70065: LD_VAR 0 6
70069: ARRAY
70070: PUSH
70071: LD_VAR 0 4
70075: ARRAY
70076: PPUSH
70077: CALL 65452 0 2
70081: ST_TO_ADDR
70082: GO 70110
// result := Join ( result , array [ i ] ) ;
70084: LD_ADDR_VAR 0 5
70088: PUSH
70089: LD_VAR 0 5
70093: PPUSH
70094: LD_VAR 0 1
70098: PUSH
70099: LD_VAR 0 6
70103: ARRAY
70104: PPUSH
70105: CALL 65452 0 2
70109: ST_TO_ADDR
// end ;
70110: GO 70017
70112: POP
70113: POP
// end ;
70114: LD_VAR 0 5
70118: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
70119: LD_INT 0
70121: PPUSH
70122: PPUSH
70123: PPUSH
// if btype = b_depot then
70124: LD_VAR 0 2
70128: PUSH
70129: LD_INT 0
70131: EQUAL
70132: IFFALSE 70144
// begin result := true ;
70134: LD_ADDR_VAR 0 3
70138: PUSH
70139: LD_INT 1
70141: ST_TO_ADDR
// exit ;
70142: GO 70260
// end ; pom := GetBase ( depot ) ;
70144: LD_ADDR_VAR 0 4
70148: PUSH
70149: LD_VAR 0 1
70153: PPUSH
70154: CALL_OW 274
70158: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
70159: LD_ADDR_VAR 0 5
70163: PUSH
70164: LD_VAR 0 2
70168: PPUSH
70169: LD_VAR 0 1
70173: PPUSH
70174: CALL_OW 248
70178: PPUSH
70179: CALL_OW 450
70183: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
70184: LD_ADDR_VAR 0 3
70188: PUSH
70189: LD_VAR 0 4
70193: PPUSH
70194: LD_INT 1
70196: PPUSH
70197: CALL_OW 275
70201: PUSH
70202: LD_VAR 0 5
70206: PUSH
70207: LD_INT 1
70209: ARRAY
70210: GREATEREQUAL
70211: PUSH
70212: LD_VAR 0 4
70216: PPUSH
70217: LD_INT 2
70219: PPUSH
70220: CALL_OW 275
70224: PUSH
70225: LD_VAR 0 5
70229: PUSH
70230: LD_INT 2
70232: ARRAY
70233: GREATEREQUAL
70234: AND
70235: PUSH
70236: LD_VAR 0 4
70240: PPUSH
70241: LD_INT 3
70243: PPUSH
70244: CALL_OW 275
70248: PUSH
70249: LD_VAR 0 5
70253: PUSH
70254: LD_INT 3
70256: ARRAY
70257: GREATEREQUAL
70258: AND
70259: ST_TO_ADDR
// end ;
70260: LD_VAR 0 3
70264: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
70265: LD_INT 0
70267: PPUSH
// if not vehicles or not parkingPoint then
70268: LD_VAR 0 1
70272: NOT
70273: PUSH
70274: LD_VAR 0 2
70278: NOT
70279: OR
70280: IFFALSE 70284
// exit ;
70282: GO 70382
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
70284: LD_ADDR_VAR 0 1
70288: PUSH
70289: LD_VAR 0 1
70293: PPUSH
70294: LD_INT 50
70296: PUSH
70297: EMPTY
70298: LIST
70299: PUSH
70300: LD_INT 3
70302: PUSH
70303: LD_INT 92
70305: PUSH
70306: LD_VAR 0 2
70310: PUSH
70311: LD_INT 1
70313: ARRAY
70314: PUSH
70315: LD_VAR 0 2
70319: PUSH
70320: LD_INT 2
70322: ARRAY
70323: PUSH
70324: LD_INT 8
70326: PUSH
70327: EMPTY
70328: LIST
70329: LIST
70330: LIST
70331: LIST
70332: PUSH
70333: EMPTY
70334: LIST
70335: LIST
70336: PUSH
70337: EMPTY
70338: LIST
70339: LIST
70340: PPUSH
70341: CALL_OW 72
70345: ST_TO_ADDR
// if not vehicles then
70346: LD_VAR 0 1
70350: NOT
70351: IFFALSE 70355
// exit ;
70353: GO 70382
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
70355: LD_VAR 0 1
70359: PPUSH
70360: LD_VAR 0 2
70364: PUSH
70365: LD_INT 1
70367: ARRAY
70368: PPUSH
70369: LD_VAR 0 2
70373: PUSH
70374: LD_INT 2
70376: ARRAY
70377: PPUSH
70378: CALL_OW 111
// end ;
70382: LD_VAR 0 3
70386: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
70387: LD_INT 0
70389: PPUSH
70390: PPUSH
70391: PPUSH
// if not side or not area then
70392: LD_VAR 0 1
70396: NOT
70397: PUSH
70398: LD_VAR 0 2
70402: NOT
70403: OR
70404: IFFALSE 70408
// exit ;
70406: GO 70527
// tmp := AreaToList ( area , 0 ) ;
70408: LD_ADDR_VAR 0 5
70412: PUSH
70413: LD_VAR 0 2
70417: PPUSH
70418: LD_INT 0
70420: PPUSH
70421: CALL_OW 517
70425: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
70426: LD_ADDR_VAR 0 4
70430: PUSH
70431: DOUBLE
70432: LD_INT 1
70434: DEC
70435: ST_TO_ADDR
70436: LD_VAR 0 5
70440: PUSH
70441: LD_INT 1
70443: ARRAY
70444: PUSH
70445: FOR_TO
70446: IFFALSE 70525
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
70448: LD_VAR 0 5
70452: PUSH
70453: LD_INT 1
70455: ARRAY
70456: PUSH
70457: LD_VAR 0 4
70461: ARRAY
70462: PPUSH
70463: LD_VAR 0 5
70467: PUSH
70468: LD_INT 2
70470: ARRAY
70471: PUSH
70472: LD_VAR 0 4
70476: ARRAY
70477: PPUSH
70478: CALL_OW 351
70482: IFFALSE 70523
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
70484: LD_VAR 0 5
70488: PUSH
70489: LD_INT 1
70491: ARRAY
70492: PUSH
70493: LD_VAR 0 4
70497: ARRAY
70498: PPUSH
70499: LD_VAR 0 5
70503: PUSH
70504: LD_INT 2
70506: ARRAY
70507: PUSH
70508: LD_VAR 0 4
70512: ARRAY
70513: PPUSH
70514: LD_VAR 0 1
70518: PPUSH
70519: CALL_OW 244
// end ;
70523: GO 70445
70525: POP
70526: POP
// end ; end_of_file
70527: LD_VAR 0 3
70531: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
70532: LD_VAR 0 1
70536: PUSH
70537: LD_INT 200
70539: DOUBLE
70540: GREATEREQUAL
70541: IFFALSE 70549
70543: LD_INT 299
70545: DOUBLE
70546: LESSEQUAL
70547: IFTRUE 70551
70549: GO 70583
70551: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
70552: LD_VAR 0 1
70556: PPUSH
70557: LD_VAR 0 2
70561: PPUSH
70562: LD_VAR 0 3
70566: PPUSH
70567: LD_VAR 0 4
70571: PPUSH
70572: LD_VAR 0 5
70576: PPUSH
70577: CALL 23243 0 5
70581: GO 70660
70583: LD_INT 300
70585: DOUBLE
70586: GREATEREQUAL
70587: IFFALSE 70595
70589: LD_INT 399
70591: DOUBLE
70592: LESSEQUAL
70593: IFTRUE 70597
70595: GO 70659
70597: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
70598: LD_VAR 0 1
70602: PPUSH
70603: LD_VAR 0 2
70607: PPUSH
70608: LD_VAR 0 3
70612: PPUSH
70613: LD_VAR 0 4
70617: PPUSH
70618: LD_VAR 0 5
70622: PPUSH
70623: LD_VAR 0 6
70627: PPUSH
70628: LD_VAR 0 7
70632: PPUSH
70633: LD_VAR 0 8
70637: PPUSH
70638: LD_VAR 0 9
70642: PPUSH
70643: LD_VAR 0 10
70647: PPUSH
70648: LD_VAR 0 11
70652: PPUSH
70653: CALL 19568 0 11
70657: GO 70660
70659: POP
// end ;
70660: PPOPN 11
70662: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
70663: LD_VAR 0 1
70667: PPUSH
70668: LD_VAR 0 2
70672: PPUSH
70673: LD_VAR 0 3
70677: PPUSH
70678: LD_VAR 0 4
70682: PPUSH
70683: LD_VAR 0 5
70687: PPUSH
70688: CALL 22979 0 5
// end ; end_of_file
70692: PPOPN 5
70694: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
70695: LD_VAR 0 1
70699: PPUSH
70700: LD_VAR 0 2
70704: PPUSH
70705: LD_VAR 0 3
70709: PPUSH
70710: LD_VAR 0 4
70714: PPUSH
70715: LD_VAR 0 5
70719: PPUSH
70720: LD_VAR 0 6
70724: PPUSH
70725: CALL 7220 0 6
// end ;
70729: PPOPN 6
70731: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
70732: LD_INT 0
70734: PPUSH
// begin if not units then
70735: LD_VAR 0 1
70739: NOT
70740: IFFALSE 70744
// exit ;
70742: GO 70744
// end ;
70744: PPOPN 7
70746: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
70747: CALL 7107 0 0
// end ;
70751: PPOPN 1
70753: END
