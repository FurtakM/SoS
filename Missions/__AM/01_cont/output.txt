// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 32 0 0
// InitAmerican ;
  15: CALL 866 0 0
// InitRussian ;
  19: CALL 1137 0 0
// DebugMode ;
  23: CALL 160 0 0
// Action ;
  27: CALL 2860 0 0
// end ;
  31: END
// export debug ; export mission_prefix ; export active_russian_dialog , bobby_in_squad , powell_contact , macmilan_use_radio , cyrus_in_squad , active_road_patrol , macmilan_in_trap , meta_action , end_mission , bobby_saved , cyrus_saved , send_troops_to_forest , active_powell_dialog ; function Init ; begin
  32: LD_INT 0
  34: PPUSH
// mission_prefix := 01_ ;
  35: LD_ADDR_EXP 2
  39: PUSH
  40: LD_STRING 01_
  42: ST_TO_ADDR
// debug := false ;
  43: LD_ADDR_EXP 1
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// active_russian_dialog := false ;
  51: LD_ADDR_EXP 3
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// bobby_in_squad := false ;
  59: LD_ADDR_EXP 4
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// cyrus_in_squad := false ;
  67: LD_ADDR_EXP 7
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// powell_contact := false ;
  75: LD_ADDR_EXP 5
  79: PUSH
  80: LD_INT 0
  82: ST_TO_ADDR
// macmilan_use_radio := false ;
  83: LD_ADDR_EXP 6
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// active_road_patrol := false ;
  91: LD_ADDR_EXP 8
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// macmilan_in_trap := false ;
  99: LD_ADDR_EXP 9
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// meta_action := false ;
 107: LD_ADDR_EXP 10
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// end_mission := false ;
 115: LD_ADDR_EXP 11
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// bobby_saved := false ;
 123: LD_ADDR_EXP 12
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// cyrus_saved := false ;
 131: LD_ADDR_EXP 13
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// send_troops_to_forest := false ;
 139: LD_ADDR_EXP 14
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// active_powell_dialog := false ;
 147: LD_ADDR_EXP 15
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// end ;
 155: LD_VAR 0 1
 159: RET
// function DebugMode ; var i ; begin
 160: LD_INT 0
 162: PPUSH
 163: PPUSH
// if not debug then
 164: LD_EXP 1
 168: NOT
 169: IFFALSE 173
// exit ;
 171: GO 192
// Difficulty := 4 ;
 173: LD_ADDR_OWVAR 67
 177: PUSH
 178: LD_INT 4
 180: ST_TO_ADDR
// TurnFogOff ( ) ;
 181: CALL_OW 537
// FogOff ( 1 ) ;
 185: LD_INT 1
 187: PPUSH
 188: CALL_OW 344
// end ; end_of_file
 192: LD_VAR 0 1
 196: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 197: LD_INT 0
 199: PPUSH
 200: PPUSH
 201: PPUSH
// uc_side := GetSide ( b ) ;
 202: LD_ADDR_OWVAR 20
 206: PUSH
 207: LD_VAR 0 2
 211: PPUSH
 212: CALL_OW 255
 216: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 217: LD_ADDR_OWVAR 21
 221: PUSH
 222: LD_VAR 0 2
 226: PPUSH
 227: CALL_OW 248
 231: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 232: LD_INT 0
 234: PPUSH
 235: LD_INT 1
 237: PPUSH
 238: LD_VAR 0 1
 242: PPUSH
 243: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
 247: LD_ADDR_VAR 0 5
 251: PUSH
 252: LD_VAR 0 2
 256: PPUSH
 257: CALL_OW 254
 261: PUSH
 262: LD_INT 3
 264: MINUS
 265: ST_TO_ADDR
// if dir < 0 then
 266: LD_VAR 0 5
 270: PUSH
 271: LD_INT 0
 273: LESS
 274: IFFALSE 290
// dir := 6 + dir ;
 276: LD_ADDR_VAR 0 5
 280: PUSH
 281: LD_INT 6
 283: PUSH
 284: LD_VAR 0 5
 288: PLUS
 289: ST_TO_ADDR
// un := CreateHuman ;
 290: LD_ADDR_VAR 0 4
 294: PUSH
 295: CALL_OW 44
 299: ST_TO_ADDR
// SetDir ( un , dir ) ;
 300: LD_VAR 0 4
 304: PPUSH
 305: LD_VAR 0 5
 309: PPUSH
 310: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 314: LD_VAR 0 4
 318: PPUSH
 319: LD_VAR 0 2
 323: PPUSH
 324: CALL_OW 52
// end ;
 328: LD_VAR 0 3
 332: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 333: LD_INT 0
 335: PPUSH
// uc_side := side ;
 336: LD_ADDR_OWVAR 20
 340: PUSH
 341: LD_VAR 0 1
 345: ST_TO_ADDR
// uc_nation := nation ;
 346: LD_ADDR_OWVAR 21
 350: PUSH
 351: LD_VAR 0 2
 355: ST_TO_ADDR
// vc_chassis := chassis ;
 356: LD_ADDR_OWVAR 37
 360: PUSH
 361: LD_VAR 0 3
 365: ST_TO_ADDR
// vc_engine := engine ;
 366: LD_ADDR_OWVAR 39
 370: PUSH
 371: LD_VAR 0 4
 375: ST_TO_ADDR
// vc_control := control ;
 376: LD_ADDR_OWVAR 38
 380: PUSH
 381: LD_VAR 0 5
 385: ST_TO_ADDR
// vc_weapon := weapon ;
 386: LD_ADDR_OWVAR 40
 390: PUSH
 391: LD_VAR 0 6
 395: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 396: LD_ADDR_OWVAR 41
 400: PUSH
 401: LD_VAR 0 7
 405: ST_TO_ADDR
// result := CreateVehicle ;
 406: LD_ADDR_VAR 0 8
 410: PUSH
 411: CALL_OW 45
 415: ST_TO_ADDR
// end ;
 416: LD_VAR 0 8
 420: RET
// export function ComPatrol ( unit , mode , pause , coords ) ; var i ; begin
 421: LD_INT 0
 423: PPUSH
 424: PPUSH
// while ( active_road_patrol ) do
 425: LD_EXP 8
 429: IFFALSE 783
// begin Wait ( 0 0$01 ) ;
 431: LD_INT 35
 433: PPUSH
 434: CALL_OW 67
// if not unit then
 438: LD_VAR 0 1
 442: NOT
 443: IFFALSE 447
// exit ;
 445: GO 783
// if mode = road then
 447: LD_VAR 0 2
 451: PUSH
 452: LD_STRING road
 454: EQUAL
 455: IFFALSE 511
// if GetFuel ( unit ) < 50 and not See ( 1 , unit ) and not HasTask ( unit ) then
 457: LD_VAR 0 1
 461: PPUSH
 462: CALL_OW 261
 466: PUSH
 467: LD_INT 50
 469: LESS
 470: PUSH
 471: LD_INT 1
 473: PPUSH
 474: LD_VAR 0 1
 478: PPUSH
 479: CALL_OW 292
 483: NOT
 484: AND
 485: PUSH
 486: LD_VAR 0 1
 490: PPUSH
 491: CALL_OW 314
 495: NOT
 496: AND
 497: IFFALSE 511
// SetFuel ( unit , 100 ) ;
 499: LD_VAR 0 1
 503: PPUSH
 504: LD_INT 100
 506: PPUSH
 507: CALL_OW 240
// if mode = forest then
 511: LD_VAR 0 2
 515: PUSH
 516: LD_STRING forest
 518: EQUAL
 519: IFFALSE 599
// if GetLives ( unit ) < 600 then
 521: LD_VAR 0 1
 525: PPUSH
 526: CALL_OW 256
 530: PUSH
 531: LD_INT 600
 533: LESS
 534: IFFALSE 599
// begin ComMoveXY ( unit , 42 , 3 ) ;
 536: LD_VAR 0 1
 540: PPUSH
 541: LD_INT 42
 543: PPUSH
 544: LD_INT 3
 546: PPUSH
 547: CALL_OW 111
// SetRememberedX ( unit , GetX ( unit ) ) ;
 551: LD_VAR 0 1
 555: PPUSH
 556: LD_VAR 0 1
 560: PPUSH
 561: CALL_OW 250
 565: PPUSH
 566: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
 570: LD_VAR 0 1
 574: PPUSH
 575: LD_VAR 0 1
 579: PPUSH
 580: CALL_OW 251
 584: PPUSH
 585: CALL_OW 232
// send_troops_to_forest := true ;
 589: LD_ADDR_EXP 14
 593: PUSH
 594: LD_INT 1
 596: ST_TO_ADDR
// break ;
 597: GO 783
// end ; if not HasTask ( unit ) then
 599: LD_VAR 0 1
 603: PPUSH
 604: CALL_OW 314
 608: NOT
 609: IFFALSE 781
// begin for i = 1 to coords do
 611: LD_ADDR_VAR 0 6
 615: PUSH
 616: DOUBLE
 617: LD_INT 1
 619: DEC
 620: ST_TO_ADDR
 621: LD_VAR 0 4
 625: PUSH
 626: FOR_TO
 627: IFFALSE 694
// begin AddComAgressiveMove ( unit , coords [ i ] , coords [ i + 1 ] ) ;
 629: LD_VAR 0 1
 633: PPUSH
 634: LD_VAR 0 4
 638: PUSH
 639: LD_VAR 0 6
 643: ARRAY
 644: PPUSH
 645: LD_VAR 0 4
 649: PUSH
 650: LD_VAR 0 6
 654: PUSH
 655: LD_INT 1
 657: PLUS
 658: ARRAY
 659: PPUSH
 660: CALL_OW 174
// AddComWait ( unit , pause ) ;
 664: LD_VAR 0 1
 668: PPUSH
 669: LD_VAR 0 3
 673: PPUSH
 674: CALL_OW 202
// i := i + 1 ;
 678: LD_ADDR_VAR 0 6
 682: PUSH
 683: LD_VAR 0 6
 687: PUSH
 688: LD_INT 1
 690: PLUS
 691: ST_TO_ADDR
// end ;
 692: GO 626
 694: POP
 695: POP
// for i = coords downto 1 do
 696: LD_ADDR_VAR 0 6
 700: PUSH
 701: DOUBLE
 702: LD_VAR 0 4
 706: INC
 707: ST_TO_ADDR
 708: LD_INT 1
 710: PUSH
 711: FOR_DOWNTO
 712: IFFALSE 779
// begin AddComAgressiveMove ( unit , coords [ i - 1 ] , coords [ i ] ) ;
 714: LD_VAR 0 1
 718: PPUSH
 719: LD_VAR 0 4
 723: PUSH
 724: LD_VAR 0 6
 728: PUSH
 729: LD_INT 1
 731: MINUS
 732: ARRAY
 733: PPUSH
 734: LD_VAR 0 4
 738: PUSH
 739: LD_VAR 0 6
 743: ARRAY
 744: PPUSH
 745: CALL_OW 174
// AddComWait ( unit , pause ) ;
 749: LD_VAR 0 1
 753: PPUSH
 754: LD_VAR 0 3
 758: PPUSH
 759: CALL_OW 202
// i := i - 1 ;
 763: LD_ADDR_VAR 0 6
 767: PUSH
 768: LD_VAR 0 6
 772: PUSH
 773: LD_INT 1
 775: MINUS
 776: ST_TO_ADDR
// end ;
 777: GO 711
 779: POP
 780: POP
// end ; end ;
 781: GO 425
// end ;
 783: LD_VAR 0 5
 787: RET
// export function DebugSay ( dialog ) ; var speaker ; begin
 788: LD_INT 0
 790: PPUSH
 791: PPUSH
// uc_nation := 1 ;
 792: LD_ADDR_OWVAR 21
 796: PUSH
 797: LD_INT 1
 799: ST_TO_ADDR
// uc_side := 0 ;
 800: LD_ADDR_OWVAR 20
 804: PUSH
 805: LD_INT 0
 807: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
 808: LD_INT 0
 810: PPUSH
 811: LD_INT 1
 813: PPUSH
 814: LD_INT 0
 816: PPUSH
 817: CALL_OW 380
// hc_name := speaker ;
 821: LD_ADDR_OWVAR 26
 825: PUSH
 826: LD_STRING speaker
 828: ST_TO_ADDR
// hc_gallery :=  ;
 829: LD_ADDR_OWVAR 33
 833: PUSH
 834: LD_STRING 
 836: ST_TO_ADDR
// speaker := CreateHuman ;
 837: LD_ADDR_VAR 0 3
 841: PUSH
 842: CALL_OW 44
 846: ST_TO_ADDR
// Say ( speaker , dialog ) ;
 847: LD_VAR 0 3
 851: PPUSH
 852: LD_VAR 0 1
 856: PPUSH
 857: CALL_OW 88
// end ; end_of_file
 861: LD_VAR 0 2
 865: RET
// export JMM , Bobby , Cyrus , Powell , fakePokryshkin ; export function InitAmerican ; begin
 866: LD_INT 0
 868: PPUSH
// uc_nation := 1 ;
 869: LD_ADDR_OWVAR 21
 873: PUSH
 874: LD_INT 1
 876: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , false ,  ) ;
 877: LD_ADDR_EXP 16
 881: PUSH
 882: LD_STRING JMM
 884: PPUSH
 885: LD_INT 0
 887: PPUSH
 888: LD_STRING 
 890: PPUSH
 891: CALL 26876 0 3
 895: ST_TO_ADDR
// uc_side := 4 ;
 896: LD_ADDR_OWVAR 20
 900: PUSH
 901: LD_INT 4
 903: ST_TO_ADDR
// hc_gallery := us ;
 904: LD_ADDR_OWVAR 33
 908: PUSH
 909: LD_STRING us
 911: ST_TO_ADDR
// hc_face_number := 7 ;
 912: LD_ADDR_OWVAR 34
 916: PUSH
 917: LD_INT 7
 919: ST_TO_ADDR
// hc_sex := sex_male ;
 920: LD_ADDR_OWVAR 27
 924: PUSH
 925: LD_INT 1
 927: ST_TO_ADDR
// hc_name := . ;
 928: LD_ADDR_OWVAR 26
 932: PUSH
 933: LD_STRING .
 935: ST_TO_ADDR
// hc_class := 1 ;
 936: LD_ADDR_OWVAR 28
 940: PUSH
 941: LD_INT 1
 943: ST_TO_ADDR
// Powell := CreateHuman ;
 944: LD_ADDR_EXP 19
 948: PUSH
 949: CALL_OW 44
 953: ST_TO_ADDR
// hc_name := . ;
 954: LD_ADDR_OWVAR 26
 958: PUSH
 959: LD_STRING .
 961: ST_TO_ADDR
// hc_gallery := ru ;
 962: LD_ADDR_OWVAR 33
 966: PUSH
 967: LD_STRING ru
 969: ST_TO_ADDR
// hc_face_number := 4 ;
 970: LD_ADDR_OWVAR 34
 974: PUSH
 975: LD_INT 4
 977: ST_TO_ADDR
// hc_sex := sex_male ;
 978: LD_ADDR_OWVAR 27
 982: PUSH
 983: LD_INT 1
 985: ST_TO_ADDR
// fakePokryshkin := CreateHuman ;
 986: LD_ADDR_EXP 20
 990: PUSH
 991: CALL_OW 44
 995: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , false ,  ) ;
 996: LD_ADDR_EXP 17
1000: PUSH
1001: LD_STRING Bobby
1003: PPUSH
1004: LD_INT 0
1006: PPUSH
1007: LD_STRING 
1009: PPUSH
1010: CALL 26876 0 3
1014: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , false ,  ) ;
1015: LD_ADDR_EXP 18
1019: PUSH
1020: LD_STRING Cyrus
1022: PPUSH
1023: LD_INT 0
1025: PPUSH
1026: LD_STRING 
1028: PPUSH
1029: CALL 26876 0 3
1033: ST_TO_ADDR
// case Difficulty of 1 :
1034: LD_OWVAR 67
1038: PUSH
1039: LD_INT 1
1041: DOUBLE
1042: EQUAL
1043: IFTRUE 1047
1045: GO 1062
1047: POP
// SetLives ( Bobby , 500 ) ; 2 :
1048: LD_EXP 17
1052: PPUSH
1053: LD_INT 500
1055: PPUSH
1056: CALL_OW 234
1060: GO 1132
1062: LD_INT 2
1064: DOUBLE
1065: EQUAL
1066: IFTRUE 1070
1068: GO 1085
1070: POP
// SetLives ( Bobby , 460 ) ; 3 :
1071: LD_EXP 17
1075: PPUSH
1076: LD_INT 460
1078: PPUSH
1079: CALL_OW 234
1083: GO 1132
1085: LD_INT 3
1087: DOUBLE
1088: EQUAL
1089: IFTRUE 1093
1091: GO 1108
1093: POP
// SetLives ( Bobby , 420 ) ; 4 :
1094: LD_EXP 17
1098: PPUSH
1099: LD_INT 420
1101: PPUSH
1102: CALL_OW 234
1106: GO 1132
1108: LD_INT 4
1110: DOUBLE
1111: EQUAL
1112: IFTRUE 1116
1114: GO 1131
1116: POP
// SetLives ( Bobby , 400 ) ; end ;
1117: LD_EXP 17
1121: PPUSH
1122: LD_INT 400
1124: PPUSH
1125: CALL_OW 234
1129: GO 1132
1131: POP
// end ; end_of_file
1132: LD_VAR 0 1
1136: RET
// export russian_troops_1 , russian_troops_2 , russian_patrol_tanks , russian_meta_guards , russian_patrol_forest , russian_patrol_hidden ; export Pokryshkin ; export function InitRussian ; var skill , i , un ; begin
1137: LD_INT 0
1139: PPUSH
1140: PPUSH
1141: PPUSH
1142: PPUSH
// skill := [ 1 , 2 , 3 , 4 ] [ Difficulty ] ;
1143: LD_ADDR_VAR 0 2
1147: PUSH
1148: LD_INT 1
1150: PUSH
1151: LD_INT 2
1153: PUSH
1154: LD_INT 3
1156: PUSH
1157: LD_INT 4
1159: PUSH
1160: EMPTY
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: PUSH
1166: LD_OWVAR 67
1170: ARRAY
1171: ST_TO_ADDR
// uc_side := 3 ;
1172: LD_ADDR_OWVAR 20
1176: PUSH
1177: LD_INT 3
1179: ST_TO_ADDR
// uc_nation := 3 ;
1180: LD_ADDR_OWVAR 21
1184: PUSH
1185: LD_INT 3
1187: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
1188: LD_ADDR_EXP 27
1192: PUSH
1193: LD_STRING Pokryshkin
1195: PPUSH
1196: LD_INT 0
1198: PPUSH
1199: LD_STRING 
1201: PPUSH
1202: CALL 26876 0 3
1206: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 44 , 5 , false ) ;
1207: LD_EXP 27
1211: PPUSH
1212: LD_INT 44
1214: PPUSH
1215: LD_INT 5
1217: PPUSH
1218: LD_INT 0
1220: PPUSH
1221: CALL_OW 48
// hc_importance := 0 ;
1225: LD_ADDR_OWVAR 32
1229: PUSH
1230: LD_INT 0
1232: ST_TO_ADDR
// hc_gallery :=  ;
1233: LD_ADDR_OWVAR 33
1237: PUSH
1238: LD_STRING 
1240: ST_TO_ADDR
// hc_name :=  ;
1241: LD_ADDR_OWVAR 26
1245: PUSH
1246: LD_STRING 
1248: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1249: LD_INT 1
1251: PPUSH
1252: LD_INT 1
1254: PPUSH
1255: LD_VAR 0 2
1259: PPUSH
1260: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1264: LD_ADDR_OWVAR 33
1268: PUSH
1269: LD_STRING SecondCharsGal
1271: ST_TO_ADDR
// hc_face_number := 69 ;
1272: LD_ADDR_OWVAR 34
1276: PUSH
1277: LD_INT 69
1279: ST_TO_ADDR
// hc_sex := sex_male ;
1280: LD_ADDR_OWVAR 27
1284: PUSH
1285: LD_INT 1
1287: ST_TO_ADDR
// hc_name := Ilja Ivanov ;
1288: LD_ADDR_OWVAR 26
1292: PUSH
1293: LD_STRING Ilja Ivanov
1295: ST_TO_ADDR
// un := CreateHuman ;
1296: LD_ADDR_VAR 0 4
1300: PUSH
1301: CALL_OW 44
1305: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 1 , un ) ;
1306: LD_ADDR_EXP 21
1310: PUSH
1311: LD_EXP 21
1315: PPUSH
1316: LD_INT 1
1318: PPUSH
1319: LD_VAR 0 4
1323: PPUSH
1324: CALL_OW 2
1328: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1329: LD_VAR 0 4
1333: PPUSH
1334: LD_INT 3
1336: PPUSH
1337: LD_INT 0
1339: PPUSH
1340: CALL_OW 49
// PrepareHuman ( sex_male , 1 , skill ) ;
1344: LD_INT 1
1346: PPUSH
1347: LD_INT 1
1349: PPUSH
1350: LD_VAR 0 2
1354: PPUSH
1355: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1359: LD_ADDR_OWVAR 33
1363: PUSH
1364: LD_STRING SecondCharsGal
1366: ST_TO_ADDR
// hc_face_number := 70 ;
1367: LD_ADDR_OWVAR 34
1371: PUSH
1372: LD_INT 70
1374: ST_TO_ADDR
// hc_name := Pavel Starczy ;
1375: LD_ADDR_OWVAR 26
1379: PUSH
1380: LD_STRING Pavel Starczy
1382: ST_TO_ADDR
// un := CreateHuman ;
1383: LD_ADDR_VAR 0 4
1387: PUSH
1388: CALL_OW 44
1392: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 2 , un ) ;
1393: LD_ADDR_EXP 21
1397: PUSH
1398: LD_EXP 21
1402: PPUSH
1403: LD_INT 2
1405: PPUSH
1406: LD_VAR 0 4
1410: PPUSH
1411: CALL_OW 2
1415: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1416: LD_VAR 0 4
1420: PPUSH
1421: LD_INT 3
1423: PPUSH
1424: LD_INT 0
1426: PPUSH
1427: CALL_OW 49
// InitHc ;
1431: CALL_OW 19
// for i = 1 to 7 do
1435: LD_ADDR_VAR 0 3
1439: PUSH
1440: DOUBLE
1441: LD_INT 1
1443: DEC
1444: ST_TO_ADDR
1445: LD_INT 7
1447: PUSH
1448: FOR_TO
1449: IFFALSE 1600
// begin PrepareHuman ( false , 1 , skill ) ;
1451: LD_INT 0
1453: PPUSH
1454: LD_INT 1
1456: PPUSH
1457: LD_VAR 0 2
1461: PPUSH
1462: CALL_OW 380
// un := CreateHuman ;
1466: LD_ADDR_VAR 0 4
1470: PUSH
1471: CALL_OW 44
1475: ST_TO_ADDR
// if i mod 2 = 0 then
1476: LD_VAR 0 3
1480: PUSH
1481: LD_INT 2
1483: MOD
1484: PUSH
1485: LD_INT 0
1487: EQUAL
1488: IFFALSE 1545
// begin russian_troops_1 := Insert ( russian_troops_1 , russian_troops_1 + 1 , un ) ;
1490: LD_ADDR_EXP 21
1494: PUSH
1495: LD_EXP 21
1499: PPUSH
1500: LD_EXP 21
1504: PUSH
1505: LD_INT 1
1507: PLUS
1508: PPUSH
1509: LD_VAR 0 4
1513: PPUSH
1514: CALL_OW 2
1518: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1519: LD_VAR 0 4
1523: PPUSH
1524: LD_INT 3
1526: PPUSH
1527: LD_INT 0
1529: PPUSH
1530: CALL_OW 49
// ComHold ( un ) ;
1534: LD_VAR 0 4
1538: PPUSH
1539: CALL_OW 140
// end else
1543: GO 1598
// begin russian_troops_2 := Insert ( russian_troops_2 , russian_troops_2 + 1 , un ) ;
1545: LD_ADDR_EXP 22
1549: PUSH
1550: LD_EXP 22
1554: PPUSH
1555: LD_EXP 22
1559: PUSH
1560: LD_INT 1
1562: PLUS
1563: PPUSH
1564: LD_VAR 0 4
1568: PPUSH
1569: CALL_OW 2
1573: ST_TO_ADDR
// PlaceUnitArea ( un , guard_south , false ) ;
1574: LD_VAR 0 4
1578: PPUSH
1579: LD_INT 4
1581: PPUSH
1582: LD_INT 0
1584: PPUSH
1585: CALL_OW 49
// ComHold ( un ) ;
1589: LD_VAR 0 4
1593: PPUSH
1594: CALL_OW 140
// end ; end ;
1598: GO 1448
1600: POP
1601: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) do
1602: LD_ADDR_VAR 0 3
1606: PUSH
1607: LD_INT 22
1609: PUSH
1610: LD_INT 3
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: PUSH
1617: LD_INT 30
1619: PUSH
1620: LD_INT 31
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: PUSH
1627: EMPTY
1628: LIST
1629: LIST
1630: PPUSH
1631: CALL_OW 69
1635: PUSH
1636: FOR_IN
1637: IFFALSE 1655
// PrepareSolBun ( skill , i ) ;
1639: LD_VAR 0 2
1643: PPUSH
1644: LD_VAR 0 3
1648: PPUSH
1649: CALL 197 0 2
1653: GO 1636
1655: POP
1656: POP
// for i = 1 to 3 do
1657: LD_ADDR_VAR 0 3
1661: PUSH
1662: DOUBLE
1663: LD_INT 1
1665: DEC
1666: ST_TO_ADDR
1667: LD_INT 3
1669: PUSH
1670: FOR_TO
1671: IFFALSE 1807
// begin un := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1673: LD_ADDR_VAR 0 4
1677: PUSH
1678: LD_INT 3
1680: PPUSH
1681: LD_INT 3
1683: PPUSH
1684: LD_INT 22
1686: PPUSH
1687: LD_INT 1
1689: PPUSH
1690: LD_INT 1
1692: PPUSH
1693: LD_INT 42
1695: PPUSH
1696: LD_INT 100
1698: PPUSH
1699: CALL 333 0 7
1703: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
1704: LD_INT 0
1706: PPUSH
1707: LD_INT 3
1709: PPUSH
1710: LD_VAR 0 2
1714: PPUSH
1715: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1719: CALL_OW 44
1723: PPUSH
1724: LD_VAR 0 4
1728: PPUSH
1729: CALL_OW 52
// PlaceUnitXY ( un , [ 131 , 23 , 167 ] [ i ] , [ 87 , 14 , 95 ] [ i ] , false ) ;
1733: LD_VAR 0 4
1737: PPUSH
1738: LD_INT 131
1740: PUSH
1741: LD_INT 23
1743: PUSH
1744: LD_INT 167
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: LIST
1751: PUSH
1752: LD_VAR 0 3
1756: ARRAY
1757: PPUSH
1758: LD_INT 87
1760: PUSH
1761: LD_INT 14
1763: PUSH
1764: LD_INT 95
1766: PUSH
1767: EMPTY
1768: LIST
1769: LIST
1770: LIST
1771: PUSH
1772: LD_VAR 0 3
1776: ARRAY
1777: PPUSH
1778: LD_INT 0
1780: PPUSH
1781: CALL_OW 48
// russian_patrol_tanks := Join ( russian_patrol_tanks , un ) ;
1785: LD_ADDR_EXP 23
1789: PUSH
1790: LD_EXP 23
1794: PPUSH
1795: LD_VAR 0 4
1799: PPUSH
1800: CALL 64344 0 2
1804: ST_TO_ADDR
// end ;
1805: GO 1670
1807: POP
1808: POP
// for i = 1 to 2 do
1809: LD_ADDR_VAR 0 3
1813: PUSH
1814: DOUBLE
1815: LD_INT 1
1817: DEC
1818: ST_TO_ADDR
1819: LD_INT 2
1821: PUSH
1822: FOR_TO
1823: IFFALSE 1914
// begin PrepareHuman ( [ sex_female , sex_male , sex_male ] [ i ] , 1 , 1 ) ;
1825: LD_INT 2
1827: PUSH
1828: LD_INT 1
1830: PUSH
1831: LD_INT 1
1833: PUSH
1834: EMPTY
1835: LIST
1836: LIST
1837: LIST
1838: PUSH
1839: LD_VAR 0 3
1843: ARRAY
1844: PPUSH
1845: LD_INT 1
1847: PPUSH
1848: LD_INT 1
1850: PPUSH
1851: CALL_OW 380
// un := CreateHuman ;
1855: LD_ADDR_VAR 0 4
1859: PUSH
1860: CALL_OW 44
1864: ST_TO_ADDR
// russian_meta_guards := Insert ( russian_meta_guards , 1 , un ) ;
1865: LD_ADDR_EXP 24
1869: PUSH
1870: LD_EXP 24
1874: PPUSH
1875: LD_INT 1
1877: PPUSH
1878: LD_VAR 0 4
1882: PPUSH
1883: CALL_OW 2
1887: ST_TO_ADDR
// PlaceUnitArea ( un , exitArea , false ) ;
1888: LD_VAR 0 4
1892: PPUSH
1893: LD_INT 10
1895: PPUSH
1896: LD_INT 0
1898: PPUSH
1899: CALL_OW 49
// ComHold ( un ) ;
1903: LD_VAR 0 4
1907: PPUSH
1908: CALL_OW 140
// end ;
1912: GO 1822
1914: POP
1915: POP
// if Difficulty < 3 then
1916: LD_OWVAR 67
1920: PUSH
1921: LD_INT 3
1923: LESS
1924: IFFALSE 1928
// exit ;
1926: GO 1999
// PrepareHuman ( false , 1 , skill ) ;
1928: LD_INT 0
1930: PPUSH
1931: LD_INT 1
1933: PPUSH
1934: LD_VAR 0 2
1938: PPUSH
1939: CALL_OW 380
// russian_patrol_forest := CreateHuman ;
1943: LD_ADDR_EXP 25
1947: PUSH
1948: CALL_OW 44
1952: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_forest , 82 , 2 , false ) ;
1953: LD_EXP 25
1957: PPUSH
1958: LD_INT 82
1960: PPUSH
1961: LD_INT 2
1963: PPUSH
1964: LD_INT 0
1966: PPUSH
1967: CALL_OW 48
// russian_patrol_hidden := CreateHuman ;
1971: LD_ADDR_EXP 26
1975: PUSH
1976: CALL_OW 44
1980: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_hidden , 136 , 30 , false ) ;
1981: LD_EXP 26
1985: PPUSH
1986: LD_INT 136
1988: PPUSH
1989: LD_INT 30
1991: PPUSH
1992: LD_INT 0
1994: PPUSH
1995: CALL_OW 48
// end ;
1999: LD_VAR 0 1
2003: RET
// every 0 0$01 trigger active_road_patrol do
2004: LD_EXP 8
2008: IFFALSE 2074
2010: GO 2012
2012: DISABLE
// ComPatrol ( russian_patrol_tanks [ 1 ] , road , 0 0$02 , [ 131 , 87 , 107 , 75 , 107 , 66 , 114 , 61 , 107 , 34 ] ) ;
2013: LD_EXP 23
2017: PUSH
2018: LD_INT 1
2020: ARRAY
2021: PPUSH
2022: LD_STRING road
2024: PPUSH
2025: LD_INT 70
2027: PPUSH
2028: LD_INT 131
2030: PUSH
2031: LD_INT 87
2033: PUSH
2034: LD_INT 107
2036: PUSH
2037: LD_INT 75
2039: PUSH
2040: LD_INT 107
2042: PUSH
2043: LD_INT 66
2045: PUSH
2046: LD_INT 114
2048: PUSH
2049: LD_INT 61
2051: PUSH
2052: LD_INT 107
2054: PUSH
2055: LD_INT 34
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: PPUSH
2070: CALL 421 0 4
2074: END
// every 0 0$01 trigger active_road_patrol do
2075: LD_EXP 8
2079: IFFALSE 2137
2081: GO 2083
2083: DISABLE
// ComPatrol ( russian_patrol_tanks [ 2 ] , road , 0 0$02 , [ 21 , 12 , 37 , 30 , 65 , 62 , 107 , 76 ] ) ;
2084: LD_EXP 23
2088: PUSH
2089: LD_INT 2
2091: ARRAY
2092: PPUSH
2093: LD_STRING road
2095: PPUSH
2096: LD_INT 70
2098: PPUSH
2099: LD_INT 21
2101: PUSH
2102: LD_INT 12
2104: PUSH
2105: LD_INT 37
2107: PUSH
2108: LD_INT 30
2110: PUSH
2111: LD_INT 65
2113: PUSH
2114: LD_INT 62
2116: PUSH
2117: LD_INT 107
2119: PUSH
2120: LD_INT 76
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: PPUSH
2133: CALL 421 0 4
2137: END
// every 0 0$01 trigger active_road_patrol do
2138: LD_EXP 8
2142: IFFALSE 2200
2144: GO 2146
2146: DISABLE
// ComPatrol ( russian_patrol_tanks [ 3 ] , road , 0 0$02 , [ 167 , 95 , 147 , 81 , 144 , 66 , 149 , 55 ] ) ;
2147: LD_EXP 23
2151: PUSH
2152: LD_INT 3
2154: ARRAY
2155: PPUSH
2156: LD_STRING road
2158: PPUSH
2159: LD_INT 70
2161: PPUSH
2162: LD_INT 167
2164: PUSH
2165: LD_INT 95
2167: PUSH
2168: LD_INT 147
2170: PUSH
2171: LD_INT 81
2173: PUSH
2174: LD_INT 144
2176: PUSH
2177: LD_INT 66
2179: PUSH
2180: LD_INT 149
2182: PUSH
2183: LD_INT 55
2185: PUSH
2186: EMPTY
2187: LIST
2188: LIST
2189: LIST
2190: LIST
2191: LIST
2192: LIST
2193: LIST
2194: LIST
2195: PPUSH
2196: CALL 421 0 4
2200: END
// every 0 0$01 trigger IsOk ( russian_patrol_forest ) do
2201: LD_EXP 25
2205: PPUSH
2206: CALL_OW 302
2210: IFFALSE 2272
2212: GO 2214
2214: DISABLE
// ComPatrol ( russian_patrol_forest , forest , 0 0$01 , [ 52 , 15 , 81 , 9 , 120 , 52 , 135 , 80 , 122 , 95 ] ) ;
2215: LD_EXP 25
2219: PPUSH
2220: LD_STRING forest
2222: PPUSH
2223: LD_INT 35
2225: PPUSH
2226: LD_INT 52
2228: PUSH
2229: LD_INT 15
2231: PUSH
2232: LD_INT 81
2234: PUSH
2235: LD_INT 9
2237: PUSH
2238: LD_INT 120
2240: PUSH
2241: LD_INT 52
2243: PUSH
2244: LD_INT 135
2246: PUSH
2247: LD_INT 80
2249: PUSH
2250: LD_INT 122
2252: PUSH
2253: LD_INT 95
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: LIST
2260: LIST
2261: LIST
2262: LIST
2263: LIST
2264: LIST
2265: LIST
2266: LIST
2267: PPUSH
2268: CALL 421 0 4
2272: END
// every 0 0$01 trigger IsOk ( russian_patrol_hidden ) do
2273: LD_EXP 26
2277: PPUSH
2278: CALL_OW 302
2282: IFFALSE 2336
2284: GO 2286
2286: DISABLE
// ComPatrol ( russian_patrol_hidden , forest , 0 0$02 , [ 137 , 30 , 127 , 23 , 122 , 16 , 114 , 3 ] ) ;
2287: LD_EXP 26
2291: PPUSH
2292: LD_STRING forest
2294: PPUSH
2295: LD_INT 70
2297: PPUSH
2298: LD_INT 137
2300: PUSH
2301: LD_INT 30
2303: PUSH
2304: LD_INT 127
2306: PUSH
2307: LD_INT 23
2309: PUSH
2310: LD_INT 122
2312: PUSH
2313: LD_INT 16
2315: PUSH
2316: LD_INT 114
2318: PUSH
2319: LD_INT 3
2321: PUSH
2322: EMPTY
2323: LIST
2324: LIST
2325: LIST
2326: LIST
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: PPUSH
2332: CALL 421 0 4
2336: END
// every 0 0$01 trigger macmilan_use_radio do
2337: LD_EXP 6
2341: IFFALSE 2402
2343: GO 2345
2345: DISABLE
// begin active_road_patrol := false ;
2346: LD_ADDR_EXP 8
2350: PUSH
2351: LD_INT 0
2353: ST_TO_ADDR
// ComStop ( russian_patrol_tanks ) ;
2354: LD_EXP 23
2358: PPUSH
2359: CALL_OW 141
// AddComAgressiveMove ( russian_patrol_tanks , 72 , 41 ) ;
2363: LD_EXP 23
2367: PPUSH
2368: LD_INT 72
2370: PPUSH
2371: LD_INT 41
2373: PPUSH
2374: CALL_OW 174
// ComExitBuilding ( russian_troops_2 ) ;
2378: LD_EXP 22
2382: PPUSH
2383: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , 72 , 41 ) ;
2387: LD_EXP 22
2391: PPUSH
2392: LD_INT 72
2394: PPUSH
2395: LD_INT 41
2397: PPUSH
2398: CALL_OW 174
// end ;
2402: END
// every 0 0$03 trigger FilterUnitsInArea ( def_south , [ f_side , 1 ] ) do var un ;
2403: LD_INT 9
2405: PPUSH
2406: LD_INT 22
2408: PUSH
2409: LD_INT 1
2411: PUSH
2412: EMPTY
2413: LIST
2414: LIST
2415: PPUSH
2416: CALL_OW 70
2420: IFFALSE 2494
2422: GO 2424
2424: DISABLE
2425: LD_INT 0
2427: PPUSH
// begin enable ;
2428: ENABLE
// un := FilterUnitsInArea ( def_south , [ f_side , 1 ] ) [ 1 ] ;
2429: LD_ADDR_VAR 0 1
2433: PUSH
2434: LD_INT 9
2436: PPUSH
2437: LD_INT 22
2439: PUSH
2440: LD_INT 1
2442: PUSH
2443: EMPTY
2444: LIST
2445: LIST
2446: PPUSH
2447: CALL_OW 70
2451: PUSH
2452: LD_INT 1
2454: ARRAY
2455: ST_TO_ADDR
// ComExitBuilding ( russian_troops_2 ) ;
2456: LD_EXP 22
2460: PPUSH
2461: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , GetX ( un ) , GetY ( un ) ) ;
2465: LD_EXP 22
2469: PPUSH
2470: LD_VAR 0 1
2474: PPUSH
2475: CALL_OW 250
2479: PPUSH
2480: LD_VAR 0 1
2484: PPUSH
2485: CALL_OW 251
2489: PPUSH
2490: CALL_OW 174
// end ;
2494: PPOPN 1
2496: END
// every 0 0$01 trigger ( GetLives ( russian_patrol_tanks [ 1 ] ) < 999 or GetLives ( russian_patrol_tanks [ 2 ] ) < 999 ) and See ( 3 , JMM ) do
2497: LD_EXP 23
2501: PUSH
2502: LD_INT 1
2504: ARRAY
2505: PPUSH
2506: CALL_OW 256
2510: PUSH
2511: LD_INT 999
2513: LESS
2514: PUSH
2515: LD_EXP 23
2519: PUSH
2520: LD_INT 2
2522: ARRAY
2523: PPUSH
2524: CALL_OW 256
2528: PUSH
2529: LD_INT 999
2531: LESS
2532: OR
2533: PUSH
2534: LD_INT 3
2536: PPUSH
2537: LD_EXP 16
2541: PPUSH
2542: CALL_OW 292
2546: AND
2547: IFFALSE 2574
2549: GO 2551
2551: DISABLE
// begin active_road_patrol := false ;
2552: LD_ADDR_EXP 8
2556: PUSH
2557: LD_INT 0
2559: ST_TO_ADDR
// ComAttackUnit ( russian_patrol_tanks , JMM ) ;
2560: LD_EXP 23
2564: PPUSH
2565: LD_EXP 16
2569: PPUSH
2570: CALL_OW 115
// end ;
2574: END
// every 0 0$01 trigger macmilan_in_trap do
2575: LD_EXP 9
2579: IFFALSE 2625
2581: GO 2583
2583: DISABLE
// begin ComExitBuilding ( russian_troops_2 ) ;
2584: LD_EXP 22
2588: PPUSH
2589: CALL_OW 122
// ComAttackUnit ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , JMM ) ;
2593: LD_EXP 21
2597: PUSH
2598: LD_EXP 22
2602: ADD
2603: PUSH
2604: LD_EXP 27
2608: ADD
2609: PUSH
2610: LD_EXP 23
2614: ADD
2615: PPUSH
2616: LD_EXP 16
2620: PPUSH
2621: CALL_OW 115
// end ;
2625: END
// every 0 0$01 trigger meta_action do
2626: LD_EXP 10
2630: IFFALSE 2676
2632: GO 2634
2634: DISABLE
// begin active_road_patrol := false ;
2635: LD_ADDR_EXP 8
2639: PUSH
2640: LD_INT 0
2642: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , 93 , 1 ) ;
2643: LD_EXP 21
2647: PUSH
2648: LD_EXP 22
2652: ADD
2653: PUSH
2654: LD_EXP 27
2658: ADD
2659: PUSH
2660: LD_EXP 23
2664: ADD
2665: PPUSH
2666: LD_INT 93
2668: PPUSH
2669: LD_INT 1
2671: PPUSH
2672: CALL_OW 114
// end ;
2676: END
// every 0 0$1 trigger GetLives ( Pokryshkin ) < 1000 do
2677: LD_EXP 27
2681: PPUSH
2682: CALL_OW 256
2686: PUSH
2687: LD_INT 1000
2689: LESS
2690: IFFALSE 2741
2692: GO 2694
2694: DISABLE
// begin enable ;
2695: ENABLE
// if HexInfo ( 18 , 1 ) = Pokryshkin then
2696: LD_INT 18
2698: PPUSH
2699: LD_INT 1
2701: PPUSH
2702: CALL_OW 428
2706: PUSH
2707: LD_EXP 27
2711: EQUAL
2712: IFFALSE 2726
// begin RemoveUnit ( Pokryshkin ) ;
2714: LD_EXP 27
2718: PPUSH
2719: CALL_OW 64
// disable ;
2723: DISABLE
// end else
2724: GO 2741
// ComMoveXY ( Pokryshkin , 18 , 1 ) ;
2726: LD_EXP 27
2730: PPUSH
2731: LD_INT 18
2733: PPUSH
2734: LD_INT 1
2736: PPUSH
2737: CALL_OW 111
// end ;
2741: END
// every 0 0$20 trigger send_troops_to_forest do
2742: LD_EXP 14
2746: IFFALSE 2800
2748: GO 2750
2750: DISABLE
// begin if not IsOk ( russian_patrol_forest ) then
2751: LD_EXP 25
2755: PPUSH
2756: CALL_OW 302
2760: NOT
2761: IFFALSE 2765
// exit ;
2763: GO 2800
// ComAgressiveMove ( russian_troops_1 ^ Pokryshkin , GetRememberedX ( russian_patrol_forest ) , GetRememberedY ( russian_patrol_forest ) ) ;
2765: LD_EXP 21
2769: PUSH
2770: LD_EXP 27
2774: ADD
2775: PPUSH
2776: LD_EXP 25
2780: PPUSH
2781: CALL_OW 252
2785: PPUSH
2786: LD_EXP 25
2790: PPUSH
2791: CALL_OW 253
2795: PPUSH
2796: CALL_OW 114
// end ;
2800: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) = 3 then
2801: LD_VAR 0 1
2805: PPUSH
2806: CALL_OW 255
2810: PUSH
2811: LD_INT 3
2813: EQUAL
2814: IFFALSE 2857
// begin wait ( 11 ) ;
2816: LD_INT 11
2818: PPUSH
2819: CALL_OW 67
// ComEnterUnit ( driver , NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_depot ] ) , driver ) ) ;
2823: LD_VAR 0 1
2827: PPUSH
2828: LD_INT 30
2830: PUSH
2831: LD_INT 0
2833: PUSH
2834: EMPTY
2835: LIST
2836: LIST
2837: PPUSH
2838: CALL_OW 69
2842: PPUSH
2843: LD_VAR 0 1
2847: PPUSH
2848: CALL_OW 74
2852: PPUSH
2853: CALL_OW 120
// end ; end ; end_of_file
2857: PPOPN 4
2859: END
// export function Action ; var i ; begin
2860: LD_INT 0
2862: PPUSH
2863: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
2864: LD_ADDR_VAR 0 2
2868: PUSH
2869: LD_INT 22
2871: PUSH
2872: LD_INT 3
2874: PUSH
2875: EMPTY
2876: LIST
2877: LIST
2878: PUSH
2879: LD_INT 25
2881: PUSH
2882: LD_INT 1
2884: PUSH
2885: EMPTY
2886: LIST
2887: LIST
2888: PUSH
2889: EMPTY
2890: LIST
2891: LIST
2892: PPUSH
2893: CALL_OW 69
2897: PUSH
2898: FOR_IN
2899: IFFALSE 2912
// ComHold ( i ) ;
2901: LD_VAR 0 2
2905: PPUSH
2906: CALL_OW 140
2910: GO 2898
2912: POP
2913: POP
// InGameOn ;
2914: CALL_OW 8
// CenterOnXY ( 79 , 76 ) ;
2918: LD_INT 79
2920: PPUSH
2921: LD_INT 76
2923: PPUSH
2924: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
2928: LD_INT 10
2930: PPUSH
2931: CALL_OW 67
// PlaceUnitXY ( JMM , 80 , 79 , true ) ;
2935: LD_EXP 16
2939: PPUSH
2940: LD_INT 80
2942: PPUSH
2943: LD_INT 79
2945: PPUSH
2946: LD_INT 1
2948: PPUSH
2949: CALL_OW 48
// Wait ( 0 0$03 ) ;
2953: LD_INT 105
2955: PPUSH
2956: CALL_OW 67
// ComMoveXY ( JMM , 80 , 76 ) ;
2960: LD_EXP 16
2964: PPUSH
2965: LD_INT 80
2967: PPUSH
2968: LD_INT 76
2970: PPUSH
2971: CALL_OW 111
// Say ( JMM , D1-JMM-1 ) ;
2975: LD_EXP 16
2979: PPUSH
2980: LD_STRING D1-JMM-1
2982: PPUSH
2983: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2987: LD_INT 10
2989: PPUSH
2990: CALL_OW 67
// ComMoveXY ( JMM , 76 , 76 ) ;
2994: LD_EXP 16
2998: PPUSH
2999: LD_INT 76
3001: PPUSH
3002: LD_INT 76
3004: PPUSH
3005: CALL_OW 111
// Say ( JMM , D1-JMM-1a ) ;
3009: LD_EXP 16
3013: PPUSH
3014: LD_STRING D1-JMM-1a
3016: PPUSH
3017: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
3021: LD_INT 10
3023: PPUSH
3024: CALL_OW 67
// ComTurnXY ( JMM , 83 , 66 ) ;
3028: LD_EXP 16
3032: PPUSH
3033: LD_INT 83
3035: PPUSH
3036: LD_INT 66
3038: PPUSH
3039: CALL_OW 118
// Say ( JMM , D1-JMM-1b ) ;
3043: LD_EXP 16
3047: PPUSH
3048: LD_STRING D1-JMM-1b
3050: PPUSH
3051: CALL_OW 88
// Wait ( 0 0$0.5 ) ;
3055: LD_INT 18
3057: PPUSH
3058: CALL_OW 67
// Say ( JMM , D1-JMM-1c ) ;
3062: LD_EXP 16
3066: PPUSH
3067: LD_STRING D1-JMM-1c
3069: PPUSH
3070: CALL_OW 88
// Wait ( 0 0$0.2 ) ;
3074: LD_INT 7
3076: PPUSH
3077: CALL_OW 67
// SayRadioNoFaceNoName ( Powell , D1-Pow-1 ) ;
3081: LD_EXP 19
3085: PPUSH
3086: LD_STRING D1-Pow-1
3088: PPUSH
3089: CALL 68263 0 2
// Say ( JMM , D1-JMM-2 ) ;
3093: LD_EXP 16
3097: PPUSH
3098: LD_STRING D1-JMM-2
3100: PPUSH
3101: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D1-Pow-2 ) ;
3105: LD_EXP 19
3109: PPUSH
3110: LD_STRING D1-Pow-2
3112: PPUSH
3113: CALL 68263 0 2
// Say ( JMM , D1-JMM-3 ) ;
3117: LD_EXP 16
3121: PPUSH
3122: LD_STRING D1-JMM-3
3124: PPUSH
3125: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D1-Pow-3 ) ;
3129: LD_EXP 19
3133: PPUSH
3134: LD_STRING D1-Pow-3
3136: PPUSH
3137: CALL 68263 0 2
// Say ( JMM , D1-JMM-4 ) ;
3141: LD_EXP 16
3145: PPUSH
3146: LD_STRING D1-JMM-4
3148: PPUSH
3149: CALL_OW 88
// ComFree ( JMM ) ;
3153: LD_EXP 16
3157: PPUSH
3158: CALL_OW 139
// Wait ( 0 0$0.3 ) ;
3162: LD_INT 10
3164: PPUSH
3165: CALL_OW 67
// InGameOff ;
3169: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
3173: LD_STRING M1
3175: PPUSH
3176: CALL_OW 337
// SaveForQuickRestart ;
3180: CALL_OW 22
// active_russian_dialog := true ;
3184: LD_ADDR_EXP 3
3188: PUSH
3189: LD_INT 1
3191: ST_TO_ADDR
// active_road_patrol := true ;
3192: LD_ADDR_EXP 8
3196: PUSH
3197: LD_INT 1
3199: ST_TO_ADDR
// if Difficulty < 3 then
3200: LD_OWVAR 67
3204: PUSH
3205: LD_INT 3
3207: LESS
3208: IFFALSE 3239
// begin PlaceUnitXY ( Bobby , 41 , 71 , false ) ;
3210: LD_EXP 17
3214: PPUSH
3215: LD_INT 41
3217: PPUSH
3218: LD_INT 71
3220: PPUSH
3221: LD_INT 0
3223: PPUSH
3224: CALL_OW 48
// ComHold ( Bobby ) ;
3228: LD_EXP 17
3232: PPUSH
3233: CALL_OW 140
// end else
3237: GO 3287
// begin SetDir ( Bobby , 5 ) ;
3239: LD_EXP 17
3243: PPUSH
3244: LD_INT 5
3246: PPUSH
3247: CALL_OW 233
// PlaceUnitXY ( Bobby , 105 , 98 , false ) ;
3251: LD_EXP 17
3255: PPUSH
3256: LD_INT 105
3258: PPUSH
3259: LD_INT 98
3261: PPUSH
3262: LD_INT 0
3264: PPUSH
3265: CALL_OW 48
// ComCrawl ( Bobby ) ;
3269: LD_EXP 17
3273: PPUSH
3274: CALL_OW 137
// AddComHold ( Bobby ) ;
3278: LD_EXP 17
3282: PPUSH
3283: CALL_OW 200
// end ; if Difficulty < 3 then
3287: LD_OWVAR 67
3291: PUSH
3292: LD_INT 3
3294: LESS
3295: IFFALSE 3332
// begin PlaceUnitXY ( Cyrus , 90 , 42 , false ) ;
3297: LD_EXP 18
3301: PPUSH
3302: LD_INT 90
3304: PPUSH
3305: LD_INT 42
3307: PPUSH
3308: LD_INT 0
3310: PPUSH
3311: CALL_OW 48
// ComMoveXY ( Cyrus , 79 , 34 ) ;
3315: LD_EXP 18
3319: PPUSH
3320: LD_INT 79
3322: PPUSH
3323: LD_INT 34
3325: PPUSH
3326: CALL_OW 111
// end else
3330: GO 3380
// if Difficulty = 3 then
3332: LD_OWVAR 67
3336: PUSH
3337: LD_INT 3
3339: EQUAL
3340: IFFALSE 3362
// PlaceUnitXY ( Cyrus , 125 , 42 , false ) else
3342: LD_EXP 18
3346: PPUSH
3347: LD_INT 125
3349: PPUSH
3350: LD_INT 42
3352: PPUSH
3353: LD_INT 0
3355: PPUSH
3356: CALL_OW 48
3360: GO 3380
// PlaceUnitXY ( Cyrus , 154 , 97 , false ) ;
3362: LD_EXP 18
3366: PPUSH
3367: LD_INT 154
3369: PPUSH
3370: LD_INT 97
3372: PPUSH
3373: LD_INT 0
3375: PPUSH
3376: CALL_OW 48
// AddComCrawl ( Cyrus ) ;
3380: LD_EXP 18
3384: PPUSH
3385: CALL_OW 197
// AddComHold ( Cyrus ) ;
3389: LD_EXP 18
3393: PPUSH
3394: CALL_OW 200
// end ;
3398: LD_VAR 0 1
3402: RET
// every 0 0$01 trigger active_russian_dialog do var wait_points ;
3403: LD_EXP 3
3407: IFFALSE 4001
3409: GO 3411
3411: DISABLE
3412: LD_INT 0
3414: PPUSH
// begin wait_points := 0 ;
3415: LD_ADDR_VAR 0 1
3419: PUSH
3420: LD_INT 0
3422: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
3423: LD_INT 70
3425: PPUSH
3426: CALL_OW 67
// ComAgressiveMove ( russian_troops_1 , 79 , 83 ) ;
3430: LD_EXP 21
3434: PPUSH
3435: LD_INT 79
3437: PPUSH
3438: LD_INT 83
3440: PPUSH
3441: CALL_OW 114
// Say ( russian_troops_1 [ 2 ] , D1R-Rus1-1 ) ;
3445: LD_EXP 21
3449: PUSH
3450: LD_INT 2
3452: ARRAY
3453: PPUSH
3454: LD_STRING D1R-Rus1-1
3456: PPUSH
3457: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1R-Rus2-1 ) ;
3461: LD_EXP 21
3465: PUSH
3466: LD_INT 1
3468: ARRAY
3469: PPUSH
3470: LD_STRING D1R-Rus2-1
3472: PPUSH
3473: CALL_OW 88
// ComAgressiveMove ( russian_troops_2 , 91 , 80 ) ;
3477: LD_EXP 22
3481: PPUSH
3482: LD_INT 91
3484: PPUSH
3485: LD_INT 80
3487: PPUSH
3488: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
3492: LD_INT 35
3494: PPUSH
3495: CALL_OW 67
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 79 , 82 ) < 6 ;
3499: LD_EXP 21
3503: PUSH
3504: LD_INT 1
3506: ARRAY
3507: PPUSH
3508: LD_INT 79
3510: PPUSH
3511: LD_INT 82
3513: PPUSH
3514: CALL_OW 297
3518: PUSH
3519: LD_INT 6
3521: LESS
3522: IFFALSE 3492
// if not IsInArea ( JMM , jmm_spot ) then
3524: LD_EXP 16
3528: PPUSH
3529: LD_INT 5
3531: PPUSH
3532: CALL_OW 308
3536: NOT
3537: IFFALSE 3557
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1 ) else
3539: LD_EXP 21
3543: PUSH
3544: LD_INT 1
3546: ARRAY
3547: PPUSH
3548: LD_STRING D1Ra-Rus2-1
3550: PPUSH
3551: CALL_OW 88
3555: GO 3624
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3557: LD_EXP 21
3561: PUSH
3562: LD_INT 2
3564: ARRAY
3565: PPUSH
3566: LD_STRING D1Rb-Rus1-1
3568: PPUSH
3569: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Rb-Rus2-1 ) ;
3573: LD_EXP 21
3577: PUSH
3578: LD_INT 1
3580: ARRAY
3581: PPUSH
3582: LD_STRING D1Rb-Rus2-1
3584: PPUSH
3585: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 , GetX ( JMM ) , GetY ( JMM ) ) ;
3589: LD_EXP 21
3593: PUSH
3594: LD_EXP 22
3598: ADD
3599: PPUSH
3600: LD_EXP 16
3604: PPUSH
3605: CALL_OW 250
3609: PPUSH
3610: LD_EXP 16
3614: PPUSH
3615: CALL_OW 251
3619: PPUSH
3620: CALL_OW 114
// end ; wait_points := 10 ;
3624: LD_ADDR_VAR 0 1
3628: PUSH
3629: LD_INT 10
3631: ST_TO_ADDR
// if Difficulty > 1 then
3632: LD_OWVAR 67
3636: PUSH
3637: LD_INT 1
3639: GREATER
3640: IFFALSE 3722
// begin ComAgressiveMove ( russian_troops_1 , 78 , 95 ) ;
3642: LD_EXP 21
3646: PPUSH
3647: LD_INT 78
3649: PPUSH
3650: LD_INT 95
3652: PPUSH
3653: CALL_OW 114
// AddComWait ( russian_troops_1 , 0 0$05 ) ;
3657: LD_EXP 21
3661: PPUSH
3662: LD_INT 175
3664: PPUSH
3665: CALL_OW 202
// wait_points := wait_points + 15 ;
3669: LD_ADDR_VAR 0 1
3673: PUSH
3674: LD_VAR 0 1
3678: PUSH
3679: LD_INT 15
3681: PLUS
3682: ST_TO_ADDR
// if Difficulty > 2 then
3683: LD_OWVAR 67
3687: PUSH
3688: LD_INT 2
3690: GREATER
3691: IFFALSE 3722
// begin AddComAgressiveMove ( russian_troops_1 , 65 , 79 ) ;
3693: LD_EXP 21
3697: PPUSH
3698: LD_INT 65
3700: PPUSH
3701: LD_INT 79
3703: PPUSH
3704: CALL_OW 174
// wait_points := wait_points + 5 ;
3708: LD_ADDR_VAR 0 1
3712: PUSH
3713: LD_VAR 0 1
3717: PUSH
3718: LD_INT 5
3720: PLUS
3721: ST_TO_ADDR
// end ; end ; repeat wait ( 0 0$01 ) ;
3722: LD_INT 35
3724: PPUSH
3725: CALL_OW 67
// wait_points := wait_points - 1 ;
3729: LD_ADDR_VAR 0 1
3733: PUSH
3734: LD_VAR 0 1
3738: PUSH
3739: LD_INT 1
3741: MINUS
3742: ST_TO_ADDR
// if See ( 3 , JMM ) then
3743: LD_INT 3
3745: PPUSH
3746: LD_EXP 16
3750: PPUSH
3751: CALL_OW 292
3755: IFFALSE 3809
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3757: LD_EXP 21
3761: PUSH
3762: LD_INT 2
3764: ARRAY
3765: PPUSH
3766: LD_STRING D1Rb-Rus1-1
3768: PPUSH
3769: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3773: LD_EXP 21
3777: PPUSH
3778: LD_EXP 16
3782: PPUSH
3783: CALL_OW 250
3787: PPUSH
3788: LD_EXP 16
3792: PPUSH
3793: CALL_OW 251
3797: PPUSH
3798: CALL_OW 114
// Wait ( 0 0$03 ) ;
3802: LD_INT 105
3804: PPUSH
3805: CALL_OW 67
// end ; until wait_points = 0 ;
3809: LD_VAR 0 1
3813: PUSH
3814: LD_INT 0
3816: EQUAL
3817: IFFALSE 3722
// Say ( russian_troops_1 [ 2 ] , D1Rc-Rus1-1 ) ;
3819: LD_EXP 21
3823: PUSH
3824: LD_INT 2
3826: ARRAY
3827: PPUSH
3828: LD_STRING D1Rc-Rus1-1
3830: PPUSH
3831: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1a ) ;
3835: LD_EXP 21
3839: PUSH
3840: LD_INT 1
3842: ARRAY
3843: PPUSH
3844: LD_STRING D1Ra-Rus2-1a
3846: PPUSH
3847: CALL_OW 88
// active_powell_dialog := true ;
3851: LD_ADDR_EXP 15
3855: PUSH
3856: LD_INT 1
3858: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3859: LD_EXP 21
3863: PPUSH
3864: LD_INT 45
3866: PPUSH
3867: LD_INT 5
3869: PPUSH
3870: CALL_OW 114
// ComEnterUnit ( russian_troops_2 , rbar1 ) ;
3874: LD_EXP 22
3878: PPUSH
3879: LD_INT 26
3881: PPUSH
3882: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
3886: LD_INT 35
3888: PPUSH
3889: CALL_OW 67
// if See ( 3 , JMM ) then
3893: LD_INT 3
3895: PPUSH
3896: LD_EXP 16
3900: PPUSH
3901: CALL_OW 292
3905: IFFALSE 3961
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3907: LD_EXP 21
3911: PUSH
3912: LD_INT 2
3914: ARRAY
3915: PPUSH
3916: LD_STRING D1Rb-Rus1-1
3918: PPUSH
3919: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3923: LD_EXP 21
3927: PPUSH
3928: LD_EXP 16
3932: PPUSH
3933: CALL_OW 250
3937: PPUSH
3938: LD_EXP 16
3942: PPUSH
3943: CALL_OW 251
3947: PPUSH
3948: CALL_OW 114
// Wait ( 0 0$50 ) ;
3952: LD_INT 1750
3954: PPUSH
3955: CALL_OW 67
// end else
3959: GO 3976
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3961: LD_EXP 21
3965: PPUSH
3966: LD_INT 45
3968: PPUSH
3969: LD_INT 5
3971: PPUSH
3972: CALL_OW 114
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 45 , 5 ) < 10 ;
3976: LD_EXP 21
3980: PUSH
3981: LD_INT 1
3983: ARRAY
3984: PPUSH
3985: LD_INT 45
3987: PPUSH
3988: LD_INT 5
3990: PPUSH
3991: CALL_OW 297
3995: PUSH
3996: LD_INT 10
3998: LESS
3999: IFFALSE 3886
// end ;
4001: PPOPN 1
4003: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 6 ] ] ) and Difficulty = 1 do
4004: LD_INT 22
4006: PUSH
4007: LD_INT 3
4009: PUSH
4010: EMPTY
4011: LIST
4012: LIST
4013: PUSH
4014: LD_INT 92
4016: PUSH
4017: LD_INT 80
4019: PUSH
4020: LD_INT 83
4022: PUSH
4023: LD_INT 6
4025: PUSH
4026: EMPTY
4027: LIST
4028: LIST
4029: LIST
4030: LIST
4031: PUSH
4032: EMPTY
4033: LIST
4034: LIST
4035: PPUSH
4036: CALL_OW 69
4040: PUSH
4041: LD_OWVAR 67
4045: PUSH
4046: LD_INT 1
4048: EQUAL
4049: AND
4050: IFFALSE 4131
4052: GO 4054
4054: DISABLE
// begin PlaceSeeing ( 80 , 83 , 1 , - 7 ) ;
4055: LD_INT 80
4057: PPUSH
4058: LD_INT 83
4060: PPUSH
4061: LD_INT 1
4063: PPUSH
4064: LD_INT 7
4066: NEG
4067: PPUSH
4068: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
4072: LD_INT 35
4074: PPUSH
4075: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 10 ] ] ) ;
4079: LD_INT 22
4081: PUSH
4082: LD_INT 3
4084: PUSH
4085: EMPTY
4086: LIST
4087: LIST
4088: PUSH
4089: LD_INT 92
4091: PUSH
4092: LD_INT 80
4094: PUSH
4095: LD_INT 83
4097: PUSH
4098: LD_INT 10
4100: PUSH
4101: EMPTY
4102: LIST
4103: LIST
4104: LIST
4105: LIST
4106: PUSH
4107: EMPTY
4108: LIST
4109: LIST
4110: PPUSH
4111: CALL_OW 69
4115: NOT
4116: IFFALSE 4072
// RemoveSeeing ( 80 , 83 , 1 ) ;
4118: LD_INT 80
4120: PPUSH
4121: LD_INT 83
4123: PPUSH
4124: LD_INT 1
4126: PPUSH
4127: CALL_OW 331
// end ;
4131: END
// every 0 0$02 trigger GetDistUnits ( JMM , Bobby ) < 6 and IsOk ( Bobby ) do
4132: LD_EXP 16
4136: PPUSH
4137: LD_EXP 17
4141: PPUSH
4142: CALL_OW 296
4146: PUSH
4147: LD_INT 6
4149: LESS
4150: PUSH
4151: LD_EXP 17
4155: PPUSH
4156: CALL_OW 302
4160: AND
4161: IFFALSE 4620
4163: GO 4165
4165: DISABLE
// begin ComWalk ( Bobby ) ;
4166: LD_EXP 17
4170: PPUSH
4171: CALL_OW 138
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4175: LD_EXP 17
4179: PPUSH
4180: LD_EXP 16
4184: PPUSH
4185: CALL_OW 250
4189: PPUSH
4190: LD_EXP 16
4194: PPUSH
4195: CALL_OW 251
4199: PPUSH
4200: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
4204: LD_INT 35
4206: PPUSH
4207: CALL_OW 67
// until See ( 4 , JMM ) ;
4211: LD_INT 4
4213: PPUSH
4214: LD_EXP 16
4218: PPUSH
4219: CALL_OW 292
4223: IFFALSE 4204
// InGameOn ;
4225: CALL_OW 8
// ComTurnUnit ( JMM , Bobby ) ;
4229: LD_EXP 16
4233: PPUSH
4234: LD_EXP 17
4238: PPUSH
4239: CALL_OW 119
// if cyrus_in_squad and IsOk ( Cyrus ) and GetDistUnits ( JMM , Cyrus ) < 10 then
4243: LD_EXP 7
4247: PUSH
4248: LD_EXP 18
4252: PPUSH
4253: CALL_OW 302
4257: AND
4258: PUSH
4259: LD_EXP 16
4263: PPUSH
4264: LD_EXP 18
4268: PPUSH
4269: CALL_OW 296
4273: PUSH
4274: LD_INT 10
4276: LESS
4277: AND
4278: IFFALSE 4323
// begin ComMoveXY ( Cyrus , GetX ( JMM ) , GetY ( JMM ) ) ;
4280: LD_EXP 18
4284: PPUSH
4285: LD_EXP 16
4289: PPUSH
4290: CALL_OW 250
4294: PPUSH
4295: LD_EXP 16
4299: PPUSH
4300: CALL_OW 251
4304: PPUSH
4305: CALL_OW 111
// AddComTurnUnit ( Cyrus , Bobby ) ;
4309: LD_EXP 18
4313: PPUSH
4314: LD_EXP 17
4318: PPUSH
4319: CALL_OW 179
// end ; Say ( JMM , D2-JMM-1 ) ;
4323: LD_EXP 16
4327: PPUSH
4328: LD_STRING D2-JMM-1
4330: PPUSH
4331: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
4335: LD_INT 10
4337: PPUSH
4338: CALL_OW 67
// ComTurnUnit ( Bobby , JMM ) ;
4342: LD_EXP 17
4346: PPUSH
4347: LD_EXP 16
4351: PPUSH
4352: CALL_OW 119
// Say ( Bobby , D2-Bobby-1 ) ;
4356: LD_EXP 17
4360: PPUSH
4361: LD_STRING D2-Bobby-1
4363: PPUSH
4364: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
4368: LD_EXP 16
4372: PPUSH
4373: LD_STRING D2-JMM-2
4375: PPUSH
4376: CALL_OW 88
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4380: LD_EXP 17
4384: PPUSH
4385: LD_EXP 16
4389: PPUSH
4390: CALL_OW 250
4394: PPUSH
4395: LD_EXP 16
4399: PPUSH
4400: CALL_OW 251
4404: PPUSH
4405: CALL_OW 111
// Say ( Bobby , D2-Bobby-2 ) ;
4409: LD_EXP 17
4413: PPUSH
4414: LD_STRING D2-Bobby-2
4416: PPUSH
4417: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
4421: LD_EXP 16
4425: PPUSH
4426: LD_STRING D2-JMM-3
4428: PPUSH
4429: CALL_OW 88
// ComTurnUnit ( Bobby , JMM ) ;
4433: LD_EXP 17
4437: PPUSH
4438: LD_EXP 16
4442: PPUSH
4443: CALL_OW 119
// DialogueOn ;
4447: CALL_OW 6
// Say ( Bobby , D2-Bobby-3 ) ;
4451: LD_EXP 17
4455: PPUSH
4456: LD_STRING D2-Bobby-3
4458: PPUSH
4459: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
4463: LD_EXP 16
4467: PPUSH
4468: LD_STRING D2-JMM-4
4470: PPUSH
4471: CALL_OW 88
// Say ( Bobby , D2-Bobby-4 ) ;
4475: LD_EXP 17
4479: PPUSH
4480: LD_STRING D2-Bobby-4
4482: PPUSH
4483: CALL_OW 88
// Say ( JMM , D2-JMM-5 ) ;
4487: LD_EXP 16
4491: PPUSH
4492: LD_STRING D2-JMM-5
4494: PPUSH
4495: CALL_OW 88
// Say ( Bobby , D2-Bobby-5 ) ;
4499: LD_EXP 17
4503: PPUSH
4504: LD_STRING D2-Bobby-5
4506: PPUSH
4507: CALL_OW 88
// Say ( JMM , D2-JMM-6 ) ;
4511: LD_EXP 16
4515: PPUSH
4516: LD_STRING D2-JMM-6
4518: PPUSH
4519: CALL_OW 88
// if not powell_contact then
4523: LD_EXP 5
4527: NOT
4528: IFFALSE 4554
// begin Say ( Bobby , D2-Bobby-6 ) ;
4530: LD_EXP 17
4534: PPUSH
4535: LD_STRING D2-Bobby-6
4537: PPUSH
4538: CALL_OW 88
// Say ( JMM , D2-JMM-7 ) ;
4542: LD_EXP 16
4546: PPUSH
4547: LD_STRING D2-JMM-7
4549: PPUSH
4550: CALL_OW 88
// end ; DialogueOff ;
4554: CALL_OW 7
// InGameOff ;
4558: CALL_OW 9
// SetSide ( Bobby , 1 ) ;
4562: LD_EXP 17
4566: PPUSH
4567: LD_INT 1
4569: PPUSH
4570: CALL_OW 235
// ComFree ( [ JMM , Bobby ] ) ;
4574: LD_EXP 16
4578: PUSH
4579: LD_EXP 17
4583: PUSH
4584: EMPTY
4585: LIST
4586: LIST
4587: PPUSH
4588: CALL_OW 139
// bobby_in_squad := true ;
4592: LD_ADDR_EXP 4
4596: PUSH
4597: LD_INT 1
4599: ST_TO_ADDR
// if powell_contact and not cyrus_in_squad then
4600: LD_EXP 5
4604: PUSH
4605: LD_EXP 7
4609: NOT
4610: AND
4611: IFFALSE 4620
// ChangeMissionObjectives ( M2b ) ;
4613: LD_STRING M2b
4615: PPUSH
4616: CALL_OW 337
// end ;
4620: END
// every 0 0$10 trigger active_russian_dialog and Difficulty < 3 do
4621: LD_EXP 3
4625: PUSH
4626: LD_OWVAR 67
4630: PUSH
4631: LD_INT 3
4633: LESS
4634: AND
4635: IFFALSE 4669
4637: GO 4639
4639: DISABLE
// begin wait ( 1 1$00 ) ;
4640: LD_INT 2100
4642: PPUSH
4643: CALL_OW 67
// if not bobby_in_squad then
4647: LD_EXP 4
4651: NOT
4652: IFFALSE 4669
// ComMoveXY ( Bobby , 75 , 83 ) ;
4654: LD_EXP 17
4658: PPUSH
4659: LD_INT 75
4661: PPUSH
4662: LD_INT 83
4664: PPUSH
4665: CALL_OW 111
// end ;
4669: END
// every 0 0$10 trigger cyrus_in_squad and not bobby_in_squad do
4670: LD_EXP 7
4674: PUSH
4675: LD_EXP 4
4679: NOT
4680: AND
4681: IFFALSE 4710
4683: GO 4685
4685: DISABLE
// begin ComMoveXY ( Bobby , 105 , 97 ) ;
4686: LD_EXP 17
4690: PPUSH
4691: LD_INT 105
4693: PPUSH
4694: LD_INT 97
4696: PPUSH
4697: CALL_OW 111
// AddComCrawl ( Bobby ) ;
4701: LD_EXP 17
4705: PPUSH
4706: CALL_OW 197
// end ;
4710: END
// every 0 0$01 trigger IsInArea ( JMM , obstacle_area ) and GetDistUnits ( JMM , Bobby ) < 7 and bobby_in_squad do
4711: LD_EXP 16
4715: PPUSH
4716: LD_INT 6
4718: PPUSH
4719: CALL_OW 308
4723: PUSH
4724: LD_EXP 16
4728: PPUSH
4729: LD_EXP 17
4733: PPUSH
4734: CALL_OW 296
4738: PUSH
4739: LD_INT 7
4741: LESS
4742: AND
4743: PUSH
4744: LD_EXP 4
4748: AND
4749: IFFALSE 4796
4751: GO 4753
4753: DISABLE
// begin ComHold ( [ JMM , Bobby ] ) ;
4754: LD_EXP 16
4758: PUSH
4759: LD_EXP 17
4763: PUSH
4764: EMPTY
4765: LIST
4766: LIST
4767: PPUSH
4768: CALL_OW 140
// Say ( JMM , D2a-JMM-1 ) ;
4772: LD_EXP 16
4776: PPUSH
4777: LD_STRING D2a-JMM-1
4779: PPUSH
4780: CALL_OW 88
// Say ( Bobby , D2a-Bobby-1 ) ;
4784: LD_EXP 17
4788: PPUSH
4789: LD_STRING D2a-Bobby-1
4791: PPUSH
4792: CALL_OW 88
// end ;
4796: END
// every 0 0$50 trigger active_powell_dialog and not See ( 3 , JMM ) do
4797: LD_EXP 15
4801: PUSH
4802: LD_INT 3
4804: PPUSH
4805: LD_EXP 16
4809: PPUSH
4810: CALL_OW 292
4814: NOT
4815: AND
4816: IFFALSE 4987
4818: GO 4820
4820: DISABLE
// begin wait ( 0 0$5 ) ;
4821: LD_INT 175
4823: PPUSH
4824: CALL_OW 67
// InGameOn ;
4828: CALL_OW 8
// DialogueOn ;
4832: CALL_OW 6
// SayRadioNoFaceNoName ( Powell , D3-Pow-1 ) ;
4836: LD_EXP 19
4840: PPUSH
4841: LD_STRING D3-Pow-1
4843: PPUSH
4844: CALL 68263 0 2
// Say ( JMM , D3-JMM-1 ) ;
4848: LD_EXP 16
4852: PPUSH
4853: LD_STRING D3-JMM-1
4855: PPUSH
4856: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D3-Pow-2 ) ;
4860: LD_EXP 19
4864: PPUSH
4865: LD_STRING D3-Pow-2
4867: PPUSH
4868: CALL 68263 0 2
// Say ( JMM , D3-JMM-2 ) ;
4872: LD_EXP 16
4876: PPUSH
4877: LD_STRING D3-JMM-2
4879: PPUSH
4880: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D3-Pow-3 ) ;
4884: LD_EXP 19
4888: PPUSH
4889: LD_STRING D3-Pow-3
4891: PPUSH
4892: CALL 68263 0 2
// DialogueOff ;
4896: CALL_OW 7
// InGameOff ;
4900: CALL_OW 9
// powell_contact := true ;
4904: LD_ADDR_EXP 5
4908: PUSH
4909: LD_INT 1
4911: ST_TO_ADDR
// SetAreaMapShow ( exitArea , 1 ) ;
4912: LD_INT 10
4914: PPUSH
4915: LD_INT 1
4917: PPUSH
4918: CALL_OW 424
// uc_side := 4 ;
4922: LD_ADDR_OWVAR 20
4926: PUSH
4927: LD_INT 4
4929: ST_TO_ADDR
// uc_nation := 1 ;
4930: LD_ADDR_OWVAR 21
4934: PUSH
4935: LD_INT 1
4937: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
4938: LD_ADDR_EXP 19
4942: PUSH
4943: LD_STRING Powell
4945: PPUSH
4946: LD_INT 0
4948: PPUSH
4949: LD_STRING 
4951: PPUSH
4952: CALL 26876 0 3
4956: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
4957: LD_STRING M2
4959: PPUSH
4960: CALL_OW 337
// if not bobby_in_squad then
4964: LD_EXP 4
4968: NOT
4969: IFFALSE 4980
// ChangeMissionObjectives ( M2a ) else
4971: LD_STRING M2a
4973: PPUSH
4974: CALL_OW 337
4978: GO 4987
// ChangeMissionObjectives ( M2b ) ;
4980: LD_STRING M2b
4982: PPUSH
4983: CALL_OW 337
// end ;
4987: END
// every 0 0$01 trigger IsInArea ( JMM , fakeArea ) do
4988: LD_EXP 16
4992: PPUSH
4993: LD_INT 7
4995: PPUSH
4996: CALL_OW 308
5000: IFFALSE 5135
5002: GO 5004
5004: DISABLE
// begin DialogueOn ;
5005: CALL_OW 6
// SayRadioNoFaceNoName ( fakePokryshkin , D4-Rus3-1 ) ;
5009: LD_EXP 20
5013: PPUSH
5014: LD_STRING D4-Rus3-1
5016: PPUSH
5017: CALL 68263 0 2
// DialogueOff ;
5021: CALL_OW 7
// ChangeMissionObjectives ( M3a ) ;
5025: LD_STRING M3a
5027: PPUSH
5028: CALL_OW 337
// SetAreaMapShow ( fakeEnd , 1 ) ;
5032: LD_INT 11
5034: PPUSH
5035: LD_INT 1
5037: PPUSH
5038: CALL_OW 424
// Wait ( 0 0$02 ) ;
5042: LD_INT 70
5044: PPUSH
5045: CALL_OW 67
// DialogueOn ;
5049: CALL_OW 6
// SayRadioNoFace ( Powell , D4-Pow-1 ) ;
5053: LD_EXP 19
5057: PPUSH
5058: LD_STRING D4-Pow-1
5060: PPUSH
5061: CALL_OW 586
// DialogueOff ;
5065: CALL_OW 7
// ChangeMissionObjectives ( M3b ) ;
5069: LD_STRING M3b
5071: PPUSH
5072: CALL_OW 337
// case Query ( Q1 ) of 1 :
5076: LD_STRING Q1
5078: PPUSH
5079: CALL_OW 97
5083: PUSH
5084: LD_INT 1
5086: DOUBLE
5087: EQUAL
5088: IFTRUE 5092
5090: GO 5123
5092: POP
// begin macmilan_use_radio := true ;
5093: LD_ADDR_EXP 6
5097: PUSH
5098: LD_INT 1
5100: ST_TO_ADDR
// DialogueOn ;
5101: CALL_OW 6
// Say ( JMM , D4a-JMM-1 ) ;
5105: LD_EXP 16
5109: PPUSH
5110: LD_STRING D4a-JMM-1
5112: PPUSH
5113: CALL_OW 88
// DialogueOff ;
5117: CALL_OW 7
// end ; 2 :
5121: GO 5135
5123: LD_INT 2
5125: DOUBLE
5126: EQUAL
5127: IFTRUE 5131
5129: GO 5134
5131: POP
// ; end ;
5132: GO 5135
5134: POP
// end ;
5135: END
// every 0 0$02 trigger GetDistUnits ( JMM , Cyrus ) < 8 and IsOk ( Cyrus ) do
5136: LD_EXP 16
5140: PPUSH
5141: LD_EXP 18
5145: PPUSH
5146: CALL_OW 296
5150: PUSH
5151: LD_INT 8
5153: LESS
5154: PUSH
5155: LD_EXP 18
5159: PPUSH
5160: CALL_OW 302
5164: AND
5165: IFFALSE 5456
5167: GO 5169
5169: DISABLE
// begin InGameOn ;
5170: CALL_OW 8
// ComMoveXY ( JMM , GetX ( Cyrus ) , GetY ( Cyrus ) ) ;
5174: LD_EXP 16
5178: PPUSH
5179: LD_EXP 18
5183: PPUSH
5184: CALL_OW 250
5188: PPUSH
5189: LD_EXP 18
5193: PPUSH
5194: CALL_OW 251
5198: PPUSH
5199: CALL_OW 111
// if IsOk ( Bobby ) and bobby_in_squad then
5203: LD_EXP 17
5207: PPUSH
5208: CALL_OW 302
5212: PUSH
5213: LD_EXP 4
5217: AND
5218: IFFALSE 5249
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
5220: LD_EXP 17
5224: PPUSH
5225: LD_EXP 16
5229: PPUSH
5230: CALL_OW 250
5234: PPUSH
5235: LD_EXP 16
5239: PPUSH
5240: CALL_OW 251
5244: PPUSH
5245: CALL_OW 111
// Say ( JMM , D5-JMM-1 ) ;
5249: LD_EXP 16
5253: PPUSH
5254: LD_STRING D5-JMM-1
5256: PPUSH
5257: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
5261: LD_INT 10
5263: PPUSH
5264: CALL_OW 67
// ComTurnUnit ( JMM , Cyrus ) ;
5268: LD_EXP 16
5272: PPUSH
5273: LD_EXP 18
5277: PPUSH
5278: CALL_OW 119
// ComWalk ( Cyrus ) ;
5282: LD_EXP 18
5286: PPUSH
5287: CALL_OW 138
// ComTurnUnit ( Cyrus , JMM ) ;
5291: LD_EXP 18
5295: PPUSH
5296: LD_EXP 16
5300: PPUSH
5301: CALL_OW 119
// Say ( Cyrus , D5-Cyrus-1 ) ;
5305: LD_EXP 18
5309: PPUSH
5310: LD_STRING D5-Cyrus-1
5312: PPUSH
5313: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5317: LD_EXP 17
5321: PPUSH
5322: CALL_OW 302
5326: PUSH
5327: LD_EXP 4
5331: AND
5332: IFFALSE 5372
// begin ComTurnUnit ( Bobby , Cyrus ) ;
5334: LD_EXP 17
5338: PPUSH
5339: LD_EXP 18
5343: PPUSH
5344: CALL_OW 119
// Say ( Bobby , D5-Bobby-1 ) ;
5348: LD_EXP 17
5352: PPUSH
5353: LD_STRING D5-Bobby-1
5355: PPUSH
5356: CALL_OW 88
// Say ( JMM , D5-JMM-2 ) ;
5360: LD_EXP 16
5364: PPUSH
5365: LD_STRING D5-JMM-2
5367: PPUSH
5368: CALL_OW 88
// end ; InGameOff ;
5372: CALL_OW 9
// cyrus_in_squad := true ;
5376: LD_ADDR_EXP 7
5380: PUSH
5381: LD_INT 1
5383: ST_TO_ADDR
// SetSide ( Cyrus , 1 ) ;
5384: LD_EXP 18
5388: PPUSH
5389: LD_INT 1
5391: PPUSH
5392: CALL_OW 235
// if powell_contact and not bobby_in_squad then
5396: LD_EXP 5
5400: PUSH
5401: LD_EXP 4
5405: NOT
5406: AND
5407: IFFALSE 5416
// ChangeMissionObjectives ( M2b ) ;
5409: LD_STRING M2b
5411: PPUSH
5412: CALL_OW 337
// if not bobby_in_squad and GetSide ( Bobby ) = 4 and IsOk ( Bobby ) then
5416: LD_EXP 4
5420: NOT
5421: PUSH
5422: LD_EXP 17
5426: PPUSH
5427: CALL_OW 255
5431: PUSH
5432: LD_INT 4
5434: EQUAL
5435: AND
5436: PUSH
5437: LD_EXP 17
5441: PPUSH
5442: CALL_OW 302
5446: AND
5447: IFFALSE 5456
// SetAchievement ( ACH_CYRUS ) ;
5449: LD_STRING ACH_CYRUS
5451: PPUSH
5452: CALL_OW 543
// end ;
5456: END
// every 0 0$01 trigger bobby_in_squad and cyrus_in_squad do
5457: LD_EXP 4
5461: PUSH
5462: LD_EXP 7
5466: AND
5467: IFFALSE 5479
5469: GO 5471
5471: DISABLE
// ChangeMissionObjectives ( M2c ) ;
5472: LD_STRING M2c
5474: PPUSH
5475: CALL_OW 337
5479: END
// every 0 0$01 trigger IsInArea ( JMM , trap ) do
5480: LD_EXP 16
5484: PPUSH
5485: LD_INT 8
5487: PPUSH
5488: CALL_OW 308
5492: IFFALSE 5544
5494: GO 5496
5496: DISABLE
// begin macmilan_in_trap := true ;
5497: LD_ADDR_EXP 9
5501: PUSH
5502: LD_INT 1
5504: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
5505: LD_INT 35
5507: PPUSH
5508: CALL_OW 67
// DialogueOn ;
5512: CALL_OW 6
// Say ( Pokryshkin , D5-Pok-1 ) ;
5516: LD_EXP 27
5520: PPUSH
5521: LD_STRING D5-Pok-1
5523: PPUSH
5524: CALL_OW 88
// DialogueOff ;
5528: CALL_OW 7
// Say ( JMM , D4b-JMM-1 ) ;
5532: LD_EXP 16
5536: PPUSH
5537: LD_STRING D4b-JMM-1
5539: PPUSH
5540: CALL_OW 88
// end ;
5544: END
// every 0 0$01 trigger ( IsInArea ( JMM , endRoadArea ) and GetDistUnits ( JMM , russian_meta_guards [ russian_meta_guards ] ) < 12 ) or UnitFilter ( russian_meta_guards , [ f_not , [ f_lives , 990 ] ] ) do var i , hp ;
5545: LD_EXP 16
5549: PPUSH
5550: LD_INT 13
5552: PPUSH
5553: CALL_OW 308
5557: PUSH
5558: LD_EXP 16
5562: PPUSH
5563: LD_EXP 24
5567: PUSH
5568: LD_EXP 24
5572: ARRAY
5573: PPUSH
5574: CALL_OW 296
5578: PUSH
5579: LD_INT 12
5581: LESS
5582: AND
5583: PUSH
5584: LD_EXP 24
5588: PPUSH
5589: LD_INT 3
5591: PUSH
5592: LD_INT 24
5594: PUSH
5595: LD_INT 990
5597: PUSH
5598: EMPTY
5599: LIST
5600: LIST
5601: PUSH
5602: EMPTY
5603: LIST
5604: LIST
5605: PPUSH
5606: CALL_OW 72
5610: OR
5611: IFFALSE 5849
5613: GO 5615
5615: DISABLE
5616: LD_INT 0
5618: PPUSH
5619: PPUSH
// begin hp := [ 300 , 250 , 200 , 150 ] [ Difficulty ] ;
5620: LD_ADDR_VAR 0 2
5624: PUSH
5625: LD_INT 300
5627: PUSH
5628: LD_INT 250
5630: PUSH
5631: LD_INT 200
5633: PUSH
5634: LD_INT 150
5636: PUSH
5637: EMPTY
5638: LIST
5639: LIST
5640: LIST
5641: LIST
5642: PUSH
5643: LD_OWVAR 67
5647: ARRAY
5648: ST_TO_ADDR
// for i in russian_meta_guards do
5649: LD_ADDR_VAR 0 1
5653: PUSH
5654: LD_EXP 24
5658: PUSH
5659: FOR_IN
5660: IFFALSE 5700
// if IsOk ( i ) then
5662: LD_VAR 0 1
5666: PPUSH
5667: CALL_OW 302
5671: IFFALSE 5698
// SetLives ( i , GetLives ( i ) - hp ) ;
5673: LD_VAR 0 1
5677: PPUSH
5678: LD_VAR 0 1
5682: PPUSH
5683: CALL_OW 256
5687: PUSH
5688: LD_VAR 0 2
5692: MINUS
5693: PPUSH
5694: CALL_OW 234
5698: GO 5659
5700: POP
5701: POP
// DialogueOn ;
5702: CALL_OW 6
// Say ( russian_meta_guards [ russian_meta_guards ] , D6-FRus1-1 ) ;
5706: LD_EXP 24
5710: PUSH
5711: LD_EXP 24
5715: ARRAY
5716: PPUSH
5717: LD_STRING D6-FRus1-1
5719: PPUSH
5720: CALL_OW 88
// Say ( JMM , D6-JMM-1 ) ;
5724: LD_EXP 16
5728: PPUSH
5729: LD_STRING D6-JMM-1
5731: PPUSH
5732: CALL_OW 88
// if IsOk ( Cyrus ) and cyrus_in_squad then
5736: LD_EXP 18
5740: PPUSH
5741: CALL_OW 302
5745: PUSH
5746: LD_EXP 7
5750: AND
5751: IFFALSE 5765
// Say ( Cyrus , D6-Cyrus-1 ) ;
5753: LD_EXP 18
5757: PPUSH
5758: LD_STRING D6-Cyrus-1
5760: PPUSH
5761: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5765: LD_EXP 17
5769: PPUSH
5770: CALL_OW 302
5774: PUSH
5775: LD_EXP 4
5779: AND
5780: IFFALSE 5794
// Say ( Bobby , D6-Bobby-1 ) ;
5782: LD_EXP 17
5786: PPUSH
5787: LD_STRING D6-Bobby-1
5789: PPUSH
5790: CALL_OW 88
// DialogueOff ;
5794: CALL_OW 7
// Wait ( [ 0 0$04 , 0 0$03 , 0 0$02 , 0 0$02 ] [ Difficulty ] ) ;
5798: LD_INT 140
5800: PUSH
5801: LD_INT 105
5803: PUSH
5804: LD_INT 70
5806: PUSH
5807: LD_INT 70
5809: PUSH
5810: EMPTY
5811: LIST
5812: LIST
5813: LIST
5814: LIST
5815: PUSH
5816: LD_OWVAR 67
5820: ARRAY
5821: PPUSH
5822: CALL_OW 67
// meta_action := true ;
5826: LD_ADDR_EXP 10
5830: PUSH
5831: LD_INT 1
5833: ST_TO_ADDR
// ComAgressiveMove ( russian_meta_guards , 94 , 8 ) ;
5834: LD_EXP 24
5838: PPUSH
5839: LD_INT 94
5841: PPUSH
5842: LD_INT 8
5844: PPUSH
5845: CALL_OW 114
// end ;
5849: PPOPN 2
5851: END
// every 0 0$1 trigger IsInArea ( JMM , secretPassage ) do
5852: LD_EXP 16
5856: PPUSH
5857: LD_INT 14
5859: PPUSH
5860: CALL_OW 308
5864: IFFALSE 5876
5866: GO 5868
5868: DISABLE
// SetAchievement ( ACH_SECRET ) ;
5869: LD_STRING ACH_SECRET
5871: PPUSH
5872: CALL_OW 543
5876: END
// every 0 0$01 trigger GetDistUnitXY ( JMM , 93 , 1 ) < 5 and FilterAllUnits ( [ f_side , 1 ] ) > 1 do
5877: LD_EXP 16
5881: PPUSH
5882: LD_INT 93
5884: PPUSH
5885: LD_INT 1
5887: PPUSH
5888: CALL_OW 297
5892: PUSH
5893: LD_INT 5
5895: LESS
5896: PUSH
5897: LD_INT 22
5899: PUSH
5900: LD_INT 1
5902: PUSH
5903: EMPTY
5904: LIST
5905: LIST
5906: PPUSH
5907: CALL_OW 69
5911: PUSH
5912: LD_INT 1
5914: GREATER
5915: AND
5916: IFFALSE 5933
5918: GO 5920
5920: DISABLE
// Say ( JMM , D6a-JMM-1 ) ;
5921: LD_EXP 16
5925: PPUSH
5926: LD_STRING D6a-JMM-1
5928: PPUSH
5929: CALL_OW 88
5933: END
// every 0 0$01 trigger IsInArea ( Bobby , exitArea ) or IsInArea ( Bobby , hiddenEnd ) do
5934: LD_EXP 17
5938: PPUSH
5939: LD_INT 10
5941: PPUSH
5942: CALL_OW 308
5946: PUSH
5947: LD_EXP 17
5951: PPUSH
5952: LD_INT 12
5954: PPUSH
5955: CALL_OW 308
5959: OR
5960: IFFALSE 6009
5962: GO 5964
5964: DISABLE
// begin bobby_saved := true ;
5965: LD_ADDR_EXP 12
5969: PUSH
5970: LD_INT 1
5972: ST_TO_ADDR
// SaveVariable ( GetLives ( Bobby ) , 01_BobbyLifePoints_1 ) ;
5973: LD_EXP 17
5977: PPUSH
5978: CALL_OW 256
5982: PPUSH
5983: LD_STRING 01_BobbyLifePoints_1
5985: PPUSH
5986: CALL_OW 39
// RemoveUnit ( Bobby ) ;
5990: LD_EXP 17
5994: PPUSH
5995: CALL_OW 64
// AddMedal ( Bobby , 1 ) ;
5999: LD_STRING Bobby
6001: PPUSH
6002: LD_INT 1
6004: PPUSH
6005: CALL_OW 101
// end ;
6009: END
// every 0 0$01 trigger IsInArea ( Cyrus , exitArea ) or IsInArea ( Cyrus , hiddenEnd ) do
6010: LD_EXP 18
6014: PPUSH
6015: LD_INT 10
6017: PPUSH
6018: CALL_OW 308
6022: PUSH
6023: LD_EXP 18
6027: PPUSH
6028: LD_INT 12
6030: PPUSH
6031: CALL_OW 308
6035: OR
6036: IFFALSE 6085
6038: GO 6040
6040: DISABLE
// begin cyrus_saved := true ;
6041: LD_ADDR_EXP 13
6045: PUSH
6046: LD_INT 1
6048: ST_TO_ADDR
// SaveVariable ( GetLives ( Cyrus ) , 01_CyrusLifePoints_1 ) ;
6049: LD_EXP 18
6053: PPUSH
6054: CALL_OW 256
6058: PPUSH
6059: LD_STRING 01_CyrusLifePoints_1
6061: PPUSH
6062: CALL_OW 39
// RemoveUnit ( Cyrus ) ;
6066: LD_EXP 18
6070: PPUSH
6071: CALL_OW 64
// AddMedal ( Cyrus , 1 ) ;
6075: LD_STRING Cyrus
6077: PPUSH
6078: LD_INT 1
6080: PPUSH
6081: CALL_OW 101
// end ;
6085: END
// every 0 0$01 trigger IsInArea ( JMM , exitArea ) or IsInArea ( JMM , hiddenEnd ) do var i , to_reward , wait_for_them , m1 , m2 , m3 ;
6086: LD_EXP 16
6090: PPUSH
6091: LD_INT 10
6093: PPUSH
6094: CALL_OW 308
6098: PUSH
6099: LD_EXP 16
6103: PPUSH
6104: LD_INT 12
6106: PPUSH
6107: CALL_OW 308
6111: OR
6112: IFFALSE 6720
6114: GO 6116
6116: DISABLE
6117: LD_INT 0
6119: PPUSH
6120: PPUSH
6121: PPUSH
6122: PPUSH
6123: PPUSH
6124: PPUSH
// begin if macmilan_use_radio then
6125: LD_EXP 6
6129: IFFALSE 6138
// SetAchievement ( ACH_RADIO ) ;
6131: LD_STRING ACH_RADIO
6133: PPUSH
6134: CALL_OW 543
// if ( not cyrus_saved and cyrus_in_squad and IsOk ( Cyrus ) ) or ( not bobby_saved and bobby_in_squad and IsOk ( Bobby ) ) then
6138: LD_EXP 13
6142: NOT
6143: PUSH
6144: LD_EXP 7
6148: AND
6149: PUSH
6150: LD_EXP 18
6154: PPUSH
6155: CALL_OW 302
6159: AND
6160: PUSH
6161: LD_EXP 12
6165: NOT
6166: PUSH
6167: LD_EXP 4
6171: AND
6172: PUSH
6173: LD_EXP 17
6177: PPUSH
6178: CALL_OW 302
6182: AND
6183: OR
6184: IFFALSE 6225
// case Query ( Q2 ) of 1 :
6186: LD_STRING Q2
6188: PPUSH
6189: CALL_OW 97
6193: PUSH
6194: LD_INT 1
6196: DOUBLE
6197: EQUAL
6198: IFTRUE 6202
6200: GO 6213
6202: POP
// wait_for_them := true ; 2 :
6203: LD_ADDR_VAR 0 3
6207: PUSH
6208: LD_INT 1
6210: ST_TO_ADDR
6211: GO 6225
6213: LD_INT 2
6215: DOUBLE
6216: EQUAL
6217: IFTRUE 6221
6219: GO 6224
6221: POP
// ; end ;
6222: GO 6225
6224: POP
// if wait_for_them then
6225: LD_VAR 0 3
6229: IFFALSE 6342
// repeat wait ( 0 0$01 ) ;
6231: LD_INT 35
6233: PPUSH
6234: CALL_OW 67
// until ( cyrus_saved and bobby_saved ) or ( cyrus_saved and ( not bobby_in_squad or IsDying ( Bobby ) or IsDead ( Bobby ) ) ) or ( bobby_saved and ( not cyrus_in_squad or IsDying ( Cyrus ) or IsDead ( Cyrus ) ) ) or ( IsDead ( Bobby ) and IsDead ( Cyrus ) ) ;
6238: LD_EXP 13
6242: PUSH
6243: LD_EXP 12
6247: AND
6248: PUSH
6249: LD_EXP 13
6253: PUSH
6254: LD_EXP 4
6258: NOT
6259: PUSH
6260: LD_EXP 17
6264: PPUSH
6265: CALL_OW 303
6269: OR
6270: PUSH
6271: LD_EXP 17
6275: PPUSH
6276: CALL_OW 301
6280: OR
6281: AND
6282: OR
6283: PUSH
6284: LD_EXP 12
6288: PUSH
6289: LD_EXP 7
6293: NOT
6294: PUSH
6295: LD_EXP 18
6299: PPUSH
6300: CALL_OW 303
6304: OR
6305: PUSH
6306: LD_EXP 18
6310: PPUSH
6311: CALL_OW 301
6315: OR
6316: AND
6317: OR
6318: PUSH
6319: LD_EXP 17
6323: PPUSH
6324: CALL_OW 301
6328: PUSH
6329: LD_EXP 18
6333: PPUSH
6334: CALL_OW 301
6338: AND
6339: OR
6340: IFFALSE 6231
// SaveVariable ( GetLives ( JMM ) , 01_JMMLifePoints_1 ) ;
6342: LD_EXP 16
6346: PPUSH
6347: CALL_OW 256
6351: PPUSH
6352: LD_STRING 01_JMMLifePoints_1
6354: PPUSH
6355: CALL_OW 39
// RemoveUnit ( JMM ) ;
6359: LD_EXP 16
6363: PPUSH
6364: CALL_OW 64
// to_reward := [ JMM ] ;
6368: LD_ADDR_VAR 0 2
6372: PUSH
6373: LD_EXP 16
6377: PUSH
6378: EMPTY
6379: LIST
6380: ST_TO_ADDR
// if bobby_saved then
6381: LD_EXP 12
6385: IFFALSE 6403
// to_reward := to_reward ^ Bobby ;
6387: LD_ADDR_VAR 0 2
6391: PUSH
6392: LD_VAR 0 2
6396: PUSH
6397: LD_EXP 17
6401: ADD
6402: ST_TO_ADDR
// if cyrus_saved then
6403: LD_EXP 13
6407: IFFALSE 6425
// to_reward := to_reward ^ Cyrus ;
6409: LD_ADDR_VAR 0 2
6413: PUSH
6414: LD_VAR 0 2
6418: PUSH
6419: LD_EXP 18
6423: ADD
6424: ST_TO_ADDR
// m1 := true ;
6425: LD_ADDR_VAR 0 4
6429: PUSH
6430: LD_INT 1
6432: ST_TO_ADDR
// m2 := bobby_saved ;
6433: LD_ADDR_VAR 0 5
6437: PUSH
6438: LD_EXP 12
6442: ST_TO_ADDR
// m3 := cyrus_saved ;
6443: LD_ADDR_VAR 0 6
6447: PUSH
6448: LD_EXP 13
6452: ST_TO_ADDR
// AddMedal ( JMM , 1 ) ;
6453: LD_STRING JMM
6455: PPUSH
6456: LD_INT 1
6458: PPUSH
6459: CALL_OW 101
// if not bobby_in_squad then
6463: LD_EXP 4
6467: NOT
6468: IFFALSE 6481
// AddMedal ( Bobby , - 1 ) ;
6470: LD_STRING Bobby
6472: PPUSH
6473: LD_INT 1
6475: NEG
6476: PPUSH
6477: CALL_OW 101
// if not bobby_saved and ( IsDying ( Bobby ) or IsDead ( Bobby ) ) then
6481: LD_EXP 12
6485: NOT
6486: PUSH
6487: LD_EXP 17
6491: PPUSH
6492: CALL_OW 303
6496: PUSH
6497: LD_EXP 17
6501: PPUSH
6502: CALL_OW 301
6506: OR
6507: AND
6508: IFFALSE 6521
// AddMedal ( Bobby , - 2 ) ;
6510: LD_STRING Bobby
6512: PPUSH
6513: LD_INT 2
6515: NEG
6516: PPUSH
6517: CALL_OW 101
// if not cyrus_in_squad then
6521: LD_EXP 7
6525: NOT
6526: IFFALSE 6539
// AddMedal ( Cyrus , - 1 ) ;
6528: LD_STRING Cyrus
6530: PPUSH
6531: LD_INT 1
6533: NEG
6534: PPUSH
6535: CALL_OW 101
// if not cyrus_saved and ( IsDying ( Cyrus ) or IsDead ( Cyrus ) ) then
6539: LD_EXP 13
6543: NOT
6544: PUSH
6545: LD_EXP 18
6549: PPUSH
6550: CALL_OW 303
6554: PUSH
6555: LD_EXP 18
6559: PPUSH
6560: CALL_OW 301
6564: OR
6565: AND
6566: IFFALSE 6579
// AddMedal ( Cyrus , - 2 ) ;
6568: LD_STRING Cyrus
6570: PPUSH
6571: LD_INT 2
6573: NEG
6574: PPUSH
6575: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 and m3 then
6579: LD_OWVAR 67
6583: PUSH
6584: LD_INT 3
6586: GREATEREQUAL
6587: PUSH
6588: LD_VAR 0 4
6592: AND
6593: PUSH
6594: LD_VAR 0 5
6598: AND
6599: PUSH
6600: LD_VAR 0 6
6604: AND
6605: IFFALSE 6617
// SetAchievementEX ( ACH_AMER , 1 ) ;
6607: LD_STRING ACH_AMER
6609: PPUSH
6610: LD_INT 1
6612: PPUSH
6613: CALL_OW 564
// GiveMedals ( MAIN ) ;
6617: LD_STRING MAIN
6619: PPUSH
6620: CALL_OW 102
// RewardPeople ( to_reward ) ;
6624: LD_VAR 0 2
6628: PPUSH
6629: CALL_OW 43
// if bobby_saved then
6633: LD_EXP 12
6637: IFFALSE 6657
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
6639: LD_EXP 17
6643: PPUSH
6644: LD_EXP 2
6648: PUSH
6649: LD_STRING Bobby
6651: STR
6652: PPUSH
6653: CALL_OW 38
// if cyrus_saved then
6657: LD_EXP 13
6661: IFFALSE 6681
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
6663: LD_EXP 18
6667: PPUSH
6668: LD_EXP 2
6672: PUSH
6673: LD_STRING Cyrus
6675: STR
6676: PPUSH
6677: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
6681: LD_EXP 16
6685: PPUSH
6686: LD_EXP 2
6690: PUSH
6691: LD_STRING JMM
6693: STR
6694: PPUSH
6695: CALL_OW 38
// if tick <= 3 3$00 then
6699: LD_OWVAR 1
6703: PUSH
6704: LD_INT 6300
6706: LESSEQUAL
6707: IFFALSE 6716
// SetAchievement ( ACH_ASPEED_1 ) ;
6709: LD_STRING ACH_ASPEED_1
6711: PPUSH
6712: CALL_OW 543
// YouWin ;
6716: CALL_OW 103
// end ; end_of_file
6720: PPOPN 6
6722: END
// on UnitGoesToRed ( un ) do begin if un = JMM then
6723: LD_VAR 0 1
6727: PUSH
6728: LD_EXP 16
6732: EQUAL
6733: IFFALSE 6742
// YouLost ( JMM ) ;
6735: LD_STRING JMM
6737: PPUSH
6738: CALL_OW 104
// end ;
6742: PPOPN 1
6744: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
6745: LD_VAR 0 1
6749: PPUSH
6750: LD_VAR 0 2
6754: PPUSH
6755: CALL 22707 0 2
// end ;
6759: PPOPN 2
6761: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
6762: LD_VAR 0 1
6766: PPUSH
6767: CALL 22587 0 1
// if un = JMM then
6771: LD_VAR 0 1
6775: PUSH
6776: LD_EXP 16
6780: EQUAL
6781: IFFALSE 6790
// YouLost ( JMM ) ;
6783: LD_STRING JMM
6785: PPUSH
6786: CALL_OW 104
// end ; end_of_file end_of_file
6790: PPOPN 1
6792: END
// export globalGameSaveCounter ; every 0 0$1 do
6793: GO 6795
6795: DISABLE
// begin enable ;
6796: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
6797: LD_STRING updateTimer(
6799: PUSH
6800: LD_OWVAR 1
6804: STR
6805: PUSH
6806: LD_STRING );
6808: STR
6809: PPUSH
6810: CALL_OW 559
// end ;
6814: END
// every 0 0$1 do
6815: GO 6817
6817: DISABLE
// begin globalGameSaveCounter := 0 ;
6818: LD_ADDR_EXP 28
6822: PUSH
6823: LD_INT 0
6825: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
6826: LD_STRING setGameSaveCounter(0)
6828: PPUSH
6829: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
6833: LD_STRING initStreamRollete();
6835: PPUSH
6836: CALL_OW 559
// InitStreamMode ;
6840: CALL 8166 0 0
// DefineStreamItems ( false ) ;
6844: LD_INT 0
6846: PPUSH
6847: CALL 8630 0 1
// end ;
6851: END
// export function SOS_MapStart ( ) ; begin
6852: LD_INT 0
6854: PPUSH
// if streamModeActive then
6855: LD_EXP 29
6859: IFFALSE 6868
// DefineStreamItems ( true ) ;
6861: LD_INT 1
6863: PPUSH
6864: CALL 8630 0 1
// UpdateLuaVariables ( ) ;
6868: CALL 6885 0 0
// UpdateFactoryWaypoints ( ) ;
6872: CALL 21491 0 0
// UpdateWarehouseGatheringPoints ( ) ;
6876: CALL 21748 0 0
// end ;
6880: LD_VAR 0 1
6884: RET
// function UpdateLuaVariables ( ) ; begin
6885: LD_INT 0
6887: PPUSH
// if globalGameSaveCounter then
6888: LD_EXP 28
6892: IFFALSE 6926
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
6894: LD_ADDR_EXP 28
6898: PUSH
6899: LD_EXP 28
6903: PPUSH
6904: CALL 65705 0 1
6908: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
6909: LD_STRING setGameSaveCounter(
6911: PUSH
6912: LD_EXP 28
6916: STR
6917: PUSH
6918: LD_STRING )
6920: STR
6921: PPUSH
6922: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
6926: LD_STRING setGameDifficulty(
6928: PUSH
6929: LD_OWVAR 67
6933: STR
6934: PUSH
6935: LD_STRING )
6937: STR
6938: PPUSH
6939: CALL_OW 559
// end ;
6943: LD_VAR 0 1
6947: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
6948: LD_INT 0
6950: PPUSH
// if p2 = stream_mode then
6951: LD_VAR 0 2
6955: PUSH
6956: LD_INT 100
6958: EQUAL
6959: IFFALSE 7962
// begin if not StreamModeActive then
6961: LD_EXP 29
6965: NOT
6966: IFFALSE 6976
// StreamModeActive := true ;
6968: LD_ADDR_EXP 29
6972: PUSH
6973: LD_INT 1
6975: ST_TO_ADDR
// if p3 = 0 then
6976: LD_VAR 0 3
6980: PUSH
6981: LD_INT 0
6983: EQUAL
6984: IFFALSE 6990
// InitStreamMode ;
6986: CALL 8166 0 0
// if p3 = 1 then
6990: LD_VAR 0 3
6994: PUSH
6995: LD_INT 1
6997: EQUAL
6998: IFFALSE 7008
// sRocket := true ;
7000: LD_ADDR_EXP 34
7004: PUSH
7005: LD_INT 1
7007: ST_TO_ADDR
// if p3 = 2 then
7008: LD_VAR 0 3
7012: PUSH
7013: LD_INT 2
7015: EQUAL
7016: IFFALSE 7026
// sSpeed := true ;
7018: LD_ADDR_EXP 33
7022: PUSH
7023: LD_INT 1
7025: ST_TO_ADDR
// if p3 = 3 then
7026: LD_VAR 0 3
7030: PUSH
7031: LD_INT 3
7033: EQUAL
7034: IFFALSE 7044
// sEngine := true ;
7036: LD_ADDR_EXP 35
7040: PUSH
7041: LD_INT 1
7043: ST_TO_ADDR
// if p3 = 4 then
7044: LD_VAR 0 3
7048: PUSH
7049: LD_INT 4
7051: EQUAL
7052: IFFALSE 7062
// sSpec := true ;
7054: LD_ADDR_EXP 32
7058: PUSH
7059: LD_INT 1
7061: ST_TO_ADDR
// if p3 = 5 then
7062: LD_VAR 0 3
7066: PUSH
7067: LD_INT 5
7069: EQUAL
7070: IFFALSE 7080
// sLevel := true ;
7072: LD_ADDR_EXP 36
7076: PUSH
7077: LD_INT 1
7079: ST_TO_ADDR
// if p3 = 6 then
7080: LD_VAR 0 3
7084: PUSH
7085: LD_INT 6
7087: EQUAL
7088: IFFALSE 7098
// sArmoury := true ;
7090: LD_ADDR_EXP 37
7094: PUSH
7095: LD_INT 1
7097: ST_TO_ADDR
// if p3 = 7 then
7098: LD_VAR 0 3
7102: PUSH
7103: LD_INT 7
7105: EQUAL
7106: IFFALSE 7116
// sRadar := true ;
7108: LD_ADDR_EXP 38
7112: PUSH
7113: LD_INT 1
7115: ST_TO_ADDR
// if p3 = 8 then
7116: LD_VAR 0 3
7120: PUSH
7121: LD_INT 8
7123: EQUAL
7124: IFFALSE 7134
// sBunker := true ;
7126: LD_ADDR_EXP 39
7130: PUSH
7131: LD_INT 1
7133: ST_TO_ADDR
// if p3 = 9 then
7134: LD_VAR 0 3
7138: PUSH
7139: LD_INT 9
7141: EQUAL
7142: IFFALSE 7152
// sHack := true ;
7144: LD_ADDR_EXP 40
7148: PUSH
7149: LD_INT 1
7151: ST_TO_ADDR
// if p3 = 10 then
7152: LD_VAR 0 3
7156: PUSH
7157: LD_INT 10
7159: EQUAL
7160: IFFALSE 7170
// sFire := true ;
7162: LD_ADDR_EXP 41
7166: PUSH
7167: LD_INT 1
7169: ST_TO_ADDR
// if p3 = 11 then
7170: LD_VAR 0 3
7174: PUSH
7175: LD_INT 11
7177: EQUAL
7178: IFFALSE 7188
// sRefresh := true ;
7180: LD_ADDR_EXP 42
7184: PUSH
7185: LD_INT 1
7187: ST_TO_ADDR
// if p3 = 12 then
7188: LD_VAR 0 3
7192: PUSH
7193: LD_INT 12
7195: EQUAL
7196: IFFALSE 7206
// sExp := true ;
7198: LD_ADDR_EXP 43
7202: PUSH
7203: LD_INT 1
7205: ST_TO_ADDR
// if p3 = 13 then
7206: LD_VAR 0 3
7210: PUSH
7211: LD_INT 13
7213: EQUAL
7214: IFFALSE 7224
// sDepot := true ;
7216: LD_ADDR_EXP 44
7220: PUSH
7221: LD_INT 1
7223: ST_TO_ADDR
// if p3 = 14 then
7224: LD_VAR 0 3
7228: PUSH
7229: LD_INT 14
7231: EQUAL
7232: IFFALSE 7242
// sFlag := true ;
7234: LD_ADDR_EXP 45
7238: PUSH
7239: LD_INT 1
7241: ST_TO_ADDR
// if p3 = 15 then
7242: LD_VAR 0 3
7246: PUSH
7247: LD_INT 15
7249: EQUAL
7250: IFFALSE 7260
// sKamikadze := true ;
7252: LD_ADDR_EXP 53
7256: PUSH
7257: LD_INT 1
7259: ST_TO_ADDR
// if p3 = 16 then
7260: LD_VAR 0 3
7264: PUSH
7265: LD_INT 16
7267: EQUAL
7268: IFFALSE 7278
// sTroll := true ;
7270: LD_ADDR_EXP 54
7274: PUSH
7275: LD_INT 1
7277: ST_TO_ADDR
// if p3 = 17 then
7278: LD_VAR 0 3
7282: PUSH
7283: LD_INT 17
7285: EQUAL
7286: IFFALSE 7296
// sSlow := true ;
7288: LD_ADDR_EXP 55
7292: PUSH
7293: LD_INT 1
7295: ST_TO_ADDR
// if p3 = 18 then
7296: LD_VAR 0 3
7300: PUSH
7301: LD_INT 18
7303: EQUAL
7304: IFFALSE 7314
// sLack := true ;
7306: LD_ADDR_EXP 56
7310: PUSH
7311: LD_INT 1
7313: ST_TO_ADDR
// if p3 = 19 then
7314: LD_VAR 0 3
7318: PUSH
7319: LD_INT 19
7321: EQUAL
7322: IFFALSE 7332
// sTank := true ;
7324: LD_ADDR_EXP 58
7328: PUSH
7329: LD_INT 1
7331: ST_TO_ADDR
// if p3 = 20 then
7332: LD_VAR 0 3
7336: PUSH
7337: LD_INT 20
7339: EQUAL
7340: IFFALSE 7350
// sRemote := true ;
7342: LD_ADDR_EXP 59
7346: PUSH
7347: LD_INT 1
7349: ST_TO_ADDR
// if p3 = 21 then
7350: LD_VAR 0 3
7354: PUSH
7355: LD_INT 21
7357: EQUAL
7358: IFFALSE 7368
// sPowell := true ;
7360: LD_ADDR_EXP 60
7364: PUSH
7365: LD_INT 1
7367: ST_TO_ADDR
// if p3 = 22 then
7368: LD_VAR 0 3
7372: PUSH
7373: LD_INT 22
7375: EQUAL
7376: IFFALSE 7386
// sTeleport := true ;
7378: LD_ADDR_EXP 63
7382: PUSH
7383: LD_INT 1
7385: ST_TO_ADDR
// if p3 = 23 then
7386: LD_VAR 0 3
7390: PUSH
7391: LD_INT 23
7393: EQUAL
7394: IFFALSE 7404
// sOilTower := true ;
7396: LD_ADDR_EXP 65
7400: PUSH
7401: LD_INT 1
7403: ST_TO_ADDR
// if p3 = 24 then
7404: LD_VAR 0 3
7408: PUSH
7409: LD_INT 24
7411: EQUAL
7412: IFFALSE 7422
// sShovel := true ;
7414: LD_ADDR_EXP 66
7418: PUSH
7419: LD_INT 1
7421: ST_TO_ADDR
// if p3 = 25 then
7422: LD_VAR 0 3
7426: PUSH
7427: LD_INT 25
7429: EQUAL
7430: IFFALSE 7440
// sSheik := true ;
7432: LD_ADDR_EXP 67
7436: PUSH
7437: LD_INT 1
7439: ST_TO_ADDR
// if p3 = 26 then
7440: LD_VAR 0 3
7444: PUSH
7445: LD_INT 26
7447: EQUAL
7448: IFFALSE 7458
// sEarthquake := true ;
7450: LD_ADDR_EXP 69
7454: PUSH
7455: LD_INT 1
7457: ST_TO_ADDR
// if p3 = 27 then
7458: LD_VAR 0 3
7462: PUSH
7463: LD_INT 27
7465: EQUAL
7466: IFFALSE 7476
// sAI := true ;
7468: LD_ADDR_EXP 70
7472: PUSH
7473: LD_INT 1
7475: ST_TO_ADDR
// if p3 = 28 then
7476: LD_VAR 0 3
7480: PUSH
7481: LD_INT 28
7483: EQUAL
7484: IFFALSE 7494
// sCargo := true ;
7486: LD_ADDR_EXP 73
7490: PUSH
7491: LD_INT 1
7493: ST_TO_ADDR
// if p3 = 29 then
7494: LD_VAR 0 3
7498: PUSH
7499: LD_INT 29
7501: EQUAL
7502: IFFALSE 7512
// sDLaser := true ;
7504: LD_ADDR_EXP 74
7508: PUSH
7509: LD_INT 1
7511: ST_TO_ADDR
// if p3 = 30 then
7512: LD_VAR 0 3
7516: PUSH
7517: LD_INT 30
7519: EQUAL
7520: IFFALSE 7530
// sExchange := true ;
7522: LD_ADDR_EXP 75
7526: PUSH
7527: LD_INT 1
7529: ST_TO_ADDR
// if p3 = 31 then
7530: LD_VAR 0 3
7534: PUSH
7535: LD_INT 31
7537: EQUAL
7538: IFFALSE 7548
// sFac := true ;
7540: LD_ADDR_EXP 76
7544: PUSH
7545: LD_INT 1
7547: ST_TO_ADDR
// if p3 = 32 then
7548: LD_VAR 0 3
7552: PUSH
7553: LD_INT 32
7555: EQUAL
7556: IFFALSE 7566
// sPower := true ;
7558: LD_ADDR_EXP 77
7562: PUSH
7563: LD_INT 1
7565: ST_TO_ADDR
// if p3 = 33 then
7566: LD_VAR 0 3
7570: PUSH
7571: LD_INT 33
7573: EQUAL
7574: IFFALSE 7584
// sRandom := true ;
7576: LD_ADDR_EXP 78
7580: PUSH
7581: LD_INT 1
7583: ST_TO_ADDR
// if p3 = 34 then
7584: LD_VAR 0 3
7588: PUSH
7589: LD_INT 34
7591: EQUAL
7592: IFFALSE 7602
// sShield := true ;
7594: LD_ADDR_EXP 79
7598: PUSH
7599: LD_INT 1
7601: ST_TO_ADDR
// if p3 = 35 then
7602: LD_VAR 0 3
7606: PUSH
7607: LD_INT 35
7609: EQUAL
7610: IFFALSE 7620
// sTime := true ;
7612: LD_ADDR_EXP 80
7616: PUSH
7617: LD_INT 1
7619: ST_TO_ADDR
// if p3 = 36 then
7620: LD_VAR 0 3
7624: PUSH
7625: LD_INT 36
7627: EQUAL
7628: IFFALSE 7638
// sTools := true ;
7630: LD_ADDR_EXP 81
7634: PUSH
7635: LD_INT 1
7637: ST_TO_ADDR
// if p3 = 101 then
7638: LD_VAR 0 3
7642: PUSH
7643: LD_INT 101
7645: EQUAL
7646: IFFALSE 7656
// sSold := true ;
7648: LD_ADDR_EXP 46
7652: PUSH
7653: LD_INT 1
7655: ST_TO_ADDR
// if p3 = 102 then
7656: LD_VAR 0 3
7660: PUSH
7661: LD_INT 102
7663: EQUAL
7664: IFFALSE 7674
// sDiff := true ;
7666: LD_ADDR_EXP 47
7670: PUSH
7671: LD_INT 1
7673: ST_TO_ADDR
// if p3 = 103 then
7674: LD_VAR 0 3
7678: PUSH
7679: LD_INT 103
7681: EQUAL
7682: IFFALSE 7692
// sFog := true ;
7684: LD_ADDR_EXP 50
7688: PUSH
7689: LD_INT 1
7691: ST_TO_ADDR
// if p3 = 104 then
7692: LD_VAR 0 3
7696: PUSH
7697: LD_INT 104
7699: EQUAL
7700: IFFALSE 7710
// sReset := true ;
7702: LD_ADDR_EXP 51
7706: PUSH
7707: LD_INT 1
7709: ST_TO_ADDR
// if p3 = 105 then
7710: LD_VAR 0 3
7714: PUSH
7715: LD_INT 105
7717: EQUAL
7718: IFFALSE 7728
// sSun := true ;
7720: LD_ADDR_EXP 52
7724: PUSH
7725: LD_INT 1
7727: ST_TO_ADDR
// if p3 = 106 then
7728: LD_VAR 0 3
7732: PUSH
7733: LD_INT 106
7735: EQUAL
7736: IFFALSE 7746
// sTiger := true ;
7738: LD_ADDR_EXP 48
7742: PUSH
7743: LD_INT 1
7745: ST_TO_ADDR
// if p3 = 107 then
7746: LD_VAR 0 3
7750: PUSH
7751: LD_INT 107
7753: EQUAL
7754: IFFALSE 7764
// sBomb := true ;
7756: LD_ADDR_EXP 49
7760: PUSH
7761: LD_INT 1
7763: ST_TO_ADDR
// if p3 = 108 then
7764: LD_VAR 0 3
7768: PUSH
7769: LD_INT 108
7771: EQUAL
7772: IFFALSE 7782
// sWound := true ;
7774: LD_ADDR_EXP 57
7778: PUSH
7779: LD_INT 1
7781: ST_TO_ADDR
// if p3 = 109 then
7782: LD_VAR 0 3
7786: PUSH
7787: LD_INT 109
7789: EQUAL
7790: IFFALSE 7800
// sBetray := true ;
7792: LD_ADDR_EXP 61
7796: PUSH
7797: LD_INT 1
7799: ST_TO_ADDR
// if p3 = 110 then
7800: LD_VAR 0 3
7804: PUSH
7805: LD_INT 110
7807: EQUAL
7808: IFFALSE 7818
// sContamin := true ;
7810: LD_ADDR_EXP 62
7814: PUSH
7815: LD_INT 1
7817: ST_TO_ADDR
// if p3 = 111 then
7818: LD_VAR 0 3
7822: PUSH
7823: LD_INT 111
7825: EQUAL
7826: IFFALSE 7836
// sOil := true ;
7828: LD_ADDR_EXP 64
7832: PUSH
7833: LD_INT 1
7835: ST_TO_ADDR
// if p3 = 112 then
7836: LD_VAR 0 3
7840: PUSH
7841: LD_INT 112
7843: EQUAL
7844: IFFALSE 7854
// sStu := true ;
7846: LD_ADDR_EXP 68
7850: PUSH
7851: LD_INT 1
7853: ST_TO_ADDR
// if p3 = 113 then
7854: LD_VAR 0 3
7858: PUSH
7859: LD_INT 113
7861: EQUAL
7862: IFFALSE 7872
// sBazooka := true ;
7864: LD_ADDR_EXP 71
7868: PUSH
7869: LD_INT 1
7871: ST_TO_ADDR
// if p3 = 114 then
7872: LD_VAR 0 3
7876: PUSH
7877: LD_INT 114
7879: EQUAL
7880: IFFALSE 7890
// sMortar := true ;
7882: LD_ADDR_EXP 72
7886: PUSH
7887: LD_INT 1
7889: ST_TO_ADDR
// if p3 = 115 then
7890: LD_VAR 0 3
7894: PUSH
7895: LD_INT 115
7897: EQUAL
7898: IFFALSE 7908
// sRanger := true ;
7900: LD_ADDR_EXP 82
7904: PUSH
7905: LD_INT 1
7907: ST_TO_ADDR
// if p3 = 116 then
7908: LD_VAR 0 3
7912: PUSH
7913: LD_INT 116
7915: EQUAL
7916: IFFALSE 7926
// sComputer := true ;
7918: LD_ADDR_EXP 83
7922: PUSH
7923: LD_INT 1
7925: ST_TO_ADDR
// if p3 = 117 then
7926: LD_VAR 0 3
7930: PUSH
7931: LD_INT 117
7933: EQUAL
7934: IFFALSE 7944
// s30 := true ;
7936: LD_ADDR_EXP 84
7940: PUSH
7941: LD_INT 1
7943: ST_TO_ADDR
// if p3 = 118 then
7944: LD_VAR 0 3
7948: PUSH
7949: LD_INT 118
7951: EQUAL
7952: IFFALSE 7962
// s60 := true ;
7954: LD_ADDR_EXP 85
7958: PUSH
7959: LD_INT 1
7961: ST_TO_ADDR
// end ; if p2 = hack_mode then
7962: LD_VAR 0 2
7966: PUSH
7967: LD_INT 101
7969: EQUAL
7970: IFFALSE 8098
// begin case p3 of 1 :
7972: LD_VAR 0 3
7976: PUSH
7977: LD_INT 1
7979: DOUBLE
7980: EQUAL
7981: IFTRUE 7985
7983: GO 7992
7985: POP
// hHackUnlimitedResources ; 2 :
7986: CALL 20237 0 0
7990: GO 8098
7992: LD_INT 2
7994: DOUBLE
7995: EQUAL
7996: IFTRUE 8000
7998: GO 8007
8000: POP
// hHackSetLevel10 ; 3 :
8001: CALL 20370 0 0
8005: GO 8098
8007: LD_INT 3
8009: DOUBLE
8010: EQUAL
8011: IFTRUE 8015
8013: GO 8022
8015: POP
// hHackSetLevel10YourUnits ; 4 :
8016: CALL 20455 0 0
8020: GO 8098
8022: LD_INT 4
8024: DOUBLE
8025: EQUAL
8026: IFTRUE 8030
8028: GO 8037
8030: POP
// hHackInvincible ; 5 :
8031: CALL 20903 0 0
8035: GO 8098
8037: LD_INT 5
8039: DOUBLE
8040: EQUAL
8041: IFTRUE 8045
8043: GO 8052
8045: POP
// hHackInvisible ; 6 :
8046: CALL 21014 0 0
8050: GO 8098
8052: LD_INT 6
8054: DOUBLE
8055: EQUAL
8056: IFTRUE 8060
8058: GO 8067
8060: POP
// hHackChangeYourSide ; 7 :
8061: CALL 21071 0 0
8065: GO 8098
8067: LD_INT 7
8069: DOUBLE
8070: EQUAL
8071: IFTRUE 8075
8073: GO 8082
8075: POP
// hHackChangeUnitSide ; 8 :
8076: CALL 21113 0 0
8080: GO 8098
8082: LD_INT 8
8084: DOUBLE
8085: EQUAL
8086: IFTRUE 8090
8088: GO 8097
8090: POP
// hHackFog ; end ;
8091: CALL 21214 0 0
8095: GO 8098
8097: POP
// end ; if p2 = game_save_mode then
8098: LD_VAR 0 2
8102: PUSH
8103: LD_INT 102
8105: EQUAL
8106: IFFALSE 8161
// begin if p3 = 1 then
8108: LD_VAR 0 3
8112: PUSH
8113: LD_INT 1
8115: EQUAL
8116: IFFALSE 8128
// globalGameSaveCounter := p4 ;
8118: LD_ADDR_EXP 28
8122: PUSH
8123: LD_VAR 0 4
8127: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
8128: LD_VAR 0 3
8132: PUSH
8133: LD_INT 2
8135: EQUAL
8136: PUSH
8137: LD_EXP 28
8141: AND
8142: IFFALSE 8161
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
8144: LD_STRING setGameSaveCounter(
8146: PUSH
8147: LD_EXP 28
8151: STR
8152: PUSH
8153: LD_STRING )
8155: STR
8156: PPUSH
8157: CALL_OW 559
// end ; end ;
8161: LD_VAR 0 7
8165: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
8166: LD_INT 0
8168: PPUSH
// streamModeActive := false ;
8169: LD_ADDR_EXP 29
8173: PUSH
8174: LD_INT 0
8176: ST_TO_ADDR
// normalCounter := 36 ;
8177: LD_ADDR_EXP 30
8181: PUSH
8182: LD_INT 36
8184: ST_TO_ADDR
// hardcoreCounter := 18 ;
8185: LD_ADDR_EXP 31
8189: PUSH
8190: LD_INT 18
8192: ST_TO_ADDR
// sRocket := false ;
8193: LD_ADDR_EXP 34
8197: PUSH
8198: LD_INT 0
8200: ST_TO_ADDR
// sSpeed := false ;
8201: LD_ADDR_EXP 33
8205: PUSH
8206: LD_INT 0
8208: ST_TO_ADDR
// sEngine := false ;
8209: LD_ADDR_EXP 35
8213: PUSH
8214: LD_INT 0
8216: ST_TO_ADDR
// sSpec := false ;
8217: LD_ADDR_EXP 32
8221: PUSH
8222: LD_INT 0
8224: ST_TO_ADDR
// sLevel := false ;
8225: LD_ADDR_EXP 36
8229: PUSH
8230: LD_INT 0
8232: ST_TO_ADDR
// sArmoury := false ;
8233: LD_ADDR_EXP 37
8237: PUSH
8238: LD_INT 0
8240: ST_TO_ADDR
// sRadar := false ;
8241: LD_ADDR_EXP 38
8245: PUSH
8246: LD_INT 0
8248: ST_TO_ADDR
// sBunker := false ;
8249: LD_ADDR_EXP 39
8253: PUSH
8254: LD_INT 0
8256: ST_TO_ADDR
// sHack := false ;
8257: LD_ADDR_EXP 40
8261: PUSH
8262: LD_INT 0
8264: ST_TO_ADDR
// sFire := false ;
8265: LD_ADDR_EXP 41
8269: PUSH
8270: LD_INT 0
8272: ST_TO_ADDR
// sRefresh := false ;
8273: LD_ADDR_EXP 42
8277: PUSH
8278: LD_INT 0
8280: ST_TO_ADDR
// sExp := false ;
8281: LD_ADDR_EXP 43
8285: PUSH
8286: LD_INT 0
8288: ST_TO_ADDR
// sDepot := false ;
8289: LD_ADDR_EXP 44
8293: PUSH
8294: LD_INT 0
8296: ST_TO_ADDR
// sFlag := false ;
8297: LD_ADDR_EXP 45
8301: PUSH
8302: LD_INT 0
8304: ST_TO_ADDR
// sKamikadze := false ;
8305: LD_ADDR_EXP 53
8309: PUSH
8310: LD_INT 0
8312: ST_TO_ADDR
// sTroll := false ;
8313: LD_ADDR_EXP 54
8317: PUSH
8318: LD_INT 0
8320: ST_TO_ADDR
// sSlow := false ;
8321: LD_ADDR_EXP 55
8325: PUSH
8326: LD_INT 0
8328: ST_TO_ADDR
// sLack := false ;
8329: LD_ADDR_EXP 56
8333: PUSH
8334: LD_INT 0
8336: ST_TO_ADDR
// sTank := false ;
8337: LD_ADDR_EXP 58
8341: PUSH
8342: LD_INT 0
8344: ST_TO_ADDR
// sRemote := false ;
8345: LD_ADDR_EXP 59
8349: PUSH
8350: LD_INT 0
8352: ST_TO_ADDR
// sPowell := false ;
8353: LD_ADDR_EXP 60
8357: PUSH
8358: LD_INT 0
8360: ST_TO_ADDR
// sTeleport := false ;
8361: LD_ADDR_EXP 63
8365: PUSH
8366: LD_INT 0
8368: ST_TO_ADDR
// sOilTower := false ;
8369: LD_ADDR_EXP 65
8373: PUSH
8374: LD_INT 0
8376: ST_TO_ADDR
// sShovel := false ;
8377: LD_ADDR_EXP 66
8381: PUSH
8382: LD_INT 0
8384: ST_TO_ADDR
// sSheik := false ;
8385: LD_ADDR_EXP 67
8389: PUSH
8390: LD_INT 0
8392: ST_TO_ADDR
// sEarthquake := false ;
8393: LD_ADDR_EXP 69
8397: PUSH
8398: LD_INT 0
8400: ST_TO_ADDR
// sAI := false ;
8401: LD_ADDR_EXP 70
8405: PUSH
8406: LD_INT 0
8408: ST_TO_ADDR
// sCargo := false ;
8409: LD_ADDR_EXP 73
8413: PUSH
8414: LD_INT 0
8416: ST_TO_ADDR
// sDLaser := false ;
8417: LD_ADDR_EXP 74
8421: PUSH
8422: LD_INT 0
8424: ST_TO_ADDR
// sExchange := false ;
8425: LD_ADDR_EXP 75
8429: PUSH
8430: LD_INT 0
8432: ST_TO_ADDR
// sFac := false ;
8433: LD_ADDR_EXP 76
8437: PUSH
8438: LD_INT 0
8440: ST_TO_ADDR
// sPower := false ;
8441: LD_ADDR_EXP 77
8445: PUSH
8446: LD_INT 0
8448: ST_TO_ADDR
// sRandom := false ;
8449: LD_ADDR_EXP 78
8453: PUSH
8454: LD_INT 0
8456: ST_TO_ADDR
// sShield := false ;
8457: LD_ADDR_EXP 79
8461: PUSH
8462: LD_INT 0
8464: ST_TO_ADDR
// sTime := false ;
8465: LD_ADDR_EXP 80
8469: PUSH
8470: LD_INT 0
8472: ST_TO_ADDR
// sTools := false ;
8473: LD_ADDR_EXP 81
8477: PUSH
8478: LD_INT 0
8480: ST_TO_ADDR
// sSold := false ;
8481: LD_ADDR_EXP 46
8485: PUSH
8486: LD_INT 0
8488: ST_TO_ADDR
// sDiff := false ;
8489: LD_ADDR_EXP 47
8493: PUSH
8494: LD_INT 0
8496: ST_TO_ADDR
// sFog := false ;
8497: LD_ADDR_EXP 50
8501: PUSH
8502: LD_INT 0
8504: ST_TO_ADDR
// sReset := false ;
8505: LD_ADDR_EXP 51
8509: PUSH
8510: LD_INT 0
8512: ST_TO_ADDR
// sSun := false ;
8513: LD_ADDR_EXP 52
8517: PUSH
8518: LD_INT 0
8520: ST_TO_ADDR
// sTiger := false ;
8521: LD_ADDR_EXP 48
8525: PUSH
8526: LD_INT 0
8528: ST_TO_ADDR
// sBomb := false ;
8529: LD_ADDR_EXP 49
8533: PUSH
8534: LD_INT 0
8536: ST_TO_ADDR
// sWound := false ;
8537: LD_ADDR_EXP 57
8541: PUSH
8542: LD_INT 0
8544: ST_TO_ADDR
// sBetray := false ;
8545: LD_ADDR_EXP 61
8549: PUSH
8550: LD_INT 0
8552: ST_TO_ADDR
// sContamin := false ;
8553: LD_ADDR_EXP 62
8557: PUSH
8558: LD_INT 0
8560: ST_TO_ADDR
// sOil := false ;
8561: LD_ADDR_EXP 64
8565: PUSH
8566: LD_INT 0
8568: ST_TO_ADDR
// sStu := false ;
8569: LD_ADDR_EXP 68
8573: PUSH
8574: LD_INT 0
8576: ST_TO_ADDR
// sBazooka := false ;
8577: LD_ADDR_EXP 71
8581: PUSH
8582: LD_INT 0
8584: ST_TO_ADDR
// sMortar := false ;
8585: LD_ADDR_EXP 72
8589: PUSH
8590: LD_INT 0
8592: ST_TO_ADDR
// sRanger := false ;
8593: LD_ADDR_EXP 82
8597: PUSH
8598: LD_INT 0
8600: ST_TO_ADDR
// sComputer := false ;
8601: LD_ADDR_EXP 83
8605: PUSH
8606: LD_INT 0
8608: ST_TO_ADDR
// s30 := false ;
8609: LD_ADDR_EXP 84
8613: PUSH
8614: LD_INT 0
8616: ST_TO_ADDR
// s60 := false ;
8617: LD_ADDR_EXP 85
8621: PUSH
8622: LD_INT 0
8624: ST_TO_ADDR
// end ;
8625: LD_VAR 0 1
8629: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
8630: LD_INT 0
8632: PPUSH
8633: PPUSH
8634: PPUSH
8635: PPUSH
8636: PPUSH
8637: PPUSH
8638: PPUSH
// result := [ ] ;
8639: LD_ADDR_VAR 0 2
8643: PUSH
8644: EMPTY
8645: ST_TO_ADDR
// if campaign_id = 1 then
8646: LD_OWVAR 69
8650: PUSH
8651: LD_INT 1
8653: EQUAL
8654: IFFALSE 11820
// begin case mission_number of 1 :
8656: LD_OWVAR 70
8660: PUSH
8661: LD_INT 1
8663: DOUBLE
8664: EQUAL
8665: IFTRUE 8669
8667: GO 8745
8669: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
8670: LD_ADDR_VAR 0 2
8674: PUSH
8675: LD_INT 2
8677: PUSH
8678: LD_INT 4
8680: PUSH
8681: LD_INT 11
8683: PUSH
8684: LD_INT 12
8686: PUSH
8687: LD_INT 15
8689: PUSH
8690: LD_INT 16
8692: PUSH
8693: LD_INT 22
8695: PUSH
8696: LD_INT 23
8698: PUSH
8699: LD_INT 26
8701: PUSH
8702: EMPTY
8703: LIST
8704: LIST
8705: LIST
8706: LIST
8707: LIST
8708: LIST
8709: LIST
8710: LIST
8711: LIST
8712: PUSH
8713: LD_INT 101
8715: PUSH
8716: LD_INT 102
8718: PUSH
8719: LD_INT 106
8721: PUSH
8722: LD_INT 116
8724: PUSH
8725: LD_INT 117
8727: PUSH
8728: LD_INT 118
8730: PUSH
8731: EMPTY
8732: LIST
8733: LIST
8734: LIST
8735: LIST
8736: LIST
8737: LIST
8738: PUSH
8739: EMPTY
8740: LIST
8741: LIST
8742: ST_TO_ADDR
8743: GO 11818
8745: LD_INT 2
8747: DOUBLE
8748: EQUAL
8749: IFTRUE 8753
8751: GO 8837
8753: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
8754: LD_ADDR_VAR 0 2
8758: PUSH
8759: LD_INT 2
8761: PUSH
8762: LD_INT 4
8764: PUSH
8765: LD_INT 11
8767: PUSH
8768: LD_INT 12
8770: PUSH
8771: LD_INT 15
8773: PUSH
8774: LD_INT 16
8776: PUSH
8777: LD_INT 22
8779: PUSH
8780: LD_INT 23
8782: PUSH
8783: LD_INT 26
8785: PUSH
8786: EMPTY
8787: LIST
8788: LIST
8789: LIST
8790: LIST
8791: LIST
8792: LIST
8793: LIST
8794: LIST
8795: LIST
8796: PUSH
8797: LD_INT 101
8799: PUSH
8800: LD_INT 102
8802: PUSH
8803: LD_INT 105
8805: PUSH
8806: LD_INT 106
8808: PUSH
8809: LD_INT 108
8811: PUSH
8812: LD_INT 116
8814: PUSH
8815: LD_INT 117
8817: PUSH
8818: LD_INT 118
8820: PUSH
8821: EMPTY
8822: LIST
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: PUSH
8831: EMPTY
8832: LIST
8833: LIST
8834: ST_TO_ADDR
8835: GO 11818
8837: LD_INT 3
8839: DOUBLE
8840: EQUAL
8841: IFTRUE 8845
8843: GO 8933
8845: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
8846: LD_ADDR_VAR 0 2
8850: PUSH
8851: LD_INT 2
8853: PUSH
8854: LD_INT 4
8856: PUSH
8857: LD_INT 5
8859: PUSH
8860: LD_INT 11
8862: PUSH
8863: LD_INT 12
8865: PUSH
8866: LD_INT 15
8868: PUSH
8869: LD_INT 16
8871: PUSH
8872: LD_INT 22
8874: PUSH
8875: LD_INT 26
8877: PUSH
8878: LD_INT 36
8880: PUSH
8881: EMPTY
8882: LIST
8883: LIST
8884: LIST
8885: LIST
8886: LIST
8887: LIST
8888: LIST
8889: LIST
8890: LIST
8891: LIST
8892: PUSH
8893: LD_INT 101
8895: PUSH
8896: LD_INT 102
8898: PUSH
8899: LD_INT 105
8901: PUSH
8902: LD_INT 106
8904: PUSH
8905: LD_INT 108
8907: PUSH
8908: LD_INT 116
8910: PUSH
8911: LD_INT 117
8913: PUSH
8914: LD_INT 118
8916: PUSH
8917: EMPTY
8918: LIST
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: PUSH
8927: EMPTY
8928: LIST
8929: LIST
8930: ST_TO_ADDR
8931: GO 11818
8933: LD_INT 4
8935: DOUBLE
8936: EQUAL
8937: IFTRUE 8941
8939: GO 9037
8941: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
8942: LD_ADDR_VAR 0 2
8946: PUSH
8947: LD_INT 2
8949: PUSH
8950: LD_INT 4
8952: PUSH
8953: LD_INT 5
8955: PUSH
8956: LD_INT 8
8958: PUSH
8959: LD_INT 11
8961: PUSH
8962: LD_INT 12
8964: PUSH
8965: LD_INT 15
8967: PUSH
8968: LD_INT 16
8970: PUSH
8971: LD_INT 22
8973: PUSH
8974: LD_INT 23
8976: PUSH
8977: LD_INT 26
8979: PUSH
8980: LD_INT 36
8982: PUSH
8983: EMPTY
8984: LIST
8985: LIST
8986: LIST
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: LIST
8992: LIST
8993: LIST
8994: LIST
8995: LIST
8996: PUSH
8997: LD_INT 101
8999: PUSH
9000: LD_INT 102
9002: PUSH
9003: LD_INT 105
9005: PUSH
9006: LD_INT 106
9008: PUSH
9009: LD_INT 108
9011: PUSH
9012: LD_INT 116
9014: PUSH
9015: LD_INT 117
9017: PUSH
9018: LD_INT 118
9020: PUSH
9021: EMPTY
9022: LIST
9023: LIST
9024: LIST
9025: LIST
9026: LIST
9027: LIST
9028: LIST
9029: LIST
9030: PUSH
9031: EMPTY
9032: LIST
9033: LIST
9034: ST_TO_ADDR
9035: GO 11818
9037: LD_INT 5
9039: DOUBLE
9040: EQUAL
9041: IFTRUE 9045
9043: GO 9157
9045: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9046: LD_ADDR_VAR 0 2
9050: PUSH
9051: LD_INT 2
9053: PUSH
9054: LD_INT 4
9056: PUSH
9057: LD_INT 5
9059: PUSH
9060: LD_INT 6
9062: PUSH
9063: LD_INT 8
9065: PUSH
9066: LD_INT 11
9068: PUSH
9069: LD_INT 12
9071: PUSH
9072: LD_INT 15
9074: PUSH
9075: LD_INT 16
9077: PUSH
9078: LD_INT 22
9080: PUSH
9081: LD_INT 23
9083: PUSH
9084: LD_INT 25
9086: PUSH
9087: LD_INT 26
9089: PUSH
9090: LD_INT 36
9092: PUSH
9093: EMPTY
9094: LIST
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: LIST
9100: LIST
9101: LIST
9102: LIST
9103: LIST
9104: LIST
9105: LIST
9106: LIST
9107: LIST
9108: PUSH
9109: LD_INT 101
9111: PUSH
9112: LD_INT 102
9114: PUSH
9115: LD_INT 105
9117: PUSH
9118: LD_INT 106
9120: PUSH
9121: LD_INT 108
9123: PUSH
9124: LD_INT 109
9126: PUSH
9127: LD_INT 112
9129: PUSH
9130: LD_INT 116
9132: PUSH
9133: LD_INT 117
9135: PUSH
9136: LD_INT 118
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: PUSH
9151: EMPTY
9152: LIST
9153: LIST
9154: ST_TO_ADDR
9155: GO 11818
9157: LD_INT 6
9159: DOUBLE
9160: EQUAL
9161: IFTRUE 9165
9163: GO 9297
9165: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
9166: LD_ADDR_VAR 0 2
9170: PUSH
9171: LD_INT 2
9173: PUSH
9174: LD_INT 4
9176: PUSH
9177: LD_INT 5
9179: PUSH
9180: LD_INT 6
9182: PUSH
9183: LD_INT 8
9185: PUSH
9186: LD_INT 11
9188: PUSH
9189: LD_INT 12
9191: PUSH
9192: LD_INT 15
9194: PUSH
9195: LD_INT 16
9197: PUSH
9198: LD_INT 20
9200: PUSH
9201: LD_INT 21
9203: PUSH
9204: LD_INT 22
9206: PUSH
9207: LD_INT 23
9209: PUSH
9210: LD_INT 25
9212: PUSH
9213: LD_INT 26
9215: PUSH
9216: LD_INT 30
9218: PUSH
9219: LD_INT 31
9221: PUSH
9222: LD_INT 32
9224: PUSH
9225: LD_INT 36
9227: PUSH
9228: EMPTY
9229: LIST
9230: LIST
9231: LIST
9232: LIST
9233: LIST
9234: LIST
9235: LIST
9236: LIST
9237: LIST
9238: LIST
9239: LIST
9240: LIST
9241: LIST
9242: LIST
9243: LIST
9244: LIST
9245: LIST
9246: LIST
9247: LIST
9248: PUSH
9249: LD_INT 101
9251: PUSH
9252: LD_INT 102
9254: PUSH
9255: LD_INT 105
9257: PUSH
9258: LD_INT 106
9260: PUSH
9261: LD_INT 108
9263: PUSH
9264: LD_INT 109
9266: PUSH
9267: LD_INT 112
9269: PUSH
9270: LD_INT 116
9272: PUSH
9273: LD_INT 117
9275: PUSH
9276: LD_INT 118
9278: PUSH
9279: EMPTY
9280: LIST
9281: LIST
9282: LIST
9283: LIST
9284: LIST
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: PUSH
9291: EMPTY
9292: LIST
9293: LIST
9294: ST_TO_ADDR
9295: GO 11818
9297: LD_INT 7
9299: DOUBLE
9300: EQUAL
9301: IFTRUE 9305
9303: GO 9417
9305: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
9306: LD_ADDR_VAR 0 2
9310: PUSH
9311: LD_INT 2
9313: PUSH
9314: LD_INT 4
9316: PUSH
9317: LD_INT 5
9319: PUSH
9320: LD_INT 7
9322: PUSH
9323: LD_INT 11
9325: PUSH
9326: LD_INT 12
9328: PUSH
9329: LD_INT 15
9331: PUSH
9332: LD_INT 16
9334: PUSH
9335: LD_INT 20
9337: PUSH
9338: LD_INT 21
9340: PUSH
9341: LD_INT 22
9343: PUSH
9344: LD_INT 23
9346: PUSH
9347: LD_INT 25
9349: PUSH
9350: LD_INT 26
9352: PUSH
9353: EMPTY
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: LIST
9367: LIST
9368: PUSH
9369: LD_INT 101
9371: PUSH
9372: LD_INT 102
9374: PUSH
9375: LD_INT 103
9377: PUSH
9378: LD_INT 105
9380: PUSH
9381: LD_INT 106
9383: PUSH
9384: LD_INT 108
9386: PUSH
9387: LD_INT 112
9389: PUSH
9390: LD_INT 116
9392: PUSH
9393: LD_INT 117
9395: PUSH
9396: LD_INT 118
9398: PUSH
9399: EMPTY
9400: LIST
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: LIST
9406: LIST
9407: LIST
9408: LIST
9409: LIST
9410: PUSH
9411: EMPTY
9412: LIST
9413: LIST
9414: ST_TO_ADDR
9415: GO 11818
9417: LD_INT 8
9419: DOUBLE
9420: EQUAL
9421: IFTRUE 9425
9423: GO 9565
9425: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
9426: LD_ADDR_VAR 0 2
9430: PUSH
9431: LD_INT 2
9433: PUSH
9434: LD_INT 4
9436: PUSH
9437: LD_INT 5
9439: PUSH
9440: LD_INT 6
9442: PUSH
9443: LD_INT 7
9445: PUSH
9446: LD_INT 8
9448: PUSH
9449: LD_INT 11
9451: PUSH
9452: LD_INT 12
9454: PUSH
9455: LD_INT 15
9457: PUSH
9458: LD_INT 16
9460: PUSH
9461: LD_INT 20
9463: PUSH
9464: LD_INT 21
9466: PUSH
9467: LD_INT 22
9469: PUSH
9470: LD_INT 23
9472: PUSH
9473: LD_INT 25
9475: PUSH
9476: LD_INT 26
9478: PUSH
9479: LD_INT 30
9481: PUSH
9482: LD_INT 31
9484: PUSH
9485: LD_INT 32
9487: PUSH
9488: LD_INT 36
9490: PUSH
9491: EMPTY
9492: LIST
9493: LIST
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: LIST
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: LIST
9504: LIST
9505: LIST
9506: LIST
9507: LIST
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: PUSH
9513: LD_INT 101
9515: PUSH
9516: LD_INT 102
9518: PUSH
9519: LD_INT 103
9521: PUSH
9522: LD_INT 105
9524: PUSH
9525: LD_INT 106
9527: PUSH
9528: LD_INT 108
9530: PUSH
9531: LD_INT 109
9533: PUSH
9534: LD_INT 112
9536: PUSH
9537: LD_INT 116
9539: PUSH
9540: LD_INT 117
9542: PUSH
9543: LD_INT 118
9545: PUSH
9546: EMPTY
9547: LIST
9548: LIST
9549: LIST
9550: LIST
9551: LIST
9552: LIST
9553: LIST
9554: LIST
9555: LIST
9556: LIST
9557: LIST
9558: PUSH
9559: EMPTY
9560: LIST
9561: LIST
9562: ST_TO_ADDR
9563: GO 11818
9565: LD_INT 9
9567: DOUBLE
9568: EQUAL
9569: IFTRUE 9573
9571: GO 9721
9573: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
9574: LD_ADDR_VAR 0 2
9578: PUSH
9579: LD_INT 2
9581: PUSH
9582: LD_INT 4
9584: PUSH
9585: LD_INT 5
9587: PUSH
9588: LD_INT 6
9590: PUSH
9591: LD_INT 7
9593: PUSH
9594: LD_INT 8
9596: PUSH
9597: LD_INT 11
9599: PUSH
9600: LD_INT 12
9602: PUSH
9603: LD_INT 15
9605: PUSH
9606: LD_INT 16
9608: PUSH
9609: LD_INT 20
9611: PUSH
9612: LD_INT 21
9614: PUSH
9615: LD_INT 22
9617: PUSH
9618: LD_INT 23
9620: PUSH
9621: LD_INT 25
9623: PUSH
9624: LD_INT 26
9626: PUSH
9627: LD_INT 28
9629: PUSH
9630: LD_INT 30
9632: PUSH
9633: LD_INT 31
9635: PUSH
9636: LD_INT 32
9638: PUSH
9639: LD_INT 36
9641: PUSH
9642: EMPTY
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: PUSH
9665: LD_INT 101
9667: PUSH
9668: LD_INT 102
9670: PUSH
9671: LD_INT 103
9673: PUSH
9674: LD_INT 105
9676: PUSH
9677: LD_INT 106
9679: PUSH
9680: LD_INT 108
9682: PUSH
9683: LD_INT 109
9685: PUSH
9686: LD_INT 112
9688: PUSH
9689: LD_INT 114
9691: PUSH
9692: LD_INT 116
9694: PUSH
9695: LD_INT 117
9697: PUSH
9698: LD_INT 118
9700: PUSH
9701: EMPTY
9702: LIST
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: LIST
9708: LIST
9709: LIST
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: PUSH
9715: EMPTY
9716: LIST
9717: LIST
9718: ST_TO_ADDR
9719: GO 11818
9721: LD_INT 10
9723: DOUBLE
9724: EQUAL
9725: IFTRUE 9729
9727: GO 9925
9729: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
9730: LD_ADDR_VAR 0 2
9734: PUSH
9735: LD_INT 2
9737: PUSH
9738: LD_INT 4
9740: PUSH
9741: LD_INT 5
9743: PUSH
9744: LD_INT 6
9746: PUSH
9747: LD_INT 7
9749: PUSH
9750: LD_INT 8
9752: PUSH
9753: LD_INT 9
9755: PUSH
9756: LD_INT 10
9758: PUSH
9759: LD_INT 11
9761: PUSH
9762: LD_INT 12
9764: PUSH
9765: LD_INT 13
9767: PUSH
9768: LD_INT 14
9770: PUSH
9771: LD_INT 15
9773: PUSH
9774: LD_INT 16
9776: PUSH
9777: LD_INT 17
9779: PUSH
9780: LD_INT 18
9782: PUSH
9783: LD_INT 19
9785: PUSH
9786: LD_INT 20
9788: PUSH
9789: LD_INT 21
9791: PUSH
9792: LD_INT 22
9794: PUSH
9795: LD_INT 23
9797: PUSH
9798: LD_INT 24
9800: PUSH
9801: LD_INT 25
9803: PUSH
9804: LD_INT 26
9806: PUSH
9807: LD_INT 28
9809: PUSH
9810: LD_INT 30
9812: PUSH
9813: LD_INT 31
9815: PUSH
9816: LD_INT 32
9818: PUSH
9819: LD_INT 36
9821: PUSH
9822: EMPTY
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: LIST
9833: LIST
9834: LIST
9835: LIST
9836: LIST
9837: LIST
9838: LIST
9839: LIST
9840: LIST
9841: LIST
9842: LIST
9843: LIST
9844: LIST
9845: LIST
9846: LIST
9847: LIST
9848: LIST
9849: LIST
9850: LIST
9851: LIST
9852: PUSH
9853: LD_INT 101
9855: PUSH
9856: LD_INT 102
9858: PUSH
9859: LD_INT 103
9861: PUSH
9862: LD_INT 104
9864: PUSH
9865: LD_INT 105
9867: PUSH
9868: LD_INT 106
9870: PUSH
9871: LD_INT 107
9873: PUSH
9874: LD_INT 108
9876: PUSH
9877: LD_INT 109
9879: PUSH
9880: LD_INT 110
9882: PUSH
9883: LD_INT 111
9885: PUSH
9886: LD_INT 112
9888: PUSH
9889: LD_INT 114
9891: PUSH
9892: LD_INT 116
9894: PUSH
9895: LD_INT 117
9897: PUSH
9898: LD_INT 118
9900: PUSH
9901: EMPTY
9902: LIST
9903: LIST
9904: LIST
9905: LIST
9906: LIST
9907: LIST
9908: LIST
9909: LIST
9910: LIST
9911: LIST
9912: LIST
9913: LIST
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: PUSH
9919: EMPTY
9920: LIST
9921: LIST
9922: ST_TO_ADDR
9923: GO 11818
9925: LD_INT 11
9927: DOUBLE
9928: EQUAL
9929: IFTRUE 9933
9931: GO 10137
9933: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
9934: LD_ADDR_VAR 0 2
9938: PUSH
9939: LD_INT 2
9941: PUSH
9942: LD_INT 3
9944: PUSH
9945: LD_INT 4
9947: PUSH
9948: LD_INT 5
9950: PUSH
9951: LD_INT 6
9953: PUSH
9954: LD_INT 7
9956: PUSH
9957: LD_INT 8
9959: PUSH
9960: LD_INT 9
9962: PUSH
9963: LD_INT 10
9965: PUSH
9966: LD_INT 11
9968: PUSH
9969: LD_INT 12
9971: PUSH
9972: LD_INT 13
9974: PUSH
9975: LD_INT 14
9977: PUSH
9978: LD_INT 15
9980: PUSH
9981: LD_INT 16
9983: PUSH
9984: LD_INT 17
9986: PUSH
9987: LD_INT 18
9989: PUSH
9990: LD_INT 19
9992: PUSH
9993: LD_INT 20
9995: PUSH
9996: LD_INT 21
9998: PUSH
9999: LD_INT 22
10001: PUSH
10002: LD_INT 23
10004: PUSH
10005: LD_INT 24
10007: PUSH
10008: LD_INT 25
10010: PUSH
10011: LD_INT 26
10013: PUSH
10014: LD_INT 28
10016: PUSH
10017: LD_INT 30
10019: PUSH
10020: LD_INT 31
10022: PUSH
10023: LD_INT 32
10025: PUSH
10026: LD_INT 34
10028: PUSH
10029: LD_INT 36
10031: PUSH
10032: EMPTY
10033: LIST
10034: LIST
10035: LIST
10036: LIST
10037: LIST
10038: LIST
10039: LIST
10040: LIST
10041: LIST
10042: LIST
10043: LIST
10044: LIST
10045: LIST
10046: LIST
10047: LIST
10048: LIST
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: LIST
10064: PUSH
10065: LD_INT 101
10067: PUSH
10068: LD_INT 102
10070: PUSH
10071: LD_INT 103
10073: PUSH
10074: LD_INT 104
10076: PUSH
10077: LD_INT 105
10079: PUSH
10080: LD_INT 106
10082: PUSH
10083: LD_INT 107
10085: PUSH
10086: LD_INT 108
10088: PUSH
10089: LD_INT 109
10091: PUSH
10092: LD_INT 110
10094: PUSH
10095: LD_INT 111
10097: PUSH
10098: LD_INT 112
10100: PUSH
10101: LD_INT 114
10103: PUSH
10104: LD_INT 116
10106: PUSH
10107: LD_INT 117
10109: PUSH
10110: LD_INT 118
10112: PUSH
10113: EMPTY
10114: LIST
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: LIST
10120: LIST
10121: LIST
10122: LIST
10123: LIST
10124: LIST
10125: LIST
10126: LIST
10127: LIST
10128: LIST
10129: LIST
10130: PUSH
10131: EMPTY
10132: LIST
10133: LIST
10134: ST_TO_ADDR
10135: GO 11818
10137: LD_INT 12
10139: DOUBLE
10140: EQUAL
10141: IFTRUE 10145
10143: GO 10365
10145: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
10146: LD_ADDR_VAR 0 2
10150: PUSH
10151: LD_INT 1
10153: PUSH
10154: LD_INT 2
10156: PUSH
10157: LD_INT 3
10159: PUSH
10160: LD_INT 4
10162: PUSH
10163: LD_INT 5
10165: PUSH
10166: LD_INT 6
10168: PUSH
10169: LD_INT 7
10171: PUSH
10172: LD_INT 8
10174: PUSH
10175: LD_INT 9
10177: PUSH
10178: LD_INT 10
10180: PUSH
10181: LD_INT 11
10183: PUSH
10184: LD_INT 12
10186: PUSH
10187: LD_INT 13
10189: PUSH
10190: LD_INT 14
10192: PUSH
10193: LD_INT 15
10195: PUSH
10196: LD_INT 16
10198: PUSH
10199: LD_INT 17
10201: PUSH
10202: LD_INT 18
10204: PUSH
10205: LD_INT 19
10207: PUSH
10208: LD_INT 20
10210: PUSH
10211: LD_INT 21
10213: PUSH
10214: LD_INT 22
10216: PUSH
10217: LD_INT 23
10219: PUSH
10220: LD_INT 24
10222: PUSH
10223: LD_INT 25
10225: PUSH
10226: LD_INT 26
10228: PUSH
10229: LD_INT 27
10231: PUSH
10232: LD_INT 28
10234: PUSH
10235: LD_INT 30
10237: PUSH
10238: LD_INT 31
10240: PUSH
10241: LD_INT 32
10243: PUSH
10244: LD_INT 33
10246: PUSH
10247: LD_INT 34
10249: PUSH
10250: LD_INT 36
10252: PUSH
10253: EMPTY
10254: LIST
10255: LIST
10256: LIST
10257: LIST
10258: LIST
10259: LIST
10260: LIST
10261: LIST
10262: LIST
10263: LIST
10264: LIST
10265: LIST
10266: LIST
10267: LIST
10268: LIST
10269: LIST
10270: LIST
10271: LIST
10272: LIST
10273: LIST
10274: LIST
10275: LIST
10276: LIST
10277: LIST
10278: LIST
10279: LIST
10280: LIST
10281: LIST
10282: LIST
10283: LIST
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: PUSH
10289: LD_INT 101
10291: PUSH
10292: LD_INT 102
10294: PUSH
10295: LD_INT 103
10297: PUSH
10298: LD_INT 104
10300: PUSH
10301: LD_INT 105
10303: PUSH
10304: LD_INT 106
10306: PUSH
10307: LD_INT 107
10309: PUSH
10310: LD_INT 108
10312: PUSH
10313: LD_INT 109
10315: PUSH
10316: LD_INT 110
10318: PUSH
10319: LD_INT 111
10321: PUSH
10322: LD_INT 112
10324: PUSH
10325: LD_INT 113
10327: PUSH
10328: LD_INT 114
10330: PUSH
10331: LD_INT 116
10333: PUSH
10334: LD_INT 117
10336: PUSH
10337: LD_INT 118
10339: PUSH
10340: EMPTY
10341: LIST
10342: LIST
10343: LIST
10344: LIST
10345: LIST
10346: LIST
10347: LIST
10348: LIST
10349: LIST
10350: LIST
10351: LIST
10352: LIST
10353: LIST
10354: LIST
10355: LIST
10356: LIST
10357: LIST
10358: PUSH
10359: EMPTY
10360: LIST
10361: LIST
10362: ST_TO_ADDR
10363: GO 11818
10365: LD_INT 13
10367: DOUBLE
10368: EQUAL
10369: IFTRUE 10373
10371: GO 10581
10373: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
10374: LD_ADDR_VAR 0 2
10378: PUSH
10379: LD_INT 1
10381: PUSH
10382: LD_INT 2
10384: PUSH
10385: LD_INT 3
10387: PUSH
10388: LD_INT 4
10390: PUSH
10391: LD_INT 5
10393: PUSH
10394: LD_INT 8
10396: PUSH
10397: LD_INT 9
10399: PUSH
10400: LD_INT 10
10402: PUSH
10403: LD_INT 11
10405: PUSH
10406: LD_INT 12
10408: PUSH
10409: LD_INT 14
10411: PUSH
10412: LD_INT 15
10414: PUSH
10415: LD_INT 16
10417: PUSH
10418: LD_INT 17
10420: PUSH
10421: LD_INT 18
10423: PUSH
10424: LD_INT 19
10426: PUSH
10427: LD_INT 20
10429: PUSH
10430: LD_INT 21
10432: PUSH
10433: LD_INT 22
10435: PUSH
10436: LD_INT 23
10438: PUSH
10439: LD_INT 24
10441: PUSH
10442: LD_INT 25
10444: PUSH
10445: LD_INT 26
10447: PUSH
10448: LD_INT 27
10450: PUSH
10451: LD_INT 28
10453: PUSH
10454: LD_INT 30
10456: PUSH
10457: LD_INT 31
10459: PUSH
10460: LD_INT 32
10462: PUSH
10463: LD_INT 33
10465: PUSH
10466: LD_INT 34
10468: PUSH
10469: LD_INT 36
10471: PUSH
10472: EMPTY
10473: LIST
10474: LIST
10475: LIST
10476: LIST
10477: LIST
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: LIST
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: LIST
10492: LIST
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: LIST
10499: LIST
10500: LIST
10501: LIST
10502: LIST
10503: LIST
10504: PUSH
10505: LD_INT 101
10507: PUSH
10508: LD_INT 102
10510: PUSH
10511: LD_INT 103
10513: PUSH
10514: LD_INT 104
10516: PUSH
10517: LD_INT 105
10519: PUSH
10520: LD_INT 106
10522: PUSH
10523: LD_INT 107
10525: PUSH
10526: LD_INT 108
10528: PUSH
10529: LD_INT 109
10531: PUSH
10532: LD_INT 110
10534: PUSH
10535: LD_INT 111
10537: PUSH
10538: LD_INT 112
10540: PUSH
10541: LD_INT 113
10543: PUSH
10544: LD_INT 114
10546: PUSH
10547: LD_INT 116
10549: PUSH
10550: LD_INT 117
10552: PUSH
10553: LD_INT 118
10555: PUSH
10556: EMPTY
10557: LIST
10558: LIST
10559: LIST
10560: LIST
10561: LIST
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: LIST
10574: PUSH
10575: EMPTY
10576: LIST
10577: LIST
10578: ST_TO_ADDR
10579: GO 11818
10581: LD_INT 14
10583: DOUBLE
10584: EQUAL
10585: IFTRUE 10589
10587: GO 10813
10589: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
10590: LD_ADDR_VAR 0 2
10594: PUSH
10595: LD_INT 1
10597: PUSH
10598: LD_INT 2
10600: PUSH
10601: LD_INT 3
10603: PUSH
10604: LD_INT 4
10606: PUSH
10607: LD_INT 5
10609: PUSH
10610: LD_INT 6
10612: PUSH
10613: LD_INT 7
10615: PUSH
10616: LD_INT 8
10618: PUSH
10619: LD_INT 9
10621: PUSH
10622: LD_INT 10
10624: PUSH
10625: LD_INT 11
10627: PUSH
10628: LD_INT 12
10630: PUSH
10631: LD_INT 13
10633: PUSH
10634: LD_INT 14
10636: PUSH
10637: LD_INT 15
10639: PUSH
10640: LD_INT 16
10642: PUSH
10643: LD_INT 17
10645: PUSH
10646: LD_INT 18
10648: PUSH
10649: LD_INT 19
10651: PUSH
10652: LD_INT 20
10654: PUSH
10655: LD_INT 21
10657: PUSH
10658: LD_INT 22
10660: PUSH
10661: LD_INT 23
10663: PUSH
10664: LD_INT 24
10666: PUSH
10667: LD_INT 25
10669: PUSH
10670: LD_INT 26
10672: PUSH
10673: LD_INT 27
10675: PUSH
10676: LD_INT 28
10678: PUSH
10679: LD_INT 29
10681: PUSH
10682: LD_INT 30
10684: PUSH
10685: LD_INT 31
10687: PUSH
10688: LD_INT 32
10690: PUSH
10691: LD_INT 33
10693: PUSH
10694: LD_INT 34
10696: PUSH
10697: LD_INT 36
10699: PUSH
10700: EMPTY
10701: LIST
10702: LIST
10703: LIST
10704: LIST
10705: LIST
10706: LIST
10707: LIST
10708: LIST
10709: LIST
10710: LIST
10711: LIST
10712: LIST
10713: LIST
10714: LIST
10715: LIST
10716: LIST
10717: LIST
10718: LIST
10719: LIST
10720: LIST
10721: LIST
10722: LIST
10723: LIST
10724: LIST
10725: LIST
10726: LIST
10727: LIST
10728: LIST
10729: LIST
10730: LIST
10731: LIST
10732: LIST
10733: LIST
10734: LIST
10735: LIST
10736: PUSH
10737: LD_INT 101
10739: PUSH
10740: LD_INT 102
10742: PUSH
10743: LD_INT 103
10745: PUSH
10746: LD_INT 104
10748: PUSH
10749: LD_INT 105
10751: PUSH
10752: LD_INT 106
10754: PUSH
10755: LD_INT 107
10757: PUSH
10758: LD_INT 108
10760: PUSH
10761: LD_INT 109
10763: PUSH
10764: LD_INT 110
10766: PUSH
10767: LD_INT 111
10769: PUSH
10770: LD_INT 112
10772: PUSH
10773: LD_INT 113
10775: PUSH
10776: LD_INT 114
10778: PUSH
10779: LD_INT 116
10781: PUSH
10782: LD_INT 117
10784: PUSH
10785: LD_INT 118
10787: PUSH
10788: EMPTY
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: LIST
10797: LIST
10798: LIST
10799: LIST
10800: LIST
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: PUSH
10807: EMPTY
10808: LIST
10809: LIST
10810: ST_TO_ADDR
10811: GO 11818
10813: LD_INT 15
10815: DOUBLE
10816: EQUAL
10817: IFTRUE 10821
10819: GO 11045
10821: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
10822: LD_ADDR_VAR 0 2
10826: PUSH
10827: LD_INT 1
10829: PUSH
10830: LD_INT 2
10832: PUSH
10833: LD_INT 3
10835: PUSH
10836: LD_INT 4
10838: PUSH
10839: LD_INT 5
10841: PUSH
10842: LD_INT 6
10844: PUSH
10845: LD_INT 7
10847: PUSH
10848: LD_INT 8
10850: PUSH
10851: LD_INT 9
10853: PUSH
10854: LD_INT 10
10856: PUSH
10857: LD_INT 11
10859: PUSH
10860: LD_INT 12
10862: PUSH
10863: LD_INT 13
10865: PUSH
10866: LD_INT 14
10868: PUSH
10869: LD_INT 15
10871: PUSH
10872: LD_INT 16
10874: PUSH
10875: LD_INT 17
10877: PUSH
10878: LD_INT 18
10880: PUSH
10881: LD_INT 19
10883: PUSH
10884: LD_INT 20
10886: PUSH
10887: LD_INT 21
10889: PUSH
10890: LD_INT 22
10892: PUSH
10893: LD_INT 23
10895: PUSH
10896: LD_INT 24
10898: PUSH
10899: LD_INT 25
10901: PUSH
10902: LD_INT 26
10904: PUSH
10905: LD_INT 27
10907: PUSH
10908: LD_INT 28
10910: PUSH
10911: LD_INT 29
10913: PUSH
10914: LD_INT 30
10916: PUSH
10917: LD_INT 31
10919: PUSH
10920: LD_INT 32
10922: PUSH
10923: LD_INT 33
10925: PUSH
10926: LD_INT 34
10928: PUSH
10929: LD_INT 36
10931: PUSH
10932: EMPTY
10933: LIST
10934: LIST
10935: LIST
10936: LIST
10937: LIST
10938: LIST
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: LIST
10953: LIST
10954: LIST
10955: LIST
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: LIST
10961: LIST
10962: LIST
10963: LIST
10964: LIST
10965: LIST
10966: LIST
10967: LIST
10968: PUSH
10969: LD_INT 101
10971: PUSH
10972: LD_INT 102
10974: PUSH
10975: LD_INT 103
10977: PUSH
10978: LD_INT 104
10980: PUSH
10981: LD_INT 105
10983: PUSH
10984: LD_INT 106
10986: PUSH
10987: LD_INT 107
10989: PUSH
10990: LD_INT 108
10992: PUSH
10993: LD_INT 109
10995: PUSH
10996: LD_INT 110
10998: PUSH
10999: LD_INT 111
11001: PUSH
11002: LD_INT 112
11004: PUSH
11005: LD_INT 113
11007: PUSH
11008: LD_INT 114
11010: PUSH
11011: LD_INT 116
11013: PUSH
11014: LD_INT 117
11016: PUSH
11017: LD_INT 118
11019: PUSH
11020: EMPTY
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: PUSH
11039: EMPTY
11040: LIST
11041: LIST
11042: ST_TO_ADDR
11043: GO 11818
11045: LD_INT 16
11047: DOUBLE
11048: EQUAL
11049: IFTRUE 11053
11051: GO 11189
11053: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11054: LD_ADDR_VAR 0 2
11058: PUSH
11059: LD_INT 2
11061: PUSH
11062: LD_INT 4
11064: PUSH
11065: LD_INT 5
11067: PUSH
11068: LD_INT 7
11070: PUSH
11071: LD_INT 11
11073: PUSH
11074: LD_INT 12
11076: PUSH
11077: LD_INT 15
11079: PUSH
11080: LD_INT 16
11082: PUSH
11083: LD_INT 20
11085: PUSH
11086: LD_INT 21
11088: PUSH
11089: LD_INT 22
11091: PUSH
11092: LD_INT 23
11094: PUSH
11095: LD_INT 25
11097: PUSH
11098: LD_INT 26
11100: PUSH
11101: LD_INT 30
11103: PUSH
11104: LD_INT 31
11106: PUSH
11107: LD_INT 32
11109: PUSH
11110: LD_INT 33
11112: PUSH
11113: LD_INT 34
11115: PUSH
11116: EMPTY
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: LIST
11124: LIST
11125: LIST
11126: LIST
11127: LIST
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: LIST
11135: LIST
11136: PUSH
11137: LD_INT 101
11139: PUSH
11140: LD_INT 102
11142: PUSH
11143: LD_INT 103
11145: PUSH
11146: LD_INT 106
11148: PUSH
11149: LD_INT 108
11151: PUSH
11152: LD_INT 112
11154: PUSH
11155: LD_INT 113
11157: PUSH
11158: LD_INT 114
11160: PUSH
11161: LD_INT 116
11163: PUSH
11164: LD_INT 117
11166: PUSH
11167: LD_INT 118
11169: PUSH
11170: EMPTY
11171: LIST
11172: LIST
11173: LIST
11174: LIST
11175: LIST
11176: LIST
11177: LIST
11178: LIST
11179: LIST
11180: LIST
11181: LIST
11182: PUSH
11183: EMPTY
11184: LIST
11185: LIST
11186: ST_TO_ADDR
11187: GO 11818
11189: LD_INT 17
11191: DOUBLE
11192: EQUAL
11193: IFTRUE 11197
11195: GO 11421
11197: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
11198: LD_ADDR_VAR 0 2
11202: PUSH
11203: LD_INT 1
11205: PUSH
11206: LD_INT 2
11208: PUSH
11209: LD_INT 3
11211: PUSH
11212: LD_INT 4
11214: PUSH
11215: LD_INT 5
11217: PUSH
11218: LD_INT 6
11220: PUSH
11221: LD_INT 7
11223: PUSH
11224: LD_INT 8
11226: PUSH
11227: LD_INT 9
11229: PUSH
11230: LD_INT 10
11232: PUSH
11233: LD_INT 11
11235: PUSH
11236: LD_INT 12
11238: PUSH
11239: LD_INT 13
11241: PUSH
11242: LD_INT 14
11244: PUSH
11245: LD_INT 15
11247: PUSH
11248: LD_INT 16
11250: PUSH
11251: LD_INT 17
11253: PUSH
11254: LD_INT 18
11256: PUSH
11257: LD_INT 19
11259: PUSH
11260: LD_INT 20
11262: PUSH
11263: LD_INT 21
11265: PUSH
11266: LD_INT 22
11268: PUSH
11269: LD_INT 23
11271: PUSH
11272: LD_INT 24
11274: PUSH
11275: LD_INT 25
11277: PUSH
11278: LD_INT 26
11280: PUSH
11281: LD_INT 27
11283: PUSH
11284: LD_INT 28
11286: PUSH
11287: LD_INT 29
11289: PUSH
11290: LD_INT 30
11292: PUSH
11293: LD_INT 31
11295: PUSH
11296: LD_INT 32
11298: PUSH
11299: LD_INT 33
11301: PUSH
11302: LD_INT 34
11304: PUSH
11305: LD_INT 36
11307: PUSH
11308: EMPTY
11309: LIST
11310: LIST
11311: LIST
11312: LIST
11313: LIST
11314: LIST
11315: LIST
11316: LIST
11317: LIST
11318: LIST
11319: LIST
11320: LIST
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: LIST
11342: LIST
11343: LIST
11344: PUSH
11345: LD_INT 101
11347: PUSH
11348: LD_INT 102
11350: PUSH
11351: LD_INT 103
11353: PUSH
11354: LD_INT 104
11356: PUSH
11357: LD_INT 105
11359: PUSH
11360: LD_INT 106
11362: PUSH
11363: LD_INT 107
11365: PUSH
11366: LD_INT 108
11368: PUSH
11369: LD_INT 109
11371: PUSH
11372: LD_INT 110
11374: PUSH
11375: LD_INT 111
11377: PUSH
11378: LD_INT 112
11380: PUSH
11381: LD_INT 113
11383: PUSH
11384: LD_INT 114
11386: PUSH
11387: LD_INT 116
11389: PUSH
11390: LD_INT 117
11392: PUSH
11393: LD_INT 118
11395: PUSH
11396: EMPTY
11397: LIST
11398: LIST
11399: LIST
11400: LIST
11401: LIST
11402: LIST
11403: LIST
11404: LIST
11405: LIST
11406: LIST
11407: LIST
11408: LIST
11409: LIST
11410: LIST
11411: LIST
11412: LIST
11413: LIST
11414: PUSH
11415: EMPTY
11416: LIST
11417: LIST
11418: ST_TO_ADDR
11419: GO 11818
11421: LD_INT 18
11423: DOUBLE
11424: EQUAL
11425: IFTRUE 11429
11427: GO 11577
11429: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
11430: LD_ADDR_VAR 0 2
11434: PUSH
11435: LD_INT 2
11437: PUSH
11438: LD_INT 4
11440: PUSH
11441: LD_INT 5
11443: PUSH
11444: LD_INT 7
11446: PUSH
11447: LD_INT 11
11449: PUSH
11450: LD_INT 12
11452: PUSH
11453: LD_INT 15
11455: PUSH
11456: LD_INT 16
11458: PUSH
11459: LD_INT 20
11461: PUSH
11462: LD_INT 21
11464: PUSH
11465: LD_INT 22
11467: PUSH
11468: LD_INT 23
11470: PUSH
11471: LD_INT 25
11473: PUSH
11474: LD_INT 26
11476: PUSH
11477: LD_INT 30
11479: PUSH
11480: LD_INT 31
11482: PUSH
11483: LD_INT 32
11485: PUSH
11486: LD_INT 33
11488: PUSH
11489: LD_INT 34
11491: PUSH
11492: LD_INT 35
11494: PUSH
11495: LD_INT 36
11497: PUSH
11498: EMPTY
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: LIST
11507: LIST
11508: LIST
11509: LIST
11510: LIST
11511: LIST
11512: LIST
11513: LIST
11514: LIST
11515: LIST
11516: LIST
11517: LIST
11518: LIST
11519: LIST
11520: PUSH
11521: LD_INT 101
11523: PUSH
11524: LD_INT 102
11526: PUSH
11527: LD_INT 103
11529: PUSH
11530: LD_INT 106
11532: PUSH
11533: LD_INT 108
11535: PUSH
11536: LD_INT 112
11538: PUSH
11539: LD_INT 113
11541: PUSH
11542: LD_INT 114
11544: PUSH
11545: LD_INT 115
11547: PUSH
11548: LD_INT 116
11550: PUSH
11551: LD_INT 117
11553: PUSH
11554: LD_INT 118
11556: PUSH
11557: EMPTY
11558: LIST
11559: LIST
11560: LIST
11561: LIST
11562: LIST
11563: LIST
11564: LIST
11565: LIST
11566: LIST
11567: LIST
11568: LIST
11569: LIST
11570: PUSH
11571: EMPTY
11572: LIST
11573: LIST
11574: ST_TO_ADDR
11575: GO 11818
11577: LD_INT 19
11579: DOUBLE
11580: EQUAL
11581: IFTRUE 11585
11583: GO 11817
11585: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
11586: LD_ADDR_VAR 0 2
11590: PUSH
11591: LD_INT 1
11593: PUSH
11594: LD_INT 2
11596: PUSH
11597: LD_INT 3
11599: PUSH
11600: LD_INT 4
11602: PUSH
11603: LD_INT 5
11605: PUSH
11606: LD_INT 6
11608: PUSH
11609: LD_INT 7
11611: PUSH
11612: LD_INT 8
11614: PUSH
11615: LD_INT 9
11617: PUSH
11618: LD_INT 10
11620: PUSH
11621: LD_INT 11
11623: PUSH
11624: LD_INT 12
11626: PUSH
11627: LD_INT 13
11629: PUSH
11630: LD_INT 14
11632: PUSH
11633: LD_INT 15
11635: PUSH
11636: LD_INT 16
11638: PUSH
11639: LD_INT 17
11641: PUSH
11642: LD_INT 18
11644: PUSH
11645: LD_INT 19
11647: PUSH
11648: LD_INT 20
11650: PUSH
11651: LD_INT 21
11653: PUSH
11654: LD_INT 22
11656: PUSH
11657: LD_INT 23
11659: PUSH
11660: LD_INT 24
11662: PUSH
11663: LD_INT 25
11665: PUSH
11666: LD_INT 26
11668: PUSH
11669: LD_INT 27
11671: PUSH
11672: LD_INT 28
11674: PUSH
11675: LD_INT 29
11677: PUSH
11678: LD_INT 30
11680: PUSH
11681: LD_INT 31
11683: PUSH
11684: LD_INT 32
11686: PUSH
11687: LD_INT 33
11689: PUSH
11690: LD_INT 34
11692: PUSH
11693: LD_INT 35
11695: PUSH
11696: LD_INT 36
11698: PUSH
11699: EMPTY
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: LIST
11711: LIST
11712: LIST
11713: LIST
11714: LIST
11715: LIST
11716: LIST
11717: LIST
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: PUSH
11737: LD_INT 101
11739: PUSH
11740: LD_INT 102
11742: PUSH
11743: LD_INT 103
11745: PUSH
11746: LD_INT 104
11748: PUSH
11749: LD_INT 105
11751: PUSH
11752: LD_INT 106
11754: PUSH
11755: LD_INT 107
11757: PUSH
11758: LD_INT 108
11760: PUSH
11761: LD_INT 109
11763: PUSH
11764: LD_INT 110
11766: PUSH
11767: LD_INT 111
11769: PUSH
11770: LD_INT 112
11772: PUSH
11773: LD_INT 113
11775: PUSH
11776: LD_INT 114
11778: PUSH
11779: LD_INT 115
11781: PUSH
11782: LD_INT 116
11784: PUSH
11785: LD_INT 117
11787: PUSH
11788: LD_INT 118
11790: PUSH
11791: EMPTY
11792: LIST
11793: LIST
11794: LIST
11795: LIST
11796: LIST
11797: LIST
11798: LIST
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: LIST
11804: LIST
11805: LIST
11806: LIST
11807: LIST
11808: LIST
11809: LIST
11810: PUSH
11811: EMPTY
11812: LIST
11813: LIST
11814: ST_TO_ADDR
11815: GO 11818
11817: POP
// end else
11818: GO 12049
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
11820: LD_ADDR_VAR 0 2
11824: PUSH
11825: LD_INT 1
11827: PUSH
11828: LD_INT 2
11830: PUSH
11831: LD_INT 3
11833: PUSH
11834: LD_INT 4
11836: PUSH
11837: LD_INT 5
11839: PUSH
11840: LD_INT 6
11842: PUSH
11843: LD_INT 7
11845: PUSH
11846: LD_INT 8
11848: PUSH
11849: LD_INT 9
11851: PUSH
11852: LD_INT 10
11854: PUSH
11855: LD_INT 11
11857: PUSH
11858: LD_INT 12
11860: PUSH
11861: LD_INT 13
11863: PUSH
11864: LD_INT 14
11866: PUSH
11867: LD_INT 15
11869: PUSH
11870: LD_INT 16
11872: PUSH
11873: LD_INT 17
11875: PUSH
11876: LD_INT 18
11878: PUSH
11879: LD_INT 19
11881: PUSH
11882: LD_INT 20
11884: PUSH
11885: LD_INT 21
11887: PUSH
11888: LD_INT 22
11890: PUSH
11891: LD_INT 23
11893: PUSH
11894: LD_INT 24
11896: PUSH
11897: LD_INT 25
11899: PUSH
11900: LD_INT 26
11902: PUSH
11903: LD_INT 27
11905: PUSH
11906: LD_INT 28
11908: PUSH
11909: LD_INT 29
11911: PUSH
11912: LD_INT 30
11914: PUSH
11915: LD_INT 31
11917: PUSH
11918: LD_INT 32
11920: PUSH
11921: LD_INT 33
11923: PUSH
11924: LD_INT 34
11926: PUSH
11927: LD_INT 35
11929: PUSH
11930: LD_INT 36
11932: PUSH
11933: EMPTY
11934: LIST
11935: LIST
11936: LIST
11937: LIST
11938: LIST
11939: LIST
11940: LIST
11941: LIST
11942: LIST
11943: LIST
11944: LIST
11945: LIST
11946: LIST
11947: LIST
11948: LIST
11949: LIST
11950: LIST
11951: LIST
11952: LIST
11953: LIST
11954: LIST
11955: LIST
11956: LIST
11957: LIST
11958: LIST
11959: LIST
11960: LIST
11961: LIST
11962: LIST
11963: LIST
11964: LIST
11965: LIST
11966: LIST
11967: LIST
11968: LIST
11969: LIST
11970: PUSH
11971: LD_INT 101
11973: PUSH
11974: LD_INT 102
11976: PUSH
11977: LD_INT 103
11979: PUSH
11980: LD_INT 104
11982: PUSH
11983: LD_INT 105
11985: PUSH
11986: LD_INT 106
11988: PUSH
11989: LD_INT 107
11991: PUSH
11992: LD_INT 108
11994: PUSH
11995: LD_INT 109
11997: PUSH
11998: LD_INT 110
12000: PUSH
12001: LD_INT 111
12003: PUSH
12004: LD_INT 112
12006: PUSH
12007: LD_INT 113
12009: PUSH
12010: LD_INT 114
12012: PUSH
12013: LD_INT 115
12015: PUSH
12016: LD_INT 116
12018: PUSH
12019: LD_INT 117
12021: PUSH
12022: LD_INT 118
12024: PUSH
12025: EMPTY
12026: LIST
12027: LIST
12028: LIST
12029: LIST
12030: LIST
12031: LIST
12032: LIST
12033: LIST
12034: LIST
12035: LIST
12036: LIST
12037: LIST
12038: LIST
12039: LIST
12040: LIST
12041: LIST
12042: LIST
12043: LIST
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: ST_TO_ADDR
// if result then
12049: LD_VAR 0 2
12053: IFFALSE 12839
// begin normal :=  ;
12055: LD_ADDR_VAR 0 5
12059: PUSH
12060: LD_STRING 
12062: ST_TO_ADDR
// hardcore :=  ;
12063: LD_ADDR_VAR 0 6
12067: PUSH
12068: LD_STRING 
12070: ST_TO_ADDR
// active :=  ;
12071: LD_ADDR_VAR 0 7
12075: PUSH
12076: LD_STRING 
12078: ST_TO_ADDR
// for i = 1 to normalCounter do
12079: LD_ADDR_VAR 0 8
12083: PUSH
12084: DOUBLE
12085: LD_INT 1
12087: DEC
12088: ST_TO_ADDR
12089: LD_EXP 30
12093: PUSH
12094: FOR_TO
12095: IFFALSE 12196
// begin tmp := 0 ;
12097: LD_ADDR_VAR 0 3
12101: PUSH
12102: LD_STRING 0
12104: ST_TO_ADDR
// if result [ 1 ] then
12105: LD_VAR 0 2
12109: PUSH
12110: LD_INT 1
12112: ARRAY
12113: IFFALSE 12178
// if result [ 1 ] [ 1 ] = i then
12115: LD_VAR 0 2
12119: PUSH
12120: LD_INT 1
12122: ARRAY
12123: PUSH
12124: LD_INT 1
12126: ARRAY
12127: PUSH
12128: LD_VAR 0 8
12132: EQUAL
12133: IFFALSE 12178
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12135: LD_ADDR_VAR 0 2
12139: PUSH
12140: LD_VAR 0 2
12144: PPUSH
12145: LD_INT 1
12147: PPUSH
12148: LD_VAR 0 2
12152: PUSH
12153: LD_INT 1
12155: ARRAY
12156: PPUSH
12157: LD_INT 1
12159: PPUSH
12160: CALL_OW 3
12164: PPUSH
12165: CALL_OW 1
12169: ST_TO_ADDR
// tmp := 1 ;
12170: LD_ADDR_VAR 0 3
12174: PUSH
12175: LD_STRING 1
12177: ST_TO_ADDR
// end ; normal := normal & tmp ;
12178: LD_ADDR_VAR 0 5
12182: PUSH
12183: LD_VAR 0 5
12187: PUSH
12188: LD_VAR 0 3
12192: STR
12193: ST_TO_ADDR
// end ;
12194: GO 12094
12196: POP
12197: POP
// for i = 1 to hardcoreCounter do
12198: LD_ADDR_VAR 0 8
12202: PUSH
12203: DOUBLE
12204: LD_INT 1
12206: DEC
12207: ST_TO_ADDR
12208: LD_EXP 31
12212: PUSH
12213: FOR_TO
12214: IFFALSE 12319
// begin tmp := 0 ;
12216: LD_ADDR_VAR 0 3
12220: PUSH
12221: LD_STRING 0
12223: ST_TO_ADDR
// if result [ 2 ] then
12224: LD_VAR 0 2
12228: PUSH
12229: LD_INT 2
12231: ARRAY
12232: IFFALSE 12301
// if result [ 2 ] [ 1 ] = 100 + i then
12234: LD_VAR 0 2
12238: PUSH
12239: LD_INT 2
12241: ARRAY
12242: PUSH
12243: LD_INT 1
12245: ARRAY
12246: PUSH
12247: LD_INT 100
12249: PUSH
12250: LD_VAR 0 8
12254: PLUS
12255: EQUAL
12256: IFFALSE 12301
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12258: LD_ADDR_VAR 0 2
12262: PUSH
12263: LD_VAR 0 2
12267: PPUSH
12268: LD_INT 2
12270: PPUSH
12271: LD_VAR 0 2
12275: PUSH
12276: LD_INT 2
12278: ARRAY
12279: PPUSH
12280: LD_INT 1
12282: PPUSH
12283: CALL_OW 3
12287: PPUSH
12288: CALL_OW 1
12292: ST_TO_ADDR
// tmp := 1 ;
12293: LD_ADDR_VAR 0 3
12297: PUSH
12298: LD_STRING 1
12300: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12301: LD_ADDR_VAR 0 6
12305: PUSH
12306: LD_VAR 0 6
12310: PUSH
12311: LD_VAR 0 3
12315: STR
12316: ST_TO_ADDR
// end ;
12317: GO 12213
12319: POP
12320: POP
// if isGameLoad then
12321: LD_VAR 0 1
12325: IFFALSE 12800
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
12327: LD_ADDR_VAR 0 4
12331: PUSH
12332: LD_EXP 34
12336: PUSH
12337: LD_EXP 33
12341: PUSH
12342: LD_EXP 35
12346: PUSH
12347: LD_EXP 32
12351: PUSH
12352: LD_EXP 36
12356: PUSH
12357: LD_EXP 37
12361: PUSH
12362: LD_EXP 38
12366: PUSH
12367: LD_EXP 39
12371: PUSH
12372: LD_EXP 40
12376: PUSH
12377: LD_EXP 41
12381: PUSH
12382: LD_EXP 42
12386: PUSH
12387: LD_EXP 43
12391: PUSH
12392: LD_EXP 44
12396: PUSH
12397: LD_EXP 45
12401: PUSH
12402: LD_EXP 53
12406: PUSH
12407: LD_EXP 54
12411: PUSH
12412: LD_EXP 55
12416: PUSH
12417: LD_EXP 56
12421: PUSH
12422: LD_EXP 58
12426: PUSH
12427: LD_EXP 59
12431: PUSH
12432: LD_EXP 60
12436: PUSH
12437: LD_EXP 63
12441: PUSH
12442: LD_EXP 65
12446: PUSH
12447: LD_EXP 66
12451: PUSH
12452: LD_EXP 67
12456: PUSH
12457: LD_EXP 69
12461: PUSH
12462: LD_EXP 70
12466: PUSH
12467: LD_EXP 73
12471: PUSH
12472: LD_EXP 74
12476: PUSH
12477: LD_EXP 75
12481: PUSH
12482: LD_EXP 76
12486: PUSH
12487: LD_EXP 77
12491: PUSH
12492: LD_EXP 78
12496: PUSH
12497: LD_EXP 79
12501: PUSH
12502: LD_EXP 80
12506: PUSH
12507: LD_EXP 81
12511: PUSH
12512: LD_EXP 46
12516: PUSH
12517: LD_EXP 47
12521: PUSH
12522: LD_EXP 50
12526: PUSH
12527: LD_EXP 51
12531: PUSH
12532: LD_EXP 52
12536: PUSH
12537: LD_EXP 48
12541: PUSH
12542: LD_EXP 49
12546: PUSH
12547: LD_EXP 57
12551: PUSH
12552: LD_EXP 61
12556: PUSH
12557: LD_EXP 62
12561: PUSH
12562: LD_EXP 64
12566: PUSH
12567: LD_EXP 68
12571: PUSH
12572: LD_EXP 71
12576: PUSH
12577: LD_EXP 72
12581: PUSH
12582: LD_EXP 82
12586: PUSH
12587: LD_EXP 83
12591: PUSH
12592: LD_EXP 84
12596: PUSH
12597: LD_EXP 85
12601: PUSH
12602: EMPTY
12603: LIST
12604: LIST
12605: LIST
12606: LIST
12607: LIST
12608: LIST
12609: LIST
12610: LIST
12611: LIST
12612: LIST
12613: LIST
12614: LIST
12615: LIST
12616: LIST
12617: LIST
12618: LIST
12619: LIST
12620: LIST
12621: LIST
12622: LIST
12623: LIST
12624: LIST
12625: LIST
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: LIST
12631: LIST
12632: LIST
12633: LIST
12634: LIST
12635: LIST
12636: LIST
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: LIST
12643: LIST
12644: LIST
12645: LIST
12646: LIST
12647: LIST
12648: LIST
12649: LIST
12650: LIST
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: LIST
12656: LIST
12657: ST_TO_ADDR
// tmp :=  ;
12658: LD_ADDR_VAR 0 3
12662: PUSH
12663: LD_STRING 
12665: ST_TO_ADDR
// for i = 1 to normalCounter do
12666: LD_ADDR_VAR 0 8
12670: PUSH
12671: DOUBLE
12672: LD_INT 1
12674: DEC
12675: ST_TO_ADDR
12676: LD_EXP 30
12680: PUSH
12681: FOR_TO
12682: IFFALSE 12718
// begin if flags [ i ] then
12684: LD_VAR 0 4
12688: PUSH
12689: LD_VAR 0 8
12693: ARRAY
12694: IFFALSE 12716
// tmp := tmp & i & ; ;
12696: LD_ADDR_VAR 0 3
12700: PUSH
12701: LD_VAR 0 3
12705: PUSH
12706: LD_VAR 0 8
12710: STR
12711: PUSH
12712: LD_STRING ;
12714: STR
12715: ST_TO_ADDR
// end ;
12716: GO 12681
12718: POP
12719: POP
// for i = 1 to hardcoreCounter do
12720: LD_ADDR_VAR 0 8
12724: PUSH
12725: DOUBLE
12726: LD_INT 1
12728: DEC
12729: ST_TO_ADDR
12730: LD_EXP 31
12734: PUSH
12735: FOR_TO
12736: IFFALSE 12782
// begin if flags [ normalCounter + i ] then
12738: LD_VAR 0 4
12742: PUSH
12743: LD_EXP 30
12747: PUSH
12748: LD_VAR 0 8
12752: PLUS
12753: ARRAY
12754: IFFALSE 12780
// tmp := tmp & ( 100 + i ) & ; ;
12756: LD_ADDR_VAR 0 3
12760: PUSH
12761: LD_VAR 0 3
12765: PUSH
12766: LD_INT 100
12768: PUSH
12769: LD_VAR 0 8
12773: PLUS
12774: STR
12775: PUSH
12776: LD_STRING ;
12778: STR
12779: ST_TO_ADDR
// end ;
12780: GO 12735
12782: POP
12783: POP
// if tmp then
12784: LD_VAR 0 3
12788: IFFALSE 12800
// active := tmp ;
12790: LD_ADDR_VAR 0 7
12794: PUSH
12795: LD_VAR 0 3
12799: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
12800: LD_STRING getStreamItemsFromMission("
12802: PUSH
12803: LD_VAR 0 5
12807: STR
12808: PUSH
12809: LD_STRING ","
12811: STR
12812: PUSH
12813: LD_VAR 0 6
12817: STR
12818: PUSH
12819: LD_STRING ","
12821: STR
12822: PUSH
12823: LD_VAR 0 7
12827: STR
12828: PUSH
12829: LD_STRING ")
12831: STR
12832: PPUSH
12833: CALL_OW 559
// end else
12837: GO 12846
// ToLua ( getStreamItemsFromMission("","","") ) ;
12839: LD_STRING getStreamItemsFromMission("","","")
12841: PPUSH
12842: CALL_OW 559
// end ;
12846: LD_VAR 0 2
12850: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
12851: LD_EXP 29
12855: PUSH
12856: LD_EXP 34
12860: AND
12861: IFFALSE 12985
12863: GO 12865
12865: DISABLE
12866: LD_INT 0
12868: PPUSH
12869: PPUSH
// begin enable ;
12870: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
12871: LD_ADDR_VAR 0 2
12875: PUSH
12876: LD_INT 22
12878: PUSH
12879: LD_OWVAR 2
12883: PUSH
12884: EMPTY
12885: LIST
12886: LIST
12887: PUSH
12888: LD_INT 2
12890: PUSH
12891: LD_INT 34
12893: PUSH
12894: LD_INT 7
12896: PUSH
12897: EMPTY
12898: LIST
12899: LIST
12900: PUSH
12901: LD_INT 34
12903: PUSH
12904: LD_INT 45
12906: PUSH
12907: EMPTY
12908: LIST
12909: LIST
12910: PUSH
12911: LD_INT 34
12913: PUSH
12914: LD_INT 28
12916: PUSH
12917: EMPTY
12918: LIST
12919: LIST
12920: PUSH
12921: LD_INT 34
12923: PUSH
12924: LD_INT 47
12926: PUSH
12927: EMPTY
12928: LIST
12929: LIST
12930: PUSH
12931: EMPTY
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: LIST
12937: PUSH
12938: EMPTY
12939: LIST
12940: LIST
12941: PPUSH
12942: CALL_OW 69
12946: ST_TO_ADDR
// if not tmp then
12947: LD_VAR 0 2
12951: NOT
12952: IFFALSE 12956
// exit ;
12954: GO 12985
// for i in tmp do
12956: LD_ADDR_VAR 0 1
12960: PUSH
12961: LD_VAR 0 2
12965: PUSH
12966: FOR_IN
12967: IFFALSE 12983
// begin SetLives ( i , 0 ) ;
12969: LD_VAR 0 1
12973: PPUSH
12974: LD_INT 0
12976: PPUSH
12977: CALL_OW 234
// end ;
12981: GO 12966
12983: POP
12984: POP
// end ;
12985: PPOPN 2
12987: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
12988: LD_EXP 29
12992: PUSH
12993: LD_EXP 35
12997: AND
12998: IFFALSE 13082
13000: GO 13002
13002: DISABLE
13003: LD_INT 0
13005: PPUSH
13006: PPUSH
// begin enable ;
13007: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13008: LD_ADDR_VAR 0 2
13012: PUSH
13013: LD_INT 22
13015: PUSH
13016: LD_OWVAR 2
13020: PUSH
13021: EMPTY
13022: LIST
13023: LIST
13024: PUSH
13025: LD_INT 32
13027: PUSH
13028: LD_INT 3
13030: PUSH
13031: EMPTY
13032: LIST
13033: LIST
13034: PUSH
13035: EMPTY
13036: LIST
13037: LIST
13038: PPUSH
13039: CALL_OW 69
13043: ST_TO_ADDR
// if not tmp then
13044: LD_VAR 0 2
13048: NOT
13049: IFFALSE 13053
// exit ;
13051: GO 13082
// for i in tmp do
13053: LD_ADDR_VAR 0 1
13057: PUSH
13058: LD_VAR 0 2
13062: PUSH
13063: FOR_IN
13064: IFFALSE 13080
// begin SetLives ( i , 0 ) ;
13066: LD_VAR 0 1
13070: PPUSH
13071: LD_INT 0
13073: PPUSH
13074: CALL_OW 234
// end ;
13078: GO 13063
13080: POP
13081: POP
// end ;
13082: PPOPN 2
13084: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13085: LD_EXP 29
13089: PUSH
13090: LD_EXP 32
13094: AND
13095: IFFALSE 13188
13097: GO 13099
13099: DISABLE
13100: LD_INT 0
13102: PPUSH
// begin enable ;
13103: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13104: LD_ADDR_VAR 0 1
13108: PUSH
13109: LD_INT 22
13111: PUSH
13112: LD_OWVAR 2
13116: PUSH
13117: EMPTY
13118: LIST
13119: LIST
13120: PUSH
13121: LD_INT 2
13123: PUSH
13124: LD_INT 25
13126: PUSH
13127: LD_INT 5
13129: PUSH
13130: EMPTY
13131: LIST
13132: LIST
13133: PUSH
13134: LD_INT 25
13136: PUSH
13137: LD_INT 9
13139: PUSH
13140: EMPTY
13141: LIST
13142: LIST
13143: PUSH
13144: LD_INT 25
13146: PUSH
13147: LD_INT 8
13149: PUSH
13150: EMPTY
13151: LIST
13152: LIST
13153: PUSH
13154: EMPTY
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: PUSH
13160: EMPTY
13161: LIST
13162: LIST
13163: PPUSH
13164: CALL_OW 69
13168: PUSH
13169: FOR_IN
13170: IFFALSE 13186
// begin SetClass ( i , 1 ) ;
13172: LD_VAR 0 1
13176: PPUSH
13177: LD_INT 1
13179: PPUSH
13180: CALL_OW 336
// end ;
13184: GO 13169
13186: POP
13187: POP
// end ;
13188: PPOPN 1
13190: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13191: LD_EXP 29
13195: PUSH
13196: LD_EXP 33
13200: AND
13201: PUSH
13202: LD_OWVAR 65
13206: PUSH
13207: LD_INT 7
13209: LESS
13210: AND
13211: IFFALSE 13225
13213: GO 13215
13215: DISABLE
// begin enable ;
13216: ENABLE
// game_speed := 7 ;
13217: LD_ADDR_OWVAR 65
13221: PUSH
13222: LD_INT 7
13224: ST_TO_ADDR
// end ;
13225: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13226: LD_EXP 29
13230: PUSH
13231: LD_EXP 36
13235: AND
13236: IFFALSE 13438
13238: GO 13240
13240: DISABLE
13241: LD_INT 0
13243: PPUSH
13244: PPUSH
13245: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13246: LD_ADDR_VAR 0 3
13250: PUSH
13251: LD_INT 81
13253: PUSH
13254: LD_OWVAR 2
13258: PUSH
13259: EMPTY
13260: LIST
13261: LIST
13262: PUSH
13263: LD_INT 21
13265: PUSH
13266: LD_INT 1
13268: PUSH
13269: EMPTY
13270: LIST
13271: LIST
13272: PUSH
13273: EMPTY
13274: LIST
13275: LIST
13276: PPUSH
13277: CALL_OW 69
13281: ST_TO_ADDR
// if not tmp then
13282: LD_VAR 0 3
13286: NOT
13287: IFFALSE 13291
// exit ;
13289: GO 13438
// if tmp > 5 then
13291: LD_VAR 0 3
13295: PUSH
13296: LD_INT 5
13298: GREATER
13299: IFFALSE 13311
// k := 5 else
13301: LD_ADDR_VAR 0 2
13305: PUSH
13306: LD_INT 5
13308: ST_TO_ADDR
13309: GO 13321
// k := tmp ;
13311: LD_ADDR_VAR 0 2
13315: PUSH
13316: LD_VAR 0 3
13320: ST_TO_ADDR
// for i := 1 to k do
13321: LD_ADDR_VAR 0 1
13325: PUSH
13326: DOUBLE
13327: LD_INT 1
13329: DEC
13330: ST_TO_ADDR
13331: LD_VAR 0 2
13335: PUSH
13336: FOR_TO
13337: IFFALSE 13436
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13339: LD_VAR 0 3
13343: PUSH
13344: LD_VAR 0 1
13348: ARRAY
13349: PPUSH
13350: LD_VAR 0 1
13354: PUSH
13355: LD_INT 4
13357: MOD
13358: PUSH
13359: LD_INT 1
13361: PLUS
13362: PPUSH
13363: CALL_OW 259
13367: PUSH
13368: LD_INT 10
13370: LESS
13371: IFFALSE 13434
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13373: LD_VAR 0 3
13377: PUSH
13378: LD_VAR 0 1
13382: ARRAY
13383: PPUSH
13384: LD_VAR 0 1
13388: PUSH
13389: LD_INT 4
13391: MOD
13392: PUSH
13393: LD_INT 1
13395: PLUS
13396: PPUSH
13397: LD_VAR 0 3
13401: PUSH
13402: LD_VAR 0 1
13406: ARRAY
13407: PPUSH
13408: LD_VAR 0 1
13412: PUSH
13413: LD_INT 4
13415: MOD
13416: PUSH
13417: LD_INT 1
13419: PLUS
13420: PPUSH
13421: CALL_OW 259
13425: PUSH
13426: LD_INT 1
13428: PLUS
13429: PPUSH
13430: CALL_OW 237
13434: GO 13336
13436: POP
13437: POP
// end ;
13438: PPOPN 3
13440: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13441: LD_EXP 29
13445: PUSH
13446: LD_EXP 37
13450: AND
13451: IFFALSE 13471
13453: GO 13455
13455: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13456: LD_INT 4
13458: PPUSH
13459: LD_OWVAR 2
13463: PPUSH
13464: LD_INT 0
13466: PPUSH
13467: CALL_OW 324
13471: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13472: LD_EXP 29
13476: PUSH
13477: LD_EXP 66
13481: AND
13482: IFFALSE 13502
13484: GO 13486
13486: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13487: LD_INT 19
13489: PPUSH
13490: LD_OWVAR 2
13494: PPUSH
13495: LD_INT 0
13497: PPUSH
13498: CALL_OW 324
13502: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13503: LD_EXP 29
13507: PUSH
13508: LD_EXP 38
13512: AND
13513: IFFALSE 13615
13515: GO 13517
13517: DISABLE
13518: LD_INT 0
13520: PPUSH
13521: PPUSH
// begin enable ;
13522: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13523: LD_ADDR_VAR 0 2
13527: PUSH
13528: LD_INT 22
13530: PUSH
13531: LD_OWVAR 2
13535: PUSH
13536: EMPTY
13537: LIST
13538: LIST
13539: PUSH
13540: LD_INT 2
13542: PUSH
13543: LD_INT 34
13545: PUSH
13546: LD_INT 11
13548: PUSH
13549: EMPTY
13550: LIST
13551: LIST
13552: PUSH
13553: LD_INT 34
13555: PUSH
13556: LD_INT 30
13558: PUSH
13559: EMPTY
13560: LIST
13561: LIST
13562: PUSH
13563: EMPTY
13564: LIST
13565: LIST
13566: LIST
13567: PUSH
13568: EMPTY
13569: LIST
13570: LIST
13571: PPUSH
13572: CALL_OW 69
13576: ST_TO_ADDR
// if not tmp then
13577: LD_VAR 0 2
13581: NOT
13582: IFFALSE 13586
// exit ;
13584: GO 13615
// for i in tmp do
13586: LD_ADDR_VAR 0 1
13590: PUSH
13591: LD_VAR 0 2
13595: PUSH
13596: FOR_IN
13597: IFFALSE 13613
// begin SetLives ( i , 0 ) ;
13599: LD_VAR 0 1
13603: PPUSH
13604: LD_INT 0
13606: PPUSH
13607: CALL_OW 234
// end ;
13611: GO 13596
13613: POP
13614: POP
// end ;
13615: PPOPN 2
13617: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13618: LD_EXP 29
13622: PUSH
13623: LD_EXP 39
13627: AND
13628: IFFALSE 13648
13630: GO 13632
13632: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13633: LD_INT 32
13635: PPUSH
13636: LD_OWVAR 2
13640: PPUSH
13641: LD_INT 0
13643: PPUSH
13644: CALL_OW 324
13648: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13649: LD_EXP 29
13653: PUSH
13654: LD_EXP 40
13658: AND
13659: IFFALSE 13840
13661: GO 13663
13663: DISABLE
13664: LD_INT 0
13666: PPUSH
13667: PPUSH
13668: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13669: LD_ADDR_VAR 0 2
13673: PUSH
13674: LD_INT 22
13676: PUSH
13677: LD_OWVAR 2
13681: PUSH
13682: EMPTY
13683: LIST
13684: LIST
13685: PUSH
13686: LD_INT 33
13688: PUSH
13689: LD_INT 3
13691: PUSH
13692: EMPTY
13693: LIST
13694: LIST
13695: PUSH
13696: EMPTY
13697: LIST
13698: LIST
13699: PPUSH
13700: CALL_OW 69
13704: ST_TO_ADDR
// if not tmp then
13705: LD_VAR 0 2
13709: NOT
13710: IFFALSE 13714
// exit ;
13712: GO 13840
// side := 0 ;
13714: LD_ADDR_VAR 0 3
13718: PUSH
13719: LD_INT 0
13721: ST_TO_ADDR
// for i := 1 to 8 do
13722: LD_ADDR_VAR 0 1
13726: PUSH
13727: DOUBLE
13728: LD_INT 1
13730: DEC
13731: ST_TO_ADDR
13732: LD_INT 8
13734: PUSH
13735: FOR_TO
13736: IFFALSE 13784
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
13738: LD_OWVAR 2
13742: PUSH
13743: LD_VAR 0 1
13747: NONEQUAL
13748: PUSH
13749: LD_OWVAR 2
13753: PPUSH
13754: LD_VAR 0 1
13758: PPUSH
13759: CALL_OW 81
13763: PUSH
13764: LD_INT 2
13766: EQUAL
13767: AND
13768: IFFALSE 13782
// begin side := i ;
13770: LD_ADDR_VAR 0 3
13774: PUSH
13775: LD_VAR 0 1
13779: ST_TO_ADDR
// break ;
13780: GO 13784
// end ;
13782: GO 13735
13784: POP
13785: POP
// if not side then
13786: LD_VAR 0 3
13790: NOT
13791: IFFALSE 13795
// exit ;
13793: GO 13840
// for i := 1 to tmp do
13795: LD_ADDR_VAR 0 1
13799: PUSH
13800: DOUBLE
13801: LD_INT 1
13803: DEC
13804: ST_TO_ADDR
13805: LD_VAR 0 2
13809: PUSH
13810: FOR_TO
13811: IFFALSE 13838
// if Prob ( 60 ) then
13813: LD_INT 60
13815: PPUSH
13816: CALL_OW 13
13820: IFFALSE 13836
// SetSide ( i , side ) ;
13822: LD_VAR 0 1
13826: PPUSH
13827: LD_VAR 0 3
13831: PPUSH
13832: CALL_OW 235
13836: GO 13810
13838: POP
13839: POP
// end ;
13840: PPOPN 3
13842: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
13843: LD_EXP 29
13847: PUSH
13848: LD_EXP 42
13852: AND
13853: IFFALSE 13972
13855: GO 13857
13857: DISABLE
13858: LD_INT 0
13860: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
13861: LD_ADDR_VAR 0 1
13865: PUSH
13866: LD_INT 22
13868: PUSH
13869: LD_OWVAR 2
13873: PUSH
13874: EMPTY
13875: LIST
13876: LIST
13877: PUSH
13878: LD_INT 21
13880: PUSH
13881: LD_INT 1
13883: PUSH
13884: EMPTY
13885: LIST
13886: LIST
13887: PUSH
13888: LD_INT 3
13890: PUSH
13891: LD_INT 23
13893: PUSH
13894: LD_INT 0
13896: PUSH
13897: EMPTY
13898: LIST
13899: LIST
13900: PUSH
13901: EMPTY
13902: LIST
13903: LIST
13904: PUSH
13905: EMPTY
13906: LIST
13907: LIST
13908: LIST
13909: PPUSH
13910: CALL_OW 69
13914: PUSH
13915: FOR_IN
13916: IFFALSE 13970
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
13918: LD_VAR 0 1
13922: PPUSH
13923: CALL_OW 257
13927: PUSH
13928: LD_INT 1
13930: PUSH
13931: LD_INT 2
13933: PUSH
13934: LD_INT 3
13936: PUSH
13937: LD_INT 4
13939: PUSH
13940: EMPTY
13941: LIST
13942: LIST
13943: LIST
13944: LIST
13945: IN
13946: IFFALSE 13968
// SetClass ( un , rand ( 1 , 4 ) ) ;
13948: LD_VAR 0 1
13952: PPUSH
13953: LD_INT 1
13955: PPUSH
13956: LD_INT 4
13958: PPUSH
13959: CALL_OW 12
13963: PPUSH
13964: CALL_OW 336
13968: GO 13915
13970: POP
13971: POP
// end ;
13972: PPOPN 1
13974: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
13975: LD_EXP 29
13979: PUSH
13980: LD_EXP 41
13984: AND
13985: IFFALSE 14064
13987: GO 13989
13989: DISABLE
13990: LD_INT 0
13992: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13993: LD_ADDR_VAR 0 1
13997: PUSH
13998: LD_INT 22
14000: PUSH
14001: LD_OWVAR 2
14005: PUSH
14006: EMPTY
14007: LIST
14008: LIST
14009: PUSH
14010: LD_INT 21
14012: PUSH
14013: LD_INT 3
14015: PUSH
14016: EMPTY
14017: LIST
14018: LIST
14019: PUSH
14020: EMPTY
14021: LIST
14022: LIST
14023: PPUSH
14024: CALL_OW 69
14028: ST_TO_ADDR
// if not tmp then
14029: LD_VAR 0 1
14033: NOT
14034: IFFALSE 14038
// exit ;
14036: GO 14064
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14038: LD_VAR 0 1
14042: PUSH
14043: LD_INT 1
14045: PPUSH
14046: LD_VAR 0 1
14050: PPUSH
14051: CALL_OW 12
14055: ARRAY
14056: PPUSH
14057: LD_INT 100
14059: PPUSH
14060: CALL_OW 234
// end ;
14064: PPOPN 1
14066: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14067: LD_EXP 29
14071: PUSH
14072: LD_EXP 43
14076: AND
14077: IFFALSE 14175
14079: GO 14081
14081: DISABLE
14082: LD_INT 0
14084: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14085: LD_ADDR_VAR 0 1
14089: PUSH
14090: LD_INT 22
14092: PUSH
14093: LD_OWVAR 2
14097: PUSH
14098: EMPTY
14099: LIST
14100: LIST
14101: PUSH
14102: LD_INT 21
14104: PUSH
14105: LD_INT 1
14107: PUSH
14108: EMPTY
14109: LIST
14110: LIST
14111: PUSH
14112: EMPTY
14113: LIST
14114: LIST
14115: PPUSH
14116: CALL_OW 69
14120: ST_TO_ADDR
// if not tmp then
14121: LD_VAR 0 1
14125: NOT
14126: IFFALSE 14130
// exit ;
14128: GO 14175
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14130: LD_VAR 0 1
14134: PUSH
14135: LD_INT 1
14137: PPUSH
14138: LD_VAR 0 1
14142: PPUSH
14143: CALL_OW 12
14147: ARRAY
14148: PPUSH
14149: LD_INT 1
14151: PPUSH
14152: LD_INT 4
14154: PPUSH
14155: CALL_OW 12
14159: PPUSH
14160: LD_INT 3000
14162: PPUSH
14163: LD_INT 9000
14165: PPUSH
14166: CALL_OW 12
14170: PPUSH
14171: CALL_OW 492
// end ;
14175: PPOPN 1
14177: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14178: LD_EXP 29
14182: PUSH
14183: LD_EXP 44
14187: AND
14188: IFFALSE 14208
14190: GO 14192
14192: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14193: LD_INT 1
14195: PPUSH
14196: LD_OWVAR 2
14200: PPUSH
14201: LD_INT 0
14203: PPUSH
14204: CALL_OW 324
14208: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14209: LD_EXP 29
14213: PUSH
14214: LD_EXP 45
14218: AND
14219: IFFALSE 14302
14221: GO 14223
14223: DISABLE
14224: LD_INT 0
14226: PPUSH
14227: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14228: LD_ADDR_VAR 0 2
14232: PUSH
14233: LD_INT 22
14235: PUSH
14236: LD_OWVAR 2
14240: PUSH
14241: EMPTY
14242: LIST
14243: LIST
14244: PUSH
14245: LD_INT 21
14247: PUSH
14248: LD_INT 3
14250: PUSH
14251: EMPTY
14252: LIST
14253: LIST
14254: PUSH
14255: EMPTY
14256: LIST
14257: LIST
14258: PPUSH
14259: CALL_OW 69
14263: ST_TO_ADDR
// if not tmp then
14264: LD_VAR 0 2
14268: NOT
14269: IFFALSE 14273
// exit ;
14271: GO 14302
// for i in tmp do
14273: LD_ADDR_VAR 0 1
14277: PUSH
14278: LD_VAR 0 2
14282: PUSH
14283: FOR_IN
14284: IFFALSE 14300
// SetBLevel ( i , 10 ) ;
14286: LD_VAR 0 1
14290: PPUSH
14291: LD_INT 10
14293: PPUSH
14294: CALL_OW 241
14298: GO 14283
14300: POP
14301: POP
// end ;
14302: PPOPN 2
14304: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14305: LD_EXP 29
14309: PUSH
14310: LD_EXP 46
14314: AND
14315: IFFALSE 14426
14317: GO 14319
14319: DISABLE
14320: LD_INT 0
14322: PPUSH
14323: PPUSH
14324: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14325: LD_ADDR_VAR 0 3
14329: PUSH
14330: LD_INT 22
14332: PUSH
14333: LD_OWVAR 2
14337: PUSH
14338: EMPTY
14339: LIST
14340: LIST
14341: PUSH
14342: LD_INT 25
14344: PUSH
14345: LD_INT 1
14347: PUSH
14348: EMPTY
14349: LIST
14350: LIST
14351: PUSH
14352: EMPTY
14353: LIST
14354: LIST
14355: PPUSH
14356: CALL_OW 69
14360: ST_TO_ADDR
// if not tmp then
14361: LD_VAR 0 3
14365: NOT
14366: IFFALSE 14370
// exit ;
14368: GO 14426
// un := tmp [ rand ( 1 , tmp ) ] ;
14370: LD_ADDR_VAR 0 2
14374: PUSH
14375: LD_VAR 0 3
14379: PUSH
14380: LD_INT 1
14382: PPUSH
14383: LD_VAR 0 3
14387: PPUSH
14388: CALL_OW 12
14392: ARRAY
14393: ST_TO_ADDR
// if Crawls ( un ) then
14394: LD_VAR 0 2
14398: PPUSH
14399: CALL_OW 318
14403: IFFALSE 14414
// ComWalk ( un ) ;
14405: LD_VAR 0 2
14409: PPUSH
14410: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14414: LD_VAR 0 2
14418: PPUSH
14419: LD_INT 5
14421: PPUSH
14422: CALL_OW 336
// end ;
14426: PPOPN 3
14428: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
14429: LD_EXP 29
14433: PUSH
14434: LD_EXP 47
14438: AND
14439: PUSH
14440: LD_OWVAR 67
14444: PUSH
14445: LD_INT 4
14447: LESS
14448: AND
14449: IFFALSE 14468
14451: GO 14453
14453: DISABLE
// begin Difficulty := Difficulty + 1 ;
14454: LD_ADDR_OWVAR 67
14458: PUSH
14459: LD_OWVAR 67
14463: PUSH
14464: LD_INT 1
14466: PLUS
14467: ST_TO_ADDR
// end ;
14468: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14469: LD_EXP 29
14473: PUSH
14474: LD_EXP 48
14478: AND
14479: IFFALSE 14582
14481: GO 14483
14483: DISABLE
14484: LD_INT 0
14486: PPUSH
// begin for i := 1 to 5 do
14487: LD_ADDR_VAR 0 1
14491: PUSH
14492: DOUBLE
14493: LD_INT 1
14495: DEC
14496: ST_TO_ADDR
14497: LD_INT 5
14499: PUSH
14500: FOR_TO
14501: IFFALSE 14580
// begin uc_nation := nation_nature ;
14503: LD_ADDR_OWVAR 21
14507: PUSH
14508: LD_INT 0
14510: ST_TO_ADDR
// uc_side := 0 ;
14511: LD_ADDR_OWVAR 20
14515: PUSH
14516: LD_INT 0
14518: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14519: LD_ADDR_OWVAR 29
14523: PUSH
14524: LD_INT 12
14526: PUSH
14527: LD_INT 12
14529: PUSH
14530: EMPTY
14531: LIST
14532: LIST
14533: ST_TO_ADDR
// hc_agressivity := 20 ;
14534: LD_ADDR_OWVAR 35
14538: PUSH
14539: LD_INT 20
14541: ST_TO_ADDR
// hc_class := class_tiger ;
14542: LD_ADDR_OWVAR 28
14546: PUSH
14547: LD_INT 14
14549: ST_TO_ADDR
// hc_gallery :=  ;
14550: LD_ADDR_OWVAR 33
14554: PUSH
14555: LD_STRING 
14557: ST_TO_ADDR
// hc_name :=  ;
14558: LD_ADDR_OWVAR 26
14562: PUSH
14563: LD_STRING 
14565: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14566: CALL_OW 44
14570: PPUSH
14571: LD_INT 0
14573: PPUSH
14574: CALL_OW 51
// end ;
14578: GO 14500
14580: POP
14581: POP
// end ;
14582: PPOPN 1
14584: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14585: LD_EXP 29
14589: PUSH
14590: LD_EXP 49
14594: AND
14595: IFFALSE 14604
14597: GO 14599
14599: DISABLE
// StreamSibBomb ;
14600: CALL 14605 0 0
14604: END
// export function StreamSibBomb ; var i , x , y ; begin
14605: LD_INT 0
14607: PPUSH
14608: PPUSH
14609: PPUSH
14610: PPUSH
// result := false ;
14611: LD_ADDR_VAR 0 1
14615: PUSH
14616: LD_INT 0
14618: ST_TO_ADDR
// for i := 1 to 16 do
14619: LD_ADDR_VAR 0 2
14623: PUSH
14624: DOUBLE
14625: LD_INT 1
14627: DEC
14628: ST_TO_ADDR
14629: LD_INT 16
14631: PUSH
14632: FOR_TO
14633: IFFALSE 14832
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14635: LD_ADDR_VAR 0 3
14639: PUSH
14640: LD_INT 10
14642: PUSH
14643: LD_INT 20
14645: PUSH
14646: LD_INT 30
14648: PUSH
14649: LD_INT 40
14651: PUSH
14652: LD_INT 50
14654: PUSH
14655: LD_INT 60
14657: PUSH
14658: LD_INT 70
14660: PUSH
14661: LD_INT 80
14663: PUSH
14664: LD_INT 90
14666: PUSH
14667: LD_INT 100
14669: PUSH
14670: LD_INT 110
14672: PUSH
14673: LD_INT 120
14675: PUSH
14676: LD_INT 130
14678: PUSH
14679: LD_INT 140
14681: PUSH
14682: LD_INT 150
14684: PUSH
14685: EMPTY
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: PUSH
14702: LD_INT 1
14704: PPUSH
14705: LD_INT 15
14707: PPUSH
14708: CALL_OW 12
14712: ARRAY
14713: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14714: LD_ADDR_VAR 0 4
14718: PUSH
14719: LD_INT 10
14721: PUSH
14722: LD_INT 20
14724: PUSH
14725: LD_INT 30
14727: PUSH
14728: LD_INT 40
14730: PUSH
14731: LD_INT 50
14733: PUSH
14734: LD_INT 60
14736: PUSH
14737: LD_INT 70
14739: PUSH
14740: LD_INT 80
14742: PUSH
14743: LD_INT 90
14745: PUSH
14746: LD_INT 100
14748: PUSH
14749: LD_INT 110
14751: PUSH
14752: LD_INT 120
14754: PUSH
14755: LD_INT 130
14757: PUSH
14758: LD_INT 140
14760: PUSH
14761: LD_INT 150
14763: PUSH
14764: EMPTY
14765: LIST
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: PUSH
14781: LD_INT 1
14783: PPUSH
14784: LD_INT 15
14786: PPUSH
14787: CALL_OW 12
14791: ARRAY
14792: ST_TO_ADDR
// if ValidHex ( x , y ) then
14793: LD_VAR 0 3
14797: PPUSH
14798: LD_VAR 0 4
14802: PPUSH
14803: CALL_OW 488
14807: IFFALSE 14830
// begin result := [ x , y ] ;
14809: LD_ADDR_VAR 0 1
14813: PUSH
14814: LD_VAR 0 3
14818: PUSH
14819: LD_VAR 0 4
14823: PUSH
14824: EMPTY
14825: LIST
14826: LIST
14827: ST_TO_ADDR
// break ;
14828: GO 14832
// end ; end ;
14830: GO 14632
14832: POP
14833: POP
// if result then
14834: LD_VAR 0 1
14838: IFFALSE 14898
// begin ToLua ( playSibBomb() ) ;
14840: LD_STRING playSibBomb()
14842: PPUSH
14843: CALL_OW 559
// wait ( 0 0$14 ) ;
14847: LD_INT 490
14849: PPUSH
14850: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
14854: LD_VAR 0 1
14858: PUSH
14859: LD_INT 1
14861: ARRAY
14862: PPUSH
14863: LD_VAR 0 1
14867: PUSH
14868: LD_INT 2
14870: ARRAY
14871: PPUSH
14872: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
14876: LD_VAR 0 1
14880: PUSH
14881: LD_INT 1
14883: ARRAY
14884: PPUSH
14885: LD_VAR 0 1
14889: PUSH
14890: LD_INT 2
14892: ARRAY
14893: PPUSH
14894: CALL_OW 429
// end ; end ;
14898: LD_VAR 0 1
14902: RET
// every 0 0$1 trigger StreamModeActive and sReset do
14903: LD_EXP 29
14907: PUSH
14908: LD_EXP 51
14912: AND
14913: IFFALSE 14925
14915: GO 14917
14917: DISABLE
// YouLost (  ) ;
14918: LD_STRING 
14920: PPUSH
14921: CALL_OW 104
14925: END
// every 0 0$1 trigger StreamModeActive and sFog do
14926: LD_EXP 29
14930: PUSH
14931: LD_EXP 50
14935: AND
14936: IFFALSE 14950
14938: GO 14940
14940: DISABLE
// FogOff ( your_side ) ;
14941: LD_OWVAR 2
14945: PPUSH
14946: CALL_OW 344
14950: END
// every 0 0$1 trigger StreamModeActive and sSun do
14951: LD_EXP 29
14955: PUSH
14956: LD_EXP 52
14960: AND
14961: IFFALSE 14989
14963: GO 14965
14965: DISABLE
// begin solar_recharge_percent := 0 ;
14966: LD_ADDR_OWVAR 79
14970: PUSH
14971: LD_INT 0
14973: ST_TO_ADDR
// wait ( 5 5$00 ) ;
14974: LD_INT 10500
14976: PPUSH
14977: CALL_OW 67
// solar_recharge_percent := 100 ;
14981: LD_ADDR_OWVAR 79
14985: PUSH
14986: LD_INT 100
14988: ST_TO_ADDR
// end ;
14989: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
14990: LD_EXP 29
14994: PUSH
14995: LD_EXP 53
14999: AND
15000: IFFALSE 15239
15002: GO 15004
15004: DISABLE
15005: LD_INT 0
15007: PPUSH
15008: PPUSH
15009: PPUSH
// begin tmp := [ ] ;
15010: LD_ADDR_VAR 0 3
15014: PUSH
15015: EMPTY
15016: ST_TO_ADDR
// for i := 1 to 6 do
15017: LD_ADDR_VAR 0 1
15021: PUSH
15022: DOUBLE
15023: LD_INT 1
15025: DEC
15026: ST_TO_ADDR
15027: LD_INT 6
15029: PUSH
15030: FOR_TO
15031: IFFALSE 15136
// begin uc_nation := nation_nature ;
15033: LD_ADDR_OWVAR 21
15037: PUSH
15038: LD_INT 0
15040: ST_TO_ADDR
// uc_side := 0 ;
15041: LD_ADDR_OWVAR 20
15045: PUSH
15046: LD_INT 0
15048: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15049: LD_ADDR_OWVAR 29
15053: PUSH
15054: LD_INT 12
15056: PUSH
15057: LD_INT 12
15059: PUSH
15060: EMPTY
15061: LIST
15062: LIST
15063: ST_TO_ADDR
// hc_agressivity := 20 ;
15064: LD_ADDR_OWVAR 35
15068: PUSH
15069: LD_INT 20
15071: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15072: LD_ADDR_OWVAR 28
15076: PUSH
15077: LD_INT 17
15079: ST_TO_ADDR
// hc_gallery :=  ;
15080: LD_ADDR_OWVAR 33
15084: PUSH
15085: LD_STRING 
15087: ST_TO_ADDR
// hc_name :=  ;
15088: LD_ADDR_OWVAR 26
15092: PUSH
15093: LD_STRING 
15095: ST_TO_ADDR
// un := CreateHuman ;
15096: LD_ADDR_VAR 0 2
15100: PUSH
15101: CALL_OW 44
15105: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15106: LD_VAR 0 2
15110: PPUSH
15111: LD_INT 1
15113: PPUSH
15114: CALL_OW 51
// tmp := tmp ^ un ;
15118: LD_ADDR_VAR 0 3
15122: PUSH
15123: LD_VAR 0 3
15127: PUSH
15128: LD_VAR 0 2
15132: ADD
15133: ST_TO_ADDR
// end ;
15134: GO 15030
15136: POP
15137: POP
// repeat wait ( 0 0$1 ) ;
15138: LD_INT 35
15140: PPUSH
15141: CALL_OW 67
// for un in tmp do
15145: LD_ADDR_VAR 0 2
15149: PUSH
15150: LD_VAR 0 3
15154: PUSH
15155: FOR_IN
15156: IFFALSE 15230
// begin if IsDead ( un ) then
15158: LD_VAR 0 2
15162: PPUSH
15163: CALL_OW 301
15167: IFFALSE 15187
// begin tmp := tmp diff un ;
15169: LD_ADDR_VAR 0 3
15173: PUSH
15174: LD_VAR 0 3
15178: PUSH
15179: LD_VAR 0 2
15183: DIFF
15184: ST_TO_ADDR
// continue ;
15185: GO 15155
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15187: LD_VAR 0 2
15191: PPUSH
15192: LD_INT 3
15194: PUSH
15195: LD_INT 22
15197: PUSH
15198: LD_INT 0
15200: PUSH
15201: EMPTY
15202: LIST
15203: LIST
15204: PUSH
15205: EMPTY
15206: LIST
15207: LIST
15208: PPUSH
15209: CALL_OW 69
15213: PPUSH
15214: LD_VAR 0 2
15218: PPUSH
15219: CALL_OW 74
15223: PPUSH
15224: CALL_OW 115
// end ;
15228: GO 15155
15230: POP
15231: POP
// until not tmp ;
15232: LD_VAR 0 3
15236: NOT
15237: IFFALSE 15138
// end ;
15239: PPOPN 3
15241: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15242: LD_EXP 29
15246: PUSH
15247: LD_EXP 54
15251: AND
15252: IFFALSE 15306
15254: GO 15256
15256: DISABLE
// begin ToLua ( displayTroll(); ) ;
15257: LD_STRING displayTroll();
15259: PPUSH
15260: CALL_OW 559
// wait ( 3 3$00 ) ;
15264: LD_INT 6300
15266: PPUSH
15267: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15271: LD_STRING hideTroll();
15273: PPUSH
15274: CALL_OW 559
// wait ( 1 1$00 ) ;
15278: LD_INT 2100
15280: PPUSH
15281: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15285: LD_STRING displayTroll();
15287: PPUSH
15288: CALL_OW 559
// wait ( 1 1$00 ) ;
15292: LD_INT 2100
15294: PPUSH
15295: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15299: LD_STRING hideTroll();
15301: PPUSH
15302: CALL_OW 559
// end ;
15306: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15307: LD_EXP 29
15311: PUSH
15312: LD_EXP 55
15316: AND
15317: IFFALSE 15380
15319: GO 15321
15321: DISABLE
15322: LD_INT 0
15324: PPUSH
// begin p := 0 ;
15325: LD_ADDR_VAR 0 1
15329: PUSH
15330: LD_INT 0
15332: ST_TO_ADDR
// repeat game_speed := 1 ;
15333: LD_ADDR_OWVAR 65
15337: PUSH
15338: LD_INT 1
15340: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15341: LD_INT 35
15343: PPUSH
15344: CALL_OW 67
// p := p + 1 ;
15348: LD_ADDR_VAR 0 1
15352: PUSH
15353: LD_VAR 0 1
15357: PUSH
15358: LD_INT 1
15360: PLUS
15361: ST_TO_ADDR
// until p >= 60 ;
15362: LD_VAR 0 1
15366: PUSH
15367: LD_INT 60
15369: GREATEREQUAL
15370: IFFALSE 15333
// game_speed := 4 ;
15372: LD_ADDR_OWVAR 65
15376: PUSH
15377: LD_INT 4
15379: ST_TO_ADDR
// end ;
15380: PPOPN 1
15382: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15383: LD_EXP 29
15387: PUSH
15388: LD_EXP 56
15392: AND
15393: IFFALSE 15539
15395: GO 15397
15397: DISABLE
15398: LD_INT 0
15400: PPUSH
15401: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15402: LD_ADDR_VAR 0 1
15406: PUSH
15407: LD_INT 22
15409: PUSH
15410: LD_OWVAR 2
15414: PUSH
15415: EMPTY
15416: LIST
15417: LIST
15418: PUSH
15419: LD_INT 2
15421: PUSH
15422: LD_INT 30
15424: PUSH
15425: LD_INT 0
15427: PUSH
15428: EMPTY
15429: LIST
15430: LIST
15431: PUSH
15432: LD_INT 30
15434: PUSH
15435: LD_INT 1
15437: PUSH
15438: EMPTY
15439: LIST
15440: LIST
15441: PUSH
15442: EMPTY
15443: LIST
15444: LIST
15445: LIST
15446: PUSH
15447: EMPTY
15448: LIST
15449: LIST
15450: PPUSH
15451: CALL_OW 69
15455: ST_TO_ADDR
// if not depot then
15456: LD_VAR 0 1
15460: NOT
15461: IFFALSE 15465
// exit ;
15463: GO 15539
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15465: LD_ADDR_VAR 0 2
15469: PUSH
15470: LD_VAR 0 1
15474: PUSH
15475: LD_INT 1
15477: PPUSH
15478: LD_VAR 0 1
15482: PPUSH
15483: CALL_OW 12
15487: ARRAY
15488: PPUSH
15489: CALL_OW 274
15493: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15494: LD_VAR 0 2
15498: PPUSH
15499: LD_INT 1
15501: PPUSH
15502: LD_INT 0
15504: PPUSH
15505: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15509: LD_VAR 0 2
15513: PPUSH
15514: LD_INT 2
15516: PPUSH
15517: LD_INT 0
15519: PPUSH
15520: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15524: LD_VAR 0 2
15528: PPUSH
15529: LD_INT 3
15531: PPUSH
15532: LD_INT 0
15534: PPUSH
15535: CALL_OW 277
// end ;
15539: PPOPN 2
15541: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15542: LD_EXP 29
15546: PUSH
15547: LD_EXP 57
15551: AND
15552: IFFALSE 15649
15554: GO 15556
15556: DISABLE
15557: LD_INT 0
15559: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15560: LD_ADDR_VAR 0 1
15564: PUSH
15565: LD_INT 22
15567: PUSH
15568: LD_OWVAR 2
15572: PUSH
15573: EMPTY
15574: LIST
15575: LIST
15576: PUSH
15577: LD_INT 21
15579: PUSH
15580: LD_INT 1
15582: PUSH
15583: EMPTY
15584: LIST
15585: LIST
15586: PUSH
15587: LD_INT 3
15589: PUSH
15590: LD_INT 23
15592: PUSH
15593: LD_INT 0
15595: PUSH
15596: EMPTY
15597: LIST
15598: LIST
15599: PUSH
15600: EMPTY
15601: LIST
15602: LIST
15603: PUSH
15604: EMPTY
15605: LIST
15606: LIST
15607: LIST
15608: PPUSH
15609: CALL_OW 69
15613: ST_TO_ADDR
// if not tmp then
15614: LD_VAR 0 1
15618: NOT
15619: IFFALSE 15623
// exit ;
15621: GO 15649
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15623: LD_VAR 0 1
15627: PUSH
15628: LD_INT 1
15630: PPUSH
15631: LD_VAR 0 1
15635: PPUSH
15636: CALL_OW 12
15640: ARRAY
15641: PPUSH
15642: LD_INT 200
15644: PPUSH
15645: CALL_OW 234
// end ;
15649: PPOPN 1
15651: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15652: LD_EXP 29
15656: PUSH
15657: LD_EXP 58
15661: AND
15662: IFFALSE 15741
15664: GO 15666
15666: DISABLE
15667: LD_INT 0
15669: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15670: LD_ADDR_VAR 0 1
15674: PUSH
15675: LD_INT 22
15677: PUSH
15678: LD_OWVAR 2
15682: PUSH
15683: EMPTY
15684: LIST
15685: LIST
15686: PUSH
15687: LD_INT 21
15689: PUSH
15690: LD_INT 2
15692: PUSH
15693: EMPTY
15694: LIST
15695: LIST
15696: PUSH
15697: EMPTY
15698: LIST
15699: LIST
15700: PPUSH
15701: CALL_OW 69
15705: ST_TO_ADDR
// if not tmp then
15706: LD_VAR 0 1
15710: NOT
15711: IFFALSE 15715
// exit ;
15713: GO 15741
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15715: LD_VAR 0 1
15719: PUSH
15720: LD_INT 1
15722: PPUSH
15723: LD_VAR 0 1
15727: PPUSH
15728: CALL_OW 12
15732: ARRAY
15733: PPUSH
15734: LD_INT 60
15736: PPUSH
15737: CALL_OW 234
// end ;
15741: PPOPN 1
15743: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
15744: LD_EXP 29
15748: PUSH
15749: LD_EXP 59
15753: AND
15754: IFFALSE 15853
15756: GO 15758
15758: DISABLE
15759: LD_INT 0
15761: PPUSH
15762: PPUSH
// begin enable ;
15763: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
15764: LD_ADDR_VAR 0 1
15768: PUSH
15769: LD_INT 22
15771: PUSH
15772: LD_OWVAR 2
15776: PUSH
15777: EMPTY
15778: LIST
15779: LIST
15780: PUSH
15781: LD_INT 61
15783: PUSH
15784: EMPTY
15785: LIST
15786: PUSH
15787: LD_INT 33
15789: PUSH
15790: LD_INT 2
15792: PUSH
15793: EMPTY
15794: LIST
15795: LIST
15796: PUSH
15797: EMPTY
15798: LIST
15799: LIST
15800: LIST
15801: PPUSH
15802: CALL_OW 69
15806: ST_TO_ADDR
// if not tmp then
15807: LD_VAR 0 1
15811: NOT
15812: IFFALSE 15816
// exit ;
15814: GO 15853
// for i in tmp do
15816: LD_ADDR_VAR 0 2
15820: PUSH
15821: LD_VAR 0 1
15825: PUSH
15826: FOR_IN
15827: IFFALSE 15851
// if IsControledBy ( i ) then
15829: LD_VAR 0 2
15833: PPUSH
15834: CALL_OW 312
15838: IFFALSE 15849
// ComUnlink ( i ) ;
15840: LD_VAR 0 2
15844: PPUSH
15845: CALL_OW 136
15849: GO 15826
15851: POP
15852: POP
// end ;
15853: PPOPN 2
15855: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
15856: LD_EXP 29
15860: PUSH
15861: LD_EXP 60
15865: AND
15866: IFFALSE 16006
15868: GO 15870
15870: DISABLE
15871: LD_INT 0
15873: PPUSH
15874: PPUSH
// begin ToLua ( displayPowell(); ) ;
15875: LD_STRING displayPowell();
15877: PPUSH
15878: CALL_OW 559
// uc_side := 0 ;
15882: LD_ADDR_OWVAR 20
15886: PUSH
15887: LD_INT 0
15889: ST_TO_ADDR
// uc_nation := 2 ;
15890: LD_ADDR_OWVAR 21
15894: PUSH
15895: LD_INT 2
15897: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
15898: LD_ADDR_OWVAR 37
15902: PUSH
15903: LD_INT 14
15905: ST_TO_ADDR
// vc_engine := engine_siberite ;
15906: LD_ADDR_OWVAR 39
15910: PUSH
15911: LD_INT 3
15913: ST_TO_ADDR
// vc_control := control_apeman ;
15914: LD_ADDR_OWVAR 38
15918: PUSH
15919: LD_INT 5
15921: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
15922: LD_ADDR_OWVAR 40
15926: PUSH
15927: LD_INT 29
15929: ST_TO_ADDR
// un := CreateVehicle ;
15930: LD_ADDR_VAR 0 2
15934: PUSH
15935: CALL_OW 45
15939: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15940: LD_VAR 0 2
15944: PPUSH
15945: LD_INT 1
15947: PPUSH
15948: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15952: LD_INT 35
15954: PPUSH
15955: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15959: LD_VAR 0 2
15963: PPUSH
15964: LD_INT 22
15966: PUSH
15967: LD_OWVAR 2
15971: PUSH
15972: EMPTY
15973: LIST
15974: LIST
15975: PPUSH
15976: CALL_OW 69
15980: PPUSH
15981: LD_VAR 0 2
15985: PPUSH
15986: CALL_OW 74
15990: PPUSH
15991: CALL_OW 115
// until IsDead ( un ) ;
15995: LD_VAR 0 2
15999: PPUSH
16000: CALL_OW 301
16004: IFFALSE 15952
// end ;
16006: PPOPN 2
16008: END
// every 0 0$1 trigger StreamModeActive and sStu do
16009: LD_EXP 29
16013: PUSH
16014: LD_EXP 68
16018: AND
16019: IFFALSE 16035
16021: GO 16023
16023: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16024: LD_STRING displayStucuk();
16026: PPUSH
16027: CALL_OW 559
// ResetFog ;
16031: CALL_OW 335
// end ;
16035: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16036: LD_EXP 29
16040: PUSH
16041: LD_EXP 61
16045: AND
16046: IFFALSE 16187
16048: GO 16050
16050: DISABLE
16051: LD_INT 0
16053: PPUSH
16054: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16055: LD_ADDR_VAR 0 2
16059: PUSH
16060: LD_INT 22
16062: PUSH
16063: LD_OWVAR 2
16067: PUSH
16068: EMPTY
16069: LIST
16070: LIST
16071: PUSH
16072: LD_INT 21
16074: PUSH
16075: LD_INT 1
16077: PUSH
16078: EMPTY
16079: LIST
16080: LIST
16081: PUSH
16082: EMPTY
16083: LIST
16084: LIST
16085: PPUSH
16086: CALL_OW 69
16090: ST_TO_ADDR
// if not tmp then
16091: LD_VAR 0 2
16095: NOT
16096: IFFALSE 16100
// exit ;
16098: GO 16187
// un := tmp [ rand ( 1 , tmp ) ] ;
16100: LD_ADDR_VAR 0 1
16104: PUSH
16105: LD_VAR 0 2
16109: PUSH
16110: LD_INT 1
16112: PPUSH
16113: LD_VAR 0 2
16117: PPUSH
16118: CALL_OW 12
16122: ARRAY
16123: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16124: LD_VAR 0 1
16128: PPUSH
16129: LD_INT 0
16131: PPUSH
16132: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16136: LD_VAR 0 1
16140: PPUSH
16141: LD_OWVAR 3
16145: PUSH
16146: LD_VAR 0 1
16150: DIFF
16151: PPUSH
16152: LD_VAR 0 1
16156: PPUSH
16157: CALL_OW 74
16161: PPUSH
16162: CALL_OW 115
// wait ( 0 0$20 ) ;
16166: LD_INT 700
16168: PPUSH
16169: CALL_OW 67
// SetSide ( un , your_side ) ;
16173: LD_VAR 0 1
16177: PPUSH
16178: LD_OWVAR 2
16182: PPUSH
16183: CALL_OW 235
// end ;
16187: PPOPN 2
16189: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16190: LD_EXP 29
16194: PUSH
16195: LD_EXP 62
16199: AND
16200: IFFALSE 16306
16202: GO 16204
16204: DISABLE
16205: LD_INT 0
16207: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16208: LD_ADDR_VAR 0 1
16212: PUSH
16213: LD_INT 22
16215: PUSH
16216: LD_OWVAR 2
16220: PUSH
16221: EMPTY
16222: LIST
16223: LIST
16224: PUSH
16225: LD_INT 2
16227: PUSH
16228: LD_INT 30
16230: PUSH
16231: LD_INT 0
16233: PUSH
16234: EMPTY
16235: LIST
16236: LIST
16237: PUSH
16238: LD_INT 30
16240: PUSH
16241: LD_INT 1
16243: PUSH
16244: EMPTY
16245: LIST
16246: LIST
16247: PUSH
16248: EMPTY
16249: LIST
16250: LIST
16251: LIST
16252: PUSH
16253: EMPTY
16254: LIST
16255: LIST
16256: PPUSH
16257: CALL_OW 69
16261: ST_TO_ADDR
// if not depot then
16262: LD_VAR 0 1
16266: NOT
16267: IFFALSE 16271
// exit ;
16269: GO 16306
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16271: LD_VAR 0 1
16275: PUSH
16276: LD_INT 1
16278: ARRAY
16279: PPUSH
16280: CALL_OW 250
16284: PPUSH
16285: LD_VAR 0 1
16289: PUSH
16290: LD_INT 1
16292: ARRAY
16293: PPUSH
16294: CALL_OW 251
16298: PPUSH
16299: LD_INT 70
16301: PPUSH
16302: CALL_OW 495
// end ;
16306: PPOPN 1
16308: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16309: LD_EXP 29
16313: PUSH
16314: LD_EXP 63
16318: AND
16319: IFFALSE 16530
16321: GO 16323
16323: DISABLE
16324: LD_INT 0
16326: PPUSH
16327: PPUSH
16328: PPUSH
16329: PPUSH
16330: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16331: LD_ADDR_VAR 0 5
16335: PUSH
16336: LD_INT 22
16338: PUSH
16339: LD_OWVAR 2
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: PUSH
16348: LD_INT 21
16350: PUSH
16351: LD_INT 1
16353: PUSH
16354: EMPTY
16355: LIST
16356: LIST
16357: PUSH
16358: EMPTY
16359: LIST
16360: LIST
16361: PPUSH
16362: CALL_OW 69
16366: ST_TO_ADDR
// if not tmp then
16367: LD_VAR 0 5
16371: NOT
16372: IFFALSE 16376
// exit ;
16374: GO 16530
// for i in tmp do
16376: LD_ADDR_VAR 0 1
16380: PUSH
16381: LD_VAR 0 5
16385: PUSH
16386: FOR_IN
16387: IFFALSE 16528
// begin d := rand ( 0 , 5 ) ;
16389: LD_ADDR_VAR 0 4
16393: PUSH
16394: LD_INT 0
16396: PPUSH
16397: LD_INT 5
16399: PPUSH
16400: CALL_OW 12
16404: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16405: LD_ADDR_VAR 0 2
16409: PUSH
16410: LD_VAR 0 1
16414: PPUSH
16415: CALL_OW 250
16419: PPUSH
16420: LD_VAR 0 4
16424: PPUSH
16425: LD_INT 3
16427: PPUSH
16428: LD_INT 12
16430: PPUSH
16431: CALL_OW 12
16435: PPUSH
16436: CALL_OW 272
16440: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16441: LD_ADDR_VAR 0 3
16445: PUSH
16446: LD_VAR 0 1
16450: PPUSH
16451: CALL_OW 251
16455: PPUSH
16456: LD_VAR 0 4
16460: PPUSH
16461: LD_INT 3
16463: PPUSH
16464: LD_INT 12
16466: PPUSH
16467: CALL_OW 12
16471: PPUSH
16472: CALL_OW 273
16476: ST_TO_ADDR
// if ValidHex ( x , y ) then
16477: LD_VAR 0 2
16481: PPUSH
16482: LD_VAR 0 3
16486: PPUSH
16487: CALL_OW 488
16491: IFFALSE 16526
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16493: LD_VAR 0 1
16497: PPUSH
16498: LD_VAR 0 2
16502: PPUSH
16503: LD_VAR 0 3
16507: PPUSH
16508: LD_INT 3
16510: PPUSH
16511: LD_INT 6
16513: PPUSH
16514: CALL_OW 12
16518: PPUSH
16519: LD_INT 1
16521: PPUSH
16522: CALL_OW 483
// end ;
16526: GO 16386
16528: POP
16529: POP
// end ;
16530: PPOPN 5
16532: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16533: LD_EXP 29
16537: PUSH
16538: LD_EXP 64
16542: AND
16543: IFFALSE 16637
16545: GO 16547
16547: DISABLE
16548: LD_INT 0
16550: PPUSH
16551: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16552: LD_ADDR_VAR 0 2
16556: PUSH
16557: LD_INT 22
16559: PUSH
16560: LD_OWVAR 2
16564: PUSH
16565: EMPTY
16566: LIST
16567: LIST
16568: PUSH
16569: LD_INT 32
16571: PUSH
16572: LD_INT 1
16574: PUSH
16575: EMPTY
16576: LIST
16577: LIST
16578: PUSH
16579: LD_INT 21
16581: PUSH
16582: LD_INT 2
16584: PUSH
16585: EMPTY
16586: LIST
16587: LIST
16588: PUSH
16589: EMPTY
16590: LIST
16591: LIST
16592: LIST
16593: PPUSH
16594: CALL_OW 69
16598: ST_TO_ADDR
// if not tmp then
16599: LD_VAR 0 2
16603: NOT
16604: IFFALSE 16608
// exit ;
16606: GO 16637
// for i in tmp do
16608: LD_ADDR_VAR 0 1
16612: PUSH
16613: LD_VAR 0 2
16617: PUSH
16618: FOR_IN
16619: IFFALSE 16635
// SetFuel ( i , 0 ) ;
16621: LD_VAR 0 1
16625: PPUSH
16626: LD_INT 0
16628: PPUSH
16629: CALL_OW 240
16633: GO 16618
16635: POP
16636: POP
// end ;
16637: PPOPN 2
16639: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16640: LD_EXP 29
16644: PUSH
16645: LD_EXP 65
16649: AND
16650: IFFALSE 16716
16652: GO 16654
16654: DISABLE
16655: LD_INT 0
16657: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16658: LD_ADDR_VAR 0 1
16662: PUSH
16663: LD_INT 22
16665: PUSH
16666: LD_OWVAR 2
16670: PUSH
16671: EMPTY
16672: LIST
16673: LIST
16674: PUSH
16675: LD_INT 30
16677: PUSH
16678: LD_INT 29
16680: PUSH
16681: EMPTY
16682: LIST
16683: LIST
16684: PUSH
16685: EMPTY
16686: LIST
16687: LIST
16688: PPUSH
16689: CALL_OW 69
16693: ST_TO_ADDR
// if not tmp then
16694: LD_VAR 0 1
16698: NOT
16699: IFFALSE 16703
// exit ;
16701: GO 16716
// DestroyUnit ( tmp [ 1 ] ) ;
16703: LD_VAR 0 1
16707: PUSH
16708: LD_INT 1
16710: ARRAY
16711: PPUSH
16712: CALL_OW 65
// end ;
16716: PPOPN 1
16718: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16719: LD_EXP 29
16723: PUSH
16724: LD_EXP 67
16728: AND
16729: IFFALSE 16858
16731: GO 16733
16733: DISABLE
16734: LD_INT 0
16736: PPUSH
// begin uc_side := 0 ;
16737: LD_ADDR_OWVAR 20
16741: PUSH
16742: LD_INT 0
16744: ST_TO_ADDR
// uc_nation := nation_arabian ;
16745: LD_ADDR_OWVAR 21
16749: PUSH
16750: LD_INT 2
16752: ST_TO_ADDR
// hc_gallery :=  ;
16753: LD_ADDR_OWVAR 33
16757: PUSH
16758: LD_STRING 
16760: ST_TO_ADDR
// hc_name :=  ;
16761: LD_ADDR_OWVAR 26
16765: PUSH
16766: LD_STRING 
16768: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
16769: LD_INT 1
16771: PPUSH
16772: LD_INT 11
16774: PPUSH
16775: LD_INT 10
16777: PPUSH
16778: CALL_OW 380
// un := CreateHuman ;
16782: LD_ADDR_VAR 0 1
16786: PUSH
16787: CALL_OW 44
16791: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16792: LD_VAR 0 1
16796: PPUSH
16797: LD_INT 1
16799: PPUSH
16800: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16804: LD_INT 35
16806: PPUSH
16807: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16811: LD_VAR 0 1
16815: PPUSH
16816: LD_INT 22
16818: PUSH
16819: LD_OWVAR 2
16823: PUSH
16824: EMPTY
16825: LIST
16826: LIST
16827: PPUSH
16828: CALL_OW 69
16832: PPUSH
16833: LD_VAR 0 1
16837: PPUSH
16838: CALL_OW 74
16842: PPUSH
16843: CALL_OW 115
// until IsDead ( un ) ;
16847: LD_VAR 0 1
16851: PPUSH
16852: CALL_OW 301
16856: IFFALSE 16804
// end ;
16858: PPOPN 1
16860: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
16861: LD_EXP 29
16865: PUSH
16866: LD_EXP 69
16870: AND
16871: IFFALSE 16883
16873: GO 16875
16875: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
16876: LD_STRING earthquake(getX(game), 0, 32)
16878: PPUSH
16879: CALL_OW 559
16883: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
16884: LD_EXP 29
16888: PUSH
16889: LD_EXP 70
16893: AND
16894: IFFALSE 16985
16896: GO 16898
16898: DISABLE
16899: LD_INT 0
16901: PPUSH
// begin enable ;
16902: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
16903: LD_ADDR_VAR 0 1
16907: PUSH
16908: LD_INT 22
16910: PUSH
16911: LD_OWVAR 2
16915: PUSH
16916: EMPTY
16917: LIST
16918: LIST
16919: PUSH
16920: LD_INT 21
16922: PUSH
16923: LD_INT 2
16925: PUSH
16926: EMPTY
16927: LIST
16928: LIST
16929: PUSH
16930: LD_INT 33
16932: PUSH
16933: LD_INT 3
16935: PUSH
16936: EMPTY
16937: LIST
16938: LIST
16939: PUSH
16940: EMPTY
16941: LIST
16942: LIST
16943: LIST
16944: PPUSH
16945: CALL_OW 69
16949: ST_TO_ADDR
// if not tmp then
16950: LD_VAR 0 1
16954: NOT
16955: IFFALSE 16959
// exit ;
16957: GO 16985
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16959: LD_VAR 0 1
16963: PUSH
16964: LD_INT 1
16966: PPUSH
16967: LD_VAR 0 1
16971: PPUSH
16972: CALL_OW 12
16976: ARRAY
16977: PPUSH
16978: LD_INT 1
16980: PPUSH
16981: CALL_OW 234
// end ;
16985: PPOPN 1
16987: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
16988: LD_EXP 29
16992: PUSH
16993: LD_EXP 71
16997: AND
16998: IFFALSE 17139
17000: GO 17002
17002: DISABLE
17003: LD_INT 0
17005: PPUSH
17006: PPUSH
17007: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17008: LD_ADDR_VAR 0 3
17012: PUSH
17013: LD_INT 22
17015: PUSH
17016: LD_OWVAR 2
17020: PUSH
17021: EMPTY
17022: LIST
17023: LIST
17024: PUSH
17025: LD_INT 25
17027: PUSH
17028: LD_INT 1
17030: PUSH
17031: EMPTY
17032: LIST
17033: LIST
17034: PUSH
17035: EMPTY
17036: LIST
17037: LIST
17038: PPUSH
17039: CALL_OW 69
17043: ST_TO_ADDR
// if not tmp then
17044: LD_VAR 0 3
17048: NOT
17049: IFFALSE 17053
// exit ;
17051: GO 17139
// un := tmp [ rand ( 1 , tmp ) ] ;
17053: LD_ADDR_VAR 0 2
17057: PUSH
17058: LD_VAR 0 3
17062: PUSH
17063: LD_INT 1
17065: PPUSH
17066: LD_VAR 0 3
17070: PPUSH
17071: CALL_OW 12
17075: ARRAY
17076: ST_TO_ADDR
// if Crawls ( un ) then
17077: LD_VAR 0 2
17081: PPUSH
17082: CALL_OW 318
17086: IFFALSE 17097
// ComWalk ( un ) ;
17088: LD_VAR 0 2
17092: PPUSH
17093: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17097: LD_VAR 0 2
17101: PPUSH
17102: LD_INT 9
17104: PPUSH
17105: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17109: LD_INT 28
17111: PPUSH
17112: LD_OWVAR 2
17116: PPUSH
17117: LD_INT 2
17119: PPUSH
17120: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17124: LD_INT 29
17126: PPUSH
17127: LD_OWVAR 2
17131: PPUSH
17132: LD_INT 2
17134: PPUSH
17135: CALL_OW 322
// end ;
17139: PPOPN 3
17141: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17142: LD_EXP 29
17146: PUSH
17147: LD_EXP 72
17151: AND
17152: IFFALSE 17263
17154: GO 17156
17156: DISABLE
17157: LD_INT 0
17159: PPUSH
17160: PPUSH
17161: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17162: LD_ADDR_VAR 0 3
17166: PUSH
17167: LD_INT 22
17169: PUSH
17170: LD_OWVAR 2
17174: PUSH
17175: EMPTY
17176: LIST
17177: LIST
17178: PUSH
17179: LD_INT 25
17181: PUSH
17182: LD_INT 1
17184: PUSH
17185: EMPTY
17186: LIST
17187: LIST
17188: PUSH
17189: EMPTY
17190: LIST
17191: LIST
17192: PPUSH
17193: CALL_OW 69
17197: ST_TO_ADDR
// if not tmp then
17198: LD_VAR 0 3
17202: NOT
17203: IFFALSE 17207
// exit ;
17205: GO 17263
// un := tmp [ rand ( 1 , tmp ) ] ;
17207: LD_ADDR_VAR 0 2
17211: PUSH
17212: LD_VAR 0 3
17216: PUSH
17217: LD_INT 1
17219: PPUSH
17220: LD_VAR 0 3
17224: PPUSH
17225: CALL_OW 12
17229: ARRAY
17230: ST_TO_ADDR
// if Crawls ( un ) then
17231: LD_VAR 0 2
17235: PPUSH
17236: CALL_OW 318
17240: IFFALSE 17251
// ComWalk ( un ) ;
17242: LD_VAR 0 2
17246: PPUSH
17247: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17251: LD_VAR 0 2
17255: PPUSH
17256: LD_INT 8
17258: PPUSH
17259: CALL_OW 336
// end ;
17263: PPOPN 3
17265: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17266: LD_EXP 29
17270: PUSH
17271: LD_EXP 73
17275: AND
17276: IFFALSE 17420
17278: GO 17280
17280: DISABLE
17281: LD_INT 0
17283: PPUSH
17284: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17285: LD_ADDR_VAR 0 2
17289: PUSH
17290: LD_INT 22
17292: PUSH
17293: LD_OWVAR 2
17297: PUSH
17298: EMPTY
17299: LIST
17300: LIST
17301: PUSH
17302: LD_INT 21
17304: PUSH
17305: LD_INT 2
17307: PUSH
17308: EMPTY
17309: LIST
17310: LIST
17311: PUSH
17312: LD_INT 2
17314: PUSH
17315: LD_INT 34
17317: PUSH
17318: LD_INT 12
17320: PUSH
17321: EMPTY
17322: LIST
17323: LIST
17324: PUSH
17325: LD_INT 34
17327: PUSH
17328: LD_INT 51
17330: PUSH
17331: EMPTY
17332: LIST
17333: LIST
17334: PUSH
17335: LD_INT 34
17337: PUSH
17338: LD_INT 32
17340: PUSH
17341: EMPTY
17342: LIST
17343: LIST
17344: PUSH
17345: EMPTY
17346: LIST
17347: LIST
17348: LIST
17349: LIST
17350: PUSH
17351: EMPTY
17352: LIST
17353: LIST
17354: LIST
17355: PPUSH
17356: CALL_OW 69
17360: ST_TO_ADDR
// if not tmp then
17361: LD_VAR 0 2
17365: NOT
17366: IFFALSE 17370
// exit ;
17368: GO 17420
// for i in tmp do
17370: LD_ADDR_VAR 0 1
17374: PUSH
17375: LD_VAR 0 2
17379: PUSH
17380: FOR_IN
17381: IFFALSE 17418
// if GetCargo ( i , mat_artifact ) = 0 then
17383: LD_VAR 0 1
17387: PPUSH
17388: LD_INT 4
17390: PPUSH
17391: CALL_OW 289
17395: PUSH
17396: LD_INT 0
17398: EQUAL
17399: IFFALSE 17416
// SetCargo ( i , mat_siberit , 100 ) ;
17401: LD_VAR 0 1
17405: PPUSH
17406: LD_INT 3
17408: PPUSH
17409: LD_INT 100
17411: PPUSH
17412: CALL_OW 290
17416: GO 17380
17418: POP
17419: POP
// end ;
17420: PPOPN 2
17422: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17423: LD_EXP 29
17427: PUSH
17428: LD_EXP 74
17432: AND
17433: IFFALSE 17616
17435: GO 17437
17437: DISABLE
17438: LD_INT 0
17440: PPUSH
17441: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17442: LD_ADDR_VAR 0 2
17446: PUSH
17447: LD_INT 22
17449: PUSH
17450: LD_OWVAR 2
17454: PUSH
17455: EMPTY
17456: LIST
17457: LIST
17458: PPUSH
17459: CALL_OW 69
17463: ST_TO_ADDR
// if not tmp then
17464: LD_VAR 0 2
17468: NOT
17469: IFFALSE 17473
// exit ;
17471: GO 17616
// for i := 1 to 2 do
17473: LD_ADDR_VAR 0 1
17477: PUSH
17478: DOUBLE
17479: LD_INT 1
17481: DEC
17482: ST_TO_ADDR
17483: LD_INT 2
17485: PUSH
17486: FOR_TO
17487: IFFALSE 17614
// begin uc_side := your_side ;
17489: LD_ADDR_OWVAR 20
17493: PUSH
17494: LD_OWVAR 2
17498: ST_TO_ADDR
// uc_nation := nation_american ;
17499: LD_ADDR_OWVAR 21
17503: PUSH
17504: LD_INT 1
17506: ST_TO_ADDR
// vc_chassis := us_morphling ;
17507: LD_ADDR_OWVAR 37
17511: PUSH
17512: LD_INT 5
17514: ST_TO_ADDR
// vc_engine := engine_siberite ;
17515: LD_ADDR_OWVAR 39
17519: PUSH
17520: LD_INT 3
17522: ST_TO_ADDR
// vc_control := control_computer ;
17523: LD_ADDR_OWVAR 38
17527: PUSH
17528: LD_INT 3
17530: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17531: LD_ADDR_OWVAR 40
17535: PUSH
17536: LD_INT 10
17538: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17539: LD_VAR 0 2
17543: PUSH
17544: LD_INT 1
17546: ARRAY
17547: PPUSH
17548: CALL_OW 310
17552: NOT
17553: IFFALSE 17600
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17555: CALL_OW 45
17559: PPUSH
17560: LD_VAR 0 2
17564: PUSH
17565: LD_INT 1
17567: ARRAY
17568: PPUSH
17569: CALL_OW 250
17573: PPUSH
17574: LD_VAR 0 2
17578: PUSH
17579: LD_INT 1
17581: ARRAY
17582: PPUSH
17583: CALL_OW 251
17587: PPUSH
17588: LD_INT 12
17590: PPUSH
17591: LD_INT 1
17593: PPUSH
17594: CALL_OW 50
17598: GO 17612
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17600: CALL_OW 45
17604: PPUSH
17605: LD_INT 1
17607: PPUSH
17608: CALL_OW 51
// end ;
17612: GO 17486
17614: POP
17615: POP
// end ;
17616: PPOPN 2
17618: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17619: LD_EXP 29
17623: PUSH
17624: LD_EXP 75
17628: AND
17629: IFFALSE 17851
17631: GO 17633
17633: DISABLE
17634: LD_INT 0
17636: PPUSH
17637: PPUSH
17638: PPUSH
17639: PPUSH
17640: PPUSH
17641: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17642: LD_ADDR_VAR 0 6
17646: PUSH
17647: LD_INT 22
17649: PUSH
17650: LD_OWVAR 2
17654: PUSH
17655: EMPTY
17656: LIST
17657: LIST
17658: PUSH
17659: LD_INT 21
17661: PUSH
17662: LD_INT 1
17664: PUSH
17665: EMPTY
17666: LIST
17667: LIST
17668: PUSH
17669: LD_INT 3
17671: PUSH
17672: LD_INT 23
17674: PUSH
17675: LD_INT 0
17677: PUSH
17678: EMPTY
17679: LIST
17680: LIST
17681: PUSH
17682: EMPTY
17683: LIST
17684: LIST
17685: PUSH
17686: EMPTY
17687: LIST
17688: LIST
17689: LIST
17690: PPUSH
17691: CALL_OW 69
17695: ST_TO_ADDR
// if not tmp then
17696: LD_VAR 0 6
17700: NOT
17701: IFFALSE 17705
// exit ;
17703: GO 17851
// s1 := rand ( 1 , 4 ) ;
17705: LD_ADDR_VAR 0 2
17709: PUSH
17710: LD_INT 1
17712: PPUSH
17713: LD_INT 4
17715: PPUSH
17716: CALL_OW 12
17720: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17721: LD_ADDR_VAR 0 4
17725: PUSH
17726: LD_VAR 0 6
17730: PUSH
17731: LD_INT 1
17733: ARRAY
17734: PPUSH
17735: LD_VAR 0 2
17739: PPUSH
17740: CALL_OW 259
17744: ST_TO_ADDR
// if s1 = 1 then
17745: LD_VAR 0 2
17749: PUSH
17750: LD_INT 1
17752: EQUAL
17753: IFFALSE 17773
// s2 := rand ( 2 , 4 ) else
17755: LD_ADDR_VAR 0 3
17759: PUSH
17760: LD_INT 2
17762: PPUSH
17763: LD_INT 4
17765: PPUSH
17766: CALL_OW 12
17770: ST_TO_ADDR
17771: GO 17781
// s2 := 1 ;
17773: LD_ADDR_VAR 0 3
17777: PUSH
17778: LD_INT 1
17780: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
17781: LD_ADDR_VAR 0 5
17785: PUSH
17786: LD_VAR 0 6
17790: PUSH
17791: LD_INT 1
17793: ARRAY
17794: PPUSH
17795: LD_VAR 0 3
17799: PPUSH
17800: CALL_OW 259
17804: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
17805: LD_VAR 0 6
17809: PUSH
17810: LD_INT 1
17812: ARRAY
17813: PPUSH
17814: LD_VAR 0 2
17818: PPUSH
17819: LD_VAR 0 5
17823: PPUSH
17824: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
17828: LD_VAR 0 6
17832: PUSH
17833: LD_INT 1
17835: ARRAY
17836: PPUSH
17837: LD_VAR 0 3
17841: PPUSH
17842: LD_VAR 0 4
17846: PPUSH
17847: CALL_OW 237
// end ;
17851: PPOPN 6
17853: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
17854: LD_EXP 29
17858: PUSH
17859: LD_EXP 76
17863: AND
17864: IFFALSE 17943
17866: GO 17868
17868: DISABLE
17869: LD_INT 0
17871: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
17872: LD_ADDR_VAR 0 1
17876: PUSH
17877: LD_INT 22
17879: PUSH
17880: LD_OWVAR 2
17884: PUSH
17885: EMPTY
17886: LIST
17887: LIST
17888: PUSH
17889: LD_INT 30
17891: PUSH
17892: LD_INT 3
17894: PUSH
17895: EMPTY
17896: LIST
17897: LIST
17898: PUSH
17899: EMPTY
17900: LIST
17901: LIST
17902: PPUSH
17903: CALL_OW 69
17907: ST_TO_ADDR
// if not tmp then
17908: LD_VAR 0 1
17912: NOT
17913: IFFALSE 17917
// exit ;
17915: GO 17943
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17917: LD_VAR 0 1
17921: PUSH
17922: LD_INT 1
17924: PPUSH
17925: LD_VAR 0 1
17929: PPUSH
17930: CALL_OW 12
17934: ARRAY
17935: PPUSH
17936: LD_INT 1
17938: PPUSH
17939: CALL_OW 234
// end ;
17943: PPOPN 1
17945: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
17946: LD_EXP 29
17950: PUSH
17951: LD_EXP 77
17955: AND
17956: IFFALSE 18068
17958: GO 17960
17960: DISABLE
17961: LD_INT 0
17963: PPUSH
17964: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
17965: LD_ADDR_VAR 0 2
17969: PUSH
17970: LD_INT 22
17972: PUSH
17973: LD_OWVAR 2
17977: PUSH
17978: EMPTY
17979: LIST
17980: LIST
17981: PUSH
17982: LD_INT 2
17984: PUSH
17985: LD_INT 30
17987: PUSH
17988: LD_INT 27
17990: PUSH
17991: EMPTY
17992: LIST
17993: LIST
17994: PUSH
17995: LD_INT 30
17997: PUSH
17998: LD_INT 26
18000: PUSH
18001: EMPTY
18002: LIST
18003: LIST
18004: PUSH
18005: LD_INT 30
18007: PUSH
18008: LD_INT 28
18010: PUSH
18011: EMPTY
18012: LIST
18013: LIST
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: PUSH
18021: EMPTY
18022: LIST
18023: LIST
18024: PPUSH
18025: CALL_OW 69
18029: ST_TO_ADDR
// if not tmp then
18030: LD_VAR 0 2
18034: NOT
18035: IFFALSE 18039
// exit ;
18037: GO 18068
// for i in tmp do
18039: LD_ADDR_VAR 0 1
18043: PUSH
18044: LD_VAR 0 2
18048: PUSH
18049: FOR_IN
18050: IFFALSE 18066
// SetLives ( i , 1 ) ;
18052: LD_VAR 0 1
18056: PPUSH
18057: LD_INT 1
18059: PPUSH
18060: CALL_OW 234
18064: GO 18049
18066: POP
18067: POP
// end ;
18068: PPOPN 2
18070: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18071: LD_EXP 29
18075: PUSH
18076: LD_EXP 78
18080: AND
18081: IFFALSE 18368
18083: GO 18085
18085: DISABLE
18086: LD_INT 0
18088: PPUSH
18089: PPUSH
18090: PPUSH
// begin i := rand ( 1 , 7 ) ;
18091: LD_ADDR_VAR 0 1
18095: PUSH
18096: LD_INT 1
18098: PPUSH
18099: LD_INT 7
18101: PPUSH
18102: CALL_OW 12
18106: ST_TO_ADDR
// case i of 1 :
18107: LD_VAR 0 1
18111: PUSH
18112: LD_INT 1
18114: DOUBLE
18115: EQUAL
18116: IFTRUE 18120
18118: GO 18130
18120: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18121: LD_STRING earthquake(getX(game), 0, 32)
18123: PPUSH
18124: CALL_OW 559
18128: GO 18368
18130: LD_INT 2
18132: DOUBLE
18133: EQUAL
18134: IFTRUE 18138
18136: GO 18152
18138: POP
// begin ToLua ( displayStucuk(); ) ;
18139: LD_STRING displayStucuk();
18141: PPUSH
18142: CALL_OW 559
// ResetFog ;
18146: CALL_OW 335
// end ; 3 :
18150: GO 18368
18152: LD_INT 3
18154: DOUBLE
18155: EQUAL
18156: IFTRUE 18160
18158: GO 18264
18160: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18161: LD_ADDR_VAR 0 2
18165: PUSH
18166: LD_INT 22
18168: PUSH
18169: LD_OWVAR 2
18173: PUSH
18174: EMPTY
18175: LIST
18176: LIST
18177: PUSH
18178: LD_INT 25
18180: PUSH
18181: LD_INT 1
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: PUSH
18188: EMPTY
18189: LIST
18190: LIST
18191: PPUSH
18192: CALL_OW 69
18196: ST_TO_ADDR
// if not tmp then
18197: LD_VAR 0 2
18201: NOT
18202: IFFALSE 18206
// exit ;
18204: GO 18368
// un := tmp [ rand ( 1 , tmp ) ] ;
18206: LD_ADDR_VAR 0 3
18210: PUSH
18211: LD_VAR 0 2
18215: PUSH
18216: LD_INT 1
18218: PPUSH
18219: LD_VAR 0 2
18223: PPUSH
18224: CALL_OW 12
18228: ARRAY
18229: ST_TO_ADDR
// if Crawls ( un ) then
18230: LD_VAR 0 3
18234: PPUSH
18235: CALL_OW 318
18239: IFFALSE 18250
// ComWalk ( un ) ;
18241: LD_VAR 0 3
18245: PPUSH
18246: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18250: LD_VAR 0 3
18254: PPUSH
18255: LD_INT 8
18257: PPUSH
18258: CALL_OW 336
// end ; 4 :
18262: GO 18368
18264: LD_INT 4
18266: DOUBLE
18267: EQUAL
18268: IFTRUE 18272
18270: GO 18346
18272: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18273: LD_ADDR_VAR 0 2
18277: PUSH
18278: LD_INT 22
18280: PUSH
18281: LD_OWVAR 2
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: PUSH
18290: LD_INT 30
18292: PUSH
18293: LD_INT 29
18295: PUSH
18296: EMPTY
18297: LIST
18298: LIST
18299: PUSH
18300: EMPTY
18301: LIST
18302: LIST
18303: PPUSH
18304: CALL_OW 69
18308: ST_TO_ADDR
// if not tmp then
18309: LD_VAR 0 2
18313: NOT
18314: IFFALSE 18318
// exit ;
18316: GO 18368
// CenterNowOnUnits ( tmp [ 1 ] ) ;
18318: LD_VAR 0 2
18322: PUSH
18323: LD_INT 1
18325: ARRAY
18326: PPUSH
18327: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
18331: LD_VAR 0 2
18335: PUSH
18336: LD_INT 1
18338: ARRAY
18339: PPUSH
18340: CALL_OW 65
// end ; 5 .. 7 :
18344: GO 18368
18346: LD_INT 5
18348: DOUBLE
18349: GREATEREQUAL
18350: IFFALSE 18358
18352: LD_INT 7
18354: DOUBLE
18355: LESSEQUAL
18356: IFTRUE 18360
18358: GO 18367
18360: POP
// StreamSibBomb ; end ;
18361: CALL 14605 0 0
18365: GO 18368
18367: POP
// end ;
18368: PPOPN 3
18370: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18371: LD_EXP 29
18375: PUSH
18376: LD_EXP 79
18380: AND
18381: IFFALSE 18537
18383: GO 18385
18385: DISABLE
18386: LD_INT 0
18388: PPUSH
18389: PPUSH
18390: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18391: LD_ADDR_VAR 0 2
18395: PUSH
18396: LD_INT 81
18398: PUSH
18399: LD_OWVAR 2
18403: PUSH
18404: EMPTY
18405: LIST
18406: LIST
18407: PUSH
18408: LD_INT 2
18410: PUSH
18411: LD_INT 21
18413: PUSH
18414: LD_INT 1
18416: PUSH
18417: EMPTY
18418: LIST
18419: LIST
18420: PUSH
18421: LD_INT 21
18423: PUSH
18424: LD_INT 2
18426: PUSH
18427: EMPTY
18428: LIST
18429: LIST
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: LIST
18435: PUSH
18436: EMPTY
18437: LIST
18438: LIST
18439: PPUSH
18440: CALL_OW 69
18444: ST_TO_ADDR
// if not tmp then
18445: LD_VAR 0 2
18449: NOT
18450: IFFALSE 18454
// exit ;
18452: GO 18537
// p := 0 ;
18454: LD_ADDR_VAR 0 3
18458: PUSH
18459: LD_INT 0
18461: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18462: LD_INT 35
18464: PPUSH
18465: CALL_OW 67
// p := p + 1 ;
18469: LD_ADDR_VAR 0 3
18473: PUSH
18474: LD_VAR 0 3
18478: PUSH
18479: LD_INT 1
18481: PLUS
18482: ST_TO_ADDR
// for i in tmp do
18483: LD_ADDR_VAR 0 1
18487: PUSH
18488: LD_VAR 0 2
18492: PUSH
18493: FOR_IN
18494: IFFALSE 18525
// if GetLives ( i ) < 1000 then
18496: LD_VAR 0 1
18500: PPUSH
18501: CALL_OW 256
18505: PUSH
18506: LD_INT 1000
18508: LESS
18509: IFFALSE 18523
// SetLives ( i , 1000 ) ;
18511: LD_VAR 0 1
18515: PPUSH
18516: LD_INT 1000
18518: PPUSH
18519: CALL_OW 234
18523: GO 18493
18525: POP
18526: POP
// until p > 20 ;
18527: LD_VAR 0 3
18531: PUSH
18532: LD_INT 20
18534: GREATER
18535: IFFALSE 18462
// end ;
18537: PPOPN 3
18539: END
// every 0 0$1 trigger StreamModeActive and sTime do
18540: LD_EXP 29
18544: PUSH
18545: LD_EXP 80
18549: AND
18550: IFFALSE 18585
18552: GO 18554
18554: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18555: LD_INT 28
18557: PPUSH
18558: LD_OWVAR 2
18562: PPUSH
18563: LD_INT 2
18565: PPUSH
18566: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18570: LD_INT 30
18572: PPUSH
18573: LD_OWVAR 2
18577: PPUSH
18578: LD_INT 2
18580: PPUSH
18581: CALL_OW 322
// end ;
18585: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18586: LD_EXP 29
18590: PUSH
18591: LD_EXP 81
18595: AND
18596: IFFALSE 18717
18598: GO 18600
18600: DISABLE
18601: LD_INT 0
18603: PPUSH
18604: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18605: LD_ADDR_VAR 0 2
18609: PUSH
18610: LD_INT 22
18612: PUSH
18613: LD_OWVAR 2
18617: PUSH
18618: EMPTY
18619: LIST
18620: LIST
18621: PUSH
18622: LD_INT 21
18624: PUSH
18625: LD_INT 1
18627: PUSH
18628: EMPTY
18629: LIST
18630: LIST
18631: PUSH
18632: LD_INT 3
18634: PUSH
18635: LD_INT 23
18637: PUSH
18638: LD_INT 0
18640: PUSH
18641: EMPTY
18642: LIST
18643: LIST
18644: PUSH
18645: EMPTY
18646: LIST
18647: LIST
18648: PUSH
18649: EMPTY
18650: LIST
18651: LIST
18652: LIST
18653: PPUSH
18654: CALL_OW 69
18658: ST_TO_ADDR
// if not tmp then
18659: LD_VAR 0 2
18663: NOT
18664: IFFALSE 18668
// exit ;
18666: GO 18717
// for i in tmp do
18668: LD_ADDR_VAR 0 1
18672: PUSH
18673: LD_VAR 0 2
18677: PUSH
18678: FOR_IN
18679: IFFALSE 18715
// begin if Crawls ( i ) then
18681: LD_VAR 0 1
18685: PPUSH
18686: CALL_OW 318
18690: IFFALSE 18701
// ComWalk ( i ) ;
18692: LD_VAR 0 1
18696: PPUSH
18697: CALL_OW 138
// SetClass ( i , 2 ) ;
18701: LD_VAR 0 1
18705: PPUSH
18706: LD_INT 2
18708: PPUSH
18709: CALL_OW 336
// end ;
18713: GO 18678
18715: POP
18716: POP
// end ;
18717: PPOPN 2
18719: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18720: LD_EXP 29
18724: PUSH
18725: LD_EXP 82
18729: AND
18730: IFFALSE 19018
18732: GO 18734
18734: DISABLE
18735: LD_INT 0
18737: PPUSH
18738: PPUSH
18739: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
18740: LD_OWVAR 2
18744: PPUSH
18745: LD_INT 9
18747: PPUSH
18748: LD_INT 1
18750: PPUSH
18751: LD_INT 1
18753: PPUSH
18754: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
18758: LD_INT 9
18760: PPUSH
18761: LD_OWVAR 2
18765: PPUSH
18766: CALL_OW 343
// uc_side := 9 ;
18770: LD_ADDR_OWVAR 20
18774: PUSH
18775: LD_INT 9
18777: ST_TO_ADDR
// uc_nation := 2 ;
18778: LD_ADDR_OWVAR 21
18782: PUSH
18783: LD_INT 2
18785: ST_TO_ADDR
// hc_name := Dark Warrior ;
18786: LD_ADDR_OWVAR 26
18790: PUSH
18791: LD_STRING Dark Warrior
18793: ST_TO_ADDR
// hc_gallery :=  ;
18794: LD_ADDR_OWVAR 33
18798: PUSH
18799: LD_STRING 
18801: ST_TO_ADDR
// hc_noskilllimit := true ;
18802: LD_ADDR_OWVAR 76
18806: PUSH
18807: LD_INT 1
18809: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
18810: LD_ADDR_OWVAR 31
18814: PUSH
18815: LD_INT 30
18817: PUSH
18818: LD_INT 30
18820: PUSH
18821: LD_INT 30
18823: PUSH
18824: LD_INT 30
18826: PUSH
18827: EMPTY
18828: LIST
18829: LIST
18830: LIST
18831: LIST
18832: ST_TO_ADDR
// un := CreateHuman ;
18833: LD_ADDR_VAR 0 3
18837: PUSH
18838: CALL_OW 44
18842: ST_TO_ADDR
// hc_noskilllimit := false ;
18843: LD_ADDR_OWVAR 76
18847: PUSH
18848: LD_INT 0
18850: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18851: LD_VAR 0 3
18855: PPUSH
18856: LD_INT 1
18858: PPUSH
18859: CALL_OW 51
// ToLua ( playRanger() ) ;
18863: LD_STRING playRanger()
18865: PPUSH
18866: CALL_OW 559
// p := 0 ;
18870: LD_ADDR_VAR 0 2
18874: PUSH
18875: LD_INT 0
18877: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18878: LD_INT 35
18880: PPUSH
18881: CALL_OW 67
// p := p + 1 ;
18885: LD_ADDR_VAR 0 2
18889: PUSH
18890: LD_VAR 0 2
18894: PUSH
18895: LD_INT 1
18897: PLUS
18898: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
18899: LD_VAR 0 3
18903: PPUSH
18904: CALL_OW 256
18908: PUSH
18909: LD_INT 1000
18911: LESS
18912: IFFALSE 18926
// SetLives ( un , 1000 ) ;
18914: LD_VAR 0 3
18918: PPUSH
18919: LD_INT 1000
18921: PPUSH
18922: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
18926: LD_VAR 0 3
18930: PPUSH
18931: LD_INT 81
18933: PUSH
18934: LD_OWVAR 2
18938: PUSH
18939: EMPTY
18940: LIST
18941: LIST
18942: PUSH
18943: LD_INT 91
18945: PUSH
18946: LD_VAR 0 3
18950: PUSH
18951: LD_INT 30
18953: PUSH
18954: EMPTY
18955: LIST
18956: LIST
18957: LIST
18958: PUSH
18959: EMPTY
18960: LIST
18961: LIST
18962: PPUSH
18963: CALL_OW 69
18967: PPUSH
18968: LD_VAR 0 3
18972: PPUSH
18973: CALL_OW 74
18977: PPUSH
18978: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
18982: LD_VAR 0 2
18986: PUSH
18987: LD_INT 80
18989: GREATER
18990: PUSH
18991: LD_VAR 0 3
18995: PPUSH
18996: CALL_OW 301
19000: OR
19001: IFFALSE 18878
// if un then
19003: LD_VAR 0 3
19007: IFFALSE 19018
// RemoveUnit ( un ) ;
19009: LD_VAR 0 3
19013: PPUSH
19014: CALL_OW 64
// end ;
19018: PPOPN 3
19020: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
19021: LD_EXP 83
19025: IFFALSE 19141
19027: GO 19029
19029: DISABLE
19030: LD_INT 0
19032: PPUSH
19033: PPUSH
19034: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19035: LD_ADDR_VAR 0 2
19039: PUSH
19040: LD_INT 81
19042: PUSH
19043: LD_OWVAR 2
19047: PUSH
19048: EMPTY
19049: LIST
19050: LIST
19051: PUSH
19052: LD_INT 21
19054: PUSH
19055: LD_INT 1
19057: PUSH
19058: EMPTY
19059: LIST
19060: LIST
19061: PUSH
19062: EMPTY
19063: LIST
19064: LIST
19065: PPUSH
19066: CALL_OW 69
19070: ST_TO_ADDR
// ToLua ( playComputer() ) ;
19071: LD_STRING playComputer()
19073: PPUSH
19074: CALL_OW 559
// if not tmp then
19078: LD_VAR 0 2
19082: NOT
19083: IFFALSE 19087
// exit ;
19085: GO 19141
// for i in tmp do
19087: LD_ADDR_VAR 0 1
19091: PUSH
19092: LD_VAR 0 2
19096: PUSH
19097: FOR_IN
19098: IFFALSE 19139
// for j := 1 to 4 do
19100: LD_ADDR_VAR 0 3
19104: PUSH
19105: DOUBLE
19106: LD_INT 1
19108: DEC
19109: ST_TO_ADDR
19110: LD_INT 4
19112: PUSH
19113: FOR_TO
19114: IFFALSE 19135
// SetSkill ( i , j , 10 ) ;
19116: LD_VAR 0 1
19120: PPUSH
19121: LD_VAR 0 3
19125: PPUSH
19126: LD_INT 10
19128: PPUSH
19129: CALL_OW 237
19133: GO 19113
19135: POP
19136: POP
19137: GO 19097
19139: POP
19140: POP
// end ;
19141: PPOPN 3
19143: END
// every 0 0$1 trigger s30 do var i , tmp ;
19144: LD_EXP 84
19148: IFFALSE 19217
19150: GO 19152
19152: DISABLE
19153: LD_INT 0
19155: PPUSH
19156: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19157: LD_ADDR_VAR 0 2
19161: PUSH
19162: LD_INT 22
19164: PUSH
19165: LD_OWVAR 2
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: PPUSH
19174: CALL_OW 69
19178: ST_TO_ADDR
// if not tmp then
19179: LD_VAR 0 2
19183: NOT
19184: IFFALSE 19188
// exit ;
19186: GO 19217
// for i in tmp do
19188: LD_ADDR_VAR 0 1
19192: PUSH
19193: LD_VAR 0 2
19197: PUSH
19198: FOR_IN
19199: IFFALSE 19215
// SetLives ( i , 300 ) ;
19201: LD_VAR 0 1
19205: PPUSH
19206: LD_INT 300
19208: PPUSH
19209: CALL_OW 234
19213: GO 19198
19215: POP
19216: POP
// end ;
19217: PPOPN 2
19219: END
// every 0 0$1 trigger s60 do var i , tmp ;
19220: LD_EXP 85
19224: IFFALSE 19293
19226: GO 19228
19228: DISABLE
19229: LD_INT 0
19231: PPUSH
19232: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19233: LD_ADDR_VAR 0 2
19237: PUSH
19238: LD_INT 22
19240: PUSH
19241: LD_OWVAR 2
19245: PUSH
19246: EMPTY
19247: LIST
19248: LIST
19249: PPUSH
19250: CALL_OW 69
19254: ST_TO_ADDR
// if not tmp then
19255: LD_VAR 0 2
19259: NOT
19260: IFFALSE 19264
// exit ;
19262: GO 19293
// for i in tmp do
19264: LD_ADDR_VAR 0 1
19268: PUSH
19269: LD_VAR 0 2
19273: PUSH
19274: FOR_IN
19275: IFFALSE 19291
// SetLives ( i , 600 ) ;
19277: LD_VAR 0 1
19281: PPUSH
19282: LD_INT 600
19284: PPUSH
19285: CALL_OW 234
19289: GO 19274
19291: POP
19292: POP
// end ;
19293: PPOPN 2
19295: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19296: LD_INT 0
19298: PPUSH
// case cmd of 301 :
19299: LD_VAR 0 1
19303: PUSH
19304: LD_INT 301
19306: DOUBLE
19307: EQUAL
19308: IFTRUE 19312
19310: GO 19344
19312: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
19313: LD_VAR 0 6
19317: PPUSH
19318: LD_VAR 0 7
19322: PPUSH
19323: LD_VAR 0 8
19327: PPUSH
19328: LD_VAR 0 4
19332: PPUSH
19333: LD_VAR 0 5
19337: PPUSH
19338: CALL 20545 0 5
19342: GO 19465
19344: LD_INT 302
19346: DOUBLE
19347: EQUAL
19348: IFTRUE 19352
19350: GO 19389
19352: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
19353: LD_VAR 0 6
19357: PPUSH
19358: LD_VAR 0 7
19362: PPUSH
19363: LD_VAR 0 8
19367: PPUSH
19368: LD_VAR 0 9
19372: PPUSH
19373: LD_VAR 0 4
19377: PPUSH
19378: LD_VAR 0 5
19382: PPUSH
19383: CALL 20636 0 6
19387: GO 19465
19389: LD_INT 303
19391: DOUBLE
19392: EQUAL
19393: IFTRUE 19397
19395: GO 19434
19397: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
19398: LD_VAR 0 6
19402: PPUSH
19403: LD_VAR 0 7
19407: PPUSH
19408: LD_VAR 0 8
19412: PPUSH
19413: LD_VAR 0 9
19417: PPUSH
19418: LD_VAR 0 4
19422: PPUSH
19423: LD_VAR 0 5
19427: PPUSH
19428: CALL 19470 0 6
19432: GO 19465
19434: LD_INT 304
19436: DOUBLE
19437: EQUAL
19438: IFTRUE 19442
19440: GO 19464
19442: POP
// hHackTeleport ( unit , x , y ) ; end ;
19443: LD_VAR 0 2
19447: PPUSH
19448: LD_VAR 0 4
19452: PPUSH
19453: LD_VAR 0 5
19457: PPUSH
19458: CALL 21229 0 3
19462: GO 19465
19464: POP
// end ;
19465: LD_VAR 0 12
19469: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
19470: LD_INT 0
19472: PPUSH
19473: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
19474: LD_VAR 0 1
19478: PUSH
19479: LD_INT 1
19481: LESS
19482: PUSH
19483: LD_VAR 0 1
19487: PUSH
19488: LD_INT 3
19490: GREATER
19491: OR
19492: PUSH
19493: LD_VAR 0 5
19497: PPUSH
19498: LD_VAR 0 6
19502: PPUSH
19503: CALL_OW 428
19507: OR
19508: IFFALSE 19512
// exit ;
19510: GO 20232
// uc_side := your_side ;
19512: LD_ADDR_OWVAR 20
19516: PUSH
19517: LD_OWVAR 2
19521: ST_TO_ADDR
// uc_nation := nation ;
19522: LD_ADDR_OWVAR 21
19526: PUSH
19527: LD_VAR 0 1
19531: ST_TO_ADDR
// bc_level = 1 ;
19532: LD_ADDR_OWVAR 43
19536: PUSH
19537: LD_INT 1
19539: ST_TO_ADDR
// case btype of 1 :
19540: LD_VAR 0 2
19544: PUSH
19545: LD_INT 1
19547: DOUBLE
19548: EQUAL
19549: IFTRUE 19553
19551: GO 19564
19553: POP
// bc_type := b_depot ; 2 :
19554: LD_ADDR_OWVAR 42
19558: PUSH
19559: LD_INT 0
19561: ST_TO_ADDR
19562: GO 20176
19564: LD_INT 2
19566: DOUBLE
19567: EQUAL
19568: IFTRUE 19572
19570: GO 19583
19572: POP
// bc_type := b_warehouse ; 3 :
19573: LD_ADDR_OWVAR 42
19577: PUSH
19578: LD_INT 1
19580: ST_TO_ADDR
19581: GO 20176
19583: LD_INT 3
19585: DOUBLE
19586: EQUAL
19587: IFTRUE 19591
19589: GO 19602
19591: POP
// bc_type := b_lab ; 4 .. 9 :
19592: LD_ADDR_OWVAR 42
19596: PUSH
19597: LD_INT 6
19599: ST_TO_ADDR
19600: GO 20176
19602: LD_INT 4
19604: DOUBLE
19605: GREATEREQUAL
19606: IFFALSE 19614
19608: LD_INT 9
19610: DOUBLE
19611: LESSEQUAL
19612: IFTRUE 19616
19614: GO 19668
19616: POP
// begin bc_type := b_lab_half ;
19617: LD_ADDR_OWVAR 42
19621: PUSH
19622: LD_INT 7
19624: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
19625: LD_ADDR_OWVAR 44
19629: PUSH
19630: LD_INT 10
19632: PUSH
19633: LD_INT 11
19635: PUSH
19636: LD_INT 12
19638: PUSH
19639: LD_INT 15
19641: PUSH
19642: LD_INT 14
19644: PUSH
19645: LD_INT 13
19647: PUSH
19648: EMPTY
19649: LIST
19650: LIST
19651: LIST
19652: LIST
19653: LIST
19654: LIST
19655: PUSH
19656: LD_VAR 0 2
19660: PUSH
19661: LD_INT 3
19663: MINUS
19664: ARRAY
19665: ST_TO_ADDR
// end ; 10 .. 13 :
19666: GO 20176
19668: LD_INT 10
19670: DOUBLE
19671: GREATEREQUAL
19672: IFFALSE 19680
19674: LD_INT 13
19676: DOUBLE
19677: LESSEQUAL
19678: IFTRUE 19682
19680: GO 19759
19682: POP
// begin bc_type := b_lab_full ;
19683: LD_ADDR_OWVAR 42
19687: PUSH
19688: LD_INT 8
19690: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
19691: LD_ADDR_OWVAR 44
19695: PUSH
19696: LD_INT 10
19698: PUSH
19699: LD_INT 12
19701: PUSH
19702: LD_INT 14
19704: PUSH
19705: LD_INT 13
19707: PUSH
19708: EMPTY
19709: LIST
19710: LIST
19711: LIST
19712: LIST
19713: PUSH
19714: LD_VAR 0 2
19718: PUSH
19719: LD_INT 9
19721: MINUS
19722: ARRAY
19723: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
19724: LD_ADDR_OWVAR 45
19728: PUSH
19729: LD_INT 11
19731: PUSH
19732: LD_INT 15
19734: PUSH
19735: LD_INT 12
19737: PUSH
19738: LD_INT 15
19740: PUSH
19741: EMPTY
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: PUSH
19747: LD_VAR 0 2
19751: PUSH
19752: LD_INT 9
19754: MINUS
19755: ARRAY
19756: ST_TO_ADDR
// end ; 14 :
19757: GO 20176
19759: LD_INT 14
19761: DOUBLE
19762: EQUAL
19763: IFTRUE 19767
19765: GO 19778
19767: POP
// bc_type := b_workshop ; 15 :
19768: LD_ADDR_OWVAR 42
19772: PUSH
19773: LD_INT 2
19775: ST_TO_ADDR
19776: GO 20176
19778: LD_INT 15
19780: DOUBLE
19781: EQUAL
19782: IFTRUE 19786
19784: GO 19797
19786: POP
// bc_type := b_factory ; 16 :
19787: LD_ADDR_OWVAR 42
19791: PUSH
19792: LD_INT 3
19794: ST_TO_ADDR
19795: GO 20176
19797: LD_INT 16
19799: DOUBLE
19800: EQUAL
19801: IFTRUE 19805
19803: GO 19816
19805: POP
// bc_type := b_ext_gun ; 17 :
19806: LD_ADDR_OWVAR 42
19810: PUSH
19811: LD_INT 17
19813: ST_TO_ADDR
19814: GO 20176
19816: LD_INT 17
19818: DOUBLE
19819: EQUAL
19820: IFTRUE 19824
19822: GO 19852
19824: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
19825: LD_ADDR_OWVAR 42
19829: PUSH
19830: LD_INT 19
19832: PUSH
19833: LD_INT 23
19835: PUSH
19836: LD_INT 19
19838: PUSH
19839: EMPTY
19840: LIST
19841: LIST
19842: LIST
19843: PUSH
19844: LD_VAR 0 1
19848: ARRAY
19849: ST_TO_ADDR
19850: GO 20176
19852: LD_INT 18
19854: DOUBLE
19855: EQUAL
19856: IFTRUE 19860
19858: GO 19871
19860: POP
// bc_type := b_ext_radar ; 19 :
19861: LD_ADDR_OWVAR 42
19865: PUSH
19866: LD_INT 20
19868: ST_TO_ADDR
19869: GO 20176
19871: LD_INT 19
19873: DOUBLE
19874: EQUAL
19875: IFTRUE 19879
19877: GO 19890
19879: POP
// bc_type := b_ext_radio ; 20 :
19880: LD_ADDR_OWVAR 42
19884: PUSH
19885: LD_INT 22
19887: ST_TO_ADDR
19888: GO 20176
19890: LD_INT 20
19892: DOUBLE
19893: EQUAL
19894: IFTRUE 19898
19896: GO 19909
19898: POP
// bc_type := b_ext_siberium ; 21 :
19899: LD_ADDR_OWVAR 42
19903: PUSH
19904: LD_INT 21
19906: ST_TO_ADDR
19907: GO 20176
19909: LD_INT 21
19911: DOUBLE
19912: EQUAL
19913: IFTRUE 19917
19915: GO 19928
19917: POP
// bc_type := b_ext_computer ; 22 :
19918: LD_ADDR_OWVAR 42
19922: PUSH
19923: LD_INT 24
19925: ST_TO_ADDR
19926: GO 20176
19928: LD_INT 22
19930: DOUBLE
19931: EQUAL
19932: IFTRUE 19936
19934: GO 19947
19936: POP
// bc_type := b_ext_track ; 23 :
19937: LD_ADDR_OWVAR 42
19941: PUSH
19942: LD_INT 16
19944: ST_TO_ADDR
19945: GO 20176
19947: LD_INT 23
19949: DOUBLE
19950: EQUAL
19951: IFTRUE 19955
19953: GO 19966
19955: POP
// bc_type := b_ext_laser ; 24 :
19956: LD_ADDR_OWVAR 42
19960: PUSH
19961: LD_INT 25
19963: ST_TO_ADDR
19964: GO 20176
19966: LD_INT 24
19968: DOUBLE
19969: EQUAL
19970: IFTRUE 19974
19972: GO 19985
19974: POP
// bc_type := b_control_tower ; 25 :
19975: LD_ADDR_OWVAR 42
19979: PUSH
19980: LD_INT 36
19982: ST_TO_ADDR
19983: GO 20176
19985: LD_INT 25
19987: DOUBLE
19988: EQUAL
19989: IFTRUE 19993
19991: GO 20004
19993: POP
// bc_type := b_breastwork ; 26 :
19994: LD_ADDR_OWVAR 42
19998: PUSH
19999: LD_INT 31
20001: ST_TO_ADDR
20002: GO 20176
20004: LD_INT 26
20006: DOUBLE
20007: EQUAL
20008: IFTRUE 20012
20010: GO 20023
20012: POP
// bc_type := b_bunker ; 27 :
20013: LD_ADDR_OWVAR 42
20017: PUSH
20018: LD_INT 32
20020: ST_TO_ADDR
20021: GO 20176
20023: LD_INT 27
20025: DOUBLE
20026: EQUAL
20027: IFTRUE 20031
20029: GO 20042
20031: POP
// bc_type := b_turret ; 28 :
20032: LD_ADDR_OWVAR 42
20036: PUSH
20037: LD_INT 33
20039: ST_TO_ADDR
20040: GO 20176
20042: LD_INT 28
20044: DOUBLE
20045: EQUAL
20046: IFTRUE 20050
20048: GO 20061
20050: POP
// bc_type := b_armoury ; 29 :
20051: LD_ADDR_OWVAR 42
20055: PUSH
20056: LD_INT 4
20058: ST_TO_ADDR
20059: GO 20176
20061: LD_INT 29
20063: DOUBLE
20064: EQUAL
20065: IFTRUE 20069
20067: GO 20080
20069: POP
// bc_type := b_barracks ; 30 :
20070: LD_ADDR_OWVAR 42
20074: PUSH
20075: LD_INT 5
20077: ST_TO_ADDR
20078: GO 20176
20080: LD_INT 30
20082: DOUBLE
20083: EQUAL
20084: IFTRUE 20088
20086: GO 20099
20088: POP
// bc_type := b_solar_power ; 31 :
20089: LD_ADDR_OWVAR 42
20093: PUSH
20094: LD_INT 27
20096: ST_TO_ADDR
20097: GO 20176
20099: LD_INT 31
20101: DOUBLE
20102: EQUAL
20103: IFTRUE 20107
20105: GO 20118
20107: POP
// bc_type := b_oil_power ; 32 :
20108: LD_ADDR_OWVAR 42
20112: PUSH
20113: LD_INT 26
20115: ST_TO_ADDR
20116: GO 20176
20118: LD_INT 32
20120: DOUBLE
20121: EQUAL
20122: IFTRUE 20126
20124: GO 20137
20126: POP
// bc_type := b_siberite_power ; 33 :
20127: LD_ADDR_OWVAR 42
20131: PUSH
20132: LD_INT 28
20134: ST_TO_ADDR
20135: GO 20176
20137: LD_INT 33
20139: DOUBLE
20140: EQUAL
20141: IFTRUE 20145
20143: GO 20156
20145: POP
// bc_type := b_oil_mine ; 34 :
20146: LD_ADDR_OWVAR 42
20150: PUSH
20151: LD_INT 29
20153: ST_TO_ADDR
20154: GO 20176
20156: LD_INT 34
20158: DOUBLE
20159: EQUAL
20160: IFTRUE 20164
20162: GO 20175
20164: POP
// bc_type := b_siberite_mine ; end ;
20165: LD_ADDR_OWVAR 42
20169: PUSH
20170: LD_INT 30
20172: ST_TO_ADDR
20173: GO 20176
20175: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
20176: LD_ADDR_VAR 0 8
20180: PUSH
20181: LD_VAR 0 5
20185: PPUSH
20186: LD_VAR 0 6
20190: PPUSH
20191: LD_VAR 0 3
20195: PPUSH
20196: CALL_OW 47
20200: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
20201: LD_OWVAR 42
20205: PUSH
20206: LD_INT 32
20208: PUSH
20209: LD_INT 33
20211: PUSH
20212: EMPTY
20213: LIST
20214: LIST
20215: IN
20216: IFFALSE 20232
// PlaceWeaponTurret ( b , weapon ) ;
20218: LD_VAR 0 8
20222: PPUSH
20223: LD_VAR 0 4
20227: PPUSH
20228: CALL_OW 431
// end ;
20232: LD_VAR 0 7
20236: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
20237: LD_INT 0
20239: PPUSH
20240: PPUSH
20241: PPUSH
20242: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20243: LD_ADDR_VAR 0 4
20247: PUSH
20248: LD_INT 22
20250: PUSH
20251: LD_OWVAR 2
20255: PUSH
20256: EMPTY
20257: LIST
20258: LIST
20259: PUSH
20260: LD_INT 2
20262: PUSH
20263: LD_INT 30
20265: PUSH
20266: LD_INT 0
20268: PUSH
20269: EMPTY
20270: LIST
20271: LIST
20272: PUSH
20273: LD_INT 30
20275: PUSH
20276: LD_INT 1
20278: PUSH
20279: EMPTY
20280: LIST
20281: LIST
20282: PUSH
20283: EMPTY
20284: LIST
20285: LIST
20286: LIST
20287: PUSH
20288: EMPTY
20289: LIST
20290: LIST
20291: PPUSH
20292: CALL_OW 69
20296: ST_TO_ADDR
// if not tmp then
20297: LD_VAR 0 4
20301: NOT
20302: IFFALSE 20306
// exit ;
20304: GO 20365
// for i in tmp do
20306: LD_ADDR_VAR 0 2
20310: PUSH
20311: LD_VAR 0 4
20315: PUSH
20316: FOR_IN
20317: IFFALSE 20363
// for j = 1 to 3 do
20319: LD_ADDR_VAR 0 3
20323: PUSH
20324: DOUBLE
20325: LD_INT 1
20327: DEC
20328: ST_TO_ADDR
20329: LD_INT 3
20331: PUSH
20332: FOR_TO
20333: IFFALSE 20359
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
20335: LD_VAR 0 2
20339: PPUSH
20340: CALL_OW 274
20344: PPUSH
20345: LD_VAR 0 3
20349: PPUSH
20350: LD_INT 99999
20352: PPUSH
20353: CALL_OW 277
20357: GO 20332
20359: POP
20360: POP
20361: GO 20316
20363: POP
20364: POP
// end ;
20365: LD_VAR 0 1
20369: RET
// export function hHackSetLevel10 ; var i , j ; begin
20370: LD_INT 0
20372: PPUSH
20373: PPUSH
20374: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20375: LD_ADDR_VAR 0 2
20379: PUSH
20380: LD_INT 21
20382: PUSH
20383: LD_INT 1
20385: PUSH
20386: EMPTY
20387: LIST
20388: LIST
20389: PPUSH
20390: CALL_OW 69
20394: PUSH
20395: FOR_IN
20396: IFFALSE 20448
// if IsSelected ( i ) then
20398: LD_VAR 0 2
20402: PPUSH
20403: CALL_OW 306
20407: IFFALSE 20446
// begin for j := 1 to 4 do
20409: LD_ADDR_VAR 0 3
20413: PUSH
20414: DOUBLE
20415: LD_INT 1
20417: DEC
20418: ST_TO_ADDR
20419: LD_INT 4
20421: PUSH
20422: FOR_TO
20423: IFFALSE 20444
// SetSkill ( i , j , 10 ) ;
20425: LD_VAR 0 2
20429: PPUSH
20430: LD_VAR 0 3
20434: PPUSH
20435: LD_INT 10
20437: PPUSH
20438: CALL_OW 237
20442: GO 20422
20444: POP
20445: POP
// end ;
20446: GO 20395
20448: POP
20449: POP
// end ;
20450: LD_VAR 0 1
20454: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
20455: LD_INT 0
20457: PPUSH
20458: PPUSH
20459: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
20460: LD_ADDR_VAR 0 2
20464: PUSH
20465: LD_INT 22
20467: PUSH
20468: LD_OWVAR 2
20472: PUSH
20473: EMPTY
20474: LIST
20475: LIST
20476: PUSH
20477: LD_INT 21
20479: PUSH
20480: LD_INT 1
20482: PUSH
20483: EMPTY
20484: LIST
20485: LIST
20486: PUSH
20487: EMPTY
20488: LIST
20489: LIST
20490: PPUSH
20491: CALL_OW 69
20495: PUSH
20496: FOR_IN
20497: IFFALSE 20538
// begin for j := 1 to 4 do
20499: LD_ADDR_VAR 0 3
20503: PUSH
20504: DOUBLE
20505: LD_INT 1
20507: DEC
20508: ST_TO_ADDR
20509: LD_INT 4
20511: PUSH
20512: FOR_TO
20513: IFFALSE 20534
// SetSkill ( i , j , 10 ) ;
20515: LD_VAR 0 2
20519: PPUSH
20520: LD_VAR 0 3
20524: PPUSH
20525: LD_INT 10
20527: PPUSH
20528: CALL_OW 237
20532: GO 20512
20534: POP
20535: POP
// end ;
20536: GO 20496
20538: POP
20539: POP
// end ;
20540: LD_VAR 0 1
20544: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
20545: LD_INT 0
20547: PPUSH
// uc_side := your_side ;
20548: LD_ADDR_OWVAR 20
20552: PUSH
20553: LD_OWVAR 2
20557: ST_TO_ADDR
// uc_nation := nation ;
20558: LD_ADDR_OWVAR 21
20562: PUSH
20563: LD_VAR 0 1
20567: ST_TO_ADDR
// InitHc ;
20568: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
20572: LD_INT 0
20574: PPUSH
20575: LD_VAR 0 2
20579: PPUSH
20580: LD_VAR 0 3
20584: PPUSH
20585: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
20589: LD_VAR 0 4
20593: PPUSH
20594: LD_VAR 0 5
20598: PPUSH
20599: CALL_OW 428
20603: PUSH
20604: LD_INT 0
20606: EQUAL
20607: IFFALSE 20631
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
20609: CALL_OW 44
20613: PPUSH
20614: LD_VAR 0 4
20618: PPUSH
20619: LD_VAR 0 5
20623: PPUSH
20624: LD_INT 1
20626: PPUSH
20627: CALL_OW 48
// end ;
20631: LD_VAR 0 6
20635: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
20636: LD_INT 0
20638: PPUSH
20639: PPUSH
// uc_side := your_side ;
20640: LD_ADDR_OWVAR 20
20644: PUSH
20645: LD_OWVAR 2
20649: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
20650: LD_VAR 0 1
20654: PUSH
20655: LD_INT 1
20657: PUSH
20658: LD_INT 2
20660: PUSH
20661: LD_INT 3
20663: PUSH
20664: LD_INT 4
20666: PUSH
20667: LD_INT 5
20669: PUSH
20670: EMPTY
20671: LIST
20672: LIST
20673: LIST
20674: LIST
20675: LIST
20676: IN
20677: IFFALSE 20689
// uc_nation := nation_american else
20679: LD_ADDR_OWVAR 21
20683: PUSH
20684: LD_INT 1
20686: ST_TO_ADDR
20687: GO 20732
// if chassis in [ 11 , 12 , 13 , 14 ] then
20689: LD_VAR 0 1
20693: PUSH
20694: LD_INT 11
20696: PUSH
20697: LD_INT 12
20699: PUSH
20700: LD_INT 13
20702: PUSH
20703: LD_INT 14
20705: PUSH
20706: EMPTY
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: IN
20712: IFFALSE 20724
// uc_nation := nation_arabian else
20714: LD_ADDR_OWVAR 21
20718: PUSH
20719: LD_INT 2
20721: ST_TO_ADDR
20722: GO 20732
// uc_nation := nation_russian ;
20724: LD_ADDR_OWVAR 21
20728: PUSH
20729: LD_INT 3
20731: ST_TO_ADDR
// vc_chassis := chassis ;
20732: LD_ADDR_OWVAR 37
20736: PUSH
20737: LD_VAR 0 1
20741: ST_TO_ADDR
// vc_engine := engine ;
20742: LD_ADDR_OWVAR 39
20746: PUSH
20747: LD_VAR 0 2
20751: ST_TO_ADDR
// vc_control := control ;
20752: LD_ADDR_OWVAR 38
20756: PUSH
20757: LD_VAR 0 3
20761: ST_TO_ADDR
// vc_weapon := weapon ;
20762: LD_ADDR_OWVAR 40
20766: PUSH
20767: LD_VAR 0 4
20771: ST_TO_ADDR
// un := CreateVehicle ;
20772: LD_ADDR_VAR 0 8
20776: PUSH
20777: CALL_OW 45
20781: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
20782: LD_VAR 0 8
20786: PPUSH
20787: LD_INT 0
20789: PPUSH
20790: LD_INT 5
20792: PPUSH
20793: CALL_OW 12
20797: PPUSH
20798: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
20802: LD_VAR 0 8
20806: PPUSH
20807: LD_VAR 0 5
20811: PPUSH
20812: LD_VAR 0 6
20816: PPUSH
20817: LD_INT 1
20819: PPUSH
20820: CALL_OW 48
// end ;
20824: LD_VAR 0 7
20828: RET
// export hInvincible ; every 1 do
20829: GO 20831
20831: DISABLE
// hInvincible := [ ] ;
20832: LD_ADDR_EXP 86
20836: PUSH
20837: EMPTY
20838: ST_TO_ADDR
20839: END
// every 10 do var i ;
20840: GO 20842
20842: DISABLE
20843: LD_INT 0
20845: PPUSH
// begin enable ;
20846: ENABLE
// if not hInvincible then
20847: LD_EXP 86
20851: NOT
20852: IFFALSE 20856
// exit ;
20854: GO 20900
// for i in hInvincible do
20856: LD_ADDR_VAR 0 1
20860: PUSH
20861: LD_EXP 86
20865: PUSH
20866: FOR_IN
20867: IFFALSE 20898
// if GetLives ( i ) < 1000 then
20869: LD_VAR 0 1
20873: PPUSH
20874: CALL_OW 256
20878: PUSH
20879: LD_INT 1000
20881: LESS
20882: IFFALSE 20896
// SetLives ( i , 1000 ) ;
20884: LD_VAR 0 1
20888: PPUSH
20889: LD_INT 1000
20891: PPUSH
20892: CALL_OW 234
20896: GO 20866
20898: POP
20899: POP
// end ;
20900: PPOPN 1
20902: END
// export function hHackInvincible ; var i ; begin
20903: LD_INT 0
20905: PPUSH
20906: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
20907: LD_ADDR_VAR 0 2
20911: PUSH
20912: LD_INT 2
20914: PUSH
20915: LD_INT 21
20917: PUSH
20918: LD_INT 1
20920: PUSH
20921: EMPTY
20922: LIST
20923: LIST
20924: PUSH
20925: LD_INT 21
20927: PUSH
20928: LD_INT 2
20930: PUSH
20931: EMPTY
20932: LIST
20933: LIST
20934: PUSH
20935: EMPTY
20936: LIST
20937: LIST
20938: LIST
20939: PPUSH
20940: CALL_OW 69
20944: PUSH
20945: FOR_IN
20946: IFFALSE 21007
// if IsSelected ( i ) then
20948: LD_VAR 0 2
20952: PPUSH
20953: CALL_OW 306
20957: IFFALSE 21005
// begin if i in hInvincible then
20959: LD_VAR 0 2
20963: PUSH
20964: LD_EXP 86
20968: IN
20969: IFFALSE 20989
// hInvincible := hInvincible diff i else
20971: LD_ADDR_EXP 86
20975: PUSH
20976: LD_EXP 86
20980: PUSH
20981: LD_VAR 0 2
20985: DIFF
20986: ST_TO_ADDR
20987: GO 21005
// hInvincible := hInvincible union i ;
20989: LD_ADDR_EXP 86
20993: PUSH
20994: LD_EXP 86
20998: PUSH
20999: LD_VAR 0 2
21003: UNION
21004: ST_TO_ADDR
// end ;
21005: GO 20945
21007: POP
21008: POP
// end ;
21009: LD_VAR 0 1
21013: RET
// export function hHackInvisible ; var i , j ; begin
21014: LD_INT 0
21016: PPUSH
21017: PPUSH
21018: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21019: LD_ADDR_VAR 0 2
21023: PUSH
21024: LD_INT 21
21026: PUSH
21027: LD_INT 1
21029: PUSH
21030: EMPTY
21031: LIST
21032: LIST
21033: PPUSH
21034: CALL_OW 69
21038: PUSH
21039: FOR_IN
21040: IFFALSE 21064
// if IsSelected ( i ) then
21042: LD_VAR 0 2
21046: PPUSH
21047: CALL_OW 306
21051: IFFALSE 21062
// ComForceInvisible ( i ) ;
21053: LD_VAR 0 2
21057: PPUSH
21058: CALL_OW 496
21062: GO 21039
21064: POP
21065: POP
// end ;
21066: LD_VAR 0 1
21070: RET
// export function hHackChangeYourSide ; begin
21071: LD_INT 0
21073: PPUSH
// if your_side = 8 then
21074: LD_OWVAR 2
21078: PUSH
21079: LD_INT 8
21081: EQUAL
21082: IFFALSE 21094
// your_side := 0 else
21084: LD_ADDR_OWVAR 2
21088: PUSH
21089: LD_INT 0
21091: ST_TO_ADDR
21092: GO 21108
// your_side := your_side + 1 ;
21094: LD_ADDR_OWVAR 2
21098: PUSH
21099: LD_OWVAR 2
21103: PUSH
21104: LD_INT 1
21106: PLUS
21107: ST_TO_ADDR
// end ;
21108: LD_VAR 0 1
21112: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21113: LD_INT 0
21115: PPUSH
21116: PPUSH
21117: PPUSH
// for i in all_units do
21118: LD_ADDR_VAR 0 2
21122: PUSH
21123: LD_OWVAR 3
21127: PUSH
21128: FOR_IN
21129: IFFALSE 21207
// if IsSelected ( i ) then
21131: LD_VAR 0 2
21135: PPUSH
21136: CALL_OW 306
21140: IFFALSE 21205
// begin j := GetSide ( i ) ;
21142: LD_ADDR_VAR 0 3
21146: PUSH
21147: LD_VAR 0 2
21151: PPUSH
21152: CALL_OW 255
21156: ST_TO_ADDR
// if j = 8 then
21157: LD_VAR 0 3
21161: PUSH
21162: LD_INT 8
21164: EQUAL
21165: IFFALSE 21177
// j := 0 else
21167: LD_ADDR_VAR 0 3
21171: PUSH
21172: LD_INT 0
21174: ST_TO_ADDR
21175: GO 21191
// j := j + 1 ;
21177: LD_ADDR_VAR 0 3
21181: PUSH
21182: LD_VAR 0 3
21186: PUSH
21187: LD_INT 1
21189: PLUS
21190: ST_TO_ADDR
// SetSide ( i , j ) ;
21191: LD_VAR 0 2
21195: PPUSH
21196: LD_VAR 0 3
21200: PPUSH
21201: CALL_OW 235
// end ;
21205: GO 21128
21207: POP
21208: POP
// end ;
21209: LD_VAR 0 1
21213: RET
// export function hHackFog ; begin
21214: LD_INT 0
21216: PPUSH
// FogOff ( true ) ;
21217: LD_INT 1
21219: PPUSH
21220: CALL_OW 344
// end ;
21224: LD_VAR 0 1
21228: RET
// export function hHackTeleport ( unit , x , y ) ; begin
21229: LD_INT 0
21231: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
21232: LD_VAR 0 1
21236: PPUSH
21237: LD_VAR 0 2
21241: PPUSH
21242: LD_VAR 0 3
21246: PPUSH
21247: LD_INT 1
21249: PPUSH
21250: LD_INT 1
21252: PPUSH
21253: CALL_OW 483
// CenterOnXY ( x , y ) ;
21257: LD_VAR 0 2
21261: PPUSH
21262: LD_VAR 0 3
21266: PPUSH
21267: CALL_OW 84
// end ;
21271: LD_VAR 0 4
21275: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
21276: LD_INT 0
21278: PPUSH
21279: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
21280: LD_VAR 0 1
21284: NOT
21285: PUSH
21286: LD_VAR 0 2
21290: PPUSH
21291: LD_VAR 0 3
21295: PPUSH
21296: CALL_OW 488
21300: NOT
21301: OR
21302: PUSH
21303: LD_VAR 0 1
21307: PPUSH
21308: CALL_OW 266
21312: PUSH
21313: LD_INT 3
21315: NONEQUAL
21316: PUSH
21317: LD_VAR 0 1
21321: PPUSH
21322: CALL_OW 247
21326: PUSH
21327: LD_INT 1
21329: EQUAL
21330: NOT
21331: AND
21332: OR
21333: IFFALSE 21337
// exit ;
21335: GO 21486
// if GetType ( factory ) = unit_human then
21337: LD_VAR 0 1
21341: PPUSH
21342: CALL_OW 247
21346: PUSH
21347: LD_INT 1
21349: EQUAL
21350: IFFALSE 21367
// factory := IsInUnit ( factory ) ;
21352: LD_ADDR_VAR 0 1
21356: PUSH
21357: LD_VAR 0 1
21361: PPUSH
21362: CALL_OW 310
21366: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
21367: LD_VAR 0 1
21371: PPUSH
21372: CALL_OW 266
21376: PUSH
21377: LD_INT 3
21379: NONEQUAL
21380: IFFALSE 21384
// exit ;
21382: GO 21486
// if HexInfo ( x , y ) = factory then
21384: LD_VAR 0 2
21388: PPUSH
21389: LD_VAR 0 3
21393: PPUSH
21394: CALL_OW 428
21398: PUSH
21399: LD_VAR 0 1
21403: EQUAL
21404: IFFALSE 21431
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
21406: LD_ADDR_EXP 87
21410: PUSH
21411: LD_EXP 87
21415: PPUSH
21416: LD_VAR 0 1
21420: PPUSH
21421: LD_INT 0
21423: PPUSH
21424: CALL_OW 1
21428: ST_TO_ADDR
21429: GO 21482
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
21431: LD_ADDR_EXP 87
21435: PUSH
21436: LD_EXP 87
21440: PPUSH
21441: LD_VAR 0 1
21445: PPUSH
21446: LD_VAR 0 1
21450: PPUSH
21451: CALL_OW 255
21455: PUSH
21456: LD_VAR 0 1
21460: PUSH
21461: LD_VAR 0 2
21465: PUSH
21466: LD_VAR 0 3
21470: PUSH
21471: EMPTY
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: PPUSH
21477: CALL_OW 1
21481: ST_TO_ADDR
// UpdateFactoryWaypoints ;
21482: CALL 21491 0 0
// end ;
21486: LD_VAR 0 4
21490: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
21491: LD_INT 0
21493: PPUSH
21494: PPUSH
21495: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
21496: LD_STRING resetFactoryWaypoint();
21498: PPUSH
21499: CALL_OW 559
// if factoryWaypoints then
21503: LD_EXP 87
21507: IFFALSE 21633
// begin list := PrepareArray ( factoryWaypoints ) ;
21509: LD_ADDR_VAR 0 3
21513: PUSH
21514: LD_EXP 87
21518: PPUSH
21519: CALL 68102 0 1
21523: ST_TO_ADDR
// for i := 1 to list do
21524: LD_ADDR_VAR 0 2
21528: PUSH
21529: DOUBLE
21530: LD_INT 1
21532: DEC
21533: ST_TO_ADDR
21534: LD_VAR 0 3
21538: PUSH
21539: FOR_TO
21540: IFFALSE 21631
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
21542: LD_STRING setFactoryWaypointXY(
21544: PUSH
21545: LD_VAR 0 3
21549: PUSH
21550: LD_VAR 0 2
21554: ARRAY
21555: PUSH
21556: LD_INT 1
21558: ARRAY
21559: STR
21560: PUSH
21561: LD_STRING ,
21563: STR
21564: PUSH
21565: LD_VAR 0 3
21569: PUSH
21570: LD_VAR 0 2
21574: ARRAY
21575: PUSH
21576: LD_INT 2
21578: ARRAY
21579: STR
21580: PUSH
21581: LD_STRING ,
21583: STR
21584: PUSH
21585: LD_VAR 0 3
21589: PUSH
21590: LD_VAR 0 2
21594: ARRAY
21595: PUSH
21596: LD_INT 3
21598: ARRAY
21599: STR
21600: PUSH
21601: LD_STRING ,
21603: STR
21604: PUSH
21605: LD_VAR 0 3
21609: PUSH
21610: LD_VAR 0 2
21614: ARRAY
21615: PUSH
21616: LD_INT 4
21618: ARRAY
21619: STR
21620: PUSH
21621: LD_STRING )
21623: STR
21624: PPUSH
21625: CALL_OW 559
21629: GO 21539
21631: POP
21632: POP
// end ; end ;
21633: LD_VAR 0 1
21637: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
21638: LD_INT 0
21640: PPUSH
// if HexInfo ( x , y ) = warehouse then
21641: LD_VAR 0 2
21645: PPUSH
21646: LD_VAR 0 3
21650: PPUSH
21651: CALL_OW 428
21655: PUSH
21656: LD_VAR 0 1
21660: EQUAL
21661: IFFALSE 21688
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
21663: LD_ADDR_EXP 88
21667: PUSH
21668: LD_EXP 88
21672: PPUSH
21673: LD_VAR 0 1
21677: PPUSH
21678: LD_INT 0
21680: PPUSH
21681: CALL_OW 1
21685: ST_TO_ADDR
21686: GO 21739
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
21688: LD_ADDR_EXP 88
21692: PUSH
21693: LD_EXP 88
21697: PPUSH
21698: LD_VAR 0 1
21702: PPUSH
21703: LD_VAR 0 1
21707: PPUSH
21708: CALL_OW 255
21712: PUSH
21713: LD_VAR 0 1
21717: PUSH
21718: LD_VAR 0 2
21722: PUSH
21723: LD_VAR 0 3
21727: PUSH
21728: EMPTY
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: PPUSH
21734: CALL_OW 1
21738: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
21739: CALL 21748 0 0
// end ;
21743: LD_VAR 0 4
21747: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
21748: LD_INT 0
21750: PPUSH
21751: PPUSH
21752: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
21753: LD_STRING resetWarehouseGatheringPoints();
21755: PPUSH
21756: CALL_OW 559
// if warehouseGatheringPoints then
21760: LD_EXP 88
21764: IFFALSE 21890
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
21766: LD_ADDR_VAR 0 3
21770: PUSH
21771: LD_EXP 88
21775: PPUSH
21776: CALL 68102 0 1
21780: ST_TO_ADDR
// for i := 1 to list do
21781: LD_ADDR_VAR 0 2
21785: PUSH
21786: DOUBLE
21787: LD_INT 1
21789: DEC
21790: ST_TO_ADDR
21791: LD_VAR 0 3
21795: PUSH
21796: FOR_TO
21797: IFFALSE 21888
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
21799: LD_STRING setWarehouseGatheringPointXY(
21801: PUSH
21802: LD_VAR 0 3
21806: PUSH
21807: LD_VAR 0 2
21811: ARRAY
21812: PUSH
21813: LD_INT 1
21815: ARRAY
21816: STR
21817: PUSH
21818: LD_STRING ,
21820: STR
21821: PUSH
21822: LD_VAR 0 3
21826: PUSH
21827: LD_VAR 0 2
21831: ARRAY
21832: PUSH
21833: LD_INT 2
21835: ARRAY
21836: STR
21837: PUSH
21838: LD_STRING ,
21840: STR
21841: PUSH
21842: LD_VAR 0 3
21846: PUSH
21847: LD_VAR 0 2
21851: ARRAY
21852: PUSH
21853: LD_INT 3
21855: ARRAY
21856: STR
21857: PUSH
21858: LD_STRING ,
21860: STR
21861: PUSH
21862: LD_VAR 0 3
21866: PUSH
21867: LD_VAR 0 2
21871: ARRAY
21872: PUSH
21873: LD_INT 4
21875: ARRAY
21876: STR
21877: PUSH
21878: LD_STRING )
21880: STR
21881: PPUSH
21882: CALL_OW 559
21886: GO 21796
21888: POP
21889: POP
// end ; end ;
21890: LD_VAR 0 1
21894: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
21895: LD_EXP 88
21899: IFFALSE 22584
21901: GO 21903
21903: DISABLE
21904: LD_INT 0
21906: PPUSH
21907: PPUSH
21908: PPUSH
21909: PPUSH
21910: PPUSH
21911: PPUSH
21912: PPUSH
21913: PPUSH
21914: PPUSH
// begin enable ;
21915: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
21916: LD_ADDR_VAR 0 3
21920: PUSH
21921: LD_EXP 88
21925: PPUSH
21926: CALL 68102 0 1
21930: ST_TO_ADDR
// if not list then
21931: LD_VAR 0 3
21935: NOT
21936: IFFALSE 21940
// exit ;
21938: GO 22584
// for i := 1 to list do
21940: LD_ADDR_VAR 0 1
21944: PUSH
21945: DOUBLE
21946: LD_INT 1
21948: DEC
21949: ST_TO_ADDR
21950: LD_VAR 0 3
21954: PUSH
21955: FOR_TO
21956: IFFALSE 22582
// begin depot := list [ i ] [ 2 ] ;
21958: LD_ADDR_VAR 0 8
21962: PUSH
21963: LD_VAR 0 3
21967: PUSH
21968: LD_VAR 0 1
21972: ARRAY
21973: PUSH
21974: LD_INT 2
21976: ARRAY
21977: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
21978: LD_ADDR_VAR 0 5
21982: PUSH
21983: LD_VAR 0 3
21987: PUSH
21988: LD_VAR 0 1
21992: ARRAY
21993: PUSH
21994: LD_INT 1
21996: ARRAY
21997: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
21998: LD_VAR 0 8
22002: PPUSH
22003: CALL_OW 301
22007: PUSH
22008: LD_VAR 0 5
22012: PUSH
22013: LD_VAR 0 8
22017: PPUSH
22018: CALL_OW 255
22022: NONEQUAL
22023: OR
22024: IFFALSE 22053
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
22026: LD_ADDR_EXP 88
22030: PUSH
22031: LD_EXP 88
22035: PPUSH
22036: LD_VAR 0 8
22040: PPUSH
22041: LD_INT 0
22043: PPUSH
22044: CALL_OW 1
22048: ST_TO_ADDR
// exit ;
22049: POP
22050: POP
22051: GO 22584
// end ; x := list [ i ] [ 3 ] ;
22053: LD_ADDR_VAR 0 6
22057: PUSH
22058: LD_VAR 0 3
22062: PUSH
22063: LD_VAR 0 1
22067: ARRAY
22068: PUSH
22069: LD_INT 3
22071: ARRAY
22072: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
22073: LD_ADDR_VAR 0 7
22077: PUSH
22078: LD_VAR 0 3
22082: PUSH
22083: LD_VAR 0 1
22087: ARRAY
22088: PUSH
22089: LD_INT 4
22091: ARRAY
22092: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
22093: LD_ADDR_VAR 0 9
22097: PUSH
22098: LD_VAR 0 6
22102: PPUSH
22103: LD_VAR 0 7
22107: PPUSH
22108: LD_INT 16
22110: PPUSH
22111: CALL 66690 0 3
22115: ST_TO_ADDR
// if not cratesNearbyPoint then
22116: LD_VAR 0 9
22120: NOT
22121: IFFALSE 22127
// exit ;
22123: POP
22124: POP
22125: GO 22584
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
22127: LD_ADDR_VAR 0 4
22131: PUSH
22132: LD_INT 22
22134: PUSH
22135: LD_VAR 0 5
22139: PUSH
22140: EMPTY
22141: LIST
22142: LIST
22143: PUSH
22144: LD_INT 3
22146: PUSH
22147: LD_INT 60
22149: PUSH
22150: EMPTY
22151: LIST
22152: PUSH
22153: EMPTY
22154: LIST
22155: LIST
22156: PUSH
22157: LD_INT 91
22159: PUSH
22160: LD_VAR 0 8
22164: PUSH
22165: LD_INT 6
22167: PUSH
22168: EMPTY
22169: LIST
22170: LIST
22171: LIST
22172: PUSH
22173: LD_INT 2
22175: PUSH
22176: LD_INT 25
22178: PUSH
22179: LD_INT 2
22181: PUSH
22182: EMPTY
22183: LIST
22184: LIST
22185: PUSH
22186: LD_INT 25
22188: PUSH
22189: LD_INT 16
22191: PUSH
22192: EMPTY
22193: LIST
22194: LIST
22195: PUSH
22196: EMPTY
22197: LIST
22198: LIST
22199: LIST
22200: PUSH
22201: EMPTY
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: PPUSH
22207: CALL_OW 69
22211: PUSH
22212: LD_VAR 0 8
22216: PPUSH
22217: CALL_OW 313
22221: PPUSH
22222: LD_INT 3
22224: PUSH
22225: LD_INT 60
22227: PUSH
22228: EMPTY
22229: LIST
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: PUSH
22235: LD_INT 2
22237: PUSH
22238: LD_INT 25
22240: PUSH
22241: LD_INT 2
22243: PUSH
22244: EMPTY
22245: LIST
22246: LIST
22247: PUSH
22248: LD_INT 25
22250: PUSH
22251: LD_INT 16
22253: PUSH
22254: EMPTY
22255: LIST
22256: LIST
22257: PUSH
22258: EMPTY
22259: LIST
22260: LIST
22261: LIST
22262: PUSH
22263: EMPTY
22264: LIST
22265: LIST
22266: PPUSH
22267: CALL_OW 72
22271: UNION
22272: ST_TO_ADDR
// if tmp then
22273: LD_VAR 0 4
22277: IFFALSE 22357
// begin tmp := ShrinkArray ( tmp , 3 ) ;
22279: LD_ADDR_VAR 0 4
22283: PUSH
22284: LD_VAR 0 4
22288: PPUSH
22289: LD_INT 3
22291: PPUSH
22292: CALL 64659 0 2
22296: ST_TO_ADDR
// for j in tmp do
22297: LD_ADDR_VAR 0 2
22301: PUSH
22302: LD_VAR 0 4
22306: PUSH
22307: FOR_IN
22308: IFFALSE 22351
// begin if IsInUnit ( j ) then
22310: LD_VAR 0 2
22314: PPUSH
22315: CALL_OW 310
22319: IFFALSE 22330
// ComExit ( j ) ;
22321: LD_VAR 0 2
22325: PPUSH
22326: CALL 64742 0 1
// AddComCollect ( j , x , y ) ;
22330: LD_VAR 0 2
22334: PPUSH
22335: LD_VAR 0 6
22339: PPUSH
22340: LD_VAR 0 7
22344: PPUSH
22345: CALL_OW 177
// end ;
22349: GO 22307
22351: POP
22352: POP
// exit ;
22353: POP
22354: POP
22355: GO 22584
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
22357: LD_ADDR_VAR 0 4
22361: PUSH
22362: LD_INT 22
22364: PUSH
22365: LD_VAR 0 5
22369: PUSH
22370: EMPTY
22371: LIST
22372: LIST
22373: PUSH
22374: LD_INT 91
22376: PUSH
22377: LD_VAR 0 8
22381: PUSH
22382: LD_INT 8
22384: PUSH
22385: EMPTY
22386: LIST
22387: LIST
22388: LIST
22389: PUSH
22390: LD_INT 2
22392: PUSH
22393: LD_INT 34
22395: PUSH
22396: LD_INT 12
22398: PUSH
22399: EMPTY
22400: LIST
22401: LIST
22402: PUSH
22403: LD_INT 34
22405: PUSH
22406: LD_INT 51
22408: PUSH
22409: EMPTY
22410: LIST
22411: LIST
22412: PUSH
22413: LD_INT 34
22415: PUSH
22416: LD_INT 32
22418: PUSH
22419: EMPTY
22420: LIST
22421: LIST
22422: PUSH
22423: LD_INT 34
22425: PUSH
22426: LD_INT 89
22428: PUSH
22429: EMPTY
22430: LIST
22431: LIST
22432: PUSH
22433: EMPTY
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: PUSH
22440: EMPTY
22441: LIST
22442: LIST
22443: LIST
22444: PPUSH
22445: CALL_OW 69
22449: ST_TO_ADDR
// if tmp then
22450: LD_VAR 0 4
22454: IFFALSE 22580
// begin for j in tmp do
22456: LD_ADDR_VAR 0 2
22460: PUSH
22461: LD_VAR 0 4
22465: PUSH
22466: FOR_IN
22467: IFFALSE 22578
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
22469: LD_VAR 0 2
22473: PPUSH
22474: CALL_OW 262
22478: PUSH
22479: LD_INT 3
22481: EQUAL
22482: PUSH
22483: LD_VAR 0 2
22487: PPUSH
22488: CALL_OW 261
22492: PUSH
22493: LD_INT 20
22495: GREATER
22496: OR
22497: PUSH
22498: LD_VAR 0 2
22502: PPUSH
22503: CALL_OW 314
22507: NOT
22508: AND
22509: PUSH
22510: LD_VAR 0 2
22514: PPUSH
22515: CALL_OW 263
22519: PUSH
22520: LD_INT 1
22522: NONEQUAL
22523: PUSH
22524: LD_VAR 0 2
22528: PPUSH
22529: CALL_OW 311
22533: OR
22534: AND
22535: IFFALSE 22576
// begin ComCollect ( j , x , y ) ;
22537: LD_VAR 0 2
22541: PPUSH
22542: LD_VAR 0 6
22546: PPUSH
22547: LD_VAR 0 7
22551: PPUSH
22552: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
22556: LD_VAR 0 2
22560: PPUSH
22561: LD_VAR 0 8
22565: PPUSH
22566: CALL_OW 172
// exit ;
22570: POP
22571: POP
22572: POP
22573: POP
22574: GO 22584
// end ;
22576: GO 22466
22578: POP
22579: POP
// end ; end ;
22580: GO 21955
22582: POP
22583: POP
// end ; end_of_file
22584: PPOPN 9
22586: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
22587: LD_INT 0
22589: PPUSH
22590: PPUSH
22591: PPUSH
22592: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
22593: LD_VAR 0 1
22597: PPUSH
22598: CALL_OW 264
22602: PUSH
22603: LD_INT 91
22605: EQUAL
22606: IFFALSE 22678
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
22608: LD_INT 68
22610: PPUSH
22611: LD_VAR 0 1
22615: PPUSH
22616: CALL_OW 255
22620: PPUSH
22621: CALL_OW 321
22625: PUSH
22626: LD_INT 2
22628: EQUAL
22629: IFFALSE 22641
// eff := 70 else
22631: LD_ADDR_VAR 0 4
22635: PUSH
22636: LD_INT 70
22638: ST_TO_ADDR
22639: GO 22649
// eff := 30 ;
22641: LD_ADDR_VAR 0 4
22645: PUSH
22646: LD_INT 30
22648: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
22649: LD_VAR 0 1
22653: PPUSH
22654: CALL_OW 250
22658: PPUSH
22659: LD_VAR 0 1
22663: PPUSH
22664: CALL_OW 251
22668: PPUSH
22669: LD_VAR 0 4
22673: PPUSH
22674: CALL_OW 495
// end ; end ;
22678: LD_VAR 0 2
22682: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
22683: LD_INT 0
22685: PPUSH
// end ;
22686: LD_VAR 0 4
22690: RET
// export function SOS_Command ( cmd ) ; begin
22691: LD_INT 0
22693: PPUSH
// end ;
22694: LD_VAR 0 2
22698: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
22699: LD_INT 0
22701: PPUSH
// end ;
22702: LD_VAR 0 6
22706: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
22707: LD_INT 0
22709: PPUSH
22710: PPUSH
// if not vehicle or not factory then
22711: LD_VAR 0 1
22715: NOT
22716: PUSH
22717: LD_VAR 0 2
22721: NOT
22722: OR
22723: IFFALSE 22727
// exit ;
22725: GO 22958
// if factoryWaypoints >= factory then
22727: LD_EXP 87
22731: PUSH
22732: LD_VAR 0 2
22736: GREATEREQUAL
22737: IFFALSE 22958
// if factoryWaypoints [ factory ] then
22739: LD_EXP 87
22743: PUSH
22744: LD_VAR 0 2
22748: ARRAY
22749: IFFALSE 22958
// begin if GetControl ( vehicle ) = control_manual then
22751: LD_VAR 0 1
22755: PPUSH
22756: CALL_OW 263
22760: PUSH
22761: LD_INT 1
22763: EQUAL
22764: IFFALSE 22845
// begin driver := IsDrivenBy ( vehicle ) ;
22766: LD_ADDR_VAR 0 4
22770: PUSH
22771: LD_VAR 0 1
22775: PPUSH
22776: CALL_OW 311
22780: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
22781: LD_VAR 0 4
22785: PPUSH
22786: LD_EXP 87
22790: PUSH
22791: LD_VAR 0 2
22795: ARRAY
22796: PUSH
22797: LD_INT 3
22799: ARRAY
22800: PPUSH
22801: LD_EXP 87
22805: PUSH
22806: LD_VAR 0 2
22810: ARRAY
22811: PUSH
22812: LD_INT 4
22814: ARRAY
22815: PPUSH
22816: CALL_OW 171
// AddComExitVehicle ( driver ) ;
22820: LD_VAR 0 4
22824: PPUSH
22825: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
22829: LD_VAR 0 4
22833: PPUSH
22834: LD_VAR 0 2
22838: PPUSH
22839: CALL_OW 180
// end else
22843: GO 22958
// if GetControl ( vehicle ) = control_remote then
22845: LD_VAR 0 1
22849: PPUSH
22850: CALL_OW 263
22854: PUSH
22855: LD_INT 2
22857: EQUAL
22858: IFFALSE 22919
// begin wait ( 0 0$2 ) ;
22860: LD_INT 70
22862: PPUSH
22863: CALL_OW 67
// if Connect ( vehicle ) then
22867: LD_VAR 0 1
22871: PPUSH
22872: CALL 34982 0 1
22876: IFFALSE 22917
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
22878: LD_VAR 0 1
22882: PPUSH
22883: LD_EXP 87
22887: PUSH
22888: LD_VAR 0 2
22892: ARRAY
22893: PUSH
22894: LD_INT 3
22896: ARRAY
22897: PPUSH
22898: LD_EXP 87
22902: PUSH
22903: LD_VAR 0 2
22907: ARRAY
22908: PUSH
22909: LD_INT 4
22911: ARRAY
22912: PPUSH
22913: CALL_OW 171
// end else
22917: GO 22958
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
22919: LD_VAR 0 1
22923: PPUSH
22924: LD_EXP 87
22928: PUSH
22929: LD_VAR 0 2
22933: ARRAY
22934: PUSH
22935: LD_INT 3
22937: ARRAY
22938: PPUSH
22939: LD_EXP 87
22943: PUSH
22944: LD_VAR 0 2
22948: ARRAY
22949: PUSH
22950: LD_INT 4
22952: ARRAY
22953: PPUSH
22954: CALL_OW 171
// end ; end ;
22958: LD_VAR 0 3
22962: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
22963: LD_INT 0
22965: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
22966: LD_VAR 0 1
22970: PUSH
22971: LD_INT 250
22973: EQUAL
22974: PUSH
22975: LD_VAR 0 2
22979: PPUSH
22980: CALL_OW 264
22984: PUSH
22985: LD_INT 81
22987: EQUAL
22988: AND
22989: IFFALSE 23010
// MinerPlaceMine ( unit , x , y ) ;
22991: LD_VAR 0 2
22995: PPUSH
22996: LD_VAR 0 4
23000: PPUSH
23001: LD_VAR 0 5
23005: PPUSH
23006: CALL 25395 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
23010: LD_VAR 0 1
23014: PUSH
23015: LD_INT 251
23017: EQUAL
23018: PUSH
23019: LD_VAR 0 2
23023: PPUSH
23024: CALL_OW 264
23028: PUSH
23029: LD_INT 81
23031: EQUAL
23032: AND
23033: IFFALSE 23054
// MinerDetonateMine ( unit , x , y ) ;
23035: LD_VAR 0 2
23039: PPUSH
23040: LD_VAR 0 4
23044: PPUSH
23045: LD_VAR 0 5
23049: PPUSH
23050: CALL 25670 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
23054: LD_VAR 0 1
23058: PUSH
23059: LD_INT 252
23061: EQUAL
23062: PUSH
23063: LD_VAR 0 2
23067: PPUSH
23068: CALL_OW 264
23072: PUSH
23073: LD_INT 81
23075: EQUAL
23076: AND
23077: IFFALSE 23098
// MinerCreateMinefield ( unit , x , y ) ;
23079: LD_VAR 0 2
23083: PPUSH
23084: LD_VAR 0 4
23088: PPUSH
23089: LD_VAR 0 5
23093: PPUSH
23094: CALL 26087 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
23098: LD_VAR 0 1
23102: PUSH
23103: LD_INT 253
23105: EQUAL
23106: PUSH
23107: LD_VAR 0 2
23111: PPUSH
23112: CALL_OW 257
23116: PUSH
23117: LD_INT 5
23119: EQUAL
23120: AND
23121: IFFALSE 23142
// ComBinocular ( unit , x , y ) ;
23123: LD_VAR 0 2
23127: PPUSH
23128: LD_VAR 0 4
23132: PPUSH
23133: LD_VAR 0 5
23137: PPUSH
23138: CALL 26456 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
23142: LD_VAR 0 1
23146: PUSH
23147: LD_INT 254
23149: EQUAL
23150: PUSH
23151: LD_VAR 0 2
23155: PPUSH
23156: CALL_OW 264
23160: PUSH
23161: LD_INT 99
23163: EQUAL
23164: AND
23165: PUSH
23166: LD_VAR 0 3
23170: PPUSH
23171: CALL_OW 263
23175: PUSH
23176: LD_INT 3
23178: EQUAL
23179: AND
23180: IFFALSE 23196
// HackDestroyVehicle ( unit , selectedUnit ) ;
23182: LD_VAR 0 2
23186: PPUSH
23187: LD_VAR 0 3
23191: PPUSH
23192: CALL 24759 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
23196: LD_VAR 0 1
23200: PUSH
23201: LD_INT 255
23203: EQUAL
23204: PUSH
23205: LD_VAR 0 2
23209: PPUSH
23210: CALL_OW 264
23214: PUSH
23215: LD_INT 14
23217: PUSH
23218: LD_INT 53
23220: PUSH
23221: EMPTY
23222: LIST
23223: LIST
23224: IN
23225: AND
23226: PUSH
23227: LD_VAR 0 4
23231: PPUSH
23232: LD_VAR 0 5
23236: PPUSH
23237: CALL_OW 488
23241: AND
23242: IFFALSE 23266
// CutTreeXYR ( unit , x , y , 12 ) ;
23244: LD_VAR 0 2
23248: PPUSH
23249: LD_VAR 0 4
23253: PPUSH
23254: LD_VAR 0 5
23258: PPUSH
23259: LD_INT 12
23261: PPUSH
23262: CALL 23329 0 4
// if cmd = 256 then
23266: LD_VAR 0 1
23270: PUSH
23271: LD_INT 256
23273: EQUAL
23274: IFFALSE 23295
// SetFactoryWaypoint ( unit , x , y ) ;
23276: LD_VAR 0 2
23280: PPUSH
23281: LD_VAR 0 4
23285: PPUSH
23286: LD_VAR 0 5
23290: PPUSH
23291: CALL 21276 0 3
// if cmd = 257 then
23295: LD_VAR 0 1
23299: PUSH
23300: LD_INT 257
23302: EQUAL
23303: IFFALSE 23324
// SetWarehouseGatheringPoint ( unit , x , y ) ;
23305: LD_VAR 0 2
23309: PPUSH
23310: LD_VAR 0 4
23314: PPUSH
23315: LD_VAR 0 5
23319: PPUSH
23320: CALL 21638 0 3
// end ;
23324: LD_VAR 0 6
23328: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23329: LD_INT 0
23331: PPUSH
23332: PPUSH
23333: PPUSH
23334: PPUSH
23335: PPUSH
23336: PPUSH
23337: PPUSH
23338: PPUSH
23339: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
23340: LD_VAR 0 1
23344: NOT
23345: PUSH
23346: LD_VAR 0 2
23350: PPUSH
23351: LD_VAR 0 3
23355: PPUSH
23356: CALL_OW 488
23360: NOT
23361: OR
23362: PUSH
23363: LD_VAR 0 4
23367: NOT
23368: OR
23369: IFFALSE 23373
// exit ;
23371: GO 23713
// list := [ ] ;
23373: LD_ADDR_VAR 0 13
23377: PUSH
23378: EMPTY
23379: ST_TO_ADDR
// if x - r < 0 then
23380: LD_VAR 0 2
23384: PUSH
23385: LD_VAR 0 4
23389: MINUS
23390: PUSH
23391: LD_INT 0
23393: LESS
23394: IFFALSE 23406
// min_x := 0 else
23396: LD_ADDR_VAR 0 7
23400: PUSH
23401: LD_INT 0
23403: ST_TO_ADDR
23404: GO 23422
// min_x := x - r ;
23406: LD_ADDR_VAR 0 7
23410: PUSH
23411: LD_VAR 0 2
23415: PUSH
23416: LD_VAR 0 4
23420: MINUS
23421: ST_TO_ADDR
// if y - r < 0 then
23422: LD_VAR 0 3
23426: PUSH
23427: LD_VAR 0 4
23431: MINUS
23432: PUSH
23433: LD_INT 0
23435: LESS
23436: IFFALSE 23448
// min_y := 0 else
23438: LD_ADDR_VAR 0 8
23442: PUSH
23443: LD_INT 0
23445: ST_TO_ADDR
23446: GO 23464
// min_y := y - r ;
23448: LD_ADDR_VAR 0 8
23452: PUSH
23453: LD_VAR 0 3
23457: PUSH
23458: LD_VAR 0 4
23462: MINUS
23463: ST_TO_ADDR
// max_x := x + r ;
23464: LD_ADDR_VAR 0 9
23468: PUSH
23469: LD_VAR 0 2
23473: PUSH
23474: LD_VAR 0 4
23478: PLUS
23479: ST_TO_ADDR
// max_y := y + r ;
23480: LD_ADDR_VAR 0 10
23484: PUSH
23485: LD_VAR 0 3
23489: PUSH
23490: LD_VAR 0 4
23494: PLUS
23495: ST_TO_ADDR
// for _x = min_x to max_x do
23496: LD_ADDR_VAR 0 11
23500: PUSH
23501: DOUBLE
23502: LD_VAR 0 7
23506: DEC
23507: ST_TO_ADDR
23508: LD_VAR 0 9
23512: PUSH
23513: FOR_TO
23514: IFFALSE 23631
// for _y = min_y to max_y do
23516: LD_ADDR_VAR 0 12
23520: PUSH
23521: DOUBLE
23522: LD_VAR 0 8
23526: DEC
23527: ST_TO_ADDR
23528: LD_VAR 0 10
23532: PUSH
23533: FOR_TO
23534: IFFALSE 23627
// begin if not ValidHex ( _x , _y ) then
23536: LD_VAR 0 11
23540: PPUSH
23541: LD_VAR 0 12
23545: PPUSH
23546: CALL_OW 488
23550: NOT
23551: IFFALSE 23555
// continue ;
23553: GO 23533
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23555: LD_VAR 0 11
23559: PPUSH
23560: LD_VAR 0 12
23564: PPUSH
23565: CALL_OW 351
23569: PUSH
23570: LD_VAR 0 11
23574: PPUSH
23575: LD_VAR 0 12
23579: PPUSH
23580: CALL_OW 554
23584: AND
23585: IFFALSE 23625
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23587: LD_ADDR_VAR 0 13
23591: PUSH
23592: LD_VAR 0 13
23596: PPUSH
23597: LD_VAR 0 13
23601: PUSH
23602: LD_INT 1
23604: PLUS
23605: PPUSH
23606: LD_VAR 0 11
23610: PUSH
23611: LD_VAR 0 12
23615: PUSH
23616: EMPTY
23617: LIST
23618: LIST
23619: PPUSH
23620: CALL_OW 2
23624: ST_TO_ADDR
// end ;
23625: GO 23533
23627: POP
23628: POP
23629: GO 23513
23631: POP
23632: POP
// if not list then
23633: LD_VAR 0 13
23637: NOT
23638: IFFALSE 23642
// exit ;
23640: GO 23713
// for i in list do
23642: LD_ADDR_VAR 0 6
23646: PUSH
23647: LD_VAR 0 13
23651: PUSH
23652: FOR_IN
23653: IFFALSE 23711
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23655: LD_VAR 0 1
23659: PPUSH
23660: LD_STRING M
23662: PUSH
23663: LD_VAR 0 6
23667: PUSH
23668: LD_INT 1
23670: ARRAY
23671: PUSH
23672: LD_VAR 0 6
23676: PUSH
23677: LD_INT 2
23679: ARRAY
23680: PUSH
23681: LD_INT 0
23683: PUSH
23684: LD_INT 0
23686: PUSH
23687: LD_INT 0
23689: PUSH
23690: LD_INT 0
23692: PUSH
23693: EMPTY
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: PUSH
23702: EMPTY
23703: LIST
23704: PPUSH
23705: CALL_OW 447
23709: GO 23652
23711: POP
23712: POP
// end ;
23713: LD_VAR 0 5
23717: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
23718: LD_EXP 90
23722: NOT
23723: IFFALSE 23773
23725: GO 23727
23727: DISABLE
// begin initHack := true ;
23728: LD_ADDR_EXP 90
23732: PUSH
23733: LD_INT 1
23735: ST_TO_ADDR
// hackTanks := [ ] ;
23736: LD_ADDR_EXP 91
23740: PUSH
23741: EMPTY
23742: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
23743: LD_ADDR_EXP 92
23747: PUSH
23748: EMPTY
23749: ST_TO_ADDR
// hackLimit := 3 ;
23750: LD_ADDR_EXP 93
23754: PUSH
23755: LD_INT 3
23757: ST_TO_ADDR
// hackDist := 12 ;
23758: LD_ADDR_EXP 94
23762: PUSH
23763: LD_INT 12
23765: ST_TO_ADDR
// hackCounter := [ ] ;
23766: LD_ADDR_EXP 95
23770: PUSH
23771: EMPTY
23772: ST_TO_ADDR
// end ;
23773: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
23774: LD_EXP 90
23778: PUSH
23779: LD_INT 34
23781: PUSH
23782: LD_INT 99
23784: PUSH
23785: EMPTY
23786: LIST
23787: LIST
23788: PPUSH
23789: CALL_OW 69
23793: AND
23794: IFFALSE 24047
23796: GO 23798
23798: DISABLE
23799: LD_INT 0
23801: PPUSH
23802: PPUSH
// begin enable ;
23803: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
23804: LD_ADDR_VAR 0 1
23808: PUSH
23809: LD_INT 34
23811: PUSH
23812: LD_INT 99
23814: PUSH
23815: EMPTY
23816: LIST
23817: LIST
23818: PPUSH
23819: CALL_OW 69
23823: PUSH
23824: FOR_IN
23825: IFFALSE 24045
// begin if not i in hackTanks then
23827: LD_VAR 0 1
23831: PUSH
23832: LD_EXP 91
23836: IN
23837: NOT
23838: IFFALSE 23921
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
23840: LD_ADDR_EXP 91
23844: PUSH
23845: LD_EXP 91
23849: PPUSH
23850: LD_EXP 91
23854: PUSH
23855: LD_INT 1
23857: PLUS
23858: PPUSH
23859: LD_VAR 0 1
23863: PPUSH
23864: CALL_OW 1
23868: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
23869: LD_ADDR_EXP 92
23873: PUSH
23874: LD_EXP 92
23878: PPUSH
23879: LD_EXP 92
23883: PUSH
23884: LD_INT 1
23886: PLUS
23887: PPUSH
23888: EMPTY
23889: PPUSH
23890: CALL_OW 1
23894: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
23895: LD_ADDR_EXP 95
23899: PUSH
23900: LD_EXP 95
23904: PPUSH
23905: LD_EXP 95
23909: PUSH
23910: LD_INT 1
23912: PLUS
23913: PPUSH
23914: EMPTY
23915: PPUSH
23916: CALL_OW 1
23920: ST_TO_ADDR
// end ; if not IsOk ( i ) then
23921: LD_VAR 0 1
23925: PPUSH
23926: CALL_OW 302
23930: NOT
23931: IFFALSE 23944
// begin HackUnlinkAll ( i ) ;
23933: LD_VAR 0 1
23937: PPUSH
23938: CALL 24050 0 1
// continue ;
23942: GO 23824
// end ; HackCheckCapturedStatus ( i ) ;
23944: LD_VAR 0 1
23948: PPUSH
23949: CALL 24493 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
23953: LD_ADDR_VAR 0 2
23957: PUSH
23958: LD_INT 81
23960: PUSH
23961: LD_VAR 0 1
23965: PPUSH
23966: CALL_OW 255
23970: PUSH
23971: EMPTY
23972: LIST
23973: LIST
23974: PUSH
23975: LD_INT 33
23977: PUSH
23978: LD_INT 3
23980: PUSH
23981: EMPTY
23982: LIST
23983: LIST
23984: PUSH
23985: LD_INT 91
23987: PUSH
23988: LD_VAR 0 1
23992: PUSH
23993: LD_EXP 94
23997: PUSH
23998: EMPTY
23999: LIST
24000: LIST
24001: LIST
24002: PUSH
24003: LD_INT 50
24005: PUSH
24006: EMPTY
24007: LIST
24008: PUSH
24009: EMPTY
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: PPUSH
24015: CALL_OW 69
24019: ST_TO_ADDR
// if not tmp then
24020: LD_VAR 0 2
24024: NOT
24025: IFFALSE 24029
// continue ;
24027: GO 23824
// HackLink ( i , tmp ) ;
24029: LD_VAR 0 1
24033: PPUSH
24034: LD_VAR 0 2
24038: PPUSH
24039: CALL 24186 0 2
// end ;
24043: GO 23824
24045: POP
24046: POP
// end ;
24047: PPOPN 2
24049: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24050: LD_INT 0
24052: PPUSH
24053: PPUSH
24054: PPUSH
// if not hack in hackTanks then
24055: LD_VAR 0 1
24059: PUSH
24060: LD_EXP 91
24064: IN
24065: NOT
24066: IFFALSE 24070
// exit ;
24068: GO 24181
// index := GetElementIndex ( hackTanks , hack ) ;
24070: LD_ADDR_VAR 0 4
24074: PUSH
24075: LD_EXP 91
24079: PPUSH
24080: LD_VAR 0 1
24084: PPUSH
24085: CALL 31798 0 2
24089: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24090: LD_EXP 92
24094: PUSH
24095: LD_VAR 0 4
24099: ARRAY
24100: IFFALSE 24181
// begin for i in hackTanksCaptured [ index ] do
24102: LD_ADDR_VAR 0 3
24106: PUSH
24107: LD_EXP 92
24111: PUSH
24112: LD_VAR 0 4
24116: ARRAY
24117: PUSH
24118: FOR_IN
24119: IFFALSE 24145
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24121: LD_VAR 0 3
24125: PUSH
24126: LD_INT 1
24128: ARRAY
24129: PPUSH
24130: LD_VAR 0 3
24134: PUSH
24135: LD_INT 2
24137: ARRAY
24138: PPUSH
24139: CALL_OW 235
24143: GO 24118
24145: POP
24146: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
24147: LD_ADDR_EXP 92
24151: PUSH
24152: LD_EXP 92
24156: PPUSH
24157: LD_VAR 0 4
24161: PPUSH
24162: EMPTY
24163: PPUSH
24164: CALL_OW 1
24168: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
24169: LD_VAR 0 1
24173: PPUSH
24174: LD_INT 0
24176: PPUSH
24177: CALL_OW 505
// end ; end ;
24181: LD_VAR 0 2
24185: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
24186: LD_INT 0
24188: PPUSH
24189: PPUSH
24190: PPUSH
// if not hack in hackTanks or not vehicles then
24191: LD_VAR 0 1
24195: PUSH
24196: LD_EXP 91
24200: IN
24201: NOT
24202: PUSH
24203: LD_VAR 0 2
24207: NOT
24208: OR
24209: IFFALSE 24213
// exit ;
24211: GO 24488
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
24213: LD_ADDR_VAR 0 2
24217: PUSH
24218: LD_VAR 0 1
24222: PPUSH
24223: LD_VAR 0 2
24227: PPUSH
24228: LD_INT 1
24230: PPUSH
24231: LD_INT 1
24233: PPUSH
24234: CALL 32448 0 4
24238: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
24239: LD_ADDR_VAR 0 5
24243: PUSH
24244: LD_EXP 91
24248: PPUSH
24249: LD_VAR 0 1
24253: PPUSH
24254: CALL 31798 0 2
24258: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
24259: LD_EXP 92
24263: PUSH
24264: LD_VAR 0 5
24268: ARRAY
24269: PUSH
24270: LD_EXP 93
24274: LESS
24275: IFFALSE 24464
// begin for i := 1 to vehicles do
24277: LD_ADDR_VAR 0 4
24281: PUSH
24282: DOUBLE
24283: LD_INT 1
24285: DEC
24286: ST_TO_ADDR
24287: LD_VAR 0 2
24291: PUSH
24292: FOR_TO
24293: IFFALSE 24462
// begin if hackTanksCaptured [ index ] = hackLimit then
24295: LD_EXP 92
24299: PUSH
24300: LD_VAR 0 5
24304: ARRAY
24305: PUSH
24306: LD_EXP 93
24310: EQUAL
24311: IFFALSE 24315
// break ;
24313: GO 24462
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
24315: LD_ADDR_EXP 95
24319: PUSH
24320: LD_EXP 95
24324: PPUSH
24325: LD_VAR 0 5
24329: PPUSH
24330: LD_EXP 95
24334: PUSH
24335: LD_VAR 0 5
24339: ARRAY
24340: PUSH
24341: LD_INT 1
24343: PLUS
24344: PPUSH
24345: CALL_OW 1
24349: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
24350: LD_ADDR_EXP 92
24354: PUSH
24355: LD_EXP 92
24359: PPUSH
24360: LD_VAR 0 5
24364: PUSH
24365: LD_EXP 92
24369: PUSH
24370: LD_VAR 0 5
24374: ARRAY
24375: PUSH
24376: LD_INT 1
24378: PLUS
24379: PUSH
24380: EMPTY
24381: LIST
24382: LIST
24383: PPUSH
24384: LD_VAR 0 2
24388: PUSH
24389: LD_VAR 0 4
24393: ARRAY
24394: PUSH
24395: LD_VAR 0 2
24399: PUSH
24400: LD_VAR 0 4
24404: ARRAY
24405: PPUSH
24406: CALL_OW 255
24410: PUSH
24411: EMPTY
24412: LIST
24413: LIST
24414: PPUSH
24415: CALL 32013 0 3
24419: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
24420: LD_VAR 0 2
24424: PUSH
24425: LD_VAR 0 4
24429: ARRAY
24430: PPUSH
24431: LD_VAR 0 1
24435: PPUSH
24436: CALL_OW 255
24440: PPUSH
24441: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
24445: LD_VAR 0 2
24449: PUSH
24450: LD_VAR 0 4
24454: ARRAY
24455: PPUSH
24456: CALL_OW 141
// end ;
24460: GO 24292
24462: POP
24463: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24464: LD_VAR 0 1
24468: PPUSH
24469: LD_EXP 92
24473: PUSH
24474: LD_VAR 0 5
24478: ARRAY
24479: PUSH
24480: LD_INT 0
24482: PLUS
24483: PPUSH
24484: CALL_OW 505
// end ;
24488: LD_VAR 0 3
24492: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
24493: LD_INT 0
24495: PPUSH
24496: PPUSH
24497: PPUSH
24498: PPUSH
// if not hack in hackTanks then
24499: LD_VAR 0 1
24503: PUSH
24504: LD_EXP 91
24508: IN
24509: NOT
24510: IFFALSE 24514
// exit ;
24512: GO 24754
// index := GetElementIndex ( hackTanks , hack ) ;
24514: LD_ADDR_VAR 0 4
24518: PUSH
24519: LD_EXP 91
24523: PPUSH
24524: LD_VAR 0 1
24528: PPUSH
24529: CALL 31798 0 2
24533: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
24534: LD_ADDR_VAR 0 3
24538: PUSH
24539: DOUBLE
24540: LD_EXP 92
24544: PUSH
24545: LD_VAR 0 4
24549: ARRAY
24550: INC
24551: ST_TO_ADDR
24552: LD_INT 1
24554: PUSH
24555: FOR_DOWNTO
24556: IFFALSE 24728
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
24558: LD_ADDR_VAR 0 5
24562: PUSH
24563: LD_EXP 92
24567: PUSH
24568: LD_VAR 0 4
24572: ARRAY
24573: PUSH
24574: LD_VAR 0 3
24578: ARRAY
24579: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
24580: LD_VAR 0 5
24584: PUSH
24585: LD_INT 1
24587: ARRAY
24588: PPUSH
24589: CALL_OW 302
24593: NOT
24594: PUSH
24595: LD_VAR 0 5
24599: PUSH
24600: LD_INT 1
24602: ARRAY
24603: PPUSH
24604: CALL_OW 255
24608: PUSH
24609: LD_VAR 0 1
24613: PPUSH
24614: CALL_OW 255
24618: NONEQUAL
24619: OR
24620: IFFALSE 24726
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
24622: LD_VAR 0 5
24626: PUSH
24627: LD_INT 1
24629: ARRAY
24630: PPUSH
24631: CALL_OW 305
24635: PUSH
24636: LD_VAR 0 5
24640: PUSH
24641: LD_INT 1
24643: ARRAY
24644: PPUSH
24645: CALL_OW 255
24649: PUSH
24650: LD_VAR 0 1
24654: PPUSH
24655: CALL_OW 255
24659: EQUAL
24660: AND
24661: IFFALSE 24685
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
24663: LD_VAR 0 5
24667: PUSH
24668: LD_INT 1
24670: ARRAY
24671: PPUSH
24672: LD_VAR 0 5
24676: PUSH
24677: LD_INT 2
24679: ARRAY
24680: PPUSH
24681: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
24685: LD_ADDR_EXP 92
24689: PUSH
24690: LD_EXP 92
24694: PPUSH
24695: LD_VAR 0 4
24699: PPUSH
24700: LD_EXP 92
24704: PUSH
24705: LD_VAR 0 4
24709: ARRAY
24710: PPUSH
24711: LD_VAR 0 3
24715: PPUSH
24716: CALL_OW 3
24720: PPUSH
24721: CALL_OW 1
24725: ST_TO_ADDR
// end ; end ;
24726: GO 24555
24728: POP
24729: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24730: LD_VAR 0 1
24734: PPUSH
24735: LD_EXP 92
24739: PUSH
24740: LD_VAR 0 4
24744: ARRAY
24745: PUSH
24746: LD_INT 0
24748: PLUS
24749: PPUSH
24750: CALL_OW 505
// end ;
24754: LD_VAR 0 2
24758: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
24759: LD_INT 0
24761: PPUSH
24762: PPUSH
24763: PPUSH
24764: PPUSH
// if not hack in hackTanks then
24765: LD_VAR 0 1
24769: PUSH
24770: LD_EXP 91
24774: IN
24775: NOT
24776: IFFALSE 24780
// exit ;
24778: GO 24865
// index := GetElementIndex ( hackTanks , hack ) ;
24780: LD_ADDR_VAR 0 5
24784: PUSH
24785: LD_EXP 91
24789: PPUSH
24790: LD_VAR 0 1
24794: PPUSH
24795: CALL 31798 0 2
24799: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
24800: LD_ADDR_VAR 0 4
24804: PUSH
24805: DOUBLE
24806: LD_INT 1
24808: DEC
24809: ST_TO_ADDR
24810: LD_EXP 92
24814: PUSH
24815: LD_VAR 0 5
24819: ARRAY
24820: PUSH
24821: FOR_TO
24822: IFFALSE 24863
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
24824: LD_EXP 92
24828: PUSH
24829: LD_VAR 0 5
24833: ARRAY
24834: PUSH
24835: LD_VAR 0 4
24839: ARRAY
24840: PUSH
24841: LD_INT 1
24843: ARRAY
24844: PUSH
24845: LD_VAR 0 2
24849: EQUAL
24850: IFFALSE 24861
// KillUnit ( vehicle ) ;
24852: LD_VAR 0 2
24856: PPUSH
24857: CALL_OW 66
24861: GO 24821
24863: POP
24864: POP
// end ;
24865: LD_VAR 0 3
24869: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
24870: LD_EXP 96
24874: NOT
24875: IFFALSE 24910
24877: GO 24879
24879: DISABLE
// begin initMiner := true ;
24880: LD_ADDR_EXP 96
24884: PUSH
24885: LD_INT 1
24887: ST_TO_ADDR
// minersList := [ ] ;
24888: LD_ADDR_EXP 97
24892: PUSH
24893: EMPTY
24894: ST_TO_ADDR
// minerMinesList := [ ] ;
24895: LD_ADDR_EXP 98
24899: PUSH
24900: EMPTY
24901: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
24902: LD_ADDR_EXP 99
24906: PUSH
24907: LD_INT 5
24909: ST_TO_ADDR
// end ;
24910: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
24911: LD_EXP 96
24915: PUSH
24916: LD_INT 34
24918: PUSH
24919: LD_INT 81
24921: PUSH
24922: EMPTY
24923: LIST
24924: LIST
24925: PPUSH
24926: CALL_OW 69
24930: AND
24931: IFFALSE 25392
24933: GO 24935
24935: DISABLE
24936: LD_INT 0
24938: PPUSH
24939: PPUSH
24940: PPUSH
24941: PPUSH
// begin enable ;
24942: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
24943: LD_ADDR_VAR 0 1
24947: PUSH
24948: LD_INT 34
24950: PUSH
24951: LD_INT 81
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: PPUSH
24958: CALL_OW 69
24962: PUSH
24963: FOR_IN
24964: IFFALSE 25036
// begin if not i in minersList then
24966: LD_VAR 0 1
24970: PUSH
24971: LD_EXP 97
24975: IN
24976: NOT
24977: IFFALSE 25034
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
24979: LD_ADDR_EXP 97
24983: PUSH
24984: LD_EXP 97
24988: PPUSH
24989: LD_EXP 97
24993: PUSH
24994: LD_INT 1
24996: PLUS
24997: PPUSH
24998: LD_VAR 0 1
25002: PPUSH
25003: CALL_OW 1
25007: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25008: LD_ADDR_EXP 98
25012: PUSH
25013: LD_EXP 98
25017: PPUSH
25018: LD_EXP 98
25022: PUSH
25023: LD_INT 1
25025: PLUS
25026: PPUSH
25027: EMPTY
25028: PPUSH
25029: CALL_OW 1
25033: ST_TO_ADDR
// end end ;
25034: GO 24963
25036: POP
25037: POP
// for i := minerMinesList downto 1 do
25038: LD_ADDR_VAR 0 1
25042: PUSH
25043: DOUBLE
25044: LD_EXP 98
25048: INC
25049: ST_TO_ADDR
25050: LD_INT 1
25052: PUSH
25053: FOR_DOWNTO
25054: IFFALSE 25390
// begin if IsLive ( minersList [ i ] ) then
25056: LD_EXP 97
25060: PUSH
25061: LD_VAR 0 1
25065: ARRAY
25066: PPUSH
25067: CALL_OW 300
25071: IFFALSE 25099
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
25073: LD_EXP 97
25077: PUSH
25078: LD_VAR 0 1
25082: ARRAY
25083: PPUSH
25084: LD_EXP 98
25088: PUSH
25089: LD_VAR 0 1
25093: ARRAY
25094: PPUSH
25095: CALL_OW 505
// if not minerMinesList [ i ] then
25099: LD_EXP 98
25103: PUSH
25104: LD_VAR 0 1
25108: ARRAY
25109: NOT
25110: IFFALSE 25114
// continue ;
25112: GO 25053
// for j := minerMinesList [ i ] downto 1 do
25114: LD_ADDR_VAR 0 2
25118: PUSH
25119: DOUBLE
25120: LD_EXP 98
25124: PUSH
25125: LD_VAR 0 1
25129: ARRAY
25130: INC
25131: ST_TO_ADDR
25132: LD_INT 1
25134: PUSH
25135: FOR_DOWNTO
25136: IFFALSE 25386
// begin side := GetSide ( minersList [ i ] ) ;
25138: LD_ADDR_VAR 0 3
25142: PUSH
25143: LD_EXP 97
25147: PUSH
25148: LD_VAR 0 1
25152: ARRAY
25153: PPUSH
25154: CALL_OW 255
25158: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
25159: LD_ADDR_VAR 0 4
25163: PUSH
25164: LD_EXP 98
25168: PUSH
25169: LD_VAR 0 1
25173: ARRAY
25174: PUSH
25175: LD_VAR 0 2
25179: ARRAY
25180: PUSH
25181: LD_INT 1
25183: ARRAY
25184: PPUSH
25185: LD_EXP 98
25189: PUSH
25190: LD_VAR 0 1
25194: ARRAY
25195: PUSH
25196: LD_VAR 0 2
25200: ARRAY
25201: PUSH
25202: LD_INT 2
25204: ARRAY
25205: PPUSH
25206: CALL_OW 428
25210: ST_TO_ADDR
// if not tmp then
25211: LD_VAR 0 4
25215: NOT
25216: IFFALSE 25220
// continue ;
25218: GO 25135
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
25220: LD_VAR 0 4
25224: PUSH
25225: LD_INT 81
25227: PUSH
25228: LD_VAR 0 3
25232: PUSH
25233: EMPTY
25234: LIST
25235: LIST
25236: PPUSH
25237: CALL_OW 69
25241: IN
25242: PUSH
25243: LD_EXP 98
25247: PUSH
25248: LD_VAR 0 1
25252: ARRAY
25253: PUSH
25254: LD_VAR 0 2
25258: ARRAY
25259: PUSH
25260: LD_INT 1
25262: ARRAY
25263: PPUSH
25264: LD_EXP 98
25268: PUSH
25269: LD_VAR 0 1
25273: ARRAY
25274: PUSH
25275: LD_VAR 0 2
25279: ARRAY
25280: PUSH
25281: LD_INT 2
25283: ARRAY
25284: PPUSH
25285: CALL_OW 458
25289: AND
25290: IFFALSE 25384
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
25292: LD_EXP 98
25296: PUSH
25297: LD_VAR 0 1
25301: ARRAY
25302: PUSH
25303: LD_VAR 0 2
25307: ARRAY
25308: PUSH
25309: LD_INT 1
25311: ARRAY
25312: PPUSH
25313: LD_EXP 98
25317: PUSH
25318: LD_VAR 0 1
25322: ARRAY
25323: PUSH
25324: LD_VAR 0 2
25328: ARRAY
25329: PUSH
25330: LD_INT 2
25332: ARRAY
25333: PPUSH
25334: LD_VAR 0 3
25338: PPUSH
25339: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
25343: LD_ADDR_EXP 98
25347: PUSH
25348: LD_EXP 98
25352: PPUSH
25353: LD_VAR 0 1
25357: PPUSH
25358: LD_EXP 98
25362: PUSH
25363: LD_VAR 0 1
25367: ARRAY
25368: PPUSH
25369: LD_VAR 0 2
25373: PPUSH
25374: CALL_OW 3
25378: PPUSH
25379: CALL_OW 1
25383: ST_TO_ADDR
// end ; end ;
25384: GO 25135
25386: POP
25387: POP
// end ;
25388: GO 25053
25390: POP
25391: POP
// end ;
25392: PPOPN 4
25394: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
25395: LD_INT 0
25397: PPUSH
25398: PPUSH
// result := false ;
25399: LD_ADDR_VAR 0 4
25403: PUSH
25404: LD_INT 0
25406: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
25407: LD_VAR 0 1
25411: PPUSH
25412: CALL_OW 264
25416: PUSH
25417: LD_INT 81
25419: EQUAL
25420: NOT
25421: IFFALSE 25425
// exit ;
25423: GO 25665
// index := GetElementIndex ( minersList , unit ) ;
25425: LD_ADDR_VAR 0 5
25429: PUSH
25430: LD_EXP 97
25434: PPUSH
25435: LD_VAR 0 1
25439: PPUSH
25440: CALL 31798 0 2
25444: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
25445: LD_EXP 98
25449: PUSH
25450: LD_VAR 0 5
25454: ARRAY
25455: PUSH
25456: LD_EXP 99
25460: GREATEREQUAL
25461: IFFALSE 25465
// exit ;
25463: GO 25665
// ComMoveXY ( unit , x , y ) ;
25465: LD_VAR 0 1
25469: PPUSH
25470: LD_VAR 0 2
25474: PPUSH
25475: LD_VAR 0 3
25479: PPUSH
25480: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25484: LD_INT 35
25486: PPUSH
25487: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
25491: LD_VAR 0 1
25495: PPUSH
25496: LD_VAR 0 2
25500: PPUSH
25501: LD_VAR 0 3
25505: PPUSH
25506: CALL 63153 0 3
25510: NOT
25511: PUSH
25512: LD_VAR 0 1
25516: PPUSH
25517: CALL_OW 314
25521: AND
25522: IFFALSE 25526
// exit ;
25524: GO 25665
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
25526: LD_VAR 0 2
25530: PPUSH
25531: LD_VAR 0 3
25535: PPUSH
25536: CALL_OW 428
25540: PUSH
25541: LD_VAR 0 1
25545: EQUAL
25546: PUSH
25547: LD_VAR 0 1
25551: PPUSH
25552: CALL_OW 314
25556: NOT
25557: AND
25558: IFFALSE 25484
// PlaySoundXY ( x , y , PlantMine ) ;
25560: LD_VAR 0 2
25564: PPUSH
25565: LD_VAR 0 3
25569: PPUSH
25570: LD_STRING PlantMine
25572: PPUSH
25573: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
25577: LD_VAR 0 2
25581: PPUSH
25582: LD_VAR 0 3
25586: PPUSH
25587: LD_VAR 0 1
25591: PPUSH
25592: CALL_OW 255
25596: PPUSH
25597: LD_INT 0
25599: PPUSH
25600: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
25604: LD_ADDR_EXP 98
25608: PUSH
25609: LD_EXP 98
25613: PPUSH
25614: LD_VAR 0 5
25618: PUSH
25619: LD_EXP 98
25623: PUSH
25624: LD_VAR 0 5
25628: ARRAY
25629: PUSH
25630: LD_INT 1
25632: PLUS
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: PPUSH
25638: LD_VAR 0 2
25642: PUSH
25643: LD_VAR 0 3
25647: PUSH
25648: EMPTY
25649: LIST
25650: LIST
25651: PPUSH
25652: CALL 32013 0 3
25656: ST_TO_ADDR
// result := true ;
25657: LD_ADDR_VAR 0 4
25661: PUSH
25662: LD_INT 1
25664: ST_TO_ADDR
// end ;
25665: LD_VAR 0 4
25669: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
25670: LD_INT 0
25672: PPUSH
25673: PPUSH
25674: PPUSH
// if not unit in minersList then
25675: LD_VAR 0 1
25679: PUSH
25680: LD_EXP 97
25684: IN
25685: NOT
25686: IFFALSE 25690
// exit ;
25688: GO 26082
// index := GetElementIndex ( minersList , unit ) ;
25690: LD_ADDR_VAR 0 6
25694: PUSH
25695: LD_EXP 97
25699: PPUSH
25700: LD_VAR 0 1
25704: PPUSH
25705: CALL 31798 0 2
25709: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
25710: LD_ADDR_VAR 0 5
25714: PUSH
25715: DOUBLE
25716: LD_EXP 98
25720: PUSH
25721: LD_VAR 0 6
25725: ARRAY
25726: INC
25727: ST_TO_ADDR
25728: LD_INT 1
25730: PUSH
25731: FOR_DOWNTO
25732: IFFALSE 25893
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
25734: LD_EXP 98
25738: PUSH
25739: LD_VAR 0 6
25743: ARRAY
25744: PUSH
25745: LD_VAR 0 5
25749: ARRAY
25750: PUSH
25751: LD_INT 1
25753: ARRAY
25754: PUSH
25755: LD_VAR 0 2
25759: EQUAL
25760: PUSH
25761: LD_EXP 98
25765: PUSH
25766: LD_VAR 0 6
25770: ARRAY
25771: PUSH
25772: LD_VAR 0 5
25776: ARRAY
25777: PUSH
25778: LD_INT 2
25780: ARRAY
25781: PUSH
25782: LD_VAR 0 3
25786: EQUAL
25787: AND
25788: IFFALSE 25891
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25790: LD_EXP 98
25794: PUSH
25795: LD_VAR 0 6
25799: ARRAY
25800: PUSH
25801: LD_VAR 0 5
25805: ARRAY
25806: PUSH
25807: LD_INT 1
25809: ARRAY
25810: PPUSH
25811: LD_EXP 98
25815: PUSH
25816: LD_VAR 0 6
25820: ARRAY
25821: PUSH
25822: LD_VAR 0 5
25826: ARRAY
25827: PUSH
25828: LD_INT 2
25830: ARRAY
25831: PPUSH
25832: LD_VAR 0 1
25836: PPUSH
25837: CALL_OW 255
25841: PPUSH
25842: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25846: LD_ADDR_EXP 98
25850: PUSH
25851: LD_EXP 98
25855: PPUSH
25856: LD_VAR 0 6
25860: PPUSH
25861: LD_EXP 98
25865: PUSH
25866: LD_VAR 0 6
25870: ARRAY
25871: PPUSH
25872: LD_VAR 0 5
25876: PPUSH
25877: CALL_OW 3
25881: PPUSH
25882: CALL_OW 1
25886: ST_TO_ADDR
// exit ;
25887: POP
25888: POP
25889: GO 26082
// end ; end ;
25891: GO 25731
25893: POP
25894: POP
// for i := minerMinesList [ index ] downto 1 do
25895: LD_ADDR_VAR 0 5
25899: PUSH
25900: DOUBLE
25901: LD_EXP 98
25905: PUSH
25906: LD_VAR 0 6
25910: ARRAY
25911: INC
25912: ST_TO_ADDR
25913: LD_INT 1
25915: PUSH
25916: FOR_DOWNTO
25917: IFFALSE 26080
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
25919: LD_EXP 98
25923: PUSH
25924: LD_VAR 0 6
25928: ARRAY
25929: PUSH
25930: LD_VAR 0 5
25934: ARRAY
25935: PUSH
25936: LD_INT 1
25938: ARRAY
25939: PPUSH
25940: LD_EXP 98
25944: PUSH
25945: LD_VAR 0 6
25949: ARRAY
25950: PUSH
25951: LD_VAR 0 5
25955: ARRAY
25956: PUSH
25957: LD_INT 2
25959: ARRAY
25960: PPUSH
25961: LD_VAR 0 2
25965: PPUSH
25966: LD_VAR 0 3
25970: PPUSH
25971: CALL_OW 298
25975: PUSH
25976: LD_INT 6
25978: LESS
25979: IFFALSE 26078
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25981: LD_EXP 98
25985: PUSH
25986: LD_VAR 0 6
25990: ARRAY
25991: PUSH
25992: LD_VAR 0 5
25996: ARRAY
25997: PUSH
25998: LD_INT 1
26000: ARRAY
26001: PPUSH
26002: LD_EXP 98
26006: PUSH
26007: LD_VAR 0 6
26011: ARRAY
26012: PUSH
26013: LD_VAR 0 5
26017: ARRAY
26018: PUSH
26019: LD_INT 2
26021: ARRAY
26022: PPUSH
26023: LD_VAR 0 1
26027: PPUSH
26028: CALL_OW 255
26032: PPUSH
26033: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26037: LD_ADDR_EXP 98
26041: PUSH
26042: LD_EXP 98
26046: PPUSH
26047: LD_VAR 0 6
26051: PPUSH
26052: LD_EXP 98
26056: PUSH
26057: LD_VAR 0 6
26061: ARRAY
26062: PPUSH
26063: LD_VAR 0 5
26067: PPUSH
26068: CALL_OW 3
26072: PPUSH
26073: CALL_OW 1
26077: ST_TO_ADDR
// end ; end ;
26078: GO 25916
26080: POP
26081: POP
// end ;
26082: LD_VAR 0 4
26086: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
26087: LD_INT 0
26089: PPUSH
26090: PPUSH
26091: PPUSH
26092: PPUSH
26093: PPUSH
26094: PPUSH
26095: PPUSH
26096: PPUSH
26097: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26098: LD_VAR 0 1
26102: PPUSH
26103: CALL_OW 264
26107: PUSH
26108: LD_INT 81
26110: EQUAL
26111: NOT
26112: PUSH
26113: LD_VAR 0 1
26117: PUSH
26118: LD_EXP 97
26122: IN
26123: NOT
26124: OR
26125: IFFALSE 26129
// exit ;
26127: GO 26451
// index := GetElementIndex ( minersList , unit ) ;
26129: LD_ADDR_VAR 0 6
26133: PUSH
26134: LD_EXP 97
26138: PPUSH
26139: LD_VAR 0 1
26143: PPUSH
26144: CALL 31798 0 2
26148: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
26149: LD_ADDR_VAR 0 8
26153: PUSH
26154: LD_EXP 99
26158: PUSH
26159: LD_EXP 98
26163: PUSH
26164: LD_VAR 0 6
26168: ARRAY
26169: MINUS
26170: ST_TO_ADDR
// if not minesFreeAmount then
26171: LD_VAR 0 8
26175: NOT
26176: IFFALSE 26180
// exit ;
26178: GO 26451
// tmp := [ ] ;
26180: LD_ADDR_VAR 0 7
26184: PUSH
26185: EMPTY
26186: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
26187: LD_ADDR_VAR 0 5
26191: PUSH
26192: DOUBLE
26193: LD_INT 1
26195: DEC
26196: ST_TO_ADDR
26197: LD_VAR 0 8
26201: PUSH
26202: FOR_TO
26203: IFFALSE 26398
// begin _d := rand ( 0 , 5 ) ;
26205: LD_ADDR_VAR 0 11
26209: PUSH
26210: LD_INT 0
26212: PPUSH
26213: LD_INT 5
26215: PPUSH
26216: CALL_OW 12
26220: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
26221: LD_ADDR_VAR 0 12
26225: PUSH
26226: LD_INT 2
26228: PPUSH
26229: LD_INT 6
26231: PPUSH
26232: CALL_OW 12
26236: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
26237: LD_ADDR_VAR 0 9
26241: PUSH
26242: LD_VAR 0 2
26246: PPUSH
26247: LD_VAR 0 11
26251: PPUSH
26252: LD_VAR 0 12
26256: PPUSH
26257: CALL_OW 272
26261: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
26262: LD_ADDR_VAR 0 10
26266: PUSH
26267: LD_VAR 0 3
26271: PPUSH
26272: LD_VAR 0 11
26276: PPUSH
26277: LD_VAR 0 12
26281: PPUSH
26282: CALL_OW 273
26286: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
26287: LD_VAR 0 9
26291: PPUSH
26292: LD_VAR 0 10
26296: PPUSH
26297: CALL_OW 488
26301: PUSH
26302: LD_VAR 0 9
26306: PUSH
26307: LD_VAR 0 10
26311: PUSH
26312: EMPTY
26313: LIST
26314: LIST
26315: PUSH
26316: LD_VAR 0 7
26320: IN
26321: NOT
26322: AND
26323: PUSH
26324: LD_VAR 0 9
26328: PPUSH
26329: LD_VAR 0 10
26333: PPUSH
26334: CALL_OW 458
26338: NOT
26339: AND
26340: IFFALSE 26382
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
26342: LD_ADDR_VAR 0 7
26346: PUSH
26347: LD_VAR 0 7
26351: PPUSH
26352: LD_VAR 0 7
26356: PUSH
26357: LD_INT 1
26359: PLUS
26360: PPUSH
26361: LD_VAR 0 9
26365: PUSH
26366: LD_VAR 0 10
26370: PUSH
26371: EMPTY
26372: LIST
26373: LIST
26374: PPUSH
26375: CALL_OW 1
26379: ST_TO_ADDR
26380: GO 26396
// i := i - 1 ;
26382: LD_ADDR_VAR 0 5
26386: PUSH
26387: LD_VAR 0 5
26391: PUSH
26392: LD_INT 1
26394: MINUS
26395: ST_TO_ADDR
// end ;
26396: GO 26202
26398: POP
26399: POP
// for i in tmp do
26400: LD_ADDR_VAR 0 5
26404: PUSH
26405: LD_VAR 0 7
26409: PUSH
26410: FOR_IN
26411: IFFALSE 26449
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
26413: LD_VAR 0 1
26417: PPUSH
26418: LD_VAR 0 5
26422: PUSH
26423: LD_INT 1
26425: ARRAY
26426: PPUSH
26427: LD_VAR 0 5
26431: PUSH
26432: LD_INT 2
26434: ARRAY
26435: PPUSH
26436: CALL 25395 0 3
26440: NOT
26441: IFFALSE 26447
// exit ;
26443: POP
26444: POP
26445: GO 26451
26447: GO 26410
26449: POP
26450: POP
// end ;
26451: LD_VAR 0 4
26455: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
26456: LD_INT 0
26458: PPUSH
26459: PPUSH
26460: PPUSH
26461: PPUSH
26462: PPUSH
26463: PPUSH
26464: PPUSH
// if not GetClass ( unit ) = class_sniper then
26465: LD_VAR 0 1
26469: PPUSH
26470: CALL_OW 257
26474: PUSH
26475: LD_INT 5
26477: EQUAL
26478: NOT
26479: IFFALSE 26483
// exit ;
26481: GO 26871
// dist := 8 ;
26483: LD_ADDR_VAR 0 5
26487: PUSH
26488: LD_INT 8
26490: ST_TO_ADDR
// viewRange := 12 ;
26491: LD_ADDR_VAR 0 7
26495: PUSH
26496: LD_INT 12
26498: ST_TO_ADDR
// side := GetSide ( unit ) ;
26499: LD_ADDR_VAR 0 6
26503: PUSH
26504: LD_VAR 0 1
26508: PPUSH
26509: CALL_OW 255
26513: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
26514: LD_INT 61
26516: PPUSH
26517: LD_VAR 0 6
26521: PPUSH
26522: CALL_OW 321
26526: PUSH
26527: LD_INT 2
26529: EQUAL
26530: IFFALSE 26540
// viewRange := 16 ;
26532: LD_ADDR_VAR 0 7
26536: PUSH
26537: LD_INT 16
26539: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
26540: LD_VAR 0 1
26544: PPUSH
26545: LD_VAR 0 2
26549: PPUSH
26550: LD_VAR 0 3
26554: PPUSH
26555: CALL_OW 297
26559: PUSH
26560: LD_VAR 0 5
26564: GREATER
26565: IFFALSE 26644
// begin ComMoveXY ( unit , x , y ) ;
26567: LD_VAR 0 1
26571: PPUSH
26572: LD_VAR 0 2
26576: PPUSH
26577: LD_VAR 0 3
26581: PPUSH
26582: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26586: LD_INT 35
26588: PPUSH
26589: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
26593: LD_VAR 0 1
26597: PPUSH
26598: LD_VAR 0 2
26602: PPUSH
26603: LD_VAR 0 3
26607: PPUSH
26608: CALL 63153 0 3
26612: NOT
26613: IFFALSE 26617
// exit ;
26615: GO 26871
// until GetDistUnitXY ( unit , x , y ) < dist ;
26617: LD_VAR 0 1
26621: PPUSH
26622: LD_VAR 0 2
26626: PPUSH
26627: LD_VAR 0 3
26631: PPUSH
26632: CALL_OW 297
26636: PUSH
26637: LD_VAR 0 5
26641: LESS
26642: IFFALSE 26586
// end ; ComTurnXY ( unit , x , y ) ;
26644: LD_VAR 0 1
26648: PPUSH
26649: LD_VAR 0 2
26653: PPUSH
26654: LD_VAR 0 3
26658: PPUSH
26659: CALL_OW 118
// wait ( 5 ) ;
26663: LD_INT 5
26665: PPUSH
26666: CALL_OW 67
// _d := GetDir ( unit ) ;
26670: LD_ADDR_VAR 0 10
26674: PUSH
26675: LD_VAR 0 1
26679: PPUSH
26680: CALL_OW 254
26684: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
26685: LD_ADDR_VAR 0 8
26689: PUSH
26690: LD_VAR 0 1
26694: PPUSH
26695: CALL_OW 250
26699: PPUSH
26700: LD_VAR 0 10
26704: PPUSH
26705: LD_VAR 0 5
26709: PPUSH
26710: CALL_OW 272
26714: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
26715: LD_ADDR_VAR 0 9
26719: PUSH
26720: LD_VAR 0 1
26724: PPUSH
26725: CALL_OW 251
26729: PPUSH
26730: LD_VAR 0 10
26734: PPUSH
26735: LD_VAR 0 5
26739: PPUSH
26740: CALL_OW 273
26744: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26745: LD_VAR 0 8
26749: PPUSH
26750: LD_VAR 0 9
26754: PPUSH
26755: CALL_OW 488
26759: NOT
26760: IFFALSE 26764
// exit ;
26762: GO 26871
// ComAnimCustom ( unit , 1 ) ;
26764: LD_VAR 0 1
26768: PPUSH
26769: LD_INT 1
26771: PPUSH
26772: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
26776: LD_VAR 0 8
26780: PPUSH
26781: LD_VAR 0 9
26785: PPUSH
26786: LD_VAR 0 6
26790: PPUSH
26791: LD_VAR 0 7
26795: PPUSH
26796: CALL_OW 330
// repeat wait ( 1 ) ;
26800: LD_INT 1
26802: PPUSH
26803: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
26807: LD_VAR 0 1
26811: PPUSH
26812: CALL_OW 316
26816: PUSH
26817: LD_VAR 0 1
26821: PPUSH
26822: CALL_OW 314
26826: OR
26827: PUSH
26828: LD_VAR 0 1
26832: PPUSH
26833: CALL_OW 302
26837: NOT
26838: OR
26839: PUSH
26840: LD_VAR 0 1
26844: PPUSH
26845: CALL_OW 301
26849: OR
26850: IFFALSE 26800
// RemoveSeeing ( _x , _y , side ) ;
26852: LD_VAR 0 8
26856: PPUSH
26857: LD_VAR 0 9
26861: PPUSH
26862: LD_VAR 0 6
26866: PPUSH
26867: CALL_OW 331
// end ; end_of_file
26871: LD_VAR 0 4
26875: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
26876: LD_INT 0
26878: PPUSH
26879: PPUSH
// if exist_mode then
26880: LD_VAR 0 2
26884: IFFALSE 26909
// unit := CreateCharacter ( prefix & ident ) else
26886: LD_ADDR_VAR 0 5
26890: PUSH
26891: LD_VAR 0 3
26895: PUSH
26896: LD_VAR 0 1
26900: STR
26901: PPUSH
26902: CALL_OW 34
26906: ST_TO_ADDR
26907: GO 26924
// unit := NewCharacter ( ident ) ;
26909: LD_ADDR_VAR 0 5
26913: PUSH
26914: LD_VAR 0 1
26918: PPUSH
26919: CALL_OW 25
26923: ST_TO_ADDR
// result := unit ;
26924: LD_ADDR_VAR 0 4
26928: PUSH
26929: LD_VAR 0 5
26933: ST_TO_ADDR
// end ;
26934: LD_VAR 0 4
26938: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
26939: LD_INT 0
26941: PPUSH
26942: PPUSH
// if not side or not nation then
26943: LD_VAR 0 1
26947: NOT
26948: PUSH
26949: LD_VAR 0 2
26953: NOT
26954: OR
26955: IFFALSE 26959
// exit ;
26957: GO 27727
// case nation of nation_american :
26959: LD_VAR 0 2
26963: PUSH
26964: LD_INT 1
26966: DOUBLE
26967: EQUAL
26968: IFTRUE 26972
26970: GO 27186
26972: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
26973: LD_ADDR_VAR 0 4
26977: PUSH
26978: LD_INT 35
26980: PUSH
26981: LD_INT 45
26983: PUSH
26984: LD_INT 46
26986: PUSH
26987: LD_INT 47
26989: PUSH
26990: LD_INT 82
26992: PUSH
26993: LD_INT 83
26995: PUSH
26996: LD_INT 84
26998: PUSH
26999: LD_INT 85
27001: PUSH
27002: LD_INT 86
27004: PUSH
27005: LD_INT 1
27007: PUSH
27008: LD_INT 2
27010: PUSH
27011: LD_INT 6
27013: PUSH
27014: LD_INT 15
27016: PUSH
27017: LD_INT 16
27019: PUSH
27020: LD_INT 7
27022: PUSH
27023: LD_INT 12
27025: PUSH
27026: LD_INT 13
27028: PUSH
27029: LD_INT 10
27031: PUSH
27032: LD_INT 14
27034: PUSH
27035: LD_INT 20
27037: PUSH
27038: LD_INT 21
27040: PUSH
27041: LD_INT 22
27043: PUSH
27044: LD_INT 25
27046: PUSH
27047: LD_INT 32
27049: PUSH
27050: LD_INT 27
27052: PUSH
27053: LD_INT 36
27055: PUSH
27056: LD_INT 69
27058: PUSH
27059: LD_INT 39
27061: PUSH
27062: LD_INT 34
27064: PUSH
27065: LD_INT 40
27067: PUSH
27068: LD_INT 48
27070: PUSH
27071: LD_INT 49
27073: PUSH
27074: LD_INT 50
27076: PUSH
27077: LD_INT 51
27079: PUSH
27080: LD_INT 52
27082: PUSH
27083: LD_INT 53
27085: PUSH
27086: LD_INT 54
27088: PUSH
27089: LD_INT 55
27091: PUSH
27092: LD_INT 56
27094: PUSH
27095: LD_INT 57
27097: PUSH
27098: LD_INT 58
27100: PUSH
27101: LD_INT 59
27103: PUSH
27104: LD_INT 60
27106: PUSH
27107: LD_INT 61
27109: PUSH
27110: LD_INT 62
27112: PUSH
27113: LD_INT 80
27115: PUSH
27116: LD_INT 82
27118: PUSH
27119: LD_INT 83
27121: PUSH
27122: LD_INT 84
27124: PUSH
27125: LD_INT 85
27127: PUSH
27128: LD_INT 86
27130: PUSH
27131: EMPTY
27132: LIST
27133: LIST
27134: LIST
27135: LIST
27136: LIST
27137: LIST
27138: LIST
27139: LIST
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: LIST
27152: LIST
27153: LIST
27154: LIST
27155: LIST
27156: LIST
27157: LIST
27158: LIST
27159: LIST
27160: LIST
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: LIST
27171: LIST
27172: LIST
27173: LIST
27174: LIST
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: ST_TO_ADDR
27184: GO 27651
27186: LD_INT 2
27188: DOUBLE
27189: EQUAL
27190: IFTRUE 27194
27192: GO 27420
27194: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
27195: LD_ADDR_VAR 0 4
27199: PUSH
27200: LD_INT 35
27202: PUSH
27203: LD_INT 45
27205: PUSH
27206: LD_INT 46
27208: PUSH
27209: LD_INT 47
27211: PUSH
27212: LD_INT 82
27214: PUSH
27215: LD_INT 83
27217: PUSH
27218: LD_INT 84
27220: PUSH
27221: LD_INT 85
27223: PUSH
27224: LD_INT 87
27226: PUSH
27227: LD_INT 70
27229: PUSH
27230: LD_INT 1
27232: PUSH
27233: LD_INT 11
27235: PUSH
27236: LD_INT 3
27238: PUSH
27239: LD_INT 4
27241: PUSH
27242: LD_INT 5
27244: PUSH
27245: LD_INT 6
27247: PUSH
27248: LD_INT 15
27250: PUSH
27251: LD_INT 18
27253: PUSH
27254: LD_INT 7
27256: PUSH
27257: LD_INT 17
27259: PUSH
27260: LD_INT 8
27262: PUSH
27263: LD_INT 20
27265: PUSH
27266: LD_INT 21
27268: PUSH
27269: LD_INT 22
27271: PUSH
27272: LD_INT 72
27274: PUSH
27275: LD_INT 26
27277: PUSH
27278: LD_INT 69
27280: PUSH
27281: LD_INT 39
27283: PUSH
27284: LD_INT 40
27286: PUSH
27287: LD_INT 41
27289: PUSH
27290: LD_INT 42
27292: PUSH
27293: LD_INT 43
27295: PUSH
27296: LD_INT 48
27298: PUSH
27299: LD_INT 49
27301: PUSH
27302: LD_INT 50
27304: PUSH
27305: LD_INT 51
27307: PUSH
27308: LD_INT 52
27310: PUSH
27311: LD_INT 53
27313: PUSH
27314: LD_INT 54
27316: PUSH
27317: LD_INT 55
27319: PUSH
27320: LD_INT 56
27322: PUSH
27323: LD_INT 60
27325: PUSH
27326: LD_INT 61
27328: PUSH
27329: LD_INT 62
27331: PUSH
27332: LD_INT 66
27334: PUSH
27335: LD_INT 67
27337: PUSH
27338: LD_INT 68
27340: PUSH
27341: LD_INT 81
27343: PUSH
27344: LD_INT 82
27346: PUSH
27347: LD_INT 83
27349: PUSH
27350: LD_INT 84
27352: PUSH
27353: LD_INT 85
27355: PUSH
27356: LD_INT 87
27358: PUSH
27359: LD_INT 88
27361: PUSH
27362: EMPTY
27363: LIST
27364: LIST
27365: LIST
27366: LIST
27367: LIST
27368: LIST
27369: LIST
27370: LIST
27371: LIST
27372: LIST
27373: LIST
27374: LIST
27375: LIST
27376: LIST
27377: LIST
27378: LIST
27379: LIST
27380: LIST
27381: LIST
27382: LIST
27383: LIST
27384: LIST
27385: LIST
27386: LIST
27387: LIST
27388: LIST
27389: LIST
27390: LIST
27391: LIST
27392: LIST
27393: LIST
27394: LIST
27395: LIST
27396: LIST
27397: LIST
27398: LIST
27399: LIST
27400: LIST
27401: LIST
27402: LIST
27403: LIST
27404: LIST
27405: LIST
27406: LIST
27407: LIST
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: ST_TO_ADDR
27418: GO 27651
27420: LD_INT 3
27422: DOUBLE
27423: EQUAL
27424: IFTRUE 27428
27426: GO 27650
27428: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27429: LD_ADDR_VAR 0 4
27433: PUSH
27434: LD_INT 46
27436: PUSH
27437: LD_INT 47
27439: PUSH
27440: LD_INT 1
27442: PUSH
27443: LD_INT 2
27445: PUSH
27446: LD_INT 82
27448: PUSH
27449: LD_INT 83
27451: PUSH
27452: LD_INT 84
27454: PUSH
27455: LD_INT 85
27457: PUSH
27458: LD_INT 86
27460: PUSH
27461: LD_INT 11
27463: PUSH
27464: LD_INT 9
27466: PUSH
27467: LD_INT 20
27469: PUSH
27470: LD_INT 19
27472: PUSH
27473: LD_INT 21
27475: PUSH
27476: LD_INT 24
27478: PUSH
27479: LD_INT 22
27481: PUSH
27482: LD_INT 25
27484: PUSH
27485: LD_INT 28
27487: PUSH
27488: LD_INT 29
27490: PUSH
27491: LD_INT 30
27493: PUSH
27494: LD_INT 31
27496: PUSH
27497: LD_INT 37
27499: PUSH
27500: LD_INT 38
27502: PUSH
27503: LD_INT 32
27505: PUSH
27506: LD_INT 27
27508: PUSH
27509: LD_INT 33
27511: PUSH
27512: LD_INT 69
27514: PUSH
27515: LD_INT 39
27517: PUSH
27518: LD_INT 34
27520: PUSH
27521: LD_INT 40
27523: PUSH
27524: LD_INT 71
27526: PUSH
27527: LD_INT 23
27529: PUSH
27530: LD_INT 44
27532: PUSH
27533: LD_INT 48
27535: PUSH
27536: LD_INT 49
27538: PUSH
27539: LD_INT 50
27541: PUSH
27542: LD_INT 51
27544: PUSH
27545: LD_INT 52
27547: PUSH
27548: LD_INT 53
27550: PUSH
27551: LD_INT 54
27553: PUSH
27554: LD_INT 55
27556: PUSH
27557: LD_INT 56
27559: PUSH
27560: LD_INT 57
27562: PUSH
27563: LD_INT 58
27565: PUSH
27566: LD_INT 59
27568: PUSH
27569: LD_INT 63
27571: PUSH
27572: LD_INT 64
27574: PUSH
27575: LD_INT 65
27577: PUSH
27578: LD_INT 82
27580: PUSH
27581: LD_INT 83
27583: PUSH
27584: LD_INT 84
27586: PUSH
27587: LD_INT 85
27589: PUSH
27590: LD_INT 86
27592: PUSH
27593: EMPTY
27594: LIST
27595: LIST
27596: LIST
27597: LIST
27598: LIST
27599: LIST
27600: LIST
27601: LIST
27602: LIST
27603: LIST
27604: LIST
27605: LIST
27606: LIST
27607: LIST
27608: LIST
27609: LIST
27610: LIST
27611: LIST
27612: LIST
27613: LIST
27614: LIST
27615: LIST
27616: LIST
27617: LIST
27618: LIST
27619: LIST
27620: LIST
27621: LIST
27622: LIST
27623: LIST
27624: LIST
27625: LIST
27626: LIST
27627: LIST
27628: LIST
27629: LIST
27630: LIST
27631: LIST
27632: LIST
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: LIST
27647: ST_TO_ADDR
27648: GO 27651
27650: POP
// if state > - 1 and state < 3 then
27651: LD_VAR 0 3
27655: PUSH
27656: LD_INT 1
27658: NEG
27659: GREATER
27660: PUSH
27661: LD_VAR 0 3
27665: PUSH
27666: LD_INT 3
27668: LESS
27669: AND
27670: IFFALSE 27727
// for i in result do
27672: LD_ADDR_VAR 0 5
27676: PUSH
27677: LD_VAR 0 4
27681: PUSH
27682: FOR_IN
27683: IFFALSE 27725
// if GetTech ( i , side ) <> state then
27685: LD_VAR 0 5
27689: PPUSH
27690: LD_VAR 0 1
27694: PPUSH
27695: CALL_OW 321
27699: PUSH
27700: LD_VAR 0 3
27704: NONEQUAL
27705: IFFALSE 27723
// result := result diff i ;
27707: LD_ADDR_VAR 0 4
27711: PUSH
27712: LD_VAR 0 4
27716: PUSH
27717: LD_VAR 0 5
27721: DIFF
27722: ST_TO_ADDR
27723: GO 27682
27725: POP
27726: POP
// end ;
27727: LD_VAR 0 4
27731: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
27732: LD_INT 0
27734: PPUSH
27735: PPUSH
27736: PPUSH
// result := true ;
27737: LD_ADDR_VAR 0 3
27741: PUSH
27742: LD_INT 1
27744: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
27745: LD_ADDR_VAR 0 5
27749: PUSH
27750: LD_VAR 0 2
27754: PPUSH
27755: CALL_OW 480
27759: ST_TO_ADDR
// if not tmp then
27760: LD_VAR 0 5
27764: NOT
27765: IFFALSE 27769
// exit ;
27767: GO 27818
// for i in tmp do
27769: LD_ADDR_VAR 0 4
27773: PUSH
27774: LD_VAR 0 5
27778: PUSH
27779: FOR_IN
27780: IFFALSE 27816
// if GetTech ( i , side ) <> state_researched then
27782: LD_VAR 0 4
27786: PPUSH
27787: LD_VAR 0 1
27791: PPUSH
27792: CALL_OW 321
27796: PUSH
27797: LD_INT 2
27799: NONEQUAL
27800: IFFALSE 27814
// begin result := false ;
27802: LD_ADDR_VAR 0 3
27806: PUSH
27807: LD_INT 0
27809: ST_TO_ADDR
// exit ;
27810: POP
27811: POP
27812: GO 27818
// end ;
27814: GO 27779
27816: POP
27817: POP
// end ;
27818: LD_VAR 0 3
27822: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
27823: LD_INT 0
27825: PPUSH
27826: PPUSH
27827: PPUSH
27828: PPUSH
27829: PPUSH
27830: PPUSH
27831: PPUSH
27832: PPUSH
27833: PPUSH
27834: PPUSH
27835: PPUSH
27836: PPUSH
27837: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
27838: LD_VAR 0 1
27842: NOT
27843: PUSH
27844: LD_VAR 0 1
27848: PPUSH
27849: CALL_OW 257
27853: PUSH
27854: LD_INT 9
27856: NONEQUAL
27857: OR
27858: IFFALSE 27862
// exit ;
27860: GO 28435
// side := GetSide ( unit ) ;
27862: LD_ADDR_VAR 0 9
27866: PUSH
27867: LD_VAR 0 1
27871: PPUSH
27872: CALL_OW 255
27876: ST_TO_ADDR
// tech_space := tech_spacanom ;
27877: LD_ADDR_VAR 0 12
27881: PUSH
27882: LD_INT 29
27884: ST_TO_ADDR
// tech_time := tech_taurad ;
27885: LD_ADDR_VAR 0 13
27889: PUSH
27890: LD_INT 28
27892: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
27893: LD_ADDR_VAR 0 11
27897: PUSH
27898: LD_VAR 0 1
27902: PPUSH
27903: CALL_OW 310
27907: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
27908: LD_VAR 0 11
27912: PPUSH
27913: CALL_OW 247
27917: PUSH
27918: LD_INT 2
27920: EQUAL
27921: IFFALSE 27925
// exit ;
27923: GO 28435
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27925: LD_ADDR_VAR 0 8
27929: PUSH
27930: LD_INT 81
27932: PUSH
27933: LD_VAR 0 9
27937: PUSH
27938: EMPTY
27939: LIST
27940: LIST
27941: PUSH
27942: LD_INT 3
27944: PUSH
27945: LD_INT 21
27947: PUSH
27948: LD_INT 3
27950: PUSH
27951: EMPTY
27952: LIST
27953: LIST
27954: PUSH
27955: EMPTY
27956: LIST
27957: LIST
27958: PUSH
27959: EMPTY
27960: LIST
27961: LIST
27962: PPUSH
27963: CALL_OW 69
27967: ST_TO_ADDR
// if not tmp then
27968: LD_VAR 0 8
27972: NOT
27973: IFFALSE 27977
// exit ;
27975: GO 28435
// if in_unit then
27977: LD_VAR 0 11
27981: IFFALSE 28005
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
27983: LD_ADDR_VAR 0 10
27987: PUSH
27988: LD_VAR 0 8
27992: PPUSH
27993: LD_VAR 0 11
27997: PPUSH
27998: CALL_OW 74
28002: ST_TO_ADDR
28003: GO 28025
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28005: LD_ADDR_VAR 0 10
28009: PUSH
28010: LD_VAR 0 8
28014: PPUSH
28015: LD_VAR 0 1
28019: PPUSH
28020: CALL_OW 74
28024: ST_TO_ADDR
// if not enemy then
28025: LD_VAR 0 10
28029: NOT
28030: IFFALSE 28034
// exit ;
28032: GO 28435
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28034: LD_VAR 0 11
28038: PUSH
28039: LD_VAR 0 11
28043: PPUSH
28044: LD_VAR 0 10
28048: PPUSH
28049: CALL_OW 296
28053: PUSH
28054: LD_INT 13
28056: GREATER
28057: AND
28058: PUSH
28059: LD_VAR 0 1
28063: PPUSH
28064: LD_VAR 0 10
28068: PPUSH
28069: CALL_OW 296
28073: PUSH
28074: LD_INT 12
28076: GREATER
28077: OR
28078: IFFALSE 28082
// exit ;
28080: GO 28435
// missile := [ 1 ] ;
28082: LD_ADDR_VAR 0 14
28086: PUSH
28087: LD_INT 1
28089: PUSH
28090: EMPTY
28091: LIST
28092: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28093: LD_VAR 0 9
28097: PPUSH
28098: LD_VAR 0 12
28102: PPUSH
28103: CALL_OW 325
28107: IFFALSE 28136
// missile := Replace ( missile , missile + 1 , 2 ) ;
28109: LD_ADDR_VAR 0 14
28113: PUSH
28114: LD_VAR 0 14
28118: PPUSH
28119: LD_VAR 0 14
28123: PUSH
28124: LD_INT 1
28126: PLUS
28127: PPUSH
28128: LD_INT 2
28130: PPUSH
28131: CALL_OW 1
28135: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28136: LD_VAR 0 9
28140: PPUSH
28141: LD_VAR 0 13
28145: PPUSH
28146: CALL_OW 325
28150: PUSH
28151: LD_VAR 0 10
28155: PPUSH
28156: CALL_OW 255
28160: PPUSH
28161: LD_VAR 0 13
28165: PPUSH
28166: CALL_OW 325
28170: NOT
28171: AND
28172: IFFALSE 28201
// missile := Replace ( missile , missile + 1 , 3 ) ;
28174: LD_ADDR_VAR 0 14
28178: PUSH
28179: LD_VAR 0 14
28183: PPUSH
28184: LD_VAR 0 14
28188: PUSH
28189: LD_INT 1
28191: PLUS
28192: PPUSH
28193: LD_INT 3
28195: PPUSH
28196: CALL_OW 1
28200: ST_TO_ADDR
// if missile < 2 then
28201: LD_VAR 0 14
28205: PUSH
28206: LD_INT 2
28208: LESS
28209: IFFALSE 28213
// exit ;
28211: GO 28435
// x := GetX ( enemy ) ;
28213: LD_ADDR_VAR 0 4
28217: PUSH
28218: LD_VAR 0 10
28222: PPUSH
28223: CALL_OW 250
28227: ST_TO_ADDR
// y := GetY ( enemy ) ;
28228: LD_ADDR_VAR 0 5
28232: PUSH
28233: LD_VAR 0 10
28237: PPUSH
28238: CALL_OW 251
28242: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28243: LD_ADDR_VAR 0 6
28247: PUSH
28248: LD_VAR 0 4
28252: PUSH
28253: LD_INT 1
28255: NEG
28256: PPUSH
28257: LD_INT 1
28259: PPUSH
28260: CALL_OW 12
28264: PLUS
28265: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28266: LD_ADDR_VAR 0 7
28270: PUSH
28271: LD_VAR 0 5
28275: PUSH
28276: LD_INT 1
28278: NEG
28279: PPUSH
28280: LD_INT 1
28282: PPUSH
28283: CALL_OW 12
28287: PLUS
28288: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28289: LD_VAR 0 6
28293: PPUSH
28294: LD_VAR 0 7
28298: PPUSH
28299: CALL_OW 488
28303: NOT
28304: IFFALSE 28326
// begin _x := x ;
28306: LD_ADDR_VAR 0 6
28310: PUSH
28311: LD_VAR 0 4
28315: ST_TO_ADDR
// _y := y ;
28316: LD_ADDR_VAR 0 7
28320: PUSH
28321: LD_VAR 0 5
28325: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28326: LD_ADDR_VAR 0 3
28330: PUSH
28331: LD_INT 1
28333: PPUSH
28334: LD_VAR 0 14
28338: PPUSH
28339: CALL_OW 12
28343: ST_TO_ADDR
// case i of 1 :
28344: LD_VAR 0 3
28348: PUSH
28349: LD_INT 1
28351: DOUBLE
28352: EQUAL
28353: IFTRUE 28357
28355: GO 28374
28357: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28358: LD_VAR 0 1
28362: PPUSH
28363: LD_VAR 0 10
28367: PPUSH
28368: CALL_OW 115
28372: GO 28435
28374: LD_INT 2
28376: DOUBLE
28377: EQUAL
28378: IFTRUE 28382
28380: GO 28404
28382: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28383: LD_VAR 0 1
28387: PPUSH
28388: LD_VAR 0 6
28392: PPUSH
28393: LD_VAR 0 7
28397: PPUSH
28398: CALL_OW 153
28402: GO 28435
28404: LD_INT 3
28406: DOUBLE
28407: EQUAL
28408: IFTRUE 28412
28410: GO 28434
28412: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28413: LD_VAR 0 1
28417: PPUSH
28418: LD_VAR 0 6
28422: PPUSH
28423: LD_VAR 0 7
28427: PPUSH
28428: CALL_OW 154
28432: GO 28435
28434: POP
// end ;
28435: LD_VAR 0 2
28439: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28440: LD_INT 0
28442: PPUSH
28443: PPUSH
28444: PPUSH
28445: PPUSH
28446: PPUSH
28447: PPUSH
// if not unit or not building then
28448: LD_VAR 0 1
28452: NOT
28453: PUSH
28454: LD_VAR 0 2
28458: NOT
28459: OR
28460: IFFALSE 28464
// exit ;
28462: GO 28622
// x := GetX ( building ) ;
28464: LD_ADDR_VAR 0 5
28468: PUSH
28469: LD_VAR 0 2
28473: PPUSH
28474: CALL_OW 250
28478: ST_TO_ADDR
// y := GetY ( building ) ;
28479: LD_ADDR_VAR 0 6
28483: PUSH
28484: LD_VAR 0 2
28488: PPUSH
28489: CALL_OW 251
28493: ST_TO_ADDR
// for i = 0 to 5 do
28494: LD_ADDR_VAR 0 4
28498: PUSH
28499: DOUBLE
28500: LD_INT 0
28502: DEC
28503: ST_TO_ADDR
28504: LD_INT 5
28506: PUSH
28507: FOR_TO
28508: IFFALSE 28620
// begin _x := ShiftX ( x , i , 3 ) ;
28510: LD_ADDR_VAR 0 7
28514: PUSH
28515: LD_VAR 0 5
28519: PPUSH
28520: LD_VAR 0 4
28524: PPUSH
28525: LD_INT 3
28527: PPUSH
28528: CALL_OW 272
28532: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28533: LD_ADDR_VAR 0 8
28537: PUSH
28538: LD_VAR 0 6
28542: PPUSH
28543: LD_VAR 0 4
28547: PPUSH
28548: LD_INT 3
28550: PPUSH
28551: CALL_OW 273
28555: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28556: LD_VAR 0 7
28560: PPUSH
28561: LD_VAR 0 8
28565: PPUSH
28566: CALL_OW 488
28570: NOT
28571: IFFALSE 28575
// continue ;
28573: GO 28507
// if HexInfo ( _x , _y ) = 0 then
28575: LD_VAR 0 7
28579: PPUSH
28580: LD_VAR 0 8
28584: PPUSH
28585: CALL_OW 428
28589: PUSH
28590: LD_INT 0
28592: EQUAL
28593: IFFALSE 28618
// begin ComMoveXY ( unit , _x , _y ) ;
28595: LD_VAR 0 1
28599: PPUSH
28600: LD_VAR 0 7
28604: PPUSH
28605: LD_VAR 0 8
28609: PPUSH
28610: CALL_OW 111
// exit ;
28614: POP
28615: POP
28616: GO 28622
// end ; end ;
28618: GO 28507
28620: POP
28621: POP
// end ;
28622: LD_VAR 0 3
28626: RET
// export function ScanBase ( side , base_area ) ; begin
28627: LD_INT 0
28629: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28630: LD_ADDR_VAR 0 3
28634: PUSH
28635: LD_VAR 0 2
28639: PPUSH
28640: LD_INT 81
28642: PUSH
28643: LD_VAR 0 1
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: PPUSH
28652: CALL_OW 70
28656: ST_TO_ADDR
// end ;
28657: LD_VAR 0 3
28661: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28662: LD_INT 0
28664: PPUSH
28665: PPUSH
28666: PPUSH
28667: PPUSH
// result := false ;
28668: LD_ADDR_VAR 0 2
28672: PUSH
28673: LD_INT 0
28675: ST_TO_ADDR
// side := GetSide ( unit ) ;
28676: LD_ADDR_VAR 0 3
28680: PUSH
28681: LD_VAR 0 1
28685: PPUSH
28686: CALL_OW 255
28690: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28691: LD_ADDR_VAR 0 4
28695: PUSH
28696: LD_VAR 0 1
28700: PPUSH
28701: CALL_OW 248
28705: ST_TO_ADDR
// case nat of 1 :
28706: LD_VAR 0 4
28710: PUSH
28711: LD_INT 1
28713: DOUBLE
28714: EQUAL
28715: IFTRUE 28719
28717: GO 28730
28719: POP
// tech := tech_lassight ; 2 :
28720: LD_ADDR_VAR 0 5
28724: PUSH
28725: LD_INT 12
28727: ST_TO_ADDR
28728: GO 28769
28730: LD_INT 2
28732: DOUBLE
28733: EQUAL
28734: IFTRUE 28738
28736: GO 28749
28738: POP
// tech := tech_mortar ; 3 :
28739: LD_ADDR_VAR 0 5
28743: PUSH
28744: LD_INT 41
28746: ST_TO_ADDR
28747: GO 28769
28749: LD_INT 3
28751: DOUBLE
28752: EQUAL
28753: IFTRUE 28757
28755: GO 28768
28757: POP
// tech := tech_bazooka ; end ;
28758: LD_ADDR_VAR 0 5
28762: PUSH
28763: LD_INT 44
28765: ST_TO_ADDR
28766: GO 28769
28768: POP
// if Researched ( side , tech ) then
28769: LD_VAR 0 3
28773: PPUSH
28774: LD_VAR 0 5
28778: PPUSH
28779: CALL_OW 325
28783: IFFALSE 28810
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
28785: LD_ADDR_VAR 0 2
28789: PUSH
28790: LD_INT 5
28792: PUSH
28793: LD_INT 8
28795: PUSH
28796: LD_INT 9
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: LIST
28803: PUSH
28804: LD_VAR 0 4
28808: ARRAY
28809: ST_TO_ADDR
// end ;
28810: LD_VAR 0 2
28814: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
28815: LD_INT 0
28817: PPUSH
28818: PPUSH
28819: PPUSH
// if not mines then
28820: LD_VAR 0 2
28824: NOT
28825: IFFALSE 28829
// exit ;
28827: GO 28973
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28829: LD_ADDR_VAR 0 5
28833: PUSH
28834: LD_INT 81
28836: PUSH
28837: LD_VAR 0 1
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: PUSH
28846: LD_INT 3
28848: PUSH
28849: LD_INT 21
28851: PUSH
28852: LD_INT 3
28854: PUSH
28855: EMPTY
28856: LIST
28857: LIST
28858: PUSH
28859: EMPTY
28860: LIST
28861: LIST
28862: PUSH
28863: EMPTY
28864: LIST
28865: LIST
28866: PPUSH
28867: CALL_OW 69
28871: ST_TO_ADDR
// for i in mines do
28872: LD_ADDR_VAR 0 4
28876: PUSH
28877: LD_VAR 0 2
28881: PUSH
28882: FOR_IN
28883: IFFALSE 28971
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
28885: LD_VAR 0 4
28889: PUSH
28890: LD_INT 1
28892: ARRAY
28893: PPUSH
28894: LD_VAR 0 4
28898: PUSH
28899: LD_INT 2
28901: ARRAY
28902: PPUSH
28903: CALL_OW 458
28907: NOT
28908: IFFALSE 28912
// continue ;
28910: GO 28882
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
28912: LD_VAR 0 4
28916: PUSH
28917: LD_INT 1
28919: ARRAY
28920: PPUSH
28921: LD_VAR 0 4
28925: PUSH
28926: LD_INT 2
28928: ARRAY
28929: PPUSH
28930: CALL_OW 428
28934: PUSH
28935: LD_VAR 0 5
28939: IN
28940: IFFALSE 28969
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
28942: LD_VAR 0 4
28946: PUSH
28947: LD_INT 1
28949: ARRAY
28950: PPUSH
28951: LD_VAR 0 4
28955: PUSH
28956: LD_INT 2
28958: ARRAY
28959: PPUSH
28960: LD_VAR 0 1
28964: PPUSH
28965: CALL_OW 456
// end ;
28969: GO 28882
28971: POP
28972: POP
// end ;
28973: LD_VAR 0 3
28977: RET
// export function Count ( array ) ; var i ; begin
28978: LD_INT 0
28980: PPUSH
28981: PPUSH
// result := 0 ;
28982: LD_ADDR_VAR 0 2
28986: PUSH
28987: LD_INT 0
28989: ST_TO_ADDR
// for i in array do
28990: LD_ADDR_VAR 0 3
28994: PUSH
28995: LD_VAR 0 1
28999: PUSH
29000: FOR_IN
29001: IFFALSE 29025
// if i then
29003: LD_VAR 0 3
29007: IFFALSE 29023
// result := result + 1 ;
29009: LD_ADDR_VAR 0 2
29013: PUSH
29014: LD_VAR 0 2
29018: PUSH
29019: LD_INT 1
29021: PLUS
29022: ST_TO_ADDR
29023: GO 29000
29025: POP
29026: POP
// end ;
29027: LD_VAR 0 2
29031: RET
// export function IsEmpty ( building ) ; begin
29032: LD_INT 0
29034: PPUSH
// if not building then
29035: LD_VAR 0 1
29039: NOT
29040: IFFALSE 29044
// exit ;
29042: GO 29087
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29044: LD_ADDR_VAR 0 2
29048: PUSH
29049: LD_VAR 0 1
29053: PUSH
29054: LD_INT 22
29056: PUSH
29057: LD_VAR 0 1
29061: PPUSH
29062: CALL_OW 255
29066: PUSH
29067: EMPTY
29068: LIST
29069: LIST
29070: PUSH
29071: LD_INT 58
29073: PUSH
29074: EMPTY
29075: LIST
29076: PUSH
29077: EMPTY
29078: LIST
29079: LIST
29080: PPUSH
29081: CALL_OW 69
29085: IN
29086: ST_TO_ADDR
// end ;
29087: LD_VAR 0 2
29091: RET
// export function IsNotFull ( building ) ; var places ; begin
29092: LD_INT 0
29094: PPUSH
29095: PPUSH
// if not building then
29096: LD_VAR 0 1
29100: NOT
29101: IFFALSE 29105
// exit ;
29103: GO 29276
// result := false ;
29105: LD_ADDR_VAR 0 2
29109: PUSH
29110: LD_INT 0
29112: ST_TO_ADDR
// places := 0 ;
29113: LD_ADDR_VAR 0 3
29117: PUSH
29118: LD_INT 0
29120: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
29121: LD_VAR 0 1
29125: PPUSH
29126: CALL_OW 266
29130: PUSH
29131: LD_INT 0
29133: DOUBLE
29134: EQUAL
29135: IFTRUE 29193
29137: LD_INT 1
29139: DOUBLE
29140: EQUAL
29141: IFTRUE 29193
29143: LD_INT 6
29145: DOUBLE
29146: EQUAL
29147: IFTRUE 29193
29149: LD_INT 7
29151: DOUBLE
29152: EQUAL
29153: IFTRUE 29193
29155: LD_INT 8
29157: DOUBLE
29158: EQUAL
29159: IFTRUE 29193
29161: LD_INT 4
29163: DOUBLE
29164: EQUAL
29165: IFTRUE 29193
29167: LD_INT 5
29169: DOUBLE
29170: EQUAL
29171: IFTRUE 29193
29173: LD_INT 2
29175: DOUBLE
29176: EQUAL
29177: IFTRUE 29193
29179: LD_INT 3
29181: DOUBLE
29182: EQUAL
29183: IFTRUE 29193
29185: LD_INT 35
29187: DOUBLE
29188: EQUAL
29189: IFTRUE 29193
29191: GO 29204
29193: POP
// places := 6 ; b_bunker , b_breastwork :
29194: LD_ADDR_VAR 0 3
29198: PUSH
29199: LD_INT 6
29201: ST_TO_ADDR
29202: GO 29249
29204: LD_INT 32
29206: DOUBLE
29207: EQUAL
29208: IFTRUE 29218
29210: LD_INT 31
29212: DOUBLE
29213: EQUAL
29214: IFTRUE 29218
29216: GO 29229
29218: POP
// places := 1 ; b_control_tower :
29219: LD_ADDR_VAR 0 3
29223: PUSH
29224: LD_INT 1
29226: ST_TO_ADDR
29227: GO 29249
29229: LD_INT 36
29231: DOUBLE
29232: EQUAL
29233: IFTRUE 29237
29235: GO 29248
29237: POP
// places := 3 ; end ;
29238: LD_ADDR_VAR 0 3
29242: PUSH
29243: LD_INT 3
29245: ST_TO_ADDR
29246: GO 29249
29248: POP
// if places then
29249: LD_VAR 0 3
29253: IFFALSE 29276
// result := UnitsInside ( building ) < places ;
29255: LD_ADDR_VAR 0 2
29259: PUSH
29260: LD_VAR 0 1
29264: PPUSH
29265: CALL_OW 313
29269: PUSH
29270: LD_VAR 0 3
29274: LESS
29275: ST_TO_ADDR
// end ;
29276: LD_VAR 0 2
29280: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29281: LD_INT 0
29283: PPUSH
29284: PPUSH
29285: PPUSH
29286: PPUSH
// tmp := [ ] ;
29287: LD_ADDR_VAR 0 3
29291: PUSH
29292: EMPTY
29293: ST_TO_ADDR
// list := [ ] ;
29294: LD_ADDR_VAR 0 5
29298: PUSH
29299: EMPTY
29300: ST_TO_ADDR
// for i = 16 to 25 do
29301: LD_ADDR_VAR 0 4
29305: PUSH
29306: DOUBLE
29307: LD_INT 16
29309: DEC
29310: ST_TO_ADDR
29311: LD_INT 25
29313: PUSH
29314: FOR_TO
29315: IFFALSE 29388
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29317: LD_ADDR_VAR 0 3
29321: PUSH
29322: LD_VAR 0 3
29326: PUSH
29327: LD_INT 22
29329: PUSH
29330: LD_VAR 0 1
29334: PPUSH
29335: CALL_OW 255
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: PUSH
29344: LD_INT 91
29346: PUSH
29347: LD_VAR 0 1
29351: PUSH
29352: LD_INT 6
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: LIST
29359: PUSH
29360: LD_INT 30
29362: PUSH
29363: LD_VAR 0 4
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: PUSH
29372: EMPTY
29373: LIST
29374: LIST
29375: LIST
29376: PUSH
29377: EMPTY
29378: LIST
29379: PPUSH
29380: CALL_OW 69
29384: ADD
29385: ST_TO_ADDR
29386: GO 29314
29388: POP
29389: POP
// for i = 1 to tmp do
29390: LD_ADDR_VAR 0 4
29394: PUSH
29395: DOUBLE
29396: LD_INT 1
29398: DEC
29399: ST_TO_ADDR
29400: LD_VAR 0 3
29404: PUSH
29405: FOR_TO
29406: IFFALSE 29494
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29408: LD_ADDR_VAR 0 5
29412: PUSH
29413: LD_VAR 0 5
29417: PUSH
29418: LD_VAR 0 3
29422: PUSH
29423: LD_VAR 0 4
29427: ARRAY
29428: PPUSH
29429: CALL_OW 266
29433: PUSH
29434: LD_VAR 0 3
29438: PUSH
29439: LD_VAR 0 4
29443: ARRAY
29444: PPUSH
29445: CALL_OW 250
29449: PUSH
29450: LD_VAR 0 3
29454: PUSH
29455: LD_VAR 0 4
29459: ARRAY
29460: PPUSH
29461: CALL_OW 251
29465: PUSH
29466: LD_VAR 0 3
29470: PUSH
29471: LD_VAR 0 4
29475: ARRAY
29476: PPUSH
29477: CALL_OW 254
29481: PUSH
29482: EMPTY
29483: LIST
29484: LIST
29485: LIST
29486: LIST
29487: PUSH
29488: EMPTY
29489: LIST
29490: ADD
29491: ST_TO_ADDR
29492: GO 29405
29494: POP
29495: POP
// result := list ;
29496: LD_ADDR_VAR 0 2
29500: PUSH
29501: LD_VAR 0 5
29505: ST_TO_ADDR
// end ;
29506: LD_VAR 0 2
29510: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29511: LD_INT 0
29513: PPUSH
29514: PPUSH
29515: PPUSH
29516: PPUSH
29517: PPUSH
29518: PPUSH
29519: PPUSH
// if not factory then
29520: LD_VAR 0 1
29524: NOT
29525: IFFALSE 29529
// exit ;
29527: GO 30122
// if control = control_apeman then
29529: LD_VAR 0 4
29533: PUSH
29534: LD_INT 5
29536: EQUAL
29537: IFFALSE 29646
// begin tmp := UnitsInside ( factory ) ;
29539: LD_ADDR_VAR 0 8
29543: PUSH
29544: LD_VAR 0 1
29548: PPUSH
29549: CALL_OW 313
29553: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29554: LD_VAR 0 8
29558: PPUSH
29559: LD_INT 25
29561: PUSH
29562: LD_INT 12
29564: PUSH
29565: EMPTY
29566: LIST
29567: LIST
29568: PPUSH
29569: CALL_OW 72
29573: NOT
29574: IFFALSE 29584
// control := control_manual ;
29576: LD_ADDR_VAR 0 4
29580: PUSH
29581: LD_INT 1
29583: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29584: LD_ADDR_VAR 0 8
29588: PUSH
29589: LD_VAR 0 1
29593: PPUSH
29594: CALL 29281 0 1
29598: ST_TO_ADDR
// if tmp then
29599: LD_VAR 0 8
29603: IFFALSE 29646
// begin for i in tmp do
29605: LD_ADDR_VAR 0 7
29609: PUSH
29610: LD_VAR 0 8
29614: PUSH
29615: FOR_IN
29616: IFFALSE 29644
// if i [ 1 ] = b_ext_radio then
29618: LD_VAR 0 7
29622: PUSH
29623: LD_INT 1
29625: ARRAY
29626: PUSH
29627: LD_INT 22
29629: EQUAL
29630: IFFALSE 29642
// begin control := control_remote ;
29632: LD_ADDR_VAR 0 4
29636: PUSH
29637: LD_INT 2
29639: ST_TO_ADDR
// break ;
29640: GO 29644
// end ;
29642: GO 29615
29644: POP
29645: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29646: LD_VAR 0 1
29650: PPUSH
29651: LD_VAR 0 2
29655: PPUSH
29656: LD_VAR 0 3
29660: PPUSH
29661: LD_VAR 0 4
29665: PPUSH
29666: LD_VAR 0 5
29670: PPUSH
29671: CALL_OW 448
29675: IFFALSE 29710
// begin result := [ chassis , engine , control , weapon ] ;
29677: LD_ADDR_VAR 0 6
29681: PUSH
29682: LD_VAR 0 2
29686: PUSH
29687: LD_VAR 0 3
29691: PUSH
29692: LD_VAR 0 4
29696: PUSH
29697: LD_VAR 0 5
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: LIST
29706: LIST
29707: ST_TO_ADDR
// exit ;
29708: GO 30122
// end ; _chassis := AvailableChassisList ( factory ) ;
29710: LD_ADDR_VAR 0 9
29714: PUSH
29715: LD_VAR 0 1
29719: PPUSH
29720: CALL_OW 475
29724: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29725: LD_ADDR_VAR 0 11
29729: PUSH
29730: LD_VAR 0 1
29734: PPUSH
29735: CALL_OW 476
29739: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29740: LD_ADDR_VAR 0 12
29744: PUSH
29745: LD_VAR 0 1
29749: PPUSH
29750: CALL_OW 477
29754: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29755: LD_ADDR_VAR 0 10
29759: PUSH
29760: LD_VAR 0 1
29764: PPUSH
29765: CALL_OW 478
29769: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29770: LD_VAR 0 9
29774: NOT
29775: PUSH
29776: LD_VAR 0 11
29780: NOT
29781: OR
29782: PUSH
29783: LD_VAR 0 12
29787: NOT
29788: OR
29789: PUSH
29790: LD_VAR 0 10
29794: NOT
29795: OR
29796: IFFALSE 29831
// begin result := [ chassis , engine , control , weapon ] ;
29798: LD_ADDR_VAR 0 6
29802: PUSH
29803: LD_VAR 0 2
29807: PUSH
29808: LD_VAR 0 3
29812: PUSH
29813: LD_VAR 0 4
29817: PUSH
29818: LD_VAR 0 5
29822: PUSH
29823: EMPTY
29824: LIST
29825: LIST
29826: LIST
29827: LIST
29828: ST_TO_ADDR
// exit ;
29829: GO 30122
// end ; if not chassis in _chassis then
29831: LD_VAR 0 2
29835: PUSH
29836: LD_VAR 0 9
29840: IN
29841: NOT
29842: IFFALSE 29868
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29844: LD_ADDR_VAR 0 2
29848: PUSH
29849: LD_VAR 0 9
29853: PUSH
29854: LD_INT 1
29856: PPUSH
29857: LD_VAR 0 9
29861: PPUSH
29862: CALL_OW 12
29866: ARRAY
29867: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29868: LD_VAR 0 2
29872: PPUSH
29873: LD_VAR 0 3
29877: PPUSH
29878: CALL 30127 0 2
29882: NOT
29883: IFFALSE 29942
// repeat engine := _engine [ 1 ] ;
29885: LD_ADDR_VAR 0 3
29889: PUSH
29890: LD_VAR 0 11
29894: PUSH
29895: LD_INT 1
29897: ARRAY
29898: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
29899: LD_ADDR_VAR 0 11
29903: PUSH
29904: LD_VAR 0 11
29908: PPUSH
29909: LD_INT 1
29911: PPUSH
29912: CALL_OW 3
29916: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
29917: LD_VAR 0 2
29921: PPUSH
29922: LD_VAR 0 3
29926: PPUSH
29927: CALL 30127 0 2
29931: PUSH
29932: LD_VAR 0 11
29936: PUSH
29937: EMPTY
29938: EQUAL
29939: OR
29940: IFFALSE 29885
// if not control in _control then
29942: LD_VAR 0 4
29946: PUSH
29947: LD_VAR 0 12
29951: IN
29952: NOT
29953: IFFALSE 29979
// control := _control [ rand ( 1 , _control ) ] ;
29955: LD_ADDR_VAR 0 4
29959: PUSH
29960: LD_VAR 0 12
29964: PUSH
29965: LD_INT 1
29967: PPUSH
29968: LD_VAR 0 12
29972: PPUSH
29973: CALL_OW 12
29977: ARRAY
29978: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
29979: LD_VAR 0 2
29983: PPUSH
29984: LD_VAR 0 5
29988: PPUSH
29989: CALL 30347 0 2
29993: NOT
29994: IFFALSE 30053
// repeat weapon := _weapon [ 1 ] ;
29996: LD_ADDR_VAR 0 5
30000: PUSH
30001: LD_VAR 0 10
30005: PUSH
30006: LD_INT 1
30008: ARRAY
30009: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30010: LD_ADDR_VAR 0 10
30014: PUSH
30015: LD_VAR 0 10
30019: PPUSH
30020: LD_INT 1
30022: PPUSH
30023: CALL_OW 3
30027: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30028: LD_VAR 0 2
30032: PPUSH
30033: LD_VAR 0 5
30037: PPUSH
30038: CALL 30347 0 2
30042: PUSH
30043: LD_VAR 0 10
30047: PUSH
30048: EMPTY
30049: EQUAL
30050: OR
30051: IFFALSE 29996
// result := [ ] ;
30053: LD_ADDR_VAR 0 6
30057: PUSH
30058: EMPTY
30059: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30060: LD_VAR 0 1
30064: PPUSH
30065: LD_VAR 0 2
30069: PPUSH
30070: LD_VAR 0 3
30074: PPUSH
30075: LD_VAR 0 4
30079: PPUSH
30080: LD_VAR 0 5
30084: PPUSH
30085: CALL_OW 448
30089: IFFALSE 30122
// result := [ chassis , engine , control , weapon ] ;
30091: LD_ADDR_VAR 0 6
30095: PUSH
30096: LD_VAR 0 2
30100: PUSH
30101: LD_VAR 0 3
30105: PUSH
30106: LD_VAR 0 4
30110: PUSH
30111: LD_VAR 0 5
30115: PUSH
30116: EMPTY
30117: LIST
30118: LIST
30119: LIST
30120: LIST
30121: ST_TO_ADDR
// end ;
30122: LD_VAR 0 6
30126: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30127: LD_INT 0
30129: PPUSH
// if not chassis or not engine then
30130: LD_VAR 0 1
30134: NOT
30135: PUSH
30136: LD_VAR 0 2
30140: NOT
30141: OR
30142: IFFALSE 30146
// exit ;
30144: GO 30342
// case engine of engine_solar :
30146: LD_VAR 0 2
30150: PUSH
30151: LD_INT 2
30153: DOUBLE
30154: EQUAL
30155: IFTRUE 30159
30157: GO 30197
30159: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30160: LD_ADDR_VAR 0 3
30164: PUSH
30165: LD_INT 11
30167: PUSH
30168: LD_INT 12
30170: PUSH
30171: LD_INT 13
30173: PUSH
30174: LD_INT 14
30176: PUSH
30177: LD_INT 1
30179: PUSH
30180: LD_INT 2
30182: PUSH
30183: LD_INT 3
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: LIST
30190: LIST
30191: LIST
30192: LIST
30193: LIST
30194: ST_TO_ADDR
30195: GO 30326
30197: LD_INT 1
30199: DOUBLE
30200: EQUAL
30201: IFTRUE 30205
30203: GO 30267
30205: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30206: LD_ADDR_VAR 0 3
30210: PUSH
30211: LD_INT 11
30213: PUSH
30214: LD_INT 12
30216: PUSH
30217: LD_INT 13
30219: PUSH
30220: LD_INT 14
30222: PUSH
30223: LD_INT 1
30225: PUSH
30226: LD_INT 2
30228: PUSH
30229: LD_INT 3
30231: PUSH
30232: LD_INT 4
30234: PUSH
30235: LD_INT 5
30237: PUSH
30238: LD_INT 21
30240: PUSH
30241: LD_INT 23
30243: PUSH
30244: LD_INT 22
30246: PUSH
30247: LD_INT 24
30249: PUSH
30250: EMPTY
30251: LIST
30252: LIST
30253: LIST
30254: LIST
30255: LIST
30256: LIST
30257: LIST
30258: LIST
30259: LIST
30260: LIST
30261: LIST
30262: LIST
30263: LIST
30264: ST_TO_ADDR
30265: GO 30326
30267: LD_INT 3
30269: DOUBLE
30270: EQUAL
30271: IFTRUE 30275
30273: GO 30325
30275: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30276: LD_ADDR_VAR 0 3
30280: PUSH
30281: LD_INT 13
30283: PUSH
30284: LD_INT 14
30286: PUSH
30287: LD_INT 2
30289: PUSH
30290: LD_INT 3
30292: PUSH
30293: LD_INT 4
30295: PUSH
30296: LD_INT 5
30298: PUSH
30299: LD_INT 21
30301: PUSH
30302: LD_INT 22
30304: PUSH
30305: LD_INT 23
30307: PUSH
30308: LD_INT 24
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: LIST
30315: LIST
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: LIST
30322: ST_TO_ADDR
30323: GO 30326
30325: POP
// result := ( chassis in result ) ;
30326: LD_ADDR_VAR 0 3
30330: PUSH
30331: LD_VAR 0 1
30335: PUSH
30336: LD_VAR 0 3
30340: IN
30341: ST_TO_ADDR
// end ;
30342: LD_VAR 0 3
30346: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30347: LD_INT 0
30349: PPUSH
// if not chassis or not weapon then
30350: LD_VAR 0 1
30354: NOT
30355: PUSH
30356: LD_VAR 0 2
30360: NOT
30361: OR
30362: IFFALSE 30366
// exit ;
30364: GO 31426
// case weapon of us_machine_gun :
30366: LD_VAR 0 2
30370: PUSH
30371: LD_INT 2
30373: DOUBLE
30374: EQUAL
30375: IFTRUE 30379
30377: GO 30409
30379: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30380: LD_ADDR_VAR 0 3
30384: PUSH
30385: LD_INT 1
30387: PUSH
30388: LD_INT 2
30390: PUSH
30391: LD_INT 3
30393: PUSH
30394: LD_INT 4
30396: PUSH
30397: LD_INT 5
30399: PUSH
30400: EMPTY
30401: LIST
30402: LIST
30403: LIST
30404: LIST
30405: LIST
30406: ST_TO_ADDR
30407: GO 31410
30409: LD_INT 3
30411: DOUBLE
30412: EQUAL
30413: IFTRUE 30417
30415: GO 30447
30417: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30418: LD_ADDR_VAR 0 3
30422: PUSH
30423: LD_INT 1
30425: PUSH
30426: LD_INT 2
30428: PUSH
30429: LD_INT 3
30431: PUSH
30432: LD_INT 4
30434: PUSH
30435: LD_INT 5
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: LIST
30442: LIST
30443: LIST
30444: ST_TO_ADDR
30445: GO 31410
30447: LD_INT 11
30449: DOUBLE
30450: EQUAL
30451: IFTRUE 30455
30453: GO 30485
30455: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30456: LD_ADDR_VAR 0 3
30460: PUSH
30461: LD_INT 1
30463: PUSH
30464: LD_INT 2
30466: PUSH
30467: LD_INT 3
30469: PUSH
30470: LD_INT 4
30472: PUSH
30473: LD_INT 5
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: LIST
30480: LIST
30481: LIST
30482: ST_TO_ADDR
30483: GO 31410
30485: LD_INT 4
30487: DOUBLE
30488: EQUAL
30489: IFTRUE 30493
30491: GO 30519
30493: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30494: LD_ADDR_VAR 0 3
30498: PUSH
30499: LD_INT 2
30501: PUSH
30502: LD_INT 3
30504: PUSH
30505: LD_INT 4
30507: PUSH
30508: LD_INT 5
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: LIST
30515: LIST
30516: ST_TO_ADDR
30517: GO 31410
30519: LD_INT 5
30521: DOUBLE
30522: EQUAL
30523: IFTRUE 30527
30525: GO 30553
30527: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30528: LD_ADDR_VAR 0 3
30532: PUSH
30533: LD_INT 2
30535: PUSH
30536: LD_INT 3
30538: PUSH
30539: LD_INT 4
30541: PUSH
30542: LD_INT 5
30544: PUSH
30545: EMPTY
30546: LIST
30547: LIST
30548: LIST
30549: LIST
30550: ST_TO_ADDR
30551: GO 31410
30553: LD_INT 9
30555: DOUBLE
30556: EQUAL
30557: IFTRUE 30561
30559: GO 30587
30561: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30562: LD_ADDR_VAR 0 3
30566: PUSH
30567: LD_INT 2
30569: PUSH
30570: LD_INT 3
30572: PUSH
30573: LD_INT 4
30575: PUSH
30576: LD_INT 5
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: LIST
30583: LIST
30584: ST_TO_ADDR
30585: GO 31410
30587: LD_INT 7
30589: DOUBLE
30590: EQUAL
30591: IFTRUE 30595
30593: GO 30621
30595: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30596: LD_ADDR_VAR 0 3
30600: PUSH
30601: LD_INT 2
30603: PUSH
30604: LD_INT 3
30606: PUSH
30607: LD_INT 4
30609: PUSH
30610: LD_INT 5
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: LIST
30617: LIST
30618: ST_TO_ADDR
30619: GO 31410
30621: LD_INT 12
30623: DOUBLE
30624: EQUAL
30625: IFTRUE 30629
30627: GO 30655
30629: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30630: LD_ADDR_VAR 0 3
30634: PUSH
30635: LD_INT 2
30637: PUSH
30638: LD_INT 3
30640: PUSH
30641: LD_INT 4
30643: PUSH
30644: LD_INT 5
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: LIST
30651: LIST
30652: ST_TO_ADDR
30653: GO 31410
30655: LD_INT 13
30657: DOUBLE
30658: EQUAL
30659: IFTRUE 30663
30661: GO 30689
30663: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30664: LD_ADDR_VAR 0 3
30668: PUSH
30669: LD_INT 2
30671: PUSH
30672: LD_INT 3
30674: PUSH
30675: LD_INT 4
30677: PUSH
30678: LD_INT 5
30680: PUSH
30681: EMPTY
30682: LIST
30683: LIST
30684: LIST
30685: LIST
30686: ST_TO_ADDR
30687: GO 31410
30689: LD_INT 14
30691: DOUBLE
30692: EQUAL
30693: IFTRUE 30697
30695: GO 30715
30697: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30698: LD_ADDR_VAR 0 3
30702: PUSH
30703: LD_INT 4
30705: PUSH
30706: LD_INT 5
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: ST_TO_ADDR
30713: GO 31410
30715: LD_INT 6
30717: DOUBLE
30718: EQUAL
30719: IFTRUE 30723
30721: GO 30741
30723: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30724: LD_ADDR_VAR 0 3
30728: PUSH
30729: LD_INT 4
30731: PUSH
30732: LD_INT 5
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: ST_TO_ADDR
30739: GO 31410
30741: LD_INT 10
30743: DOUBLE
30744: EQUAL
30745: IFTRUE 30749
30747: GO 30767
30749: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30750: LD_ADDR_VAR 0 3
30754: PUSH
30755: LD_INT 4
30757: PUSH
30758: LD_INT 5
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: ST_TO_ADDR
30765: GO 31410
30767: LD_INT 22
30769: DOUBLE
30770: EQUAL
30771: IFTRUE 30775
30773: GO 30801
30775: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30776: LD_ADDR_VAR 0 3
30780: PUSH
30781: LD_INT 11
30783: PUSH
30784: LD_INT 12
30786: PUSH
30787: LD_INT 13
30789: PUSH
30790: LD_INT 14
30792: PUSH
30793: EMPTY
30794: LIST
30795: LIST
30796: LIST
30797: LIST
30798: ST_TO_ADDR
30799: GO 31410
30801: LD_INT 23
30803: DOUBLE
30804: EQUAL
30805: IFTRUE 30809
30807: GO 30835
30809: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
30810: LD_ADDR_VAR 0 3
30814: PUSH
30815: LD_INT 11
30817: PUSH
30818: LD_INT 12
30820: PUSH
30821: LD_INT 13
30823: PUSH
30824: LD_INT 14
30826: PUSH
30827: EMPTY
30828: LIST
30829: LIST
30830: LIST
30831: LIST
30832: ST_TO_ADDR
30833: GO 31410
30835: LD_INT 24
30837: DOUBLE
30838: EQUAL
30839: IFTRUE 30843
30841: GO 30869
30843: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30844: LD_ADDR_VAR 0 3
30848: PUSH
30849: LD_INT 11
30851: PUSH
30852: LD_INT 12
30854: PUSH
30855: LD_INT 13
30857: PUSH
30858: LD_INT 14
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: LIST
30865: LIST
30866: ST_TO_ADDR
30867: GO 31410
30869: LD_INT 30
30871: DOUBLE
30872: EQUAL
30873: IFTRUE 30877
30875: GO 30903
30877: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30878: LD_ADDR_VAR 0 3
30882: PUSH
30883: LD_INT 11
30885: PUSH
30886: LD_INT 12
30888: PUSH
30889: LD_INT 13
30891: PUSH
30892: LD_INT 14
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: LIST
30899: LIST
30900: ST_TO_ADDR
30901: GO 31410
30903: LD_INT 25
30905: DOUBLE
30906: EQUAL
30907: IFTRUE 30911
30909: GO 30929
30911: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
30912: LD_ADDR_VAR 0 3
30916: PUSH
30917: LD_INT 13
30919: PUSH
30920: LD_INT 14
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: ST_TO_ADDR
30927: GO 31410
30929: LD_INT 27
30931: DOUBLE
30932: EQUAL
30933: IFTRUE 30937
30935: GO 30955
30937: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
30938: LD_ADDR_VAR 0 3
30942: PUSH
30943: LD_INT 13
30945: PUSH
30946: LD_INT 14
30948: PUSH
30949: EMPTY
30950: LIST
30951: LIST
30952: ST_TO_ADDR
30953: GO 31410
30955: LD_INT 92
30957: DOUBLE
30958: EQUAL
30959: IFTRUE 30963
30961: GO 30989
30963: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
30964: LD_ADDR_VAR 0 3
30968: PUSH
30969: LD_INT 11
30971: PUSH
30972: LD_INT 12
30974: PUSH
30975: LD_INT 13
30977: PUSH
30978: LD_INT 14
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: LIST
30985: LIST
30986: ST_TO_ADDR
30987: GO 31410
30989: LD_INT 28
30991: DOUBLE
30992: EQUAL
30993: IFTRUE 30997
30995: GO 31015
30997: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
30998: LD_ADDR_VAR 0 3
31002: PUSH
31003: LD_INT 13
31005: PUSH
31006: LD_INT 14
31008: PUSH
31009: EMPTY
31010: LIST
31011: LIST
31012: ST_TO_ADDR
31013: GO 31410
31015: LD_INT 29
31017: DOUBLE
31018: EQUAL
31019: IFTRUE 31023
31021: GO 31041
31023: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31024: LD_ADDR_VAR 0 3
31028: PUSH
31029: LD_INT 13
31031: PUSH
31032: LD_INT 14
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: ST_TO_ADDR
31039: GO 31410
31041: LD_INT 31
31043: DOUBLE
31044: EQUAL
31045: IFTRUE 31049
31047: GO 31067
31049: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31050: LD_ADDR_VAR 0 3
31054: PUSH
31055: LD_INT 13
31057: PUSH
31058: LD_INT 14
31060: PUSH
31061: EMPTY
31062: LIST
31063: LIST
31064: ST_TO_ADDR
31065: GO 31410
31067: LD_INT 26
31069: DOUBLE
31070: EQUAL
31071: IFTRUE 31075
31073: GO 31093
31075: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31076: LD_ADDR_VAR 0 3
31080: PUSH
31081: LD_INT 13
31083: PUSH
31084: LD_INT 14
31086: PUSH
31087: EMPTY
31088: LIST
31089: LIST
31090: ST_TO_ADDR
31091: GO 31410
31093: LD_INT 42
31095: DOUBLE
31096: EQUAL
31097: IFTRUE 31101
31099: GO 31127
31101: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31102: LD_ADDR_VAR 0 3
31106: PUSH
31107: LD_INT 21
31109: PUSH
31110: LD_INT 22
31112: PUSH
31113: LD_INT 23
31115: PUSH
31116: LD_INT 24
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: LIST
31123: LIST
31124: ST_TO_ADDR
31125: GO 31410
31127: LD_INT 43
31129: DOUBLE
31130: EQUAL
31131: IFTRUE 31135
31133: GO 31161
31135: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31136: LD_ADDR_VAR 0 3
31140: PUSH
31141: LD_INT 21
31143: PUSH
31144: LD_INT 22
31146: PUSH
31147: LD_INT 23
31149: PUSH
31150: LD_INT 24
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: LIST
31157: LIST
31158: ST_TO_ADDR
31159: GO 31410
31161: LD_INT 44
31163: DOUBLE
31164: EQUAL
31165: IFTRUE 31169
31167: GO 31195
31169: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31170: LD_ADDR_VAR 0 3
31174: PUSH
31175: LD_INT 21
31177: PUSH
31178: LD_INT 22
31180: PUSH
31181: LD_INT 23
31183: PUSH
31184: LD_INT 24
31186: PUSH
31187: EMPTY
31188: LIST
31189: LIST
31190: LIST
31191: LIST
31192: ST_TO_ADDR
31193: GO 31410
31195: LD_INT 45
31197: DOUBLE
31198: EQUAL
31199: IFTRUE 31203
31201: GO 31229
31203: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31204: LD_ADDR_VAR 0 3
31208: PUSH
31209: LD_INT 21
31211: PUSH
31212: LD_INT 22
31214: PUSH
31215: LD_INT 23
31217: PUSH
31218: LD_INT 24
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: LIST
31225: LIST
31226: ST_TO_ADDR
31227: GO 31410
31229: LD_INT 49
31231: DOUBLE
31232: EQUAL
31233: IFTRUE 31237
31235: GO 31263
31237: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31238: LD_ADDR_VAR 0 3
31242: PUSH
31243: LD_INT 21
31245: PUSH
31246: LD_INT 22
31248: PUSH
31249: LD_INT 23
31251: PUSH
31252: LD_INT 24
31254: PUSH
31255: EMPTY
31256: LIST
31257: LIST
31258: LIST
31259: LIST
31260: ST_TO_ADDR
31261: GO 31410
31263: LD_INT 51
31265: DOUBLE
31266: EQUAL
31267: IFTRUE 31271
31269: GO 31297
31271: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31272: LD_ADDR_VAR 0 3
31276: PUSH
31277: LD_INT 21
31279: PUSH
31280: LD_INT 22
31282: PUSH
31283: LD_INT 23
31285: PUSH
31286: LD_INT 24
31288: PUSH
31289: EMPTY
31290: LIST
31291: LIST
31292: LIST
31293: LIST
31294: ST_TO_ADDR
31295: GO 31410
31297: LD_INT 52
31299: DOUBLE
31300: EQUAL
31301: IFTRUE 31305
31303: GO 31331
31305: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31306: LD_ADDR_VAR 0 3
31310: PUSH
31311: LD_INT 21
31313: PUSH
31314: LD_INT 22
31316: PUSH
31317: LD_INT 23
31319: PUSH
31320: LD_INT 24
31322: PUSH
31323: EMPTY
31324: LIST
31325: LIST
31326: LIST
31327: LIST
31328: ST_TO_ADDR
31329: GO 31410
31331: LD_INT 53
31333: DOUBLE
31334: EQUAL
31335: IFTRUE 31339
31337: GO 31357
31339: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31340: LD_ADDR_VAR 0 3
31344: PUSH
31345: LD_INT 23
31347: PUSH
31348: LD_INT 24
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: ST_TO_ADDR
31355: GO 31410
31357: LD_INT 46
31359: DOUBLE
31360: EQUAL
31361: IFTRUE 31365
31363: GO 31383
31365: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31366: LD_ADDR_VAR 0 3
31370: PUSH
31371: LD_INT 23
31373: PUSH
31374: LD_INT 24
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: ST_TO_ADDR
31381: GO 31410
31383: LD_INT 47
31385: DOUBLE
31386: EQUAL
31387: IFTRUE 31391
31389: GO 31409
31391: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31392: LD_ADDR_VAR 0 3
31396: PUSH
31397: LD_INT 23
31399: PUSH
31400: LD_INT 24
31402: PUSH
31403: EMPTY
31404: LIST
31405: LIST
31406: ST_TO_ADDR
31407: GO 31410
31409: POP
// result := ( chassis in result ) ;
31410: LD_ADDR_VAR 0 3
31414: PUSH
31415: LD_VAR 0 1
31419: PUSH
31420: LD_VAR 0 3
31424: IN
31425: ST_TO_ADDR
// end ;
31426: LD_VAR 0 3
31430: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31431: LD_INT 0
31433: PPUSH
31434: PPUSH
31435: PPUSH
31436: PPUSH
31437: PPUSH
31438: PPUSH
31439: PPUSH
// result := array ;
31440: LD_ADDR_VAR 0 5
31444: PUSH
31445: LD_VAR 0 1
31449: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31450: LD_VAR 0 1
31454: NOT
31455: PUSH
31456: LD_VAR 0 2
31460: NOT
31461: OR
31462: PUSH
31463: LD_VAR 0 3
31467: NOT
31468: OR
31469: PUSH
31470: LD_VAR 0 2
31474: PUSH
31475: LD_VAR 0 1
31479: GREATER
31480: OR
31481: PUSH
31482: LD_VAR 0 3
31486: PUSH
31487: LD_VAR 0 1
31491: GREATER
31492: OR
31493: IFFALSE 31497
// exit ;
31495: GO 31793
// if direction then
31497: LD_VAR 0 4
31501: IFFALSE 31565
// begin d := 1 ;
31503: LD_ADDR_VAR 0 9
31507: PUSH
31508: LD_INT 1
31510: ST_TO_ADDR
// if i_from > i_to then
31511: LD_VAR 0 2
31515: PUSH
31516: LD_VAR 0 3
31520: GREATER
31521: IFFALSE 31547
// length := ( array - i_from ) + i_to else
31523: LD_ADDR_VAR 0 11
31527: PUSH
31528: LD_VAR 0 1
31532: PUSH
31533: LD_VAR 0 2
31537: MINUS
31538: PUSH
31539: LD_VAR 0 3
31543: PLUS
31544: ST_TO_ADDR
31545: GO 31563
// length := i_to - i_from ;
31547: LD_ADDR_VAR 0 11
31551: PUSH
31552: LD_VAR 0 3
31556: PUSH
31557: LD_VAR 0 2
31561: MINUS
31562: ST_TO_ADDR
// end else
31563: GO 31626
// begin d := - 1 ;
31565: LD_ADDR_VAR 0 9
31569: PUSH
31570: LD_INT 1
31572: NEG
31573: ST_TO_ADDR
// if i_from > i_to then
31574: LD_VAR 0 2
31578: PUSH
31579: LD_VAR 0 3
31583: GREATER
31584: IFFALSE 31604
// length := i_from - i_to else
31586: LD_ADDR_VAR 0 11
31590: PUSH
31591: LD_VAR 0 2
31595: PUSH
31596: LD_VAR 0 3
31600: MINUS
31601: ST_TO_ADDR
31602: GO 31626
// length := ( array - i_to ) + i_from ;
31604: LD_ADDR_VAR 0 11
31608: PUSH
31609: LD_VAR 0 1
31613: PUSH
31614: LD_VAR 0 3
31618: MINUS
31619: PUSH
31620: LD_VAR 0 2
31624: PLUS
31625: ST_TO_ADDR
// end ; if not length then
31626: LD_VAR 0 11
31630: NOT
31631: IFFALSE 31635
// exit ;
31633: GO 31793
// tmp := array ;
31635: LD_ADDR_VAR 0 10
31639: PUSH
31640: LD_VAR 0 1
31644: ST_TO_ADDR
// for i = 1 to length do
31645: LD_ADDR_VAR 0 6
31649: PUSH
31650: DOUBLE
31651: LD_INT 1
31653: DEC
31654: ST_TO_ADDR
31655: LD_VAR 0 11
31659: PUSH
31660: FOR_TO
31661: IFFALSE 31781
// begin for j = 1 to array do
31663: LD_ADDR_VAR 0 7
31667: PUSH
31668: DOUBLE
31669: LD_INT 1
31671: DEC
31672: ST_TO_ADDR
31673: LD_VAR 0 1
31677: PUSH
31678: FOR_TO
31679: IFFALSE 31767
// begin k := j + d ;
31681: LD_ADDR_VAR 0 8
31685: PUSH
31686: LD_VAR 0 7
31690: PUSH
31691: LD_VAR 0 9
31695: PLUS
31696: ST_TO_ADDR
// if k > array then
31697: LD_VAR 0 8
31701: PUSH
31702: LD_VAR 0 1
31706: GREATER
31707: IFFALSE 31717
// k := 1 ;
31709: LD_ADDR_VAR 0 8
31713: PUSH
31714: LD_INT 1
31716: ST_TO_ADDR
// if not k then
31717: LD_VAR 0 8
31721: NOT
31722: IFFALSE 31734
// k := array ;
31724: LD_ADDR_VAR 0 8
31728: PUSH
31729: LD_VAR 0 1
31733: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31734: LD_ADDR_VAR 0 10
31738: PUSH
31739: LD_VAR 0 10
31743: PPUSH
31744: LD_VAR 0 8
31748: PPUSH
31749: LD_VAR 0 1
31753: PUSH
31754: LD_VAR 0 7
31758: ARRAY
31759: PPUSH
31760: CALL_OW 1
31764: ST_TO_ADDR
// end ;
31765: GO 31678
31767: POP
31768: POP
// array := tmp ;
31769: LD_ADDR_VAR 0 1
31773: PUSH
31774: LD_VAR 0 10
31778: ST_TO_ADDR
// end ;
31779: GO 31660
31781: POP
31782: POP
// result := array ;
31783: LD_ADDR_VAR 0 5
31787: PUSH
31788: LD_VAR 0 1
31792: ST_TO_ADDR
// end ;
31793: LD_VAR 0 5
31797: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31798: LD_INT 0
31800: PPUSH
31801: PPUSH
// result := 0 ;
31802: LD_ADDR_VAR 0 3
31806: PUSH
31807: LD_INT 0
31809: ST_TO_ADDR
// if not array or not value in array then
31810: LD_VAR 0 1
31814: NOT
31815: PUSH
31816: LD_VAR 0 2
31820: PUSH
31821: LD_VAR 0 1
31825: IN
31826: NOT
31827: OR
31828: IFFALSE 31832
// exit ;
31830: GO 31886
// for i = 1 to array do
31832: LD_ADDR_VAR 0 4
31836: PUSH
31837: DOUBLE
31838: LD_INT 1
31840: DEC
31841: ST_TO_ADDR
31842: LD_VAR 0 1
31846: PUSH
31847: FOR_TO
31848: IFFALSE 31884
// if value = array [ i ] then
31850: LD_VAR 0 2
31854: PUSH
31855: LD_VAR 0 1
31859: PUSH
31860: LD_VAR 0 4
31864: ARRAY
31865: EQUAL
31866: IFFALSE 31882
// begin result := i ;
31868: LD_ADDR_VAR 0 3
31872: PUSH
31873: LD_VAR 0 4
31877: ST_TO_ADDR
// exit ;
31878: POP
31879: POP
31880: GO 31886
// end ;
31882: GO 31847
31884: POP
31885: POP
// end ;
31886: LD_VAR 0 3
31890: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
31891: LD_INT 0
31893: PPUSH
// vc_chassis := chassis ;
31894: LD_ADDR_OWVAR 37
31898: PUSH
31899: LD_VAR 0 1
31903: ST_TO_ADDR
// vc_engine := engine ;
31904: LD_ADDR_OWVAR 39
31908: PUSH
31909: LD_VAR 0 2
31913: ST_TO_ADDR
// vc_control := control ;
31914: LD_ADDR_OWVAR 38
31918: PUSH
31919: LD_VAR 0 3
31923: ST_TO_ADDR
// vc_weapon := weapon ;
31924: LD_ADDR_OWVAR 40
31928: PUSH
31929: LD_VAR 0 4
31933: ST_TO_ADDR
// vc_fuel_battery := fuel ;
31934: LD_ADDR_OWVAR 41
31938: PUSH
31939: LD_VAR 0 5
31943: ST_TO_ADDR
// end ;
31944: LD_VAR 0 6
31948: RET
// export function WantPlant ( unit ) ; var task ; begin
31949: LD_INT 0
31951: PPUSH
31952: PPUSH
// result := false ;
31953: LD_ADDR_VAR 0 2
31957: PUSH
31958: LD_INT 0
31960: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
31961: LD_ADDR_VAR 0 3
31965: PUSH
31966: LD_VAR 0 1
31970: PPUSH
31971: CALL_OW 437
31975: ST_TO_ADDR
// if task then
31976: LD_VAR 0 3
31980: IFFALSE 32008
// if task [ 1 ] [ 1 ] = p then
31982: LD_VAR 0 3
31986: PUSH
31987: LD_INT 1
31989: ARRAY
31990: PUSH
31991: LD_INT 1
31993: ARRAY
31994: PUSH
31995: LD_STRING p
31997: EQUAL
31998: IFFALSE 32008
// result := true ;
32000: LD_ADDR_VAR 0 2
32004: PUSH
32005: LD_INT 1
32007: ST_TO_ADDR
// end ;
32008: LD_VAR 0 2
32012: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32013: LD_INT 0
32015: PPUSH
32016: PPUSH
32017: PPUSH
32018: PPUSH
// if pos < 1 then
32019: LD_VAR 0 2
32023: PUSH
32024: LD_INT 1
32026: LESS
32027: IFFALSE 32031
// exit ;
32029: GO 32334
// if pos = 1 then
32031: LD_VAR 0 2
32035: PUSH
32036: LD_INT 1
32038: EQUAL
32039: IFFALSE 32072
// result := Replace ( arr , pos [ 1 ] , value ) else
32041: LD_ADDR_VAR 0 4
32045: PUSH
32046: LD_VAR 0 1
32050: PPUSH
32051: LD_VAR 0 2
32055: PUSH
32056: LD_INT 1
32058: ARRAY
32059: PPUSH
32060: LD_VAR 0 3
32064: PPUSH
32065: CALL_OW 1
32069: ST_TO_ADDR
32070: GO 32334
// begin tmp := arr ;
32072: LD_ADDR_VAR 0 6
32076: PUSH
32077: LD_VAR 0 1
32081: ST_TO_ADDR
// s_arr := [ tmp ] ;
32082: LD_ADDR_VAR 0 7
32086: PUSH
32087: LD_VAR 0 6
32091: PUSH
32092: EMPTY
32093: LIST
32094: ST_TO_ADDR
// for i = 1 to pos - 1 do
32095: LD_ADDR_VAR 0 5
32099: PUSH
32100: DOUBLE
32101: LD_INT 1
32103: DEC
32104: ST_TO_ADDR
32105: LD_VAR 0 2
32109: PUSH
32110: LD_INT 1
32112: MINUS
32113: PUSH
32114: FOR_TO
32115: IFFALSE 32160
// begin tmp := tmp [ pos [ i ] ] ;
32117: LD_ADDR_VAR 0 6
32121: PUSH
32122: LD_VAR 0 6
32126: PUSH
32127: LD_VAR 0 2
32131: PUSH
32132: LD_VAR 0 5
32136: ARRAY
32137: ARRAY
32138: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32139: LD_ADDR_VAR 0 7
32143: PUSH
32144: LD_VAR 0 7
32148: PUSH
32149: LD_VAR 0 6
32153: PUSH
32154: EMPTY
32155: LIST
32156: ADD
32157: ST_TO_ADDR
// end ;
32158: GO 32114
32160: POP
32161: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32162: LD_ADDR_VAR 0 6
32166: PUSH
32167: LD_VAR 0 6
32171: PPUSH
32172: LD_VAR 0 2
32176: PUSH
32177: LD_VAR 0 2
32181: ARRAY
32182: PPUSH
32183: LD_VAR 0 3
32187: PPUSH
32188: CALL_OW 1
32192: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32193: LD_ADDR_VAR 0 7
32197: PUSH
32198: LD_VAR 0 7
32202: PPUSH
32203: LD_VAR 0 7
32207: PPUSH
32208: LD_VAR 0 6
32212: PPUSH
32213: CALL_OW 1
32217: ST_TO_ADDR
// for i = s_arr downto 2 do
32218: LD_ADDR_VAR 0 5
32222: PUSH
32223: DOUBLE
32224: LD_VAR 0 7
32228: INC
32229: ST_TO_ADDR
32230: LD_INT 2
32232: PUSH
32233: FOR_DOWNTO
32234: IFFALSE 32318
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32236: LD_ADDR_VAR 0 6
32240: PUSH
32241: LD_VAR 0 7
32245: PUSH
32246: LD_VAR 0 5
32250: PUSH
32251: LD_INT 1
32253: MINUS
32254: ARRAY
32255: PPUSH
32256: LD_VAR 0 2
32260: PUSH
32261: LD_VAR 0 5
32265: PUSH
32266: LD_INT 1
32268: MINUS
32269: ARRAY
32270: PPUSH
32271: LD_VAR 0 7
32275: PUSH
32276: LD_VAR 0 5
32280: ARRAY
32281: PPUSH
32282: CALL_OW 1
32286: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32287: LD_ADDR_VAR 0 7
32291: PUSH
32292: LD_VAR 0 7
32296: PPUSH
32297: LD_VAR 0 5
32301: PUSH
32302: LD_INT 1
32304: MINUS
32305: PPUSH
32306: LD_VAR 0 6
32310: PPUSH
32311: CALL_OW 1
32315: ST_TO_ADDR
// end ;
32316: GO 32233
32318: POP
32319: POP
// result := s_arr [ 1 ] ;
32320: LD_ADDR_VAR 0 4
32324: PUSH
32325: LD_VAR 0 7
32329: PUSH
32330: LD_INT 1
32332: ARRAY
32333: ST_TO_ADDR
// end ; end ;
32334: LD_VAR 0 4
32338: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32339: LD_INT 0
32341: PPUSH
32342: PPUSH
// if not list then
32343: LD_VAR 0 1
32347: NOT
32348: IFFALSE 32352
// exit ;
32350: GO 32443
// i := list [ pos1 ] ;
32352: LD_ADDR_VAR 0 5
32356: PUSH
32357: LD_VAR 0 1
32361: PUSH
32362: LD_VAR 0 2
32366: ARRAY
32367: ST_TO_ADDR
// if not i then
32368: LD_VAR 0 5
32372: NOT
32373: IFFALSE 32377
// exit ;
32375: GO 32443
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32377: LD_ADDR_VAR 0 1
32381: PUSH
32382: LD_VAR 0 1
32386: PPUSH
32387: LD_VAR 0 2
32391: PPUSH
32392: LD_VAR 0 1
32396: PUSH
32397: LD_VAR 0 3
32401: ARRAY
32402: PPUSH
32403: CALL_OW 1
32407: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32408: LD_ADDR_VAR 0 1
32412: PUSH
32413: LD_VAR 0 1
32417: PPUSH
32418: LD_VAR 0 3
32422: PPUSH
32423: LD_VAR 0 5
32427: PPUSH
32428: CALL_OW 1
32432: ST_TO_ADDR
// result := list ;
32433: LD_ADDR_VAR 0 4
32437: PUSH
32438: LD_VAR 0 1
32442: ST_TO_ADDR
// end ;
32443: LD_VAR 0 4
32447: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32448: LD_INT 0
32450: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32451: LD_ADDR_VAR 0 5
32455: PUSH
32456: LD_VAR 0 1
32460: PPUSH
32461: CALL_OW 250
32465: PPUSH
32466: LD_VAR 0 1
32470: PPUSH
32471: CALL_OW 251
32475: PPUSH
32476: LD_VAR 0 2
32480: PPUSH
32481: LD_VAR 0 3
32485: PPUSH
32486: LD_VAR 0 4
32490: PPUSH
32491: CALL 32501 0 5
32495: ST_TO_ADDR
// end ;
32496: LD_VAR 0 5
32500: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32501: LD_INT 0
32503: PPUSH
32504: PPUSH
32505: PPUSH
32506: PPUSH
// if not list then
32507: LD_VAR 0 3
32511: NOT
32512: IFFALSE 32516
// exit ;
32514: GO 32904
// result := [ ] ;
32516: LD_ADDR_VAR 0 6
32520: PUSH
32521: EMPTY
32522: ST_TO_ADDR
// for i in list do
32523: LD_ADDR_VAR 0 7
32527: PUSH
32528: LD_VAR 0 3
32532: PUSH
32533: FOR_IN
32534: IFFALSE 32736
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32536: LD_ADDR_VAR 0 9
32540: PUSH
32541: LD_VAR 0 7
32545: PPUSH
32546: LD_VAR 0 1
32550: PPUSH
32551: LD_VAR 0 2
32555: PPUSH
32556: CALL_OW 297
32560: ST_TO_ADDR
// if not result then
32561: LD_VAR 0 6
32565: NOT
32566: IFFALSE 32592
// result := [ [ i , tmp ] ] else
32568: LD_ADDR_VAR 0 6
32572: PUSH
32573: LD_VAR 0 7
32577: PUSH
32578: LD_VAR 0 9
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: PUSH
32587: EMPTY
32588: LIST
32589: ST_TO_ADDR
32590: GO 32734
// begin if result [ result ] [ 2 ] < tmp then
32592: LD_VAR 0 6
32596: PUSH
32597: LD_VAR 0 6
32601: ARRAY
32602: PUSH
32603: LD_INT 2
32605: ARRAY
32606: PUSH
32607: LD_VAR 0 9
32611: LESS
32612: IFFALSE 32654
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32614: LD_ADDR_VAR 0 6
32618: PUSH
32619: LD_VAR 0 6
32623: PPUSH
32624: LD_VAR 0 6
32628: PUSH
32629: LD_INT 1
32631: PLUS
32632: PPUSH
32633: LD_VAR 0 7
32637: PUSH
32638: LD_VAR 0 9
32642: PUSH
32643: EMPTY
32644: LIST
32645: LIST
32646: PPUSH
32647: CALL_OW 2
32651: ST_TO_ADDR
32652: GO 32734
// for j = 1 to result do
32654: LD_ADDR_VAR 0 8
32658: PUSH
32659: DOUBLE
32660: LD_INT 1
32662: DEC
32663: ST_TO_ADDR
32664: LD_VAR 0 6
32668: PUSH
32669: FOR_TO
32670: IFFALSE 32732
// begin if tmp < result [ j ] [ 2 ] then
32672: LD_VAR 0 9
32676: PUSH
32677: LD_VAR 0 6
32681: PUSH
32682: LD_VAR 0 8
32686: ARRAY
32687: PUSH
32688: LD_INT 2
32690: ARRAY
32691: LESS
32692: IFFALSE 32730
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32694: LD_ADDR_VAR 0 6
32698: PUSH
32699: LD_VAR 0 6
32703: PPUSH
32704: LD_VAR 0 8
32708: PPUSH
32709: LD_VAR 0 7
32713: PUSH
32714: LD_VAR 0 9
32718: PUSH
32719: EMPTY
32720: LIST
32721: LIST
32722: PPUSH
32723: CALL_OW 2
32727: ST_TO_ADDR
// break ;
32728: GO 32732
// end ; end ;
32730: GO 32669
32732: POP
32733: POP
// end ; end ;
32734: GO 32533
32736: POP
32737: POP
// if result and not asc then
32738: LD_VAR 0 6
32742: PUSH
32743: LD_VAR 0 4
32747: NOT
32748: AND
32749: IFFALSE 32824
// begin tmp := result ;
32751: LD_ADDR_VAR 0 9
32755: PUSH
32756: LD_VAR 0 6
32760: ST_TO_ADDR
// for i = tmp downto 1 do
32761: LD_ADDR_VAR 0 7
32765: PUSH
32766: DOUBLE
32767: LD_VAR 0 9
32771: INC
32772: ST_TO_ADDR
32773: LD_INT 1
32775: PUSH
32776: FOR_DOWNTO
32777: IFFALSE 32822
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
32779: LD_ADDR_VAR 0 6
32783: PUSH
32784: LD_VAR 0 6
32788: PPUSH
32789: LD_VAR 0 9
32793: PUSH
32794: LD_VAR 0 7
32798: MINUS
32799: PUSH
32800: LD_INT 1
32802: PLUS
32803: PPUSH
32804: LD_VAR 0 9
32808: PUSH
32809: LD_VAR 0 7
32813: ARRAY
32814: PPUSH
32815: CALL_OW 1
32819: ST_TO_ADDR
32820: GO 32776
32822: POP
32823: POP
// end ; tmp := [ ] ;
32824: LD_ADDR_VAR 0 9
32828: PUSH
32829: EMPTY
32830: ST_TO_ADDR
// if mode then
32831: LD_VAR 0 5
32835: IFFALSE 32904
// begin for i = 1 to result do
32837: LD_ADDR_VAR 0 7
32841: PUSH
32842: DOUBLE
32843: LD_INT 1
32845: DEC
32846: ST_TO_ADDR
32847: LD_VAR 0 6
32851: PUSH
32852: FOR_TO
32853: IFFALSE 32892
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
32855: LD_ADDR_VAR 0 9
32859: PUSH
32860: LD_VAR 0 9
32864: PPUSH
32865: LD_VAR 0 7
32869: PPUSH
32870: LD_VAR 0 6
32874: PUSH
32875: LD_VAR 0 7
32879: ARRAY
32880: PUSH
32881: LD_INT 1
32883: ARRAY
32884: PPUSH
32885: CALL_OW 1
32889: ST_TO_ADDR
32890: GO 32852
32892: POP
32893: POP
// result := tmp ;
32894: LD_ADDR_VAR 0 6
32898: PUSH
32899: LD_VAR 0 9
32903: ST_TO_ADDR
// end ; end ;
32904: LD_VAR 0 6
32908: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
32909: LD_INT 0
32911: PPUSH
32912: PPUSH
32913: PPUSH
32914: PPUSH
32915: PPUSH
32916: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
32917: LD_ADDR_VAR 0 5
32921: PUSH
32922: LD_INT 0
32924: PUSH
32925: LD_INT 0
32927: PUSH
32928: LD_INT 0
32930: PUSH
32931: EMPTY
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: LIST
32937: LIST
32938: ST_TO_ADDR
// if not x or not y then
32939: LD_VAR 0 2
32943: NOT
32944: PUSH
32945: LD_VAR 0 3
32949: NOT
32950: OR
32951: IFFALSE 32955
// exit ;
32953: GO 34605
// if not range then
32955: LD_VAR 0 4
32959: NOT
32960: IFFALSE 32970
// range := 10 ;
32962: LD_ADDR_VAR 0 4
32966: PUSH
32967: LD_INT 10
32969: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32970: LD_ADDR_VAR 0 8
32974: PUSH
32975: LD_INT 81
32977: PUSH
32978: LD_VAR 0 1
32982: PUSH
32983: EMPTY
32984: LIST
32985: LIST
32986: PUSH
32987: LD_INT 92
32989: PUSH
32990: LD_VAR 0 2
32994: PUSH
32995: LD_VAR 0 3
32999: PUSH
33000: LD_VAR 0 4
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: LIST
33009: LIST
33010: PUSH
33011: LD_INT 3
33013: PUSH
33014: LD_INT 21
33016: PUSH
33017: LD_INT 3
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: PUSH
33028: EMPTY
33029: LIST
33030: LIST
33031: LIST
33032: PPUSH
33033: CALL_OW 69
33037: ST_TO_ADDR
// if not tmp then
33038: LD_VAR 0 8
33042: NOT
33043: IFFALSE 33047
// exit ;
33045: GO 34605
// for i in tmp do
33047: LD_ADDR_VAR 0 6
33051: PUSH
33052: LD_VAR 0 8
33056: PUSH
33057: FOR_IN
33058: IFFALSE 34580
// begin points := [ 0 , 0 , 0 ] ;
33060: LD_ADDR_VAR 0 9
33064: PUSH
33065: LD_INT 0
33067: PUSH
33068: LD_INT 0
33070: PUSH
33071: LD_INT 0
33073: PUSH
33074: EMPTY
33075: LIST
33076: LIST
33077: LIST
33078: ST_TO_ADDR
// bpoints := 1 ;
33079: LD_ADDR_VAR 0 10
33083: PUSH
33084: LD_INT 1
33086: ST_TO_ADDR
// case GetType ( i ) of unit_human :
33087: LD_VAR 0 6
33091: PPUSH
33092: CALL_OW 247
33096: PUSH
33097: LD_INT 1
33099: DOUBLE
33100: EQUAL
33101: IFTRUE 33105
33103: GO 33683
33105: POP
// begin if GetClass ( i ) = 1 then
33106: LD_VAR 0 6
33110: PPUSH
33111: CALL_OW 257
33115: PUSH
33116: LD_INT 1
33118: EQUAL
33119: IFFALSE 33140
// points := [ 10 , 5 , 3 ] ;
33121: LD_ADDR_VAR 0 9
33125: PUSH
33126: LD_INT 10
33128: PUSH
33129: LD_INT 5
33131: PUSH
33132: LD_INT 3
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: LIST
33139: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
33140: LD_VAR 0 6
33144: PPUSH
33145: CALL_OW 257
33149: PUSH
33150: LD_INT 2
33152: PUSH
33153: LD_INT 3
33155: PUSH
33156: LD_INT 4
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: LIST
33163: IN
33164: IFFALSE 33185
// points := [ 3 , 2 , 1 ] ;
33166: LD_ADDR_VAR 0 9
33170: PUSH
33171: LD_INT 3
33173: PUSH
33174: LD_INT 2
33176: PUSH
33177: LD_INT 1
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: LIST
33184: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33185: LD_VAR 0 6
33189: PPUSH
33190: CALL_OW 257
33194: PUSH
33195: LD_INT 5
33197: EQUAL
33198: IFFALSE 33219
// points := [ 130 , 5 , 2 ] ;
33200: LD_ADDR_VAR 0 9
33204: PUSH
33205: LD_INT 130
33207: PUSH
33208: LD_INT 5
33210: PUSH
33211: LD_INT 2
33213: PUSH
33214: EMPTY
33215: LIST
33216: LIST
33217: LIST
33218: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33219: LD_VAR 0 6
33223: PPUSH
33224: CALL_OW 257
33228: PUSH
33229: LD_INT 8
33231: EQUAL
33232: IFFALSE 33253
// points := [ 35 , 35 , 30 ] ;
33234: LD_ADDR_VAR 0 9
33238: PUSH
33239: LD_INT 35
33241: PUSH
33242: LD_INT 35
33244: PUSH
33245: LD_INT 30
33247: PUSH
33248: EMPTY
33249: LIST
33250: LIST
33251: LIST
33252: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33253: LD_VAR 0 6
33257: PPUSH
33258: CALL_OW 257
33262: PUSH
33263: LD_INT 9
33265: EQUAL
33266: IFFALSE 33287
// points := [ 20 , 55 , 40 ] ;
33268: LD_ADDR_VAR 0 9
33272: PUSH
33273: LD_INT 20
33275: PUSH
33276: LD_INT 55
33278: PUSH
33279: LD_INT 40
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: LIST
33286: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33287: LD_VAR 0 6
33291: PPUSH
33292: CALL_OW 257
33296: PUSH
33297: LD_INT 12
33299: PUSH
33300: LD_INT 16
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: IN
33307: IFFALSE 33328
// points := [ 5 , 3 , 2 ] ;
33309: LD_ADDR_VAR 0 9
33313: PUSH
33314: LD_INT 5
33316: PUSH
33317: LD_INT 3
33319: PUSH
33320: LD_INT 2
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: LIST
33327: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33328: LD_VAR 0 6
33332: PPUSH
33333: CALL_OW 257
33337: PUSH
33338: LD_INT 17
33340: EQUAL
33341: IFFALSE 33362
// points := [ 100 , 50 , 75 ] ;
33343: LD_ADDR_VAR 0 9
33347: PUSH
33348: LD_INT 100
33350: PUSH
33351: LD_INT 50
33353: PUSH
33354: LD_INT 75
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: LIST
33361: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33362: LD_VAR 0 6
33366: PPUSH
33367: CALL_OW 257
33371: PUSH
33372: LD_INT 15
33374: EQUAL
33375: IFFALSE 33396
// points := [ 10 , 5 , 3 ] ;
33377: LD_ADDR_VAR 0 9
33381: PUSH
33382: LD_INT 10
33384: PUSH
33385: LD_INT 5
33387: PUSH
33388: LD_INT 3
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: LIST
33395: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33396: LD_VAR 0 6
33400: PPUSH
33401: CALL_OW 257
33405: PUSH
33406: LD_INT 14
33408: EQUAL
33409: IFFALSE 33430
// points := [ 10 , 0 , 0 ] ;
33411: LD_ADDR_VAR 0 9
33415: PUSH
33416: LD_INT 10
33418: PUSH
33419: LD_INT 0
33421: PUSH
33422: LD_INT 0
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: LIST
33429: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33430: LD_VAR 0 6
33434: PPUSH
33435: CALL_OW 257
33439: PUSH
33440: LD_INT 11
33442: EQUAL
33443: IFFALSE 33464
// points := [ 30 , 10 , 5 ] ;
33445: LD_ADDR_VAR 0 9
33449: PUSH
33450: LD_INT 30
33452: PUSH
33453: LD_INT 10
33455: PUSH
33456: LD_INT 5
33458: PUSH
33459: EMPTY
33460: LIST
33461: LIST
33462: LIST
33463: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33464: LD_VAR 0 1
33468: PPUSH
33469: LD_INT 5
33471: PPUSH
33472: CALL_OW 321
33476: PUSH
33477: LD_INT 2
33479: EQUAL
33480: IFFALSE 33497
// bpoints := bpoints * 1.8 ;
33482: LD_ADDR_VAR 0 10
33486: PUSH
33487: LD_VAR 0 10
33491: PUSH
33492: LD_REAL  1.80000000000000E+0000
33495: MUL
33496: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33497: LD_VAR 0 6
33501: PPUSH
33502: CALL_OW 257
33506: PUSH
33507: LD_INT 1
33509: PUSH
33510: LD_INT 2
33512: PUSH
33513: LD_INT 3
33515: PUSH
33516: LD_INT 4
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: LIST
33523: LIST
33524: IN
33525: PUSH
33526: LD_VAR 0 1
33530: PPUSH
33531: LD_INT 51
33533: PPUSH
33534: CALL_OW 321
33538: PUSH
33539: LD_INT 2
33541: EQUAL
33542: AND
33543: IFFALSE 33560
// bpoints := bpoints * 1.2 ;
33545: LD_ADDR_VAR 0 10
33549: PUSH
33550: LD_VAR 0 10
33554: PUSH
33555: LD_REAL  1.20000000000000E+0000
33558: MUL
33559: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33560: LD_VAR 0 6
33564: PPUSH
33565: CALL_OW 257
33569: PUSH
33570: LD_INT 5
33572: PUSH
33573: LD_INT 7
33575: PUSH
33576: LD_INT 9
33578: PUSH
33579: EMPTY
33580: LIST
33581: LIST
33582: LIST
33583: IN
33584: PUSH
33585: LD_VAR 0 1
33589: PPUSH
33590: LD_INT 52
33592: PPUSH
33593: CALL_OW 321
33597: PUSH
33598: LD_INT 2
33600: EQUAL
33601: AND
33602: IFFALSE 33619
// bpoints := bpoints * 1.5 ;
33604: LD_ADDR_VAR 0 10
33608: PUSH
33609: LD_VAR 0 10
33613: PUSH
33614: LD_REAL  1.50000000000000E+0000
33617: MUL
33618: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33619: LD_VAR 0 1
33623: PPUSH
33624: LD_INT 66
33626: PPUSH
33627: CALL_OW 321
33631: PUSH
33632: LD_INT 2
33634: EQUAL
33635: IFFALSE 33652
// bpoints := bpoints * 1.1 ;
33637: LD_ADDR_VAR 0 10
33641: PUSH
33642: LD_VAR 0 10
33646: PUSH
33647: LD_REAL  1.10000000000000E+0000
33650: MUL
33651: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33652: LD_ADDR_VAR 0 10
33656: PUSH
33657: LD_VAR 0 10
33661: PUSH
33662: LD_VAR 0 6
33666: PPUSH
33667: LD_INT 1
33669: PPUSH
33670: CALL_OW 259
33674: PUSH
33675: LD_REAL  1.15000000000000E+0000
33678: MUL
33679: MUL
33680: ST_TO_ADDR
// end ; unit_vehicle :
33681: GO 34509
33683: LD_INT 2
33685: DOUBLE
33686: EQUAL
33687: IFTRUE 33691
33689: GO 34497
33691: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33692: LD_VAR 0 6
33696: PPUSH
33697: CALL_OW 264
33701: PUSH
33702: LD_INT 2
33704: PUSH
33705: LD_INT 42
33707: PUSH
33708: LD_INT 24
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: LIST
33715: IN
33716: IFFALSE 33737
// points := [ 25 , 5 , 3 ] ;
33718: LD_ADDR_VAR 0 9
33722: PUSH
33723: LD_INT 25
33725: PUSH
33726: LD_INT 5
33728: PUSH
33729: LD_INT 3
33731: PUSH
33732: EMPTY
33733: LIST
33734: LIST
33735: LIST
33736: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33737: LD_VAR 0 6
33741: PPUSH
33742: CALL_OW 264
33746: PUSH
33747: LD_INT 4
33749: PUSH
33750: LD_INT 43
33752: PUSH
33753: LD_INT 25
33755: PUSH
33756: EMPTY
33757: LIST
33758: LIST
33759: LIST
33760: IN
33761: IFFALSE 33782
// points := [ 40 , 15 , 5 ] ;
33763: LD_ADDR_VAR 0 9
33767: PUSH
33768: LD_INT 40
33770: PUSH
33771: LD_INT 15
33773: PUSH
33774: LD_INT 5
33776: PUSH
33777: EMPTY
33778: LIST
33779: LIST
33780: LIST
33781: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
33782: LD_VAR 0 6
33786: PPUSH
33787: CALL_OW 264
33791: PUSH
33792: LD_INT 3
33794: PUSH
33795: LD_INT 23
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: IN
33802: IFFALSE 33823
// points := [ 7 , 25 , 8 ] ;
33804: LD_ADDR_VAR 0 9
33808: PUSH
33809: LD_INT 7
33811: PUSH
33812: LD_INT 25
33814: PUSH
33815: LD_INT 8
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: LIST
33822: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
33823: LD_VAR 0 6
33827: PPUSH
33828: CALL_OW 264
33832: PUSH
33833: LD_INT 5
33835: PUSH
33836: LD_INT 27
33838: PUSH
33839: LD_INT 44
33841: PUSH
33842: EMPTY
33843: LIST
33844: LIST
33845: LIST
33846: IN
33847: IFFALSE 33868
// points := [ 14 , 50 , 16 ] ;
33849: LD_ADDR_VAR 0 9
33853: PUSH
33854: LD_INT 14
33856: PUSH
33857: LD_INT 50
33859: PUSH
33860: LD_INT 16
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: LIST
33867: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
33868: LD_VAR 0 6
33872: PPUSH
33873: CALL_OW 264
33877: PUSH
33878: LD_INT 6
33880: PUSH
33881: LD_INT 46
33883: PUSH
33884: EMPTY
33885: LIST
33886: LIST
33887: IN
33888: IFFALSE 33909
// points := [ 32 , 120 , 70 ] ;
33890: LD_ADDR_VAR 0 9
33894: PUSH
33895: LD_INT 32
33897: PUSH
33898: LD_INT 120
33900: PUSH
33901: LD_INT 70
33903: PUSH
33904: EMPTY
33905: LIST
33906: LIST
33907: LIST
33908: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
33909: LD_VAR 0 6
33913: PPUSH
33914: CALL_OW 264
33918: PUSH
33919: LD_INT 7
33921: PUSH
33922: LD_INT 28
33924: PUSH
33925: LD_INT 45
33927: PUSH
33928: LD_INT 92
33930: PUSH
33931: EMPTY
33932: LIST
33933: LIST
33934: LIST
33935: LIST
33936: IN
33937: IFFALSE 33958
// points := [ 35 , 20 , 45 ] ;
33939: LD_ADDR_VAR 0 9
33943: PUSH
33944: LD_INT 35
33946: PUSH
33947: LD_INT 20
33949: PUSH
33950: LD_INT 45
33952: PUSH
33953: EMPTY
33954: LIST
33955: LIST
33956: LIST
33957: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
33958: LD_VAR 0 6
33962: PPUSH
33963: CALL_OW 264
33967: PUSH
33968: LD_INT 47
33970: PUSH
33971: EMPTY
33972: LIST
33973: IN
33974: IFFALSE 33995
// points := [ 67 , 45 , 75 ] ;
33976: LD_ADDR_VAR 0 9
33980: PUSH
33981: LD_INT 67
33983: PUSH
33984: LD_INT 45
33986: PUSH
33987: LD_INT 75
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: LIST
33994: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
33995: LD_VAR 0 6
33999: PPUSH
34000: CALL_OW 264
34004: PUSH
34005: LD_INT 26
34007: PUSH
34008: EMPTY
34009: LIST
34010: IN
34011: IFFALSE 34032
// points := [ 120 , 30 , 80 ] ;
34013: LD_ADDR_VAR 0 9
34017: PUSH
34018: LD_INT 120
34020: PUSH
34021: LD_INT 30
34023: PUSH
34024: LD_INT 80
34026: PUSH
34027: EMPTY
34028: LIST
34029: LIST
34030: LIST
34031: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34032: LD_VAR 0 6
34036: PPUSH
34037: CALL_OW 264
34041: PUSH
34042: LD_INT 22
34044: PUSH
34045: EMPTY
34046: LIST
34047: IN
34048: IFFALSE 34069
// points := [ 40 , 1 , 1 ] ;
34050: LD_ADDR_VAR 0 9
34054: PUSH
34055: LD_INT 40
34057: PUSH
34058: LD_INT 1
34060: PUSH
34061: LD_INT 1
34063: PUSH
34064: EMPTY
34065: LIST
34066: LIST
34067: LIST
34068: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
34069: LD_VAR 0 6
34073: PPUSH
34074: CALL_OW 264
34078: PUSH
34079: LD_INT 29
34081: PUSH
34082: EMPTY
34083: LIST
34084: IN
34085: IFFALSE 34106
// points := [ 70 , 200 , 400 ] ;
34087: LD_ADDR_VAR 0 9
34091: PUSH
34092: LD_INT 70
34094: PUSH
34095: LD_INT 200
34097: PUSH
34098: LD_INT 400
34100: PUSH
34101: EMPTY
34102: LIST
34103: LIST
34104: LIST
34105: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
34106: LD_VAR 0 6
34110: PPUSH
34111: CALL_OW 264
34115: PUSH
34116: LD_INT 14
34118: PUSH
34119: LD_INT 53
34121: PUSH
34122: EMPTY
34123: LIST
34124: LIST
34125: IN
34126: IFFALSE 34147
// points := [ 40 , 10 , 20 ] ;
34128: LD_ADDR_VAR 0 9
34132: PUSH
34133: LD_INT 40
34135: PUSH
34136: LD_INT 10
34138: PUSH
34139: LD_INT 20
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: LIST
34146: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34147: LD_VAR 0 6
34151: PPUSH
34152: CALL_OW 264
34156: PUSH
34157: LD_INT 9
34159: PUSH
34160: EMPTY
34161: LIST
34162: IN
34163: IFFALSE 34184
// points := [ 5 , 70 , 20 ] ;
34165: LD_ADDR_VAR 0 9
34169: PUSH
34170: LD_INT 5
34172: PUSH
34173: LD_INT 70
34175: PUSH
34176: LD_INT 20
34178: PUSH
34179: EMPTY
34180: LIST
34181: LIST
34182: LIST
34183: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34184: LD_VAR 0 6
34188: PPUSH
34189: CALL_OW 264
34193: PUSH
34194: LD_INT 10
34196: PUSH
34197: EMPTY
34198: LIST
34199: IN
34200: IFFALSE 34221
// points := [ 35 , 110 , 70 ] ;
34202: LD_ADDR_VAR 0 9
34206: PUSH
34207: LD_INT 35
34209: PUSH
34210: LD_INT 110
34212: PUSH
34213: LD_INT 70
34215: PUSH
34216: EMPTY
34217: LIST
34218: LIST
34219: LIST
34220: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34221: LD_VAR 0 6
34225: PPUSH
34226: CALL_OW 265
34230: PUSH
34231: LD_INT 25
34233: EQUAL
34234: IFFALSE 34255
// points := [ 80 , 65 , 100 ] ;
34236: LD_ADDR_VAR 0 9
34240: PUSH
34241: LD_INT 80
34243: PUSH
34244: LD_INT 65
34246: PUSH
34247: LD_INT 100
34249: PUSH
34250: EMPTY
34251: LIST
34252: LIST
34253: LIST
34254: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34255: LD_VAR 0 6
34259: PPUSH
34260: CALL_OW 263
34264: PUSH
34265: LD_INT 1
34267: EQUAL
34268: IFFALSE 34303
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34270: LD_ADDR_VAR 0 10
34274: PUSH
34275: LD_VAR 0 10
34279: PUSH
34280: LD_VAR 0 6
34284: PPUSH
34285: CALL_OW 311
34289: PPUSH
34290: LD_INT 3
34292: PPUSH
34293: CALL_OW 259
34297: PUSH
34298: LD_INT 4
34300: MUL
34301: MUL
34302: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34303: LD_VAR 0 6
34307: PPUSH
34308: CALL_OW 263
34312: PUSH
34313: LD_INT 2
34315: EQUAL
34316: IFFALSE 34367
// begin j := IsControledBy ( i ) ;
34318: LD_ADDR_VAR 0 7
34322: PUSH
34323: LD_VAR 0 6
34327: PPUSH
34328: CALL_OW 312
34332: ST_TO_ADDR
// if j then
34333: LD_VAR 0 7
34337: IFFALSE 34367
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34339: LD_ADDR_VAR 0 10
34343: PUSH
34344: LD_VAR 0 10
34348: PUSH
34349: LD_VAR 0 7
34353: PPUSH
34354: LD_INT 3
34356: PPUSH
34357: CALL_OW 259
34361: PUSH
34362: LD_INT 3
34364: MUL
34365: MUL
34366: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34367: LD_VAR 0 6
34371: PPUSH
34372: CALL_OW 264
34376: PUSH
34377: LD_INT 5
34379: PUSH
34380: LD_INT 6
34382: PUSH
34383: LD_INT 46
34385: PUSH
34386: LD_INT 44
34388: PUSH
34389: LD_INT 47
34391: PUSH
34392: LD_INT 45
34394: PUSH
34395: LD_INT 28
34397: PUSH
34398: LD_INT 7
34400: PUSH
34401: LD_INT 27
34403: PUSH
34404: LD_INT 29
34406: PUSH
34407: EMPTY
34408: LIST
34409: LIST
34410: LIST
34411: LIST
34412: LIST
34413: LIST
34414: LIST
34415: LIST
34416: LIST
34417: LIST
34418: IN
34419: PUSH
34420: LD_VAR 0 1
34424: PPUSH
34425: LD_INT 52
34427: PPUSH
34428: CALL_OW 321
34432: PUSH
34433: LD_INT 2
34435: EQUAL
34436: AND
34437: IFFALSE 34454
// bpoints := bpoints * 1.2 ;
34439: LD_ADDR_VAR 0 10
34443: PUSH
34444: LD_VAR 0 10
34448: PUSH
34449: LD_REAL  1.20000000000000E+0000
34452: MUL
34453: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34454: LD_VAR 0 6
34458: PPUSH
34459: CALL_OW 264
34463: PUSH
34464: LD_INT 6
34466: PUSH
34467: LD_INT 46
34469: PUSH
34470: LD_INT 47
34472: PUSH
34473: EMPTY
34474: LIST
34475: LIST
34476: LIST
34477: IN
34478: IFFALSE 34495
// bpoints := bpoints * 1.2 ;
34480: LD_ADDR_VAR 0 10
34484: PUSH
34485: LD_VAR 0 10
34489: PUSH
34490: LD_REAL  1.20000000000000E+0000
34493: MUL
34494: ST_TO_ADDR
// end ; unit_building :
34495: GO 34509
34497: LD_INT 3
34499: DOUBLE
34500: EQUAL
34501: IFTRUE 34505
34503: GO 34508
34505: POP
// ; end ;
34506: GO 34509
34508: POP
// for j = 1 to 3 do
34509: LD_ADDR_VAR 0 7
34513: PUSH
34514: DOUBLE
34515: LD_INT 1
34517: DEC
34518: ST_TO_ADDR
34519: LD_INT 3
34521: PUSH
34522: FOR_TO
34523: IFFALSE 34576
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34525: LD_ADDR_VAR 0 5
34529: PUSH
34530: LD_VAR 0 5
34534: PPUSH
34535: LD_VAR 0 7
34539: PPUSH
34540: LD_VAR 0 5
34544: PUSH
34545: LD_VAR 0 7
34549: ARRAY
34550: PUSH
34551: LD_VAR 0 9
34555: PUSH
34556: LD_VAR 0 7
34560: ARRAY
34561: PUSH
34562: LD_VAR 0 10
34566: MUL
34567: PLUS
34568: PPUSH
34569: CALL_OW 1
34573: ST_TO_ADDR
34574: GO 34522
34576: POP
34577: POP
// end ;
34578: GO 33057
34580: POP
34581: POP
// result := Replace ( result , 4 , tmp ) ;
34582: LD_ADDR_VAR 0 5
34586: PUSH
34587: LD_VAR 0 5
34591: PPUSH
34592: LD_INT 4
34594: PPUSH
34595: LD_VAR 0 8
34599: PPUSH
34600: CALL_OW 1
34604: ST_TO_ADDR
// end ;
34605: LD_VAR 0 5
34609: RET
// export function DangerAtRange ( unit , range ) ; begin
34610: LD_INT 0
34612: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34613: LD_ADDR_VAR 0 3
34617: PUSH
34618: LD_VAR 0 1
34622: PPUSH
34623: CALL_OW 255
34627: PPUSH
34628: LD_VAR 0 1
34632: PPUSH
34633: CALL_OW 250
34637: PPUSH
34638: LD_VAR 0 1
34642: PPUSH
34643: CALL_OW 251
34647: PPUSH
34648: LD_VAR 0 2
34652: PPUSH
34653: CALL 32909 0 4
34657: ST_TO_ADDR
// end ;
34658: LD_VAR 0 3
34662: RET
// export function DangerInArea ( side , area ) ; begin
34663: LD_INT 0
34665: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34666: LD_ADDR_VAR 0 3
34670: PUSH
34671: LD_VAR 0 2
34675: PPUSH
34676: LD_INT 81
34678: PUSH
34679: LD_VAR 0 1
34683: PUSH
34684: EMPTY
34685: LIST
34686: LIST
34687: PPUSH
34688: CALL_OW 70
34692: ST_TO_ADDR
// end ;
34693: LD_VAR 0 3
34697: RET
// export function IsExtension ( b ) ; begin
34698: LD_INT 0
34700: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34701: LD_ADDR_VAR 0 2
34705: PUSH
34706: LD_VAR 0 1
34710: PUSH
34711: LD_INT 23
34713: PUSH
34714: LD_INT 20
34716: PUSH
34717: LD_INT 22
34719: PUSH
34720: LD_INT 17
34722: PUSH
34723: LD_INT 24
34725: PUSH
34726: LD_INT 21
34728: PUSH
34729: LD_INT 19
34731: PUSH
34732: LD_INT 16
34734: PUSH
34735: LD_INT 25
34737: PUSH
34738: LD_INT 18
34740: PUSH
34741: EMPTY
34742: LIST
34743: LIST
34744: LIST
34745: LIST
34746: LIST
34747: LIST
34748: LIST
34749: LIST
34750: LIST
34751: LIST
34752: IN
34753: ST_TO_ADDR
// end ;
34754: LD_VAR 0 2
34758: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
34759: LD_INT 0
34761: PPUSH
34762: PPUSH
34763: PPUSH
// result := [ ] ;
34764: LD_ADDR_VAR 0 4
34768: PUSH
34769: EMPTY
34770: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
34771: LD_ADDR_VAR 0 5
34775: PUSH
34776: LD_VAR 0 2
34780: PPUSH
34781: LD_INT 21
34783: PUSH
34784: LD_INT 3
34786: PUSH
34787: EMPTY
34788: LIST
34789: LIST
34790: PPUSH
34791: CALL_OW 70
34795: ST_TO_ADDR
// if not tmp then
34796: LD_VAR 0 5
34800: NOT
34801: IFFALSE 34805
// exit ;
34803: GO 34869
// if checkLink then
34805: LD_VAR 0 3
34809: IFFALSE 34859
// begin for i in tmp do
34811: LD_ADDR_VAR 0 6
34815: PUSH
34816: LD_VAR 0 5
34820: PUSH
34821: FOR_IN
34822: IFFALSE 34857
// if GetBase ( i ) <> base then
34824: LD_VAR 0 6
34828: PPUSH
34829: CALL_OW 274
34833: PUSH
34834: LD_VAR 0 1
34838: NONEQUAL
34839: IFFALSE 34855
// ComLinkToBase ( base , i ) ;
34841: LD_VAR 0 1
34845: PPUSH
34846: LD_VAR 0 6
34850: PPUSH
34851: CALL_OW 169
34855: GO 34821
34857: POP
34858: POP
// end ; result := tmp ;
34859: LD_ADDR_VAR 0 4
34863: PUSH
34864: LD_VAR 0 5
34868: ST_TO_ADDR
// end ;
34869: LD_VAR 0 4
34873: RET
// export function ComComplete ( units , b ) ; var i ; begin
34874: LD_INT 0
34876: PPUSH
34877: PPUSH
// if not units then
34878: LD_VAR 0 1
34882: NOT
34883: IFFALSE 34887
// exit ;
34885: GO 34977
// for i in units do
34887: LD_ADDR_VAR 0 4
34891: PUSH
34892: LD_VAR 0 1
34896: PUSH
34897: FOR_IN
34898: IFFALSE 34975
// if BuildingStatus ( b ) = bs_build then
34900: LD_VAR 0 2
34904: PPUSH
34905: CALL_OW 461
34909: PUSH
34910: LD_INT 1
34912: EQUAL
34913: IFFALSE 34973
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
34915: LD_VAR 0 4
34919: PPUSH
34920: LD_STRING h
34922: PUSH
34923: LD_VAR 0 2
34927: PPUSH
34928: CALL_OW 250
34932: PUSH
34933: LD_VAR 0 2
34937: PPUSH
34938: CALL_OW 251
34942: PUSH
34943: LD_VAR 0 2
34947: PUSH
34948: LD_INT 0
34950: PUSH
34951: LD_INT 0
34953: PUSH
34954: LD_INT 0
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: LIST
34961: LIST
34962: LIST
34963: LIST
34964: LIST
34965: PUSH
34966: EMPTY
34967: LIST
34968: PPUSH
34969: CALL_OW 446
34973: GO 34897
34975: POP
34976: POP
// end ;
34977: LD_VAR 0 3
34981: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
34982: LD_INT 0
34984: PPUSH
34985: PPUSH
34986: PPUSH
34987: PPUSH
34988: PPUSH
34989: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
34990: LD_VAR 0 1
34994: NOT
34995: PUSH
34996: LD_VAR 0 1
35000: PPUSH
35001: CALL_OW 263
35005: PUSH
35006: LD_INT 2
35008: NONEQUAL
35009: OR
35010: IFFALSE 35014
// exit ;
35012: GO 35330
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35014: LD_ADDR_VAR 0 6
35018: PUSH
35019: LD_INT 22
35021: PUSH
35022: LD_VAR 0 1
35026: PPUSH
35027: CALL_OW 255
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: PUSH
35036: LD_INT 2
35038: PUSH
35039: LD_INT 30
35041: PUSH
35042: LD_INT 36
35044: PUSH
35045: EMPTY
35046: LIST
35047: LIST
35048: PUSH
35049: LD_INT 34
35051: PUSH
35052: LD_INT 31
35054: PUSH
35055: EMPTY
35056: LIST
35057: LIST
35058: PUSH
35059: EMPTY
35060: LIST
35061: LIST
35062: LIST
35063: PUSH
35064: EMPTY
35065: LIST
35066: LIST
35067: PPUSH
35068: CALL_OW 69
35072: ST_TO_ADDR
// if not tmp then
35073: LD_VAR 0 6
35077: NOT
35078: IFFALSE 35082
// exit ;
35080: GO 35330
// result := [ ] ;
35082: LD_ADDR_VAR 0 2
35086: PUSH
35087: EMPTY
35088: ST_TO_ADDR
// for i in tmp do
35089: LD_ADDR_VAR 0 3
35093: PUSH
35094: LD_VAR 0 6
35098: PUSH
35099: FOR_IN
35100: IFFALSE 35171
// begin t := UnitsInside ( i ) ;
35102: LD_ADDR_VAR 0 4
35106: PUSH
35107: LD_VAR 0 3
35111: PPUSH
35112: CALL_OW 313
35116: ST_TO_ADDR
// if t then
35117: LD_VAR 0 4
35121: IFFALSE 35169
// for j in t do
35123: LD_ADDR_VAR 0 7
35127: PUSH
35128: LD_VAR 0 4
35132: PUSH
35133: FOR_IN
35134: IFFALSE 35167
// result := Replace ( result , result + 1 , j ) ;
35136: LD_ADDR_VAR 0 2
35140: PUSH
35141: LD_VAR 0 2
35145: PPUSH
35146: LD_VAR 0 2
35150: PUSH
35151: LD_INT 1
35153: PLUS
35154: PPUSH
35155: LD_VAR 0 7
35159: PPUSH
35160: CALL_OW 1
35164: ST_TO_ADDR
35165: GO 35133
35167: POP
35168: POP
// end ;
35169: GO 35099
35171: POP
35172: POP
// if not result then
35173: LD_VAR 0 2
35177: NOT
35178: IFFALSE 35182
// exit ;
35180: GO 35330
// mech := result [ 1 ] ;
35182: LD_ADDR_VAR 0 5
35186: PUSH
35187: LD_VAR 0 2
35191: PUSH
35192: LD_INT 1
35194: ARRAY
35195: ST_TO_ADDR
// if result > 1 then
35196: LD_VAR 0 2
35200: PUSH
35201: LD_INT 1
35203: GREATER
35204: IFFALSE 35316
// begin for i = 2 to result do
35206: LD_ADDR_VAR 0 3
35210: PUSH
35211: DOUBLE
35212: LD_INT 2
35214: DEC
35215: ST_TO_ADDR
35216: LD_VAR 0 2
35220: PUSH
35221: FOR_TO
35222: IFFALSE 35314
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35224: LD_ADDR_VAR 0 4
35228: PUSH
35229: LD_VAR 0 2
35233: PUSH
35234: LD_VAR 0 3
35238: ARRAY
35239: PPUSH
35240: LD_INT 3
35242: PPUSH
35243: CALL_OW 259
35247: PUSH
35248: LD_VAR 0 2
35252: PUSH
35253: LD_VAR 0 3
35257: ARRAY
35258: PPUSH
35259: CALL_OW 432
35263: MINUS
35264: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35265: LD_VAR 0 4
35269: PUSH
35270: LD_VAR 0 5
35274: PPUSH
35275: LD_INT 3
35277: PPUSH
35278: CALL_OW 259
35282: PUSH
35283: LD_VAR 0 5
35287: PPUSH
35288: CALL_OW 432
35292: MINUS
35293: GREATEREQUAL
35294: IFFALSE 35312
// mech := result [ i ] ;
35296: LD_ADDR_VAR 0 5
35300: PUSH
35301: LD_VAR 0 2
35305: PUSH
35306: LD_VAR 0 3
35310: ARRAY
35311: ST_TO_ADDR
// end ;
35312: GO 35221
35314: POP
35315: POP
// end ; ComLinkTo ( vehicle , mech ) ;
35316: LD_VAR 0 1
35320: PPUSH
35321: LD_VAR 0 5
35325: PPUSH
35326: CALL_OW 135
// end ;
35330: LD_VAR 0 2
35334: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35335: LD_INT 0
35337: PPUSH
35338: PPUSH
35339: PPUSH
35340: PPUSH
35341: PPUSH
35342: PPUSH
35343: PPUSH
35344: PPUSH
35345: PPUSH
35346: PPUSH
35347: PPUSH
35348: PPUSH
35349: PPUSH
// result := [ ] ;
35350: LD_ADDR_VAR 0 7
35354: PUSH
35355: EMPTY
35356: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35357: LD_VAR 0 1
35361: PPUSH
35362: CALL_OW 266
35366: PUSH
35367: LD_INT 0
35369: PUSH
35370: LD_INT 1
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: IN
35377: NOT
35378: IFFALSE 35382
// exit ;
35380: GO 37016
// if name then
35382: LD_VAR 0 3
35386: IFFALSE 35402
// SetBName ( base_dep , name ) ;
35388: LD_VAR 0 1
35392: PPUSH
35393: LD_VAR 0 3
35397: PPUSH
35398: CALL_OW 500
// base := GetBase ( base_dep ) ;
35402: LD_ADDR_VAR 0 15
35406: PUSH
35407: LD_VAR 0 1
35411: PPUSH
35412: CALL_OW 274
35416: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35417: LD_ADDR_VAR 0 16
35421: PUSH
35422: LD_VAR 0 1
35426: PPUSH
35427: CALL_OW 255
35431: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35432: LD_ADDR_VAR 0 17
35436: PUSH
35437: LD_VAR 0 1
35441: PPUSH
35442: CALL_OW 248
35446: ST_TO_ADDR
// if sources then
35447: LD_VAR 0 5
35451: IFFALSE 35498
// for i = 1 to 3 do
35453: LD_ADDR_VAR 0 8
35457: PUSH
35458: DOUBLE
35459: LD_INT 1
35461: DEC
35462: ST_TO_ADDR
35463: LD_INT 3
35465: PUSH
35466: FOR_TO
35467: IFFALSE 35496
// AddResourceType ( base , i , sources [ i ] ) ;
35469: LD_VAR 0 15
35473: PPUSH
35474: LD_VAR 0 8
35478: PPUSH
35479: LD_VAR 0 5
35483: PUSH
35484: LD_VAR 0 8
35488: ARRAY
35489: PPUSH
35490: CALL_OW 276
35494: GO 35466
35496: POP
35497: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35498: LD_ADDR_VAR 0 18
35502: PUSH
35503: LD_VAR 0 15
35507: PPUSH
35508: LD_VAR 0 2
35512: PPUSH
35513: LD_INT 1
35515: PPUSH
35516: CALL 34759 0 3
35520: ST_TO_ADDR
// InitHc ;
35521: CALL_OW 19
// InitUc ;
35525: CALL_OW 18
// uc_side := side ;
35529: LD_ADDR_OWVAR 20
35533: PUSH
35534: LD_VAR 0 16
35538: ST_TO_ADDR
// uc_nation := nation ;
35539: LD_ADDR_OWVAR 21
35543: PUSH
35544: LD_VAR 0 17
35548: ST_TO_ADDR
// if buildings then
35549: LD_VAR 0 18
35553: IFFALSE 36875
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35555: LD_ADDR_VAR 0 19
35559: PUSH
35560: LD_VAR 0 18
35564: PPUSH
35565: LD_INT 2
35567: PUSH
35568: LD_INT 30
35570: PUSH
35571: LD_INT 29
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: PUSH
35578: LD_INT 30
35580: PUSH
35581: LD_INT 30
35583: PUSH
35584: EMPTY
35585: LIST
35586: LIST
35587: PUSH
35588: EMPTY
35589: LIST
35590: LIST
35591: LIST
35592: PPUSH
35593: CALL_OW 72
35597: ST_TO_ADDR
// if tmp then
35598: LD_VAR 0 19
35602: IFFALSE 35650
// for i in tmp do
35604: LD_ADDR_VAR 0 8
35608: PUSH
35609: LD_VAR 0 19
35613: PUSH
35614: FOR_IN
35615: IFFALSE 35648
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35617: LD_VAR 0 8
35621: PPUSH
35622: CALL_OW 250
35626: PPUSH
35627: LD_VAR 0 8
35631: PPUSH
35632: CALL_OW 251
35636: PPUSH
35637: LD_VAR 0 16
35641: PPUSH
35642: CALL_OW 441
35646: GO 35614
35648: POP
35649: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35650: LD_VAR 0 18
35654: PPUSH
35655: LD_INT 2
35657: PUSH
35658: LD_INT 30
35660: PUSH
35661: LD_INT 32
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: PUSH
35668: LD_INT 30
35670: PUSH
35671: LD_INT 33
35673: PUSH
35674: EMPTY
35675: LIST
35676: LIST
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: LIST
35682: PPUSH
35683: CALL_OW 72
35687: IFFALSE 35775
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35689: LD_ADDR_VAR 0 8
35693: PUSH
35694: LD_VAR 0 18
35698: PPUSH
35699: LD_INT 2
35701: PUSH
35702: LD_INT 30
35704: PUSH
35705: LD_INT 32
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: PUSH
35712: LD_INT 30
35714: PUSH
35715: LD_INT 33
35717: PUSH
35718: EMPTY
35719: LIST
35720: LIST
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: LIST
35726: PPUSH
35727: CALL_OW 72
35731: PUSH
35732: FOR_IN
35733: IFFALSE 35773
// begin if not GetBWeapon ( i ) then
35735: LD_VAR 0 8
35739: PPUSH
35740: CALL_OW 269
35744: NOT
35745: IFFALSE 35771
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35747: LD_VAR 0 8
35751: PPUSH
35752: LD_VAR 0 8
35756: PPUSH
35757: LD_VAR 0 2
35761: PPUSH
35762: CALL 37021 0 2
35766: PPUSH
35767: CALL_OW 431
// end ;
35771: GO 35732
35773: POP
35774: POP
// end ; for i = 1 to personel do
35775: LD_ADDR_VAR 0 8
35779: PUSH
35780: DOUBLE
35781: LD_INT 1
35783: DEC
35784: ST_TO_ADDR
35785: LD_VAR 0 6
35789: PUSH
35790: FOR_TO
35791: IFFALSE 36855
// begin if i > 4 then
35793: LD_VAR 0 8
35797: PUSH
35798: LD_INT 4
35800: GREATER
35801: IFFALSE 35805
// break ;
35803: GO 36855
// case i of 1 :
35805: LD_VAR 0 8
35809: PUSH
35810: LD_INT 1
35812: DOUBLE
35813: EQUAL
35814: IFTRUE 35818
35816: GO 35898
35818: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
35819: LD_ADDR_VAR 0 12
35823: PUSH
35824: LD_VAR 0 18
35828: PPUSH
35829: LD_INT 22
35831: PUSH
35832: LD_VAR 0 16
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: PUSH
35841: LD_INT 58
35843: PUSH
35844: EMPTY
35845: LIST
35846: PUSH
35847: LD_INT 2
35849: PUSH
35850: LD_INT 30
35852: PUSH
35853: LD_INT 32
35855: PUSH
35856: EMPTY
35857: LIST
35858: LIST
35859: PUSH
35860: LD_INT 30
35862: PUSH
35863: LD_INT 4
35865: PUSH
35866: EMPTY
35867: LIST
35868: LIST
35869: PUSH
35870: LD_INT 30
35872: PUSH
35873: LD_INT 5
35875: PUSH
35876: EMPTY
35877: LIST
35878: LIST
35879: PUSH
35880: EMPTY
35881: LIST
35882: LIST
35883: LIST
35884: LIST
35885: PUSH
35886: EMPTY
35887: LIST
35888: LIST
35889: LIST
35890: PPUSH
35891: CALL_OW 72
35895: ST_TO_ADDR
35896: GO 36120
35898: LD_INT 2
35900: DOUBLE
35901: EQUAL
35902: IFTRUE 35906
35904: GO 35968
35906: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
35907: LD_ADDR_VAR 0 12
35911: PUSH
35912: LD_VAR 0 18
35916: PPUSH
35917: LD_INT 22
35919: PUSH
35920: LD_VAR 0 16
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: PUSH
35929: LD_INT 2
35931: PUSH
35932: LD_INT 30
35934: PUSH
35935: LD_INT 0
35937: PUSH
35938: EMPTY
35939: LIST
35940: LIST
35941: PUSH
35942: LD_INT 30
35944: PUSH
35945: LD_INT 1
35947: PUSH
35948: EMPTY
35949: LIST
35950: LIST
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: LIST
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: PPUSH
35961: CALL_OW 72
35965: ST_TO_ADDR
35966: GO 36120
35968: LD_INT 3
35970: DOUBLE
35971: EQUAL
35972: IFTRUE 35976
35974: GO 36038
35976: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
35977: LD_ADDR_VAR 0 12
35981: PUSH
35982: LD_VAR 0 18
35986: PPUSH
35987: LD_INT 22
35989: PUSH
35990: LD_VAR 0 16
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: PUSH
35999: LD_INT 2
36001: PUSH
36002: LD_INT 30
36004: PUSH
36005: LD_INT 2
36007: PUSH
36008: EMPTY
36009: LIST
36010: LIST
36011: PUSH
36012: LD_INT 30
36014: PUSH
36015: LD_INT 3
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: PUSH
36022: EMPTY
36023: LIST
36024: LIST
36025: LIST
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: PPUSH
36031: CALL_OW 72
36035: ST_TO_ADDR
36036: GO 36120
36038: LD_INT 4
36040: DOUBLE
36041: EQUAL
36042: IFTRUE 36046
36044: GO 36119
36046: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
36047: LD_ADDR_VAR 0 12
36051: PUSH
36052: LD_VAR 0 18
36056: PPUSH
36057: LD_INT 22
36059: PUSH
36060: LD_VAR 0 16
36064: PUSH
36065: EMPTY
36066: LIST
36067: LIST
36068: PUSH
36069: LD_INT 2
36071: PUSH
36072: LD_INT 30
36074: PUSH
36075: LD_INT 6
36077: PUSH
36078: EMPTY
36079: LIST
36080: LIST
36081: PUSH
36082: LD_INT 30
36084: PUSH
36085: LD_INT 7
36087: PUSH
36088: EMPTY
36089: LIST
36090: LIST
36091: PUSH
36092: LD_INT 30
36094: PUSH
36095: LD_INT 8
36097: PUSH
36098: EMPTY
36099: LIST
36100: LIST
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: LIST
36106: LIST
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: PPUSH
36112: CALL_OW 72
36116: ST_TO_ADDR
36117: GO 36120
36119: POP
// if i = 1 then
36120: LD_VAR 0 8
36124: PUSH
36125: LD_INT 1
36127: EQUAL
36128: IFFALSE 36239
// begin tmp := [ ] ;
36130: LD_ADDR_VAR 0 19
36134: PUSH
36135: EMPTY
36136: ST_TO_ADDR
// for j in f do
36137: LD_ADDR_VAR 0 9
36141: PUSH
36142: LD_VAR 0 12
36146: PUSH
36147: FOR_IN
36148: IFFALSE 36221
// if GetBType ( j ) = b_bunker then
36150: LD_VAR 0 9
36154: PPUSH
36155: CALL_OW 266
36159: PUSH
36160: LD_INT 32
36162: EQUAL
36163: IFFALSE 36190
// tmp := Insert ( tmp , 1 , j ) else
36165: LD_ADDR_VAR 0 19
36169: PUSH
36170: LD_VAR 0 19
36174: PPUSH
36175: LD_INT 1
36177: PPUSH
36178: LD_VAR 0 9
36182: PPUSH
36183: CALL_OW 2
36187: ST_TO_ADDR
36188: GO 36219
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36190: LD_ADDR_VAR 0 19
36194: PUSH
36195: LD_VAR 0 19
36199: PPUSH
36200: LD_VAR 0 19
36204: PUSH
36205: LD_INT 1
36207: PLUS
36208: PPUSH
36209: LD_VAR 0 9
36213: PPUSH
36214: CALL_OW 2
36218: ST_TO_ADDR
36219: GO 36147
36221: POP
36222: POP
// if tmp then
36223: LD_VAR 0 19
36227: IFFALSE 36239
// f := tmp ;
36229: LD_ADDR_VAR 0 12
36233: PUSH
36234: LD_VAR 0 19
36238: ST_TO_ADDR
// end ; x := personel [ i ] ;
36239: LD_ADDR_VAR 0 13
36243: PUSH
36244: LD_VAR 0 6
36248: PUSH
36249: LD_VAR 0 8
36253: ARRAY
36254: ST_TO_ADDR
// if x = - 1 then
36255: LD_VAR 0 13
36259: PUSH
36260: LD_INT 1
36262: NEG
36263: EQUAL
36264: IFFALSE 36473
// begin for j in f do
36266: LD_ADDR_VAR 0 9
36270: PUSH
36271: LD_VAR 0 12
36275: PUSH
36276: FOR_IN
36277: IFFALSE 36469
// repeat InitHc ;
36279: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36283: LD_VAR 0 9
36287: PPUSH
36288: CALL_OW 266
36292: PUSH
36293: LD_INT 5
36295: EQUAL
36296: IFFALSE 36366
// begin if UnitsInside ( j ) < 3 then
36298: LD_VAR 0 9
36302: PPUSH
36303: CALL_OW 313
36307: PUSH
36308: LD_INT 3
36310: LESS
36311: IFFALSE 36347
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36313: LD_INT 0
36315: PPUSH
36316: LD_INT 5
36318: PUSH
36319: LD_INT 8
36321: PUSH
36322: LD_INT 9
36324: PUSH
36325: EMPTY
36326: LIST
36327: LIST
36328: LIST
36329: PUSH
36330: LD_VAR 0 17
36334: ARRAY
36335: PPUSH
36336: LD_VAR 0 4
36340: PPUSH
36341: CALL_OW 380
36345: GO 36364
// PrepareHuman ( false , i , skill ) ;
36347: LD_INT 0
36349: PPUSH
36350: LD_VAR 0 8
36354: PPUSH
36355: LD_VAR 0 4
36359: PPUSH
36360: CALL_OW 380
// end else
36364: GO 36383
// PrepareHuman ( false , i , skill ) ;
36366: LD_INT 0
36368: PPUSH
36369: LD_VAR 0 8
36373: PPUSH
36374: LD_VAR 0 4
36378: PPUSH
36379: CALL_OW 380
// un := CreateHuman ;
36383: LD_ADDR_VAR 0 14
36387: PUSH
36388: CALL_OW 44
36392: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36393: LD_ADDR_VAR 0 7
36397: PUSH
36398: LD_VAR 0 7
36402: PPUSH
36403: LD_INT 1
36405: PPUSH
36406: LD_VAR 0 14
36410: PPUSH
36411: CALL_OW 2
36415: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36416: LD_VAR 0 14
36420: PPUSH
36421: LD_VAR 0 9
36425: PPUSH
36426: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36430: LD_VAR 0 9
36434: PPUSH
36435: CALL_OW 313
36439: PUSH
36440: LD_INT 6
36442: EQUAL
36443: PUSH
36444: LD_VAR 0 9
36448: PPUSH
36449: CALL_OW 266
36453: PUSH
36454: LD_INT 32
36456: PUSH
36457: LD_INT 31
36459: PUSH
36460: EMPTY
36461: LIST
36462: LIST
36463: IN
36464: OR
36465: IFFALSE 36279
36467: GO 36276
36469: POP
36470: POP
// end else
36471: GO 36853
// for j = 1 to x do
36473: LD_ADDR_VAR 0 9
36477: PUSH
36478: DOUBLE
36479: LD_INT 1
36481: DEC
36482: ST_TO_ADDR
36483: LD_VAR 0 13
36487: PUSH
36488: FOR_TO
36489: IFFALSE 36851
// begin InitHc ;
36491: CALL_OW 19
// if not f then
36495: LD_VAR 0 12
36499: NOT
36500: IFFALSE 36589
// begin PrepareHuman ( false , i , skill ) ;
36502: LD_INT 0
36504: PPUSH
36505: LD_VAR 0 8
36509: PPUSH
36510: LD_VAR 0 4
36514: PPUSH
36515: CALL_OW 380
// un := CreateHuman ;
36519: LD_ADDR_VAR 0 14
36523: PUSH
36524: CALL_OW 44
36528: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36529: LD_ADDR_VAR 0 7
36533: PUSH
36534: LD_VAR 0 7
36538: PPUSH
36539: LD_INT 1
36541: PPUSH
36542: LD_VAR 0 14
36546: PPUSH
36547: CALL_OW 2
36551: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36552: LD_VAR 0 14
36556: PPUSH
36557: LD_VAR 0 1
36561: PPUSH
36562: CALL_OW 250
36566: PPUSH
36567: LD_VAR 0 1
36571: PPUSH
36572: CALL_OW 251
36576: PPUSH
36577: LD_INT 10
36579: PPUSH
36580: LD_INT 0
36582: PPUSH
36583: CALL_OW 50
// continue ;
36587: GO 36488
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36589: LD_VAR 0 12
36593: PUSH
36594: LD_INT 1
36596: ARRAY
36597: PPUSH
36598: CALL_OW 313
36602: PUSH
36603: LD_VAR 0 12
36607: PUSH
36608: LD_INT 1
36610: ARRAY
36611: PPUSH
36612: CALL_OW 266
36616: PUSH
36617: LD_INT 32
36619: PUSH
36620: LD_INT 31
36622: PUSH
36623: EMPTY
36624: LIST
36625: LIST
36626: IN
36627: AND
36628: PUSH
36629: LD_VAR 0 12
36633: PUSH
36634: LD_INT 1
36636: ARRAY
36637: PPUSH
36638: CALL_OW 313
36642: PUSH
36643: LD_INT 6
36645: EQUAL
36646: OR
36647: IFFALSE 36667
// f := Delete ( f , 1 ) ;
36649: LD_ADDR_VAR 0 12
36653: PUSH
36654: LD_VAR 0 12
36658: PPUSH
36659: LD_INT 1
36661: PPUSH
36662: CALL_OW 3
36666: ST_TO_ADDR
// if not f then
36667: LD_VAR 0 12
36671: NOT
36672: IFFALSE 36690
// begin x := x + 2 ;
36674: LD_ADDR_VAR 0 13
36678: PUSH
36679: LD_VAR 0 13
36683: PUSH
36684: LD_INT 2
36686: PLUS
36687: ST_TO_ADDR
// continue ;
36688: GO 36488
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36690: LD_VAR 0 12
36694: PUSH
36695: LD_INT 1
36697: ARRAY
36698: PPUSH
36699: CALL_OW 266
36703: PUSH
36704: LD_INT 5
36706: EQUAL
36707: IFFALSE 36781
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36709: LD_VAR 0 12
36713: PUSH
36714: LD_INT 1
36716: ARRAY
36717: PPUSH
36718: CALL_OW 313
36722: PUSH
36723: LD_INT 3
36725: LESS
36726: IFFALSE 36762
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36728: LD_INT 0
36730: PPUSH
36731: LD_INT 5
36733: PUSH
36734: LD_INT 8
36736: PUSH
36737: LD_INT 9
36739: PUSH
36740: EMPTY
36741: LIST
36742: LIST
36743: LIST
36744: PUSH
36745: LD_VAR 0 17
36749: ARRAY
36750: PPUSH
36751: LD_VAR 0 4
36755: PPUSH
36756: CALL_OW 380
36760: GO 36779
// PrepareHuman ( false , i , skill ) ;
36762: LD_INT 0
36764: PPUSH
36765: LD_VAR 0 8
36769: PPUSH
36770: LD_VAR 0 4
36774: PPUSH
36775: CALL_OW 380
// end else
36779: GO 36798
// PrepareHuman ( false , i , skill ) ;
36781: LD_INT 0
36783: PPUSH
36784: LD_VAR 0 8
36788: PPUSH
36789: LD_VAR 0 4
36793: PPUSH
36794: CALL_OW 380
// un := CreateHuman ;
36798: LD_ADDR_VAR 0 14
36802: PUSH
36803: CALL_OW 44
36807: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36808: LD_ADDR_VAR 0 7
36812: PUSH
36813: LD_VAR 0 7
36817: PPUSH
36818: LD_INT 1
36820: PPUSH
36821: LD_VAR 0 14
36825: PPUSH
36826: CALL_OW 2
36830: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
36831: LD_VAR 0 14
36835: PPUSH
36836: LD_VAR 0 12
36840: PUSH
36841: LD_INT 1
36843: ARRAY
36844: PPUSH
36845: CALL_OW 52
// end ;
36849: GO 36488
36851: POP
36852: POP
// end ;
36853: GO 35790
36855: POP
36856: POP
// result := result ^ buildings ;
36857: LD_ADDR_VAR 0 7
36861: PUSH
36862: LD_VAR 0 7
36866: PUSH
36867: LD_VAR 0 18
36871: ADD
36872: ST_TO_ADDR
// end else
36873: GO 37016
// begin for i = 1 to personel do
36875: LD_ADDR_VAR 0 8
36879: PUSH
36880: DOUBLE
36881: LD_INT 1
36883: DEC
36884: ST_TO_ADDR
36885: LD_VAR 0 6
36889: PUSH
36890: FOR_TO
36891: IFFALSE 37014
// begin if i > 4 then
36893: LD_VAR 0 8
36897: PUSH
36898: LD_INT 4
36900: GREATER
36901: IFFALSE 36905
// break ;
36903: GO 37014
// x := personel [ i ] ;
36905: LD_ADDR_VAR 0 13
36909: PUSH
36910: LD_VAR 0 6
36914: PUSH
36915: LD_VAR 0 8
36919: ARRAY
36920: ST_TO_ADDR
// if x = - 1 then
36921: LD_VAR 0 13
36925: PUSH
36926: LD_INT 1
36928: NEG
36929: EQUAL
36930: IFFALSE 36934
// continue ;
36932: GO 36890
// PrepareHuman ( false , i , skill ) ;
36934: LD_INT 0
36936: PPUSH
36937: LD_VAR 0 8
36941: PPUSH
36942: LD_VAR 0 4
36946: PPUSH
36947: CALL_OW 380
// un := CreateHuman ;
36951: LD_ADDR_VAR 0 14
36955: PUSH
36956: CALL_OW 44
36960: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36961: LD_VAR 0 14
36965: PPUSH
36966: LD_VAR 0 1
36970: PPUSH
36971: CALL_OW 250
36975: PPUSH
36976: LD_VAR 0 1
36980: PPUSH
36981: CALL_OW 251
36985: PPUSH
36986: LD_INT 10
36988: PPUSH
36989: LD_INT 0
36991: PPUSH
36992: CALL_OW 50
// result := result ^ un ;
36996: LD_ADDR_VAR 0 7
37000: PUSH
37001: LD_VAR 0 7
37005: PUSH
37006: LD_VAR 0 14
37010: ADD
37011: ST_TO_ADDR
// end ;
37012: GO 36890
37014: POP
37015: POP
// end ; end ;
37016: LD_VAR 0 7
37020: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37021: LD_INT 0
37023: PPUSH
37024: PPUSH
37025: PPUSH
37026: PPUSH
37027: PPUSH
37028: PPUSH
37029: PPUSH
37030: PPUSH
37031: PPUSH
37032: PPUSH
37033: PPUSH
37034: PPUSH
37035: PPUSH
37036: PPUSH
37037: PPUSH
37038: PPUSH
// result := false ;
37039: LD_ADDR_VAR 0 3
37043: PUSH
37044: LD_INT 0
37046: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
37047: LD_VAR 0 1
37051: NOT
37052: PUSH
37053: LD_VAR 0 1
37057: PPUSH
37058: CALL_OW 266
37062: PUSH
37063: LD_INT 32
37065: PUSH
37066: LD_INT 33
37068: PUSH
37069: EMPTY
37070: LIST
37071: LIST
37072: IN
37073: NOT
37074: OR
37075: IFFALSE 37079
// exit ;
37077: GO 38188
// nat := GetNation ( tower ) ;
37079: LD_ADDR_VAR 0 12
37083: PUSH
37084: LD_VAR 0 1
37088: PPUSH
37089: CALL_OW 248
37093: ST_TO_ADDR
// side := GetSide ( tower ) ;
37094: LD_ADDR_VAR 0 16
37098: PUSH
37099: LD_VAR 0 1
37103: PPUSH
37104: CALL_OW 255
37108: ST_TO_ADDR
// x := GetX ( tower ) ;
37109: LD_ADDR_VAR 0 10
37113: PUSH
37114: LD_VAR 0 1
37118: PPUSH
37119: CALL_OW 250
37123: ST_TO_ADDR
// y := GetY ( tower ) ;
37124: LD_ADDR_VAR 0 11
37128: PUSH
37129: LD_VAR 0 1
37133: PPUSH
37134: CALL_OW 251
37138: ST_TO_ADDR
// if not x or not y then
37139: LD_VAR 0 10
37143: NOT
37144: PUSH
37145: LD_VAR 0 11
37149: NOT
37150: OR
37151: IFFALSE 37155
// exit ;
37153: GO 38188
// weapon := 0 ;
37155: LD_ADDR_VAR 0 18
37159: PUSH
37160: LD_INT 0
37162: ST_TO_ADDR
// fac_list := [ ] ;
37163: LD_ADDR_VAR 0 17
37167: PUSH
37168: EMPTY
37169: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
37170: LD_ADDR_VAR 0 6
37174: PUSH
37175: LD_VAR 0 1
37179: PPUSH
37180: CALL_OW 274
37184: PPUSH
37185: LD_VAR 0 2
37189: PPUSH
37190: LD_INT 0
37192: PPUSH
37193: CALL 34759 0 3
37197: PPUSH
37198: LD_INT 30
37200: PUSH
37201: LD_INT 3
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: PPUSH
37208: CALL_OW 72
37212: ST_TO_ADDR
// if not factories then
37213: LD_VAR 0 6
37217: NOT
37218: IFFALSE 37222
// exit ;
37220: GO 38188
// for i in factories do
37222: LD_ADDR_VAR 0 8
37226: PUSH
37227: LD_VAR 0 6
37231: PUSH
37232: FOR_IN
37233: IFFALSE 37258
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37235: LD_ADDR_VAR 0 17
37239: PUSH
37240: LD_VAR 0 17
37244: PUSH
37245: LD_VAR 0 8
37249: PPUSH
37250: CALL_OW 478
37254: UNION
37255: ST_TO_ADDR
37256: GO 37232
37258: POP
37259: POP
// if not fac_list then
37260: LD_VAR 0 17
37264: NOT
37265: IFFALSE 37269
// exit ;
37267: GO 38188
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37269: LD_ADDR_VAR 0 5
37273: PUSH
37274: LD_INT 4
37276: PUSH
37277: LD_INT 5
37279: PUSH
37280: LD_INT 9
37282: PUSH
37283: LD_INT 10
37285: PUSH
37286: LD_INT 6
37288: PUSH
37289: LD_INT 7
37291: PUSH
37292: LD_INT 11
37294: PUSH
37295: EMPTY
37296: LIST
37297: LIST
37298: LIST
37299: LIST
37300: LIST
37301: LIST
37302: LIST
37303: PUSH
37304: LD_INT 27
37306: PUSH
37307: LD_INT 28
37309: PUSH
37310: LD_INT 26
37312: PUSH
37313: LD_INT 30
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: LIST
37320: LIST
37321: PUSH
37322: LD_INT 43
37324: PUSH
37325: LD_INT 44
37327: PUSH
37328: LD_INT 46
37330: PUSH
37331: LD_INT 45
37333: PUSH
37334: LD_INT 47
37336: PUSH
37337: LD_INT 49
37339: PUSH
37340: EMPTY
37341: LIST
37342: LIST
37343: LIST
37344: LIST
37345: LIST
37346: LIST
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: LIST
37352: PUSH
37353: LD_VAR 0 12
37357: ARRAY
37358: ST_TO_ADDR
// list := list isect fac_list ;
37359: LD_ADDR_VAR 0 5
37363: PUSH
37364: LD_VAR 0 5
37368: PUSH
37369: LD_VAR 0 17
37373: ISECT
37374: ST_TO_ADDR
// if not list then
37375: LD_VAR 0 5
37379: NOT
37380: IFFALSE 37384
// exit ;
37382: GO 38188
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37384: LD_VAR 0 12
37388: PUSH
37389: LD_INT 3
37391: EQUAL
37392: PUSH
37393: LD_INT 49
37395: PUSH
37396: LD_VAR 0 5
37400: IN
37401: AND
37402: PUSH
37403: LD_INT 31
37405: PPUSH
37406: LD_VAR 0 16
37410: PPUSH
37411: CALL_OW 321
37415: PUSH
37416: LD_INT 2
37418: EQUAL
37419: AND
37420: IFFALSE 37480
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37422: LD_INT 22
37424: PUSH
37425: LD_VAR 0 16
37429: PUSH
37430: EMPTY
37431: LIST
37432: LIST
37433: PUSH
37434: LD_INT 35
37436: PUSH
37437: LD_INT 49
37439: PUSH
37440: EMPTY
37441: LIST
37442: LIST
37443: PUSH
37444: LD_INT 91
37446: PUSH
37447: LD_VAR 0 1
37451: PUSH
37452: LD_INT 10
37454: PUSH
37455: EMPTY
37456: LIST
37457: LIST
37458: LIST
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: LIST
37464: PPUSH
37465: CALL_OW 69
37469: NOT
37470: IFFALSE 37480
// weapon := ru_time_lapser ;
37472: LD_ADDR_VAR 0 18
37476: PUSH
37477: LD_INT 49
37479: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37480: LD_VAR 0 12
37484: PUSH
37485: LD_INT 1
37487: PUSH
37488: LD_INT 2
37490: PUSH
37491: EMPTY
37492: LIST
37493: LIST
37494: IN
37495: PUSH
37496: LD_INT 11
37498: PUSH
37499: LD_VAR 0 5
37503: IN
37504: PUSH
37505: LD_INT 30
37507: PUSH
37508: LD_VAR 0 5
37512: IN
37513: OR
37514: AND
37515: PUSH
37516: LD_INT 6
37518: PPUSH
37519: LD_VAR 0 16
37523: PPUSH
37524: CALL_OW 321
37528: PUSH
37529: LD_INT 2
37531: EQUAL
37532: AND
37533: IFFALSE 37698
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37535: LD_INT 22
37537: PUSH
37538: LD_VAR 0 16
37542: PUSH
37543: EMPTY
37544: LIST
37545: LIST
37546: PUSH
37547: LD_INT 2
37549: PUSH
37550: LD_INT 35
37552: PUSH
37553: LD_INT 11
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: PUSH
37560: LD_INT 35
37562: PUSH
37563: LD_INT 30
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: LIST
37574: PUSH
37575: LD_INT 91
37577: PUSH
37578: LD_VAR 0 1
37582: PUSH
37583: LD_INT 18
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: LIST
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: LIST
37595: PPUSH
37596: CALL_OW 69
37600: NOT
37601: PUSH
37602: LD_INT 22
37604: PUSH
37605: LD_VAR 0 16
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PUSH
37614: LD_INT 2
37616: PUSH
37617: LD_INT 30
37619: PUSH
37620: LD_INT 32
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: PUSH
37627: LD_INT 30
37629: PUSH
37630: LD_INT 33
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: PUSH
37637: EMPTY
37638: LIST
37639: LIST
37640: LIST
37641: PUSH
37642: LD_INT 91
37644: PUSH
37645: LD_VAR 0 1
37649: PUSH
37650: LD_INT 12
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: LIST
37657: PUSH
37658: EMPTY
37659: LIST
37660: LIST
37661: LIST
37662: PUSH
37663: EMPTY
37664: LIST
37665: PPUSH
37666: CALL_OW 69
37670: PUSH
37671: LD_INT 2
37673: GREATER
37674: AND
37675: IFFALSE 37698
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37677: LD_ADDR_VAR 0 18
37681: PUSH
37682: LD_INT 11
37684: PUSH
37685: LD_INT 30
37687: PUSH
37688: EMPTY
37689: LIST
37690: LIST
37691: PUSH
37692: LD_VAR 0 12
37696: ARRAY
37697: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37698: LD_VAR 0 18
37702: NOT
37703: PUSH
37704: LD_INT 40
37706: PPUSH
37707: LD_VAR 0 16
37711: PPUSH
37712: CALL_OW 321
37716: PUSH
37717: LD_INT 2
37719: EQUAL
37720: AND
37721: PUSH
37722: LD_INT 7
37724: PUSH
37725: LD_VAR 0 5
37729: IN
37730: PUSH
37731: LD_INT 28
37733: PUSH
37734: LD_VAR 0 5
37738: IN
37739: OR
37740: PUSH
37741: LD_INT 45
37743: PUSH
37744: LD_VAR 0 5
37748: IN
37749: OR
37750: AND
37751: IFFALSE 38005
// begin hex := GetHexInfo ( x , y ) ;
37753: LD_ADDR_VAR 0 4
37757: PUSH
37758: LD_VAR 0 10
37762: PPUSH
37763: LD_VAR 0 11
37767: PPUSH
37768: CALL_OW 546
37772: ST_TO_ADDR
// if hex [ 1 ] then
37773: LD_VAR 0 4
37777: PUSH
37778: LD_INT 1
37780: ARRAY
37781: IFFALSE 37785
// exit ;
37783: GO 38188
// height := hex [ 2 ] ;
37785: LD_ADDR_VAR 0 15
37789: PUSH
37790: LD_VAR 0 4
37794: PUSH
37795: LD_INT 2
37797: ARRAY
37798: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
37799: LD_ADDR_VAR 0 14
37803: PUSH
37804: LD_INT 0
37806: PUSH
37807: LD_INT 2
37809: PUSH
37810: LD_INT 3
37812: PUSH
37813: LD_INT 5
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: LIST
37820: LIST
37821: ST_TO_ADDR
// for i in tmp do
37822: LD_ADDR_VAR 0 8
37826: PUSH
37827: LD_VAR 0 14
37831: PUSH
37832: FOR_IN
37833: IFFALSE 38003
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
37835: LD_ADDR_VAR 0 9
37839: PUSH
37840: LD_VAR 0 10
37844: PPUSH
37845: LD_VAR 0 8
37849: PPUSH
37850: LD_INT 5
37852: PPUSH
37853: CALL_OW 272
37857: PUSH
37858: LD_VAR 0 11
37862: PPUSH
37863: LD_VAR 0 8
37867: PPUSH
37868: LD_INT 5
37870: PPUSH
37871: CALL_OW 273
37875: PUSH
37876: EMPTY
37877: LIST
37878: LIST
37879: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
37880: LD_VAR 0 9
37884: PUSH
37885: LD_INT 1
37887: ARRAY
37888: PPUSH
37889: LD_VAR 0 9
37893: PUSH
37894: LD_INT 2
37896: ARRAY
37897: PPUSH
37898: CALL_OW 488
37902: IFFALSE 38001
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
37904: LD_ADDR_VAR 0 4
37908: PUSH
37909: LD_VAR 0 9
37913: PUSH
37914: LD_INT 1
37916: ARRAY
37917: PPUSH
37918: LD_VAR 0 9
37922: PUSH
37923: LD_INT 2
37925: ARRAY
37926: PPUSH
37927: CALL_OW 546
37931: ST_TO_ADDR
// if hex [ 1 ] then
37932: LD_VAR 0 4
37936: PUSH
37937: LD_INT 1
37939: ARRAY
37940: IFFALSE 37944
// continue ;
37942: GO 37832
// h := hex [ 2 ] ;
37944: LD_ADDR_VAR 0 13
37948: PUSH
37949: LD_VAR 0 4
37953: PUSH
37954: LD_INT 2
37956: ARRAY
37957: ST_TO_ADDR
// if h + 7 < height then
37958: LD_VAR 0 13
37962: PUSH
37963: LD_INT 7
37965: PLUS
37966: PUSH
37967: LD_VAR 0 15
37971: LESS
37972: IFFALSE 38001
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
37974: LD_ADDR_VAR 0 18
37978: PUSH
37979: LD_INT 7
37981: PUSH
37982: LD_INT 28
37984: PUSH
37985: LD_INT 45
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: LIST
37992: PUSH
37993: LD_VAR 0 12
37997: ARRAY
37998: ST_TO_ADDR
// break ;
37999: GO 38003
// end ; end ; end ;
38001: GO 37832
38003: POP
38004: POP
// end ; if not weapon then
38005: LD_VAR 0 18
38009: NOT
38010: IFFALSE 38070
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
38012: LD_ADDR_VAR 0 5
38016: PUSH
38017: LD_VAR 0 5
38021: PUSH
38022: LD_INT 11
38024: PUSH
38025: LD_INT 30
38027: PUSH
38028: LD_INT 49
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: LIST
38035: DIFF
38036: ST_TO_ADDR
// if not list then
38037: LD_VAR 0 5
38041: NOT
38042: IFFALSE 38046
// exit ;
38044: GO 38188
// weapon := list [ rand ( 1 , list ) ] ;
38046: LD_ADDR_VAR 0 18
38050: PUSH
38051: LD_VAR 0 5
38055: PUSH
38056: LD_INT 1
38058: PPUSH
38059: LD_VAR 0 5
38063: PPUSH
38064: CALL_OW 12
38068: ARRAY
38069: ST_TO_ADDR
// end ; if weapon then
38070: LD_VAR 0 18
38074: IFFALSE 38188
// begin tmp := CostOfWeapon ( weapon ) ;
38076: LD_ADDR_VAR 0 14
38080: PUSH
38081: LD_VAR 0 18
38085: PPUSH
38086: CALL_OW 451
38090: ST_TO_ADDR
// j := GetBase ( tower ) ;
38091: LD_ADDR_VAR 0 9
38095: PUSH
38096: LD_VAR 0 1
38100: PPUSH
38101: CALL_OW 274
38105: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
38106: LD_VAR 0 9
38110: PPUSH
38111: LD_INT 1
38113: PPUSH
38114: CALL_OW 275
38118: PUSH
38119: LD_VAR 0 14
38123: PUSH
38124: LD_INT 1
38126: ARRAY
38127: GREATEREQUAL
38128: PUSH
38129: LD_VAR 0 9
38133: PPUSH
38134: LD_INT 2
38136: PPUSH
38137: CALL_OW 275
38141: PUSH
38142: LD_VAR 0 14
38146: PUSH
38147: LD_INT 2
38149: ARRAY
38150: GREATEREQUAL
38151: AND
38152: PUSH
38153: LD_VAR 0 9
38157: PPUSH
38158: LD_INT 3
38160: PPUSH
38161: CALL_OW 275
38165: PUSH
38166: LD_VAR 0 14
38170: PUSH
38171: LD_INT 3
38173: ARRAY
38174: GREATEREQUAL
38175: AND
38176: IFFALSE 38188
// result := weapon ;
38178: LD_ADDR_VAR 0 3
38182: PUSH
38183: LD_VAR 0 18
38187: ST_TO_ADDR
// end ; end ;
38188: LD_VAR 0 3
38192: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38193: LD_INT 0
38195: PPUSH
38196: PPUSH
// result := true ;
38197: LD_ADDR_VAR 0 3
38201: PUSH
38202: LD_INT 1
38204: ST_TO_ADDR
// if array1 = array2 then
38205: LD_VAR 0 1
38209: PUSH
38210: LD_VAR 0 2
38214: EQUAL
38215: IFFALSE 38275
// begin for i = 1 to array1 do
38217: LD_ADDR_VAR 0 4
38221: PUSH
38222: DOUBLE
38223: LD_INT 1
38225: DEC
38226: ST_TO_ADDR
38227: LD_VAR 0 1
38231: PUSH
38232: FOR_TO
38233: IFFALSE 38271
// if array1 [ i ] <> array2 [ i ] then
38235: LD_VAR 0 1
38239: PUSH
38240: LD_VAR 0 4
38244: ARRAY
38245: PUSH
38246: LD_VAR 0 2
38250: PUSH
38251: LD_VAR 0 4
38255: ARRAY
38256: NONEQUAL
38257: IFFALSE 38269
// begin result := false ;
38259: LD_ADDR_VAR 0 3
38263: PUSH
38264: LD_INT 0
38266: ST_TO_ADDR
// break ;
38267: GO 38271
// end ;
38269: GO 38232
38271: POP
38272: POP
// end else
38273: GO 38283
// result := false ;
38275: LD_ADDR_VAR 0 3
38279: PUSH
38280: LD_INT 0
38282: ST_TO_ADDR
// end ;
38283: LD_VAR 0 3
38287: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38288: LD_INT 0
38290: PPUSH
38291: PPUSH
// if not array1 or not array2 then
38292: LD_VAR 0 1
38296: NOT
38297: PUSH
38298: LD_VAR 0 2
38302: NOT
38303: OR
38304: IFFALSE 38308
// exit ;
38306: GO 38372
// result := true ;
38308: LD_ADDR_VAR 0 3
38312: PUSH
38313: LD_INT 1
38315: ST_TO_ADDR
// for i = 1 to array1 do
38316: LD_ADDR_VAR 0 4
38320: PUSH
38321: DOUBLE
38322: LD_INT 1
38324: DEC
38325: ST_TO_ADDR
38326: LD_VAR 0 1
38330: PUSH
38331: FOR_TO
38332: IFFALSE 38370
// if array1 [ i ] <> array2 [ i ] then
38334: LD_VAR 0 1
38338: PUSH
38339: LD_VAR 0 4
38343: ARRAY
38344: PUSH
38345: LD_VAR 0 2
38349: PUSH
38350: LD_VAR 0 4
38354: ARRAY
38355: NONEQUAL
38356: IFFALSE 38368
// begin result := false ;
38358: LD_ADDR_VAR 0 3
38362: PUSH
38363: LD_INT 0
38365: ST_TO_ADDR
// break ;
38366: GO 38370
// end ;
38368: GO 38331
38370: POP
38371: POP
// end ;
38372: LD_VAR 0 3
38376: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38377: LD_INT 0
38379: PPUSH
38380: PPUSH
38381: PPUSH
// pom := GetBase ( fac ) ;
38382: LD_ADDR_VAR 0 5
38386: PUSH
38387: LD_VAR 0 1
38391: PPUSH
38392: CALL_OW 274
38396: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38397: LD_ADDR_VAR 0 4
38401: PUSH
38402: LD_VAR 0 2
38406: PUSH
38407: LD_INT 1
38409: ARRAY
38410: PPUSH
38411: LD_VAR 0 2
38415: PUSH
38416: LD_INT 2
38418: ARRAY
38419: PPUSH
38420: LD_VAR 0 2
38424: PUSH
38425: LD_INT 3
38427: ARRAY
38428: PPUSH
38429: LD_VAR 0 2
38433: PUSH
38434: LD_INT 4
38436: ARRAY
38437: PPUSH
38438: CALL_OW 449
38442: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38443: LD_ADDR_VAR 0 3
38447: PUSH
38448: LD_VAR 0 5
38452: PPUSH
38453: LD_INT 1
38455: PPUSH
38456: CALL_OW 275
38460: PUSH
38461: LD_VAR 0 4
38465: PUSH
38466: LD_INT 1
38468: ARRAY
38469: GREATEREQUAL
38470: PUSH
38471: LD_VAR 0 5
38475: PPUSH
38476: LD_INT 2
38478: PPUSH
38479: CALL_OW 275
38483: PUSH
38484: LD_VAR 0 4
38488: PUSH
38489: LD_INT 2
38491: ARRAY
38492: GREATEREQUAL
38493: AND
38494: PUSH
38495: LD_VAR 0 5
38499: PPUSH
38500: LD_INT 3
38502: PPUSH
38503: CALL_OW 275
38507: PUSH
38508: LD_VAR 0 4
38512: PUSH
38513: LD_INT 3
38515: ARRAY
38516: GREATEREQUAL
38517: AND
38518: ST_TO_ADDR
// end ;
38519: LD_VAR 0 3
38523: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38524: LD_INT 0
38526: PPUSH
38527: PPUSH
38528: PPUSH
38529: PPUSH
// pom := GetBase ( building ) ;
38530: LD_ADDR_VAR 0 3
38534: PUSH
38535: LD_VAR 0 1
38539: PPUSH
38540: CALL_OW 274
38544: ST_TO_ADDR
// if not pom then
38545: LD_VAR 0 3
38549: NOT
38550: IFFALSE 38554
// exit ;
38552: GO 38724
// btype := GetBType ( building ) ;
38554: LD_ADDR_VAR 0 5
38558: PUSH
38559: LD_VAR 0 1
38563: PPUSH
38564: CALL_OW 266
38568: ST_TO_ADDR
// if btype = b_armoury then
38569: LD_VAR 0 5
38573: PUSH
38574: LD_INT 4
38576: EQUAL
38577: IFFALSE 38587
// btype := b_barracks ;
38579: LD_ADDR_VAR 0 5
38583: PUSH
38584: LD_INT 5
38586: ST_TO_ADDR
// if btype = b_depot then
38587: LD_VAR 0 5
38591: PUSH
38592: LD_INT 0
38594: EQUAL
38595: IFFALSE 38605
// btype := b_warehouse ;
38597: LD_ADDR_VAR 0 5
38601: PUSH
38602: LD_INT 1
38604: ST_TO_ADDR
// if btype = b_workshop then
38605: LD_VAR 0 5
38609: PUSH
38610: LD_INT 2
38612: EQUAL
38613: IFFALSE 38623
// btype := b_factory ;
38615: LD_ADDR_VAR 0 5
38619: PUSH
38620: LD_INT 3
38622: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38623: LD_ADDR_VAR 0 4
38627: PUSH
38628: LD_VAR 0 5
38632: PPUSH
38633: LD_VAR 0 1
38637: PPUSH
38638: CALL_OW 248
38642: PPUSH
38643: CALL_OW 450
38647: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38648: LD_ADDR_VAR 0 2
38652: PUSH
38653: LD_VAR 0 3
38657: PPUSH
38658: LD_INT 1
38660: PPUSH
38661: CALL_OW 275
38665: PUSH
38666: LD_VAR 0 4
38670: PUSH
38671: LD_INT 1
38673: ARRAY
38674: GREATEREQUAL
38675: PUSH
38676: LD_VAR 0 3
38680: PPUSH
38681: LD_INT 2
38683: PPUSH
38684: CALL_OW 275
38688: PUSH
38689: LD_VAR 0 4
38693: PUSH
38694: LD_INT 2
38696: ARRAY
38697: GREATEREQUAL
38698: AND
38699: PUSH
38700: LD_VAR 0 3
38704: PPUSH
38705: LD_INT 3
38707: PPUSH
38708: CALL_OW 275
38712: PUSH
38713: LD_VAR 0 4
38717: PUSH
38718: LD_INT 3
38720: ARRAY
38721: GREATEREQUAL
38722: AND
38723: ST_TO_ADDR
// end ;
38724: LD_VAR 0 2
38728: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38729: LD_INT 0
38731: PPUSH
38732: PPUSH
38733: PPUSH
// pom := GetBase ( building ) ;
38734: LD_ADDR_VAR 0 4
38738: PUSH
38739: LD_VAR 0 1
38743: PPUSH
38744: CALL_OW 274
38748: ST_TO_ADDR
// if not pom then
38749: LD_VAR 0 4
38753: NOT
38754: IFFALSE 38758
// exit ;
38756: GO 38859
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38758: LD_ADDR_VAR 0 5
38762: PUSH
38763: LD_VAR 0 2
38767: PPUSH
38768: LD_VAR 0 1
38772: PPUSH
38773: CALL_OW 248
38777: PPUSH
38778: CALL_OW 450
38782: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38783: LD_ADDR_VAR 0 3
38787: PUSH
38788: LD_VAR 0 4
38792: PPUSH
38793: LD_INT 1
38795: PPUSH
38796: CALL_OW 275
38800: PUSH
38801: LD_VAR 0 5
38805: PUSH
38806: LD_INT 1
38808: ARRAY
38809: GREATEREQUAL
38810: PUSH
38811: LD_VAR 0 4
38815: PPUSH
38816: LD_INT 2
38818: PPUSH
38819: CALL_OW 275
38823: PUSH
38824: LD_VAR 0 5
38828: PUSH
38829: LD_INT 2
38831: ARRAY
38832: GREATEREQUAL
38833: AND
38834: PUSH
38835: LD_VAR 0 4
38839: PPUSH
38840: LD_INT 3
38842: PPUSH
38843: CALL_OW 275
38847: PUSH
38848: LD_VAR 0 5
38852: PUSH
38853: LD_INT 3
38855: ARRAY
38856: GREATEREQUAL
38857: AND
38858: ST_TO_ADDR
// end ;
38859: LD_VAR 0 3
38863: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
38864: LD_INT 0
38866: PPUSH
38867: PPUSH
38868: PPUSH
38869: PPUSH
38870: PPUSH
38871: PPUSH
38872: PPUSH
38873: PPUSH
38874: PPUSH
38875: PPUSH
38876: PPUSH
// result := false ;
38877: LD_ADDR_VAR 0 8
38881: PUSH
38882: LD_INT 0
38884: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
38885: LD_VAR 0 5
38889: NOT
38890: PUSH
38891: LD_VAR 0 1
38895: NOT
38896: OR
38897: PUSH
38898: LD_VAR 0 2
38902: NOT
38903: OR
38904: PUSH
38905: LD_VAR 0 3
38909: NOT
38910: OR
38911: IFFALSE 38915
// exit ;
38913: GO 39729
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
38915: LD_ADDR_VAR 0 14
38919: PUSH
38920: LD_VAR 0 1
38924: PPUSH
38925: LD_VAR 0 2
38929: PPUSH
38930: LD_VAR 0 3
38934: PPUSH
38935: LD_VAR 0 4
38939: PPUSH
38940: LD_VAR 0 5
38944: PUSH
38945: LD_INT 1
38947: ARRAY
38948: PPUSH
38949: CALL_OW 248
38953: PPUSH
38954: LD_INT 0
38956: PPUSH
38957: CALL 40962 0 6
38961: ST_TO_ADDR
// if not hexes then
38962: LD_VAR 0 14
38966: NOT
38967: IFFALSE 38971
// exit ;
38969: GO 39729
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38971: LD_ADDR_VAR 0 17
38975: PUSH
38976: LD_VAR 0 5
38980: PPUSH
38981: LD_INT 22
38983: PUSH
38984: LD_VAR 0 13
38988: PPUSH
38989: CALL_OW 255
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: PUSH
38998: LD_INT 2
39000: PUSH
39001: LD_INT 30
39003: PUSH
39004: LD_INT 0
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: PUSH
39011: LD_INT 30
39013: PUSH
39014: LD_INT 1
39016: PUSH
39017: EMPTY
39018: LIST
39019: LIST
39020: PUSH
39021: EMPTY
39022: LIST
39023: LIST
39024: LIST
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: PPUSH
39030: CALL_OW 72
39034: ST_TO_ADDR
// for i = 1 to hexes do
39035: LD_ADDR_VAR 0 9
39039: PUSH
39040: DOUBLE
39041: LD_INT 1
39043: DEC
39044: ST_TO_ADDR
39045: LD_VAR 0 14
39049: PUSH
39050: FOR_TO
39051: IFFALSE 39727
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39053: LD_ADDR_VAR 0 13
39057: PUSH
39058: LD_VAR 0 14
39062: PUSH
39063: LD_VAR 0 9
39067: ARRAY
39068: PUSH
39069: LD_INT 1
39071: ARRAY
39072: PPUSH
39073: LD_VAR 0 14
39077: PUSH
39078: LD_VAR 0 9
39082: ARRAY
39083: PUSH
39084: LD_INT 2
39086: ARRAY
39087: PPUSH
39088: CALL_OW 428
39092: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
39093: LD_VAR 0 14
39097: PUSH
39098: LD_VAR 0 9
39102: ARRAY
39103: PUSH
39104: LD_INT 1
39106: ARRAY
39107: PPUSH
39108: LD_VAR 0 14
39112: PUSH
39113: LD_VAR 0 9
39117: ARRAY
39118: PUSH
39119: LD_INT 2
39121: ARRAY
39122: PPUSH
39123: CALL_OW 351
39127: PUSH
39128: LD_VAR 0 14
39132: PUSH
39133: LD_VAR 0 9
39137: ARRAY
39138: PUSH
39139: LD_INT 1
39141: ARRAY
39142: PPUSH
39143: LD_VAR 0 14
39147: PUSH
39148: LD_VAR 0 9
39152: ARRAY
39153: PUSH
39154: LD_INT 2
39156: ARRAY
39157: PPUSH
39158: CALL_OW 488
39162: NOT
39163: OR
39164: PUSH
39165: LD_VAR 0 13
39169: PPUSH
39170: CALL_OW 247
39174: PUSH
39175: LD_INT 3
39177: EQUAL
39178: OR
39179: IFFALSE 39185
// exit ;
39181: POP
39182: POP
39183: GO 39729
// if not tmp then
39185: LD_VAR 0 13
39189: NOT
39190: IFFALSE 39194
// continue ;
39192: GO 39050
// result := true ;
39194: LD_ADDR_VAR 0 8
39198: PUSH
39199: LD_INT 1
39201: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
39202: LD_VAR 0 6
39206: PUSH
39207: LD_VAR 0 13
39211: PPUSH
39212: CALL_OW 247
39216: PUSH
39217: LD_INT 2
39219: EQUAL
39220: AND
39221: PUSH
39222: LD_VAR 0 13
39226: PPUSH
39227: CALL_OW 263
39231: PUSH
39232: LD_INT 1
39234: EQUAL
39235: AND
39236: IFFALSE 39400
// begin if IsDrivenBy ( tmp ) then
39238: LD_VAR 0 13
39242: PPUSH
39243: CALL_OW 311
39247: IFFALSE 39251
// continue ;
39249: GO 39050
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
39251: LD_VAR 0 6
39255: PPUSH
39256: LD_INT 3
39258: PUSH
39259: LD_INT 60
39261: PUSH
39262: EMPTY
39263: LIST
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: PUSH
39269: LD_INT 3
39271: PUSH
39272: LD_INT 55
39274: PUSH
39275: EMPTY
39276: LIST
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: PPUSH
39286: CALL_OW 72
39290: IFFALSE 39398
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39292: LD_ADDR_VAR 0 18
39296: PUSH
39297: LD_VAR 0 6
39301: PPUSH
39302: LD_INT 3
39304: PUSH
39305: LD_INT 60
39307: PUSH
39308: EMPTY
39309: LIST
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PUSH
39315: LD_INT 3
39317: PUSH
39318: LD_INT 55
39320: PUSH
39321: EMPTY
39322: LIST
39323: PUSH
39324: EMPTY
39325: LIST
39326: LIST
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: PPUSH
39332: CALL_OW 72
39336: PUSH
39337: LD_INT 1
39339: ARRAY
39340: ST_TO_ADDR
// if IsInUnit ( driver ) then
39341: LD_VAR 0 18
39345: PPUSH
39346: CALL_OW 310
39350: IFFALSE 39361
// ComExit ( driver ) ;
39352: LD_VAR 0 18
39356: PPUSH
39357: CALL 64742 0 1
// AddComEnterUnit ( driver , tmp ) ;
39361: LD_VAR 0 18
39365: PPUSH
39366: LD_VAR 0 13
39370: PPUSH
39371: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39375: LD_VAR 0 18
39379: PPUSH
39380: LD_VAR 0 7
39384: PPUSH
39385: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39389: LD_VAR 0 18
39393: PPUSH
39394: CALL_OW 181
// end ; continue ;
39398: GO 39050
// end ; if not cleaners or not tmp in cleaners then
39400: LD_VAR 0 6
39404: NOT
39405: PUSH
39406: LD_VAR 0 13
39410: PUSH
39411: LD_VAR 0 6
39415: IN
39416: NOT
39417: OR
39418: IFFALSE 39725
// begin if dep then
39420: LD_VAR 0 17
39424: IFFALSE 39560
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39426: LD_ADDR_VAR 0 16
39430: PUSH
39431: LD_VAR 0 17
39435: PUSH
39436: LD_INT 1
39438: ARRAY
39439: PPUSH
39440: CALL_OW 250
39444: PPUSH
39445: LD_VAR 0 17
39449: PUSH
39450: LD_INT 1
39452: ARRAY
39453: PPUSH
39454: CALL_OW 254
39458: PPUSH
39459: LD_INT 5
39461: PPUSH
39462: CALL_OW 272
39466: PUSH
39467: LD_VAR 0 17
39471: PUSH
39472: LD_INT 1
39474: ARRAY
39475: PPUSH
39476: CALL_OW 251
39480: PPUSH
39481: LD_VAR 0 17
39485: PUSH
39486: LD_INT 1
39488: ARRAY
39489: PPUSH
39490: CALL_OW 254
39494: PPUSH
39495: LD_INT 5
39497: PPUSH
39498: CALL_OW 273
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39507: LD_VAR 0 16
39511: PUSH
39512: LD_INT 1
39514: ARRAY
39515: PPUSH
39516: LD_VAR 0 16
39520: PUSH
39521: LD_INT 2
39523: ARRAY
39524: PPUSH
39525: CALL_OW 488
39529: IFFALSE 39560
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39531: LD_VAR 0 13
39535: PPUSH
39536: LD_VAR 0 16
39540: PUSH
39541: LD_INT 1
39543: ARRAY
39544: PPUSH
39545: LD_VAR 0 16
39549: PUSH
39550: LD_INT 2
39552: ARRAY
39553: PPUSH
39554: CALL_OW 111
// continue ;
39558: GO 39050
// end ; end ; r := GetDir ( tmp ) ;
39560: LD_ADDR_VAR 0 15
39564: PUSH
39565: LD_VAR 0 13
39569: PPUSH
39570: CALL_OW 254
39574: ST_TO_ADDR
// if r = 5 then
39575: LD_VAR 0 15
39579: PUSH
39580: LD_INT 5
39582: EQUAL
39583: IFFALSE 39593
// r := 0 ;
39585: LD_ADDR_VAR 0 15
39589: PUSH
39590: LD_INT 0
39592: ST_TO_ADDR
// for j = r to 5 do
39593: LD_ADDR_VAR 0 10
39597: PUSH
39598: DOUBLE
39599: LD_VAR 0 15
39603: DEC
39604: ST_TO_ADDR
39605: LD_INT 5
39607: PUSH
39608: FOR_TO
39609: IFFALSE 39723
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39611: LD_ADDR_VAR 0 11
39615: PUSH
39616: LD_VAR 0 13
39620: PPUSH
39621: CALL_OW 250
39625: PPUSH
39626: LD_VAR 0 10
39630: PPUSH
39631: LD_INT 2
39633: PPUSH
39634: CALL_OW 272
39638: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39639: LD_ADDR_VAR 0 12
39643: PUSH
39644: LD_VAR 0 13
39648: PPUSH
39649: CALL_OW 251
39653: PPUSH
39654: LD_VAR 0 10
39658: PPUSH
39659: LD_INT 2
39661: PPUSH
39662: CALL_OW 273
39666: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39667: LD_VAR 0 11
39671: PPUSH
39672: LD_VAR 0 12
39676: PPUSH
39677: CALL_OW 488
39681: PUSH
39682: LD_VAR 0 11
39686: PPUSH
39687: LD_VAR 0 12
39691: PPUSH
39692: CALL_OW 428
39696: NOT
39697: AND
39698: IFFALSE 39721
// begin ComMoveXY ( tmp , _x , _y ) ;
39700: LD_VAR 0 13
39704: PPUSH
39705: LD_VAR 0 11
39709: PPUSH
39710: LD_VAR 0 12
39714: PPUSH
39715: CALL_OW 111
// break ;
39719: GO 39723
// end ; end ;
39721: GO 39608
39723: POP
39724: POP
// end ; end ;
39725: GO 39050
39727: POP
39728: POP
// end ;
39729: LD_VAR 0 8
39733: RET
// export function BuildingTechInvented ( side , btype ) ; begin
39734: LD_INT 0
39736: PPUSH
// result := true ;
39737: LD_ADDR_VAR 0 3
39741: PUSH
39742: LD_INT 1
39744: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
39745: LD_VAR 0 2
39749: PUSH
39750: LD_INT 24
39752: DOUBLE
39753: EQUAL
39754: IFTRUE 39764
39756: LD_INT 33
39758: DOUBLE
39759: EQUAL
39760: IFTRUE 39764
39762: GO 39789
39764: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
39765: LD_ADDR_VAR 0 3
39769: PUSH
39770: LD_INT 32
39772: PPUSH
39773: LD_VAR 0 1
39777: PPUSH
39778: CALL_OW 321
39782: PUSH
39783: LD_INT 2
39785: EQUAL
39786: ST_TO_ADDR
39787: GO 40105
39789: LD_INT 20
39791: DOUBLE
39792: EQUAL
39793: IFTRUE 39797
39795: GO 39822
39797: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
39798: LD_ADDR_VAR 0 3
39802: PUSH
39803: LD_INT 6
39805: PPUSH
39806: LD_VAR 0 1
39810: PPUSH
39811: CALL_OW 321
39815: PUSH
39816: LD_INT 2
39818: EQUAL
39819: ST_TO_ADDR
39820: GO 40105
39822: LD_INT 22
39824: DOUBLE
39825: EQUAL
39826: IFTRUE 39836
39828: LD_INT 36
39830: DOUBLE
39831: EQUAL
39832: IFTRUE 39836
39834: GO 39861
39836: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
39837: LD_ADDR_VAR 0 3
39841: PUSH
39842: LD_INT 15
39844: PPUSH
39845: LD_VAR 0 1
39849: PPUSH
39850: CALL_OW 321
39854: PUSH
39855: LD_INT 2
39857: EQUAL
39858: ST_TO_ADDR
39859: GO 40105
39861: LD_INT 30
39863: DOUBLE
39864: EQUAL
39865: IFTRUE 39869
39867: GO 39894
39869: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
39870: LD_ADDR_VAR 0 3
39874: PUSH
39875: LD_INT 20
39877: PPUSH
39878: LD_VAR 0 1
39882: PPUSH
39883: CALL_OW 321
39887: PUSH
39888: LD_INT 2
39890: EQUAL
39891: ST_TO_ADDR
39892: GO 40105
39894: LD_INT 28
39896: DOUBLE
39897: EQUAL
39898: IFTRUE 39908
39900: LD_INT 21
39902: DOUBLE
39903: EQUAL
39904: IFTRUE 39908
39906: GO 39933
39908: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
39909: LD_ADDR_VAR 0 3
39913: PUSH
39914: LD_INT 21
39916: PPUSH
39917: LD_VAR 0 1
39921: PPUSH
39922: CALL_OW 321
39926: PUSH
39927: LD_INT 2
39929: EQUAL
39930: ST_TO_ADDR
39931: GO 40105
39933: LD_INT 16
39935: DOUBLE
39936: EQUAL
39937: IFTRUE 39941
39939: GO 39966
39941: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
39942: LD_ADDR_VAR 0 3
39946: PUSH
39947: LD_INT 84
39949: PPUSH
39950: LD_VAR 0 1
39954: PPUSH
39955: CALL_OW 321
39959: PUSH
39960: LD_INT 2
39962: EQUAL
39963: ST_TO_ADDR
39964: GO 40105
39966: LD_INT 19
39968: DOUBLE
39969: EQUAL
39970: IFTRUE 39980
39972: LD_INT 23
39974: DOUBLE
39975: EQUAL
39976: IFTRUE 39980
39978: GO 40005
39980: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
39981: LD_ADDR_VAR 0 3
39985: PUSH
39986: LD_INT 83
39988: PPUSH
39989: LD_VAR 0 1
39993: PPUSH
39994: CALL_OW 321
39998: PUSH
39999: LD_INT 2
40001: EQUAL
40002: ST_TO_ADDR
40003: GO 40105
40005: LD_INT 17
40007: DOUBLE
40008: EQUAL
40009: IFTRUE 40013
40011: GO 40038
40013: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
40014: LD_ADDR_VAR 0 3
40018: PUSH
40019: LD_INT 39
40021: PPUSH
40022: LD_VAR 0 1
40026: PPUSH
40027: CALL_OW 321
40031: PUSH
40032: LD_INT 2
40034: EQUAL
40035: ST_TO_ADDR
40036: GO 40105
40038: LD_INT 18
40040: DOUBLE
40041: EQUAL
40042: IFTRUE 40046
40044: GO 40071
40046: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
40047: LD_ADDR_VAR 0 3
40051: PUSH
40052: LD_INT 40
40054: PPUSH
40055: LD_VAR 0 1
40059: PPUSH
40060: CALL_OW 321
40064: PUSH
40065: LD_INT 2
40067: EQUAL
40068: ST_TO_ADDR
40069: GO 40105
40071: LD_INT 27
40073: DOUBLE
40074: EQUAL
40075: IFTRUE 40079
40077: GO 40104
40079: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
40080: LD_ADDR_VAR 0 3
40084: PUSH
40085: LD_INT 35
40087: PPUSH
40088: LD_VAR 0 1
40092: PPUSH
40093: CALL_OW 321
40097: PUSH
40098: LD_INT 2
40100: EQUAL
40101: ST_TO_ADDR
40102: GO 40105
40104: POP
// end ;
40105: LD_VAR 0 3
40109: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
40110: LD_INT 0
40112: PPUSH
40113: PPUSH
40114: PPUSH
40115: PPUSH
40116: PPUSH
40117: PPUSH
40118: PPUSH
40119: PPUSH
40120: PPUSH
40121: PPUSH
40122: PPUSH
// result := false ;
40123: LD_ADDR_VAR 0 6
40127: PUSH
40128: LD_INT 0
40130: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40131: LD_VAR 0 1
40135: NOT
40136: PUSH
40137: LD_VAR 0 1
40141: PPUSH
40142: CALL_OW 266
40146: PUSH
40147: LD_INT 0
40149: PUSH
40150: LD_INT 1
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: IN
40157: NOT
40158: OR
40159: PUSH
40160: LD_VAR 0 2
40164: NOT
40165: OR
40166: PUSH
40167: LD_VAR 0 5
40171: PUSH
40172: LD_INT 0
40174: PUSH
40175: LD_INT 1
40177: PUSH
40178: LD_INT 2
40180: PUSH
40181: LD_INT 3
40183: PUSH
40184: LD_INT 4
40186: PUSH
40187: LD_INT 5
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: LIST
40194: LIST
40195: LIST
40196: LIST
40197: IN
40198: NOT
40199: OR
40200: PUSH
40201: LD_VAR 0 3
40205: PPUSH
40206: LD_VAR 0 4
40210: PPUSH
40211: CALL_OW 488
40215: NOT
40216: OR
40217: IFFALSE 40221
// exit ;
40219: GO 40957
// side := GetSide ( depot ) ;
40221: LD_ADDR_VAR 0 9
40225: PUSH
40226: LD_VAR 0 1
40230: PPUSH
40231: CALL_OW 255
40235: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
40236: LD_VAR 0 9
40240: PPUSH
40241: LD_VAR 0 2
40245: PPUSH
40246: CALL 39734 0 2
40250: NOT
40251: IFFALSE 40255
// exit ;
40253: GO 40957
// pom := GetBase ( depot ) ;
40255: LD_ADDR_VAR 0 10
40259: PUSH
40260: LD_VAR 0 1
40264: PPUSH
40265: CALL_OW 274
40269: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40270: LD_ADDR_VAR 0 11
40274: PUSH
40275: LD_VAR 0 2
40279: PPUSH
40280: LD_VAR 0 1
40284: PPUSH
40285: CALL_OW 248
40289: PPUSH
40290: CALL_OW 450
40294: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40295: LD_VAR 0 10
40299: PPUSH
40300: LD_INT 1
40302: PPUSH
40303: CALL_OW 275
40307: PUSH
40308: LD_VAR 0 11
40312: PUSH
40313: LD_INT 1
40315: ARRAY
40316: GREATEREQUAL
40317: PUSH
40318: LD_VAR 0 10
40322: PPUSH
40323: LD_INT 2
40325: PPUSH
40326: CALL_OW 275
40330: PUSH
40331: LD_VAR 0 11
40335: PUSH
40336: LD_INT 2
40338: ARRAY
40339: GREATEREQUAL
40340: AND
40341: PUSH
40342: LD_VAR 0 10
40346: PPUSH
40347: LD_INT 3
40349: PPUSH
40350: CALL_OW 275
40354: PUSH
40355: LD_VAR 0 11
40359: PUSH
40360: LD_INT 3
40362: ARRAY
40363: GREATEREQUAL
40364: AND
40365: NOT
40366: IFFALSE 40370
// exit ;
40368: GO 40957
// if GetBType ( depot ) = b_depot then
40370: LD_VAR 0 1
40374: PPUSH
40375: CALL_OW 266
40379: PUSH
40380: LD_INT 0
40382: EQUAL
40383: IFFALSE 40395
// dist := 28 else
40385: LD_ADDR_VAR 0 14
40389: PUSH
40390: LD_INT 28
40392: ST_TO_ADDR
40393: GO 40403
// dist := 36 ;
40395: LD_ADDR_VAR 0 14
40399: PUSH
40400: LD_INT 36
40402: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40403: LD_VAR 0 1
40407: PPUSH
40408: LD_VAR 0 3
40412: PPUSH
40413: LD_VAR 0 4
40417: PPUSH
40418: CALL_OW 297
40422: PUSH
40423: LD_VAR 0 14
40427: GREATER
40428: IFFALSE 40432
// exit ;
40430: GO 40957
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40432: LD_ADDR_VAR 0 12
40436: PUSH
40437: LD_VAR 0 2
40441: PPUSH
40442: LD_VAR 0 3
40446: PPUSH
40447: LD_VAR 0 4
40451: PPUSH
40452: LD_VAR 0 5
40456: PPUSH
40457: LD_VAR 0 1
40461: PPUSH
40462: CALL_OW 248
40466: PPUSH
40467: LD_INT 0
40469: PPUSH
40470: CALL 40962 0 6
40474: ST_TO_ADDR
// if not hexes then
40475: LD_VAR 0 12
40479: NOT
40480: IFFALSE 40484
// exit ;
40482: GO 40957
// hex := GetHexInfo ( x , y ) ;
40484: LD_ADDR_VAR 0 15
40488: PUSH
40489: LD_VAR 0 3
40493: PPUSH
40494: LD_VAR 0 4
40498: PPUSH
40499: CALL_OW 546
40503: ST_TO_ADDR
// if hex [ 1 ] then
40504: LD_VAR 0 15
40508: PUSH
40509: LD_INT 1
40511: ARRAY
40512: IFFALSE 40516
// exit ;
40514: GO 40957
// height := hex [ 2 ] ;
40516: LD_ADDR_VAR 0 13
40520: PUSH
40521: LD_VAR 0 15
40525: PUSH
40526: LD_INT 2
40528: ARRAY
40529: ST_TO_ADDR
// for i = 1 to hexes do
40530: LD_ADDR_VAR 0 7
40534: PUSH
40535: DOUBLE
40536: LD_INT 1
40538: DEC
40539: ST_TO_ADDR
40540: LD_VAR 0 12
40544: PUSH
40545: FOR_TO
40546: IFFALSE 40876
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40548: LD_VAR 0 12
40552: PUSH
40553: LD_VAR 0 7
40557: ARRAY
40558: PUSH
40559: LD_INT 1
40561: ARRAY
40562: PPUSH
40563: LD_VAR 0 12
40567: PUSH
40568: LD_VAR 0 7
40572: ARRAY
40573: PUSH
40574: LD_INT 2
40576: ARRAY
40577: PPUSH
40578: CALL_OW 488
40582: NOT
40583: PUSH
40584: LD_VAR 0 12
40588: PUSH
40589: LD_VAR 0 7
40593: ARRAY
40594: PUSH
40595: LD_INT 1
40597: ARRAY
40598: PPUSH
40599: LD_VAR 0 12
40603: PUSH
40604: LD_VAR 0 7
40608: ARRAY
40609: PUSH
40610: LD_INT 2
40612: ARRAY
40613: PPUSH
40614: CALL_OW 428
40618: PUSH
40619: LD_INT 0
40621: GREATER
40622: OR
40623: PUSH
40624: LD_VAR 0 12
40628: PUSH
40629: LD_VAR 0 7
40633: ARRAY
40634: PUSH
40635: LD_INT 1
40637: ARRAY
40638: PPUSH
40639: LD_VAR 0 12
40643: PUSH
40644: LD_VAR 0 7
40648: ARRAY
40649: PUSH
40650: LD_INT 2
40652: ARRAY
40653: PPUSH
40654: CALL_OW 351
40658: OR
40659: IFFALSE 40665
// exit ;
40661: POP
40662: POP
40663: GO 40957
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40665: LD_ADDR_VAR 0 8
40669: PUSH
40670: LD_VAR 0 12
40674: PUSH
40675: LD_VAR 0 7
40679: ARRAY
40680: PUSH
40681: LD_INT 1
40683: ARRAY
40684: PPUSH
40685: LD_VAR 0 12
40689: PUSH
40690: LD_VAR 0 7
40694: ARRAY
40695: PUSH
40696: LD_INT 2
40698: ARRAY
40699: PPUSH
40700: CALL_OW 546
40704: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
40705: LD_VAR 0 8
40709: PUSH
40710: LD_INT 1
40712: ARRAY
40713: PUSH
40714: LD_VAR 0 8
40718: PUSH
40719: LD_INT 2
40721: ARRAY
40722: PUSH
40723: LD_VAR 0 13
40727: PUSH
40728: LD_INT 2
40730: PLUS
40731: GREATER
40732: OR
40733: PUSH
40734: LD_VAR 0 8
40738: PUSH
40739: LD_INT 2
40741: ARRAY
40742: PUSH
40743: LD_VAR 0 13
40747: PUSH
40748: LD_INT 2
40750: MINUS
40751: LESS
40752: OR
40753: PUSH
40754: LD_VAR 0 8
40758: PUSH
40759: LD_INT 3
40761: ARRAY
40762: PUSH
40763: LD_INT 0
40765: PUSH
40766: LD_INT 8
40768: PUSH
40769: LD_INT 9
40771: PUSH
40772: LD_INT 10
40774: PUSH
40775: LD_INT 11
40777: PUSH
40778: LD_INT 12
40780: PUSH
40781: LD_INT 13
40783: PUSH
40784: LD_INT 16
40786: PUSH
40787: LD_INT 17
40789: PUSH
40790: LD_INT 18
40792: PUSH
40793: LD_INT 19
40795: PUSH
40796: LD_INT 20
40798: PUSH
40799: LD_INT 21
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: LIST
40806: LIST
40807: LIST
40808: LIST
40809: LIST
40810: LIST
40811: LIST
40812: LIST
40813: LIST
40814: LIST
40815: LIST
40816: IN
40817: NOT
40818: OR
40819: PUSH
40820: LD_VAR 0 8
40824: PUSH
40825: LD_INT 5
40827: ARRAY
40828: NOT
40829: OR
40830: PUSH
40831: LD_VAR 0 8
40835: PUSH
40836: LD_INT 6
40838: ARRAY
40839: PUSH
40840: LD_INT 1
40842: PUSH
40843: LD_INT 2
40845: PUSH
40846: LD_INT 7
40848: PUSH
40849: LD_INT 9
40851: PUSH
40852: LD_INT 10
40854: PUSH
40855: LD_INT 11
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: LIST
40865: IN
40866: NOT
40867: OR
40868: IFFALSE 40874
// exit ;
40870: POP
40871: POP
40872: GO 40957
// end ;
40874: GO 40545
40876: POP
40877: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
40878: LD_VAR 0 9
40882: PPUSH
40883: LD_VAR 0 3
40887: PPUSH
40888: LD_VAR 0 4
40892: PPUSH
40893: LD_INT 20
40895: PPUSH
40896: CALL 32909 0 4
40900: PUSH
40901: LD_INT 4
40903: ARRAY
40904: IFFALSE 40908
// exit ;
40906: GO 40957
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
40908: LD_VAR 0 2
40912: PUSH
40913: LD_INT 29
40915: PUSH
40916: LD_INT 30
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: IN
40923: PUSH
40924: LD_VAR 0 3
40928: PPUSH
40929: LD_VAR 0 4
40933: PPUSH
40934: LD_VAR 0 9
40938: PPUSH
40939: CALL_OW 440
40943: NOT
40944: AND
40945: IFFALSE 40949
// exit ;
40947: GO 40957
// result := true ;
40949: LD_ADDR_VAR 0 6
40953: PUSH
40954: LD_INT 1
40956: ST_TO_ADDR
// end ;
40957: LD_VAR 0 6
40961: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
40962: LD_INT 0
40964: PPUSH
40965: PPUSH
40966: PPUSH
40967: PPUSH
40968: PPUSH
40969: PPUSH
40970: PPUSH
40971: PPUSH
40972: PPUSH
40973: PPUSH
40974: PPUSH
40975: PPUSH
40976: PPUSH
40977: PPUSH
40978: PPUSH
40979: PPUSH
40980: PPUSH
40981: PPUSH
40982: PPUSH
40983: PPUSH
40984: PPUSH
40985: PPUSH
40986: PPUSH
40987: PPUSH
40988: PPUSH
40989: PPUSH
40990: PPUSH
40991: PPUSH
40992: PPUSH
40993: PPUSH
40994: PPUSH
40995: PPUSH
40996: PPUSH
40997: PPUSH
40998: PPUSH
40999: PPUSH
41000: PPUSH
41001: PPUSH
41002: PPUSH
41003: PPUSH
41004: PPUSH
41005: PPUSH
41006: PPUSH
41007: PPUSH
41008: PPUSH
41009: PPUSH
41010: PPUSH
41011: PPUSH
41012: PPUSH
41013: PPUSH
41014: PPUSH
41015: PPUSH
41016: PPUSH
41017: PPUSH
41018: PPUSH
41019: PPUSH
41020: PPUSH
41021: PPUSH
// result = [ ] ;
41022: LD_ADDR_VAR 0 7
41026: PUSH
41027: EMPTY
41028: ST_TO_ADDR
// temp_list = [ ] ;
41029: LD_ADDR_VAR 0 9
41033: PUSH
41034: EMPTY
41035: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41036: LD_VAR 0 4
41040: PUSH
41041: LD_INT 0
41043: PUSH
41044: LD_INT 1
41046: PUSH
41047: LD_INT 2
41049: PUSH
41050: LD_INT 3
41052: PUSH
41053: LD_INT 4
41055: PUSH
41056: LD_INT 5
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: LIST
41063: LIST
41064: LIST
41065: LIST
41066: IN
41067: NOT
41068: PUSH
41069: LD_VAR 0 1
41073: PUSH
41074: LD_INT 0
41076: PUSH
41077: LD_INT 1
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: IN
41084: PUSH
41085: LD_VAR 0 5
41089: PUSH
41090: LD_INT 1
41092: PUSH
41093: LD_INT 2
41095: PUSH
41096: LD_INT 3
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: LIST
41103: IN
41104: NOT
41105: AND
41106: OR
41107: IFFALSE 41111
// exit ;
41109: GO 59502
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41111: LD_VAR 0 1
41115: PUSH
41116: LD_INT 6
41118: PUSH
41119: LD_INT 7
41121: PUSH
41122: LD_INT 8
41124: PUSH
41125: LD_INT 13
41127: PUSH
41128: LD_INT 12
41130: PUSH
41131: LD_INT 15
41133: PUSH
41134: LD_INT 11
41136: PUSH
41137: LD_INT 14
41139: PUSH
41140: LD_INT 10
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: LIST
41147: LIST
41148: LIST
41149: LIST
41150: LIST
41151: LIST
41152: LIST
41153: IN
41154: IFFALSE 41164
// btype = b_lab ;
41156: LD_ADDR_VAR 0 1
41160: PUSH
41161: LD_INT 6
41163: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41164: LD_VAR 0 6
41168: PUSH
41169: LD_INT 0
41171: PUSH
41172: LD_INT 1
41174: PUSH
41175: LD_INT 2
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: LIST
41182: IN
41183: NOT
41184: PUSH
41185: LD_VAR 0 1
41189: PUSH
41190: LD_INT 0
41192: PUSH
41193: LD_INT 1
41195: PUSH
41196: LD_INT 2
41198: PUSH
41199: LD_INT 3
41201: PUSH
41202: LD_INT 6
41204: PUSH
41205: LD_INT 36
41207: PUSH
41208: LD_INT 4
41210: PUSH
41211: LD_INT 5
41213: PUSH
41214: LD_INT 31
41216: PUSH
41217: LD_INT 32
41219: PUSH
41220: LD_INT 33
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: LIST
41227: LIST
41228: LIST
41229: LIST
41230: LIST
41231: LIST
41232: LIST
41233: LIST
41234: LIST
41235: IN
41236: NOT
41237: PUSH
41238: LD_VAR 0 6
41242: PUSH
41243: LD_INT 1
41245: EQUAL
41246: AND
41247: OR
41248: PUSH
41249: LD_VAR 0 1
41253: PUSH
41254: LD_INT 2
41256: PUSH
41257: LD_INT 3
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: IN
41264: NOT
41265: PUSH
41266: LD_VAR 0 6
41270: PUSH
41271: LD_INT 2
41273: EQUAL
41274: AND
41275: OR
41276: IFFALSE 41286
// mode = 0 ;
41278: LD_ADDR_VAR 0 6
41282: PUSH
41283: LD_INT 0
41285: ST_TO_ADDR
// case mode of 0 :
41286: LD_VAR 0 6
41290: PUSH
41291: LD_INT 0
41293: DOUBLE
41294: EQUAL
41295: IFTRUE 41299
41297: GO 52752
41299: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41300: LD_ADDR_VAR 0 11
41304: PUSH
41305: LD_INT 0
41307: PUSH
41308: LD_INT 0
41310: PUSH
41311: EMPTY
41312: LIST
41313: LIST
41314: PUSH
41315: LD_INT 0
41317: PUSH
41318: LD_INT 1
41320: NEG
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: PUSH
41326: LD_INT 1
41328: PUSH
41329: LD_INT 0
41331: PUSH
41332: EMPTY
41333: LIST
41334: LIST
41335: PUSH
41336: LD_INT 1
41338: PUSH
41339: LD_INT 1
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: PUSH
41346: LD_INT 0
41348: PUSH
41349: LD_INT 1
41351: PUSH
41352: EMPTY
41353: LIST
41354: LIST
41355: PUSH
41356: LD_INT 1
41358: NEG
41359: PUSH
41360: LD_INT 0
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: LD_INT 1
41369: NEG
41370: PUSH
41371: LD_INT 1
41373: NEG
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: PUSH
41379: LD_INT 1
41381: NEG
41382: PUSH
41383: LD_INT 2
41385: NEG
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: PUSH
41391: LD_INT 0
41393: PUSH
41394: LD_INT 2
41396: NEG
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: PUSH
41402: LD_INT 1
41404: PUSH
41405: LD_INT 1
41407: NEG
41408: PUSH
41409: EMPTY
41410: LIST
41411: LIST
41412: PUSH
41413: LD_INT 1
41415: PUSH
41416: LD_INT 2
41418: PUSH
41419: EMPTY
41420: LIST
41421: LIST
41422: PUSH
41423: LD_INT 0
41425: PUSH
41426: LD_INT 2
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: PUSH
41433: LD_INT 1
41435: NEG
41436: PUSH
41437: LD_INT 1
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: PUSH
41444: LD_INT 1
41446: PUSH
41447: LD_INT 3
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: PUSH
41454: LD_INT 0
41456: PUSH
41457: LD_INT 3
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: PUSH
41464: LD_INT 1
41466: NEG
41467: PUSH
41468: LD_INT 2
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: LIST
41479: LIST
41480: LIST
41481: LIST
41482: LIST
41483: LIST
41484: LIST
41485: LIST
41486: LIST
41487: LIST
41488: LIST
41489: LIST
41490: LIST
41491: LIST
41492: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41493: LD_ADDR_VAR 0 12
41497: PUSH
41498: LD_INT 0
41500: PUSH
41501: LD_INT 0
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: LD_INT 0
41510: PUSH
41511: LD_INT 1
41513: NEG
41514: PUSH
41515: EMPTY
41516: LIST
41517: LIST
41518: PUSH
41519: LD_INT 1
41521: PUSH
41522: LD_INT 0
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: PUSH
41529: LD_INT 1
41531: PUSH
41532: LD_INT 1
41534: PUSH
41535: EMPTY
41536: LIST
41537: LIST
41538: PUSH
41539: LD_INT 0
41541: PUSH
41542: LD_INT 1
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: PUSH
41549: LD_INT 1
41551: NEG
41552: PUSH
41553: LD_INT 0
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 1
41562: NEG
41563: PUSH
41564: LD_INT 1
41566: NEG
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: PUSH
41572: LD_INT 1
41574: PUSH
41575: LD_INT 1
41577: NEG
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: PUSH
41583: LD_INT 2
41585: PUSH
41586: LD_INT 0
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: PUSH
41593: LD_INT 2
41595: PUSH
41596: LD_INT 1
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: PUSH
41603: LD_INT 1
41605: NEG
41606: PUSH
41607: LD_INT 1
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: PUSH
41614: LD_INT 2
41616: NEG
41617: PUSH
41618: LD_INT 0
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: PUSH
41625: LD_INT 2
41627: NEG
41628: PUSH
41629: LD_INT 1
41631: NEG
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 2
41639: NEG
41640: PUSH
41641: LD_INT 1
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: PUSH
41648: LD_INT 3
41650: NEG
41651: PUSH
41652: LD_INT 0
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PUSH
41659: LD_INT 3
41661: NEG
41662: PUSH
41663: LD_INT 1
41665: NEG
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: LIST
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: LIST
41687: LIST
41688: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41689: LD_ADDR_VAR 0 13
41693: PUSH
41694: LD_INT 0
41696: PUSH
41697: LD_INT 0
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 0
41706: PUSH
41707: LD_INT 1
41709: NEG
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: LD_INT 1
41717: PUSH
41718: LD_INT 0
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: PUSH
41725: LD_INT 1
41727: PUSH
41728: LD_INT 1
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 0
41737: PUSH
41738: LD_INT 1
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 1
41747: NEG
41748: PUSH
41749: LD_INT 0
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: PUSH
41756: LD_INT 1
41758: NEG
41759: PUSH
41760: LD_INT 1
41762: NEG
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: PUSH
41768: LD_INT 1
41770: NEG
41771: PUSH
41772: LD_INT 2
41774: NEG
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: PUSH
41780: LD_INT 2
41782: PUSH
41783: LD_INT 1
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 2
41792: PUSH
41793: LD_INT 2
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 1
41802: PUSH
41803: LD_INT 2
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: PUSH
41810: LD_INT 2
41812: NEG
41813: PUSH
41814: LD_INT 1
41816: NEG
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 2
41824: NEG
41825: PUSH
41826: LD_INT 2
41828: NEG
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 2
41836: NEG
41837: PUSH
41838: LD_INT 3
41840: NEG
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 3
41848: NEG
41849: PUSH
41850: LD_INT 2
41852: NEG
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: PUSH
41858: LD_INT 3
41860: NEG
41861: PUSH
41862: LD_INT 3
41864: NEG
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: PUSH
41870: EMPTY
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: LIST
41885: LIST
41886: LIST
41887: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41888: LD_ADDR_VAR 0 14
41892: PUSH
41893: LD_INT 0
41895: PUSH
41896: LD_INT 0
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: PUSH
41903: LD_INT 0
41905: PUSH
41906: LD_INT 1
41908: NEG
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 1
41916: PUSH
41917: LD_INT 0
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: PUSH
41924: LD_INT 1
41926: PUSH
41927: LD_INT 1
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: PUSH
41934: LD_INT 0
41936: PUSH
41937: LD_INT 1
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: LD_INT 1
41946: NEG
41947: PUSH
41948: LD_INT 0
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: PUSH
41955: LD_INT 1
41957: NEG
41958: PUSH
41959: LD_INT 1
41961: NEG
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: PUSH
41967: LD_INT 1
41969: NEG
41970: PUSH
41971: LD_INT 2
41973: NEG
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: PUSH
41979: LD_INT 0
41981: PUSH
41982: LD_INT 2
41984: NEG
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: PUSH
41990: LD_INT 1
41992: PUSH
41993: LD_INT 1
41995: NEG
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PUSH
42001: LD_INT 1
42003: PUSH
42004: LD_INT 2
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: PUSH
42011: LD_INT 0
42013: PUSH
42014: LD_INT 2
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: PUSH
42021: LD_INT 1
42023: NEG
42024: PUSH
42025: LD_INT 1
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: LD_INT 1
42034: NEG
42035: PUSH
42036: LD_INT 3
42038: NEG
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PUSH
42044: LD_INT 0
42046: PUSH
42047: LD_INT 3
42049: NEG
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: PUSH
42055: LD_INT 1
42057: PUSH
42058: LD_INT 2
42060: NEG
42061: PUSH
42062: EMPTY
42063: LIST
42064: LIST
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: LIST
42070: LIST
42071: LIST
42072: LIST
42073: LIST
42074: LIST
42075: LIST
42076: LIST
42077: LIST
42078: LIST
42079: LIST
42080: LIST
42081: LIST
42082: LIST
42083: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42084: LD_ADDR_VAR 0 15
42088: PUSH
42089: LD_INT 0
42091: PUSH
42092: LD_INT 0
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: LD_INT 0
42101: PUSH
42102: LD_INT 1
42104: NEG
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: PUSH
42110: LD_INT 1
42112: PUSH
42113: LD_INT 0
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PUSH
42120: LD_INT 1
42122: PUSH
42123: LD_INT 1
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: LD_INT 0
42132: PUSH
42133: LD_INT 1
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 1
42142: NEG
42143: PUSH
42144: LD_INT 0
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: LD_INT 1
42153: NEG
42154: PUSH
42155: LD_INT 1
42157: NEG
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: PUSH
42163: LD_INT 1
42165: PUSH
42166: LD_INT 1
42168: NEG
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 2
42176: PUSH
42177: LD_INT 0
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 2
42186: PUSH
42187: LD_INT 1
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 1
42196: NEG
42197: PUSH
42198: LD_INT 1
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: PUSH
42205: LD_INT 2
42207: NEG
42208: PUSH
42209: LD_INT 0
42211: PUSH
42212: EMPTY
42213: LIST
42214: LIST
42215: PUSH
42216: LD_INT 2
42218: NEG
42219: PUSH
42220: LD_INT 1
42222: NEG
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: PUSH
42228: LD_INT 2
42230: PUSH
42231: LD_INT 1
42233: NEG
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: LD_INT 3
42241: PUSH
42242: LD_INT 0
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: LD_INT 3
42251: PUSH
42252: LD_INT 1
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42277: LD_ADDR_VAR 0 16
42281: PUSH
42282: LD_INT 0
42284: PUSH
42285: LD_INT 0
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 0
42294: PUSH
42295: LD_INT 1
42297: NEG
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: PUSH
42303: LD_INT 1
42305: PUSH
42306: LD_INT 0
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: LD_INT 1
42315: PUSH
42316: LD_INT 1
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: PUSH
42323: LD_INT 0
42325: PUSH
42326: LD_INT 1
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PUSH
42333: LD_INT 1
42335: NEG
42336: PUSH
42337: LD_INT 0
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: PUSH
42344: LD_INT 1
42346: NEG
42347: PUSH
42348: LD_INT 1
42350: NEG
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 1
42358: NEG
42359: PUSH
42360: LD_INT 2
42362: NEG
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: LD_INT 2
42370: PUSH
42371: LD_INT 1
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: PUSH
42378: LD_INT 2
42380: PUSH
42381: LD_INT 2
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 1
42390: PUSH
42391: LD_INT 2
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PUSH
42398: LD_INT 2
42400: NEG
42401: PUSH
42402: LD_INT 1
42404: NEG
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: PUSH
42410: LD_INT 2
42412: NEG
42413: PUSH
42414: LD_INT 2
42416: NEG
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 3
42424: PUSH
42425: LD_INT 2
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 3
42434: PUSH
42435: LD_INT 3
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PUSH
42442: LD_INT 2
42444: PUSH
42445: LD_INT 3
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42470: LD_ADDR_VAR 0 17
42474: PUSH
42475: LD_INT 0
42477: PUSH
42478: LD_INT 0
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PUSH
42485: LD_INT 0
42487: PUSH
42488: LD_INT 1
42490: NEG
42491: PUSH
42492: EMPTY
42493: LIST
42494: LIST
42495: PUSH
42496: LD_INT 1
42498: PUSH
42499: LD_INT 0
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: LD_INT 1
42508: PUSH
42509: LD_INT 1
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: LD_INT 0
42518: PUSH
42519: LD_INT 1
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: PUSH
42526: LD_INT 1
42528: NEG
42529: PUSH
42530: LD_INT 0
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: PUSH
42537: LD_INT 1
42539: NEG
42540: PUSH
42541: LD_INT 1
42543: NEG
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: LD_INT 1
42551: NEG
42552: PUSH
42553: LD_INT 2
42555: NEG
42556: PUSH
42557: EMPTY
42558: LIST
42559: LIST
42560: PUSH
42561: LD_INT 0
42563: PUSH
42564: LD_INT 2
42566: NEG
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: PUSH
42572: LD_INT 1
42574: PUSH
42575: LD_INT 1
42577: NEG
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: LD_INT 2
42585: PUSH
42586: LD_INT 0
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: PUSH
42593: LD_INT 2
42595: PUSH
42596: LD_INT 1
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: LD_INT 2
42605: PUSH
42606: LD_INT 2
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: LD_INT 1
42615: PUSH
42616: LD_INT 2
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 0
42625: PUSH
42626: LD_INT 2
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: PUSH
42633: LD_INT 1
42635: NEG
42636: PUSH
42637: LD_INT 1
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 2
42646: NEG
42647: PUSH
42648: LD_INT 0
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: PUSH
42655: LD_INT 2
42657: NEG
42658: PUSH
42659: LD_INT 1
42661: NEG
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: LD_INT 2
42669: NEG
42670: PUSH
42671: LD_INT 2
42673: NEG
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: LIST
42694: LIST
42695: LIST
42696: LIST
42697: LIST
42698: LIST
42699: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42700: LD_ADDR_VAR 0 18
42704: PUSH
42705: LD_INT 0
42707: PUSH
42708: LD_INT 0
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: PUSH
42715: LD_INT 0
42717: PUSH
42718: LD_INT 1
42720: NEG
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: PUSH
42726: LD_INT 1
42728: PUSH
42729: LD_INT 0
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: LD_INT 1
42738: PUSH
42739: LD_INT 1
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: LD_INT 0
42748: PUSH
42749: LD_INT 1
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: PUSH
42756: LD_INT 1
42758: NEG
42759: PUSH
42760: LD_INT 0
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: LD_INT 1
42769: NEG
42770: PUSH
42771: LD_INT 1
42773: NEG
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 1
42781: NEG
42782: PUSH
42783: LD_INT 2
42785: NEG
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: PUSH
42791: LD_INT 0
42793: PUSH
42794: LD_INT 2
42796: NEG
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: PUSH
42802: LD_INT 1
42804: PUSH
42805: LD_INT 1
42807: NEG
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: LD_INT 2
42815: PUSH
42816: LD_INT 0
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: LD_INT 2
42825: PUSH
42826: LD_INT 1
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: PUSH
42833: LD_INT 2
42835: PUSH
42836: LD_INT 2
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: PUSH
42843: LD_INT 1
42845: PUSH
42846: LD_INT 2
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: PUSH
42853: LD_INT 0
42855: PUSH
42856: LD_INT 2
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: PUSH
42863: LD_INT 1
42865: NEG
42866: PUSH
42867: LD_INT 1
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: PUSH
42874: LD_INT 2
42876: NEG
42877: PUSH
42878: LD_INT 0
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: PUSH
42885: LD_INT 2
42887: NEG
42888: PUSH
42889: LD_INT 1
42891: NEG
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: LD_INT 2
42899: NEG
42900: PUSH
42901: LD_INT 2
42903: NEG
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: LIST
42927: LIST
42928: LIST
42929: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42930: LD_ADDR_VAR 0 19
42934: PUSH
42935: LD_INT 0
42937: PUSH
42938: LD_INT 0
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: PUSH
42945: LD_INT 0
42947: PUSH
42948: LD_INT 1
42950: NEG
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: PUSH
42956: LD_INT 1
42958: PUSH
42959: LD_INT 0
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: LD_INT 1
42968: PUSH
42969: LD_INT 1
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 0
42978: PUSH
42979: LD_INT 1
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 1
42988: NEG
42989: PUSH
42990: LD_INT 0
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: PUSH
42997: LD_INT 1
42999: NEG
43000: PUSH
43001: LD_INT 1
43003: NEG
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PUSH
43009: LD_INT 1
43011: NEG
43012: PUSH
43013: LD_INT 2
43015: NEG
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: PUSH
43021: LD_INT 0
43023: PUSH
43024: LD_INT 2
43026: NEG
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PUSH
43032: LD_INT 1
43034: PUSH
43035: LD_INT 1
43037: NEG
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: PUSH
43043: LD_INT 2
43045: PUSH
43046: LD_INT 0
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: PUSH
43053: LD_INT 2
43055: PUSH
43056: LD_INT 1
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: LD_INT 2
43065: PUSH
43066: LD_INT 2
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 1
43075: PUSH
43076: LD_INT 2
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 0
43085: PUSH
43086: LD_INT 2
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: LD_INT 1
43095: NEG
43096: PUSH
43097: LD_INT 1
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: LD_INT 2
43106: NEG
43107: PUSH
43108: LD_INT 0
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: PUSH
43115: LD_INT 2
43117: NEG
43118: PUSH
43119: LD_INT 1
43121: NEG
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: LD_INT 2
43129: NEG
43130: PUSH
43131: LD_INT 2
43133: NEG
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: LIST
43143: LIST
43144: LIST
43145: LIST
43146: LIST
43147: LIST
43148: LIST
43149: LIST
43150: LIST
43151: LIST
43152: LIST
43153: LIST
43154: LIST
43155: LIST
43156: LIST
43157: LIST
43158: LIST
43159: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43160: LD_ADDR_VAR 0 20
43164: PUSH
43165: LD_INT 0
43167: PUSH
43168: LD_INT 0
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: PUSH
43175: LD_INT 0
43177: PUSH
43178: LD_INT 1
43180: NEG
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: LD_INT 1
43188: PUSH
43189: LD_INT 0
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: LD_INT 1
43198: PUSH
43199: LD_INT 1
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: PUSH
43206: LD_INT 0
43208: PUSH
43209: LD_INT 1
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: LD_INT 1
43218: NEG
43219: PUSH
43220: LD_INT 0
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: LD_INT 1
43229: NEG
43230: PUSH
43231: LD_INT 1
43233: NEG
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: LD_INT 1
43241: NEG
43242: PUSH
43243: LD_INT 2
43245: NEG
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: LD_INT 0
43253: PUSH
43254: LD_INT 2
43256: NEG
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PUSH
43262: LD_INT 1
43264: PUSH
43265: LD_INT 1
43267: NEG
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: PUSH
43273: LD_INT 2
43275: PUSH
43276: LD_INT 0
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: LD_INT 2
43285: PUSH
43286: LD_INT 1
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_INT 2
43295: PUSH
43296: LD_INT 2
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 1
43305: PUSH
43306: LD_INT 2
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 0
43315: PUSH
43316: LD_INT 2
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: LD_INT 1
43325: NEG
43326: PUSH
43327: LD_INT 1
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 2
43336: NEG
43337: PUSH
43338: LD_INT 0
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 2
43347: NEG
43348: PUSH
43349: LD_INT 1
43351: NEG
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: LD_INT 2
43359: NEG
43360: PUSH
43361: LD_INT 2
43363: NEG
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: LIST
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: LIST
43380: LIST
43381: LIST
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43390: LD_ADDR_VAR 0 21
43394: PUSH
43395: LD_INT 0
43397: PUSH
43398: LD_INT 0
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: PUSH
43405: LD_INT 0
43407: PUSH
43408: LD_INT 1
43410: NEG
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: PUSH
43416: LD_INT 1
43418: PUSH
43419: LD_INT 0
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: LD_INT 1
43428: PUSH
43429: LD_INT 1
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 0
43438: PUSH
43439: LD_INT 1
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 1
43448: NEG
43449: PUSH
43450: LD_INT 0
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: LD_INT 1
43459: NEG
43460: PUSH
43461: LD_INT 1
43463: NEG
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_INT 1
43471: NEG
43472: PUSH
43473: LD_INT 2
43475: NEG
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 0
43483: PUSH
43484: LD_INT 2
43486: NEG
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: PUSH
43492: LD_INT 1
43494: PUSH
43495: LD_INT 1
43497: NEG
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: PUSH
43503: LD_INT 2
43505: PUSH
43506: LD_INT 0
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: PUSH
43513: LD_INT 2
43515: PUSH
43516: LD_INT 1
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: LD_INT 2
43525: PUSH
43526: LD_INT 2
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 1
43535: PUSH
43536: LD_INT 2
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 0
43545: PUSH
43546: LD_INT 2
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: LD_INT 1
43555: NEG
43556: PUSH
43557: LD_INT 1
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: LD_INT 2
43566: NEG
43567: PUSH
43568: LD_INT 0
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_INT 2
43577: NEG
43578: PUSH
43579: LD_INT 1
43581: NEG
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: LD_INT 2
43589: NEG
43590: PUSH
43591: LD_INT 2
43593: NEG
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: LIST
43612: LIST
43613: LIST
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43620: LD_ADDR_VAR 0 22
43624: PUSH
43625: LD_INT 0
43627: PUSH
43628: LD_INT 0
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: LD_INT 0
43637: PUSH
43638: LD_INT 1
43640: NEG
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: LD_INT 1
43648: PUSH
43649: LD_INT 0
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: LD_INT 1
43658: PUSH
43659: LD_INT 1
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: PUSH
43666: LD_INT 0
43668: PUSH
43669: LD_INT 1
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: LD_INT 1
43678: NEG
43679: PUSH
43680: LD_INT 0
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: LD_INT 1
43689: NEG
43690: PUSH
43691: LD_INT 1
43693: NEG
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 1
43701: NEG
43702: PUSH
43703: LD_INT 2
43705: NEG
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 0
43713: PUSH
43714: LD_INT 2
43716: NEG
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: LD_INT 1
43724: PUSH
43725: LD_INT 1
43727: NEG
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 2
43735: PUSH
43736: LD_INT 0
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: PUSH
43743: LD_INT 2
43745: PUSH
43746: LD_INT 1
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: LD_INT 2
43755: PUSH
43756: LD_INT 2
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 1
43765: PUSH
43766: LD_INT 2
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 0
43775: PUSH
43776: LD_INT 2
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 1
43785: NEG
43786: PUSH
43787: LD_INT 1
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 2
43796: NEG
43797: PUSH
43798: LD_INT 0
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: LD_INT 2
43807: NEG
43808: PUSH
43809: LD_INT 1
43811: NEG
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 2
43819: NEG
43820: PUSH
43821: LD_INT 2
43823: NEG
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43850: LD_ADDR_VAR 0 23
43854: PUSH
43855: LD_INT 0
43857: PUSH
43858: LD_INT 0
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: LD_INT 0
43867: PUSH
43868: LD_INT 1
43870: NEG
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: PUSH
43876: LD_INT 1
43878: PUSH
43879: LD_INT 0
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: PUSH
43886: LD_INT 1
43888: PUSH
43889: LD_INT 1
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PUSH
43896: LD_INT 0
43898: PUSH
43899: LD_INT 1
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 1
43908: NEG
43909: PUSH
43910: LD_INT 0
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: PUSH
43917: LD_INT 1
43919: NEG
43920: PUSH
43921: LD_INT 1
43923: NEG
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: LD_INT 1
43931: NEG
43932: PUSH
43933: LD_INT 2
43935: NEG
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: PUSH
43941: LD_INT 0
43943: PUSH
43944: LD_INT 2
43946: NEG
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: PUSH
43952: LD_INT 1
43954: PUSH
43955: LD_INT 1
43957: NEG
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: LD_INT 2
43965: PUSH
43966: LD_INT 0
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 2
43975: PUSH
43976: LD_INT 1
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: LD_INT 2
43985: PUSH
43986: LD_INT 2
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: PUSH
43993: LD_INT 1
43995: PUSH
43996: LD_INT 2
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 0
44005: PUSH
44006: LD_INT 2
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: LD_INT 1
44015: NEG
44016: PUSH
44017: LD_INT 1
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: PUSH
44024: LD_INT 2
44026: NEG
44027: PUSH
44028: LD_INT 0
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: PUSH
44035: LD_INT 2
44037: NEG
44038: PUSH
44039: LD_INT 1
44041: NEG
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: PUSH
44047: LD_INT 2
44049: NEG
44050: PUSH
44051: LD_INT 2
44053: NEG
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: LD_INT 2
44061: NEG
44062: PUSH
44063: LD_INT 3
44065: NEG
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 1
44073: NEG
44074: PUSH
44075: LD_INT 3
44077: NEG
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: PUSH
44083: LD_INT 1
44085: PUSH
44086: LD_INT 2
44088: NEG
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: LD_INT 2
44096: PUSH
44097: LD_INT 1
44099: NEG
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: LIST
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44130: LD_ADDR_VAR 0 24
44134: PUSH
44135: LD_INT 0
44137: PUSH
44138: LD_INT 0
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: PUSH
44145: LD_INT 0
44147: PUSH
44148: LD_INT 1
44150: NEG
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 1
44158: PUSH
44159: LD_INT 0
44161: PUSH
44162: EMPTY
44163: LIST
44164: LIST
44165: PUSH
44166: LD_INT 1
44168: PUSH
44169: LD_INT 1
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: PUSH
44176: LD_INT 0
44178: PUSH
44179: LD_INT 1
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 1
44188: NEG
44189: PUSH
44190: LD_INT 0
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 1
44199: NEG
44200: PUSH
44201: LD_INT 1
44203: NEG
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: LD_INT 1
44211: NEG
44212: PUSH
44213: LD_INT 2
44215: NEG
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PUSH
44221: LD_INT 0
44223: PUSH
44224: LD_INT 2
44226: NEG
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 1
44234: PUSH
44235: LD_INT 1
44237: NEG
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 2
44245: PUSH
44246: LD_INT 0
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 2
44255: PUSH
44256: LD_INT 1
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 2
44265: PUSH
44266: LD_INT 2
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: LD_INT 1
44275: PUSH
44276: LD_INT 2
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 0
44285: PUSH
44286: LD_INT 2
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: LD_INT 1
44295: NEG
44296: PUSH
44297: LD_INT 1
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: LD_INT 2
44306: NEG
44307: PUSH
44308: LD_INT 0
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 2
44317: NEG
44318: PUSH
44319: LD_INT 1
44321: NEG
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 2
44329: NEG
44330: PUSH
44331: LD_INT 2
44333: NEG
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: PUSH
44339: LD_INT 1
44341: PUSH
44342: LD_INT 2
44344: NEG
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 2
44352: PUSH
44353: LD_INT 1
44355: NEG
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 3
44363: PUSH
44364: LD_INT 1
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 3
44373: PUSH
44374: LD_INT 2
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44406: LD_ADDR_VAR 0 25
44410: PUSH
44411: LD_INT 0
44413: PUSH
44414: LD_INT 0
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: LD_INT 0
44423: PUSH
44424: LD_INT 1
44426: NEG
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: LD_INT 1
44434: PUSH
44435: LD_INT 0
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 1
44444: PUSH
44445: LD_INT 1
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: LD_INT 0
44454: PUSH
44455: LD_INT 1
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 1
44464: NEG
44465: PUSH
44466: LD_INT 0
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 1
44475: NEG
44476: PUSH
44477: LD_INT 1
44479: NEG
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: LD_INT 1
44487: NEG
44488: PUSH
44489: LD_INT 2
44491: NEG
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 0
44499: PUSH
44500: LD_INT 2
44502: NEG
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PUSH
44508: LD_INT 1
44510: PUSH
44511: LD_INT 1
44513: NEG
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 2
44521: PUSH
44522: LD_INT 0
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 2
44531: PUSH
44532: LD_INT 1
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 2
44541: PUSH
44542: LD_INT 2
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: LD_INT 1
44551: PUSH
44552: LD_INT 2
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: LD_INT 0
44561: PUSH
44562: LD_INT 2
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: PUSH
44569: LD_INT 1
44571: NEG
44572: PUSH
44573: LD_INT 1
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: LD_INT 2
44582: NEG
44583: PUSH
44584: LD_INT 0
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 2
44593: NEG
44594: PUSH
44595: LD_INT 1
44597: NEG
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 2
44605: NEG
44606: PUSH
44607: LD_INT 2
44609: NEG
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: PUSH
44615: LD_INT 3
44617: PUSH
44618: LD_INT 1
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: PUSH
44625: LD_INT 3
44627: PUSH
44628: LD_INT 2
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: LD_INT 2
44637: PUSH
44638: LD_INT 3
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: PUSH
44645: LD_INT 1
44647: PUSH
44648: LD_INT 3
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: LIST
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: LIST
44678: LIST
44679: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44680: LD_ADDR_VAR 0 26
44684: PUSH
44685: LD_INT 0
44687: PUSH
44688: LD_INT 0
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PUSH
44695: LD_INT 0
44697: PUSH
44698: LD_INT 1
44700: NEG
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: PUSH
44706: LD_INT 1
44708: PUSH
44709: LD_INT 0
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: PUSH
44716: LD_INT 1
44718: PUSH
44719: LD_INT 1
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: LD_INT 0
44728: PUSH
44729: LD_INT 1
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 1
44738: NEG
44739: PUSH
44740: LD_INT 0
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: LD_INT 1
44749: NEG
44750: PUSH
44751: LD_INT 1
44753: NEG
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: LD_INT 1
44761: NEG
44762: PUSH
44763: LD_INT 2
44765: NEG
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: LD_INT 0
44773: PUSH
44774: LD_INT 2
44776: NEG
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: LD_INT 1
44784: PUSH
44785: LD_INT 1
44787: NEG
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_INT 2
44795: PUSH
44796: LD_INT 0
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 2
44805: PUSH
44806: LD_INT 1
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: LD_INT 2
44815: PUSH
44816: LD_INT 2
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: LD_INT 1
44825: PUSH
44826: LD_INT 2
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: LD_INT 0
44835: PUSH
44836: LD_INT 2
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 1
44845: NEG
44846: PUSH
44847: LD_INT 1
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 2
44856: NEG
44857: PUSH
44858: LD_INT 0
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 2
44867: NEG
44868: PUSH
44869: LD_INT 1
44871: NEG
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 2
44879: NEG
44880: PUSH
44881: LD_INT 2
44883: NEG
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 2
44891: PUSH
44892: LD_INT 3
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 1
44901: PUSH
44902: LD_INT 3
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 1
44911: NEG
44912: PUSH
44913: LD_INT 2
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 2
44922: NEG
44923: PUSH
44924: LD_INT 1
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: LIST
44937: LIST
44938: LIST
44939: LIST
44940: LIST
44941: LIST
44942: LIST
44943: LIST
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: LIST
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44956: LD_ADDR_VAR 0 27
44960: PUSH
44961: LD_INT 0
44963: PUSH
44964: LD_INT 0
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 0
44973: PUSH
44974: LD_INT 1
44976: NEG
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: LD_INT 1
44984: PUSH
44985: LD_INT 0
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: LD_INT 1
44994: PUSH
44995: LD_INT 1
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 0
45004: PUSH
45005: LD_INT 1
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: PUSH
45012: LD_INT 1
45014: NEG
45015: PUSH
45016: LD_INT 0
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: LD_INT 1
45025: NEG
45026: PUSH
45027: LD_INT 1
45029: NEG
45030: PUSH
45031: EMPTY
45032: LIST
45033: LIST
45034: PUSH
45035: LD_INT 1
45037: NEG
45038: PUSH
45039: LD_INT 2
45041: NEG
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 0
45049: PUSH
45050: LD_INT 2
45052: NEG
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: PUSH
45058: LD_INT 1
45060: PUSH
45061: LD_INT 1
45063: NEG
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: LD_INT 2
45071: PUSH
45072: LD_INT 0
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 2
45081: PUSH
45082: LD_INT 1
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 2
45091: PUSH
45092: LD_INT 2
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 1
45101: PUSH
45102: LD_INT 2
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: LD_INT 0
45111: PUSH
45112: LD_INT 2
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 1
45121: NEG
45122: PUSH
45123: LD_INT 1
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 2
45132: NEG
45133: PUSH
45134: LD_INT 0
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PUSH
45141: LD_INT 2
45143: NEG
45144: PUSH
45145: LD_INT 1
45147: NEG
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: PUSH
45153: LD_INT 2
45155: NEG
45156: PUSH
45157: LD_INT 2
45159: NEG
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: PUSH
45165: LD_INT 1
45167: NEG
45168: PUSH
45169: LD_INT 2
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 2
45178: NEG
45179: PUSH
45180: LD_INT 1
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 3
45189: NEG
45190: PUSH
45191: LD_INT 1
45193: NEG
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: LD_INT 3
45201: NEG
45202: PUSH
45203: LD_INT 2
45205: NEG
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45236: LD_ADDR_VAR 0 28
45240: PUSH
45241: LD_INT 0
45243: PUSH
45244: LD_INT 0
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: PUSH
45251: LD_INT 0
45253: PUSH
45254: LD_INT 1
45256: NEG
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: PUSH
45262: LD_INT 1
45264: PUSH
45265: LD_INT 0
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: PUSH
45272: LD_INT 1
45274: PUSH
45275: LD_INT 1
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 0
45284: PUSH
45285: LD_INT 1
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 1
45294: NEG
45295: PUSH
45296: LD_INT 0
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: LD_INT 1
45305: NEG
45306: PUSH
45307: LD_INT 1
45309: NEG
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: LD_INT 1
45317: NEG
45318: PUSH
45319: LD_INT 2
45321: NEG
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PUSH
45327: LD_INT 0
45329: PUSH
45330: LD_INT 2
45332: NEG
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: PUSH
45338: LD_INT 1
45340: PUSH
45341: LD_INT 1
45343: NEG
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 2
45351: PUSH
45352: LD_INT 0
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 2
45361: PUSH
45362: LD_INT 1
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: PUSH
45369: LD_INT 2
45371: PUSH
45372: LD_INT 2
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 1
45381: PUSH
45382: LD_INT 2
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 0
45391: PUSH
45392: LD_INT 2
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 1
45401: NEG
45402: PUSH
45403: LD_INT 1
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 2
45412: NEG
45413: PUSH
45414: LD_INT 0
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 2
45423: NEG
45424: PUSH
45425: LD_INT 1
45427: NEG
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PUSH
45433: LD_INT 2
45435: NEG
45436: PUSH
45437: LD_INT 2
45439: NEG
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: LD_INT 2
45447: NEG
45448: PUSH
45449: LD_INT 3
45451: NEG
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 1
45459: NEG
45460: PUSH
45461: LD_INT 3
45463: NEG
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 3
45471: NEG
45472: PUSH
45473: LD_INT 1
45475: NEG
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: PUSH
45481: LD_INT 3
45483: NEG
45484: PUSH
45485: LD_INT 2
45487: NEG
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45518: LD_ADDR_VAR 0 29
45522: PUSH
45523: LD_INT 0
45525: PUSH
45526: LD_INT 0
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 0
45535: PUSH
45536: LD_INT 1
45538: NEG
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: LD_INT 1
45546: PUSH
45547: LD_INT 0
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: PUSH
45554: LD_INT 1
45556: PUSH
45557: LD_INT 1
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 0
45566: PUSH
45567: LD_INT 1
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 1
45576: NEG
45577: PUSH
45578: LD_INT 0
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 1
45587: NEG
45588: PUSH
45589: LD_INT 1
45591: NEG
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 1
45599: NEG
45600: PUSH
45601: LD_INT 2
45603: NEG
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 0
45611: PUSH
45612: LD_INT 2
45614: NEG
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 1
45622: PUSH
45623: LD_INT 1
45625: NEG
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: LD_INT 2
45633: PUSH
45634: LD_INT 0
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 2
45643: PUSH
45644: LD_INT 1
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 1
45653: PUSH
45654: LD_INT 2
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 0
45663: PUSH
45664: LD_INT 2
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 1
45673: NEG
45674: PUSH
45675: LD_INT 1
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 2
45684: NEG
45685: PUSH
45686: LD_INT 1
45688: NEG
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: LD_INT 2
45696: NEG
45697: PUSH
45698: LD_INT 2
45700: NEG
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: LD_INT 2
45708: NEG
45709: PUSH
45710: LD_INT 3
45712: NEG
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 2
45720: PUSH
45721: LD_INT 1
45723: NEG
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 3
45731: PUSH
45732: LD_INT 1
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 1
45741: PUSH
45742: LD_INT 3
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 1
45751: NEG
45752: PUSH
45753: LD_INT 2
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: PUSH
45760: LD_INT 3
45762: NEG
45763: PUSH
45764: LD_INT 2
45766: NEG
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: LIST
45779: LIST
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45797: LD_ADDR_VAR 0 30
45801: PUSH
45802: LD_INT 0
45804: PUSH
45805: LD_INT 0
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 0
45814: PUSH
45815: LD_INT 1
45817: NEG
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: LD_INT 1
45825: PUSH
45826: LD_INT 0
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 1
45835: PUSH
45836: LD_INT 1
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 0
45845: PUSH
45846: LD_INT 1
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 1
45855: NEG
45856: PUSH
45857: LD_INT 0
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: LD_INT 1
45866: NEG
45867: PUSH
45868: LD_INT 1
45870: NEG
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 1
45878: NEG
45879: PUSH
45880: LD_INT 2
45882: NEG
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: PUSH
45888: LD_INT 0
45890: PUSH
45891: LD_INT 2
45893: NEG
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 1
45901: PUSH
45902: LD_INT 1
45904: NEG
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 2
45912: PUSH
45913: LD_INT 0
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 2
45922: PUSH
45923: LD_INT 1
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 2
45932: PUSH
45933: LD_INT 2
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 1
45942: PUSH
45943: LD_INT 2
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 1
45952: NEG
45953: PUSH
45954: LD_INT 1
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 2
45963: NEG
45964: PUSH
45965: LD_INT 0
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 2
45974: NEG
45975: PUSH
45976: LD_INT 1
45978: NEG
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 1
45986: NEG
45987: PUSH
45988: LD_INT 3
45990: NEG
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 1
45998: PUSH
45999: LD_INT 2
46001: NEG
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 3
46009: PUSH
46010: LD_INT 2
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: LD_INT 2
46019: PUSH
46020: LD_INT 3
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 2
46029: NEG
46030: PUSH
46031: LD_INT 1
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 3
46040: NEG
46041: PUSH
46042: LD_INT 1
46044: NEG
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: LIST
46058: LIST
46059: LIST
46060: LIST
46061: LIST
46062: LIST
46063: LIST
46064: LIST
46065: LIST
46066: LIST
46067: LIST
46068: LIST
46069: LIST
46070: LIST
46071: LIST
46072: LIST
46073: LIST
46074: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46075: LD_ADDR_VAR 0 31
46079: PUSH
46080: LD_INT 0
46082: PUSH
46083: LD_INT 0
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 0
46092: PUSH
46093: LD_INT 1
46095: NEG
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 1
46103: PUSH
46104: LD_INT 0
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 1
46113: PUSH
46114: LD_INT 1
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 0
46123: PUSH
46124: LD_INT 1
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 1
46133: NEG
46134: PUSH
46135: LD_INT 0
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 1
46144: NEG
46145: PUSH
46146: LD_INT 1
46148: NEG
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: PUSH
46154: LD_INT 1
46156: NEG
46157: PUSH
46158: LD_INT 2
46160: NEG
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 1
46168: PUSH
46169: LD_INT 1
46171: NEG
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: LD_INT 2
46179: PUSH
46180: LD_INT 0
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 2
46189: PUSH
46190: LD_INT 1
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 2
46199: PUSH
46200: LD_INT 2
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 1
46209: PUSH
46210: LD_INT 2
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 0
46219: PUSH
46220: LD_INT 2
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: PUSH
46227: LD_INT 1
46229: NEG
46230: PUSH
46231: LD_INT 1
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: LD_INT 2
46240: NEG
46241: PUSH
46242: LD_INT 1
46244: NEG
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 2
46252: NEG
46253: PUSH
46254: LD_INT 2
46256: NEG
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 2
46264: NEG
46265: PUSH
46266: LD_INT 3
46268: NEG
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 2
46276: PUSH
46277: LD_INT 1
46279: NEG
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 3
46287: PUSH
46288: LD_INT 1
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 1
46297: PUSH
46298: LD_INT 3
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: LD_INT 1
46307: NEG
46308: PUSH
46309: LD_INT 2
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 3
46318: NEG
46319: PUSH
46320: LD_INT 2
46322: NEG
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46353: LD_ADDR_VAR 0 32
46357: PUSH
46358: LD_INT 0
46360: PUSH
46361: LD_INT 0
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 0
46370: PUSH
46371: LD_INT 1
46373: NEG
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 1
46381: PUSH
46382: LD_INT 0
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 1
46391: PUSH
46392: LD_INT 1
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 0
46401: PUSH
46402: LD_INT 1
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 1
46411: NEG
46412: PUSH
46413: LD_INT 0
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 1
46422: NEG
46423: PUSH
46424: LD_INT 1
46426: NEG
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 1
46434: NEG
46435: PUSH
46436: LD_INT 2
46438: NEG
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 0
46446: PUSH
46447: LD_INT 2
46449: NEG
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 1
46457: PUSH
46458: LD_INT 1
46460: NEG
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: PUSH
46466: LD_INT 2
46468: PUSH
46469: LD_INT 1
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 2
46478: PUSH
46479: LD_INT 2
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 1
46488: PUSH
46489: LD_INT 2
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: PUSH
46496: LD_INT 0
46498: PUSH
46499: LD_INT 2
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 1
46508: NEG
46509: PUSH
46510: LD_INT 1
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 2
46519: NEG
46520: PUSH
46521: LD_INT 0
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 2
46530: NEG
46531: PUSH
46532: LD_INT 1
46534: NEG
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 1
46542: NEG
46543: PUSH
46544: LD_INT 3
46546: NEG
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 1
46554: PUSH
46555: LD_INT 2
46557: NEG
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 3
46565: PUSH
46566: LD_INT 2
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: LD_INT 2
46575: PUSH
46576: LD_INT 3
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 2
46585: NEG
46586: PUSH
46587: LD_INT 1
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 3
46596: NEG
46597: PUSH
46598: LD_INT 1
46600: NEG
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46631: LD_ADDR_VAR 0 33
46635: PUSH
46636: LD_INT 0
46638: PUSH
46639: LD_INT 0
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 0
46648: PUSH
46649: LD_INT 1
46651: NEG
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 1
46659: PUSH
46660: LD_INT 0
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 1
46669: PUSH
46670: LD_INT 1
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 0
46679: PUSH
46680: LD_INT 1
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 1
46689: NEG
46690: PUSH
46691: LD_INT 0
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 1
46700: NEG
46701: PUSH
46702: LD_INT 1
46704: NEG
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 1
46712: NEG
46713: PUSH
46714: LD_INT 2
46716: NEG
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 1
46724: PUSH
46725: LD_INT 1
46727: NEG
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 2
46735: PUSH
46736: LD_INT 0
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 2
46745: PUSH
46746: LD_INT 1
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: LD_INT 1
46755: PUSH
46756: LD_INT 2
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 0
46765: PUSH
46766: LD_INT 2
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 1
46775: NEG
46776: PUSH
46777: LD_INT 1
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 2
46786: NEG
46787: PUSH
46788: LD_INT 0
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: LD_INT 2
46797: NEG
46798: PUSH
46799: LD_INT 1
46801: NEG
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 2
46809: NEG
46810: PUSH
46811: LD_INT 2
46813: NEG
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 2
46821: NEG
46822: PUSH
46823: LD_INT 3
46825: NEG
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 2
46833: PUSH
46834: LD_INT 1
46836: NEG
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 3
46844: PUSH
46845: LD_INT 1
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 1
46854: PUSH
46855: LD_INT 3
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 1
46864: NEG
46865: PUSH
46866: LD_INT 2
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 3
46875: NEG
46876: PUSH
46877: LD_INT 2
46879: NEG
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46910: LD_ADDR_VAR 0 34
46914: PUSH
46915: LD_INT 0
46917: PUSH
46918: LD_INT 0
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 0
46927: PUSH
46928: LD_INT 1
46930: NEG
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 1
46938: PUSH
46939: LD_INT 0
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 1
46948: PUSH
46949: LD_INT 1
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 0
46958: PUSH
46959: LD_INT 1
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 1
46968: NEG
46969: PUSH
46970: LD_INT 0
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 1
46979: NEG
46980: PUSH
46981: LD_INT 1
46983: NEG
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 1
46991: NEG
46992: PUSH
46993: LD_INT 2
46995: NEG
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: PUSH
47001: LD_INT 0
47003: PUSH
47004: LD_INT 2
47006: NEG
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 1
47014: PUSH
47015: LD_INT 1
47017: NEG
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 2
47025: PUSH
47026: LD_INT 1
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 2
47035: PUSH
47036: LD_INT 2
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 1
47045: PUSH
47046: LD_INT 2
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 1
47055: NEG
47056: PUSH
47057: LD_INT 1
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 2
47066: NEG
47067: PUSH
47068: LD_INT 0
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 2
47077: NEG
47078: PUSH
47079: LD_INT 1
47081: NEG
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 2
47089: NEG
47090: PUSH
47091: LD_INT 2
47093: NEG
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 1
47101: NEG
47102: PUSH
47103: LD_INT 3
47105: NEG
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: LD_INT 1
47113: PUSH
47114: LD_INT 2
47116: NEG
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 3
47124: PUSH
47125: LD_INT 2
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 2
47134: PUSH
47135: LD_INT 3
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 2
47144: NEG
47145: PUSH
47146: LD_INT 1
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 3
47155: NEG
47156: PUSH
47157: LD_INT 1
47159: NEG
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47190: LD_ADDR_VAR 0 35
47194: PUSH
47195: LD_INT 0
47197: PUSH
47198: LD_INT 0
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 0
47207: PUSH
47208: LD_INT 1
47210: NEG
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 1
47218: PUSH
47219: LD_INT 0
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 1
47228: PUSH
47229: LD_INT 1
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 0
47238: PUSH
47239: LD_INT 1
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 1
47248: NEG
47249: PUSH
47250: LD_INT 0
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 1
47259: NEG
47260: PUSH
47261: LD_INT 1
47263: NEG
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PUSH
47269: LD_INT 2
47271: PUSH
47272: LD_INT 1
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: PUSH
47279: LD_INT 2
47281: NEG
47282: PUSH
47283: LD_INT 1
47285: NEG
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47302: LD_ADDR_VAR 0 36
47306: PUSH
47307: LD_INT 0
47309: PUSH
47310: LD_INT 0
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: LD_INT 0
47319: PUSH
47320: LD_INT 1
47322: NEG
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 1
47330: PUSH
47331: LD_INT 0
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 1
47340: PUSH
47341: LD_INT 1
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 0
47350: PUSH
47351: LD_INT 1
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 1
47360: NEG
47361: PUSH
47362: LD_INT 0
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 1
47371: NEG
47372: PUSH
47373: LD_INT 1
47375: NEG
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 1
47383: NEG
47384: PUSH
47385: LD_INT 2
47387: NEG
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 1
47395: PUSH
47396: LD_INT 2
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47414: LD_ADDR_VAR 0 37
47418: PUSH
47419: LD_INT 0
47421: PUSH
47422: LD_INT 0
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 0
47431: PUSH
47432: LD_INT 1
47434: NEG
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 1
47442: PUSH
47443: LD_INT 0
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 1
47452: PUSH
47453: LD_INT 1
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: LD_INT 0
47462: PUSH
47463: LD_INT 1
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 1
47472: NEG
47473: PUSH
47474: LD_INT 0
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 1
47483: NEG
47484: PUSH
47485: LD_INT 1
47487: NEG
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 1
47495: PUSH
47496: LD_INT 1
47498: NEG
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 1
47506: NEG
47507: PUSH
47508: LD_INT 1
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: LIST
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47526: LD_ADDR_VAR 0 38
47530: PUSH
47531: LD_INT 0
47533: PUSH
47534: LD_INT 0
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 0
47543: PUSH
47544: LD_INT 1
47546: NEG
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 1
47554: PUSH
47555: LD_INT 0
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 1
47564: PUSH
47565: LD_INT 1
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 0
47574: PUSH
47575: LD_INT 1
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 1
47584: NEG
47585: PUSH
47586: LD_INT 0
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 1
47595: NEG
47596: PUSH
47597: LD_INT 1
47599: NEG
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 2
47607: PUSH
47608: LD_INT 1
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 2
47617: NEG
47618: PUSH
47619: LD_INT 1
47621: NEG
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47638: LD_ADDR_VAR 0 39
47642: PUSH
47643: LD_INT 0
47645: PUSH
47646: LD_INT 0
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 0
47655: PUSH
47656: LD_INT 1
47658: NEG
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 1
47666: PUSH
47667: LD_INT 0
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 1
47676: PUSH
47677: LD_INT 1
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 0
47686: PUSH
47687: LD_INT 1
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 1
47696: NEG
47697: PUSH
47698: LD_INT 0
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: LD_INT 1
47707: NEG
47708: PUSH
47709: LD_INT 1
47711: NEG
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 1
47719: NEG
47720: PUSH
47721: LD_INT 2
47723: NEG
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: LD_INT 1
47731: PUSH
47732: LD_INT 2
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47750: LD_ADDR_VAR 0 40
47754: PUSH
47755: LD_INT 0
47757: PUSH
47758: LD_INT 0
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 0
47767: PUSH
47768: LD_INT 1
47770: NEG
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: LD_INT 1
47778: PUSH
47779: LD_INT 0
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 1
47788: PUSH
47789: LD_INT 1
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 0
47798: PUSH
47799: LD_INT 1
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 1
47808: NEG
47809: PUSH
47810: LD_INT 0
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 1
47819: NEG
47820: PUSH
47821: LD_INT 1
47823: NEG
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 1
47831: PUSH
47832: LD_INT 1
47834: NEG
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 1
47842: NEG
47843: PUSH
47844: LD_INT 1
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47862: LD_ADDR_VAR 0 41
47866: PUSH
47867: LD_INT 0
47869: PUSH
47870: LD_INT 0
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 0
47879: PUSH
47880: LD_INT 1
47882: NEG
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 1
47890: PUSH
47891: LD_INT 0
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 1
47900: PUSH
47901: LD_INT 1
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 0
47910: PUSH
47911: LD_INT 1
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 1
47920: NEG
47921: PUSH
47922: LD_INT 0
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 1
47931: NEG
47932: PUSH
47933: LD_INT 1
47935: NEG
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 1
47943: NEG
47944: PUSH
47945: LD_INT 2
47947: NEG
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 1
47955: PUSH
47956: LD_INT 1
47958: NEG
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 2
47966: PUSH
47967: LD_INT 0
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 2
47976: PUSH
47977: LD_INT 1
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 2
47986: PUSH
47987: LD_INT 2
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 1
47996: PUSH
47997: LD_INT 2
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 1
48006: NEG
48007: PUSH
48008: LD_INT 1
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 2
48017: NEG
48018: PUSH
48019: LD_INT 0
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 2
48028: NEG
48029: PUSH
48030: LD_INT 1
48032: NEG
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 2
48040: NEG
48041: PUSH
48042: LD_INT 2
48044: NEG
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 2
48052: NEG
48053: PUSH
48054: LD_INT 3
48056: NEG
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 2
48064: PUSH
48065: LD_INT 1
48067: NEG
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 3
48075: PUSH
48076: LD_INT 0
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 3
48085: PUSH
48086: LD_INT 1
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 3
48095: PUSH
48096: LD_INT 2
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 3
48105: PUSH
48106: LD_INT 3
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 2
48115: PUSH
48116: LD_INT 3
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 2
48125: NEG
48126: PUSH
48127: LD_INT 1
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 3
48136: NEG
48137: PUSH
48138: LD_INT 0
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 3
48147: NEG
48148: PUSH
48149: LD_INT 1
48151: NEG
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 3
48159: NEG
48160: PUSH
48161: LD_INT 2
48163: NEG
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: LD_INT 3
48171: NEG
48172: PUSH
48173: LD_INT 3
48175: NEG
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48212: LD_ADDR_VAR 0 42
48216: PUSH
48217: LD_INT 0
48219: PUSH
48220: LD_INT 0
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 0
48229: PUSH
48230: LD_INT 1
48232: NEG
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 1
48240: PUSH
48241: LD_INT 0
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 1
48250: PUSH
48251: LD_INT 1
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 0
48260: PUSH
48261: LD_INT 1
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 1
48270: NEG
48271: PUSH
48272: LD_INT 0
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 1
48281: NEG
48282: PUSH
48283: LD_INT 1
48285: NEG
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 1
48293: NEG
48294: PUSH
48295: LD_INT 2
48297: NEG
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 0
48305: PUSH
48306: LD_INT 2
48308: NEG
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: LD_INT 1
48316: PUSH
48317: LD_INT 1
48319: NEG
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 2
48327: PUSH
48328: LD_INT 1
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 2
48337: PUSH
48338: LD_INT 2
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 1
48347: PUSH
48348: LD_INT 2
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 0
48357: PUSH
48358: LD_INT 2
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 1
48367: NEG
48368: PUSH
48369: LD_INT 1
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: LD_INT 2
48378: NEG
48379: PUSH
48380: LD_INT 1
48382: NEG
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 2
48390: NEG
48391: PUSH
48392: LD_INT 2
48394: NEG
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: PUSH
48400: LD_INT 2
48402: NEG
48403: PUSH
48404: LD_INT 3
48406: NEG
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 1
48414: NEG
48415: PUSH
48416: LD_INT 3
48418: NEG
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 0
48426: PUSH
48427: LD_INT 3
48429: NEG
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 1
48437: PUSH
48438: LD_INT 2
48440: NEG
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 3
48448: PUSH
48449: LD_INT 2
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: LD_INT 3
48458: PUSH
48459: LD_INT 3
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 2
48468: PUSH
48469: LD_INT 3
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 1
48478: PUSH
48479: LD_INT 3
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 0
48488: PUSH
48489: LD_INT 3
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 1
48498: NEG
48499: PUSH
48500: LD_INT 2
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 3
48509: NEG
48510: PUSH
48511: LD_INT 2
48513: NEG
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 3
48521: NEG
48522: PUSH
48523: LD_INT 3
48525: NEG
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48562: LD_ADDR_VAR 0 43
48566: PUSH
48567: LD_INT 0
48569: PUSH
48570: LD_INT 0
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PUSH
48577: LD_INT 0
48579: PUSH
48580: LD_INT 1
48582: NEG
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 1
48590: PUSH
48591: LD_INT 0
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 1
48600: PUSH
48601: LD_INT 1
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: LD_INT 0
48610: PUSH
48611: LD_INT 1
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: PUSH
48618: LD_INT 1
48620: NEG
48621: PUSH
48622: LD_INT 0
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 1
48631: NEG
48632: PUSH
48633: LD_INT 1
48635: NEG
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 1
48643: NEG
48644: PUSH
48645: LD_INT 2
48647: NEG
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: PUSH
48653: LD_INT 0
48655: PUSH
48656: LD_INT 2
48658: NEG
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: LD_INT 1
48666: PUSH
48667: LD_INT 1
48669: NEG
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 2
48677: PUSH
48678: LD_INT 0
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 2
48687: PUSH
48688: LD_INT 1
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 1
48697: PUSH
48698: LD_INT 2
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 0
48707: PUSH
48708: LD_INT 2
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: PUSH
48715: LD_INT 1
48717: NEG
48718: PUSH
48719: LD_INT 1
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: LD_INT 2
48728: NEG
48729: PUSH
48730: LD_INT 0
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 2
48739: NEG
48740: PUSH
48741: LD_INT 1
48743: NEG
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 1
48751: NEG
48752: PUSH
48753: LD_INT 3
48755: NEG
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 0
48763: PUSH
48764: LD_INT 3
48766: NEG
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 1
48774: PUSH
48775: LD_INT 2
48777: NEG
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 2
48785: PUSH
48786: LD_INT 1
48788: NEG
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 3
48796: PUSH
48797: LD_INT 0
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 3
48806: PUSH
48807: LD_INT 1
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 1
48816: PUSH
48817: LD_INT 3
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PUSH
48824: LD_INT 0
48826: PUSH
48827: LD_INT 3
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 1
48836: NEG
48837: PUSH
48838: LD_INT 2
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 2
48847: NEG
48848: PUSH
48849: LD_INT 1
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 3
48858: NEG
48859: PUSH
48860: LD_INT 0
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 3
48869: NEG
48870: PUSH
48871: LD_INT 1
48873: NEG
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48910: LD_ADDR_VAR 0 44
48914: PUSH
48915: LD_INT 0
48917: PUSH
48918: LD_INT 0
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 0
48927: PUSH
48928: LD_INT 1
48930: NEG
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 1
48938: PUSH
48939: LD_INT 0
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 1
48948: PUSH
48949: LD_INT 1
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 0
48958: PUSH
48959: LD_INT 1
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 1
48968: NEG
48969: PUSH
48970: LD_INT 0
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 1
48979: NEG
48980: PUSH
48981: LD_INT 1
48983: NEG
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 1
48991: NEG
48992: PUSH
48993: LD_INT 2
48995: NEG
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 1
49003: PUSH
49004: LD_INT 1
49006: NEG
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 2
49014: PUSH
49015: LD_INT 0
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 2
49024: PUSH
49025: LD_INT 1
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 2
49034: PUSH
49035: LD_INT 2
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 1
49044: PUSH
49045: LD_INT 2
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 1
49054: NEG
49055: PUSH
49056: LD_INT 1
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 2
49065: NEG
49066: PUSH
49067: LD_INT 0
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 2
49076: NEG
49077: PUSH
49078: LD_INT 1
49080: NEG
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 2
49088: NEG
49089: PUSH
49090: LD_INT 2
49092: NEG
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 2
49100: NEG
49101: PUSH
49102: LD_INT 3
49104: NEG
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: PUSH
49110: LD_INT 2
49112: PUSH
49113: LD_INT 1
49115: NEG
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: LD_INT 3
49123: PUSH
49124: LD_INT 0
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 3
49133: PUSH
49134: LD_INT 1
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 3
49143: PUSH
49144: LD_INT 2
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 3
49153: PUSH
49154: LD_INT 3
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 2
49163: PUSH
49164: LD_INT 3
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 2
49173: NEG
49174: PUSH
49175: LD_INT 1
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 3
49184: NEG
49185: PUSH
49186: LD_INT 0
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 3
49195: NEG
49196: PUSH
49197: LD_INT 1
49199: NEG
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 3
49207: NEG
49208: PUSH
49209: LD_INT 2
49211: NEG
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 3
49219: NEG
49220: PUSH
49221: LD_INT 3
49223: NEG
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49260: LD_ADDR_VAR 0 45
49264: PUSH
49265: LD_INT 0
49267: PUSH
49268: LD_INT 0
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: LD_INT 0
49277: PUSH
49278: LD_INT 1
49280: NEG
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 1
49288: PUSH
49289: LD_INT 0
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 1
49298: PUSH
49299: LD_INT 1
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 0
49308: PUSH
49309: LD_INT 1
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 1
49318: NEG
49319: PUSH
49320: LD_INT 0
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 1
49329: NEG
49330: PUSH
49331: LD_INT 1
49333: NEG
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 1
49341: NEG
49342: PUSH
49343: LD_INT 2
49345: NEG
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 0
49353: PUSH
49354: LD_INT 2
49356: NEG
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 1
49364: PUSH
49365: LD_INT 1
49367: NEG
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 2
49375: PUSH
49376: LD_INT 1
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 2
49385: PUSH
49386: LD_INT 2
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 1
49395: PUSH
49396: LD_INT 2
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 0
49405: PUSH
49406: LD_INT 2
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 1
49415: NEG
49416: PUSH
49417: LD_INT 1
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 2
49426: NEG
49427: PUSH
49428: LD_INT 1
49430: NEG
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 2
49438: NEG
49439: PUSH
49440: LD_INT 2
49442: NEG
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 2
49450: NEG
49451: PUSH
49452: LD_INT 3
49454: NEG
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 1
49462: NEG
49463: PUSH
49464: LD_INT 3
49466: NEG
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 0
49474: PUSH
49475: LD_INT 3
49477: NEG
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: PUSH
49483: LD_INT 1
49485: PUSH
49486: LD_INT 2
49488: NEG
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: LD_INT 3
49496: PUSH
49497: LD_INT 2
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 3
49506: PUSH
49507: LD_INT 3
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: LD_INT 2
49516: PUSH
49517: LD_INT 3
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 1
49526: PUSH
49527: LD_INT 3
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 0
49536: PUSH
49537: LD_INT 3
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 1
49546: NEG
49547: PUSH
49548: LD_INT 2
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 3
49557: NEG
49558: PUSH
49559: LD_INT 2
49561: NEG
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 3
49569: NEG
49570: PUSH
49571: LD_INT 3
49573: NEG
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: LIST
49604: LIST
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49610: LD_ADDR_VAR 0 46
49614: PUSH
49615: LD_INT 0
49617: PUSH
49618: LD_INT 0
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 0
49627: PUSH
49628: LD_INT 1
49630: NEG
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 1
49638: PUSH
49639: LD_INT 0
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 1
49648: PUSH
49649: LD_INT 1
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: LD_INT 0
49658: PUSH
49659: LD_INT 1
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 1
49668: NEG
49669: PUSH
49670: LD_INT 0
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 1
49679: NEG
49680: PUSH
49681: LD_INT 1
49683: NEG
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: LD_INT 1
49691: NEG
49692: PUSH
49693: LD_INT 2
49695: NEG
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 0
49703: PUSH
49704: LD_INT 2
49706: NEG
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 1
49714: PUSH
49715: LD_INT 1
49717: NEG
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: PUSH
49723: LD_INT 2
49725: PUSH
49726: LD_INT 0
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 2
49735: PUSH
49736: LD_INT 1
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 1
49745: PUSH
49746: LD_INT 2
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 0
49755: PUSH
49756: LD_INT 2
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 1
49765: NEG
49766: PUSH
49767: LD_INT 1
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 2
49776: NEG
49777: PUSH
49778: LD_INT 0
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 2
49787: NEG
49788: PUSH
49789: LD_INT 1
49791: NEG
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 1
49799: NEG
49800: PUSH
49801: LD_INT 3
49803: NEG
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: LD_INT 0
49811: PUSH
49812: LD_INT 3
49814: NEG
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 1
49822: PUSH
49823: LD_INT 2
49825: NEG
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 2
49833: PUSH
49834: LD_INT 1
49836: NEG
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 3
49844: PUSH
49845: LD_INT 0
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 3
49854: PUSH
49855: LD_INT 1
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 1
49864: PUSH
49865: LD_INT 3
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 0
49874: PUSH
49875: LD_INT 3
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 1
49884: NEG
49885: PUSH
49886: LD_INT 2
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 2
49895: NEG
49896: PUSH
49897: LD_INT 1
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 3
49906: NEG
49907: PUSH
49908: LD_INT 0
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 3
49917: NEG
49918: PUSH
49919: LD_INT 1
49921: NEG
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49958: LD_ADDR_VAR 0 47
49962: PUSH
49963: LD_INT 0
49965: PUSH
49966: LD_INT 0
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 0
49975: PUSH
49976: LD_INT 1
49978: NEG
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 1
49986: PUSH
49987: LD_INT 0
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 1
49996: PUSH
49997: LD_INT 1
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: LD_INT 0
50006: PUSH
50007: LD_INT 1
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: LD_INT 1
50016: NEG
50017: PUSH
50018: LD_INT 0
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 1
50027: NEG
50028: PUSH
50029: LD_INT 1
50031: NEG
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 1
50039: NEG
50040: PUSH
50041: LD_INT 2
50043: NEG
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 0
50051: PUSH
50052: LD_INT 2
50054: NEG
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 1
50062: PUSH
50063: LD_INT 1
50065: NEG
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 2
50073: NEG
50074: PUSH
50075: LD_INT 1
50077: NEG
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 2
50085: NEG
50086: PUSH
50087: LD_INT 2
50089: NEG
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: LIST
50101: LIST
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50109: LD_ADDR_VAR 0 48
50113: PUSH
50114: LD_INT 0
50116: PUSH
50117: LD_INT 0
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 0
50126: PUSH
50127: LD_INT 1
50129: NEG
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 1
50137: PUSH
50138: LD_INT 0
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 1
50147: PUSH
50148: LD_INT 1
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 0
50157: PUSH
50158: LD_INT 1
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 1
50167: NEG
50168: PUSH
50169: LD_INT 0
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 1
50178: NEG
50179: PUSH
50180: LD_INT 1
50182: NEG
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 1
50190: NEG
50191: PUSH
50192: LD_INT 2
50194: NEG
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 0
50202: PUSH
50203: LD_INT 2
50205: NEG
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 1
50213: PUSH
50214: LD_INT 1
50216: NEG
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 2
50224: PUSH
50225: LD_INT 0
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 2
50234: PUSH
50235: LD_INT 1
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50256: LD_ADDR_VAR 0 49
50260: PUSH
50261: LD_INT 0
50263: PUSH
50264: LD_INT 0
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 0
50273: PUSH
50274: LD_INT 1
50276: NEG
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 1
50284: PUSH
50285: LD_INT 0
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 1
50294: PUSH
50295: LD_INT 1
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 0
50304: PUSH
50305: LD_INT 1
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 1
50314: NEG
50315: PUSH
50316: LD_INT 0
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 1
50325: NEG
50326: PUSH
50327: LD_INT 1
50329: NEG
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 1
50337: PUSH
50338: LD_INT 1
50340: NEG
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 2
50348: PUSH
50349: LD_INT 0
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: LD_INT 2
50358: PUSH
50359: LD_INT 1
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 2
50368: PUSH
50369: LD_INT 2
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 1
50378: PUSH
50379: LD_INT 2
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50400: LD_ADDR_VAR 0 50
50404: PUSH
50405: LD_INT 0
50407: PUSH
50408: LD_INT 0
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 0
50417: PUSH
50418: LD_INT 1
50420: NEG
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PUSH
50426: LD_INT 1
50428: PUSH
50429: LD_INT 0
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_INT 1
50438: PUSH
50439: LD_INT 1
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 0
50448: PUSH
50449: LD_INT 1
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 1
50458: NEG
50459: PUSH
50460: LD_INT 0
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 1
50469: NEG
50470: PUSH
50471: LD_INT 1
50473: NEG
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 2
50481: PUSH
50482: LD_INT 1
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 2
50491: PUSH
50492: LD_INT 2
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 1
50501: PUSH
50502: LD_INT 2
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 0
50511: PUSH
50512: LD_INT 2
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 1
50521: NEG
50522: PUSH
50523: LD_INT 1
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50544: LD_ADDR_VAR 0 51
50548: PUSH
50549: LD_INT 0
50551: PUSH
50552: LD_INT 0
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 0
50561: PUSH
50562: LD_INT 1
50564: NEG
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 1
50572: PUSH
50573: LD_INT 0
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: LD_INT 1
50582: PUSH
50583: LD_INT 1
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 0
50592: PUSH
50593: LD_INT 1
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 1
50602: NEG
50603: PUSH
50604: LD_INT 0
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 1
50613: NEG
50614: PUSH
50615: LD_INT 1
50617: NEG
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 1
50625: PUSH
50626: LD_INT 2
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 0
50635: PUSH
50636: LD_INT 2
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 1
50645: NEG
50646: PUSH
50647: LD_INT 1
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 2
50656: NEG
50657: PUSH
50658: LD_INT 0
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 2
50667: NEG
50668: PUSH
50669: LD_INT 1
50671: NEG
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50691: LD_ADDR_VAR 0 52
50695: PUSH
50696: LD_INT 0
50698: PUSH
50699: LD_INT 0
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 0
50708: PUSH
50709: LD_INT 1
50711: NEG
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 1
50719: PUSH
50720: LD_INT 0
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 1
50729: PUSH
50730: LD_INT 1
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 0
50739: PUSH
50740: LD_INT 1
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 1
50749: NEG
50750: PUSH
50751: LD_INT 0
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 1
50760: NEG
50761: PUSH
50762: LD_INT 1
50764: NEG
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 1
50772: NEG
50773: PUSH
50774: LD_INT 2
50776: NEG
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 1
50784: NEG
50785: PUSH
50786: LD_INT 1
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 2
50795: NEG
50796: PUSH
50797: LD_INT 0
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 2
50806: NEG
50807: PUSH
50808: LD_INT 1
50810: NEG
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 2
50818: NEG
50819: PUSH
50820: LD_INT 2
50822: NEG
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50842: LD_ADDR_VAR 0 53
50846: PUSH
50847: LD_INT 0
50849: PUSH
50850: LD_INT 0
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 0
50859: PUSH
50860: LD_INT 1
50862: NEG
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 1
50870: PUSH
50871: LD_INT 0
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 1
50880: PUSH
50881: LD_INT 1
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 0
50890: PUSH
50891: LD_INT 1
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 1
50900: NEG
50901: PUSH
50902: LD_INT 0
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 1
50911: NEG
50912: PUSH
50913: LD_INT 1
50915: NEG
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 1
50923: NEG
50924: PUSH
50925: LD_INT 2
50927: NEG
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 0
50935: PUSH
50936: LD_INT 2
50938: NEG
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 1
50946: PUSH
50947: LD_INT 1
50949: NEG
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 2
50957: PUSH
50958: LD_INT 0
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: LD_INT 2
50967: PUSH
50968: LD_INT 1
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 2
50977: PUSH
50978: LD_INT 2
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 1
50987: PUSH
50988: LD_INT 2
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 0
50997: PUSH
50998: LD_INT 2
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 1
51007: NEG
51008: PUSH
51009: LD_INT 1
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 2
51018: NEG
51019: PUSH
51020: LD_INT 0
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 2
51029: NEG
51030: PUSH
51031: LD_INT 1
51033: NEG
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 2
51041: NEG
51042: PUSH
51043: LD_INT 2
51045: NEG
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51072: LD_ADDR_VAR 0 54
51076: PUSH
51077: LD_INT 0
51079: PUSH
51080: LD_INT 0
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 0
51089: PUSH
51090: LD_INT 1
51092: NEG
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: LD_INT 1
51100: PUSH
51101: LD_INT 0
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 1
51110: PUSH
51111: LD_INT 1
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 0
51120: PUSH
51121: LD_INT 1
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 1
51130: NEG
51131: PUSH
51132: LD_INT 0
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 1
51141: NEG
51142: PUSH
51143: LD_INT 1
51145: NEG
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 1
51153: NEG
51154: PUSH
51155: LD_INT 2
51157: NEG
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 0
51165: PUSH
51166: LD_INT 2
51168: NEG
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 1
51176: PUSH
51177: LD_INT 1
51179: NEG
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 2
51187: PUSH
51188: LD_INT 0
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 2
51197: PUSH
51198: LD_INT 1
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 2
51207: PUSH
51208: LD_INT 2
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 1
51217: PUSH
51218: LD_INT 2
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 0
51227: PUSH
51228: LD_INT 2
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 1
51237: NEG
51238: PUSH
51239: LD_INT 1
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 2
51248: NEG
51249: PUSH
51250: LD_INT 0
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 2
51259: NEG
51260: PUSH
51261: LD_INT 1
51263: NEG
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 2
51271: NEG
51272: PUSH
51273: LD_INT 2
51275: NEG
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51302: LD_ADDR_VAR 0 55
51306: PUSH
51307: LD_INT 0
51309: PUSH
51310: LD_INT 0
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 0
51319: PUSH
51320: LD_INT 1
51322: NEG
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: LD_INT 1
51330: PUSH
51331: LD_INT 0
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 1
51340: PUSH
51341: LD_INT 1
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 0
51350: PUSH
51351: LD_INT 1
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 1
51360: NEG
51361: PUSH
51362: LD_INT 0
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 1
51371: NEG
51372: PUSH
51373: LD_INT 1
51375: NEG
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 1
51383: NEG
51384: PUSH
51385: LD_INT 2
51387: NEG
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 0
51395: PUSH
51396: LD_INT 2
51398: NEG
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: LD_INT 1
51406: PUSH
51407: LD_INT 1
51409: NEG
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 2
51417: PUSH
51418: LD_INT 0
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 2
51427: PUSH
51428: LD_INT 1
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 2
51437: PUSH
51438: LD_INT 2
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 1
51447: PUSH
51448: LD_INT 2
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 0
51457: PUSH
51458: LD_INT 2
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 1
51467: NEG
51468: PUSH
51469: LD_INT 1
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 2
51478: NEG
51479: PUSH
51480: LD_INT 0
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 2
51489: NEG
51490: PUSH
51491: LD_INT 1
51493: NEG
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 2
51501: NEG
51502: PUSH
51503: LD_INT 2
51505: NEG
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51532: LD_ADDR_VAR 0 56
51536: PUSH
51537: LD_INT 0
51539: PUSH
51540: LD_INT 0
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 0
51549: PUSH
51550: LD_INT 1
51552: NEG
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 1
51560: PUSH
51561: LD_INT 0
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: PUSH
51568: LD_INT 1
51570: PUSH
51571: LD_INT 1
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 0
51580: PUSH
51581: LD_INT 1
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 1
51590: NEG
51591: PUSH
51592: LD_INT 0
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 1
51601: NEG
51602: PUSH
51603: LD_INT 1
51605: NEG
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 1
51613: NEG
51614: PUSH
51615: LD_INT 2
51617: NEG
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 0
51625: PUSH
51626: LD_INT 2
51628: NEG
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 1
51636: PUSH
51637: LD_INT 1
51639: NEG
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 2
51647: PUSH
51648: LD_INT 0
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 2
51657: PUSH
51658: LD_INT 1
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 2
51667: PUSH
51668: LD_INT 2
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 1
51677: PUSH
51678: LD_INT 2
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 0
51687: PUSH
51688: LD_INT 2
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 1
51697: NEG
51698: PUSH
51699: LD_INT 1
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 2
51708: NEG
51709: PUSH
51710: LD_INT 0
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 2
51719: NEG
51720: PUSH
51721: LD_INT 1
51723: NEG
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 2
51731: NEG
51732: PUSH
51733: LD_INT 2
51735: NEG
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51762: LD_ADDR_VAR 0 57
51766: PUSH
51767: LD_INT 0
51769: PUSH
51770: LD_INT 0
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 0
51779: PUSH
51780: LD_INT 1
51782: NEG
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 1
51790: PUSH
51791: LD_INT 0
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 1
51800: PUSH
51801: LD_INT 1
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 0
51810: PUSH
51811: LD_INT 1
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 1
51820: NEG
51821: PUSH
51822: LD_INT 0
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 1
51831: NEG
51832: PUSH
51833: LD_INT 1
51835: NEG
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 1
51843: NEG
51844: PUSH
51845: LD_INT 2
51847: NEG
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 0
51855: PUSH
51856: LD_INT 2
51858: NEG
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 1
51866: PUSH
51867: LD_INT 1
51869: NEG
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: LD_INT 2
51877: PUSH
51878: LD_INT 0
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: PUSH
51885: LD_INT 2
51887: PUSH
51888: LD_INT 1
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 2
51897: PUSH
51898: LD_INT 2
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 1
51907: PUSH
51908: LD_INT 2
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 0
51917: PUSH
51918: LD_INT 2
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: LD_INT 1
51927: NEG
51928: PUSH
51929: LD_INT 1
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 2
51938: NEG
51939: PUSH
51940: LD_INT 0
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 2
51949: NEG
51950: PUSH
51951: LD_INT 1
51953: NEG
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_INT 2
51961: NEG
51962: PUSH
51963: LD_INT 2
51965: NEG
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51992: LD_ADDR_VAR 0 58
51996: PUSH
51997: LD_INT 0
51999: PUSH
52000: LD_INT 0
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: LD_INT 0
52009: PUSH
52010: LD_INT 1
52012: NEG
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 1
52020: PUSH
52021: LD_INT 0
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 1
52030: PUSH
52031: LD_INT 1
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 0
52040: PUSH
52041: LD_INT 1
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 1
52050: NEG
52051: PUSH
52052: LD_INT 0
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 1
52061: NEG
52062: PUSH
52063: LD_INT 1
52065: NEG
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 1
52073: NEG
52074: PUSH
52075: LD_INT 2
52077: NEG
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: LD_INT 0
52085: PUSH
52086: LD_INT 2
52088: NEG
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 1
52096: PUSH
52097: LD_INT 1
52099: NEG
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 2
52107: PUSH
52108: LD_INT 0
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 2
52117: PUSH
52118: LD_INT 1
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 2
52127: PUSH
52128: LD_INT 2
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 1
52137: PUSH
52138: LD_INT 2
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 0
52147: PUSH
52148: LD_INT 2
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 1
52157: NEG
52158: PUSH
52159: LD_INT 1
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 2
52168: NEG
52169: PUSH
52170: LD_INT 0
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: LD_INT 2
52179: NEG
52180: PUSH
52181: LD_INT 1
52183: NEG
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 2
52191: NEG
52192: PUSH
52193: LD_INT 2
52195: NEG
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52222: LD_ADDR_VAR 0 59
52226: PUSH
52227: LD_INT 0
52229: PUSH
52230: LD_INT 0
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 0
52239: PUSH
52240: LD_INT 1
52242: NEG
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 1
52250: PUSH
52251: LD_INT 0
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 1
52260: PUSH
52261: LD_INT 1
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 0
52270: PUSH
52271: LD_INT 1
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 1
52280: NEG
52281: PUSH
52282: LD_INT 0
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 1
52291: NEG
52292: PUSH
52293: LD_INT 1
52295: NEG
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: LIST
52308: LIST
52309: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52310: LD_ADDR_VAR 0 60
52314: PUSH
52315: LD_INT 0
52317: PUSH
52318: LD_INT 0
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 0
52327: PUSH
52328: LD_INT 1
52330: NEG
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 1
52338: PUSH
52339: LD_INT 0
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 1
52348: PUSH
52349: LD_INT 1
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 0
52358: PUSH
52359: LD_INT 1
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 1
52368: NEG
52369: PUSH
52370: LD_INT 0
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 1
52379: NEG
52380: PUSH
52381: LD_INT 1
52383: NEG
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52398: LD_ADDR_VAR 0 61
52402: PUSH
52403: LD_INT 0
52405: PUSH
52406: LD_INT 0
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 0
52415: PUSH
52416: LD_INT 1
52418: NEG
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 1
52426: PUSH
52427: LD_INT 0
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 1
52436: PUSH
52437: LD_INT 1
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 0
52446: PUSH
52447: LD_INT 1
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 1
52456: NEG
52457: PUSH
52458: LD_INT 0
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: LD_INT 1
52467: NEG
52468: PUSH
52469: LD_INT 1
52471: NEG
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52486: LD_ADDR_VAR 0 62
52490: PUSH
52491: LD_INT 0
52493: PUSH
52494: LD_INT 0
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 0
52503: PUSH
52504: LD_INT 1
52506: NEG
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 1
52514: PUSH
52515: LD_INT 0
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 1
52524: PUSH
52525: LD_INT 1
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 0
52534: PUSH
52535: LD_INT 1
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 1
52544: NEG
52545: PUSH
52546: LD_INT 0
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 1
52555: NEG
52556: PUSH
52557: LD_INT 1
52559: NEG
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52574: LD_ADDR_VAR 0 63
52578: PUSH
52579: LD_INT 0
52581: PUSH
52582: LD_INT 0
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 0
52591: PUSH
52592: LD_INT 1
52594: NEG
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 1
52602: PUSH
52603: LD_INT 0
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 1
52612: PUSH
52613: LD_INT 1
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 0
52622: PUSH
52623: LD_INT 1
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 1
52632: NEG
52633: PUSH
52634: LD_INT 0
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 1
52643: NEG
52644: PUSH
52645: LD_INT 1
52647: NEG
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52662: LD_ADDR_VAR 0 64
52666: PUSH
52667: LD_INT 0
52669: PUSH
52670: LD_INT 0
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 0
52679: PUSH
52680: LD_INT 1
52682: NEG
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 1
52690: PUSH
52691: LD_INT 0
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 1
52700: PUSH
52701: LD_INT 1
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 0
52710: PUSH
52711: LD_INT 1
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 1
52720: NEG
52721: PUSH
52722: LD_INT 0
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 1
52731: NEG
52732: PUSH
52733: LD_INT 1
52735: NEG
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: ST_TO_ADDR
// end ; 1 :
52750: GO 58647
52752: LD_INT 1
52754: DOUBLE
52755: EQUAL
52756: IFTRUE 52760
52758: GO 55383
52760: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52761: LD_ADDR_VAR 0 11
52765: PUSH
52766: LD_INT 1
52768: NEG
52769: PUSH
52770: LD_INT 3
52772: NEG
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 0
52780: PUSH
52781: LD_INT 3
52783: NEG
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 1
52791: PUSH
52792: LD_INT 2
52794: NEG
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: LIST
52804: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52805: LD_ADDR_VAR 0 12
52809: PUSH
52810: LD_INT 2
52812: PUSH
52813: LD_INT 1
52815: NEG
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: LD_INT 3
52823: PUSH
52824: LD_INT 0
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 3
52833: PUSH
52834: LD_INT 1
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: LIST
52845: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52846: LD_ADDR_VAR 0 13
52850: PUSH
52851: LD_INT 3
52853: PUSH
52854: LD_INT 2
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 3
52863: PUSH
52864: LD_INT 3
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: LD_INT 2
52873: PUSH
52874: LD_INT 3
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: LIST
52885: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52886: LD_ADDR_VAR 0 14
52890: PUSH
52891: LD_INT 1
52893: PUSH
52894: LD_INT 3
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: LD_INT 0
52903: PUSH
52904: LD_INT 3
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: LD_INT 1
52913: NEG
52914: PUSH
52915: LD_INT 2
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: LIST
52926: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52927: LD_ADDR_VAR 0 15
52931: PUSH
52932: LD_INT 2
52934: NEG
52935: PUSH
52936: LD_INT 1
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 3
52945: NEG
52946: PUSH
52947: LD_INT 0
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 3
52956: NEG
52957: PUSH
52958: LD_INT 1
52960: NEG
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: LIST
52970: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52971: LD_ADDR_VAR 0 16
52975: PUSH
52976: LD_INT 2
52978: NEG
52979: PUSH
52980: LD_INT 3
52982: NEG
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 3
52990: NEG
52991: PUSH
52992: LD_INT 2
52994: NEG
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 3
53002: NEG
53003: PUSH
53004: LD_INT 3
53006: NEG
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: LIST
53016: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53017: LD_ADDR_VAR 0 17
53021: PUSH
53022: LD_INT 1
53024: NEG
53025: PUSH
53026: LD_INT 3
53028: NEG
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 0
53036: PUSH
53037: LD_INT 3
53039: NEG
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 1
53047: PUSH
53048: LD_INT 2
53050: NEG
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: LIST
53060: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53061: LD_ADDR_VAR 0 18
53065: PUSH
53066: LD_INT 2
53068: PUSH
53069: LD_INT 1
53071: NEG
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: LD_INT 3
53079: PUSH
53080: LD_INT 0
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 3
53089: PUSH
53090: LD_INT 1
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: LIST
53101: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53102: LD_ADDR_VAR 0 19
53106: PUSH
53107: LD_INT 3
53109: PUSH
53110: LD_INT 2
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 3
53119: PUSH
53120: LD_INT 3
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: LD_INT 2
53129: PUSH
53130: LD_INT 3
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: LIST
53141: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53142: LD_ADDR_VAR 0 20
53146: PUSH
53147: LD_INT 1
53149: PUSH
53150: LD_INT 3
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 0
53159: PUSH
53160: LD_INT 3
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 1
53169: NEG
53170: PUSH
53171: LD_INT 2
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: LIST
53182: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53183: LD_ADDR_VAR 0 21
53187: PUSH
53188: LD_INT 2
53190: NEG
53191: PUSH
53192: LD_INT 1
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 3
53201: NEG
53202: PUSH
53203: LD_INT 0
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 3
53212: NEG
53213: PUSH
53214: LD_INT 1
53216: NEG
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: LIST
53226: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53227: LD_ADDR_VAR 0 22
53231: PUSH
53232: LD_INT 2
53234: NEG
53235: PUSH
53236: LD_INT 3
53238: NEG
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 3
53246: NEG
53247: PUSH
53248: LD_INT 2
53250: NEG
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 3
53258: NEG
53259: PUSH
53260: LD_INT 3
53262: NEG
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: LIST
53272: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53273: LD_ADDR_VAR 0 23
53277: PUSH
53278: LD_INT 0
53280: PUSH
53281: LD_INT 3
53283: NEG
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 1
53291: NEG
53292: PUSH
53293: LD_INT 4
53295: NEG
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 1
53303: PUSH
53304: LD_INT 3
53306: NEG
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: LIST
53316: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53317: LD_ADDR_VAR 0 24
53321: PUSH
53322: LD_INT 3
53324: PUSH
53325: LD_INT 0
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 3
53334: PUSH
53335: LD_INT 1
53337: NEG
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 4
53345: PUSH
53346: LD_INT 1
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: LIST
53357: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53358: LD_ADDR_VAR 0 25
53362: PUSH
53363: LD_INT 3
53365: PUSH
53366: LD_INT 3
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 4
53375: PUSH
53376: LD_INT 3
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 3
53385: PUSH
53386: LD_INT 4
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: LIST
53397: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53398: LD_ADDR_VAR 0 26
53402: PUSH
53403: LD_INT 0
53405: PUSH
53406: LD_INT 3
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 1
53415: PUSH
53416: LD_INT 4
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 1
53425: NEG
53426: PUSH
53427: LD_INT 3
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: LIST
53438: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53439: LD_ADDR_VAR 0 27
53443: PUSH
53444: LD_INT 3
53446: NEG
53447: PUSH
53448: LD_INT 0
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 3
53457: NEG
53458: PUSH
53459: LD_INT 1
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: LD_INT 4
53468: NEG
53469: PUSH
53470: LD_INT 1
53472: NEG
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: LIST
53482: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53483: LD_ADDR_VAR 0 28
53487: PUSH
53488: LD_INT 3
53490: NEG
53491: PUSH
53492: LD_INT 3
53494: NEG
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 3
53502: NEG
53503: PUSH
53504: LD_INT 4
53506: NEG
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 4
53514: NEG
53515: PUSH
53516: LD_INT 3
53518: NEG
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: LIST
53528: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53529: LD_ADDR_VAR 0 29
53533: PUSH
53534: LD_INT 1
53536: NEG
53537: PUSH
53538: LD_INT 3
53540: NEG
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: LD_INT 0
53548: PUSH
53549: LD_INT 3
53551: NEG
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 1
53559: PUSH
53560: LD_INT 2
53562: NEG
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 1
53570: NEG
53571: PUSH
53572: LD_INT 4
53574: NEG
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 0
53582: PUSH
53583: LD_INT 4
53585: NEG
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 1
53593: PUSH
53594: LD_INT 3
53596: NEG
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 1
53604: NEG
53605: PUSH
53606: LD_INT 5
53608: NEG
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 0
53616: PUSH
53617: LD_INT 5
53619: NEG
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 1
53627: PUSH
53628: LD_INT 4
53630: NEG
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 1
53638: NEG
53639: PUSH
53640: LD_INT 6
53642: NEG
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 0
53650: PUSH
53651: LD_INT 6
53653: NEG
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 1
53661: PUSH
53662: LD_INT 5
53664: NEG
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53684: LD_ADDR_VAR 0 30
53688: PUSH
53689: LD_INT 2
53691: PUSH
53692: LD_INT 1
53694: NEG
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 3
53702: PUSH
53703: LD_INT 0
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 3
53712: PUSH
53713: LD_INT 1
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 3
53722: PUSH
53723: LD_INT 1
53725: NEG
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: LD_INT 4
53733: PUSH
53734: LD_INT 0
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: LD_INT 4
53743: PUSH
53744: LD_INT 1
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 4
53753: PUSH
53754: LD_INT 1
53756: NEG
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 5
53764: PUSH
53765: LD_INT 0
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 5
53774: PUSH
53775: LD_INT 1
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 5
53784: PUSH
53785: LD_INT 1
53787: NEG
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 6
53795: PUSH
53796: LD_INT 0
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 6
53805: PUSH
53806: LD_INT 1
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
53827: LD_ADDR_VAR 0 31
53831: PUSH
53832: LD_INT 3
53834: PUSH
53835: LD_INT 2
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 3
53844: PUSH
53845: LD_INT 3
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 2
53854: PUSH
53855: LD_INT 3
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 4
53864: PUSH
53865: LD_INT 3
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 4
53874: PUSH
53875: LD_INT 4
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 3
53884: PUSH
53885: LD_INT 4
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 5
53894: PUSH
53895: LD_INT 4
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 5
53904: PUSH
53905: LD_INT 5
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 4
53914: PUSH
53915: LD_INT 5
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 6
53924: PUSH
53925: LD_INT 5
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 6
53934: PUSH
53935: LD_INT 6
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: LD_INT 5
53944: PUSH
53945: LD_INT 6
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: LIST
53956: LIST
53957: LIST
53958: LIST
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: LIST
53964: LIST
53965: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
53966: LD_ADDR_VAR 0 32
53970: PUSH
53971: LD_INT 1
53973: PUSH
53974: LD_INT 3
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 0
53983: PUSH
53984: LD_INT 3
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 1
53993: NEG
53994: PUSH
53995: LD_INT 2
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 1
54004: PUSH
54005: LD_INT 4
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 0
54014: PUSH
54015: LD_INT 4
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 1
54024: NEG
54025: PUSH
54026: LD_INT 3
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 1
54035: PUSH
54036: LD_INT 5
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 0
54045: PUSH
54046: LD_INT 5
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 1
54055: NEG
54056: PUSH
54057: LD_INT 4
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 1
54066: PUSH
54067: LD_INT 6
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 0
54076: PUSH
54077: LD_INT 6
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 1
54086: NEG
54087: PUSH
54088: LD_INT 5
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54109: LD_ADDR_VAR 0 33
54113: PUSH
54114: LD_INT 2
54116: NEG
54117: PUSH
54118: LD_INT 1
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 3
54127: NEG
54128: PUSH
54129: LD_INT 0
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 3
54138: NEG
54139: PUSH
54140: LD_INT 1
54142: NEG
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 3
54150: NEG
54151: PUSH
54152: LD_INT 1
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 4
54161: NEG
54162: PUSH
54163: LD_INT 0
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 4
54172: NEG
54173: PUSH
54174: LD_INT 1
54176: NEG
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 4
54184: NEG
54185: PUSH
54186: LD_INT 1
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 5
54195: NEG
54196: PUSH
54197: LD_INT 0
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 5
54206: NEG
54207: PUSH
54208: LD_INT 1
54210: NEG
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 5
54218: NEG
54219: PUSH
54220: LD_INT 1
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 6
54229: NEG
54230: PUSH
54231: LD_INT 0
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 6
54240: NEG
54241: PUSH
54242: LD_INT 1
54244: NEG
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54264: LD_ADDR_VAR 0 34
54268: PUSH
54269: LD_INT 2
54271: NEG
54272: PUSH
54273: LD_INT 3
54275: NEG
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 3
54283: NEG
54284: PUSH
54285: LD_INT 2
54287: NEG
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 3
54295: NEG
54296: PUSH
54297: LD_INT 3
54299: NEG
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 3
54307: NEG
54308: PUSH
54309: LD_INT 4
54311: NEG
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 4
54319: NEG
54320: PUSH
54321: LD_INT 3
54323: NEG
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 4
54331: NEG
54332: PUSH
54333: LD_INT 4
54335: NEG
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 4
54343: NEG
54344: PUSH
54345: LD_INT 5
54347: NEG
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 5
54355: NEG
54356: PUSH
54357: LD_INT 4
54359: NEG
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: LD_INT 5
54367: NEG
54368: PUSH
54369: LD_INT 5
54371: NEG
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 5
54379: NEG
54380: PUSH
54381: LD_INT 6
54383: NEG
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 6
54391: NEG
54392: PUSH
54393: LD_INT 5
54395: NEG
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 6
54403: NEG
54404: PUSH
54405: LD_INT 6
54407: NEG
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54427: LD_ADDR_VAR 0 41
54431: PUSH
54432: LD_INT 0
54434: PUSH
54435: LD_INT 2
54437: NEG
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 1
54445: NEG
54446: PUSH
54447: LD_INT 3
54449: NEG
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 1
54457: PUSH
54458: LD_INT 2
54460: NEG
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: LIST
54470: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54471: LD_ADDR_VAR 0 42
54475: PUSH
54476: LD_INT 2
54478: PUSH
54479: LD_INT 0
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 2
54488: PUSH
54489: LD_INT 1
54491: NEG
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 3
54499: PUSH
54500: LD_INT 1
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: LIST
54511: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54512: LD_ADDR_VAR 0 43
54516: PUSH
54517: LD_INT 2
54519: PUSH
54520: LD_INT 2
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 3
54529: PUSH
54530: LD_INT 2
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 2
54539: PUSH
54540: LD_INT 3
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: LIST
54551: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54552: LD_ADDR_VAR 0 44
54556: PUSH
54557: LD_INT 0
54559: PUSH
54560: LD_INT 2
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 1
54569: PUSH
54570: LD_INT 3
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 1
54579: NEG
54580: PUSH
54581: LD_INT 2
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: LIST
54592: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54593: LD_ADDR_VAR 0 45
54597: PUSH
54598: LD_INT 2
54600: NEG
54601: PUSH
54602: LD_INT 0
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 2
54611: NEG
54612: PUSH
54613: LD_INT 1
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 3
54622: NEG
54623: PUSH
54624: LD_INT 1
54626: NEG
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: LIST
54636: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54637: LD_ADDR_VAR 0 46
54641: PUSH
54642: LD_INT 2
54644: NEG
54645: PUSH
54646: LD_INT 2
54648: NEG
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 2
54656: NEG
54657: PUSH
54658: LD_INT 3
54660: NEG
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: LD_INT 3
54668: NEG
54669: PUSH
54670: LD_INT 2
54672: NEG
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: LIST
54682: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
54683: LD_ADDR_VAR 0 47
54687: PUSH
54688: LD_INT 2
54690: NEG
54691: PUSH
54692: LD_INT 3
54694: NEG
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 1
54702: NEG
54703: PUSH
54704: LD_INT 3
54706: NEG
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54716: LD_ADDR_VAR 0 48
54720: PUSH
54721: LD_INT 1
54723: PUSH
54724: LD_INT 2
54726: NEG
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 2
54734: PUSH
54735: LD_INT 1
54737: NEG
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
54747: LD_ADDR_VAR 0 49
54751: PUSH
54752: LD_INT 3
54754: PUSH
54755: LD_INT 1
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 3
54764: PUSH
54765: LD_INT 2
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
54776: LD_ADDR_VAR 0 50
54780: PUSH
54781: LD_INT 2
54783: PUSH
54784: LD_INT 3
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 1
54793: PUSH
54794: LD_INT 3
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54805: LD_ADDR_VAR 0 51
54809: PUSH
54810: LD_INT 1
54812: NEG
54813: PUSH
54814: LD_INT 2
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 2
54823: NEG
54824: PUSH
54825: LD_INT 1
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54836: LD_ADDR_VAR 0 52
54840: PUSH
54841: LD_INT 3
54843: NEG
54844: PUSH
54845: LD_INT 1
54847: NEG
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 3
54855: NEG
54856: PUSH
54857: LD_INT 2
54859: NEG
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54869: LD_ADDR_VAR 0 53
54873: PUSH
54874: LD_INT 1
54876: NEG
54877: PUSH
54878: LD_INT 3
54880: NEG
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 0
54888: PUSH
54889: LD_INT 3
54891: NEG
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 1
54899: PUSH
54900: LD_INT 2
54902: NEG
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: LIST
54912: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54913: LD_ADDR_VAR 0 54
54917: PUSH
54918: LD_INT 2
54920: PUSH
54921: LD_INT 1
54923: NEG
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 3
54931: PUSH
54932: LD_INT 0
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 3
54941: PUSH
54942: LD_INT 1
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: LIST
54953: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54954: LD_ADDR_VAR 0 55
54958: PUSH
54959: LD_INT 3
54961: PUSH
54962: LD_INT 2
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 3
54971: PUSH
54972: LD_INT 3
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 2
54981: PUSH
54982: LD_INT 3
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: LIST
54993: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54994: LD_ADDR_VAR 0 56
54998: PUSH
54999: LD_INT 1
55001: PUSH
55002: LD_INT 3
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 0
55011: PUSH
55012: LD_INT 3
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 1
55021: NEG
55022: PUSH
55023: LD_INT 2
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: LIST
55034: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55035: LD_ADDR_VAR 0 57
55039: PUSH
55040: LD_INT 2
55042: NEG
55043: PUSH
55044: LD_INT 1
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 3
55053: NEG
55054: PUSH
55055: LD_INT 0
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 3
55064: NEG
55065: PUSH
55066: LD_INT 1
55068: NEG
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: LIST
55078: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55079: LD_ADDR_VAR 0 58
55083: PUSH
55084: LD_INT 2
55086: NEG
55087: PUSH
55088: LD_INT 3
55090: NEG
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 3
55098: NEG
55099: PUSH
55100: LD_INT 2
55102: NEG
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 3
55110: NEG
55111: PUSH
55112: LD_INT 3
55114: NEG
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: LIST
55124: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55125: LD_ADDR_VAR 0 59
55129: PUSH
55130: LD_INT 1
55132: NEG
55133: PUSH
55134: LD_INT 2
55136: NEG
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 0
55144: PUSH
55145: LD_INT 2
55147: NEG
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 1
55155: PUSH
55156: LD_INT 1
55158: NEG
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: LIST
55168: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55169: LD_ADDR_VAR 0 60
55173: PUSH
55174: LD_INT 1
55176: PUSH
55177: LD_INT 1
55179: NEG
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 2
55187: PUSH
55188: LD_INT 0
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 2
55197: PUSH
55198: LD_INT 1
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: LIST
55209: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55210: LD_ADDR_VAR 0 61
55214: PUSH
55215: LD_INT 2
55217: PUSH
55218: LD_INT 1
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 2
55227: PUSH
55228: LD_INT 2
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 1
55237: PUSH
55238: LD_INT 2
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: LIST
55249: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55250: LD_ADDR_VAR 0 62
55254: PUSH
55255: LD_INT 1
55257: PUSH
55258: LD_INT 2
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 0
55267: PUSH
55268: LD_INT 2
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 1
55277: NEG
55278: PUSH
55279: LD_INT 1
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: LIST
55290: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55291: LD_ADDR_VAR 0 63
55295: PUSH
55296: LD_INT 1
55298: NEG
55299: PUSH
55300: LD_INT 1
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 2
55309: NEG
55310: PUSH
55311: LD_INT 0
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 2
55320: NEG
55321: PUSH
55322: LD_INT 1
55324: NEG
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: LIST
55334: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55335: LD_ADDR_VAR 0 64
55339: PUSH
55340: LD_INT 1
55342: NEG
55343: PUSH
55344: LD_INT 2
55346: NEG
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 2
55354: NEG
55355: PUSH
55356: LD_INT 1
55358: NEG
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 2
55366: NEG
55367: PUSH
55368: LD_INT 2
55370: NEG
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: LIST
55380: ST_TO_ADDR
// end ; 2 :
55381: GO 58647
55383: LD_INT 2
55385: DOUBLE
55386: EQUAL
55387: IFTRUE 55391
55389: GO 58646
55391: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55392: LD_ADDR_VAR 0 29
55396: PUSH
55397: LD_INT 4
55399: PUSH
55400: LD_INT 0
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 4
55409: PUSH
55410: LD_INT 1
55412: NEG
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 5
55420: PUSH
55421: LD_INT 0
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 5
55430: PUSH
55431: LD_INT 1
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 4
55440: PUSH
55441: LD_INT 1
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 3
55450: PUSH
55451: LD_INT 0
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 3
55460: PUSH
55461: LD_INT 1
55463: NEG
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 3
55471: PUSH
55472: LD_INT 2
55474: NEG
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 5
55482: PUSH
55483: LD_INT 2
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 3
55492: PUSH
55493: LD_INT 3
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 3
55502: PUSH
55503: LD_INT 2
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 4
55512: PUSH
55513: LD_INT 3
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 4
55522: PUSH
55523: LD_INT 4
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 3
55532: PUSH
55533: LD_INT 4
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 2
55542: PUSH
55543: LD_INT 3
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 2
55552: PUSH
55553: LD_INT 2
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 4
55562: PUSH
55563: LD_INT 2
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 2
55572: PUSH
55573: LD_INT 4
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 0
55582: PUSH
55583: LD_INT 4
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 0
55592: PUSH
55593: LD_INT 3
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 1
55602: PUSH
55603: LD_INT 4
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 1
55612: PUSH
55613: LD_INT 5
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 0
55622: PUSH
55623: LD_INT 5
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 1
55632: NEG
55633: PUSH
55634: LD_INT 4
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: LD_INT 1
55643: NEG
55644: PUSH
55645: LD_INT 3
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 2
55654: PUSH
55655: LD_INT 5
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 2
55664: NEG
55665: PUSH
55666: LD_INT 3
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 3
55675: NEG
55676: PUSH
55677: LD_INT 0
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 3
55686: NEG
55687: PUSH
55688: LD_INT 1
55690: NEG
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 2
55698: NEG
55699: PUSH
55700: LD_INT 0
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 2
55709: NEG
55710: PUSH
55711: LD_INT 1
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 3
55720: NEG
55721: PUSH
55722: LD_INT 1
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 4
55731: NEG
55732: PUSH
55733: LD_INT 0
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PUSH
55740: LD_INT 4
55742: NEG
55743: PUSH
55744: LD_INT 1
55746: NEG
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 4
55754: NEG
55755: PUSH
55756: LD_INT 2
55758: NEG
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 2
55766: NEG
55767: PUSH
55768: LD_INT 2
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 4
55777: NEG
55778: PUSH
55779: LD_INT 4
55781: NEG
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 4
55789: NEG
55790: PUSH
55791: LD_INT 5
55793: NEG
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 3
55801: NEG
55802: PUSH
55803: LD_INT 4
55805: NEG
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 3
55813: NEG
55814: PUSH
55815: LD_INT 3
55817: NEG
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 4
55825: NEG
55826: PUSH
55827: LD_INT 3
55829: NEG
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PUSH
55835: LD_INT 5
55837: NEG
55838: PUSH
55839: LD_INT 4
55841: NEG
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: LD_INT 5
55849: NEG
55850: PUSH
55851: LD_INT 5
55853: NEG
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: LD_INT 3
55861: NEG
55862: PUSH
55863: LD_INT 5
55865: NEG
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 5
55873: NEG
55874: PUSH
55875: LD_INT 3
55877: NEG
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: LIST
55910: LIST
55911: LIST
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
55930: LD_ADDR_VAR 0 30
55934: PUSH
55935: LD_INT 4
55937: PUSH
55938: LD_INT 4
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 4
55947: PUSH
55948: LD_INT 3
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: PUSH
55955: LD_INT 5
55957: PUSH
55958: LD_INT 4
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 5
55967: PUSH
55968: LD_INT 5
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: LD_INT 4
55977: PUSH
55978: LD_INT 5
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 3
55987: PUSH
55988: LD_INT 4
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 3
55997: PUSH
55998: LD_INT 3
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 5
56007: PUSH
56008: LD_INT 3
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: PUSH
56015: LD_INT 3
56017: PUSH
56018: LD_INT 5
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: LD_INT 0
56027: PUSH
56028: LD_INT 3
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 0
56037: PUSH
56038: LD_INT 2
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 1
56047: PUSH
56048: LD_INT 3
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 1
56057: PUSH
56058: LD_INT 4
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 0
56067: PUSH
56068: LD_INT 4
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 1
56077: NEG
56078: PUSH
56079: LD_INT 3
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 1
56088: NEG
56089: PUSH
56090: LD_INT 2
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 2
56099: PUSH
56100: LD_INT 4
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 2
56109: NEG
56110: PUSH
56111: LD_INT 2
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 4
56120: NEG
56121: PUSH
56122: LD_INT 0
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 4
56131: NEG
56132: PUSH
56133: LD_INT 1
56135: NEG
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 3
56143: NEG
56144: PUSH
56145: LD_INT 0
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 3
56154: NEG
56155: PUSH
56156: LD_INT 1
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 4
56165: NEG
56166: PUSH
56167: LD_INT 1
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 5
56176: NEG
56177: PUSH
56178: LD_INT 0
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 5
56187: NEG
56188: PUSH
56189: LD_INT 1
56191: NEG
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 5
56199: NEG
56200: PUSH
56201: LD_INT 2
56203: NEG
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: LD_INT 3
56211: NEG
56212: PUSH
56213: LD_INT 2
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 3
56222: NEG
56223: PUSH
56224: LD_INT 3
56226: NEG
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 3
56234: NEG
56235: PUSH
56236: LD_INT 4
56238: NEG
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 2
56246: NEG
56247: PUSH
56248: LD_INT 3
56250: NEG
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 2
56258: NEG
56259: PUSH
56260: LD_INT 2
56262: NEG
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 3
56270: NEG
56271: PUSH
56272: LD_INT 2
56274: NEG
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 4
56282: NEG
56283: PUSH
56284: LD_INT 3
56286: NEG
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 4
56294: NEG
56295: PUSH
56296: LD_INT 4
56298: NEG
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 2
56306: NEG
56307: PUSH
56308: LD_INT 4
56310: NEG
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: LD_INT 4
56318: NEG
56319: PUSH
56320: LD_INT 2
56322: NEG
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: LD_INT 0
56330: PUSH
56331: LD_INT 4
56333: NEG
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 0
56341: PUSH
56342: LD_INT 5
56344: NEG
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 1
56352: PUSH
56353: LD_INT 4
56355: NEG
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 1
56363: PUSH
56364: LD_INT 3
56366: NEG
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 0
56374: PUSH
56375: LD_INT 3
56377: NEG
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 1
56385: NEG
56386: PUSH
56387: LD_INT 4
56389: NEG
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 1
56397: NEG
56398: PUSH
56399: LD_INT 5
56401: NEG
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: LD_INT 2
56409: PUSH
56410: LD_INT 3
56412: NEG
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 2
56420: NEG
56421: PUSH
56422: LD_INT 5
56424: NEG
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: LIST
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: LIST
56475: LIST
56476: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56477: LD_ADDR_VAR 0 31
56481: PUSH
56482: LD_INT 0
56484: PUSH
56485: LD_INT 4
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: LD_INT 0
56494: PUSH
56495: LD_INT 3
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: LD_INT 1
56504: PUSH
56505: LD_INT 4
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 1
56514: PUSH
56515: LD_INT 5
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_INT 0
56524: PUSH
56525: LD_INT 5
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 1
56534: NEG
56535: PUSH
56536: LD_INT 4
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 1
56545: NEG
56546: PUSH
56547: LD_INT 3
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 2
56556: PUSH
56557: LD_INT 5
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 2
56566: NEG
56567: PUSH
56568: LD_INT 3
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 3
56577: NEG
56578: PUSH
56579: LD_INT 0
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 3
56588: NEG
56589: PUSH
56590: LD_INT 1
56592: NEG
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 2
56600: NEG
56601: PUSH
56602: LD_INT 0
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 2
56611: NEG
56612: PUSH
56613: LD_INT 1
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 3
56622: NEG
56623: PUSH
56624: LD_INT 1
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 4
56633: NEG
56634: PUSH
56635: LD_INT 0
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 4
56644: NEG
56645: PUSH
56646: LD_INT 1
56648: NEG
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 4
56656: NEG
56657: PUSH
56658: LD_INT 2
56660: NEG
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 2
56668: NEG
56669: PUSH
56670: LD_INT 2
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 4
56679: NEG
56680: PUSH
56681: LD_INT 4
56683: NEG
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 4
56691: NEG
56692: PUSH
56693: LD_INT 5
56695: NEG
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 3
56703: NEG
56704: PUSH
56705: LD_INT 4
56707: NEG
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: LD_INT 3
56715: NEG
56716: PUSH
56717: LD_INT 3
56719: NEG
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 4
56727: NEG
56728: PUSH
56729: LD_INT 3
56731: NEG
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 5
56739: NEG
56740: PUSH
56741: LD_INT 4
56743: NEG
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 5
56751: NEG
56752: PUSH
56753: LD_INT 5
56755: NEG
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 3
56763: NEG
56764: PUSH
56765: LD_INT 5
56767: NEG
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 5
56775: NEG
56776: PUSH
56777: LD_INT 3
56779: NEG
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 0
56787: PUSH
56788: LD_INT 3
56790: NEG
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: LD_INT 0
56798: PUSH
56799: LD_INT 4
56801: NEG
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: LD_INT 1
56809: PUSH
56810: LD_INT 3
56812: NEG
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: LD_INT 1
56820: PUSH
56821: LD_INT 2
56823: NEG
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 0
56831: PUSH
56832: LD_INT 2
56834: NEG
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 1
56842: NEG
56843: PUSH
56844: LD_INT 3
56846: NEG
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: LD_INT 1
56854: NEG
56855: PUSH
56856: LD_INT 4
56858: NEG
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: LD_INT 2
56866: PUSH
56867: LD_INT 2
56869: NEG
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: LD_INT 2
56877: NEG
56878: PUSH
56879: LD_INT 4
56881: NEG
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: LD_INT 4
56889: PUSH
56890: LD_INT 0
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 4
56899: PUSH
56900: LD_INT 1
56902: NEG
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 5
56910: PUSH
56911: LD_INT 0
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 5
56920: PUSH
56921: LD_INT 1
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: PUSH
56928: LD_INT 4
56930: PUSH
56931: LD_INT 1
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: LD_INT 3
56940: PUSH
56941: LD_INT 0
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 3
56950: PUSH
56951: LD_INT 1
56953: NEG
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: LD_INT 3
56961: PUSH
56962: LD_INT 2
56964: NEG
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 5
56972: PUSH
56973: LD_INT 2
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: LIST
57020: LIST
57021: LIST
57022: LIST
57023: LIST
57024: LIST
57025: LIST
57026: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57027: LD_ADDR_VAR 0 32
57031: PUSH
57032: LD_INT 4
57034: NEG
57035: PUSH
57036: LD_INT 0
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 4
57045: NEG
57046: PUSH
57047: LD_INT 1
57049: NEG
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 3
57057: NEG
57058: PUSH
57059: LD_INT 0
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 3
57068: NEG
57069: PUSH
57070: LD_INT 1
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 4
57079: NEG
57080: PUSH
57081: LD_INT 1
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 5
57090: NEG
57091: PUSH
57092: LD_INT 0
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 5
57101: NEG
57102: PUSH
57103: LD_INT 1
57105: NEG
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 5
57113: NEG
57114: PUSH
57115: LD_INT 2
57117: NEG
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: LD_INT 3
57125: NEG
57126: PUSH
57127: LD_INT 2
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 3
57136: NEG
57137: PUSH
57138: LD_INT 3
57140: NEG
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 3
57148: NEG
57149: PUSH
57150: LD_INT 4
57152: NEG
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 2
57160: NEG
57161: PUSH
57162: LD_INT 3
57164: NEG
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 2
57172: NEG
57173: PUSH
57174: LD_INT 2
57176: NEG
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 3
57184: NEG
57185: PUSH
57186: LD_INT 2
57188: NEG
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 4
57196: NEG
57197: PUSH
57198: LD_INT 3
57200: NEG
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 4
57208: NEG
57209: PUSH
57210: LD_INT 4
57212: NEG
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 2
57220: NEG
57221: PUSH
57222: LD_INT 4
57224: NEG
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: LD_INT 4
57232: NEG
57233: PUSH
57234: LD_INT 2
57236: NEG
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 0
57244: PUSH
57245: LD_INT 4
57247: NEG
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 0
57255: PUSH
57256: LD_INT 5
57258: NEG
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: LD_INT 1
57266: PUSH
57267: LD_INT 4
57269: NEG
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: LD_INT 1
57277: PUSH
57278: LD_INT 3
57280: NEG
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 0
57288: PUSH
57289: LD_INT 3
57291: NEG
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 1
57299: NEG
57300: PUSH
57301: LD_INT 4
57303: NEG
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 1
57311: NEG
57312: PUSH
57313: LD_INT 5
57315: NEG
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 2
57323: PUSH
57324: LD_INT 3
57326: NEG
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 2
57334: NEG
57335: PUSH
57336: LD_INT 5
57338: NEG
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 3
57346: PUSH
57347: LD_INT 0
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 3
57356: PUSH
57357: LD_INT 1
57359: NEG
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 4
57367: PUSH
57368: LD_INT 0
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 4
57377: PUSH
57378: LD_INT 1
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 3
57387: PUSH
57388: LD_INT 1
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: LD_INT 2
57397: PUSH
57398: LD_INT 0
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 2
57407: PUSH
57408: LD_INT 1
57410: NEG
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: LD_INT 2
57418: PUSH
57419: LD_INT 2
57421: NEG
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: LD_INT 4
57429: PUSH
57430: LD_INT 2
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 4
57439: PUSH
57440: LD_INT 4
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 4
57449: PUSH
57450: LD_INT 3
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 5
57459: PUSH
57460: LD_INT 4
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: LD_INT 5
57469: PUSH
57470: LD_INT 5
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 4
57479: PUSH
57480: LD_INT 5
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: LD_INT 3
57489: PUSH
57490: LD_INT 4
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 3
57499: PUSH
57500: LD_INT 3
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_INT 5
57509: PUSH
57510: LD_INT 3
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 3
57519: PUSH
57520: LD_INT 5
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: LIST
57549: LIST
57550: LIST
57551: LIST
57552: LIST
57553: LIST
57554: LIST
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: LIST
57560: LIST
57561: LIST
57562: LIST
57563: LIST
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: LIST
57569: LIST
57570: LIST
57571: LIST
57572: LIST
57573: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57574: LD_ADDR_VAR 0 33
57578: PUSH
57579: LD_INT 4
57581: NEG
57582: PUSH
57583: LD_INT 4
57585: NEG
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: LD_INT 4
57593: NEG
57594: PUSH
57595: LD_INT 5
57597: NEG
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 3
57605: NEG
57606: PUSH
57607: LD_INT 4
57609: NEG
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: LD_INT 3
57617: NEG
57618: PUSH
57619: LD_INT 3
57621: NEG
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 4
57629: NEG
57630: PUSH
57631: LD_INT 3
57633: NEG
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 5
57641: NEG
57642: PUSH
57643: LD_INT 4
57645: NEG
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 5
57653: NEG
57654: PUSH
57655: LD_INT 5
57657: NEG
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 3
57665: NEG
57666: PUSH
57667: LD_INT 5
57669: NEG
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PUSH
57675: LD_INT 5
57677: NEG
57678: PUSH
57679: LD_INT 3
57681: NEG
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 0
57689: PUSH
57690: LD_INT 3
57692: NEG
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 0
57700: PUSH
57701: LD_INT 4
57703: NEG
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 1
57711: PUSH
57712: LD_INT 3
57714: NEG
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 1
57722: PUSH
57723: LD_INT 2
57725: NEG
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 0
57733: PUSH
57734: LD_INT 2
57736: NEG
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 1
57744: NEG
57745: PUSH
57746: LD_INT 3
57748: NEG
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 1
57756: NEG
57757: PUSH
57758: LD_INT 4
57760: NEG
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: LD_INT 2
57768: PUSH
57769: LD_INT 2
57771: NEG
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: LD_INT 2
57779: NEG
57780: PUSH
57781: LD_INT 4
57783: NEG
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: LD_INT 4
57791: PUSH
57792: LD_INT 0
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 4
57801: PUSH
57802: LD_INT 1
57804: NEG
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 5
57812: PUSH
57813: LD_INT 0
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 5
57822: PUSH
57823: LD_INT 1
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: LD_INT 4
57832: PUSH
57833: LD_INT 1
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 3
57842: PUSH
57843: LD_INT 0
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 3
57852: PUSH
57853: LD_INT 1
57855: NEG
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 3
57863: PUSH
57864: LD_INT 2
57866: NEG
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 5
57874: PUSH
57875: LD_INT 2
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 3
57884: PUSH
57885: LD_INT 3
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 3
57894: PUSH
57895: LD_INT 2
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 4
57904: PUSH
57905: LD_INT 3
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 4
57914: PUSH
57915: LD_INT 4
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 3
57924: PUSH
57925: LD_INT 4
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: LD_INT 2
57934: PUSH
57935: LD_INT 3
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 2
57944: PUSH
57945: LD_INT 2
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 4
57954: PUSH
57955: LD_INT 2
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 2
57964: PUSH
57965: LD_INT 4
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 0
57974: PUSH
57975: LD_INT 4
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 0
57984: PUSH
57985: LD_INT 3
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 1
57994: PUSH
57995: LD_INT 4
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_INT 1
58004: PUSH
58005: LD_INT 5
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 0
58014: PUSH
58015: LD_INT 5
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 1
58024: NEG
58025: PUSH
58026: LD_INT 4
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PUSH
58033: LD_INT 1
58035: NEG
58036: PUSH
58037: LD_INT 3
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 2
58046: PUSH
58047: LD_INT 5
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 2
58056: NEG
58057: PUSH
58058: LD_INT 3
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: LIST
58069: LIST
58070: LIST
58071: LIST
58072: LIST
58073: LIST
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: LIST
58090: LIST
58091: LIST
58092: LIST
58093: LIST
58094: LIST
58095: LIST
58096: LIST
58097: LIST
58098: LIST
58099: LIST
58100: LIST
58101: LIST
58102: LIST
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58112: LD_ADDR_VAR 0 34
58116: PUSH
58117: LD_INT 0
58119: PUSH
58120: LD_INT 4
58122: NEG
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 0
58130: PUSH
58131: LD_INT 5
58133: NEG
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 1
58141: PUSH
58142: LD_INT 4
58144: NEG
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 1
58152: PUSH
58153: LD_INT 3
58155: NEG
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 0
58163: PUSH
58164: LD_INT 3
58166: NEG
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: LD_INT 1
58174: NEG
58175: PUSH
58176: LD_INT 4
58178: NEG
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 1
58186: NEG
58187: PUSH
58188: LD_INT 5
58190: NEG
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 2
58198: PUSH
58199: LD_INT 3
58201: NEG
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 2
58209: NEG
58210: PUSH
58211: LD_INT 5
58213: NEG
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 3
58221: PUSH
58222: LD_INT 0
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 3
58231: PUSH
58232: LD_INT 1
58234: NEG
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: LD_INT 4
58242: PUSH
58243: LD_INT 0
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: LD_INT 4
58252: PUSH
58253: LD_INT 1
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 3
58262: PUSH
58263: LD_INT 1
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: PUSH
58270: LD_INT 2
58272: PUSH
58273: LD_INT 0
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: LD_INT 2
58282: PUSH
58283: LD_INT 1
58285: NEG
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 2
58293: PUSH
58294: LD_INT 2
58296: NEG
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: PUSH
58302: LD_INT 4
58304: PUSH
58305: LD_INT 2
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 4
58314: PUSH
58315: LD_INT 4
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 4
58324: PUSH
58325: LD_INT 3
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 5
58334: PUSH
58335: LD_INT 4
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 5
58344: PUSH
58345: LD_INT 5
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 4
58354: PUSH
58355: LD_INT 5
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 3
58364: PUSH
58365: LD_INT 4
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 3
58374: PUSH
58375: LD_INT 3
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 5
58384: PUSH
58385: LD_INT 3
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 3
58394: PUSH
58395: LD_INT 5
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 0
58404: PUSH
58405: LD_INT 3
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: LD_INT 0
58414: PUSH
58415: LD_INT 2
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 1
58424: PUSH
58425: LD_INT 3
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 1
58434: PUSH
58435: LD_INT 4
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 0
58444: PUSH
58445: LD_INT 4
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 1
58454: NEG
58455: PUSH
58456: LD_INT 3
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 1
58465: NEG
58466: PUSH
58467: LD_INT 2
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 2
58476: PUSH
58477: LD_INT 4
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 2
58486: NEG
58487: PUSH
58488: LD_INT 2
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PUSH
58495: LD_INT 4
58497: NEG
58498: PUSH
58499: LD_INT 0
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_INT 4
58508: NEG
58509: PUSH
58510: LD_INT 1
58512: NEG
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: PUSH
58518: LD_INT 3
58520: NEG
58521: PUSH
58522: LD_INT 0
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: PUSH
58529: LD_INT 3
58531: NEG
58532: PUSH
58533: LD_INT 1
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: LD_INT 4
58542: NEG
58543: PUSH
58544: LD_INT 1
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: LD_INT 5
58553: NEG
58554: PUSH
58555: LD_INT 0
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 5
58564: NEG
58565: PUSH
58566: LD_INT 1
58568: NEG
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 5
58576: NEG
58577: PUSH
58578: LD_INT 2
58580: NEG
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 3
58588: NEG
58589: PUSH
58590: LD_INT 2
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: LIST
58601: LIST
58602: LIST
58603: LIST
58604: LIST
58605: LIST
58606: LIST
58607: LIST
58608: LIST
58609: LIST
58610: LIST
58611: LIST
58612: LIST
58613: LIST
58614: LIST
58615: LIST
58616: LIST
58617: LIST
58618: LIST
58619: LIST
58620: LIST
58621: LIST
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: LIST
58627: LIST
58628: LIST
58629: LIST
58630: LIST
58631: LIST
58632: LIST
58633: LIST
58634: LIST
58635: LIST
58636: LIST
58637: LIST
58638: LIST
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: ST_TO_ADDR
// end ; end ;
58644: GO 58647
58646: POP
// case btype of b_depot , b_warehouse :
58647: LD_VAR 0 1
58651: PUSH
58652: LD_INT 0
58654: DOUBLE
58655: EQUAL
58656: IFTRUE 58666
58658: LD_INT 1
58660: DOUBLE
58661: EQUAL
58662: IFTRUE 58666
58664: GO 58867
58666: POP
// case nation of nation_american :
58667: LD_VAR 0 5
58671: PUSH
58672: LD_INT 1
58674: DOUBLE
58675: EQUAL
58676: IFTRUE 58680
58678: GO 58736
58680: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
58681: LD_ADDR_VAR 0 9
58685: PUSH
58686: LD_VAR 0 11
58690: PUSH
58691: LD_VAR 0 12
58695: PUSH
58696: LD_VAR 0 13
58700: PUSH
58701: LD_VAR 0 14
58705: PUSH
58706: LD_VAR 0 15
58710: PUSH
58711: LD_VAR 0 16
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: LIST
58720: LIST
58721: LIST
58722: LIST
58723: PUSH
58724: LD_VAR 0 4
58728: PUSH
58729: LD_INT 1
58731: PLUS
58732: ARRAY
58733: ST_TO_ADDR
58734: GO 58865
58736: LD_INT 2
58738: DOUBLE
58739: EQUAL
58740: IFTRUE 58744
58742: GO 58800
58744: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
58745: LD_ADDR_VAR 0 9
58749: PUSH
58750: LD_VAR 0 17
58754: PUSH
58755: LD_VAR 0 18
58759: PUSH
58760: LD_VAR 0 19
58764: PUSH
58765: LD_VAR 0 20
58769: PUSH
58770: LD_VAR 0 21
58774: PUSH
58775: LD_VAR 0 22
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: LIST
58784: LIST
58785: LIST
58786: LIST
58787: PUSH
58788: LD_VAR 0 4
58792: PUSH
58793: LD_INT 1
58795: PLUS
58796: ARRAY
58797: ST_TO_ADDR
58798: GO 58865
58800: LD_INT 3
58802: DOUBLE
58803: EQUAL
58804: IFTRUE 58808
58806: GO 58864
58808: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
58809: LD_ADDR_VAR 0 9
58813: PUSH
58814: LD_VAR 0 23
58818: PUSH
58819: LD_VAR 0 24
58823: PUSH
58824: LD_VAR 0 25
58828: PUSH
58829: LD_VAR 0 26
58833: PUSH
58834: LD_VAR 0 27
58838: PUSH
58839: LD_VAR 0 28
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: LIST
58848: LIST
58849: LIST
58850: LIST
58851: PUSH
58852: LD_VAR 0 4
58856: PUSH
58857: LD_INT 1
58859: PLUS
58860: ARRAY
58861: ST_TO_ADDR
58862: GO 58865
58864: POP
58865: GO 59420
58867: LD_INT 2
58869: DOUBLE
58870: EQUAL
58871: IFTRUE 58881
58873: LD_INT 3
58875: DOUBLE
58876: EQUAL
58877: IFTRUE 58881
58879: GO 58937
58881: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
58882: LD_ADDR_VAR 0 9
58886: PUSH
58887: LD_VAR 0 29
58891: PUSH
58892: LD_VAR 0 30
58896: PUSH
58897: LD_VAR 0 31
58901: PUSH
58902: LD_VAR 0 32
58906: PUSH
58907: LD_VAR 0 33
58911: PUSH
58912: LD_VAR 0 34
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: LIST
58921: LIST
58922: LIST
58923: LIST
58924: PUSH
58925: LD_VAR 0 4
58929: PUSH
58930: LD_INT 1
58932: PLUS
58933: ARRAY
58934: ST_TO_ADDR
58935: GO 59420
58937: LD_INT 16
58939: DOUBLE
58940: EQUAL
58941: IFTRUE 58999
58943: LD_INT 17
58945: DOUBLE
58946: EQUAL
58947: IFTRUE 58999
58949: LD_INT 18
58951: DOUBLE
58952: EQUAL
58953: IFTRUE 58999
58955: LD_INT 19
58957: DOUBLE
58958: EQUAL
58959: IFTRUE 58999
58961: LD_INT 22
58963: DOUBLE
58964: EQUAL
58965: IFTRUE 58999
58967: LD_INT 20
58969: DOUBLE
58970: EQUAL
58971: IFTRUE 58999
58973: LD_INT 21
58975: DOUBLE
58976: EQUAL
58977: IFTRUE 58999
58979: LD_INT 23
58981: DOUBLE
58982: EQUAL
58983: IFTRUE 58999
58985: LD_INT 24
58987: DOUBLE
58988: EQUAL
58989: IFTRUE 58999
58991: LD_INT 25
58993: DOUBLE
58994: EQUAL
58995: IFTRUE 58999
58997: GO 59055
58999: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59000: LD_ADDR_VAR 0 9
59004: PUSH
59005: LD_VAR 0 35
59009: PUSH
59010: LD_VAR 0 36
59014: PUSH
59015: LD_VAR 0 37
59019: PUSH
59020: LD_VAR 0 38
59024: PUSH
59025: LD_VAR 0 39
59029: PUSH
59030: LD_VAR 0 40
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: LIST
59042: PUSH
59043: LD_VAR 0 4
59047: PUSH
59048: LD_INT 1
59050: PLUS
59051: ARRAY
59052: ST_TO_ADDR
59053: GO 59420
59055: LD_INT 6
59057: DOUBLE
59058: EQUAL
59059: IFTRUE 59111
59061: LD_INT 7
59063: DOUBLE
59064: EQUAL
59065: IFTRUE 59111
59067: LD_INT 8
59069: DOUBLE
59070: EQUAL
59071: IFTRUE 59111
59073: LD_INT 13
59075: DOUBLE
59076: EQUAL
59077: IFTRUE 59111
59079: LD_INT 12
59081: DOUBLE
59082: EQUAL
59083: IFTRUE 59111
59085: LD_INT 15
59087: DOUBLE
59088: EQUAL
59089: IFTRUE 59111
59091: LD_INT 11
59093: DOUBLE
59094: EQUAL
59095: IFTRUE 59111
59097: LD_INT 14
59099: DOUBLE
59100: EQUAL
59101: IFTRUE 59111
59103: LD_INT 10
59105: DOUBLE
59106: EQUAL
59107: IFTRUE 59111
59109: GO 59167
59111: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
59112: LD_ADDR_VAR 0 9
59116: PUSH
59117: LD_VAR 0 41
59121: PUSH
59122: LD_VAR 0 42
59126: PUSH
59127: LD_VAR 0 43
59131: PUSH
59132: LD_VAR 0 44
59136: PUSH
59137: LD_VAR 0 45
59141: PUSH
59142: LD_VAR 0 46
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: PUSH
59155: LD_VAR 0 4
59159: PUSH
59160: LD_INT 1
59162: PLUS
59163: ARRAY
59164: ST_TO_ADDR
59165: GO 59420
59167: LD_INT 36
59169: DOUBLE
59170: EQUAL
59171: IFTRUE 59175
59173: GO 59231
59175: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59176: LD_ADDR_VAR 0 9
59180: PUSH
59181: LD_VAR 0 47
59185: PUSH
59186: LD_VAR 0 48
59190: PUSH
59191: LD_VAR 0 49
59195: PUSH
59196: LD_VAR 0 50
59200: PUSH
59201: LD_VAR 0 51
59205: PUSH
59206: LD_VAR 0 52
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: LIST
59215: LIST
59216: LIST
59217: LIST
59218: PUSH
59219: LD_VAR 0 4
59223: PUSH
59224: LD_INT 1
59226: PLUS
59227: ARRAY
59228: ST_TO_ADDR
59229: GO 59420
59231: LD_INT 4
59233: DOUBLE
59234: EQUAL
59235: IFTRUE 59257
59237: LD_INT 5
59239: DOUBLE
59240: EQUAL
59241: IFTRUE 59257
59243: LD_INT 34
59245: DOUBLE
59246: EQUAL
59247: IFTRUE 59257
59249: LD_INT 37
59251: DOUBLE
59252: EQUAL
59253: IFTRUE 59257
59255: GO 59313
59257: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59258: LD_ADDR_VAR 0 9
59262: PUSH
59263: LD_VAR 0 53
59267: PUSH
59268: LD_VAR 0 54
59272: PUSH
59273: LD_VAR 0 55
59277: PUSH
59278: LD_VAR 0 56
59282: PUSH
59283: LD_VAR 0 57
59287: PUSH
59288: LD_VAR 0 58
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: LIST
59297: LIST
59298: LIST
59299: LIST
59300: PUSH
59301: LD_VAR 0 4
59305: PUSH
59306: LD_INT 1
59308: PLUS
59309: ARRAY
59310: ST_TO_ADDR
59311: GO 59420
59313: LD_INT 31
59315: DOUBLE
59316: EQUAL
59317: IFTRUE 59363
59319: LD_INT 32
59321: DOUBLE
59322: EQUAL
59323: IFTRUE 59363
59325: LD_INT 33
59327: DOUBLE
59328: EQUAL
59329: IFTRUE 59363
59331: LD_INT 27
59333: DOUBLE
59334: EQUAL
59335: IFTRUE 59363
59337: LD_INT 26
59339: DOUBLE
59340: EQUAL
59341: IFTRUE 59363
59343: LD_INT 28
59345: DOUBLE
59346: EQUAL
59347: IFTRUE 59363
59349: LD_INT 29
59351: DOUBLE
59352: EQUAL
59353: IFTRUE 59363
59355: LD_INT 30
59357: DOUBLE
59358: EQUAL
59359: IFTRUE 59363
59361: GO 59419
59363: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59364: LD_ADDR_VAR 0 9
59368: PUSH
59369: LD_VAR 0 59
59373: PUSH
59374: LD_VAR 0 60
59378: PUSH
59379: LD_VAR 0 61
59383: PUSH
59384: LD_VAR 0 62
59388: PUSH
59389: LD_VAR 0 63
59393: PUSH
59394: LD_VAR 0 64
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: LIST
59403: LIST
59404: LIST
59405: LIST
59406: PUSH
59407: LD_VAR 0 4
59411: PUSH
59412: LD_INT 1
59414: PLUS
59415: ARRAY
59416: ST_TO_ADDR
59417: GO 59420
59419: POP
// temp_list2 = [ ] ;
59420: LD_ADDR_VAR 0 10
59424: PUSH
59425: EMPTY
59426: ST_TO_ADDR
// for i in temp_list do
59427: LD_ADDR_VAR 0 8
59431: PUSH
59432: LD_VAR 0 9
59436: PUSH
59437: FOR_IN
59438: IFFALSE 59490
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59440: LD_ADDR_VAR 0 10
59444: PUSH
59445: LD_VAR 0 10
59449: PUSH
59450: LD_VAR 0 8
59454: PUSH
59455: LD_INT 1
59457: ARRAY
59458: PUSH
59459: LD_VAR 0 2
59463: PLUS
59464: PUSH
59465: LD_VAR 0 8
59469: PUSH
59470: LD_INT 2
59472: ARRAY
59473: PUSH
59474: LD_VAR 0 3
59478: PLUS
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: EMPTY
59485: LIST
59486: ADD
59487: ST_TO_ADDR
59488: GO 59437
59490: POP
59491: POP
// result = temp_list2 ;
59492: LD_ADDR_VAR 0 7
59496: PUSH
59497: LD_VAR 0 10
59501: ST_TO_ADDR
// end ;
59502: LD_VAR 0 7
59506: RET
// export function EnemyInRange ( unit , dist ) ; begin
59507: LD_INT 0
59509: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59510: LD_ADDR_VAR 0 3
59514: PUSH
59515: LD_VAR 0 1
59519: PPUSH
59520: CALL_OW 255
59524: PPUSH
59525: LD_VAR 0 1
59529: PPUSH
59530: CALL_OW 250
59534: PPUSH
59535: LD_VAR 0 1
59539: PPUSH
59540: CALL_OW 251
59544: PPUSH
59545: LD_VAR 0 2
59549: PPUSH
59550: CALL 32909 0 4
59554: PUSH
59555: LD_INT 4
59557: ARRAY
59558: ST_TO_ADDR
// end ;
59559: LD_VAR 0 3
59563: RET
// export function PlayerSeeMe ( unit ) ; begin
59564: LD_INT 0
59566: PPUSH
// result := See ( your_side , unit ) ;
59567: LD_ADDR_VAR 0 2
59571: PUSH
59572: LD_OWVAR 2
59576: PPUSH
59577: LD_VAR 0 1
59581: PPUSH
59582: CALL_OW 292
59586: ST_TO_ADDR
// end ;
59587: LD_VAR 0 2
59591: RET
// export function ReverseDir ( unit ) ; begin
59592: LD_INT 0
59594: PPUSH
// if not unit then
59595: LD_VAR 0 1
59599: NOT
59600: IFFALSE 59604
// exit ;
59602: GO 59627
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59604: LD_ADDR_VAR 0 2
59608: PUSH
59609: LD_VAR 0 1
59613: PPUSH
59614: CALL_OW 254
59618: PUSH
59619: LD_INT 3
59621: PLUS
59622: PUSH
59623: LD_INT 6
59625: MOD
59626: ST_TO_ADDR
// end ;
59627: LD_VAR 0 2
59631: RET
// export function ReverseArray ( array ) ; var i ; begin
59632: LD_INT 0
59634: PPUSH
59635: PPUSH
// if not array then
59636: LD_VAR 0 1
59640: NOT
59641: IFFALSE 59645
// exit ;
59643: GO 59700
// result := [ ] ;
59645: LD_ADDR_VAR 0 2
59649: PUSH
59650: EMPTY
59651: ST_TO_ADDR
// for i := array downto 1 do
59652: LD_ADDR_VAR 0 3
59656: PUSH
59657: DOUBLE
59658: LD_VAR 0 1
59662: INC
59663: ST_TO_ADDR
59664: LD_INT 1
59666: PUSH
59667: FOR_DOWNTO
59668: IFFALSE 59698
// result := Join ( result , array [ i ] ) ;
59670: LD_ADDR_VAR 0 2
59674: PUSH
59675: LD_VAR 0 2
59679: PPUSH
59680: LD_VAR 0 1
59684: PUSH
59685: LD_VAR 0 3
59689: ARRAY
59690: PPUSH
59691: CALL 64344 0 2
59695: ST_TO_ADDR
59696: GO 59667
59698: POP
59699: POP
// end ;
59700: LD_VAR 0 2
59704: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
59705: LD_INT 0
59707: PPUSH
59708: PPUSH
59709: PPUSH
59710: PPUSH
59711: PPUSH
59712: PPUSH
// if not unit or not hexes then
59713: LD_VAR 0 1
59717: NOT
59718: PUSH
59719: LD_VAR 0 2
59723: NOT
59724: OR
59725: IFFALSE 59729
// exit ;
59727: GO 59852
// dist := 9999 ;
59729: LD_ADDR_VAR 0 5
59733: PUSH
59734: LD_INT 9999
59736: ST_TO_ADDR
// for i = 1 to hexes do
59737: LD_ADDR_VAR 0 4
59741: PUSH
59742: DOUBLE
59743: LD_INT 1
59745: DEC
59746: ST_TO_ADDR
59747: LD_VAR 0 2
59751: PUSH
59752: FOR_TO
59753: IFFALSE 59840
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59755: LD_ADDR_VAR 0 6
59759: PUSH
59760: LD_VAR 0 1
59764: PPUSH
59765: LD_VAR 0 2
59769: PUSH
59770: LD_VAR 0 4
59774: ARRAY
59775: PUSH
59776: LD_INT 1
59778: ARRAY
59779: PPUSH
59780: LD_VAR 0 2
59784: PUSH
59785: LD_VAR 0 4
59789: ARRAY
59790: PUSH
59791: LD_INT 2
59793: ARRAY
59794: PPUSH
59795: CALL_OW 297
59799: ST_TO_ADDR
// if tdist < dist then
59800: LD_VAR 0 6
59804: PUSH
59805: LD_VAR 0 5
59809: LESS
59810: IFFALSE 59838
// begin hex := hexes [ i ] ;
59812: LD_ADDR_VAR 0 8
59816: PUSH
59817: LD_VAR 0 2
59821: PUSH
59822: LD_VAR 0 4
59826: ARRAY
59827: ST_TO_ADDR
// dist := tdist ;
59828: LD_ADDR_VAR 0 5
59832: PUSH
59833: LD_VAR 0 6
59837: ST_TO_ADDR
// end ; end ;
59838: GO 59752
59840: POP
59841: POP
// result := hex ;
59842: LD_ADDR_VAR 0 3
59846: PUSH
59847: LD_VAR 0 8
59851: ST_TO_ADDR
// end ;
59852: LD_VAR 0 3
59856: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
59857: LD_INT 0
59859: PPUSH
59860: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
59861: LD_VAR 0 1
59865: NOT
59866: PUSH
59867: LD_VAR 0 1
59871: PUSH
59872: LD_INT 21
59874: PUSH
59875: LD_INT 2
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 23
59884: PUSH
59885: LD_INT 2
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PPUSH
59896: CALL_OW 69
59900: IN
59901: NOT
59902: OR
59903: IFFALSE 59907
// exit ;
59905: GO 59954
// for i = 1 to 3 do
59907: LD_ADDR_VAR 0 3
59911: PUSH
59912: DOUBLE
59913: LD_INT 1
59915: DEC
59916: ST_TO_ADDR
59917: LD_INT 3
59919: PUSH
59920: FOR_TO
59921: IFFALSE 59952
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
59923: LD_VAR 0 1
59927: PPUSH
59928: CALL_OW 250
59932: PPUSH
59933: LD_VAR 0 1
59937: PPUSH
59938: CALL_OW 251
59942: PPUSH
59943: LD_INT 1
59945: PPUSH
59946: CALL_OW 453
59950: GO 59920
59952: POP
59953: POP
// end ;
59954: LD_VAR 0 2
59958: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
59959: LD_INT 0
59961: PPUSH
59962: PPUSH
59963: PPUSH
59964: PPUSH
59965: PPUSH
59966: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
59967: LD_VAR 0 1
59971: NOT
59972: PUSH
59973: LD_VAR 0 2
59977: NOT
59978: OR
59979: PUSH
59980: LD_VAR 0 1
59984: PPUSH
59985: CALL_OW 314
59989: OR
59990: IFFALSE 59994
// exit ;
59992: GO 60461
// if GetLives ( i ) < 250 then
59994: LD_VAR 0 4
59998: PPUSH
59999: CALL_OW 256
60003: PUSH
60004: LD_INT 250
60006: LESS
60007: IFFALSE 60020
// begin ComAutodestruct ( i ) ;
60009: LD_VAR 0 4
60013: PPUSH
60014: CALL 59857 0 1
// exit ;
60018: GO 60461
// end ; x := GetX ( enemy_unit ) ;
60020: LD_ADDR_VAR 0 7
60024: PUSH
60025: LD_VAR 0 2
60029: PPUSH
60030: CALL_OW 250
60034: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60035: LD_ADDR_VAR 0 8
60039: PUSH
60040: LD_VAR 0 2
60044: PPUSH
60045: CALL_OW 251
60049: ST_TO_ADDR
// if not x or not y then
60050: LD_VAR 0 7
60054: NOT
60055: PUSH
60056: LD_VAR 0 8
60060: NOT
60061: OR
60062: IFFALSE 60066
// exit ;
60064: GO 60461
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60066: LD_ADDR_VAR 0 6
60070: PUSH
60071: LD_VAR 0 7
60075: PPUSH
60076: LD_INT 0
60078: PPUSH
60079: LD_INT 4
60081: PPUSH
60082: CALL_OW 272
60086: PUSH
60087: LD_VAR 0 8
60091: PPUSH
60092: LD_INT 0
60094: PPUSH
60095: LD_INT 4
60097: PPUSH
60098: CALL_OW 273
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: PUSH
60107: LD_VAR 0 7
60111: PPUSH
60112: LD_INT 1
60114: PPUSH
60115: LD_INT 4
60117: PPUSH
60118: CALL_OW 272
60122: PUSH
60123: LD_VAR 0 8
60127: PPUSH
60128: LD_INT 1
60130: PPUSH
60131: LD_INT 4
60133: PPUSH
60134: CALL_OW 273
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_VAR 0 7
60147: PPUSH
60148: LD_INT 2
60150: PPUSH
60151: LD_INT 4
60153: PPUSH
60154: CALL_OW 272
60158: PUSH
60159: LD_VAR 0 8
60163: PPUSH
60164: LD_INT 2
60166: PPUSH
60167: LD_INT 4
60169: PPUSH
60170: CALL_OW 273
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: LD_VAR 0 7
60183: PPUSH
60184: LD_INT 3
60186: PPUSH
60187: LD_INT 4
60189: PPUSH
60190: CALL_OW 272
60194: PUSH
60195: LD_VAR 0 8
60199: PPUSH
60200: LD_INT 3
60202: PPUSH
60203: LD_INT 4
60205: PPUSH
60206: CALL_OW 273
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_VAR 0 7
60219: PPUSH
60220: LD_INT 4
60222: PPUSH
60223: LD_INT 4
60225: PPUSH
60226: CALL_OW 272
60230: PUSH
60231: LD_VAR 0 8
60235: PPUSH
60236: LD_INT 4
60238: PPUSH
60239: LD_INT 4
60241: PPUSH
60242: CALL_OW 273
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_VAR 0 7
60255: PPUSH
60256: LD_INT 5
60258: PPUSH
60259: LD_INT 4
60261: PPUSH
60262: CALL_OW 272
60266: PUSH
60267: LD_VAR 0 8
60271: PPUSH
60272: LD_INT 5
60274: PPUSH
60275: LD_INT 4
60277: PPUSH
60278: CALL_OW 273
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: LIST
60291: LIST
60292: LIST
60293: LIST
60294: ST_TO_ADDR
// for i = tmp downto 1 do
60295: LD_ADDR_VAR 0 4
60299: PUSH
60300: DOUBLE
60301: LD_VAR 0 6
60305: INC
60306: ST_TO_ADDR
60307: LD_INT 1
60309: PUSH
60310: FOR_DOWNTO
60311: IFFALSE 60412
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60313: LD_VAR 0 6
60317: PUSH
60318: LD_VAR 0 4
60322: ARRAY
60323: PUSH
60324: LD_INT 1
60326: ARRAY
60327: PPUSH
60328: LD_VAR 0 6
60332: PUSH
60333: LD_VAR 0 4
60337: ARRAY
60338: PUSH
60339: LD_INT 2
60341: ARRAY
60342: PPUSH
60343: CALL_OW 488
60347: NOT
60348: PUSH
60349: LD_VAR 0 6
60353: PUSH
60354: LD_VAR 0 4
60358: ARRAY
60359: PUSH
60360: LD_INT 1
60362: ARRAY
60363: PPUSH
60364: LD_VAR 0 6
60368: PUSH
60369: LD_VAR 0 4
60373: ARRAY
60374: PUSH
60375: LD_INT 2
60377: ARRAY
60378: PPUSH
60379: CALL_OW 428
60383: PUSH
60384: LD_INT 0
60386: NONEQUAL
60387: OR
60388: IFFALSE 60410
// tmp := Delete ( tmp , i ) ;
60390: LD_ADDR_VAR 0 6
60394: PUSH
60395: LD_VAR 0 6
60399: PPUSH
60400: LD_VAR 0 4
60404: PPUSH
60405: CALL_OW 3
60409: ST_TO_ADDR
60410: GO 60310
60412: POP
60413: POP
// j := GetClosestHex ( unit , tmp ) ;
60414: LD_ADDR_VAR 0 5
60418: PUSH
60419: LD_VAR 0 1
60423: PPUSH
60424: LD_VAR 0 6
60428: PPUSH
60429: CALL 59705 0 2
60433: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60434: LD_VAR 0 1
60438: PPUSH
60439: LD_VAR 0 5
60443: PUSH
60444: LD_INT 1
60446: ARRAY
60447: PPUSH
60448: LD_VAR 0 5
60452: PUSH
60453: LD_INT 2
60455: ARRAY
60456: PPUSH
60457: CALL_OW 111
// end ;
60461: LD_VAR 0 3
60465: RET
// export function PrepareApemanSoldier ( ) ; begin
60466: LD_INT 0
60468: PPUSH
// uc_nation := 0 ;
60469: LD_ADDR_OWVAR 21
60473: PUSH
60474: LD_INT 0
60476: ST_TO_ADDR
// hc_sex := sex_male ;
60477: LD_ADDR_OWVAR 27
60481: PUSH
60482: LD_INT 1
60484: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
60485: LD_ADDR_OWVAR 28
60489: PUSH
60490: LD_INT 15
60492: ST_TO_ADDR
// hc_gallery :=  ;
60493: LD_ADDR_OWVAR 33
60497: PUSH
60498: LD_STRING 
60500: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60501: LD_ADDR_OWVAR 31
60505: PUSH
60506: LD_INT 0
60508: PPUSH
60509: LD_INT 3
60511: PPUSH
60512: CALL_OW 12
60516: PUSH
60517: LD_INT 0
60519: PPUSH
60520: LD_INT 3
60522: PPUSH
60523: CALL_OW 12
60527: PUSH
60528: LD_INT 0
60530: PUSH
60531: LD_INT 0
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: LIST
60538: LIST
60539: ST_TO_ADDR
// end ;
60540: LD_VAR 0 1
60544: RET
// export function PrepareApemanEngineer ( ) ; begin
60545: LD_INT 0
60547: PPUSH
// uc_nation := 0 ;
60548: LD_ADDR_OWVAR 21
60552: PUSH
60553: LD_INT 0
60555: ST_TO_ADDR
// hc_sex := sex_male ;
60556: LD_ADDR_OWVAR 27
60560: PUSH
60561: LD_INT 1
60563: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
60564: LD_ADDR_OWVAR 28
60568: PUSH
60569: LD_INT 16
60571: ST_TO_ADDR
// hc_gallery :=  ;
60572: LD_ADDR_OWVAR 33
60576: PUSH
60577: LD_STRING 
60579: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60580: LD_ADDR_OWVAR 31
60584: PUSH
60585: LD_INT 0
60587: PPUSH
60588: LD_INT 3
60590: PPUSH
60591: CALL_OW 12
60595: PUSH
60596: LD_INT 0
60598: PPUSH
60599: LD_INT 3
60601: PPUSH
60602: CALL_OW 12
60606: PUSH
60607: LD_INT 0
60609: PUSH
60610: LD_INT 0
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: ST_TO_ADDR
// end ;
60619: LD_VAR 0 1
60623: RET
// export function PrepareApeman ( agressivity ) ; begin
60624: LD_INT 0
60626: PPUSH
// uc_side := 0 ;
60627: LD_ADDR_OWVAR 20
60631: PUSH
60632: LD_INT 0
60634: ST_TO_ADDR
// uc_nation := 0 ;
60635: LD_ADDR_OWVAR 21
60639: PUSH
60640: LD_INT 0
60642: ST_TO_ADDR
// hc_sex := sex_male ;
60643: LD_ADDR_OWVAR 27
60647: PUSH
60648: LD_INT 1
60650: ST_TO_ADDR
// hc_class := class_apeman ;
60651: LD_ADDR_OWVAR 28
60655: PUSH
60656: LD_INT 12
60658: ST_TO_ADDR
// hc_gallery :=  ;
60659: LD_ADDR_OWVAR 33
60663: PUSH
60664: LD_STRING 
60666: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60667: LD_ADDR_OWVAR 35
60671: PUSH
60672: LD_VAR 0 1
60676: NEG
60677: PPUSH
60678: LD_VAR 0 1
60682: PPUSH
60683: CALL_OW 12
60687: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60688: LD_ADDR_OWVAR 31
60692: PUSH
60693: LD_INT 0
60695: PPUSH
60696: LD_INT 3
60698: PPUSH
60699: CALL_OW 12
60703: PUSH
60704: LD_INT 0
60706: PPUSH
60707: LD_INT 3
60709: PPUSH
60710: CALL_OW 12
60714: PUSH
60715: LD_INT 0
60717: PUSH
60718: LD_INT 0
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: LIST
60725: LIST
60726: ST_TO_ADDR
// end ;
60727: LD_VAR 0 2
60731: RET
// export function PrepareTiger ( agressivity ) ; begin
60732: LD_INT 0
60734: PPUSH
// uc_side := 0 ;
60735: LD_ADDR_OWVAR 20
60739: PUSH
60740: LD_INT 0
60742: ST_TO_ADDR
// uc_nation := 0 ;
60743: LD_ADDR_OWVAR 21
60747: PUSH
60748: LD_INT 0
60750: ST_TO_ADDR
// hc_class := class_tiger ;
60751: LD_ADDR_OWVAR 28
60755: PUSH
60756: LD_INT 14
60758: ST_TO_ADDR
// hc_gallery :=  ;
60759: LD_ADDR_OWVAR 33
60763: PUSH
60764: LD_STRING 
60766: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60767: LD_ADDR_OWVAR 35
60771: PUSH
60772: LD_VAR 0 1
60776: NEG
60777: PPUSH
60778: LD_VAR 0 1
60782: PPUSH
60783: CALL_OW 12
60787: ST_TO_ADDR
// end ;
60788: LD_VAR 0 2
60792: RET
// export function PrepareEnchidna ( ) ; begin
60793: LD_INT 0
60795: PPUSH
// uc_side := 0 ;
60796: LD_ADDR_OWVAR 20
60800: PUSH
60801: LD_INT 0
60803: ST_TO_ADDR
// uc_nation := 0 ;
60804: LD_ADDR_OWVAR 21
60808: PUSH
60809: LD_INT 0
60811: ST_TO_ADDR
// hc_class := class_baggie ;
60812: LD_ADDR_OWVAR 28
60816: PUSH
60817: LD_INT 13
60819: ST_TO_ADDR
// hc_gallery :=  ;
60820: LD_ADDR_OWVAR 33
60824: PUSH
60825: LD_STRING 
60827: ST_TO_ADDR
// end ;
60828: LD_VAR 0 1
60832: RET
// export function PrepareFrog ( ) ; begin
60833: LD_INT 0
60835: PPUSH
// uc_side := 0 ;
60836: LD_ADDR_OWVAR 20
60840: PUSH
60841: LD_INT 0
60843: ST_TO_ADDR
// uc_nation := 0 ;
60844: LD_ADDR_OWVAR 21
60848: PUSH
60849: LD_INT 0
60851: ST_TO_ADDR
// hc_class := class_frog ;
60852: LD_ADDR_OWVAR 28
60856: PUSH
60857: LD_INT 19
60859: ST_TO_ADDR
// hc_gallery :=  ;
60860: LD_ADDR_OWVAR 33
60864: PUSH
60865: LD_STRING 
60867: ST_TO_ADDR
// end ;
60868: LD_VAR 0 1
60872: RET
// export function PrepareFish ( ) ; begin
60873: LD_INT 0
60875: PPUSH
// uc_side := 0 ;
60876: LD_ADDR_OWVAR 20
60880: PUSH
60881: LD_INT 0
60883: ST_TO_ADDR
// uc_nation := 0 ;
60884: LD_ADDR_OWVAR 21
60888: PUSH
60889: LD_INT 0
60891: ST_TO_ADDR
// hc_class := class_fish ;
60892: LD_ADDR_OWVAR 28
60896: PUSH
60897: LD_INT 20
60899: ST_TO_ADDR
// hc_gallery :=  ;
60900: LD_ADDR_OWVAR 33
60904: PUSH
60905: LD_STRING 
60907: ST_TO_ADDR
// end ;
60908: LD_VAR 0 1
60912: RET
// export function PrepareBird ( ) ; begin
60913: LD_INT 0
60915: PPUSH
// uc_side := 0 ;
60916: LD_ADDR_OWVAR 20
60920: PUSH
60921: LD_INT 0
60923: ST_TO_ADDR
// uc_nation := 0 ;
60924: LD_ADDR_OWVAR 21
60928: PUSH
60929: LD_INT 0
60931: ST_TO_ADDR
// hc_class := class_phororhacos ;
60932: LD_ADDR_OWVAR 28
60936: PUSH
60937: LD_INT 18
60939: ST_TO_ADDR
// hc_gallery :=  ;
60940: LD_ADDR_OWVAR 33
60944: PUSH
60945: LD_STRING 
60947: ST_TO_ADDR
// end ;
60948: LD_VAR 0 1
60952: RET
// export function PrepareHorse ( ) ; begin
60953: LD_INT 0
60955: PPUSH
// uc_side := 0 ;
60956: LD_ADDR_OWVAR 20
60960: PUSH
60961: LD_INT 0
60963: ST_TO_ADDR
// uc_nation := 0 ;
60964: LD_ADDR_OWVAR 21
60968: PUSH
60969: LD_INT 0
60971: ST_TO_ADDR
// hc_class := class_horse ;
60972: LD_ADDR_OWVAR 28
60976: PUSH
60977: LD_INT 21
60979: ST_TO_ADDR
// hc_gallery :=  ;
60980: LD_ADDR_OWVAR 33
60984: PUSH
60985: LD_STRING 
60987: ST_TO_ADDR
// end ;
60988: LD_VAR 0 1
60992: RET
// export function PrepareMastodont ( ) ; begin
60993: LD_INT 0
60995: PPUSH
// uc_side := 0 ;
60996: LD_ADDR_OWVAR 20
61000: PUSH
61001: LD_INT 0
61003: ST_TO_ADDR
// uc_nation := 0 ;
61004: LD_ADDR_OWVAR 21
61008: PUSH
61009: LD_INT 0
61011: ST_TO_ADDR
// vc_chassis := class_mastodont ;
61012: LD_ADDR_OWVAR 37
61016: PUSH
61017: LD_INT 31
61019: ST_TO_ADDR
// vc_control := control_rider ;
61020: LD_ADDR_OWVAR 38
61024: PUSH
61025: LD_INT 4
61027: ST_TO_ADDR
// end ;
61028: LD_VAR 0 1
61032: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61033: LD_INT 0
61035: PPUSH
61036: PPUSH
61037: PPUSH
// uc_side = 0 ;
61038: LD_ADDR_OWVAR 20
61042: PUSH
61043: LD_INT 0
61045: ST_TO_ADDR
// uc_nation = 0 ;
61046: LD_ADDR_OWVAR 21
61050: PUSH
61051: LD_INT 0
61053: ST_TO_ADDR
// InitHc_All ( ) ;
61054: CALL_OW 584
// InitVc ;
61058: CALL_OW 20
// if mastodonts then
61062: LD_VAR 0 6
61066: IFFALSE 61133
// for i = 1 to mastodonts do
61068: LD_ADDR_VAR 0 11
61072: PUSH
61073: DOUBLE
61074: LD_INT 1
61076: DEC
61077: ST_TO_ADDR
61078: LD_VAR 0 6
61082: PUSH
61083: FOR_TO
61084: IFFALSE 61131
// begin vc_chassis := 31 ;
61086: LD_ADDR_OWVAR 37
61090: PUSH
61091: LD_INT 31
61093: ST_TO_ADDR
// vc_control := control_rider ;
61094: LD_ADDR_OWVAR 38
61098: PUSH
61099: LD_INT 4
61101: ST_TO_ADDR
// animal := CreateVehicle ;
61102: LD_ADDR_VAR 0 12
61106: PUSH
61107: CALL_OW 45
61111: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61112: LD_VAR 0 12
61116: PPUSH
61117: LD_VAR 0 8
61121: PPUSH
61122: LD_INT 0
61124: PPUSH
61125: CALL 63261 0 3
// end ;
61129: GO 61083
61131: POP
61132: POP
// if horses then
61133: LD_VAR 0 5
61137: IFFALSE 61204
// for i = 1 to horses do
61139: LD_ADDR_VAR 0 11
61143: PUSH
61144: DOUBLE
61145: LD_INT 1
61147: DEC
61148: ST_TO_ADDR
61149: LD_VAR 0 5
61153: PUSH
61154: FOR_TO
61155: IFFALSE 61202
// begin hc_class := 21 ;
61157: LD_ADDR_OWVAR 28
61161: PUSH
61162: LD_INT 21
61164: ST_TO_ADDR
// hc_gallery :=  ;
61165: LD_ADDR_OWVAR 33
61169: PUSH
61170: LD_STRING 
61172: ST_TO_ADDR
// animal := CreateHuman ;
61173: LD_ADDR_VAR 0 12
61177: PUSH
61178: CALL_OW 44
61182: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61183: LD_VAR 0 12
61187: PPUSH
61188: LD_VAR 0 8
61192: PPUSH
61193: LD_INT 0
61195: PPUSH
61196: CALL 63261 0 3
// end ;
61200: GO 61154
61202: POP
61203: POP
// if birds then
61204: LD_VAR 0 1
61208: IFFALSE 61275
// for i = 1 to birds do
61210: LD_ADDR_VAR 0 11
61214: PUSH
61215: DOUBLE
61216: LD_INT 1
61218: DEC
61219: ST_TO_ADDR
61220: LD_VAR 0 1
61224: PUSH
61225: FOR_TO
61226: IFFALSE 61273
// begin hc_class = 18 ;
61228: LD_ADDR_OWVAR 28
61232: PUSH
61233: LD_INT 18
61235: ST_TO_ADDR
// hc_gallery =  ;
61236: LD_ADDR_OWVAR 33
61240: PUSH
61241: LD_STRING 
61243: ST_TO_ADDR
// animal := CreateHuman ;
61244: LD_ADDR_VAR 0 12
61248: PUSH
61249: CALL_OW 44
61253: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61254: LD_VAR 0 12
61258: PPUSH
61259: LD_VAR 0 8
61263: PPUSH
61264: LD_INT 0
61266: PPUSH
61267: CALL 63261 0 3
// end ;
61271: GO 61225
61273: POP
61274: POP
// if tigers then
61275: LD_VAR 0 2
61279: IFFALSE 61363
// for i = 1 to tigers do
61281: LD_ADDR_VAR 0 11
61285: PUSH
61286: DOUBLE
61287: LD_INT 1
61289: DEC
61290: ST_TO_ADDR
61291: LD_VAR 0 2
61295: PUSH
61296: FOR_TO
61297: IFFALSE 61361
// begin hc_class = class_tiger ;
61299: LD_ADDR_OWVAR 28
61303: PUSH
61304: LD_INT 14
61306: ST_TO_ADDR
// hc_gallery =  ;
61307: LD_ADDR_OWVAR 33
61311: PUSH
61312: LD_STRING 
61314: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61315: LD_ADDR_OWVAR 35
61319: PUSH
61320: LD_INT 7
61322: NEG
61323: PPUSH
61324: LD_INT 7
61326: PPUSH
61327: CALL_OW 12
61331: ST_TO_ADDR
// animal := CreateHuman ;
61332: LD_ADDR_VAR 0 12
61336: PUSH
61337: CALL_OW 44
61341: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61342: LD_VAR 0 12
61346: PPUSH
61347: LD_VAR 0 8
61351: PPUSH
61352: LD_INT 0
61354: PPUSH
61355: CALL 63261 0 3
// end ;
61359: GO 61296
61361: POP
61362: POP
// if apemans then
61363: LD_VAR 0 3
61367: IFFALSE 61490
// for i = 1 to apemans do
61369: LD_ADDR_VAR 0 11
61373: PUSH
61374: DOUBLE
61375: LD_INT 1
61377: DEC
61378: ST_TO_ADDR
61379: LD_VAR 0 3
61383: PUSH
61384: FOR_TO
61385: IFFALSE 61488
// begin hc_class = class_apeman ;
61387: LD_ADDR_OWVAR 28
61391: PUSH
61392: LD_INT 12
61394: ST_TO_ADDR
// hc_gallery =  ;
61395: LD_ADDR_OWVAR 33
61399: PUSH
61400: LD_STRING 
61402: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
61403: LD_ADDR_OWVAR 35
61407: PUSH
61408: LD_INT 2
61410: NEG
61411: PPUSH
61412: LD_INT 2
61414: PPUSH
61415: CALL_OW 12
61419: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61420: LD_ADDR_OWVAR 31
61424: PUSH
61425: LD_INT 1
61427: PPUSH
61428: LD_INT 3
61430: PPUSH
61431: CALL_OW 12
61435: PUSH
61436: LD_INT 1
61438: PPUSH
61439: LD_INT 3
61441: PPUSH
61442: CALL_OW 12
61446: PUSH
61447: LD_INT 0
61449: PUSH
61450: LD_INT 0
61452: PUSH
61453: EMPTY
61454: LIST
61455: LIST
61456: LIST
61457: LIST
61458: ST_TO_ADDR
// animal := CreateHuman ;
61459: LD_ADDR_VAR 0 12
61463: PUSH
61464: CALL_OW 44
61468: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61469: LD_VAR 0 12
61473: PPUSH
61474: LD_VAR 0 8
61478: PPUSH
61479: LD_INT 0
61481: PPUSH
61482: CALL 63261 0 3
// end ;
61486: GO 61384
61488: POP
61489: POP
// if enchidnas then
61490: LD_VAR 0 4
61494: IFFALSE 61561
// for i = 1 to enchidnas do
61496: LD_ADDR_VAR 0 11
61500: PUSH
61501: DOUBLE
61502: LD_INT 1
61504: DEC
61505: ST_TO_ADDR
61506: LD_VAR 0 4
61510: PUSH
61511: FOR_TO
61512: IFFALSE 61559
// begin hc_class = 13 ;
61514: LD_ADDR_OWVAR 28
61518: PUSH
61519: LD_INT 13
61521: ST_TO_ADDR
// hc_gallery =  ;
61522: LD_ADDR_OWVAR 33
61526: PUSH
61527: LD_STRING 
61529: ST_TO_ADDR
// animal := CreateHuman ;
61530: LD_ADDR_VAR 0 12
61534: PUSH
61535: CALL_OW 44
61539: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61540: LD_VAR 0 12
61544: PPUSH
61545: LD_VAR 0 8
61549: PPUSH
61550: LD_INT 0
61552: PPUSH
61553: CALL 63261 0 3
// end ;
61557: GO 61511
61559: POP
61560: POP
// if fishes then
61561: LD_VAR 0 7
61565: IFFALSE 61632
// for i = 1 to fishes do
61567: LD_ADDR_VAR 0 11
61571: PUSH
61572: DOUBLE
61573: LD_INT 1
61575: DEC
61576: ST_TO_ADDR
61577: LD_VAR 0 7
61581: PUSH
61582: FOR_TO
61583: IFFALSE 61630
// begin hc_class = 20 ;
61585: LD_ADDR_OWVAR 28
61589: PUSH
61590: LD_INT 20
61592: ST_TO_ADDR
// hc_gallery =  ;
61593: LD_ADDR_OWVAR 33
61597: PUSH
61598: LD_STRING 
61600: ST_TO_ADDR
// animal := CreateHuman ;
61601: LD_ADDR_VAR 0 12
61605: PUSH
61606: CALL_OW 44
61610: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61611: LD_VAR 0 12
61615: PPUSH
61616: LD_VAR 0 9
61620: PPUSH
61621: LD_INT 0
61623: PPUSH
61624: CALL 63261 0 3
// end ;
61628: GO 61582
61630: POP
61631: POP
// end ;
61632: LD_VAR 0 10
61636: RET
// export function WantHeal ( sci , unit ) ; begin
61637: LD_INT 0
61639: PPUSH
// if GetTaskList ( sci ) > 0 then
61640: LD_VAR 0 1
61644: PPUSH
61645: CALL_OW 437
61649: PUSH
61650: LD_INT 0
61652: GREATER
61653: IFFALSE 61723
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61655: LD_VAR 0 1
61659: PPUSH
61660: CALL_OW 437
61664: PUSH
61665: LD_INT 1
61667: ARRAY
61668: PUSH
61669: LD_INT 1
61671: ARRAY
61672: PUSH
61673: LD_STRING l
61675: EQUAL
61676: PUSH
61677: LD_VAR 0 1
61681: PPUSH
61682: CALL_OW 437
61686: PUSH
61687: LD_INT 1
61689: ARRAY
61690: PUSH
61691: LD_INT 4
61693: ARRAY
61694: PUSH
61695: LD_VAR 0 2
61699: EQUAL
61700: AND
61701: IFFALSE 61713
// result := true else
61703: LD_ADDR_VAR 0 3
61707: PUSH
61708: LD_INT 1
61710: ST_TO_ADDR
61711: GO 61721
// result := false ;
61713: LD_ADDR_VAR 0 3
61717: PUSH
61718: LD_INT 0
61720: ST_TO_ADDR
// end else
61721: GO 61731
// result := false ;
61723: LD_ADDR_VAR 0 3
61727: PUSH
61728: LD_INT 0
61730: ST_TO_ADDR
// end ;
61731: LD_VAR 0 3
61735: RET
// export function HealTarget ( sci ) ; begin
61736: LD_INT 0
61738: PPUSH
// if not sci then
61739: LD_VAR 0 1
61743: NOT
61744: IFFALSE 61748
// exit ;
61746: GO 61813
// result := 0 ;
61748: LD_ADDR_VAR 0 2
61752: PUSH
61753: LD_INT 0
61755: ST_TO_ADDR
// if GetTaskList ( sci ) then
61756: LD_VAR 0 1
61760: PPUSH
61761: CALL_OW 437
61765: IFFALSE 61813
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61767: LD_VAR 0 1
61771: PPUSH
61772: CALL_OW 437
61776: PUSH
61777: LD_INT 1
61779: ARRAY
61780: PUSH
61781: LD_INT 1
61783: ARRAY
61784: PUSH
61785: LD_STRING l
61787: EQUAL
61788: IFFALSE 61813
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
61790: LD_ADDR_VAR 0 2
61794: PUSH
61795: LD_VAR 0 1
61799: PPUSH
61800: CALL_OW 437
61804: PUSH
61805: LD_INT 1
61807: ARRAY
61808: PUSH
61809: LD_INT 4
61811: ARRAY
61812: ST_TO_ADDR
// end ;
61813: LD_VAR 0 2
61817: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
61818: LD_INT 0
61820: PPUSH
61821: PPUSH
61822: PPUSH
61823: PPUSH
// if not base_units then
61824: LD_VAR 0 1
61828: NOT
61829: IFFALSE 61833
// exit ;
61831: GO 61920
// result := false ;
61833: LD_ADDR_VAR 0 2
61837: PUSH
61838: LD_INT 0
61840: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
61841: LD_ADDR_VAR 0 5
61845: PUSH
61846: LD_VAR 0 1
61850: PPUSH
61851: LD_INT 21
61853: PUSH
61854: LD_INT 3
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PPUSH
61861: CALL_OW 72
61865: ST_TO_ADDR
// if not tmp then
61866: LD_VAR 0 5
61870: NOT
61871: IFFALSE 61875
// exit ;
61873: GO 61920
// for i in tmp do
61875: LD_ADDR_VAR 0 3
61879: PUSH
61880: LD_VAR 0 5
61884: PUSH
61885: FOR_IN
61886: IFFALSE 61918
// begin result := EnemyInRange ( i , 22 ) ;
61888: LD_ADDR_VAR 0 2
61892: PUSH
61893: LD_VAR 0 3
61897: PPUSH
61898: LD_INT 22
61900: PPUSH
61901: CALL 59507 0 2
61905: ST_TO_ADDR
// if result then
61906: LD_VAR 0 2
61910: IFFALSE 61916
// exit ;
61912: POP
61913: POP
61914: GO 61920
// end ;
61916: GO 61885
61918: POP
61919: POP
// end ;
61920: LD_VAR 0 2
61924: RET
// export function FilterByTag ( units , tag ) ; begin
61925: LD_INT 0
61927: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
61928: LD_ADDR_VAR 0 3
61932: PUSH
61933: LD_VAR 0 1
61937: PPUSH
61938: LD_INT 120
61940: PUSH
61941: LD_VAR 0 2
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: PPUSH
61950: CALL_OW 72
61954: ST_TO_ADDR
// end ;
61955: LD_VAR 0 3
61959: RET
// export function IsDriver ( un ) ; begin
61960: LD_INT 0
61962: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
61963: LD_ADDR_VAR 0 2
61967: PUSH
61968: LD_VAR 0 1
61972: PUSH
61973: LD_INT 55
61975: PUSH
61976: EMPTY
61977: LIST
61978: PPUSH
61979: CALL_OW 69
61983: IN
61984: ST_TO_ADDR
// end ;
61985: LD_VAR 0 2
61989: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
61990: LD_INT 0
61992: PPUSH
61993: PPUSH
// list := [ ] ;
61994: LD_ADDR_VAR 0 5
61998: PUSH
61999: EMPTY
62000: ST_TO_ADDR
// case d of 0 :
62001: LD_VAR 0 3
62005: PUSH
62006: LD_INT 0
62008: DOUBLE
62009: EQUAL
62010: IFTRUE 62014
62012: GO 62147
62014: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62015: LD_ADDR_VAR 0 5
62019: PUSH
62020: LD_VAR 0 1
62024: PUSH
62025: LD_INT 4
62027: MINUS
62028: PUSH
62029: LD_VAR 0 2
62033: PUSH
62034: LD_INT 4
62036: MINUS
62037: PUSH
62038: LD_INT 2
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: LIST
62045: PUSH
62046: LD_VAR 0 1
62050: PUSH
62051: LD_INT 3
62053: MINUS
62054: PUSH
62055: LD_VAR 0 2
62059: PUSH
62060: LD_INT 1
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: LIST
62067: PUSH
62068: LD_VAR 0 1
62072: PUSH
62073: LD_INT 4
62075: PLUS
62076: PUSH
62077: LD_VAR 0 2
62081: PUSH
62082: LD_INT 4
62084: PUSH
62085: EMPTY
62086: LIST
62087: LIST
62088: LIST
62089: PUSH
62090: LD_VAR 0 1
62094: PUSH
62095: LD_INT 3
62097: PLUS
62098: PUSH
62099: LD_VAR 0 2
62103: PUSH
62104: LD_INT 3
62106: PLUS
62107: PUSH
62108: LD_INT 5
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: LIST
62115: PUSH
62116: LD_VAR 0 1
62120: PUSH
62121: LD_VAR 0 2
62125: PUSH
62126: LD_INT 4
62128: PLUS
62129: PUSH
62130: LD_INT 0
62132: PUSH
62133: EMPTY
62134: LIST
62135: LIST
62136: LIST
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: LIST
62142: LIST
62143: LIST
62144: ST_TO_ADDR
// end ; 1 :
62145: GO 62845
62147: LD_INT 1
62149: DOUBLE
62150: EQUAL
62151: IFTRUE 62155
62153: GO 62288
62155: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62156: LD_ADDR_VAR 0 5
62160: PUSH
62161: LD_VAR 0 1
62165: PUSH
62166: LD_VAR 0 2
62170: PUSH
62171: LD_INT 4
62173: MINUS
62174: PUSH
62175: LD_INT 3
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: LIST
62182: PUSH
62183: LD_VAR 0 1
62187: PUSH
62188: LD_INT 3
62190: MINUS
62191: PUSH
62192: LD_VAR 0 2
62196: PUSH
62197: LD_INT 3
62199: MINUS
62200: PUSH
62201: LD_INT 2
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: LIST
62208: PUSH
62209: LD_VAR 0 1
62213: PUSH
62214: LD_INT 4
62216: MINUS
62217: PUSH
62218: LD_VAR 0 2
62222: PUSH
62223: LD_INT 1
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: LIST
62230: PUSH
62231: LD_VAR 0 1
62235: PUSH
62236: LD_VAR 0 2
62240: PUSH
62241: LD_INT 3
62243: PLUS
62244: PUSH
62245: LD_INT 0
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: LIST
62252: PUSH
62253: LD_VAR 0 1
62257: PUSH
62258: LD_INT 4
62260: PLUS
62261: PUSH
62262: LD_VAR 0 2
62266: PUSH
62267: LD_INT 4
62269: PLUS
62270: PUSH
62271: LD_INT 5
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: LIST
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: LIST
62283: LIST
62284: LIST
62285: ST_TO_ADDR
// end ; 2 :
62286: GO 62845
62288: LD_INT 2
62290: DOUBLE
62291: EQUAL
62292: IFTRUE 62296
62294: GO 62425
62296: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62297: LD_ADDR_VAR 0 5
62301: PUSH
62302: LD_VAR 0 1
62306: PUSH
62307: LD_VAR 0 2
62311: PUSH
62312: LD_INT 3
62314: MINUS
62315: PUSH
62316: LD_INT 3
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: LIST
62323: PUSH
62324: LD_VAR 0 1
62328: PUSH
62329: LD_INT 4
62331: PLUS
62332: PUSH
62333: LD_VAR 0 2
62337: PUSH
62338: LD_INT 4
62340: PUSH
62341: EMPTY
62342: LIST
62343: LIST
62344: LIST
62345: PUSH
62346: LD_VAR 0 1
62350: PUSH
62351: LD_VAR 0 2
62355: PUSH
62356: LD_INT 4
62358: PLUS
62359: PUSH
62360: LD_INT 0
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: LIST
62367: PUSH
62368: LD_VAR 0 1
62372: PUSH
62373: LD_INT 3
62375: MINUS
62376: PUSH
62377: LD_VAR 0 2
62381: PUSH
62382: LD_INT 1
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: LIST
62389: PUSH
62390: LD_VAR 0 1
62394: PUSH
62395: LD_INT 4
62397: MINUS
62398: PUSH
62399: LD_VAR 0 2
62403: PUSH
62404: LD_INT 4
62406: MINUS
62407: PUSH
62408: LD_INT 2
62410: PUSH
62411: EMPTY
62412: LIST
62413: LIST
62414: LIST
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: LIST
62420: LIST
62421: LIST
62422: ST_TO_ADDR
// end ; 3 :
62423: GO 62845
62425: LD_INT 3
62427: DOUBLE
62428: EQUAL
62429: IFTRUE 62433
62431: GO 62566
62433: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62434: LD_ADDR_VAR 0 5
62438: PUSH
62439: LD_VAR 0 1
62443: PUSH
62444: LD_INT 3
62446: PLUS
62447: PUSH
62448: LD_VAR 0 2
62452: PUSH
62453: LD_INT 4
62455: PUSH
62456: EMPTY
62457: LIST
62458: LIST
62459: LIST
62460: PUSH
62461: LD_VAR 0 1
62465: PUSH
62466: LD_INT 4
62468: PLUS
62469: PUSH
62470: LD_VAR 0 2
62474: PUSH
62475: LD_INT 4
62477: PLUS
62478: PUSH
62479: LD_INT 5
62481: PUSH
62482: EMPTY
62483: LIST
62484: LIST
62485: LIST
62486: PUSH
62487: LD_VAR 0 1
62491: PUSH
62492: LD_INT 4
62494: MINUS
62495: PUSH
62496: LD_VAR 0 2
62500: PUSH
62501: LD_INT 1
62503: PUSH
62504: EMPTY
62505: LIST
62506: LIST
62507: LIST
62508: PUSH
62509: LD_VAR 0 1
62513: PUSH
62514: LD_VAR 0 2
62518: PUSH
62519: LD_INT 4
62521: MINUS
62522: PUSH
62523: LD_INT 3
62525: PUSH
62526: EMPTY
62527: LIST
62528: LIST
62529: LIST
62530: PUSH
62531: LD_VAR 0 1
62535: PUSH
62536: LD_INT 3
62538: MINUS
62539: PUSH
62540: LD_VAR 0 2
62544: PUSH
62545: LD_INT 3
62547: MINUS
62548: PUSH
62549: LD_INT 2
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: LIST
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: LIST
62561: LIST
62562: LIST
62563: ST_TO_ADDR
// end ; 4 :
62564: GO 62845
62566: LD_INT 4
62568: DOUBLE
62569: EQUAL
62570: IFTRUE 62574
62572: GO 62707
62574: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62575: LD_ADDR_VAR 0 5
62579: PUSH
62580: LD_VAR 0 1
62584: PUSH
62585: LD_VAR 0 2
62589: PUSH
62590: LD_INT 4
62592: PLUS
62593: PUSH
62594: LD_INT 0
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: LIST
62601: PUSH
62602: LD_VAR 0 1
62606: PUSH
62607: LD_INT 3
62609: PLUS
62610: PUSH
62611: LD_VAR 0 2
62615: PUSH
62616: LD_INT 3
62618: PLUS
62619: PUSH
62620: LD_INT 5
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: LIST
62627: PUSH
62628: LD_VAR 0 1
62632: PUSH
62633: LD_INT 4
62635: PLUS
62636: PUSH
62637: LD_VAR 0 2
62641: PUSH
62642: LD_INT 4
62644: PUSH
62645: EMPTY
62646: LIST
62647: LIST
62648: LIST
62649: PUSH
62650: LD_VAR 0 1
62654: PUSH
62655: LD_VAR 0 2
62659: PUSH
62660: LD_INT 3
62662: MINUS
62663: PUSH
62664: LD_INT 3
62666: PUSH
62667: EMPTY
62668: LIST
62669: LIST
62670: LIST
62671: PUSH
62672: LD_VAR 0 1
62676: PUSH
62677: LD_INT 4
62679: MINUS
62680: PUSH
62681: LD_VAR 0 2
62685: PUSH
62686: LD_INT 4
62688: MINUS
62689: PUSH
62690: LD_INT 2
62692: PUSH
62693: EMPTY
62694: LIST
62695: LIST
62696: LIST
62697: PUSH
62698: EMPTY
62699: LIST
62700: LIST
62701: LIST
62702: LIST
62703: LIST
62704: ST_TO_ADDR
// end ; 5 :
62705: GO 62845
62707: LD_INT 5
62709: DOUBLE
62710: EQUAL
62711: IFTRUE 62715
62713: GO 62844
62715: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62716: LD_ADDR_VAR 0 5
62720: PUSH
62721: LD_VAR 0 1
62725: PUSH
62726: LD_INT 4
62728: MINUS
62729: PUSH
62730: LD_VAR 0 2
62734: PUSH
62735: LD_INT 1
62737: PUSH
62738: EMPTY
62739: LIST
62740: LIST
62741: LIST
62742: PUSH
62743: LD_VAR 0 1
62747: PUSH
62748: LD_VAR 0 2
62752: PUSH
62753: LD_INT 4
62755: MINUS
62756: PUSH
62757: LD_INT 3
62759: PUSH
62760: EMPTY
62761: LIST
62762: LIST
62763: LIST
62764: PUSH
62765: LD_VAR 0 1
62769: PUSH
62770: LD_INT 4
62772: PLUS
62773: PUSH
62774: LD_VAR 0 2
62778: PUSH
62779: LD_INT 4
62781: PLUS
62782: PUSH
62783: LD_INT 5
62785: PUSH
62786: EMPTY
62787: LIST
62788: LIST
62789: LIST
62790: PUSH
62791: LD_VAR 0 1
62795: PUSH
62796: LD_INT 3
62798: PLUS
62799: PUSH
62800: LD_VAR 0 2
62804: PUSH
62805: LD_INT 4
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: LIST
62812: PUSH
62813: LD_VAR 0 1
62817: PUSH
62818: LD_VAR 0 2
62822: PUSH
62823: LD_INT 3
62825: PLUS
62826: PUSH
62827: LD_INT 0
62829: PUSH
62830: EMPTY
62831: LIST
62832: LIST
62833: LIST
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: LIST
62839: LIST
62840: LIST
62841: ST_TO_ADDR
// end ; end ;
62842: GO 62845
62844: POP
// result := list ;
62845: LD_ADDR_VAR 0 4
62849: PUSH
62850: LD_VAR 0 5
62854: ST_TO_ADDR
// end ;
62855: LD_VAR 0 4
62859: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
62860: LD_INT 0
62862: PPUSH
62863: PPUSH
62864: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
62865: LD_VAR 0 1
62869: NOT
62870: PUSH
62871: LD_VAR 0 2
62875: PUSH
62876: LD_INT 1
62878: PUSH
62879: LD_INT 2
62881: PUSH
62882: LD_INT 3
62884: PUSH
62885: LD_INT 4
62887: PUSH
62888: EMPTY
62889: LIST
62890: LIST
62891: LIST
62892: LIST
62893: IN
62894: NOT
62895: OR
62896: IFFALSE 62900
// exit ;
62898: GO 62983
// tmp := [ ] ;
62900: LD_ADDR_VAR 0 5
62904: PUSH
62905: EMPTY
62906: ST_TO_ADDR
// for i in units do
62907: LD_ADDR_VAR 0 4
62911: PUSH
62912: LD_VAR 0 1
62916: PUSH
62917: FOR_IN
62918: IFFALSE 62952
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
62920: LD_ADDR_VAR 0 5
62924: PUSH
62925: LD_VAR 0 5
62929: PPUSH
62930: LD_VAR 0 4
62934: PPUSH
62935: LD_VAR 0 2
62939: PPUSH
62940: CALL_OW 259
62944: PPUSH
62945: CALL 64344 0 2
62949: ST_TO_ADDR
62950: GO 62917
62952: POP
62953: POP
// if not tmp then
62954: LD_VAR 0 5
62958: NOT
62959: IFFALSE 62963
// exit ;
62961: GO 62983
// result := SortListByListDesc ( units , tmp ) ;
62963: LD_ADDR_VAR 0 3
62967: PUSH
62968: LD_VAR 0 1
62972: PPUSH
62973: LD_VAR 0 5
62977: PPUSH
62978: CALL_OW 77
62982: ST_TO_ADDR
// end ;
62983: LD_VAR 0 3
62987: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
62988: LD_INT 0
62990: PPUSH
62991: PPUSH
62992: PPUSH
// result := false ;
62993: LD_ADDR_VAR 0 3
62997: PUSH
62998: LD_INT 0
63000: ST_TO_ADDR
// if not building then
63001: LD_VAR 0 2
63005: NOT
63006: IFFALSE 63010
// exit ;
63008: GO 63148
// x := GetX ( building ) ;
63010: LD_ADDR_VAR 0 4
63014: PUSH
63015: LD_VAR 0 2
63019: PPUSH
63020: CALL_OW 250
63024: ST_TO_ADDR
// y := GetY ( building ) ;
63025: LD_ADDR_VAR 0 5
63029: PUSH
63030: LD_VAR 0 2
63034: PPUSH
63035: CALL_OW 251
63039: ST_TO_ADDR
// if not x or not y then
63040: LD_VAR 0 4
63044: NOT
63045: PUSH
63046: LD_VAR 0 5
63050: NOT
63051: OR
63052: IFFALSE 63056
// exit ;
63054: GO 63148
// if GetTaskList ( unit ) then
63056: LD_VAR 0 1
63060: PPUSH
63061: CALL_OW 437
63065: IFFALSE 63148
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63067: LD_STRING e
63069: PUSH
63070: LD_VAR 0 1
63074: PPUSH
63075: CALL_OW 437
63079: PUSH
63080: LD_INT 1
63082: ARRAY
63083: PUSH
63084: LD_INT 1
63086: ARRAY
63087: EQUAL
63088: PUSH
63089: LD_VAR 0 4
63093: PUSH
63094: LD_VAR 0 1
63098: PPUSH
63099: CALL_OW 437
63103: PUSH
63104: LD_INT 1
63106: ARRAY
63107: PUSH
63108: LD_INT 2
63110: ARRAY
63111: EQUAL
63112: AND
63113: PUSH
63114: LD_VAR 0 5
63118: PUSH
63119: LD_VAR 0 1
63123: PPUSH
63124: CALL_OW 437
63128: PUSH
63129: LD_INT 1
63131: ARRAY
63132: PUSH
63133: LD_INT 3
63135: ARRAY
63136: EQUAL
63137: AND
63138: IFFALSE 63148
// result := true end ;
63140: LD_ADDR_VAR 0 3
63144: PUSH
63145: LD_INT 1
63147: ST_TO_ADDR
// end ;
63148: LD_VAR 0 3
63152: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
63153: LD_INT 0
63155: PPUSH
// result := false ;
63156: LD_ADDR_VAR 0 4
63160: PUSH
63161: LD_INT 0
63163: ST_TO_ADDR
// if GetTaskList ( unit ) then
63164: LD_VAR 0 1
63168: PPUSH
63169: CALL_OW 437
63173: IFFALSE 63256
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63175: LD_STRING M
63177: PUSH
63178: LD_VAR 0 1
63182: PPUSH
63183: CALL_OW 437
63187: PUSH
63188: LD_INT 1
63190: ARRAY
63191: PUSH
63192: LD_INT 1
63194: ARRAY
63195: EQUAL
63196: PUSH
63197: LD_VAR 0 2
63201: PUSH
63202: LD_VAR 0 1
63206: PPUSH
63207: CALL_OW 437
63211: PUSH
63212: LD_INT 1
63214: ARRAY
63215: PUSH
63216: LD_INT 2
63218: ARRAY
63219: EQUAL
63220: AND
63221: PUSH
63222: LD_VAR 0 3
63226: PUSH
63227: LD_VAR 0 1
63231: PPUSH
63232: CALL_OW 437
63236: PUSH
63237: LD_INT 1
63239: ARRAY
63240: PUSH
63241: LD_INT 3
63243: ARRAY
63244: EQUAL
63245: AND
63246: IFFALSE 63256
// result := true ;
63248: LD_ADDR_VAR 0 4
63252: PUSH
63253: LD_INT 1
63255: ST_TO_ADDR
// end ; end ;
63256: LD_VAR 0 4
63260: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63261: LD_INT 0
63263: PPUSH
63264: PPUSH
63265: PPUSH
63266: PPUSH
// if not unit or not area then
63267: LD_VAR 0 1
63271: NOT
63272: PUSH
63273: LD_VAR 0 2
63277: NOT
63278: OR
63279: IFFALSE 63283
// exit ;
63281: GO 63447
// tmp := AreaToList ( area , i ) ;
63283: LD_ADDR_VAR 0 6
63287: PUSH
63288: LD_VAR 0 2
63292: PPUSH
63293: LD_VAR 0 5
63297: PPUSH
63298: CALL_OW 517
63302: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63303: LD_ADDR_VAR 0 5
63307: PUSH
63308: DOUBLE
63309: LD_INT 1
63311: DEC
63312: ST_TO_ADDR
63313: LD_VAR 0 6
63317: PUSH
63318: LD_INT 1
63320: ARRAY
63321: PUSH
63322: FOR_TO
63323: IFFALSE 63445
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63325: LD_ADDR_VAR 0 7
63329: PUSH
63330: LD_VAR 0 6
63334: PUSH
63335: LD_INT 1
63337: ARRAY
63338: PUSH
63339: LD_VAR 0 5
63343: ARRAY
63344: PUSH
63345: LD_VAR 0 6
63349: PUSH
63350: LD_INT 2
63352: ARRAY
63353: PUSH
63354: LD_VAR 0 5
63358: ARRAY
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
63364: LD_VAR 0 7
63368: PUSH
63369: LD_INT 1
63371: ARRAY
63372: PPUSH
63373: LD_VAR 0 7
63377: PUSH
63378: LD_INT 2
63380: ARRAY
63381: PPUSH
63382: CALL_OW 428
63386: PUSH
63387: LD_INT 0
63389: EQUAL
63390: IFFALSE 63443
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63392: LD_VAR 0 1
63396: PPUSH
63397: LD_VAR 0 7
63401: PUSH
63402: LD_INT 1
63404: ARRAY
63405: PPUSH
63406: LD_VAR 0 7
63410: PUSH
63411: LD_INT 2
63413: ARRAY
63414: PPUSH
63415: LD_VAR 0 3
63419: PPUSH
63420: CALL_OW 48
// result := IsPlaced ( unit ) ;
63424: LD_ADDR_VAR 0 4
63428: PUSH
63429: LD_VAR 0 1
63433: PPUSH
63434: CALL_OW 305
63438: ST_TO_ADDR
// exit ;
63439: POP
63440: POP
63441: GO 63447
// end ; end ;
63443: GO 63322
63445: POP
63446: POP
// end ;
63447: LD_VAR 0 4
63451: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63452: LD_INT 0
63454: PPUSH
63455: PPUSH
63456: PPUSH
// if not side or side > 8 then
63457: LD_VAR 0 1
63461: NOT
63462: PUSH
63463: LD_VAR 0 1
63467: PUSH
63468: LD_INT 8
63470: GREATER
63471: OR
63472: IFFALSE 63476
// exit ;
63474: GO 63663
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63476: LD_ADDR_VAR 0 4
63480: PUSH
63481: LD_INT 22
63483: PUSH
63484: LD_VAR 0 1
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: PUSH
63493: LD_INT 21
63495: PUSH
63496: LD_INT 3
63498: PUSH
63499: EMPTY
63500: LIST
63501: LIST
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: PPUSH
63507: CALL_OW 69
63511: ST_TO_ADDR
// if not tmp then
63512: LD_VAR 0 4
63516: NOT
63517: IFFALSE 63521
// exit ;
63519: GO 63663
// enable_addtolog := true ;
63521: LD_ADDR_OWVAR 81
63525: PUSH
63526: LD_INT 1
63528: ST_TO_ADDR
// AddToLog ( [ ) ;
63529: LD_STRING [
63531: PPUSH
63532: CALL_OW 561
// for i in tmp do
63536: LD_ADDR_VAR 0 3
63540: PUSH
63541: LD_VAR 0 4
63545: PUSH
63546: FOR_IN
63547: IFFALSE 63654
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63549: LD_STRING [
63551: PUSH
63552: LD_VAR 0 3
63556: PPUSH
63557: CALL_OW 266
63561: STR
63562: PUSH
63563: LD_STRING , 
63565: STR
63566: PUSH
63567: LD_VAR 0 3
63571: PPUSH
63572: CALL_OW 250
63576: STR
63577: PUSH
63578: LD_STRING , 
63580: STR
63581: PUSH
63582: LD_VAR 0 3
63586: PPUSH
63587: CALL_OW 251
63591: STR
63592: PUSH
63593: LD_STRING , 
63595: STR
63596: PUSH
63597: LD_VAR 0 3
63601: PPUSH
63602: CALL_OW 254
63606: STR
63607: PUSH
63608: LD_STRING , 
63610: STR
63611: PUSH
63612: LD_VAR 0 3
63616: PPUSH
63617: LD_INT 1
63619: PPUSH
63620: CALL_OW 268
63624: STR
63625: PUSH
63626: LD_STRING , 
63628: STR
63629: PUSH
63630: LD_VAR 0 3
63634: PPUSH
63635: LD_INT 2
63637: PPUSH
63638: CALL_OW 268
63642: STR
63643: PUSH
63644: LD_STRING ],
63646: STR
63647: PPUSH
63648: CALL_OW 561
// end ;
63652: GO 63546
63654: POP
63655: POP
// AddToLog ( ]; ) ;
63656: LD_STRING ];
63658: PPUSH
63659: CALL_OW 561
// end ;
63663: LD_VAR 0 2
63667: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63668: LD_INT 0
63670: PPUSH
63671: PPUSH
63672: PPUSH
63673: PPUSH
63674: PPUSH
// if not area or not rate or not max then
63675: LD_VAR 0 1
63679: NOT
63680: PUSH
63681: LD_VAR 0 2
63685: NOT
63686: OR
63687: PUSH
63688: LD_VAR 0 4
63692: NOT
63693: OR
63694: IFFALSE 63698
// exit ;
63696: GO 63887
// while 1 do
63698: LD_INT 1
63700: IFFALSE 63887
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63702: LD_ADDR_VAR 0 9
63706: PUSH
63707: LD_VAR 0 1
63711: PPUSH
63712: LD_INT 1
63714: PPUSH
63715: CALL_OW 287
63719: PUSH
63720: LD_INT 10
63722: MUL
63723: ST_TO_ADDR
// r := rate / 10 ;
63724: LD_ADDR_VAR 0 7
63728: PUSH
63729: LD_VAR 0 2
63733: PUSH
63734: LD_INT 10
63736: DIVREAL
63737: ST_TO_ADDR
// time := 1 1$00 ;
63738: LD_ADDR_VAR 0 8
63742: PUSH
63743: LD_INT 2100
63745: ST_TO_ADDR
// if amount < min then
63746: LD_VAR 0 9
63750: PUSH
63751: LD_VAR 0 3
63755: LESS
63756: IFFALSE 63774
// r := r * 2 else
63758: LD_ADDR_VAR 0 7
63762: PUSH
63763: LD_VAR 0 7
63767: PUSH
63768: LD_INT 2
63770: MUL
63771: ST_TO_ADDR
63772: GO 63800
// if amount > max then
63774: LD_VAR 0 9
63778: PUSH
63779: LD_VAR 0 4
63783: GREATER
63784: IFFALSE 63800
// r := r / 2 ;
63786: LD_ADDR_VAR 0 7
63790: PUSH
63791: LD_VAR 0 7
63795: PUSH
63796: LD_INT 2
63798: DIVREAL
63799: ST_TO_ADDR
// time := time / r ;
63800: LD_ADDR_VAR 0 8
63804: PUSH
63805: LD_VAR 0 8
63809: PUSH
63810: LD_VAR 0 7
63814: DIVREAL
63815: ST_TO_ADDR
// if time < 0 then
63816: LD_VAR 0 8
63820: PUSH
63821: LD_INT 0
63823: LESS
63824: IFFALSE 63841
// time := time * - 1 ;
63826: LD_ADDR_VAR 0 8
63830: PUSH
63831: LD_VAR 0 8
63835: PUSH
63836: LD_INT 1
63838: NEG
63839: MUL
63840: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
63841: LD_VAR 0 8
63845: PUSH
63846: LD_INT 35
63848: PPUSH
63849: LD_INT 875
63851: PPUSH
63852: CALL_OW 12
63856: PLUS
63857: PPUSH
63858: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
63862: LD_INT 1
63864: PPUSH
63865: LD_INT 5
63867: PPUSH
63868: CALL_OW 12
63872: PPUSH
63873: LD_VAR 0 1
63877: PPUSH
63878: LD_INT 1
63880: PPUSH
63881: CALL_OW 55
// end ;
63885: GO 63698
// end ;
63887: LD_VAR 0 5
63891: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
63892: LD_INT 0
63894: PPUSH
63895: PPUSH
63896: PPUSH
63897: PPUSH
63898: PPUSH
63899: PPUSH
63900: PPUSH
63901: PPUSH
// if not turrets or not factories then
63902: LD_VAR 0 1
63906: NOT
63907: PUSH
63908: LD_VAR 0 2
63912: NOT
63913: OR
63914: IFFALSE 63918
// exit ;
63916: GO 64225
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
63918: LD_ADDR_VAR 0 10
63922: PUSH
63923: LD_INT 5
63925: PUSH
63926: LD_INT 6
63928: PUSH
63929: EMPTY
63930: LIST
63931: LIST
63932: PUSH
63933: LD_INT 2
63935: PUSH
63936: LD_INT 4
63938: PUSH
63939: EMPTY
63940: LIST
63941: LIST
63942: PUSH
63943: LD_INT 3
63945: PUSH
63946: LD_INT 5
63948: PUSH
63949: EMPTY
63950: LIST
63951: LIST
63952: PUSH
63953: EMPTY
63954: LIST
63955: LIST
63956: LIST
63957: PUSH
63958: LD_INT 24
63960: PUSH
63961: LD_INT 25
63963: PUSH
63964: EMPTY
63965: LIST
63966: LIST
63967: PUSH
63968: LD_INT 23
63970: PUSH
63971: LD_INT 27
63973: PUSH
63974: EMPTY
63975: LIST
63976: LIST
63977: PUSH
63978: EMPTY
63979: LIST
63980: LIST
63981: PUSH
63982: LD_INT 42
63984: PUSH
63985: LD_INT 43
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: PUSH
63992: LD_INT 44
63994: PUSH
63995: LD_INT 46
63997: PUSH
63998: EMPTY
63999: LIST
64000: LIST
64001: PUSH
64002: LD_INT 45
64004: PUSH
64005: LD_INT 47
64007: PUSH
64008: EMPTY
64009: LIST
64010: LIST
64011: PUSH
64012: EMPTY
64013: LIST
64014: LIST
64015: LIST
64016: PUSH
64017: EMPTY
64018: LIST
64019: LIST
64020: LIST
64021: ST_TO_ADDR
// result := [ ] ;
64022: LD_ADDR_VAR 0 3
64026: PUSH
64027: EMPTY
64028: ST_TO_ADDR
// for i in turrets do
64029: LD_ADDR_VAR 0 4
64033: PUSH
64034: LD_VAR 0 1
64038: PUSH
64039: FOR_IN
64040: IFFALSE 64223
// begin nat := GetNation ( i ) ;
64042: LD_ADDR_VAR 0 7
64046: PUSH
64047: LD_VAR 0 4
64051: PPUSH
64052: CALL_OW 248
64056: ST_TO_ADDR
// weapon := 0 ;
64057: LD_ADDR_VAR 0 8
64061: PUSH
64062: LD_INT 0
64064: ST_TO_ADDR
// if not nat then
64065: LD_VAR 0 7
64069: NOT
64070: IFFALSE 64074
// continue ;
64072: GO 64039
// for j in list [ nat ] do
64074: LD_ADDR_VAR 0 5
64078: PUSH
64079: LD_VAR 0 10
64083: PUSH
64084: LD_VAR 0 7
64088: ARRAY
64089: PUSH
64090: FOR_IN
64091: IFFALSE 64132
// if GetBWeapon ( i ) = j [ 1 ] then
64093: LD_VAR 0 4
64097: PPUSH
64098: CALL_OW 269
64102: PUSH
64103: LD_VAR 0 5
64107: PUSH
64108: LD_INT 1
64110: ARRAY
64111: EQUAL
64112: IFFALSE 64130
// begin weapon := j [ 2 ] ;
64114: LD_ADDR_VAR 0 8
64118: PUSH
64119: LD_VAR 0 5
64123: PUSH
64124: LD_INT 2
64126: ARRAY
64127: ST_TO_ADDR
// break ;
64128: GO 64132
// end ;
64130: GO 64090
64132: POP
64133: POP
// if not weapon then
64134: LD_VAR 0 8
64138: NOT
64139: IFFALSE 64143
// continue ;
64141: GO 64039
// for k in factories do
64143: LD_ADDR_VAR 0 6
64147: PUSH
64148: LD_VAR 0 2
64152: PUSH
64153: FOR_IN
64154: IFFALSE 64219
// begin weapons := AvailableWeaponList ( k ) ;
64156: LD_ADDR_VAR 0 9
64160: PUSH
64161: LD_VAR 0 6
64165: PPUSH
64166: CALL_OW 478
64170: ST_TO_ADDR
// if not weapons then
64171: LD_VAR 0 9
64175: NOT
64176: IFFALSE 64180
// continue ;
64178: GO 64153
// if weapon in weapons then
64180: LD_VAR 0 8
64184: PUSH
64185: LD_VAR 0 9
64189: IN
64190: IFFALSE 64217
// begin result := [ i , weapon ] ;
64192: LD_ADDR_VAR 0 3
64196: PUSH
64197: LD_VAR 0 4
64201: PUSH
64202: LD_VAR 0 8
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: ST_TO_ADDR
// exit ;
64211: POP
64212: POP
64213: POP
64214: POP
64215: GO 64225
// end ; end ;
64217: GO 64153
64219: POP
64220: POP
// end ;
64221: GO 64039
64223: POP
64224: POP
// end ;
64225: LD_VAR 0 3
64229: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64230: LD_INT 0
64232: PPUSH
// if not side or side > 8 then
64233: LD_VAR 0 3
64237: NOT
64238: PUSH
64239: LD_VAR 0 3
64243: PUSH
64244: LD_INT 8
64246: GREATER
64247: OR
64248: IFFALSE 64252
// exit ;
64250: GO 64311
// if not range then
64252: LD_VAR 0 4
64256: NOT
64257: IFFALSE 64268
// range := - 12 ;
64259: LD_ADDR_VAR 0 4
64263: PUSH
64264: LD_INT 12
64266: NEG
64267: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64268: LD_VAR 0 1
64272: PPUSH
64273: LD_VAR 0 2
64277: PPUSH
64278: LD_VAR 0 3
64282: PPUSH
64283: LD_VAR 0 4
64287: PPUSH
64288: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64292: LD_VAR 0 1
64296: PPUSH
64297: LD_VAR 0 2
64301: PPUSH
64302: LD_VAR 0 3
64306: PPUSH
64307: CALL_OW 331
// end ;
64311: LD_VAR 0 5
64315: RET
// export function Video ( mode ) ; begin
64316: LD_INT 0
64318: PPUSH
// ingame_video = mode ;
64319: LD_ADDR_OWVAR 52
64323: PUSH
64324: LD_VAR 0 1
64328: ST_TO_ADDR
// interface_hidden = mode ;
64329: LD_ADDR_OWVAR 54
64333: PUSH
64334: LD_VAR 0 1
64338: ST_TO_ADDR
// end ;
64339: LD_VAR 0 2
64343: RET
// export function Join ( array , element ) ; begin
64344: LD_INT 0
64346: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64347: LD_ADDR_VAR 0 3
64351: PUSH
64352: LD_VAR 0 1
64356: PPUSH
64357: LD_VAR 0 1
64361: PUSH
64362: LD_INT 1
64364: PLUS
64365: PPUSH
64366: LD_VAR 0 2
64370: PPUSH
64371: CALL_OW 1
64375: ST_TO_ADDR
// end ;
64376: LD_VAR 0 3
64380: RET
// export function JoinUnion ( array , element ) ; begin
64381: LD_INT 0
64383: PPUSH
// result := array union element ;
64384: LD_ADDR_VAR 0 3
64388: PUSH
64389: LD_VAR 0 1
64393: PUSH
64394: LD_VAR 0 2
64398: UNION
64399: ST_TO_ADDR
// end ;
64400: LD_VAR 0 3
64404: RET
// export function GetBehemoths ( side ) ; begin
64405: LD_INT 0
64407: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
64408: LD_ADDR_VAR 0 2
64412: PUSH
64413: LD_INT 22
64415: PUSH
64416: LD_VAR 0 1
64420: PUSH
64421: EMPTY
64422: LIST
64423: LIST
64424: PUSH
64425: LD_INT 31
64427: PUSH
64428: LD_INT 25
64430: PUSH
64431: EMPTY
64432: LIST
64433: LIST
64434: PUSH
64435: EMPTY
64436: LIST
64437: LIST
64438: PPUSH
64439: CALL_OW 69
64443: ST_TO_ADDR
// end ;
64444: LD_VAR 0 2
64448: RET
// export function Shuffle ( array ) ; var i , index ; begin
64449: LD_INT 0
64451: PPUSH
64452: PPUSH
64453: PPUSH
// result := [ ] ;
64454: LD_ADDR_VAR 0 2
64458: PUSH
64459: EMPTY
64460: ST_TO_ADDR
// if not array then
64461: LD_VAR 0 1
64465: NOT
64466: IFFALSE 64470
// exit ;
64468: GO 64569
// Randomize ;
64470: CALL_OW 10
// for i = array downto 1 do
64474: LD_ADDR_VAR 0 3
64478: PUSH
64479: DOUBLE
64480: LD_VAR 0 1
64484: INC
64485: ST_TO_ADDR
64486: LD_INT 1
64488: PUSH
64489: FOR_DOWNTO
64490: IFFALSE 64567
// begin index := rand ( 1 , array ) ;
64492: LD_ADDR_VAR 0 4
64496: PUSH
64497: LD_INT 1
64499: PPUSH
64500: LD_VAR 0 1
64504: PPUSH
64505: CALL_OW 12
64509: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64510: LD_ADDR_VAR 0 2
64514: PUSH
64515: LD_VAR 0 2
64519: PPUSH
64520: LD_VAR 0 2
64524: PUSH
64525: LD_INT 1
64527: PLUS
64528: PPUSH
64529: LD_VAR 0 1
64533: PUSH
64534: LD_VAR 0 4
64538: ARRAY
64539: PPUSH
64540: CALL_OW 2
64544: ST_TO_ADDR
// array := Delete ( array , index ) ;
64545: LD_ADDR_VAR 0 1
64549: PUSH
64550: LD_VAR 0 1
64554: PPUSH
64555: LD_VAR 0 4
64559: PPUSH
64560: CALL_OW 3
64564: ST_TO_ADDR
// end ;
64565: GO 64489
64567: POP
64568: POP
// end ;
64569: LD_VAR 0 2
64573: RET
// export function GetBaseMaterials ( base ) ; begin
64574: LD_INT 0
64576: PPUSH
// result := [ 0 , 0 , 0 ] ;
64577: LD_ADDR_VAR 0 2
64581: PUSH
64582: LD_INT 0
64584: PUSH
64585: LD_INT 0
64587: PUSH
64588: LD_INT 0
64590: PUSH
64591: EMPTY
64592: LIST
64593: LIST
64594: LIST
64595: ST_TO_ADDR
// if not base then
64596: LD_VAR 0 1
64600: NOT
64601: IFFALSE 64605
// exit ;
64603: GO 64654
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64605: LD_ADDR_VAR 0 2
64609: PUSH
64610: LD_VAR 0 1
64614: PPUSH
64615: LD_INT 1
64617: PPUSH
64618: CALL_OW 275
64622: PUSH
64623: LD_VAR 0 1
64627: PPUSH
64628: LD_INT 2
64630: PPUSH
64631: CALL_OW 275
64635: PUSH
64636: LD_VAR 0 1
64640: PPUSH
64641: LD_INT 3
64643: PPUSH
64644: CALL_OW 275
64648: PUSH
64649: EMPTY
64650: LIST
64651: LIST
64652: LIST
64653: ST_TO_ADDR
// end ;
64654: LD_VAR 0 2
64658: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64659: LD_INT 0
64661: PPUSH
64662: PPUSH
// result := array ;
64663: LD_ADDR_VAR 0 3
64667: PUSH
64668: LD_VAR 0 1
64672: ST_TO_ADDR
// if size >= result then
64673: LD_VAR 0 2
64677: PUSH
64678: LD_VAR 0 3
64682: GREATEREQUAL
64683: IFFALSE 64687
// exit ;
64685: GO 64737
// if size then
64687: LD_VAR 0 2
64691: IFFALSE 64737
// for i := array downto size do
64693: LD_ADDR_VAR 0 4
64697: PUSH
64698: DOUBLE
64699: LD_VAR 0 1
64703: INC
64704: ST_TO_ADDR
64705: LD_VAR 0 2
64709: PUSH
64710: FOR_DOWNTO
64711: IFFALSE 64735
// result := Delete ( result , result ) ;
64713: LD_ADDR_VAR 0 3
64717: PUSH
64718: LD_VAR 0 3
64722: PPUSH
64723: LD_VAR 0 3
64727: PPUSH
64728: CALL_OW 3
64732: ST_TO_ADDR
64733: GO 64710
64735: POP
64736: POP
// end ;
64737: LD_VAR 0 3
64741: RET
// export function ComExit ( unit ) ; var tmp ; begin
64742: LD_INT 0
64744: PPUSH
64745: PPUSH
// if not IsInUnit ( unit ) then
64746: LD_VAR 0 1
64750: PPUSH
64751: CALL_OW 310
64755: NOT
64756: IFFALSE 64760
// exit ;
64758: GO 64820
// tmp := IsInUnit ( unit ) ;
64760: LD_ADDR_VAR 0 3
64764: PUSH
64765: LD_VAR 0 1
64769: PPUSH
64770: CALL_OW 310
64774: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
64775: LD_VAR 0 3
64779: PPUSH
64780: CALL_OW 247
64784: PUSH
64785: LD_INT 2
64787: EQUAL
64788: IFFALSE 64801
// ComExitVehicle ( unit ) else
64790: LD_VAR 0 1
64794: PPUSH
64795: CALL_OW 121
64799: GO 64810
// ComExitBuilding ( unit ) ;
64801: LD_VAR 0 1
64805: PPUSH
64806: CALL_OW 122
// result := tmp ;
64810: LD_ADDR_VAR 0 2
64814: PUSH
64815: LD_VAR 0 3
64819: ST_TO_ADDR
// end ;
64820: LD_VAR 0 2
64824: RET
// export function ComExitAll ( units ) ; var i ; begin
64825: LD_INT 0
64827: PPUSH
64828: PPUSH
// if not units then
64829: LD_VAR 0 1
64833: NOT
64834: IFFALSE 64838
// exit ;
64836: GO 64864
// for i in units do
64838: LD_ADDR_VAR 0 3
64842: PUSH
64843: LD_VAR 0 1
64847: PUSH
64848: FOR_IN
64849: IFFALSE 64862
// ComExit ( i ) ;
64851: LD_VAR 0 3
64855: PPUSH
64856: CALL 64742 0 1
64860: GO 64848
64862: POP
64863: POP
// end ;
64864: LD_VAR 0 2
64868: RET
// export function ResetHc ; begin
64869: LD_INT 0
64871: PPUSH
// InitHc ;
64872: CALL_OW 19
// hc_importance := 0 ;
64876: LD_ADDR_OWVAR 32
64880: PUSH
64881: LD_INT 0
64883: ST_TO_ADDR
// end ;
64884: LD_VAR 0 1
64888: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
64889: LD_INT 0
64891: PPUSH
64892: PPUSH
64893: PPUSH
// _x := ( x1 + x2 ) div 2 ;
64894: LD_ADDR_VAR 0 6
64898: PUSH
64899: LD_VAR 0 1
64903: PUSH
64904: LD_VAR 0 3
64908: PLUS
64909: PUSH
64910: LD_INT 2
64912: DIV
64913: ST_TO_ADDR
// if _x < 0 then
64914: LD_VAR 0 6
64918: PUSH
64919: LD_INT 0
64921: LESS
64922: IFFALSE 64939
// _x := _x * - 1 ;
64924: LD_ADDR_VAR 0 6
64928: PUSH
64929: LD_VAR 0 6
64933: PUSH
64934: LD_INT 1
64936: NEG
64937: MUL
64938: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
64939: LD_ADDR_VAR 0 7
64943: PUSH
64944: LD_VAR 0 2
64948: PUSH
64949: LD_VAR 0 4
64953: PLUS
64954: PUSH
64955: LD_INT 2
64957: DIV
64958: ST_TO_ADDR
// if _y < 0 then
64959: LD_VAR 0 7
64963: PUSH
64964: LD_INT 0
64966: LESS
64967: IFFALSE 64984
// _y := _y * - 1 ;
64969: LD_ADDR_VAR 0 7
64973: PUSH
64974: LD_VAR 0 7
64978: PUSH
64979: LD_INT 1
64981: NEG
64982: MUL
64983: ST_TO_ADDR
// result := [ _x , _y ] ;
64984: LD_ADDR_VAR 0 5
64988: PUSH
64989: LD_VAR 0 6
64993: PUSH
64994: LD_VAR 0 7
64998: PUSH
64999: EMPTY
65000: LIST
65001: LIST
65002: ST_TO_ADDR
// end ;
65003: LD_VAR 0 5
65007: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
65008: LD_INT 0
65010: PPUSH
65011: PPUSH
65012: PPUSH
65013: PPUSH
// task := GetTaskList ( unit ) ;
65014: LD_ADDR_VAR 0 7
65018: PUSH
65019: LD_VAR 0 1
65023: PPUSH
65024: CALL_OW 437
65028: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
65029: LD_VAR 0 7
65033: NOT
65034: PUSH
65035: LD_VAR 0 1
65039: PPUSH
65040: LD_VAR 0 2
65044: PPUSH
65045: CALL_OW 308
65049: NOT
65050: AND
65051: IFFALSE 65055
// exit ;
65053: GO 65173
// if IsInArea ( unit , area ) then
65055: LD_VAR 0 1
65059: PPUSH
65060: LD_VAR 0 2
65064: PPUSH
65065: CALL_OW 308
65069: IFFALSE 65087
// begin ComMoveToArea ( unit , goAway ) ;
65071: LD_VAR 0 1
65075: PPUSH
65076: LD_VAR 0 3
65080: PPUSH
65081: CALL_OW 113
// exit ;
65085: GO 65173
// end ; if task [ 1 ] [ 1 ] <> M then
65087: LD_VAR 0 7
65091: PUSH
65092: LD_INT 1
65094: ARRAY
65095: PUSH
65096: LD_INT 1
65098: ARRAY
65099: PUSH
65100: LD_STRING M
65102: NONEQUAL
65103: IFFALSE 65107
// exit ;
65105: GO 65173
// x := task [ 1 ] [ 2 ] ;
65107: LD_ADDR_VAR 0 5
65111: PUSH
65112: LD_VAR 0 7
65116: PUSH
65117: LD_INT 1
65119: ARRAY
65120: PUSH
65121: LD_INT 2
65123: ARRAY
65124: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
65125: LD_ADDR_VAR 0 6
65129: PUSH
65130: LD_VAR 0 7
65134: PUSH
65135: LD_INT 1
65137: ARRAY
65138: PUSH
65139: LD_INT 3
65141: ARRAY
65142: ST_TO_ADDR
// if InArea ( x , y , area ) then
65143: LD_VAR 0 5
65147: PPUSH
65148: LD_VAR 0 6
65152: PPUSH
65153: LD_VAR 0 2
65157: PPUSH
65158: CALL_OW 309
65162: IFFALSE 65173
// ComStop ( unit ) ;
65164: LD_VAR 0 1
65168: PPUSH
65169: CALL_OW 141
// end ;
65173: LD_VAR 0 4
65177: RET
// export function Abs ( value ) ; begin
65178: LD_INT 0
65180: PPUSH
// result := value ;
65181: LD_ADDR_VAR 0 2
65185: PUSH
65186: LD_VAR 0 1
65190: ST_TO_ADDR
// if value < 0 then
65191: LD_VAR 0 1
65195: PUSH
65196: LD_INT 0
65198: LESS
65199: IFFALSE 65216
// result := value * - 1 ;
65201: LD_ADDR_VAR 0 2
65205: PUSH
65206: LD_VAR 0 1
65210: PUSH
65211: LD_INT 1
65213: NEG
65214: MUL
65215: ST_TO_ADDR
// end ;
65216: LD_VAR 0 2
65220: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65221: LD_INT 0
65223: PPUSH
65224: PPUSH
65225: PPUSH
65226: PPUSH
65227: PPUSH
65228: PPUSH
65229: PPUSH
65230: PPUSH
// if not unit or not building then
65231: LD_VAR 0 1
65235: NOT
65236: PUSH
65237: LD_VAR 0 2
65241: NOT
65242: OR
65243: IFFALSE 65247
// exit ;
65245: GO 65473
// x := GetX ( building ) ;
65247: LD_ADDR_VAR 0 4
65251: PUSH
65252: LD_VAR 0 2
65256: PPUSH
65257: CALL_OW 250
65261: ST_TO_ADDR
// y := GetY ( building ) ;
65262: LD_ADDR_VAR 0 6
65266: PUSH
65267: LD_VAR 0 2
65271: PPUSH
65272: CALL_OW 251
65276: ST_TO_ADDR
// d := GetDir ( building ) ;
65277: LD_ADDR_VAR 0 8
65281: PUSH
65282: LD_VAR 0 2
65286: PPUSH
65287: CALL_OW 254
65291: ST_TO_ADDR
// r := 4 ;
65292: LD_ADDR_VAR 0 9
65296: PUSH
65297: LD_INT 4
65299: ST_TO_ADDR
// for i := 1 to 5 do
65300: LD_ADDR_VAR 0 10
65304: PUSH
65305: DOUBLE
65306: LD_INT 1
65308: DEC
65309: ST_TO_ADDR
65310: LD_INT 5
65312: PUSH
65313: FOR_TO
65314: IFFALSE 65471
// begin _x := ShiftX ( x , d , r + i ) ;
65316: LD_ADDR_VAR 0 5
65320: PUSH
65321: LD_VAR 0 4
65325: PPUSH
65326: LD_VAR 0 8
65330: PPUSH
65331: LD_VAR 0 9
65335: PUSH
65336: LD_VAR 0 10
65340: PLUS
65341: PPUSH
65342: CALL_OW 272
65346: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65347: LD_ADDR_VAR 0 7
65351: PUSH
65352: LD_VAR 0 6
65356: PPUSH
65357: LD_VAR 0 8
65361: PPUSH
65362: LD_VAR 0 9
65366: PUSH
65367: LD_VAR 0 10
65371: PLUS
65372: PPUSH
65373: CALL_OW 273
65377: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65378: LD_VAR 0 5
65382: PPUSH
65383: LD_VAR 0 7
65387: PPUSH
65388: CALL_OW 488
65392: PUSH
65393: LD_VAR 0 5
65397: PPUSH
65398: LD_VAR 0 7
65402: PPUSH
65403: CALL_OW 428
65407: PPUSH
65408: CALL_OW 247
65412: PUSH
65413: LD_INT 3
65415: PUSH
65416: LD_INT 2
65418: PUSH
65419: EMPTY
65420: LIST
65421: LIST
65422: IN
65423: NOT
65424: AND
65425: IFFALSE 65469
// begin ComMoveXY ( unit , _x , _y ) ;
65427: LD_VAR 0 1
65431: PPUSH
65432: LD_VAR 0 5
65436: PPUSH
65437: LD_VAR 0 7
65441: PPUSH
65442: CALL_OW 111
// result := [ _x , _y ] ;
65446: LD_ADDR_VAR 0 3
65450: PUSH
65451: LD_VAR 0 5
65455: PUSH
65456: LD_VAR 0 7
65460: PUSH
65461: EMPTY
65462: LIST
65463: LIST
65464: ST_TO_ADDR
// exit ;
65465: POP
65466: POP
65467: GO 65473
// end ; end ;
65469: GO 65313
65471: POP
65472: POP
// end ;
65473: LD_VAR 0 3
65477: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65478: LD_INT 0
65480: PPUSH
65481: PPUSH
65482: PPUSH
// result := 0 ;
65483: LD_ADDR_VAR 0 3
65487: PUSH
65488: LD_INT 0
65490: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65491: LD_VAR 0 1
65495: PUSH
65496: LD_INT 0
65498: LESS
65499: PUSH
65500: LD_VAR 0 1
65504: PUSH
65505: LD_INT 8
65507: GREATER
65508: OR
65509: PUSH
65510: LD_VAR 0 2
65514: PUSH
65515: LD_INT 0
65517: LESS
65518: OR
65519: PUSH
65520: LD_VAR 0 2
65524: PUSH
65525: LD_INT 8
65527: GREATER
65528: OR
65529: IFFALSE 65533
// exit ;
65531: GO 65608
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65533: LD_ADDR_VAR 0 4
65537: PUSH
65538: LD_INT 22
65540: PUSH
65541: LD_VAR 0 2
65545: PUSH
65546: EMPTY
65547: LIST
65548: LIST
65549: PPUSH
65550: CALL_OW 69
65554: PUSH
65555: FOR_IN
65556: IFFALSE 65606
// begin un := UnitShoot ( i ) ;
65558: LD_ADDR_VAR 0 5
65562: PUSH
65563: LD_VAR 0 4
65567: PPUSH
65568: CALL_OW 504
65572: ST_TO_ADDR
// if GetSide ( un ) = side1 then
65573: LD_VAR 0 5
65577: PPUSH
65578: CALL_OW 255
65582: PUSH
65583: LD_VAR 0 1
65587: EQUAL
65588: IFFALSE 65604
// begin result := un ;
65590: LD_ADDR_VAR 0 3
65594: PUSH
65595: LD_VAR 0 5
65599: ST_TO_ADDR
// exit ;
65600: POP
65601: POP
65602: GO 65608
// end ; end ;
65604: GO 65555
65606: POP
65607: POP
// end ;
65608: LD_VAR 0 3
65612: RET
// export function GetCargoBay ( units ) ; begin
65613: LD_INT 0
65615: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
65616: LD_ADDR_VAR 0 2
65620: PUSH
65621: LD_VAR 0 1
65625: PPUSH
65626: LD_INT 2
65628: PUSH
65629: LD_INT 34
65631: PUSH
65632: LD_INT 12
65634: PUSH
65635: EMPTY
65636: LIST
65637: LIST
65638: PUSH
65639: LD_INT 34
65641: PUSH
65642: LD_INT 51
65644: PUSH
65645: EMPTY
65646: LIST
65647: LIST
65648: PUSH
65649: LD_INT 34
65651: PUSH
65652: LD_INT 32
65654: PUSH
65655: EMPTY
65656: LIST
65657: LIST
65658: PUSH
65659: LD_INT 34
65661: PUSH
65662: LD_INT 89
65664: PUSH
65665: EMPTY
65666: LIST
65667: LIST
65668: PUSH
65669: EMPTY
65670: LIST
65671: LIST
65672: LIST
65673: LIST
65674: LIST
65675: PPUSH
65676: CALL_OW 72
65680: ST_TO_ADDR
// end ;
65681: LD_VAR 0 2
65685: RET
// export function Negate ( value ) ; begin
65686: LD_INT 0
65688: PPUSH
// result := not value ;
65689: LD_ADDR_VAR 0 2
65693: PUSH
65694: LD_VAR 0 1
65698: NOT
65699: ST_TO_ADDR
// end ;
65700: LD_VAR 0 2
65704: RET
// export function Inc ( value ) ; begin
65705: LD_INT 0
65707: PPUSH
// result := value + 1 ;
65708: LD_ADDR_VAR 0 2
65712: PUSH
65713: LD_VAR 0 1
65717: PUSH
65718: LD_INT 1
65720: PLUS
65721: ST_TO_ADDR
// end ;
65722: LD_VAR 0 2
65726: RET
// export function Dec ( value ) ; begin
65727: LD_INT 0
65729: PPUSH
// result := value - 1 ;
65730: LD_ADDR_VAR 0 2
65734: PUSH
65735: LD_VAR 0 1
65739: PUSH
65740: LD_INT 1
65742: MINUS
65743: ST_TO_ADDR
// end ;
65744: LD_VAR 0 2
65748: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
65749: LD_INT 0
65751: PPUSH
65752: PPUSH
65753: PPUSH
65754: PPUSH
65755: PPUSH
65756: PPUSH
65757: PPUSH
65758: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
65759: LD_VAR 0 1
65763: PPUSH
65764: LD_VAR 0 2
65768: PPUSH
65769: CALL_OW 488
65773: NOT
65774: PUSH
65775: LD_VAR 0 3
65779: PPUSH
65780: LD_VAR 0 4
65784: PPUSH
65785: CALL_OW 488
65789: NOT
65790: OR
65791: IFFALSE 65804
// begin result := - 1 ;
65793: LD_ADDR_VAR 0 5
65797: PUSH
65798: LD_INT 1
65800: NEG
65801: ST_TO_ADDR
// exit ;
65802: GO 66039
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
65804: LD_ADDR_VAR 0 12
65808: PUSH
65809: LD_VAR 0 1
65813: PPUSH
65814: LD_VAR 0 2
65818: PPUSH
65819: LD_VAR 0 3
65823: PPUSH
65824: LD_VAR 0 4
65828: PPUSH
65829: CALL 64889 0 4
65833: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
65834: LD_ADDR_VAR 0 11
65838: PUSH
65839: LD_VAR 0 1
65843: PPUSH
65844: LD_VAR 0 2
65848: PPUSH
65849: LD_VAR 0 12
65853: PUSH
65854: LD_INT 1
65856: ARRAY
65857: PPUSH
65858: LD_VAR 0 12
65862: PUSH
65863: LD_INT 2
65865: ARRAY
65866: PPUSH
65867: CALL_OW 298
65871: ST_TO_ADDR
// distance := 9999 ;
65872: LD_ADDR_VAR 0 10
65876: PUSH
65877: LD_INT 9999
65879: ST_TO_ADDR
// for i := 0 to 5 do
65880: LD_ADDR_VAR 0 6
65884: PUSH
65885: DOUBLE
65886: LD_INT 0
65888: DEC
65889: ST_TO_ADDR
65890: LD_INT 5
65892: PUSH
65893: FOR_TO
65894: IFFALSE 66037
// begin _x := ShiftX ( x1 , i , centerDist ) ;
65896: LD_ADDR_VAR 0 7
65900: PUSH
65901: LD_VAR 0 1
65905: PPUSH
65906: LD_VAR 0 6
65910: PPUSH
65911: LD_VAR 0 11
65915: PPUSH
65916: CALL_OW 272
65920: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
65921: LD_ADDR_VAR 0 8
65925: PUSH
65926: LD_VAR 0 2
65930: PPUSH
65931: LD_VAR 0 6
65935: PPUSH
65936: LD_VAR 0 11
65940: PPUSH
65941: CALL_OW 273
65945: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
65946: LD_VAR 0 7
65950: PPUSH
65951: LD_VAR 0 8
65955: PPUSH
65956: CALL_OW 488
65960: NOT
65961: IFFALSE 65965
// continue ;
65963: GO 65893
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
65965: LD_ADDR_VAR 0 9
65969: PUSH
65970: LD_VAR 0 12
65974: PUSH
65975: LD_INT 1
65977: ARRAY
65978: PPUSH
65979: LD_VAR 0 12
65983: PUSH
65984: LD_INT 2
65986: ARRAY
65987: PPUSH
65988: LD_VAR 0 7
65992: PPUSH
65993: LD_VAR 0 8
65997: PPUSH
65998: CALL_OW 298
66002: ST_TO_ADDR
// if tmp < distance then
66003: LD_VAR 0 9
66007: PUSH
66008: LD_VAR 0 10
66012: LESS
66013: IFFALSE 66035
// begin result := i ;
66015: LD_ADDR_VAR 0 5
66019: PUSH
66020: LD_VAR 0 6
66024: ST_TO_ADDR
// distance := tmp ;
66025: LD_ADDR_VAR 0 10
66029: PUSH
66030: LD_VAR 0 9
66034: ST_TO_ADDR
// end ; end ;
66035: GO 65893
66037: POP
66038: POP
// end ;
66039: LD_VAR 0 5
66043: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66044: LD_INT 0
66046: PPUSH
66047: PPUSH
// if not driver or not IsInUnit ( driver ) then
66048: LD_VAR 0 1
66052: NOT
66053: PUSH
66054: LD_VAR 0 1
66058: PPUSH
66059: CALL_OW 310
66063: NOT
66064: OR
66065: IFFALSE 66069
// exit ;
66067: GO 66159
// vehicle := IsInUnit ( driver ) ;
66069: LD_ADDR_VAR 0 3
66073: PUSH
66074: LD_VAR 0 1
66078: PPUSH
66079: CALL_OW 310
66083: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66084: LD_VAR 0 1
66088: PPUSH
66089: LD_STRING \
66091: PUSH
66092: LD_INT 0
66094: PUSH
66095: LD_INT 0
66097: PUSH
66098: LD_INT 0
66100: PUSH
66101: LD_INT 0
66103: PUSH
66104: LD_INT 0
66106: PUSH
66107: LD_INT 0
66109: PUSH
66110: EMPTY
66111: LIST
66112: LIST
66113: LIST
66114: LIST
66115: LIST
66116: LIST
66117: LIST
66118: PUSH
66119: LD_STRING E
66121: PUSH
66122: LD_INT 0
66124: PUSH
66125: LD_INT 0
66127: PUSH
66128: LD_VAR 0 3
66132: PUSH
66133: LD_INT 0
66135: PUSH
66136: LD_INT 0
66138: PUSH
66139: LD_INT 0
66141: PUSH
66142: EMPTY
66143: LIST
66144: LIST
66145: LIST
66146: LIST
66147: LIST
66148: LIST
66149: LIST
66150: PUSH
66151: EMPTY
66152: LIST
66153: LIST
66154: PPUSH
66155: CALL_OW 446
// end ;
66159: LD_VAR 0 2
66163: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66164: LD_INT 0
66166: PPUSH
66167: PPUSH
// if not driver or not IsInUnit ( driver ) then
66168: LD_VAR 0 1
66172: NOT
66173: PUSH
66174: LD_VAR 0 1
66178: PPUSH
66179: CALL_OW 310
66183: NOT
66184: OR
66185: IFFALSE 66189
// exit ;
66187: GO 66279
// vehicle := IsInUnit ( driver ) ;
66189: LD_ADDR_VAR 0 3
66193: PUSH
66194: LD_VAR 0 1
66198: PPUSH
66199: CALL_OW 310
66203: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66204: LD_VAR 0 1
66208: PPUSH
66209: LD_STRING \
66211: PUSH
66212: LD_INT 0
66214: PUSH
66215: LD_INT 0
66217: PUSH
66218: LD_INT 0
66220: PUSH
66221: LD_INT 0
66223: PUSH
66224: LD_INT 0
66226: PUSH
66227: LD_INT 0
66229: PUSH
66230: EMPTY
66231: LIST
66232: LIST
66233: LIST
66234: LIST
66235: LIST
66236: LIST
66237: LIST
66238: PUSH
66239: LD_STRING E
66241: PUSH
66242: LD_INT 0
66244: PUSH
66245: LD_INT 0
66247: PUSH
66248: LD_VAR 0 3
66252: PUSH
66253: LD_INT 0
66255: PUSH
66256: LD_INT 0
66258: PUSH
66259: LD_INT 0
66261: PUSH
66262: EMPTY
66263: LIST
66264: LIST
66265: LIST
66266: LIST
66267: LIST
66268: LIST
66269: LIST
66270: PUSH
66271: EMPTY
66272: LIST
66273: LIST
66274: PPUSH
66275: CALL_OW 447
// end ;
66279: LD_VAR 0 2
66283: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
66284: LD_INT 0
66286: PPUSH
66287: PPUSH
66288: PPUSH
// tmp := [ ] ;
66289: LD_ADDR_VAR 0 5
66293: PUSH
66294: EMPTY
66295: ST_TO_ADDR
// for i in units do
66296: LD_ADDR_VAR 0 4
66300: PUSH
66301: LD_VAR 0 1
66305: PUSH
66306: FOR_IN
66307: IFFALSE 66345
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
66309: LD_ADDR_VAR 0 5
66313: PUSH
66314: LD_VAR 0 5
66318: PPUSH
66319: LD_VAR 0 5
66323: PUSH
66324: LD_INT 1
66326: PLUS
66327: PPUSH
66328: LD_VAR 0 4
66332: PPUSH
66333: CALL_OW 256
66337: PPUSH
66338: CALL_OW 2
66342: ST_TO_ADDR
66343: GO 66306
66345: POP
66346: POP
// if not tmp then
66347: LD_VAR 0 5
66351: NOT
66352: IFFALSE 66356
// exit ;
66354: GO 66404
// if asc then
66356: LD_VAR 0 2
66360: IFFALSE 66384
// result := SortListByListAsc ( units , tmp ) else
66362: LD_ADDR_VAR 0 3
66366: PUSH
66367: LD_VAR 0 1
66371: PPUSH
66372: LD_VAR 0 5
66376: PPUSH
66377: CALL_OW 76
66381: ST_TO_ADDR
66382: GO 66404
// result := SortListByListDesc ( units , tmp ) ;
66384: LD_ADDR_VAR 0 3
66388: PUSH
66389: LD_VAR 0 1
66393: PPUSH
66394: LD_VAR 0 5
66398: PPUSH
66399: CALL_OW 77
66403: ST_TO_ADDR
// end ;
66404: LD_VAR 0 3
66408: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
66409: LD_INT 0
66411: PPUSH
66412: PPUSH
// task := GetTaskList ( mech ) ;
66413: LD_ADDR_VAR 0 4
66417: PUSH
66418: LD_VAR 0 1
66422: PPUSH
66423: CALL_OW 437
66427: ST_TO_ADDR
// if not task then
66428: LD_VAR 0 4
66432: NOT
66433: IFFALSE 66437
// exit ;
66435: GO 66479
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
66437: LD_ADDR_VAR 0 3
66441: PUSH
66442: LD_VAR 0 4
66446: PUSH
66447: LD_INT 1
66449: ARRAY
66450: PUSH
66451: LD_INT 1
66453: ARRAY
66454: PUSH
66455: LD_STRING r
66457: EQUAL
66458: PUSH
66459: LD_VAR 0 4
66463: PUSH
66464: LD_INT 1
66466: ARRAY
66467: PUSH
66468: LD_INT 4
66470: ARRAY
66471: PUSH
66472: LD_VAR 0 2
66476: EQUAL
66477: AND
66478: ST_TO_ADDR
// end ;
66479: LD_VAR 0 3
66483: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
66484: LD_INT 0
66486: PPUSH
// SetDir ( unit , d ) ;
66487: LD_VAR 0 1
66491: PPUSH
66492: LD_VAR 0 4
66496: PPUSH
66497: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
66501: LD_VAR 0 1
66505: PPUSH
66506: LD_VAR 0 2
66510: PPUSH
66511: LD_VAR 0 3
66515: PPUSH
66516: LD_VAR 0 5
66520: PPUSH
66521: CALL_OW 48
// end ;
66525: LD_VAR 0 6
66529: RET
// export function ToNaturalNumber ( number ) ; begin
66530: LD_INT 0
66532: PPUSH
// result := number div 1 ;
66533: LD_ADDR_VAR 0 2
66537: PUSH
66538: LD_VAR 0 1
66542: PUSH
66543: LD_INT 1
66545: DIV
66546: ST_TO_ADDR
// if number < 0 then
66547: LD_VAR 0 1
66551: PUSH
66552: LD_INT 0
66554: LESS
66555: IFFALSE 66565
// result := 0 ;
66557: LD_ADDR_VAR 0 2
66561: PUSH
66562: LD_INT 0
66564: ST_TO_ADDR
// end ;
66565: LD_VAR 0 2
66569: RET
// export function SortByClass ( units , class ) ; var un ; begin
66570: LD_INT 0
66572: PPUSH
66573: PPUSH
// if not units or not class then
66574: LD_VAR 0 1
66578: NOT
66579: PUSH
66580: LD_VAR 0 2
66584: NOT
66585: OR
66586: IFFALSE 66590
// exit ;
66588: GO 66685
// result := [ ] ;
66590: LD_ADDR_VAR 0 3
66594: PUSH
66595: EMPTY
66596: ST_TO_ADDR
// for un in units do
66597: LD_ADDR_VAR 0 4
66601: PUSH
66602: LD_VAR 0 1
66606: PUSH
66607: FOR_IN
66608: IFFALSE 66683
// if GetClass ( un ) = class then
66610: LD_VAR 0 4
66614: PPUSH
66615: CALL_OW 257
66619: PUSH
66620: LD_VAR 0 2
66624: EQUAL
66625: IFFALSE 66652
// result := Insert ( result , 1 , un ) else
66627: LD_ADDR_VAR 0 3
66631: PUSH
66632: LD_VAR 0 3
66636: PPUSH
66637: LD_INT 1
66639: PPUSH
66640: LD_VAR 0 4
66644: PPUSH
66645: CALL_OW 2
66649: ST_TO_ADDR
66650: GO 66681
// result := Replace ( result , result + 1 , un ) ;
66652: LD_ADDR_VAR 0 3
66656: PUSH
66657: LD_VAR 0 3
66661: PPUSH
66662: LD_VAR 0 3
66666: PUSH
66667: LD_INT 1
66669: PLUS
66670: PPUSH
66671: LD_VAR 0 4
66675: PPUSH
66676: CALL_OW 1
66680: ST_TO_ADDR
66681: GO 66607
66683: POP
66684: POP
// end ;
66685: LD_VAR 0 3
66689: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
66690: LD_INT 0
66692: PPUSH
66693: PPUSH
66694: PPUSH
66695: PPUSH
66696: PPUSH
66697: PPUSH
66698: PPUSH
// result := [ ] ;
66699: LD_ADDR_VAR 0 4
66703: PUSH
66704: EMPTY
66705: ST_TO_ADDR
// if x - r < 0 then
66706: LD_VAR 0 1
66710: PUSH
66711: LD_VAR 0 3
66715: MINUS
66716: PUSH
66717: LD_INT 0
66719: LESS
66720: IFFALSE 66732
// min_x := 0 else
66722: LD_ADDR_VAR 0 8
66726: PUSH
66727: LD_INT 0
66729: ST_TO_ADDR
66730: GO 66748
// min_x := x - r ;
66732: LD_ADDR_VAR 0 8
66736: PUSH
66737: LD_VAR 0 1
66741: PUSH
66742: LD_VAR 0 3
66746: MINUS
66747: ST_TO_ADDR
// if y - r < 0 then
66748: LD_VAR 0 2
66752: PUSH
66753: LD_VAR 0 3
66757: MINUS
66758: PUSH
66759: LD_INT 0
66761: LESS
66762: IFFALSE 66774
// min_y := 0 else
66764: LD_ADDR_VAR 0 7
66768: PUSH
66769: LD_INT 0
66771: ST_TO_ADDR
66772: GO 66790
// min_y := y - r ;
66774: LD_ADDR_VAR 0 7
66778: PUSH
66779: LD_VAR 0 2
66783: PUSH
66784: LD_VAR 0 3
66788: MINUS
66789: ST_TO_ADDR
// max_x := x + r ;
66790: LD_ADDR_VAR 0 9
66794: PUSH
66795: LD_VAR 0 1
66799: PUSH
66800: LD_VAR 0 3
66804: PLUS
66805: ST_TO_ADDR
// max_y := y + r ;
66806: LD_ADDR_VAR 0 10
66810: PUSH
66811: LD_VAR 0 2
66815: PUSH
66816: LD_VAR 0 3
66820: PLUS
66821: ST_TO_ADDR
// for _x = min_x to max_x do
66822: LD_ADDR_VAR 0 5
66826: PUSH
66827: DOUBLE
66828: LD_VAR 0 8
66832: DEC
66833: ST_TO_ADDR
66834: LD_VAR 0 9
66838: PUSH
66839: FOR_TO
66840: IFFALSE 66941
// for _y = min_y to max_y do
66842: LD_ADDR_VAR 0 6
66846: PUSH
66847: DOUBLE
66848: LD_VAR 0 7
66852: DEC
66853: ST_TO_ADDR
66854: LD_VAR 0 10
66858: PUSH
66859: FOR_TO
66860: IFFALSE 66937
// begin if not ValidHex ( _x , _y ) then
66862: LD_VAR 0 5
66866: PPUSH
66867: LD_VAR 0 6
66871: PPUSH
66872: CALL_OW 488
66876: NOT
66877: IFFALSE 66881
// continue ;
66879: GO 66859
// if GetResourceTypeXY ( _x , _y ) then
66881: LD_VAR 0 5
66885: PPUSH
66886: LD_VAR 0 6
66890: PPUSH
66891: CALL_OW 283
66895: IFFALSE 66935
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
66897: LD_ADDR_VAR 0 4
66901: PUSH
66902: LD_VAR 0 4
66906: PPUSH
66907: LD_VAR 0 4
66911: PUSH
66912: LD_INT 1
66914: PLUS
66915: PPUSH
66916: LD_VAR 0 5
66920: PUSH
66921: LD_VAR 0 6
66925: PUSH
66926: EMPTY
66927: LIST
66928: LIST
66929: PPUSH
66930: CALL_OW 1
66934: ST_TO_ADDR
// end ;
66935: GO 66859
66937: POP
66938: POP
66939: GO 66839
66941: POP
66942: POP
// end ;
66943: LD_VAR 0 4
66947: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
66948: LD_INT 0
66950: PPUSH
66951: PPUSH
66952: PPUSH
66953: PPUSH
66954: PPUSH
66955: PPUSH
66956: PPUSH
66957: PPUSH
// if not units then
66958: LD_VAR 0 1
66962: NOT
66963: IFFALSE 66967
// exit ;
66965: GO 67491
// result := UnitFilter ( units , [ f_ok ] ) ;
66967: LD_ADDR_VAR 0 3
66971: PUSH
66972: LD_VAR 0 1
66976: PPUSH
66977: LD_INT 50
66979: PUSH
66980: EMPTY
66981: LIST
66982: PPUSH
66983: CALL_OW 72
66987: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
66988: LD_ADDR_VAR 0 8
66992: PUSH
66993: LD_VAR 0 1
66997: PUSH
66998: LD_INT 1
67000: ARRAY
67001: PPUSH
67002: CALL_OW 255
67006: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
67007: LD_ADDR_VAR 0 10
67011: PUSH
67012: LD_INT 29
67014: PUSH
67015: LD_INT 91
67017: PUSH
67018: LD_INT 49
67020: PUSH
67021: EMPTY
67022: LIST
67023: LIST
67024: LIST
67025: ST_TO_ADDR
// if not result then
67026: LD_VAR 0 3
67030: NOT
67031: IFFALSE 67035
// exit ;
67033: GO 67491
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
67035: LD_ADDR_VAR 0 5
67039: PUSH
67040: LD_INT 81
67042: PUSH
67043: LD_VAR 0 8
67047: PUSH
67048: EMPTY
67049: LIST
67050: LIST
67051: PPUSH
67052: CALL_OW 69
67056: ST_TO_ADDR
// for i in result do
67057: LD_ADDR_VAR 0 4
67061: PUSH
67062: LD_VAR 0 3
67066: PUSH
67067: FOR_IN
67068: IFFALSE 67489
// begin tag := GetTag ( i ) + 1 ;
67070: LD_ADDR_VAR 0 9
67074: PUSH
67075: LD_VAR 0 4
67079: PPUSH
67080: CALL_OW 110
67084: PUSH
67085: LD_INT 1
67087: PLUS
67088: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
67089: LD_ADDR_VAR 0 7
67093: PUSH
67094: LD_VAR 0 4
67098: PPUSH
67099: CALL_OW 250
67103: PPUSH
67104: LD_VAR 0 4
67108: PPUSH
67109: CALL_OW 251
67113: PPUSH
67114: LD_INT 6
67116: PPUSH
67117: CALL 66690 0 3
67121: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
67122: LD_VAR 0 4
67126: PPUSH
67127: CALL_OW 247
67131: PUSH
67132: LD_INT 2
67134: EQUAL
67135: PUSH
67136: LD_VAR 0 7
67140: AND
67141: PUSH
67142: LD_VAR 0 4
67146: PPUSH
67147: CALL_OW 264
67151: PUSH
67152: LD_VAR 0 10
67156: IN
67157: NOT
67158: AND
67159: IFFALSE 67198
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
67161: LD_VAR 0 4
67165: PPUSH
67166: LD_VAR 0 7
67170: PUSH
67171: LD_INT 1
67173: ARRAY
67174: PUSH
67175: LD_INT 1
67177: ARRAY
67178: PPUSH
67179: LD_VAR 0 7
67183: PUSH
67184: LD_INT 1
67186: ARRAY
67187: PUSH
67188: LD_INT 2
67190: ARRAY
67191: PPUSH
67192: CALL_OW 116
67196: GO 67487
// if path > tag then
67198: LD_VAR 0 2
67202: PUSH
67203: LD_VAR 0 9
67207: GREATER
67208: IFFALSE 67416
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
67210: LD_ADDR_VAR 0 6
67214: PUSH
67215: LD_VAR 0 5
67219: PPUSH
67220: LD_INT 91
67222: PUSH
67223: LD_VAR 0 4
67227: PUSH
67228: LD_INT 8
67230: PUSH
67231: EMPTY
67232: LIST
67233: LIST
67234: LIST
67235: PPUSH
67236: CALL_OW 72
67240: ST_TO_ADDR
// if nearEnemy then
67241: LD_VAR 0 6
67245: IFFALSE 67314
// begin if GetWeapon ( i ) = ru_time_lapser then
67247: LD_VAR 0 4
67251: PPUSH
67252: CALL_OW 264
67256: PUSH
67257: LD_INT 49
67259: EQUAL
67260: IFFALSE 67288
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
67262: LD_VAR 0 4
67266: PPUSH
67267: LD_VAR 0 6
67271: PPUSH
67272: LD_VAR 0 4
67276: PPUSH
67277: CALL_OW 74
67281: PPUSH
67282: CALL_OW 112
67286: GO 67312
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
67288: LD_VAR 0 4
67292: PPUSH
67293: LD_VAR 0 6
67297: PPUSH
67298: LD_VAR 0 4
67302: PPUSH
67303: CALL_OW 74
67307: PPUSH
67308: CALL_OW 115
// end else
67312: GO 67414
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
67314: LD_VAR 0 4
67318: PPUSH
67319: LD_VAR 0 2
67323: PUSH
67324: LD_VAR 0 9
67328: ARRAY
67329: PUSH
67330: LD_INT 1
67332: ARRAY
67333: PPUSH
67334: LD_VAR 0 2
67338: PUSH
67339: LD_VAR 0 9
67343: ARRAY
67344: PUSH
67345: LD_INT 2
67347: ARRAY
67348: PPUSH
67349: CALL_OW 297
67353: PUSH
67354: LD_INT 6
67356: GREATER
67357: IFFALSE 67400
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
67359: LD_VAR 0 4
67363: PPUSH
67364: LD_VAR 0 2
67368: PUSH
67369: LD_VAR 0 9
67373: ARRAY
67374: PUSH
67375: LD_INT 1
67377: ARRAY
67378: PPUSH
67379: LD_VAR 0 2
67383: PUSH
67384: LD_VAR 0 9
67388: ARRAY
67389: PUSH
67390: LD_INT 2
67392: ARRAY
67393: PPUSH
67394: CALL_OW 114
67398: GO 67414
// SetTag ( i , tag ) ;
67400: LD_VAR 0 4
67404: PPUSH
67405: LD_VAR 0 9
67409: PPUSH
67410: CALL_OW 109
// end else
67414: GO 67487
// if enemy then
67416: LD_VAR 0 5
67420: IFFALSE 67487
// begin if GetWeapon ( i ) = ru_time_lapser then
67422: LD_VAR 0 4
67426: PPUSH
67427: CALL_OW 264
67431: PUSH
67432: LD_INT 49
67434: EQUAL
67435: IFFALSE 67463
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
67437: LD_VAR 0 4
67441: PPUSH
67442: LD_VAR 0 5
67446: PPUSH
67447: LD_VAR 0 4
67451: PPUSH
67452: CALL_OW 74
67456: PPUSH
67457: CALL_OW 112
67461: GO 67487
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
67463: LD_VAR 0 4
67467: PPUSH
67468: LD_VAR 0 5
67472: PPUSH
67473: LD_VAR 0 4
67477: PPUSH
67478: CALL_OW 74
67482: PPUSH
67483: CALL_OW 115
// end ; end ;
67487: GO 67067
67489: POP
67490: POP
// end ;
67491: LD_VAR 0 3
67495: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
67496: LD_INT 0
67498: PPUSH
67499: PPUSH
67500: PPUSH
// if not unit or IsInUnit ( unit ) then
67501: LD_VAR 0 1
67505: NOT
67506: PUSH
67507: LD_VAR 0 1
67511: PPUSH
67512: CALL_OW 310
67516: OR
67517: IFFALSE 67521
// exit ;
67519: GO 67612
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
67521: LD_ADDR_VAR 0 4
67525: PUSH
67526: LD_VAR 0 1
67530: PPUSH
67531: CALL_OW 250
67535: PPUSH
67536: LD_VAR 0 2
67540: PPUSH
67541: LD_INT 1
67543: PPUSH
67544: CALL_OW 272
67548: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
67549: LD_ADDR_VAR 0 5
67553: PUSH
67554: LD_VAR 0 1
67558: PPUSH
67559: CALL_OW 251
67563: PPUSH
67564: LD_VAR 0 2
67568: PPUSH
67569: LD_INT 1
67571: PPUSH
67572: CALL_OW 273
67576: ST_TO_ADDR
// if ValidHex ( x , y ) then
67577: LD_VAR 0 4
67581: PPUSH
67582: LD_VAR 0 5
67586: PPUSH
67587: CALL_OW 488
67591: IFFALSE 67612
// ComTurnXY ( unit , x , y ) ;
67593: LD_VAR 0 1
67597: PPUSH
67598: LD_VAR 0 4
67602: PPUSH
67603: LD_VAR 0 5
67607: PPUSH
67608: CALL_OW 118
// end ;
67612: LD_VAR 0 3
67616: RET
// export function SeeUnits ( side , units ) ; var i ; begin
67617: LD_INT 0
67619: PPUSH
67620: PPUSH
// result := false ;
67621: LD_ADDR_VAR 0 3
67625: PUSH
67626: LD_INT 0
67628: ST_TO_ADDR
// if not units then
67629: LD_VAR 0 2
67633: NOT
67634: IFFALSE 67638
// exit ;
67636: GO 67683
// for i in units do
67638: LD_ADDR_VAR 0 4
67642: PUSH
67643: LD_VAR 0 2
67647: PUSH
67648: FOR_IN
67649: IFFALSE 67681
// if See ( side , i ) then
67651: LD_VAR 0 1
67655: PPUSH
67656: LD_VAR 0 4
67660: PPUSH
67661: CALL_OW 292
67665: IFFALSE 67679
// begin result := true ;
67667: LD_ADDR_VAR 0 3
67671: PUSH
67672: LD_INT 1
67674: ST_TO_ADDR
// exit ;
67675: POP
67676: POP
67677: GO 67683
// end ;
67679: GO 67648
67681: POP
67682: POP
// end ;
67683: LD_VAR 0 3
67687: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
67688: LD_INT 0
67690: PPUSH
67691: PPUSH
67692: PPUSH
67693: PPUSH
// if not unit or not points then
67694: LD_VAR 0 1
67698: NOT
67699: PUSH
67700: LD_VAR 0 2
67704: NOT
67705: OR
67706: IFFALSE 67710
// exit ;
67708: GO 67800
// dist := 99999 ;
67710: LD_ADDR_VAR 0 5
67714: PUSH
67715: LD_INT 99999
67717: ST_TO_ADDR
// for i in points do
67718: LD_ADDR_VAR 0 4
67722: PUSH
67723: LD_VAR 0 2
67727: PUSH
67728: FOR_IN
67729: IFFALSE 67798
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
67731: LD_ADDR_VAR 0 6
67735: PUSH
67736: LD_VAR 0 1
67740: PPUSH
67741: LD_VAR 0 4
67745: PUSH
67746: LD_INT 1
67748: ARRAY
67749: PPUSH
67750: LD_VAR 0 4
67754: PUSH
67755: LD_INT 2
67757: ARRAY
67758: PPUSH
67759: CALL_OW 297
67763: ST_TO_ADDR
// if tmpDist < dist then
67764: LD_VAR 0 6
67768: PUSH
67769: LD_VAR 0 5
67773: LESS
67774: IFFALSE 67796
// begin result := i ;
67776: LD_ADDR_VAR 0 3
67780: PUSH
67781: LD_VAR 0 4
67785: ST_TO_ADDR
// dist := tmpDist ;
67786: LD_ADDR_VAR 0 5
67790: PUSH
67791: LD_VAR 0 6
67795: ST_TO_ADDR
// end ; end ;
67796: GO 67728
67798: POP
67799: POP
// end ;
67800: LD_VAR 0 3
67804: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
67805: LD_INT 0
67807: PPUSH
// uc_side := side ;
67808: LD_ADDR_OWVAR 20
67812: PUSH
67813: LD_VAR 0 1
67817: ST_TO_ADDR
// uc_nation := 3 ;
67818: LD_ADDR_OWVAR 21
67822: PUSH
67823: LD_INT 3
67825: ST_TO_ADDR
// vc_chassis := 25 ;
67826: LD_ADDR_OWVAR 37
67830: PUSH
67831: LD_INT 25
67833: ST_TO_ADDR
// vc_engine := engine_siberite ;
67834: LD_ADDR_OWVAR 39
67838: PUSH
67839: LD_INT 3
67841: ST_TO_ADDR
// vc_control := control_computer ;
67842: LD_ADDR_OWVAR 38
67846: PUSH
67847: LD_INT 3
67849: ST_TO_ADDR
// vc_weapon := 59 ;
67850: LD_ADDR_OWVAR 40
67854: PUSH
67855: LD_INT 59
67857: ST_TO_ADDR
// result := CreateVehicle ;
67858: LD_ADDR_VAR 0 5
67862: PUSH
67863: CALL_OW 45
67867: ST_TO_ADDR
// SetDir ( result , d ) ;
67868: LD_VAR 0 5
67872: PPUSH
67873: LD_VAR 0 4
67877: PPUSH
67878: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
67882: LD_VAR 0 5
67886: PPUSH
67887: LD_VAR 0 2
67891: PPUSH
67892: LD_VAR 0 3
67896: PPUSH
67897: LD_INT 0
67899: PPUSH
67900: CALL_OW 48
// end ;
67904: LD_VAR 0 5
67908: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
67909: LD_INT 0
67911: PPUSH
67912: PPUSH
67913: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
67914: LD_ADDR_VAR 0 2
67918: PUSH
67919: LD_INT 0
67921: PUSH
67922: LD_INT 0
67924: PUSH
67925: LD_INT 0
67927: PUSH
67928: LD_INT 0
67930: PUSH
67931: EMPTY
67932: LIST
67933: LIST
67934: LIST
67935: LIST
67936: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
67937: LD_VAR 0 1
67941: NOT
67942: PUSH
67943: LD_VAR 0 1
67947: PPUSH
67948: CALL_OW 264
67952: PUSH
67953: LD_INT 12
67955: PUSH
67956: LD_INT 51
67958: PUSH
67959: LD_INT 32
67961: PUSH
67962: LD_INT 89
67964: PUSH
67965: EMPTY
67966: LIST
67967: LIST
67968: LIST
67969: LIST
67970: IN
67971: NOT
67972: OR
67973: IFFALSE 67977
// exit ;
67975: GO 68075
// for i := 1 to 3 do
67977: LD_ADDR_VAR 0 3
67981: PUSH
67982: DOUBLE
67983: LD_INT 1
67985: DEC
67986: ST_TO_ADDR
67987: LD_INT 3
67989: PUSH
67990: FOR_TO
67991: IFFALSE 68073
// begin tmp := GetCargo ( cargo , i ) ;
67993: LD_ADDR_VAR 0 4
67997: PUSH
67998: LD_VAR 0 1
68002: PPUSH
68003: LD_VAR 0 3
68007: PPUSH
68008: CALL_OW 289
68012: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
68013: LD_ADDR_VAR 0 2
68017: PUSH
68018: LD_VAR 0 2
68022: PPUSH
68023: LD_VAR 0 3
68027: PPUSH
68028: LD_VAR 0 4
68032: PPUSH
68033: CALL_OW 1
68037: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
68038: LD_ADDR_VAR 0 2
68042: PUSH
68043: LD_VAR 0 2
68047: PPUSH
68048: LD_INT 4
68050: PPUSH
68051: LD_VAR 0 2
68055: PUSH
68056: LD_INT 4
68058: ARRAY
68059: PUSH
68060: LD_VAR 0 4
68064: PLUS
68065: PPUSH
68066: CALL_OW 1
68070: ST_TO_ADDR
// end ;
68071: GO 67990
68073: POP
68074: POP
// end ;
68075: LD_VAR 0 2
68079: RET
// export function Length ( array ) ; begin
68080: LD_INT 0
68082: PPUSH
// result := array + 0 ;
68083: LD_ADDR_VAR 0 2
68087: PUSH
68088: LD_VAR 0 1
68092: PUSH
68093: LD_INT 0
68095: PLUS
68096: ST_TO_ADDR
// end ;
68097: LD_VAR 0 2
68101: RET
// export function PrepareArray ( array ) ; begin
68102: LD_INT 0
68104: PPUSH
// result := array diff 0 ;
68105: LD_ADDR_VAR 0 2
68109: PUSH
68110: LD_VAR 0 1
68114: PUSH
68115: LD_INT 0
68117: DIFF
68118: ST_TO_ADDR
// if not result [ 1 ] then
68119: LD_VAR 0 2
68123: PUSH
68124: LD_INT 1
68126: ARRAY
68127: NOT
68128: IFFALSE 68148
// result := Delete ( result , 1 ) ;
68130: LD_ADDR_VAR 0 2
68134: PUSH
68135: LD_VAR 0 2
68139: PPUSH
68140: LD_INT 1
68142: PPUSH
68143: CALL_OW 3
68147: ST_TO_ADDR
// end ;
68148: LD_VAR 0 2
68152: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
68153: LD_INT 0
68155: PPUSH
68156: PPUSH
68157: PPUSH
68158: PPUSH
// sibRocketRange := 25 ;
68159: LD_ADDR_VAR 0 6
68163: PUSH
68164: LD_INT 25
68166: ST_TO_ADDR
// result := false ;
68167: LD_ADDR_VAR 0 4
68171: PUSH
68172: LD_INT 0
68174: ST_TO_ADDR
// for i := 0 to 5 do
68175: LD_ADDR_VAR 0 5
68179: PUSH
68180: DOUBLE
68181: LD_INT 0
68183: DEC
68184: ST_TO_ADDR
68185: LD_INT 5
68187: PUSH
68188: FOR_TO
68189: IFFALSE 68256
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
68191: LD_VAR 0 1
68195: PPUSH
68196: LD_VAR 0 5
68200: PPUSH
68201: LD_VAR 0 6
68205: PPUSH
68206: CALL_OW 272
68210: PPUSH
68211: LD_VAR 0 2
68215: PPUSH
68216: LD_VAR 0 5
68220: PPUSH
68221: LD_VAR 0 6
68225: PPUSH
68226: CALL_OW 273
68230: PPUSH
68231: LD_VAR 0 3
68235: PPUSH
68236: CALL_OW 309
68240: IFFALSE 68254
// begin result := true ;
68242: LD_ADDR_VAR 0 4
68246: PUSH
68247: LD_INT 1
68249: ST_TO_ADDR
// exit ;
68250: POP
68251: POP
68252: GO 68258
// end ;
68254: GO 68188
68256: POP
68257: POP
// end ;
68258: LD_VAR 0 4
68262: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
68263: LD_INT 0
68265: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
68266: LD_VAR 0 1
68270: PPUSH
68271: LD_VAR 0 2
68275: PPUSH
68276: LD_INT 0
68278: PPUSH
68279: LD_INT 0
68281: PPUSH
68282: LD_INT 1
68284: PPUSH
68285: LD_INT 0
68287: PPUSH
68288: CALL_OW 587
// end ; end_of_file
68292: LD_VAR 0 3
68296: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
68297: LD_VAR 0 1
68301: PUSH
68302: LD_INT 200
68304: DOUBLE
68305: GREATEREQUAL
68306: IFFALSE 68314
68308: LD_INT 299
68310: DOUBLE
68311: LESSEQUAL
68312: IFTRUE 68316
68314: GO 68348
68316: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
68317: LD_VAR 0 1
68321: PPUSH
68322: LD_VAR 0 2
68326: PPUSH
68327: LD_VAR 0 3
68331: PPUSH
68332: LD_VAR 0 4
68336: PPUSH
68337: LD_VAR 0 5
68341: PPUSH
68342: CALL 22963 0 5
68346: GO 68425
68348: LD_INT 300
68350: DOUBLE
68351: GREATEREQUAL
68352: IFFALSE 68360
68354: LD_INT 399
68356: DOUBLE
68357: LESSEQUAL
68358: IFTRUE 68362
68360: GO 68424
68362: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
68363: LD_VAR 0 1
68367: PPUSH
68368: LD_VAR 0 2
68372: PPUSH
68373: LD_VAR 0 3
68377: PPUSH
68378: LD_VAR 0 4
68382: PPUSH
68383: LD_VAR 0 5
68387: PPUSH
68388: LD_VAR 0 6
68392: PPUSH
68393: LD_VAR 0 7
68397: PPUSH
68398: LD_VAR 0 8
68402: PPUSH
68403: LD_VAR 0 9
68407: PPUSH
68408: LD_VAR 0 10
68412: PPUSH
68413: LD_VAR 0 11
68417: PPUSH
68418: CALL 19296 0 11
68422: GO 68425
68424: POP
// end ;
68425: PPOPN 11
68427: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
68428: LD_VAR 0 1
68432: PPUSH
68433: LD_VAR 0 2
68437: PPUSH
68438: LD_VAR 0 3
68442: PPUSH
68443: LD_VAR 0 4
68447: PPUSH
68448: LD_VAR 0 5
68452: PPUSH
68453: CALL 22699 0 5
// end ; end_of_file
68457: PPOPN 5
68459: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
68460: LD_VAR 0 1
68464: PPUSH
68465: LD_VAR 0 2
68469: PPUSH
68470: LD_VAR 0 3
68474: PPUSH
68475: LD_VAR 0 4
68479: PPUSH
68480: LD_VAR 0 5
68484: PPUSH
68485: LD_VAR 0 6
68489: PPUSH
68490: CALL 6948 0 6
// end ;
68494: PPOPN 6
68496: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
68497: LD_INT 0
68499: PPUSH
// begin if not units then
68500: LD_VAR 0 1
68504: NOT
68505: IFFALSE 68509
// exit ;
68507: GO 68509
// end ;
68509: PPOPN 7
68511: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
68512: CALL 6852 0 0
// end ;
68516: PPOPN 1
68518: END
