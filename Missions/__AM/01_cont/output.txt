// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 32 0 0
// InitAmerican ;
  15: CALL 866 0 0
// InitRussian ;
  19: CALL 1137 0 0
// DebugMode ;
  23: CALL 160 0 0
// Action ;
  27: CALL 2700 0 0
// end ;
  31: END
// export debug ; export mission_prefix ; export active_russian_dialog , bobby_in_squad , powell_contact , macmilan_use_radio , cyrus_in_squad , active_road_patrol , macmilan_in_trap , meta_action , end_mission , bobby_saved , cyrus_saved , send_troops_to_forest , active_powell_dialog ; function Init ; begin
  32: LD_INT 0
  34: PPUSH
// mission_prefix := 01_ ;
  35: LD_ADDR_EXP 2
  39: PUSH
  40: LD_STRING 01_
  42: ST_TO_ADDR
// debug := false ;
  43: LD_ADDR_EXP 1
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// active_russian_dialog := false ;
  51: LD_ADDR_EXP 3
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// bobby_in_squad := false ;
  59: LD_ADDR_EXP 4
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// cyrus_in_squad := false ;
  67: LD_ADDR_EXP 7
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// powell_contact := false ;
  75: LD_ADDR_EXP 5
  79: PUSH
  80: LD_INT 0
  82: ST_TO_ADDR
// macmilan_use_radio := false ;
  83: LD_ADDR_EXP 6
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// active_road_patrol := false ;
  91: LD_ADDR_EXP 8
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// macmilan_in_trap := false ;
  99: LD_ADDR_EXP 9
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// meta_action := false ;
 107: LD_ADDR_EXP 10
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// end_mission := false ;
 115: LD_ADDR_EXP 11
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// bobby_saved := false ;
 123: LD_ADDR_EXP 12
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// cyrus_saved := false ;
 131: LD_ADDR_EXP 13
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// send_troops_to_forest := false ;
 139: LD_ADDR_EXP 14
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// active_powell_dialog := false ;
 147: LD_ADDR_EXP 15
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// end ;
 155: LD_VAR 0 1
 159: RET
// function DebugMode ; var i ; begin
 160: LD_INT 0
 162: PPUSH
 163: PPUSH
// if not debug then
 164: LD_EXP 1
 168: NOT
 169: IFFALSE 173
// exit ;
 171: GO 192
// Difficulty := 3 ;
 173: LD_ADDR_OWVAR 67
 177: PUSH
 178: LD_INT 3
 180: ST_TO_ADDR
// TurnFogOff ( ) ;
 181: CALL_OW 537
// FogOff ( 1 ) ;
 185: LD_INT 1
 187: PPUSH
 188: CALL_OW 344
// end ; end_of_file
 192: LD_VAR 0 1
 196: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 197: LD_INT 0
 199: PPUSH
 200: PPUSH
 201: PPUSH
// uc_side := GetSide ( b ) ;
 202: LD_ADDR_OWVAR 20
 206: PUSH
 207: LD_VAR 0 2
 211: PPUSH
 212: CALL_OW 255
 216: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 217: LD_ADDR_OWVAR 21
 221: PUSH
 222: LD_VAR 0 2
 226: PPUSH
 227: CALL_OW 248
 231: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 232: LD_INT 0
 234: PPUSH
 235: LD_INT 1
 237: PPUSH
 238: LD_VAR 0 1
 242: PPUSH
 243: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
 247: LD_ADDR_VAR 0 5
 251: PUSH
 252: LD_VAR 0 2
 256: PPUSH
 257: CALL_OW 254
 261: PUSH
 262: LD_INT 3
 264: MINUS
 265: ST_TO_ADDR
// if dir < 0 then
 266: LD_VAR 0 5
 270: PUSH
 271: LD_INT 0
 273: LESS
 274: IFFALSE 290
// dir := 6 + dir ;
 276: LD_ADDR_VAR 0 5
 280: PUSH
 281: LD_INT 6
 283: PUSH
 284: LD_VAR 0 5
 288: PLUS
 289: ST_TO_ADDR
// un := CreateHuman ;
 290: LD_ADDR_VAR 0 4
 294: PUSH
 295: CALL_OW 44
 299: ST_TO_ADDR
// SetDir ( un , dir ) ;
 300: LD_VAR 0 4
 304: PPUSH
 305: LD_VAR 0 5
 309: PPUSH
 310: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 314: LD_VAR 0 4
 318: PPUSH
 319: LD_VAR 0 2
 323: PPUSH
 324: CALL_OW 52
// end ;
 328: LD_VAR 0 3
 332: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 333: LD_INT 0
 335: PPUSH
// uc_side := side ;
 336: LD_ADDR_OWVAR 20
 340: PUSH
 341: LD_VAR 0 1
 345: ST_TO_ADDR
// uc_nation := nation ;
 346: LD_ADDR_OWVAR 21
 350: PUSH
 351: LD_VAR 0 2
 355: ST_TO_ADDR
// vc_chassis := chassis ;
 356: LD_ADDR_OWVAR 37
 360: PUSH
 361: LD_VAR 0 3
 365: ST_TO_ADDR
// vc_engine := engine ;
 366: LD_ADDR_OWVAR 39
 370: PUSH
 371: LD_VAR 0 4
 375: ST_TO_ADDR
// vc_control := control ;
 376: LD_ADDR_OWVAR 38
 380: PUSH
 381: LD_VAR 0 5
 385: ST_TO_ADDR
// vc_weapon := weapon ;
 386: LD_ADDR_OWVAR 40
 390: PUSH
 391: LD_VAR 0 6
 395: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 396: LD_ADDR_OWVAR 41
 400: PUSH
 401: LD_VAR 0 7
 405: ST_TO_ADDR
// result := CreateVehicle ;
 406: LD_ADDR_VAR 0 8
 410: PUSH
 411: CALL_OW 45
 415: ST_TO_ADDR
// end ;
 416: LD_VAR 0 8
 420: RET
// export function ComPatrol ( unit , mode , pause , coords ) ; var i ; begin
 421: LD_INT 0
 423: PPUSH
 424: PPUSH
// while ( active_road_patrol ) do
 425: LD_EXP 8
 429: IFFALSE 783
// begin Wait ( 0 0$01 ) ;
 431: LD_INT 35
 433: PPUSH
 434: CALL_OW 67
// if not unit then
 438: LD_VAR 0 1
 442: NOT
 443: IFFALSE 447
// exit ;
 445: GO 783
// if mode = road then
 447: LD_VAR 0 2
 451: PUSH
 452: LD_STRING road
 454: EQUAL
 455: IFFALSE 511
// if GetFuel ( unit ) < 50 and not See ( 1 , unit ) and not HasTask ( unit ) then
 457: LD_VAR 0 1
 461: PPUSH
 462: CALL_OW 261
 466: PUSH
 467: LD_INT 50
 469: LESS
 470: PUSH
 471: LD_INT 1
 473: PPUSH
 474: LD_VAR 0 1
 478: PPUSH
 479: CALL_OW 292
 483: NOT
 484: AND
 485: PUSH
 486: LD_VAR 0 1
 490: PPUSH
 491: CALL_OW 314
 495: NOT
 496: AND
 497: IFFALSE 511
// SetFuel ( unit , 100 ) ;
 499: LD_VAR 0 1
 503: PPUSH
 504: LD_INT 100
 506: PPUSH
 507: CALL_OW 240
// if mode = forest then
 511: LD_VAR 0 2
 515: PUSH
 516: LD_STRING forest
 518: EQUAL
 519: IFFALSE 599
// if GetLives ( unit ) < 600 then
 521: LD_VAR 0 1
 525: PPUSH
 526: CALL_OW 256
 530: PUSH
 531: LD_INT 600
 533: LESS
 534: IFFALSE 599
// begin ComMoveXY ( unit , 42 , 3 ) ;
 536: LD_VAR 0 1
 540: PPUSH
 541: LD_INT 42
 543: PPUSH
 544: LD_INT 3
 546: PPUSH
 547: CALL_OW 111
// SetRememberedX ( unit , GetX ( unit ) ) ;
 551: LD_VAR 0 1
 555: PPUSH
 556: LD_VAR 0 1
 560: PPUSH
 561: CALL_OW 250
 565: PPUSH
 566: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
 570: LD_VAR 0 1
 574: PPUSH
 575: LD_VAR 0 1
 579: PPUSH
 580: CALL_OW 251
 584: PPUSH
 585: CALL_OW 232
// send_troops_to_forest := true ;
 589: LD_ADDR_EXP 14
 593: PUSH
 594: LD_INT 1
 596: ST_TO_ADDR
// break ;
 597: GO 783
// end ; if not HasTask ( unit ) then
 599: LD_VAR 0 1
 603: PPUSH
 604: CALL_OW 314
 608: NOT
 609: IFFALSE 781
// begin for i = 1 to coords do
 611: LD_ADDR_VAR 0 6
 615: PUSH
 616: DOUBLE
 617: LD_INT 1
 619: DEC
 620: ST_TO_ADDR
 621: LD_VAR 0 4
 625: PUSH
 626: FOR_TO
 627: IFFALSE 694
// begin AddComAgressiveMove ( unit , coords [ i ] , coords [ i + 1 ] ) ;
 629: LD_VAR 0 1
 633: PPUSH
 634: LD_VAR 0 4
 638: PUSH
 639: LD_VAR 0 6
 643: ARRAY
 644: PPUSH
 645: LD_VAR 0 4
 649: PUSH
 650: LD_VAR 0 6
 654: PUSH
 655: LD_INT 1
 657: PLUS
 658: ARRAY
 659: PPUSH
 660: CALL_OW 174
// AddComWait ( unit , pause ) ;
 664: LD_VAR 0 1
 668: PPUSH
 669: LD_VAR 0 3
 673: PPUSH
 674: CALL_OW 202
// i := i + 1 ;
 678: LD_ADDR_VAR 0 6
 682: PUSH
 683: LD_VAR 0 6
 687: PUSH
 688: LD_INT 1
 690: PLUS
 691: ST_TO_ADDR
// end ;
 692: GO 626
 694: POP
 695: POP
// for i = coords downto 1 do
 696: LD_ADDR_VAR 0 6
 700: PUSH
 701: DOUBLE
 702: LD_VAR 0 4
 706: INC
 707: ST_TO_ADDR
 708: LD_INT 1
 710: PUSH
 711: FOR_DOWNTO
 712: IFFALSE 779
// begin AddComAgressiveMove ( unit , coords [ i - 1 ] , coords [ i ] ) ;
 714: LD_VAR 0 1
 718: PPUSH
 719: LD_VAR 0 4
 723: PUSH
 724: LD_VAR 0 6
 728: PUSH
 729: LD_INT 1
 731: MINUS
 732: ARRAY
 733: PPUSH
 734: LD_VAR 0 4
 738: PUSH
 739: LD_VAR 0 6
 743: ARRAY
 744: PPUSH
 745: CALL_OW 174
// AddComWait ( unit , pause ) ;
 749: LD_VAR 0 1
 753: PPUSH
 754: LD_VAR 0 3
 758: PPUSH
 759: CALL_OW 202
// i := i - 1 ;
 763: LD_ADDR_VAR 0 6
 767: PUSH
 768: LD_VAR 0 6
 772: PUSH
 773: LD_INT 1
 775: MINUS
 776: ST_TO_ADDR
// end ;
 777: GO 711
 779: POP
 780: POP
// end ; end ;
 781: GO 425
// end ;
 783: LD_VAR 0 5
 787: RET
// export function DebugSay ( dialog ) ; var speaker ; begin
 788: LD_INT 0
 790: PPUSH
 791: PPUSH
// uc_nation := 1 ;
 792: LD_ADDR_OWVAR 21
 796: PUSH
 797: LD_INT 1
 799: ST_TO_ADDR
// uc_side := 0 ;
 800: LD_ADDR_OWVAR 20
 804: PUSH
 805: LD_INT 0
 807: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
 808: LD_INT 0
 810: PPUSH
 811: LD_INT 1
 813: PPUSH
 814: LD_INT 0
 816: PPUSH
 817: CALL_OW 380
// hc_name := speaker ;
 821: LD_ADDR_OWVAR 26
 825: PUSH
 826: LD_STRING speaker
 828: ST_TO_ADDR
// hc_gallery :=  ;
 829: LD_ADDR_OWVAR 33
 833: PUSH
 834: LD_STRING 
 836: ST_TO_ADDR
// speaker := CreateHuman ;
 837: LD_ADDR_VAR 0 3
 841: PUSH
 842: CALL_OW 44
 846: ST_TO_ADDR
// Say ( speaker , dialog ) ;
 847: LD_VAR 0 3
 851: PPUSH
 852: LD_VAR 0 1
 856: PPUSH
 857: CALL_OW 88
// end ; end_of_file
 861: LD_VAR 0 2
 865: RET
// export JMM , Bobby , Cyrus , Powell , fakePokryshkin ; export function InitAmerican ; begin
 866: LD_INT 0
 868: PPUSH
// uc_nation := 1 ;
 869: LD_ADDR_OWVAR 21
 873: PUSH
 874: LD_INT 1
 876: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , false ,  ) ;
 877: LD_ADDR_EXP 16
 881: PUSH
 882: LD_STRING JMM
 884: PPUSH
 885: LD_INT 0
 887: PPUSH
 888: LD_STRING 
 890: PPUSH
 891: CALL 23812 0 3
 895: ST_TO_ADDR
// uc_side := 4 ;
 896: LD_ADDR_OWVAR 20
 900: PUSH
 901: LD_INT 4
 903: ST_TO_ADDR
// hc_gallery := us ;
 904: LD_ADDR_OWVAR 33
 908: PUSH
 909: LD_STRING us
 911: ST_TO_ADDR
// hc_face_number := 7 ;
 912: LD_ADDR_OWVAR 34
 916: PUSH
 917: LD_INT 7
 919: ST_TO_ADDR
// hc_sex := sex_male ;
 920: LD_ADDR_OWVAR 27
 924: PUSH
 925: LD_INT 1
 927: ST_TO_ADDR
// hc_name := . ;
 928: LD_ADDR_OWVAR 26
 932: PUSH
 933: LD_STRING .
 935: ST_TO_ADDR
// hc_class := 1 ;
 936: LD_ADDR_OWVAR 28
 940: PUSH
 941: LD_INT 1
 943: ST_TO_ADDR
// Powell := CreateHuman ;
 944: LD_ADDR_EXP 19
 948: PUSH
 949: CALL_OW 44
 953: ST_TO_ADDR
// hc_name := . ;
 954: LD_ADDR_OWVAR 26
 958: PUSH
 959: LD_STRING .
 961: ST_TO_ADDR
// hc_gallery := ru ;
 962: LD_ADDR_OWVAR 33
 966: PUSH
 967: LD_STRING ru
 969: ST_TO_ADDR
// hc_face_number := 4 ;
 970: LD_ADDR_OWVAR 34
 974: PUSH
 975: LD_INT 4
 977: ST_TO_ADDR
// hc_sex := sex_male ;
 978: LD_ADDR_OWVAR 27
 982: PUSH
 983: LD_INT 1
 985: ST_TO_ADDR
// fakePokryshkin := CreateHuman ;
 986: LD_ADDR_EXP 20
 990: PUSH
 991: CALL_OW 44
 995: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , false ,  ) ;
 996: LD_ADDR_EXP 17
1000: PUSH
1001: LD_STRING Bobby
1003: PPUSH
1004: LD_INT 0
1006: PPUSH
1007: LD_STRING 
1009: PPUSH
1010: CALL 23812 0 3
1014: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , false ,  ) ;
1015: LD_ADDR_EXP 18
1019: PUSH
1020: LD_STRING Cyrus
1022: PPUSH
1023: LD_INT 0
1025: PPUSH
1026: LD_STRING 
1028: PPUSH
1029: CALL 23812 0 3
1033: ST_TO_ADDR
// case Difficulty of 1 :
1034: LD_OWVAR 67
1038: PUSH
1039: LD_INT 1
1041: DOUBLE
1042: EQUAL
1043: IFTRUE 1047
1045: GO 1062
1047: POP
// SetLives ( Bobby , 500 ) ; 2 :
1048: LD_EXP 17
1052: PPUSH
1053: LD_INT 500
1055: PPUSH
1056: CALL_OW 234
1060: GO 1132
1062: LD_INT 2
1064: DOUBLE
1065: EQUAL
1066: IFTRUE 1070
1068: GO 1085
1070: POP
// SetLives ( Bobby , 460 ) ; 3 :
1071: LD_EXP 17
1075: PPUSH
1076: LD_INT 460
1078: PPUSH
1079: CALL_OW 234
1083: GO 1132
1085: LD_INT 3
1087: DOUBLE
1088: EQUAL
1089: IFTRUE 1093
1091: GO 1108
1093: POP
// SetLives ( Bobby , 420 ) ; 4 :
1094: LD_EXP 17
1098: PPUSH
1099: LD_INT 420
1101: PPUSH
1102: CALL_OW 234
1106: GO 1132
1108: LD_INT 4
1110: DOUBLE
1111: EQUAL
1112: IFTRUE 1116
1114: GO 1131
1116: POP
// SetLives ( Bobby , 400 ) ; end ;
1117: LD_EXP 17
1121: PPUSH
1122: LD_INT 400
1124: PPUSH
1125: CALL_OW 234
1129: GO 1132
1131: POP
// end ; end_of_file
1132: LD_VAR 0 1
1136: RET
// export russian_troops_1 , russian_troops_2 , russian_patrol_tanks , russian_meta_guards , russian_patrol_forest ; export Pokryshkin ; export function InitRussian ; var skill , i , un ; begin
1137: LD_INT 0
1139: PPUSH
1140: PPUSH
1141: PPUSH
1142: PPUSH
// skill := [ 1 , 2 , 3 , 3 ] [ Difficulty ] ;
1143: LD_ADDR_VAR 0 2
1147: PUSH
1148: LD_INT 1
1150: PUSH
1151: LD_INT 2
1153: PUSH
1154: LD_INT 3
1156: PUSH
1157: LD_INT 3
1159: PUSH
1160: EMPTY
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: PUSH
1166: LD_OWVAR 67
1170: ARRAY
1171: ST_TO_ADDR
// uc_side := 3 ;
1172: LD_ADDR_OWVAR 20
1176: PUSH
1177: LD_INT 3
1179: ST_TO_ADDR
// uc_nation := 3 ;
1180: LD_ADDR_OWVAR 21
1184: PUSH
1185: LD_INT 3
1187: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
1188: LD_ADDR_EXP 26
1192: PUSH
1193: LD_STRING Pokryshkin
1195: PPUSH
1196: LD_INT 0
1198: PPUSH
1199: LD_STRING 
1201: PPUSH
1202: CALL 23812 0 3
1206: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 44 , 5 , false ) ;
1207: LD_EXP 26
1211: PPUSH
1212: LD_INT 44
1214: PPUSH
1215: LD_INT 5
1217: PPUSH
1218: LD_INT 0
1220: PPUSH
1221: CALL_OW 48
// hc_importance := 0 ;
1225: LD_ADDR_OWVAR 32
1229: PUSH
1230: LD_INT 0
1232: ST_TO_ADDR
// hc_gallery :=  ;
1233: LD_ADDR_OWVAR 33
1237: PUSH
1238: LD_STRING 
1240: ST_TO_ADDR
// hc_name :=  ;
1241: LD_ADDR_OWVAR 26
1245: PUSH
1246: LD_STRING 
1248: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1249: LD_INT 1
1251: PPUSH
1252: LD_INT 1
1254: PPUSH
1255: LD_VAR 0 2
1259: PPUSH
1260: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1264: LD_ADDR_OWVAR 33
1268: PUSH
1269: LD_STRING SecondCharsGal
1271: ST_TO_ADDR
// hc_face_number := 69 ;
1272: LD_ADDR_OWVAR 34
1276: PUSH
1277: LD_INT 69
1279: ST_TO_ADDR
// hc_sex := sex_male ;
1280: LD_ADDR_OWVAR 27
1284: PUSH
1285: LD_INT 1
1287: ST_TO_ADDR
// hc_name := Ilja Ivanov ;
1288: LD_ADDR_OWVAR 26
1292: PUSH
1293: LD_STRING Ilja Ivanov
1295: ST_TO_ADDR
// un := CreateHuman ;
1296: LD_ADDR_VAR 0 4
1300: PUSH
1301: CALL_OW 44
1305: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 1 , un ) ;
1306: LD_ADDR_EXP 21
1310: PUSH
1311: LD_EXP 21
1315: PPUSH
1316: LD_INT 1
1318: PPUSH
1319: LD_VAR 0 4
1323: PPUSH
1324: CALL_OW 2
1328: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1329: LD_VAR 0 4
1333: PPUSH
1334: LD_INT 3
1336: PPUSH
1337: LD_INT 0
1339: PPUSH
1340: CALL_OW 49
// PrepareHuman ( sex_male , 1 , skill ) ;
1344: LD_INT 1
1346: PPUSH
1347: LD_INT 1
1349: PPUSH
1350: LD_VAR 0 2
1354: PPUSH
1355: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1359: LD_ADDR_OWVAR 33
1363: PUSH
1364: LD_STRING SecondCharsGal
1366: ST_TO_ADDR
// hc_face_number := 70 ;
1367: LD_ADDR_OWVAR 34
1371: PUSH
1372: LD_INT 70
1374: ST_TO_ADDR
// hc_name := Pavel Starczy ;
1375: LD_ADDR_OWVAR 26
1379: PUSH
1380: LD_STRING Pavel Starczy
1382: ST_TO_ADDR
// un := CreateHuman ;
1383: LD_ADDR_VAR 0 4
1387: PUSH
1388: CALL_OW 44
1392: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 2 , un ) ;
1393: LD_ADDR_EXP 21
1397: PUSH
1398: LD_EXP 21
1402: PPUSH
1403: LD_INT 2
1405: PPUSH
1406: LD_VAR 0 4
1410: PPUSH
1411: CALL_OW 2
1415: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1416: LD_VAR 0 4
1420: PPUSH
1421: LD_INT 3
1423: PPUSH
1424: LD_INT 0
1426: PPUSH
1427: CALL_OW 49
// InitHc ;
1431: CALL_OW 19
// for i = 1 to 7 do
1435: LD_ADDR_VAR 0 3
1439: PUSH
1440: DOUBLE
1441: LD_INT 1
1443: DEC
1444: ST_TO_ADDR
1445: LD_INT 7
1447: PUSH
1448: FOR_TO
1449: IFFALSE 1600
// begin PrepareHuman ( false , 1 , skill ) ;
1451: LD_INT 0
1453: PPUSH
1454: LD_INT 1
1456: PPUSH
1457: LD_VAR 0 2
1461: PPUSH
1462: CALL_OW 380
// un := CreateHuman ;
1466: LD_ADDR_VAR 0 4
1470: PUSH
1471: CALL_OW 44
1475: ST_TO_ADDR
// if i mod 2 = 0 then
1476: LD_VAR 0 3
1480: PUSH
1481: LD_INT 2
1483: MOD
1484: PUSH
1485: LD_INT 0
1487: EQUAL
1488: IFFALSE 1545
// begin russian_troops_1 := Insert ( russian_troops_1 , russian_troops_1 + 1 , un ) ;
1490: LD_ADDR_EXP 21
1494: PUSH
1495: LD_EXP 21
1499: PPUSH
1500: LD_EXP 21
1504: PUSH
1505: LD_INT 1
1507: PLUS
1508: PPUSH
1509: LD_VAR 0 4
1513: PPUSH
1514: CALL_OW 2
1518: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1519: LD_VAR 0 4
1523: PPUSH
1524: LD_INT 3
1526: PPUSH
1527: LD_INT 0
1529: PPUSH
1530: CALL_OW 49
// ComHold ( un ) ;
1534: LD_VAR 0 4
1538: PPUSH
1539: CALL_OW 140
// end else
1543: GO 1598
// begin russian_troops_2 := Insert ( russian_troops_2 , russian_troops_2 + 1 , un ) ;
1545: LD_ADDR_EXP 22
1549: PUSH
1550: LD_EXP 22
1554: PPUSH
1555: LD_EXP 22
1559: PUSH
1560: LD_INT 1
1562: PLUS
1563: PPUSH
1564: LD_VAR 0 4
1568: PPUSH
1569: CALL_OW 2
1573: ST_TO_ADDR
// PlaceUnitArea ( un , guard_south , false ) ;
1574: LD_VAR 0 4
1578: PPUSH
1579: LD_INT 4
1581: PPUSH
1582: LD_INT 0
1584: PPUSH
1585: CALL_OW 49
// ComHold ( un ) ;
1589: LD_VAR 0 4
1593: PPUSH
1594: CALL_OW 140
// end ; end ;
1598: GO 1448
1600: POP
1601: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) do
1602: LD_ADDR_VAR 0 3
1606: PUSH
1607: LD_INT 22
1609: PUSH
1610: LD_INT 3
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: PUSH
1617: LD_INT 30
1619: PUSH
1620: LD_INT 31
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: PUSH
1627: EMPTY
1628: LIST
1629: LIST
1630: PPUSH
1631: CALL_OW 69
1635: PUSH
1636: FOR_IN
1637: IFFALSE 1655
// PrepareSolBun ( skill , i ) ;
1639: LD_VAR 0 2
1643: PPUSH
1644: LD_VAR 0 3
1648: PPUSH
1649: CALL 197 0 2
1653: GO 1636
1655: POP
1656: POP
// for i = 1 to 2 do
1657: LD_ADDR_VAR 0 3
1661: PUSH
1662: DOUBLE
1663: LD_INT 1
1665: DEC
1666: ST_TO_ADDR
1667: LD_INT 2
1669: PUSH
1670: FOR_TO
1671: IFFALSE 1802
// begin un := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1673: LD_ADDR_VAR 0 4
1677: PUSH
1678: LD_INT 3
1680: PPUSH
1681: LD_INT 3
1683: PPUSH
1684: LD_INT 22
1686: PPUSH
1687: LD_INT 1
1689: PPUSH
1690: LD_INT 1
1692: PPUSH
1693: LD_INT 42
1695: PPUSH
1696: LD_INT 100
1698: PPUSH
1699: CALL 333 0 7
1703: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
1704: LD_INT 0
1706: PPUSH
1707: LD_INT 3
1709: PPUSH
1710: LD_VAR 0 2
1714: PPUSH
1715: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1719: CALL_OW 44
1723: PPUSH
1724: LD_VAR 0 4
1728: PPUSH
1729: CALL_OW 52
// PlaceUnitXY ( un , [ 23 , 131 ] [ i ] , [ 14 , 87 ] [ i ] , false ) ;
1733: LD_VAR 0 4
1737: PPUSH
1738: LD_INT 23
1740: PUSH
1741: LD_INT 131
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: PUSH
1748: LD_VAR 0 3
1752: ARRAY
1753: PPUSH
1754: LD_INT 14
1756: PUSH
1757: LD_INT 87
1759: PUSH
1760: EMPTY
1761: LIST
1762: LIST
1763: PUSH
1764: LD_VAR 0 3
1768: ARRAY
1769: PPUSH
1770: LD_INT 0
1772: PPUSH
1773: CALL_OW 48
// russian_patrol_tanks := Insert ( russian_patrol_tanks , 1 , un ) ;
1777: LD_ADDR_EXP 23
1781: PUSH
1782: LD_EXP 23
1786: PPUSH
1787: LD_INT 1
1789: PPUSH
1790: LD_VAR 0 4
1794: PPUSH
1795: CALL_OW 2
1799: ST_TO_ADDR
// end ;
1800: GO 1670
1802: POP
1803: POP
// for i = 1 to 2 do
1804: LD_ADDR_VAR 0 3
1808: PUSH
1809: DOUBLE
1810: LD_INT 1
1812: DEC
1813: ST_TO_ADDR
1814: LD_INT 2
1816: PUSH
1817: FOR_TO
1818: IFFALSE 1909
// begin PrepareHuman ( [ sex_female , sex_male , sex_male ] [ i ] , 1 , 1 ) ;
1820: LD_INT 2
1822: PUSH
1823: LD_INT 1
1825: PUSH
1826: LD_INT 1
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: LIST
1833: PUSH
1834: LD_VAR 0 3
1838: ARRAY
1839: PPUSH
1840: LD_INT 1
1842: PPUSH
1843: LD_INT 1
1845: PPUSH
1846: CALL_OW 380
// un := CreateHuman ;
1850: LD_ADDR_VAR 0 4
1854: PUSH
1855: CALL_OW 44
1859: ST_TO_ADDR
// russian_meta_guards := Insert ( russian_meta_guards , 1 , un ) ;
1860: LD_ADDR_EXP 24
1864: PUSH
1865: LD_EXP 24
1869: PPUSH
1870: LD_INT 1
1872: PPUSH
1873: LD_VAR 0 4
1877: PPUSH
1878: CALL_OW 2
1882: ST_TO_ADDR
// PlaceUnitArea ( un , exitArea , false ) ;
1883: LD_VAR 0 4
1887: PPUSH
1888: LD_INT 10
1890: PPUSH
1891: LD_INT 0
1893: PPUSH
1894: CALL_OW 49
// ComHold ( un ) ;
1898: LD_VAR 0 4
1902: PPUSH
1903: CALL_OW 140
// end ;
1907: GO 1817
1909: POP
1910: POP
// if Difficulty < 3 then
1911: LD_OWVAR 67
1915: PUSH
1916: LD_INT 3
1918: LESS
1919: IFFALSE 1923
// exit ;
1921: GO 1966
// PrepareHuman ( false , 1 , skill ) ;
1923: LD_INT 0
1925: PPUSH
1926: LD_INT 1
1928: PPUSH
1929: LD_VAR 0 2
1933: PPUSH
1934: CALL_OW 380
// russian_patrol_forest := CreateHuman ;
1938: LD_ADDR_EXP 25
1942: PUSH
1943: CALL_OW 44
1947: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_forest , 82 , 2 , false ) ;
1948: LD_EXP 25
1952: PPUSH
1953: LD_INT 82
1955: PPUSH
1956: LD_INT 2
1958: PPUSH
1959: LD_INT 0
1961: PPUSH
1962: CALL_OW 48
// end ;
1966: LD_VAR 0 1
1970: RET
// every 0 0$01 trigger active_road_patrol do
1971: LD_EXP 8
1975: IFFALSE 2041
1977: GO 1979
1979: DISABLE
// ComPatrol ( russian_patrol_tanks [ 1 ] , road , 0 0$02 , [ 131 , 87 , 107 , 75 , 107 , 66 , 114 , 61 , 107 , 34 ] ) ;
1980: LD_EXP 23
1984: PUSH
1985: LD_INT 1
1987: ARRAY
1988: PPUSH
1989: LD_STRING road
1991: PPUSH
1992: LD_INT 70
1994: PPUSH
1995: LD_INT 131
1997: PUSH
1998: LD_INT 87
2000: PUSH
2001: LD_INT 107
2003: PUSH
2004: LD_INT 75
2006: PUSH
2007: LD_INT 107
2009: PUSH
2010: LD_INT 66
2012: PUSH
2013: LD_INT 114
2015: PUSH
2016: LD_INT 61
2018: PUSH
2019: LD_INT 107
2021: PUSH
2022: LD_INT 34
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: LIST
2029: LIST
2030: LIST
2031: LIST
2032: LIST
2033: LIST
2034: LIST
2035: LIST
2036: PPUSH
2037: CALL 421 0 4
2041: END
// every 0 0$01 trigger active_road_patrol do
2042: LD_EXP 8
2046: IFFALSE 2104
2048: GO 2050
2050: DISABLE
// ComPatrol ( russian_patrol_tanks [ 2 ] , road , 0 0$02 , [ 21 , 12 , 37 , 30 , 65 , 62 , 107 , 76 ] ) ;
2051: LD_EXP 23
2055: PUSH
2056: LD_INT 2
2058: ARRAY
2059: PPUSH
2060: LD_STRING road
2062: PPUSH
2063: LD_INT 70
2065: PPUSH
2066: LD_INT 21
2068: PUSH
2069: LD_INT 12
2071: PUSH
2072: LD_INT 37
2074: PUSH
2075: LD_INT 30
2077: PUSH
2078: LD_INT 65
2080: PUSH
2081: LD_INT 62
2083: PUSH
2084: LD_INT 107
2086: PUSH
2087: LD_INT 76
2089: PUSH
2090: EMPTY
2091: LIST
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: LIST
2097: LIST
2098: LIST
2099: PPUSH
2100: CALL 421 0 4
2104: END
// every 0 0$01 trigger IsOk ( russian_patrol_forest ) do
2105: LD_EXP 25
2109: PPUSH
2110: CALL_OW 302
2114: IFFALSE 2176
2116: GO 2118
2118: DISABLE
// ComPatrol ( russian_patrol_forest , forest , 0 0$01 , [ 52 , 15 , 81 , 9 , 120 , 52 , 135 , 80 , 122 , 95 ] ) ;
2119: LD_EXP 25
2123: PPUSH
2124: LD_STRING forest
2126: PPUSH
2127: LD_INT 35
2129: PPUSH
2130: LD_INT 52
2132: PUSH
2133: LD_INT 15
2135: PUSH
2136: LD_INT 81
2138: PUSH
2139: LD_INT 9
2141: PUSH
2142: LD_INT 120
2144: PUSH
2145: LD_INT 52
2147: PUSH
2148: LD_INT 135
2150: PUSH
2151: LD_INT 80
2153: PUSH
2154: LD_INT 122
2156: PUSH
2157: LD_INT 95
2159: PUSH
2160: EMPTY
2161: LIST
2162: LIST
2163: LIST
2164: LIST
2165: LIST
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: PPUSH
2172: CALL 421 0 4
2176: END
// every 0 0$01 trigger macmilan_use_radio do
2177: LD_EXP 6
2181: IFFALSE 2242
2183: GO 2185
2185: DISABLE
// begin active_road_patrol := false ;
2186: LD_ADDR_EXP 8
2190: PUSH
2191: LD_INT 0
2193: ST_TO_ADDR
// ComStop ( russian_patrol_tanks ) ;
2194: LD_EXP 23
2198: PPUSH
2199: CALL_OW 141
// AddComAgressiveMove ( russian_patrol_tanks , 72 , 41 ) ;
2203: LD_EXP 23
2207: PPUSH
2208: LD_INT 72
2210: PPUSH
2211: LD_INT 41
2213: PPUSH
2214: CALL_OW 174
// ComExitBuilding ( russian_troops_2 ) ;
2218: LD_EXP 22
2222: PPUSH
2223: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , 72 , 41 ) ;
2227: LD_EXP 22
2231: PPUSH
2232: LD_INT 72
2234: PPUSH
2235: LD_INT 41
2237: PPUSH
2238: CALL_OW 174
// end ;
2242: END
// every 0 0$03 trigger FilterUnitsInArea ( def_south , [ f_side , 1 ] ) do var un ;
2243: LD_INT 9
2245: PPUSH
2246: LD_INT 22
2248: PUSH
2249: LD_INT 1
2251: PUSH
2252: EMPTY
2253: LIST
2254: LIST
2255: PPUSH
2256: CALL_OW 70
2260: IFFALSE 2334
2262: GO 2264
2264: DISABLE
2265: LD_INT 0
2267: PPUSH
// begin enable ;
2268: ENABLE
// un := FilterUnitsInArea ( def_south , [ f_side , 1 ] ) [ 1 ] ;
2269: LD_ADDR_VAR 0 1
2273: PUSH
2274: LD_INT 9
2276: PPUSH
2277: LD_INT 22
2279: PUSH
2280: LD_INT 1
2282: PUSH
2283: EMPTY
2284: LIST
2285: LIST
2286: PPUSH
2287: CALL_OW 70
2291: PUSH
2292: LD_INT 1
2294: ARRAY
2295: ST_TO_ADDR
// ComExitBuilding ( russian_troops_2 ) ;
2296: LD_EXP 22
2300: PPUSH
2301: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , GetX ( un ) , GetY ( un ) ) ;
2305: LD_EXP 22
2309: PPUSH
2310: LD_VAR 0 1
2314: PPUSH
2315: CALL_OW 250
2319: PPUSH
2320: LD_VAR 0 1
2324: PPUSH
2325: CALL_OW 251
2329: PPUSH
2330: CALL_OW 174
// end ;
2334: PPOPN 1
2336: END
// every 0 0$01 trigger ( GetLives ( russian_patrol_tanks [ 1 ] ) < 999 or GetLives ( russian_patrol_tanks [ 2 ] ) < 999 ) and See ( 3 , JMM ) do
2337: LD_EXP 23
2341: PUSH
2342: LD_INT 1
2344: ARRAY
2345: PPUSH
2346: CALL_OW 256
2350: PUSH
2351: LD_INT 999
2353: LESS
2354: PUSH
2355: LD_EXP 23
2359: PUSH
2360: LD_INT 2
2362: ARRAY
2363: PPUSH
2364: CALL_OW 256
2368: PUSH
2369: LD_INT 999
2371: LESS
2372: OR
2373: PUSH
2374: LD_INT 3
2376: PPUSH
2377: LD_EXP 16
2381: PPUSH
2382: CALL_OW 292
2386: AND
2387: IFFALSE 2414
2389: GO 2391
2391: DISABLE
// begin active_road_patrol := false ;
2392: LD_ADDR_EXP 8
2396: PUSH
2397: LD_INT 0
2399: ST_TO_ADDR
// ComAttackUnit ( russian_patrol_tanks , JMM ) ;
2400: LD_EXP 23
2404: PPUSH
2405: LD_EXP 16
2409: PPUSH
2410: CALL_OW 115
// end ;
2414: END
// every 0 0$01 trigger macmilan_in_trap do
2415: LD_EXP 9
2419: IFFALSE 2465
2421: GO 2423
2423: DISABLE
// begin ComExitBuilding ( russian_troops_2 ) ;
2424: LD_EXP 22
2428: PPUSH
2429: CALL_OW 122
// ComAttackUnit ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , JMM ) ;
2433: LD_EXP 21
2437: PUSH
2438: LD_EXP 22
2442: ADD
2443: PUSH
2444: LD_EXP 26
2448: ADD
2449: PUSH
2450: LD_EXP 23
2454: ADD
2455: PPUSH
2456: LD_EXP 16
2460: PPUSH
2461: CALL_OW 115
// end ;
2465: END
// every 0 0$01 trigger meta_action do
2466: LD_EXP 10
2470: IFFALSE 2516
2472: GO 2474
2474: DISABLE
// begin active_road_patrol := false ;
2475: LD_ADDR_EXP 8
2479: PUSH
2480: LD_INT 0
2482: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , 93 , 1 ) ;
2483: LD_EXP 21
2487: PUSH
2488: LD_EXP 22
2492: ADD
2493: PUSH
2494: LD_EXP 26
2498: ADD
2499: PUSH
2500: LD_EXP 23
2504: ADD
2505: PPUSH
2506: LD_INT 93
2508: PPUSH
2509: LD_INT 1
2511: PPUSH
2512: CALL_OW 114
// end ;
2516: END
// every 0 0$1 trigger GetLives ( Pokryshkin ) < 1000 do
2517: LD_EXP 26
2521: PPUSH
2522: CALL_OW 256
2526: PUSH
2527: LD_INT 1000
2529: LESS
2530: IFFALSE 2581
2532: GO 2534
2534: DISABLE
// begin enable ;
2535: ENABLE
// if HexInfo ( 18 , 1 ) = Pokryshkin then
2536: LD_INT 18
2538: PPUSH
2539: LD_INT 1
2541: PPUSH
2542: CALL_OW 428
2546: PUSH
2547: LD_EXP 26
2551: EQUAL
2552: IFFALSE 2566
// begin RemoveUnit ( Pokryshkin ) ;
2554: LD_EXP 26
2558: PPUSH
2559: CALL_OW 64
// disable ;
2563: DISABLE
// end else
2564: GO 2581
// ComMoveXY ( Pokryshkin , 18 , 1 ) ;
2566: LD_EXP 26
2570: PPUSH
2571: LD_INT 18
2573: PPUSH
2574: LD_INT 1
2576: PPUSH
2577: CALL_OW 111
// end ;
2581: END
// every 0 0$20 trigger send_troops_to_forest do
2582: LD_EXP 14
2586: IFFALSE 2640
2588: GO 2590
2590: DISABLE
// begin if not IsOk ( russian_patrol_forest ) then
2591: LD_EXP 25
2595: PPUSH
2596: CALL_OW 302
2600: NOT
2601: IFFALSE 2605
// exit ;
2603: GO 2640
// ComAgressiveMove ( russian_troops_1 ^ Pokryshkin , GetRememberedX ( russian_patrol_forest ) , GetRememberedY ( russian_patrol_forest ) ) ;
2605: LD_EXP 21
2609: PUSH
2610: LD_EXP 26
2614: ADD
2615: PPUSH
2616: LD_EXP 25
2620: PPUSH
2621: CALL_OW 252
2625: PPUSH
2626: LD_EXP 25
2630: PPUSH
2631: CALL_OW 253
2635: PPUSH
2636: CALL_OW 114
// end ;
2640: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) = 3 then
2641: LD_VAR 0 1
2645: PPUSH
2646: CALL_OW 255
2650: PUSH
2651: LD_INT 3
2653: EQUAL
2654: IFFALSE 2697
// begin wait ( 11 ) ;
2656: LD_INT 11
2658: PPUSH
2659: CALL_OW 67
// ComEnterUnit ( driver , NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_depot ] ) , driver ) ) ;
2663: LD_VAR 0 1
2667: PPUSH
2668: LD_INT 30
2670: PUSH
2671: LD_INT 0
2673: PUSH
2674: EMPTY
2675: LIST
2676: LIST
2677: PPUSH
2678: CALL_OW 69
2682: PPUSH
2683: LD_VAR 0 1
2687: PPUSH
2688: CALL_OW 74
2692: PPUSH
2693: CALL_OW 120
// end ; end ; end_of_file
2697: PPOPN 4
2699: END
// export function Action ; var i ; begin
2700: LD_INT 0
2702: PPUSH
2703: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
2704: LD_ADDR_VAR 0 2
2708: PUSH
2709: LD_INT 22
2711: PUSH
2712: LD_INT 3
2714: PUSH
2715: EMPTY
2716: LIST
2717: LIST
2718: PUSH
2719: LD_INT 25
2721: PUSH
2722: LD_INT 1
2724: PUSH
2725: EMPTY
2726: LIST
2727: LIST
2728: PUSH
2729: EMPTY
2730: LIST
2731: LIST
2732: PPUSH
2733: CALL_OW 69
2737: PUSH
2738: FOR_IN
2739: IFFALSE 2752
// ComHold ( i ) ;
2741: LD_VAR 0 2
2745: PPUSH
2746: CALL_OW 140
2750: GO 2738
2752: POP
2753: POP
// InGameOn ;
2754: CALL_OW 8
// CenterOnXY ( 79 , 76 ) ;
2758: LD_INT 79
2760: PPUSH
2761: LD_INT 76
2763: PPUSH
2764: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
2768: LD_INT 10
2770: PPUSH
2771: CALL_OW 67
// PlaceUnitXY ( JMM , 80 , 79 , true ) ;
2775: LD_EXP 16
2779: PPUSH
2780: LD_INT 80
2782: PPUSH
2783: LD_INT 79
2785: PPUSH
2786: LD_INT 1
2788: PPUSH
2789: CALL_OW 48
// Wait ( 0 0$03 ) ;
2793: LD_INT 105
2795: PPUSH
2796: CALL_OW 67
// ComMoveXY ( JMM , 80 , 76 ) ;
2800: LD_EXP 16
2804: PPUSH
2805: LD_INT 80
2807: PPUSH
2808: LD_INT 76
2810: PPUSH
2811: CALL_OW 111
// Say ( JMM , D1-JMM-1 ) ;
2815: LD_EXP 16
2819: PPUSH
2820: LD_STRING D1-JMM-1
2822: PPUSH
2823: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2827: LD_INT 10
2829: PPUSH
2830: CALL_OW 67
// ComMoveXY ( JMM , 76 , 76 ) ;
2834: LD_EXP 16
2838: PPUSH
2839: LD_INT 76
2841: PPUSH
2842: LD_INT 76
2844: PPUSH
2845: CALL_OW 111
// Say ( JMM , D1-JMM-1a ) ;
2849: LD_EXP 16
2853: PPUSH
2854: LD_STRING D1-JMM-1a
2856: PPUSH
2857: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2861: LD_INT 10
2863: PPUSH
2864: CALL_OW 67
// ComTurnXY ( JMM , 83 , 66 ) ;
2868: LD_EXP 16
2872: PPUSH
2873: LD_INT 83
2875: PPUSH
2876: LD_INT 66
2878: PPUSH
2879: CALL_OW 118
// Say ( JMM , D1-JMM-1b ) ;
2883: LD_EXP 16
2887: PPUSH
2888: LD_STRING D1-JMM-1b
2890: PPUSH
2891: CALL_OW 88
// Wait ( 0 0$0.5 ) ;
2895: LD_INT 18
2897: PPUSH
2898: CALL_OW 67
// Say ( JMM , D1-JMM-1c ) ;
2902: LD_EXP 16
2906: PPUSH
2907: LD_STRING D1-JMM-1c
2909: PPUSH
2910: CALL_OW 88
// Wait ( 0 0$0.2 ) ;
2914: LD_INT 7
2916: PPUSH
2917: CALL_OW 67
// SayRadioNoFace ( Powell , D1-Pow-1 ) ;
2921: LD_EXP 19
2925: PPUSH
2926: LD_STRING D1-Pow-1
2928: PPUSH
2929: CALL_OW 586
// Say ( JMM , D1-JMM-2 ) ;
2933: LD_EXP 16
2937: PPUSH
2938: LD_STRING D1-JMM-2
2940: PPUSH
2941: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-2 ) ;
2945: LD_EXP 19
2949: PPUSH
2950: LD_STRING D1-Pow-2
2952: PPUSH
2953: CALL_OW 586
// Say ( JMM , D1-JMM-3 ) ;
2957: LD_EXP 16
2961: PPUSH
2962: LD_STRING D1-JMM-3
2964: PPUSH
2965: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-3 ) ;
2969: LD_EXP 19
2973: PPUSH
2974: LD_STRING D1-Pow-3
2976: PPUSH
2977: CALL_OW 586
// Say ( JMM , D1-JMM-4 ) ;
2981: LD_EXP 16
2985: PPUSH
2986: LD_STRING D1-JMM-4
2988: PPUSH
2989: CALL_OW 88
// ComFree ( JMM ) ;
2993: LD_EXP 16
2997: PPUSH
2998: CALL_OW 139
// Wait ( 0 0$0.3 ) ;
3002: LD_INT 10
3004: PPUSH
3005: CALL_OW 67
// InGameOff ;
3009: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
3013: LD_STRING M1
3015: PPUSH
3016: CALL_OW 337
// SaveForQuickRestart ;
3020: CALL_OW 22
// active_russian_dialog := true ;
3024: LD_ADDR_EXP 3
3028: PUSH
3029: LD_INT 1
3031: ST_TO_ADDR
// active_road_patrol := true ;
3032: LD_ADDR_EXP 8
3036: PUSH
3037: LD_INT 1
3039: ST_TO_ADDR
// if Difficulty < 3 then
3040: LD_OWVAR 67
3044: PUSH
3045: LD_INT 3
3047: LESS
3048: IFFALSE 3079
// begin PlaceUnitXY ( Bobby , 41 , 71 , false ) ;
3050: LD_EXP 17
3054: PPUSH
3055: LD_INT 41
3057: PPUSH
3058: LD_INT 71
3060: PPUSH
3061: LD_INT 0
3063: PPUSH
3064: CALL_OW 48
// ComHold ( Bobby ) ;
3068: LD_EXP 17
3072: PPUSH
3073: CALL_OW 140
// end else
3077: GO 3127
// begin SetDir ( Bobby , 5 ) ;
3079: LD_EXP 17
3083: PPUSH
3084: LD_INT 5
3086: PPUSH
3087: CALL_OW 233
// PlaceUnitXY ( Bobby , 105 , 98 , false ) ;
3091: LD_EXP 17
3095: PPUSH
3096: LD_INT 105
3098: PPUSH
3099: LD_INT 98
3101: PPUSH
3102: LD_INT 0
3104: PPUSH
3105: CALL_OW 48
// ComCrawl ( Bobby ) ;
3109: LD_EXP 17
3113: PPUSH
3114: CALL_OW 137
// AddComHold ( Bobby ) ;
3118: LD_EXP 17
3122: PPUSH
3123: CALL_OW 200
// end ; PlaceUnitXY ( Cyrus , 90 , 42 , false ) ;
3127: LD_EXP 18
3131: PPUSH
3132: LD_INT 90
3134: PPUSH
3135: LD_INT 42
3137: PPUSH
3138: LD_INT 0
3140: PPUSH
3141: CALL_OW 48
// ComMoveXY ( Cyrus , 79 , 34 ) ;
3145: LD_EXP 18
3149: PPUSH
3150: LD_INT 79
3152: PPUSH
3153: LD_INT 34
3155: PPUSH
3156: CALL_OW 111
// AddComCrawl ( Cyrus ) ;
3160: LD_EXP 18
3164: PPUSH
3165: CALL_OW 197
// end ;
3169: LD_VAR 0 1
3173: RET
// every 0 0$01 trigger active_russian_dialog do var wait_points ;
3174: LD_EXP 3
3178: IFFALSE 3772
3180: GO 3182
3182: DISABLE
3183: LD_INT 0
3185: PPUSH
// begin wait_points := 0 ;
3186: LD_ADDR_VAR 0 1
3190: PUSH
3191: LD_INT 0
3193: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
3194: LD_INT 70
3196: PPUSH
3197: CALL_OW 67
// ComAgressiveMove ( russian_troops_1 , 79 , 83 ) ;
3201: LD_EXP 21
3205: PPUSH
3206: LD_INT 79
3208: PPUSH
3209: LD_INT 83
3211: PPUSH
3212: CALL_OW 114
// Say ( russian_troops_1 [ 2 ] , D1R-Rus1-1 ) ;
3216: LD_EXP 21
3220: PUSH
3221: LD_INT 2
3223: ARRAY
3224: PPUSH
3225: LD_STRING D1R-Rus1-1
3227: PPUSH
3228: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1R-Rus2-1 ) ;
3232: LD_EXP 21
3236: PUSH
3237: LD_INT 1
3239: ARRAY
3240: PPUSH
3241: LD_STRING D1R-Rus2-1
3243: PPUSH
3244: CALL_OW 88
// ComAgressiveMove ( russian_troops_2 , 91 , 80 ) ;
3248: LD_EXP 22
3252: PPUSH
3253: LD_INT 91
3255: PPUSH
3256: LD_INT 80
3258: PPUSH
3259: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
3263: LD_INT 35
3265: PPUSH
3266: CALL_OW 67
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 79 , 82 ) < 6 ;
3270: LD_EXP 21
3274: PUSH
3275: LD_INT 1
3277: ARRAY
3278: PPUSH
3279: LD_INT 79
3281: PPUSH
3282: LD_INT 82
3284: PPUSH
3285: CALL_OW 297
3289: PUSH
3290: LD_INT 6
3292: LESS
3293: IFFALSE 3263
// if not IsInArea ( JMM , jmm_spot ) then
3295: LD_EXP 16
3299: PPUSH
3300: LD_INT 5
3302: PPUSH
3303: CALL_OW 308
3307: NOT
3308: IFFALSE 3328
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1 ) else
3310: LD_EXP 21
3314: PUSH
3315: LD_INT 1
3317: ARRAY
3318: PPUSH
3319: LD_STRING D1Ra-Rus2-1
3321: PPUSH
3322: CALL_OW 88
3326: GO 3395
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3328: LD_EXP 21
3332: PUSH
3333: LD_INT 2
3335: ARRAY
3336: PPUSH
3337: LD_STRING D1Rb-Rus1-1
3339: PPUSH
3340: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Rb-Rus2-1 ) ;
3344: LD_EXP 21
3348: PUSH
3349: LD_INT 1
3351: ARRAY
3352: PPUSH
3353: LD_STRING D1Rb-Rus2-1
3355: PPUSH
3356: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 , GetX ( JMM ) , GetY ( JMM ) ) ;
3360: LD_EXP 21
3364: PUSH
3365: LD_EXP 22
3369: ADD
3370: PPUSH
3371: LD_EXP 16
3375: PPUSH
3376: CALL_OW 250
3380: PPUSH
3381: LD_EXP 16
3385: PPUSH
3386: CALL_OW 251
3390: PPUSH
3391: CALL_OW 114
// end ; wait_points := 10 ;
3395: LD_ADDR_VAR 0 1
3399: PUSH
3400: LD_INT 10
3402: ST_TO_ADDR
// if Difficulty > 1 then
3403: LD_OWVAR 67
3407: PUSH
3408: LD_INT 1
3410: GREATER
3411: IFFALSE 3493
// begin ComAgressiveMove ( russian_troops_1 , 78 , 95 ) ;
3413: LD_EXP 21
3417: PPUSH
3418: LD_INT 78
3420: PPUSH
3421: LD_INT 95
3423: PPUSH
3424: CALL_OW 114
// AddComWait ( russian_troops_1 , 0 0$05 ) ;
3428: LD_EXP 21
3432: PPUSH
3433: LD_INT 175
3435: PPUSH
3436: CALL_OW 202
// wait_points := wait_points + 15 ;
3440: LD_ADDR_VAR 0 1
3444: PUSH
3445: LD_VAR 0 1
3449: PUSH
3450: LD_INT 15
3452: PLUS
3453: ST_TO_ADDR
// if Difficulty > 2 then
3454: LD_OWVAR 67
3458: PUSH
3459: LD_INT 2
3461: GREATER
3462: IFFALSE 3493
// begin AddComAgressiveMove ( russian_troops_1 , 65 , 79 ) ;
3464: LD_EXP 21
3468: PPUSH
3469: LD_INT 65
3471: PPUSH
3472: LD_INT 79
3474: PPUSH
3475: CALL_OW 174
// wait_points := wait_points + 5 ;
3479: LD_ADDR_VAR 0 1
3483: PUSH
3484: LD_VAR 0 1
3488: PUSH
3489: LD_INT 5
3491: PLUS
3492: ST_TO_ADDR
// end ; end ; repeat wait ( 0 0$01 ) ;
3493: LD_INT 35
3495: PPUSH
3496: CALL_OW 67
// wait_points := wait_points - 1 ;
3500: LD_ADDR_VAR 0 1
3504: PUSH
3505: LD_VAR 0 1
3509: PUSH
3510: LD_INT 1
3512: MINUS
3513: ST_TO_ADDR
// if See ( 3 , JMM ) then
3514: LD_INT 3
3516: PPUSH
3517: LD_EXP 16
3521: PPUSH
3522: CALL_OW 292
3526: IFFALSE 3580
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3528: LD_EXP 21
3532: PUSH
3533: LD_INT 2
3535: ARRAY
3536: PPUSH
3537: LD_STRING D1Rb-Rus1-1
3539: PPUSH
3540: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3544: LD_EXP 21
3548: PPUSH
3549: LD_EXP 16
3553: PPUSH
3554: CALL_OW 250
3558: PPUSH
3559: LD_EXP 16
3563: PPUSH
3564: CALL_OW 251
3568: PPUSH
3569: CALL_OW 114
// Wait ( 0 0$03 ) ;
3573: LD_INT 105
3575: PPUSH
3576: CALL_OW 67
// end ; until wait_points = 0 ;
3580: LD_VAR 0 1
3584: PUSH
3585: LD_INT 0
3587: EQUAL
3588: IFFALSE 3493
// Say ( russian_troops_1 [ 2 ] , D1Rc-Rus1-1 ) ;
3590: LD_EXP 21
3594: PUSH
3595: LD_INT 2
3597: ARRAY
3598: PPUSH
3599: LD_STRING D1Rc-Rus1-1
3601: PPUSH
3602: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1a ) ;
3606: LD_EXP 21
3610: PUSH
3611: LD_INT 1
3613: ARRAY
3614: PPUSH
3615: LD_STRING D1Ra-Rus2-1a
3617: PPUSH
3618: CALL_OW 88
// active_powell_dialog := true ;
3622: LD_ADDR_EXP 15
3626: PUSH
3627: LD_INT 1
3629: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3630: LD_EXP 21
3634: PPUSH
3635: LD_INT 45
3637: PPUSH
3638: LD_INT 5
3640: PPUSH
3641: CALL_OW 114
// ComEnterUnit ( russian_troops_2 , rbar1 ) ;
3645: LD_EXP 22
3649: PPUSH
3650: LD_INT 26
3652: PPUSH
3653: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
3657: LD_INT 35
3659: PPUSH
3660: CALL_OW 67
// if See ( 3 , JMM ) then
3664: LD_INT 3
3666: PPUSH
3667: LD_EXP 16
3671: PPUSH
3672: CALL_OW 292
3676: IFFALSE 3732
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3678: LD_EXP 21
3682: PUSH
3683: LD_INT 2
3685: ARRAY
3686: PPUSH
3687: LD_STRING D1Rb-Rus1-1
3689: PPUSH
3690: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3694: LD_EXP 21
3698: PPUSH
3699: LD_EXP 16
3703: PPUSH
3704: CALL_OW 250
3708: PPUSH
3709: LD_EXP 16
3713: PPUSH
3714: CALL_OW 251
3718: PPUSH
3719: CALL_OW 114
// Wait ( 0 0$50 ) ;
3723: LD_INT 1750
3725: PPUSH
3726: CALL_OW 67
// end else
3730: GO 3747
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3732: LD_EXP 21
3736: PPUSH
3737: LD_INT 45
3739: PPUSH
3740: LD_INT 5
3742: PPUSH
3743: CALL_OW 114
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 45 , 5 ) < 10 ;
3747: LD_EXP 21
3751: PUSH
3752: LD_INT 1
3754: ARRAY
3755: PPUSH
3756: LD_INT 45
3758: PPUSH
3759: LD_INT 5
3761: PPUSH
3762: CALL_OW 297
3766: PUSH
3767: LD_INT 10
3769: LESS
3770: IFFALSE 3657
// end ;
3772: PPOPN 1
3774: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 6 ] ] ) and Difficulty = 1 do
3775: LD_INT 22
3777: PUSH
3778: LD_INT 3
3780: PUSH
3781: EMPTY
3782: LIST
3783: LIST
3784: PUSH
3785: LD_INT 92
3787: PUSH
3788: LD_INT 80
3790: PUSH
3791: LD_INT 83
3793: PUSH
3794: LD_INT 6
3796: PUSH
3797: EMPTY
3798: LIST
3799: LIST
3800: LIST
3801: LIST
3802: PUSH
3803: EMPTY
3804: LIST
3805: LIST
3806: PPUSH
3807: CALL_OW 69
3811: PUSH
3812: LD_OWVAR 67
3816: PUSH
3817: LD_INT 1
3819: EQUAL
3820: AND
3821: IFFALSE 3902
3823: GO 3825
3825: DISABLE
// begin PlaceSeeing ( 80 , 83 , 1 , - 7 ) ;
3826: LD_INT 80
3828: PPUSH
3829: LD_INT 83
3831: PPUSH
3832: LD_INT 1
3834: PPUSH
3835: LD_INT 7
3837: NEG
3838: PPUSH
3839: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
3843: LD_INT 35
3845: PPUSH
3846: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 10 ] ] ) ;
3850: LD_INT 22
3852: PUSH
3853: LD_INT 3
3855: PUSH
3856: EMPTY
3857: LIST
3858: LIST
3859: PUSH
3860: LD_INT 92
3862: PUSH
3863: LD_INT 80
3865: PUSH
3866: LD_INT 83
3868: PUSH
3869: LD_INT 10
3871: PUSH
3872: EMPTY
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: PUSH
3878: EMPTY
3879: LIST
3880: LIST
3881: PPUSH
3882: CALL_OW 69
3886: NOT
3887: IFFALSE 3843
// RemoveSeeing ( 80 , 83 , 1 ) ;
3889: LD_INT 80
3891: PPUSH
3892: LD_INT 83
3894: PPUSH
3895: LD_INT 1
3897: PPUSH
3898: CALL_OW 331
// end ;
3902: END
// every 0 0$02 trigger GetDistUnits ( JMM , Bobby ) < 6 and IsOk ( Bobby ) do
3903: LD_EXP 16
3907: PPUSH
3908: LD_EXP 17
3912: PPUSH
3913: CALL_OW 296
3917: PUSH
3918: LD_INT 6
3920: LESS
3921: PUSH
3922: LD_EXP 17
3926: PPUSH
3927: CALL_OW 302
3931: AND
3932: IFFALSE 4391
3934: GO 3936
3936: DISABLE
// begin ComWalk ( Bobby ) ;
3937: LD_EXP 17
3941: PPUSH
3942: CALL_OW 138
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
3946: LD_EXP 17
3950: PPUSH
3951: LD_EXP 16
3955: PPUSH
3956: CALL_OW 250
3960: PPUSH
3961: LD_EXP 16
3965: PPUSH
3966: CALL_OW 251
3970: PPUSH
3971: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
3975: LD_INT 35
3977: PPUSH
3978: CALL_OW 67
// until See ( 4 , JMM ) ;
3982: LD_INT 4
3984: PPUSH
3985: LD_EXP 16
3989: PPUSH
3990: CALL_OW 292
3994: IFFALSE 3975
// InGameOn ;
3996: CALL_OW 8
// ComTurnUnit ( JMM , Bobby ) ;
4000: LD_EXP 16
4004: PPUSH
4005: LD_EXP 17
4009: PPUSH
4010: CALL_OW 119
// if cyrus_in_squad and IsOk ( Cyrus ) and GetDistUnits ( JMM , Cyrus ) < 10 then
4014: LD_EXP 7
4018: PUSH
4019: LD_EXP 18
4023: PPUSH
4024: CALL_OW 302
4028: AND
4029: PUSH
4030: LD_EXP 16
4034: PPUSH
4035: LD_EXP 18
4039: PPUSH
4040: CALL_OW 296
4044: PUSH
4045: LD_INT 10
4047: LESS
4048: AND
4049: IFFALSE 4094
// begin ComMoveXY ( Cyrus , GetX ( JMM ) , GetY ( JMM ) ) ;
4051: LD_EXP 18
4055: PPUSH
4056: LD_EXP 16
4060: PPUSH
4061: CALL_OW 250
4065: PPUSH
4066: LD_EXP 16
4070: PPUSH
4071: CALL_OW 251
4075: PPUSH
4076: CALL_OW 111
// AddComTurnUnit ( Cyrus , Bobby ) ;
4080: LD_EXP 18
4084: PPUSH
4085: LD_EXP 17
4089: PPUSH
4090: CALL_OW 179
// end ; Say ( JMM , D2-JMM-1 ) ;
4094: LD_EXP 16
4098: PPUSH
4099: LD_STRING D2-JMM-1
4101: PPUSH
4102: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
4106: LD_INT 10
4108: PPUSH
4109: CALL_OW 67
// ComTurnUnit ( Bobby , JMM ) ;
4113: LD_EXP 17
4117: PPUSH
4118: LD_EXP 16
4122: PPUSH
4123: CALL_OW 119
// Say ( Bobby , D2-Bobby-1 ) ;
4127: LD_EXP 17
4131: PPUSH
4132: LD_STRING D2-Bobby-1
4134: PPUSH
4135: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
4139: LD_EXP 16
4143: PPUSH
4144: LD_STRING D2-JMM-2
4146: PPUSH
4147: CALL_OW 88
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4151: LD_EXP 17
4155: PPUSH
4156: LD_EXP 16
4160: PPUSH
4161: CALL_OW 250
4165: PPUSH
4166: LD_EXP 16
4170: PPUSH
4171: CALL_OW 251
4175: PPUSH
4176: CALL_OW 111
// Say ( Bobby , D2-Bobby-2 ) ;
4180: LD_EXP 17
4184: PPUSH
4185: LD_STRING D2-Bobby-2
4187: PPUSH
4188: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
4192: LD_EXP 16
4196: PPUSH
4197: LD_STRING D2-JMM-3
4199: PPUSH
4200: CALL_OW 88
// ComTurnUnit ( Bobby , JMM ) ;
4204: LD_EXP 17
4208: PPUSH
4209: LD_EXP 16
4213: PPUSH
4214: CALL_OW 119
// DialogueOn ;
4218: CALL_OW 6
// Say ( Bobby , D2-Bobby-3 ) ;
4222: LD_EXP 17
4226: PPUSH
4227: LD_STRING D2-Bobby-3
4229: PPUSH
4230: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
4234: LD_EXP 16
4238: PPUSH
4239: LD_STRING D2-JMM-4
4241: PPUSH
4242: CALL_OW 88
// Say ( Bobby , D2-Bobby-4 ) ;
4246: LD_EXP 17
4250: PPUSH
4251: LD_STRING D2-Bobby-4
4253: PPUSH
4254: CALL_OW 88
// Say ( JMM , D2-JMM-5 ) ;
4258: LD_EXP 16
4262: PPUSH
4263: LD_STRING D2-JMM-5
4265: PPUSH
4266: CALL_OW 88
// Say ( Bobby , D2-Bobby-5 ) ;
4270: LD_EXP 17
4274: PPUSH
4275: LD_STRING D2-Bobby-5
4277: PPUSH
4278: CALL_OW 88
// Say ( JMM , D2-JMM-6 ) ;
4282: LD_EXP 16
4286: PPUSH
4287: LD_STRING D2-JMM-6
4289: PPUSH
4290: CALL_OW 88
// if not powell_contact then
4294: LD_EXP 5
4298: NOT
4299: IFFALSE 4325
// begin Say ( Bobby , D2-Bobby-6 ) ;
4301: LD_EXP 17
4305: PPUSH
4306: LD_STRING D2-Bobby-6
4308: PPUSH
4309: CALL_OW 88
// Say ( JMM , D2-JMM-7 ) ;
4313: LD_EXP 16
4317: PPUSH
4318: LD_STRING D2-JMM-7
4320: PPUSH
4321: CALL_OW 88
// end ; DialogueOff ;
4325: CALL_OW 7
// InGameOff ;
4329: CALL_OW 9
// SetSide ( Bobby , 1 ) ;
4333: LD_EXP 17
4337: PPUSH
4338: LD_INT 1
4340: PPUSH
4341: CALL_OW 235
// ComFree ( [ JMM , Bobby ] ) ;
4345: LD_EXP 16
4349: PUSH
4350: LD_EXP 17
4354: PUSH
4355: EMPTY
4356: LIST
4357: LIST
4358: PPUSH
4359: CALL_OW 139
// bobby_in_squad := true ;
4363: LD_ADDR_EXP 4
4367: PUSH
4368: LD_INT 1
4370: ST_TO_ADDR
// if powell_contact and not cyrus_in_squad then
4371: LD_EXP 5
4375: PUSH
4376: LD_EXP 7
4380: NOT
4381: AND
4382: IFFALSE 4391
// ChangeMissionObjectives ( M2b ) ;
4384: LD_STRING M2b
4386: PPUSH
4387: CALL_OW 337
// end ;
4391: END
// every 0 0$10 trigger active_russian_dialog and Difficulty < 3 do
4392: LD_EXP 3
4396: PUSH
4397: LD_OWVAR 67
4401: PUSH
4402: LD_INT 3
4404: LESS
4405: AND
4406: IFFALSE 4440
4408: GO 4410
4410: DISABLE
// begin wait ( 1 1$00 ) ;
4411: LD_INT 2100
4413: PPUSH
4414: CALL_OW 67
// if not bobby_in_squad then
4418: LD_EXP 4
4422: NOT
4423: IFFALSE 4440
// ComMoveXY ( Bobby , 75 , 83 ) ;
4425: LD_EXP 17
4429: PPUSH
4430: LD_INT 75
4432: PPUSH
4433: LD_INT 83
4435: PPUSH
4436: CALL_OW 111
// end ;
4440: END
// every 0 0$10 trigger cyrus_in_squad and not bobby_in_squad do
4441: LD_EXP 7
4445: PUSH
4446: LD_EXP 4
4450: NOT
4451: AND
4452: IFFALSE 4481
4454: GO 4456
4456: DISABLE
// begin ComMoveXY ( Bobby , 105 , 97 ) ;
4457: LD_EXP 17
4461: PPUSH
4462: LD_INT 105
4464: PPUSH
4465: LD_INT 97
4467: PPUSH
4468: CALL_OW 111
// AddComCrawl ( Bobby ) ;
4472: LD_EXP 17
4476: PPUSH
4477: CALL_OW 197
// end ;
4481: END
// every 0 0$01 trigger IsInArea ( JMM , obstacle_area ) and GetDistUnits ( JMM , Bobby ) < 7 and bobby_in_squad do
4482: LD_EXP 16
4486: PPUSH
4487: LD_INT 6
4489: PPUSH
4490: CALL_OW 308
4494: PUSH
4495: LD_EXP 16
4499: PPUSH
4500: LD_EXP 17
4504: PPUSH
4505: CALL_OW 296
4509: PUSH
4510: LD_INT 7
4512: LESS
4513: AND
4514: PUSH
4515: LD_EXP 4
4519: AND
4520: IFFALSE 4567
4522: GO 4524
4524: DISABLE
// begin ComHold ( [ JMM , Bobby ] ) ;
4525: LD_EXP 16
4529: PUSH
4530: LD_EXP 17
4534: PUSH
4535: EMPTY
4536: LIST
4537: LIST
4538: PPUSH
4539: CALL_OW 140
// Say ( JMM , D2a-JMM-1 ) ;
4543: LD_EXP 16
4547: PPUSH
4548: LD_STRING D2a-JMM-1
4550: PPUSH
4551: CALL_OW 88
// Say ( Bobby , D2a-Bobby-1 ) ;
4555: LD_EXP 17
4559: PPUSH
4560: LD_STRING D2a-Bobby-1
4562: PPUSH
4563: CALL_OW 88
// end ;
4567: END
// every 0 0$50 trigger active_powell_dialog and not See ( 3 , JMM ) do
4568: LD_EXP 15
4572: PUSH
4573: LD_INT 3
4575: PPUSH
4576: LD_EXP 16
4580: PPUSH
4581: CALL_OW 292
4585: NOT
4586: AND
4587: IFFALSE 4758
4589: GO 4591
4591: DISABLE
// begin wait ( 0 0$5 ) ;
4592: LD_INT 175
4594: PPUSH
4595: CALL_OW 67
// InGameOn ;
4599: CALL_OW 8
// DialogueOn ;
4603: CALL_OW 6
// SayRadioNoFace ( Powell , D3-Pow-1 ) ;
4607: LD_EXP 19
4611: PPUSH
4612: LD_STRING D3-Pow-1
4614: PPUSH
4615: CALL_OW 586
// Say ( JMM , D3-JMM-1 ) ;
4619: LD_EXP 16
4623: PPUSH
4624: LD_STRING D3-JMM-1
4626: PPUSH
4627: CALL_OW 88
// SayRadioNoFace ( Powell , D3-Pow-2 ) ;
4631: LD_EXP 19
4635: PPUSH
4636: LD_STRING D3-Pow-2
4638: PPUSH
4639: CALL_OW 586
// Say ( JMM , D3-JMM-2 ) ;
4643: LD_EXP 16
4647: PPUSH
4648: LD_STRING D3-JMM-2
4650: PPUSH
4651: CALL_OW 88
// SayRadioNoFace ( Powell , D3-Pow-3 ) ;
4655: LD_EXP 19
4659: PPUSH
4660: LD_STRING D3-Pow-3
4662: PPUSH
4663: CALL_OW 586
// DialogueOff ;
4667: CALL_OW 7
// InGameOff ;
4671: CALL_OW 9
// powell_contact := true ;
4675: LD_ADDR_EXP 5
4679: PUSH
4680: LD_INT 1
4682: ST_TO_ADDR
// SetAreaMapShow ( exitArea , 1 ) ;
4683: LD_INT 10
4685: PPUSH
4686: LD_INT 1
4688: PPUSH
4689: CALL_OW 424
// uc_side := 4 ;
4693: LD_ADDR_OWVAR 20
4697: PUSH
4698: LD_INT 4
4700: ST_TO_ADDR
// uc_nation := 1 ;
4701: LD_ADDR_OWVAR 21
4705: PUSH
4706: LD_INT 1
4708: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
4709: LD_ADDR_EXP 19
4713: PUSH
4714: LD_STRING Powell
4716: PPUSH
4717: LD_INT 0
4719: PPUSH
4720: LD_STRING 
4722: PPUSH
4723: CALL 23812 0 3
4727: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
4728: LD_STRING M2
4730: PPUSH
4731: CALL_OW 337
// if not bobby_in_squad then
4735: LD_EXP 4
4739: NOT
4740: IFFALSE 4751
// ChangeMissionObjectives ( M2a ) else
4742: LD_STRING M2a
4744: PPUSH
4745: CALL_OW 337
4749: GO 4758
// ChangeMissionObjectives ( M2b ) ;
4751: LD_STRING M2b
4753: PPUSH
4754: CALL_OW 337
// end ;
4758: END
// every 0 0$01 trigger IsInArea ( JMM , fakeArea ) do
4759: LD_EXP 16
4763: PPUSH
4764: LD_INT 7
4766: PPUSH
4767: CALL_OW 308
4771: IFFALSE 4906
4773: GO 4775
4775: DISABLE
// begin DialogueOn ;
4776: CALL_OW 6
// SayRadioNoFace ( fakePokryshkin , D4-Rus3-1 ) ;
4780: LD_EXP 20
4784: PPUSH
4785: LD_STRING D4-Rus3-1
4787: PPUSH
4788: CALL_OW 586
// DialogueOff ;
4792: CALL_OW 7
// ChangeMissionObjectives ( M3a ) ;
4796: LD_STRING M3a
4798: PPUSH
4799: CALL_OW 337
// SetAreaMapShow ( fakeEnd , 1 ) ;
4803: LD_INT 11
4805: PPUSH
4806: LD_INT 1
4808: PPUSH
4809: CALL_OW 424
// Wait ( 0 0$02 ) ;
4813: LD_INT 70
4815: PPUSH
4816: CALL_OW 67
// DialogueOn ;
4820: CALL_OW 6
// SayRadioNoFace ( Powell , D4-Pow-1 ) ;
4824: LD_EXP 19
4828: PPUSH
4829: LD_STRING D4-Pow-1
4831: PPUSH
4832: CALL_OW 586
// DialogueOff ;
4836: CALL_OW 7
// ChangeMissionObjectives ( M3b ) ;
4840: LD_STRING M3b
4842: PPUSH
4843: CALL_OW 337
// case Query ( Q1 ) of 1 :
4847: LD_STRING Q1
4849: PPUSH
4850: CALL_OW 97
4854: PUSH
4855: LD_INT 1
4857: DOUBLE
4858: EQUAL
4859: IFTRUE 4863
4861: GO 4894
4863: POP
// begin macmilan_use_radio := true ;
4864: LD_ADDR_EXP 6
4868: PUSH
4869: LD_INT 1
4871: ST_TO_ADDR
// DialogueOn ;
4872: CALL_OW 6
// Say ( JMM , D4a-JMM-1 ) ;
4876: LD_EXP 16
4880: PPUSH
4881: LD_STRING D4a-JMM-1
4883: PPUSH
4884: CALL_OW 88
// DialogueOff ;
4888: CALL_OW 7
// end ; 2 :
4892: GO 4906
4894: LD_INT 2
4896: DOUBLE
4897: EQUAL
4898: IFTRUE 4902
4900: GO 4905
4902: POP
// ; end ;
4903: GO 4906
4905: POP
// end ;
4906: END
// every 0 0$02 trigger GetDistUnits ( JMM , Cyrus ) < 8 and IsOk ( Cyrus ) do
4907: LD_EXP 16
4911: PPUSH
4912: LD_EXP 18
4916: PPUSH
4917: CALL_OW 296
4921: PUSH
4922: LD_INT 8
4924: LESS
4925: PUSH
4926: LD_EXP 18
4930: PPUSH
4931: CALL_OW 302
4935: AND
4936: IFFALSE 5227
4938: GO 4940
4940: DISABLE
// begin InGameOn ;
4941: CALL_OW 8
// ComMoveXY ( JMM , GetX ( Cyrus ) , GetY ( Cyrus ) ) ;
4945: LD_EXP 16
4949: PPUSH
4950: LD_EXP 18
4954: PPUSH
4955: CALL_OW 250
4959: PPUSH
4960: LD_EXP 18
4964: PPUSH
4965: CALL_OW 251
4969: PPUSH
4970: CALL_OW 111
// if IsOk ( Bobby ) and bobby_in_squad then
4974: LD_EXP 17
4978: PPUSH
4979: CALL_OW 302
4983: PUSH
4984: LD_EXP 4
4988: AND
4989: IFFALSE 5020
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4991: LD_EXP 17
4995: PPUSH
4996: LD_EXP 16
5000: PPUSH
5001: CALL_OW 250
5005: PPUSH
5006: LD_EXP 16
5010: PPUSH
5011: CALL_OW 251
5015: PPUSH
5016: CALL_OW 111
// Say ( JMM , D5-JMM-1 ) ;
5020: LD_EXP 16
5024: PPUSH
5025: LD_STRING D5-JMM-1
5027: PPUSH
5028: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
5032: LD_INT 10
5034: PPUSH
5035: CALL_OW 67
// ComTurnUnit ( JMM , Cyrus ) ;
5039: LD_EXP 16
5043: PPUSH
5044: LD_EXP 18
5048: PPUSH
5049: CALL_OW 119
// ComWalk ( Cyrus ) ;
5053: LD_EXP 18
5057: PPUSH
5058: CALL_OW 138
// ComTurnUnit ( Cyrus , JMM ) ;
5062: LD_EXP 18
5066: PPUSH
5067: LD_EXP 16
5071: PPUSH
5072: CALL_OW 119
// Say ( Cyrus , D5-Cyrus-1 ) ;
5076: LD_EXP 18
5080: PPUSH
5081: LD_STRING D5-Cyrus-1
5083: PPUSH
5084: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5088: LD_EXP 17
5092: PPUSH
5093: CALL_OW 302
5097: PUSH
5098: LD_EXP 4
5102: AND
5103: IFFALSE 5143
// begin ComTurnUnit ( Bobby , Cyrus ) ;
5105: LD_EXP 17
5109: PPUSH
5110: LD_EXP 18
5114: PPUSH
5115: CALL_OW 119
// Say ( Bobby , D5-Bobby-1 ) ;
5119: LD_EXP 17
5123: PPUSH
5124: LD_STRING D5-Bobby-1
5126: PPUSH
5127: CALL_OW 88
// Say ( JMM , D5-JMM-2 ) ;
5131: LD_EXP 16
5135: PPUSH
5136: LD_STRING D5-JMM-2
5138: PPUSH
5139: CALL_OW 88
// end ; InGameOff ;
5143: CALL_OW 9
// cyrus_in_squad := true ;
5147: LD_ADDR_EXP 7
5151: PUSH
5152: LD_INT 1
5154: ST_TO_ADDR
// SetSide ( Cyrus , 1 ) ;
5155: LD_EXP 18
5159: PPUSH
5160: LD_INT 1
5162: PPUSH
5163: CALL_OW 235
// if powell_contact and not bobby_in_squad then
5167: LD_EXP 5
5171: PUSH
5172: LD_EXP 4
5176: NOT
5177: AND
5178: IFFALSE 5187
// ChangeMissionObjectives ( M2b ) ;
5180: LD_STRING M2b
5182: PPUSH
5183: CALL_OW 337
// if not bobby_in_squad and GetSide ( Bobby ) = 4 and IsOk ( Bobby ) then
5187: LD_EXP 4
5191: NOT
5192: PUSH
5193: LD_EXP 17
5197: PPUSH
5198: CALL_OW 255
5202: PUSH
5203: LD_INT 4
5205: EQUAL
5206: AND
5207: PUSH
5208: LD_EXP 17
5212: PPUSH
5213: CALL_OW 302
5217: AND
5218: IFFALSE 5227
// SetAchievement ( ACH_CYRUS ) ;
5220: LD_STRING ACH_CYRUS
5222: PPUSH
5223: CALL_OW 543
// end ;
5227: END
// every 0 0$01 trigger bobby_in_squad and cyrus_in_squad do
5228: LD_EXP 4
5232: PUSH
5233: LD_EXP 7
5237: AND
5238: IFFALSE 5250
5240: GO 5242
5242: DISABLE
// ChangeMissionObjectives ( M2c ) ;
5243: LD_STRING M2c
5245: PPUSH
5246: CALL_OW 337
5250: END
// every 0 0$01 trigger IsInArea ( JMM , trap ) do
5251: LD_EXP 16
5255: PPUSH
5256: LD_INT 8
5258: PPUSH
5259: CALL_OW 308
5263: IFFALSE 5315
5265: GO 5267
5267: DISABLE
// begin macmilan_in_trap := true ;
5268: LD_ADDR_EXP 9
5272: PUSH
5273: LD_INT 1
5275: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
5276: LD_INT 35
5278: PPUSH
5279: CALL_OW 67
// DialogueOn ;
5283: CALL_OW 6
// Say ( Pokryshkin , D5-Pok-1 ) ;
5287: LD_EXP 26
5291: PPUSH
5292: LD_STRING D5-Pok-1
5294: PPUSH
5295: CALL_OW 88
// DialogueOff ;
5299: CALL_OW 7
// Say ( JMM , D4b-JMM-1 ) ;
5303: LD_EXP 16
5307: PPUSH
5308: LD_STRING D4b-JMM-1
5310: PPUSH
5311: CALL_OW 88
// end ;
5315: END
// every 0 0$01 trigger GetDistUnits ( JMM , russian_meta_guards [ russian_meta_guards ] ) < 12 or UnitFilter ( russian_meta_guards , [ f_not , [ f_lives , 990 ] ] ) do var i , hp ;
5316: LD_EXP 16
5320: PPUSH
5321: LD_EXP 24
5325: PUSH
5326: LD_EXP 24
5330: ARRAY
5331: PPUSH
5332: CALL_OW 296
5336: PUSH
5337: LD_INT 12
5339: LESS
5340: PUSH
5341: LD_EXP 24
5345: PPUSH
5346: LD_INT 3
5348: PUSH
5349: LD_INT 24
5351: PUSH
5352: LD_INT 990
5354: PUSH
5355: EMPTY
5356: LIST
5357: LIST
5358: PUSH
5359: EMPTY
5360: LIST
5361: LIST
5362: PPUSH
5363: CALL_OW 72
5367: OR
5368: IFFALSE 5606
5370: GO 5372
5372: DISABLE
5373: LD_INT 0
5375: PPUSH
5376: PPUSH
// begin hp := [ 300 , 250 , 200 , 150 ] [ Difficulty ] ;
5377: LD_ADDR_VAR 0 2
5381: PUSH
5382: LD_INT 300
5384: PUSH
5385: LD_INT 250
5387: PUSH
5388: LD_INT 200
5390: PUSH
5391: LD_INT 150
5393: PUSH
5394: EMPTY
5395: LIST
5396: LIST
5397: LIST
5398: LIST
5399: PUSH
5400: LD_OWVAR 67
5404: ARRAY
5405: ST_TO_ADDR
// for i in russian_meta_guards do
5406: LD_ADDR_VAR 0 1
5410: PUSH
5411: LD_EXP 24
5415: PUSH
5416: FOR_IN
5417: IFFALSE 5457
// if IsOk ( i ) then
5419: LD_VAR 0 1
5423: PPUSH
5424: CALL_OW 302
5428: IFFALSE 5455
// SetLives ( i , GetLives ( i ) - hp ) ;
5430: LD_VAR 0 1
5434: PPUSH
5435: LD_VAR 0 1
5439: PPUSH
5440: CALL_OW 256
5444: PUSH
5445: LD_VAR 0 2
5449: MINUS
5450: PPUSH
5451: CALL_OW 234
5455: GO 5416
5457: POP
5458: POP
// DialogueOn ;
5459: CALL_OW 6
// Say ( russian_meta_guards [ russian_meta_guards ] , D6-FRus1-1 ) ;
5463: LD_EXP 24
5467: PUSH
5468: LD_EXP 24
5472: ARRAY
5473: PPUSH
5474: LD_STRING D6-FRus1-1
5476: PPUSH
5477: CALL_OW 88
// Say ( JMM , D6-JMM-1 ) ;
5481: LD_EXP 16
5485: PPUSH
5486: LD_STRING D6-JMM-1
5488: PPUSH
5489: CALL_OW 88
// if IsOk ( Cyrus ) and cyrus_in_squad then
5493: LD_EXP 18
5497: PPUSH
5498: CALL_OW 302
5502: PUSH
5503: LD_EXP 7
5507: AND
5508: IFFALSE 5522
// Say ( Cyrus , D6-Cyrus-1 ) ;
5510: LD_EXP 18
5514: PPUSH
5515: LD_STRING D6-Cyrus-1
5517: PPUSH
5518: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5522: LD_EXP 17
5526: PPUSH
5527: CALL_OW 302
5531: PUSH
5532: LD_EXP 4
5536: AND
5537: IFFALSE 5551
// Say ( Bobby , D6-Bobby-1 ) ;
5539: LD_EXP 17
5543: PPUSH
5544: LD_STRING D6-Bobby-1
5546: PPUSH
5547: CALL_OW 88
// DialogueOff ;
5551: CALL_OW 7
// Wait ( [ 0 0$04 , 0 0$03 , 0 0$02 , 0 0$02 ] [ Difficulty ] ) ;
5555: LD_INT 140
5557: PUSH
5558: LD_INT 105
5560: PUSH
5561: LD_INT 70
5563: PUSH
5564: LD_INT 70
5566: PUSH
5567: EMPTY
5568: LIST
5569: LIST
5570: LIST
5571: LIST
5572: PUSH
5573: LD_OWVAR 67
5577: ARRAY
5578: PPUSH
5579: CALL_OW 67
// meta_action := true ;
5583: LD_ADDR_EXP 10
5587: PUSH
5588: LD_INT 1
5590: ST_TO_ADDR
// ComAgressiveMove ( russian_meta_guards , 94 , 8 ) ;
5591: LD_EXP 24
5595: PPUSH
5596: LD_INT 94
5598: PPUSH
5599: LD_INT 8
5601: PPUSH
5602: CALL_OW 114
// end ;
5606: PPOPN 2
5608: END
// every 0 0$01 trigger GetDistUnitXY ( JMM , 93 , 1 ) < 5 and FilterAllUnits ( [ f_side , 1 ] ) > 1 do
5609: LD_EXP 16
5613: PPUSH
5614: LD_INT 93
5616: PPUSH
5617: LD_INT 1
5619: PPUSH
5620: CALL_OW 297
5624: PUSH
5625: LD_INT 5
5627: LESS
5628: PUSH
5629: LD_INT 22
5631: PUSH
5632: LD_INT 1
5634: PUSH
5635: EMPTY
5636: LIST
5637: LIST
5638: PPUSH
5639: CALL_OW 69
5643: PUSH
5644: LD_INT 1
5646: GREATER
5647: AND
5648: IFFALSE 5665
5650: GO 5652
5652: DISABLE
// Say ( JMM , D6a-JMM-1 ) ;
5653: LD_EXP 16
5657: PPUSH
5658: LD_STRING D6a-JMM-1
5660: PPUSH
5661: CALL_OW 88
5665: END
// on UnitGoesToRed ( un ) do begin if un = JMM then
5666: LD_VAR 0 1
5670: PUSH
5671: LD_EXP 16
5675: EQUAL
5676: IFFALSE 5685
// YouLost ( JMM ) ;
5678: LD_STRING JMM
5680: PPUSH
5681: CALL_OW 104
// end ;
5685: PPOPN 1
5687: END
// on UnitDestroyed ( un ) do begin if un = JMM then
5688: LD_VAR 0 1
5692: PUSH
5693: LD_EXP 16
5697: EQUAL
5698: IFFALSE 5707
// YouLost ( JMM ) ;
5700: LD_STRING JMM
5702: PPUSH
5703: CALL_OW 104
// end ;
5707: PPOPN 1
5709: END
// every 0 0$01 trigger IsInArea ( Bobby , exitArea ) do
5710: LD_EXP 17
5714: PPUSH
5715: LD_INT 10
5717: PPUSH
5718: CALL_OW 308
5722: IFFALSE 5771
5724: GO 5726
5726: DISABLE
// begin bobby_saved := true ;
5727: LD_ADDR_EXP 12
5731: PUSH
5732: LD_INT 1
5734: ST_TO_ADDR
// SaveVariable ( GetLives ( Bobby ) , 01_BobbyLifePoints_1 ) ;
5735: LD_EXP 17
5739: PPUSH
5740: CALL_OW 256
5744: PPUSH
5745: LD_STRING 01_BobbyLifePoints_1
5747: PPUSH
5748: CALL_OW 39
// RemoveUnit ( Bobby ) ;
5752: LD_EXP 17
5756: PPUSH
5757: CALL_OW 64
// AddMedal ( Bobby , 1 ) ;
5761: LD_STRING Bobby
5763: PPUSH
5764: LD_INT 1
5766: PPUSH
5767: CALL_OW 101
// end ;
5771: END
// every 0 0$01 trigger IsInArea ( Cyrus , exitArea ) do
5772: LD_EXP 18
5776: PPUSH
5777: LD_INT 10
5779: PPUSH
5780: CALL_OW 308
5784: IFFALSE 5833
5786: GO 5788
5788: DISABLE
// begin cyrus_saved := true ;
5789: LD_ADDR_EXP 13
5793: PUSH
5794: LD_INT 1
5796: ST_TO_ADDR
// SaveVariable ( GetLives ( Cyrus ) , 01_CyrusLifePoints_1 ) ;
5797: LD_EXP 18
5801: PPUSH
5802: CALL_OW 256
5806: PPUSH
5807: LD_STRING 01_CyrusLifePoints_1
5809: PPUSH
5810: CALL_OW 39
// RemoveUnit ( Cyrus ) ;
5814: LD_EXP 18
5818: PPUSH
5819: CALL_OW 64
// AddMedal ( Cyrus , 1 ) ;
5823: LD_STRING Cyrus
5825: PPUSH
5826: LD_INT 1
5828: PPUSH
5829: CALL_OW 101
// end ;
5833: END
// every 0 0$01 trigger IsInArea ( JMM , exitArea ) do var i , to_reward , wait_for_them , m1 , m2 , m3 ;
5834: LD_EXP 16
5838: PPUSH
5839: LD_INT 10
5841: PPUSH
5842: CALL_OW 308
5846: IFFALSE 6454
5848: GO 5850
5850: DISABLE
5851: LD_INT 0
5853: PPUSH
5854: PPUSH
5855: PPUSH
5856: PPUSH
5857: PPUSH
5858: PPUSH
// begin if macmilan_use_radio then
5859: LD_EXP 6
5863: IFFALSE 5872
// SetAchievement ( ACH_RADIO ) ;
5865: LD_STRING ACH_RADIO
5867: PPUSH
5868: CALL_OW 543
// if ( not cyrus_saved and cyrus_in_squad and IsOk ( Cyrus ) ) or ( not bobby_saved and bobby_in_squad and IsOk ( Bobby ) ) then
5872: LD_EXP 13
5876: NOT
5877: PUSH
5878: LD_EXP 7
5882: AND
5883: PUSH
5884: LD_EXP 18
5888: PPUSH
5889: CALL_OW 302
5893: AND
5894: PUSH
5895: LD_EXP 12
5899: NOT
5900: PUSH
5901: LD_EXP 4
5905: AND
5906: PUSH
5907: LD_EXP 17
5911: PPUSH
5912: CALL_OW 302
5916: AND
5917: OR
5918: IFFALSE 5959
// case Query ( Q2 ) of 1 :
5920: LD_STRING Q2
5922: PPUSH
5923: CALL_OW 97
5927: PUSH
5928: LD_INT 1
5930: DOUBLE
5931: EQUAL
5932: IFTRUE 5936
5934: GO 5947
5936: POP
// wait_for_them := true ; 2 :
5937: LD_ADDR_VAR 0 3
5941: PUSH
5942: LD_INT 1
5944: ST_TO_ADDR
5945: GO 5959
5947: LD_INT 2
5949: DOUBLE
5950: EQUAL
5951: IFTRUE 5955
5953: GO 5958
5955: POP
// ; end ;
5956: GO 5959
5958: POP
// if wait_for_them then
5959: LD_VAR 0 3
5963: IFFALSE 6076
// repeat wait ( 0 0$01 ) ;
5965: LD_INT 35
5967: PPUSH
5968: CALL_OW 67
// until ( cyrus_saved and bobby_saved ) or ( cyrus_saved and ( not bobby_in_squad or IsDying ( Bobby ) or IsDead ( Bobby ) ) ) or ( bobby_saved and ( not cyrus_in_squad or IsDying ( Cyrus ) or IsDead ( Cyrus ) ) ) or ( IsDead ( Bobby ) and IsDead ( Cyrus ) ) ;
5972: LD_EXP 13
5976: PUSH
5977: LD_EXP 12
5981: AND
5982: PUSH
5983: LD_EXP 13
5987: PUSH
5988: LD_EXP 4
5992: NOT
5993: PUSH
5994: LD_EXP 17
5998: PPUSH
5999: CALL_OW 303
6003: OR
6004: PUSH
6005: LD_EXP 17
6009: PPUSH
6010: CALL_OW 301
6014: OR
6015: AND
6016: OR
6017: PUSH
6018: LD_EXP 12
6022: PUSH
6023: LD_EXP 7
6027: NOT
6028: PUSH
6029: LD_EXP 18
6033: PPUSH
6034: CALL_OW 303
6038: OR
6039: PUSH
6040: LD_EXP 18
6044: PPUSH
6045: CALL_OW 301
6049: OR
6050: AND
6051: OR
6052: PUSH
6053: LD_EXP 17
6057: PPUSH
6058: CALL_OW 301
6062: PUSH
6063: LD_EXP 18
6067: PPUSH
6068: CALL_OW 301
6072: AND
6073: OR
6074: IFFALSE 5965
// SaveVariable ( GetLives ( JMM ) , 01_JMMLifePoints_1 ) ;
6076: LD_EXP 16
6080: PPUSH
6081: CALL_OW 256
6085: PPUSH
6086: LD_STRING 01_JMMLifePoints_1
6088: PPUSH
6089: CALL_OW 39
// RemoveUnit ( JMM ) ;
6093: LD_EXP 16
6097: PPUSH
6098: CALL_OW 64
// to_reward := [ JMM ] ;
6102: LD_ADDR_VAR 0 2
6106: PUSH
6107: LD_EXP 16
6111: PUSH
6112: EMPTY
6113: LIST
6114: ST_TO_ADDR
// if bobby_saved then
6115: LD_EXP 12
6119: IFFALSE 6137
// to_reward := to_reward ^ Bobby ;
6121: LD_ADDR_VAR 0 2
6125: PUSH
6126: LD_VAR 0 2
6130: PUSH
6131: LD_EXP 17
6135: ADD
6136: ST_TO_ADDR
// if cyrus_saved then
6137: LD_EXP 13
6141: IFFALSE 6159
// to_reward := to_reward ^ Cyrus ;
6143: LD_ADDR_VAR 0 2
6147: PUSH
6148: LD_VAR 0 2
6152: PUSH
6153: LD_EXP 18
6157: ADD
6158: ST_TO_ADDR
// m1 := true ;
6159: LD_ADDR_VAR 0 4
6163: PUSH
6164: LD_INT 1
6166: ST_TO_ADDR
// m2 := bobby_saved ;
6167: LD_ADDR_VAR 0 5
6171: PUSH
6172: LD_EXP 12
6176: ST_TO_ADDR
// m3 := cyrus_saved ;
6177: LD_ADDR_VAR 0 6
6181: PUSH
6182: LD_EXP 13
6186: ST_TO_ADDR
// AddMedal ( JMM , 1 ) ;
6187: LD_STRING JMM
6189: PPUSH
6190: LD_INT 1
6192: PPUSH
6193: CALL_OW 101
// if not bobby_in_squad then
6197: LD_EXP 4
6201: NOT
6202: IFFALSE 6215
// AddMedal ( Bobby , - 1 ) ;
6204: LD_STRING Bobby
6206: PPUSH
6207: LD_INT 1
6209: NEG
6210: PPUSH
6211: CALL_OW 101
// if not bobby_saved and ( IsDying ( Bobby ) or IsDead ( Bobby ) ) then
6215: LD_EXP 12
6219: NOT
6220: PUSH
6221: LD_EXP 17
6225: PPUSH
6226: CALL_OW 303
6230: PUSH
6231: LD_EXP 17
6235: PPUSH
6236: CALL_OW 301
6240: OR
6241: AND
6242: IFFALSE 6255
// AddMedal ( Bobby , - 2 ) ;
6244: LD_STRING Bobby
6246: PPUSH
6247: LD_INT 2
6249: NEG
6250: PPUSH
6251: CALL_OW 101
// if not cyrus_in_squad then
6255: LD_EXP 7
6259: NOT
6260: IFFALSE 6273
// AddMedal ( Cyrus , - 1 ) ;
6262: LD_STRING Cyrus
6264: PPUSH
6265: LD_INT 1
6267: NEG
6268: PPUSH
6269: CALL_OW 101
// if not cyrus_saved and ( IsDying ( Cyrus ) or IsDead ( Cyrus ) ) then
6273: LD_EXP 13
6277: NOT
6278: PUSH
6279: LD_EXP 18
6283: PPUSH
6284: CALL_OW 303
6288: PUSH
6289: LD_EXP 18
6293: PPUSH
6294: CALL_OW 301
6298: OR
6299: AND
6300: IFFALSE 6313
// AddMedal ( Cyrus , - 2 ) ;
6302: LD_STRING Cyrus
6304: PPUSH
6305: LD_INT 2
6307: NEG
6308: PPUSH
6309: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 and m3 then
6313: LD_OWVAR 67
6317: PUSH
6318: LD_INT 3
6320: GREATEREQUAL
6321: PUSH
6322: LD_VAR 0 4
6326: AND
6327: PUSH
6328: LD_VAR 0 5
6332: AND
6333: PUSH
6334: LD_VAR 0 6
6338: AND
6339: IFFALSE 6351
// SetAchievementEX ( ACH_AMER , 1 ) ;
6341: LD_STRING ACH_AMER
6343: PPUSH
6344: LD_INT 1
6346: PPUSH
6347: CALL_OW 564
// GiveMedals ( MAIN ) ;
6351: LD_STRING MAIN
6353: PPUSH
6354: CALL_OW 102
// RewardPeople ( to_reward ) ;
6358: LD_VAR 0 2
6362: PPUSH
6363: CALL_OW 43
// if bobby_saved then
6367: LD_EXP 12
6371: IFFALSE 6391
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
6373: LD_EXP 17
6377: PPUSH
6378: LD_EXP 2
6382: PUSH
6383: LD_STRING Bobby
6385: STR
6386: PPUSH
6387: CALL_OW 38
// if cyrus_saved then
6391: LD_EXP 13
6395: IFFALSE 6415
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
6397: LD_EXP 18
6401: PPUSH
6402: LD_EXP 2
6406: PUSH
6407: LD_STRING Cyrus
6409: STR
6410: PPUSH
6411: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
6415: LD_EXP 16
6419: PPUSH
6420: LD_EXP 2
6424: PUSH
6425: LD_STRING JMM
6427: STR
6428: PPUSH
6429: CALL_OW 38
// if tick <= 3 3$00 then
6433: LD_OWVAR 1
6437: PUSH
6438: LD_INT 6300
6440: LESSEQUAL
6441: IFFALSE 6450
// SetAchievement ( ACH_ASPEED_1 ) ;
6443: LD_STRING ACH_ASPEED_1
6445: PPUSH
6446: CALL_OW 543
// YouWin ;
6450: CALL_OW 103
// end ; end_of_file end_of_file
6454: PPOPN 6
6456: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
6457: LD_INT 0
6459: PPUSH
// if p2 = 100 then
6460: LD_VAR 0 2
6464: PUSH
6465: LD_INT 100
6467: EQUAL
6468: IFFALSE 7417
// begin if not StreamModeActive then
6470: LD_EXP 27
6474: NOT
6475: IFFALSE 6485
// StreamModeActive := true ;
6477: LD_ADDR_EXP 27
6481: PUSH
6482: LD_INT 1
6484: ST_TO_ADDR
// if p3 = 0 then
6485: LD_VAR 0 3
6489: PUSH
6490: LD_INT 0
6492: EQUAL
6493: IFFALSE 6499
// InitStreamMode ;
6495: CALL 7577 0 0
// if p3 = 1 then
6499: LD_VAR 0 3
6503: PUSH
6504: LD_INT 1
6506: EQUAL
6507: IFFALSE 6517
// sRocket := true ;
6509: LD_ADDR_EXP 32
6513: PUSH
6514: LD_INT 1
6516: ST_TO_ADDR
// if p3 = 2 then
6517: LD_VAR 0 3
6521: PUSH
6522: LD_INT 2
6524: EQUAL
6525: IFFALSE 6535
// sSpeed := true ;
6527: LD_ADDR_EXP 31
6531: PUSH
6532: LD_INT 1
6534: ST_TO_ADDR
// if p3 = 3 then
6535: LD_VAR 0 3
6539: PUSH
6540: LD_INT 3
6542: EQUAL
6543: IFFALSE 6553
// sEngine := true ;
6545: LD_ADDR_EXP 33
6549: PUSH
6550: LD_INT 1
6552: ST_TO_ADDR
// if p3 = 4 then
6553: LD_VAR 0 3
6557: PUSH
6558: LD_INT 4
6560: EQUAL
6561: IFFALSE 6571
// sSpec := true ;
6563: LD_ADDR_EXP 30
6567: PUSH
6568: LD_INT 1
6570: ST_TO_ADDR
// if p3 = 5 then
6571: LD_VAR 0 3
6575: PUSH
6576: LD_INT 5
6578: EQUAL
6579: IFFALSE 6589
// sLevel := true ;
6581: LD_ADDR_EXP 34
6585: PUSH
6586: LD_INT 1
6588: ST_TO_ADDR
// if p3 = 6 then
6589: LD_VAR 0 3
6593: PUSH
6594: LD_INT 6
6596: EQUAL
6597: IFFALSE 6607
// sArmoury := true ;
6599: LD_ADDR_EXP 35
6603: PUSH
6604: LD_INT 1
6606: ST_TO_ADDR
// if p3 = 7 then
6607: LD_VAR 0 3
6611: PUSH
6612: LD_INT 7
6614: EQUAL
6615: IFFALSE 6625
// sRadar := true ;
6617: LD_ADDR_EXP 36
6621: PUSH
6622: LD_INT 1
6624: ST_TO_ADDR
// if p3 = 8 then
6625: LD_VAR 0 3
6629: PUSH
6630: LD_INT 8
6632: EQUAL
6633: IFFALSE 6643
// sBunker := true ;
6635: LD_ADDR_EXP 37
6639: PUSH
6640: LD_INT 1
6642: ST_TO_ADDR
// if p3 = 9 then
6643: LD_VAR 0 3
6647: PUSH
6648: LD_INT 9
6650: EQUAL
6651: IFFALSE 6661
// sHack := true ;
6653: LD_ADDR_EXP 38
6657: PUSH
6658: LD_INT 1
6660: ST_TO_ADDR
// if p3 = 10 then
6661: LD_VAR 0 3
6665: PUSH
6666: LD_INT 10
6668: EQUAL
6669: IFFALSE 6679
// sFire := true ;
6671: LD_ADDR_EXP 39
6675: PUSH
6676: LD_INT 1
6678: ST_TO_ADDR
// if p3 = 11 then
6679: LD_VAR 0 3
6683: PUSH
6684: LD_INT 11
6686: EQUAL
6687: IFFALSE 6697
// sRefresh := true ;
6689: LD_ADDR_EXP 40
6693: PUSH
6694: LD_INT 1
6696: ST_TO_ADDR
// if p3 = 12 then
6697: LD_VAR 0 3
6701: PUSH
6702: LD_INT 12
6704: EQUAL
6705: IFFALSE 6715
// sExp := true ;
6707: LD_ADDR_EXP 41
6711: PUSH
6712: LD_INT 1
6714: ST_TO_ADDR
// if p3 = 13 then
6715: LD_VAR 0 3
6719: PUSH
6720: LD_INT 13
6722: EQUAL
6723: IFFALSE 6733
// sDepot := true ;
6725: LD_ADDR_EXP 42
6729: PUSH
6730: LD_INT 1
6732: ST_TO_ADDR
// if p3 = 14 then
6733: LD_VAR 0 3
6737: PUSH
6738: LD_INT 14
6740: EQUAL
6741: IFFALSE 6751
// sFlag := true ;
6743: LD_ADDR_EXP 43
6747: PUSH
6748: LD_INT 1
6750: ST_TO_ADDR
// if p3 = 15 then
6751: LD_VAR 0 3
6755: PUSH
6756: LD_INT 15
6758: EQUAL
6759: IFFALSE 6769
// sKamikadze := true ;
6761: LD_ADDR_EXP 51
6765: PUSH
6766: LD_INT 1
6768: ST_TO_ADDR
// if p3 = 16 then
6769: LD_VAR 0 3
6773: PUSH
6774: LD_INT 16
6776: EQUAL
6777: IFFALSE 6787
// sTroll := true ;
6779: LD_ADDR_EXP 52
6783: PUSH
6784: LD_INT 1
6786: ST_TO_ADDR
// if p3 = 17 then
6787: LD_VAR 0 3
6791: PUSH
6792: LD_INT 17
6794: EQUAL
6795: IFFALSE 6805
// sSlow := true ;
6797: LD_ADDR_EXP 53
6801: PUSH
6802: LD_INT 1
6804: ST_TO_ADDR
// if p3 = 18 then
6805: LD_VAR 0 3
6809: PUSH
6810: LD_INT 18
6812: EQUAL
6813: IFFALSE 6823
// sLack := true ;
6815: LD_ADDR_EXP 54
6819: PUSH
6820: LD_INT 1
6822: ST_TO_ADDR
// if p3 = 19 then
6823: LD_VAR 0 3
6827: PUSH
6828: LD_INT 19
6830: EQUAL
6831: IFFALSE 6841
// sTank := true ;
6833: LD_ADDR_EXP 56
6837: PUSH
6838: LD_INT 1
6840: ST_TO_ADDR
// if p3 = 20 then
6841: LD_VAR 0 3
6845: PUSH
6846: LD_INT 20
6848: EQUAL
6849: IFFALSE 6859
// sRemote := true ;
6851: LD_ADDR_EXP 57
6855: PUSH
6856: LD_INT 1
6858: ST_TO_ADDR
// if p3 = 21 then
6859: LD_VAR 0 3
6863: PUSH
6864: LD_INT 21
6866: EQUAL
6867: IFFALSE 6877
// sPowell := true ;
6869: LD_ADDR_EXP 58
6873: PUSH
6874: LD_INT 1
6876: ST_TO_ADDR
// if p3 = 22 then
6877: LD_VAR 0 3
6881: PUSH
6882: LD_INT 22
6884: EQUAL
6885: IFFALSE 6895
// sTeleport := true ;
6887: LD_ADDR_EXP 61
6891: PUSH
6892: LD_INT 1
6894: ST_TO_ADDR
// if p3 = 23 then
6895: LD_VAR 0 3
6899: PUSH
6900: LD_INT 23
6902: EQUAL
6903: IFFALSE 6913
// sOilTower := true ;
6905: LD_ADDR_EXP 63
6909: PUSH
6910: LD_INT 1
6912: ST_TO_ADDR
// if p3 = 24 then
6913: LD_VAR 0 3
6917: PUSH
6918: LD_INT 24
6920: EQUAL
6921: IFFALSE 6931
// sShovel := true ;
6923: LD_ADDR_EXP 64
6927: PUSH
6928: LD_INT 1
6930: ST_TO_ADDR
// if p3 = 25 then
6931: LD_VAR 0 3
6935: PUSH
6936: LD_INT 25
6938: EQUAL
6939: IFFALSE 6949
// sSheik := true ;
6941: LD_ADDR_EXP 65
6945: PUSH
6946: LD_INT 1
6948: ST_TO_ADDR
// if p3 = 26 then
6949: LD_VAR 0 3
6953: PUSH
6954: LD_INT 26
6956: EQUAL
6957: IFFALSE 6967
// sEarthquake := true ;
6959: LD_ADDR_EXP 67
6963: PUSH
6964: LD_INT 1
6966: ST_TO_ADDR
// if p3 = 27 then
6967: LD_VAR 0 3
6971: PUSH
6972: LD_INT 27
6974: EQUAL
6975: IFFALSE 6985
// sAI := true ;
6977: LD_ADDR_EXP 68
6981: PUSH
6982: LD_INT 1
6984: ST_TO_ADDR
// if p3 = 28 then
6985: LD_VAR 0 3
6989: PUSH
6990: LD_INT 28
6992: EQUAL
6993: IFFALSE 7003
// sCargo := true ;
6995: LD_ADDR_EXP 71
6999: PUSH
7000: LD_INT 1
7002: ST_TO_ADDR
// if p3 = 29 then
7003: LD_VAR 0 3
7007: PUSH
7008: LD_INT 29
7010: EQUAL
7011: IFFALSE 7021
// sDLaser := true ;
7013: LD_ADDR_EXP 72
7017: PUSH
7018: LD_INT 1
7020: ST_TO_ADDR
// if p3 = 30 then
7021: LD_VAR 0 3
7025: PUSH
7026: LD_INT 30
7028: EQUAL
7029: IFFALSE 7039
// sExchange := true ;
7031: LD_ADDR_EXP 73
7035: PUSH
7036: LD_INT 1
7038: ST_TO_ADDR
// if p3 = 31 then
7039: LD_VAR 0 3
7043: PUSH
7044: LD_INT 31
7046: EQUAL
7047: IFFALSE 7057
// sFac := true ;
7049: LD_ADDR_EXP 74
7053: PUSH
7054: LD_INT 1
7056: ST_TO_ADDR
// if p3 = 32 then
7057: LD_VAR 0 3
7061: PUSH
7062: LD_INT 32
7064: EQUAL
7065: IFFALSE 7075
// sPower := true ;
7067: LD_ADDR_EXP 75
7071: PUSH
7072: LD_INT 1
7074: ST_TO_ADDR
// if p3 = 33 then
7075: LD_VAR 0 3
7079: PUSH
7080: LD_INT 33
7082: EQUAL
7083: IFFALSE 7093
// sRandom := true ;
7085: LD_ADDR_EXP 76
7089: PUSH
7090: LD_INT 1
7092: ST_TO_ADDR
// if p3 = 34 then
7093: LD_VAR 0 3
7097: PUSH
7098: LD_INT 34
7100: EQUAL
7101: IFFALSE 7111
// sShield := true ;
7103: LD_ADDR_EXP 77
7107: PUSH
7108: LD_INT 1
7110: ST_TO_ADDR
// if p3 = 35 then
7111: LD_VAR 0 3
7115: PUSH
7116: LD_INT 35
7118: EQUAL
7119: IFFALSE 7129
// sTime := true ;
7121: LD_ADDR_EXP 78
7125: PUSH
7126: LD_INT 1
7128: ST_TO_ADDR
// if p3 = 36 then
7129: LD_VAR 0 3
7133: PUSH
7134: LD_INT 36
7136: EQUAL
7137: IFFALSE 7147
// sTools := true ;
7139: LD_ADDR_EXP 79
7143: PUSH
7144: LD_INT 1
7146: ST_TO_ADDR
// if p3 = 101 then
7147: LD_VAR 0 3
7151: PUSH
7152: LD_INT 101
7154: EQUAL
7155: IFFALSE 7165
// sSold := true ;
7157: LD_ADDR_EXP 44
7161: PUSH
7162: LD_INT 1
7164: ST_TO_ADDR
// if p3 = 102 then
7165: LD_VAR 0 3
7169: PUSH
7170: LD_INT 102
7172: EQUAL
7173: IFFALSE 7183
// sDiff := true ;
7175: LD_ADDR_EXP 45
7179: PUSH
7180: LD_INT 1
7182: ST_TO_ADDR
// if p3 = 103 then
7183: LD_VAR 0 3
7187: PUSH
7188: LD_INT 103
7190: EQUAL
7191: IFFALSE 7201
// sFog := true ;
7193: LD_ADDR_EXP 48
7197: PUSH
7198: LD_INT 1
7200: ST_TO_ADDR
// if p3 = 104 then
7201: LD_VAR 0 3
7205: PUSH
7206: LD_INT 104
7208: EQUAL
7209: IFFALSE 7219
// sReset := true ;
7211: LD_ADDR_EXP 49
7215: PUSH
7216: LD_INT 1
7218: ST_TO_ADDR
// if p3 = 105 then
7219: LD_VAR 0 3
7223: PUSH
7224: LD_INT 105
7226: EQUAL
7227: IFFALSE 7237
// sSun := true ;
7229: LD_ADDR_EXP 50
7233: PUSH
7234: LD_INT 1
7236: ST_TO_ADDR
// if p3 = 106 then
7237: LD_VAR 0 3
7241: PUSH
7242: LD_INT 106
7244: EQUAL
7245: IFFALSE 7255
// sTiger := true ;
7247: LD_ADDR_EXP 46
7251: PUSH
7252: LD_INT 1
7254: ST_TO_ADDR
// if p3 = 107 then
7255: LD_VAR 0 3
7259: PUSH
7260: LD_INT 107
7262: EQUAL
7263: IFFALSE 7273
// sBomb := true ;
7265: LD_ADDR_EXP 47
7269: PUSH
7270: LD_INT 1
7272: ST_TO_ADDR
// if p3 = 108 then
7273: LD_VAR 0 3
7277: PUSH
7278: LD_INT 108
7280: EQUAL
7281: IFFALSE 7291
// sWound := true ;
7283: LD_ADDR_EXP 55
7287: PUSH
7288: LD_INT 1
7290: ST_TO_ADDR
// if p3 = 109 then
7291: LD_VAR 0 3
7295: PUSH
7296: LD_INT 109
7298: EQUAL
7299: IFFALSE 7309
// sBetray := true ;
7301: LD_ADDR_EXP 59
7305: PUSH
7306: LD_INT 1
7308: ST_TO_ADDR
// if p3 = 110 then
7309: LD_VAR 0 3
7313: PUSH
7314: LD_INT 110
7316: EQUAL
7317: IFFALSE 7327
// sContamin := true ;
7319: LD_ADDR_EXP 60
7323: PUSH
7324: LD_INT 1
7326: ST_TO_ADDR
// if p3 = 111 then
7327: LD_VAR 0 3
7331: PUSH
7332: LD_INT 111
7334: EQUAL
7335: IFFALSE 7345
// sOil := true ;
7337: LD_ADDR_EXP 62
7341: PUSH
7342: LD_INT 1
7344: ST_TO_ADDR
// if p3 = 112 then
7345: LD_VAR 0 3
7349: PUSH
7350: LD_INT 112
7352: EQUAL
7353: IFFALSE 7363
// sStu := true ;
7355: LD_ADDR_EXP 66
7359: PUSH
7360: LD_INT 1
7362: ST_TO_ADDR
// if p3 = 113 then
7363: LD_VAR 0 3
7367: PUSH
7368: LD_INT 113
7370: EQUAL
7371: IFFALSE 7381
// sBazooka := true ;
7373: LD_ADDR_EXP 69
7377: PUSH
7378: LD_INT 1
7380: ST_TO_ADDR
// if p3 = 114 then
7381: LD_VAR 0 3
7385: PUSH
7386: LD_INT 114
7388: EQUAL
7389: IFFALSE 7399
// sMortar := true ;
7391: LD_ADDR_EXP 70
7395: PUSH
7396: LD_INT 1
7398: ST_TO_ADDR
// if p3 = 115 then
7399: LD_VAR 0 3
7403: PUSH
7404: LD_INT 115
7406: EQUAL
7407: IFFALSE 7417
// sRanger := true ;
7409: LD_ADDR_EXP 80
7413: PUSH
7414: LD_INT 1
7416: ST_TO_ADDR
// end ; if p2 = 101 then
7417: LD_VAR 0 2
7421: PUSH
7422: LD_INT 101
7424: EQUAL
7425: IFFALSE 7553
// begin case p3 of 1 :
7427: LD_VAR 0 3
7431: PUSH
7432: LD_INT 1
7434: DOUBLE
7435: EQUAL
7436: IFTRUE 7440
7438: GO 7447
7440: POP
// hHackUnlimitedResources ; 2 :
7441: CALL 18590 0 0
7445: GO 7553
7447: LD_INT 2
7449: DOUBLE
7450: EQUAL
7451: IFTRUE 7455
7453: GO 7462
7455: POP
// hHackSetLevel10 ; 3 :
7456: CALL 18723 0 0
7460: GO 7553
7462: LD_INT 3
7464: DOUBLE
7465: EQUAL
7466: IFTRUE 7470
7468: GO 7477
7470: POP
// hHackSetLevel10YourUnits ; 4 :
7471: CALL 18808 0 0
7475: GO 7553
7477: LD_INT 4
7479: DOUBLE
7480: EQUAL
7481: IFTRUE 7485
7483: GO 7492
7485: POP
// hHackInvincible ; 5 :
7486: CALL 19256 0 0
7490: GO 7553
7492: LD_INT 5
7494: DOUBLE
7495: EQUAL
7496: IFTRUE 7500
7498: GO 7507
7500: POP
// hHackInvisible ; 6 :
7501: CALL 19367 0 0
7505: GO 7553
7507: LD_INT 6
7509: DOUBLE
7510: EQUAL
7511: IFTRUE 7515
7513: GO 7522
7515: POP
// hHackChangeYourSide ; 7 :
7516: CALL 19424 0 0
7520: GO 7553
7522: LD_INT 7
7524: DOUBLE
7525: EQUAL
7526: IFTRUE 7530
7528: GO 7537
7530: POP
// hHackChangeUnitSide ; 8 :
7531: CALL 19466 0 0
7535: GO 7553
7537: LD_INT 8
7539: DOUBLE
7540: EQUAL
7541: IFTRUE 7545
7543: GO 7552
7545: POP
// hHackFog ; end ;
7546: CALL 19567 0 0
7550: GO 7553
7552: POP
// end ; end ;
7553: LD_VAR 0 7
7557: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
7558: GO 7560
7560: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
7561: LD_STRING initStreamRollete();
7563: PPUSH
7564: CALL_OW 559
// InitStreamMode ;
7568: CALL 7577 0 0
// DefineStreamItems ( ) ;
7572: CALL 8017 0 0
// end ;
7576: END
// function InitStreamMode ; begin
7577: LD_INT 0
7579: PPUSH
// streamModeActive := false ;
7580: LD_ADDR_EXP 27
7584: PUSH
7585: LD_INT 0
7587: ST_TO_ADDR
// normalCounter := 36 ;
7588: LD_ADDR_EXP 28
7592: PUSH
7593: LD_INT 36
7595: ST_TO_ADDR
// hardcoreCounter := 16 ;
7596: LD_ADDR_EXP 29
7600: PUSH
7601: LD_INT 16
7603: ST_TO_ADDR
// sRocket := false ;
7604: LD_ADDR_EXP 32
7608: PUSH
7609: LD_INT 0
7611: ST_TO_ADDR
// sSpeed := false ;
7612: LD_ADDR_EXP 31
7616: PUSH
7617: LD_INT 0
7619: ST_TO_ADDR
// sEngine := false ;
7620: LD_ADDR_EXP 33
7624: PUSH
7625: LD_INT 0
7627: ST_TO_ADDR
// sSpec := false ;
7628: LD_ADDR_EXP 30
7632: PUSH
7633: LD_INT 0
7635: ST_TO_ADDR
// sLevel := false ;
7636: LD_ADDR_EXP 34
7640: PUSH
7641: LD_INT 0
7643: ST_TO_ADDR
// sArmoury := false ;
7644: LD_ADDR_EXP 35
7648: PUSH
7649: LD_INT 0
7651: ST_TO_ADDR
// sRadar := false ;
7652: LD_ADDR_EXP 36
7656: PUSH
7657: LD_INT 0
7659: ST_TO_ADDR
// sBunker := false ;
7660: LD_ADDR_EXP 37
7664: PUSH
7665: LD_INT 0
7667: ST_TO_ADDR
// sHack := false ;
7668: LD_ADDR_EXP 38
7672: PUSH
7673: LD_INT 0
7675: ST_TO_ADDR
// sFire := false ;
7676: LD_ADDR_EXP 39
7680: PUSH
7681: LD_INT 0
7683: ST_TO_ADDR
// sRefresh := false ;
7684: LD_ADDR_EXP 40
7688: PUSH
7689: LD_INT 0
7691: ST_TO_ADDR
// sExp := false ;
7692: LD_ADDR_EXP 41
7696: PUSH
7697: LD_INT 0
7699: ST_TO_ADDR
// sDepot := false ;
7700: LD_ADDR_EXP 42
7704: PUSH
7705: LD_INT 0
7707: ST_TO_ADDR
// sFlag := false ;
7708: LD_ADDR_EXP 43
7712: PUSH
7713: LD_INT 0
7715: ST_TO_ADDR
// sKamikadze := false ;
7716: LD_ADDR_EXP 51
7720: PUSH
7721: LD_INT 0
7723: ST_TO_ADDR
// sTroll := false ;
7724: LD_ADDR_EXP 52
7728: PUSH
7729: LD_INT 0
7731: ST_TO_ADDR
// sSlow := false ;
7732: LD_ADDR_EXP 53
7736: PUSH
7737: LD_INT 0
7739: ST_TO_ADDR
// sLack := false ;
7740: LD_ADDR_EXP 54
7744: PUSH
7745: LD_INT 0
7747: ST_TO_ADDR
// sTank := false ;
7748: LD_ADDR_EXP 56
7752: PUSH
7753: LD_INT 0
7755: ST_TO_ADDR
// sRemote := false ;
7756: LD_ADDR_EXP 57
7760: PUSH
7761: LD_INT 0
7763: ST_TO_ADDR
// sPowell := false ;
7764: LD_ADDR_EXP 58
7768: PUSH
7769: LD_INT 0
7771: ST_TO_ADDR
// sTeleport := false ;
7772: LD_ADDR_EXP 61
7776: PUSH
7777: LD_INT 0
7779: ST_TO_ADDR
// sOilTower := false ;
7780: LD_ADDR_EXP 63
7784: PUSH
7785: LD_INT 0
7787: ST_TO_ADDR
// sShovel := false ;
7788: LD_ADDR_EXP 64
7792: PUSH
7793: LD_INT 0
7795: ST_TO_ADDR
// sSheik := false ;
7796: LD_ADDR_EXP 65
7800: PUSH
7801: LD_INT 0
7803: ST_TO_ADDR
// sEarthquake := false ;
7804: LD_ADDR_EXP 67
7808: PUSH
7809: LD_INT 0
7811: ST_TO_ADDR
// sAI := false ;
7812: LD_ADDR_EXP 68
7816: PUSH
7817: LD_INT 0
7819: ST_TO_ADDR
// sCargo := false ;
7820: LD_ADDR_EXP 71
7824: PUSH
7825: LD_INT 0
7827: ST_TO_ADDR
// sDLaser := false ;
7828: LD_ADDR_EXP 72
7832: PUSH
7833: LD_INT 0
7835: ST_TO_ADDR
// sExchange := false ;
7836: LD_ADDR_EXP 73
7840: PUSH
7841: LD_INT 0
7843: ST_TO_ADDR
// sFac := false ;
7844: LD_ADDR_EXP 74
7848: PUSH
7849: LD_INT 0
7851: ST_TO_ADDR
// sPower := false ;
7852: LD_ADDR_EXP 75
7856: PUSH
7857: LD_INT 0
7859: ST_TO_ADDR
// sRandom := false ;
7860: LD_ADDR_EXP 76
7864: PUSH
7865: LD_INT 0
7867: ST_TO_ADDR
// sShield := false ;
7868: LD_ADDR_EXP 77
7872: PUSH
7873: LD_INT 0
7875: ST_TO_ADDR
// sTime := false ;
7876: LD_ADDR_EXP 78
7880: PUSH
7881: LD_INT 0
7883: ST_TO_ADDR
// sTools := false ;
7884: LD_ADDR_EXP 79
7888: PUSH
7889: LD_INT 0
7891: ST_TO_ADDR
// sSold := false ;
7892: LD_ADDR_EXP 44
7896: PUSH
7897: LD_INT 0
7899: ST_TO_ADDR
// sDiff := false ;
7900: LD_ADDR_EXP 45
7904: PUSH
7905: LD_INT 0
7907: ST_TO_ADDR
// sFog := false ;
7908: LD_ADDR_EXP 48
7912: PUSH
7913: LD_INT 0
7915: ST_TO_ADDR
// sReset := false ;
7916: LD_ADDR_EXP 49
7920: PUSH
7921: LD_INT 0
7923: ST_TO_ADDR
// sSun := false ;
7924: LD_ADDR_EXP 50
7928: PUSH
7929: LD_INT 0
7931: ST_TO_ADDR
// sTiger := false ;
7932: LD_ADDR_EXP 46
7936: PUSH
7937: LD_INT 0
7939: ST_TO_ADDR
// sBomb := false ;
7940: LD_ADDR_EXP 47
7944: PUSH
7945: LD_INT 0
7947: ST_TO_ADDR
// sWound := false ;
7948: LD_ADDR_EXP 55
7952: PUSH
7953: LD_INT 0
7955: ST_TO_ADDR
// sBetray := false ;
7956: LD_ADDR_EXP 59
7960: PUSH
7961: LD_INT 0
7963: ST_TO_ADDR
// sContamin := false ;
7964: LD_ADDR_EXP 60
7968: PUSH
7969: LD_INT 0
7971: ST_TO_ADDR
// sOil := false ;
7972: LD_ADDR_EXP 62
7976: PUSH
7977: LD_INT 0
7979: ST_TO_ADDR
// sStu := false ;
7980: LD_ADDR_EXP 66
7984: PUSH
7985: LD_INT 0
7987: ST_TO_ADDR
// sBazooka := false ;
7988: LD_ADDR_EXP 69
7992: PUSH
7993: LD_INT 0
7995: ST_TO_ADDR
// sMortar := false ;
7996: LD_ADDR_EXP 70
8000: PUSH
8001: LD_INT 0
8003: ST_TO_ADDR
// sRanger := false ;
8004: LD_ADDR_EXP 80
8008: PUSH
8009: LD_INT 0
8011: ST_TO_ADDR
// end ;
8012: LD_VAR 0 1
8016: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
8017: LD_INT 0
8019: PPUSH
8020: PPUSH
8021: PPUSH
8022: PPUSH
8023: PPUSH
// result := [ ] ;
8024: LD_ADDR_VAR 0 1
8028: PUSH
8029: EMPTY
8030: ST_TO_ADDR
// if campaign_id = 1 then
8031: LD_OWVAR 69
8035: PUSH
8036: LD_INT 1
8038: EQUAL
8039: IFFALSE 10977
// begin case mission_number of 1 :
8041: LD_OWVAR 70
8045: PUSH
8046: LD_INT 1
8048: DOUBLE
8049: EQUAL
8050: IFTRUE 8054
8052: GO 8118
8054: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
8055: LD_ADDR_VAR 0 1
8059: PUSH
8060: LD_INT 2
8062: PUSH
8063: LD_INT 4
8065: PUSH
8066: LD_INT 11
8068: PUSH
8069: LD_INT 12
8071: PUSH
8072: LD_INT 15
8074: PUSH
8075: LD_INT 16
8077: PUSH
8078: LD_INT 22
8080: PUSH
8081: LD_INT 23
8083: PUSH
8084: LD_INT 26
8086: PUSH
8087: EMPTY
8088: LIST
8089: LIST
8090: LIST
8091: LIST
8092: LIST
8093: LIST
8094: LIST
8095: LIST
8096: LIST
8097: PUSH
8098: LD_INT 101
8100: PUSH
8101: LD_INT 102
8103: PUSH
8104: LD_INT 106
8106: PUSH
8107: EMPTY
8108: LIST
8109: LIST
8110: LIST
8111: PUSH
8112: EMPTY
8113: LIST
8114: LIST
8115: ST_TO_ADDR
8116: GO 10975
8118: LD_INT 2
8120: DOUBLE
8121: EQUAL
8122: IFTRUE 8126
8124: GO 8198
8126: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
8127: LD_ADDR_VAR 0 1
8131: PUSH
8132: LD_INT 2
8134: PUSH
8135: LD_INT 4
8137: PUSH
8138: LD_INT 11
8140: PUSH
8141: LD_INT 12
8143: PUSH
8144: LD_INT 15
8146: PUSH
8147: LD_INT 16
8149: PUSH
8150: LD_INT 22
8152: PUSH
8153: LD_INT 23
8155: PUSH
8156: LD_INT 26
8158: PUSH
8159: EMPTY
8160: LIST
8161: LIST
8162: LIST
8163: LIST
8164: LIST
8165: LIST
8166: LIST
8167: LIST
8168: LIST
8169: PUSH
8170: LD_INT 101
8172: PUSH
8173: LD_INT 102
8175: PUSH
8176: LD_INT 105
8178: PUSH
8179: LD_INT 106
8181: PUSH
8182: LD_INT 108
8184: PUSH
8185: EMPTY
8186: LIST
8187: LIST
8188: LIST
8189: LIST
8190: LIST
8191: PUSH
8192: EMPTY
8193: LIST
8194: LIST
8195: ST_TO_ADDR
8196: GO 10975
8198: LD_INT 3
8200: DOUBLE
8201: EQUAL
8202: IFTRUE 8206
8204: GO 8282
8206: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
8207: LD_ADDR_VAR 0 1
8211: PUSH
8212: LD_INT 2
8214: PUSH
8215: LD_INT 4
8217: PUSH
8218: LD_INT 5
8220: PUSH
8221: LD_INT 11
8223: PUSH
8224: LD_INT 12
8226: PUSH
8227: LD_INT 15
8229: PUSH
8230: LD_INT 16
8232: PUSH
8233: LD_INT 22
8235: PUSH
8236: LD_INT 26
8238: PUSH
8239: LD_INT 36
8241: PUSH
8242: EMPTY
8243: LIST
8244: LIST
8245: LIST
8246: LIST
8247: LIST
8248: LIST
8249: LIST
8250: LIST
8251: LIST
8252: LIST
8253: PUSH
8254: LD_INT 101
8256: PUSH
8257: LD_INT 102
8259: PUSH
8260: LD_INT 105
8262: PUSH
8263: LD_INT 106
8265: PUSH
8266: LD_INT 108
8268: PUSH
8269: EMPTY
8270: LIST
8271: LIST
8272: LIST
8273: LIST
8274: LIST
8275: PUSH
8276: EMPTY
8277: LIST
8278: LIST
8279: ST_TO_ADDR
8280: GO 10975
8282: LD_INT 4
8284: DOUBLE
8285: EQUAL
8286: IFTRUE 8290
8288: GO 8374
8290: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
8291: LD_ADDR_VAR 0 1
8295: PUSH
8296: LD_INT 2
8298: PUSH
8299: LD_INT 4
8301: PUSH
8302: LD_INT 5
8304: PUSH
8305: LD_INT 8
8307: PUSH
8308: LD_INT 11
8310: PUSH
8311: LD_INT 12
8313: PUSH
8314: LD_INT 15
8316: PUSH
8317: LD_INT 16
8319: PUSH
8320: LD_INT 22
8322: PUSH
8323: LD_INT 23
8325: PUSH
8326: LD_INT 26
8328: PUSH
8329: LD_INT 36
8331: PUSH
8332: EMPTY
8333: LIST
8334: LIST
8335: LIST
8336: LIST
8337: LIST
8338: LIST
8339: LIST
8340: LIST
8341: LIST
8342: LIST
8343: LIST
8344: LIST
8345: PUSH
8346: LD_INT 101
8348: PUSH
8349: LD_INT 102
8351: PUSH
8352: LD_INT 105
8354: PUSH
8355: LD_INT 106
8357: PUSH
8358: LD_INT 108
8360: PUSH
8361: EMPTY
8362: LIST
8363: LIST
8364: LIST
8365: LIST
8366: LIST
8367: PUSH
8368: EMPTY
8369: LIST
8370: LIST
8371: ST_TO_ADDR
8372: GO 10975
8374: LD_INT 5
8376: DOUBLE
8377: EQUAL
8378: IFTRUE 8382
8380: GO 8482
8382: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
8383: LD_ADDR_VAR 0 1
8387: PUSH
8388: LD_INT 2
8390: PUSH
8391: LD_INT 4
8393: PUSH
8394: LD_INT 5
8396: PUSH
8397: LD_INT 6
8399: PUSH
8400: LD_INT 8
8402: PUSH
8403: LD_INT 11
8405: PUSH
8406: LD_INT 12
8408: PUSH
8409: LD_INT 15
8411: PUSH
8412: LD_INT 16
8414: PUSH
8415: LD_INT 22
8417: PUSH
8418: LD_INT 23
8420: PUSH
8421: LD_INT 25
8423: PUSH
8424: LD_INT 26
8426: PUSH
8427: LD_INT 36
8429: PUSH
8430: EMPTY
8431: LIST
8432: LIST
8433: LIST
8434: LIST
8435: LIST
8436: LIST
8437: LIST
8438: LIST
8439: LIST
8440: LIST
8441: LIST
8442: LIST
8443: LIST
8444: LIST
8445: PUSH
8446: LD_INT 101
8448: PUSH
8449: LD_INT 102
8451: PUSH
8452: LD_INT 105
8454: PUSH
8455: LD_INT 106
8457: PUSH
8458: LD_INT 108
8460: PUSH
8461: LD_INT 109
8463: PUSH
8464: LD_INT 112
8466: PUSH
8467: EMPTY
8468: LIST
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: PUSH
8476: EMPTY
8477: LIST
8478: LIST
8479: ST_TO_ADDR
8480: GO 10975
8482: LD_INT 6
8484: DOUBLE
8485: EQUAL
8486: IFTRUE 8490
8488: GO 8610
8490: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
8491: LD_ADDR_VAR 0 1
8495: PUSH
8496: LD_INT 2
8498: PUSH
8499: LD_INT 4
8501: PUSH
8502: LD_INT 5
8504: PUSH
8505: LD_INT 6
8507: PUSH
8508: LD_INT 8
8510: PUSH
8511: LD_INT 11
8513: PUSH
8514: LD_INT 12
8516: PUSH
8517: LD_INT 15
8519: PUSH
8520: LD_INT 16
8522: PUSH
8523: LD_INT 20
8525: PUSH
8526: LD_INT 21
8528: PUSH
8529: LD_INT 22
8531: PUSH
8532: LD_INT 23
8534: PUSH
8535: LD_INT 25
8537: PUSH
8538: LD_INT 26
8540: PUSH
8541: LD_INT 30
8543: PUSH
8544: LD_INT 31
8546: PUSH
8547: LD_INT 32
8549: PUSH
8550: LD_INT 36
8552: PUSH
8553: EMPTY
8554: LIST
8555: LIST
8556: LIST
8557: LIST
8558: LIST
8559: LIST
8560: LIST
8561: LIST
8562: LIST
8563: LIST
8564: LIST
8565: LIST
8566: LIST
8567: LIST
8568: LIST
8569: LIST
8570: LIST
8571: LIST
8572: LIST
8573: PUSH
8574: LD_INT 101
8576: PUSH
8577: LD_INT 102
8579: PUSH
8580: LD_INT 105
8582: PUSH
8583: LD_INT 106
8585: PUSH
8586: LD_INT 108
8588: PUSH
8589: LD_INT 109
8591: PUSH
8592: LD_INT 112
8594: PUSH
8595: EMPTY
8596: LIST
8597: LIST
8598: LIST
8599: LIST
8600: LIST
8601: LIST
8602: LIST
8603: PUSH
8604: EMPTY
8605: LIST
8606: LIST
8607: ST_TO_ADDR
8608: GO 10975
8610: LD_INT 7
8612: DOUBLE
8613: EQUAL
8614: IFTRUE 8618
8616: GO 8718
8618: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
8619: LD_ADDR_VAR 0 1
8623: PUSH
8624: LD_INT 2
8626: PUSH
8627: LD_INT 4
8629: PUSH
8630: LD_INT 5
8632: PUSH
8633: LD_INT 7
8635: PUSH
8636: LD_INT 11
8638: PUSH
8639: LD_INT 12
8641: PUSH
8642: LD_INT 15
8644: PUSH
8645: LD_INT 16
8647: PUSH
8648: LD_INT 20
8650: PUSH
8651: LD_INT 21
8653: PUSH
8654: LD_INT 22
8656: PUSH
8657: LD_INT 23
8659: PUSH
8660: LD_INT 25
8662: PUSH
8663: LD_INT 26
8665: PUSH
8666: EMPTY
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: LIST
8672: LIST
8673: LIST
8674: LIST
8675: LIST
8676: LIST
8677: LIST
8678: LIST
8679: LIST
8680: LIST
8681: PUSH
8682: LD_INT 101
8684: PUSH
8685: LD_INT 102
8687: PUSH
8688: LD_INT 103
8690: PUSH
8691: LD_INT 105
8693: PUSH
8694: LD_INT 106
8696: PUSH
8697: LD_INT 108
8699: PUSH
8700: LD_INT 112
8702: PUSH
8703: EMPTY
8704: LIST
8705: LIST
8706: LIST
8707: LIST
8708: LIST
8709: LIST
8710: LIST
8711: PUSH
8712: EMPTY
8713: LIST
8714: LIST
8715: ST_TO_ADDR
8716: GO 10975
8718: LD_INT 8
8720: DOUBLE
8721: EQUAL
8722: IFTRUE 8726
8724: GO 8854
8726: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
8727: LD_ADDR_VAR 0 1
8731: PUSH
8732: LD_INT 2
8734: PUSH
8735: LD_INT 4
8737: PUSH
8738: LD_INT 5
8740: PUSH
8741: LD_INT 6
8743: PUSH
8744: LD_INT 7
8746: PUSH
8747: LD_INT 8
8749: PUSH
8750: LD_INT 11
8752: PUSH
8753: LD_INT 12
8755: PUSH
8756: LD_INT 15
8758: PUSH
8759: LD_INT 16
8761: PUSH
8762: LD_INT 20
8764: PUSH
8765: LD_INT 21
8767: PUSH
8768: LD_INT 22
8770: PUSH
8771: LD_INT 23
8773: PUSH
8774: LD_INT 25
8776: PUSH
8777: LD_INT 26
8779: PUSH
8780: LD_INT 30
8782: PUSH
8783: LD_INT 31
8785: PUSH
8786: LD_INT 32
8788: PUSH
8789: LD_INT 36
8791: PUSH
8792: EMPTY
8793: LIST
8794: LIST
8795: LIST
8796: LIST
8797: LIST
8798: LIST
8799: LIST
8800: LIST
8801: LIST
8802: LIST
8803: LIST
8804: LIST
8805: LIST
8806: LIST
8807: LIST
8808: LIST
8809: LIST
8810: LIST
8811: LIST
8812: LIST
8813: PUSH
8814: LD_INT 101
8816: PUSH
8817: LD_INT 102
8819: PUSH
8820: LD_INT 103
8822: PUSH
8823: LD_INT 105
8825: PUSH
8826: LD_INT 106
8828: PUSH
8829: LD_INT 108
8831: PUSH
8832: LD_INT 109
8834: PUSH
8835: LD_INT 112
8837: PUSH
8838: EMPTY
8839: LIST
8840: LIST
8841: LIST
8842: LIST
8843: LIST
8844: LIST
8845: LIST
8846: LIST
8847: PUSH
8848: EMPTY
8849: LIST
8850: LIST
8851: ST_TO_ADDR
8852: GO 10975
8854: LD_INT 9
8856: DOUBLE
8857: EQUAL
8858: IFTRUE 8862
8860: GO 8998
8862: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
8863: LD_ADDR_VAR 0 1
8867: PUSH
8868: LD_INT 2
8870: PUSH
8871: LD_INT 4
8873: PUSH
8874: LD_INT 5
8876: PUSH
8877: LD_INT 6
8879: PUSH
8880: LD_INT 7
8882: PUSH
8883: LD_INT 8
8885: PUSH
8886: LD_INT 11
8888: PUSH
8889: LD_INT 12
8891: PUSH
8892: LD_INT 15
8894: PUSH
8895: LD_INT 16
8897: PUSH
8898: LD_INT 20
8900: PUSH
8901: LD_INT 21
8903: PUSH
8904: LD_INT 22
8906: PUSH
8907: LD_INT 23
8909: PUSH
8910: LD_INT 25
8912: PUSH
8913: LD_INT 26
8915: PUSH
8916: LD_INT 28
8918: PUSH
8919: LD_INT 30
8921: PUSH
8922: LD_INT 31
8924: PUSH
8925: LD_INT 32
8927: PUSH
8928: LD_INT 36
8930: PUSH
8931: EMPTY
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: LIST
8940: LIST
8941: LIST
8942: LIST
8943: LIST
8944: LIST
8945: LIST
8946: LIST
8947: LIST
8948: LIST
8949: LIST
8950: LIST
8951: LIST
8952: LIST
8953: PUSH
8954: LD_INT 101
8956: PUSH
8957: LD_INT 102
8959: PUSH
8960: LD_INT 103
8962: PUSH
8963: LD_INT 105
8965: PUSH
8966: LD_INT 106
8968: PUSH
8969: LD_INT 108
8971: PUSH
8972: LD_INT 109
8974: PUSH
8975: LD_INT 112
8977: PUSH
8978: LD_INT 114
8980: PUSH
8981: EMPTY
8982: LIST
8983: LIST
8984: LIST
8985: LIST
8986: LIST
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: PUSH
8992: EMPTY
8993: LIST
8994: LIST
8995: ST_TO_ADDR
8996: GO 10975
8998: LD_INT 10
9000: DOUBLE
9001: EQUAL
9002: IFTRUE 9006
9004: GO 9190
9006: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
9007: LD_ADDR_VAR 0 1
9011: PUSH
9012: LD_INT 2
9014: PUSH
9015: LD_INT 4
9017: PUSH
9018: LD_INT 5
9020: PUSH
9021: LD_INT 6
9023: PUSH
9024: LD_INT 7
9026: PUSH
9027: LD_INT 8
9029: PUSH
9030: LD_INT 9
9032: PUSH
9033: LD_INT 10
9035: PUSH
9036: LD_INT 11
9038: PUSH
9039: LD_INT 12
9041: PUSH
9042: LD_INT 13
9044: PUSH
9045: LD_INT 14
9047: PUSH
9048: LD_INT 15
9050: PUSH
9051: LD_INT 16
9053: PUSH
9054: LD_INT 17
9056: PUSH
9057: LD_INT 18
9059: PUSH
9060: LD_INT 19
9062: PUSH
9063: LD_INT 20
9065: PUSH
9066: LD_INT 21
9068: PUSH
9069: LD_INT 22
9071: PUSH
9072: LD_INT 23
9074: PUSH
9075: LD_INT 24
9077: PUSH
9078: LD_INT 25
9080: PUSH
9081: LD_INT 26
9083: PUSH
9084: LD_INT 28
9086: PUSH
9087: LD_INT 30
9089: PUSH
9090: LD_INT 31
9092: PUSH
9093: LD_INT 32
9095: PUSH
9096: LD_INT 36
9098: PUSH
9099: EMPTY
9100: LIST
9101: LIST
9102: LIST
9103: LIST
9104: LIST
9105: LIST
9106: LIST
9107: LIST
9108: LIST
9109: LIST
9110: LIST
9111: LIST
9112: LIST
9113: LIST
9114: LIST
9115: LIST
9116: LIST
9117: LIST
9118: LIST
9119: LIST
9120: LIST
9121: LIST
9122: LIST
9123: LIST
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: LIST
9129: PUSH
9130: LD_INT 101
9132: PUSH
9133: LD_INT 102
9135: PUSH
9136: LD_INT 103
9138: PUSH
9139: LD_INT 104
9141: PUSH
9142: LD_INT 105
9144: PUSH
9145: LD_INT 106
9147: PUSH
9148: LD_INT 107
9150: PUSH
9151: LD_INT 108
9153: PUSH
9154: LD_INT 109
9156: PUSH
9157: LD_INT 110
9159: PUSH
9160: LD_INT 111
9162: PUSH
9163: LD_INT 112
9165: PUSH
9166: LD_INT 114
9168: PUSH
9169: EMPTY
9170: LIST
9171: LIST
9172: LIST
9173: LIST
9174: LIST
9175: LIST
9176: LIST
9177: LIST
9178: LIST
9179: LIST
9180: LIST
9181: LIST
9182: LIST
9183: PUSH
9184: EMPTY
9185: LIST
9186: LIST
9187: ST_TO_ADDR
9188: GO 10975
9190: LD_INT 11
9192: DOUBLE
9193: EQUAL
9194: IFTRUE 9198
9196: GO 9390
9198: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
9199: LD_ADDR_VAR 0 1
9203: PUSH
9204: LD_INT 2
9206: PUSH
9207: LD_INT 3
9209: PUSH
9210: LD_INT 4
9212: PUSH
9213: LD_INT 5
9215: PUSH
9216: LD_INT 6
9218: PUSH
9219: LD_INT 7
9221: PUSH
9222: LD_INT 8
9224: PUSH
9225: LD_INT 9
9227: PUSH
9228: LD_INT 10
9230: PUSH
9231: LD_INT 11
9233: PUSH
9234: LD_INT 12
9236: PUSH
9237: LD_INT 13
9239: PUSH
9240: LD_INT 14
9242: PUSH
9243: LD_INT 15
9245: PUSH
9246: LD_INT 16
9248: PUSH
9249: LD_INT 17
9251: PUSH
9252: LD_INT 18
9254: PUSH
9255: LD_INT 19
9257: PUSH
9258: LD_INT 20
9260: PUSH
9261: LD_INT 21
9263: PUSH
9264: LD_INT 22
9266: PUSH
9267: LD_INT 23
9269: PUSH
9270: LD_INT 24
9272: PUSH
9273: LD_INT 25
9275: PUSH
9276: LD_INT 26
9278: PUSH
9279: LD_INT 28
9281: PUSH
9282: LD_INT 30
9284: PUSH
9285: LD_INT 31
9287: PUSH
9288: LD_INT 32
9290: PUSH
9291: LD_INT 34
9293: PUSH
9294: LD_INT 36
9296: PUSH
9297: EMPTY
9298: LIST
9299: LIST
9300: LIST
9301: LIST
9302: LIST
9303: LIST
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: LIST
9312: LIST
9313: LIST
9314: LIST
9315: LIST
9316: LIST
9317: LIST
9318: LIST
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: LIST
9324: LIST
9325: LIST
9326: LIST
9327: LIST
9328: LIST
9329: PUSH
9330: LD_INT 101
9332: PUSH
9333: LD_INT 102
9335: PUSH
9336: LD_INT 103
9338: PUSH
9339: LD_INT 104
9341: PUSH
9342: LD_INT 105
9344: PUSH
9345: LD_INT 106
9347: PUSH
9348: LD_INT 107
9350: PUSH
9351: LD_INT 108
9353: PUSH
9354: LD_INT 109
9356: PUSH
9357: LD_INT 110
9359: PUSH
9360: LD_INT 111
9362: PUSH
9363: LD_INT 112
9365: PUSH
9366: LD_INT 114
9368: PUSH
9369: EMPTY
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: PUSH
9384: EMPTY
9385: LIST
9386: LIST
9387: ST_TO_ADDR
9388: GO 10975
9390: LD_INT 12
9392: DOUBLE
9393: EQUAL
9394: IFTRUE 9398
9396: GO 9606
9398: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
9399: LD_ADDR_VAR 0 1
9403: PUSH
9404: LD_INT 1
9406: PUSH
9407: LD_INT 2
9409: PUSH
9410: LD_INT 3
9412: PUSH
9413: LD_INT 4
9415: PUSH
9416: LD_INT 5
9418: PUSH
9419: LD_INT 6
9421: PUSH
9422: LD_INT 7
9424: PUSH
9425: LD_INT 8
9427: PUSH
9428: LD_INT 9
9430: PUSH
9431: LD_INT 10
9433: PUSH
9434: LD_INT 11
9436: PUSH
9437: LD_INT 12
9439: PUSH
9440: LD_INT 13
9442: PUSH
9443: LD_INT 14
9445: PUSH
9446: LD_INT 15
9448: PUSH
9449: LD_INT 16
9451: PUSH
9452: LD_INT 17
9454: PUSH
9455: LD_INT 18
9457: PUSH
9458: LD_INT 19
9460: PUSH
9461: LD_INT 20
9463: PUSH
9464: LD_INT 21
9466: PUSH
9467: LD_INT 22
9469: PUSH
9470: LD_INT 23
9472: PUSH
9473: LD_INT 24
9475: PUSH
9476: LD_INT 25
9478: PUSH
9479: LD_INT 26
9481: PUSH
9482: LD_INT 27
9484: PUSH
9485: LD_INT 28
9487: PUSH
9488: LD_INT 30
9490: PUSH
9491: LD_INT 31
9493: PUSH
9494: LD_INT 32
9496: PUSH
9497: LD_INT 33
9499: PUSH
9500: LD_INT 34
9502: PUSH
9503: LD_INT 36
9505: PUSH
9506: EMPTY
9507: LIST
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: LIST
9513: LIST
9514: LIST
9515: LIST
9516: LIST
9517: LIST
9518: LIST
9519: LIST
9520: LIST
9521: LIST
9522: LIST
9523: LIST
9524: LIST
9525: LIST
9526: LIST
9527: LIST
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: LIST
9538: LIST
9539: LIST
9540: LIST
9541: PUSH
9542: LD_INT 101
9544: PUSH
9545: LD_INT 102
9547: PUSH
9548: LD_INT 103
9550: PUSH
9551: LD_INT 104
9553: PUSH
9554: LD_INT 105
9556: PUSH
9557: LD_INT 106
9559: PUSH
9560: LD_INT 107
9562: PUSH
9563: LD_INT 108
9565: PUSH
9566: LD_INT 109
9568: PUSH
9569: LD_INT 110
9571: PUSH
9572: LD_INT 111
9574: PUSH
9575: LD_INT 112
9577: PUSH
9578: LD_INT 113
9580: PUSH
9581: LD_INT 114
9583: PUSH
9584: EMPTY
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: PUSH
9600: EMPTY
9601: LIST
9602: LIST
9603: ST_TO_ADDR
9604: GO 10975
9606: LD_INT 13
9608: DOUBLE
9609: EQUAL
9610: IFTRUE 9614
9612: GO 9810
9614: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
9615: LD_ADDR_VAR 0 1
9619: PUSH
9620: LD_INT 1
9622: PUSH
9623: LD_INT 2
9625: PUSH
9626: LD_INT 3
9628: PUSH
9629: LD_INT 4
9631: PUSH
9632: LD_INT 5
9634: PUSH
9635: LD_INT 8
9637: PUSH
9638: LD_INT 9
9640: PUSH
9641: LD_INT 10
9643: PUSH
9644: LD_INT 11
9646: PUSH
9647: LD_INT 12
9649: PUSH
9650: LD_INT 14
9652: PUSH
9653: LD_INT 15
9655: PUSH
9656: LD_INT 16
9658: PUSH
9659: LD_INT 17
9661: PUSH
9662: LD_INT 18
9664: PUSH
9665: LD_INT 19
9667: PUSH
9668: LD_INT 20
9670: PUSH
9671: LD_INT 21
9673: PUSH
9674: LD_INT 22
9676: PUSH
9677: LD_INT 23
9679: PUSH
9680: LD_INT 24
9682: PUSH
9683: LD_INT 25
9685: PUSH
9686: LD_INT 26
9688: PUSH
9689: LD_INT 27
9691: PUSH
9692: LD_INT 28
9694: PUSH
9695: LD_INT 30
9697: PUSH
9698: LD_INT 31
9700: PUSH
9701: LD_INT 32
9703: PUSH
9704: LD_INT 33
9706: PUSH
9707: LD_INT 34
9709: PUSH
9710: LD_INT 36
9712: PUSH
9713: EMPTY
9714: LIST
9715: LIST
9716: LIST
9717: LIST
9718: LIST
9719: LIST
9720: LIST
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: LIST
9728: LIST
9729: LIST
9730: LIST
9731: LIST
9732: LIST
9733: LIST
9734: LIST
9735: LIST
9736: LIST
9737: LIST
9738: LIST
9739: LIST
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: LIST
9745: PUSH
9746: LD_INT 101
9748: PUSH
9749: LD_INT 102
9751: PUSH
9752: LD_INT 103
9754: PUSH
9755: LD_INT 104
9757: PUSH
9758: LD_INT 105
9760: PUSH
9761: LD_INT 106
9763: PUSH
9764: LD_INT 107
9766: PUSH
9767: LD_INT 108
9769: PUSH
9770: LD_INT 109
9772: PUSH
9773: LD_INT 110
9775: PUSH
9776: LD_INT 111
9778: PUSH
9779: LD_INT 112
9781: PUSH
9782: LD_INT 113
9784: PUSH
9785: LD_INT 114
9787: PUSH
9788: EMPTY
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: LIST
9795: LIST
9796: LIST
9797: LIST
9798: LIST
9799: LIST
9800: LIST
9801: LIST
9802: LIST
9803: PUSH
9804: EMPTY
9805: LIST
9806: LIST
9807: ST_TO_ADDR
9808: GO 10975
9810: LD_INT 14
9812: DOUBLE
9813: EQUAL
9814: IFTRUE 9818
9816: GO 10030
9818: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
9819: LD_ADDR_VAR 0 1
9823: PUSH
9824: LD_INT 1
9826: PUSH
9827: LD_INT 2
9829: PUSH
9830: LD_INT 3
9832: PUSH
9833: LD_INT 4
9835: PUSH
9836: LD_INT 5
9838: PUSH
9839: LD_INT 6
9841: PUSH
9842: LD_INT 7
9844: PUSH
9845: LD_INT 8
9847: PUSH
9848: LD_INT 9
9850: PUSH
9851: LD_INT 10
9853: PUSH
9854: LD_INT 11
9856: PUSH
9857: LD_INT 12
9859: PUSH
9860: LD_INT 13
9862: PUSH
9863: LD_INT 14
9865: PUSH
9866: LD_INT 15
9868: PUSH
9869: LD_INT 16
9871: PUSH
9872: LD_INT 17
9874: PUSH
9875: LD_INT 18
9877: PUSH
9878: LD_INT 19
9880: PUSH
9881: LD_INT 20
9883: PUSH
9884: LD_INT 21
9886: PUSH
9887: LD_INT 22
9889: PUSH
9890: LD_INT 23
9892: PUSH
9893: LD_INT 24
9895: PUSH
9896: LD_INT 25
9898: PUSH
9899: LD_INT 26
9901: PUSH
9902: LD_INT 27
9904: PUSH
9905: LD_INT 28
9907: PUSH
9908: LD_INT 29
9910: PUSH
9911: LD_INT 30
9913: PUSH
9914: LD_INT 31
9916: PUSH
9917: LD_INT 32
9919: PUSH
9920: LD_INT 33
9922: PUSH
9923: LD_INT 34
9925: PUSH
9926: LD_INT 36
9928: PUSH
9929: EMPTY
9930: LIST
9931: LIST
9932: LIST
9933: LIST
9934: LIST
9935: LIST
9936: LIST
9937: LIST
9938: LIST
9939: LIST
9940: LIST
9941: LIST
9942: LIST
9943: LIST
9944: LIST
9945: LIST
9946: LIST
9947: LIST
9948: LIST
9949: LIST
9950: LIST
9951: LIST
9952: LIST
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: PUSH
9966: LD_INT 101
9968: PUSH
9969: LD_INT 102
9971: PUSH
9972: LD_INT 103
9974: PUSH
9975: LD_INT 104
9977: PUSH
9978: LD_INT 105
9980: PUSH
9981: LD_INT 106
9983: PUSH
9984: LD_INT 107
9986: PUSH
9987: LD_INT 108
9989: PUSH
9990: LD_INT 109
9992: PUSH
9993: LD_INT 110
9995: PUSH
9996: LD_INT 111
9998: PUSH
9999: LD_INT 112
10001: PUSH
10002: LD_INT 113
10004: PUSH
10005: LD_INT 114
10007: PUSH
10008: EMPTY
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: LIST
10015: LIST
10016: LIST
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: PUSH
10024: EMPTY
10025: LIST
10026: LIST
10027: ST_TO_ADDR
10028: GO 10975
10030: LD_INT 15
10032: DOUBLE
10033: EQUAL
10034: IFTRUE 10038
10036: GO 10250
10038: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
10039: LD_ADDR_VAR 0 1
10043: PUSH
10044: LD_INT 1
10046: PUSH
10047: LD_INT 2
10049: PUSH
10050: LD_INT 3
10052: PUSH
10053: LD_INT 4
10055: PUSH
10056: LD_INT 5
10058: PUSH
10059: LD_INT 6
10061: PUSH
10062: LD_INT 7
10064: PUSH
10065: LD_INT 8
10067: PUSH
10068: LD_INT 9
10070: PUSH
10071: LD_INT 10
10073: PUSH
10074: LD_INT 11
10076: PUSH
10077: LD_INT 12
10079: PUSH
10080: LD_INT 13
10082: PUSH
10083: LD_INT 14
10085: PUSH
10086: LD_INT 15
10088: PUSH
10089: LD_INT 16
10091: PUSH
10092: LD_INT 17
10094: PUSH
10095: LD_INT 18
10097: PUSH
10098: LD_INT 19
10100: PUSH
10101: LD_INT 20
10103: PUSH
10104: LD_INT 21
10106: PUSH
10107: LD_INT 22
10109: PUSH
10110: LD_INT 23
10112: PUSH
10113: LD_INT 24
10115: PUSH
10116: LD_INT 25
10118: PUSH
10119: LD_INT 26
10121: PUSH
10122: LD_INT 27
10124: PUSH
10125: LD_INT 28
10127: PUSH
10128: LD_INT 29
10130: PUSH
10131: LD_INT 30
10133: PUSH
10134: LD_INT 31
10136: PUSH
10137: LD_INT 32
10139: PUSH
10140: LD_INT 33
10142: PUSH
10143: LD_INT 34
10145: PUSH
10146: LD_INT 36
10148: PUSH
10149: EMPTY
10150: LIST
10151: LIST
10152: LIST
10153: LIST
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: LIST
10159: LIST
10160: LIST
10161: LIST
10162: LIST
10163: LIST
10164: LIST
10165: LIST
10166: LIST
10167: LIST
10168: LIST
10169: LIST
10170: LIST
10171: LIST
10172: LIST
10173: LIST
10174: LIST
10175: LIST
10176: LIST
10177: LIST
10178: LIST
10179: LIST
10180: LIST
10181: LIST
10182: LIST
10183: LIST
10184: LIST
10185: PUSH
10186: LD_INT 101
10188: PUSH
10189: LD_INT 102
10191: PUSH
10192: LD_INT 103
10194: PUSH
10195: LD_INT 104
10197: PUSH
10198: LD_INT 105
10200: PUSH
10201: LD_INT 106
10203: PUSH
10204: LD_INT 107
10206: PUSH
10207: LD_INT 108
10209: PUSH
10210: LD_INT 109
10212: PUSH
10213: LD_INT 110
10215: PUSH
10216: LD_INT 111
10218: PUSH
10219: LD_INT 112
10221: PUSH
10222: LD_INT 113
10224: PUSH
10225: LD_INT 114
10227: PUSH
10228: EMPTY
10229: LIST
10230: LIST
10231: LIST
10232: LIST
10233: LIST
10234: LIST
10235: LIST
10236: LIST
10237: LIST
10238: LIST
10239: LIST
10240: LIST
10241: LIST
10242: LIST
10243: PUSH
10244: EMPTY
10245: LIST
10246: LIST
10247: ST_TO_ADDR
10248: GO 10975
10250: LD_INT 16
10252: DOUBLE
10253: EQUAL
10254: IFTRUE 10258
10256: GO 10382
10258: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
10259: LD_ADDR_VAR 0 1
10263: PUSH
10264: LD_INT 2
10266: PUSH
10267: LD_INT 4
10269: PUSH
10270: LD_INT 5
10272: PUSH
10273: LD_INT 7
10275: PUSH
10276: LD_INT 11
10278: PUSH
10279: LD_INT 12
10281: PUSH
10282: LD_INT 15
10284: PUSH
10285: LD_INT 16
10287: PUSH
10288: LD_INT 20
10290: PUSH
10291: LD_INT 21
10293: PUSH
10294: LD_INT 22
10296: PUSH
10297: LD_INT 23
10299: PUSH
10300: LD_INT 25
10302: PUSH
10303: LD_INT 26
10305: PUSH
10306: LD_INT 30
10308: PUSH
10309: LD_INT 31
10311: PUSH
10312: LD_INT 32
10314: PUSH
10315: LD_INT 33
10317: PUSH
10318: LD_INT 34
10320: PUSH
10321: EMPTY
10322: LIST
10323: LIST
10324: LIST
10325: LIST
10326: LIST
10327: LIST
10328: LIST
10329: LIST
10330: LIST
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: LIST
10336: LIST
10337: LIST
10338: LIST
10339: LIST
10340: LIST
10341: PUSH
10342: LD_INT 101
10344: PUSH
10345: LD_INT 102
10347: PUSH
10348: LD_INT 103
10350: PUSH
10351: LD_INT 106
10353: PUSH
10354: LD_INT 108
10356: PUSH
10357: LD_INT 112
10359: PUSH
10360: LD_INT 113
10362: PUSH
10363: LD_INT 114
10365: PUSH
10366: EMPTY
10367: LIST
10368: LIST
10369: LIST
10370: LIST
10371: LIST
10372: LIST
10373: LIST
10374: LIST
10375: PUSH
10376: EMPTY
10377: LIST
10378: LIST
10379: ST_TO_ADDR
10380: GO 10975
10382: LD_INT 17
10384: DOUBLE
10385: EQUAL
10386: IFTRUE 10390
10388: GO 10602
10390: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
10391: LD_ADDR_VAR 0 1
10395: PUSH
10396: LD_INT 1
10398: PUSH
10399: LD_INT 2
10401: PUSH
10402: LD_INT 3
10404: PUSH
10405: LD_INT 4
10407: PUSH
10408: LD_INT 5
10410: PUSH
10411: LD_INT 6
10413: PUSH
10414: LD_INT 7
10416: PUSH
10417: LD_INT 8
10419: PUSH
10420: LD_INT 9
10422: PUSH
10423: LD_INT 10
10425: PUSH
10426: LD_INT 11
10428: PUSH
10429: LD_INT 12
10431: PUSH
10432: LD_INT 13
10434: PUSH
10435: LD_INT 14
10437: PUSH
10438: LD_INT 15
10440: PUSH
10441: LD_INT 16
10443: PUSH
10444: LD_INT 17
10446: PUSH
10447: LD_INT 18
10449: PUSH
10450: LD_INT 19
10452: PUSH
10453: LD_INT 20
10455: PUSH
10456: LD_INT 21
10458: PUSH
10459: LD_INT 22
10461: PUSH
10462: LD_INT 23
10464: PUSH
10465: LD_INT 24
10467: PUSH
10468: LD_INT 25
10470: PUSH
10471: LD_INT 26
10473: PUSH
10474: LD_INT 27
10476: PUSH
10477: LD_INT 28
10479: PUSH
10480: LD_INT 29
10482: PUSH
10483: LD_INT 30
10485: PUSH
10486: LD_INT 31
10488: PUSH
10489: LD_INT 32
10491: PUSH
10492: LD_INT 33
10494: PUSH
10495: LD_INT 34
10497: PUSH
10498: LD_INT 36
10500: PUSH
10501: EMPTY
10502: LIST
10503: LIST
10504: LIST
10505: LIST
10506: LIST
10507: LIST
10508: LIST
10509: LIST
10510: LIST
10511: LIST
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: PUSH
10538: LD_INT 101
10540: PUSH
10541: LD_INT 102
10543: PUSH
10544: LD_INT 103
10546: PUSH
10547: LD_INT 104
10549: PUSH
10550: LD_INT 105
10552: PUSH
10553: LD_INT 106
10555: PUSH
10556: LD_INT 107
10558: PUSH
10559: LD_INT 108
10561: PUSH
10562: LD_INT 109
10564: PUSH
10565: LD_INT 110
10567: PUSH
10568: LD_INT 111
10570: PUSH
10571: LD_INT 112
10573: PUSH
10574: LD_INT 113
10576: PUSH
10577: LD_INT 114
10579: PUSH
10580: EMPTY
10581: LIST
10582: LIST
10583: LIST
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: LIST
10594: LIST
10595: PUSH
10596: EMPTY
10597: LIST
10598: LIST
10599: ST_TO_ADDR
10600: GO 10975
10602: LD_INT 18
10604: DOUBLE
10605: EQUAL
10606: IFTRUE 10610
10608: GO 10746
10610: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
10611: LD_ADDR_VAR 0 1
10615: PUSH
10616: LD_INT 2
10618: PUSH
10619: LD_INT 4
10621: PUSH
10622: LD_INT 5
10624: PUSH
10625: LD_INT 7
10627: PUSH
10628: LD_INT 11
10630: PUSH
10631: LD_INT 12
10633: PUSH
10634: LD_INT 15
10636: PUSH
10637: LD_INT 16
10639: PUSH
10640: LD_INT 20
10642: PUSH
10643: LD_INT 21
10645: PUSH
10646: LD_INT 22
10648: PUSH
10649: LD_INT 23
10651: PUSH
10652: LD_INT 25
10654: PUSH
10655: LD_INT 26
10657: PUSH
10658: LD_INT 30
10660: PUSH
10661: LD_INT 31
10663: PUSH
10664: LD_INT 32
10666: PUSH
10667: LD_INT 33
10669: PUSH
10670: LD_INT 34
10672: PUSH
10673: LD_INT 35
10675: PUSH
10676: LD_INT 36
10678: PUSH
10679: EMPTY
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: LIST
10687: LIST
10688: LIST
10689: LIST
10690: LIST
10691: LIST
10692: LIST
10693: LIST
10694: LIST
10695: LIST
10696: LIST
10697: LIST
10698: LIST
10699: LIST
10700: LIST
10701: PUSH
10702: LD_INT 101
10704: PUSH
10705: LD_INT 102
10707: PUSH
10708: LD_INT 103
10710: PUSH
10711: LD_INT 106
10713: PUSH
10714: LD_INT 108
10716: PUSH
10717: LD_INT 112
10719: PUSH
10720: LD_INT 113
10722: PUSH
10723: LD_INT 114
10725: PUSH
10726: LD_INT 115
10728: PUSH
10729: EMPTY
10730: LIST
10731: LIST
10732: LIST
10733: LIST
10734: LIST
10735: LIST
10736: LIST
10737: LIST
10738: LIST
10739: PUSH
10740: EMPTY
10741: LIST
10742: LIST
10743: ST_TO_ADDR
10744: GO 10975
10746: LD_INT 19
10748: DOUBLE
10749: EQUAL
10750: IFTRUE 10754
10752: GO 10974
10754: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
10755: LD_ADDR_VAR 0 1
10759: PUSH
10760: LD_INT 1
10762: PUSH
10763: LD_INT 2
10765: PUSH
10766: LD_INT 3
10768: PUSH
10769: LD_INT 4
10771: PUSH
10772: LD_INT 5
10774: PUSH
10775: LD_INT 6
10777: PUSH
10778: LD_INT 7
10780: PUSH
10781: LD_INT 8
10783: PUSH
10784: LD_INT 9
10786: PUSH
10787: LD_INT 10
10789: PUSH
10790: LD_INT 11
10792: PUSH
10793: LD_INT 12
10795: PUSH
10796: LD_INT 13
10798: PUSH
10799: LD_INT 14
10801: PUSH
10802: LD_INT 15
10804: PUSH
10805: LD_INT 16
10807: PUSH
10808: LD_INT 17
10810: PUSH
10811: LD_INT 18
10813: PUSH
10814: LD_INT 19
10816: PUSH
10817: LD_INT 20
10819: PUSH
10820: LD_INT 21
10822: PUSH
10823: LD_INT 22
10825: PUSH
10826: LD_INT 23
10828: PUSH
10829: LD_INT 24
10831: PUSH
10832: LD_INT 25
10834: PUSH
10835: LD_INT 26
10837: PUSH
10838: LD_INT 27
10840: PUSH
10841: LD_INT 28
10843: PUSH
10844: LD_INT 29
10846: PUSH
10847: LD_INT 30
10849: PUSH
10850: LD_INT 31
10852: PUSH
10853: LD_INT 32
10855: PUSH
10856: LD_INT 33
10858: PUSH
10859: LD_INT 34
10861: PUSH
10862: LD_INT 35
10864: PUSH
10865: LD_INT 36
10867: PUSH
10868: EMPTY
10869: LIST
10870: LIST
10871: LIST
10872: LIST
10873: LIST
10874: LIST
10875: LIST
10876: LIST
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: LIST
10882: LIST
10883: LIST
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: LIST
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: LIST
10901: LIST
10902: LIST
10903: LIST
10904: LIST
10905: PUSH
10906: LD_INT 101
10908: PUSH
10909: LD_INT 102
10911: PUSH
10912: LD_INT 103
10914: PUSH
10915: LD_INT 104
10917: PUSH
10918: LD_INT 105
10920: PUSH
10921: LD_INT 106
10923: PUSH
10924: LD_INT 107
10926: PUSH
10927: LD_INT 108
10929: PUSH
10930: LD_INT 109
10932: PUSH
10933: LD_INT 110
10935: PUSH
10936: LD_INT 111
10938: PUSH
10939: LD_INT 112
10941: PUSH
10942: LD_INT 113
10944: PUSH
10945: LD_INT 114
10947: PUSH
10948: LD_INT 115
10950: PUSH
10951: EMPTY
10952: LIST
10953: LIST
10954: LIST
10955: LIST
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: LIST
10961: LIST
10962: LIST
10963: LIST
10964: LIST
10965: LIST
10966: LIST
10967: PUSH
10968: EMPTY
10969: LIST
10970: LIST
10971: ST_TO_ADDR
10972: GO 10975
10974: POP
// end else
10975: GO 11194
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
10977: LD_ADDR_VAR 0 1
10981: PUSH
10982: LD_INT 1
10984: PUSH
10985: LD_INT 2
10987: PUSH
10988: LD_INT 3
10990: PUSH
10991: LD_INT 4
10993: PUSH
10994: LD_INT 5
10996: PUSH
10997: LD_INT 6
10999: PUSH
11000: LD_INT 7
11002: PUSH
11003: LD_INT 8
11005: PUSH
11006: LD_INT 9
11008: PUSH
11009: LD_INT 10
11011: PUSH
11012: LD_INT 11
11014: PUSH
11015: LD_INT 12
11017: PUSH
11018: LD_INT 13
11020: PUSH
11021: LD_INT 14
11023: PUSH
11024: LD_INT 15
11026: PUSH
11027: LD_INT 16
11029: PUSH
11030: LD_INT 17
11032: PUSH
11033: LD_INT 18
11035: PUSH
11036: LD_INT 19
11038: PUSH
11039: LD_INT 20
11041: PUSH
11042: LD_INT 21
11044: PUSH
11045: LD_INT 22
11047: PUSH
11048: LD_INT 23
11050: PUSH
11051: LD_INT 24
11053: PUSH
11054: LD_INT 25
11056: PUSH
11057: LD_INT 26
11059: PUSH
11060: LD_INT 27
11062: PUSH
11063: LD_INT 28
11065: PUSH
11066: LD_INT 29
11068: PUSH
11069: LD_INT 30
11071: PUSH
11072: LD_INT 31
11074: PUSH
11075: LD_INT 32
11077: PUSH
11078: LD_INT 33
11080: PUSH
11081: LD_INT 34
11083: PUSH
11084: LD_INT 35
11086: PUSH
11087: LD_INT 36
11089: PUSH
11090: EMPTY
11091: LIST
11092: LIST
11093: LIST
11094: LIST
11095: LIST
11096: LIST
11097: LIST
11098: LIST
11099: LIST
11100: LIST
11101: LIST
11102: LIST
11103: LIST
11104: LIST
11105: LIST
11106: LIST
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: LIST
11124: LIST
11125: LIST
11126: LIST
11127: PUSH
11128: LD_INT 101
11130: PUSH
11131: LD_INT 102
11133: PUSH
11134: LD_INT 103
11136: PUSH
11137: LD_INT 104
11139: PUSH
11140: LD_INT 105
11142: PUSH
11143: LD_INT 106
11145: PUSH
11146: LD_INT 107
11148: PUSH
11149: LD_INT 108
11151: PUSH
11152: LD_INT 109
11154: PUSH
11155: LD_INT 110
11157: PUSH
11158: LD_INT 111
11160: PUSH
11161: LD_INT 112
11163: PUSH
11164: LD_INT 113
11166: PUSH
11167: LD_INT 114
11169: PUSH
11170: LD_INT 115
11172: PUSH
11173: EMPTY
11174: LIST
11175: LIST
11176: LIST
11177: LIST
11178: LIST
11179: LIST
11180: LIST
11181: LIST
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: LIST
11187: LIST
11188: LIST
11189: PUSH
11190: EMPTY
11191: LIST
11192: LIST
11193: ST_TO_ADDR
// if result then
11194: LD_VAR 0 1
11198: IFFALSE 11487
// begin normal :=  ;
11200: LD_ADDR_VAR 0 3
11204: PUSH
11205: LD_STRING 
11207: ST_TO_ADDR
// hardcore :=  ;
11208: LD_ADDR_VAR 0 4
11212: PUSH
11213: LD_STRING 
11215: ST_TO_ADDR
// for i = 1 to normalCounter do
11216: LD_ADDR_VAR 0 5
11220: PUSH
11221: DOUBLE
11222: LD_INT 1
11224: DEC
11225: ST_TO_ADDR
11226: LD_EXP 28
11230: PUSH
11231: FOR_TO
11232: IFFALSE 11333
// begin tmp := 0 ;
11234: LD_ADDR_VAR 0 2
11238: PUSH
11239: LD_STRING 0
11241: ST_TO_ADDR
// if result [ 1 ] then
11242: LD_VAR 0 1
11246: PUSH
11247: LD_INT 1
11249: ARRAY
11250: IFFALSE 11315
// if result [ 1 ] [ 1 ] = i then
11252: LD_VAR 0 1
11256: PUSH
11257: LD_INT 1
11259: ARRAY
11260: PUSH
11261: LD_INT 1
11263: ARRAY
11264: PUSH
11265: LD_VAR 0 5
11269: EQUAL
11270: IFFALSE 11315
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
11272: LD_ADDR_VAR 0 1
11276: PUSH
11277: LD_VAR 0 1
11281: PPUSH
11282: LD_INT 1
11284: PPUSH
11285: LD_VAR 0 1
11289: PUSH
11290: LD_INT 1
11292: ARRAY
11293: PPUSH
11294: LD_INT 1
11296: PPUSH
11297: CALL_OW 3
11301: PPUSH
11302: CALL_OW 1
11306: ST_TO_ADDR
// tmp := 1 ;
11307: LD_ADDR_VAR 0 2
11311: PUSH
11312: LD_STRING 1
11314: ST_TO_ADDR
// end ; normal := normal & tmp ;
11315: LD_ADDR_VAR 0 3
11319: PUSH
11320: LD_VAR 0 3
11324: PUSH
11325: LD_VAR 0 2
11329: STR
11330: ST_TO_ADDR
// end ;
11331: GO 11231
11333: POP
11334: POP
// for i = 1 to hardcoreCounter do
11335: LD_ADDR_VAR 0 5
11339: PUSH
11340: DOUBLE
11341: LD_INT 1
11343: DEC
11344: ST_TO_ADDR
11345: LD_EXP 29
11349: PUSH
11350: FOR_TO
11351: IFFALSE 11456
// begin tmp := 0 ;
11353: LD_ADDR_VAR 0 2
11357: PUSH
11358: LD_STRING 0
11360: ST_TO_ADDR
// if result [ 2 ] then
11361: LD_VAR 0 1
11365: PUSH
11366: LD_INT 2
11368: ARRAY
11369: IFFALSE 11438
// if result [ 2 ] [ 1 ] = 100 + i then
11371: LD_VAR 0 1
11375: PUSH
11376: LD_INT 2
11378: ARRAY
11379: PUSH
11380: LD_INT 1
11382: ARRAY
11383: PUSH
11384: LD_INT 100
11386: PUSH
11387: LD_VAR 0 5
11391: PLUS
11392: EQUAL
11393: IFFALSE 11438
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
11395: LD_ADDR_VAR 0 1
11399: PUSH
11400: LD_VAR 0 1
11404: PPUSH
11405: LD_INT 2
11407: PPUSH
11408: LD_VAR 0 1
11412: PUSH
11413: LD_INT 2
11415: ARRAY
11416: PPUSH
11417: LD_INT 1
11419: PPUSH
11420: CALL_OW 3
11424: PPUSH
11425: CALL_OW 1
11429: ST_TO_ADDR
// tmp := 1 ;
11430: LD_ADDR_VAR 0 2
11434: PUSH
11435: LD_STRING 1
11437: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
11438: LD_ADDR_VAR 0 4
11442: PUSH
11443: LD_VAR 0 4
11447: PUSH
11448: LD_VAR 0 2
11452: STR
11453: ST_TO_ADDR
// end ;
11454: GO 11350
11456: POP
11457: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
11458: LD_STRING getStreamItemsFromMission("
11460: PUSH
11461: LD_VAR 0 3
11465: STR
11466: PUSH
11467: LD_STRING ","
11469: STR
11470: PUSH
11471: LD_VAR 0 4
11475: STR
11476: PUSH
11477: LD_STRING ")
11479: STR
11480: PPUSH
11481: CALL_OW 559
// end else
11485: GO 11494
// ToLua ( getStreamItemsFromMission("","") ) ;
11487: LD_STRING getStreamItemsFromMission("","")
11489: PPUSH
11490: CALL_OW 559
// end ;
11494: LD_VAR 0 1
11498: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11499: LD_EXP 27
11503: PUSH
11504: LD_EXP 32
11508: AND
11509: IFFALSE 11633
11511: GO 11513
11513: DISABLE
11514: LD_INT 0
11516: PPUSH
11517: PPUSH
// begin enable ;
11518: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11519: LD_ADDR_VAR 0 2
11523: PUSH
11524: LD_INT 22
11526: PUSH
11527: LD_OWVAR 2
11531: PUSH
11532: EMPTY
11533: LIST
11534: LIST
11535: PUSH
11536: LD_INT 2
11538: PUSH
11539: LD_INT 34
11541: PUSH
11542: LD_INT 7
11544: PUSH
11545: EMPTY
11546: LIST
11547: LIST
11548: PUSH
11549: LD_INT 34
11551: PUSH
11552: LD_INT 45
11554: PUSH
11555: EMPTY
11556: LIST
11557: LIST
11558: PUSH
11559: LD_INT 34
11561: PUSH
11562: LD_INT 28
11564: PUSH
11565: EMPTY
11566: LIST
11567: LIST
11568: PUSH
11569: LD_INT 34
11571: PUSH
11572: LD_INT 47
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: PUSH
11579: EMPTY
11580: LIST
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: PUSH
11586: EMPTY
11587: LIST
11588: LIST
11589: PPUSH
11590: CALL_OW 69
11594: ST_TO_ADDR
// if not tmp then
11595: LD_VAR 0 2
11599: NOT
11600: IFFALSE 11604
// exit ;
11602: GO 11633
// for i in tmp do
11604: LD_ADDR_VAR 0 1
11608: PUSH
11609: LD_VAR 0 2
11613: PUSH
11614: FOR_IN
11615: IFFALSE 11631
// begin SetLives ( i , 0 ) ;
11617: LD_VAR 0 1
11621: PPUSH
11622: LD_INT 0
11624: PPUSH
11625: CALL_OW 234
// end ;
11629: GO 11614
11631: POP
11632: POP
// end ;
11633: PPOPN 2
11635: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11636: LD_EXP 27
11640: PUSH
11641: LD_EXP 33
11645: AND
11646: IFFALSE 11730
11648: GO 11650
11650: DISABLE
11651: LD_INT 0
11653: PPUSH
11654: PPUSH
// begin enable ;
11655: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11656: LD_ADDR_VAR 0 2
11660: PUSH
11661: LD_INT 22
11663: PUSH
11664: LD_OWVAR 2
11668: PUSH
11669: EMPTY
11670: LIST
11671: LIST
11672: PUSH
11673: LD_INT 32
11675: PUSH
11676: LD_INT 3
11678: PUSH
11679: EMPTY
11680: LIST
11681: LIST
11682: PUSH
11683: EMPTY
11684: LIST
11685: LIST
11686: PPUSH
11687: CALL_OW 69
11691: ST_TO_ADDR
// if not tmp then
11692: LD_VAR 0 2
11696: NOT
11697: IFFALSE 11701
// exit ;
11699: GO 11730
// for i in tmp do
11701: LD_ADDR_VAR 0 1
11705: PUSH
11706: LD_VAR 0 2
11710: PUSH
11711: FOR_IN
11712: IFFALSE 11728
// begin SetLives ( i , 0 ) ;
11714: LD_VAR 0 1
11718: PPUSH
11719: LD_INT 0
11721: PPUSH
11722: CALL_OW 234
// end ;
11726: GO 11711
11728: POP
11729: POP
// end ;
11730: PPOPN 2
11732: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11733: LD_EXP 27
11737: PUSH
11738: LD_EXP 30
11742: AND
11743: IFFALSE 11836
11745: GO 11747
11747: DISABLE
11748: LD_INT 0
11750: PPUSH
// begin enable ;
11751: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11752: LD_ADDR_VAR 0 1
11756: PUSH
11757: LD_INT 22
11759: PUSH
11760: LD_OWVAR 2
11764: PUSH
11765: EMPTY
11766: LIST
11767: LIST
11768: PUSH
11769: LD_INT 2
11771: PUSH
11772: LD_INT 25
11774: PUSH
11775: LD_INT 5
11777: PUSH
11778: EMPTY
11779: LIST
11780: LIST
11781: PUSH
11782: LD_INT 25
11784: PUSH
11785: LD_INT 9
11787: PUSH
11788: EMPTY
11789: LIST
11790: LIST
11791: PUSH
11792: LD_INT 25
11794: PUSH
11795: LD_INT 8
11797: PUSH
11798: EMPTY
11799: LIST
11800: LIST
11801: PUSH
11802: EMPTY
11803: LIST
11804: LIST
11805: LIST
11806: LIST
11807: PUSH
11808: EMPTY
11809: LIST
11810: LIST
11811: PPUSH
11812: CALL_OW 69
11816: PUSH
11817: FOR_IN
11818: IFFALSE 11834
// begin SetClass ( i , 1 ) ;
11820: LD_VAR 0 1
11824: PPUSH
11825: LD_INT 1
11827: PPUSH
11828: CALL_OW 336
// end ;
11832: GO 11817
11834: POP
11835: POP
// end ;
11836: PPOPN 1
11838: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
11839: LD_EXP 27
11843: PUSH
11844: LD_EXP 31
11848: AND
11849: PUSH
11850: LD_OWVAR 65
11854: PUSH
11855: LD_INT 7
11857: LESS
11858: AND
11859: IFFALSE 11873
11861: GO 11863
11863: DISABLE
// begin enable ;
11864: ENABLE
// game_speed := 7 ;
11865: LD_ADDR_OWVAR 65
11869: PUSH
11870: LD_INT 7
11872: ST_TO_ADDR
// end ;
11873: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11874: LD_EXP 27
11878: PUSH
11879: LD_EXP 34
11883: AND
11884: IFFALSE 12086
11886: GO 11888
11888: DISABLE
11889: LD_INT 0
11891: PPUSH
11892: PPUSH
11893: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11894: LD_ADDR_VAR 0 3
11898: PUSH
11899: LD_INT 81
11901: PUSH
11902: LD_OWVAR 2
11906: PUSH
11907: EMPTY
11908: LIST
11909: LIST
11910: PUSH
11911: LD_INT 21
11913: PUSH
11914: LD_INT 1
11916: PUSH
11917: EMPTY
11918: LIST
11919: LIST
11920: PUSH
11921: EMPTY
11922: LIST
11923: LIST
11924: PPUSH
11925: CALL_OW 69
11929: ST_TO_ADDR
// if not tmp then
11930: LD_VAR 0 3
11934: NOT
11935: IFFALSE 11939
// exit ;
11937: GO 12086
// if tmp > 5 then
11939: LD_VAR 0 3
11943: PUSH
11944: LD_INT 5
11946: GREATER
11947: IFFALSE 11959
// k := 5 else
11949: LD_ADDR_VAR 0 2
11953: PUSH
11954: LD_INT 5
11956: ST_TO_ADDR
11957: GO 11969
// k := tmp ;
11959: LD_ADDR_VAR 0 2
11963: PUSH
11964: LD_VAR 0 3
11968: ST_TO_ADDR
// for i := 1 to k do
11969: LD_ADDR_VAR 0 1
11973: PUSH
11974: DOUBLE
11975: LD_INT 1
11977: DEC
11978: ST_TO_ADDR
11979: LD_VAR 0 2
11983: PUSH
11984: FOR_TO
11985: IFFALSE 12084
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11987: LD_VAR 0 3
11991: PUSH
11992: LD_VAR 0 1
11996: ARRAY
11997: PPUSH
11998: LD_VAR 0 1
12002: PUSH
12003: LD_INT 4
12005: MOD
12006: PUSH
12007: LD_INT 1
12009: PLUS
12010: PPUSH
12011: CALL_OW 259
12015: PUSH
12016: LD_INT 10
12018: LESS
12019: IFFALSE 12082
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12021: LD_VAR 0 3
12025: PUSH
12026: LD_VAR 0 1
12030: ARRAY
12031: PPUSH
12032: LD_VAR 0 1
12036: PUSH
12037: LD_INT 4
12039: MOD
12040: PUSH
12041: LD_INT 1
12043: PLUS
12044: PPUSH
12045: LD_VAR 0 3
12049: PUSH
12050: LD_VAR 0 1
12054: ARRAY
12055: PPUSH
12056: LD_VAR 0 1
12060: PUSH
12061: LD_INT 4
12063: MOD
12064: PUSH
12065: LD_INT 1
12067: PLUS
12068: PPUSH
12069: CALL_OW 259
12073: PUSH
12074: LD_INT 1
12076: PLUS
12077: PPUSH
12078: CALL_OW 237
12082: GO 11984
12084: POP
12085: POP
// end ;
12086: PPOPN 3
12088: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12089: LD_EXP 27
12093: PUSH
12094: LD_EXP 35
12098: AND
12099: IFFALSE 12119
12101: GO 12103
12103: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12104: LD_INT 4
12106: PPUSH
12107: LD_OWVAR 2
12111: PPUSH
12112: LD_INT 0
12114: PPUSH
12115: CALL_OW 324
12119: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12120: LD_EXP 27
12124: PUSH
12125: LD_EXP 64
12129: AND
12130: IFFALSE 12150
12132: GO 12134
12134: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
12135: LD_INT 19
12137: PPUSH
12138: LD_OWVAR 2
12142: PPUSH
12143: LD_INT 0
12145: PPUSH
12146: CALL_OW 324
12150: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
12151: LD_EXP 27
12155: PUSH
12156: LD_EXP 36
12160: AND
12161: IFFALSE 12263
12163: GO 12165
12165: DISABLE
12166: LD_INT 0
12168: PPUSH
12169: PPUSH
// begin enable ;
12170: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
12171: LD_ADDR_VAR 0 2
12175: PUSH
12176: LD_INT 22
12178: PUSH
12179: LD_OWVAR 2
12183: PUSH
12184: EMPTY
12185: LIST
12186: LIST
12187: PUSH
12188: LD_INT 2
12190: PUSH
12191: LD_INT 34
12193: PUSH
12194: LD_INT 11
12196: PUSH
12197: EMPTY
12198: LIST
12199: LIST
12200: PUSH
12201: LD_INT 34
12203: PUSH
12204: LD_INT 30
12206: PUSH
12207: EMPTY
12208: LIST
12209: LIST
12210: PUSH
12211: EMPTY
12212: LIST
12213: LIST
12214: LIST
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: PPUSH
12220: CALL_OW 69
12224: ST_TO_ADDR
// if not tmp then
12225: LD_VAR 0 2
12229: NOT
12230: IFFALSE 12234
// exit ;
12232: GO 12263
// for i in tmp do
12234: LD_ADDR_VAR 0 1
12238: PUSH
12239: LD_VAR 0 2
12243: PUSH
12244: FOR_IN
12245: IFFALSE 12261
// begin SetLives ( i , 0 ) ;
12247: LD_VAR 0 1
12251: PPUSH
12252: LD_INT 0
12254: PPUSH
12255: CALL_OW 234
// end ;
12259: GO 12244
12261: POP
12262: POP
// end ;
12263: PPOPN 2
12265: END
// every 0 0$1 trigger StreamModeActive and sBunker do
12266: LD_EXP 27
12270: PUSH
12271: LD_EXP 37
12275: AND
12276: IFFALSE 12296
12278: GO 12280
12280: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
12281: LD_INT 32
12283: PPUSH
12284: LD_OWVAR 2
12288: PPUSH
12289: LD_INT 0
12291: PPUSH
12292: CALL_OW 324
12296: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12297: LD_EXP 27
12301: PUSH
12302: LD_EXP 38
12306: AND
12307: IFFALSE 12488
12309: GO 12311
12311: DISABLE
12312: LD_INT 0
12314: PPUSH
12315: PPUSH
12316: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12317: LD_ADDR_VAR 0 2
12321: PUSH
12322: LD_INT 22
12324: PUSH
12325: LD_OWVAR 2
12329: PUSH
12330: EMPTY
12331: LIST
12332: LIST
12333: PUSH
12334: LD_INT 33
12336: PUSH
12337: LD_INT 3
12339: PUSH
12340: EMPTY
12341: LIST
12342: LIST
12343: PUSH
12344: EMPTY
12345: LIST
12346: LIST
12347: PPUSH
12348: CALL_OW 69
12352: ST_TO_ADDR
// if not tmp then
12353: LD_VAR 0 2
12357: NOT
12358: IFFALSE 12362
// exit ;
12360: GO 12488
// side := 0 ;
12362: LD_ADDR_VAR 0 3
12366: PUSH
12367: LD_INT 0
12369: ST_TO_ADDR
// for i := 1 to 8 do
12370: LD_ADDR_VAR 0 1
12374: PUSH
12375: DOUBLE
12376: LD_INT 1
12378: DEC
12379: ST_TO_ADDR
12380: LD_INT 8
12382: PUSH
12383: FOR_TO
12384: IFFALSE 12432
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12386: LD_OWVAR 2
12390: PUSH
12391: LD_VAR 0 1
12395: NONEQUAL
12396: PUSH
12397: LD_OWVAR 2
12401: PPUSH
12402: LD_VAR 0 1
12406: PPUSH
12407: CALL_OW 81
12411: PUSH
12412: LD_INT 2
12414: EQUAL
12415: AND
12416: IFFALSE 12430
// begin side := i ;
12418: LD_ADDR_VAR 0 3
12422: PUSH
12423: LD_VAR 0 1
12427: ST_TO_ADDR
// break ;
12428: GO 12432
// end ;
12430: GO 12383
12432: POP
12433: POP
// if not side then
12434: LD_VAR 0 3
12438: NOT
12439: IFFALSE 12443
// exit ;
12441: GO 12488
// for i := 1 to tmp do
12443: LD_ADDR_VAR 0 1
12447: PUSH
12448: DOUBLE
12449: LD_INT 1
12451: DEC
12452: ST_TO_ADDR
12453: LD_VAR 0 2
12457: PUSH
12458: FOR_TO
12459: IFFALSE 12486
// if Prob ( 60 ) then
12461: LD_INT 60
12463: PPUSH
12464: CALL_OW 13
12468: IFFALSE 12484
// SetSide ( i , side ) ;
12470: LD_VAR 0 1
12474: PPUSH
12475: LD_VAR 0 3
12479: PPUSH
12480: CALL_OW 235
12484: GO 12458
12486: POP
12487: POP
// end ;
12488: PPOPN 3
12490: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12491: LD_EXP 27
12495: PUSH
12496: LD_EXP 40
12500: AND
12501: IFFALSE 12620
12503: GO 12505
12505: DISABLE
12506: LD_INT 0
12508: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12509: LD_ADDR_VAR 0 1
12513: PUSH
12514: LD_INT 22
12516: PUSH
12517: LD_OWVAR 2
12521: PUSH
12522: EMPTY
12523: LIST
12524: LIST
12525: PUSH
12526: LD_INT 21
12528: PUSH
12529: LD_INT 1
12531: PUSH
12532: EMPTY
12533: LIST
12534: LIST
12535: PUSH
12536: LD_INT 3
12538: PUSH
12539: LD_INT 23
12541: PUSH
12542: LD_INT 0
12544: PUSH
12545: EMPTY
12546: LIST
12547: LIST
12548: PUSH
12549: EMPTY
12550: LIST
12551: LIST
12552: PUSH
12553: EMPTY
12554: LIST
12555: LIST
12556: LIST
12557: PPUSH
12558: CALL_OW 69
12562: PUSH
12563: FOR_IN
12564: IFFALSE 12618
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12566: LD_VAR 0 1
12570: PPUSH
12571: CALL_OW 257
12575: PUSH
12576: LD_INT 1
12578: PUSH
12579: LD_INT 2
12581: PUSH
12582: LD_INT 3
12584: PUSH
12585: LD_INT 4
12587: PUSH
12588: EMPTY
12589: LIST
12590: LIST
12591: LIST
12592: LIST
12593: IN
12594: IFFALSE 12616
// SetClass ( un , rand ( 1 , 4 ) ) ;
12596: LD_VAR 0 1
12600: PPUSH
12601: LD_INT 1
12603: PPUSH
12604: LD_INT 4
12606: PPUSH
12607: CALL_OW 12
12611: PPUSH
12612: CALL_OW 336
12616: GO 12563
12618: POP
12619: POP
// end ;
12620: PPOPN 1
12622: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12623: LD_EXP 27
12627: PUSH
12628: LD_EXP 39
12632: AND
12633: IFFALSE 12712
12635: GO 12637
12637: DISABLE
12638: LD_INT 0
12640: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12641: LD_ADDR_VAR 0 1
12645: PUSH
12646: LD_INT 22
12648: PUSH
12649: LD_OWVAR 2
12653: PUSH
12654: EMPTY
12655: LIST
12656: LIST
12657: PUSH
12658: LD_INT 21
12660: PUSH
12661: LD_INT 3
12663: PUSH
12664: EMPTY
12665: LIST
12666: LIST
12667: PUSH
12668: EMPTY
12669: LIST
12670: LIST
12671: PPUSH
12672: CALL_OW 69
12676: ST_TO_ADDR
// if not tmp then
12677: LD_VAR 0 1
12681: NOT
12682: IFFALSE 12686
// exit ;
12684: GO 12712
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12686: LD_VAR 0 1
12690: PUSH
12691: LD_INT 1
12693: PPUSH
12694: LD_VAR 0 1
12698: PPUSH
12699: CALL_OW 12
12703: ARRAY
12704: PPUSH
12705: LD_INT 100
12707: PPUSH
12708: CALL_OW 234
// end ;
12712: PPOPN 1
12714: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12715: LD_EXP 27
12719: PUSH
12720: LD_EXP 41
12724: AND
12725: IFFALSE 12823
12727: GO 12729
12729: DISABLE
12730: LD_INT 0
12732: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12733: LD_ADDR_VAR 0 1
12737: PUSH
12738: LD_INT 22
12740: PUSH
12741: LD_OWVAR 2
12745: PUSH
12746: EMPTY
12747: LIST
12748: LIST
12749: PUSH
12750: LD_INT 21
12752: PUSH
12753: LD_INT 1
12755: PUSH
12756: EMPTY
12757: LIST
12758: LIST
12759: PUSH
12760: EMPTY
12761: LIST
12762: LIST
12763: PPUSH
12764: CALL_OW 69
12768: ST_TO_ADDR
// if not tmp then
12769: LD_VAR 0 1
12773: NOT
12774: IFFALSE 12778
// exit ;
12776: GO 12823
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12778: LD_VAR 0 1
12782: PUSH
12783: LD_INT 1
12785: PPUSH
12786: LD_VAR 0 1
12790: PPUSH
12791: CALL_OW 12
12795: ARRAY
12796: PPUSH
12797: LD_INT 1
12799: PPUSH
12800: LD_INT 4
12802: PPUSH
12803: CALL_OW 12
12807: PPUSH
12808: LD_INT 3000
12810: PPUSH
12811: LD_INT 9000
12813: PPUSH
12814: CALL_OW 12
12818: PPUSH
12819: CALL_OW 492
// end ;
12823: PPOPN 1
12825: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12826: LD_EXP 27
12830: PUSH
12831: LD_EXP 42
12835: AND
12836: IFFALSE 12856
12838: GO 12840
12840: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
12841: LD_INT 1
12843: PPUSH
12844: LD_OWVAR 2
12848: PPUSH
12849: LD_INT 0
12851: PPUSH
12852: CALL_OW 324
12856: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
12857: LD_EXP 27
12861: PUSH
12862: LD_EXP 43
12866: AND
12867: IFFALSE 12950
12869: GO 12871
12871: DISABLE
12872: LD_INT 0
12874: PPUSH
12875: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12876: LD_ADDR_VAR 0 2
12880: PUSH
12881: LD_INT 22
12883: PUSH
12884: LD_OWVAR 2
12888: PUSH
12889: EMPTY
12890: LIST
12891: LIST
12892: PUSH
12893: LD_INT 21
12895: PUSH
12896: LD_INT 3
12898: PUSH
12899: EMPTY
12900: LIST
12901: LIST
12902: PUSH
12903: EMPTY
12904: LIST
12905: LIST
12906: PPUSH
12907: CALL_OW 69
12911: ST_TO_ADDR
// if not tmp then
12912: LD_VAR 0 2
12916: NOT
12917: IFFALSE 12921
// exit ;
12919: GO 12950
// for i in tmp do
12921: LD_ADDR_VAR 0 1
12925: PUSH
12926: LD_VAR 0 2
12930: PUSH
12931: FOR_IN
12932: IFFALSE 12948
// SetBLevel ( i , 10 ) ;
12934: LD_VAR 0 1
12938: PPUSH
12939: LD_INT 10
12941: PPUSH
12942: CALL_OW 241
12946: GO 12931
12948: POP
12949: POP
// end ;
12950: PPOPN 2
12952: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12953: LD_EXP 27
12957: PUSH
12958: LD_EXP 44
12962: AND
12963: IFFALSE 13074
12965: GO 12967
12967: DISABLE
12968: LD_INT 0
12970: PPUSH
12971: PPUSH
12972: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12973: LD_ADDR_VAR 0 3
12977: PUSH
12978: LD_INT 22
12980: PUSH
12981: LD_OWVAR 2
12985: PUSH
12986: EMPTY
12987: LIST
12988: LIST
12989: PUSH
12990: LD_INT 25
12992: PUSH
12993: LD_INT 1
12995: PUSH
12996: EMPTY
12997: LIST
12998: LIST
12999: PUSH
13000: EMPTY
13001: LIST
13002: LIST
13003: PPUSH
13004: CALL_OW 69
13008: ST_TO_ADDR
// if not tmp then
13009: LD_VAR 0 3
13013: NOT
13014: IFFALSE 13018
// exit ;
13016: GO 13074
// un := tmp [ rand ( 1 , tmp ) ] ;
13018: LD_ADDR_VAR 0 2
13022: PUSH
13023: LD_VAR 0 3
13027: PUSH
13028: LD_INT 1
13030: PPUSH
13031: LD_VAR 0 3
13035: PPUSH
13036: CALL_OW 12
13040: ARRAY
13041: ST_TO_ADDR
// if Crawls ( un ) then
13042: LD_VAR 0 2
13046: PPUSH
13047: CALL_OW 318
13051: IFFALSE 13062
// ComWalk ( un ) ;
13053: LD_VAR 0 2
13057: PPUSH
13058: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13062: LD_VAR 0 2
13066: PPUSH
13067: LD_INT 5
13069: PPUSH
13070: CALL_OW 336
// end ;
13074: PPOPN 3
13076: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
13077: LD_EXP 27
13081: PUSH
13082: LD_EXP 45
13086: AND
13087: PUSH
13088: LD_OWVAR 67
13092: PUSH
13093: LD_INT 4
13095: LESS
13096: AND
13097: IFFALSE 13116
13099: GO 13101
13101: DISABLE
// begin Difficulty := Difficulty + 1 ;
13102: LD_ADDR_OWVAR 67
13106: PUSH
13107: LD_OWVAR 67
13111: PUSH
13112: LD_INT 1
13114: PLUS
13115: ST_TO_ADDR
// end ;
13116: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
13117: LD_EXP 27
13121: PUSH
13122: LD_EXP 46
13126: AND
13127: IFFALSE 13230
13129: GO 13131
13131: DISABLE
13132: LD_INT 0
13134: PPUSH
// begin for i := 1 to 5 do
13135: LD_ADDR_VAR 0 1
13139: PUSH
13140: DOUBLE
13141: LD_INT 1
13143: DEC
13144: ST_TO_ADDR
13145: LD_INT 5
13147: PUSH
13148: FOR_TO
13149: IFFALSE 13228
// begin uc_nation := nation_nature ;
13151: LD_ADDR_OWVAR 21
13155: PUSH
13156: LD_INT 0
13158: ST_TO_ADDR
// uc_side := 0 ;
13159: LD_ADDR_OWVAR 20
13163: PUSH
13164: LD_INT 0
13166: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13167: LD_ADDR_OWVAR 29
13171: PUSH
13172: LD_INT 12
13174: PUSH
13175: LD_INT 12
13177: PUSH
13178: EMPTY
13179: LIST
13180: LIST
13181: ST_TO_ADDR
// hc_agressivity := 20 ;
13182: LD_ADDR_OWVAR 35
13186: PUSH
13187: LD_INT 20
13189: ST_TO_ADDR
// hc_class := class_tiger ;
13190: LD_ADDR_OWVAR 28
13194: PUSH
13195: LD_INT 14
13197: ST_TO_ADDR
// hc_gallery :=  ;
13198: LD_ADDR_OWVAR 33
13202: PUSH
13203: LD_STRING 
13205: ST_TO_ADDR
// hc_name :=  ;
13206: LD_ADDR_OWVAR 26
13210: PUSH
13211: LD_STRING 
13213: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
13214: CALL_OW 44
13218: PPUSH
13219: LD_INT 0
13221: PPUSH
13222: CALL_OW 51
// end ;
13226: GO 13148
13228: POP
13229: POP
// end ;
13230: PPOPN 1
13232: END
// every 0 0$1 trigger StreamModeActive and sBomb do
13233: LD_EXP 27
13237: PUSH
13238: LD_EXP 47
13242: AND
13243: IFFALSE 13252
13245: GO 13247
13247: DISABLE
// StreamSibBomb ;
13248: CALL 13253 0 0
13252: END
// export function StreamSibBomb ; var i , x , y ; begin
13253: LD_INT 0
13255: PPUSH
13256: PPUSH
13257: PPUSH
13258: PPUSH
// result := false ;
13259: LD_ADDR_VAR 0 1
13263: PUSH
13264: LD_INT 0
13266: ST_TO_ADDR
// for i := 1 to 16 do
13267: LD_ADDR_VAR 0 2
13271: PUSH
13272: DOUBLE
13273: LD_INT 1
13275: DEC
13276: ST_TO_ADDR
13277: LD_INT 16
13279: PUSH
13280: FOR_TO
13281: IFFALSE 13480
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13283: LD_ADDR_VAR 0 3
13287: PUSH
13288: LD_INT 10
13290: PUSH
13291: LD_INT 20
13293: PUSH
13294: LD_INT 30
13296: PUSH
13297: LD_INT 40
13299: PUSH
13300: LD_INT 50
13302: PUSH
13303: LD_INT 60
13305: PUSH
13306: LD_INT 70
13308: PUSH
13309: LD_INT 80
13311: PUSH
13312: LD_INT 90
13314: PUSH
13315: LD_INT 100
13317: PUSH
13318: LD_INT 110
13320: PUSH
13321: LD_INT 120
13323: PUSH
13324: LD_INT 130
13326: PUSH
13327: LD_INT 140
13329: PUSH
13330: LD_INT 150
13332: PUSH
13333: EMPTY
13334: LIST
13335: LIST
13336: LIST
13337: LIST
13338: LIST
13339: LIST
13340: LIST
13341: LIST
13342: LIST
13343: LIST
13344: LIST
13345: LIST
13346: LIST
13347: LIST
13348: LIST
13349: PUSH
13350: LD_INT 1
13352: PPUSH
13353: LD_INT 15
13355: PPUSH
13356: CALL_OW 12
13360: ARRAY
13361: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13362: LD_ADDR_VAR 0 4
13366: PUSH
13367: LD_INT 10
13369: PUSH
13370: LD_INT 20
13372: PUSH
13373: LD_INT 30
13375: PUSH
13376: LD_INT 40
13378: PUSH
13379: LD_INT 50
13381: PUSH
13382: LD_INT 60
13384: PUSH
13385: LD_INT 70
13387: PUSH
13388: LD_INT 80
13390: PUSH
13391: LD_INT 90
13393: PUSH
13394: LD_INT 100
13396: PUSH
13397: LD_INT 110
13399: PUSH
13400: LD_INT 120
13402: PUSH
13403: LD_INT 130
13405: PUSH
13406: LD_INT 140
13408: PUSH
13409: LD_INT 150
13411: PUSH
13412: EMPTY
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: LIST
13423: LIST
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: PUSH
13429: LD_INT 1
13431: PPUSH
13432: LD_INT 15
13434: PPUSH
13435: CALL_OW 12
13439: ARRAY
13440: ST_TO_ADDR
// if ValidHex ( x , y ) then
13441: LD_VAR 0 3
13445: PPUSH
13446: LD_VAR 0 4
13450: PPUSH
13451: CALL_OW 488
13455: IFFALSE 13478
// begin result := [ x , y ] ;
13457: LD_ADDR_VAR 0 1
13461: PUSH
13462: LD_VAR 0 3
13466: PUSH
13467: LD_VAR 0 4
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: ST_TO_ADDR
// break ;
13476: GO 13480
// end ; end ;
13478: GO 13280
13480: POP
13481: POP
// if result then
13482: LD_VAR 0 1
13486: IFFALSE 13546
// begin ToLua ( playSibBomb() ) ;
13488: LD_STRING playSibBomb()
13490: PPUSH
13491: CALL_OW 559
// wait ( 0 0$14 ) ;
13495: LD_INT 490
13497: PPUSH
13498: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13502: LD_VAR 0 1
13506: PUSH
13507: LD_INT 1
13509: ARRAY
13510: PPUSH
13511: LD_VAR 0 1
13515: PUSH
13516: LD_INT 2
13518: ARRAY
13519: PPUSH
13520: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13524: LD_VAR 0 1
13528: PUSH
13529: LD_INT 1
13531: ARRAY
13532: PPUSH
13533: LD_VAR 0 1
13537: PUSH
13538: LD_INT 2
13540: ARRAY
13541: PPUSH
13542: CALL_OW 429
// end ; end ;
13546: LD_VAR 0 1
13550: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13551: LD_EXP 27
13555: PUSH
13556: LD_EXP 49
13560: AND
13561: IFFALSE 13573
13563: GO 13565
13565: DISABLE
// YouLost (  ) ;
13566: LD_STRING 
13568: PPUSH
13569: CALL_OW 104
13573: END
// every 0 0$1 trigger StreamModeActive and sFog do
13574: LD_EXP 27
13578: PUSH
13579: LD_EXP 48
13583: AND
13584: IFFALSE 13598
13586: GO 13588
13588: DISABLE
// FogOff ( your_side ) ;
13589: LD_OWVAR 2
13593: PPUSH
13594: CALL_OW 344
13598: END
// every 0 0$1 trigger StreamModeActive and sSun do
13599: LD_EXP 27
13603: PUSH
13604: LD_EXP 50
13608: AND
13609: IFFALSE 13637
13611: GO 13613
13613: DISABLE
// begin solar_recharge_percent := 0 ;
13614: LD_ADDR_OWVAR 79
13618: PUSH
13619: LD_INT 0
13621: ST_TO_ADDR
// wait ( 5 5$00 ) ;
13622: LD_INT 10500
13624: PPUSH
13625: CALL_OW 67
// solar_recharge_percent := 100 ;
13629: LD_ADDR_OWVAR 79
13633: PUSH
13634: LD_INT 100
13636: ST_TO_ADDR
// end ;
13637: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13638: LD_EXP 27
13642: PUSH
13643: LD_EXP 51
13647: AND
13648: IFFALSE 13887
13650: GO 13652
13652: DISABLE
13653: LD_INT 0
13655: PPUSH
13656: PPUSH
13657: PPUSH
// begin tmp := [ ] ;
13658: LD_ADDR_VAR 0 3
13662: PUSH
13663: EMPTY
13664: ST_TO_ADDR
// for i := 1 to 6 do
13665: LD_ADDR_VAR 0 1
13669: PUSH
13670: DOUBLE
13671: LD_INT 1
13673: DEC
13674: ST_TO_ADDR
13675: LD_INT 6
13677: PUSH
13678: FOR_TO
13679: IFFALSE 13784
// begin uc_nation := nation_nature ;
13681: LD_ADDR_OWVAR 21
13685: PUSH
13686: LD_INT 0
13688: ST_TO_ADDR
// uc_side := 0 ;
13689: LD_ADDR_OWVAR 20
13693: PUSH
13694: LD_INT 0
13696: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13697: LD_ADDR_OWVAR 29
13701: PUSH
13702: LD_INT 12
13704: PUSH
13705: LD_INT 12
13707: PUSH
13708: EMPTY
13709: LIST
13710: LIST
13711: ST_TO_ADDR
// hc_agressivity := 20 ;
13712: LD_ADDR_OWVAR 35
13716: PUSH
13717: LD_INT 20
13719: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13720: LD_ADDR_OWVAR 28
13724: PUSH
13725: LD_INT 17
13727: ST_TO_ADDR
// hc_gallery :=  ;
13728: LD_ADDR_OWVAR 33
13732: PUSH
13733: LD_STRING 
13735: ST_TO_ADDR
// hc_name :=  ;
13736: LD_ADDR_OWVAR 26
13740: PUSH
13741: LD_STRING 
13743: ST_TO_ADDR
// un := CreateHuman ;
13744: LD_ADDR_VAR 0 2
13748: PUSH
13749: CALL_OW 44
13753: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13754: LD_VAR 0 2
13758: PPUSH
13759: LD_INT 1
13761: PPUSH
13762: CALL_OW 51
// tmp := tmp ^ un ;
13766: LD_ADDR_VAR 0 3
13770: PUSH
13771: LD_VAR 0 3
13775: PUSH
13776: LD_VAR 0 2
13780: ADD
13781: ST_TO_ADDR
// end ;
13782: GO 13678
13784: POP
13785: POP
// repeat wait ( 0 0$1 ) ;
13786: LD_INT 35
13788: PPUSH
13789: CALL_OW 67
// for un in tmp do
13793: LD_ADDR_VAR 0 2
13797: PUSH
13798: LD_VAR 0 3
13802: PUSH
13803: FOR_IN
13804: IFFALSE 13878
// begin if IsDead ( un ) then
13806: LD_VAR 0 2
13810: PPUSH
13811: CALL_OW 301
13815: IFFALSE 13835
// begin tmp := tmp diff un ;
13817: LD_ADDR_VAR 0 3
13821: PUSH
13822: LD_VAR 0 3
13826: PUSH
13827: LD_VAR 0 2
13831: DIFF
13832: ST_TO_ADDR
// continue ;
13833: GO 13803
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13835: LD_VAR 0 2
13839: PPUSH
13840: LD_INT 3
13842: PUSH
13843: LD_INT 22
13845: PUSH
13846: LD_INT 0
13848: PUSH
13849: EMPTY
13850: LIST
13851: LIST
13852: PUSH
13853: EMPTY
13854: LIST
13855: LIST
13856: PPUSH
13857: CALL_OW 69
13861: PPUSH
13862: LD_VAR 0 2
13866: PPUSH
13867: CALL_OW 74
13871: PPUSH
13872: CALL_OW 115
// end ;
13876: GO 13803
13878: POP
13879: POP
// until not tmp ;
13880: LD_VAR 0 3
13884: NOT
13885: IFFALSE 13786
// end ;
13887: PPOPN 3
13889: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13890: LD_EXP 27
13894: PUSH
13895: LD_EXP 52
13899: AND
13900: IFFALSE 13954
13902: GO 13904
13904: DISABLE
// begin ToLua ( displayTroll(); ) ;
13905: LD_STRING displayTroll();
13907: PPUSH
13908: CALL_OW 559
// wait ( 3 3$00 ) ;
13912: LD_INT 6300
13914: PPUSH
13915: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13919: LD_STRING hideTroll();
13921: PPUSH
13922: CALL_OW 559
// wait ( 1 1$00 ) ;
13926: LD_INT 2100
13928: PPUSH
13929: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13933: LD_STRING displayTroll();
13935: PPUSH
13936: CALL_OW 559
// wait ( 1 1$00 ) ;
13940: LD_INT 2100
13942: PPUSH
13943: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13947: LD_STRING hideTroll();
13949: PPUSH
13950: CALL_OW 559
// end ;
13954: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13955: LD_EXP 27
13959: PUSH
13960: LD_EXP 53
13964: AND
13965: IFFALSE 14028
13967: GO 13969
13969: DISABLE
13970: LD_INT 0
13972: PPUSH
// begin p := 0 ;
13973: LD_ADDR_VAR 0 1
13977: PUSH
13978: LD_INT 0
13980: ST_TO_ADDR
// repeat game_speed := 1 ;
13981: LD_ADDR_OWVAR 65
13985: PUSH
13986: LD_INT 1
13988: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13989: LD_INT 35
13991: PPUSH
13992: CALL_OW 67
// p := p + 1 ;
13996: LD_ADDR_VAR 0 1
14000: PUSH
14001: LD_VAR 0 1
14005: PUSH
14006: LD_INT 1
14008: PLUS
14009: ST_TO_ADDR
// until p >= 60 ;
14010: LD_VAR 0 1
14014: PUSH
14015: LD_INT 60
14017: GREATEREQUAL
14018: IFFALSE 13981
// game_speed := 4 ;
14020: LD_ADDR_OWVAR 65
14024: PUSH
14025: LD_INT 4
14027: ST_TO_ADDR
// end ;
14028: PPOPN 1
14030: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14031: LD_EXP 27
14035: PUSH
14036: LD_EXP 54
14040: AND
14041: IFFALSE 14187
14043: GO 14045
14045: DISABLE
14046: LD_INT 0
14048: PPUSH
14049: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14050: LD_ADDR_VAR 0 1
14054: PUSH
14055: LD_INT 22
14057: PUSH
14058: LD_OWVAR 2
14062: PUSH
14063: EMPTY
14064: LIST
14065: LIST
14066: PUSH
14067: LD_INT 2
14069: PUSH
14070: LD_INT 30
14072: PUSH
14073: LD_INT 0
14075: PUSH
14076: EMPTY
14077: LIST
14078: LIST
14079: PUSH
14080: LD_INT 30
14082: PUSH
14083: LD_INT 1
14085: PUSH
14086: EMPTY
14087: LIST
14088: LIST
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: LIST
14094: PUSH
14095: EMPTY
14096: LIST
14097: LIST
14098: PPUSH
14099: CALL_OW 69
14103: ST_TO_ADDR
// if not depot then
14104: LD_VAR 0 1
14108: NOT
14109: IFFALSE 14113
// exit ;
14111: GO 14187
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
14113: LD_ADDR_VAR 0 2
14117: PUSH
14118: LD_VAR 0 1
14122: PUSH
14123: LD_INT 1
14125: PPUSH
14126: LD_VAR 0 1
14130: PPUSH
14131: CALL_OW 12
14135: ARRAY
14136: PPUSH
14137: CALL_OW 274
14141: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
14142: LD_VAR 0 2
14146: PPUSH
14147: LD_INT 1
14149: PPUSH
14150: LD_INT 0
14152: PPUSH
14153: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
14157: LD_VAR 0 2
14161: PPUSH
14162: LD_INT 2
14164: PPUSH
14165: LD_INT 0
14167: PPUSH
14168: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
14172: LD_VAR 0 2
14176: PPUSH
14177: LD_INT 3
14179: PPUSH
14180: LD_INT 0
14182: PPUSH
14183: CALL_OW 277
// end ;
14187: PPOPN 2
14189: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
14190: LD_EXP 27
14194: PUSH
14195: LD_EXP 55
14199: AND
14200: IFFALSE 14297
14202: GO 14204
14204: DISABLE
14205: LD_INT 0
14207: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14208: LD_ADDR_VAR 0 1
14212: PUSH
14213: LD_INT 22
14215: PUSH
14216: LD_OWVAR 2
14220: PUSH
14221: EMPTY
14222: LIST
14223: LIST
14224: PUSH
14225: LD_INT 21
14227: PUSH
14228: LD_INT 1
14230: PUSH
14231: EMPTY
14232: LIST
14233: LIST
14234: PUSH
14235: LD_INT 3
14237: PUSH
14238: LD_INT 23
14240: PUSH
14241: LD_INT 0
14243: PUSH
14244: EMPTY
14245: LIST
14246: LIST
14247: PUSH
14248: EMPTY
14249: LIST
14250: LIST
14251: PUSH
14252: EMPTY
14253: LIST
14254: LIST
14255: LIST
14256: PPUSH
14257: CALL_OW 69
14261: ST_TO_ADDR
// if not tmp then
14262: LD_VAR 0 1
14266: NOT
14267: IFFALSE 14271
// exit ;
14269: GO 14297
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
14271: LD_VAR 0 1
14275: PUSH
14276: LD_INT 1
14278: PPUSH
14279: LD_VAR 0 1
14283: PPUSH
14284: CALL_OW 12
14288: ARRAY
14289: PPUSH
14290: LD_INT 200
14292: PPUSH
14293: CALL_OW 234
// end ;
14297: PPOPN 1
14299: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14300: LD_EXP 27
14304: PUSH
14305: LD_EXP 56
14309: AND
14310: IFFALSE 14389
14312: GO 14314
14314: DISABLE
14315: LD_INT 0
14317: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14318: LD_ADDR_VAR 0 1
14322: PUSH
14323: LD_INT 22
14325: PUSH
14326: LD_OWVAR 2
14330: PUSH
14331: EMPTY
14332: LIST
14333: LIST
14334: PUSH
14335: LD_INT 21
14337: PUSH
14338: LD_INT 2
14340: PUSH
14341: EMPTY
14342: LIST
14343: LIST
14344: PUSH
14345: EMPTY
14346: LIST
14347: LIST
14348: PPUSH
14349: CALL_OW 69
14353: ST_TO_ADDR
// if not tmp then
14354: LD_VAR 0 1
14358: NOT
14359: IFFALSE 14363
// exit ;
14361: GO 14389
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14363: LD_VAR 0 1
14367: PUSH
14368: LD_INT 1
14370: PPUSH
14371: LD_VAR 0 1
14375: PPUSH
14376: CALL_OW 12
14380: ARRAY
14381: PPUSH
14382: LD_INT 60
14384: PPUSH
14385: CALL_OW 234
// end ;
14389: PPOPN 1
14391: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14392: LD_EXP 27
14396: PUSH
14397: LD_EXP 57
14401: AND
14402: IFFALSE 14501
14404: GO 14406
14406: DISABLE
14407: LD_INT 0
14409: PPUSH
14410: PPUSH
// begin enable ;
14411: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14412: LD_ADDR_VAR 0 1
14416: PUSH
14417: LD_INT 22
14419: PUSH
14420: LD_OWVAR 2
14424: PUSH
14425: EMPTY
14426: LIST
14427: LIST
14428: PUSH
14429: LD_INT 61
14431: PUSH
14432: EMPTY
14433: LIST
14434: PUSH
14435: LD_INT 33
14437: PUSH
14438: LD_INT 2
14440: PUSH
14441: EMPTY
14442: LIST
14443: LIST
14444: PUSH
14445: EMPTY
14446: LIST
14447: LIST
14448: LIST
14449: PPUSH
14450: CALL_OW 69
14454: ST_TO_ADDR
// if not tmp then
14455: LD_VAR 0 1
14459: NOT
14460: IFFALSE 14464
// exit ;
14462: GO 14501
// for i in tmp do
14464: LD_ADDR_VAR 0 2
14468: PUSH
14469: LD_VAR 0 1
14473: PUSH
14474: FOR_IN
14475: IFFALSE 14499
// if IsControledBy ( i ) then
14477: LD_VAR 0 2
14481: PPUSH
14482: CALL_OW 312
14486: IFFALSE 14497
// ComUnlink ( i ) ;
14488: LD_VAR 0 2
14492: PPUSH
14493: CALL_OW 136
14497: GO 14474
14499: POP
14500: POP
// end ;
14501: PPOPN 2
14503: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14504: LD_EXP 27
14508: PUSH
14509: LD_EXP 58
14513: AND
14514: IFFALSE 14654
14516: GO 14518
14518: DISABLE
14519: LD_INT 0
14521: PPUSH
14522: PPUSH
// begin ToLua ( displayPowell(); ) ;
14523: LD_STRING displayPowell();
14525: PPUSH
14526: CALL_OW 559
// uc_side := 0 ;
14530: LD_ADDR_OWVAR 20
14534: PUSH
14535: LD_INT 0
14537: ST_TO_ADDR
// uc_nation := 2 ;
14538: LD_ADDR_OWVAR 21
14542: PUSH
14543: LD_INT 2
14545: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14546: LD_ADDR_OWVAR 37
14550: PUSH
14551: LD_INT 14
14553: ST_TO_ADDR
// vc_engine := engine_siberite ;
14554: LD_ADDR_OWVAR 39
14558: PUSH
14559: LD_INT 3
14561: ST_TO_ADDR
// vc_control := control_apeman ;
14562: LD_ADDR_OWVAR 38
14566: PUSH
14567: LD_INT 5
14569: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
14570: LD_ADDR_OWVAR 40
14574: PUSH
14575: LD_INT 29
14577: ST_TO_ADDR
// un := CreateVehicle ;
14578: LD_ADDR_VAR 0 2
14582: PUSH
14583: CALL_OW 45
14587: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14588: LD_VAR 0 2
14592: PPUSH
14593: LD_INT 1
14595: PPUSH
14596: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14600: LD_INT 35
14602: PPUSH
14603: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14607: LD_VAR 0 2
14611: PPUSH
14612: LD_INT 22
14614: PUSH
14615: LD_OWVAR 2
14619: PUSH
14620: EMPTY
14621: LIST
14622: LIST
14623: PPUSH
14624: CALL_OW 69
14628: PPUSH
14629: LD_VAR 0 2
14633: PPUSH
14634: CALL_OW 74
14638: PPUSH
14639: CALL_OW 115
// until IsDead ( un ) ;
14643: LD_VAR 0 2
14647: PPUSH
14648: CALL_OW 301
14652: IFFALSE 14600
// end ;
14654: PPOPN 2
14656: END
// every 0 0$1 trigger StreamModeActive and sStu do
14657: LD_EXP 27
14661: PUSH
14662: LD_EXP 66
14666: AND
14667: IFFALSE 14683
14669: GO 14671
14671: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14672: LD_STRING displayStucuk();
14674: PPUSH
14675: CALL_OW 559
// ResetFog ;
14679: CALL_OW 335
// end ;
14683: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14684: LD_EXP 27
14688: PUSH
14689: LD_EXP 59
14693: AND
14694: IFFALSE 14835
14696: GO 14698
14698: DISABLE
14699: LD_INT 0
14701: PPUSH
14702: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14703: LD_ADDR_VAR 0 2
14707: PUSH
14708: LD_INT 22
14710: PUSH
14711: LD_OWVAR 2
14715: PUSH
14716: EMPTY
14717: LIST
14718: LIST
14719: PUSH
14720: LD_INT 21
14722: PUSH
14723: LD_INT 1
14725: PUSH
14726: EMPTY
14727: LIST
14728: LIST
14729: PUSH
14730: EMPTY
14731: LIST
14732: LIST
14733: PPUSH
14734: CALL_OW 69
14738: ST_TO_ADDR
// if not tmp then
14739: LD_VAR 0 2
14743: NOT
14744: IFFALSE 14748
// exit ;
14746: GO 14835
// un := tmp [ rand ( 1 , tmp ) ] ;
14748: LD_ADDR_VAR 0 1
14752: PUSH
14753: LD_VAR 0 2
14757: PUSH
14758: LD_INT 1
14760: PPUSH
14761: LD_VAR 0 2
14765: PPUSH
14766: CALL_OW 12
14770: ARRAY
14771: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14772: LD_VAR 0 1
14776: PPUSH
14777: LD_INT 0
14779: PPUSH
14780: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14784: LD_VAR 0 1
14788: PPUSH
14789: LD_OWVAR 3
14793: PUSH
14794: LD_VAR 0 1
14798: DIFF
14799: PPUSH
14800: LD_VAR 0 1
14804: PPUSH
14805: CALL_OW 74
14809: PPUSH
14810: CALL_OW 115
// wait ( 0 0$20 ) ;
14814: LD_INT 700
14816: PPUSH
14817: CALL_OW 67
// SetSide ( un , your_side ) ;
14821: LD_VAR 0 1
14825: PPUSH
14826: LD_OWVAR 2
14830: PPUSH
14831: CALL_OW 235
// end ;
14835: PPOPN 2
14837: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
14838: LD_EXP 27
14842: PUSH
14843: LD_EXP 60
14847: AND
14848: IFFALSE 14954
14850: GO 14852
14852: DISABLE
14853: LD_INT 0
14855: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14856: LD_ADDR_VAR 0 1
14860: PUSH
14861: LD_INT 22
14863: PUSH
14864: LD_OWVAR 2
14868: PUSH
14869: EMPTY
14870: LIST
14871: LIST
14872: PUSH
14873: LD_INT 2
14875: PUSH
14876: LD_INT 30
14878: PUSH
14879: LD_INT 0
14881: PUSH
14882: EMPTY
14883: LIST
14884: LIST
14885: PUSH
14886: LD_INT 30
14888: PUSH
14889: LD_INT 1
14891: PUSH
14892: EMPTY
14893: LIST
14894: LIST
14895: PUSH
14896: EMPTY
14897: LIST
14898: LIST
14899: LIST
14900: PUSH
14901: EMPTY
14902: LIST
14903: LIST
14904: PPUSH
14905: CALL_OW 69
14909: ST_TO_ADDR
// if not depot then
14910: LD_VAR 0 1
14914: NOT
14915: IFFALSE 14919
// exit ;
14917: GO 14954
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14919: LD_VAR 0 1
14923: PUSH
14924: LD_INT 1
14926: ARRAY
14927: PPUSH
14928: CALL_OW 250
14932: PPUSH
14933: LD_VAR 0 1
14937: PUSH
14938: LD_INT 1
14940: ARRAY
14941: PPUSH
14942: CALL_OW 251
14946: PPUSH
14947: LD_INT 70
14949: PPUSH
14950: CALL_OW 495
// end ;
14954: PPOPN 1
14956: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14957: LD_EXP 27
14961: PUSH
14962: LD_EXP 61
14966: AND
14967: IFFALSE 15178
14969: GO 14971
14971: DISABLE
14972: LD_INT 0
14974: PPUSH
14975: PPUSH
14976: PPUSH
14977: PPUSH
14978: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14979: LD_ADDR_VAR 0 5
14983: PUSH
14984: LD_INT 22
14986: PUSH
14987: LD_OWVAR 2
14991: PUSH
14992: EMPTY
14993: LIST
14994: LIST
14995: PUSH
14996: LD_INT 21
14998: PUSH
14999: LD_INT 1
15001: PUSH
15002: EMPTY
15003: LIST
15004: LIST
15005: PUSH
15006: EMPTY
15007: LIST
15008: LIST
15009: PPUSH
15010: CALL_OW 69
15014: ST_TO_ADDR
// if not tmp then
15015: LD_VAR 0 5
15019: NOT
15020: IFFALSE 15024
// exit ;
15022: GO 15178
// for i in tmp do
15024: LD_ADDR_VAR 0 1
15028: PUSH
15029: LD_VAR 0 5
15033: PUSH
15034: FOR_IN
15035: IFFALSE 15176
// begin d := rand ( 0 , 5 ) ;
15037: LD_ADDR_VAR 0 4
15041: PUSH
15042: LD_INT 0
15044: PPUSH
15045: LD_INT 5
15047: PPUSH
15048: CALL_OW 12
15052: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15053: LD_ADDR_VAR 0 2
15057: PUSH
15058: LD_VAR 0 1
15062: PPUSH
15063: CALL_OW 250
15067: PPUSH
15068: LD_VAR 0 4
15072: PPUSH
15073: LD_INT 3
15075: PPUSH
15076: LD_INT 12
15078: PPUSH
15079: CALL_OW 12
15083: PPUSH
15084: CALL_OW 272
15088: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15089: LD_ADDR_VAR 0 3
15093: PUSH
15094: LD_VAR 0 1
15098: PPUSH
15099: CALL_OW 251
15103: PPUSH
15104: LD_VAR 0 4
15108: PPUSH
15109: LD_INT 3
15111: PPUSH
15112: LD_INT 12
15114: PPUSH
15115: CALL_OW 12
15119: PPUSH
15120: CALL_OW 273
15124: ST_TO_ADDR
// if ValidHex ( x , y ) then
15125: LD_VAR 0 2
15129: PPUSH
15130: LD_VAR 0 3
15134: PPUSH
15135: CALL_OW 488
15139: IFFALSE 15174
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
15141: LD_VAR 0 1
15145: PPUSH
15146: LD_VAR 0 2
15150: PPUSH
15151: LD_VAR 0 3
15155: PPUSH
15156: LD_INT 3
15158: PPUSH
15159: LD_INT 6
15161: PPUSH
15162: CALL_OW 12
15166: PPUSH
15167: LD_INT 1
15169: PPUSH
15170: CALL_OW 483
// end ;
15174: GO 15034
15176: POP
15177: POP
// end ;
15178: PPOPN 5
15180: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
15181: LD_EXP 27
15185: PUSH
15186: LD_EXP 62
15190: AND
15191: IFFALSE 15285
15193: GO 15195
15195: DISABLE
15196: LD_INT 0
15198: PPUSH
15199: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
15200: LD_ADDR_VAR 0 2
15204: PUSH
15205: LD_INT 22
15207: PUSH
15208: LD_OWVAR 2
15212: PUSH
15213: EMPTY
15214: LIST
15215: LIST
15216: PUSH
15217: LD_INT 32
15219: PUSH
15220: LD_INT 1
15222: PUSH
15223: EMPTY
15224: LIST
15225: LIST
15226: PUSH
15227: LD_INT 21
15229: PUSH
15230: LD_INT 2
15232: PUSH
15233: EMPTY
15234: LIST
15235: LIST
15236: PUSH
15237: EMPTY
15238: LIST
15239: LIST
15240: LIST
15241: PPUSH
15242: CALL_OW 69
15246: ST_TO_ADDR
// if not tmp then
15247: LD_VAR 0 2
15251: NOT
15252: IFFALSE 15256
// exit ;
15254: GO 15285
// for i in tmp do
15256: LD_ADDR_VAR 0 1
15260: PUSH
15261: LD_VAR 0 2
15265: PUSH
15266: FOR_IN
15267: IFFALSE 15283
// SetFuel ( i , 0 ) ;
15269: LD_VAR 0 1
15273: PPUSH
15274: LD_INT 0
15276: PPUSH
15277: CALL_OW 240
15281: GO 15266
15283: POP
15284: POP
// end ;
15285: PPOPN 2
15287: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
15288: LD_EXP 27
15292: PUSH
15293: LD_EXP 63
15297: AND
15298: IFFALSE 15364
15300: GO 15302
15302: DISABLE
15303: LD_INT 0
15305: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15306: LD_ADDR_VAR 0 1
15310: PUSH
15311: LD_INT 22
15313: PUSH
15314: LD_OWVAR 2
15318: PUSH
15319: EMPTY
15320: LIST
15321: LIST
15322: PUSH
15323: LD_INT 30
15325: PUSH
15326: LD_INT 29
15328: PUSH
15329: EMPTY
15330: LIST
15331: LIST
15332: PUSH
15333: EMPTY
15334: LIST
15335: LIST
15336: PPUSH
15337: CALL_OW 69
15341: ST_TO_ADDR
// if not tmp then
15342: LD_VAR 0 1
15346: NOT
15347: IFFALSE 15351
// exit ;
15349: GO 15364
// DestroyUnit ( tmp [ 1 ] ) ;
15351: LD_VAR 0 1
15355: PUSH
15356: LD_INT 1
15358: ARRAY
15359: PPUSH
15360: CALL_OW 65
// end ;
15364: PPOPN 1
15366: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
15367: LD_EXP 27
15371: PUSH
15372: LD_EXP 65
15376: AND
15377: IFFALSE 15506
15379: GO 15381
15381: DISABLE
15382: LD_INT 0
15384: PPUSH
// begin uc_side := 0 ;
15385: LD_ADDR_OWVAR 20
15389: PUSH
15390: LD_INT 0
15392: ST_TO_ADDR
// uc_nation := nation_arabian ;
15393: LD_ADDR_OWVAR 21
15397: PUSH
15398: LD_INT 2
15400: ST_TO_ADDR
// hc_gallery :=  ;
15401: LD_ADDR_OWVAR 33
15405: PUSH
15406: LD_STRING 
15408: ST_TO_ADDR
// hc_name :=  ;
15409: LD_ADDR_OWVAR 26
15413: PUSH
15414: LD_STRING 
15416: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
15417: LD_INT 1
15419: PPUSH
15420: LD_INT 11
15422: PPUSH
15423: LD_INT 10
15425: PPUSH
15426: CALL_OW 380
// un := CreateHuman ;
15430: LD_ADDR_VAR 0 1
15434: PUSH
15435: CALL_OW 44
15439: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15440: LD_VAR 0 1
15444: PPUSH
15445: LD_INT 1
15447: PPUSH
15448: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15452: LD_INT 35
15454: PPUSH
15455: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15459: LD_VAR 0 1
15463: PPUSH
15464: LD_INT 22
15466: PUSH
15467: LD_OWVAR 2
15471: PUSH
15472: EMPTY
15473: LIST
15474: LIST
15475: PPUSH
15476: CALL_OW 69
15480: PPUSH
15481: LD_VAR 0 1
15485: PPUSH
15486: CALL_OW 74
15490: PPUSH
15491: CALL_OW 115
// until IsDead ( un ) ;
15495: LD_VAR 0 1
15499: PPUSH
15500: CALL_OW 301
15504: IFFALSE 15452
// end ;
15506: PPOPN 1
15508: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15509: LD_EXP 27
15513: PUSH
15514: LD_EXP 67
15518: AND
15519: IFFALSE 15531
15521: GO 15523
15523: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15524: LD_STRING earthquake(getX(game), 0, 32)
15526: PPUSH
15527: CALL_OW 559
15531: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15532: LD_EXP 27
15536: PUSH
15537: LD_EXP 68
15541: AND
15542: IFFALSE 15633
15544: GO 15546
15546: DISABLE
15547: LD_INT 0
15549: PPUSH
// begin enable ;
15550: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15551: LD_ADDR_VAR 0 1
15555: PUSH
15556: LD_INT 22
15558: PUSH
15559: LD_OWVAR 2
15563: PUSH
15564: EMPTY
15565: LIST
15566: LIST
15567: PUSH
15568: LD_INT 21
15570: PUSH
15571: LD_INT 2
15573: PUSH
15574: EMPTY
15575: LIST
15576: LIST
15577: PUSH
15578: LD_INT 33
15580: PUSH
15581: LD_INT 3
15583: PUSH
15584: EMPTY
15585: LIST
15586: LIST
15587: PUSH
15588: EMPTY
15589: LIST
15590: LIST
15591: LIST
15592: PPUSH
15593: CALL_OW 69
15597: ST_TO_ADDR
// if not tmp then
15598: LD_VAR 0 1
15602: NOT
15603: IFFALSE 15607
// exit ;
15605: GO 15633
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15607: LD_VAR 0 1
15611: PUSH
15612: LD_INT 1
15614: PPUSH
15615: LD_VAR 0 1
15619: PPUSH
15620: CALL_OW 12
15624: ARRAY
15625: PPUSH
15626: LD_INT 1
15628: PPUSH
15629: CALL_OW 234
// end ;
15633: PPOPN 1
15635: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15636: LD_EXP 27
15640: PUSH
15641: LD_EXP 69
15645: AND
15646: IFFALSE 15787
15648: GO 15650
15650: DISABLE
15651: LD_INT 0
15653: PPUSH
15654: PPUSH
15655: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15656: LD_ADDR_VAR 0 3
15660: PUSH
15661: LD_INT 22
15663: PUSH
15664: LD_OWVAR 2
15668: PUSH
15669: EMPTY
15670: LIST
15671: LIST
15672: PUSH
15673: LD_INT 25
15675: PUSH
15676: LD_INT 1
15678: PUSH
15679: EMPTY
15680: LIST
15681: LIST
15682: PUSH
15683: EMPTY
15684: LIST
15685: LIST
15686: PPUSH
15687: CALL_OW 69
15691: ST_TO_ADDR
// if not tmp then
15692: LD_VAR 0 3
15696: NOT
15697: IFFALSE 15701
// exit ;
15699: GO 15787
// un := tmp [ rand ( 1 , tmp ) ] ;
15701: LD_ADDR_VAR 0 2
15705: PUSH
15706: LD_VAR 0 3
15710: PUSH
15711: LD_INT 1
15713: PPUSH
15714: LD_VAR 0 3
15718: PPUSH
15719: CALL_OW 12
15723: ARRAY
15724: ST_TO_ADDR
// if Crawls ( un ) then
15725: LD_VAR 0 2
15729: PPUSH
15730: CALL_OW 318
15734: IFFALSE 15745
// ComWalk ( un ) ;
15736: LD_VAR 0 2
15740: PPUSH
15741: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15745: LD_VAR 0 2
15749: PPUSH
15750: LD_INT 9
15752: PPUSH
15753: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15757: LD_INT 28
15759: PPUSH
15760: LD_OWVAR 2
15764: PPUSH
15765: LD_INT 2
15767: PPUSH
15768: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15772: LD_INT 29
15774: PPUSH
15775: LD_OWVAR 2
15779: PPUSH
15780: LD_INT 2
15782: PPUSH
15783: CALL_OW 322
// end ;
15787: PPOPN 3
15789: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15790: LD_EXP 27
15794: PUSH
15795: LD_EXP 70
15799: AND
15800: IFFALSE 15911
15802: GO 15804
15804: DISABLE
15805: LD_INT 0
15807: PPUSH
15808: PPUSH
15809: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15810: LD_ADDR_VAR 0 3
15814: PUSH
15815: LD_INT 22
15817: PUSH
15818: LD_OWVAR 2
15822: PUSH
15823: EMPTY
15824: LIST
15825: LIST
15826: PUSH
15827: LD_INT 25
15829: PUSH
15830: LD_INT 1
15832: PUSH
15833: EMPTY
15834: LIST
15835: LIST
15836: PUSH
15837: EMPTY
15838: LIST
15839: LIST
15840: PPUSH
15841: CALL_OW 69
15845: ST_TO_ADDR
// if not tmp then
15846: LD_VAR 0 3
15850: NOT
15851: IFFALSE 15855
// exit ;
15853: GO 15911
// un := tmp [ rand ( 1 , tmp ) ] ;
15855: LD_ADDR_VAR 0 2
15859: PUSH
15860: LD_VAR 0 3
15864: PUSH
15865: LD_INT 1
15867: PPUSH
15868: LD_VAR 0 3
15872: PPUSH
15873: CALL_OW 12
15877: ARRAY
15878: ST_TO_ADDR
// if Crawls ( un ) then
15879: LD_VAR 0 2
15883: PPUSH
15884: CALL_OW 318
15888: IFFALSE 15899
// ComWalk ( un ) ;
15890: LD_VAR 0 2
15894: PPUSH
15895: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15899: LD_VAR 0 2
15903: PPUSH
15904: LD_INT 8
15906: PPUSH
15907: CALL_OW 336
// end ;
15911: PPOPN 3
15913: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15914: LD_EXP 27
15918: PUSH
15919: LD_EXP 71
15923: AND
15924: IFFALSE 16068
15926: GO 15928
15928: DISABLE
15929: LD_INT 0
15931: PPUSH
15932: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15933: LD_ADDR_VAR 0 2
15937: PUSH
15938: LD_INT 22
15940: PUSH
15941: LD_OWVAR 2
15945: PUSH
15946: EMPTY
15947: LIST
15948: LIST
15949: PUSH
15950: LD_INT 21
15952: PUSH
15953: LD_INT 2
15955: PUSH
15956: EMPTY
15957: LIST
15958: LIST
15959: PUSH
15960: LD_INT 2
15962: PUSH
15963: LD_INT 34
15965: PUSH
15966: LD_INT 12
15968: PUSH
15969: EMPTY
15970: LIST
15971: LIST
15972: PUSH
15973: LD_INT 34
15975: PUSH
15976: LD_INT 51
15978: PUSH
15979: EMPTY
15980: LIST
15981: LIST
15982: PUSH
15983: LD_INT 34
15985: PUSH
15986: LD_INT 32
15988: PUSH
15989: EMPTY
15990: LIST
15991: LIST
15992: PUSH
15993: EMPTY
15994: LIST
15995: LIST
15996: LIST
15997: LIST
15998: PUSH
15999: EMPTY
16000: LIST
16001: LIST
16002: LIST
16003: PPUSH
16004: CALL_OW 69
16008: ST_TO_ADDR
// if not tmp then
16009: LD_VAR 0 2
16013: NOT
16014: IFFALSE 16018
// exit ;
16016: GO 16068
// for i in tmp do
16018: LD_ADDR_VAR 0 1
16022: PUSH
16023: LD_VAR 0 2
16027: PUSH
16028: FOR_IN
16029: IFFALSE 16066
// if GetCargo ( i , mat_artifact ) = 0 then
16031: LD_VAR 0 1
16035: PPUSH
16036: LD_INT 4
16038: PPUSH
16039: CALL_OW 289
16043: PUSH
16044: LD_INT 0
16046: EQUAL
16047: IFFALSE 16064
// SetCargo ( i , mat_siberit , 100 ) ;
16049: LD_VAR 0 1
16053: PPUSH
16054: LD_INT 3
16056: PPUSH
16057: LD_INT 100
16059: PPUSH
16060: CALL_OW 290
16064: GO 16028
16066: POP
16067: POP
// end ;
16068: PPOPN 2
16070: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16071: LD_EXP 27
16075: PUSH
16076: LD_EXP 72
16080: AND
16081: IFFALSE 16264
16083: GO 16085
16085: DISABLE
16086: LD_INT 0
16088: PPUSH
16089: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16090: LD_ADDR_VAR 0 2
16094: PUSH
16095: LD_INT 22
16097: PUSH
16098: LD_OWVAR 2
16102: PUSH
16103: EMPTY
16104: LIST
16105: LIST
16106: PPUSH
16107: CALL_OW 69
16111: ST_TO_ADDR
// if not tmp then
16112: LD_VAR 0 2
16116: NOT
16117: IFFALSE 16121
// exit ;
16119: GO 16264
// for i := 1 to 2 do
16121: LD_ADDR_VAR 0 1
16125: PUSH
16126: DOUBLE
16127: LD_INT 1
16129: DEC
16130: ST_TO_ADDR
16131: LD_INT 2
16133: PUSH
16134: FOR_TO
16135: IFFALSE 16262
// begin uc_side := your_side ;
16137: LD_ADDR_OWVAR 20
16141: PUSH
16142: LD_OWVAR 2
16146: ST_TO_ADDR
// uc_nation := nation_american ;
16147: LD_ADDR_OWVAR 21
16151: PUSH
16152: LD_INT 1
16154: ST_TO_ADDR
// vc_chassis := us_morphling ;
16155: LD_ADDR_OWVAR 37
16159: PUSH
16160: LD_INT 5
16162: ST_TO_ADDR
// vc_engine := engine_siberite ;
16163: LD_ADDR_OWVAR 39
16167: PUSH
16168: LD_INT 3
16170: ST_TO_ADDR
// vc_control := control_computer ;
16171: LD_ADDR_OWVAR 38
16175: PUSH
16176: LD_INT 3
16178: ST_TO_ADDR
// vc_weapon := us_double_laser ;
16179: LD_ADDR_OWVAR 40
16183: PUSH
16184: LD_INT 10
16186: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
16187: LD_VAR 0 2
16191: PUSH
16192: LD_INT 1
16194: ARRAY
16195: PPUSH
16196: CALL_OW 310
16200: NOT
16201: IFFALSE 16248
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
16203: CALL_OW 45
16207: PPUSH
16208: LD_VAR 0 2
16212: PUSH
16213: LD_INT 1
16215: ARRAY
16216: PPUSH
16217: CALL_OW 250
16221: PPUSH
16222: LD_VAR 0 2
16226: PUSH
16227: LD_INT 1
16229: ARRAY
16230: PPUSH
16231: CALL_OW 251
16235: PPUSH
16236: LD_INT 12
16238: PPUSH
16239: LD_INT 1
16241: PPUSH
16242: CALL_OW 50
16246: GO 16260
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16248: CALL_OW 45
16252: PPUSH
16253: LD_INT 1
16255: PPUSH
16256: CALL_OW 51
// end ;
16260: GO 16134
16262: POP
16263: POP
// end ;
16264: PPOPN 2
16266: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
16267: LD_EXP 27
16271: PUSH
16272: LD_EXP 73
16276: AND
16277: IFFALSE 16499
16279: GO 16281
16281: DISABLE
16282: LD_INT 0
16284: PPUSH
16285: PPUSH
16286: PPUSH
16287: PPUSH
16288: PPUSH
16289: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16290: LD_ADDR_VAR 0 6
16294: PUSH
16295: LD_INT 22
16297: PUSH
16298: LD_OWVAR 2
16302: PUSH
16303: EMPTY
16304: LIST
16305: LIST
16306: PUSH
16307: LD_INT 21
16309: PUSH
16310: LD_INT 1
16312: PUSH
16313: EMPTY
16314: LIST
16315: LIST
16316: PUSH
16317: LD_INT 3
16319: PUSH
16320: LD_INT 23
16322: PUSH
16323: LD_INT 0
16325: PUSH
16326: EMPTY
16327: LIST
16328: LIST
16329: PUSH
16330: EMPTY
16331: LIST
16332: LIST
16333: PUSH
16334: EMPTY
16335: LIST
16336: LIST
16337: LIST
16338: PPUSH
16339: CALL_OW 69
16343: ST_TO_ADDR
// if not tmp then
16344: LD_VAR 0 6
16348: NOT
16349: IFFALSE 16353
// exit ;
16351: GO 16499
// s1 := rand ( 1 , 4 ) ;
16353: LD_ADDR_VAR 0 2
16357: PUSH
16358: LD_INT 1
16360: PPUSH
16361: LD_INT 4
16363: PPUSH
16364: CALL_OW 12
16368: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
16369: LD_ADDR_VAR 0 4
16373: PUSH
16374: LD_VAR 0 6
16378: PUSH
16379: LD_INT 1
16381: ARRAY
16382: PPUSH
16383: LD_VAR 0 2
16387: PPUSH
16388: CALL_OW 259
16392: ST_TO_ADDR
// if s1 = 1 then
16393: LD_VAR 0 2
16397: PUSH
16398: LD_INT 1
16400: EQUAL
16401: IFFALSE 16421
// s2 := rand ( 2 , 4 ) else
16403: LD_ADDR_VAR 0 3
16407: PUSH
16408: LD_INT 2
16410: PPUSH
16411: LD_INT 4
16413: PPUSH
16414: CALL_OW 12
16418: ST_TO_ADDR
16419: GO 16429
// s2 := 1 ;
16421: LD_ADDR_VAR 0 3
16425: PUSH
16426: LD_INT 1
16428: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
16429: LD_ADDR_VAR 0 5
16433: PUSH
16434: LD_VAR 0 6
16438: PUSH
16439: LD_INT 1
16441: ARRAY
16442: PPUSH
16443: LD_VAR 0 3
16447: PPUSH
16448: CALL_OW 259
16452: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
16453: LD_VAR 0 6
16457: PUSH
16458: LD_INT 1
16460: ARRAY
16461: PPUSH
16462: LD_VAR 0 2
16466: PPUSH
16467: LD_VAR 0 5
16471: PPUSH
16472: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16476: LD_VAR 0 6
16480: PUSH
16481: LD_INT 1
16483: ARRAY
16484: PPUSH
16485: LD_VAR 0 3
16489: PPUSH
16490: LD_VAR 0 4
16494: PPUSH
16495: CALL_OW 237
// end ;
16499: PPOPN 6
16501: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16502: LD_EXP 27
16506: PUSH
16507: LD_EXP 74
16511: AND
16512: IFFALSE 16591
16514: GO 16516
16516: DISABLE
16517: LD_INT 0
16519: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16520: LD_ADDR_VAR 0 1
16524: PUSH
16525: LD_INT 22
16527: PUSH
16528: LD_OWVAR 2
16532: PUSH
16533: EMPTY
16534: LIST
16535: LIST
16536: PUSH
16537: LD_INT 30
16539: PUSH
16540: LD_INT 3
16542: PUSH
16543: EMPTY
16544: LIST
16545: LIST
16546: PUSH
16547: EMPTY
16548: LIST
16549: LIST
16550: PPUSH
16551: CALL_OW 69
16555: ST_TO_ADDR
// if not tmp then
16556: LD_VAR 0 1
16560: NOT
16561: IFFALSE 16565
// exit ;
16563: GO 16591
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16565: LD_VAR 0 1
16569: PUSH
16570: LD_INT 1
16572: PPUSH
16573: LD_VAR 0 1
16577: PPUSH
16578: CALL_OW 12
16582: ARRAY
16583: PPUSH
16584: LD_INT 1
16586: PPUSH
16587: CALL_OW 234
// end ;
16591: PPOPN 1
16593: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
16594: LD_EXP 27
16598: PUSH
16599: LD_EXP 75
16603: AND
16604: IFFALSE 16716
16606: GO 16608
16608: DISABLE
16609: LD_INT 0
16611: PPUSH
16612: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
16613: LD_ADDR_VAR 0 2
16617: PUSH
16618: LD_INT 22
16620: PUSH
16621: LD_OWVAR 2
16625: PUSH
16626: EMPTY
16627: LIST
16628: LIST
16629: PUSH
16630: LD_INT 2
16632: PUSH
16633: LD_INT 30
16635: PUSH
16636: LD_INT 27
16638: PUSH
16639: EMPTY
16640: LIST
16641: LIST
16642: PUSH
16643: LD_INT 30
16645: PUSH
16646: LD_INT 26
16648: PUSH
16649: EMPTY
16650: LIST
16651: LIST
16652: PUSH
16653: LD_INT 30
16655: PUSH
16656: LD_INT 28
16658: PUSH
16659: EMPTY
16660: LIST
16661: LIST
16662: PUSH
16663: EMPTY
16664: LIST
16665: LIST
16666: LIST
16667: LIST
16668: PUSH
16669: EMPTY
16670: LIST
16671: LIST
16672: PPUSH
16673: CALL_OW 69
16677: ST_TO_ADDR
// if not tmp then
16678: LD_VAR 0 2
16682: NOT
16683: IFFALSE 16687
// exit ;
16685: GO 16716
// for i in tmp do
16687: LD_ADDR_VAR 0 1
16691: PUSH
16692: LD_VAR 0 2
16696: PUSH
16697: FOR_IN
16698: IFFALSE 16714
// SetLives ( i , 1 ) ;
16700: LD_VAR 0 1
16704: PPUSH
16705: LD_INT 1
16707: PPUSH
16708: CALL_OW 234
16712: GO 16697
16714: POP
16715: POP
// end ;
16716: PPOPN 2
16718: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16719: LD_EXP 27
16723: PUSH
16724: LD_EXP 76
16728: AND
16729: IFFALSE 17003
16731: GO 16733
16733: DISABLE
16734: LD_INT 0
16736: PPUSH
16737: PPUSH
16738: PPUSH
// begin i := rand ( 1 , 7 ) ;
16739: LD_ADDR_VAR 0 1
16743: PUSH
16744: LD_INT 1
16746: PPUSH
16747: LD_INT 7
16749: PPUSH
16750: CALL_OW 12
16754: ST_TO_ADDR
// case i of 1 :
16755: LD_VAR 0 1
16759: PUSH
16760: LD_INT 1
16762: DOUBLE
16763: EQUAL
16764: IFTRUE 16768
16766: GO 16778
16768: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16769: LD_STRING earthquake(getX(game), 0, 32)
16771: PPUSH
16772: CALL_OW 559
16776: GO 17003
16778: LD_INT 2
16780: DOUBLE
16781: EQUAL
16782: IFTRUE 16786
16784: GO 16800
16786: POP
// begin ToLua ( displayStucuk(); ) ;
16787: LD_STRING displayStucuk();
16789: PPUSH
16790: CALL_OW 559
// ResetFog ;
16794: CALL_OW 335
// end ; 3 :
16798: GO 17003
16800: LD_INT 3
16802: DOUBLE
16803: EQUAL
16804: IFTRUE 16808
16806: GO 16912
16808: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16809: LD_ADDR_VAR 0 2
16813: PUSH
16814: LD_INT 22
16816: PUSH
16817: LD_OWVAR 2
16821: PUSH
16822: EMPTY
16823: LIST
16824: LIST
16825: PUSH
16826: LD_INT 25
16828: PUSH
16829: LD_INT 1
16831: PUSH
16832: EMPTY
16833: LIST
16834: LIST
16835: PUSH
16836: EMPTY
16837: LIST
16838: LIST
16839: PPUSH
16840: CALL_OW 69
16844: ST_TO_ADDR
// if not tmp then
16845: LD_VAR 0 2
16849: NOT
16850: IFFALSE 16854
// exit ;
16852: GO 17003
// un := tmp [ rand ( 1 , tmp ) ] ;
16854: LD_ADDR_VAR 0 3
16858: PUSH
16859: LD_VAR 0 2
16863: PUSH
16864: LD_INT 1
16866: PPUSH
16867: LD_VAR 0 2
16871: PPUSH
16872: CALL_OW 12
16876: ARRAY
16877: ST_TO_ADDR
// if Crawls ( un ) then
16878: LD_VAR 0 3
16882: PPUSH
16883: CALL_OW 318
16887: IFFALSE 16898
// ComWalk ( un ) ;
16889: LD_VAR 0 3
16893: PPUSH
16894: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16898: LD_VAR 0 3
16902: PPUSH
16903: LD_INT 8
16905: PPUSH
16906: CALL_OW 336
// end ; 4 :
16910: GO 17003
16912: LD_INT 4
16914: DOUBLE
16915: EQUAL
16916: IFTRUE 16920
16918: GO 16981
16920: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16921: LD_ADDR_VAR 0 2
16925: PUSH
16926: LD_INT 22
16928: PUSH
16929: LD_OWVAR 2
16933: PUSH
16934: EMPTY
16935: LIST
16936: LIST
16937: PUSH
16938: LD_INT 30
16940: PUSH
16941: LD_INT 29
16943: PUSH
16944: EMPTY
16945: LIST
16946: LIST
16947: PUSH
16948: EMPTY
16949: LIST
16950: LIST
16951: PPUSH
16952: CALL_OW 69
16956: ST_TO_ADDR
// if not tmp then
16957: LD_VAR 0 2
16961: NOT
16962: IFFALSE 16966
// exit ;
16964: GO 17003
// DestroyUnit ( tmp [ 1 ] ) ;
16966: LD_VAR 0 2
16970: PUSH
16971: LD_INT 1
16973: ARRAY
16974: PPUSH
16975: CALL_OW 65
// end ; 5 .. 7 :
16979: GO 17003
16981: LD_INT 5
16983: DOUBLE
16984: GREATEREQUAL
16985: IFFALSE 16993
16987: LD_INT 7
16989: DOUBLE
16990: LESSEQUAL
16991: IFTRUE 16995
16993: GO 17002
16995: POP
// StreamSibBomb ; end ;
16996: CALL 13253 0 0
17000: GO 17003
17002: POP
// end ;
17003: PPOPN 3
17005: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17006: LD_EXP 27
17010: PUSH
17011: LD_EXP 77
17015: AND
17016: IFFALSE 17172
17018: GO 17020
17020: DISABLE
17021: LD_INT 0
17023: PPUSH
17024: PPUSH
17025: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17026: LD_ADDR_VAR 0 2
17030: PUSH
17031: LD_INT 81
17033: PUSH
17034: LD_OWVAR 2
17038: PUSH
17039: EMPTY
17040: LIST
17041: LIST
17042: PUSH
17043: LD_INT 2
17045: PUSH
17046: LD_INT 21
17048: PUSH
17049: LD_INT 1
17051: PUSH
17052: EMPTY
17053: LIST
17054: LIST
17055: PUSH
17056: LD_INT 21
17058: PUSH
17059: LD_INT 2
17061: PUSH
17062: EMPTY
17063: LIST
17064: LIST
17065: PUSH
17066: EMPTY
17067: LIST
17068: LIST
17069: LIST
17070: PUSH
17071: EMPTY
17072: LIST
17073: LIST
17074: PPUSH
17075: CALL_OW 69
17079: ST_TO_ADDR
// if not tmp then
17080: LD_VAR 0 2
17084: NOT
17085: IFFALSE 17089
// exit ;
17087: GO 17172
// p := 0 ;
17089: LD_ADDR_VAR 0 3
17093: PUSH
17094: LD_INT 0
17096: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17097: LD_INT 35
17099: PPUSH
17100: CALL_OW 67
// p := p + 1 ;
17104: LD_ADDR_VAR 0 3
17108: PUSH
17109: LD_VAR 0 3
17113: PUSH
17114: LD_INT 1
17116: PLUS
17117: ST_TO_ADDR
// for i in tmp do
17118: LD_ADDR_VAR 0 1
17122: PUSH
17123: LD_VAR 0 2
17127: PUSH
17128: FOR_IN
17129: IFFALSE 17160
// if GetLives ( i ) < 1000 then
17131: LD_VAR 0 1
17135: PPUSH
17136: CALL_OW 256
17140: PUSH
17141: LD_INT 1000
17143: LESS
17144: IFFALSE 17158
// SetLives ( i , 1000 ) ;
17146: LD_VAR 0 1
17150: PPUSH
17151: LD_INT 1000
17153: PPUSH
17154: CALL_OW 234
17158: GO 17128
17160: POP
17161: POP
// until p > 20 ;
17162: LD_VAR 0 3
17166: PUSH
17167: LD_INT 20
17169: GREATER
17170: IFFALSE 17097
// end ;
17172: PPOPN 3
17174: END
// every 0 0$1 trigger StreamModeActive and sTime do
17175: LD_EXP 27
17179: PUSH
17180: LD_EXP 78
17184: AND
17185: IFFALSE 17220
17187: GO 17189
17189: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
17190: LD_INT 28
17192: PPUSH
17193: LD_OWVAR 2
17197: PPUSH
17198: LD_INT 2
17200: PPUSH
17201: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
17205: LD_INT 30
17207: PPUSH
17208: LD_OWVAR 2
17212: PPUSH
17213: LD_INT 2
17215: PPUSH
17216: CALL_OW 322
// end ;
17220: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
17221: LD_EXP 27
17225: PUSH
17226: LD_EXP 79
17230: AND
17231: IFFALSE 17352
17233: GO 17235
17235: DISABLE
17236: LD_INT 0
17238: PPUSH
17239: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17240: LD_ADDR_VAR 0 2
17244: PUSH
17245: LD_INT 22
17247: PUSH
17248: LD_OWVAR 2
17252: PUSH
17253: EMPTY
17254: LIST
17255: LIST
17256: PUSH
17257: LD_INT 21
17259: PUSH
17260: LD_INT 1
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: PUSH
17267: LD_INT 3
17269: PUSH
17270: LD_INT 23
17272: PUSH
17273: LD_INT 0
17275: PUSH
17276: EMPTY
17277: LIST
17278: LIST
17279: PUSH
17280: EMPTY
17281: LIST
17282: LIST
17283: PUSH
17284: EMPTY
17285: LIST
17286: LIST
17287: LIST
17288: PPUSH
17289: CALL_OW 69
17293: ST_TO_ADDR
// if not tmp then
17294: LD_VAR 0 2
17298: NOT
17299: IFFALSE 17303
// exit ;
17301: GO 17352
// for i in tmp do
17303: LD_ADDR_VAR 0 1
17307: PUSH
17308: LD_VAR 0 2
17312: PUSH
17313: FOR_IN
17314: IFFALSE 17350
// begin if Crawls ( i ) then
17316: LD_VAR 0 1
17320: PPUSH
17321: CALL_OW 318
17325: IFFALSE 17336
// ComWalk ( i ) ;
17327: LD_VAR 0 1
17331: PPUSH
17332: CALL_OW 138
// SetClass ( i , 2 ) ;
17336: LD_VAR 0 1
17340: PPUSH
17341: LD_INT 2
17343: PPUSH
17344: CALL_OW 336
// end ;
17348: GO 17313
17350: POP
17351: POP
// end ;
17352: PPOPN 2
17354: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
17355: LD_EXP 27
17359: PUSH
17360: LD_EXP 80
17364: AND
17365: IFFALSE 17646
17367: GO 17369
17369: DISABLE
17370: LD_INT 0
17372: PPUSH
17373: PPUSH
17374: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
17375: LD_OWVAR 2
17379: PPUSH
17380: LD_INT 9
17382: PPUSH
17383: LD_INT 1
17385: PPUSH
17386: LD_INT 1
17388: PPUSH
17389: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
17393: LD_INT 9
17395: PPUSH
17396: LD_OWVAR 2
17400: PPUSH
17401: CALL_OW 343
// uc_side := 9 ;
17405: LD_ADDR_OWVAR 20
17409: PUSH
17410: LD_INT 9
17412: ST_TO_ADDR
// uc_nation := 2 ;
17413: LD_ADDR_OWVAR 21
17417: PUSH
17418: LD_INT 2
17420: ST_TO_ADDR
// hc_name := Dark Warrior ;
17421: LD_ADDR_OWVAR 26
17425: PUSH
17426: LD_STRING Dark Warrior
17428: ST_TO_ADDR
// hc_gallery :=  ;
17429: LD_ADDR_OWVAR 33
17433: PUSH
17434: LD_STRING 
17436: ST_TO_ADDR
// hc_noskilllimit := true ;
17437: LD_ADDR_OWVAR 76
17441: PUSH
17442: LD_INT 1
17444: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
17445: LD_ADDR_OWVAR 31
17449: PUSH
17450: LD_INT 30
17452: PUSH
17453: LD_INT 30
17455: PUSH
17456: LD_INT 30
17458: PUSH
17459: LD_INT 30
17461: PUSH
17462: EMPTY
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: ST_TO_ADDR
// un := CreateHuman ;
17468: LD_ADDR_VAR 0 3
17472: PUSH
17473: CALL_OW 44
17477: ST_TO_ADDR
// hc_noskilllimit := false ;
17478: LD_ADDR_OWVAR 76
17482: PUSH
17483: LD_INT 0
17485: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17486: LD_VAR 0 3
17490: PPUSH
17491: LD_INT 1
17493: PPUSH
17494: CALL_OW 51
// p := 0 ;
17498: LD_ADDR_VAR 0 2
17502: PUSH
17503: LD_INT 0
17505: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17506: LD_INT 35
17508: PPUSH
17509: CALL_OW 67
// p := p + 1 ;
17513: LD_ADDR_VAR 0 2
17517: PUSH
17518: LD_VAR 0 2
17522: PUSH
17523: LD_INT 1
17525: PLUS
17526: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17527: LD_VAR 0 3
17531: PPUSH
17532: CALL_OW 256
17536: PUSH
17537: LD_INT 1000
17539: LESS
17540: IFFALSE 17554
// SetLives ( un , 1000 ) ;
17542: LD_VAR 0 3
17546: PPUSH
17547: LD_INT 1000
17549: PPUSH
17550: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
17554: LD_VAR 0 3
17558: PPUSH
17559: LD_INT 81
17561: PUSH
17562: LD_OWVAR 2
17566: PUSH
17567: EMPTY
17568: LIST
17569: LIST
17570: PUSH
17571: LD_INT 91
17573: PUSH
17574: LD_VAR 0 3
17578: PUSH
17579: LD_INT 30
17581: PUSH
17582: EMPTY
17583: LIST
17584: LIST
17585: LIST
17586: PUSH
17587: EMPTY
17588: LIST
17589: LIST
17590: PPUSH
17591: CALL_OW 69
17595: PPUSH
17596: LD_VAR 0 3
17600: PPUSH
17601: CALL_OW 74
17605: PPUSH
17606: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
17610: LD_VAR 0 2
17614: PUSH
17615: LD_INT 60
17617: GREATER
17618: PUSH
17619: LD_VAR 0 3
17623: PPUSH
17624: CALL_OW 301
17628: OR
17629: IFFALSE 17506
// if un then
17631: LD_VAR 0 3
17635: IFFALSE 17646
// RemoveUnit ( un ) ;
17637: LD_VAR 0 3
17641: PPUSH
17642: CALL_OW 64
// end ;
17646: PPOPN 3
17648: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17649: LD_INT 0
17651: PPUSH
// case cmd of 301 :
17652: LD_VAR 0 1
17656: PUSH
17657: LD_INT 301
17659: DOUBLE
17660: EQUAL
17661: IFTRUE 17665
17663: GO 17697
17665: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
17666: LD_VAR 0 6
17670: PPUSH
17671: LD_VAR 0 7
17675: PPUSH
17676: LD_VAR 0 8
17680: PPUSH
17681: LD_VAR 0 4
17685: PPUSH
17686: LD_VAR 0 5
17690: PPUSH
17691: CALL 18898 0 5
17695: GO 17818
17697: LD_INT 302
17699: DOUBLE
17700: EQUAL
17701: IFTRUE 17705
17703: GO 17742
17705: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
17706: LD_VAR 0 6
17710: PPUSH
17711: LD_VAR 0 7
17715: PPUSH
17716: LD_VAR 0 8
17720: PPUSH
17721: LD_VAR 0 9
17725: PPUSH
17726: LD_VAR 0 4
17730: PPUSH
17731: LD_VAR 0 5
17735: PPUSH
17736: CALL 18989 0 6
17740: GO 17818
17742: LD_INT 303
17744: DOUBLE
17745: EQUAL
17746: IFTRUE 17750
17748: GO 17787
17750: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
17751: LD_VAR 0 6
17755: PPUSH
17756: LD_VAR 0 7
17760: PPUSH
17761: LD_VAR 0 8
17765: PPUSH
17766: LD_VAR 0 9
17770: PPUSH
17771: LD_VAR 0 4
17775: PPUSH
17776: LD_VAR 0 5
17780: PPUSH
17781: CALL 17823 0 6
17785: GO 17818
17787: LD_INT 304
17789: DOUBLE
17790: EQUAL
17791: IFTRUE 17795
17793: GO 17817
17795: POP
// hHackTeleport ( unit , x , y ) ; end ;
17796: LD_VAR 0 2
17800: PPUSH
17801: LD_VAR 0 4
17805: PPUSH
17806: LD_VAR 0 5
17810: PPUSH
17811: CALL 19582 0 3
17815: GO 17818
17817: POP
// end ;
17818: LD_VAR 0 12
17822: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
17823: LD_INT 0
17825: PPUSH
17826: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
17827: LD_VAR 0 1
17831: PUSH
17832: LD_INT 1
17834: LESS
17835: PUSH
17836: LD_VAR 0 1
17840: PUSH
17841: LD_INT 3
17843: GREATER
17844: OR
17845: PUSH
17846: LD_VAR 0 5
17850: PPUSH
17851: LD_VAR 0 6
17855: PPUSH
17856: CALL_OW 428
17860: OR
17861: IFFALSE 17865
// exit ;
17863: GO 18585
// uc_side := your_side ;
17865: LD_ADDR_OWVAR 20
17869: PUSH
17870: LD_OWVAR 2
17874: ST_TO_ADDR
// uc_nation := nation ;
17875: LD_ADDR_OWVAR 21
17879: PUSH
17880: LD_VAR 0 1
17884: ST_TO_ADDR
// bc_level = 1 ;
17885: LD_ADDR_OWVAR 43
17889: PUSH
17890: LD_INT 1
17892: ST_TO_ADDR
// case btype of 1 :
17893: LD_VAR 0 2
17897: PUSH
17898: LD_INT 1
17900: DOUBLE
17901: EQUAL
17902: IFTRUE 17906
17904: GO 17917
17906: POP
// bc_type := b_depot ; 2 :
17907: LD_ADDR_OWVAR 42
17911: PUSH
17912: LD_INT 0
17914: ST_TO_ADDR
17915: GO 18529
17917: LD_INT 2
17919: DOUBLE
17920: EQUAL
17921: IFTRUE 17925
17923: GO 17936
17925: POP
// bc_type := b_warehouse ; 3 :
17926: LD_ADDR_OWVAR 42
17930: PUSH
17931: LD_INT 1
17933: ST_TO_ADDR
17934: GO 18529
17936: LD_INT 3
17938: DOUBLE
17939: EQUAL
17940: IFTRUE 17944
17942: GO 17955
17944: POP
// bc_type := b_lab ; 4 .. 9 :
17945: LD_ADDR_OWVAR 42
17949: PUSH
17950: LD_INT 6
17952: ST_TO_ADDR
17953: GO 18529
17955: LD_INT 4
17957: DOUBLE
17958: GREATEREQUAL
17959: IFFALSE 17967
17961: LD_INT 9
17963: DOUBLE
17964: LESSEQUAL
17965: IFTRUE 17969
17967: GO 18021
17969: POP
// begin bc_type := b_lab_half ;
17970: LD_ADDR_OWVAR 42
17974: PUSH
17975: LD_INT 7
17977: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
17978: LD_ADDR_OWVAR 44
17982: PUSH
17983: LD_INT 10
17985: PUSH
17986: LD_INT 11
17988: PUSH
17989: LD_INT 12
17991: PUSH
17992: LD_INT 15
17994: PUSH
17995: LD_INT 14
17997: PUSH
17998: LD_INT 13
18000: PUSH
18001: EMPTY
18002: LIST
18003: LIST
18004: LIST
18005: LIST
18006: LIST
18007: LIST
18008: PUSH
18009: LD_VAR 0 2
18013: PUSH
18014: LD_INT 3
18016: MINUS
18017: ARRAY
18018: ST_TO_ADDR
// end ; 10 .. 13 :
18019: GO 18529
18021: LD_INT 10
18023: DOUBLE
18024: GREATEREQUAL
18025: IFFALSE 18033
18027: LD_INT 13
18029: DOUBLE
18030: LESSEQUAL
18031: IFTRUE 18035
18033: GO 18112
18035: POP
// begin bc_type := b_lab_full ;
18036: LD_ADDR_OWVAR 42
18040: PUSH
18041: LD_INT 8
18043: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
18044: LD_ADDR_OWVAR 44
18048: PUSH
18049: LD_INT 10
18051: PUSH
18052: LD_INT 12
18054: PUSH
18055: LD_INT 14
18057: PUSH
18058: LD_INT 13
18060: PUSH
18061: EMPTY
18062: LIST
18063: LIST
18064: LIST
18065: LIST
18066: PUSH
18067: LD_VAR 0 2
18071: PUSH
18072: LD_INT 9
18074: MINUS
18075: ARRAY
18076: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
18077: LD_ADDR_OWVAR 45
18081: PUSH
18082: LD_INT 11
18084: PUSH
18085: LD_INT 15
18087: PUSH
18088: LD_INT 12
18090: PUSH
18091: LD_INT 15
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: LIST
18098: LIST
18099: PUSH
18100: LD_VAR 0 2
18104: PUSH
18105: LD_INT 9
18107: MINUS
18108: ARRAY
18109: ST_TO_ADDR
// end ; 14 :
18110: GO 18529
18112: LD_INT 14
18114: DOUBLE
18115: EQUAL
18116: IFTRUE 18120
18118: GO 18131
18120: POP
// bc_type := b_workshop ; 15 :
18121: LD_ADDR_OWVAR 42
18125: PUSH
18126: LD_INT 2
18128: ST_TO_ADDR
18129: GO 18529
18131: LD_INT 15
18133: DOUBLE
18134: EQUAL
18135: IFTRUE 18139
18137: GO 18150
18139: POP
// bc_type := b_factory ; 16 :
18140: LD_ADDR_OWVAR 42
18144: PUSH
18145: LD_INT 3
18147: ST_TO_ADDR
18148: GO 18529
18150: LD_INT 16
18152: DOUBLE
18153: EQUAL
18154: IFTRUE 18158
18156: GO 18169
18158: POP
// bc_type := b_ext_gun ; 17 :
18159: LD_ADDR_OWVAR 42
18163: PUSH
18164: LD_INT 17
18166: ST_TO_ADDR
18167: GO 18529
18169: LD_INT 17
18171: DOUBLE
18172: EQUAL
18173: IFTRUE 18177
18175: GO 18205
18177: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
18178: LD_ADDR_OWVAR 42
18182: PUSH
18183: LD_INT 19
18185: PUSH
18186: LD_INT 23
18188: PUSH
18189: LD_INT 19
18191: PUSH
18192: EMPTY
18193: LIST
18194: LIST
18195: LIST
18196: PUSH
18197: LD_VAR 0 1
18201: ARRAY
18202: ST_TO_ADDR
18203: GO 18529
18205: LD_INT 18
18207: DOUBLE
18208: EQUAL
18209: IFTRUE 18213
18211: GO 18224
18213: POP
// bc_type := b_ext_radar ; 19 :
18214: LD_ADDR_OWVAR 42
18218: PUSH
18219: LD_INT 20
18221: ST_TO_ADDR
18222: GO 18529
18224: LD_INT 19
18226: DOUBLE
18227: EQUAL
18228: IFTRUE 18232
18230: GO 18243
18232: POP
// bc_type := b_ext_radio ; 20 :
18233: LD_ADDR_OWVAR 42
18237: PUSH
18238: LD_INT 22
18240: ST_TO_ADDR
18241: GO 18529
18243: LD_INT 20
18245: DOUBLE
18246: EQUAL
18247: IFTRUE 18251
18249: GO 18262
18251: POP
// bc_type := b_ext_siberium ; 21 :
18252: LD_ADDR_OWVAR 42
18256: PUSH
18257: LD_INT 21
18259: ST_TO_ADDR
18260: GO 18529
18262: LD_INT 21
18264: DOUBLE
18265: EQUAL
18266: IFTRUE 18270
18268: GO 18281
18270: POP
// bc_type := b_ext_computer ; 22 :
18271: LD_ADDR_OWVAR 42
18275: PUSH
18276: LD_INT 24
18278: ST_TO_ADDR
18279: GO 18529
18281: LD_INT 22
18283: DOUBLE
18284: EQUAL
18285: IFTRUE 18289
18287: GO 18300
18289: POP
// bc_type := b_ext_track ; 23 :
18290: LD_ADDR_OWVAR 42
18294: PUSH
18295: LD_INT 16
18297: ST_TO_ADDR
18298: GO 18529
18300: LD_INT 23
18302: DOUBLE
18303: EQUAL
18304: IFTRUE 18308
18306: GO 18319
18308: POP
// bc_type := b_ext_laser ; 24 :
18309: LD_ADDR_OWVAR 42
18313: PUSH
18314: LD_INT 25
18316: ST_TO_ADDR
18317: GO 18529
18319: LD_INT 24
18321: DOUBLE
18322: EQUAL
18323: IFTRUE 18327
18325: GO 18338
18327: POP
// bc_type := b_control_tower ; 25 :
18328: LD_ADDR_OWVAR 42
18332: PUSH
18333: LD_INT 36
18335: ST_TO_ADDR
18336: GO 18529
18338: LD_INT 25
18340: DOUBLE
18341: EQUAL
18342: IFTRUE 18346
18344: GO 18357
18346: POP
// bc_type := b_breastwork ; 26 :
18347: LD_ADDR_OWVAR 42
18351: PUSH
18352: LD_INT 31
18354: ST_TO_ADDR
18355: GO 18529
18357: LD_INT 26
18359: DOUBLE
18360: EQUAL
18361: IFTRUE 18365
18363: GO 18376
18365: POP
// bc_type := b_bunker ; 27 :
18366: LD_ADDR_OWVAR 42
18370: PUSH
18371: LD_INT 32
18373: ST_TO_ADDR
18374: GO 18529
18376: LD_INT 27
18378: DOUBLE
18379: EQUAL
18380: IFTRUE 18384
18382: GO 18395
18384: POP
// bc_type := b_turret ; 28 :
18385: LD_ADDR_OWVAR 42
18389: PUSH
18390: LD_INT 33
18392: ST_TO_ADDR
18393: GO 18529
18395: LD_INT 28
18397: DOUBLE
18398: EQUAL
18399: IFTRUE 18403
18401: GO 18414
18403: POP
// bc_type := b_armoury ; 29 :
18404: LD_ADDR_OWVAR 42
18408: PUSH
18409: LD_INT 4
18411: ST_TO_ADDR
18412: GO 18529
18414: LD_INT 29
18416: DOUBLE
18417: EQUAL
18418: IFTRUE 18422
18420: GO 18433
18422: POP
// bc_type := b_barracks ; 30 :
18423: LD_ADDR_OWVAR 42
18427: PUSH
18428: LD_INT 5
18430: ST_TO_ADDR
18431: GO 18529
18433: LD_INT 30
18435: DOUBLE
18436: EQUAL
18437: IFTRUE 18441
18439: GO 18452
18441: POP
// bc_type := b_solar_power ; 31 :
18442: LD_ADDR_OWVAR 42
18446: PUSH
18447: LD_INT 27
18449: ST_TO_ADDR
18450: GO 18529
18452: LD_INT 31
18454: DOUBLE
18455: EQUAL
18456: IFTRUE 18460
18458: GO 18471
18460: POP
// bc_type := b_oil_power ; 32 :
18461: LD_ADDR_OWVAR 42
18465: PUSH
18466: LD_INT 26
18468: ST_TO_ADDR
18469: GO 18529
18471: LD_INT 32
18473: DOUBLE
18474: EQUAL
18475: IFTRUE 18479
18477: GO 18490
18479: POP
// bc_type := b_siberite_power ; 33 :
18480: LD_ADDR_OWVAR 42
18484: PUSH
18485: LD_INT 28
18487: ST_TO_ADDR
18488: GO 18529
18490: LD_INT 33
18492: DOUBLE
18493: EQUAL
18494: IFTRUE 18498
18496: GO 18509
18498: POP
// bc_type := b_oil_mine ; 34 :
18499: LD_ADDR_OWVAR 42
18503: PUSH
18504: LD_INT 29
18506: ST_TO_ADDR
18507: GO 18529
18509: LD_INT 34
18511: DOUBLE
18512: EQUAL
18513: IFTRUE 18517
18515: GO 18528
18517: POP
// bc_type := b_siberite_mine ; end ;
18518: LD_ADDR_OWVAR 42
18522: PUSH
18523: LD_INT 30
18525: ST_TO_ADDR
18526: GO 18529
18528: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
18529: LD_ADDR_VAR 0 8
18533: PUSH
18534: LD_VAR 0 5
18538: PPUSH
18539: LD_VAR 0 6
18543: PPUSH
18544: LD_VAR 0 3
18548: PPUSH
18549: CALL_OW 47
18553: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
18554: LD_OWVAR 42
18558: PUSH
18559: LD_INT 32
18561: PUSH
18562: LD_INT 33
18564: PUSH
18565: EMPTY
18566: LIST
18567: LIST
18568: IN
18569: IFFALSE 18585
// PlaceWeaponTurret ( b , weapon ) ;
18571: LD_VAR 0 8
18575: PPUSH
18576: LD_VAR 0 4
18580: PPUSH
18581: CALL_OW 431
// end ;
18585: LD_VAR 0 7
18589: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
18590: LD_INT 0
18592: PPUSH
18593: PPUSH
18594: PPUSH
18595: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18596: LD_ADDR_VAR 0 4
18600: PUSH
18601: LD_INT 22
18603: PUSH
18604: LD_OWVAR 2
18608: PUSH
18609: EMPTY
18610: LIST
18611: LIST
18612: PUSH
18613: LD_INT 2
18615: PUSH
18616: LD_INT 30
18618: PUSH
18619: LD_INT 0
18621: PUSH
18622: EMPTY
18623: LIST
18624: LIST
18625: PUSH
18626: LD_INT 30
18628: PUSH
18629: LD_INT 1
18631: PUSH
18632: EMPTY
18633: LIST
18634: LIST
18635: PUSH
18636: EMPTY
18637: LIST
18638: LIST
18639: LIST
18640: PUSH
18641: EMPTY
18642: LIST
18643: LIST
18644: PPUSH
18645: CALL_OW 69
18649: ST_TO_ADDR
// if not tmp then
18650: LD_VAR 0 4
18654: NOT
18655: IFFALSE 18659
// exit ;
18657: GO 18718
// for i in tmp do
18659: LD_ADDR_VAR 0 2
18663: PUSH
18664: LD_VAR 0 4
18668: PUSH
18669: FOR_IN
18670: IFFALSE 18716
// for j = 1 to 3 do
18672: LD_ADDR_VAR 0 3
18676: PUSH
18677: DOUBLE
18678: LD_INT 1
18680: DEC
18681: ST_TO_ADDR
18682: LD_INT 3
18684: PUSH
18685: FOR_TO
18686: IFFALSE 18712
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
18688: LD_VAR 0 2
18692: PPUSH
18693: CALL_OW 274
18697: PPUSH
18698: LD_VAR 0 3
18702: PPUSH
18703: LD_INT 99999
18705: PPUSH
18706: CALL_OW 277
18710: GO 18685
18712: POP
18713: POP
18714: GO 18669
18716: POP
18717: POP
// end ;
18718: LD_VAR 0 1
18722: RET
// export function hHackSetLevel10 ; var i , j ; begin
18723: LD_INT 0
18725: PPUSH
18726: PPUSH
18727: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18728: LD_ADDR_VAR 0 2
18732: PUSH
18733: LD_INT 21
18735: PUSH
18736: LD_INT 1
18738: PUSH
18739: EMPTY
18740: LIST
18741: LIST
18742: PPUSH
18743: CALL_OW 69
18747: PUSH
18748: FOR_IN
18749: IFFALSE 18801
// if IsSelected ( i ) then
18751: LD_VAR 0 2
18755: PPUSH
18756: CALL_OW 306
18760: IFFALSE 18799
// begin for j := 1 to 4 do
18762: LD_ADDR_VAR 0 3
18766: PUSH
18767: DOUBLE
18768: LD_INT 1
18770: DEC
18771: ST_TO_ADDR
18772: LD_INT 4
18774: PUSH
18775: FOR_TO
18776: IFFALSE 18797
// SetSkill ( i , j , 10 ) ;
18778: LD_VAR 0 2
18782: PPUSH
18783: LD_VAR 0 3
18787: PPUSH
18788: LD_INT 10
18790: PPUSH
18791: CALL_OW 237
18795: GO 18775
18797: POP
18798: POP
// end ;
18799: GO 18748
18801: POP
18802: POP
// end ;
18803: LD_VAR 0 1
18807: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
18808: LD_INT 0
18810: PPUSH
18811: PPUSH
18812: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
18813: LD_ADDR_VAR 0 2
18817: PUSH
18818: LD_INT 22
18820: PUSH
18821: LD_OWVAR 2
18825: PUSH
18826: EMPTY
18827: LIST
18828: LIST
18829: PUSH
18830: LD_INT 21
18832: PUSH
18833: LD_INT 1
18835: PUSH
18836: EMPTY
18837: LIST
18838: LIST
18839: PUSH
18840: EMPTY
18841: LIST
18842: LIST
18843: PPUSH
18844: CALL_OW 69
18848: PUSH
18849: FOR_IN
18850: IFFALSE 18891
// begin for j := 1 to 4 do
18852: LD_ADDR_VAR 0 3
18856: PUSH
18857: DOUBLE
18858: LD_INT 1
18860: DEC
18861: ST_TO_ADDR
18862: LD_INT 4
18864: PUSH
18865: FOR_TO
18866: IFFALSE 18887
// SetSkill ( i , j , 10 ) ;
18868: LD_VAR 0 2
18872: PPUSH
18873: LD_VAR 0 3
18877: PPUSH
18878: LD_INT 10
18880: PPUSH
18881: CALL_OW 237
18885: GO 18865
18887: POP
18888: POP
// end ;
18889: GO 18849
18891: POP
18892: POP
// end ;
18893: LD_VAR 0 1
18897: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
18898: LD_INT 0
18900: PPUSH
// uc_side := your_side ;
18901: LD_ADDR_OWVAR 20
18905: PUSH
18906: LD_OWVAR 2
18910: ST_TO_ADDR
// uc_nation := nation ;
18911: LD_ADDR_OWVAR 21
18915: PUSH
18916: LD_VAR 0 1
18920: ST_TO_ADDR
// InitHc ;
18921: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
18925: LD_INT 0
18927: PPUSH
18928: LD_VAR 0 2
18932: PPUSH
18933: LD_VAR 0 3
18937: PPUSH
18938: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
18942: LD_VAR 0 4
18946: PPUSH
18947: LD_VAR 0 5
18951: PPUSH
18952: CALL_OW 428
18956: PUSH
18957: LD_INT 0
18959: EQUAL
18960: IFFALSE 18984
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
18962: CALL_OW 44
18966: PPUSH
18967: LD_VAR 0 4
18971: PPUSH
18972: LD_VAR 0 5
18976: PPUSH
18977: LD_INT 1
18979: PPUSH
18980: CALL_OW 48
// end ;
18984: LD_VAR 0 6
18988: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
18989: LD_INT 0
18991: PPUSH
18992: PPUSH
// uc_side := your_side ;
18993: LD_ADDR_OWVAR 20
18997: PUSH
18998: LD_OWVAR 2
19002: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
19003: LD_VAR 0 1
19007: PUSH
19008: LD_INT 1
19010: PUSH
19011: LD_INT 2
19013: PUSH
19014: LD_INT 3
19016: PUSH
19017: LD_INT 4
19019: PUSH
19020: LD_INT 5
19022: PUSH
19023: EMPTY
19024: LIST
19025: LIST
19026: LIST
19027: LIST
19028: LIST
19029: IN
19030: IFFALSE 19042
// uc_nation := nation_american else
19032: LD_ADDR_OWVAR 21
19036: PUSH
19037: LD_INT 1
19039: ST_TO_ADDR
19040: GO 19085
// if chassis in [ 11 , 12 , 13 , 14 ] then
19042: LD_VAR 0 1
19046: PUSH
19047: LD_INT 11
19049: PUSH
19050: LD_INT 12
19052: PUSH
19053: LD_INT 13
19055: PUSH
19056: LD_INT 14
19058: PUSH
19059: EMPTY
19060: LIST
19061: LIST
19062: LIST
19063: LIST
19064: IN
19065: IFFALSE 19077
// uc_nation := nation_arabian else
19067: LD_ADDR_OWVAR 21
19071: PUSH
19072: LD_INT 2
19074: ST_TO_ADDR
19075: GO 19085
// uc_nation := nation_russian ;
19077: LD_ADDR_OWVAR 21
19081: PUSH
19082: LD_INT 3
19084: ST_TO_ADDR
// vc_chassis := chassis ;
19085: LD_ADDR_OWVAR 37
19089: PUSH
19090: LD_VAR 0 1
19094: ST_TO_ADDR
// vc_engine := engine ;
19095: LD_ADDR_OWVAR 39
19099: PUSH
19100: LD_VAR 0 2
19104: ST_TO_ADDR
// vc_control := control ;
19105: LD_ADDR_OWVAR 38
19109: PUSH
19110: LD_VAR 0 3
19114: ST_TO_ADDR
// vc_weapon := weapon ;
19115: LD_ADDR_OWVAR 40
19119: PUSH
19120: LD_VAR 0 4
19124: ST_TO_ADDR
// un := CreateVehicle ;
19125: LD_ADDR_VAR 0 8
19129: PUSH
19130: CALL_OW 45
19134: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
19135: LD_VAR 0 8
19139: PPUSH
19140: LD_INT 0
19142: PPUSH
19143: LD_INT 5
19145: PPUSH
19146: CALL_OW 12
19150: PPUSH
19151: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
19155: LD_VAR 0 8
19159: PPUSH
19160: LD_VAR 0 5
19164: PPUSH
19165: LD_VAR 0 6
19169: PPUSH
19170: LD_INT 1
19172: PPUSH
19173: CALL_OW 48
// end ;
19177: LD_VAR 0 7
19181: RET
// export hInvincible ; every 1 do
19182: GO 19184
19184: DISABLE
// hInvincible := [ ] ;
19185: LD_ADDR_EXP 81
19189: PUSH
19190: EMPTY
19191: ST_TO_ADDR
19192: END
// every 10 do var i ;
19193: GO 19195
19195: DISABLE
19196: LD_INT 0
19198: PPUSH
// begin enable ;
19199: ENABLE
// if not hInvincible then
19200: LD_EXP 81
19204: NOT
19205: IFFALSE 19209
// exit ;
19207: GO 19253
// for i in hInvincible do
19209: LD_ADDR_VAR 0 1
19213: PUSH
19214: LD_EXP 81
19218: PUSH
19219: FOR_IN
19220: IFFALSE 19251
// if GetLives ( i ) < 1000 then
19222: LD_VAR 0 1
19226: PPUSH
19227: CALL_OW 256
19231: PUSH
19232: LD_INT 1000
19234: LESS
19235: IFFALSE 19249
// SetLives ( i , 1000 ) ;
19237: LD_VAR 0 1
19241: PPUSH
19242: LD_INT 1000
19244: PPUSH
19245: CALL_OW 234
19249: GO 19219
19251: POP
19252: POP
// end ;
19253: PPOPN 1
19255: END
// export function hHackInvincible ; var i ; begin
19256: LD_INT 0
19258: PPUSH
19259: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
19260: LD_ADDR_VAR 0 2
19264: PUSH
19265: LD_INT 2
19267: PUSH
19268: LD_INT 21
19270: PUSH
19271: LD_INT 1
19273: PUSH
19274: EMPTY
19275: LIST
19276: LIST
19277: PUSH
19278: LD_INT 21
19280: PUSH
19281: LD_INT 2
19283: PUSH
19284: EMPTY
19285: LIST
19286: LIST
19287: PUSH
19288: EMPTY
19289: LIST
19290: LIST
19291: LIST
19292: PPUSH
19293: CALL_OW 69
19297: PUSH
19298: FOR_IN
19299: IFFALSE 19360
// if IsSelected ( i ) then
19301: LD_VAR 0 2
19305: PPUSH
19306: CALL_OW 306
19310: IFFALSE 19358
// begin if i in hInvincible then
19312: LD_VAR 0 2
19316: PUSH
19317: LD_EXP 81
19321: IN
19322: IFFALSE 19342
// hInvincible := hInvincible diff i else
19324: LD_ADDR_EXP 81
19328: PUSH
19329: LD_EXP 81
19333: PUSH
19334: LD_VAR 0 2
19338: DIFF
19339: ST_TO_ADDR
19340: GO 19358
// hInvincible := hInvincible union i ;
19342: LD_ADDR_EXP 81
19346: PUSH
19347: LD_EXP 81
19351: PUSH
19352: LD_VAR 0 2
19356: UNION
19357: ST_TO_ADDR
// end ;
19358: GO 19298
19360: POP
19361: POP
// end ;
19362: LD_VAR 0 1
19366: RET
// export function hHackInvisible ; var i , j ; begin
19367: LD_INT 0
19369: PPUSH
19370: PPUSH
19371: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19372: LD_ADDR_VAR 0 2
19376: PUSH
19377: LD_INT 21
19379: PUSH
19380: LD_INT 1
19382: PUSH
19383: EMPTY
19384: LIST
19385: LIST
19386: PPUSH
19387: CALL_OW 69
19391: PUSH
19392: FOR_IN
19393: IFFALSE 19417
// if IsSelected ( i ) then
19395: LD_VAR 0 2
19399: PPUSH
19400: CALL_OW 306
19404: IFFALSE 19415
// ComForceInvisible ( i ) ;
19406: LD_VAR 0 2
19410: PPUSH
19411: CALL_OW 496
19415: GO 19392
19417: POP
19418: POP
// end ;
19419: LD_VAR 0 1
19423: RET
// export function hHackChangeYourSide ; begin
19424: LD_INT 0
19426: PPUSH
// if your_side = 8 then
19427: LD_OWVAR 2
19431: PUSH
19432: LD_INT 8
19434: EQUAL
19435: IFFALSE 19447
// your_side := 0 else
19437: LD_ADDR_OWVAR 2
19441: PUSH
19442: LD_INT 0
19444: ST_TO_ADDR
19445: GO 19461
// your_side := your_side + 1 ;
19447: LD_ADDR_OWVAR 2
19451: PUSH
19452: LD_OWVAR 2
19456: PUSH
19457: LD_INT 1
19459: PLUS
19460: ST_TO_ADDR
// end ;
19461: LD_VAR 0 1
19465: RET
// export function hHackChangeUnitSide ; var i , j ; begin
19466: LD_INT 0
19468: PPUSH
19469: PPUSH
19470: PPUSH
// for i in all_units do
19471: LD_ADDR_VAR 0 2
19475: PUSH
19476: LD_OWVAR 3
19480: PUSH
19481: FOR_IN
19482: IFFALSE 19560
// if IsSelected ( i ) then
19484: LD_VAR 0 2
19488: PPUSH
19489: CALL_OW 306
19493: IFFALSE 19558
// begin j := GetSide ( i ) ;
19495: LD_ADDR_VAR 0 3
19499: PUSH
19500: LD_VAR 0 2
19504: PPUSH
19505: CALL_OW 255
19509: ST_TO_ADDR
// if j = 8 then
19510: LD_VAR 0 3
19514: PUSH
19515: LD_INT 8
19517: EQUAL
19518: IFFALSE 19530
// j := 0 else
19520: LD_ADDR_VAR 0 3
19524: PUSH
19525: LD_INT 0
19527: ST_TO_ADDR
19528: GO 19544
// j := j + 1 ;
19530: LD_ADDR_VAR 0 3
19534: PUSH
19535: LD_VAR 0 3
19539: PUSH
19540: LD_INT 1
19542: PLUS
19543: ST_TO_ADDR
// SetSide ( i , j ) ;
19544: LD_VAR 0 2
19548: PPUSH
19549: LD_VAR 0 3
19553: PPUSH
19554: CALL_OW 235
// end ;
19558: GO 19481
19560: POP
19561: POP
// end ;
19562: LD_VAR 0 1
19566: RET
// export function hHackFog ; begin
19567: LD_INT 0
19569: PPUSH
// FogOff ( true ) ;
19570: LD_INT 1
19572: PPUSH
19573: CALL_OW 344
// end ;
19577: LD_VAR 0 1
19581: RET
// export function hHackTeleport ( unit , x , y ) ; begin
19582: LD_INT 0
19584: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
19585: LD_VAR 0 1
19589: PPUSH
19590: LD_VAR 0 2
19594: PPUSH
19595: LD_VAR 0 3
19599: PPUSH
19600: LD_INT 1
19602: PPUSH
19603: LD_INT 1
19605: PPUSH
19606: CALL_OW 483
// CenterOnXY ( x , y ) ;
19610: LD_VAR 0 2
19614: PPUSH
19615: LD_VAR 0 3
19619: PPUSH
19620: CALL_OW 84
// end ; end_of_file
19624: LD_VAR 0 4
19628: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
19629: LD_INT 0
19631: PPUSH
19632: PPUSH
19633: PPUSH
19634: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
19635: LD_VAR 0 1
19639: PPUSH
19640: CALL_OW 264
19644: PUSH
19645: LD_EXP 98
19649: EQUAL
19650: IFFALSE 19722
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
19652: LD_INT 68
19654: PPUSH
19655: LD_VAR 0 1
19659: PPUSH
19660: CALL_OW 255
19664: PPUSH
19665: CALL_OW 321
19669: PUSH
19670: LD_INT 2
19672: EQUAL
19673: IFFALSE 19685
// eff := 70 else
19675: LD_ADDR_VAR 0 4
19679: PUSH
19680: LD_INT 70
19682: ST_TO_ADDR
19683: GO 19693
// eff := 30 ;
19685: LD_ADDR_VAR 0 4
19689: PUSH
19690: LD_INT 30
19692: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
19693: LD_VAR 0 1
19697: PPUSH
19698: CALL_OW 250
19702: PPUSH
19703: LD_VAR 0 1
19707: PPUSH
19708: CALL_OW 251
19712: PPUSH
19713: LD_VAR 0 4
19717: PPUSH
19718: CALL_OW 495
// end ; end ;
19722: LD_VAR 0 2
19726: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
19727: LD_INT 0
19729: PPUSH
// end ;
19730: LD_VAR 0 4
19734: RET
// export function SOS_Command ( cmd ) ; begin
19735: LD_INT 0
19737: PPUSH
// end ;
19738: LD_VAR 0 2
19742: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
19743: LD_INT 0
19745: PPUSH
// if cmd = 121 then
19746: LD_VAR 0 1
19750: PUSH
19751: LD_INT 121
19753: EQUAL
19754: IFFALSE 19756
// end ;
19756: LD_VAR 0 6
19760: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
19761: LD_INT 0
19763: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
19764: LD_VAR 0 1
19768: PUSH
19769: LD_INT 250
19771: EQUAL
19772: PUSH
19773: LD_VAR 0 2
19777: PPUSH
19778: CALL_OW 264
19782: PUSH
19783: LD_EXP 101
19787: EQUAL
19788: AND
19789: IFFALSE 19810
// MinerPlaceMine ( unit , x , y ) ;
19791: LD_VAR 0 2
19795: PPUSH
19796: LD_VAR 0 4
19800: PPUSH
19801: LD_VAR 0 5
19805: PPUSH
19806: CALL 22159 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
19810: LD_VAR 0 1
19814: PUSH
19815: LD_INT 251
19817: EQUAL
19818: PUSH
19819: LD_VAR 0 2
19823: PPUSH
19824: CALL_OW 264
19828: PUSH
19829: LD_EXP 101
19833: EQUAL
19834: AND
19835: IFFALSE 19856
// MinerDetonateMine ( unit , x , y ) ;
19837: LD_VAR 0 2
19841: PPUSH
19842: LD_VAR 0 4
19846: PPUSH
19847: LD_VAR 0 5
19851: PPUSH
19852: CALL 22436 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
19856: LD_VAR 0 1
19860: PUSH
19861: LD_INT 252
19863: EQUAL
19864: PUSH
19865: LD_VAR 0 2
19869: PPUSH
19870: CALL_OW 264
19874: PUSH
19875: LD_EXP 101
19879: EQUAL
19880: AND
19881: IFFALSE 19902
// MinerCreateMinefield ( unit , x , y ) ;
19883: LD_VAR 0 2
19887: PPUSH
19888: LD_VAR 0 4
19892: PPUSH
19893: LD_VAR 0 5
19897: PPUSH
19898: CALL 22853 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
19902: LD_VAR 0 1
19906: PUSH
19907: LD_INT 253
19909: EQUAL
19910: PUSH
19911: LD_VAR 0 2
19915: PPUSH
19916: CALL_OW 257
19920: PUSH
19921: LD_INT 5
19923: EQUAL
19924: AND
19925: IFFALSE 19946
// ComBinocular ( unit , x , y ) ;
19927: LD_VAR 0 2
19931: PPUSH
19932: LD_VAR 0 4
19936: PPUSH
19937: LD_VAR 0 5
19941: PPUSH
19942: CALL 23224 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
19946: LD_VAR 0 1
19950: PUSH
19951: LD_INT 254
19953: EQUAL
19954: PUSH
19955: LD_VAR 0 2
19959: PPUSH
19960: CALL_OW 264
19964: PUSH
19965: LD_EXP 96
19969: EQUAL
19970: AND
19971: PUSH
19972: LD_VAR 0 3
19976: PPUSH
19977: CALL_OW 263
19981: PUSH
19982: LD_INT 3
19984: EQUAL
19985: AND
19986: IFFALSE 20002
// HackDestroyVehicle ( unit , selectedUnit ) ;
19988: LD_VAR 0 2
19992: PPUSH
19993: LD_VAR 0 3
19997: PPUSH
19998: CALL 21519 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
20002: LD_VAR 0 1
20006: PUSH
20007: LD_INT 255
20009: EQUAL
20010: PUSH
20011: LD_VAR 0 2
20015: PPUSH
20016: CALL_OW 264
20020: PUSH
20021: LD_INT 14
20023: PUSH
20024: LD_INT 53
20026: PUSH
20027: EMPTY
20028: LIST
20029: LIST
20030: IN
20031: AND
20032: PUSH
20033: LD_VAR 0 4
20037: PPUSH
20038: LD_VAR 0 5
20042: PPUSH
20043: CALL_OW 488
20047: AND
20048: IFFALSE 20072
// CutTreeXYR ( unit , x , y , 12 ) ;
20050: LD_VAR 0 2
20054: PPUSH
20055: LD_VAR 0 4
20059: PPUSH
20060: LD_VAR 0 5
20064: PPUSH
20065: LD_INT 12
20067: PPUSH
20068: CALL 20085 0 4
// end ;
20072: LD_VAR 0 6
20076: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
20077: LD_INT 0
20079: PPUSH
// end ;
20080: LD_VAR 0 4
20084: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
20085: LD_INT 0
20087: PPUSH
20088: PPUSH
20089: PPUSH
20090: PPUSH
20091: PPUSH
20092: PPUSH
20093: PPUSH
20094: PPUSH
20095: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
20096: LD_VAR 0 1
20100: NOT
20101: PUSH
20102: LD_VAR 0 2
20106: PPUSH
20107: LD_VAR 0 3
20111: PPUSH
20112: CALL_OW 488
20116: NOT
20117: OR
20118: PUSH
20119: LD_VAR 0 4
20123: NOT
20124: OR
20125: IFFALSE 20129
// exit ;
20127: GO 20469
// list := [ ] ;
20129: LD_ADDR_VAR 0 13
20133: PUSH
20134: EMPTY
20135: ST_TO_ADDR
// if x - r < 0 then
20136: LD_VAR 0 2
20140: PUSH
20141: LD_VAR 0 4
20145: MINUS
20146: PUSH
20147: LD_INT 0
20149: LESS
20150: IFFALSE 20162
// min_x := 0 else
20152: LD_ADDR_VAR 0 7
20156: PUSH
20157: LD_INT 0
20159: ST_TO_ADDR
20160: GO 20178
// min_x := x - r ;
20162: LD_ADDR_VAR 0 7
20166: PUSH
20167: LD_VAR 0 2
20171: PUSH
20172: LD_VAR 0 4
20176: MINUS
20177: ST_TO_ADDR
// if y - r < 0 then
20178: LD_VAR 0 3
20182: PUSH
20183: LD_VAR 0 4
20187: MINUS
20188: PUSH
20189: LD_INT 0
20191: LESS
20192: IFFALSE 20204
// min_y := 0 else
20194: LD_ADDR_VAR 0 8
20198: PUSH
20199: LD_INT 0
20201: ST_TO_ADDR
20202: GO 20220
// min_y := y - r ;
20204: LD_ADDR_VAR 0 8
20208: PUSH
20209: LD_VAR 0 3
20213: PUSH
20214: LD_VAR 0 4
20218: MINUS
20219: ST_TO_ADDR
// max_x := x + r ;
20220: LD_ADDR_VAR 0 9
20224: PUSH
20225: LD_VAR 0 2
20229: PUSH
20230: LD_VAR 0 4
20234: PLUS
20235: ST_TO_ADDR
// max_y := y + r ;
20236: LD_ADDR_VAR 0 10
20240: PUSH
20241: LD_VAR 0 3
20245: PUSH
20246: LD_VAR 0 4
20250: PLUS
20251: ST_TO_ADDR
// for _x = min_x to max_x do
20252: LD_ADDR_VAR 0 11
20256: PUSH
20257: DOUBLE
20258: LD_VAR 0 7
20262: DEC
20263: ST_TO_ADDR
20264: LD_VAR 0 9
20268: PUSH
20269: FOR_TO
20270: IFFALSE 20387
// for _y = min_y to max_y do
20272: LD_ADDR_VAR 0 12
20276: PUSH
20277: DOUBLE
20278: LD_VAR 0 8
20282: DEC
20283: ST_TO_ADDR
20284: LD_VAR 0 10
20288: PUSH
20289: FOR_TO
20290: IFFALSE 20383
// begin if not ValidHex ( _x , _y ) then
20292: LD_VAR 0 11
20296: PPUSH
20297: LD_VAR 0 12
20301: PPUSH
20302: CALL_OW 488
20306: NOT
20307: IFFALSE 20311
// continue ;
20309: GO 20289
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
20311: LD_VAR 0 11
20315: PPUSH
20316: LD_VAR 0 12
20320: PPUSH
20321: CALL_OW 351
20325: PUSH
20326: LD_VAR 0 11
20330: PPUSH
20331: LD_VAR 0 12
20335: PPUSH
20336: CALL_OW 554
20340: AND
20341: IFFALSE 20381
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
20343: LD_ADDR_VAR 0 13
20347: PUSH
20348: LD_VAR 0 13
20352: PPUSH
20353: LD_VAR 0 13
20357: PUSH
20358: LD_INT 1
20360: PLUS
20361: PPUSH
20362: LD_VAR 0 11
20366: PUSH
20367: LD_VAR 0 12
20371: PUSH
20372: EMPTY
20373: LIST
20374: LIST
20375: PPUSH
20376: CALL_OW 2
20380: ST_TO_ADDR
// end ;
20381: GO 20289
20383: POP
20384: POP
20385: GO 20269
20387: POP
20388: POP
// if not list then
20389: LD_VAR 0 13
20393: NOT
20394: IFFALSE 20398
// exit ;
20396: GO 20469
// for i in list do
20398: LD_ADDR_VAR 0 6
20402: PUSH
20403: LD_VAR 0 13
20407: PUSH
20408: FOR_IN
20409: IFFALSE 20467
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
20411: LD_VAR 0 1
20415: PPUSH
20416: LD_STRING M
20418: PUSH
20419: LD_VAR 0 6
20423: PUSH
20424: LD_INT 1
20426: ARRAY
20427: PUSH
20428: LD_VAR 0 6
20432: PUSH
20433: LD_INT 2
20435: ARRAY
20436: PUSH
20437: LD_INT 0
20439: PUSH
20440: LD_INT 0
20442: PUSH
20443: LD_INT 0
20445: PUSH
20446: LD_INT 0
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: LIST
20453: LIST
20454: LIST
20455: LIST
20456: LIST
20457: PUSH
20458: EMPTY
20459: LIST
20460: PPUSH
20461: CALL_OW 447
20465: GO 20408
20467: POP
20468: POP
// end ;
20469: LD_VAR 0 5
20473: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
20474: LD_EXP 84
20478: NOT
20479: IFFALSE 20529
20481: GO 20483
20483: DISABLE
// begin initHack := true ;
20484: LD_ADDR_EXP 84
20488: PUSH
20489: LD_INT 1
20491: ST_TO_ADDR
// hackTanks := [ ] ;
20492: LD_ADDR_EXP 85
20496: PUSH
20497: EMPTY
20498: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
20499: LD_ADDR_EXP 86
20503: PUSH
20504: EMPTY
20505: ST_TO_ADDR
// hackLimit := 3 ;
20506: LD_ADDR_EXP 87
20510: PUSH
20511: LD_INT 3
20513: ST_TO_ADDR
// hackDist := 12 ;
20514: LD_ADDR_EXP 88
20518: PUSH
20519: LD_INT 12
20521: ST_TO_ADDR
// hackCounter := [ ] ;
20522: LD_ADDR_EXP 89
20526: PUSH
20527: EMPTY
20528: ST_TO_ADDR
// end ;
20529: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
20530: LD_EXP 84
20534: PUSH
20535: LD_INT 34
20537: PUSH
20538: LD_EXP 96
20542: PUSH
20543: EMPTY
20544: LIST
20545: LIST
20546: PPUSH
20547: CALL_OW 69
20551: AND
20552: IFFALSE 20807
20554: GO 20556
20556: DISABLE
20557: LD_INT 0
20559: PPUSH
20560: PPUSH
// begin enable ;
20561: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
20562: LD_ADDR_VAR 0 1
20566: PUSH
20567: LD_INT 34
20569: PUSH
20570: LD_EXP 96
20574: PUSH
20575: EMPTY
20576: LIST
20577: LIST
20578: PPUSH
20579: CALL_OW 69
20583: PUSH
20584: FOR_IN
20585: IFFALSE 20805
// begin if not i in hackTanks then
20587: LD_VAR 0 1
20591: PUSH
20592: LD_EXP 85
20596: IN
20597: NOT
20598: IFFALSE 20681
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
20600: LD_ADDR_EXP 85
20604: PUSH
20605: LD_EXP 85
20609: PPUSH
20610: LD_EXP 85
20614: PUSH
20615: LD_INT 1
20617: PLUS
20618: PPUSH
20619: LD_VAR 0 1
20623: PPUSH
20624: CALL_OW 1
20628: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
20629: LD_ADDR_EXP 86
20633: PUSH
20634: LD_EXP 86
20638: PPUSH
20639: LD_EXP 86
20643: PUSH
20644: LD_INT 1
20646: PLUS
20647: PPUSH
20648: EMPTY
20649: PPUSH
20650: CALL_OW 1
20654: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
20655: LD_ADDR_EXP 89
20659: PUSH
20660: LD_EXP 89
20664: PPUSH
20665: LD_EXP 89
20669: PUSH
20670: LD_INT 1
20672: PLUS
20673: PPUSH
20674: EMPTY
20675: PPUSH
20676: CALL_OW 1
20680: ST_TO_ADDR
// end ; if not IsOk ( i ) then
20681: LD_VAR 0 1
20685: PPUSH
20686: CALL_OW 302
20690: NOT
20691: IFFALSE 20704
// begin HackUnlinkAll ( i ) ;
20693: LD_VAR 0 1
20697: PPUSH
20698: CALL 20810 0 1
// continue ;
20702: GO 20584
// end ; HackCheckCapturedStatus ( i ) ;
20704: LD_VAR 0 1
20708: PPUSH
20709: CALL 21253 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
20713: LD_ADDR_VAR 0 2
20717: PUSH
20718: LD_INT 81
20720: PUSH
20721: LD_VAR 0 1
20725: PPUSH
20726: CALL_OW 255
20730: PUSH
20731: EMPTY
20732: LIST
20733: LIST
20734: PUSH
20735: LD_INT 33
20737: PUSH
20738: LD_INT 3
20740: PUSH
20741: EMPTY
20742: LIST
20743: LIST
20744: PUSH
20745: LD_INT 91
20747: PUSH
20748: LD_VAR 0 1
20752: PUSH
20753: LD_EXP 88
20757: PUSH
20758: EMPTY
20759: LIST
20760: LIST
20761: LIST
20762: PUSH
20763: LD_INT 50
20765: PUSH
20766: EMPTY
20767: LIST
20768: PUSH
20769: EMPTY
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: PPUSH
20775: CALL_OW 69
20779: ST_TO_ADDR
// if not tmp then
20780: LD_VAR 0 2
20784: NOT
20785: IFFALSE 20789
// continue ;
20787: GO 20584
// HackLink ( i , tmp ) ;
20789: LD_VAR 0 1
20793: PPUSH
20794: LD_VAR 0 2
20798: PPUSH
20799: CALL 20946 0 2
// end ;
20803: GO 20584
20805: POP
20806: POP
// end ;
20807: PPOPN 2
20809: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
20810: LD_INT 0
20812: PPUSH
20813: PPUSH
20814: PPUSH
// if not hack in hackTanks then
20815: LD_VAR 0 1
20819: PUSH
20820: LD_EXP 85
20824: IN
20825: NOT
20826: IFFALSE 20830
// exit ;
20828: GO 20941
// index := GetElementIndex ( hackTanks , hack ) ;
20830: LD_ADDR_VAR 0 4
20834: PUSH
20835: LD_EXP 85
20839: PPUSH
20840: LD_VAR 0 1
20844: PPUSH
20845: CALL 28583 0 2
20849: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
20850: LD_EXP 86
20854: PUSH
20855: LD_VAR 0 4
20859: ARRAY
20860: IFFALSE 20941
// begin for i in hackTanksCaptured [ index ] do
20862: LD_ADDR_VAR 0 3
20866: PUSH
20867: LD_EXP 86
20871: PUSH
20872: LD_VAR 0 4
20876: ARRAY
20877: PUSH
20878: FOR_IN
20879: IFFALSE 20905
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
20881: LD_VAR 0 3
20885: PUSH
20886: LD_INT 1
20888: ARRAY
20889: PPUSH
20890: LD_VAR 0 3
20894: PUSH
20895: LD_INT 2
20897: ARRAY
20898: PPUSH
20899: CALL_OW 235
20903: GO 20878
20905: POP
20906: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
20907: LD_ADDR_EXP 86
20911: PUSH
20912: LD_EXP 86
20916: PPUSH
20917: LD_VAR 0 4
20921: PPUSH
20922: EMPTY
20923: PPUSH
20924: CALL_OW 1
20928: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
20929: LD_VAR 0 1
20933: PPUSH
20934: LD_INT 0
20936: PPUSH
20937: CALL_OW 505
// end ; end ;
20941: LD_VAR 0 2
20945: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
20946: LD_INT 0
20948: PPUSH
20949: PPUSH
20950: PPUSH
// if not hack in hackTanks or not vehicles then
20951: LD_VAR 0 1
20955: PUSH
20956: LD_EXP 85
20960: IN
20961: NOT
20962: PUSH
20963: LD_VAR 0 2
20967: NOT
20968: OR
20969: IFFALSE 20973
// exit ;
20971: GO 21248
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
20973: LD_ADDR_VAR 0 2
20977: PUSH
20978: LD_VAR 0 1
20982: PPUSH
20983: LD_VAR 0 2
20987: PPUSH
20988: LD_INT 1
20990: PPUSH
20991: LD_INT 1
20993: PPUSH
20994: CALL 29233 0 4
20998: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
20999: LD_ADDR_VAR 0 5
21003: PUSH
21004: LD_EXP 85
21008: PPUSH
21009: LD_VAR 0 1
21013: PPUSH
21014: CALL 28583 0 2
21018: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
21019: LD_EXP 86
21023: PUSH
21024: LD_VAR 0 5
21028: ARRAY
21029: PUSH
21030: LD_EXP 87
21034: LESS
21035: IFFALSE 21224
// begin for i := 1 to vehicles do
21037: LD_ADDR_VAR 0 4
21041: PUSH
21042: DOUBLE
21043: LD_INT 1
21045: DEC
21046: ST_TO_ADDR
21047: LD_VAR 0 2
21051: PUSH
21052: FOR_TO
21053: IFFALSE 21222
// begin if hackTanksCaptured [ index ] = hackLimit then
21055: LD_EXP 86
21059: PUSH
21060: LD_VAR 0 5
21064: ARRAY
21065: PUSH
21066: LD_EXP 87
21070: EQUAL
21071: IFFALSE 21075
// break ;
21073: GO 21222
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
21075: LD_ADDR_EXP 89
21079: PUSH
21080: LD_EXP 89
21084: PPUSH
21085: LD_VAR 0 5
21089: PPUSH
21090: LD_EXP 89
21094: PUSH
21095: LD_VAR 0 5
21099: ARRAY
21100: PUSH
21101: LD_INT 1
21103: PLUS
21104: PPUSH
21105: CALL_OW 1
21109: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
21110: LD_ADDR_EXP 86
21114: PUSH
21115: LD_EXP 86
21119: PPUSH
21120: LD_VAR 0 5
21124: PUSH
21125: LD_EXP 86
21129: PUSH
21130: LD_VAR 0 5
21134: ARRAY
21135: PUSH
21136: LD_INT 1
21138: PLUS
21139: PUSH
21140: EMPTY
21141: LIST
21142: LIST
21143: PPUSH
21144: LD_VAR 0 2
21148: PUSH
21149: LD_VAR 0 4
21153: ARRAY
21154: PUSH
21155: LD_VAR 0 2
21159: PUSH
21160: LD_VAR 0 4
21164: ARRAY
21165: PPUSH
21166: CALL_OW 255
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: PPUSH
21175: CALL 28798 0 3
21179: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
21180: LD_VAR 0 2
21184: PUSH
21185: LD_VAR 0 4
21189: ARRAY
21190: PPUSH
21191: LD_VAR 0 1
21195: PPUSH
21196: CALL_OW 255
21200: PPUSH
21201: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
21205: LD_VAR 0 2
21209: PUSH
21210: LD_VAR 0 4
21214: ARRAY
21215: PPUSH
21216: CALL_OW 141
// end ;
21220: GO 21052
21222: POP
21223: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21224: LD_VAR 0 1
21228: PPUSH
21229: LD_EXP 86
21233: PUSH
21234: LD_VAR 0 5
21238: ARRAY
21239: PUSH
21240: LD_INT 0
21242: PLUS
21243: PPUSH
21244: CALL_OW 505
// end ;
21248: LD_VAR 0 3
21252: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
21253: LD_INT 0
21255: PPUSH
21256: PPUSH
21257: PPUSH
21258: PPUSH
// if not hack in hackTanks then
21259: LD_VAR 0 1
21263: PUSH
21264: LD_EXP 85
21268: IN
21269: NOT
21270: IFFALSE 21274
// exit ;
21272: GO 21514
// index := GetElementIndex ( hackTanks , hack ) ;
21274: LD_ADDR_VAR 0 4
21278: PUSH
21279: LD_EXP 85
21283: PPUSH
21284: LD_VAR 0 1
21288: PPUSH
21289: CALL 28583 0 2
21293: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
21294: LD_ADDR_VAR 0 3
21298: PUSH
21299: DOUBLE
21300: LD_EXP 86
21304: PUSH
21305: LD_VAR 0 4
21309: ARRAY
21310: INC
21311: ST_TO_ADDR
21312: LD_INT 1
21314: PUSH
21315: FOR_DOWNTO
21316: IFFALSE 21488
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
21318: LD_ADDR_VAR 0 5
21322: PUSH
21323: LD_EXP 86
21327: PUSH
21328: LD_VAR 0 4
21332: ARRAY
21333: PUSH
21334: LD_VAR 0 3
21338: ARRAY
21339: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
21340: LD_VAR 0 5
21344: PUSH
21345: LD_INT 1
21347: ARRAY
21348: PPUSH
21349: CALL_OW 302
21353: NOT
21354: PUSH
21355: LD_VAR 0 5
21359: PUSH
21360: LD_INT 1
21362: ARRAY
21363: PPUSH
21364: CALL_OW 255
21368: PUSH
21369: LD_VAR 0 1
21373: PPUSH
21374: CALL_OW 255
21378: NONEQUAL
21379: OR
21380: IFFALSE 21486
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
21382: LD_VAR 0 5
21386: PUSH
21387: LD_INT 1
21389: ARRAY
21390: PPUSH
21391: CALL_OW 305
21395: PUSH
21396: LD_VAR 0 5
21400: PUSH
21401: LD_INT 1
21403: ARRAY
21404: PPUSH
21405: CALL_OW 255
21409: PUSH
21410: LD_VAR 0 1
21414: PPUSH
21415: CALL_OW 255
21419: EQUAL
21420: AND
21421: IFFALSE 21445
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
21423: LD_VAR 0 5
21427: PUSH
21428: LD_INT 1
21430: ARRAY
21431: PPUSH
21432: LD_VAR 0 5
21436: PUSH
21437: LD_INT 2
21439: ARRAY
21440: PPUSH
21441: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
21445: LD_ADDR_EXP 86
21449: PUSH
21450: LD_EXP 86
21454: PPUSH
21455: LD_VAR 0 4
21459: PPUSH
21460: LD_EXP 86
21464: PUSH
21465: LD_VAR 0 4
21469: ARRAY
21470: PPUSH
21471: LD_VAR 0 3
21475: PPUSH
21476: CALL_OW 3
21480: PPUSH
21481: CALL_OW 1
21485: ST_TO_ADDR
// end ; end ;
21486: GO 21315
21488: POP
21489: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21490: LD_VAR 0 1
21494: PPUSH
21495: LD_EXP 86
21499: PUSH
21500: LD_VAR 0 4
21504: ARRAY
21505: PUSH
21506: LD_INT 0
21508: PLUS
21509: PPUSH
21510: CALL_OW 505
// end ;
21514: LD_VAR 0 2
21518: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
21519: LD_INT 0
21521: PPUSH
21522: PPUSH
21523: PPUSH
21524: PPUSH
// if not hack in hackTanks then
21525: LD_VAR 0 1
21529: PUSH
21530: LD_EXP 85
21534: IN
21535: NOT
21536: IFFALSE 21540
// exit ;
21538: GO 21625
// index := GetElementIndex ( hackTanks , hack ) ;
21540: LD_ADDR_VAR 0 5
21544: PUSH
21545: LD_EXP 85
21549: PPUSH
21550: LD_VAR 0 1
21554: PPUSH
21555: CALL 28583 0 2
21559: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
21560: LD_ADDR_VAR 0 4
21564: PUSH
21565: DOUBLE
21566: LD_INT 1
21568: DEC
21569: ST_TO_ADDR
21570: LD_EXP 86
21574: PUSH
21575: LD_VAR 0 5
21579: ARRAY
21580: PUSH
21581: FOR_TO
21582: IFFALSE 21623
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
21584: LD_EXP 86
21588: PUSH
21589: LD_VAR 0 5
21593: ARRAY
21594: PUSH
21595: LD_VAR 0 4
21599: ARRAY
21600: PUSH
21601: LD_INT 1
21603: ARRAY
21604: PUSH
21605: LD_VAR 0 2
21609: EQUAL
21610: IFFALSE 21621
// KillUnit ( vehicle ) ;
21612: LD_VAR 0 2
21616: PPUSH
21617: CALL_OW 66
21621: GO 21581
21623: POP
21624: POP
// end ;
21625: LD_VAR 0 3
21629: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
21630: LD_EXP 90
21634: NOT
21635: IFFALSE 21670
21637: GO 21639
21639: DISABLE
// begin initMiner := true ;
21640: LD_ADDR_EXP 90
21644: PUSH
21645: LD_INT 1
21647: ST_TO_ADDR
// minersList := [ ] ;
21648: LD_ADDR_EXP 91
21652: PUSH
21653: EMPTY
21654: ST_TO_ADDR
// minerMinesList := [ ] ;
21655: LD_ADDR_EXP 92
21659: PUSH
21660: EMPTY
21661: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
21662: LD_ADDR_EXP 93
21666: PUSH
21667: LD_INT 5
21669: ST_TO_ADDR
// end ;
21670: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
21671: LD_EXP 90
21675: PUSH
21676: LD_INT 34
21678: PUSH
21679: LD_EXP 101
21683: PUSH
21684: EMPTY
21685: LIST
21686: LIST
21687: PPUSH
21688: CALL_OW 69
21692: AND
21693: IFFALSE 22156
21695: GO 21697
21697: DISABLE
21698: LD_INT 0
21700: PPUSH
21701: PPUSH
21702: PPUSH
21703: PPUSH
// begin enable ;
21704: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
21705: LD_ADDR_VAR 0 1
21709: PUSH
21710: LD_INT 34
21712: PUSH
21713: LD_EXP 101
21717: PUSH
21718: EMPTY
21719: LIST
21720: LIST
21721: PPUSH
21722: CALL_OW 69
21726: PUSH
21727: FOR_IN
21728: IFFALSE 21800
// begin if not i in minersList then
21730: LD_VAR 0 1
21734: PUSH
21735: LD_EXP 91
21739: IN
21740: NOT
21741: IFFALSE 21798
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
21743: LD_ADDR_EXP 91
21747: PUSH
21748: LD_EXP 91
21752: PPUSH
21753: LD_EXP 91
21757: PUSH
21758: LD_INT 1
21760: PLUS
21761: PPUSH
21762: LD_VAR 0 1
21766: PPUSH
21767: CALL_OW 1
21771: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
21772: LD_ADDR_EXP 92
21776: PUSH
21777: LD_EXP 92
21781: PPUSH
21782: LD_EXP 92
21786: PUSH
21787: LD_INT 1
21789: PLUS
21790: PPUSH
21791: EMPTY
21792: PPUSH
21793: CALL_OW 1
21797: ST_TO_ADDR
// end end ;
21798: GO 21727
21800: POP
21801: POP
// for i := minerMinesList downto 1 do
21802: LD_ADDR_VAR 0 1
21806: PUSH
21807: DOUBLE
21808: LD_EXP 92
21812: INC
21813: ST_TO_ADDR
21814: LD_INT 1
21816: PUSH
21817: FOR_DOWNTO
21818: IFFALSE 22154
// begin if IsLive ( minersList [ i ] ) then
21820: LD_EXP 91
21824: PUSH
21825: LD_VAR 0 1
21829: ARRAY
21830: PPUSH
21831: CALL_OW 300
21835: IFFALSE 21863
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
21837: LD_EXP 91
21841: PUSH
21842: LD_VAR 0 1
21846: ARRAY
21847: PPUSH
21848: LD_EXP 92
21852: PUSH
21853: LD_VAR 0 1
21857: ARRAY
21858: PPUSH
21859: CALL_OW 505
// if not minerMinesList [ i ] then
21863: LD_EXP 92
21867: PUSH
21868: LD_VAR 0 1
21872: ARRAY
21873: NOT
21874: IFFALSE 21878
// continue ;
21876: GO 21817
// for j := minerMinesList [ i ] downto 1 do
21878: LD_ADDR_VAR 0 2
21882: PUSH
21883: DOUBLE
21884: LD_EXP 92
21888: PUSH
21889: LD_VAR 0 1
21893: ARRAY
21894: INC
21895: ST_TO_ADDR
21896: LD_INT 1
21898: PUSH
21899: FOR_DOWNTO
21900: IFFALSE 22150
// begin side := GetSide ( minersList [ i ] ) ;
21902: LD_ADDR_VAR 0 3
21906: PUSH
21907: LD_EXP 91
21911: PUSH
21912: LD_VAR 0 1
21916: ARRAY
21917: PPUSH
21918: CALL_OW 255
21922: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
21923: LD_ADDR_VAR 0 4
21927: PUSH
21928: LD_EXP 92
21932: PUSH
21933: LD_VAR 0 1
21937: ARRAY
21938: PUSH
21939: LD_VAR 0 2
21943: ARRAY
21944: PUSH
21945: LD_INT 1
21947: ARRAY
21948: PPUSH
21949: LD_EXP 92
21953: PUSH
21954: LD_VAR 0 1
21958: ARRAY
21959: PUSH
21960: LD_VAR 0 2
21964: ARRAY
21965: PUSH
21966: LD_INT 2
21968: ARRAY
21969: PPUSH
21970: CALL_OW 428
21974: ST_TO_ADDR
// if not tmp then
21975: LD_VAR 0 4
21979: NOT
21980: IFFALSE 21984
// continue ;
21982: GO 21899
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
21984: LD_VAR 0 4
21988: PUSH
21989: LD_INT 81
21991: PUSH
21992: LD_VAR 0 3
21996: PUSH
21997: EMPTY
21998: LIST
21999: LIST
22000: PPUSH
22001: CALL_OW 69
22005: IN
22006: PUSH
22007: LD_EXP 92
22011: PUSH
22012: LD_VAR 0 1
22016: ARRAY
22017: PUSH
22018: LD_VAR 0 2
22022: ARRAY
22023: PUSH
22024: LD_INT 1
22026: ARRAY
22027: PPUSH
22028: LD_EXP 92
22032: PUSH
22033: LD_VAR 0 1
22037: ARRAY
22038: PUSH
22039: LD_VAR 0 2
22043: ARRAY
22044: PUSH
22045: LD_INT 2
22047: ARRAY
22048: PPUSH
22049: CALL_OW 458
22053: AND
22054: IFFALSE 22148
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
22056: LD_EXP 92
22060: PUSH
22061: LD_VAR 0 1
22065: ARRAY
22066: PUSH
22067: LD_VAR 0 2
22071: ARRAY
22072: PUSH
22073: LD_INT 1
22075: ARRAY
22076: PPUSH
22077: LD_EXP 92
22081: PUSH
22082: LD_VAR 0 1
22086: ARRAY
22087: PUSH
22088: LD_VAR 0 2
22092: ARRAY
22093: PUSH
22094: LD_INT 2
22096: ARRAY
22097: PPUSH
22098: LD_VAR 0 3
22102: PPUSH
22103: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
22107: LD_ADDR_EXP 92
22111: PUSH
22112: LD_EXP 92
22116: PPUSH
22117: LD_VAR 0 1
22121: PPUSH
22122: LD_EXP 92
22126: PUSH
22127: LD_VAR 0 1
22131: ARRAY
22132: PPUSH
22133: LD_VAR 0 2
22137: PPUSH
22138: CALL_OW 3
22142: PPUSH
22143: CALL_OW 1
22147: ST_TO_ADDR
// end ; end ;
22148: GO 21899
22150: POP
22151: POP
// end ;
22152: GO 21817
22154: POP
22155: POP
// end ;
22156: PPOPN 4
22158: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
22159: LD_INT 0
22161: PPUSH
22162: PPUSH
// result := false ;
22163: LD_ADDR_VAR 0 4
22167: PUSH
22168: LD_INT 0
22170: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
22171: LD_VAR 0 1
22175: PPUSH
22176: CALL_OW 264
22180: PUSH
22181: LD_EXP 101
22185: EQUAL
22186: NOT
22187: IFFALSE 22191
// exit ;
22189: GO 22431
// index := GetElementIndex ( minersList , unit ) ;
22191: LD_ADDR_VAR 0 5
22195: PUSH
22196: LD_EXP 91
22200: PPUSH
22201: LD_VAR 0 1
22205: PPUSH
22206: CALL 28583 0 2
22210: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
22211: LD_EXP 92
22215: PUSH
22216: LD_VAR 0 5
22220: ARRAY
22221: PUSH
22222: LD_EXP 93
22226: GREATEREQUAL
22227: IFFALSE 22231
// exit ;
22229: GO 22431
// ComMoveXY ( unit , x , y ) ;
22231: LD_VAR 0 1
22235: PPUSH
22236: LD_VAR 0 2
22240: PPUSH
22241: LD_VAR 0 3
22245: PPUSH
22246: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
22250: LD_INT 35
22252: PPUSH
22253: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
22257: LD_VAR 0 1
22261: PPUSH
22262: LD_VAR 0 2
22266: PPUSH
22267: LD_VAR 0 3
22271: PPUSH
22272: CALL 59355 0 3
22276: NOT
22277: PUSH
22278: LD_VAR 0 1
22282: PPUSH
22283: CALL_OW 314
22287: AND
22288: IFFALSE 22292
// exit ;
22290: GO 22431
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
22292: LD_VAR 0 2
22296: PPUSH
22297: LD_VAR 0 3
22301: PPUSH
22302: CALL_OW 428
22306: PUSH
22307: LD_VAR 0 1
22311: EQUAL
22312: PUSH
22313: LD_VAR 0 1
22317: PPUSH
22318: CALL_OW 314
22322: NOT
22323: AND
22324: IFFALSE 22250
// PlaySoundXY ( x , y , PlantMine ) ;
22326: LD_VAR 0 2
22330: PPUSH
22331: LD_VAR 0 3
22335: PPUSH
22336: LD_STRING PlantMine
22338: PPUSH
22339: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
22343: LD_VAR 0 2
22347: PPUSH
22348: LD_VAR 0 3
22352: PPUSH
22353: LD_VAR 0 1
22357: PPUSH
22358: CALL_OW 255
22362: PPUSH
22363: LD_INT 0
22365: PPUSH
22366: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
22370: LD_ADDR_EXP 92
22374: PUSH
22375: LD_EXP 92
22379: PPUSH
22380: LD_VAR 0 5
22384: PUSH
22385: LD_EXP 92
22389: PUSH
22390: LD_VAR 0 5
22394: ARRAY
22395: PUSH
22396: LD_INT 1
22398: PLUS
22399: PUSH
22400: EMPTY
22401: LIST
22402: LIST
22403: PPUSH
22404: LD_VAR 0 2
22408: PUSH
22409: LD_VAR 0 3
22413: PUSH
22414: EMPTY
22415: LIST
22416: LIST
22417: PPUSH
22418: CALL 28798 0 3
22422: ST_TO_ADDR
// result := true ;
22423: LD_ADDR_VAR 0 4
22427: PUSH
22428: LD_INT 1
22430: ST_TO_ADDR
// end ;
22431: LD_VAR 0 4
22435: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
22436: LD_INT 0
22438: PPUSH
22439: PPUSH
22440: PPUSH
// if not unit in minersList then
22441: LD_VAR 0 1
22445: PUSH
22446: LD_EXP 91
22450: IN
22451: NOT
22452: IFFALSE 22456
// exit ;
22454: GO 22848
// index := GetElementIndex ( minersList , unit ) ;
22456: LD_ADDR_VAR 0 6
22460: PUSH
22461: LD_EXP 91
22465: PPUSH
22466: LD_VAR 0 1
22470: PPUSH
22471: CALL 28583 0 2
22475: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
22476: LD_ADDR_VAR 0 5
22480: PUSH
22481: DOUBLE
22482: LD_EXP 92
22486: PUSH
22487: LD_VAR 0 6
22491: ARRAY
22492: INC
22493: ST_TO_ADDR
22494: LD_INT 1
22496: PUSH
22497: FOR_DOWNTO
22498: IFFALSE 22659
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
22500: LD_EXP 92
22504: PUSH
22505: LD_VAR 0 6
22509: ARRAY
22510: PUSH
22511: LD_VAR 0 5
22515: ARRAY
22516: PUSH
22517: LD_INT 1
22519: ARRAY
22520: PUSH
22521: LD_VAR 0 2
22525: EQUAL
22526: PUSH
22527: LD_EXP 92
22531: PUSH
22532: LD_VAR 0 6
22536: ARRAY
22537: PUSH
22538: LD_VAR 0 5
22542: ARRAY
22543: PUSH
22544: LD_INT 2
22546: ARRAY
22547: PUSH
22548: LD_VAR 0 3
22552: EQUAL
22553: AND
22554: IFFALSE 22657
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
22556: LD_EXP 92
22560: PUSH
22561: LD_VAR 0 6
22565: ARRAY
22566: PUSH
22567: LD_VAR 0 5
22571: ARRAY
22572: PUSH
22573: LD_INT 1
22575: ARRAY
22576: PPUSH
22577: LD_EXP 92
22581: PUSH
22582: LD_VAR 0 6
22586: ARRAY
22587: PUSH
22588: LD_VAR 0 5
22592: ARRAY
22593: PUSH
22594: LD_INT 2
22596: ARRAY
22597: PPUSH
22598: LD_VAR 0 1
22602: PPUSH
22603: CALL_OW 255
22607: PPUSH
22608: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
22612: LD_ADDR_EXP 92
22616: PUSH
22617: LD_EXP 92
22621: PPUSH
22622: LD_VAR 0 6
22626: PPUSH
22627: LD_EXP 92
22631: PUSH
22632: LD_VAR 0 6
22636: ARRAY
22637: PPUSH
22638: LD_VAR 0 5
22642: PPUSH
22643: CALL_OW 3
22647: PPUSH
22648: CALL_OW 1
22652: ST_TO_ADDR
// exit ;
22653: POP
22654: POP
22655: GO 22848
// end ; end ;
22657: GO 22497
22659: POP
22660: POP
// for i := minerMinesList [ index ] downto 1 do
22661: LD_ADDR_VAR 0 5
22665: PUSH
22666: DOUBLE
22667: LD_EXP 92
22671: PUSH
22672: LD_VAR 0 6
22676: ARRAY
22677: INC
22678: ST_TO_ADDR
22679: LD_INT 1
22681: PUSH
22682: FOR_DOWNTO
22683: IFFALSE 22846
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
22685: LD_EXP 92
22689: PUSH
22690: LD_VAR 0 6
22694: ARRAY
22695: PUSH
22696: LD_VAR 0 5
22700: ARRAY
22701: PUSH
22702: LD_INT 1
22704: ARRAY
22705: PPUSH
22706: LD_EXP 92
22710: PUSH
22711: LD_VAR 0 6
22715: ARRAY
22716: PUSH
22717: LD_VAR 0 5
22721: ARRAY
22722: PUSH
22723: LD_INT 2
22725: ARRAY
22726: PPUSH
22727: LD_VAR 0 2
22731: PPUSH
22732: LD_VAR 0 3
22736: PPUSH
22737: CALL_OW 298
22741: PUSH
22742: LD_INT 6
22744: LESS
22745: IFFALSE 22844
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
22747: LD_EXP 92
22751: PUSH
22752: LD_VAR 0 6
22756: ARRAY
22757: PUSH
22758: LD_VAR 0 5
22762: ARRAY
22763: PUSH
22764: LD_INT 1
22766: ARRAY
22767: PPUSH
22768: LD_EXP 92
22772: PUSH
22773: LD_VAR 0 6
22777: ARRAY
22778: PUSH
22779: LD_VAR 0 5
22783: ARRAY
22784: PUSH
22785: LD_INT 2
22787: ARRAY
22788: PPUSH
22789: LD_VAR 0 1
22793: PPUSH
22794: CALL_OW 255
22798: PPUSH
22799: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
22803: LD_ADDR_EXP 92
22807: PUSH
22808: LD_EXP 92
22812: PPUSH
22813: LD_VAR 0 6
22817: PPUSH
22818: LD_EXP 92
22822: PUSH
22823: LD_VAR 0 6
22827: ARRAY
22828: PPUSH
22829: LD_VAR 0 5
22833: PPUSH
22834: CALL_OW 3
22838: PPUSH
22839: CALL_OW 1
22843: ST_TO_ADDR
// end ; end ;
22844: GO 22682
22846: POP
22847: POP
// end ;
22848: LD_VAR 0 4
22852: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
22853: LD_INT 0
22855: PPUSH
22856: PPUSH
22857: PPUSH
22858: PPUSH
22859: PPUSH
22860: PPUSH
22861: PPUSH
22862: PPUSH
22863: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
22864: LD_VAR 0 1
22868: PPUSH
22869: CALL_OW 264
22873: PUSH
22874: LD_EXP 101
22878: EQUAL
22879: NOT
22880: PUSH
22881: LD_VAR 0 1
22885: PUSH
22886: LD_EXP 91
22890: IN
22891: NOT
22892: OR
22893: IFFALSE 22897
// exit ;
22895: GO 23219
// index := GetElementIndex ( minersList , unit ) ;
22897: LD_ADDR_VAR 0 6
22901: PUSH
22902: LD_EXP 91
22906: PPUSH
22907: LD_VAR 0 1
22911: PPUSH
22912: CALL 28583 0 2
22916: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
22917: LD_ADDR_VAR 0 8
22921: PUSH
22922: LD_EXP 93
22926: PUSH
22927: LD_EXP 92
22931: PUSH
22932: LD_VAR 0 6
22936: ARRAY
22937: MINUS
22938: ST_TO_ADDR
// if not minesFreeAmount then
22939: LD_VAR 0 8
22943: NOT
22944: IFFALSE 22948
// exit ;
22946: GO 23219
// tmp := [ ] ;
22948: LD_ADDR_VAR 0 7
22952: PUSH
22953: EMPTY
22954: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
22955: LD_ADDR_VAR 0 5
22959: PUSH
22960: DOUBLE
22961: LD_INT 1
22963: DEC
22964: ST_TO_ADDR
22965: LD_VAR 0 8
22969: PUSH
22970: FOR_TO
22971: IFFALSE 23166
// begin _d := rand ( 0 , 5 ) ;
22973: LD_ADDR_VAR 0 11
22977: PUSH
22978: LD_INT 0
22980: PPUSH
22981: LD_INT 5
22983: PPUSH
22984: CALL_OW 12
22988: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
22989: LD_ADDR_VAR 0 12
22993: PUSH
22994: LD_INT 2
22996: PPUSH
22997: LD_INT 6
22999: PPUSH
23000: CALL_OW 12
23004: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
23005: LD_ADDR_VAR 0 9
23009: PUSH
23010: LD_VAR 0 2
23014: PPUSH
23015: LD_VAR 0 11
23019: PPUSH
23020: LD_VAR 0 12
23024: PPUSH
23025: CALL_OW 272
23029: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
23030: LD_ADDR_VAR 0 10
23034: PUSH
23035: LD_VAR 0 3
23039: PPUSH
23040: LD_VAR 0 11
23044: PPUSH
23045: LD_VAR 0 12
23049: PPUSH
23050: CALL_OW 273
23054: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
23055: LD_VAR 0 9
23059: PPUSH
23060: LD_VAR 0 10
23064: PPUSH
23065: CALL_OW 488
23069: PUSH
23070: LD_VAR 0 9
23074: PUSH
23075: LD_VAR 0 10
23079: PUSH
23080: EMPTY
23081: LIST
23082: LIST
23083: PUSH
23084: LD_VAR 0 7
23088: IN
23089: NOT
23090: AND
23091: PUSH
23092: LD_VAR 0 9
23096: PPUSH
23097: LD_VAR 0 10
23101: PPUSH
23102: CALL_OW 458
23106: NOT
23107: AND
23108: IFFALSE 23150
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
23110: LD_ADDR_VAR 0 7
23114: PUSH
23115: LD_VAR 0 7
23119: PPUSH
23120: LD_VAR 0 7
23124: PUSH
23125: LD_INT 1
23127: PLUS
23128: PPUSH
23129: LD_VAR 0 9
23133: PUSH
23134: LD_VAR 0 10
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: PPUSH
23143: CALL_OW 1
23147: ST_TO_ADDR
23148: GO 23164
// i := i - 1 ;
23150: LD_ADDR_VAR 0 5
23154: PUSH
23155: LD_VAR 0 5
23159: PUSH
23160: LD_INT 1
23162: MINUS
23163: ST_TO_ADDR
// end ;
23164: GO 22970
23166: POP
23167: POP
// for i in tmp do
23168: LD_ADDR_VAR 0 5
23172: PUSH
23173: LD_VAR 0 7
23177: PUSH
23178: FOR_IN
23179: IFFALSE 23217
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
23181: LD_VAR 0 1
23185: PPUSH
23186: LD_VAR 0 5
23190: PUSH
23191: LD_INT 1
23193: ARRAY
23194: PPUSH
23195: LD_VAR 0 5
23199: PUSH
23200: LD_INT 2
23202: ARRAY
23203: PPUSH
23204: CALL 22159 0 3
23208: NOT
23209: IFFALSE 23215
// exit ;
23211: POP
23212: POP
23213: GO 23219
23215: GO 23178
23217: POP
23218: POP
// end ;
23219: LD_VAR 0 4
23223: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
23224: LD_INT 0
23226: PPUSH
23227: PPUSH
23228: PPUSH
23229: PPUSH
23230: PPUSH
23231: PPUSH
23232: PPUSH
// if not GetClass ( unit ) = class_sniper then
23233: LD_VAR 0 1
23237: PPUSH
23238: CALL_OW 257
23242: PUSH
23243: LD_INT 5
23245: EQUAL
23246: NOT
23247: IFFALSE 23251
// exit ;
23249: GO 23639
// dist := 8 ;
23251: LD_ADDR_VAR 0 5
23255: PUSH
23256: LD_INT 8
23258: ST_TO_ADDR
// viewRange := 12 ;
23259: LD_ADDR_VAR 0 7
23263: PUSH
23264: LD_INT 12
23266: ST_TO_ADDR
// side := GetSide ( unit ) ;
23267: LD_ADDR_VAR 0 6
23271: PUSH
23272: LD_VAR 0 1
23276: PPUSH
23277: CALL_OW 255
23281: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
23282: LD_INT 61
23284: PPUSH
23285: LD_VAR 0 6
23289: PPUSH
23290: CALL_OW 321
23294: PUSH
23295: LD_INT 2
23297: EQUAL
23298: IFFALSE 23308
// viewRange := 16 ;
23300: LD_ADDR_VAR 0 7
23304: PUSH
23305: LD_INT 16
23307: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
23308: LD_VAR 0 1
23312: PPUSH
23313: LD_VAR 0 2
23317: PPUSH
23318: LD_VAR 0 3
23322: PPUSH
23323: CALL_OW 297
23327: PUSH
23328: LD_VAR 0 5
23332: GREATER
23333: IFFALSE 23412
// begin ComMoveXY ( unit , x , y ) ;
23335: LD_VAR 0 1
23339: PPUSH
23340: LD_VAR 0 2
23344: PPUSH
23345: LD_VAR 0 3
23349: PPUSH
23350: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23354: LD_INT 35
23356: PPUSH
23357: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
23361: LD_VAR 0 1
23365: PPUSH
23366: LD_VAR 0 2
23370: PPUSH
23371: LD_VAR 0 3
23375: PPUSH
23376: CALL 59355 0 3
23380: NOT
23381: IFFALSE 23385
// exit ;
23383: GO 23639
// until GetDistUnitXY ( unit , x , y ) < dist ;
23385: LD_VAR 0 1
23389: PPUSH
23390: LD_VAR 0 2
23394: PPUSH
23395: LD_VAR 0 3
23399: PPUSH
23400: CALL_OW 297
23404: PUSH
23405: LD_VAR 0 5
23409: LESS
23410: IFFALSE 23354
// end ; ComTurnXY ( unit , x , y ) ;
23412: LD_VAR 0 1
23416: PPUSH
23417: LD_VAR 0 2
23421: PPUSH
23422: LD_VAR 0 3
23426: PPUSH
23427: CALL_OW 118
// wait ( 5 ) ;
23431: LD_INT 5
23433: PPUSH
23434: CALL_OW 67
// _d := GetDir ( unit ) ;
23438: LD_ADDR_VAR 0 10
23442: PUSH
23443: LD_VAR 0 1
23447: PPUSH
23448: CALL_OW 254
23452: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
23453: LD_ADDR_VAR 0 8
23457: PUSH
23458: LD_VAR 0 1
23462: PPUSH
23463: CALL_OW 250
23467: PPUSH
23468: LD_VAR 0 10
23472: PPUSH
23473: LD_VAR 0 5
23477: PPUSH
23478: CALL_OW 272
23482: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
23483: LD_ADDR_VAR 0 9
23487: PUSH
23488: LD_VAR 0 1
23492: PPUSH
23493: CALL_OW 251
23497: PPUSH
23498: LD_VAR 0 10
23502: PPUSH
23503: LD_VAR 0 5
23507: PPUSH
23508: CALL_OW 273
23512: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23513: LD_VAR 0 8
23517: PPUSH
23518: LD_VAR 0 9
23522: PPUSH
23523: CALL_OW 488
23527: NOT
23528: IFFALSE 23532
// exit ;
23530: GO 23639
// ComAnimCustom ( unit , 1 ) ;
23532: LD_VAR 0 1
23536: PPUSH
23537: LD_INT 1
23539: PPUSH
23540: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
23544: LD_VAR 0 8
23548: PPUSH
23549: LD_VAR 0 9
23553: PPUSH
23554: LD_VAR 0 6
23558: PPUSH
23559: LD_VAR 0 7
23563: PPUSH
23564: CALL_OW 330
// repeat wait ( 1 ) ;
23568: LD_INT 1
23570: PPUSH
23571: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
23575: LD_VAR 0 1
23579: PPUSH
23580: CALL_OW 316
23584: PUSH
23585: LD_VAR 0 1
23589: PPUSH
23590: CALL_OW 314
23594: OR
23595: PUSH
23596: LD_VAR 0 1
23600: PPUSH
23601: CALL_OW 302
23605: NOT
23606: OR
23607: PUSH
23608: LD_VAR 0 1
23612: PPUSH
23613: CALL_OW 301
23617: OR
23618: IFFALSE 23568
// RemoveSeeing ( _x , _y , side ) ;
23620: LD_VAR 0 8
23624: PPUSH
23625: LD_VAR 0 9
23629: PPUSH
23630: LD_VAR 0 6
23634: PPUSH
23635: CALL_OW 331
// end ; end_of_file
23639: LD_VAR 0 4
23643: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
23644: LD_INT 0
23646: PPUSH
// ar_miner := 81 ;
23647: LD_ADDR_EXP 101
23651: PUSH
23652: LD_INT 81
23654: ST_TO_ADDR
// ar_crane := 88 ;
23655: LD_ADDR_EXP 100
23659: PUSH
23660: LD_INT 88
23662: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
23663: LD_ADDR_EXP 95
23667: PUSH
23668: LD_INT 89
23670: ST_TO_ADDR
// us_hack := 99 ;
23671: LD_ADDR_EXP 96
23675: PUSH
23676: LD_INT 99
23678: ST_TO_ADDR
// us_artillery := 97 ;
23679: LD_ADDR_EXP 97
23683: PUSH
23684: LD_INT 97
23686: ST_TO_ADDR
// ar_bio_bomb := 91 ;
23687: LD_ADDR_EXP 98
23691: PUSH
23692: LD_INT 91
23694: ST_TO_ADDR
// ar_mortar := 92 ;
23695: LD_ADDR_EXP 99
23699: PUSH
23700: LD_INT 92
23702: ST_TO_ADDR
// ru_radar := 98 ;
23703: LD_ADDR_EXP 94
23707: PUSH
23708: LD_INT 98
23710: ST_TO_ADDR
// tech_Artillery := 80 ;
23711: LD_ADDR_EXP 102
23715: PUSH
23716: LD_INT 80
23718: ST_TO_ADDR
// tech_RadMat := 81 ;
23719: LD_ADDR_EXP 103
23723: PUSH
23724: LD_INT 81
23726: ST_TO_ADDR
// tech_BasicTools := 82 ;
23727: LD_ADDR_EXP 104
23731: PUSH
23732: LD_INT 82
23734: ST_TO_ADDR
// tech_Cargo := 83 ;
23735: LD_ADDR_EXP 105
23739: PUSH
23740: LD_INT 83
23742: ST_TO_ADDR
// tech_Track := 84 ;
23743: LD_ADDR_EXP 106
23747: PUSH
23748: LD_INT 84
23750: ST_TO_ADDR
// tech_Crane := 85 ;
23751: LD_ADDR_EXP 107
23755: PUSH
23756: LD_INT 85
23758: ST_TO_ADDR
// tech_Bulldozer := 86 ;
23759: LD_ADDR_EXP 108
23763: PUSH
23764: LD_INT 86
23766: ST_TO_ADDR
// tech_Hovercraft := 87 ;
23767: LD_ADDR_EXP 109
23771: PUSH
23772: LD_INT 87
23774: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
23775: LD_ADDR_EXP 110
23779: PUSH
23780: LD_INT 88
23782: ST_TO_ADDR
// class_mastodont := 31 ;
23783: LD_ADDR_EXP 111
23787: PUSH
23788: LD_INT 31
23790: ST_TO_ADDR
// class_horse := 21 ;
23791: LD_ADDR_EXP 112
23795: PUSH
23796: LD_INT 21
23798: ST_TO_ADDR
// end ;
23799: LD_VAR 0 1
23803: RET
// every 1 do
23804: GO 23806
23806: DISABLE
// InitGlobalVariables ; end_of_file
23807: CALL 23644 0 0
23811: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
23812: LD_INT 0
23814: PPUSH
23815: PPUSH
// if exist_mode then
23816: LD_VAR 0 2
23820: IFFALSE 23845
// unit := CreateCharacter ( prefix & ident ) else
23822: LD_ADDR_VAR 0 5
23826: PUSH
23827: LD_VAR 0 3
23831: PUSH
23832: LD_VAR 0 1
23836: STR
23837: PPUSH
23838: CALL_OW 34
23842: ST_TO_ADDR
23843: GO 23860
// unit := NewCharacter ( ident ) ;
23845: LD_ADDR_VAR 0 5
23849: PUSH
23850: LD_VAR 0 1
23854: PPUSH
23855: CALL_OW 25
23859: ST_TO_ADDR
// result := unit ;
23860: LD_ADDR_VAR 0 4
23864: PUSH
23865: LD_VAR 0 5
23869: ST_TO_ADDR
// end ;
23870: LD_VAR 0 4
23874: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
23875: LD_INT 0
23877: PPUSH
23878: PPUSH
// if not side or not nation then
23879: LD_VAR 0 1
23883: NOT
23884: PUSH
23885: LD_VAR 0 2
23889: NOT
23890: OR
23891: IFFALSE 23895
// exit ;
23893: GO 24663
// case nation of nation_american :
23895: LD_VAR 0 2
23899: PUSH
23900: LD_INT 1
23902: DOUBLE
23903: EQUAL
23904: IFTRUE 23908
23906: GO 24122
23908: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
23909: LD_ADDR_VAR 0 4
23913: PUSH
23914: LD_INT 35
23916: PUSH
23917: LD_INT 45
23919: PUSH
23920: LD_INT 46
23922: PUSH
23923: LD_INT 47
23925: PUSH
23926: LD_INT 82
23928: PUSH
23929: LD_INT 83
23931: PUSH
23932: LD_INT 84
23934: PUSH
23935: LD_INT 85
23937: PUSH
23938: LD_INT 86
23940: PUSH
23941: LD_INT 1
23943: PUSH
23944: LD_INT 2
23946: PUSH
23947: LD_INT 6
23949: PUSH
23950: LD_INT 15
23952: PUSH
23953: LD_INT 16
23955: PUSH
23956: LD_INT 7
23958: PUSH
23959: LD_INT 12
23961: PUSH
23962: LD_INT 13
23964: PUSH
23965: LD_INT 10
23967: PUSH
23968: LD_INT 14
23970: PUSH
23971: LD_INT 20
23973: PUSH
23974: LD_INT 21
23976: PUSH
23977: LD_INT 22
23979: PUSH
23980: LD_INT 25
23982: PUSH
23983: LD_INT 32
23985: PUSH
23986: LD_INT 27
23988: PUSH
23989: LD_INT 36
23991: PUSH
23992: LD_INT 69
23994: PUSH
23995: LD_INT 39
23997: PUSH
23998: LD_INT 34
24000: PUSH
24001: LD_INT 40
24003: PUSH
24004: LD_INT 48
24006: PUSH
24007: LD_INT 49
24009: PUSH
24010: LD_INT 50
24012: PUSH
24013: LD_INT 51
24015: PUSH
24016: LD_INT 52
24018: PUSH
24019: LD_INT 53
24021: PUSH
24022: LD_INT 54
24024: PUSH
24025: LD_INT 55
24027: PUSH
24028: LD_INT 56
24030: PUSH
24031: LD_INT 57
24033: PUSH
24034: LD_INT 58
24036: PUSH
24037: LD_INT 59
24039: PUSH
24040: LD_INT 60
24042: PUSH
24043: LD_INT 61
24045: PUSH
24046: LD_INT 62
24048: PUSH
24049: LD_INT 80
24051: PUSH
24052: LD_INT 82
24054: PUSH
24055: LD_INT 83
24057: PUSH
24058: LD_INT 84
24060: PUSH
24061: LD_INT 85
24063: PUSH
24064: LD_INT 86
24066: PUSH
24067: EMPTY
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: ST_TO_ADDR
24120: GO 24587
24122: LD_INT 2
24124: DOUBLE
24125: EQUAL
24126: IFTRUE 24130
24128: GO 24356
24130: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
24131: LD_ADDR_VAR 0 4
24135: PUSH
24136: LD_INT 35
24138: PUSH
24139: LD_INT 45
24141: PUSH
24142: LD_INT 46
24144: PUSH
24145: LD_INT 47
24147: PUSH
24148: LD_INT 82
24150: PUSH
24151: LD_INT 83
24153: PUSH
24154: LD_INT 84
24156: PUSH
24157: LD_INT 85
24159: PUSH
24160: LD_INT 87
24162: PUSH
24163: LD_INT 70
24165: PUSH
24166: LD_INT 1
24168: PUSH
24169: LD_INT 11
24171: PUSH
24172: LD_INT 3
24174: PUSH
24175: LD_INT 4
24177: PUSH
24178: LD_INT 5
24180: PUSH
24181: LD_INT 6
24183: PUSH
24184: LD_INT 15
24186: PUSH
24187: LD_INT 18
24189: PUSH
24190: LD_INT 7
24192: PUSH
24193: LD_INT 17
24195: PUSH
24196: LD_INT 8
24198: PUSH
24199: LD_INT 20
24201: PUSH
24202: LD_INT 21
24204: PUSH
24205: LD_INT 22
24207: PUSH
24208: LD_INT 72
24210: PUSH
24211: LD_INT 26
24213: PUSH
24214: LD_INT 69
24216: PUSH
24217: LD_INT 39
24219: PUSH
24220: LD_INT 40
24222: PUSH
24223: LD_INT 41
24225: PUSH
24226: LD_INT 42
24228: PUSH
24229: LD_INT 43
24231: PUSH
24232: LD_INT 48
24234: PUSH
24235: LD_INT 49
24237: PUSH
24238: LD_INT 50
24240: PUSH
24241: LD_INT 51
24243: PUSH
24244: LD_INT 52
24246: PUSH
24247: LD_INT 53
24249: PUSH
24250: LD_INT 54
24252: PUSH
24253: LD_INT 55
24255: PUSH
24256: LD_INT 56
24258: PUSH
24259: LD_INT 60
24261: PUSH
24262: LD_INT 61
24264: PUSH
24265: LD_INT 62
24267: PUSH
24268: LD_INT 66
24270: PUSH
24271: LD_INT 67
24273: PUSH
24274: LD_INT 68
24276: PUSH
24277: LD_INT 81
24279: PUSH
24280: LD_INT 82
24282: PUSH
24283: LD_INT 83
24285: PUSH
24286: LD_INT 84
24288: PUSH
24289: LD_INT 85
24291: PUSH
24292: LD_INT 87
24294: PUSH
24295: LD_INT 88
24297: PUSH
24298: EMPTY
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: ST_TO_ADDR
24354: GO 24587
24356: LD_INT 3
24358: DOUBLE
24359: EQUAL
24360: IFTRUE 24364
24362: GO 24586
24364: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
24365: LD_ADDR_VAR 0 4
24369: PUSH
24370: LD_INT 46
24372: PUSH
24373: LD_INT 47
24375: PUSH
24376: LD_INT 1
24378: PUSH
24379: LD_INT 2
24381: PUSH
24382: LD_INT 82
24384: PUSH
24385: LD_INT 83
24387: PUSH
24388: LD_INT 84
24390: PUSH
24391: LD_INT 85
24393: PUSH
24394: LD_INT 86
24396: PUSH
24397: LD_INT 11
24399: PUSH
24400: LD_INT 9
24402: PUSH
24403: LD_INT 20
24405: PUSH
24406: LD_INT 19
24408: PUSH
24409: LD_INT 21
24411: PUSH
24412: LD_INT 24
24414: PUSH
24415: LD_INT 22
24417: PUSH
24418: LD_INT 25
24420: PUSH
24421: LD_INT 28
24423: PUSH
24424: LD_INT 29
24426: PUSH
24427: LD_INT 30
24429: PUSH
24430: LD_INT 31
24432: PUSH
24433: LD_INT 37
24435: PUSH
24436: LD_INT 38
24438: PUSH
24439: LD_INT 32
24441: PUSH
24442: LD_INT 27
24444: PUSH
24445: LD_INT 33
24447: PUSH
24448: LD_INT 69
24450: PUSH
24451: LD_INT 39
24453: PUSH
24454: LD_INT 34
24456: PUSH
24457: LD_INT 40
24459: PUSH
24460: LD_INT 71
24462: PUSH
24463: LD_INT 23
24465: PUSH
24466: LD_INT 44
24468: PUSH
24469: LD_INT 48
24471: PUSH
24472: LD_INT 49
24474: PUSH
24475: LD_INT 50
24477: PUSH
24478: LD_INT 51
24480: PUSH
24481: LD_INT 52
24483: PUSH
24484: LD_INT 53
24486: PUSH
24487: LD_INT 54
24489: PUSH
24490: LD_INT 55
24492: PUSH
24493: LD_INT 56
24495: PUSH
24496: LD_INT 57
24498: PUSH
24499: LD_INT 58
24501: PUSH
24502: LD_INT 59
24504: PUSH
24505: LD_INT 63
24507: PUSH
24508: LD_INT 64
24510: PUSH
24511: LD_INT 65
24513: PUSH
24514: LD_INT 82
24516: PUSH
24517: LD_INT 83
24519: PUSH
24520: LD_INT 84
24522: PUSH
24523: LD_INT 85
24525: PUSH
24526: LD_INT 86
24528: PUSH
24529: EMPTY
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: LIST
24535: LIST
24536: LIST
24537: LIST
24538: LIST
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: ST_TO_ADDR
24584: GO 24587
24586: POP
// if state > - 1 and state < 3 then
24587: LD_VAR 0 3
24591: PUSH
24592: LD_INT 1
24594: NEG
24595: GREATER
24596: PUSH
24597: LD_VAR 0 3
24601: PUSH
24602: LD_INT 3
24604: LESS
24605: AND
24606: IFFALSE 24663
// for i in result do
24608: LD_ADDR_VAR 0 5
24612: PUSH
24613: LD_VAR 0 4
24617: PUSH
24618: FOR_IN
24619: IFFALSE 24661
// if GetTech ( i , side ) <> state then
24621: LD_VAR 0 5
24625: PPUSH
24626: LD_VAR 0 1
24630: PPUSH
24631: CALL_OW 321
24635: PUSH
24636: LD_VAR 0 3
24640: NONEQUAL
24641: IFFALSE 24659
// result := result diff i ;
24643: LD_ADDR_VAR 0 4
24647: PUSH
24648: LD_VAR 0 4
24652: PUSH
24653: LD_VAR 0 5
24657: DIFF
24658: ST_TO_ADDR
24659: GO 24618
24661: POP
24662: POP
// end ;
24663: LD_VAR 0 4
24667: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
24668: LD_INT 0
24670: PPUSH
24671: PPUSH
24672: PPUSH
// result := true ;
24673: LD_ADDR_VAR 0 3
24677: PUSH
24678: LD_INT 1
24680: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
24681: LD_ADDR_VAR 0 5
24685: PUSH
24686: LD_VAR 0 2
24690: PPUSH
24691: CALL_OW 480
24695: ST_TO_ADDR
// if not tmp then
24696: LD_VAR 0 5
24700: NOT
24701: IFFALSE 24705
// exit ;
24703: GO 24754
// for i in tmp do
24705: LD_ADDR_VAR 0 4
24709: PUSH
24710: LD_VAR 0 5
24714: PUSH
24715: FOR_IN
24716: IFFALSE 24752
// if GetTech ( i , side ) <> state_researched then
24718: LD_VAR 0 4
24722: PPUSH
24723: LD_VAR 0 1
24727: PPUSH
24728: CALL_OW 321
24732: PUSH
24733: LD_INT 2
24735: NONEQUAL
24736: IFFALSE 24750
// begin result := false ;
24738: LD_ADDR_VAR 0 3
24742: PUSH
24743: LD_INT 0
24745: ST_TO_ADDR
// exit ;
24746: POP
24747: POP
24748: GO 24754
// end ;
24750: GO 24715
24752: POP
24753: POP
// end ;
24754: LD_VAR 0 3
24758: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
24759: LD_INT 0
24761: PPUSH
24762: PPUSH
24763: PPUSH
24764: PPUSH
24765: PPUSH
24766: PPUSH
24767: PPUSH
24768: PPUSH
24769: PPUSH
24770: PPUSH
24771: PPUSH
24772: PPUSH
24773: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
24774: LD_VAR 0 1
24778: NOT
24779: PUSH
24780: LD_VAR 0 1
24784: PPUSH
24785: CALL_OW 257
24789: PUSH
24790: LD_INT 9
24792: NONEQUAL
24793: OR
24794: IFFALSE 24798
// exit ;
24796: GO 25371
// side := GetSide ( unit ) ;
24798: LD_ADDR_VAR 0 9
24802: PUSH
24803: LD_VAR 0 1
24807: PPUSH
24808: CALL_OW 255
24812: ST_TO_ADDR
// tech_space := tech_spacanom ;
24813: LD_ADDR_VAR 0 12
24817: PUSH
24818: LD_INT 29
24820: ST_TO_ADDR
// tech_time := tech_taurad ;
24821: LD_ADDR_VAR 0 13
24825: PUSH
24826: LD_INT 28
24828: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
24829: LD_ADDR_VAR 0 11
24833: PUSH
24834: LD_VAR 0 1
24838: PPUSH
24839: CALL_OW 310
24843: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
24844: LD_VAR 0 11
24848: PPUSH
24849: CALL_OW 247
24853: PUSH
24854: LD_INT 2
24856: EQUAL
24857: IFFALSE 24861
// exit ;
24859: GO 25371
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24861: LD_ADDR_VAR 0 8
24865: PUSH
24866: LD_INT 81
24868: PUSH
24869: LD_VAR 0 9
24873: PUSH
24874: EMPTY
24875: LIST
24876: LIST
24877: PUSH
24878: LD_INT 3
24880: PUSH
24881: LD_INT 21
24883: PUSH
24884: LD_INT 3
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: PUSH
24891: EMPTY
24892: LIST
24893: LIST
24894: PUSH
24895: EMPTY
24896: LIST
24897: LIST
24898: PPUSH
24899: CALL_OW 69
24903: ST_TO_ADDR
// if not tmp then
24904: LD_VAR 0 8
24908: NOT
24909: IFFALSE 24913
// exit ;
24911: GO 25371
// if in_unit then
24913: LD_VAR 0 11
24917: IFFALSE 24941
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
24919: LD_ADDR_VAR 0 10
24923: PUSH
24924: LD_VAR 0 8
24928: PPUSH
24929: LD_VAR 0 11
24933: PPUSH
24934: CALL_OW 74
24938: ST_TO_ADDR
24939: GO 24961
// enemy := NearestUnitToUnit ( tmp , unit ) ;
24941: LD_ADDR_VAR 0 10
24945: PUSH
24946: LD_VAR 0 8
24950: PPUSH
24951: LD_VAR 0 1
24955: PPUSH
24956: CALL_OW 74
24960: ST_TO_ADDR
// if not enemy then
24961: LD_VAR 0 10
24965: NOT
24966: IFFALSE 24970
// exit ;
24968: GO 25371
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
24970: LD_VAR 0 11
24974: PUSH
24975: LD_VAR 0 11
24979: PPUSH
24980: LD_VAR 0 10
24984: PPUSH
24985: CALL_OW 296
24989: PUSH
24990: LD_INT 13
24992: GREATER
24993: AND
24994: PUSH
24995: LD_VAR 0 1
24999: PPUSH
25000: LD_VAR 0 10
25004: PPUSH
25005: CALL_OW 296
25009: PUSH
25010: LD_INT 12
25012: GREATER
25013: OR
25014: IFFALSE 25018
// exit ;
25016: GO 25371
// missile := [ 1 ] ;
25018: LD_ADDR_VAR 0 14
25022: PUSH
25023: LD_INT 1
25025: PUSH
25026: EMPTY
25027: LIST
25028: ST_TO_ADDR
// if Researched ( side , tech_space ) then
25029: LD_VAR 0 9
25033: PPUSH
25034: LD_VAR 0 12
25038: PPUSH
25039: CALL_OW 325
25043: IFFALSE 25072
// missile := Insert ( missile , missile + 1 , 2 ) ;
25045: LD_ADDR_VAR 0 14
25049: PUSH
25050: LD_VAR 0 14
25054: PPUSH
25055: LD_VAR 0 14
25059: PUSH
25060: LD_INT 1
25062: PLUS
25063: PPUSH
25064: LD_INT 2
25066: PPUSH
25067: CALL_OW 2
25071: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
25072: LD_VAR 0 9
25076: PPUSH
25077: LD_VAR 0 13
25081: PPUSH
25082: CALL_OW 325
25086: PUSH
25087: LD_VAR 0 10
25091: PPUSH
25092: CALL_OW 255
25096: PPUSH
25097: LD_VAR 0 13
25101: PPUSH
25102: CALL_OW 325
25106: NOT
25107: AND
25108: IFFALSE 25137
// missile := Insert ( missile , missile + 1 , 3 ) ;
25110: LD_ADDR_VAR 0 14
25114: PUSH
25115: LD_VAR 0 14
25119: PPUSH
25120: LD_VAR 0 14
25124: PUSH
25125: LD_INT 1
25127: PLUS
25128: PPUSH
25129: LD_INT 3
25131: PPUSH
25132: CALL_OW 2
25136: ST_TO_ADDR
// if missile < 2 then
25137: LD_VAR 0 14
25141: PUSH
25142: LD_INT 2
25144: LESS
25145: IFFALSE 25149
// exit ;
25147: GO 25371
// x := GetX ( enemy ) ;
25149: LD_ADDR_VAR 0 4
25153: PUSH
25154: LD_VAR 0 10
25158: PPUSH
25159: CALL_OW 250
25163: ST_TO_ADDR
// y := GetY ( enemy ) ;
25164: LD_ADDR_VAR 0 5
25168: PUSH
25169: LD_VAR 0 10
25173: PPUSH
25174: CALL_OW 251
25178: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
25179: LD_ADDR_VAR 0 6
25183: PUSH
25184: LD_VAR 0 4
25188: PUSH
25189: LD_INT 1
25191: NEG
25192: PPUSH
25193: LD_INT 1
25195: PPUSH
25196: CALL_OW 12
25200: PLUS
25201: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
25202: LD_ADDR_VAR 0 7
25206: PUSH
25207: LD_VAR 0 5
25211: PUSH
25212: LD_INT 1
25214: NEG
25215: PPUSH
25216: LD_INT 1
25218: PPUSH
25219: CALL_OW 12
25223: PLUS
25224: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25225: LD_VAR 0 6
25229: PPUSH
25230: LD_VAR 0 7
25234: PPUSH
25235: CALL_OW 488
25239: NOT
25240: IFFALSE 25262
// begin _x := x ;
25242: LD_ADDR_VAR 0 6
25246: PUSH
25247: LD_VAR 0 4
25251: ST_TO_ADDR
// _y := y ;
25252: LD_ADDR_VAR 0 7
25256: PUSH
25257: LD_VAR 0 5
25261: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
25262: LD_ADDR_VAR 0 3
25266: PUSH
25267: LD_INT 1
25269: PPUSH
25270: LD_VAR 0 14
25274: PPUSH
25275: CALL_OW 12
25279: ST_TO_ADDR
// case i of 1 :
25280: LD_VAR 0 3
25284: PUSH
25285: LD_INT 1
25287: DOUBLE
25288: EQUAL
25289: IFTRUE 25293
25291: GO 25310
25293: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
25294: LD_VAR 0 1
25298: PPUSH
25299: LD_VAR 0 10
25303: PPUSH
25304: CALL_OW 115
25308: GO 25371
25310: LD_INT 2
25312: DOUBLE
25313: EQUAL
25314: IFTRUE 25318
25316: GO 25340
25318: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
25319: LD_VAR 0 1
25323: PPUSH
25324: LD_VAR 0 6
25328: PPUSH
25329: LD_VAR 0 7
25333: PPUSH
25334: CALL_OW 153
25338: GO 25371
25340: LD_INT 3
25342: DOUBLE
25343: EQUAL
25344: IFTRUE 25348
25346: GO 25370
25348: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
25349: LD_VAR 0 1
25353: PPUSH
25354: LD_VAR 0 6
25358: PPUSH
25359: LD_VAR 0 7
25363: PPUSH
25364: CALL_OW 154
25368: GO 25371
25370: POP
// end ;
25371: LD_VAR 0 2
25375: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
25376: LD_INT 0
25378: PPUSH
25379: PPUSH
25380: PPUSH
25381: PPUSH
25382: PPUSH
25383: PPUSH
// if not unit or not building then
25384: LD_VAR 0 1
25388: NOT
25389: PUSH
25390: LD_VAR 0 2
25394: NOT
25395: OR
25396: IFFALSE 25400
// exit ;
25398: GO 25558
// x := GetX ( building ) ;
25400: LD_ADDR_VAR 0 5
25404: PUSH
25405: LD_VAR 0 2
25409: PPUSH
25410: CALL_OW 250
25414: ST_TO_ADDR
// y := GetY ( building ) ;
25415: LD_ADDR_VAR 0 6
25419: PUSH
25420: LD_VAR 0 2
25424: PPUSH
25425: CALL_OW 251
25429: ST_TO_ADDR
// for i = 0 to 5 do
25430: LD_ADDR_VAR 0 4
25434: PUSH
25435: DOUBLE
25436: LD_INT 0
25438: DEC
25439: ST_TO_ADDR
25440: LD_INT 5
25442: PUSH
25443: FOR_TO
25444: IFFALSE 25556
// begin _x := ShiftX ( x , i , 3 ) ;
25446: LD_ADDR_VAR 0 7
25450: PUSH
25451: LD_VAR 0 5
25455: PPUSH
25456: LD_VAR 0 4
25460: PPUSH
25461: LD_INT 3
25463: PPUSH
25464: CALL_OW 272
25468: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
25469: LD_ADDR_VAR 0 8
25473: PUSH
25474: LD_VAR 0 6
25478: PPUSH
25479: LD_VAR 0 4
25483: PPUSH
25484: LD_INT 3
25486: PPUSH
25487: CALL_OW 273
25491: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25492: LD_VAR 0 7
25496: PPUSH
25497: LD_VAR 0 8
25501: PPUSH
25502: CALL_OW 488
25506: NOT
25507: IFFALSE 25511
// continue ;
25509: GO 25443
// if HexInfo ( _x , _y ) = 0 then
25511: LD_VAR 0 7
25515: PPUSH
25516: LD_VAR 0 8
25520: PPUSH
25521: CALL_OW 428
25525: PUSH
25526: LD_INT 0
25528: EQUAL
25529: IFFALSE 25554
// begin ComMoveXY ( unit , _x , _y ) ;
25531: LD_VAR 0 1
25535: PPUSH
25536: LD_VAR 0 7
25540: PPUSH
25541: LD_VAR 0 8
25545: PPUSH
25546: CALL_OW 111
// exit ;
25550: POP
25551: POP
25552: GO 25558
// end ; end ;
25554: GO 25443
25556: POP
25557: POP
// end ;
25558: LD_VAR 0 3
25562: RET
// export function ScanBase ( side , base_area ) ; begin
25563: LD_INT 0
25565: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
25566: LD_ADDR_VAR 0 3
25570: PUSH
25571: LD_VAR 0 2
25575: PPUSH
25576: LD_INT 81
25578: PUSH
25579: LD_VAR 0 1
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: PPUSH
25588: CALL_OW 70
25592: ST_TO_ADDR
// end ;
25593: LD_VAR 0 3
25597: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
25598: LD_INT 0
25600: PPUSH
25601: PPUSH
25602: PPUSH
25603: PPUSH
// result := false ;
25604: LD_ADDR_VAR 0 2
25608: PUSH
25609: LD_INT 0
25611: ST_TO_ADDR
// side := GetSide ( unit ) ;
25612: LD_ADDR_VAR 0 3
25616: PUSH
25617: LD_VAR 0 1
25621: PPUSH
25622: CALL_OW 255
25626: ST_TO_ADDR
// nat := GetNation ( unit ) ;
25627: LD_ADDR_VAR 0 4
25631: PUSH
25632: LD_VAR 0 1
25636: PPUSH
25637: CALL_OW 248
25641: ST_TO_ADDR
// case nat of 1 :
25642: LD_VAR 0 4
25646: PUSH
25647: LD_INT 1
25649: DOUBLE
25650: EQUAL
25651: IFTRUE 25655
25653: GO 25666
25655: POP
// tech := tech_lassight ; 2 :
25656: LD_ADDR_VAR 0 5
25660: PUSH
25661: LD_INT 12
25663: ST_TO_ADDR
25664: GO 25705
25666: LD_INT 2
25668: DOUBLE
25669: EQUAL
25670: IFTRUE 25674
25672: GO 25685
25674: POP
// tech := tech_mortar ; 3 :
25675: LD_ADDR_VAR 0 5
25679: PUSH
25680: LD_INT 41
25682: ST_TO_ADDR
25683: GO 25705
25685: LD_INT 3
25687: DOUBLE
25688: EQUAL
25689: IFTRUE 25693
25691: GO 25704
25693: POP
// tech := tech_bazooka ; end ;
25694: LD_ADDR_VAR 0 5
25698: PUSH
25699: LD_INT 44
25701: ST_TO_ADDR
25702: GO 25705
25704: POP
// if Researched ( side , tech ) then
25705: LD_VAR 0 3
25709: PPUSH
25710: LD_VAR 0 5
25714: PPUSH
25715: CALL_OW 325
25719: IFFALSE 25746
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
25721: LD_ADDR_VAR 0 2
25725: PUSH
25726: LD_INT 5
25728: PUSH
25729: LD_INT 8
25731: PUSH
25732: LD_INT 9
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: LIST
25739: PUSH
25740: LD_VAR 0 4
25744: ARRAY
25745: ST_TO_ADDR
// end ;
25746: LD_VAR 0 2
25750: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
25751: LD_INT 0
25753: PPUSH
25754: PPUSH
25755: PPUSH
// if not mines then
25756: LD_VAR 0 2
25760: NOT
25761: IFFALSE 25765
// exit ;
25763: GO 25909
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25765: LD_ADDR_VAR 0 5
25769: PUSH
25770: LD_INT 81
25772: PUSH
25773: LD_VAR 0 1
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: PUSH
25782: LD_INT 3
25784: PUSH
25785: LD_INT 21
25787: PUSH
25788: LD_INT 3
25790: PUSH
25791: EMPTY
25792: LIST
25793: LIST
25794: PUSH
25795: EMPTY
25796: LIST
25797: LIST
25798: PUSH
25799: EMPTY
25800: LIST
25801: LIST
25802: PPUSH
25803: CALL_OW 69
25807: ST_TO_ADDR
// for i in mines do
25808: LD_ADDR_VAR 0 4
25812: PUSH
25813: LD_VAR 0 2
25817: PUSH
25818: FOR_IN
25819: IFFALSE 25907
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
25821: LD_VAR 0 4
25825: PUSH
25826: LD_INT 1
25828: ARRAY
25829: PPUSH
25830: LD_VAR 0 4
25834: PUSH
25835: LD_INT 2
25837: ARRAY
25838: PPUSH
25839: CALL_OW 458
25843: NOT
25844: IFFALSE 25848
// continue ;
25846: GO 25818
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
25848: LD_VAR 0 4
25852: PUSH
25853: LD_INT 1
25855: ARRAY
25856: PPUSH
25857: LD_VAR 0 4
25861: PUSH
25862: LD_INT 2
25864: ARRAY
25865: PPUSH
25866: CALL_OW 428
25870: PUSH
25871: LD_VAR 0 5
25875: IN
25876: IFFALSE 25905
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
25878: LD_VAR 0 4
25882: PUSH
25883: LD_INT 1
25885: ARRAY
25886: PPUSH
25887: LD_VAR 0 4
25891: PUSH
25892: LD_INT 2
25894: ARRAY
25895: PPUSH
25896: LD_VAR 0 1
25900: PPUSH
25901: CALL_OW 456
// end ;
25905: GO 25818
25907: POP
25908: POP
// end ;
25909: LD_VAR 0 3
25913: RET
// export function Count ( array ) ; var i ; begin
25914: LD_INT 0
25916: PPUSH
25917: PPUSH
// result := 0 ;
25918: LD_ADDR_VAR 0 2
25922: PUSH
25923: LD_INT 0
25925: ST_TO_ADDR
// for i in array do
25926: LD_ADDR_VAR 0 3
25930: PUSH
25931: LD_VAR 0 1
25935: PUSH
25936: FOR_IN
25937: IFFALSE 25961
// if i then
25939: LD_VAR 0 3
25943: IFFALSE 25959
// result := result + 1 ;
25945: LD_ADDR_VAR 0 2
25949: PUSH
25950: LD_VAR 0 2
25954: PUSH
25955: LD_INT 1
25957: PLUS
25958: ST_TO_ADDR
25959: GO 25936
25961: POP
25962: POP
// end ;
25963: LD_VAR 0 2
25967: RET
// export function IsEmpty ( building ) ; begin
25968: LD_INT 0
25970: PPUSH
// if not building then
25971: LD_VAR 0 1
25975: NOT
25976: IFFALSE 25980
// exit ;
25978: GO 26023
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
25980: LD_ADDR_VAR 0 2
25984: PUSH
25985: LD_VAR 0 1
25989: PUSH
25990: LD_INT 22
25992: PUSH
25993: LD_VAR 0 1
25997: PPUSH
25998: CALL_OW 255
26002: PUSH
26003: EMPTY
26004: LIST
26005: LIST
26006: PUSH
26007: LD_INT 58
26009: PUSH
26010: EMPTY
26011: LIST
26012: PUSH
26013: EMPTY
26014: LIST
26015: LIST
26016: PPUSH
26017: CALL_OW 69
26021: IN
26022: ST_TO_ADDR
// end ;
26023: LD_VAR 0 2
26027: RET
// export function IsNotFull ( building ) ; begin
26028: LD_INT 0
26030: PPUSH
// if not building then
26031: LD_VAR 0 1
26035: NOT
26036: IFFALSE 26040
// exit ;
26038: GO 26059
// result := UnitsInside ( building ) < 6 ;
26040: LD_ADDR_VAR 0 2
26044: PUSH
26045: LD_VAR 0 1
26049: PPUSH
26050: CALL_OW 313
26054: PUSH
26055: LD_INT 6
26057: LESS
26058: ST_TO_ADDR
// end ;
26059: LD_VAR 0 2
26063: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
26064: LD_INT 0
26066: PPUSH
26067: PPUSH
26068: PPUSH
26069: PPUSH
// tmp := [ ] ;
26070: LD_ADDR_VAR 0 3
26074: PUSH
26075: EMPTY
26076: ST_TO_ADDR
// list := [ ] ;
26077: LD_ADDR_VAR 0 5
26081: PUSH
26082: EMPTY
26083: ST_TO_ADDR
// for i = 16 to 25 do
26084: LD_ADDR_VAR 0 4
26088: PUSH
26089: DOUBLE
26090: LD_INT 16
26092: DEC
26093: ST_TO_ADDR
26094: LD_INT 25
26096: PUSH
26097: FOR_TO
26098: IFFALSE 26171
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
26100: LD_ADDR_VAR 0 3
26104: PUSH
26105: LD_VAR 0 3
26109: PUSH
26110: LD_INT 22
26112: PUSH
26113: LD_VAR 0 1
26117: PPUSH
26118: CALL_OW 255
26122: PUSH
26123: EMPTY
26124: LIST
26125: LIST
26126: PUSH
26127: LD_INT 91
26129: PUSH
26130: LD_VAR 0 1
26134: PUSH
26135: LD_INT 6
26137: PUSH
26138: EMPTY
26139: LIST
26140: LIST
26141: LIST
26142: PUSH
26143: LD_INT 30
26145: PUSH
26146: LD_VAR 0 4
26150: PUSH
26151: EMPTY
26152: LIST
26153: LIST
26154: PUSH
26155: EMPTY
26156: LIST
26157: LIST
26158: LIST
26159: PUSH
26160: EMPTY
26161: LIST
26162: PPUSH
26163: CALL_OW 69
26167: ADD
26168: ST_TO_ADDR
26169: GO 26097
26171: POP
26172: POP
// for i = 1 to tmp do
26173: LD_ADDR_VAR 0 4
26177: PUSH
26178: DOUBLE
26179: LD_INT 1
26181: DEC
26182: ST_TO_ADDR
26183: LD_VAR 0 3
26187: PUSH
26188: FOR_TO
26189: IFFALSE 26277
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
26191: LD_ADDR_VAR 0 5
26195: PUSH
26196: LD_VAR 0 5
26200: PUSH
26201: LD_VAR 0 3
26205: PUSH
26206: LD_VAR 0 4
26210: ARRAY
26211: PPUSH
26212: CALL_OW 266
26216: PUSH
26217: LD_VAR 0 3
26221: PUSH
26222: LD_VAR 0 4
26226: ARRAY
26227: PPUSH
26228: CALL_OW 250
26232: PUSH
26233: LD_VAR 0 3
26237: PUSH
26238: LD_VAR 0 4
26242: ARRAY
26243: PPUSH
26244: CALL_OW 251
26248: PUSH
26249: LD_VAR 0 3
26253: PUSH
26254: LD_VAR 0 4
26258: ARRAY
26259: PPUSH
26260: CALL_OW 254
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: LIST
26269: LIST
26270: PUSH
26271: EMPTY
26272: LIST
26273: ADD
26274: ST_TO_ADDR
26275: GO 26188
26277: POP
26278: POP
// result := list ;
26279: LD_ADDR_VAR 0 2
26283: PUSH
26284: LD_VAR 0 5
26288: ST_TO_ADDR
// end ;
26289: LD_VAR 0 2
26293: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
26294: LD_INT 0
26296: PPUSH
26297: PPUSH
26298: PPUSH
26299: PPUSH
26300: PPUSH
26301: PPUSH
26302: PPUSH
// if not factory then
26303: LD_VAR 0 1
26307: NOT
26308: IFFALSE 26312
// exit ;
26310: GO 26905
// if control = control_apeman then
26312: LD_VAR 0 4
26316: PUSH
26317: LD_INT 5
26319: EQUAL
26320: IFFALSE 26429
// begin tmp := UnitsInside ( factory ) ;
26322: LD_ADDR_VAR 0 8
26326: PUSH
26327: LD_VAR 0 1
26331: PPUSH
26332: CALL_OW 313
26336: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
26337: LD_VAR 0 8
26341: PPUSH
26342: LD_INT 25
26344: PUSH
26345: LD_INT 12
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: PPUSH
26352: CALL_OW 72
26356: NOT
26357: IFFALSE 26367
// control := control_manual ;
26359: LD_ADDR_VAR 0 4
26363: PUSH
26364: LD_INT 1
26366: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
26367: LD_ADDR_VAR 0 8
26371: PUSH
26372: LD_VAR 0 1
26376: PPUSH
26377: CALL 26064 0 1
26381: ST_TO_ADDR
// if tmp then
26382: LD_VAR 0 8
26386: IFFALSE 26429
// begin for i in tmp do
26388: LD_ADDR_VAR 0 7
26392: PUSH
26393: LD_VAR 0 8
26397: PUSH
26398: FOR_IN
26399: IFFALSE 26427
// if i [ 1 ] = b_ext_radio then
26401: LD_VAR 0 7
26405: PUSH
26406: LD_INT 1
26408: ARRAY
26409: PUSH
26410: LD_INT 22
26412: EQUAL
26413: IFFALSE 26425
// begin control := control_remote ;
26415: LD_ADDR_VAR 0 4
26419: PUSH
26420: LD_INT 2
26422: ST_TO_ADDR
// break ;
26423: GO 26427
// end ;
26425: GO 26398
26427: POP
26428: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26429: LD_VAR 0 1
26433: PPUSH
26434: LD_VAR 0 2
26438: PPUSH
26439: LD_VAR 0 3
26443: PPUSH
26444: LD_VAR 0 4
26448: PPUSH
26449: LD_VAR 0 5
26453: PPUSH
26454: CALL_OW 448
26458: IFFALSE 26493
// begin result := [ chassis , engine , control , weapon ] ;
26460: LD_ADDR_VAR 0 6
26464: PUSH
26465: LD_VAR 0 2
26469: PUSH
26470: LD_VAR 0 3
26474: PUSH
26475: LD_VAR 0 4
26479: PUSH
26480: LD_VAR 0 5
26484: PUSH
26485: EMPTY
26486: LIST
26487: LIST
26488: LIST
26489: LIST
26490: ST_TO_ADDR
// exit ;
26491: GO 26905
// end ; _chassis := AvailableChassisList ( factory ) ;
26493: LD_ADDR_VAR 0 9
26497: PUSH
26498: LD_VAR 0 1
26502: PPUSH
26503: CALL_OW 475
26507: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
26508: LD_ADDR_VAR 0 11
26512: PUSH
26513: LD_VAR 0 1
26517: PPUSH
26518: CALL_OW 476
26522: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
26523: LD_ADDR_VAR 0 12
26527: PUSH
26528: LD_VAR 0 1
26532: PPUSH
26533: CALL_OW 477
26537: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
26538: LD_ADDR_VAR 0 10
26542: PUSH
26543: LD_VAR 0 1
26547: PPUSH
26548: CALL_OW 478
26552: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
26553: LD_VAR 0 9
26557: NOT
26558: PUSH
26559: LD_VAR 0 11
26563: NOT
26564: OR
26565: PUSH
26566: LD_VAR 0 12
26570: NOT
26571: OR
26572: PUSH
26573: LD_VAR 0 10
26577: NOT
26578: OR
26579: IFFALSE 26614
// begin result := [ chassis , engine , control , weapon ] ;
26581: LD_ADDR_VAR 0 6
26585: PUSH
26586: LD_VAR 0 2
26590: PUSH
26591: LD_VAR 0 3
26595: PUSH
26596: LD_VAR 0 4
26600: PUSH
26601: LD_VAR 0 5
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: LIST
26610: LIST
26611: ST_TO_ADDR
// exit ;
26612: GO 26905
// end ; if not chassis in _chassis then
26614: LD_VAR 0 2
26618: PUSH
26619: LD_VAR 0 9
26623: IN
26624: NOT
26625: IFFALSE 26651
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
26627: LD_ADDR_VAR 0 2
26631: PUSH
26632: LD_VAR 0 9
26636: PUSH
26637: LD_INT 1
26639: PPUSH
26640: LD_VAR 0 9
26644: PPUSH
26645: CALL_OW 12
26649: ARRAY
26650: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
26651: LD_VAR 0 2
26655: PPUSH
26656: LD_VAR 0 3
26660: PPUSH
26661: CALL 26910 0 2
26665: NOT
26666: IFFALSE 26725
// repeat engine := _engine [ 1 ] ;
26668: LD_ADDR_VAR 0 3
26672: PUSH
26673: LD_VAR 0 11
26677: PUSH
26678: LD_INT 1
26680: ARRAY
26681: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
26682: LD_ADDR_VAR 0 11
26686: PUSH
26687: LD_VAR 0 11
26691: PPUSH
26692: LD_INT 1
26694: PPUSH
26695: CALL_OW 3
26699: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
26700: LD_VAR 0 2
26704: PPUSH
26705: LD_VAR 0 3
26709: PPUSH
26710: CALL 26910 0 2
26714: PUSH
26715: LD_VAR 0 11
26719: PUSH
26720: EMPTY
26721: EQUAL
26722: OR
26723: IFFALSE 26668
// if not control in _control then
26725: LD_VAR 0 4
26729: PUSH
26730: LD_VAR 0 12
26734: IN
26735: NOT
26736: IFFALSE 26762
// control := _control [ rand ( 1 , _control ) ] ;
26738: LD_ADDR_VAR 0 4
26742: PUSH
26743: LD_VAR 0 12
26747: PUSH
26748: LD_INT 1
26750: PPUSH
26751: LD_VAR 0 12
26755: PPUSH
26756: CALL_OW 12
26760: ARRAY
26761: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
26762: LD_VAR 0 2
26766: PPUSH
26767: LD_VAR 0 5
26771: PPUSH
26772: CALL 27130 0 2
26776: NOT
26777: IFFALSE 26836
// repeat weapon := _weapon [ 1 ] ;
26779: LD_ADDR_VAR 0 5
26783: PUSH
26784: LD_VAR 0 10
26788: PUSH
26789: LD_INT 1
26791: ARRAY
26792: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
26793: LD_ADDR_VAR 0 10
26797: PUSH
26798: LD_VAR 0 10
26802: PPUSH
26803: LD_INT 1
26805: PPUSH
26806: CALL_OW 3
26810: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
26811: LD_VAR 0 2
26815: PPUSH
26816: LD_VAR 0 5
26820: PPUSH
26821: CALL 27130 0 2
26825: PUSH
26826: LD_VAR 0 10
26830: PUSH
26831: EMPTY
26832: EQUAL
26833: OR
26834: IFFALSE 26779
// result := [ ] ;
26836: LD_ADDR_VAR 0 6
26840: PUSH
26841: EMPTY
26842: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26843: LD_VAR 0 1
26847: PPUSH
26848: LD_VAR 0 2
26852: PPUSH
26853: LD_VAR 0 3
26857: PPUSH
26858: LD_VAR 0 4
26862: PPUSH
26863: LD_VAR 0 5
26867: PPUSH
26868: CALL_OW 448
26872: IFFALSE 26905
// result := [ chassis , engine , control , weapon ] ;
26874: LD_ADDR_VAR 0 6
26878: PUSH
26879: LD_VAR 0 2
26883: PUSH
26884: LD_VAR 0 3
26888: PUSH
26889: LD_VAR 0 4
26893: PUSH
26894: LD_VAR 0 5
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: LIST
26903: LIST
26904: ST_TO_ADDR
// end ;
26905: LD_VAR 0 6
26909: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
26910: LD_INT 0
26912: PPUSH
// if not chassis or not engine then
26913: LD_VAR 0 1
26917: NOT
26918: PUSH
26919: LD_VAR 0 2
26923: NOT
26924: OR
26925: IFFALSE 26929
// exit ;
26927: GO 27125
// case engine of engine_solar :
26929: LD_VAR 0 2
26933: PUSH
26934: LD_INT 2
26936: DOUBLE
26937: EQUAL
26938: IFTRUE 26942
26940: GO 26980
26942: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
26943: LD_ADDR_VAR 0 3
26947: PUSH
26948: LD_INT 11
26950: PUSH
26951: LD_INT 12
26953: PUSH
26954: LD_INT 13
26956: PUSH
26957: LD_INT 14
26959: PUSH
26960: LD_INT 1
26962: PUSH
26963: LD_INT 2
26965: PUSH
26966: LD_INT 3
26968: PUSH
26969: EMPTY
26970: LIST
26971: LIST
26972: LIST
26973: LIST
26974: LIST
26975: LIST
26976: LIST
26977: ST_TO_ADDR
26978: GO 27109
26980: LD_INT 1
26982: DOUBLE
26983: EQUAL
26984: IFTRUE 26988
26986: GO 27050
26988: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
26989: LD_ADDR_VAR 0 3
26993: PUSH
26994: LD_INT 11
26996: PUSH
26997: LD_INT 12
26999: PUSH
27000: LD_INT 13
27002: PUSH
27003: LD_INT 14
27005: PUSH
27006: LD_INT 1
27008: PUSH
27009: LD_INT 2
27011: PUSH
27012: LD_INT 3
27014: PUSH
27015: LD_INT 4
27017: PUSH
27018: LD_INT 5
27020: PUSH
27021: LD_INT 21
27023: PUSH
27024: LD_INT 23
27026: PUSH
27027: LD_INT 22
27029: PUSH
27030: LD_INT 24
27032: PUSH
27033: EMPTY
27034: LIST
27035: LIST
27036: LIST
27037: LIST
27038: LIST
27039: LIST
27040: LIST
27041: LIST
27042: LIST
27043: LIST
27044: LIST
27045: LIST
27046: LIST
27047: ST_TO_ADDR
27048: GO 27109
27050: LD_INT 3
27052: DOUBLE
27053: EQUAL
27054: IFTRUE 27058
27056: GO 27108
27058: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27059: LD_ADDR_VAR 0 3
27063: PUSH
27064: LD_INT 13
27066: PUSH
27067: LD_INT 14
27069: PUSH
27070: LD_INT 2
27072: PUSH
27073: LD_INT 3
27075: PUSH
27076: LD_INT 4
27078: PUSH
27079: LD_INT 5
27081: PUSH
27082: LD_INT 21
27084: PUSH
27085: LD_INT 22
27087: PUSH
27088: LD_INT 23
27090: PUSH
27091: LD_INT 24
27093: PUSH
27094: EMPTY
27095: LIST
27096: LIST
27097: LIST
27098: LIST
27099: LIST
27100: LIST
27101: LIST
27102: LIST
27103: LIST
27104: LIST
27105: ST_TO_ADDR
27106: GO 27109
27108: POP
// result := ( chassis in result ) ;
27109: LD_ADDR_VAR 0 3
27113: PUSH
27114: LD_VAR 0 1
27118: PUSH
27119: LD_VAR 0 3
27123: IN
27124: ST_TO_ADDR
// end ;
27125: LD_VAR 0 3
27129: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
27130: LD_INT 0
27132: PPUSH
// if not chassis or not weapon then
27133: LD_VAR 0 1
27137: NOT
27138: PUSH
27139: LD_VAR 0 2
27143: NOT
27144: OR
27145: IFFALSE 27149
// exit ;
27147: GO 28211
// case weapon of us_machine_gun :
27149: LD_VAR 0 2
27153: PUSH
27154: LD_INT 2
27156: DOUBLE
27157: EQUAL
27158: IFTRUE 27162
27160: GO 27192
27162: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
27163: LD_ADDR_VAR 0 3
27167: PUSH
27168: LD_INT 1
27170: PUSH
27171: LD_INT 2
27173: PUSH
27174: LD_INT 3
27176: PUSH
27177: LD_INT 4
27179: PUSH
27180: LD_INT 5
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: LIST
27189: ST_TO_ADDR
27190: GO 28195
27192: LD_INT 3
27194: DOUBLE
27195: EQUAL
27196: IFTRUE 27200
27198: GO 27230
27200: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
27201: LD_ADDR_VAR 0 3
27205: PUSH
27206: LD_INT 1
27208: PUSH
27209: LD_INT 2
27211: PUSH
27212: LD_INT 3
27214: PUSH
27215: LD_INT 4
27217: PUSH
27218: LD_INT 5
27220: PUSH
27221: EMPTY
27222: LIST
27223: LIST
27224: LIST
27225: LIST
27226: LIST
27227: ST_TO_ADDR
27228: GO 28195
27230: LD_INT 11
27232: DOUBLE
27233: EQUAL
27234: IFTRUE 27238
27236: GO 27268
27238: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
27239: LD_ADDR_VAR 0 3
27243: PUSH
27244: LD_INT 1
27246: PUSH
27247: LD_INT 2
27249: PUSH
27250: LD_INT 3
27252: PUSH
27253: LD_INT 4
27255: PUSH
27256: LD_INT 5
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: ST_TO_ADDR
27266: GO 28195
27268: LD_INT 4
27270: DOUBLE
27271: EQUAL
27272: IFTRUE 27276
27274: GO 27302
27276: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
27277: LD_ADDR_VAR 0 3
27281: PUSH
27282: LD_INT 2
27284: PUSH
27285: LD_INT 3
27287: PUSH
27288: LD_INT 4
27290: PUSH
27291: LD_INT 5
27293: PUSH
27294: EMPTY
27295: LIST
27296: LIST
27297: LIST
27298: LIST
27299: ST_TO_ADDR
27300: GO 28195
27302: LD_INT 5
27304: DOUBLE
27305: EQUAL
27306: IFTRUE 27310
27308: GO 27336
27310: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
27311: LD_ADDR_VAR 0 3
27315: PUSH
27316: LD_INT 2
27318: PUSH
27319: LD_INT 3
27321: PUSH
27322: LD_INT 4
27324: PUSH
27325: LD_INT 5
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: LIST
27332: LIST
27333: ST_TO_ADDR
27334: GO 28195
27336: LD_INT 9
27338: DOUBLE
27339: EQUAL
27340: IFTRUE 27344
27342: GO 27370
27344: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
27345: LD_ADDR_VAR 0 3
27349: PUSH
27350: LD_INT 2
27352: PUSH
27353: LD_INT 3
27355: PUSH
27356: LD_INT 4
27358: PUSH
27359: LD_INT 5
27361: PUSH
27362: EMPTY
27363: LIST
27364: LIST
27365: LIST
27366: LIST
27367: ST_TO_ADDR
27368: GO 28195
27370: LD_INT 7
27372: DOUBLE
27373: EQUAL
27374: IFTRUE 27378
27376: GO 27404
27378: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
27379: LD_ADDR_VAR 0 3
27383: PUSH
27384: LD_INT 2
27386: PUSH
27387: LD_INT 3
27389: PUSH
27390: LD_INT 4
27392: PUSH
27393: LD_INT 5
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: LIST
27400: LIST
27401: ST_TO_ADDR
27402: GO 28195
27404: LD_INT 12
27406: DOUBLE
27407: EQUAL
27408: IFTRUE 27412
27410: GO 27438
27412: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
27413: LD_ADDR_VAR 0 3
27417: PUSH
27418: LD_INT 2
27420: PUSH
27421: LD_INT 3
27423: PUSH
27424: LD_INT 4
27426: PUSH
27427: LD_INT 5
27429: PUSH
27430: EMPTY
27431: LIST
27432: LIST
27433: LIST
27434: LIST
27435: ST_TO_ADDR
27436: GO 28195
27438: LD_INT 13
27440: DOUBLE
27441: EQUAL
27442: IFTRUE 27446
27444: GO 27472
27446: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
27447: LD_ADDR_VAR 0 3
27451: PUSH
27452: LD_INT 2
27454: PUSH
27455: LD_INT 3
27457: PUSH
27458: LD_INT 4
27460: PUSH
27461: LD_INT 5
27463: PUSH
27464: EMPTY
27465: LIST
27466: LIST
27467: LIST
27468: LIST
27469: ST_TO_ADDR
27470: GO 28195
27472: LD_INT 14
27474: DOUBLE
27475: EQUAL
27476: IFTRUE 27480
27478: GO 27498
27480: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
27481: LD_ADDR_VAR 0 3
27485: PUSH
27486: LD_INT 4
27488: PUSH
27489: LD_INT 5
27491: PUSH
27492: EMPTY
27493: LIST
27494: LIST
27495: ST_TO_ADDR
27496: GO 28195
27498: LD_INT 6
27500: DOUBLE
27501: EQUAL
27502: IFTRUE 27506
27504: GO 27524
27506: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
27507: LD_ADDR_VAR 0 3
27511: PUSH
27512: LD_INT 4
27514: PUSH
27515: LD_INT 5
27517: PUSH
27518: EMPTY
27519: LIST
27520: LIST
27521: ST_TO_ADDR
27522: GO 28195
27524: LD_INT 10
27526: DOUBLE
27527: EQUAL
27528: IFTRUE 27532
27530: GO 27550
27532: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
27533: LD_ADDR_VAR 0 3
27537: PUSH
27538: LD_INT 4
27540: PUSH
27541: LD_INT 5
27543: PUSH
27544: EMPTY
27545: LIST
27546: LIST
27547: ST_TO_ADDR
27548: GO 28195
27550: LD_INT 22
27552: DOUBLE
27553: EQUAL
27554: IFTRUE 27558
27556: GO 27584
27558: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
27559: LD_ADDR_VAR 0 3
27563: PUSH
27564: LD_INT 11
27566: PUSH
27567: LD_INT 12
27569: PUSH
27570: LD_INT 13
27572: PUSH
27573: LD_INT 14
27575: PUSH
27576: EMPTY
27577: LIST
27578: LIST
27579: LIST
27580: LIST
27581: ST_TO_ADDR
27582: GO 28195
27584: LD_INT 23
27586: DOUBLE
27587: EQUAL
27588: IFTRUE 27592
27590: GO 27618
27592: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
27593: LD_ADDR_VAR 0 3
27597: PUSH
27598: LD_INT 11
27600: PUSH
27601: LD_INT 12
27603: PUSH
27604: LD_INT 13
27606: PUSH
27607: LD_INT 14
27609: PUSH
27610: EMPTY
27611: LIST
27612: LIST
27613: LIST
27614: LIST
27615: ST_TO_ADDR
27616: GO 28195
27618: LD_INT 24
27620: DOUBLE
27621: EQUAL
27622: IFTRUE 27626
27624: GO 27652
27626: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
27627: LD_ADDR_VAR 0 3
27631: PUSH
27632: LD_INT 11
27634: PUSH
27635: LD_INT 12
27637: PUSH
27638: LD_INT 13
27640: PUSH
27641: LD_INT 14
27643: PUSH
27644: EMPTY
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: ST_TO_ADDR
27650: GO 28195
27652: LD_INT 30
27654: DOUBLE
27655: EQUAL
27656: IFTRUE 27660
27658: GO 27686
27660: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
27661: LD_ADDR_VAR 0 3
27665: PUSH
27666: LD_INT 11
27668: PUSH
27669: LD_INT 12
27671: PUSH
27672: LD_INT 13
27674: PUSH
27675: LD_INT 14
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: LIST
27682: LIST
27683: ST_TO_ADDR
27684: GO 28195
27686: LD_INT 25
27688: DOUBLE
27689: EQUAL
27690: IFTRUE 27694
27692: GO 27712
27694: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
27695: LD_ADDR_VAR 0 3
27699: PUSH
27700: LD_INT 13
27702: PUSH
27703: LD_INT 14
27705: PUSH
27706: EMPTY
27707: LIST
27708: LIST
27709: ST_TO_ADDR
27710: GO 28195
27712: LD_INT 27
27714: DOUBLE
27715: EQUAL
27716: IFTRUE 27720
27718: GO 27738
27720: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
27721: LD_ADDR_VAR 0 3
27725: PUSH
27726: LD_INT 13
27728: PUSH
27729: LD_INT 14
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: ST_TO_ADDR
27736: GO 28195
27738: LD_EXP 99
27742: DOUBLE
27743: EQUAL
27744: IFTRUE 27748
27746: GO 27774
27748: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
27749: LD_ADDR_VAR 0 3
27753: PUSH
27754: LD_INT 11
27756: PUSH
27757: LD_INT 12
27759: PUSH
27760: LD_INT 13
27762: PUSH
27763: LD_INT 14
27765: PUSH
27766: EMPTY
27767: LIST
27768: LIST
27769: LIST
27770: LIST
27771: ST_TO_ADDR
27772: GO 28195
27774: LD_INT 28
27776: DOUBLE
27777: EQUAL
27778: IFTRUE 27782
27780: GO 27800
27782: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
27783: LD_ADDR_VAR 0 3
27787: PUSH
27788: LD_INT 13
27790: PUSH
27791: LD_INT 14
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: ST_TO_ADDR
27798: GO 28195
27800: LD_INT 29
27802: DOUBLE
27803: EQUAL
27804: IFTRUE 27808
27806: GO 27826
27808: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
27809: LD_ADDR_VAR 0 3
27813: PUSH
27814: LD_INT 13
27816: PUSH
27817: LD_INT 14
27819: PUSH
27820: EMPTY
27821: LIST
27822: LIST
27823: ST_TO_ADDR
27824: GO 28195
27826: LD_INT 31
27828: DOUBLE
27829: EQUAL
27830: IFTRUE 27834
27832: GO 27852
27834: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
27835: LD_ADDR_VAR 0 3
27839: PUSH
27840: LD_INT 13
27842: PUSH
27843: LD_INT 14
27845: PUSH
27846: EMPTY
27847: LIST
27848: LIST
27849: ST_TO_ADDR
27850: GO 28195
27852: LD_INT 26
27854: DOUBLE
27855: EQUAL
27856: IFTRUE 27860
27858: GO 27878
27860: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
27861: LD_ADDR_VAR 0 3
27865: PUSH
27866: LD_INT 13
27868: PUSH
27869: LD_INT 14
27871: PUSH
27872: EMPTY
27873: LIST
27874: LIST
27875: ST_TO_ADDR
27876: GO 28195
27878: LD_INT 42
27880: DOUBLE
27881: EQUAL
27882: IFTRUE 27886
27884: GO 27912
27886: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
27887: LD_ADDR_VAR 0 3
27891: PUSH
27892: LD_INT 21
27894: PUSH
27895: LD_INT 22
27897: PUSH
27898: LD_INT 23
27900: PUSH
27901: LD_INT 24
27903: PUSH
27904: EMPTY
27905: LIST
27906: LIST
27907: LIST
27908: LIST
27909: ST_TO_ADDR
27910: GO 28195
27912: LD_INT 43
27914: DOUBLE
27915: EQUAL
27916: IFTRUE 27920
27918: GO 27946
27920: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
27921: LD_ADDR_VAR 0 3
27925: PUSH
27926: LD_INT 21
27928: PUSH
27929: LD_INT 22
27931: PUSH
27932: LD_INT 23
27934: PUSH
27935: LD_INT 24
27937: PUSH
27938: EMPTY
27939: LIST
27940: LIST
27941: LIST
27942: LIST
27943: ST_TO_ADDR
27944: GO 28195
27946: LD_INT 44
27948: DOUBLE
27949: EQUAL
27950: IFTRUE 27954
27952: GO 27980
27954: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
27955: LD_ADDR_VAR 0 3
27959: PUSH
27960: LD_INT 21
27962: PUSH
27963: LD_INT 22
27965: PUSH
27966: LD_INT 23
27968: PUSH
27969: LD_INT 24
27971: PUSH
27972: EMPTY
27973: LIST
27974: LIST
27975: LIST
27976: LIST
27977: ST_TO_ADDR
27978: GO 28195
27980: LD_INT 45
27982: DOUBLE
27983: EQUAL
27984: IFTRUE 27988
27986: GO 28014
27988: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
27989: LD_ADDR_VAR 0 3
27993: PUSH
27994: LD_INT 21
27996: PUSH
27997: LD_INT 22
27999: PUSH
28000: LD_INT 23
28002: PUSH
28003: LD_INT 24
28005: PUSH
28006: EMPTY
28007: LIST
28008: LIST
28009: LIST
28010: LIST
28011: ST_TO_ADDR
28012: GO 28195
28014: LD_INT 49
28016: DOUBLE
28017: EQUAL
28018: IFTRUE 28022
28020: GO 28048
28022: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
28023: LD_ADDR_VAR 0 3
28027: PUSH
28028: LD_INT 21
28030: PUSH
28031: LD_INT 22
28033: PUSH
28034: LD_INT 23
28036: PUSH
28037: LD_INT 24
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: ST_TO_ADDR
28046: GO 28195
28048: LD_INT 51
28050: DOUBLE
28051: EQUAL
28052: IFTRUE 28056
28054: GO 28082
28056: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
28057: LD_ADDR_VAR 0 3
28061: PUSH
28062: LD_INT 21
28064: PUSH
28065: LD_INT 22
28067: PUSH
28068: LD_INT 23
28070: PUSH
28071: LD_INT 24
28073: PUSH
28074: EMPTY
28075: LIST
28076: LIST
28077: LIST
28078: LIST
28079: ST_TO_ADDR
28080: GO 28195
28082: LD_INT 52
28084: DOUBLE
28085: EQUAL
28086: IFTRUE 28090
28088: GO 28116
28090: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
28091: LD_ADDR_VAR 0 3
28095: PUSH
28096: LD_INT 21
28098: PUSH
28099: LD_INT 22
28101: PUSH
28102: LD_INT 23
28104: PUSH
28105: LD_INT 24
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: LIST
28112: LIST
28113: ST_TO_ADDR
28114: GO 28195
28116: LD_INT 53
28118: DOUBLE
28119: EQUAL
28120: IFTRUE 28124
28122: GO 28142
28124: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
28125: LD_ADDR_VAR 0 3
28129: PUSH
28130: LD_INT 23
28132: PUSH
28133: LD_INT 24
28135: PUSH
28136: EMPTY
28137: LIST
28138: LIST
28139: ST_TO_ADDR
28140: GO 28195
28142: LD_INT 46
28144: DOUBLE
28145: EQUAL
28146: IFTRUE 28150
28148: GO 28168
28150: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
28151: LD_ADDR_VAR 0 3
28155: PUSH
28156: LD_INT 23
28158: PUSH
28159: LD_INT 24
28161: PUSH
28162: EMPTY
28163: LIST
28164: LIST
28165: ST_TO_ADDR
28166: GO 28195
28168: LD_INT 47
28170: DOUBLE
28171: EQUAL
28172: IFTRUE 28176
28174: GO 28194
28176: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28177: LD_ADDR_VAR 0 3
28181: PUSH
28182: LD_INT 23
28184: PUSH
28185: LD_INT 24
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: ST_TO_ADDR
28192: GO 28195
28194: POP
// result := ( chassis in result ) ;
28195: LD_ADDR_VAR 0 3
28199: PUSH
28200: LD_VAR 0 1
28204: PUSH
28205: LD_VAR 0 3
28209: IN
28210: ST_TO_ADDR
// end ;
28211: LD_VAR 0 3
28215: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
28216: LD_INT 0
28218: PPUSH
28219: PPUSH
28220: PPUSH
28221: PPUSH
28222: PPUSH
28223: PPUSH
28224: PPUSH
// result := array ;
28225: LD_ADDR_VAR 0 5
28229: PUSH
28230: LD_VAR 0 1
28234: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
28235: LD_VAR 0 1
28239: NOT
28240: PUSH
28241: LD_VAR 0 2
28245: NOT
28246: OR
28247: PUSH
28248: LD_VAR 0 3
28252: NOT
28253: OR
28254: PUSH
28255: LD_VAR 0 2
28259: PUSH
28260: LD_VAR 0 1
28264: GREATER
28265: OR
28266: PUSH
28267: LD_VAR 0 3
28271: PUSH
28272: LD_VAR 0 1
28276: GREATER
28277: OR
28278: IFFALSE 28282
// exit ;
28280: GO 28578
// if direction then
28282: LD_VAR 0 4
28286: IFFALSE 28350
// begin d := 1 ;
28288: LD_ADDR_VAR 0 9
28292: PUSH
28293: LD_INT 1
28295: ST_TO_ADDR
// if i_from > i_to then
28296: LD_VAR 0 2
28300: PUSH
28301: LD_VAR 0 3
28305: GREATER
28306: IFFALSE 28332
// length := ( array - i_from ) + i_to else
28308: LD_ADDR_VAR 0 11
28312: PUSH
28313: LD_VAR 0 1
28317: PUSH
28318: LD_VAR 0 2
28322: MINUS
28323: PUSH
28324: LD_VAR 0 3
28328: PLUS
28329: ST_TO_ADDR
28330: GO 28348
// length := i_to - i_from ;
28332: LD_ADDR_VAR 0 11
28336: PUSH
28337: LD_VAR 0 3
28341: PUSH
28342: LD_VAR 0 2
28346: MINUS
28347: ST_TO_ADDR
// end else
28348: GO 28411
// begin d := - 1 ;
28350: LD_ADDR_VAR 0 9
28354: PUSH
28355: LD_INT 1
28357: NEG
28358: ST_TO_ADDR
// if i_from > i_to then
28359: LD_VAR 0 2
28363: PUSH
28364: LD_VAR 0 3
28368: GREATER
28369: IFFALSE 28389
// length := i_from - i_to else
28371: LD_ADDR_VAR 0 11
28375: PUSH
28376: LD_VAR 0 2
28380: PUSH
28381: LD_VAR 0 3
28385: MINUS
28386: ST_TO_ADDR
28387: GO 28411
// length := ( array - i_to ) + i_from ;
28389: LD_ADDR_VAR 0 11
28393: PUSH
28394: LD_VAR 0 1
28398: PUSH
28399: LD_VAR 0 3
28403: MINUS
28404: PUSH
28405: LD_VAR 0 2
28409: PLUS
28410: ST_TO_ADDR
// end ; if not length then
28411: LD_VAR 0 11
28415: NOT
28416: IFFALSE 28420
// exit ;
28418: GO 28578
// tmp := array ;
28420: LD_ADDR_VAR 0 10
28424: PUSH
28425: LD_VAR 0 1
28429: ST_TO_ADDR
// for i = 1 to length do
28430: LD_ADDR_VAR 0 6
28434: PUSH
28435: DOUBLE
28436: LD_INT 1
28438: DEC
28439: ST_TO_ADDR
28440: LD_VAR 0 11
28444: PUSH
28445: FOR_TO
28446: IFFALSE 28566
// begin for j = 1 to array do
28448: LD_ADDR_VAR 0 7
28452: PUSH
28453: DOUBLE
28454: LD_INT 1
28456: DEC
28457: ST_TO_ADDR
28458: LD_VAR 0 1
28462: PUSH
28463: FOR_TO
28464: IFFALSE 28552
// begin k := j + d ;
28466: LD_ADDR_VAR 0 8
28470: PUSH
28471: LD_VAR 0 7
28475: PUSH
28476: LD_VAR 0 9
28480: PLUS
28481: ST_TO_ADDR
// if k > array then
28482: LD_VAR 0 8
28486: PUSH
28487: LD_VAR 0 1
28491: GREATER
28492: IFFALSE 28502
// k := 1 ;
28494: LD_ADDR_VAR 0 8
28498: PUSH
28499: LD_INT 1
28501: ST_TO_ADDR
// if not k then
28502: LD_VAR 0 8
28506: NOT
28507: IFFALSE 28519
// k := array ;
28509: LD_ADDR_VAR 0 8
28513: PUSH
28514: LD_VAR 0 1
28518: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
28519: LD_ADDR_VAR 0 10
28523: PUSH
28524: LD_VAR 0 10
28528: PPUSH
28529: LD_VAR 0 8
28533: PPUSH
28534: LD_VAR 0 1
28538: PUSH
28539: LD_VAR 0 7
28543: ARRAY
28544: PPUSH
28545: CALL_OW 1
28549: ST_TO_ADDR
// end ;
28550: GO 28463
28552: POP
28553: POP
// array := tmp ;
28554: LD_ADDR_VAR 0 1
28558: PUSH
28559: LD_VAR 0 10
28563: ST_TO_ADDR
// end ;
28564: GO 28445
28566: POP
28567: POP
// result := array ;
28568: LD_ADDR_VAR 0 5
28572: PUSH
28573: LD_VAR 0 1
28577: ST_TO_ADDR
// end ;
28578: LD_VAR 0 5
28582: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
28583: LD_INT 0
28585: PPUSH
28586: PPUSH
// result := 0 ;
28587: LD_ADDR_VAR 0 3
28591: PUSH
28592: LD_INT 0
28594: ST_TO_ADDR
// if not array or not value in array then
28595: LD_VAR 0 1
28599: NOT
28600: PUSH
28601: LD_VAR 0 2
28605: PUSH
28606: LD_VAR 0 1
28610: IN
28611: NOT
28612: OR
28613: IFFALSE 28617
// exit ;
28615: GO 28671
// for i = 1 to array do
28617: LD_ADDR_VAR 0 4
28621: PUSH
28622: DOUBLE
28623: LD_INT 1
28625: DEC
28626: ST_TO_ADDR
28627: LD_VAR 0 1
28631: PUSH
28632: FOR_TO
28633: IFFALSE 28669
// if value = array [ i ] then
28635: LD_VAR 0 2
28639: PUSH
28640: LD_VAR 0 1
28644: PUSH
28645: LD_VAR 0 4
28649: ARRAY
28650: EQUAL
28651: IFFALSE 28667
// begin result := i ;
28653: LD_ADDR_VAR 0 3
28657: PUSH
28658: LD_VAR 0 4
28662: ST_TO_ADDR
// exit ;
28663: POP
28664: POP
28665: GO 28671
// end ;
28667: GO 28632
28669: POP
28670: POP
// end ;
28671: LD_VAR 0 3
28675: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
28676: LD_INT 0
28678: PPUSH
// vc_chassis := chassis ;
28679: LD_ADDR_OWVAR 37
28683: PUSH
28684: LD_VAR 0 1
28688: ST_TO_ADDR
// vc_engine := engine ;
28689: LD_ADDR_OWVAR 39
28693: PUSH
28694: LD_VAR 0 2
28698: ST_TO_ADDR
// vc_control := control ;
28699: LD_ADDR_OWVAR 38
28703: PUSH
28704: LD_VAR 0 3
28708: ST_TO_ADDR
// vc_weapon := weapon ;
28709: LD_ADDR_OWVAR 40
28713: PUSH
28714: LD_VAR 0 4
28718: ST_TO_ADDR
// vc_fuel_battery := fuel ;
28719: LD_ADDR_OWVAR 41
28723: PUSH
28724: LD_VAR 0 5
28728: ST_TO_ADDR
// end ;
28729: LD_VAR 0 6
28733: RET
// export function WantPlant ( unit ) ; var task ; begin
28734: LD_INT 0
28736: PPUSH
28737: PPUSH
// result := false ;
28738: LD_ADDR_VAR 0 2
28742: PUSH
28743: LD_INT 0
28745: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
28746: LD_ADDR_VAR 0 3
28750: PUSH
28751: LD_VAR 0 1
28755: PPUSH
28756: CALL_OW 437
28760: ST_TO_ADDR
// if task then
28761: LD_VAR 0 3
28765: IFFALSE 28793
// if task [ 1 ] [ 1 ] = p then
28767: LD_VAR 0 3
28771: PUSH
28772: LD_INT 1
28774: ARRAY
28775: PUSH
28776: LD_INT 1
28778: ARRAY
28779: PUSH
28780: LD_STRING p
28782: EQUAL
28783: IFFALSE 28793
// result := true ;
28785: LD_ADDR_VAR 0 2
28789: PUSH
28790: LD_INT 1
28792: ST_TO_ADDR
// end ;
28793: LD_VAR 0 2
28797: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
28798: LD_INT 0
28800: PPUSH
28801: PPUSH
28802: PPUSH
28803: PPUSH
// if pos < 1 then
28804: LD_VAR 0 2
28808: PUSH
28809: LD_INT 1
28811: LESS
28812: IFFALSE 28816
// exit ;
28814: GO 29119
// if pos = 1 then
28816: LD_VAR 0 2
28820: PUSH
28821: LD_INT 1
28823: EQUAL
28824: IFFALSE 28857
// result := Replace ( arr , pos [ 1 ] , value ) else
28826: LD_ADDR_VAR 0 4
28830: PUSH
28831: LD_VAR 0 1
28835: PPUSH
28836: LD_VAR 0 2
28840: PUSH
28841: LD_INT 1
28843: ARRAY
28844: PPUSH
28845: LD_VAR 0 3
28849: PPUSH
28850: CALL_OW 1
28854: ST_TO_ADDR
28855: GO 29119
// begin tmp := arr ;
28857: LD_ADDR_VAR 0 6
28861: PUSH
28862: LD_VAR 0 1
28866: ST_TO_ADDR
// s_arr := [ tmp ] ;
28867: LD_ADDR_VAR 0 7
28871: PUSH
28872: LD_VAR 0 6
28876: PUSH
28877: EMPTY
28878: LIST
28879: ST_TO_ADDR
// for i = 1 to pos - 1 do
28880: LD_ADDR_VAR 0 5
28884: PUSH
28885: DOUBLE
28886: LD_INT 1
28888: DEC
28889: ST_TO_ADDR
28890: LD_VAR 0 2
28894: PUSH
28895: LD_INT 1
28897: MINUS
28898: PUSH
28899: FOR_TO
28900: IFFALSE 28945
// begin tmp := tmp [ pos [ i ] ] ;
28902: LD_ADDR_VAR 0 6
28906: PUSH
28907: LD_VAR 0 6
28911: PUSH
28912: LD_VAR 0 2
28916: PUSH
28917: LD_VAR 0 5
28921: ARRAY
28922: ARRAY
28923: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
28924: LD_ADDR_VAR 0 7
28928: PUSH
28929: LD_VAR 0 7
28933: PUSH
28934: LD_VAR 0 6
28938: PUSH
28939: EMPTY
28940: LIST
28941: ADD
28942: ST_TO_ADDR
// end ;
28943: GO 28899
28945: POP
28946: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
28947: LD_ADDR_VAR 0 6
28951: PUSH
28952: LD_VAR 0 6
28956: PPUSH
28957: LD_VAR 0 2
28961: PUSH
28962: LD_VAR 0 2
28966: ARRAY
28967: PPUSH
28968: LD_VAR 0 3
28972: PPUSH
28973: CALL_OW 1
28977: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
28978: LD_ADDR_VAR 0 7
28982: PUSH
28983: LD_VAR 0 7
28987: PPUSH
28988: LD_VAR 0 7
28992: PPUSH
28993: LD_VAR 0 6
28997: PPUSH
28998: CALL_OW 1
29002: ST_TO_ADDR
// for i = s_arr downto 2 do
29003: LD_ADDR_VAR 0 5
29007: PUSH
29008: DOUBLE
29009: LD_VAR 0 7
29013: INC
29014: ST_TO_ADDR
29015: LD_INT 2
29017: PUSH
29018: FOR_DOWNTO
29019: IFFALSE 29103
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
29021: LD_ADDR_VAR 0 6
29025: PUSH
29026: LD_VAR 0 7
29030: PUSH
29031: LD_VAR 0 5
29035: PUSH
29036: LD_INT 1
29038: MINUS
29039: ARRAY
29040: PPUSH
29041: LD_VAR 0 2
29045: PUSH
29046: LD_VAR 0 5
29050: PUSH
29051: LD_INT 1
29053: MINUS
29054: ARRAY
29055: PPUSH
29056: LD_VAR 0 7
29060: PUSH
29061: LD_VAR 0 5
29065: ARRAY
29066: PPUSH
29067: CALL_OW 1
29071: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
29072: LD_ADDR_VAR 0 7
29076: PUSH
29077: LD_VAR 0 7
29081: PPUSH
29082: LD_VAR 0 5
29086: PUSH
29087: LD_INT 1
29089: MINUS
29090: PPUSH
29091: LD_VAR 0 6
29095: PPUSH
29096: CALL_OW 1
29100: ST_TO_ADDR
// end ;
29101: GO 29018
29103: POP
29104: POP
// result := s_arr [ 1 ] ;
29105: LD_ADDR_VAR 0 4
29109: PUSH
29110: LD_VAR 0 7
29114: PUSH
29115: LD_INT 1
29117: ARRAY
29118: ST_TO_ADDR
// end ; end ;
29119: LD_VAR 0 4
29123: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
29124: LD_INT 0
29126: PPUSH
29127: PPUSH
// if not list then
29128: LD_VAR 0 1
29132: NOT
29133: IFFALSE 29137
// exit ;
29135: GO 29228
// i := list [ pos1 ] ;
29137: LD_ADDR_VAR 0 5
29141: PUSH
29142: LD_VAR 0 1
29146: PUSH
29147: LD_VAR 0 2
29151: ARRAY
29152: ST_TO_ADDR
// if not i then
29153: LD_VAR 0 5
29157: NOT
29158: IFFALSE 29162
// exit ;
29160: GO 29228
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
29162: LD_ADDR_VAR 0 1
29166: PUSH
29167: LD_VAR 0 1
29171: PPUSH
29172: LD_VAR 0 2
29176: PPUSH
29177: LD_VAR 0 1
29181: PUSH
29182: LD_VAR 0 3
29186: ARRAY
29187: PPUSH
29188: CALL_OW 1
29192: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
29193: LD_ADDR_VAR 0 1
29197: PUSH
29198: LD_VAR 0 1
29202: PPUSH
29203: LD_VAR 0 3
29207: PPUSH
29208: LD_VAR 0 5
29212: PPUSH
29213: CALL_OW 1
29217: ST_TO_ADDR
// result := list ;
29218: LD_ADDR_VAR 0 4
29222: PUSH
29223: LD_VAR 0 1
29227: ST_TO_ADDR
// end ;
29228: LD_VAR 0 4
29232: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
29233: LD_INT 0
29235: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
29236: LD_ADDR_VAR 0 5
29240: PUSH
29241: LD_VAR 0 1
29245: PPUSH
29246: CALL_OW 250
29250: PPUSH
29251: LD_VAR 0 1
29255: PPUSH
29256: CALL_OW 251
29260: PPUSH
29261: LD_VAR 0 2
29265: PPUSH
29266: LD_VAR 0 3
29270: PPUSH
29271: LD_VAR 0 4
29275: PPUSH
29276: CALL 29286 0 5
29280: ST_TO_ADDR
// end ;
29281: LD_VAR 0 5
29285: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
29286: LD_INT 0
29288: PPUSH
29289: PPUSH
29290: PPUSH
29291: PPUSH
// if not list then
29292: LD_VAR 0 3
29296: NOT
29297: IFFALSE 29301
// exit ;
29299: GO 29689
// result := [ ] ;
29301: LD_ADDR_VAR 0 6
29305: PUSH
29306: EMPTY
29307: ST_TO_ADDR
// for i in list do
29308: LD_ADDR_VAR 0 7
29312: PUSH
29313: LD_VAR 0 3
29317: PUSH
29318: FOR_IN
29319: IFFALSE 29521
// begin tmp := GetDistUnitXY ( i , x , y ) ;
29321: LD_ADDR_VAR 0 9
29325: PUSH
29326: LD_VAR 0 7
29330: PPUSH
29331: LD_VAR 0 1
29335: PPUSH
29336: LD_VAR 0 2
29340: PPUSH
29341: CALL_OW 297
29345: ST_TO_ADDR
// if not result then
29346: LD_VAR 0 6
29350: NOT
29351: IFFALSE 29377
// result := [ [ i , tmp ] ] else
29353: LD_ADDR_VAR 0 6
29357: PUSH
29358: LD_VAR 0 7
29362: PUSH
29363: LD_VAR 0 9
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: PUSH
29372: EMPTY
29373: LIST
29374: ST_TO_ADDR
29375: GO 29519
// begin if result [ result ] [ 2 ] < tmp then
29377: LD_VAR 0 6
29381: PUSH
29382: LD_VAR 0 6
29386: ARRAY
29387: PUSH
29388: LD_INT 2
29390: ARRAY
29391: PUSH
29392: LD_VAR 0 9
29396: LESS
29397: IFFALSE 29439
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
29399: LD_ADDR_VAR 0 6
29403: PUSH
29404: LD_VAR 0 6
29408: PPUSH
29409: LD_VAR 0 6
29413: PUSH
29414: LD_INT 1
29416: PLUS
29417: PPUSH
29418: LD_VAR 0 7
29422: PUSH
29423: LD_VAR 0 9
29427: PUSH
29428: EMPTY
29429: LIST
29430: LIST
29431: PPUSH
29432: CALL_OW 2
29436: ST_TO_ADDR
29437: GO 29519
// for j = 1 to result do
29439: LD_ADDR_VAR 0 8
29443: PUSH
29444: DOUBLE
29445: LD_INT 1
29447: DEC
29448: ST_TO_ADDR
29449: LD_VAR 0 6
29453: PUSH
29454: FOR_TO
29455: IFFALSE 29517
// begin if tmp < result [ j ] [ 2 ] then
29457: LD_VAR 0 9
29461: PUSH
29462: LD_VAR 0 6
29466: PUSH
29467: LD_VAR 0 8
29471: ARRAY
29472: PUSH
29473: LD_INT 2
29475: ARRAY
29476: LESS
29477: IFFALSE 29515
// begin result := Insert ( result , j , [ i , tmp ] ) ;
29479: LD_ADDR_VAR 0 6
29483: PUSH
29484: LD_VAR 0 6
29488: PPUSH
29489: LD_VAR 0 8
29493: PPUSH
29494: LD_VAR 0 7
29498: PUSH
29499: LD_VAR 0 9
29503: PUSH
29504: EMPTY
29505: LIST
29506: LIST
29507: PPUSH
29508: CALL_OW 2
29512: ST_TO_ADDR
// break ;
29513: GO 29517
// end ; end ;
29515: GO 29454
29517: POP
29518: POP
// end ; end ;
29519: GO 29318
29521: POP
29522: POP
// if result and not asc then
29523: LD_VAR 0 6
29527: PUSH
29528: LD_VAR 0 4
29532: NOT
29533: AND
29534: IFFALSE 29609
// begin tmp := result ;
29536: LD_ADDR_VAR 0 9
29540: PUSH
29541: LD_VAR 0 6
29545: ST_TO_ADDR
// for i = tmp downto 1 do
29546: LD_ADDR_VAR 0 7
29550: PUSH
29551: DOUBLE
29552: LD_VAR 0 9
29556: INC
29557: ST_TO_ADDR
29558: LD_INT 1
29560: PUSH
29561: FOR_DOWNTO
29562: IFFALSE 29607
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
29564: LD_ADDR_VAR 0 6
29568: PUSH
29569: LD_VAR 0 6
29573: PPUSH
29574: LD_VAR 0 9
29578: PUSH
29579: LD_VAR 0 7
29583: MINUS
29584: PUSH
29585: LD_INT 1
29587: PLUS
29588: PPUSH
29589: LD_VAR 0 9
29593: PUSH
29594: LD_VAR 0 7
29598: ARRAY
29599: PPUSH
29600: CALL_OW 1
29604: ST_TO_ADDR
29605: GO 29561
29607: POP
29608: POP
// end ; tmp := [ ] ;
29609: LD_ADDR_VAR 0 9
29613: PUSH
29614: EMPTY
29615: ST_TO_ADDR
// if mode then
29616: LD_VAR 0 5
29620: IFFALSE 29689
// begin for i = 1 to result do
29622: LD_ADDR_VAR 0 7
29626: PUSH
29627: DOUBLE
29628: LD_INT 1
29630: DEC
29631: ST_TO_ADDR
29632: LD_VAR 0 6
29636: PUSH
29637: FOR_TO
29638: IFFALSE 29677
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
29640: LD_ADDR_VAR 0 9
29644: PUSH
29645: LD_VAR 0 9
29649: PPUSH
29650: LD_VAR 0 7
29654: PPUSH
29655: LD_VAR 0 6
29659: PUSH
29660: LD_VAR 0 7
29664: ARRAY
29665: PUSH
29666: LD_INT 1
29668: ARRAY
29669: PPUSH
29670: CALL_OW 1
29674: ST_TO_ADDR
29675: GO 29637
29677: POP
29678: POP
// result := tmp ;
29679: LD_ADDR_VAR 0 6
29683: PUSH
29684: LD_VAR 0 9
29688: ST_TO_ADDR
// end ; end ;
29689: LD_VAR 0 6
29693: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
29694: LD_INT 0
29696: PPUSH
29697: PPUSH
29698: PPUSH
29699: PPUSH
29700: PPUSH
29701: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
29702: LD_ADDR_VAR 0 5
29706: PUSH
29707: LD_INT 0
29709: PUSH
29710: LD_INT 0
29712: PUSH
29713: LD_INT 0
29715: PUSH
29716: EMPTY
29717: PUSH
29718: EMPTY
29719: LIST
29720: LIST
29721: LIST
29722: LIST
29723: ST_TO_ADDR
// if not x or not y then
29724: LD_VAR 0 2
29728: NOT
29729: PUSH
29730: LD_VAR 0 3
29734: NOT
29735: OR
29736: IFFALSE 29740
// exit ;
29738: GO 31392
// if not range then
29740: LD_VAR 0 4
29744: NOT
29745: IFFALSE 29755
// range := 10 ;
29747: LD_ADDR_VAR 0 4
29751: PUSH
29752: LD_INT 10
29754: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29755: LD_ADDR_VAR 0 8
29759: PUSH
29760: LD_INT 81
29762: PUSH
29763: LD_VAR 0 1
29767: PUSH
29768: EMPTY
29769: LIST
29770: LIST
29771: PUSH
29772: LD_INT 92
29774: PUSH
29775: LD_VAR 0 2
29779: PUSH
29780: LD_VAR 0 3
29784: PUSH
29785: LD_VAR 0 4
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: LIST
29794: LIST
29795: PUSH
29796: LD_INT 3
29798: PUSH
29799: LD_INT 21
29801: PUSH
29802: LD_INT 3
29804: PUSH
29805: EMPTY
29806: LIST
29807: LIST
29808: PUSH
29809: EMPTY
29810: LIST
29811: LIST
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: LIST
29817: PPUSH
29818: CALL_OW 69
29822: ST_TO_ADDR
// if not tmp then
29823: LD_VAR 0 8
29827: NOT
29828: IFFALSE 29832
// exit ;
29830: GO 31392
// for i in tmp do
29832: LD_ADDR_VAR 0 6
29836: PUSH
29837: LD_VAR 0 8
29841: PUSH
29842: FOR_IN
29843: IFFALSE 31367
// begin points := [ 0 , 0 , 0 ] ;
29845: LD_ADDR_VAR 0 9
29849: PUSH
29850: LD_INT 0
29852: PUSH
29853: LD_INT 0
29855: PUSH
29856: LD_INT 0
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: LIST
29863: ST_TO_ADDR
// bpoints := 1 ;
29864: LD_ADDR_VAR 0 10
29868: PUSH
29869: LD_INT 1
29871: ST_TO_ADDR
// case GetType ( i ) of unit_human :
29872: LD_VAR 0 6
29876: PPUSH
29877: CALL_OW 247
29881: PUSH
29882: LD_INT 1
29884: DOUBLE
29885: EQUAL
29886: IFTRUE 29890
29888: GO 30468
29890: POP
// begin if GetClass ( i ) = 1 then
29891: LD_VAR 0 6
29895: PPUSH
29896: CALL_OW 257
29900: PUSH
29901: LD_INT 1
29903: EQUAL
29904: IFFALSE 29925
// points := [ 10 , 5 , 3 ] ;
29906: LD_ADDR_VAR 0 9
29910: PUSH
29911: LD_INT 10
29913: PUSH
29914: LD_INT 5
29916: PUSH
29917: LD_INT 3
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: LIST
29924: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
29925: LD_VAR 0 6
29929: PPUSH
29930: CALL_OW 257
29934: PUSH
29935: LD_INT 2
29937: PUSH
29938: LD_INT 3
29940: PUSH
29941: LD_INT 4
29943: PUSH
29944: EMPTY
29945: LIST
29946: LIST
29947: LIST
29948: IN
29949: IFFALSE 29970
// points := [ 3 , 2 , 1 ] ;
29951: LD_ADDR_VAR 0 9
29955: PUSH
29956: LD_INT 3
29958: PUSH
29959: LD_INT 2
29961: PUSH
29962: LD_INT 1
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: LIST
29969: ST_TO_ADDR
// if GetClass ( i ) = 5 then
29970: LD_VAR 0 6
29974: PPUSH
29975: CALL_OW 257
29979: PUSH
29980: LD_INT 5
29982: EQUAL
29983: IFFALSE 30004
// points := [ 130 , 5 , 2 ] ;
29985: LD_ADDR_VAR 0 9
29989: PUSH
29990: LD_INT 130
29992: PUSH
29993: LD_INT 5
29995: PUSH
29996: LD_INT 2
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: LIST
30003: ST_TO_ADDR
// if GetClass ( i ) = 8 then
30004: LD_VAR 0 6
30008: PPUSH
30009: CALL_OW 257
30013: PUSH
30014: LD_INT 8
30016: EQUAL
30017: IFFALSE 30038
// points := [ 35 , 35 , 30 ] ;
30019: LD_ADDR_VAR 0 9
30023: PUSH
30024: LD_INT 35
30026: PUSH
30027: LD_INT 35
30029: PUSH
30030: LD_INT 30
30032: PUSH
30033: EMPTY
30034: LIST
30035: LIST
30036: LIST
30037: ST_TO_ADDR
// if GetClass ( i ) = 9 then
30038: LD_VAR 0 6
30042: PPUSH
30043: CALL_OW 257
30047: PUSH
30048: LD_INT 9
30050: EQUAL
30051: IFFALSE 30072
// points := [ 20 , 55 , 40 ] ;
30053: LD_ADDR_VAR 0 9
30057: PUSH
30058: LD_INT 20
30060: PUSH
30061: LD_INT 55
30063: PUSH
30064: LD_INT 40
30066: PUSH
30067: EMPTY
30068: LIST
30069: LIST
30070: LIST
30071: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
30072: LD_VAR 0 6
30076: PPUSH
30077: CALL_OW 257
30081: PUSH
30082: LD_INT 12
30084: PUSH
30085: LD_INT 16
30087: PUSH
30088: EMPTY
30089: LIST
30090: LIST
30091: IN
30092: IFFALSE 30113
// points := [ 5 , 3 , 2 ] ;
30094: LD_ADDR_VAR 0 9
30098: PUSH
30099: LD_INT 5
30101: PUSH
30102: LD_INT 3
30104: PUSH
30105: LD_INT 2
30107: PUSH
30108: EMPTY
30109: LIST
30110: LIST
30111: LIST
30112: ST_TO_ADDR
// if GetClass ( i ) = 17 then
30113: LD_VAR 0 6
30117: PPUSH
30118: CALL_OW 257
30122: PUSH
30123: LD_INT 17
30125: EQUAL
30126: IFFALSE 30147
// points := [ 100 , 50 , 75 ] ;
30128: LD_ADDR_VAR 0 9
30132: PUSH
30133: LD_INT 100
30135: PUSH
30136: LD_INT 50
30138: PUSH
30139: LD_INT 75
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: LIST
30146: ST_TO_ADDR
// if GetClass ( i ) = 15 then
30147: LD_VAR 0 6
30151: PPUSH
30152: CALL_OW 257
30156: PUSH
30157: LD_INT 15
30159: EQUAL
30160: IFFALSE 30181
// points := [ 10 , 5 , 3 ] ;
30162: LD_ADDR_VAR 0 9
30166: PUSH
30167: LD_INT 10
30169: PUSH
30170: LD_INT 5
30172: PUSH
30173: LD_INT 3
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: LIST
30180: ST_TO_ADDR
// if GetClass ( i ) = 14 then
30181: LD_VAR 0 6
30185: PPUSH
30186: CALL_OW 257
30190: PUSH
30191: LD_INT 14
30193: EQUAL
30194: IFFALSE 30215
// points := [ 10 , 0 , 0 ] ;
30196: LD_ADDR_VAR 0 9
30200: PUSH
30201: LD_INT 10
30203: PUSH
30204: LD_INT 0
30206: PUSH
30207: LD_INT 0
30209: PUSH
30210: EMPTY
30211: LIST
30212: LIST
30213: LIST
30214: ST_TO_ADDR
// if GetClass ( i ) = 11 then
30215: LD_VAR 0 6
30219: PPUSH
30220: CALL_OW 257
30224: PUSH
30225: LD_INT 11
30227: EQUAL
30228: IFFALSE 30249
// points := [ 30 , 10 , 5 ] ;
30230: LD_ADDR_VAR 0 9
30234: PUSH
30235: LD_INT 30
30237: PUSH
30238: LD_INT 10
30240: PUSH
30241: LD_INT 5
30243: PUSH
30244: EMPTY
30245: LIST
30246: LIST
30247: LIST
30248: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
30249: LD_VAR 0 1
30253: PPUSH
30254: LD_INT 5
30256: PPUSH
30257: CALL_OW 321
30261: PUSH
30262: LD_INT 2
30264: EQUAL
30265: IFFALSE 30282
// bpoints := bpoints * 1.8 ;
30267: LD_ADDR_VAR 0 10
30271: PUSH
30272: LD_VAR 0 10
30276: PUSH
30277: LD_REAL  1.80000000000000E+0000
30280: MUL
30281: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
30282: LD_VAR 0 6
30286: PPUSH
30287: CALL_OW 257
30291: PUSH
30292: LD_INT 1
30294: PUSH
30295: LD_INT 2
30297: PUSH
30298: LD_INT 3
30300: PUSH
30301: LD_INT 4
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: LIST
30308: LIST
30309: IN
30310: PUSH
30311: LD_VAR 0 1
30315: PPUSH
30316: LD_INT 51
30318: PPUSH
30319: CALL_OW 321
30323: PUSH
30324: LD_INT 2
30326: EQUAL
30327: AND
30328: IFFALSE 30345
// bpoints := bpoints * 1.2 ;
30330: LD_ADDR_VAR 0 10
30334: PUSH
30335: LD_VAR 0 10
30339: PUSH
30340: LD_REAL  1.20000000000000E+0000
30343: MUL
30344: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
30345: LD_VAR 0 6
30349: PPUSH
30350: CALL_OW 257
30354: PUSH
30355: LD_INT 5
30357: PUSH
30358: LD_INT 7
30360: PUSH
30361: LD_INT 9
30363: PUSH
30364: EMPTY
30365: LIST
30366: LIST
30367: LIST
30368: IN
30369: PUSH
30370: LD_VAR 0 1
30374: PPUSH
30375: LD_INT 52
30377: PPUSH
30378: CALL_OW 321
30382: PUSH
30383: LD_INT 2
30385: EQUAL
30386: AND
30387: IFFALSE 30404
// bpoints := bpoints * 1.5 ;
30389: LD_ADDR_VAR 0 10
30393: PUSH
30394: LD_VAR 0 10
30398: PUSH
30399: LD_REAL  1.50000000000000E+0000
30402: MUL
30403: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
30404: LD_VAR 0 1
30408: PPUSH
30409: LD_INT 66
30411: PPUSH
30412: CALL_OW 321
30416: PUSH
30417: LD_INT 2
30419: EQUAL
30420: IFFALSE 30437
// bpoints := bpoints * 1.1 ;
30422: LD_ADDR_VAR 0 10
30426: PUSH
30427: LD_VAR 0 10
30431: PUSH
30432: LD_REAL  1.10000000000000E+0000
30435: MUL
30436: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
30437: LD_ADDR_VAR 0 10
30441: PUSH
30442: LD_VAR 0 10
30446: PUSH
30447: LD_VAR 0 6
30451: PPUSH
30452: LD_INT 1
30454: PPUSH
30455: CALL_OW 259
30459: PUSH
30460: LD_REAL  1.15000000000000E+0000
30463: MUL
30464: MUL
30465: ST_TO_ADDR
// end ; unit_vehicle :
30466: GO 31296
30468: LD_INT 2
30470: DOUBLE
30471: EQUAL
30472: IFTRUE 30476
30474: GO 31284
30476: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
30477: LD_VAR 0 6
30481: PPUSH
30482: CALL_OW 264
30486: PUSH
30487: LD_INT 2
30489: PUSH
30490: LD_INT 42
30492: PUSH
30493: LD_INT 24
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: LIST
30500: IN
30501: IFFALSE 30522
// points := [ 25 , 5 , 3 ] ;
30503: LD_ADDR_VAR 0 9
30507: PUSH
30508: LD_INT 25
30510: PUSH
30511: LD_INT 5
30513: PUSH
30514: LD_INT 3
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: LIST
30521: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
30522: LD_VAR 0 6
30526: PPUSH
30527: CALL_OW 264
30531: PUSH
30532: LD_INT 4
30534: PUSH
30535: LD_INT 43
30537: PUSH
30538: LD_INT 25
30540: PUSH
30541: EMPTY
30542: LIST
30543: LIST
30544: LIST
30545: IN
30546: IFFALSE 30567
// points := [ 40 , 15 , 5 ] ;
30548: LD_ADDR_VAR 0 9
30552: PUSH
30553: LD_INT 40
30555: PUSH
30556: LD_INT 15
30558: PUSH
30559: LD_INT 5
30561: PUSH
30562: EMPTY
30563: LIST
30564: LIST
30565: LIST
30566: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
30567: LD_VAR 0 6
30571: PPUSH
30572: CALL_OW 264
30576: PUSH
30577: LD_INT 3
30579: PUSH
30580: LD_INT 23
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: IN
30587: IFFALSE 30608
// points := [ 7 , 25 , 8 ] ;
30589: LD_ADDR_VAR 0 9
30593: PUSH
30594: LD_INT 7
30596: PUSH
30597: LD_INT 25
30599: PUSH
30600: LD_INT 8
30602: PUSH
30603: EMPTY
30604: LIST
30605: LIST
30606: LIST
30607: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
30608: LD_VAR 0 6
30612: PPUSH
30613: CALL_OW 264
30617: PUSH
30618: LD_INT 5
30620: PUSH
30621: LD_INT 27
30623: PUSH
30624: LD_INT 44
30626: PUSH
30627: EMPTY
30628: LIST
30629: LIST
30630: LIST
30631: IN
30632: IFFALSE 30653
// points := [ 14 , 50 , 16 ] ;
30634: LD_ADDR_VAR 0 9
30638: PUSH
30639: LD_INT 14
30641: PUSH
30642: LD_INT 50
30644: PUSH
30645: LD_INT 16
30647: PUSH
30648: EMPTY
30649: LIST
30650: LIST
30651: LIST
30652: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
30653: LD_VAR 0 6
30657: PPUSH
30658: CALL_OW 264
30662: PUSH
30663: LD_INT 6
30665: PUSH
30666: LD_INT 46
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: IN
30673: IFFALSE 30694
// points := [ 32 , 120 , 70 ] ;
30675: LD_ADDR_VAR 0 9
30679: PUSH
30680: LD_INT 32
30682: PUSH
30683: LD_INT 120
30685: PUSH
30686: LD_INT 70
30688: PUSH
30689: EMPTY
30690: LIST
30691: LIST
30692: LIST
30693: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
30694: LD_VAR 0 6
30698: PPUSH
30699: CALL_OW 264
30703: PUSH
30704: LD_INT 7
30706: PUSH
30707: LD_INT 28
30709: PUSH
30710: LD_INT 45
30712: PUSH
30713: LD_EXP 99
30717: PUSH
30718: EMPTY
30719: LIST
30720: LIST
30721: LIST
30722: LIST
30723: IN
30724: IFFALSE 30745
// points := [ 35 , 20 , 45 ] ;
30726: LD_ADDR_VAR 0 9
30730: PUSH
30731: LD_INT 35
30733: PUSH
30734: LD_INT 20
30736: PUSH
30737: LD_INT 45
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: LIST
30744: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
30745: LD_VAR 0 6
30749: PPUSH
30750: CALL_OW 264
30754: PUSH
30755: LD_INT 47
30757: PUSH
30758: EMPTY
30759: LIST
30760: IN
30761: IFFALSE 30782
// points := [ 67 , 45 , 75 ] ;
30763: LD_ADDR_VAR 0 9
30767: PUSH
30768: LD_INT 67
30770: PUSH
30771: LD_INT 45
30773: PUSH
30774: LD_INT 75
30776: PUSH
30777: EMPTY
30778: LIST
30779: LIST
30780: LIST
30781: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
30782: LD_VAR 0 6
30786: PPUSH
30787: CALL_OW 264
30791: PUSH
30792: LD_INT 26
30794: PUSH
30795: EMPTY
30796: LIST
30797: IN
30798: IFFALSE 30819
// points := [ 120 , 30 , 80 ] ;
30800: LD_ADDR_VAR 0 9
30804: PUSH
30805: LD_INT 120
30807: PUSH
30808: LD_INT 30
30810: PUSH
30811: LD_INT 80
30813: PUSH
30814: EMPTY
30815: LIST
30816: LIST
30817: LIST
30818: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
30819: LD_VAR 0 6
30823: PPUSH
30824: CALL_OW 264
30828: PUSH
30829: LD_INT 22
30831: PUSH
30832: EMPTY
30833: LIST
30834: IN
30835: IFFALSE 30856
// points := [ 40 , 1 , 1 ] ;
30837: LD_ADDR_VAR 0 9
30841: PUSH
30842: LD_INT 40
30844: PUSH
30845: LD_INT 1
30847: PUSH
30848: LD_INT 1
30850: PUSH
30851: EMPTY
30852: LIST
30853: LIST
30854: LIST
30855: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
30856: LD_VAR 0 6
30860: PPUSH
30861: CALL_OW 264
30865: PUSH
30866: LD_INT 29
30868: PUSH
30869: EMPTY
30870: LIST
30871: IN
30872: IFFALSE 30893
// points := [ 70 , 200 , 400 ] ;
30874: LD_ADDR_VAR 0 9
30878: PUSH
30879: LD_INT 70
30881: PUSH
30882: LD_INT 200
30884: PUSH
30885: LD_INT 400
30887: PUSH
30888: EMPTY
30889: LIST
30890: LIST
30891: LIST
30892: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
30893: LD_VAR 0 6
30897: PPUSH
30898: CALL_OW 264
30902: PUSH
30903: LD_INT 14
30905: PUSH
30906: LD_INT 53
30908: PUSH
30909: EMPTY
30910: LIST
30911: LIST
30912: IN
30913: IFFALSE 30934
// points := [ 40 , 10 , 20 ] ;
30915: LD_ADDR_VAR 0 9
30919: PUSH
30920: LD_INT 40
30922: PUSH
30923: LD_INT 10
30925: PUSH
30926: LD_INT 20
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: LIST
30933: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
30934: LD_VAR 0 6
30938: PPUSH
30939: CALL_OW 264
30943: PUSH
30944: LD_INT 9
30946: PUSH
30947: EMPTY
30948: LIST
30949: IN
30950: IFFALSE 30971
// points := [ 5 , 70 , 20 ] ;
30952: LD_ADDR_VAR 0 9
30956: PUSH
30957: LD_INT 5
30959: PUSH
30960: LD_INT 70
30962: PUSH
30963: LD_INT 20
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: LIST
30970: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
30971: LD_VAR 0 6
30975: PPUSH
30976: CALL_OW 264
30980: PUSH
30981: LD_INT 10
30983: PUSH
30984: EMPTY
30985: LIST
30986: IN
30987: IFFALSE 31008
// points := [ 35 , 110 , 70 ] ;
30989: LD_ADDR_VAR 0 9
30993: PUSH
30994: LD_INT 35
30996: PUSH
30997: LD_INT 110
30999: PUSH
31000: LD_INT 70
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: LIST
31007: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
31008: LD_VAR 0 6
31012: PPUSH
31013: CALL_OW 265
31017: PUSH
31018: LD_INT 25
31020: EQUAL
31021: IFFALSE 31042
// points := [ 80 , 65 , 100 ] ;
31023: LD_ADDR_VAR 0 9
31027: PUSH
31028: LD_INT 80
31030: PUSH
31031: LD_INT 65
31033: PUSH
31034: LD_INT 100
31036: PUSH
31037: EMPTY
31038: LIST
31039: LIST
31040: LIST
31041: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
31042: LD_VAR 0 6
31046: PPUSH
31047: CALL_OW 263
31051: PUSH
31052: LD_INT 1
31054: EQUAL
31055: IFFALSE 31090
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
31057: LD_ADDR_VAR 0 10
31061: PUSH
31062: LD_VAR 0 10
31066: PUSH
31067: LD_VAR 0 6
31071: PPUSH
31072: CALL_OW 311
31076: PPUSH
31077: LD_INT 3
31079: PPUSH
31080: CALL_OW 259
31084: PUSH
31085: LD_INT 4
31087: MUL
31088: MUL
31089: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
31090: LD_VAR 0 6
31094: PPUSH
31095: CALL_OW 263
31099: PUSH
31100: LD_INT 2
31102: EQUAL
31103: IFFALSE 31154
// begin j := IsControledBy ( i ) ;
31105: LD_ADDR_VAR 0 7
31109: PUSH
31110: LD_VAR 0 6
31114: PPUSH
31115: CALL_OW 312
31119: ST_TO_ADDR
// if j then
31120: LD_VAR 0 7
31124: IFFALSE 31154
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
31126: LD_ADDR_VAR 0 10
31130: PUSH
31131: LD_VAR 0 10
31135: PUSH
31136: LD_VAR 0 7
31140: PPUSH
31141: LD_INT 3
31143: PPUSH
31144: CALL_OW 259
31148: PUSH
31149: LD_INT 3
31151: MUL
31152: MUL
31153: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
31154: LD_VAR 0 6
31158: PPUSH
31159: CALL_OW 264
31163: PUSH
31164: LD_INT 5
31166: PUSH
31167: LD_INT 6
31169: PUSH
31170: LD_INT 46
31172: PUSH
31173: LD_INT 44
31175: PUSH
31176: LD_INT 47
31178: PUSH
31179: LD_INT 45
31181: PUSH
31182: LD_INT 28
31184: PUSH
31185: LD_INT 7
31187: PUSH
31188: LD_INT 27
31190: PUSH
31191: LD_INT 29
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: LIST
31198: LIST
31199: LIST
31200: LIST
31201: LIST
31202: LIST
31203: LIST
31204: LIST
31205: IN
31206: PUSH
31207: LD_VAR 0 1
31211: PPUSH
31212: LD_INT 52
31214: PPUSH
31215: CALL_OW 321
31219: PUSH
31220: LD_INT 2
31222: EQUAL
31223: AND
31224: IFFALSE 31241
// bpoints := bpoints * 1.2 ;
31226: LD_ADDR_VAR 0 10
31230: PUSH
31231: LD_VAR 0 10
31235: PUSH
31236: LD_REAL  1.20000000000000E+0000
31239: MUL
31240: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
31241: LD_VAR 0 6
31245: PPUSH
31246: CALL_OW 264
31250: PUSH
31251: LD_INT 6
31253: PUSH
31254: LD_INT 46
31256: PUSH
31257: LD_INT 47
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: LIST
31264: IN
31265: IFFALSE 31282
// bpoints := bpoints * 1.2 ;
31267: LD_ADDR_VAR 0 10
31271: PUSH
31272: LD_VAR 0 10
31276: PUSH
31277: LD_REAL  1.20000000000000E+0000
31280: MUL
31281: ST_TO_ADDR
// end ; unit_building :
31282: GO 31296
31284: LD_INT 3
31286: DOUBLE
31287: EQUAL
31288: IFTRUE 31292
31290: GO 31295
31292: POP
// ; end ;
31293: GO 31296
31295: POP
// for j = 1 to 3 do
31296: LD_ADDR_VAR 0 7
31300: PUSH
31301: DOUBLE
31302: LD_INT 1
31304: DEC
31305: ST_TO_ADDR
31306: LD_INT 3
31308: PUSH
31309: FOR_TO
31310: IFFALSE 31363
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
31312: LD_ADDR_VAR 0 5
31316: PUSH
31317: LD_VAR 0 5
31321: PPUSH
31322: LD_VAR 0 7
31326: PPUSH
31327: LD_VAR 0 5
31331: PUSH
31332: LD_VAR 0 7
31336: ARRAY
31337: PUSH
31338: LD_VAR 0 9
31342: PUSH
31343: LD_VAR 0 7
31347: ARRAY
31348: PUSH
31349: LD_VAR 0 10
31353: MUL
31354: PLUS
31355: PPUSH
31356: CALL_OW 1
31360: ST_TO_ADDR
31361: GO 31309
31363: POP
31364: POP
// end ;
31365: GO 29842
31367: POP
31368: POP
// result := Replace ( result , 4 , tmp ) ;
31369: LD_ADDR_VAR 0 5
31373: PUSH
31374: LD_VAR 0 5
31378: PPUSH
31379: LD_INT 4
31381: PPUSH
31382: LD_VAR 0 8
31386: PPUSH
31387: CALL_OW 1
31391: ST_TO_ADDR
// end ;
31392: LD_VAR 0 5
31396: RET
// export function DangerAtRange ( unit , range ) ; begin
31397: LD_INT 0
31399: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
31400: LD_ADDR_VAR 0 3
31404: PUSH
31405: LD_VAR 0 1
31409: PPUSH
31410: CALL_OW 255
31414: PPUSH
31415: LD_VAR 0 1
31419: PPUSH
31420: CALL_OW 250
31424: PPUSH
31425: LD_VAR 0 1
31429: PPUSH
31430: CALL_OW 251
31434: PPUSH
31435: LD_VAR 0 2
31439: PPUSH
31440: CALL 29694 0 4
31444: ST_TO_ADDR
// end ;
31445: LD_VAR 0 3
31449: RET
// export function DangerInArea ( side , area ) ; begin
31450: LD_INT 0
31452: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
31453: LD_ADDR_VAR 0 3
31457: PUSH
31458: LD_VAR 0 2
31462: PPUSH
31463: LD_INT 81
31465: PUSH
31466: LD_VAR 0 1
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: PPUSH
31475: CALL_OW 70
31479: ST_TO_ADDR
// end ;
31480: LD_VAR 0 3
31484: RET
// export function IsExtension ( b ) ; begin
31485: LD_INT 0
31487: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
31488: LD_ADDR_VAR 0 2
31492: PUSH
31493: LD_VAR 0 1
31497: PUSH
31498: LD_INT 23
31500: PUSH
31501: LD_INT 20
31503: PUSH
31504: LD_INT 22
31506: PUSH
31507: LD_INT 17
31509: PUSH
31510: LD_INT 24
31512: PUSH
31513: LD_INT 21
31515: PUSH
31516: LD_INT 19
31518: PUSH
31519: LD_INT 16
31521: PUSH
31522: LD_INT 25
31524: PUSH
31525: LD_INT 18
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: LIST
31532: LIST
31533: LIST
31534: LIST
31535: LIST
31536: LIST
31537: LIST
31538: LIST
31539: IN
31540: ST_TO_ADDR
// end ;
31541: LD_VAR 0 2
31545: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
31546: LD_INT 0
31548: PPUSH
31549: PPUSH
31550: PPUSH
// result := [ ] ;
31551: LD_ADDR_VAR 0 4
31555: PUSH
31556: EMPTY
31557: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
31558: LD_ADDR_VAR 0 5
31562: PUSH
31563: LD_VAR 0 2
31567: PPUSH
31568: LD_INT 21
31570: PUSH
31571: LD_INT 3
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PPUSH
31578: CALL_OW 70
31582: ST_TO_ADDR
// if not tmp then
31583: LD_VAR 0 5
31587: NOT
31588: IFFALSE 31592
// exit ;
31590: GO 31656
// if checkLink then
31592: LD_VAR 0 3
31596: IFFALSE 31646
// begin for i in tmp do
31598: LD_ADDR_VAR 0 6
31602: PUSH
31603: LD_VAR 0 5
31607: PUSH
31608: FOR_IN
31609: IFFALSE 31644
// if GetBase ( i ) <> base then
31611: LD_VAR 0 6
31615: PPUSH
31616: CALL_OW 274
31620: PUSH
31621: LD_VAR 0 1
31625: NONEQUAL
31626: IFFALSE 31642
// ComLinkToBase ( base , i ) ;
31628: LD_VAR 0 1
31632: PPUSH
31633: LD_VAR 0 6
31637: PPUSH
31638: CALL_OW 169
31642: GO 31608
31644: POP
31645: POP
// end ; result := tmp ;
31646: LD_ADDR_VAR 0 4
31650: PUSH
31651: LD_VAR 0 5
31655: ST_TO_ADDR
// end ;
31656: LD_VAR 0 4
31660: RET
// export function ComComplete ( units , b ) ; var i ; begin
31661: LD_INT 0
31663: PPUSH
31664: PPUSH
// if not units then
31665: LD_VAR 0 1
31669: NOT
31670: IFFALSE 31674
// exit ;
31672: GO 31764
// for i in units do
31674: LD_ADDR_VAR 0 4
31678: PUSH
31679: LD_VAR 0 1
31683: PUSH
31684: FOR_IN
31685: IFFALSE 31762
// if BuildingStatus ( b ) = bs_build then
31687: LD_VAR 0 2
31691: PPUSH
31692: CALL_OW 461
31696: PUSH
31697: LD_INT 1
31699: EQUAL
31700: IFFALSE 31760
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
31702: LD_VAR 0 4
31706: PPUSH
31707: LD_STRING h
31709: PUSH
31710: LD_VAR 0 2
31714: PPUSH
31715: CALL_OW 250
31719: PUSH
31720: LD_VAR 0 2
31724: PPUSH
31725: CALL_OW 251
31729: PUSH
31730: LD_VAR 0 2
31734: PUSH
31735: LD_INT 0
31737: PUSH
31738: LD_INT 0
31740: PUSH
31741: LD_INT 0
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: LIST
31748: LIST
31749: LIST
31750: LIST
31751: LIST
31752: PUSH
31753: EMPTY
31754: LIST
31755: PPUSH
31756: CALL_OW 446
31760: GO 31684
31762: POP
31763: POP
// end ;
31764: LD_VAR 0 3
31768: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
31769: LD_INT 0
31771: PPUSH
31772: PPUSH
31773: PPUSH
31774: PPUSH
31775: PPUSH
31776: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
31777: LD_VAR 0 1
31781: NOT
31782: PUSH
31783: LD_VAR 0 1
31787: PPUSH
31788: CALL_OW 263
31792: PUSH
31793: LD_INT 2
31795: NONEQUAL
31796: OR
31797: IFFALSE 31801
// exit ;
31799: GO 32117
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
31801: LD_ADDR_VAR 0 6
31805: PUSH
31806: LD_INT 22
31808: PUSH
31809: LD_VAR 0 1
31813: PPUSH
31814: CALL_OW 255
31818: PUSH
31819: EMPTY
31820: LIST
31821: LIST
31822: PUSH
31823: LD_INT 2
31825: PUSH
31826: LD_INT 30
31828: PUSH
31829: LD_INT 36
31831: PUSH
31832: EMPTY
31833: LIST
31834: LIST
31835: PUSH
31836: LD_INT 34
31838: PUSH
31839: LD_INT 31
31841: PUSH
31842: EMPTY
31843: LIST
31844: LIST
31845: PUSH
31846: EMPTY
31847: LIST
31848: LIST
31849: LIST
31850: PUSH
31851: EMPTY
31852: LIST
31853: LIST
31854: PPUSH
31855: CALL_OW 69
31859: ST_TO_ADDR
// if not tmp then
31860: LD_VAR 0 6
31864: NOT
31865: IFFALSE 31869
// exit ;
31867: GO 32117
// result := [ ] ;
31869: LD_ADDR_VAR 0 2
31873: PUSH
31874: EMPTY
31875: ST_TO_ADDR
// for i in tmp do
31876: LD_ADDR_VAR 0 3
31880: PUSH
31881: LD_VAR 0 6
31885: PUSH
31886: FOR_IN
31887: IFFALSE 31958
// begin t := UnitsInside ( i ) ;
31889: LD_ADDR_VAR 0 4
31893: PUSH
31894: LD_VAR 0 3
31898: PPUSH
31899: CALL_OW 313
31903: ST_TO_ADDR
// if t then
31904: LD_VAR 0 4
31908: IFFALSE 31956
// for j in t do
31910: LD_ADDR_VAR 0 7
31914: PUSH
31915: LD_VAR 0 4
31919: PUSH
31920: FOR_IN
31921: IFFALSE 31954
// result := Replace ( result , result + 1 , j ) ;
31923: LD_ADDR_VAR 0 2
31927: PUSH
31928: LD_VAR 0 2
31932: PPUSH
31933: LD_VAR 0 2
31937: PUSH
31938: LD_INT 1
31940: PLUS
31941: PPUSH
31942: LD_VAR 0 7
31946: PPUSH
31947: CALL_OW 1
31951: ST_TO_ADDR
31952: GO 31920
31954: POP
31955: POP
// end ;
31956: GO 31886
31958: POP
31959: POP
// if not result then
31960: LD_VAR 0 2
31964: NOT
31965: IFFALSE 31969
// exit ;
31967: GO 32117
// mech := result [ 1 ] ;
31969: LD_ADDR_VAR 0 5
31973: PUSH
31974: LD_VAR 0 2
31978: PUSH
31979: LD_INT 1
31981: ARRAY
31982: ST_TO_ADDR
// if result > 1 then
31983: LD_VAR 0 2
31987: PUSH
31988: LD_INT 1
31990: GREATER
31991: IFFALSE 32103
// begin for i = 2 to result do
31993: LD_ADDR_VAR 0 3
31997: PUSH
31998: DOUBLE
31999: LD_INT 2
32001: DEC
32002: ST_TO_ADDR
32003: LD_VAR 0 2
32007: PUSH
32008: FOR_TO
32009: IFFALSE 32101
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
32011: LD_ADDR_VAR 0 4
32015: PUSH
32016: LD_VAR 0 2
32020: PUSH
32021: LD_VAR 0 3
32025: ARRAY
32026: PPUSH
32027: LD_INT 3
32029: PPUSH
32030: CALL_OW 259
32034: PUSH
32035: LD_VAR 0 2
32039: PUSH
32040: LD_VAR 0 3
32044: ARRAY
32045: PPUSH
32046: CALL_OW 432
32050: MINUS
32051: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
32052: LD_VAR 0 4
32056: PUSH
32057: LD_VAR 0 5
32061: PPUSH
32062: LD_INT 3
32064: PPUSH
32065: CALL_OW 259
32069: PUSH
32070: LD_VAR 0 5
32074: PPUSH
32075: CALL_OW 432
32079: MINUS
32080: GREATEREQUAL
32081: IFFALSE 32099
// mech := result [ i ] ;
32083: LD_ADDR_VAR 0 5
32087: PUSH
32088: LD_VAR 0 2
32092: PUSH
32093: LD_VAR 0 3
32097: ARRAY
32098: ST_TO_ADDR
// end ;
32099: GO 32008
32101: POP
32102: POP
// end ; ComLinkTo ( vehicle , mech ) ;
32103: LD_VAR 0 1
32107: PPUSH
32108: LD_VAR 0 5
32112: PPUSH
32113: CALL_OW 135
// end ;
32117: LD_VAR 0 2
32121: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
32122: LD_INT 0
32124: PPUSH
32125: PPUSH
32126: PPUSH
32127: PPUSH
32128: PPUSH
32129: PPUSH
32130: PPUSH
32131: PPUSH
32132: PPUSH
32133: PPUSH
32134: PPUSH
32135: PPUSH
32136: PPUSH
// result := [ ] ;
32137: LD_ADDR_VAR 0 7
32141: PUSH
32142: EMPTY
32143: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
32144: LD_VAR 0 1
32148: PPUSH
32149: CALL_OW 266
32153: PUSH
32154: LD_INT 0
32156: PUSH
32157: LD_INT 1
32159: PUSH
32160: EMPTY
32161: LIST
32162: LIST
32163: IN
32164: NOT
32165: IFFALSE 32169
// exit ;
32167: GO 33803
// if name then
32169: LD_VAR 0 3
32173: IFFALSE 32189
// SetBName ( base_dep , name ) ;
32175: LD_VAR 0 1
32179: PPUSH
32180: LD_VAR 0 3
32184: PPUSH
32185: CALL_OW 500
// base := GetBase ( base_dep ) ;
32189: LD_ADDR_VAR 0 15
32193: PUSH
32194: LD_VAR 0 1
32198: PPUSH
32199: CALL_OW 274
32203: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
32204: LD_ADDR_VAR 0 16
32208: PUSH
32209: LD_VAR 0 1
32213: PPUSH
32214: CALL_OW 255
32218: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
32219: LD_ADDR_VAR 0 17
32223: PUSH
32224: LD_VAR 0 1
32228: PPUSH
32229: CALL_OW 248
32233: ST_TO_ADDR
// if sources then
32234: LD_VAR 0 5
32238: IFFALSE 32285
// for i = 1 to 3 do
32240: LD_ADDR_VAR 0 8
32244: PUSH
32245: DOUBLE
32246: LD_INT 1
32248: DEC
32249: ST_TO_ADDR
32250: LD_INT 3
32252: PUSH
32253: FOR_TO
32254: IFFALSE 32283
// AddResourceType ( base , i , sources [ i ] ) ;
32256: LD_VAR 0 15
32260: PPUSH
32261: LD_VAR 0 8
32265: PPUSH
32266: LD_VAR 0 5
32270: PUSH
32271: LD_VAR 0 8
32275: ARRAY
32276: PPUSH
32277: CALL_OW 276
32281: GO 32253
32283: POP
32284: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
32285: LD_ADDR_VAR 0 18
32289: PUSH
32290: LD_VAR 0 15
32294: PPUSH
32295: LD_VAR 0 2
32299: PPUSH
32300: LD_INT 1
32302: PPUSH
32303: CALL 31546 0 3
32307: ST_TO_ADDR
// InitHc ;
32308: CALL_OW 19
// InitUc ;
32312: CALL_OW 18
// uc_side := side ;
32316: LD_ADDR_OWVAR 20
32320: PUSH
32321: LD_VAR 0 16
32325: ST_TO_ADDR
// uc_nation := nation ;
32326: LD_ADDR_OWVAR 21
32330: PUSH
32331: LD_VAR 0 17
32335: ST_TO_ADDR
// if buildings then
32336: LD_VAR 0 18
32340: IFFALSE 33662
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
32342: LD_ADDR_VAR 0 19
32346: PUSH
32347: LD_VAR 0 18
32351: PPUSH
32352: LD_INT 2
32354: PUSH
32355: LD_INT 30
32357: PUSH
32358: LD_INT 29
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: PUSH
32365: LD_INT 30
32367: PUSH
32368: LD_INT 30
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: LIST
32379: PPUSH
32380: CALL_OW 72
32384: ST_TO_ADDR
// if tmp then
32385: LD_VAR 0 19
32389: IFFALSE 32437
// for i in tmp do
32391: LD_ADDR_VAR 0 8
32395: PUSH
32396: LD_VAR 0 19
32400: PUSH
32401: FOR_IN
32402: IFFALSE 32435
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
32404: LD_VAR 0 8
32408: PPUSH
32409: CALL_OW 250
32413: PPUSH
32414: LD_VAR 0 8
32418: PPUSH
32419: CALL_OW 251
32423: PPUSH
32424: LD_VAR 0 16
32428: PPUSH
32429: CALL_OW 441
32433: GO 32401
32435: POP
32436: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
32437: LD_VAR 0 18
32441: PPUSH
32442: LD_INT 2
32444: PUSH
32445: LD_INT 30
32447: PUSH
32448: LD_INT 32
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: PUSH
32455: LD_INT 30
32457: PUSH
32458: LD_INT 33
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: LIST
32469: PPUSH
32470: CALL_OW 72
32474: IFFALSE 32562
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
32476: LD_ADDR_VAR 0 8
32480: PUSH
32481: LD_VAR 0 18
32485: PPUSH
32486: LD_INT 2
32488: PUSH
32489: LD_INT 30
32491: PUSH
32492: LD_INT 32
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: PUSH
32499: LD_INT 30
32501: PUSH
32502: LD_INT 33
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: PUSH
32509: EMPTY
32510: LIST
32511: LIST
32512: LIST
32513: PPUSH
32514: CALL_OW 72
32518: PUSH
32519: FOR_IN
32520: IFFALSE 32560
// begin if not GetBWeapon ( i ) then
32522: LD_VAR 0 8
32526: PPUSH
32527: CALL_OW 269
32531: NOT
32532: IFFALSE 32558
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
32534: LD_VAR 0 8
32538: PPUSH
32539: LD_VAR 0 8
32543: PPUSH
32544: LD_VAR 0 2
32548: PPUSH
32549: CALL 33808 0 2
32553: PPUSH
32554: CALL_OW 431
// end ;
32558: GO 32519
32560: POP
32561: POP
// end ; for i = 1 to personel do
32562: LD_ADDR_VAR 0 8
32566: PUSH
32567: DOUBLE
32568: LD_INT 1
32570: DEC
32571: ST_TO_ADDR
32572: LD_VAR 0 6
32576: PUSH
32577: FOR_TO
32578: IFFALSE 33642
// begin if i > 4 then
32580: LD_VAR 0 8
32584: PUSH
32585: LD_INT 4
32587: GREATER
32588: IFFALSE 32592
// break ;
32590: GO 33642
// case i of 1 :
32592: LD_VAR 0 8
32596: PUSH
32597: LD_INT 1
32599: DOUBLE
32600: EQUAL
32601: IFTRUE 32605
32603: GO 32685
32605: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
32606: LD_ADDR_VAR 0 12
32610: PUSH
32611: LD_VAR 0 18
32615: PPUSH
32616: LD_INT 22
32618: PUSH
32619: LD_VAR 0 16
32623: PUSH
32624: EMPTY
32625: LIST
32626: LIST
32627: PUSH
32628: LD_INT 58
32630: PUSH
32631: EMPTY
32632: LIST
32633: PUSH
32634: LD_INT 2
32636: PUSH
32637: LD_INT 30
32639: PUSH
32640: LD_INT 32
32642: PUSH
32643: EMPTY
32644: LIST
32645: LIST
32646: PUSH
32647: LD_INT 30
32649: PUSH
32650: LD_INT 4
32652: PUSH
32653: EMPTY
32654: LIST
32655: LIST
32656: PUSH
32657: LD_INT 30
32659: PUSH
32660: LD_INT 5
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: PUSH
32667: EMPTY
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: PUSH
32673: EMPTY
32674: LIST
32675: LIST
32676: LIST
32677: PPUSH
32678: CALL_OW 72
32682: ST_TO_ADDR
32683: GO 32907
32685: LD_INT 2
32687: DOUBLE
32688: EQUAL
32689: IFTRUE 32693
32691: GO 32755
32693: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
32694: LD_ADDR_VAR 0 12
32698: PUSH
32699: LD_VAR 0 18
32703: PPUSH
32704: LD_INT 22
32706: PUSH
32707: LD_VAR 0 16
32711: PUSH
32712: EMPTY
32713: LIST
32714: LIST
32715: PUSH
32716: LD_INT 2
32718: PUSH
32719: LD_INT 30
32721: PUSH
32722: LD_INT 0
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: PUSH
32729: LD_INT 30
32731: PUSH
32732: LD_INT 1
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: PUSH
32739: EMPTY
32740: LIST
32741: LIST
32742: LIST
32743: PUSH
32744: EMPTY
32745: LIST
32746: LIST
32747: PPUSH
32748: CALL_OW 72
32752: ST_TO_ADDR
32753: GO 32907
32755: LD_INT 3
32757: DOUBLE
32758: EQUAL
32759: IFTRUE 32763
32761: GO 32825
32763: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
32764: LD_ADDR_VAR 0 12
32768: PUSH
32769: LD_VAR 0 18
32773: PPUSH
32774: LD_INT 22
32776: PUSH
32777: LD_VAR 0 16
32781: PUSH
32782: EMPTY
32783: LIST
32784: LIST
32785: PUSH
32786: LD_INT 2
32788: PUSH
32789: LD_INT 30
32791: PUSH
32792: LD_INT 2
32794: PUSH
32795: EMPTY
32796: LIST
32797: LIST
32798: PUSH
32799: LD_INT 30
32801: PUSH
32802: LD_INT 3
32804: PUSH
32805: EMPTY
32806: LIST
32807: LIST
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: LIST
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PPUSH
32818: CALL_OW 72
32822: ST_TO_ADDR
32823: GO 32907
32825: LD_INT 4
32827: DOUBLE
32828: EQUAL
32829: IFTRUE 32833
32831: GO 32906
32833: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
32834: LD_ADDR_VAR 0 12
32838: PUSH
32839: LD_VAR 0 18
32843: PPUSH
32844: LD_INT 22
32846: PUSH
32847: LD_VAR 0 16
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: PUSH
32856: LD_INT 2
32858: PUSH
32859: LD_INT 30
32861: PUSH
32862: LD_INT 6
32864: PUSH
32865: EMPTY
32866: LIST
32867: LIST
32868: PUSH
32869: LD_INT 30
32871: PUSH
32872: LD_INT 7
32874: PUSH
32875: EMPTY
32876: LIST
32877: LIST
32878: PUSH
32879: LD_INT 30
32881: PUSH
32882: LD_INT 8
32884: PUSH
32885: EMPTY
32886: LIST
32887: LIST
32888: PUSH
32889: EMPTY
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: PUSH
32895: EMPTY
32896: LIST
32897: LIST
32898: PPUSH
32899: CALL_OW 72
32903: ST_TO_ADDR
32904: GO 32907
32906: POP
// if i = 1 then
32907: LD_VAR 0 8
32911: PUSH
32912: LD_INT 1
32914: EQUAL
32915: IFFALSE 33026
// begin tmp := [ ] ;
32917: LD_ADDR_VAR 0 19
32921: PUSH
32922: EMPTY
32923: ST_TO_ADDR
// for j in f do
32924: LD_ADDR_VAR 0 9
32928: PUSH
32929: LD_VAR 0 12
32933: PUSH
32934: FOR_IN
32935: IFFALSE 33008
// if GetBType ( j ) = b_bunker then
32937: LD_VAR 0 9
32941: PPUSH
32942: CALL_OW 266
32946: PUSH
32947: LD_INT 32
32949: EQUAL
32950: IFFALSE 32977
// tmp := Insert ( tmp , 1 , j ) else
32952: LD_ADDR_VAR 0 19
32956: PUSH
32957: LD_VAR 0 19
32961: PPUSH
32962: LD_INT 1
32964: PPUSH
32965: LD_VAR 0 9
32969: PPUSH
32970: CALL_OW 2
32974: ST_TO_ADDR
32975: GO 33006
// tmp := Insert ( tmp , tmp + 1 , j ) ;
32977: LD_ADDR_VAR 0 19
32981: PUSH
32982: LD_VAR 0 19
32986: PPUSH
32987: LD_VAR 0 19
32991: PUSH
32992: LD_INT 1
32994: PLUS
32995: PPUSH
32996: LD_VAR 0 9
33000: PPUSH
33001: CALL_OW 2
33005: ST_TO_ADDR
33006: GO 32934
33008: POP
33009: POP
// if tmp then
33010: LD_VAR 0 19
33014: IFFALSE 33026
// f := tmp ;
33016: LD_ADDR_VAR 0 12
33020: PUSH
33021: LD_VAR 0 19
33025: ST_TO_ADDR
// end ; x := personel [ i ] ;
33026: LD_ADDR_VAR 0 13
33030: PUSH
33031: LD_VAR 0 6
33035: PUSH
33036: LD_VAR 0 8
33040: ARRAY
33041: ST_TO_ADDR
// if x = - 1 then
33042: LD_VAR 0 13
33046: PUSH
33047: LD_INT 1
33049: NEG
33050: EQUAL
33051: IFFALSE 33260
// begin for j in f do
33053: LD_ADDR_VAR 0 9
33057: PUSH
33058: LD_VAR 0 12
33062: PUSH
33063: FOR_IN
33064: IFFALSE 33256
// repeat InitHc ;
33066: CALL_OW 19
// if GetBType ( j ) = b_barracks then
33070: LD_VAR 0 9
33074: PPUSH
33075: CALL_OW 266
33079: PUSH
33080: LD_INT 5
33082: EQUAL
33083: IFFALSE 33153
// begin if UnitsInside ( j ) < 3 then
33085: LD_VAR 0 9
33089: PPUSH
33090: CALL_OW 313
33094: PUSH
33095: LD_INT 3
33097: LESS
33098: IFFALSE 33134
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33100: LD_INT 0
33102: PPUSH
33103: LD_INT 5
33105: PUSH
33106: LD_INT 8
33108: PUSH
33109: LD_INT 9
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: LIST
33116: PUSH
33117: LD_VAR 0 17
33121: ARRAY
33122: PPUSH
33123: LD_VAR 0 4
33127: PPUSH
33128: CALL_OW 380
33132: GO 33151
// PrepareHuman ( false , i , skill ) ;
33134: LD_INT 0
33136: PPUSH
33137: LD_VAR 0 8
33141: PPUSH
33142: LD_VAR 0 4
33146: PPUSH
33147: CALL_OW 380
// end else
33151: GO 33170
// PrepareHuman ( false , i , skill ) ;
33153: LD_INT 0
33155: PPUSH
33156: LD_VAR 0 8
33160: PPUSH
33161: LD_VAR 0 4
33165: PPUSH
33166: CALL_OW 380
// un := CreateHuman ;
33170: LD_ADDR_VAR 0 14
33174: PUSH
33175: CALL_OW 44
33179: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33180: LD_ADDR_VAR 0 7
33184: PUSH
33185: LD_VAR 0 7
33189: PPUSH
33190: LD_INT 1
33192: PPUSH
33193: LD_VAR 0 14
33197: PPUSH
33198: CALL_OW 2
33202: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
33203: LD_VAR 0 14
33207: PPUSH
33208: LD_VAR 0 9
33212: PPUSH
33213: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
33217: LD_VAR 0 9
33221: PPUSH
33222: CALL_OW 313
33226: PUSH
33227: LD_INT 6
33229: EQUAL
33230: PUSH
33231: LD_VAR 0 9
33235: PPUSH
33236: CALL_OW 266
33240: PUSH
33241: LD_INT 32
33243: PUSH
33244: LD_INT 31
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: IN
33251: OR
33252: IFFALSE 33066
33254: GO 33063
33256: POP
33257: POP
// end else
33258: GO 33640
// for j = 1 to x do
33260: LD_ADDR_VAR 0 9
33264: PUSH
33265: DOUBLE
33266: LD_INT 1
33268: DEC
33269: ST_TO_ADDR
33270: LD_VAR 0 13
33274: PUSH
33275: FOR_TO
33276: IFFALSE 33638
// begin InitHc ;
33278: CALL_OW 19
// if not f then
33282: LD_VAR 0 12
33286: NOT
33287: IFFALSE 33376
// begin PrepareHuman ( false , i , skill ) ;
33289: LD_INT 0
33291: PPUSH
33292: LD_VAR 0 8
33296: PPUSH
33297: LD_VAR 0 4
33301: PPUSH
33302: CALL_OW 380
// un := CreateHuman ;
33306: LD_ADDR_VAR 0 14
33310: PUSH
33311: CALL_OW 44
33315: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33316: LD_ADDR_VAR 0 7
33320: PUSH
33321: LD_VAR 0 7
33325: PPUSH
33326: LD_INT 1
33328: PPUSH
33329: LD_VAR 0 14
33333: PPUSH
33334: CALL_OW 2
33338: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33339: LD_VAR 0 14
33343: PPUSH
33344: LD_VAR 0 1
33348: PPUSH
33349: CALL_OW 250
33353: PPUSH
33354: LD_VAR 0 1
33358: PPUSH
33359: CALL_OW 251
33363: PPUSH
33364: LD_INT 10
33366: PPUSH
33367: LD_INT 0
33369: PPUSH
33370: CALL_OW 50
// continue ;
33374: GO 33275
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
33376: LD_VAR 0 12
33380: PUSH
33381: LD_INT 1
33383: ARRAY
33384: PPUSH
33385: CALL_OW 313
33389: PUSH
33390: LD_VAR 0 12
33394: PUSH
33395: LD_INT 1
33397: ARRAY
33398: PPUSH
33399: CALL_OW 266
33403: PUSH
33404: LD_INT 32
33406: PUSH
33407: LD_INT 31
33409: PUSH
33410: EMPTY
33411: LIST
33412: LIST
33413: IN
33414: AND
33415: PUSH
33416: LD_VAR 0 12
33420: PUSH
33421: LD_INT 1
33423: ARRAY
33424: PPUSH
33425: CALL_OW 313
33429: PUSH
33430: LD_INT 6
33432: EQUAL
33433: OR
33434: IFFALSE 33454
// f := Delete ( f , 1 ) ;
33436: LD_ADDR_VAR 0 12
33440: PUSH
33441: LD_VAR 0 12
33445: PPUSH
33446: LD_INT 1
33448: PPUSH
33449: CALL_OW 3
33453: ST_TO_ADDR
// if not f then
33454: LD_VAR 0 12
33458: NOT
33459: IFFALSE 33477
// begin x := x + 2 ;
33461: LD_ADDR_VAR 0 13
33465: PUSH
33466: LD_VAR 0 13
33470: PUSH
33471: LD_INT 2
33473: PLUS
33474: ST_TO_ADDR
// continue ;
33475: GO 33275
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
33477: LD_VAR 0 12
33481: PUSH
33482: LD_INT 1
33484: ARRAY
33485: PPUSH
33486: CALL_OW 266
33490: PUSH
33491: LD_INT 5
33493: EQUAL
33494: IFFALSE 33568
// begin if UnitsInside ( f [ 1 ] ) < 3 then
33496: LD_VAR 0 12
33500: PUSH
33501: LD_INT 1
33503: ARRAY
33504: PPUSH
33505: CALL_OW 313
33509: PUSH
33510: LD_INT 3
33512: LESS
33513: IFFALSE 33549
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33515: LD_INT 0
33517: PPUSH
33518: LD_INT 5
33520: PUSH
33521: LD_INT 8
33523: PUSH
33524: LD_INT 9
33526: PUSH
33527: EMPTY
33528: LIST
33529: LIST
33530: LIST
33531: PUSH
33532: LD_VAR 0 17
33536: ARRAY
33537: PPUSH
33538: LD_VAR 0 4
33542: PPUSH
33543: CALL_OW 380
33547: GO 33566
// PrepareHuman ( false , i , skill ) ;
33549: LD_INT 0
33551: PPUSH
33552: LD_VAR 0 8
33556: PPUSH
33557: LD_VAR 0 4
33561: PPUSH
33562: CALL_OW 380
// end else
33566: GO 33585
// PrepareHuman ( false , i , skill ) ;
33568: LD_INT 0
33570: PPUSH
33571: LD_VAR 0 8
33575: PPUSH
33576: LD_VAR 0 4
33580: PPUSH
33581: CALL_OW 380
// un := CreateHuman ;
33585: LD_ADDR_VAR 0 14
33589: PUSH
33590: CALL_OW 44
33594: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33595: LD_ADDR_VAR 0 7
33599: PUSH
33600: LD_VAR 0 7
33604: PPUSH
33605: LD_INT 1
33607: PPUSH
33608: LD_VAR 0 14
33612: PPUSH
33613: CALL_OW 2
33617: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
33618: LD_VAR 0 14
33622: PPUSH
33623: LD_VAR 0 12
33627: PUSH
33628: LD_INT 1
33630: ARRAY
33631: PPUSH
33632: CALL_OW 52
// end ;
33636: GO 33275
33638: POP
33639: POP
// end ;
33640: GO 32577
33642: POP
33643: POP
// result := result ^ buildings ;
33644: LD_ADDR_VAR 0 7
33648: PUSH
33649: LD_VAR 0 7
33653: PUSH
33654: LD_VAR 0 18
33658: ADD
33659: ST_TO_ADDR
// end else
33660: GO 33803
// begin for i = 1 to personel do
33662: LD_ADDR_VAR 0 8
33666: PUSH
33667: DOUBLE
33668: LD_INT 1
33670: DEC
33671: ST_TO_ADDR
33672: LD_VAR 0 6
33676: PUSH
33677: FOR_TO
33678: IFFALSE 33801
// begin if i > 4 then
33680: LD_VAR 0 8
33684: PUSH
33685: LD_INT 4
33687: GREATER
33688: IFFALSE 33692
// break ;
33690: GO 33801
// x := personel [ i ] ;
33692: LD_ADDR_VAR 0 13
33696: PUSH
33697: LD_VAR 0 6
33701: PUSH
33702: LD_VAR 0 8
33706: ARRAY
33707: ST_TO_ADDR
// if x = - 1 then
33708: LD_VAR 0 13
33712: PUSH
33713: LD_INT 1
33715: NEG
33716: EQUAL
33717: IFFALSE 33721
// continue ;
33719: GO 33677
// PrepareHuman ( false , i , skill ) ;
33721: LD_INT 0
33723: PPUSH
33724: LD_VAR 0 8
33728: PPUSH
33729: LD_VAR 0 4
33733: PPUSH
33734: CALL_OW 380
// un := CreateHuman ;
33738: LD_ADDR_VAR 0 14
33742: PUSH
33743: CALL_OW 44
33747: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33748: LD_VAR 0 14
33752: PPUSH
33753: LD_VAR 0 1
33757: PPUSH
33758: CALL_OW 250
33762: PPUSH
33763: LD_VAR 0 1
33767: PPUSH
33768: CALL_OW 251
33772: PPUSH
33773: LD_INT 10
33775: PPUSH
33776: LD_INT 0
33778: PPUSH
33779: CALL_OW 50
// result := result ^ un ;
33783: LD_ADDR_VAR 0 7
33787: PUSH
33788: LD_VAR 0 7
33792: PUSH
33793: LD_VAR 0 14
33797: ADD
33798: ST_TO_ADDR
// end ;
33799: GO 33677
33801: POP
33802: POP
// end ; end ;
33803: LD_VAR 0 7
33807: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
33808: LD_INT 0
33810: PPUSH
33811: PPUSH
33812: PPUSH
33813: PPUSH
33814: PPUSH
33815: PPUSH
33816: PPUSH
33817: PPUSH
33818: PPUSH
33819: PPUSH
33820: PPUSH
33821: PPUSH
33822: PPUSH
33823: PPUSH
33824: PPUSH
33825: PPUSH
// result := false ;
33826: LD_ADDR_VAR 0 3
33830: PUSH
33831: LD_INT 0
33833: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
33834: LD_VAR 0 1
33838: NOT
33839: PUSH
33840: LD_VAR 0 1
33844: PPUSH
33845: CALL_OW 266
33849: PUSH
33850: LD_INT 32
33852: PUSH
33853: LD_INT 33
33855: PUSH
33856: EMPTY
33857: LIST
33858: LIST
33859: IN
33860: NOT
33861: OR
33862: IFFALSE 33866
// exit ;
33864: GO 34975
// nat := GetNation ( tower ) ;
33866: LD_ADDR_VAR 0 12
33870: PUSH
33871: LD_VAR 0 1
33875: PPUSH
33876: CALL_OW 248
33880: ST_TO_ADDR
// side := GetSide ( tower ) ;
33881: LD_ADDR_VAR 0 16
33885: PUSH
33886: LD_VAR 0 1
33890: PPUSH
33891: CALL_OW 255
33895: ST_TO_ADDR
// x := GetX ( tower ) ;
33896: LD_ADDR_VAR 0 10
33900: PUSH
33901: LD_VAR 0 1
33905: PPUSH
33906: CALL_OW 250
33910: ST_TO_ADDR
// y := GetY ( tower ) ;
33911: LD_ADDR_VAR 0 11
33915: PUSH
33916: LD_VAR 0 1
33920: PPUSH
33921: CALL_OW 251
33925: ST_TO_ADDR
// if not x or not y then
33926: LD_VAR 0 10
33930: NOT
33931: PUSH
33932: LD_VAR 0 11
33936: NOT
33937: OR
33938: IFFALSE 33942
// exit ;
33940: GO 34975
// weapon := 0 ;
33942: LD_ADDR_VAR 0 18
33946: PUSH
33947: LD_INT 0
33949: ST_TO_ADDR
// fac_list := [ ] ;
33950: LD_ADDR_VAR 0 17
33954: PUSH
33955: EMPTY
33956: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
33957: LD_ADDR_VAR 0 6
33961: PUSH
33962: LD_VAR 0 1
33966: PPUSH
33967: CALL_OW 274
33971: PPUSH
33972: LD_VAR 0 2
33976: PPUSH
33977: LD_INT 0
33979: PPUSH
33980: CALL 31546 0 3
33984: PPUSH
33985: LD_INT 30
33987: PUSH
33988: LD_INT 3
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: PPUSH
33995: CALL_OW 72
33999: ST_TO_ADDR
// if not factories then
34000: LD_VAR 0 6
34004: NOT
34005: IFFALSE 34009
// exit ;
34007: GO 34975
// for i in factories do
34009: LD_ADDR_VAR 0 8
34013: PUSH
34014: LD_VAR 0 6
34018: PUSH
34019: FOR_IN
34020: IFFALSE 34045
// fac_list := fac_list union AvailableWeaponList ( i ) ;
34022: LD_ADDR_VAR 0 17
34026: PUSH
34027: LD_VAR 0 17
34031: PUSH
34032: LD_VAR 0 8
34036: PPUSH
34037: CALL_OW 478
34041: UNION
34042: ST_TO_ADDR
34043: GO 34019
34045: POP
34046: POP
// if not fac_list then
34047: LD_VAR 0 17
34051: NOT
34052: IFFALSE 34056
// exit ;
34054: GO 34975
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
34056: LD_ADDR_VAR 0 5
34060: PUSH
34061: LD_INT 4
34063: PUSH
34064: LD_INT 5
34066: PUSH
34067: LD_INT 9
34069: PUSH
34070: LD_INT 10
34072: PUSH
34073: LD_INT 6
34075: PUSH
34076: LD_INT 7
34078: PUSH
34079: LD_INT 11
34081: PUSH
34082: EMPTY
34083: LIST
34084: LIST
34085: LIST
34086: LIST
34087: LIST
34088: LIST
34089: LIST
34090: PUSH
34091: LD_INT 27
34093: PUSH
34094: LD_INT 28
34096: PUSH
34097: LD_INT 26
34099: PUSH
34100: LD_INT 30
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: LIST
34107: LIST
34108: PUSH
34109: LD_INT 43
34111: PUSH
34112: LD_INT 44
34114: PUSH
34115: LD_INT 46
34117: PUSH
34118: LD_INT 45
34120: PUSH
34121: LD_INT 47
34123: PUSH
34124: LD_INT 49
34126: PUSH
34127: EMPTY
34128: LIST
34129: LIST
34130: LIST
34131: LIST
34132: LIST
34133: LIST
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: LIST
34139: PUSH
34140: LD_VAR 0 12
34144: ARRAY
34145: ST_TO_ADDR
// list := list isect fac_list ;
34146: LD_ADDR_VAR 0 5
34150: PUSH
34151: LD_VAR 0 5
34155: PUSH
34156: LD_VAR 0 17
34160: ISECT
34161: ST_TO_ADDR
// if not list then
34162: LD_VAR 0 5
34166: NOT
34167: IFFALSE 34171
// exit ;
34169: GO 34975
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
34171: LD_VAR 0 12
34175: PUSH
34176: LD_INT 3
34178: EQUAL
34179: PUSH
34180: LD_INT 49
34182: PUSH
34183: LD_VAR 0 5
34187: IN
34188: AND
34189: PUSH
34190: LD_INT 31
34192: PPUSH
34193: LD_VAR 0 16
34197: PPUSH
34198: CALL_OW 321
34202: PUSH
34203: LD_INT 2
34205: EQUAL
34206: AND
34207: IFFALSE 34267
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
34209: LD_INT 22
34211: PUSH
34212: LD_VAR 0 16
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: PUSH
34221: LD_INT 35
34223: PUSH
34224: LD_INT 49
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: PUSH
34231: LD_INT 91
34233: PUSH
34234: LD_VAR 0 1
34238: PUSH
34239: LD_INT 10
34241: PUSH
34242: EMPTY
34243: LIST
34244: LIST
34245: LIST
34246: PUSH
34247: EMPTY
34248: LIST
34249: LIST
34250: LIST
34251: PPUSH
34252: CALL_OW 69
34256: NOT
34257: IFFALSE 34267
// weapon := ru_time_lapser ;
34259: LD_ADDR_VAR 0 18
34263: PUSH
34264: LD_INT 49
34266: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
34267: LD_VAR 0 12
34271: PUSH
34272: LD_INT 1
34274: PUSH
34275: LD_INT 2
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: IN
34282: PUSH
34283: LD_INT 11
34285: PUSH
34286: LD_VAR 0 5
34290: IN
34291: PUSH
34292: LD_INT 30
34294: PUSH
34295: LD_VAR 0 5
34299: IN
34300: OR
34301: AND
34302: PUSH
34303: LD_INT 6
34305: PPUSH
34306: LD_VAR 0 16
34310: PPUSH
34311: CALL_OW 321
34315: PUSH
34316: LD_INT 2
34318: EQUAL
34319: AND
34320: IFFALSE 34485
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
34322: LD_INT 22
34324: PUSH
34325: LD_VAR 0 16
34329: PUSH
34330: EMPTY
34331: LIST
34332: LIST
34333: PUSH
34334: LD_INT 2
34336: PUSH
34337: LD_INT 35
34339: PUSH
34340: LD_INT 11
34342: PUSH
34343: EMPTY
34344: LIST
34345: LIST
34346: PUSH
34347: LD_INT 35
34349: PUSH
34350: LD_INT 30
34352: PUSH
34353: EMPTY
34354: LIST
34355: LIST
34356: PUSH
34357: EMPTY
34358: LIST
34359: LIST
34360: LIST
34361: PUSH
34362: LD_INT 91
34364: PUSH
34365: LD_VAR 0 1
34369: PUSH
34370: LD_INT 18
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: LIST
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: LIST
34382: PPUSH
34383: CALL_OW 69
34387: NOT
34388: PUSH
34389: LD_INT 22
34391: PUSH
34392: LD_VAR 0 16
34396: PUSH
34397: EMPTY
34398: LIST
34399: LIST
34400: PUSH
34401: LD_INT 2
34403: PUSH
34404: LD_INT 30
34406: PUSH
34407: LD_INT 32
34409: PUSH
34410: EMPTY
34411: LIST
34412: LIST
34413: PUSH
34414: LD_INT 30
34416: PUSH
34417: LD_INT 33
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: LIST
34428: PUSH
34429: LD_INT 91
34431: PUSH
34432: LD_VAR 0 1
34436: PUSH
34437: LD_INT 12
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: LIST
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: LIST
34449: PUSH
34450: EMPTY
34451: LIST
34452: PPUSH
34453: CALL_OW 69
34457: PUSH
34458: LD_INT 2
34460: GREATER
34461: AND
34462: IFFALSE 34485
// weapon := [ us_radar , ar_radar ] [ nat ] ;
34464: LD_ADDR_VAR 0 18
34468: PUSH
34469: LD_INT 11
34471: PUSH
34472: LD_INT 30
34474: PUSH
34475: EMPTY
34476: LIST
34477: LIST
34478: PUSH
34479: LD_VAR 0 12
34483: ARRAY
34484: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
34485: LD_VAR 0 18
34489: NOT
34490: PUSH
34491: LD_INT 40
34493: PPUSH
34494: LD_VAR 0 16
34498: PPUSH
34499: CALL_OW 321
34503: PUSH
34504: LD_INT 2
34506: EQUAL
34507: AND
34508: PUSH
34509: LD_INT 7
34511: PUSH
34512: LD_VAR 0 5
34516: IN
34517: PUSH
34518: LD_INT 28
34520: PUSH
34521: LD_VAR 0 5
34525: IN
34526: OR
34527: PUSH
34528: LD_INT 45
34530: PUSH
34531: LD_VAR 0 5
34535: IN
34536: OR
34537: AND
34538: IFFALSE 34792
// begin hex := GetHexInfo ( x , y ) ;
34540: LD_ADDR_VAR 0 4
34544: PUSH
34545: LD_VAR 0 10
34549: PPUSH
34550: LD_VAR 0 11
34554: PPUSH
34555: CALL_OW 546
34559: ST_TO_ADDR
// if hex [ 1 ] then
34560: LD_VAR 0 4
34564: PUSH
34565: LD_INT 1
34567: ARRAY
34568: IFFALSE 34572
// exit ;
34570: GO 34975
// height := hex [ 2 ] ;
34572: LD_ADDR_VAR 0 15
34576: PUSH
34577: LD_VAR 0 4
34581: PUSH
34582: LD_INT 2
34584: ARRAY
34585: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
34586: LD_ADDR_VAR 0 14
34590: PUSH
34591: LD_INT 0
34593: PUSH
34594: LD_INT 2
34596: PUSH
34597: LD_INT 3
34599: PUSH
34600: LD_INT 5
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: LIST
34607: LIST
34608: ST_TO_ADDR
// for i in tmp do
34609: LD_ADDR_VAR 0 8
34613: PUSH
34614: LD_VAR 0 14
34618: PUSH
34619: FOR_IN
34620: IFFALSE 34790
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
34622: LD_ADDR_VAR 0 9
34626: PUSH
34627: LD_VAR 0 10
34631: PPUSH
34632: LD_VAR 0 8
34636: PPUSH
34637: LD_INT 5
34639: PPUSH
34640: CALL_OW 272
34644: PUSH
34645: LD_VAR 0 11
34649: PPUSH
34650: LD_VAR 0 8
34654: PPUSH
34655: LD_INT 5
34657: PPUSH
34658: CALL_OW 273
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
34667: LD_VAR 0 9
34671: PUSH
34672: LD_INT 1
34674: ARRAY
34675: PPUSH
34676: LD_VAR 0 9
34680: PUSH
34681: LD_INT 2
34683: ARRAY
34684: PPUSH
34685: CALL_OW 488
34689: IFFALSE 34788
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
34691: LD_ADDR_VAR 0 4
34695: PUSH
34696: LD_VAR 0 9
34700: PUSH
34701: LD_INT 1
34703: ARRAY
34704: PPUSH
34705: LD_VAR 0 9
34709: PUSH
34710: LD_INT 2
34712: ARRAY
34713: PPUSH
34714: CALL_OW 546
34718: ST_TO_ADDR
// if hex [ 1 ] then
34719: LD_VAR 0 4
34723: PUSH
34724: LD_INT 1
34726: ARRAY
34727: IFFALSE 34731
// continue ;
34729: GO 34619
// h := hex [ 2 ] ;
34731: LD_ADDR_VAR 0 13
34735: PUSH
34736: LD_VAR 0 4
34740: PUSH
34741: LD_INT 2
34743: ARRAY
34744: ST_TO_ADDR
// if h + 7 < height then
34745: LD_VAR 0 13
34749: PUSH
34750: LD_INT 7
34752: PLUS
34753: PUSH
34754: LD_VAR 0 15
34758: LESS
34759: IFFALSE 34788
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
34761: LD_ADDR_VAR 0 18
34765: PUSH
34766: LD_INT 7
34768: PUSH
34769: LD_INT 28
34771: PUSH
34772: LD_INT 45
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: LIST
34779: PUSH
34780: LD_VAR 0 12
34784: ARRAY
34785: ST_TO_ADDR
// break ;
34786: GO 34790
// end ; end ; end ;
34788: GO 34619
34790: POP
34791: POP
// end ; if not weapon then
34792: LD_VAR 0 18
34796: NOT
34797: IFFALSE 34857
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
34799: LD_ADDR_VAR 0 5
34803: PUSH
34804: LD_VAR 0 5
34808: PUSH
34809: LD_INT 11
34811: PUSH
34812: LD_INT 30
34814: PUSH
34815: LD_INT 49
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: LIST
34822: DIFF
34823: ST_TO_ADDR
// if not list then
34824: LD_VAR 0 5
34828: NOT
34829: IFFALSE 34833
// exit ;
34831: GO 34975
// weapon := list [ rand ( 1 , list ) ] ;
34833: LD_ADDR_VAR 0 18
34837: PUSH
34838: LD_VAR 0 5
34842: PUSH
34843: LD_INT 1
34845: PPUSH
34846: LD_VAR 0 5
34850: PPUSH
34851: CALL_OW 12
34855: ARRAY
34856: ST_TO_ADDR
// end ; if weapon then
34857: LD_VAR 0 18
34861: IFFALSE 34975
// begin tmp := CostOfWeapon ( weapon ) ;
34863: LD_ADDR_VAR 0 14
34867: PUSH
34868: LD_VAR 0 18
34872: PPUSH
34873: CALL_OW 451
34877: ST_TO_ADDR
// j := GetBase ( tower ) ;
34878: LD_ADDR_VAR 0 9
34882: PUSH
34883: LD_VAR 0 1
34887: PPUSH
34888: CALL_OW 274
34892: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
34893: LD_VAR 0 9
34897: PPUSH
34898: LD_INT 1
34900: PPUSH
34901: CALL_OW 275
34905: PUSH
34906: LD_VAR 0 14
34910: PUSH
34911: LD_INT 1
34913: ARRAY
34914: GREATEREQUAL
34915: PUSH
34916: LD_VAR 0 9
34920: PPUSH
34921: LD_INT 2
34923: PPUSH
34924: CALL_OW 275
34928: PUSH
34929: LD_VAR 0 14
34933: PUSH
34934: LD_INT 2
34936: ARRAY
34937: GREATEREQUAL
34938: AND
34939: PUSH
34940: LD_VAR 0 9
34944: PPUSH
34945: LD_INT 3
34947: PPUSH
34948: CALL_OW 275
34952: PUSH
34953: LD_VAR 0 14
34957: PUSH
34958: LD_INT 3
34960: ARRAY
34961: GREATEREQUAL
34962: AND
34963: IFFALSE 34975
// result := weapon ;
34965: LD_ADDR_VAR 0 3
34969: PUSH
34970: LD_VAR 0 18
34974: ST_TO_ADDR
// end ; end ;
34975: LD_VAR 0 3
34979: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
34980: LD_INT 0
34982: PPUSH
34983: PPUSH
// result := true ;
34984: LD_ADDR_VAR 0 3
34988: PUSH
34989: LD_INT 1
34991: ST_TO_ADDR
// if array1 = array2 then
34992: LD_VAR 0 1
34996: PUSH
34997: LD_VAR 0 2
35001: EQUAL
35002: IFFALSE 35062
// begin for i = 1 to array1 do
35004: LD_ADDR_VAR 0 4
35008: PUSH
35009: DOUBLE
35010: LD_INT 1
35012: DEC
35013: ST_TO_ADDR
35014: LD_VAR 0 1
35018: PUSH
35019: FOR_TO
35020: IFFALSE 35058
// if array1 [ i ] <> array2 [ i ] then
35022: LD_VAR 0 1
35026: PUSH
35027: LD_VAR 0 4
35031: ARRAY
35032: PUSH
35033: LD_VAR 0 2
35037: PUSH
35038: LD_VAR 0 4
35042: ARRAY
35043: NONEQUAL
35044: IFFALSE 35056
// begin result := false ;
35046: LD_ADDR_VAR 0 3
35050: PUSH
35051: LD_INT 0
35053: ST_TO_ADDR
// break ;
35054: GO 35058
// end ;
35056: GO 35019
35058: POP
35059: POP
// end else
35060: GO 35070
// result := false ;
35062: LD_ADDR_VAR 0 3
35066: PUSH
35067: LD_INT 0
35069: ST_TO_ADDR
// end ;
35070: LD_VAR 0 3
35074: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
35075: LD_INT 0
35077: PPUSH
35078: PPUSH
// if not array1 or not array2 then
35079: LD_VAR 0 1
35083: NOT
35084: PUSH
35085: LD_VAR 0 2
35089: NOT
35090: OR
35091: IFFALSE 35095
// exit ;
35093: GO 35159
// result := true ;
35095: LD_ADDR_VAR 0 3
35099: PUSH
35100: LD_INT 1
35102: ST_TO_ADDR
// for i = 1 to array1 do
35103: LD_ADDR_VAR 0 4
35107: PUSH
35108: DOUBLE
35109: LD_INT 1
35111: DEC
35112: ST_TO_ADDR
35113: LD_VAR 0 1
35117: PUSH
35118: FOR_TO
35119: IFFALSE 35157
// if array1 [ i ] <> array2 [ i ] then
35121: LD_VAR 0 1
35125: PUSH
35126: LD_VAR 0 4
35130: ARRAY
35131: PUSH
35132: LD_VAR 0 2
35136: PUSH
35137: LD_VAR 0 4
35141: ARRAY
35142: NONEQUAL
35143: IFFALSE 35155
// begin result := false ;
35145: LD_ADDR_VAR 0 3
35149: PUSH
35150: LD_INT 0
35152: ST_TO_ADDR
// break ;
35153: GO 35157
// end ;
35155: GO 35118
35157: POP
35158: POP
// end ;
35159: LD_VAR 0 3
35163: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
35164: LD_INT 0
35166: PPUSH
35167: PPUSH
35168: PPUSH
// pom := GetBase ( fac ) ;
35169: LD_ADDR_VAR 0 5
35173: PUSH
35174: LD_VAR 0 1
35178: PPUSH
35179: CALL_OW 274
35183: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
35184: LD_ADDR_VAR 0 4
35188: PUSH
35189: LD_VAR 0 2
35193: PUSH
35194: LD_INT 1
35196: ARRAY
35197: PPUSH
35198: LD_VAR 0 2
35202: PUSH
35203: LD_INT 2
35205: ARRAY
35206: PPUSH
35207: LD_VAR 0 2
35211: PUSH
35212: LD_INT 3
35214: ARRAY
35215: PPUSH
35216: LD_VAR 0 2
35220: PUSH
35221: LD_INT 4
35223: ARRAY
35224: PPUSH
35225: CALL_OW 449
35229: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35230: LD_ADDR_VAR 0 3
35234: PUSH
35235: LD_VAR 0 5
35239: PPUSH
35240: LD_INT 1
35242: PPUSH
35243: CALL_OW 275
35247: PUSH
35248: LD_VAR 0 4
35252: PUSH
35253: LD_INT 1
35255: ARRAY
35256: GREATEREQUAL
35257: PUSH
35258: LD_VAR 0 5
35262: PPUSH
35263: LD_INT 2
35265: PPUSH
35266: CALL_OW 275
35270: PUSH
35271: LD_VAR 0 4
35275: PUSH
35276: LD_INT 2
35278: ARRAY
35279: GREATEREQUAL
35280: AND
35281: PUSH
35282: LD_VAR 0 5
35286: PPUSH
35287: LD_INT 3
35289: PPUSH
35290: CALL_OW 275
35294: PUSH
35295: LD_VAR 0 4
35299: PUSH
35300: LD_INT 3
35302: ARRAY
35303: GREATEREQUAL
35304: AND
35305: ST_TO_ADDR
// end ;
35306: LD_VAR 0 3
35310: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
35311: LD_INT 0
35313: PPUSH
35314: PPUSH
35315: PPUSH
35316: PPUSH
// pom := GetBase ( building ) ;
35317: LD_ADDR_VAR 0 3
35321: PUSH
35322: LD_VAR 0 1
35326: PPUSH
35327: CALL_OW 274
35331: ST_TO_ADDR
// if not pom then
35332: LD_VAR 0 3
35336: NOT
35337: IFFALSE 35341
// exit ;
35339: GO 35511
// btype := GetBType ( building ) ;
35341: LD_ADDR_VAR 0 5
35345: PUSH
35346: LD_VAR 0 1
35350: PPUSH
35351: CALL_OW 266
35355: ST_TO_ADDR
// if btype = b_armoury then
35356: LD_VAR 0 5
35360: PUSH
35361: LD_INT 4
35363: EQUAL
35364: IFFALSE 35374
// btype := b_barracks ;
35366: LD_ADDR_VAR 0 5
35370: PUSH
35371: LD_INT 5
35373: ST_TO_ADDR
// if btype = b_depot then
35374: LD_VAR 0 5
35378: PUSH
35379: LD_INT 0
35381: EQUAL
35382: IFFALSE 35392
// btype := b_warehouse ;
35384: LD_ADDR_VAR 0 5
35388: PUSH
35389: LD_INT 1
35391: ST_TO_ADDR
// if btype = b_workshop then
35392: LD_VAR 0 5
35396: PUSH
35397: LD_INT 2
35399: EQUAL
35400: IFFALSE 35410
// btype := b_factory ;
35402: LD_ADDR_VAR 0 5
35406: PUSH
35407: LD_INT 3
35409: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35410: LD_ADDR_VAR 0 4
35414: PUSH
35415: LD_VAR 0 5
35419: PPUSH
35420: LD_VAR 0 1
35424: PPUSH
35425: CALL_OW 248
35429: PPUSH
35430: CALL_OW 450
35434: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35435: LD_ADDR_VAR 0 2
35439: PUSH
35440: LD_VAR 0 3
35444: PPUSH
35445: LD_INT 1
35447: PPUSH
35448: CALL_OW 275
35452: PUSH
35453: LD_VAR 0 4
35457: PUSH
35458: LD_INT 1
35460: ARRAY
35461: GREATEREQUAL
35462: PUSH
35463: LD_VAR 0 3
35467: PPUSH
35468: LD_INT 2
35470: PPUSH
35471: CALL_OW 275
35475: PUSH
35476: LD_VAR 0 4
35480: PUSH
35481: LD_INT 2
35483: ARRAY
35484: GREATEREQUAL
35485: AND
35486: PUSH
35487: LD_VAR 0 3
35491: PPUSH
35492: LD_INT 3
35494: PPUSH
35495: CALL_OW 275
35499: PUSH
35500: LD_VAR 0 4
35504: PUSH
35505: LD_INT 3
35507: ARRAY
35508: GREATEREQUAL
35509: AND
35510: ST_TO_ADDR
// end ;
35511: LD_VAR 0 2
35515: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
35516: LD_INT 0
35518: PPUSH
35519: PPUSH
35520: PPUSH
// pom := GetBase ( building ) ;
35521: LD_ADDR_VAR 0 4
35525: PUSH
35526: LD_VAR 0 1
35530: PPUSH
35531: CALL_OW 274
35535: ST_TO_ADDR
// if not pom then
35536: LD_VAR 0 4
35540: NOT
35541: IFFALSE 35545
// exit ;
35543: GO 35646
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35545: LD_ADDR_VAR 0 5
35549: PUSH
35550: LD_VAR 0 2
35554: PPUSH
35555: LD_VAR 0 1
35559: PPUSH
35560: CALL_OW 248
35564: PPUSH
35565: CALL_OW 450
35569: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35570: LD_ADDR_VAR 0 3
35574: PUSH
35575: LD_VAR 0 4
35579: PPUSH
35580: LD_INT 1
35582: PPUSH
35583: CALL_OW 275
35587: PUSH
35588: LD_VAR 0 5
35592: PUSH
35593: LD_INT 1
35595: ARRAY
35596: GREATEREQUAL
35597: PUSH
35598: LD_VAR 0 4
35602: PPUSH
35603: LD_INT 2
35605: PPUSH
35606: CALL_OW 275
35610: PUSH
35611: LD_VAR 0 5
35615: PUSH
35616: LD_INT 2
35618: ARRAY
35619: GREATEREQUAL
35620: AND
35621: PUSH
35622: LD_VAR 0 4
35626: PPUSH
35627: LD_INT 3
35629: PPUSH
35630: CALL_OW 275
35634: PUSH
35635: LD_VAR 0 5
35639: PUSH
35640: LD_INT 3
35642: ARRAY
35643: GREATEREQUAL
35644: AND
35645: ST_TO_ADDR
// end ;
35646: LD_VAR 0 3
35650: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
35651: LD_INT 0
35653: PPUSH
35654: PPUSH
35655: PPUSH
35656: PPUSH
35657: PPUSH
35658: PPUSH
35659: PPUSH
35660: PPUSH
35661: PPUSH
35662: PPUSH
35663: PPUSH
// result := false ;
35664: LD_ADDR_VAR 0 8
35668: PUSH
35669: LD_INT 0
35671: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
35672: LD_VAR 0 5
35676: NOT
35677: PUSH
35678: LD_VAR 0 1
35682: NOT
35683: OR
35684: PUSH
35685: LD_VAR 0 2
35689: NOT
35690: OR
35691: PUSH
35692: LD_VAR 0 3
35696: NOT
35697: OR
35698: IFFALSE 35702
// exit ;
35700: GO 36516
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
35702: LD_ADDR_VAR 0 14
35706: PUSH
35707: LD_VAR 0 1
35711: PPUSH
35712: LD_VAR 0 2
35716: PPUSH
35717: LD_VAR 0 3
35721: PPUSH
35722: LD_VAR 0 4
35726: PPUSH
35727: LD_VAR 0 5
35731: PUSH
35732: LD_INT 1
35734: ARRAY
35735: PPUSH
35736: CALL_OW 248
35740: PPUSH
35741: LD_INT 0
35743: PPUSH
35744: CALL 37753 0 6
35748: ST_TO_ADDR
// if not hexes then
35749: LD_VAR 0 14
35753: NOT
35754: IFFALSE 35758
// exit ;
35756: GO 36516
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35758: LD_ADDR_VAR 0 17
35762: PUSH
35763: LD_VAR 0 5
35767: PPUSH
35768: LD_INT 22
35770: PUSH
35771: LD_VAR 0 13
35775: PPUSH
35776: CALL_OW 255
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: PUSH
35785: LD_INT 2
35787: PUSH
35788: LD_INT 30
35790: PUSH
35791: LD_INT 0
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: PUSH
35798: LD_INT 30
35800: PUSH
35801: LD_INT 1
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: LIST
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: PPUSH
35817: CALL_OW 72
35821: ST_TO_ADDR
// for i = 1 to hexes do
35822: LD_ADDR_VAR 0 9
35826: PUSH
35827: DOUBLE
35828: LD_INT 1
35830: DEC
35831: ST_TO_ADDR
35832: LD_VAR 0 14
35836: PUSH
35837: FOR_TO
35838: IFFALSE 36514
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35840: LD_ADDR_VAR 0 13
35844: PUSH
35845: LD_VAR 0 14
35849: PUSH
35850: LD_VAR 0 9
35854: ARRAY
35855: PUSH
35856: LD_INT 1
35858: ARRAY
35859: PPUSH
35860: LD_VAR 0 14
35864: PUSH
35865: LD_VAR 0 9
35869: ARRAY
35870: PUSH
35871: LD_INT 2
35873: ARRAY
35874: PPUSH
35875: CALL_OW 428
35879: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
35880: LD_VAR 0 14
35884: PUSH
35885: LD_VAR 0 9
35889: ARRAY
35890: PUSH
35891: LD_INT 1
35893: ARRAY
35894: PPUSH
35895: LD_VAR 0 14
35899: PUSH
35900: LD_VAR 0 9
35904: ARRAY
35905: PUSH
35906: LD_INT 2
35908: ARRAY
35909: PPUSH
35910: CALL_OW 351
35914: PUSH
35915: LD_VAR 0 14
35919: PUSH
35920: LD_VAR 0 9
35924: ARRAY
35925: PUSH
35926: LD_INT 1
35928: ARRAY
35929: PPUSH
35930: LD_VAR 0 14
35934: PUSH
35935: LD_VAR 0 9
35939: ARRAY
35940: PUSH
35941: LD_INT 2
35943: ARRAY
35944: PPUSH
35945: CALL_OW 488
35949: NOT
35950: OR
35951: PUSH
35952: LD_VAR 0 13
35956: PPUSH
35957: CALL_OW 247
35961: PUSH
35962: LD_INT 3
35964: EQUAL
35965: OR
35966: IFFALSE 35972
// exit ;
35968: POP
35969: POP
35970: GO 36516
// if not tmp then
35972: LD_VAR 0 13
35976: NOT
35977: IFFALSE 35981
// continue ;
35979: GO 35837
// result := true ;
35981: LD_ADDR_VAR 0 8
35985: PUSH
35986: LD_INT 1
35988: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
35989: LD_VAR 0 6
35993: PUSH
35994: LD_VAR 0 13
35998: PPUSH
35999: CALL_OW 247
36003: PUSH
36004: LD_INT 2
36006: EQUAL
36007: AND
36008: PUSH
36009: LD_VAR 0 13
36013: PPUSH
36014: CALL_OW 263
36018: PUSH
36019: LD_INT 1
36021: EQUAL
36022: AND
36023: IFFALSE 36187
// begin if IsDrivenBy ( tmp ) then
36025: LD_VAR 0 13
36029: PPUSH
36030: CALL_OW 311
36034: IFFALSE 36038
// continue ;
36036: GO 35837
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
36038: LD_VAR 0 6
36042: PPUSH
36043: LD_INT 3
36045: PUSH
36046: LD_INT 60
36048: PUSH
36049: EMPTY
36050: LIST
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: PUSH
36056: LD_INT 3
36058: PUSH
36059: LD_INT 55
36061: PUSH
36062: EMPTY
36063: LIST
36064: PUSH
36065: EMPTY
36066: LIST
36067: LIST
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: PPUSH
36073: CALL_OW 72
36077: IFFALSE 36185
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
36079: LD_ADDR_VAR 0 18
36083: PUSH
36084: LD_VAR 0 6
36088: PPUSH
36089: LD_INT 3
36091: PUSH
36092: LD_INT 60
36094: PUSH
36095: EMPTY
36096: LIST
36097: PUSH
36098: EMPTY
36099: LIST
36100: LIST
36101: PUSH
36102: LD_INT 3
36104: PUSH
36105: LD_INT 55
36107: PUSH
36108: EMPTY
36109: LIST
36110: PUSH
36111: EMPTY
36112: LIST
36113: LIST
36114: PUSH
36115: EMPTY
36116: LIST
36117: LIST
36118: PPUSH
36119: CALL_OW 72
36123: PUSH
36124: LD_INT 1
36126: ARRAY
36127: ST_TO_ADDR
// if IsInUnit ( driver ) then
36128: LD_VAR 0 18
36132: PPUSH
36133: CALL_OW 310
36137: IFFALSE 36148
// ComExit ( driver ) ;
36139: LD_VAR 0 18
36143: PPUSH
36144: CALL 60937 0 1
// AddComEnterUnit ( driver , tmp ) ;
36148: LD_VAR 0 18
36152: PPUSH
36153: LD_VAR 0 13
36157: PPUSH
36158: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
36162: LD_VAR 0 18
36166: PPUSH
36167: LD_VAR 0 7
36171: PPUSH
36172: CALL_OW 173
// AddComExitVehicle ( driver ) ;
36176: LD_VAR 0 18
36180: PPUSH
36181: CALL_OW 181
// end ; continue ;
36185: GO 35837
// end ; if not cleaners or not tmp in cleaners then
36187: LD_VAR 0 6
36191: NOT
36192: PUSH
36193: LD_VAR 0 13
36197: PUSH
36198: LD_VAR 0 6
36202: IN
36203: NOT
36204: OR
36205: IFFALSE 36512
// begin if dep then
36207: LD_VAR 0 17
36211: IFFALSE 36347
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
36213: LD_ADDR_VAR 0 16
36217: PUSH
36218: LD_VAR 0 17
36222: PUSH
36223: LD_INT 1
36225: ARRAY
36226: PPUSH
36227: CALL_OW 250
36231: PPUSH
36232: LD_VAR 0 17
36236: PUSH
36237: LD_INT 1
36239: ARRAY
36240: PPUSH
36241: CALL_OW 254
36245: PPUSH
36246: LD_INT 5
36248: PPUSH
36249: CALL_OW 272
36253: PUSH
36254: LD_VAR 0 17
36258: PUSH
36259: LD_INT 1
36261: ARRAY
36262: PPUSH
36263: CALL_OW 251
36267: PPUSH
36268: LD_VAR 0 17
36272: PUSH
36273: LD_INT 1
36275: ARRAY
36276: PPUSH
36277: CALL_OW 254
36281: PPUSH
36282: LD_INT 5
36284: PPUSH
36285: CALL_OW 273
36289: PUSH
36290: EMPTY
36291: LIST
36292: LIST
36293: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
36294: LD_VAR 0 16
36298: PUSH
36299: LD_INT 1
36301: ARRAY
36302: PPUSH
36303: LD_VAR 0 16
36307: PUSH
36308: LD_INT 2
36310: ARRAY
36311: PPUSH
36312: CALL_OW 488
36316: IFFALSE 36347
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
36318: LD_VAR 0 13
36322: PPUSH
36323: LD_VAR 0 16
36327: PUSH
36328: LD_INT 1
36330: ARRAY
36331: PPUSH
36332: LD_VAR 0 16
36336: PUSH
36337: LD_INT 2
36339: ARRAY
36340: PPUSH
36341: CALL_OW 111
// continue ;
36345: GO 35837
// end ; end ; r := GetDir ( tmp ) ;
36347: LD_ADDR_VAR 0 15
36351: PUSH
36352: LD_VAR 0 13
36356: PPUSH
36357: CALL_OW 254
36361: ST_TO_ADDR
// if r = 5 then
36362: LD_VAR 0 15
36366: PUSH
36367: LD_INT 5
36369: EQUAL
36370: IFFALSE 36380
// r := 0 ;
36372: LD_ADDR_VAR 0 15
36376: PUSH
36377: LD_INT 0
36379: ST_TO_ADDR
// for j = r to 5 do
36380: LD_ADDR_VAR 0 10
36384: PUSH
36385: DOUBLE
36386: LD_VAR 0 15
36390: DEC
36391: ST_TO_ADDR
36392: LD_INT 5
36394: PUSH
36395: FOR_TO
36396: IFFALSE 36510
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
36398: LD_ADDR_VAR 0 11
36402: PUSH
36403: LD_VAR 0 13
36407: PPUSH
36408: CALL_OW 250
36412: PPUSH
36413: LD_VAR 0 10
36417: PPUSH
36418: LD_INT 2
36420: PPUSH
36421: CALL_OW 272
36425: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
36426: LD_ADDR_VAR 0 12
36430: PUSH
36431: LD_VAR 0 13
36435: PPUSH
36436: CALL_OW 251
36440: PPUSH
36441: LD_VAR 0 10
36445: PPUSH
36446: LD_INT 2
36448: PPUSH
36449: CALL_OW 273
36453: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
36454: LD_VAR 0 11
36458: PPUSH
36459: LD_VAR 0 12
36463: PPUSH
36464: CALL_OW 488
36468: PUSH
36469: LD_VAR 0 11
36473: PPUSH
36474: LD_VAR 0 12
36478: PPUSH
36479: CALL_OW 428
36483: NOT
36484: AND
36485: IFFALSE 36508
// begin ComMoveXY ( tmp , _x , _y ) ;
36487: LD_VAR 0 13
36491: PPUSH
36492: LD_VAR 0 11
36496: PPUSH
36497: LD_VAR 0 12
36501: PPUSH
36502: CALL_OW 111
// break ;
36506: GO 36510
// end ; end ;
36508: GO 36395
36510: POP
36511: POP
// end ; end ;
36512: GO 35837
36514: POP
36515: POP
// end ;
36516: LD_VAR 0 8
36520: RET
// export function BuildingTechInvented ( side , btype ) ; begin
36521: LD_INT 0
36523: PPUSH
// result := true ;
36524: LD_ADDR_VAR 0 3
36528: PUSH
36529: LD_INT 1
36531: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
36532: LD_VAR 0 2
36536: PUSH
36537: LD_INT 24
36539: DOUBLE
36540: EQUAL
36541: IFTRUE 36551
36543: LD_INT 33
36545: DOUBLE
36546: EQUAL
36547: IFTRUE 36551
36549: GO 36576
36551: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
36552: LD_ADDR_VAR 0 3
36556: PUSH
36557: LD_INT 32
36559: PPUSH
36560: LD_VAR 0 1
36564: PPUSH
36565: CALL_OW 321
36569: PUSH
36570: LD_INT 2
36572: EQUAL
36573: ST_TO_ADDR
36574: GO 36896
36576: LD_INT 20
36578: DOUBLE
36579: EQUAL
36580: IFTRUE 36584
36582: GO 36609
36584: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
36585: LD_ADDR_VAR 0 3
36589: PUSH
36590: LD_INT 6
36592: PPUSH
36593: LD_VAR 0 1
36597: PPUSH
36598: CALL_OW 321
36602: PUSH
36603: LD_INT 2
36605: EQUAL
36606: ST_TO_ADDR
36607: GO 36896
36609: LD_INT 22
36611: DOUBLE
36612: EQUAL
36613: IFTRUE 36623
36615: LD_INT 36
36617: DOUBLE
36618: EQUAL
36619: IFTRUE 36623
36621: GO 36648
36623: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
36624: LD_ADDR_VAR 0 3
36628: PUSH
36629: LD_INT 15
36631: PPUSH
36632: LD_VAR 0 1
36636: PPUSH
36637: CALL_OW 321
36641: PUSH
36642: LD_INT 2
36644: EQUAL
36645: ST_TO_ADDR
36646: GO 36896
36648: LD_INT 30
36650: DOUBLE
36651: EQUAL
36652: IFTRUE 36656
36654: GO 36681
36656: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
36657: LD_ADDR_VAR 0 3
36661: PUSH
36662: LD_INT 20
36664: PPUSH
36665: LD_VAR 0 1
36669: PPUSH
36670: CALL_OW 321
36674: PUSH
36675: LD_INT 2
36677: EQUAL
36678: ST_TO_ADDR
36679: GO 36896
36681: LD_INT 28
36683: DOUBLE
36684: EQUAL
36685: IFTRUE 36695
36687: LD_INT 21
36689: DOUBLE
36690: EQUAL
36691: IFTRUE 36695
36693: GO 36720
36695: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
36696: LD_ADDR_VAR 0 3
36700: PUSH
36701: LD_INT 21
36703: PPUSH
36704: LD_VAR 0 1
36708: PPUSH
36709: CALL_OW 321
36713: PUSH
36714: LD_INT 2
36716: EQUAL
36717: ST_TO_ADDR
36718: GO 36896
36720: LD_INT 16
36722: DOUBLE
36723: EQUAL
36724: IFTRUE 36728
36726: GO 36755
36728: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
36729: LD_ADDR_VAR 0 3
36733: PUSH
36734: LD_EXP 106
36738: PPUSH
36739: LD_VAR 0 1
36743: PPUSH
36744: CALL_OW 321
36748: PUSH
36749: LD_INT 2
36751: EQUAL
36752: ST_TO_ADDR
36753: GO 36896
36755: LD_INT 19
36757: DOUBLE
36758: EQUAL
36759: IFTRUE 36769
36761: LD_INT 23
36763: DOUBLE
36764: EQUAL
36765: IFTRUE 36769
36767: GO 36796
36769: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
36770: LD_ADDR_VAR 0 3
36774: PUSH
36775: LD_EXP 105
36779: PPUSH
36780: LD_VAR 0 1
36784: PPUSH
36785: CALL_OW 321
36789: PUSH
36790: LD_INT 2
36792: EQUAL
36793: ST_TO_ADDR
36794: GO 36896
36796: LD_INT 17
36798: DOUBLE
36799: EQUAL
36800: IFTRUE 36804
36802: GO 36829
36804: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
36805: LD_ADDR_VAR 0 3
36809: PUSH
36810: LD_INT 39
36812: PPUSH
36813: LD_VAR 0 1
36817: PPUSH
36818: CALL_OW 321
36822: PUSH
36823: LD_INT 2
36825: EQUAL
36826: ST_TO_ADDR
36827: GO 36896
36829: LD_INT 18
36831: DOUBLE
36832: EQUAL
36833: IFTRUE 36837
36835: GO 36862
36837: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
36838: LD_ADDR_VAR 0 3
36842: PUSH
36843: LD_INT 40
36845: PPUSH
36846: LD_VAR 0 1
36850: PPUSH
36851: CALL_OW 321
36855: PUSH
36856: LD_INT 2
36858: EQUAL
36859: ST_TO_ADDR
36860: GO 36896
36862: LD_INT 27
36864: DOUBLE
36865: EQUAL
36866: IFTRUE 36870
36868: GO 36895
36870: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
36871: LD_ADDR_VAR 0 3
36875: PUSH
36876: LD_INT 35
36878: PPUSH
36879: LD_VAR 0 1
36883: PPUSH
36884: CALL_OW 321
36888: PUSH
36889: LD_INT 2
36891: EQUAL
36892: ST_TO_ADDR
36893: GO 36896
36895: POP
// end ;
36896: LD_VAR 0 3
36900: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
36901: LD_INT 0
36903: PPUSH
36904: PPUSH
36905: PPUSH
36906: PPUSH
36907: PPUSH
36908: PPUSH
36909: PPUSH
36910: PPUSH
36911: PPUSH
36912: PPUSH
36913: PPUSH
// result := false ;
36914: LD_ADDR_VAR 0 6
36918: PUSH
36919: LD_INT 0
36921: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
36922: LD_VAR 0 1
36926: NOT
36927: PUSH
36928: LD_VAR 0 1
36932: PPUSH
36933: CALL_OW 266
36937: PUSH
36938: LD_INT 0
36940: PUSH
36941: LD_INT 1
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: IN
36948: NOT
36949: OR
36950: PUSH
36951: LD_VAR 0 2
36955: NOT
36956: OR
36957: PUSH
36958: LD_VAR 0 5
36962: PUSH
36963: LD_INT 0
36965: PUSH
36966: LD_INT 1
36968: PUSH
36969: LD_INT 2
36971: PUSH
36972: LD_INT 3
36974: PUSH
36975: LD_INT 4
36977: PUSH
36978: LD_INT 5
36980: PUSH
36981: EMPTY
36982: LIST
36983: LIST
36984: LIST
36985: LIST
36986: LIST
36987: LIST
36988: IN
36989: NOT
36990: OR
36991: PUSH
36992: LD_VAR 0 3
36996: PPUSH
36997: LD_VAR 0 4
37001: PPUSH
37002: CALL_OW 488
37006: NOT
37007: OR
37008: IFFALSE 37012
// exit ;
37010: GO 37748
// side := GetSide ( depot ) ;
37012: LD_ADDR_VAR 0 9
37016: PUSH
37017: LD_VAR 0 1
37021: PPUSH
37022: CALL_OW 255
37026: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
37027: LD_VAR 0 9
37031: PPUSH
37032: LD_VAR 0 2
37036: PPUSH
37037: CALL 36521 0 2
37041: NOT
37042: IFFALSE 37046
// exit ;
37044: GO 37748
// pom := GetBase ( depot ) ;
37046: LD_ADDR_VAR 0 10
37050: PUSH
37051: LD_VAR 0 1
37055: PPUSH
37056: CALL_OW 274
37060: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
37061: LD_ADDR_VAR 0 11
37065: PUSH
37066: LD_VAR 0 2
37070: PPUSH
37071: LD_VAR 0 1
37075: PPUSH
37076: CALL_OW 248
37080: PPUSH
37081: CALL_OW 450
37085: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
37086: LD_VAR 0 10
37090: PPUSH
37091: LD_INT 1
37093: PPUSH
37094: CALL_OW 275
37098: PUSH
37099: LD_VAR 0 11
37103: PUSH
37104: LD_INT 1
37106: ARRAY
37107: GREATEREQUAL
37108: PUSH
37109: LD_VAR 0 10
37113: PPUSH
37114: LD_INT 2
37116: PPUSH
37117: CALL_OW 275
37121: PUSH
37122: LD_VAR 0 11
37126: PUSH
37127: LD_INT 2
37129: ARRAY
37130: GREATEREQUAL
37131: AND
37132: PUSH
37133: LD_VAR 0 10
37137: PPUSH
37138: LD_INT 3
37140: PPUSH
37141: CALL_OW 275
37145: PUSH
37146: LD_VAR 0 11
37150: PUSH
37151: LD_INT 3
37153: ARRAY
37154: GREATEREQUAL
37155: AND
37156: NOT
37157: IFFALSE 37161
// exit ;
37159: GO 37748
// if GetBType ( depot ) = b_depot then
37161: LD_VAR 0 1
37165: PPUSH
37166: CALL_OW 266
37170: PUSH
37171: LD_INT 0
37173: EQUAL
37174: IFFALSE 37186
// dist := 28 else
37176: LD_ADDR_VAR 0 14
37180: PUSH
37181: LD_INT 28
37183: ST_TO_ADDR
37184: GO 37194
// dist := 36 ;
37186: LD_ADDR_VAR 0 14
37190: PUSH
37191: LD_INT 36
37193: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
37194: LD_VAR 0 1
37198: PPUSH
37199: LD_VAR 0 3
37203: PPUSH
37204: LD_VAR 0 4
37208: PPUSH
37209: CALL_OW 297
37213: PUSH
37214: LD_VAR 0 14
37218: GREATER
37219: IFFALSE 37223
// exit ;
37221: GO 37748
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
37223: LD_ADDR_VAR 0 12
37227: PUSH
37228: LD_VAR 0 2
37232: PPUSH
37233: LD_VAR 0 3
37237: PPUSH
37238: LD_VAR 0 4
37242: PPUSH
37243: LD_VAR 0 5
37247: PPUSH
37248: LD_VAR 0 1
37252: PPUSH
37253: CALL_OW 248
37257: PPUSH
37258: LD_INT 0
37260: PPUSH
37261: CALL 37753 0 6
37265: ST_TO_ADDR
// if not hexes then
37266: LD_VAR 0 12
37270: NOT
37271: IFFALSE 37275
// exit ;
37273: GO 37748
// hex := GetHexInfo ( x , y ) ;
37275: LD_ADDR_VAR 0 15
37279: PUSH
37280: LD_VAR 0 3
37284: PPUSH
37285: LD_VAR 0 4
37289: PPUSH
37290: CALL_OW 546
37294: ST_TO_ADDR
// if hex [ 1 ] then
37295: LD_VAR 0 15
37299: PUSH
37300: LD_INT 1
37302: ARRAY
37303: IFFALSE 37307
// exit ;
37305: GO 37748
// height := hex [ 2 ] ;
37307: LD_ADDR_VAR 0 13
37311: PUSH
37312: LD_VAR 0 15
37316: PUSH
37317: LD_INT 2
37319: ARRAY
37320: ST_TO_ADDR
// for i = 1 to hexes do
37321: LD_ADDR_VAR 0 7
37325: PUSH
37326: DOUBLE
37327: LD_INT 1
37329: DEC
37330: ST_TO_ADDR
37331: LD_VAR 0 12
37335: PUSH
37336: FOR_TO
37337: IFFALSE 37667
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
37339: LD_VAR 0 12
37343: PUSH
37344: LD_VAR 0 7
37348: ARRAY
37349: PUSH
37350: LD_INT 1
37352: ARRAY
37353: PPUSH
37354: LD_VAR 0 12
37358: PUSH
37359: LD_VAR 0 7
37363: ARRAY
37364: PUSH
37365: LD_INT 2
37367: ARRAY
37368: PPUSH
37369: CALL_OW 488
37373: NOT
37374: PUSH
37375: LD_VAR 0 12
37379: PUSH
37380: LD_VAR 0 7
37384: ARRAY
37385: PUSH
37386: LD_INT 1
37388: ARRAY
37389: PPUSH
37390: LD_VAR 0 12
37394: PUSH
37395: LD_VAR 0 7
37399: ARRAY
37400: PUSH
37401: LD_INT 2
37403: ARRAY
37404: PPUSH
37405: CALL_OW 428
37409: PUSH
37410: LD_INT 0
37412: GREATER
37413: OR
37414: PUSH
37415: LD_VAR 0 12
37419: PUSH
37420: LD_VAR 0 7
37424: ARRAY
37425: PUSH
37426: LD_INT 1
37428: ARRAY
37429: PPUSH
37430: LD_VAR 0 12
37434: PUSH
37435: LD_VAR 0 7
37439: ARRAY
37440: PUSH
37441: LD_INT 2
37443: ARRAY
37444: PPUSH
37445: CALL_OW 351
37449: OR
37450: IFFALSE 37456
// exit ;
37452: POP
37453: POP
37454: GO 37748
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37456: LD_ADDR_VAR 0 8
37460: PUSH
37461: LD_VAR 0 12
37465: PUSH
37466: LD_VAR 0 7
37470: ARRAY
37471: PUSH
37472: LD_INT 1
37474: ARRAY
37475: PPUSH
37476: LD_VAR 0 12
37480: PUSH
37481: LD_VAR 0 7
37485: ARRAY
37486: PUSH
37487: LD_INT 2
37489: ARRAY
37490: PPUSH
37491: CALL_OW 546
37495: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
37496: LD_VAR 0 8
37500: PUSH
37501: LD_INT 1
37503: ARRAY
37504: PUSH
37505: LD_VAR 0 8
37509: PUSH
37510: LD_INT 2
37512: ARRAY
37513: PUSH
37514: LD_VAR 0 13
37518: PUSH
37519: LD_INT 2
37521: PLUS
37522: GREATER
37523: OR
37524: PUSH
37525: LD_VAR 0 8
37529: PUSH
37530: LD_INT 2
37532: ARRAY
37533: PUSH
37534: LD_VAR 0 13
37538: PUSH
37539: LD_INT 2
37541: MINUS
37542: LESS
37543: OR
37544: PUSH
37545: LD_VAR 0 8
37549: PUSH
37550: LD_INT 3
37552: ARRAY
37553: PUSH
37554: LD_INT 0
37556: PUSH
37557: LD_INT 8
37559: PUSH
37560: LD_INT 9
37562: PUSH
37563: LD_INT 10
37565: PUSH
37566: LD_INT 11
37568: PUSH
37569: LD_INT 12
37571: PUSH
37572: LD_INT 13
37574: PUSH
37575: LD_INT 16
37577: PUSH
37578: LD_INT 17
37580: PUSH
37581: LD_INT 18
37583: PUSH
37584: LD_INT 19
37586: PUSH
37587: LD_INT 20
37589: PUSH
37590: LD_INT 21
37592: PUSH
37593: EMPTY
37594: LIST
37595: LIST
37596: LIST
37597: LIST
37598: LIST
37599: LIST
37600: LIST
37601: LIST
37602: LIST
37603: LIST
37604: LIST
37605: LIST
37606: LIST
37607: IN
37608: NOT
37609: OR
37610: PUSH
37611: LD_VAR 0 8
37615: PUSH
37616: LD_INT 5
37618: ARRAY
37619: NOT
37620: OR
37621: PUSH
37622: LD_VAR 0 8
37626: PUSH
37627: LD_INT 6
37629: ARRAY
37630: PUSH
37631: LD_INT 1
37633: PUSH
37634: LD_INT 2
37636: PUSH
37637: LD_INT 7
37639: PUSH
37640: LD_INT 9
37642: PUSH
37643: LD_INT 10
37645: PUSH
37646: LD_INT 11
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: LIST
37653: LIST
37654: LIST
37655: LIST
37656: IN
37657: NOT
37658: OR
37659: IFFALSE 37665
// exit ;
37661: POP
37662: POP
37663: GO 37748
// end ;
37665: GO 37336
37667: POP
37668: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
37669: LD_VAR 0 9
37673: PPUSH
37674: LD_VAR 0 3
37678: PPUSH
37679: LD_VAR 0 4
37683: PPUSH
37684: LD_INT 20
37686: PPUSH
37687: CALL 29694 0 4
37691: PUSH
37692: LD_INT 4
37694: ARRAY
37695: IFFALSE 37699
// exit ;
37697: GO 37748
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
37699: LD_VAR 0 2
37703: PUSH
37704: LD_INT 29
37706: PUSH
37707: LD_INT 30
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: IN
37714: PUSH
37715: LD_VAR 0 3
37719: PPUSH
37720: LD_VAR 0 4
37724: PPUSH
37725: LD_VAR 0 9
37729: PPUSH
37730: CALL_OW 440
37734: NOT
37735: AND
37736: IFFALSE 37740
// exit ;
37738: GO 37748
// result := true ;
37740: LD_ADDR_VAR 0 6
37744: PUSH
37745: LD_INT 1
37747: ST_TO_ADDR
// end ;
37748: LD_VAR 0 6
37752: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
37753: LD_INT 0
37755: PPUSH
37756: PPUSH
37757: PPUSH
37758: PPUSH
37759: PPUSH
37760: PPUSH
37761: PPUSH
37762: PPUSH
37763: PPUSH
37764: PPUSH
37765: PPUSH
37766: PPUSH
37767: PPUSH
37768: PPUSH
37769: PPUSH
37770: PPUSH
37771: PPUSH
37772: PPUSH
37773: PPUSH
37774: PPUSH
37775: PPUSH
37776: PPUSH
37777: PPUSH
37778: PPUSH
37779: PPUSH
37780: PPUSH
37781: PPUSH
37782: PPUSH
37783: PPUSH
37784: PPUSH
37785: PPUSH
37786: PPUSH
37787: PPUSH
37788: PPUSH
37789: PPUSH
37790: PPUSH
37791: PPUSH
37792: PPUSH
37793: PPUSH
37794: PPUSH
37795: PPUSH
37796: PPUSH
37797: PPUSH
37798: PPUSH
37799: PPUSH
37800: PPUSH
37801: PPUSH
37802: PPUSH
37803: PPUSH
37804: PPUSH
37805: PPUSH
37806: PPUSH
37807: PPUSH
37808: PPUSH
37809: PPUSH
37810: PPUSH
37811: PPUSH
37812: PPUSH
// result = [ ] ;
37813: LD_ADDR_VAR 0 7
37817: PUSH
37818: EMPTY
37819: ST_TO_ADDR
// temp_list = [ ] ;
37820: LD_ADDR_VAR 0 9
37824: PUSH
37825: EMPTY
37826: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
37827: LD_VAR 0 4
37831: PUSH
37832: LD_INT 0
37834: PUSH
37835: LD_INT 1
37837: PUSH
37838: LD_INT 2
37840: PUSH
37841: LD_INT 3
37843: PUSH
37844: LD_INT 4
37846: PUSH
37847: LD_INT 5
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: LIST
37854: LIST
37855: LIST
37856: LIST
37857: IN
37858: NOT
37859: PUSH
37860: LD_VAR 0 1
37864: PUSH
37865: LD_INT 0
37867: PUSH
37868: LD_INT 1
37870: PUSH
37871: EMPTY
37872: LIST
37873: LIST
37874: IN
37875: PUSH
37876: LD_VAR 0 5
37880: PUSH
37881: LD_INT 1
37883: PUSH
37884: LD_INT 2
37886: PUSH
37887: LD_INT 3
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: LIST
37894: IN
37895: NOT
37896: AND
37897: OR
37898: IFFALSE 37902
// exit ;
37900: GO 56293
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
37902: LD_VAR 0 1
37906: PUSH
37907: LD_INT 6
37909: PUSH
37910: LD_INT 7
37912: PUSH
37913: LD_INT 8
37915: PUSH
37916: LD_INT 13
37918: PUSH
37919: LD_INT 12
37921: PUSH
37922: LD_INT 15
37924: PUSH
37925: LD_INT 11
37927: PUSH
37928: LD_INT 14
37930: PUSH
37931: LD_INT 10
37933: PUSH
37934: EMPTY
37935: LIST
37936: LIST
37937: LIST
37938: LIST
37939: LIST
37940: LIST
37941: LIST
37942: LIST
37943: LIST
37944: IN
37945: IFFALSE 37955
// btype = b_lab ;
37947: LD_ADDR_VAR 0 1
37951: PUSH
37952: LD_INT 6
37954: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
37955: LD_VAR 0 6
37959: PUSH
37960: LD_INT 0
37962: PUSH
37963: LD_INT 1
37965: PUSH
37966: LD_INT 2
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: LIST
37973: IN
37974: NOT
37975: PUSH
37976: LD_VAR 0 1
37980: PUSH
37981: LD_INT 0
37983: PUSH
37984: LD_INT 1
37986: PUSH
37987: LD_INT 2
37989: PUSH
37990: LD_INT 3
37992: PUSH
37993: LD_INT 6
37995: PUSH
37996: LD_INT 36
37998: PUSH
37999: LD_INT 4
38001: PUSH
38002: LD_INT 5
38004: PUSH
38005: LD_INT 31
38007: PUSH
38008: LD_INT 32
38010: PUSH
38011: LD_INT 33
38013: PUSH
38014: EMPTY
38015: LIST
38016: LIST
38017: LIST
38018: LIST
38019: LIST
38020: LIST
38021: LIST
38022: LIST
38023: LIST
38024: LIST
38025: LIST
38026: IN
38027: NOT
38028: PUSH
38029: LD_VAR 0 6
38033: PUSH
38034: LD_INT 1
38036: EQUAL
38037: AND
38038: OR
38039: PUSH
38040: LD_VAR 0 1
38044: PUSH
38045: LD_INT 2
38047: PUSH
38048: LD_INT 3
38050: PUSH
38051: EMPTY
38052: LIST
38053: LIST
38054: IN
38055: NOT
38056: PUSH
38057: LD_VAR 0 6
38061: PUSH
38062: LD_INT 2
38064: EQUAL
38065: AND
38066: OR
38067: IFFALSE 38077
// mode = 0 ;
38069: LD_ADDR_VAR 0 6
38073: PUSH
38074: LD_INT 0
38076: ST_TO_ADDR
// case mode of 0 :
38077: LD_VAR 0 6
38081: PUSH
38082: LD_INT 0
38084: DOUBLE
38085: EQUAL
38086: IFTRUE 38090
38088: GO 49543
38090: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38091: LD_ADDR_VAR 0 11
38095: PUSH
38096: LD_INT 0
38098: PUSH
38099: LD_INT 0
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: PUSH
38106: LD_INT 0
38108: PUSH
38109: LD_INT 1
38111: NEG
38112: PUSH
38113: EMPTY
38114: LIST
38115: LIST
38116: PUSH
38117: LD_INT 1
38119: PUSH
38120: LD_INT 0
38122: PUSH
38123: EMPTY
38124: LIST
38125: LIST
38126: PUSH
38127: LD_INT 1
38129: PUSH
38130: LD_INT 1
38132: PUSH
38133: EMPTY
38134: LIST
38135: LIST
38136: PUSH
38137: LD_INT 0
38139: PUSH
38140: LD_INT 1
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PUSH
38147: LD_INT 1
38149: NEG
38150: PUSH
38151: LD_INT 0
38153: PUSH
38154: EMPTY
38155: LIST
38156: LIST
38157: PUSH
38158: LD_INT 1
38160: NEG
38161: PUSH
38162: LD_INT 1
38164: NEG
38165: PUSH
38166: EMPTY
38167: LIST
38168: LIST
38169: PUSH
38170: LD_INT 1
38172: NEG
38173: PUSH
38174: LD_INT 2
38176: NEG
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: PUSH
38182: LD_INT 0
38184: PUSH
38185: LD_INT 2
38187: NEG
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: PUSH
38193: LD_INT 1
38195: PUSH
38196: LD_INT 1
38198: NEG
38199: PUSH
38200: EMPTY
38201: LIST
38202: LIST
38203: PUSH
38204: LD_INT 1
38206: PUSH
38207: LD_INT 2
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: PUSH
38214: LD_INT 0
38216: PUSH
38217: LD_INT 2
38219: PUSH
38220: EMPTY
38221: LIST
38222: LIST
38223: PUSH
38224: LD_INT 1
38226: NEG
38227: PUSH
38228: LD_INT 1
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PUSH
38235: LD_INT 1
38237: PUSH
38238: LD_INT 3
38240: PUSH
38241: EMPTY
38242: LIST
38243: LIST
38244: PUSH
38245: LD_INT 0
38247: PUSH
38248: LD_INT 3
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PUSH
38255: LD_INT 1
38257: NEG
38258: PUSH
38259: LD_INT 2
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: LIST
38270: LIST
38271: LIST
38272: LIST
38273: LIST
38274: LIST
38275: LIST
38276: LIST
38277: LIST
38278: LIST
38279: LIST
38280: LIST
38281: LIST
38282: LIST
38283: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38284: LD_ADDR_VAR 0 12
38288: PUSH
38289: LD_INT 0
38291: PUSH
38292: LD_INT 0
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: PUSH
38299: LD_INT 0
38301: PUSH
38302: LD_INT 1
38304: NEG
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: PUSH
38310: LD_INT 1
38312: PUSH
38313: LD_INT 0
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: PUSH
38320: LD_INT 1
38322: PUSH
38323: LD_INT 1
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: PUSH
38330: LD_INT 0
38332: PUSH
38333: LD_INT 1
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: PUSH
38340: LD_INT 1
38342: NEG
38343: PUSH
38344: LD_INT 0
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: PUSH
38351: LD_INT 1
38353: NEG
38354: PUSH
38355: LD_INT 1
38357: NEG
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: PUSH
38363: LD_INT 1
38365: PUSH
38366: LD_INT 1
38368: NEG
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: PUSH
38374: LD_INT 2
38376: PUSH
38377: LD_INT 0
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: PUSH
38384: LD_INT 2
38386: PUSH
38387: LD_INT 1
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: PUSH
38394: LD_INT 1
38396: NEG
38397: PUSH
38398: LD_INT 1
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: LD_INT 2
38407: NEG
38408: PUSH
38409: LD_INT 0
38411: PUSH
38412: EMPTY
38413: LIST
38414: LIST
38415: PUSH
38416: LD_INT 2
38418: NEG
38419: PUSH
38420: LD_INT 1
38422: NEG
38423: PUSH
38424: EMPTY
38425: LIST
38426: LIST
38427: PUSH
38428: LD_INT 2
38430: NEG
38431: PUSH
38432: LD_INT 1
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: PUSH
38439: LD_INT 3
38441: NEG
38442: PUSH
38443: LD_INT 0
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: PUSH
38450: LD_INT 3
38452: NEG
38453: PUSH
38454: LD_INT 1
38456: NEG
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: LIST
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: LIST
38471: LIST
38472: LIST
38473: LIST
38474: LIST
38475: LIST
38476: LIST
38477: LIST
38478: LIST
38479: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38480: LD_ADDR_VAR 0 13
38484: PUSH
38485: LD_INT 0
38487: PUSH
38488: LD_INT 0
38490: PUSH
38491: EMPTY
38492: LIST
38493: LIST
38494: PUSH
38495: LD_INT 0
38497: PUSH
38498: LD_INT 1
38500: NEG
38501: PUSH
38502: EMPTY
38503: LIST
38504: LIST
38505: PUSH
38506: LD_INT 1
38508: PUSH
38509: LD_INT 0
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: PUSH
38516: LD_INT 1
38518: PUSH
38519: LD_INT 1
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: PUSH
38526: LD_INT 0
38528: PUSH
38529: LD_INT 1
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: LD_INT 1
38538: NEG
38539: PUSH
38540: LD_INT 0
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: PUSH
38547: LD_INT 1
38549: NEG
38550: PUSH
38551: LD_INT 1
38553: NEG
38554: PUSH
38555: EMPTY
38556: LIST
38557: LIST
38558: PUSH
38559: LD_INT 1
38561: NEG
38562: PUSH
38563: LD_INT 2
38565: NEG
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: PUSH
38571: LD_INT 2
38573: PUSH
38574: LD_INT 1
38576: PUSH
38577: EMPTY
38578: LIST
38579: LIST
38580: PUSH
38581: LD_INT 2
38583: PUSH
38584: LD_INT 2
38586: PUSH
38587: EMPTY
38588: LIST
38589: LIST
38590: PUSH
38591: LD_INT 1
38593: PUSH
38594: LD_INT 2
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: PUSH
38601: LD_INT 2
38603: NEG
38604: PUSH
38605: LD_INT 1
38607: NEG
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: PUSH
38613: LD_INT 2
38615: NEG
38616: PUSH
38617: LD_INT 2
38619: NEG
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: PUSH
38625: LD_INT 2
38627: NEG
38628: PUSH
38629: LD_INT 3
38631: NEG
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: PUSH
38637: LD_INT 3
38639: NEG
38640: PUSH
38641: LD_INT 2
38643: NEG
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PUSH
38649: LD_INT 3
38651: NEG
38652: PUSH
38653: LD_INT 3
38655: NEG
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: LIST
38665: LIST
38666: LIST
38667: LIST
38668: LIST
38669: LIST
38670: LIST
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: LIST
38676: LIST
38677: LIST
38678: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38679: LD_ADDR_VAR 0 14
38683: PUSH
38684: LD_INT 0
38686: PUSH
38687: LD_INT 0
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: PUSH
38694: LD_INT 0
38696: PUSH
38697: LD_INT 1
38699: NEG
38700: PUSH
38701: EMPTY
38702: LIST
38703: LIST
38704: PUSH
38705: LD_INT 1
38707: PUSH
38708: LD_INT 0
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: PUSH
38715: LD_INT 1
38717: PUSH
38718: LD_INT 1
38720: PUSH
38721: EMPTY
38722: LIST
38723: LIST
38724: PUSH
38725: LD_INT 0
38727: PUSH
38728: LD_INT 1
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: PUSH
38735: LD_INT 1
38737: NEG
38738: PUSH
38739: LD_INT 0
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: PUSH
38746: LD_INT 1
38748: NEG
38749: PUSH
38750: LD_INT 1
38752: NEG
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: PUSH
38758: LD_INT 1
38760: NEG
38761: PUSH
38762: LD_INT 2
38764: NEG
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: PUSH
38770: LD_INT 0
38772: PUSH
38773: LD_INT 2
38775: NEG
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: PUSH
38781: LD_INT 1
38783: PUSH
38784: LD_INT 1
38786: NEG
38787: PUSH
38788: EMPTY
38789: LIST
38790: LIST
38791: PUSH
38792: LD_INT 1
38794: PUSH
38795: LD_INT 2
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: PUSH
38802: LD_INT 0
38804: PUSH
38805: LD_INT 2
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: PUSH
38812: LD_INT 1
38814: NEG
38815: PUSH
38816: LD_INT 1
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: PUSH
38823: LD_INT 1
38825: NEG
38826: PUSH
38827: LD_INT 3
38829: NEG
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: PUSH
38835: LD_INT 0
38837: PUSH
38838: LD_INT 3
38840: NEG
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: PUSH
38846: LD_INT 1
38848: PUSH
38849: LD_INT 2
38851: NEG
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: LIST
38861: LIST
38862: LIST
38863: LIST
38864: LIST
38865: LIST
38866: LIST
38867: LIST
38868: LIST
38869: LIST
38870: LIST
38871: LIST
38872: LIST
38873: LIST
38874: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38875: LD_ADDR_VAR 0 15
38879: PUSH
38880: LD_INT 0
38882: PUSH
38883: LD_INT 0
38885: PUSH
38886: EMPTY
38887: LIST
38888: LIST
38889: PUSH
38890: LD_INT 0
38892: PUSH
38893: LD_INT 1
38895: NEG
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: PUSH
38901: LD_INT 1
38903: PUSH
38904: LD_INT 0
38906: PUSH
38907: EMPTY
38908: LIST
38909: LIST
38910: PUSH
38911: LD_INT 1
38913: PUSH
38914: LD_INT 1
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: PUSH
38921: LD_INT 0
38923: PUSH
38924: LD_INT 1
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: PUSH
38931: LD_INT 1
38933: NEG
38934: PUSH
38935: LD_INT 0
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: PUSH
38942: LD_INT 1
38944: NEG
38945: PUSH
38946: LD_INT 1
38948: NEG
38949: PUSH
38950: EMPTY
38951: LIST
38952: LIST
38953: PUSH
38954: LD_INT 1
38956: PUSH
38957: LD_INT 1
38959: NEG
38960: PUSH
38961: EMPTY
38962: LIST
38963: LIST
38964: PUSH
38965: LD_INT 2
38967: PUSH
38968: LD_INT 0
38970: PUSH
38971: EMPTY
38972: LIST
38973: LIST
38974: PUSH
38975: LD_INT 2
38977: PUSH
38978: LD_INT 1
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: PUSH
38985: LD_INT 1
38987: NEG
38988: PUSH
38989: LD_INT 1
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: PUSH
38996: LD_INT 2
38998: NEG
38999: PUSH
39000: LD_INT 0
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: PUSH
39007: LD_INT 2
39009: NEG
39010: PUSH
39011: LD_INT 1
39013: NEG
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: LD_INT 2
39021: PUSH
39022: LD_INT 1
39024: NEG
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: PUSH
39030: LD_INT 3
39032: PUSH
39033: LD_INT 0
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PUSH
39040: LD_INT 3
39042: PUSH
39043: LD_INT 1
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: LIST
39054: LIST
39055: LIST
39056: LIST
39057: LIST
39058: LIST
39059: LIST
39060: LIST
39061: LIST
39062: LIST
39063: LIST
39064: LIST
39065: LIST
39066: LIST
39067: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39068: LD_ADDR_VAR 0 16
39072: PUSH
39073: LD_INT 0
39075: PUSH
39076: LD_INT 0
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: PUSH
39083: LD_INT 0
39085: PUSH
39086: LD_INT 1
39088: NEG
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: PUSH
39094: LD_INT 1
39096: PUSH
39097: LD_INT 0
39099: PUSH
39100: EMPTY
39101: LIST
39102: LIST
39103: PUSH
39104: LD_INT 1
39106: PUSH
39107: LD_INT 1
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: PUSH
39114: LD_INT 0
39116: PUSH
39117: LD_INT 1
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: PUSH
39124: LD_INT 1
39126: NEG
39127: PUSH
39128: LD_INT 0
39130: PUSH
39131: EMPTY
39132: LIST
39133: LIST
39134: PUSH
39135: LD_INT 1
39137: NEG
39138: PUSH
39139: LD_INT 1
39141: NEG
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: PUSH
39147: LD_INT 1
39149: NEG
39150: PUSH
39151: LD_INT 2
39153: NEG
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: PUSH
39159: LD_INT 2
39161: PUSH
39162: LD_INT 1
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: PUSH
39169: LD_INT 2
39171: PUSH
39172: LD_INT 2
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: PUSH
39179: LD_INT 1
39181: PUSH
39182: LD_INT 2
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: PUSH
39189: LD_INT 2
39191: NEG
39192: PUSH
39193: LD_INT 1
39195: NEG
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: PUSH
39201: LD_INT 2
39203: NEG
39204: PUSH
39205: LD_INT 2
39207: NEG
39208: PUSH
39209: EMPTY
39210: LIST
39211: LIST
39212: PUSH
39213: LD_INT 3
39215: PUSH
39216: LD_INT 2
39218: PUSH
39219: EMPTY
39220: LIST
39221: LIST
39222: PUSH
39223: LD_INT 3
39225: PUSH
39226: LD_INT 3
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: PUSH
39233: LD_INT 2
39235: PUSH
39236: LD_INT 3
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: LIST
39247: LIST
39248: LIST
39249: LIST
39250: LIST
39251: LIST
39252: LIST
39253: LIST
39254: LIST
39255: LIST
39256: LIST
39257: LIST
39258: LIST
39259: LIST
39260: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39261: LD_ADDR_VAR 0 17
39265: PUSH
39266: LD_INT 0
39268: PUSH
39269: LD_INT 0
39271: PUSH
39272: EMPTY
39273: LIST
39274: LIST
39275: PUSH
39276: LD_INT 0
39278: PUSH
39279: LD_INT 1
39281: NEG
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: PUSH
39287: LD_INT 1
39289: PUSH
39290: LD_INT 0
39292: PUSH
39293: EMPTY
39294: LIST
39295: LIST
39296: PUSH
39297: LD_INT 1
39299: PUSH
39300: LD_INT 1
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: PUSH
39307: LD_INT 0
39309: PUSH
39310: LD_INT 1
39312: PUSH
39313: EMPTY
39314: LIST
39315: LIST
39316: PUSH
39317: LD_INT 1
39319: NEG
39320: PUSH
39321: LD_INT 0
39323: PUSH
39324: EMPTY
39325: LIST
39326: LIST
39327: PUSH
39328: LD_INT 1
39330: NEG
39331: PUSH
39332: LD_INT 1
39334: NEG
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: PUSH
39340: LD_INT 1
39342: NEG
39343: PUSH
39344: LD_INT 2
39346: NEG
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: PUSH
39352: LD_INT 0
39354: PUSH
39355: LD_INT 2
39357: NEG
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: PUSH
39363: LD_INT 1
39365: PUSH
39366: LD_INT 1
39368: NEG
39369: PUSH
39370: EMPTY
39371: LIST
39372: LIST
39373: PUSH
39374: LD_INT 2
39376: PUSH
39377: LD_INT 0
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: PUSH
39384: LD_INT 2
39386: PUSH
39387: LD_INT 1
39389: PUSH
39390: EMPTY
39391: LIST
39392: LIST
39393: PUSH
39394: LD_INT 2
39396: PUSH
39397: LD_INT 2
39399: PUSH
39400: EMPTY
39401: LIST
39402: LIST
39403: PUSH
39404: LD_INT 1
39406: PUSH
39407: LD_INT 2
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: PUSH
39414: LD_INT 0
39416: PUSH
39417: LD_INT 2
39419: PUSH
39420: EMPTY
39421: LIST
39422: LIST
39423: PUSH
39424: LD_INT 1
39426: NEG
39427: PUSH
39428: LD_INT 1
39430: PUSH
39431: EMPTY
39432: LIST
39433: LIST
39434: PUSH
39435: LD_INT 2
39437: NEG
39438: PUSH
39439: LD_INT 0
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: PUSH
39446: LD_INT 2
39448: NEG
39449: PUSH
39450: LD_INT 1
39452: NEG
39453: PUSH
39454: EMPTY
39455: LIST
39456: LIST
39457: PUSH
39458: LD_INT 2
39460: NEG
39461: PUSH
39462: LD_INT 2
39464: NEG
39465: PUSH
39466: EMPTY
39467: LIST
39468: LIST
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: LIST
39474: LIST
39475: LIST
39476: LIST
39477: LIST
39478: LIST
39479: LIST
39480: LIST
39481: LIST
39482: LIST
39483: LIST
39484: LIST
39485: LIST
39486: LIST
39487: LIST
39488: LIST
39489: LIST
39490: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39491: LD_ADDR_VAR 0 18
39495: PUSH
39496: LD_INT 0
39498: PUSH
39499: LD_INT 0
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: PUSH
39506: LD_INT 0
39508: PUSH
39509: LD_INT 1
39511: NEG
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: PUSH
39517: LD_INT 1
39519: PUSH
39520: LD_INT 0
39522: PUSH
39523: EMPTY
39524: LIST
39525: LIST
39526: PUSH
39527: LD_INT 1
39529: PUSH
39530: LD_INT 1
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: PUSH
39537: LD_INT 0
39539: PUSH
39540: LD_INT 1
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: PUSH
39547: LD_INT 1
39549: NEG
39550: PUSH
39551: LD_INT 0
39553: PUSH
39554: EMPTY
39555: LIST
39556: LIST
39557: PUSH
39558: LD_INT 1
39560: NEG
39561: PUSH
39562: LD_INT 1
39564: NEG
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PUSH
39570: LD_INT 1
39572: NEG
39573: PUSH
39574: LD_INT 2
39576: NEG
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: PUSH
39582: LD_INT 0
39584: PUSH
39585: LD_INT 2
39587: NEG
39588: PUSH
39589: EMPTY
39590: LIST
39591: LIST
39592: PUSH
39593: LD_INT 1
39595: PUSH
39596: LD_INT 1
39598: NEG
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: PUSH
39604: LD_INT 2
39606: PUSH
39607: LD_INT 0
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: PUSH
39614: LD_INT 2
39616: PUSH
39617: LD_INT 1
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: PUSH
39624: LD_INT 2
39626: PUSH
39627: LD_INT 2
39629: PUSH
39630: EMPTY
39631: LIST
39632: LIST
39633: PUSH
39634: LD_INT 1
39636: PUSH
39637: LD_INT 2
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: PUSH
39644: LD_INT 0
39646: PUSH
39647: LD_INT 2
39649: PUSH
39650: EMPTY
39651: LIST
39652: LIST
39653: PUSH
39654: LD_INT 1
39656: NEG
39657: PUSH
39658: LD_INT 1
39660: PUSH
39661: EMPTY
39662: LIST
39663: LIST
39664: PUSH
39665: LD_INT 2
39667: NEG
39668: PUSH
39669: LD_INT 0
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: PUSH
39676: LD_INT 2
39678: NEG
39679: PUSH
39680: LD_INT 1
39682: NEG
39683: PUSH
39684: EMPTY
39685: LIST
39686: LIST
39687: PUSH
39688: LD_INT 2
39690: NEG
39691: PUSH
39692: LD_INT 2
39694: NEG
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: PUSH
39700: EMPTY
39701: LIST
39702: LIST
39703: LIST
39704: LIST
39705: LIST
39706: LIST
39707: LIST
39708: LIST
39709: LIST
39710: LIST
39711: LIST
39712: LIST
39713: LIST
39714: LIST
39715: LIST
39716: LIST
39717: LIST
39718: LIST
39719: LIST
39720: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39721: LD_ADDR_VAR 0 19
39725: PUSH
39726: LD_INT 0
39728: PUSH
39729: LD_INT 0
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: PUSH
39736: LD_INT 0
39738: PUSH
39739: LD_INT 1
39741: NEG
39742: PUSH
39743: EMPTY
39744: LIST
39745: LIST
39746: PUSH
39747: LD_INT 1
39749: PUSH
39750: LD_INT 0
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: PUSH
39757: LD_INT 1
39759: PUSH
39760: LD_INT 1
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: PUSH
39767: LD_INT 0
39769: PUSH
39770: LD_INT 1
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: PUSH
39777: LD_INT 1
39779: NEG
39780: PUSH
39781: LD_INT 0
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: PUSH
39788: LD_INT 1
39790: NEG
39791: PUSH
39792: LD_INT 1
39794: NEG
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: PUSH
39800: LD_INT 1
39802: NEG
39803: PUSH
39804: LD_INT 2
39806: NEG
39807: PUSH
39808: EMPTY
39809: LIST
39810: LIST
39811: PUSH
39812: LD_INT 0
39814: PUSH
39815: LD_INT 2
39817: NEG
39818: PUSH
39819: EMPTY
39820: LIST
39821: LIST
39822: PUSH
39823: LD_INT 1
39825: PUSH
39826: LD_INT 1
39828: NEG
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: PUSH
39834: LD_INT 2
39836: PUSH
39837: LD_INT 0
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: PUSH
39844: LD_INT 2
39846: PUSH
39847: LD_INT 1
39849: PUSH
39850: EMPTY
39851: LIST
39852: LIST
39853: PUSH
39854: LD_INT 2
39856: PUSH
39857: LD_INT 2
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: PUSH
39864: LD_INT 1
39866: PUSH
39867: LD_INT 2
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: PUSH
39874: LD_INT 0
39876: PUSH
39877: LD_INT 2
39879: PUSH
39880: EMPTY
39881: LIST
39882: LIST
39883: PUSH
39884: LD_INT 1
39886: NEG
39887: PUSH
39888: LD_INT 1
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: PUSH
39895: LD_INT 2
39897: NEG
39898: PUSH
39899: LD_INT 0
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: PUSH
39906: LD_INT 2
39908: NEG
39909: PUSH
39910: LD_INT 1
39912: NEG
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PUSH
39918: LD_INT 2
39920: NEG
39921: PUSH
39922: LD_INT 2
39924: NEG
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: LIST
39934: LIST
39935: LIST
39936: LIST
39937: LIST
39938: LIST
39939: LIST
39940: LIST
39941: LIST
39942: LIST
39943: LIST
39944: LIST
39945: LIST
39946: LIST
39947: LIST
39948: LIST
39949: LIST
39950: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39951: LD_ADDR_VAR 0 20
39955: PUSH
39956: LD_INT 0
39958: PUSH
39959: LD_INT 0
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: PUSH
39966: LD_INT 0
39968: PUSH
39969: LD_INT 1
39971: NEG
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: PUSH
39977: LD_INT 1
39979: PUSH
39980: LD_INT 0
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: PUSH
39987: LD_INT 1
39989: PUSH
39990: LD_INT 1
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: LD_INT 0
39999: PUSH
40000: LD_INT 1
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: PUSH
40007: LD_INT 1
40009: NEG
40010: PUSH
40011: LD_INT 0
40013: PUSH
40014: EMPTY
40015: LIST
40016: LIST
40017: PUSH
40018: LD_INT 1
40020: NEG
40021: PUSH
40022: LD_INT 1
40024: NEG
40025: PUSH
40026: EMPTY
40027: LIST
40028: LIST
40029: PUSH
40030: LD_INT 1
40032: NEG
40033: PUSH
40034: LD_INT 2
40036: NEG
40037: PUSH
40038: EMPTY
40039: LIST
40040: LIST
40041: PUSH
40042: LD_INT 0
40044: PUSH
40045: LD_INT 2
40047: NEG
40048: PUSH
40049: EMPTY
40050: LIST
40051: LIST
40052: PUSH
40053: LD_INT 1
40055: PUSH
40056: LD_INT 1
40058: NEG
40059: PUSH
40060: EMPTY
40061: LIST
40062: LIST
40063: PUSH
40064: LD_INT 2
40066: PUSH
40067: LD_INT 0
40069: PUSH
40070: EMPTY
40071: LIST
40072: LIST
40073: PUSH
40074: LD_INT 2
40076: PUSH
40077: LD_INT 1
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: PUSH
40084: LD_INT 2
40086: PUSH
40087: LD_INT 2
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PUSH
40094: LD_INT 1
40096: PUSH
40097: LD_INT 2
40099: PUSH
40100: EMPTY
40101: LIST
40102: LIST
40103: PUSH
40104: LD_INT 0
40106: PUSH
40107: LD_INT 2
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: PUSH
40114: LD_INT 1
40116: NEG
40117: PUSH
40118: LD_INT 1
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: PUSH
40125: LD_INT 2
40127: NEG
40128: PUSH
40129: LD_INT 0
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: PUSH
40136: LD_INT 2
40138: NEG
40139: PUSH
40140: LD_INT 1
40142: NEG
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PUSH
40148: LD_INT 2
40150: NEG
40151: PUSH
40152: LD_INT 2
40154: NEG
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: LIST
40164: LIST
40165: LIST
40166: LIST
40167: LIST
40168: LIST
40169: LIST
40170: LIST
40171: LIST
40172: LIST
40173: LIST
40174: LIST
40175: LIST
40176: LIST
40177: LIST
40178: LIST
40179: LIST
40180: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40181: LD_ADDR_VAR 0 21
40185: PUSH
40186: LD_INT 0
40188: PUSH
40189: LD_INT 0
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: PUSH
40196: LD_INT 0
40198: PUSH
40199: LD_INT 1
40201: NEG
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: PUSH
40207: LD_INT 1
40209: PUSH
40210: LD_INT 0
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: PUSH
40217: LD_INT 1
40219: PUSH
40220: LD_INT 1
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PUSH
40227: LD_INT 0
40229: PUSH
40230: LD_INT 1
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: PUSH
40237: LD_INT 1
40239: NEG
40240: PUSH
40241: LD_INT 0
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PUSH
40248: LD_INT 1
40250: NEG
40251: PUSH
40252: LD_INT 1
40254: NEG
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PUSH
40260: LD_INT 1
40262: NEG
40263: PUSH
40264: LD_INT 2
40266: NEG
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: LD_INT 0
40274: PUSH
40275: LD_INT 2
40277: NEG
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: LD_INT 1
40285: PUSH
40286: LD_INT 1
40288: NEG
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: PUSH
40294: LD_INT 2
40296: PUSH
40297: LD_INT 0
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: PUSH
40304: LD_INT 2
40306: PUSH
40307: LD_INT 1
40309: PUSH
40310: EMPTY
40311: LIST
40312: LIST
40313: PUSH
40314: LD_INT 2
40316: PUSH
40317: LD_INT 2
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 1
40326: PUSH
40327: LD_INT 2
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: LD_INT 0
40336: PUSH
40337: LD_INT 2
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: PUSH
40344: LD_INT 1
40346: NEG
40347: PUSH
40348: LD_INT 1
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: LD_INT 2
40357: NEG
40358: PUSH
40359: LD_INT 0
40361: PUSH
40362: EMPTY
40363: LIST
40364: LIST
40365: PUSH
40366: LD_INT 2
40368: NEG
40369: PUSH
40370: LD_INT 1
40372: NEG
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: PUSH
40378: LD_INT 2
40380: NEG
40381: PUSH
40382: LD_INT 2
40384: NEG
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: PUSH
40390: EMPTY
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: LIST
40407: LIST
40408: LIST
40409: LIST
40410: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40411: LD_ADDR_VAR 0 22
40415: PUSH
40416: LD_INT 0
40418: PUSH
40419: LD_INT 0
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: PUSH
40426: LD_INT 0
40428: PUSH
40429: LD_INT 1
40431: NEG
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: PUSH
40437: LD_INT 1
40439: PUSH
40440: LD_INT 0
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: LD_INT 1
40449: PUSH
40450: LD_INT 1
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PUSH
40457: LD_INT 0
40459: PUSH
40460: LD_INT 1
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 1
40469: NEG
40470: PUSH
40471: LD_INT 0
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PUSH
40478: LD_INT 1
40480: NEG
40481: PUSH
40482: LD_INT 1
40484: NEG
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 1
40492: NEG
40493: PUSH
40494: LD_INT 2
40496: NEG
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: PUSH
40502: LD_INT 0
40504: PUSH
40505: LD_INT 2
40507: NEG
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: PUSH
40513: LD_INT 1
40515: PUSH
40516: LD_INT 1
40518: NEG
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PUSH
40524: LD_INT 2
40526: PUSH
40527: LD_INT 0
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 2
40536: PUSH
40537: LD_INT 1
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PUSH
40544: LD_INT 2
40546: PUSH
40547: LD_INT 2
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: LD_INT 1
40556: PUSH
40557: LD_INT 2
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: PUSH
40564: LD_INT 0
40566: PUSH
40567: LD_INT 2
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 1
40576: NEG
40577: PUSH
40578: LD_INT 1
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: PUSH
40585: LD_INT 2
40587: NEG
40588: PUSH
40589: LD_INT 0
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: PUSH
40596: LD_INT 2
40598: NEG
40599: PUSH
40600: LD_INT 1
40602: NEG
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: LD_INT 2
40610: NEG
40611: PUSH
40612: LD_INT 2
40614: NEG
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: LIST
40640: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40641: LD_ADDR_VAR 0 23
40645: PUSH
40646: LD_INT 0
40648: PUSH
40649: LD_INT 0
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: PUSH
40656: LD_INT 0
40658: PUSH
40659: LD_INT 1
40661: NEG
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: PUSH
40667: LD_INT 1
40669: PUSH
40670: LD_INT 0
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 1
40679: PUSH
40680: LD_INT 1
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: PUSH
40687: LD_INT 0
40689: PUSH
40690: LD_INT 1
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: PUSH
40697: LD_INT 1
40699: NEG
40700: PUSH
40701: LD_INT 0
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: PUSH
40708: LD_INT 1
40710: NEG
40711: PUSH
40712: LD_INT 1
40714: NEG
40715: PUSH
40716: EMPTY
40717: LIST
40718: LIST
40719: PUSH
40720: LD_INT 1
40722: NEG
40723: PUSH
40724: LD_INT 2
40726: NEG
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: PUSH
40732: LD_INT 0
40734: PUSH
40735: LD_INT 2
40737: NEG
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: PUSH
40743: LD_INT 1
40745: PUSH
40746: LD_INT 1
40748: NEG
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: PUSH
40754: LD_INT 2
40756: PUSH
40757: LD_INT 0
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: PUSH
40764: LD_INT 2
40766: PUSH
40767: LD_INT 1
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: LD_INT 2
40776: PUSH
40777: LD_INT 2
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: LD_INT 1
40786: PUSH
40787: LD_INT 2
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: LD_INT 0
40796: PUSH
40797: LD_INT 2
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 1
40806: NEG
40807: PUSH
40808: LD_INT 1
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: PUSH
40815: LD_INT 2
40817: NEG
40818: PUSH
40819: LD_INT 0
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: PUSH
40826: LD_INT 2
40828: NEG
40829: PUSH
40830: LD_INT 1
40832: NEG
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: PUSH
40838: LD_INT 2
40840: NEG
40841: PUSH
40842: LD_INT 2
40844: NEG
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: PUSH
40850: LD_INT 2
40852: NEG
40853: PUSH
40854: LD_INT 3
40856: NEG
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: PUSH
40862: LD_INT 1
40864: NEG
40865: PUSH
40866: LD_INT 3
40868: NEG
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: PUSH
40874: LD_INT 1
40876: PUSH
40877: LD_INT 2
40879: NEG
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: PUSH
40885: LD_INT 2
40887: PUSH
40888: LD_INT 1
40890: NEG
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: LIST
40908: LIST
40909: LIST
40910: LIST
40911: LIST
40912: LIST
40913: LIST
40914: LIST
40915: LIST
40916: LIST
40917: LIST
40918: LIST
40919: LIST
40920: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
40921: LD_ADDR_VAR 0 24
40925: PUSH
40926: LD_INT 0
40928: PUSH
40929: LD_INT 0
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: PUSH
40936: LD_INT 0
40938: PUSH
40939: LD_INT 1
40941: NEG
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PUSH
40947: LD_INT 1
40949: PUSH
40950: LD_INT 0
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PUSH
40957: LD_INT 1
40959: PUSH
40960: LD_INT 1
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: LD_INT 0
40969: PUSH
40970: LD_INT 1
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: PUSH
40977: LD_INT 1
40979: NEG
40980: PUSH
40981: LD_INT 0
40983: PUSH
40984: EMPTY
40985: LIST
40986: LIST
40987: PUSH
40988: LD_INT 1
40990: NEG
40991: PUSH
40992: LD_INT 1
40994: NEG
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: PUSH
41000: LD_INT 1
41002: NEG
41003: PUSH
41004: LD_INT 2
41006: NEG
41007: PUSH
41008: EMPTY
41009: LIST
41010: LIST
41011: PUSH
41012: LD_INT 0
41014: PUSH
41015: LD_INT 2
41017: NEG
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: PUSH
41023: LD_INT 1
41025: PUSH
41026: LD_INT 1
41028: NEG
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 2
41036: PUSH
41037: LD_INT 0
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PUSH
41044: LD_INT 2
41046: PUSH
41047: LD_INT 1
41049: PUSH
41050: EMPTY
41051: LIST
41052: LIST
41053: PUSH
41054: LD_INT 2
41056: PUSH
41057: LD_INT 2
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: PUSH
41064: LD_INT 1
41066: PUSH
41067: LD_INT 2
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: PUSH
41074: LD_INT 0
41076: PUSH
41077: LD_INT 2
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: PUSH
41084: LD_INT 1
41086: NEG
41087: PUSH
41088: LD_INT 1
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: PUSH
41095: LD_INT 2
41097: NEG
41098: PUSH
41099: LD_INT 0
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: LD_INT 2
41108: NEG
41109: PUSH
41110: LD_INT 1
41112: NEG
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: PUSH
41118: LD_INT 2
41120: NEG
41121: PUSH
41122: LD_INT 2
41124: NEG
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: PUSH
41130: LD_INT 1
41132: PUSH
41133: LD_INT 2
41135: NEG
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: LD_INT 2
41143: PUSH
41144: LD_INT 1
41146: NEG
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: LD_INT 3
41154: PUSH
41155: LD_INT 1
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: LD_INT 3
41164: PUSH
41165: LD_INT 2
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: LIST
41189: LIST
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: LIST
41195: LIST
41196: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
41197: LD_ADDR_VAR 0 25
41201: PUSH
41202: LD_INT 0
41204: PUSH
41205: LD_INT 0
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: PUSH
41212: LD_INT 0
41214: PUSH
41215: LD_INT 1
41217: NEG
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PUSH
41223: LD_INT 1
41225: PUSH
41226: LD_INT 0
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: PUSH
41233: LD_INT 1
41235: PUSH
41236: LD_INT 1
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: PUSH
41243: LD_INT 0
41245: PUSH
41246: LD_INT 1
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: LD_INT 1
41255: NEG
41256: PUSH
41257: LD_INT 0
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 1
41266: NEG
41267: PUSH
41268: LD_INT 1
41270: NEG
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: PUSH
41276: LD_INT 1
41278: NEG
41279: PUSH
41280: LD_INT 2
41282: NEG
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PUSH
41288: LD_INT 0
41290: PUSH
41291: LD_INT 2
41293: NEG
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: LD_INT 1
41301: PUSH
41302: LD_INT 1
41304: NEG
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 2
41312: PUSH
41313: LD_INT 0
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 2
41322: PUSH
41323: LD_INT 1
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 2
41332: PUSH
41333: LD_INT 2
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 1
41342: PUSH
41343: LD_INT 2
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: LD_INT 0
41352: PUSH
41353: LD_INT 2
41355: PUSH
41356: EMPTY
41357: LIST
41358: LIST
41359: PUSH
41360: LD_INT 1
41362: NEG
41363: PUSH
41364: LD_INT 1
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: LD_INT 2
41373: NEG
41374: PUSH
41375: LD_INT 0
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: PUSH
41382: LD_INT 2
41384: NEG
41385: PUSH
41386: LD_INT 1
41388: NEG
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: LD_INT 2
41396: NEG
41397: PUSH
41398: LD_INT 2
41400: NEG
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: LD_INT 3
41408: PUSH
41409: LD_INT 1
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 3
41418: PUSH
41419: LD_INT 2
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: LD_INT 2
41428: PUSH
41429: LD_INT 3
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: PUSH
41436: LD_INT 1
41438: PUSH
41439: LD_INT 3
41441: PUSH
41442: EMPTY
41443: LIST
41444: LIST
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: LIST
41461: LIST
41462: LIST
41463: LIST
41464: LIST
41465: LIST
41466: LIST
41467: LIST
41468: LIST
41469: LIST
41470: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
41471: LD_ADDR_VAR 0 26
41475: PUSH
41476: LD_INT 0
41478: PUSH
41479: LD_INT 0
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PUSH
41486: LD_INT 0
41488: PUSH
41489: LD_INT 1
41491: NEG
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: PUSH
41497: LD_INT 1
41499: PUSH
41500: LD_INT 0
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: PUSH
41507: LD_INT 1
41509: PUSH
41510: LD_INT 1
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: PUSH
41517: LD_INT 0
41519: PUSH
41520: LD_INT 1
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: LD_INT 1
41529: NEG
41530: PUSH
41531: LD_INT 0
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 1
41540: NEG
41541: PUSH
41542: LD_INT 1
41544: NEG
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 1
41552: NEG
41553: PUSH
41554: LD_INT 2
41556: NEG
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: PUSH
41562: LD_INT 0
41564: PUSH
41565: LD_INT 2
41567: NEG
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: PUSH
41573: LD_INT 1
41575: PUSH
41576: LD_INT 1
41578: NEG
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: LD_INT 2
41586: PUSH
41587: LD_INT 0
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: PUSH
41594: LD_INT 2
41596: PUSH
41597: LD_INT 1
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: LD_INT 2
41606: PUSH
41607: LD_INT 2
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: PUSH
41614: LD_INT 1
41616: PUSH
41617: LD_INT 2
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: PUSH
41624: LD_INT 0
41626: PUSH
41627: LD_INT 2
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: PUSH
41634: LD_INT 1
41636: NEG
41637: PUSH
41638: LD_INT 1
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: PUSH
41645: LD_INT 2
41647: NEG
41648: PUSH
41649: LD_INT 0
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: PUSH
41656: LD_INT 2
41658: NEG
41659: PUSH
41660: LD_INT 1
41662: NEG
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: PUSH
41668: LD_INT 2
41670: NEG
41671: PUSH
41672: LD_INT 2
41674: NEG
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: PUSH
41680: LD_INT 2
41682: PUSH
41683: LD_INT 3
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: PUSH
41690: LD_INT 1
41692: PUSH
41693: LD_INT 3
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: LD_INT 1
41702: NEG
41703: PUSH
41704: LD_INT 2
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: LD_INT 2
41713: NEG
41714: PUSH
41715: LD_INT 1
41717: PUSH
41718: EMPTY
41719: LIST
41720: LIST
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: LIST
41733: LIST
41734: LIST
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41747: LD_ADDR_VAR 0 27
41751: PUSH
41752: LD_INT 0
41754: PUSH
41755: LD_INT 0
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: PUSH
41762: LD_INT 0
41764: PUSH
41765: LD_INT 1
41767: NEG
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: PUSH
41773: LD_INT 1
41775: PUSH
41776: LD_INT 0
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: PUSH
41783: LD_INT 1
41785: PUSH
41786: LD_INT 1
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: PUSH
41793: LD_INT 0
41795: PUSH
41796: LD_INT 1
41798: PUSH
41799: EMPTY
41800: LIST
41801: LIST
41802: PUSH
41803: LD_INT 1
41805: NEG
41806: PUSH
41807: LD_INT 0
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: PUSH
41814: LD_INT 1
41816: NEG
41817: PUSH
41818: LD_INT 1
41820: NEG
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: PUSH
41826: LD_INT 1
41828: NEG
41829: PUSH
41830: LD_INT 2
41832: NEG
41833: PUSH
41834: EMPTY
41835: LIST
41836: LIST
41837: PUSH
41838: LD_INT 0
41840: PUSH
41841: LD_INT 2
41843: NEG
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: PUSH
41849: LD_INT 1
41851: PUSH
41852: LD_INT 1
41854: NEG
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: PUSH
41860: LD_INT 2
41862: PUSH
41863: LD_INT 0
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: PUSH
41870: LD_INT 2
41872: PUSH
41873: LD_INT 1
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: PUSH
41880: LD_INT 2
41882: PUSH
41883: LD_INT 2
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: PUSH
41890: LD_INT 1
41892: PUSH
41893: LD_INT 2
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: PUSH
41900: LD_INT 0
41902: PUSH
41903: LD_INT 2
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PUSH
41910: LD_INT 1
41912: NEG
41913: PUSH
41914: LD_INT 1
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 2
41923: NEG
41924: PUSH
41925: LD_INT 0
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: LD_INT 2
41934: NEG
41935: PUSH
41936: LD_INT 1
41938: NEG
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: LD_INT 2
41946: NEG
41947: PUSH
41948: LD_INT 2
41950: NEG
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: PUSH
41956: LD_INT 1
41958: NEG
41959: PUSH
41960: LD_INT 2
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: PUSH
41967: LD_INT 2
41969: NEG
41970: PUSH
41971: LD_INT 1
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: LD_INT 3
41980: NEG
41981: PUSH
41982: LD_INT 1
41984: NEG
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: PUSH
41990: LD_INT 3
41992: NEG
41993: PUSH
41994: LD_INT 2
41996: NEG
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: LIST
42026: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42027: LD_ADDR_VAR 0 28
42031: PUSH
42032: LD_INT 0
42034: PUSH
42035: LD_INT 0
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: PUSH
42042: LD_INT 0
42044: PUSH
42045: LD_INT 1
42047: NEG
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: LD_INT 1
42055: PUSH
42056: LD_INT 0
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: PUSH
42063: LD_INT 1
42065: PUSH
42066: LD_INT 1
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 0
42075: PUSH
42076: LD_INT 1
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 1
42085: NEG
42086: PUSH
42087: LD_INT 0
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 1
42096: NEG
42097: PUSH
42098: LD_INT 1
42100: NEG
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PUSH
42106: LD_INT 1
42108: NEG
42109: PUSH
42110: LD_INT 2
42112: NEG
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: LD_INT 0
42120: PUSH
42121: LD_INT 2
42123: NEG
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: PUSH
42129: LD_INT 1
42131: PUSH
42132: LD_INT 1
42134: NEG
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 2
42142: PUSH
42143: LD_INT 0
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PUSH
42150: LD_INT 2
42152: PUSH
42153: LD_INT 1
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: LD_INT 2
42162: PUSH
42163: LD_INT 2
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 1
42172: PUSH
42173: LD_INT 2
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: PUSH
42180: LD_INT 0
42182: PUSH
42183: LD_INT 2
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: PUSH
42190: LD_INT 1
42192: NEG
42193: PUSH
42194: LD_INT 1
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: LD_INT 2
42203: NEG
42204: PUSH
42205: LD_INT 0
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_INT 2
42214: NEG
42215: PUSH
42216: LD_INT 1
42218: NEG
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: LD_INT 2
42226: NEG
42227: PUSH
42228: LD_INT 2
42230: NEG
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: PUSH
42236: LD_INT 2
42238: NEG
42239: PUSH
42240: LD_INT 3
42242: NEG
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 1
42250: NEG
42251: PUSH
42252: LD_INT 3
42254: NEG
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 3
42262: NEG
42263: PUSH
42264: LD_INT 1
42266: NEG
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 3
42274: NEG
42275: PUSH
42276: LD_INT 2
42278: NEG
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: LIST
42295: LIST
42296: LIST
42297: LIST
42298: LIST
42299: LIST
42300: LIST
42301: LIST
42302: LIST
42303: LIST
42304: LIST
42305: LIST
42306: LIST
42307: LIST
42308: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42309: LD_ADDR_VAR 0 29
42313: PUSH
42314: LD_INT 0
42316: PUSH
42317: LD_INT 0
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PUSH
42324: LD_INT 0
42326: PUSH
42327: LD_INT 1
42329: NEG
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PUSH
42335: LD_INT 1
42337: PUSH
42338: LD_INT 0
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 1
42347: PUSH
42348: LD_INT 1
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: PUSH
42355: LD_INT 0
42357: PUSH
42358: LD_INT 1
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: PUSH
42365: LD_INT 1
42367: NEG
42368: PUSH
42369: LD_INT 0
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PUSH
42376: LD_INT 1
42378: NEG
42379: PUSH
42380: LD_INT 1
42382: NEG
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 1
42390: NEG
42391: PUSH
42392: LD_INT 2
42394: NEG
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: LD_INT 0
42402: PUSH
42403: LD_INT 2
42405: NEG
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: LD_INT 1
42413: PUSH
42414: LD_INT 1
42416: NEG
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 2
42424: PUSH
42425: LD_INT 0
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 2
42434: PUSH
42435: LD_INT 1
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PUSH
42442: LD_INT 1
42444: PUSH
42445: LD_INT 2
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: PUSH
42452: LD_INT 0
42454: PUSH
42455: LD_INT 2
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: PUSH
42462: LD_INT 1
42464: NEG
42465: PUSH
42466: LD_INT 1
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: PUSH
42473: LD_INT 2
42475: NEG
42476: PUSH
42477: LD_INT 1
42479: NEG
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PUSH
42485: LD_INT 2
42487: NEG
42488: PUSH
42489: LD_INT 2
42491: NEG
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: PUSH
42497: LD_INT 2
42499: NEG
42500: PUSH
42501: LD_INT 3
42503: NEG
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: PUSH
42509: LD_INT 2
42511: PUSH
42512: LD_INT 1
42514: NEG
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: PUSH
42520: LD_INT 3
42522: PUSH
42523: LD_INT 1
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 1
42532: PUSH
42533: LD_INT 3
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: PUSH
42540: LD_INT 1
42542: NEG
42543: PUSH
42544: LD_INT 2
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: PUSH
42551: LD_INT 3
42553: NEG
42554: PUSH
42555: LD_INT 2
42557: NEG
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: LIST
42583: LIST
42584: LIST
42585: LIST
42586: LIST
42587: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42588: LD_ADDR_VAR 0 30
42592: PUSH
42593: LD_INT 0
42595: PUSH
42596: LD_INT 0
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: LD_INT 0
42605: PUSH
42606: LD_INT 1
42608: NEG
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: LD_INT 1
42616: PUSH
42617: LD_INT 0
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: PUSH
42624: LD_INT 1
42626: PUSH
42627: LD_INT 1
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 0
42636: PUSH
42637: LD_INT 1
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 1
42646: NEG
42647: PUSH
42648: LD_INT 0
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: PUSH
42655: LD_INT 1
42657: NEG
42658: PUSH
42659: LD_INT 1
42661: NEG
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: LD_INT 1
42669: NEG
42670: PUSH
42671: LD_INT 2
42673: NEG
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: PUSH
42679: LD_INT 0
42681: PUSH
42682: LD_INT 2
42684: NEG
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: LD_INT 1
42692: PUSH
42693: LD_INT 1
42695: NEG
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: PUSH
42701: LD_INT 2
42703: PUSH
42704: LD_INT 0
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: LD_INT 2
42713: PUSH
42714: LD_INT 1
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: PUSH
42721: LD_INT 2
42723: PUSH
42724: LD_INT 2
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 1
42733: PUSH
42734: LD_INT 2
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 1
42743: NEG
42744: PUSH
42745: LD_INT 1
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 2
42754: NEG
42755: PUSH
42756: LD_INT 0
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: PUSH
42763: LD_INT 2
42765: NEG
42766: PUSH
42767: LD_INT 1
42769: NEG
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: LD_INT 1
42777: NEG
42778: PUSH
42779: LD_INT 3
42781: NEG
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: LD_INT 1
42789: PUSH
42790: LD_INT 2
42792: NEG
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: PUSH
42798: LD_INT 3
42800: PUSH
42801: LD_INT 2
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: PUSH
42808: LD_INT 2
42810: PUSH
42811: LD_INT 3
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: LD_INT 2
42820: NEG
42821: PUSH
42822: LD_INT 1
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: PUSH
42829: LD_INT 3
42831: NEG
42832: PUSH
42833: LD_INT 1
42835: NEG
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: LIST
42853: LIST
42854: LIST
42855: LIST
42856: LIST
42857: LIST
42858: LIST
42859: LIST
42860: LIST
42861: LIST
42862: LIST
42863: LIST
42864: LIST
42865: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42866: LD_ADDR_VAR 0 31
42870: PUSH
42871: LD_INT 0
42873: PUSH
42874: LD_INT 0
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: PUSH
42881: LD_INT 0
42883: PUSH
42884: LD_INT 1
42886: NEG
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 1
42894: PUSH
42895: LD_INT 0
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: LD_INT 1
42904: PUSH
42905: LD_INT 1
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: PUSH
42912: LD_INT 0
42914: PUSH
42915: LD_INT 1
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: PUSH
42922: LD_INT 1
42924: NEG
42925: PUSH
42926: LD_INT 0
42928: PUSH
42929: EMPTY
42930: LIST
42931: LIST
42932: PUSH
42933: LD_INT 1
42935: NEG
42936: PUSH
42937: LD_INT 1
42939: NEG
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: PUSH
42945: LD_INT 1
42947: NEG
42948: PUSH
42949: LD_INT 2
42951: NEG
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: PUSH
42957: LD_INT 1
42959: PUSH
42960: LD_INT 1
42962: NEG
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: LD_INT 2
42970: PUSH
42971: LD_INT 0
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 2
42980: PUSH
42981: LD_INT 1
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: LD_INT 2
42990: PUSH
42991: LD_INT 2
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: PUSH
42998: LD_INT 1
43000: PUSH
43001: LD_INT 2
43003: PUSH
43004: EMPTY
43005: LIST
43006: LIST
43007: PUSH
43008: LD_INT 0
43010: PUSH
43011: LD_INT 2
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 1
43020: NEG
43021: PUSH
43022: LD_INT 1
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: PUSH
43029: LD_INT 2
43031: NEG
43032: PUSH
43033: LD_INT 1
43035: NEG
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: PUSH
43041: LD_INT 2
43043: NEG
43044: PUSH
43045: LD_INT 2
43047: NEG
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: PUSH
43053: LD_INT 2
43055: NEG
43056: PUSH
43057: LD_INT 3
43059: NEG
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: LD_INT 2
43067: PUSH
43068: LD_INT 1
43070: NEG
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: PUSH
43076: LD_INT 3
43078: PUSH
43079: LD_INT 1
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: LD_INT 1
43088: PUSH
43089: LD_INT 3
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 1
43098: NEG
43099: PUSH
43100: LD_INT 2
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: LD_INT 3
43109: NEG
43110: PUSH
43111: LD_INT 2
43113: NEG
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: LIST
43127: LIST
43128: LIST
43129: LIST
43130: LIST
43131: LIST
43132: LIST
43133: LIST
43134: LIST
43135: LIST
43136: LIST
43137: LIST
43138: LIST
43139: LIST
43140: LIST
43141: LIST
43142: LIST
43143: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43144: LD_ADDR_VAR 0 32
43148: PUSH
43149: LD_INT 0
43151: PUSH
43152: LD_INT 0
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PUSH
43159: LD_INT 0
43161: PUSH
43162: LD_INT 1
43164: NEG
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: LD_INT 1
43172: PUSH
43173: LD_INT 0
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: LD_INT 1
43182: PUSH
43183: LD_INT 1
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 0
43192: PUSH
43193: LD_INT 1
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PUSH
43200: LD_INT 1
43202: NEG
43203: PUSH
43204: LD_INT 0
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: PUSH
43211: LD_INT 1
43213: NEG
43214: PUSH
43215: LD_INT 1
43217: NEG
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: LD_INT 1
43225: NEG
43226: PUSH
43227: LD_INT 2
43229: NEG
43230: PUSH
43231: EMPTY
43232: LIST
43233: LIST
43234: PUSH
43235: LD_INT 0
43237: PUSH
43238: LD_INT 2
43240: NEG
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: PUSH
43246: LD_INT 1
43248: PUSH
43249: LD_INT 1
43251: NEG
43252: PUSH
43253: EMPTY
43254: LIST
43255: LIST
43256: PUSH
43257: LD_INT 2
43259: PUSH
43260: LD_INT 1
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: PUSH
43267: LD_INT 2
43269: PUSH
43270: LD_INT 2
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: LD_INT 1
43279: PUSH
43280: LD_INT 2
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 0
43289: PUSH
43290: LD_INT 2
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: LD_INT 1
43299: NEG
43300: PUSH
43301: LD_INT 1
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 2
43310: NEG
43311: PUSH
43312: LD_INT 0
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: PUSH
43319: LD_INT 2
43321: NEG
43322: PUSH
43323: LD_INT 1
43325: NEG
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: PUSH
43331: LD_INT 1
43333: NEG
43334: PUSH
43335: LD_INT 3
43337: NEG
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: LD_INT 1
43345: PUSH
43346: LD_INT 2
43348: NEG
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: LD_INT 3
43356: PUSH
43357: LD_INT 2
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: PUSH
43364: LD_INT 2
43366: PUSH
43367: LD_INT 3
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: PUSH
43374: LD_INT 2
43376: NEG
43377: PUSH
43378: LD_INT 1
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: LD_INT 3
43387: NEG
43388: PUSH
43389: LD_INT 1
43391: NEG
43392: PUSH
43393: EMPTY
43394: LIST
43395: LIST
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: LIST
43401: LIST
43402: LIST
43403: LIST
43404: LIST
43405: LIST
43406: LIST
43407: LIST
43408: LIST
43409: LIST
43410: LIST
43411: LIST
43412: LIST
43413: LIST
43414: LIST
43415: LIST
43416: LIST
43417: LIST
43418: LIST
43419: LIST
43420: LIST
43421: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43422: LD_ADDR_VAR 0 33
43426: PUSH
43427: LD_INT 0
43429: PUSH
43430: LD_INT 0
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 0
43439: PUSH
43440: LD_INT 1
43442: NEG
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 1
43450: PUSH
43451: LD_INT 0
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 1
43460: PUSH
43461: LD_INT 1
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: LD_INT 0
43470: PUSH
43471: LD_INT 1
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: PUSH
43478: LD_INT 1
43480: NEG
43481: PUSH
43482: LD_INT 0
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 1
43491: NEG
43492: PUSH
43493: LD_INT 1
43495: NEG
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 1
43503: NEG
43504: PUSH
43505: LD_INT 2
43507: NEG
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: PUSH
43513: LD_INT 1
43515: PUSH
43516: LD_INT 1
43518: NEG
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: PUSH
43524: LD_INT 2
43526: PUSH
43527: LD_INT 0
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: LD_INT 2
43536: PUSH
43537: LD_INT 1
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: LD_INT 1
43546: PUSH
43547: LD_INT 2
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: LD_INT 0
43556: PUSH
43557: LD_INT 2
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: LD_INT 1
43566: NEG
43567: PUSH
43568: LD_INT 1
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_INT 2
43577: NEG
43578: PUSH
43579: LD_INT 0
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: LD_INT 2
43588: NEG
43589: PUSH
43590: LD_INT 1
43592: NEG
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: LD_INT 2
43600: NEG
43601: PUSH
43602: LD_INT 2
43604: NEG
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: LD_INT 2
43612: NEG
43613: PUSH
43614: LD_INT 3
43616: NEG
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: PUSH
43622: LD_INT 2
43624: PUSH
43625: LD_INT 1
43627: NEG
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 3
43635: PUSH
43636: LD_INT 1
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: PUSH
43643: LD_INT 1
43645: PUSH
43646: LD_INT 3
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: PUSH
43653: LD_INT 1
43655: NEG
43656: PUSH
43657: LD_INT 2
43659: PUSH
43660: EMPTY
43661: LIST
43662: LIST
43663: PUSH
43664: LD_INT 3
43666: NEG
43667: PUSH
43668: LD_INT 2
43670: NEG
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: LIST
43693: LIST
43694: LIST
43695: LIST
43696: LIST
43697: LIST
43698: LIST
43699: LIST
43700: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43701: LD_ADDR_VAR 0 34
43705: PUSH
43706: LD_INT 0
43708: PUSH
43709: LD_INT 0
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: PUSH
43716: LD_INT 0
43718: PUSH
43719: LD_INT 1
43721: NEG
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: PUSH
43727: LD_INT 1
43729: PUSH
43730: LD_INT 0
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: LD_INT 1
43739: PUSH
43740: LD_INT 1
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: PUSH
43747: LD_INT 0
43749: PUSH
43750: LD_INT 1
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PUSH
43757: LD_INT 1
43759: NEG
43760: PUSH
43761: LD_INT 0
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: PUSH
43768: LD_INT 1
43770: NEG
43771: PUSH
43772: LD_INT 1
43774: NEG
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PUSH
43780: LD_INT 1
43782: NEG
43783: PUSH
43784: LD_INT 2
43786: NEG
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: PUSH
43792: LD_INT 0
43794: PUSH
43795: LD_INT 2
43797: NEG
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: PUSH
43803: LD_INT 1
43805: PUSH
43806: LD_INT 1
43808: NEG
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: PUSH
43814: LD_INT 2
43816: PUSH
43817: LD_INT 1
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: PUSH
43824: LD_INT 2
43826: PUSH
43827: LD_INT 2
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: LD_INT 1
43836: PUSH
43837: LD_INT 2
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 1
43846: NEG
43847: PUSH
43848: LD_INT 1
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 2
43857: NEG
43858: PUSH
43859: LD_INT 0
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PUSH
43866: LD_INT 2
43868: NEG
43869: PUSH
43870: LD_INT 1
43872: NEG
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: LD_INT 2
43880: NEG
43881: PUSH
43882: LD_INT 2
43884: NEG
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PUSH
43890: LD_INT 1
43892: NEG
43893: PUSH
43894: LD_INT 3
43896: NEG
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: LD_INT 1
43904: PUSH
43905: LD_INT 2
43907: NEG
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 3
43915: PUSH
43916: LD_INT 2
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 2
43925: PUSH
43926: LD_INT 3
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PUSH
43933: LD_INT 2
43935: NEG
43936: PUSH
43937: LD_INT 1
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 3
43946: NEG
43947: PUSH
43948: LD_INT 1
43950: NEG
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43981: LD_ADDR_VAR 0 35
43985: PUSH
43986: LD_INT 0
43988: PUSH
43989: LD_INT 0
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: PUSH
43996: LD_INT 0
43998: PUSH
43999: LD_INT 1
44001: NEG
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: LD_INT 1
44009: PUSH
44010: LD_INT 0
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: PUSH
44017: LD_INT 1
44019: PUSH
44020: LD_INT 1
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 0
44029: PUSH
44030: LD_INT 1
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: LD_INT 1
44039: NEG
44040: PUSH
44041: LD_INT 0
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: PUSH
44048: LD_INT 1
44050: NEG
44051: PUSH
44052: LD_INT 1
44054: NEG
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: PUSH
44060: LD_INT 2
44062: PUSH
44063: LD_INT 1
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PUSH
44070: LD_INT 2
44072: NEG
44073: PUSH
44074: LD_INT 1
44076: NEG
44077: PUSH
44078: EMPTY
44079: LIST
44080: LIST
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: LIST
44086: LIST
44087: LIST
44088: LIST
44089: LIST
44090: LIST
44091: LIST
44092: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44093: LD_ADDR_VAR 0 36
44097: PUSH
44098: LD_INT 0
44100: PUSH
44101: LD_INT 0
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 0
44110: PUSH
44111: LD_INT 1
44113: NEG
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: LD_INT 1
44121: PUSH
44122: LD_INT 0
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 1
44131: PUSH
44132: LD_INT 1
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: LD_INT 0
44141: PUSH
44142: LD_INT 1
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_INT 1
44151: NEG
44152: PUSH
44153: LD_INT 0
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 1
44162: NEG
44163: PUSH
44164: LD_INT 1
44166: NEG
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: LD_INT 1
44174: NEG
44175: PUSH
44176: LD_INT 2
44178: NEG
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PUSH
44184: LD_INT 1
44186: PUSH
44187: LD_INT 2
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: PUSH
44194: EMPTY
44195: LIST
44196: LIST
44197: LIST
44198: LIST
44199: LIST
44200: LIST
44201: LIST
44202: LIST
44203: LIST
44204: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44205: LD_ADDR_VAR 0 37
44209: PUSH
44210: LD_INT 0
44212: PUSH
44213: LD_INT 0
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 0
44222: PUSH
44223: LD_INT 1
44225: NEG
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 1
44233: PUSH
44234: LD_INT 0
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: LD_INT 1
44243: PUSH
44244: LD_INT 1
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 0
44253: PUSH
44254: LD_INT 1
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: PUSH
44261: LD_INT 1
44263: NEG
44264: PUSH
44265: LD_INT 0
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PUSH
44272: LD_INT 1
44274: NEG
44275: PUSH
44276: LD_INT 1
44278: NEG
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: PUSH
44284: LD_INT 1
44286: PUSH
44287: LD_INT 1
44289: NEG
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: PUSH
44295: LD_INT 1
44297: NEG
44298: PUSH
44299: LD_INT 1
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44317: LD_ADDR_VAR 0 38
44321: PUSH
44322: LD_INT 0
44324: PUSH
44325: LD_INT 0
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 0
44334: PUSH
44335: LD_INT 1
44337: NEG
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 1
44345: PUSH
44346: LD_INT 0
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: LD_INT 1
44355: PUSH
44356: LD_INT 1
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: PUSH
44363: LD_INT 0
44365: PUSH
44366: LD_INT 1
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 1
44375: NEG
44376: PUSH
44377: LD_INT 0
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: PUSH
44384: LD_INT 1
44386: NEG
44387: PUSH
44388: LD_INT 1
44390: NEG
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 2
44398: PUSH
44399: LD_INT 1
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: LD_INT 2
44408: NEG
44409: PUSH
44410: LD_INT 1
44412: NEG
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: LIST
44425: LIST
44426: LIST
44427: LIST
44428: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44429: LD_ADDR_VAR 0 39
44433: PUSH
44434: LD_INT 0
44436: PUSH
44437: LD_INT 0
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: PUSH
44444: LD_INT 0
44446: PUSH
44447: LD_INT 1
44449: NEG
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PUSH
44455: LD_INT 1
44457: PUSH
44458: LD_INT 0
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: PUSH
44465: LD_INT 1
44467: PUSH
44468: LD_INT 1
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: LD_INT 0
44477: PUSH
44478: LD_INT 1
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: LD_INT 1
44487: NEG
44488: PUSH
44489: LD_INT 0
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 1
44498: NEG
44499: PUSH
44500: LD_INT 1
44502: NEG
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PUSH
44508: LD_INT 1
44510: NEG
44511: PUSH
44512: LD_INT 2
44514: NEG
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: PUSH
44520: LD_INT 1
44522: PUSH
44523: LD_INT 2
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: LIST
44534: LIST
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: LIST
44540: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44541: LD_ADDR_VAR 0 40
44545: PUSH
44546: LD_INT 0
44548: PUSH
44549: LD_INT 0
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PUSH
44556: LD_INT 0
44558: PUSH
44559: LD_INT 1
44561: NEG
44562: PUSH
44563: EMPTY
44564: LIST
44565: LIST
44566: PUSH
44567: LD_INT 1
44569: PUSH
44570: LD_INT 0
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PUSH
44577: LD_INT 1
44579: PUSH
44580: LD_INT 1
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 0
44589: PUSH
44590: LD_INT 1
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: PUSH
44597: LD_INT 1
44599: NEG
44600: PUSH
44601: LD_INT 0
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: LD_INT 1
44610: NEG
44611: PUSH
44612: LD_INT 1
44614: NEG
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: PUSH
44620: LD_INT 1
44622: PUSH
44623: LD_INT 1
44625: NEG
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 1
44633: NEG
44634: PUSH
44635: LD_INT 1
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: LIST
44646: LIST
44647: LIST
44648: LIST
44649: LIST
44650: LIST
44651: LIST
44652: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44653: LD_ADDR_VAR 0 41
44657: PUSH
44658: LD_INT 0
44660: PUSH
44661: LD_INT 0
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 0
44670: PUSH
44671: LD_INT 1
44673: NEG
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: LD_INT 1
44681: PUSH
44682: LD_INT 0
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 1
44691: PUSH
44692: LD_INT 1
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 0
44701: PUSH
44702: LD_INT 1
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: PUSH
44709: LD_INT 1
44711: NEG
44712: PUSH
44713: LD_INT 0
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 1
44722: NEG
44723: PUSH
44724: LD_INT 1
44726: NEG
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 1
44734: NEG
44735: PUSH
44736: LD_INT 2
44738: NEG
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PUSH
44744: LD_INT 1
44746: PUSH
44747: LD_INT 1
44749: NEG
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: PUSH
44755: LD_INT 2
44757: PUSH
44758: LD_INT 0
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 2
44767: PUSH
44768: LD_INT 1
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 2
44777: PUSH
44778: LD_INT 2
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 1
44787: PUSH
44788: LD_INT 2
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: PUSH
44795: LD_INT 1
44797: NEG
44798: PUSH
44799: LD_INT 1
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 2
44808: NEG
44809: PUSH
44810: LD_INT 0
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: LD_INT 2
44819: NEG
44820: PUSH
44821: LD_INT 1
44823: NEG
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 2
44831: NEG
44832: PUSH
44833: LD_INT 2
44835: NEG
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: LD_INT 2
44843: NEG
44844: PUSH
44845: LD_INT 3
44847: NEG
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 2
44855: PUSH
44856: LD_INT 1
44858: NEG
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 3
44866: PUSH
44867: LD_INT 0
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 3
44876: PUSH
44877: LD_INT 1
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 3
44886: PUSH
44887: LD_INT 2
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: LD_INT 3
44896: PUSH
44897: LD_INT 3
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 2
44906: PUSH
44907: LD_INT 3
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 2
44916: NEG
44917: PUSH
44918: LD_INT 1
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: PUSH
44925: LD_INT 3
44927: NEG
44928: PUSH
44929: LD_INT 0
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 3
44938: NEG
44939: PUSH
44940: LD_INT 1
44942: NEG
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: LD_INT 3
44950: NEG
44951: PUSH
44952: LD_INT 2
44954: NEG
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: PUSH
44960: LD_INT 3
44962: NEG
44963: PUSH
44964: LD_INT 3
44966: NEG
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: LIST
45000: LIST
45001: LIST
45002: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45003: LD_ADDR_VAR 0 42
45007: PUSH
45008: LD_INT 0
45010: PUSH
45011: LD_INT 0
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: PUSH
45018: LD_INT 0
45020: PUSH
45021: LD_INT 1
45023: NEG
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 1
45031: PUSH
45032: LD_INT 0
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: LD_INT 1
45041: PUSH
45042: LD_INT 1
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 0
45051: PUSH
45052: LD_INT 1
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 1
45061: NEG
45062: PUSH
45063: LD_INT 0
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 1
45072: NEG
45073: PUSH
45074: LD_INT 1
45076: NEG
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 1
45084: NEG
45085: PUSH
45086: LD_INT 2
45088: NEG
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 0
45096: PUSH
45097: LD_INT 2
45099: NEG
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 1
45107: PUSH
45108: LD_INT 1
45110: NEG
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 2
45118: PUSH
45119: LD_INT 1
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: PUSH
45126: LD_INT 2
45128: PUSH
45129: LD_INT 2
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 1
45138: PUSH
45139: LD_INT 2
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 0
45148: PUSH
45149: LD_INT 2
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 1
45158: NEG
45159: PUSH
45160: LD_INT 1
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: LD_INT 2
45169: NEG
45170: PUSH
45171: LD_INT 1
45173: NEG
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 2
45181: NEG
45182: PUSH
45183: LD_INT 2
45185: NEG
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 2
45193: NEG
45194: PUSH
45195: LD_INT 3
45197: NEG
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 1
45205: NEG
45206: PUSH
45207: LD_INT 3
45209: NEG
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 0
45217: PUSH
45218: LD_INT 3
45220: NEG
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: LD_INT 1
45228: PUSH
45229: LD_INT 2
45231: NEG
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 3
45239: PUSH
45240: LD_INT 2
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 3
45249: PUSH
45250: LD_INT 3
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 2
45259: PUSH
45260: LD_INT 3
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 1
45269: PUSH
45270: LD_INT 3
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 0
45279: PUSH
45280: LD_INT 3
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 1
45289: NEG
45290: PUSH
45291: LD_INT 2
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 3
45300: NEG
45301: PUSH
45302: LD_INT 2
45304: NEG
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 3
45312: NEG
45313: PUSH
45314: LD_INT 3
45316: NEG
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45353: LD_ADDR_VAR 0 43
45357: PUSH
45358: LD_INT 0
45360: PUSH
45361: LD_INT 0
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 0
45370: PUSH
45371: LD_INT 1
45373: NEG
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 1
45381: PUSH
45382: LD_INT 0
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 1
45391: PUSH
45392: LD_INT 1
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 0
45401: PUSH
45402: LD_INT 1
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 1
45411: NEG
45412: PUSH
45413: LD_INT 0
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 1
45422: NEG
45423: PUSH
45424: LD_INT 1
45426: NEG
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 1
45434: NEG
45435: PUSH
45436: LD_INT 2
45438: NEG
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: LD_INT 0
45446: PUSH
45447: LD_INT 2
45449: NEG
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 1
45457: PUSH
45458: LD_INT 1
45460: NEG
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 2
45468: PUSH
45469: LD_INT 0
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 2
45478: PUSH
45479: LD_INT 1
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 1
45488: PUSH
45489: LD_INT 2
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 0
45498: PUSH
45499: LD_INT 2
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 1
45508: NEG
45509: PUSH
45510: LD_INT 1
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 2
45519: NEG
45520: PUSH
45521: LD_INT 0
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 2
45530: NEG
45531: PUSH
45532: LD_INT 1
45534: NEG
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 1
45542: NEG
45543: PUSH
45544: LD_INT 3
45546: NEG
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: LD_INT 0
45554: PUSH
45555: LD_INT 3
45557: NEG
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 1
45565: PUSH
45566: LD_INT 2
45568: NEG
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 2
45576: PUSH
45577: LD_INT 1
45579: NEG
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 3
45587: PUSH
45588: LD_INT 0
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 3
45597: PUSH
45598: LD_INT 1
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 1
45607: PUSH
45608: LD_INT 3
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: PUSH
45615: LD_INT 0
45617: PUSH
45618: LD_INT 3
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PUSH
45625: LD_INT 1
45627: NEG
45628: PUSH
45629: LD_INT 2
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 2
45638: NEG
45639: PUSH
45640: LD_INT 1
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 3
45649: NEG
45650: PUSH
45651: LD_INT 0
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 3
45660: NEG
45661: PUSH
45662: LD_INT 1
45664: NEG
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: LIST
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: LIST
45695: LIST
45696: LIST
45697: LIST
45698: LIST
45699: LIST
45700: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45701: LD_ADDR_VAR 0 44
45705: PUSH
45706: LD_INT 0
45708: PUSH
45709: LD_INT 0
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 0
45718: PUSH
45719: LD_INT 1
45721: NEG
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 1
45729: PUSH
45730: LD_INT 0
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: LD_INT 1
45739: PUSH
45740: LD_INT 1
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 0
45749: PUSH
45750: LD_INT 1
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 1
45759: NEG
45760: PUSH
45761: LD_INT 0
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 1
45770: NEG
45771: PUSH
45772: LD_INT 1
45774: NEG
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: LD_INT 1
45782: NEG
45783: PUSH
45784: LD_INT 2
45786: NEG
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: LD_INT 1
45794: PUSH
45795: LD_INT 1
45797: NEG
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 2
45805: PUSH
45806: LD_INT 0
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: LD_INT 2
45815: PUSH
45816: LD_INT 1
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: LD_INT 2
45825: PUSH
45826: LD_INT 2
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 1
45835: PUSH
45836: LD_INT 2
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 1
45845: NEG
45846: PUSH
45847: LD_INT 1
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 2
45856: NEG
45857: PUSH
45858: LD_INT 0
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 2
45867: NEG
45868: PUSH
45869: LD_INT 1
45871: NEG
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: PUSH
45877: LD_INT 2
45879: NEG
45880: PUSH
45881: LD_INT 2
45883: NEG
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 2
45891: NEG
45892: PUSH
45893: LD_INT 3
45895: NEG
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: LD_INT 2
45903: PUSH
45904: LD_INT 1
45906: NEG
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: LD_INT 3
45914: PUSH
45915: LD_INT 0
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 3
45924: PUSH
45925: LD_INT 1
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 3
45934: PUSH
45935: LD_INT 2
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: LD_INT 3
45944: PUSH
45945: LD_INT 3
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: LD_INT 2
45954: PUSH
45955: LD_INT 3
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 2
45964: NEG
45965: PUSH
45966: LD_INT 1
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 3
45975: NEG
45976: PUSH
45977: LD_INT 0
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 3
45986: NEG
45987: PUSH
45988: LD_INT 1
45990: NEG
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 3
45998: NEG
45999: PUSH
46000: LD_INT 2
46002: NEG
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 3
46010: NEG
46011: PUSH
46012: LD_INT 3
46014: NEG
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: LIST
46026: LIST
46027: LIST
46028: LIST
46029: LIST
46030: LIST
46031: LIST
46032: LIST
46033: LIST
46034: LIST
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46051: LD_ADDR_VAR 0 45
46055: PUSH
46056: LD_INT 0
46058: PUSH
46059: LD_INT 0
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 0
46068: PUSH
46069: LD_INT 1
46071: NEG
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 1
46079: PUSH
46080: LD_INT 0
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: PUSH
46087: LD_INT 1
46089: PUSH
46090: LD_INT 1
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 0
46099: PUSH
46100: LD_INT 1
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 1
46109: NEG
46110: PUSH
46111: LD_INT 0
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 1
46120: NEG
46121: PUSH
46122: LD_INT 1
46124: NEG
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 1
46132: NEG
46133: PUSH
46134: LD_INT 2
46136: NEG
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 0
46144: PUSH
46145: LD_INT 2
46147: NEG
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 1
46155: PUSH
46156: LD_INT 1
46158: NEG
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 2
46166: PUSH
46167: LD_INT 1
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 2
46176: PUSH
46177: LD_INT 2
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: LD_INT 1
46186: PUSH
46187: LD_INT 2
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: LD_INT 0
46196: PUSH
46197: LD_INT 2
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 1
46206: NEG
46207: PUSH
46208: LD_INT 1
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 2
46217: NEG
46218: PUSH
46219: LD_INT 1
46221: NEG
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: PUSH
46227: LD_INT 2
46229: NEG
46230: PUSH
46231: LD_INT 2
46233: NEG
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 2
46241: NEG
46242: PUSH
46243: LD_INT 3
46245: NEG
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 1
46253: NEG
46254: PUSH
46255: LD_INT 3
46257: NEG
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 0
46265: PUSH
46266: LD_INT 3
46268: NEG
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 1
46276: PUSH
46277: LD_INT 2
46279: NEG
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 3
46287: PUSH
46288: LD_INT 2
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 3
46297: PUSH
46298: LD_INT 3
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: LD_INT 2
46307: PUSH
46308: LD_INT 3
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: LD_INT 1
46317: PUSH
46318: LD_INT 3
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: LD_INT 0
46327: PUSH
46328: LD_INT 3
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 1
46337: NEG
46338: PUSH
46339: LD_INT 2
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: LD_INT 3
46348: NEG
46349: PUSH
46350: LD_INT 2
46352: NEG
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 3
46360: NEG
46361: PUSH
46362: LD_INT 3
46364: NEG
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: LIST
46389: LIST
46390: LIST
46391: LIST
46392: LIST
46393: LIST
46394: LIST
46395: LIST
46396: LIST
46397: LIST
46398: LIST
46399: LIST
46400: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46401: LD_ADDR_VAR 0 46
46405: PUSH
46406: LD_INT 0
46408: PUSH
46409: LD_INT 0
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 0
46418: PUSH
46419: LD_INT 1
46421: NEG
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 1
46429: PUSH
46430: LD_INT 0
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 1
46439: PUSH
46440: LD_INT 1
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 0
46449: PUSH
46450: LD_INT 1
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 1
46459: NEG
46460: PUSH
46461: LD_INT 0
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 1
46470: NEG
46471: PUSH
46472: LD_INT 1
46474: NEG
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 1
46482: NEG
46483: PUSH
46484: LD_INT 2
46486: NEG
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 0
46494: PUSH
46495: LD_INT 2
46497: NEG
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 1
46505: PUSH
46506: LD_INT 1
46508: NEG
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 2
46516: PUSH
46517: LD_INT 0
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 2
46526: PUSH
46527: LD_INT 1
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 1
46536: PUSH
46537: LD_INT 2
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 0
46546: PUSH
46547: LD_INT 2
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 1
46556: NEG
46557: PUSH
46558: LD_INT 1
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 2
46567: NEG
46568: PUSH
46569: LD_INT 0
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 2
46578: NEG
46579: PUSH
46580: LD_INT 1
46582: NEG
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 1
46590: NEG
46591: PUSH
46592: LD_INT 3
46594: NEG
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: LD_INT 0
46602: PUSH
46603: LD_INT 3
46605: NEG
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 1
46613: PUSH
46614: LD_INT 2
46616: NEG
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 2
46624: PUSH
46625: LD_INT 1
46627: NEG
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 3
46635: PUSH
46636: LD_INT 0
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 3
46645: PUSH
46646: LD_INT 1
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: LD_INT 1
46655: PUSH
46656: LD_INT 3
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 0
46665: PUSH
46666: LD_INT 3
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 1
46675: NEG
46676: PUSH
46677: LD_INT 2
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 2
46686: NEG
46687: PUSH
46688: LD_INT 1
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 3
46697: NEG
46698: PUSH
46699: LD_INT 0
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 3
46708: NEG
46709: PUSH
46710: LD_INT 1
46712: NEG
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46749: LD_ADDR_VAR 0 47
46753: PUSH
46754: LD_INT 0
46756: PUSH
46757: LD_INT 0
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 0
46766: PUSH
46767: LD_INT 1
46769: NEG
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 1
46777: PUSH
46778: LD_INT 0
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 1
46787: PUSH
46788: LD_INT 1
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: LD_INT 0
46797: PUSH
46798: LD_INT 1
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: LD_INT 1
46807: NEG
46808: PUSH
46809: LD_INT 0
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: PUSH
46816: LD_INT 1
46818: NEG
46819: PUSH
46820: LD_INT 1
46822: NEG
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 1
46830: NEG
46831: PUSH
46832: LD_INT 2
46834: NEG
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 0
46842: PUSH
46843: LD_INT 2
46845: NEG
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 1
46853: PUSH
46854: LD_INT 1
46856: NEG
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 2
46864: NEG
46865: PUSH
46866: LD_INT 1
46868: NEG
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: PUSH
46874: LD_INT 2
46876: NEG
46877: PUSH
46878: LD_INT 2
46880: NEG
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46900: LD_ADDR_VAR 0 48
46904: PUSH
46905: LD_INT 0
46907: PUSH
46908: LD_INT 0
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 0
46917: PUSH
46918: LD_INT 1
46920: NEG
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: LD_INT 1
46928: PUSH
46929: LD_INT 0
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 1
46938: PUSH
46939: LD_INT 1
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 0
46948: PUSH
46949: LD_INT 1
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 1
46958: NEG
46959: PUSH
46960: LD_INT 0
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 1
46969: NEG
46970: PUSH
46971: LD_INT 1
46973: NEG
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 1
46981: NEG
46982: PUSH
46983: LD_INT 2
46985: NEG
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PUSH
46991: LD_INT 0
46993: PUSH
46994: LD_INT 2
46996: NEG
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 1
47004: PUSH
47005: LD_INT 1
47007: NEG
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 2
47015: PUSH
47016: LD_INT 0
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 2
47025: PUSH
47026: LD_INT 1
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: LIST
47043: LIST
47044: LIST
47045: LIST
47046: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47047: LD_ADDR_VAR 0 49
47051: PUSH
47052: LD_INT 0
47054: PUSH
47055: LD_INT 0
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 0
47064: PUSH
47065: LD_INT 1
47067: NEG
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: LD_INT 1
47075: PUSH
47076: LD_INT 0
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 1
47085: PUSH
47086: LD_INT 1
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 0
47095: PUSH
47096: LD_INT 1
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 1
47105: NEG
47106: PUSH
47107: LD_INT 0
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 1
47116: NEG
47117: PUSH
47118: LD_INT 1
47120: NEG
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: LD_INT 1
47128: PUSH
47129: LD_INT 1
47131: NEG
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 2
47139: PUSH
47140: LD_INT 0
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 2
47149: PUSH
47150: LD_INT 1
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 2
47159: PUSH
47160: LD_INT 2
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: LD_INT 1
47169: PUSH
47170: LD_INT 2
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47191: LD_ADDR_VAR 0 50
47195: PUSH
47196: LD_INT 0
47198: PUSH
47199: LD_INT 0
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 0
47208: PUSH
47209: LD_INT 1
47211: NEG
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 1
47219: PUSH
47220: LD_INT 0
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 1
47229: PUSH
47230: LD_INT 1
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 0
47239: PUSH
47240: LD_INT 1
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 1
47249: NEG
47250: PUSH
47251: LD_INT 0
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 1
47260: NEG
47261: PUSH
47262: LD_INT 1
47264: NEG
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 2
47272: PUSH
47273: LD_INT 1
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 2
47282: PUSH
47283: LD_INT 2
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 1
47292: PUSH
47293: LD_INT 2
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 0
47302: PUSH
47303: LD_INT 2
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 1
47312: NEG
47313: PUSH
47314: LD_INT 1
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47335: LD_ADDR_VAR 0 51
47339: PUSH
47340: LD_INT 0
47342: PUSH
47343: LD_INT 0
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 0
47352: PUSH
47353: LD_INT 1
47355: NEG
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 1
47363: PUSH
47364: LD_INT 0
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 1
47373: PUSH
47374: LD_INT 1
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 0
47383: PUSH
47384: LD_INT 1
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 1
47393: NEG
47394: PUSH
47395: LD_INT 0
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 1
47404: NEG
47405: PUSH
47406: LD_INT 1
47408: NEG
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 1
47416: PUSH
47417: LD_INT 2
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 0
47426: PUSH
47427: LD_INT 2
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 1
47436: NEG
47437: PUSH
47438: LD_INT 1
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 2
47447: NEG
47448: PUSH
47449: LD_INT 0
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 2
47458: NEG
47459: PUSH
47460: LD_INT 1
47462: NEG
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47482: LD_ADDR_VAR 0 52
47486: PUSH
47487: LD_INT 0
47489: PUSH
47490: LD_INT 0
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 0
47499: PUSH
47500: LD_INT 1
47502: NEG
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 1
47510: PUSH
47511: LD_INT 0
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 1
47520: PUSH
47521: LD_INT 1
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 0
47530: PUSH
47531: LD_INT 1
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 1
47540: NEG
47541: PUSH
47542: LD_INT 0
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 1
47551: NEG
47552: PUSH
47553: LD_INT 1
47555: NEG
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 1
47563: NEG
47564: PUSH
47565: LD_INT 2
47567: NEG
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 1
47575: NEG
47576: PUSH
47577: LD_INT 1
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 2
47586: NEG
47587: PUSH
47588: LD_INT 0
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 2
47597: NEG
47598: PUSH
47599: LD_INT 1
47601: NEG
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 2
47609: NEG
47610: PUSH
47611: LD_INT 2
47613: NEG
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47633: LD_ADDR_VAR 0 53
47637: PUSH
47638: LD_INT 0
47640: PUSH
47641: LD_INT 0
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 0
47650: PUSH
47651: LD_INT 1
47653: NEG
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 1
47661: PUSH
47662: LD_INT 0
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 1
47671: PUSH
47672: LD_INT 1
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 0
47681: PUSH
47682: LD_INT 1
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 1
47691: NEG
47692: PUSH
47693: LD_INT 0
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 1
47702: NEG
47703: PUSH
47704: LD_INT 1
47706: NEG
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 1
47714: NEG
47715: PUSH
47716: LD_INT 2
47718: NEG
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 0
47726: PUSH
47727: LD_INT 2
47729: NEG
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 1
47737: PUSH
47738: LD_INT 1
47740: NEG
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 2
47748: PUSH
47749: LD_INT 0
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 2
47758: PUSH
47759: LD_INT 1
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 2
47768: PUSH
47769: LD_INT 2
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: LD_INT 1
47778: PUSH
47779: LD_INT 2
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 0
47788: PUSH
47789: LD_INT 2
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 1
47798: NEG
47799: PUSH
47800: LD_INT 1
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 2
47809: NEG
47810: PUSH
47811: LD_INT 0
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 2
47820: NEG
47821: PUSH
47822: LD_INT 1
47824: NEG
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 2
47832: NEG
47833: PUSH
47834: LD_INT 2
47836: NEG
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47863: LD_ADDR_VAR 0 54
47867: PUSH
47868: LD_INT 0
47870: PUSH
47871: LD_INT 0
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 0
47880: PUSH
47881: LD_INT 1
47883: NEG
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 1
47891: PUSH
47892: LD_INT 0
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 1
47901: PUSH
47902: LD_INT 1
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 0
47911: PUSH
47912: LD_INT 1
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 1
47921: NEG
47922: PUSH
47923: LD_INT 0
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 1
47932: NEG
47933: PUSH
47934: LD_INT 1
47936: NEG
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 1
47944: NEG
47945: PUSH
47946: LD_INT 2
47948: NEG
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: LD_INT 0
47956: PUSH
47957: LD_INT 2
47959: NEG
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 1
47967: PUSH
47968: LD_INT 1
47970: NEG
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 2
47978: PUSH
47979: LD_INT 0
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 2
47988: PUSH
47989: LD_INT 1
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 2
47998: PUSH
47999: LD_INT 2
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 1
48008: PUSH
48009: LD_INT 2
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 0
48018: PUSH
48019: LD_INT 2
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 1
48028: NEG
48029: PUSH
48030: LD_INT 1
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 2
48039: NEG
48040: PUSH
48041: LD_INT 0
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 2
48050: NEG
48051: PUSH
48052: LD_INT 1
48054: NEG
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 2
48062: NEG
48063: PUSH
48064: LD_INT 2
48066: NEG
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48093: LD_ADDR_VAR 0 55
48097: PUSH
48098: LD_INT 0
48100: PUSH
48101: LD_INT 0
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 0
48110: PUSH
48111: LD_INT 1
48113: NEG
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 1
48121: PUSH
48122: LD_INT 0
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 1
48131: PUSH
48132: LD_INT 1
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 0
48141: PUSH
48142: LD_INT 1
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 1
48151: NEG
48152: PUSH
48153: LD_INT 0
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 1
48162: NEG
48163: PUSH
48164: LD_INT 1
48166: NEG
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 1
48174: NEG
48175: PUSH
48176: LD_INT 2
48178: NEG
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 0
48186: PUSH
48187: LD_INT 2
48189: NEG
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 1
48197: PUSH
48198: LD_INT 1
48200: NEG
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 2
48208: PUSH
48209: LD_INT 0
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 2
48218: PUSH
48219: LD_INT 1
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 2
48228: PUSH
48229: LD_INT 2
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 1
48238: PUSH
48239: LD_INT 2
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: LD_INT 0
48248: PUSH
48249: LD_INT 2
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 1
48258: NEG
48259: PUSH
48260: LD_INT 1
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 2
48269: NEG
48270: PUSH
48271: LD_INT 0
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 2
48280: NEG
48281: PUSH
48282: LD_INT 1
48284: NEG
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 2
48292: NEG
48293: PUSH
48294: LD_INT 2
48296: NEG
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48323: LD_ADDR_VAR 0 56
48327: PUSH
48328: LD_INT 0
48330: PUSH
48331: LD_INT 0
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 0
48340: PUSH
48341: LD_INT 1
48343: NEG
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PUSH
48349: LD_INT 1
48351: PUSH
48352: LD_INT 0
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 1
48361: PUSH
48362: LD_INT 1
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 0
48371: PUSH
48372: LD_INT 1
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 1
48381: NEG
48382: PUSH
48383: LD_INT 0
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 1
48392: NEG
48393: PUSH
48394: LD_INT 1
48396: NEG
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: LD_INT 1
48404: NEG
48405: PUSH
48406: LD_INT 2
48408: NEG
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 0
48416: PUSH
48417: LD_INT 2
48419: NEG
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_INT 1
48427: PUSH
48428: LD_INT 1
48430: NEG
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: LD_INT 2
48438: PUSH
48439: LD_INT 0
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 2
48448: PUSH
48449: LD_INT 1
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: LD_INT 2
48458: PUSH
48459: LD_INT 2
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 1
48468: PUSH
48469: LD_INT 2
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 0
48478: PUSH
48479: LD_INT 2
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 1
48488: NEG
48489: PUSH
48490: LD_INT 1
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 2
48499: NEG
48500: PUSH
48501: LD_INT 0
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 2
48510: NEG
48511: PUSH
48512: LD_INT 1
48514: NEG
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 2
48522: NEG
48523: PUSH
48524: LD_INT 2
48526: NEG
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48553: LD_ADDR_VAR 0 57
48557: PUSH
48558: LD_INT 0
48560: PUSH
48561: LD_INT 0
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 0
48570: PUSH
48571: LD_INT 1
48573: NEG
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 1
48581: PUSH
48582: LD_INT 0
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 1
48591: PUSH
48592: LD_INT 1
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 0
48601: PUSH
48602: LD_INT 1
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 1
48611: NEG
48612: PUSH
48613: LD_INT 0
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 1
48622: NEG
48623: PUSH
48624: LD_INT 1
48626: NEG
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PUSH
48632: LD_INT 1
48634: NEG
48635: PUSH
48636: LD_INT 2
48638: NEG
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: LD_INT 0
48646: PUSH
48647: LD_INT 2
48649: NEG
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 1
48657: PUSH
48658: LD_INT 1
48660: NEG
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: LD_INT 2
48668: PUSH
48669: LD_INT 0
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 2
48678: PUSH
48679: LD_INT 1
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: LD_INT 2
48688: PUSH
48689: LD_INT 2
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 1
48698: PUSH
48699: LD_INT 2
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 0
48708: PUSH
48709: LD_INT 2
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 1
48718: NEG
48719: PUSH
48720: LD_INT 1
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 2
48729: NEG
48730: PUSH
48731: LD_INT 0
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 2
48740: NEG
48741: PUSH
48742: LD_INT 1
48744: NEG
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: LD_INT 2
48752: NEG
48753: PUSH
48754: LD_INT 2
48756: NEG
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48783: LD_ADDR_VAR 0 58
48787: PUSH
48788: LD_INT 0
48790: PUSH
48791: LD_INT 0
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: LD_INT 0
48800: PUSH
48801: LD_INT 1
48803: NEG
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 1
48811: PUSH
48812: LD_INT 0
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 1
48821: PUSH
48822: LD_INT 1
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 0
48831: PUSH
48832: LD_INT 1
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 1
48841: NEG
48842: PUSH
48843: LD_INT 0
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 1
48852: NEG
48853: PUSH
48854: LD_INT 1
48856: NEG
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: LD_INT 1
48864: NEG
48865: PUSH
48866: LD_INT 2
48868: NEG
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 0
48876: PUSH
48877: LD_INT 2
48879: NEG
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 1
48887: PUSH
48888: LD_INT 1
48890: NEG
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 2
48898: PUSH
48899: LD_INT 0
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 2
48908: PUSH
48909: LD_INT 1
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 2
48918: PUSH
48919: LD_INT 2
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 1
48928: PUSH
48929: LD_INT 2
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 0
48938: PUSH
48939: LD_INT 2
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 1
48948: NEG
48949: PUSH
48950: LD_INT 1
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 2
48959: NEG
48960: PUSH
48961: LD_INT 0
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: LD_INT 2
48970: NEG
48971: PUSH
48972: LD_INT 1
48974: NEG
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 2
48982: NEG
48983: PUSH
48984: LD_INT 2
48986: NEG
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49013: LD_ADDR_VAR 0 59
49017: PUSH
49018: LD_INT 0
49020: PUSH
49021: LD_INT 0
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 0
49030: PUSH
49031: LD_INT 1
49033: NEG
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 1
49041: PUSH
49042: LD_INT 0
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 1
49051: PUSH
49052: LD_INT 1
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 0
49061: PUSH
49062: LD_INT 1
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 1
49071: NEG
49072: PUSH
49073: LD_INT 0
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 1
49082: NEG
49083: PUSH
49084: LD_INT 1
49086: NEG
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49101: LD_ADDR_VAR 0 60
49105: PUSH
49106: LD_INT 0
49108: PUSH
49109: LD_INT 0
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 0
49118: PUSH
49119: LD_INT 1
49121: NEG
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 1
49129: PUSH
49130: LD_INT 0
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 1
49139: PUSH
49140: LD_INT 1
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: LD_INT 0
49149: PUSH
49150: LD_INT 1
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 1
49159: NEG
49160: PUSH
49161: LD_INT 0
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 1
49170: NEG
49171: PUSH
49172: LD_INT 1
49174: NEG
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: LIST
49184: LIST
49185: LIST
49186: LIST
49187: LIST
49188: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49189: LD_ADDR_VAR 0 61
49193: PUSH
49194: LD_INT 0
49196: PUSH
49197: LD_INT 0
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 0
49206: PUSH
49207: LD_INT 1
49209: NEG
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 1
49217: PUSH
49218: LD_INT 0
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: LD_INT 1
49227: PUSH
49228: LD_INT 1
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 0
49237: PUSH
49238: LD_INT 1
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 1
49247: NEG
49248: PUSH
49249: LD_INT 0
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 1
49258: NEG
49259: PUSH
49260: LD_INT 1
49262: NEG
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49277: LD_ADDR_VAR 0 62
49281: PUSH
49282: LD_INT 0
49284: PUSH
49285: LD_INT 0
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 0
49294: PUSH
49295: LD_INT 1
49297: NEG
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 1
49305: PUSH
49306: LD_INT 0
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 1
49315: PUSH
49316: LD_INT 1
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 0
49325: PUSH
49326: LD_INT 1
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: LD_INT 1
49335: NEG
49336: PUSH
49337: LD_INT 0
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: PUSH
49344: LD_INT 1
49346: NEG
49347: PUSH
49348: LD_INT 1
49350: NEG
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49365: LD_ADDR_VAR 0 63
49369: PUSH
49370: LD_INT 0
49372: PUSH
49373: LD_INT 0
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 0
49382: PUSH
49383: LD_INT 1
49385: NEG
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 1
49393: PUSH
49394: LD_INT 0
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 1
49403: PUSH
49404: LD_INT 1
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 0
49413: PUSH
49414: LD_INT 1
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: LD_INT 1
49423: NEG
49424: PUSH
49425: LD_INT 0
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 1
49434: NEG
49435: PUSH
49436: LD_INT 1
49438: NEG
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49453: LD_ADDR_VAR 0 64
49457: PUSH
49458: LD_INT 0
49460: PUSH
49461: LD_INT 0
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 0
49470: PUSH
49471: LD_INT 1
49473: NEG
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 1
49481: PUSH
49482: LD_INT 0
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: LD_INT 1
49491: PUSH
49492: LD_INT 1
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 0
49501: PUSH
49502: LD_INT 1
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 1
49511: NEG
49512: PUSH
49513: LD_INT 0
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: LD_INT 1
49522: NEG
49523: PUSH
49524: LD_INT 1
49526: NEG
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: ST_TO_ADDR
// end ; 1 :
49541: GO 55438
49543: LD_INT 1
49545: DOUBLE
49546: EQUAL
49547: IFTRUE 49551
49549: GO 52174
49551: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49552: LD_ADDR_VAR 0 11
49556: PUSH
49557: LD_INT 1
49559: NEG
49560: PUSH
49561: LD_INT 3
49563: NEG
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 0
49571: PUSH
49572: LD_INT 3
49574: NEG
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 1
49582: PUSH
49583: LD_INT 2
49585: NEG
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: LIST
49595: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49596: LD_ADDR_VAR 0 12
49600: PUSH
49601: LD_INT 2
49603: PUSH
49604: LD_INT 1
49606: NEG
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 3
49614: PUSH
49615: LD_INT 0
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 3
49624: PUSH
49625: LD_INT 1
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: LIST
49636: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49637: LD_ADDR_VAR 0 13
49641: PUSH
49642: LD_INT 3
49644: PUSH
49645: LD_INT 2
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 3
49654: PUSH
49655: LD_INT 3
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 2
49664: PUSH
49665: LD_INT 3
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: LIST
49676: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49677: LD_ADDR_VAR 0 14
49681: PUSH
49682: LD_INT 1
49684: PUSH
49685: LD_INT 3
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PUSH
49692: LD_INT 0
49694: PUSH
49695: LD_INT 3
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 1
49704: NEG
49705: PUSH
49706: LD_INT 2
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: LIST
49717: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49718: LD_ADDR_VAR 0 15
49722: PUSH
49723: LD_INT 2
49725: NEG
49726: PUSH
49727: LD_INT 1
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: LD_INT 3
49736: NEG
49737: PUSH
49738: LD_INT 0
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 3
49747: NEG
49748: PUSH
49749: LD_INT 1
49751: NEG
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: LIST
49761: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49762: LD_ADDR_VAR 0 16
49766: PUSH
49767: LD_INT 2
49769: NEG
49770: PUSH
49771: LD_INT 3
49773: NEG
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 3
49781: NEG
49782: PUSH
49783: LD_INT 2
49785: NEG
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 3
49793: NEG
49794: PUSH
49795: LD_INT 3
49797: NEG
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: LIST
49807: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49808: LD_ADDR_VAR 0 17
49812: PUSH
49813: LD_INT 1
49815: NEG
49816: PUSH
49817: LD_INT 3
49819: NEG
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 0
49827: PUSH
49828: LD_INT 3
49830: NEG
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 1
49838: PUSH
49839: LD_INT 2
49841: NEG
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: LIST
49851: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49852: LD_ADDR_VAR 0 18
49856: PUSH
49857: LD_INT 2
49859: PUSH
49860: LD_INT 1
49862: NEG
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 3
49870: PUSH
49871: LD_INT 0
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 3
49880: PUSH
49881: LD_INT 1
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: LIST
49892: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49893: LD_ADDR_VAR 0 19
49897: PUSH
49898: LD_INT 3
49900: PUSH
49901: LD_INT 2
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 3
49910: PUSH
49911: LD_INT 3
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 2
49920: PUSH
49921: LD_INT 3
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: LIST
49932: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49933: LD_ADDR_VAR 0 20
49937: PUSH
49938: LD_INT 1
49940: PUSH
49941: LD_INT 3
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 0
49950: PUSH
49951: LD_INT 3
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 1
49960: NEG
49961: PUSH
49962: LD_INT 2
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: LIST
49973: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49974: LD_ADDR_VAR 0 21
49978: PUSH
49979: LD_INT 2
49981: NEG
49982: PUSH
49983: LD_INT 1
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 3
49992: NEG
49993: PUSH
49994: LD_INT 0
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 3
50003: NEG
50004: PUSH
50005: LD_INT 1
50007: NEG
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: LIST
50017: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50018: LD_ADDR_VAR 0 22
50022: PUSH
50023: LD_INT 2
50025: NEG
50026: PUSH
50027: LD_INT 3
50029: NEG
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 3
50037: NEG
50038: PUSH
50039: LD_INT 2
50041: NEG
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: LD_INT 3
50049: NEG
50050: PUSH
50051: LD_INT 3
50053: NEG
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: LIST
50063: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
50064: LD_ADDR_VAR 0 23
50068: PUSH
50069: LD_INT 0
50071: PUSH
50072: LD_INT 3
50074: NEG
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 1
50082: NEG
50083: PUSH
50084: LD_INT 4
50086: NEG
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 1
50094: PUSH
50095: LD_INT 3
50097: NEG
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: LIST
50107: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
50108: LD_ADDR_VAR 0 24
50112: PUSH
50113: LD_INT 3
50115: PUSH
50116: LD_INT 0
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PUSH
50123: LD_INT 3
50125: PUSH
50126: LD_INT 1
50128: NEG
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 4
50136: PUSH
50137: LD_INT 1
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: LIST
50148: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
50149: LD_ADDR_VAR 0 25
50153: PUSH
50154: LD_INT 3
50156: PUSH
50157: LD_INT 3
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 4
50166: PUSH
50167: LD_INT 3
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 3
50176: PUSH
50177: LD_INT 4
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: LIST
50188: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
50189: LD_ADDR_VAR 0 26
50193: PUSH
50194: LD_INT 0
50196: PUSH
50197: LD_INT 3
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 1
50206: PUSH
50207: LD_INT 4
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 1
50216: NEG
50217: PUSH
50218: LD_INT 3
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: LIST
50229: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
50230: LD_ADDR_VAR 0 27
50234: PUSH
50235: LD_INT 3
50237: NEG
50238: PUSH
50239: LD_INT 0
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 3
50248: NEG
50249: PUSH
50250: LD_INT 1
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 4
50259: NEG
50260: PUSH
50261: LD_INT 1
50263: NEG
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: LIST
50273: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
50274: LD_ADDR_VAR 0 28
50278: PUSH
50279: LD_INT 3
50281: NEG
50282: PUSH
50283: LD_INT 3
50285: NEG
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 3
50293: NEG
50294: PUSH
50295: LD_INT 4
50297: NEG
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 4
50305: NEG
50306: PUSH
50307: LD_INT 3
50309: NEG
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: LIST
50319: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
50320: LD_ADDR_VAR 0 29
50324: PUSH
50325: LD_INT 1
50327: NEG
50328: PUSH
50329: LD_INT 3
50331: NEG
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 0
50339: PUSH
50340: LD_INT 3
50342: NEG
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 1
50350: PUSH
50351: LD_INT 2
50353: NEG
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 1
50361: NEG
50362: PUSH
50363: LD_INT 4
50365: NEG
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 0
50373: PUSH
50374: LD_INT 4
50376: NEG
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 1
50384: PUSH
50385: LD_INT 3
50387: NEG
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 1
50395: NEG
50396: PUSH
50397: LD_INT 5
50399: NEG
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 0
50407: PUSH
50408: LD_INT 5
50410: NEG
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: LD_INT 1
50418: PUSH
50419: LD_INT 4
50421: NEG
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 1
50429: NEG
50430: PUSH
50431: LD_INT 6
50433: NEG
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 0
50441: PUSH
50442: LD_INT 6
50444: NEG
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 1
50452: PUSH
50453: LD_INT 5
50455: NEG
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
50475: LD_ADDR_VAR 0 30
50479: PUSH
50480: LD_INT 2
50482: PUSH
50483: LD_INT 1
50485: NEG
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 3
50493: PUSH
50494: LD_INT 0
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 3
50503: PUSH
50504: LD_INT 1
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 3
50513: PUSH
50514: LD_INT 1
50516: NEG
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 4
50524: PUSH
50525: LD_INT 0
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 4
50534: PUSH
50535: LD_INT 1
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: LD_INT 4
50544: PUSH
50545: LD_INT 1
50547: NEG
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: LD_INT 5
50555: PUSH
50556: LD_INT 0
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: LD_INT 5
50565: PUSH
50566: LD_INT 1
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 5
50575: PUSH
50576: LD_INT 1
50578: NEG
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 6
50586: PUSH
50587: LD_INT 0
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 6
50596: PUSH
50597: LD_INT 1
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
50618: LD_ADDR_VAR 0 31
50622: PUSH
50623: LD_INT 3
50625: PUSH
50626: LD_INT 2
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 3
50635: PUSH
50636: LD_INT 3
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 2
50645: PUSH
50646: LD_INT 3
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 4
50655: PUSH
50656: LD_INT 3
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 4
50665: PUSH
50666: LD_INT 4
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: LD_INT 3
50675: PUSH
50676: LD_INT 4
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 5
50685: PUSH
50686: LD_INT 4
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: LD_INT 5
50695: PUSH
50696: LD_INT 5
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 4
50705: PUSH
50706: LD_INT 5
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 6
50715: PUSH
50716: LD_INT 5
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 6
50725: PUSH
50726: LD_INT 6
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 5
50735: PUSH
50736: LD_INT 6
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
50757: LD_ADDR_VAR 0 32
50761: PUSH
50762: LD_INT 1
50764: PUSH
50765: LD_INT 3
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: LD_INT 0
50774: PUSH
50775: LD_INT 3
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 1
50784: NEG
50785: PUSH
50786: LD_INT 2
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 1
50795: PUSH
50796: LD_INT 4
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 0
50805: PUSH
50806: LD_INT 4
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 1
50815: NEG
50816: PUSH
50817: LD_INT 3
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: LD_INT 1
50826: PUSH
50827: LD_INT 5
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 0
50836: PUSH
50837: LD_INT 5
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 1
50846: NEG
50847: PUSH
50848: LD_INT 4
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 1
50857: PUSH
50858: LD_INT 6
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 0
50867: PUSH
50868: LD_INT 6
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 1
50877: NEG
50878: PUSH
50879: LD_INT 5
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
50900: LD_ADDR_VAR 0 33
50904: PUSH
50905: LD_INT 2
50907: NEG
50908: PUSH
50909: LD_INT 1
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 3
50918: NEG
50919: PUSH
50920: LD_INT 0
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 3
50929: NEG
50930: PUSH
50931: LD_INT 1
50933: NEG
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 3
50941: NEG
50942: PUSH
50943: LD_INT 1
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 4
50952: NEG
50953: PUSH
50954: LD_INT 0
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 4
50963: NEG
50964: PUSH
50965: LD_INT 1
50967: NEG
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 4
50975: NEG
50976: PUSH
50977: LD_INT 1
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 5
50986: NEG
50987: PUSH
50988: LD_INT 0
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 5
50997: NEG
50998: PUSH
50999: LD_INT 1
51001: NEG
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 5
51009: NEG
51010: PUSH
51011: LD_INT 1
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 6
51020: NEG
51021: PUSH
51022: LD_INT 0
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 6
51031: NEG
51032: PUSH
51033: LD_INT 1
51035: NEG
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
51055: LD_ADDR_VAR 0 34
51059: PUSH
51060: LD_INT 2
51062: NEG
51063: PUSH
51064: LD_INT 3
51066: NEG
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 3
51074: NEG
51075: PUSH
51076: LD_INT 2
51078: NEG
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 3
51086: NEG
51087: PUSH
51088: LD_INT 3
51090: NEG
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 3
51098: NEG
51099: PUSH
51100: LD_INT 4
51102: NEG
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 4
51110: NEG
51111: PUSH
51112: LD_INT 3
51114: NEG
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 4
51122: NEG
51123: PUSH
51124: LD_INT 4
51126: NEG
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 4
51134: NEG
51135: PUSH
51136: LD_INT 5
51138: NEG
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 5
51146: NEG
51147: PUSH
51148: LD_INT 4
51150: NEG
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 5
51158: NEG
51159: PUSH
51160: LD_INT 5
51162: NEG
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 5
51170: NEG
51171: PUSH
51172: LD_INT 6
51174: NEG
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 6
51182: NEG
51183: PUSH
51184: LD_INT 5
51186: NEG
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 6
51194: NEG
51195: PUSH
51196: LD_INT 6
51198: NEG
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
51218: LD_ADDR_VAR 0 41
51222: PUSH
51223: LD_INT 0
51225: PUSH
51226: LD_INT 2
51228: NEG
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 1
51236: NEG
51237: PUSH
51238: LD_INT 3
51240: NEG
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 1
51248: PUSH
51249: LD_INT 2
51251: NEG
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: LIST
51261: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
51262: LD_ADDR_VAR 0 42
51266: PUSH
51267: LD_INT 2
51269: PUSH
51270: LD_INT 0
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 2
51279: PUSH
51280: LD_INT 1
51282: NEG
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 3
51290: PUSH
51291: LD_INT 1
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: LIST
51302: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
51303: LD_ADDR_VAR 0 43
51307: PUSH
51308: LD_INT 2
51310: PUSH
51311: LD_INT 2
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 3
51320: PUSH
51321: LD_INT 2
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: LD_INT 2
51330: PUSH
51331: LD_INT 3
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: LIST
51342: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
51343: LD_ADDR_VAR 0 44
51347: PUSH
51348: LD_INT 0
51350: PUSH
51351: LD_INT 2
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 1
51360: PUSH
51361: LD_INT 3
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 1
51370: NEG
51371: PUSH
51372: LD_INT 2
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: LIST
51383: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51384: LD_ADDR_VAR 0 45
51388: PUSH
51389: LD_INT 2
51391: NEG
51392: PUSH
51393: LD_INT 0
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 2
51402: NEG
51403: PUSH
51404: LD_INT 1
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 3
51413: NEG
51414: PUSH
51415: LD_INT 1
51417: NEG
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: LIST
51427: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
51428: LD_ADDR_VAR 0 46
51432: PUSH
51433: LD_INT 2
51435: NEG
51436: PUSH
51437: LD_INT 2
51439: NEG
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 2
51447: NEG
51448: PUSH
51449: LD_INT 3
51451: NEG
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 3
51459: NEG
51460: PUSH
51461: LD_INT 2
51463: NEG
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: LIST
51473: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
51474: LD_ADDR_VAR 0 47
51478: PUSH
51479: LD_INT 2
51481: NEG
51482: PUSH
51483: LD_INT 3
51485: NEG
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 1
51493: NEG
51494: PUSH
51495: LD_INT 3
51497: NEG
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51507: LD_ADDR_VAR 0 48
51511: PUSH
51512: LD_INT 1
51514: PUSH
51515: LD_INT 2
51517: NEG
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 2
51525: PUSH
51526: LD_INT 1
51528: NEG
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
51538: LD_ADDR_VAR 0 49
51542: PUSH
51543: LD_INT 3
51545: PUSH
51546: LD_INT 1
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 3
51555: PUSH
51556: LD_INT 2
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
51567: LD_ADDR_VAR 0 50
51571: PUSH
51572: LD_INT 2
51574: PUSH
51575: LD_INT 3
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 1
51584: PUSH
51585: LD_INT 3
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51596: LD_ADDR_VAR 0 51
51600: PUSH
51601: LD_INT 1
51603: NEG
51604: PUSH
51605: LD_INT 2
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 2
51614: NEG
51615: PUSH
51616: LD_INT 1
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51627: LD_ADDR_VAR 0 52
51631: PUSH
51632: LD_INT 3
51634: NEG
51635: PUSH
51636: LD_INT 1
51638: NEG
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 3
51646: NEG
51647: PUSH
51648: LD_INT 2
51650: NEG
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51660: LD_ADDR_VAR 0 53
51664: PUSH
51665: LD_INT 1
51667: NEG
51668: PUSH
51669: LD_INT 3
51671: NEG
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 0
51679: PUSH
51680: LD_INT 3
51682: NEG
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 1
51690: PUSH
51691: LD_INT 2
51693: NEG
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: LIST
51703: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51704: LD_ADDR_VAR 0 54
51708: PUSH
51709: LD_INT 2
51711: PUSH
51712: LD_INT 1
51714: NEG
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 3
51722: PUSH
51723: LD_INT 0
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 3
51732: PUSH
51733: LD_INT 1
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: LIST
51744: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51745: LD_ADDR_VAR 0 55
51749: PUSH
51750: LD_INT 3
51752: PUSH
51753: LD_INT 2
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 3
51762: PUSH
51763: LD_INT 3
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 2
51772: PUSH
51773: LD_INT 3
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: LIST
51784: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51785: LD_ADDR_VAR 0 56
51789: PUSH
51790: LD_INT 1
51792: PUSH
51793: LD_INT 3
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 0
51802: PUSH
51803: LD_INT 3
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 1
51812: NEG
51813: PUSH
51814: LD_INT 2
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: LIST
51825: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51826: LD_ADDR_VAR 0 57
51830: PUSH
51831: LD_INT 2
51833: NEG
51834: PUSH
51835: LD_INT 1
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 3
51844: NEG
51845: PUSH
51846: LD_INT 0
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 3
51855: NEG
51856: PUSH
51857: LD_INT 1
51859: NEG
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: LIST
51869: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51870: LD_ADDR_VAR 0 58
51874: PUSH
51875: LD_INT 2
51877: NEG
51878: PUSH
51879: LD_INT 3
51881: NEG
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 3
51889: NEG
51890: PUSH
51891: LD_INT 2
51893: NEG
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 3
51901: NEG
51902: PUSH
51903: LD_INT 3
51905: NEG
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: LIST
51915: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
51916: LD_ADDR_VAR 0 59
51920: PUSH
51921: LD_INT 1
51923: NEG
51924: PUSH
51925: LD_INT 2
51927: NEG
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 0
51935: PUSH
51936: LD_INT 2
51938: NEG
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 1
51946: PUSH
51947: LD_INT 1
51949: NEG
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: LIST
51959: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51960: LD_ADDR_VAR 0 60
51964: PUSH
51965: LD_INT 1
51967: PUSH
51968: LD_INT 1
51970: NEG
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 2
51978: PUSH
51979: LD_INT 0
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 2
51988: PUSH
51989: LD_INT 1
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: LIST
52000: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52001: LD_ADDR_VAR 0 61
52005: PUSH
52006: LD_INT 2
52008: PUSH
52009: LD_INT 1
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 2
52018: PUSH
52019: LD_INT 2
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 1
52028: PUSH
52029: LD_INT 2
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: LIST
52040: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52041: LD_ADDR_VAR 0 62
52045: PUSH
52046: LD_INT 1
52048: PUSH
52049: LD_INT 2
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 0
52058: PUSH
52059: LD_INT 2
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 1
52068: NEG
52069: PUSH
52070: LD_INT 1
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: LIST
52081: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52082: LD_ADDR_VAR 0 63
52086: PUSH
52087: LD_INT 1
52089: NEG
52090: PUSH
52091: LD_INT 1
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 2
52100: NEG
52101: PUSH
52102: LD_INT 0
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 2
52111: NEG
52112: PUSH
52113: LD_INT 1
52115: NEG
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: LIST
52125: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52126: LD_ADDR_VAR 0 64
52130: PUSH
52131: LD_INT 1
52133: NEG
52134: PUSH
52135: LD_INT 2
52137: NEG
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 2
52145: NEG
52146: PUSH
52147: LD_INT 1
52149: NEG
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 2
52157: NEG
52158: PUSH
52159: LD_INT 2
52161: NEG
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: LIST
52171: ST_TO_ADDR
// end ; 2 :
52172: GO 55438
52174: LD_INT 2
52176: DOUBLE
52177: EQUAL
52178: IFTRUE 52182
52180: GO 55437
52182: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
52183: LD_ADDR_VAR 0 29
52187: PUSH
52188: LD_INT 4
52190: PUSH
52191: LD_INT 0
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 4
52200: PUSH
52201: LD_INT 1
52203: NEG
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 5
52211: PUSH
52212: LD_INT 0
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 5
52221: PUSH
52222: LD_INT 1
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 4
52231: PUSH
52232: LD_INT 1
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 3
52241: PUSH
52242: LD_INT 0
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 3
52251: PUSH
52252: LD_INT 1
52254: NEG
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: LD_INT 3
52262: PUSH
52263: LD_INT 2
52265: NEG
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 5
52273: PUSH
52274: LD_INT 2
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 3
52283: PUSH
52284: LD_INT 3
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 3
52293: PUSH
52294: LD_INT 2
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 4
52303: PUSH
52304: LD_INT 3
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 4
52313: PUSH
52314: LD_INT 4
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 3
52323: PUSH
52324: LD_INT 4
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 2
52333: PUSH
52334: LD_INT 3
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: LD_INT 2
52343: PUSH
52344: LD_INT 2
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 4
52353: PUSH
52354: LD_INT 2
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 2
52363: PUSH
52364: LD_INT 4
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 0
52373: PUSH
52374: LD_INT 4
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 0
52383: PUSH
52384: LD_INT 3
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 1
52393: PUSH
52394: LD_INT 4
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 1
52403: PUSH
52404: LD_INT 5
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 0
52413: PUSH
52414: LD_INT 5
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 1
52423: NEG
52424: PUSH
52425: LD_INT 4
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: LD_INT 1
52434: NEG
52435: PUSH
52436: LD_INT 3
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 2
52445: PUSH
52446: LD_INT 5
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 2
52455: NEG
52456: PUSH
52457: LD_INT 3
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 3
52466: NEG
52467: PUSH
52468: LD_INT 0
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 3
52477: NEG
52478: PUSH
52479: LD_INT 1
52481: NEG
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 2
52489: NEG
52490: PUSH
52491: LD_INT 0
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 2
52500: NEG
52501: PUSH
52502: LD_INT 1
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 3
52511: NEG
52512: PUSH
52513: LD_INT 1
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 4
52522: NEG
52523: PUSH
52524: LD_INT 0
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 4
52533: NEG
52534: PUSH
52535: LD_INT 1
52537: NEG
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 4
52545: NEG
52546: PUSH
52547: LD_INT 2
52549: NEG
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 2
52557: NEG
52558: PUSH
52559: LD_INT 2
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 4
52568: NEG
52569: PUSH
52570: LD_INT 4
52572: NEG
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 4
52580: NEG
52581: PUSH
52582: LD_INT 5
52584: NEG
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 3
52592: NEG
52593: PUSH
52594: LD_INT 4
52596: NEG
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 3
52604: NEG
52605: PUSH
52606: LD_INT 3
52608: NEG
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 4
52616: NEG
52617: PUSH
52618: LD_INT 3
52620: NEG
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 5
52628: NEG
52629: PUSH
52630: LD_INT 4
52632: NEG
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 5
52640: NEG
52641: PUSH
52642: LD_INT 5
52644: NEG
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 3
52652: NEG
52653: PUSH
52654: LD_INT 5
52656: NEG
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 5
52664: NEG
52665: PUSH
52666: LD_INT 3
52668: NEG
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
52721: LD_ADDR_VAR 0 30
52725: PUSH
52726: LD_INT 4
52728: PUSH
52729: LD_INT 4
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: LD_INT 4
52738: PUSH
52739: LD_INT 3
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: LD_INT 5
52748: PUSH
52749: LD_INT 4
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PUSH
52756: LD_INT 5
52758: PUSH
52759: LD_INT 5
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 4
52768: PUSH
52769: LD_INT 5
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 3
52778: PUSH
52779: LD_INT 4
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 3
52788: PUSH
52789: LD_INT 3
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 5
52798: PUSH
52799: LD_INT 3
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 3
52808: PUSH
52809: LD_INT 5
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 0
52818: PUSH
52819: LD_INT 3
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 0
52828: PUSH
52829: LD_INT 2
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 1
52838: PUSH
52839: LD_INT 3
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 1
52848: PUSH
52849: LD_INT 4
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 0
52858: PUSH
52859: LD_INT 4
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: LD_INT 1
52868: NEG
52869: PUSH
52870: LD_INT 3
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 1
52879: NEG
52880: PUSH
52881: LD_INT 2
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 2
52890: PUSH
52891: LD_INT 4
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: LD_INT 2
52900: NEG
52901: PUSH
52902: LD_INT 2
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 4
52911: NEG
52912: PUSH
52913: LD_INT 0
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 4
52922: NEG
52923: PUSH
52924: LD_INT 1
52926: NEG
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: LD_INT 3
52934: NEG
52935: PUSH
52936: LD_INT 0
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 3
52945: NEG
52946: PUSH
52947: LD_INT 1
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 4
52956: NEG
52957: PUSH
52958: LD_INT 1
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 5
52967: NEG
52968: PUSH
52969: LD_INT 0
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PUSH
52976: LD_INT 5
52978: NEG
52979: PUSH
52980: LD_INT 1
52982: NEG
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 5
52990: NEG
52991: PUSH
52992: LD_INT 2
52994: NEG
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 3
53002: NEG
53003: PUSH
53004: LD_INT 2
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 3
53013: NEG
53014: PUSH
53015: LD_INT 3
53017: NEG
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 3
53025: NEG
53026: PUSH
53027: LD_INT 4
53029: NEG
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 2
53037: NEG
53038: PUSH
53039: LD_INT 3
53041: NEG
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 2
53049: NEG
53050: PUSH
53051: LD_INT 2
53053: NEG
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 3
53061: NEG
53062: PUSH
53063: LD_INT 2
53065: NEG
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 4
53073: NEG
53074: PUSH
53075: LD_INT 3
53077: NEG
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 4
53085: NEG
53086: PUSH
53087: LD_INT 4
53089: NEG
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 2
53097: NEG
53098: PUSH
53099: LD_INT 4
53101: NEG
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 4
53109: NEG
53110: PUSH
53111: LD_INT 2
53113: NEG
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: PUSH
53119: LD_INT 0
53121: PUSH
53122: LD_INT 4
53124: NEG
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: LD_INT 0
53132: PUSH
53133: LD_INT 5
53135: NEG
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_INT 1
53143: PUSH
53144: LD_INT 4
53146: NEG
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 1
53154: PUSH
53155: LD_INT 3
53157: NEG
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 0
53165: PUSH
53166: LD_INT 3
53168: NEG
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 1
53176: NEG
53177: PUSH
53178: LD_INT 4
53180: NEG
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: LD_INT 1
53188: NEG
53189: PUSH
53190: LD_INT 5
53192: NEG
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 2
53200: PUSH
53201: LD_INT 3
53203: NEG
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 2
53211: NEG
53212: PUSH
53213: LD_INT 5
53215: NEG
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
53268: LD_ADDR_VAR 0 31
53272: PUSH
53273: LD_INT 0
53275: PUSH
53276: LD_INT 4
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 0
53285: PUSH
53286: LD_INT 3
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 1
53295: PUSH
53296: LD_INT 4
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 1
53305: PUSH
53306: LD_INT 5
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 0
53315: PUSH
53316: LD_INT 5
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 1
53325: NEG
53326: PUSH
53327: LD_INT 4
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 1
53336: NEG
53337: PUSH
53338: LD_INT 3
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: LD_INT 2
53347: PUSH
53348: LD_INT 5
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 2
53357: NEG
53358: PUSH
53359: LD_INT 3
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 3
53368: NEG
53369: PUSH
53370: LD_INT 0
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 3
53379: NEG
53380: PUSH
53381: LD_INT 1
53383: NEG
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 2
53391: NEG
53392: PUSH
53393: LD_INT 0
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 2
53402: NEG
53403: PUSH
53404: LD_INT 1
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 3
53413: NEG
53414: PUSH
53415: LD_INT 1
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 4
53424: NEG
53425: PUSH
53426: LD_INT 0
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 4
53435: NEG
53436: PUSH
53437: LD_INT 1
53439: NEG
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 4
53447: NEG
53448: PUSH
53449: LD_INT 2
53451: NEG
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 2
53459: NEG
53460: PUSH
53461: LD_INT 2
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 4
53470: NEG
53471: PUSH
53472: LD_INT 4
53474: NEG
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 4
53482: NEG
53483: PUSH
53484: LD_INT 5
53486: NEG
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 3
53494: NEG
53495: PUSH
53496: LD_INT 4
53498: NEG
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 3
53506: NEG
53507: PUSH
53508: LD_INT 3
53510: NEG
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 4
53518: NEG
53519: PUSH
53520: LD_INT 3
53522: NEG
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 5
53530: NEG
53531: PUSH
53532: LD_INT 4
53534: NEG
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 5
53542: NEG
53543: PUSH
53544: LD_INT 5
53546: NEG
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 3
53554: NEG
53555: PUSH
53556: LD_INT 5
53558: NEG
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 5
53566: NEG
53567: PUSH
53568: LD_INT 3
53570: NEG
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 0
53578: PUSH
53579: LD_INT 3
53581: NEG
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 0
53589: PUSH
53590: LD_INT 4
53592: NEG
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 1
53600: PUSH
53601: LD_INT 3
53603: NEG
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: LD_INT 1
53611: PUSH
53612: LD_INT 2
53614: NEG
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 0
53622: PUSH
53623: LD_INT 2
53625: NEG
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: LD_INT 1
53633: NEG
53634: PUSH
53635: LD_INT 3
53637: NEG
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 1
53645: NEG
53646: PUSH
53647: LD_INT 4
53649: NEG
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 2
53657: PUSH
53658: LD_INT 2
53660: NEG
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 2
53668: NEG
53669: PUSH
53670: LD_INT 4
53672: NEG
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 4
53680: PUSH
53681: LD_INT 0
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 4
53690: PUSH
53691: LD_INT 1
53693: NEG
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 5
53701: PUSH
53702: LD_INT 0
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 5
53711: PUSH
53712: LD_INT 1
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 4
53721: PUSH
53722: LD_INT 1
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 3
53731: PUSH
53732: LD_INT 0
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 3
53741: PUSH
53742: LD_INT 1
53744: NEG
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 3
53752: PUSH
53753: LD_INT 2
53755: NEG
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 5
53763: PUSH
53764: LD_INT 2
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
53818: LD_ADDR_VAR 0 32
53822: PUSH
53823: LD_INT 4
53825: NEG
53826: PUSH
53827: LD_INT 0
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 4
53836: NEG
53837: PUSH
53838: LD_INT 1
53840: NEG
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 3
53848: NEG
53849: PUSH
53850: LD_INT 0
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 3
53859: NEG
53860: PUSH
53861: LD_INT 1
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 4
53870: NEG
53871: PUSH
53872: LD_INT 1
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 5
53881: NEG
53882: PUSH
53883: LD_INT 0
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 5
53892: NEG
53893: PUSH
53894: LD_INT 1
53896: NEG
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 5
53904: NEG
53905: PUSH
53906: LD_INT 2
53908: NEG
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 3
53916: NEG
53917: PUSH
53918: LD_INT 2
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 3
53927: NEG
53928: PUSH
53929: LD_INT 3
53931: NEG
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 3
53939: NEG
53940: PUSH
53941: LD_INT 4
53943: NEG
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 2
53951: NEG
53952: PUSH
53953: LD_INT 3
53955: NEG
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 2
53963: NEG
53964: PUSH
53965: LD_INT 2
53967: NEG
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 3
53975: NEG
53976: PUSH
53977: LD_INT 2
53979: NEG
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 4
53987: NEG
53988: PUSH
53989: LD_INT 3
53991: NEG
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 4
53999: NEG
54000: PUSH
54001: LD_INT 4
54003: NEG
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: LD_INT 2
54011: NEG
54012: PUSH
54013: LD_INT 4
54015: NEG
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 4
54023: NEG
54024: PUSH
54025: LD_INT 2
54027: NEG
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 0
54035: PUSH
54036: LD_INT 4
54038: NEG
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 0
54046: PUSH
54047: LD_INT 5
54049: NEG
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: LD_INT 1
54057: PUSH
54058: LD_INT 4
54060: NEG
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 1
54068: PUSH
54069: LD_INT 3
54071: NEG
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 0
54079: PUSH
54080: LD_INT 3
54082: NEG
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: LD_INT 1
54090: NEG
54091: PUSH
54092: LD_INT 4
54094: NEG
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 1
54102: NEG
54103: PUSH
54104: LD_INT 5
54106: NEG
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: LD_INT 2
54114: PUSH
54115: LD_INT 3
54117: NEG
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 2
54125: NEG
54126: PUSH
54127: LD_INT 5
54129: NEG
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 3
54137: PUSH
54138: LD_INT 0
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 3
54147: PUSH
54148: LD_INT 1
54150: NEG
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 4
54158: PUSH
54159: LD_INT 0
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 4
54168: PUSH
54169: LD_INT 1
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 3
54178: PUSH
54179: LD_INT 1
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 2
54188: PUSH
54189: LD_INT 0
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 2
54198: PUSH
54199: LD_INT 1
54201: NEG
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 2
54209: PUSH
54210: LD_INT 2
54212: NEG
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 4
54220: PUSH
54221: LD_INT 2
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 4
54230: PUSH
54231: LD_INT 4
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 4
54240: PUSH
54241: LD_INT 3
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 5
54250: PUSH
54251: LD_INT 4
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 5
54260: PUSH
54261: LD_INT 5
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 4
54270: PUSH
54271: LD_INT 5
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 3
54280: PUSH
54281: LD_INT 4
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 3
54290: PUSH
54291: LD_INT 3
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 5
54300: PUSH
54301: LD_INT 3
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 3
54310: PUSH
54311: LD_INT 5
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
54365: LD_ADDR_VAR 0 33
54369: PUSH
54370: LD_INT 4
54372: NEG
54373: PUSH
54374: LD_INT 4
54376: NEG
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 4
54384: NEG
54385: PUSH
54386: LD_INT 5
54388: NEG
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 3
54396: NEG
54397: PUSH
54398: LD_INT 4
54400: NEG
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 3
54408: NEG
54409: PUSH
54410: LD_INT 3
54412: NEG
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 4
54420: NEG
54421: PUSH
54422: LD_INT 3
54424: NEG
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 5
54432: NEG
54433: PUSH
54434: LD_INT 4
54436: NEG
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 5
54444: NEG
54445: PUSH
54446: LD_INT 5
54448: NEG
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: LD_INT 3
54456: NEG
54457: PUSH
54458: LD_INT 5
54460: NEG
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 5
54468: NEG
54469: PUSH
54470: LD_INT 3
54472: NEG
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 0
54480: PUSH
54481: LD_INT 3
54483: NEG
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 0
54491: PUSH
54492: LD_INT 4
54494: NEG
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 1
54502: PUSH
54503: LD_INT 3
54505: NEG
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 1
54513: PUSH
54514: LD_INT 2
54516: NEG
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 0
54524: PUSH
54525: LD_INT 2
54527: NEG
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 1
54535: NEG
54536: PUSH
54537: LD_INT 3
54539: NEG
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 1
54547: NEG
54548: PUSH
54549: LD_INT 4
54551: NEG
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 2
54559: PUSH
54560: LD_INT 2
54562: NEG
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 2
54570: NEG
54571: PUSH
54572: LD_INT 4
54574: NEG
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 4
54582: PUSH
54583: LD_INT 0
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 4
54592: PUSH
54593: LD_INT 1
54595: NEG
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 5
54603: PUSH
54604: LD_INT 0
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 5
54613: PUSH
54614: LD_INT 1
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 4
54623: PUSH
54624: LD_INT 1
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 3
54633: PUSH
54634: LD_INT 0
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 3
54643: PUSH
54644: LD_INT 1
54646: NEG
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: LD_INT 3
54654: PUSH
54655: LD_INT 2
54657: NEG
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 5
54665: PUSH
54666: LD_INT 2
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 3
54675: PUSH
54676: LD_INT 3
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 3
54685: PUSH
54686: LD_INT 2
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 4
54695: PUSH
54696: LD_INT 3
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: LD_INT 4
54705: PUSH
54706: LD_INT 4
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 3
54715: PUSH
54716: LD_INT 4
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 2
54725: PUSH
54726: LD_INT 3
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 2
54735: PUSH
54736: LD_INT 2
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 4
54745: PUSH
54746: LD_INT 2
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 2
54755: PUSH
54756: LD_INT 4
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 0
54765: PUSH
54766: LD_INT 4
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 0
54775: PUSH
54776: LD_INT 3
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 1
54785: PUSH
54786: LD_INT 4
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 1
54795: PUSH
54796: LD_INT 5
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_INT 0
54805: PUSH
54806: LD_INT 5
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 1
54815: NEG
54816: PUSH
54817: LD_INT 4
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 1
54826: NEG
54827: PUSH
54828: LD_INT 3
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 2
54837: PUSH
54838: LD_INT 5
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 2
54847: NEG
54848: PUSH
54849: LD_INT 3
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
54903: LD_ADDR_VAR 0 34
54907: PUSH
54908: LD_INT 0
54910: PUSH
54911: LD_INT 4
54913: NEG
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 0
54921: PUSH
54922: LD_INT 5
54924: NEG
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 1
54932: PUSH
54933: LD_INT 4
54935: NEG
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 1
54943: PUSH
54944: LD_INT 3
54946: NEG
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 0
54954: PUSH
54955: LD_INT 3
54957: NEG
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 1
54965: NEG
54966: PUSH
54967: LD_INT 4
54969: NEG
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 1
54977: NEG
54978: PUSH
54979: LD_INT 5
54981: NEG
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 2
54989: PUSH
54990: LD_INT 3
54992: NEG
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 2
55000: NEG
55001: PUSH
55002: LD_INT 5
55004: NEG
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 3
55012: PUSH
55013: LD_INT 0
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 3
55022: PUSH
55023: LD_INT 1
55025: NEG
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 4
55033: PUSH
55034: LD_INT 0
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 4
55043: PUSH
55044: LD_INT 1
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 3
55053: PUSH
55054: LD_INT 1
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 2
55063: PUSH
55064: LD_INT 0
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 2
55073: PUSH
55074: LD_INT 1
55076: NEG
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 2
55084: PUSH
55085: LD_INT 2
55087: NEG
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 4
55095: PUSH
55096: LD_INT 2
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 4
55105: PUSH
55106: LD_INT 4
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 4
55115: PUSH
55116: LD_INT 3
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 5
55125: PUSH
55126: LD_INT 4
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 5
55135: PUSH
55136: LD_INT 5
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 4
55145: PUSH
55146: LD_INT 5
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 3
55155: PUSH
55156: LD_INT 4
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 3
55165: PUSH
55166: LD_INT 3
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 5
55175: PUSH
55176: LD_INT 3
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 3
55185: PUSH
55186: LD_INT 5
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 0
55195: PUSH
55196: LD_INT 3
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 0
55205: PUSH
55206: LD_INT 2
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 1
55215: PUSH
55216: LD_INT 3
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 1
55225: PUSH
55226: LD_INT 4
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: LD_INT 0
55235: PUSH
55236: LD_INT 4
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 1
55245: NEG
55246: PUSH
55247: LD_INT 3
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 1
55256: NEG
55257: PUSH
55258: LD_INT 2
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 2
55267: PUSH
55268: LD_INT 4
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 2
55277: NEG
55278: PUSH
55279: LD_INT 2
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 4
55288: NEG
55289: PUSH
55290: LD_INT 0
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 4
55299: NEG
55300: PUSH
55301: LD_INT 1
55303: NEG
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 3
55311: NEG
55312: PUSH
55313: LD_INT 0
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 3
55322: NEG
55323: PUSH
55324: LD_INT 1
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 4
55333: NEG
55334: PUSH
55335: LD_INT 1
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 5
55344: NEG
55345: PUSH
55346: LD_INT 0
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 5
55355: NEG
55356: PUSH
55357: LD_INT 1
55359: NEG
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 5
55367: NEG
55368: PUSH
55369: LD_INT 2
55371: NEG
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 3
55379: NEG
55380: PUSH
55381: LD_INT 2
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: LIST
55405: LIST
55406: LIST
55407: LIST
55408: LIST
55409: LIST
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: ST_TO_ADDR
// end ; end ;
55435: GO 55438
55437: POP
// case btype of b_depot , b_warehouse :
55438: LD_VAR 0 1
55442: PUSH
55443: LD_INT 0
55445: DOUBLE
55446: EQUAL
55447: IFTRUE 55457
55449: LD_INT 1
55451: DOUBLE
55452: EQUAL
55453: IFTRUE 55457
55455: GO 55658
55457: POP
// case nation of nation_american :
55458: LD_VAR 0 5
55462: PUSH
55463: LD_INT 1
55465: DOUBLE
55466: EQUAL
55467: IFTRUE 55471
55469: GO 55527
55471: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
55472: LD_ADDR_VAR 0 9
55476: PUSH
55477: LD_VAR 0 11
55481: PUSH
55482: LD_VAR 0 12
55486: PUSH
55487: LD_VAR 0 13
55491: PUSH
55492: LD_VAR 0 14
55496: PUSH
55497: LD_VAR 0 15
55501: PUSH
55502: LD_VAR 0 16
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: PUSH
55515: LD_VAR 0 4
55519: PUSH
55520: LD_INT 1
55522: PLUS
55523: ARRAY
55524: ST_TO_ADDR
55525: GO 55656
55527: LD_INT 2
55529: DOUBLE
55530: EQUAL
55531: IFTRUE 55535
55533: GO 55591
55535: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
55536: LD_ADDR_VAR 0 9
55540: PUSH
55541: LD_VAR 0 17
55545: PUSH
55546: LD_VAR 0 18
55550: PUSH
55551: LD_VAR 0 19
55555: PUSH
55556: LD_VAR 0 20
55560: PUSH
55561: LD_VAR 0 21
55565: PUSH
55566: LD_VAR 0 22
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: LIST
55575: LIST
55576: LIST
55577: LIST
55578: PUSH
55579: LD_VAR 0 4
55583: PUSH
55584: LD_INT 1
55586: PLUS
55587: ARRAY
55588: ST_TO_ADDR
55589: GO 55656
55591: LD_INT 3
55593: DOUBLE
55594: EQUAL
55595: IFTRUE 55599
55597: GO 55655
55599: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
55600: LD_ADDR_VAR 0 9
55604: PUSH
55605: LD_VAR 0 23
55609: PUSH
55610: LD_VAR 0 24
55614: PUSH
55615: LD_VAR 0 25
55619: PUSH
55620: LD_VAR 0 26
55624: PUSH
55625: LD_VAR 0 27
55629: PUSH
55630: LD_VAR 0 28
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: LIST
55639: LIST
55640: LIST
55641: LIST
55642: PUSH
55643: LD_VAR 0 4
55647: PUSH
55648: LD_INT 1
55650: PLUS
55651: ARRAY
55652: ST_TO_ADDR
55653: GO 55656
55655: POP
55656: GO 56211
55658: LD_INT 2
55660: DOUBLE
55661: EQUAL
55662: IFTRUE 55672
55664: LD_INT 3
55666: DOUBLE
55667: EQUAL
55668: IFTRUE 55672
55670: GO 55728
55672: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
55673: LD_ADDR_VAR 0 9
55677: PUSH
55678: LD_VAR 0 29
55682: PUSH
55683: LD_VAR 0 30
55687: PUSH
55688: LD_VAR 0 31
55692: PUSH
55693: LD_VAR 0 32
55697: PUSH
55698: LD_VAR 0 33
55702: PUSH
55703: LD_VAR 0 34
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: PUSH
55716: LD_VAR 0 4
55720: PUSH
55721: LD_INT 1
55723: PLUS
55724: ARRAY
55725: ST_TO_ADDR
55726: GO 56211
55728: LD_INT 16
55730: DOUBLE
55731: EQUAL
55732: IFTRUE 55790
55734: LD_INT 17
55736: DOUBLE
55737: EQUAL
55738: IFTRUE 55790
55740: LD_INT 18
55742: DOUBLE
55743: EQUAL
55744: IFTRUE 55790
55746: LD_INT 19
55748: DOUBLE
55749: EQUAL
55750: IFTRUE 55790
55752: LD_INT 22
55754: DOUBLE
55755: EQUAL
55756: IFTRUE 55790
55758: LD_INT 20
55760: DOUBLE
55761: EQUAL
55762: IFTRUE 55790
55764: LD_INT 21
55766: DOUBLE
55767: EQUAL
55768: IFTRUE 55790
55770: LD_INT 23
55772: DOUBLE
55773: EQUAL
55774: IFTRUE 55790
55776: LD_INT 24
55778: DOUBLE
55779: EQUAL
55780: IFTRUE 55790
55782: LD_INT 25
55784: DOUBLE
55785: EQUAL
55786: IFTRUE 55790
55788: GO 55846
55790: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
55791: LD_ADDR_VAR 0 9
55795: PUSH
55796: LD_VAR 0 35
55800: PUSH
55801: LD_VAR 0 36
55805: PUSH
55806: LD_VAR 0 37
55810: PUSH
55811: LD_VAR 0 38
55815: PUSH
55816: LD_VAR 0 39
55820: PUSH
55821: LD_VAR 0 40
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: PUSH
55834: LD_VAR 0 4
55838: PUSH
55839: LD_INT 1
55841: PLUS
55842: ARRAY
55843: ST_TO_ADDR
55844: GO 56211
55846: LD_INT 6
55848: DOUBLE
55849: EQUAL
55850: IFTRUE 55902
55852: LD_INT 7
55854: DOUBLE
55855: EQUAL
55856: IFTRUE 55902
55858: LD_INT 8
55860: DOUBLE
55861: EQUAL
55862: IFTRUE 55902
55864: LD_INT 13
55866: DOUBLE
55867: EQUAL
55868: IFTRUE 55902
55870: LD_INT 12
55872: DOUBLE
55873: EQUAL
55874: IFTRUE 55902
55876: LD_INT 15
55878: DOUBLE
55879: EQUAL
55880: IFTRUE 55902
55882: LD_INT 11
55884: DOUBLE
55885: EQUAL
55886: IFTRUE 55902
55888: LD_INT 14
55890: DOUBLE
55891: EQUAL
55892: IFTRUE 55902
55894: LD_INT 10
55896: DOUBLE
55897: EQUAL
55898: IFTRUE 55902
55900: GO 55958
55902: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
55903: LD_ADDR_VAR 0 9
55907: PUSH
55908: LD_VAR 0 41
55912: PUSH
55913: LD_VAR 0 42
55917: PUSH
55918: LD_VAR 0 43
55922: PUSH
55923: LD_VAR 0 44
55927: PUSH
55928: LD_VAR 0 45
55932: PUSH
55933: LD_VAR 0 46
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: PUSH
55946: LD_VAR 0 4
55950: PUSH
55951: LD_INT 1
55953: PLUS
55954: ARRAY
55955: ST_TO_ADDR
55956: GO 56211
55958: LD_INT 36
55960: DOUBLE
55961: EQUAL
55962: IFTRUE 55966
55964: GO 56022
55966: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
55967: LD_ADDR_VAR 0 9
55971: PUSH
55972: LD_VAR 0 47
55976: PUSH
55977: LD_VAR 0 48
55981: PUSH
55982: LD_VAR 0 49
55986: PUSH
55987: LD_VAR 0 50
55991: PUSH
55992: LD_VAR 0 51
55996: PUSH
55997: LD_VAR 0 52
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: PUSH
56010: LD_VAR 0 4
56014: PUSH
56015: LD_INT 1
56017: PLUS
56018: ARRAY
56019: ST_TO_ADDR
56020: GO 56211
56022: LD_INT 4
56024: DOUBLE
56025: EQUAL
56026: IFTRUE 56048
56028: LD_INT 5
56030: DOUBLE
56031: EQUAL
56032: IFTRUE 56048
56034: LD_INT 34
56036: DOUBLE
56037: EQUAL
56038: IFTRUE 56048
56040: LD_INT 37
56042: DOUBLE
56043: EQUAL
56044: IFTRUE 56048
56046: GO 56104
56048: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
56049: LD_ADDR_VAR 0 9
56053: PUSH
56054: LD_VAR 0 53
56058: PUSH
56059: LD_VAR 0 54
56063: PUSH
56064: LD_VAR 0 55
56068: PUSH
56069: LD_VAR 0 56
56073: PUSH
56074: LD_VAR 0 57
56078: PUSH
56079: LD_VAR 0 58
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: PUSH
56092: LD_VAR 0 4
56096: PUSH
56097: LD_INT 1
56099: PLUS
56100: ARRAY
56101: ST_TO_ADDR
56102: GO 56211
56104: LD_INT 31
56106: DOUBLE
56107: EQUAL
56108: IFTRUE 56154
56110: LD_INT 32
56112: DOUBLE
56113: EQUAL
56114: IFTRUE 56154
56116: LD_INT 33
56118: DOUBLE
56119: EQUAL
56120: IFTRUE 56154
56122: LD_INT 27
56124: DOUBLE
56125: EQUAL
56126: IFTRUE 56154
56128: LD_INT 26
56130: DOUBLE
56131: EQUAL
56132: IFTRUE 56154
56134: LD_INT 28
56136: DOUBLE
56137: EQUAL
56138: IFTRUE 56154
56140: LD_INT 29
56142: DOUBLE
56143: EQUAL
56144: IFTRUE 56154
56146: LD_INT 30
56148: DOUBLE
56149: EQUAL
56150: IFTRUE 56154
56152: GO 56210
56154: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
56155: LD_ADDR_VAR 0 9
56159: PUSH
56160: LD_VAR 0 59
56164: PUSH
56165: LD_VAR 0 60
56169: PUSH
56170: LD_VAR 0 61
56174: PUSH
56175: LD_VAR 0 62
56179: PUSH
56180: LD_VAR 0 63
56184: PUSH
56185: LD_VAR 0 64
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: PUSH
56198: LD_VAR 0 4
56202: PUSH
56203: LD_INT 1
56205: PLUS
56206: ARRAY
56207: ST_TO_ADDR
56208: GO 56211
56210: POP
// temp_list2 = [ ] ;
56211: LD_ADDR_VAR 0 10
56215: PUSH
56216: EMPTY
56217: ST_TO_ADDR
// for i in temp_list do
56218: LD_ADDR_VAR 0 8
56222: PUSH
56223: LD_VAR 0 9
56227: PUSH
56228: FOR_IN
56229: IFFALSE 56281
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
56231: LD_ADDR_VAR 0 10
56235: PUSH
56236: LD_VAR 0 10
56240: PUSH
56241: LD_VAR 0 8
56245: PUSH
56246: LD_INT 1
56248: ARRAY
56249: PUSH
56250: LD_VAR 0 2
56254: PLUS
56255: PUSH
56256: LD_VAR 0 8
56260: PUSH
56261: LD_INT 2
56263: ARRAY
56264: PUSH
56265: LD_VAR 0 3
56269: PLUS
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: EMPTY
56276: LIST
56277: ADD
56278: ST_TO_ADDR
56279: GO 56228
56281: POP
56282: POP
// result = temp_list2 ;
56283: LD_ADDR_VAR 0 7
56287: PUSH
56288: LD_VAR 0 10
56292: ST_TO_ADDR
// end ;
56293: LD_VAR 0 7
56297: RET
// export function EnemyInRange ( unit , dist ) ; begin
56298: LD_INT 0
56300: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
56301: LD_ADDR_VAR 0 3
56305: PUSH
56306: LD_VAR 0 1
56310: PPUSH
56311: CALL_OW 255
56315: PPUSH
56316: LD_VAR 0 1
56320: PPUSH
56321: CALL_OW 250
56325: PPUSH
56326: LD_VAR 0 1
56330: PPUSH
56331: CALL_OW 251
56335: PPUSH
56336: LD_VAR 0 2
56340: PPUSH
56341: CALL 29694 0 4
56345: PUSH
56346: LD_INT 4
56348: ARRAY
56349: ST_TO_ADDR
// end ;
56350: LD_VAR 0 3
56354: RET
// export function PlayerSeeMe ( unit ) ; begin
56355: LD_INT 0
56357: PPUSH
// result := See ( your_side , unit ) ;
56358: LD_ADDR_VAR 0 2
56362: PUSH
56363: LD_OWVAR 2
56367: PPUSH
56368: LD_VAR 0 1
56372: PPUSH
56373: CALL_OW 292
56377: ST_TO_ADDR
// end ;
56378: LD_VAR 0 2
56382: RET
// export function ReverseDir ( unit ) ; begin
56383: LD_INT 0
56385: PPUSH
// if not unit then
56386: LD_VAR 0 1
56390: NOT
56391: IFFALSE 56395
// exit ;
56393: GO 56418
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
56395: LD_ADDR_VAR 0 2
56399: PUSH
56400: LD_VAR 0 1
56404: PPUSH
56405: CALL_OW 254
56409: PUSH
56410: LD_INT 3
56412: PLUS
56413: PUSH
56414: LD_INT 6
56416: MOD
56417: ST_TO_ADDR
// end ;
56418: LD_VAR 0 2
56422: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
56423: LD_INT 0
56425: PPUSH
56426: PPUSH
56427: PPUSH
56428: PPUSH
56429: PPUSH
// if not hexes then
56430: LD_VAR 0 2
56434: NOT
56435: IFFALSE 56439
// exit ;
56437: GO 56587
// dist := 9999 ;
56439: LD_ADDR_VAR 0 5
56443: PUSH
56444: LD_INT 9999
56446: ST_TO_ADDR
// for i = 1 to hexes do
56447: LD_ADDR_VAR 0 4
56451: PUSH
56452: DOUBLE
56453: LD_INT 1
56455: DEC
56456: ST_TO_ADDR
56457: LD_VAR 0 2
56461: PUSH
56462: FOR_TO
56463: IFFALSE 56575
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
56465: LD_VAR 0 1
56469: PPUSH
56470: LD_VAR 0 2
56474: PUSH
56475: LD_VAR 0 4
56479: ARRAY
56480: PUSH
56481: LD_INT 1
56483: ARRAY
56484: PPUSH
56485: LD_VAR 0 2
56489: PUSH
56490: LD_VAR 0 4
56494: ARRAY
56495: PUSH
56496: LD_INT 2
56498: ARRAY
56499: PPUSH
56500: CALL_OW 297
56504: PUSH
56505: LD_VAR 0 5
56509: LESS
56510: IFFALSE 56573
// begin hex := hexes [ i ] ;
56512: LD_ADDR_VAR 0 7
56516: PUSH
56517: LD_VAR 0 2
56521: PUSH
56522: LD_VAR 0 4
56526: ARRAY
56527: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56528: LD_ADDR_VAR 0 5
56532: PUSH
56533: LD_VAR 0 1
56537: PPUSH
56538: LD_VAR 0 2
56542: PUSH
56543: LD_VAR 0 4
56547: ARRAY
56548: PUSH
56549: LD_INT 1
56551: ARRAY
56552: PPUSH
56553: LD_VAR 0 2
56557: PUSH
56558: LD_VAR 0 4
56562: ARRAY
56563: PUSH
56564: LD_INT 2
56566: ARRAY
56567: PPUSH
56568: CALL_OW 297
56572: ST_TO_ADDR
// end ; end ;
56573: GO 56462
56575: POP
56576: POP
// result := hex ;
56577: LD_ADDR_VAR 0 3
56581: PUSH
56582: LD_VAR 0 7
56586: ST_TO_ADDR
// end ;
56587: LD_VAR 0 3
56591: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
56592: LD_INT 0
56594: PPUSH
56595: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
56596: LD_VAR 0 1
56600: NOT
56601: PUSH
56602: LD_VAR 0 1
56606: PUSH
56607: LD_INT 21
56609: PUSH
56610: LD_INT 2
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 23
56619: PUSH
56620: LD_INT 2
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PPUSH
56631: CALL_OW 69
56635: IN
56636: NOT
56637: OR
56638: IFFALSE 56642
// exit ;
56640: GO 56689
// for i = 1 to 3 do
56642: LD_ADDR_VAR 0 3
56646: PUSH
56647: DOUBLE
56648: LD_INT 1
56650: DEC
56651: ST_TO_ADDR
56652: LD_INT 3
56654: PUSH
56655: FOR_TO
56656: IFFALSE 56687
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
56658: LD_VAR 0 1
56662: PPUSH
56663: CALL_OW 250
56667: PPUSH
56668: LD_VAR 0 1
56672: PPUSH
56673: CALL_OW 251
56677: PPUSH
56678: LD_INT 1
56680: PPUSH
56681: CALL_OW 453
56685: GO 56655
56687: POP
56688: POP
// end ;
56689: LD_VAR 0 2
56693: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
56694: LD_INT 0
56696: PPUSH
56697: PPUSH
56698: PPUSH
56699: PPUSH
56700: PPUSH
56701: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
56702: LD_VAR 0 1
56706: NOT
56707: PUSH
56708: LD_VAR 0 2
56712: NOT
56713: OR
56714: PUSH
56715: LD_VAR 0 1
56719: PPUSH
56720: CALL_OW 314
56724: OR
56725: IFFALSE 56729
// exit ;
56727: GO 57170
// x := GetX ( enemy_unit ) ;
56729: LD_ADDR_VAR 0 7
56733: PUSH
56734: LD_VAR 0 2
56738: PPUSH
56739: CALL_OW 250
56743: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
56744: LD_ADDR_VAR 0 8
56748: PUSH
56749: LD_VAR 0 2
56753: PPUSH
56754: CALL_OW 251
56758: ST_TO_ADDR
// if not x or not y then
56759: LD_VAR 0 7
56763: NOT
56764: PUSH
56765: LD_VAR 0 8
56769: NOT
56770: OR
56771: IFFALSE 56775
// exit ;
56773: GO 57170
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
56775: LD_ADDR_VAR 0 6
56779: PUSH
56780: LD_VAR 0 7
56784: PPUSH
56785: LD_INT 0
56787: PPUSH
56788: LD_INT 4
56790: PPUSH
56791: CALL_OW 272
56795: PUSH
56796: LD_VAR 0 8
56800: PPUSH
56801: LD_INT 0
56803: PPUSH
56804: LD_INT 4
56806: PPUSH
56807: CALL_OW 273
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_VAR 0 7
56820: PPUSH
56821: LD_INT 1
56823: PPUSH
56824: LD_INT 4
56826: PPUSH
56827: CALL_OW 272
56831: PUSH
56832: LD_VAR 0 8
56836: PPUSH
56837: LD_INT 1
56839: PPUSH
56840: LD_INT 4
56842: PPUSH
56843: CALL_OW 273
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: LD_VAR 0 7
56856: PPUSH
56857: LD_INT 2
56859: PPUSH
56860: LD_INT 4
56862: PPUSH
56863: CALL_OW 272
56867: PUSH
56868: LD_VAR 0 8
56872: PPUSH
56873: LD_INT 2
56875: PPUSH
56876: LD_INT 4
56878: PPUSH
56879: CALL_OW 273
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: LD_VAR 0 7
56892: PPUSH
56893: LD_INT 3
56895: PPUSH
56896: LD_INT 4
56898: PPUSH
56899: CALL_OW 272
56903: PUSH
56904: LD_VAR 0 8
56908: PPUSH
56909: LD_INT 3
56911: PPUSH
56912: LD_INT 4
56914: PPUSH
56915: CALL_OW 273
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_VAR 0 7
56928: PPUSH
56929: LD_INT 4
56931: PPUSH
56932: LD_INT 4
56934: PPUSH
56935: CALL_OW 272
56939: PUSH
56940: LD_VAR 0 8
56944: PPUSH
56945: LD_INT 4
56947: PPUSH
56948: LD_INT 4
56950: PPUSH
56951: CALL_OW 273
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_VAR 0 7
56964: PPUSH
56965: LD_INT 5
56967: PPUSH
56968: LD_INT 4
56970: PPUSH
56971: CALL_OW 272
56975: PUSH
56976: LD_VAR 0 8
56980: PPUSH
56981: LD_INT 5
56983: PPUSH
56984: LD_INT 4
56986: PPUSH
56987: CALL_OW 273
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: ST_TO_ADDR
// for i = tmp downto 1 do
57004: LD_ADDR_VAR 0 4
57008: PUSH
57009: DOUBLE
57010: LD_VAR 0 6
57014: INC
57015: ST_TO_ADDR
57016: LD_INT 1
57018: PUSH
57019: FOR_DOWNTO
57020: IFFALSE 57121
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
57022: LD_VAR 0 6
57026: PUSH
57027: LD_VAR 0 4
57031: ARRAY
57032: PUSH
57033: LD_INT 1
57035: ARRAY
57036: PPUSH
57037: LD_VAR 0 6
57041: PUSH
57042: LD_VAR 0 4
57046: ARRAY
57047: PUSH
57048: LD_INT 2
57050: ARRAY
57051: PPUSH
57052: CALL_OW 488
57056: NOT
57057: PUSH
57058: LD_VAR 0 6
57062: PUSH
57063: LD_VAR 0 4
57067: ARRAY
57068: PUSH
57069: LD_INT 1
57071: ARRAY
57072: PPUSH
57073: LD_VAR 0 6
57077: PUSH
57078: LD_VAR 0 4
57082: ARRAY
57083: PUSH
57084: LD_INT 2
57086: ARRAY
57087: PPUSH
57088: CALL_OW 428
57092: PUSH
57093: LD_INT 0
57095: NONEQUAL
57096: OR
57097: IFFALSE 57119
// tmp := Delete ( tmp , i ) ;
57099: LD_ADDR_VAR 0 6
57103: PUSH
57104: LD_VAR 0 6
57108: PPUSH
57109: LD_VAR 0 4
57113: PPUSH
57114: CALL_OW 3
57118: ST_TO_ADDR
57119: GO 57019
57121: POP
57122: POP
// j := GetClosestHex ( unit , tmp ) ;
57123: LD_ADDR_VAR 0 5
57127: PUSH
57128: LD_VAR 0 1
57132: PPUSH
57133: LD_VAR 0 6
57137: PPUSH
57138: CALL 56423 0 2
57142: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
57143: LD_VAR 0 1
57147: PPUSH
57148: LD_VAR 0 5
57152: PUSH
57153: LD_INT 1
57155: ARRAY
57156: PPUSH
57157: LD_VAR 0 5
57161: PUSH
57162: LD_INT 2
57164: ARRAY
57165: PPUSH
57166: CALL_OW 111
// end ;
57170: LD_VAR 0 3
57174: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
57175: LD_INT 0
57177: PPUSH
57178: PPUSH
57179: PPUSH
// uc_side = 0 ;
57180: LD_ADDR_OWVAR 20
57184: PUSH
57185: LD_INT 0
57187: ST_TO_ADDR
// uc_nation = 0 ;
57188: LD_ADDR_OWVAR 21
57192: PUSH
57193: LD_INT 0
57195: ST_TO_ADDR
// InitHc_All ( ) ;
57196: CALL_OW 584
// InitVc ;
57200: CALL_OW 20
// if mastodonts then
57204: LD_VAR 0 6
57208: IFFALSE 57275
// for i = 1 to mastodonts do
57210: LD_ADDR_VAR 0 11
57214: PUSH
57215: DOUBLE
57216: LD_INT 1
57218: DEC
57219: ST_TO_ADDR
57220: LD_VAR 0 6
57224: PUSH
57225: FOR_TO
57226: IFFALSE 57273
// begin vc_chassis := 31 ;
57228: LD_ADDR_OWVAR 37
57232: PUSH
57233: LD_INT 31
57235: ST_TO_ADDR
// vc_control := control_rider ;
57236: LD_ADDR_OWVAR 38
57240: PUSH
57241: LD_INT 4
57243: ST_TO_ADDR
// animal := CreateVehicle ;
57244: LD_ADDR_VAR 0 12
57248: PUSH
57249: CALL_OW 45
57253: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57254: LD_VAR 0 12
57258: PPUSH
57259: LD_VAR 0 8
57263: PPUSH
57264: LD_INT 0
57266: PPUSH
57267: CALL 59463 0 3
// end ;
57271: GO 57225
57273: POP
57274: POP
// if horses then
57275: LD_VAR 0 5
57279: IFFALSE 57346
// for i = 1 to horses do
57281: LD_ADDR_VAR 0 11
57285: PUSH
57286: DOUBLE
57287: LD_INT 1
57289: DEC
57290: ST_TO_ADDR
57291: LD_VAR 0 5
57295: PUSH
57296: FOR_TO
57297: IFFALSE 57344
// begin hc_class := 21 ;
57299: LD_ADDR_OWVAR 28
57303: PUSH
57304: LD_INT 21
57306: ST_TO_ADDR
// hc_gallery :=  ;
57307: LD_ADDR_OWVAR 33
57311: PUSH
57312: LD_STRING 
57314: ST_TO_ADDR
// animal := CreateHuman ;
57315: LD_ADDR_VAR 0 12
57319: PUSH
57320: CALL_OW 44
57324: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57325: LD_VAR 0 12
57329: PPUSH
57330: LD_VAR 0 8
57334: PPUSH
57335: LD_INT 0
57337: PPUSH
57338: CALL 59463 0 3
// end ;
57342: GO 57296
57344: POP
57345: POP
// if birds then
57346: LD_VAR 0 1
57350: IFFALSE 57417
// for i = 1 to birds do
57352: LD_ADDR_VAR 0 11
57356: PUSH
57357: DOUBLE
57358: LD_INT 1
57360: DEC
57361: ST_TO_ADDR
57362: LD_VAR 0 1
57366: PUSH
57367: FOR_TO
57368: IFFALSE 57415
// begin hc_class = 18 ;
57370: LD_ADDR_OWVAR 28
57374: PUSH
57375: LD_INT 18
57377: ST_TO_ADDR
// hc_gallery =  ;
57378: LD_ADDR_OWVAR 33
57382: PUSH
57383: LD_STRING 
57385: ST_TO_ADDR
// animal := CreateHuman ;
57386: LD_ADDR_VAR 0 12
57390: PUSH
57391: CALL_OW 44
57395: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57396: LD_VAR 0 12
57400: PPUSH
57401: LD_VAR 0 8
57405: PPUSH
57406: LD_INT 0
57408: PPUSH
57409: CALL 59463 0 3
// end ;
57413: GO 57367
57415: POP
57416: POP
// if tigers then
57417: LD_VAR 0 2
57421: IFFALSE 57505
// for i = 1 to tigers do
57423: LD_ADDR_VAR 0 11
57427: PUSH
57428: DOUBLE
57429: LD_INT 1
57431: DEC
57432: ST_TO_ADDR
57433: LD_VAR 0 2
57437: PUSH
57438: FOR_TO
57439: IFFALSE 57503
// begin hc_class = class_tiger ;
57441: LD_ADDR_OWVAR 28
57445: PUSH
57446: LD_INT 14
57448: ST_TO_ADDR
// hc_gallery =  ;
57449: LD_ADDR_OWVAR 33
57453: PUSH
57454: LD_STRING 
57456: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
57457: LD_ADDR_OWVAR 35
57461: PUSH
57462: LD_INT 7
57464: NEG
57465: PPUSH
57466: LD_INT 7
57468: PPUSH
57469: CALL_OW 12
57473: ST_TO_ADDR
// animal := CreateHuman ;
57474: LD_ADDR_VAR 0 12
57478: PUSH
57479: CALL_OW 44
57483: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57484: LD_VAR 0 12
57488: PPUSH
57489: LD_VAR 0 8
57493: PPUSH
57494: LD_INT 0
57496: PPUSH
57497: CALL 59463 0 3
// end ;
57501: GO 57438
57503: POP
57504: POP
// if apemans then
57505: LD_VAR 0 3
57509: IFFALSE 57632
// for i = 1 to apemans do
57511: LD_ADDR_VAR 0 11
57515: PUSH
57516: DOUBLE
57517: LD_INT 1
57519: DEC
57520: ST_TO_ADDR
57521: LD_VAR 0 3
57525: PUSH
57526: FOR_TO
57527: IFFALSE 57630
// begin hc_class = class_apeman ;
57529: LD_ADDR_OWVAR 28
57533: PUSH
57534: LD_INT 12
57536: ST_TO_ADDR
// hc_gallery =  ;
57537: LD_ADDR_OWVAR 33
57541: PUSH
57542: LD_STRING 
57544: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
57545: LD_ADDR_OWVAR 35
57549: PUSH
57550: LD_INT 2
57552: NEG
57553: PPUSH
57554: LD_INT 2
57556: PPUSH
57557: CALL_OW 12
57561: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
57562: LD_ADDR_OWVAR 31
57566: PUSH
57567: LD_INT 1
57569: PPUSH
57570: LD_INT 3
57572: PPUSH
57573: CALL_OW 12
57577: PUSH
57578: LD_INT 1
57580: PPUSH
57581: LD_INT 3
57583: PPUSH
57584: CALL_OW 12
57588: PUSH
57589: LD_INT 0
57591: PUSH
57592: LD_INT 0
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: LIST
57599: LIST
57600: ST_TO_ADDR
// animal := CreateHuman ;
57601: LD_ADDR_VAR 0 12
57605: PUSH
57606: CALL_OW 44
57610: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57611: LD_VAR 0 12
57615: PPUSH
57616: LD_VAR 0 8
57620: PPUSH
57621: LD_INT 0
57623: PPUSH
57624: CALL 59463 0 3
// end ;
57628: GO 57526
57630: POP
57631: POP
// if enchidnas then
57632: LD_VAR 0 4
57636: IFFALSE 57703
// for i = 1 to enchidnas do
57638: LD_ADDR_VAR 0 11
57642: PUSH
57643: DOUBLE
57644: LD_INT 1
57646: DEC
57647: ST_TO_ADDR
57648: LD_VAR 0 4
57652: PUSH
57653: FOR_TO
57654: IFFALSE 57701
// begin hc_class = 13 ;
57656: LD_ADDR_OWVAR 28
57660: PUSH
57661: LD_INT 13
57663: ST_TO_ADDR
// hc_gallery =  ;
57664: LD_ADDR_OWVAR 33
57668: PUSH
57669: LD_STRING 
57671: ST_TO_ADDR
// animal := CreateHuman ;
57672: LD_ADDR_VAR 0 12
57676: PUSH
57677: CALL_OW 44
57681: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57682: LD_VAR 0 12
57686: PPUSH
57687: LD_VAR 0 8
57691: PPUSH
57692: LD_INT 0
57694: PPUSH
57695: CALL 59463 0 3
// end ;
57699: GO 57653
57701: POP
57702: POP
// if fishes then
57703: LD_VAR 0 7
57707: IFFALSE 57774
// for i = 1 to fishes do
57709: LD_ADDR_VAR 0 11
57713: PUSH
57714: DOUBLE
57715: LD_INT 1
57717: DEC
57718: ST_TO_ADDR
57719: LD_VAR 0 7
57723: PUSH
57724: FOR_TO
57725: IFFALSE 57772
// begin hc_class = 20 ;
57727: LD_ADDR_OWVAR 28
57731: PUSH
57732: LD_INT 20
57734: ST_TO_ADDR
// hc_gallery =  ;
57735: LD_ADDR_OWVAR 33
57739: PUSH
57740: LD_STRING 
57742: ST_TO_ADDR
// animal := CreateHuman ;
57743: LD_ADDR_VAR 0 12
57747: PUSH
57748: CALL_OW 44
57752: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
57753: LD_VAR 0 12
57757: PPUSH
57758: LD_VAR 0 9
57762: PPUSH
57763: LD_INT 0
57765: PPUSH
57766: CALL 59463 0 3
// end ;
57770: GO 57724
57772: POP
57773: POP
// end ;
57774: LD_VAR 0 10
57778: RET
// export function WantHeal ( sci , unit ) ; begin
57779: LD_INT 0
57781: PPUSH
// if GetTaskList ( sci ) > 0 then
57782: LD_VAR 0 1
57786: PPUSH
57787: CALL_OW 437
57791: PUSH
57792: LD_INT 0
57794: GREATER
57795: IFFALSE 57865
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
57797: LD_VAR 0 1
57801: PPUSH
57802: CALL_OW 437
57806: PUSH
57807: LD_INT 1
57809: ARRAY
57810: PUSH
57811: LD_INT 1
57813: ARRAY
57814: PUSH
57815: LD_STRING l
57817: EQUAL
57818: PUSH
57819: LD_VAR 0 1
57823: PPUSH
57824: CALL_OW 437
57828: PUSH
57829: LD_INT 1
57831: ARRAY
57832: PUSH
57833: LD_INT 4
57835: ARRAY
57836: PUSH
57837: LD_VAR 0 2
57841: EQUAL
57842: AND
57843: IFFALSE 57855
// result := true else
57845: LD_ADDR_VAR 0 3
57849: PUSH
57850: LD_INT 1
57852: ST_TO_ADDR
57853: GO 57863
// result := false ;
57855: LD_ADDR_VAR 0 3
57859: PUSH
57860: LD_INT 0
57862: ST_TO_ADDR
// end else
57863: GO 57873
// result := false ;
57865: LD_ADDR_VAR 0 3
57869: PUSH
57870: LD_INT 0
57872: ST_TO_ADDR
// end ;
57873: LD_VAR 0 3
57877: RET
// export function HealTarget ( sci ) ; begin
57878: LD_INT 0
57880: PPUSH
// if not sci then
57881: LD_VAR 0 1
57885: NOT
57886: IFFALSE 57890
// exit ;
57888: GO 57955
// result := 0 ;
57890: LD_ADDR_VAR 0 2
57894: PUSH
57895: LD_INT 0
57897: ST_TO_ADDR
// if GetTaskList ( sci ) then
57898: LD_VAR 0 1
57902: PPUSH
57903: CALL_OW 437
57907: IFFALSE 57955
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
57909: LD_VAR 0 1
57913: PPUSH
57914: CALL_OW 437
57918: PUSH
57919: LD_INT 1
57921: ARRAY
57922: PUSH
57923: LD_INT 1
57925: ARRAY
57926: PUSH
57927: LD_STRING l
57929: EQUAL
57930: IFFALSE 57955
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
57932: LD_ADDR_VAR 0 2
57936: PUSH
57937: LD_VAR 0 1
57941: PPUSH
57942: CALL_OW 437
57946: PUSH
57947: LD_INT 1
57949: ARRAY
57950: PUSH
57951: LD_INT 4
57953: ARRAY
57954: ST_TO_ADDR
// end ;
57955: LD_VAR 0 2
57959: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
57960: LD_INT 0
57962: PPUSH
57963: PPUSH
57964: PPUSH
57965: PPUSH
// if not base_units then
57966: LD_VAR 0 1
57970: NOT
57971: IFFALSE 57975
// exit ;
57973: GO 58062
// result := false ;
57975: LD_ADDR_VAR 0 2
57979: PUSH
57980: LD_INT 0
57982: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
57983: LD_ADDR_VAR 0 5
57987: PUSH
57988: LD_VAR 0 1
57992: PPUSH
57993: LD_INT 21
57995: PUSH
57996: LD_INT 3
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PPUSH
58003: CALL_OW 72
58007: ST_TO_ADDR
// if not tmp then
58008: LD_VAR 0 5
58012: NOT
58013: IFFALSE 58017
// exit ;
58015: GO 58062
// for i in tmp do
58017: LD_ADDR_VAR 0 3
58021: PUSH
58022: LD_VAR 0 5
58026: PUSH
58027: FOR_IN
58028: IFFALSE 58060
// begin result := EnemyInRange ( i , 22 ) ;
58030: LD_ADDR_VAR 0 2
58034: PUSH
58035: LD_VAR 0 3
58039: PPUSH
58040: LD_INT 22
58042: PPUSH
58043: CALL 56298 0 2
58047: ST_TO_ADDR
// if result then
58048: LD_VAR 0 2
58052: IFFALSE 58058
// exit ;
58054: POP
58055: POP
58056: GO 58062
// end ;
58058: GO 58027
58060: POP
58061: POP
// end ;
58062: LD_VAR 0 2
58066: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
58067: LD_INT 0
58069: PPUSH
58070: PPUSH
// if not units then
58071: LD_VAR 0 1
58075: NOT
58076: IFFALSE 58080
// exit ;
58078: GO 58150
// result := [ ] ;
58080: LD_ADDR_VAR 0 3
58084: PUSH
58085: EMPTY
58086: ST_TO_ADDR
// for i in units do
58087: LD_ADDR_VAR 0 4
58091: PUSH
58092: LD_VAR 0 1
58096: PUSH
58097: FOR_IN
58098: IFFALSE 58148
// if GetTag ( i ) = tag then
58100: LD_VAR 0 4
58104: PPUSH
58105: CALL_OW 110
58109: PUSH
58110: LD_VAR 0 2
58114: EQUAL
58115: IFFALSE 58146
// result := Replace ( result , result + 1 , i ) ;
58117: LD_ADDR_VAR 0 3
58121: PUSH
58122: LD_VAR 0 3
58126: PPUSH
58127: LD_VAR 0 3
58131: PUSH
58132: LD_INT 1
58134: PLUS
58135: PPUSH
58136: LD_VAR 0 4
58140: PPUSH
58141: CALL_OW 1
58145: ST_TO_ADDR
58146: GO 58097
58148: POP
58149: POP
// end ;
58150: LD_VAR 0 3
58154: RET
// export function IsDriver ( un ) ; begin
58155: LD_INT 0
58157: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
58158: LD_ADDR_VAR 0 2
58162: PUSH
58163: LD_VAR 0 1
58167: PUSH
58168: LD_INT 55
58170: PUSH
58171: EMPTY
58172: LIST
58173: PPUSH
58174: CALL_OW 69
58178: IN
58179: ST_TO_ADDR
// end ;
58180: LD_VAR 0 2
58184: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
58185: LD_INT 0
58187: PPUSH
58188: PPUSH
// list := [ ] ;
58189: LD_ADDR_VAR 0 5
58193: PUSH
58194: EMPTY
58195: ST_TO_ADDR
// case d of 0 :
58196: LD_VAR 0 3
58200: PUSH
58201: LD_INT 0
58203: DOUBLE
58204: EQUAL
58205: IFTRUE 58209
58207: GO 58342
58209: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
58210: LD_ADDR_VAR 0 5
58214: PUSH
58215: LD_VAR 0 1
58219: PUSH
58220: LD_INT 4
58222: MINUS
58223: PUSH
58224: LD_VAR 0 2
58228: PUSH
58229: LD_INT 4
58231: MINUS
58232: PUSH
58233: LD_INT 2
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: LIST
58240: PUSH
58241: LD_VAR 0 1
58245: PUSH
58246: LD_INT 3
58248: MINUS
58249: PUSH
58250: LD_VAR 0 2
58254: PUSH
58255: LD_INT 1
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: LIST
58262: PUSH
58263: LD_VAR 0 1
58267: PUSH
58268: LD_INT 4
58270: PLUS
58271: PUSH
58272: LD_VAR 0 2
58276: PUSH
58277: LD_INT 4
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: LIST
58284: PUSH
58285: LD_VAR 0 1
58289: PUSH
58290: LD_INT 3
58292: PLUS
58293: PUSH
58294: LD_VAR 0 2
58298: PUSH
58299: LD_INT 3
58301: PLUS
58302: PUSH
58303: LD_INT 5
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: LIST
58310: PUSH
58311: LD_VAR 0 1
58315: PUSH
58316: LD_VAR 0 2
58320: PUSH
58321: LD_INT 4
58323: PLUS
58324: PUSH
58325: LD_INT 0
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: LIST
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: ST_TO_ADDR
// end ; 1 :
58340: GO 59040
58342: LD_INT 1
58344: DOUBLE
58345: EQUAL
58346: IFTRUE 58350
58348: GO 58483
58350: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
58351: LD_ADDR_VAR 0 5
58355: PUSH
58356: LD_VAR 0 1
58360: PUSH
58361: LD_VAR 0 2
58365: PUSH
58366: LD_INT 4
58368: MINUS
58369: PUSH
58370: LD_INT 3
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: LIST
58377: PUSH
58378: LD_VAR 0 1
58382: PUSH
58383: LD_INT 3
58385: MINUS
58386: PUSH
58387: LD_VAR 0 2
58391: PUSH
58392: LD_INT 3
58394: MINUS
58395: PUSH
58396: LD_INT 2
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: LIST
58403: PUSH
58404: LD_VAR 0 1
58408: PUSH
58409: LD_INT 4
58411: MINUS
58412: PUSH
58413: LD_VAR 0 2
58417: PUSH
58418: LD_INT 1
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: LIST
58425: PUSH
58426: LD_VAR 0 1
58430: PUSH
58431: LD_VAR 0 2
58435: PUSH
58436: LD_INT 3
58438: PLUS
58439: PUSH
58440: LD_INT 0
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: LIST
58447: PUSH
58448: LD_VAR 0 1
58452: PUSH
58453: LD_INT 4
58455: PLUS
58456: PUSH
58457: LD_VAR 0 2
58461: PUSH
58462: LD_INT 4
58464: PLUS
58465: PUSH
58466: LD_INT 5
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: LIST
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: ST_TO_ADDR
// end ; 2 :
58481: GO 59040
58483: LD_INT 2
58485: DOUBLE
58486: EQUAL
58487: IFTRUE 58491
58489: GO 58620
58491: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
58492: LD_ADDR_VAR 0 5
58496: PUSH
58497: LD_VAR 0 1
58501: PUSH
58502: LD_VAR 0 2
58506: PUSH
58507: LD_INT 3
58509: MINUS
58510: PUSH
58511: LD_INT 3
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: LIST
58518: PUSH
58519: LD_VAR 0 1
58523: PUSH
58524: LD_INT 4
58526: PLUS
58527: PUSH
58528: LD_VAR 0 2
58532: PUSH
58533: LD_INT 4
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: LIST
58540: PUSH
58541: LD_VAR 0 1
58545: PUSH
58546: LD_VAR 0 2
58550: PUSH
58551: LD_INT 4
58553: PLUS
58554: PUSH
58555: LD_INT 0
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: LIST
58562: PUSH
58563: LD_VAR 0 1
58567: PUSH
58568: LD_INT 3
58570: MINUS
58571: PUSH
58572: LD_VAR 0 2
58576: PUSH
58577: LD_INT 1
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: LIST
58584: PUSH
58585: LD_VAR 0 1
58589: PUSH
58590: LD_INT 4
58592: MINUS
58593: PUSH
58594: LD_VAR 0 2
58598: PUSH
58599: LD_INT 4
58601: MINUS
58602: PUSH
58603: LD_INT 2
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: LIST
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: LIST
58615: LIST
58616: LIST
58617: ST_TO_ADDR
// end ; 3 :
58618: GO 59040
58620: LD_INT 3
58622: DOUBLE
58623: EQUAL
58624: IFTRUE 58628
58626: GO 58761
58628: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
58629: LD_ADDR_VAR 0 5
58633: PUSH
58634: LD_VAR 0 1
58638: PUSH
58639: LD_INT 3
58641: PLUS
58642: PUSH
58643: LD_VAR 0 2
58647: PUSH
58648: LD_INT 4
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: LIST
58655: PUSH
58656: LD_VAR 0 1
58660: PUSH
58661: LD_INT 4
58663: PLUS
58664: PUSH
58665: LD_VAR 0 2
58669: PUSH
58670: LD_INT 4
58672: PLUS
58673: PUSH
58674: LD_INT 5
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: LIST
58681: PUSH
58682: LD_VAR 0 1
58686: PUSH
58687: LD_INT 4
58689: MINUS
58690: PUSH
58691: LD_VAR 0 2
58695: PUSH
58696: LD_INT 1
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: LIST
58703: PUSH
58704: LD_VAR 0 1
58708: PUSH
58709: LD_VAR 0 2
58713: PUSH
58714: LD_INT 4
58716: MINUS
58717: PUSH
58718: LD_INT 3
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: LIST
58725: PUSH
58726: LD_VAR 0 1
58730: PUSH
58731: LD_INT 3
58733: MINUS
58734: PUSH
58735: LD_VAR 0 2
58739: PUSH
58740: LD_INT 3
58742: MINUS
58743: PUSH
58744: LD_INT 2
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: LIST
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: LIST
58756: LIST
58757: LIST
58758: ST_TO_ADDR
// end ; 4 :
58759: GO 59040
58761: LD_INT 4
58763: DOUBLE
58764: EQUAL
58765: IFTRUE 58769
58767: GO 58902
58769: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
58770: LD_ADDR_VAR 0 5
58774: PUSH
58775: LD_VAR 0 1
58779: PUSH
58780: LD_VAR 0 2
58784: PUSH
58785: LD_INT 4
58787: PLUS
58788: PUSH
58789: LD_INT 0
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: LIST
58796: PUSH
58797: LD_VAR 0 1
58801: PUSH
58802: LD_INT 3
58804: PLUS
58805: PUSH
58806: LD_VAR 0 2
58810: PUSH
58811: LD_INT 3
58813: PLUS
58814: PUSH
58815: LD_INT 5
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: LIST
58822: PUSH
58823: LD_VAR 0 1
58827: PUSH
58828: LD_INT 4
58830: PLUS
58831: PUSH
58832: LD_VAR 0 2
58836: PUSH
58837: LD_INT 4
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: LIST
58844: PUSH
58845: LD_VAR 0 1
58849: PUSH
58850: LD_VAR 0 2
58854: PUSH
58855: LD_INT 3
58857: MINUS
58858: PUSH
58859: LD_INT 3
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: LIST
58866: PUSH
58867: LD_VAR 0 1
58871: PUSH
58872: LD_INT 4
58874: MINUS
58875: PUSH
58876: LD_VAR 0 2
58880: PUSH
58881: LD_INT 4
58883: MINUS
58884: PUSH
58885: LD_INT 2
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: LIST
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: ST_TO_ADDR
// end ; 5 :
58900: GO 59040
58902: LD_INT 5
58904: DOUBLE
58905: EQUAL
58906: IFTRUE 58910
58908: GO 59039
58910: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
58911: LD_ADDR_VAR 0 5
58915: PUSH
58916: LD_VAR 0 1
58920: PUSH
58921: LD_INT 4
58923: MINUS
58924: PUSH
58925: LD_VAR 0 2
58929: PUSH
58930: LD_INT 1
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: LIST
58937: PUSH
58938: LD_VAR 0 1
58942: PUSH
58943: LD_VAR 0 2
58947: PUSH
58948: LD_INT 4
58950: MINUS
58951: PUSH
58952: LD_INT 3
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: LIST
58959: PUSH
58960: LD_VAR 0 1
58964: PUSH
58965: LD_INT 4
58967: PLUS
58968: PUSH
58969: LD_VAR 0 2
58973: PUSH
58974: LD_INT 4
58976: PLUS
58977: PUSH
58978: LD_INT 5
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: LIST
58985: PUSH
58986: LD_VAR 0 1
58990: PUSH
58991: LD_INT 3
58993: PLUS
58994: PUSH
58995: LD_VAR 0 2
58999: PUSH
59000: LD_INT 4
59002: PUSH
59003: EMPTY
59004: LIST
59005: LIST
59006: LIST
59007: PUSH
59008: LD_VAR 0 1
59012: PUSH
59013: LD_VAR 0 2
59017: PUSH
59018: LD_INT 3
59020: PLUS
59021: PUSH
59022: LD_INT 0
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: LIST
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: ST_TO_ADDR
// end ; end ;
59037: GO 59040
59039: POP
// result := list ;
59040: LD_ADDR_VAR 0 4
59044: PUSH
59045: LD_VAR 0 5
59049: ST_TO_ADDR
// end ;
59050: LD_VAR 0 4
59054: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
59055: LD_INT 0
59057: PPUSH
59058: PPUSH
59059: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
59060: LD_VAR 0 1
59064: NOT
59065: PUSH
59066: LD_VAR 0 2
59070: PUSH
59071: LD_INT 1
59073: PUSH
59074: LD_INT 2
59076: PUSH
59077: LD_INT 3
59079: PUSH
59080: LD_INT 4
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: LIST
59087: LIST
59088: IN
59089: NOT
59090: OR
59091: IFFALSE 59095
// exit ;
59093: GO 59187
// tmp := [ ] ;
59095: LD_ADDR_VAR 0 5
59099: PUSH
59100: EMPTY
59101: ST_TO_ADDR
// for i in units do
59102: LD_ADDR_VAR 0 4
59106: PUSH
59107: LD_VAR 0 1
59111: PUSH
59112: FOR_IN
59113: IFFALSE 59156
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
59115: LD_ADDR_VAR 0 5
59119: PUSH
59120: LD_VAR 0 5
59124: PPUSH
59125: LD_VAR 0 5
59129: PUSH
59130: LD_INT 1
59132: PLUS
59133: PPUSH
59134: LD_VAR 0 4
59138: PPUSH
59139: LD_VAR 0 2
59143: PPUSH
59144: CALL_OW 259
59148: PPUSH
59149: CALL_OW 2
59153: ST_TO_ADDR
59154: GO 59112
59156: POP
59157: POP
// if not tmp then
59158: LD_VAR 0 5
59162: NOT
59163: IFFALSE 59167
// exit ;
59165: GO 59187
// result := SortListByListDesc ( units , tmp ) ;
59167: LD_ADDR_VAR 0 3
59171: PUSH
59172: LD_VAR 0 1
59176: PPUSH
59177: LD_VAR 0 5
59181: PPUSH
59182: CALL_OW 77
59186: ST_TO_ADDR
// end ;
59187: LD_VAR 0 3
59191: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
59192: LD_INT 0
59194: PPUSH
59195: PPUSH
59196: PPUSH
// result := false ;
59197: LD_ADDR_VAR 0 3
59201: PUSH
59202: LD_INT 0
59204: ST_TO_ADDR
// x := GetX ( building ) ;
59205: LD_ADDR_VAR 0 4
59209: PUSH
59210: LD_VAR 0 2
59214: PPUSH
59215: CALL_OW 250
59219: ST_TO_ADDR
// y := GetY ( building ) ;
59220: LD_ADDR_VAR 0 5
59224: PUSH
59225: LD_VAR 0 2
59229: PPUSH
59230: CALL_OW 251
59234: ST_TO_ADDR
// if not building or not x or not y then
59235: LD_VAR 0 2
59239: NOT
59240: PUSH
59241: LD_VAR 0 4
59245: NOT
59246: OR
59247: PUSH
59248: LD_VAR 0 5
59252: NOT
59253: OR
59254: IFFALSE 59258
// exit ;
59256: GO 59350
// if GetTaskList ( unit ) then
59258: LD_VAR 0 1
59262: PPUSH
59263: CALL_OW 437
59267: IFFALSE 59350
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59269: LD_STRING e
59271: PUSH
59272: LD_VAR 0 1
59276: PPUSH
59277: CALL_OW 437
59281: PUSH
59282: LD_INT 1
59284: ARRAY
59285: PUSH
59286: LD_INT 1
59288: ARRAY
59289: EQUAL
59290: PUSH
59291: LD_VAR 0 4
59295: PUSH
59296: LD_VAR 0 1
59300: PPUSH
59301: CALL_OW 437
59305: PUSH
59306: LD_INT 1
59308: ARRAY
59309: PUSH
59310: LD_INT 2
59312: ARRAY
59313: EQUAL
59314: AND
59315: PUSH
59316: LD_VAR 0 5
59320: PUSH
59321: LD_VAR 0 1
59325: PPUSH
59326: CALL_OW 437
59330: PUSH
59331: LD_INT 1
59333: ARRAY
59334: PUSH
59335: LD_INT 3
59337: ARRAY
59338: EQUAL
59339: AND
59340: IFFALSE 59350
// result := true end ;
59342: LD_ADDR_VAR 0 3
59346: PUSH
59347: LD_INT 1
59349: ST_TO_ADDR
// end ;
59350: LD_VAR 0 3
59354: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
59355: LD_INT 0
59357: PPUSH
// result := false ;
59358: LD_ADDR_VAR 0 4
59362: PUSH
59363: LD_INT 0
59365: ST_TO_ADDR
// if GetTaskList ( unit ) then
59366: LD_VAR 0 1
59370: PPUSH
59371: CALL_OW 437
59375: IFFALSE 59458
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59377: LD_STRING M
59379: PUSH
59380: LD_VAR 0 1
59384: PPUSH
59385: CALL_OW 437
59389: PUSH
59390: LD_INT 1
59392: ARRAY
59393: PUSH
59394: LD_INT 1
59396: ARRAY
59397: EQUAL
59398: PUSH
59399: LD_VAR 0 2
59403: PUSH
59404: LD_VAR 0 1
59408: PPUSH
59409: CALL_OW 437
59413: PUSH
59414: LD_INT 1
59416: ARRAY
59417: PUSH
59418: LD_INT 2
59420: ARRAY
59421: EQUAL
59422: AND
59423: PUSH
59424: LD_VAR 0 3
59428: PUSH
59429: LD_VAR 0 1
59433: PPUSH
59434: CALL_OW 437
59438: PUSH
59439: LD_INT 1
59441: ARRAY
59442: PUSH
59443: LD_INT 3
59445: ARRAY
59446: EQUAL
59447: AND
59448: IFFALSE 59458
// result := true ;
59450: LD_ADDR_VAR 0 4
59454: PUSH
59455: LD_INT 1
59457: ST_TO_ADDR
// end ; end ;
59458: LD_VAR 0 4
59462: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
59463: LD_INT 0
59465: PPUSH
59466: PPUSH
59467: PPUSH
59468: PPUSH
// if not unit or not area then
59469: LD_VAR 0 1
59473: NOT
59474: PUSH
59475: LD_VAR 0 2
59479: NOT
59480: OR
59481: IFFALSE 59485
// exit ;
59483: GO 59649
// tmp := AreaToList ( area , i ) ;
59485: LD_ADDR_VAR 0 6
59489: PUSH
59490: LD_VAR 0 2
59494: PPUSH
59495: LD_VAR 0 5
59499: PPUSH
59500: CALL_OW 517
59504: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
59505: LD_ADDR_VAR 0 5
59509: PUSH
59510: DOUBLE
59511: LD_INT 1
59513: DEC
59514: ST_TO_ADDR
59515: LD_VAR 0 6
59519: PUSH
59520: LD_INT 1
59522: ARRAY
59523: PUSH
59524: FOR_TO
59525: IFFALSE 59647
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
59527: LD_ADDR_VAR 0 7
59531: PUSH
59532: LD_VAR 0 6
59536: PUSH
59537: LD_INT 1
59539: ARRAY
59540: PUSH
59541: LD_VAR 0 5
59545: ARRAY
59546: PUSH
59547: LD_VAR 0 6
59551: PUSH
59552: LD_INT 2
59554: ARRAY
59555: PUSH
59556: LD_VAR 0 5
59560: ARRAY
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
59566: LD_VAR 0 7
59570: PUSH
59571: LD_INT 1
59573: ARRAY
59574: PPUSH
59575: LD_VAR 0 7
59579: PUSH
59580: LD_INT 2
59582: ARRAY
59583: PPUSH
59584: CALL_OW 428
59588: PUSH
59589: LD_INT 0
59591: EQUAL
59592: IFFALSE 59645
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
59594: LD_VAR 0 1
59598: PPUSH
59599: LD_VAR 0 7
59603: PUSH
59604: LD_INT 1
59606: ARRAY
59607: PPUSH
59608: LD_VAR 0 7
59612: PUSH
59613: LD_INT 2
59615: ARRAY
59616: PPUSH
59617: LD_VAR 0 3
59621: PPUSH
59622: CALL_OW 48
// result := IsPlaced ( unit ) ;
59626: LD_ADDR_VAR 0 4
59630: PUSH
59631: LD_VAR 0 1
59635: PPUSH
59636: CALL_OW 305
59640: ST_TO_ADDR
// exit ;
59641: POP
59642: POP
59643: GO 59649
// end ; end ;
59645: GO 59524
59647: POP
59648: POP
// end ;
59649: LD_VAR 0 4
59653: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
59654: LD_INT 0
59656: PPUSH
59657: PPUSH
59658: PPUSH
// if not side or side > 8 then
59659: LD_VAR 0 1
59663: NOT
59664: PUSH
59665: LD_VAR 0 1
59669: PUSH
59670: LD_INT 8
59672: GREATER
59673: OR
59674: IFFALSE 59678
// exit ;
59676: GO 59865
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
59678: LD_ADDR_VAR 0 4
59682: PUSH
59683: LD_INT 22
59685: PUSH
59686: LD_VAR 0 1
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 21
59697: PUSH
59698: LD_INT 3
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PPUSH
59709: CALL_OW 69
59713: ST_TO_ADDR
// if not tmp then
59714: LD_VAR 0 4
59718: NOT
59719: IFFALSE 59723
// exit ;
59721: GO 59865
// enable_addtolog := true ;
59723: LD_ADDR_OWVAR 81
59727: PUSH
59728: LD_INT 1
59730: ST_TO_ADDR
// AddToLog ( [ ) ;
59731: LD_STRING [
59733: PPUSH
59734: CALL_OW 561
// for i in tmp do
59738: LD_ADDR_VAR 0 3
59742: PUSH
59743: LD_VAR 0 4
59747: PUSH
59748: FOR_IN
59749: IFFALSE 59856
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
59751: LD_STRING [
59753: PUSH
59754: LD_VAR 0 3
59758: PPUSH
59759: CALL_OW 266
59763: STR
59764: PUSH
59765: LD_STRING , 
59767: STR
59768: PUSH
59769: LD_VAR 0 3
59773: PPUSH
59774: CALL_OW 250
59778: STR
59779: PUSH
59780: LD_STRING , 
59782: STR
59783: PUSH
59784: LD_VAR 0 3
59788: PPUSH
59789: CALL_OW 251
59793: STR
59794: PUSH
59795: LD_STRING , 
59797: STR
59798: PUSH
59799: LD_VAR 0 3
59803: PPUSH
59804: CALL_OW 254
59808: STR
59809: PUSH
59810: LD_STRING , 
59812: STR
59813: PUSH
59814: LD_VAR 0 3
59818: PPUSH
59819: LD_INT 1
59821: PPUSH
59822: CALL_OW 268
59826: STR
59827: PUSH
59828: LD_STRING , 
59830: STR
59831: PUSH
59832: LD_VAR 0 3
59836: PPUSH
59837: LD_INT 2
59839: PPUSH
59840: CALL_OW 268
59844: STR
59845: PUSH
59846: LD_STRING ],
59848: STR
59849: PPUSH
59850: CALL_OW 561
// end ;
59854: GO 59748
59856: POP
59857: POP
// AddToLog ( ]; ) ;
59858: LD_STRING ];
59860: PPUSH
59861: CALL_OW 561
// end ;
59865: LD_VAR 0 2
59869: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
59870: LD_INT 0
59872: PPUSH
59873: PPUSH
59874: PPUSH
59875: PPUSH
59876: PPUSH
// if not area or not rate or not max then
59877: LD_VAR 0 1
59881: NOT
59882: PUSH
59883: LD_VAR 0 2
59887: NOT
59888: OR
59889: PUSH
59890: LD_VAR 0 4
59894: NOT
59895: OR
59896: IFFALSE 59900
// exit ;
59898: GO 60092
// while 1 do
59900: LD_INT 1
59902: IFFALSE 60092
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
59904: LD_ADDR_VAR 0 9
59908: PUSH
59909: LD_VAR 0 1
59913: PPUSH
59914: LD_INT 1
59916: PPUSH
59917: CALL_OW 287
59921: PUSH
59922: LD_INT 10
59924: MUL
59925: ST_TO_ADDR
// r := rate / 10 ;
59926: LD_ADDR_VAR 0 7
59930: PUSH
59931: LD_VAR 0 2
59935: PUSH
59936: LD_INT 10
59938: DIVREAL
59939: ST_TO_ADDR
// time := 1 1$00 ;
59940: LD_ADDR_VAR 0 8
59944: PUSH
59945: LD_INT 2100
59947: ST_TO_ADDR
// if amount < min then
59948: LD_VAR 0 9
59952: PUSH
59953: LD_VAR 0 3
59957: LESS
59958: IFFALSE 59976
// r := r * 2 else
59960: LD_ADDR_VAR 0 7
59964: PUSH
59965: LD_VAR 0 7
59969: PUSH
59970: LD_INT 2
59972: MUL
59973: ST_TO_ADDR
59974: GO 60002
// if amount > max then
59976: LD_VAR 0 9
59980: PUSH
59981: LD_VAR 0 4
59985: GREATER
59986: IFFALSE 60002
// r := r / 2 ;
59988: LD_ADDR_VAR 0 7
59992: PUSH
59993: LD_VAR 0 7
59997: PUSH
59998: LD_INT 2
60000: DIVREAL
60001: ST_TO_ADDR
// time := time / r ;
60002: LD_ADDR_VAR 0 8
60006: PUSH
60007: LD_VAR 0 8
60011: PUSH
60012: LD_VAR 0 7
60016: DIVREAL
60017: ST_TO_ADDR
// if time < 0 then
60018: LD_VAR 0 8
60022: PUSH
60023: LD_INT 0
60025: LESS
60026: IFFALSE 60043
// time := time * - 1 ;
60028: LD_ADDR_VAR 0 8
60032: PUSH
60033: LD_VAR 0 8
60037: PUSH
60038: LD_INT 1
60040: NEG
60041: MUL
60042: ST_TO_ADDR
// wait ( time ) ;
60043: LD_VAR 0 8
60047: PPUSH
60048: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
60052: LD_INT 35
60054: PPUSH
60055: LD_INT 875
60057: PPUSH
60058: CALL_OW 12
60062: PPUSH
60063: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
60067: LD_INT 1
60069: PPUSH
60070: LD_INT 5
60072: PPUSH
60073: CALL_OW 12
60077: PPUSH
60078: LD_VAR 0 1
60082: PPUSH
60083: LD_INT 1
60085: PPUSH
60086: CALL_OW 55
// end ;
60090: GO 59900
// end ;
60092: LD_VAR 0 5
60096: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
60097: LD_INT 0
60099: PPUSH
60100: PPUSH
60101: PPUSH
60102: PPUSH
60103: PPUSH
60104: PPUSH
60105: PPUSH
60106: PPUSH
// if not turrets or not factories then
60107: LD_VAR 0 1
60111: NOT
60112: PUSH
60113: LD_VAR 0 2
60117: NOT
60118: OR
60119: IFFALSE 60123
// exit ;
60121: GO 60430
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
60123: LD_ADDR_VAR 0 10
60127: PUSH
60128: LD_INT 5
60130: PUSH
60131: LD_INT 6
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: LD_INT 2
60140: PUSH
60141: LD_INT 4
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PUSH
60148: LD_INT 3
60150: PUSH
60151: LD_INT 5
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 24
60165: PUSH
60166: LD_INT 25
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: PUSH
60173: LD_INT 23
60175: PUSH
60176: LD_INT 27
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 42
60189: PUSH
60190: LD_INT 43
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_INT 44
60199: PUSH
60200: LD_INT 46
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 45
60209: PUSH
60210: LD_INT 47
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: LIST
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: LIST
60226: ST_TO_ADDR
// result := [ ] ;
60227: LD_ADDR_VAR 0 3
60231: PUSH
60232: EMPTY
60233: ST_TO_ADDR
// for i in turrets do
60234: LD_ADDR_VAR 0 4
60238: PUSH
60239: LD_VAR 0 1
60243: PUSH
60244: FOR_IN
60245: IFFALSE 60428
// begin nat := GetNation ( i ) ;
60247: LD_ADDR_VAR 0 7
60251: PUSH
60252: LD_VAR 0 4
60256: PPUSH
60257: CALL_OW 248
60261: ST_TO_ADDR
// weapon := 0 ;
60262: LD_ADDR_VAR 0 8
60266: PUSH
60267: LD_INT 0
60269: ST_TO_ADDR
// if not nat then
60270: LD_VAR 0 7
60274: NOT
60275: IFFALSE 60279
// continue ;
60277: GO 60244
// for j in list [ nat ] do
60279: LD_ADDR_VAR 0 5
60283: PUSH
60284: LD_VAR 0 10
60288: PUSH
60289: LD_VAR 0 7
60293: ARRAY
60294: PUSH
60295: FOR_IN
60296: IFFALSE 60337
// if GetBWeapon ( i ) = j [ 1 ] then
60298: LD_VAR 0 4
60302: PPUSH
60303: CALL_OW 269
60307: PUSH
60308: LD_VAR 0 5
60312: PUSH
60313: LD_INT 1
60315: ARRAY
60316: EQUAL
60317: IFFALSE 60335
// begin weapon := j [ 2 ] ;
60319: LD_ADDR_VAR 0 8
60323: PUSH
60324: LD_VAR 0 5
60328: PUSH
60329: LD_INT 2
60331: ARRAY
60332: ST_TO_ADDR
// break ;
60333: GO 60337
// end ;
60335: GO 60295
60337: POP
60338: POP
// if not weapon then
60339: LD_VAR 0 8
60343: NOT
60344: IFFALSE 60348
// continue ;
60346: GO 60244
// for k in factories do
60348: LD_ADDR_VAR 0 6
60352: PUSH
60353: LD_VAR 0 2
60357: PUSH
60358: FOR_IN
60359: IFFALSE 60424
// begin weapons := AvailableWeaponList ( k ) ;
60361: LD_ADDR_VAR 0 9
60365: PUSH
60366: LD_VAR 0 6
60370: PPUSH
60371: CALL_OW 478
60375: ST_TO_ADDR
// if not weapons then
60376: LD_VAR 0 9
60380: NOT
60381: IFFALSE 60385
// continue ;
60383: GO 60358
// if weapon in weapons then
60385: LD_VAR 0 8
60389: PUSH
60390: LD_VAR 0 9
60394: IN
60395: IFFALSE 60422
// begin result := [ i , weapon ] ;
60397: LD_ADDR_VAR 0 3
60401: PUSH
60402: LD_VAR 0 4
60406: PUSH
60407: LD_VAR 0 8
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: ST_TO_ADDR
// exit ;
60416: POP
60417: POP
60418: POP
60419: POP
60420: GO 60430
// end ; end ;
60422: GO 60358
60424: POP
60425: POP
// end ;
60426: GO 60244
60428: POP
60429: POP
// end ;
60430: LD_VAR 0 3
60434: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
60435: LD_INT 0
60437: PPUSH
// if not side or side > 8 then
60438: LD_VAR 0 3
60442: NOT
60443: PUSH
60444: LD_VAR 0 3
60448: PUSH
60449: LD_INT 8
60451: GREATER
60452: OR
60453: IFFALSE 60457
// exit ;
60455: GO 60516
// if not range then
60457: LD_VAR 0 4
60461: NOT
60462: IFFALSE 60473
// range := - 12 ;
60464: LD_ADDR_VAR 0 4
60468: PUSH
60469: LD_INT 12
60471: NEG
60472: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
60473: LD_VAR 0 1
60477: PPUSH
60478: LD_VAR 0 2
60482: PPUSH
60483: LD_VAR 0 3
60487: PPUSH
60488: LD_VAR 0 4
60492: PPUSH
60493: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
60497: LD_VAR 0 1
60501: PPUSH
60502: LD_VAR 0 2
60506: PPUSH
60507: LD_VAR 0 3
60511: PPUSH
60512: CALL_OW 331
// end ;
60516: LD_VAR 0 5
60520: RET
// export function Video ( mode ) ; begin
60521: LD_INT 0
60523: PPUSH
// ingame_video = mode ;
60524: LD_ADDR_OWVAR 52
60528: PUSH
60529: LD_VAR 0 1
60533: ST_TO_ADDR
// interface_hidden = mode ;
60534: LD_ADDR_OWVAR 54
60538: PUSH
60539: LD_VAR 0 1
60543: ST_TO_ADDR
// end ;
60544: LD_VAR 0 2
60548: RET
// export function Join ( array , element ) ; begin
60549: LD_INT 0
60551: PPUSH
// result := Replace ( array , array + 1 , element ) ;
60552: LD_ADDR_VAR 0 3
60556: PUSH
60557: LD_VAR 0 1
60561: PPUSH
60562: LD_VAR 0 1
60566: PUSH
60567: LD_INT 1
60569: PLUS
60570: PPUSH
60571: LD_VAR 0 2
60575: PPUSH
60576: CALL_OW 1
60580: ST_TO_ADDR
// end ;
60581: LD_VAR 0 3
60585: RET
// export function JoinUnion ( array , element ) ; begin
60586: LD_INT 0
60588: PPUSH
// result := array union element ;
60589: LD_ADDR_VAR 0 3
60593: PUSH
60594: LD_VAR 0 1
60598: PUSH
60599: LD_VAR 0 2
60603: UNION
60604: ST_TO_ADDR
// end ;
60605: LD_VAR 0 3
60609: RET
// export function GetBehemoths ( side ) ; begin
60610: LD_INT 0
60612: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
60613: LD_ADDR_VAR 0 2
60617: PUSH
60618: LD_INT 22
60620: PUSH
60621: LD_VAR 0 1
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: PUSH
60630: LD_INT 31
60632: PUSH
60633: LD_INT 25
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PPUSH
60644: CALL_OW 69
60648: ST_TO_ADDR
// end ;
60649: LD_VAR 0 2
60653: RET
// export function Shuffle ( array ) ; var i , index ; begin
60654: LD_INT 0
60656: PPUSH
60657: PPUSH
60658: PPUSH
// result := [ ] ;
60659: LD_ADDR_VAR 0 2
60663: PUSH
60664: EMPTY
60665: ST_TO_ADDR
// if not array then
60666: LD_VAR 0 1
60670: NOT
60671: IFFALSE 60675
// exit ;
60673: GO 60774
// Randomize ;
60675: CALL_OW 10
// for i = array downto 1 do
60679: LD_ADDR_VAR 0 3
60683: PUSH
60684: DOUBLE
60685: LD_VAR 0 1
60689: INC
60690: ST_TO_ADDR
60691: LD_INT 1
60693: PUSH
60694: FOR_DOWNTO
60695: IFFALSE 60772
// begin index := rand ( 1 , array ) ;
60697: LD_ADDR_VAR 0 4
60701: PUSH
60702: LD_INT 1
60704: PPUSH
60705: LD_VAR 0 1
60709: PPUSH
60710: CALL_OW 12
60714: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
60715: LD_ADDR_VAR 0 2
60719: PUSH
60720: LD_VAR 0 2
60724: PPUSH
60725: LD_VAR 0 2
60729: PUSH
60730: LD_INT 1
60732: PLUS
60733: PPUSH
60734: LD_VAR 0 1
60738: PUSH
60739: LD_VAR 0 4
60743: ARRAY
60744: PPUSH
60745: CALL_OW 2
60749: ST_TO_ADDR
// array := Delete ( array , index ) ;
60750: LD_ADDR_VAR 0 1
60754: PUSH
60755: LD_VAR 0 1
60759: PPUSH
60760: LD_VAR 0 4
60764: PPUSH
60765: CALL_OW 3
60769: ST_TO_ADDR
// end ;
60770: GO 60694
60772: POP
60773: POP
// end ;
60774: LD_VAR 0 2
60778: RET
// export function GetBaseMaterials ( base ) ; begin
60779: LD_INT 0
60781: PPUSH
// result := [ 0 , 0 , 0 ] ;
60782: LD_ADDR_VAR 0 2
60786: PUSH
60787: LD_INT 0
60789: PUSH
60790: LD_INT 0
60792: PUSH
60793: LD_INT 0
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: LIST
60800: ST_TO_ADDR
// if not base then
60801: LD_VAR 0 1
60805: NOT
60806: IFFALSE 60810
// exit ;
60808: GO 60859
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
60810: LD_ADDR_VAR 0 2
60814: PUSH
60815: LD_VAR 0 1
60819: PPUSH
60820: LD_INT 1
60822: PPUSH
60823: CALL_OW 275
60827: PUSH
60828: LD_VAR 0 1
60832: PPUSH
60833: LD_INT 2
60835: PPUSH
60836: CALL_OW 275
60840: PUSH
60841: LD_VAR 0 1
60845: PPUSH
60846: LD_INT 3
60848: PPUSH
60849: CALL_OW 275
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: LIST
60858: ST_TO_ADDR
// end ;
60859: LD_VAR 0 2
60863: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
60864: LD_INT 0
60866: PPUSH
60867: PPUSH
// result := array ;
60868: LD_ADDR_VAR 0 3
60872: PUSH
60873: LD_VAR 0 1
60877: ST_TO_ADDR
// if size > 0 then
60878: LD_VAR 0 2
60882: PUSH
60883: LD_INT 0
60885: GREATER
60886: IFFALSE 60932
// for i := array downto size do
60888: LD_ADDR_VAR 0 4
60892: PUSH
60893: DOUBLE
60894: LD_VAR 0 1
60898: INC
60899: ST_TO_ADDR
60900: LD_VAR 0 2
60904: PUSH
60905: FOR_DOWNTO
60906: IFFALSE 60930
// result := Delete ( result , result ) ;
60908: LD_ADDR_VAR 0 3
60912: PUSH
60913: LD_VAR 0 3
60917: PPUSH
60918: LD_VAR 0 3
60922: PPUSH
60923: CALL_OW 3
60927: ST_TO_ADDR
60928: GO 60905
60930: POP
60931: POP
// end ;
60932: LD_VAR 0 3
60936: RET
// export function ComExit ( unit ) ; var tmp ; begin
60937: LD_INT 0
60939: PPUSH
60940: PPUSH
// if not IsInUnit ( unit ) then
60941: LD_VAR 0 1
60945: PPUSH
60946: CALL_OW 310
60950: NOT
60951: IFFALSE 60955
// exit ;
60953: GO 61015
// tmp := IsInUnit ( unit ) ;
60955: LD_ADDR_VAR 0 3
60959: PUSH
60960: LD_VAR 0 1
60964: PPUSH
60965: CALL_OW 310
60969: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
60970: LD_VAR 0 3
60974: PPUSH
60975: CALL_OW 247
60979: PUSH
60980: LD_INT 2
60982: EQUAL
60983: IFFALSE 60996
// ComExitVehicle ( unit ) else
60985: LD_VAR 0 1
60989: PPUSH
60990: CALL_OW 121
60994: GO 61005
// ComExitBuilding ( unit ) ;
60996: LD_VAR 0 1
61000: PPUSH
61001: CALL_OW 122
// result := tmp ;
61005: LD_ADDR_VAR 0 2
61009: PUSH
61010: LD_VAR 0 3
61014: ST_TO_ADDR
// end ;
61015: LD_VAR 0 2
61019: RET
// export function ComExitAll ( units ) ; var i ; begin
61020: LD_INT 0
61022: PPUSH
61023: PPUSH
// if not units then
61024: LD_VAR 0 1
61028: NOT
61029: IFFALSE 61033
// exit ;
61031: GO 61059
// for i in units do
61033: LD_ADDR_VAR 0 3
61037: PUSH
61038: LD_VAR 0 1
61042: PUSH
61043: FOR_IN
61044: IFFALSE 61057
// ComExit ( i ) ;
61046: LD_VAR 0 3
61050: PPUSH
61051: CALL 60937 0 1
61055: GO 61043
61057: POP
61058: POP
// end ;
61059: LD_VAR 0 2
61063: RET
// export function ResetHc ; begin
61064: LD_INT 0
61066: PPUSH
// InitHc ;
61067: CALL_OW 19
// hc_importance := 0 ;
61071: LD_ADDR_OWVAR 32
61075: PUSH
61076: LD_INT 0
61078: ST_TO_ADDR
// end ;
61079: LD_VAR 0 1
61083: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
61084: LD_INT 0
61086: PPUSH
61087: PPUSH
61088: PPUSH
// _x := ( x1 + x2 ) div 2 ;
61089: LD_ADDR_VAR 0 6
61093: PUSH
61094: LD_VAR 0 1
61098: PUSH
61099: LD_VAR 0 3
61103: PLUS
61104: PUSH
61105: LD_INT 2
61107: DIV
61108: ST_TO_ADDR
// if _x < 0 then
61109: LD_VAR 0 6
61113: PUSH
61114: LD_INT 0
61116: LESS
61117: IFFALSE 61134
// _x := _x * - 1 ;
61119: LD_ADDR_VAR 0 6
61123: PUSH
61124: LD_VAR 0 6
61128: PUSH
61129: LD_INT 1
61131: NEG
61132: MUL
61133: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
61134: LD_ADDR_VAR 0 7
61138: PUSH
61139: LD_VAR 0 2
61143: PUSH
61144: LD_VAR 0 4
61148: PLUS
61149: PUSH
61150: LD_INT 2
61152: DIV
61153: ST_TO_ADDR
// if _y < 0 then
61154: LD_VAR 0 7
61158: PUSH
61159: LD_INT 0
61161: LESS
61162: IFFALSE 61179
// _y := _y * - 1 ;
61164: LD_ADDR_VAR 0 7
61168: PUSH
61169: LD_VAR 0 7
61173: PUSH
61174: LD_INT 1
61176: NEG
61177: MUL
61178: ST_TO_ADDR
// result := [ _x , _y ] ;
61179: LD_ADDR_VAR 0 5
61183: PUSH
61184: LD_VAR 0 6
61188: PUSH
61189: LD_VAR 0 7
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: ST_TO_ADDR
// end ;
61198: LD_VAR 0 5
61202: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
61203: LD_INT 0
61205: PPUSH
61206: PPUSH
61207: PPUSH
61208: PPUSH
// task := GetTaskList ( unit ) ;
61209: LD_ADDR_VAR 0 7
61213: PUSH
61214: LD_VAR 0 1
61218: PPUSH
61219: CALL_OW 437
61223: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
61224: LD_VAR 0 7
61228: NOT
61229: PUSH
61230: LD_VAR 0 1
61234: PPUSH
61235: LD_VAR 0 2
61239: PPUSH
61240: CALL_OW 308
61244: NOT
61245: AND
61246: IFFALSE 61250
// exit ;
61248: GO 61368
// if IsInArea ( unit , area ) then
61250: LD_VAR 0 1
61254: PPUSH
61255: LD_VAR 0 2
61259: PPUSH
61260: CALL_OW 308
61264: IFFALSE 61282
// begin ComMoveToArea ( unit , goAway ) ;
61266: LD_VAR 0 1
61270: PPUSH
61271: LD_VAR 0 3
61275: PPUSH
61276: CALL_OW 113
// exit ;
61280: GO 61368
// end ; if task [ 1 ] [ 1 ] <> M then
61282: LD_VAR 0 7
61286: PUSH
61287: LD_INT 1
61289: ARRAY
61290: PUSH
61291: LD_INT 1
61293: ARRAY
61294: PUSH
61295: LD_STRING M
61297: NONEQUAL
61298: IFFALSE 61302
// exit ;
61300: GO 61368
// x := task [ 1 ] [ 2 ] ;
61302: LD_ADDR_VAR 0 5
61306: PUSH
61307: LD_VAR 0 7
61311: PUSH
61312: LD_INT 1
61314: ARRAY
61315: PUSH
61316: LD_INT 2
61318: ARRAY
61319: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
61320: LD_ADDR_VAR 0 6
61324: PUSH
61325: LD_VAR 0 7
61329: PUSH
61330: LD_INT 1
61332: ARRAY
61333: PUSH
61334: LD_INT 3
61336: ARRAY
61337: ST_TO_ADDR
// if InArea ( x , y , area ) then
61338: LD_VAR 0 5
61342: PPUSH
61343: LD_VAR 0 6
61347: PPUSH
61348: LD_VAR 0 2
61352: PPUSH
61353: CALL_OW 309
61357: IFFALSE 61368
// ComStop ( unit ) ;
61359: LD_VAR 0 1
61363: PPUSH
61364: CALL_OW 141
// end ;
61368: LD_VAR 0 4
61372: RET
// export function Abs ( value ) ; begin
61373: LD_INT 0
61375: PPUSH
// result := value ;
61376: LD_ADDR_VAR 0 2
61380: PUSH
61381: LD_VAR 0 1
61385: ST_TO_ADDR
// if value < 0 then
61386: LD_VAR 0 1
61390: PUSH
61391: LD_INT 0
61393: LESS
61394: IFFALSE 61411
// result := value * - 1 ;
61396: LD_ADDR_VAR 0 2
61400: PUSH
61401: LD_VAR 0 1
61405: PUSH
61406: LD_INT 1
61408: NEG
61409: MUL
61410: ST_TO_ADDR
// end ;
61411: LD_VAR 0 2
61415: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
61416: LD_INT 0
61418: PPUSH
61419: PPUSH
61420: PPUSH
61421: PPUSH
61422: PPUSH
61423: PPUSH
61424: PPUSH
61425: PPUSH
// if not unit or not building then
61426: LD_VAR 0 1
61430: NOT
61431: PUSH
61432: LD_VAR 0 2
61436: NOT
61437: OR
61438: IFFALSE 61442
// exit ;
61440: GO 61668
// x := GetX ( building ) ;
61442: LD_ADDR_VAR 0 4
61446: PUSH
61447: LD_VAR 0 2
61451: PPUSH
61452: CALL_OW 250
61456: ST_TO_ADDR
// y := GetY ( building ) ;
61457: LD_ADDR_VAR 0 6
61461: PUSH
61462: LD_VAR 0 2
61466: PPUSH
61467: CALL_OW 251
61471: ST_TO_ADDR
// d := GetDir ( building ) ;
61472: LD_ADDR_VAR 0 8
61476: PUSH
61477: LD_VAR 0 2
61481: PPUSH
61482: CALL_OW 254
61486: ST_TO_ADDR
// r := 4 ;
61487: LD_ADDR_VAR 0 9
61491: PUSH
61492: LD_INT 4
61494: ST_TO_ADDR
// for i := 1 to 5 do
61495: LD_ADDR_VAR 0 10
61499: PUSH
61500: DOUBLE
61501: LD_INT 1
61503: DEC
61504: ST_TO_ADDR
61505: LD_INT 5
61507: PUSH
61508: FOR_TO
61509: IFFALSE 61666
// begin _x := ShiftX ( x , d , r + i ) ;
61511: LD_ADDR_VAR 0 5
61515: PUSH
61516: LD_VAR 0 4
61520: PPUSH
61521: LD_VAR 0 8
61525: PPUSH
61526: LD_VAR 0 9
61530: PUSH
61531: LD_VAR 0 10
61535: PLUS
61536: PPUSH
61537: CALL_OW 272
61541: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
61542: LD_ADDR_VAR 0 7
61546: PUSH
61547: LD_VAR 0 6
61551: PPUSH
61552: LD_VAR 0 8
61556: PPUSH
61557: LD_VAR 0 9
61561: PUSH
61562: LD_VAR 0 10
61566: PLUS
61567: PPUSH
61568: CALL_OW 273
61572: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
61573: LD_VAR 0 5
61577: PPUSH
61578: LD_VAR 0 7
61582: PPUSH
61583: CALL_OW 488
61587: PUSH
61588: LD_VAR 0 5
61592: PPUSH
61593: LD_VAR 0 7
61597: PPUSH
61598: CALL_OW 428
61602: PPUSH
61603: CALL_OW 247
61607: PUSH
61608: LD_INT 3
61610: PUSH
61611: LD_INT 2
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: IN
61618: NOT
61619: AND
61620: IFFALSE 61664
// begin ComMoveXY ( unit , _x , _y ) ;
61622: LD_VAR 0 1
61626: PPUSH
61627: LD_VAR 0 5
61631: PPUSH
61632: LD_VAR 0 7
61636: PPUSH
61637: CALL_OW 111
// result := [ _x , _y ] ;
61641: LD_ADDR_VAR 0 3
61645: PUSH
61646: LD_VAR 0 5
61650: PUSH
61651: LD_VAR 0 7
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: ST_TO_ADDR
// exit ;
61660: POP
61661: POP
61662: GO 61668
// end ; end ;
61664: GO 61508
61666: POP
61667: POP
// end ;
61668: LD_VAR 0 3
61672: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
61673: LD_INT 0
61675: PPUSH
61676: PPUSH
61677: PPUSH
// result := 0 ;
61678: LD_ADDR_VAR 0 3
61682: PUSH
61683: LD_INT 0
61685: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
61686: LD_VAR 0 1
61690: PUSH
61691: LD_INT 0
61693: LESS
61694: PUSH
61695: LD_VAR 0 1
61699: PUSH
61700: LD_INT 8
61702: GREATER
61703: OR
61704: PUSH
61705: LD_VAR 0 2
61709: PUSH
61710: LD_INT 0
61712: LESS
61713: OR
61714: PUSH
61715: LD_VAR 0 2
61719: PUSH
61720: LD_INT 8
61722: GREATER
61723: OR
61724: IFFALSE 61728
// exit ;
61726: GO 61803
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
61728: LD_ADDR_VAR 0 4
61732: PUSH
61733: LD_INT 22
61735: PUSH
61736: LD_VAR 0 2
61740: PUSH
61741: EMPTY
61742: LIST
61743: LIST
61744: PPUSH
61745: CALL_OW 69
61749: PUSH
61750: FOR_IN
61751: IFFALSE 61801
// begin un := UnitShoot ( i ) ;
61753: LD_ADDR_VAR 0 5
61757: PUSH
61758: LD_VAR 0 4
61762: PPUSH
61763: CALL_OW 504
61767: ST_TO_ADDR
// if GetSide ( un ) = side1 then
61768: LD_VAR 0 5
61772: PPUSH
61773: CALL_OW 255
61777: PUSH
61778: LD_VAR 0 1
61782: EQUAL
61783: IFFALSE 61799
// begin result := un ;
61785: LD_ADDR_VAR 0 3
61789: PUSH
61790: LD_VAR 0 5
61794: ST_TO_ADDR
// exit ;
61795: POP
61796: POP
61797: GO 61803
// end ; end ;
61799: GO 61750
61801: POP
61802: POP
// end ;
61803: LD_VAR 0 3
61807: RET
// export function GetCargoBay ( units ) ; begin
61808: LD_INT 0
61810: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
61811: LD_ADDR_VAR 0 2
61815: PUSH
61816: LD_VAR 0 1
61820: PPUSH
61821: LD_INT 2
61823: PUSH
61824: LD_INT 34
61826: PUSH
61827: LD_INT 12
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: PUSH
61834: LD_INT 34
61836: PUSH
61837: LD_INT 51
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: PUSH
61844: LD_INT 34
61846: PUSH
61847: LD_INT 32
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: PUSH
61854: LD_INT 34
61856: PUSH
61857: LD_EXP 95
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: LIST
61870: LIST
61871: LIST
61872: PPUSH
61873: CALL_OW 72
61877: ST_TO_ADDR
// end ;
61878: LD_VAR 0 2
61882: RET
// export function Negate ( value ) ; begin
61883: LD_INT 0
61885: PPUSH
// result := not value ;
61886: LD_ADDR_VAR 0 2
61890: PUSH
61891: LD_VAR 0 1
61895: NOT
61896: ST_TO_ADDR
// end ;
61897: LD_VAR 0 2
61901: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
61902: LD_INT 0
61904: PPUSH
// if x1 = x2 then
61905: LD_VAR 0 1
61909: PUSH
61910: LD_VAR 0 3
61914: EQUAL
61915: IFFALSE 61949
// begin if y1 > y2 then
61917: LD_VAR 0 2
61921: PUSH
61922: LD_VAR 0 4
61926: GREATER
61927: IFFALSE 61939
// result := 0 else
61929: LD_ADDR_VAR 0 5
61933: PUSH
61934: LD_INT 0
61936: ST_TO_ADDR
61937: GO 61947
// result := 3 ;
61939: LD_ADDR_VAR 0 5
61943: PUSH
61944: LD_INT 3
61946: ST_TO_ADDR
// exit ;
61947: GO 62035
// end ; if y1 = y2 then
61949: LD_VAR 0 2
61953: PUSH
61954: LD_VAR 0 4
61958: EQUAL
61959: IFFALSE 61993
// begin if x1 > x2 then
61961: LD_VAR 0 1
61965: PUSH
61966: LD_VAR 0 3
61970: GREATER
61971: IFFALSE 61983
// result := 1 else
61973: LD_ADDR_VAR 0 5
61977: PUSH
61978: LD_INT 1
61980: ST_TO_ADDR
61981: GO 61991
// result := 4 ;
61983: LD_ADDR_VAR 0 5
61987: PUSH
61988: LD_INT 4
61990: ST_TO_ADDR
// exit ;
61991: GO 62035
// end ; if x1 > x2 and y1 > y2 then
61993: LD_VAR 0 1
61997: PUSH
61998: LD_VAR 0 3
62002: GREATER
62003: PUSH
62004: LD_VAR 0 2
62008: PUSH
62009: LD_VAR 0 4
62013: GREATER
62014: AND
62015: IFFALSE 62027
// result := 2 else
62017: LD_ADDR_VAR 0 5
62021: PUSH
62022: LD_INT 2
62024: ST_TO_ADDR
62025: GO 62035
// result := 5 ;
62027: LD_ADDR_VAR 0 5
62031: PUSH
62032: LD_INT 5
62034: ST_TO_ADDR
// end ;
62035: LD_VAR 0 5
62039: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62040: LD_INT 0
62042: PPUSH
62043: PPUSH
// if not driver or not IsInUnit ( driver ) then
62044: LD_VAR 0 1
62048: NOT
62049: PUSH
62050: LD_VAR 0 1
62054: PPUSH
62055: CALL_OW 310
62059: NOT
62060: OR
62061: IFFALSE 62065
// exit ;
62063: GO 62155
// vehicle := IsInUnit ( driver ) ;
62065: LD_ADDR_VAR 0 3
62069: PUSH
62070: LD_VAR 0 1
62074: PPUSH
62075: CALL_OW 310
62079: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62080: LD_VAR 0 1
62084: PPUSH
62085: LD_STRING \
62087: PUSH
62088: LD_INT 0
62090: PUSH
62091: LD_INT 0
62093: PUSH
62094: LD_INT 0
62096: PUSH
62097: LD_INT 0
62099: PUSH
62100: LD_INT 0
62102: PUSH
62103: LD_INT 0
62105: PUSH
62106: EMPTY
62107: LIST
62108: LIST
62109: LIST
62110: LIST
62111: LIST
62112: LIST
62113: LIST
62114: PUSH
62115: LD_STRING E
62117: PUSH
62118: LD_INT 0
62120: PUSH
62121: LD_INT 0
62123: PUSH
62124: LD_VAR 0 3
62128: PUSH
62129: LD_INT 0
62131: PUSH
62132: LD_INT 0
62134: PUSH
62135: LD_INT 0
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: LIST
62142: LIST
62143: LIST
62144: LIST
62145: LIST
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PPUSH
62151: CALL_OW 446
// end ;
62155: LD_VAR 0 2
62159: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62160: LD_INT 0
62162: PPUSH
62163: PPUSH
// if not driver or not IsInUnit ( driver ) then
62164: LD_VAR 0 1
62168: NOT
62169: PUSH
62170: LD_VAR 0 1
62174: PPUSH
62175: CALL_OW 310
62179: NOT
62180: OR
62181: IFFALSE 62185
// exit ;
62183: GO 62275
// vehicle := IsInUnit ( driver ) ;
62185: LD_ADDR_VAR 0 3
62189: PUSH
62190: LD_VAR 0 1
62194: PPUSH
62195: CALL_OW 310
62199: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62200: LD_VAR 0 1
62204: PPUSH
62205: LD_STRING \
62207: PUSH
62208: LD_INT 0
62210: PUSH
62211: LD_INT 0
62213: PUSH
62214: LD_INT 0
62216: PUSH
62217: LD_INT 0
62219: PUSH
62220: LD_INT 0
62222: PUSH
62223: LD_INT 0
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: PUSH
62235: LD_STRING E
62237: PUSH
62238: LD_INT 0
62240: PUSH
62241: LD_INT 0
62243: PUSH
62244: LD_VAR 0 3
62248: PUSH
62249: LD_INT 0
62251: PUSH
62252: LD_INT 0
62254: PUSH
62255: LD_INT 0
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: LIST
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PPUSH
62271: CALL_OW 447
// end ;
62275: LD_VAR 0 2
62279: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
62280: LD_INT 0
62282: PPUSH
62283: PPUSH
62284: PPUSH
// tmp := [ ] ;
62285: LD_ADDR_VAR 0 5
62289: PUSH
62290: EMPTY
62291: ST_TO_ADDR
// for i in units do
62292: LD_ADDR_VAR 0 4
62296: PUSH
62297: LD_VAR 0 1
62301: PUSH
62302: FOR_IN
62303: IFFALSE 62341
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
62305: LD_ADDR_VAR 0 5
62309: PUSH
62310: LD_VAR 0 5
62314: PPUSH
62315: LD_VAR 0 5
62319: PUSH
62320: LD_INT 1
62322: PLUS
62323: PPUSH
62324: LD_VAR 0 4
62328: PPUSH
62329: CALL_OW 256
62333: PPUSH
62334: CALL_OW 2
62338: ST_TO_ADDR
62339: GO 62302
62341: POP
62342: POP
// if not tmp then
62343: LD_VAR 0 5
62347: NOT
62348: IFFALSE 62352
// exit ;
62350: GO 62400
// if asc then
62352: LD_VAR 0 2
62356: IFFALSE 62380
// result := SortListByListAsc ( units , tmp ) else
62358: LD_ADDR_VAR 0 3
62362: PUSH
62363: LD_VAR 0 1
62367: PPUSH
62368: LD_VAR 0 5
62372: PPUSH
62373: CALL_OW 76
62377: ST_TO_ADDR
62378: GO 62400
// result := SortListByListDesc ( units , tmp ) ;
62380: LD_ADDR_VAR 0 3
62384: PUSH
62385: LD_VAR 0 1
62389: PPUSH
62390: LD_VAR 0 5
62394: PPUSH
62395: CALL_OW 77
62399: ST_TO_ADDR
// end ;
62400: LD_VAR 0 3
62404: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
62405: LD_INT 0
62407: PPUSH
62408: PPUSH
// task := GetTaskList ( mech ) ;
62409: LD_ADDR_VAR 0 4
62413: PUSH
62414: LD_VAR 0 1
62418: PPUSH
62419: CALL_OW 437
62423: ST_TO_ADDR
// if not task then
62424: LD_VAR 0 4
62428: NOT
62429: IFFALSE 62433
// exit ;
62431: GO 62475
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
62433: LD_ADDR_VAR 0 3
62437: PUSH
62438: LD_VAR 0 4
62442: PUSH
62443: LD_INT 1
62445: ARRAY
62446: PUSH
62447: LD_INT 1
62449: ARRAY
62450: PUSH
62451: LD_STRING r
62453: EQUAL
62454: PUSH
62455: LD_VAR 0 4
62459: PUSH
62460: LD_INT 1
62462: ARRAY
62463: PUSH
62464: LD_INT 4
62466: ARRAY
62467: PUSH
62468: LD_VAR 0 2
62472: EQUAL
62473: AND
62474: ST_TO_ADDR
// end ;
62475: LD_VAR 0 3
62479: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
62480: LD_INT 0
62482: PPUSH
// SetDir ( unit , d ) ;
62483: LD_VAR 0 1
62487: PPUSH
62488: LD_VAR 0 4
62492: PPUSH
62493: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
62497: LD_VAR 0 1
62501: PPUSH
62502: LD_VAR 0 2
62506: PPUSH
62507: LD_VAR 0 3
62511: PPUSH
62512: LD_VAR 0 5
62516: PPUSH
62517: CALL_OW 48
// end ;
62521: LD_VAR 0 6
62525: RET
// export function ToNaturalNumber ( number ) ; begin
62526: LD_INT 0
62528: PPUSH
// result := number div 1 ;
62529: LD_ADDR_VAR 0 2
62533: PUSH
62534: LD_VAR 0 1
62538: PUSH
62539: LD_INT 1
62541: DIV
62542: ST_TO_ADDR
// if number < 0 then
62543: LD_VAR 0 1
62547: PUSH
62548: LD_INT 0
62550: LESS
62551: IFFALSE 62561
// result := 0 ;
62553: LD_ADDR_VAR 0 2
62557: PUSH
62558: LD_INT 0
62560: ST_TO_ADDR
// end ;
62561: LD_VAR 0 2
62565: RET
// export function SortByClass ( units , class ) ; var un ; begin
62566: LD_INT 0
62568: PPUSH
62569: PPUSH
// if not units or not class then
62570: LD_VAR 0 1
62574: NOT
62575: PUSH
62576: LD_VAR 0 2
62580: NOT
62581: OR
62582: IFFALSE 62586
// exit ;
62584: GO 62681
// result := [ ] ;
62586: LD_ADDR_VAR 0 3
62590: PUSH
62591: EMPTY
62592: ST_TO_ADDR
// for un in units do
62593: LD_ADDR_VAR 0 4
62597: PUSH
62598: LD_VAR 0 1
62602: PUSH
62603: FOR_IN
62604: IFFALSE 62679
// if GetClass ( un ) = class then
62606: LD_VAR 0 4
62610: PPUSH
62611: CALL_OW 257
62615: PUSH
62616: LD_VAR 0 2
62620: EQUAL
62621: IFFALSE 62648
// result := Insert ( result , 1 , un ) else
62623: LD_ADDR_VAR 0 3
62627: PUSH
62628: LD_VAR 0 3
62632: PPUSH
62633: LD_INT 1
62635: PPUSH
62636: LD_VAR 0 4
62640: PPUSH
62641: CALL_OW 2
62645: ST_TO_ADDR
62646: GO 62677
// result := Replace ( result , result + 1 , un ) ;
62648: LD_ADDR_VAR 0 3
62652: PUSH
62653: LD_VAR 0 3
62657: PPUSH
62658: LD_VAR 0 3
62662: PUSH
62663: LD_INT 1
62665: PLUS
62666: PPUSH
62667: LD_VAR 0 4
62671: PPUSH
62672: CALL_OW 1
62676: ST_TO_ADDR
62677: GO 62603
62679: POP
62680: POP
// end ;
62681: LD_VAR 0 3
62685: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
62686: LD_INT 0
62688: PPUSH
62689: PPUSH
62690: PPUSH
62691: PPUSH
62692: PPUSH
62693: PPUSH
62694: PPUSH
// result := [ ] ;
62695: LD_ADDR_VAR 0 4
62699: PUSH
62700: EMPTY
62701: ST_TO_ADDR
// if x - r < 0 then
62702: LD_VAR 0 1
62706: PUSH
62707: LD_VAR 0 3
62711: MINUS
62712: PUSH
62713: LD_INT 0
62715: LESS
62716: IFFALSE 62728
// min_x := 0 else
62718: LD_ADDR_VAR 0 8
62722: PUSH
62723: LD_INT 0
62725: ST_TO_ADDR
62726: GO 62744
// min_x := x - r ;
62728: LD_ADDR_VAR 0 8
62732: PUSH
62733: LD_VAR 0 1
62737: PUSH
62738: LD_VAR 0 3
62742: MINUS
62743: ST_TO_ADDR
// if y - r < 0 then
62744: LD_VAR 0 2
62748: PUSH
62749: LD_VAR 0 3
62753: MINUS
62754: PUSH
62755: LD_INT 0
62757: LESS
62758: IFFALSE 62770
// min_y := 0 else
62760: LD_ADDR_VAR 0 7
62764: PUSH
62765: LD_INT 0
62767: ST_TO_ADDR
62768: GO 62786
// min_y := y - r ;
62770: LD_ADDR_VAR 0 7
62774: PUSH
62775: LD_VAR 0 2
62779: PUSH
62780: LD_VAR 0 3
62784: MINUS
62785: ST_TO_ADDR
// max_x := x + r ;
62786: LD_ADDR_VAR 0 9
62790: PUSH
62791: LD_VAR 0 1
62795: PUSH
62796: LD_VAR 0 3
62800: PLUS
62801: ST_TO_ADDR
// max_y := y + r ;
62802: LD_ADDR_VAR 0 10
62806: PUSH
62807: LD_VAR 0 2
62811: PUSH
62812: LD_VAR 0 3
62816: PLUS
62817: ST_TO_ADDR
// for _x = min_x to max_x do
62818: LD_ADDR_VAR 0 5
62822: PUSH
62823: DOUBLE
62824: LD_VAR 0 8
62828: DEC
62829: ST_TO_ADDR
62830: LD_VAR 0 9
62834: PUSH
62835: FOR_TO
62836: IFFALSE 62937
// for _y = min_y to max_y do
62838: LD_ADDR_VAR 0 6
62842: PUSH
62843: DOUBLE
62844: LD_VAR 0 7
62848: DEC
62849: ST_TO_ADDR
62850: LD_VAR 0 10
62854: PUSH
62855: FOR_TO
62856: IFFALSE 62933
// begin if not ValidHex ( _x , _y ) then
62858: LD_VAR 0 5
62862: PPUSH
62863: LD_VAR 0 6
62867: PPUSH
62868: CALL_OW 488
62872: NOT
62873: IFFALSE 62877
// continue ;
62875: GO 62855
// if GetResourceTypeXY ( _x , _y ) then
62877: LD_VAR 0 5
62881: PPUSH
62882: LD_VAR 0 6
62886: PPUSH
62887: CALL_OW 283
62891: IFFALSE 62931
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
62893: LD_ADDR_VAR 0 4
62897: PUSH
62898: LD_VAR 0 4
62902: PPUSH
62903: LD_VAR 0 4
62907: PUSH
62908: LD_INT 1
62910: PLUS
62911: PPUSH
62912: LD_VAR 0 5
62916: PUSH
62917: LD_VAR 0 6
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: PPUSH
62926: CALL_OW 1
62930: ST_TO_ADDR
// end ;
62931: GO 62855
62933: POP
62934: POP
62935: GO 62835
62937: POP
62938: POP
// end ;
62939: LD_VAR 0 4
62943: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
62944: LD_INT 0
62946: PPUSH
62947: PPUSH
62948: PPUSH
62949: PPUSH
62950: PPUSH
62951: PPUSH
// if not units then
62952: LD_VAR 0 1
62956: NOT
62957: IFFALSE 62961
// exit ;
62959: GO 63362
// result := UnitFilter ( units , [ f_ok ] ) ;
62961: LD_ADDR_VAR 0 3
62965: PUSH
62966: LD_VAR 0 1
62970: PPUSH
62971: LD_INT 50
62973: PUSH
62974: EMPTY
62975: LIST
62976: PPUSH
62977: CALL_OW 72
62981: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
62982: LD_ADDR_VAR 0 7
62986: PUSH
62987: LD_VAR 0 1
62991: PUSH
62992: LD_INT 1
62994: ARRAY
62995: PPUSH
62996: CALL_OW 255
63000: ST_TO_ADDR
// if not result then
63001: LD_VAR 0 3
63005: NOT
63006: IFFALSE 63010
// exit ;
63008: GO 63362
// for i in result do
63010: LD_ADDR_VAR 0 4
63014: PUSH
63015: LD_VAR 0 3
63019: PUSH
63020: FOR_IN
63021: IFFALSE 63360
// begin tag := GetTag ( i ) + 1 ;
63023: LD_ADDR_VAR 0 8
63027: PUSH
63028: LD_VAR 0 4
63032: PPUSH
63033: CALL_OW 110
63037: PUSH
63038: LD_INT 1
63040: PLUS
63041: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
63042: LD_ADDR_VAR 0 6
63046: PUSH
63047: LD_VAR 0 4
63051: PPUSH
63052: CALL_OW 250
63056: PPUSH
63057: LD_VAR 0 4
63061: PPUSH
63062: CALL_OW 251
63066: PPUSH
63067: LD_INT 6
63069: PPUSH
63070: CALL 62686 0 3
63074: ST_TO_ADDR
// if cr then
63075: LD_VAR 0 6
63079: IFFALSE 63118
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
63081: LD_VAR 0 4
63085: PPUSH
63086: LD_VAR 0 6
63090: PUSH
63091: LD_INT 1
63093: ARRAY
63094: PUSH
63095: LD_INT 1
63097: ARRAY
63098: PPUSH
63099: LD_VAR 0 6
63103: PUSH
63104: LD_INT 1
63106: ARRAY
63107: PUSH
63108: LD_INT 2
63110: ARRAY
63111: PPUSH
63112: CALL_OW 116
63116: GO 63358
// if path > tag then
63118: LD_VAR 0 2
63122: PUSH
63123: LD_VAR 0 8
63127: GREATER
63128: IFFALSE 63306
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
63130: LD_ADDR_VAR 0 5
63134: PUSH
63135: LD_INT 81
63137: PUSH
63138: LD_VAR 0 7
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: PUSH
63147: LD_INT 91
63149: PUSH
63150: LD_VAR 0 4
63154: PUSH
63155: LD_INT 12
63157: PUSH
63158: EMPTY
63159: LIST
63160: LIST
63161: LIST
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: PPUSH
63167: CALL_OW 69
63171: ST_TO_ADDR
// if enemy then
63172: LD_VAR 0 5
63176: IFFALSE 63204
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
63178: LD_VAR 0 4
63182: PPUSH
63183: LD_VAR 0 5
63187: PPUSH
63188: LD_VAR 0 4
63192: PPUSH
63193: CALL_OW 74
63197: PPUSH
63198: CALL_OW 115
63202: GO 63304
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
63204: LD_VAR 0 4
63208: PPUSH
63209: LD_VAR 0 2
63213: PUSH
63214: LD_VAR 0 8
63218: ARRAY
63219: PUSH
63220: LD_INT 1
63222: ARRAY
63223: PPUSH
63224: LD_VAR 0 2
63228: PUSH
63229: LD_VAR 0 8
63233: ARRAY
63234: PUSH
63235: LD_INT 2
63237: ARRAY
63238: PPUSH
63239: CALL_OW 297
63243: PUSH
63244: LD_INT 6
63246: GREATER
63247: IFFALSE 63290
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
63249: LD_VAR 0 4
63253: PPUSH
63254: LD_VAR 0 2
63258: PUSH
63259: LD_VAR 0 8
63263: ARRAY
63264: PUSH
63265: LD_INT 1
63267: ARRAY
63268: PPUSH
63269: LD_VAR 0 2
63273: PUSH
63274: LD_VAR 0 8
63278: ARRAY
63279: PUSH
63280: LD_INT 2
63282: ARRAY
63283: PPUSH
63284: CALL_OW 114
63288: GO 63304
// SetTag ( i , tag ) ;
63290: LD_VAR 0 4
63294: PPUSH
63295: LD_VAR 0 8
63299: PPUSH
63300: CALL_OW 109
// end else
63304: GO 63358
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
63306: LD_ADDR_VAR 0 5
63310: PUSH
63311: LD_INT 81
63313: PUSH
63314: LD_VAR 0 7
63318: PUSH
63319: EMPTY
63320: LIST
63321: LIST
63322: PPUSH
63323: CALL_OW 69
63327: ST_TO_ADDR
// if enemy then
63328: LD_VAR 0 5
63332: IFFALSE 63358
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
63334: LD_VAR 0 4
63338: PPUSH
63339: LD_VAR 0 5
63343: PPUSH
63344: LD_VAR 0 4
63348: PPUSH
63349: CALL_OW 74
63353: PPUSH
63354: CALL_OW 115
// end ; end ;
63358: GO 63020
63360: POP
63361: POP
// end ; end_of_file
63362: LD_VAR 0 3
63366: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
63367: LD_VAR 0 1
63371: PUSH
63372: LD_INT 200
63374: DOUBLE
63375: GREATEREQUAL
63376: IFFALSE 63384
63378: LD_INT 299
63380: DOUBLE
63381: LESSEQUAL
63382: IFTRUE 63386
63384: GO 63418
63386: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
63387: LD_VAR 0 1
63391: PPUSH
63392: LD_VAR 0 2
63396: PPUSH
63397: LD_VAR 0 3
63401: PPUSH
63402: LD_VAR 0 4
63406: PPUSH
63407: LD_VAR 0 5
63411: PPUSH
63412: CALL 19761 0 5
63416: GO 63495
63418: LD_INT 300
63420: DOUBLE
63421: GREATEREQUAL
63422: IFFALSE 63430
63424: LD_INT 399
63426: DOUBLE
63427: LESSEQUAL
63428: IFTRUE 63432
63430: GO 63494
63432: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
63433: LD_VAR 0 1
63437: PPUSH
63438: LD_VAR 0 2
63442: PPUSH
63443: LD_VAR 0 3
63447: PPUSH
63448: LD_VAR 0 4
63452: PPUSH
63453: LD_VAR 0 5
63457: PPUSH
63458: LD_VAR 0 6
63462: PPUSH
63463: LD_VAR 0 7
63467: PPUSH
63468: LD_VAR 0 8
63472: PPUSH
63473: LD_VAR 0 9
63477: PPUSH
63478: LD_VAR 0 10
63482: PPUSH
63483: LD_VAR 0 11
63487: PPUSH
63488: CALL 17649 0 11
63492: GO 63495
63494: POP
// end ;
63495: PPOPN 11
63497: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
63498: LD_VAR 0 1
63502: PPUSH
63503: LD_VAR 0 2
63507: PPUSH
63508: LD_VAR 0 3
63512: PPUSH
63513: LD_VAR 0 4
63517: PPUSH
63518: LD_VAR 0 5
63522: PPUSH
63523: CALL 19743 0 5
// end ; end_of_file
63527: PPOPN 5
63529: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
63530: LD_VAR 0 1
63534: PPUSH
63535: LD_VAR 0 2
63539: PPUSH
63540: LD_VAR 0 3
63544: PPUSH
63545: LD_VAR 0 4
63549: PPUSH
63550: LD_VAR 0 5
63554: PPUSH
63555: LD_VAR 0 6
63559: PPUSH
63560: CALL 6457 0 6
// end ;
63564: PPOPN 6
63566: END
