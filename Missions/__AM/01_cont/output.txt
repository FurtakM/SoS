// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 32 0 0
// InitAmerican ;
  15: CALL 866 0 0
// InitRussian ;
  19: CALL 1137 0 0
// DebugMode ;
  23: CALL 160 0 0
// Action ;
  27: CALL 2932 0 0
// end ;
  31: END
// export debug ; export mission_prefix ; export active_russian_dialog , bobby_in_squad , powell_contact , macmilan_use_radio , cyrus_in_squad , active_road_patrol , macmilan_in_trap , meta_action , end_mission , bobby_saved , cyrus_saved , send_troops_to_forest , active_powell_dialog ; function Init ; begin
  32: LD_INT 0
  34: PPUSH
// mission_prefix := 01_ ;
  35: LD_ADDR_EXP 2
  39: PUSH
  40: LD_STRING 01_
  42: ST_TO_ADDR
// debug := false ;
  43: LD_ADDR_EXP 1
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// active_russian_dialog := false ;
  51: LD_ADDR_EXP 3
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// bobby_in_squad := false ;
  59: LD_ADDR_EXP 4
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// cyrus_in_squad := false ;
  67: LD_ADDR_EXP 7
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// powell_contact := false ;
  75: LD_ADDR_EXP 5
  79: PUSH
  80: LD_INT 0
  82: ST_TO_ADDR
// macmilan_use_radio := false ;
  83: LD_ADDR_EXP 6
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// active_road_patrol := false ;
  91: LD_ADDR_EXP 8
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// macmilan_in_trap := false ;
  99: LD_ADDR_EXP 9
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// meta_action := false ;
 107: LD_ADDR_EXP 10
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// end_mission := false ;
 115: LD_ADDR_EXP 11
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// bobby_saved := false ;
 123: LD_ADDR_EXP 12
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// cyrus_saved := false ;
 131: LD_ADDR_EXP 13
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// send_troops_to_forest := false ;
 139: LD_ADDR_EXP 14
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// active_powell_dialog := false ;
 147: LD_ADDR_EXP 15
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// end ;
 155: LD_VAR 0 1
 159: RET
// function DebugMode ; var i ; begin
 160: LD_INT 0
 162: PPUSH
 163: PPUSH
// if not debug then
 164: LD_EXP 1
 168: NOT
 169: IFFALSE 173
// exit ;
 171: GO 192
// Difficulty := 4 ;
 173: LD_ADDR_OWVAR 67
 177: PUSH
 178: LD_INT 4
 180: ST_TO_ADDR
// TurnFogOff ( ) ;
 181: CALL_OW 537
// FogOff ( 1 ) ;
 185: LD_INT 1
 187: PPUSH
 188: CALL_OW 344
// end ; end_of_file
 192: LD_VAR 0 1
 196: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 197: LD_INT 0
 199: PPUSH
 200: PPUSH
 201: PPUSH
// uc_side := GetSide ( b ) ;
 202: LD_ADDR_OWVAR 20
 206: PUSH
 207: LD_VAR 0 2
 211: PPUSH
 212: CALL_OW 255
 216: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 217: LD_ADDR_OWVAR 21
 221: PUSH
 222: LD_VAR 0 2
 226: PPUSH
 227: CALL_OW 248
 231: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 232: LD_INT 0
 234: PPUSH
 235: LD_INT 1
 237: PPUSH
 238: LD_VAR 0 1
 242: PPUSH
 243: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
 247: LD_ADDR_VAR 0 5
 251: PUSH
 252: LD_VAR 0 2
 256: PPUSH
 257: CALL_OW 254
 261: PUSH
 262: LD_INT 3
 264: MINUS
 265: ST_TO_ADDR
// if dir < 0 then
 266: LD_VAR 0 5
 270: PUSH
 271: LD_INT 0
 273: LESS
 274: IFFALSE 290
// dir := 6 + dir ;
 276: LD_ADDR_VAR 0 5
 280: PUSH
 281: LD_INT 6
 283: PUSH
 284: LD_VAR 0 5
 288: PLUS
 289: ST_TO_ADDR
// un := CreateHuman ;
 290: LD_ADDR_VAR 0 4
 294: PUSH
 295: CALL_OW 44
 299: ST_TO_ADDR
// SetDir ( un , dir ) ;
 300: LD_VAR 0 4
 304: PPUSH
 305: LD_VAR 0 5
 309: PPUSH
 310: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 314: LD_VAR 0 4
 318: PPUSH
 319: LD_VAR 0 2
 323: PPUSH
 324: CALL_OW 52
// end ;
 328: LD_VAR 0 3
 332: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 333: LD_INT 0
 335: PPUSH
// uc_side := side ;
 336: LD_ADDR_OWVAR 20
 340: PUSH
 341: LD_VAR 0 1
 345: ST_TO_ADDR
// uc_nation := nation ;
 346: LD_ADDR_OWVAR 21
 350: PUSH
 351: LD_VAR 0 2
 355: ST_TO_ADDR
// vc_chassis := chassis ;
 356: LD_ADDR_OWVAR 37
 360: PUSH
 361: LD_VAR 0 3
 365: ST_TO_ADDR
// vc_engine := engine ;
 366: LD_ADDR_OWVAR 39
 370: PUSH
 371: LD_VAR 0 4
 375: ST_TO_ADDR
// vc_control := control ;
 376: LD_ADDR_OWVAR 38
 380: PUSH
 381: LD_VAR 0 5
 385: ST_TO_ADDR
// vc_weapon := weapon ;
 386: LD_ADDR_OWVAR 40
 390: PUSH
 391: LD_VAR 0 6
 395: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 396: LD_ADDR_OWVAR 41
 400: PUSH
 401: LD_VAR 0 7
 405: ST_TO_ADDR
// result := CreateVehicle ;
 406: LD_ADDR_VAR 0 8
 410: PUSH
 411: CALL_OW 45
 415: ST_TO_ADDR
// end ;
 416: LD_VAR 0 8
 420: RET
// export function ComPatrol ( unit , mode , pause , coords ) ; var i ; begin
 421: LD_INT 0
 423: PPUSH
 424: PPUSH
// while ( active_road_patrol ) do
 425: LD_EXP 8
 429: IFFALSE 783
// begin Wait ( 0 0$01 ) ;
 431: LD_INT 35
 433: PPUSH
 434: CALL_OW 67
// if not unit then
 438: LD_VAR 0 1
 442: NOT
 443: IFFALSE 447
// exit ;
 445: GO 783
// if mode = road then
 447: LD_VAR 0 2
 451: PUSH
 452: LD_STRING road
 454: EQUAL
 455: IFFALSE 511
// if GetFuel ( unit ) < 50 and not See ( 1 , unit ) and not HasTask ( unit ) then
 457: LD_VAR 0 1
 461: PPUSH
 462: CALL_OW 261
 466: PUSH
 467: LD_INT 50
 469: LESS
 470: PUSH
 471: LD_INT 1
 473: PPUSH
 474: LD_VAR 0 1
 478: PPUSH
 479: CALL_OW 292
 483: NOT
 484: AND
 485: PUSH
 486: LD_VAR 0 1
 490: PPUSH
 491: CALL_OW 314
 495: NOT
 496: AND
 497: IFFALSE 511
// SetFuel ( unit , 100 ) ;
 499: LD_VAR 0 1
 503: PPUSH
 504: LD_INT 100
 506: PPUSH
 507: CALL_OW 240
// if mode = forest then
 511: LD_VAR 0 2
 515: PUSH
 516: LD_STRING forest
 518: EQUAL
 519: IFFALSE 599
// if GetLives ( unit ) < 600 then
 521: LD_VAR 0 1
 525: PPUSH
 526: CALL_OW 256
 530: PUSH
 531: LD_INT 600
 533: LESS
 534: IFFALSE 599
// begin ComMoveXY ( unit , 42 , 3 ) ;
 536: LD_VAR 0 1
 540: PPUSH
 541: LD_INT 42
 543: PPUSH
 544: LD_INT 3
 546: PPUSH
 547: CALL_OW 111
// SetRememberedX ( unit , GetX ( unit ) ) ;
 551: LD_VAR 0 1
 555: PPUSH
 556: LD_VAR 0 1
 560: PPUSH
 561: CALL_OW 250
 565: PPUSH
 566: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
 570: LD_VAR 0 1
 574: PPUSH
 575: LD_VAR 0 1
 579: PPUSH
 580: CALL_OW 251
 584: PPUSH
 585: CALL_OW 232
// send_troops_to_forest := true ;
 589: LD_ADDR_EXP 14
 593: PUSH
 594: LD_INT 1
 596: ST_TO_ADDR
// break ;
 597: GO 783
// end ; if not HasTask ( unit ) then
 599: LD_VAR 0 1
 603: PPUSH
 604: CALL_OW 314
 608: NOT
 609: IFFALSE 781
// begin for i = 1 to coords do
 611: LD_ADDR_VAR 0 6
 615: PUSH
 616: DOUBLE
 617: LD_INT 1
 619: DEC
 620: ST_TO_ADDR
 621: LD_VAR 0 4
 625: PUSH
 626: FOR_TO
 627: IFFALSE 694
// begin AddComAgressiveMove ( unit , coords [ i ] , coords [ i + 1 ] ) ;
 629: LD_VAR 0 1
 633: PPUSH
 634: LD_VAR 0 4
 638: PUSH
 639: LD_VAR 0 6
 643: ARRAY
 644: PPUSH
 645: LD_VAR 0 4
 649: PUSH
 650: LD_VAR 0 6
 654: PUSH
 655: LD_INT 1
 657: PLUS
 658: ARRAY
 659: PPUSH
 660: CALL_OW 174
// AddComWait ( unit , pause ) ;
 664: LD_VAR 0 1
 668: PPUSH
 669: LD_VAR 0 3
 673: PPUSH
 674: CALL_OW 202
// i := i + 1 ;
 678: LD_ADDR_VAR 0 6
 682: PUSH
 683: LD_VAR 0 6
 687: PUSH
 688: LD_INT 1
 690: PLUS
 691: ST_TO_ADDR
// end ;
 692: GO 626
 694: POP
 695: POP
// for i = coords downto 1 do
 696: LD_ADDR_VAR 0 6
 700: PUSH
 701: DOUBLE
 702: LD_VAR 0 4
 706: INC
 707: ST_TO_ADDR
 708: LD_INT 1
 710: PUSH
 711: FOR_DOWNTO
 712: IFFALSE 779
// begin AddComAgressiveMove ( unit , coords [ i - 1 ] , coords [ i ] ) ;
 714: LD_VAR 0 1
 718: PPUSH
 719: LD_VAR 0 4
 723: PUSH
 724: LD_VAR 0 6
 728: PUSH
 729: LD_INT 1
 731: MINUS
 732: ARRAY
 733: PPUSH
 734: LD_VAR 0 4
 738: PUSH
 739: LD_VAR 0 6
 743: ARRAY
 744: PPUSH
 745: CALL_OW 174
// AddComWait ( unit , pause ) ;
 749: LD_VAR 0 1
 753: PPUSH
 754: LD_VAR 0 3
 758: PPUSH
 759: CALL_OW 202
// i := i - 1 ;
 763: LD_ADDR_VAR 0 6
 767: PUSH
 768: LD_VAR 0 6
 772: PUSH
 773: LD_INT 1
 775: MINUS
 776: ST_TO_ADDR
// end ;
 777: GO 711
 779: POP
 780: POP
// end ; end ;
 781: GO 425
// end ;
 783: LD_VAR 0 5
 787: RET
// export function DebugSay ( dialog ) ; var speaker ; begin
 788: LD_INT 0
 790: PPUSH
 791: PPUSH
// uc_nation := 1 ;
 792: LD_ADDR_OWVAR 21
 796: PUSH
 797: LD_INT 1
 799: ST_TO_ADDR
// uc_side := 0 ;
 800: LD_ADDR_OWVAR 20
 804: PUSH
 805: LD_INT 0
 807: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
 808: LD_INT 0
 810: PPUSH
 811: LD_INT 1
 813: PPUSH
 814: LD_INT 0
 816: PPUSH
 817: CALL_OW 380
// hc_name := speaker ;
 821: LD_ADDR_OWVAR 26
 825: PUSH
 826: LD_STRING speaker
 828: ST_TO_ADDR
// hc_gallery :=  ;
 829: LD_ADDR_OWVAR 33
 833: PUSH
 834: LD_STRING 
 836: ST_TO_ADDR
// speaker := CreateHuman ;
 837: LD_ADDR_VAR 0 3
 841: PUSH
 842: CALL_OW 44
 846: ST_TO_ADDR
// Say ( speaker , dialog ) ;
 847: LD_VAR 0 3
 851: PPUSH
 852: LD_VAR 0 1
 856: PPUSH
 857: CALL_OW 88
// end ; end_of_file
 861: LD_VAR 0 2
 865: RET
// export JMM , Bobby , Cyrus , Powell , fakePokryshkin ; export function InitAmerican ; begin
 866: LD_INT 0
 868: PPUSH
// uc_nation := 1 ;
 869: LD_ADDR_OWVAR 21
 873: PUSH
 874: LD_INT 1
 876: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , false ,  ) ;
 877: LD_ADDR_EXP 16
 881: PUSH
 882: LD_STRING JMM
 884: PPUSH
 885: LD_INT 0
 887: PPUSH
 888: LD_STRING 
 890: PPUSH
 891: CALL 27430 0 3
 895: ST_TO_ADDR
// uc_side := 4 ;
 896: LD_ADDR_OWVAR 20
 900: PUSH
 901: LD_INT 4
 903: ST_TO_ADDR
// hc_gallery := us ;
 904: LD_ADDR_OWVAR 33
 908: PUSH
 909: LD_STRING us
 911: ST_TO_ADDR
// hc_face_number := 7 ;
 912: LD_ADDR_OWVAR 34
 916: PUSH
 917: LD_INT 7
 919: ST_TO_ADDR
// hc_sex := sex_male ;
 920: LD_ADDR_OWVAR 27
 924: PUSH
 925: LD_INT 1
 927: ST_TO_ADDR
// hc_name := . ;
 928: LD_ADDR_OWVAR 26
 932: PUSH
 933: LD_STRING .
 935: ST_TO_ADDR
// hc_class := 1 ;
 936: LD_ADDR_OWVAR 28
 940: PUSH
 941: LD_INT 1
 943: ST_TO_ADDR
// Powell := CreateHuman ;
 944: LD_ADDR_EXP 19
 948: PUSH
 949: CALL_OW 44
 953: ST_TO_ADDR
// hc_name := . ;
 954: LD_ADDR_OWVAR 26
 958: PUSH
 959: LD_STRING .
 961: ST_TO_ADDR
// hc_gallery := ru ;
 962: LD_ADDR_OWVAR 33
 966: PUSH
 967: LD_STRING ru
 969: ST_TO_ADDR
// hc_face_number := 4 ;
 970: LD_ADDR_OWVAR 34
 974: PUSH
 975: LD_INT 4
 977: ST_TO_ADDR
// hc_sex := sex_male ;
 978: LD_ADDR_OWVAR 27
 982: PUSH
 983: LD_INT 1
 985: ST_TO_ADDR
// fakePokryshkin := CreateHuman ;
 986: LD_ADDR_EXP 20
 990: PUSH
 991: CALL_OW 44
 995: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , false ,  ) ;
 996: LD_ADDR_EXP 17
1000: PUSH
1001: LD_STRING Bobby
1003: PPUSH
1004: LD_INT 0
1006: PPUSH
1007: LD_STRING 
1009: PPUSH
1010: CALL 27430 0 3
1014: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , false ,  ) ;
1015: LD_ADDR_EXP 18
1019: PUSH
1020: LD_STRING Cyrus
1022: PPUSH
1023: LD_INT 0
1025: PPUSH
1026: LD_STRING 
1028: PPUSH
1029: CALL 27430 0 3
1033: ST_TO_ADDR
// case Difficulty of 1 :
1034: LD_OWVAR 67
1038: PUSH
1039: LD_INT 1
1041: DOUBLE
1042: EQUAL
1043: IFTRUE 1047
1045: GO 1062
1047: POP
// SetLives ( Bobby , 500 ) ; 2 :
1048: LD_EXP 17
1052: PPUSH
1053: LD_INT 500
1055: PPUSH
1056: CALL_OW 234
1060: GO 1132
1062: LD_INT 2
1064: DOUBLE
1065: EQUAL
1066: IFTRUE 1070
1068: GO 1085
1070: POP
// SetLives ( Bobby , 460 ) ; 3 :
1071: LD_EXP 17
1075: PPUSH
1076: LD_INT 460
1078: PPUSH
1079: CALL_OW 234
1083: GO 1132
1085: LD_INT 3
1087: DOUBLE
1088: EQUAL
1089: IFTRUE 1093
1091: GO 1108
1093: POP
// SetLives ( Bobby , 420 ) ; 4 :
1094: LD_EXP 17
1098: PPUSH
1099: LD_INT 420
1101: PPUSH
1102: CALL_OW 234
1106: GO 1132
1108: LD_INT 4
1110: DOUBLE
1111: EQUAL
1112: IFTRUE 1116
1114: GO 1131
1116: POP
// SetLives ( Bobby , 400 ) ; end ;
1117: LD_EXP 17
1121: PPUSH
1122: LD_INT 400
1124: PPUSH
1125: CALL_OW 234
1129: GO 1132
1131: POP
// end ; end_of_file
1132: LD_VAR 0 1
1136: RET
// export russian_troops_1 , russian_troops_2 , russian_patrol_tanks , russian_meta_guards , russian_patrol_forest , russian_patrol_hidden ; export Pokryshkin ; export function InitRussian ; var skill , i , un ; begin
1137: LD_INT 0
1139: PPUSH
1140: PPUSH
1141: PPUSH
1142: PPUSH
// skill := [ 1 , 2 , 3 , 4 ] [ Difficulty ] ;
1143: LD_ADDR_VAR 0 2
1147: PUSH
1148: LD_INT 1
1150: PUSH
1151: LD_INT 2
1153: PUSH
1154: LD_INT 3
1156: PUSH
1157: LD_INT 4
1159: PUSH
1160: EMPTY
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: PUSH
1166: LD_OWVAR 67
1170: ARRAY
1171: ST_TO_ADDR
// uc_side := 3 ;
1172: LD_ADDR_OWVAR 20
1176: PUSH
1177: LD_INT 3
1179: ST_TO_ADDR
// uc_nation := 3 ;
1180: LD_ADDR_OWVAR 21
1184: PUSH
1185: LD_INT 3
1187: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
1188: LD_ADDR_EXP 27
1192: PUSH
1193: LD_STRING Pokryshkin
1195: PPUSH
1196: LD_INT 0
1198: PPUSH
1199: LD_STRING 
1201: PPUSH
1202: CALL 27430 0 3
1206: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 44 , 5 , false ) ;
1207: LD_EXP 27
1211: PPUSH
1212: LD_INT 44
1214: PPUSH
1215: LD_INT 5
1217: PPUSH
1218: LD_INT 0
1220: PPUSH
1221: CALL_OW 48
// hc_importance := 0 ;
1225: LD_ADDR_OWVAR 32
1229: PUSH
1230: LD_INT 0
1232: ST_TO_ADDR
// hc_gallery :=  ;
1233: LD_ADDR_OWVAR 33
1237: PUSH
1238: LD_STRING 
1240: ST_TO_ADDR
// hc_name :=  ;
1241: LD_ADDR_OWVAR 26
1245: PUSH
1246: LD_STRING 
1248: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1249: LD_INT 1
1251: PPUSH
1252: LD_INT 1
1254: PPUSH
1255: LD_VAR 0 2
1259: PPUSH
1260: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1264: LD_ADDR_OWVAR 33
1268: PUSH
1269: LD_STRING SecondCharsGal
1271: ST_TO_ADDR
// hc_face_number := 69 ;
1272: LD_ADDR_OWVAR 34
1276: PUSH
1277: LD_INT 69
1279: ST_TO_ADDR
// hc_sex := sex_male ;
1280: LD_ADDR_OWVAR 27
1284: PUSH
1285: LD_INT 1
1287: ST_TO_ADDR
// hc_name := Ilja Ivanov ;
1288: LD_ADDR_OWVAR 26
1292: PUSH
1293: LD_STRING Ilja Ivanov
1295: ST_TO_ADDR
// un := CreateHuman ;
1296: LD_ADDR_VAR 0 4
1300: PUSH
1301: CALL_OW 44
1305: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 1 , un ) ;
1306: LD_ADDR_EXP 21
1310: PUSH
1311: LD_EXP 21
1315: PPUSH
1316: LD_INT 1
1318: PPUSH
1319: LD_VAR 0 4
1323: PPUSH
1324: CALL_OW 2
1328: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1329: LD_VAR 0 4
1333: PPUSH
1334: LD_INT 3
1336: PPUSH
1337: LD_INT 0
1339: PPUSH
1340: CALL_OW 49
// PrepareHuman ( sex_male , 1 , skill ) ;
1344: LD_INT 1
1346: PPUSH
1347: LD_INT 1
1349: PPUSH
1350: LD_VAR 0 2
1354: PPUSH
1355: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1359: LD_ADDR_OWVAR 33
1363: PUSH
1364: LD_STRING SecondCharsGal
1366: ST_TO_ADDR
// hc_face_number := 70 ;
1367: LD_ADDR_OWVAR 34
1371: PUSH
1372: LD_INT 70
1374: ST_TO_ADDR
// hc_name := Pavel Starczy ;
1375: LD_ADDR_OWVAR 26
1379: PUSH
1380: LD_STRING Pavel Starczy
1382: ST_TO_ADDR
// un := CreateHuman ;
1383: LD_ADDR_VAR 0 4
1387: PUSH
1388: CALL_OW 44
1392: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 2 , un ) ;
1393: LD_ADDR_EXP 21
1397: PUSH
1398: LD_EXP 21
1402: PPUSH
1403: LD_INT 2
1405: PPUSH
1406: LD_VAR 0 4
1410: PPUSH
1411: CALL_OW 2
1415: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1416: LD_VAR 0 4
1420: PPUSH
1421: LD_INT 3
1423: PPUSH
1424: LD_INT 0
1426: PPUSH
1427: CALL_OW 49
// InitHc ;
1431: CALL_OW 19
// for i = 1 to 7 do
1435: LD_ADDR_VAR 0 3
1439: PUSH
1440: DOUBLE
1441: LD_INT 1
1443: DEC
1444: ST_TO_ADDR
1445: LD_INT 7
1447: PUSH
1448: FOR_TO
1449: IFFALSE 1600
// begin PrepareHuman ( false , 1 , skill ) ;
1451: LD_INT 0
1453: PPUSH
1454: LD_INT 1
1456: PPUSH
1457: LD_VAR 0 2
1461: PPUSH
1462: CALL_OW 380
// un := CreateHuman ;
1466: LD_ADDR_VAR 0 4
1470: PUSH
1471: CALL_OW 44
1475: ST_TO_ADDR
// if i mod 2 = 0 then
1476: LD_VAR 0 3
1480: PUSH
1481: LD_INT 2
1483: MOD
1484: PUSH
1485: LD_INT 0
1487: EQUAL
1488: IFFALSE 1545
// begin russian_troops_1 := Insert ( russian_troops_1 , russian_troops_1 + 1 , un ) ;
1490: LD_ADDR_EXP 21
1494: PUSH
1495: LD_EXP 21
1499: PPUSH
1500: LD_EXP 21
1504: PUSH
1505: LD_INT 1
1507: PLUS
1508: PPUSH
1509: LD_VAR 0 4
1513: PPUSH
1514: CALL_OW 2
1518: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1519: LD_VAR 0 4
1523: PPUSH
1524: LD_INT 3
1526: PPUSH
1527: LD_INT 0
1529: PPUSH
1530: CALL_OW 49
// ComHold ( un ) ;
1534: LD_VAR 0 4
1538: PPUSH
1539: CALL_OW 140
// end else
1543: GO 1598
// begin russian_troops_2 := Insert ( russian_troops_2 , russian_troops_2 + 1 , un ) ;
1545: LD_ADDR_EXP 22
1549: PUSH
1550: LD_EXP 22
1554: PPUSH
1555: LD_EXP 22
1559: PUSH
1560: LD_INT 1
1562: PLUS
1563: PPUSH
1564: LD_VAR 0 4
1568: PPUSH
1569: CALL_OW 2
1573: ST_TO_ADDR
// PlaceUnitArea ( un , guard_south , false ) ;
1574: LD_VAR 0 4
1578: PPUSH
1579: LD_INT 4
1581: PPUSH
1582: LD_INT 0
1584: PPUSH
1585: CALL_OW 49
// ComHold ( un ) ;
1589: LD_VAR 0 4
1593: PPUSH
1594: CALL_OW 140
// end ; end ;
1598: GO 1448
1600: POP
1601: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) do
1602: LD_ADDR_VAR 0 3
1606: PUSH
1607: LD_INT 22
1609: PUSH
1610: LD_INT 3
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: PUSH
1617: LD_INT 30
1619: PUSH
1620: LD_INT 31
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: PUSH
1627: EMPTY
1628: LIST
1629: LIST
1630: PPUSH
1631: CALL_OW 69
1635: PUSH
1636: FOR_IN
1637: IFFALSE 1655
// PrepareSolBun ( skill , i ) ;
1639: LD_VAR 0 2
1643: PPUSH
1644: LD_VAR 0 3
1648: PPUSH
1649: CALL 197 0 2
1653: GO 1636
1655: POP
1656: POP
// for i = 1 to 3 do
1657: LD_ADDR_VAR 0 3
1661: PUSH
1662: DOUBLE
1663: LD_INT 1
1665: DEC
1666: ST_TO_ADDR
1667: LD_INT 3
1669: PUSH
1670: FOR_TO
1671: IFFALSE 1807
// begin un := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1673: LD_ADDR_VAR 0 4
1677: PUSH
1678: LD_INT 3
1680: PPUSH
1681: LD_INT 3
1683: PPUSH
1684: LD_INT 22
1686: PPUSH
1687: LD_INT 1
1689: PPUSH
1690: LD_INT 1
1692: PPUSH
1693: LD_INT 42
1695: PPUSH
1696: LD_INT 100
1698: PPUSH
1699: CALL 333 0 7
1703: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
1704: LD_INT 0
1706: PPUSH
1707: LD_INT 3
1709: PPUSH
1710: LD_VAR 0 2
1714: PPUSH
1715: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1719: CALL_OW 44
1723: PPUSH
1724: LD_VAR 0 4
1728: PPUSH
1729: CALL_OW 52
// PlaceUnitXY ( un , [ 131 , 23 , 167 ] [ i ] , [ 87 , 14 , 95 ] [ i ] , false ) ;
1733: LD_VAR 0 4
1737: PPUSH
1738: LD_INT 131
1740: PUSH
1741: LD_INT 23
1743: PUSH
1744: LD_INT 167
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: LIST
1751: PUSH
1752: LD_VAR 0 3
1756: ARRAY
1757: PPUSH
1758: LD_INT 87
1760: PUSH
1761: LD_INT 14
1763: PUSH
1764: LD_INT 95
1766: PUSH
1767: EMPTY
1768: LIST
1769: LIST
1770: LIST
1771: PUSH
1772: LD_VAR 0 3
1776: ARRAY
1777: PPUSH
1778: LD_INT 0
1780: PPUSH
1781: CALL_OW 48
// russian_patrol_tanks := Join ( russian_patrol_tanks , un ) ;
1785: LD_ADDR_EXP 23
1789: PUSH
1790: LD_EXP 23
1794: PPUSH
1795: LD_VAR 0 4
1799: PPUSH
1800: CALL 65132 0 2
1804: ST_TO_ADDR
// end ;
1805: GO 1670
1807: POP
1808: POP
// for i = 1 to 2 do
1809: LD_ADDR_VAR 0 3
1813: PUSH
1814: DOUBLE
1815: LD_INT 1
1817: DEC
1818: ST_TO_ADDR
1819: LD_INT 2
1821: PUSH
1822: FOR_TO
1823: IFFALSE 1914
// begin PrepareHuman ( [ sex_female , sex_male , sex_male ] [ i ] , 1 , 1 ) ;
1825: LD_INT 2
1827: PUSH
1828: LD_INT 1
1830: PUSH
1831: LD_INT 1
1833: PUSH
1834: EMPTY
1835: LIST
1836: LIST
1837: LIST
1838: PUSH
1839: LD_VAR 0 3
1843: ARRAY
1844: PPUSH
1845: LD_INT 1
1847: PPUSH
1848: LD_INT 1
1850: PPUSH
1851: CALL_OW 380
// un := CreateHuman ;
1855: LD_ADDR_VAR 0 4
1859: PUSH
1860: CALL_OW 44
1864: ST_TO_ADDR
// russian_meta_guards := Insert ( russian_meta_guards , 1 , un ) ;
1865: LD_ADDR_EXP 24
1869: PUSH
1870: LD_EXP 24
1874: PPUSH
1875: LD_INT 1
1877: PPUSH
1878: LD_VAR 0 4
1882: PPUSH
1883: CALL_OW 2
1887: ST_TO_ADDR
// PlaceUnitArea ( un , exitArea , false ) ;
1888: LD_VAR 0 4
1892: PPUSH
1893: LD_INT 10
1895: PPUSH
1896: LD_INT 0
1898: PPUSH
1899: CALL_OW 49
// ComHold ( un ) ;
1903: LD_VAR 0 4
1907: PPUSH
1908: CALL_OW 140
// end ;
1912: GO 1822
1914: POP
1915: POP
// if Difficulty < 3 then
1916: LD_OWVAR 67
1920: PUSH
1921: LD_INT 3
1923: LESS
1924: IFFALSE 1928
// exit ;
1926: GO 1999
// PrepareHuman ( false , 1 , skill ) ;
1928: LD_INT 0
1930: PPUSH
1931: LD_INT 1
1933: PPUSH
1934: LD_VAR 0 2
1938: PPUSH
1939: CALL_OW 380
// russian_patrol_forest := CreateHuman ;
1943: LD_ADDR_EXP 25
1947: PUSH
1948: CALL_OW 44
1952: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_forest , 82 , 2 , false ) ;
1953: LD_EXP 25
1957: PPUSH
1958: LD_INT 82
1960: PPUSH
1961: LD_INT 2
1963: PPUSH
1964: LD_INT 0
1966: PPUSH
1967: CALL_OW 48
// russian_patrol_hidden := CreateHuman ;
1971: LD_ADDR_EXP 26
1975: PUSH
1976: CALL_OW 44
1980: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_hidden , 136 , 30 , false ) ;
1981: LD_EXP 26
1985: PPUSH
1986: LD_INT 136
1988: PPUSH
1989: LD_INT 30
1991: PPUSH
1992: LD_INT 0
1994: PPUSH
1995: CALL_OW 48
// end ;
1999: LD_VAR 0 1
2003: RET
// every 0 0$01 trigger active_road_patrol do
2004: LD_EXP 8
2008: IFFALSE 2074
2010: GO 2012
2012: DISABLE
// ComPatrol ( russian_patrol_tanks [ 1 ] , road , 0 0$02 , [ 131 , 87 , 107 , 75 , 107 , 66 , 114 , 61 , 107 , 34 ] ) ;
2013: LD_EXP 23
2017: PUSH
2018: LD_INT 1
2020: ARRAY
2021: PPUSH
2022: LD_STRING road
2024: PPUSH
2025: LD_INT 70
2027: PPUSH
2028: LD_INT 131
2030: PUSH
2031: LD_INT 87
2033: PUSH
2034: LD_INT 107
2036: PUSH
2037: LD_INT 75
2039: PUSH
2040: LD_INT 107
2042: PUSH
2043: LD_INT 66
2045: PUSH
2046: LD_INT 114
2048: PUSH
2049: LD_INT 61
2051: PUSH
2052: LD_INT 107
2054: PUSH
2055: LD_INT 34
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: PPUSH
2070: CALL 421 0 4
2074: END
// every 0 0$01 trigger active_road_patrol do
2075: LD_EXP 8
2079: IFFALSE 2137
2081: GO 2083
2083: DISABLE
// ComPatrol ( russian_patrol_tanks [ 2 ] , road , 0 0$02 , [ 21 , 12 , 37 , 30 , 65 , 62 , 107 , 76 ] ) ;
2084: LD_EXP 23
2088: PUSH
2089: LD_INT 2
2091: ARRAY
2092: PPUSH
2093: LD_STRING road
2095: PPUSH
2096: LD_INT 70
2098: PPUSH
2099: LD_INT 21
2101: PUSH
2102: LD_INT 12
2104: PUSH
2105: LD_INT 37
2107: PUSH
2108: LD_INT 30
2110: PUSH
2111: LD_INT 65
2113: PUSH
2114: LD_INT 62
2116: PUSH
2117: LD_INT 107
2119: PUSH
2120: LD_INT 76
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: PPUSH
2133: CALL 421 0 4
2137: END
// every 0 0$01 trigger active_road_patrol do
2138: LD_EXP 8
2142: IFFALSE 2200
2144: GO 2146
2146: DISABLE
// ComPatrol ( russian_patrol_tanks [ 3 ] , road , 0 0$02 , [ 167 , 95 , 147 , 81 , 144 , 66 , 149 , 55 ] ) ;
2147: LD_EXP 23
2151: PUSH
2152: LD_INT 3
2154: ARRAY
2155: PPUSH
2156: LD_STRING road
2158: PPUSH
2159: LD_INT 70
2161: PPUSH
2162: LD_INT 167
2164: PUSH
2165: LD_INT 95
2167: PUSH
2168: LD_INT 147
2170: PUSH
2171: LD_INT 81
2173: PUSH
2174: LD_INT 144
2176: PUSH
2177: LD_INT 66
2179: PUSH
2180: LD_INT 149
2182: PUSH
2183: LD_INT 55
2185: PUSH
2186: EMPTY
2187: LIST
2188: LIST
2189: LIST
2190: LIST
2191: LIST
2192: LIST
2193: LIST
2194: LIST
2195: PPUSH
2196: CALL 421 0 4
2200: END
// every 0 0$01 trigger IsOk ( russian_patrol_forest ) do
2201: LD_EXP 25
2205: PPUSH
2206: CALL_OW 302
2210: IFFALSE 2272
2212: GO 2214
2214: DISABLE
// ComPatrol ( russian_patrol_forest , forest , 0 0$01 , [ 52 , 15 , 81 , 9 , 120 , 52 , 135 , 80 , 122 , 95 ] ) ;
2215: LD_EXP 25
2219: PPUSH
2220: LD_STRING forest
2222: PPUSH
2223: LD_INT 35
2225: PPUSH
2226: LD_INT 52
2228: PUSH
2229: LD_INT 15
2231: PUSH
2232: LD_INT 81
2234: PUSH
2235: LD_INT 9
2237: PUSH
2238: LD_INT 120
2240: PUSH
2241: LD_INT 52
2243: PUSH
2244: LD_INT 135
2246: PUSH
2247: LD_INT 80
2249: PUSH
2250: LD_INT 122
2252: PUSH
2253: LD_INT 95
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: LIST
2260: LIST
2261: LIST
2262: LIST
2263: LIST
2264: LIST
2265: LIST
2266: LIST
2267: PPUSH
2268: CALL 421 0 4
2272: END
// every 0 0$01 trigger IsOk ( russian_patrol_hidden ) do
2273: LD_EXP 26
2277: PPUSH
2278: CALL_OW 302
2282: IFFALSE 2336
2284: GO 2286
2286: DISABLE
// ComPatrol ( russian_patrol_hidden , forest , 0 0$02 , [ 137 , 30 , 127 , 23 , 122 , 16 , 114 , 3 ] ) ;
2287: LD_EXP 26
2291: PPUSH
2292: LD_STRING forest
2294: PPUSH
2295: LD_INT 70
2297: PPUSH
2298: LD_INT 137
2300: PUSH
2301: LD_INT 30
2303: PUSH
2304: LD_INT 127
2306: PUSH
2307: LD_INT 23
2309: PUSH
2310: LD_INT 122
2312: PUSH
2313: LD_INT 16
2315: PUSH
2316: LD_INT 114
2318: PUSH
2319: LD_INT 3
2321: PUSH
2322: EMPTY
2323: LIST
2324: LIST
2325: LIST
2326: LIST
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: PPUSH
2332: CALL 421 0 4
2336: END
// every 0 0$01 trigger macmilan_use_radio do
2337: LD_EXP 6
2341: IFFALSE 2402
2343: GO 2345
2345: DISABLE
// begin active_road_patrol := false ;
2346: LD_ADDR_EXP 8
2350: PUSH
2351: LD_INT 0
2353: ST_TO_ADDR
// ComStop ( russian_patrol_tanks ) ;
2354: LD_EXP 23
2358: PPUSH
2359: CALL_OW 141
// AddComAgressiveMove ( russian_patrol_tanks , 72 , 41 ) ;
2363: LD_EXP 23
2367: PPUSH
2368: LD_INT 72
2370: PPUSH
2371: LD_INT 41
2373: PPUSH
2374: CALL_OW 174
// ComExitBuilding ( russian_troops_2 ) ;
2378: LD_EXP 22
2382: PPUSH
2383: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , 72 , 41 ) ;
2387: LD_EXP 22
2391: PPUSH
2392: LD_INT 72
2394: PPUSH
2395: LD_INT 41
2397: PPUSH
2398: CALL_OW 174
// end ;
2402: END
// every 0 0$03 trigger FilterUnitsInArea ( def_south , [ f_side , 1 ] ) do var un ;
2403: LD_INT 9
2405: PPUSH
2406: LD_INT 22
2408: PUSH
2409: LD_INT 1
2411: PUSH
2412: EMPTY
2413: LIST
2414: LIST
2415: PPUSH
2416: CALL_OW 70
2420: IFFALSE 2494
2422: GO 2424
2424: DISABLE
2425: LD_INT 0
2427: PPUSH
// begin enable ;
2428: ENABLE
// un := FilterUnitsInArea ( def_south , [ f_side , 1 ] ) [ 1 ] ;
2429: LD_ADDR_VAR 0 1
2433: PUSH
2434: LD_INT 9
2436: PPUSH
2437: LD_INT 22
2439: PUSH
2440: LD_INT 1
2442: PUSH
2443: EMPTY
2444: LIST
2445: LIST
2446: PPUSH
2447: CALL_OW 70
2451: PUSH
2452: LD_INT 1
2454: ARRAY
2455: ST_TO_ADDR
// ComExitBuilding ( russian_troops_2 ) ;
2456: LD_EXP 22
2460: PPUSH
2461: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , GetX ( un ) , GetY ( un ) ) ;
2465: LD_EXP 22
2469: PPUSH
2470: LD_VAR 0 1
2474: PPUSH
2475: CALL_OW 250
2479: PPUSH
2480: LD_VAR 0 1
2484: PPUSH
2485: CALL_OW 251
2489: PPUSH
2490: CALL_OW 174
// end ;
2494: PPOPN 1
2496: END
// every 0 0$01 trigger ( GetLives ( russian_patrol_tanks [ 1 ] ) < 999 or GetLives ( russian_patrol_tanks [ 2 ] ) < 999 ) and See ( 3 , JMM ) do
2497: LD_EXP 23
2501: PUSH
2502: LD_INT 1
2504: ARRAY
2505: PPUSH
2506: CALL_OW 256
2510: PUSH
2511: LD_INT 999
2513: LESS
2514: PUSH
2515: LD_EXP 23
2519: PUSH
2520: LD_INT 2
2522: ARRAY
2523: PPUSH
2524: CALL_OW 256
2528: PUSH
2529: LD_INT 999
2531: LESS
2532: OR
2533: PUSH
2534: LD_INT 3
2536: PPUSH
2537: LD_EXP 16
2541: PPUSH
2542: CALL_OW 292
2546: AND
2547: IFFALSE 2574
2549: GO 2551
2551: DISABLE
// begin active_road_patrol := false ;
2552: LD_ADDR_EXP 8
2556: PUSH
2557: LD_INT 0
2559: ST_TO_ADDR
// ComAttackUnit ( russian_patrol_tanks , JMM ) ;
2560: LD_EXP 23
2564: PPUSH
2565: LD_EXP 16
2569: PPUSH
2570: CALL_OW 115
// end ;
2574: END
// every 0 0$01 trigger macmilan_in_trap do
2575: LD_EXP 9
2579: IFFALSE 2625
2581: GO 2583
2583: DISABLE
// begin ComExitBuilding ( russian_troops_2 ) ;
2584: LD_EXP 22
2588: PPUSH
2589: CALL_OW 122
// ComAttackUnit ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , JMM ) ;
2593: LD_EXP 21
2597: PUSH
2598: LD_EXP 22
2602: ADD
2603: PUSH
2604: LD_EXP 27
2608: ADD
2609: PUSH
2610: LD_EXP 23
2614: ADD
2615: PPUSH
2616: LD_EXP 16
2620: PPUSH
2621: CALL_OW 115
// end ;
2625: END
// every 0 0$01 trigger meta_action do
2626: LD_EXP 10
2630: IFFALSE 2748
2632: GO 2634
2634: DISABLE
// begin active_road_patrol := false ;
2635: LD_ADDR_EXP 8
2639: PUSH
2640: LD_INT 0
2642: ST_TO_ADDR
// if FilterUnitsInArea ( secretRoad , [ f_side , 1 ] ) then
2643: LD_INT 15
2645: PPUSH
2646: LD_INT 22
2648: PUSH
2649: LD_INT 1
2651: PUSH
2652: EMPTY
2653: LIST
2654: LIST
2655: PPUSH
2656: CALL_OW 70
2660: IFFALSE 2715
// begin ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 , 104 , 10 ) ;
2662: LD_EXP 21
2666: PUSH
2667: LD_EXP 22
2671: ADD
2672: PPUSH
2673: LD_INT 104
2675: PPUSH
2676: LD_INT 10
2678: PPUSH
2679: CALL_OW 114
// ComAgressiveMove ( russian_patrol_tanks , 96 , 14 ) ;
2683: LD_EXP 23
2687: PPUSH
2688: LD_INT 96
2690: PPUSH
2691: LD_INT 14
2693: PPUSH
2694: CALL_OW 114
// ComAgressiveMove ( Pokryshkin , 85 , 4 ) ;
2698: LD_EXP 27
2702: PPUSH
2703: LD_INT 85
2705: PPUSH
2706: LD_INT 4
2708: PPUSH
2709: CALL_OW 114
// end else
2713: GO 2748
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , 93 , 1 ) ;
2715: LD_EXP 21
2719: PUSH
2720: LD_EXP 22
2724: ADD
2725: PUSH
2726: LD_EXP 27
2730: ADD
2731: PUSH
2732: LD_EXP 23
2736: ADD
2737: PPUSH
2738: LD_INT 93
2740: PPUSH
2741: LD_INT 1
2743: PPUSH
2744: CALL_OW 114
// end ;
2748: END
// every 0 0$1 trigger GetLives ( Pokryshkin ) < 1000 do
2749: LD_EXP 27
2753: PPUSH
2754: CALL_OW 256
2758: PUSH
2759: LD_INT 1000
2761: LESS
2762: IFFALSE 2813
2764: GO 2766
2766: DISABLE
// begin enable ;
2767: ENABLE
// if HexInfo ( 18 , 1 ) = Pokryshkin then
2768: LD_INT 18
2770: PPUSH
2771: LD_INT 1
2773: PPUSH
2774: CALL_OW 428
2778: PUSH
2779: LD_EXP 27
2783: EQUAL
2784: IFFALSE 2798
// begin RemoveUnit ( Pokryshkin ) ;
2786: LD_EXP 27
2790: PPUSH
2791: CALL_OW 64
// disable ;
2795: DISABLE
// end else
2796: GO 2813
// ComMoveXY ( Pokryshkin , 18 , 1 ) ;
2798: LD_EXP 27
2802: PPUSH
2803: LD_INT 18
2805: PPUSH
2806: LD_INT 1
2808: PPUSH
2809: CALL_OW 111
// end ;
2813: END
// every 0 0$20 trigger send_troops_to_forest do
2814: LD_EXP 14
2818: IFFALSE 2872
2820: GO 2822
2822: DISABLE
// begin if not IsOk ( russian_patrol_forest ) then
2823: LD_EXP 25
2827: PPUSH
2828: CALL_OW 302
2832: NOT
2833: IFFALSE 2837
// exit ;
2835: GO 2872
// ComAgressiveMove ( russian_troops_1 ^ Pokryshkin , GetRememberedX ( russian_patrol_forest ) , GetRememberedY ( russian_patrol_forest ) ) ;
2837: LD_EXP 21
2841: PUSH
2842: LD_EXP 27
2846: ADD
2847: PPUSH
2848: LD_EXP 25
2852: PPUSH
2853: CALL_OW 252
2857: PPUSH
2858: LD_EXP 25
2862: PPUSH
2863: CALL_OW 253
2867: PPUSH
2868: CALL_OW 114
// end ;
2872: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) = 3 then
2873: LD_VAR 0 1
2877: PPUSH
2878: CALL_OW 255
2882: PUSH
2883: LD_INT 3
2885: EQUAL
2886: IFFALSE 2929
// begin wait ( 11 ) ;
2888: LD_INT 11
2890: PPUSH
2891: CALL_OW 67
// ComEnterUnit ( driver , NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_depot ] ) , driver ) ) ;
2895: LD_VAR 0 1
2899: PPUSH
2900: LD_INT 30
2902: PUSH
2903: LD_INT 0
2905: PUSH
2906: EMPTY
2907: LIST
2908: LIST
2909: PPUSH
2910: CALL_OW 69
2914: PPUSH
2915: LD_VAR 0 1
2919: PPUSH
2920: CALL_OW 74
2924: PPUSH
2925: CALL_OW 120
// end ; end ; end_of_file
2929: PPOPN 4
2931: END
// export function Action ; var i ; begin
2932: LD_INT 0
2934: PPUSH
2935: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
2936: LD_ADDR_VAR 0 2
2940: PUSH
2941: LD_INT 22
2943: PUSH
2944: LD_INT 3
2946: PUSH
2947: EMPTY
2948: LIST
2949: LIST
2950: PUSH
2951: LD_INT 25
2953: PUSH
2954: LD_INT 1
2956: PUSH
2957: EMPTY
2958: LIST
2959: LIST
2960: PUSH
2961: EMPTY
2962: LIST
2963: LIST
2964: PPUSH
2965: CALL_OW 69
2969: PUSH
2970: FOR_IN
2971: IFFALSE 2984
// ComHold ( i ) ;
2973: LD_VAR 0 2
2977: PPUSH
2978: CALL_OW 140
2982: GO 2970
2984: POP
2985: POP
// InGameOn ;
2986: CALL_OW 8
// CenterOnXY ( 79 , 76 ) ;
2990: LD_INT 79
2992: PPUSH
2993: LD_INT 76
2995: PPUSH
2996: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
3000: LD_INT 10
3002: PPUSH
3003: CALL_OW 67
// PlaceUnitXY ( JMM , 80 , 79 , true ) ;
3007: LD_EXP 16
3011: PPUSH
3012: LD_INT 80
3014: PPUSH
3015: LD_INT 79
3017: PPUSH
3018: LD_INT 1
3020: PPUSH
3021: CALL_OW 48
// Wait ( 0 0$03 ) ;
3025: LD_INT 105
3027: PPUSH
3028: CALL_OW 67
// ComMoveXY ( JMM , 80 , 76 ) ;
3032: LD_EXP 16
3036: PPUSH
3037: LD_INT 80
3039: PPUSH
3040: LD_INT 76
3042: PPUSH
3043: CALL_OW 111
// Say ( JMM , D1-JMM-1 ) ;
3047: LD_EXP 16
3051: PPUSH
3052: LD_STRING D1-JMM-1
3054: PPUSH
3055: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
3059: LD_INT 10
3061: PPUSH
3062: CALL_OW 67
// ComMoveXY ( JMM , 76 , 76 ) ;
3066: LD_EXP 16
3070: PPUSH
3071: LD_INT 76
3073: PPUSH
3074: LD_INT 76
3076: PPUSH
3077: CALL_OW 111
// Say ( JMM , D1-JMM-1a ) ;
3081: LD_EXP 16
3085: PPUSH
3086: LD_STRING D1-JMM-1a
3088: PPUSH
3089: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
3093: LD_INT 10
3095: PPUSH
3096: CALL_OW 67
// ComTurnXY ( JMM , 83 , 66 ) ;
3100: LD_EXP 16
3104: PPUSH
3105: LD_INT 83
3107: PPUSH
3108: LD_INT 66
3110: PPUSH
3111: CALL_OW 118
// Say ( JMM , D1-JMM-1b ) ;
3115: LD_EXP 16
3119: PPUSH
3120: LD_STRING D1-JMM-1b
3122: PPUSH
3123: CALL_OW 88
// Wait ( 0 0$0.5 ) ;
3127: LD_INT 18
3129: PPUSH
3130: CALL_OW 67
// Say ( JMM , D1-JMM-1c ) ;
3134: LD_EXP 16
3138: PPUSH
3139: LD_STRING D1-JMM-1c
3141: PPUSH
3142: CALL_OW 88
// Wait ( 0 0$0.2 ) ;
3146: LD_INT 7
3148: PPUSH
3149: CALL_OW 67
// SayRadioNoFaceNoName ( Powell , D1-Pow-1 ) ;
3153: LD_EXP 19
3157: PPUSH
3158: LD_STRING D1-Pow-1
3160: PPUSH
3161: CALL 69051 0 2
// Say ( JMM , D1-JMM-2 ) ;
3165: LD_EXP 16
3169: PPUSH
3170: LD_STRING D1-JMM-2
3172: PPUSH
3173: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D1-Pow-2 ) ;
3177: LD_EXP 19
3181: PPUSH
3182: LD_STRING D1-Pow-2
3184: PPUSH
3185: CALL 69051 0 2
// Say ( JMM , D1-JMM-3 ) ;
3189: LD_EXP 16
3193: PPUSH
3194: LD_STRING D1-JMM-3
3196: PPUSH
3197: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D1-Pow-3 ) ;
3201: LD_EXP 19
3205: PPUSH
3206: LD_STRING D1-Pow-3
3208: PPUSH
3209: CALL 69051 0 2
// Say ( JMM , D1-JMM-4 ) ;
3213: LD_EXP 16
3217: PPUSH
3218: LD_STRING D1-JMM-4
3220: PPUSH
3221: CALL_OW 88
// ComFree ( JMM ) ;
3225: LD_EXP 16
3229: PPUSH
3230: CALL_OW 139
// Wait ( 0 0$0.3 ) ;
3234: LD_INT 10
3236: PPUSH
3237: CALL_OW 67
// InGameOff ;
3241: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
3245: LD_STRING M1
3247: PPUSH
3248: CALL_OW 337
// SaveForQuickRestart ;
3252: CALL_OW 22
// active_russian_dialog := true ;
3256: LD_ADDR_EXP 3
3260: PUSH
3261: LD_INT 1
3263: ST_TO_ADDR
// active_road_patrol := true ;
3264: LD_ADDR_EXP 8
3268: PUSH
3269: LD_INT 1
3271: ST_TO_ADDR
// if Difficulty < 3 then
3272: LD_OWVAR 67
3276: PUSH
3277: LD_INT 3
3279: LESS
3280: IFFALSE 3311
// begin PlaceUnitXY ( Bobby , 41 , 71 , false ) ;
3282: LD_EXP 17
3286: PPUSH
3287: LD_INT 41
3289: PPUSH
3290: LD_INT 71
3292: PPUSH
3293: LD_INT 0
3295: PPUSH
3296: CALL_OW 48
// ComHold ( Bobby ) ;
3300: LD_EXP 17
3304: PPUSH
3305: CALL_OW 140
// end else
3309: GO 3359
// begin SetDir ( Bobby , 5 ) ;
3311: LD_EXP 17
3315: PPUSH
3316: LD_INT 5
3318: PPUSH
3319: CALL_OW 233
// PlaceUnitXY ( Bobby , 105 , 98 , false ) ;
3323: LD_EXP 17
3327: PPUSH
3328: LD_INT 105
3330: PPUSH
3331: LD_INT 98
3333: PPUSH
3334: LD_INT 0
3336: PPUSH
3337: CALL_OW 48
// ComCrawl ( Bobby ) ;
3341: LD_EXP 17
3345: PPUSH
3346: CALL_OW 137
// AddComHold ( Bobby ) ;
3350: LD_EXP 17
3354: PPUSH
3355: CALL_OW 200
// end ; if Difficulty < 3 then
3359: LD_OWVAR 67
3363: PUSH
3364: LD_INT 3
3366: LESS
3367: IFFALSE 3404
// begin PlaceUnitXY ( Cyrus , 90 , 42 , false ) ;
3369: LD_EXP 18
3373: PPUSH
3374: LD_INT 90
3376: PPUSH
3377: LD_INT 42
3379: PPUSH
3380: LD_INT 0
3382: PPUSH
3383: CALL_OW 48
// ComMoveXY ( Cyrus , 79 , 34 ) ;
3387: LD_EXP 18
3391: PPUSH
3392: LD_INT 79
3394: PPUSH
3395: LD_INT 34
3397: PPUSH
3398: CALL_OW 111
// end else
3402: GO 3452
// if Difficulty = 3 then
3404: LD_OWVAR 67
3408: PUSH
3409: LD_INT 3
3411: EQUAL
3412: IFFALSE 3434
// PlaceUnitXY ( Cyrus , 125 , 42 , false ) else
3414: LD_EXP 18
3418: PPUSH
3419: LD_INT 125
3421: PPUSH
3422: LD_INT 42
3424: PPUSH
3425: LD_INT 0
3427: PPUSH
3428: CALL_OW 48
3432: GO 3452
// PlaceUnitXY ( Cyrus , 154 , 97 , false ) ;
3434: LD_EXP 18
3438: PPUSH
3439: LD_INT 154
3441: PPUSH
3442: LD_INT 97
3444: PPUSH
3445: LD_INT 0
3447: PPUSH
3448: CALL_OW 48
// AddComCrawl ( Cyrus ) ;
3452: LD_EXP 18
3456: PPUSH
3457: CALL_OW 197
// AddComHold ( Cyrus ) ;
3461: LD_EXP 18
3465: PPUSH
3466: CALL_OW 200
// end ;
3470: LD_VAR 0 1
3474: RET
// every 0 0$01 trigger active_russian_dialog do var wait_points ;
3475: LD_EXP 3
3479: IFFALSE 4073
3481: GO 3483
3483: DISABLE
3484: LD_INT 0
3486: PPUSH
// begin wait_points := 0 ;
3487: LD_ADDR_VAR 0 1
3491: PUSH
3492: LD_INT 0
3494: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
3495: LD_INT 70
3497: PPUSH
3498: CALL_OW 67
// ComAgressiveMove ( russian_troops_1 , 79 , 83 ) ;
3502: LD_EXP 21
3506: PPUSH
3507: LD_INT 79
3509: PPUSH
3510: LD_INT 83
3512: PPUSH
3513: CALL_OW 114
// Say ( russian_troops_1 [ 2 ] , D1R-Rus1-1 ) ;
3517: LD_EXP 21
3521: PUSH
3522: LD_INT 2
3524: ARRAY
3525: PPUSH
3526: LD_STRING D1R-Rus1-1
3528: PPUSH
3529: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1R-Rus2-1 ) ;
3533: LD_EXP 21
3537: PUSH
3538: LD_INT 1
3540: ARRAY
3541: PPUSH
3542: LD_STRING D1R-Rus2-1
3544: PPUSH
3545: CALL_OW 88
// ComAgressiveMove ( russian_troops_2 , 91 , 80 ) ;
3549: LD_EXP 22
3553: PPUSH
3554: LD_INT 91
3556: PPUSH
3557: LD_INT 80
3559: PPUSH
3560: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
3564: LD_INT 35
3566: PPUSH
3567: CALL_OW 67
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 79 , 82 ) < 6 ;
3571: LD_EXP 21
3575: PUSH
3576: LD_INT 1
3578: ARRAY
3579: PPUSH
3580: LD_INT 79
3582: PPUSH
3583: LD_INT 82
3585: PPUSH
3586: CALL_OW 297
3590: PUSH
3591: LD_INT 6
3593: LESS
3594: IFFALSE 3564
// if not IsInArea ( JMM , jmm_spot ) then
3596: LD_EXP 16
3600: PPUSH
3601: LD_INT 5
3603: PPUSH
3604: CALL_OW 308
3608: NOT
3609: IFFALSE 3629
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1 ) else
3611: LD_EXP 21
3615: PUSH
3616: LD_INT 1
3618: ARRAY
3619: PPUSH
3620: LD_STRING D1Ra-Rus2-1
3622: PPUSH
3623: CALL_OW 88
3627: GO 3696
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3629: LD_EXP 21
3633: PUSH
3634: LD_INT 2
3636: ARRAY
3637: PPUSH
3638: LD_STRING D1Rb-Rus1-1
3640: PPUSH
3641: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Rb-Rus2-1 ) ;
3645: LD_EXP 21
3649: PUSH
3650: LD_INT 1
3652: ARRAY
3653: PPUSH
3654: LD_STRING D1Rb-Rus2-1
3656: PPUSH
3657: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 , GetX ( JMM ) , GetY ( JMM ) ) ;
3661: LD_EXP 21
3665: PUSH
3666: LD_EXP 22
3670: ADD
3671: PPUSH
3672: LD_EXP 16
3676: PPUSH
3677: CALL_OW 250
3681: PPUSH
3682: LD_EXP 16
3686: PPUSH
3687: CALL_OW 251
3691: PPUSH
3692: CALL_OW 114
// end ; wait_points := 10 ;
3696: LD_ADDR_VAR 0 1
3700: PUSH
3701: LD_INT 10
3703: ST_TO_ADDR
// if Difficulty > 1 then
3704: LD_OWVAR 67
3708: PUSH
3709: LD_INT 1
3711: GREATER
3712: IFFALSE 3794
// begin ComAgressiveMove ( russian_troops_1 , 78 , 95 ) ;
3714: LD_EXP 21
3718: PPUSH
3719: LD_INT 78
3721: PPUSH
3722: LD_INT 95
3724: PPUSH
3725: CALL_OW 114
// AddComWait ( russian_troops_1 , 0 0$05 ) ;
3729: LD_EXP 21
3733: PPUSH
3734: LD_INT 175
3736: PPUSH
3737: CALL_OW 202
// wait_points := wait_points + 15 ;
3741: LD_ADDR_VAR 0 1
3745: PUSH
3746: LD_VAR 0 1
3750: PUSH
3751: LD_INT 15
3753: PLUS
3754: ST_TO_ADDR
// if Difficulty > 2 then
3755: LD_OWVAR 67
3759: PUSH
3760: LD_INT 2
3762: GREATER
3763: IFFALSE 3794
// begin AddComAgressiveMove ( russian_troops_1 , 65 , 79 ) ;
3765: LD_EXP 21
3769: PPUSH
3770: LD_INT 65
3772: PPUSH
3773: LD_INT 79
3775: PPUSH
3776: CALL_OW 174
// wait_points := wait_points + 5 ;
3780: LD_ADDR_VAR 0 1
3784: PUSH
3785: LD_VAR 0 1
3789: PUSH
3790: LD_INT 5
3792: PLUS
3793: ST_TO_ADDR
// end ; end ; repeat wait ( 0 0$01 ) ;
3794: LD_INT 35
3796: PPUSH
3797: CALL_OW 67
// wait_points := wait_points - 1 ;
3801: LD_ADDR_VAR 0 1
3805: PUSH
3806: LD_VAR 0 1
3810: PUSH
3811: LD_INT 1
3813: MINUS
3814: ST_TO_ADDR
// if See ( 3 , JMM ) then
3815: LD_INT 3
3817: PPUSH
3818: LD_EXP 16
3822: PPUSH
3823: CALL_OW 292
3827: IFFALSE 3881
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3829: LD_EXP 21
3833: PUSH
3834: LD_INT 2
3836: ARRAY
3837: PPUSH
3838: LD_STRING D1Rb-Rus1-1
3840: PPUSH
3841: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3845: LD_EXP 21
3849: PPUSH
3850: LD_EXP 16
3854: PPUSH
3855: CALL_OW 250
3859: PPUSH
3860: LD_EXP 16
3864: PPUSH
3865: CALL_OW 251
3869: PPUSH
3870: CALL_OW 114
// Wait ( 0 0$03 ) ;
3874: LD_INT 105
3876: PPUSH
3877: CALL_OW 67
// end ; until wait_points = 0 ;
3881: LD_VAR 0 1
3885: PUSH
3886: LD_INT 0
3888: EQUAL
3889: IFFALSE 3794
// Say ( russian_troops_1 [ 2 ] , D1Rc-Rus1-1 ) ;
3891: LD_EXP 21
3895: PUSH
3896: LD_INT 2
3898: ARRAY
3899: PPUSH
3900: LD_STRING D1Rc-Rus1-1
3902: PPUSH
3903: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1a ) ;
3907: LD_EXP 21
3911: PUSH
3912: LD_INT 1
3914: ARRAY
3915: PPUSH
3916: LD_STRING D1Ra-Rus2-1a
3918: PPUSH
3919: CALL_OW 88
// active_powell_dialog := true ;
3923: LD_ADDR_EXP 15
3927: PUSH
3928: LD_INT 1
3930: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3931: LD_EXP 21
3935: PPUSH
3936: LD_INT 45
3938: PPUSH
3939: LD_INT 5
3941: PPUSH
3942: CALL_OW 114
// ComEnterUnit ( russian_troops_2 , rbar1 ) ;
3946: LD_EXP 22
3950: PPUSH
3951: LD_INT 26
3953: PPUSH
3954: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
3958: LD_INT 35
3960: PPUSH
3961: CALL_OW 67
// if See ( 3 , JMM ) then
3965: LD_INT 3
3967: PPUSH
3968: LD_EXP 16
3972: PPUSH
3973: CALL_OW 292
3977: IFFALSE 4033
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3979: LD_EXP 21
3983: PUSH
3984: LD_INT 2
3986: ARRAY
3987: PPUSH
3988: LD_STRING D1Rb-Rus1-1
3990: PPUSH
3991: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3995: LD_EXP 21
3999: PPUSH
4000: LD_EXP 16
4004: PPUSH
4005: CALL_OW 250
4009: PPUSH
4010: LD_EXP 16
4014: PPUSH
4015: CALL_OW 251
4019: PPUSH
4020: CALL_OW 114
// Wait ( 0 0$50 ) ;
4024: LD_INT 1750
4026: PPUSH
4027: CALL_OW 67
// end else
4031: GO 4048
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
4033: LD_EXP 21
4037: PPUSH
4038: LD_INT 45
4040: PPUSH
4041: LD_INT 5
4043: PPUSH
4044: CALL_OW 114
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 45 , 5 ) < 10 ;
4048: LD_EXP 21
4052: PUSH
4053: LD_INT 1
4055: ARRAY
4056: PPUSH
4057: LD_INT 45
4059: PPUSH
4060: LD_INT 5
4062: PPUSH
4063: CALL_OW 297
4067: PUSH
4068: LD_INT 10
4070: LESS
4071: IFFALSE 3958
// end ;
4073: PPOPN 1
4075: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 6 ] ] ) and Difficulty = 1 do
4076: LD_INT 22
4078: PUSH
4079: LD_INT 3
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: PUSH
4086: LD_INT 92
4088: PUSH
4089: LD_INT 80
4091: PUSH
4092: LD_INT 83
4094: PUSH
4095: LD_INT 6
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: LIST
4102: LIST
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: PPUSH
4108: CALL_OW 69
4112: PUSH
4113: LD_OWVAR 67
4117: PUSH
4118: LD_INT 1
4120: EQUAL
4121: AND
4122: IFFALSE 4203
4124: GO 4126
4126: DISABLE
// begin PlaceSeeing ( 80 , 83 , 1 , - 7 ) ;
4127: LD_INT 80
4129: PPUSH
4130: LD_INT 83
4132: PPUSH
4133: LD_INT 1
4135: PPUSH
4136: LD_INT 7
4138: NEG
4139: PPUSH
4140: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
4144: LD_INT 35
4146: PPUSH
4147: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 10 ] ] ) ;
4151: LD_INT 22
4153: PUSH
4154: LD_INT 3
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: PUSH
4161: LD_INT 92
4163: PUSH
4164: LD_INT 80
4166: PUSH
4167: LD_INT 83
4169: PUSH
4170: LD_INT 10
4172: PUSH
4173: EMPTY
4174: LIST
4175: LIST
4176: LIST
4177: LIST
4178: PUSH
4179: EMPTY
4180: LIST
4181: LIST
4182: PPUSH
4183: CALL_OW 69
4187: NOT
4188: IFFALSE 4144
// RemoveSeeing ( 80 , 83 , 1 ) ;
4190: LD_INT 80
4192: PPUSH
4193: LD_INT 83
4195: PPUSH
4196: LD_INT 1
4198: PPUSH
4199: CALL_OW 331
// end ;
4203: END
// every 0 0$02 trigger GetDistUnits ( JMM , Bobby ) < 6 and IsOk ( Bobby ) do
4204: LD_EXP 16
4208: PPUSH
4209: LD_EXP 17
4213: PPUSH
4214: CALL_OW 296
4218: PUSH
4219: LD_INT 6
4221: LESS
4222: PUSH
4223: LD_EXP 17
4227: PPUSH
4228: CALL_OW 302
4232: AND
4233: IFFALSE 4692
4235: GO 4237
4237: DISABLE
// begin ComWalk ( Bobby ) ;
4238: LD_EXP 17
4242: PPUSH
4243: CALL_OW 138
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4247: LD_EXP 17
4251: PPUSH
4252: LD_EXP 16
4256: PPUSH
4257: CALL_OW 250
4261: PPUSH
4262: LD_EXP 16
4266: PPUSH
4267: CALL_OW 251
4271: PPUSH
4272: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
4276: LD_INT 35
4278: PPUSH
4279: CALL_OW 67
// until See ( 4 , JMM ) ;
4283: LD_INT 4
4285: PPUSH
4286: LD_EXP 16
4290: PPUSH
4291: CALL_OW 292
4295: IFFALSE 4276
// InGameOn ;
4297: CALL_OW 8
// ComTurnUnit ( JMM , Bobby ) ;
4301: LD_EXP 16
4305: PPUSH
4306: LD_EXP 17
4310: PPUSH
4311: CALL_OW 119
// if cyrus_in_squad and IsOk ( Cyrus ) and GetDistUnits ( JMM , Cyrus ) < 10 then
4315: LD_EXP 7
4319: PUSH
4320: LD_EXP 18
4324: PPUSH
4325: CALL_OW 302
4329: AND
4330: PUSH
4331: LD_EXP 16
4335: PPUSH
4336: LD_EXP 18
4340: PPUSH
4341: CALL_OW 296
4345: PUSH
4346: LD_INT 10
4348: LESS
4349: AND
4350: IFFALSE 4395
// begin ComMoveXY ( Cyrus , GetX ( JMM ) , GetY ( JMM ) ) ;
4352: LD_EXP 18
4356: PPUSH
4357: LD_EXP 16
4361: PPUSH
4362: CALL_OW 250
4366: PPUSH
4367: LD_EXP 16
4371: PPUSH
4372: CALL_OW 251
4376: PPUSH
4377: CALL_OW 111
// AddComTurnUnit ( Cyrus , Bobby ) ;
4381: LD_EXP 18
4385: PPUSH
4386: LD_EXP 17
4390: PPUSH
4391: CALL_OW 179
// end ; Say ( JMM , D2-JMM-1 ) ;
4395: LD_EXP 16
4399: PPUSH
4400: LD_STRING D2-JMM-1
4402: PPUSH
4403: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
4407: LD_INT 10
4409: PPUSH
4410: CALL_OW 67
// ComTurnUnit ( Bobby , JMM ) ;
4414: LD_EXP 17
4418: PPUSH
4419: LD_EXP 16
4423: PPUSH
4424: CALL_OW 119
// Say ( Bobby , D2-Bobby-1 ) ;
4428: LD_EXP 17
4432: PPUSH
4433: LD_STRING D2-Bobby-1
4435: PPUSH
4436: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
4440: LD_EXP 16
4444: PPUSH
4445: LD_STRING D2-JMM-2
4447: PPUSH
4448: CALL_OW 88
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4452: LD_EXP 17
4456: PPUSH
4457: LD_EXP 16
4461: PPUSH
4462: CALL_OW 250
4466: PPUSH
4467: LD_EXP 16
4471: PPUSH
4472: CALL_OW 251
4476: PPUSH
4477: CALL_OW 111
// Say ( Bobby , D2-Bobby-2 ) ;
4481: LD_EXP 17
4485: PPUSH
4486: LD_STRING D2-Bobby-2
4488: PPUSH
4489: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
4493: LD_EXP 16
4497: PPUSH
4498: LD_STRING D2-JMM-3
4500: PPUSH
4501: CALL_OW 88
// ComTurnUnit ( Bobby , JMM ) ;
4505: LD_EXP 17
4509: PPUSH
4510: LD_EXP 16
4514: PPUSH
4515: CALL_OW 119
// DialogueOn ;
4519: CALL_OW 6
// Say ( Bobby , D2-Bobby-3 ) ;
4523: LD_EXP 17
4527: PPUSH
4528: LD_STRING D2-Bobby-3
4530: PPUSH
4531: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
4535: LD_EXP 16
4539: PPUSH
4540: LD_STRING D2-JMM-4
4542: PPUSH
4543: CALL_OW 88
// Say ( Bobby , D2-Bobby-4 ) ;
4547: LD_EXP 17
4551: PPUSH
4552: LD_STRING D2-Bobby-4
4554: PPUSH
4555: CALL_OW 88
// Say ( JMM , D2-JMM-5 ) ;
4559: LD_EXP 16
4563: PPUSH
4564: LD_STRING D2-JMM-5
4566: PPUSH
4567: CALL_OW 88
// Say ( Bobby , D2-Bobby-5 ) ;
4571: LD_EXP 17
4575: PPUSH
4576: LD_STRING D2-Bobby-5
4578: PPUSH
4579: CALL_OW 88
// Say ( JMM , D2-JMM-6 ) ;
4583: LD_EXP 16
4587: PPUSH
4588: LD_STRING D2-JMM-6
4590: PPUSH
4591: CALL_OW 88
// if not powell_contact then
4595: LD_EXP 5
4599: NOT
4600: IFFALSE 4626
// begin Say ( Bobby , D2-Bobby-6 ) ;
4602: LD_EXP 17
4606: PPUSH
4607: LD_STRING D2-Bobby-6
4609: PPUSH
4610: CALL_OW 88
// Say ( JMM , D2-JMM-7 ) ;
4614: LD_EXP 16
4618: PPUSH
4619: LD_STRING D2-JMM-7
4621: PPUSH
4622: CALL_OW 88
// end ; DialogueOff ;
4626: CALL_OW 7
// InGameOff ;
4630: CALL_OW 9
// SetSide ( Bobby , 1 ) ;
4634: LD_EXP 17
4638: PPUSH
4639: LD_INT 1
4641: PPUSH
4642: CALL_OW 235
// ComFree ( [ JMM , Bobby ] ) ;
4646: LD_EXP 16
4650: PUSH
4651: LD_EXP 17
4655: PUSH
4656: EMPTY
4657: LIST
4658: LIST
4659: PPUSH
4660: CALL_OW 139
// bobby_in_squad := true ;
4664: LD_ADDR_EXP 4
4668: PUSH
4669: LD_INT 1
4671: ST_TO_ADDR
// if powell_contact and not cyrus_in_squad then
4672: LD_EXP 5
4676: PUSH
4677: LD_EXP 7
4681: NOT
4682: AND
4683: IFFALSE 4692
// ChangeMissionObjectives ( M2b ) ;
4685: LD_STRING M2b
4687: PPUSH
4688: CALL_OW 337
// end ;
4692: END
// every 0 0$10 trigger active_russian_dialog and Difficulty < 3 do
4693: LD_EXP 3
4697: PUSH
4698: LD_OWVAR 67
4702: PUSH
4703: LD_INT 3
4705: LESS
4706: AND
4707: IFFALSE 4741
4709: GO 4711
4711: DISABLE
// begin wait ( 1 1$00 ) ;
4712: LD_INT 2100
4714: PPUSH
4715: CALL_OW 67
// if not bobby_in_squad then
4719: LD_EXP 4
4723: NOT
4724: IFFALSE 4741
// ComMoveXY ( Bobby , 75 , 83 ) ;
4726: LD_EXP 17
4730: PPUSH
4731: LD_INT 75
4733: PPUSH
4734: LD_INT 83
4736: PPUSH
4737: CALL_OW 111
// end ;
4741: END
// every 0 0$10 trigger cyrus_in_squad and not bobby_in_squad do
4742: LD_EXP 7
4746: PUSH
4747: LD_EXP 4
4751: NOT
4752: AND
4753: IFFALSE 4782
4755: GO 4757
4757: DISABLE
// begin ComMoveXY ( Bobby , 105 , 97 ) ;
4758: LD_EXP 17
4762: PPUSH
4763: LD_INT 105
4765: PPUSH
4766: LD_INT 97
4768: PPUSH
4769: CALL_OW 111
// AddComCrawl ( Bobby ) ;
4773: LD_EXP 17
4777: PPUSH
4778: CALL_OW 197
// end ;
4782: END
// every 0 0$01 trigger IsInArea ( JMM , obstacle_area ) and GetDistUnits ( JMM , Bobby ) < 7 and bobby_in_squad do
4783: LD_EXP 16
4787: PPUSH
4788: LD_INT 6
4790: PPUSH
4791: CALL_OW 308
4795: PUSH
4796: LD_EXP 16
4800: PPUSH
4801: LD_EXP 17
4805: PPUSH
4806: CALL_OW 296
4810: PUSH
4811: LD_INT 7
4813: LESS
4814: AND
4815: PUSH
4816: LD_EXP 4
4820: AND
4821: IFFALSE 4868
4823: GO 4825
4825: DISABLE
// begin ComHold ( [ JMM , Bobby ] ) ;
4826: LD_EXP 16
4830: PUSH
4831: LD_EXP 17
4835: PUSH
4836: EMPTY
4837: LIST
4838: LIST
4839: PPUSH
4840: CALL_OW 140
// Say ( JMM , D2a-JMM-1 ) ;
4844: LD_EXP 16
4848: PPUSH
4849: LD_STRING D2a-JMM-1
4851: PPUSH
4852: CALL_OW 88
// Say ( Bobby , D2a-Bobby-1 ) ;
4856: LD_EXP 17
4860: PPUSH
4861: LD_STRING D2a-Bobby-1
4863: PPUSH
4864: CALL_OW 88
// end ;
4868: END
// every 0 0$50 trigger active_powell_dialog and not See ( 3 , JMM ) do
4869: LD_EXP 15
4873: PUSH
4874: LD_INT 3
4876: PPUSH
4877: LD_EXP 16
4881: PPUSH
4882: CALL_OW 292
4886: NOT
4887: AND
4888: IFFALSE 5059
4890: GO 4892
4892: DISABLE
// begin wait ( 0 0$5 ) ;
4893: LD_INT 175
4895: PPUSH
4896: CALL_OW 67
// InGameOn ;
4900: CALL_OW 8
// DialogueOn ;
4904: CALL_OW 6
// SayRadioNoFaceNoName ( Powell , D3-Pow-1 ) ;
4908: LD_EXP 19
4912: PPUSH
4913: LD_STRING D3-Pow-1
4915: PPUSH
4916: CALL 69051 0 2
// Say ( JMM , D3-JMM-1 ) ;
4920: LD_EXP 16
4924: PPUSH
4925: LD_STRING D3-JMM-1
4927: PPUSH
4928: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D3-Pow-2 ) ;
4932: LD_EXP 19
4936: PPUSH
4937: LD_STRING D3-Pow-2
4939: PPUSH
4940: CALL 69051 0 2
// Say ( JMM , D3-JMM-2 ) ;
4944: LD_EXP 16
4948: PPUSH
4949: LD_STRING D3-JMM-2
4951: PPUSH
4952: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D3-Pow-3 ) ;
4956: LD_EXP 19
4960: PPUSH
4961: LD_STRING D3-Pow-3
4963: PPUSH
4964: CALL 69051 0 2
// DialogueOff ;
4968: CALL_OW 7
// InGameOff ;
4972: CALL_OW 9
// powell_contact := true ;
4976: LD_ADDR_EXP 5
4980: PUSH
4981: LD_INT 1
4983: ST_TO_ADDR
// SetAreaMapShow ( exitArea , 1 ) ;
4984: LD_INT 10
4986: PPUSH
4987: LD_INT 1
4989: PPUSH
4990: CALL_OW 424
// uc_side := 4 ;
4994: LD_ADDR_OWVAR 20
4998: PUSH
4999: LD_INT 4
5001: ST_TO_ADDR
// uc_nation := 1 ;
5002: LD_ADDR_OWVAR 21
5006: PUSH
5007: LD_INT 1
5009: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
5010: LD_ADDR_EXP 19
5014: PUSH
5015: LD_STRING Powell
5017: PPUSH
5018: LD_INT 0
5020: PPUSH
5021: LD_STRING 
5023: PPUSH
5024: CALL 27430 0 3
5028: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
5029: LD_STRING M2
5031: PPUSH
5032: CALL_OW 337
// if not bobby_in_squad then
5036: LD_EXP 4
5040: NOT
5041: IFFALSE 5052
// ChangeMissionObjectives ( M2a ) else
5043: LD_STRING M2a
5045: PPUSH
5046: CALL_OW 337
5050: GO 5059
// ChangeMissionObjectives ( M2b ) ;
5052: LD_STRING M2b
5054: PPUSH
5055: CALL_OW 337
// end ;
5059: END
// every 0 0$01 trigger IsInArea ( JMM , fakeArea ) do
5060: LD_EXP 16
5064: PPUSH
5065: LD_INT 7
5067: PPUSH
5068: CALL_OW 308
5072: IFFALSE 5207
5074: GO 5076
5076: DISABLE
// begin DialogueOn ;
5077: CALL_OW 6
// SayRadioNoFaceNoName ( fakePokryshkin , D4-Rus3-1 ) ;
5081: LD_EXP 20
5085: PPUSH
5086: LD_STRING D4-Rus3-1
5088: PPUSH
5089: CALL 69051 0 2
// DialogueOff ;
5093: CALL_OW 7
// ChangeMissionObjectives ( M3a ) ;
5097: LD_STRING M3a
5099: PPUSH
5100: CALL_OW 337
// SetAreaMapShow ( fakeEnd , 1 ) ;
5104: LD_INT 11
5106: PPUSH
5107: LD_INT 1
5109: PPUSH
5110: CALL_OW 424
// Wait ( 0 0$02 ) ;
5114: LD_INT 70
5116: PPUSH
5117: CALL_OW 67
// DialogueOn ;
5121: CALL_OW 6
// SayRadioNoFace ( Powell , D4-Pow-1 ) ;
5125: LD_EXP 19
5129: PPUSH
5130: LD_STRING D4-Pow-1
5132: PPUSH
5133: CALL_OW 586
// DialogueOff ;
5137: CALL_OW 7
// ChangeMissionObjectives ( M3b ) ;
5141: LD_STRING M3b
5143: PPUSH
5144: CALL_OW 337
// case Query ( Q1 ) of 1 :
5148: LD_STRING Q1
5150: PPUSH
5151: CALL_OW 97
5155: PUSH
5156: LD_INT 1
5158: DOUBLE
5159: EQUAL
5160: IFTRUE 5164
5162: GO 5195
5164: POP
// begin macmilan_use_radio := true ;
5165: LD_ADDR_EXP 6
5169: PUSH
5170: LD_INT 1
5172: ST_TO_ADDR
// DialogueOn ;
5173: CALL_OW 6
// Say ( JMM , D4a-JMM-1 ) ;
5177: LD_EXP 16
5181: PPUSH
5182: LD_STRING D4a-JMM-1
5184: PPUSH
5185: CALL_OW 88
// DialogueOff ;
5189: CALL_OW 7
// end ; 2 :
5193: GO 5207
5195: LD_INT 2
5197: DOUBLE
5198: EQUAL
5199: IFTRUE 5203
5201: GO 5206
5203: POP
// ; end ;
5204: GO 5207
5206: POP
// end ;
5207: END
// every 0 0$02 trigger GetDistUnits ( JMM , Cyrus ) < 8 and IsOk ( Cyrus ) do
5208: LD_EXP 16
5212: PPUSH
5213: LD_EXP 18
5217: PPUSH
5218: CALL_OW 296
5222: PUSH
5223: LD_INT 8
5225: LESS
5226: PUSH
5227: LD_EXP 18
5231: PPUSH
5232: CALL_OW 302
5236: AND
5237: IFFALSE 5528
5239: GO 5241
5241: DISABLE
// begin InGameOn ;
5242: CALL_OW 8
// ComMoveXY ( JMM , GetX ( Cyrus ) , GetY ( Cyrus ) ) ;
5246: LD_EXP 16
5250: PPUSH
5251: LD_EXP 18
5255: PPUSH
5256: CALL_OW 250
5260: PPUSH
5261: LD_EXP 18
5265: PPUSH
5266: CALL_OW 251
5270: PPUSH
5271: CALL_OW 111
// if IsOk ( Bobby ) and bobby_in_squad then
5275: LD_EXP 17
5279: PPUSH
5280: CALL_OW 302
5284: PUSH
5285: LD_EXP 4
5289: AND
5290: IFFALSE 5321
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
5292: LD_EXP 17
5296: PPUSH
5297: LD_EXP 16
5301: PPUSH
5302: CALL_OW 250
5306: PPUSH
5307: LD_EXP 16
5311: PPUSH
5312: CALL_OW 251
5316: PPUSH
5317: CALL_OW 111
// Say ( JMM , D5-JMM-1 ) ;
5321: LD_EXP 16
5325: PPUSH
5326: LD_STRING D5-JMM-1
5328: PPUSH
5329: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
5333: LD_INT 10
5335: PPUSH
5336: CALL_OW 67
// ComTurnUnit ( JMM , Cyrus ) ;
5340: LD_EXP 16
5344: PPUSH
5345: LD_EXP 18
5349: PPUSH
5350: CALL_OW 119
// ComWalk ( Cyrus ) ;
5354: LD_EXP 18
5358: PPUSH
5359: CALL_OW 138
// ComTurnUnit ( Cyrus , JMM ) ;
5363: LD_EXP 18
5367: PPUSH
5368: LD_EXP 16
5372: PPUSH
5373: CALL_OW 119
// Say ( Cyrus , D5-Cyrus-1 ) ;
5377: LD_EXP 18
5381: PPUSH
5382: LD_STRING D5-Cyrus-1
5384: PPUSH
5385: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5389: LD_EXP 17
5393: PPUSH
5394: CALL_OW 302
5398: PUSH
5399: LD_EXP 4
5403: AND
5404: IFFALSE 5444
// begin ComTurnUnit ( Bobby , Cyrus ) ;
5406: LD_EXP 17
5410: PPUSH
5411: LD_EXP 18
5415: PPUSH
5416: CALL_OW 119
// Say ( Bobby , D5-Bobby-1 ) ;
5420: LD_EXP 17
5424: PPUSH
5425: LD_STRING D5-Bobby-1
5427: PPUSH
5428: CALL_OW 88
// Say ( JMM , D5-JMM-2 ) ;
5432: LD_EXP 16
5436: PPUSH
5437: LD_STRING D5-JMM-2
5439: PPUSH
5440: CALL_OW 88
// end ; InGameOff ;
5444: CALL_OW 9
// cyrus_in_squad := true ;
5448: LD_ADDR_EXP 7
5452: PUSH
5453: LD_INT 1
5455: ST_TO_ADDR
// SetSide ( Cyrus , 1 ) ;
5456: LD_EXP 18
5460: PPUSH
5461: LD_INT 1
5463: PPUSH
5464: CALL_OW 235
// if powell_contact and not bobby_in_squad then
5468: LD_EXP 5
5472: PUSH
5473: LD_EXP 4
5477: NOT
5478: AND
5479: IFFALSE 5488
// ChangeMissionObjectives ( M2b ) ;
5481: LD_STRING M2b
5483: PPUSH
5484: CALL_OW 337
// if not bobby_in_squad and GetSide ( Bobby ) = 4 and IsOk ( Bobby ) then
5488: LD_EXP 4
5492: NOT
5493: PUSH
5494: LD_EXP 17
5498: PPUSH
5499: CALL_OW 255
5503: PUSH
5504: LD_INT 4
5506: EQUAL
5507: AND
5508: PUSH
5509: LD_EXP 17
5513: PPUSH
5514: CALL_OW 302
5518: AND
5519: IFFALSE 5528
// SetAchievement ( ACH_CYRUS ) ;
5521: LD_STRING ACH_CYRUS
5523: PPUSH
5524: CALL_OW 543
// end ;
5528: END
// every 0 0$01 trigger bobby_in_squad and cyrus_in_squad do
5529: LD_EXP 4
5533: PUSH
5534: LD_EXP 7
5538: AND
5539: IFFALSE 5551
5541: GO 5543
5543: DISABLE
// ChangeMissionObjectives ( M2c ) ;
5544: LD_STRING M2c
5546: PPUSH
5547: CALL_OW 337
5551: END
// every 0 0$01 trigger IsInArea ( JMM , trap ) do
5552: LD_EXP 16
5556: PPUSH
5557: LD_INT 8
5559: PPUSH
5560: CALL_OW 308
5564: IFFALSE 5616
5566: GO 5568
5568: DISABLE
// begin macmilan_in_trap := true ;
5569: LD_ADDR_EXP 9
5573: PUSH
5574: LD_INT 1
5576: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
5577: LD_INT 35
5579: PPUSH
5580: CALL_OW 67
// DialogueOn ;
5584: CALL_OW 6
// Say ( Pokryshkin , D5-Pok-1 ) ;
5588: LD_EXP 27
5592: PPUSH
5593: LD_STRING D5-Pok-1
5595: PPUSH
5596: CALL_OW 88
// DialogueOff ;
5600: CALL_OW 7
// Say ( JMM , D4b-JMM-1 ) ;
5604: LD_EXP 16
5608: PPUSH
5609: LD_STRING D4b-JMM-1
5611: PPUSH
5612: CALL_OW 88
// end ;
5616: END
// every 0 0$01 trigger ( IsInArea ( JMM , endRoadArea ) and GetDistUnits ( JMM , russian_meta_guards [ russian_meta_guards ] ) < 12 ) or UnitFilter ( russian_meta_guards , [ f_not , [ f_lives , 990 ] ] ) do var i , hp ;
5617: LD_EXP 16
5621: PPUSH
5622: LD_INT 13
5624: PPUSH
5625: CALL_OW 308
5629: PUSH
5630: LD_EXP 16
5634: PPUSH
5635: LD_EXP 24
5639: PUSH
5640: LD_EXP 24
5644: ARRAY
5645: PPUSH
5646: CALL_OW 296
5650: PUSH
5651: LD_INT 12
5653: LESS
5654: AND
5655: PUSH
5656: LD_EXP 24
5660: PPUSH
5661: LD_INT 3
5663: PUSH
5664: LD_INT 24
5666: PUSH
5667: LD_INT 990
5669: PUSH
5670: EMPTY
5671: LIST
5672: LIST
5673: PUSH
5674: EMPTY
5675: LIST
5676: LIST
5677: PPUSH
5678: CALL_OW 72
5682: OR
5683: IFFALSE 5921
5685: GO 5687
5687: DISABLE
5688: LD_INT 0
5690: PPUSH
5691: PPUSH
// begin hp := [ 300 , 250 , 200 , 150 ] [ Difficulty ] ;
5692: LD_ADDR_VAR 0 2
5696: PUSH
5697: LD_INT 300
5699: PUSH
5700: LD_INT 250
5702: PUSH
5703: LD_INT 200
5705: PUSH
5706: LD_INT 150
5708: PUSH
5709: EMPTY
5710: LIST
5711: LIST
5712: LIST
5713: LIST
5714: PUSH
5715: LD_OWVAR 67
5719: ARRAY
5720: ST_TO_ADDR
// for i in russian_meta_guards do
5721: LD_ADDR_VAR 0 1
5725: PUSH
5726: LD_EXP 24
5730: PUSH
5731: FOR_IN
5732: IFFALSE 5772
// if IsOk ( i ) then
5734: LD_VAR 0 1
5738: PPUSH
5739: CALL_OW 302
5743: IFFALSE 5770
// SetLives ( i , GetLives ( i ) - hp ) ;
5745: LD_VAR 0 1
5749: PPUSH
5750: LD_VAR 0 1
5754: PPUSH
5755: CALL_OW 256
5759: PUSH
5760: LD_VAR 0 2
5764: MINUS
5765: PPUSH
5766: CALL_OW 234
5770: GO 5731
5772: POP
5773: POP
// DialogueOn ;
5774: CALL_OW 6
// Say ( russian_meta_guards [ russian_meta_guards ] , D6-FRus1-1 ) ;
5778: LD_EXP 24
5782: PUSH
5783: LD_EXP 24
5787: ARRAY
5788: PPUSH
5789: LD_STRING D6-FRus1-1
5791: PPUSH
5792: CALL_OW 88
// Say ( JMM , D6-JMM-1 ) ;
5796: LD_EXP 16
5800: PPUSH
5801: LD_STRING D6-JMM-1
5803: PPUSH
5804: CALL_OW 88
// if IsOk ( Cyrus ) and cyrus_in_squad then
5808: LD_EXP 18
5812: PPUSH
5813: CALL_OW 302
5817: PUSH
5818: LD_EXP 7
5822: AND
5823: IFFALSE 5837
// Say ( Cyrus , D6-Cyrus-1 ) ;
5825: LD_EXP 18
5829: PPUSH
5830: LD_STRING D6-Cyrus-1
5832: PPUSH
5833: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5837: LD_EXP 17
5841: PPUSH
5842: CALL_OW 302
5846: PUSH
5847: LD_EXP 4
5851: AND
5852: IFFALSE 5866
// Say ( Bobby , D6-Bobby-1 ) ;
5854: LD_EXP 17
5858: PPUSH
5859: LD_STRING D6-Bobby-1
5861: PPUSH
5862: CALL_OW 88
// DialogueOff ;
5866: CALL_OW 7
// Wait ( [ 0 0$04 , 0 0$03 , 0 0$02 , 0 0$02 ] [ Difficulty ] ) ;
5870: LD_INT 140
5872: PUSH
5873: LD_INT 105
5875: PUSH
5876: LD_INT 70
5878: PUSH
5879: LD_INT 70
5881: PUSH
5882: EMPTY
5883: LIST
5884: LIST
5885: LIST
5886: LIST
5887: PUSH
5888: LD_OWVAR 67
5892: ARRAY
5893: PPUSH
5894: CALL_OW 67
// meta_action := true ;
5898: LD_ADDR_EXP 10
5902: PUSH
5903: LD_INT 1
5905: ST_TO_ADDR
// ComAgressiveMove ( russian_meta_guards , 94 , 8 ) ;
5906: LD_EXP 24
5910: PPUSH
5911: LD_INT 94
5913: PPUSH
5914: LD_INT 8
5916: PPUSH
5917: CALL_OW 114
// end ;
5921: PPOPN 2
5923: END
// every 0 0$1 trigger IsInArea ( JMM , secretPassage ) do
5924: LD_EXP 16
5928: PPUSH
5929: LD_INT 14
5931: PPUSH
5932: CALL_OW 308
5936: IFFALSE 5948
5938: GO 5940
5940: DISABLE
// SetAchievement ( ACH_SECRET ) ;
5941: LD_STRING ACH_SECRET
5943: PPUSH
5944: CALL_OW 543
5948: END
// every 0 0$01 trigger GetDistUnitXY ( JMM , 93 , 1 ) < 5 and FilterAllUnits ( [ f_side , 1 ] ) > 1 do
5949: LD_EXP 16
5953: PPUSH
5954: LD_INT 93
5956: PPUSH
5957: LD_INT 1
5959: PPUSH
5960: CALL_OW 297
5964: PUSH
5965: LD_INT 5
5967: LESS
5968: PUSH
5969: LD_INT 22
5971: PUSH
5972: LD_INT 1
5974: PUSH
5975: EMPTY
5976: LIST
5977: LIST
5978: PPUSH
5979: CALL_OW 69
5983: PUSH
5984: LD_INT 1
5986: GREATER
5987: AND
5988: IFFALSE 6005
5990: GO 5992
5992: DISABLE
// Say ( JMM , D6a-JMM-1 ) ;
5993: LD_EXP 16
5997: PPUSH
5998: LD_STRING D6a-JMM-1
6000: PPUSH
6001: CALL_OW 88
6005: END
// every 0 0$01 trigger IsInArea ( Bobby , exitArea ) or IsInArea ( Bobby , hiddenEnd ) do
6006: LD_EXP 17
6010: PPUSH
6011: LD_INT 10
6013: PPUSH
6014: CALL_OW 308
6018: PUSH
6019: LD_EXP 17
6023: PPUSH
6024: LD_INT 12
6026: PPUSH
6027: CALL_OW 308
6031: OR
6032: IFFALSE 6088
6034: GO 6036
6036: DISABLE
// begin bobby_saved := true ;
6037: LD_ADDR_EXP 12
6041: PUSH
6042: LD_INT 1
6044: ST_TO_ADDR
// SaveVariable ( GetLives ( Bobby ) , 01_BobbyLifePoints_1 ) ;
6045: LD_EXP 17
6049: PPUSH
6050: CALL_OW 256
6054: PPUSH
6055: LD_STRING 01_BobbyLifePoints_1
6057: PPUSH
6058: CALL_OW 39
// RemoveUnit ( Bobby ) ;
6062: LD_EXP 17
6066: PPUSH
6067: CALL_OW 64
// AddMedal ( Bobby , 1 ) ;
6071: LD_STRING Bobby
6073: PPUSH
6074: LD_INT 1
6076: PPUSH
6077: CALL_OW 101
// ToLua ( enableBioCharacter(BIO_BOBBY) ) ;
6081: LD_STRING enableBioCharacter(BIO_BOBBY)
6083: PPUSH
6084: CALL_OW 559
// end ;
6088: END
// every 0 0$01 trigger IsInArea ( Cyrus , exitArea ) or IsInArea ( Cyrus , hiddenEnd ) do
6089: LD_EXP 18
6093: PPUSH
6094: LD_INT 10
6096: PPUSH
6097: CALL_OW 308
6101: PUSH
6102: LD_EXP 18
6106: PPUSH
6107: LD_INT 12
6109: PPUSH
6110: CALL_OW 308
6114: OR
6115: IFFALSE 6171
6117: GO 6119
6119: DISABLE
// begin cyrus_saved := true ;
6120: LD_ADDR_EXP 13
6124: PUSH
6125: LD_INT 1
6127: ST_TO_ADDR
// SaveVariable ( GetLives ( Cyrus ) , 01_CyrusLifePoints_1 ) ;
6128: LD_EXP 18
6132: PPUSH
6133: CALL_OW 256
6137: PPUSH
6138: LD_STRING 01_CyrusLifePoints_1
6140: PPUSH
6141: CALL_OW 39
// RemoveUnit ( Cyrus ) ;
6145: LD_EXP 18
6149: PPUSH
6150: CALL_OW 64
// AddMedal ( Cyrus , 1 ) ;
6154: LD_STRING Cyrus
6156: PPUSH
6157: LD_INT 1
6159: PPUSH
6160: CALL_OW 101
// ToLua ( enableBioCharacter(BIO_CYRUS) ) ;
6164: LD_STRING enableBioCharacter(BIO_CYRUS)
6166: PPUSH
6167: CALL_OW 559
// end ;
6171: END
// every 0 0$01 trigger IsInArea ( JMM , exitArea ) or IsInArea ( JMM , hiddenEnd ) do var i , to_reward , wait_for_them , m1 , m2 , m3 ;
6172: LD_EXP 16
6176: PPUSH
6177: LD_INT 10
6179: PPUSH
6180: CALL_OW 308
6184: PUSH
6185: LD_EXP 16
6189: PPUSH
6190: LD_INT 12
6192: PPUSH
6193: CALL_OW 308
6197: OR
6198: IFFALSE 6827
6200: GO 6202
6202: DISABLE
6203: LD_INT 0
6205: PPUSH
6206: PPUSH
6207: PPUSH
6208: PPUSH
6209: PPUSH
6210: PPUSH
// begin if macmilan_use_radio then
6211: LD_EXP 6
6215: IFFALSE 6224
// SetAchievement ( ACH_RADIO ) ;
6217: LD_STRING ACH_RADIO
6219: PPUSH
6220: CALL_OW 543
// if ( not cyrus_saved and cyrus_in_squad and IsOk ( Cyrus ) ) or ( not bobby_saved and bobby_in_squad and IsOk ( Bobby ) ) then
6224: LD_EXP 13
6228: NOT
6229: PUSH
6230: LD_EXP 7
6234: AND
6235: PUSH
6236: LD_EXP 18
6240: PPUSH
6241: CALL_OW 302
6245: AND
6246: PUSH
6247: LD_EXP 12
6251: NOT
6252: PUSH
6253: LD_EXP 4
6257: AND
6258: PUSH
6259: LD_EXP 17
6263: PPUSH
6264: CALL_OW 302
6268: AND
6269: OR
6270: IFFALSE 6311
// case Query ( Q2 ) of 1 :
6272: LD_STRING Q2
6274: PPUSH
6275: CALL_OW 97
6279: PUSH
6280: LD_INT 1
6282: DOUBLE
6283: EQUAL
6284: IFTRUE 6288
6286: GO 6299
6288: POP
// wait_for_them := true ; 2 :
6289: LD_ADDR_VAR 0 3
6293: PUSH
6294: LD_INT 1
6296: ST_TO_ADDR
6297: GO 6311
6299: LD_INT 2
6301: DOUBLE
6302: EQUAL
6303: IFTRUE 6307
6305: GO 6310
6307: POP
// ; end ;
6308: GO 6311
6310: POP
// if wait_for_them then
6311: LD_VAR 0 3
6315: IFFALSE 6428
// repeat wait ( 0 0$01 ) ;
6317: LD_INT 35
6319: PPUSH
6320: CALL_OW 67
// until ( cyrus_saved and bobby_saved ) or ( cyrus_saved and ( not bobby_in_squad or IsDying ( Bobby ) or IsDead ( Bobby ) ) ) or ( bobby_saved and ( not cyrus_in_squad or IsDying ( Cyrus ) or IsDead ( Cyrus ) ) ) or ( IsDead ( Bobby ) and IsDead ( Cyrus ) ) ;
6324: LD_EXP 13
6328: PUSH
6329: LD_EXP 12
6333: AND
6334: PUSH
6335: LD_EXP 13
6339: PUSH
6340: LD_EXP 4
6344: NOT
6345: PUSH
6346: LD_EXP 17
6350: PPUSH
6351: CALL_OW 303
6355: OR
6356: PUSH
6357: LD_EXP 17
6361: PPUSH
6362: CALL_OW 301
6366: OR
6367: AND
6368: OR
6369: PUSH
6370: LD_EXP 12
6374: PUSH
6375: LD_EXP 7
6379: NOT
6380: PUSH
6381: LD_EXP 18
6385: PPUSH
6386: CALL_OW 303
6390: OR
6391: PUSH
6392: LD_EXP 18
6396: PPUSH
6397: CALL_OW 301
6401: OR
6402: AND
6403: OR
6404: PUSH
6405: LD_EXP 17
6409: PPUSH
6410: CALL_OW 301
6414: PUSH
6415: LD_EXP 18
6419: PPUSH
6420: CALL_OW 301
6424: AND
6425: OR
6426: IFFALSE 6317
// SaveVariable ( GetLives ( JMM ) , 01_JMMLifePoints_1 ) ;
6428: LD_EXP 16
6432: PPUSH
6433: CALL_OW 256
6437: PPUSH
6438: LD_STRING 01_JMMLifePoints_1
6440: PPUSH
6441: CALL_OW 39
// RemoveUnit ( JMM ) ;
6445: LD_EXP 16
6449: PPUSH
6450: CALL_OW 64
// to_reward := [ JMM ] ;
6454: LD_ADDR_VAR 0 2
6458: PUSH
6459: LD_EXP 16
6463: PUSH
6464: EMPTY
6465: LIST
6466: ST_TO_ADDR
// if bobby_saved then
6467: LD_EXP 12
6471: IFFALSE 6489
// to_reward := to_reward ^ Bobby ;
6473: LD_ADDR_VAR 0 2
6477: PUSH
6478: LD_VAR 0 2
6482: PUSH
6483: LD_EXP 17
6487: ADD
6488: ST_TO_ADDR
// if cyrus_saved then
6489: LD_EXP 13
6493: IFFALSE 6511
// to_reward := to_reward ^ Cyrus ;
6495: LD_ADDR_VAR 0 2
6499: PUSH
6500: LD_VAR 0 2
6504: PUSH
6505: LD_EXP 18
6509: ADD
6510: ST_TO_ADDR
// m1 := true ;
6511: LD_ADDR_VAR 0 4
6515: PUSH
6516: LD_INT 1
6518: ST_TO_ADDR
// m2 := bobby_saved ;
6519: LD_ADDR_VAR 0 5
6523: PUSH
6524: LD_EXP 12
6528: ST_TO_ADDR
// m3 := cyrus_saved ;
6529: LD_ADDR_VAR 0 6
6533: PUSH
6534: LD_EXP 13
6538: ST_TO_ADDR
// AddMedal ( JMM , 1 ) ;
6539: LD_STRING JMM
6541: PPUSH
6542: LD_INT 1
6544: PPUSH
6545: CALL_OW 101
// if not bobby_in_squad then
6549: LD_EXP 4
6553: NOT
6554: IFFALSE 6567
// AddMedal ( Bobby , - 1 ) ;
6556: LD_STRING Bobby
6558: PPUSH
6559: LD_INT 1
6561: NEG
6562: PPUSH
6563: CALL_OW 101
// if not bobby_saved and ( IsDying ( Bobby ) or IsDead ( Bobby ) ) then
6567: LD_EXP 12
6571: NOT
6572: PUSH
6573: LD_EXP 17
6577: PPUSH
6578: CALL_OW 303
6582: PUSH
6583: LD_EXP 17
6587: PPUSH
6588: CALL_OW 301
6592: OR
6593: AND
6594: IFFALSE 6607
// AddMedal ( Bobby , - 2 ) ;
6596: LD_STRING Bobby
6598: PPUSH
6599: LD_INT 2
6601: NEG
6602: PPUSH
6603: CALL_OW 101
// if not cyrus_in_squad then
6607: LD_EXP 7
6611: NOT
6612: IFFALSE 6625
// AddMedal ( Cyrus , - 1 ) ;
6614: LD_STRING Cyrus
6616: PPUSH
6617: LD_INT 1
6619: NEG
6620: PPUSH
6621: CALL_OW 101
// if not cyrus_saved and ( IsDying ( Cyrus ) or IsDead ( Cyrus ) ) then
6625: LD_EXP 13
6629: NOT
6630: PUSH
6631: LD_EXP 18
6635: PPUSH
6636: CALL_OW 303
6640: PUSH
6641: LD_EXP 18
6645: PPUSH
6646: CALL_OW 301
6650: OR
6651: AND
6652: IFFALSE 6665
// AddMedal ( Cyrus , - 2 ) ;
6654: LD_STRING Cyrus
6656: PPUSH
6657: LD_INT 2
6659: NEG
6660: PPUSH
6661: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 and m3 then
6665: LD_OWVAR 67
6669: PUSH
6670: LD_INT 3
6672: GREATEREQUAL
6673: PUSH
6674: LD_VAR 0 4
6678: AND
6679: PUSH
6680: LD_VAR 0 5
6684: AND
6685: PUSH
6686: LD_VAR 0 6
6690: AND
6691: IFFALSE 6703
// SetAchievementEX ( ACH_AMER , 1 ) ;
6693: LD_STRING ACH_AMER
6695: PPUSH
6696: LD_INT 1
6698: PPUSH
6699: CALL_OW 564
// GiveMedals ( MAIN ) ;
6703: LD_STRING MAIN
6705: PPUSH
6706: CALL_OW 102
// RewardPeople ( to_reward ) ;
6710: LD_VAR 0 2
6714: PPUSH
6715: CALL_OW 43
// if bobby_saved then
6719: LD_EXP 12
6723: IFFALSE 6743
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
6725: LD_EXP 17
6729: PPUSH
6730: LD_EXP 2
6734: PUSH
6735: LD_STRING Bobby
6737: STR
6738: PPUSH
6739: CALL_OW 38
// if cyrus_saved then
6743: LD_EXP 13
6747: IFFALSE 6767
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
6749: LD_EXP 18
6753: PPUSH
6754: LD_EXP 2
6758: PUSH
6759: LD_STRING Cyrus
6761: STR
6762: PPUSH
6763: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
6767: LD_EXP 16
6771: PPUSH
6772: LD_EXP 2
6776: PUSH
6777: LD_STRING JMM
6779: STR
6780: PPUSH
6781: CALL_OW 38
// if tick <= 3 3$00 then
6785: LD_OWVAR 1
6789: PUSH
6790: LD_INT 6300
6792: LESSEQUAL
6793: IFFALSE 6802
// SetAchievement ( ACH_ASPEED_1 ) ;
6795: LD_STRING ACH_ASPEED_1
6797: PPUSH
6798: CALL_OW 543
// ToLua ( enableBioCharacter(BIO_JMM) ) ;
6802: LD_STRING enableBioCharacter(BIO_JMM)
6804: PPUSH
6805: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_JOAN) ) ;
6809: LD_STRING enableBioCharacter(BIO_JOAN)
6811: PPUSH
6812: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_BARN) ) ;
6816: LD_STRING enableBioCharacter(BIO_BARN)
6818: PPUSH
6819: CALL_OW 559
// YouWin ;
6823: CALL_OW 103
// end ; end_of_file
6827: PPOPN 6
6829: END
// on UnitGoesToRed ( un ) do begin if un = JMM then
6830: LD_VAR 0 1
6834: PUSH
6835: LD_EXP 16
6839: EQUAL
6840: IFFALSE 6849
// YouLost ( JMM ) ;
6842: LD_STRING JMM
6844: PPUSH
6845: CALL_OW 104
// end ;
6849: PPOPN 1
6851: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
6852: LD_VAR 0 1
6856: PPUSH
6857: LD_VAR 0 2
6861: PPUSH
6862: CALL 22822 0 2
// end ;
6866: PPOPN 2
6868: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
6869: LD_VAR 0 1
6873: PPUSH
6874: CALL 22702 0 1
// if un = JMM then
6878: LD_VAR 0 1
6882: PUSH
6883: LD_EXP 16
6887: EQUAL
6888: IFFALSE 6897
// YouLost ( JMM ) ;
6890: LD_STRING JMM
6892: PPUSH
6893: CALL_OW 104
// end ; end_of_file end_of_file
6897: PPOPN 1
6899: END
// export globalGameSaveCounter ; every 0 0$1 do
6900: GO 6902
6902: DISABLE
// begin enable ;
6903: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
6904: LD_STRING updateTimer(
6906: PUSH
6907: LD_OWVAR 1
6911: STR
6912: PUSH
6913: LD_STRING );
6915: STR
6916: PPUSH
6917: CALL_OW 559
// end ;
6921: END
// every 0 0$1 do
6922: GO 6924
6924: DISABLE
// begin globalGameSaveCounter := 0 ;
6925: LD_ADDR_EXP 28
6929: PUSH
6930: LD_INT 0
6932: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
6933: LD_STRING setGameSaveCounter(0)
6935: PPUSH
6936: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
6940: LD_STRING initStreamRollete();
6942: PPUSH
6943: CALL_OW 559
// InitStreamMode ;
6947: CALL 8273 0 0
// DefineStreamItems ( false ) ;
6951: LD_INT 0
6953: PPUSH
6954: CALL 8737 0 1
// end ;
6958: END
// export function SOS_MapStart ( ) ; begin
6959: LD_INT 0
6961: PPUSH
// if streamModeActive then
6962: LD_EXP 29
6966: IFFALSE 6975
// DefineStreamItems ( true ) ;
6968: LD_INT 1
6970: PPUSH
6971: CALL 8737 0 1
// UpdateLuaVariables ( ) ;
6975: CALL 6992 0 0
// UpdateFactoryWaypoints ( ) ;
6979: CALL 21606 0 0
// UpdateWarehouseGatheringPoints ( ) ;
6983: CALL 21863 0 0
// end ;
6987: LD_VAR 0 1
6991: RET
// function UpdateLuaVariables ( ) ; begin
6992: LD_INT 0
6994: PPUSH
// if globalGameSaveCounter then
6995: LD_EXP 28
6999: IFFALSE 7033
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
7001: LD_ADDR_EXP 28
7005: PUSH
7006: LD_EXP 28
7010: PPUSH
7011: CALL 66493 0 1
7015: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
7016: LD_STRING setGameSaveCounter(
7018: PUSH
7019: LD_EXP 28
7023: STR
7024: PUSH
7025: LD_STRING )
7027: STR
7028: PPUSH
7029: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
7033: LD_STRING setGameDifficulty(
7035: PUSH
7036: LD_OWVAR 67
7040: STR
7041: PUSH
7042: LD_STRING )
7044: STR
7045: PPUSH
7046: CALL_OW 559
// end ;
7050: LD_VAR 0 1
7054: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7055: LD_INT 0
7057: PPUSH
// if p2 = stream_mode then
7058: LD_VAR 0 2
7062: PUSH
7063: LD_INT 100
7065: EQUAL
7066: IFFALSE 8069
// begin if not StreamModeActive then
7068: LD_EXP 29
7072: NOT
7073: IFFALSE 7083
// StreamModeActive := true ;
7075: LD_ADDR_EXP 29
7079: PUSH
7080: LD_INT 1
7082: ST_TO_ADDR
// if p3 = 0 then
7083: LD_VAR 0 3
7087: PUSH
7088: LD_INT 0
7090: EQUAL
7091: IFFALSE 7097
// InitStreamMode ;
7093: CALL 8273 0 0
// if p3 = 1 then
7097: LD_VAR 0 3
7101: PUSH
7102: LD_INT 1
7104: EQUAL
7105: IFFALSE 7115
// sRocket := true ;
7107: LD_ADDR_EXP 34
7111: PUSH
7112: LD_INT 1
7114: ST_TO_ADDR
// if p3 = 2 then
7115: LD_VAR 0 3
7119: PUSH
7120: LD_INT 2
7122: EQUAL
7123: IFFALSE 7133
// sSpeed := true ;
7125: LD_ADDR_EXP 33
7129: PUSH
7130: LD_INT 1
7132: ST_TO_ADDR
// if p3 = 3 then
7133: LD_VAR 0 3
7137: PUSH
7138: LD_INT 3
7140: EQUAL
7141: IFFALSE 7151
// sEngine := true ;
7143: LD_ADDR_EXP 35
7147: PUSH
7148: LD_INT 1
7150: ST_TO_ADDR
// if p3 = 4 then
7151: LD_VAR 0 3
7155: PUSH
7156: LD_INT 4
7158: EQUAL
7159: IFFALSE 7169
// sSpec := true ;
7161: LD_ADDR_EXP 32
7165: PUSH
7166: LD_INT 1
7168: ST_TO_ADDR
// if p3 = 5 then
7169: LD_VAR 0 3
7173: PUSH
7174: LD_INT 5
7176: EQUAL
7177: IFFALSE 7187
// sLevel := true ;
7179: LD_ADDR_EXP 36
7183: PUSH
7184: LD_INT 1
7186: ST_TO_ADDR
// if p3 = 6 then
7187: LD_VAR 0 3
7191: PUSH
7192: LD_INT 6
7194: EQUAL
7195: IFFALSE 7205
// sArmoury := true ;
7197: LD_ADDR_EXP 37
7201: PUSH
7202: LD_INT 1
7204: ST_TO_ADDR
// if p3 = 7 then
7205: LD_VAR 0 3
7209: PUSH
7210: LD_INT 7
7212: EQUAL
7213: IFFALSE 7223
// sRadar := true ;
7215: LD_ADDR_EXP 38
7219: PUSH
7220: LD_INT 1
7222: ST_TO_ADDR
// if p3 = 8 then
7223: LD_VAR 0 3
7227: PUSH
7228: LD_INT 8
7230: EQUAL
7231: IFFALSE 7241
// sBunker := true ;
7233: LD_ADDR_EXP 39
7237: PUSH
7238: LD_INT 1
7240: ST_TO_ADDR
// if p3 = 9 then
7241: LD_VAR 0 3
7245: PUSH
7246: LD_INT 9
7248: EQUAL
7249: IFFALSE 7259
// sHack := true ;
7251: LD_ADDR_EXP 40
7255: PUSH
7256: LD_INT 1
7258: ST_TO_ADDR
// if p3 = 10 then
7259: LD_VAR 0 3
7263: PUSH
7264: LD_INT 10
7266: EQUAL
7267: IFFALSE 7277
// sFire := true ;
7269: LD_ADDR_EXP 41
7273: PUSH
7274: LD_INT 1
7276: ST_TO_ADDR
// if p3 = 11 then
7277: LD_VAR 0 3
7281: PUSH
7282: LD_INT 11
7284: EQUAL
7285: IFFALSE 7295
// sRefresh := true ;
7287: LD_ADDR_EXP 42
7291: PUSH
7292: LD_INT 1
7294: ST_TO_ADDR
// if p3 = 12 then
7295: LD_VAR 0 3
7299: PUSH
7300: LD_INT 12
7302: EQUAL
7303: IFFALSE 7313
// sExp := true ;
7305: LD_ADDR_EXP 43
7309: PUSH
7310: LD_INT 1
7312: ST_TO_ADDR
// if p3 = 13 then
7313: LD_VAR 0 3
7317: PUSH
7318: LD_INT 13
7320: EQUAL
7321: IFFALSE 7331
// sDepot := true ;
7323: LD_ADDR_EXP 44
7327: PUSH
7328: LD_INT 1
7330: ST_TO_ADDR
// if p3 = 14 then
7331: LD_VAR 0 3
7335: PUSH
7336: LD_INT 14
7338: EQUAL
7339: IFFALSE 7349
// sFlag := true ;
7341: LD_ADDR_EXP 45
7345: PUSH
7346: LD_INT 1
7348: ST_TO_ADDR
// if p3 = 15 then
7349: LD_VAR 0 3
7353: PUSH
7354: LD_INT 15
7356: EQUAL
7357: IFFALSE 7367
// sKamikadze := true ;
7359: LD_ADDR_EXP 53
7363: PUSH
7364: LD_INT 1
7366: ST_TO_ADDR
// if p3 = 16 then
7367: LD_VAR 0 3
7371: PUSH
7372: LD_INT 16
7374: EQUAL
7375: IFFALSE 7385
// sTroll := true ;
7377: LD_ADDR_EXP 54
7381: PUSH
7382: LD_INT 1
7384: ST_TO_ADDR
// if p3 = 17 then
7385: LD_VAR 0 3
7389: PUSH
7390: LD_INT 17
7392: EQUAL
7393: IFFALSE 7403
// sSlow := true ;
7395: LD_ADDR_EXP 55
7399: PUSH
7400: LD_INT 1
7402: ST_TO_ADDR
// if p3 = 18 then
7403: LD_VAR 0 3
7407: PUSH
7408: LD_INT 18
7410: EQUAL
7411: IFFALSE 7421
// sLack := true ;
7413: LD_ADDR_EXP 56
7417: PUSH
7418: LD_INT 1
7420: ST_TO_ADDR
// if p3 = 19 then
7421: LD_VAR 0 3
7425: PUSH
7426: LD_INT 19
7428: EQUAL
7429: IFFALSE 7439
// sTank := true ;
7431: LD_ADDR_EXP 58
7435: PUSH
7436: LD_INT 1
7438: ST_TO_ADDR
// if p3 = 20 then
7439: LD_VAR 0 3
7443: PUSH
7444: LD_INT 20
7446: EQUAL
7447: IFFALSE 7457
// sRemote := true ;
7449: LD_ADDR_EXP 59
7453: PUSH
7454: LD_INT 1
7456: ST_TO_ADDR
// if p3 = 21 then
7457: LD_VAR 0 3
7461: PUSH
7462: LD_INT 21
7464: EQUAL
7465: IFFALSE 7475
// sPowell := true ;
7467: LD_ADDR_EXP 60
7471: PUSH
7472: LD_INT 1
7474: ST_TO_ADDR
// if p3 = 22 then
7475: LD_VAR 0 3
7479: PUSH
7480: LD_INT 22
7482: EQUAL
7483: IFFALSE 7493
// sTeleport := true ;
7485: LD_ADDR_EXP 63
7489: PUSH
7490: LD_INT 1
7492: ST_TO_ADDR
// if p3 = 23 then
7493: LD_VAR 0 3
7497: PUSH
7498: LD_INT 23
7500: EQUAL
7501: IFFALSE 7511
// sOilTower := true ;
7503: LD_ADDR_EXP 65
7507: PUSH
7508: LD_INT 1
7510: ST_TO_ADDR
// if p3 = 24 then
7511: LD_VAR 0 3
7515: PUSH
7516: LD_INT 24
7518: EQUAL
7519: IFFALSE 7529
// sShovel := true ;
7521: LD_ADDR_EXP 66
7525: PUSH
7526: LD_INT 1
7528: ST_TO_ADDR
// if p3 = 25 then
7529: LD_VAR 0 3
7533: PUSH
7534: LD_INT 25
7536: EQUAL
7537: IFFALSE 7547
// sSheik := true ;
7539: LD_ADDR_EXP 67
7543: PUSH
7544: LD_INT 1
7546: ST_TO_ADDR
// if p3 = 26 then
7547: LD_VAR 0 3
7551: PUSH
7552: LD_INT 26
7554: EQUAL
7555: IFFALSE 7565
// sEarthquake := true ;
7557: LD_ADDR_EXP 69
7561: PUSH
7562: LD_INT 1
7564: ST_TO_ADDR
// if p3 = 27 then
7565: LD_VAR 0 3
7569: PUSH
7570: LD_INT 27
7572: EQUAL
7573: IFFALSE 7583
// sAI := true ;
7575: LD_ADDR_EXP 70
7579: PUSH
7580: LD_INT 1
7582: ST_TO_ADDR
// if p3 = 28 then
7583: LD_VAR 0 3
7587: PUSH
7588: LD_INT 28
7590: EQUAL
7591: IFFALSE 7601
// sCargo := true ;
7593: LD_ADDR_EXP 73
7597: PUSH
7598: LD_INT 1
7600: ST_TO_ADDR
// if p3 = 29 then
7601: LD_VAR 0 3
7605: PUSH
7606: LD_INT 29
7608: EQUAL
7609: IFFALSE 7619
// sDLaser := true ;
7611: LD_ADDR_EXP 74
7615: PUSH
7616: LD_INT 1
7618: ST_TO_ADDR
// if p3 = 30 then
7619: LD_VAR 0 3
7623: PUSH
7624: LD_INT 30
7626: EQUAL
7627: IFFALSE 7637
// sExchange := true ;
7629: LD_ADDR_EXP 75
7633: PUSH
7634: LD_INT 1
7636: ST_TO_ADDR
// if p3 = 31 then
7637: LD_VAR 0 3
7641: PUSH
7642: LD_INT 31
7644: EQUAL
7645: IFFALSE 7655
// sFac := true ;
7647: LD_ADDR_EXP 76
7651: PUSH
7652: LD_INT 1
7654: ST_TO_ADDR
// if p3 = 32 then
7655: LD_VAR 0 3
7659: PUSH
7660: LD_INT 32
7662: EQUAL
7663: IFFALSE 7673
// sPower := true ;
7665: LD_ADDR_EXP 77
7669: PUSH
7670: LD_INT 1
7672: ST_TO_ADDR
// if p3 = 33 then
7673: LD_VAR 0 3
7677: PUSH
7678: LD_INT 33
7680: EQUAL
7681: IFFALSE 7691
// sRandom := true ;
7683: LD_ADDR_EXP 78
7687: PUSH
7688: LD_INT 1
7690: ST_TO_ADDR
// if p3 = 34 then
7691: LD_VAR 0 3
7695: PUSH
7696: LD_INT 34
7698: EQUAL
7699: IFFALSE 7709
// sShield := true ;
7701: LD_ADDR_EXP 79
7705: PUSH
7706: LD_INT 1
7708: ST_TO_ADDR
// if p3 = 35 then
7709: LD_VAR 0 3
7713: PUSH
7714: LD_INT 35
7716: EQUAL
7717: IFFALSE 7727
// sTime := true ;
7719: LD_ADDR_EXP 80
7723: PUSH
7724: LD_INT 1
7726: ST_TO_ADDR
// if p3 = 36 then
7727: LD_VAR 0 3
7731: PUSH
7732: LD_INT 36
7734: EQUAL
7735: IFFALSE 7745
// sTools := true ;
7737: LD_ADDR_EXP 81
7741: PUSH
7742: LD_INT 1
7744: ST_TO_ADDR
// if p3 = 101 then
7745: LD_VAR 0 3
7749: PUSH
7750: LD_INT 101
7752: EQUAL
7753: IFFALSE 7763
// sSold := true ;
7755: LD_ADDR_EXP 46
7759: PUSH
7760: LD_INT 1
7762: ST_TO_ADDR
// if p3 = 102 then
7763: LD_VAR 0 3
7767: PUSH
7768: LD_INT 102
7770: EQUAL
7771: IFFALSE 7781
// sDiff := true ;
7773: LD_ADDR_EXP 47
7777: PUSH
7778: LD_INT 1
7780: ST_TO_ADDR
// if p3 = 103 then
7781: LD_VAR 0 3
7785: PUSH
7786: LD_INT 103
7788: EQUAL
7789: IFFALSE 7799
// sFog := true ;
7791: LD_ADDR_EXP 50
7795: PUSH
7796: LD_INT 1
7798: ST_TO_ADDR
// if p3 = 104 then
7799: LD_VAR 0 3
7803: PUSH
7804: LD_INT 104
7806: EQUAL
7807: IFFALSE 7817
// sReset := true ;
7809: LD_ADDR_EXP 51
7813: PUSH
7814: LD_INT 1
7816: ST_TO_ADDR
// if p3 = 105 then
7817: LD_VAR 0 3
7821: PUSH
7822: LD_INT 105
7824: EQUAL
7825: IFFALSE 7835
// sSun := true ;
7827: LD_ADDR_EXP 52
7831: PUSH
7832: LD_INT 1
7834: ST_TO_ADDR
// if p3 = 106 then
7835: LD_VAR 0 3
7839: PUSH
7840: LD_INT 106
7842: EQUAL
7843: IFFALSE 7853
// sTiger := true ;
7845: LD_ADDR_EXP 48
7849: PUSH
7850: LD_INT 1
7852: ST_TO_ADDR
// if p3 = 107 then
7853: LD_VAR 0 3
7857: PUSH
7858: LD_INT 107
7860: EQUAL
7861: IFFALSE 7871
// sBomb := true ;
7863: LD_ADDR_EXP 49
7867: PUSH
7868: LD_INT 1
7870: ST_TO_ADDR
// if p3 = 108 then
7871: LD_VAR 0 3
7875: PUSH
7876: LD_INT 108
7878: EQUAL
7879: IFFALSE 7889
// sWound := true ;
7881: LD_ADDR_EXP 57
7885: PUSH
7886: LD_INT 1
7888: ST_TO_ADDR
// if p3 = 109 then
7889: LD_VAR 0 3
7893: PUSH
7894: LD_INT 109
7896: EQUAL
7897: IFFALSE 7907
// sBetray := true ;
7899: LD_ADDR_EXP 61
7903: PUSH
7904: LD_INT 1
7906: ST_TO_ADDR
// if p3 = 110 then
7907: LD_VAR 0 3
7911: PUSH
7912: LD_INT 110
7914: EQUAL
7915: IFFALSE 7925
// sContamin := true ;
7917: LD_ADDR_EXP 62
7921: PUSH
7922: LD_INT 1
7924: ST_TO_ADDR
// if p3 = 111 then
7925: LD_VAR 0 3
7929: PUSH
7930: LD_INT 111
7932: EQUAL
7933: IFFALSE 7943
// sOil := true ;
7935: LD_ADDR_EXP 64
7939: PUSH
7940: LD_INT 1
7942: ST_TO_ADDR
// if p3 = 112 then
7943: LD_VAR 0 3
7947: PUSH
7948: LD_INT 112
7950: EQUAL
7951: IFFALSE 7961
// sStu := true ;
7953: LD_ADDR_EXP 68
7957: PUSH
7958: LD_INT 1
7960: ST_TO_ADDR
// if p3 = 113 then
7961: LD_VAR 0 3
7965: PUSH
7966: LD_INT 113
7968: EQUAL
7969: IFFALSE 7979
// sBazooka := true ;
7971: LD_ADDR_EXP 71
7975: PUSH
7976: LD_INT 1
7978: ST_TO_ADDR
// if p3 = 114 then
7979: LD_VAR 0 3
7983: PUSH
7984: LD_INT 114
7986: EQUAL
7987: IFFALSE 7997
// sMortar := true ;
7989: LD_ADDR_EXP 72
7993: PUSH
7994: LD_INT 1
7996: ST_TO_ADDR
// if p3 = 115 then
7997: LD_VAR 0 3
8001: PUSH
8002: LD_INT 115
8004: EQUAL
8005: IFFALSE 8015
// sRanger := true ;
8007: LD_ADDR_EXP 82
8011: PUSH
8012: LD_INT 1
8014: ST_TO_ADDR
// if p3 = 116 then
8015: LD_VAR 0 3
8019: PUSH
8020: LD_INT 116
8022: EQUAL
8023: IFFALSE 8033
// sComputer := true ;
8025: LD_ADDR_EXP 83
8029: PUSH
8030: LD_INT 1
8032: ST_TO_ADDR
// if p3 = 117 then
8033: LD_VAR 0 3
8037: PUSH
8038: LD_INT 117
8040: EQUAL
8041: IFFALSE 8051
// s30 := true ;
8043: LD_ADDR_EXP 84
8047: PUSH
8048: LD_INT 1
8050: ST_TO_ADDR
// if p3 = 118 then
8051: LD_VAR 0 3
8055: PUSH
8056: LD_INT 118
8058: EQUAL
8059: IFFALSE 8069
// s60 := true ;
8061: LD_ADDR_EXP 85
8065: PUSH
8066: LD_INT 1
8068: ST_TO_ADDR
// end ; if p2 = hack_mode then
8069: LD_VAR 0 2
8073: PUSH
8074: LD_INT 101
8076: EQUAL
8077: IFFALSE 8205
// begin case p3 of 1 :
8079: LD_VAR 0 3
8083: PUSH
8084: LD_INT 1
8086: DOUBLE
8087: EQUAL
8088: IFTRUE 8092
8090: GO 8099
8092: POP
// hHackUnlimitedResources ; 2 :
8093: CALL 20352 0 0
8097: GO 8205
8099: LD_INT 2
8101: DOUBLE
8102: EQUAL
8103: IFTRUE 8107
8105: GO 8114
8107: POP
// hHackSetLevel10 ; 3 :
8108: CALL 20485 0 0
8112: GO 8205
8114: LD_INT 3
8116: DOUBLE
8117: EQUAL
8118: IFTRUE 8122
8120: GO 8129
8122: POP
// hHackSetLevel10YourUnits ; 4 :
8123: CALL 20570 0 0
8127: GO 8205
8129: LD_INT 4
8131: DOUBLE
8132: EQUAL
8133: IFTRUE 8137
8135: GO 8144
8137: POP
// hHackInvincible ; 5 :
8138: CALL 21018 0 0
8142: GO 8205
8144: LD_INT 5
8146: DOUBLE
8147: EQUAL
8148: IFTRUE 8152
8150: GO 8159
8152: POP
// hHackInvisible ; 6 :
8153: CALL 21129 0 0
8157: GO 8205
8159: LD_INT 6
8161: DOUBLE
8162: EQUAL
8163: IFTRUE 8167
8165: GO 8174
8167: POP
// hHackChangeYourSide ; 7 :
8168: CALL 21186 0 0
8172: GO 8205
8174: LD_INT 7
8176: DOUBLE
8177: EQUAL
8178: IFTRUE 8182
8180: GO 8189
8182: POP
// hHackChangeUnitSide ; 8 :
8183: CALL 21228 0 0
8187: GO 8205
8189: LD_INT 8
8191: DOUBLE
8192: EQUAL
8193: IFTRUE 8197
8195: GO 8204
8197: POP
// hHackFog ; end ;
8198: CALL 21329 0 0
8202: GO 8205
8204: POP
// end ; if p2 = game_save_mode then
8205: LD_VAR 0 2
8209: PUSH
8210: LD_INT 102
8212: EQUAL
8213: IFFALSE 8268
// begin if p3 = 1 then
8215: LD_VAR 0 3
8219: PUSH
8220: LD_INT 1
8222: EQUAL
8223: IFFALSE 8235
// globalGameSaveCounter := p4 ;
8225: LD_ADDR_EXP 28
8229: PUSH
8230: LD_VAR 0 4
8234: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
8235: LD_VAR 0 3
8239: PUSH
8240: LD_INT 2
8242: EQUAL
8243: PUSH
8244: LD_EXP 28
8248: AND
8249: IFFALSE 8268
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
8251: LD_STRING setGameSaveCounter(
8253: PUSH
8254: LD_EXP 28
8258: STR
8259: PUSH
8260: LD_STRING )
8262: STR
8263: PPUSH
8264: CALL_OW 559
// end ; end ;
8268: LD_VAR 0 7
8272: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
8273: LD_INT 0
8275: PPUSH
// streamModeActive := false ;
8276: LD_ADDR_EXP 29
8280: PUSH
8281: LD_INT 0
8283: ST_TO_ADDR
// normalCounter := 36 ;
8284: LD_ADDR_EXP 30
8288: PUSH
8289: LD_INT 36
8291: ST_TO_ADDR
// hardcoreCounter := 18 ;
8292: LD_ADDR_EXP 31
8296: PUSH
8297: LD_INT 18
8299: ST_TO_ADDR
// sRocket := false ;
8300: LD_ADDR_EXP 34
8304: PUSH
8305: LD_INT 0
8307: ST_TO_ADDR
// sSpeed := false ;
8308: LD_ADDR_EXP 33
8312: PUSH
8313: LD_INT 0
8315: ST_TO_ADDR
// sEngine := false ;
8316: LD_ADDR_EXP 35
8320: PUSH
8321: LD_INT 0
8323: ST_TO_ADDR
// sSpec := false ;
8324: LD_ADDR_EXP 32
8328: PUSH
8329: LD_INT 0
8331: ST_TO_ADDR
// sLevel := false ;
8332: LD_ADDR_EXP 36
8336: PUSH
8337: LD_INT 0
8339: ST_TO_ADDR
// sArmoury := false ;
8340: LD_ADDR_EXP 37
8344: PUSH
8345: LD_INT 0
8347: ST_TO_ADDR
// sRadar := false ;
8348: LD_ADDR_EXP 38
8352: PUSH
8353: LD_INT 0
8355: ST_TO_ADDR
// sBunker := false ;
8356: LD_ADDR_EXP 39
8360: PUSH
8361: LD_INT 0
8363: ST_TO_ADDR
// sHack := false ;
8364: LD_ADDR_EXP 40
8368: PUSH
8369: LD_INT 0
8371: ST_TO_ADDR
// sFire := false ;
8372: LD_ADDR_EXP 41
8376: PUSH
8377: LD_INT 0
8379: ST_TO_ADDR
// sRefresh := false ;
8380: LD_ADDR_EXP 42
8384: PUSH
8385: LD_INT 0
8387: ST_TO_ADDR
// sExp := false ;
8388: LD_ADDR_EXP 43
8392: PUSH
8393: LD_INT 0
8395: ST_TO_ADDR
// sDepot := false ;
8396: LD_ADDR_EXP 44
8400: PUSH
8401: LD_INT 0
8403: ST_TO_ADDR
// sFlag := false ;
8404: LD_ADDR_EXP 45
8408: PUSH
8409: LD_INT 0
8411: ST_TO_ADDR
// sKamikadze := false ;
8412: LD_ADDR_EXP 53
8416: PUSH
8417: LD_INT 0
8419: ST_TO_ADDR
// sTroll := false ;
8420: LD_ADDR_EXP 54
8424: PUSH
8425: LD_INT 0
8427: ST_TO_ADDR
// sSlow := false ;
8428: LD_ADDR_EXP 55
8432: PUSH
8433: LD_INT 0
8435: ST_TO_ADDR
// sLack := false ;
8436: LD_ADDR_EXP 56
8440: PUSH
8441: LD_INT 0
8443: ST_TO_ADDR
// sTank := false ;
8444: LD_ADDR_EXP 58
8448: PUSH
8449: LD_INT 0
8451: ST_TO_ADDR
// sRemote := false ;
8452: LD_ADDR_EXP 59
8456: PUSH
8457: LD_INT 0
8459: ST_TO_ADDR
// sPowell := false ;
8460: LD_ADDR_EXP 60
8464: PUSH
8465: LD_INT 0
8467: ST_TO_ADDR
// sTeleport := false ;
8468: LD_ADDR_EXP 63
8472: PUSH
8473: LD_INT 0
8475: ST_TO_ADDR
// sOilTower := false ;
8476: LD_ADDR_EXP 65
8480: PUSH
8481: LD_INT 0
8483: ST_TO_ADDR
// sShovel := false ;
8484: LD_ADDR_EXP 66
8488: PUSH
8489: LD_INT 0
8491: ST_TO_ADDR
// sSheik := false ;
8492: LD_ADDR_EXP 67
8496: PUSH
8497: LD_INT 0
8499: ST_TO_ADDR
// sEarthquake := false ;
8500: LD_ADDR_EXP 69
8504: PUSH
8505: LD_INT 0
8507: ST_TO_ADDR
// sAI := false ;
8508: LD_ADDR_EXP 70
8512: PUSH
8513: LD_INT 0
8515: ST_TO_ADDR
// sCargo := false ;
8516: LD_ADDR_EXP 73
8520: PUSH
8521: LD_INT 0
8523: ST_TO_ADDR
// sDLaser := false ;
8524: LD_ADDR_EXP 74
8528: PUSH
8529: LD_INT 0
8531: ST_TO_ADDR
// sExchange := false ;
8532: LD_ADDR_EXP 75
8536: PUSH
8537: LD_INT 0
8539: ST_TO_ADDR
// sFac := false ;
8540: LD_ADDR_EXP 76
8544: PUSH
8545: LD_INT 0
8547: ST_TO_ADDR
// sPower := false ;
8548: LD_ADDR_EXP 77
8552: PUSH
8553: LD_INT 0
8555: ST_TO_ADDR
// sRandom := false ;
8556: LD_ADDR_EXP 78
8560: PUSH
8561: LD_INT 0
8563: ST_TO_ADDR
// sShield := false ;
8564: LD_ADDR_EXP 79
8568: PUSH
8569: LD_INT 0
8571: ST_TO_ADDR
// sTime := false ;
8572: LD_ADDR_EXP 80
8576: PUSH
8577: LD_INT 0
8579: ST_TO_ADDR
// sTools := false ;
8580: LD_ADDR_EXP 81
8584: PUSH
8585: LD_INT 0
8587: ST_TO_ADDR
// sSold := false ;
8588: LD_ADDR_EXP 46
8592: PUSH
8593: LD_INT 0
8595: ST_TO_ADDR
// sDiff := false ;
8596: LD_ADDR_EXP 47
8600: PUSH
8601: LD_INT 0
8603: ST_TO_ADDR
// sFog := false ;
8604: LD_ADDR_EXP 50
8608: PUSH
8609: LD_INT 0
8611: ST_TO_ADDR
// sReset := false ;
8612: LD_ADDR_EXP 51
8616: PUSH
8617: LD_INT 0
8619: ST_TO_ADDR
// sSun := false ;
8620: LD_ADDR_EXP 52
8624: PUSH
8625: LD_INT 0
8627: ST_TO_ADDR
// sTiger := false ;
8628: LD_ADDR_EXP 48
8632: PUSH
8633: LD_INT 0
8635: ST_TO_ADDR
// sBomb := false ;
8636: LD_ADDR_EXP 49
8640: PUSH
8641: LD_INT 0
8643: ST_TO_ADDR
// sWound := false ;
8644: LD_ADDR_EXP 57
8648: PUSH
8649: LD_INT 0
8651: ST_TO_ADDR
// sBetray := false ;
8652: LD_ADDR_EXP 61
8656: PUSH
8657: LD_INT 0
8659: ST_TO_ADDR
// sContamin := false ;
8660: LD_ADDR_EXP 62
8664: PUSH
8665: LD_INT 0
8667: ST_TO_ADDR
// sOil := false ;
8668: LD_ADDR_EXP 64
8672: PUSH
8673: LD_INT 0
8675: ST_TO_ADDR
// sStu := false ;
8676: LD_ADDR_EXP 68
8680: PUSH
8681: LD_INT 0
8683: ST_TO_ADDR
// sBazooka := false ;
8684: LD_ADDR_EXP 71
8688: PUSH
8689: LD_INT 0
8691: ST_TO_ADDR
// sMortar := false ;
8692: LD_ADDR_EXP 72
8696: PUSH
8697: LD_INT 0
8699: ST_TO_ADDR
// sRanger := false ;
8700: LD_ADDR_EXP 82
8704: PUSH
8705: LD_INT 0
8707: ST_TO_ADDR
// sComputer := false ;
8708: LD_ADDR_EXP 83
8712: PUSH
8713: LD_INT 0
8715: ST_TO_ADDR
// s30 := false ;
8716: LD_ADDR_EXP 84
8720: PUSH
8721: LD_INT 0
8723: ST_TO_ADDR
// s60 := false ;
8724: LD_ADDR_EXP 85
8728: PUSH
8729: LD_INT 0
8731: ST_TO_ADDR
// end ;
8732: LD_VAR 0 1
8736: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
8737: LD_INT 0
8739: PPUSH
8740: PPUSH
8741: PPUSH
8742: PPUSH
8743: PPUSH
8744: PPUSH
8745: PPUSH
// result := [ ] ;
8746: LD_ADDR_VAR 0 2
8750: PUSH
8751: EMPTY
8752: ST_TO_ADDR
// if campaign_id = 1 then
8753: LD_OWVAR 69
8757: PUSH
8758: LD_INT 1
8760: EQUAL
8761: IFFALSE 11927
// begin case mission_number of 1 :
8763: LD_OWVAR 70
8767: PUSH
8768: LD_INT 1
8770: DOUBLE
8771: EQUAL
8772: IFTRUE 8776
8774: GO 8852
8776: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
8777: LD_ADDR_VAR 0 2
8781: PUSH
8782: LD_INT 2
8784: PUSH
8785: LD_INT 4
8787: PUSH
8788: LD_INT 11
8790: PUSH
8791: LD_INT 12
8793: PUSH
8794: LD_INT 15
8796: PUSH
8797: LD_INT 16
8799: PUSH
8800: LD_INT 22
8802: PUSH
8803: LD_INT 23
8805: PUSH
8806: LD_INT 26
8808: PUSH
8809: EMPTY
8810: LIST
8811: LIST
8812: LIST
8813: LIST
8814: LIST
8815: LIST
8816: LIST
8817: LIST
8818: LIST
8819: PUSH
8820: LD_INT 101
8822: PUSH
8823: LD_INT 102
8825: PUSH
8826: LD_INT 106
8828: PUSH
8829: LD_INT 116
8831: PUSH
8832: LD_INT 117
8834: PUSH
8835: LD_INT 118
8837: PUSH
8838: EMPTY
8839: LIST
8840: LIST
8841: LIST
8842: LIST
8843: LIST
8844: LIST
8845: PUSH
8846: EMPTY
8847: LIST
8848: LIST
8849: ST_TO_ADDR
8850: GO 11925
8852: LD_INT 2
8854: DOUBLE
8855: EQUAL
8856: IFTRUE 8860
8858: GO 8944
8860: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
8861: LD_ADDR_VAR 0 2
8865: PUSH
8866: LD_INT 2
8868: PUSH
8869: LD_INT 4
8871: PUSH
8872: LD_INT 11
8874: PUSH
8875: LD_INT 12
8877: PUSH
8878: LD_INT 15
8880: PUSH
8881: LD_INT 16
8883: PUSH
8884: LD_INT 22
8886: PUSH
8887: LD_INT 23
8889: PUSH
8890: LD_INT 26
8892: PUSH
8893: EMPTY
8894: LIST
8895: LIST
8896: LIST
8897: LIST
8898: LIST
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: PUSH
8904: LD_INT 101
8906: PUSH
8907: LD_INT 102
8909: PUSH
8910: LD_INT 105
8912: PUSH
8913: LD_INT 106
8915: PUSH
8916: LD_INT 108
8918: PUSH
8919: LD_INT 116
8921: PUSH
8922: LD_INT 117
8924: PUSH
8925: LD_INT 118
8927: PUSH
8928: EMPTY
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: LIST
8937: PUSH
8938: EMPTY
8939: LIST
8940: LIST
8941: ST_TO_ADDR
8942: GO 11925
8944: LD_INT 3
8946: DOUBLE
8947: EQUAL
8948: IFTRUE 8952
8950: GO 9040
8952: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
8953: LD_ADDR_VAR 0 2
8957: PUSH
8958: LD_INT 2
8960: PUSH
8961: LD_INT 4
8963: PUSH
8964: LD_INT 5
8966: PUSH
8967: LD_INT 11
8969: PUSH
8970: LD_INT 12
8972: PUSH
8973: LD_INT 15
8975: PUSH
8976: LD_INT 16
8978: PUSH
8979: LD_INT 22
8981: PUSH
8982: LD_INT 26
8984: PUSH
8985: LD_INT 36
8987: PUSH
8988: EMPTY
8989: LIST
8990: LIST
8991: LIST
8992: LIST
8993: LIST
8994: LIST
8995: LIST
8996: LIST
8997: LIST
8998: LIST
8999: PUSH
9000: LD_INT 101
9002: PUSH
9003: LD_INT 102
9005: PUSH
9006: LD_INT 105
9008: PUSH
9009: LD_INT 106
9011: PUSH
9012: LD_INT 108
9014: PUSH
9015: LD_INT 116
9017: PUSH
9018: LD_INT 117
9020: PUSH
9021: LD_INT 118
9023: PUSH
9024: EMPTY
9025: LIST
9026: LIST
9027: LIST
9028: LIST
9029: LIST
9030: LIST
9031: LIST
9032: LIST
9033: PUSH
9034: EMPTY
9035: LIST
9036: LIST
9037: ST_TO_ADDR
9038: GO 11925
9040: LD_INT 4
9042: DOUBLE
9043: EQUAL
9044: IFTRUE 9048
9046: GO 9144
9048: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9049: LD_ADDR_VAR 0 2
9053: PUSH
9054: LD_INT 2
9056: PUSH
9057: LD_INT 4
9059: PUSH
9060: LD_INT 5
9062: PUSH
9063: LD_INT 8
9065: PUSH
9066: LD_INT 11
9068: PUSH
9069: LD_INT 12
9071: PUSH
9072: LD_INT 15
9074: PUSH
9075: LD_INT 16
9077: PUSH
9078: LD_INT 22
9080: PUSH
9081: LD_INT 23
9083: PUSH
9084: LD_INT 26
9086: PUSH
9087: LD_INT 36
9089: PUSH
9090: EMPTY
9091: LIST
9092: LIST
9093: LIST
9094: LIST
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: LIST
9100: LIST
9101: LIST
9102: LIST
9103: PUSH
9104: LD_INT 101
9106: PUSH
9107: LD_INT 102
9109: PUSH
9110: LD_INT 105
9112: PUSH
9113: LD_INT 106
9115: PUSH
9116: LD_INT 108
9118: PUSH
9119: LD_INT 116
9121: PUSH
9122: LD_INT 117
9124: PUSH
9125: LD_INT 118
9127: PUSH
9128: EMPTY
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: PUSH
9138: EMPTY
9139: LIST
9140: LIST
9141: ST_TO_ADDR
9142: GO 11925
9144: LD_INT 5
9146: DOUBLE
9147: EQUAL
9148: IFTRUE 9152
9150: GO 9264
9152: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9153: LD_ADDR_VAR 0 2
9157: PUSH
9158: LD_INT 2
9160: PUSH
9161: LD_INT 4
9163: PUSH
9164: LD_INT 5
9166: PUSH
9167: LD_INT 6
9169: PUSH
9170: LD_INT 8
9172: PUSH
9173: LD_INT 11
9175: PUSH
9176: LD_INT 12
9178: PUSH
9179: LD_INT 15
9181: PUSH
9182: LD_INT 16
9184: PUSH
9185: LD_INT 22
9187: PUSH
9188: LD_INT 23
9190: PUSH
9191: LD_INT 25
9193: PUSH
9194: LD_INT 26
9196: PUSH
9197: LD_INT 36
9199: PUSH
9200: EMPTY
9201: LIST
9202: LIST
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: LIST
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: LIST
9213: LIST
9214: LIST
9215: PUSH
9216: LD_INT 101
9218: PUSH
9219: LD_INT 102
9221: PUSH
9222: LD_INT 105
9224: PUSH
9225: LD_INT 106
9227: PUSH
9228: LD_INT 108
9230: PUSH
9231: LD_INT 109
9233: PUSH
9234: LD_INT 112
9236: PUSH
9237: LD_INT 116
9239: PUSH
9240: LD_INT 117
9242: PUSH
9243: LD_INT 118
9245: PUSH
9246: EMPTY
9247: LIST
9248: LIST
9249: LIST
9250: LIST
9251: LIST
9252: LIST
9253: LIST
9254: LIST
9255: LIST
9256: LIST
9257: PUSH
9258: EMPTY
9259: LIST
9260: LIST
9261: ST_TO_ADDR
9262: GO 11925
9264: LD_INT 6
9266: DOUBLE
9267: EQUAL
9268: IFTRUE 9272
9270: GO 9404
9272: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
9273: LD_ADDR_VAR 0 2
9277: PUSH
9278: LD_INT 2
9280: PUSH
9281: LD_INT 4
9283: PUSH
9284: LD_INT 5
9286: PUSH
9287: LD_INT 6
9289: PUSH
9290: LD_INT 8
9292: PUSH
9293: LD_INT 11
9295: PUSH
9296: LD_INT 12
9298: PUSH
9299: LD_INT 15
9301: PUSH
9302: LD_INT 16
9304: PUSH
9305: LD_INT 20
9307: PUSH
9308: LD_INT 21
9310: PUSH
9311: LD_INT 22
9313: PUSH
9314: LD_INT 23
9316: PUSH
9317: LD_INT 25
9319: PUSH
9320: LD_INT 26
9322: PUSH
9323: LD_INT 30
9325: PUSH
9326: LD_INT 31
9328: PUSH
9329: LD_INT 32
9331: PUSH
9332: LD_INT 36
9334: PUSH
9335: EMPTY
9336: LIST
9337: LIST
9338: LIST
9339: LIST
9340: LIST
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: LIST
9355: PUSH
9356: LD_INT 101
9358: PUSH
9359: LD_INT 102
9361: PUSH
9362: LD_INT 105
9364: PUSH
9365: LD_INT 106
9367: PUSH
9368: LD_INT 108
9370: PUSH
9371: LD_INT 109
9373: PUSH
9374: LD_INT 112
9376: PUSH
9377: LD_INT 116
9379: PUSH
9380: LD_INT 117
9382: PUSH
9383: LD_INT 118
9385: PUSH
9386: EMPTY
9387: LIST
9388: LIST
9389: LIST
9390: LIST
9391: LIST
9392: LIST
9393: LIST
9394: LIST
9395: LIST
9396: LIST
9397: PUSH
9398: EMPTY
9399: LIST
9400: LIST
9401: ST_TO_ADDR
9402: GO 11925
9404: LD_INT 7
9406: DOUBLE
9407: EQUAL
9408: IFTRUE 9412
9410: GO 9524
9412: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
9413: LD_ADDR_VAR 0 2
9417: PUSH
9418: LD_INT 2
9420: PUSH
9421: LD_INT 4
9423: PUSH
9424: LD_INT 5
9426: PUSH
9427: LD_INT 7
9429: PUSH
9430: LD_INT 11
9432: PUSH
9433: LD_INT 12
9435: PUSH
9436: LD_INT 15
9438: PUSH
9439: LD_INT 16
9441: PUSH
9442: LD_INT 20
9444: PUSH
9445: LD_INT 21
9447: PUSH
9448: LD_INT 22
9450: PUSH
9451: LD_INT 23
9453: PUSH
9454: LD_INT 25
9456: PUSH
9457: LD_INT 26
9459: PUSH
9460: EMPTY
9461: LIST
9462: LIST
9463: LIST
9464: LIST
9465: LIST
9466: LIST
9467: LIST
9468: LIST
9469: LIST
9470: LIST
9471: LIST
9472: LIST
9473: LIST
9474: LIST
9475: PUSH
9476: LD_INT 101
9478: PUSH
9479: LD_INT 102
9481: PUSH
9482: LD_INT 103
9484: PUSH
9485: LD_INT 105
9487: PUSH
9488: LD_INT 106
9490: PUSH
9491: LD_INT 108
9493: PUSH
9494: LD_INT 112
9496: PUSH
9497: LD_INT 116
9499: PUSH
9500: LD_INT 117
9502: PUSH
9503: LD_INT 118
9505: PUSH
9506: EMPTY
9507: LIST
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: LIST
9513: LIST
9514: LIST
9515: LIST
9516: LIST
9517: PUSH
9518: EMPTY
9519: LIST
9520: LIST
9521: ST_TO_ADDR
9522: GO 11925
9524: LD_INT 8
9526: DOUBLE
9527: EQUAL
9528: IFTRUE 9532
9530: GO 9672
9532: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
9533: LD_ADDR_VAR 0 2
9537: PUSH
9538: LD_INT 2
9540: PUSH
9541: LD_INT 4
9543: PUSH
9544: LD_INT 5
9546: PUSH
9547: LD_INT 6
9549: PUSH
9550: LD_INT 7
9552: PUSH
9553: LD_INT 8
9555: PUSH
9556: LD_INT 11
9558: PUSH
9559: LD_INT 12
9561: PUSH
9562: LD_INT 15
9564: PUSH
9565: LD_INT 16
9567: PUSH
9568: LD_INT 20
9570: PUSH
9571: LD_INT 21
9573: PUSH
9574: LD_INT 22
9576: PUSH
9577: LD_INT 23
9579: PUSH
9580: LD_INT 25
9582: PUSH
9583: LD_INT 26
9585: PUSH
9586: LD_INT 30
9588: PUSH
9589: LD_INT 31
9591: PUSH
9592: LD_INT 32
9594: PUSH
9595: LD_INT 36
9597: PUSH
9598: EMPTY
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: PUSH
9620: LD_INT 101
9622: PUSH
9623: LD_INT 102
9625: PUSH
9626: LD_INT 103
9628: PUSH
9629: LD_INT 105
9631: PUSH
9632: LD_INT 106
9634: PUSH
9635: LD_INT 108
9637: PUSH
9638: LD_INT 109
9640: PUSH
9641: LD_INT 112
9643: PUSH
9644: LD_INT 116
9646: PUSH
9647: LD_INT 117
9649: PUSH
9650: LD_INT 118
9652: PUSH
9653: EMPTY
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: PUSH
9666: EMPTY
9667: LIST
9668: LIST
9669: ST_TO_ADDR
9670: GO 11925
9672: LD_INT 9
9674: DOUBLE
9675: EQUAL
9676: IFTRUE 9680
9678: GO 9828
9680: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
9681: LD_ADDR_VAR 0 2
9685: PUSH
9686: LD_INT 2
9688: PUSH
9689: LD_INT 4
9691: PUSH
9692: LD_INT 5
9694: PUSH
9695: LD_INT 6
9697: PUSH
9698: LD_INT 7
9700: PUSH
9701: LD_INT 8
9703: PUSH
9704: LD_INT 11
9706: PUSH
9707: LD_INT 12
9709: PUSH
9710: LD_INT 15
9712: PUSH
9713: LD_INT 16
9715: PUSH
9716: LD_INT 20
9718: PUSH
9719: LD_INT 21
9721: PUSH
9722: LD_INT 22
9724: PUSH
9725: LD_INT 23
9727: PUSH
9728: LD_INT 25
9730: PUSH
9731: LD_INT 26
9733: PUSH
9734: LD_INT 28
9736: PUSH
9737: LD_INT 30
9739: PUSH
9740: LD_INT 31
9742: PUSH
9743: LD_INT 32
9745: PUSH
9746: LD_INT 36
9748: PUSH
9749: EMPTY
9750: LIST
9751: LIST
9752: LIST
9753: LIST
9754: LIST
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: PUSH
9772: LD_INT 101
9774: PUSH
9775: LD_INT 102
9777: PUSH
9778: LD_INT 103
9780: PUSH
9781: LD_INT 105
9783: PUSH
9784: LD_INT 106
9786: PUSH
9787: LD_INT 108
9789: PUSH
9790: LD_INT 109
9792: PUSH
9793: LD_INT 112
9795: PUSH
9796: LD_INT 114
9798: PUSH
9799: LD_INT 116
9801: PUSH
9802: LD_INT 117
9804: PUSH
9805: LD_INT 118
9807: PUSH
9808: EMPTY
9809: LIST
9810: LIST
9811: LIST
9812: LIST
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: PUSH
9822: EMPTY
9823: LIST
9824: LIST
9825: ST_TO_ADDR
9826: GO 11925
9828: LD_INT 10
9830: DOUBLE
9831: EQUAL
9832: IFTRUE 9836
9834: GO 10032
9836: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
9837: LD_ADDR_VAR 0 2
9841: PUSH
9842: LD_INT 2
9844: PUSH
9845: LD_INT 4
9847: PUSH
9848: LD_INT 5
9850: PUSH
9851: LD_INT 6
9853: PUSH
9854: LD_INT 7
9856: PUSH
9857: LD_INT 8
9859: PUSH
9860: LD_INT 9
9862: PUSH
9863: LD_INT 10
9865: PUSH
9866: LD_INT 11
9868: PUSH
9869: LD_INT 12
9871: PUSH
9872: LD_INT 13
9874: PUSH
9875: LD_INT 14
9877: PUSH
9878: LD_INT 15
9880: PUSH
9881: LD_INT 16
9883: PUSH
9884: LD_INT 17
9886: PUSH
9887: LD_INT 18
9889: PUSH
9890: LD_INT 19
9892: PUSH
9893: LD_INT 20
9895: PUSH
9896: LD_INT 21
9898: PUSH
9899: LD_INT 22
9901: PUSH
9902: LD_INT 23
9904: PUSH
9905: LD_INT 24
9907: PUSH
9908: LD_INT 25
9910: PUSH
9911: LD_INT 26
9913: PUSH
9914: LD_INT 28
9916: PUSH
9917: LD_INT 30
9919: PUSH
9920: LD_INT 31
9922: PUSH
9923: LD_INT 32
9925: PUSH
9926: LD_INT 36
9928: PUSH
9929: EMPTY
9930: LIST
9931: LIST
9932: LIST
9933: LIST
9934: LIST
9935: LIST
9936: LIST
9937: LIST
9938: LIST
9939: LIST
9940: LIST
9941: LIST
9942: LIST
9943: LIST
9944: LIST
9945: LIST
9946: LIST
9947: LIST
9948: LIST
9949: LIST
9950: LIST
9951: LIST
9952: LIST
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: PUSH
9960: LD_INT 101
9962: PUSH
9963: LD_INT 102
9965: PUSH
9966: LD_INT 103
9968: PUSH
9969: LD_INT 104
9971: PUSH
9972: LD_INT 105
9974: PUSH
9975: LD_INT 106
9977: PUSH
9978: LD_INT 107
9980: PUSH
9981: LD_INT 108
9983: PUSH
9984: LD_INT 109
9986: PUSH
9987: LD_INT 110
9989: PUSH
9990: LD_INT 111
9992: PUSH
9993: LD_INT 112
9995: PUSH
9996: LD_INT 114
9998: PUSH
9999: LD_INT 116
10001: PUSH
10002: LD_INT 117
10004: PUSH
10005: LD_INT 118
10007: PUSH
10008: EMPTY
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: LIST
10015: LIST
10016: LIST
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: LIST
10024: LIST
10025: PUSH
10026: EMPTY
10027: LIST
10028: LIST
10029: ST_TO_ADDR
10030: GO 11925
10032: LD_INT 11
10034: DOUBLE
10035: EQUAL
10036: IFTRUE 10040
10038: GO 10244
10040: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10041: LD_ADDR_VAR 0 2
10045: PUSH
10046: LD_INT 2
10048: PUSH
10049: LD_INT 3
10051: PUSH
10052: LD_INT 4
10054: PUSH
10055: LD_INT 5
10057: PUSH
10058: LD_INT 6
10060: PUSH
10061: LD_INT 7
10063: PUSH
10064: LD_INT 8
10066: PUSH
10067: LD_INT 9
10069: PUSH
10070: LD_INT 10
10072: PUSH
10073: LD_INT 11
10075: PUSH
10076: LD_INT 12
10078: PUSH
10079: LD_INT 13
10081: PUSH
10082: LD_INT 14
10084: PUSH
10085: LD_INT 15
10087: PUSH
10088: LD_INT 16
10090: PUSH
10091: LD_INT 17
10093: PUSH
10094: LD_INT 18
10096: PUSH
10097: LD_INT 19
10099: PUSH
10100: LD_INT 20
10102: PUSH
10103: LD_INT 21
10105: PUSH
10106: LD_INT 22
10108: PUSH
10109: LD_INT 23
10111: PUSH
10112: LD_INT 24
10114: PUSH
10115: LD_INT 25
10117: PUSH
10118: LD_INT 26
10120: PUSH
10121: LD_INT 28
10123: PUSH
10124: LD_INT 30
10126: PUSH
10127: LD_INT 31
10129: PUSH
10130: LD_INT 32
10132: PUSH
10133: LD_INT 34
10135: PUSH
10136: LD_INT 36
10138: PUSH
10139: EMPTY
10140: LIST
10141: LIST
10142: LIST
10143: LIST
10144: LIST
10145: LIST
10146: LIST
10147: LIST
10148: LIST
10149: LIST
10150: LIST
10151: LIST
10152: LIST
10153: LIST
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: LIST
10159: LIST
10160: LIST
10161: LIST
10162: LIST
10163: LIST
10164: LIST
10165: LIST
10166: LIST
10167: LIST
10168: LIST
10169: LIST
10170: LIST
10171: PUSH
10172: LD_INT 101
10174: PUSH
10175: LD_INT 102
10177: PUSH
10178: LD_INT 103
10180: PUSH
10181: LD_INT 104
10183: PUSH
10184: LD_INT 105
10186: PUSH
10187: LD_INT 106
10189: PUSH
10190: LD_INT 107
10192: PUSH
10193: LD_INT 108
10195: PUSH
10196: LD_INT 109
10198: PUSH
10199: LD_INT 110
10201: PUSH
10202: LD_INT 111
10204: PUSH
10205: LD_INT 112
10207: PUSH
10208: LD_INT 114
10210: PUSH
10211: LD_INT 116
10213: PUSH
10214: LD_INT 117
10216: PUSH
10217: LD_INT 118
10219: PUSH
10220: EMPTY
10221: LIST
10222: LIST
10223: LIST
10224: LIST
10225: LIST
10226: LIST
10227: LIST
10228: LIST
10229: LIST
10230: LIST
10231: LIST
10232: LIST
10233: LIST
10234: LIST
10235: LIST
10236: LIST
10237: PUSH
10238: EMPTY
10239: LIST
10240: LIST
10241: ST_TO_ADDR
10242: GO 11925
10244: LD_INT 12
10246: DOUBLE
10247: EQUAL
10248: IFTRUE 10252
10250: GO 10472
10252: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
10253: LD_ADDR_VAR 0 2
10257: PUSH
10258: LD_INT 1
10260: PUSH
10261: LD_INT 2
10263: PUSH
10264: LD_INT 3
10266: PUSH
10267: LD_INT 4
10269: PUSH
10270: LD_INT 5
10272: PUSH
10273: LD_INT 6
10275: PUSH
10276: LD_INT 7
10278: PUSH
10279: LD_INT 8
10281: PUSH
10282: LD_INT 9
10284: PUSH
10285: LD_INT 10
10287: PUSH
10288: LD_INT 11
10290: PUSH
10291: LD_INT 12
10293: PUSH
10294: LD_INT 13
10296: PUSH
10297: LD_INT 14
10299: PUSH
10300: LD_INT 15
10302: PUSH
10303: LD_INT 16
10305: PUSH
10306: LD_INT 17
10308: PUSH
10309: LD_INT 18
10311: PUSH
10312: LD_INT 19
10314: PUSH
10315: LD_INT 20
10317: PUSH
10318: LD_INT 21
10320: PUSH
10321: LD_INT 22
10323: PUSH
10324: LD_INT 23
10326: PUSH
10327: LD_INT 24
10329: PUSH
10330: LD_INT 25
10332: PUSH
10333: LD_INT 26
10335: PUSH
10336: LD_INT 27
10338: PUSH
10339: LD_INT 28
10341: PUSH
10342: LD_INT 30
10344: PUSH
10345: LD_INT 31
10347: PUSH
10348: LD_INT 32
10350: PUSH
10351: LD_INT 33
10353: PUSH
10354: LD_INT 34
10356: PUSH
10357: LD_INT 36
10359: PUSH
10360: EMPTY
10361: LIST
10362: LIST
10363: LIST
10364: LIST
10365: LIST
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: LIST
10371: LIST
10372: LIST
10373: LIST
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: LIST
10395: PUSH
10396: LD_INT 101
10398: PUSH
10399: LD_INT 102
10401: PUSH
10402: LD_INT 103
10404: PUSH
10405: LD_INT 104
10407: PUSH
10408: LD_INT 105
10410: PUSH
10411: LD_INT 106
10413: PUSH
10414: LD_INT 107
10416: PUSH
10417: LD_INT 108
10419: PUSH
10420: LD_INT 109
10422: PUSH
10423: LD_INT 110
10425: PUSH
10426: LD_INT 111
10428: PUSH
10429: LD_INT 112
10431: PUSH
10432: LD_INT 113
10434: PUSH
10435: LD_INT 114
10437: PUSH
10438: LD_INT 116
10440: PUSH
10441: LD_INT 117
10443: PUSH
10444: LD_INT 118
10446: PUSH
10447: EMPTY
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: LIST
10453: LIST
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: LIST
10459: LIST
10460: LIST
10461: LIST
10462: LIST
10463: LIST
10464: LIST
10465: PUSH
10466: EMPTY
10467: LIST
10468: LIST
10469: ST_TO_ADDR
10470: GO 11925
10472: LD_INT 13
10474: DOUBLE
10475: EQUAL
10476: IFTRUE 10480
10478: GO 10688
10480: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
10481: LD_ADDR_VAR 0 2
10485: PUSH
10486: LD_INT 1
10488: PUSH
10489: LD_INT 2
10491: PUSH
10492: LD_INT 3
10494: PUSH
10495: LD_INT 4
10497: PUSH
10498: LD_INT 5
10500: PUSH
10501: LD_INT 8
10503: PUSH
10504: LD_INT 9
10506: PUSH
10507: LD_INT 10
10509: PUSH
10510: LD_INT 11
10512: PUSH
10513: LD_INT 12
10515: PUSH
10516: LD_INT 14
10518: PUSH
10519: LD_INT 15
10521: PUSH
10522: LD_INT 16
10524: PUSH
10525: LD_INT 17
10527: PUSH
10528: LD_INT 18
10530: PUSH
10531: LD_INT 19
10533: PUSH
10534: LD_INT 20
10536: PUSH
10537: LD_INT 21
10539: PUSH
10540: LD_INT 22
10542: PUSH
10543: LD_INT 23
10545: PUSH
10546: LD_INT 24
10548: PUSH
10549: LD_INT 25
10551: PUSH
10552: LD_INT 26
10554: PUSH
10555: LD_INT 27
10557: PUSH
10558: LD_INT 28
10560: PUSH
10561: LD_INT 30
10563: PUSH
10564: LD_INT 31
10566: PUSH
10567: LD_INT 32
10569: PUSH
10570: LD_INT 33
10572: PUSH
10573: LD_INT 34
10575: PUSH
10576: LD_INT 36
10578: PUSH
10579: EMPTY
10580: LIST
10581: LIST
10582: LIST
10583: LIST
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: LIST
10598: LIST
10599: LIST
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: PUSH
10612: LD_INT 101
10614: PUSH
10615: LD_INT 102
10617: PUSH
10618: LD_INT 103
10620: PUSH
10621: LD_INT 104
10623: PUSH
10624: LD_INT 105
10626: PUSH
10627: LD_INT 106
10629: PUSH
10630: LD_INT 107
10632: PUSH
10633: LD_INT 108
10635: PUSH
10636: LD_INT 109
10638: PUSH
10639: LD_INT 110
10641: PUSH
10642: LD_INT 111
10644: PUSH
10645: LD_INT 112
10647: PUSH
10648: LD_INT 113
10650: PUSH
10651: LD_INT 114
10653: PUSH
10654: LD_INT 116
10656: PUSH
10657: LD_INT 117
10659: PUSH
10660: LD_INT 118
10662: PUSH
10663: EMPTY
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: LIST
10678: LIST
10679: LIST
10680: LIST
10681: PUSH
10682: EMPTY
10683: LIST
10684: LIST
10685: ST_TO_ADDR
10686: GO 11925
10688: LD_INT 14
10690: DOUBLE
10691: EQUAL
10692: IFTRUE 10696
10694: GO 10920
10696: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
10697: LD_ADDR_VAR 0 2
10701: PUSH
10702: LD_INT 1
10704: PUSH
10705: LD_INT 2
10707: PUSH
10708: LD_INT 3
10710: PUSH
10711: LD_INT 4
10713: PUSH
10714: LD_INT 5
10716: PUSH
10717: LD_INT 6
10719: PUSH
10720: LD_INT 7
10722: PUSH
10723: LD_INT 8
10725: PUSH
10726: LD_INT 9
10728: PUSH
10729: LD_INT 10
10731: PUSH
10732: LD_INT 11
10734: PUSH
10735: LD_INT 12
10737: PUSH
10738: LD_INT 13
10740: PUSH
10741: LD_INT 14
10743: PUSH
10744: LD_INT 15
10746: PUSH
10747: LD_INT 16
10749: PUSH
10750: LD_INT 17
10752: PUSH
10753: LD_INT 18
10755: PUSH
10756: LD_INT 19
10758: PUSH
10759: LD_INT 20
10761: PUSH
10762: LD_INT 21
10764: PUSH
10765: LD_INT 22
10767: PUSH
10768: LD_INT 23
10770: PUSH
10771: LD_INT 24
10773: PUSH
10774: LD_INT 25
10776: PUSH
10777: LD_INT 26
10779: PUSH
10780: LD_INT 27
10782: PUSH
10783: LD_INT 28
10785: PUSH
10786: LD_INT 29
10788: PUSH
10789: LD_INT 30
10791: PUSH
10792: LD_INT 31
10794: PUSH
10795: LD_INT 32
10797: PUSH
10798: LD_INT 33
10800: PUSH
10801: LD_INT 34
10803: PUSH
10804: LD_INT 36
10806: PUSH
10807: EMPTY
10808: LIST
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: PUSH
10844: LD_INT 101
10846: PUSH
10847: LD_INT 102
10849: PUSH
10850: LD_INT 103
10852: PUSH
10853: LD_INT 104
10855: PUSH
10856: LD_INT 105
10858: PUSH
10859: LD_INT 106
10861: PUSH
10862: LD_INT 107
10864: PUSH
10865: LD_INT 108
10867: PUSH
10868: LD_INT 109
10870: PUSH
10871: LD_INT 110
10873: PUSH
10874: LD_INT 111
10876: PUSH
10877: LD_INT 112
10879: PUSH
10880: LD_INT 113
10882: PUSH
10883: LD_INT 114
10885: PUSH
10886: LD_INT 116
10888: PUSH
10889: LD_INT 117
10891: PUSH
10892: LD_INT 118
10894: PUSH
10895: EMPTY
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: LIST
10901: LIST
10902: LIST
10903: LIST
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: LIST
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: PUSH
10914: EMPTY
10915: LIST
10916: LIST
10917: ST_TO_ADDR
10918: GO 11925
10920: LD_INT 15
10922: DOUBLE
10923: EQUAL
10924: IFTRUE 10928
10926: GO 11152
10928: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
10929: LD_ADDR_VAR 0 2
10933: PUSH
10934: LD_INT 1
10936: PUSH
10937: LD_INT 2
10939: PUSH
10940: LD_INT 3
10942: PUSH
10943: LD_INT 4
10945: PUSH
10946: LD_INT 5
10948: PUSH
10949: LD_INT 6
10951: PUSH
10952: LD_INT 7
10954: PUSH
10955: LD_INT 8
10957: PUSH
10958: LD_INT 9
10960: PUSH
10961: LD_INT 10
10963: PUSH
10964: LD_INT 11
10966: PUSH
10967: LD_INT 12
10969: PUSH
10970: LD_INT 13
10972: PUSH
10973: LD_INT 14
10975: PUSH
10976: LD_INT 15
10978: PUSH
10979: LD_INT 16
10981: PUSH
10982: LD_INT 17
10984: PUSH
10985: LD_INT 18
10987: PUSH
10988: LD_INT 19
10990: PUSH
10991: LD_INT 20
10993: PUSH
10994: LD_INT 21
10996: PUSH
10997: LD_INT 22
10999: PUSH
11000: LD_INT 23
11002: PUSH
11003: LD_INT 24
11005: PUSH
11006: LD_INT 25
11008: PUSH
11009: LD_INT 26
11011: PUSH
11012: LD_INT 27
11014: PUSH
11015: LD_INT 28
11017: PUSH
11018: LD_INT 29
11020: PUSH
11021: LD_INT 30
11023: PUSH
11024: LD_INT 31
11026: PUSH
11027: LD_INT 32
11029: PUSH
11030: LD_INT 33
11032: PUSH
11033: LD_INT 34
11035: PUSH
11036: LD_INT 36
11038: PUSH
11039: EMPTY
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: LIST
11071: LIST
11072: LIST
11073: LIST
11074: LIST
11075: PUSH
11076: LD_INT 101
11078: PUSH
11079: LD_INT 102
11081: PUSH
11082: LD_INT 103
11084: PUSH
11085: LD_INT 104
11087: PUSH
11088: LD_INT 105
11090: PUSH
11091: LD_INT 106
11093: PUSH
11094: LD_INT 107
11096: PUSH
11097: LD_INT 108
11099: PUSH
11100: LD_INT 109
11102: PUSH
11103: LD_INT 110
11105: PUSH
11106: LD_INT 111
11108: PUSH
11109: LD_INT 112
11111: PUSH
11112: LD_INT 113
11114: PUSH
11115: LD_INT 114
11117: PUSH
11118: LD_INT 116
11120: PUSH
11121: LD_INT 117
11123: PUSH
11124: LD_INT 118
11126: PUSH
11127: EMPTY
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: LIST
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: PUSH
11146: EMPTY
11147: LIST
11148: LIST
11149: ST_TO_ADDR
11150: GO 11925
11152: LD_INT 16
11154: DOUBLE
11155: EQUAL
11156: IFTRUE 11160
11158: GO 11296
11160: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11161: LD_ADDR_VAR 0 2
11165: PUSH
11166: LD_INT 2
11168: PUSH
11169: LD_INT 4
11171: PUSH
11172: LD_INT 5
11174: PUSH
11175: LD_INT 7
11177: PUSH
11178: LD_INT 11
11180: PUSH
11181: LD_INT 12
11183: PUSH
11184: LD_INT 15
11186: PUSH
11187: LD_INT 16
11189: PUSH
11190: LD_INT 20
11192: PUSH
11193: LD_INT 21
11195: PUSH
11196: LD_INT 22
11198: PUSH
11199: LD_INT 23
11201: PUSH
11202: LD_INT 25
11204: PUSH
11205: LD_INT 26
11207: PUSH
11208: LD_INT 30
11210: PUSH
11211: LD_INT 31
11213: PUSH
11214: LD_INT 32
11216: PUSH
11217: LD_INT 33
11219: PUSH
11220: LD_INT 34
11222: PUSH
11223: EMPTY
11224: LIST
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: LIST
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: LIST
11241: LIST
11242: LIST
11243: PUSH
11244: LD_INT 101
11246: PUSH
11247: LD_INT 102
11249: PUSH
11250: LD_INT 103
11252: PUSH
11253: LD_INT 106
11255: PUSH
11256: LD_INT 108
11258: PUSH
11259: LD_INT 112
11261: PUSH
11262: LD_INT 113
11264: PUSH
11265: LD_INT 114
11267: PUSH
11268: LD_INT 116
11270: PUSH
11271: LD_INT 117
11273: PUSH
11274: LD_INT 118
11276: PUSH
11277: EMPTY
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: LIST
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: PUSH
11290: EMPTY
11291: LIST
11292: LIST
11293: ST_TO_ADDR
11294: GO 11925
11296: LD_INT 17
11298: DOUBLE
11299: EQUAL
11300: IFTRUE 11304
11302: GO 11528
11304: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
11305: LD_ADDR_VAR 0 2
11309: PUSH
11310: LD_INT 1
11312: PUSH
11313: LD_INT 2
11315: PUSH
11316: LD_INT 3
11318: PUSH
11319: LD_INT 4
11321: PUSH
11322: LD_INT 5
11324: PUSH
11325: LD_INT 6
11327: PUSH
11328: LD_INT 7
11330: PUSH
11331: LD_INT 8
11333: PUSH
11334: LD_INT 9
11336: PUSH
11337: LD_INT 10
11339: PUSH
11340: LD_INT 11
11342: PUSH
11343: LD_INT 12
11345: PUSH
11346: LD_INT 13
11348: PUSH
11349: LD_INT 14
11351: PUSH
11352: LD_INT 15
11354: PUSH
11355: LD_INT 16
11357: PUSH
11358: LD_INT 17
11360: PUSH
11361: LD_INT 18
11363: PUSH
11364: LD_INT 19
11366: PUSH
11367: LD_INT 20
11369: PUSH
11370: LD_INT 21
11372: PUSH
11373: LD_INT 22
11375: PUSH
11376: LD_INT 23
11378: PUSH
11379: LD_INT 24
11381: PUSH
11382: LD_INT 25
11384: PUSH
11385: LD_INT 26
11387: PUSH
11388: LD_INT 27
11390: PUSH
11391: LD_INT 28
11393: PUSH
11394: LD_INT 29
11396: PUSH
11397: LD_INT 30
11399: PUSH
11400: LD_INT 31
11402: PUSH
11403: LD_INT 32
11405: PUSH
11406: LD_INT 33
11408: PUSH
11409: LD_INT 34
11411: PUSH
11412: LD_INT 36
11414: PUSH
11415: EMPTY
11416: LIST
11417: LIST
11418: LIST
11419: LIST
11420: LIST
11421: LIST
11422: LIST
11423: LIST
11424: LIST
11425: LIST
11426: LIST
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: LIST
11450: LIST
11451: PUSH
11452: LD_INT 101
11454: PUSH
11455: LD_INT 102
11457: PUSH
11458: LD_INT 103
11460: PUSH
11461: LD_INT 104
11463: PUSH
11464: LD_INT 105
11466: PUSH
11467: LD_INT 106
11469: PUSH
11470: LD_INT 107
11472: PUSH
11473: LD_INT 108
11475: PUSH
11476: LD_INT 109
11478: PUSH
11479: LD_INT 110
11481: PUSH
11482: LD_INT 111
11484: PUSH
11485: LD_INT 112
11487: PUSH
11488: LD_INT 113
11490: PUSH
11491: LD_INT 114
11493: PUSH
11494: LD_INT 116
11496: PUSH
11497: LD_INT 117
11499: PUSH
11500: LD_INT 118
11502: PUSH
11503: EMPTY
11504: LIST
11505: LIST
11506: LIST
11507: LIST
11508: LIST
11509: LIST
11510: LIST
11511: LIST
11512: LIST
11513: LIST
11514: LIST
11515: LIST
11516: LIST
11517: LIST
11518: LIST
11519: LIST
11520: LIST
11521: PUSH
11522: EMPTY
11523: LIST
11524: LIST
11525: ST_TO_ADDR
11526: GO 11925
11528: LD_INT 18
11530: DOUBLE
11531: EQUAL
11532: IFTRUE 11536
11534: GO 11684
11536: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
11537: LD_ADDR_VAR 0 2
11541: PUSH
11542: LD_INT 2
11544: PUSH
11545: LD_INT 4
11547: PUSH
11548: LD_INT 5
11550: PUSH
11551: LD_INT 7
11553: PUSH
11554: LD_INT 11
11556: PUSH
11557: LD_INT 12
11559: PUSH
11560: LD_INT 15
11562: PUSH
11563: LD_INT 16
11565: PUSH
11566: LD_INT 20
11568: PUSH
11569: LD_INT 21
11571: PUSH
11572: LD_INT 22
11574: PUSH
11575: LD_INT 23
11577: PUSH
11578: LD_INT 25
11580: PUSH
11581: LD_INT 26
11583: PUSH
11584: LD_INT 30
11586: PUSH
11587: LD_INT 31
11589: PUSH
11590: LD_INT 32
11592: PUSH
11593: LD_INT 33
11595: PUSH
11596: LD_INT 34
11598: PUSH
11599: LD_INT 35
11601: PUSH
11602: LD_INT 36
11604: PUSH
11605: EMPTY
11606: LIST
11607: LIST
11608: LIST
11609: LIST
11610: LIST
11611: LIST
11612: LIST
11613: LIST
11614: LIST
11615: LIST
11616: LIST
11617: LIST
11618: LIST
11619: LIST
11620: LIST
11621: LIST
11622: LIST
11623: LIST
11624: LIST
11625: LIST
11626: LIST
11627: PUSH
11628: LD_INT 101
11630: PUSH
11631: LD_INT 102
11633: PUSH
11634: LD_INT 103
11636: PUSH
11637: LD_INT 106
11639: PUSH
11640: LD_INT 108
11642: PUSH
11643: LD_INT 112
11645: PUSH
11646: LD_INT 113
11648: PUSH
11649: LD_INT 114
11651: PUSH
11652: LD_INT 115
11654: PUSH
11655: LD_INT 116
11657: PUSH
11658: LD_INT 117
11660: PUSH
11661: LD_INT 118
11663: PUSH
11664: EMPTY
11665: LIST
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: LIST
11677: PUSH
11678: EMPTY
11679: LIST
11680: LIST
11681: ST_TO_ADDR
11682: GO 11925
11684: LD_INT 19
11686: DOUBLE
11687: EQUAL
11688: IFTRUE 11692
11690: GO 11924
11692: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
11693: LD_ADDR_VAR 0 2
11697: PUSH
11698: LD_INT 1
11700: PUSH
11701: LD_INT 2
11703: PUSH
11704: LD_INT 3
11706: PUSH
11707: LD_INT 4
11709: PUSH
11710: LD_INT 5
11712: PUSH
11713: LD_INT 6
11715: PUSH
11716: LD_INT 7
11718: PUSH
11719: LD_INT 8
11721: PUSH
11722: LD_INT 9
11724: PUSH
11725: LD_INT 10
11727: PUSH
11728: LD_INT 11
11730: PUSH
11731: LD_INT 12
11733: PUSH
11734: LD_INT 13
11736: PUSH
11737: LD_INT 14
11739: PUSH
11740: LD_INT 15
11742: PUSH
11743: LD_INT 16
11745: PUSH
11746: LD_INT 17
11748: PUSH
11749: LD_INT 18
11751: PUSH
11752: LD_INT 19
11754: PUSH
11755: LD_INT 20
11757: PUSH
11758: LD_INT 21
11760: PUSH
11761: LD_INT 22
11763: PUSH
11764: LD_INT 23
11766: PUSH
11767: LD_INT 24
11769: PUSH
11770: LD_INT 25
11772: PUSH
11773: LD_INT 26
11775: PUSH
11776: LD_INT 27
11778: PUSH
11779: LD_INT 28
11781: PUSH
11782: LD_INT 29
11784: PUSH
11785: LD_INT 30
11787: PUSH
11788: LD_INT 31
11790: PUSH
11791: LD_INT 32
11793: PUSH
11794: LD_INT 33
11796: PUSH
11797: LD_INT 34
11799: PUSH
11800: LD_INT 35
11802: PUSH
11803: LD_INT 36
11805: PUSH
11806: EMPTY
11807: LIST
11808: LIST
11809: LIST
11810: LIST
11811: LIST
11812: LIST
11813: LIST
11814: LIST
11815: LIST
11816: LIST
11817: LIST
11818: LIST
11819: LIST
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: LIST
11825: LIST
11826: LIST
11827: LIST
11828: LIST
11829: LIST
11830: LIST
11831: LIST
11832: LIST
11833: LIST
11834: LIST
11835: LIST
11836: LIST
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: LIST
11843: PUSH
11844: LD_INT 101
11846: PUSH
11847: LD_INT 102
11849: PUSH
11850: LD_INT 103
11852: PUSH
11853: LD_INT 104
11855: PUSH
11856: LD_INT 105
11858: PUSH
11859: LD_INT 106
11861: PUSH
11862: LD_INT 107
11864: PUSH
11865: LD_INT 108
11867: PUSH
11868: LD_INT 109
11870: PUSH
11871: LD_INT 110
11873: PUSH
11874: LD_INT 111
11876: PUSH
11877: LD_INT 112
11879: PUSH
11880: LD_INT 113
11882: PUSH
11883: LD_INT 114
11885: PUSH
11886: LD_INT 115
11888: PUSH
11889: LD_INT 116
11891: PUSH
11892: LD_INT 117
11894: PUSH
11895: LD_INT 118
11897: PUSH
11898: EMPTY
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: LIST
11904: LIST
11905: LIST
11906: LIST
11907: LIST
11908: LIST
11909: LIST
11910: LIST
11911: LIST
11912: LIST
11913: LIST
11914: LIST
11915: LIST
11916: LIST
11917: PUSH
11918: EMPTY
11919: LIST
11920: LIST
11921: ST_TO_ADDR
11922: GO 11925
11924: POP
// end else
11925: GO 12156
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
11927: LD_ADDR_VAR 0 2
11931: PUSH
11932: LD_INT 1
11934: PUSH
11935: LD_INT 2
11937: PUSH
11938: LD_INT 3
11940: PUSH
11941: LD_INT 4
11943: PUSH
11944: LD_INT 5
11946: PUSH
11947: LD_INT 6
11949: PUSH
11950: LD_INT 7
11952: PUSH
11953: LD_INT 8
11955: PUSH
11956: LD_INT 9
11958: PUSH
11959: LD_INT 10
11961: PUSH
11962: LD_INT 11
11964: PUSH
11965: LD_INT 12
11967: PUSH
11968: LD_INT 13
11970: PUSH
11971: LD_INT 14
11973: PUSH
11974: LD_INT 15
11976: PUSH
11977: LD_INT 16
11979: PUSH
11980: LD_INT 17
11982: PUSH
11983: LD_INT 18
11985: PUSH
11986: LD_INT 19
11988: PUSH
11989: LD_INT 20
11991: PUSH
11992: LD_INT 21
11994: PUSH
11995: LD_INT 22
11997: PUSH
11998: LD_INT 23
12000: PUSH
12001: LD_INT 24
12003: PUSH
12004: LD_INT 25
12006: PUSH
12007: LD_INT 26
12009: PUSH
12010: LD_INT 27
12012: PUSH
12013: LD_INT 28
12015: PUSH
12016: LD_INT 29
12018: PUSH
12019: LD_INT 30
12021: PUSH
12022: LD_INT 31
12024: PUSH
12025: LD_INT 32
12027: PUSH
12028: LD_INT 33
12030: PUSH
12031: LD_INT 34
12033: PUSH
12034: LD_INT 35
12036: PUSH
12037: LD_INT 36
12039: PUSH
12040: EMPTY
12041: LIST
12042: LIST
12043: LIST
12044: LIST
12045: LIST
12046: LIST
12047: LIST
12048: LIST
12049: LIST
12050: LIST
12051: LIST
12052: LIST
12053: LIST
12054: LIST
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: LIST
12067: LIST
12068: LIST
12069: LIST
12070: LIST
12071: LIST
12072: LIST
12073: LIST
12074: LIST
12075: LIST
12076: LIST
12077: PUSH
12078: LD_INT 101
12080: PUSH
12081: LD_INT 102
12083: PUSH
12084: LD_INT 103
12086: PUSH
12087: LD_INT 104
12089: PUSH
12090: LD_INT 105
12092: PUSH
12093: LD_INT 106
12095: PUSH
12096: LD_INT 107
12098: PUSH
12099: LD_INT 108
12101: PUSH
12102: LD_INT 109
12104: PUSH
12105: LD_INT 110
12107: PUSH
12108: LD_INT 111
12110: PUSH
12111: LD_INT 112
12113: PUSH
12114: LD_INT 113
12116: PUSH
12117: LD_INT 114
12119: PUSH
12120: LD_INT 115
12122: PUSH
12123: LD_INT 116
12125: PUSH
12126: LD_INT 117
12128: PUSH
12129: LD_INT 118
12131: PUSH
12132: EMPTY
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: LIST
12138: LIST
12139: LIST
12140: LIST
12141: LIST
12142: LIST
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: LIST
12150: LIST
12151: PUSH
12152: EMPTY
12153: LIST
12154: LIST
12155: ST_TO_ADDR
// if result then
12156: LD_VAR 0 2
12160: IFFALSE 12946
// begin normal :=  ;
12162: LD_ADDR_VAR 0 5
12166: PUSH
12167: LD_STRING 
12169: ST_TO_ADDR
// hardcore :=  ;
12170: LD_ADDR_VAR 0 6
12174: PUSH
12175: LD_STRING 
12177: ST_TO_ADDR
// active :=  ;
12178: LD_ADDR_VAR 0 7
12182: PUSH
12183: LD_STRING 
12185: ST_TO_ADDR
// for i = 1 to normalCounter do
12186: LD_ADDR_VAR 0 8
12190: PUSH
12191: DOUBLE
12192: LD_INT 1
12194: DEC
12195: ST_TO_ADDR
12196: LD_EXP 30
12200: PUSH
12201: FOR_TO
12202: IFFALSE 12303
// begin tmp := 0 ;
12204: LD_ADDR_VAR 0 3
12208: PUSH
12209: LD_STRING 0
12211: ST_TO_ADDR
// if result [ 1 ] then
12212: LD_VAR 0 2
12216: PUSH
12217: LD_INT 1
12219: ARRAY
12220: IFFALSE 12285
// if result [ 1 ] [ 1 ] = i then
12222: LD_VAR 0 2
12226: PUSH
12227: LD_INT 1
12229: ARRAY
12230: PUSH
12231: LD_INT 1
12233: ARRAY
12234: PUSH
12235: LD_VAR 0 8
12239: EQUAL
12240: IFFALSE 12285
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12242: LD_ADDR_VAR 0 2
12246: PUSH
12247: LD_VAR 0 2
12251: PPUSH
12252: LD_INT 1
12254: PPUSH
12255: LD_VAR 0 2
12259: PUSH
12260: LD_INT 1
12262: ARRAY
12263: PPUSH
12264: LD_INT 1
12266: PPUSH
12267: CALL_OW 3
12271: PPUSH
12272: CALL_OW 1
12276: ST_TO_ADDR
// tmp := 1 ;
12277: LD_ADDR_VAR 0 3
12281: PUSH
12282: LD_STRING 1
12284: ST_TO_ADDR
// end ; normal := normal & tmp ;
12285: LD_ADDR_VAR 0 5
12289: PUSH
12290: LD_VAR 0 5
12294: PUSH
12295: LD_VAR 0 3
12299: STR
12300: ST_TO_ADDR
// end ;
12301: GO 12201
12303: POP
12304: POP
// for i = 1 to hardcoreCounter do
12305: LD_ADDR_VAR 0 8
12309: PUSH
12310: DOUBLE
12311: LD_INT 1
12313: DEC
12314: ST_TO_ADDR
12315: LD_EXP 31
12319: PUSH
12320: FOR_TO
12321: IFFALSE 12426
// begin tmp := 0 ;
12323: LD_ADDR_VAR 0 3
12327: PUSH
12328: LD_STRING 0
12330: ST_TO_ADDR
// if result [ 2 ] then
12331: LD_VAR 0 2
12335: PUSH
12336: LD_INT 2
12338: ARRAY
12339: IFFALSE 12408
// if result [ 2 ] [ 1 ] = 100 + i then
12341: LD_VAR 0 2
12345: PUSH
12346: LD_INT 2
12348: ARRAY
12349: PUSH
12350: LD_INT 1
12352: ARRAY
12353: PUSH
12354: LD_INT 100
12356: PUSH
12357: LD_VAR 0 8
12361: PLUS
12362: EQUAL
12363: IFFALSE 12408
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12365: LD_ADDR_VAR 0 2
12369: PUSH
12370: LD_VAR 0 2
12374: PPUSH
12375: LD_INT 2
12377: PPUSH
12378: LD_VAR 0 2
12382: PUSH
12383: LD_INT 2
12385: ARRAY
12386: PPUSH
12387: LD_INT 1
12389: PPUSH
12390: CALL_OW 3
12394: PPUSH
12395: CALL_OW 1
12399: ST_TO_ADDR
// tmp := 1 ;
12400: LD_ADDR_VAR 0 3
12404: PUSH
12405: LD_STRING 1
12407: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12408: LD_ADDR_VAR 0 6
12412: PUSH
12413: LD_VAR 0 6
12417: PUSH
12418: LD_VAR 0 3
12422: STR
12423: ST_TO_ADDR
// end ;
12424: GO 12320
12426: POP
12427: POP
// if isGameLoad then
12428: LD_VAR 0 1
12432: IFFALSE 12907
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
12434: LD_ADDR_VAR 0 4
12438: PUSH
12439: LD_EXP 34
12443: PUSH
12444: LD_EXP 33
12448: PUSH
12449: LD_EXP 35
12453: PUSH
12454: LD_EXP 32
12458: PUSH
12459: LD_EXP 36
12463: PUSH
12464: LD_EXP 37
12468: PUSH
12469: LD_EXP 38
12473: PUSH
12474: LD_EXP 39
12478: PUSH
12479: LD_EXP 40
12483: PUSH
12484: LD_EXP 41
12488: PUSH
12489: LD_EXP 42
12493: PUSH
12494: LD_EXP 43
12498: PUSH
12499: LD_EXP 44
12503: PUSH
12504: LD_EXP 45
12508: PUSH
12509: LD_EXP 53
12513: PUSH
12514: LD_EXP 54
12518: PUSH
12519: LD_EXP 55
12523: PUSH
12524: LD_EXP 56
12528: PUSH
12529: LD_EXP 58
12533: PUSH
12534: LD_EXP 59
12538: PUSH
12539: LD_EXP 60
12543: PUSH
12544: LD_EXP 63
12548: PUSH
12549: LD_EXP 65
12553: PUSH
12554: LD_EXP 66
12558: PUSH
12559: LD_EXP 67
12563: PUSH
12564: LD_EXP 69
12568: PUSH
12569: LD_EXP 70
12573: PUSH
12574: LD_EXP 73
12578: PUSH
12579: LD_EXP 74
12583: PUSH
12584: LD_EXP 75
12588: PUSH
12589: LD_EXP 76
12593: PUSH
12594: LD_EXP 77
12598: PUSH
12599: LD_EXP 78
12603: PUSH
12604: LD_EXP 79
12608: PUSH
12609: LD_EXP 80
12613: PUSH
12614: LD_EXP 81
12618: PUSH
12619: LD_EXP 46
12623: PUSH
12624: LD_EXP 47
12628: PUSH
12629: LD_EXP 50
12633: PUSH
12634: LD_EXP 51
12638: PUSH
12639: LD_EXP 52
12643: PUSH
12644: LD_EXP 48
12648: PUSH
12649: LD_EXP 49
12653: PUSH
12654: LD_EXP 57
12658: PUSH
12659: LD_EXP 61
12663: PUSH
12664: LD_EXP 62
12668: PUSH
12669: LD_EXP 64
12673: PUSH
12674: LD_EXP 68
12678: PUSH
12679: LD_EXP 71
12683: PUSH
12684: LD_EXP 72
12688: PUSH
12689: LD_EXP 82
12693: PUSH
12694: LD_EXP 83
12698: PUSH
12699: LD_EXP 84
12703: PUSH
12704: LD_EXP 85
12708: PUSH
12709: EMPTY
12710: LIST
12711: LIST
12712: LIST
12713: LIST
12714: LIST
12715: LIST
12716: LIST
12717: LIST
12718: LIST
12719: LIST
12720: LIST
12721: LIST
12722: LIST
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: LIST
12728: LIST
12729: LIST
12730: LIST
12731: LIST
12732: LIST
12733: LIST
12734: LIST
12735: LIST
12736: LIST
12737: LIST
12738: LIST
12739: LIST
12740: LIST
12741: LIST
12742: LIST
12743: LIST
12744: LIST
12745: LIST
12746: LIST
12747: LIST
12748: LIST
12749: LIST
12750: LIST
12751: LIST
12752: LIST
12753: LIST
12754: LIST
12755: LIST
12756: LIST
12757: LIST
12758: LIST
12759: LIST
12760: LIST
12761: LIST
12762: LIST
12763: LIST
12764: ST_TO_ADDR
// tmp :=  ;
12765: LD_ADDR_VAR 0 3
12769: PUSH
12770: LD_STRING 
12772: ST_TO_ADDR
// for i = 1 to normalCounter do
12773: LD_ADDR_VAR 0 8
12777: PUSH
12778: DOUBLE
12779: LD_INT 1
12781: DEC
12782: ST_TO_ADDR
12783: LD_EXP 30
12787: PUSH
12788: FOR_TO
12789: IFFALSE 12825
// begin if flags [ i ] then
12791: LD_VAR 0 4
12795: PUSH
12796: LD_VAR 0 8
12800: ARRAY
12801: IFFALSE 12823
// tmp := tmp & i & ; ;
12803: LD_ADDR_VAR 0 3
12807: PUSH
12808: LD_VAR 0 3
12812: PUSH
12813: LD_VAR 0 8
12817: STR
12818: PUSH
12819: LD_STRING ;
12821: STR
12822: ST_TO_ADDR
// end ;
12823: GO 12788
12825: POP
12826: POP
// for i = 1 to hardcoreCounter do
12827: LD_ADDR_VAR 0 8
12831: PUSH
12832: DOUBLE
12833: LD_INT 1
12835: DEC
12836: ST_TO_ADDR
12837: LD_EXP 31
12841: PUSH
12842: FOR_TO
12843: IFFALSE 12889
// begin if flags [ normalCounter + i ] then
12845: LD_VAR 0 4
12849: PUSH
12850: LD_EXP 30
12854: PUSH
12855: LD_VAR 0 8
12859: PLUS
12860: ARRAY
12861: IFFALSE 12887
// tmp := tmp & ( 100 + i ) & ; ;
12863: LD_ADDR_VAR 0 3
12867: PUSH
12868: LD_VAR 0 3
12872: PUSH
12873: LD_INT 100
12875: PUSH
12876: LD_VAR 0 8
12880: PLUS
12881: STR
12882: PUSH
12883: LD_STRING ;
12885: STR
12886: ST_TO_ADDR
// end ;
12887: GO 12842
12889: POP
12890: POP
// if tmp then
12891: LD_VAR 0 3
12895: IFFALSE 12907
// active := tmp ;
12897: LD_ADDR_VAR 0 7
12901: PUSH
12902: LD_VAR 0 3
12906: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
12907: LD_STRING getStreamItemsFromMission("
12909: PUSH
12910: LD_VAR 0 5
12914: STR
12915: PUSH
12916: LD_STRING ","
12918: STR
12919: PUSH
12920: LD_VAR 0 6
12924: STR
12925: PUSH
12926: LD_STRING ","
12928: STR
12929: PUSH
12930: LD_VAR 0 7
12934: STR
12935: PUSH
12936: LD_STRING ")
12938: STR
12939: PPUSH
12940: CALL_OW 559
// end else
12944: GO 12953
// ToLua ( getStreamItemsFromMission("","","") ) ;
12946: LD_STRING getStreamItemsFromMission("","","")
12948: PPUSH
12949: CALL_OW 559
// end ;
12953: LD_VAR 0 2
12957: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
12958: LD_EXP 29
12962: PUSH
12963: LD_EXP 34
12967: AND
12968: IFFALSE 13092
12970: GO 12972
12972: DISABLE
12973: LD_INT 0
12975: PPUSH
12976: PPUSH
// begin enable ;
12977: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
12978: LD_ADDR_VAR 0 2
12982: PUSH
12983: LD_INT 22
12985: PUSH
12986: LD_OWVAR 2
12990: PUSH
12991: EMPTY
12992: LIST
12993: LIST
12994: PUSH
12995: LD_INT 2
12997: PUSH
12998: LD_INT 34
13000: PUSH
13001: LD_INT 7
13003: PUSH
13004: EMPTY
13005: LIST
13006: LIST
13007: PUSH
13008: LD_INT 34
13010: PUSH
13011: LD_INT 45
13013: PUSH
13014: EMPTY
13015: LIST
13016: LIST
13017: PUSH
13018: LD_INT 34
13020: PUSH
13021: LD_INT 28
13023: PUSH
13024: EMPTY
13025: LIST
13026: LIST
13027: PUSH
13028: LD_INT 34
13030: PUSH
13031: LD_INT 47
13033: PUSH
13034: EMPTY
13035: LIST
13036: LIST
13037: PUSH
13038: EMPTY
13039: LIST
13040: LIST
13041: LIST
13042: LIST
13043: LIST
13044: PUSH
13045: EMPTY
13046: LIST
13047: LIST
13048: PPUSH
13049: CALL_OW 69
13053: ST_TO_ADDR
// if not tmp then
13054: LD_VAR 0 2
13058: NOT
13059: IFFALSE 13063
// exit ;
13061: GO 13092
// for i in tmp do
13063: LD_ADDR_VAR 0 1
13067: PUSH
13068: LD_VAR 0 2
13072: PUSH
13073: FOR_IN
13074: IFFALSE 13090
// begin SetLives ( i , 0 ) ;
13076: LD_VAR 0 1
13080: PPUSH
13081: LD_INT 0
13083: PPUSH
13084: CALL_OW 234
// end ;
13088: GO 13073
13090: POP
13091: POP
// end ;
13092: PPOPN 2
13094: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13095: LD_EXP 29
13099: PUSH
13100: LD_EXP 35
13104: AND
13105: IFFALSE 13189
13107: GO 13109
13109: DISABLE
13110: LD_INT 0
13112: PPUSH
13113: PPUSH
// begin enable ;
13114: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13115: LD_ADDR_VAR 0 2
13119: PUSH
13120: LD_INT 22
13122: PUSH
13123: LD_OWVAR 2
13127: PUSH
13128: EMPTY
13129: LIST
13130: LIST
13131: PUSH
13132: LD_INT 32
13134: PUSH
13135: LD_INT 3
13137: PUSH
13138: EMPTY
13139: LIST
13140: LIST
13141: PUSH
13142: EMPTY
13143: LIST
13144: LIST
13145: PPUSH
13146: CALL_OW 69
13150: ST_TO_ADDR
// if not tmp then
13151: LD_VAR 0 2
13155: NOT
13156: IFFALSE 13160
// exit ;
13158: GO 13189
// for i in tmp do
13160: LD_ADDR_VAR 0 1
13164: PUSH
13165: LD_VAR 0 2
13169: PUSH
13170: FOR_IN
13171: IFFALSE 13187
// begin SetLives ( i , 0 ) ;
13173: LD_VAR 0 1
13177: PPUSH
13178: LD_INT 0
13180: PPUSH
13181: CALL_OW 234
// end ;
13185: GO 13170
13187: POP
13188: POP
// end ;
13189: PPOPN 2
13191: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13192: LD_EXP 29
13196: PUSH
13197: LD_EXP 32
13201: AND
13202: IFFALSE 13295
13204: GO 13206
13206: DISABLE
13207: LD_INT 0
13209: PPUSH
// begin enable ;
13210: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13211: LD_ADDR_VAR 0 1
13215: PUSH
13216: LD_INT 22
13218: PUSH
13219: LD_OWVAR 2
13223: PUSH
13224: EMPTY
13225: LIST
13226: LIST
13227: PUSH
13228: LD_INT 2
13230: PUSH
13231: LD_INT 25
13233: PUSH
13234: LD_INT 5
13236: PUSH
13237: EMPTY
13238: LIST
13239: LIST
13240: PUSH
13241: LD_INT 25
13243: PUSH
13244: LD_INT 9
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: PUSH
13251: LD_INT 25
13253: PUSH
13254: LD_INT 8
13256: PUSH
13257: EMPTY
13258: LIST
13259: LIST
13260: PUSH
13261: EMPTY
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: PUSH
13267: EMPTY
13268: LIST
13269: LIST
13270: PPUSH
13271: CALL_OW 69
13275: PUSH
13276: FOR_IN
13277: IFFALSE 13293
// begin SetClass ( i , 1 ) ;
13279: LD_VAR 0 1
13283: PPUSH
13284: LD_INT 1
13286: PPUSH
13287: CALL_OW 336
// end ;
13291: GO 13276
13293: POP
13294: POP
// end ;
13295: PPOPN 1
13297: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13298: LD_EXP 29
13302: PUSH
13303: LD_EXP 33
13307: AND
13308: PUSH
13309: LD_OWVAR 65
13313: PUSH
13314: LD_INT 7
13316: LESS
13317: AND
13318: IFFALSE 13332
13320: GO 13322
13322: DISABLE
// begin enable ;
13323: ENABLE
// game_speed := 7 ;
13324: LD_ADDR_OWVAR 65
13328: PUSH
13329: LD_INT 7
13331: ST_TO_ADDR
// end ;
13332: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13333: LD_EXP 29
13337: PUSH
13338: LD_EXP 36
13342: AND
13343: IFFALSE 13545
13345: GO 13347
13347: DISABLE
13348: LD_INT 0
13350: PPUSH
13351: PPUSH
13352: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13353: LD_ADDR_VAR 0 3
13357: PUSH
13358: LD_INT 81
13360: PUSH
13361: LD_OWVAR 2
13365: PUSH
13366: EMPTY
13367: LIST
13368: LIST
13369: PUSH
13370: LD_INT 21
13372: PUSH
13373: LD_INT 1
13375: PUSH
13376: EMPTY
13377: LIST
13378: LIST
13379: PUSH
13380: EMPTY
13381: LIST
13382: LIST
13383: PPUSH
13384: CALL_OW 69
13388: ST_TO_ADDR
// if not tmp then
13389: LD_VAR 0 3
13393: NOT
13394: IFFALSE 13398
// exit ;
13396: GO 13545
// if tmp > 5 then
13398: LD_VAR 0 3
13402: PUSH
13403: LD_INT 5
13405: GREATER
13406: IFFALSE 13418
// k := 5 else
13408: LD_ADDR_VAR 0 2
13412: PUSH
13413: LD_INT 5
13415: ST_TO_ADDR
13416: GO 13428
// k := tmp ;
13418: LD_ADDR_VAR 0 2
13422: PUSH
13423: LD_VAR 0 3
13427: ST_TO_ADDR
// for i := 1 to k do
13428: LD_ADDR_VAR 0 1
13432: PUSH
13433: DOUBLE
13434: LD_INT 1
13436: DEC
13437: ST_TO_ADDR
13438: LD_VAR 0 2
13442: PUSH
13443: FOR_TO
13444: IFFALSE 13543
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13446: LD_VAR 0 3
13450: PUSH
13451: LD_VAR 0 1
13455: ARRAY
13456: PPUSH
13457: LD_VAR 0 1
13461: PUSH
13462: LD_INT 4
13464: MOD
13465: PUSH
13466: LD_INT 1
13468: PLUS
13469: PPUSH
13470: CALL_OW 259
13474: PUSH
13475: LD_INT 10
13477: LESS
13478: IFFALSE 13541
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13480: LD_VAR 0 3
13484: PUSH
13485: LD_VAR 0 1
13489: ARRAY
13490: PPUSH
13491: LD_VAR 0 1
13495: PUSH
13496: LD_INT 4
13498: MOD
13499: PUSH
13500: LD_INT 1
13502: PLUS
13503: PPUSH
13504: LD_VAR 0 3
13508: PUSH
13509: LD_VAR 0 1
13513: ARRAY
13514: PPUSH
13515: LD_VAR 0 1
13519: PUSH
13520: LD_INT 4
13522: MOD
13523: PUSH
13524: LD_INT 1
13526: PLUS
13527: PPUSH
13528: CALL_OW 259
13532: PUSH
13533: LD_INT 1
13535: PLUS
13536: PPUSH
13537: CALL_OW 237
13541: GO 13443
13543: POP
13544: POP
// end ;
13545: PPOPN 3
13547: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13548: LD_EXP 29
13552: PUSH
13553: LD_EXP 37
13557: AND
13558: IFFALSE 13578
13560: GO 13562
13562: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13563: LD_INT 4
13565: PPUSH
13566: LD_OWVAR 2
13570: PPUSH
13571: LD_INT 0
13573: PPUSH
13574: CALL_OW 324
13578: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13579: LD_EXP 29
13583: PUSH
13584: LD_EXP 66
13588: AND
13589: IFFALSE 13609
13591: GO 13593
13593: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13594: LD_INT 19
13596: PPUSH
13597: LD_OWVAR 2
13601: PPUSH
13602: LD_INT 0
13604: PPUSH
13605: CALL_OW 324
13609: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13610: LD_EXP 29
13614: PUSH
13615: LD_EXP 38
13619: AND
13620: IFFALSE 13722
13622: GO 13624
13624: DISABLE
13625: LD_INT 0
13627: PPUSH
13628: PPUSH
// begin enable ;
13629: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13630: LD_ADDR_VAR 0 2
13634: PUSH
13635: LD_INT 22
13637: PUSH
13638: LD_OWVAR 2
13642: PUSH
13643: EMPTY
13644: LIST
13645: LIST
13646: PUSH
13647: LD_INT 2
13649: PUSH
13650: LD_INT 34
13652: PUSH
13653: LD_INT 11
13655: PUSH
13656: EMPTY
13657: LIST
13658: LIST
13659: PUSH
13660: LD_INT 34
13662: PUSH
13663: LD_INT 30
13665: PUSH
13666: EMPTY
13667: LIST
13668: LIST
13669: PUSH
13670: EMPTY
13671: LIST
13672: LIST
13673: LIST
13674: PUSH
13675: EMPTY
13676: LIST
13677: LIST
13678: PPUSH
13679: CALL_OW 69
13683: ST_TO_ADDR
// if not tmp then
13684: LD_VAR 0 2
13688: NOT
13689: IFFALSE 13693
// exit ;
13691: GO 13722
// for i in tmp do
13693: LD_ADDR_VAR 0 1
13697: PUSH
13698: LD_VAR 0 2
13702: PUSH
13703: FOR_IN
13704: IFFALSE 13720
// begin SetLives ( i , 0 ) ;
13706: LD_VAR 0 1
13710: PPUSH
13711: LD_INT 0
13713: PPUSH
13714: CALL_OW 234
// end ;
13718: GO 13703
13720: POP
13721: POP
// end ;
13722: PPOPN 2
13724: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13725: LD_EXP 29
13729: PUSH
13730: LD_EXP 39
13734: AND
13735: IFFALSE 13755
13737: GO 13739
13739: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13740: LD_INT 32
13742: PPUSH
13743: LD_OWVAR 2
13747: PPUSH
13748: LD_INT 0
13750: PPUSH
13751: CALL_OW 324
13755: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13756: LD_EXP 29
13760: PUSH
13761: LD_EXP 40
13765: AND
13766: IFFALSE 13947
13768: GO 13770
13770: DISABLE
13771: LD_INT 0
13773: PPUSH
13774: PPUSH
13775: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13776: LD_ADDR_VAR 0 2
13780: PUSH
13781: LD_INT 22
13783: PUSH
13784: LD_OWVAR 2
13788: PUSH
13789: EMPTY
13790: LIST
13791: LIST
13792: PUSH
13793: LD_INT 33
13795: PUSH
13796: LD_INT 3
13798: PUSH
13799: EMPTY
13800: LIST
13801: LIST
13802: PUSH
13803: EMPTY
13804: LIST
13805: LIST
13806: PPUSH
13807: CALL_OW 69
13811: ST_TO_ADDR
// if not tmp then
13812: LD_VAR 0 2
13816: NOT
13817: IFFALSE 13821
// exit ;
13819: GO 13947
// side := 0 ;
13821: LD_ADDR_VAR 0 3
13825: PUSH
13826: LD_INT 0
13828: ST_TO_ADDR
// for i := 1 to 8 do
13829: LD_ADDR_VAR 0 1
13833: PUSH
13834: DOUBLE
13835: LD_INT 1
13837: DEC
13838: ST_TO_ADDR
13839: LD_INT 8
13841: PUSH
13842: FOR_TO
13843: IFFALSE 13891
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
13845: LD_OWVAR 2
13849: PUSH
13850: LD_VAR 0 1
13854: NONEQUAL
13855: PUSH
13856: LD_OWVAR 2
13860: PPUSH
13861: LD_VAR 0 1
13865: PPUSH
13866: CALL_OW 81
13870: PUSH
13871: LD_INT 2
13873: EQUAL
13874: AND
13875: IFFALSE 13889
// begin side := i ;
13877: LD_ADDR_VAR 0 3
13881: PUSH
13882: LD_VAR 0 1
13886: ST_TO_ADDR
// break ;
13887: GO 13891
// end ;
13889: GO 13842
13891: POP
13892: POP
// if not side then
13893: LD_VAR 0 3
13897: NOT
13898: IFFALSE 13902
// exit ;
13900: GO 13947
// for i := 1 to tmp do
13902: LD_ADDR_VAR 0 1
13906: PUSH
13907: DOUBLE
13908: LD_INT 1
13910: DEC
13911: ST_TO_ADDR
13912: LD_VAR 0 2
13916: PUSH
13917: FOR_TO
13918: IFFALSE 13945
// if Prob ( 60 ) then
13920: LD_INT 60
13922: PPUSH
13923: CALL_OW 13
13927: IFFALSE 13943
// SetSide ( i , side ) ;
13929: LD_VAR 0 1
13933: PPUSH
13934: LD_VAR 0 3
13938: PPUSH
13939: CALL_OW 235
13943: GO 13917
13945: POP
13946: POP
// end ;
13947: PPOPN 3
13949: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
13950: LD_EXP 29
13954: PUSH
13955: LD_EXP 42
13959: AND
13960: IFFALSE 14079
13962: GO 13964
13964: DISABLE
13965: LD_INT 0
13967: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
13968: LD_ADDR_VAR 0 1
13972: PUSH
13973: LD_INT 22
13975: PUSH
13976: LD_OWVAR 2
13980: PUSH
13981: EMPTY
13982: LIST
13983: LIST
13984: PUSH
13985: LD_INT 21
13987: PUSH
13988: LD_INT 1
13990: PUSH
13991: EMPTY
13992: LIST
13993: LIST
13994: PUSH
13995: LD_INT 3
13997: PUSH
13998: LD_INT 23
14000: PUSH
14001: LD_INT 0
14003: PUSH
14004: EMPTY
14005: LIST
14006: LIST
14007: PUSH
14008: EMPTY
14009: LIST
14010: LIST
14011: PUSH
14012: EMPTY
14013: LIST
14014: LIST
14015: LIST
14016: PPUSH
14017: CALL_OW 69
14021: PUSH
14022: FOR_IN
14023: IFFALSE 14077
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14025: LD_VAR 0 1
14029: PPUSH
14030: CALL_OW 257
14034: PUSH
14035: LD_INT 1
14037: PUSH
14038: LD_INT 2
14040: PUSH
14041: LD_INT 3
14043: PUSH
14044: LD_INT 4
14046: PUSH
14047: EMPTY
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: IN
14053: IFFALSE 14075
// SetClass ( un , rand ( 1 , 4 ) ) ;
14055: LD_VAR 0 1
14059: PPUSH
14060: LD_INT 1
14062: PPUSH
14063: LD_INT 4
14065: PPUSH
14066: CALL_OW 12
14070: PPUSH
14071: CALL_OW 336
14075: GO 14022
14077: POP
14078: POP
// end ;
14079: PPOPN 1
14081: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14082: LD_EXP 29
14086: PUSH
14087: LD_EXP 41
14091: AND
14092: IFFALSE 14171
14094: GO 14096
14096: DISABLE
14097: LD_INT 0
14099: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14100: LD_ADDR_VAR 0 1
14104: PUSH
14105: LD_INT 22
14107: PUSH
14108: LD_OWVAR 2
14112: PUSH
14113: EMPTY
14114: LIST
14115: LIST
14116: PUSH
14117: LD_INT 21
14119: PUSH
14120: LD_INT 3
14122: PUSH
14123: EMPTY
14124: LIST
14125: LIST
14126: PUSH
14127: EMPTY
14128: LIST
14129: LIST
14130: PPUSH
14131: CALL_OW 69
14135: ST_TO_ADDR
// if not tmp then
14136: LD_VAR 0 1
14140: NOT
14141: IFFALSE 14145
// exit ;
14143: GO 14171
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14145: LD_VAR 0 1
14149: PUSH
14150: LD_INT 1
14152: PPUSH
14153: LD_VAR 0 1
14157: PPUSH
14158: CALL_OW 12
14162: ARRAY
14163: PPUSH
14164: LD_INT 100
14166: PPUSH
14167: CALL_OW 234
// end ;
14171: PPOPN 1
14173: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14174: LD_EXP 29
14178: PUSH
14179: LD_EXP 43
14183: AND
14184: IFFALSE 14282
14186: GO 14188
14188: DISABLE
14189: LD_INT 0
14191: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14192: LD_ADDR_VAR 0 1
14196: PUSH
14197: LD_INT 22
14199: PUSH
14200: LD_OWVAR 2
14204: PUSH
14205: EMPTY
14206: LIST
14207: LIST
14208: PUSH
14209: LD_INT 21
14211: PUSH
14212: LD_INT 1
14214: PUSH
14215: EMPTY
14216: LIST
14217: LIST
14218: PUSH
14219: EMPTY
14220: LIST
14221: LIST
14222: PPUSH
14223: CALL_OW 69
14227: ST_TO_ADDR
// if not tmp then
14228: LD_VAR 0 1
14232: NOT
14233: IFFALSE 14237
// exit ;
14235: GO 14282
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14237: LD_VAR 0 1
14241: PUSH
14242: LD_INT 1
14244: PPUSH
14245: LD_VAR 0 1
14249: PPUSH
14250: CALL_OW 12
14254: ARRAY
14255: PPUSH
14256: LD_INT 1
14258: PPUSH
14259: LD_INT 4
14261: PPUSH
14262: CALL_OW 12
14266: PPUSH
14267: LD_INT 3000
14269: PPUSH
14270: LD_INT 9000
14272: PPUSH
14273: CALL_OW 12
14277: PPUSH
14278: CALL_OW 492
// end ;
14282: PPOPN 1
14284: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14285: LD_EXP 29
14289: PUSH
14290: LD_EXP 44
14294: AND
14295: IFFALSE 14315
14297: GO 14299
14299: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14300: LD_INT 1
14302: PPUSH
14303: LD_OWVAR 2
14307: PPUSH
14308: LD_INT 0
14310: PPUSH
14311: CALL_OW 324
14315: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14316: LD_EXP 29
14320: PUSH
14321: LD_EXP 45
14325: AND
14326: IFFALSE 14409
14328: GO 14330
14330: DISABLE
14331: LD_INT 0
14333: PPUSH
14334: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14335: LD_ADDR_VAR 0 2
14339: PUSH
14340: LD_INT 22
14342: PUSH
14343: LD_OWVAR 2
14347: PUSH
14348: EMPTY
14349: LIST
14350: LIST
14351: PUSH
14352: LD_INT 21
14354: PUSH
14355: LD_INT 3
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: PUSH
14362: EMPTY
14363: LIST
14364: LIST
14365: PPUSH
14366: CALL_OW 69
14370: ST_TO_ADDR
// if not tmp then
14371: LD_VAR 0 2
14375: NOT
14376: IFFALSE 14380
// exit ;
14378: GO 14409
// for i in tmp do
14380: LD_ADDR_VAR 0 1
14384: PUSH
14385: LD_VAR 0 2
14389: PUSH
14390: FOR_IN
14391: IFFALSE 14407
// SetBLevel ( i , 10 ) ;
14393: LD_VAR 0 1
14397: PPUSH
14398: LD_INT 10
14400: PPUSH
14401: CALL_OW 241
14405: GO 14390
14407: POP
14408: POP
// end ;
14409: PPOPN 2
14411: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14412: LD_EXP 29
14416: PUSH
14417: LD_EXP 46
14421: AND
14422: IFFALSE 14533
14424: GO 14426
14426: DISABLE
14427: LD_INT 0
14429: PPUSH
14430: PPUSH
14431: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14432: LD_ADDR_VAR 0 3
14436: PUSH
14437: LD_INT 22
14439: PUSH
14440: LD_OWVAR 2
14444: PUSH
14445: EMPTY
14446: LIST
14447: LIST
14448: PUSH
14449: LD_INT 25
14451: PUSH
14452: LD_INT 1
14454: PUSH
14455: EMPTY
14456: LIST
14457: LIST
14458: PUSH
14459: EMPTY
14460: LIST
14461: LIST
14462: PPUSH
14463: CALL_OW 69
14467: ST_TO_ADDR
// if not tmp then
14468: LD_VAR 0 3
14472: NOT
14473: IFFALSE 14477
// exit ;
14475: GO 14533
// un := tmp [ rand ( 1 , tmp ) ] ;
14477: LD_ADDR_VAR 0 2
14481: PUSH
14482: LD_VAR 0 3
14486: PUSH
14487: LD_INT 1
14489: PPUSH
14490: LD_VAR 0 3
14494: PPUSH
14495: CALL_OW 12
14499: ARRAY
14500: ST_TO_ADDR
// if Crawls ( un ) then
14501: LD_VAR 0 2
14505: PPUSH
14506: CALL_OW 318
14510: IFFALSE 14521
// ComWalk ( un ) ;
14512: LD_VAR 0 2
14516: PPUSH
14517: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14521: LD_VAR 0 2
14525: PPUSH
14526: LD_INT 5
14528: PPUSH
14529: CALL_OW 336
// end ;
14533: PPOPN 3
14535: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
14536: LD_EXP 29
14540: PUSH
14541: LD_EXP 47
14545: AND
14546: PUSH
14547: LD_OWVAR 67
14551: PUSH
14552: LD_INT 4
14554: LESS
14555: AND
14556: IFFALSE 14575
14558: GO 14560
14560: DISABLE
// begin Difficulty := Difficulty + 1 ;
14561: LD_ADDR_OWVAR 67
14565: PUSH
14566: LD_OWVAR 67
14570: PUSH
14571: LD_INT 1
14573: PLUS
14574: ST_TO_ADDR
// end ;
14575: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14576: LD_EXP 29
14580: PUSH
14581: LD_EXP 48
14585: AND
14586: IFFALSE 14689
14588: GO 14590
14590: DISABLE
14591: LD_INT 0
14593: PPUSH
// begin for i := 1 to 5 do
14594: LD_ADDR_VAR 0 1
14598: PUSH
14599: DOUBLE
14600: LD_INT 1
14602: DEC
14603: ST_TO_ADDR
14604: LD_INT 5
14606: PUSH
14607: FOR_TO
14608: IFFALSE 14687
// begin uc_nation := nation_nature ;
14610: LD_ADDR_OWVAR 21
14614: PUSH
14615: LD_INT 0
14617: ST_TO_ADDR
// uc_side := 0 ;
14618: LD_ADDR_OWVAR 20
14622: PUSH
14623: LD_INT 0
14625: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14626: LD_ADDR_OWVAR 29
14630: PUSH
14631: LD_INT 12
14633: PUSH
14634: LD_INT 12
14636: PUSH
14637: EMPTY
14638: LIST
14639: LIST
14640: ST_TO_ADDR
// hc_agressivity := 20 ;
14641: LD_ADDR_OWVAR 35
14645: PUSH
14646: LD_INT 20
14648: ST_TO_ADDR
// hc_class := class_tiger ;
14649: LD_ADDR_OWVAR 28
14653: PUSH
14654: LD_INT 14
14656: ST_TO_ADDR
// hc_gallery :=  ;
14657: LD_ADDR_OWVAR 33
14661: PUSH
14662: LD_STRING 
14664: ST_TO_ADDR
// hc_name :=  ;
14665: LD_ADDR_OWVAR 26
14669: PUSH
14670: LD_STRING 
14672: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14673: CALL_OW 44
14677: PPUSH
14678: LD_INT 0
14680: PPUSH
14681: CALL_OW 51
// end ;
14685: GO 14607
14687: POP
14688: POP
// end ;
14689: PPOPN 1
14691: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14692: LD_EXP 29
14696: PUSH
14697: LD_EXP 49
14701: AND
14702: IFFALSE 14711
14704: GO 14706
14706: DISABLE
// StreamSibBomb ;
14707: CALL 14712 0 0
14711: END
// export function StreamSibBomb ; var i , x , y ; begin
14712: LD_INT 0
14714: PPUSH
14715: PPUSH
14716: PPUSH
14717: PPUSH
// result := false ;
14718: LD_ADDR_VAR 0 1
14722: PUSH
14723: LD_INT 0
14725: ST_TO_ADDR
// for i := 1 to 16 do
14726: LD_ADDR_VAR 0 2
14730: PUSH
14731: DOUBLE
14732: LD_INT 1
14734: DEC
14735: ST_TO_ADDR
14736: LD_INT 16
14738: PUSH
14739: FOR_TO
14740: IFFALSE 14939
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14742: LD_ADDR_VAR 0 3
14746: PUSH
14747: LD_INT 10
14749: PUSH
14750: LD_INT 20
14752: PUSH
14753: LD_INT 30
14755: PUSH
14756: LD_INT 40
14758: PUSH
14759: LD_INT 50
14761: PUSH
14762: LD_INT 60
14764: PUSH
14765: LD_INT 70
14767: PUSH
14768: LD_INT 80
14770: PUSH
14771: LD_INT 90
14773: PUSH
14774: LD_INT 100
14776: PUSH
14777: LD_INT 110
14779: PUSH
14780: LD_INT 120
14782: PUSH
14783: LD_INT 130
14785: PUSH
14786: LD_INT 140
14788: PUSH
14789: LD_INT 150
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: LIST
14796: LIST
14797: LIST
14798: LIST
14799: LIST
14800: LIST
14801: LIST
14802: LIST
14803: LIST
14804: LIST
14805: LIST
14806: LIST
14807: LIST
14808: PUSH
14809: LD_INT 1
14811: PPUSH
14812: LD_INT 15
14814: PPUSH
14815: CALL_OW 12
14819: ARRAY
14820: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14821: LD_ADDR_VAR 0 4
14825: PUSH
14826: LD_INT 10
14828: PUSH
14829: LD_INT 20
14831: PUSH
14832: LD_INT 30
14834: PUSH
14835: LD_INT 40
14837: PUSH
14838: LD_INT 50
14840: PUSH
14841: LD_INT 60
14843: PUSH
14844: LD_INT 70
14846: PUSH
14847: LD_INT 80
14849: PUSH
14850: LD_INT 90
14852: PUSH
14853: LD_INT 100
14855: PUSH
14856: LD_INT 110
14858: PUSH
14859: LD_INT 120
14861: PUSH
14862: LD_INT 130
14864: PUSH
14865: LD_INT 140
14867: PUSH
14868: LD_INT 150
14870: PUSH
14871: EMPTY
14872: LIST
14873: LIST
14874: LIST
14875: LIST
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: PUSH
14888: LD_INT 1
14890: PPUSH
14891: LD_INT 15
14893: PPUSH
14894: CALL_OW 12
14898: ARRAY
14899: ST_TO_ADDR
// if ValidHex ( x , y ) then
14900: LD_VAR 0 3
14904: PPUSH
14905: LD_VAR 0 4
14909: PPUSH
14910: CALL_OW 488
14914: IFFALSE 14937
// begin result := [ x , y ] ;
14916: LD_ADDR_VAR 0 1
14920: PUSH
14921: LD_VAR 0 3
14925: PUSH
14926: LD_VAR 0 4
14930: PUSH
14931: EMPTY
14932: LIST
14933: LIST
14934: ST_TO_ADDR
// break ;
14935: GO 14939
// end ; end ;
14937: GO 14739
14939: POP
14940: POP
// if result then
14941: LD_VAR 0 1
14945: IFFALSE 15005
// begin ToLua ( playSibBomb() ) ;
14947: LD_STRING playSibBomb()
14949: PPUSH
14950: CALL_OW 559
// wait ( 0 0$14 ) ;
14954: LD_INT 490
14956: PPUSH
14957: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
14961: LD_VAR 0 1
14965: PUSH
14966: LD_INT 1
14968: ARRAY
14969: PPUSH
14970: LD_VAR 0 1
14974: PUSH
14975: LD_INT 2
14977: ARRAY
14978: PPUSH
14979: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
14983: LD_VAR 0 1
14987: PUSH
14988: LD_INT 1
14990: ARRAY
14991: PPUSH
14992: LD_VAR 0 1
14996: PUSH
14997: LD_INT 2
14999: ARRAY
15000: PPUSH
15001: CALL_OW 429
// end ; end ;
15005: LD_VAR 0 1
15009: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15010: LD_EXP 29
15014: PUSH
15015: LD_EXP 51
15019: AND
15020: IFFALSE 15032
15022: GO 15024
15024: DISABLE
// YouLost (  ) ;
15025: LD_STRING 
15027: PPUSH
15028: CALL_OW 104
15032: END
// every 0 0$1 trigger StreamModeActive and sFog do
15033: LD_EXP 29
15037: PUSH
15038: LD_EXP 50
15042: AND
15043: IFFALSE 15057
15045: GO 15047
15047: DISABLE
// FogOff ( your_side ) ;
15048: LD_OWVAR 2
15052: PPUSH
15053: CALL_OW 344
15057: END
// every 0 0$1 trigger StreamModeActive and sSun do
15058: LD_EXP 29
15062: PUSH
15063: LD_EXP 52
15067: AND
15068: IFFALSE 15096
15070: GO 15072
15072: DISABLE
// begin solar_recharge_percent := 0 ;
15073: LD_ADDR_OWVAR 79
15077: PUSH
15078: LD_INT 0
15080: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15081: LD_INT 10500
15083: PPUSH
15084: CALL_OW 67
// solar_recharge_percent := 100 ;
15088: LD_ADDR_OWVAR 79
15092: PUSH
15093: LD_INT 100
15095: ST_TO_ADDR
// end ;
15096: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15097: LD_EXP 29
15101: PUSH
15102: LD_EXP 53
15106: AND
15107: IFFALSE 15346
15109: GO 15111
15111: DISABLE
15112: LD_INT 0
15114: PPUSH
15115: PPUSH
15116: PPUSH
// begin tmp := [ ] ;
15117: LD_ADDR_VAR 0 3
15121: PUSH
15122: EMPTY
15123: ST_TO_ADDR
// for i := 1 to 6 do
15124: LD_ADDR_VAR 0 1
15128: PUSH
15129: DOUBLE
15130: LD_INT 1
15132: DEC
15133: ST_TO_ADDR
15134: LD_INT 6
15136: PUSH
15137: FOR_TO
15138: IFFALSE 15243
// begin uc_nation := nation_nature ;
15140: LD_ADDR_OWVAR 21
15144: PUSH
15145: LD_INT 0
15147: ST_TO_ADDR
// uc_side := 0 ;
15148: LD_ADDR_OWVAR 20
15152: PUSH
15153: LD_INT 0
15155: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15156: LD_ADDR_OWVAR 29
15160: PUSH
15161: LD_INT 12
15163: PUSH
15164: LD_INT 12
15166: PUSH
15167: EMPTY
15168: LIST
15169: LIST
15170: ST_TO_ADDR
// hc_agressivity := 20 ;
15171: LD_ADDR_OWVAR 35
15175: PUSH
15176: LD_INT 20
15178: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15179: LD_ADDR_OWVAR 28
15183: PUSH
15184: LD_INT 17
15186: ST_TO_ADDR
// hc_gallery :=  ;
15187: LD_ADDR_OWVAR 33
15191: PUSH
15192: LD_STRING 
15194: ST_TO_ADDR
// hc_name :=  ;
15195: LD_ADDR_OWVAR 26
15199: PUSH
15200: LD_STRING 
15202: ST_TO_ADDR
// un := CreateHuman ;
15203: LD_ADDR_VAR 0 2
15207: PUSH
15208: CALL_OW 44
15212: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15213: LD_VAR 0 2
15217: PPUSH
15218: LD_INT 1
15220: PPUSH
15221: CALL_OW 51
// tmp := tmp ^ un ;
15225: LD_ADDR_VAR 0 3
15229: PUSH
15230: LD_VAR 0 3
15234: PUSH
15235: LD_VAR 0 2
15239: ADD
15240: ST_TO_ADDR
// end ;
15241: GO 15137
15243: POP
15244: POP
// repeat wait ( 0 0$1 ) ;
15245: LD_INT 35
15247: PPUSH
15248: CALL_OW 67
// for un in tmp do
15252: LD_ADDR_VAR 0 2
15256: PUSH
15257: LD_VAR 0 3
15261: PUSH
15262: FOR_IN
15263: IFFALSE 15337
// begin if IsDead ( un ) then
15265: LD_VAR 0 2
15269: PPUSH
15270: CALL_OW 301
15274: IFFALSE 15294
// begin tmp := tmp diff un ;
15276: LD_ADDR_VAR 0 3
15280: PUSH
15281: LD_VAR 0 3
15285: PUSH
15286: LD_VAR 0 2
15290: DIFF
15291: ST_TO_ADDR
// continue ;
15292: GO 15262
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15294: LD_VAR 0 2
15298: PPUSH
15299: LD_INT 3
15301: PUSH
15302: LD_INT 22
15304: PUSH
15305: LD_INT 0
15307: PUSH
15308: EMPTY
15309: LIST
15310: LIST
15311: PUSH
15312: EMPTY
15313: LIST
15314: LIST
15315: PPUSH
15316: CALL_OW 69
15320: PPUSH
15321: LD_VAR 0 2
15325: PPUSH
15326: CALL_OW 74
15330: PPUSH
15331: CALL_OW 115
// end ;
15335: GO 15262
15337: POP
15338: POP
// until not tmp ;
15339: LD_VAR 0 3
15343: NOT
15344: IFFALSE 15245
// end ;
15346: PPOPN 3
15348: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15349: LD_EXP 29
15353: PUSH
15354: LD_EXP 54
15358: AND
15359: IFFALSE 15413
15361: GO 15363
15363: DISABLE
// begin ToLua ( displayTroll(); ) ;
15364: LD_STRING displayTroll();
15366: PPUSH
15367: CALL_OW 559
// wait ( 3 3$00 ) ;
15371: LD_INT 6300
15373: PPUSH
15374: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15378: LD_STRING hideTroll();
15380: PPUSH
15381: CALL_OW 559
// wait ( 1 1$00 ) ;
15385: LD_INT 2100
15387: PPUSH
15388: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15392: LD_STRING displayTroll();
15394: PPUSH
15395: CALL_OW 559
// wait ( 1 1$00 ) ;
15399: LD_INT 2100
15401: PPUSH
15402: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15406: LD_STRING hideTroll();
15408: PPUSH
15409: CALL_OW 559
// end ;
15413: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15414: LD_EXP 29
15418: PUSH
15419: LD_EXP 55
15423: AND
15424: IFFALSE 15487
15426: GO 15428
15428: DISABLE
15429: LD_INT 0
15431: PPUSH
// begin p := 0 ;
15432: LD_ADDR_VAR 0 1
15436: PUSH
15437: LD_INT 0
15439: ST_TO_ADDR
// repeat game_speed := 1 ;
15440: LD_ADDR_OWVAR 65
15444: PUSH
15445: LD_INT 1
15447: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15448: LD_INT 35
15450: PPUSH
15451: CALL_OW 67
// p := p + 1 ;
15455: LD_ADDR_VAR 0 1
15459: PUSH
15460: LD_VAR 0 1
15464: PUSH
15465: LD_INT 1
15467: PLUS
15468: ST_TO_ADDR
// until p >= 60 ;
15469: LD_VAR 0 1
15473: PUSH
15474: LD_INT 60
15476: GREATEREQUAL
15477: IFFALSE 15440
// game_speed := 4 ;
15479: LD_ADDR_OWVAR 65
15483: PUSH
15484: LD_INT 4
15486: ST_TO_ADDR
// end ;
15487: PPOPN 1
15489: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15490: LD_EXP 29
15494: PUSH
15495: LD_EXP 56
15499: AND
15500: IFFALSE 15646
15502: GO 15504
15504: DISABLE
15505: LD_INT 0
15507: PPUSH
15508: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15509: LD_ADDR_VAR 0 1
15513: PUSH
15514: LD_INT 22
15516: PUSH
15517: LD_OWVAR 2
15521: PUSH
15522: EMPTY
15523: LIST
15524: LIST
15525: PUSH
15526: LD_INT 2
15528: PUSH
15529: LD_INT 30
15531: PUSH
15532: LD_INT 0
15534: PUSH
15535: EMPTY
15536: LIST
15537: LIST
15538: PUSH
15539: LD_INT 30
15541: PUSH
15542: LD_INT 1
15544: PUSH
15545: EMPTY
15546: LIST
15547: LIST
15548: PUSH
15549: EMPTY
15550: LIST
15551: LIST
15552: LIST
15553: PUSH
15554: EMPTY
15555: LIST
15556: LIST
15557: PPUSH
15558: CALL_OW 69
15562: ST_TO_ADDR
// if not depot then
15563: LD_VAR 0 1
15567: NOT
15568: IFFALSE 15572
// exit ;
15570: GO 15646
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15572: LD_ADDR_VAR 0 2
15576: PUSH
15577: LD_VAR 0 1
15581: PUSH
15582: LD_INT 1
15584: PPUSH
15585: LD_VAR 0 1
15589: PPUSH
15590: CALL_OW 12
15594: ARRAY
15595: PPUSH
15596: CALL_OW 274
15600: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15601: LD_VAR 0 2
15605: PPUSH
15606: LD_INT 1
15608: PPUSH
15609: LD_INT 0
15611: PPUSH
15612: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15616: LD_VAR 0 2
15620: PPUSH
15621: LD_INT 2
15623: PPUSH
15624: LD_INT 0
15626: PPUSH
15627: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15631: LD_VAR 0 2
15635: PPUSH
15636: LD_INT 3
15638: PPUSH
15639: LD_INT 0
15641: PPUSH
15642: CALL_OW 277
// end ;
15646: PPOPN 2
15648: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15649: LD_EXP 29
15653: PUSH
15654: LD_EXP 57
15658: AND
15659: IFFALSE 15756
15661: GO 15663
15663: DISABLE
15664: LD_INT 0
15666: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15667: LD_ADDR_VAR 0 1
15671: PUSH
15672: LD_INT 22
15674: PUSH
15675: LD_OWVAR 2
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: PUSH
15684: LD_INT 21
15686: PUSH
15687: LD_INT 1
15689: PUSH
15690: EMPTY
15691: LIST
15692: LIST
15693: PUSH
15694: LD_INT 3
15696: PUSH
15697: LD_INT 23
15699: PUSH
15700: LD_INT 0
15702: PUSH
15703: EMPTY
15704: LIST
15705: LIST
15706: PUSH
15707: EMPTY
15708: LIST
15709: LIST
15710: PUSH
15711: EMPTY
15712: LIST
15713: LIST
15714: LIST
15715: PPUSH
15716: CALL_OW 69
15720: ST_TO_ADDR
// if not tmp then
15721: LD_VAR 0 1
15725: NOT
15726: IFFALSE 15730
// exit ;
15728: GO 15756
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15730: LD_VAR 0 1
15734: PUSH
15735: LD_INT 1
15737: PPUSH
15738: LD_VAR 0 1
15742: PPUSH
15743: CALL_OW 12
15747: ARRAY
15748: PPUSH
15749: LD_INT 200
15751: PPUSH
15752: CALL_OW 234
// end ;
15756: PPOPN 1
15758: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15759: LD_EXP 29
15763: PUSH
15764: LD_EXP 58
15768: AND
15769: IFFALSE 15848
15771: GO 15773
15773: DISABLE
15774: LD_INT 0
15776: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15777: LD_ADDR_VAR 0 1
15781: PUSH
15782: LD_INT 22
15784: PUSH
15785: LD_OWVAR 2
15789: PUSH
15790: EMPTY
15791: LIST
15792: LIST
15793: PUSH
15794: LD_INT 21
15796: PUSH
15797: LD_INT 2
15799: PUSH
15800: EMPTY
15801: LIST
15802: LIST
15803: PUSH
15804: EMPTY
15805: LIST
15806: LIST
15807: PPUSH
15808: CALL_OW 69
15812: ST_TO_ADDR
// if not tmp then
15813: LD_VAR 0 1
15817: NOT
15818: IFFALSE 15822
// exit ;
15820: GO 15848
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15822: LD_VAR 0 1
15826: PUSH
15827: LD_INT 1
15829: PPUSH
15830: LD_VAR 0 1
15834: PPUSH
15835: CALL_OW 12
15839: ARRAY
15840: PPUSH
15841: LD_INT 60
15843: PPUSH
15844: CALL_OW 234
// end ;
15848: PPOPN 1
15850: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
15851: LD_EXP 29
15855: PUSH
15856: LD_EXP 59
15860: AND
15861: IFFALSE 15960
15863: GO 15865
15865: DISABLE
15866: LD_INT 0
15868: PPUSH
15869: PPUSH
// begin enable ;
15870: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
15871: LD_ADDR_VAR 0 1
15875: PUSH
15876: LD_INT 22
15878: PUSH
15879: LD_OWVAR 2
15883: PUSH
15884: EMPTY
15885: LIST
15886: LIST
15887: PUSH
15888: LD_INT 61
15890: PUSH
15891: EMPTY
15892: LIST
15893: PUSH
15894: LD_INT 33
15896: PUSH
15897: LD_INT 2
15899: PUSH
15900: EMPTY
15901: LIST
15902: LIST
15903: PUSH
15904: EMPTY
15905: LIST
15906: LIST
15907: LIST
15908: PPUSH
15909: CALL_OW 69
15913: ST_TO_ADDR
// if not tmp then
15914: LD_VAR 0 1
15918: NOT
15919: IFFALSE 15923
// exit ;
15921: GO 15960
// for i in tmp do
15923: LD_ADDR_VAR 0 2
15927: PUSH
15928: LD_VAR 0 1
15932: PUSH
15933: FOR_IN
15934: IFFALSE 15958
// if IsControledBy ( i ) then
15936: LD_VAR 0 2
15940: PPUSH
15941: CALL_OW 312
15945: IFFALSE 15956
// ComUnlink ( i ) ;
15947: LD_VAR 0 2
15951: PPUSH
15952: CALL_OW 136
15956: GO 15933
15958: POP
15959: POP
// end ;
15960: PPOPN 2
15962: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
15963: LD_EXP 29
15967: PUSH
15968: LD_EXP 60
15972: AND
15973: IFFALSE 16113
15975: GO 15977
15977: DISABLE
15978: LD_INT 0
15980: PPUSH
15981: PPUSH
// begin ToLua ( displayPowell(); ) ;
15982: LD_STRING displayPowell();
15984: PPUSH
15985: CALL_OW 559
// uc_side := 0 ;
15989: LD_ADDR_OWVAR 20
15993: PUSH
15994: LD_INT 0
15996: ST_TO_ADDR
// uc_nation := 2 ;
15997: LD_ADDR_OWVAR 21
16001: PUSH
16002: LD_INT 2
16004: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16005: LD_ADDR_OWVAR 37
16009: PUSH
16010: LD_INT 14
16012: ST_TO_ADDR
// vc_engine := engine_siberite ;
16013: LD_ADDR_OWVAR 39
16017: PUSH
16018: LD_INT 3
16020: ST_TO_ADDR
// vc_control := control_apeman ;
16021: LD_ADDR_OWVAR 38
16025: PUSH
16026: LD_INT 5
16028: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16029: LD_ADDR_OWVAR 40
16033: PUSH
16034: LD_INT 29
16036: ST_TO_ADDR
// un := CreateVehicle ;
16037: LD_ADDR_VAR 0 2
16041: PUSH
16042: CALL_OW 45
16046: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16047: LD_VAR 0 2
16051: PPUSH
16052: LD_INT 1
16054: PPUSH
16055: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16059: LD_INT 35
16061: PPUSH
16062: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16066: LD_VAR 0 2
16070: PPUSH
16071: LD_INT 22
16073: PUSH
16074: LD_OWVAR 2
16078: PUSH
16079: EMPTY
16080: LIST
16081: LIST
16082: PPUSH
16083: CALL_OW 69
16087: PPUSH
16088: LD_VAR 0 2
16092: PPUSH
16093: CALL_OW 74
16097: PPUSH
16098: CALL_OW 115
// until IsDead ( un ) ;
16102: LD_VAR 0 2
16106: PPUSH
16107: CALL_OW 301
16111: IFFALSE 16059
// end ;
16113: PPOPN 2
16115: END
// every 0 0$1 trigger StreamModeActive and sStu do
16116: LD_EXP 29
16120: PUSH
16121: LD_EXP 68
16125: AND
16126: IFFALSE 16142
16128: GO 16130
16130: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16131: LD_STRING displayStucuk();
16133: PPUSH
16134: CALL_OW 559
// ResetFog ;
16138: CALL_OW 335
// end ;
16142: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16143: LD_EXP 29
16147: PUSH
16148: LD_EXP 61
16152: AND
16153: IFFALSE 16294
16155: GO 16157
16157: DISABLE
16158: LD_INT 0
16160: PPUSH
16161: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16162: LD_ADDR_VAR 0 2
16166: PUSH
16167: LD_INT 22
16169: PUSH
16170: LD_OWVAR 2
16174: PUSH
16175: EMPTY
16176: LIST
16177: LIST
16178: PUSH
16179: LD_INT 21
16181: PUSH
16182: LD_INT 1
16184: PUSH
16185: EMPTY
16186: LIST
16187: LIST
16188: PUSH
16189: EMPTY
16190: LIST
16191: LIST
16192: PPUSH
16193: CALL_OW 69
16197: ST_TO_ADDR
// if not tmp then
16198: LD_VAR 0 2
16202: NOT
16203: IFFALSE 16207
// exit ;
16205: GO 16294
// un := tmp [ rand ( 1 , tmp ) ] ;
16207: LD_ADDR_VAR 0 1
16211: PUSH
16212: LD_VAR 0 2
16216: PUSH
16217: LD_INT 1
16219: PPUSH
16220: LD_VAR 0 2
16224: PPUSH
16225: CALL_OW 12
16229: ARRAY
16230: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16231: LD_VAR 0 1
16235: PPUSH
16236: LD_INT 0
16238: PPUSH
16239: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16243: LD_VAR 0 1
16247: PPUSH
16248: LD_OWVAR 3
16252: PUSH
16253: LD_VAR 0 1
16257: DIFF
16258: PPUSH
16259: LD_VAR 0 1
16263: PPUSH
16264: CALL_OW 74
16268: PPUSH
16269: CALL_OW 115
// wait ( 0 0$20 ) ;
16273: LD_INT 700
16275: PPUSH
16276: CALL_OW 67
// SetSide ( un , your_side ) ;
16280: LD_VAR 0 1
16284: PPUSH
16285: LD_OWVAR 2
16289: PPUSH
16290: CALL_OW 235
// end ;
16294: PPOPN 2
16296: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16297: LD_EXP 29
16301: PUSH
16302: LD_EXP 62
16306: AND
16307: IFFALSE 16413
16309: GO 16311
16311: DISABLE
16312: LD_INT 0
16314: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16315: LD_ADDR_VAR 0 1
16319: PUSH
16320: LD_INT 22
16322: PUSH
16323: LD_OWVAR 2
16327: PUSH
16328: EMPTY
16329: LIST
16330: LIST
16331: PUSH
16332: LD_INT 2
16334: PUSH
16335: LD_INT 30
16337: PUSH
16338: LD_INT 0
16340: PUSH
16341: EMPTY
16342: LIST
16343: LIST
16344: PUSH
16345: LD_INT 30
16347: PUSH
16348: LD_INT 1
16350: PUSH
16351: EMPTY
16352: LIST
16353: LIST
16354: PUSH
16355: EMPTY
16356: LIST
16357: LIST
16358: LIST
16359: PUSH
16360: EMPTY
16361: LIST
16362: LIST
16363: PPUSH
16364: CALL_OW 69
16368: ST_TO_ADDR
// if not depot then
16369: LD_VAR 0 1
16373: NOT
16374: IFFALSE 16378
// exit ;
16376: GO 16413
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16378: LD_VAR 0 1
16382: PUSH
16383: LD_INT 1
16385: ARRAY
16386: PPUSH
16387: CALL_OW 250
16391: PPUSH
16392: LD_VAR 0 1
16396: PUSH
16397: LD_INT 1
16399: ARRAY
16400: PPUSH
16401: CALL_OW 251
16405: PPUSH
16406: LD_INT 70
16408: PPUSH
16409: CALL_OW 495
// end ;
16413: PPOPN 1
16415: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16416: LD_EXP 29
16420: PUSH
16421: LD_EXP 63
16425: AND
16426: IFFALSE 16637
16428: GO 16430
16430: DISABLE
16431: LD_INT 0
16433: PPUSH
16434: PPUSH
16435: PPUSH
16436: PPUSH
16437: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16438: LD_ADDR_VAR 0 5
16442: PUSH
16443: LD_INT 22
16445: PUSH
16446: LD_OWVAR 2
16450: PUSH
16451: EMPTY
16452: LIST
16453: LIST
16454: PUSH
16455: LD_INT 21
16457: PUSH
16458: LD_INT 1
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: PPUSH
16469: CALL_OW 69
16473: ST_TO_ADDR
// if not tmp then
16474: LD_VAR 0 5
16478: NOT
16479: IFFALSE 16483
// exit ;
16481: GO 16637
// for i in tmp do
16483: LD_ADDR_VAR 0 1
16487: PUSH
16488: LD_VAR 0 5
16492: PUSH
16493: FOR_IN
16494: IFFALSE 16635
// begin d := rand ( 0 , 5 ) ;
16496: LD_ADDR_VAR 0 4
16500: PUSH
16501: LD_INT 0
16503: PPUSH
16504: LD_INT 5
16506: PPUSH
16507: CALL_OW 12
16511: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16512: LD_ADDR_VAR 0 2
16516: PUSH
16517: LD_VAR 0 1
16521: PPUSH
16522: CALL_OW 250
16526: PPUSH
16527: LD_VAR 0 4
16531: PPUSH
16532: LD_INT 3
16534: PPUSH
16535: LD_INT 12
16537: PPUSH
16538: CALL_OW 12
16542: PPUSH
16543: CALL_OW 272
16547: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16548: LD_ADDR_VAR 0 3
16552: PUSH
16553: LD_VAR 0 1
16557: PPUSH
16558: CALL_OW 251
16562: PPUSH
16563: LD_VAR 0 4
16567: PPUSH
16568: LD_INT 3
16570: PPUSH
16571: LD_INT 12
16573: PPUSH
16574: CALL_OW 12
16578: PPUSH
16579: CALL_OW 273
16583: ST_TO_ADDR
// if ValidHex ( x , y ) then
16584: LD_VAR 0 2
16588: PPUSH
16589: LD_VAR 0 3
16593: PPUSH
16594: CALL_OW 488
16598: IFFALSE 16633
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16600: LD_VAR 0 1
16604: PPUSH
16605: LD_VAR 0 2
16609: PPUSH
16610: LD_VAR 0 3
16614: PPUSH
16615: LD_INT 3
16617: PPUSH
16618: LD_INT 6
16620: PPUSH
16621: CALL_OW 12
16625: PPUSH
16626: LD_INT 1
16628: PPUSH
16629: CALL_OW 483
// end ;
16633: GO 16493
16635: POP
16636: POP
// end ;
16637: PPOPN 5
16639: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16640: LD_EXP 29
16644: PUSH
16645: LD_EXP 64
16649: AND
16650: IFFALSE 16744
16652: GO 16654
16654: DISABLE
16655: LD_INT 0
16657: PPUSH
16658: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16659: LD_ADDR_VAR 0 2
16663: PUSH
16664: LD_INT 22
16666: PUSH
16667: LD_OWVAR 2
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: PUSH
16676: LD_INT 32
16678: PUSH
16679: LD_INT 1
16681: PUSH
16682: EMPTY
16683: LIST
16684: LIST
16685: PUSH
16686: LD_INT 21
16688: PUSH
16689: LD_INT 2
16691: PUSH
16692: EMPTY
16693: LIST
16694: LIST
16695: PUSH
16696: EMPTY
16697: LIST
16698: LIST
16699: LIST
16700: PPUSH
16701: CALL_OW 69
16705: ST_TO_ADDR
// if not tmp then
16706: LD_VAR 0 2
16710: NOT
16711: IFFALSE 16715
// exit ;
16713: GO 16744
// for i in tmp do
16715: LD_ADDR_VAR 0 1
16719: PUSH
16720: LD_VAR 0 2
16724: PUSH
16725: FOR_IN
16726: IFFALSE 16742
// SetFuel ( i , 0 ) ;
16728: LD_VAR 0 1
16732: PPUSH
16733: LD_INT 0
16735: PPUSH
16736: CALL_OW 240
16740: GO 16725
16742: POP
16743: POP
// end ;
16744: PPOPN 2
16746: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16747: LD_EXP 29
16751: PUSH
16752: LD_EXP 65
16756: AND
16757: IFFALSE 16823
16759: GO 16761
16761: DISABLE
16762: LD_INT 0
16764: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16765: LD_ADDR_VAR 0 1
16769: PUSH
16770: LD_INT 22
16772: PUSH
16773: LD_OWVAR 2
16777: PUSH
16778: EMPTY
16779: LIST
16780: LIST
16781: PUSH
16782: LD_INT 30
16784: PUSH
16785: LD_INT 29
16787: PUSH
16788: EMPTY
16789: LIST
16790: LIST
16791: PUSH
16792: EMPTY
16793: LIST
16794: LIST
16795: PPUSH
16796: CALL_OW 69
16800: ST_TO_ADDR
// if not tmp then
16801: LD_VAR 0 1
16805: NOT
16806: IFFALSE 16810
// exit ;
16808: GO 16823
// DestroyUnit ( tmp [ 1 ] ) ;
16810: LD_VAR 0 1
16814: PUSH
16815: LD_INT 1
16817: ARRAY
16818: PPUSH
16819: CALL_OW 65
// end ;
16823: PPOPN 1
16825: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16826: LD_EXP 29
16830: PUSH
16831: LD_EXP 67
16835: AND
16836: IFFALSE 16965
16838: GO 16840
16840: DISABLE
16841: LD_INT 0
16843: PPUSH
// begin uc_side := 0 ;
16844: LD_ADDR_OWVAR 20
16848: PUSH
16849: LD_INT 0
16851: ST_TO_ADDR
// uc_nation := nation_arabian ;
16852: LD_ADDR_OWVAR 21
16856: PUSH
16857: LD_INT 2
16859: ST_TO_ADDR
// hc_gallery :=  ;
16860: LD_ADDR_OWVAR 33
16864: PUSH
16865: LD_STRING 
16867: ST_TO_ADDR
// hc_name :=  ;
16868: LD_ADDR_OWVAR 26
16872: PUSH
16873: LD_STRING 
16875: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
16876: LD_INT 1
16878: PPUSH
16879: LD_INT 11
16881: PPUSH
16882: LD_INT 10
16884: PPUSH
16885: CALL_OW 380
// un := CreateHuman ;
16889: LD_ADDR_VAR 0 1
16893: PUSH
16894: CALL_OW 44
16898: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16899: LD_VAR 0 1
16903: PPUSH
16904: LD_INT 1
16906: PPUSH
16907: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16911: LD_INT 35
16913: PPUSH
16914: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16918: LD_VAR 0 1
16922: PPUSH
16923: LD_INT 22
16925: PUSH
16926: LD_OWVAR 2
16930: PUSH
16931: EMPTY
16932: LIST
16933: LIST
16934: PPUSH
16935: CALL_OW 69
16939: PPUSH
16940: LD_VAR 0 1
16944: PPUSH
16945: CALL_OW 74
16949: PPUSH
16950: CALL_OW 115
// until IsDead ( un ) ;
16954: LD_VAR 0 1
16958: PPUSH
16959: CALL_OW 301
16963: IFFALSE 16911
// end ;
16965: PPOPN 1
16967: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
16968: LD_EXP 29
16972: PUSH
16973: LD_EXP 69
16977: AND
16978: IFFALSE 16990
16980: GO 16982
16982: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
16983: LD_STRING earthquake(getX(game), 0, 32)
16985: PPUSH
16986: CALL_OW 559
16990: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
16991: LD_EXP 29
16995: PUSH
16996: LD_EXP 70
17000: AND
17001: IFFALSE 17092
17003: GO 17005
17005: DISABLE
17006: LD_INT 0
17008: PPUSH
// begin enable ;
17009: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17010: LD_ADDR_VAR 0 1
17014: PUSH
17015: LD_INT 22
17017: PUSH
17018: LD_OWVAR 2
17022: PUSH
17023: EMPTY
17024: LIST
17025: LIST
17026: PUSH
17027: LD_INT 21
17029: PUSH
17030: LD_INT 2
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: PUSH
17037: LD_INT 33
17039: PUSH
17040: LD_INT 3
17042: PUSH
17043: EMPTY
17044: LIST
17045: LIST
17046: PUSH
17047: EMPTY
17048: LIST
17049: LIST
17050: LIST
17051: PPUSH
17052: CALL_OW 69
17056: ST_TO_ADDR
// if not tmp then
17057: LD_VAR 0 1
17061: NOT
17062: IFFALSE 17066
// exit ;
17064: GO 17092
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17066: LD_VAR 0 1
17070: PUSH
17071: LD_INT 1
17073: PPUSH
17074: LD_VAR 0 1
17078: PPUSH
17079: CALL_OW 12
17083: ARRAY
17084: PPUSH
17085: LD_INT 1
17087: PPUSH
17088: CALL_OW 234
// end ;
17092: PPOPN 1
17094: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17095: LD_EXP 29
17099: PUSH
17100: LD_EXP 71
17104: AND
17105: IFFALSE 17246
17107: GO 17109
17109: DISABLE
17110: LD_INT 0
17112: PPUSH
17113: PPUSH
17114: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17115: LD_ADDR_VAR 0 3
17119: PUSH
17120: LD_INT 22
17122: PUSH
17123: LD_OWVAR 2
17127: PUSH
17128: EMPTY
17129: LIST
17130: LIST
17131: PUSH
17132: LD_INT 25
17134: PUSH
17135: LD_INT 1
17137: PUSH
17138: EMPTY
17139: LIST
17140: LIST
17141: PUSH
17142: EMPTY
17143: LIST
17144: LIST
17145: PPUSH
17146: CALL_OW 69
17150: ST_TO_ADDR
// if not tmp then
17151: LD_VAR 0 3
17155: NOT
17156: IFFALSE 17160
// exit ;
17158: GO 17246
// un := tmp [ rand ( 1 , tmp ) ] ;
17160: LD_ADDR_VAR 0 2
17164: PUSH
17165: LD_VAR 0 3
17169: PUSH
17170: LD_INT 1
17172: PPUSH
17173: LD_VAR 0 3
17177: PPUSH
17178: CALL_OW 12
17182: ARRAY
17183: ST_TO_ADDR
// if Crawls ( un ) then
17184: LD_VAR 0 2
17188: PPUSH
17189: CALL_OW 318
17193: IFFALSE 17204
// ComWalk ( un ) ;
17195: LD_VAR 0 2
17199: PPUSH
17200: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17204: LD_VAR 0 2
17208: PPUSH
17209: LD_INT 9
17211: PPUSH
17212: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17216: LD_INT 28
17218: PPUSH
17219: LD_OWVAR 2
17223: PPUSH
17224: LD_INT 2
17226: PPUSH
17227: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17231: LD_INT 29
17233: PPUSH
17234: LD_OWVAR 2
17238: PPUSH
17239: LD_INT 2
17241: PPUSH
17242: CALL_OW 322
// end ;
17246: PPOPN 3
17248: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17249: LD_EXP 29
17253: PUSH
17254: LD_EXP 72
17258: AND
17259: IFFALSE 17370
17261: GO 17263
17263: DISABLE
17264: LD_INT 0
17266: PPUSH
17267: PPUSH
17268: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17269: LD_ADDR_VAR 0 3
17273: PUSH
17274: LD_INT 22
17276: PUSH
17277: LD_OWVAR 2
17281: PUSH
17282: EMPTY
17283: LIST
17284: LIST
17285: PUSH
17286: LD_INT 25
17288: PUSH
17289: LD_INT 1
17291: PUSH
17292: EMPTY
17293: LIST
17294: LIST
17295: PUSH
17296: EMPTY
17297: LIST
17298: LIST
17299: PPUSH
17300: CALL_OW 69
17304: ST_TO_ADDR
// if not tmp then
17305: LD_VAR 0 3
17309: NOT
17310: IFFALSE 17314
// exit ;
17312: GO 17370
// un := tmp [ rand ( 1 , tmp ) ] ;
17314: LD_ADDR_VAR 0 2
17318: PUSH
17319: LD_VAR 0 3
17323: PUSH
17324: LD_INT 1
17326: PPUSH
17327: LD_VAR 0 3
17331: PPUSH
17332: CALL_OW 12
17336: ARRAY
17337: ST_TO_ADDR
// if Crawls ( un ) then
17338: LD_VAR 0 2
17342: PPUSH
17343: CALL_OW 318
17347: IFFALSE 17358
// ComWalk ( un ) ;
17349: LD_VAR 0 2
17353: PPUSH
17354: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17358: LD_VAR 0 2
17362: PPUSH
17363: LD_INT 8
17365: PPUSH
17366: CALL_OW 336
// end ;
17370: PPOPN 3
17372: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17373: LD_EXP 29
17377: PUSH
17378: LD_EXP 73
17382: AND
17383: IFFALSE 17527
17385: GO 17387
17387: DISABLE
17388: LD_INT 0
17390: PPUSH
17391: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17392: LD_ADDR_VAR 0 2
17396: PUSH
17397: LD_INT 22
17399: PUSH
17400: LD_OWVAR 2
17404: PUSH
17405: EMPTY
17406: LIST
17407: LIST
17408: PUSH
17409: LD_INT 21
17411: PUSH
17412: LD_INT 2
17414: PUSH
17415: EMPTY
17416: LIST
17417: LIST
17418: PUSH
17419: LD_INT 2
17421: PUSH
17422: LD_INT 34
17424: PUSH
17425: LD_INT 12
17427: PUSH
17428: EMPTY
17429: LIST
17430: LIST
17431: PUSH
17432: LD_INT 34
17434: PUSH
17435: LD_INT 51
17437: PUSH
17438: EMPTY
17439: LIST
17440: LIST
17441: PUSH
17442: LD_INT 34
17444: PUSH
17445: LD_INT 32
17447: PUSH
17448: EMPTY
17449: LIST
17450: LIST
17451: PUSH
17452: EMPTY
17453: LIST
17454: LIST
17455: LIST
17456: LIST
17457: PUSH
17458: EMPTY
17459: LIST
17460: LIST
17461: LIST
17462: PPUSH
17463: CALL_OW 69
17467: ST_TO_ADDR
// if not tmp then
17468: LD_VAR 0 2
17472: NOT
17473: IFFALSE 17477
// exit ;
17475: GO 17527
// for i in tmp do
17477: LD_ADDR_VAR 0 1
17481: PUSH
17482: LD_VAR 0 2
17486: PUSH
17487: FOR_IN
17488: IFFALSE 17525
// if GetCargo ( i , mat_artifact ) = 0 then
17490: LD_VAR 0 1
17494: PPUSH
17495: LD_INT 4
17497: PPUSH
17498: CALL_OW 289
17502: PUSH
17503: LD_INT 0
17505: EQUAL
17506: IFFALSE 17523
// SetCargo ( i , mat_siberit , 100 ) ;
17508: LD_VAR 0 1
17512: PPUSH
17513: LD_INT 3
17515: PPUSH
17516: LD_INT 100
17518: PPUSH
17519: CALL_OW 290
17523: GO 17487
17525: POP
17526: POP
// end ;
17527: PPOPN 2
17529: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17530: LD_EXP 29
17534: PUSH
17535: LD_EXP 74
17539: AND
17540: IFFALSE 17723
17542: GO 17544
17544: DISABLE
17545: LD_INT 0
17547: PPUSH
17548: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17549: LD_ADDR_VAR 0 2
17553: PUSH
17554: LD_INT 22
17556: PUSH
17557: LD_OWVAR 2
17561: PUSH
17562: EMPTY
17563: LIST
17564: LIST
17565: PPUSH
17566: CALL_OW 69
17570: ST_TO_ADDR
// if not tmp then
17571: LD_VAR 0 2
17575: NOT
17576: IFFALSE 17580
// exit ;
17578: GO 17723
// for i := 1 to 2 do
17580: LD_ADDR_VAR 0 1
17584: PUSH
17585: DOUBLE
17586: LD_INT 1
17588: DEC
17589: ST_TO_ADDR
17590: LD_INT 2
17592: PUSH
17593: FOR_TO
17594: IFFALSE 17721
// begin uc_side := your_side ;
17596: LD_ADDR_OWVAR 20
17600: PUSH
17601: LD_OWVAR 2
17605: ST_TO_ADDR
// uc_nation := nation_american ;
17606: LD_ADDR_OWVAR 21
17610: PUSH
17611: LD_INT 1
17613: ST_TO_ADDR
// vc_chassis := us_morphling ;
17614: LD_ADDR_OWVAR 37
17618: PUSH
17619: LD_INT 5
17621: ST_TO_ADDR
// vc_engine := engine_siberite ;
17622: LD_ADDR_OWVAR 39
17626: PUSH
17627: LD_INT 3
17629: ST_TO_ADDR
// vc_control := control_computer ;
17630: LD_ADDR_OWVAR 38
17634: PUSH
17635: LD_INT 3
17637: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17638: LD_ADDR_OWVAR 40
17642: PUSH
17643: LD_INT 10
17645: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17646: LD_VAR 0 2
17650: PUSH
17651: LD_INT 1
17653: ARRAY
17654: PPUSH
17655: CALL_OW 310
17659: NOT
17660: IFFALSE 17707
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17662: CALL_OW 45
17666: PPUSH
17667: LD_VAR 0 2
17671: PUSH
17672: LD_INT 1
17674: ARRAY
17675: PPUSH
17676: CALL_OW 250
17680: PPUSH
17681: LD_VAR 0 2
17685: PUSH
17686: LD_INT 1
17688: ARRAY
17689: PPUSH
17690: CALL_OW 251
17694: PPUSH
17695: LD_INT 12
17697: PPUSH
17698: LD_INT 1
17700: PPUSH
17701: CALL_OW 50
17705: GO 17719
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17707: CALL_OW 45
17711: PPUSH
17712: LD_INT 1
17714: PPUSH
17715: CALL_OW 51
// end ;
17719: GO 17593
17721: POP
17722: POP
// end ;
17723: PPOPN 2
17725: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17726: LD_EXP 29
17730: PUSH
17731: LD_EXP 75
17735: AND
17736: IFFALSE 17958
17738: GO 17740
17740: DISABLE
17741: LD_INT 0
17743: PPUSH
17744: PPUSH
17745: PPUSH
17746: PPUSH
17747: PPUSH
17748: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17749: LD_ADDR_VAR 0 6
17753: PUSH
17754: LD_INT 22
17756: PUSH
17757: LD_OWVAR 2
17761: PUSH
17762: EMPTY
17763: LIST
17764: LIST
17765: PUSH
17766: LD_INT 21
17768: PUSH
17769: LD_INT 1
17771: PUSH
17772: EMPTY
17773: LIST
17774: LIST
17775: PUSH
17776: LD_INT 3
17778: PUSH
17779: LD_INT 23
17781: PUSH
17782: LD_INT 0
17784: PUSH
17785: EMPTY
17786: LIST
17787: LIST
17788: PUSH
17789: EMPTY
17790: LIST
17791: LIST
17792: PUSH
17793: EMPTY
17794: LIST
17795: LIST
17796: LIST
17797: PPUSH
17798: CALL_OW 69
17802: ST_TO_ADDR
// if not tmp then
17803: LD_VAR 0 6
17807: NOT
17808: IFFALSE 17812
// exit ;
17810: GO 17958
// s1 := rand ( 1 , 4 ) ;
17812: LD_ADDR_VAR 0 2
17816: PUSH
17817: LD_INT 1
17819: PPUSH
17820: LD_INT 4
17822: PPUSH
17823: CALL_OW 12
17827: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17828: LD_ADDR_VAR 0 4
17832: PUSH
17833: LD_VAR 0 6
17837: PUSH
17838: LD_INT 1
17840: ARRAY
17841: PPUSH
17842: LD_VAR 0 2
17846: PPUSH
17847: CALL_OW 259
17851: ST_TO_ADDR
// if s1 = 1 then
17852: LD_VAR 0 2
17856: PUSH
17857: LD_INT 1
17859: EQUAL
17860: IFFALSE 17880
// s2 := rand ( 2 , 4 ) else
17862: LD_ADDR_VAR 0 3
17866: PUSH
17867: LD_INT 2
17869: PPUSH
17870: LD_INT 4
17872: PPUSH
17873: CALL_OW 12
17877: ST_TO_ADDR
17878: GO 17888
// s2 := 1 ;
17880: LD_ADDR_VAR 0 3
17884: PUSH
17885: LD_INT 1
17887: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
17888: LD_ADDR_VAR 0 5
17892: PUSH
17893: LD_VAR 0 6
17897: PUSH
17898: LD_INT 1
17900: ARRAY
17901: PPUSH
17902: LD_VAR 0 3
17906: PPUSH
17907: CALL_OW 259
17911: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
17912: LD_VAR 0 6
17916: PUSH
17917: LD_INT 1
17919: ARRAY
17920: PPUSH
17921: LD_VAR 0 2
17925: PPUSH
17926: LD_VAR 0 5
17930: PPUSH
17931: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
17935: LD_VAR 0 6
17939: PUSH
17940: LD_INT 1
17942: ARRAY
17943: PPUSH
17944: LD_VAR 0 3
17948: PPUSH
17949: LD_VAR 0 4
17953: PPUSH
17954: CALL_OW 237
// end ;
17958: PPOPN 6
17960: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
17961: LD_EXP 29
17965: PUSH
17966: LD_EXP 76
17970: AND
17971: IFFALSE 18050
17973: GO 17975
17975: DISABLE
17976: LD_INT 0
17978: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
17979: LD_ADDR_VAR 0 1
17983: PUSH
17984: LD_INT 22
17986: PUSH
17987: LD_OWVAR 2
17991: PUSH
17992: EMPTY
17993: LIST
17994: LIST
17995: PUSH
17996: LD_INT 30
17998: PUSH
17999: LD_INT 3
18001: PUSH
18002: EMPTY
18003: LIST
18004: LIST
18005: PUSH
18006: EMPTY
18007: LIST
18008: LIST
18009: PPUSH
18010: CALL_OW 69
18014: ST_TO_ADDR
// if not tmp then
18015: LD_VAR 0 1
18019: NOT
18020: IFFALSE 18024
// exit ;
18022: GO 18050
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18024: LD_VAR 0 1
18028: PUSH
18029: LD_INT 1
18031: PPUSH
18032: LD_VAR 0 1
18036: PPUSH
18037: CALL_OW 12
18041: ARRAY
18042: PPUSH
18043: LD_INT 1
18045: PPUSH
18046: CALL_OW 234
// end ;
18050: PPOPN 1
18052: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18053: LD_EXP 29
18057: PUSH
18058: LD_EXP 77
18062: AND
18063: IFFALSE 18175
18065: GO 18067
18067: DISABLE
18068: LD_INT 0
18070: PPUSH
18071: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18072: LD_ADDR_VAR 0 2
18076: PUSH
18077: LD_INT 22
18079: PUSH
18080: LD_OWVAR 2
18084: PUSH
18085: EMPTY
18086: LIST
18087: LIST
18088: PUSH
18089: LD_INT 2
18091: PUSH
18092: LD_INT 30
18094: PUSH
18095: LD_INT 27
18097: PUSH
18098: EMPTY
18099: LIST
18100: LIST
18101: PUSH
18102: LD_INT 30
18104: PUSH
18105: LD_INT 26
18107: PUSH
18108: EMPTY
18109: LIST
18110: LIST
18111: PUSH
18112: LD_INT 30
18114: PUSH
18115: LD_INT 28
18117: PUSH
18118: EMPTY
18119: LIST
18120: LIST
18121: PUSH
18122: EMPTY
18123: LIST
18124: LIST
18125: LIST
18126: LIST
18127: PUSH
18128: EMPTY
18129: LIST
18130: LIST
18131: PPUSH
18132: CALL_OW 69
18136: ST_TO_ADDR
// if not tmp then
18137: LD_VAR 0 2
18141: NOT
18142: IFFALSE 18146
// exit ;
18144: GO 18175
// for i in tmp do
18146: LD_ADDR_VAR 0 1
18150: PUSH
18151: LD_VAR 0 2
18155: PUSH
18156: FOR_IN
18157: IFFALSE 18173
// SetLives ( i , 1 ) ;
18159: LD_VAR 0 1
18163: PPUSH
18164: LD_INT 1
18166: PPUSH
18167: CALL_OW 234
18171: GO 18156
18173: POP
18174: POP
// end ;
18175: PPOPN 2
18177: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18178: LD_EXP 29
18182: PUSH
18183: LD_EXP 78
18187: AND
18188: IFFALSE 18475
18190: GO 18192
18192: DISABLE
18193: LD_INT 0
18195: PPUSH
18196: PPUSH
18197: PPUSH
// begin i := rand ( 1 , 7 ) ;
18198: LD_ADDR_VAR 0 1
18202: PUSH
18203: LD_INT 1
18205: PPUSH
18206: LD_INT 7
18208: PPUSH
18209: CALL_OW 12
18213: ST_TO_ADDR
// case i of 1 :
18214: LD_VAR 0 1
18218: PUSH
18219: LD_INT 1
18221: DOUBLE
18222: EQUAL
18223: IFTRUE 18227
18225: GO 18237
18227: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18228: LD_STRING earthquake(getX(game), 0, 32)
18230: PPUSH
18231: CALL_OW 559
18235: GO 18475
18237: LD_INT 2
18239: DOUBLE
18240: EQUAL
18241: IFTRUE 18245
18243: GO 18259
18245: POP
// begin ToLua ( displayStucuk(); ) ;
18246: LD_STRING displayStucuk();
18248: PPUSH
18249: CALL_OW 559
// ResetFog ;
18253: CALL_OW 335
// end ; 3 :
18257: GO 18475
18259: LD_INT 3
18261: DOUBLE
18262: EQUAL
18263: IFTRUE 18267
18265: GO 18371
18267: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18268: LD_ADDR_VAR 0 2
18272: PUSH
18273: LD_INT 22
18275: PUSH
18276: LD_OWVAR 2
18280: PUSH
18281: EMPTY
18282: LIST
18283: LIST
18284: PUSH
18285: LD_INT 25
18287: PUSH
18288: LD_INT 1
18290: PUSH
18291: EMPTY
18292: LIST
18293: LIST
18294: PUSH
18295: EMPTY
18296: LIST
18297: LIST
18298: PPUSH
18299: CALL_OW 69
18303: ST_TO_ADDR
// if not tmp then
18304: LD_VAR 0 2
18308: NOT
18309: IFFALSE 18313
// exit ;
18311: GO 18475
// un := tmp [ rand ( 1 , tmp ) ] ;
18313: LD_ADDR_VAR 0 3
18317: PUSH
18318: LD_VAR 0 2
18322: PUSH
18323: LD_INT 1
18325: PPUSH
18326: LD_VAR 0 2
18330: PPUSH
18331: CALL_OW 12
18335: ARRAY
18336: ST_TO_ADDR
// if Crawls ( un ) then
18337: LD_VAR 0 3
18341: PPUSH
18342: CALL_OW 318
18346: IFFALSE 18357
// ComWalk ( un ) ;
18348: LD_VAR 0 3
18352: PPUSH
18353: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18357: LD_VAR 0 3
18361: PPUSH
18362: LD_INT 8
18364: PPUSH
18365: CALL_OW 336
// end ; 4 :
18369: GO 18475
18371: LD_INT 4
18373: DOUBLE
18374: EQUAL
18375: IFTRUE 18379
18377: GO 18453
18379: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18380: LD_ADDR_VAR 0 2
18384: PUSH
18385: LD_INT 22
18387: PUSH
18388: LD_OWVAR 2
18392: PUSH
18393: EMPTY
18394: LIST
18395: LIST
18396: PUSH
18397: LD_INT 30
18399: PUSH
18400: LD_INT 29
18402: PUSH
18403: EMPTY
18404: LIST
18405: LIST
18406: PUSH
18407: EMPTY
18408: LIST
18409: LIST
18410: PPUSH
18411: CALL_OW 69
18415: ST_TO_ADDR
// if not tmp then
18416: LD_VAR 0 2
18420: NOT
18421: IFFALSE 18425
// exit ;
18423: GO 18475
// CenterNowOnUnits ( tmp [ 1 ] ) ;
18425: LD_VAR 0 2
18429: PUSH
18430: LD_INT 1
18432: ARRAY
18433: PPUSH
18434: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
18438: LD_VAR 0 2
18442: PUSH
18443: LD_INT 1
18445: ARRAY
18446: PPUSH
18447: CALL_OW 65
// end ; 5 .. 7 :
18451: GO 18475
18453: LD_INT 5
18455: DOUBLE
18456: GREATEREQUAL
18457: IFFALSE 18465
18459: LD_INT 7
18461: DOUBLE
18462: LESSEQUAL
18463: IFTRUE 18467
18465: GO 18474
18467: POP
// StreamSibBomb ; end ;
18468: CALL 14712 0 0
18472: GO 18475
18474: POP
// end ;
18475: PPOPN 3
18477: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18478: LD_EXP 29
18482: PUSH
18483: LD_EXP 79
18487: AND
18488: IFFALSE 18644
18490: GO 18492
18492: DISABLE
18493: LD_INT 0
18495: PPUSH
18496: PPUSH
18497: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18498: LD_ADDR_VAR 0 2
18502: PUSH
18503: LD_INT 81
18505: PUSH
18506: LD_OWVAR 2
18510: PUSH
18511: EMPTY
18512: LIST
18513: LIST
18514: PUSH
18515: LD_INT 2
18517: PUSH
18518: LD_INT 21
18520: PUSH
18521: LD_INT 1
18523: PUSH
18524: EMPTY
18525: LIST
18526: LIST
18527: PUSH
18528: LD_INT 21
18530: PUSH
18531: LD_INT 2
18533: PUSH
18534: EMPTY
18535: LIST
18536: LIST
18537: PUSH
18538: EMPTY
18539: LIST
18540: LIST
18541: LIST
18542: PUSH
18543: EMPTY
18544: LIST
18545: LIST
18546: PPUSH
18547: CALL_OW 69
18551: ST_TO_ADDR
// if not tmp then
18552: LD_VAR 0 2
18556: NOT
18557: IFFALSE 18561
// exit ;
18559: GO 18644
// p := 0 ;
18561: LD_ADDR_VAR 0 3
18565: PUSH
18566: LD_INT 0
18568: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18569: LD_INT 35
18571: PPUSH
18572: CALL_OW 67
// p := p + 1 ;
18576: LD_ADDR_VAR 0 3
18580: PUSH
18581: LD_VAR 0 3
18585: PUSH
18586: LD_INT 1
18588: PLUS
18589: ST_TO_ADDR
// for i in tmp do
18590: LD_ADDR_VAR 0 1
18594: PUSH
18595: LD_VAR 0 2
18599: PUSH
18600: FOR_IN
18601: IFFALSE 18632
// if GetLives ( i ) < 1000 then
18603: LD_VAR 0 1
18607: PPUSH
18608: CALL_OW 256
18612: PUSH
18613: LD_INT 1000
18615: LESS
18616: IFFALSE 18630
// SetLives ( i , 1000 ) ;
18618: LD_VAR 0 1
18622: PPUSH
18623: LD_INT 1000
18625: PPUSH
18626: CALL_OW 234
18630: GO 18600
18632: POP
18633: POP
// until p > 20 ;
18634: LD_VAR 0 3
18638: PUSH
18639: LD_INT 20
18641: GREATER
18642: IFFALSE 18569
// end ;
18644: PPOPN 3
18646: END
// every 0 0$1 trigger StreamModeActive and sTime do
18647: LD_EXP 29
18651: PUSH
18652: LD_EXP 80
18656: AND
18657: IFFALSE 18692
18659: GO 18661
18661: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18662: LD_INT 28
18664: PPUSH
18665: LD_OWVAR 2
18669: PPUSH
18670: LD_INT 2
18672: PPUSH
18673: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18677: LD_INT 30
18679: PPUSH
18680: LD_OWVAR 2
18684: PPUSH
18685: LD_INT 2
18687: PPUSH
18688: CALL_OW 322
// end ;
18692: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18693: LD_EXP 29
18697: PUSH
18698: LD_EXP 81
18702: AND
18703: IFFALSE 18824
18705: GO 18707
18707: DISABLE
18708: LD_INT 0
18710: PPUSH
18711: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18712: LD_ADDR_VAR 0 2
18716: PUSH
18717: LD_INT 22
18719: PUSH
18720: LD_OWVAR 2
18724: PUSH
18725: EMPTY
18726: LIST
18727: LIST
18728: PUSH
18729: LD_INT 21
18731: PUSH
18732: LD_INT 1
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: PUSH
18739: LD_INT 3
18741: PUSH
18742: LD_INT 23
18744: PUSH
18745: LD_INT 0
18747: PUSH
18748: EMPTY
18749: LIST
18750: LIST
18751: PUSH
18752: EMPTY
18753: LIST
18754: LIST
18755: PUSH
18756: EMPTY
18757: LIST
18758: LIST
18759: LIST
18760: PPUSH
18761: CALL_OW 69
18765: ST_TO_ADDR
// if not tmp then
18766: LD_VAR 0 2
18770: NOT
18771: IFFALSE 18775
// exit ;
18773: GO 18824
// for i in tmp do
18775: LD_ADDR_VAR 0 1
18779: PUSH
18780: LD_VAR 0 2
18784: PUSH
18785: FOR_IN
18786: IFFALSE 18822
// begin if Crawls ( i ) then
18788: LD_VAR 0 1
18792: PPUSH
18793: CALL_OW 318
18797: IFFALSE 18808
// ComWalk ( i ) ;
18799: LD_VAR 0 1
18803: PPUSH
18804: CALL_OW 138
// SetClass ( i , 2 ) ;
18808: LD_VAR 0 1
18812: PPUSH
18813: LD_INT 2
18815: PPUSH
18816: CALL_OW 336
// end ;
18820: GO 18785
18822: POP
18823: POP
// end ;
18824: PPOPN 2
18826: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18827: LD_EXP 29
18831: PUSH
18832: LD_EXP 82
18836: AND
18837: IFFALSE 19125
18839: GO 18841
18841: DISABLE
18842: LD_INT 0
18844: PPUSH
18845: PPUSH
18846: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
18847: LD_OWVAR 2
18851: PPUSH
18852: LD_INT 9
18854: PPUSH
18855: LD_INT 1
18857: PPUSH
18858: LD_INT 1
18860: PPUSH
18861: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
18865: LD_INT 9
18867: PPUSH
18868: LD_OWVAR 2
18872: PPUSH
18873: CALL_OW 343
// uc_side := 9 ;
18877: LD_ADDR_OWVAR 20
18881: PUSH
18882: LD_INT 9
18884: ST_TO_ADDR
// uc_nation := 2 ;
18885: LD_ADDR_OWVAR 21
18889: PUSH
18890: LD_INT 2
18892: ST_TO_ADDR
// hc_name := Dark Warrior ;
18893: LD_ADDR_OWVAR 26
18897: PUSH
18898: LD_STRING Dark Warrior
18900: ST_TO_ADDR
// hc_gallery :=  ;
18901: LD_ADDR_OWVAR 33
18905: PUSH
18906: LD_STRING 
18908: ST_TO_ADDR
// hc_noskilllimit := true ;
18909: LD_ADDR_OWVAR 76
18913: PUSH
18914: LD_INT 1
18916: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
18917: LD_ADDR_OWVAR 31
18921: PUSH
18922: LD_INT 30
18924: PUSH
18925: LD_INT 30
18927: PUSH
18928: LD_INT 30
18930: PUSH
18931: LD_INT 30
18933: PUSH
18934: EMPTY
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: ST_TO_ADDR
// un := CreateHuman ;
18940: LD_ADDR_VAR 0 3
18944: PUSH
18945: CALL_OW 44
18949: ST_TO_ADDR
// hc_noskilllimit := false ;
18950: LD_ADDR_OWVAR 76
18954: PUSH
18955: LD_INT 0
18957: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18958: LD_VAR 0 3
18962: PPUSH
18963: LD_INT 1
18965: PPUSH
18966: CALL_OW 51
// ToLua ( playRanger() ) ;
18970: LD_STRING playRanger()
18972: PPUSH
18973: CALL_OW 559
// p := 0 ;
18977: LD_ADDR_VAR 0 2
18981: PUSH
18982: LD_INT 0
18984: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18985: LD_INT 35
18987: PPUSH
18988: CALL_OW 67
// p := p + 1 ;
18992: LD_ADDR_VAR 0 2
18996: PUSH
18997: LD_VAR 0 2
19001: PUSH
19002: LD_INT 1
19004: PLUS
19005: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19006: LD_VAR 0 3
19010: PPUSH
19011: CALL_OW 256
19015: PUSH
19016: LD_INT 1000
19018: LESS
19019: IFFALSE 19033
// SetLives ( un , 1000 ) ;
19021: LD_VAR 0 3
19025: PPUSH
19026: LD_INT 1000
19028: PPUSH
19029: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19033: LD_VAR 0 3
19037: PPUSH
19038: LD_INT 81
19040: PUSH
19041: LD_OWVAR 2
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: PUSH
19050: LD_INT 91
19052: PUSH
19053: LD_VAR 0 3
19057: PUSH
19058: LD_INT 30
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: LIST
19065: PUSH
19066: EMPTY
19067: LIST
19068: LIST
19069: PPUSH
19070: CALL_OW 69
19074: PPUSH
19075: LD_VAR 0 3
19079: PPUSH
19080: CALL_OW 74
19084: PPUSH
19085: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
19089: LD_VAR 0 2
19093: PUSH
19094: LD_INT 80
19096: GREATER
19097: PUSH
19098: LD_VAR 0 3
19102: PPUSH
19103: CALL_OW 301
19107: OR
19108: IFFALSE 18985
// if un then
19110: LD_VAR 0 3
19114: IFFALSE 19125
// RemoveUnit ( un ) ;
19116: LD_VAR 0 3
19120: PPUSH
19121: CALL_OW 64
// end ;
19125: PPOPN 3
19127: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
19128: LD_EXP 83
19132: IFFALSE 19248
19134: GO 19136
19136: DISABLE
19137: LD_INT 0
19139: PPUSH
19140: PPUSH
19141: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19142: LD_ADDR_VAR 0 2
19146: PUSH
19147: LD_INT 81
19149: PUSH
19150: LD_OWVAR 2
19154: PUSH
19155: EMPTY
19156: LIST
19157: LIST
19158: PUSH
19159: LD_INT 21
19161: PUSH
19162: LD_INT 1
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: PUSH
19169: EMPTY
19170: LIST
19171: LIST
19172: PPUSH
19173: CALL_OW 69
19177: ST_TO_ADDR
// ToLua ( playComputer() ) ;
19178: LD_STRING playComputer()
19180: PPUSH
19181: CALL_OW 559
// if not tmp then
19185: LD_VAR 0 2
19189: NOT
19190: IFFALSE 19194
// exit ;
19192: GO 19248
// for i in tmp do
19194: LD_ADDR_VAR 0 1
19198: PUSH
19199: LD_VAR 0 2
19203: PUSH
19204: FOR_IN
19205: IFFALSE 19246
// for j := 1 to 4 do
19207: LD_ADDR_VAR 0 3
19211: PUSH
19212: DOUBLE
19213: LD_INT 1
19215: DEC
19216: ST_TO_ADDR
19217: LD_INT 4
19219: PUSH
19220: FOR_TO
19221: IFFALSE 19242
// SetSkill ( i , j , 10 ) ;
19223: LD_VAR 0 1
19227: PPUSH
19228: LD_VAR 0 3
19232: PPUSH
19233: LD_INT 10
19235: PPUSH
19236: CALL_OW 237
19240: GO 19220
19242: POP
19243: POP
19244: GO 19204
19246: POP
19247: POP
// end ;
19248: PPOPN 3
19250: END
// every 0 0$1 trigger s30 do var i , tmp ;
19251: LD_EXP 84
19255: IFFALSE 19324
19257: GO 19259
19259: DISABLE
19260: LD_INT 0
19262: PPUSH
19263: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19264: LD_ADDR_VAR 0 2
19268: PUSH
19269: LD_INT 22
19271: PUSH
19272: LD_OWVAR 2
19276: PUSH
19277: EMPTY
19278: LIST
19279: LIST
19280: PPUSH
19281: CALL_OW 69
19285: ST_TO_ADDR
// if not tmp then
19286: LD_VAR 0 2
19290: NOT
19291: IFFALSE 19295
// exit ;
19293: GO 19324
// for i in tmp do
19295: LD_ADDR_VAR 0 1
19299: PUSH
19300: LD_VAR 0 2
19304: PUSH
19305: FOR_IN
19306: IFFALSE 19322
// SetLives ( i , 300 ) ;
19308: LD_VAR 0 1
19312: PPUSH
19313: LD_INT 300
19315: PPUSH
19316: CALL_OW 234
19320: GO 19305
19322: POP
19323: POP
// end ;
19324: PPOPN 2
19326: END
// every 0 0$1 trigger s60 do var i , tmp ;
19327: LD_EXP 85
19331: IFFALSE 19400
19333: GO 19335
19335: DISABLE
19336: LD_INT 0
19338: PPUSH
19339: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19340: LD_ADDR_VAR 0 2
19344: PUSH
19345: LD_INT 22
19347: PUSH
19348: LD_OWVAR 2
19352: PUSH
19353: EMPTY
19354: LIST
19355: LIST
19356: PPUSH
19357: CALL_OW 69
19361: ST_TO_ADDR
// if not tmp then
19362: LD_VAR 0 2
19366: NOT
19367: IFFALSE 19371
// exit ;
19369: GO 19400
// for i in tmp do
19371: LD_ADDR_VAR 0 1
19375: PUSH
19376: LD_VAR 0 2
19380: PUSH
19381: FOR_IN
19382: IFFALSE 19398
// SetLives ( i , 600 ) ;
19384: LD_VAR 0 1
19388: PPUSH
19389: LD_INT 600
19391: PPUSH
19392: CALL_OW 234
19396: GO 19381
19398: POP
19399: POP
// end ;
19400: PPOPN 2
19402: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19403: LD_INT 0
19405: PPUSH
// case cmd of 301 :
19406: LD_VAR 0 1
19410: PUSH
19411: LD_INT 301
19413: DOUBLE
19414: EQUAL
19415: IFTRUE 19419
19417: GO 19451
19419: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
19420: LD_VAR 0 6
19424: PPUSH
19425: LD_VAR 0 7
19429: PPUSH
19430: LD_VAR 0 8
19434: PPUSH
19435: LD_VAR 0 4
19439: PPUSH
19440: LD_VAR 0 5
19444: PPUSH
19445: CALL 20660 0 5
19449: GO 19572
19451: LD_INT 302
19453: DOUBLE
19454: EQUAL
19455: IFTRUE 19459
19457: GO 19496
19459: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
19460: LD_VAR 0 6
19464: PPUSH
19465: LD_VAR 0 7
19469: PPUSH
19470: LD_VAR 0 8
19474: PPUSH
19475: LD_VAR 0 9
19479: PPUSH
19480: LD_VAR 0 4
19484: PPUSH
19485: LD_VAR 0 5
19489: PPUSH
19490: CALL 20751 0 6
19494: GO 19572
19496: LD_INT 303
19498: DOUBLE
19499: EQUAL
19500: IFTRUE 19504
19502: GO 19541
19504: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
19505: LD_VAR 0 6
19509: PPUSH
19510: LD_VAR 0 7
19514: PPUSH
19515: LD_VAR 0 8
19519: PPUSH
19520: LD_VAR 0 9
19524: PPUSH
19525: LD_VAR 0 4
19529: PPUSH
19530: LD_VAR 0 5
19534: PPUSH
19535: CALL 19577 0 6
19539: GO 19572
19541: LD_INT 304
19543: DOUBLE
19544: EQUAL
19545: IFTRUE 19549
19547: GO 19571
19549: POP
// hHackTeleport ( unit , x , y ) ; end ;
19550: LD_VAR 0 2
19554: PPUSH
19555: LD_VAR 0 4
19559: PPUSH
19560: LD_VAR 0 5
19564: PPUSH
19565: CALL 21344 0 3
19569: GO 19572
19571: POP
// end ;
19572: LD_VAR 0 12
19576: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
19577: LD_INT 0
19579: PPUSH
19580: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
19581: LD_VAR 0 1
19585: PUSH
19586: LD_INT 1
19588: LESS
19589: PUSH
19590: LD_VAR 0 1
19594: PUSH
19595: LD_INT 3
19597: GREATER
19598: OR
19599: PUSH
19600: LD_VAR 0 5
19604: PPUSH
19605: LD_VAR 0 6
19609: PPUSH
19610: CALL_OW 428
19614: OR
19615: IFFALSE 19619
// exit ;
19617: GO 20347
// uc_side := your_side ;
19619: LD_ADDR_OWVAR 20
19623: PUSH
19624: LD_OWVAR 2
19628: ST_TO_ADDR
// uc_nation := nation ;
19629: LD_ADDR_OWVAR 21
19633: PUSH
19634: LD_VAR 0 1
19638: ST_TO_ADDR
// bc_level = 1 ;
19639: LD_ADDR_OWVAR 43
19643: PUSH
19644: LD_INT 1
19646: ST_TO_ADDR
// case btype of 1 :
19647: LD_VAR 0 2
19651: PUSH
19652: LD_INT 1
19654: DOUBLE
19655: EQUAL
19656: IFTRUE 19660
19658: GO 19671
19660: POP
// bc_type := b_depot ; 2 :
19661: LD_ADDR_OWVAR 42
19665: PUSH
19666: LD_INT 0
19668: ST_TO_ADDR
19669: GO 20291
19671: LD_INT 2
19673: DOUBLE
19674: EQUAL
19675: IFTRUE 19679
19677: GO 19690
19679: POP
// bc_type := b_warehouse ; 3 :
19680: LD_ADDR_OWVAR 42
19684: PUSH
19685: LD_INT 1
19687: ST_TO_ADDR
19688: GO 20291
19690: LD_INT 3
19692: DOUBLE
19693: EQUAL
19694: IFTRUE 19698
19696: GO 19709
19698: POP
// bc_type := b_lab ; 4 .. 9 :
19699: LD_ADDR_OWVAR 42
19703: PUSH
19704: LD_INT 6
19706: ST_TO_ADDR
19707: GO 20291
19709: LD_INT 4
19711: DOUBLE
19712: GREATEREQUAL
19713: IFFALSE 19721
19715: LD_INT 9
19717: DOUBLE
19718: LESSEQUAL
19719: IFTRUE 19723
19721: GO 19783
19723: POP
// begin bc_type := b_lab_half ;
19724: LD_ADDR_OWVAR 42
19728: PUSH
19729: LD_INT 7
19731: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
19732: LD_ADDR_OWVAR 44
19736: PUSH
19737: LD_INT 10
19739: PUSH
19740: LD_INT 11
19742: PUSH
19743: LD_INT 12
19745: PUSH
19746: LD_INT 15
19748: PUSH
19749: LD_INT 14
19751: PUSH
19752: LD_INT 13
19754: PUSH
19755: EMPTY
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: PUSH
19763: LD_VAR 0 2
19767: PUSH
19768: LD_INT 3
19770: MINUS
19771: ARRAY
19772: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
19773: LD_ADDR_OWVAR 45
19777: PUSH
19778: LD_INT 9
19780: ST_TO_ADDR
// end ; 10 .. 13 :
19781: GO 20291
19783: LD_INT 10
19785: DOUBLE
19786: GREATEREQUAL
19787: IFFALSE 19795
19789: LD_INT 13
19791: DOUBLE
19792: LESSEQUAL
19793: IFTRUE 19797
19795: GO 19874
19797: POP
// begin bc_type := b_lab_full ;
19798: LD_ADDR_OWVAR 42
19802: PUSH
19803: LD_INT 8
19805: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
19806: LD_ADDR_OWVAR 44
19810: PUSH
19811: LD_INT 10
19813: PUSH
19814: LD_INT 12
19816: PUSH
19817: LD_INT 14
19819: PUSH
19820: LD_INT 13
19822: PUSH
19823: EMPTY
19824: LIST
19825: LIST
19826: LIST
19827: LIST
19828: PUSH
19829: LD_VAR 0 2
19833: PUSH
19834: LD_INT 9
19836: MINUS
19837: ARRAY
19838: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
19839: LD_ADDR_OWVAR 45
19843: PUSH
19844: LD_INT 11
19846: PUSH
19847: LD_INT 15
19849: PUSH
19850: LD_INT 12
19852: PUSH
19853: LD_INT 15
19855: PUSH
19856: EMPTY
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: PUSH
19862: LD_VAR 0 2
19866: PUSH
19867: LD_INT 9
19869: MINUS
19870: ARRAY
19871: ST_TO_ADDR
// end ; 14 :
19872: GO 20291
19874: LD_INT 14
19876: DOUBLE
19877: EQUAL
19878: IFTRUE 19882
19880: GO 19893
19882: POP
// bc_type := b_workshop ; 15 :
19883: LD_ADDR_OWVAR 42
19887: PUSH
19888: LD_INT 2
19890: ST_TO_ADDR
19891: GO 20291
19893: LD_INT 15
19895: DOUBLE
19896: EQUAL
19897: IFTRUE 19901
19899: GO 19912
19901: POP
// bc_type := b_factory ; 16 :
19902: LD_ADDR_OWVAR 42
19906: PUSH
19907: LD_INT 3
19909: ST_TO_ADDR
19910: GO 20291
19912: LD_INT 16
19914: DOUBLE
19915: EQUAL
19916: IFTRUE 19920
19918: GO 19931
19920: POP
// bc_type := b_ext_gun ; 17 :
19921: LD_ADDR_OWVAR 42
19925: PUSH
19926: LD_INT 17
19928: ST_TO_ADDR
19929: GO 20291
19931: LD_INT 17
19933: DOUBLE
19934: EQUAL
19935: IFTRUE 19939
19937: GO 19967
19939: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
19940: LD_ADDR_OWVAR 42
19944: PUSH
19945: LD_INT 19
19947: PUSH
19948: LD_INT 23
19950: PUSH
19951: LD_INT 19
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: LIST
19958: PUSH
19959: LD_VAR 0 1
19963: ARRAY
19964: ST_TO_ADDR
19965: GO 20291
19967: LD_INT 18
19969: DOUBLE
19970: EQUAL
19971: IFTRUE 19975
19973: GO 19986
19975: POP
// bc_type := b_ext_radar ; 19 :
19976: LD_ADDR_OWVAR 42
19980: PUSH
19981: LD_INT 20
19983: ST_TO_ADDR
19984: GO 20291
19986: LD_INT 19
19988: DOUBLE
19989: EQUAL
19990: IFTRUE 19994
19992: GO 20005
19994: POP
// bc_type := b_ext_radio ; 20 :
19995: LD_ADDR_OWVAR 42
19999: PUSH
20000: LD_INT 22
20002: ST_TO_ADDR
20003: GO 20291
20005: LD_INT 20
20007: DOUBLE
20008: EQUAL
20009: IFTRUE 20013
20011: GO 20024
20013: POP
// bc_type := b_ext_siberium ; 21 :
20014: LD_ADDR_OWVAR 42
20018: PUSH
20019: LD_INT 21
20021: ST_TO_ADDR
20022: GO 20291
20024: LD_INT 21
20026: DOUBLE
20027: EQUAL
20028: IFTRUE 20032
20030: GO 20043
20032: POP
// bc_type := b_ext_computer ; 22 :
20033: LD_ADDR_OWVAR 42
20037: PUSH
20038: LD_INT 24
20040: ST_TO_ADDR
20041: GO 20291
20043: LD_INT 22
20045: DOUBLE
20046: EQUAL
20047: IFTRUE 20051
20049: GO 20062
20051: POP
// bc_type := b_ext_track ; 23 :
20052: LD_ADDR_OWVAR 42
20056: PUSH
20057: LD_INT 16
20059: ST_TO_ADDR
20060: GO 20291
20062: LD_INT 23
20064: DOUBLE
20065: EQUAL
20066: IFTRUE 20070
20068: GO 20081
20070: POP
// bc_type := b_ext_laser ; 24 :
20071: LD_ADDR_OWVAR 42
20075: PUSH
20076: LD_INT 25
20078: ST_TO_ADDR
20079: GO 20291
20081: LD_INT 24
20083: DOUBLE
20084: EQUAL
20085: IFTRUE 20089
20087: GO 20100
20089: POP
// bc_type := b_control_tower ; 25 :
20090: LD_ADDR_OWVAR 42
20094: PUSH
20095: LD_INT 36
20097: ST_TO_ADDR
20098: GO 20291
20100: LD_INT 25
20102: DOUBLE
20103: EQUAL
20104: IFTRUE 20108
20106: GO 20119
20108: POP
// bc_type := b_breastwork ; 26 :
20109: LD_ADDR_OWVAR 42
20113: PUSH
20114: LD_INT 31
20116: ST_TO_ADDR
20117: GO 20291
20119: LD_INT 26
20121: DOUBLE
20122: EQUAL
20123: IFTRUE 20127
20125: GO 20138
20127: POP
// bc_type := b_bunker ; 27 :
20128: LD_ADDR_OWVAR 42
20132: PUSH
20133: LD_INT 32
20135: ST_TO_ADDR
20136: GO 20291
20138: LD_INT 27
20140: DOUBLE
20141: EQUAL
20142: IFTRUE 20146
20144: GO 20157
20146: POP
// bc_type := b_turret ; 28 :
20147: LD_ADDR_OWVAR 42
20151: PUSH
20152: LD_INT 33
20154: ST_TO_ADDR
20155: GO 20291
20157: LD_INT 28
20159: DOUBLE
20160: EQUAL
20161: IFTRUE 20165
20163: GO 20176
20165: POP
// bc_type := b_armoury ; 29 :
20166: LD_ADDR_OWVAR 42
20170: PUSH
20171: LD_INT 4
20173: ST_TO_ADDR
20174: GO 20291
20176: LD_INT 29
20178: DOUBLE
20179: EQUAL
20180: IFTRUE 20184
20182: GO 20195
20184: POP
// bc_type := b_barracks ; 30 :
20185: LD_ADDR_OWVAR 42
20189: PUSH
20190: LD_INT 5
20192: ST_TO_ADDR
20193: GO 20291
20195: LD_INT 30
20197: DOUBLE
20198: EQUAL
20199: IFTRUE 20203
20201: GO 20214
20203: POP
// bc_type := b_solar_power ; 31 :
20204: LD_ADDR_OWVAR 42
20208: PUSH
20209: LD_INT 27
20211: ST_TO_ADDR
20212: GO 20291
20214: LD_INT 31
20216: DOUBLE
20217: EQUAL
20218: IFTRUE 20222
20220: GO 20233
20222: POP
// bc_type := b_oil_power ; 32 :
20223: LD_ADDR_OWVAR 42
20227: PUSH
20228: LD_INT 26
20230: ST_TO_ADDR
20231: GO 20291
20233: LD_INT 32
20235: DOUBLE
20236: EQUAL
20237: IFTRUE 20241
20239: GO 20252
20241: POP
// bc_type := b_siberite_power ; 33 :
20242: LD_ADDR_OWVAR 42
20246: PUSH
20247: LD_INT 28
20249: ST_TO_ADDR
20250: GO 20291
20252: LD_INT 33
20254: DOUBLE
20255: EQUAL
20256: IFTRUE 20260
20258: GO 20271
20260: POP
// bc_type := b_oil_mine ; 34 :
20261: LD_ADDR_OWVAR 42
20265: PUSH
20266: LD_INT 29
20268: ST_TO_ADDR
20269: GO 20291
20271: LD_INT 34
20273: DOUBLE
20274: EQUAL
20275: IFTRUE 20279
20277: GO 20290
20279: POP
// bc_type := b_siberite_mine ; end ;
20280: LD_ADDR_OWVAR 42
20284: PUSH
20285: LD_INT 30
20287: ST_TO_ADDR
20288: GO 20291
20290: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
20291: LD_ADDR_VAR 0 8
20295: PUSH
20296: LD_VAR 0 5
20300: PPUSH
20301: LD_VAR 0 6
20305: PPUSH
20306: LD_VAR 0 3
20310: PPUSH
20311: CALL_OW 47
20315: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
20316: LD_OWVAR 42
20320: PUSH
20321: LD_INT 32
20323: PUSH
20324: LD_INT 33
20326: PUSH
20327: EMPTY
20328: LIST
20329: LIST
20330: IN
20331: IFFALSE 20347
// PlaceWeaponTurret ( b , weapon ) ;
20333: LD_VAR 0 8
20337: PPUSH
20338: LD_VAR 0 4
20342: PPUSH
20343: CALL_OW 431
// end ;
20347: LD_VAR 0 7
20351: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
20352: LD_INT 0
20354: PPUSH
20355: PPUSH
20356: PPUSH
20357: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20358: LD_ADDR_VAR 0 4
20362: PUSH
20363: LD_INT 22
20365: PUSH
20366: LD_OWVAR 2
20370: PUSH
20371: EMPTY
20372: LIST
20373: LIST
20374: PUSH
20375: LD_INT 2
20377: PUSH
20378: LD_INT 30
20380: PUSH
20381: LD_INT 0
20383: PUSH
20384: EMPTY
20385: LIST
20386: LIST
20387: PUSH
20388: LD_INT 30
20390: PUSH
20391: LD_INT 1
20393: PUSH
20394: EMPTY
20395: LIST
20396: LIST
20397: PUSH
20398: EMPTY
20399: LIST
20400: LIST
20401: LIST
20402: PUSH
20403: EMPTY
20404: LIST
20405: LIST
20406: PPUSH
20407: CALL_OW 69
20411: ST_TO_ADDR
// if not tmp then
20412: LD_VAR 0 4
20416: NOT
20417: IFFALSE 20421
// exit ;
20419: GO 20480
// for i in tmp do
20421: LD_ADDR_VAR 0 2
20425: PUSH
20426: LD_VAR 0 4
20430: PUSH
20431: FOR_IN
20432: IFFALSE 20478
// for j = 1 to 3 do
20434: LD_ADDR_VAR 0 3
20438: PUSH
20439: DOUBLE
20440: LD_INT 1
20442: DEC
20443: ST_TO_ADDR
20444: LD_INT 3
20446: PUSH
20447: FOR_TO
20448: IFFALSE 20474
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
20450: LD_VAR 0 2
20454: PPUSH
20455: CALL_OW 274
20459: PPUSH
20460: LD_VAR 0 3
20464: PPUSH
20465: LD_INT 99999
20467: PPUSH
20468: CALL_OW 277
20472: GO 20447
20474: POP
20475: POP
20476: GO 20431
20478: POP
20479: POP
// end ;
20480: LD_VAR 0 1
20484: RET
// export function hHackSetLevel10 ; var i , j ; begin
20485: LD_INT 0
20487: PPUSH
20488: PPUSH
20489: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20490: LD_ADDR_VAR 0 2
20494: PUSH
20495: LD_INT 21
20497: PUSH
20498: LD_INT 1
20500: PUSH
20501: EMPTY
20502: LIST
20503: LIST
20504: PPUSH
20505: CALL_OW 69
20509: PUSH
20510: FOR_IN
20511: IFFALSE 20563
// if IsSelected ( i ) then
20513: LD_VAR 0 2
20517: PPUSH
20518: CALL_OW 306
20522: IFFALSE 20561
// begin for j := 1 to 4 do
20524: LD_ADDR_VAR 0 3
20528: PUSH
20529: DOUBLE
20530: LD_INT 1
20532: DEC
20533: ST_TO_ADDR
20534: LD_INT 4
20536: PUSH
20537: FOR_TO
20538: IFFALSE 20559
// SetSkill ( i , j , 10 ) ;
20540: LD_VAR 0 2
20544: PPUSH
20545: LD_VAR 0 3
20549: PPUSH
20550: LD_INT 10
20552: PPUSH
20553: CALL_OW 237
20557: GO 20537
20559: POP
20560: POP
// end ;
20561: GO 20510
20563: POP
20564: POP
// end ;
20565: LD_VAR 0 1
20569: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
20570: LD_INT 0
20572: PPUSH
20573: PPUSH
20574: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
20575: LD_ADDR_VAR 0 2
20579: PUSH
20580: LD_INT 22
20582: PUSH
20583: LD_OWVAR 2
20587: PUSH
20588: EMPTY
20589: LIST
20590: LIST
20591: PUSH
20592: LD_INT 21
20594: PUSH
20595: LD_INT 1
20597: PUSH
20598: EMPTY
20599: LIST
20600: LIST
20601: PUSH
20602: EMPTY
20603: LIST
20604: LIST
20605: PPUSH
20606: CALL_OW 69
20610: PUSH
20611: FOR_IN
20612: IFFALSE 20653
// begin for j := 1 to 4 do
20614: LD_ADDR_VAR 0 3
20618: PUSH
20619: DOUBLE
20620: LD_INT 1
20622: DEC
20623: ST_TO_ADDR
20624: LD_INT 4
20626: PUSH
20627: FOR_TO
20628: IFFALSE 20649
// SetSkill ( i , j , 10 ) ;
20630: LD_VAR 0 2
20634: PPUSH
20635: LD_VAR 0 3
20639: PPUSH
20640: LD_INT 10
20642: PPUSH
20643: CALL_OW 237
20647: GO 20627
20649: POP
20650: POP
// end ;
20651: GO 20611
20653: POP
20654: POP
// end ;
20655: LD_VAR 0 1
20659: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
20660: LD_INT 0
20662: PPUSH
// uc_side := your_side ;
20663: LD_ADDR_OWVAR 20
20667: PUSH
20668: LD_OWVAR 2
20672: ST_TO_ADDR
// uc_nation := nation ;
20673: LD_ADDR_OWVAR 21
20677: PUSH
20678: LD_VAR 0 1
20682: ST_TO_ADDR
// InitHc ;
20683: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
20687: LD_INT 0
20689: PPUSH
20690: LD_VAR 0 2
20694: PPUSH
20695: LD_VAR 0 3
20699: PPUSH
20700: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
20704: LD_VAR 0 4
20708: PPUSH
20709: LD_VAR 0 5
20713: PPUSH
20714: CALL_OW 428
20718: PUSH
20719: LD_INT 0
20721: EQUAL
20722: IFFALSE 20746
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
20724: CALL_OW 44
20728: PPUSH
20729: LD_VAR 0 4
20733: PPUSH
20734: LD_VAR 0 5
20738: PPUSH
20739: LD_INT 1
20741: PPUSH
20742: CALL_OW 48
// end ;
20746: LD_VAR 0 6
20750: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
20751: LD_INT 0
20753: PPUSH
20754: PPUSH
// uc_side := your_side ;
20755: LD_ADDR_OWVAR 20
20759: PUSH
20760: LD_OWVAR 2
20764: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
20765: LD_VAR 0 1
20769: PUSH
20770: LD_INT 1
20772: PUSH
20773: LD_INT 2
20775: PUSH
20776: LD_INT 3
20778: PUSH
20779: LD_INT 4
20781: PUSH
20782: LD_INT 5
20784: PUSH
20785: EMPTY
20786: LIST
20787: LIST
20788: LIST
20789: LIST
20790: LIST
20791: IN
20792: IFFALSE 20804
// uc_nation := nation_american else
20794: LD_ADDR_OWVAR 21
20798: PUSH
20799: LD_INT 1
20801: ST_TO_ADDR
20802: GO 20847
// if chassis in [ 11 , 12 , 13 , 14 ] then
20804: LD_VAR 0 1
20808: PUSH
20809: LD_INT 11
20811: PUSH
20812: LD_INT 12
20814: PUSH
20815: LD_INT 13
20817: PUSH
20818: LD_INT 14
20820: PUSH
20821: EMPTY
20822: LIST
20823: LIST
20824: LIST
20825: LIST
20826: IN
20827: IFFALSE 20839
// uc_nation := nation_arabian else
20829: LD_ADDR_OWVAR 21
20833: PUSH
20834: LD_INT 2
20836: ST_TO_ADDR
20837: GO 20847
// uc_nation := nation_russian ;
20839: LD_ADDR_OWVAR 21
20843: PUSH
20844: LD_INT 3
20846: ST_TO_ADDR
// vc_chassis := chassis ;
20847: LD_ADDR_OWVAR 37
20851: PUSH
20852: LD_VAR 0 1
20856: ST_TO_ADDR
// vc_engine := engine ;
20857: LD_ADDR_OWVAR 39
20861: PUSH
20862: LD_VAR 0 2
20866: ST_TO_ADDR
// vc_control := control ;
20867: LD_ADDR_OWVAR 38
20871: PUSH
20872: LD_VAR 0 3
20876: ST_TO_ADDR
// vc_weapon := weapon ;
20877: LD_ADDR_OWVAR 40
20881: PUSH
20882: LD_VAR 0 4
20886: ST_TO_ADDR
// un := CreateVehicle ;
20887: LD_ADDR_VAR 0 8
20891: PUSH
20892: CALL_OW 45
20896: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
20897: LD_VAR 0 8
20901: PPUSH
20902: LD_INT 0
20904: PPUSH
20905: LD_INT 5
20907: PPUSH
20908: CALL_OW 12
20912: PPUSH
20913: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
20917: LD_VAR 0 8
20921: PPUSH
20922: LD_VAR 0 5
20926: PPUSH
20927: LD_VAR 0 6
20931: PPUSH
20932: LD_INT 1
20934: PPUSH
20935: CALL_OW 48
// end ;
20939: LD_VAR 0 7
20943: RET
// export hInvincible ; every 1 do
20944: GO 20946
20946: DISABLE
// hInvincible := [ ] ;
20947: LD_ADDR_EXP 86
20951: PUSH
20952: EMPTY
20953: ST_TO_ADDR
20954: END
// every 10 do var i ;
20955: GO 20957
20957: DISABLE
20958: LD_INT 0
20960: PPUSH
// begin enable ;
20961: ENABLE
// if not hInvincible then
20962: LD_EXP 86
20966: NOT
20967: IFFALSE 20971
// exit ;
20969: GO 21015
// for i in hInvincible do
20971: LD_ADDR_VAR 0 1
20975: PUSH
20976: LD_EXP 86
20980: PUSH
20981: FOR_IN
20982: IFFALSE 21013
// if GetLives ( i ) < 1000 then
20984: LD_VAR 0 1
20988: PPUSH
20989: CALL_OW 256
20993: PUSH
20994: LD_INT 1000
20996: LESS
20997: IFFALSE 21011
// SetLives ( i , 1000 ) ;
20999: LD_VAR 0 1
21003: PPUSH
21004: LD_INT 1000
21006: PPUSH
21007: CALL_OW 234
21011: GO 20981
21013: POP
21014: POP
// end ;
21015: PPOPN 1
21017: END
// export function hHackInvincible ; var i ; begin
21018: LD_INT 0
21020: PPUSH
21021: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21022: LD_ADDR_VAR 0 2
21026: PUSH
21027: LD_INT 2
21029: PUSH
21030: LD_INT 21
21032: PUSH
21033: LD_INT 1
21035: PUSH
21036: EMPTY
21037: LIST
21038: LIST
21039: PUSH
21040: LD_INT 21
21042: PUSH
21043: LD_INT 2
21045: PUSH
21046: EMPTY
21047: LIST
21048: LIST
21049: PUSH
21050: EMPTY
21051: LIST
21052: LIST
21053: LIST
21054: PPUSH
21055: CALL_OW 69
21059: PUSH
21060: FOR_IN
21061: IFFALSE 21122
// if IsSelected ( i ) then
21063: LD_VAR 0 2
21067: PPUSH
21068: CALL_OW 306
21072: IFFALSE 21120
// begin if i in hInvincible then
21074: LD_VAR 0 2
21078: PUSH
21079: LD_EXP 86
21083: IN
21084: IFFALSE 21104
// hInvincible := hInvincible diff i else
21086: LD_ADDR_EXP 86
21090: PUSH
21091: LD_EXP 86
21095: PUSH
21096: LD_VAR 0 2
21100: DIFF
21101: ST_TO_ADDR
21102: GO 21120
// hInvincible := hInvincible union i ;
21104: LD_ADDR_EXP 86
21108: PUSH
21109: LD_EXP 86
21113: PUSH
21114: LD_VAR 0 2
21118: UNION
21119: ST_TO_ADDR
// end ;
21120: GO 21060
21122: POP
21123: POP
// end ;
21124: LD_VAR 0 1
21128: RET
// export function hHackInvisible ; var i , j ; begin
21129: LD_INT 0
21131: PPUSH
21132: PPUSH
21133: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21134: LD_ADDR_VAR 0 2
21138: PUSH
21139: LD_INT 21
21141: PUSH
21142: LD_INT 1
21144: PUSH
21145: EMPTY
21146: LIST
21147: LIST
21148: PPUSH
21149: CALL_OW 69
21153: PUSH
21154: FOR_IN
21155: IFFALSE 21179
// if IsSelected ( i ) then
21157: LD_VAR 0 2
21161: PPUSH
21162: CALL_OW 306
21166: IFFALSE 21177
// ComForceInvisible ( i ) ;
21168: LD_VAR 0 2
21172: PPUSH
21173: CALL_OW 496
21177: GO 21154
21179: POP
21180: POP
// end ;
21181: LD_VAR 0 1
21185: RET
// export function hHackChangeYourSide ; begin
21186: LD_INT 0
21188: PPUSH
// if your_side = 8 then
21189: LD_OWVAR 2
21193: PUSH
21194: LD_INT 8
21196: EQUAL
21197: IFFALSE 21209
// your_side := 0 else
21199: LD_ADDR_OWVAR 2
21203: PUSH
21204: LD_INT 0
21206: ST_TO_ADDR
21207: GO 21223
// your_side := your_side + 1 ;
21209: LD_ADDR_OWVAR 2
21213: PUSH
21214: LD_OWVAR 2
21218: PUSH
21219: LD_INT 1
21221: PLUS
21222: ST_TO_ADDR
// end ;
21223: LD_VAR 0 1
21227: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21228: LD_INT 0
21230: PPUSH
21231: PPUSH
21232: PPUSH
// for i in all_units do
21233: LD_ADDR_VAR 0 2
21237: PUSH
21238: LD_OWVAR 3
21242: PUSH
21243: FOR_IN
21244: IFFALSE 21322
// if IsSelected ( i ) then
21246: LD_VAR 0 2
21250: PPUSH
21251: CALL_OW 306
21255: IFFALSE 21320
// begin j := GetSide ( i ) ;
21257: LD_ADDR_VAR 0 3
21261: PUSH
21262: LD_VAR 0 2
21266: PPUSH
21267: CALL_OW 255
21271: ST_TO_ADDR
// if j = 8 then
21272: LD_VAR 0 3
21276: PUSH
21277: LD_INT 8
21279: EQUAL
21280: IFFALSE 21292
// j := 0 else
21282: LD_ADDR_VAR 0 3
21286: PUSH
21287: LD_INT 0
21289: ST_TO_ADDR
21290: GO 21306
// j := j + 1 ;
21292: LD_ADDR_VAR 0 3
21296: PUSH
21297: LD_VAR 0 3
21301: PUSH
21302: LD_INT 1
21304: PLUS
21305: ST_TO_ADDR
// SetSide ( i , j ) ;
21306: LD_VAR 0 2
21310: PPUSH
21311: LD_VAR 0 3
21315: PPUSH
21316: CALL_OW 235
// end ;
21320: GO 21243
21322: POP
21323: POP
// end ;
21324: LD_VAR 0 1
21328: RET
// export function hHackFog ; begin
21329: LD_INT 0
21331: PPUSH
// FogOff ( true ) ;
21332: LD_INT 1
21334: PPUSH
21335: CALL_OW 344
// end ;
21339: LD_VAR 0 1
21343: RET
// export function hHackTeleport ( unit , x , y ) ; begin
21344: LD_INT 0
21346: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
21347: LD_VAR 0 1
21351: PPUSH
21352: LD_VAR 0 2
21356: PPUSH
21357: LD_VAR 0 3
21361: PPUSH
21362: LD_INT 1
21364: PPUSH
21365: LD_INT 1
21367: PPUSH
21368: CALL_OW 483
// CenterOnXY ( x , y ) ;
21372: LD_VAR 0 2
21376: PPUSH
21377: LD_VAR 0 3
21381: PPUSH
21382: CALL_OW 84
// end ;
21386: LD_VAR 0 4
21390: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
21391: LD_INT 0
21393: PPUSH
21394: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
21395: LD_VAR 0 1
21399: NOT
21400: PUSH
21401: LD_VAR 0 2
21405: PPUSH
21406: LD_VAR 0 3
21410: PPUSH
21411: CALL_OW 488
21415: NOT
21416: OR
21417: PUSH
21418: LD_VAR 0 1
21422: PPUSH
21423: CALL_OW 266
21427: PUSH
21428: LD_INT 3
21430: NONEQUAL
21431: PUSH
21432: LD_VAR 0 1
21436: PPUSH
21437: CALL_OW 247
21441: PUSH
21442: LD_INT 1
21444: EQUAL
21445: NOT
21446: AND
21447: OR
21448: IFFALSE 21452
// exit ;
21450: GO 21601
// if GetType ( factory ) = unit_human then
21452: LD_VAR 0 1
21456: PPUSH
21457: CALL_OW 247
21461: PUSH
21462: LD_INT 1
21464: EQUAL
21465: IFFALSE 21482
// factory := IsInUnit ( factory ) ;
21467: LD_ADDR_VAR 0 1
21471: PUSH
21472: LD_VAR 0 1
21476: PPUSH
21477: CALL_OW 310
21481: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
21482: LD_VAR 0 1
21486: PPUSH
21487: CALL_OW 266
21491: PUSH
21492: LD_INT 3
21494: NONEQUAL
21495: IFFALSE 21499
// exit ;
21497: GO 21601
// if HexInfo ( x , y ) = factory then
21499: LD_VAR 0 2
21503: PPUSH
21504: LD_VAR 0 3
21508: PPUSH
21509: CALL_OW 428
21513: PUSH
21514: LD_VAR 0 1
21518: EQUAL
21519: IFFALSE 21546
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
21521: LD_ADDR_EXP 87
21525: PUSH
21526: LD_EXP 87
21530: PPUSH
21531: LD_VAR 0 1
21535: PPUSH
21536: LD_INT 0
21538: PPUSH
21539: CALL_OW 1
21543: ST_TO_ADDR
21544: GO 21597
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
21546: LD_ADDR_EXP 87
21550: PUSH
21551: LD_EXP 87
21555: PPUSH
21556: LD_VAR 0 1
21560: PPUSH
21561: LD_VAR 0 1
21565: PPUSH
21566: CALL_OW 255
21570: PUSH
21571: LD_VAR 0 1
21575: PUSH
21576: LD_VAR 0 2
21580: PUSH
21581: LD_VAR 0 3
21585: PUSH
21586: EMPTY
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: PPUSH
21592: CALL_OW 1
21596: ST_TO_ADDR
// UpdateFactoryWaypoints ;
21597: CALL 21606 0 0
// end ;
21601: LD_VAR 0 4
21605: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
21606: LD_INT 0
21608: PPUSH
21609: PPUSH
21610: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
21611: LD_STRING resetFactoryWaypoint();
21613: PPUSH
21614: CALL_OW 559
// if factoryWaypoints then
21618: LD_EXP 87
21622: IFFALSE 21748
// begin list := PrepareArray ( factoryWaypoints ) ;
21624: LD_ADDR_VAR 0 3
21628: PUSH
21629: LD_EXP 87
21633: PPUSH
21634: CALL 68890 0 1
21638: ST_TO_ADDR
// for i := 1 to list do
21639: LD_ADDR_VAR 0 2
21643: PUSH
21644: DOUBLE
21645: LD_INT 1
21647: DEC
21648: ST_TO_ADDR
21649: LD_VAR 0 3
21653: PUSH
21654: FOR_TO
21655: IFFALSE 21746
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
21657: LD_STRING setFactoryWaypointXY(
21659: PUSH
21660: LD_VAR 0 3
21664: PUSH
21665: LD_VAR 0 2
21669: ARRAY
21670: PUSH
21671: LD_INT 1
21673: ARRAY
21674: STR
21675: PUSH
21676: LD_STRING ,
21678: STR
21679: PUSH
21680: LD_VAR 0 3
21684: PUSH
21685: LD_VAR 0 2
21689: ARRAY
21690: PUSH
21691: LD_INT 2
21693: ARRAY
21694: STR
21695: PUSH
21696: LD_STRING ,
21698: STR
21699: PUSH
21700: LD_VAR 0 3
21704: PUSH
21705: LD_VAR 0 2
21709: ARRAY
21710: PUSH
21711: LD_INT 3
21713: ARRAY
21714: STR
21715: PUSH
21716: LD_STRING ,
21718: STR
21719: PUSH
21720: LD_VAR 0 3
21724: PUSH
21725: LD_VAR 0 2
21729: ARRAY
21730: PUSH
21731: LD_INT 4
21733: ARRAY
21734: STR
21735: PUSH
21736: LD_STRING )
21738: STR
21739: PPUSH
21740: CALL_OW 559
21744: GO 21654
21746: POP
21747: POP
// end ; end ;
21748: LD_VAR 0 1
21752: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
21753: LD_INT 0
21755: PPUSH
// if HexInfo ( x , y ) = warehouse then
21756: LD_VAR 0 2
21760: PPUSH
21761: LD_VAR 0 3
21765: PPUSH
21766: CALL_OW 428
21770: PUSH
21771: LD_VAR 0 1
21775: EQUAL
21776: IFFALSE 21803
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
21778: LD_ADDR_EXP 88
21782: PUSH
21783: LD_EXP 88
21787: PPUSH
21788: LD_VAR 0 1
21792: PPUSH
21793: LD_INT 0
21795: PPUSH
21796: CALL_OW 1
21800: ST_TO_ADDR
21801: GO 21854
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
21803: LD_ADDR_EXP 88
21807: PUSH
21808: LD_EXP 88
21812: PPUSH
21813: LD_VAR 0 1
21817: PPUSH
21818: LD_VAR 0 1
21822: PPUSH
21823: CALL_OW 255
21827: PUSH
21828: LD_VAR 0 1
21832: PUSH
21833: LD_VAR 0 2
21837: PUSH
21838: LD_VAR 0 3
21842: PUSH
21843: EMPTY
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: PPUSH
21849: CALL_OW 1
21853: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
21854: CALL 21863 0 0
// end ;
21858: LD_VAR 0 4
21862: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
21863: LD_INT 0
21865: PPUSH
21866: PPUSH
21867: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
21868: LD_STRING resetWarehouseGatheringPoints();
21870: PPUSH
21871: CALL_OW 559
// if warehouseGatheringPoints then
21875: LD_EXP 88
21879: IFFALSE 22005
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
21881: LD_ADDR_VAR 0 3
21885: PUSH
21886: LD_EXP 88
21890: PPUSH
21891: CALL 68890 0 1
21895: ST_TO_ADDR
// for i := 1 to list do
21896: LD_ADDR_VAR 0 2
21900: PUSH
21901: DOUBLE
21902: LD_INT 1
21904: DEC
21905: ST_TO_ADDR
21906: LD_VAR 0 3
21910: PUSH
21911: FOR_TO
21912: IFFALSE 22003
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
21914: LD_STRING setWarehouseGatheringPointXY(
21916: PUSH
21917: LD_VAR 0 3
21921: PUSH
21922: LD_VAR 0 2
21926: ARRAY
21927: PUSH
21928: LD_INT 1
21930: ARRAY
21931: STR
21932: PUSH
21933: LD_STRING ,
21935: STR
21936: PUSH
21937: LD_VAR 0 3
21941: PUSH
21942: LD_VAR 0 2
21946: ARRAY
21947: PUSH
21948: LD_INT 2
21950: ARRAY
21951: STR
21952: PUSH
21953: LD_STRING ,
21955: STR
21956: PUSH
21957: LD_VAR 0 3
21961: PUSH
21962: LD_VAR 0 2
21966: ARRAY
21967: PUSH
21968: LD_INT 3
21970: ARRAY
21971: STR
21972: PUSH
21973: LD_STRING ,
21975: STR
21976: PUSH
21977: LD_VAR 0 3
21981: PUSH
21982: LD_VAR 0 2
21986: ARRAY
21987: PUSH
21988: LD_INT 4
21990: ARRAY
21991: STR
21992: PUSH
21993: LD_STRING )
21995: STR
21996: PPUSH
21997: CALL_OW 559
22001: GO 21911
22003: POP
22004: POP
// end ; end ;
22005: LD_VAR 0 1
22009: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
22010: LD_EXP 88
22014: IFFALSE 22699
22016: GO 22018
22018: DISABLE
22019: LD_INT 0
22021: PPUSH
22022: PPUSH
22023: PPUSH
22024: PPUSH
22025: PPUSH
22026: PPUSH
22027: PPUSH
22028: PPUSH
22029: PPUSH
// begin enable ;
22030: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
22031: LD_ADDR_VAR 0 3
22035: PUSH
22036: LD_EXP 88
22040: PPUSH
22041: CALL 68890 0 1
22045: ST_TO_ADDR
// if not list then
22046: LD_VAR 0 3
22050: NOT
22051: IFFALSE 22055
// exit ;
22053: GO 22699
// for i := 1 to list do
22055: LD_ADDR_VAR 0 1
22059: PUSH
22060: DOUBLE
22061: LD_INT 1
22063: DEC
22064: ST_TO_ADDR
22065: LD_VAR 0 3
22069: PUSH
22070: FOR_TO
22071: IFFALSE 22697
// begin depot := list [ i ] [ 2 ] ;
22073: LD_ADDR_VAR 0 8
22077: PUSH
22078: LD_VAR 0 3
22082: PUSH
22083: LD_VAR 0 1
22087: ARRAY
22088: PUSH
22089: LD_INT 2
22091: ARRAY
22092: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
22093: LD_ADDR_VAR 0 5
22097: PUSH
22098: LD_VAR 0 3
22102: PUSH
22103: LD_VAR 0 1
22107: ARRAY
22108: PUSH
22109: LD_INT 1
22111: ARRAY
22112: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
22113: LD_VAR 0 8
22117: PPUSH
22118: CALL_OW 301
22122: PUSH
22123: LD_VAR 0 5
22127: PUSH
22128: LD_VAR 0 8
22132: PPUSH
22133: CALL_OW 255
22137: NONEQUAL
22138: OR
22139: IFFALSE 22168
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
22141: LD_ADDR_EXP 88
22145: PUSH
22146: LD_EXP 88
22150: PPUSH
22151: LD_VAR 0 8
22155: PPUSH
22156: LD_INT 0
22158: PPUSH
22159: CALL_OW 1
22163: ST_TO_ADDR
// exit ;
22164: POP
22165: POP
22166: GO 22699
// end ; x := list [ i ] [ 3 ] ;
22168: LD_ADDR_VAR 0 6
22172: PUSH
22173: LD_VAR 0 3
22177: PUSH
22178: LD_VAR 0 1
22182: ARRAY
22183: PUSH
22184: LD_INT 3
22186: ARRAY
22187: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
22188: LD_ADDR_VAR 0 7
22192: PUSH
22193: LD_VAR 0 3
22197: PUSH
22198: LD_VAR 0 1
22202: ARRAY
22203: PUSH
22204: LD_INT 4
22206: ARRAY
22207: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
22208: LD_ADDR_VAR 0 9
22212: PUSH
22213: LD_VAR 0 6
22217: PPUSH
22218: LD_VAR 0 7
22222: PPUSH
22223: LD_INT 16
22225: PPUSH
22226: CALL 67478 0 3
22230: ST_TO_ADDR
// if not cratesNearbyPoint then
22231: LD_VAR 0 9
22235: NOT
22236: IFFALSE 22242
// exit ;
22238: POP
22239: POP
22240: GO 22699
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
22242: LD_ADDR_VAR 0 4
22246: PUSH
22247: LD_INT 22
22249: PUSH
22250: LD_VAR 0 5
22254: PUSH
22255: EMPTY
22256: LIST
22257: LIST
22258: PUSH
22259: LD_INT 3
22261: PUSH
22262: LD_INT 60
22264: PUSH
22265: EMPTY
22266: LIST
22267: PUSH
22268: EMPTY
22269: LIST
22270: LIST
22271: PUSH
22272: LD_INT 91
22274: PUSH
22275: LD_VAR 0 8
22279: PUSH
22280: LD_INT 6
22282: PUSH
22283: EMPTY
22284: LIST
22285: LIST
22286: LIST
22287: PUSH
22288: LD_INT 2
22290: PUSH
22291: LD_INT 25
22293: PUSH
22294: LD_INT 2
22296: PUSH
22297: EMPTY
22298: LIST
22299: LIST
22300: PUSH
22301: LD_INT 25
22303: PUSH
22304: LD_INT 16
22306: PUSH
22307: EMPTY
22308: LIST
22309: LIST
22310: PUSH
22311: EMPTY
22312: LIST
22313: LIST
22314: LIST
22315: PUSH
22316: EMPTY
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: PPUSH
22322: CALL_OW 69
22326: PUSH
22327: LD_VAR 0 8
22331: PPUSH
22332: CALL_OW 313
22336: PPUSH
22337: LD_INT 3
22339: PUSH
22340: LD_INT 60
22342: PUSH
22343: EMPTY
22344: LIST
22345: PUSH
22346: EMPTY
22347: LIST
22348: LIST
22349: PUSH
22350: LD_INT 2
22352: PUSH
22353: LD_INT 25
22355: PUSH
22356: LD_INT 2
22358: PUSH
22359: EMPTY
22360: LIST
22361: LIST
22362: PUSH
22363: LD_INT 25
22365: PUSH
22366: LD_INT 16
22368: PUSH
22369: EMPTY
22370: LIST
22371: LIST
22372: PUSH
22373: EMPTY
22374: LIST
22375: LIST
22376: LIST
22377: PUSH
22378: EMPTY
22379: LIST
22380: LIST
22381: PPUSH
22382: CALL_OW 72
22386: UNION
22387: ST_TO_ADDR
// if tmp then
22388: LD_VAR 0 4
22392: IFFALSE 22472
// begin tmp := ShrinkArray ( tmp , 3 ) ;
22394: LD_ADDR_VAR 0 4
22398: PUSH
22399: LD_VAR 0 4
22403: PPUSH
22404: LD_INT 3
22406: PPUSH
22407: CALL 65447 0 2
22411: ST_TO_ADDR
// for j in tmp do
22412: LD_ADDR_VAR 0 2
22416: PUSH
22417: LD_VAR 0 4
22421: PUSH
22422: FOR_IN
22423: IFFALSE 22466
// begin if IsInUnit ( j ) then
22425: LD_VAR 0 2
22429: PPUSH
22430: CALL_OW 310
22434: IFFALSE 22445
// ComExit ( j ) ;
22436: LD_VAR 0 2
22440: PPUSH
22441: CALL 65530 0 1
// AddComCollect ( j , x , y ) ;
22445: LD_VAR 0 2
22449: PPUSH
22450: LD_VAR 0 6
22454: PPUSH
22455: LD_VAR 0 7
22459: PPUSH
22460: CALL_OW 177
// end ;
22464: GO 22422
22466: POP
22467: POP
// exit ;
22468: POP
22469: POP
22470: GO 22699
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
22472: LD_ADDR_VAR 0 4
22476: PUSH
22477: LD_INT 22
22479: PUSH
22480: LD_VAR 0 5
22484: PUSH
22485: EMPTY
22486: LIST
22487: LIST
22488: PUSH
22489: LD_INT 91
22491: PUSH
22492: LD_VAR 0 8
22496: PUSH
22497: LD_INT 8
22499: PUSH
22500: EMPTY
22501: LIST
22502: LIST
22503: LIST
22504: PUSH
22505: LD_INT 2
22507: PUSH
22508: LD_INT 34
22510: PUSH
22511: LD_INT 12
22513: PUSH
22514: EMPTY
22515: LIST
22516: LIST
22517: PUSH
22518: LD_INT 34
22520: PUSH
22521: LD_INT 51
22523: PUSH
22524: EMPTY
22525: LIST
22526: LIST
22527: PUSH
22528: LD_INT 34
22530: PUSH
22531: LD_INT 32
22533: PUSH
22534: EMPTY
22535: LIST
22536: LIST
22537: PUSH
22538: LD_INT 34
22540: PUSH
22541: LD_INT 89
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: PUSH
22548: EMPTY
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: PUSH
22555: EMPTY
22556: LIST
22557: LIST
22558: LIST
22559: PPUSH
22560: CALL_OW 69
22564: ST_TO_ADDR
// if tmp then
22565: LD_VAR 0 4
22569: IFFALSE 22695
// begin for j in tmp do
22571: LD_ADDR_VAR 0 2
22575: PUSH
22576: LD_VAR 0 4
22580: PUSH
22581: FOR_IN
22582: IFFALSE 22693
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
22584: LD_VAR 0 2
22588: PPUSH
22589: CALL_OW 262
22593: PUSH
22594: LD_INT 3
22596: EQUAL
22597: PUSH
22598: LD_VAR 0 2
22602: PPUSH
22603: CALL_OW 261
22607: PUSH
22608: LD_INT 20
22610: GREATER
22611: OR
22612: PUSH
22613: LD_VAR 0 2
22617: PPUSH
22618: CALL_OW 314
22622: NOT
22623: AND
22624: PUSH
22625: LD_VAR 0 2
22629: PPUSH
22630: CALL_OW 263
22634: PUSH
22635: LD_INT 1
22637: NONEQUAL
22638: PUSH
22639: LD_VAR 0 2
22643: PPUSH
22644: CALL_OW 311
22648: OR
22649: AND
22650: IFFALSE 22691
// begin ComCollect ( j , x , y ) ;
22652: LD_VAR 0 2
22656: PPUSH
22657: LD_VAR 0 6
22661: PPUSH
22662: LD_VAR 0 7
22666: PPUSH
22667: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
22671: LD_VAR 0 2
22675: PPUSH
22676: LD_VAR 0 8
22680: PPUSH
22681: CALL_OW 172
// exit ;
22685: POP
22686: POP
22687: POP
22688: POP
22689: GO 22699
// end ;
22691: GO 22581
22693: POP
22694: POP
// end ; end ;
22695: GO 22070
22697: POP
22698: POP
// end ; end_of_file
22699: PPOPN 9
22701: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
22702: LD_INT 0
22704: PPUSH
22705: PPUSH
22706: PPUSH
22707: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
22708: LD_VAR 0 1
22712: PPUSH
22713: CALL_OW 264
22717: PUSH
22718: LD_INT 91
22720: EQUAL
22721: IFFALSE 22793
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
22723: LD_INT 68
22725: PPUSH
22726: LD_VAR 0 1
22730: PPUSH
22731: CALL_OW 255
22735: PPUSH
22736: CALL_OW 321
22740: PUSH
22741: LD_INT 2
22743: EQUAL
22744: IFFALSE 22756
// eff := 70 else
22746: LD_ADDR_VAR 0 4
22750: PUSH
22751: LD_INT 70
22753: ST_TO_ADDR
22754: GO 22764
// eff := 30 ;
22756: LD_ADDR_VAR 0 4
22760: PUSH
22761: LD_INT 30
22763: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
22764: LD_VAR 0 1
22768: PPUSH
22769: CALL_OW 250
22773: PPUSH
22774: LD_VAR 0 1
22778: PPUSH
22779: CALL_OW 251
22783: PPUSH
22784: LD_VAR 0 4
22788: PPUSH
22789: CALL_OW 495
// end ; end ;
22793: LD_VAR 0 2
22797: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
22798: LD_INT 0
22800: PPUSH
// end ;
22801: LD_VAR 0 4
22805: RET
// export function SOS_Command ( cmd ) ; begin
22806: LD_INT 0
22808: PPUSH
// end ;
22809: LD_VAR 0 2
22813: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
22814: LD_INT 0
22816: PPUSH
// end ;
22817: LD_VAR 0 6
22821: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
22822: LD_INT 0
22824: PPUSH
22825: PPUSH
// if not vehicle or not factory then
22826: LD_VAR 0 1
22830: NOT
22831: PUSH
22832: LD_VAR 0 2
22836: NOT
22837: OR
22838: IFFALSE 22842
// exit ;
22840: GO 23073
// if factoryWaypoints >= factory then
22842: LD_EXP 87
22846: PUSH
22847: LD_VAR 0 2
22851: GREATEREQUAL
22852: IFFALSE 23073
// if factoryWaypoints [ factory ] then
22854: LD_EXP 87
22858: PUSH
22859: LD_VAR 0 2
22863: ARRAY
22864: IFFALSE 23073
// begin if GetControl ( vehicle ) = control_manual then
22866: LD_VAR 0 1
22870: PPUSH
22871: CALL_OW 263
22875: PUSH
22876: LD_INT 1
22878: EQUAL
22879: IFFALSE 22960
// begin driver := IsDrivenBy ( vehicle ) ;
22881: LD_ADDR_VAR 0 4
22885: PUSH
22886: LD_VAR 0 1
22890: PPUSH
22891: CALL_OW 311
22895: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
22896: LD_VAR 0 4
22900: PPUSH
22901: LD_EXP 87
22905: PUSH
22906: LD_VAR 0 2
22910: ARRAY
22911: PUSH
22912: LD_INT 3
22914: ARRAY
22915: PPUSH
22916: LD_EXP 87
22920: PUSH
22921: LD_VAR 0 2
22925: ARRAY
22926: PUSH
22927: LD_INT 4
22929: ARRAY
22930: PPUSH
22931: CALL_OW 171
// AddComExitVehicle ( driver ) ;
22935: LD_VAR 0 4
22939: PPUSH
22940: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
22944: LD_VAR 0 4
22948: PPUSH
22949: LD_VAR 0 2
22953: PPUSH
22954: CALL_OW 180
// end else
22958: GO 23073
// if GetControl ( vehicle ) = control_remote then
22960: LD_VAR 0 1
22964: PPUSH
22965: CALL_OW 263
22969: PUSH
22970: LD_INT 2
22972: EQUAL
22973: IFFALSE 23034
// begin wait ( 0 0$2 ) ;
22975: LD_INT 70
22977: PPUSH
22978: CALL_OW 67
// if Connect ( vehicle ) then
22982: LD_VAR 0 1
22986: PPUSH
22987: CALL 35738 0 1
22991: IFFALSE 23032
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
22993: LD_VAR 0 1
22997: PPUSH
22998: LD_EXP 87
23002: PUSH
23003: LD_VAR 0 2
23007: ARRAY
23008: PUSH
23009: LD_INT 3
23011: ARRAY
23012: PPUSH
23013: LD_EXP 87
23017: PUSH
23018: LD_VAR 0 2
23022: ARRAY
23023: PUSH
23024: LD_INT 4
23026: ARRAY
23027: PPUSH
23028: CALL_OW 171
// end else
23032: GO 23073
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23034: LD_VAR 0 1
23038: PPUSH
23039: LD_EXP 87
23043: PUSH
23044: LD_VAR 0 2
23048: ARRAY
23049: PUSH
23050: LD_INT 3
23052: ARRAY
23053: PPUSH
23054: LD_EXP 87
23058: PUSH
23059: LD_VAR 0 2
23063: ARRAY
23064: PUSH
23065: LD_INT 4
23067: ARRAY
23068: PPUSH
23069: CALL_OW 171
// end ; end ;
23073: LD_VAR 0 3
23077: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
23078: LD_INT 0
23080: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
23081: LD_VAR 0 1
23085: PUSH
23086: LD_INT 250
23088: EQUAL
23089: PUSH
23090: LD_VAR 0 2
23094: PPUSH
23095: CALL_OW 264
23099: PUSH
23100: LD_INT 81
23102: EQUAL
23103: AND
23104: IFFALSE 23125
// MinerPlaceMine ( unit , x , y ) ;
23106: LD_VAR 0 2
23110: PPUSH
23111: LD_VAR 0 4
23115: PPUSH
23116: LD_VAR 0 5
23120: PPUSH
23121: CALL 25949 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
23125: LD_VAR 0 1
23129: PUSH
23130: LD_INT 251
23132: EQUAL
23133: PUSH
23134: LD_VAR 0 2
23138: PPUSH
23139: CALL_OW 264
23143: PUSH
23144: LD_INT 81
23146: EQUAL
23147: AND
23148: IFFALSE 23169
// MinerDetonateMine ( unit , x , y ) ;
23150: LD_VAR 0 2
23154: PPUSH
23155: LD_VAR 0 4
23159: PPUSH
23160: LD_VAR 0 5
23164: PPUSH
23165: CALL 26224 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
23169: LD_VAR 0 1
23173: PUSH
23174: LD_INT 252
23176: EQUAL
23177: PUSH
23178: LD_VAR 0 2
23182: PPUSH
23183: CALL_OW 264
23187: PUSH
23188: LD_INT 81
23190: EQUAL
23191: AND
23192: IFFALSE 23213
// MinerCreateMinefield ( unit , x , y ) ;
23194: LD_VAR 0 2
23198: PPUSH
23199: LD_VAR 0 4
23203: PPUSH
23204: LD_VAR 0 5
23208: PPUSH
23209: CALL 26641 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
23213: LD_VAR 0 1
23217: PUSH
23218: LD_INT 253
23220: EQUAL
23221: PUSH
23222: LD_VAR 0 2
23226: PPUSH
23227: CALL_OW 257
23231: PUSH
23232: LD_INT 5
23234: EQUAL
23235: AND
23236: IFFALSE 23257
// ComBinocular ( unit , x , y ) ;
23238: LD_VAR 0 2
23242: PPUSH
23243: LD_VAR 0 4
23247: PPUSH
23248: LD_VAR 0 5
23252: PPUSH
23253: CALL 27010 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
23257: LD_VAR 0 1
23261: PUSH
23262: LD_INT 254
23264: EQUAL
23265: PUSH
23266: LD_VAR 0 2
23270: PPUSH
23271: CALL_OW 264
23275: PUSH
23276: LD_INT 99
23278: EQUAL
23279: AND
23280: PUSH
23281: LD_VAR 0 3
23285: PPUSH
23286: CALL_OW 263
23290: PUSH
23291: LD_INT 3
23293: EQUAL
23294: AND
23295: IFFALSE 23311
// HackDestroyVehicle ( unit , selectedUnit ) ;
23297: LD_VAR 0 2
23301: PPUSH
23302: LD_VAR 0 3
23306: PPUSH
23307: CALL 25313 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
23311: LD_VAR 0 1
23315: PUSH
23316: LD_INT 255
23318: EQUAL
23319: PUSH
23320: LD_VAR 0 2
23324: PPUSH
23325: CALL_OW 264
23329: PUSH
23330: LD_INT 14
23332: PUSH
23333: LD_INT 53
23335: PUSH
23336: EMPTY
23337: LIST
23338: LIST
23339: IN
23340: AND
23341: PUSH
23342: LD_VAR 0 4
23346: PPUSH
23347: LD_VAR 0 5
23351: PPUSH
23352: CALL_OW 488
23356: AND
23357: IFFALSE 23381
// CutTreeXYR ( unit , x , y , 12 ) ;
23359: LD_VAR 0 2
23363: PPUSH
23364: LD_VAR 0 4
23368: PPUSH
23369: LD_VAR 0 5
23373: PPUSH
23374: LD_INT 12
23376: PPUSH
23377: CALL 23476 0 4
// if cmd = 256 then
23381: LD_VAR 0 1
23385: PUSH
23386: LD_INT 256
23388: EQUAL
23389: IFFALSE 23410
// SetFactoryWaypoint ( unit , x , y ) ;
23391: LD_VAR 0 2
23395: PPUSH
23396: LD_VAR 0 4
23400: PPUSH
23401: LD_VAR 0 5
23405: PPUSH
23406: CALL 21391 0 3
// if cmd = 257 then
23410: LD_VAR 0 1
23414: PUSH
23415: LD_INT 257
23417: EQUAL
23418: IFFALSE 23439
// SetWarehouseGatheringPoint ( unit , x , y ) ;
23420: LD_VAR 0 2
23424: PPUSH
23425: LD_VAR 0 4
23429: PPUSH
23430: LD_VAR 0 5
23434: PPUSH
23435: CALL 21753 0 3
// if cmd = 258 then
23439: LD_VAR 0 1
23443: PUSH
23444: LD_INT 258
23446: EQUAL
23447: IFFALSE 23471
// BurnTreeXYR ( unit , x , y , 8 ) ;
23449: LD_VAR 0 2
23453: PPUSH
23454: LD_VAR 0 4
23458: PPUSH
23459: LD_VAR 0 5
23463: PPUSH
23464: LD_INT 8
23466: PPUSH
23467: CALL 23870 0 4
// end ;
23471: LD_VAR 0 6
23475: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23476: LD_INT 0
23478: PPUSH
23479: PPUSH
23480: PPUSH
23481: PPUSH
23482: PPUSH
23483: PPUSH
23484: PPUSH
23485: PPUSH
23486: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
23487: LD_VAR 0 1
23491: PPUSH
23492: CALL_OW 302
23496: NOT
23497: PUSH
23498: LD_VAR 0 2
23502: PPUSH
23503: LD_VAR 0 3
23507: PPUSH
23508: CALL_OW 488
23512: NOT
23513: OR
23514: PUSH
23515: LD_VAR 0 4
23519: NOT
23520: OR
23521: IFFALSE 23525
// exit ;
23523: GO 23865
// list := [ ] ;
23525: LD_ADDR_VAR 0 13
23529: PUSH
23530: EMPTY
23531: ST_TO_ADDR
// if x - r < 0 then
23532: LD_VAR 0 2
23536: PUSH
23537: LD_VAR 0 4
23541: MINUS
23542: PUSH
23543: LD_INT 0
23545: LESS
23546: IFFALSE 23558
// min_x := 0 else
23548: LD_ADDR_VAR 0 7
23552: PUSH
23553: LD_INT 0
23555: ST_TO_ADDR
23556: GO 23574
// min_x := x - r ;
23558: LD_ADDR_VAR 0 7
23562: PUSH
23563: LD_VAR 0 2
23567: PUSH
23568: LD_VAR 0 4
23572: MINUS
23573: ST_TO_ADDR
// if y - r < 0 then
23574: LD_VAR 0 3
23578: PUSH
23579: LD_VAR 0 4
23583: MINUS
23584: PUSH
23585: LD_INT 0
23587: LESS
23588: IFFALSE 23600
// min_y := 0 else
23590: LD_ADDR_VAR 0 8
23594: PUSH
23595: LD_INT 0
23597: ST_TO_ADDR
23598: GO 23616
// min_y := y - r ;
23600: LD_ADDR_VAR 0 8
23604: PUSH
23605: LD_VAR 0 3
23609: PUSH
23610: LD_VAR 0 4
23614: MINUS
23615: ST_TO_ADDR
// max_x := x + r ;
23616: LD_ADDR_VAR 0 9
23620: PUSH
23621: LD_VAR 0 2
23625: PUSH
23626: LD_VAR 0 4
23630: PLUS
23631: ST_TO_ADDR
// max_y := y + r ;
23632: LD_ADDR_VAR 0 10
23636: PUSH
23637: LD_VAR 0 3
23641: PUSH
23642: LD_VAR 0 4
23646: PLUS
23647: ST_TO_ADDR
// for _x = min_x to max_x do
23648: LD_ADDR_VAR 0 11
23652: PUSH
23653: DOUBLE
23654: LD_VAR 0 7
23658: DEC
23659: ST_TO_ADDR
23660: LD_VAR 0 9
23664: PUSH
23665: FOR_TO
23666: IFFALSE 23783
// for _y = min_y to max_y do
23668: LD_ADDR_VAR 0 12
23672: PUSH
23673: DOUBLE
23674: LD_VAR 0 8
23678: DEC
23679: ST_TO_ADDR
23680: LD_VAR 0 10
23684: PUSH
23685: FOR_TO
23686: IFFALSE 23779
// begin if not ValidHex ( _x , _y ) then
23688: LD_VAR 0 11
23692: PPUSH
23693: LD_VAR 0 12
23697: PPUSH
23698: CALL_OW 488
23702: NOT
23703: IFFALSE 23707
// continue ;
23705: GO 23685
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23707: LD_VAR 0 11
23711: PPUSH
23712: LD_VAR 0 12
23716: PPUSH
23717: CALL_OW 351
23721: PUSH
23722: LD_VAR 0 11
23726: PPUSH
23727: LD_VAR 0 12
23731: PPUSH
23732: CALL_OW 554
23736: AND
23737: IFFALSE 23777
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23739: LD_ADDR_VAR 0 13
23743: PUSH
23744: LD_VAR 0 13
23748: PPUSH
23749: LD_VAR 0 13
23753: PUSH
23754: LD_INT 1
23756: PLUS
23757: PPUSH
23758: LD_VAR 0 11
23762: PUSH
23763: LD_VAR 0 12
23767: PUSH
23768: EMPTY
23769: LIST
23770: LIST
23771: PPUSH
23772: CALL_OW 2
23776: ST_TO_ADDR
// end ;
23777: GO 23685
23779: POP
23780: POP
23781: GO 23665
23783: POP
23784: POP
// if not list then
23785: LD_VAR 0 13
23789: NOT
23790: IFFALSE 23794
// exit ;
23792: GO 23865
// for i in list do
23794: LD_ADDR_VAR 0 6
23798: PUSH
23799: LD_VAR 0 13
23803: PUSH
23804: FOR_IN
23805: IFFALSE 23863
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23807: LD_VAR 0 1
23811: PPUSH
23812: LD_STRING M
23814: PUSH
23815: LD_VAR 0 6
23819: PUSH
23820: LD_INT 1
23822: ARRAY
23823: PUSH
23824: LD_VAR 0 6
23828: PUSH
23829: LD_INT 2
23831: ARRAY
23832: PUSH
23833: LD_INT 0
23835: PUSH
23836: LD_INT 0
23838: PUSH
23839: LD_INT 0
23841: PUSH
23842: LD_INT 0
23844: PUSH
23845: EMPTY
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: PUSH
23854: EMPTY
23855: LIST
23856: PPUSH
23857: CALL_OW 447
23861: GO 23804
23863: POP
23864: POP
// end ;
23865: LD_VAR 0 5
23869: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23870: LD_INT 0
23872: PPUSH
23873: PPUSH
23874: PPUSH
23875: PPUSH
23876: PPUSH
23877: PPUSH
23878: PPUSH
23879: PPUSH
23880: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
23881: LD_VAR 0 1
23885: PPUSH
23886: CALL_OW 302
23890: NOT
23891: PUSH
23892: LD_VAR 0 2
23896: PPUSH
23897: LD_VAR 0 3
23901: PPUSH
23902: CALL_OW 488
23906: NOT
23907: OR
23908: PUSH
23909: LD_VAR 0 4
23913: NOT
23914: OR
23915: IFFALSE 23919
// exit ;
23917: GO 24267
// list := [ ] ;
23919: LD_ADDR_VAR 0 13
23923: PUSH
23924: EMPTY
23925: ST_TO_ADDR
// if x - r < 0 then
23926: LD_VAR 0 2
23930: PUSH
23931: LD_VAR 0 4
23935: MINUS
23936: PUSH
23937: LD_INT 0
23939: LESS
23940: IFFALSE 23952
// min_x := 0 else
23942: LD_ADDR_VAR 0 7
23946: PUSH
23947: LD_INT 0
23949: ST_TO_ADDR
23950: GO 23968
// min_x := x - r ;
23952: LD_ADDR_VAR 0 7
23956: PUSH
23957: LD_VAR 0 2
23961: PUSH
23962: LD_VAR 0 4
23966: MINUS
23967: ST_TO_ADDR
// if y - r < 0 then
23968: LD_VAR 0 3
23972: PUSH
23973: LD_VAR 0 4
23977: MINUS
23978: PUSH
23979: LD_INT 0
23981: LESS
23982: IFFALSE 23994
// min_y := 0 else
23984: LD_ADDR_VAR 0 8
23988: PUSH
23989: LD_INT 0
23991: ST_TO_ADDR
23992: GO 24010
// min_y := y - r ;
23994: LD_ADDR_VAR 0 8
23998: PUSH
23999: LD_VAR 0 3
24003: PUSH
24004: LD_VAR 0 4
24008: MINUS
24009: ST_TO_ADDR
// max_x := x + r ;
24010: LD_ADDR_VAR 0 9
24014: PUSH
24015: LD_VAR 0 2
24019: PUSH
24020: LD_VAR 0 4
24024: PLUS
24025: ST_TO_ADDR
// max_y := y + r ;
24026: LD_ADDR_VAR 0 10
24030: PUSH
24031: LD_VAR 0 3
24035: PUSH
24036: LD_VAR 0 4
24040: PLUS
24041: ST_TO_ADDR
// for _x = min_x to max_x do
24042: LD_ADDR_VAR 0 11
24046: PUSH
24047: DOUBLE
24048: LD_VAR 0 7
24052: DEC
24053: ST_TO_ADDR
24054: LD_VAR 0 9
24058: PUSH
24059: FOR_TO
24060: IFFALSE 24177
// for _y = min_y to max_y do
24062: LD_ADDR_VAR 0 12
24066: PUSH
24067: DOUBLE
24068: LD_VAR 0 8
24072: DEC
24073: ST_TO_ADDR
24074: LD_VAR 0 10
24078: PUSH
24079: FOR_TO
24080: IFFALSE 24173
// begin if not ValidHex ( _x , _y ) then
24082: LD_VAR 0 11
24086: PPUSH
24087: LD_VAR 0 12
24091: PPUSH
24092: CALL_OW 488
24096: NOT
24097: IFFALSE 24101
// continue ;
24099: GO 24079
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24101: LD_VAR 0 11
24105: PPUSH
24106: LD_VAR 0 12
24110: PPUSH
24111: CALL_OW 351
24115: PUSH
24116: LD_VAR 0 11
24120: PPUSH
24121: LD_VAR 0 12
24125: PPUSH
24126: CALL_OW 554
24130: AND
24131: IFFALSE 24171
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
24133: LD_ADDR_VAR 0 13
24137: PUSH
24138: LD_VAR 0 13
24142: PPUSH
24143: LD_VAR 0 13
24147: PUSH
24148: LD_INT 1
24150: PLUS
24151: PPUSH
24152: LD_VAR 0 11
24156: PUSH
24157: LD_VAR 0 12
24161: PUSH
24162: EMPTY
24163: LIST
24164: LIST
24165: PPUSH
24166: CALL_OW 2
24170: ST_TO_ADDR
// end ;
24171: GO 24079
24173: POP
24174: POP
24175: GO 24059
24177: POP
24178: POP
// if not list then
24179: LD_VAR 0 13
24183: NOT
24184: IFFALSE 24188
// exit ;
24186: GO 24267
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
24188: LD_ADDR_VAR 0 13
24192: PUSH
24193: LD_VAR 0 1
24197: PPUSH
24198: LD_VAR 0 13
24202: PPUSH
24203: LD_INT 1
24205: PPUSH
24206: LD_INT 1
24208: PPUSH
24209: CALL 32880 0 4
24213: ST_TO_ADDR
// ComStop ( flame ) ;
24214: LD_VAR 0 1
24218: PPUSH
24219: CALL_OW 141
// for i in list do
24223: LD_ADDR_VAR 0 6
24227: PUSH
24228: LD_VAR 0 13
24232: PUSH
24233: FOR_IN
24234: IFFALSE 24265
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
24236: LD_VAR 0 1
24240: PPUSH
24241: LD_VAR 0 6
24245: PUSH
24246: LD_INT 1
24248: ARRAY
24249: PPUSH
24250: LD_VAR 0 6
24254: PUSH
24255: LD_INT 2
24257: ARRAY
24258: PPUSH
24259: CALL_OW 176
24263: GO 24233
24265: POP
24266: POP
// end ;
24267: LD_VAR 0 5
24271: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
24272: LD_EXP 90
24276: NOT
24277: IFFALSE 24327
24279: GO 24281
24281: DISABLE
// begin initHack := true ;
24282: LD_ADDR_EXP 90
24286: PUSH
24287: LD_INT 1
24289: ST_TO_ADDR
// hackTanks := [ ] ;
24290: LD_ADDR_EXP 91
24294: PUSH
24295: EMPTY
24296: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
24297: LD_ADDR_EXP 92
24301: PUSH
24302: EMPTY
24303: ST_TO_ADDR
// hackLimit := 3 ;
24304: LD_ADDR_EXP 93
24308: PUSH
24309: LD_INT 3
24311: ST_TO_ADDR
// hackDist := 12 ;
24312: LD_ADDR_EXP 94
24316: PUSH
24317: LD_INT 12
24319: ST_TO_ADDR
// hackCounter := [ ] ;
24320: LD_ADDR_EXP 95
24324: PUSH
24325: EMPTY
24326: ST_TO_ADDR
// end ;
24327: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
24328: LD_EXP 90
24332: PUSH
24333: LD_INT 34
24335: PUSH
24336: LD_INT 99
24338: PUSH
24339: EMPTY
24340: LIST
24341: LIST
24342: PPUSH
24343: CALL_OW 69
24347: AND
24348: IFFALSE 24601
24350: GO 24352
24352: DISABLE
24353: LD_INT 0
24355: PPUSH
24356: PPUSH
// begin enable ;
24357: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
24358: LD_ADDR_VAR 0 1
24362: PUSH
24363: LD_INT 34
24365: PUSH
24366: LD_INT 99
24368: PUSH
24369: EMPTY
24370: LIST
24371: LIST
24372: PPUSH
24373: CALL_OW 69
24377: PUSH
24378: FOR_IN
24379: IFFALSE 24599
// begin if not i in hackTanks then
24381: LD_VAR 0 1
24385: PUSH
24386: LD_EXP 91
24390: IN
24391: NOT
24392: IFFALSE 24475
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
24394: LD_ADDR_EXP 91
24398: PUSH
24399: LD_EXP 91
24403: PPUSH
24404: LD_EXP 91
24408: PUSH
24409: LD_INT 1
24411: PLUS
24412: PPUSH
24413: LD_VAR 0 1
24417: PPUSH
24418: CALL_OW 1
24422: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
24423: LD_ADDR_EXP 92
24427: PUSH
24428: LD_EXP 92
24432: PPUSH
24433: LD_EXP 92
24437: PUSH
24438: LD_INT 1
24440: PLUS
24441: PPUSH
24442: EMPTY
24443: PPUSH
24444: CALL_OW 1
24448: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
24449: LD_ADDR_EXP 95
24453: PUSH
24454: LD_EXP 95
24458: PPUSH
24459: LD_EXP 95
24463: PUSH
24464: LD_INT 1
24466: PLUS
24467: PPUSH
24468: EMPTY
24469: PPUSH
24470: CALL_OW 1
24474: ST_TO_ADDR
// end ; if not IsOk ( i ) then
24475: LD_VAR 0 1
24479: PPUSH
24480: CALL_OW 302
24484: NOT
24485: IFFALSE 24498
// begin HackUnlinkAll ( i ) ;
24487: LD_VAR 0 1
24491: PPUSH
24492: CALL 24604 0 1
// continue ;
24496: GO 24378
// end ; HackCheckCapturedStatus ( i ) ;
24498: LD_VAR 0 1
24502: PPUSH
24503: CALL 25047 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
24507: LD_ADDR_VAR 0 2
24511: PUSH
24512: LD_INT 81
24514: PUSH
24515: LD_VAR 0 1
24519: PPUSH
24520: CALL_OW 255
24524: PUSH
24525: EMPTY
24526: LIST
24527: LIST
24528: PUSH
24529: LD_INT 33
24531: PUSH
24532: LD_INT 3
24534: PUSH
24535: EMPTY
24536: LIST
24537: LIST
24538: PUSH
24539: LD_INT 91
24541: PUSH
24542: LD_VAR 0 1
24546: PUSH
24547: LD_EXP 94
24551: PUSH
24552: EMPTY
24553: LIST
24554: LIST
24555: LIST
24556: PUSH
24557: LD_INT 50
24559: PUSH
24560: EMPTY
24561: LIST
24562: PUSH
24563: EMPTY
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: PPUSH
24569: CALL_OW 69
24573: ST_TO_ADDR
// if not tmp then
24574: LD_VAR 0 2
24578: NOT
24579: IFFALSE 24583
// continue ;
24581: GO 24378
// HackLink ( i , tmp ) ;
24583: LD_VAR 0 1
24587: PPUSH
24588: LD_VAR 0 2
24592: PPUSH
24593: CALL 24740 0 2
// end ;
24597: GO 24378
24599: POP
24600: POP
// end ;
24601: PPOPN 2
24603: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24604: LD_INT 0
24606: PPUSH
24607: PPUSH
24608: PPUSH
// if not hack in hackTanks then
24609: LD_VAR 0 1
24613: PUSH
24614: LD_EXP 91
24618: IN
24619: NOT
24620: IFFALSE 24624
// exit ;
24622: GO 24735
// index := GetElementIndex ( hackTanks , hack ) ;
24624: LD_ADDR_VAR 0 4
24628: PUSH
24629: LD_EXP 91
24633: PPUSH
24634: LD_VAR 0 1
24638: PPUSH
24639: CALL 32177 0 2
24643: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24644: LD_EXP 92
24648: PUSH
24649: LD_VAR 0 4
24653: ARRAY
24654: IFFALSE 24735
// begin for i in hackTanksCaptured [ index ] do
24656: LD_ADDR_VAR 0 3
24660: PUSH
24661: LD_EXP 92
24665: PUSH
24666: LD_VAR 0 4
24670: ARRAY
24671: PUSH
24672: FOR_IN
24673: IFFALSE 24699
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24675: LD_VAR 0 3
24679: PUSH
24680: LD_INT 1
24682: ARRAY
24683: PPUSH
24684: LD_VAR 0 3
24688: PUSH
24689: LD_INT 2
24691: ARRAY
24692: PPUSH
24693: CALL_OW 235
24697: GO 24672
24699: POP
24700: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
24701: LD_ADDR_EXP 92
24705: PUSH
24706: LD_EXP 92
24710: PPUSH
24711: LD_VAR 0 4
24715: PPUSH
24716: EMPTY
24717: PPUSH
24718: CALL_OW 1
24722: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
24723: LD_VAR 0 1
24727: PPUSH
24728: LD_INT 0
24730: PPUSH
24731: CALL_OW 505
// end ; end ;
24735: LD_VAR 0 2
24739: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
24740: LD_INT 0
24742: PPUSH
24743: PPUSH
24744: PPUSH
// if not hack in hackTanks or not vehicles then
24745: LD_VAR 0 1
24749: PUSH
24750: LD_EXP 91
24754: IN
24755: NOT
24756: PUSH
24757: LD_VAR 0 2
24761: NOT
24762: OR
24763: IFFALSE 24767
// exit ;
24765: GO 25042
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
24767: LD_ADDR_VAR 0 2
24771: PUSH
24772: LD_VAR 0 1
24776: PPUSH
24777: LD_VAR 0 2
24781: PPUSH
24782: LD_INT 1
24784: PPUSH
24785: LD_INT 1
24787: PPUSH
24788: CALL 32827 0 4
24792: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
24793: LD_ADDR_VAR 0 5
24797: PUSH
24798: LD_EXP 91
24802: PPUSH
24803: LD_VAR 0 1
24807: PPUSH
24808: CALL 32177 0 2
24812: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
24813: LD_EXP 92
24817: PUSH
24818: LD_VAR 0 5
24822: ARRAY
24823: PUSH
24824: LD_EXP 93
24828: LESS
24829: IFFALSE 25018
// begin for i := 1 to vehicles do
24831: LD_ADDR_VAR 0 4
24835: PUSH
24836: DOUBLE
24837: LD_INT 1
24839: DEC
24840: ST_TO_ADDR
24841: LD_VAR 0 2
24845: PUSH
24846: FOR_TO
24847: IFFALSE 25016
// begin if hackTanksCaptured [ index ] = hackLimit then
24849: LD_EXP 92
24853: PUSH
24854: LD_VAR 0 5
24858: ARRAY
24859: PUSH
24860: LD_EXP 93
24864: EQUAL
24865: IFFALSE 24869
// break ;
24867: GO 25016
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
24869: LD_ADDR_EXP 95
24873: PUSH
24874: LD_EXP 95
24878: PPUSH
24879: LD_VAR 0 5
24883: PPUSH
24884: LD_EXP 95
24888: PUSH
24889: LD_VAR 0 5
24893: ARRAY
24894: PUSH
24895: LD_INT 1
24897: PLUS
24898: PPUSH
24899: CALL_OW 1
24903: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
24904: LD_ADDR_EXP 92
24908: PUSH
24909: LD_EXP 92
24913: PPUSH
24914: LD_VAR 0 5
24918: PUSH
24919: LD_EXP 92
24923: PUSH
24924: LD_VAR 0 5
24928: ARRAY
24929: PUSH
24930: LD_INT 1
24932: PLUS
24933: PUSH
24934: EMPTY
24935: LIST
24936: LIST
24937: PPUSH
24938: LD_VAR 0 2
24942: PUSH
24943: LD_VAR 0 4
24947: ARRAY
24948: PUSH
24949: LD_VAR 0 2
24953: PUSH
24954: LD_VAR 0 4
24958: ARRAY
24959: PPUSH
24960: CALL_OW 255
24964: PUSH
24965: EMPTY
24966: LIST
24967: LIST
24968: PPUSH
24969: CALL 32392 0 3
24973: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
24974: LD_VAR 0 2
24978: PUSH
24979: LD_VAR 0 4
24983: ARRAY
24984: PPUSH
24985: LD_VAR 0 1
24989: PPUSH
24990: CALL_OW 255
24994: PPUSH
24995: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
24999: LD_VAR 0 2
25003: PUSH
25004: LD_VAR 0 4
25008: ARRAY
25009: PPUSH
25010: CALL_OW 141
// end ;
25014: GO 24846
25016: POP
25017: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25018: LD_VAR 0 1
25022: PPUSH
25023: LD_EXP 92
25027: PUSH
25028: LD_VAR 0 5
25032: ARRAY
25033: PUSH
25034: LD_INT 0
25036: PLUS
25037: PPUSH
25038: CALL_OW 505
// end ;
25042: LD_VAR 0 3
25046: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
25047: LD_INT 0
25049: PPUSH
25050: PPUSH
25051: PPUSH
25052: PPUSH
// if not hack in hackTanks then
25053: LD_VAR 0 1
25057: PUSH
25058: LD_EXP 91
25062: IN
25063: NOT
25064: IFFALSE 25068
// exit ;
25066: GO 25308
// index := GetElementIndex ( hackTanks , hack ) ;
25068: LD_ADDR_VAR 0 4
25072: PUSH
25073: LD_EXP 91
25077: PPUSH
25078: LD_VAR 0 1
25082: PPUSH
25083: CALL 32177 0 2
25087: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
25088: LD_ADDR_VAR 0 3
25092: PUSH
25093: DOUBLE
25094: LD_EXP 92
25098: PUSH
25099: LD_VAR 0 4
25103: ARRAY
25104: INC
25105: ST_TO_ADDR
25106: LD_INT 1
25108: PUSH
25109: FOR_DOWNTO
25110: IFFALSE 25282
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
25112: LD_ADDR_VAR 0 5
25116: PUSH
25117: LD_EXP 92
25121: PUSH
25122: LD_VAR 0 4
25126: ARRAY
25127: PUSH
25128: LD_VAR 0 3
25132: ARRAY
25133: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
25134: LD_VAR 0 5
25138: PUSH
25139: LD_INT 1
25141: ARRAY
25142: PPUSH
25143: CALL_OW 302
25147: NOT
25148: PUSH
25149: LD_VAR 0 5
25153: PUSH
25154: LD_INT 1
25156: ARRAY
25157: PPUSH
25158: CALL_OW 255
25162: PUSH
25163: LD_VAR 0 1
25167: PPUSH
25168: CALL_OW 255
25172: NONEQUAL
25173: OR
25174: IFFALSE 25280
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
25176: LD_VAR 0 5
25180: PUSH
25181: LD_INT 1
25183: ARRAY
25184: PPUSH
25185: CALL_OW 305
25189: PUSH
25190: LD_VAR 0 5
25194: PUSH
25195: LD_INT 1
25197: ARRAY
25198: PPUSH
25199: CALL_OW 255
25203: PUSH
25204: LD_VAR 0 1
25208: PPUSH
25209: CALL_OW 255
25213: EQUAL
25214: AND
25215: IFFALSE 25239
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
25217: LD_VAR 0 5
25221: PUSH
25222: LD_INT 1
25224: ARRAY
25225: PPUSH
25226: LD_VAR 0 5
25230: PUSH
25231: LD_INT 2
25233: ARRAY
25234: PPUSH
25235: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
25239: LD_ADDR_EXP 92
25243: PUSH
25244: LD_EXP 92
25248: PPUSH
25249: LD_VAR 0 4
25253: PPUSH
25254: LD_EXP 92
25258: PUSH
25259: LD_VAR 0 4
25263: ARRAY
25264: PPUSH
25265: LD_VAR 0 3
25269: PPUSH
25270: CALL_OW 3
25274: PPUSH
25275: CALL_OW 1
25279: ST_TO_ADDR
// end ; end ;
25280: GO 25109
25282: POP
25283: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25284: LD_VAR 0 1
25288: PPUSH
25289: LD_EXP 92
25293: PUSH
25294: LD_VAR 0 4
25298: ARRAY
25299: PUSH
25300: LD_INT 0
25302: PLUS
25303: PPUSH
25304: CALL_OW 505
// end ;
25308: LD_VAR 0 2
25312: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
25313: LD_INT 0
25315: PPUSH
25316: PPUSH
25317: PPUSH
25318: PPUSH
// if not hack in hackTanks then
25319: LD_VAR 0 1
25323: PUSH
25324: LD_EXP 91
25328: IN
25329: NOT
25330: IFFALSE 25334
// exit ;
25332: GO 25419
// index := GetElementIndex ( hackTanks , hack ) ;
25334: LD_ADDR_VAR 0 5
25338: PUSH
25339: LD_EXP 91
25343: PPUSH
25344: LD_VAR 0 1
25348: PPUSH
25349: CALL 32177 0 2
25353: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
25354: LD_ADDR_VAR 0 4
25358: PUSH
25359: DOUBLE
25360: LD_INT 1
25362: DEC
25363: ST_TO_ADDR
25364: LD_EXP 92
25368: PUSH
25369: LD_VAR 0 5
25373: ARRAY
25374: PUSH
25375: FOR_TO
25376: IFFALSE 25417
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
25378: LD_EXP 92
25382: PUSH
25383: LD_VAR 0 5
25387: ARRAY
25388: PUSH
25389: LD_VAR 0 4
25393: ARRAY
25394: PUSH
25395: LD_INT 1
25397: ARRAY
25398: PUSH
25399: LD_VAR 0 2
25403: EQUAL
25404: IFFALSE 25415
// KillUnit ( vehicle ) ;
25406: LD_VAR 0 2
25410: PPUSH
25411: CALL_OW 66
25415: GO 25375
25417: POP
25418: POP
// end ;
25419: LD_VAR 0 3
25423: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
25424: LD_EXP 96
25428: NOT
25429: IFFALSE 25464
25431: GO 25433
25433: DISABLE
// begin initMiner := true ;
25434: LD_ADDR_EXP 96
25438: PUSH
25439: LD_INT 1
25441: ST_TO_ADDR
// minersList := [ ] ;
25442: LD_ADDR_EXP 97
25446: PUSH
25447: EMPTY
25448: ST_TO_ADDR
// minerMinesList := [ ] ;
25449: LD_ADDR_EXP 98
25453: PUSH
25454: EMPTY
25455: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
25456: LD_ADDR_EXP 99
25460: PUSH
25461: LD_INT 5
25463: ST_TO_ADDR
// end ;
25464: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
25465: LD_EXP 96
25469: PUSH
25470: LD_INT 34
25472: PUSH
25473: LD_INT 81
25475: PUSH
25476: EMPTY
25477: LIST
25478: LIST
25479: PPUSH
25480: CALL_OW 69
25484: AND
25485: IFFALSE 25946
25487: GO 25489
25489: DISABLE
25490: LD_INT 0
25492: PPUSH
25493: PPUSH
25494: PPUSH
25495: PPUSH
// begin enable ;
25496: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
25497: LD_ADDR_VAR 0 1
25501: PUSH
25502: LD_INT 34
25504: PUSH
25505: LD_INT 81
25507: PUSH
25508: EMPTY
25509: LIST
25510: LIST
25511: PPUSH
25512: CALL_OW 69
25516: PUSH
25517: FOR_IN
25518: IFFALSE 25590
// begin if not i in minersList then
25520: LD_VAR 0 1
25524: PUSH
25525: LD_EXP 97
25529: IN
25530: NOT
25531: IFFALSE 25588
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
25533: LD_ADDR_EXP 97
25537: PUSH
25538: LD_EXP 97
25542: PPUSH
25543: LD_EXP 97
25547: PUSH
25548: LD_INT 1
25550: PLUS
25551: PPUSH
25552: LD_VAR 0 1
25556: PPUSH
25557: CALL_OW 1
25561: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25562: LD_ADDR_EXP 98
25566: PUSH
25567: LD_EXP 98
25571: PPUSH
25572: LD_EXP 98
25576: PUSH
25577: LD_INT 1
25579: PLUS
25580: PPUSH
25581: EMPTY
25582: PPUSH
25583: CALL_OW 1
25587: ST_TO_ADDR
// end end ;
25588: GO 25517
25590: POP
25591: POP
// for i := minerMinesList downto 1 do
25592: LD_ADDR_VAR 0 1
25596: PUSH
25597: DOUBLE
25598: LD_EXP 98
25602: INC
25603: ST_TO_ADDR
25604: LD_INT 1
25606: PUSH
25607: FOR_DOWNTO
25608: IFFALSE 25944
// begin if IsLive ( minersList [ i ] ) then
25610: LD_EXP 97
25614: PUSH
25615: LD_VAR 0 1
25619: ARRAY
25620: PPUSH
25621: CALL_OW 300
25625: IFFALSE 25653
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
25627: LD_EXP 97
25631: PUSH
25632: LD_VAR 0 1
25636: ARRAY
25637: PPUSH
25638: LD_EXP 98
25642: PUSH
25643: LD_VAR 0 1
25647: ARRAY
25648: PPUSH
25649: CALL_OW 505
// if not minerMinesList [ i ] then
25653: LD_EXP 98
25657: PUSH
25658: LD_VAR 0 1
25662: ARRAY
25663: NOT
25664: IFFALSE 25668
// continue ;
25666: GO 25607
// for j := minerMinesList [ i ] downto 1 do
25668: LD_ADDR_VAR 0 2
25672: PUSH
25673: DOUBLE
25674: LD_EXP 98
25678: PUSH
25679: LD_VAR 0 1
25683: ARRAY
25684: INC
25685: ST_TO_ADDR
25686: LD_INT 1
25688: PUSH
25689: FOR_DOWNTO
25690: IFFALSE 25940
// begin side := GetSide ( minersList [ i ] ) ;
25692: LD_ADDR_VAR 0 3
25696: PUSH
25697: LD_EXP 97
25701: PUSH
25702: LD_VAR 0 1
25706: ARRAY
25707: PPUSH
25708: CALL_OW 255
25712: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
25713: LD_ADDR_VAR 0 4
25717: PUSH
25718: LD_EXP 98
25722: PUSH
25723: LD_VAR 0 1
25727: ARRAY
25728: PUSH
25729: LD_VAR 0 2
25733: ARRAY
25734: PUSH
25735: LD_INT 1
25737: ARRAY
25738: PPUSH
25739: LD_EXP 98
25743: PUSH
25744: LD_VAR 0 1
25748: ARRAY
25749: PUSH
25750: LD_VAR 0 2
25754: ARRAY
25755: PUSH
25756: LD_INT 2
25758: ARRAY
25759: PPUSH
25760: CALL_OW 428
25764: ST_TO_ADDR
// if not tmp then
25765: LD_VAR 0 4
25769: NOT
25770: IFFALSE 25774
// continue ;
25772: GO 25689
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
25774: LD_VAR 0 4
25778: PUSH
25779: LD_INT 81
25781: PUSH
25782: LD_VAR 0 3
25786: PUSH
25787: EMPTY
25788: LIST
25789: LIST
25790: PPUSH
25791: CALL_OW 69
25795: IN
25796: PUSH
25797: LD_EXP 98
25801: PUSH
25802: LD_VAR 0 1
25806: ARRAY
25807: PUSH
25808: LD_VAR 0 2
25812: ARRAY
25813: PUSH
25814: LD_INT 1
25816: ARRAY
25817: PPUSH
25818: LD_EXP 98
25822: PUSH
25823: LD_VAR 0 1
25827: ARRAY
25828: PUSH
25829: LD_VAR 0 2
25833: ARRAY
25834: PUSH
25835: LD_INT 2
25837: ARRAY
25838: PPUSH
25839: CALL_OW 458
25843: AND
25844: IFFALSE 25938
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
25846: LD_EXP 98
25850: PUSH
25851: LD_VAR 0 1
25855: ARRAY
25856: PUSH
25857: LD_VAR 0 2
25861: ARRAY
25862: PUSH
25863: LD_INT 1
25865: ARRAY
25866: PPUSH
25867: LD_EXP 98
25871: PUSH
25872: LD_VAR 0 1
25876: ARRAY
25877: PUSH
25878: LD_VAR 0 2
25882: ARRAY
25883: PUSH
25884: LD_INT 2
25886: ARRAY
25887: PPUSH
25888: LD_VAR 0 3
25892: PPUSH
25893: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
25897: LD_ADDR_EXP 98
25901: PUSH
25902: LD_EXP 98
25906: PPUSH
25907: LD_VAR 0 1
25911: PPUSH
25912: LD_EXP 98
25916: PUSH
25917: LD_VAR 0 1
25921: ARRAY
25922: PPUSH
25923: LD_VAR 0 2
25927: PPUSH
25928: CALL_OW 3
25932: PPUSH
25933: CALL_OW 1
25937: ST_TO_ADDR
// end ; end ;
25938: GO 25689
25940: POP
25941: POP
// end ;
25942: GO 25607
25944: POP
25945: POP
// end ;
25946: PPOPN 4
25948: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
25949: LD_INT 0
25951: PPUSH
25952: PPUSH
// result := false ;
25953: LD_ADDR_VAR 0 4
25957: PUSH
25958: LD_INT 0
25960: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
25961: LD_VAR 0 1
25965: PPUSH
25966: CALL_OW 264
25970: PUSH
25971: LD_INT 81
25973: EQUAL
25974: NOT
25975: IFFALSE 25979
// exit ;
25977: GO 26219
// index := GetElementIndex ( minersList , unit ) ;
25979: LD_ADDR_VAR 0 5
25983: PUSH
25984: LD_EXP 97
25988: PPUSH
25989: LD_VAR 0 1
25993: PPUSH
25994: CALL 32177 0 2
25998: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
25999: LD_EXP 98
26003: PUSH
26004: LD_VAR 0 5
26008: ARRAY
26009: PUSH
26010: LD_EXP 99
26014: GREATEREQUAL
26015: IFFALSE 26019
// exit ;
26017: GO 26219
// ComMoveXY ( unit , x , y ) ;
26019: LD_VAR 0 1
26023: PPUSH
26024: LD_VAR 0 2
26028: PPUSH
26029: LD_VAR 0 3
26033: PPUSH
26034: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26038: LD_INT 35
26040: PPUSH
26041: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
26045: LD_VAR 0 1
26049: PPUSH
26050: LD_VAR 0 2
26054: PPUSH
26055: LD_VAR 0 3
26059: PPUSH
26060: CALL 63929 0 3
26064: NOT
26065: PUSH
26066: LD_VAR 0 1
26070: PPUSH
26071: CALL_OW 314
26075: AND
26076: IFFALSE 26080
// exit ;
26078: GO 26219
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
26080: LD_VAR 0 2
26084: PPUSH
26085: LD_VAR 0 3
26089: PPUSH
26090: CALL_OW 428
26094: PUSH
26095: LD_VAR 0 1
26099: EQUAL
26100: PUSH
26101: LD_VAR 0 1
26105: PPUSH
26106: CALL_OW 314
26110: NOT
26111: AND
26112: IFFALSE 26038
// PlaySoundXY ( x , y , PlantMine ) ;
26114: LD_VAR 0 2
26118: PPUSH
26119: LD_VAR 0 3
26123: PPUSH
26124: LD_STRING PlantMine
26126: PPUSH
26127: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
26131: LD_VAR 0 2
26135: PPUSH
26136: LD_VAR 0 3
26140: PPUSH
26141: LD_VAR 0 1
26145: PPUSH
26146: CALL_OW 255
26150: PPUSH
26151: LD_INT 0
26153: PPUSH
26154: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
26158: LD_ADDR_EXP 98
26162: PUSH
26163: LD_EXP 98
26167: PPUSH
26168: LD_VAR 0 5
26172: PUSH
26173: LD_EXP 98
26177: PUSH
26178: LD_VAR 0 5
26182: ARRAY
26183: PUSH
26184: LD_INT 1
26186: PLUS
26187: PUSH
26188: EMPTY
26189: LIST
26190: LIST
26191: PPUSH
26192: LD_VAR 0 2
26196: PUSH
26197: LD_VAR 0 3
26201: PUSH
26202: EMPTY
26203: LIST
26204: LIST
26205: PPUSH
26206: CALL 32392 0 3
26210: ST_TO_ADDR
// result := true ;
26211: LD_ADDR_VAR 0 4
26215: PUSH
26216: LD_INT 1
26218: ST_TO_ADDR
// end ;
26219: LD_VAR 0 4
26223: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
26224: LD_INT 0
26226: PPUSH
26227: PPUSH
26228: PPUSH
// if not unit in minersList then
26229: LD_VAR 0 1
26233: PUSH
26234: LD_EXP 97
26238: IN
26239: NOT
26240: IFFALSE 26244
// exit ;
26242: GO 26636
// index := GetElementIndex ( minersList , unit ) ;
26244: LD_ADDR_VAR 0 6
26248: PUSH
26249: LD_EXP 97
26253: PPUSH
26254: LD_VAR 0 1
26258: PPUSH
26259: CALL 32177 0 2
26263: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
26264: LD_ADDR_VAR 0 5
26268: PUSH
26269: DOUBLE
26270: LD_EXP 98
26274: PUSH
26275: LD_VAR 0 6
26279: ARRAY
26280: INC
26281: ST_TO_ADDR
26282: LD_INT 1
26284: PUSH
26285: FOR_DOWNTO
26286: IFFALSE 26447
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
26288: LD_EXP 98
26292: PUSH
26293: LD_VAR 0 6
26297: ARRAY
26298: PUSH
26299: LD_VAR 0 5
26303: ARRAY
26304: PUSH
26305: LD_INT 1
26307: ARRAY
26308: PUSH
26309: LD_VAR 0 2
26313: EQUAL
26314: PUSH
26315: LD_EXP 98
26319: PUSH
26320: LD_VAR 0 6
26324: ARRAY
26325: PUSH
26326: LD_VAR 0 5
26330: ARRAY
26331: PUSH
26332: LD_INT 2
26334: ARRAY
26335: PUSH
26336: LD_VAR 0 3
26340: EQUAL
26341: AND
26342: IFFALSE 26445
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26344: LD_EXP 98
26348: PUSH
26349: LD_VAR 0 6
26353: ARRAY
26354: PUSH
26355: LD_VAR 0 5
26359: ARRAY
26360: PUSH
26361: LD_INT 1
26363: ARRAY
26364: PPUSH
26365: LD_EXP 98
26369: PUSH
26370: LD_VAR 0 6
26374: ARRAY
26375: PUSH
26376: LD_VAR 0 5
26380: ARRAY
26381: PUSH
26382: LD_INT 2
26384: ARRAY
26385: PPUSH
26386: LD_VAR 0 1
26390: PPUSH
26391: CALL_OW 255
26395: PPUSH
26396: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26400: LD_ADDR_EXP 98
26404: PUSH
26405: LD_EXP 98
26409: PPUSH
26410: LD_VAR 0 6
26414: PPUSH
26415: LD_EXP 98
26419: PUSH
26420: LD_VAR 0 6
26424: ARRAY
26425: PPUSH
26426: LD_VAR 0 5
26430: PPUSH
26431: CALL_OW 3
26435: PPUSH
26436: CALL_OW 1
26440: ST_TO_ADDR
// exit ;
26441: POP
26442: POP
26443: GO 26636
// end ; end ;
26445: GO 26285
26447: POP
26448: POP
// for i := minerMinesList [ index ] downto 1 do
26449: LD_ADDR_VAR 0 5
26453: PUSH
26454: DOUBLE
26455: LD_EXP 98
26459: PUSH
26460: LD_VAR 0 6
26464: ARRAY
26465: INC
26466: ST_TO_ADDR
26467: LD_INT 1
26469: PUSH
26470: FOR_DOWNTO
26471: IFFALSE 26634
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
26473: LD_EXP 98
26477: PUSH
26478: LD_VAR 0 6
26482: ARRAY
26483: PUSH
26484: LD_VAR 0 5
26488: ARRAY
26489: PUSH
26490: LD_INT 1
26492: ARRAY
26493: PPUSH
26494: LD_EXP 98
26498: PUSH
26499: LD_VAR 0 6
26503: ARRAY
26504: PUSH
26505: LD_VAR 0 5
26509: ARRAY
26510: PUSH
26511: LD_INT 2
26513: ARRAY
26514: PPUSH
26515: LD_VAR 0 2
26519: PPUSH
26520: LD_VAR 0 3
26524: PPUSH
26525: CALL_OW 298
26529: PUSH
26530: LD_INT 6
26532: LESS
26533: IFFALSE 26632
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26535: LD_EXP 98
26539: PUSH
26540: LD_VAR 0 6
26544: ARRAY
26545: PUSH
26546: LD_VAR 0 5
26550: ARRAY
26551: PUSH
26552: LD_INT 1
26554: ARRAY
26555: PPUSH
26556: LD_EXP 98
26560: PUSH
26561: LD_VAR 0 6
26565: ARRAY
26566: PUSH
26567: LD_VAR 0 5
26571: ARRAY
26572: PUSH
26573: LD_INT 2
26575: ARRAY
26576: PPUSH
26577: LD_VAR 0 1
26581: PPUSH
26582: CALL_OW 255
26586: PPUSH
26587: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26591: LD_ADDR_EXP 98
26595: PUSH
26596: LD_EXP 98
26600: PPUSH
26601: LD_VAR 0 6
26605: PPUSH
26606: LD_EXP 98
26610: PUSH
26611: LD_VAR 0 6
26615: ARRAY
26616: PPUSH
26617: LD_VAR 0 5
26621: PPUSH
26622: CALL_OW 3
26626: PPUSH
26627: CALL_OW 1
26631: ST_TO_ADDR
// end ; end ;
26632: GO 26470
26634: POP
26635: POP
// end ;
26636: LD_VAR 0 4
26640: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
26641: LD_INT 0
26643: PPUSH
26644: PPUSH
26645: PPUSH
26646: PPUSH
26647: PPUSH
26648: PPUSH
26649: PPUSH
26650: PPUSH
26651: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26652: LD_VAR 0 1
26656: PPUSH
26657: CALL_OW 264
26661: PUSH
26662: LD_INT 81
26664: EQUAL
26665: NOT
26666: PUSH
26667: LD_VAR 0 1
26671: PUSH
26672: LD_EXP 97
26676: IN
26677: NOT
26678: OR
26679: IFFALSE 26683
// exit ;
26681: GO 27005
// index := GetElementIndex ( minersList , unit ) ;
26683: LD_ADDR_VAR 0 6
26687: PUSH
26688: LD_EXP 97
26692: PPUSH
26693: LD_VAR 0 1
26697: PPUSH
26698: CALL 32177 0 2
26702: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
26703: LD_ADDR_VAR 0 8
26707: PUSH
26708: LD_EXP 99
26712: PUSH
26713: LD_EXP 98
26717: PUSH
26718: LD_VAR 0 6
26722: ARRAY
26723: MINUS
26724: ST_TO_ADDR
// if not minesFreeAmount then
26725: LD_VAR 0 8
26729: NOT
26730: IFFALSE 26734
// exit ;
26732: GO 27005
// tmp := [ ] ;
26734: LD_ADDR_VAR 0 7
26738: PUSH
26739: EMPTY
26740: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
26741: LD_ADDR_VAR 0 5
26745: PUSH
26746: DOUBLE
26747: LD_INT 1
26749: DEC
26750: ST_TO_ADDR
26751: LD_VAR 0 8
26755: PUSH
26756: FOR_TO
26757: IFFALSE 26952
// begin _d := rand ( 0 , 5 ) ;
26759: LD_ADDR_VAR 0 11
26763: PUSH
26764: LD_INT 0
26766: PPUSH
26767: LD_INT 5
26769: PPUSH
26770: CALL_OW 12
26774: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
26775: LD_ADDR_VAR 0 12
26779: PUSH
26780: LD_INT 2
26782: PPUSH
26783: LD_INT 6
26785: PPUSH
26786: CALL_OW 12
26790: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
26791: LD_ADDR_VAR 0 9
26795: PUSH
26796: LD_VAR 0 2
26800: PPUSH
26801: LD_VAR 0 11
26805: PPUSH
26806: LD_VAR 0 12
26810: PPUSH
26811: CALL_OW 272
26815: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
26816: LD_ADDR_VAR 0 10
26820: PUSH
26821: LD_VAR 0 3
26825: PPUSH
26826: LD_VAR 0 11
26830: PPUSH
26831: LD_VAR 0 12
26835: PPUSH
26836: CALL_OW 273
26840: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
26841: LD_VAR 0 9
26845: PPUSH
26846: LD_VAR 0 10
26850: PPUSH
26851: CALL_OW 488
26855: PUSH
26856: LD_VAR 0 9
26860: PUSH
26861: LD_VAR 0 10
26865: PUSH
26866: EMPTY
26867: LIST
26868: LIST
26869: PUSH
26870: LD_VAR 0 7
26874: IN
26875: NOT
26876: AND
26877: PUSH
26878: LD_VAR 0 9
26882: PPUSH
26883: LD_VAR 0 10
26887: PPUSH
26888: CALL_OW 458
26892: NOT
26893: AND
26894: IFFALSE 26936
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
26896: LD_ADDR_VAR 0 7
26900: PUSH
26901: LD_VAR 0 7
26905: PPUSH
26906: LD_VAR 0 7
26910: PUSH
26911: LD_INT 1
26913: PLUS
26914: PPUSH
26915: LD_VAR 0 9
26919: PUSH
26920: LD_VAR 0 10
26924: PUSH
26925: EMPTY
26926: LIST
26927: LIST
26928: PPUSH
26929: CALL_OW 1
26933: ST_TO_ADDR
26934: GO 26950
// i := i - 1 ;
26936: LD_ADDR_VAR 0 5
26940: PUSH
26941: LD_VAR 0 5
26945: PUSH
26946: LD_INT 1
26948: MINUS
26949: ST_TO_ADDR
// end ;
26950: GO 26756
26952: POP
26953: POP
// for i in tmp do
26954: LD_ADDR_VAR 0 5
26958: PUSH
26959: LD_VAR 0 7
26963: PUSH
26964: FOR_IN
26965: IFFALSE 27003
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
26967: LD_VAR 0 1
26971: PPUSH
26972: LD_VAR 0 5
26976: PUSH
26977: LD_INT 1
26979: ARRAY
26980: PPUSH
26981: LD_VAR 0 5
26985: PUSH
26986: LD_INT 2
26988: ARRAY
26989: PPUSH
26990: CALL 25949 0 3
26994: NOT
26995: IFFALSE 27001
// exit ;
26997: POP
26998: POP
26999: GO 27005
27001: GO 26964
27003: POP
27004: POP
// end ;
27005: LD_VAR 0 4
27009: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
27010: LD_INT 0
27012: PPUSH
27013: PPUSH
27014: PPUSH
27015: PPUSH
27016: PPUSH
27017: PPUSH
27018: PPUSH
// if not GetClass ( unit ) = class_sniper then
27019: LD_VAR 0 1
27023: PPUSH
27024: CALL_OW 257
27028: PUSH
27029: LD_INT 5
27031: EQUAL
27032: NOT
27033: IFFALSE 27037
// exit ;
27035: GO 27425
// dist := 8 ;
27037: LD_ADDR_VAR 0 5
27041: PUSH
27042: LD_INT 8
27044: ST_TO_ADDR
// viewRange := 12 ;
27045: LD_ADDR_VAR 0 7
27049: PUSH
27050: LD_INT 12
27052: ST_TO_ADDR
// side := GetSide ( unit ) ;
27053: LD_ADDR_VAR 0 6
27057: PUSH
27058: LD_VAR 0 1
27062: PPUSH
27063: CALL_OW 255
27067: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
27068: LD_INT 61
27070: PPUSH
27071: LD_VAR 0 6
27075: PPUSH
27076: CALL_OW 321
27080: PUSH
27081: LD_INT 2
27083: EQUAL
27084: IFFALSE 27094
// viewRange := 16 ;
27086: LD_ADDR_VAR 0 7
27090: PUSH
27091: LD_INT 16
27093: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
27094: LD_VAR 0 1
27098: PPUSH
27099: LD_VAR 0 2
27103: PPUSH
27104: LD_VAR 0 3
27108: PPUSH
27109: CALL_OW 297
27113: PUSH
27114: LD_VAR 0 5
27118: GREATER
27119: IFFALSE 27198
// begin ComMoveXY ( unit , x , y ) ;
27121: LD_VAR 0 1
27125: PPUSH
27126: LD_VAR 0 2
27130: PPUSH
27131: LD_VAR 0 3
27135: PPUSH
27136: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27140: LD_INT 35
27142: PPUSH
27143: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
27147: LD_VAR 0 1
27151: PPUSH
27152: LD_VAR 0 2
27156: PPUSH
27157: LD_VAR 0 3
27161: PPUSH
27162: CALL 63929 0 3
27166: NOT
27167: IFFALSE 27171
// exit ;
27169: GO 27425
// until GetDistUnitXY ( unit , x , y ) < dist ;
27171: LD_VAR 0 1
27175: PPUSH
27176: LD_VAR 0 2
27180: PPUSH
27181: LD_VAR 0 3
27185: PPUSH
27186: CALL_OW 297
27190: PUSH
27191: LD_VAR 0 5
27195: LESS
27196: IFFALSE 27140
// end ; ComTurnXY ( unit , x , y ) ;
27198: LD_VAR 0 1
27202: PPUSH
27203: LD_VAR 0 2
27207: PPUSH
27208: LD_VAR 0 3
27212: PPUSH
27213: CALL_OW 118
// wait ( 5 ) ;
27217: LD_INT 5
27219: PPUSH
27220: CALL_OW 67
// _d := GetDir ( unit ) ;
27224: LD_ADDR_VAR 0 10
27228: PUSH
27229: LD_VAR 0 1
27233: PPUSH
27234: CALL_OW 254
27238: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
27239: LD_ADDR_VAR 0 8
27243: PUSH
27244: LD_VAR 0 1
27248: PPUSH
27249: CALL_OW 250
27253: PPUSH
27254: LD_VAR 0 10
27258: PPUSH
27259: LD_VAR 0 5
27263: PPUSH
27264: CALL_OW 272
27268: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
27269: LD_ADDR_VAR 0 9
27273: PUSH
27274: LD_VAR 0 1
27278: PPUSH
27279: CALL_OW 251
27283: PPUSH
27284: LD_VAR 0 10
27288: PPUSH
27289: LD_VAR 0 5
27293: PPUSH
27294: CALL_OW 273
27298: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27299: LD_VAR 0 8
27303: PPUSH
27304: LD_VAR 0 9
27308: PPUSH
27309: CALL_OW 488
27313: NOT
27314: IFFALSE 27318
// exit ;
27316: GO 27425
// ComAnimCustom ( unit , 1 ) ;
27318: LD_VAR 0 1
27322: PPUSH
27323: LD_INT 1
27325: PPUSH
27326: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
27330: LD_VAR 0 8
27334: PPUSH
27335: LD_VAR 0 9
27339: PPUSH
27340: LD_VAR 0 6
27344: PPUSH
27345: LD_VAR 0 7
27349: PPUSH
27350: CALL_OW 330
// repeat wait ( 1 ) ;
27354: LD_INT 1
27356: PPUSH
27357: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
27361: LD_VAR 0 1
27365: PPUSH
27366: CALL_OW 316
27370: PUSH
27371: LD_VAR 0 1
27375: PPUSH
27376: CALL_OW 314
27380: OR
27381: PUSH
27382: LD_VAR 0 1
27386: PPUSH
27387: CALL_OW 302
27391: NOT
27392: OR
27393: PUSH
27394: LD_VAR 0 1
27398: PPUSH
27399: CALL_OW 301
27403: OR
27404: IFFALSE 27354
// RemoveSeeing ( _x , _y , side ) ;
27406: LD_VAR 0 8
27410: PPUSH
27411: LD_VAR 0 9
27415: PPUSH
27416: LD_VAR 0 6
27420: PPUSH
27421: CALL_OW 331
// end ; end_of_file
27425: LD_VAR 0 4
27429: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27430: LD_INT 0
27432: PPUSH
27433: PPUSH
// if exist_mode then
27434: LD_VAR 0 2
27438: IFFALSE 27463
// unit := CreateCharacter ( prefix & ident ) else
27440: LD_ADDR_VAR 0 5
27444: PUSH
27445: LD_VAR 0 3
27449: PUSH
27450: LD_VAR 0 1
27454: STR
27455: PPUSH
27456: CALL_OW 34
27460: ST_TO_ADDR
27461: GO 27478
// unit := NewCharacter ( ident ) ;
27463: LD_ADDR_VAR 0 5
27467: PUSH
27468: LD_VAR 0 1
27472: PPUSH
27473: CALL_OW 25
27477: ST_TO_ADDR
// result := unit ;
27478: LD_ADDR_VAR 0 4
27482: PUSH
27483: LD_VAR 0 5
27487: ST_TO_ADDR
// end ;
27488: LD_VAR 0 4
27492: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27493: LD_INT 0
27495: PPUSH
27496: PPUSH
// if not side or not nation then
27497: LD_VAR 0 1
27501: NOT
27502: PUSH
27503: LD_VAR 0 2
27507: NOT
27508: OR
27509: IFFALSE 27513
// exit ;
27511: GO 28281
// case nation of nation_american :
27513: LD_VAR 0 2
27517: PUSH
27518: LD_INT 1
27520: DOUBLE
27521: EQUAL
27522: IFTRUE 27526
27524: GO 27740
27526: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
27527: LD_ADDR_VAR 0 4
27531: PUSH
27532: LD_INT 35
27534: PUSH
27535: LD_INT 45
27537: PUSH
27538: LD_INT 46
27540: PUSH
27541: LD_INT 47
27543: PUSH
27544: LD_INT 82
27546: PUSH
27547: LD_INT 83
27549: PUSH
27550: LD_INT 84
27552: PUSH
27553: LD_INT 85
27555: PUSH
27556: LD_INT 86
27558: PUSH
27559: LD_INT 1
27561: PUSH
27562: LD_INT 2
27564: PUSH
27565: LD_INT 6
27567: PUSH
27568: LD_INT 15
27570: PUSH
27571: LD_INT 16
27573: PUSH
27574: LD_INT 7
27576: PUSH
27577: LD_INT 12
27579: PUSH
27580: LD_INT 13
27582: PUSH
27583: LD_INT 10
27585: PUSH
27586: LD_INT 14
27588: PUSH
27589: LD_INT 20
27591: PUSH
27592: LD_INT 21
27594: PUSH
27595: LD_INT 22
27597: PUSH
27598: LD_INT 25
27600: PUSH
27601: LD_INT 32
27603: PUSH
27604: LD_INT 27
27606: PUSH
27607: LD_INT 36
27609: PUSH
27610: LD_INT 69
27612: PUSH
27613: LD_INT 39
27615: PUSH
27616: LD_INT 34
27618: PUSH
27619: LD_INT 40
27621: PUSH
27622: LD_INT 48
27624: PUSH
27625: LD_INT 49
27627: PUSH
27628: LD_INT 50
27630: PUSH
27631: LD_INT 51
27633: PUSH
27634: LD_INT 52
27636: PUSH
27637: LD_INT 53
27639: PUSH
27640: LD_INT 54
27642: PUSH
27643: LD_INT 55
27645: PUSH
27646: LD_INT 56
27648: PUSH
27649: LD_INT 57
27651: PUSH
27652: LD_INT 58
27654: PUSH
27655: LD_INT 59
27657: PUSH
27658: LD_INT 60
27660: PUSH
27661: LD_INT 61
27663: PUSH
27664: LD_INT 62
27666: PUSH
27667: LD_INT 80
27669: PUSH
27670: LD_INT 82
27672: PUSH
27673: LD_INT 83
27675: PUSH
27676: LD_INT 84
27678: PUSH
27679: LD_INT 85
27681: PUSH
27682: LD_INT 86
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: LIST
27689: LIST
27690: LIST
27691: LIST
27692: LIST
27693: LIST
27694: LIST
27695: LIST
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: LIST
27717: LIST
27718: LIST
27719: LIST
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: LIST
27727: LIST
27728: LIST
27729: LIST
27730: LIST
27731: LIST
27732: LIST
27733: LIST
27734: LIST
27735: LIST
27736: LIST
27737: ST_TO_ADDR
27738: GO 28205
27740: LD_INT 2
27742: DOUBLE
27743: EQUAL
27744: IFTRUE 27748
27746: GO 27974
27748: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
27749: LD_ADDR_VAR 0 4
27753: PUSH
27754: LD_INT 35
27756: PUSH
27757: LD_INT 45
27759: PUSH
27760: LD_INT 46
27762: PUSH
27763: LD_INT 47
27765: PUSH
27766: LD_INT 82
27768: PUSH
27769: LD_INT 83
27771: PUSH
27772: LD_INT 84
27774: PUSH
27775: LD_INT 85
27777: PUSH
27778: LD_INT 87
27780: PUSH
27781: LD_INT 70
27783: PUSH
27784: LD_INT 1
27786: PUSH
27787: LD_INT 11
27789: PUSH
27790: LD_INT 3
27792: PUSH
27793: LD_INT 4
27795: PUSH
27796: LD_INT 5
27798: PUSH
27799: LD_INT 6
27801: PUSH
27802: LD_INT 15
27804: PUSH
27805: LD_INT 18
27807: PUSH
27808: LD_INT 7
27810: PUSH
27811: LD_INT 17
27813: PUSH
27814: LD_INT 8
27816: PUSH
27817: LD_INT 20
27819: PUSH
27820: LD_INT 21
27822: PUSH
27823: LD_INT 22
27825: PUSH
27826: LD_INT 72
27828: PUSH
27829: LD_INT 26
27831: PUSH
27832: LD_INT 69
27834: PUSH
27835: LD_INT 39
27837: PUSH
27838: LD_INT 40
27840: PUSH
27841: LD_INT 41
27843: PUSH
27844: LD_INT 42
27846: PUSH
27847: LD_INT 43
27849: PUSH
27850: LD_INT 48
27852: PUSH
27853: LD_INT 49
27855: PUSH
27856: LD_INT 50
27858: PUSH
27859: LD_INT 51
27861: PUSH
27862: LD_INT 52
27864: PUSH
27865: LD_INT 53
27867: PUSH
27868: LD_INT 54
27870: PUSH
27871: LD_INT 55
27873: PUSH
27874: LD_INT 56
27876: PUSH
27877: LD_INT 60
27879: PUSH
27880: LD_INT 61
27882: PUSH
27883: LD_INT 62
27885: PUSH
27886: LD_INT 66
27888: PUSH
27889: LD_INT 67
27891: PUSH
27892: LD_INT 68
27894: PUSH
27895: LD_INT 81
27897: PUSH
27898: LD_INT 82
27900: PUSH
27901: LD_INT 83
27903: PUSH
27904: LD_INT 84
27906: PUSH
27907: LD_INT 85
27909: PUSH
27910: LD_INT 87
27912: PUSH
27913: LD_INT 88
27915: PUSH
27916: EMPTY
27917: LIST
27918: LIST
27919: LIST
27920: LIST
27921: LIST
27922: LIST
27923: LIST
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: LIST
27937: LIST
27938: LIST
27939: LIST
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: LIST
27945: LIST
27946: LIST
27947: LIST
27948: LIST
27949: LIST
27950: LIST
27951: LIST
27952: LIST
27953: LIST
27954: LIST
27955: LIST
27956: LIST
27957: LIST
27958: LIST
27959: LIST
27960: LIST
27961: LIST
27962: LIST
27963: LIST
27964: LIST
27965: LIST
27966: LIST
27967: LIST
27968: LIST
27969: LIST
27970: LIST
27971: ST_TO_ADDR
27972: GO 28205
27974: LD_INT 3
27976: DOUBLE
27977: EQUAL
27978: IFTRUE 27982
27980: GO 28204
27982: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27983: LD_ADDR_VAR 0 4
27987: PUSH
27988: LD_INT 46
27990: PUSH
27991: LD_INT 47
27993: PUSH
27994: LD_INT 1
27996: PUSH
27997: LD_INT 2
27999: PUSH
28000: LD_INT 82
28002: PUSH
28003: LD_INT 83
28005: PUSH
28006: LD_INT 84
28008: PUSH
28009: LD_INT 85
28011: PUSH
28012: LD_INT 86
28014: PUSH
28015: LD_INT 11
28017: PUSH
28018: LD_INT 9
28020: PUSH
28021: LD_INT 20
28023: PUSH
28024: LD_INT 19
28026: PUSH
28027: LD_INT 21
28029: PUSH
28030: LD_INT 24
28032: PUSH
28033: LD_INT 22
28035: PUSH
28036: LD_INT 25
28038: PUSH
28039: LD_INT 28
28041: PUSH
28042: LD_INT 29
28044: PUSH
28045: LD_INT 30
28047: PUSH
28048: LD_INT 31
28050: PUSH
28051: LD_INT 37
28053: PUSH
28054: LD_INT 38
28056: PUSH
28057: LD_INT 32
28059: PUSH
28060: LD_INT 27
28062: PUSH
28063: LD_INT 33
28065: PUSH
28066: LD_INT 69
28068: PUSH
28069: LD_INT 39
28071: PUSH
28072: LD_INT 34
28074: PUSH
28075: LD_INT 40
28077: PUSH
28078: LD_INT 71
28080: PUSH
28081: LD_INT 23
28083: PUSH
28084: LD_INT 44
28086: PUSH
28087: LD_INT 48
28089: PUSH
28090: LD_INT 49
28092: PUSH
28093: LD_INT 50
28095: PUSH
28096: LD_INT 51
28098: PUSH
28099: LD_INT 52
28101: PUSH
28102: LD_INT 53
28104: PUSH
28105: LD_INT 54
28107: PUSH
28108: LD_INT 55
28110: PUSH
28111: LD_INT 56
28113: PUSH
28114: LD_INT 57
28116: PUSH
28117: LD_INT 58
28119: PUSH
28120: LD_INT 59
28122: PUSH
28123: LD_INT 63
28125: PUSH
28126: LD_INT 64
28128: PUSH
28129: LD_INT 65
28131: PUSH
28132: LD_INT 82
28134: PUSH
28135: LD_INT 83
28137: PUSH
28138: LD_INT 84
28140: PUSH
28141: LD_INT 85
28143: PUSH
28144: LD_INT 86
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: LIST
28151: LIST
28152: LIST
28153: LIST
28154: LIST
28155: LIST
28156: LIST
28157: LIST
28158: LIST
28159: LIST
28160: LIST
28161: LIST
28162: LIST
28163: LIST
28164: LIST
28165: LIST
28166: LIST
28167: LIST
28168: LIST
28169: LIST
28170: LIST
28171: LIST
28172: LIST
28173: LIST
28174: LIST
28175: LIST
28176: LIST
28177: LIST
28178: LIST
28179: LIST
28180: LIST
28181: LIST
28182: LIST
28183: LIST
28184: LIST
28185: LIST
28186: LIST
28187: LIST
28188: LIST
28189: LIST
28190: LIST
28191: LIST
28192: LIST
28193: LIST
28194: LIST
28195: LIST
28196: LIST
28197: LIST
28198: LIST
28199: LIST
28200: LIST
28201: ST_TO_ADDR
28202: GO 28205
28204: POP
// if state > - 1 and state < 3 then
28205: LD_VAR 0 3
28209: PUSH
28210: LD_INT 1
28212: NEG
28213: GREATER
28214: PUSH
28215: LD_VAR 0 3
28219: PUSH
28220: LD_INT 3
28222: LESS
28223: AND
28224: IFFALSE 28281
// for i in result do
28226: LD_ADDR_VAR 0 5
28230: PUSH
28231: LD_VAR 0 4
28235: PUSH
28236: FOR_IN
28237: IFFALSE 28279
// if GetTech ( i , side ) <> state then
28239: LD_VAR 0 5
28243: PPUSH
28244: LD_VAR 0 1
28248: PPUSH
28249: CALL_OW 321
28253: PUSH
28254: LD_VAR 0 3
28258: NONEQUAL
28259: IFFALSE 28277
// result := result diff i ;
28261: LD_ADDR_VAR 0 4
28265: PUSH
28266: LD_VAR 0 4
28270: PUSH
28271: LD_VAR 0 5
28275: DIFF
28276: ST_TO_ADDR
28277: GO 28236
28279: POP
28280: POP
// end ;
28281: LD_VAR 0 4
28285: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
28286: LD_INT 0
28288: PPUSH
28289: PPUSH
28290: PPUSH
// result := true ;
28291: LD_ADDR_VAR 0 3
28295: PUSH
28296: LD_INT 1
28298: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
28299: LD_ADDR_VAR 0 5
28303: PUSH
28304: LD_VAR 0 2
28308: PPUSH
28309: CALL_OW 480
28313: ST_TO_ADDR
// if not tmp then
28314: LD_VAR 0 5
28318: NOT
28319: IFFALSE 28323
// exit ;
28321: GO 28372
// for i in tmp do
28323: LD_ADDR_VAR 0 4
28327: PUSH
28328: LD_VAR 0 5
28332: PUSH
28333: FOR_IN
28334: IFFALSE 28370
// if GetTech ( i , side ) <> state_researched then
28336: LD_VAR 0 4
28340: PPUSH
28341: LD_VAR 0 1
28345: PPUSH
28346: CALL_OW 321
28350: PUSH
28351: LD_INT 2
28353: NONEQUAL
28354: IFFALSE 28368
// begin result := false ;
28356: LD_ADDR_VAR 0 3
28360: PUSH
28361: LD_INT 0
28363: ST_TO_ADDR
// exit ;
28364: POP
28365: POP
28366: GO 28372
// end ;
28368: GO 28333
28370: POP
28371: POP
// end ;
28372: LD_VAR 0 3
28376: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
28377: LD_INT 0
28379: PPUSH
28380: PPUSH
28381: PPUSH
28382: PPUSH
28383: PPUSH
28384: PPUSH
28385: PPUSH
28386: PPUSH
28387: PPUSH
28388: PPUSH
28389: PPUSH
28390: PPUSH
28391: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
28392: LD_VAR 0 1
28396: NOT
28397: PUSH
28398: LD_VAR 0 1
28402: PPUSH
28403: CALL_OW 257
28407: PUSH
28408: LD_INT 9
28410: NONEQUAL
28411: OR
28412: IFFALSE 28416
// exit ;
28414: GO 28989
// side := GetSide ( unit ) ;
28416: LD_ADDR_VAR 0 9
28420: PUSH
28421: LD_VAR 0 1
28425: PPUSH
28426: CALL_OW 255
28430: ST_TO_ADDR
// tech_space := tech_spacanom ;
28431: LD_ADDR_VAR 0 12
28435: PUSH
28436: LD_INT 29
28438: ST_TO_ADDR
// tech_time := tech_taurad ;
28439: LD_ADDR_VAR 0 13
28443: PUSH
28444: LD_INT 28
28446: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28447: LD_ADDR_VAR 0 11
28451: PUSH
28452: LD_VAR 0 1
28456: PPUSH
28457: CALL_OW 310
28461: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28462: LD_VAR 0 11
28466: PPUSH
28467: CALL_OW 247
28471: PUSH
28472: LD_INT 2
28474: EQUAL
28475: IFFALSE 28479
// exit ;
28477: GO 28989
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28479: LD_ADDR_VAR 0 8
28483: PUSH
28484: LD_INT 81
28486: PUSH
28487: LD_VAR 0 9
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: PUSH
28496: LD_INT 3
28498: PUSH
28499: LD_INT 21
28501: PUSH
28502: LD_INT 3
28504: PUSH
28505: EMPTY
28506: LIST
28507: LIST
28508: PUSH
28509: EMPTY
28510: LIST
28511: LIST
28512: PUSH
28513: EMPTY
28514: LIST
28515: LIST
28516: PPUSH
28517: CALL_OW 69
28521: ST_TO_ADDR
// if not tmp then
28522: LD_VAR 0 8
28526: NOT
28527: IFFALSE 28531
// exit ;
28529: GO 28989
// if in_unit then
28531: LD_VAR 0 11
28535: IFFALSE 28559
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28537: LD_ADDR_VAR 0 10
28541: PUSH
28542: LD_VAR 0 8
28546: PPUSH
28547: LD_VAR 0 11
28551: PPUSH
28552: CALL_OW 74
28556: ST_TO_ADDR
28557: GO 28579
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28559: LD_ADDR_VAR 0 10
28563: PUSH
28564: LD_VAR 0 8
28568: PPUSH
28569: LD_VAR 0 1
28573: PPUSH
28574: CALL_OW 74
28578: ST_TO_ADDR
// if not enemy then
28579: LD_VAR 0 10
28583: NOT
28584: IFFALSE 28588
// exit ;
28586: GO 28989
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28588: LD_VAR 0 11
28592: PUSH
28593: LD_VAR 0 11
28597: PPUSH
28598: LD_VAR 0 10
28602: PPUSH
28603: CALL_OW 296
28607: PUSH
28608: LD_INT 13
28610: GREATER
28611: AND
28612: PUSH
28613: LD_VAR 0 1
28617: PPUSH
28618: LD_VAR 0 10
28622: PPUSH
28623: CALL_OW 296
28627: PUSH
28628: LD_INT 12
28630: GREATER
28631: OR
28632: IFFALSE 28636
// exit ;
28634: GO 28989
// missile := [ 1 ] ;
28636: LD_ADDR_VAR 0 14
28640: PUSH
28641: LD_INT 1
28643: PUSH
28644: EMPTY
28645: LIST
28646: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28647: LD_VAR 0 9
28651: PPUSH
28652: LD_VAR 0 12
28656: PPUSH
28657: CALL_OW 325
28661: IFFALSE 28690
// missile := Replace ( missile , missile + 1 , 2 ) ;
28663: LD_ADDR_VAR 0 14
28667: PUSH
28668: LD_VAR 0 14
28672: PPUSH
28673: LD_VAR 0 14
28677: PUSH
28678: LD_INT 1
28680: PLUS
28681: PPUSH
28682: LD_INT 2
28684: PPUSH
28685: CALL_OW 1
28689: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28690: LD_VAR 0 9
28694: PPUSH
28695: LD_VAR 0 13
28699: PPUSH
28700: CALL_OW 325
28704: PUSH
28705: LD_VAR 0 10
28709: PPUSH
28710: CALL_OW 255
28714: PPUSH
28715: LD_VAR 0 13
28719: PPUSH
28720: CALL_OW 325
28724: NOT
28725: AND
28726: IFFALSE 28755
// missile := Replace ( missile , missile + 1 , 3 ) ;
28728: LD_ADDR_VAR 0 14
28732: PUSH
28733: LD_VAR 0 14
28737: PPUSH
28738: LD_VAR 0 14
28742: PUSH
28743: LD_INT 1
28745: PLUS
28746: PPUSH
28747: LD_INT 3
28749: PPUSH
28750: CALL_OW 1
28754: ST_TO_ADDR
// if missile < 2 then
28755: LD_VAR 0 14
28759: PUSH
28760: LD_INT 2
28762: LESS
28763: IFFALSE 28767
// exit ;
28765: GO 28989
// x := GetX ( enemy ) ;
28767: LD_ADDR_VAR 0 4
28771: PUSH
28772: LD_VAR 0 10
28776: PPUSH
28777: CALL_OW 250
28781: ST_TO_ADDR
// y := GetY ( enemy ) ;
28782: LD_ADDR_VAR 0 5
28786: PUSH
28787: LD_VAR 0 10
28791: PPUSH
28792: CALL_OW 251
28796: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28797: LD_ADDR_VAR 0 6
28801: PUSH
28802: LD_VAR 0 4
28806: PUSH
28807: LD_INT 1
28809: NEG
28810: PPUSH
28811: LD_INT 1
28813: PPUSH
28814: CALL_OW 12
28818: PLUS
28819: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28820: LD_ADDR_VAR 0 7
28824: PUSH
28825: LD_VAR 0 5
28829: PUSH
28830: LD_INT 1
28832: NEG
28833: PPUSH
28834: LD_INT 1
28836: PPUSH
28837: CALL_OW 12
28841: PLUS
28842: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28843: LD_VAR 0 6
28847: PPUSH
28848: LD_VAR 0 7
28852: PPUSH
28853: CALL_OW 488
28857: NOT
28858: IFFALSE 28880
// begin _x := x ;
28860: LD_ADDR_VAR 0 6
28864: PUSH
28865: LD_VAR 0 4
28869: ST_TO_ADDR
// _y := y ;
28870: LD_ADDR_VAR 0 7
28874: PUSH
28875: LD_VAR 0 5
28879: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28880: LD_ADDR_VAR 0 3
28884: PUSH
28885: LD_INT 1
28887: PPUSH
28888: LD_VAR 0 14
28892: PPUSH
28893: CALL_OW 12
28897: ST_TO_ADDR
// case i of 1 :
28898: LD_VAR 0 3
28902: PUSH
28903: LD_INT 1
28905: DOUBLE
28906: EQUAL
28907: IFTRUE 28911
28909: GO 28928
28911: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28912: LD_VAR 0 1
28916: PPUSH
28917: LD_VAR 0 10
28921: PPUSH
28922: CALL_OW 115
28926: GO 28989
28928: LD_INT 2
28930: DOUBLE
28931: EQUAL
28932: IFTRUE 28936
28934: GO 28958
28936: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28937: LD_VAR 0 1
28941: PPUSH
28942: LD_VAR 0 6
28946: PPUSH
28947: LD_VAR 0 7
28951: PPUSH
28952: CALL_OW 153
28956: GO 28989
28958: LD_INT 3
28960: DOUBLE
28961: EQUAL
28962: IFTRUE 28966
28964: GO 28988
28966: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28967: LD_VAR 0 1
28971: PPUSH
28972: LD_VAR 0 6
28976: PPUSH
28977: LD_VAR 0 7
28981: PPUSH
28982: CALL_OW 154
28986: GO 28989
28988: POP
// end ;
28989: LD_VAR 0 2
28993: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28994: LD_INT 0
28996: PPUSH
28997: PPUSH
28998: PPUSH
28999: PPUSH
29000: PPUSH
29001: PPUSH
// if not unit or not building then
29002: LD_VAR 0 1
29006: NOT
29007: PUSH
29008: LD_VAR 0 2
29012: NOT
29013: OR
29014: IFFALSE 29018
// exit ;
29016: GO 29176
// x := GetX ( building ) ;
29018: LD_ADDR_VAR 0 5
29022: PUSH
29023: LD_VAR 0 2
29027: PPUSH
29028: CALL_OW 250
29032: ST_TO_ADDR
// y := GetY ( building ) ;
29033: LD_ADDR_VAR 0 6
29037: PUSH
29038: LD_VAR 0 2
29042: PPUSH
29043: CALL_OW 251
29047: ST_TO_ADDR
// for i = 0 to 5 do
29048: LD_ADDR_VAR 0 4
29052: PUSH
29053: DOUBLE
29054: LD_INT 0
29056: DEC
29057: ST_TO_ADDR
29058: LD_INT 5
29060: PUSH
29061: FOR_TO
29062: IFFALSE 29174
// begin _x := ShiftX ( x , i , 3 ) ;
29064: LD_ADDR_VAR 0 7
29068: PUSH
29069: LD_VAR 0 5
29073: PPUSH
29074: LD_VAR 0 4
29078: PPUSH
29079: LD_INT 3
29081: PPUSH
29082: CALL_OW 272
29086: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
29087: LD_ADDR_VAR 0 8
29091: PUSH
29092: LD_VAR 0 6
29096: PPUSH
29097: LD_VAR 0 4
29101: PPUSH
29102: LD_INT 3
29104: PPUSH
29105: CALL_OW 273
29109: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29110: LD_VAR 0 7
29114: PPUSH
29115: LD_VAR 0 8
29119: PPUSH
29120: CALL_OW 488
29124: NOT
29125: IFFALSE 29129
// continue ;
29127: GO 29061
// if HexInfo ( _x , _y ) = 0 then
29129: LD_VAR 0 7
29133: PPUSH
29134: LD_VAR 0 8
29138: PPUSH
29139: CALL_OW 428
29143: PUSH
29144: LD_INT 0
29146: EQUAL
29147: IFFALSE 29172
// begin ComMoveXY ( unit , _x , _y ) ;
29149: LD_VAR 0 1
29153: PPUSH
29154: LD_VAR 0 7
29158: PPUSH
29159: LD_VAR 0 8
29163: PPUSH
29164: CALL_OW 111
// exit ;
29168: POP
29169: POP
29170: GO 29176
// end ; end ;
29172: GO 29061
29174: POP
29175: POP
// end ;
29176: LD_VAR 0 3
29180: RET
// export function ScanBase ( side , base_area ) ; begin
29181: LD_INT 0
29183: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
29184: LD_ADDR_VAR 0 3
29188: PUSH
29189: LD_VAR 0 2
29193: PPUSH
29194: LD_INT 81
29196: PUSH
29197: LD_VAR 0 1
29201: PUSH
29202: EMPTY
29203: LIST
29204: LIST
29205: PPUSH
29206: CALL_OW 70
29210: ST_TO_ADDR
// end ;
29211: LD_VAR 0 3
29215: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
29216: LD_INT 0
29218: PPUSH
29219: PPUSH
29220: PPUSH
29221: PPUSH
// result := false ;
29222: LD_ADDR_VAR 0 2
29226: PUSH
29227: LD_INT 0
29229: ST_TO_ADDR
// side := GetSide ( unit ) ;
29230: LD_ADDR_VAR 0 3
29234: PUSH
29235: LD_VAR 0 1
29239: PPUSH
29240: CALL_OW 255
29244: ST_TO_ADDR
// nat := GetNation ( unit ) ;
29245: LD_ADDR_VAR 0 4
29249: PUSH
29250: LD_VAR 0 1
29254: PPUSH
29255: CALL_OW 248
29259: ST_TO_ADDR
// case nat of 1 :
29260: LD_VAR 0 4
29264: PUSH
29265: LD_INT 1
29267: DOUBLE
29268: EQUAL
29269: IFTRUE 29273
29271: GO 29284
29273: POP
// tech := tech_lassight ; 2 :
29274: LD_ADDR_VAR 0 5
29278: PUSH
29279: LD_INT 12
29281: ST_TO_ADDR
29282: GO 29323
29284: LD_INT 2
29286: DOUBLE
29287: EQUAL
29288: IFTRUE 29292
29290: GO 29303
29292: POP
// tech := tech_mortar ; 3 :
29293: LD_ADDR_VAR 0 5
29297: PUSH
29298: LD_INT 41
29300: ST_TO_ADDR
29301: GO 29323
29303: LD_INT 3
29305: DOUBLE
29306: EQUAL
29307: IFTRUE 29311
29309: GO 29322
29311: POP
// tech := tech_bazooka ; end ;
29312: LD_ADDR_VAR 0 5
29316: PUSH
29317: LD_INT 44
29319: ST_TO_ADDR
29320: GO 29323
29322: POP
// if Researched ( side , tech ) then
29323: LD_VAR 0 3
29327: PPUSH
29328: LD_VAR 0 5
29332: PPUSH
29333: CALL_OW 325
29337: IFFALSE 29364
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
29339: LD_ADDR_VAR 0 2
29343: PUSH
29344: LD_INT 5
29346: PUSH
29347: LD_INT 8
29349: PUSH
29350: LD_INT 9
29352: PUSH
29353: EMPTY
29354: LIST
29355: LIST
29356: LIST
29357: PUSH
29358: LD_VAR 0 4
29362: ARRAY
29363: ST_TO_ADDR
// end ;
29364: LD_VAR 0 2
29368: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
29369: LD_INT 0
29371: PPUSH
29372: PPUSH
29373: PPUSH
// if not mines then
29374: LD_VAR 0 2
29378: NOT
29379: IFFALSE 29383
// exit ;
29381: GO 29527
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29383: LD_ADDR_VAR 0 5
29387: PUSH
29388: LD_INT 81
29390: PUSH
29391: LD_VAR 0 1
29395: PUSH
29396: EMPTY
29397: LIST
29398: LIST
29399: PUSH
29400: LD_INT 3
29402: PUSH
29403: LD_INT 21
29405: PUSH
29406: LD_INT 3
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: PPUSH
29421: CALL_OW 69
29425: ST_TO_ADDR
// for i in mines do
29426: LD_ADDR_VAR 0 4
29430: PUSH
29431: LD_VAR 0 2
29435: PUSH
29436: FOR_IN
29437: IFFALSE 29525
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29439: LD_VAR 0 4
29443: PUSH
29444: LD_INT 1
29446: ARRAY
29447: PPUSH
29448: LD_VAR 0 4
29452: PUSH
29453: LD_INT 2
29455: ARRAY
29456: PPUSH
29457: CALL_OW 458
29461: NOT
29462: IFFALSE 29466
// continue ;
29464: GO 29436
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29466: LD_VAR 0 4
29470: PUSH
29471: LD_INT 1
29473: ARRAY
29474: PPUSH
29475: LD_VAR 0 4
29479: PUSH
29480: LD_INT 2
29482: ARRAY
29483: PPUSH
29484: CALL_OW 428
29488: PUSH
29489: LD_VAR 0 5
29493: IN
29494: IFFALSE 29523
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29496: LD_VAR 0 4
29500: PUSH
29501: LD_INT 1
29503: ARRAY
29504: PPUSH
29505: LD_VAR 0 4
29509: PUSH
29510: LD_INT 2
29512: ARRAY
29513: PPUSH
29514: LD_VAR 0 1
29518: PPUSH
29519: CALL_OW 456
// end ;
29523: GO 29436
29525: POP
29526: POP
// end ;
29527: LD_VAR 0 3
29531: RET
// export function Count ( array ) ; begin
29532: LD_INT 0
29534: PPUSH
// result := array + 0 ;
29535: LD_ADDR_VAR 0 2
29539: PUSH
29540: LD_VAR 0 1
29544: PUSH
29545: LD_INT 0
29547: PLUS
29548: ST_TO_ADDR
// end ;
29549: LD_VAR 0 2
29553: RET
// export function IsEmpty ( building ) ; begin
29554: LD_INT 0
29556: PPUSH
// if not building then
29557: LD_VAR 0 1
29561: NOT
29562: IFFALSE 29566
// exit ;
29564: GO 29609
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29566: LD_ADDR_VAR 0 2
29570: PUSH
29571: LD_VAR 0 1
29575: PUSH
29576: LD_INT 22
29578: PUSH
29579: LD_VAR 0 1
29583: PPUSH
29584: CALL_OW 255
29588: PUSH
29589: EMPTY
29590: LIST
29591: LIST
29592: PUSH
29593: LD_INT 58
29595: PUSH
29596: EMPTY
29597: LIST
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: PPUSH
29603: CALL_OW 69
29607: IN
29608: ST_TO_ADDR
// end ;
29609: LD_VAR 0 2
29613: RET
// export function IsNotFull ( building ) ; var places ; begin
29614: LD_INT 0
29616: PPUSH
29617: PPUSH
// if not building then
29618: LD_VAR 0 1
29622: NOT
29623: IFFALSE 29627
// exit ;
29625: GO 29655
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
29627: LD_ADDR_VAR 0 2
29631: PUSH
29632: LD_VAR 0 1
29636: PPUSH
29637: LD_INT 3
29639: PUSH
29640: LD_INT 62
29642: PUSH
29643: EMPTY
29644: LIST
29645: PUSH
29646: EMPTY
29647: LIST
29648: LIST
29649: PPUSH
29650: CALL_OW 72
29654: ST_TO_ADDR
// end ;
29655: LD_VAR 0 2
29659: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29660: LD_INT 0
29662: PPUSH
29663: PPUSH
29664: PPUSH
29665: PPUSH
// tmp := [ ] ;
29666: LD_ADDR_VAR 0 3
29670: PUSH
29671: EMPTY
29672: ST_TO_ADDR
// list := [ ] ;
29673: LD_ADDR_VAR 0 5
29677: PUSH
29678: EMPTY
29679: ST_TO_ADDR
// for i = 16 to 25 do
29680: LD_ADDR_VAR 0 4
29684: PUSH
29685: DOUBLE
29686: LD_INT 16
29688: DEC
29689: ST_TO_ADDR
29690: LD_INT 25
29692: PUSH
29693: FOR_TO
29694: IFFALSE 29767
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29696: LD_ADDR_VAR 0 3
29700: PUSH
29701: LD_VAR 0 3
29705: PUSH
29706: LD_INT 22
29708: PUSH
29709: LD_VAR 0 1
29713: PPUSH
29714: CALL_OW 255
29718: PUSH
29719: EMPTY
29720: LIST
29721: LIST
29722: PUSH
29723: LD_INT 91
29725: PUSH
29726: LD_VAR 0 1
29730: PUSH
29731: LD_INT 6
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: LIST
29738: PUSH
29739: LD_INT 30
29741: PUSH
29742: LD_VAR 0 4
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: EMPTY
29752: LIST
29753: LIST
29754: LIST
29755: PUSH
29756: EMPTY
29757: LIST
29758: PPUSH
29759: CALL_OW 69
29763: ADD
29764: ST_TO_ADDR
29765: GO 29693
29767: POP
29768: POP
// for i = 1 to tmp do
29769: LD_ADDR_VAR 0 4
29773: PUSH
29774: DOUBLE
29775: LD_INT 1
29777: DEC
29778: ST_TO_ADDR
29779: LD_VAR 0 3
29783: PUSH
29784: FOR_TO
29785: IFFALSE 29873
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29787: LD_ADDR_VAR 0 5
29791: PUSH
29792: LD_VAR 0 5
29796: PUSH
29797: LD_VAR 0 3
29801: PUSH
29802: LD_VAR 0 4
29806: ARRAY
29807: PPUSH
29808: CALL_OW 266
29812: PUSH
29813: LD_VAR 0 3
29817: PUSH
29818: LD_VAR 0 4
29822: ARRAY
29823: PPUSH
29824: CALL_OW 250
29828: PUSH
29829: LD_VAR 0 3
29833: PUSH
29834: LD_VAR 0 4
29838: ARRAY
29839: PPUSH
29840: CALL_OW 251
29844: PUSH
29845: LD_VAR 0 3
29849: PUSH
29850: LD_VAR 0 4
29854: ARRAY
29855: PPUSH
29856: CALL_OW 254
29860: PUSH
29861: EMPTY
29862: LIST
29863: LIST
29864: LIST
29865: LIST
29866: PUSH
29867: EMPTY
29868: LIST
29869: ADD
29870: ST_TO_ADDR
29871: GO 29784
29873: POP
29874: POP
// result := list ;
29875: LD_ADDR_VAR 0 2
29879: PUSH
29880: LD_VAR 0 5
29884: ST_TO_ADDR
// end ;
29885: LD_VAR 0 2
29889: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29890: LD_INT 0
29892: PPUSH
29893: PPUSH
29894: PPUSH
29895: PPUSH
29896: PPUSH
29897: PPUSH
29898: PPUSH
// if not factory then
29899: LD_VAR 0 1
29903: NOT
29904: IFFALSE 29908
// exit ;
29906: GO 30501
// if control = control_apeman then
29908: LD_VAR 0 4
29912: PUSH
29913: LD_INT 5
29915: EQUAL
29916: IFFALSE 30025
// begin tmp := UnitsInside ( factory ) ;
29918: LD_ADDR_VAR 0 8
29922: PUSH
29923: LD_VAR 0 1
29927: PPUSH
29928: CALL_OW 313
29932: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29933: LD_VAR 0 8
29937: PPUSH
29938: LD_INT 25
29940: PUSH
29941: LD_INT 12
29943: PUSH
29944: EMPTY
29945: LIST
29946: LIST
29947: PPUSH
29948: CALL_OW 72
29952: NOT
29953: IFFALSE 29963
// control := control_manual ;
29955: LD_ADDR_VAR 0 4
29959: PUSH
29960: LD_INT 1
29962: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29963: LD_ADDR_VAR 0 8
29967: PUSH
29968: LD_VAR 0 1
29972: PPUSH
29973: CALL 29660 0 1
29977: ST_TO_ADDR
// if tmp then
29978: LD_VAR 0 8
29982: IFFALSE 30025
// begin for i in tmp do
29984: LD_ADDR_VAR 0 7
29988: PUSH
29989: LD_VAR 0 8
29993: PUSH
29994: FOR_IN
29995: IFFALSE 30023
// if i [ 1 ] = b_ext_radio then
29997: LD_VAR 0 7
30001: PUSH
30002: LD_INT 1
30004: ARRAY
30005: PUSH
30006: LD_INT 22
30008: EQUAL
30009: IFFALSE 30021
// begin control := control_remote ;
30011: LD_ADDR_VAR 0 4
30015: PUSH
30016: LD_INT 2
30018: ST_TO_ADDR
// break ;
30019: GO 30023
// end ;
30021: GO 29994
30023: POP
30024: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30025: LD_VAR 0 1
30029: PPUSH
30030: LD_VAR 0 2
30034: PPUSH
30035: LD_VAR 0 3
30039: PPUSH
30040: LD_VAR 0 4
30044: PPUSH
30045: LD_VAR 0 5
30049: PPUSH
30050: CALL_OW 448
30054: IFFALSE 30089
// begin result := [ chassis , engine , control , weapon ] ;
30056: LD_ADDR_VAR 0 6
30060: PUSH
30061: LD_VAR 0 2
30065: PUSH
30066: LD_VAR 0 3
30070: PUSH
30071: LD_VAR 0 4
30075: PUSH
30076: LD_VAR 0 5
30080: PUSH
30081: EMPTY
30082: LIST
30083: LIST
30084: LIST
30085: LIST
30086: ST_TO_ADDR
// exit ;
30087: GO 30501
// end ; _chassis := AvailableChassisList ( factory ) ;
30089: LD_ADDR_VAR 0 9
30093: PUSH
30094: LD_VAR 0 1
30098: PPUSH
30099: CALL_OW 475
30103: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
30104: LD_ADDR_VAR 0 11
30108: PUSH
30109: LD_VAR 0 1
30113: PPUSH
30114: CALL_OW 476
30118: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
30119: LD_ADDR_VAR 0 12
30123: PUSH
30124: LD_VAR 0 1
30128: PPUSH
30129: CALL_OW 477
30133: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
30134: LD_ADDR_VAR 0 10
30138: PUSH
30139: LD_VAR 0 1
30143: PPUSH
30144: CALL_OW 478
30148: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
30149: LD_VAR 0 9
30153: NOT
30154: PUSH
30155: LD_VAR 0 11
30159: NOT
30160: OR
30161: PUSH
30162: LD_VAR 0 12
30166: NOT
30167: OR
30168: PUSH
30169: LD_VAR 0 10
30173: NOT
30174: OR
30175: IFFALSE 30210
// begin result := [ chassis , engine , control , weapon ] ;
30177: LD_ADDR_VAR 0 6
30181: PUSH
30182: LD_VAR 0 2
30186: PUSH
30187: LD_VAR 0 3
30191: PUSH
30192: LD_VAR 0 4
30196: PUSH
30197: LD_VAR 0 5
30201: PUSH
30202: EMPTY
30203: LIST
30204: LIST
30205: LIST
30206: LIST
30207: ST_TO_ADDR
// exit ;
30208: GO 30501
// end ; if not chassis in _chassis then
30210: LD_VAR 0 2
30214: PUSH
30215: LD_VAR 0 9
30219: IN
30220: NOT
30221: IFFALSE 30247
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
30223: LD_ADDR_VAR 0 2
30227: PUSH
30228: LD_VAR 0 9
30232: PUSH
30233: LD_INT 1
30235: PPUSH
30236: LD_VAR 0 9
30240: PPUSH
30241: CALL_OW 12
30245: ARRAY
30246: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
30247: LD_VAR 0 2
30251: PPUSH
30252: LD_VAR 0 3
30256: PPUSH
30257: CALL 30506 0 2
30261: NOT
30262: IFFALSE 30321
// repeat engine := _engine [ 1 ] ;
30264: LD_ADDR_VAR 0 3
30268: PUSH
30269: LD_VAR 0 11
30273: PUSH
30274: LD_INT 1
30276: ARRAY
30277: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
30278: LD_ADDR_VAR 0 11
30282: PUSH
30283: LD_VAR 0 11
30287: PPUSH
30288: LD_INT 1
30290: PPUSH
30291: CALL_OW 3
30295: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
30296: LD_VAR 0 2
30300: PPUSH
30301: LD_VAR 0 3
30305: PPUSH
30306: CALL 30506 0 2
30310: PUSH
30311: LD_VAR 0 11
30315: PUSH
30316: EMPTY
30317: EQUAL
30318: OR
30319: IFFALSE 30264
// if not control in _control then
30321: LD_VAR 0 4
30325: PUSH
30326: LD_VAR 0 12
30330: IN
30331: NOT
30332: IFFALSE 30358
// control := _control [ rand ( 1 , _control ) ] ;
30334: LD_ADDR_VAR 0 4
30338: PUSH
30339: LD_VAR 0 12
30343: PUSH
30344: LD_INT 1
30346: PPUSH
30347: LD_VAR 0 12
30351: PPUSH
30352: CALL_OW 12
30356: ARRAY
30357: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
30358: LD_VAR 0 2
30362: PPUSH
30363: LD_VAR 0 5
30367: PPUSH
30368: CALL 30726 0 2
30372: NOT
30373: IFFALSE 30432
// repeat weapon := _weapon [ 1 ] ;
30375: LD_ADDR_VAR 0 5
30379: PUSH
30380: LD_VAR 0 10
30384: PUSH
30385: LD_INT 1
30387: ARRAY
30388: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30389: LD_ADDR_VAR 0 10
30393: PUSH
30394: LD_VAR 0 10
30398: PPUSH
30399: LD_INT 1
30401: PPUSH
30402: CALL_OW 3
30406: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30407: LD_VAR 0 2
30411: PPUSH
30412: LD_VAR 0 5
30416: PPUSH
30417: CALL 30726 0 2
30421: PUSH
30422: LD_VAR 0 10
30426: PUSH
30427: EMPTY
30428: EQUAL
30429: OR
30430: IFFALSE 30375
// result := [ ] ;
30432: LD_ADDR_VAR 0 6
30436: PUSH
30437: EMPTY
30438: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30439: LD_VAR 0 1
30443: PPUSH
30444: LD_VAR 0 2
30448: PPUSH
30449: LD_VAR 0 3
30453: PPUSH
30454: LD_VAR 0 4
30458: PPUSH
30459: LD_VAR 0 5
30463: PPUSH
30464: CALL_OW 448
30468: IFFALSE 30501
// result := [ chassis , engine , control , weapon ] ;
30470: LD_ADDR_VAR 0 6
30474: PUSH
30475: LD_VAR 0 2
30479: PUSH
30480: LD_VAR 0 3
30484: PUSH
30485: LD_VAR 0 4
30489: PUSH
30490: LD_VAR 0 5
30494: PUSH
30495: EMPTY
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: ST_TO_ADDR
// end ;
30501: LD_VAR 0 6
30505: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30506: LD_INT 0
30508: PPUSH
// if not chassis or not engine then
30509: LD_VAR 0 1
30513: NOT
30514: PUSH
30515: LD_VAR 0 2
30519: NOT
30520: OR
30521: IFFALSE 30525
// exit ;
30523: GO 30721
// case engine of engine_solar :
30525: LD_VAR 0 2
30529: PUSH
30530: LD_INT 2
30532: DOUBLE
30533: EQUAL
30534: IFTRUE 30538
30536: GO 30576
30538: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30539: LD_ADDR_VAR 0 3
30543: PUSH
30544: LD_INT 11
30546: PUSH
30547: LD_INT 12
30549: PUSH
30550: LD_INT 13
30552: PUSH
30553: LD_INT 14
30555: PUSH
30556: LD_INT 1
30558: PUSH
30559: LD_INT 2
30561: PUSH
30562: LD_INT 3
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: LIST
30569: LIST
30570: LIST
30571: LIST
30572: LIST
30573: ST_TO_ADDR
30574: GO 30705
30576: LD_INT 1
30578: DOUBLE
30579: EQUAL
30580: IFTRUE 30584
30582: GO 30646
30584: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30585: LD_ADDR_VAR 0 3
30589: PUSH
30590: LD_INT 11
30592: PUSH
30593: LD_INT 12
30595: PUSH
30596: LD_INT 13
30598: PUSH
30599: LD_INT 14
30601: PUSH
30602: LD_INT 1
30604: PUSH
30605: LD_INT 2
30607: PUSH
30608: LD_INT 3
30610: PUSH
30611: LD_INT 4
30613: PUSH
30614: LD_INT 5
30616: PUSH
30617: LD_INT 21
30619: PUSH
30620: LD_INT 23
30622: PUSH
30623: LD_INT 22
30625: PUSH
30626: LD_INT 24
30628: PUSH
30629: EMPTY
30630: LIST
30631: LIST
30632: LIST
30633: LIST
30634: LIST
30635: LIST
30636: LIST
30637: LIST
30638: LIST
30639: LIST
30640: LIST
30641: LIST
30642: LIST
30643: ST_TO_ADDR
30644: GO 30705
30646: LD_INT 3
30648: DOUBLE
30649: EQUAL
30650: IFTRUE 30654
30652: GO 30704
30654: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30655: LD_ADDR_VAR 0 3
30659: PUSH
30660: LD_INT 13
30662: PUSH
30663: LD_INT 14
30665: PUSH
30666: LD_INT 2
30668: PUSH
30669: LD_INT 3
30671: PUSH
30672: LD_INT 4
30674: PUSH
30675: LD_INT 5
30677: PUSH
30678: LD_INT 21
30680: PUSH
30681: LD_INT 22
30683: PUSH
30684: LD_INT 23
30686: PUSH
30687: LD_INT 24
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: LIST
30694: LIST
30695: LIST
30696: LIST
30697: LIST
30698: LIST
30699: LIST
30700: LIST
30701: ST_TO_ADDR
30702: GO 30705
30704: POP
// result := ( chassis in result ) ;
30705: LD_ADDR_VAR 0 3
30709: PUSH
30710: LD_VAR 0 1
30714: PUSH
30715: LD_VAR 0 3
30719: IN
30720: ST_TO_ADDR
// end ;
30721: LD_VAR 0 3
30725: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30726: LD_INT 0
30728: PPUSH
// if not chassis or not weapon then
30729: LD_VAR 0 1
30733: NOT
30734: PUSH
30735: LD_VAR 0 2
30739: NOT
30740: OR
30741: IFFALSE 30745
// exit ;
30743: GO 31805
// case weapon of us_machine_gun :
30745: LD_VAR 0 2
30749: PUSH
30750: LD_INT 2
30752: DOUBLE
30753: EQUAL
30754: IFTRUE 30758
30756: GO 30788
30758: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30759: LD_ADDR_VAR 0 3
30763: PUSH
30764: LD_INT 1
30766: PUSH
30767: LD_INT 2
30769: PUSH
30770: LD_INT 3
30772: PUSH
30773: LD_INT 4
30775: PUSH
30776: LD_INT 5
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: ST_TO_ADDR
30786: GO 31789
30788: LD_INT 3
30790: DOUBLE
30791: EQUAL
30792: IFTRUE 30796
30794: GO 30826
30796: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30797: LD_ADDR_VAR 0 3
30801: PUSH
30802: LD_INT 1
30804: PUSH
30805: LD_INT 2
30807: PUSH
30808: LD_INT 3
30810: PUSH
30811: LD_INT 4
30813: PUSH
30814: LD_INT 5
30816: PUSH
30817: EMPTY
30818: LIST
30819: LIST
30820: LIST
30821: LIST
30822: LIST
30823: ST_TO_ADDR
30824: GO 31789
30826: LD_INT 11
30828: DOUBLE
30829: EQUAL
30830: IFTRUE 30834
30832: GO 30864
30834: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30835: LD_ADDR_VAR 0 3
30839: PUSH
30840: LD_INT 1
30842: PUSH
30843: LD_INT 2
30845: PUSH
30846: LD_INT 3
30848: PUSH
30849: LD_INT 4
30851: PUSH
30852: LD_INT 5
30854: PUSH
30855: EMPTY
30856: LIST
30857: LIST
30858: LIST
30859: LIST
30860: LIST
30861: ST_TO_ADDR
30862: GO 31789
30864: LD_INT 4
30866: DOUBLE
30867: EQUAL
30868: IFTRUE 30872
30870: GO 30898
30872: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30873: LD_ADDR_VAR 0 3
30877: PUSH
30878: LD_INT 2
30880: PUSH
30881: LD_INT 3
30883: PUSH
30884: LD_INT 4
30886: PUSH
30887: LD_INT 5
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: LIST
30894: LIST
30895: ST_TO_ADDR
30896: GO 31789
30898: LD_INT 5
30900: DOUBLE
30901: EQUAL
30902: IFTRUE 30906
30904: GO 30932
30906: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30907: LD_ADDR_VAR 0 3
30911: PUSH
30912: LD_INT 2
30914: PUSH
30915: LD_INT 3
30917: PUSH
30918: LD_INT 4
30920: PUSH
30921: LD_INT 5
30923: PUSH
30924: EMPTY
30925: LIST
30926: LIST
30927: LIST
30928: LIST
30929: ST_TO_ADDR
30930: GO 31789
30932: LD_INT 9
30934: DOUBLE
30935: EQUAL
30936: IFTRUE 30940
30938: GO 30966
30940: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30941: LD_ADDR_VAR 0 3
30945: PUSH
30946: LD_INT 2
30948: PUSH
30949: LD_INT 3
30951: PUSH
30952: LD_INT 4
30954: PUSH
30955: LD_INT 5
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: LIST
30962: LIST
30963: ST_TO_ADDR
30964: GO 31789
30966: LD_INT 7
30968: DOUBLE
30969: EQUAL
30970: IFTRUE 30974
30972: GO 31000
30974: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30975: LD_ADDR_VAR 0 3
30979: PUSH
30980: LD_INT 2
30982: PUSH
30983: LD_INT 3
30985: PUSH
30986: LD_INT 4
30988: PUSH
30989: LD_INT 5
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: LIST
30996: LIST
30997: ST_TO_ADDR
30998: GO 31789
31000: LD_INT 12
31002: DOUBLE
31003: EQUAL
31004: IFTRUE 31008
31006: GO 31034
31008: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
31009: LD_ADDR_VAR 0 3
31013: PUSH
31014: LD_INT 2
31016: PUSH
31017: LD_INT 3
31019: PUSH
31020: LD_INT 4
31022: PUSH
31023: LD_INT 5
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: ST_TO_ADDR
31032: GO 31789
31034: LD_INT 13
31036: DOUBLE
31037: EQUAL
31038: IFTRUE 31042
31040: GO 31068
31042: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
31043: LD_ADDR_VAR 0 3
31047: PUSH
31048: LD_INT 2
31050: PUSH
31051: LD_INT 3
31053: PUSH
31054: LD_INT 4
31056: PUSH
31057: LD_INT 5
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: LIST
31064: LIST
31065: ST_TO_ADDR
31066: GO 31789
31068: LD_INT 14
31070: DOUBLE
31071: EQUAL
31072: IFTRUE 31076
31074: GO 31094
31076: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
31077: LD_ADDR_VAR 0 3
31081: PUSH
31082: LD_INT 4
31084: PUSH
31085: LD_INT 5
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: ST_TO_ADDR
31092: GO 31789
31094: LD_INT 6
31096: DOUBLE
31097: EQUAL
31098: IFTRUE 31102
31100: GO 31120
31102: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
31103: LD_ADDR_VAR 0 3
31107: PUSH
31108: LD_INT 4
31110: PUSH
31111: LD_INT 5
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: ST_TO_ADDR
31118: GO 31789
31120: LD_INT 10
31122: DOUBLE
31123: EQUAL
31124: IFTRUE 31128
31126: GO 31146
31128: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
31129: LD_ADDR_VAR 0 3
31133: PUSH
31134: LD_INT 4
31136: PUSH
31137: LD_INT 5
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: ST_TO_ADDR
31144: GO 31789
31146: LD_INT 22
31148: DOUBLE
31149: EQUAL
31150: IFTRUE 31154
31152: GO 31180
31154: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
31155: LD_ADDR_VAR 0 3
31159: PUSH
31160: LD_INT 11
31162: PUSH
31163: LD_INT 12
31165: PUSH
31166: LD_INT 13
31168: PUSH
31169: LD_INT 14
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: LIST
31176: LIST
31177: ST_TO_ADDR
31178: GO 31789
31180: LD_INT 23
31182: DOUBLE
31183: EQUAL
31184: IFTRUE 31188
31186: GO 31214
31188: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
31189: LD_ADDR_VAR 0 3
31193: PUSH
31194: LD_INT 11
31196: PUSH
31197: LD_INT 12
31199: PUSH
31200: LD_INT 13
31202: PUSH
31203: LD_INT 14
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: LIST
31210: LIST
31211: ST_TO_ADDR
31212: GO 31789
31214: LD_INT 24
31216: DOUBLE
31217: EQUAL
31218: IFTRUE 31222
31220: GO 31248
31222: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
31223: LD_ADDR_VAR 0 3
31227: PUSH
31228: LD_INT 11
31230: PUSH
31231: LD_INT 12
31233: PUSH
31234: LD_INT 13
31236: PUSH
31237: LD_INT 14
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: LIST
31244: LIST
31245: ST_TO_ADDR
31246: GO 31789
31248: LD_INT 30
31250: DOUBLE
31251: EQUAL
31252: IFTRUE 31256
31254: GO 31282
31256: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
31257: LD_ADDR_VAR 0 3
31261: PUSH
31262: LD_INT 11
31264: PUSH
31265: LD_INT 12
31267: PUSH
31268: LD_INT 13
31270: PUSH
31271: LD_INT 14
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: LIST
31278: LIST
31279: ST_TO_ADDR
31280: GO 31789
31282: LD_INT 25
31284: DOUBLE
31285: EQUAL
31286: IFTRUE 31290
31288: GO 31308
31290: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
31291: LD_ADDR_VAR 0 3
31295: PUSH
31296: LD_INT 13
31298: PUSH
31299: LD_INT 14
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: ST_TO_ADDR
31306: GO 31789
31308: LD_INT 27
31310: DOUBLE
31311: EQUAL
31312: IFTRUE 31316
31314: GO 31334
31316: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
31317: LD_ADDR_VAR 0 3
31321: PUSH
31322: LD_INT 13
31324: PUSH
31325: LD_INT 14
31327: PUSH
31328: EMPTY
31329: LIST
31330: LIST
31331: ST_TO_ADDR
31332: GO 31789
31334: LD_INT 92
31336: DOUBLE
31337: EQUAL
31338: IFTRUE 31342
31340: GO 31368
31342: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
31343: LD_ADDR_VAR 0 3
31347: PUSH
31348: LD_INT 11
31350: PUSH
31351: LD_INT 12
31353: PUSH
31354: LD_INT 13
31356: PUSH
31357: LD_INT 14
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: LIST
31364: LIST
31365: ST_TO_ADDR
31366: GO 31789
31368: LD_INT 28
31370: DOUBLE
31371: EQUAL
31372: IFTRUE 31376
31374: GO 31394
31376: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31377: LD_ADDR_VAR 0 3
31381: PUSH
31382: LD_INT 13
31384: PUSH
31385: LD_INT 14
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: ST_TO_ADDR
31392: GO 31789
31394: LD_INT 29
31396: DOUBLE
31397: EQUAL
31398: IFTRUE 31402
31400: GO 31420
31402: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31403: LD_ADDR_VAR 0 3
31407: PUSH
31408: LD_INT 13
31410: PUSH
31411: LD_INT 14
31413: PUSH
31414: EMPTY
31415: LIST
31416: LIST
31417: ST_TO_ADDR
31418: GO 31789
31420: LD_INT 31
31422: DOUBLE
31423: EQUAL
31424: IFTRUE 31428
31426: GO 31446
31428: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31429: LD_ADDR_VAR 0 3
31433: PUSH
31434: LD_INT 13
31436: PUSH
31437: LD_INT 14
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: ST_TO_ADDR
31444: GO 31789
31446: LD_INT 26
31448: DOUBLE
31449: EQUAL
31450: IFTRUE 31454
31452: GO 31472
31454: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31455: LD_ADDR_VAR 0 3
31459: PUSH
31460: LD_INT 13
31462: PUSH
31463: LD_INT 14
31465: PUSH
31466: EMPTY
31467: LIST
31468: LIST
31469: ST_TO_ADDR
31470: GO 31789
31472: LD_INT 42
31474: DOUBLE
31475: EQUAL
31476: IFTRUE 31480
31478: GO 31506
31480: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31481: LD_ADDR_VAR 0 3
31485: PUSH
31486: LD_INT 21
31488: PUSH
31489: LD_INT 22
31491: PUSH
31492: LD_INT 23
31494: PUSH
31495: LD_INT 24
31497: PUSH
31498: EMPTY
31499: LIST
31500: LIST
31501: LIST
31502: LIST
31503: ST_TO_ADDR
31504: GO 31789
31506: LD_INT 43
31508: DOUBLE
31509: EQUAL
31510: IFTRUE 31514
31512: GO 31540
31514: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31515: LD_ADDR_VAR 0 3
31519: PUSH
31520: LD_INT 21
31522: PUSH
31523: LD_INT 22
31525: PUSH
31526: LD_INT 23
31528: PUSH
31529: LD_INT 24
31531: PUSH
31532: EMPTY
31533: LIST
31534: LIST
31535: LIST
31536: LIST
31537: ST_TO_ADDR
31538: GO 31789
31540: LD_INT 44
31542: DOUBLE
31543: EQUAL
31544: IFTRUE 31548
31546: GO 31574
31548: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31549: LD_ADDR_VAR 0 3
31553: PUSH
31554: LD_INT 21
31556: PUSH
31557: LD_INT 22
31559: PUSH
31560: LD_INT 23
31562: PUSH
31563: LD_INT 24
31565: PUSH
31566: EMPTY
31567: LIST
31568: LIST
31569: LIST
31570: LIST
31571: ST_TO_ADDR
31572: GO 31789
31574: LD_INT 45
31576: DOUBLE
31577: EQUAL
31578: IFTRUE 31582
31580: GO 31608
31582: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31583: LD_ADDR_VAR 0 3
31587: PUSH
31588: LD_INT 21
31590: PUSH
31591: LD_INT 22
31593: PUSH
31594: LD_INT 23
31596: PUSH
31597: LD_INT 24
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: ST_TO_ADDR
31606: GO 31789
31608: LD_INT 49
31610: DOUBLE
31611: EQUAL
31612: IFTRUE 31616
31614: GO 31642
31616: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31617: LD_ADDR_VAR 0 3
31621: PUSH
31622: LD_INT 21
31624: PUSH
31625: LD_INT 22
31627: PUSH
31628: LD_INT 23
31630: PUSH
31631: LD_INT 24
31633: PUSH
31634: EMPTY
31635: LIST
31636: LIST
31637: LIST
31638: LIST
31639: ST_TO_ADDR
31640: GO 31789
31642: LD_INT 51
31644: DOUBLE
31645: EQUAL
31646: IFTRUE 31650
31648: GO 31676
31650: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31651: LD_ADDR_VAR 0 3
31655: PUSH
31656: LD_INT 21
31658: PUSH
31659: LD_INT 22
31661: PUSH
31662: LD_INT 23
31664: PUSH
31665: LD_INT 24
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: LIST
31672: LIST
31673: ST_TO_ADDR
31674: GO 31789
31676: LD_INT 52
31678: DOUBLE
31679: EQUAL
31680: IFTRUE 31684
31682: GO 31710
31684: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31685: LD_ADDR_VAR 0 3
31689: PUSH
31690: LD_INT 21
31692: PUSH
31693: LD_INT 22
31695: PUSH
31696: LD_INT 23
31698: PUSH
31699: LD_INT 24
31701: PUSH
31702: EMPTY
31703: LIST
31704: LIST
31705: LIST
31706: LIST
31707: ST_TO_ADDR
31708: GO 31789
31710: LD_INT 53
31712: DOUBLE
31713: EQUAL
31714: IFTRUE 31718
31716: GO 31736
31718: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31719: LD_ADDR_VAR 0 3
31723: PUSH
31724: LD_INT 23
31726: PUSH
31727: LD_INT 24
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: ST_TO_ADDR
31734: GO 31789
31736: LD_INT 46
31738: DOUBLE
31739: EQUAL
31740: IFTRUE 31744
31742: GO 31762
31744: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31745: LD_ADDR_VAR 0 3
31749: PUSH
31750: LD_INT 23
31752: PUSH
31753: LD_INT 24
31755: PUSH
31756: EMPTY
31757: LIST
31758: LIST
31759: ST_TO_ADDR
31760: GO 31789
31762: LD_INT 47
31764: DOUBLE
31765: EQUAL
31766: IFTRUE 31770
31768: GO 31788
31770: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31771: LD_ADDR_VAR 0 3
31775: PUSH
31776: LD_INT 23
31778: PUSH
31779: LD_INT 24
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: ST_TO_ADDR
31786: GO 31789
31788: POP
// result := ( chassis in result ) ;
31789: LD_ADDR_VAR 0 3
31793: PUSH
31794: LD_VAR 0 1
31798: PUSH
31799: LD_VAR 0 3
31803: IN
31804: ST_TO_ADDR
// end ;
31805: LD_VAR 0 3
31809: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31810: LD_INT 0
31812: PPUSH
31813: PPUSH
31814: PPUSH
31815: PPUSH
31816: PPUSH
31817: PPUSH
31818: PPUSH
// result := array ;
31819: LD_ADDR_VAR 0 5
31823: PUSH
31824: LD_VAR 0 1
31828: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31829: LD_VAR 0 1
31833: NOT
31834: PUSH
31835: LD_VAR 0 2
31839: NOT
31840: OR
31841: PUSH
31842: LD_VAR 0 3
31846: NOT
31847: OR
31848: PUSH
31849: LD_VAR 0 2
31853: PUSH
31854: LD_VAR 0 1
31858: GREATER
31859: OR
31860: PUSH
31861: LD_VAR 0 3
31865: PUSH
31866: LD_VAR 0 1
31870: GREATER
31871: OR
31872: IFFALSE 31876
// exit ;
31874: GO 32172
// if direction then
31876: LD_VAR 0 4
31880: IFFALSE 31944
// begin d := 1 ;
31882: LD_ADDR_VAR 0 9
31886: PUSH
31887: LD_INT 1
31889: ST_TO_ADDR
// if i_from > i_to then
31890: LD_VAR 0 2
31894: PUSH
31895: LD_VAR 0 3
31899: GREATER
31900: IFFALSE 31926
// length := ( array - i_from ) + i_to else
31902: LD_ADDR_VAR 0 11
31906: PUSH
31907: LD_VAR 0 1
31911: PUSH
31912: LD_VAR 0 2
31916: MINUS
31917: PUSH
31918: LD_VAR 0 3
31922: PLUS
31923: ST_TO_ADDR
31924: GO 31942
// length := i_to - i_from ;
31926: LD_ADDR_VAR 0 11
31930: PUSH
31931: LD_VAR 0 3
31935: PUSH
31936: LD_VAR 0 2
31940: MINUS
31941: ST_TO_ADDR
// end else
31942: GO 32005
// begin d := - 1 ;
31944: LD_ADDR_VAR 0 9
31948: PUSH
31949: LD_INT 1
31951: NEG
31952: ST_TO_ADDR
// if i_from > i_to then
31953: LD_VAR 0 2
31957: PUSH
31958: LD_VAR 0 3
31962: GREATER
31963: IFFALSE 31983
// length := i_from - i_to else
31965: LD_ADDR_VAR 0 11
31969: PUSH
31970: LD_VAR 0 2
31974: PUSH
31975: LD_VAR 0 3
31979: MINUS
31980: ST_TO_ADDR
31981: GO 32005
// length := ( array - i_to ) + i_from ;
31983: LD_ADDR_VAR 0 11
31987: PUSH
31988: LD_VAR 0 1
31992: PUSH
31993: LD_VAR 0 3
31997: MINUS
31998: PUSH
31999: LD_VAR 0 2
32003: PLUS
32004: ST_TO_ADDR
// end ; if not length then
32005: LD_VAR 0 11
32009: NOT
32010: IFFALSE 32014
// exit ;
32012: GO 32172
// tmp := array ;
32014: LD_ADDR_VAR 0 10
32018: PUSH
32019: LD_VAR 0 1
32023: ST_TO_ADDR
// for i = 1 to length do
32024: LD_ADDR_VAR 0 6
32028: PUSH
32029: DOUBLE
32030: LD_INT 1
32032: DEC
32033: ST_TO_ADDR
32034: LD_VAR 0 11
32038: PUSH
32039: FOR_TO
32040: IFFALSE 32160
// begin for j = 1 to array do
32042: LD_ADDR_VAR 0 7
32046: PUSH
32047: DOUBLE
32048: LD_INT 1
32050: DEC
32051: ST_TO_ADDR
32052: LD_VAR 0 1
32056: PUSH
32057: FOR_TO
32058: IFFALSE 32146
// begin k := j + d ;
32060: LD_ADDR_VAR 0 8
32064: PUSH
32065: LD_VAR 0 7
32069: PUSH
32070: LD_VAR 0 9
32074: PLUS
32075: ST_TO_ADDR
// if k > array then
32076: LD_VAR 0 8
32080: PUSH
32081: LD_VAR 0 1
32085: GREATER
32086: IFFALSE 32096
// k := 1 ;
32088: LD_ADDR_VAR 0 8
32092: PUSH
32093: LD_INT 1
32095: ST_TO_ADDR
// if not k then
32096: LD_VAR 0 8
32100: NOT
32101: IFFALSE 32113
// k := array ;
32103: LD_ADDR_VAR 0 8
32107: PUSH
32108: LD_VAR 0 1
32112: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
32113: LD_ADDR_VAR 0 10
32117: PUSH
32118: LD_VAR 0 10
32122: PPUSH
32123: LD_VAR 0 8
32127: PPUSH
32128: LD_VAR 0 1
32132: PUSH
32133: LD_VAR 0 7
32137: ARRAY
32138: PPUSH
32139: CALL_OW 1
32143: ST_TO_ADDR
// end ;
32144: GO 32057
32146: POP
32147: POP
// array := tmp ;
32148: LD_ADDR_VAR 0 1
32152: PUSH
32153: LD_VAR 0 10
32157: ST_TO_ADDR
// end ;
32158: GO 32039
32160: POP
32161: POP
// result := array ;
32162: LD_ADDR_VAR 0 5
32166: PUSH
32167: LD_VAR 0 1
32171: ST_TO_ADDR
// end ;
32172: LD_VAR 0 5
32176: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
32177: LD_INT 0
32179: PPUSH
32180: PPUSH
// result := 0 ;
32181: LD_ADDR_VAR 0 3
32185: PUSH
32186: LD_INT 0
32188: ST_TO_ADDR
// if not array or not value in array then
32189: LD_VAR 0 1
32193: NOT
32194: PUSH
32195: LD_VAR 0 2
32199: PUSH
32200: LD_VAR 0 1
32204: IN
32205: NOT
32206: OR
32207: IFFALSE 32211
// exit ;
32209: GO 32265
// for i = 1 to array do
32211: LD_ADDR_VAR 0 4
32215: PUSH
32216: DOUBLE
32217: LD_INT 1
32219: DEC
32220: ST_TO_ADDR
32221: LD_VAR 0 1
32225: PUSH
32226: FOR_TO
32227: IFFALSE 32263
// if value = array [ i ] then
32229: LD_VAR 0 2
32233: PUSH
32234: LD_VAR 0 1
32238: PUSH
32239: LD_VAR 0 4
32243: ARRAY
32244: EQUAL
32245: IFFALSE 32261
// begin result := i ;
32247: LD_ADDR_VAR 0 3
32251: PUSH
32252: LD_VAR 0 4
32256: ST_TO_ADDR
// exit ;
32257: POP
32258: POP
32259: GO 32265
// end ;
32261: GO 32226
32263: POP
32264: POP
// end ;
32265: LD_VAR 0 3
32269: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
32270: LD_INT 0
32272: PPUSH
// vc_chassis := chassis ;
32273: LD_ADDR_OWVAR 37
32277: PUSH
32278: LD_VAR 0 1
32282: ST_TO_ADDR
// vc_engine := engine ;
32283: LD_ADDR_OWVAR 39
32287: PUSH
32288: LD_VAR 0 2
32292: ST_TO_ADDR
// vc_control := control ;
32293: LD_ADDR_OWVAR 38
32297: PUSH
32298: LD_VAR 0 3
32302: ST_TO_ADDR
// vc_weapon := weapon ;
32303: LD_ADDR_OWVAR 40
32307: PUSH
32308: LD_VAR 0 4
32312: ST_TO_ADDR
// vc_fuel_battery := fuel ;
32313: LD_ADDR_OWVAR 41
32317: PUSH
32318: LD_VAR 0 5
32322: ST_TO_ADDR
// end ;
32323: LD_VAR 0 6
32327: RET
// export function WantPlant ( unit ) ; var task ; begin
32328: LD_INT 0
32330: PPUSH
32331: PPUSH
// result := false ;
32332: LD_ADDR_VAR 0 2
32336: PUSH
32337: LD_INT 0
32339: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32340: LD_ADDR_VAR 0 3
32344: PUSH
32345: LD_VAR 0 1
32349: PPUSH
32350: CALL_OW 437
32354: ST_TO_ADDR
// if task then
32355: LD_VAR 0 3
32359: IFFALSE 32387
// if task [ 1 ] [ 1 ] = p then
32361: LD_VAR 0 3
32365: PUSH
32366: LD_INT 1
32368: ARRAY
32369: PUSH
32370: LD_INT 1
32372: ARRAY
32373: PUSH
32374: LD_STRING p
32376: EQUAL
32377: IFFALSE 32387
// result := true ;
32379: LD_ADDR_VAR 0 2
32383: PUSH
32384: LD_INT 1
32386: ST_TO_ADDR
// end ;
32387: LD_VAR 0 2
32391: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32392: LD_INT 0
32394: PPUSH
32395: PPUSH
32396: PPUSH
32397: PPUSH
// if pos < 1 then
32398: LD_VAR 0 2
32402: PUSH
32403: LD_INT 1
32405: LESS
32406: IFFALSE 32410
// exit ;
32408: GO 32713
// if pos = 1 then
32410: LD_VAR 0 2
32414: PUSH
32415: LD_INT 1
32417: EQUAL
32418: IFFALSE 32451
// result := Replace ( arr , pos [ 1 ] , value ) else
32420: LD_ADDR_VAR 0 4
32424: PUSH
32425: LD_VAR 0 1
32429: PPUSH
32430: LD_VAR 0 2
32434: PUSH
32435: LD_INT 1
32437: ARRAY
32438: PPUSH
32439: LD_VAR 0 3
32443: PPUSH
32444: CALL_OW 1
32448: ST_TO_ADDR
32449: GO 32713
// begin tmp := arr ;
32451: LD_ADDR_VAR 0 6
32455: PUSH
32456: LD_VAR 0 1
32460: ST_TO_ADDR
// s_arr := [ tmp ] ;
32461: LD_ADDR_VAR 0 7
32465: PUSH
32466: LD_VAR 0 6
32470: PUSH
32471: EMPTY
32472: LIST
32473: ST_TO_ADDR
// for i = 1 to pos - 1 do
32474: LD_ADDR_VAR 0 5
32478: PUSH
32479: DOUBLE
32480: LD_INT 1
32482: DEC
32483: ST_TO_ADDR
32484: LD_VAR 0 2
32488: PUSH
32489: LD_INT 1
32491: MINUS
32492: PUSH
32493: FOR_TO
32494: IFFALSE 32539
// begin tmp := tmp [ pos [ i ] ] ;
32496: LD_ADDR_VAR 0 6
32500: PUSH
32501: LD_VAR 0 6
32505: PUSH
32506: LD_VAR 0 2
32510: PUSH
32511: LD_VAR 0 5
32515: ARRAY
32516: ARRAY
32517: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32518: LD_ADDR_VAR 0 7
32522: PUSH
32523: LD_VAR 0 7
32527: PUSH
32528: LD_VAR 0 6
32532: PUSH
32533: EMPTY
32534: LIST
32535: ADD
32536: ST_TO_ADDR
// end ;
32537: GO 32493
32539: POP
32540: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32541: LD_ADDR_VAR 0 6
32545: PUSH
32546: LD_VAR 0 6
32550: PPUSH
32551: LD_VAR 0 2
32555: PUSH
32556: LD_VAR 0 2
32560: ARRAY
32561: PPUSH
32562: LD_VAR 0 3
32566: PPUSH
32567: CALL_OW 1
32571: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32572: LD_ADDR_VAR 0 7
32576: PUSH
32577: LD_VAR 0 7
32581: PPUSH
32582: LD_VAR 0 7
32586: PPUSH
32587: LD_VAR 0 6
32591: PPUSH
32592: CALL_OW 1
32596: ST_TO_ADDR
// for i = s_arr downto 2 do
32597: LD_ADDR_VAR 0 5
32601: PUSH
32602: DOUBLE
32603: LD_VAR 0 7
32607: INC
32608: ST_TO_ADDR
32609: LD_INT 2
32611: PUSH
32612: FOR_DOWNTO
32613: IFFALSE 32697
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32615: LD_ADDR_VAR 0 6
32619: PUSH
32620: LD_VAR 0 7
32624: PUSH
32625: LD_VAR 0 5
32629: PUSH
32630: LD_INT 1
32632: MINUS
32633: ARRAY
32634: PPUSH
32635: LD_VAR 0 2
32639: PUSH
32640: LD_VAR 0 5
32644: PUSH
32645: LD_INT 1
32647: MINUS
32648: ARRAY
32649: PPUSH
32650: LD_VAR 0 7
32654: PUSH
32655: LD_VAR 0 5
32659: ARRAY
32660: PPUSH
32661: CALL_OW 1
32665: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32666: LD_ADDR_VAR 0 7
32670: PUSH
32671: LD_VAR 0 7
32675: PPUSH
32676: LD_VAR 0 5
32680: PUSH
32681: LD_INT 1
32683: MINUS
32684: PPUSH
32685: LD_VAR 0 6
32689: PPUSH
32690: CALL_OW 1
32694: ST_TO_ADDR
// end ;
32695: GO 32612
32697: POP
32698: POP
// result := s_arr [ 1 ] ;
32699: LD_ADDR_VAR 0 4
32703: PUSH
32704: LD_VAR 0 7
32708: PUSH
32709: LD_INT 1
32711: ARRAY
32712: ST_TO_ADDR
// end ; end ;
32713: LD_VAR 0 4
32717: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32718: LD_INT 0
32720: PPUSH
32721: PPUSH
// if not list then
32722: LD_VAR 0 1
32726: NOT
32727: IFFALSE 32731
// exit ;
32729: GO 32822
// i := list [ pos1 ] ;
32731: LD_ADDR_VAR 0 5
32735: PUSH
32736: LD_VAR 0 1
32740: PUSH
32741: LD_VAR 0 2
32745: ARRAY
32746: ST_TO_ADDR
// if not i then
32747: LD_VAR 0 5
32751: NOT
32752: IFFALSE 32756
// exit ;
32754: GO 32822
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32756: LD_ADDR_VAR 0 1
32760: PUSH
32761: LD_VAR 0 1
32765: PPUSH
32766: LD_VAR 0 2
32770: PPUSH
32771: LD_VAR 0 1
32775: PUSH
32776: LD_VAR 0 3
32780: ARRAY
32781: PPUSH
32782: CALL_OW 1
32786: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32787: LD_ADDR_VAR 0 1
32791: PUSH
32792: LD_VAR 0 1
32796: PPUSH
32797: LD_VAR 0 3
32801: PPUSH
32802: LD_VAR 0 5
32806: PPUSH
32807: CALL_OW 1
32811: ST_TO_ADDR
// result := list ;
32812: LD_ADDR_VAR 0 4
32816: PUSH
32817: LD_VAR 0 1
32821: ST_TO_ADDR
// end ;
32822: LD_VAR 0 4
32826: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32827: LD_INT 0
32829: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32830: LD_ADDR_VAR 0 5
32834: PUSH
32835: LD_VAR 0 1
32839: PPUSH
32840: CALL_OW 250
32844: PPUSH
32845: LD_VAR 0 1
32849: PPUSH
32850: CALL_OW 251
32854: PPUSH
32855: LD_VAR 0 2
32859: PPUSH
32860: LD_VAR 0 3
32864: PPUSH
32865: LD_VAR 0 4
32869: PPUSH
32870: CALL 33248 0 5
32874: ST_TO_ADDR
// end ;
32875: LD_VAR 0 5
32879: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
32880: LD_INT 0
32882: PPUSH
32883: PPUSH
32884: PPUSH
32885: PPUSH
// if not list or not unit then
32886: LD_VAR 0 2
32890: NOT
32891: PUSH
32892: LD_VAR 0 1
32896: NOT
32897: OR
32898: IFFALSE 32902
// exit ;
32900: GO 33243
// result := [ ] ;
32902: LD_ADDR_VAR 0 5
32906: PUSH
32907: EMPTY
32908: ST_TO_ADDR
// for i in list do
32909: LD_ADDR_VAR 0 6
32913: PUSH
32914: LD_VAR 0 2
32918: PUSH
32919: FOR_IN
32920: IFFALSE 33138
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
32922: LD_ADDR_VAR 0 8
32926: PUSH
32927: LD_VAR 0 1
32931: PPUSH
32932: LD_VAR 0 6
32936: PUSH
32937: LD_INT 1
32939: ARRAY
32940: PPUSH
32941: LD_VAR 0 6
32945: PUSH
32946: LD_INT 2
32948: ARRAY
32949: PPUSH
32950: CALL_OW 297
32954: ST_TO_ADDR
// if not Count ( result ) then
32955: LD_VAR 0 5
32959: PPUSH
32960: CALL 29532 0 1
32964: NOT
32965: IFFALSE 32998
// begin result := Join ( result , [ i , tmp ] ) ;
32967: LD_ADDR_VAR 0 5
32971: PUSH
32972: LD_VAR 0 5
32976: PPUSH
32977: LD_VAR 0 6
32981: PUSH
32982: LD_VAR 0 8
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: PPUSH
32991: CALL 65132 0 2
32995: ST_TO_ADDR
// continue ;
32996: GO 32919
// end ; if result [ result ] [ 2 ] <= tmp then
32998: LD_VAR 0 5
33002: PUSH
33003: LD_VAR 0 5
33007: ARRAY
33008: PUSH
33009: LD_INT 2
33011: ARRAY
33012: PUSH
33013: LD_VAR 0 8
33017: LESSEQUAL
33018: IFFALSE 33051
// result := Join ( result , [ i , tmp ] ) else
33020: LD_ADDR_VAR 0 5
33024: PUSH
33025: LD_VAR 0 5
33029: PPUSH
33030: LD_VAR 0 6
33034: PUSH
33035: LD_VAR 0 8
33039: PUSH
33040: EMPTY
33041: LIST
33042: LIST
33043: PPUSH
33044: CALL 65132 0 2
33048: ST_TO_ADDR
33049: GO 33136
// begin for j := 1 to Count ( result ) do
33051: LD_ADDR_VAR 0 7
33055: PUSH
33056: DOUBLE
33057: LD_INT 1
33059: DEC
33060: ST_TO_ADDR
33061: LD_VAR 0 5
33065: PPUSH
33066: CALL 29532 0 1
33070: PUSH
33071: FOR_TO
33072: IFFALSE 33134
// begin if tmp < result [ j ] [ 2 ] then
33074: LD_VAR 0 8
33078: PUSH
33079: LD_VAR 0 5
33083: PUSH
33084: LD_VAR 0 7
33088: ARRAY
33089: PUSH
33090: LD_INT 2
33092: ARRAY
33093: LESS
33094: IFFALSE 33132
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33096: LD_ADDR_VAR 0 5
33100: PUSH
33101: LD_VAR 0 5
33105: PPUSH
33106: LD_VAR 0 7
33110: PPUSH
33111: LD_VAR 0 6
33115: PUSH
33116: LD_VAR 0 8
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: PPUSH
33125: CALL_OW 2
33129: ST_TO_ADDR
// break ;
33130: GO 33134
// end ; end ;
33132: GO 33071
33134: POP
33135: POP
// end ; end ;
33136: GO 32919
33138: POP
33139: POP
// if result and not asc then
33140: LD_VAR 0 5
33144: PUSH
33145: LD_VAR 0 3
33149: NOT
33150: AND
33151: IFFALSE 33168
// result := ReverseArray ( result ) ;
33153: LD_ADDR_VAR 0 5
33157: PUSH
33158: LD_VAR 0 5
33162: PPUSH
33163: CALL 60408 0 1
33167: ST_TO_ADDR
// tmp := [ ] ;
33168: LD_ADDR_VAR 0 8
33172: PUSH
33173: EMPTY
33174: ST_TO_ADDR
// if mode then
33175: LD_VAR 0 4
33179: IFFALSE 33243
// begin for i := 1 to result do
33181: LD_ADDR_VAR 0 6
33185: PUSH
33186: DOUBLE
33187: LD_INT 1
33189: DEC
33190: ST_TO_ADDR
33191: LD_VAR 0 5
33195: PUSH
33196: FOR_TO
33197: IFFALSE 33231
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
33199: LD_ADDR_VAR 0 8
33203: PUSH
33204: LD_VAR 0 8
33208: PPUSH
33209: LD_VAR 0 5
33213: PUSH
33214: LD_VAR 0 6
33218: ARRAY
33219: PUSH
33220: LD_INT 1
33222: ARRAY
33223: PPUSH
33224: CALL 65132 0 2
33228: ST_TO_ADDR
33229: GO 33196
33231: POP
33232: POP
// result := tmp ;
33233: LD_ADDR_VAR 0 5
33237: PUSH
33238: LD_VAR 0 8
33242: ST_TO_ADDR
// end ; end ;
33243: LD_VAR 0 5
33247: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
33248: LD_INT 0
33250: PPUSH
33251: PPUSH
33252: PPUSH
33253: PPUSH
// if not list then
33254: LD_VAR 0 3
33258: NOT
33259: IFFALSE 33263
// exit ;
33261: GO 33651
// result := [ ] ;
33263: LD_ADDR_VAR 0 6
33267: PUSH
33268: EMPTY
33269: ST_TO_ADDR
// for i in list do
33270: LD_ADDR_VAR 0 7
33274: PUSH
33275: LD_VAR 0 3
33279: PUSH
33280: FOR_IN
33281: IFFALSE 33483
// begin tmp := GetDistUnitXY ( i , x , y ) ;
33283: LD_ADDR_VAR 0 9
33287: PUSH
33288: LD_VAR 0 7
33292: PPUSH
33293: LD_VAR 0 1
33297: PPUSH
33298: LD_VAR 0 2
33302: PPUSH
33303: CALL_OW 297
33307: ST_TO_ADDR
// if not result then
33308: LD_VAR 0 6
33312: NOT
33313: IFFALSE 33339
// result := [ [ i , tmp ] ] else
33315: LD_ADDR_VAR 0 6
33319: PUSH
33320: LD_VAR 0 7
33324: PUSH
33325: LD_VAR 0 9
33329: PUSH
33330: EMPTY
33331: LIST
33332: LIST
33333: PUSH
33334: EMPTY
33335: LIST
33336: ST_TO_ADDR
33337: GO 33481
// begin if result [ result ] [ 2 ] < tmp then
33339: LD_VAR 0 6
33343: PUSH
33344: LD_VAR 0 6
33348: ARRAY
33349: PUSH
33350: LD_INT 2
33352: ARRAY
33353: PUSH
33354: LD_VAR 0 9
33358: LESS
33359: IFFALSE 33401
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
33361: LD_ADDR_VAR 0 6
33365: PUSH
33366: LD_VAR 0 6
33370: PPUSH
33371: LD_VAR 0 6
33375: PUSH
33376: LD_INT 1
33378: PLUS
33379: PPUSH
33380: LD_VAR 0 7
33384: PUSH
33385: LD_VAR 0 9
33389: PUSH
33390: EMPTY
33391: LIST
33392: LIST
33393: PPUSH
33394: CALL_OW 2
33398: ST_TO_ADDR
33399: GO 33481
// for j = 1 to result do
33401: LD_ADDR_VAR 0 8
33405: PUSH
33406: DOUBLE
33407: LD_INT 1
33409: DEC
33410: ST_TO_ADDR
33411: LD_VAR 0 6
33415: PUSH
33416: FOR_TO
33417: IFFALSE 33479
// begin if tmp < result [ j ] [ 2 ] then
33419: LD_VAR 0 9
33423: PUSH
33424: LD_VAR 0 6
33428: PUSH
33429: LD_VAR 0 8
33433: ARRAY
33434: PUSH
33435: LD_INT 2
33437: ARRAY
33438: LESS
33439: IFFALSE 33477
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33441: LD_ADDR_VAR 0 6
33445: PUSH
33446: LD_VAR 0 6
33450: PPUSH
33451: LD_VAR 0 8
33455: PPUSH
33456: LD_VAR 0 7
33460: PUSH
33461: LD_VAR 0 9
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PPUSH
33470: CALL_OW 2
33474: ST_TO_ADDR
// break ;
33475: GO 33479
// end ; end ;
33477: GO 33416
33479: POP
33480: POP
// end ; end ;
33481: GO 33280
33483: POP
33484: POP
// if result and not asc then
33485: LD_VAR 0 6
33489: PUSH
33490: LD_VAR 0 4
33494: NOT
33495: AND
33496: IFFALSE 33571
// begin tmp := result ;
33498: LD_ADDR_VAR 0 9
33502: PUSH
33503: LD_VAR 0 6
33507: ST_TO_ADDR
// for i = tmp downto 1 do
33508: LD_ADDR_VAR 0 7
33512: PUSH
33513: DOUBLE
33514: LD_VAR 0 9
33518: INC
33519: ST_TO_ADDR
33520: LD_INT 1
33522: PUSH
33523: FOR_DOWNTO
33524: IFFALSE 33569
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33526: LD_ADDR_VAR 0 6
33530: PUSH
33531: LD_VAR 0 6
33535: PPUSH
33536: LD_VAR 0 9
33540: PUSH
33541: LD_VAR 0 7
33545: MINUS
33546: PUSH
33547: LD_INT 1
33549: PLUS
33550: PPUSH
33551: LD_VAR 0 9
33555: PUSH
33556: LD_VAR 0 7
33560: ARRAY
33561: PPUSH
33562: CALL_OW 1
33566: ST_TO_ADDR
33567: GO 33523
33569: POP
33570: POP
// end ; tmp := [ ] ;
33571: LD_ADDR_VAR 0 9
33575: PUSH
33576: EMPTY
33577: ST_TO_ADDR
// if mode then
33578: LD_VAR 0 5
33582: IFFALSE 33651
// begin for i = 1 to result do
33584: LD_ADDR_VAR 0 7
33588: PUSH
33589: DOUBLE
33590: LD_INT 1
33592: DEC
33593: ST_TO_ADDR
33594: LD_VAR 0 6
33598: PUSH
33599: FOR_TO
33600: IFFALSE 33639
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
33602: LD_ADDR_VAR 0 9
33606: PUSH
33607: LD_VAR 0 9
33611: PPUSH
33612: LD_VAR 0 7
33616: PPUSH
33617: LD_VAR 0 6
33621: PUSH
33622: LD_VAR 0 7
33626: ARRAY
33627: PUSH
33628: LD_INT 1
33630: ARRAY
33631: PPUSH
33632: CALL_OW 1
33636: ST_TO_ADDR
33637: GO 33599
33639: POP
33640: POP
// result := tmp ;
33641: LD_ADDR_VAR 0 6
33645: PUSH
33646: LD_VAR 0 9
33650: ST_TO_ADDR
// end ; end ;
33651: LD_VAR 0 6
33655: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33656: LD_INT 0
33658: PPUSH
33659: PPUSH
33660: PPUSH
33661: PPUSH
33662: PPUSH
33663: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
33664: LD_ADDR_VAR 0 5
33668: PUSH
33669: LD_INT 0
33671: PUSH
33672: LD_INT 0
33674: PUSH
33675: LD_INT 0
33677: PUSH
33678: EMPTY
33679: PUSH
33680: EMPTY
33681: LIST
33682: LIST
33683: LIST
33684: LIST
33685: ST_TO_ADDR
// if not x or not y then
33686: LD_VAR 0 2
33690: NOT
33691: PUSH
33692: LD_VAR 0 3
33696: NOT
33697: OR
33698: IFFALSE 33702
// exit ;
33700: GO 35352
// if not range then
33702: LD_VAR 0 4
33706: NOT
33707: IFFALSE 33717
// range := 10 ;
33709: LD_ADDR_VAR 0 4
33713: PUSH
33714: LD_INT 10
33716: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33717: LD_ADDR_VAR 0 8
33721: PUSH
33722: LD_INT 81
33724: PUSH
33725: LD_VAR 0 1
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: PUSH
33734: LD_INT 92
33736: PUSH
33737: LD_VAR 0 2
33741: PUSH
33742: LD_VAR 0 3
33746: PUSH
33747: LD_VAR 0 4
33751: PUSH
33752: EMPTY
33753: LIST
33754: LIST
33755: LIST
33756: LIST
33757: PUSH
33758: LD_INT 3
33760: PUSH
33761: LD_INT 21
33763: PUSH
33764: LD_INT 3
33766: PUSH
33767: EMPTY
33768: LIST
33769: LIST
33770: PUSH
33771: EMPTY
33772: LIST
33773: LIST
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: LIST
33779: PPUSH
33780: CALL_OW 69
33784: ST_TO_ADDR
// if not tmp then
33785: LD_VAR 0 8
33789: NOT
33790: IFFALSE 33794
// exit ;
33792: GO 35352
// for i in tmp do
33794: LD_ADDR_VAR 0 6
33798: PUSH
33799: LD_VAR 0 8
33803: PUSH
33804: FOR_IN
33805: IFFALSE 35327
// begin points := [ 0 , 0 , 0 ] ;
33807: LD_ADDR_VAR 0 9
33811: PUSH
33812: LD_INT 0
33814: PUSH
33815: LD_INT 0
33817: PUSH
33818: LD_INT 0
33820: PUSH
33821: EMPTY
33822: LIST
33823: LIST
33824: LIST
33825: ST_TO_ADDR
// bpoints := 1 ;
33826: LD_ADDR_VAR 0 10
33830: PUSH
33831: LD_INT 1
33833: ST_TO_ADDR
// case GetType ( i ) of unit_human :
33834: LD_VAR 0 6
33838: PPUSH
33839: CALL_OW 247
33843: PUSH
33844: LD_INT 1
33846: DOUBLE
33847: EQUAL
33848: IFTRUE 33852
33850: GO 34430
33852: POP
// begin if GetClass ( i ) = 1 then
33853: LD_VAR 0 6
33857: PPUSH
33858: CALL_OW 257
33862: PUSH
33863: LD_INT 1
33865: EQUAL
33866: IFFALSE 33887
// points := [ 10 , 5 , 3 ] ;
33868: LD_ADDR_VAR 0 9
33872: PUSH
33873: LD_INT 10
33875: PUSH
33876: LD_INT 5
33878: PUSH
33879: LD_INT 3
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: LIST
33886: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
33887: LD_VAR 0 6
33891: PPUSH
33892: CALL_OW 257
33896: PUSH
33897: LD_INT 2
33899: PUSH
33900: LD_INT 3
33902: PUSH
33903: LD_INT 4
33905: PUSH
33906: EMPTY
33907: LIST
33908: LIST
33909: LIST
33910: IN
33911: IFFALSE 33932
// points := [ 3 , 2 , 1 ] ;
33913: LD_ADDR_VAR 0 9
33917: PUSH
33918: LD_INT 3
33920: PUSH
33921: LD_INT 2
33923: PUSH
33924: LD_INT 1
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: LIST
33931: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33932: LD_VAR 0 6
33936: PPUSH
33937: CALL_OW 257
33941: PUSH
33942: LD_INT 5
33944: EQUAL
33945: IFFALSE 33966
// points := [ 130 , 5 , 2 ] ;
33947: LD_ADDR_VAR 0 9
33951: PUSH
33952: LD_INT 130
33954: PUSH
33955: LD_INT 5
33957: PUSH
33958: LD_INT 2
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: LIST
33965: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33966: LD_VAR 0 6
33970: PPUSH
33971: CALL_OW 257
33975: PUSH
33976: LD_INT 8
33978: EQUAL
33979: IFFALSE 34000
// points := [ 35 , 35 , 30 ] ;
33981: LD_ADDR_VAR 0 9
33985: PUSH
33986: LD_INT 35
33988: PUSH
33989: LD_INT 35
33991: PUSH
33992: LD_INT 30
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: LIST
33999: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34000: LD_VAR 0 6
34004: PPUSH
34005: CALL_OW 257
34009: PUSH
34010: LD_INT 9
34012: EQUAL
34013: IFFALSE 34034
// points := [ 20 , 55 , 40 ] ;
34015: LD_ADDR_VAR 0 9
34019: PUSH
34020: LD_INT 20
34022: PUSH
34023: LD_INT 55
34025: PUSH
34026: LD_INT 40
34028: PUSH
34029: EMPTY
34030: LIST
34031: LIST
34032: LIST
34033: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34034: LD_VAR 0 6
34038: PPUSH
34039: CALL_OW 257
34043: PUSH
34044: LD_INT 12
34046: PUSH
34047: LD_INT 16
34049: PUSH
34050: EMPTY
34051: LIST
34052: LIST
34053: IN
34054: IFFALSE 34075
// points := [ 5 , 3 , 2 ] ;
34056: LD_ADDR_VAR 0 9
34060: PUSH
34061: LD_INT 5
34063: PUSH
34064: LD_INT 3
34066: PUSH
34067: LD_INT 2
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: LIST
34074: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34075: LD_VAR 0 6
34079: PPUSH
34080: CALL_OW 257
34084: PUSH
34085: LD_INT 17
34087: EQUAL
34088: IFFALSE 34109
// points := [ 100 , 50 , 75 ] ;
34090: LD_ADDR_VAR 0 9
34094: PUSH
34095: LD_INT 100
34097: PUSH
34098: LD_INT 50
34100: PUSH
34101: LD_INT 75
34103: PUSH
34104: EMPTY
34105: LIST
34106: LIST
34107: LIST
34108: ST_TO_ADDR
// if GetClass ( i ) = 15 then
34109: LD_VAR 0 6
34113: PPUSH
34114: CALL_OW 257
34118: PUSH
34119: LD_INT 15
34121: EQUAL
34122: IFFALSE 34143
// points := [ 10 , 5 , 3 ] ;
34124: LD_ADDR_VAR 0 9
34128: PUSH
34129: LD_INT 10
34131: PUSH
34132: LD_INT 5
34134: PUSH
34135: LD_INT 3
34137: PUSH
34138: EMPTY
34139: LIST
34140: LIST
34141: LIST
34142: ST_TO_ADDR
// if GetClass ( i ) = 14 then
34143: LD_VAR 0 6
34147: PPUSH
34148: CALL_OW 257
34152: PUSH
34153: LD_INT 14
34155: EQUAL
34156: IFFALSE 34177
// points := [ 10 , 0 , 0 ] ;
34158: LD_ADDR_VAR 0 9
34162: PUSH
34163: LD_INT 10
34165: PUSH
34166: LD_INT 0
34168: PUSH
34169: LD_INT 0
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: LIST
34176: ST_TO_ADDR
// if GetClass ( i ) = 11 then
34177: LD_VAR 0 6
34181: PPUSH
34182: CALL_OW 257
34186: PUSH
34187: LD_INT 11
34189: EQUAL
34190: IFFALSE 34211
// points := [ 30 , 10 , 5 ] ;
34192: LD_ADDR_VAR 0 9
34196: PUSH
34197: LD_INT 30
34199: PUSH
34200: LD_INT 10
34202: PUSH
34203: LD_INT 5
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: LIST
34210: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
34211: LD_VAR 0 1
34215: PPUSH
34216: LD_INT 5
34218: PPUSH
34219: CALL_OW 321
34223: PUSH
34224: LD_INT 2
34226: EQUAL
34227: IFFALSE 34244
// bpoints := bpoints * 1.8 ;
34229: LD_ADDR_VAR 0 10
34233: PUSH
34234: LD_VAR 0 10
34238: PUSH
34239: LD_REAL  1.80000000000000E+0000
34242: MUL
34243: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
34244: LD_VAR 0 6
34248: PPUSH
34249: CALL_OW 257
34253: PUSH
34254: LD_INT 1
34256: PUSH
34257: LD_INT 2
34259: PUSH
34260: LD_INT 3
34262: PUSH
34263: LD_INT 4
34265: PUSH
34266: EMPTY
34267: LIST
34268: LIST
34269: LIST
34270: LIST
34271: IN
34272: PUSH
34273: LD_VAR 0 1
34277: PPUSH
34278: LD_INT 51
34280: PPUSH
34281: CALL_OW 321
34285: PUSH
34286: LD_INT 2
34288: EQUAL
34289: AND
34290: IFFALSE 34307
// bpoints := bpoints * 1.2 ;
34292: LD_ADDR_VAR 0 10
34296: PUSH
34297: LD_VAR 0 10
34301: PUSH
34302: LD_REAL  1.20000000000000E+0000
34305: MUL
34306: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
34307: LD_VAR 0 6
34311: PPUSH
34312: CALL_OW 257
34316: PUSH
34317: LD_INT 5
34319: PUSH
34320: LD_INT 7
34322: PUSH
34323: LD_INT 9
34325: PUSH
34326: EMPTY
34327: LIST
34328: LIST
34329: LIST
34330: IN
34331: PUSH
34332: LD_VAR 0 1
34336: PPUSH
34337: LD_INT 52
34339: PPUSH
34340: CALL_OW 321
34344: PUSH
34345: LD_INT 2
34347: EQUAL
34348: AND
34349: IFFALSE 34366
// bpoints := bpoints * 1.5 ;
34351: LD_ADDR_VAR 0 10
34355: PUSH
34356: LD_VAR 0 10
34360: PUSH
34361: LD_REAL  1.50000000000000E+0000
34364: MUL
34365: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
34366: LD_VAR 0 1
34370: PPUSH
34371: LD_INT 66
34373: PPUSH
34374: CALL_OW 321
34378: PUSH
34379: LD_INT 2
34381: EQUAL
34382: IFFALSE 34399
// bpoints := bpoints * 1.1 ;
34384: LD_ADDR_VAR 0 10
34388: PUSH
34389: LD_VAR 0 10
34393: PUSH
34394: LD_REAL  1.10000000000000E+0000
34397: MUL
34398: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
34399: LD_ADDR_VAR 0 10
34403: PUSH
34404: LD_VAR 0 10
34408: PUSH
34409: LD_VAR 0 6
34413: PPUSH
34414: LD_INT 1
34416: PPUSH
34417: CALL_OW 259
34421: PUSH
34422: LD_REAL  1.15000000000000E+0000
34425: MUL
34426: MUL
34427: ST_TO_ADDR
// end ; unit_vehicle :
34428: GO 35256
34430: LD_INT 2
34432: DOUBLE
34433: EQUAL
34434: IFTRUE 34438
34436: GO 35244
34438: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
34439: LD_VAR 0 6
34443: PPUSH
34444: CALL_OW 264
34448: PUSH
34449: LD_INT 2
34451: PUSH
34452: LD_INT 42
34454: PUSH
34455: LD_INT 24
34457: PUSH
34458: EMPTY
34459: LIST
34460: LIST
34461: LIST
34462: IN
34463: IFFALSE 34484
// points := [ 25 , 5 , 3 ] ;
34465: LD_ADDR_VAR 0 9
34469: PUSH
34470: LD_INT 25
34472: PUSH
34473: LD_INT 5
34475: PUSH
34476: LD_INT 3
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: LIST
34483: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34484: LD_VAR 0 6
34488: PPUSH
34489: CALL_OW 264
34493: PUSH
34494: LD_INT 4
34496: PUSH
34497: LD_INT 43
34499: PUSH
34500: LD_INT 25
34502: PUSH
34503: EMPTY
34504: LIST
34505: LIST
34506: LIST
34507: IN
34508: IFFALSE 34529
// points := [ 40 , 15 , 5 ] ;
34510: LD_ADDR_VAR 0 9
34514: PUSH
34515: LD_INT 40
34517: PUSH
34518: LD_INT 15
34520: PUSH
34521: LD_INT 5
34523: PUSH
34524: EMPTY
34525: LIST
34526: LIST
34527: LIST
34528: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34529: LD_VAR 0 6
34533: PPUSH
34534: CALL_OW 264
34538: PUSH
34539: LD_INT 3
34541: PUSH
34542: LD_INT 23
34544: PUSH
34545: EMPTY
34546: LIST
34547: LIST
34548: IN
34549: IFFALSE 34570
// points := [ 7 , 25 , 8 ] ;
34551: LD_ADDR_VAR 0 9
34555: PUSH
34556: LD_INT 7
34558: PUSH
34559: LD_INT 25
34561: PUSH
34562: LD_INT 8
34564: PUSH
34565: EMPTY
34566: LIST
34567: LIST
34568: LIST
34569: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
34570: LD_VAR 0 6
34574: PPUSH
34575: CALL_OW 264
34579: PUSH
34580: LD_INT 5
34582: PUSH
34583: LD_INT 27
34585: PUSH
34586: LD_INT 44
34588: PUSH
34589: EMPTY
34590: LIST
34591: LIST
34592: LIST
34593: IN
34594: IFFALSE 34615
// points := [ 14 , 50 , 16 ] ;
34596: LD_ADDR_VAR 0 9
34600: PUSH
34601: LD_INT 14
34603: PUSH
34604: LD_INT 50
34606: PUSH
34607: LD_INT 16
34609: PUSH
34610: EMPTY
34611: LIST
34612: LIST
34613: LIST
34614: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
34615: LD_VAR 0 6
34619: PPUSH
34620: CALL_OW 264
34624: PUSH
34625: LD_INT 6
34627: PUSH
34628: LD_INT 46
34630: PUSH
34631: EMPTY
34632: LIST
34633: LIST
34634: IN
34635: IFFALSE 34656
// points := [ 32 , 120 , 70 ] ;
34637: LD_ADDR_VAR 0 9
34641: PUSH
34642: LD_INT 32
34644: PUSH
34645: LD_INT 120
34647: PUSH
34648: LD_INT 70
34650: PUSH
34651: EMPTY
34652: LIST
34653: LIST
34654: LIST
34655: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
34656: LD_VAR 0 6
34660: PPUSH
34661: CALL_OW 264
34665: PUSH
34666: LD_INT 7
34668: PUSH
34669: LD_INT 28
34671: PUSH
34672: LD_INT 45
34674: PUSH
34675: LD_INT 92
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: LIST
34682: LIST
34683: IN
34684: IFFALSE 34705
// points := [ 35 , 20 , 45 ] ;
34686: LD_ADDR_VAR 0 9
34690: PUSH
34691: LD_INT 35
34693: PUSH
34694: LD_INT 20
34696: PUSH
34697: LD_INT 45
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: LIST
34704: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
34705: LD_VAR 0 6
34709: PPUSH
34710: CALL_OW 264
34714: PUSH
34715: LD_INT 47
34717: PUSH
34718: EMPTY
34719: LIST
34720: IN
34721: IFFALSE 34742
// points := [ 67 , 45 , 75 ] ;
34723: LD_ADDR_VAR 0 9
34727: PUSH
34728: LD_INT 67
34730: PUSH
34731: LD_INT 45
34733: PUSH
34734: LD_INT 75
34736: PUSH
34737: EMPTY
34738: LIST
34739: LIST
34740: LIST
34741: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
34742: LD_VAR 0 6
34746: PPUSH
34747: CALL_OW 264
34751: PUSH
34752: LD_INT 26
34754: PUSH
34755: EMPTY
34756: LIST
34757: IN
34758: IFFALSE 34779
// points := [ 120 , 30 , 80 ] ;
34760: LD_ADDR_VAR 0 9
34764: PUSH
34765: LD_INT 120
34767: PUSH
34768: LD_INT 30
34770: PUSH
34771: LD_INT 80
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: LIST
34778: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34779: LD_VAR 0 6
34783: PPUSH
34784: CALL_OW 264
34788: PUSH
34789: LD_INT 22
34791: PUSH
34792: EMPTY
34793: LIST
34794: IN
34795: IFFALSE 34816
// points := [ 40 , 1 , 1 ] ;
34797: LD_ADDR_VAR 0 9
34801: PUSH
34802: LD_INT 40
34804: PUSH
34805: LD_INT 1
34807: PUSH
34808: LD_INT 1
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: LIST
34815: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
34816: LD_VAR 0 6
34820: PPUSH
34821: CALL_OW 264
34825: PUSH
34826: LD_INT 29
34828: PUSH
34829: EMPTY
34830: LIST
34831: IN
34832: IFFALSE 34853
// points := [ 70 , 200 , 400 ] ;
34834: LD_ADDR_VAR 0 9
34838: PUSH
34839: LD_INT 70
34841: PUSH
34842: LD_INT 200
34844: PUSH
34845: LD_INT 400
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: LIST
34852: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
34853: LD_VAR 0 6
34857: PPUSH
34858: CALL_OW 264
34862: PUSH
34863: LD_INT 14
34865: PUSH
34866: LD_INT 53
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: IN
34873: IFFALSE 34894
// points := [ 40 , 10 , 20 ] ;
34875: LD_ADDR_VAR 0 9
34879: PUSH
34880: LD_INT 40
34882: PUSH
34883: LD_INT 10
34885: PUSH
34886: LD_INT 20
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: LIST
34893: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34894: LD_VAR 0 6
34898: PPUSH
34899: CALL_OW 264
34903: PUSH
34904: LD_INT 9
34906: PUSH
34907: EMPTY
34908: LIST
34909: IN
34910: IFFALSE 34931
// points := [ 5 , 70 , 20 ] ;
34912: LD_ADDR_VAR 0 9
34916: PUSH
34917: LD_INT 5
34919: PUSH
34920: LD_INT 70
34922: PUSH
34923: LD_INT 20
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: LIST
34930: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34931: LD_VAR 0 6
34935: PPUSH
34936: CALL_OW 264
34940: PUSH
34941: LD_INT 10
34943: PUSH
34944: EMPTY
34945: LIST
34946: IN
34947: IFFALSE 34968
// points := [ 35 , 110 , 70 ] ;
34949: LD_ADDR_VAR 0 9
34953: PUSH
34954: LD_INT 35
34956: PUSH
34957: LD_INT 110
34959: PUSH
34960: LD_INT 70
34962: PUSH
34963: EMPTY
34964: LIST
34965: LIST
34966: LIST
34967: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34968: LD_VAR 0 6
34972: PPUSH
34973: CALL_OW 265
34977: PUSH
34978: LD_INT 25
34980: EQUAL
34981: IFFALSE 35002
// points := [ 80 , 65 , 100 ] ;
34983: LD_ADDR_VAR 0 9
34987: PUSH
34988: LD_INT 80
34990: PUSH
34991: LD_INT 65
34993: PUSH
34994: LD_INT 100
34996: PUSH
34997: EMPTY
34998: LIST
34999: LIST
35000: LIST
35001: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
35002: LD_VAR 0 6
35006: PPUSH
35007: CALL_OW 263
35011: PUSH
35012: LD_INT 1
35014: EQUAL
35015: IFFALSE 35050
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
35017: LD_ADDR_VAR 0 10
35021: PUSH
35022: LD_VAR 0 10
35026: PUSH
35027: LD_VAR 0 6
35031: PPUSH
35032: CALL_OW 311
35036: PPUSH
35037: LD_INT 3
35039: PPUSH
35040: CALL_OW 259
35044: PUSH
35045: LD_INT 4
35047: MUL
35048: MUL
35049: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35050: LD_VAR 0 6
35054: PPUSH
35055: CALL_OW 263
35059: PUSH
35060: LD_INT 2
35062: EQUAL
35063: IFFALSE 35114
// begin j := IsControledBy ( i ) ;
35065: LD_ADDR_VAR 0 7
35069: PUSH
35070: LD_VAR 0 6
35074: PPUSH
35075: CALL_OW 312
35079: ST_TO_ADDR
// if j then
35080: LD_VAR 0 7
35084: IFFALSE 35114
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35086: LD_ADDR_VAR 0 10
35090: PUSH
35091: LD_VAR 0 10
35095: PUSH
35096: LD_VAR 0 7
35100: PPUSH
35101: LD_INT 3
35103: PPUSH
35104: CALL_OW 259
35108: PUSH
35109: LD_INT 3
35111: MUL
35112: MUL
35113: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
35114: LD_VAR 0 6
35118: PPUSH
35119: CALL_OW 264
35123: PUSH
35124: LD_INT 5
35126: PUSH
35127: LD_INT 6
35129: PUSH
35130: LD_INT 46
35132: PUSH
35133: LD_INT 44
35135: PUSH
35136: LD_INT 47
35138: PUSH
35139: LD_INT 45
35141: PUSH
35142: LD_INT 28
35144: PUSH
35145: LD_INT 7
35147: PUSH
35148: LD_INT 27
35150: PUSH
35151: LD_INT 29
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: LIST
35158: LIST
35159: LIST
35160: LIST
35161: LIST
35162: LIST
35163: LIST
35164: LIST
35165: IN
35166: PUSH
35167: LD_VAR 0 1
35171: PPUSH
35172: LD_INT 52
35174: PPUSH
35175: CALL_OW 321
35179: PUSH
35180: LD_INT 2
35182: EQUAL
35183: AND
35184: IFFALSE 35201
// bpoints := bpoints * 1.2 ;
35186: LD_ADDR_VAR 0 10
35190: PUSH
35191: LD_VAR 0 10
35195: PUSH
35196: LD_REAL  1.20000000000000E+0000
35199: MUL
35200: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
35201: LD_VAR 0 6
35205: PPUSH
35206: CALL_OW 264
35210: PUSH
35211: LD_INT 6
35213: PUSH
35214: LD_INT 46
35216: PUSH
35217: LD_INT 47
35219: PUSH
35220: EMPTY
35221: LIST
35222: LIST
35223: LIST
35224: IN
35225: IFFALSE 35242
// bpoints := bpoints * 1.2 ;
35227: LD_ADDR_VAR 0 10
35231: PUSH
35232: LD_VAR 0 10
35236: PUSH
35237: LD_REAL  1.20000000000000E+0000
35240: MUL
35241: ST_TO_ADDR
// end ; unit_building :
35242: GO 35256
35244: LD_INT 3
35246: DOUBLE
35247: EQUAL
35248: IFTRUE 35252
35250: GO 35255
35252: POP
// ; end ;
35253: GO 35256
35255: POP
// for j = 1 to 3 do
35256: LD_ADDR_VAR 0 7
35260: PUSH
35261: DOUBLE
35262: LD_INT 1
35264: DEC
35265: ST_TO_ADDR
35266: LD_INT 3
35268: PUSH
35269: FOR_TO
35270: IFFALSE 35323
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
35272: LD_ADDR_VAR 0 5
35276: PUSH
35277: LD_VAR 0 5
35281: PPUSH
35282: LD_VAR 0 7
35286: PPUSH
35287: LD_VAR 0 5
35291: PUSH
35292: LD_VAR 0 7
35296: ARRAY
35297: PUSH
35298: LD_VAR 0 9
35302: PUSH
35303: LD_VAR 0 7
35307: ARRAY
35308: PUSH
35309: LD_VAR 0 10
35313: MUL
35314: PLUS
35315: PPUSH
35316: CALL_OW 1
35320: ST_TO_ADDR
35321: GO 35269
35323: POP
35324: POP
// end ;
35325: GO 33804
35327: POP
35328: POP
// result := Replace ( result , 4 , tmp ) ;
35329: LD_ADDR_VAR 0 5
35333: PUSH
35334: LD_VAR 0 5
35338: PPUSH
35339: LD_INT 4
35341: PPUSH
35342: LD_VAR 0 8
35346: PPUSH
35347: CALL_OW 1
35351: ST_TO_ADDR
// end ;
35352: LD_VAR 0 5
35356: RET
// export function DangerAtRange ( unit , range ) ; begin
35357: LD_INT 0
35359: PPUSH
// if not unit then
35360: LD_VAR 0 1
35364: NOT
35365: IFFALSE 35369
// exit ;
35367: GO 35414
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
35369: LD_ADDR_VAR 0 3
35373: PUSH
35374: LD_VAR 0 1
35378: PPUSH
35379: CALL_OW 255
35383: PPUSH
35384: LD_VAR 0 1
35388: PPUSH
35389: CALL_OW 250
35393: PPUSH
35394: LD_VAR 0 1
35398: PPUSH
35399: CALL_OW 251
35403: PPUSH
35404: LD_VAR 0 2
35408: PPUSH
35409: CALL 33656 0 4
35413: ST_TO_ADDR
// end ;
35414: LD_VAR 0 3
35418: RET
// export function DangerInArea ( side , area ) ; begin
35419: LD_INT 0
35421: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
35422: LD_ADDR_VAR 0 3
35426: PUSH
35427: LD_VAR 0 2
35431: PPUSH
35432: LD_INT 81
35434: PUSH
35435: LD_VAR 0 1
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: PPUSH
35444: CALL_OW 70
35448: ST_TO_ADDR
// end ;
35449: LD_VAR 0 3
35453: RET
// export function IsExtension ( b ) ; begin
35454: LD_INT 0
35456: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
35457: LD_ADDR_VAR 0 2
35461: PUSH
35462: LD_VAR 0 1
35466: PUSH
35467: LD_INT 23
35469: PUSH
35470: LD_INT 20
35472: PUSH
35473: LD_INT 22
35475: PUSH
35476: LD_INT 17
35478: PUSH
35479: LD_INT 24
35481: PUSH
35482: LD_INT 21
35484: PUSH
35485: LD_INT 19
35487: PUSH
35488: LD_INT 16
35490: PUSH
35491: LD_INT 25
35493: PUSH
35494: LD_INT 18
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: LIST
35501: LIST
35502: LIST
35503: LIST
35504: LIST
35505: LIST
35506: LIST
35507: LIST
35508: IN
35509: ST_TO_ADDR
// end ;
35510: LD_VAR 0 2
35514: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
35515: LD_INT 0
35517: PPUSH
35518: PPUSH
35519: PPUSH
// result := [ ] ;
35520: LD_ADDR_VAR 0 4
35524: PUSH
35525: EMPTY
35526: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35527: LD_ADDR_VAR 0 5
35531: PUSH
35532: LD_VAR 0 2
35536: PPUSH
35537: LD_INT 21
35539: PUSH
35540: LD_INT 3
35542: PUSH
35543: EMPTY
35544: LIST
35545: LIST
35546: PPUSH
35547: CALL_OW 70
35551: ST_TO_ADDR
// if not tmp then
35552: LD_VAR 0 5
35556: NOT
35557: IFFALSE 35561
// exit ;
35559: GO 35625
// if checkLink then
35561: LD_VAR 0 3
35565: IFFALSE 35615
// begin for i in tmp do
35567: LD_ADDR_VAR 0 6
35571: PUSH
35572: LD_VAR 0 5
35576: PUSH
35577: FOR_IN
35578: IFFALSE 35613
// if GetBase ( i ) <> base then
35580: LD_VAR 0 6
35584: PPUSH
35585: CALL_OW 274
35589: PUSH
35590: LD_VAR 0 1
35594: NONEQUAL
35595: IFFALSE 35611
// ComLinkToBase ( base , i ) ;
35597: LD_VAR 0 1
35601: PPUSH
35602: LD_VAR 0 6
35606: PPUSH
35607: CALL_OW 169
35611: GO 35577
35613: POP
35614: POP
// end ; result := tmp ;
35615: LD_ADDR_VAR 0 4
35619: PUSH
35620: LD_VAR 0 5
35624: ST_TO_ADDR
// end ;
35625: LD_VAR 0 4
35629: RET
// export function ComComplete ( units , b ) ; var i ; begin
35630: LD_INT 0
35632: PPUSH
35633: PPUSH
// if not units then
35634: LD_VAR 0 1
35638: NOT
35639: IFFALSE 35643
// exit ;
35641: GO 35733
// for i in units do
35643: LD_ADDR_VAR 0 4
35647: PUSH
35648: LD_VAR 0 1
35652: PUSH
35653: FOR_IN
35654: IFFALSE 35731
// if BuildingStatus ( b ) = bs_build then
35656: LD_VAR 0 2
35660: PPUSH
35661: CALL_OW 461
35665: PUSH
35666: LD_INT 1
35668: EQUAL
35669: IFFALSE 35729
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
35671: LD_VAR 0 4
35675: PPUSH
35676: LD_STRING h
35678: PUSH
35679: LD_VAR 0 2
35683: PPUSH
35684: CALL_OW 250
35688: PUSH
35689: LD_VAR 0 2
35693: PPUSH
35694: CALL_OW 251
35698: PUSH
35699: LD_VAR 0 2
35703: PUSH
35704: LD_INT 0
35706: PUSH
35707: LD_INT 0
35709: PUSH
35710: LD_INT 0
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: LIST
35717: LIST
35718: LIST
35719: LIST
35720: LIST
35721: PUSH
35722: EMPTY
35723: LIST
35724: PPUSH
35725: CALL_OW 446
35729: GO 35653
35731: POP
35732: POP
// end ;
35733: LD_VAR 0 3
35737: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
35738: LD_INT 0
35740: PPUSH
35741: PPUSH
35742: PPUSH
35743: PPUSH
35744: PPUSH
35745: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
35746: LD_VAR 0 1
35750: NOT
35751: PUSH
35752: LD_VAR 0 1
35756: PPUSH
35757: CALL_OW 263
35761: PUSH
35762: LD_INT 2
35764: NONEQUAL
35765: OR
35766: IFFALSE 35770
// exit ;
35768: GO 36086
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35770: LD_ADDR_VAR 0 6
35774: PUSH
35775: LD_INT 22
35777: PUSH
35778: LD_VAR 0 1
35782: PPUSH
35783: CALL_OW 255
35787: PUSH
35788: EMPTY
35789: LIST
35790: LIST
35791: PUSH
35792: LD_INT 2
35794: PUSH
35795: LD_INT 30
35797: PUSH
35798: LD_INT 36
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: PUSH
35805: LD_INT 34
35807: PUSH
35808: LD_INT 31
35810: PUSH
35811: EMPTY
35812: LIST
35813: LIST
35814: PUSH
35815: EMPTY
35816: LIST
35817: LIST
35818: LIST
35819: PUSH
35820: EMPTY
35821: LIST
35822: LIST
35823: PPUSH
35824: CALL_OW 69
35828: ST_TO_ADDR
// if not tmp then
35829: LD_VAR 0 6
35833: NOT
35834: IFFALSE 35838
// exit ;
35836: GO 36086
// result := [ ] ;
35838: LD_ADDR_VAR 0 2
35842: PUSH
35843: EMPTY
35844: ST_TO_ADDR
// for i in tmp do
35845: LD_ADDR_VAR 0 3
35849: PUSH
35850: LD_VAR 0 6
35854: PUSH
35855: FOR_IN
35856: IFFALSE 35927
// begin t := UnitsInside ( i ) ;
35858: LD_ADDR_VAR 0 4
35862: PUSH
35863: LD_VAR 0 3
35867: PPUSH
35868: CALL_OW 313
35872: ST_TO_ADDR
// if t then
35873: LD_VAR 0 4
35877: IFFALSE 35925
// for j in t do
35879: LD_ADDR_VAR 0 7
35883: PUSH
35884: LD_VAR 0 4
35888: PUSH
35889: FOR_IN
35890: IFFALSE 35923
// result := Replace ( result , result + 1 , j ) ;
35892: LD_ADDR_VAR 0 2
35896: PUSH
35897: LD_VAR 0 2
35901: PPUSH
35902: LD_VAR 0 2
35906: PUSH
35907: LD_INT 1
35909: PLUS
35910: PPUSH
35911: LD_VAR 0 7
35915: PPUSH
35916: CALL_OW 1
35920: ST_TO_ADDR
35921: GO 35889
35923: POP
35924: POP
// end ;
35925: GO 35855
35927: POP
35928: POP
// if not result then
35929: LD_VAR 0 2
35933: NOT
35934: IFFALSE 35938
// exit ;
35936: GO 36086
// mech := result [ 1 ] ;
35938: LD_ADDR_VAR 0 5
35942: PUSH
35943: LD_VAR 0 2
35947: PUSH
35948: LD_INT 1
35950: ARRAY
35951: ST_TO_ADDR
// if result > 1 then
35952: LD_VAR 0 2
35956: PUSH
35957: LD_INT 1
35959: GREATER
35960: IFFALSE 36072
// begin for i = 2 to result do
35962: LD_ADDR_VAR 0 3
35966: PUSH
35967: DOUBLE
35968: LD_INT 2
35970: DEC
35971: ST_TO_ADDR
35972: LD_VAR 0 2
35976: PUSH
35977: FOR_TO
35978: IFFALSE 36070
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35980: LD_ADDR_VAR 0 4
35984: PUSH
35985: LD_VAR 0 2
35989: PUSH
35990: LD_VAR 0 3
35994: ARRAY
35995: PPUSH
35996: LD_INT 3
35998: PPUSH
35999: CALL_OW 259
36003: PUSH
36004: LD_VAR 0 2
36008: PUSH
36009: LD_VAR 0 3
36013: ARRAY
36014: PPUSH
36015: CALL_OW 432
36019: MINUS
36020: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
36021: LD_VAR 0 4
36025: PUSH
36026: LD_VAR 0 5
36030: PPUSH
36031: LD_INT 3
36033: PPUSH
36034: CALL_OW 259
36038: PUSH
36039: LD_VAR 0 5
36043: PPUSH
36044: CALL_OW 432
36048: MINUS
36049: GREATEREQUAL
36050: IFFALSE 36068
// mech := result [ i ] ;
36052: LD_ADDR_VAR 0 5
36056: PUSH
36057: LD_VAR 0 2
36061: PUSH
36062: LD_VAR 0 3
36066: ARRAY
36067: ST_TO_ADDR
// end ;
36068: GO 35977
36070: POP
36071: POP
// end ; ComLinkTo ( vehicle , mech ) ;
36072: LD_VAR 0 1
36076: PPUSH
36077: LD_VAR 0 5
36081: PPUSH
36082: CALL_OW 135
// end ;
36086: LD_VAR 0 2
36090: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36091: LD_INT 0
36093: PPUSH
36094: PPUSH
36095: PPUSH
36096: PPUSH
36097: PPUSH
36098: PPUSH
36099: PPUSH
36100: PPUSH
36101: PPUSH
36102: PPUSH
36103: PPUSH
36104: PPUSH
36105: PPUSH
// result := [ ] ;
36106: LD_ADDR_VAR 0 7
36110: PUSH
36111: EMPTY
36112: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
36113: LD_VAR 0 1
36117: PPUSH
36118: CALL_OW 266
36122: PUSH
36123: LD_INT 0
36125: PUSH
36126: LD_INT 1
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: IN
36133: NOT
36134: IFFALSE 36138
// exit ;
36136: GO 37772
// if name then
36138: LD_VAR 0 3
36142: IFFALSE 36158
// SetBName ( base_dep , name ) ;
36144: LD_VAR 0 1
36148: PPUSH
36149: LD_VAR 0 3
36153: PPUSH
36154: CALL_OW 500
// base := GetBase ( base_dep ) ;
36158: LD_ADDR_VAR 0 15
36162: PUSH
36163: LD_VAR 0 1
36167: PPUSH
36168: CALL_OW 274
36172: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
36173: LD_ADDR_VAR 0 16
36177: PUSH
36178: LD_VAR 0 1
36182: PPUSH
36183: CALL_OW 255
36187: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
36188: LD_ADDR_VAR 0 17
36192: PUSH
36193: LD_VAR 0 1
36197: PPUSH
36198: CALL_OW 248
36202: ST_TO_ADDR
// if sources then
36203: LD_VAR 0 5
36207: IFFALSE 36254
// for i = 1 to 3 do
36209: LD_ADDR_VAR 0 8
36213: PUSH
36214: DOUBLE
36215: LD_INT 1
36217: DEC
36218: ST_TO_ADDR
36219: LD_INT 3
36221: PUSH
36222: FOR_TO
36223: IFFALSE 36252
// AddResourceType ( base , i , sources [ i ] ) ;
36225: LD_VAR 0 15
36229: PPUSH
36230: LD_VAR 0 8
36234: PPUSH
36235: LD_VAR 0 5
36239: PUSH
36240: LD_VAR 0 8
36244: ARRAY
36245: PPUSH
36246: CALL_OW 276
36250: GO 36222
36252: POP
36253: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
36254: LD_ADDR_VAR 0 18
36258: PUSH
36259: LD_VAR 0 15
36263: PPUSH
36264: LD_VAR 0 2
36268: PPUSH
36269: LD_INT 1
36271: PPUSH
36272: CALL 35515 0 3
36276: ST_TO_ADDR
// InitHc ;
36277: CALL_OW 19
// InitUc ;
36281: CALL_OW 18
// uc_side := side ;
36285: LD_ADDR_OWVAR 20
36289: PUSH
36290: LD_VAR 0 16
36294: ST_TO_ADDR
// uc_nation := nation ;
36295: LD_ADDR_OWVAR 21
36299: PUSH
36300: LD_VAR 0 17
36304: ST_TO_ADDR
// if buildings then
36305: LD_VAR 0 18
36309: IFFALSE 37631
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
36311: LD_ADDR_VAR 0 19
36315: PUSH
36316: LD_VAR 0 18
36320: PPUSH
36321: LD_INT 2
36323: PUSH
36324: LD_INT 30
36326: PUSH
36327: LD_INT 29
36329: PUSH
36330: EMPTY
36331: LIST
36332: LIST
36333: PUSH
36334: LD_INT 30
36336: PUSH
36337: LD_INT 30
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: LIST
36348: PPUSH
36349: CALL_OW 72
36353: ST_TO_ADDR
// if tmp then
36354: LD_VAR 0 19
36358: IFFALSE 36406
// for i in tmp do
36360: LD_ADDR_VAR 0 8
36364: PUSH
36365: LD_VAR 0 19
36369: PUSH
36370: FOR_IN
36371: IFFALSE 36404
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
36373: LD_VAR 0 8
36377: PPUSH
36378: CALL_OW 250
36382: PPUSH
36383: LD_VAR 0 8
36387: PPUSH
36388: CALL_OW 251
36392: PPUSH
36393: LD_VAR 0 16
36397: PPUSH
36398: CALL_OW 441
36402: GO 36370
36404: POP
36405: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
36406: LD_VAR 0 18
36410: PPUSH
36411: LD_INT 2
36413: PUSH
36414: LD_INT 30
36416: PUSH
36417: LD_INT 32
36419: PUSH
36420: EMPTY
36421: LIST
36422: LIST
36423: PUSH
36424: LD_INT 30
36426: PUSH
36427: LD_INT 33
36429: PUSH
36430: EMPTY
36431: LIST
36432: LIST
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: LIST
36438: PPUSH
36439: CALL_OW 72
36443: IFFALSE 36531
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
36445: LD_ADDR_VAR 0 8
36449: PUSH
36450: LD_VAR 0 18
36454: PPUSH
36455: LD_INT 2
36457: PUSH
36458: LD_INT 30
36460: PUSH
36461: LD_INT 32
36463: PUSH
36464: EMPTY
36465: LIST
36466: LIST
36467: PUSH
36468: LD_INT 30
36470: PUSH
36471: LD_INT 33
36473: PUSH
36474: EMPTY
36475: LIST
36476: LIST
36477: PUSH
36478: EMPTY
36479: LIST
36480: LIST
36481: LIST
36482: PPUSH
36483: CALL_OW 72
36487: PUSH
36488: FOR_IN
36489: IFFALSE 36529
// begin if not GetBWeapon ( i ) then
36491: LD_VAR 0 8
36495: PPUSH
36496: CALL_OW 269
36500: NOT
36501: IFFALSE 36527
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36503: LD_VAR 0 8
36507: PPUSH
36508: LD_VAR 0 8
36512: PPUSH
36513: LD_VAR 0 2
36517: PPUSH
36518: CALL 37777 0 2
36522: PPUSH
36523: CALL_OW 431
// end ;
36527: GO 36488
36529: POP
36530: POP
// end ; for i = 1 to personel do
36531: LD_ADDR_VAR 0 8
36535: PUSH
36536: DOUBLE
36537: LD_INT 1
36539: DEC
36540: ST_TO_ADDR
36541: LD_VAR 0 6
36545: PUSH
36546: FOR_TO
36547: IFFALSE 37611
// begin if i > 4 then
36549: LD_VAR 0 8
36553: PUSH
36554: LD_INT 4
36556: GREATER
36557: IFFALSE 36561
// break ;
36559: GO 37611
// case i of 1 :
36561: LD_VAR 0 8
36565: PUSH
36566: LD_INT 1
36568: DOUBLE
36569: EQUAL
36570: IFTRUE 36574
36572: GO 36654
36574: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36575: LD_ADDR_VAR 0 12
36579: PUSH
36580: LD_VAR 0 18
36584: PPUSH
36585: LD_INT 22
36587: PUSH
36588: LD_VAR 0 16
36592: PUSH
36593: EMPTY
36594: LIST
36595: LIST
36596: PUSH
36597: LD_INT 58
36599: PUSH
36600: EMPTY
36601: LIST
36602: PUSH
36603: LD_INT 2
36605: PUSH
36606: LD_INT 30
36608: PUSH
36609: LD_INT 32
36611: PUSH
36612: EMPTY
36613: LIST
36614: LIST
36615: PUSH
36616: LD_INT 30
36618: PUSH
36619: LD_INT 4
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: PUSH
36626: LD_INT 30
36628: PUSH
36629: LD_INT 5
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: PUSH
36636: EMPTY
36637: LIST
36638: LIST
36639: LIST
36640: LIST
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: LIST
36646: PPUSH
36647: CALL_OW 72
36651: ST_TO_ADDR
36652: GO 36876
36654: LD_INT 2
36656: DOUBLE
36657: EQUAL
36658: IFTRUE 36662
36660: GO 36724
36662: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
36663: LD_ADDR_VAR 0 12
36667: PUSH
36668: LD_VAR 0 18
36672: PPUSH
36673: LD_INT 22
36675: PUSH
36676: LD_VAR 0 16
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: PUSH
36685: LD_INT 2
36687: PUSH
36688: LD_INT 30
36690: PUSH
36691: LD_INT 0
36693: PUSH
36694: EMPTY
36695: LIST
36696: LIST
36697: PUSH
36698: LD_INT 30
36700: PUSH
36701: LD_INT 1
36703: PUSH
36704: EMPTY
36705: LIST
36706: LIST
36707: PUSH
36708: EMPTY
36709: LIST
36710: LIST
36711: LIST
36712: PUSH
36713: EMPTY
36714: LIST
36715: LIST
36716: PPUSH
36717: CALL_OW 72
36721: ST_TO_ADDR
36722: GO 36876
36724: LD_INT 3
36726: DOUBLE
36727: EQUAL
36728: IFTRUE 36732
36730: GO 36794
36732: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
36733: LD_ADDR_VAR 0 12
36737: PUSH
36738: LD_VAR 0 18
36742: PPUSH
36743: LD_INT 22
36745: PUSH
36746: LD_VAR 0 16
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: PUSH
36755: LD_INT 2
36757: PUSH
36758: LD_INT 30
36760: PUSH
36761: LD_INT 2
36763: PUSH
36764: EMPTY
36765: LIST
36766: LIST
36767: PUSH
36768: LD_INT 30
36770: PUSH
36771: LD_INT 3
36773: PUSH
36774: EMPTY
36775: LIST
36776: LIST
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: LIST
36782: PUSH
36783: EMPTY
36784: LIST
36785: LIST
36786: PPUSH
36787: CALL_OW 72
36791: ST_TO_ADDR
36792: GO 36876
36794: LD_INT 4
36796: DOUBLE
36797: EQUAL
36798: IFTRUE 36802
36800: GO 36875
36802: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
36803: LD_ADDR_VAR 0 12
36807: PUSH
36808: LD_VAR 0 18
36812: PPUSH
36813: LD_INT 22
36815: PUSH
36816: LD_VAR 0 16
36820: PUSH
36821: EMPTY
36822: LIST
36823: LIST
36824: PUSH
36825: LD_INT 2
36827: PUSH
36828: LD_INT 30
36830: PUSH
36831: LD_INT 6
36833: PUSH
36834: EMPTY
36835: LIST
36836: LIST
36837: PUSH
36838: LD_INT 30
36840: PUSH
36841: LD_INT 7
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: PUSH
36848: LD_INT 30
36850: PUSH
36851: LD_INT 8
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: LIST
36862: LIST
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: PPUSH
36868: CALL_OW 72
36872: ST_TO_ADDR
36873: GO 36876
36875: POP
// if i = 1 then
36876: LD_VAR 0 8
36880: PUSH
36881: LD_INT 1
36883: EQUAL
36884: IFFALSE 36995
// begin tmp := [ ] ;
36886: LD_ADDR_VAR 0 19
36890: PUSH
36891: EMPTY
36892: ST_TO_ADDR
// for j in f do
36893: LD_ADDR_VAR 0 9
36897: PUSH
36898: LD_VAR 0 12
36902: PUSH
36903: FOR_IN
36904: IFFALSE 36977
// if GetBType ( j ) = b_bunker then
36906: LD_VAR 0 9
36910: PPUSH
36911: CALL_OW 266
36915: PUSH
36916: LD_INT 32
36918: EQUAL
36919: IFFALSE 36946
// tmp := Insert ( tmp , 1 , j ) else
36921: LD_ADDR_VAR 0 19
36925: PUSH
36926: LD_VAR 0 19
36930: PPUSH
36931: LD_INT 1
36933: PPUSH
36934: LD_VAR 0 9
36938: PPUSH
36939: CALL_OW 2
36943: ST_TO_ADDR
36944: GO 36975
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36946: LD_ADDR_VAR 0 19
36950: PUSH
36951: LD_VAR 0 19
36955: PPUSH
36956: LD_VAR 0 19
36960: PUSH
36961: LD_INT 1
36963: PLUS
36964: PPUSH
36965: LD_VAR 0 9
36969: PPUSH
36970: CALL_OW 2
36974: ST_TO_ADDR
36975: GO 36903
36977: POP
36978: POP
// if tmp then
36979: LD_VAR 0 19
36983: IFFALSE 36995
// f := tmp ;
36985: LD_ADDR_VAR 0 12
36989: PUSH
36990: LD_VAR 0 19
36994: ST_TO_ADDR
// end ; x := personel [ i ] ;
36995: LD_ADDR_VAR 0 13
36999: PUSH
37000: LD_VAR 0 6
37004: PUSH
37005: LD_VAR 0 8
37009: ARRAY
37010: ST_TO_ADDR
// if x = - 1 then
37011: LD_VAR 0 13
37015: PUSH
37016: LD_INT 1
37018: NEG
37019: EQUAL
37020: IFFALSE 37229
// begin for j in f do
37022: LD_ADDR_VAR 0 9
37026: PUSH
37027: LD_VAR 0 12
37031: PUSH
37032: FOR_IN
37033: IFFALSE 37225
// repeat InitHc ;
37035: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37039: LD_VAR 0 9
37043: PPUSH
37044: CALL_OW 266
37048: PUSH
37049: LD_INT 5
37051: EQUAL
37052: IFFALSE 37122
// begin if UnitsInside ( j ) < 3 then
37054: LD_VAR 0 9
37058: PPUSH
37059: CALL_OW 313
37063: PUSH
37064: LD_INT 3
37066: LESS
37067: IFFALSE 37103
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37069: LD_INT 0
37071: PPUSH
37072: LD_INT 5
37074: PUSH
37075: LD_INT 8
37077: PUSH
37078: LD_INT 9
37080: PUSH
37081: EMPTY
37082: LIST
37083: LIST
37084: LIST
37085: PUSH
37086: LD_VAR 0 17
37090: ARRAY
37091: PPUSH
37092: LD_VAR 0 4
37096: PPUSH
37097: CALL_OW 380
37101: GO 37120
// PrepareHuman ( false , i , skill ) ;
37103: LD_INT 0
37105: PPUSH
37106: LD_VAR 0 8
37110: PPUSH
37111: LD_VAR 0 4
37115: PPUSH
37116: CALL_OW 380
// end else
37120: GO 37139
// PrepareHuman ( false , i , skill ) ;
37122: LD_INT 0
37124: PPUSH
37125: LD_VAR 0 8
37129: PPUSH
37130: LD_VAR 0 4
37134: PPUSH
37135: CALL_OW 380
// un := CreateHuman ;
37139: LD_ADDR_VAR 0 14
37143: PUSH
37144: CALL_OW 44
37148: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37149: LD_ADDR_VAR 0 7
37153: PUSH
37154: LD_VAR 0 7
37158: PPUSH
37159: LD_INT 1
37161: PPUSH
37162: LD_VAR 0 14
37166: PPUSH
37167: CALL_OW 2
37171: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
37172: LD_VAR 0 14
37176: PPUSH
37177: LD_VAR 0 9
37181: PPUSH
37182: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
37186: LD_VAR 0 9
37190: PPUSH
37191: CALL_OW 313
37195: PUSH
37196: LD_INT 6
37198: EQUAL
37199: PUSH
37200: LD_VAR 0 9
37204: PPUSH
37205: CALL_OW 266
37209: PUSH
37210: LD_INT 32
37212: PUSH
37213: LD_INT 31
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: IN
37220: OR
37221: IFFALSE 37035
37223: GO 37032
37225: POP
37226: POP
// end else
37227: GO 37609
// for j = 1 to x do
37229: LD_ADDR_VAR 0 9
37233: PUSH
37234: DOUBLE
37235: LD_INT 1
37237: DEC
37238: ST_TO_ADDR
37239: LD_VAR 0 13
37243: PUSH
37244: FOR_TO
37245: IFFALSE 37607
// begin InitHc ;
37247: CALL_OW 19
// if not f then
37251: LD_VAR 0 12
37255: NOT
37256: IFFALSE 37345
// begin PrepareHuman ( false , i , skill ) ;
37258: LD_INT 0
37260: PPUSH
37261: LD_VAR 0 8
37265: PPUSH
37266: LD_VAR 0 4
37270: PPUSH
37271: CALL_OW 380
// un := CreateHuman ;
37275: LD_ADDR_VAR 0 14
37279: PUSH
37280: CALL_OW 44
37284: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37285: LD_ADDR_VAR 0 7
37289: PUSH
37290: LD_VAR 0 7
37294: PPUSH
37295: LD_INT 1
37297: PPUSH
37298: LD_VAR 0 14
37302: PPUSH
37303: CALL_OW 2
37307: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37308: LD_VAR 0 14
37312: PPUSH
37313: LD_VAR 0 1
37317: PPUSH
37318: CALL_OW 250
37322: PPUSH
37323: LD_VAR 0 1
37327: PPUSH
37328: CALL_OW 251
37332: PPUSH
37333: LD_INT 10
37335: PPUSH
37336: LD_INT 0
37338: PPUSH
37339: CALL_OW 50
// continue ;
37343: GO 37244
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
37345: LD_VAR 0 12
37349: PUSH
37350: LD_INT 1
37352: ARRAY
37353: PPUSH
37354: CALL_OW 313
37358: PUSH
37359: LD_VAR 0 12
37363: PUSH
37364: LD_INT 1
37366: ARRAY
37367: PPUSH
37368: CALL_OW 266
37372: PUSH
37373: LD_INT 32
37375: PUSH
37376: LD_INT 31
37378: PUSH
37379: EMPTY
37380: LIST
37381: LIST
37382: IN
37383: AND
37384: PUSH
37385: LD_VAR 0 12
37389: PUSH
37390: LD_INT 1
37392: ARRAY
37393: PPUSH
37394: CALL_OW 313
37398: PUSH
37399: LD_INT 6
37401: EQUAL
37402: OR
37403: IFFALSE 37423
// f := Delete ( f , 1 ) ;
37405: LD_ADDR_VAR 0 12
37409: PUSH
37410: LD_VAR 0 12
37414: PPUSH
37415: LD_INT 1
37417: PPUSH
37418: CALL_OW 3
37422: ST_TO_ADDR
// if not f then
37423: LD_VAR 0 12
37427: NOT
37428: IFFALSE 37446
// begin x := x + 2 ;
37430: LD_ADDR_VAR 0 13
37434: PUSH
37435: LD_VAR 0 13
37439: PUSH
37440: LD_INT 2
37442: PLUS
37443: ST_TO_ADDR
// continue ;
37444: GO 37244
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
37446: LD_VAR 0 12
37450: PUSH
37451: LD_INT 1
37453: ARRAY
37454: PPUSH
37455: CALL_OW 266
37459: PUSH
37460: LD_INT 5
37462: EQUAL
37463: IFFALSE 37537
// begin if UnitsInside ( f [ 1 ] ) < 3 then
37465: LD_VAR 0 12
37469: PUSH
37470: LD_INT 1
37472: ARRAY
37473: PPUSH
37474: CALL_OW 313
37478: PUSH
37479: LD_INT 3
37481: LESS
37482: IFFALSE 37518
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37484: LD_INT 0
37486: PPUSH
37487: LD_INT 5
37489: PUSH
37490: LD_INT 8
37492: PUSH
37493: LD_INT 9
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: LIST
37500: PUSH
37501: LD_VAR 0 17
37505: ARRAY
37506: PPUSH
37507: LD_VAR 0 4
37511: PPUSH
37512: CALL_OW 380
37516: GO 37535
// PrepareHuman ( false , i , skill ) ;
37518: LD_INT 0
37520: PPUSH
37521: LD_VAR 0 8
37525: PPUSH
37526: LD_VAR 0 4
37530: PPUSH
37531: CALL_OW 380
// end else
37535: GO 37554
// PrepareHuman ( false , i , skill ) ;
37537: LD_INT 0
37539: PPUSH
37540: LD_VAR 0 8
37544: PPUSH
37545: LD_VAR 0 4
37549: PPUSH
37550: CALL_OW 380
// un := CreateHuman ;
37554: LD_ADDR_VAR 0 14
37558: PUSH
37559: CALL_OW 44
37563: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37564: LD_ADDR_VAR 0 7
37568: PUSH
37569: LD_VAR 0 7
37573: PPUSH
37574: LD_INT 1
37576: PPUSH
37577: LD_VAR 0 14
37581: PPUSH
37582: CALL_OW 2
37586: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
37587: LD_VAR 0 14
37591: PPUSH
37592: LD_VAR 0 12
37596: PUSH
37597: LD_INT 1
37599: ARRAY
37600: PPUSH
37601: CALL_OW 52
// end ;
37605: GO 37244
37607: POP
37608: POP
// end ;
37609: GO 36546
37611: POP
37612: POP
// result := result ^ buildings ;
37613: LD_ADDR_VAR 0 7
37617: PUSH
37618: LD_VAR 0 7
37622: PUSH
37623: LD_VAR 0 18
37627: ADD
37628: ST_TO_ADDR
// end else
37629: GO 37772
// begin for i = 1 to personel do
37631: LD_ADDR_VAR 0 8
37635: PUSH
37636: DOUBLE
37637: LD_INT 1
37639: DEC
37640: ST_TO_ADDR
37641: LD_VAR 0 6
37645: PUSH
37646: FOR_TO
37647: IFFALSE 37770
// begin if i > 4 then
37649: LD_VAR 0 8
37653: PUSH
37654: LD_INT 4
37656: GREATER
37657: IFFALSE 37661
// break ;
37659: GO 37770
// x := personel [ i ] ;
37661: LD_ADDR_VAR 0 13
37665: PUSH
37666: LD_VAR 0 6
37670: PUSH
37671: LD_VAR 0 8
37675: ARRAY
37676: ST_TO_ADDR
// if x = - 1 then
37677: LD_VAR 0 13
37681: PUSH
37682: LD_INT 1
37684: NEG
37685: EQUAL
37686: IFFALSE 37690
// continue ;
37688: GO 37646
// PrepareHuman ( false , i , skill ) ;
37690: LD_INT 0
37692: PPUSH
37693: LD_VAR 0 8
37697: PPUSH
37698: LD_VAR 0 4
37702: PPUSH
37703: CALL_OW 380
// un := CreateHuman ;
37707: LD_ADDR_VAR 0 14
37711: PUSH
37712: CALL_OW 44
37716: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37717: LD_VAR 0 14
37721: PPUSH
37722: LD_VAR 0 1
37726: PPUSH
37727: CALL_OW 250
37731: PPUSH
37732: LD_VAR 0 1
37736: PPUSH
37737: CALL_OW 251
37741: PPUSH
37742: LD_INT 10
37744: PPUSH
37745: LD_INT 0
37747: PPUSH
37748: CALL_OW 50
// result := result ^ un ;
37752: LD_ADDR_VAR 0 7
37756: PUSH
37757: LD_VAR 0 7
37761: PUSH
37762: LD_VAR 0 14
37766: ADD
37767: ST_TO_ADDR
// end ;
37768: GO 37646
37770: POP
37771: POP
// end ; end ;
37772: LD_VAR 0 7
37776: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37777: LD_INT 0
37779: PPUSH
37780: PPUSH
37781: PPUSH
37782: PPUSH
37783: PPUSH
37784: PPUSH
37785: PPUSH
37786: PPUSH
37787: PPUSH
37788: PPUSH
37789: PPUSH
37790: PPUSH
37791: PPUSH
37792: PPUSH
37793: PPUSH
37794: PPUSH
// result := false ;
37795: LD_ADDR_VAR 0 3
37799: PUSH
37800: LD_INT 0
37802: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
37803: LD_VAR 0 1
37807: NOT
37808: PUSH
37809: LD_VAR 0 1
37813: PPUSH
37814: CALL_OW 266
37818: PUSH
37819: LD_INT 32
37821: PUSH
37822: LD_INT 33
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: IN
37829: NOT
37830: OR
37831: IFFALSE 37835
// exit ;
37833: GO 38944
// nat := GetNation ( tower ) ;
37835: LD_ADDR_VAR 0 12
37839: PUSH
37840: LD_VAR 0 1
37844: PPUSH
37845: CALL_OW 248
37849: ST_TO_ADDR
// side := GetSide ( tower ) ;
37850: LD_ADDR_VAR 0 16
37854: PUSH
37855: LD_VAR 0 1
37859: PPUSH
37860: CALL_OW 255
37864: ST_TO_ADDR
// x := GetX ( tower ) ;
37865: LD_ADDR_VAR 0 10
37869: PUSH
37870: LD_VAR 0 1
37874: PPUSH
37875: CALL_OW 250
37879: ST_TO_ADDR
// y := GetY ( tower ) ;
37880: LD_ADDR_VAR 0 11
37884: PUSH
37885: LD_VAR 0 1
37889: PPUSH
37890: CALL_OW 251
37894: ST_TO_ADDR
// if not x or not y then
37895: LD_VAR 0 10
37899: NOT
37900: PUSH
37901: LD_VAR 0 11
37905: NOT
37906: OR
37907: IFFALSE 37911
// exit ;
37909: GO 38944
// weapon := 0 ;
37911: LD_ADDR_VAR 0 18
37915: PUSH
37916: LD_INT 0
37918: ST_TO_ADDR
// fac_list := [ ] ;
37919: LD_ADDR_VAR 0 17
37923: PUSH
37924: EMPTY
37925: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
37926: LD_ADDR_VAR 0 6
37930: PUSH
37931: LD_VAR 0 1
37935: PPUSH
37936: CALL_OW 274
37940: PPUSH
37941: LD_VAR 0 2
37945: PPUSH
37946: LD_INT 0
37948: PPUSH
37949: CALL 35515 0 3
37953: PPUSH
37954: LD_INT 30
37956: PUSH
37957: LD_INT 3
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: PPUSH
37964: CALL_OW 72
37968: ST_TO_ADDR
// if not factories then
37969: LD_VAR 0 6
37973: NOT
37974: IFFALSE 37978
// exit ;
37976: GO 38944
// for i in factories do
37978: LD_ADDR_VAR 0 8
37982: PUSH
37983: LD_VAR 0 6
37987: PUSH
37988: FOR_IN
37989: IFFALSE 38014
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37991: LD_ADDR_VAR 0 17
37995: PUSH
37996: LD_VAR 0 17
38000: PUSH
38001: LD_VAR 0 8
38005: PPUSH
38006: CALL_OW 478
38010: UNION
38011: ST_TO_ADDR
38012: GO 37988
38014: POP
38015: POP
// if not fac_list then
38016: LD_VAR 0 17
38020: NOT
38021: IFFALSE 38025
// exit ;
38023: GO 38944
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
38025: LD_ADDR_VAR 0 5
38029: PUSH
38030: LD_INT 4
38032: PUSH
38033: LD_INT 5
38035: PUSH
38036: LD_INT 9
38038: PUSH
38039: LD_INT 10
38041: PUSH
38042: LD_INT 6
38044: PUSH
38045: LD_INT 7
38047: PUSH
38048: LD_INT 11
38050: PUSH
38051: EMPTY
38052: LIST
38053: LIST
38054: LIST
38055: LIST
38056: LIST
38057: LIST
38058: LIST
38059: PUSH
38060: LD_INT 27
38062: PUSH
38063: LD_INT 28
38065: PUSH
38066: LD_INT 26
38068: PUSH
38069: LD_INT 30
38071: PUSH
38072: EMPTY
38073: LIST
38074: LIST
38075: LIST
38076: LIST
38077: PUSH
38078: LD_INT 43
38080: PUSH
38081: LD_INT 44
38083: PUSH
38084: LD_INT 46
38086: PUSH
38087: LD_INT 45
38089: PUSH
38090: LD_INT 47
38092: PUSH
38093: LD_INT 49
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: LIST
38100: LIST
38101: LIST
38102: LIST
38103: PUSH
38104: EMPTY
38105: LIST
38106: LIST
38107: LIST
38108: PUSH
38109: LD_VAR 0 12
38113: ARRAY
38114: ST_TO_ADDR
// list := list isect fac_list ;
38115: LD_ADDR_VAR 0 5
38119: PUSH
38120: LD_VAR 0 5
38124: PUSH
38125: LD_VAR 0 17
38129: ISECT
38130: ST_TO_ADDR
// if not list then
38131: LD_VAR 0 5
38135: NOT
38136: IFFALSE 38140
// exit ;
38138: GO 38944
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
38140: LD_VAR 0 12
38144: PUSH
38145: LD_INT 3
38147: EQUAL
38148: PUSH
38149: LD_INT 49
38151: PUSH
38152: LD_VAR 0 5
38156: IN
38157: AND
38158: PUSH
38159: LD_INT 31
38161: PPUSH
38162: LD_VAR 0 16
38166: PPUSH
38167: CALL_OW 321
38171: PUSH
38172: LD_INT 2
38174: EQUAL
38175: AND
38176: IFFALSE 38236
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
38178: LD_INT 22
38180: PUSH
38181: LD_VAR 0 16
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: PUSH
38190: LD_INT 35
38192: PUSH
38193: LD_INT 49
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: PUSH
38200: LD_INT 91
38202: PUSH
38203: LD_VAR 0 1
38207: PUSH
38208: LD_INT 10
38210: PUSH
38211: EMPTY
38212: LIST
38213: LIST
38214: LIST
38215: PUSH
38216: EMPTY
38217: LIST
38218: LIST
38219: LIST
38220: PPUSH
38221: CALL_OW 69
38225: NOT
38226: IFFALSE 38236
// weapon := ru_time_lapser ;
38228: LD_ADDR_VAR 0 18
38232: PUSH
38233: LD_INT 49
38235: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
38236: LD_VAR 0 12
38240: PUSH
38241: LD_INT 1
38243: PUSH
38244: LD_INT 2
38246: PUSH
38247: EMPTY
38248: LIST
38249: LIST
38250: IN
38251: PUSH
38252: LD_INT 11
38254: PUSH
38255: LD_VAR 0 5
38259: IN
38260: PUSH
38261: LD_INT 30
38263: PUSH
38264: LD_VAR 0 5
38268: IN
38269: OR
38270: AND
38271: PUSH
38272: LD_INT 6
38274: PPUSH
38275: LD_VAR 0 16
38279: PPUSH
38280: CALL_OW 321
38284: PUSH
38285: LD_INT 2
38287: EQUAL
38288: AND
38289: IFFALSE 38454
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
38291: LD_INT 22
38293: PUSH
38294: LD_VAR 0 16
38298: PUSH
38299: EMPTY
38300: LIST
38301: LIST
38302: PUSH
38303: LD_INT 2
38305: PUSH
38306: LD_INT 35
38308: PUSH
38309: LD_INT 11
38311: PUSH
38312: EMPTY
38313: LIST
38314: LIST
38315: PUSH
38316: LD_INT 35
38318: PUSH
38319: LD_INT 30
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: LIST
38330: PUSH
38331: LD_INT 91
38333: PUSH
38334: LD_VAR 0 1
38338: PUSH
38339: LD_INT 18
38341: PUSH
38342: EMPTY
38343: LIST
38344: LIST
38345: LIST
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: LIST
38351: PPUSH
38352: CALL_OW 69
38356: NOT
38357: PUSH
38358: LD_INT 22
38360: PUSH
38361: LD_VAR 0 16
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: PUSH
38370: LD_INT 2
38372: PUSH
38373: LD_INT 30
38375: PUSH
38376: LD_INT 32
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: LD_INT 30
38385: PUSH
38386: LD_INT 33
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PUSH
38393: EMPTY
38394: LIST
38395: LIST
38396: LIST
38397: PUSH
38398: LD_INT 91
38400: PUSH
38401: LD_VAR 0 1
38405: PUSH
38406: LD_INT 12
38408: PUSH
38409: EMPTY
38410: LIST
38411: LIST
38412: LIST
38413: PUSH
38414: EMPTY
38415: LIST
38416: LIST
38417: LIST
38418: PUSH
38419: EMPTY
38420: LIST
38421: PPUSH
38422: CALL_OW 69
38426: PUSH
38427: LD_INT 2
38429: GREATER
38430: AND
38431: IFFALSE 38454
// weapon := [ us_radar , ar_radar ] [ nat ] ;
38433: LD_ADDR_VAR 0 18
38437: PUSH
38438: LD_INT 11
38440: PUSH
38441: LD_INT 30
38443: PUSH
38444: EMPTY
38445: LIST
38446: LIST
38447: PUSH
38448: LD_VAR 0 12
38452: ARRAY
38453: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
38454: LD_VAR 0 18
38458: NOT
38459: PUSH
38460: LD_INT 40
38462: PPUSH
38463: LD_VAR 0 16
38467: PPUSH
38468: CALL_OW 321
38472: PUSH
38473: LD_INT 2
38475: EQUAL
38476: AND
38477: PUSH
38478: LD_INT 7
38480: PUSH
38481: LD_VAR 0 5
38485: IN
38486: PUSH
38487: LD_INT 28
38489: PUSH
38490: LD_VAR 0 5
38494: IN
38495: OR
38496: PUSH
38497: LD_INT 45
38499: PUSH
38500: LD_VAR 0 5
38504: IN
38505: OR
38506: AND
38507: IFFALSE 38761
// begin hex := GetHexInfo ( x , y ) ;
38509: LD_ADDR_VAR 0 4
38513: PUSH
38514: LD_VAR 0 10
38518: PPUSH
38519: LD_VAR 0 11
38523: PPUSH
38524: CALL_OW 546
38528: ST_TO_ADDR
// if hex [ 1 ] then
38529: LD_VAR 0 4
38533: PUSH
38534: LD_INT 1
38536: ARRAY
38537: IFFALSE 38541
// exit ;
38539: GO 38944
// height := hex [ 2 ] ;
38541: LD_ADDR_VAR 0 15
38545: PUSH
38546: LD_VAR 0 4
38550: PUSH
38551: LD_INT 2
38553: ARRAY
38554: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
38555: LD_ADDR_VAR 0 14
38559: PUSH
38560: LD_INT 0
38562: PUSH
38563: LD_INT 2
38565: PUSH
38566: LD_INT 3
38568: PUSH
38569: LD_INT 5
38571: PUSH
38572: EMPTY
38573: LIST
38574: LIST
38575: LIST
38576: LIST
38577: ST_TO_ADDR
// for i in tmp do
38578: LD_ADDR_VAR 0 8
38582: PUSH
38583: LD_VAR 0 14
38587: PUSH
38588: FOR_IN
38589: IFFALSE 38759
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
38591: LD_ADDR_VAR 0 9
38595: PUSH
38596: LD_VAR 0 10
38600: PPUSH
38601: LD_VAR 0 8
38605: PPUSH
38606: LD_INT 5
38608: PPUSH
38609: CALL_OW 272
38613: PUSH
38614: LD_VAR 0 11
38618: PPUSH
38619: LD_VAR 0 8
38623: PPUSH
38624: LD_INT 5
38626: PPUSH
38627: CALL_OW 273
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
38636: LD_VAR 0 9
38640: PUSH
38641: LD_INT 1
38643: ARRAY
38644: PPUSH
38645: LD_VAR 0 9
38649: PUSH
38650: LD_INT 2
38652: ARRAY
38653: PPUSH
38654: CALL_OW 488
38658: IFFALSE 38757
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38660: LD_ADDR_VAR 0 4
38664: PUSH
38665: LD_VAR 0 9
38669: PUSH
38670: LD_INT 1
38672: ARRAY
38673: PPUSH
38674: LD_VAR 0 9
38678: PUSH
38679: LD_INT 2
38681: ARRAY
38682: PPUSH
38683: CALL_OW 546
38687: ST_TO_ADDR
// if hex [ 1 ] then
38688: LD_VAR 0 4
38692: PUSH
38693: LD_INT 1
38695: ARRAY
38696: IFFALSE 38700
// continue ;
38698: GO 38588
// h := hex [ 2 ] ;
38700: LD_ADDR_VAR 0 13
38704: PUSH
38705: LD_VAR 0 4
38709: PUSH
38710: LD_INT 2
38712: ARRAY
38713: ST_TO_ADDR
// if h + 7 < height then
38714: LD_VAR 0 13
38718: PUSH
38719: LD_INT 7
38721: PLUS
38722: PUSH
38723: LD_VAR 0 15
38727: LESS
38728: IFFALSE 38757
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
38730: LD_ADDR_VAR 0 18
38734: PUSH
38735: LD_INT 7
38737: PUSH
38738: LD_INT 28
38740: PUSH
38741: LD_INT 45
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: LIST
38748: PUSH
38749: LD_VAR 0 12
38753: ARRAY
38754: ST_TO_ADDR
// break ;
38755: GO 38759
// end ; end ; end ;
38757: GO 38588
38759: POP
38760: POP
// end ; if not weapon then
38761: LD_VAR 0 18
38765: NOT
38766: IFFALSE 38826
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
38768: LD_ADDR_VAR 0 5
38772: PUSH
38773: LD_VAR 0 5
38777: PUSH
38778: LD_INT 11
38780: PUSH
38781: LD_INT 30
38783: PUSH
38784: LD_INT 49
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: LIST
38791: DIFF
38792: ST_TO_ADDR
// if not list then
38793: LD_VAR 0 5
38797: NOT
38798: IFFALSE 38802
// exit ;
38800: GO 38944
// weapon := list [ rand ( 1 , list ) ] ;
38802: LD_ADDR_VAR 0 18
38806: PUSH
38807: LD_VAR 0 5
38811: PUSH
38812: LD_INT 1
38814: PPUSH
38815: LD_VAR 0 5
38819: PPUSH
38820: CALL_OW 12
38824: ARRAY
38825: ST_TO_ADDR
// end ; if weapon then
38826: LD_VAR 0 18
38830: IFFALSE 38944
// begin tmp := CostOfWeapon ( weapon ) ;
38832: LD_ADDR_VAR 0 14
38836: PUSH
38837: LD_VAR 0 18
38841: PPUSH
38842: CALL_OW 451
38846: ST_TO_ADDR
// j := GetBase ( tower ) ;
38847: LD_ADDR_VAR 0 9
38851: PUSH
38852: LD_VAR 0 1
38856: PPUSH
38857: CALL_OW 274
38861: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
38862: LD_VAR 0 9
38866: PPUSH
38867: LD_INT 1
38869: PPUSH
38870: CALL_OW 275
38874: PUSH
38875: LD_VAR 0 14
38879: PUSH
38880: LD_INT 1
38882: ARRAY
38883: GREATEREQUAL
38884: PUSH
38885: LD_VAR 0 9
38889: PPUSH
38890: LD_INT 2
38892: PPUSH
38893: CALL_OW 275
38897: PUSH
38898: LD_VAR 0 14
38902: PUSH
38903: LD_INT 2
38905: ARRAY
38906: GREATEREQUAL
38907: AND
38908: PUSH
38909: LD_VAR 0 9
38913: PPUSH
38914: LD_INT 3
38916: PPUSH
38917: CALL_OW 275
38921: PUSH
38922: LD_VAR 0 14
38926: PUSH
38927: LD_INT 3
38929: ARRAY
38930: GREATEREQUAL
38931: AND
38932: IFFALSE 38944
// result := weapon ;
38934: LD_ADDR_VAR 0 3
38938: PUSH
38939: LD_VAR 0 18
38943: ST_TO_ADDR
// end ; end ;
38944: LD_VAR 0 3
38948: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38949: LD_INT 0
38951: PPUSH
38952: PPUSH
// result := true ;
38953: LD_ADDR_VAR 0 3
38957: PUSH
38958: LD_INT 1
38960: ST_TO_ADDR
// if array1 = array2 then
38961: LD_VAR 0 1
38965: PUSH
38966: LD_VAR 0 2
38970: EQUAL
38971: IFFALSE 39031
// begin for i = 1 to array1 do
38973: LD_ADDR_VAR 0 4
38977: PUSH
38978: DOUBLE
38979: LD_INT 1
38981: DEC
38982: ST_TO_ADDR
38983: LD_VAR 0 1
38987: PUSH
38988: FOR_TO
38989: IFFALSE 39027
// if array1 [ i ] <> array2 [ i ] then
38991: LD_VAR 0 1
38995: PUSH
38996: LD_VAR 0 4
39000: ARRAY
39001: PUSH
39002: LD_VAR 0 2
39006: PUSH
39007: LD_VAR 0 4
39011: ARRAY
39012: NONEQUAL
39013: IFFALSE 39025
// begin result := false ;
39015: LD_ADDR_VAR 0 3
39019: PUSH
39020: LD_INT 0
39022: ST_TO_ADDR
// break ;
39023: GO 39027
// end ;
39025: GO 38988
39027: POP
39028: POP
// end else
39029: GO 39039
// result := false ;
39031: LD_ADDR_VAR 0 3
39035: PUSH
39036: LD_INT 0
39038: ST_TO_ADDR
// end ;
39039: LD_VAR 0 3
39043: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
39044: LD_INT 0
39046: PPUSH
39047: PPUSH
// if not array1 or not array2 then
39048: LD_VAR 0 1
39052: NOT
39053: PUSH
39054: LD_VAR 0 2
39058: NOT
39059: OR
39060: IFFALSE 39064
// exit ;
39062: GO 39128
// result := true ;
39064: LD_ADDR_VAR 0 3
39068: PUSH
39069: LD_INT 1
39071: ST_TO_ADDR
// for i = 1 to array1 do
39072: LD_ADDR_VAR 0 4
39076: PUSH
39077: DOUBLE
39078: LD_INT 1
39080: DEC
39081: ST_TO_ADDR
39082: LD_VAR 0 1
39086: PUSH
39087: FOR_TO
39088: IFFALSE 39126
// if array1 [ i ] <> array2 [ i ] then
39090: LD_VAR 0 1
39094: PUSH
39095: LD_VAR 0 4
39099: ARRAY
39100: PUSH
39101: LD_VAR 0 2
39105: PUSH
39106: LD_VAR 0 4
39110: ARRAY
39111: NONEQUAL
39112: IFFALSE 39124
// begin result := false ;
39114: LD_ADDR_VAR 0 3
39118: PUSH
39119: LD_INT 0
39121: ST_TO_ADDR
// break ;
39122: GO 39126
// end ;
39124: GO 39087
39126: POP
39127: POP
// end ;
39128: LD_VAR 0 3
39132: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
39133: LD_INT 0
39135: PPUSH
39136: PPUSH
39137: PPUSH
// pom := GetBase ( fac ) ;
39138: LD_ADDR_VAR 0 5
39142: PUSH
39143: LD_VAR 0 1
39147: PPUSH
39148: CALL_OW 274
39152: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
39153: LD_ADDR_VAR 0 4
39157: PUSH
39158: LD_VAR 0 2
39162: PUSH
39163: LD_INT 1
39165: ARRAY
39166: PPUSH
39167: LD_VAR 0 2
39171: PUSH
39172: LD_INT 2
39174: ARRAY
39175: PPUSH
39176: LD_VAR 0 2
39180: PUSH
39181: LD_INT 3
39183: ARRAY
39184: PPUSH
39185: LD_VAR 0 2
39189: PUSH
39190: LD_INT 4
39192: ARRAY
39193: PPUSH
39194: CALL_OW 449
39198: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39199: LD_ADDR_VAR 0 3
39203: PUSH
39204: LD_VAR 0 5
39208: PPUSH
39209: LD_INT 1
39211: PPUSH
39212: CALL_OW 275
39216: PUSH
39217: LD_VAR 0 4
39221: PUSH
39222: LD_INT 1
39224: ARRAY
39225: GREATEREQUAL
39226: PUSH
39227: LD_VAR 0 5
39231: PPUSH
39232: LD_INT 2
39234: PPUSH
39235: CALL_OW 275
39239: PUSH
39240: LD_VAR 0 4
39244: PUSH
39245: LD_INT 2
39247: ARRAY
39248: GREATEREQUAL
39249: AND
39250: PUSH
39251: LD_VAR 0 5
39255: PPUSH
39256: LD_INT 3
39258: PPUSH
39259: CALL_OW 275
39263: PUSH
39264: LD_VAR 0 4
39268: PUSH
39269: LD_INT 3
39271: ARRAY
39272: GREATEREQUAL
39273: AND
39274: ST_TO_ADDR
// end ;
39275: LD_VAR 0 3
39279: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
39280: LD_INT 0
39282: PPUSH
39283: PPUSH
39284: PPUSH
39285: PPUSH
// pom := GetBase ( building ) ;
39286: LD_ADDR_VAR 0 3
39290: PUSH
39291: LD_VAR 0 1
39295: PPUSH
39296: CALL_OW 274
39300: ST_TO_ADDR
// if not pom then
39301: LD_VAR 0 3
39305: NOT
39306: IFFALSE 39310
// exit ;
39308: GO 39480
// btype := GetBType ( building ) ;
39310: LD_ADDR_VAR 0 5
39314: PUSH
39315: LD_VAR 0 1
39319: PPUSH
39320: CALL_OW 266
39324: ST_TO_ADDR
// if btype = b_armoury then
39325: LD_VAR 0 5
39329: PUSH
39330: LD_INT 4
39332: EQUAL
39333: IFFALSE 39343
// btype := b_barracks ;
39335: LD_ADDR_VAR 0 5
39339: PUSH
39340: LD_INT 5
39342: ST_TO_ADDR
// if btype = b_depot then
39343: LD_VAR 0 5
39347: PUSH
39348: LD_INT 0
39350: EQUAL
39351: IFFALSE 39361
// btype := b_warehouse ;
39353: LD_ADDR_VAR 0 5
39357: PUSH
39358: LD_INT 1
39360: ST_TO_ADDR
// if btype = b_workshop then
39361: LD_VAR 0 5
39365: PUSH
39366: LD_INT 2
39368: EQUAL
39369: IFFALSE 39379
// btype := b_factory ;
39371: LD_ADDR_VAR 0 5
39375: PUSH
39376: LD_INT 3
39378: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39379: LD_ADDR_VAR 0 4
39383: PUSH
39384: LD_VAR 0 5
39388: PPUSH
39389: LD_VAR 0 1
39393: PPUSH
39394: CALL_OW 248
39398: PPUSH
39399: CALL_OW 450
39403: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39404: LD_ADDR_VAR 0 2
39408: PUSH
39409: LD_VAR 0 3
39413: PPUSH
39414: LD_INT 1
39416: PPUSH
39417: CALL_OW 275
39421: PUSH
39422: LD_VAR 0 4
39426: PUSH
39427: LD_INT 1
39429: ARRAY
39430: GREATEREQUAL
39431: PUSH
39432: LD_VAR 0 3
39436: PPUSH
39437: LD_INT 2
39439: PPUSH
39440: CALL_OW 275
39444: PUSH
39445: LD_VAR 0 4
39449: PUSH
39450: LD_INT 2
39452: ARRAY
39453: GREATEREQUAL
39454: AND
39455: PUSH
39456: LD_VAR 0 3
39460: PPUSH
39461: LD_INT 3
39463: PPUSH
39464: CALL_OW 275
39468: PUSH
39469: LD_VAR 0 4
39473: PUSH
39474: LD_INT 3
39476: ARRAY
39477: GREATEREQUAL
39478: AND
39479: ST_TO_ADDR
// end ;
39480: LD_VAR 0 2
39484: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39485: LD_INT 0
39487: PPUSH
39488: PPUSH
39489: PPUSH
// pom := GetBase ( building ) ;
39490: LD_ADDR_VAR 0 4
39494: PUSH
39495: LD_VAR 0 1
39499: PPUSH
39500: CALL_OW 274
39504: ST_TO_ADDR
// if not pom then
39505: LD_VAR 0 4
39509: NOT
39510: IFFALSE 39514
// exit ;
39512: GO 39615
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39514: LD_ADDR_VAR 0 5
39518: PUSH
39519: LD_VAR 0 2
39523: PPUSH
39524: LD_VAR 0 1
39528: PPUSH
39529: CALL_OW 248
39533: PPUSH
39534: CALL_OW 450
39538: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39539: LD_ADDR_VAR 0 3
39543: PUSH
39544: LD_VAR 0 4
39548: PPUSH
39549: LD_INT 1
39551: PPUSH
39552: CALL_OW 275
39556: PUSH
39557: LD_VAR 0 5
39561: PUSH
39562: LD_INT 1
39564: ARRAY
39565: GREATEREQUAL
39566: PUSH
39567: LD_VAR 0 4
39571: PPUSH
39572: LD_INT 2
39574: PPUSH
39575: CALL_OW 275
39579: PUSH
39580: LD_VAR 0 5
39584: PUSH
39585: LD_INT 2
39587: ARRAY
39588: GREATEREQUAL
39589: AND
39590: PUSH
39591: LD_VAR 0 4
39595: PPUSH
39596: LD_INT 3
39598: PPUSH
39599: CALL_OW 275
39603: PUSH
39604: LD_VAR 0 5
39608: PUSH
39609: LD_INT 3
39611: ARRAY
39612: GREATEREQUAL
39613: AND
39614: ST_TO_ADDR
// end ;
39615: LD_VAR 0 3
39619: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
39620: LD_INT 0
39622: PPUSH
39623: PPUSH
39624: PPUSH
39625: PPUSH
39626: PPUSH
39627: PPUSH
39628: PPUSH
39629: PPUSH
39630: PPUSH
39631: PPUSH
39632: PPUSH
// result := false ;
39633: LD_ADDR_VAR 0 8
39637: PUSH
39638: LD_INT 0
39640: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
39641: LD_VAR 0 5
39645: NOT
39646: PUSH
39647: LD_VAR 0 1
39651: NOT
39652: OR
39653: PUSH
39654: LD_VAR 0 2
39658: NOT
39659: OR
39660: PUSH
39661: LD_VAR 0 3
39665: NOT
39666: OR
39667: IFFALSE 39671
// exit ;
39669: GO 40485
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
39671: LD_ADDR_VAR 0 14
39675: PUSH
39676: LD_VAR 0 1
39680: PPUSH
39681: LD_VAR 0 2
39685: PPUSH
39686: LD_VAR 0 3
39690: PPUSH
39691: LD_VAR 0 4
39695: PPUSH
39696: LD_VAR 0 5
39700: PUSH
39701: LD_INT 1
39703: ARRAY
39704: PPUSH
39705: CALL_OW 248
39709: PPUSH
39710: LD_INT 0
39712: PPUSH
39713: CALL 41738 0 6
39717: ST_TO_ADDR
// if not hexes then
39718: LD_VAR 0 14
39722: NOT
39723: IFFALSE 39727
// exit ;
39725: GO 40485
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39727: LD_ADDR_VAR 0 17
39731: PUSH
39732: LD_VAR 0 5
39736: PPUSH
39737: LD_INT 22
39739: PUSH
39740: LD_VAR 0 13
39744: PPUSH
39745: CALL_OW 255
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: PUSH
39754: LD_INT 2
39756: PUSH
39757: LD_INT 30
39759: PUSH
39760: LD_INT 0
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: PUSH
39767: LD_INT 30
39769: PUSH
39770: LD_INT 1
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: LIST
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: PPUSH
39786: CALL_OW 72
39790: ST_TO_ADDR
// for i = 1 to hexes do
39791: LD_ADDR_VAR 0 9
39795: PUSH
39796: DOUBLE
39797: LD_INT 1
39799: DEC
39800: ST_TO_ADDR
39801: LD_VAR 0 14
39805: PUSH
39806: FOR_TO
39807: IFFALSE 40483
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39809: LD_ADDR_VAR 0 13
39813: PUSH
39814: LD_VAR 0 14
39818: PUSH
39819: LD_VAR 0 9
39823: ARRAY
39824: PUSH
39825: LD_INT 1
39827: ARRAY
39828: PPUSH
39829: LD_VAR 0 14
39833: PUSH
39834: LD_VAR 0 9
39838: ARRAY
39839: PUSH
39840: LD_INT 2
39842: ARRAY
39843: PPUSH
39844: CALL_OW 428
39848: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
39849: LD_VAR 0 14
39853: PUSH
39854: LD_VAR 0 9
39858: ARRAY
39859: PUSH
39860: LD_INT 1
39862: ARRAY
39863: PPUSH
39864: LD_VAR 0 14
39868: PUSH
39869: LD_VAR 0 9
39873: ARRAY
39874: PUSH
39875: LD_INT 2
39877: ARRAY
39878: PPUSH
39879: CALL_OW 351
39883: PUSH
39884: LD_VAR 0 14
39888: PUSH
39889: LD_VAR 0 9
39893: ARRAY
39894: PUSH
39895: LD_INT 1
39897: ARRAY
39898: PPUSH
39899: LD_VAR 0 14
39903: PUSH
39904: LD_VAR 0 9
39908: ARRAY
39909: PUSH
39910: LD_INT 2
39912: ARRAY
39913: PPUSH
39914: CALL_OW 488
39918: NOT
39919: OR
39920: PUSH
39921: LD_VAR 0 13
39925: PPUSH
39926: CALL_OW 247
39930: PUSH
39931: LD_INT 3
39933: EQUAL
39934: OR
39935: IFFALSE 39941
// exit ;
39937: POP
39938: POP
39939: GO 40485
// if not tmp then
39941: LD_VAR 0 13
39945: NOT
39946: IFFALSE 39950
// continue ;
39948: GO 39806
// result := true ;
39950: LD_ADDR_VAR 0 8
39954: PUSH
39955: LD_INT 1
39957: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
39958: LD_VAR 0 6
39962: PUSH
39963: LD_VAR 0 13
39967: PPUSH
39968: CALL_OW 247
39972: PUSH
39973: LD_INT 2
39975: EQUAL
39976: AND
39977: PUSH
39978: LD_VAR 0 13
39982: PPUSH
39983: CALL_OW 263
39987: PUSH
39988: LD_INT 1
39990: EQUAL
39991: AND
39992: IFFALSE 40156
// begin if IsDrivenBy ( tmp ) then
39994: LD_VAR 0 13
39998: PPUSH
39999: CALL_OW 311
40003: IFFALSE 40007
// continue ;
40005: GO 39806
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
40007: LD_VAR 0 6
40011: PPUSH
40012: LD_INT 3
40014: PUSH
40015: LD_INT 60
40017: PUSH
40018: EMPTY
40019: LIST
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: PUSH
40025: LD_INT 3
40027: PUSH
40028: LD_INT 55
40030: PUSH
40031: EMPTY
40032: LIST
40033: PUSH
40034: EMPTY
40035: LIST
40036: LIST
40037: PUSH
40038: EMPTY
40039: LIST
40040: LIST
40041: PPUSH
40042: CALL_OW 72
40046: IFFALSE 40154
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
40048: LD_ADDR_VAR 0 18
40052: PUSH
40053: LD_VAR 0 6
40057: PPUSH
40058: LD_INT 3
40060: PUSH
40061: LD_INT 60
40063: PUSH
40064: EMPTY
40065: LIST
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: PUSH
40071: LD_INT 3
40073: PUSH
40074: LD_INT 55
40076: PUSH
40077: EMPTY
40078: LIST
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: PPUSH
40088: CALL_OW 72
40092: PUSH
40093: LD_INT 1
40095: ARRAY
40096: ST_TO_ADDR
// if IsInUnit ( driver ) then
40097: LD_VAR 0 18
40101: PPUSH
40102: CALL_OW 310
40106: IFFALSE 40117
// ComExit ( driver ) ;
40108: LD_VAR 0 18
40112: PPUSH
40113: CALL 65530 0 1
// AddComEnterUnit ( driver , tmp ) ;
40117: LD_VAR 0 18
40121: PPUSH
40122: LD_VAR 0 13
40126: PPUSH
40127: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
40131: LD_VAR 0 18
40135: PPUSH
40136: LD_VAR 0 7
40140: PPUSH
40141: CALL_OW 173
// AddComExitVehicle ( driver ) ;
40145: LD_VAR 0 18
40149: PPUSH
40150: CALL_OW 181
// end ; continue ;
40154: GO 39806
// end ; if not cleaners or not tmp in cleaners then
40156: LD_VAR 0 6
40160: NOT
40161: PUSH
40162: LD_VAR 0 13
40166: PUSH
40167: LD_VAR 0 6
40171: IN
40172: NOT
40173: OR
40174: IFFALSE 40481
// begin if dep then
40176: LD_VAR 0 17
40180: IFFALSE 40316
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
40182: LD_ADDR_VAR 0 16
40186: PUSH
40187: LD_VAR 0 17
40191: PUSH
40192: LD_INT 1
40194: ARRAY
40195: PPUSH
40196: CALL_OW 250
40200: PPUSH
40201: LD_VAR 0 17
40205: PUSH
40206: LD_INT 1
40208: ARRAY
40209: PPUSH
40210: CALL_OW 254
40214: PPUSH
40215: LD_INT 5
40217: PPUSH
40218: CALL_OW 272
40222: PUSH
40223: LD_VAR 0 17
40227: PUSH
40228: LD_INT 1
40230: ARRAY
40231: PPUSH
40232: CALL_OW 251
40236: PPUSH
40237: LD_VAR 0 17
40241: PUSH
40242: LD_INT 1
40244: ARRAY
40245: PPUSH
40246: CALL_OW 254
40250: PPUSH
40251: LD_INT 5
40253: PPUSH
40254: CALL_OW 273
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
40263: LD_VAR 0 16
40267: PUSH
40268: LD_INT 1
40270: ARRAY
40271: PPUSH
40272: LD_VAR 0 16
40276: PUSH
40277: LD_INT 2
40279: ARRAY
40280: PPUSH
40281: CALL_OW 488
40285: IFFALSE 40316
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40287: LD_VAR 0 13
40291: PPUSH
40292: LD_VAR 0 16
40296: PUSH
40297: LD_INT 1
40299: ARRAY
40300: PPUSH
40301: LD_VAR 0 16
40305: PUSH
40306: LD_INT 2
40308: ARRAY
40309: PPUSH
40310: CALL_OW 111
// continue ;
40314: GO 39806
// end ; end ; r := GetDir ( tmp ) ;
40316: LD_ADDR_VAR 0 15
40320: PUSH
40321: LD_VAR 0 13
40325: PPUSH
40326: CALL_OW 254
40330: ST_TO_ADDR
// if r = 5 then
40331: LD_VAR 0 15
40335: PUSH
40336: LD_INT 5
40338: EQUAL
40339: IFFALSE 40349
// r := 0 ;
40341: LD_ADDR_VAR 0 15
40345: PUSH
40346: LD_INT 0
40348: ST_TO_ADDR
// for j = r to 5 do
40349: LD_ADDR_VAR 0 10
40353: PUSH
40354: DOUBLE
40355: LD_VAR 0 15
40359: DEC
40360: ST_TO_ADDR
40361: LD_INT 5
40363: PUSH
40364: FOR_TO
40365: IFFALSE 40479
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
40367: LD_ADDR_VAR 0 11
40371: PUSH
40372: LD_VAR 0 13
40376: PPUSH
40377: CALL_OW 250
40381: PPUSH
40382: LD_VAR 0 10
40386: PPUSH
40387: LD_INT 2
40389: PPUSH
40390: CALL_OW 272
40394: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
40395: LD_ADDR_VAR 0 12
40399: PUSH
40400: LD_VAR 0 13
40404: PPUSH
40405: CALL_OW 251
40409: PPUSH
40410: LD_VAR 0 10
40414: PPUSH
40415: LD_INT 2
40417: PPUSH
40418: CALL_OW 273
40422: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
40423: LD_VAR 0 11
40427: PPUSH
40428: LD_VAR 0 12
40432: PPUSH
40433: CALL_OW 488
40437: PUSH
40438: LD_VAR 0 11
40442: PPUSH
40443: LD_VAR 0 12
40447: PPUSH
40448: CALL_OW 428
40452: NOT
40453: AND
40454: IFFALSE 40477
// begin ComMoveXY ( tmp , _x , _y ) ;
40456: LD_VAR 0 13
40460: PPUSH
40461: LD_VAR 0 11
40465: PPUSH
40466: LD_VAR 0 12
40470: PPUSH
40471: CALL_OW 111
// break ;
40475: GO 40479
// end ; end ;
40477: GO 40364
40479: POP
40480: POP
// end ; end ;
40481: GO 39806
40483: POP
40484: POP
// end ;
40485: LD_VAR 0 8
40489: RET
// export function BuildingTechInvented ( side , btype ) ; begin
40490: LD_INT 0
40492: PPUSH
// result := true ;
40493: LD_ADDR_VAR 0 3
40497: PUSH
40498: LD_INT 1
40500: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
40501: LD_VAR 0 2
40505: PUSH
40506: LD_INT 24
40508: DOUBLE
40509: EQUAL
40510: IFTRUE 40520
40512: LD_INT 33
40514: DOUBLE
40515: EQUAL
40516: IFTRUE 40520
40518: GO 40545
40520: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
40521: LD_ADDR_VAR 0 3
40525: PUSH
40526: LD_INT 32
40528: PPUSH
40529: LD_VAR 0 1
40533: PPUSH
40534: CALL_OW 321
40538: PUSH
40539: LD_INT 2
40541: EQUAL
40542: ST_TO_ADDR
40543: GO 40861
40545: LD_INT 20
40547: DOUBLE
40548: EQUAL
40549: IFTRUE 40553
40551: GO 40578
40553: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
40554: LD_ADDR_VAR 0 3
40558: PUSH
40559: LD_INT 6
40561: PPUSH
40562: LD_VAR 0 1
40566: PPUSH
40567: CALL_OW 321
40571: PUSH
40572: LD_INT 2
40574: EQUAL
40575: ST_TO_ADDR
40576: GO 40861
40578: LD_INT 22
40580: DOUBLE
40581: EQUAL
40582: IFTRUE 40592
40584: LD_INT 36
40586: DOUBLE
40587: EQUAL
40588: IFTRUE 40592
40590: GO 40617
40592: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
40593: LD_ADDR_VAR 0 3
40597: PUSH
40598: LD_INT 15
40600: PPUSH
40601: LD_VAR 0 1
40605: PPUSH
40606: CALL_OW 321
40610: PUSH
40611: LD_INT 2
40613: EQUAL
40614: ST_TO_ADDR
40615: GO 40861
40617: LD_INT 30
40619: DOUBLE
40620: EQUAL
40621: IFTRUE 40625
40623: GO 40650
40625: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
40626: LD_ADDR_VAR 0 3
40630: PUSH
40631: LD_INT 20
40633: PPUSH
40634: LD_VAR 0 1
40638: PPUSH
40639: CALL_OW 321
40643: PUSH
40644: LD_INT 2
40646: EQUAL
40647: ST_TO_ADDR
40648: GO 40861
40650: LD_INT 28
40652: DOUBLE
40653: EQUAL
40654: IFTRUE 40664
40656: LD_INT 21
40658: DOUBLE
40659: EQUAL
40660: IFTRUE 40664
40662: GO 40689
40664: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
40665: LD_ADDR_VAR 0 3
40669: PUSH
40670: LD_INT 21
40672: PPUSH
40673: LD_VAR 0 1
40677: PPUSH
40678: CALL_OW 321
40682: PUSH
40683: LD_INT 2
40685: EQUAL
40686: ST_TO_ADDR
40687: GO 40861
40689: LD_INT 16
40691: DOUBLE
40692: EQUAL
40693: IFTRUE 40697
40695: GO 40722
40697: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
40698: LD_ADDR_VAR 0 3
40702: PUSH
40703: LD_INT 84
40705: PPUSH
40706: LD_VAR 0 1
40710: PPUSH
40711: CALL_OW 321
40715: PUSH
40716: LD_INT 2
40718: EQUAL
40719: ST_TO_ADDR
40720: GO 40861
40722: LD_INT 19
40724: DOUBLE
40725: EQUAL
40726: IFTRUE 40736
40728: LD_INT 23
40730: DOUBLE
40731: EQUAL
40732: IFTRUE 40736
40734: GO 40761
40736: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
40737: LD_ADDR_VAR 0 3
40741: PUSH
40742: LD_INT 83
40744: PPUSH
40745: LD_VAR 0 1
40749: PPUSH
40750: CALL_OW 321
40754: PUSH
40755: LD_INT 2
40757: EQUAL
40758: ST_TO_ADDR
40759: GO 40861
40761: LD_INT 17
40763: DOUBLE
40764: EQUAL
40765: IFTRUE 40769
40767: GO 40794
40769: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
40770: LD_ADDR_VAR 0 3
40774: PUSH
40775: LD_INT 39
40777: PPUSH
40778: LD_VAR 0 1
40782: PPUSH
40783: CALL_OW 321
40787: PUSH
40788: LD_INT 2
40790: EQUAL
40791: ST_TO_ADDR
40792: GO 40861
40794: LD_INT 18
40796: DOUBLE
40797: EQUAL
40798: IFTRUE 40802
40800: GO 40827
40802: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
40803: LD_ADDR_VAR 0 3
40807: PUSH
40808: LD_INT 40
40810: PPUSH
40811: LD_VAR 0 1
40815: PPUSH
40816: CALL_OW 321
40820: PUSH
40821: LD_INT 2
40823: EQUAL
40824: ST_TO_ADDR
40825: GO 40861
40827: LD_INT 27
40829: DOUBLE
40830: EQUAL
40831: IFTRUE 40835
40833: GO 40860
40835: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
40836: LD_ADDR_VAR 0 3
40840: PUSH
40841: LD_INT 35
40843: PPUSH
40844: LD_VAR 0 1
40848: PPUSH
40849: CALL_OW 321
40853: PUSH
40854: LD_INT 2
40856: EQUAL
40857: ST_TO_ADDR
40858: GO 40861
40860: POP
// end ;
40861: LD_VAR 0 3
40865: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
40866: LD_INT 0
40868: PPUSH
40869: PPUSH
40870: PPUSH
40871: PPUSH
40872: PPUSH
40873: PPUSH
40874: PPUSH
40875: PPUSH
40876: PPUSH
40877: PPUSH
40878: PPUSH
// result := false ;
40879: LD_ADDR_VAR 0 6
40883: PUSH
40884: LD_INT 0
40886: ST_TO_ADDR
// if btype = b_depot then
40887: LD_VAR 0 2
40891: PUSH
40892: LD_INT 0
40894: EQUAL
40895: IFFALSE 40907
// begin result := true ;
40897: LD_ADDR_VAR 0 6
40901: PUSH
40902: LD_INT 1
40904: ST_TO_ADDR
// exit ;
40905: GO 41733
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40907: LD_VAR 0 1
40911: NOT
40912: PUSH
40913: LD_VAR 0 1
40917: PPUSH
40918: CALL_OW 266
40922: PUSH
40923: LD_INT 0
40925: PUSH
40926: LD_INT 1
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: IN
40933: NOT
40934: OR
40935: PUSH
40936: LD_VAR 0 2
40940: NOT
40941: OR
40942: PUSH
40943: LD_VAR 0 5
40947: PUSH
40948: LD_INT 0
40950: PUSH
40951: LD_INT 1
40953: PUSH
40954: LD_INT 2
40956: PUSH
40957: LD_INT 3
40959: PUSH
40960: LD_INT 4
40962: PUSH
40963: LD_INT 5
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: IN
40974: NOT
40975: OR
40976: PUSH
40977: LD_VAR 0 3
40981: PPUSH
40982: LD_VAR 0 4
40986: PPUSH
40987: CALL_OW 488
40991: NOT
40992: OR
40993: IFFALSE 40997
// exit ;
40995: GO 41733
// side := GetSide ( depot ) ;
40997: LD_ADDR_VAR 0 9
41001: PUSH
41002: LD_VAR 0 1
41006: PPUSH
41007: CALL_OW 255
41011: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
41012: LD_VAR 0 9
41016: PPUSH
41017: LD_VAR 0 2
41021: PPUSH
41022: CALL 40490 0 2
41026: NOT
41027: IFFALSE 41031
// exit ;
41029: GO 41733
// pom := GetBase ( depot ) ;
41031: LD_ADDR_VAR 0 10
41035: PUSH
41036: LD_VAR 0 1
41040: PPUSH
41041: CALL_OW 274
41045: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
41046: LD_ADDR_VAR 0 11
41050: PUSH
41051: LD_VAR 0 2
41055: PPUSH
41056: LD_VAR 0 1
41060: PPUSH
41061: CALL_OW 248
41065: PPUSH
41066: CALL_OW 450
41070: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
41071: LD_VAR 0 10
41075: PPUSH
41076: LD_INT 1
41078: PPUSH
41079: CALL_OW 275
41083: PUSH
41084: LD_VAR 0 11
41088: PUSH
41089: LD_INT 1
41091: ARRAY
41092: GREATEREQUAL
41093: PUSH
41094: LD_VAR 0 10
41098: PPUSH
41099: LD_INT 2
41101: PPUSH
41102: CALL_OW 275
41106: PUSH
41107: LD_VAR 0 11
41111: PUSH
41112: LD_INT 2
41114: ARRAY
41115: GREATEREQUAL
41116: AND
41117: PUSH
41118: LD_VAR 0 10
41122: PPUSH
41123: LD_INT 3
41125: PPUSH
41126: CALL_OW 275
41130: PUSH
41131: LD_VAR 0 11
41135: PUSH
41136: LD_INT 3
41138: ARRAY
41139: GREATEREQUAL
41140: AND
41141: NOT
41142: IFFALSE 41146
// exit ;
41144: GO 41733
// if GetBType ( depot ) = b_depot then
41146: LD_VAR 0 1
41150: PPUSH
41151: CALL_OW 266
41155: PUSH
41156: LD_INT 0
41158: EQUAL
41159: IFFALSE 41171
// dist := 28 else
41161: LD_ADDR_VAR 0 14
41165: PUSH
41166: LD_INT 28
41168: ST_TO_ADDR
41169: GO 41179
// dist := 36 ;
41171: LD_ADDR_VAR 0 14
41175: PUSH
41176: LD_INT 36
41178: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
41179: LD_VAR 0 1
41183: PPUSH
41184: LD_VAR 0 3
41188: PPUSH
41189: LD_VAR 0 4
41193: PPUSH
41194: CALL_OW 297
41198: PUSH
41199: LD_VAR 0 14
41203: GREATER
41204: IFFALSE 41208
// exit ;
41206: GO 41733
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
41208: LD_ADDR_VAR 0 12
41212: PUSH
41213: LD_VAR 0 2
41217: PPUSH
41218: LD_VAR 0 3
41222: PPUSH
41223: LD_VAR 0 4
41227: PPUSH
41228: LD_VAR 0 5
41232: PPUSH
41233: LD_VAR 0 1
41237: PPUSH
41238: CALL_OW 248
41242: PPUSH
41243: LD_INT 0
41245: PPUSH
41246: CALL 41738 0 6
41250: ST_TO_ADDR
// if not hexes then
41251: LD_VAR 0 12
41255: NOT
41256: IFFALSE 41260
// exit ;
41258: GO 41733
// hex := GetHexInfo ( x , y ) ;
41260: LD_ADDR_VAR 0 15
41264: PUSH
41265: LD_VAR 0 3
41269: PPUSH
41270: LD_VAR 0 4
41274: PPUSH
41275: CALL_OW 546
41279: ST_TO_ADDR
// if hex [ 1 ] then
41280: LD_VAR 0 15
41284: PUSH
41285: LD_INT 1
41287: ARRAY
41288: IFFALSE 41292
// exit ;
41290: GO 41733
// height := hex [ 2 ] ;
41292: LD_ADDR_VAR 0 13
41296: PUSH
41297: LD_VAR 0 15
41301: PUSH
41302: LD_INT 2
41304: ARRAY
41305: ST_TO_ADDR
// for i = 1 to hexes do
41306: LD_ADDR_VAR 0 7
41310: PUSH
41311: DOUBLE
41312: LD_INT 1
41314: DEC
41315: ST_TO_ADDR
41316: LD_VAR 0 12
41320: PUSH
41321: FOR_TO
41322: IFFALSE 41652
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
41324: LD_VAR 0 12
41328: PUSH
41329: LD_VAR 0 7
41333: ARRAY
41334: PUSH
41335: LD_INT 1
41337: ARRAY
41338: PPUSH
41339: LD_VAR 0 12
41343: PUSH
41344: LD_VAR 0 7
41348: ARRAY
41349: PUSH
41350: LD_INT 2
41352: ARRAY
41353: PPUSH
41354: CALL_OW 488
41358: NOT
41359: PUSH
41360: LD_VAR 0 12
41364: PUSH
41365: LD_VAR 0 7
41369: ARRAY
41370: PUSH
41371: LD_INT 1
41373: ARRAY
41374: PPUSH
41375: LD_VAR 0 12
41379: PUSH
41380: LD_VAR 0 7
41384: ARRAY
41385: PUSH
41386: LD_INT 2
41388: ARRAY
41389: PPUSH
41390: CALL_OW 428
41394: PUSH
41395: LD_INT 0
41397: GREATER
41398: OR
41399: PUSH
41400: LD_VAR 0 12
41404: PUSH
41405: LD_VAR 0 7
41409: ARRAY
41410: PUSH
41411: LD_INT 1
41413: ARRAY
41414: PPUSH
41415: LD_VAR 0 12
41419: PUSH
41420: LD_VAR 0 7
41424: ARRAY
41425: PUSH
41426: LD_INT 2
41428: ARRAY
41429: PPUSH
41430: CALL_OW 351
41434: OR
41435: IFFALSE 41441
// exit ;
41437: POP
41438: POP
41439: GO 41733
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41441: LD_ADDR_VAR 0 8
41445: PUSH
41446: LD_VAR 0 12
41450: PUSH
41451: LD_VAR 0 7
41455: ARRAY
41456: PUSH
41457: LD_INT 1
41459: ARRAY
41460: PPUSH
41461: LD_VAR 0 12
41465: PUSH
41466: LD_VAR 0 7
41470: ARRAY
41471: PUSH
41472: LD_INT 2
41474: ARRAY
41475: PPUSH
41476: CALL_OW 546
41480: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41481: LD_VAR 0 8
41485: PUSH
41486: LD_INT 1
41488: ARRAY
41489: PUSH
41490: LD_VAR 0 8
41494: PUSH
41495: LD_INT 2
41497: ARRAY
41498: PUSH
41499: LD_VAR 0 13
41503: PUSH
41504: LD_INT 2
41506: PLUS
41507: GREATER
41508: OR
41509: PUSH
41510: LD_VAR 0 8
41514: PUSH
41515: LD_INT 2
41517: ARRAY
41518: PUSH
41519: LD_VAR 0 13
41523: PUSH
41524: LD_INT 2
41526: MINUS
41527: LESS
41528: OR
41529: PUSH
41530: LD_VAR 0 8
41534: PUSH
41535: LD_INT 3
41537: ARRAY
41538: PUSH
41539: LD_INT 0
41541: PUSH
41542: LD_INT 8
41544: PUSH
41545: LD_INT 9
41547: PUSH
41548: LD_INT 10
41550: PUSH
41551: LD_INT 11
41553: PUSH
41554: LD_INT 12
41556: PUSH
41557: LD_INT 13
41559: PUSH
41560: LD_INT 16
41562: PUSH
41563: LD_INT 17
41565: PUSH
41566: LD_INT 18
41568: PUSH
41569: LD_INT 19
41571: PUSH
41572: LD_INT 20
41574: PUSH
41575: LD_INT 21
41577: PUSH
41578: EMPTY
41579: LIST
41580: LIST
41581: LIST
41582: LIST
41583: LIST
41584: LIST
41585: LIST
41586: LIST
41587: LIST
41588: LIST
41589: LIST
41590: LIST
41591: LIST
41592: IN
41593: NOT
41594: OR
41595: PUSH
41596: LD_VAR 0 8
41600: PUSH
41601: LD_INT 5
41603: ARRAY
41604: NOT
41605: OR
41606: PUSH
41607: LD_VAR 0 8
41611: PUSH
41612: LD_INT 6
41614: ARRAY
41615: PUSH
41616: LD_INT 1
41618: PUSH
41619: LD_INT 2
41621: PUSH
41622: LD_INT 7
41624: PUSH
41625: LD_INT 9
41627: PUSH
41628: LD_INT 10
41630: PUSH
41631: LD_INT 11
41633: PUSH
41634: EMPTY
41635: LIST
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: LIST
41641: IN
41642: NOT
41643: OR
41644: IFFALSE 41650
// exit ;
41646: POP
41647: POP
41648: GO 41733
// end ;
41650: GO 41321
41652: POP
41653: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41654: LD_VAR 0 9
41658: PPUSH
41659: LD_VAR 0 3
41663: PPUSH
41664: LD_VAR 0 4
41668: PPUSH
41669: LD_INT 20
41671: PPUSH
41672: CALL 33656 0 4
41676: PUSH
41677: LD_INT 4
41679: ARRAY
41680: IFFALSE 41684
// exit ;
41682: GO 41733
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41684: LD_VAR 0 2
41688: PUSH
41689: LD_INT 29
41691: PUSH
41692: LD_INT 30
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: IN
41699: PUSH
41700: LD_VAR 0 3
41704: PPUSH
41705: LD_VAR 0 4
41709: PPUSH
41710: LD_VAR 0 9
41714: PPUSH
41715: CALL_OW 440
41719: NOT
41720: AND
41721: IFFALSE 41725
// exit ;
41723: GO 41733
// result := true ;
41725: LD_ADDR_VAR 0 6
41729: PUSH
41730: LD_INT 1
41732: ST_TO_ADDR
// end ;
41733: LD_VAR 0 6
41737: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
41738: LD_INT 0
41740: PPUSH
41741: PPUSH
41742: PPUSH
41743: PPUSH
41744: PPUSH
41745: PPUSH
41746: PPUSH
41747: PPUSH
41748: PPUSH
41749: PPUSH
41750: PPUSH
41751: PPUSH
41752: PPUSH
41753: PPUSH
41754: PPUSH
41755: PPUSH
41756: PPUSH
41757: PPUSH
41758: PPUSH
41759: PPUSH
41760: PPUSH
41761: PPUSH
41762: PPUSH
41763: PPUSH
41764: PPUSH
41765: PPUSH
41766: PPUSH
41767: PPUSH
41768: PPUSH
41769: PPUSH
41770: PPUSH
41771: PPUSH
41772: PPUSH
41773: PPUSH
41774: PPUSH
41775: PPUSH
41776: PPUSH
41777: PPUSH
41778: PPUSH
41779: PPUSH
41780: PPUSH
41781: PPUSH
41782: PPUSH
41783: PPUSH
41784: PPUSH
41785: PPUSH
41786: PPUSH
41787: PPUSH
41788: PPUSH
41789: PPUSH
41790: PPUSH
41791: PPUSH
41792: PPUSH
41793: PPUSH
41794: PPUSH
41795: PPUSH
41796: PPUSH
41797: PPUSH
// result = [ ] ;
41798: LD_ADDR_VAR 0 7
41802: PUSH
41803: EMPTY
41804: ST_TO_ADDR
// temp_list = [ ] ;
41805: LD_ADDR_VAR 0 9
41809: PUSH
41810: EMPTY
41811: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41812: LD_VAR 0 4
41816: PUSH
41817: LD_INT 0
41819: PUSH
41820: LD_INT 1
41822: PUSH
41823: LD_INT 2
41825: PUSH
41826: LD_INT 3
41828: PUSH
41829: LD_INT 4
41831: PUSH
41832: LD_INT 5
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: LIST
41839: LIST
41840: LIST
41841: LIST
41842: IN
41843: NOT
41844: PUSH
41845: LD_VAR 0 1
41849: PUSH
41850: LD_INT 0
41852: PUSH
41853: LD_INT 1
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: IN
41860: PUSH
41861: LD_VAR 0 5
41865: PUSH
41866: LD_INT 1
41868: PUSH
41869: LD_INT 2
41871: PUSH
41872: LD_INT 3
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: LIST
41879: IN
41880: NOT
41881: AND
41882: OR
41883: IFFALSE 41887
// exit ;
41885: GO 60278
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41887: LD_VAR 0 1
41891: PUSH
41892: LD_INT 6
41894: PUSH
41895: LD_INT 7
41897: PUSH
41898: LD_INT 8
41900: PUSH
41901: LD_INT 13
41903: PUSH
41904: LD_INT 12
41906: PUSH
41907: LD_INT 15
41909: PUSH
41910: LD_INT 11
41912: PUSH
41913: LD_INT 14
41915: PUSH
41916: LD_INT 10
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: LIST
41923: LIST
41924: LIST
41925: LIST
41926: LIST
41927: LIST
41928: LIST
41929: IN
41930: IFFALSE 41940
// btype = b_lab ;
41932: LD_ADDR_VAR 0 1
41936: PUSH
41937: LD_INT 6
41939: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41940: LD_VAR 0 6
41944: PUSH
41945: LD_INT 0
41947: PUSH
41948: LD_INT 1
41950: PUSH
41951: LD_INT 2
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: LIST
41958: IN
41959: NOT
41960: PUSH
41961: LD_VAR 0 1
41965: PUSH
41966: LD_INT 0
41968: PUSH
41969: LD_INT 1
41971: PUSH
41972: LD_INT 2
41974: PUSH
41975: LD_INT 3
41977: PUSH
41978: LD_INT 6
41980: PUSH
41981: LD_INT 36
41983: PUSH
41984: LD_INT 4
41986: PUSH
41987: LD_INT 5
41989: PUSH
41990: LD_INT 31
41992: PUSH
41993: LD_INT 32
41995: PUSH
41996: LD_INT 33
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: IN
42012: NOT
42013: PUSH
42014: LD_VAR 0 6
42018: PUSH
42019: LD_INT 1
42021: EQUAL
42022: AND
42023: OR
42024: PUSH
42025: LD_VAR 0 1
42029: PUSH
42030: LD_INT 2
42032: PUSH
42033: LD_INT 3
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: IN
42040: NOT
42041: PUSH
42042: LD_VAR 0 6
42046: PUSH
42047: LD_INT 2
42049: EQUAL
42050: AND
42051: OR
42052: IFFALSE 42062
// mode = 0 ;
42054: LD_ADDR_VAR 0 6
42058: PUSH
42059: LD_INT 0
42061: ST_TO_ADDR
// case mode of 0 :
42062: LD_VAR 0 6
42066: PUSH
42067: LD_INT 0
42069: DOUBLE
42070: EQUAL
42071: IFTRUE 42075
42073: GO 53528
42075: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42076: LD_ADDR_VAR 0 11
42080: PUSH
42081: LD_INT 0
42083: PUSH
42084: LD_INT 0
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: LD_INT 0
42093: PUSH
42094: LD_INT 1
42096: NEG
42097: PUSH
42098: EMPTY
42099: LIST
42100: LIST
42101: PUSH
42102: LD_INT 1
42104: PUSH
42105: LD_INT 0
42107: PUSH
42108: EMPTY
42109: LIST
42110: LIST
42111: PUSH
42112: LD_INT 1
42114: PUSH
42115: LD_INT 1
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PUSH
42122: LD_INT 0
42124: PUSH
42125: LD_INT 1
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: PUSH
42132: LD_INT 1
42134: NEG
42135: PUSH
42136: LD_INT 0
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: PUSH
42143: LD_INT 1
42145: NEG
42146: PUSH
42147: LD_INT 1
42149: NEG
42150: PUSH
42151: EMPTY
42152: LIST
42153: LIST
42154: PUSH
42155: LD_INT 1
42157: NEG
42158: PUSH
42159: LD_INT 2
42161: NEG
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: PUSH
42167: LD_INT 0
42169: PUSH
42170: LD_INT 2
42172: NEG
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 1
42180: PUSH
42181: LD_INT 1
42183: NEG
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: LD_INT 1
42191: PUSH
42192: LD_INT 2
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: PUSH
42199: LD_INT 0
42201: PUSH
42202: LD_INT 2
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: LD_INT 1
42211: NEG
42212: PUSH
42213: LD_INT 1
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: PUSH
42220: LD_INT 1
42222: PUSH
42223: LD_INT 3
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: PUSH
42230: LD_INT 0
42232: PUSH
42233: LD_INT 3
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: LD_INT 1
42242: NEG
42243: PUSH
42244: LD_INT 2
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: LIST
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42269: LD_ADDR_VAR 0 12
42273: PUSH
42274: LD_INT 0
42276: PUSH
42277: LD_INT 0
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: LD_INT 0
42286: PUSH
42287: LD_INT 1
42289: NEG
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: PUSH
42295: LD_INT 1
42297: PUSH
42298: LD_INT 0
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: PUSH
42305: LD_INT 1
42307: PUSH
42308: LD_INT 1
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: LD_INT 0
42317: PUSH
42318: LD_INT 1
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: LD_INT 1
42327: NEG
42328: PUSH
42329: LD_INT 0
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: LD_INT 1
42338: NEG
42339: PUSH
42340: LD_INT 1
42342: NEG
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: PUSH
42348: LD_INT 1
42350: PUSH
42351: LD_INT 1
42353: NEG
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: PUSH
42359: LD_INT 2
42361: PUSH
42362: LD_INT 0
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: LD_INT 2
42371: PUSH
42372: LD_INT 1
42374: PUSH
42375: EMPTY
42376: LIST
42377: LIST
42378: PUSH
42379: LD_INT 1
42381: NEG
42382: PUSH
42383: LD_INT 1
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 2
42392: NEG
42393: PUSH
42394: LD_INT 0
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 2
42403: NEG
42404: PUSH
42405: LD_INT 1
42407: NEG
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: LD_INT 2
42415: NEG
42416: PUSH
42417: LD_INT 1
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: PUSH
42424: LD_INT 3
42426: NEG
42427: PUSH
42428: LD_INT 0
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: LD_INT 3
42437: NEG
42438: PUSH
42439: LD_INT 1
42441: NEG
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42465: LD_ADDR_VAR 0 13
42469: PUSH
42470: LD_INT 0
42472: PUSH
42473: LD_INT 0
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: LD_INT 0
42482: PUSH
42483: LD_INT 1
42485: NEG
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: PUSH
42491: LD_INT 1
42493: PUSH
42494: LD_INT 0
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: PUSH
42501: LD_INT 1
42503: PUSH
42504: LD_INT 1
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: LD_INT 0
42513: PUSH
42514: LD_INT 1
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 1
42523: NEG
42524: PUSH
42525: LD_INT 0
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: LD_INT 1
42534: NEG
42535: PUSH
42536: LD_INT 1
42538: NEG
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: LD_INT 1
42546: NEG
42547: PUSH
42548: LD_INT 2
42550: NEG
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: PUSH
42556: LD_INT 2
42558: PUSH
42559: LD_INT 1
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: PUSH
42566: LD_INT 2
42568: PUSH
42569: LD_INT 2
42571: PUSH
42572: EMPTY
42573: LIST
42574: LIST
42575: PUSH
42576: LD_INT 1
42578: PUSH
42579: LD_INT 2
42581: PUSH
42582: EMPTY
42583: LIST
42584: LIST
42585: PUSH
42586: LD_INT 2
42588: NEG
42589: PUSH
42590: LD_INT 1
42592: NEG
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 2
42600: NEG
42601: PUSH
42602: LD_INT 2
42604: NEG
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: LD_INT 2
42612: NEG
42613: PUSH
42614: LD_INT 3
42616: NEG
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: PUSH
42622: LD_INT 3
42624: NEG
42625: PUSH
42626: LD_INT 2
42628: NEG
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 3
42636: NEG
42637: PUSH
42638: LD_INT 3
42640: NEG
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: LIST
42650: LIST
42651: LIST
42652: LIST
42653: LIST
42654: LIST
42655: LIST
42656: LIST
42657: LIST
42658: LIST
42659: LIST
42660: LIST
42661: LIST
42662: LIST
42663: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42664: LD_ADDR_VAR 0 14
42668: PUSH
42669: LD_INT 0
42671: PUSH
42672: LD_INT 0
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: PUSH
42679: LD_INT 0
42681: PUSH
42682: LD_INT 1
42684: NEG
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: LD_INT 1
42692: PUSH
42693: LD_INT 0
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: LD_INT 1
42702: PUSH
42703: LD_INT 1
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: PUSH
42710: LD_INT 0
42712: PUSH
42713: LD_INT 1
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: PUSH
42720: LD_INT 1
42722: NEG
42723: PUSH
42724: LD_INT 0
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 1
42733: NEG
42734: PUSH
42735: LD_INT 1
42737: NEG
42738: PUSH
42739: EMPTY
42740: LIST
42741: LIST
42742: PUSH
42743: LD_INT 1
42745: NEG
42746: PUSH
42747: LD_INT 2
42749: NEG
42750: PUSH
42751: EMPTY
42752: LIST
42753: LIST
42754: PUSH
42755: LD_INT 0
42757: PUSH
42758: LD_INT 2
42760: NEG
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: PUSH
42766: LD_INT 1
42768: PUSH
42769: LD_INT 1
42771: NEG
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 1
42779: PUSH
42780: LD_INT 2
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: LD_INT 0
42789: PUSH
42790: LD_INT 2
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: PUSH
42797: LD_INT 1
42799: NEG
42800: PUSH
42801: LD_INT 1
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: PUSH
42808: LD_INT 1
42810: NEG
42811: PUSH
42812: LD_INT 3
42814: NEG
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: LD_INT 0
42822: PUSH
42823: LD_INT 3
42825: NEG
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: LD_INT 1
42833: PUSH
42834: LD_INT 2
42836: NEG
42837: PUSH
42838: EMPTY
42839: LIST
42840: LIST
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: LIST
42853: LIST
42854: LIST
42855: LIST
42856: LIST
42857: LIST
42858: LIST
42859: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42860: LD_ADDR_VAR 0 15
42864: PUSH
42865: LD_INT 0
42867: PUSH
42868: LD_INT 0
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: PUSH
42875: LD_INT 0
42877: PUSH
42878: LD_INT 1
42880: NEG
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: PUSH
42886: LD_INT 1
42888: PUSH
42889: LD_INT 0
42891: PUSH
42892: EMPTY
42893: LIST
42894: LIST
42895: PUSH
42896: LD_INT 1
42898: PUSH
42899: LD_INT 1
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: PUSH
42906: LD_INT 0
42908: PUSH
42909: LD_INT 1
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 1
42918: NEG
42919: PUSH
42920: LD_INT 0
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: LD_INT 1
42929: NEG
42930: PUSH
42931: LD_INT 1
42933: NEG
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: PUSH
42939: LD_INT 1
42941: PUSH
42942: LD_INT 1
42944: NEG
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: PUSH
42950: LD_INT 2
42952: PUSH
42953: LD_INT 0
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 2
42962: PUSH
42963: LD_INT 1
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: LD_INT 1
42972: NEG
42973: PUSH
42974: LD_INT 1
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: PUSH
42981: LD_INT 2
42983: NEG
42984: PUSH
42985: LD_INT 0
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: PUSH
42992: LD_INT 2
42994: NEG
42995: PUSH
42996: LD_INT 1
42998: NEG
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: LD_INT 2
43006: PUSH
43007: LD_INT 1
43009: NEG
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: LD_INT 3
43017: PUSH
43018: LD_INT 0
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 3
43027: PUSH
43028: LD_INT 1
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: LIST
43039: LIST
43040: LIST
43041: LIST
43042: LIST
43043: LIST
43044: LIST
43045: LIST
43046: LIST
43047: LIST
43048: LIST
43049: LIST
43050: LIST
43051: LIST
43052: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43053: LD_ADDR_VAR 0 16
43057: PUSH
43058: LD_INT 0
43060: PUSH
43061: LD_INT 0
43063: PUSH
43064: EMPTY
43065: LIST
43066: LIST
43067: PUSH
43068: LD_INT 0
43070: PUSH
43071: LD_INT 1
43073: NEG
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: PUSH
43079: LD_INT 1
43081: PUSH
43082: LD_INT 0
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: PUSH
43089: LD_INT 1
43091: PUSH
43092: LD_INT 1
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: PUSH
43099: LD_INT 0
43101: PUSH
43102: LD_INT 1
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: LD_INT 1
43111: NEG
43112: PUSH
43113: LD_INT 0
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: LD_INT 1
43122: NEG
43123: PUSH
43124: LD_INT 1
43126: NEG
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: PUSH
43132: LD_INT 1
43134: NEG
43135: PUSH
43136: LD_INT 2
43138: NEG
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: LD_INT 2
43146: PUSH
43147: LD_INT 1
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 2
43156: PUSH
43157: LD_INT 2
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 1
43166: PUSH
43167: LD_INT 2
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 2
43176: NEG
43177: PUSH
43178: LD_INT 1
43180: NEG
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: LD_INT 2
43188: NEG
43189: PUSH
43190: LD_INT 2
43192: NEG
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: LD_INT 3
43200: PUSH
43201: LD_INT 2
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: PUSH
43208: LD_INT 3
43210: PUSH
43211: LD_INT 3
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 2
43220: PUSH
43221: LD_INT 3
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: LIST
43243: LIST
43244: LIST
43245: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43246: LD_ADDR_VAR 0 17
43250: PUSH
43251: LD_INT 0
43253: PUSH
43254: LD_INT 0
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: LD_INT 0
43263: PUSH
43264: LD_INT 1
43266: NEG
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PUSH
43272: LD_INT 1
43274: PUSH
43275: LD_INT 0
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: PUSH
43282: LD_INT 1
43284: PUSH
43285: LD_INT 1
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 0
43294: PUSH
43295: LD_INT 1
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: PUSH
43302: LD_INT 1
43304: NEG
43305: PUSH
43306: LD_INT 0
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 1
43315: NEG
43316: PUSH
43317: LD_INT 1
43319: NEG
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: PUSH
43325: LD_INT 1
43327: NEG
43328: PUSH
43329: LD_INT 2
43331: NEG
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 0
43339: PUSH
43340: LD_INT 2
43342: NEG
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 1
43350: PUSH
43351: LD_INT 1
43353: NEG
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PUSH
43359: LD_INT 2
43361: PUSH
43362: LD_INT 0
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: PUSH
43369: LD_INT 2
43371: PUSH
43372: LD_INT 1
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: PUSH
43379: LD_INT 2
43381: PUSH
43382: LD_INT 2
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: LD_INT 1
43391: PUSH
43392: LD_INT 2
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PUSH
43399: LD_INT 0
43401: PUSH
43402: LD_INT 2
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: PUSH
43409: LD_INT 1
43411: NEG
43412: PUSH
43413: LD_INT 1
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: PUSH
43420: LD_INT 2
43422: NEG
43423: PUSH
43424: LD_INT 0
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_INT 2
43433: NEG
43434: PUSH
43435: LD_INT 1
43437: NEG
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PUSH
43443: LD_INT 2
43445: NEG
43446: PUSH
43447: LD_INT 2
43449: NEG
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43476: LD_ADDR_VAR 0 18
43480: PUSH
43481: LD_INT 0
43483: PUSH
43484: LD_INT 0
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 0
43493: PUSH
43494: LD_INT 1
43496: NEG
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: PUSH
43502: LD_INT 1
43504: PUSH
43505: LD_INT 0
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 1
43514: PUSH
43515: LD_INT 1
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 0
43524: PUSH
43525: LD_INT 1
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 1
43534: NEG
43535: PUSH
43536: LD_INT 0
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 1
43545: NEG
43546: PUSH
43547: LD_INT 1
43549: NEG
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: LD_INT 1
43557: NEG
43558: PUSH
43559: LD_INT 2
43561: NEG
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: LD_INT 0
43569: PUSH
43570: LD_INT 2
43572: NEG
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: LD_INT 1
43580: PUSH
43581: LD_INT 1
43583: NEG
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: LD_INT 2
43591: PUSH
43592: LD_INT 0
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 2
43601: PUSH
43602: LD_INT 1
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: LD_INT 2
43611: PUSH
43612: LD_INT 2
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 1
43621: PUSH
43622: LD_INT 2
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: LD_INT 0
43631: PUSH
43632: LD_INT 2
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 1
43641: NEG
43642: PUSH
43643: LD_INT 1
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: PUSH
43650: LD_INT 2
43652: NEG
43653: PUSH
43654: LD_INT 0
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: LD_INT 2
43663: NEG
43664: PUSH
43665: LD_INT 1
43667: NEG
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 2
43675: NEG
43676: PUSH
43677: LD_INT 2
43679: NEG
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: LIST
43693: LIST
43694: LIST
43695: LIST
43696: LIST
43697: LIST
43698: LIST
43699: LIST
43700: LIST
43701: LIST
43702: LIST
43703: LIST
43704: LIST
43705: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43706: LD_ADDR_VAR 0 19
43710: PUSH
43711: LD_INT 0
43713: PUSH
43714: LD_INT 0
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 0
43723: PUSH
43724: LD_INT 1
43726: NEG
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: LD_INT 1
43734: PUSH
43735: LD_INT 0
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: LD_INT 1
43744: PUSH
43745: LD_INT 1
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 0
43754: PUSH
43755: LD_INT 1
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: LD_INT 1
43764: NEG
43765: PUSH
43766: LD_INT 0
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 1
43775: NEG
43776: PUSH
43777: LD_INT 1
43779: NEG
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 1
43787: NEG
43788: PUSH
43789: LD_INT 2
43791: NEG
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: LD_INT 0
43799: PUSH
43800: LD_INT 2
43802: NEG
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 1
43810: PUSH
43811: LD_INT 1
43813: NEG
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 2
43821: PUSH
43822: LD_INT 0
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: LD_INT 2
43831: PUSH
43832: LD_INT 1
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: LD_INT 2
43841: PUSH
43842: LD_INT 2
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: LD_INT 1
43851: PUSH
43852: LD_INT 2
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: PUSH
43859: LD_INT 0
43861: PUSH
43862: LD_INT 2
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: PUSH
43869: LD_INT 1
43871: NEG
43872: PUSH
43873: LD_INT 1
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: PUSH
43880: LD_INT 2
43882: NEG
43883: PUSH
43884: LD_INT 0
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PUSH
43891: LD_INT 2
43893: NEG
43894: PUSH
43895: LD_INT 1
43897: NEG
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 2
43905: NEG
43906: PUSH
43907: LD_INT 2
43909: NEG
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: LIST
43923: LIST
43924: LIST
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: LIST
43935: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43936: LD_ADDR_VAR 0 20
43940: PUSH
43941: LD_INT 0
43943: PUSH
43944: LD_INT 0
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: PUSH
43951: LD_INT 0
43953: PUSH
43954: LD_INT 1
43956: NEG
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: PUSH
43962: LD_INT 1
43964: PUSH
43965: LD_INT 0
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: PUSH
43972: LD_INT 1
43974: PUSH
43975: LD_INT 1
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: PUSH
43982: LD_INT 0
43984: PUSH
43985: LD_INT 1
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: LD_INT 1
43994: NEG
43995: PUSH
43996: LD_INT 0
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 1
44005: NEG
44006: PUSH
44007: LD_INT 1
44009: NEG
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: LD_INT 1
44017: NEG
44018: PUSH
44019: LD_INT 2
44021: NEG
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 0
44029: PUSH
44030: LD_INT 2
44032: NEG
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: LD_INT 1
44040: PUSH
44041: LD_INT 1
44043: NEG
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 2
44051: PUSH
44052: LD_INT 0
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: LD_INT 2
44061: PUSH
44062: LD_INT 1
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 2
44071: PUSH
44072: LD_INT 2
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 1
44081: PUSH
44082: LD_INT 2
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PUSH
44089: LD_INT 0
44091: PUSH
44092: LD_INT 2
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 1
44101: NEG
44102: PUSH
44103: LD_INT 1
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: LD_INT 2
44112: NEG
44113: PUSH
44114: LD_INT 0
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: LD_INT 2
44123: NEG
44124: PUSH
44125: LD_INT 1
44127: NEG
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 2
44135: NEG
44136: PUSH
44137: LD_INT 2
44139: NEG
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: LIST
44153: LIST
44154: LIST
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44166: LD_ADDR_VAR 0 21
44170: PUSH
44171: LD_INT 0
44173: PUSH
44174: LD_INT 0
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 0
44183: PUSH
44184: LD_INT 1
44186: NEG
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 1
44194: PUSH
44195: LD_INT 0
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: LD_INT 1
44204: PUSH
44205: LD_INT 1
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 0
44214: PUSH
44215: LD_INT 1
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 1
44224: NEG
44225: PUSH
44226: LD_INT 0
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: LD_INT 1
44235: NEG
44236: PUSH
44237: LD_INT 1
44239: NEG
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: PUSH
44245: LD_INT 1
44247: NEG
44248: PUSH
44249: LD_INT 2
44251: NEG
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_INT 0
44259: PUSH
44260: LD_INT 2
44262: NEG
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 1
44270: PUSH
44271: LD_INT 1
44273: NEG
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 2
44281: PUSH
44282: LD_INT 0
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 2
44291: PUSH
44292: LD_INT 1
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: LD_INT 2
44301: PUSH
44302: LD_INT 2
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: LD_INT 1
44311: PUSH
44312: LD_INT 2
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: PUSH
44319: LD_INT 0
44321: PUSH
44322: LD_INT 2
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: LD_INT 1
44331: NEG
44332: PUSH
44333: LD_INT 1
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 2
44342: NEG
44343: PUSH
44344: LD_INT 0
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PUSH
44351: LD_INT 2
44353: NEG
44354: PUSH
44355: LD_INT 1
44357: NEG
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: PUSH
44363: LD_INT 2
44365: NEG
44366: PUSH
44367: LD_INT 2
44369: NEG
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44396: LD_ADDR_VAR 0 22
44400: PUSH
44401: LD_INT 0
44403: PUSH
44404: LD_INT 0
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PUSH
44411: LD_INT 0
44413: PUSH
44414: LD_INT 1
44416: NEG
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: LD_INT 1
44424: PUSH
44425: LD_INT 0
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: LD_INT 1
44434: PUSH
44435: LD_INT 1
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 0
44444: PUSH
44445: LD_INT 1
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: LD_INT 1
44454: NEG
44455: PUSH
44456: LD_INT 0
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 1
44465: NEG
44466: PUSH
44467: LD_INT 1
44469: NEG
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: LD_INT 1
44477: NEG
44478: PUSH
44479: LD_INT 2
44481: NEG
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: LD_INT 0
44489: PUSH
44490: LD_INT 2
44492: NEG
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 1
44500: PUSH
44501: LD_INT 1
44503: NEG
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: PUSH
44509: LD_INT 2
44511: PUSH
44512: LD_INT 0
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 2
44521: PUSH
44522: LD_INT 1
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 2
44531: PUSH
44532: LD_INT 2
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 1
44541: PUSH
44542: LD_INT 2
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: LD_INT 0
44551: PUSH
44552: LD_INT 2
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: LD_INT 1
44561: NEG
44562: PUSH
44563: LD_INT 1
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 2
44572: NEG
44573: PUSH
44574: LD_INT 0
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 2
44583: NEG
44584: PUSH
44585: LD_INT 1
44587: NEG
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 2
44595: NEG
44596: PUSH
44597: LD_INT 2
44599: NEG
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: LIST
44625: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44626: LD_ADDR_VAR 0 23
44630: PUSH
44631: LD_INT 0
44633: PUSH
44634: LD_INT 0
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 0
44643: PUSH
44644: LD_INT 1
44646: NEG
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: PUSH
44652: LD_INT 1
44654: PUSH
44655: LD_INT 0
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: PUSH
44662: LD_INT 1
44664: PUSH
44665: LD_INT 1
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 0
44674: PUSH
44675: LD_INT 1
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: LD_INT 1
44684: NEG
44685: PUSH
44686: LD_INT 0
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 1
44695: NEG
44696: PUSH
44697: LD_INT 1
44699: NEG
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: PUSH
44705: LD_INT 1
44707: NEG
44708: PUSH
44709: LD_INT 2
44711: NEG
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PUSH
44717: LD_INT 0
44719: PUSH
44720: LD_INT 2
44722: NEG
44723: PUSH
44724: EMPTY
44725: LIST
44726: LIST
44727: PUSH
44728: LD_INT 1
44730: PUSH
44731: LD_INT 1
44733: NEG
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: LD_INT 2
44741: PUSH
44742: LD_INT 0
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: LD_INT 2
44751: PUSH
44752: LD_INT 1
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: LD_INT 2
44761: PUSH
44762: LD_INT 2
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: LD_INT 1
44771: PUSH
44772: LD_INT 2
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: PUSH
44779: LD_INT 0
44781: PUSH
44782: LD_INT 2
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: LD_INT 1
44791: NEG
44792: PUSH
44793: LD_INT 1
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 2
44802: NEG
44803: PUSH
44804: LD_INT 0
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 2
44813: NEG
44814: PUSH
44815: LD_INT 1
44817: NEG
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: LD_INT 2
44825: NEG
44826: PUSH
44827: LD_INT 2
44829: NEG
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: PUSH
44835: LD_INT 2
44837: NEG
44838: PUSH
44839: LD_INT 3
44841: NEG
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: PUSH
44847: LD_INT 1
44849: NEG
44850: PUSH
44851: LD_INT 3
44853: NEG
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 1
44861: PUSH
44862: LD_INT 2
44864: NEG
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 2
44872: PUSH
44873: LD_INT 1
44875: NEG
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: LIST
44885: LIST
44886: LIST
44887: LIST
44888: LIST
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: LIST
44894: LIST
44895: LIST
44896: LIST
44897: LIST
44898: LIST
44899: LIST
44900: LIST
44901: LIST
44902: LIST
44903: LIST
44904: LIST
44905: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44906: LD_ADDR_VAR 0 24
44910: PUSH
44911: LD_INT 0
44913: PUSH
44914: LD_INT 0
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 0
44923: PUSH
44924: LD_INT 1
44926: NEG
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 1
44934: PUSH
44935: LD_INT 0
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 1
44944: PUSH
44945: LD_INT 1
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 0
44954: PUSH
44955: LD_INT 1
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: LD_INT 1
44964: NEG
44965: PUSH
44966: LD_INT 0
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 1
44975: NEG
44976: PUSH
44977: LD_INT 1
44979: NEG
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: PUSH
44985: LD_INT 1
44987: NEG
44988: PUSH
44989: LD_INT 2
44991: NEG
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 0
44999: PUSH
45000: LD_INT 2
45002: NEG
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 1
45010: PUSH
45011: LD_INT 1
45013: NEG
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 2
45021: PUSH
45022: LD_INT 0
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 2
45031: PUSH
45032: LD_INT 1
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: LD_INT 2
45041: PUSH
45042: LD_INT 2
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 1
45051: PUSH
45052: LD_INT 2
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 0
45061: PUSH
45062: LD_INT 2
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: LD_INT 1
45071: NEG
45072: PUSH
45073: LD_INT 1
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: LD_INT 2
45082: NEG
45083: PUSH
45084: LD_INT 0
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: LD_INT 2
45093: NEG
45094: PUSH
45095: LD_INT 1
45097: NEG
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 2
45105: NEG
45106: PUSH
45107: LD_INT 2
45109: NEG
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 1
45117: PUSH
45118: LD_INT 2
45120: NEG
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: PUSH
45126: LD_INT 2
45128: PUSH
45129: LD_INT 1
45131: NEG
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 3
45139: PUSH
45140: LD_INT 1
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 3
45149: PUSH
45150: LD_INT 2
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: LIST
45163: LIST
45164: LIST
45165: LIST
45166: LIST
45167: LIST
45168: LIST
45169: LIST
45170: LIST
45171: LIST
45172: LIST
45173: LIST
45174: LIST
45175: LIST
45176: LIST
45177: LIST
45178: LIST
45179: LIST
45180: LIST
45181: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
45182: LD_ADDR_VAR 0 25
45186: PUSH
45187: LD_INT 0
45189: PUSH
45190: LD_INT 0
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: PUSH
45197: LD_INT 0
45199: PUSH
45200: LD_INT 1
45202: NEG
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: PUSH
45208: LD_INT 1
45210: PUSH
45211: LD_INT 0
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: LD_INT 1
45220: PUSH
45221: LD_INT 1
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: LD_INT 0
45230: PUSH
45231: LD_INT 1
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 1
45240: NEG
45241: PUSH
45242: LD_INT 0
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: LD_INT 1
45251: NEG
45252: PUSH
45253: LD_INT 1
45255: NEG
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 1
45263: NEG
45264: PUSH
45265: LD_INT 2
45267: NEG
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 0
45275: PUSH
45276: LD_INT 2
45278: NEG
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: LD_INT 1
45286: PUSH
45287: LD_INT 1
45289: NEG
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_INT 2
45297: PUSH
45298: LD_INT 0
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: LD_INT 2
45307: PUSH
45308: LD_INT 1
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: LD_INT 2
45317: PUSH
45318: LD_INT 2
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 1
45327: PUSH
45328: LD_INT 2
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 0
45337: PUSH
45338: LD_INT 2
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 1
45347: NEG
45348: PUSH
45349: LD_INT 1
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 2
45358: NEG
45359: PUSH
45360: LD_INT 0
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 2
45369: NEG
45370: PUSH
45371: LD_INT 1
45373: NEG
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 2
45381: NEG
45382: PUSH
45383: LD_INT 2
45385: NEG
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: PUSH
45391: LD_INT 3
45393: PUSH
45394: LD_INT 1
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: LD_INT 3
45403: PUSH
45404: LD_INT 2
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 2
45413: PUSH
45414: LD_INT 3
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 1
45423: PUSH
45424: LD_INT 3
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: LIST
45441: LIST
45442: LIST
45443: LIST
45444: LIST
45445: LIST
45446: LIST
45447: LIST
45448: LIST
45449: LIST
45450: LIST
45451: LIST
45452: LIST
45453: LIST
45454: LIST
45455: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45456: LD_ADDR_VAR 0 26
45460: PUSH
45461: LD_INT 0
45463: PUSH
45464: LD_INT 0
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: LD_INT 0
45473: PUSH
45474: LD_INT 1
45476: NEG
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: LD_INT 1
45484: PUSH
45485: LD_INT 0
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: LD_INT 1
45494: PUSH
45495: LD_INT 1
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PUSH
45502: LD_INT 0
45504: PUSH
45505: LD_INT 1
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 1
45514: NEG
45515: PUSH
45516: LD_INT 0
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 1
45525: NEG
45526: PUSH
45527: LD_INT 1
45529: NEG
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: PUSH
45535: LD_INT 1
45537: NEG
45538: PUSH
45539: LD_INT 2
45541: NEG
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: LD_INT 0
45549: PUSH
45550: LD_INT 2
45552: NEG
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: PUSH
45558: LD_INT 1
45560: PUSH
45561: LD_INT 1
45563: NEG
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 2
45571: PUSH
45572: LD_INT 0
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 2
45581: PUSH
45582: LD_INT 1
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 2
45591: PUSH
45592: LD_INT 2
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 1
45601: PUSH
45602: LD_INT 2
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 0
45611: PUSH
45612: LD_INT 2
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 1
45621: NEG
45622: PUSH
45623: LD_INT 1
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 2
45632: NEG
45633: PUSH
45634: LD_INT 0
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 2
45643: NEG
45644: PUSH
45645: LD_INT 1
45647: NEG
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 2
45655: NEG
45656: PUSH
45657: LD_INT 2
45659: NEG
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 2
45667: PUSH
45668: LD_INT 3
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 1
45677: PUSH
45678: LD_INT 3
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 1
45687: NEG
45688: PUSH
45689: LD_INT 2
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 2
45698: NEG
45699: PUSH
45700: LD_INT 1
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45732: LD_ADDR_VAR 0 27
45736: PUSH
45737: LD_INT 0
45739: PUSH
45740: LD_INT 0
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 0
45749: PUSH
45750: LD_INT 1
45752: NEG
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 1
45760: PUSH
45761: LD_INT 0
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 1
45770: PUSH
45771: LD_INT 1
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 0
45780: PUSH
45781: LD_INT 1
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 1
45790: NEG
45791: PUSH
45792: LD_INT 0
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 1
45801: NEG
45802: PUSH
45803: LD_INT 1
45805: NEG
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 1
45813: NEG
45814: PUSH
45815: LD_INT 2
45817: NEG
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: LD_INT 0
45825: PUSH
45826: LD_INT 2
45828: NEG
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 1
45836: PUSH
45837: LD_INT 1
45839: NEG
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 2
45847: PUSH
45848: LD_INT 0
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: LD_INT 2
45857: PUSH
45858: LD_INT 1
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 2
45867: PUSH
45868: LD_INT 2
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 1
45877: PUSH
45878: LD_INT 2
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 0
45887: PUSH
45888: LD_INT 2
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 1
45897: NEG
45898: PUSH
45899: LD_INT 1
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 2
45908: NEG
45909: PUSH
45910: LD_INT 0
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: LD_INT 2
45919: NEG
45920: PUSH
45921: LD_INT 1
45923: NEG
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 2
45931: NEG
45932: PUSH
45933: LD_INT 2
45935: NEG
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: LD_INT 1
45943: NEG
45944: PUSH
45945: LD_INT 2
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: LD_INT 2
45954: NEG
45955: PUSH
45956: LD_INT 1
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PUSH
45963: LD_INT 3
45965: NEG
45966: PUSH
45967: LD_INT 1
45969: NEG
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 3
45977: NEG
45978: PUSH
45979: LD_INT 2
45981: NEG
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: LIST
46006: LIST
46007: LIST
46008: LIST
46009: LIST
46010: LIST
46011: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46012: LD_ADDR_VAR 0 28
46016: PUSH
46017: LD_INT 0
46019: PUSH
46020: LD_INT 0
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 0
46029: PUSH
46030: LD_INT 1
46032: NEG
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 1
46040: PUSH
46041: LD_INT 0
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 1
46050: PUSH
46051: LD_INT 1
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 0
46060: PUSH
46061: LD_INT 1
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 1
46070: NEG
46071: PUSH
46072: LD_INT 0
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 1
46081: NEG
46082: PUSH
46083: LD_INT 1
46085: NEG
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 1
46093: NEG
46094: PUSH
46095: LD_INT 2
46097: NEG
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 0
46105: PUSH
46106: LD_INT 2
46108: NEG
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: LD_INT 1
46116: PUSH
46117: LD_INT 1
46119: NEG
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 2
46127: PUSH
46128: LD_INT 0
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 2
46137: PUSH
46138: LD_INT 1
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 2
46147: PUSH
46148: LD_INT 2
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 1
46157: PUSH
46158: LD_INT 2
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: PUSH
46165: LD_INT 0
46167: PUSH
46168: LD_INT 2
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 1
46177: NEG
46178: PUSH
46179: LD_INT 1
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 2
46188: NEG
46189: PUSH
46190: LD_INT 0
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 2
46199: NEG
46200: PUSH
46201: LD_INT 1
46203: NEG
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 2
46211: NEG
46212: PUSH
46213: LD_INT 2
46215: NEG
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: PUSH
46221: LD_INT 2
46223: NEG
46224: PUSH
46225: LD_INT 3
46227: NEG
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 1
46235: NEG
46236: PUSH
46237: LD_INT 3
46239: NEG
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 3
46247: NEG
46248: PUSH
46249: LD_INT 1
46251: NEG
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 3
46259: NEG
46260: PUSH
46261: LD_INT 2
46263: NEG
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: LIST
46293: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46294: LD_ADDR_VAR 0 29
46298: PUSH
46299: LD_INT 0
46301: PUSH
46302: LD_INT 0
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 0
46311: PUSH
46312: LD_INT 1
46314: NEG
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 1
46322: PUSH
46323: LD_INT 0
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 1
46332: PUSH
46333: LD_INT 1
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 0
46342: PUSH
46343: LD_INT 1
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 1
46352: NEG
46353: PUSH
46354: LD_INT 0
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 1
46363: NEG
46364: PUSH
46365: LD_INT 1
46367: NEG
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: LD_INT 1
46375: NEG
46376: PUSH
46377: LD_INT 2
46379: NEG
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 0
46387: PUSH
46388: LD_INT 2
46390: NEG
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 1
46398: PUSH
46399: LD_INT 1
46401: NEG
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 2
46409: PUSH
46410: LD_INT 0
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: PUSH
46417: LD_INT 2
46419: PUSH
46420: LD_INT 1
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 1
46429: PUSH
46430: LD_INT 2
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 0
46439: PUSH
46440: LD_INT 2
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 1
46449: NEG
46450: PUSH
46451: LD_INT 1
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 2
46460: NEG
46461: PUSH
46462: LD_INT 1
46464: NEG
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 2
46472: NEG
46473: PUSH
46474: LD_INT 2
46476: NEG
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: LD_INT 2
46484: NEG
46485: PUSH
46486: LD_INT 3
46488: NEG
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 2
46496: PUSH
46497: LD_INT 1
46499: NEG
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 3
46507: PUSH
46508: LD_INT 1
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 1
46517: PUSH
46518: LD_INT 3
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: LD_INT 1
46527: NEG
46528: PUSH
46529: LD_INT 2
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 3
46538: NEG
46539: PUSH
46540: LD_INT 2
46542: NEG
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46573: LD_ADDR_VAR 0 30
46577: PUSH
46578: LD_INT 0
46580: PUSH
46581: LD_INT 0
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 0
46590: PUSH
46591: LD_INT 1
46593: NEG
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 1
46601: PUSH
46602: LD_INT 0
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 1
46611: PUSH
46612: LD_INT 1
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: PUSH
46619: LD_INT 0
46621: PUSH
46622: LD_INT 1
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 1
46631: NEG
46632: PUSH
46633: LD_INT 0
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 1
46642: NEG
46643: PUSH
46644: LD_INT 1
46646: NEG
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 1
46654: NEG
46655: PUSH
46656: LD_INT 2
46658: NEG
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 0
46666: PUSH
46667: LD_INT 2
46669: NEG
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 1
46677: PUSH
46678: LD_INT 1
46680: NEG
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 2
46688: PUSH
46689: LD_INT 0
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 2
46698: PUSH
46699: LD_INT 1
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 2
46708: PUSH
46709: LD_INT 2
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 1
46718: PUSH
46719: LD_INT 2
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 1
46728: NEG
46729: PUSH
46730: LD_INT 1
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: LD_INT 2
46739: NEG
46740: PUSH
46741: LD_INT 0
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 2
46750: NEG
46751: PUSH
46752: LD_INT 1
46754: NEG
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PUSH
46760: LD_INT 1
46762: NEG
46763: PUSH
46764: LD_INT 3
46766: NEG
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: LD_INT 1
46774: PUSH
46775: LD_INT 2
46777: NEG
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: LD_INT 3
46785: PUSH
46786: LD_INT 2
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: LD_INT 2
46795: PUSH
46796: LD_INT 3
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 2
46805: NEG
46806: PUSH
46807: LD_INT 1
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 3
46816: NEG
46817: PUSH
46818: LD_INT 1
46820: NEG
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46851: LD_ADDR_VAR 0 31
46855: PUSH
46856: LD_INT 0
46858: PUSH
46859: LD_INT 0
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 0
46868: PUSH
46869: LD_INT 1
46871: NEG
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 1
46879: PUSH
46880: LD_INT 0
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: LD_INT 1
46889: PUSH
46890: LD_INT 1
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: LD_INT 0
46899: PUSH
46900: LD_INT 1
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 1
46909: NEG
46910: PUSH
46911: LD_INT 0
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 1
46920: NEG
46921: PUSH
46922: LD_INT 1
46924: NEG
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 1
46932: NEG
46933: PUSH
46934: LD_INT 2
46936: NEG
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 1
46944: PUSH
46945: LD_INT 1
46947: NEG
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 2
46955: PUSH
46956: LD_INT 0
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 2
46965: PUSH
46966: LD_INT 1
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 2
46975: PUSH
46976: LD_INT 2
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 1
46985: PUSH
46986: LD_INT 2
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 0
46995: PUSH
46996: LD_INT 2
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: LD_INT 1
47005: NEG
47006: PUSH
47007: LD_INT 1
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: LD_INT 2
47016: NEG
47017: PUSH
47018: LD_INT 1
47020: NEG
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 2
47028: NEG
47029: PUSH
47030: LD_INT 2
47032: NEG
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 2
47040: NEG
47041: PUSH
47042: LD_INT 3
47044: NEG
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 2
47052: PUSH
47053: LD_INT 1
47055: NEG
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: LD_INT 3
47063: PUSH
47064: LD_INT 1
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 1
47073: PUSH
47074: LD_INT 3
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 1
47083: NEG
47084: PUSH
47085: LD_INT 2
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 3
47094: NEG
47095: PUSH
47096: LD_INT 2
47098: NEG
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: LIST
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: LIST
47127: LIST
47128: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47129: LD_ADDR_VAR 0 32
47133: PUSH
47134: LD_INT 0
47136: PUSH
47137: LD_INT 0
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 0
47146: PUSH
47147: LD_INT 1
47149: NEG
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 1
47157: PUSH
47158: LD_INT 0
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 1
47167: PUSH
47168: LD_INT 1
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: LD_INT 0
47177: PUSH
47178: LD_INT 1
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 1
47187: NEG
47188: PUSH
47189: LD_INT 0
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 1
47198: NEG
47199: PUSH
47200: LD_INT 1
47202: NEG
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 1
47210: NEG
47211: PUSH
47212: LD_INT 2
47214: NEG
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 0
47222: PUSH
47223: LD_INT 2
47225: NEG
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 1
47233: PUSH
47234: LD_INT 1
47236: NEG
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 2
47244: PUSH
47245: LD_INT 1
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 2
47254: PUSH
47255: LD_INT 2
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 1
47264: PUSH
47265: LD_INT 2
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: LD_INT 0
47274: PUSH
47275: LD_INT 2
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 1
47284: NEG
47285: PUSH
47286: LD_INT 1
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 2
47295: NEG
47296: PUSH
47297: LD_INT 0
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 2
47306: NEG
47307: PUSH
47308: LD_INT 1
47310: NEG
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 1
47318: NEG
47319: PUSH
47320: LD_INT 3
47322: NEG
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 1
47330: PUSH
47331: LD_INT 2
47333: NEG
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 3
47341: PUSH
47342: LD_INT 2
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 2
47351: PUSH
47352: LD_INT 3
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 2
47361: NEG
47362: PUSH
47363: LD_INT 1
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 3
47372: NEG
47373: PUSH
47374: LD_INT 1
47376: NEG
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47407: LD_ADDR_VAR 0 33
47411: PUSH
47412: LD_INT 0
47414: PUSH
47415: LD_INT 0
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 0
47424: PUSH
47425: LD_INT 1
47427: NEG
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 1
47435: PUSH
47436: LD_INT 0
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 1
47445: PUSH
47446: LD_INT 1
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 0
47455: PUSH
47456: LD_INT 1
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 1
47465: NEG
47466: PUSH
47467: LD_INT 0
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 1
47476: NEG
47477: PUSH
47478: LD_INT 1
47480: NEG
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 1
47488: NEG
47489: PUSH
47490: LD_INT 2
47492: NEG
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 1
47500: PUSH
47501: LD_INT 1
47503: NEG
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 2
47511: PUSH
47512: LD_INT 0
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 2
47521: PUSH
47522: LD_INT 1
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 1
47531: PUSH
47532: LD_INT 2
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 0
47541: PUSH
47542: LD_INT 2
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 1
47551: NEG
47552: PUSH
47553: LD_INT 1
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 2
47562: NEG
47563: PUSH
47564: LD_INT 0
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 2
47573: NEG
47574: PUSH
47575: LD_INT 1
47577: NEG
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 2
47585: NEG
47586: PUSH
47587: LD_INT 2
47589: NEG
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 2
47597: NEG
47598: PUSH
47599: LD_INT 3
47601: NEG
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 2
47609: PUSH
47610: LD_INT 1
47612: NEG
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 3
47620: PUSH
47621: LD_INT 1
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 1
47630: PUSH
47631: LD_INT 3
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: LD_INT 1
47640: NEG
47641: PUSH
47642: LD_INT 2
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 3
47651: NEG
47652: PUSH
47653: LD_INT 2
47655: NEG
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: LIST
47665: LIST
47666: LIST
47667: LIST
47668: LIST
47669: LIST
47670: LIST
47671: LIST
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: LIST
47685: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47686: LD_ADDR_VAR 0 34
47690: PUSH
47691: LD_INT 0
47693: PUSH
47694: LD_INT 0
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 0
47703: PUSH
47704: LD_INT 1
47706: NEG
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 1
47714: PUSH
47715: LD_INT 0
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 1
47724: PUSH
47725: LD_INT 1
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 0
47734: PUSH
47735: LD_INT 1
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: PUSH
47742: LD_INT 1
47744: NEG
47745: PUSH
47746: LD_INT 0
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: LD_INT 1
47755: NEG
47756: PUSH
47757: LD_INT 1
47759: NEG
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 1
47767: NEG
47768: PUSH
47769: LD_INT 2
47771: NEG
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 0
47779: PUSH
47780: LD_INT 2
47782: NEG
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 1
47790: PUSH
47791: LD_INT 1
47793: NEG
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 2
47801: PUSH
47802: LD_INT 1
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 2
47811: PUSH
47812: LD_INT 2
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: LD_INT 1
47821: PUSH
47822: LD_INT 2
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 1
47831: NEG
47832: PUSH
47833: LD_INT 1
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 2
47842: NEG
47843: PUSH
47844: LD_INT 0
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 2
47853: NEG
47854: PUSH
47855: LD_INT 1
47857: NEG
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 2
47865: NEG
47866: PUSH
47867: LD_INT 2
47869: NEG
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 1
47877: NEG
47878: PUSH
47879: LD_INT 3
47881: NEG
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 1
47889: PUSH
47890: LD_INT 2
47892: NEG
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 3
47900: PUSH
47901: LD_INT 2
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 2
47910: PUSH
47911: LD_INT 3
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 2
47920: NEG
47921: PUSH
47922: LD_INT 1
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 3
47931: NEG
47932: PUSH
47933: LD_INT 1
47935: NEG
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: LIST
47945: LIST
47946: LIST
47947: LIST
47948: LIST
47949: LIST
47950: LIST
47951: LIST
47952: LIST
47953: LIST
47954: LIST
47955: LIST
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47966: LD_ADDR_VAR 0 35
47970: PUSH
47971: LD_INT 0
47973: PUSH
47974: LD_INT 0
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 0
47983: PUSH
47984: LD_INT 1
47986: NEG
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 1
47994: PUSH
47995: LD_INT 0
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 1
48004: PUSH
48005: LD_INT 1
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 0
48014: PUSH
48015: LD_INT 1
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 1
48024: NEG
48025: PUSH
48026: LD_INT 0
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 1
48035: NEG
48036: PUSH
48037: LD_INT 1
48039: NEG
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 2
48047: PUSH
48048: LD_INT 1
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 2
48057: NEG
48058: PUSH
48059: LD_INT 1
48061: NEG
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: LIST
48077: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48078: LD_ADDR_VAR 0 36
48082: PUSH
48083: LD_INT 0
48085: PUSH
48086: LD_INT 0
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 0
48095: PUSH
48096: LD_INT 1
48098: NEG
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: PUSH
48104: LD_INT 1
48106: PUSH
48107: LD_INT 0
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 1
48116: PUSH
48117: LD_INT 1
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: LD_INT 0
48126: PUSH
48127: LD_INT 1
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 1
48136: NEG
48137: PUSH
48138: LD_INT 0
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 1
48147: NEG
48148: PUSH
48149: LD_INT 1
48151: NEG
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 1
48159: NEG
48160: PUSH
48161: LD_INT 2
48163: NEG
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: LD_INT 1
48171: PUSH
48172: LD_INT 2
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: LIST
48189: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48190: LD_ADDR_VAR 0 37
48194: PUSH
48195: LD_INT 0
48197: PUSH
48198: LD_INT 0
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 0
48207: PUSH
48208: LD_INT 1
48210: NEG
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 1
48218: PUSH
48219: LD_INT 0
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 1
48228: PUSH
48229: LD_INT 1
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 0
48238: PUSH
48239: LD_INT 1
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: LD_INT 1
48248: NEG
48249: PUSH
48250: LD_INT 0
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: LD_INT 1
48259: NEG
48260: PUSH
48261: LD_INT 1
48263: NEG
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 1
48271: PUSH
48272: LD_INT 1
48274: NEG
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 1
48282: NEG
48283: PUSH
48284: LD_INT 1
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48302: LD_ADDR_VAR 0 38
48306: PUSH
48307: LD_INT 0
48309: PUSH
48310: LD_INT 0
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 0
48319: PUSH
48320: LD_INT 1
48322: NEG
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 1
48330: PUSH
48331: LD_INT 0
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 1
48340: PUSH
48341: LD_INT 1
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 0
48350: PUSH
48351: LD_INT 1
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 1
48360: NEG
48361: PUSH
48362: LD_INT 0
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 1
48371: NEG
48372: PUSH
48373: LD_INT 1
48375: NEG
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 2
48383: PUSH
48384: LD_INT 1
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 2
48393: NEG
48394: PUSH
48395: LD_INT 1
48397: NEG
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48414: LD_ADDR_VAR 0 39
48418: PUSH
48419: LD_INT 0
48421: PUSH
48422: LD_INT 0
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 0
48431: PUSH
48432: LD_INT 1
48434: NEG
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 1
48442: PUSH
48443: LD_INT 0
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 1
48452: PUSH
48453: LD_INT 1
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: LD_INT 0
48462: PUSH
48463: LD_INT 1
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 1
48472: NEG
48473: PUSH
48474: LD_INT 0
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 1
48483: NEG
48484: PUSH
48485: LD_INT 1
48487: NEG
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 1
48495: NEG
48496: PUSH
48497: LD_INT 2
48499: NEG
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 1
48507: PUSH
48508: LD_INT 2
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48526: LD_ADDR_VAR 0 40
48530: PUSH
48531: LD_INT 0
48533: PUSH
48534: LD_INT 0
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 0
48543: PUSH
48544: LD_INT 1
48546: NEG
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 1
48554: PUSH
48555: LD_INT 0
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 1
48564: PUSH
48565: LD_INT 1
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 0
48574: PUSH
48575: LD_INT 1
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 1
48584: NEG
48585: PUSH
48586: LD_INT 0
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 1
48595: NEG
48596: PUSH
48597: LD_INT 1
48599: NEG
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 1
48607: PUSH
48608: LD_INT 1
48610: NEG
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 1
48618: NEG
48619: PUSH
48620: LD_INT 1
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: LIST
48631: LIST
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: LIST
48637: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48638: LD_ADDR_VAR 0 41
48642: PUSH
48643: LD_INT 0
48645: PUSH
48646: LD_INT 0
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: PUSH
48653: LD_INT 0
48655: PUSH
48656: LD_INT 1
48658: NEG
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: LD_INT 1
48666: PUSH
48667: LD_INT 0
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: LD_INT 1
48676: PUSH
48677: LD_INT 1
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 0
48686: PUSH
48687: LD_INT 1
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 1
48696: NEG
48697: PUSH
48698: LD_INT 0
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 1
48707: NEG
48708: PUSH
48709: LD_INT 1
48711: NEG
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 1
48719: NEG
48720: PUSH
48721: LD_INT 2
48723: NEG
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 1
48731: PUSH
48732: LD_INT 1
48734: NEG
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 2
48742: PUSH
48743: LD_INT 0
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: LD_INT 2
48752: PUSH
48753: LD_INT 1
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 2
48762: PUSH
48763: LD_INT 2
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: PUSH
48770: LD_INT 1
48772: PUSH
48773: LD_INT 2
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 1
48782: NEG
48783: PUSH
48784: LD_INT 1
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 2
48793: NEG
48794: PUSH
48795: LD_INT 0
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 2
48804: NEG
48805: PUSH
48806: LD_INT 1
48808: NEG
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 2
48816: NEG
48817: PUSH
48818: LD_INT 2
48820: NEG
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 2
48828: NEG
48829: PUSH
48830: LD_INT 3
48832: NEG
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: LD_INT 2
48840: PUSH
48841: LD_INT 1
48843: NEG
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 3
48851: PUSH
48852: LD_INT 0
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: LD_INT 3
48861: PUSH
48862: LD_INT 1
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: LD_INT 3
48871: PUSH
48872: LD_INT 2
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 3
48881: PUSH
48882: LD_INT 3
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 2
48891: PUSH
48892: LD_INT 3
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 2
48901: NEG
48902: PUSH
48903: LD_INT 1
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 3
48912: NEG
48913: PUSH
48914: LD_INT 0
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 3
48923: NEG
48924: PUSH
48925: LD_INT 1
48927: NEG
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: LD_INT 3
48935: NEG
48936: PUSH
48937: LD_INT 2
48939: NEG
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: LD_INT 3
48947: NEG
48948: PUSH
48949: LD_INT 3
48951: NEG
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: LIST
48987: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48988: LD_ADDR_VAR 0 42
48992: PUSH
48993: LD_INT 0
48995: PUSH
48996: LD_INT 0
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 0
49005: PUSH
49006: LD_INT 1
49008: NEG
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: LD_INT 1
49016: PUSH
49017: LD_INT 0
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: PUSH
49024: LD_INT 1
49026: PUSH
49027: LD_INT 1
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 0
49036: PUSH
49037: LD_INT 1
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: LD_INT 1
49046: NEG
49047: PUSH
49048: LD_INT 0
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: PUSH
49055: LD_INT 1
49057: NEG
49058: PUSH
49059: LD_INT 1
49061: NEG
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PUSH
49067: LD_INT 1
49069: NEG
49070: PUSH
49071: LD_INT 2
49073: NEG
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 0
49081: PUSH
49082: LD_INT 2
49084: NEG
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 1
49092: PUSH
49093: LD_INT 1
49095: NEG
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: LD_INT 2
49103: PUSH
49104: LD_INT 1
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 2
49113: PUSH
49114: LD_INT 2
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: LD_INT 1
49123: PUSH
49124: LD_INT 2
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 0
49133: PUSH
49134: LD_INT 2
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 1
49143: NEG
49144: PUSH
49145: LD_INT 1
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 2
49154: NEG
49155: PUSH
49156: LD_INT 1
49158: NEG
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 2
49166: NEG
49167: PUSH
49168: LD_INT 2
49170: NEG
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 2
49178: NEG
49179: PUSH
49180: LD_INT 3
49182: NEG
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 1
49190: NEG
49191: PUSH
49192: LD_INT 3
49194: NEG
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 0
49202: PUSH
49203: LD_INT 3
49205: NEG
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 1
49213: PUSH
49214: LD_INT 2
49216: NEG
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 3
49224: PUSH
49225: LD_INT 2
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 3
49234: PUSH
49235: LD_INT 3
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 2
49244: PUSH
49245: LD_INT 3
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 1
49254: PUSH
49255: LD_INT 3
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 0
49264: PUSH
49265: LD_INT 3
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 1
49274: NEG
49275: PUSH
49276: LD_INT 2
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 3
49285: NEG
49286: PUSH
49287: LD_INT 2
49289: NEG
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 3
49297: NEG
49298: PUSH
49299: LD_INT 3
49301: NEG
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: LIST
49324: LIST
49325: LIST
49326: LIST
49327: LIST
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: LIST
49336: LIST
49337: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49338: LD_ADDR_VAR 0 43
49342: PUSH
49343: LD_INT 0
49345: PUSH
49346: LD_INT 0
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: LD_INT 0
49355: PUSH
49356: LD_INT 1
49358: NEG
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 1
49366: PUSH
49367: LD_INT 0
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: LD_INT 1
49376: PUSH
49377: LD_INT 1
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 0
49386: PUSH
49387: LD_INT 1
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 1
49396: NEG
49397: PUSH
49398: LD_INT 0
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: LD_INT 1
49407: NEG
49408: PUSH
49409: LD_INT 1
49411: NEG
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 1
49419: NEG
49420: PUSH
49421: LD_INT 2
49423: NEG
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 0
49431: PUSH
49432: LD_INT 2
49434: NEG
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 1
49442: PUSH
49443: LD_INT 1
49445: NEG
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 2
49453: PUSH
49454: LD_INT 0
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 2
49463: PUSH
49464: LD_INT 1
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 1
49473: PUSH
49474: LD_INT 2
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 0
49483: PUSH
49484: LD_INT 2
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 1
49493: NEG
49494: PUSH
49495: LD_INT 1
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 2
49504: NEG
49505: PUSH
49506: LD_INT 0
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 2
49515: NEG
49516: PUSH
49517: LD_INT 1
49519: NEG
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 1
49527: NEG
49528: PUSH
49529: LD_INT 3
49531: NEG
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: LD_INT 0
49539: PUSH
49540: LD_INT 3
49542: NEG
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 1
49550: PUSH
49551: LD_INT 2
49553: NEG
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 2
49561: PUSH
49562: LD_INT 1
49564: NEG
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 3
49572: PUSH
49573: LD_INT 0
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 3
49582: PUSH
49583: LD_INT 1
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 1
49592: PUSH
49593: LD_INT 3
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 0
49602: PUSH
49603: LD_INT 3
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 1
49612: NEG
49613: PUSH
49614: LD_INT 2
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 2
49623: NEG
49624: PUSH
49625: LD_INT 1
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 3
49634: NEG
49635: PUSH
49636: LD_INT 0
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 3
49645: NEG
49646: PUSH
49647: LD_INT 1
49649: NEG
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49686: LD_ADDR_VAR 0 44
49690: PUSH
49691: LD_INT 0
49693: PUSH
49694: LD_INT 0
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 0
49703: PUSH
49704: LD_INT 1
49706: NEG
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 1
49714: PUSH
49715: LD_INT 0
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 1
49724: PUSH
49725: LD_INT 1
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 0
49734: PUSH
49735: LD_INT 1
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 1
49744: NEG
49745: PUSH
49746: LD_INT 0
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 1
49755: NEG
49756: PUSH
49757: LD_INT 1
49759: NEG
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 1
49767: NEG
49768: PUSH
49769: LD_INT 2
49771: NEG
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 1
49779: PUSH
49780: LD_INT 1
49782: NEG
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 2
49790: PUSH
49791: LD_INT 0
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 2
49800: PUSH
49801: LD_INT 1
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 2
49810: PUSH
49811: LD_INT 2
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 1
49820: PUSH
49821: LD_INT 2
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 1
49830: NEG
49831: PUSH
49832: LD_INT 1
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 2
49841: NEG
49842: PUSH
49843: LD_INT 0
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 2
49852: NEG
49853: PUSH
49854: LD_INT 1
49856: NEG
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 2
49864: NEG
49865: PUSH
49866: LD_INT 2
49868: NEG
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 2
49876: NEG
49877: PUSH
49878: LD_INT 3
49880: NEG
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 2
49888: PUSH
49889: LD_INT 1
49891: NEG
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 3
49899: PUSH
49900: LD_INT 0
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: PUSH
49907: LD_INT 3
49909: PUSH
49910: LD_INT 1
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 3
49919: PUSH
49920: LD_INT 2
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 3
49929: PUSH
49930: LD_INT 3
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 2
49939: PUSH
49940: LD_INT 3
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 2
49949: NEG
49950: PUSH
49951: LD_INT 1
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 3
49960: NEG
49961: PUSH
49962: LD_INT 0
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 3
49971: NEG
49972: PUSH
49973: LD_INT 1
49975: NEG
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 3
49983: NEG
49984: PUSH
49985: LD_INT 2
49987: NEG
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: LD_INT 3
49995: NEG
49996: PUSH
49997: LD_INT 3
49999: NEG
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: LIST
50018: LIST
50019: LIST
50020: LIST
50021: LIST
50022: LIST
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: LIST
50028: LIST
50029: LIST
50030: LIST
50031: LIST
50032: LIST
50033: LIST
50034: LIST
50035: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50036: LD_ADDR_VAR 0 45
50040: PUSH
50041: LD_INT 0
50043: PUSH
50044: LD_INT 0
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 0
50053: PUSH
50054: LD_INT 1
50056: NEG
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 1
50064: PUSH
50065: LD_INT 0
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 1
50074: PUSH
50075: LD_INT 1
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 0
50084: PUSH
50085: LD_INT 1
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 1
50094: NEG
50095: PUSH
50096: LD_INT 0
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 1
50105: NEG
50106: PUSH
50107: LD_INT 1
50109: NEG
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 1
50117: NEG
50118: PUSH
50119: LD_INT 2
50121: NEG
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 0
50129: PUSH
50130: LD_INT 2
50132: NEG
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 1
50140: PUSH
50141: LD_INT 1
50143: NEG
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 2
50151: PUSH
50152: LD_INT 1
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 2
50161: PUSH
50162: LD_INT 2
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 1
50171: PUSH
50172: LD_INT 2
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 0
50181: PUSH
50182: LD_INT 2
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 1
50191: NEG
50192: PUSH
50193: LD_INT 1
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 2
50202: NEG
50203: PUSH
50204: LD_INT 1
50206: NEG
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 2
50214: NEG
50215: PUSH
50216: LD_INT 2
50218: NEG
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 2
50226: NEG
50227: PUSH
50228: LD_INT 3
50230: NEG
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 1
50238: NEG
50239: PUSH
50240: LD_INT 3
50242: NEG
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 0
50250: PUSH
50251: LD_INT 3
50253: NEG
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 1
50261: PUSH
50262: LD_INT 2
50264: NEG
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 3
50272: PUSH
50273: LD_INT 2
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 3
50282: PUSH
50283: LD_INT 3
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 2
50292: PUSH
50293: LD_INT 3
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 1
50302: PUSH
50303: LD_INT 3
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 0
50312: PUSH
50313: LD_INT 3
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 1
50322: NEG
50323: PUSH
50324: LD_INT 2
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 3
50333: NEG
50334: PUSH
50335: LD_INT 2
50337: NEG
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 3
50345: NEG
50346: PUSH
50347: LD_INT 3
50349: NEG
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: LIST
50374: LIST
50375: LIST
50376: LIST
50377: LIST
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50386: LD_ADDR_VAR 0 46
50390: PUSH
50391: LD_INT 0
50393: PUSH
50394: LD_INT 0
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 0
50403: PUSH
50404: LD_INT 1
50406: NEG
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 1
50414: PUSH
50415: LD_INT 0
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 1
50424: PUSH
50425: LD_INT 1
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 0
50434: PUSH
50435: LD_INT 1
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 1
50444: NEG
50445: PUSH
50446: LD_INT 0
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 1
50455: NEG
50456: PUSH
50457: LD_INT 1
50459: NEG
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 1
50467: NEG
50468: PUSH
50469: LD_INT 2
50471: NEG
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 0
50479: PUSH
50480: LD_INT 2
50482: NEG
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 1
50490: PUSH
50491: LD_INT 1
50493: NEG
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 2
50501: PUSH
50502: LD_INT 0
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 2
50511: PUSH
50512: LD_INT 1
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 1
50521: PUSH
50522: LD_INT 2
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: PUSH
50529: LD_INT 0
50531: PUSH
50532: LD_INT 2
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: PUSH
50539: LD_INT 1
50541: NEG
50542: PUSH
50543: LD_INT 1
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 2
50552: NEG
50553: PUSH
50554: LD_INT 0
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 2
50563: NEG
50564: PUSH
50565: LD_INT 1
50567: NEG
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 1
50575: NEG
50576: PUSH
50577: LD_INT 3
50579: NEG
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 0
50587: PUSH
50588: LD_INT 3
50590: NEG
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 1
50598: PUSH
50599: LD_INT 2
50601: NEG
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 2
50609: PUSH
50610: LD_INT 1
50612: NEG
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 3
50620: PUSH
50621: LD_INT 0
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 3
50630: PUSH
50631: LD_INT 1
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 1
50640: PUSH
50641: LD_INT 3
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 0
50650: PUSH
50651: LD_INT 3
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 1
50660: NEG
50661: PUSH
50662: LD_INT 2
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 2
50671: NEG
50672: PUSH
50673: LD_INT 1
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 3
50682: NEG
50683: PUSH
50684: LD_INT 0
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 3
50693: NEG
50694: PUSH
50695: LD_INT 1
50697: NEG
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: LIST
50714: LIST
50715: LIST
50716: LIST
50717: LIST
50718: LIST
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: LIST
50724: LIST
50725: LIST
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50734: LD_ADDR_VAR 0 47
50738: PUSH
50739: LD_INT 0
50741: PUSH
50742: LD_INT 0
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PUSH
50749: LD_INT 0
50751: PUSH
50752: LD_INT 1
50754: NEG
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: LD_INT 1
50762: PUSH
50763: LD_INT 0
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 1
50772: PUSH
50773: LD_INT 1
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 0
50782: PUSH
50783: LD_INT 1
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 1
50792: NEG
50793: PUSH
50794: LD_INT 0
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 1
50803: NEG
50804: PUSH
50805: LD_INT 1
50807: NEG
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 1
50815: NEG
50816: PUSH
50817: LD_INT 2
50819: NEG
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 0
50827: PUSH
50828: LD_INT 2
50830: NEG
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 1
50838: PUSH
50839: LD_INT 1
50841: NEG
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 2
50849: NEG
50850: PUSH
50851: LD_INT 1
50853: NEG
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 2
50861: NEG
50862: PUSH
50863: LD_INT 2
50865: NEG
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50885: LD_ADDR_VAR 0 48
50889: PUSH
50890: LD_INT 0
50892: PUSH
50893: LD_INT 0
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 0
50902: PUSH
50903: LD_INT 1
50905: NEG
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: LD_INT 1
50913: PUSH
50914: LD_INT 0
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 1
50923: PUSH
50924: LD_INT 1
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 0
50933: PUSH
50934: LD_INT 1
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 1
50943: NEG
50944: PUSH
50945: LD_INT 0
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 1
50954: NEG
50955: PUSH
50956: LD_INT 1
50958: NEG
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 1
50966: NEG
50967: PUSH
50968: LD_INT 2
50970: NEG
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: LD_INT 0
50978: PUSH
50979: LD_INT 2
50981: NEG
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 1
50989: PUSH
50990: LD_INT 1
50992: NEG
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 2
51000: PUSH
51001: LD_INT 0
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 2
51010: PUSH
51011: LD_INT 1
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51032: LD_ADDR_VAR 0 49
51036: PUSH
51037: LD_INT 0
51039: PUSH
51040: LD_INT 0
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 0
51049: PUSH
51050: LD_INT 1
51052: NEG
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 1
51060: PUSH
51061: LD_INT 0
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: LD_INT 1
51070: PUSH
51071: LD_INT 1
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 0
51080: PUSH
51081: LD_INT 1
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: LD_INT 1
51090: NEG
51091: PUSH
51092: LD_INT 0
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 1
51101: NEG
51102: PUSH
51103: LD_INT 1
51105: NEG
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 1
51113: PUSH
51114: LD_INT 1
51116: NEG
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 2
51124: PUSH
51125: LD_INT 0
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 2
51134: PUSH
51135: LD_INT 1
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: LD_INT 2
51144: PUSH
51145: LD_INT 2
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 1
51154: PUSH
51155: LD_INT 2
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51176: LD_ADDR_VAR 0 50
51180: PUSH
51181: LD_INT 0
51183: PUSH
51184: LD_INT 0
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 0
51193: PUSH
51194: LD_INT 1
51196: NEG
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: LD_INT 1
51204: PUSH
51205: LD_INT 0
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 1
51214: PUSH
51215: LD_INT 1
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 0
51224: PUSH
51225: LD_INT 1
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 1
51234: NEG
51235: PUSH
51236: LD_INT 0
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 1
51245: NEG
51246: PUSH
51247: LD_INT 1
51249: NEG
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: LD_INT 2
51257: PUSH
51258: LD_INT 1
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: LD_INT 2
51267: PUSH
51268: LD_INT 2
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 1
51277: PUSH
51278: LD_INT 2
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 0
51287: PUSH
51288: LD_INT 2
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 1
51297: NEG
51298: PUSH
51299: LD_INT 1
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51320: LD_ADDR_VAR 0 51
51324: PUSH
51325: LD_INT 0
51327: PUSH
51328: LD_INT 0
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 0
51337: PUSH
51338: LD_INT 1
51340: NEG
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: LD_INT 1
51348: PUSH
51349: LD_INT 0
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 1
51358: PUSH
51359: LD_INT 1
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 0
51368: PUSH
51369: LD_INT 1
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 1
51378: NEG
51379: PUSH
51380: LD_INT 0
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 1
51389: NEG
51390: PUSH
51391: LD_INT 1
51393: NEG
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 1
51401: PUSH
51402: LD_INT 2
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 0
51411: PUSH
51412: LD_INT 2
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 1
51421: NEG
51422: PUSH
51423: LD_INT 1
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 2
51432: NEG
51433: PUSH
51434: LD_INT 0
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 2
51443: NEG
51444: PUSH
51445: LD_INT 1
51447: NEG
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51467: LD_ADDR_VAR 0 52
51471: PUSH
51472: LD_INT 0
51474: PUSH
51475: LD_INT 0
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 0
51484: PUSH
51485: LD_INT 1
51487: NEG
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 1
51495: PUSH
51496: LD_INT 0
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 1
51505: PUSH
51506: LD_INT 1
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 0
51515: PUSH
51516: LD_INT 1
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 1
51525: NEG
51526: PUSH
51527: LD_INT 0
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 1
51536: NEG
51537: PUSH
51538: LD_INT 1
51540: NEG
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 1
51548: NEG
51549: PUSH
51550: LD_INT 2
51552: NEG
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 1
51560: NEG
51561: PUSH
51562: LD_INT 1
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 2
51571: NEG
51572: PUSH
51573: LD_INT 0
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 2
51582: NEG
51583: PUSH
51584: LD_INT 1
51586: NEG
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 2
51594: NEG
51595: PUSH
51596: LD_INT 2
51598: NEG
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51618: LD_ADDR_VAR 0 53
51622: PUSH
51623: LD_INT 0
51625: PUSH
51626: LD_INT 0
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 0
51635: PUSH
51636: LD_INT 1
51638: NEG
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 1
51646: PUSH
51647: LD_INT 0
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 1
51656: PUSH
51657: LD_INT 1
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 0
51666: PUSH
51667: LD_INT 1
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 1
51676: NEG
51677: PUSH
51678: LD_INT 0
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 1
51687: NEG
51688: PUSH
51689: LD_INT 1
51691: NEG
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 1
51699: NEG
51700: PUSH
51701: LD_INT 2
51703: NEG
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 0
51711: PUSH
51712: LD_INT 2
51714: NEG
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 1
51722: PUSH
51723: LD_INT 1
51725: NEG
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 2
51733: PUSH
51734: LD_INT 0
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: LD_INT 2
51743: PUSH
51744: LD_INT 1
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 2
51753: PUSH
51754: LD_INT 2
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 1
51763: PUSH
51764: LD_INT 2
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 0
51773: PUSH
51774: LD_INT 2
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 1
51783: NEG
51784: PUSH
51785: LD_INT 1
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 2
51794: NEG
51795: PUSH
51796: LD_INT 0
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 2
51805: NEG
51806: PUSH
51807: LD_INT 1
51809: NEG
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 2
51817: NEG
51818: PUSH
51819: LD_INT 2
51821: NEG
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51848: LD_ADDR_VAR 0 54
51852: PUSH
51853: LD_INT 0
51855: PUSH
51856: LD_INT 0
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 0
51865: PUSH
51866: LD_INT 1
51868: NEG
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 1
51876: PUSH
51877: LD_INT 0
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 1
51886: PUSH
51887: LD_INT 1
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 0
51896: PUSH
51897: LD_INT 1
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 1
51906: NEG
51907: PUSH
51908: LD_INT 0
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 1
51917: NEG
51918: PUSH
51919: LD_INT 1
51921: NEG
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 1
51929: NEG
51930: PUSH
51931: LD_INT 2
51933: NEG
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 0
51941: PUSH
51942: LD_INT 2
51944: NEG
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 1
51952: PUSH
51953: LD_INT 1
51955: NEG
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 2
51963: PUSH
51964: LD_INT 0
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 2
51973: PUSH
51974: LD_INT 1
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 2
51983: PUSH
51984: LD_INT 2
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 1
51993: PUSH
51994: LD_INT 2
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 0
52003: PUSH
52004: LD_INT 2
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 1
52013: NEG
52014: PUSH
52015: LD_INT 1
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 2
52024: NEG
52025: PUSH
52026: LD_INT 0
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 2
52035: NEG
52036: PUSH
52037: LD_INT 1
52039: NEG
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 2
52047: NEG
52048: PUSH
52049: LD_INT 2
52051: NEG
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52078: LD_ADDR_VAR 0 55
52082: PUSH
52083: LD_INT 0
52085: PUSH
52086: LD_INT 0
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 0
52095: PUSH
52096: LD_INT 1
52098: NEG
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 1
52106: PUSH
52107: LD_INT 0
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 1
52116: PUSH
52117: LD_INT 1
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 0
52126: PUSH
52127: LD_INT 1
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 1
52136: NEG
52137: PUSH
52138: LD_INT 0
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 1
52147: NEG
52148: PUSH
52149: LD_INT 1
52151: NEG
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 1
52159: NEG
52160: PUSH
52161: LD_INT 2
52163: NEG
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 0
52171: PUSH
52172: LD_INT 2
52174: NEG
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 1
52182: PUSH
52183: LD_INT 1
52185: NEG
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 2
52193: PUSH
52194: LD_INT 0
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: PUSH
52201: LD_INT 2
52203: PUSH
52204: LD_INT 1
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 2
52213: PUSH
52214: LD_INT 2
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 1
52223: PUSH
52224: LD_INT 2
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 0
52233: PUSH
52234: LD_INT 2
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 1
52243: NEG
52244: PUSH
52245: LD_INT 1
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 2
52254: NEG
52255: PUSH
52256: LD_INT 0
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 2
52265: NEG
52266: PUSH
52267: LD_INT 1
52269: NEG
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 2
52277: NEG
52278: PUSH
52279: LD_INT 2
52281: NEG
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52308: LD_ADDR_VAR 0 56
52312: PUSH
52313: LD_INT 0
52315: PUSH
52316: LD_INT 0
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 0
52325: PUSH
52326: LD_INT 1
52328: NEG
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 1
52336: PUSH
52337: LD_INT 0
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 1
52346: PUSH
52347: LD_INT 1
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 0
52356: PUSH
52357: LD_INT 1
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 1
52366: NEG
52367: PUSH
52368: LD_INT 0
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 1
52377: NEG
52378: PUSH
52379: LD_INT 1
52381: NEG
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 1
52389: NEG
52390: PUSH
52391: LD_INT 2
52393: NEG
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 0
52401: PUSH
52402: LD_INT 2
52404: NEG
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 1
52412: PUSH
52413: LD_INT 1
52415: NEG
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 2
52423: PUSH
52424: LD_INT 0
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 2
52433: PUSH
52434: LD_INT 1
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: LD_INT 2
52443: PUSH
52444: LD_INT 2
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 1
52453: PUSH
52454: LD_INT 2
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: LD_INT 0
52463: PUSH
52464: LD_INT 2
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 1
52473: NEG
52474: PUSH
52475: LD_INT 1
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 2
52484: NEG
52485: PUSH
52486: LD_INT 0
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: LD_INT 2
52495: NEG
52496: PUSH
52497: LD_INT 1
52499: NEG
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 2
52507: NEG
52508: PUSH
52509: LD_INT 2
52511: NEG
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52538: LD_ADDR_VAR 0 57
52542: PUSH
52543: LD_INT 0
52545: PUSH
52546: LD_INT 0
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 0
52555: PUSH
52556: LD_INT 1
52558: NEG
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 1
52566: PUSH
52567: LD_INT 0
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 1
52576: PUSH
52577: LD_INT 1
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 0
52586: PUSH
52587: LD_INT 1
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 1
52596: NEG
52597: PUSH
52598: LD_INT 0
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 1
52607: NEG
52608: PUSH
52609: LD_INT 1
52611: NEG
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 1
52619: NEG
52620: PUSH
52621: LD_INT 2
52623: NEG
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 0
52631: PUSH
52632: LD_INT 2
52634: NEG
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: LD_INT 1
52642: PUSH
52643: LD_INT 1
52645: NEG
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 2
52653: PUSH
52654: LD_INT 0
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 2
52663: PUSH
52664: LD_INT 1
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 2
52673: PUSH
52674: LD_INT 2
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 1
52683: PUSH
52684: LD_INT 2
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 0
52693: PUSH
52694: LD_INT 2
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 1
52703: NEG
52704: PUSH
52705: LD_INT 1
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 2
52714: NEG
52715: PUSH
52716: LD_INT 0
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 2
52725: NEG
52726: PUSH
52727: LD_INT 1
52729: NEG
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 2
52737: NEG
52738: PUSH
52739: LD_INT 2
52741: NEG
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52768: LD_ADDR_VAR 0 58
52772: PUSH
52773: LD_INT 0
52775: PUSH
52776: LD_INT 0
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 0
52785: PUSH
52786: LD_INT 1
52788: NEG
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 1
52796: PUSH
52797: LD_INT 0
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 1
52806: PUSH
52807: LD_INT 1
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 0
52816: PUSH
52817: LD_INT 1
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 1
52826: NEG
52827: PUSH
52828: LD_INT 0
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 1
52837: NEG
52838: PUSH
52839: LD_INT 1
52841: NEG
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 1
52849: NEG
52850: PUSH
52851: LD_INT 2
52853: NEG
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 0
52861: PUSH
52862: LD_INT 2
52864: NEG
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 1
52872: PUSH
52873: LD_INT 1
52875: NEG
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 2
52883: PUSH
52884: LD_INT 0
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 2
52893: PUSH
52894: LD_INT 1
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: LD_INT 2
52903: PUSH
52904: LD_INT 2
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: LD_INT 1
52913: PUSH
52914: LD_INT 2
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: LD_INT 0
52923: PUSH
52924: LD_INT 2
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: LD_INT 1
52933: NEG
52934: PUSH
52935: LD_INT 1
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 2
52944: NEG
52945: PUSH
52946: LD_INT 0
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 2
52955: NEG
52956: PUSH
52957: LD_INT 1
52959: NEG
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 2
52967: NEG
52968: PUSH
52969: LD_INT 2
52971: NEG
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52998: LD_ADDR_VAR 0 59
53002: PUSH
53003: LD_INT 0
53005: PUSH
53006: LD_INT 0
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 0
53015: PUSH
53016: LD_INT 1
53018: NEG
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 1
53026: PUSH
53027: LD_INT 0
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 1
53036: PUSH
53037: LD_INT 1
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 0
53046: PUSH
53047: LD_INT 1
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: LD_INT 1
53056: NEG
53057: PUSH
53058: LD_INT 0
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 1
53067: NEG
53068: PUSH
53069: LD_INT 1
53071: NEG
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: LIST
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53086: LD_ADDR_VAR 0 60
53090: PUSH
53091: LD_INT 0
53093: PUSH
53094: LD_INT 0
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 0
53103: PUSH
53104: LD_INT 1
53106: NEG
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 1
53114: PUSH
53115: LD_INT 0
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 1
53124: PUSH
53125: LD_INT 1
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 0
53134: PUSH
53135: LD_INT 1
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 1
53144: NEG
53145: PUSH
53146: LD_INT 0
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 1
53155: NEG
53156: PUSH
53157: LD_INT 1
53159: NEG
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53174: LD_ADDR_VAR 0 61
53178: PUSH
53179: LD_INT 0
53181: PUSH
53182: LD_INT 0
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 0
53191: PUSH
53192: LD_INT 1
53194: NEG
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 1
53202: PUSH
53203: LD_INT 0
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 1
53212: PUSH
53213: LD_INT 1
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 0
53222: PUSH
53223: LD_INT 1
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: LD_INT 1
53232: NEG
53233: PUSH
53234: LD_INT 0
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 1
53243: NEG
53244: PUSH
53245: LD_INT 1
53247: NEG
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53262: LD_ADDR_VAR 0 62
53266: PUSH
53267: LD_INT 0
53269: PUSH
53270: LD_INT 0
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 0
53279: PUSH
53280: LD_INT 1
53282: NEG
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 1
53290: PUSH
53291: LD_INT 0
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: LD_INT 1
53300: PUSH
53301: LD_INT 1
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 0
53310: PUSH
53311: LD_INT 1
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 1
53320: NEG
53321: PUSH
53322: LD_INT 0
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: LD_INT 1
53331: NEG
53332: PUSH
53333: LD_INT 1
53335: NEG
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53350: LD_ADDR_VAR 0 63
53354: PUSH
53355: LD_INT 0
53357: PUSH
53358: LD_INT 0
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: PUSH
53365: LD_INT 0
53367: PUSH
53368: LD_INT 1
53370: NEG
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 1
53378: PUSH
53379: LD_INT 0
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: LD_INT 1
53388: PUSH
53389: LD_INT 1
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 0
53398: PUSH
53399: LD_INT 1
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: LD_INT 1
53408: NEG
53409: PUSH
53410: LD_INT 0
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 1
53419: NEG
53420: PUSH
53421: LD_INT 1
53423: NEG
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53438: LD_ADDR_VAR 0 64
53442: PUSH
53443: LD_INT 0
53445: PUSH
53446: LD_INT 0
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 0
53455: PUSH
53456: LD_INT 1
53458: NEG
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 1
53466: PUSH
53467: LD_INT 0
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 1
53476: PUSH
53477: LD_INT 1
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 0
53486: PUSH
53487: LD_INT 1
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 1
53496: NEG
53497: PUSH
53498: LD_INT 0
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 1
53507: NEG
53508: PUSH
53509: LD_INT 1
53511: NEG
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: ST_TO_ADDR
// end ; 1 :
53526: GO 59423
53528: LD_INT 1
53530: DOUBLE
53531: EQUAL
53532: IFTRUE 53536
53534: GO 56159
53536: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53537: LD_ADDR_VAR 0 11
53541: PUSH
53542: LD_INT 1
53544: NEG
53545: PUSH
53546: LD_INT 3
53548: NEG
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 0
53556: PUSH
53557: LD_INT 3
53559: NEG
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 1
53567: PUSH
53568: LD_INT 2
53570: NEG
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: LIST
53580: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53581: LD_ADDR_VAR 0 12
53585: PUSH
53586: LD_INT 2
53588: PUSH
53589: LD_INT 1
53591: NEG
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 3
53599: PUSH
53600: LD_INT 0
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 3
53609: PUSH
53610: LD_INT 1
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: LIST
53621: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53622: LD_ADDR_VAR 0 13
53626: PUSH
53627: LD_INT 3
53629: PUSH
53630: LD_INT 2
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 3
53639: PUSH
53640: LD_INT 3
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 2
53649: PUSH
53650: LD_INT 3
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: LIST
53661: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53662: LD_ADDR_VAR 0 14
53666: PUSH
53667: LD_INT 1
53669: PUSH
53670: LD_INT 3
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 0
53679: PUSH
53680: LD_INT 3
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 1
53689: NEG
53690: PUSH
53691: LD_INT 2
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: LIST
53702: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53703: LD_ADDR_VAR 0 15
53707: PUSH
53708: LD_INT 2
53710: NEG
53711: PUSH
53712: LD_INT 1
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 3
53721: NEG
53722: PUSH
53723: LD_INT 0
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 3
53732: NEG
53733: PUSH
53734: LD_INT 1
53736: NEG
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: LIST
53746: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53747: LD_ADDR_VAR 0 16
53751: PUSH
53752: LD_INT 2
53754: NEG
53755: PUSH
53756: LD_INT 3
53758: NEG
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: PUSH
53764: LD_INT 3
53766: NEG
53767: PUSH
53768: LD_INT 2
53770: NEG
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 3
53778: NEG
53779: PUSH
53780: LD_INT 3
53782: NEG
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: LIST
53792: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53793: LD_ADDR_VAR 0 17
53797: PUSH
53798: LD_INT 1
53800: NEG
53801: PUSH
53802: LD_INT 3
53804: NEG
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 0
53812: PUSH
53813: LD_INT 3
53815: NEG
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: PUSH
53821: LD_INT 1
53823: PUSH
53824: LD_INT 2
53826: NEG
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: LIST
53836: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53837: LD_ADDR_VAR 0 18
53841: PUSH
53842: LD_INT 2
53844: PUSH
53845: LD_INT 1
53847: NEG
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: LD_INT 3
53855: PUSH
53856: LD_INT 0
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 3
53865: PUSH
53866: LD_INT 1
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: LIST
53877: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53878: LD_ADDR_VAR 0 19
53882: PUSH
53883: LD_INT 3
53885: PUSH
53886: LD_INT 2
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 3
53895: PUSH
53896: LD_INT 3
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 2
53905: PUSH
53906: LD_INT 3
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: LIST
53917: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53918: LD_ADDR_VAR 0 20
53922: PUSH
53923: LD_INT 1
53925: PUSH
53926: LD_INT 3
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 0
53935: PUSH
53936: LD_INT 3
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 1
53945: NEG
53946: PUSH
53947: LD_INT 2
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: LIST
53958: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53959: LD_ADDR_VAR 0 21
53963: PUSH
53964: LD_INT 2
53966: NEG
53967: PUSH
53968: LD_INT 1
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 3
53977: NEG
53978: PUSH
53979: LD_INT 0
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 3
53988: NEG
53989: PUSH
53990: LD_INT 1
53992: NEG
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: LIST
54002: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54003: LD_ADDR_VAR 0 22
54007: PUSH
54008: LD_INT 2
54010: NEG
54011: PUSH
54012: LD_INT 3
54014: NEG
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 3
54022: NEG
54023: PUSH
54024: LD_INT 2
54026: NEG
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 3
54034: NEG
54035: PUSH
54036: LD_INT 3
54038: NEG
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: LIST
54048: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
54049: LD_ADDR_VAR 0 23
54053: PUSH
54054: LD_INT 0
54056: PUSH
54057: LD_INT 3
54059: NEG
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: LD_INT 1
54067: NEG
54068: PUSH
54069: LD_INT 4
54071: NEG
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 1
54079: PUSH
54080: LD_INT 3
54082: NEG
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: LIST
54092: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
54093: LD_ADDR_VAR 0 24
54097: PUSH
54098: LD_INT 3
54100: PUSH
54101: LD_INT 0
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 3
54110: PUSH
54111: LD_INT 1
54113: NEG
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 4
54121: PUSH
54122: LD_INT 1
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: LIST
54133: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
54134: LD_ADDR_VAR 0 25
54138: PUSH
54139: LD_INT 3
54141: PUSH
54142: LD_INT 3
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 4
54151: PUSH
54152: LD_INT 3
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 3
54161: PUSH
54162: LD_INT 4
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: LIST
54173: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
54174: LD_ADDR_VAR 0 26
54178: PUSH
54179: LD_INT 0
54181: PUSH
54182: LD_INT 3
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 1
54191: PUSH
54192: LD_INT 4
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 1
54201: NEG
54202: PUSH
54203: LD_INT 3
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: LIST
54214: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
54215: LD_ADDR_VAR 0 27
54219: PUSH
54220: LD_INT 3
54222: NEG
54223: PUSH
54224: LD_INT 0
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 3
54233: NEG
54234: PUSH
54235: LD_INT 1
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 4
54244: NEG
54245: PUSH
54246: LD_INT 1
54248: NEG
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: LIST
54258: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
54259: LD_ADDR_VAR 0 28
54263: PUSH
54264: LD_INT 3
54266: NEG
54267: PUSH
54268: LD_INT 3
54270: NEG
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 3
54278: NEG
54279: PUSH
54280: LD_INT 4
54282: NEG
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 4
54290: NEG
54291: PUSH
54292: LD_INT 3
54294: NEG
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: LIST
54304: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
54305: LD_ADDR_VAR 0 29
54309: PUSH
54310: LD_INT 1
54312: NEG
54313: PUSH
54314: LD_INT 3
54316: NEG
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 0
54324: PUSH
54325: LD_INT 3
54327: NEG
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 1
54335: PUSH
54336: LD_INT 2
54338: NEG
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: LD_INT 1
54346: NEG
54347: PUSH
54348: LD_INT 4
54350: NEG
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 0
54358: PUSH
54359: LD_INT 4
54361: NEG
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 1
54369: PUSH
54370: LD_INT 3
54372: NEG
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 1
54380: NEG
54381: PUSH
54382: LD_INT 5
54384: NEG
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 0
54392: PUSH
54393: LD_INT 5
54395: NEG
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 1
54403: PUSH
54404: LD_INT 4
54406: NEG
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 1
54414: NEG
54415: PUSH
54416: LD_INT 6
54418: NEG
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 0
54426: PUSH
54427: LD_INT 6
54429: NEG
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 1
54437: PUSH
54438: LD_INT 5
54440: NEG
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: LIST
54450: LIST
54451: LIST
54452: LIST
54453: LIST
54454: LIST
54455: LIST
54456: LIST
54457: LIST
54458: LIST
54459: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54460: LD_ADDR_VAR 0 30
54464: PUSH
54465: LD_INT 2
54467: PUSH
54468: LD_INT 1
54470: NEG
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 3
54478: PUSH
54479: LD_INT 0
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 3
54488: PUSH
54489: LD_INT 1
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: PUSH
54496: LD_INT 3
54498: PUSH
54499: LD_INT 1
54501: NEG
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 4
54509: PUSH
54510: LD_INT 0
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 4
54519: PUSH
54520: LD_INT 1
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 4
54529: PUSH
54530: LD_INT 1
54532: NEG
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 5
54540: PUSH
54541: LD_INT 0
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 5
54550: PUSH
54551: LD_INT 1
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: LD_INT 5
54560: PUSH
54561: LD_INT 1
54563: NEG
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 6
54571: PUSH
54572: LD_INT 0
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 6
54581: PUSH
54582: LD_INT 1
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54603: LD_ADDR_VAR 0 31
54607: PUSH
54608: LD_INT 3
54610: PUSH
54611: LD_INT 2
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 3
54620: PUSH
54621: LD_INT 3
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 2
54630: PUSH
54631: LD_INT 3
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 4
54640: PUSH
54641: LD_INT 3
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 4
54650: PUSH
54651: LD_INT 4
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 3
54660: PUSH
54661: LD_INT 4
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 5
54670: PUSH
54671: LD_INT 4
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: LD_INT 5
54680: PUSH
54681: LD_INT 5
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 4
54690: PUSH
54691: LD_INT 5
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 6
54700: PUSH
54701: LD_INT 5
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 6
54710: PUSH
54711: LD_INT 6
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: LD_INT 5
54720: PUSH
54721: LD_INT 6
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54742: LD_ADDR_VAR 0 32
54746: PUSH
54747: LD_INT 1
54749: PUSH
54750: LD_INT 3
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 0
54759: PUSH
54760: LD_INT 3
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 1
54769: NEG
54770: PUSH
54771: LD_INT 2
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 1
54780: PUSH
54781: LD_INT 4
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 0
54790: PUSH
54791: LD_INT 4
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: LD_INT 1
54800: NEG
54801: PUSH
54802: LD_INT 3
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 1
54811: PUSH
54812: LD_INT 5
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 0
54821: PUSH
54822: LD_INT 5
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 1
54831: NEG
54832: PUSH
54833: LD_INT 4
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 1
54842: PUSH
54843: LD_INT 6
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 0
54852: PUSH
54853: LD_INT 6
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 1
54862: NEG
54863: PUSH
54864: LD_INT 5
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54885: LD_ADDR_VAR 0 33
54889: PUSH
54890: LD_INT 2
54892: NEG
54893: PUSH
54894: LD_INT 1
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 3
54903: NEG
54904: PUSH
54905: LD_INT 0
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 3
54914: NEG
54915: PUSH
54916: LD_INT 1
54918: NEG
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 3
54926: NEG
54927: PUSH
54928: LD_INT 1
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 4
54937: NEG
54938: PUSH
54939: LD_INT 0
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 4
54948: NEG
54949: PUSH
54950: LD_INT 1
54952: NEG
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 4
54960: NEG
54961: PUSH
54962: LD_INT 1
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 5
54971: NEG
54972: PUSH
54973: LD_INT 0
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 5
54982: NEG
54983: PUSH
54984: LD_INT 1
54986: NEG
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 5
54994: NEG
54995: PUSH
54996: LD_INT 1
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 6
55005: NEG
55006: PUSH
55007: LD_INT 0
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 6
55016: NEG
55017: PUSH
55018: LD_INT 1
55020: NEG
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: LIST
55039: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
55040: LD_ADDR_VAR 0 34
55044: PUSH
55045: LD_INT 2
55047: NEG
55048: PUSH
55049: LD_INT 3
55051: NEG
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 3
55059: NEG
55060: PUSH
55061: LD_INT 2
55063: NEG
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 3
55071: NEG
55072: PUSH
55073: LD_INT 3
55075: NEG
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 3
55083: NEG
55084: PUSH
55085: LD_INT 4
55087: NEG
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 4
55095: NEG
55096: PUSH
55097: LD_INT 3
55099: NEG
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 4
55107: NEG
55108: PUSH
55109: LD_INT 4
55111: NEG
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 4
55119: NEG
55120: PUSH
55121: LD_INT 5
55123: NEG
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 5
55131: NEG
55132: PUSH
55133: LD_INT 4
55135: NEG
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 5
55143: NEG
55144: PUSH
55145: LD_INT 5
55147: NEG
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 5
55155: NEG
55156: PUSH
55157: LD_INT 6
55159: NEG
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 6
55167: NEG
55168: PUSH
55169: LD_INT 5
55171: NEG
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 6
55179: NEG
55180: PUSH
55181: LD_INT 6
55183: NEG
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
55203: LD_ADDR_VAR 0 41
55207: PUSH
55208: LD_INT 0
55210: PUSH
55211: LD_INT 2
55213: NEG
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 1
55221: NEG
55222: PUSH
55223: LD_INT 3
55225: NEG
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: LD_INT 1
55233: PUSH
55234: LD_INT 2
55236: NEG
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: LIST
55246: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
55247: LD_ADDR_VAR 0 42
55251: PUSH
55252: LD_INT 2
55254: PUSH
55255: LD_INT 0
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 2
55264: PUSH
55265: LD_INT 1
55267: NEG
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 3
55275: PUSH
55276: LD_INT 1
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: LIST
55287: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
55288: LD_ADDR_VAR 0 43
55292: PUSH
55293: LD_INT 2
55295: PUSH
55296: LD_INT 2
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 3
55305: PUSH
55306: LD_INT 2
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 2
55315: PUSH
55316: LD_INT 3
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: LIST
55327: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55328: LD_ADDR_VAR 0 44
55332: PUSH
55333: LD_INT 0
55335: PUSH
55336: LD_INT 2
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 1
55345: PUSH
55346: LD_INT 3
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 1
55355: NEG
55356: PUSH
55357: LD_INT 2
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: LIST
55368: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55369: LD_ADDR_VAR 0 45
55373: PUSH
55374: LD_INT 2
55376: NEG
55377: PUSH
55378: LD_INT 0
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PUSH
55385: LD_INT 2
55387: NEG
55388: PUSH
55389: LD_INT 1
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: PUSH
55396: LD_INT 3
55398: NEG
55399: PUSH
55400: LD_INT 1
55402: NEG
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: LIST
55412: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55413: LD_ADDR_VAR 0 46
55417: PUSH
55418: LD_INT 2
55420: NEG
55421: PUSH
55422: LD_INT 2
55424: NEG
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 2
55432: NEG
55433: PUSH
55434: LD_INT 3
55436: NEG
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 3
55444: NEG
55445: PUSH
55446: LD_INT 2
55448: NEG
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: LIST
55458: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55459: LD_ADDR_VAR 0 47
55463: PUSH
55464: LD_INT 2
55466: NEG
55467: PUSH
55468: LD_INT 3
55470: NEG
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 1
55478: NEG
55479: PUSH
55480: LD_INT 3
55482: NEG
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55492: LD_ADDR_VAR 0 48
55496: PUSH
55497: LD_INT 1
55499: PUSH
55500: LD_INT 2
55502: NEG
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 2
55510: PUSH
55511: LD_INT 1
55513: NEG
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55523: LD_ADDR_VAR 0 49
55527: PUSH
55528: LD_INT 3
55530: PUSH
55531: LD_INT 1
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 3
55540: PUSH
55541: LD_INT 2
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55552: LD_ADDR_VAR 0 50
55556: PUSH
55557: LD_INT 2
55559: PUSH
55560: LD_INT 3
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 1
55569: PUSH
55570: LD_INT 3
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55581: LD_ADDR_VAR 0 51
55585: PUSH
55586: LD_INT 1
55588: NEG
55589: PUSH
55590: LD_INT 2
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 2
55599: NEG
55600: PUSH
55601: LD_INT 1
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55612: LD_ADDR_VAR 0 52
55616: PUSH
55617: LD_INT 3
55619: NEG
55620: PUSH
55621: LD_INT 1
55623: NEG
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 3
55631: NEG
55632: PUSH
55633: LD_INT 2
55635: NEG
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55645: LD_ADDR_VAR 0 53
55649: PUSH
55650: LD_INT 1
55652: NEG
55653: PUSH
55654: LD_INT 3
55656: NEG
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 0
55664: PUSH
55665: LD_INT 3
55667: NEG
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 1
55675: PUSH
55676: LD_INT 2
55678: NEG
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: LIST
55688: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55689: LD_ADDR_VAR 0 54
55693: PUSH
55694: LD_INT 2
55696: PUSH
55697: LD_INT 1
55699: NEG
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 3
55707: PUSH
55708: LD_INT 0
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 3
55717: PUSH
55718: LD_INT 1
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: LIST
55729: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55730: LD_ADDR_VAR 0 55
55734: PUSH
55735: LD_INT 3
55737: PUSH
55738: LD_INT 2
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 3
55747: PUSH
55748: LD_INT 3
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 2
55757: PUSH
55758: LD_INT 3
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: LIST
55769: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55770: LD_ADDR_VAR 0 56
55774: PUSH
55775: LD_INT 1
55777: PUSH
55778: LD_INT 3
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: LD_INT 0
55787: PUSH
55788: LD_INT 3
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: LD_INT 1
55797: NEG
55798: PUSH
55799: LD_INT 2
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: LIST
55810: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55811: LD_ADDR_VAR 0 57
55815: PUSH
55816: LD_INT 2
55818: NEG
55819: PUSH
55820: LD_INT 1
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 3
55829: NEG
55830: PUSH
55831: LD_INT 0
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 3
55840: NEG
55841: PUSH
55842: LD_INT 1
55844: NEG
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: LIST
55854: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55855: LD_ADDR_VAR 0 58
55859: PUSH
55860: LD_INT 2
55862: NEG
55863: PUSH
55864: LD_INT 3
55866: NEG
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 3
55874: NEG
55875: PUSH
55876: LD_INT 2
55878: NEG
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 3
55886: NEG
55887: PUSH
55888: LD_INT 3
55890: NEG
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: LIST
55900: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55901: LD_ADDR_VAR 0 59
55905: PUSH
55906: LD_INT 1
55908: NEG
55909: PUSH
55910: LD_INT 2
55912: NEG
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 0
55920: PUSH
55921: LD_INT 2
55923: NEG
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 1
55931: PUSH
55932: LD_INT 1
55934: NEG
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: LIST
55944: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55945: LD_ADDR_VAR 0 60
55949: PUSH
55950: LD_INT 1
55952: PUSH
55953: LD_INT 1
55955: NEG
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 2
55963: PUSH
55964: LD_INT 0
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 2
55973: PUSH
55974: LD_INT 1
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: LIST
55985: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55986: LD_ADDR_VAR 0 61
55990: PUSH
55991: LD_INT 2
55993: PUSH
55994: LD_INT 1
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 2
56003: PUSH
56004: LD_INT 2
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 1
56013: PUSH
56014: LD_INT 2
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: LIST
56025: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56026: LD_ADDR_VAR 0 62
56030: PUSH
56031: LD_INT 1
56033: PUSH
56034: LD_INT 2
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 0
56043: PUSH
56044: LD_INT 2
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 1
56053: NEG
56054: PUSH
56055: LD_INT 1
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: LIST
56066: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56067: LD_ADDR_VAR 0 63
56071: PUSH
56072: LD_INT 1
56074: NEG
56075: PUSH
56076: LD_INT 1
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 2
56085: NEG
56086: PUSH
56087: LD_INT 0
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: LD_INT 2
56096: NEG
56097: PUSH
56098: LD_INT 1
56100: NEG
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: LIST
56110: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56111: LD_ADDR_VAR 0 64
56115: PUSH
56116: LD_INT 1
56118: NEG
56119: PUSH
56120: LD_INT 2
56122: NEG
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 2
56130: NEG
56131: PUSH
56132: LD_INT 1
56134: NEG
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 2
56142: NEG
56143: PUSH
56144: LD_INT 2
56146: NEG
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: LIST
56156: ST_TO_ADDR
// end ; 2 :
56157: GO 59423
56159: LD_INT 2
56161: DOUBLE
56162: EQUAL
56163: IFTRUE 56167
56165: GO 59422
56167: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
56168: LD_ADDR_VAR 0 29
56172: PUSH
56173: LD_INT 4
56175: PUSH
56176: LD_INT 0
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 4
56185: PUSH
56186: LD_INT 1
56188: NEG
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 5
56196: PUSH
56197: LD_INT 0
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 5
56206: PUSH
56207: LD_INT 1
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 4
56216: PUSH
56217: LD_INT 1
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 3
56226: PUSH
56227: LD_INT 0
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 3
56236: PUSH
56237: LD_INT 1
56239: NEG
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_INT 3
56247: PUSH
56248: LD_INT 2
56250: NEG
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 5
56258: PUSH
56259: LD_INT 2
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 3
56268: PUSH
56269: LD_INT 3
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 3
56278: PUSH
56279: LD_INT 2
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 4
56288: PUSH
56289: LD_INT 3
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 4
56298: PUSH
56299: LD_INT 4
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: LD_INT 3
56308: PUSH
56309: LD_INT 4
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: LD_INT 2
56318: PUSH
56319: LD_INT 3
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 2
56328: PUSH
56329: LD_INT 2
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 4
56338: PUSH
56339: LD_INT 2
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 2
56348: PUSH
56349: LD_INT 4
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 0
56358: PUSH
56359: LD_INT 4
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 0
56368: PUSH
56369: LD_INT 3
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 1
56378: PUSH
56379: LD_INT 4
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 1
56388: PUSH
56389: LD_INT 5
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 0
56398: PUSH
56399: LD_INT 5
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 1
56408: NEG
56409: PUSH
56410: LD_INT 4
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 1
56419: NEG
56420: PUSH
56421: LD_INT 3
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 2
56430: PUSH
56431: LD_INT 5
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 2
56440: NEG
56441: PUSH
56442: LD_INT 3
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 3
56451: NEG
56452: PUSH
56453: LD_INT 0
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 3
56462: NEG
56463: PUSH
56464: LD_INT 1
56466: NEG
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 2
56474: NEG
56475: PUSH
56476: LD_INT 0
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: LD_INT 2
56485: NEG
56486: PUSH
56487: LD_INT 1
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 3
56496: NEG
56497: PUSH
56498: LD_INT 1
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 4
56507: NEG
56508: PUSH
56509: LD_INT 0
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 4
56518: NEG
56519: PUSH
56520: LD_INT 1
56522: NEG
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 4
56530: NEG
56531: PUSH
56532: LD_INT 2
56534: NEG
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: LD_INT 2
56542: NEG
56543: PUSH
56544: LD_INT 2
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: PUSH
56551: LD_INT 4
56553: NEG
56554: PUSH
56555: LD_INT 4
56557: NEG
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: LD_INT 4
56565: NEG
56566: PUSH
56567: LD_INT 5
56569: NEG
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 3
56577: NEG
56578: PUSH
56579: LD_INT 4
56581: NEG
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 3
56589: NEG
56590: PUSH
56591: LD_INT 3
56593: NEG
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 4
56601: NEG
56602: PUSH
56603: LD_INT 3
56605: NEG
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 5
56613: NEG
56614: PUSH
56615: LD_INT 4
56617: NEG
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: PUSH
56623: LD_INT 5
56625: NEG
56626: PUSH
56627: LD_INT 5
56629: NEG
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 3
56637: NEG
56638: PUSH
56639: LD_INT 5
56641: NEG
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 5
56649: NEG
56650: PUSH
56651: LD_INT 3
56653: NEG
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: LIST
56667: LIST
56668: LIST
56669: LIST
56670: LIST
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: LIST
56684: LIST
56685: LIST
56686: LIST
56687: LIST
56688: LIST
56689: LIST
56690: LIST
56691: LIST
56692: LIST
56693: LIST
56694: LIST
56695: LIST
56696: LIST
56697: LIST
56698: LIST
56699: LIST
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: LIST
56705: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56706: LD_ADDR_VAR 0 30
56710: PUSH
56711: LD_INT 4
56713: PUSH
56714: LD_INT 4
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 4
56723: PUSH
56724: LD_INT 3
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 5
56733: PUSH
56734: LD_INT 4
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: LD_INT 5
56743: PUSH
56744: LD_INT 5
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: LD_INT 4
56753: PUSH
56754: LD_INT 5
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 3
56763: PUSH
56764: LD_INT 4
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 3
56773: PUSH
56774: LD_INT 3
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: LD_INT 5
56783: PUSH
56784: LD_INT 3
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 3
56793: PUSH
56794: LD_INT 5
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: LD_INT 0
56803: PUSH
56804: LD_INT 3
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 0
56813: PUSH
56814: LD_INT 2
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 1
56823: PUSH
56824: LD_INT 3
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 1
56833: PUSH
56834: LD_INT 4
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 0
56843: PUSH
56844: LD_INT 4
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 1
56853: NEG
56854: PUSH
56855: LD_INT 3
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 1
56864: NEG
56865: PUSH
56866: LD_INT 2
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 2
56875: PUSH
56876: LD_INT 4
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 2
56885: NEG
56886: PUSH
56887: LD_INT 2
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 4
56896: NEG
56897: PUSH
56898: LD_INT 0
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 4
56907: NEG
56908: PUSH
56909: LD_INT 1
56911: NEG
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 3
56919: NEG
56920: PUSH
56921: LD_INT 0
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: PUSH
56928: LD_INT 3
56930: NEG
56931: PUSH
56932: LD_INT 1
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: LD_INT 4
56941: NEG
56942: PUSH
56943: LD_INT 1
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 5
56952: NEG
56953: PUSH
56954: LD_INT 0
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 5
56963: NEG
56964: PUSH
56965: LD_INT 1
56967: NEG
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 5
56975: NEG
56976: PUSH
56977: LD_INT 2
56979: NEG
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 3
56987: NEG
56988: PUSH
56989: LD_INT 2
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 3
56998: NEG
56999: PUSH
57000: LD_INT 3
57002: NEG
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 3
57010: NEG
57011: PUSH
57012: LD_INT 4
57014: NEG
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: LD_INT 2
57022: NEG
57023: PUSH
57024: LD_INT 3
57026: NEG
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 2
57034: NEG
57035: PUSH
57036: LD_INT 2
57038: NEG
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 3
57046: NEG
57047: PUSH
57048: LD_INT 2
57050: NEG
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: LD_INT 4
57058: NEG
57059: PUSH
57060: LD_INT 3
57062: NEG
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 4
57070: NEG
57071: PUSH
57072: LD_INT 4
57074: NEG
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: PUSH
57080: LD_INT 2
57082: NEG
57083: PUSH
57084: LD_INT 4
57086: NEG
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 4
57094: NEG
57095: PUSH
57096: LD_INT 2
57098: NEG
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 0
57106: PUSH
57107: LD_INT 4
57109: NEG
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 0
57117: PUSH
57118: LD_INT 5
57120: NEG
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 1
57128: PUSH
57129: LD_INT 4
57131: NEG
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: LD_INT 1
57139: PUSH
57140: LD_INT 3
57142: NEG
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: LD_INT 0
57150: PUSH
57151: LD_INT 3
57153: NEG
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 1
57161: NEG
57162: PUSH
57163: LD_INT 4
57165: NEG
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 1
57173: NEG
57174: PUSH
57175: LD_INT 5
57177: NEG
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 2
57185: PUSH
57186: LD_INT 3
57188: NEG
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 2
57196: NEG
57197: PUSH
57198: LD_INT 5
57200: NEG
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: LIST
57216: LIST
57217: LIST
57218: LIST
57219: LIST
57220: LIST
57221: LIST
57222: LIST
57223: LIST
57224: LIST
57225: LIST
57226: LIST
57227: LIST
57228: LIST
57229: LIST
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: LIST
57236: LIST
57237: LIST
57238: LIST
57239: LIST
57240: LIST
57241: LIST
57242: LIST
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
57253: LD_ADDR_VAR 0 31
57257: PUSH
57258: LD_INT 0
57260: PUSH
57261: LD_INT 4
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 0
57270: PUSH
57271: LD_INT 3
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 1
57280: PUSH
57281: LD_INT 4
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: LD_INT 1
57290: PUSH
57291: LD_INT 5
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: PUSH
57298: LD_INT 0
57300: PUSH
57301: LD_INT 5
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: LD_INT 1
57310: NEG
57311: PUSH
57312: LD_INT 4
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 1
57321: NEG
57322: PUSH
57323: LD_INT 3
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 2
57332: PUSH
57333: LD_INT 5
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 2
57342: NEG
57343: PUSH
57344: LD_INT 3
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 3
57353: NEG
57354: PUSH
57355: LD_INT 0
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 3
57364: NEG
57365: PUSH
57366: LD_INT 1
57368: NEG
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 2
57376: NEG
57377: PUSH
57378: LD_INT 0
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 2
57387: NEG
57388: PUSH
57389: LD_INT 1
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 3
57398: NEG
57399: PUSH
57400: LD_INT 1
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 4
57409: NEG
57410: PUSH
57411: LD_INT 0
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 4
57420: NEG
57421: PUSH
57422: LD_INT 1
57424: NEG
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 4
57432: NEG
57433: PUSH
57434: LD_INT 2
57436: NEG
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 2
57444: NEG
57445: PUSH
57446: LD_INT 2
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 4
57455: NEG
57456: PUSH
57457: LD_INT 4
57459: NEG
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 4
57467: NEG
57468: PUSH
57469: LD_INT 5
57471: NEG
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 3
57479: NEG
57480: PUSH
57481: LD_INT 4
57483: NEG
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 3
57491: NEG
57492: PUSH
57493: LD_INT 3
57495: NEG
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 4
57503: NEG
57504: PUSH
57505: LD_INT 3
57507: NEG
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 5
57515: NEG
57516: PUSH
57517: LD_INT 4
57519: NEG
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 5
57527: NEG
57528: PUSH
57529: LD_INT 5
57531: NEG
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 3
57539: NEG
57540: PUSH
57541: LD_INT 5
57543: NEG
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 5
57551: NEG
57552: PUSH
57553: LD_INT 3
57555: NEG
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 0
57563: PUSH
57564: LD_INT 3
57566: NEG
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 0
57574: PUSH
57575: LD_INT 4
57577: NEG
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 1
57585: PUSH
57586: LD_INT 3
57588: NEG
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: LD_INT 1
57596: PUSH
57597: LD_INT 2
57599: NEG
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 0
57607: PUSH
57608: LD_INT 2
57610: NEG
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 1
57618: NEG
57619: PUSH
57620: LD_INT 3
57622: NEG
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: LD_INT 1
57630: NEG
57631: PUSH
57632: LD_INT 4
57634: NEG
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 2
57642: PUSH
57643: LD_INT 2
57645: NEG
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 2
57653: NEG
57654: PUSH
57655: LD_INT 4
57657: NEG
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 4
57665: PUSH
57666: LD_INT 0
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: LD_INT 4
57675: PUSH
57676: LD_INT 1
57678: NEG
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: LD_INT 5
57686: PUSH
57687: LD_INT 0
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 5
57696: PUSH
57697: LD_INT 1
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 4
57706: PUSH
57707: LD_INT 1
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 3
57716: PUSH
57717: LD_INT 0
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 3
57726: PUSH
57727: LD_INT 1
57729: NEG
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: LD_INT 3
57737: PUSH
57738: LD_INT 2
57740: NEG
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 5
57748: PUSH
57749: LD_INT 2
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: LIST
57760: LIST
57761: LIST
57762: LIST
57763: LIST
57764: LIST
57765: LIST
57766: LIST
57767: LIST
57768: LIST
57769: LIST
57770: LIST
57771: LIST
57772: LIST
57773: LIST
57774: LIST
57775: LIST
57776: LIST
57777: LIST
57778: LIST
57779: LIST
57780: LIST
57781: LIST
57782: LIST
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57803: LD_ADDR_VAR 0 32
57807: PUSH
57808: LD_INT 4
57810: NEG
57811: PUSH
57812: LD_INT 0
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 4
57821: NEG
57822: PUSH
57823: LD_INT 1
57825: NEG
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 3
57833: NEG
57834: PUSH
57835: LD_INT 0
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 3
57844: NEG
57845: PUSH
57846: LD_INT 1
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: LD_INT 4
57855: NEG
57856: PUSH
57857: LD_INT 1
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 5
57866: NEG
57867: PUSH
57868: LD_INT 0
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 5
57877: NEG
57878: PUSH
57879: LD_INT 1
57881: NEG
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: LD_INT 5
57889: NEG
57890: PUSH
57891: LD_INT 2
57893: NEG
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 3
57901: NEG
57902: PUSH
57903: LD_INT 2
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 3
57912: NEG
57913: PUSH
57914: LD_INT 3
57916: NEG
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 3
57924: NEG
57925: PUSH
57926: LD_INT 4
57928: NEG
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 2
57936: NEG
57937: PUSH
57938: LD_INT 3
57940: NEG
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 2
57948: NEG
57949: PUSH
57950: LD_INT 2
57952: NEG
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 3
57960: NEG
57961: PUSH
57962: LD_INT 2
57964: NEG
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 4
57972: NEG
57973: PUSH
57974: LD_INT 3
57976: NEG
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 4
57984: NEG
57985: PUSH
57986: LD_INT 4
57988: NEG
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 2
57996: NEG
57997: PUSH
57998: LD_INT 4
58000: NEG
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 4
58008: NEG
58009: PUSH
58010: LD_INT 2
58012: NEG
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 0
58020: PUSH
58021: LD_INT 4
58023: NEG
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: LD_INT 0
58031: PUSH
58032: LD_INT 5
58034: NEG
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 1
58042: PUSH
58043: LD_INT 4
58045: NEG
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: LD_INT 1
58053: PUSH
58054: LD_INT 3
58056: NEG
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: LD_INT 0
58064: PUSH
58065: LD_INT 3
58067: NEG
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 1
58075: NEG
58076: PUSH
58077: LD_INT 4
58079: NEG
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 1
58087: NEG
58088: PUSH
58089: LD_INT 5
58091: NEG
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 2
58099: PUSH
58100: LD_INT 3
58102: NEG
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 2
58110: NEG
58111: PUSH
58112: LD_INT 5
58114: NEG
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: LD_INT 3
58122: PUSH
58123: LD_INT 0
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 3
58132: PUSH
58133: LD_INT 1
58135: NEG
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 4
58143: PUSH
58144: LD_INT 0
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: LD_INT 4
58153: PUSH
58154: LD_INT 1
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 3
58163: PUSH
58164: LD_INT 1
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 2
58173: PUSH
58174: LD_INT 0
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 2
58183: PUSH
58184: LD_INT 1
58186: NEG
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 2
58194: PUSH
58195: LD_INT 2
58197: NEG
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 4
58205: PUSH
58206: LD_INT 2
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 4
58215: PUSH
58216: LD_INT 4
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 4
58225: PUSH
58226: LD_INT 3
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: LD_INT 5
58235: PUSH
58236: LD_INT 4
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 5
58245: PUSH
58246: LD_INT 5
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 4
58255: PUSH
58256: LD_INT 5
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 3
58265: PUSH
58266: LD_INT 4
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 3
58275: PUSH
58276: LD_INT 3
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 5
58285: PUSH
58286: LD_INT 3
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: PUSH
58293: LD_INT 3
58295: PUSH
58296: LD_INT 5
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: LIST
58316: LIST
58317: LIST
58318: LIST
58319: LIST
58320: LIST
58321: LIST
58322: LIST
58323: LIST
58324: LIST
58325: LIST
58326: LIST
58327: LIST
58328: LIST
58329: LIST
58330: LIST
58331: LIST
58332: LIST
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
58350: LD_ADDR_VAR 0 33
58354: PUSH
58355: LD_INT 4
58357: NEG
58358: PUSH
58359: LD_INT 4
58361: NEG
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: LD_INT 4
58369: NEG
58370: PUSH
58371: LD_INT 5
58373: NEG
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: LD_INT 3
58381: NEG
58382: PUSH
58383: LD_INT 4
58385: NEG
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 3
58393: NEG
58394: PUSH
58395: LD_INT 3
58397: NEG
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 4
58405: NEG
58406: PUSH
58407: LD_INT 3
58409: NEG
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 5
58417: NEG
58418: PUSH
58419: LD_INT 4
58421: NEG
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: LD_INT 5
58429: NEG
58430: PUSH
58431: LD_INT 5
58433: NEG
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 3
58441: NEG
58442: PUSH
58443: LD_INT 5
58445: NEG
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 5
58453: NEG
58454: PUSH
58455: LD_INT 3
58457: NEG
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 0
58465: PUSH
58466: LD_INT 3
58468: NEG
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 0
58476: PUSH
58477: LD_INT 4
58479: NEG
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: LD_INT 1
58487: PUSH
58488: LD_INT 3
58490: NEG
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 1
58498: PUSH
58499: LD_INT 2
58501: NEG
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: LD_INT 0
58509: PUSH
58510: LD_INT 2
58512: NEG
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: PUSH
58518: LD_INT 1
58520: NEG
58521: PUSH
58522: LD_INT 3
58524: NEG
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 1
58532: NEG
58533: PUSH
58534: LD_INT 4
58536: NEG
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 2
58544: PUSH
58545: LD_INT 2
58547: NEG
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 2
58555: NEG
58556: PUSH
58557: LD_INT 4
58559: NEG
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PUSH
58565: LD_INT 4
58567: PUSH
58568: LD_INT 0
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: LD_INT 4
58577: PUSH
58578: LD_INT 1
58580: NEG
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 5
58588: PUSH
58589: LD_INT 0
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 5
58598: PUSH
58599: LD_INT 1
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 4
58608: PUSH
58609: LD_INT 1
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: LD_INT 3
58618: PUSH
58619: LD_INT 0
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: LD_INT 3
58628: PUSH
58629: LD_INT 1
58631: NEG
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 3
58639: PUSH
58640: LD_INT 2
58642: NEG
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 5
58650: PUSH
58651: LD_INT 2
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: LD_INT 3
58660: PUSH
58661: LD_INT 3
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: LD_INT 3
58670: PUSH
58671: LD_INT 2
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 4
58680: PUSH
58681: LD_INT 3
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 4
58690: PUSH
58691: LD_INT 4
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PUSH
58698: LD_INT 3
58700: PUSH
58701: LD_INT 4
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 2
58710: PUSH
58711: LD_INT 3
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 2
58720: PUSH
58721: LD_INT 2
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 4
58730: PUSH
58731: LD_INT 2
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: LD_INT 2
58740: PUSH
58741: LD_INT 4
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 0
58750: PUSH
58751: LD_INT 4
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 0
58760: PUSH
58761: LD_INT 3
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 1
58770: PUSH
58771: LD_INT 4
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 1
58780: PUSH
58781: LD_INT 5
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 0
58790: PUSH
58791: LD_INT 5
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 1
58800: NEG
58801: PUSH
58802: LD_INT 4
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: LD_INT 1
58811: NEG
58812: PUSH
58813: LD_INT 3
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: LD_INT 2
58822: PUSH
58823: LD_INT 5
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 2
58832: NEG
58833: PUSH
58834: LD_INT 3
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: LIST
58845: LIST
58846: LIST
58847: LIST
58848: LIST
58849: LIST
58850: LIST
58851: LIST
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: LIST
58857: LIST
58858: LIST
58859: LIST
58860: LIST
58861: LIST
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: LIST
58879: LIST
58880: LIST
58881: LIST
58882: LIST
58883: LIST
58884: LIST
58885: LIST
58886: LIST
58887: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58888: LD_ADDR_VAR 0 34
58892: PUSH
58893: LD_INT 0
58895: PUSH
58896: LD_INT 4
58898: NEG
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PUSH
58904: LD_INT 0
58906: PUSH
58907: LD_INT 5
58909: NEG
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: LD_INT 1
58917: PUSH
58918: LD_INT 4
58920: NEG
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: LD_INT 1
58928: PUSH
58929: LD_INT 3
58931: NEG
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 0
58939: PUSH
58940: LD_INT 3
58942: NEG
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 1
58950: NEG
58951: PUSH
58952: LD_INT 4
58954: NEG
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: LD_INT 1
58962: NEG
58963: PUSH
58964: LD_INT 5
58966: NEG
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: LD_INT 2
58974: PUSH
58975: LD_INT 3
58977: NEG
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: LD_INT 2
58985: NEG
58986: PUSH
58987: LD_INT 5
58989: NEG
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 3
58997: PUSH
58998: LD_INT 0
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: LD_INT 3
59007: PUSH
59008: LD_INT 1
59010: NEG
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 4
59018: PUSH
59019: LD_INT 0
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 4
59028: PUSH
59029: LD_INT 1
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 3
59038: PUSH
59039: LD_INT 1
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: LD_INT 2
59048: PUSH
59049: LD_INT 0
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 2
59058: PUSH
59059: LD_INT 1
59061: NEG
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 2
59069: PUSH
59070: LD_INT 2
59072: NEG
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 4
59080: PUSH
59081: LD_INT 2
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: LD_INT 4
59090: PUSH
59091: LD_INT 4
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 4
59100: PUSH
59101: LD_INT 3
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: LD_INT 5
59110: PUSH
59111: LD_INT 4
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: PUSH
59118: LD_INT 5
59120: PUSH
59121: LD_INT 5
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: LD_INT 4
59130: PUSH
59131: LD_INT 5
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 3
59140: PUSH
59141: LD_INT 4
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: LD_INT 3
59150: PUSH
59151: LD_INT 3
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 5
59160: PUSH
59161: LD_INT 3
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 3
59170: PUSH
59171: LD_INT 5
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 0
59180: PUSH
59181: LD_INT 3
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 0
59190: PUSH
59191: LD_INT 2
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 1
59200: PUSH
59201: LD_INT 3
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: LD_INT 1
59210: PUSH
59211: LD_INT 4
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 0
59220: PUSH
59221: LD_INT 4
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: LD_INT 1
59230: NEG
59231: PUSH
59232: LD_INT 3
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 1
59241: NEG
59242: PUSH
59243: LD_INT 2
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 2
59252: PUSH
59253: LD_INT 4
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 2
59262: NEG
59263: PUSH
59264: LD_INT 2
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 4
59273: NEG
59274: PUSH
59275: LD_INT 0
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 4
59284: NEG
59285: PUSH
59286: LD_INT 1
59288: NEG
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: LD_INT 3
59296: NEG
59297: PUSH
59298: LD_INT 0
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 3
59307: NEG
59308: PUSH
59309: LD_INT 1
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: PUSH
59316: LD_INT 4
59318: NEG
59319: PUSH
59320: LD_INT 1
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: PUSH
59327: LD_INT 5
59329: NEG
59330: PUSH
59331: LD_INT 0
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: LD_INT 5
59340: NEG
59341: PUSH
59342: LD_INT 1
59344: NEG
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 5
59352: NEG
59353: PUSH
59354: LD_INT 2
59356: NEG
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 3
59364: NEG
59365: PUSH
59366: LD_INT 2
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: LIST
59395: LIST
59396: LIST
59397: LIST
59398: LIST
59399: LIST
59400: LIST
59401: LIST
59402: LIST
59403: LIST
59404: LIST
59405: LIST
59406: LIST
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: LIST
59413: LIST
59414: LIST
59415: LIST
59416: LIST
59417: LIST
59418: LIST
59419: ST_TO_ADDR
// end ; end ;
59420: GO 59423
59422: POP
// case btype of b_depot , b_warehouse :
59423: LD_VAR 0 1
59427: PUSH
59428: LD_INT 0
59430: DOUBLE
59431: EQUAL
59432: IFTRUE 59442
59434: LD_INT 1
59436: DOUBLE
59437: EQUAL
59438: IFTRUE 59442
59440: GO 59643
59442: POP
// case nation of nation_american :
59443: LD_VAR 0 5
59447: PUSH
59448: LD_INT 1
59450: DOUBLE
59451: EQUAL
59452: IFTRUE 59456
59454: GO 59512
59456: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
59457: LD_ADDR_VAR 0 9
59461: PUSH
59462: LD_VAR 0 11
59466: PUSH
59467: LD_VAR 0 12
59471: PUSH
59472: LD_VAR 0 13
59476: PUSH
59477: LD_VAR 0 14
59481: PUSH
59482: LD_VAR 0 15
59486: PUSH
59487: LD_VAR 0 16
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: PUSH
59500: LD_VAR 0 4
59504: PUSH
59505: LD_INT 1
59507: PLUS
59508: ARRAY
59509: ST_TO_ADDR
59510: GO 59641
59512: LD_INT 2
59514: DOUBLE
59515: EQUAL
59516: IFTRUE 59520
59518: GO 59576
59520: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59521: LD_ADDR_VAR 0 9
59525: PUSH
59526: LD_VAR 0 17
59530: PUSH
59531: LD_VAR 0 18
59535: PUSH
59536: LD_VAR 0 19
59540: PUSH
59541: LD_VAR 0 20
59545: PUSH
59546: LD_VAR 0 21
59550: PUSH
59551: LD_VAR 0 22
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: LIST
59560: LIST
59561: LIST
59562: LIST
59563: PUSH
59564: LD_VAR 0 4
59568: PUSH
59569: LD_INT 1
59571: PLUS
59572: ARRAY
59573: ST_TO_ADDR
59574: GO 59641
59576: LD_INT 3
59578: DOUBLE
59579: EQUAL
59580: IFTRUE 59584
59582: GO 59640
59584: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59585: LD_ADDR_VAR 0 9
59589: PUSH
59590: LD_VAR 0 23
59594: PUSH
59595: LD_VAR 0 24
59599: PUSH
59600: LD_VAR 0 25
59604: PUSH
59605: LD_VAR 0 26
59609: PUSH
59610: LD_VAR 0 27
59614: PUSH
59615: LD_VAR 0 28
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: LIST
59624: LIST
59625: LIST
59626: LIST
59627: PUSH
59628: LD_VAR 0 4
59632: PUSH
59633: LD_INT 1
59635: PLUS
59636: ARRAY
59637: ST_TO_ADDR
59638: GO 59641
59640: POP
59641: GO 60196
59643: LD_INT 2
59645: DOUBLE
59646: EQUAL
59647: IFTRUE 59657
59649: LD_INT 3
59651: DOUBLE
59652: EQUAL
59653: IFTRUE 59657
59655: GO 59713
59657: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59658: LD_ADDR_VAR 0 9
59662: PUSH
59663: LD_VAR 0 29
59667: PUSH
59668: LD_VAR 0 30
59672: PUSH
59673: LD_VAR 0 31
59677: PUSH
59678: LD_VAR 0 32
59682: PUSH
59683: LD_VAR 0 33
59687: PUSH
59688: LD_VAR 0 34
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: PUSH
59701: LD_VAR 0 4
59705: PUSH
59706: LD_INT 1
59708: PLUS
59709: ARRAY
59710: ST_TO_ADDR
59711: GO 60196
59713: LD_INT 16
59715: DOUBLE
59716: EQUAL
59717: IFTRUE 59775
59719: LD_INT 17
59721: DOUBLE
59722: EQUAL
59723: IFTRUE 59775
59725: LD_INT 18
59727: DOUBLE
59728: EQUAL
59729: IFTRUE 59775
59731: LD_INT 19
59733: DOUBLE
59734: EQUAL
59735: IFTRUE 59775
59737: LD_INT 22
59739: DOUBLE
59740: EQUAL
59741: IFTRUE 59775
59743: LD_INT 20
59745: DOUBLE
59746: EQUAL
59747: IFTRUE 59775
59749: LD_INT 21
59751: DOUBLE
59752: EQUAL
59753: IFTRUE 59775
59755: LD_INT 23
59757: DOUBLE
59758: EQUAL
59759: IFTRUE 59775
59761: LD_INT 24
59763: DOUBLE
59764: EQUAL
59765: IFTRUE 59775
59767: LD_INT 25
59769: DOUBLE
59770: EQUAL
59771: IFTRUE 59775
59773: GO 59831
59775: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59776: LD_ADDR_VAR 0 9
59780: PUSH
59781: LD_VAR 0 35
59785: PUSH
59786: LD_VAR 0 36
59790: PUSH
59791: LD_VAR 0 37
59795: PUSH
59796: LD_VAR 0 38
59800: PUSH
59801: LD_VAR 0 39
59805: PUSH
59806: LD_VAR 0 40
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: PUSH
59819: LD_VAR 0 4
59823: PUSH
59824: LD_INT 1
59826: PLUS
59827: ARRAY
59828: ST_TO_ADDR
59829: GO 60196
59831: LD_INT 6
59833: DOUBLE
59834: EQUAL
59835: IFTRUE 59887
59837: LD_INT 7
59839: DOUBLE
59840: EQUAL
59841: IFTRUE 59887
59843: LD_INT 8
59845: DOUBLE
59846: EQUAL
59847: IFTRUE 59887
59849: LD_INT 13
59851: DOUBLE
59852: EQUAL
59853: IFTRUE 59887
59855: LD_INT 12
59857: DOUBLE
59858: EQUAL
59859: IFTRUE 59887
59861: LD_INT 15
59863: DOUBLE
59864: EQUAL
59865: IFTRUE 59887
59867: LD_INT 11
59869: DOUBLE
59870: EQUAL
59871: IFTRUE 59887
59873: LD_INT 14
59875: DOUBLE
59876: EQUAL
59877: IFTRUE 59887
59879: LD_INT 10
59881: DOUBLE
59882: EQUAL
59883: IFTRUE 59887
59885: GO 59943
59887: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
59888: LD_ADDR_VAR 0 9
59892: PUSH
59893: LD_VAR 0 41
59897: PUSH
59898: LD_VAR 0 42
59902: PUSH
59903: LD_VAR 0 43
59907: PUSH
59908: LD_VAR 0 44
59912: PUSH
59913: LD_VAR 0 45
59917: PUSH
59918: LD_VAR 0 46
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: PUSH
59931: LD_VAR 0 4
59935: PUSH
59936: LD_INT 1
59938: PLUS
59939: ARRAY
59940: ST_TO_ADDR
59941: GO 60196
59943: LD_INT 36
59945: DOUBLE
59946: EQUAL
59947: IFTRUE 59951
59949: GO 60007
59951: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59952: LD_ADDR_VAR 0 9
59956: PUSH
59957: LD_VAR 0 47
59961: PUSH
59962: LD_VAR 0 48
59966: PUSH
59967: LD_VAR 0 49
59971: PUSH
59972: LD_VAR 0 50
59976: PUSH
59977: LD_VAR 0 51
59981: PUSH
59982: LD_VAR 0 52
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: LIST
59991: LIST
59992: LIST
59993: LIST
59994: PUSH
59995: LD_VAR 0 4
59999: PUSH
60000: LD_INT 1
60002: PLUS
60003: ARRAY
60004: ST_TO_ADDR
60005: GO 60196
60007: LD_INT 4
60009: DOUBLE
60010: EQUAL
60011: IFTRUE 60033
60013: LD_INT 5
60015: DOUBLE
60016: EQUAL
60017: IFTRUE 60033
60019: LD_INT 34
60021: DOUBLE
60022: EQUAL
60023: IFTRUE 60033
60025: LD_INT 37
60027: DOUBLE
60028: EQUAL
60029: IFTRUE 60033
60031: GO 60089
60033: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
60034: LD_ADDR_VAR 0 9
60038: PUSH
60039: LD_VAR 0 53
60043: PUSH
60044: LD_VAR 0 54
60048: PUSH
60049: LD_VAR 0 55
60053: PUSH
60054: LD_VAR 0 56
60058: PUSH
60059: LD_VAR 0 57
60063: PUSH
60064: LD_VAR 0 58
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: LIST
60075: LIST
60076: PUSH
60077: LD_VAR 0 4
60081: PUSH
60082: LD_INT 1
60084: PLUS
60085: ARRAY
60086: ST_TO_ADDR
60087: GO 60196
60089: LD_INT 31
60091: DOUBLE
60092: EQUAL
60093: IFTRUE 60139
60095: LD_INT 32
60097: DOUBLE
60098: EQUAL
60099: IFTRUE 60139
60101: LD_INT 33
60103: DOUBLE
60104: EQUAL
60105: IFTRUE 60139
60107: LD_INT 27
60109: DOUBLE
60110: EQUAL
60111: IFTRUE 60139
60113: LD_INT 26
60115: DOUBLE
60116: EQUAL
60117: IFTRUE 60139
60119: LD_INT 28
60121: DOUBLE
60122: EQUAL
60123: IFTRUE 60139
60125: LD_INT 29
60127: DOUBLE
60128: EQUAL
60129: IFTRUE 60139
60131: LD_INT 30
60133: DOUBLE
60134: EQUAL
60135: IFTRUE 60139
60137: GO 60195
60139: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
60140: LD_ADDR_VAR 0 9
60144: PUSH
60145: LD_VAR 0 59
60149: PUSH
60150: LD_VAR 0 60
60154: PUSH
60155: LD_VAR 0 61
60159: PUSH
60160: LD_VAR 0 62
60164: PUSH
60165: LD_VAR 0 63
60169: PUSH
60170: LD_VAR 0 64
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: LIST
60179: LIST
60180: LIST
60181: LIST
60182: PUSH
60183: LD_VAR 0 4
60187: PUSH
60188: LD_INT 1
60190: PLUS
60191: ARRAY
60192: ST_TO_ADDR
60193: GO 60196
60195: POP
// temp_list2 = [ ] ;
60196: LD_ADDR_VAR 0 10
60200: PUSH
60201: EMPTY
60202: ST_TO_ADDR
// for i in temp_list do
60203: LD_ADDR_VAR 0 8
60207: PUSH
60208: LD_VAR 0 9
60212: PUSH
60213: FOR_IN
60214: IFFALSE 60266
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
60216: LD_ADDR_VAR 0 10
60220: PUSH
60221: LD_VAR 0 10
60225: PUSH
60226: LD_VAR 0 8
60230: PUSH
60231: LD_INT 1
60233: ARRAY
60234: PUSH
60235: LD_VAR 0 2
60239: PLUS
60240: PUSH
60241: LD_VAR 0 8
60245: PUSH
60246: LD_INT 2
60248: ARRAY
60249: PUSH
60250: LD_VAR 0 3
60254: PLUS
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: EMPTY
60261: LIST
60262: ADD
60263: ST_TO_ADDR
60264: GO 60213
60266: POP
60267: POP
// result = temp_list2 ;
60268: LD_ADDR_VAR 0 7
60272: PUSH
60273: LD_VAR 0 10
60277: ST_TO_ADDR
// end ;
60278: LD_VAR 0 7
60282: RET
// export function EnemyInRange ( unit , dist ) ; begin
60283: LD_INT 0
60285: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
60286: LD_ADDR_VAR 0 3
60290: PUSH
60291: LD_VAR 0 1
60295: PPUSH
60296: CALL_OW 255
60300: PPUSH
60301: LD_VAR 0 1
60305: PPUSH
60306: CALL_OW 250
60310: PPUSH
60311: LD_VAR 0 1
60315: PPUSH
60316: CALL_OW 251
60320: PPUSH
60321: LD_VAR 0 2
60325: PPUSH
60326: CALL 33656 0 4
60330: PUSH
60331: LD_INT 4
60333: ARRAY
60334: ST_TO_ADDR
// end ;
60335: LD_VAR 0 3
60339: RET
// export function PlayerSeeMe ( unit ) ; begin
60340: LD_INT 0
60342: PPUSH
// result := See ( your_side , unit ) ;
60343: LD_ADDR_VAR 0 2
60347: PUSH
60348: LD_OWVAR 2
60352: PPUSH
60353: LD_VAR 0 1
60357: PPUSH
60358: CALL_OW 292
60362: ST_TO_ADDR
// end ;
60363: LD_VAR 0 2
60367: RET
// export function ReverseDir ( unit ) ; begin
60368: LD_INT 0
60370: PPUSH
// if not unit then
60371: LD_VAR 0 1
60375: NOT
60376: IFFALSE 60380
// exit ;
60378: GO 60403
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
60380: LD_ADDR_VAR 0 2
60384: PUSH
60385: LD_VAR 0 1
60389: PPUSH
60390: CALL_OW 254
60394: PUSH
60395: LD_INT 3
60397: PLUS
60398: PUSH
60399: LD_INT 6
60401: MOD
60402: ST_TO_ADDR
// end ;
60403: LD_VAR 0 2
60407: RET
// export function ReverseArray ( array ) ; var i ; begin
60408: LD_INT 0
60410: PPUSH
60411: PPUSH
// if not array then
60412: LD_VAR 0 1
60416: NOT
60417: IFFALSE 60421
// exit ;
60419: GO 60476
// result := [ ] ;
60421: LD_ADDR_VAR 0 2
60425: PUSH
60426: EMPTY
60427: ST_TO_ADDR
// for i := array downto 1 do
60428: LD_ADDR_VAR 0 3
60432: PUSH
60433: DOUBLE
60434: LD_VAR 0 1
60438: INC
60439: ST_TO_ADDR
60440: LD_INT 1
60442: PUSH
60443: FOR_DOWNTO
60444: IFFALSE 60474
// result := Join ( result , array [ i ] ) ;
60446: LD_ADDR_VAR 0 2
60450: PUSH
60451: LD_VAR 0 2
60455: PPUSH
60456: LD_VAR 0 1
60460: PUSH
60461: LD_VAR 0 3
60465: ARRAY
60466: PPUSH
60467: CALL 65132 0 2
60471: ST_TO_ADDR
60472: GO 60443
60474: POP
60475: POP
// end ;
60476: LD_VAR 0 2
60480: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
60481: LD_INT 0
60483: PPUSH
60484: PPUSH
60485: PPUSH
60486: PPUSH
60487: PPUSH
60488: PPUSH
// if not unit or not hexes then
60489: LD_VAR 0 1
60493: NOT
60494: PUSH
60495: LD_VAR 0 2
60499: NOT
60500: OR
60501: IFFALSE 60505
// exit ;
60503: GO 60628
// dist := 9999 ;
60505: LD_ADDR_VAR 0 5
60509: PUSH
60510: LD_INT 9999
60512: ST_TO_ADDR
// for i = 1 to hexes do
60513: LD_ADDR_VAR 0 4
60517: PUSH
60518: DOUBLE
60519: LD_INT 1
60521: DEC
60522: ST_TO_ADDR
60523: LD_VAR 0 2
60527: PUSH
60528: FOR_TO
60529: IFFALSE 60616
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60531: LD_ADDR_VAR 0 6
60535: PUSH
60536: LD_VAR 0 1
60540: PPUSH
60541: LD_VAR 0 2
60545: PUSH
60546: LD_VAR 0 4
60550: ARRAY
60551: PUSH
60552: LD_INT 1
60554: ARRAY
60555: PPUSH
60556: LD_VAR 0 2
60560: PUSH
60561: LD_VAR 0 4
60565: ARRAY
60566: PUSH
60567: LD_INT 2
60569: ARRAY
60570: PPUSH
60571: CALL_OW 297
60575: ST_TO_ADDR
// if tdist < dist then
60576: LD_VAR 0 6
60580: PUSH
60581: LD_VAR 0 5
60585: LESS
60586: IFFALSE 60614
// begin hex := hexes [ i ] ;
60588: LD_ADDR_VAR 0 8
60592: PUSH
60593: LD_VAR 0 2
60597: PUSH
60598: LD_VAR 0 4
60602: ARRAY
60603: ST_TO_ADDR
// dist := tdist ;
60604: LD_ADDR_VAR 0 5
60608: PUSH
60609: LD_VAR 0 6
60613: ST_TO_ADDR
// end ; end ;
60614: GO 60528
60616: POP
60617: POP
// result := hex ;
60618: LD_ADDR_VAR 0 3
60622: PUSH
60623: LD_VAR 0 8
60627: ST_TO_ADDR
// end ;
60628: LD_VAR 0 3
60632: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60633: LD_INT 0
60635: PPUSH
60636: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60637: LD_VAR 0 1
60641: NOT
60642: PUSH
60643: LD_VAR 0 1
60647: PUSH
60648: LD_INT 21
60650: PUSH
60651: LD_INT 2
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: PUSH
60658: LD_INT 23
60660: PUSH
60661: LD_INT 2
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PPUSH
60672: CALL_OW 69
60676: IN
60677: NOT
60678: OR
60679: IFFALSE 60683
// exit ;
60681: GO 60730
// for i = 1 to 3 do
60683: LD_ADDR_VAR 0 3
60687: PUSH
60688: DOUBLE
60689: LD_INT 1
60691: DEC
60692: ST_TO_ADDR
60693: LD_INT 3
60695: PUSH
60696: FOR_TO
60697: IFFALSE 60728
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60699: LD_VAR 0 1
60703: PPUSH
60704: CALL_OW 250
60708: PPUSH
60709: LD_VAR 0 1
60713: PPUSH
60714: CALL_OW 251
60718: PPUSH
60719: LD_INT 1
60721: PPUSH
60722: CALL_OW 453
60726: GO 60696
60728: POP
60729: POP
// end ;
60730: LD_VAR 0 2
60734: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60735: LD_INT 0
60737: PPUSH
60738: PPUSH
60739: PPUSH
60740: PPUSH
60741: PPUSH
60742: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
60743: LD_VAR 0 1
60747: NOT
60748: PUSH
60749: LD_VAR 0 2
60753: NOT
60754: OR
60755: PUSH
60756: LD_VAR 0 1
60760: PPUSH
60761: CALL_OW 314
60765: OR
60766: IFFALSE 60770
// exit ;
60768: GO 61237
// if GetLives ( i ) < 250 then
60770: LD_VAR 0 4
60774: PPUSH
60775: CALL_OW 256
60779: PUSH
60780: LD_INT 250
60782: LESS
60783: IFFALSE 60796
// begin ComAutodestruct ( i ) ;
60785: LD_VAR 0 4
60789: PPUSH
60790: CALL 60633 0 1
// exit ;
60794: GO 61237
// end ; x := GetX ( enemy_unit ) ;
60796: LD_ADDR_VAR 0 7
60800: PUSH
60801: LD_VAR 0 2
60805: PPUSH
60806: CALL_OW 250
60810: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60811: LD_ADDR_VAR 0 8
60815: PUSH
60816: LD_VAR 0 2
60820: PPUSH
60821: CALL_OW 251
60825: ST_TO_ADDR
// if not x or not y then
60826: LD_VAR 0 7
60830: NOT
60831: PUSH
60832: LD_VAR 0 8
60836: NOT
60837: OR
60838: IFFALSE 60842
// exit ;
60840: GO 61237
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60842: LD_ADDR_VAR 0 6
60846: PUSH
60847: LD_VAR 0 7
60851: PPUSH
60852: LD_INT 0
60854: PPUSH
60855: LD_INT 4
60857: PPUSH
60858: CALL_OW 272
60862: PUSH
60863: LD_VAR 0 8
60867: PPUSH
60868: LD_INT 0
60870: PPUSH
60871: LD_INT 4
60873: PPUSH
60874: CALL_OW 273
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_VAR 0 7
60887: PPUSH
60888: LD_INT 1
60890: PPUSH
60891: LD_INT 4
60893: PPUSH
60894: CALL_OW 272
60898: PUSH
60899: LD_VAR 0 8
60903: PPUSH
60904: LD_INT 1
60906: PPUSH
60907: LD_INT 4
60909: PPUSH
60910: CALL_OW 273
60914: PUSH
60915: EMPTY
60916: LIST
60917: LIST
60918: PUSH
60919: LD_VAR 0 7
60923: PPUSH
60924: LD_INT 2
60926: PPUSH
60927: LD_INT 4
60929: PPUSH
60930: CALL_OW 272
60934: PUSH
60935: LD_VAR 0 8
60939: PPUSH
60940: LD_INT 2
60942: PPUSH
60943: LD_INT 4
60945: PPUSH
60946: CALL_OW 273
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_VAR 0 7
60959: PPUSH
60960: LD_INT 3
60962: PPUSH
60963: LD_INT 4
60965: PPUSH
60966: CALL_OW 272
60970: PUSH
60971: LD_VAR 0 8
60975: PPUSH
60976: LD_INT 3
60978: PPUSH
60979: LD_INT 4
60981: PPUSH
60982: CALL_OW 273
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: PUSH
60991: LD_VAR 0 7
60995: PPUSH
60996: LD_INT 4
60998: PPUSH
60999: LD_INT 4
61001: PPUSH
61002: CALL_OW 272
61006: PUSH
61007: LD_VAR 0 8
61011: PPUSH
61012: LD_INT 4
61014: PPUSH
61015: LD_INT 4
61017: PPUSH
61018: CALL_OW 273
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: LD_VAR 0 7
61031: PPUSH
61032: LD_INT 5
61034: PPUSH
61035: LD_INT 4
61037: PPUSH
61038: CALL_OW 272
61042: PUSH
61043: LD_VAR 0 8
61047: PPUSH
61048: LD_INT 5
61050: PPUSH
61051: LD_INT 4
61053: PPUSH
61054: CALL_OW 273
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: LIST
61067: LIST
61068: LIST
61069: LIST
61070: ST_TO_ADDR
// for i = tmp downto 1 do
61071: LD_ADDR_VAR 0 4
61075: PUSH
61076: DOUBLE
61077: LD_VAR 0 6
61081: INC
61082: ST_TO_ADDR
61083: LD_INT 1
61085: PUSH
61086: FOR_DOWNTO
61087: IFFALSE 61188
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
61089: LD_VAR 0 6
61093: PUSH
61094: LD_VAR 0 4
61098: ARRAY
61099: PUSH
61100: LD_INT 1
61102: ARRAY
61103: PPUSH
61104: LD_VAR 0 6
61108: PUSH
61109: LD_VAR 0 4
61113: ARRAY
61114: PUSH
61115: LD_INT 2
61117: ARRAY
61118: PPUSH
61119: CALL_OW 488
61123: NOT
61124: PUSH
61125: LD_VAR 0 6
61129: PUSH
61130: LD_VAR 0 4
61134: ARRAY
61135: PUSH
61136: LD_INT 1
61138: ARRAY
61139: PPUSH
61140: LD_VAR 0 6
61144: PUSH
61145: LD_VAR 0 4
61149: ARRAY
61150: PUSH
61151: LD_INT 2
61153: ARRAY
61154: PPUSH
61155: CALL_OW 428
61159: PUSH
61160: LD_INT 0
61162: NONEQUAL
61163: OR
61164: IFFALSE 61186
// tmp := Delete ( tmp , i ) ;
61166: LD_ADDR_VAR 0 6
61170: PUSH
61171: LD_VAR 0 6
61175: PPUSH
61176: LD_VAR 0 4
61180: PPUSH
61181: CALL_OW 3
61185: ST_TO_ADDR
61186: GO 61086
61188: POP
61189: POP
// j := GetClosestHex ( unit , tmp ) ;
61190: LD_ADDR_VAR 0 5
61194: PUSH
61195: LD_VAR 0 1
61199: PPUSH
61200: LD_VAR 0 6
61204: PPUSH
61205: CALL 60481 0 2
61209: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
61210: LD_VAR 0 1
61214: PPUSH
61215: LD_VAR 0 5
61219: PUSH
61220: LD_INT 1
61222: ARRAY
61223: PPUSH
61224: LD_VAR 0 5
61228: PUSH
61229: LD_INT 2
61231: ARRAY
61232: PPUSH
61233: CALL_OW 111
// end ;
61237: LD_VAR 0 3
61241: RET
// export function PrepareApemanSoldier ( ) ; begin
61242: LD_INT 0
61244: PPUSH
// uc_nation := 0 ;
61245: LD_ADDR_OWVAR 21
61249: PUSH
61250: LD_INT 0
61252: ST_TO_ADDR
// hc_sex := sex_male ;
61253: LD_ADDR_OWVAR 27
61257: PUSH
61258: LD_INT 1
61260: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
61261: LD_ADDR_OWVAR 28
61265: PUSH
61266: LD_INT 15
61268: ST_TO_ADDR
// hc_gallery :=  ;
61269: LD_ADDR_OWVAR 33
61273: PUSH
61274: LD_STRING 
61276: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61277: LD_ADDR_OWVAR 31
61281: PUSH
61282: LD_INT 0
61284: PPUSH
61285: LD_INT 3
61287: PPUSH
61288: CALL_OW 12
61292: PUSH
61293: LD_INT 0
61295: PPUSH
61296: LD_INT 3
61298: PPUSH
61299: CALL_OW 12
61303: PUSH
61304: LD_INT 0
61306: PUSH
61307: LD_INT 0
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: LIST
61314: LIST
61315: ST_TO_ADDR
// end ;
61316: LD_VAR 0 1
61320: RET
// export function PrepareApemanEngineer ( ) ; begin
61321: LD_INT 0
61323: PPUSH
// uc_nation := 0 ;
61324: LD_ADDR_OWVAR 21
61328: PUSH
61329: LD_INT 0
61331: ST_TO_ADDR
// hc_sex := sex_male ;
61332: LD_ADDR_OWVAR 27
61336: PUSH
61337: LD_INT 1
61339: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
61340: LD_ADDR_OWVAR 28
61344: PUSH
61345: LD_INT 16
61347: ST_TO_ADDR
// hc_gallery :=  ;
61348: LD_ADDR_OWVAR 33
61352: PUSH
61353: LD_STRING 
61355: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61356: LD_ADDR_OWVAR 31
61360: PUSH
61361: LD_INT 0
61363: PPUSH
61364: LD_INT 3
61366: PPUSH
61367: CALL_OW 12
61371: PUSH
61372: LD_INT 0
61374: PPUSH
61375: LD_INT 3
61377: PPUSH
61378: CALL_OW 12
61382: PUSH
61383: LD_INT 0
61385: PUSH
61386: LD_INT 0
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: LIST
61393: LIST
61394: ST_TO_ADDR
// end ;
61395: LD_VAR 0 1
61399: RET
// export function PrepareApeman ( agressivity ) ; begin
61400: LD_INT 0
61402: PPUSH
// uc_side := 0 ;
61403: LD_ADDR_OWVAR 20
61407: PUSH
61408: LD_INT 0
61410: ST_TO_ADDR
// uc_nation := 0 ;
61411: LD_ADDR_OWVAR 21
61415: PUSH
61416: LD_INT 0
61418: ST_TO_ADDR
// hc_sex := sex_male ;
61419: LD_ADDR_OWVAR 27
61423: PUSH
61424: LD_INT 1
61426: ST_TO_ADDR
// hc_class := class_apeman ;
61427: LD_ADDR_OWVAR 28
61431: PUSH
61432: LD_INT 12
61434: ST_TO_ADDR
// hc_gallery :=  ;
61435: LD_ADDR_OWVAR 33
61439: PUSH
61440: LD_STRING 
61442: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61443: LD_ADDR_OWVAR 35
61447: PUSH
61448: LD_VAR 0 1
61452: NEG
61453: PPUSH
61454: LD_VAR 0 1
61458: PPUSH
61459: CALL_OW 12
61463: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61464: LD_ADDR_OWVAR 31
61468: PUSH
61469: LD_INT 0
61471: PPUSH
61472: LD_INT 3
61474: PPUSH
61475: CALL_OW 12
61479: PUSH
61480: LD_INT 0
61482: PPUSH
61483: LD_INT 3
61485: PPUSH
61486: CALL_OW 12
61490: PUSH
61491: LD_INT 0
61493: PUSH
61494: LD_INT 0
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: LIST
61501: LIST
61502: ST_TO_ADDR
// end ;
61503: LD_VAR 0 2
61507: RET
// export function PrepareTiger ( agressivity ) ; begin
61508: LD_INT 0
61510: PPUSH
// uc_side := 0 ;
61511: LD_ADDR_OWVAR 20
61515: PUSH
61516: LD_INT 0
61518: ST_TO_ADDR
// uc_nation := 0 ;
61519: LD_ADDR_OWVAR 21
61523: PUSH
61524: LD_INT 0
61526: ST_TO_ADDR
// hc_class := class_tiger ;
61527: LD_ADDR_OWVAR 28
61531: PUSH
61532: LD_INT 14
61534: ST_TO_ADDR
// hc_gallery :=  ;
61535: LD_ADDR_OWVAR 33
61539: PUSH
61540: LD_STRING 
61542: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61543: LD_ADDR_OWVAR 35
61547: PUSH
61548: LD_VAR 0 1
61552: NEG
61553: PPUSH
61554: LD_VAR 0 1
61558: PPUSH
61559: CALL_OW 12
61563: ST_TO_ADDR
// end ;
61564: LD_VAR 0 2
61568: RET
// export function PrepareEnchidna ( ) ; begin
61569: LD_INT 0
61571: PPUSH
// uc_side := 0 ;
61572: LD_ADDR_OWVAR 20
61576: PUSH
61577: LD_INT 0
61579: ST_TO_ADDR
// uc_nation := 0 ;
61580: LD_ADDR_OWVAR 21
61584: PUSH
61585: LD_INT 0
61587: ST_TO_ADDR
// hc_class := class_baggie ;
61588: LD_ADDR_OWVAR 28
61592: PUSH
61593: LD_INT 13
61595: ST_TO_ADDR
// hc_gallery :=  ;
61596: LD_ADDR_OWVAR 33
61600: PUSH
61601: LD_STRING 
61603: ST_TO_ADDR
// end ;
61604: LD_VAR 0 1
61608: RET
// export function PrepareFrog ( ) ; begin
61609: LD_INT 0
61611: PPUSH
// uc_side := 0 ;
61612: LD_ADDR_OWVAR 20
61616: PUSH
61617: LD_INT 0
61619: ST_TO_ADDR
// uc_nation := 0 ;
61620: LD_ADDR_OWVAR 21
61624: PUSH
61625: LD_INT 0
61627: ST_TO_ADDR
// hc_class := class_frog ;
61628: LD_ADDR_OWVAR 28
61632: PUSH
61633: LD_INT 19
61635: ST_TO_ADDR
// hc_gallery :=  ;
61636: LD_ADDR_OWVAR 33
61640: PUSH
61641: LD_STRING 
61643: ST_TO_ADDR
// end ;
61644: LD_VAR 0 1
61648: RET
// export function PrepareFish ( ) ; begin
61649: LD_INT 0
61651: PPUSH
// uc_side := 0 ;
61652: LD_ADDR_OWVAR 20
61656: PUSH
61657: LD_INT 0
61659: ST_TO_ADDR
// uc_nation := 0 ;
61660: LD_ADDR_OWVAR 21
61664: PUSH
61665: LD_INT 0
61667: ST_TO_ADDR
// hc_class := class_fish ;
61668: LD_ADDR_OWVAR 28
61672: PUSH
61673: LD_INT 20
61675: ST_TO_ADDR
// hc_gallery :=  ;
61676: LD_ADDR_OWVAR 33
61680: PUSH
61681: LD_STRING 
61683: ST_TO_ADDR
// end ;
61684: LD_VAR 0 1
61688: RET
// export function PrepareBird ( ) ; begin
61689: LD_INT 0
61691: PPUSH
// uc_side := 0 ;
61692: LD_ADDR_OWVAR 20
61696: PUSH
61697: LD_INT 0
61699: ST_TO_ADDR
// uc_nation := 0 ;
61700: LD_ADDR_OWVAR 21
61704: PUSH
61705: LD_INT 0
61707: ST_TO_ADDR
// hc_class := class_phororhacos ;
61708: LD_ADDR_OWVAR 28
61712: PUSH
61713: LD_INT 18
61715: ST_TO_ADDR
// hc_gallery :=  ;
61716: LD_ADDR_OWVAR 33
61720: PUSH
61721: LD_STRING 
61723: ST_TO_ADDR
// end ;
61724: LD_VAR 0 1
61728: RET
// export function PrepareHorse ( ) ; begin
61729: LD_INT 0
61731: PPUSH
// uc_side := 0 ;
61732: LD_ADDR_OWVAR 20
61736: PUSH
61737: LD_INT 0
61739: ST_TO_ADDR
// uc_nation := 0 ;
61740: LD_ADDR_OWVAR 21
61744: PUSH
61745: LD_INT 0
61747: ST_TO_ADDR
// hc_class := class_horse ;
61748: LD_ADDR_OWVAR 28
61752: PUSH
61753: LD_INT 21
61755: ST_TO_ADDR
// hc_gallery :=  ;
61756: LD_ADDR_OWVAR 33
61760: PUSH
61761: LD_STRING 
61763: ST_TO_ADDR
// end ;
61764: LD_VAR 0 1
61768: RET
// export function PrepareMastodont ( ) ; begin
61769: LD_INT 0
61771: PPUSH
// uc_side := 0 ;
61772: LD_ADDR_OWVAR 20
61776: PUSH
61777: LD_INT 0
61779: ST_TO_ADDR
// uc_nation := 0 ;
61780: LD_ADDR_OWVAR 21
61784: PUSH
61785: LD_INT 0
61787: ST_TO_ADDR
// vc_chassis := class_mastodont ;
61788: LD_ADDR_OWVAR 37
61792: PUSH
61793: LD_INT 31
61795: ST_TO_ADDR
// vc_control := control_rider ;
61796: LD_ADDR_OWVAR 38
61800: PUSH
61801: LD_INT 4
61803: ST_TO_ADDR
// end ;
61804: LD_VAR 0 1
61808: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61809: LD_INT 0
61811: PPUSH
61812: PPUSH
61813: PPUSH
// uc_side = 0 ;
61814: LD_ADDR_OWVAR 20
61818: PUSH
61819: LD_INT 0
61821: ST_TO_ADDR
// uc_nation = 0 ;
61822: LD_ADDR_OWVAR 21
61826: PUSH
61827: LD_INT 0
61829: ST_TO_ADDR
// InitHc_All ( ) ;
61830: CALL_OW 584
// InitVc ;
61834: CALL_OW 20
// if mastodonts then
61838: LD_VAR 0 6
61842: IFFALSE 61909
// for i = 1 to mastodonts do
61844: LD_ADDR_VAR 0 11
61848: PUSH
61849: DOUBLE
61850: LD_INT 1
61852: DEC
61853: ST_TO_ADDR
61854: LD_VAR 0 6
61858: PUSH
61859: FOR_TO
61860: IFFALSE 61907
// begin vc_chassis := 31 ;
61862: LD_ADDR_OWVAR 37
61866: PUSH
61867: LD_INT 31
61869: ST_TO_ADDR
// vc_control := control_rider ;
61870: LD_ADDR_OWVAR 38
61874: PUSH
61875: LD_INT 4
61877: ST_TO_ADDR
// animal := CreateVehicle ;
61878: LD_ADDR_VAR 0 12
61882: PUSH
61883: CALL_OW 45
61887: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61888: LD_VAR 0 12
61892: PPUSH
61893: LD_VAR 0 8
61897: PPUSH
61898: LD_INT 0
61900: PPUSH
61901: CALL 64037 0 3
// end ;
61905: GO 61859
61907: POP
61908: POP
// if horses then
61909: LD_VAR 0 5
61913: IFFALSE 61980
// for i = 1 to horses do
61915: LD_ADDR_VAR 0 11
61919: PUSH
61920: DOUBLE
61921: LD_INT 1
61923: DEC
61924: ST_TO_ADDR
61925: LD_VAR 0 5
61929: PUSH
61930: FOR_TO
61931: IFFALSE 61978
// begin hc_class := 21 ;
61933: LD_ADDR_OWVAR 28
61937: PUSH
61938: LD_INT 21
61940: ST_TO_ADDR
// hc_gallery :=  ;
61941: LD_ADDR_OWVAR 33
61945: PUSH
61946: LD_STRING 
61948: ST_TO_ADDR
// animal := CreateHuman ;
61949: LD_ADDR_VAR 0 12
61953: PUSH
61954: CALL_OW 44
61958: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61959: LD_VAR 0 12
61963: PPUSH
61964: LD_VAR 0 8
61968: PPUSH
61969: LD_INT 0
61971: PPUSH
61972: CALL 64037 0 3
// end ;
61976: GO 61930
61978: POP
61979: POP
// if birds then
61980: LD_VAR 0 1
61984: IFFALSE 62051
// for i = 1 to birds do
61986: LD_ADDR_VAR 0 11
61990: PUSH
61991: DOUBLE
61992: LD_INT 1
61994: DEC
61995: ST_TO_ADDR
61996: LD_VAR 0 1
62000: PUSH
62001: FOR_TO
62002: IFFALSE 62049
// begin hc_class := 18 ;
62004: LD_ADDR_OWVAR 28
62008: PUSH
62009: LD_INT 18
62011: ST_TO_ADDR
// hc_gallery =  ;
62012: LD_ADDR_OWVAR 33
62016: PUSH
62017: LD_STRING 
62019: ST_TO_ADDR
// animal := CreateHuman ;
62020: LD_ADDR_VAR 0 12
62024: PUSH
62025: CALL_OW 44
62029: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62030: LD_VAR 0 12
62034: PPUSH
62035: LD_VAR 0 8
62039: PPUSH
62040: LD_INT 0
62042: PPUSH
62043: CALL 64037 0 3
// end ;
62047: GO 62001
62049: POP
62050: POP
// if tigers then
62051: LD_VAR 0 2
62055: IFFALSE 62139
// for i = 1 to tigers do
62057: LD_ADDR_VAR 0 11
62061: PUSH
62062: DOUBLE
62063: LD_INT 1
62065: DEC
62066: ST_TO_ADDR
62067: LD_VAR 0 2
62071: PUSH
62072: FOR_TO
62073: IFFALSE 62137
// begin hc_class = class_tiger ;
62075: LD_ADDR_OWVAR 28
62079: PUSH
62080: LD_INT 14
62082: ST_TO_ADDR
// hc_gallery =  ;
62083: LD_ADDR_OWVAR 33
62087: PUSH
62088: LD_STRING 
62090: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
62091: LD_ADDR_OWVAR 35
62095: PUSH
62096: LD_INT 7
62098: NEG
62099: PPUSH
62100: LD_INT 7
62102: PPUSH
62103: CALL_OW 12
62107: ST_TO_ADDR
// animal := CreateHuman ;
62108: LD_ADDR_VAR 0 12
62112: PUSH
62113: CALL_OW 44
62117: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62118: LD_VAR 0 12
62122: PPUSH
62123: LD_VAR 0 8
62127: PPUSH
62128: LD_INT 0
62130: PPUSH
62131: CALL 64037 0 3
// end ;
62135: GO 62072
62137: POP
62138: POP
// if apemans then
62139: LD_VAR 0 3
62143: IFFALSE 62266
// for i = 1 to apemans do
62145: LD_ADDR_VAR 0 11
62149: PUSH
62150: DOUBLE
62151: LD_INT 1
62153: DEC
62154: ST_TO_ADDR
62155: LD_VAR 0 3
62159: PUSH
62160: FOR_TO
62161: IFFALSE 62264
// begin hc_class = class_apeman ;
62163: LD_ADDR_OWVAR 28
62167: PUSH
62168: LD_INT 12
62170: ST_TO_ADDR
// hc_gallery =  ;
62171: LD_ADDR_OWVAR 33
62175: PUSH
62176: LD_STRING 
62178: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
62179: LD_ADDR_OWVAR 35
62183: PUSH
62184: LD_INT 2
62186: NEG
62187: PPUSH
62188: LD_INT 2
62190: PPUSH
62191: CALL_OW 12
62195: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
62196: LD_ADDR_OWVAR 31
62200: PUSH
62201: LD_INT 1
62203: PPUSH
62204: LD_INT 3
62206: PPUSH
62207: CALL_OW 12
62211: PUSH
62212: LD_INT 1
62214: PPUSH
62215: LD_INT 3
62217: PPUSH
62218: CALL_OW 12
62222: PUSH
62223: LD_INT 0
62225: PUSH
62226: LD_INT 0
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: ST_TO_ADDR
// animal := CreateHuman ;
62235: LD_ADDR_VAR 0 12
62239: PUSH
62240: CALL_OW 44
62244: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62245: LD_VAR 0 12
62249: PPUSH
62250: LD_VAR 0 8
62254: PPUSH
62255: LD_INT 0
62257: PPUSH
62258: CALL 64037 0 3
// end ;
62262: GO 62160
62264: POP
62265: POP
// if enchidnas then
62266: LD_VAR 0 4
62270: IFFALSE 62337
// for i = 1 to enchidnas do
62272: LD_ADDR_VAR 0 11
62276: PUSH
62277: DOUBLE
62278: LD_INT 1
62280: DEC
62281: ST_TO_ADDR
62282: LD_VAR 0 4
62286: PUSH
62287: FOR_TO
62288: IFFALSE 62335
// begin hc_class = 13 ;
62290: LD_ADDR_OWVAR 28
62294: PUSH
62295: LD_INT 13
62297: ST_TO_ADDR
// hc_gallery =  ;
62298: LD_ADDR_OWVAR 33
62302: PUSH
62303: LD_STRING 
62305: ST_TO_ADDR
// animal := CreateHuman ;
62306: LD_ADDR_VAR 0 12
62310: PUSH
62311: CALL_OW 44
62315: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62316: LD_VAR 0 12
62320: PPUSH
62321: LD_VAR 0 8
62325: PPUSH
62326: LD_INT 0
62328: PPUSH
62329: CALL 64037 0 3
// end ;
62333: GO 62287
62335: POP
62336: POP
// if fishes then
62337: LD_VAR 0 7
62341: IFFALSE 62408
// for i = 1 to fishes do
62343: LD_ADDR_VAR 0 11
62347: PUSH
62348: DOUBLE
62349: LD_INT 1
62351: DEC
62352: ST_TO_ADDR
62353: LD_VAR 0 7
62357: PUSH
62358: FOR_TO
62359: IFFALSE 62406
// begin hc_class = 20 ;
62361: LD_ADDR_OWVAR 28
62365: PUSH
62366: LD_INT 20
62368: ST_TO_ADDR
// hc_gallery =  ;
62369: LD_ADDR_OWVAR 33
62373: PUSH
62374: LD_STRING 
62376: ST_TO_ADDR
// animal := CreateHuman ;
62377: LD_ADDR_VAR 0 12
62381: PUSH
62382: CALL_OW 44
62386: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
62387: LD_VAR 0 12
62391: PPUSH
62392: LD_VAR 0 9
62396: PPUSH
62397: LD_INT 0
62399: PPUSH
62400: CALL 64037 0 3
// end ;
62404: GO 62358
62406: POP
62407: POP
// end ;
62408: LD_VAR 0 10
62412: RET
// export function WantHeal ( sci , unit ) ; begin
62413: LD_INT 0
62415: PPUSH
// if GetTaskList ( sci ) > 0 then
62416: LD_VAR 0 1
62420: PPUSH
62421: CALL_OW 437
62425: PUSH
62426: LD_INT 0
62428: GREATER
62429: IFFALSE 62499
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
62431: LD_VAR 0 1
62435: PPUSH
62436: CALL_OW 437
62440: PUSH
62441: LD_INT 1
62443: ARRAY
62444: PUSH
62445: LD_INT 1
62447: ARRAY
62448: PUSH
62449: LD_STRING l
62451: EQUAL
62452: PUSH
62453: LD_VAR 0 1
62457: PPUSH
62458: CALL_OW 437
62462: PUSH
62463: LD_INT 1
62465: ARRAY
62466: PUSH
62467: LD_INT 4
62469: ARRAY
62470: PUSH
62471: LD_VAR 0 2
62475: EQUAL
62476: AND
62477: IFFALSE 62489
// result := true else
62479: LD_ADDR_VAR 0 3
62483: PUSH
62484: LD_INT 1
62486: ST_TO_ADDR
62487: GO 62497
// result := false ;
62489: LD_ADDR_VAR 0 3
62493: PUSH
62494: LD_INT 0
62496: ST_TO_ADDR
// end else
62497: GO 62507
// result := false ;
62499: LD_ADDR_VAR 0 3
62503: PUSH
62504: LD_INT 0
62506: ST_TO_ADDR
// end ;
62507: LD_VAR 0 3
62511: RET
// export function HealTarget ( sci ) ; begin
62512: LD_INT 0
62514: PPUSH
// if not sci then
62515: LD_VAR 0 1
62519: NOT
62520: IFFALSE 62524
// exit ;
62522: GO 62589
// result := 0 ;
62524: LD_ADDR_VAR 0 2
62528: PUSH
62529: LD_INT 0
62531: ST_TO_ADDR
// if GetTaskList ( sci ) then
62532: LD_VAR 0 1
62536: PPUSH
62537: CALL_OW 437
62541: IFFALSE 62589
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62543: LD_VAR 0 1
62547: PPUSH
62548: CALL_OW 437
62552: PUSH
62553: LD_INT 1
62555: ARRAY
62556: PUSH
62557: LD_INT 1
62559: ARRAY
62560: PUSH
62561: LD_STRING l
62563: EQUAL
62564: IFFALSE 62589
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62566: LD_ADDR_VAR 0 2
62570: PUSH
62571: LD_VAR 0 1
62575: PPUSH
62576: CALL_OW 437
62580: PUSH
62581: LD_INT 1
62583: ARRAY
62584: PUSH
62585: LD_INT 4
62587: ARRAY
62588: ST_TO_ADDR
// end ;
62589: LD_VAR 0 2
62593: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62594: LD_INT 0
62596: PPUSH
62597: PPUSH
62598: PPUSH
62599: PPUSH
// if not base_units then
62600: LD_VAR 0 1
62604: NOT
62605: IFFALSE 62609
// exit ;
62607: GO 62696
// result := false ;
62609: LD_ADDR_VAR 0 2
62613: PUSH
62614: LD_INT 0
62616: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62617: LD_ADDR_VAR 0 5
62621: PUSH
62622: LD_VAR 0 1
62626: PPUSH
62627: LD_INT 21
62629: PUSH
62630: LD_INT 3
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: PPUSH
62637: CALL_OW 72
62641: ST_TO_ADDR
// if not tmp then
62642: LD_VAR 0 5
62646: NOT
62647: IFFALSE 62651
// exit ;
62649: GO 62696
// for i in tmp do
62651: LD_ADDR_VAR 0 3
62655: PUSH
62656: LD_VAR 0 5
62660: PUSH
62661: FOR_IN
62662: IFFALSE 62694
// begin result := EnemyInRange ( i , 22 ) ;
62664: LD_ADDR_VAR 0 2
62668: PUSH
62669: LD_VAR 0 3
62673: PPUSH
62674: LD_INT 22
62676: PPUSH
62677: CALL 60283 0 2
62681: ST_TO_ADDR
// if result then
62682: LD_VAR 0 2
62686: IFFALSE 62692
// exit ;
62688: POP
62689: POP
62690: GO 62696
// end ;
62692: GO 62661
62694: POP
62695: POP
// end ;
62696: LD_VAR 0 2
62700: RET
// export function FilterByTag ( units , tag ) ; begin
62701: LD_INT 0
62703: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
62704: LD_ADDR_VAR 0 3
62708: PUSH
62709: LD_VAR 0 1
62713: PPUSH
62714: LD_INT 120
62716: PUSH
62717: LD_VAR 0 2
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PPUSH
62726: CALL_OW 72
62730: ST_TO_ADDR
// end ;
62731: LD_VAR 0 3
62735: RET
// export function IsDriver ( un ) ; begin
62736: LD_INT 0
62738: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
62739: LD_ADDR_VAR 0 2
62743: PUSH
62744: LD_VAR 0 1
62748: PUSH
62749: LD_INT 55
62751: PUSH
62752: EMPTY
62753: LIST
62754: PPUSH
62755: CALL_OW 69
62759: IN
62760: ST_TO_ADDR
// end ;
62761: LD_VAR 0 2
62765: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
62766: LD_INT 0
62768: PPUSH
62769: PPUSH
// list := [ ] ;
62770: LD_ADDR_VAR 0 5
62774: PUSH
62775: EMPTY
62776: ST_TO_ADDR
// case d of 0 :
62777: LD_VAR 0 3
62781: PUSH
62782: LD_INT 0
62784: DOUBLE
62785: EQUAL
62786: IFTRUE 62790
62788: GO 62923
62790: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62791: LD_ADDR_VAR 0 5
62795: PUSH
62796: LD_VAR 0 1
62800: PUSH
62801: LD_INT 4
62803: MINUS
62804: PUSH
62805: LD_VAR 0 2
62809: PUSH
62810: LD_INT 4
62812: MINUS
62813: PUSH
62814: LD_INT 2
62816: PUSH
62817: EMPTY
62818: LIST
62819: LIST
62820: LIST
62821: PUSH
62822: LD_VAR 0 1
62826: PUSH
62827: LD_INT 3
62829: MINUS
62830: PUSH
62831: LD_VAR 0 2
62835: PUSH
62836: LD_INT 1
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: LIST
62843: PUSH
62844: LD_VAR 0 1
62848: PUSH
62849: LD_INT 4
62851: PLUS
62852: PUSH
62853: LD_VAR 0 2
62857: PUSH
62858: LD_INT 4
62860: PUSH
62861: EMPTY
62862: LIST
62863: LIST
62864: LIST
62865: PUSH
62866: LD_VAR 0 1
62870: PUSH
62871: LD_INT 3
62873: PLUS
62874: PUSH
62875: LD_VAR 0 2
62879: PUSH
62880: LD_INT 3
62882: PLUS
62883: PUSH
62884: LD_INT 5
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: LIST
62891: PUSH
62892: LD_VAR 0 1
62896: PUSH
62897: LD_VAR 0 2
62901: PUSH
62902: LD_INT 4
62904: PLUS
62905: PUSH
62906: LD_INT 0
62908: PUSH
62909: EMPTY
62910: LIST
62911: LIST
62912: LIST
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: LIST
62918: LIST
62919: LIST
62920: ST_TO_ADDR
// end ; 1 :
62921: GO 63621
62923: LD_INT 1
62925: DOUBLE
62926: EQUAL
62927: IFTRUE 62931
62929: GO 63064
62931: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62932: LD_ADDR_VAR 0 5
62936: PUSH
62937: LD_VAR 0 1
62941: PUSH
62942: LD_VAR 0 2
62946: PUSH
62947: LD_INT 4
62949: MINUS
62950: PUSH
62951: LD_INT 3
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: LIST
62958: PUSH
62959: LD_VAR 0 1
62963: PUSH
62964: LD_INT 3
62966: MINUS
62967: PUSH
62968: LD_VAR 0 2
62972: PUSH
62973: LD_INT 3
62975: MINUS
62976: PUSH
62977: LD_INT 2
62979: PUSH
62980: EMPTY
62981: LIST
62982: LIST
62983: LIST
62984: PUSH
62985: LD_VAR 0 1
62989: PUSH
62990: LD_INT 4
62992: MINUS
62993: PUSH
62994: LD_VAR 0 2
62998: PUSH
62999: LD_INT 1
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: LIST
63006: PUSH
63007: LD_VAR 0 1
63011: PUSH
63012: LD_VAR 0 2
63016: PUSH
63017: LD_INT 3
63019: PLUS
63020: PUSH
63021: LD_INT 0
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: LIST
63028: PUSH
63029: LD_VAR 0 1
63033: PUSH
63034: LD_INT 4
63036: PLUS
63037: PUSH
63038: LD_VAR 0 2
63042: PUSH
63043: LD_INT 4
63045: PLUS
63046: PUSH
63047: LD_INT 5
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: LIST
63054: PUSH
63055: EMPTY
63056: LIST
63057: LIST
63058: LIST
63059: LIST
63060: LIST
63061: ST_TO_ADDR
// end ; 2 :
63062: GO 63621
63064: LD_INT 2
63066: DOUBLE
63067: EQUAL
63068: IFTRUE 63072
63070: GO 63201
63072: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
63073: LD_ADDR_VAR 0 5
63077: PUSH
63078: LD_VAR 0 1
63082: PUSH
63083: LD_VAR 0 2
63087: PUSH
63088: LD_INT 3
63090: MINUS
63091: PUSH
63092: LD_INT 3
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: LIST
63099: PUSH
63100: LD_VAR 0 1
63104: PUSH
63105: LD_INT 4
63107: PLUS
63108: PUSH
63109: LD_VAR 0 2
63113: PUSH
63114: LD_INT 4
63116: PUSH
63117: EMPTY
63118: LIST
63119: LIST
63120: LIST
63121: PUSH
63122: LD_VAR 0 1
63126: PUSH
63127: LD_VAR 0 2
63131: PUSH
63132: LD_INT 4
63134: PLUS
63135: PUSH
63136: LD_INT 0
63138: PUSH
63139: EMPTY
63140: LIST
63141: LIST
63142: LIST
63143: PUSH
63144: LD_VAR 0 1
63148: PUSH
63149: LD_INT 3
63151: MINUS
63152: PUSH
63153: LD_VAR 0 2
63157: PUSH
63158: LD_INT 1
63160: PUSH
63161: EMPTY
63162: LIST
63163: LIST
63164: LIST
63165: PUSH
63166: LD_VAR 0 1
63170: PUSH
63171: LD_INT 4
63173: MINUS
63174: PUSH
63175: LD_VAR 0 2
63179: PUSH
63180: LD_INT 4
63182: MINUS
63183: PUSH
63184: LD_INT 2
63186: PUSH
63187: EMPTY
63188: LIST
63189: LIST
63190: LIST
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: LIST
63196: LIST
63197: LIST
63198: ST_TO_ADDR
// end ; 3 :
63199: GO 63621
63201: LD_INT 3
63203: DOUBLE
63204: EQUAL
63205: IFTRUE 63209
63207: GO 63342
63209: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
63210: LD_ADDR_VAR 0 5
63214: PUSH
63215: LD_VAR 0 1
63219: PUSH
63220: LD_INT 3
63222: PLUS
63223: PUSH
63224: LD_VAR 0 2
63228: PUSH
63229: LD_INT 4
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: LIST
63236: PUSH
63237: LD_VAR 0 1
63241: PUSH
63242: LD_INT 4
63244: PLUS
63245: PUSH
63246: LD_VAR 0 2
63250: PUSH
63251: LD_INT 4
63253: PLUS
63254: PUSH
63255: LD_INT 5
63257: PUSH
63258: EMPTY
63259: LIST
63260: LIST
63261: LIST
63262: PUSH
63263: LD_VAR 0 1
63267: PUSH
63268: LD_INT 4
63270: MINUS
63271: PUSH
63272: LD_VAR 0 2
63276: PUSH
63277: LD_INT 1
63279: PUSH
63280: EMPTY
63281: LIST
63282: LIST
63283: LIST
63284: PUSH
63285: LD_VAR 0 1
63289: PUSH
63290: LD_VAR 0 2
63294: PUSH
63295: LD_INT 4
63297: MINUS
63298: PUSH
63299: LD_INT 3
63301: PUSH
63302: EMPTY
63303: LIST
63304: LIST
63305: LIST
63306: PUSH
63307: LD_VAR 0 1
63311: PUSH
63312: LD_INT 3
63314: MINUS
63315: PUSH
63316: LD_VAR 0 2
63320: PUSH
63321: LD_INT 3
63323: MINUS
63324: PUSH
63325: LD_INT 2
63327: PUSH
63328: EMPTY
63329: LIST
63330: LIST
63331: LIST
63332: PUSH
63333: EMPTY
63334: LIST
63335: LIST
63336: LIST
63337: LIST
63338: LIST
63339: ST_TO_ADDR
// end ; 4 :
63340: GO 63621
63342: LD_INT 4
63344: DOUBLE
63345: EQUAL
63346: IFTRUE 63350
63348: GO 63483
63350: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
63351: LD_ADDR_VAR 0 5
63355: PUSH
63356: LD_VAR 0 1
63360: PUSH
63361: LD_VAR 0 2
63365: PUSH
63366: LD_INT 4
63368: PLUS
63369: PUSH
63370: LD_INT 0
63372: PUSH
63373: EMPTY
63374: LIST
63375: LIST
63376: LIST
63377: PUSH
63378: LD_VAR 0 1
63382: PUSH
63383: LD_INT 3
63385: PLUS
63386: PUSH
63387: LD_VAR 0 2
63391: PUSH
63392: LD_INT 3
63394: PLUS
63395: PUSH
63396: LD_INT 5
63398: PUSH
63399: EMPTY
63400: LIST
63401: LIST
63402: LIST
63403: PUSH
63404: LD_VAR 0 1
63408: PUSH
63409: LD_INT 4
63411: PLUS
63412: PUSH
63413: LD_VAR 0 2
63417: PUSH
63418: LD_INT 4
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: LIST
63425: PUSH
63426: LD_VAR 0 1
63430: PUSH
63431: LD_VAR 0 2
63435: PUSH
63436: LD_INT 3
63438: MINUS
63439: PUSH
63440: LD_INT 3
63442: PUSH
63443: EMPTY
63444: LIST
63445: LIST
63446: LIST
63447: PUSH
63448: LD_VAR 0 1
63452: PUSH
63453: LD_INT 4
63455: MINUS
63456: PUSH
63457: LD_VAR 0 2
63461: PUSH
63462: LD_INT 4
63464: MINUS
63465: PUSH
63466: LD_INT 2
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: LIST
63473: PUSH
63474: EMPTY
63475: LIST
63476: LIST
63477: LIST
63478: LIST
63479: LIST
63480: ST_TO_ADDR
// end ; 5 :
63481: GO 63621
63483: LD_INT 5
63485: DOUBLE
63486: EQUAL
63487: IFTRUE 63491
63489: GO 63620
63491: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63492: LD_ADDR_VAR 0 5
63496: PUSH
63497: LD_VAR 0 1
63501: PUSH
63502: LD_INT 4
63504: MINUS
63505: PUSH
63506: LD_VAR 0 2
63510: PUSH
63511: LD_INT 1
63513: PUSH
63514: EMPTY
63515: LIST
63516: LIST
63517: LIST
63518: PUSH
63519: LD_VAR 0 1
63523: PUSH
63524: LD_VAR 0 2
63528: PUSH
63529: LD_INT 4
63531: MINUS
63532: PUSH
63533: LD_INT 3
63535: PUSH
63536: EMPTY
63537: LIST
63538: LIST
63539: LIST
63540: PUSH
63541: LD_VAR 0 1
63545: PUSH
63546: LD_INT 4
63548: PLUS
63549: PUSH
63550: LD_VAR 0 2
63554: PUSH
63555: LD_INT 4
63557: PLUS
63558: PUSH
63559: LD_INT 5
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: LIST
63566: PUSH
63567: LD_VAR 0 1
63571: PUSH
63572: LD_INT 3
63574: PLUS
63575: PUSH
63576: LD_VAR 0 2
63580: PUSH
63581: LD_INT 4
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: LIST
63588: PUSH
63589: LD_VAR 0 1
63593: PUSH
63594: LD_VAR 0 2
63598: PUSH
63599: LD_INT 3
63601: PLUS
63602: PUSH
63603: LD_INT 0
63605: PUSH
63606: EMPTY
63607: LIST
63608: LIST
63609: LIST
63610: PUSH
63611: EMPTY
63612: LIST
63613: LIST
63614: LIST
63615: LIST
63616: LIST
63617: ST_TO_ADDR
// end ; end ;
63618: GO 63621
63620: POP
// result := list ;
63621: LD_ADDR_VAR 0 4
63625: PUSH
63626: LD_VAR 0 5
63630: ST_TO_ADDR
// end ;
63631: LD_VAR 0 4
63635: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
63636: LD_INT 0
63638: PPUSH
63639: PPUSH
63640: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
63641: LD_VAR 0 1
63645: NOT
63646: PUSH
63647: LD_VAR 0 2
63651: PUSH
63652: LD_INT 1
63654: PUSH
63655: LD_INT 2
63657: PUSH
63658: LD_INT 3
63660: PUSH
63661: LD_INT 4
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: LIST
63668: LIST
63669: IN
63670: NOT
63671: OR
63672: IFFALSE 63676
// exit ;
63674: GO 63759
// tmp := [ ] ;
63676: LD_ADDR_VAR 0 5
63680: PUSH
63681: EMPTY
63682: ST_TO_ADDR
// for i in units do
63683: LD_ADDR_VAR 0 4
63687: PUSH
63688: LD_VAR 0 1
63692: PUSH
63693: FOR_IN
63694: IFFALSE 63728
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
63696: LD_ADDR_VAR 0 5
63700: PUSH
63701: LD_VAR 0 5
63705: PPUSH
63706: LD_VAR 0 4
63710: PPUSH
63711: LD_VAR 0 2
63715: PPUSH
63716: CALL_OW 259
63720: PPUSH
63721: CALL 65132 0 2
63725: ST_TO_ADDR
63726: GO 63693
63728: POP
63729: POP
// if not tmp then
63730: LD_VAR 0 5
63734: NOT
63735: IFFALSE 63739
// exit ;
63737: GO 63759
// result := SortListByListDesc ( units , tmp ) ;
63739: LD_ADDR_VAR 0 3
63743: PUSH
63744: LD_VAR 0 1
63748: PPUSH
63749: LD_VAR 0 5
63753: PPUSH
63754: CALL_OW 77
63758: ST_TO_ADDR
// end ;
63759: LD_VAR 0 3
63763: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
63764: LD_INT 0
63766: PPUSH
63767: PPUSH
63768: PPUSH
// result := false ;
63769: LD_ADDR_VAR 0 3
63773: PUSH
63774: LD_INT 0
63776: ST_TO_ADDR
// if not building then
63777: LD_VAR 0 2
63781: NOT
63782: IFFALSE 63786
// exit ;
63784: GO 63924
// x := GetX ( building ) ;
63786: LD_ADDR_VAR 0 4
63790: PUSH
63791: LD_VAR 0 2
63795: PPUSH
63796: CALL_OW 250
63800: ST_TO_ADDR
// y := GetY ( building ) ;
63801: LD_ADDR_VAR 0 5
63805: PUSH
63806: LD_VAR 0 2
63810: PPUSH
63811: CALL_OW 251
63815: ST_TO_ADDR
// if not x or not y then
63816: LD_VAR 0 4
63820: NOT
63821: PUSH
63822: LD_VAR 0 5
63826: NOT
63827: OR
63828: IFFALSE 63832
// exit ;
63830: GO 63924
// if GetTaskList ( unit ) then
63832: LD_VAR 0 1
63836: PPUSH
63837: CALL_OW 437
63841: IFFALSE 63924
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63843: LD_STRING e
63845: PUSH
63846: LD_VAR 0 1
63850: PPUSH
63851: CALL_OW 437
63855: PUSH
63856: LD_INT 1
63858: ARRAY
63859: PUSH
63860: LD_INT 1
63862: ARRAY
63863: EQUAL
63864: PUSH
63865: LD_VAR 0 4
63869: PUSH
63870: LD_VAR 0 1
63874: PPUSH
63875: CALL_OW 437
63879: PUSH
63880: LD_INT 1
63882: ARRAY
63883: PUSH
63884: LD_INT 2
63886: ARRAY
63887: EQUAL
63888: AND
63889: PUSH
63890: LD_VAR 0 5
63894: PUSH
63895: LD_VAR 0 1
63899: PPUSH
63900: CALL_OW 437
63904: PUSH
63905: LD_INT 1
63907: ARRAY
63908: PUSH
63909: LD_INT 3
63911: ARRAY
63912: EQUAL
63913: AND
63914: IFFALSE 63924
// result := true end ;
63916: LD_ADDR_VAR 0 3
63920: PUSH
63921: LD_INT 1
63923: ST_TO_ADDR
// end ;
63924: LD_VAR 0 3
63928: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
63929: LD_INT 0
63931: PPUSH
// result := false ;
63932: LD_ADDR_VAR 0 4
63936: PUSH
63937: LD_INT 0
63939: ST_TO_ADDR
// if GetTaskList ( unit ) then
63940: LD_VAR 0 1
63944: PPUSH
63945: CALL_OW 437
63949: IFFALSE 64032
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63951: LD_STRING M
63953: PUSH
63954: LD_VAR 0 1
63958: PPUSH
63959: CALL_OW 437
63963: PUSH
63964: LD_INT 1
63966: ARRAY
63967: PUSH
63968: LD_INT 1
63970: ARRAY
63971: EQUAL
63972: PUSH
63973: LD_VAR 0 2
63977: PUSH
63978: LD_VAR 0 1
63982: PPUSH
63983: CALL_OW 437
63987: PUSH
63988: LD_INT 1
63990: ARRAY
63991: PUSH
63992: LD_INT 2
63994: ARRAY
63995: EQUAL
63996: AND
63997: PUSH
63998: LD_VAR 0 3
64002: PUSH
64003: LD_VAR 0 1
64007: PPUSH
64008: CALL_OW 437
64012: PUSH
64013: LD_INT 1
64015: ARRAY
64016: PUSH
64017: LD_INT 3
64019: ARRAY
64020: EQUAL
64021: AND
64022: IFFALSE 64032
// result := true ;
64024: LD_ADDR_VAR 0 4
64028: PUSH
64029: LD_INT 1
64031: ST_TO_ADDR
// end ; end ;
64032: LD_VAR 0 4
64036: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
64037: LD_INT 0
64039: PPUSH
64040: PPUSH
64041: PPUSH
64042: PPUSH
// if not unit or not area then
64043: LD_VAR 0 1
64047: NOT
64048: PUSH
64049: LD_VAR 0 2
64053: NOT
64054: OR
64055: IFFALSE 64059
// exit ;
64057: GO 64235
// tmp := AreaToList ( area , i ) ;
64059: LD_ADDR_VAR 0 6
64063: PUSH
64064: LD_VAR 0 2
64068: PPUSH
64069: LD_VAR 0 5
64073: PPUSH
64074: CALL_OW 517
64078: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64079: LD_ADDR_VAR 0 5
64083: PUSH
64084: DOUBLE
64085: LD_INT 1
64087: DEC
64088: ST_TO_ADDR
64089: LD_VAR 0 6
64093: PUSH
64094: LD_INT 1
64096: ARRAY
64097: PUSH
64098: FOR_TO
64099: IFFALSE 64233
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64101: LD_ADDR_VAR 0 7
64105: PUSH
64106: LD_VAR 0 6
64110: PUSH
64111: LD_INT 1
64113: ARRAY
64114: PUSH
64115: LD_VAR 0 5
64119: ARRAY
64120: PUSH
64121: LD_VAR 0 6
64125: PUSH
64126: LD_INT 2
64128: ARRAY
64129: PUSH
64130: LD_VAR 0 5
64134: ARRAY
64135: PUSH
64136: EMPTY
64137: LIST
64138: LIST
64139: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
64140: LD_INT 92
64142: PUSH
64143: LD_VAR 0 7
64147: PUSH
64148: LD_INT 1
64150: ARRAY
64151: PUSH
64152: LD_VAR 0 7
64156: PUSH
64157: LD_INT 2
64159: ARRAY
64160: PUSH
64161: LD_INT 2
64163: PUSH
64164: EMPTY
64165: LIST
64166: LIST
64167: LIST
64168: LIST
64169: PPUSH
64170: CALL_OW 69
64174: PUSH
64175: LD_INT 0
64177: EQUAL
64178: IFFALSE 64231
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
64180: LD_VAR 0 1
64184: PPUSH
64185: LD_VAR 0 7
64189: PUSH
64190: LD_INT 1
64192: ARRAY
64193: PPUSH
64194: LD_VAR 0 7
64198: PUSH
64199: LD_INT 2
64201: ARRAY
64202: PPUSH
64203: LD_VAR 0 3
64207: PPUSH
64208: CALL_OW 48
// result := IsPlaced ( unit ) ;
64212: LD_ADDR_VAR 0 4
64216: PUSH
64217: LD_VAR 0 1
64221: PPUSH
64222: CALL_OW 305
64226: ST_TO_ADDR
// exit ;
64227: POP
64228: POP
64229: GO 64235
// end ; end ;
64231: GO 64098
64233: POP
64234: POP
// end ;
64235: LD_VAR 0 4
64239: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
64240: LD_INT 0
64242: PPUSH
64243: PPUSH
64244: PPUSH
// if not side or side > 8 then
64245: LD_VAR 0 1
64249: NOT
64250: PUSH
64251: LD_VAR 0 1
64255: PUSH
64256: LD_INT 8
64258: GREATER
64259: OR
64260: IFFALSE 64264
// exit ;
64262: GO 64451
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
64264: LD_ADDR_VAR 0 4
64268: PUSH
64269: LD_INT 22
64271: PUSH
64272: LD_VAR 0 1
64276: PUSH
64277: EMPTY
64278: LIST
64279: LIST
64280: PUSH
64281: LD_INT 21
64283: PUSH
64284: LD_INT 3
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: PUSH
64291: EMPTY
64292: LIST
64293: LIST
64294: PPUSH
64295: CALL_OW 69
64299: ST_TO_ADDR
// if not tmp then
64300: LD_VAR 0 4
64304: NOT
64305: IFFALSE 64309
// exit ;
64307: GO 64451
// enable_addtolog := true ;
64309: LD_ADDR_OWVAR 81
64313: PUSH
64314: LD_INT 1
64316: ST_TO_ADDR
// AddToLog ( [ ) ;
64317: LD_STRING [
64319: PPUSH
64320: CALL_OW 561
// for i in tmp do
64324: LD_ADDR_VAR 0 3
64328: PUSH
64329: LD_VAR 0 4
64333: PUSH
64334: FOR_IN
64335: IFFALSE 64442
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
64337: LD_STRING [
64339: PUSH
64340: LD_VAR 0 3
64344: PPUSH
64345: CALL_OW 266
64349: STR
64350: PUSH
64351: LD_STRING , 
64353: STR
64354: PUSH
64355: LD_VAR 0 3
64359: PPUSH
64360: CALL_OW 250
64364: STR
64365: PUSH
64366: LD_STRING , 
64368: STR
64369: PUSH
64370: LD_VAR 0 3
64374: PPUSH
64375: CALL_OW 251
64379: STR
64380: PUSH
64381: LD_STRING , 
64383: STR
64384: PUSH
64385: LD_VAR 0 3
64389: PPUSH
64390: CALL_OW 254
64394: STR
64395: PUSH
64396: LD_STRING , 
64398: STR
64399: PUSH
64400: LD_VAR 0 3
64404: PPUSH
64405: LD_INT 1
64407: PPUSH
64408: CALL_OW 268
64412: STR
64413: PUSH
64414: LD_STRING , 
64416: STR
64417: PUSH
64418: LD_VAR 0 3
64422: PPUSH
64423: LD_INT 2
64425: PPUSH
64426: CALL_OW 268
64430: STR
64431: PUSH
64432: LD_STRING ],
64434: STR
64435: PPUSH
64436: CALL_OW 561
// end ;
64440: GO 64334
64442: POP
64443: POP
// AddToLog ( ]; ) ;
64444: LD_STRING ];
64446: PPUSH
64447: CALL_OW 561
// end ;
64451: LD_VAR 0 2
64455: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
64456: LD_INT 0
64458: PPUSH
64459: PPUSH
64460: PPUSH
64461: PPUSH
64462: PPUSH
// if not area or not rate or not max then
64463: LD_VAR 0 1
64467: NOT
64468: PUSH
64469: LD_VAR 0 2
64473: NOT
64474: OR
64475: PUSH
64476: LD_VAR 0 4
64480: NOT
64481: OR
64482: IFFALSE 64486
// exit ;
64484: GO 64675
// while 1 do
64486: LD_INT 1
64488: IFFALSE 64675
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64490: LD_ADDR_VAR 0 9
64494: PUSH
64495: LD_VAR 0 1
64499: PPUSH
64500: LD_INT 1
64502: PPUSH
64503: CALL_OW 287
64507: PUSH
64508: LD_INT 10
64510: MUL
64511: ST_TO_ADDR
// r := rate / 10 ;
64512: LD_ADDR_VAR 0 7
64516: PUSH
64517: LD_VAR 0 2
64521: PUSH
64522: LD_INT 10
64524: DIVREAL
64525: ST_TO_ADDR
// time := 1 1$00 ;
64526: LD_ADDR_VAR 0 8
64530: PUSH
64531: LD_INT 2100
64533: ST_TO_ADDR
// if amount < min then
64534: LD_VAR 0 9
64538: PUSH
64539: LD_VAR 0 3
64543: LESS
64544: IFFALSE 64562
// r := r * 2 else
64546: LD_ADDR_VAR 0 7
64550: PUSH
64551: LD_VAR 0 7
64555: PUSH
64556: LD_INT 2
64558: MUL
64559: ST_TO_ADDR
64560: GO 64588
// if amount > max then
64562: LD_VAR 0 9
64566: PUSH
64567: LD_VAR 0 4
64571: GREATER
64572: IFFALSE 64588
// r := r / 2 ;
64574: LD_ADDR_VAR 0 7
64578: PUSH
64579: LD_VAR 0 7
64583: PUSH
64584: LD_INT 2
64586: DIVREAL
64587: ST_TO_ADDR
// time := time / r ;
64588: LD_ADDR_VAR 0 8
64592: PUSH
64593: LD_VAR 0 8
64597: PUSH
64598: LD_VAR 0 7
64602: DIVREAL
64603: ST_TO_ADDR
// if time < 0 then
64604: LD_VAR 0 8
64608: PUSH
64609: LD_INT 0
64611: LESS
64612: IFFALSE 64629
// time := time * - 1 ;
64614: LD_ADDR_VAR 0 8
64618: PUSH
64619: LD_VAR 0 8
64623: PUSH
64624: LD_INT 1
64626: NEG
64627: MUL
64628: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
64629: LD_VAR 0 8
64633: PUSH
64634: LD_INT 35
64636: PPUSH
64637: LD_INT 875
64639: PPUSH
64640: CALL_OW 12
64644: PLUS
64645: PPUSH
64646: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64650: LD_INT 1
64652: PPUSH
64653: LD_INT 5
64655: PPUSH
64656: CALL_OW 12
64660: PPUSH
64661: LD_VAR 0 1
64665: PPUSH
64666: LD_INT 1
64668: PPUSH
64669: CALL_OW 55
// end ;
64673: GO 64486
// end ;
64675: LD_VAR 0 5
64679: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64680: LD_INT 0
64682: PPUSH
64683: PPUSH
64684: PPUSH
64685: PPUSH
64686: PPUSH
64687: PPUSH
64688: PPUSH
64689: PPUSH
// if not turrets or not factories then
64690: LD_VAR 0 1
64694: NOT
64695: PUSH
64696: LD_VAR 0 2
64700: NOT
64701: OR
64702: IFFALSE 64706
// exit ;
64704: GO 65013
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64706: LD_ADDR_VAR 0 10
64710: PUSH
64711: LD_INT 5
64713: PUSH
64714: LD_INT 6
64716: PUSH
64717: EMPTY
64718: LIST
64719: LIST
64720: PUSH
64721: LD_INT 2
64723: PUSH
64724: LD_INT 4
64726: PUSH
64727: EMPTY
64728: LIST
64729: LIST
64730: PUSH
64731: LD_INT 3
64733: PUSH
64734: LD_INT 5
64736: PUSH
64737: EMPTY
64738: LIST
64739: LIST
64740: PUSH
64741: EMPTY
64742: LIST
64743: LIST
64744: LIST
64745: PUSH
64746: LD_INT 24
64748: PUSH
64749: LD_INT 25
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: PUSH
64756: LD_INT 23
64758: PUSH
64759: LD_INT 27
64761: PUSH
64762: EMPTY
64763: LIST
64764: LIST
64765: PUSH
64766: EMPTY
64767: LIST
64768: LIST
64769: PUSH
64770: LD_INT 42
64772: PUSH
64773: LD_INT 43
64775: PUSH
64776: EMPTY
64777: LIST
64778: LIST
64779: PUSH
64780: LD_INT 44
64782: PUSH
64783: LD_INT 46
64785: PUSH
64786: EMPTY
64787: LIST
64788: LIST
64789: PUSH
64790: LD_INT 45
64792: PUSH
64793: LD_INT 47
64795: PUSH
64796: EMPTY
64797: LIST
64798: LIST
64799: PUSH
64800: EMPTY
64801: LIST
64802: LIST
64803: LIST
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: LIST
64809: ST_TO_ADDR
// result := [ ] ;
64810: LD_ADDR_VAR 0 3
64814: PUSH
64815: EMPTY
64816: ST_TO_ADDR
// for i in turrets do
64817: LD_ADDR_VAR 0 4
64821: PUSH
64822: LD_VAR 0 1
64826: PUSH
64827: FOR_IN
64828: IFFALSE 65011
// begin nat := GetNation ( i ) ;
64830: LD_ADDR_VAR 0 7
64834: PUSH
64835: LD_VAR 0 4
64839: PPUSH
64840: CALL_OW 248
64844: ST_TO_ADDR
// weapon := 0 ;
64845: LD_ADDR_VAR 0 8
64849: PUSH
64850: LD_INT 0
64852: ST_TO_ADDR
// if not nat then
64853: LD_VAR 0 7
64857: NOT
64858: IFFALSE 64862
// continue ;
64860: GO 64827
// for j in list [ nat ] do
64862: LD_ADDR_VAR 0 5
64866: PUSH
64867: LD_VAR 0 10
64871: PUSH
64872: LD_VAR 0 7
64876: ARRAY
64877: PUSH
64878: FOR_IN
64879: IFFALSE 64920
// if GetBWeapon ( i ) = j [ 1 ] then
64881: LD_VAR 0 4
64885: PPUSH
64886: CALL_OW 269
64890: PUSH
64891: LD_VAR 0 5
64895: PUSH
64896: LD_INT 1
64898: ARRAY
64899: EQUAL
64900: IFFALSE 64918
// begin weapon := j [ 2 ] ;
64902: LD_ADDR_VAR 0 8
64906: PUSH
64907: LD_VAR 0 5
64911: PUSH
64912: LD_INT 2
64914: ARRAY
64915: ST_TO_ADDR
// break ;
64916: GO 64920
// end ;
64918: GO 64878
64920: POP
64921: POP
// if not weapon then
64922: LD_VAR 0 8
64926: NOT
64927: IFFALSE 64931
// continue ;
64929: GO 64827
// for k in factories do
64931: LD_ADDR_VAR 0 6
64935: PUSH
64936: LD_VAR 0 2
64940: PUSH
64941: FOR_IN
64942: IFFALSE 65007
// begin weapons := AvailableWeaponList ( k ) ;
64944: LD_ADDR_VAR 0 9
64948: PUSH
64949: LD_VAR 0 6
64953: PPUSH
64954: CALL_OW 478
64958: ST_TO_ADDR
// if not weapons then
64959: LD_VAR 0 9
64963: NOT
64964: IFFALSE 64968
// continue ;
64966: GO 64941
// if weapon in weapons then
64968: LD_VAR 0 8
64972: PUSH
64973: LD_VAR 0 9
64977: IN
64978: IFFALSE 65005
// begin result := [ i , weapon ] ;
64980: LD_ADDR_VAR 0 3
64984: PUSH
64985: LD_VAR 0 4
64989: PUSH
64990: LD_VAR 0 8
64994: PUSH
64995: EMPTY
64996: LIST
64997: LIST
64998: ST_TO_ADDR
// exit ;
64999: POP
65000: POP
65001: POP
65002: POP
65003: GO 65013
// end ; end ;
65005: GO 64941
65007: POP
65008: POP
// end ;
65009: GO 64827
65011: POP
65012: POP
// end ;
65013: LD_VAR 0 3
65017: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65018: LD_INT 0
65020: PPUSH
// if not side or side > 8 then
65021: LD_VAR 0 3
65025: NOT
65026: PUSH
65027: LD_VAR 0 3
65031: PUSH
65032: LD_INT 8
65034: GREATER
65035: OR
65036: IFFALSE 65040
// exit ;
65038: GO 65099
// if not range then
65040: LD_VAR 0 4
65044: NOT
65045: IFFALSE 65056
// range := - 12 ;
65047: LD_ADDR_VAR 0 4
65051: PUSH
65052: LD_INT 12
65054: NEG
65055: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
65056: LD_VAR 0 1
65060: PPUSH
65061: LD_VAR 0 2
65065: PPUSH
65066: LD_VAR 0 3
65070: PPUSH
65071: LD_VAR 0 4
65075: PPUSH
65076: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65080: LD_VAR 0 1
65084: PPUSH
65085: LD_VAR 0 2
65089: PPUSH
65090: LD_VAR 0 3
65094: PPUSH
65095: CALL_OW 331
// end ;
65099: LD_VAR 0 5
65103: RET
// export function Video ( mode ) ; begin
65104: LD_INT 0
65106: PPUSH
// ingame_video = mode ;
65107: LD_ADDR_OWVAR 52
65111: PUSH
65112: LD_VAR 0 1
65116: ST_TO_ADDR
// interface_hidden = mode ;
65117: LD_ADDR_OWVAR 54
65121: PUSH
65122: LD_VAR 0 1
65126: ST_TO_ADDR
// end ;
65127: LD_VAR 0 2
65131: RET
// export function Join ( array , element ) ; begin
65132: LD_INT 0
65134: PPUSH
// result := Replace ( array , array + 1 , element ) ;
65135: LD_ADDR_VAR 0 3
65139: PUSH
65140: LD_VAR 0 1
65144: PPUSH
65145: LD_VAR 0 1
65149: PUSH
65150: LD_INT 1
65152: PLUS
65153: PPUSH
65154: LD_VAR 0 2
65158: PPUSH
65159: CALL_OW 1
65163: ST_TO_ADDR
// end ;
65164: LD_VAR 0 3
65168: RET
// export function JoinUnion ( array , element ) ; begin
65169: LD_INT 0
65171: PPUSH
// result := array union element ;
65172: LD_ADDR_VAR 0 3
65176: PUSH
65177: LD_VAR 0 1
65181: PUSH
65182: LD_VAR 0 2
65186: UNION
65187: ST_TO_ADDR
// end ;
65188: LD_VAR 0 3
65192: RET
// export function GetBehemoths ( side ) ; begin
65193: LD_INT 0
65195: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
65196: LD_ADDR_VAR 0 2
65200: PUSH
65201: LD_INT 22
65203: PUSH
65204: LD_VAR 0 1
65208: PUSH
65209: EMPTY
65210: LIST
65211: LIST
65212: PUSH
65213: LD_INT 31
65215: PUSH
65216: LD_INT 25
65218: PUSH
65219: EMPTY
65220: LIST
65221: LIST
65222: PUSH
65223: EMPTY
65224: LIST
65225: LIST
65226: PPUSH
65227: CALL_OW 69
65231: ST_TO_ADDR
// end ;
65232: LD_VAR 0 2
65236: RET
// export function Shuffle ( array ) ; var i , index ; begin
65237: LD_INT 0
65239: PPUSH
65240: PPUSH
65241: PPUSH
// result := [ ] ;
65242: LD_ADDR_VAR 0 2
65246: PUSH
65247: EMPTY
65248: ST_TO_ADDR
// if not array then
65249: LD_VAR 0 1
65253: NOT
65254: IFFALSE 65258
// exit ;
65256: GO 65357
// Randomize ;
65258: CALL_OW 10
// for i = array downto 1 do
65262: LD_ADDR_VAR 0 3
65266: PUSH
65267: DOUBLE
65268: LD_VAR 0 1
65272: INC
65273: ST_TO_ADDR
65274: LD_INT 1
65276: PUSH
65277: FOR_DOWNTO
65278: IFFALSE 65355
// begin index := rand ( 1 , array ) ;
65280: LD_ADDR_VAR 0 4
65284: PUSH
65285: LD_INT 1
65287: PPUSH
65288: LD_VAR 0 1
65292: PPUSH
65293: CALL_OW 12
65297: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
65298: LD_ADDR_VAR 0 2
65302: PUSH
65303: LD_VAR 0 2
65307: PPUSH
65308: LD_VAR 0 2
65312: PUSH
65313: LD_INT 1
65315: PLUS
65316: PPUSH
65317: LD_VAR 0 1
65321: PUSH
65322: LD_VAR 0 4
65326: ARRAY
65327: PPUSH
65328: CALL_OW 2
65332: ST_TO_ADDR
// array := Delete ( array , index ) ;
65333: LD_ADDR_VAR 0 1
65337: PUSH
65338: LD_VAR 0 1
65342: PPUSH
65343: LD_VAR 0 4
65347: PPUSH
65348: CALL_OW 3
65352: ST_TO_ADDR
// end ;
65353: GO 65277
65355: POP
65356: POP
// end ;
65357: LD_VAR 0 2
65361: RET
// export function GetBaseMaterials ( base ) ; begin
65362: LD_INT 0
65364: PPUSH
// result := [ 0 , 0 , 0 ] ;
65365: LD_ADDR_VAR 0 2
65369: PUSH
65370: LD_INT 0
65372: PUSH
65373: LD_INT 0
65375: PUSH
65376: LD_INT 0
65378: PUSH
65379: EMPTY
65380: LIST
65381: LIST
65382: LIST
65383: ST_TO_ADDR
// if not base then
65384: LD_VAR 0 1
65388: NOT
65389: IFFALSE 65393
// exit ;
65391: GO 65442
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
65393: LD_ADDR_VAR 0 2
65397: PUSH
65398: LD_VAR 0 1
65402: PPUSH
65403: LD_INT 1
65405: PPUSH
65406: CALL_OW 275
65410: PUSH
65411: LD_VAR 0 1
65415: PPUSH
65416: LD_INT 2
65418: PPUSH
65419: CALL_OW 275
65423: PUSH
65424: LD_VAR 0 1
65428: PPUSH
65429: LD_INT 3
65431: PPUSH
65432: CALL_OW 275
65436: PUSH
65437: EMPTY
65438: LIST
65439: LIST
65440: LIST
65441: ST_TO_ADDR
// end ;
65442: LD_VAR 0 2
65446: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
65447: LD_INT 0
65449: PPUSH
65450: PPUSH
// result := array ;
65451: LD_ADDR_VAR 0 3
65455: PUSH
65456: LD_VAR 0 1
65460: ST_TO_ADDR
// if size >= result then
65461: LD_VAR 0 2
65465: PUSH
65466: LD_VAR 0 3
65470: GREATEREQUAL
65471: IFFALSE 65475
// exit ;
65473: GO 65525
// if size then
65475: LD_VAR 0 2
65479: IFFALSE 65525
// for i := array downto size do
65481: LD_ADDR_VAR 0 4
65485: PUSH
65486: DOUBLE
65487: LD_VAR 0 1
65491: INC
65492: ST_TO_ADDR
65493: LD_VAR 0 2
65497: PUSH
65498: FOR_DOWNTO
65499: IFFALSE 65523
// result := Delete ( result , result ) ;
65501: LD_ADDR_VAR 0 3
65505: PUSH
65506: LD_VAR 0 3
65510: PPUSH
65511: LD_VAR 0 3
65515: PPUSH
65516: CALL_OW 3
65520: ST_TO_ADDR
65521: GO 65498
65523: POP
65524: POP
// end ;
65525: LD_VAR 0 3
65529: RET
// export function ComExit ( unit ) ; var tmp ; begin
65530: LD_INT 0
65532: PPUSH
65533: PPUSH
// if not IsInUnit ( unit ) then
65534: LD_VAR 0 1
65538: PPUSH
65539: CALL_OW 310
65543: NOT
65544: IFFALSE 65548
// exit ;
65546: GO 65608
// tmp := IsInUnit ( unit ) ;
65548: LD_ADDR_VAR 0 3
65552: PUSH
65553: LD_VAR 0 1
65557: PPUSH
65558: CALL_OW 310
65562: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65563: LD_VAR 0 3
65567: PPUSH
65568: CALL_OW 247
65572: PUSH
65573: LD_INT 2
65575: EQUAL
65576: IFFALSE 65589
// ComExitVehicle ( unit ) else
65578: LD_VAR 0 1
65582: PPUSH
65583: CALL_OW 121
65587: GO 65598
// ComExitBuilding ( unit ) ;
65589: LD_VAR 0 1
65593: PPUSH
65594: CALL_OW 122
// result := tmp ;
65598: LD_ADDR_VAR 0 2
65602: PUSH
65603: LD_VAR 0 3
65607: ST_TO_ADDR
// end ;
65608: LD_VAR 0 2
65612: RET
// export function ComExitAll ( units ) ; var i ; begin
65613: LD_INT 0
65615: PPUSH
65616: PPUSH
// if not units then
65617: LD_VAR 0 1
65621: NOT
65622: IFFALSE 65626
// exit ;
65624: GO 65652
// for i in units do
65626: LD_ADDR_VAR 0 3
65630: PUSH
65631: LD_VAR 0 1
65635: PUSH
65636: FOR_IN
65637: IFFALSE 65650
// ComExit ( i ) ;
65639: LD_VAR 0 3
65643: PPUSH
65644: CALL 65530 0 1
65648: GO 65636
65650: POP
65651: POP
// end ;
65652: LD_VAR 0 2
65656: RET
// export function ResetHc ; begin
65657: LD_INT 0
65659: PPUSH
// InitHc ;
65660: CALL_OW 19
// hc_importance := 0 ;
65664: LD_ADDR_OWVAR 32
65668: PUSH
65669: LD_INT 0
65671: ST_TO_ADDR
// end ;
65672: LD_VAR 0 1
65676: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
65677: LD_INT 0
65679: PPUSH
65680: PPUSH
65681: PPUSH
// _x := ( x1 + x2 ) div 2 ;
65682: LD_ADDR_VAR 0 6
65686: PUSH
65687: LD_VAR 0 1
65691: PUSH
65692: LD_VAR 0 3
65696: PLUS
65697: PUSH
65698: LD_INT 2
65700: DIV
65701: ST_TO_ADDR
// if _x < 0 then
65702: LD_VAR 0 6
65706: PUSH
65707: LD_INT 0
65709: LESS
65710: IFFALSE 65727
// _x := _x * - 1 ;
65712: LD_ADDR_VAR 0 6
65716: PUSH
65717: LD_VAR 0 6
65721: PUSH
65722: LD_INT 1
65724: NEG
65725: MUL
65726: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
65727: LD_ADDR_VAR 0 7
65731: PUSH
65732: LD_VAR 0 2
65736: PUSH
65737: LD_VAR 0 4
65741: PLUS
65742: PUSH
65743: LD_INT 2
65745: DIV
65746: ST_TO_ADDR
// if _y < 0 then
65747: LD_VAR 0 7
65751: PUSH
65752: LD_INT 0
65754: LESS
65755: IFFALSE 65772
// _y := _y * - 1 ;
65757: LD_ADDR_VAR 0 7
65761: PUSH
65762: LD_VAR 0 7
65766: PUSH
65767: LD_INT 1
65769: NEG
65770: MUL
65771: ST_TO_ADDR
// result := [ _x , _y ] ;
65772: LD_ADDR_VAR 0 5
65776: PUSH
65777: LD_VAR 0 6
65781: PUSH
65782: LD_VAR 0 7
65786: PUSH
65787: EMPTY
65788: LIST
65789: LIST
65790: ST_TO_ADDR
// end ;
65791: LD_VAR 0 5
65795: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
65796: LD_INT 0
65798: PPUSH
65799: PPUSH
65800: PPUSH
65801: PPUSH
// task := GetTaskList ( unit ) ;
65802: LD_ADDR_VAR 0 7
65806: PUSH
65807: LD_VAR 0 1
65811: PPUSH
65812: CALL_OW 437
65816: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
65817: LD_VAR 0 7
65821: NOT
65822: PUSH
65823: LD_VAR 0 1
65827: PPUSH
65828: LD_VAR 0 2
65832: PPUSH
65833: CALL_OW 308
65837: NOT
65838: AND
65839: IFFALSE 65843
// exit ;
65841: GO 65961
// if IsInArea ( unit , area ) then
65843: LD_VAR 0 1
65847: PPUSH
65848: LD_VAR 0 2
65852: PPUSH
65853: CALL_OW 308
65857: IFFALSE 65875
// begin ComMoveToArea ( unit , goAway ) ;
65859: LD_VAR 0 1
65863: PPUSH
65864: LD_VAR 0 3
65868: PPUSH
65869: CALL_OW 113
// exit ;
65873: GO 65961
// end ; if task [ 1 ] [ 1 ] <> M then
65875: LD_VAR 0 7
65879: PUSH
65880: LD_INT 1
65882: ARRAY
65883: PUSH
65884: LD_INT 1
65886: ARRAY
65887: PUSH
65888: LD_STRING M
65890: NONEQUAL
65891: IFFALSE 65895
// exit ;
65893: GO 65961
// x := task [ 1 ] [ 2 ] ;
65895: LD_ADDR_VAR 0 5
65899: PUSH
65900: LD_VAR 0 7
65904: PUSH
65905: LD_INT 1
65907: ARRAY
65908: PUSH
65909: LD_INT 2
65911: ARRAY
65912: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
65913: LD_ADDR_VAR 0 6
65917: PUSH
65918: LD_VAR 0 7
65922: PUSH
65923: LD_INT 1
65925: ARRAY
65926: PUSH
65927: LD_INT 3
65929: ARRAY
65930: ST_TO_ADDR
// if InArea ( x , y , area ) then
65931: LD_VAR 0 5
65935: PPUSH
65936: LD_VAR 0 6
65940: PPUSH
65941: LD_VAR 0 2
65945: PPUSH
65946: CALL_OW 309
65950: IFFALSE 65961
// ComStop ( unit ) ;
65952: LD_VAR 0 1
65956: PPUSH
65957: CALL_OW 141
// end ;
65961: LD_VAR 0 4
65965: RET
// export function Abs ( value ) ; begin
65966: LD_INT 0
65968: PPUSH
// result := value ;
65969: LD_ADDR_VAR 0 2
65973: PUSH
65974: LD_VAR 0 1
65978: ST_TO_ADDR
// if value < 0 then
65979: LD_VAR 0 1
65983: PUSH
65984: LD_INT 0
65986: LESS
65987: IFFALSE 66004
// result := value * - 1 ;
65989: LD_ADDR_VAR 0 2
65993: PUSH
65994: LD_VAR 0 1
65998: PUSH
65999: LD_INT 1
66001: NEG
66002: MUL
66003: ST_TO_ADDR
// end ;
66004: LD_VAR 0 2
66008: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66009: LD_INT 0
66011: PPUSH
66012: PPUSH
66013: PPUSH
66014: PPUSH
66015: PPUSH
66016: PPUSH
66017: PPUSH
66018: PPUSH
// if not unit or not building then
66019: LD_VAR 0 1
66023: NOT
66024: PUSH
66025: LD_VAR 0 2
66029: NOT
66030: OR
66031: IFFALSE 66035
// exit ;
66033: GO 66261
// x := GetX ( building ) ;
66035: LD_ADDR_VAR 0 4
66039: PUSH
66040: LD_VAR 0 2
66044: PPUSH
66045: CALL_OW 250
66049: ST_TO_ADDR
// y := GetY ( building ) ;
66050: LD_ADDR_VAR 0 6
66054: PUSH
66055: LD_VAR 0 2
66059: PPUSH
66060: CALL_OW 251
66064: ST_TO_ADDR
// d := GetDir ( building ) ;
66065: LD_ADDR_VAR 0 8
66069: PUSH
66070: LD_VAR 0 2
66074: PPUSH
66075: CALL_OW 254
66079: ST_TO_ADDR
// r := 4 ;
66080: LD_ADDR_VAR 0 9
66084: PUSH
66085: LD_INT 4
66087: ST_TO_ADDR
// for i := 1 to 5 do
66088: LD_ADDR_VAR 0 10
66092: PUSH
66093: DOUBLE
66094: LD_INT 1
66096: DEC
66097: ST_TO_ADDR
66098: LD_INT 5
66100: PUSH
66101: FOR_TO
66102: IFFALSE 66259
// begin _x := ShiftX ( x , d , r + i ) ;
66104: LD_ADDR_VAR 0 5
66108: PUSH
66109: LD_VAR 0 4
66113: PPUSH
66114: LD_VAR 0 8
66118: PPUSH
66119: LD_VAR 0 9
66123: PUSH
66124: LD_VAR 0 10
66128: PLUS
66129: PPUSH
66130: CALL_OW 272
66134: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
66135: LD_ADDR_VAR 0 7
66139: PUSH
66140: LD_VAR 0 6
66144: PPUSH
66145: LD_VAR 0 8
66149: PPUSH
66150: LD_VAR 0 9
66154: PUSH
66155: LD_VAR 0 10
66159: PLUS
66160: PPUSH
66161: CALL_OW 273
66165: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
66166: LD_VAR 0 5
66170: PPUSH
66171: LD_VAR 0 7
66175: PPUSH
66176: CALL_OW 488
66180: PUSH
66181: LD_VAR 0 5
66185: PPUSH
66186: LD_VAR 0 7
66190: PPUSH
66191: CALL_OW 428
66195: PPUSH
66196: CALL_OW 247
66200: PUSH
66201: LD_INT 3
66203: PUSH
66204: LD_INT 2
66206: PUSH
66207: EMPTY
66208: LIST
66209: LIST
66210: IN
66211: NOT
66212: AND
66213: IFFALSE 66257
// begin ComMoveXY ( unit , _x , _y ) ;
66215: LD_VAR 0 1
66219: PPUSH
66220: LD_VAR 0 5
66224: PPUSH
66225: LD_VAR 0 7
66229: PPUSH
66230: CALL_OW 111
// result := [ _x , _y ] ;
66234: LD_ADDR_VAR 0 3
66238: PUSH
66239: LD_VAR 0 5
66243: PUSH
66244: LD_VAR 0 7
66248: PUSH
66249: EMPTY
66250: LIST
66251: LIST
66252: ST_TO_ADDR
// exit ;
66253: POP
66254: POP
66255: GO 66261
// end ; end ;
66257: GO 66101
66259: POP
66260: POP
// end ;
66261: LD_VAR 0 3
66265: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
66266: LD_INT 0
66268: PPUSH
66269: PPUSH
66270: PPUSH
// result := 0 ;
66271: LD_ADDR_VAR 0 3
66275: PUSH
66276: LD_INT 0
66278: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
66279: LD_VAR 0 1
66283: PUSH
66284: LD_INT 0
66286: LESS
66287: PUSH
66288: LD_VAR 0 1
66292: PUSH
66293: LD_INT 8
66295: GREATER
66296: OR
66297: PUSH
66298: LD_VAR 0 2
66302: PUSH
66303: LD_INT 0
66305: LESS
66306: OR
66307: PUSH
66308: LD_VAR 0 2
66312: PUSH
66313: LD_INT 8
66315: GREATER
66316: OR
66317: IFFALSE 66321
// exit ;
66319: GO 66396
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
66321: LD_ADDR_VAR 0 4
66325: PUSH
66326: LD_INT 22
66328: PUSH
66329: LD_VAR 0 2
66333: PUSH
66334: EMPTY
66335: LIST
66336: LIST
66337: PPUSH
66338: CALL_OW 69
66342: PUSH
66343: FOR_IN
66344: IFFALSE 66394
// begin un := UnitShoot ( i ) ;
66346: LD_ADDR_VAR 0 5
66350: PUSH
66351: LD_VAR 0 4
66355: PPUSH
66356: CALL_OW 504
66360: ST_TO_ADDR
// if GetSide ( un ) = side1 then
66361: LD_VAR 0 5
66365: PPUSH
66366: CALL_OW 255
66370: PUSH
66371: LD_VAR 0 1
66375: EQUAL
66376: IFFALSE 66392
// begin result := un ;
66378: LD_ADDR_VAR 0 3
66382: PUSH
66383: LD_VAR 0 5
66387: ST_TO_ADDR
// exit ;
66388: POP
66389: POP
66390: GO 66396
// end ; end ;
66392: GO 66343
66394: POP
66395: POP
// end ;
66396: LD_VAR 0 3
66400: RET
// export function GetCargoBay ( units ) ; begin
66401: LD_INT 0
66403: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
66404: LD_ADDR_VAR 0 2
66408: PUSH
66409: LD_VAR 0 1
66413: PPUSH
66414: LD_INT 2
66416: PUSH
66417: LD_INT 34
66419: PUSH
66420: LD_INT 12
66422: PUSH
66423: EMPTY
66424: LIST
66425: LIST
66426: PUSH
66427: LD_INT 34
66429: PUSH
66430: LD_INT 51
66432: PUSH
66433: EMPTY
66434: LIST
66435: LIST
66436: PUSH
66437: LD_INT 34
66439: PUSH
66440: LD_INT 32
66442: PUSH
66443: EMPTY
66444: LIST
66445: LIST
66446: PUSH
66447: LD_INT 34
66449: PUSH
66450: LD_INT 89
66452: PUSH
66453: EMPTY
66454: LIST
66455: LIST
66456: PUSH
66457: EMPTY
66458: LIST
66459: LIST
66460: LIST
66461: LIST
66462: LIST
66463: PPUSH
66464: CALL_OW 72
66468: ST_TO_ADDR
// end ;
66469: LD_VAR 0 2
66473: RET
// export function Negate ( value ) ; begin
66474: LD_INT 0
66476: PPUSH
// result := not value ;
66477: LD_ADDR_VAR 0 2
66481: PUSH
66482: LD_VAR 0 1
66486: NOT
66487: ST_TO_ADDR
// end ;
66488: LD_VAR 0 2
66492: RET
// export function Inc ( value ) ; begin
66493: LD_INT 0
66495: PPUSH
// result := value + 1 ;
66496: LD_ADDR_VAR 0 2
66500: PUSH
66501: LD_VAR 0 1
66505: PUSH
66506: LD_INT 1
66508: PLUS
66509: ST_TO_ADDR
// end ;
66510: LD_VAR 0 2
66514: RET
// export function Dec ( value ) ; begin
66515: LD_INT 0
66517: PPUSH
// result := value - 1 ;
66518: LD_ADDR_VAR 0 2
66522: PUSH
66523: LD_VAR 0 1
66527: PUSH
66528: LD_INT 1
66530: MINUS
66531: ST_TO_ADDR
// end ;
66532: LD_VAR 0 2
66536: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
66537: LD_INT 0
66539: PPUSH
66540: PPUSH
66541: PPUSH
66542: PPUSH
66543: PPUSH
66544: PPUSH
66545: PPUSH
66546: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
66547: LD_VAR 0 1
66551: PPUSH
66552: LD_VAR 0 2
66556: PPUSH
66557: CALL_OW 488
66561: NOT
66562: PUSH
66563: LD_VAR 0 3
66567: PPUSH
66568: LD_VAR 0 4
66572: PPUSH
66573: CALL_OW 488
66577: NOT
66578: OR
66579: IFFALSE 66592
// begin result := - 1 ;
66581: LD_ADDR_VAR 0 5
66585: PUSH
66586: LD_INT 1
66588: NEG
66589: ST_TO_ADDR
// exit ;
66590: GO 66827
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
66592: LD_ADDR_VAR 0 12
66596: PUSH
66597: LD_VAR 0 1
66601: PPUSH
66602: LD_VAR 0 2
66606: PPUSH
66607: LD_VAR 0 3
66611: PPUSH
66612: LD_VAR 0 4
66616: PPUSH
66617: CALL 65677 0 4
66621: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
66622: LD_ADDR_VAR 0 11
66626: PUSH
66627: LD_VAR 0 1
66631: PPUSH
66632: LD_VAR 0 2
66636: PPUSH
66637: LD_VAR 0 12
66641: PUSH
66642: LD_INT 1
66644: ARRAY
66645: PPUSH
66646: LD_VAR 0 12
66650: PUSH
66651: LD_INT 2
66653: ARRAY
66654: PPUSH
66655: CALL_OW 298
66659: ST_TO_ADDR
// distance := 9999 ;
66660: LD_ADDR_VAR 0 10
66664: PUSH
66665: LD_INT 9999
66667: ST_TO_ADDR
// for i := 0 to 5 do
66668: LD_ADDR_VAR 0 6
66672: PUSH
66673: DOUBLE
66674: LD_INT 0
66676: DEC
66677: ST_TO_ADDR
66678: LD_INT 5
66680: PUSH
66681: FOR_TO
66682: IFFALSE 66825
// begin _x := ShiftX ( x1 , i , centerDist ) ;
66684: LD_ADDR_VAR 0 7
66688: PUSH
66689: LD_VAR 0 1
66693: PPUSH
66694: LD_VAR 0 6
66698: PPUSH
66699: LD_VAR 0 11
66703: PPUSH
66704: CALL_OW 272
66708: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
66709: LD_ADDR_VAR 0 8
66713: PUSH
66714: LD_VAR 0 2
66718: PPUSH
66719: LD_VAR 0 6
66723: PPUSH
66724: LD_VAR 0 11
66728: PPUSH
66729: CALL_OW 273
66733: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
66734: LD_VAR 0 7
66738: PPUSH
66739: LD_VAR 0 8
66743: PPUSH
66744: CALL_OW 488
66748: NOT
66749: IFFALSE 66753
// continue ;
66751: GO 66681
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
66753: LD_ADDR_VAR 0 9
66757: PUSH
66758: LD_VAR 0 12
66762: PUSH
66763: LD_INT 1
66765: ARRAY
66766: PPUSH
66767: LD_VAR 0 12
66771: PUSH
66772: LD_INT 2
66774: ARRAY
66775: PPUSH
66776: LD_VAR 0 7
66780: PPUSH
66781: LD_VAR 0 8
66785: PPUSH
66786: CALL_OW 298
66790: ST_TO_ADDR
// if tmp < distance then
66791: LD_VAR 0 9
66795: PUSH
66796: LD_VAR 0 10
66800: LESS
66801: IFFALSE 66823
// begin result := i ;
66803: LD_ADDR_VAR 0 5
66807: PUSH
66808: LD_VAR 0 6
66812: ST_TO_ADDR
// distance := tmp ;
66813: LD_ADDR_VAR 0 10
66817: PUSH
66818: LD_VAR 0 9
66822: ST_TO_ADDR
// end ; end ;
66823: GO 66681
66825: POP
66826: POP
// end ;
66827: LD_VAR 0 5
66831: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66832: LD_INT 0
66834: PPUSH
66835: PPUSH
// if not driver or not IsInUnit ( driver ) then
66836: LD_VAR 0 1
66840: NOT
66841: PUSH
66842: LD_VAR 0 1
66846: PPUSH
66847: CALL_OW 310
66851: NOT
66852: OR
66853: IFFALSE 66857
// exit ;
66855: GO 66947
// vehicle := IsInUnit ( driver ) ;
66857: LD_ADDR_VAR 0 3
66861: PUSH
66862: LD_VAR 0 1
66866: PPUSH
66867: CALL_OW 310
66871: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66872: LD_VAR 0 1
66876: PPUSH
66877: LD_STRING \
66879: PUSH
66880: LD_INT 0
66882: PUSH
66883: LD_INT 0
66885: PUSH
66886: LD_INT 0
66888: PUSH
66889: LD_INT 0
66891: PUSH
66892: LD_INT 0
66894: PUSH
66895: LD_INT 0
66897: PUSH
66898: EMPTY
66899: LIST
66900: LIST
66901: LIST
66902: LIST
66903: LIST
66904: LIST
66905: LIST
66906: PUSH
66907: LD_STRING E
66909: PUSH
66910: LD_INT 0
66912: PUSH
66913: LD_INT 0
66915: PUSH
66916: LD_VAR 0 3
66920: PUSH
66921: LD_INT 0
66923: PUSH
66924: LD_INT 0
66926: PUSH
66927: LD_INT 0
66929: PUSH
66930: EMPTY
66931: LIST
66932: LIST
66933: LIST
66934: LIST
66935: LIST
66936: LIST
66937: LIST
66938: PUSH
66939: EMPTY
66940: LIST
66941: LIST
66942: PPUSH
66943: CALL_OW 446
// end ;
66947: LD_VAR 0 2
66951: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66952: LD_INT 0
66954: PPUSH
66955: PPUSH
// if not driver or not IsInUnit ( driver ) then
66956: LD_VAR 0 1
66960: NOT
66961: PUSH
66962: LD_VAR 0 1
66966: PPUSH
66967: CALL_OW 310
66971: NOT
66972: OR
66973: IFFALSE 66977
// exit ;
66975: GO 67067
// vehicle := IsInUnit ( driver ) ;
66977: LD_ADDR_VAR 0 3
66981: PUSH
66982: LD_VAR 0 1
66986: PPUSH
66987: CALL_OW 310
66991: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66992: LD_VAR 0 1
66996: PPUSH
66997: LD_STRING \
66999: PUSH
67000: LD_INT 0
67002: PUSH
67003: LD_INT 0
67005: PUSH
67006: LD_INT 0
67008: PUSH
67009: LD_INT 0
67011: PUSH
67012: LD_INT 0
67014: PUSH
67015: LD_INT 0
67017: PUSH
67018: EMPTY
67019: LIST
67020: LIST
67021: LIST
67022: LIST
67023: LIST
67024: LIST
67025: LIST
67026: PUSH
67027: LD_STRING E
67029: PUSH
67030: LD_INT 0
67032: PUSH
67033: LD_INT 0
67035: PUSH
67036: LD_VAR 0 3
67040: PUSH
67041: LD_INT 0
67043: PUSH
67044: LD_INT 0
67046: PUSH
67047: LD_INT 0
67049: PUSH
67050: EMPTY
67051: LIST
67052: LIST
67053: LIST
67054: LIST
67055: LIST
67056: LIST
67057: LIST
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: PPUSH
67063: CALL_OW 447
// end ;
67067: LD_VAR 0 2
67071: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
67072: LD_INT 0
67074: PPUSH
67075: PPUSH
67076: PPUSH
// tmp := [ ] ;
67077: LD_ADDR_VAR 0 5
67081: PUSH
67082: EMPTY
67083: ST_TO_ADDR
// for i in units do
67084: LD_ADDR_VAR 0 4
67088: PUSH
67089: LD_VAR 0 1
67093: PUSH
67094: FOR_IN
67095: IFFALSE 67133
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
67097: LD_ADDR_VAR 0 5
67101: PUSH
67102: LD_VAR 0 5
67106: PPUSH
67107: LD_VAR 0 5
67111: PUSH
67112: LD_INT 1
67114: PLUS
67115: PPUSH
67116: LD_VAR 0 4
67120: PPUSH
67121: CALL_OW 256
67125: PPUSH
67126: CALL_OW 2
67130: ST_TO_ADDR
67131: GO 67094
67133: POP
67134: POP
// if not tmp then
67135: LD_VAR 0 5
67139: NOT
67140: IFFALSE 67144
// exit ;
67142: GO 67192
// if asc then
67144: LD_VAR 0 2
67148: IFFALSE 67172
// result := SortListByListAsc ( units , tmp ) else
67150: LD_ADDR_VAR 0 3
67154: PUSH
67155: LD_VAR 0 1
67159: PPUSH
67160: LD_VAR 0 5
67164: PPUSH
67165: CALL_OW 76
67169: ST_TO_ADDR
67170: GO 67192
// result := SortListByListDesc ( units , tmp ) ;
67172: LD_ADDR_VAR 0 3
67176: PUSH
67177: LD_VAR 0 1
67181: PPUSH
67182: LD_VAR 0 5
67186: PPUSH
67187: CALL_OW 77
67191: ST_TO_ADDR
// end ;
67192: LD_VAR 0 3
67196: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
67197: LD_INT 0
67199: PPUSH
67200: PPUSH
// task := GetTaskList ( mech ) ;
67201: LD_ADDR_VAR 0 4
67205: PUSH
67206: LD_VAR 0 1
67210: PPUSH
67211: CALL_OW 437
67215: ST_TO_ADDR
// if not task then
67216: LD_VAR 0 4
67220: NOT
67221: IFFALSE 67225
// exit ;
67223: GO 67267
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
67225: LD_ADDR_VAR 0 3
67229: PUSH
67230: LD_VAR 0 4
67234: PUSH
67235: LD_INT 1
67237: ARRAY
67238: PUSH
67239: LD_INT 1
67241: ARRAY
67242: PUSH
67243: LD_STRING r
67245: EQUAL
67246: PUSH
67247: LD_VAR 0 4
67251: PUSH
67252: LD_INT 1
67254: ARRAY
67255: PUSH
67256: LD_INT 4
67258: ARRAY
67259: PUSH
67260: LD_VAR 0 2
67264: EQUAL
67265: AND
67266: ST_TO_ADDR
// end ;
67267: LD_VAR 0 3
67271: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
67272: LD_INT 0
67274: PPUSH
// SetDir ( unit , d ) ;
67275: LD_VAR 0 1
67279: PPUSH
67280: LD_VAR 0 4
67284: PPUSH
67285: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
67289: LD_VAR 0 1
67293: PPUSH
67294: LD_VAR 0 2
67298: PPUSH
67299: LD_VAR 0 3
67303: PPUSH
67304: LD_VAR 0 5
67308: PPUSH
67309: CALL_OW 48
// end ;
67313: LD_VAR 0 6
67317: RET
// export function ToNaturalNumber ( number ) ; begin
67318: LD_INT 0
67320: PPUSH
// result := number div 1 ;
67321: LD_ADDR_VAR 0 2
67325: PUSH
67326: LD_VAR 0 1
67330: PUSH
67331: LD_INT 1
67333: DIV
67334: ST_TO_ADDR
// if number < 0 then
67335: LD_VAR 0 1
67339: PUSH
67340: LD_INT 0
67342: LESS
67343: IFFALSE 67353
// result := 0 ;
67345: LD_ADDR_VAR 0 2
67349: PUSH
67350: LD_INT 0
67352: ST_TO_ADDR
// end ;
67353: LD_VAR 0 2
67357: RET
// export function SortByClass ( units , class ) ; var un ; begin
67358: LD_INT 0
67360: PPUSH
67361: PPUSH
// if not units or not class then
67362: LD_VAR 0 1
67366: NOT
67367: PUSH
67368: LD_VAR 0 2
67372: NOT
67373: OR
67374: IFFALSE 67378
// exit ;
67376: GO 67473
// result := [ ] ;
67378: LD_ADDR_VAR 0 3
67382: PUSH
67383: EMPTY
67384: ST_TO_ADDR
// for un in units do
67385: LD_ADDR_VAR 0 4
67389: PUSH
67390: LD_VAR 0 1
67394: PUSH
67395: FOR_IN
67396: IFFALSE 67471
// if GetClass ( un ) = class then
67398: LD_VAR 0 4
67402: PPUSH
67403: CALL_OW 257
67407: PUSH
67408: LD_VAR 0 2
67412: EQUAL
67413: IFFALSE 67440
// result := Insert ( result , 1 , un ) else
67415: LD_ADDR_VAR 0 3
67419: PUSH
67420: LD_VAR 0 3
67424: PPUSH
67425: LD_INT 1
67427: PPUSH
67428: LD_VAR 0 4
67432: PPUSH
67433: CALL_OW 2
67437: ST_TO_ADDR
67438: GO 67469
// result := Replace ( result , result + 1 , un ) ;
67440: LD_ADDR_VAR 0 3
67444: PUSH
67445: LD_VAR 0 3
67449: PPUSH
67450: LD_VAR 0 3
67454: PUSH
67455: LD_INT 1
67457: PLUS
67458: PPUSH
67459: LD_VAR 0 4
67463: PPUSH
67464: CALL_OW 1
67468: ST_TO_ADDR
67469: GO 67395
67471: POP
67472: POP
// end ;
67473: LD_VAR 0 3
67477: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
67478: LD_INT 0
67480: PPUSH
67481: PPUSH
67482: PPUSH
67483: PPUSH
67484: PPUSH
67485: PPUSH
67486: PPUSH
// result := [ ] ;
67487: LD_ADDR_VAR 0 4
67491: PUSH
67492: EMPTY
67493: ST_TO_ADDR
// if x - r < 0 then
67494: LD_VAR 0 1
67498: PUSH
67499: LD_VAR 0 3
67503: MINUS
67504: PUSH
67505: LD_INT 0
67507: LESS
67508: IFFALSE 67520
// min_x := 0 else
67510: LD_ADDR_VAR 0 8
67514: PUSH
67515: LD_INT 0
67517: ST_TO_ADDR
67518: GO 67536
// min_x := x - r ;
67520: LD_ADDR_VAR 0 8
67524: PUSH
67525: LD_VAR 0 1
67529: PUSH
67530: LD_VAR 0 3
67534: MINUS
67535: ST_TO_ADDR
// if y - r < 0 then
67536: LD_VAR 0 2
67540: PUSH
67541: LD_VAR 0 3
67545: MINUS
67546: PUSH
67547: LD_INT 0
67549: LESS
67550: IFFALSE 67562
// min_y := 0 else
67552: LD_ADDR_VAR 0 7
67556: PUSH
67557: LD_INT 0
67559: ST_TO_ADDR
67560: GO 67578
// min_y := y - r ;
67562: LD_ADDR_VAR 0 7
67566: PUSH
67567: LD_VAR 0 2
67571: PUSH
67572: LD_VAR 0 3
67576: MINUS
67577: ST_TO_ADDR
// max_x := x + r ;
67578: LD_ADDR_VAR 0 9
67582: PUSH
67583: LD_VAR 0 1
67587: PUSH
67588: LD_VAR 0 3
67592: PLUS
67593: ST_TO_ADDR
// max_y := y + r ;
67594: LD_ADDR_VAR 0 10
67598: PUSH
67599: LD_VAR 0 2
67603: PUSH
67604: LD_VAR 0 3
67608: PLUS
67609: ST_TO_ADDR
// for _x = min_x to max_x do
67610: LD_ADDR_VAR 0 5
67614: PUSH
67615: DOUBLE
67616: LD_VAR 0 8
67620: DEC
67621: ST_TO_ADDR
67622: LD_VAR 0 9
67626: PUSH
67627: FOR_TO
67628: IFFALSE 67729
// for _y = min_y to max_y do
67630: LD_ADDR_VAR 0 6
67634: PUSH
67635: DOUBLE
67636: LD_VAR 0 7
67640: DEC
67641: ST_TO_ADDR
67642: LD_VAR 0 10
67646: PUSH
67647: FOR_TO
67648: IFFALSE 67725
// begin if not ValidHex ( _x , _y ) then
67650: LD_VAR 0 5
67654: PPUSH
67655: LD_VAR 0 6
67659: PPUSH
67660: CALL_OW 488
67664: NOT
67665: IFFALSE 67669
// continue ;
67667: GO 67647
// if GetResourceTypeXY ( _x , _y ) then
67669: LD_VAR 0 5
67673: PPUSH
67674: LD_VAR 0 6
67678: PPUSH
67679: CALL_OW 283
67683: IFFALSE 67723
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
67685: LD_ADDR_VAR 0 4
67689: PUSH
67690: LD_VAR 0 4
67694: PPUSH
67695: LD_VAR 0 4
67699: PUSH
67700: LD_INT 1
67702: PLUS
67703: PPUSH
67704: LD_VAR 0 5
67708: PUSH
67709: LD_VAR 0 6
67713: PUSH
67714: EMPTY
67715: LIST
67716: LIST
67717: PPUSH
67718: CALL_OW 1
67722: ST_TO_ADDR
// end ;
67723: GO 67647
67725: POP
67726: POP
67727: GO 67627
67729: POP
67730: POP
// end ;
67731: LD_VAR 0 4
67735: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
67736: LD_INT 0
67738: PPUSH
67739: PPUSH
67740: PPUSH
67741: PPUSH
67742: PPUSH
67743: PPUSH
67744: PPUSH
67745: PPUSH
// if not units then
67746: LD_VAR 0 1
67750: NOT
67751: IFFALSE 67755
// exit ;
67753: GO 68279
// result := UnitFilter ( units , [ f_ok ] ) ;
67755: LD_ADDR_VAR 0 3
67759: PUSH
67760: LD_VAR 0 1
67764: PPUSH
67765: LD_INT 50
67767: PUSH
67768: EMPTY
67769: LIST
67770: PPUSH
67771: CALL_OW 72
67775: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
67776: LD_ADDR_VAR 0 8
67780: PUSH
67781: LD_VAR 0 1
67785: PUSH
67786: LD_INT 1
67788: ARRAY
67789: PPUSH
67790: CALL_OW 255
67794: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
67795: LD_ADDR_VAR 0 10
67799: PUSH
67800: LD_INT 29
67802: PUSH
67803: LD_INT 91
67805: PUSH
67806: LD_INT 49
67808: PUSH
67809: EMPTY
67810: LIST
67811: LIST
67812: LIST
67813: ST_TO_ADDR
// if not result then
67814: LD_VAR 0 3
67818: NOT
67819: IFFALSE 67823
// exit ;
67821: GO 68279
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
67823: LD_ADDR_VAR 0 5
67827: PUSH
67828: LD_INT 81
67830: PUSH
67831: LD_VAR 0 8
67835: PUSH
67836: EMPTY
67837: LIST
67838: LIST
67839: PPUSH
67840: CALL_OW 69
67844: ST_TO_ADDR
// for i in result do
67845: LD_ADDR_VAR 0 4
67849: PUSH
67850: LD_VAR 0 3
67854: PUSH
67855: FOR_IN
67856: IFFALSE 68277
// begin tag := GetTag ( i ) + 1 ;
67858: LD_ADDR_VAR 0 9
67862: PUSH
67863: LD_VAR 0 4
67867: PPUSH
67868: CALL_OW 110
67872: PUSH
67873: LD_INT 1
67875: PLUS
67876: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
67877: LD_ADDR_VAR 0 7
67881: PUSH
67882: LD_VAR 0 4
67886: PPUSH
67887: CALL_OW 250
67891: PPUSH
67892: LD_VAR 0 4
67896: PPUSH
67897: CALL_OW 251
67901: PPUSH
67902: LD_INT 6
67904: PPUSH
67905: CALL 67478 0 3
67909: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
67910: LD_VAR 0 4
67914: PPUSH
67915: CALL_OW 247
67919: PUSH
67920: LD_INT 2
67922: EQUAL
67923: PUSH
67924: LD_VAR 0 7
67928: AND
67929: PUSH
67930: LD_VAR 0 4
67934: PPUSH
67935: CALL_OW 264
67939: PUSH
67940: LD_VAR 0 10
67944: IN
67945: NOT
67946: AND
67947: IFFALSE 67986
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
67949: LD_VAR 0 4
67953: PPUSH
67954: LD_VAR 0 7
67958: PUSH
67959: LD_INT 1
67961: ARRAY
67962: PUSH
67963: LD_INT 1
67965: ARRAY
67966: PPUSH
67967: LD_VAR 0 7
67971: PUSH
67972: LD_INT 1
67974: ARRAY
67975: PUSH
67976: LD_INT 2
67978: ARRAY
67979: PPUSH
67980: CALL_OW 116
67984: GO 68275
// if path > tag then
67986: LD_VAR 0 2
67990: PUSH
67991: LD_VAR 0 9
67995: GREATER
67996: IFFALSE 68204
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
67998: LD_ADDR_VAR 0 6
68002: PUSH
68003: LD_VAR 0 5
68007: PPUSH
68008: LD_INT 91
68010: PUSH
68011: LD_VAR 0 4
68015: PUSH
68016: LD_INT 8
68018: PUSH
68019: EMPTY
68020: LIST
68021: LIST
68022: LIST
68023: PPUSH
68024: CALL_OW 72
68028: ST_TO_ADDR
// if nearEnemy then
68029: LD_VAR 0 6
68033: IFFALSE 68102
// begin if GetWeapon ( i ) = ru_time_lapser then
68035: LD_VAR 0 4
68039: PPUSH
68040: CALL_OW 264
68044: PUSH
68045: LD_INT 49
68047: EQUAL
68048: IFFALSE 68076
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
68050: LD_VAR 0 4
68054: PPUSH
68055: LD_VAR 0 6
68059: PPUSH
68060: LD_VAR 0 4
68064: PPUSH
68065: CALL_OW 74
68069: PPUSH
68070: CALL_OW 112
68074: GO 68100
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
68076: LD_VAR 0 4
68080: PPUSH
68081: LD_VAR 0 6
68085: PPUSH
68086: LD_VAR 0 4
68090: PPUSH
68091: CALL_OW 74
68095: PPUSH
68096: CALL 69204 0 2
// end else
68100: GO 68202
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
68102: LD_VAR 0 4
68106: PPUSH
68107: LD_VAR 0 2
68111: PUSH
68112: LD_VAR 0 9
68116: ARRAY
68117: PUSH
68118: LD_INT 1
68120: ARRAY
68121: PPUSH
68122: LD_VAR 0 2
68126: PUSH
68127: LD_VAR 0 9
68131: ARRAY
68132: PUSH
68133: LD_INT 2
68135: ARRAY
68136: PPUSH
68137: CALL_OW 297
68141: PUSH
68142: LD_INT 6
68144: GREATER
68145: IFFALSE 68188
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
68147: LD_VAR 0 4
68151: PPUSH
68152: LD_VAR 0 2
68156: PUSH
68157: LD_VAR 0 9
68161: ARRAY
68162: PUSH
68163: LD_INT 1
68165: ARRAY
68166: PPUSH
68167: LD_VAR 0 2
68171: PUSH
68172: LD_VAR 0 9
68176: ARRAY
68177: PUSH
68178: LD_INT 2
68180: ARRAY
68181: PPUSH
68182: CALL_OW 114
68186: GO 68202
// SetTag ( i , tag ) ;
68188: LD_VAR 0 4
68192: PPUSH
68193: LD_VAR 0 9
68197: PPUSH
68198: CALL_OW 109
// end else
68202: GO 68275
// if enemy then
68204: LD_VAR 0 5
68208: IFFALSE 68275
// begin if GetWeapon ( i ) = ru_time_lapser then
68210: LD_VAR 0 4
68214: PPUSH
68215: CALL_OW 264
68219: PUSH
68220: LD_INT 49
68222: EQUAL
68223: IFFALSE 68251
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
68225: LD_VAR 0 4
68229: PPUSH
68230: LD_VAR 0 5
68234: PPUSH
68235: LD_VAR 0 4
68239: PPUSH
68240: CALL_OW 74
68244: PPUSH
68245: CALL_OW 112
68249: GO 68275
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
68251: LD_VAR 0 4
68255: PPUSH
68256: LD_VAR 0 5
68260: PPUSH
68261: LD_VAR 0 4
68265: PPUSH
68266: CALL_OW 74
68270: PPUSH
68271: CALL 69204 0 2
// end ; end ;
68275: GO 67855
68277: POP
68278: POP
// end ;
68279: LD_VAR 0 3
68283: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
68284: LD_INT 0
68286: PPUSH
68287: PPUSH
68288: PPUSH
// if not unit or IsInUnit ( unit ) then
68289: LD_VAR 0 1
68293: NOT
68294: PUSH
68295: LD_VAR 0 1
68299: PPUSH
68300: CALL_OW 310
68304: OR
68305: IFFALSE 68309
// exit ;
68307: GO 68400
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
68309: LD_ADDR_VAR 0 4
68313: PUSH
68314: LD_VAR 0 1
68318: PPUSH
68319: CALL_OW 250
68323: PPUSH
68324: LD_VAR 0 2
68328: PPUSH
68329: LD_INT 1
68331: PPUSH
68332: CALL_OW 272
68336: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
68337: LD_ADDR_VAR 0 5
68341: PUSH
68342: LD_VAR 0 1
68346: PPUSH
68347: CALL_OW 251
68351: PPUSH
68352: LD_VAR 0 2
68356: PPUSH
68357: LD_INT 1
68359: PPUSH
68360: CALL_OW 273
68364: ST_TO_ADDR
// if ValidHex ( x , y ) then
68365: LD_VAR 0 4
68369: PPUSH
68370: LD_VAR 0 5
68374: PPUSH
68375: CALL_OW 488
68379: IFFALSE 68400
// ComTurnXY ( unit , x , y ) ;
68381: LD_VAR 0 1
68385: PPUSH
68386: LD_VAR 0 4
68390: PPUSH
68391: LD_VAR 0 5
68395: PPUSH
68396: CALL_OW 118
// end ;
68400: LD_VAR 0 3
68404: RET
// export function SeeUnits ( side , units ) ; var i ; begin
68405: LD_INT 0
68407: PPUSH
68408: PPUSH
// result := false ;
68409: LD_ADDR_VAR 0 3
68413: PUSH
68414: LD_INT 0
68416: ST_TO_ADDR
// if not units then
68417: LD_VAR 0 2
68421: NOT
68422: IFFALSE 68426
// exit ;
68424: GO 68471
// for i in units do
68426: LD_ADDR_VAR 0 4
68430: PUSH
68431: LD_VAR 0 2
68435: PUSH
68436: FOR_IN
68437: IFFALSE 68469
// if See ( side , i ) then
68439: LD_VAR 0 1
68443: PPUSH
68444: LD_VAR 0 4
68448: PPUSH
68449: CALL_OW 292
68453: IFFALSE 68467
// begin result := true ;
68455: LD_ADDR_VAR 0 3
68459: PUSH
68460: LD_INT 1
68462: ST_TO_ADDR
// exit ;
68463: POP
68464: POP
68465: GO 68471
// end ;
68467: GO 68436
68469: POP
68470: POP
// end ;
68471: LD_VAR 0 3
68475: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
68476: LD_INT 0
68478: PPUSH
68479: PPUSH
68480: PPUSH
68481: PPUSH
// if not unit or not points then
68482: LD_VAR 0 1
68486: NOT
68487: PUSH
68488: LD_VAR 0 2
68492: NOT
68493: OR
68494: IFFALSE 68498
// exit ;
68496: GO 68588
// dist := 99999 ;
68498: LD_ADDR_VAR 0 5
68502: PUSH
68503: LD_INT 99999
68505: ST_TO_ADDR
// for i in points do
68506: LD_ADDR_VAR 0 4
68510: PUSH
68511: LD_VAR 0 2
68515: PUSH
68516: FOR_IN
68517: IFFALSE 68586
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
68519: LD_ADDR_VAR 0 6
68523: PUSH
68524: LD_VAR 0 1
68528: PPUSH
68529: LD_VAR 0 4
68533: PUSH
68534: LD_INT 1
68536: ARRAY
68537: PPUSH
68538: LD_VAR 0 4
68542: PUSH
68543: LD_INT 2
68545: ARRAY
68546: PPUSH
68547: CALL_OW 297
68551: ST_TO_ADDR
// if tmpDist < dist then
68552: LD_VAR 0 6
68556: PUSH
68557: LD_VAR 0 5
68561: LESS
68562: IFFALSE 68584
// begin result := i ;
68564: LD_ADDR_VAR 0 3
68568: PUSH
68569: LD_VAR 0 4
68573: ST_TO_ADDR
// dist := tmpDist ;
68574: LD_ADDR_VAR 0 5
68578: PUSH
68579: LD_VAR 0 6
68583: ST_TO_ADDR
// end ; end ;
68584: GO 68516
68586: POP
68587: POP
// end ;
68588: LD_VAR 0 3
68592: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
68593: LD_INT 0
68595: PPUSH
// uc_side := side ;
68596: LD_ADDR_OWVAR 20
68600: PUSH
68601: LD_VAR 0 1
68605: ST_TO_ADDR
// uc_nation := 3 ;
68606: LD_ADDR_OWVAR 21
68610: PUSH
68611: LD_INT 3
68613: ST_TO_ADDR
// vc_chassis := 25 ;
68614: LD_ADDR_OWVAR 37
68618: PUSH
68619: LD_INT 25
68621: ST_TO_ADDR
// vc_engine := engine_siberite ;
68622: LD_ADDR_OWVAR 39
68626: PUSH
68627: LD_INT 3
68629: ST_TO_ADDR
// vc_control := control_computer ;
68630: LD_ADDR_OWVAR 38
68634: PUSH
68635: LD_INT 3
68637: ST_TO_ADDR
// vc_weapon := 59 ;
68638: LD_ADDR_OWVAR 40
68642: PUSH
68643: LD_INT 59
68645: ST_TO_ADDR
// result := CreateVehicle ;
68646: LD_ADDR_VAR 0 5
68650: PUSH
68651: CALL_OW 45
68655: ST_TO_ADDR
// SetDir ( result , d ) ;
68656: LD_VAR 0 5
68660: PPUSH
68661: LD_VAR 0 4
68665: PPUSH
68666: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
68670: LD_VAR 0 5
68674: PPUSH
68675: LD_VAR 0 2
68679: PPUSH
68680: LD_VAR 0 3
68684: PPUSH
68685: LD_INT 0
68687: PPUSH
68688: CALL_OW 48
// end ;
68692: LD_VAR 0 5
68696: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
68697: LD_INT 0
68699: PPUSH
68700: PPUSH
68701: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
68702: LD_ADDR_VAR 0 2
68706: PUSH
68707: LD_INT 0
68709: PUSH
68710: LD_INT 0
68712: PUSH
68713: LD_INT 0
68715: PUSH
68716: LD_INT 0
68718: PUSH
68719: EMPTY
68720: LIST
68721: LIST
68722: LIST
68723: LIST
68724: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
68725: LD_VAR 0 1
68729: NOT
68730: PUSH
68731: LD_VAR 0 1
68735: PPUSH
68736: CALL_OW 264
68740: PUSH
68741: LD_INT 12
68743: PUSH
68744: LD_INT 51
68746: PUSH
68747: LD_INT 32
68749: PUSH
68750: LD_INT 89
68752: PUSH
68753: EMPTY
68754: LIST
68755: LIST
68756: LIST
68757: LIST
68758: IN
68759: NOT
68760: OR
68761: IFFALSE 68765
// exit ;
68763: GO 68863
// for i := 1 to 3 do
68765: LD_ADDR_VAR 0 3
68769: PUSH
68770: DOUBLE
68771: LD_INT 1
68773: DEC
68774: ST_TO_ADDR
68775: LD_INT 3
68777: PUSH
68778: FOR_TO
68779: IFFALSE 68861
// begin tmp := GetCargo ( cargo , i ) ;
68781: LD_ADDR_VAR 0 4
68785: PUSH
68786: LD_VAR 0 1
68790: PPUSH
68791: LD_VAR 0 3
68795: PPUSH
68796: CALL_OW 289
68800: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
68801: LD_ADDR_VAR 0 2
68805: PUSH
68806: LD_VAR 0 2
68810: PPUSH
68811: LD_VAR 0 3
68815: PPUSH
68816: LD_VAR 0 4
68820: PPUSH
68821: CALL_OW 1
68825: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
68826: LD_ADDR_VAR 0 2
68830: PUSH
68831: LD_VAR 0 2
68835: PPUSH
68836: LD_INT 4
68838: PPUSH
68839: LD_VAR 0 2
68843: PUSH
68844: LD_INT 4
68846: ARRAY
68847: PUSH
68848: LD_VAR 0 4
68852: PLUS
68853: PPUSH
68854: CALL_OW 1
68858: ST_TO_ADDR
// end ;
68859: GO 68778
68861: POP
68862: POP
// end ;
68863: LD_VAR 0 2
68867: RET
// export function Length ( array ) ; begin
68868: LD_INT 0
68870: PPUSH
// result := array + 0 ;
68871: LD_ADDR_VAR 0 2
68875: PUSH
68876: LD_VAR 0 1
68880: PUSH
68881: LD_INT 0
68883: PLUS
68884: ST_TO_ADDR
// end ;
68885: LD_VAR 0 2
68889: RET
// export function PrepareArray ( array ) ; begin
68890: LD_INT 0
68892: PPUSH
// result := array diff 0 ;
68893: LD_ADDR_VAR 0 2
68897: PUSH
68898: LD_VAR 0 1
68902: PUSH
68903: LD_INT 0
68905: DIFF
68906: ST_TO_ADDR
// if not result [ 1 ] then
68907: LD_VAR 0 2
68911: PUSH
68912: LD_INT 1
68914: ARRAY
68915: NOT
68916: IFFALSE 68936
// result := Delete ( result , 1 ) ;
68918: LD_ADDR_VAR 0 2
68922: PUSH
68923: LD_VAR 0 2
68927: PPUSH
68928: LD_INT 1
68930: PPUSH
68931: CALL_OW 3
68935: ST_TO_ADDR
// end ;
68936: LD_VAR 0 2
68940: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
68941: LD_INT 0
68943: PPUSH
68944: PPUSH
68945: PPUSH
68946: PPUSH
// sibRocketRange := 25 ;
68947: LD_ADDR_VAR 0 6
68951: PUSH
68952: LD_INT 25
68954: ST_TO_ADDR
// result := false ;
68955: LD_ADDR_VAR 0 4
68959: PUSH
68960: LD_INT 0
68962: ST_TO_ADDR
// for i := 0 to 5 do
68963: LD_ADDR_VAR 0 5
68967: PUSH
68968: DOUBLE
68969: LD_INT 0
68971: DEC
68972: ST_TO_ADDR
68973: LD_INT 5
68975: PUSH
68976: FOR_TO
68977: IFFALSE 69044
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
68979: LD_VAR 0 1
68983: PPUSH
68984: LD_VAR 0 5
68988: PPUSH
68989: LD_VAR 0 6
68993: PPUSH
68994: CALL_OW 272
68998: PPUSH
68999: LD_VAR 0 2
69003: PPUSH
69004: LD_VAR 0 5
69008: PPUSH
69009: LD_VAR 0 6
69013: PPUSH
69014: CALL_OW 273
69018: PPUSH
69019: LD_VAR 0 3
69023: PPUSH
69024: CALL_OW 309
69028: IFFALSE 69042
// begin result := true ;
69030: LD_ADDR_VAR 0 4
69034: PUSH
69035: LD_INT 1
69037: ST_TO_ADDR
// exit ;
69038: POP
69039: POP
69040: GO 69046
// end ;
69042: GO 68976
69044: POP
69045: POP
// end ;
69046: LD_VAR 0 4
69050: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
69051: LD_INT 0
69053: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
69054: LD_VAR 0 1
69058: PPUSH
69059: LD_VAR 0 2
69063: PPUSH
69064: LD_INT 0
69066: PPUSH
69067: LD_INT 0
69069: PPUSH
69070: LD_INT 1
69072: PPUSH
69073: LD_INT 0
69075: PPUSH
69076: CALL_OW 587
// end ;
69080: LD_VAR 0 3
69084: RET
// export function CenterOnNow ( unit ) ; begin
69085: LD_INT 0
69087: PPUSH
// result := IsInUnit ( unit ) ;
69088: LD_ADDR_VAR 0 2
69092: PUSH
69093: LD_VAR 0 1
69097: PPUSH
69098: CALL_OW 310
69102: ST_TO_ADDR
// if not result then
69103: LD_VAR 0 2
69107: NOT
69108: IFFALSE 69120
// result := unit ;
69110: LD_ADDR_VAR 0 2
69114: PUSH
69115: LD_VAR 0 1
69119: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
69120: LD_VAR 0 1
69124: PPUSH
69125: CALL_OW 87
// end ;
69129: LD_VAR 0 2
69133: RET
// export function ComMoveHex ( unit , hex ) ; begin
69134: LD_INT 0
69136: PPUSH
// if not hex then
69137: LD_VAR 0 2
69141: NOT
69142: IFFALSE 69146
// exit ;
69144: GO 69199
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
69146: LD_VAR 0 2
69150: PUSH
69151: LD_INT 1
69153: ARRAY
69154: PPUSH
69155: LD_VAR 0 2
69159: PUSH
69160: LD_INT 2
69162: ARRAY
69163: PPUSH
69164: CALL_OW 428
69168: IFFALSE 69172
// exit ;
69170: GO 69199
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
69172: LD_VAR 0 1
69176: PPUSH
69177: LD_VAR 0 2
69181: PUSH
69182: LD_INT 1
69184: ARRAY
69185: PPUSH
69186: LD_VAR 0 2
69190: PUSH
69191: LD_INT 2
69193: ARRAY
69194: PPUSH
69195: CALL_OW 111
// end ;
69199: LD_VAR 0 3
69203: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
69204: LD_INT 0
69206: PPUSH
69207: PPUSH
69208: PPUSH
// if not unit or not enemy then
69209: LD_VAR 0 1
69213: NOT
69214: PUSH
69215: LD_VAR 0 2
69219: NOT
69220: OR
69221: IFFALSE 69225
// exit ;
69223: GO 69349
// x := GetX ( enemy ) ;
69225: LD_ADDR_VAR 0 4
69229: PUSH
69230: LD_VAR 0 2
69234: PPUSH
69235: CALL_OW 250
69239: ST_TO_ADDR
// y := GetY ( enemy ) ;
69240: LD_ADDR_VAR 0 5
69244: PUSH
69245: LD_VAR 0 2
69249: PPUSH
69250: CALL_OW 251
69254: ST_TO_ADDR
// if ValidHex ( x , y ) then
69255: LD_VAR 0 4
69259: PPUSH
69260: LD_VAR 0 5
69264: PPUSH
69265: CALL_OW 488
69269: IFFALSE 69349
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
69271: LD_VAR 0 2
69275: PPUSH
69276: CALL_OW 247
69280: PUSH
69281: LD_INT 3
69283: PUSH
69284: LD_INT 2
69286: PUSH
69287: EMPTY
69288: LIST
69289: LIST
69290: IN
69291: PUSH
69292: LD_VAR 0 1
69296: PPUSH
69297: CALL_OW 255
69301: PPUSH
69302: LD_VAR 0 2
69306: PPUSH
69307: CALL_OW 292
69311: AND
69312: IFFALSE 69330
// ComAttackUnit ( unit , enemy ) else
69314: LD_VAR 0 1
69318: PPUSH
69319: LD_VAR 0 2
69323: PPUSH
69324: CALL_OW 115
69328: GO 69349
// ComAgressiveMove ( unit , x , y ) ;
69330: LD_VAR 0 1
69334: PPUSH
69335: LD_VAR 0 4
69339: PPUSH
69340: LD_VAR 0 5
69344: PPUSH
69345: CALL_OW 114
// end ; end_of_file
69349: LD_VAR 0 3
69353: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
69354: LD_VAR 0 1
69358: PUSH
69359: LD_INT 200
69361: DOUBLE
69362: GREATEREQUAL
69363: IFFALSE 69371
69365: LD_INT 299
69367: DOUBLE
69368: LESSEQUAL
69369: IFTRUE 69373
69371: GO 69405
69373: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
69374: LD_VAR 0 1
69378: PPUSH
69379: LD_VAR 0 2
69383: PPUSH
69384: LD_VAR 0 3
69388: PPUSH
69389: LD_VAR 0 4
69393: PPUSH
69394: LD_VAR 0 5
69398: PPUSH
69399: CALL 23078 0 5
69403: GO 69482
69405: LD_INT 300
69407: DOUBLE
69408: GREATEREQUAL
69409: IFFALSE 69417
69411: LD_INT 399
69413: DOUBLE
69414: LESSEQUAL
69415: IFTRUE 69419
69417: GO 69481
69419: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
69420: LD_VAR 0 1
69424: PPUSH
69425: LD_VAR 0 2
69429: PPUSH
69430: LD_VAR 0 3
69434: PPUSH
69435: LD_VAR 0 4
69439: PPUSH
69440: LD_VAR 0 5
69444: PPUSH
69445: LD_VAR 0 6
69449: PPUSH
69450: LD_VAR 0 7
69454: PPUSH
69455: LD_VAR 0 8
69459: PPUSH
69460: LD_VAR 0 9
69464: PPUSH
69465: LD_VAR 0 10
69469: PPUSH
69470: LD_VAR 0 11
69474: PPUSH
69475: CALL 19403 0 11
69479: GO 69482
69481: POP
// end ;
69482: PPOPN 11
69484: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
69485: LD_VAR 0 1
69489: PPUSH
69490: LD_VAR 0 2
69494: PPUSH
69495: LD_VAR 0 3
69499: PPUSH
69500: LD_VAR 0 4
69504: PPUSH
69505: LD_VAR 0 5
69509: PPUSH
69510: CALL 22814 0 5
// end ; end_of_file
69514: PPOPN 5
69516: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
69517: LD_VAR 0 1
69521: PPUSH
69522: LD_VAR 0 2
69526: PPUSH
69527: LD_VAR 0 3
69531: PPUSH
69532: LD_VAR 0 4
69536: PPUSH
69537: LD_VAR 0 5
69541: PPUSH
69542: LD_VAR 0 6
69546: PPUSH
69547: CALL 7055 0 6
// end ;
69551: PPOPN 6
69553: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
69554: LD_INT 0
69556: PPUSH
// begin if not units then
69557: LD_VAR 0 1
69561: NOT
69562: IFFALSE 69566
// exit ;
69564: GO 69566
// end ;
69566: PPOPN 7
69568: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
69569: CALL 6959 0 0
// end ;
69573: PPOPN 1
69575: END
