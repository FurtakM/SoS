// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 32 0 0
// InitAmerican ;
  15: CALL 915 0 0
// InitRussian ;
  19: CALL 1154 0 0
// DebugMode ;
  23: CALL 152 0 0
// Action ;
  27: CALL 2710 0 0
// end ;
  31: END
// export debug ; export mission_prefix ; export active_russian_dialog , bobby_in_squad , powell_contact , macmilan_use_radio , cyrus_in_squad , active_road_patrol , macmilan_in_trap , meta_action , end_mission , bobby_saved , cyrus_saved , send_troops_to_forest ; function Init ; begin
  32: LD_INT 0
  34: PPUSH
// mission_prefix := 01_ ;
  35: LD_ADDR_EXP 2
  39: PUSH
  40: LD_STRING 01_
  42: ST_TO_ADDR
// debug := 0 ;
  43: LD_ADDR_EXP 1
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// active_russian_dialog := false ;
  51: LD_ADDR_EXP 3
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// bobby_in_squad := false ;
  59: LD_ADDR_EXP 4
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// cyrus_in_squad := false ;
  67: LD_ADDR_EXP 7
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// powell_contact := false ;
  75: LD_ADDR_EXP 5
  79: PUSH
  80: LD_INT 0
  82: ST_TO_ADDR
// macmilan_use_radio := false ;
  83: LD_ADDR_EXP 6
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// active_road_patrol := false ;
  91: LD_ADDR_EXP 8
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// macmilan_in_trap := false ;
  99: LD_ADDR_EXP 9
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// meta_action := false ;
 107: LD_ADDR_EXP 10
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// end_mission := false ;
 115: LD_ADDR_EXP 11
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// bobby_saved := false ;
 123: LD_ADDR_EXP 12
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// cyrus_saved := false ;
 131: LD_ADDR_EXP 13
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// send_troops_to_forest := false ;
 139: LD_ADDR_EXP 14
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// end ;
 147: LD_VAR 0 1
 151: RET
// function DebugMode ; var i ; begin
 152: LD_INT 0
 154: PPUSH
 155: PPUSH
// if not debug then
 156: LD_EXP 1
 160: NOT
 161: IFFALSE 165
// exit ;
 163: GO 184
// Difficulty := 3 ;
 165: LD_ADDR_OWVAR 67
 169: PUSH
 170: LD_INT 3
 172: ST_TO_ADDR
// TurnFogOff ( ) ;
 173: CALL_OW 537
// FogOff ( 1 ) ;
 177: LD_INT 1
 179: PPUSH
 180: CALL_OW 344
// end ; end_of_file
 184: LD_VAR 0 1
 188: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
 189: LD_INT 0
 191: PPUSH
 192: PPUSH
// if exist_mode then
 193: LD_VAR 0 2
 197: IFFALSE 216
// unit := CreateCharacter ( ident ) else
 199: LD_ADDR_VAR 0 4
 203: PUSH
 204: LD_VAR 0 1
 208: PPUSH
 209: CALL_OW 34
 213: ST_TO_ADDR
 214: GO 231
// unit := NewCharacter ( ident ) ;
 216: LD_ADDR_VAR 0 4
 220: PUSH
 221: LD_VAR 0 1
 225: PPUSH
 226: CALL_OW 25
 230: ST_TO_ADDR
// result := unit ;
 231: LD_ADDR_VAR 0 3
 235: PUSH
 236: LD_VAR 0 4
 240: ST_TO_ADDR
// end ;
 241: LD_VAR 0 3
 245: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 246: LD_INT 0
 248: PPUSH
 249: PPUSH
 250: PPUSH
// uc_side := GetSide ( b ) ;
 251: LD_ADDR_OWVAR 20
 255: PUSH
 256: LD_VAR 0 2
 260: PPUSH
 261: CALL_OW 255
 265: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 266: LD_ADDR_OWVAR 21
 270: PUSH
 271: LD_VAR 0 2
 275: PPUSH
 276: CALL_OW 248
 280: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 281: LD_INT 0
 283: PPUSH
 284: LD_INT 1
 286: PPUSH
 287: LD_VAR 0 1
 291: PPUSH
 292: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
 296: LD_ADDR_VAR 0 5
 300: PUSH
 301: LD_VAR 0 2
 305: PPUSH
 306: CALL_OW 254
 310: PUSH
 311: LD_INT 3
 313: MINUS
 314: ST_TO_ADDR
// if dir < 0 then
 315: LD_VAR 0 5
 319: PUSH
 320: LD_INT 0
 322: LESS
 323: IFFALSE 339
// dir := 6 + dir ;
 325: LD_ADDR_VAR 0 5
 329: PUSH
 330: LD_INT 6
 332: PUSH
 333: LD_VAR 0 5
 337: PLUS
 338: ST_TO_ADDR
// un := CreateHuman ;
 339: LD_ADDR_VAR 0 4
 343: PUSH
 344: CALL_OW 44
 348: ST_TO_ADDR
// SetDir ( un , dir ) ;
 349: LD_VAR 0 4
 353: PPUSH
 354: LD_VAR 0 5
 358: PPUSH
 359: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 363: LD_VAR 0 4
 367: PPUSH
 368: LD_VAR 0 2
 372: PPUSH
 373: CALL_OW 52
// end ;
 377: LD_VAR 0 3
 381: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 382: LD_INT 0
 384: PPUSH
// uc_side := side ;
 385: LD_ADDR_OWVAR 20
 389: PUSH
 390: LD_VAR 0 1
 394: ST_TO_ADDR
// uc_nation := nation ;
 395: LD_ADDR_OWVAR 21
 399: PUSH
 400: LD_VAR 0 2
 404: ST_TO_ADDR
// vc_chassis := chassis ;
 405: LD_ADDR_OWVAR 37
 409: PUSH
 410: LD_VAR 0 3
 414: ST_TO_ADDR
// vc_engine := engine ;
 415: LD_ADDR_OWVAR 39
 419: PUSH
 420: LD_VAR 0 4
 424: ST_TO_ADDR
// vc_control := control ;
 425: LD_ADDR_OWVAR 38
 429: PUSH
 430: LD_VAR 0 5
 434: ST_TO_ADDR
// vc_weapon := weapon ;
 435: LD_ADDR_OWVAR 40
 439: PUSH
 440: LD_VAR 0 6
 444: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 445: LD_ADDR_OWVAR 41
 449: PUSH
 450: LD_VAR 0 7
 454: ST_TO_ADDR
// result := CreateVehicle ;
 455: LD_ADDR_VAR 0 8
 459: PUSH
 460: CALL_OW 45
 464: ST_TO_ADDR
// end ;
 465: LD_VAR 0 8
 469: RET
// export function ComPatrol ( unit , mode , pause , coords ) ; var i ; begin
 470: LD_INT 0
 472: PPUSH
 473: PPUSH
// while ( active_road_patrol ) do
 474: LD_EXP 8
 478: IFFALSE 832
// begin Wait ( 0 0$01 ) ;
 480: LD_INT 35
 482: PPUSH
 483: CALL_OW 67
// if not unit then
 487: LD_VAR 0 1
 491: NOT
 492: IFFALSE 496
// exit ;
 494: GO 832
// if mode = road then
 496: LD_VAR 0 2
 500: PUSH
 501: LD_STRING road
 503: EQUAL
 504: IFFALSE 560
// if GetFuel ( unit ) < 50 and not See ( 1 , unit ) and not HasTask ( unit ) then
 506: LD_VAR 0 1
 510: PPUSH
 511: CALL_OW 261
 515: PUSH
 516: LD_INT 50
 518: LESS
 519: PUSH
 520: LD_INT 1
 522: PPUSH
 523: LD_VAR 0 1
 527: PPUSH
 528: CALL_OW 292
 532: NOT
 533: AND
 534: PUSH
 535: LD_VAR 0 1
 539: PPUSH
 540: CALL_OW 314
 544: NOT
 545: AND
 546: IFFALSE 560
// SetFuel ( unit , 100 ) ;
 548: LD_VAR 0 1
 552: PPUSH
 553: LD_INT 100
 555: PPUSH
 556: CALL_OW 240
// if mode = forest then
 560: LD_VAR 0 2
 564: PUSH
 565: LD_STRING forest
 567: EQUAL
 568: IFFALSE 648
// if GetLives ( unit ) < 600 then
 570: LD_VAR 0 1
 574: PPUSH
 575: CALL_OW 256
 579: PUSH
 580: LD_INT 600
 582: LESS
 583: IFFALSE 648
// begin ComMoveXY ( unit , 42 , 3 ) ;
 585: LD_VAR 0 1
 589: PPUSH
 590: LD_INT 42
 592: PPUSH
 593: LD_INT 3
 595: PPUSH
 596: CALL_OW 111
// SetRememberedX ( unit , GetX ( unit ) ) ;
 600: LD_VAR 0 1
 604: PPUSH
 605: LD_VAR 0 1
 609: PPUSH
 610: CALL_OW 250
 614: PPUSH
 615: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
 619: LD_VAR 0 1
 623: PPUSH
 624: LD_VAR 0 1
 628: PPUSH
 629: CALL_OW 251
 633: PPUSH
 634: CALL_OW 232
// send_troops_to_forest := true ;
 638: LD_ADDR_EXP 14
 642: PUSH
 643: LD_INT 1
 645: ST_TO_ADDR
// break ;
 646: GO 832
// end ; if not HasTask ( unit ) then
 648: LD_VAR 0 1
 652: PPUSH
 653: CALL_OW 314
 657: NOT
 658: IFFALSE 830
// begin for i = 1 to coords do
 660: LD_ADDR_VAR 0 6
 664: PUSH
 665: DOUBLE
 666: LD_INT 1
 668: DEC
 669: ST_TO_ADDR
 670: LD_VAR 0 4
 674: PUSH
 675: FOR_TO
 676: IFFALSE 743
// begin AddComAgressiveMove ( unit , coords [ i ] , coords [ i + 1 ] ) ;
 678: LD_VAR 0 1
 682: PPUSH
 683: LD_VAR 0 4
 687: PUSH
 688: LD_VAR 0 6
 692: ARRAY
 693: PPUSH
 694: LD_VAR 0 4
 698: PUSH
 699: LD_VAR 0 6
 703: PUSH
 704: LD_INT 1
 706: PLUS
 707: ARRAY
 708: PPUSH
 709: CALL_OW 174
// AddComWait ( unit , pause ) ;
 713: LD_VAR 0 1
 717: PPUSH
 718: LD_VAR 0 3
 722: PPUSH
 723: CALL_OW 202
// i := i + 1 ;
 727: LD_ADDR_VAR 0 6
 731: PUSH
 732: LD_VAR 0 6
 736: PUSH
 737: LD_INT 1
 739: PLUS
 740: ST_TO_ADDR
// end ;
 741: GO 675
 743: POP
 744: POP
// for i = coords downto 1 do
 745: LD_ADDR_VAR 0 6
 749: PUSH
 750: DOUBLE
 751: LD_VAR 0 4
 755: INC
 756: ST_TO_ADDR
 757: LD_INT 1
 759: PUSH
 760: FOR_DOWNTO
 761: IFFALSE 828
// begin AddComAgressiveMove ( unit , coords [ i - 1 ] , coords [ i ] ) ;
 763: LD_VAR 0 1
 767: PPUSH
 768: LD_VAR 0 4
 772: PUSH
 773: LD_VAR 0 6
 777: PUSH
 778: LD_INT 1
 780: MINUS
 781: ARRAY
 782: PPUSH
 783: LD_VAR 0 4
 787: PUSH
 788: LD_VAR 0 6
 792: ARRAY
 793: PPUSH
 794: CALL_OW 174
// AddComWait ( unit , pause ) ;
 798: LD_VAR 0 1
 802: PPUSH
 803: LD_VAR 0 3
 807: PPUSH
 808: CALL_OW 202
// i := i - 1 ;
 812: LD_ADDR_VAR 0 6
 816: PUSH
 817: LD_VAR 0 6
 821: PUSH
 822: LD_INT 1
 824: MINUS
 825: ST_TO_ADDR
// end ;
 826: GO 760
 828: POP
 829: POP
// end ; end ;
 830: GO 474
// end ;
 832: LD_VAR 0 5
 836: RET
// export function DebugSay ( dialog ) ; var speaker ; begin
 837: LD_INT 0
 839: PPUSH
 840: PPUSH
// uc_nation := 1 ;
 841: LD_ADDR_OWVAR 21
 845: PUSH
 846: LD_INT 1
 848: ST_TO_ADDR
// uc_side := 0 ;
 849: LD_ADDR_OWVAR 20
 853: PUSH
 854: LD_INT 0
 856: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
 857: LD_INT 0
 859: PPUSH
 860: LD_INT 1
 862: PPUSH
 863: LD_INT 0
 865: PPUSH
 866: CALL_OW 380
// hc_name := speaker ;
 870: LD_ADDR_OWVAR 26
 874: PUSH
 875: LD_STRING speaker
 877: ST_TO_ADDR
// hc_gallery :=  ;
 878: LD_ADDR_OWVAR 33
 882: PUSH
 883: LD_STRING 
 885: ST_TO_ADDR
// speaker := CreateHuman ;
 886: LD_ADDR_VAR 0 3
 890: PUSH
 891: CALL_OW 44
 895: ST_TO_ADDR
// Say ( speaker , dialog ) ;
 896: LD_VAR 0 3
 900: PPUSH
 901: LD_VAR 0 1
 905: PPUSH
 906: CALL_OW 88
// end ; end_of_file
 910: LD_VAR 0 2
 914: RET
// export JMM , Bobby , Cyrus , Powell , fakePokryshkin ; export function InitAmerican ; begin
 915: LD_INT 0
 917: PPUSH
// uc_nation := 1 ;
 918: LD_ADDR_OWVAR 21
 922: PUSH
 923: LD_INT 1
 925: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , false ) ;
 926: LD_ADDR_EXP 15
 930: PUSH
 931: LD_STRING JMM
 933: PPUSH
 934: LD_INT 0
 936: PPUSH
 937: CALL 189 0 2
 941: ST_TO_ADDR
// uc_side := 4 ;
 942: LD_ADDR_OWVAR 20
 946: PUSH
 947: LD_INT 4
 949: ST_TO_ADDR
// hc_gallery := us ;
 950: LD_ADDR_OWVAR 33
 954: PUSH
 955: LD_STRING us
 957: ST_TO_ADDR
// hc_face_number := 7 ;
 958: LD_ADDR_OWVAR 34
 962: PUSH
 963: LD_INT 7
 965: ST_TO_ADDR
// hc_sex := sex_male ;
 966: LD_ADDR_OWVAR 27
 970: PUSH
 971: LD_INT 1
 973: ST_TO_ADDR
// hc_name := . ;
 974: LD_ADDR_OWVAR 26
 978: PUSH
 979: LD_STRING .
 981: ST_TO_ADDR
// hc_class := 1 ;
 982: LD_ADDR_OWVAR 28
 986: PUSH
 987: LD_INT 1
 989: ST_TO_ADDR
// Powell := CreateHuman ;
 990: LD_ADDR_EXP 18
 994: PUSH
 995: CALL_OW 44
 999: ST_TO_ADDR
// hc_name := . ;
1000: LD_ADDR_OWVAR 26
1004: PUSH
1005: LD_STRING .
1007: ST_TO_ADDR
// hc_gallery := ru ;
1008: LD_ADDR_OWVAR 33
1012: PUSH
1013: LD_STRING ru
1015: ST_TO_ADDR
// hc_face_number := 4 ;
1016: LD_ADDR_OWVAR 34
1020: PUSH
1021: LD_INT 4
1023: ST_TO_ADDR
// hc_sex := sex_male ;
1024: LD_ADDR_OWVAR 27
1028: PUSH
1029: LD_INT 1
1031: ST_TO_ADDR
// fakePokryshkin := CreateHuman ;
1032: LD_ADDR_EXP 19
1036: PUSH
1037: CALL_OW 44
1041: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , false ) ;
1042: LD_ADDR_EXP 16
1046: PUSH
1047: LD_STRING Bobby
1049: PPUSH
1050: LD_INT 0
1052: PPUSH
1053: CALL 189 0 2
1057: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , false ) ;
1058: LD_ADDR_EXP 17
1062: PUSH
1063: LD_STRING Cyrus
1065: PPUSH
1066: LD_INT 0
1068: PPUSH
1069: CALL 189 0 2
1073: ST_TO_ADDR
// case Difficulty of 1 :
1074: LD_OWVAR 67
1078: PUSH
1079: LD_INT 1
1081: DOUBLE
1082: EQUAL
1083: IFTRUE 1087
1085: GO 1102
1087: POP
// SetLives ( Bobby , 500 ) ; 2 :
1088: LD_EXP 16
1092: PPUSH
1093: LD_INT 500
1095: PPUSH
1096: CALL_OW 234
1100: GO 1149
1102: LD_INT 2
1104: DOUBLE
1105: EQUAL
1106: IFTRUE 1110
1108: GO 1125
1110: POP
// SetLives ( Bobby , 460 ) ; 3 :
1111: LD_EXP 16
1115: PPUSH
1116: LD_INT 460
1118: PPUSH
1119: CALL_OW 234
1123: GO 1149
1125: LD_INT 3
1127: DOUBLE
1128: EQUAL
1129: IFTRUE 1133
1131: GO 1148
1133: POP
// SetLives ( Bobby , 420 ) ; end ;
1134: LD_EXP 16
1138: PPUSH
1139: LD_INT 420
1141: PPUSH
1142: CALL_OW 234
1146: GO 1149
1148: POP
// end ; end_of_file
1149: LD_VAR 0 1
1153: RET
// export russian_troops_1 , russian_troops_2 , russian_patrol_tanks , russian_meta_guards , russian_patrol_forest ; export Pokryshkin ; export function InitRussian ; var skill , i , un ; begin
1154: LD_INT 0
1156: PPUSH
1157: PPUSH
1158: PPUSH
1159: PPUSH
// skill := [ 1 , 2 , 3 ] [ Difficulty ] ;
1160: LD_ADDR_VAR 0 2
1164: PUSH
1165: LD_INT 1
1167: PUSH
1168: LD_INT 2
1170: PUSH
1171: LD_INT 3
1173: PUSH
1174: EMPTY
1175: LIST
1176: LIST
1177: LIST
1178: PUSH
1179: LD_OWVAR 67
1183: ARRAY
1184: ST_TO_ADDR
// uc_side := 3 ;
1185: LD_ADDR_OWVAR 20
1189: PUSH
1190: LD_INT 3
1192: ST_TO_ADDR
// uc_nation := 3 ;
1193: LD_ADDR_OWVAR 21
1197: PUSH
1198: LD_INT 3
1200: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ) ;
1201: LD_ADDR_EXP 25
1205: PUSH
1206: LD_STRING Pokryshkin
1208: PPUSH
1209: LD_INT 0
1211: PPUSH
1212: CALL 189 0 2
1216: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 44 , 5 , false ) ;
1217: LD_EXP 25
1221: PPUSH
1222: LD_INT 44
1224: PPUSH
1225: LD_INT 5
1227: PPUSH
1228: LD_INT 0
1230: PPUSH
1231: CALL_OW 48
// hc_importance := 0 ;
1235: LD_ADDR_OWVAR 32
1239: PUSH
1240: LD_INT 0
1242: ST_TO_ADDR
// hc_gallery :=  ;
1243: LD_ADDR_OWVAR 33
1247: PUSH
1248: LD_STRING 
1250: ST_TO_ADDR
// hc_name :=  ;
1251: LD_ADDR_OWVAR 26
1255: PUSH
1256: LD_STRING 
1258: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1259: LD_INT 1
1261: PPUSH
1262: LD_INT 1
1264: PPUSH
1265: LD_VAR 0 2
1269: PPUSH
1270: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1274: LD_ADDR_OWVAR 33
1278: PUSH
1279: LD_STRING SecondCharsGal
1281: ST_TO_ADDR
// hc_face_number := 69 ;
1282: LD_ADDR_OWVAR 34
1286: PUSH
1287: LD_INT 69
1289: ST_TO_ADDR
// hc_sex := sex_male ;
1290: LD_ADDR_OWVAR 27
1294: PUSH
1295: LD_INT 1
1297: ST_TO_ADDR
// hc_name := Ilja Ivanov ;
1298: LD_ADDR_OWVAR 26
1302: PUSH
1303: LD_STRING Ilja Ivanov
1305: ST_TO_ADDR
// un := CreateHuman ;
1306: LD_ADDR_VAR 0 4
1310: PUSH
1311: CALL_OW 44
1315: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 1 , un ) ;
1316: LD_ADDR_EXP 20
1320: PUSH
1321: LD_EXP 20
1325: PPUSH
1326: LD_INT 1
1328: PPUSH
1329: LD_VAR 0 4
1333: PPUSH
1334: CALL_OW 2
1338: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1339: LD_VAR 0 4
1343: PPUSH
1344: LD_INT 3
1346: PPUSH
1347: LD_INT 0
1349: PPUSH
1350: CALL_OW 49
// PrepareHuman ( sex_male , 1 , skill ) ;
1354: LD_INT 1
1356: PPUSH
1357: LD_INT 1
1359: PPUSH
1360: LD_VAR 0 2
1364: PPUSH
1365: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1369: LD_ADDR_OWVAR 33
1373: PUSH
1374: LD_STRING SecondCharsGal
1376: ST_TO_ADDR
// hc_face_number := 70 ;
1377: LD_ADDR_OWVAR 34
1381: PUSH
1382: LD_INT 70
1384: ST_TO_ADDR
// hc_name := Pavel Starczy ;
1385: LD_ADDR_OWVAR 26
1389: PUSH
1390: LD_STRING Pavel Starczy
1392: ST_TO_ADDR
// un := CreateHuman ;
1393: LD_ADDR_VAR 0 4
1397: PUSH
1398: CALL_OW 44
1402: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 2 , un ) ;
1403: LD_ADDR_EXP 20
1407: PUSH
1408: LD_EXP 20
1412: PPUSH
1413: LD_INT 2
1415: PPUSH
1416: LD_VAR 0 4
1420: PPUSH
1421: CALL_OW 2
1425: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1426: LD_VAR 0 4
1430: PPUSH
1431: LD_INT 3
1433: PPUSH
1434: LD_INT 0
1436: PPUSH
1437: CALL_OW 49
// InitHc ;
1441: CALL_OW 19
// for i = 1 to 7 do
1445: LD_ADDR_VAR 0 3
1449: PUSH
1450: DOUBLE
1451: LD_INT 1
1453: DEC
1454: ST_TO_ADDR
1455: LD_INT 7
1457: PUSH
1458: FOR_TO
1459: IFFALSE 1610
// begin PrepareHuman ( false , 1 , skill ) ;
1461: LD_INT 0
1463: PPUSH
1464: LD_INT 1
1466: PPUSH
1467: LD_VAR 0 2
1471: PPUSH
1472: CALL_OW 380
// un := CreateHuman ;
1476: LD_ADDR_VAR 0 4
1480: PUSH
1481: CALL_OW 44
1485: ST_TO_ADDR
// if i mod 2 = 0 then
1486: LD_VAR 0 3
1490: PUSH
1491: LD_INT 2
1493: MOD
1494: PUSH
1495: LD_INT 0
1497: EQUAL
1498: IFFALSE 1555
// begin russian_troops_1 := Insert ( russian_troops_1 , russian_troops_1 + 1 , un ) ;
1500: LD_ADDR_EXP 20
1504: PUSH
1505: LD_EXP 20
1509: PPUSH
1510: LD_EXP 20
1514: PUSH
1515: LD_INT 1
1517: PLUS
1518: PPUSH
1519: LD_VAR 0 4
1523: PPUSH
1524: CALL_OW 2
1528: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1529: LD_VAR 0 4
1533: PPUSH
1534: LD_INT 3
1536: PPUSH
1537: LD_INT 0
1539: PPUSH
1540: CALL_OW 49
// ComHold ( un ) ;
1544: LD_VAR 0 4
1548: PPUSH
1549: CALL_OW 140
// end else
1553: GO 1608
// begin russian_troops_2 := Insert ( russian_troops_2 , russian_troops_2 + 1 , un ) ;
1555: LD_ADDR_EXP 21
1559: PUSH
1560: LD_EXP 21
1564: PPUSH
1565: LD_EXP 21
1569: PUSH
1570: LD_INT 1
1572: PLUS
1573: PPUSH
1574: LD_VAR 0 4
1578: PPUSH
1579: CALL_OW 2
1583: ST_TO_ADDR
// PlaceUnitArea ( un , guard_south , false ) ;
1584: LD_VAR 0 4
1588: PPUSH
1589: LD_INT 4
1591: PPUSH
1592: LD_INT 0
1594: PPUSH
1595: CALL_OW 49
// ComHold ( un ) ;
1599: LD_VAR 0 4
1603: PPUSH
1604: CALL_OW 140
// end ; end ;
1608: GO 1458
1610: POP
1611: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) do
1612: LD_ADDR_VAR 0 3
1616: PUSH
1617: LD_INT 22
1619: PUSH
1620: LD_INT 3
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: PUSH
1627: LD_INT 30
1629: PUSH
1630: LD_INT 31
1632: PUSH
1633: EMPTY
1634: LIST
1635: LIST
1636: PUSH
1637: EMPTY
1638: LIST
1639: LIST
1640: PPUSH
1641: CALL_OW 69
1645: PUSH
1646: FOR_IN
1647: IFFALSE 1665
// PrepareSolBun ( skill , i ) ;
1649: LD_VAR 0 2
1653: PPUSH
1654: LD_VAR 0 3
1658: PPUSH
1659: CALL 246 0 2
1663: GO 1646
1665: POP
1666: POP
// for i = 1 to 2 do
1667: LD_ADDR_VAR 0 3
1671: PUSH
1672: DOUBLE
1673: LD_INT 1
1675: DEC
1676: ST_TO_ADDR
1677: LD_INT 2
1679: PUSH
1680: FOR_TO
1681: IFFALSE 1812
// begin un := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1683: LD_ADDR_VAR 0 4
1687: PUSH
1688: LD_INT 3
1690: PPUSH
1691: LD_INT 3
1693: PPUSH
1694: LD_INT 22
1696: PPUSH
1697: LD_INT 1
1699: PPUSH
1700: LD_INT 1
1702: PPUSH
1703: LD_INT 42
1705: PPUSH
1706: LD_INT 100
1708: PPUSH
1709: CALL 382 0 7
1713: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
1714: LD_INT 0
1716: PPUSH
1717: LD_INT 3
1719: PPUSH
1720: LD_VAR 0 2
1724: PPUSH
1725: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1729: CALL_OW 44
1733: PPUSH
1734: LD_VAR 0 4
1738: PPUSH
1739: CALL_OW 52
// PlaceUnitXY ( un , [ 23 , 131 ] [ i ] , [ 14 , 87 ] [ i ] , false ) ;
1743: LD_VAR 0 4
1747: PPUSH
1748: LD_INT 23
1750: PUSH
1751: LD_INT 131
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PUSH
1758: LD_VAR 0 3
1762: ARRAY
1763: PPUSH
1764: LD_INT 14
1766: PUSH
1767: LD_INT 87
1769: PUSH
1770: EMPTY
1771: LIST
1772: LIST
1773: PUSH
1774: LD_VAR 0 3
1778: ARRAY
1779: PPUSH
1780: LD_INT 0
1782: PPUSH
1783: CALL_OW 48
// russian_patrol_tanks := Insert ( russian_patrol_tanks , 1 , un ) ;
1787: LD_ADDR_EXP 22
1791: PUSH
1792: LD_EXP 22
1796: PPUSH
1797: LD_INT 1
1799: PPUSH
1800: LD_VAR 0 4
1804: PPUSH
1805: CALL_OW 2
1809: ST_TO_ADDR
// end ;
1810: GO 1680
1812: POP
1813: POP
// for i = 1 to 2 do
1814: LD_ADDR_VAR 0 3
1818: PUSH
1819: DOUBLE
1820: LD_INT 1
1822: DEC
1823: ST_TO_ADDR
1824: LD_INT 2
1826: PUSH
1827: FOR_TO
1828: IFFALSE 1919
// begin PrepareHuman ( [ sex_female , sex_male , sex_male ] [ i ] , 1 , 1 ) ;
1830: LD_INT 2
1832: PUSH
1833: LD_INT 1
1835: PUSH
1836: LD_INT 1
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: LIST
1843: PUSH
1844: LD_VAR 0 3
1848: ARRAY
1849: PPUSH
1850: LD_INT 1
1852: PPUSH
1853: LD_INT 1
1855: PPUSH
1856: CALL_OW 380
// un := CreateHuman ;
1860: LD_ADDR_VAR 0 4
1864: PUSH
1865: CALL_OW 44
1869: ST_TO_ADDR
// russian_meta_guards := Insert ( russian_meta_guards , 1 , un ) ;
1870: LD_ADDR_EXP 23
1874: PUSH
1875: LD_EXP 23
1879: PPUSH
1880: LD_INT 1
1882: PPUSH
1883: LD_VAR 0 4
1887: PPUSH
1888: CALL_OW 2
1892: ST_TO_ADDR
// PlaceUnitArea ( un , exitArea , false ) ;
1893: LD_VAR 0 4
1897: PPUSH
1898: LD_INT 10
1900: PPUSH
1901: LD_INT 0
1903: PPUSH
1904: CALL_OW 49
// ComHold ( un ) ;
1908: LD_VAR 0 4
1912: PPUSH
1913: CALL_OW 140
// end ;
1917: GO 1827
1919: POP
1920: POP
// if Difficulty < 3 then
1921: LD_OWVAR 67
1925: PUSH
1926: LD_INT 3
1928: LESS
1929: IFFALSE 1933
// exit ;
1931: GO 1976
// PrepareHuman ( false , 1 , skill ) ;
1933: LD_INT 0
1935: PPUSH
1936: LD_INT 1
1938: PPUSH
1939: LD_VAR 0 2
1943: PPUSH
1944: CALL_OW 380
// russian_patrol_forest := CreateHuman ;
1948: LD_ADDR_EXP 24
1952: PUSH
1953: CALL_OW 44
1957: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_forest , 82 , 2 , false ) ;
1958: LD_EXP 24
1962: PPUSH
1963: LD_INT 82
1965: PPUSH
1966: LD_INT 2
1968: PPUSH
1969: LD_INT 0
1971: PPUSH
1972: CALL_OW 48
// end ;
1976: LD_VAR 0 1
1980: RET
// every 0 0$01 trigger active_road_patrol do
1981: LD_EXP 8
1985: IFFALSE 2051
1987: GO 1989
1989: DISABLE
// ComPatrol ( russian_patrol_tanks [ 1 ] , road , 0 0$02 , [ 131 , 87 , 107 , 75 , 107 , 66 , 114 , 61 , 107 , 34 ] ) ;
1990: LD_EXP 22
1994: PUSH
1995: LD_INT 1
1997: ARRAY
1998: PPUSH
1999: LD_STRING road
2001: PPUSH
2002: LD_INT 70
2004: PPUSH
2005: LD_INT 131
2007: PUSH
2008: LD_INT 87
2010: PUSH
2011: LD_INT 107
2013: PUSH
2014: LD_INT 75
2016: PUSH
2017: LD_INT 107
2019: PUSH
2020: LD_INT 66
2022: PUSH
2023: LD_INT 114
2025: PUSH
2026: LD_INT 61
2028: PUSH
2029: LD_INT 107
2031: PUSH
2032: LD_INT 34
2034: PUSH
2035: EMPTY
2036: LIST
2037: LIST
2038: LIST
2039: LIST
2040: LIST
2041: LIST
2042: LIST
2043: LIST
2044: LIST
2045: LIST
2046: PPUSH
2047: CALL 470 0 4
2051: END
// every 0 0$01 trigger active_road_patrol do
2052: LD_EXP 8
2056: IFFALSE 2114
2058: GO 2060
2060: DISABLE
// ComPatrol ( russian_patrol_tanks [ 2 ] , road , 0 0$02 , [ 21 , 12 , 37 , 30 , 65 , 62 , 107 , 76 ] ) ;
2061: LD_EXP 22
2065: PUSH
2066: LD_INT 2
2068: ARRAY
2069: PPUSH
2070: LD_STRING road
2072: PPUSH
2073: LD_INT 70
2075: PPUSH
2076: LD_INT 21
2078: PUSH
2079: LD_INT 12
2081: PUSH
2082: LD_INT 37
2084: PUSH
2085: LD_INT 30
2087: PUSH
2088: LD_INT 65
2090: PUSH
2091: LD_INT 62
2093: PUSH
2094: LD_INT 107
2096: PUSH
2097: LD_INT 76
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: LIST
2104: LIST
2105: LIST
2106: LIST
2107: LIST
2108: LIST
2109: PPUSH
2110: CALL 470 0 4
2114: END
// every 0 0$01 trigger IsOk ( russian_patrol_forest ) do
2115: LD_EXP 24
2119: PPUSH
2120: CALL_OW 302
2124: IFFALSE 2186
2126: GO 2128
2128: DISABLE
// ComPatrol ( russian_patrol_forest , forest , 0 0$01 , [ 52 , 15 , 81 , 9 , 120 , 52 , 135 , 80 , 122 , 95 ] ) ;
2129: LD_EXP 24
2133: PPUSH
2134: LD_STRING forest
2136: PPUSH
2137: LD_INT 35
2139: PPUSH
2140: LD_INT 52
2142: PUSH
2143: LD_INT 15
2145: PUSH
2146: LD_INT 81
2148: PUSH
2149: LD_INT 9
2151: PUSH
2152: LD_INT 120
2154: PUSH
2155: LD_INT 52
2157: PUSH
2158: LD_INT 135
2160: PUSH
2161: LD_INT 80
2163: PUSH
2164: LD_INT 122
2166: PUSH
2167: LD_INT 95
2169: PUSH
2170: EMPTY
2171: LIST
2172: LIST
2173: LIST
2174: LIST
2175: LIST
2176: LIST
2177: LIST
2178: LIST
2179: LIST
2180: LIST
2181: PPUSH
2182: CALL 470 0 4
2186: END
// every 0 0$01 trigger macmilan_use_radio do
2187: LD_EXP 6
2191: IFFALSE 2252
2193: GO 2195
2195: DISABLE
// begin active_road_patrol := false ;
2196: LD_ADDR_EXP 8
2200: PUSH
2201: LD_INT 0
2203: ST_TO_ADDR
// ComStop ( russian_patrol_tanks ) ;
2204: LD_EXP 22
2208: PPUSH
2209: CALL_OW 141
// AddComAgressiveMove ( russian_patrol_tanks , 72 , 41 ) ;
2213: LD_EXP 22
2217: PPUSH
2218: LD_INT 72
2220: PPUSH
2221: LD_INT 41
2223: PPUSH
2224: CALL_OW 174
// ComExitBuilding ( russian_troops_2 ) ;
2228: LD_EXP 21
2232: PPUSH
2233: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , 72 , 41 ) ;
2237: LD_EXP 21
2241: PPUSH
2242: LD_INT 72
2244: PPUSH
2245: LD_INT 41
2247: PPUSH
2248: CALL_OW 174
// end ;
2252: END
// every 0 0$03 trigger FilterUnitsInArea ( def_south , [ f_side , 1 ] ) do var un ;
2253: LD_INT 9
2255: PPUSH
2256: LD_INT 22
2258: PUSH
2259: LD_INT 1
2261: PUSH
2262: EMPTY
2263: LIST
2264: LIST
2265: PPUSH
2266: CALL_OW 70
2270: IFFALSE 2344
2272: GO 2274
2274: DISABLE
2275: LD_INT 0
2277: PPUSH
// begin enable ;
2278: ENABLE
// un := FilterUnitsInArea ( def_south , [ f_side , 1 ] ) [ 1 ] ;
2279: LD_ADDR_VAR 0 1
2283: PUSH
2284: LD_INT 9
2286: PPUSH
2287: LD_INT 22
2289: PUSH
2290: LD_INT 1
2292: PUSH
2293: EMPTY
2294: LIST
2295: LIST
2296: PPUSH
2297: CALL_OW 70
2301: PUSH
2302: LD_INT 1
2304: ARRAY
2305: ST_TO_ADDR
// ComExitBuilding ( russian_troops_2 ) ;
2306: LD_EXP 21
2310: PPUSH
2311: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , GetX ( un ) , GetY ( un ) ) ;
2315: LD_EXP 21
2319: PPUSH
2320: LD_VAR 0 1
2324: PPUSH
2325: CALL_OW 250
2329: PPUSH
2330: LD_VAR 0 1
2334: PPUSH
2335: CALL_OW 251
2339: PPUSH
2340: CALL_OW 174
// end ;
2344: PPOPN 1
2346: END
// every 0 0$01 trigger ( GetLives ( russian_patrol_tanks [ 1 ] ) < 999 or GetLives ( russian_patrol_tanks [ 2 ] ) < 999 ) and See ( 3 , JMM ) do
2347: LD_EXP 22
2351: PUSH
2352: LD_INT 1
2354: ARRAY
2355: PPUSH
2356: CALL_OW 256
2360: PUSH
2361: LD_INT 999
2363: LESS
2364: PUSH
2365: LD_EXP 22
2369: PUSH
2370: LD_INT 2
2372: ARRAY
2373: PPUSH
2374: CALL_OW 256
2378: PUSH
2379: LD_INT 999
2381: LESS
2382: OR
2383: PUSH
2384: LD_INT 3
2386: PPUSH
2387: LD_EXP 15
2391: PPUSH
2392: CALL_OW 292
2396: AND
2397: IFFALSE 2424
2399: GO 2401
2401: DISABLE
// begin active_road_patrol := false ;
2402: LD_ADDR_EXP 8
2406: PUSH
2407: LD_INT 0
2409: ST_TO_ADDR
// ComAttackUnit ( russian_patrol_tanks , JMM ) ;
2410: LD_EXP 22
2414: PPUSH
2415: LD_EXP 15
2419: PPUSH
2420: CALL_OW 115
// end ;
2424: END
// every 0 0$01 trigger macmilan_in_trap do
2425: LD_EXP 9
2429: IFFALSE 2475
2431: GO 2433
2433: DISABLE
// begin ComExitBuilding ( russian_troops_2 ) ;
2434: LD_EXP 21
2438: PPUSH
2439: CALL_OW 122
// ComAttackUnit ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , JMM ) ;
2443: LD_EXP 20
2447: PUSH
2448: LD_EXP 21
2452: ADD
2453: PUSH
2454: LD_EXP 25
2458: ADD
2459: PUSH
2460: LD_EXP 22
2464: ADD
2465: PPUSH
2466: LD_EXP 15
2470: PPUSH
2471: CALL_OW 115
// end ;
2475: END
// every 0 0$01 trigger meta_action do
2476: LD_EXP 10
2480: IFFALSE 2526
2482: GO 2484
2484: DISABLE
// begin active_road_patrol := false ;
2485: LD_ADDR_EXP 8
2489: PUSH
2490: LD_INT 0
2492: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , 93 , 1 ) ;
2493: LD_EXP 20
2497: PUSH
2498: LD_EXP 21
2502: ADD
2503: PUSH
2504: LD_EXP 25
2508: ADD
2509: PUSH
2510: LD_EXP 22
2514: ADD
2515: PPUSH
2516: LD_INT 93
2518: PPUSH
2519: LD_INT 1
2521: PPUSH
2522: CALL_OW 114
// end ;
2526: END
// every 0 0$1 trigger GetLives ( Pokryshkin ) < 1000 do
2527: LD_EXP 25
2531: PPUSH
2532: CALL_OW 256
2536: PUSH
2537: LD_INT 1000
2539: LESS
2540: IFFALSE 2591
2542: GO 2544
2544: DISABLE
// begin enable ;
2545: ENABLE
// if HexInfo ( 18 , 1 ) = Pokryshkin then
2546: LD_INT 18
2548: PPUSH
2549: LD_INT 1
2551: PPUSH
2552: CALL_OW 428
2556: PUSH
2557: LD_EXP 25
2561: EQUAL
2562: IFFALSE 2576
// begin RemoveUnit ( Pokryshkin ) ;
2564: LD_EXP 25
2568: PPUSH
2569: CALL_OW 64
// disable ;
2573: DISABLE
// end else
2574: GO 2591
// ComMoveXY ( Pokryshkin , 18 , 1 ) ;
2576: LD_EXP 25
2580: PPUSH
2581: LD_INT 18
2583: PPUSH
2584: LD_INT 1
2586: PPUSH
2587: CALL_OW 111
// end ;
2591: END
// every 0 0$20 trigger send_troops_to_forest do
2592: LD_EXP 14
2596: IFFALSE 2650
2598: GO 2600
2600: DISABLE
// begin if not IsOk ( russian_patrol_forest ) then
2601: LD_EXP 24
2605: PPUSH
2606: CALL_OW 302
2610: NOT
2611: IFFALSE 2615
// exit ;
2613: GO 2650
// ComAgressiveMove ( russian_troops_1 ^ Pokryshkin , GetRememberedX ( russian_patrol_forest ) , GetRememberedY ( russian_patrol_forest ) ) ;
2615: LD_EXP 20
2619: PUSH
2620: LD_EXP 25
2624: ADD
2625: PPUSH
2626: LD_EXP 24
2630: PPUSH
2631: CALL_OW 252
2635: PPUSH
2636: LD_EXP 24
2640: PPUSH
2641: CALL_OW 253
2645: PPUSH
2646: CALL_OW 114
// end ;
2650: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) = 3 then
2651: LD_VAR 0 1
2655: PPUSH
2656: CALL_OW 255
2660: PUSH
2661: LD_INT 3
2663: EQUAL
2664: IFFALSE 2707
// begin wait ( 11 ) ;
2666: LD_INT 11
2668: PPUSH
2669: CALL_OW 67
// ComEnterUnit ( driver , NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_depot ] ) , driver ) ) ;
2673: LD_VAR 0 1
2677: PPUSH
2678: LD_INT 30
2680: PUSH
2681: LD_INT 0
2683: PUSH
2684: EMPTY
2685: LIST
2686: LIST
2687: PPUSH
2688: CALL_OW 69
2692: PPUSH
2693: LD_VAR 0 1
2697: PPUSH
2698: CALL_OW 74
2702: PPUSH
2703: CALL_OW 120
// end ; end ; end_of_file
2707: PPOPN 4
2709: END
// export function Action ; var i ; begin
2710: LD_INT 0
2712: PPUSH
2713: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
2714: LD_ADDR_VAR 0 2
2718: PUSH
2719: LD_INT 22
2721: PUSH
2722: LD_INT 3
2724: PUSH
2725: EMPTY
2726: LIST
2727: LIST
2728: PUSH
2729: LD_INT 25
2731: PUSH
2732: LD_INT 1
2734: PUSH
2735: EMPTY
2736: LIST
2737: LIST
2738: PUSH
2739: EMPTY
2740: LIST
2741: LIST
2742: PPUSH
2743: CALL_OW 69
2747: PUSH
2748: FOR_IN
2749: IFFALSE 2762
// ComHold ( i ) ;
2751: LD_VAR 0 2
2755: PPUSH
2756: CALL_OW 140
2760: GO 2748
2762: POP
2763: POP
// InGameOn ;
2764: CALL_OW 8
// CenterOnXY ( 79 , 76 ) ;
2768: LD_INT 79
2770: PPUSH
2771: LD_INT 76
2773: PPUSH
2774: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
2778: LD_INT 10
2780: PPUSH
2781: CALL_OW 67
// PlaceUnitXY ( JMM , 80 , 79 , true ) ;
2785: LD_EXP 15
2789: PPUSH
2790: LD_INT 80
2792: PPUSH
2793: LD_INT 79
2795: PPUSH
2796: LD_INT 1
2798: PPUSH
2799: CALL_OW 48
// Wait ( 0 0$03 ) ;
2803: LD_INT 105
2805: PPUSH
2806: CALL_OW 67
// ComMoveXY ( JMM , 80 , 76 ) ;
2810: LD_EXP 15
2814: PPUSH
2815: LD_INT 80
2817: PPUSH
2818: LD_INT 76
2820: PPUSH
2821: CALL_OW 111
// Say ( JMM , D1-JMM-1 ) ;
2825: LD_EXP 15
2829: PPUSH
2830: LD_STRING D1-JMM-1
2832: PPUSH
2833: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2837: LD_INT 10
2839: PPUSH
2840: CALL_OW 67
// ComMoveXY ( JMM , 76 , 76 ) ;
2844: LD_EXP 15
2848: PPUSH
2849: LD_INT 76
2851: PPUSH
2852: LD_INT 76
2854: PPUSH
2855: CALL_OW 111
// Say ( JMM , D1-JMM-1a ) ;
2859: LD_EXP 15
2863: PPUSH
2864: LD_STRING D1-JMM-1a
2866: PPUSH
2867: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2871: LD_INT 10
2873: PPUSH
2874: CALL_OW 67
// ComTurnXY ( JMM , 83 , 66 ) ;
2878: LD_EXP 15
2882: PPUSH
2883: LD_INT 83
2885: PPUSH
2886: LD_INT 66
2888: PPUSH
2889: CALL_OW 118
// Say ( JMM , D1-JMM-1b ) ;
2893: LD_EXP 15
2897: PPUSH
2898: LD_STRING D1-JMM-1b
2900: PPUSH
2901: CALL_OW 88
// Wait ( 0 0$0.5 ) ;
2905: LD_INT 18
2907: PPUSH
2908: CALL_OW 67
// Say ( JMM , D1-JMM-1c ) ;
2912: LD_EXP 15
2916: PPUSH
2917: LD_STRING D1-JMM-1c
2919: PPUSH
2920: CALL_OW 88
// Wait ( 0 0$0.2 ) ;
2924: LD_INT 7
2926: PPUSH
2927: CALL_OW 67
// SayRadio ( Powell , D1-Pow-1 ) ;
2931: LD_EXP 18
2935: PPUSH
2936: LD_STRING D1-Pow-1
2938: PPUSH
2939: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
2943: LD_EXP 15
2947: PPUSH
2948: LD_STRING D1-JMM-2
2950: PPUSH
2951: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
2955: LD_EXP 18
2959: PPUSH
2960: LD_STRING D1-Pow-2
2962: PPUSH
2963: CALL_OW 94
// Say ( JMM , D1-JMM-3 ) ;
2967: LD_EXP 15
2971: PPUSH
2972: LD_STRING D1-JMM-3
2974: PPUSH
2975: CALL_OW 88
// SayRadio ( Powell , D1-Pow-3 ) ;
2979: LD_EXP 18
2983: PPUSH
2984: LD_STRING D1-Pow-3
2986: PPUSH
2987: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
2991: LD_EXP 15
2995: PPUSH
2996: LD_STRING D1-JMM-4
2998: PPUSH
2999: CALL_OW 88
// ComFree ( JMM ) ;
3003: LD_EXP 15
3007: PPUSH
3008: CALL_OW 139
// Wait ( 0 0$0.3 ) ;
3012: LD_INT 10
3014: PPUSH
3015: CALL_OW 67
// InGameOff ;
3019: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
3023: LD_STRING M1
3025: PPUSH
3026: CALL_OW 337
// SaveForQuickRestart ;
3030: CALL_OW 22
// active_russian_dialog := true ;
3034: LD_ADDR_EXP 3
3038: PUSH
3039: LD_INT 1
3041: ST_TO_ADDR
// active_road_patrol := true ;
3042: LD_ADDR_EXP 8
3046: PUSH
3047: LD_INT 1
3049: ST_TO_ADDR
// if Difficulty < 3 then
3050: LD_OWVAR 67
3054: PUSH
3055: LD_INT 3
3057: LESS
3058: IFFALSE 3089
// begin PlaceUnitXY ( Bobby , 41 , 71 , false ) ;
3060: LD_EXP 16
3064: PPUSH
3065: LD_INT 41
3067: PPUSH
3068: LD_INT 71
3070: PPUSH
3071: LD_INT 0
3073: PPUSH
3074: CALL_OW 48
// ComHold ( Bobby ) ;
3078: LD_EXP 16
3082: PPUSH
3083: CALL_OW 140
// end else
3087: GO 3137
// begin SetDir ( Bobby , 5 ) ;
3089: LD_EXP 16
3093: PPUSH
3094: LD_INT 5
3096: PPUSH
3097: CALL_OW 233
// PlaceUnitXY ( Bobby , 105 , 98 , false ) ;
3101: LD_EXP 16
3105: PPUSH
3106: LD_INT 105
3108: PPUSH
3109: LD_INT 98
3111: PPUSH
3112: LD_INT 0
3114: PPUSH
3115: CALL_OW 48
// ComCrawl ( Bobby ) ;
3119: LD_EXP 16
3123: PPUSH
3124: CALL_OW 137
// AddComHold ( Bobby ) ;
3128: LD_EXP 16
3132: PPUSH
3133: CALL_OW 200
// end ; PlaceUnitXY ( Cyrus , 90 , 42 , false ) ;
3137: LD_EXP 17
3141: PPUSH
3142: LD_INT 90
3144: PPUSH
3145: LD_INT 42
3147: PPUSH
3148: LD_INT 0
3150: PPUSH
3151: CALL_OW 48
// ComMoveXY ( Cyrus , 79 , 34 ) ;
3155: LD_EXP 17
3159: PPUSH
3160: LD_INT 79
3162: PPUSH
3163: LD_INT 34
3165: PPUSH
3166: CALL_OW 111
// AddComCrawl ( Cyrus ) ;
3170: LD_EXP 17
3174: PPUSH
3175: CALL_OW 197
// end ;
3179: LD_VAR 0 1
3183: RET
// every 0 0$01 trigger active_russian_dialog do var wait_points ;
3184: LD_EXP 3
3188: IFFALSE 3811
3190: GO 3192
3192: DISABLE
3193: LD_INT 0
3195: PPUSH
// begin wait_points := 0 ;
3196: LD_ADDR_VAR 0 1
3200: PUSH
3201: LD_INT 0
3203: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
3204: LD_INT 70
3206: PPUSH
3207: CALL_OW 67
// ComAgressiveMove ( russian_troops_1 , 79 , 83 ) ;
3211: LD_EXP 20
3215: PPUSH
3216: LD_INT 79
3218: PPUSH
3219: LD_INT 83
3221: PPUSH
3222: CALL_OW 114
// Say ( russian_troops_1 [ 2 ] , D1R-Rus1-1 ) ;
3226: LD_EXP 20
3230: PUSH
3231: LD_INT 2
3233: ARRAY
3234: PPUSH
3235: LD_STRING D1R-Rus1-1
3237: PPUSH
3238: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1R-Rus2-1 ) ;
3242: LD_EXP 20
3246: PUSH
3247: LD_INT 1
3249: ARRAY
3250: PPUSH
3251: LD_STRING D1R-Rus2-1
3253: PPUSH
3254: CALL_OW 88
// ComAgressiveMove ( russian_troops_2 , 91 , 80 ) ;
3258: LD_EXP 21
3262: PPUSH
3263: LD_INT 91
3265: PPUSH
3266: LD_INT 80
3268: PPUSH
3269: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
3273: LD_INT 35
3275: PPUSH
3276: CALL_OW 67
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 79 , 82 ) < 5 ;
3280: LD_EXP 20
3284: PUSH
3285: LD_INT 1
3287: ARRAY
3288: PPUSH
3289: LD_INT 79
3291: PPUSH
3292: LD_INT 82
3294: PPUSH
3295: CALL_OW 297
3299: PUSH
3300: LD_INT 5
3302: LESS
3303: IFFALSE 3273
// if not IsInArea ( JMM , jmm_spot ) then
3305: LD_EXP 15
3309: PPUSH
3310: LD_INT 5
3312: PPUSH
3313: CALL_OW 308
3317: NOT
3318: IFFALSE 3338
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1 ) else
3320: LD_EXP 20
3324: PUSH
3325: LD_INT 1
3327: ARRAY
3328: PPUSH
3329: LD_STRING D1Ra-Rus2-1
3331: PPUSH
3332: CALL_OW 88
3336: GO 3474
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3338: LD_EXP 20
3342: PUSH
3343: LD_INT 2
3345: ARRAY
3346: PPUSH
3347: LD_STRING D1Rb-Rus1-1
3349: PPUSH
3350: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Rb-Rus2-1 ) ;
3354: LD_EXP 20
3358: PUSH
3359: LD_INT 1
3361: ARRAY
3362: PPUSH
3363: LD_STRING D1Rb-Rus2-1
3365: PPUSH
3366: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 , GetX ( JMM ) , GetY ( JMM ) ) ;
3370: LD_EXP 20
3374: PUSH
3375: LD_EXP 21
3379: ADD
3380: PPUSH
3381: LD_EXP 15
3385: PPUSH
3386: CALL_OW 250
3390: PPUSH
3391: LD_EXP 15
3395: PPUSH
3396: CALL_OW 251
3400: PPUSH
3401: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
3405: LD_INT 35
3407: PPUSH
3408: CALL_OW 67
// until not IsInArea ( JMM , jmm_spot ) and not See ( 3 , jmm ) ;
3412: LD_EXP 15
3416: PPUSH
3417: LD_INT 5
3419: PPUSH
3420: CALL_OW 308
3424: NOT
3425: PUSH
3426: LD_INT 3
3428: PPUSH
3429: LD_EXP 15
3433: PPUSH
3434: CALL_OW 292
3438: NOT
3439: AND
3440: IFFALSE 3405
// Say ( russian_troops_1 [ 2 ] , D1Rc-Rus1-1 ) ;
3442: LD_EXP 20
3446: PUSH
3447: LD_INT 2
3449: ARRAY
3450: PPUSH
3451: LD_STRING D1Rc-Rus1-1
3453: PPUSH
3454: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1a ) ;
3458: LD_EXP 20
3462: PUSH
3463: LD_INT 1
3465: ARRAY
3466: PPUSH
3467: LD_STRING D1Ra-Rus2-1a
3469: PPUSH
3470: CALL_OW 88
// end ; wait_points := 10 ;
3474: LD_ADDR_VAR 0 1
3478: PUSH
3479: LD_INT 10
3481: ST_TO_ADDR
// if Difficulty > 1 then
3482: LD_OWVAR 67
3486: PUSH
3487: LD_INT 1
3489: GREATER
3490: IFFALSE 3572
// begin ComAgressiveMove ( russian_troops_1 , 78 , 95 ) ;
3492: LD_EXP 20
3496: PPUSH
3497: LD_INT 78
3499: PPUSH
3500: LD_INT 95
3502: PPUSH
3503: CALL_OW 114
// AddComWait ( russian_troops_1 , 0 0$05 ) ;
3507: LD_EXP 20
3511: PPUSH
3512: LD_INT 175
3514: PPUSH
3515: CALL_OW 202
// wait_points := wait_points + 15 ;
3519: LD_ADDR_VAR 0 1
3523: PUSH
3524: LD_VAR 0 1
3528: PUSH
3529: LD_INT 15
3531: PLUS
3532: ST_TO_ADDR
// if Difficulty > 2 then
3533: LD_OWVAR 67
3537: PUSH
3538: LD_INT 2
3540: GREATER
3541: IFFALSE 3572
// begin AddComAgressiveMove ( russian_troops_1 , 65 , 79 ) ;
3543: LD_EXP 20
3547: PPUSH
3548: LD_INT 65
3550: PPUSH
3551: LD_INT 79
3553: PPUSH
3554: CALL_OW 174
// wait_points := wait_points + 5 ;
3558: LD_ADDR_VAR 0 1
3562: PUSH
3563: LD_VAR 0 1
3567: PUSH
3568: LD_INT 5
3570: PLUS
3571: ST_TO_ADDR
// end ; end ; repeat wait ( 0 0$01 ) ;
3572: LD_INT 35
3574: PPUSH
3575: CALL_OW 67
// wait_points := wait_points - 1 ;
3579: LD_ADDR_VAR 0 1
3583: PUSH
3584: LD_VAR 0 1
3588: PUSH
3589: LD_INT 1
3591: MINUS
3592: ST_TO_ADDR
// if See ( 3 , JMM ) then
3593: LD_INT 3
3595: PPUSH
3596: LD_EXP 15
3600: PPUSH
3601: CALL_OW 292
3605: IFFALSE 3659
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3607: LD_EXP 20
3611: PUSH
3612: LD_INT 2
3614: ARRAY
3615: PPUSH
3616: LD_STRING D1Rb-Rus1-1
3618: PPUSH
3619: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3623: LD_EXP 20
3627: PPUSH
3628: LD_EXP 15
3632: PPUSH
3633: CALL_OW 250
3637: PPUSH
3638: LD_EXP 15
3642: PPUSH
3643: CALL_OW 251
3647: PPUSH
3648: CALL_OW 114
// Wait ( 0 0$03 ) ;
3652: LD_INT 105
3654: PPUSH
3655: CALL_OW 67
// end ; until wait_points = 0 ;
3659: LD_VAR 0 1
3663: PUSH
3664: LD_INT 0
3666: EQUAL
3667: IFFALSE 3572
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3669: LD_EXP 20
3673: PPUSH
3674: LD_INT 45
3676: PPUSH
3677: LD_INT 5
3679: PPUSH
3680: CALL_OW 114
// ComEnterUnit ( russian_troops_2 , rbar1 ) ;
3684: LD_EXP 21
3688: PPUSH
3689: LD_INT 26
3691: PPUSH
3692: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
3696: LD_INT 35
3698: PPUSH
3699: CALL_OW 67
// if See ( 3 , JMM ) then
3703: LD_INT 3
3705: PPUSH
3706: LD_EXP 15
3710: PPUSH
3711: CALL_OW 292
3715: IFFALSE 3771
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3717: LD_EXP 20
3721: PUSH
3722: LD_INT 2
3724: ARRAY
3725: PPUSH
3726: LD_STRING D1Rb-Rus1-1
3728: PPUSH
3729: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3733: LD_EXP 20
3737: PPUSH
3738: LD_EXP 15
3742: PPUSH
3743: CALL_OW 250
3747: PPUSH
3748: LD_EXP 15
3752: PPUSH
3753: CALL_OW 251
3757: PPUSH
3758: CALL_OW 114
// Wait ( 0 0$50 ) ;
3762: LD_INT 1750
3764: PPUSH
3765: CALL_OW 67
// end else
3769: GO 3786
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3771: LD_EXP 20
3775: PPUSH
3776: LD_INT 45
3778: PPUSH
3779: LD_INT 5
3781: PPUSH
3782: CALL_OW 114
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 45 , 5 ) < 10 ;
3786: LD_EXP 20
3790: PUSH
3791: LD_INT 1
3793: ARRAY
3794: PPUSH
3795: LD_INT 45
3797: PPUSH
3798: LD_INT 5
3800: PPUSH
3801: CALL_OW 297
3805: PUSH
3806: LD_INT 10
3808: LESS
3809: IFFALSE 3696
// end ;
3811: PPOPN 1
3813: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 6 ] ] ) and Difficulty = 1 do
3814: LD_INT 22
3816: PUSH
3817: LD_INT 3
3819: PUSH
3820: EMPTY
3821: LIST
3822: LIST
3823: PUSH
3824: LD_INT 92
3826: PUSH
3827: LD_INT 80
3829: PUSH
3830: LD_INT 83
3832: PUSH
3833: LD_INT 6
3835: PUSH
3836: EMPTY
3837: LIST
3838: LIST
3839: LIST
3840: LIST
3841: PUSH
3842: EMPTY
3843: LIST
3844: LIST
3845: PPUSH
3846: CALL_OW 69
3850: PUSH
3851: LD_OWVAR 67
3855: PUSH
3856: LD_INT 1
3858: EQUAL
3859: AND
3860: IFFALSE 3941
3862: GO 3864
3864: DISABLE
// begin PlaceSeeing ( 80 , 83 , 1 , - 7 ) ;
3865: LD_INT 80
3867: PPUSH
3868: LD_INT 83
3870: PPUSH
3871: LD_INT 1
3873: PPUSH
3874: LD_INT 7
3876: NEG
3877: PPUSH
3878: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
3882: LD_INT 35
3884: PPUSH
3885: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 10 ] ] ) ;
3889: LD_INT 22
3891: PUSH
3892: LD_INT 3
3894: PUSH
3895: EMPTY
3896: LIST
3897: LIST
3898: PUSH
3899: LD_INT 92
3901: PUSH
3902: LD_INT 80
3904: PUSH
3905: LD_INT 83
3907: PUSH
3908: LD_INT 10
3910: PUSH
3911: EMPTY
3912: LIST
3913: LIST
3914: LIST
3915: LIST
3916: PUSH
3917: EMPTY
3918: LIST
3919: LIST
3920: PPUSH
3921: CALL_OW 69
3925: NOT
3926: IFFALSE 3882
// RemoveSeeing ( 80 , 83 , 1 ) ;
3928: LD_INT 80
3930: PPUSH
3931: LD_INT 83
3933: PPUSH
3934: LD_INT 1
3936: PPUSH
3937: CALL_OW 331
// end ;
3941: END
// every 0 0$02 trigger GetDistUnits ( JMM , Bobby ) < 9 and IsOk ( Bobby ) do
3942: LD_EXP 15
3946: PPUSH
3947: LD_EXP 16
3951: PPUSH
3952: CALL_OW 296
3956: PUSH
3957: LD_INT 9
3959: LESS
3960: PUSH
3961: LD_EXP 16
3965: PPUSH
3966: CALL_OW 302
3970: AND
3971: IFFALSE 4422
3973: GO 3975
3975: DISABLE
// begin ComWalk ( Bobby ) ;
3976: LD_EXP 16
3980: PPUSH
3981: CALL_OW 138
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
3985: LD_EXP 16
3989: PPUSH
3990: LD_EXP 15
3994: PPUSH
3995: CALL_OW 250
3999: PPUSH
4000: LD_EXP 15
4004: PPUSH
4005: CALL_OW 251
4009: PPUSH
4010: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
4014: LD_INT 35
4016: PPUSH
4017: CALL_OW 67
// until See ( 4 , JMM ) ;
4021: LD_INT 4
4023: PPUSH
4024: LD_EXP 15
4028: PPUSH
4029: CALL_OW 292
4033: IFFALSE 4014
// InGameOn ;
4035: CALL_OW 8
// ComTurnUnit ( JMM , Bobby ) ;
4039: LD_EXP 15
4043: PPUSH
4044: LD_EXP 16
4048: PPUSH
4049: CALL_OW 119
// if cyrus_in_squad and IsOk ( Cyrus ) and GetDistUnits ( JMM , Cyrus ) < 10 then
4053: LD_EXP 7
4057: PUSH
4058: LD_EXP 17
4062: PPUSH
4063: CALL_OW 302
4067: AND
4068: PUSH
4069: LD_EXP 15
4073: PPUSH
4074: LD_EXP 17
4078: PPUSH
4079: CALL_OW 296
4083: PUSH
4084: LD_INT 10
4086: LESS
4087: AND
4088: IFFALSE 4133
// begin ComMoveXY ( Cyrus , GetX ( JMM ) , GetY ( JMM ) ) ;
4090: LD_EXP 17
4094: PPUSH
4095: LD_EXP 15
4099: PPUSH
4100: CALL_OW 250
4104: PPUSH
4105: LD_EXP 15
4109: PPUSH
4110: CALL_OW 251
4114: PPUSH
4115: CALL_OW 111
// AddComTurnUnit ( Cyrus , Bobby ) ;
4119: LD_EXP 17
4123: PPUSH
4124: LD_EXP 16
4128: PPUSH
4129: CALL_OW 179
// end ; Say ( JMM , D2-JMM-1 ) ;
4133: LD_EXP 15
4137: PPUSH
4138: LD_STRING D2-JMM-1
4140: PPUSH
4141: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
4145: LD_INT 10
4147: PPUSH
4148: CALL_OW 67
// ComTurnUnit ( Bobby , JMM ) ;
4152: LD_EXP 16
4156: PPUSH
4157: LD_EXP 15
4161: PPUSH
4162: CALL_OW 119
// Say ( Bobby , D2-Bobby-1 ) ;
4166: LD_EXP 16
4170: PPUSH
4171: LD_STRING D2-Bobby-1
4173: PPUSH
4174: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
4178: LD_EXP 15
4182: PPUSH
4183: LD_STRING D2-JMM-2
4185: PPUSH
4186: CALL_OW 88
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4190: LD_EXP 16
4194: PPUSH
4195: LD_EXP 15
4199: PPUSH
4200: CALL_OW 250
4204: PPUSH
4205: LD_EXP 15
4209: PPUSH
4210: CALL_OW 251
4214: PPUSH
4215: CALL_OW 111
// Say ( Bobby , D2-Bobby-2 ) ;
4219: LD_EXP 16
4223: PPUSH
4224: LD_STRING D2-Bobby-2
4226: PPUSH
4227: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
4231: LD_EXP 15
4235: PPUSH
4236: LD_STRING D2-JMM-3
4238: PPUSH
4239: CALL_OW 88
// ComTurnUnit ( Bobby , JMM ) ;
4243: LD_EXP 16
4247: PPUSH
4248: LD_EXP 15
4252: PPUSH
4253: CALL_OW 119
// Say ( Bobby , D2-Bobby-3 ) ;
4257: LD_EXP 16
4261: PPUSH
4262: LD_STRING D2-Bobby-3
4264: PPUSH
4265: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
4269: LD_EXP 15
4273: PPUSH
4274: LD_STRING D2-JMM-4
4276: PPUSH
4277: CALL_OW 88
// Say ( Bobby , D2-Bobby-4 ) ;
4281: LD_EXP 16
4285: PPUSH
4286: LD_STRING D2-Bobby-4
4288: PPUSH
4289: CALL_OW 88
// Say ( JMM , D2-JMM-5 ) ;
4293: LD_EXP 15
4297: PPUSH
4298: LD_STRING D2-JMM-5
4300: PPUSH
4301: CALL_OW 88
// Say ( Bobby , D2-Bobby-5 ) ;
4305: LD_EXP 16
4309: PPUSH
4310: LD_STRING D2-Bobby-5
4312: PPUSH
4313: CALL_OW 88
// Say ( JMM , D2-JMM-6 ) ;
4317: LD_EXP 15
4321: PPUSH
4322: LD_STRING D2-JMM-6
4324: PPUSH
4325: CALL_OW 88
// if not powell_contact then
4329: LD_EXP 5
4333: NOT
4334: IFFALSE 4360
// begin Say ( Bobby , D2-Bobby-6 ) ;
4336: LD_EXP 16
4340: PPUSH
4341: LD_STRING D2-Bobby-6
4343: PPUSH
4344: CALL_OW 88
// Say ( JMM , D2-JMM-7 ) ;
4348: LD_EXP 15
4352: PPUSH
4353: LD_STRING D2-JMM-7
4355: PPUSH
4356: CALL_OW 88
// end ; InGameOff ;
4360: CALL_OW 9
// SetSide ( Bobby , 1 ) ;
4364: LD_EXP 16
4368: PPUSH
4369: LD_INT 1
4371: PPUSH
4372: CALL_OW 235
// ComFree ( [ JMM , Bobby ] ) ;
4376: LD_EXP 15
4380: PUSH
4381: LD_EXP 16
4385: PUSH
4386: EMPTY
4387: LIST
4388: LIST
4389: PPUSH
4390: CALL_OW 139
// bobby_in_squad := true ;
4394: LD_ADDR_EXP 4
4398: PUSH
4399: LD_INT 1
4401: ST_TO_ADDR
// if powell_contact and not cyrus_in_squad then
4402: LD_EXP 5
4406: PUSH
4407: LD_EXP 7
4411: NOT
4412: AND
4413: IFFALSE 4422
// ChangeMissionObjectives ( M2b ) ;
4415: LD_STRING M2b
4417: PPUSH
4418: CALL_OW 337
// end ;
4422: END
// every 0 0$45 trigger active_russian_dialog and not bobby_in_squad and Difficulty < 3 do
4423: LD_EXP 3
4427: PUSH
4428: LD_EXP 4
4432: NOT
4433: AND
4434: PUSH
4435: LD_OWVAR 67
4439: PUSH
4440: LD_INT 3
4442: LESS
4443: AND
4444: IFFALSE 4464
4446: GO 4448
4448: DISABLE
// ComMoveXY ( Bobby , 75 , 83 ) ;
4449: LD_EXP 16
4453: PPUSH
4454: LD_INT 75
4456: PPUSH
4457: LD_INT 83
4459: PPUSH
4460: CALL_OW 111
4464: END
// every 0 0$10 trigger cyrus_in_squad and not bobby_in_squad do
4465: LD_EXP 7
4469: PUSH
4470: LD_EXP 4
4474: NOT
4475: AND
4476: IFFALSE 4505
4478: GO 4480
4480: DISABLE
// begin ComMoveXY ( Bobby , 105 , 97 ) ;
4481: LD_EXP 16
4485: PPUSH
4486: LD_INT 105
4488: PPUSH
4489: LD_INT 97
4491: PPUSH
4492: CALL_OW 111
// AddComCrawl ( Bobby ) ;
4496: LD_EXP 16
4500: PPUSH
4501: CALL_OW 197
// end ;
4505: END
// every 0 0$01 trigger IsInArea ( JMM , obstacle_area ) and GetDistUnits ( JMM , Bobby ) < 7 and bobby_in_squad do
4506: LD_EXP 15
4510: PPUSH
4511: LD_INT 6
4513: PPUSH
4514: CALL_OW 308
4518: PUSH
4519: LD_EXP 15
4523: PPUSH
4524: LD_EXP 16
4528: PPUSH
4529: CALL_OW 296
4533: PUSH
4534: LD_INT 7
4536: LESS
4537: AND
4538: PUSH
4539: LD_EXP 4
4543: AND
4544: IFFALSE 4591
4546: GO 4548
4548: DISABLE
// begin ComHold ( [ JMM , Bobby ] ) ;
4549: LD_EXP 15
4553: PUSH
4554: LD_EXP 16
4558: PUSH
4559: EMPTY
4560: LIST
4561: LIST
4562: PPUSH
4563: CALL_OW 140
// Say ( JMM , D2a-JMM-1 ) ;
4567: LD_EXP 15
4571: PPUSH
4572: LD_STRING D2a-JMM-1
4574: PPUSH
4575: CALL_OW 88
// Say ( Bobby , D2a-Bobby-1 ) ;
4579: LD_EXP 16
4583: PPUSH
4584: LD_STRING D2a-Bobby-1
4586: PPUSH
4587: CALL_OW 88
// end ;
4591: END
// every 0 0$50 trigger active_russian_dialog and not See ( 3 , JMM ) do
4592: LD_EXP 3
4596: PUSH
4597: LD_INT 3
4599: PPUSH
4600: LD_EXP 15
4604: PPUSH
4605: CALL_OW 292
4609: NOT
4610: AND
4611: IFFALSE 4787
4613: GO 4615
4615: DISABLE
// begin Wait ( rand ( 0 0$10 , 0 0$20 ) ) ;
4616: LD_INT 350
4618: PPUSH
4619: LD_INT 700
4621: PPUSH
4622: CALL_OW 12
4626: PPUSH
4627: CALL_OW 67
// InGameOn ;
4631: CALL_OW 8
// DialogueOn ;
4635: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
4639: LD_EXP 18
4643: PPUSH
4644: LD_STRING D3-Pow-1
4646: PPUSH
4647: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
4651: LD_EXP 15
4655: PPUSH
4656: LD_STRING D3-JMM-1
4658: PPUSH
4659: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
4663: LD_EXP 18
4667: PPUSH
4668: LD_STRING D3-Pow-2
4670: PPUSH
4671: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
4675: LD_EXP 15
4679: PPUSH
4680: LD_STRING D3-JMM-2
4682: PPUSH
4683: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
4687: LD_EXP 18
4691: PPUSH
4692: LD_STRING D3-Pow-3
4694: PPUSH
4695: CALL_OW 94
// DialogueOff ;
4699: CALL_OW 7
// InGameOff ;
4703: CALL_OW 9
// powell_contact := true ;
4707: LD_ADDR_EXP 5
4711: PUSH
4712: LD_INT 1
4714: ST_TO_ADDR
// SetAreaMapShow ( exitArea , 1 ) ;
4715: LD_INT 10
4717: PPUSH
4718: LD_INT 1
4720: PPUSH
4721: CALL_OW 424
// uc_side := 4 ;
4725: LD_ADDR_OWVAR 20
4729: PUSH
4730: LD_INT 4
4732: ST_TO_ADDR
// uc_nation := 1 ;
4733: LD_ADDR_OWVAR 21
4737: PUSH
4738: LD_INT 1
4740: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ) ;
4741: LD_ADDR_EXP 18
4745: PUSH
4746: LD_STRING Powell
4748: PPUSH
4749: LD_INT 0
4751: PPUSH
4752: CALL 189 0 2
4756: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
4757: LD_STRING M2
4759: PPUSH
4760: CALL_OW 337
// if not bobby_in_squad then
4764: LD_EXP 4
4768: NOT
4769: IFFALSE 4780
// ChangeMissionObjectives ( M2a ) else
4771: LD_STRING M2a
4773: PPUSH
4774: CALL_OW 337
4778: GO 4787
// ChangeMissionObjectives ( M2b ) ;
4780: LD_STRING M2b
4782: PPUSH
4783: CALL_OW 337
// end ;
4787: END
// every 0 0$01 trigger IsInArea ( JMM , fakeArea ) do
4788: LD_EXP 15
4792: PPUSH
4793: LD_INT 7
4795: PPUSH
4796: CALL_OW 308
4800: IFFALSE 4935
4802: GO 4804
4804: DISABLE
// begin DialogueOn ;
4805: CALL_OW 6
// SayRadio ( fakePokryshkin , D4-Rus3-1 ) ;
4809: LD_EXP 19
4813: PPUSH
4814: LD_STRING D4-Rus3-1
4816: PPUSH
4817: CALL_OW 94
// DialogueOff ;
4821: CALL_OW 7
// ChangeMissionObjectives ( M3a ) ;
4825: LD_STRING M3a
4827: PPUSH
4828: CALL_OW 337
// SetAreaMapShow ( fakeEnd , 1 ) ;
4832: LD_INT 11
4834: PPUSH
4835: LD_INT 1
4837: PPUSH
4838: CALL_OW 424
// Wait ( 0 0$02 ) ;
4842: LD_INT 70
4844: PPUSH
4845: CALL_OW 67
// DialogueOn ;
4849: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
4853: LD_EXP 18
4857: PPUSH
4858: LD_STRING D4-Pow-1
4860: PPUSH
4861: CALL_OW 94
// DialogueOff ;
4865: CALL_OW 7
// ChangeMissionObjectives ( M3b ) ;
4869: LD_STRING M3b
4871: PPUSH
4872: CALL_OW 337
// case Query ( Q1 ) of 1 :
4876: LD_STRING Q1
4878: PPUSH
4879: CALL_OW 97
4883: PUSH
4884: LD_INT 1
4886: DOUBLE
4887: EQUAL
4888: IFTRUE 4892
4890: GO 4923
4892: POP
// begin macmilan_use_radio := true ;
4893: LD_ADDR_EXP 6
4897: PUSH
4898: LD_INT 1
4900: ST_TO_ADDR
// DialogueOn ;
4901: CALL_OW 6
// Say ( JMM , D4a-JMM-1 ) ;
4905: LD_EXP 15
4909: PPUSH
4910: LD_STRING D4a-JMM-1
4912: PPUSH
4913: CALL_OW 88
// DialogueOff ;
4917: CALL_OW 7
// end ; 2 :
4921: GO 4935
4923: LD_INT 2
4925: DOUBLE
4926: EQUAL
4927: IFTRUE 4931
4929: GO 4934
4931: POP
// ; end ;
4932: GO 4935
4934: POP
// end ;
4935: END
// every 0 0$02 trigger GetDistUnits ( JMM , Cyrus ) < 8 and IsOk ( Cyrus ) do
4936: LD_EXP 15
4940: PPUSH
4941: LD_EXP 17
4945: PPUSH
4946: CALL_OW 296
4950: PUSH
4951: LD_INT 8
4953: LESS
4954: PUSH
4955: LD_EXP 17
4959: PPUSH
4960: CALL_OW 302
4964: AND
4965: IFFALSE 5256
4967: GO 4969
4969: DISABLE
// begin InGameOn ;
4970: CALL_OW 8
// ComMoveXY ( JMM , GetX ( Cyrus ) , GetY ( Cyrus ) ) ;
4974: LD_EXP 15
4978: PPUSH
4979: LD_EXP 17
4983: PPUSH
4984: CALL_OW 250
4988: PPUSH
4989: LD_EXP 17
4993: PPUSH
4994: CALL_OW 251
4998: PPUSH
4999: CALL_OW 111
// if IsOk ( Bobby ) and bobby_in_squad then
5003: LD_EXP 16
5007: PPUSH
5008: CALL_OW 302
5012: PUSH
5013: LD_EXP 4
5017: AND
5018: IFFALSE 5049
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
5020: LD_EXP 16
5024: PPUSH
5025: LD_EXP 15
5029: PPUSH
5030: CALL_OW 250
5034: PPUSH
5035: LD_EXP 15
5039: PPUSH
5040: CALL_OW 251
5044: PPUSH
5045: CALL_OW 111
// Say ( JMM , D5-JMM-1 ) ;
5049: LD_EXP 15
5053: PPUSH
5054: LD_STRING D5-JMM-1
5056: PPUSH
5057: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
5061: LD_INT 10
5063: PPUSH
5064: CALL_OW 67
// ComTurnUnit ( JMM , Cyrus ) ;
5068: LD_EXP 15
5072: PPUSH
5073: LD_EXP 17
5077: PPUSH
5078: CALL_OW 119
// ComWalk ( Cyrus ) ;
5082: LD_EXP 17
5086: PPUSH
5087: CALL_OW 138
// ComTurnUnit ( Cyrus , JMM ) ;
5091: LD_EXP 17
5095: PPUSH
5096: LD_EXP 15
5100: PPUSH
5101: CALL_OW 119
// Say ( Cyrus , D5-Cyrus-1 ) ;
5105: LD_EXP 17
5109: PPUSH
5110: LD_STRING D5-Cyrus-1
5112: PPUSH
5113: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5117: LD_EXP 16
5121: PPUSH
5122: CALL_OW 302
5126: PUSH
5127: LD_EXP 4
5131: AND
5132: IFFALSE 5172
// begin ComTurnUnit ( Bobby , Cyrus ) ;
5134: LD_EXP 16
5138: PPUSH
5139: LD_EXP 17
5143: PPUSH
5144: CALL_OW 119
// Say ( Bobby , D5-Bobby-1 ) ;
5148: LD_EXP 16
5152: PPUSH
5153: LD_STRING D5-Bobby-1
5155: PPUSH
5156: CALL_OW 88
// Say ( JMM , D5-JMM-2 ) ;
5160: LD_EXP 15
5164: PPUSH
5165: LD_STRING D5-JMM-2
5167: PPUSH
5168: CALL_OW 88
// end ; InGameOff ;
5172: CALL_OW 9
// cyrus_in_squad := true ;
5176: LD_ADDR_EXP 7
5180: PUSH
5181: LD_INT 1
5183: ST_TO_ADDR
// SetSide ( Cyrus , 1 ) ;
5184: LD_EXP 17
5188: PPUSH
5189: LD_INT 1
5191: PPUSH
5192: CALL_OW 235
// if powell_contact and not bobby_in_squad then
5196: LD_EXP 5
5200: PUSH
5201: LD_EXP 4
5205: NOT
5206: AND
5207: IFFALSE 5216
// ChangeMissionObjectives ( M2b ) ;
5209: LD_STRING M2b
5211: PPUSH
5212: CALL_OW 337
// if not bobby_in_squad and GetSide ( Bobby ) = 4 and IsOk ( Bobby ) then
5216: LD_EXP 4
5220: NOT
5221: PUSH
5222: LD_EXP 16
5226: PPUSH
5227: CALL_OW 255
5231: PUSH
5232: LD_INT 4
5234: EQUAL
5235: AND
5236: PUSH
5237: LD_EXP 16
5241: PPUSH
5242: CALL_OW 302
5246: AND
5247: IFFALSE 5256
// SetAchievement ( ACH_CYRUS ) ;
5249: LD_STRING ACH_CYRUS
5251: PPUSH
5252: CALL_OW 543
// end ;
5256: END
// every 0 0$01 trigger bobby_in_squad and cyrus_in_squad do
5257: LD_EXP 4
5261: PUSH
5262: LD_EXP 7
5266: AND
5267: IFFALSE 5279
5269: GO 5271
5271: DISABLE
// ChangeMissionObjectives ( M2c ) ;
5272: LD_STRING M2c
5274: PPUSH
5275: CALL_OW 337
5279: END
// every 0 0$01 trigger IsInArea ( JMM , trap ) do
5280: LD_EXP 15
5284: PPUSH
5285: LD_INT 8
5287: PPUSH
5288: CALL_OW 308
5292: IFFALSE 5344
5294: GO 5296
5296: DISABLE
// begin macmilan_in_trap := true ;
5297: LD_ADDR_EXP 9
5301: PUSH
5302: LD_INT 1
5304: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
5305: LD_INT 35
5307: PPUSH
5308: CALL_OW 67
// DialogueOn ;
5312: CALL_OW 6
// Say ( Pokryshkin , D5-Pok-1 ) ;
5316: LD_EXP 25
5320: PPUSH
5321: LD_STRING D5-Pok-1
5323: PPUSH
5324: CALL_OW 88
// DialogueOff ;
5328: CALL_OW 7
// Say ( JMM , D4b-JMM-1 ) ;
5332: LD_EXP 15
5336: PPUSH
5337: LD_STRING D4b-JMM-1
5339: PPUSH
5340: CALL_OW 88
// end ;
5344: END
// every 0 0$01 trigger GetDistUnits ( JMM , russian_meta_guards [ russian_meta_guards ] ) < 12 or UnitFilter ( russian_meta_guards , [ f_not , [ f_lives , 990 ] ] ) do var i , hp ;
5345: LD_EXP 15
5349: PPUSH
5350: LD_EXP 23
5354: PUSH
5355: LD_EXP 23
5359: ARRAY
5360: PPUSH
5361: CALL_OW 296
5365: PUSH
5366: LD_INT 12
5368: LESS
5369: PUSH
5370: LD_EXP 23
5374: PPUSH
5375: LD_INT 3
5377: PUSH
5378: LD_INT 24
5380: PUSH
5381: LD_INT 990
5383: PUSH
5384: EMPTY
5385: LIST
5386: LIST
5387: PUSH
5388: EMPTY
5389: LIST
5390: LIST
5391: PPUSH
5392: CALL_OW 72
5396: OR
5397: IFFALSE 5627
5399: GO 5401
5401: DISABLE
5402: LD_INT 0
5404: PPUSH
5405: PPUSH
// begin hp := [ 300 , 250 , 200 ] [ Difficulty ] ;
5406: LD_ADDR_VAR 0 2
5410: PUSH
5411: LD_INT 300
5413: PUSH
5414: LD_INT 250
5416: PUSH
5417: LD_INT 200
5419: PUSH
5420: EMPTY
5421: LIST
5422: LIST
5423: LIST
5424: PUSH
5425: LD_OWVAR 67
5429: ARRAY
5430: ST_TO_ADDR
// for i in russian_meta_guards do
5431: LD_ADDR_VAR 0 1
5435: PUSH
5436: LD_EXP 23
5440: PUSH
5441: FOR_IN
5442: IFFALSE 5482
// if IsOk ( i ) then
5444: LD_VAR 0 1
5448: PPUSH
5449: CALL_OW 302
5453: IFFALSE 5480
// SetLives ( i , GetLives ( i ) - hp ) ;
5455: LD_VAR 0 1
5459: PPUSH
5460: LD_VAR 0 1
5464: PPUSH
5465: CALL_OW 256
5469: PUSH
5470: LD_VAR 0 2
5474: MINUS
5475: PPUSH
5476: CALL_OW 234
5480: GO 5441
5482: POP
5483: POP
// DialogueOn ;
5484: CALL_OW 6
// Say ( russian_meta_guards [ russian_meta_guards ] , D6-FRus1-1 ) ;
5488: LD_EXP 23
5492: PUSH
5493: LD_EXP 23
5497: ARRAY
5498: PPUSH
5499: LD_STRING D6-FRus1-1
5501: PPUSH
5502: CALL_OW 88
// Say ( JMM , D6-JMM-1 ) ;
5506: LD_EXP 15
5510: PPUSH
5511: LD_STRING D6-JMM-1
5513: PPUSH
5514: CALL_OW 88
// if IsOk ( Cyrus ) and cyrus_in_squad then
5518: LD_EXP 17
5522: PPUSH
5523: CALL_OW 302
5527: PUSH
5528: LD_EXP 7
5532: AND
5533: IFFALSE 5547
// Say ( Cyrus , D6-Cyrus-1 ) ;
5535: LD_EXP 17
5539: PPUSH
5540: LD_STRING D6-Cyrus-1
5542: PPUSH
5543: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5547: LD_EXP 16
5551: PPUSH
5552: CALL_OW 302
5556: PUSH
5557: LD_EXP 4
5561: AND
5562: IFFALSE 5576
// Say ( Bobby , D6-Bobby-1 ) ;
5564: LD_EXP 16
5568: PPUSH
5569: LD_STRING D6-Bobby-1
5571: PPUSH
5572: CALL_OW 88
// DialogueOff ;
5576: CALL_OW 7
// Wait ( [ 0 0$04 , 0 0$03 , 0 0$02 ] [ Difficulty ] ) ;
5580: LD_INT 140
5582: PUSH
5583: LD_INT 105
5585: PUSH
5586: LD_INT 70
5588: PUSH
5589: EMPTY
5590: LIST
5591: LIST
5592: LIST
5593: PUSH
5594: LD_OWVAR 67
5598: ARRAY
5599: PPUSH
5600: CALL_OW 67
// meta_action := true ;
5604: LD_ADDR_EXP 10
5608: PUSH
5609: LD_INT 1
5611: ST_TO_ADDR
// ComAgressiveMove ( russian_meta_guards , 94 , 8 ) ;
5612: LD_EXP 23
5616: PPUSH
5617: LD_INT 94
5619: PPUSH
5620: LD_INT 8
5622: PPUSH
5623: CALL_OW 114
// end ;
5627: PPOPN 2
5629: END
// every 0 0$01 trigger GetDistUnitXY ( JMM , 93 , 1 ) < 5 and FilterAllUnits ( [ f_side , 1 ] ) > 1 do
5630: LD_EXP 15
5634: PPUSH
5635: LD_INT 93
5637: PPUSH
5638: LD_INT 1
5640: PPUSH
5641: CALL_OW 297
5645: PUSH
5646: LD_INT 5
5648: LESS
5649: PUSH
5650: LD_INT 22
5652: PUSH
5653: LD_INT 1
5655: PUSH
5656: EMPTY
5657: LIST
5658: LIST
5659: PPUSH
5660: CALL_OW 69
5664: PUSH
5665: LD_INT 1
5667: GREATER
5668: AND
5669: IFFALSE 5686
5671: GO 5673
5673: DISABLE
// Say ( JMM , D6a-JMM-1 ) ;
5674: LD_EXP 15
5678: PPUSH
5679: LD_STRING D6a-JMM-1
5681: PPUSH
5682: CALL_OW 88
5686: END
// on UnitGoesToRed ( un ) do begin if un = JMM then
5687: LD_VAR 0 1
5691: PUSH
5692: LD_EXP 15
5696: EQUAL
5697: IFFALSE 5706
// YouLost ( JMM ) ;
5699: LD_STRING JMM
5701: PPUSH
5702: CALL_OW 104
// end ;
5706: PPOPN 1
5708: END
// on UnitDestroyed ( un ) do begin if un = JMM then
5709: LD_VAR 0 1
5713: PUSH
5714: LD_EXP 15
5718: EQUAL
5719: IFFALSE 5728
// YouLost ( JMM ) ;
5721: LD_STRING JMM
5723: PPUSH
5724: CALL_OW 104
// end ;
5728: PPOPN 1
5730: END
// every 0 0$01 trigger IsInArea ( Bobby , exitArea ) do
5731: LD_EXP 16
5735: PPUSH
5736: LD_INT 10
5738: PPUSH
5739: CALL_OW 308
5743: IFFALSE 5792
5745: GO 5747
5747: DISABLE
// begin bobby_saved := true ;
5748: LD_ADDR_EXP 12
5752: PUSH
5753: LD_INT 1
5755: ST_TO_ADDR
// SaveVariable ( GetLives ( Bobby ) , 01_BobbyLifePoints_1 ) ;
5756: LD_EXP 16
5760: PPUSH
5761: CALL_OW 256
5765: PPUSH
5766: LD_STRING 01_BobbyLifePoints_1
5768: PPUSH
5769: CALL_OW 39
// RemoveUnit ( Bobby ) ;
5773: LD_EXP 16
5777: PPUSH
5778: CALL_OW 64
// AddMedal ( Bobby , 1 ) ;
5782: LD_STRING Bobby
5784: PPUSH
5785: LD_INT 1
5787: PPUSH
5788: CALL_OW 101
// end ;
5792: END
// every 0 0$01 trigger IsInArea ( Cyrus , exitArea ) do
5793: LD_EXP 17
5797: PPUSH
5798: LD_INT 10
5800: PPUSH
5801: CALL_OW 308
5805: IFFALSE 5854
5807: GO 5809
5809: DISABLE
// begin cyrus_saved := true ;
5810: LD_ADDR_EXP 13
5814: PUSH
5815: LD_INT 1
5817: ST_TO_ADDR
// SaveVariable ( GetLives ( Cyrus ) , 01_CyrusLifePoints_1 ) ;
5818: LD_EXP 17
5822: PPUSH
5823: CALL_OW 256
5827: PPUSH
5828: LD_STRING 01_CyrusLifePoints_1
5830: PPUSH
5831: CALL_OW 39
// RemoveUnit ( Cyrus ) ;
5835: LD_EXP 17
5839: PPUSH
5840: CALL_OW 64
// AddMedal ( Cyrus , 1 ) ;
5844: LD_STRING Cyrus
5846: PPUSH
5847: LD_INT 1
5849: PPUSH
5850: CALL_OW 101
// end ;
5854: END
// every 0 0$01 trigger IsInArea ( JMM , exitArea ) do var i , to_reward , wait_for_them , m1 , m2 , m3 ;
5855: LD_EXP 15
5859: PPUSH
5860: LD_INT 10
5862: PPUSH
5863: CALL_OW 308
5867: IFFALSE 6475
5869: GO 5871
5871: DISABLE
5872: LD_INT 0
5874: PPUSH
5875: PPUSH
5876: PPUSH
5877: PPUSH
5878: PPUSH
5879: PPUSH
// begin if macmilan_use_radio then
5880: LD_EXP 6
5884: IFFALSE 5893
// SetAchievement ( ACH_RADIO ) ;
5886: LD_STRING ACH_RADIO
5888: PPUSH
5889: CALL_OW 543
// if ( not cyrus_saved and cyrus_in_squad and IsOk ( Cyrus ) ) or ( not bobby_saved and bobby_in_squad and IsOk ( Bobby ) ) then
5893: LD_EXP 13
5897: NOT
5898: PUSH
5899: LD_EXP 7
5903: AND
5904: PUSH
5905: LD_EXP 17
5909: PPUSH
5910: CALL_OW 302
5914: AND
5915: PUSH
5916: LD_EXP 12
5920: NOT
5921: PUSH
5922: LD_EXP 4
5926: AND
5927: PUSH
5928: LD_EXP 16
5932: PPUSH
5933: CALL_OW 302
5937: AND
5938: OR
5939: IFFALSE 5980
// case Query ( Q2 ) of 1 :
5941: LD_STRING Q2
5943: PPUSH
5944: CALL_OW 97
5948: PUSH
5949: LD_INT 1
5951: DOUBLE
5952: EQUAL
5953: IFTRUE 5957
5955: GO 5968
5957: POP
// wait_for_them := true ; 2 :
5958: LD_ADDR_VAR 0 3
5962: PUSH
5963: LD_INT 1
5965: ST_TO_ADDR
5966: GO 5980
5968: LD_INT 2
5970: DOUBLE
5971: EQUAL
5972: IFTRUE 5976
5974: GO 5979
5976: POP
// ; end ;
5977: GO 5980
5979: POP
// if wait_for_them then
5980: LD_VAR 0 3
5984: IFFALSE 6097
// repeat wait ( 0 0$01 ) ;
5986: LD_INT 35
5988: PPUSH
5989: CALL_OW 67
// until ( cyrus_saved and bobby_saved ) or ( cyrus_saved and ( not bobby_in_squad or IsDying ( Bobby ) or IsDead ( Bobby ) ) ) or ( bobby_saved and ( not cyrus_in_squad or IsDying ( Cyrus ) or IsDead ( Cyrus ) ) ) or ( IsDead ( Bobby ) and IsDead ( Cyrus ) ) ;
5993: LD_EXP 13
5997: PUSH
5998: LD_EXP 12
6002: AND
6003: PUSH
6004: LD_EXP 13
6008: PUSH
6009: LD_EXP 4
6013: NOT
6014: PUSH
6015: LD_EXP 16
6019: PPUSH
6020: CALL_OW 303
6024: OR
6025: PUSH
6026: LD_EXP 16
6030: PPUSH
6031: CALL_OW 301
6035: OR
6036: AND
6037: OR
6038: PUSH
6039: LD_EXP 12
6043: PUSH
6044: LD_EXP 7
6048: NOT
6049: PUSH
6050: LD_EXP 17
6054: PPUSH
6055: CALL_OW 303
6059: OR
6060: PUSH
6061: LD_EXP 17
6065: PPUSH
6066: CALL_OW 301
6070: OR
6071: AND
6072: OR
6073: PUSH
6074: LD_EXP 16
6078: PPUSH
6079: CALL_OW 301
6083: PUSH
6084: LD_EXP 17
6088: PPUSH
6089: CALL_OW 301
6093: AND
6094: OR
6095: IFFALSE 5986
// SaveVariable ( GetLives ( JMM ) , 01_JMMLifePoints_1 ) ;
6097: LD_EXP 15
6101: PPUSH
6102: CALL_OW 256
6106: PPUSH
6107: LD_STRING 01_JMMLifePoints_1
6109: PPUSH
6110: CALL_OW 39
// RemoveUnit ( JMM ) ;
6114: LD_EXP 15
6118: PPUSH
6119: CALL_OW 64
// to_reward := [ JMM ] ;
6123: LD_ADDR_VAR 0 2
6127: PUSH
6128: LD_EXP 15
6132: PUSH
6133: EMPTY
6134: LIST
6135: ST_TO_ADDR
// if bobby_saved then
6136: LD_EXP 12
6140: IFFALSE 6158
// to_reward := to_reward ^ Bobby ;
6142: LD_ADDR_VAR 0 2
6146: PUSH
6147: LD_VAR 0 2
6151: PUSH
6152: LD_EXP 16
6156: ADD
6157: ST_TO_ADDR
// if cyrus_saved then
6158: LD_EXP 13
6162: IFFALSE 6180
// to_reward := to_reward ^ Cyrus ;
6164: LD_ADDR_VAR 0 2
6168: PUSH
6169: LD_VAR 0 2
6173: PUSH
6174: LD_EXP 17
6178: ADD
6179: ST_TO_ADDR
// m1 := true ;
6180: LD_ADDR_VAR 0 4
6184: PUSH
6185: LD_INT 1
6187: ST_TO_ADDR
// m2 := bobby_saved ;
6188: LD_ADDR_VAR 0 5
6192: PUSH
6193: LD_EXP 12
6197: ST_TO_ADDR
// m3 := cyrus_saved ;
6198: LD_ADDR_VAR 0 6
6202: PUSH
6203: LD_EXP 13
6207: ST_TO_ADDR
// AddMedal ( JMM , 1 ) ;
6208: LD_STRING JMM
6210: PPUSH
6211: LD_INT 1
6213: PPUSH
6214: CALL_OW 101
// if not bobby_in_squad then
6218: LD_EXP 4
6222: NOT
6223: IFFALSE 6236
// AddMedal ( Bobby , - 1 ) ;
6225: LD_STRING Bobby
6227: PPUSH
6228: LD_INT 1
6230: NEG
6231: PPUSH
6232: CALL_OW 101
// if not bobby_saved and ( IsDying ( Bobby ) or IsDead ( Bobby ) ) then
6236: LD_EXP 12
6240: NOT
6241: PUSH
6242: LD_EXP 16
6246: PPUSH
6247: CALL_OW 303
6251: PUSH
6252: LD_EXP 16
6256: PPUSH
6257: CALL_OW 301
6261: OR
6262: AND
6263: IFFALSE 6276
// AddMedal ( Bobby , - 2 ) ;
6265: LD_STRING Bobby
6267: PPUSH
6268: LD_INT 2
6270: NEG
6271: PPUSH
6272: CALL_OW 101
// if not cyrus_in_squad then
6276: LD_EXP 7
6280: NOT
6281: IFFALSE 6294
// AddMedal ( Cyrus , - 1 ) ;
6283: LD_STRING Cyrus
6285: PPUSH
6286: LD_INT 1
6288: NEG
6289: PPUSH
6290: CALL_OW 101
// if not cyrus_saved and ( IsDying ( Cyrus ) or IsDead ( Cyrus ) ) then
6294: LD_EXP 13
6298: NOT
6299: PUSH
6300: LD_EXP 17
6304: PPUSH
6305: CALL_OW 303
6309: PUSH
6310: LD_EXP 17
6314: PPUSH
6315: CALL_OW 301
6319: OR
6320: AND
6321: IFFALSE 6334
// AddMedal ( Cyrus , - 2 ) ;
6323: LD_STRING Cyrus
6325: PPUSH
6326: LD_INT 2
6328: NEG
6329: PPUSH
6330: CALL_OW 101
// if Difficulty = 3 and m1 and m2 and m3 then
6334: LD_OWVAR 67
6338: PUSH
6339: LD_INT 3
6341: EQUAL
6342: PUSH
6343: LD_VAR 0 4
6347: AND
6348: PUSH
6349: LD_VAR 0 5
6353: AND
6354: PUSH
6355: LD_VAR 0 6
6359: AND
6360: IFFALSE 6372
// SetAchievementEX ( ACH_AMER , 1 ) ;
6362: LD_STRING ACH_AMER
6364: PPUSH
6365: LD_INT 1
6367: PPUSH
6368: CALL_OW 564
// GiveMedals ( MAIN ) ;
6372: LD_STRING MAIN
6374: PPUSH
6375: CALL_OW 102
// RewardPeople ( to_reward ) ;
6379: LD_VAR 0 2
6383: PPUSH
6384: CALL_OW 43
// if bobby_saved then
6388: LD_EXP 12
6392: IFFALSE 6412
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
6394: LD_EXP 16
6398: PPUSH
6399: LD_EXP 2
6403: PUSH
6404: LD_STRING Bobby
6406: STR
6407: PPUSH
6408: CALL_OW 38
// if cyrus_saved then
6412: LD_EXP 13
6416: IFFALSE 6436
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
6418: LD_EXP 17
6422: PPUSH
6423: LD_EXP 2
6427: PUSH
6428: LD_STRING Cyrus
6430: STR
6431: PPUSH
6432: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
6436: LD_EXP 15
6440: PPUSH
6441: LD_EXP 2
6445: PUSH
6446: LD_STRING JMM
6448: STR
6449: PPUSH
6450: CALL_OW 38
// if tick <= 3 3$00 then
6454: LD_OWVAR 1
6458: PUSH
6459: LD_INT 6300
6461: LESSEQUAL
6462: IFFALSE 6471
// SetAchievement ( ACH_ASPEED_1 ) ;
6464: LD_STRING ACH_ASPEED_1
6466: PPUSH
6467: CALL_OW 543
// YouWin ;
6471: CALL_OW 103
// end ; end_of_file end_of_file
6475: PPOPN 6
6477: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
6478: GO 6480
6480: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
6481: LD_STRING initStreamRollete();
6483: PPUSH
6484: CALL_OW 559
// InitStreamMode ;
6488: CALL 6497 0 0
// DefineStreamItems ( ) ;
6492: CALL 6937 0 0
// end ;
6496: END
// function InitStreamMode ; begin
6497: LD_INT 0
6499: PPUSH
// streamModeActive := false ;
6500: LD_ADDR_EXP 26
6504: PUSH
6505: LD_INT 0
6507: ST_TO_ADDR
// normalCounter := 36 ;
6508: LD_ADDR_EXP 27
6512: PUSH
6513: LD_INT 36
6515: ST_TO_ADDR
// hardcoreCounter := 16 ;
6516: LD_ADDR_EXP 28
6520: PUSH
6521: LD_INT 16
6523: ST_TO_ADDR
// sRocket := false ;
6524: LD_ADDR_EXP 31
6528: PUSH
6529: LD_INT 0
6531: ST_TO_ADDR
// sSpeed := false ;
6532: LD_ADDR_EXP 30
6536: PUSH
6537: LD_INT 0
6539: ST_TO_ADDR
// sEngine := false ;
6540: LD_ADDR_EXP 32
6544: PUSH
6545: LD_INT 0
6547: ST_TO_ADDR
// sSpec := false ;
6548: LD_ADDR_EXP 29
6552: PUSH
6553: LD_INT 0
6555: ST_TO_ADDR
// sLevel := false ;
6556: LD_ADDR_EXP 33
6560: PUSH
6561: LD_INT 0
6563: ST_TO_ADDR
// sArmoury := false ;
6564: LD_ADDR_EXP 34
6568: PUSH
6569: LD_INT 0
6571: ST_TO_ADDR
// sRadar := false ;
6572: LD_ADDR_EXP 35
6576: PUSH
6577: LD_INT 0
6579: ST_TO_ADDR
// sBunker := false ;
6580: LD_ADDR_EXP 36
6584: PUSH
6585: LD_INT 0
6587: ST_TO_ADDR
// sHack := false ;
6588: LD_ADDR_EXP 37
6592: PUSH
6593: LD_INT 0
6595: ST_TO_ADDR
// sFire := false ;
6596: LD_ADDR_EXP 38
6600: PUSH
6601: LD_INT 0
6603: ST_TO_ADDR
// sRefresh := false ;
6604: LD_ADDR_EXP 39
6608: PUSH
6609: LD_INT 0
6611: ST_TO_ADDR
// sExp := false ;
6612: LD_ADDR_EXP 40
6616: PUSH
6617: LD_INT 0
6619: ST_TO_ADDR
// sDepot := false ;
6620: LD_ADDR_EXP 41
6624: PUSH
6625: LD_INT 0
6627: ST_TO_ADDR
// sFlag := false ;
6628: LD_ADDR_EXP 42
6632: PUSH
6633: LD_INT 0
6635: ST_TO_ADDR
// sKamikadze := false ;
6636: LD_ADDR_EXP 50
6640: PUSH
6641: LD_INT 0
6643: ST_TO_ADDR
// sTroll := false ;
6644: LD_ADDR_EXP 51
6648: PUSH
6649: LD_INT 0
6651: ST_TO_ADDR
// sSlow := false ;
6652: LD_ADDR_EXP 52
6656: PUSH
6657: LD_INT 0
6659: ST_TO_ADDR
// sLack := false ;
6660: LD_ADDR_EXP 53
6664: PUSH
6665: LD_INT 0
6667: ST_TO_ADDR
// sTank := false ;
6668: LD_ADDR_EXP 55
6672: PUSH
6673: LD_INT 0
6675: ST_TO_ADDR
// sRemote := false ;
6676: LD_ADDR_EXP 56
6680: PUSH
6681: LD_INT 0
6683: ST_TO_ADDR
// sPowell := false ;
6684: LD_ADDR_EXP 57
6688: PUSH
6689: LD_INT 0
6691: ST_TO_ADDR
// sTeleport := false ;
6692: LD_ADDR_EXP 60
6696: PUSH
6697: LD_INT 0
6699: ST_TO_ADDR
// sOilTower := false ;
6700: LD_ADDR_EXP 62
6704: PUSH
6705: LD_INT 0
6707: ST_TO_ADDR
// sShovel := false ;
6708: LD_ADDR_EXP 63
6712: PUSH
6713: LD_INT 0
6715: ST_TO_ADDR
// sSheik := false ;
6716: LD_ADDR_EXP 64
6720: PUSH
6721: LD_INT 0
6723: ST_TO_ADDR
// sEarthquake := false ;
6724: LD_ADDR_EXP 66
6728: PUSH
6729: LD_INT 0
6731: ST_TO_ADDR
// sAI := false ;
6732: LD_ADDR_EXP 67
6736: PUSH
6737: LD_INT 0
6739: ST_TO_ADDR
// sCargo := false ;
6740: LD_ADDR_EXP 70
6744: PUSH
6745: LD_INT 0
6747: ST_TO_ADDR
// sDLaser := false ;
6748: LD_ADDR_EXP 71
6752: PUSH
6753: LD_INT 0
6755: ST_TO_ADDR
// sExchange := false ;
6756: LD_ADDR_EXP 72
6760: PUSH
6761: LD_INT 0
6763: ST_TO_ADDR
// sFac := false ;
6764: LD_ADDR_EXP 73
6768: PUSH
6769: LD_INT 0
6771: ST_TO_ADDR
// sPower := false ;
6772: LD_ADDR_EXP 74
6776: PUSH
6777: LD_INT 0
6779: ST_TO_ADDR
// sRandom := false ;
6780: LD_ADDR_EXP 75
6784: PUSH
6785: LD_INT 0
6787: ST_TO_ADDR
// sShield := false ;
6788: LD_ADDR_EXP 76
6792: PUSH
6793: LD_INT 0
6795: ST_TO_ADDR
// sTime := false ;
6796: LD_ADDR_EXP 77
6800: PUSH
6801: LD_INT 0
6803: ST_TO_ADDR
// sTools := false ;
6804: LD_ADDR_EXP 78
6808: PUSH
6809: LD_INT 0
6811: ST_TO_ADDR
// sSold := false ;
6812: LD_ADDR_EXP 43
6816: PUSH
6817: LD_INT 0
6819: ST_TO_ADDR
// sDiff := false ;
6820: LD_ADDR_EXP 44
6824: PUSH
6825: LD_INT 0
6827: ST_TO_ADDR
// sFog := false ;
6828: LD_ADDR_EXP 47
6832: PUSH
6833: LD_INT 0
6835: ST_TO_ADDR
// sReset := false ;
6836: LD_ADDR_EXP 48
6840: PUSH
6841: LD_INT 0
6843: ST_TO_ADDR
// sSun := false ;
6844: LD_ADDR_EXP 49
6848: PUSH
6849: LD_INT 0
6851: ST_TO_ADDR
// sTiger := false ;
6852: LD_ADDR_EXP 45
6856: PUSH
6857: LD_INT 0
6859: ST_TO_ADDR
// sBomb := false ;
6860: LD_ADDR_EXP 46
6864: PUSH
6865: LD_INT 0
6867: ST_TO_ADDR
// sWound := false ;
6868: LD_ADDR_EXP 54
6872: PUSH
6873: LD_INT 0
6875: ST_TO_ADDR
// sBetray := false ;
6876: LD_ADDR_EXP 58
6880: PUSH
6881: LD_INT 0
6883: ST_TO_ADDR
// sContamin := false ;
6884: LD_ADDR_EXP 59
6888: PUSH
6889: LD_INT 0
6891: ST_TO_ADDR
// sOil := false ;
6892: LD_ADDR_EXP 61
6896: PUSH
6897: LD_INT 0
6899: ST_TO_ADDR
// sStu := false ;
6900: LD_ADDR_EXP 65
6904: PUSH
6905: LD_INT 0
6907: ST_TO_ADDR
// sBazooka := false ;
6908: LD_ADDR_EXP 68
6912: PUSH
6913: LD_INT 0
6915: ST_TO_ADDR
// sMortar := false ;
6916: LD_ADDR_EXP 69
6920: PUSH
6921: LD_INT 0
6923: ST_TO_ADDR
// sRanger := false ;
6924: LD_ADDR_EXP 79
6928: PUSH
6929: LD_INT 0
6931: ST_TO_ADDR
// end ;
6932: LD_VAR 0 1
6936: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
6937: LD_INT 0
6939: PPUSH
6940: PPUSH
6941: PPUSH
6942: PPUSH
6943: PPUSH
// result := [ ] ;
6944: LD_ADDR_VAR 0 1
6948: PUSH
6949: EMPTY
6950: ST_TO_ADDR
// if campaign_id = 1 then
6951: LD_OWVAR 69
6955: PUSH
6956: LD_INT 1
6958: EQUAL
6959: IFFALSE 9897
// begin case mission_number of 1 :
6961: LD_OWVAR 70
6965: PUSH
6966: LD_INT 1
6968: DOUBLE
6969: EQUAL
6970: IFTRUE 6974
6972: GO 7038
6974: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
6975: LD_ADDR_VAR 0 1
6979: PUSH
6980: LD_INT 2
6982: PUSH
6983: LD_INT 4
6985: PUSH
6986: LD_INT 11
6988: PUSH
6989: LD_INT 12
6991: PUSH
6992: LD_INT 15
6994: PUSH
6995: LD_INT 16
6997: PUSH
6998: LD_INT 22
7000: PUSH
7001: LD_INT 23
7003: PUSH
7004: LD_INT 26
7006: PUSH
7007: EMPTY
7008: LIST
7009: LIST
7010: LIST
7011: LIST
7012: LIST
7013: LIST
7014: LIST
7015: LIST
7016: LIST
7017: PUSH
7018: LD_INT 101
7020: PUSH
7021: LD_INT 102
7023: PUSH
7024: LD_INT 106
7026: PUSH
7027: EMPTY
7028: LIST
7029: LIST
7030: LIST
7031: PUSH
7032: EMPTY
7033: LIST
7034: LIST
7035: ST_TO_ADDR
7036: GO 9895
7038: LD_INT 2
7040: DOUBLE
7041: EQUAL
7042: IFTRUE 7046
7044: GO 7118
7046: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
7047: LD_ADDR_VAR 0 1
7051: PUSH
7052: LD_INT 2
7054: PUSH
7055: LD_INT 4
7057: PUSH
7058: LD_INT 11
7060: PUSH
7061: LD_INT 12
7063: PUSH
7064: LD_INT 15
7066: PUSH
7067: LD_INT 16
7069: PUSH
7070: LD_INT 22
7072: PUSH
7073: LD_INT 23
7075: PUSH
7076: LD_INT 26
7078: PUSH
7079: EMPTY
7080: LIST
7081: LIST
7082: LIST
7083: LIST
7084: LIST
7085: LIST
7086: LIST
7087: LIST
7088: LIST
7089: PUSH
7090: LD_INT 101
7092: PUSH
7093: LD_INT 102
7095: PUSH
7096: LD_INT 105
7098: PUSH
7099: LD_INT 106
7101: PUSH
7102: LD_INT 108
7104: PUSH
7105: EMPTY
7106: LIST
7107: LIST
7108: LIST
7109: LIST
7110: LIST
7111: PUSH
7112: EMPTY
7113: LIST
7114: LIST
7115: ST_TO_ADDR
7116: GO 9895
7118: LD_INT 3
7120: DOUBLE
7121: EQUAL
7122: IFTRUE 7126
7124: GO 7202
7126: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
7127: LD_ADDR_VAR 0 1
7131: PUSH
7132: LD_INT 2
7134: PUSH
7135: LD_INT 4
7137: PUSH
7138: LD_INT 5
7140: PUSH
7141: LD_INT 11
7143: PUSH
7144: LD_INT 12
7146: PUSH
7147: LD_INT 15
7149: PUSH
7150: LD_INT 16
7152: PUSH
7153: LD_INT 22
7155: PUSH
7156: LD_INT 26
7158: PUSH
7159: LD_INT 36
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: LIST
7166: LIST
7167: LIST
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: LIST
7173: PUSH
7174: LD_INT 101
7176: PUSH
7177: LD_INT 102
7179: PUSH
7180: LD_INT 105
7182: PUSH
7183: LD_INT 106
7185: PUSH
7186: LD_INT 108
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: LIST
7193: LIST
7194: LIST
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: ST_TO_ADDR
7200: GO 9895
7202: LD_INT 4
7204: DOUBLE
7205: EQUAL
7206: IFTRUE 7210
7208: GO 7294
7210: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
7211: LD_ADDR_VAR 0 1
7215: PUSH
7216: LD_INT 2
7218: PUSH
7219: LD_INT 4
7221: PUSH
7222: LD_INT 5
7224: PUSH
7225: LD_INT 8
7227: PUSH
7228: LD_INT 11
7230: PUSH
7231: LD_INT 12
7233: PUSH
7234: LD_INT 15
7236: PUSH
7237: LD_INT 16
7239: PUSH
7240: LD_INT 22
7242: PUSH
7243: LD_INT 23
7245: PUSH
7246: LD_INT 26
7248: PUSH
7249: LD_INT 36
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: LIST
7256: LIST
7257: LIST
7258: LIST
7259: LIST
7260: LIST
7261: LIST
7262: LIST
7263: LIST
7264: LIST
7265: PUSH
7266: LD_INT 101
7268: PUSH
7269: LD_INT 102
7271: PUSH
7272: LD_INT 105
7274: PUSH
7275: LD_INT 106
7277: PUSH
7278: LD_INT 108
7280: PUSH
7281: EMPTY
7282: LIST
7283: LIST
7284: LIST
7285: LIST
7286: LIST
7287: PUSH
7288: EMPTY
7289: LIST
7290: LIST
7291: ST_TO_ADDR
7292: GO 9895
7294: LD_INT 5
7296: DOUBLE
7297: EQUAL
7298: IFTRUE 7302
7300: GO 7402
7302: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
7303: LD_ADDR_VAR 0 1
7307: PUSH
7308: LD_INT 2
7310: PUSH
7311: LD_INT 4
7313: PUSH
7314: LD_INT 5
7316: PUSH
7317: LD_INT 6
7319: PUSH
7320: LD_INT 8
7322: PUSH
7323: LD_INT 11
7325: PUSH
7326: LD_INT 12
7328: PUSH
7329: LD_INT 15
7331: PUSH
7332: LD_INT 16
7334: PUSH
7335: LD_INT 22
7337: PUSH
7338: LD_INT 23
7340: PUSH
7341: LD_INT 25
7343: PUSH
7344: LD_INT 26
7346: PUSH
7347: LD_INT 36
7349: PUSH
7350: EMPTY
7351: LIST
7352: LIST
7353: LIST
7354: LIST
7355: LIST
7356: LIST
7357: LIST
7358: LIST
7359: LIST
7360: LIST
7361: LIST
7362: LIST
7363: LIST
7364: LIST
7365: PUSH
7366: LD_INT 101
7368: PUSH
7369: LD_INT 102
7371: PUSH
7372: LD_INT 105
7374: PUSH
7375: LD_INT 106
7377: PUSH
7378: LD_INT 108
7380: PUSH
7381: LD_INT 109
7383: PUSH
7384: LD_INT 112
7386: PUSH
7387: EMPTY
7388: LIST
7389: LIST
7390: LIST
7391: LIST
7392: LIST
7393: LIST
7394: LIST
7395: PUSH
7396: EMPTY
7397: LIST
7398: LIST
7399: ST_TO_ADDR
7400: GO 9895
7402: LD_INT 6
7404: DOUBLE
7405: EQUAL
7406: IFTRUE 7410
7408: GO 7530
7410: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
7411: LD_ADDR_VAR 0 1
7415: PUSH
7416: LD_INT 2
7418: PUSH
7419: LD_INT 4
7421: PUSH
7422: LD_INT 5
7424: PUSH
7425: LD_INT 6
7427: PUSH
7428: LD_INT 8
7430: PUSH
7431: LD_INT 11
7433: PUSH
7434: LD_INT 12
7436: PUSH
7437: LD_INT 15
7439: PUSH
7440: LD_INT 16
7442: PUSH
7443: LD_INT 20
7445: PUSH
7446: LD_INT 21
7448: PUSH
7449: LD_INT 22
7451: PUSH
7452: LD_INT 23
7454: PUSH
7455: LD_INT 25
7457: PUSH
7458: LD_INT 26
7460: PUSH
7461: LD_INT 30
7463: PUSH
7464: LD_INT 31
7466: PUSH
7467: LD_INT 32
7469: PUSH
7470: LD_INT 36
7472: PUSH
7473: EMPTY
7474: LIST
7475: LIST
7476: LIST
7477: LIST
7478: LIST
7479: LIST
7480: LIST
7481: LIST
7482: LIST
7483: LIST
7484: LIST
7485: LIST
7486: LIST
7487: LIST
7488: LIST
7489: LIST
7490: LIST
7491: LIST
7492: LIST
7493: PUSH
7494: LD_INT 101
7496: PUSH
7497: LD_INT 102
7499: PUSH
7500: LD_INT 105
7502: PUSH
7503: LD_INT 106
7505: PUSH
7506: LD_INT 108
7508: PUSH
7509: LD_INT 109
7511: PUSH
7512: LD_INT 112
7514: PUSH
7515: EMPTY
7516: LIST
7517: LIST
7518: LIST
7519: LIST
7520: LIST
7521: LIST
7522: LIST
7523: PUSH
7524: EMPTY
7525: LIST
7526: LIST
7527: ST_TO_ADDR
7528: GO 9895
7530: LD_INT 7
7532: DOUBLE
7533: EQUAL
7534: IFTRUE 7538
7536: GO 7638
7538: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
7539: LD_ADDR_VAR 0 1
7543: PUSH
7544: LD_INT 2
7546: PUSH
7547: LD_INT 4
7549: PUSH
7550: LD_INT 5
7552: PUSH
7553: LD_INT 7
7555: PUSH
7556: LD_INT 11
7558: PUSH
7559: LD_INT 12
7561: PUSH
7562: LD_INT 15
7564: PUSH
7565: LD_INT 16
7567: PUSH
7568: LD_INT 20
7570: PUSH
7571: LD_INT 21
7573: PUSH
7574: LD_INT 22
7576: PUSH
7577: LD_INT 23
7579: PUSH
7580: LD_INT 25
7582: PUSH
7583: LD_INT 26
7585: PUSH
7586: EMPTY
7587: LIST
7588: LIST
7589: LIST
7590: LIST
7591: LIST
7592: LIST
7593: LIST
7594: LIST
7595: LIST
7596: LIST
7597: LIST
7598: LIST
7599: LIST
7600: LIST
7601: PUSH
7602: LD_INT 101
7604: PUSH
7605: LD_INT 102
7607: PUSH
7608: LD_INT 103
7610: PUSH
7611: LD_INT 105
7613: PUSH
7614: LD_INT 106
7616: PUSH
7617: LD_INT 108
7619: PUSH
7620: LD_INT 112
7622: PUSH
7623: EMPTY
7624: LIST
7625: LIST
7626: LIST
7627: LIST
7628: LIST
7629: LIST
7630: LIST
7631: PUSH
7632: EMPTY
7633: LIST
7634: LIST
7635: ST_TO_ADDR
7636: GO 9895
7638: LD_INT 8
7640: DOUBLE
7641: EQUAL
7642: IFTRUE 7646
7644: GO 7774
7646: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
7647: LD_ADDR_VAR 0 1
7651: PUSH
7652: LD_INT 2
7654: PUSH
7655: LD_INT 4
7657: PUSH
7658: LD_INT 5
7660: PUSH
7661: LD_INT 6
7663: PUSH
7664: LD_INT 7
7666: PUSH
7667: LD_INT 8
7669: PUSH
7670: LD_INT 11
7672: PUSH
7673: LD_INT 12
7675: PUSH
7676: LD_INT 15
7678: PUSH
7679: LD_INT 16
7681: PUSH
7682: LD_INT 20
7684: PUSH
7685: LD_INT 21
7687: PUSH
7688: LD_INT 22
7690: PUSH
7691: LD_INT 23
7693: PUSH
7694: LD_INT 25
7696: PUSH
7697: LD_INT 26
7699: PUSH
7700: LD_INT 30
7702: PUSH
7703: LD_INT 31
7705: PUSH
7706: LD_INT 32
7708: PUSH
7709: LD_INT 36
7711: PUSH
7712: EMPTY
7713: LIST
7714: LIST
7715: LIST
7716: LIST
7717: LIST
7718: LIST
7719: LIST
7720: LIST
7721: LIST
7722: LIST
7723: LIST
7724: LIST
7725: LIST
7726: LIST
7727: LIST
7728: LIST
7729: LIST
7730: LIST
7731: LIST
7732: LIST
7733: PUSH
7734: LD_INT 101
7736: PUSH
7737: LD_INT 102
7739: PUSH
7740: LD_INT 103
7742: PUSH
7743: LD_INT 105
7745: PUSH
7746: LD_INT 106
7748: PUSH
7749: LD_INT 108
7751: PUSH
7752: LD_INT 109
7754: PUSH
7755: LD_INT 112
7757: PUSH
7758: EMPTY
7759: LIST
7760: LIST
7761: LIST
7762: LIST
7763: LIST
7764: LIST
7765: LIST
7766: LIST
7767: PUSH
7768: EMPTY
7769: LIST
7770: LIST
7771: ST_TO_ADDR
7772: GO 9895
7774: LD_INT 9
7776: DOUBLE
7777: EQUAL
7778: IFTRUE 7782
7780: GO 7918
7782: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
7783: LD_ADDR_VAR 0 1
7787: PUSH
7788: LD_INT 2
7790: PUSH
7791: LD_INT 4
7793: PUSH
7794: LD_INT 5
7796: PUSH
7797: LD_INT 6
7799: PUSH
7800: LD_INT 7
7802: PUSH
7803: LD_INT 8
7805: PUSH
7806: LD_INT 11
7808: PUSH
7809: LD_INT 12
7811: PUSH
7812: LD_INT 15
7814: PUSH
7815: LD_INT 16
7817: PUSH
7818: LD_INT 20
7820: PUSH
7821: LD_INT 21
7823: PUSH
7824: LD_INT 22
7826: PUSH
7827: LD_INT 23
7829: PUSH
7830: LD_INT 25
7832: PUSH
7833: LD_INT 26
7835: PUSH
7836: LD_INT 28
7838: PUSH
7839: LD_INT 30
7841: PUSH
7842: LD_INT 31
7844: PUSH
7845: LD_INT 32
7847: PUSH
7848: LD_INT 36
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: LIST
7855: LIST
7856: LIST
7857: LIST
7858: LIST
7859: LIST
7860: LIST
7861: LIST
7862: LIST
7863: LIST
7864: LIST
7865: LIST
7866: LIST
7867: LIST
7868: LIST
7869: LIST
7870: LIST
7871: LIST
7872: LIST
7873: PUSH
7874: LD_INT 101
7876: PUSH
7877: LD_INT 102
7879: PUSH
7880: LD_INT 103
7882: PUSH
7883: LD_INT 105
7885: PUSH
7886: LD_INT 106
7888: PUSH
7889: LD_INT 108
7891: PUSH
7892: LD_INT 109
7894: PUSH
7895: LD_INT 112
7897: PUSH
7898: LD_INT 114
7900: PUSH
7901: EMPTY
7902: LIST
7903: LIST
7904: LIST
7905: LIST
7906: LIST
7907: LIST
7908: LIST
7909: LIST
7910: LIST
7911: PUSH
7912: EMPTY
7913: LIST
7914: LIST
7915: ST_TO_ADDR
7916: GO 9895
7918: LD_INT 10
7920: DOUBLE
7921: EQUAL
7922: IFTRUE 7926
7924: GO 8110
7926: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
7927: LD_ADDR_VAR 0 1
7931: PUSH
7932: LD_INT 2
7934: PUSH
7935: LD_INT 4
7937: PUSH
7938: LD_INT 5
7940: PUSH
7941: LD_INT 6
7943: PUSH
7944: LD_INT 7
7946: PUSH
7947: LD_INT 8
7949: PUSH
7950: LD_INT 9
7952: PUSH
7953: LD_INT 10
7955: PUSH
7956: LD_INT 11
7958: PUSH
7959: LD_INT 12
7961: PUSH
7962: LD_INT 13
7964: PUSH
7965: LD_INT 14
7967: PUSH
7968: LD_INT 15
7970: PUSH
7971: LD_INT 16
7973: PUSH
7974: LD_INT 17
7976: PUSH
7977: LD_INT 18
7979: PUSH
7980: LD_INT 19
7982: PUSH
7983: LD_INT 20
7985: PUSH
7986: LD_INT 21
7988: PUSH
7989: LD_INT 22
7991: PUSH
7992: LD_INT 23
7994: PUSH
7995: LD_INT 24
7997: PUSH
7998: LD_INT 25
8000: PUSH
8001: LD_INT 26
8003: PUSH
8004: LD_INT 28
8006: PUSH
8007: LD_INT 30
8009: PUSH
8010: LD_INT 31
8012: PUSH
8013: LD_INT 32
8015: PUSH
8016: LD_INT 36
8018: PUSH
8019: EMPTY
8020: LIST
8021: LIST
8022: LIST
8023: LIST
8024: LIST
8025: LIST
8026: LIST
8027: LIST
8028: LIST
8029: LIST
8030: LIST
8031: LIST
8032: LIST
8033: LIST
8034: LIST
8035: LIST
8036: LIST
8037: LIST
8038: LIST
8039: LIST
8040: LIST
8041: LIST
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: LIST
8047: LIST
8048: LIST
8049: PUSH
8050: LD_INT 101
8052: PUSH
8053: LD_INT 102
8055: PUSH
8056: LD_INT 103
8058: PUSH
8059: LD_INT 104
8061: PUSH
8062: LD_INT 105
8064: PUSH
8065: LD_INT 106
8067: PUSH
8068: LD_INT 107
8070: PUSH
8071: LD_INT 108
8073: PUSH
8074: LD_INT 109
8076: PUSH
8077: LD_INT 110
8079: PUSH
8080: LD_INT 111
8082: PUSH
8083: LD_INT 112
8085: PUSH
8086: LD_INT 114
8088: PUSH
8089: EMPTY
8090: LIST
8091: LIST
8092: LIST
8093: LIST
8094: LIST
8095: LIST
8096: LIST
8097: LIST
8098: LIST
8099: LIST
8100: LIST
8101: LIST
8102: LIST
8103: PUSH
8104: EMPTY
8105: LIST
8106: LIST
8107: ST_TO_ADDR
8108: GO 9895
8110: LD_INT 11
8112: DOUBLE
8113: EQUAL
8114: IFTRUE 8118
8116: GO 8310
8118: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
8119: LD_ADDR_VAR 0 1
8123: PUSH
8124: LD_INT 2
8126: PUSH
8127: LD_INT 3
8129: PUSH
8130: LD_INT 4
8132: PUSH
8133: LD_INT 5
8135: PUSH
8136: LD_INT 6
8138: PUSH
8139: LD_INT 7
8141: PUSH
8142: LD_INT 8
8144: PUSH
8145: LD_INT 9
8147: PUSH
8148: LD_INT 10
8150: PUSH
8151: LD_INT 11
8153: PUSH
8154: LD_INT 12
8156: PUSH
8157: LD_INT 13
8159: PUSH
8160: LD_INT 14
8162: PUSH
8163: LD_INT 15
8165: PUSH
8166: LD_INT 16
8168: PUSH
8169: LD_INT 17
8171: PUSH
8172: LD_INT 18
8174: PUSH
8175: LD_INT 19
8177: PUSH
8178: LD_INT 20
8180: PUSH
8181: LD_INT 21
8183: PUSH
8184: LD_INT 22
8186: PUSH
8187: LD_INT 23
8189: PUSH
8190: LD_INT 24
8192: PUSH
8193: LD_INT 25
8195: PUSH
8196: LD_INT 26
8198: PUSH
8199: LD_INT 28
8201: PUSH
8202: LD_INT 30
8204: PUSH
8205: LD_INT 31
8207: PUSH
8208: LD_INT 32
8210: PUSH
8211: LD_INT 34
8213: PUSH
8214: LD_INT 36
8216: PUSH
8217: EMPTY
8218: LIST
8219: LIST
8220: LIST
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: LIST
8235: LIST
8236: LIST
8237: LIST
8238: LIST
8239: LIST
8240: LIST
8241: LIST
8242: LIST
8243: LIST
8244: LIST
8245: LIST
8246: LIST
8247: LIST
8248: LIST
8249: PUSH
8250: LD_INT 101
8252: PUSH
8253: LD_INT 102
8255: PUSH
8256: LD_INT 103
8258: PUSH
8259: LD_INT 104
8261: PUSH
8262: LD_INT 105
8264: PUSH
8265: LD_INT 106
8267: PUSH
8268: LD_INT 107
8270: PUSH
8271: LD_INT 108
8273: PUSH
8274: LD_INT 109
8276: PUSH
8277: LD_INT 110
8279: PUSH
8280: LD_INT 111
8282: PUSH
8283: LD_INT 112
8285: PUSH
8286: LD_INT 114
8288: PUSH
8289: EMPTY
8290: LIST
8291: LIST
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: PUSH
8304: EMPTY
8305: LIST
8306: LIST
8307: ST_TO_ADDR
8308: GO 9895
8310: LD_INT 12
8312: DOUBLE
8313: EQUAL
8314: IFTRUE 8318
8316: GO 8526
8318: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
8319: LD_ADDR_VAR 0 1
8323: PUSH
8324: LD_INT 1
8326: PUSH
8327: LD_INT 2
8329: PUSH
8330: LD_INT 3
8332: PUSH
8333: LD_INT 4
8335: PUSH
8336: LD_INT 5
8338: PUSH
8339: LD_INT 6
8341: PUSH
8342: LD_INT 7
8344: PUSH
8345: LD_INT 8
8347: PUSH
8348: LD_INT 9
8350: PUSH
8351: LD_INT 10
8353: PUSH
8354: LD_INT 11
8356: PUSH
8357: LD_INT 12
8359: PUSH
8360: LD_INT 13
8362: PUSH
8363: LD_INT 14
8365: PUSH
8366: LD_INT 15
8368: PUSH
8369: LD_INT 16
8371: PUSH
8372: LD_INT 17
8374: PUSH
8375: LD_INT 18
8377: PUSH
8378: LD_INT 19
8380: PUSH
8381: LD_INT 20
8383: PUSH
8384: LD_INT 21
8386: PUSH
8387: LD_INT 22
8389: PUSH
8390: LD_INT 23
8392: PUSH
8393: LD_INT 24
8395: PUSH
8396: LD_INT 25
8398: PUSH
8399: LD_INT 26
8401: PUSH
8402: LD_INT 27
8404: PUSH
8405: LD_INT 28
8407: PUSH
8408: LD_INT 30
8410: PUSH
8411: LD_INT 31
8413: PUSH
8414: LD_INT 32
8416: PUSH
8417: LD_INT 33
8419: PUSH
8420: LD_INT 34
8422: PUSH
8423: LD_INT 36
8425: PUSH
8426: EMPTY
8427: LIST
8428: LIST
8429: LIST
8430: LIST
8431: LIST
8432: LIST
8433: LIST
8434: LIST
8435: LIST
8436: LIST
8437: LIST
8438: LIST
8439: LIST
8440: LIST
8441: LIST
8442: LIST
8443: LIST
8444: LIST
8445: LIST
8446: LIST
8447: LIST
8448: LIST
8449: LIST
8450: LIST
8451: LIST
8452: LIST
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: LIST
8458: LIST
8459: LIST
8460: LIST
8461: PUSH
8462: LD_INT 101
8464: PUSH
8465: LD_INT 102
8467: PUSH
8468: LD_INT 103
8470: PUSH
8471: LD_INT 104
8473: PUSH
8474: LD_INT 105
8476: PUSH
8477: LD_INT 106
8479: PUSH
8480: LD_INT 107
8482: PUSH
8483: LD_INT 108
8485: PUSH
8486: LD_INT 109
8488: PUSH
8489: LD_INT 110
8491: PUSH
8492: LD_INT 111
8494: PUSH
8495: LD_INT 112
8497: PUSH
8498: LD_INT 113
8500: PUSH
8501: LD_INT 114
8503: PUSH
8504: EMPTY
8505: LIST
8506: LIST
8507: LIST
8508: LIST
8509: LIST
8510: LIST
8511: LIST
8512: LIST
8513: LIST
8514: LIST
8515: LIST
8516: LIST
8517: LIST
8518: LIST
8519: PUSH
8520: EMPTY
8521: LIST
8522: LIST
8523: ST_TO_ADDR
8524: GO 9895
8526: LD_INT 13
8528: DOUBLE
8529: EQUAL
8530: IFTRUE 8534
8532: GO 8730
8534: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
8535: LD_ADDR_VAR 0 1
8539: PUSH
8540: LD_INT 1
8542: PUSH
8543: LD_INT 2
8545: PUSH
8546: LD_INT 3
8548: PUSH
8549: LD_INT 4
8551: PUSH
8552: LD_INT 5
8554: PUSH
8555: LD_INT 8
8557: PUSH
8558: LD_INT 9
8560: PUSH
8561: LD_INT 10
8563: PUSH
8564: LD_INT 11
8566: PUSH
8567: LD_INT 12
8569: PUSH
8570: LD_INT 14
8572: PUSH
8573: LD_INT 15
8575: PUSH
8576: LD_INT 16
8578: PUSH
8579: LD_INT 17
8581: PUSH
8582: LD_INT 18
8584: PUSH
8585: LD_INT 19
8587: PUSH
8588: LD_INT 20
8590: PUSH
8591: LD_INT 21
8593: PUSH
8594: LD_INT 22
8596: PUSH
8597: LD_INT 23
8599: PUSH
8600: LD_INT 24
8602: PUSH
8603: LD_INT 25
8605: PUSH
8606: LD_INT 26
8608: PUSH
8609: LD_INT 27
8611: PUSH
8612: LD_INT 28
8614: PUSH
8615: LD_INT 30
8617: PUSH
8618: LD_INT 31
8620: PUSH
8621: LD_INT 32
8623: PUSH
8624: LD_INT 33
8626: PUSH
8627: LD_INT 34
8629: PUSH
8630: LD_INT 36
8632: PUSH
8633: EMPTY
8634: LIST
8635: LIST
8636: LIST
8637: LIST
8638: LIST
8639: LIST
8640: LIST
8641: LIST
8642: LIST
8643: LIST
8644: LIST
8645: LIST
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: LIST
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: LIST
8656: LIST
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: LIST
8662: LIST
8663: LIST
8664: LIST
8665: PUSH
8666: LD_INT 101
8668: PUSH
8669: LD_INT 102
8671: PUSH
8672: LD_INT 103
8674: PUSH
8675: LD_INT 104
8677: PUSH
8678: LD_INT 105
8680: PUSH
8681: LD_INT 106
8683: PUSH
8684: LD_INT 107
8686: PUSH
8687: LD_INT 108
8689: PUSH
8690: LD_INT 109
8692: PUSH
8693: LD_INT 110
8695: PUSH
8696: LD_INT 111
8698: PUSH
8699: LD_INT 112
8701: PUSH
8702: LD_INT 113
8704: PUSH
8705: LD_INT 114
8707: PUSH
8708: EMPTY
8709: LIST
8710: LIST
8711: LIST
8712: LIST
8713: LIST
8714: LIST
8715: LIST
8716: LIST
8717: LIST
8718: LIST
8719: LIST
8720: LIST
8721: LIST
8722: LIST
8723: PUSH
8724: EMPTY
8725: LIST
8726: LIST
8727: ST_TO_ADDR
8728: GO 9895
8730: LD_INT 14
8732: DOUBLE
8733: EQUAL
8734: IFTRUE 8738
8736: GO 8950
8738: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
8739: LD_ADDR_VAR 0 1
8743: PUSH
8744: LD_INT 1
8746: PUSH
8747: LD_INT 2
8749: PUSH
8750: LD_INT 3
8752: PUSH
8753: LD_INT 4
8755: PUSH
8756: LD_INT 5
8758: PUSH
8759: LD_INT 6
8761: PUSH
8762: LD_INT 7
8764: PUSH
8765: LD_INT 8
8767: PUSH
8768: LD_INT 9
8770: PUSH
8771: LD_INT 10
8773: PUSH
8774: LD_INT 11
8776: PUSH
8777: LD_INT 12
8779: PUSH
8780: LD_INT 13
8782: PUSH
8783: LD_INT 14
8785: PUSH
8786: LD_INT 15
8788: PUSH
8789: LD_INT 16
8791: PUSH
8792: LD_INT 17
8794: PUSH
8795: LD_INT 18
8797: PUSH
8798: LD_INT 19
8800: PUSH
8801: LD_INT 20
8803: PUSH
8804: LD_INT 21
8806: PUSH
8807: LD_INT 22
8809: PUSH
8810: LD_INT 23
8812: PUSH
8813: LD_INT 24
8815: PUSH
8816: LD_INT 25
8818: PUSH
8819: LD_INT 26
8821: PUSH
8822: LD_INT 27
8824: PUSH
8825: LD_INT 28
8827: PUSH
8828: LD_INT 29
8830: PUSH
8831: LD_INT 30
8833: PUSH
8834: LD_INT 31
8836: PUSH
8837: LD_INT 32
8839: PUSH
8840: LD_INT 33
8842: PUSH
8843: LD_INT 34
8845: PUSH
8846: LD_INT 36
8848: PUSH
8849: EMPTY
8850: LIST
8851: LIST
8852: LIST
8853: LIST
8854: LIST
8855: LIST
8856: LIST
8857: LIST
8858: LIST
8859: LIST
8860: LIST
8861: LIST
8862: LIST
8863: LIST
8864: LIST
8865: LIST
8866: LIST
8867: LIST
8868: LIST
8869: LIST
8870: LIST
8871: LIST
8872: LIST
8873: LIST
8874: LIST
8875: LIST
8876: LIST
8877: LIST
8878: LIST
8879: LIST
8880: LIST
8881: LIST
8882: LIST
8883: LIST
8884: LIST
8885: PUSH
8886: LD_INT 101
8888: PUSH
8889: LD_INT 102
8891: PUSH
8892: LD_INT 103
8894: PUSH
8895: LD_INT 104
8897: PUSH
8898: LD_INT 105
8900: PUSH
8901: LD_INT 106
8903: PUSH
8904: LD_INT 107
8906: PUSH
8907: LD_INT 108
8909: PUSH
8910: LD_INT 109
8912: PUSH
8913: LD_INT 110
8915: PUSH
8916: LD_INT 111
8918: PUSH
8919: LD_INT 112
8921: PUSH
8922: LD_INT 113
8924: PUSH
8925: LD_INT 114
8927: PUSH
8928: EMPTY
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: LIST
8940: LIST
8941: LIST
8942: LIST
8943: PUSH
8944: EMPTY
8945: LIST
8946: LIST
8947: ST_TO_ADDR
8948: GO 9895
8950: LD_INT 15
8952: DOUBLE
8953: EQUAL
8954: IFTRUE 8958
8956: GO 9170
8958: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
8959: LD_ADDR_VAR 0 1
8963: PUSH
8964: LD_INT 1
8966: PUSH
8967: LD_INT 2
8969: PUSH
8970: LD_INT 3
8972: PUSH
8973: LD_INT 4
8975: PUSH
8976: LD_INT 5
8978: PUSH
8979: LD_INT 6
8981: PUSH
8982: LD_INT 7
8984: PUSH
8985: LD_INT 8
8987: PUSH
8988: LD_INT 9
8990: PUSH
8991: LD_INT 10
8993: PUSH
8994: LD_INT 11
8996: PUSH
8997: LD_INT 12
8999: PUSH
9000: LD_INT 13
9002: PUSH
9003: LD_INT 14
9005: PUSH
9006: LD_INT 15
9008: PUSH
9009: LD_INT 16
9011: PUSH
9012: LD_INT 17
9014: PUSH
9015: LD_INT 18
9017: PUSH
9018: LD_INT 19
9020: PUSH
9021: LD_INT 20
9023: PUSH
9024: LD_INT 21
9026: PUSH
9027: LD_INT 22
9029: PUSH
9030: LD_INT 23
9032: PUSH
9033: LD_INT 24
9035: PUSH
9036: LD_INT 25
9038: PUSH
9039: LD_INT 26
9041: PUSH
9042: LD_INT 27
9044: PUSH
9045: LD_INT 28
9047: PUSH
9048: LD_INT 29
9050: PUSH
9051: LD_INT 30
9053: PUSH
9054: LD_INT 31
9056: PUSH
9057: LD_INT 32
9059: PUSH
9060: LD_INT 33
9062: PUSH
9063: LD_INT 34
9065: PUSH
9066: LD_INT 36
9068: PUSH
9069: EMPTY
9070: LIST
9071: LIST
9072: LIST
9073: LIST
9074: LIST
9075: LIST
9076: LIST
9077: LIST
9078: LIST
9079: LIST
9080: LIST
9081: LIST
9082: LIST
9083: LIST
9084: LIST
9085: LIST
9086: LIST
9087: LIST
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: LIST
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: LIST
9100: LIST
9101: LIST
9102: LIST
9103: LIST
9104: LIST
9105: PUSH
9106: LD_INT 101
9108: PUSH
9109: LD_INT 102
9111: PUSH
9112: LD_INT 103
9114: PUSH
9115: LD_INT 104
9117: PUSH
9118: LD_INT 105
9120: PUSH
9121: LD_INT 106
9123: PUSH
9124: LD_INT 107
9126: PUSH
9127: LD_INT 108
9129: PUSH
9130: LD_INT 109
9132: PUSH
9133: LD_INT 110
9135: PUSH
9136: LD_INT 111
9138: PUSH
9139: LD_INT 112
9141: PUSH
9142: LD_INT 113
9144: PUSH
9145: LD_INT 114
9147: PUSH
9148: EMPTY
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: LIST
9155: LIST
9156: LIST
9157: LIST
9158: LIST
9159: LIST
9160: LIST
9161: LIST
9162: LIST
9163: PUSH
9164: EMPTY
9165: LIST
9166: LIST
9167: ST_TO_ADDR
9168: GO 9895
9170: LD_INT 16
9172: DOUBLE
9173: EQUAL
9174: IFTRUE 9178
9176: GO 9302
9178: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
9179: LD_ADDR_VAR 0 1
9183: PUSH
9184: LD_INT 2
9186: PUSH
9187: LD_INT 4
9189: PUSH
9190: LD_INT 5
9192: PUSH
9193: LD_INT 7
9195: PUSH
9196: LD_INT 11
9198: PUSH
9199: LD_INT 12
9201: PUSH
9202: LD_INT 15
9204: PUSH
9205: LD_INT 16
9207: PUSH
9208: LD_INT 20
9210: PUSH
9211: LD_INT 21
9213: PUSH
9214: LD_INT 22
9216: PUSH
9217: LD_INT 23
9219: PUSH
9220: LD_INT 25
9222: PUSH
9223: LD_INT 26
9225: PUSH
9226: LD_INT 30
9228: PUSH
9229: LD_INT 31
9231: PUSH
9232: LD_INT 32
9234: PUSH
9235: LD_INT 33
9237: PUSH
9238: LD_INT 34
9240: PUSH
9241: EMPTY
9242: LIST
9243: LIST
9244: LIST
9245: LIST
9246: LIST
9247: LIST
9248: LIST
9249: LIST
9250: LIST
9251: LIST
9252: LIST
9253: LIST
9254: LIST
9255: LIST
9256: LIST
9257: LIST
9258: LIST
9259: LIST
9260: LIST
9261: PUSH
9262: LD_INT 101
9264: PUSH
9265: LD_INT 102
9267: PUSH
9268: LD_INT 103
9270: PUSH
9271: LD_INT 106
9273: PUSH
9274: LD_INT 108
9276: PUSH
9277: LD_INT 112
9279: PUSH
9280: LD_INT 113
9282: PUSH
9283: LD_INT 114
9285: PUSH
9286: EMPTY
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: LIST
9294: LIST
9295: PUSH
9296: EMPTY
9297: LIST
9298: LIST
9299: ST_TO_ADDR
9300: GO 9895
9302: LD_INT 17
9304: DOUBLE
9305: EQUAL
9306: IFTRUE 9310
9308: GO 9522
9310: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
9311: LD_ADDR_VAR 0 1
9315: PUSH
9316: LD_INT 1
9318: PUSH
9319: LD_INT 2
9321: PUSH
9322: LD_INT 3
9324: PUSH
9325: LD_INT 4
9327: PUSH
9328: LD_INT 5
9330: PUSH
9331: LD_INT 6
9333: PUSH
9334: LD_INT 7
9336: PUSH
9337: LD_INT 8
9339: PUSH
9340: LD_INT 9
9342: PUSH
9343: LD_INT 10
9345: PUSH
9346: LD_INT 11
9348: PUSH
9349: LD_INT 12
9351: PUSH
9352: LD_INT 13
9354: PUSH
9355: LD_INT 14
9357: PUSH
9358: LD_INT 15
9360: PUSH
9361: LD_INT 16
9363: PUSH
9364: LD_INT 17
9366: PUSH
9367: LD_INT 18
9369: PUSH
9370: LD_INT 19
9372: PUSH
9373: LD_INT 20
9375: PUSH
9376: LD_INT 21
9378: PUSH
9379: LD_INT 22
9381: PUSH
9382: LD_INT 23
9384: PUSH
9385: LD_INT 24
9387: PUSH
9388: LD_INT 25
9390: PUSH
9391: LD_INT 26
9393: PUSH
9394: LD_INT 27
9396: PUSH
9397: LD_INT 28
9399: PUSH
9400: LD_INT 29
9402: PUSH
9403: LD_INT 30
9405: PUSH
9406: LD_INT 31
9408: PUSH
9409: LD_INT 32
9411: PUSH
9412: LD_INT 33
9414: PUSH
9415: LD_INT 34
9417: PUSH
9418: LD_INT 36
9420: PUSH
9421: EMPTY
9422: LIST
9423: LIST
9424: LIST
9425: LIST
9426: LIST
9427: LIST
9428: LIST
9429: LIST
9430: LIST
9431: LIST
9432: LIST
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: LIST
9438: LIST
9439: LIST
9440: LIST
9441: LIST
9442: LIST
9443: LIST
9444: LIST
9445: LIST
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: LIST
9451: LIST
9452: LIST
9453: LIST
9454: LIST
9455: LIST
9456: LIST
9457: PUSH
9458: LD_INT 101
9460: PUSH
9461: LD_INT 102
9463: PUSH
9464: LD_INT 103
9466: PUSH
9467: LD_INT 104
9469: PUSH
9470: LD_INT 105
9472: PUSH
9473: LD_INT 106
9475: PUSH
9476: LD_INT 107
9478: PUSH
9479: LD_INT 108
9481: PUSH
9482: LD_INT 109
9484: PUSH
9485: LD_INT 110
9487: PUSH
9488: LD_INT 111
9490: PUSH
9491: LD_INT 112
9493: PUSH
9494: LD_INT 113
9496: PUSH
9497: LD_INT 114
9499: PUSH
9500: EMPTY
9501: LIST
9502: LIST
9503: LIST
9504: LIST
9505: LIST
9506: LIST
9507: LIST
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: LIST
9513: LIST
9514: LIST
9515: PUSH
9516: EMPTY
9517: LIST
9518: LIST
9519: ST_TO_ADDR
9520: GO 9895
9522: LD_INT 18
9524: DOUBLE
9525: EQUAL
9526: IFTRUE 9530
9528: GO 9666
9530: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
9531: LD_ADDR_VAR 0 1
9535: PUSH
9536: LD_INT 2
9538: PUSH
9539: LD_INT 4
9541: PUSH
9542: LD_INT 5
9544: PUSH
9545: LD_INT 7
9547: PUSH
9548: LD_INT 11
9550: PUSH
9551: LD_INT 12
9553: PUSH
9554: LD_INT 15
9556: PUSH
9557: LD_INT 16
9559: PUSH
9560: LD_INT 20
9562: PUSH
9563: LD_INT 21
9565: PUSH
9566: LD_INT 22
9568: PUSH
9569: LD_INT 23
9571: PUSH
9572: LD_INT 25
9574: PUSH
9575: LD_INT 26
9577: PUSH
9578: LD_INT 30
9580: PUSH
9581: LD_INT 31
9583: PUSH
9584: LD_INT 32
9586: PUSH
9587: LD_INT 33
9589: PUSH
9590: LD_INT 34
9592: PUSH
9593: LD_INT 35
9595: PUSH
9596: LD_INT 36
9598: PUSH
9599: EMPTY
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: PUSH
9622: LD_INT 101
9624: PUSH
9625: LD_INT 102
9627: PUSH
9628: LD_INT 103
9630: PUSH
9631: LD_INT 106
9633: PUSH
9634: LD_INT 108
9636: PUSH
9637: LD_INT 112
9639: PUSH
9640: LD_INT 113
9642: PUSH
9643: LD_INT 114
9645: PUSH
9646: LD_INT 115
9648: PUSH
9649: EMPTY
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: PUSH
9660: EMPTY
9661: LIST
9662: LIST
9663: ST_TO_ADDR
9664: GO 9895
9666: LD_INT 19
9668: DOUBLE
9669: EQUAL
9670: IFTRUE 9674
9672: GO 9894
9674: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
9675: LD_ADDR_VAR 0 1
9679: PUSH
9680: LD_INT 1
9682: PUSH
9683: LD_INT 2
9685: PUSH
9686: LD_INT 3
9688: PUSH
9689: LD_INT 4
9691: PUSH
9692: LD_INT 5
9694: PUSH
9695: LD_INT 6
9697: PUSH
9698: LD_INT 7
9700: PUSH
9701: LD_INT 8
9703: PUSH
9704: LD_INT 9
9706: PUSH
9707: LD_INT 10
9709: PUSH
9710: LD_INT 11
9712: PUSH
9713: LD_INT 12
9715: PUSH
9716: LD_INT 13
9718: PUSH
9719: LD_INT 14
9721: PUSH
9722: LD_INT 15
9724: PUSH
9725: LD_INT 16
9727: PUSH
9728: LD_INT 17
9730: PUSH
9731: LD_INT 18
9733: PUSH
9734: LD_INT 19
9736: PUSH
9737: LD_INT 20
9739: PUSH
9740: LD_INT 21
9742: PUSH
9743: LD_INT 22
9745: PUSH
9746: LD_INT 23
9748: PUSH
9749: LD_INT 24
9751: PUSH
9752: LD_INT 25
9754: PUSH
9755: LD_INT 26
9757: PUSH
9758: LD_INT 27
9760: PUSH
9761: LD_INT 28
9763: PUSH
9764: LD_INT 29
9766: PUSH
9767: LD_INT 30
9769: PUSH
9770: LD_INT 31
9772: PUSH
9773: LD_INT 32
9775: PUSH
9776: LD_INT 33
9778: PUSH
9779: LD_INT 34
9781: PUSH
9782: LD_INT 35
9784: PUSH
9785: LD_INT 36
9787: PUSH
9788: EMPTY
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: LIST
9795: LIST
9796: LIST
9797: LIST
9798: LIST
9799: LIST
9800: LIST
9801: LIST
9802: LIST
9803: LIST
9804: LIST
9805: LIST
9806: LIST
9807: LIST
9808: LIST
9809: LIST
9810: LIST
9811: LIST
9812: LIST
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: PUSH
9826: LD_INT 101
9828: PUSH
9829: LD_INT 102
9831: PUSH
9832: LD_INT 103
9834: PUSH
9835: LD_INT 104
9837: PUSH
9838: LD_INT 105
9840: PUSH
9841: LD_INT 106
9843: PUSH
9844: LD_INT 107
9846: PUSH
9847: LD_INT 108
9849: PUSH
9850: LD_INT 109
9852: PUSH
9853: LD_INT 110
9855: PUSH
9856: LD_INT 111
9858: PUSH
9859: LD_INT 112
9861: PUSH
9862: LD_INT 113
9864: PUSH
9865: LD_INT 114
9867: PUSH
9868: LD_INT 115
9870: PUSH
9871: EMPTY
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: PUSH
9888: EMPTY
9889: LIST
9890: LIST
9891: ST_TO_ADDR
9892: GO 9895
9894: POP
// end else
9895: GO 9932
// if campaign_id = 5 then
9897: LD_OWVAR 69
9901: PUSH
9902: LD_INT 5
9904: EQUAL
9905: IFFALSE 9932
// begin result := [ [ 1 , 2 ] , [ 100 ] ] ;
9907: LD_ADDR_VAR 0 1
9911: PUSH
9912: LD_INT 1
9914: PUSH
9915: LD_INT 2
9917: PUSH
9918: EMPTY
9919: LIST
9920: LIST
9921: PUSH
9922: LD_INT 100
9924: PUSH
9925: EMPTY
9926: LIST
9927: PUSH
9928: EMPTY
9929: LIST
9930: LIST
9931: ST_TO_ADDR
// end ; if result then
9932: LD_VAR 0 1
9936: IFFALSE 10225
// begin normal :=  ;
9938: LD_ADDR_VAR 0 3
9942: PUSH
9943: LD_STRING 
9945: ST_TO_ADDR
// hardcore :=  ;
9946: LD_ADDR_VAR 0 4
9950: PUSH
9951: LD_STRING 
9953: ST_TO_ADDR
// for i = 1 to normalCounter do
9954: LD_ADDR_VAR 0 5
9958: PUSH
9959: DOUBLE
9960: LD_INT 1
9962: DEC
9963: ST_TO_ADDR
9964: LD_EXP 27
9968: PUSH
9969: FOR_TO
9970: IFFALSE 10071
// begin tmp := 0 ;
9972: LD_ADDR_VAR 0 2
9976: PUSH
9977: LD_STRING 0
9979: ST_TO_ADDR
// if result [ 1 ] then
9980: LD_VAR 0 1
9984: PUSH
9985: LD_INT 1
9987: ARRAY
9988: IFFALSE 10053
// if result [ 1 ] [ 1 ] = i then
9990: LD_VAR 0 1
9994: PUSH
9995: LD_INT 1
9997: ARRAY
9998: PUSH
9999: LD_INT 1
10001: ARRAY
10002: PUSH
10003: LD_VAR 0 5
10007: EQUAL
10008: IFFALSE 10053
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
10010: LD_ADDR_VAR 0 1
10014: PUSH
10015: LD_VAR 0 1
10019: PPUSH
10020: LD_INT 1
10022: PPUSH
10023: LD_VAR 0 1
10027: PUSH
10028: LD_INT 1
10030: ARRAY
10031: PPUSH
10032: LD_INT 1
10034: PPUSH
10035: CALL_OW 3
10039: PPUSH
10040: CALL_OW 1
10044: ST_TO_ADDR
// tmp := 1 ;
10045: LD_ADDR_VAR 0 2
10049: PUSH
10050: LD_STRING 1
10052: ST_TO_ADDR
// end ; normal := normal & tmp ;
10053: LD_ADDR_VAR 0 3
10057: PUSH
10058: LD_VAR 0 3
10062: PUSH
10063: LD_VAR 0 2
10067: STR
10068: ST_TO_ADDR
// end ;
10069: GO 9969
10071: POP
10072: POP
// for i = 1 to hardcoreCounter do
10073: LD_ADDR_VAR 0 5
10077: PUSH
10078: DOUBLE
10079: LD_INT 1
10081: DEC
10082: ST_TO_ADDR
10083: LD_EXP 28
10087: PUSH
10088: FOR_TO
10089: IFFALSE 10194
// begin tmp := 0 ;
10091: LD_ADDR_VAR 0 2
10095: PUSH
10096: LD_STRING 0
10098: ST_TO_ADDR
// if result [ 2 ] then
10099: LD_VAR 0 1
10103: PUSH
10104: LD_INT 2
10106: ARRAY
10107: IFFALSE 10176
// if result [ 2 ] [ 1 ] = 100 + i then
10109: LD_VAR 0 1
10113: PUSH
10114: LD_INT 2
10116: ARRAY
10117: PUSH
10118: LD_INT 1
10120: ARRAY
10121: PUSH
10122: LD_INT 100
10124: PUSH
10125: LD_VAR 0 5
10129: PLUS
10130: EQUAL
10131: IFFALSE 10176
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
10133: LD_ADDR_VAR 0 1
10137: PUSH
10138: LD_VAR 0 1
10142: PPUSH
10143: LD_INT 2
10145: PPUSH
10146: LD_VAR 0 1
10150: PUSH
10151: LD_INT 2
10153: ARRAY
10154: PPUSH
10155: LD_INT 1
10157: PPUSH
10158: CALL_OW 3
10162: PPUSH
10163: CALL_OW 1
10167: ST_TO_ADDR
// tmp := 1 ;
10168: LD_ADDR_VAR 0 2
10172: PUSH
10173: LD_STRING 1
10175: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
10176: LD_ADDR_VAR 0 4
10180: PUSH
10181: LD_VAR 0 4
10185: PUSH
10186: LD_VAR 0 2
10190: STR
10191: ST_TO_ADDR
// end ;
10192: GO 10088
10194: POP
10195: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
10196: LD_STRING getStreamItemsFromMission("
10198: PUSH
10199: LD_VAR 0 3
10203: STR
10204: PUSH
10205: LD_STRING ","
10207: STR
10208: PUSH
10209: LD_VAR 0 4
10213: STR
10214: PUSH
10215: LD_STRING ")
10217: STR
10218: PPUSH
10219: CALL_OW 559
// end else
10223: GO 10232
// ToLua ( getStreamItemsFromMission("","") ) ;
10225: LD_STRING getStreamItemsFromMission("","")
10227: PPUSH
10228: CALL_OW 559
// end ;
10232: LD_VAR 0 1
10236: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
10237: LD_VAR 0 2
10241: PUSH
10242: LD_INT 100
10244: EQUAL
10245: IFFALSE 11194
// begin if not StreamModeActive then
10247: LD_EXP 26
10251: NOT
10252: IFFALSE 10262
// StreamModeActive := true ;
10254: LD_ADDR_EXP 26
10258: PUSH
10259: LD_INT 1
10261: ST_TO_ADDR
// if p3 = 0 then
10262: LD_VAR 0 3
10266: PUSH
10267: LD_INT 0
10269: EQUAL
10270: IFFALSE 10276
// InitStreamMode ;
10272: CALL 6497 0 0
// if p3 = 1 then
10276: LD_VAR 0 3
10280: PUSH
10281: LD_INT 1
10283: EQUAL
10284: IFFALSE 10294
// sRocket := true ;
10286: LD_ADDR_EXP 31
10290: PUSH
10291: LD_INT 1
10293: ST_TO_ADDR
// if p3 = 2 then
10294: LD_VAR 0 3
10298: PUSH
10299: LD_INT 2
10301: EQUAL
10302: IFFALSE 10312
// sSpeed := true ;
10304: LD_ADDR_EXP 30
10308: PUSH
10309: LD_INT 1
10311: ST_TO_ADDR
// if p3 = 3 then
10312: LD_VAR 0 3
10316: PUSH
10317: LD_INT 3
10319: EQUAL
10320: IFFALSE 10330
// sEngine := true ;
10322: LD_ADDR_EXP 32
10326: PUSH
10327: LD_INT 1
10329: ST_TO_ADDR
// if p3 = 4 then
10330: LD_VAR 0 3
10334: PUSH
10335: LD_INT 4
10337: EQUAL
10338: IFFALSE 10348
// sSpec := true ;
10340: LD_ADDR_EXP 29
10344: PUSH
10345: LD_INT 1
10347: ST_TO_ADDR
// if p3 = 5 then
10348: LD_VAR 0 3
10352: PUSH
10353: LD_INT 5
10355: EQUAL
10356: IFFALSE 10366
// sLevel := true ;
10358: LD_ADDR_EXP 33
10362: PUSH
10363: LD_INT 1
10365: ST_TO_ADDR
// if p3 = 6 then
10366: LD_VAR 0 3
10370: PUSH
10371: LD_INT 6
10373: EQUAL
10374: IFFALSE 10384
// sArmoury := true ;
10376: LD_ADDR_EXP 34
10380: PUSH
10381: LD_INT 1
10383: ST_TO_ADDR
// if p3 = 7 then
10384: LD_VAR 0 3
10388: PUSH
10389: LD_INT 7
10391: EQUAL
10392: IFFALSE 10402
// sRadar := true ;
10394: LD_ADDR_EXP 35
10398: PUSH
10399: LD_INT 1
10401: ST_TO_ADDR
// if p3 = 8 then
10402: LD_VAR 0 3
10406: PUSH
10407: LD_INT 8
10409: EQUAL
10410: IFFALSE 10420
// sBunker := true ;
10412: LD_ADDR_EXP 36
10416: PUSH
10417: LD_INT 1
10419: ST_TO_ADDR
// if p3 = 9 then
10420: LD_VAR 0 3
10424: PUSH
10425: LD_INT 9
10427: EQUAL
10428: IFFALSE 10438
// sHack := true ;
10430: LD_ADDR_EXP 37
10434: PUSH
10435: LD_INT 1
10437: ST_TO_ADDR
// if p3 = 10 then
10438: LD_VAR 0 3
10442: PUSH
10443: LD_INT 10
10445: EQUAL
10446: IFFALSE 10456
// sFire := true ;
10448: LD_ADDR_EXP 38
10452: PUSH
10453: LD_INT 1
10455: ST_TO_ADDR
// if p3 = 11 then
10456: LD_VAR 0 3
10460: PUSH
10461: LD_INT 11
10463: EQUAL
10464: IFFALSE 10474
// sRefresh := true ;
10466: LD_ADDR_EXP 39
10470: PUSH
10471: LD_INT 1
10473: ST_TO_ADDR
// if p3 = 12 then
10474: LD_VAR 0 3
10478: PUSH
10479: LD_INT 12
10481: EQUAL
10482: IFFALSE 10492
// sExp := true ;
10484: LD_ADDR_EXP 40
10488: PUSH
10489: LD_INT 1
10491: ST_TO_ADDR
// if p3 = 13 then
10492: LD_VAR 0 3
10496: PUSH
10497: LD_INT 13
10499: EQUAL
10500: IFFALSE 10510
// sDepot := true ;
10502: LD_ADDR_EXP 41
10506: PUSH
10507: LD_INT 1
10509: ST_TO_ADDR
// if p3 = 14 then
10510: LD_VAR 0 3
10514: PUSH
10515: LD_INT 14
10517: EQUAL
10518: IFFALSE 10528
// sFlag := true ;
10520: LD_ADDR_EXP 42
10524: PUSH
10525: LD_INT 1
10527: ST_TO_ADDR
// if p3 = 15 then
10528: LD_VAR 0 3
10532: PUSH
10533: LD_INT 15
10535: EQUAL
10536: IFFALSE 10546
// sKamikadze := true ;
10538: LD_ADDR_EXP 50
10542: PUSH
10543: LD_INT 1
10545: ST_TO_ADDR
// if p3 = 16 then
10546: LD_VAR 0 3
10550: PUSH
10551: LD_INT 16
10553: EQUAL
10554: IFFALSE 10564
// sTroll := true ;
10556: LD_ADDR_EXP 51
10560: PUSH
10561: LD_INT 1
10563: ST_TO_ADDR
// if p3 = 17 then
10564: LD_VAR 0 3
10568: PUSH
10569: LD_INT 17
10571: EQUAL
10572: IFFALSE 10582
// sSlow := true ;
10574: LD_ADDR_EXP 52
10578: PUSH
10579: LD_INT 1
10581: ST_TO_ADDR
// if p3 = 18 then
10582: LD_VAR 0 3
10586: PUSH
10587: LD_INT 18
10589: EQUAL
10590: IFFALSE 10600
// sLack := true ;
10592: LD_ADDR_EXP 53
10596: PUSH
10597: LD_INT 1
10599: ST_TO_ADDR
// if p3 = 19 then
10600: LD_VAR 0 3
10604: PUSH
10605: LD_INT 19
10607: EQUAL
10608: IFFALSE 10618
// sTank := true ;
10610: LD_ADDR_EXP 55
10614: PUSH
10615: LD_INT 1
10617: ST_TO_ADDR
// if p3 = 20 then
10618: LD_VAR 0 3
10622: PUSH
10623: LD_INT 20
10625: EQUAL
10626: IFFALSE 10636
// sRemote := true ;
10628: LD_ADDR_EXP 56
10632: PUSH
10633: LD_INT 1
10635: ST_TO_ADDR
// if p3 = 21 then
10636: LD_VAR 0 3
10640: PUSH
10641: LD_INT 21
10643: EQUAL
10644: IFFALSE 10654
// sPowell := true ;
10646: LD_ADDR_EXP 57
10650: PUSH
10651: LD_INT 1
10653: ST_TO_ADDR
// if p3 = 22 then
10654: LD_VAR 0 3
10658: PUSH
10659: LD_INT 22
10661: EQUAL
10662: IFFALSE 10672
// sTeleport := true ;
10664: LD_ADDR_EXP 60
10668: PUSH
10669: LD_INT 1
10671: ST_TO_ADDR
// if p3 = 23 then
10672: LD_VAR 0 3
10676: PUSH
10677: LD_INT 23
10679: EQUAL
10680: IFFALSE 10690
// sOilTower := true ;
10682: LD_ADDR_EXP 62
10686: PUSH
10687: LD_INT 1
10689: ST_TO_ADDR
// if p3 = 24 then
10690: LD_VAR 0 3
10694: PUSH
10695: LD_INT 24
10697: EQUAL
10698: IFFALSE 10708
// sShovel := true ;
10700: LD_ADDR_EXP 63
10704: PUSH
10705: LD_INT 1
10707: ST_TO_ADDR
// if p3 = 25 then
10708: LD_VAR 0 3
10712: PUSH
10713: LD_INT 25
10715: EQUAL
10716: IFFALSE 10726
// sSheik := true ;
10718: LD_ADDR_EXP 64
10722: PUSH
10723: LD_INT 1
10725: ST_TO_ADDR
// if p3 = 26 then
10726: LD_VAR 0 3
10730: PUSH
10731: LD_INT 26
10733: EQUAL
10734: IFFALSE 10744
// sEarthquake := true ;
10736: LD_ADDR_EXP 66
10740: PUSH
10741: LD_INT 1
10743: ST_TO_ADDR
// if p3 = 27 then
10744: LD_VAR 0 3
10748: PUSH
10749: LD_INT 27
10751: EQUAL
10752: IFFALSE 10762
// sAI := true ;
10754: LD_ADDR_EXP 67
10758: PUSH
10759: LD_INT 1
10761: ST_TO_ADDR
// if p3 = 28 then
10762: LD_VAR 0 3
10766: PUSH
10767: LD_INT 28
10769: EQUAL
10770: IFFALSE 10780
// sCargo := true ;
10772: LD_ADDR_EXP 70
10776: PUSH
10777: LD_INT 1
10779: ST_TO_ADDR
// if p3 = 29 then
10780: LD_VAR 0 3
10784: PUSH
10785: LD_INT 29
10787: EQUAL
10788: IFFALSE 10798
// sDLaser := true ;
10790: LD_ADDR_EXP 71
10794: PUSH
10795: LD_INT 1
10797: ST_TO_ADDR
// if p3 = 30 then
10798: LD_VAR 0 3
10802: PUSH
10803: LD_INT 30
10805: EQUAL
10806: IFFALSE 10816
// sExchange := true ;
10808: LD_ADDR_EXP 72
10812: PUSH
10813: LD_INT 1
10815: ST_TO_ADDR
// if p3 = 31 then
10816: LD_VAR 0 3
10820: PUSH
10821: LD_INT 31
10823: EQUAL
10824: IFFALSE 10834
// sFac := true ;
10826: LD_ADDR_EXP 73
10830: PUSH
10831: LD_INT 1
10833: ST_TO_ADDR
// if p3 = 32 then
10834: LD_VAR 0 3
10838: PUSH
10839: LD_INT 32
10841: EQUAL
10842: IFFALSE 10852
// sPower := true ;
10844: LD_ADDR_EXP 74
10848: PUSH
10849: LD_INT 1
10851: ST_TO_ADDR
// if p3 = 33 then
10852: LD_VAR 0 3
10856: PUSH
10857: LD_INT 33
10859: EQUAL
10860: IFFALSE 10870
// sRandom := true ;
10862: LD_ADDR_EXP 75
10866: PUSH
10867: LD_INT 1
10869: ST_TO_ADDR
// if p3 = 34 then
10870: LD_VAR 0 3
10874: PUSH
10875: LD_INT 34
10877: EQUAL
10878: IFFALSE 10888
// sShield := true ;
10880: LD_ADDR_EXP 76
10884: PUSH
10885: LD_INT 1
10887: ST_TO_ADDR
// if p3 = 35 then
10888: LD_VAR 0 3
10892: PUSH
10893: LD_INT 35
10895: EQUAL
10896: IFFALSE 10906
// sTime := true ;
10898: LD_ADDR_EXP 77
10902: PUSH
10903: LD_INT 1
10905: ST_TO_ADDR
// if p3 = 36 then
10906: LD_VAR 0 3
10910: PUSH
10911: LD_INT 36
10913: EQUAL
10914: IFFALSE 10924
// sTools := true ;
10916: LD_ADDR_EXP 78
10920: PUSH
10921: LD_INT 1
10923: ST_TO_ADDR
// if p3 = 101 then
10924: LD_VAR 0 3
10928: PUSH
10929: LD_INT 101
10931: EQUAL
10932: IFFALSE 10942
// sSold := true ;
10934: LD_ADDR_EXP 43
10938: PUSH
10939: LD_INT 1
10941: ST_TO_ADDR
// if p3 = 102 then
10942: LD_VAR 0 3
10946: PUSH
10947: LD_INT 102
10949: EQUAL
10950: IFFALSE 10960
// sDiff := true ;
10952: LD_ADDR_EXP 44
10956: PUSH
10957: LD_INT 1
10959: ST_TO_ADDR
// if p3 = 103 then
10960: LD_VAR 0 3
10964: PUSH
10965: LD_INT 103
10967: EQUAL
10968: IFFALSE 10978
// sFog := true ;
10970: LD_ADDR_EXP 47
10974: PUSH
10975: LD_INT 1
10977: ST_TO_ADDR
// if p3 = 104 then
10978: LD_VAR 0 3
10982: PUSH
10983: LD_INT 104
10985: EQUAL
10986: IFFALSE 10996
// sReset := true ;
10988: LD_ADDR_EXP 48
10992: PUSH
10993: LD_INT 1
10995: ST_TO_ADDR
// if p3 = 105 then
10996: LD_VAR 0 3
11000: PUSH
11001: LD_INT 105
11003: EQUAL
11004: IFFALSE 11014
// sSun := true ;
11006: LD_ADDR_EXP 49
11010: PUSH
11011: LD_INT 1
11013: ST_TO_ADDR
// if p3 = 106 then
11014: LD_VAR 0 3
11018: PUSH
11019: LD_INT 106
11021: EQUAL
11022: IFFALSE 11032
// sTiger := true ;
11024: LD_ADDR_EXP 45
11028: PUSH
11029: LD_INT 1
11031: ST_TO_ADDR
// if p3 = 107 then
11032: LD_VAR 0 3
11036: PUSH
11037: LD_INT 107
11039: EQUAL
11040: IFFALSE 11050
// sBomb := true ;
11042: LD_ADDR_EXP 46
11046: PUSH
11047: LD_INT 1
11049: ST_TO_ADDR
// if p3 = 108 then
11050: LD_VAR 0 3
11054: PUSH
11055: LD_INT 108
11057: EQUAL
11058: IFFALSE 11068
// sWound := true ;
11060: LD_ADDR_EXP 54
11064: PUSH
11065: LD_INT 1
11067: ST_TO_ADDR
// if p3 = 109 then
11068: LD_VAR 0 3
11072: PUSH
11073: LD_INT 109
11075: EQUAL
11076: IFFALSE 11086
// sBetray := true ;
11078: LD_ADDR_EXP 58
11082: PUSH
11083: LD_INT 1
11085: ST_TO_ADDR
// if p3 = 110 then
11086: LD_VAR 0 3
11090: PUSH
11091: LD_INT 110
11093: EQUAL
11094: IFFALSE 11104
// sContamin := true ;
11096: LD_ADDR_EXP 59
11100: PUSH
11101: LD_INT 1
11103: ST_TO_ADDR
// if p3 = 111 then
11104: LD_VAR 0 3
11108: PUSH
11109: LD_INT 111
11111: EQUAL
11112: IFFALSE 11122
// sOil := true ;
11114: LD_ADDR_EXP 61
11118: PUSH
11119: LD_INT 1
11121: ST_TO_ADDR
// if p3 = 112 then
11122: LD_VAR 0 3
11126: PUSH
11127: LD_INT 112
11129: EQUAL
11130: IFFALSE 11140
// sStu := true ;
11132: LD_ADDR_EXP 65
11136: PUSH
11137: LD_INT 1
11139: ST_TO_ADDR
// if p3 = 113 then
11140: LD_VAR 0 3
11144: PUSH
11145: LD_INT 113
11147: EQUAL
11148: IFFALSE 11158
// sBazooka := true ;
11150: LD_ADDR_EXP 68
11154: PUSH
11155: LD_INT 1
11157: ST_TO_ADDR
// if p3 = 114 then
11158: LD_VAR 0 3
11162: PUSH
11163: LD_INT 114
11165: EQUAL
11166: IFFALSE 11176
// sMortar := true ;
11168: LD_ADDR_EXP 69
11172: PUSH
11173: LD_INT 1
11175: ST_TO_ADDR
// if p3 = 115 then
11176: LD_VAR 0 3
11180: PUSH
11181: LD_INT 115
11183: EQUAL
11184: IFFALSE 11194
// sRanger := true ;
11186: LD_ADDR_EXP 79
11190: PUSH
11191: LD_INT 1
11193: ST_TO_ADDR
// end ; end ;
11194: PPOPN 6
11196: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11197: LD_EXP 26
11201: PUSH
11202: LD_EXP 31
11206: AND
11207: IFFALSE 11331
11209: GO 11211
11211: DISABLE
11212: LD_INT 0
11214: PPUSH
11215: PPUSH
// begin enable ;
11216: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11217: LD_ADDR_VAR 0 2
11221: PUSH
11222: LD_INT 22
11224: PUSH
11225: LD_OWVAR 2
11229: PUSH
11230: EMPTY
11231: LIST
11232: LIST
11233: PUSH
11234: LD_INT 2
11236: PUSH
11237: LD_INT 34
11239: PUSH
11240: LD_INT 7
11242: PUSH
11243: EMPTY
11244: LIST
11245: LIST
11246: PUSH
11247: LD_INT 34
11249: PUSH
11250: LD_INT 45
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: PUSH
11257: LD_INT 34
11259: PUSH
11260: LD_INT 28
11262: PUSH
11263: EMPTY
11264: LIST
11265: LIST
11266: PUSH
11267: LD_INT 34
11269: PUSH
11270: LD_INT 47
11272: PUSH
11273: EMPTY
11274: LIST
11275: LIST
11276: PUSH
11277: EMPTY
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: LIST
11283: PUSH
11284: EMPTY
11285: LIST
11286: LIST
11287: PPUSH
11288: CALL_OW 69
11292: ST_TO_ADDR
// if not tmp then
11293: LD_VAR 0 2
11297: NOT
11298: IFFALSE 11302
// exit ;
11300: GO 11331
// for i in tmp do
11302: LD_ADDR_VAR 0 1
11306: PUSH
11307: LD_VAR 0 2
11311: PUSH
11312: FOR_IN
11313: IFFALSE 11329
// begin SetLives ( i , 0 ) ;
11315: LD_VAR 0 1
11319: PPUSH
11320: LD_INT 0
11322: PPUSH
11323: CALL_OW 234
// end ;
11327: GO 11312
11329: POP
11330: POP
// end ;
11331: PPOPN 2
11333: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11334: LD_EXP 26
11338: PUSH
11339: LD_EXP 32
11343: AND
11344: IFFALSE 11428
11346: GO 11348
11348: DISABLE
11349: LD_INT 0
11351: PPUSH
11352: PPUSH
// begin enable ;
11353: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11354: LD_ADDR_VAR 0 2
11358: PUSH
11359: LD_INT 22
11361: PUSH
11362: LD_OWVAR 2
11366: PUSH
11367: EMPTY
11368: LIST
11369: LIST
11370: PUSH
11371: LD_INT 32
11373: PUSH
11374: LD_INT 3
11376: PUSH
11377: EMPTY
11378: LIST
11379: LIST
11380: PUSH
11381: EMPTY
11382: LIST
11383: LIST
11384: PPUSH
11385: CALL_OW 69
11389: ST_TO_ADDR
// if not tmp then
11390: LD_VAR 0 2
11394: NOT
11395: IFFALSE 11399
// exit ;
11397: GO 11428
// for i in tmp do
11399: LD_ADDR_VAR 0 1
11403: PUSH
11404: LD_VAR 0 2
11408: PUSH
11409: FOR_IN
11410: IFFALSE 11426
// begin SetLives ( i , 0 ) ;
11412: LD_VAR 0 1
11416: PPUSH
11417: LD_INT 0
11419: PPUSH
11420: CALL_OW 234
// end ;
11424: GO 11409
11426: POP
11427: POP
// end ;
11428: PPOPN 2
11430: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11431: LD_EXP 26
11435: PUSH
11436: LD_EXP 29
11440: AND
11441: IFFALSE 11534
11443: GO 11445
11445: DISABLE
11446: LD_INT 0
11448: PPUSH
// begin enable ;
11449: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11450: LD_ADDR_VAR 0 1
11454: PUSH
11455: LD_INT 22
11457: PUSH
11458: LD_OWVAR 2
11462: PUSH
11463: EMPTY
11464: LIST
11465: LIST
11466: PUSH
11467: LD_INT 2
11469: PUSH
11470: LD_INT 25
11472: PUSH
11473: LD_INT 5
11475: PUSH
11476: EMPTY
11477: LIST
11478: LIST
11479: PUSH
11480: LD_INT 25
11482: PUSH
11483: LD_INT 9
11485: PUSH
11486: EMPTY
11487: LIST
11488: LIST
11489: PUSH
11490: LD_INT 25
11492: PUSH
11493: LD_INT 8
11495: PUSH
11496: EMPTY
11497: LIST
11498: LIST
11499: PUSH
11500: EMPTY
11501: LIST
11502: LIST
11503: LIST
11504: LIST
11505: PUSH
11506: EMPTY
11507: LIST
11508: LIST
11509: PPUSH
11510: CALL_OW 69
11514: PUSH
11515: FOR_IN
11516: IFFALSE 11532
// begin SetClass ( i , 1 ) ;
11518: LD_VAR 0 1
11522: PPUSH
11523: LD_INT 1
11525: PPUSH
11526: CALL_OW 336
// end ;
11530: GO 11515
11532: POP
11533: POP
// end ;
11534: PPOPN 1
11536: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
11537: LD_EXP 26
11541: PUSH
11542: LD_EXP 30
11546: AND
11547: PUSH
11548: LD_OWVAR 65
11552: PUSH
11553: LD_INT 7
11555: LESS
11556: AND
11557: IFFALSE 11571
11559: GO 11561
11561: DISABLE
// begin enable ;
11562: ENABLE
// game_speed := 7 ;
11563: LD_ADDR_OWVAR 65
11567: PUSH
11568: LD_INT 7
11570: ST_TO_ADDR
// end ;
11571: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11572: LD_EXP 26
11576: PUSH
11577: LD_EXP 33
11581: AND
11582: IFFALSE 11784
11584: GO 11586
11586: DISABLE
11587: LD_INT 0
11589: PPUSH
11590: PPUSH
11591: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11592: LD_ADDR_VAR 0 3
11596: PUSH
11597: LD_INT 81
11599: PUSH
11600: LD_OWVAR 2
11604: PUSH
11605: EMPTY
11606: LIST
11607: LIST
11608: PUSH
11609: LD_INT 21
11611: PUSH
11612: LD_INT 1
11614: PUSH
11615: EMPTY
11616: LIST
11617: LIST
11618: PUSH
11619: EMPTY
11620: LIST
11621: LIST
11622: PPUSH
11623: CALL_OW 69
11627: ST_TO_ADDR
// if not tmp then
11628: LD_VAR 0 3
11632: NOT
11633: IFFALSE 11637
// exit ;
11635: GO 11784
// if tmp > 5 then
11637: LD_VAR 0 3
11641: PUSH
11642: LD_INT 5
11644: GREATER
11645: IFFALSE 11657
// k := 5 else
11647: LD_ADDR_VAR 0 2
11651: PUSH
11652: LD_INT 5
11654: ST_TO_ADDR
11655: GO 11667
// k := tmp ;
11657: LD_ADDR_VAR 0 2
11661: PUSH
11662: LD_VAR 0 3
11666: ST_TO_ADDR
// for i := 1 to k do
11667: LD_ADDR_VAR 0 1
11671: PUSH
11672: DOUBLE
11673: LD_INT 1
11675: DEC
11676: ST_TO_ADDR
11677: LD_VAR 0 2
11681: PUSH
11682: FOR_TO
11683: IFFALSE 11782
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11685: LD_VAR 0 3
11689: PUSH
11690: LD_VAR 0 1
11694: ARRAY
11695: PPUSH
11696: LD_VAR 0 1
11700: PUSH
11701: LD_INT 4
11703: MOD
11704: PUSH
11705: LD_INT 1
11707: PLUS
11708: PPUSH
11709: CALL_OW 259
11713: PUSH
11714: LD_INT 10
11716: LESS
11717: IFFALSE 11780
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
11719: LD_VAR 0 3
11723: PUSH
11724: LD_VAR 0 1
11728: ARRAY
11729: PPUSH
11730: LD_VAR 0 1
11734: PUSH
11735: LD_INT 4
11737: MOD
11738: PUSH
11739: LD_INT 1
11741: PLUS
11742: PPUSH
11743: LD_VAR 0 3
11747: PUSH
11748: LD_VAR 0 1
11752: ARRAY
11753: PPUSH
11754: LD_VAR 0 1
11758: PUSH
11759: LD_INT 4
11761: MOD
11762: PUSH
11763: LD_INT 1
11765: PLUS
11766: PPUSH
11767: CALL_OW 259
11771: PUSH
11772: LD_INT 1
11774: PLUS
11775: PPUSH
11776: CALL_OW 237
11780: GO 11682
11782: POP
11783: POP
// end ;
11784: PPOPN 3
11786: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
11787: LD_EXP 26
11791: PUSH
11792: LD_EXP 34
11796: AND
11797: IFFALSE 11817
11799: GO 11801
11801: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
11802: LD_INT 4
11804: PPUSH
11805: LD_OWVAR 2
11809: PPUSH
11810: LD_INT 0
11812: PPUSH
11813: CALL_OW 324
11817: END
// every 0 0$1 trigger StreamModeActive and sShovel do
11818: LD_EXP 26
11822: PUSH
11823: LD_EXP 63
11827: AND
11828: IFFALSE 11848
11830: GO 11832
11832: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
11833: LD_INT 19
11835: PPUSH
11836: LD_OWVAR 2
11840: PPUSH
11841: LD_INT 0
11843: PPUSH
11844: CALL_OW 324
11848: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
11849: LD_EXP 26
11853: PUSH
11854: LD_EXP 35
11858: AND
11859: IFFALSE 11961
11861: GO 11863
11863: DISABLE
11864: LD_INT 0
11866: PPUSH
11867: PPUSH
// begin enable ;
11868: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
11869: LD_ADDR_VAR 0 2
11873: PUSH
11874: LD_INT 22
11876: PUSH
11877: LD_OWVAR 2
11881: PUSH
11882: EMPTY
11883: LIST
11884: LIST
11885: PUSH
11886: LD_INT 2
11888: PUSH
11889: LD_INT 34
11891: PUSH
11892: LD_INT 11
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: PUSH
11899: LD_INT 34
11901: PUSH
11902: LD_INT 30
11904: PUSH
11905: EMPTY
11906: LIST
11907: LIST
11908: PUSH
11909: EMPTY
11910: LIST
11911: LIST
11912: LIST
11913: PUSH
11914: EMPTY
11915: LIST
11916: LIST
11917: PPUSH
11918: CALL_OW 69
11922: ST_TO_ADDR
// if not tmp then
11923: LD_VAR 0 2
11927: NOT
11928: IFFALSE 11932
// exit ;
11930: GO 11961
// for i in tmp do
11932: LD_ADDR_VAR 0 1
11936: PUSH
11937: LD_VAR 0 2
11941: PUSH
11942: FOR_IN
11943: IFFALSE 11959
// begin SetLives ( i , 0 ) ;
11945: LD_VAR 0 1
11949: PPUSH
11950: LD_INT 0
11952: PPUSH
11953: CALL_OW 234
// end ;
11957: GO 11942
11959: POP
11960: POP
// end ;
11961: PPOPN 2
11963: END
// every 0 0$1 trigger StreamModeActive and sBunker do
11964: LD_EXP 26
11968: PUSH
11969: LD_EXP 36
11973: AND
11974: IFFALSE 11994
11976: GO 11978
11978: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
11979: LD_INT 32
11981: PPUSH
11982: LD_OWVAR 2
11986: PPUSH
11987: LD_INT 0
11989: PPUSH
11990: CALL_OW 324
11994: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
11995: LD_EXP 26
11999: PUSH
12000: LD_EXP 37
12004: AND
12005: IFFALSE 12186
12007: GO 12009
12009: DISABLE
12010: LD_INT 0
12012: PPUSH
12013: PPUSH
12014: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12015: LD_ADDR_VAR 0 2
12019: PUSH
12020: LD_INT 22
12022: PUSH
12023: LD_OWVAR 2
12027: PUSH
12028: EMPTY
12029: LIST
12030: LIST
12031: PUSH
12032: LD_INT 33
12034: PUSH
12035: LD_INT 3
12037: PUSH
12038: EMPTY
12039: LIST
12040: LIST
12041: PUSH
12042: EMPTY
12043: LIST
12044: LIST
12045: PPUSH
12046: CALL_OW 69
12050: ST_TO_ADDR
// if not tmp then
12051: LD_VAR 0 2
12055: NOT
12056: IFFALSE 12060
// exit ;
12058: GO 12186
// side := 0 ;
12060: LD_ADDR_VAR 0 3
12064: PUSH
12065: LD_INT 0
12067: ST_TO_ADDR
// for i := 1 to 8 do
12068: LD_ADDR_VAR 0 1
12072: PUSH
12073: DOUBLE
12074: LD_INT 1
12076: DEC
12077: ST_TO_ADDR
12078: LD_INT 8
12080: PUSH
12081: FOR_TO
12082: IFFALSE 12130
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12084: LD_OWVAR 2
12088: PUSH
12089: LD_VAR 0 1
12093: NONEQUAL
12094: PUSH
12095: LD_OWVAR 2
12099: PPUSH
12100: LD_VAR 0 1
12104: PPUSH
12105: CALL_OW 81
12109: PUSH
12110: LD_INT 2
12112: EQUAL
12113: AND
12114: IFFALSE 12128
// begin side := i ;
12116: LD_ADDR_VAR 0 3
12120: PUSH
12121: LD_VAR 0 1
12125: ST_TO_ADDR
// break ;
12126: GO 12130
// end ;
12128: GO 12081
12130: POP
12131: POP
// if not side then
12132: LD_VAR 0 3
12136: NOT
12137: IFFALSE 12141
// exit ;
12139: GO 12186
// for i := 1 to tmp do
12141: LD_ADDR_VAR 0 1
12145: PUSH
12146: DOUBLE
12147: LD_INT 1
12149: DEC
12150: ST_TO_ADDR
12151: LD_VAR 0 2
12155: PUSH
12156: FOR_TO
12157: IFFALSE 12184
// if Prob ( 60 ) then
12159: LD_INT 60
12161: PPUSH
12162: CALL_OW 13
12166: IFFALSE 12182
// SetSide ( i , side ) ;
12168: LD_VAR 0 1
12172: PPUSH
12173: LD_VAR 0 3
12177: PPUSH
12178: CALL_OW 235
12182: GO 12156
12184: POP
12185: POP
// end ;
12186: PPOPN 3
12188: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12189: LD_EXP 26
12193: PUSH
12194: LD_EXP 39
12198: AND
12199: IFFALSE 12318
12201: GO 12203
12203: DISABLE
12204: LD_INT 0
12206: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12207: LD_ADDR_VAR 0 1
12211: PUSH
12212: LD_INT 22
12214: PUSH
12215: LD_OWVAR 2
12219: PUSH
12220: EMPTY
12221: LIST
12222: LIST
12223: PUSH
12224: LD_INT 21
12226: PUSH
12227: LD_INT 1
12229: PUSH
12230: EMPTY
12231: LIST
12232: LIST
12233: PUSH
12234: LD_INT 3
12236: PUSH
12237: LD_INT 23
12239: PUSH
12240: LD_INT 0
12242: PUSH
12243: EMPTY
12244: LIST
12245: LIST
12246: PUSH
12247: EMPTY
12248: LIST
12249: LIST
12250: PUSH
12251: EMPTY
12252: LIST
12253: LIST
12254: LIST
12255: PPUSH
12256: CALL_OW 69
12260: PUSH
12261: FOR_IN
12262: IFFALSE 12316
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12264: LD_VAR 0 1
12268: PPUSH
12269: CALL_OW 257
12273: PUSH
12274: LD_INT 1
12276: PUSH
12277: LD_INT 2
12279: PUSH
12280: LD_INT 3
12282: PUSH
12283: LD_INT 4
12285: PUSH
12286: EMPTY
12287: LIST
12288: LIST
12289: LIST
12290: LIST
12291: IN
12292: IFFALSE 12314
// SetClass ( un , rand ( 1 , 4 ) ) ;
12294: LD_VAR 0 1
12298: PPUSH
12299: LD_INT 1
12301: PPUSH
12302: LD_INT 4
12304: PPUSH
12305: CALL_OW 12
12309: PPUSH
12310: CALL_OW 336
12314: GO 12261
12316: POP
12317: POP
// end ;
12318: PPOPN 1
12320: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12321: LD_EXP 26
12325: PUSH
12326: LD_EXP 38
12330: AND
12331: IFFALSE 12410
12333: GO 12335
12335: DISABLE
12336: LD_INT 0
12338: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12339: LD_ADDR_VAR 0 1
12343: PUSH
12344: LD_INT 22
12346: PUSH
12347: LD_OWVAR 2
12351: PUSH
12352: EMPTY
12353: LIST
12354: LIST
12355: PUSH
12356: LD_INT 21
12358: PUSH
12359: LD_INT 3
12361: PUSH
12362: EMPTY
12363: LIST
12364: LIST
12365: PUSH
12366: EMPTY
12367: LIST
12368: LIST
12369: PPUSH
12370: CALL_OW 69
12374: ST_TO_ADDR
// if not tmp then
12375: LD_VAR 0 1
12379: NOT
12380: IFFALSE 12384
// exit ;
12382: GO 12410
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12384: LD_VAR 0 1
12388: PUSH
12389: LD_INT 1
12391: PPUSH
12392: LD_VAR 0 1
12396: PPUSH
12397: CALL_OW 12
12401: ARRAY
12402: PPUSH
12403: LD_INT 100
12405: PPUSH
12406: CALL_OW 234
// end ;
12410: PPOPN 1
12412: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12413: LD_EXP 26
12417: PUSH
12418: LD_EXP 40
12422: AND
12423: IFFALSE 12521
12425: GO 12427
12427: DISABLE
12428: LD_INT 0
12430: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12431: LD_ADDR_VAR 0 1
12435: PUSH
12436: LD_INT 22
12438: PUSH
12439: LD_OWVAR 2
12443: PUSH
12444: EMPTY
12445: LIST
12446: LIST
12447: PUSH
12448: LD_INT 21
12450: PUSH
12451: LD_INT 1
12453: PUSH
12454: EMPTY
12455: LIST
12456: LIST
12457: PUSH
12458: EMPTY
12459: LIST
12460: LIST
12461: PPUSH
12462: CALL_OW 69
12466: ST_TO_ADDR
// if not tmp then
12467: LD_VAR 0 1
12471: NOT
12472: IFFALSE 12476
// exit ;
12474: GO 12521
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12476: LD_VAR 0 1
12480: PUSH
12481: LD_INT 1
12483: PPUSH
12484: LD_VAR 0 1
12488: PPUSH
12489: CALL_OW 12
12493: ARRAY
12494: PPUSH
12495: LD_INT 1
12497: PPUSH
12498: LD_INT 4
12500: PPUSH
12501: CALL_OW 12
12505: PPUSH
12506: LD_INT 3000
12508: PPUSH
12509: LD_INT 9000
12511: PPUSH
12512: CALL_OW 12
12516: PPUSH
12517: CALL_OW 492
// end ;
12521: PPOPN 1
12523: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12524: LD_EXP 26
12528: PUSH
12529: LD_EXP 41
12533: AND
12534: IFFALSE 12554
12536: GO 12538
12538: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
12539: LD_INT 1
12541: PPUSH
12542: LD_OWVAR 2
12546: PPUSH
12547: LD_INT 0
12549: PPUSH
12550: CALL_OW 324
12554: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
12555: LD_EXP 26
12559: PUSH
12560: LD_EXP 42
12564: AND
12565: IFFALSE 12648
12567: GO 12569
12569: DISABLE
12570: LD_INT 0
12572: PPUSH
12573: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12574: LD_ADDR_VAR 0 2
12578: PUSH
12579: LD_INT 22
12581: PUSH
12582: LD_OWVAR 2
12586: PUSH
12587: EMPTY
12588: LIST
12589: LIST
12590: PUSH
12591: LD_INT 21
12593: PUSH
12594: LD_INT 3
12596: PUSH
12597: EMPTY
12598: LIST
12599: LIST
12600: PUSH
12601: EMPTY
12602: LIST
12603: LIST
12604: PPUSH
12605: CALL_OW 69
12609: ST_TO_ADDR
// if not tmp then
12610: LD_VAR 0 2
12614: NOT
12615: IFFALSE 12619
// exit ;
12617: GO 12648
// for i in tmp do
12619: LD_ADDR_VAR 0 1
12623: PUSH
12624: LD_VAR 0 2
12628: PUSH
12629: FOR_IN
12630: IFFALSE 12646
// SetBLevel ( i , 10 ) ;
12632: LD_VAR 0 1
12636: PPUSH
12637: LD_INT 10
12639: PPUSH
12640: CALL_OW 241
12644: GO 12629
12646: POP
12647: POP
// end ;
12648: PPOPN 2
12650: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12651: LD_EXP 26
12655: PUSH
12656: LD_EXP 43
12660: AND
12661: IFFALSE 12772
12663: GO 12665
12665: DISABLE
12666: LD_INT 0
12668: PPUSH
12669: PPUSH
12670: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12671: LD_ADDR_VAR 0 3
12675: PUSH
12676: LD_INT 22
12678: PUSH
12679: LD_OWVAR 2
12683: PUSH
12684: EMPTY
12685: LIST
12686: LIST
12687: PUSH
12688: LD_INT 25
12690: PUSH
12691: LD_INT 1
12693: PUSH
12694: EMPTY
12695: LIST
12696: LIST
12697: PUSH
12698: EMPTY
12699: LIST
12700: LIST
12701: PPUSH
12702: CALL_OW 69
12706: ST_TO_ADDR
// if not tmp then
12707: LD_VAR 0 3
12711: NOT
12712: IFFALSE 12716
// exit ;
12714: GO 12772
// un := tmp [ rand ( 1 , tmp ) ] ;
12716: LD_ADDR_VAR 0 2
12720: PUSH
12721: LD_VAR 0 3
12725: PUSH
12726: LD_INT 1
12728: PPUSH
12729: LD_VAR 0 3
12733: PPUSH
12734: CALL_OW 12
12738: ARRAY
12739: ST_TO_ADDR
// if Crawls ( un ) then
12740: LD_VAR 0 2
12744: PPUSH
12745: CALL_OW 318
12749: IFFALSE 12760
// ComWalk ( un ) ;
12751: LD_VAR 0 2
12755: PPUSH
12756: CALL_OW 138
// SetClass ( un , class_sniper ) ;
12760: LD_VAR 0 2
12764: PPUSH
12765: LD_INT 5
12767: PPUSH
12768: CALL_OW 336
// end ;
12772: PPOPN 3
12774: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
12775: LD_EXP 26
12779: PUSH
12780: LD_EXP 44
12784: AND
12785: PUSH
12786: LD_OWVAR 67
12790: PUSH
12791: LD_INT 3
12793: LESS
12794: AND
12795: IFFALSE 12814
12797: GO 12799
12799: DISABLE
// Difficulty := Difficulty + 1 ;
12800: LD_ADDR_OWVAR 67
12804: PUSH
12805: LD_OWVAR 67
12809: PUSH
12810: LD_INT 1
12812: PLUS
12813: ST_TO_ADDR
12814: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
12815: LD_EXP 26
12819: PUSH
12820: LD_EXP 45
12824: AND
12825: IFFALSE 12928
12827: GO 12829
12829: DISABLE
12830: LD_INT 0
12832: PPUSH
// begin for i := 1 to 5 do
12833: LD_ADDR_VAR 0 1
12837: PUSH
12838: DOUBLE
12839: LD_INT 1
12841: DEC
12842: ST_TO_ADDR
12843: LD_INT 5
12845: PUSH
12846: FOR_TO
12847: IFFALSE 12926
// begin uc_nation := nation_nature ;
12849: LD_ADDR_OWVAR 21
12853: PUSH
12854: LD_INT 0
12856: ST_TO_ADDR
// uc_side := 0 ;
12857: LD_ADDR_OWVAR 20
12861: PUSH
12862: LD_INT 0
12864: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12865: LD_ADDR_OWVAR 29
12869: PUSH
12870: LD_INT 12
12872: PUSH
12873: LD_INT 12
12875: PUSH
12876: EMPTY
12877: LIST
12878: LIST
12879: ST_TO_ADDR
// hc_agressivity := 20 ;
12880: LD_ADDR_OWVAR 35
12884: PUSH
12885: LD_INT 20
12887: ST_TO_ADDR
// hc_class := class_tiger ;
12888: LD_ADDR_OWVAR 28
12892: PUSH
12893: LD_INT 14
12895: ST_TO_ADDR
// hc_gallery :=  ;
12896: LD_ADDR_OWVAR 33
12900: PUSH
12901: LD_STRING 
12903: ST_TO_ADDR
// hc_name :=  ;
12904: LD_ADDR_OWVAR 26
12908: PUSH
12909: LD_STRING 
12911: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
12912: CALL_OW 44
12916: PPUSH
12917: LD_INT 0
12919: PPUSH
12920: CALL_OW 51
// end ;
12924: GO 12846
12926: POP
12927: POP
// end ;
12928: PPOPN 1
12930: END
// every 0 0$1 trigger StreamModeActive and sBomb do
12931: LD_EXP 26
12935: PUSH
12936: LD_EXP 46
12940: AND
12941: IFFALSE 12950
12943: GO 12945
12945: DISABLE
// StreamSibBomb ;
12946: CALL 12951 0 0
12950: END
// export function StreamSibBomb ; var i , x , y ; begin
12951: LD_INT 0
12953: PPUSH
12954: PPUSH
12955: PPUSH
12956: PPUSH
// result := false ;
12957: LD_ADDR_VAR 0 1
12961: PUSH
12962: LD_INT 0
12964: ST_TO_ADDR
// for i := 1 to 16 do
12965: LD_ADDR_VAR 0 2
12969: PUSH
12970: DOUBLE
12971: LD_INT 1
12973: DEC
12974: ST_TO_ADDR
12975: LD_INT 16
12977: PUSH
12978: FOR_TO
12979: IFFALSE 13178
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12981: LD_ADDR_VAR 0 3
12985: PUSH
12986: LD_INT 10
12988: PUSH
12989: LD_INT 20
12991: PUSH
12992: LD_INT 30
12994: PUSH
12995: LD_INT 40
12997: PUSH
12998: LD_INT 50
13000: PUSH
13001: LD_INT 60
13003: PUSH
13004: LD_INT 70
13006: PUSH
13007: LD_INT 80
13009: PUSH
13010: LD_INT 90
13012: PUSH
13013: LD_INT 100
13015: PUSH
13016: LD_INT 110
13018: PUSH
13019: LD_INT 120
13021: PUSH
13022: LD_INT 130
13024: PUSH
13025: LD_INT 140
13027: PUSH
13028: LD_INT 150
13030: PUSH
13031: EMPTY
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: LIST
13043: LIST
13044: LIST
13045: LIST
13046: LIST
13047: PUSH
13048: LD_INT 1
13050: PPUSH
13051: LD_INT 15
13053: PPUSH
13054: CALL_OW 12
13058: ARRAY
13059: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13060: LD_ADDR_VAR 0 4
13064: PUSH
13065: LD_INT 10
13067: PUSH
13068: LD_INT 20
13070: PUSH
13071: LD_INT 30
13073: PUSH
13074: LD_INT 40
13076: PUSH
13077: LD_INT 50
13079: PUSH
13080: LD_INT 60
13082: PUSH
13083: LD_INT 70
13085: PUSH
13086: LD_INT 80
13088: PUSH
13089: LD_INT 90
13091: PUSH
13092: LD_INT 100
13094: PUSH
13095: LD_INT 110
13097: PUSH
13098: LD_INT 120
13100: PUSH
13101: LD_INT 130
13103: PUSH
13104: LD_INT 140
13106: PUSH
13107: LD_INT 150
13109: PUSH
13110: EMPTY
13111: LIST
13112: LIST
13113: LIST
13114: LIST
13115: LIST
13116: LIST
13117: LIST
13118: LIST
13119: LIST
13120: LIST
13121: LIST
13122: LIST
13123: LIST
13124: LIST
13125: LIST
13126: PUSH
13127: LD_INT 1
13129: PPUSH
13130: LD_INT 15
13132: PPUSH
13133: CALL_OW 12
13137: ARRAY
13138: ST_TO_ADDR
// if ValidHex ( x , y ) then
13139: LD_VAR 0 3
13143: PPUSH
13144: LD_VAR 0 4
13148: PPUSH
13149: CALL_OW 488
13153: IFFALSE 13176
// begin result := [ x , y ] ;
13155: LD_ADDR_VAR 0 1
13159: PUSH
13160: LD_VAR 0 3
13164: PUSH
13165: LD_VAR 0 4
13169: PUSH
13170: EMPTY
13171: LIST
13172: LIST
13173: ST_TO_ADDR
// break ;
13174: GO 13178
// end ; end ;
13176: GO 12978
13178: POP
13179: POP
// if result then
13180: LD_VAR 0 1
13184: IFFALSE 13244
// begin ToLua ( playSibBomb() ) ;
13186: LD_STRING playSibBomb()
13188: PPUSH
13189: CALL_OW 559
// wait ( 0 0$14 ) ;
13193: LD_INT 490
13195: PPUSH
13196: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13200: LD_VAR 0 1
13204: PUSH
13205: LD_INT 1
13207: ARRAY
13208: PPUSH
13209: LD_VAR 0 1
13213: PUSH
13214: LD_INT 2
13216: ARRAY
13217: PPUSH
13218: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13222: LD_VAR 0 1
13226: PUSH
13227: LD_INT 1
13229: ARRAY
13230: PPUSH
13231: LD_VAR 0 1
13235: PUSH
13236: LD_INT 2
13238: ARRAY
13239: PPUSH
13240: CALL_OW 429
// end ; end ;
13244: LD_VAR 0 1
13248: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13249: LD_EXP 26
13253: PUSH
13254: LD_EXP 48
13258: AND
13259: IFFALSE 13271
13261: GO 13263
13263: DISABLE
// YouLost (  ) ;
13264: LD_STRING 
13266: PPUSH
13267: CALL_OW 104
13271: END
// every 0 0$1 trigger StreamModeActive and sFog do
13272: LD_EXP 26
13276: PUSH
13277: LD_EXP 47
13281: AND
13282: IFFALSE 13296
13284: GO 13286
13286: DISABLE
// FogOff ( your_side ) ;
13287: LD_OWVAR 2
13291: PPUSH
13292: CALL_OW 344
13296: END
// every 0 0$1 trigger StreamModeActive and sSun do
13297: LD_EXP 26
13301: PUSH
13302: LD_EXP 49
13306: AND
13307: IFFALSE 13335
13309: GO 13311
13311: DISABLE
// begin solar_recharge_percent := 0 ;
13312: LD_ADDR_OWVAR 79
13316: PUSH
13317: LD_INT 0
13319: ST_TO_ADDR
// wait ( 5 5$00 ) ;
13320: LD_INT 10500
13322: PPUSH
13323: CALL_OW 67
// solar_recharge_percent := 100 ;
13327: LD_ADDR_OWVAR 79
13331: PUSH
13332: LD_INT 100
13334: ST_TO_ADDR
// end ;
13335: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13336: LD_EXP 26
13340: PUSH
13341: LD_EXP 50
13345: AND
13346: IFFALSE 13585
13348: GO 13350
13350: DISABLE
13351: LD_INT 0
13353: PPUSH
13354: PPUSH
13355: PPUSH
// begin tmp := [ ] ;
13356: LD_ADDR_VAR 0 3
13360: PUSH
13361: EMPTY
13362: ST_TO_ADDR
// for i := 1 to 6 do
13363: LD_ADDR_VAR 0 1
13367: PUSH
13368: DOUBLE
13369: LD_INT 1
13371: DEC
13372: ST_TO_ADDR
13373: LD_INT 6
13375: PUSH
13376: FOR_TO
13377: IFFALSE 13482
// begin uc_nation := nation_nature ;
13379: LD_ADDR_OWVAR 21
13383: PUSH
13384: LD_INT 0
13386: ST_TO_ADDR
// uc_side := 0 ;
13387: LD_ADDR_OWVAR 20
13391: PUSH
13392: LD_INT 0
13394: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13395: LD_ADDR_OWVAR 29
13399: PUSH
13400: LD_INT 12
13402: PUSH
13403: LD_INT 12
13405: PUSH
13406: EMPTY
13407: LIST
13408: LIST
13409: ST_TO_ADDR
// hc_agressivity := 20 ;
13410: LD_ADDR_OWVAR 35
13414: PUSH
13415: LD_INT 20
13417: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13418: LD_ADDR_OWVAR 28
13422: PUSH
13423: LD_INT 17
13425: ST_TO_ADDR
// hc_gallery :=  ;
13426: LD_ADDR_OWVAR 33
13430: PUSH
13431: LD_STRING 
13433: ST_TO_ADDR
// hc_name :=  ;
13434: LD_ADDR_OWVAR 26
13438: PUSH
13439: LD_STRING 
13441: ST_TO_ADDR
// un := CreateHuman ;
13442: LD_ADDR_VAR 0 2
13446: PUSH
13447: CALL_OW 44
13451: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13452: LD_VAR 0 2
13456: PPUSH
13457: LD_INT 1
13459: PPUSH
13460: CALL_OW 51
// tmp := tmp ^ un ;
13464: LD_ADDR_VAR 0 3
13468: PUSH
13469: LD_VAR 0 3
13473: PUSH
13474: LD_VAR 0 2
13478: ADD
13479: ST_TO_ADDR
// end ;
13480: GO 13376
13482: POP
13483: POP
// repeat wait ( 0 0$1 ) ;
13484: LD_INT 35
13486: PPUSH
13487: CALL_OW 67
// for un in tmp do
13491: LD_ADDR_VAR 0 2
13495: PUSH
13496: LD_VAR 0 3
13500: PUSH
13501: FOR_IN
13502: IFFALSE 13576
// begin if IsDead ( un ) then
13504: LD_VAR 0 2
13508: PPUSH
13509: CALL_OW 301
13513: IFFALSE 13533
// begin tmp := tmp diff un ;
13515: LD_ADDR_VAR 0 3
13519: PUSH
13520: LD_VAR 0 3
13524: PUSH
13525: LD_VAR 0 2
13529: DIFF
13530: ST_TO_ADDR
// continue ;
13531: GO 13501
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13533: LD_VAR 0 2
13537: PPUSH
13538: LD_INT 3
13540: PUSH
13541: LD_INT 22
13543: PUSH
13544: LD_INT 0
13546: PUSH
13547: EMPTY
13548: LIST
13549: LIST
13550: PUSH
13551: EMPTY
13552: LIST
13553: LIST
13554: PPUSH
13555: CALL_OW 69
13559: PPUSH
13560: LD_VAR 0 2
13564: PPUSH
13565: CALL_OW 74
13569: PPUSH
13570: CALL_OW 115
// end ;
13574: GO 13501
13576: POP
13577: POP
// until not tmp ;
13578: LD_VAR 0 3
13582: NOT
13583: IFFALSE 13484
// end ;
13585: PPOPN 3
13587: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13588: LD_EXP 26
13592: PUSH
13593: LD_EXP 51
13597: AND
13598: IFFALSE 13652
13600: GO 13602
13602: DISABLE
// begin ToLua ( displayTroll(); ) ;
13603: LD_STRING displayTroll();
13605: PPUSH
13606: CALL_OW 559
// wait ( 3 3$00 ) ;
13610: LD_INT 6300
13612: PPUSH
13613: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13617: LD_STRING hideTroll();
13619: PPUSH
13620: CALL_OW 559
// wait ( 1 1$00 ) ;
13624: LD_INT 2100
13626: PPUSH
13627: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13631: LD_STRING displayTroll();
13633: PPUSH
13634: CALL_OW 559
// wait ( 1 1$00 ) ;
13638: LD_INT 2100
13640: PPUSH
13641: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13645: LD_STRING hideTroll();
13647: PPUSH
13648: CALL_OW 559
// end ;
13652: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13653: LD_EXP 26
13657: PUSH
13658: LD_EXP 52
13662: AND
13663: IFFALSE 13726
13665: GO 13667
13667: DISABLE
13668: LD_INT 0
13670: PPUSH
// begin p := 0 ;
13671: LD_ADDR_VAR 0 1
13675: PUSH
13676: LD_INT 0
13678: ST_TO_ADDR
// repeat game_speed := 1 ;
13679: LD_ADDR_OWVAR 65
13683: PUSH
13684: LD_INT 1
13686: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13687: LD_INT 35
13689: PPUSH
13690: CALL_OW 67
// p := p + 1 ;
13694: LD_ADDR_VAR 0 1
13698: PUSH
13699: LD_VAR 0 1
13703: PUSH
13704: LD_INT 1
13706: PLUS
13707: ST_TO_ADDR
// until p >= 60 ;
13708: LD_VAR 0 1
13712: PUSH
13713: LD_INT 60
13715: GREATEREQUAL
13716: IFFALSE 13679
// game_speed := 4 ;
13718: LD_ADDR_OWVAR 65
13722: PUSH
13723: LD_INT 4
13725: ST_TO_ADDR
// end ;
13726: PPOPN 1
13728: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
13729: LD_EXP 26
13733: PUSH
13734: LD_EXP 53
13738: AND
13739: IFFALSE 13885
13741: GO 13743
13743: DISABLE
13744: LD_INT 0
13746: PPUSH
13747: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13748: LD_ADDR_VAR 0 1
13752: PUSH
13753: LD_INT 22
13755: PUSH
13756: LD_OWVAR 2
13760: PUSH
13761: EMPTY
13762: LIST
13763: LIST
13764: PUSH
13765: LD_INT 2
13767: PUSH
13768: LD_INT 30
13770: PUSH
13771: LD_INT 0
13773: PUSH
13774: EMPTY
13775: LIST
13776: LIST
13777: PUSH
13778: LD_INT 30
13780: PUSH
13781: LD_INT 1
13783: PUSH
13784: EMPTY
13785: LIST
13786: LIST
13787: PUSH
13788: EMPTY
13789: LIST
13790: LIST
13791: LIST
13792: PUSH
13793: EMPTY
13794: LIST
13795: LIST
13796: PPUSH
13797: CALL_OW 69
13801: ST_TO_ADDR
// if not depot then
13802: LD_VAR 0 1
13806: NOT
13807: IFFALSE 13811
// exit ;
13809: GO 13885
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
13811: LD_ADDR_VAR 0 2
13815: PUSH
13816: LD_VAR 0 1
13820: PUSH
13821: LD_INT 1
13823: PPUSH
13824: LD_VAR 0 1
13828: PPUSH
13829: CALL_OW 12
13833: ARRAY
13834: PPUSH
13835: CALL_OW 274
13839: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
13840: LD_VAR 0 2
13844: PPUSH
13845: LD_INT 1
13847: PPUSH
13848: LD_INT 0
13850: PPUSH
13851: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
13855: LD_VAR 0 2
13859: PPUSH
13860: LD_INT 2
13862: PPUSH
13863: LD_INT 0
13865: PPUSH
13866: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
13870: LD_VAR 0 2
13874: PPUSH
13875: LD_INT 3
13877: PPUSH
13878: LD_INT 0
13880: PPUSH
13881: CALL_OW 277
// end ;
13885: PPOPN 2
13887: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
13888: LD_EXP 26
13892: PUSH
13893: LD_EXP 54
13897: AND
13898: IFFALSE 13995
13900: GO 13902
13902: DISABLE
13903: LD_INT 0
13905: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13906: LD_ADDR_VAR 0 1
13910: PUSH
13911: LD_INT 22
13913: PUSH
13914: LD_OWVAR 2
13918: PUSH
13919: EMPTY
13920: LIST
13921: LIST
13922: PUSH
13923: LD_INT 21
13925: PUSH
13926: LD_INT 1
13928: PUSH
13929: EMPTY
13930: LIST
13931: LIST
13932: PUSH
13933: LD_INT 3
13935: PUSH
13936: LD_INT 23
13938: PUSH
13939: LD_INT 0
13941: PUSH
13942: EMPTY
13943: LIST
13944: LIST
13945: PUSH
13946: EMPTY
13947: LIST
13948: LIST
13949: PUSH
13950: EMPTY
13951: LIST
13952: LIST
13953: LIST
13954: PPUSH
13955: CALL_OW 69
13959: ST_TO_ADDR
// if not tmp then
13960: LD_VAR 0 1
13964: NOT
13965: IFFALSE 13969
// exit ;
13967: GO 13995
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
13969: LD_VAR 0 1
13973: PUSH
13974: LD_INT 1
13976: PPUSH
13977: LD_VAR 0 1
13981: PPUSH
13982: CALL_OW 12
13986: ARRAY
13987: PPUSH
13988: LD_INT 200
13990: PPUSH
13991: CALL_OW 234
// end ;
13995: PPOPN 1
13997: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
13998: LD_EXP 26
14002: PUSH
14003: LD_EXP 55
14007: AND
14008: IFFALSE 14087
14010: GO 14012
14012: DISABLE
14013: LD_INT 0
14015: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14016: LD_ADDR_VAR 0 1
14020: PUSH
14021: LD_INT 22
14023: PUSH
14024: LD_OWVAR 2
14028: PUSH
14029: EMPTY
14030: LIST
14031: LIST
14032: PUSH
14033: LD_INT 21
14035: PUSH
14036: LD_INT 2
14038: PUSH
14039: EMPTY
14040: LIST
14041: LIST
14042: PUSH
14043: EMPTY
14044: LIST
14045: LIST
14046: PPUSH
14047: CALL_OW 69
14051: ST_TO_ADDR
// if not tmp then
14052: LD_VAR 0 1
14056: NOT
14057: IFFALSE 14061
// exit ;
14059: GO 14087
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14061: LD_VAR 0 1
14065: PUSH
14066: LD_INT 1
14068: PPUSH
14069: LD_VAR 0 1
14073: PPUSH
14074: CALL_OW 12
14078: ARRAY
14079: PPUSH
14080: LD_INT 60
14082: PPUSH
14083: CALL_OW 234
// end ;
14087: PPOPN 1
14089: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14090: LD_EXP 26
14094: PUSH
14095: LD_EXP 56
14099: AND
14100: IFFALSE 14199
14102: GO 14104
14104: DISABLE
14105: LD_INT 0
14107: PPUSH
14108: PPUSH
// begin enable ;
14109: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14110: LD_ADDR_VAR 0 1
14114: PUSH
14115: LD_INT 22
14117: PUSH
14118: LD_OWVAR 2
14122: PUSH
14123: EMPTY
14124: LIST
14125: LIST
14126: PUSH
14127: LD_INT 61
14129: PUSH
14130: EMPTY
14131: LIST
14132: PUSH
14133: LD_INT 33
14135: PUSH
14136: LD_INT 2
14138: PUSH
14139: EMPTY
14140: LIST
14141: LIST
14142: PUSH
14143: EMPTY
14144: LIST
14145: LIST
14146: LIST
14147: PPUSH
14148: CALL_OW 69
14152: ST_TO_ADDR
// if not tmp then
14153: LD_VAR 0 1
14157: NOT
14158: IFFALSE 14162
// exit ;
14160: GO 14199
// for i in tmp do
14162: LD_ADDR_VAR 0 2
14166: PUSH
14167: LD_VAR 0 1
14171: PUSH
14172: FOR_IN
14173: IFFALSE 14197
// if IsControledBy ( i ) then
14175: LD_VAR 0 2
14179: PPUSH
14180: CALL_OW 312
14184: IFFALSE 14195
// ComUnlink ( i ) ;
14186: LD_VAR 0 2
14190: PPUSH
14191: CALL_OW 136
14195: GO 14172
14197: POP
14198: POP
// end ;
14199: PPOPN 2
14201: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14202: LD_EXP 26
14206: PUSH
14207: LD_EXP 57
14211: AND
14212: IFFALSE 14352
14214: GO 14216
14216: DISABLE
14217: LD_INT 0
14219: PPUSH
14220: PPUSH
// begin ToLua ( displayPowell(); ) ;
14221: LD_STRING displayPowell();
14223: PPUSH
14224: CALL_OW 559
// uc_side := 0 ;
14228: LD_ADDR_OWVAR 20
14232: PUSH
14233: LD_INT 0
14235: ST_TO_ADDR
// uc_nation := 2 ;
14236: LD_ADDR_OWVAR 21
14240: PUSH
14241: LD_INT 2
14243: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14244: LD_ADDR_OWVAR 37
14248: PUSH
14249: LD_INT 14
14251: ST_TO_ADDR
// vc_engine := engine_siberite ;
14252: LD_ADDR_OWVAR 39
14256: PUSH
14257: LD_INT 3
14259: ST_TO_ADDR
// vc_control := control_apeman ;
14260: LD_ADDR_OWVAR 38
14264: PUSH
14265: LD_INT 5
14267: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
14268: LD_ADDR_OWVAR 40
14272: PUSH
14273: LD_INT 29
14275: ST_TO_ADDR
// un := CreateVehicle ;
14276: LD_ADDR_VAR 0 2
14280: PUSH
14281: CALL_OW 45
14285: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14286: LD_VAR 0 2
14290: PPUSH
14291: LD_INT 1
14293: PPUSH
14294: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14298: LD_INT 35
14300: PPUSH
14301: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14305: LD_VAR 0 2
14309: PPUSH
14310: LD_INT 22
14312: PUSH
14313: LD_OWVAR 2
14317: PUSH
14318: EMPTY
14319: LIST
14320: LIST
14321: PPUSH
14322: CALL_OW 69
14326: PPUSH
14327: LD_VAR 0 2
14331: PPUSH
14332: CALL_OW 74
14336: PPUSH
14337: CALL_OW 115
// until IsDead ( un ) ;
14341: LD_VAR 0 2
14345: PPUSH
14346: CALL_OW 301
14350: IFFALSE 14298
// end ;
14352: PPOPN 2
14354: END
// every 0 0$1 trigger StreamModeActive and sStu do
14355: LD_EXP 26
14359: PUSH
14360: LD_EXP 65
14364: AND
14365: IFFALSE 14381
14367: GO 14369
14369: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14370: LD_STRING displayStucuk();
14372: PPUSH
14373: CALL_OW 559
// ResetFog ;
14377: CALL_OW 335
// end ;
14381: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14382: LD_EXP 26
14386: PUSH
14387: LD_EXP 58
14391: AND
14392: IFFALSE 14533
14394: GO 14396
14396: DISABLE
14397: LD_INT 0
14399: PPUSH
14400: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14401: LD_ADDR_VAR 0 2
14405: PUSH
14406: LD_INT 22
14408: PUSH
14409: LD_OWVAR 2
14413: PUSH
14414: EMPTY
14415: LIST
14416: LIST
14417: PUSH
14418: LD_INT 21
14420: PUSH
14421: LD_INT 1
14423: PUSH
14424: EMPTY
14425: LIST
14426: LIST
14427: PUSH
14428: EMPTY
14429: LIST
14430: LIST
14431: PPUSH
14432: CALL_OW 69
14436: ST_TO_ADDR
// if not tmp then
14437: LD_VAR 0 2
14441: NOT
14442: IFFALSE 14446
// exit ;
14444: GO 14533
// un := tmp [ rand ( 1 , tmp ) ] ;
14446: LD_ADDR_VAR 0 1
14450: PUSH
14451: LD_VAR 0 2
14455: PUSH
14456: LD_INT 1
14458: PPUSH
14459: LD_VAR 0 2
14463: PPUSH
14464: CALL_OW 12
14468: ARRAY
14469: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14470: LD_VAR 0 1
14474: PPUSH
14475: LD_INT 0
14477: PPUSH
14478: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14482: LD_VAR 0 1
14486: PPUSH
14487: LD_OWVAR 3
14491: PUSH
14492: LD_VAR 0 1
14496: DIFF
14497: PPUSH
14498: LD_VAR 0 1
14502: PPUSH
14503: CALL_OW 74
14507: PPUSH
14508: CALL_OW 115
// wait ( 0 0$20 ) ;
14512: LD_INT 700
14514: PPUSH
14515: CALL_OW 67
// SetSide ( un , your_side ) ;
14519: LD_VAR 0 1
14523: PPUSH
14524: LD_OWVAR 2
14528: PPUSH
14529: CALL_OW 235
// end ;
14533: PPOPN 2
14535: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
14536: LD_EXP 26
14540: PUSH
14541: LD_EXP 59
14545: AND
14546: IFFALSE 14652
14548: GO 14550
14550: DISABLE
14551: LD_INT 0
14553: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14554: LD_ADDR_VAR 0 1
14558: PUSH
14559: LD_INT 22
14561: PUSH
14562: LD_OWVAR 2
14566: PUSH
14567: EMPTY
14568: LIST
14569: LIST
14570: PUSH
14571: LD_INT 2
14573: PUSH
14574: LD_INT 30
14576: PUSH
14577: LD_INT 0
14579: PUSH
14580: EMPTY
14581: LIST
14582: LIST
14583: PUSH
14584: LD_INT 30
14586: PUSH
14587: LD_INT 1
14589: PUSH
14590: EMPTY
14591: LIST
14592: LIST
14593: PUSH
14594: EMPTY
14595: LIST
14596: LIST
14597: LIST
14598: PUSH
14599: EMPTY
14600: LIST
14601: LIST
14602: PPUSH
14603: CALL_OW 69
14607: ST_TO_ADDR
// if not depot then
14608: LD_VAR 0 1
14612: NOT
14613: IFFALSE 14617
// exit ;
14615: GO 14652
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14617: LD_VAR 0 1
14621: PUSH
14622: LD_INT 1
14624: ARRAY
14625: PPUSH
14626: CALL_OW 250
14630: PPUSH
14631: LD_VAR 0 1
14635: PUSH
14636: LD_INT 1
14638: ARRAY
14639: PPUSH
14640: CALL_OW 251
14644: PPUSH
14645: LD_INT 70
14647: PPUSH
14648: CALL_OW 495
// end ;
14652: PPOPN 1
14654: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14655: LD_EXP 26
14659: PUSH
14660: LD_EXP 60
14664: AND
14665: IFFALSE 14876
14667: GO 14669
14669: DISABLE
14670: LD_INT 0
14672: PPUSH
14673: PPUSH
14674: PPUSH
14675: PPUSH
14676: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14677: LD_ADDR_VAR 0 5
14681: PUSH
14682: LD_INT 22
14684: PUSH
14685: LD_OWVAR 2
14689: PUSH
14690: EMPTY
14691: LIST
14692: LIST
14693: PUSH
14694: LD_INT 21
14696: PUSH
14697: LD_INT 1
14699: PUSH
14700: EMPTY
14701: LIST
14702: LIST
14703: PUSH
14704: EMPTY
14705: LIST
14706: LIST
14707: PPUSH
14708: CALL_OW 69
14712: ST_TO_ADDR
// if not tmp then
14713: LD_VAR 0 5
14717: NOT
14718: IFFALSE 14722
// exit ;
14720: GO 14876
// for i in tmp do
14722: LD_ADDR_VAR 0 1
14726: PUSH
14727: LD_VAR 0 5
14731: PUSH
14732: FOR_IN
14733: IFFALSE 14874
// begin d := rand ( 0 , 5 ) ;
14735: LD_ADDR_VAR 0 4
14739: PUSH
14740: LD_INT 0
14742: PPUSH
14743: LD_INT 5
14745: PPUSH
14746: CALL_OW 12
14750: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
14751: LD_ADDR_VAR 0 2
14755: PUSH
14756: LD_VAR 0 1
14760: PPUSH
14761: CALL_OW 250
14765: PPUSH
14766: LD_VAR 0 4
14770: PPUSH
14771: LD_INT 3
14773: PPUSH
14774: LD_INT 12
14776: PPUSH
14777: CALL_OW 12
14781: PPUSH
14782: CALL_OW 272
14786: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
14787: LD_ADDR_VAR 0 3
14791: PUSH
14792: LD_VAR 0 1
14796: PPUSH
14797: CALL_OW 251
14801: PPUSH
14802: LD_VAR 0 4
14806: PPUSH
14807: LD_INT 3
14809: PPUSH
14810: LD_INT 12
14812: PPUSH
14813: CALL_OW 12
14817: PPUSH
14818: CALL_OW 273
14822: ST_TO_ADDR
// if ValidHex ( x , y ) then
14823: LD_VAR 0 2
14827: PPUSH
14828: LD_VAR 0 3
14832: PPUSH
14833: CALL_OW 488
14837: IFFALSE 14872
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
14839: LD_VAR 0 1
14843: PPUSH
14844: LD_VAR 0 2
14848: PPUSH
14849: LD_VAR 0 3
14853: PPUSH
14854: LD_INT 3
14856: PPUSH
14857: LD_INT 6
14859: PPUSH
14860: CALL_OW 12
14864: PPUSH
14865: LD_INT 1
14867: PPUSH
14868: CALL_OW 483
// end ;
14872: GO 14732
14874: POP
14875: POP
// end ;
14876: PPOPN 5
14878: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
14879: LD_EXP 26
14883: PUSH
14884: LD_EXP 61
14888: AND
14889: IFFALSE 14983
14891: GO 14893
14893: DISABLE
14894: LD_INT 0
14896: PPUSH
14897: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
14898: LD_ADDR_VAR 0 2
14902: PUSH
14903: LD_INT 22
14905: PUSH
14906: LD_OWVAR 2
14910: PUSH
14911: EMPTY
14912: LIST
14913: LIST
14914: PUSH
14915: LD_INT 32
14917: PUSH
14918: LD_INT 1
14920: PUSH
14921: EMPTY
14922: LIST
14923: LIST
14924: PUSH
14925: LD_INT 21
14927: PUSH
14928: LD_INT 2
14930: PUSH
14931: EMPTY
14932: LIST
14933: LIST
14934: PUSH
14935: EMPTY
14936: LIST
14937: LIST
14938: LIST
14939: PPUSH
14940: CALL_OW 69
14944: ST_TO_ADDR
// if not tmp then
14945: LD_VAR 0 2
14949: NOT
14950: IFFALSE 14954
// exit ;
14952: GO 14983
// for i in tmp do
14954: LD_ADDR_VAR 0 1
14958: PUSH
14959: LD_VAR 0 2
14963: PUSH
14964: FOR_IN
14965: IFFALSE 14981
// SetFuel ( i , 0 ) ;
14967: LD_VAR 0 1
14971: PPUSH
14972: LD_INT 0
14974: PPUSH
14975: CALL_OW 240
14979: GO 14964
14981: POP
14982: POP
// end ;
14983: PPOPN 2
14985: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
14986: LD_EXP 26
14990: PUSH
14991: LD_EXP 62
14995: AND
14996: IFFALSE 15062
14998: GO 15000
15000: DISABLE
15001: LD_INT 0
15003: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15004: LD_ADDR_VAR 0 1
15008: PUSH
15009: LD_INT 22
15011: PUSH
15012: LD_OWVAR 2
15016: PUSH
15017: EMPTY
15018: LIST
15019: LIST
15020: PUSH
15021: LD_INT 30
15023: PUSH
15024: LD_INT 29
15026: PUSH
15027: EMPTY
15028: LIST
15029: LIST
15030: PUSH
15031: EMPTY
15032: LIST
15033: LIST
15034: PPUSH
15035: CALL_OW 69
15039: ST_TO_ADDR
// if not tmp then
15040: LD_VAR 0 1
15044: NOT
15045: IFFALSE 15049
// exit ;
15047: GO 15062
// DestroyUnit ( tmp [ 1 ] ) ;
15049: LD_VAR 0 1
15053: PUSH
15054: LD_INT 1
15056: ARRAY
15057: PPUSH
15058: CALL_OW 65
// end ;
15062: PPOPN 1
15064: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
15065: LD_EXP 26
15069: PUSH
15070: LD_EXP 64
15074: AND
15075: IFFALSE 15204
15077: GO 15079
15079: DISABLE
15080: LD_INT 0
15082: PPUSH
// begin uc_side := 0 ;
15083: LD_ADDR_OWVAR 20
15087: PUSH
15088: LD_INT 0
15090: ST_TO_ADDR
// uc_nation := nation_arabian ;
15091: LD_ADDR_OWVAR 21
15095: PUSH
15096: LD_INT 2
15098: ST_TO_ADDR
// hc_gallery :=  ;
15099: LD_ADDR_OWVAR 33
15103: PUSH
15104: LD_STRING 
15106: ST_TO_ADDR
// hc_name :=  ;
15107: LD_ADDR_OWVAR 26
15111: PUSH
15112: LD_STRING 
15114: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
15115: LD_INT 1
15117: PPUSH
15118: LD_INT 11
15120: PPUSH
15121: LD_INT 10
15123: PPUSH
15124: CALL_OW 380
// un := CreateHuman ;
15128: LD_ADDR_VAR 0 1
15132: PUSH
15133: CALL_OW 44
15137: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15138: LD_VAR 0 1
15142: PPUSH
15143: LD_INT 1
15145: PPUSH
15146: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15150: LD_INT 35
15152: PPUSH
15153: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15157: LD_VAR 0 1
15161: PPUSH
15162: LD_INT 22
15164: PUSH
15165: LD_OWVAR 2
15169: PUSH
15170: EMPTY
15171: LIST
15172: LIST
15173: PPUSH
15174: CALL_OW 69
15178: PPUSH
15179: LD_VAR 0 1
15183: PPUSH
15184: CALL_OW 74
15188: PPUSH
15189: CALL_OW 115
// until IsDead ( un ) ;
15193: LD_VAR 0 1
15197: PPUSH
15198: CALL_OW 301
15202: IFFALSE 15150
// end ;
15204: PPOPN 1
15206: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15207: LD_EXP 26
15211: PUSH
15212: LD_EXP 66
15216: AND
15217: IFFALSE 15229
15219: GO 15221
15221: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15222: LD_STRING earthquake(getX(game), 0, 32)
15224: PPUSH
15225: CALL_OW 559
15229: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15230: LD_EXP 26
15234: PUSH
15235: LD_EXP 67
15239: AND
15240: IFFALSE 15331
15242: GO 15244
15244: DISABLE
15245: LD_INT 0
15247: PPUSH
// begin enable ;
15248: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15249: LD_ADDR_VAR 0 1
15253: PUSH
15254: LD_INT 22
15256: PUSH
15257: LD_OWVAR 2
15261: PUSH
15262: EMPTY
15263: LIST
15264: LIST
15265: PUSH
15266: LD_INT 21
15268: PUSH
15269: LD_INT 2
15271: PUSH
15272: EMPTY
15273: LIST
15274: LIST
15275: PUSH
15276: LD_INT 33
15278: PUSH
15279: LD_INT 3
15281: PUSH
15282: EMPTY
15283: LIST
15284: LIST
15285: PUSH
15286: EMPTY
15287: LIST
15288: LIST
15289: LIST
15290: PPUSH
15291: CALL_OW 69
15295: ST_TO_ADDR
// if not tmp then
15296: LD_VAR 0 1
15300: NOT
15301: IFFALSE 15305
// exit ;
15303: GO 15331
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15305: LD_VAR 0 1
15309: PUSH
15310: LD_INT 1
15312: PPUSH
15313: LD_VAR 0 1
15317: PPUSH
15318: CALL_OW 12
15322: ARRAY
15323: PPUSH
15324: LD_INT 1
15326: PPUSH
15327: CALL_OW 234
// end ;
15331: PPOPN 1
15333: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15334: LD_EXP 26
15338: PUSH
15339: LD_EXP 68
15343: AND
15344: IFFALSE 15485
15346: GO 15348
15348: DISABLE
15349: LD_INT 0
15351: PPUSH
15352: PPUSH
15353: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15354: LD_ADDR_VAR 0 3
15358: PUSH
15359: LD_INT 22
15361: PUSH
15362: LD_OWVAR 2
15366: PUSH
15367: EMPTY
15368: LIST
15369: LIST
15370: PUSH
15371: LD_INT 25
15373: PUSH
15374: LD_INT 1
15376: PUSH
15377: EMPTY
15378: LIST
15379: LIST
15380: PUSH
15381: EMPTY
15382: LIST
15383: LIST
15384: PPUSH
15385: CALL_OW 69
15389: ST_TO_ADDR
// if not tmp then
15390: LD_VAR 0 3
15394: NOT
15395: IFFALSE 15399
// exit ;
15397: GO 15485
// un := tmp [ rand ( 1 , tmp ) ] ;
15399: LD_ADDR_VAR 0 2
15403: PUSH
15404: LD_VAR 0 3
15408: PUSH
15409: LD_INT 1
15411: PPUSH
15412: LD_VAR 0 3
15416: PPUSH
15417: CALL_OW 12
15421: ARRAY
15422: ST_TO_ADDR
// if Crawls ( un ) then
15423: LD_VAR 0 2
15427: PPUSH
15428: CALL_OW 318
15432: IFFALSE 15443
// ComWalk ( un ) ;
15434: LD_VAR 0 2
15438: PPUSH
15439: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15443: LD_VAR 0 2
15447: PPUSH
15448: LD_INT 9
15450: PPUSH
15451: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15455: LD_INT 28
15457: PPUSH
15458: LD_OWVAR 2
15462: PPUSH
15463: LD_INT 2
15465: PPUSH
15466: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15470: LD_INT 29
15472: PPUSH
15473: LD_OWVAR 2
15477: PPUSH
15478: LD_INT 2
15480: PPUSH
15481: CALL_OW 322
// end ;
15485: PPOPN 3
15487: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15488: LD_EXP 26
15492: PUSH
15493: LD_EXP 69
15497: AND
15498: IFFALSE 15609
15500: GO 15502
15502: DISABLE
15503: LD_INT 0
15505: PPUSH
15506: PPUSH
15507: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15508: LD_ADDR_VAR 0 3
15512: PUSH
15513: LD_INT 22
15515: PUSH
15516: LD_OWVAR 2
15520: PUSH
15521: EMPTY
15522: LIST
15523: LIST
15524: PUSH
15525: LD_INT 25
15527: PUSH
15528: LD_INT 1
15530: PUSH
15531: EMPTY
15532: LIST
15533: LIST
15534: PUSH
15535: EMPTY
15536: LIST
15537: LIST
15538: PPUSH
15539: CALL_OW 69
15543: ST_TO_ADDR
// if not tmp then
15544: LD_VAR 0 3
15548: NOT
15549: IFFALSE 15553
// exit ;
15551: GO 15609
// un := tmp [ rand ( 1 , tmp ) ] ;
15553: LD_ADDR_VAR 0 2
15557: PUSH
15558: LD_VAR 0 3
15562: PUSH
15563: LD_INT 1
15565: PPUSH
15566: LD_VAR 0 3
15570: PPUSH
15571: CALL_OW 12
15575: ARRAY
15576: ST_TO_ADDR
// if Crawls ( un ) then
15577: LD_VAR 0 2
15581: PPUSH
15582: CALL_OW 318
15586: IFFALSE 15597
// ComWalk ( un ) ;
15588: LD_VAR 0 2
15592: PPUSH
15593: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15597: LD_VAR 0 2
15601: PPUSH
15602: LD_INT 8
15604: PPUSH
15605: CALL_OW 336
// end ;
15609: PPOPN 3
15611: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15612: LD_EXP 26
15616: PUSH
15617: LD_EXP 70
15621: AND
15622: IFFALSE 15766
15624: GO 15626
15626: DISABLE
15627: LD_INT 0
15629: PPUSH
15630: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15631: LD_ADDR_VAR 0 2
15635: PUSH
15636: LD_INT 22
15638: PUSH
15639: LD_OWVAR 2
15643: PUSH
15644: EMPTY
15645: LIST
15646: LIST
15647: PUSH
15648: LD_INT 21
15650: PUSH
15651: LD_INT 2
15653: PUSH
15654: EMPTY
15655: LIST
15656: LIST
15657: PUSH
15658: LD_INT 2
15660: PUSH
15661: LD_INT 34
15663: PUSH
15664: LD_INT 12
15666: PUSH
15667: EMPTY
15668: LIST
15669: LIST
15670: PUSH
15671: LD_INT 34
15673: PUSH
15674: LD_INT 51
15676: PUSH
15677: EMPTY
15678: LIST
15679: LIST
15680: PUSH
15681: LD_INT 34
15683: PUSH
15684: LD_INT 32
15686: PUSH
15687: EMPTY
15688: LIST
15689: LIST
15690: PUSH
15691: EMPTY
15692: LIST
15693: LIST
15694: LIST
15695: LIST
15696: PUSH
15697: EMPTY
15698: LIST
15699: LIST
15700: LIST
15701: PPUSH
15702: CALL_OW 69
15706: ST_TO_ADDR
// if not tmp then
15707: LD_VAR 0 2
15711: NOT
15712: IFFALSE 15716
// exit ;
15714: GO 15766
// for i in tmp do
15716: LD_ADDR_VAR 0 1
15720: PUSH
15721: LD_VAR 0 2
15725: PUSH
15726: FOR_IN
15727: IFFALSE 15764
// if GetCargo ( i , mat_artifact ) = 0 then
15729: LD_VAR 0 1
15733: PPUSH
15734: LD_INT 4
15736: PPUSH
15737: CALL_OW 289
15741: PUSH
15742: LD_INT 0
15744: EQUAL
15745: IFFALSE 15762
// SetCargo ( i , mat_siberit , 100 ) ;
15747: LD_VAR 0 1
15751: PPUSH
15752: LD_INT 3
15754: PPUSH
15755: LD_INT 100
15757: PPUSH
15758: CALL_OW 290
15762: GO 15726
15764: POP
15765: POP
// end ;
15766: PPOPN 2
15768: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
15769: LD_EXP 26
15773: PUSH
15774: LD_EXP 71
15778: AND
15779: IFFALSE 15932
15781: GO 15783
15783: DISABLE
15784: LD_INT 0
15786: PPUSH
15787: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
15788: LD_ADDR_VAR 0 2
15792: PUSH
15793: LD_INT 22
15795: PUSH
15796: LD_OWVAR 2
15800: PUSH
15801: EMPTY
15802: LIST
15803: LIST
15804: PPUSH
15805: CALL_OW 69
15809: ST_TO_ADDR
// if not tmp then
15810: LD_VAR 0 2
15814: NOT
15815: IFFALSE 15819
// exit ;
15817: GO 15932
// for i := 1 to 2 do
15819: LD_ADDR_VAR 0 1
15823: PUSH
15824: DOUBLE
15825: LD_INT 1
15827: DEC
15828: ST_TO_ADDR
15829: LD_INT 2
15831: PUSH
15832: FOR_TO
15833: IFFALSE 15930
// begin uc_side := your_side ;
15835: LD_ADDR_OWVAR 20
15839: PUSH
15840: LD_OWVAR 2
15844: ST_TO_ADDR
// uc_nation := nation_american ;
15845: LD_ADDR_OWVAR 21
15849: PUSH
15850: LD_INT 1
15852: ST_TO_ADDR
// vc_chassis := us_morphling ;
15853: LD_ADDR_OWVAR 37
15857: PUSH
15858: LD_INT 5
15860: ST_TO_ADDR
// vc_engine := engine_siberite ;
15861: LD_ADDR_OWVAR 39
15865: PUSH
15866: LD_INT 3
15868: ST_TO_ADDR
// vc_control := control_computer ;
15869: LD_ADDR_OWVAR 38
15873: PUSH
15874: LD_INT 3
15876: ST_TO_ADDR
// vc_weapon := us_double_laser ;
15877: LD_ADDR_OWVAR 40
15881: PUSH
15882: LD_INT 10
15884: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
15885: CALL_OW 45
15889: PPUSH
15890: LD_VAR 0 2
15894: PUSH
15895: LD_INT 1
15897: ARRAY
15898: PPUSH
15899: CALL_OW 250
15903: PPUSH
15904: LD_VAR 0 2
15908: PUSH
15909: LD_INT 1
15911: ARRAY
15912: PPUSH
15913: CALL_OW 251
15917: PPUSH
15918: LD_INT 12
15920: PPUSH
15921: LD_INT 1
15923: PPUSH
15924: CALL_OW 50
// end ;
15928: GO 15832
15930: POP
15931: POP
// end ;
15932: PPOPN 2
15934: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
15935: LD_EXP 26
15939: PUSH
15940: LD_EXP 72
15944: AND
15945: IFFALSE 16167
15947: GO 15949
15949: DISABLE
15950: LD_INT 0
15952: PPUSH
15953: PPUSH
15954: PPUSH
15955: PPUSH
15956: PPUSH
15957: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15958: LD_ADDR_VAR 0 6
15962: PUSH
15963: LD_INT 22
15965: PUSH
15966: LD_OWVAR 2
15970: PUSH
15971: EMPTY
15972: LIST
15973: LIST
15974: PUSH
15975: LD_INT 21
15977: PUSH
15978: LD_INT 1
15980: PUSH
15981: EMPTY
15982: LIST
15983: LIST
15984: PUSH
15985: LD_INT 3
15987: PUSH
15988: LD_INT 23
15990: PUSH
15991: LD_INT 0
15993: PUSH
15994: EMPTY
15995: LIST
15996: LIST
15997: PUSH
15998: EMPTY
15999: LIST
16000: LIST
16001: PUSH
16002: EMPTY
16003: LIST
16004: LIST
16005: LIST
16006: PPUSH
16007: CALL_OW 69
16011: ST_TO_ADDR
// if not tmp then
16012: LD_VAR 0 6
16016: NOT
16017: IFFALSE 16021
// exit ;
16019: GO 16167
// s1 := rand ( 1 , 4 ) ;
16021: LD_ADDR_VAR 0 2
16025: PUSH
16026: LD_INT 1
16028: PPUSH
16029: LD_INT 4
16031: PPUSH
16032: CALL_OW 12
16036: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
16037: LD_ADDR_VAR 0 4
16041: PUSH
16042: LD_VAR 0 6
16046: PUSH
16047: LD_INT 1
16049: ARRAY
16050: PPUSH
16051: LD_VAR 0 2
16055: PPUSH
16056: CALL_OW 259
16060: ST_TO_ADDR
// if s1 = 1 then
16061: LD_VAR 0 2
16065: PUSH
16066: LD_INT 1
16068: EQUAL
16069: IFFALSE 16089
// s2 := rand ( 2 , 4 ) else
16071: LD_ADDR_VAR 0 3
16075: PUSH
16076: LD_INT 2
16078: PPUSH
16079: LD_INT 4
16081: PPUSH
16082: CALL_OW 12
16086: ST_TO_ADDR
16087: GO 16097
// s2 := 1 ;
16089: LD_ADDR_VAR 0 3
16093: PUSH
16094: LD_INT 1
16096: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
16097: LD_ADDR_VAR 0 5
16101: PUSH
16102: LD_VAR 0 6
16106: PUSH
16107: LD_INT 1
16109: ARRAY
16110: PPUSH
16111: LD_VAR 0 3
16115: PPUSH
16116: CALL_OW 259
16120: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
16121: LD_VAR 0 6
16125: PUSH
16126: LD_INT 1
16128: ARRAY
16129: PPUSH
16130: LD_VAR 0 2
16134: PPUSH
16135: LD_VAR 0 5
16139: PPUSH
16140: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16144: LD_VAR 0 6
16148: PUSH
16149: LD_INT 1
16151: ARRAY
16152: PPUSH
16153: LD_VAR 0 3
16157: PPUSH
16158: LD_VAR 0 4
16162: PPUSH
16163: CALL_OW 237
// end ;
16167: PPOPN 6
16169: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16170: LD_EXP 26
16174: PUSH
16175: LD_EXP 73
16179: AND
16180: IFFALSE 16259
16182: GO 16184
16184: DISABLE
16185: LD_INT 0
16187: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16188: LD_ADDR_VAR 0 1
16192: PUSH
16193: LD_INT 22
16195: PUSH
16196: LD_OWVAR 2
16200: PUSH
16201: EMPTY
16202: LIST
16203: LIST
16204: PUSH
16205: LD_INT 30
16207: PUSH
16208: LD_INT 3
16210: PUSH
16211: EMPTY
16212: LIST
16213: LIST
16214: PUSH
16215: EMPTY
16216: LIST
16217: LIST
16218: PPUSH
16219: CALL_OW 69
16223: ST_TO_ADDR
// if not tmp then
16224: LD_VAR 0 1
16228: NOT
16229: IFFALSE 16233
// exit ;
16231: GO 16259
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16233: LD_VAR 0 1
16237: PUSH
16238: LD_INT 1
16240: PPUSH
16241: LD_VAR 0 1
16245: PPUSH
16246: CALL_OW 12
16250: ARRAY
16251: PPUSH
16252: LD_INT 1
16254: PPUSH
16255: CALL_OW 234
// end ;
16259: PPOPN 1
16261: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
16262: LD_EXP 26
16266: PUSH
16267: LD_EXP 74
16271: AND
16272: IFFALSE 16384
16274: GO 16276
16276: DISABLE
16277: LD_INT 0
16279: PPUSH
16280: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
16281: LD_ADDR_VAR 0 2
16285: PUSH
16286: LD_INT 22
16288: PUSH
16289: LD_OWVAR 2
16293: PUSH
16294: EMPTY
16295: LIST
16296: LIST
16297: PUSH
16298: LD_INT 2
16300: PUSH
16301: LD_INT 30
16303: PUSH
16304: LD_INT 27
16306: PUSH
16307: EMPTY
16308: LIST
16309: LIST
16310: PUSH
16311: LD_INT 30
16313: PUSH
16314: LD_INT 26
16316: PUSH
16317: EMPTY
16318: LIST
16319: LIST
16320: PUSH
16321: LD_INT 30
16323: PUSH
16324: LD_INT 28
16326: PUSH
16327: EMPTY
16328: LIST
16329: LIST
16330: PUSH
16331: EMPTY
16332: LIST
16333: LIST
16334: LIST
16335: LIST
16336: PUSH
16337: EMPTY
16338: LIST
16339: LIST
16340: PPUSH
16341: CALL_OW 69
16345: ST_TO_ADDR
// if not tmp then
16346: LD_VAR 0 2
16350: NOT
16351: IFFALSE 16355
// exit ;
16353: GO 16384
// for i in tmp do
16355: LD_ADDR_VAR 0 1
16359: PUSH
16360: LD_VAR 0 2
16364: PUSH
16365: FOR_IN
16366: IFFALSE 16382
// SetLives ( i , 1 ) ;
16368: LD_VAR 0 1
16372: PPUSH
16373: LD_INT 1
16375: PPUSH
16376: CALL_OW 234
16380: GO 16365
16382: POP
16383: POP
// end ;
16384: PPOPN 2
16386: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16387: LD_EXP 26
16391: PUSH
16392: LD_EXP 75
16396: AND
16397: IFFALSE 16671
16399: GO 16401
16401: DISABLE
16402: LD_INT 0
16404: PPUSH
16405: PPUSH
16406: PPUSH
// begin i := rand ( 1 , 7 ) ;
16407: LD_ADDR_VAR 0 1
16411: PUSH
16412: LD_INT 1
16414: PPUSH
16415: LD_INT 7
16417: PPUSH
16418: CALL_OW 12
16422: ST_TO_ADDR
// case i of 1 :
16423: LD_VAR 0 1
16427: PUSH
16428: LD_INT 1
16430: DOUBLE
16431: EQUAL
16432: IFTRUE 16436
16434: GO 16446
16436: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16437: LD_STRING earthquake(getX(game), 0, 32)
16439: PPUSH
16440: CALL_OW 559
16444: GO 16671
16446: LD_INT 2
16448: DOUBLE
16449: EQUAL
16450: IFTRUE 16454
16452: GO 16468
16454: POP
// begin ToLua ( displayStucuk(); ) ;
16455: LD_STRING displayStucuk();
16457: PPUSH
16458: CALL_OW 559
// ResetFog ;
16462: CALL_OW 335
// end ; 3 :
16466: GO 16671
16468: LD_INT 3
16470: DOUBLE
16471: EQUAL
16472: IFTRUE 16476
16474: GO 16580
16476: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16477: LD_ADDR_VAR 0 2
16481: PUSH
16482: LD_INT 22
16484: PUSH
16485: LD_OWVAR 2
16489: PUSH
16490: EMPTY
16491: LIST
16492: LIST
16493: PUSH
16494: LD_INT 25
16496: PUSH
16497: LD_INT 1
16499: PUSH
16500: EMPTY
16501: LIST
16502: LIST
16503: PUSH
16504: EMPTY
16505: LIST
16506: LIST
16507: PPUSH
16508: CALL_OW 69
16512: ST_TO_ADDR
// if not tmp then
16513: LD_VAR 0 2
16517: NOT
16518: IFFALSE 16522
// exit ;
16520: GO 16671
// un := tmp [ rand ( 1 , tmp ) ] ;
16522: LD_ADDR_VAR 0 3
16526: PUSH
16527: LD_VAR 0 2
16531: PUSH
16532: LD_INT 1
16534: PPUSH
16535: LD_VAR 0 2
16539: PPUSH
16540: CALL_OW 12
16544: ARRAY
16545: ST_TO_ADDR
// if Crawls ( un ) then
16546: LD_VAR 0 3
16550: PPUSH
16551: CALL_OW 318
16555: IFFALSE 16566
// ComWalk ( un ) ;
16557: LD_VAR 0 3
16561: PPUSH
16562: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16566: LD_VAR 0 3
16570: PPUSH
16571: LD_INT 8
16573: PPUSH
16574: CALL_OW 336
// end ; 4 :
16578: GO 16671
16580: LD_INT 4
16582: DOUBLE
16583: EQUAL
16584: IFTRUE 16588
16586: GO 16649
16588: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16589: LD_ADDR_VAR 0 2
16593: PUSH
16594: LD_INT 22
16596: PUSH
16597: LD_OWVAR 2
16601: PUSH
16602: EMPTY
16603: LIST
16604: LIST
16605: PUSH
16606: LD_INT 30
16608: PUSH
16609: LD_INT 29
16611: PUSH
16612: EMPTY
16613: LIST
16614: LIST
16615: PUSH
16616: EMPTY
16617: LIST
16618: LIST
16619: PPUSH
16620: CALL_OW 69
16624: ST_TO_ADDR
// if not tmp then
16625: LD_VAR 0 2
16629: NOT
16630: IFFALSE 16634
// exit ;
16632: GO 16671
// DestroyUnit ( tmp [ 1 ] ) ;
16634: LD_VAR 0 2
16638: PUSH
16639: LD_INT 1
16641: ARRAY
16642: PPUSH
16643: CALL_OW 65
// end ; 5 .. 7 :
16647: GO 16671
16649: LD_INT 5
16651: DOUBLE
16652: GREATEREQUAL
16653: IFFALSE 16661
16655: LD_INT 7
16657: DOUBLE
16658: LESSEQUAL
16659: IFTRUE 16663
16661: GO 16670
16663: POP
// StreamSibBomb ; end ;
16664: CALL 12951 0 0
16668: GO 16671
16670: POP
// end ;
16671: PPOPN 3
16673: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
16674: LD_EXP 26
16678: PUSH
16679: LD_EXP 76
16683: AND
16684: IFFALSE 16840
16686: GO 16688
16688: DISABLE
16689: LD_INT 0
16691: PPUSH
16692: PPUSH
16693: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
16694: LD_ADDR_VAR 0 2
16698: PUSH
16699: LD_INT 81
16701: PUSH
16702: LD_OWVAR 2
16706: PUSH
16707: EMPTY
16708: LIST
16709: LIST
16710: PUSH
16711: LD_INT 2
16713: PUSH
16714: LD_INT 21
16716: PUSH
16717: LD_INT 1
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: PUSH
16724: LD_INT 21
16726: PUSH
16727: LD_INT 2
16729: PUSH
16730: EMPTY
16731: LIST
16732: LIST
16733: PUSH
16734: EMPTY
16735: LIST
16736: LIST
16737: LIST
16738: PUSH
16739: EMPTY
16740: LIST
16741: LIST
16742: PPUSH
16743: CALL_OW 69
16747: ST_TO_ADDR
// if not tmp then
16748: LD_VAR 0 2
16752: NOT
16753: IFFALSE 16757
// exit ;
16755: GO 16840
// p := 0 ;
16757: LD_ADDR_VAR 0 3
16761: PUSH
16762: LD_INT 0
16764: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16765: LD_INT 35
16767: PPUSH
16768: CALL_OW 67
// p := p + 1 ;
16772: LD_ADDR_VAR 0 3
16776: PUSH
16777: LD_VAR 0 3
16781: PUSH
16782: LD_INT 1
16784: PLUS
16785: ST_TO_ADDR
// for i in tmp do
16786: LD_ADDR_VAR 0 1
16790: PUSH
16791: LD_VAR 0 2
16795: PUSH
16796: FOR_IN
16797: IFFALSE 16828
// if GetLives ( i ) < 1000 then
16799: LD_VAR 0 1
16803: PPUSH
16804: CALL_OW 256
16808: PUSH
16809: LD_INT 1000
16811: LESS
16812: IFFALSE 16826
// SetLives ( i , 1000 ) ;
16814: LD_VAR 0 1
16818: PPUSH
16819: LD_INT 1000
16821: PPUSH
16822: CALL_OW 234
16826: GO 16796
16828: POP
16829: POP
// until p > 20 ;
16830: LD_VAR 0 3
16834: PUSH
16835: LD_INT 20
16837: GREATER
16838: IFFALSE 16765
// end ;
16840: PPOPN 3
16842: END
// every 0 0$1 trigger StreamModeActive and sTime do
16843: LD_EXP 26
16847: PUSH
16848: LD_EXP 77
16852: AND
16853: IFFALSE 16888
16855: GO 16857
16857: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
16858: LD_INT 28
16860: PPUSH
16861: LD_OWVAR 2
16865: PPUSH
16866: LD_INT 2
16868: PPUSH
16869: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
16873: LD_INT 30
16875: PPUSH
16876: LD_OWVAR 2
16880: PPUSH
16881: LD_INT 2
16883: PPUSH
16884: CALL_OW 322
// end ;
16888: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
16889: LD_EXP 26
16893: PUSH
16894: LD_EXP 78
16898: AND
16899: IFFALSE 17020
16901: GO 16903
16903: DISABLE
16904: LD_INT 0
16906: PPUSH
16907: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16908: LD_ADDR_VAR 0 2
16912: PUSH
16913: LD_INT 22
16915: PUSH
16916: LD_OWVAR 2
16920: PUSH
16921: EMPTY
16922: LIST
16923: LIST
16924: PUSH
16925: LD_INT 21
16927: PUSH
16928: LD_INT 1
16930: PUSH
16931: EMPTY
16932: LIST
16933: LIST
16934: PUSH
16935: LD_INT 3
16937: PUSH
16938: LD_INT 23
16940: PUSH
16941: LD_INT 0
16943: PUSH
16944: EMPTY
16945: LIST
16946: LIST
16947: PUSH
16948: EMPTY
16949: LIST
16950: LIST
16951: PUSH
16952: EMPTY
16953: LIST
16954: LIST
16955: LIST
16956: PPUSH
16957: CALL_OW 69
16961: ST_TO_ADDR
// if not tmp then
16962: LD_VAR 0 2
16966: NOT
16967: IFFALSE 16971
// exit ;
16969: GO 17020
// for i in tmp do
16971: LD_ADDR_VAR 0 1
16975: PUSH
16976: LD_VAR 0 2
16980: PUSH
16981: FOR_IN
16982: IFFALSE 17018
// begin if Crawls ( i ) then
16984: LD_VAR 0 1
16988: PPUSH
16989: CALL_OW 318
16993: IFFALSE 17004
// ComWalk ( i ) ;
16995: LD_VAR 0 1
16999: PPUSH
17000: CALL_OW 138
// SetClass ( i , 2 ) ;
17004: LD_VAR 0 1
17008: PPUSH
17009: LD_INT 2
17011: PPUSH
17012: CALL_OW 336
// end ;
17016: GO 16981
17018: POP
17019: POP
// end ;
17020: PPOPN 2
17022: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
17023: LD_EXP 26
17027: PUSH
17028: LD_EXP 79
17032: AND
17033: IFFALSE 17314
17035: GO 17037
17037: DISABLE
17038: LD_INT 0
17040: PPUSH
17041: PPUSH
17042: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
17043: LD_OWVAR 2
17047: PPUSH
17048: LD_INT 9
17050: PPUSH
17051: LD_INT 1
17053: PPUSH
17054: LD_INT 1
17056: PPUSH
17057: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
17061: LD_INT 9
17063: PPUSH
17064: LD_OWVAR 2
17068: PPUSH
17069: CALL_OW 343
// uc_side := 9 ;
17073: LD_ADDR_OWVAR 20
17077: PUSH
17078: LD_INT 9
17080: ST_TO_ADDR
// uc_nation := 2 ;
17081: LD_ADDR_OWVAR 21
17085: PUSH
17086: LD_INT 2
17088: ST_TO_ADDR
// hc_name := Dark Warrior ;
17089: LD_ADDR_OWVAR 26
17093: PUSH
17094: LD_STRING Dark Warrior
17096: ST_TO_ADDR
// hc_gallery :=  ;
17097: LD_ADDR_OWVAR 33
17101: PUSH
17102: LD_STRING 
17104: ST_TO_ADDR
// hc_noskilllimit := true ;
17105: LD_ADDR_OWVAR 76
17109: PUSH
17110: LD_INT 1
17112: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
17113: LD_ADDR_OWVAR 31
17117: PUSH
17118: LD_INT 30
17120: PUSH
17121: LD_INT 30
17123: PUSH
17124: LD_INT 30
17126: PUSH
17127: LD_INT 30
17129: PUSH
17130: EMPTY
17131: LIST
17132: LIST
17133: LIST
17134: LIST
17135: ST_TO_ADDR
// un := CreateHuman ;
17136: LD_ADDR_VAR 0 3
17140: PUSH
17141: CALL_OW 44
17145: ST_TO_ADDR
// hc_noskilllimit := false ;
17146: LD_ADDR_OWVAR 76
17150: PUSH
17151: LD_INT 0
17153: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17154: LD_VAR 0 3
17158: PPUSH
17159: LD_INT 1
17161: PPUSH
17162: CALL_OW 51
// p := 0 ;
17166: LD_ADDR_VAR 0 2
17170: PUSH
17171: LD_INT 0
17173: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17174: LD_INT 35
17176: PPUSH
17177: CALL_OW 67
// p := p + 1 ;
17181: LD_ADDR_VAR 0 2
17185: PUSH
17186: LD_VAR 0 2
17190: PUSH
17191: LD_INT 1
17193: PLUS
17194: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17195: LD_VAR 0 3
17199: PPUSH
17200: CALL_OW 256
17204: PUSH
17205: LD_INT 1000
17207: LESS
17208: IFFALSE 17222
// SetLives ( un , 1000 ) ;
17210: LD_VAR 0 3
17214: PPUSH
17215: LD_INT 1000
17217: PPUSH
17218: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
17222: LD_VAR 0 3
17226: PPUSH
17227: LD_INT 81
17229: PUSH
17230: LD_OWVAR 2
17234: PUSH
17235: EMPTY
17236: LIST
17237: LIST
17238: PUSH
17239: LD_INT 91
17241: PUSH
17242: LD_VAR 0 3
17246: PUSH
17247: LD_INT 30
17249: PUSH
17250: EMPTY
17251: LIST
17252: LIST
17253: LIST
17254: PUSH
17255: EMPTY
17256: LIST
17257: LIST
17258: PPUSH
17259: CALL_OW 69
17263: PPUSH
17264: LD_VAR 0 3
17268: PPUSH
17269: CALL_OW 74
17273: PPUSH
17274: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
17278: LD_VAR 0 2
17282: PUSH
17283: LD_INT 60
17285: GREATER
17286: PUSH
17287: LD_VAR 0 3
17291: PPUSH
17292: CALL_OW 301
17296: OR
17297: IFFALSE 17174
// if un then
17299: LD_VAR 0 3
17303: IFFALSE 17314
// RemoveUnit ( un ) ;
17305: LD_VAR 0 3
17309: PPUSH
17310: CALL_OW 64
// end ; end_of_file
17314: PPOPN 3
17316: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
17317: LD_INT 0
17319: PPUSH
17320: PPUSH
17321: PPUSH
17322: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
17323: LD_VAR 0 1
17327: PPUSH
17328: CALL_OW 264
17332: PUSH
17333: LD_EXP 84
17337: EQUAL
17338: IFFALSE 17410
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
17340: LD_INT 68
17342: PPUSH
17343: LD_VAR 0 1
17347: PPUSH
17348: CALL_OW 255
17352: PPUSH
17353: CALL_OW 321
17357: PUSH
17358: LD_INT 2
17360: EQUAL
17361: IFFALSE 17373
// eff := 70 else
17363: LD_ADDR_VAR 0 6
17367: PUSH
17368: LD_INT 70
17370: ST_TO_ADDR
17371: GO 17381
// eff := 30 ;
17373: LD_ADDR_VAR 0 6
17377: PUSH
17378: LD_INT 30
17380: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
17381: LD_VAR 0 1
17385: PPUSH
17386: CALL_OW 250
17390: PPUSH
17391: LD_VAR 0 1
17395: PPUSH
17396: CALL_OW 251
17400: PPUSH
17401: LD_VAR 0 6
17405: PPUSH
17406: CALL_OW 495
// end ; end ;
17410: LD_VAR 0 4
17414: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
17415: LD_INT 0
17417: PPUSH
17418: PPUSH
17419: PPUSH
17420: PPUSH
17421: PPUSH
17422: PPUSH
// if cmd = 124 then
17423: LD_VAR 0 1
17427: PUSH
17428: LD_INT 124
17430: EQUAL
17431: IFFALSE 17637
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
17433: LD_ADDR_VAR 0 5
17437: PUSH
17438: LD_INT 2
17440: PUSH
17441: LD_INT 34
17443: PUSH
17444: LD_INT 53
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: PUSH
17451: LD_INT 34
17453: PUSH
17454: LD_INT 14
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: PUSH
17461: EMPTY
17462: LIST
17463: LIST
17464: LIST
17465: PPUSH
17466: CALL_OW 69
17470: ST_TO_ADDR
// if not tmp then
17471: LD_VAR 0 5
17475: NOT
17476: IFFALSE 17480
// exit ;
17478: GO 17637
// for i in tmp do
17480: LD_ADDR_VAR 0 3
17484: PUSH
17485: LD_VAR 0 5
17489: PUSH
17490: FOR_IN
17491: IFFALSE 17635
// begin taskList := GetTaskList ( i ) ;
17493: LD_ADDR_VAR 0 6
17497: PUSH
17498: LD_VAR 0 3
17502: PPUSH
17503: CALL_OW 437
17507: ST_TO_ADDR
// if not taskList then
17508: LD_VAR 0 6
17512: NOT
17513: IFFALSE 17517
// continue ;
17515: GO 17490
// for j = 1 to taskList do
17517: LD_ADDR_VAR 0 4
17521: PUSH
17522: DOUBLE
17523: LD_INT 1
17525: DEC
17526: ST_TO_ADDR
17527: LD_VAR 0 6
17531: PUSH
17532: FOR_TO
17533: IFFALSE 17631
// if taskList [ j ] [ 1 ] = | then
17535: LD_VAR 0 6
17539: PUSH
17540: LD_VAR 0 4
17544: ARRAY
17545: PUSH
17546: LD_INT 1
17548: ARRAY
17549: PUSH
17550: LD_STRING |
17552: EQUAL
17553: IFFALSE 17629
// begin _taskList := Delete ( taskList , 1 ) ;
17555: LD_ADDR_VAR 0 7
17559: PUSH
17560: LD_VAR 0 6
17564: PPUSH
17565: LD_INT 1
17567: PPUSH
17568: CALL_OW 3
17572: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
17573: LD_VAR 0 3
17577: PPUSH
17578: LD_VAR 0 7
17582: PPUSH
17583: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
17587: LD_VAR 0 3
17591: PPUSH
17592: LD_VAR 0 6
17596: PUSH
17597: LD_VAR 0 4
17601: ARRAY
17602: PUSH
17603: LD_INT 2
17605: ARRAY
17606: PPUSH
17607: LD_VAR 0 6
17611: PUSH
17612: LD_VAR 0 4
17616: ARRAY
17617: PUSH
17618: LD_INT 3
17620: ARRAY
17621: PPUSH
17622: LD_INT 8
17624: PPUSH
17625: CALL 17642 0 4
// end ;
17629: GO 17532
17631: POP
17632: POP
// end ;
17633: GO 17490
17635: POP
17636: POP
// end ; end ;
17637: LD_VAR 0 2
17641: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
17642: LD_INT 0
17644: PPUSH
17645: PPUSH
17646: PPUSH
17647: PPUSH
17648: PPUSH
17649: PPUSH
17650: PPUSH
17651: PPUSH
17652: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
17653: LD_VAR 0 1
17657: NOT
17658: PUSH
17659: LD_VAR 0 2
17663: PPUSH
17664: LD_VAR 0 3
17668: PPUSH
17669: CALL_OW 488
17673: NOT
17674: OR
17675: PUSH
17676: LD_VAR 0 4
17680: NOT
17681: OR
17682: IFFALSE 17686
// exit ;
17684: GO 18026
// list := [ ] ;
17686: LD_ADDR_VAR 0 13
17690: PUSH
17691: EMPTY
17692: ST_TO_ADDR
// if x - r < 0 then
17693: LD_VAR 0 2
17697: PUSH
17698: LD_VAR 0 4
17702: MINUS
17703: PUSH
17704: LD_INT 0
17706: LESS
17707: IFFALSE 17719
// min_x := 0 else
17709: LD_ADDR_VAR 0 7
17713: PUSH
17714: LD_INT 0
17716: ST_TO_ADDR
17717: GO 17735
// min_x := x - r ;
17719: LD_ADDR_VAR 0 7
17723: PUSH
17724: LD_VAR 0 2
17728: PUSH
17729: LD_VAR 0 4
17733: MINUS
17734: ST_TO_ADDR
// if y - r < 0 then
17735: LD_VAR 0 3
17739: PUSH
17740: LD_VAR 0 4
17744: MINUS
17745: PUSH
17746: LD_INT 0
17748: LESS
17749: IFFALSE 17761
// min_y := 0 else
17751: LD_ADDR_VAR 0 8
17755: PUSH
17756: LD_INT 0
17758: ST_TO_ADDR
17759: GO 17777
// min_y := y - r ;
17761: LD_ADDR_VAR 0 8
17765: PUSH
17766: LD_VAR 0 3
17770: PUSH
17771: LD_VAR 0 4
17775: MINUS
17776: ST_TO_ADDR
// max_x := x + r ;
17777: LD_ADDR_VAR 0 9
17781: PUSH
17782: LD_VAR 0 2
17786: PUSH
17787: LD_VAR 0 4
17791: PLUS
17792: ST_TO_ADDR
// max_y := y + r ;
17793: LD_ADDR_VAR 0 10
17797: PUSH
17798: LD_VAR 0 3
17802: PUSH
17803: LD_VAR 0 4
17807: PLUS
17808: ST_TO_ADDR
// for _x = min_x to max_x do
17809: LD_ADDR_VAR 0 11
17813: PUSH
17814: DOUBLE
17815: LD_VAR 0 7
17819: DEC
17820: ST_TO_ADDR
17821: LD_VAR 0 9
17825: PUSH
17826: FOR_TO
17827: IFFALSE 17944
// for _y = min_y to max_y do
17829: LD_ADDR_VAR 0 12
17833: PUSH
17834: DOUBLE
17835: LD_VAR 0 8
17839: DEC
17840: ST_TO_ADDR
17841: LD_VAR 0 10
17845: PUSH
17846: FOR_TO
17847: IFFALSE 17940
// begin if not ValidHex ( _x , _y ) then
17849: LD_VAR 0 11
17853: PPUSH
17854: LD_VAR 0 12
17858: PPUSH
17859: CALL_OW 488
17863: NOT
17864: IFFALSE 17868
// continue ;
17866: GO 17846
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
17868: LD_VAR 0 11
17872: PPUSH
17873: LD_VAR 0 12
17877: PPUSH
17878: CALL_OW 351
17882: PUSH
17883: LD_VAR 0 11
17887: PPUSH
17888: LD_VAR 0 12
17892: PPUSH
17893: CALL_OW 554
17897: AND
17898: IFFALSE 17938
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
17900: LD_ADDR_VAR 0 13
17904: PUSH
17905: LD_VAR 0 13
17909: PPUSH
17910: LD_VAR 0 13
17914: PUSH
17915: LD_INT 1
17917: PLUS
17918: PPUSH
17919: LD_VAR 0 11
17923: PUSH
17924: LD_VAR 0 12
17928: PUSH
17929: EMPTY
17930: LIST
17931: LIST
17932: PPUSH
17933: CALL_OW 2
17937: ST_TO_ADDR
// end ;
17938: GO 17846
17940: POP
17941: POP
17942: GO 17826
17944: POP
17945: POP
// if not list then
17946: LD_VAR 0 13
17950: NOT
17951: IFFALSE 17955
// exit ;
17953: GO 18026
// for i in list do
17955: LD_ADDR_VAR 0 6
17959: PUSH
17960: LD_VAR 0 13
17964: PUSH
17965: FOR_IN
17966: IFFALSE 18024
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
17968: LD_VAR 0 1
17972: PPUSH
17973: LD_STRING M
17975: PUSH
17976: LD_VAR 0 6
17980: PUSH
17981: LD_INT 1
17983: ARRAY
17984: PUSH
17985: LD_VAR 0 6
17989: PUSH
17990: LD_INT 2
17992: ARRAY
17993: PUSH
17994: LD_INT 0
17996: PUSH
17997: LD_INT 0
17999: PUSH
18000: LD_INT 0
18002: PUSH
18003: LD_INT 0
18005: PUSH
18006: EMPTY
18007: LIST
18008: LIST
18009: LIST
18010: LIST
18011: LIST
18012: LIST
18013: LIST
18014: PUSH
18015: EMPTY
18016: LIST
18017: PPUSH
18018: CALL_OW 447
18022: GO 17965
18024: POP
18025: POP
// end ; end_of_file
18026: LD_VAR 0 5
18030: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
18031: GO 18033
18033: DISABLE
// begin ru_radar := 98 ;
18034: LD_ADDR_EXP 80
18038: PUSH
18039: LD_INT 98
18041: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
18042: LD_ADDR_EXP 81
18046: PUSH
18047: LD_INT 89
18049: ST_TO_ADDR
// us_hack := 99 ;
18050: LD_ADDR_EXP 82
18054: PUSH
18055: LD_INT 99
18057: ST_TO_ADDR
// us_artillery := 97 ;
18058: LD_ADDR_EXP 83
18062: PUSH
18063: LD_INT 97
18065: ST_TO_ADDR
// ar_bio_bomb := 91 ;
18066: LD_ADDR_EXP 84
18070: PUSH
18071: LD_INT 91
18073: ST_TO_ADDR
// end ;
18074: END
