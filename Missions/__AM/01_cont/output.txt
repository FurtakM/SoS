// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 32 0 0
// InitAmerican ;
  15: CALL 866 0 0
// InitRussian ;
  19: CALL 1137 0 0
// DebugMode ;
  23: CALL 160 0 0
// Action ;
  27: CALL 2932 0 0
// end ;
  31: END
// export debug ; export mission_prefix ; export active_russian_dialog , bobby_in_squad , powell_contact , macmilan_use_radio , cyrus_in_squad , active_road_patrol , macmilan_in_trap , meta_action , end_mission , bobby_saved , cyrus_saved , send_troops_to_forest , active_powell_dialog ; function Init ; begin
  32: LD_INT 0
  34: PPUSH
// mission_prefix := 01_ ;
  35: LD_ADDR_EXP 2
  39: PUSH
  40: LD_STRING 01_
  42: ST_TO_ADDR
// debug := false ;
  43: LD_ADDR_EXP 1
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// active_russian_dialog := false ;
  51: LD_ADDR_EXP 3
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// bobby_in_squad := false ;
  59: LD_ADDR_EXP 4
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// cyrus_in_squad := false ;
  67: LD_ADDR_EXP 7
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// powell_contact := false ;
  75: LD_ADDR_EXP 5
  79: PUSH
  80: LD_INT 0
  82: ST_TO_ADDR
// macmilan_use_radio := false ;
  83: LD_ADDR_EXP 6
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// active_road_patrol := false ;
  91: LD_ADDR_EXP 8
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// macmilan_in_trap := false ;
  99: LD_ADDR_EXP 9
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// meta_action := false ;
 107: LD_ADDR_EXP 10
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// end_mission := false ;
 115: LD_ADDR_EXP 11
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// bobby_saved := false ;
 123: LD_ADDR_EXP 12
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// cyrus_saved := false ;
 131: LD_ADDR_EXP 13
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// send_troops_to_forest := false ;
 139: LD_ADDR_EXP 14
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// active_powell_dialog := false ;
 147: LD_ADDR_EXP 15
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// end ;
 155: LD_VAR 0 1
 159: RET
// function DebugMode ; var i ; begin
 160: LD_INT 0
 162: PPUSH
 163: PPUSH
// if not debug then
 164: LD_EXP 1
 168: NOT
 169: IFFALSE 173
// exit ;
 171: GO 192
// Difficulty := 4 ;
 173: LD_ADDR_OWVAR 67
 177: PUSH
 178: LD_INT 4
 180: ST_TO_ADDR
// TurnFogOff ( ) ;
 181: CALL_OW 537
// FogOff ( 1 ) ;
 185: LD_INT 1
 187: PPUSH
 188: CALL_OW 344
// end ; end_of_file
 192: LD_VAR 0 1
 196: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 197: LD_INT 0
 199: PPUSH
 200: PPUSH
 201: PPUSH
// uc_side := GetSide ( b ) ;
 202: LD_ADDR_OWVAR 20
 206: PUSH
 207: LD_VAR 0 2
 211: PPUSH
 212: CALL_OW 255
 216: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 217: LD_ADDR_OWVAR 21
 221: PUSH
 222: LD_VAR 0 2
 226: PPUSH
 227: CALL_OW 248
 231: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 232: LD_INT 0
 234: PPUSH
 235: LD_INT 1
 237: PPUSH
 238: LD_VAR 0 1
 242: PPUSH
 243: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
 247: LD_ADDR_VAR 0 5
 251: PUSH
 252: LD_VAR 0 2
 256: PPUSH
 257: CALL_OW 254
 261: PUSH
 262: LD_INT 3
 264: MINUS
 265: ST_TO_ADDR
// if dir < 0 then
 266: LD_VAR 0 5
 270: PUSH
 271: LD_INT 0
 273: LESS
 274: IFFALSE 290
// dir := 6 + dir ;
 276: LD_ADDR_VAR 0 5
 280: PUSH
 281: LD_INT 6
 283: PUSH
 284: LD_VAR 0 5
 288: PLUS
 289: ST_TO_ADDR
// un := CreateHuman ;
 290: LD_ADDR_VAR 0 4
 294: PUSH
 295: CALL_OW 44
 299: ST_TO_ADDR
// SetDir ( un , dir ) ;
 300: LD_VAR 0 4
 304: PPUSH
 305: LD_VAR 0 5
 309: PPUSH
 310: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 314: LD_VAR 0 4
 318: PPUSH
 319: LD_VAR 0 2
 323: PPUSH
 324: CALL_OW 52
// end ;
 328: LD_VAR 0 3
 332: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 333: LD_INT 0
 335: PPUSH
// uc_side := side ;
 336: LD_ADDR_OWVAR 20
 340: PUSH
 341: LD_VAR 0 1
 345: ST_TO_ADDR
// uc_nation := nation ;
 346: LD_ADDR_OWVAR 21
 350: PUSH
 351: LD_VAR 0 2
 355: ST_TO_ADDR
// vc_chassis := chassis ;
 356: LD_ADDR_OWVAR 37
 360: PUSH
 361: LD_VAR 0 3
 365: ST_TO_ADDR
// vc_engine := engine ;
 366: LD_ADDR_OWVAR 39
 370: PUSH
 371: LD_VAR 0 4
 375: ST_TO_ADDR
// vc_control := control ;
 376: LD_ADDR_OWVAR 38
 380: PUSH
 381: LD_VAR 0 5
 385: ST_TO_ADDR
// vc_weapon := weapon ;
 386: LD_ADDR_OWVAR 40
 390: PUSH
 391: LD_VAR 0 6
 395: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 396: LD_ADDR_OWVAR 41
 400: PUSH
 401: LD_VAR 0 7
 405: ST_TO_ADDR
// result := CreateVehicle ;
 406: LD_ADDR_VAR 0 8
 410: PUSH
 411: CALL_OW 45
 415: ST_TO_ADDR
// end ;
 416: LD_VAR 0 8
 420: RET
// export function ComPatrol ( unit , mode , pause , coords ) ; var i ; begin
 421: LD_INT 0
 423: PPUSH
 424: PPUSH
// while ( active_road_patrol ) do
 425: LD_EXP 8
 429: IFFALSE 783
// begin Wait ( 0 0$01 ) ;
 431: LD_INT 35
 433: PPUSH
 434: CALL_OW 67
// if not unit then
 438: LD_VAR 0 1
 442: NOT
 443: IFFALSE 447
// exit ;
 445: GO 783
// if mode = road then
 447: LD_VAR 0 2
 451: PUSH
 452: LD_STRING road
 454: EQUAL
 455: IFFALSE 511
// if GetFuel ( unit ) < 50 and not See ( 1 , unit ) and not HasTask ( unit ) then
 457: LD_VAR 0 1
 461: PPUSH
 462: CALL_OW 261
 466: PUSH
 467: LD_INT 50
 469: LESS
 470: PUSH
 471: LD_INT 1
 473: PPUSH
 474: LD_VAR 0 1
 478: PPUSH
 479: CALL_OW 292
 483: NOT
 484: AND
 485: PUSH
 486: LD_VAR 0 1
 490: PPUSH
 491: CALL_OW 314
 495: NOT
 496: AND
 497: IFFALSE 511
// SetFuel ( unit , 100 ) ;
 499: LD_VAR 0 1
 503: PPUSH
 504: LD_INT 100
 506: PPUSH
 507: CALL_OW 240
// if mode = forest then
 511: LD_VAR 0 2
 515: PUSH
 516: LD_STRING forest
 518: EQUAL
 519: IFFALSE 599
// if GetLives ( unit ) < 600 then
 521: LD_VAR 0 1
 525: PPUSH
 526: CALL_OW 256
 530: PUSH
 531: LD_INT 600
 533: LESS
 534: IFFALSE 599
// begin ComMoveXY ( unit , 42 , 3 ) ;
 536: LD_VAR 0 1
 540: PPUSH
 541: LD_INT 42
 543: PPUSH
 544: LD_INT 3
 546: PPUSH
 547: CALL_OW 111
// SetRememberedX ( unit , GetX ( unit ) ) ;
 551: LD_VAR 0 1
 555: PPUSH
 556: LD_VAR 0 1
 560: PPUSH
 561: CALL_OW 250
 565: PPUSH
 566: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
 570: LD_VAR 0 1
 574: PPUSH
 575: LD_VAR 0 1
 579: PPUSH
 580: CALL_OW 251
 584: PPUSH
 585: CALL_OW 232
// send_troops_to_forest := true ;
 589: LD_ADDR_EXP 14
 593: PUSH
 594: LD_INT 1
 596: ST_TO_ADDR
// break ;
 597: GO 783
// end ; if not HasTask ( unit ) then
 599: LD_VAR 0 1
 603: PPUSH
 604: CALL_OW 314
 608: NOT
 609: IFFALSE 781
// begin for i = 1 to coords do
 611: LD_ADDR_VAR 0 6
 615: PUSH
 616: DOUBLE
 617: LD_INT 1
 619: DEC
 620: ST_TO_ADDR
 621: LD_VAR 0 4
 625: PUSH
 626: FOR_TO
 627: IFFALSE 694
// begin AddComAgressiveMove ( unit , coords [ i ] , coords [ i + 1 ] ) ;
 629: LD_VAR 0 1
 633: PPUSH
 634: LD_VAR 0 4
 638: PUSH
 639: LD_VAR 0 6
 643: ARRAY
 644: PPUSH
 645: LD_VAR 0 4
 649: PUSH
 650: LD_VAR 0 6
 654: PUSH
 655: LD_INT 1
 657: PLUS
 658: ARRAY
 659: PPUSH
 660: CALL_OW 174
// AddComWait ( unit , pause ) ;
 664: LD_VAR 0 1
 668: PPUSH
 669: LD_VAR 0 3
 673: PPUSH
 674: CALL_OW 202
// i := i + 1 ;
 678: LD_ADDR_VAR 0 6
 682: PUSH
 683: LD_VAR 0 6
 687: PUSH
 688: LD_INT 1
 690: PLUS
 691: ST_TO_ADDR
// end ;
 692: GO 626
 694: POP
 695: POP
// for i = coords downto 1 do
 696: LD_ADDR_VAR 0 6
 700: PUSH
 701: DOUBLE
 702: LD_VAR 0 4
 706: INC
 707: ST_TO_ADDR
 708: LD_INT 1
 710: PUSH
 711: FOR_DOWNTO
 712: IFFALSE 779
// begin AddComAgressiveMove ( unit , coords [ i - 1 ] , coords [ i ] ) ;
 714: LD_VAR 0 1
 718: PPUSH
 719: LD_VAR 0 4
 723: PUSH
 724: LD_VAR 0 6
 728: PUSH
 729: LD_INT 1
 731: MINUS
 732: ARRAY
 733: PPUSH
 734: LD_VAR 0 4
 738: PUSH
 739: LD_VAR 0 6
 743: ARRAY
 744: PPUSH
 745: CALL_OW 174
// AddComWait ( unit , pause ) ;
 749: LD_VAR 0 1
 753: PPUSH
 754: LD_VAR 0 3
 758: PPUSH
 759: CALL_OW 202
// i := i - 1 ;
 763: LD_ADDR_VAR 0 6
 767: PUSH
 768: LD_VAR 0 6
 772: PUSH
 773: LD_INT 1
 775: MINUS
 776: ST_TO_ADDR
// end ;
 777: GO 711
 779: POP
 780: POP
// end ; end ;
 781: GO 425
// end ;
 783: LD_VAR 0 5
 787: RET
// export function DebugSay ( dialog ) ; var speaker ; begin
 788: LD_INT 0
 790: PPUSH
 791: PPUSH
// uc_nation := 1 ;
 792: LD_ADDR_OWVAR 21
 796: PUSH
 797: LD_INT 1
 799: ST_TO_ADDR
// uc_side := 0 ;
 800: LD_ADDR_OWVAR 20
 804: PUSH
 805: LD_INT 0
 807: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
 808: LD_INT 0
 810: PPUSH
 811: LD_INT 1
 813: PPUSH
 814: LD_INT 0
 816: PPUSH
 817: CALL_OW 380
// hc_name := speaker ;
 821: LD_ADDR_OWVAR 26
 825: PUSH
 826: LD_STRING speaker
 828: ST_TO_ADDR
// hc_gallery :=  ;
 829: LD_ADDR_OWVAR 33
 833: PUSH
 834: LD_STRING 
 836: ST_TO_ADDR
// speaker := CreateHuman ;
 837: LD_ADDR_VAR 0 3
 841: PUSH
 842: CALL_OW 44
 846: ST_TO_ADDR
// Say ( speaker , dialog ) ;
 847: LD_VAR 0 3
 851: PPUSH
 852: LD_VAR 0 1
 856: PPUSH
 857: CALL_OW 88
// end ; end_of_file
 861: LD_VAR 0 2
 865: RET
// export JMM , Bobby , Cyrus , Powell , fakePokryshkin ; export function InitAmerican ; begin
 866: LD_INT 0
 868: PPUSH
// uc_nation := 1 ;
 869: LD_ADDR_OWVAR 21
 873: PUSH
 874: LD_INT 1
 876: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , false ,  ) ;
 877: LD_ADDR_EXP 16
 881: PUSH
 882: LD_STRING JMM
 884: PPUSH
 885: LD_INT 0
 887: PPUSH
 888: LD_STRING 
 890: PPUSH
 891: CALL 28359 0 3
 895: ST_TO_ADDR
// uc_side := 4 ;
 896: LD_ADDR_OWVAR 20
 900: PUSH
 901: LD_INT 4
 903: ST_TO_ADDR
// hc_gallery := us ;
 904: LD_ADDR_OWVAR 33
 908: PUSH
 909: LD_STRING us
 911: ST_TO_ADDR
// hc_face_number := 7 ;
 912: LD_ADDR_OWVAR 34
 916: PUSH
 917: LD_INT 7
 919: ST_TO_ADDR
// hc_sex := sex_male ;
 920: LD_ADDR_OWVAR 27
 924: PUSH
 925: LD_INT 1
 927: ST_TO_ADDR
// hc_name := . ;
 928: LD_ADDR_OWVAR 26
 932: PUSH
 933: LD_STRING .
 935: ST_TO_ADDR
// hc_class := 1 ;
 936: LD_ADDR_OWVAR 28
 940: PUSH
 941: LD_INT 1
 943: ST_TO_ADDR
// Powell := CreateHuman ;
 944: LD_ADDR_EXP 19
 948: PUSH
 949: CALL_OW 44
 953: ST_TO_ADDR
// hc_name := . ;
 954: LD_ADDR_OWVAR 26
 958: PUSH
 959: LD_STRING .
 961: ST_TO_ADDR
// hc_gallery := ru ;
 962: LD_ADDR_OWVAR 33
 966: PUSH
 967: LD_STRING ru
 969: ST_TO_ADDR
// hc_face_number := 4 ;
 970: LD_ADDR_OWVAR 34
 974: PUSH
 975: LD_INT 4
 977: ST_TO_ADDR
// hc_sex := sex_male ;
 978: LD_ADDR_OWVAR 27
 982: PUSH
 983: LD_INT 1
 985: ST_TO_ADDR
// fakePokryshkin := CreateHuman ;
 986: LD_ADDR_EXP 20
 990: PUSH
 991: CALL_OW 44
 995: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , false ,  ) ;
 996: LD_ADDR_EXP 17
1000: PUSH
1001: LD_STRING Bobby
1003: PPUSH
1004: LD_INT 0
1006: PPUSH
1007: LD_STRING 
1009: PPUSH
1010: CALL 28359 0 3
1014: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , false ,  ) ;
1015: LD_ADDR_EXP 18
1019: PUSH
1020: LD_STRING Cyrus
1022: PPUSH
1023: LD_INT 0
1025: PPUSH
1026: LD_STRING 
1028: PPUSH
1029: CALL 28359 0 3
1033: ST_TO_ADDR
// case Difficulty of 1 :
1034: LD_OWVAR 67
1038: PUSH
1039: LD_INT 1
1041: DOUBLE
1042: EQUAL
1043: IFTRUE 1047
1045: GO 1062
1047: POP
// SetLives ( Bobby , 500 ) ; 2 :
1048: LD_EXP 17
1052: PPUSH
1053: LD_INT 500
1055: PPUSH
1056: CALL_OW 234
1060: GO 1132
1062: LD_INT 2
1064: DOUBLE
1065: EQUAL
1066: IFTRUE 1070
1068: GO 1085
1070: POP
// SetLives ( Bobby , 460 ) ; 3 :
1071: LD_EXP 17
1075: PPUSH
1076: LD_INT 460
1078: PPUSH
1079: CALL_OW 234
1083: GO 1132
1085: LD_INT 3
1087: DOUBLE
1088: EQUAL
1089: IFTRUE 1093
1091: GO 1108
1093: POP
// SetLives ( Bobby , 420 ) ; 4 :
1094: LD_EXP 17
1098: PPUSH
1099: LD_INT 420
1101: PPUSH
1102: CALL_OW 234
1106: GO 1132
1108: LD_INT 4
1110: DOUBLE
1111: EQUAL
1112: IFTRUE 1116
1114: GO 1131
1116: POP
// SetLives ( Bobby , 400 ) ; end ;
1117: LD_EXP 17
1121: PPUSH
1122: LD_INT 400
1124: PPUSH
1125: CALL_OW 234
1129: GO 1132
1131: POP
// end ; end_of_file
1132: LD_VAR 0 1
1136: RET
// export russian_troops_1 , russian_troops_2 , russian_patrol_tanks , russian_meta_guards , russian_patrol_forest , russian_patrol_hidden ; export Pokryshkin ; export function InitRussian ; var skill , i , un ; begin
1137: LD_INT 0
1139: PPUSH
1140: PPUSH
1141: PPUSH
1142: PPUSH
// skill := [ 1 , 2 , 3 , 4 ] [ Difficulty ] ;
1143: LD_ADDR_VAR 0 2
1147: PUSH
1148: LD_INT 1
1150: PUSH
1151: LD_INT 2
1153: PUSH
1154: LD_INT 3
1156: PUSH
1157: LD_INT 4
1159: PUSH
1160: EMPTY
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: PUSH
1166: LD_OWVAR 67
1170: ARRAY
1171: ST_TO_ADDR
// uc_side := 3 ;
1172: LD_ADDR_OWVAR 20
1176: PUSH
1177: LD_INT 3
1179: ST_TO_ADDR
// uc_nation := 3 ;
1180: LD_ADDR_OWVAR 21
1184: PUSH
1185: LD_INT 3
1187: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
1188: LD_ADDR_EXP 27
1192: PUSH
1193: LD_STRING Pokryshkin
1195: PPUSH
1196: LD_INT 0
1198: PPUSH
1199: LD_STRING 
1201: PPUSH
1202: CALL 28359 0 3
1206: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 44 , 5 , false ) ;
1207: LD_EXP 27
1211: PPUSH
1212: LD_INT 44
1214: PPUSH
1215: LD_INT 5
1217: PPUSH
1218: LD_INT 0
1220: PPUSH
1221: CALL_OW 48
// hc_importance := 0 ;
1225: LD_ADDR_OWVAR 32
1229: PUSH
1230: LD_INT 0
1232: ST_TO_ADDR
// hc_gallery :=  ;
1233: LD_ADDR_OWVAR 33
1237: PUSH
1238: LD_STRING 
1240: ST_TO_ADDR
// hc_name :=  ;
1241: LD_ADDR_OWVAR 26
1245: PUSH
1246: LD_STRING 
1248: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1249: LD_INT 1
1251: PPUSH
1252: LD_INT 1
1254: PPUSH
1255: LD_VAR 0 2
1259: PPUSH
1260: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1264: LD_ADDR_OWVAR 33
1268: PUSH
1269: LD_STRING SecondCharsGal
1271: ST_TO_ADDR
// hc_face_number := 69 ;
1272: LD_ADDR_OWVAR 34
1276: PUSH
1277: LD_INT 69
1279: ST_TO_ADDR
// hc_sex := sex_male ;
1280: LD_ADDR_OWVAR 27
1284: PUSH
1285: LD_INT 1
1287: ST_TO_ADDR
// hc_name := Ilja Ivanov ;
1288: LD_ADDR_OWVAR 26
1292: PUSH
1293: LD_STRING Ilja Ivanov
1295: ST_TO_ADDR
// un := CreateHuman ;
1296: LD_ADDR_VAR 0 4
1300: PUSH
1301: CALL_OW 44
1305: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 1 , un ) ;
1306: LD_ADDR_EXP 21
1310: PUSH
1311: LD_EXP 21
1315: PPUSH
1316: LD_INT 1
1318: PPUSH
1319: LD_VAR 0 4
1323: PPUSH
1324: CALL_OW 2
1328: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1329: LD_VAR 0 4
1333: PPUSH
1334: LD_INT 3
1336: PPUSH
1337: LD_INT 0
1339: PPUSH
1340: CALL_OW 49
// PrepareHuman ( sex_male , 1 , skill ) ;
1344: LD_INT 1
1346: PPUSH
1347: LD_INT 1
1349: PPUSH
1350: LD_VAR 0 2
1354: PPUSH
1355: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1359: LD_ADDR_OWVAR 33
1363: PUSH
1364: LD_STRING SecondCharsGal
1366: ST_TO_ADDR
// hc_face_number := 68 ;
1367: LD_ADDR_OWVAR 34
1371: PUSH
1372: LD_INT 68
1374: ST_TO_ADDR
// hc_name := Pavel Starczy ;
1375: LD_ADDR_OWVAR 26
1379: PUSH
1380: LD_STRING Pavel Starczy
1382: ST_TO_ADDR
// un := CreateHuman ;
1383: LD_ADDR_VAR 0 4
1387: PUSH
1388: CALL_OW 44
1392: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 2 , un ) ;
1393: LD_ADDR_EXP 21
1397: PUSH
1398: LD_EXP 21
1402: PPUSH
1403: LD_INT 2
1405: PPUSH
1406: LD_VAR 0 4
1410: PPUSH
1411: CALL_OW 2
1415: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1416: LD_VAR 0 4
1420: PPUSH
1421: LD_INT 3
1423: PPUSH
1424: LD_INT 0
1426: PPUSH
1427: CALL_OW 49
// InitHc ;
1431: CALL_OW 19
// for i = 1 to 7 do
1435: LD_ADDR_VAR 0 3
1439: PUSH
1440: DOUBLE
1441: LD_INT 1
1443: DEC
1444: ST_TO_ADDR
1445: LD_INT 7
1447: PUSH
1448: FOR_TO
1449: IFFALSE 1600
// begin PrepareHuman ( false , 1 , skill ) ;
1451: LD_INT 0
1453: PPUSH
1454: LD_INT 1
1456: PPUSH
1457: LD_VAR 0 2
1461: PPUSH
1462: CALL_OW 380
// un := CreateHuman ;
1466: LD_ADDR_VAR 0 4
1470: PUSH
1471: CALL_OW 44
1475: ST_TO_ADDR
// if i mod 2 = 0 then
1476: LD_VAR 0 3
1480: PUSH
1481: LD_INT 2
1483: MOD
1484: PUSH
1485: LD_INT 0
1487: EQUAL
1488: IFFALSE 1545
// begin russian_troops_1 := Insert ( russian_troops_1 , russian_troops_1 + 1 , un ) ;
1490: LD_ADDR_EXP 21
1494: PUSH
1495: LD_EXP 21
1499: PPUSH
1500: LD_EXP 21
1504: PUSH
1505: LD_INT 1
1507: PLUS
1508: PPUSH
1509: LD_VAR 0 4
1513: PPUSH
1514: CALL_OW 2
1518: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1519: LD_VAR 0 4
1523: PPUSH
1524: LD_INT 3
1526: PPUSH
1527: LD_INT 0
1529: PPUSH
1530: CALL_OW 49
// ComHold ( un ) ;
1534: LD_VAR 0 4
1538: PPUSH
1539: CALL_OW 140
// end else
1543: GO 1598
// begin russian_troops_2 := Insert ( russian_troops_2 , russian_troops_2 + 1 , un ) ;
1545: LD_ADDR_EXP 22
1549: PUSH
1550: LD_EXP 22
1554: PPUSH
1555: LD_EXP 22
1559: PUSH
1560: LD_INT 1
1562: PLUS
1563: PPUSH
1564: LD_VAR 0 4
1568: PPUSH
1569: CALL_OW 2
1573: ST_TO_ADDR
// PlaceUnitArea ( un , guard_south , false ) ;
1574: LD_VAR 0 4
1578: PPUSH
1579: LD_INT 4
1581: PPUSH
1582: LD_INT 0
1584: PPUSH
1585: CALL_OW 49
// ComHold ( un ) ;
1589: LD_VAR 0 4
1593: PPUSH
1594: CALL_OW 140
// end ; end ;
1598: GO 1448
1600: POP
1601: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) do
1602: LD_ADDR_VAR 0 3
1606: PUSH
1607: LD_INT 22
1609: PUSH
1610: LD_INT 3
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: PUSH
1617: LD_INT 30
1619: PUSH
1620: LD_INT 31
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: PUSH
1627: EMPTY
1628: LIST
1629: LIST
1630: PPUSH
1631: CALL_OW 69
1635: PUSH
1636: FOR_IN
1637: IFFALSE 1655
// PrepareSolBun ( skill , i ) ;
1639: LD_VAR 0 2
1643: PPUSH
1644: LD_VAR 0 3
1648: PPUSH
1649: CALL 197 0 2
1653: GO 1636
1655: POP
1656: POP
// for i = 1 to 3 do
1657: LD_ADDR_VAR 0 3
1661: PUSH
1662: DOUBLE
1663: LD_INT 1
1665: DEC
1666: ST_TO_ADDR
1667: LD_INT 3
1669: PUSH
1670: FOR_TO
1671: IFFALSE 1807
// begin un := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1673: LD_ADDR_VAR 0 4
1677: PUSH
1678: LD_INT 3
1680: PPUSH
1681: LD_INT 3
1683: PPUSH
1684: LD_INT 22
1686: PPUSH
1687: LD_INT 1
1689: PPUSH
1690: LD_INT 1
1692: PPUSH
1693: LD_INT 42
1695: PPUSH
1696: LD_INT 100
1698: PPUSH
1699: CALL 333 0 7
1703: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
1704: LD_INT 0
1706: PPUSH
1707: LD_INT 3
1709: PPUSH
1710: LD_VAR 0 2
1714: PPUSH
1715: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1719: CALL_OW 44
1723: PPUSH
1724: LD_VAR 0 4
1728: PPUSH
1729: CALL_OW 52
// PlaceUnitXY ( un , [ 131 , 23 , 167 ] [ i ] , [ 87 , 14 , 95 ] [ i ] , false ) ;
1733: LD_VAR 0 4
1737: PPUSH
1738: LD_INT 131
1740: PUSH
1741: LD_INT 23
1743: PUSH
1744: LD_INT 167
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: LIST
1751: PUSH
1752: LD_VAR 0 3
1756: ARRAY
1757: PPUSH
1758: LD_INT 87
1760: PUSH
1761: LD_INT 14
1763: PUSH
1764: LD_INT 95
1766: PUSH
1767: EMPTY
1768: LIST
1769: LIST
1770: LIST
1771: PUSH
1772: LD_VAR 0 3
1776: ARRAY
1777: PPUSH
1778: LD_INT 0
1780: PPUSH
1781: CALL_OW 48
// russian_patrol_tanks := Join ( russian_patrol_tanks , un ) ;
1785: LD_ADDR_EXP 23
1789: PUSH
1790: LD_EXP 23
1794: PPUSH
1795: LD_VAR 0 4
1799: PPUSH
1800: CALL 66154 0 2
1804: ST_TO_ADDR
// end ;
1805: GO 1670
1807: POP
1808: POP
// for i = 1 to 2 do
1809: LD_ADDR_VAR 0 3
1813: PUSH
1814: DOUBLE
1815: LD_INT 1
1817: DEC
1818: ST_TO_ADDR
1819: LD_INT 2
1821: PUSH
1822: FOR_TO
1823: IFFALSE 1914
// begin PrepareHuman ( [ sex_female , sex_male , sex_male ] [ i ] , 1 , 1 ) ;
1825: LD_INT 2
1827: PUSH
1828: LD_INT 1
1830: PUSH
1831: LD_INT 1
1833: PUSH
1834: EMPTY
1835: LIST
1836: LIST
1837: LIST
1838: PUSH
1839: LD_VAR 0 3
1843: ARRAY
1844: PPUSH
1845: LD_INT 1
1847: PPUSH
1848: LD_INT 1
1850: PPUSH
1851: CALL_OW 380
// un := CreateHuman ;
1855: LD_ADDR_VAR 0 4
1859: PUSH
1860: CALL_OW 44
1864: ST_TO_ADDR
// russian_meta_guards := Insert ( russian_meta_guards , 1 , un ) ;
1865: LD_ADDR_EXP 24
1869: PUSH
1870: LD_EXP 24
1874: PPUSH
1875: LD_INT 1
1877: PPUSH
1878: LD_VAR 0 4
1882: PPUSH
1883: CALL_OW 2
1887: ST_TO_ADDR
// PlaceUnitArea ( un , exitArea , false ) ;
1888: LD_VAR 0 4
1892: PPUSH
1893: LD_INT 10
1895: PPUSH
1896: LD_INT 0
1898: PPUSH
1899: CALL_OW 49
// ComHold ( un ) ;
1903: LD_VAR 0 4
1907: PPUSH
1908: CALL_OW 140
// end ;
1912: GO 1822
1914: POP
1915: POP
// if Difficulty < 3 then
1916: LD_OWVAR 67
1920: PUSH
1921: LD_INT 3
1923: LESS
1924: IFFALSE 1928
// exit ;
1926: GO 1999
// PrepareHuman ( false , 1 , skill ) ;
1928: LD_INT 0
1930: PPUSH
1931: LD_INT 1
1933: PPUSH
1934: LD_VAR 0 2
1938: PPUSH
1939: CALL_OW 380
// russian_patrol_forest := CreateHuman ;
1943: LD_ADDR_EXP 25
1947: PUSH
1948: CALL_OW 44
1952: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_forest , 82 , 2 , false ) ;
1953: LD_EXP 25
1957: PPUSH
1958: LD_INT 82
1960: PPUSH
1961: LD_INT 2
1963: PPUSH
1964: LD_INT 0
1966: PPUSH
1967: CALL_OW 48
// russian_patrol_hidden := CreateHuman ;
1971: LD_ADDR_EXP 26
1975: PUSH
1976: CALL_OW 44
1980: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_hidden , 136 , 30 , false ) ;
1981: LD_EXP 26
1985: PPUSH
1986: LD_INT 136
1988: PPUSH
1989: LD_INT 30
1991: PPUSH
1992: LD_INT 0
1994: PPUSH
1995: CALL_OW 48
// end ;
1999: LD_VAR 0 1
2003: RET
// every 0 0$01 trigger active_road_patrol do
2004: LD_EXP 8
2008: IFFALSE 2074
2010: GO 2012
2012: DISABLE
// ComPatrol ( russian_patrol_tanks [ 1 ] , road , 0 0$02 , [ 131 , 87 , 107 , 75 , 107 , 66 , 114 , 61 , 107 , 34 ] ) ;
2013: LD_EXP 23
2017: PUSH
2018: LD_INT 1
2020: ARRAY
2021: PPUSH
2022: LD_STRING road
2024: PPUSH
2025: LD_INT 70
2027: PPUSH
2028: LD_INT 131
2030: PUSH
2031: LD_INT 87
2033: PUSH
2034: LD_INT 107
2036: PUSH
2037: LD_INT 75
2039: PUSH
2040: LD_INT 107
2042: PUSH
2043: LD_INT 66
2045: PUSH
2046: LD_INT 114
2048: PUSH
2049: LD_INT 61
2051: PUSH
2052: LD_INT 107
2054: PUSH
2055: LD_INT 34
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: PPUSH
2070: CALL 421 0 4
2074: END
// every 0 0$01 trigger active_road_patrol do
2075: LD_EXP 8
2079: IFFALSE 2137
2081: GO 2083
2083: DISABLE
// ComPatrol ( russian_patrol_tanks [ 2 ] , road , 0 0$02 , [ 21 , 12 , 37 , 30 , 65 , 62 , 107 , 76 ] ) ;
2084: LD_EXP 23
2088: PUSH
2089: LD_INT 2
2091: ARRAY
2092: PPUSH
2093: LD_STRING road
2095: PPUSH
2096: LD_INT 70
2098: PPUSH
2099: LD_INT 21
2101: PUSH
2102: LD_INT 12
2104: PUSH
2105: LD_INT 37
2107: PUSH
2108: LD_INT 30
2110: PUSH
2111: LD_INT 65
2113: PUSH
2114: LD_INT 62
2116: PUSH
2117: LD_INT 107
2119: PUSH
2120: LD_INT 76
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: PPUSH
2133: CALL 421 0 4
2137: END
// every 0 0$01 trigger active_road_patrol do
2138: LD_EXP 8
2142: IFFALSE 2200
2144: GO 2146
2146: DISABLE
// ComPatrol ( russian_patrol_tanks [ 3 ] , road , 0 0$02 , [ 167 , 95 , 147 , 81 , 144 , 66 , 149 , 55 ] ) ;
2147: LD_EXP 23
2151: PUSH
2152: LD_INT 3
2154: ARRAY
2155: PPUSH
2156: LD_STRING road
2158: PPUSH
2159: LD_INT 70
2161: PPUSH
2162: LD_INT 167
2164: PUSH
2165: LD_INT 95
2167: PUSH
2168: LD_INT 147
2170: PUSH
2171: LD_INT 81
2173: PUSH
2174: LD_INT 144
2176: PUSH
2177: LD_INT 66
2179: PUSH
2180: LD_INT 149
2182: PUSH
2183: LD_INT 55
2185: PUSH
2186: EMPTY
2187: LIST
2188: LIST
2189: LIST
2190: LIST
2191: LIST
2192: LIST
2193: LIST
2194: LIST
2195: PPUSH
2196: CALL 421 0 4
2200: END
// every 0 0$01 trigger IsOk ( russian_patrol_forest ) do
2201: LD_EXP 25
2205: PPUSH
2206: CALL_OW 302
2210: IFFALSE 2272
2212: GO 2214
2214: DISABLE
// ComPatrol ( russian_patrol_forest , forest , 0 0$01 , [ 52 , 15 , 81 , 9 , 120 , 52 , 135 , 80 , 122 , 95 ] ) ;
2215: LD_EXP 25
2219: PPUSH
2220: LD_STRING forest
2222: PPUSH
2223: LD_INT 35
2225: PPUSH
2226: LD_INT 52
2228: PUSH
2229: LD_INT 15
2231: PUSH
2232: LD_INT 81
2234: PUSH
2235: LD_INT 9
2237: PUSH
2238: LD_INT 120
2240: PUSH
2241: LD_INT 52
2243: PUSH
2244: LD_INT 135
2246: PUSH
2247: LD_INT 80
2249: PUSH
2250: LD_INT 122
2252: PUSH
2253: LD_INT 95
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: LIST
2260: LIST
2261: LIST
2262: LIST
2263: LIST
2264: LIST
2265: LIST
2266: LIST
2267: PPUSH
2268: CALL 421 0 4
2272: END
// every 0 0$01 trigger IsOk ( russian_patrol_hidden ) do
2273: LD_EXP 26
2277: PPUSH
2278: CALL_OW 302
2282: IFFALSE 2336
2284: GO 2286
2286: DISABLE
// ComPatrol ( russian_patrol_hidden , forest , 0 0$02 , [ 137 , 30 , 127 , 23 , 122 , 16 , 114 , 3 ] ) ;
2287: LD_EXP 26
2291: PPUSH
2292: LD_STRING forest
2294: PPUSH
2295: LD_INT 70
2297: PPUSH
2298: LD_INT 137
2300: PUSH
2301: LD_INT 30
2303: PUSH
2304: LD_INT 127
2306: PUSH
2307: LD_INT 23
2309: PUSH
2310: LD_INT 122
2312: PUSH
2313: LD_INT 16
2315: PUSH
2316: LD_INT 114
2318: PUSH
2319: LD_INT 3
2321: PUSH
2322: EMPTY
2323: LIST
2324: LIST
2325: LIST
2326: LIST
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: PPUSH
2332: CALL 421 0 4
2336: END
// every 0 0$01 trigger macmilan_use_radio do
2337: LD_EXP 6
2341: IFFALSE 2402
2343: GO 2345
2345: DISABLE
// begin active_road_patrol := false ;
2346: LD_ADDR_EXP 8
2350: PUSH
2351: LD_INT 0
2353: ST_TO_ADDR
// ComStop ( russian_patrol_tanks ) ;
2354: LD_EXP 23
2358: PPUSH
2359: CALL_OW 141
// AddComAgressiveMove ( russian_patrol_tanks , 72 , 41 ) ;
2363: LD_EXP 23
2367: PPUSH
2368: LD_INT 72
2370: PPUSH
2371: LD_INT 41
2373: PPUSH
2374: CALL_OW 174
// ComExitBuilding ( russian_troops_2 ) ;
2378: LD_EXP 22
2382: PPUSH
2383: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , 72 , 41 ) ;
2387: LD_EXP 22
2391: PPUSH
2392: LD_INT 72
2394: PPUSH
2395: LD_INT 41
2397: PPUSH
2398: CALL_OW 174
// end ;
2402: END
// every 0 0$03 trigger FilterUnitsInArea ( def_south , [ f_side , 1 ] ) do var un ;
2403: LD_INT 9
2405: PPUSH
2406: LD_INT 22
2408: PUSH
2409: LD_INT 1
2411: PUSH
2412: EMPTY
2413: LIST
2414: LIST
2415: PPUSH
2416: CALL_OW 70
2420: IFFALSE 2494
2422: GO 2424
2424: DISABLE
2425: LD_INT 0
2427: PPUSH
// begin enable ;
2428: ENABLE
// un := FilterUnitsInArea ( def_south , [ f_side , 1 ] ) [ 1 ] ;
2429: LD_ADDR_VAR 0 1
2433: PUSH
2434: LD_INT 9
2436: PPUSH
2437: LD_INT 22
2439: PUSH
2440: LD_INT 1
2442: PUSH
2443: EMPTY
2444: LIST
2445: LIST
2446: PPUSH
2447: CALL_OW 70
2451: PUSH
2452: LD_INT 1
2454: ARRAY
2455: ST_TO_ADDR
// ComExitBuilding ( russian_troops_2 ) ;
2456: LD_EXP 22
2460: PPUSH
2461: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , GetX ( un ) , GetY ( un ) ) ;
2465: LD_EXP 22
2469: PPUSH
2470: LD_VAR 0 1
2474: PPUSH
2475: CALL_OW 250
2479: PPUSH
2480: LD_VAR 0 1
2484: PPUSH
2485: CALL_OW 251
2489: PPUSH
2490: CALL_OW 174
// end ;
2494: PPOPN 1
2496: END
// every 0 0$01 trigger ( GetLives ( russian_patrol_tanks [ 1 ] ) < 999 or GetLives ( russian_patrol_tanks [ 2 ] ) < 999 ) and See ( 3 , JMM ) do
2497: LD_EXP 23
2501: PUSH
2502: LD_INT 1
2504: ARRAY
2505: PPUSH
2506: CALL_OW 256
2510: PUSH
2511: LD_INT 999
2513: LESS
2514: PUSH
2515: LD_EXP 23
2519: PUSH
2520: LD_INT 2
2522: ARRAY
2523: PPUSH
2524: CALL_OW 256
2528: PUSH
2529: LD_INT 999
2531: LESS
2532: OR
2533: PUSH
2534: LD_INT 3
2536: PPUSH
2537: LD_EXP 16
2541: PPUSH
2542: CALL_OW 292
2546: AND
2547: IFFALSE 2574
2549: GO 2551
2551: DISABLE
// begin active_road_patrol := false ;
2552: LD_ADDR_EXP 8
2556: PUSH
2557: LD_INT 0
2559: ST_TO_ADDR
// ComAttackUnit ( russian_patrol_tanks , JMM ) ;
2560: LD_EXP 23
2564: PPUSH
2565: LD_EXP 16
2569: PPUSH
2570: CALL_OW 115
// end ;
2574: END
// every 0 0$01 trigger macmilan_in_trap do
2575: LD_EXP 9
2579: IFFALSE 2625
2581: GO 2583
2583: DISABLE
// begin ComExitBuilding ( russian_troops_2 ) ;
2584: LD_EXP 22
2588: PPUSH
2589: CALL_OW 122
// ComAttackUnit ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , JMM ) ;
2593: LD_EXP 21
2597: PUSH
2598: LD_EXP 22
2602: ADD
2603: PUSH
2604: LD_EXP 27
2608: ADD
2609: PUSH
2610: LD_EXP 23
2614: ADD
2615: PPUSH
2616: LD_EXP 16
2620: PPUSH
2621: CALL_OW 115
// end ;
2625: END
// every 0 0$01 trigger meta_action do
2626: LD_EXP 10
2630: IFFALSE 2748
2632: GO 2634
2634: DISABLE
// begin active_road_patrol := false ;
2635: LD_ADDR_EXP 8
2639: PUSH
2640: LD_INT 0
2642: ST_TO_ADDR
// if FilterUnitsInArea ( secretRoad , [ f_side , 1 ] ) then
2643: LD_INT 15
2645: PPUSH
2646: LD_INT 22
2648: PUSH
2649: LD_INT 1
2651: PUSH
2652: EMPTY
2653: LIST
2654: LIST
2655: PPUSH
2656: CALL_OW 70
2660: IFFALSE 2715
// begin ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 , 104 , 10 ) ;
2662: LD_EXP 21
2666: PUSH
2667: LD_EXP 22
2671: ADD
2672: PPUSH
2673: LD_INT 104
2675: PPUSH
2676: LD_INT 10
2678: PPUSH
2679: CALL_OW 114
// ComAgressiveMove ( russian_patrol_tanks , 96 , 14 ) ;
2683: LD_EXP 23
2687: PPUSH
2688: LD_INT 96
2690: PPUSH
2691: LD_INT 14
2693: PPUSH
2694: CALL_OW 114
// ComAgressiveMove ( Pokryshkin , 85 , 4 ) ;
2698: LD_EXP 27
2702: PPUSH
2703: LD_INT 85
2705: PPUSH
2706: LD_INT 4
2708: PPUSH
2709: CALL_OW 114
// end else
2713: GO 2748
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , 93 , 1 ) ;
2715: LD_EXP 21
2719: PUSH
2720: LD_EXP 22
2724: ADD
2725: PUSH
2726: LD_EXP 27
2730: ADD
2731: PUSH
2732: LD_EXP 23
2736: ADD
2737: PPUSH
2738: LD_INT 93
2740: PPUSH
2741: LD_INT 1
2743: PPUSH
2744: CALL_OW 114
// end ;
2748: END
// every 0 0$1 trigger GetLives ( Pokryshkin ) < 1000 do
2749: LD_EXP 27
2753: PPUSH
2754: CALL_OW 256
2758: PUSH
2759: LD_INT 1000
2761: LESS
2762: IFFALSE 2813
2764: GO 2766
2766: DISABLE
// begin enable ;
2767: ENABLE
// if HexInfo ( 18 , 1 ) = Pokryshkin then
2768: LD_INT 18
2770: PPUSH
2771: LD_INT 1
2773: PPUSH
2774: CALL_OW 428
2778: PUSH
2779: LD_EXP 27
2783: EQUAL
2784: IFFALSE 2798
// begin RemoveUnit ( Pokryshkin ) ;
2786: LD_EXP 27
2790: PPUSH
2791: CALL_OW 64
// disable ;
2795: DISABLE
// end else
2796: GO 2813
// ComMoveXY ( Pokryshkin , 18 , 1 ) ;
2798: LD_EXP 27
2802: PPUSH
2803: LD_INT 18
2805: PPUSH
2806: LD_INT 1
2808: PPUSH
2809: CALL_OW 111
// end ;
2813: END
// every 0 0$20 trigger send_troops_to_forest do
2814: LD_EXP 14
2818: IFFALSE 2872
2820: GO 2822
2822: DISABLE
// begin if not IsOk ( russian_patrol_forest ) then
2823: LD_EXP 25
2827: PPUSH
2828: CALL_OW 302
2832: NOT
2833: IFFALSE 2837
// exit ;
2835: GO 2872
// ComAgressiveMove ( russian_troops_1 ^ Pokryshkin , GetRememberedX ( russian_patrol_forest ) , GetRememberedY ( russian_patrol_forest ) ) ;
2837: LD_EXP 21
2841: PUSH
2842: LD_EXP 27
2846: ADD
2847: PPUSH
2848: LD_EXP 25
2852: PPUSH
2853: CALL_OW 252
2857: PPUSH
2858: LD_EXP 25
2862: PPUSH
2863: CALL_OW 253
2867: PPUSH
2868: CALL_OW 114
// end ;
2872: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) = 3 then
2873: LD_VAR 0 1
2877: PPUSH
2878: CALL_OW 255
2882: PUSH
2883: LD_INT 3
2885: EQUAL
2886: IFFALSE 2929
// begin wait ( 11 ) ;
2888: LD_INT 11
2890: PPUSH
2891: CALL_OW 67
// ComEnterUnit ( driver , NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_depot ] ) , driver ) ) ;
2895: LD_VAR 0 1
2899: PPUSH
2900: LD_INT 30
2902: PUSH
2903: LD_INT 0
2905: PUSH
2906: EMPTY
2907: LIST
2908: LIST
2909: PPUSH
2910: CALL_OW 69
2914: PPUSH
2915: LD_VAR 0 1
2919: PPUSH
2920: CALL_OW 74
2924: PPUSH
2925: CALL_OW 120
// end ; end ; end_of_file
2929: PPOPN 4
2931: END
// export function Action ; var i ; begin
2932: LD_INT 0
2934: PPUSH
2935: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
2936: LD_ADDR_VAR 0 2
2940: PUSH
2941: LD_INT 22
2943: PUSH
2944: LD_INT 3
2946: PUSH
2947: EMPTY
2948: LIST
2949: LIST
2950: PUSH
2951: LD_INT 25
2953: PUSH
2954: LD_INT 1
2956: PUSH
2957: EMPTY
2958: LIST
2959: LIST
2960: PUSH
2961: EMPTY
2962: LIST
2963: LIST
2964: PPUSH
2965: CALL_OW 69
2969: PUSH
2970: FOR_IN
2971: IFFALSE 2984
// ComHold ( i ) ;
2973: LD_VAR 0 2
2977: PPUSH
2978: CALL_OW 140
2982: GO 2970
2984: POP
2985: POP
// InGameOn ;
2986: CALL_OW 8
// CenterOnXY ( 79 , 76 ) ;
2990: LD_INT 79
2992: PPUSH
2993: LD_INT 76
2995: PPUSH
2996: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
3000: LD_INT 10
3002: PPUSH
3003: CALL_OW 67
// PlaceUnitXY ( JMM , 80 , 79 , true ) ;
3007: LD_EXP 16
3011: PPUSH
3012: LD_INT 80
3014: PPUSH
3015: LD_INT 79
3017: PPUSH
3018: LD_INT 1
3020: PPUSH
3021: CALL_OW 48
// Wait ( 0 0$03 ) ;
3025: LD_INT 105
3027: PPUSH
3028: CALL_OW 67
// ComMoveXY ( JMM , 80 , 76 ) ;
3032: LD_EXP 16
3036: PPUSH
3037: LD_INT 80
3039: PPUSH
3040: LD_INT 76
3042: PPUSH
3043: CALL_OW 111
// Say ( JMM , D1-JMM-1 ) ;
3047: LD_EXP 16
3051: PPUSH
3052: LD_STRING D1-JMM-1
3054: PPUSH
3055: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
3059: LD_INT 10
3061: PPUSH
3062: CALL_OW 67
// ComMoveXY ( JMM , 76 , 76 ) ;
3066: LD_EXP 16
3070: PPUSH
3071: LD_INT 76
3073: PPUSH
3074: LD_INT 76
3076: PPUSH
3077: CALL_OW 111
// Say ( JMM , D1-JMM-1a ) ;
3081: LD_EXP 16
3085: PPUSH
3086: LD_STRING D1-JMM-1a
3088: PPUSH
3089: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
3093: LD_INT 10
3095: PPUSH
3096: CALL_OW 67
// ComTurnXY ( JMM , 83 , 66 ) ;
3100: LD_EXP 16
3104: PPUSH
3105: LD_INT 83
3107: PPUSH
3108: LD_INT 66
3110: PPUSH
3111: CALL_OW 118
// Say ( JMM , D1-JMM-1b ) ;
3115: LD_EXP 16
3119: PPUSH
3120: LD_STRING D1-JMM-1b
3122: PPUSH
3123: CALL_OW 88
// Wait ( 0 0$0.5 ) ;
3127: LD_INT 18
3129: PPUSH
3130: CALL_OW 67
// Say ( JMM , D1-JMM-1c ) ;
3134: LD_EXP 16
3138: PPUSH
3139: LD_STRING D1-JMM-1c
3141: PPUSH
3142: CALL_OW 88
// Wait ( 0 0$0.2 ) ;
3146: LD_INT 7
3148: PPUSH
3149: CALL_OW 67
// SayRadioNoFaceNoName ( Powell , D1-Pow-1 ) ;
3153: LD_EXP 19
3157: PPUSH
3158: LD_STRING D1-Pow-1
3160: PPUSH
3161: CALL 70229 0 2
// Say ( JMM , D1-JMM-2 ) ;
3165: LD_EXP 16
3169: PPUSH
3170: LD_STRING D1-JMM-2
3172: PPUSH
3173: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D1-Pow-2 ) ;
3177: LD_EXP 19
3181: PPUSH
3182: LD_STRING D1-Pow-2
3184: PPUSH
3185: CALL 70229 0 2
// Say ( JMM , D1-JMM-3 ) ;
3189: LD_EXP 16
3193: PPUSH
3194: LD_STRING D1-JMM-3
3196: PPUSH
3197: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D1-Pow-3 ) ;
3201: LD_EXP 19
3205: PPUSH
3206: LD_STRING D1-Pow-3
3208: PPUSH
3209: CALL 70229 0 2
// Say ( JMM , D1-JMM-4 ) ;
3213: LD_EXP 16
3217: PPUSH
3218: LD_STRING D1-JMM-4
3220: PPUSH
3221: CALL_OW 88
// ComFree ( JMM ) ;
3225: LD_EXP 16
3229: PPUSH
3230: CALL_OW 139
// Wait ( 0 0$0.3 ) ;
3234: LD_INT 10
3236: PPUSH
3237: CALL_OW 67
// InGameOff ;
3241: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
3245: LD_STRING M1
3247: PPUSH
3248: CALL_OW 337
// SaveForQuickRestart ;
3252: CALL_OW 22
// active_russian_dialog := true ;
3256: LD_ADDR_EXP 3
3260: PUSH
3261: LD_INT 1
3263: ST_TO_ADDR
// active_road_patrol := true ;
3264: LD_ADDR_EXP 8
3268: PUSH
3269: LD_INT 1
3271: ST_TO_ADDR
// if Difficulty < 3 then
3272: LD_OWVAR 67
3276: PUSH
3277: LD_INT 3
3279: LESS
3280: IFFALSE 3311
// begin PlaceUnitXY ( Bobby , 41 , 71 , false ) ;
3282: LD_EXP 17
3286: PPUSH
3287: LD_INT 41
3289: PPUSH
3290: LD_INT 71
3292: PPUSH
3293: LD_INT 0
3295: PPUSH
3296: CALL_OW 48
// ComHold ( Bobby ) ;
3300: LD_EXP 17
3304: PPUSH
3305: CALL_OW 140
// end else
3309: GO 3359
// begin SetDir ( Bobby , 5 ) ;
3311: LD_EXP 17
3315: PPUSH
3316: LD_INT 5
3318: PPUSH
3319: CALL_OW 233
// PlaceUnitXY ( Bobby , 105 , 98 , false ) ;
3323: LD_EXP 17
3327: PPUSH
3328: LD_INT 105
3330: PPUSH
3331: LD_INT 98
3333: PPUSH
3334: LD_INT 0
3336: PPUSH
3337: CALL_OW 48
// ComCrawl ( Bobby ) ;
3341: LD_EXP 17
3345: PPUSH
3346: CALL_OW 137
// AddComHold ( Bobby ) ;
3350: LD_EXP 17
3354: PPUSH
3355: CALL_OW 200
// end ; if Difficulty < 3 then
3359: LD_OWVAR 67
3363: PUSH
3364: LD_INT 3
3366: LESS
3367: IFFALSE 3404
// begin PlaceUnitXY ( Cyrus , 90 , 42 , false ) ;
3369: LD_EXP 18
3373: PPUSH
3374: LD_INT 90
3376: PPUSH
3377: LD_INT 42
3379: PPUSH
3380: LD_INT 0
3382: PPUSH
3383: CALL_OW 48
// ComMoveXY ( Cyrus , 79 , 34 ) ;
3387: LD_EXP 18
3391: PPUSH
3392: LD_INT 79
3394: PPUSH
3395: LD_INT 34
3397: PPUSH
3398: CALL_OW 111
// end else
3402: GO 3452
// if Difficulty = 3 then
3404: LD_OWVAR 67
3408: PUSH
3409: LD_INT 3
3411: EQUAL
3412: IFFALSE 3434
// PlaceUnitXY ( Cyrus , 125 , 42 , false ) else
3414: LD_EXP 18
3418: PPUSH
3419: LD_INT 125
3421: PPUSH
3422: LD_INT 42
3424: PPUSH
3425: LD_INT 0
3427: PPUSH
3428: CALL_OW 48
3432: GO 3452
// PlaceUnitXY ( Cyrus , 154 , 97 , false ) ;
3434: LD_EXP 18
3438: PPUSH
3439: LD_INT 154
3441: PPUSH
3442: LD_INT 97
3444: PPUSH
3445: LD_INT 0
3447: PPUSH
3448: CALL_OW 48
// AddComCrawl ( Cyrus ) ;
3452: LD_EXP 18
3456: PPUSH
3457: CALL_OW 197
// AddComHold ( Cyrus ) ;
3461: LD_EXP 18
3465: PPUSH
3466: CALL_OW 200
// end ;
3470: LD_VAR 0 1
3474: RET
// every 0 0$01 trigger active_russian_dialog do var wait_points ;
3475: LD_EXP 3
3479: IFFALSE 4073
3481: GO 3483
3483: DISABLE
3484: LD_INT 0
3486: PPUSH
// begin wait_points := 0 ;
3487: LD_ADDR_VAR 0 1
3491: PUSH
3492: LD_INT 0
3494: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
3495: LD_INT 70
3497: PPUSH
3498: CALL_OW 67
// ComAgressiveMove ( russian_troops_1 , 79 , 83 ) ;
3502: LD_EXP 21
3506: PPUSH
3507: LD_INT 79
3509: PPUSH
3510: LD_INT 83
3512: PPUSH
3513: CALL_OW 114
// Say ( russian_troops_1 [ 2 ] , D1R-Rus1-1 ) ;
3517: LD_EXP 21
3521: PUSH
3522: LD_INT 2
3524: ARRAY
3525: PPUSH
3526: LD_STRING D1R-Rus1-1
3528: PPUSH
3529: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1R-Rus2-1 ) ;
3533: LD_EXP 21
3537: PUSH
3538: LD_INT 1
3540: ARRAY
3541: PPUSH
3542: LD_STRING D1R-Rus2-1
3544: PPUSH
3545: CALL_OW 88
// ComAgressiveMove ( russian_troops_2 , 91 , 80 ) ;
3549: LD_EXP 22
3553: PPUSH
3554: LD_INT 91
3556: PPUSH
3557: LD_INT 80
3559: PPUSH
3560: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
3564: LD_INT 35
3566: PPUSH
3567: CALL_OW 67
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 79 , 82 ) < 6 ;
3571: LD_EXP 21
3575: PUSH
3576: LD_INT 1
3578: ARRAY
3579: PPUSH
3580: LD_INT 79
3582: PPUSH
3583: LD_INT 82
3585: PPUSH
3586: CALL_OW 297
3590: PUSH
3591: LD_INT 6
3593: LESS
3594: IFFALSE 3564
// if not IsInArea ( JMM , jmm_spot ) then
3596: LD_EXP 16
3600: PPUSH
3601: LD_INT 5
3603: PPUSH
3604: CALL_OW 308
3608: NOT
3609: IFFALSE 3629
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1 ) else
3611: LD_EXP 21
3615: PUSH
3616: LD_INT 1
3618: ARRAY
3619: PPUSH
3620: LD_STRING D1Ra-Rus2-1
3622: PPUSH
3623: CALL_OW 88
3627: GO 3696
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3629: LD_EXP 21
3633: PUSH
3634: LD_INT 2
3636: ARRAY
3637: PPUSH
3638: LD_STRING D1Rb-Rus1-1
3640: PPUSH
3641: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Rb-Rus2-1 ) ;
3645: LD_EXP 21
3649: PUSH
3650: LD_INT 1
3652: ARRAY
3653: PPUSH
3654: LD_STRING D1Rb-Rus2-1
3656: PPUSH
3657: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 , GetX ( JMM ) , GetY ( JMM ) ) ;
3661: LD_EXP 21
3665: PUSH
3666: LD_EXP 22
3670: ADD
3671: PPUSH
3672: LD_EXP 16
3676: PPUSH
3677: CALL_OW 250
3681: PPUSH
3682: LD_EXP 16
3686: PPUSH
3687: CALL_OW 251
3691: PPUSH
3692: CALL_OW 114
// end ; wait_points := 10 ;
3696: LD_ADDR_VAR 0 1
3700: PUSH
3701: LD_INT 10
3703: ST_TO_ADDR
// if Difficulty > 1 then
3704: LD_OWVAR 67
3708: PUSH
3709: LD_INT 1
3711: GREATER
3712: IFFALSE 3794
// begin ComAgressiveMove ( russian_troops_1 , 78 , 95 ) ;
3714: LD_EXP 21
3718: PPUSH
3719: LD_INT 78
3721: PPUSH
3722: LD_INT 95
3724: PPUSH
3725: CALL_OW 114
// AddComWait ( russian_troops_1 , 0 0$05 ) ;
3729: LD_EXP 21
3733: PPUSH
3734: LD_INT 175
3736: PPUSH
3737: CALL_OW 202
// wait_points := wait_points + 15 ;
3741: LD_ADDR_VAR 0 1
3745: PUSH
3746: LD_VAR 0 1
3750: PUSH
3751: LD_INT 15
3753: PLUS
3754: ST_TO_ADDR
// if Difficulty > 2 then
3755: LD_OWVAR 67
3759: PUSH
3760: LD_INT 2
3762: GREATER
3763: IFFALSE 3794
// begin AddComAgressiveMove ( russian_troops_1 , 65 , 79 ) ;
3765: LD_EXP 21
3769: PPUSH
3770: LD_INT 65
3772: PPUSH
3773: LD_INT 79
3775: PPUSH
3776: CALL_OW 174
// wait_points := wait_points + 5 ;
3780: LD_ADDR_VAR 0 1
3784: PUSH
3785: LD_VAR 0 1
3789: PUSH
3790: LD_INT 5
3792: PLUS
3793: ST_TO_ADDR
// end ; end ; repeat wait ( 0 0$01 ) ;
3794: LD_INT 35
3796: PPUSH
3797: CALL_OW 67
// wait_points := wait_points - 1 ;
3801: LD_ADDR_VAR 0 1
3805: PUSH
3806: LD_VAR 0 1
3810: PUSH
3811: LD_INT 1
3813: MINUS
3814: ST_TO_ADDR
// if See ( 3 , JMM ) then
3815: LD_INT 3
3817: PPUSH
3818: LD_EXP 16
3822: PPUSH
3823: CALL_OW 292
3827: IFFALSE 3881
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3829: LD_EXP 21
3833: PUSH
3834: LD_INT 2
3836: ARRAY
3837: PPUSH
3838: LD_STRING D1Rb-Rus1-1
3840: PPUSH
3841: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3845: LD_EXP 21
3849: PPUSH
3850: LD_EXP 16
3854: PPUSH
3855: CALL_OW 250
3859: PPUSH
3860: LD_EXP 16
3864: PPUSH
3865: CALL_OW 251
3869: PPUSH
3870: CALL_OW 114
// Wait ( 0 0$03 ) ;
3874: LD_INT 105
3876: PPUSH
3877: CALL_OW 67
// end ; until wait_points = 0 ;
3881: LD_VAR 0 1
3885: PUSH
3886: LD_INT 0
3888: EQUAL
3889: IFFALSE 3794
// Say ( russian_troops_1 [ 2 ] , D1Rc-Rus1-1 ) ;
3891: LD_EXP 21
3895: PUSH
3896: LD_INT 2
3898: ARRAY
3899: PPUSH
3900: LD_STRING D1Rc-Rus1-1
3902: PPUSH
3903: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1a ) ;
3907: LD_EXP 21
3911: PUSH
3912: LD_INT 1
3914: ARRAY
3915: PPUSH
3916: LD_STRING D1Ra-Rus2-1a
3918: PPUSH
3919: CALL_OW 88
// active_powell_dialog := true ;
3923: LD_ADDR_EXP 15
3927: PUSH
3928: LD_INT 1
3930: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3931: LD_EXP 21
3935: PPUSH
3936: LD_INT 45
3938: PPUSH
3939: LD_INT 5
3941: PPUSH
3942: CALL_OW 114
// ComEnterUnit ( russian_troops_2 , rbar1 ) ;
3946: LD_EXP 22
3950: PPUSH
3951: LD_INT 26
3953: PPUSH
3954: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
3958: LD_INT 35
3960: PPUSH
3961: CALL_OW 67
// if See ( 3 , JMM ) then
3965: LD_INT 3
3967: PPUSH
3968: LD_EXP 16
3972: PPUSH
3973: CALL_OW 292
3977: IFFALSE 4033
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3979: LD_EXP 21
3983: PUSH
3984: LD_INT 2
3986: ARRAY
3987: PPUSH
3988: LD_STRING D1Rb-Rus1-1
3990: PPUSH
3991: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3995: LD_EXP 21
3999: PPUSH
4000: LD_EXP 16
4004: PPUSH
4005: CALL_OW 250
4009: PPUSH
4010: LD_EXP 16
4014: PPUSH
4015: CALL_OW 251
4019: PPUSH
4020: CALL_OW 114
// Wait ( 0 0$50 ) ;
4024: LD_INT 1750
4026: PPUSH
4027: CALL_OW 67
// end else
4031: GO 4048
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
4033: LD_EXP 21
4037: PPUSH
4038: LD_INT 45
4040: PPUSH
4041: LD_INT 5
4043: PPUSH
4044: CALL_OW 114
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 45 , 5 ) < 10 ;
4048: LD_EXP 21
4052: PUSH
4053: LD_INT 1
4055: ARRAY
4056: PPUSH
4057: LD_INT 45
4059: PPUSH
4060: LD_INT 5
4062: PPUSH
4063: CALL_OW 297
4067: PUSH
4068: LD_INT 10
4070: LESS
4071: IFFALSE 3958
// end ;
4073: PPOPN 1
4075: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 6 ] ] ) and Difficulty = 1 do
4076: LD_INT 22
4078: PUSH
4079: LD_INT 3
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: PUSH
4086: LD_INT 92
4088: PUSH
4089: LD_INT 80
4091: PUSH
4092: LD_INT 83
4094: PUSH
4095: LD_INT 6
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: LIST
4102: LIST
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: PPUSH
4108: CALL_OW 69
4112: PUSH
4113: LD_OWVAR 67
4117: PUSH
4118: LD_INT 1
4120: EQUAL
4121: AND
4122: IFFALSE 4203
4124: GO 4126
4126: DISABLE
// begin PlaceSeeing ( 80 , 83 , 1 , - 7 ) ;
4127: LD_INT 80
4129: PPUSH
4130: LD_INT 83
4132: PPUSH
4133: LD_INT 1
4135: PPUSH
4136: LD_INT 7
4138: NEG
4139: PPUSH
4140: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
4144: LD_INT 35
4146: PPUSH
4147: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 10 ] ] ) ;
4151: LD_INT 22
4153: PUSH
4154: LD_INT 3
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: PUSH
4161: LD_INT 92
4163: PUSH
4164: LD_INT 80
4166: PUSH
4167: LD_INT 83
4169: PUSH
4170: LD_INT 10
4172: PUSH
4173: EMPTY
4174: LIST
4175: LIST
4176: LIST
4177: LIST
4178: PUSH
4179: EMPTY
4180: LIST
4181: LIST
4182: PPUSH
4183: CALL_OW 69
4187: NOT
4188: IFFALSE 4144
// RemoveSeeing ( 80 , 83 , 1 ) ;
4190: LD_INT 80
4192: PPUSH
4193: LD_INT 83
4195: PPUSH
4196: LD_INT 1
4198: PPUSH
4199: CALL_OW 331
// end ;
4203: END
// every 0 0$02 trigger GetDistUnits ( JMM , Bobby ) < 6 and IsOk ( Bobby ) do
4204: LD_EXP 16
4208: PPUSH
4209: LD_EXP 17
4213: PPUSH
4214: CALL_OW 296
4218: PUSH
4219: LD_INT 6
4221: LESS
4222: PUSH
4223: LD_EXP 17
4227: PPUSH
4228: CALL_OW 302
4232: AND
4233: IFFALSE 4692
4235: GO 4237
4237: DISABLE
// begin ComWalk ( Bobby ) ;
4238: LD_EXP 17
4242: PPUSH
4243: CALL_OW 138
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4247: LD_EXP 17
4251: PPUSH
4252: LD_EXP 16
4256: PPUSH
4257: CALL_OW 250
4261: PPUSH
4262: LD_EXP 16
4266: PPUSH
4267: CALL_OW 251
4271: PPUSH
4272: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
4276: LD_INT 35
4278: PPUSH
4279: CALL_OW 67
// until See ( 4 , JMM ) ;
4283: LD_INT 4
4285: PPUSH
4286: LD_EXP 16
4290: PPUSH
4291: CALL_OW 292
4295: IFFALSE 4276
// InGameOn ;
4297: CALL_OW 8
// ComTurnUnit ( JMM , Bobby ) ;
4301: LD_EXP 16
4305: PPUSH
4306: LD_EXP 17
4310: PPUSH
4311: CALL_OW 119
// if cyrus_in_squad and IsOk ( Cyrus ) and GetDistUnits ( JMM , Cyrus ) < 10 then
4315: LD_EXP 7
4319: PUSH
4320: LD_EXP 18
4324: PPUSH
4325: CALL_OW 302
4329: AND
4330: PUSH
4331: LD_EXP 16
4335: PPUSH
4336: LD_EXP 18
4340: PPUSH
4341: CALL_OW 296
4345: PUSH
4346: LD_INT 10
4348: LESS
4349: AND
4350: IFFALSE 4395
// begin ComMoveXY ( Cyrus , GetX ( JMM ) , GetY ( JMM ) ) ;
4352: LD_EXP 18
4356: PPUSH
4357: LD_EXP 16
4361: PPUSH
4362: CALL_OW 250
4366: PPUSH
4367: LD_EXP 16
4371: PPUSH
4372: CALL_OW 251
4376: PPUSH
4377: CALL_OW 111
// AddComTurnUnit ( Cyrus , Bobby ) ;
4381: LD_EXP 18
4385: PPUSH
4386: LD_EXP 17
4390: PPUSH
4391: CALL_OW 179
// end ; Say ( JMM , D2-JMM-1 ) ;
4395: LD_EXP 16
4399: PPUSH
4400: LD_STRING D2-JMM-1
4402: PPUSH
4403: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
4407: LD_INT 10
4409: PPUSH
4410: CALL_OW 67
// ComTurnUnit ( Bobby , JMM ) ;
4414: LD_EXP 17
4418: PPUSH
4419: LD_EXP 16
4423: PPUSH
4424: CALL_OW 119
// Say ( Bobby , D2-Bobby-1 ) ;
4428: LD_EXP 17
4432: PPUSH
4433: LD_STRING D2-Bobby-1
4435: PPUSH
4436: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
4440: LD_EXP 16
4444: PPUSH
4445: LD_STRING D2-JMM-2
4447: PPUSH
4448: CALL_OW 88
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4452: LD_EXP 17
4456: PPUSH
4457: LD_EXP 16
4461: PPUSH
4462: CALL_OW 250
4466: PPUSH
4467: LD_EXP 16
4471: PPUSH
4472: CALL_OW 251
4476: PPUSH
4477: CALL_OW 111
// Say ( Bobby , D2-Bobby-2 ) ;
4481: LD_EXP 17
4485: PPUSH
4486: LD_STRING D2-Bobby-2
4488: PPUSH
4489: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
4493: LD_EXP 16
4497: PPUSH
4498: LD_STRING D2-JMM-3
4500: PPUSH
4501: CALL_OW 88
// ComTurnUnit ( Bobby , JMM ) ;
4505: LD_EXP 17
4509: PPUSH
4510: LD_EXP 16
4514: PPUSH
4515: CALL_OW 119
// DialogueOn ;
4519: CALL_OW 6
// Say ( Bobby , D2-Bobby-3 ) ;
4523: LD_EXP 17
4527: PPUSH
4528: LD_STRING D2-Bobby-3
4530: PPUSH
4531: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
4535: LD_EXP 16
4539: PPUSH
4540: LD_STRING D2-JMM-4
4542: PPUSH
4543: CALL_OW 88
// Say ( Bobby , D2-Bobby-4 ) ;
4547: LD_EXP 17
4551: PPUSH
4552: LD_STRING D2-Bobby-4
4554: PPUSH
4555: CALL_OW 88
// Say ( JMM , D2-JMM-5 ) ;
4559: LD_EXP 16
4563: PPUSH
4564: LD_STRING D2-JMM-5
4566: PPUSH
4567: CALL_OW 88
// Say ( Bobby , D2-Bobby-5 ) ;
4571: LD_EXP 17
4575: PPUSH
4576: LD_STRING D2-Bobby-5
4578: PPUSH
4579: CALL_OW 88
// Say ( JMM , D2-JMM-6 ) ;
4583: LD_EXP 16
4587: PPUSH
4588: LD_STRING D2-JMM-6
4590: PPUSH
4591: CALL_OW 88
// if not powell_contact then
4595: LD_EXP 5
4599: NOT
4600: IFFALSE 4626
// begin Say ( Bobby , D2-Bobby-6 ) ;
4602: LD_EXP 17
4606: PPUSH
4607: LD_STRING D2-Bobby-6
4609: PPUSH
4610: CALL_OW 88
// Say ( JMM , D2-JMM-7 ) ;
4614: LD_EXP 16
4618: PPUSH
4619: LD_STRING D2-JMM-7
4621: PPUSH
4622: CALL_OW 88
// end ; DialogueOff ;
4626: CALL_OW 7
// InGameOff ;
4630: CALL_OW 9
// SetSide ( Bobby , 1 ) ;
4634: LD_EXP 17
4638: PPUSH
4639: LD_INT 1
4641: PPUSH
4642: CALL_OW 235
// ComFree ( [ JMM , Bobby ] ) ;
4646: LD_EXP 16
4650: PUSH
4651: LD_EXP 17
4655: PUSH
4656: EMPTY
4657: LIST
4658: LIST
4659: PPUSH
4660: CALL_OW 139
// bobby_in_squad := true ;
4664: LD_ADDR_EXP 4
4668: PUSH
4669: LD_INT 1
4671: ST_TO_ADDR
// if powell_contact and not cyrus_in_squad then
4672: LD_EXP 5
4676: PUSH
4677: LD_EXP 7
4681: NOT
4682: AND
4683: IFFALSE 4692
// ChangeMissionObjectives ( M2b ) ;
4685: LD_STRING M2b
4687: PPUSH
4688: CALL_OW 337
// end ;
4692: END
// every 0 0$10 trigger active_russian_dialog and Difficulty < 3 do
4693: LD_EXP 3
4697: PUSH
4698: LD_OWVAR 67
4702: PUSH
4703: LD_INT 3
4705: LESS
4706: AND
4707: IFFALSE 4741
4709: GO 4711
4711: DISABLE
// begin wait ( 1 1$00 ) ;
4712: LD_INT 2100
4714: PPUSH
4715: CALL_OW 67
// if not bobby_in_squad then
4719: LD_EXP 4
4723: NOT
4724: IFFALSE 4741
// ComMoveXY ( Bobby , 75 , 83 ) ;
4726: LD_EXP 17
4730: PPUSH
4731: LD_INT 75
4733: PPUSH
4734: LD_INT 83
4736: PPUSH
4737: CALL_OW 111
// end ;
4741: END
// every 0 0$10 trigger cyrus_in_squad and not bobby_in_squad do
4742: LD_EXP 7
4746: PUSH
4747: LD_EXP 4
4751: NOT
4752: AND
4753: IFFALSE 4782
4755: GO 4757
4757: DISABLE
// begin ComMoveXY ( Bobby , 105 , 97 ) ;
4758: LD_EXP 17
4762: PPUSH
4763: LD_INT 105
4765: PPUSH
4766: LD_INT 97
4768: PPUSH
4769: CALL_OW 111
// AddComCrawl ( Bobby ) ;
4773: LD_EXP 17
4777: PPUSH
4778: CALL_OW 197
// end ;
4782: END
// every 0 0$01 trigger IsInArea ( JMM , obstacle_area ) and GetDistUnits ( JMM , Bobby ) < 7 and bobby_in_squad do
4783: LD_EXP 16
4787: PPUSH
4788: LD_INT 6
4790: PPUSH
4791: CALL_OW 308
4795: PUSH
4796: LD_EXP 16
4800: PPUSH
4801: LD_EXP 17
4805: PPUSH
4806: CALL_OW 296
4810: PUSH
4811: LD_INT 7
4813: LESS
4814: AND
4815: PUSH
4816: LD_EXP 4
4820: AND
4821: IFFALSE 4868
4823: GO 4825
4825: DISABLE
// begin ComHold ( [ JMM , Bobby ] ) ;
4826: LD_EXP 16
4830: PUSH
4831: LD_EXP 17
4835: PUSH
4836: EMPTY
4837: LIST
4838: LIST
4839: PPUSH
4840: CALL_OW 140
// Say ( JMM , D2a-JMM-1 ) ;
4844: LD_EXP 16
4848: PPUSH
4849: LD_STRING D2a-JMM-1
4851: PPUSH
4852: CALL_OW 88
// Say ( Bobby , D2a-Bobby-1 ) ;
4856: LD_EXP 17
4860: PPUSH
4861: LD_STRING D2a-Bobby-1
4863: PPUSH
4864: CALL_OW 88
// end ;
4868: END
// every 0 0$50 trigger active_powell_dialog and not See ( 3 , JMM ) do
4869: LD_EXP 15
4873: PUSH
4874: LD_INT 3
4876: PPUSH
4877: LD_EXP 16
4881: PPUSH
4882: CALL_OW 292
4886: NOT
4887: AND
4888: IFFALSE 5059
4890: GO 4892
4892: DISABLE
// begin wait ( 0 0$5 ) ;
4893: LD_INT 175
4895: PPUSH
4896: CALL_OW 67
// InGameOn ;
4900: CALL_OW 8
// DialogueOn ;
4904: CALL_OW 6
// SayRadioNoFaceNoName ( Powell , D3-Pow-1 ) ;
4908: LD_EXP 19
4912: PPUSH
4913: LD_STRING D3-Pow-1
4915: PPUSH
4916: CALL 70229 0 2
// Say ( JMM , D3-JMM-1 ) ;
4920: LD_EXP 16
4924: PPUSH
4925: LD_STRING D3-JMM-1
4927: PPUSH
4928: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D3-Pow-2 ) ;
4932: LD_EXP 19
4936: PPUSH
4937: LD_STRING D3-Pow-2
4939: PPUSH
4940: CALL 70229 0 2
// Say ( JMM , D3-JMM-2 ) ;
4944: LD_EXP 16
4948: PPUSH
4949: LD_STRING D3-JMM-2
4951: PPUSH
4952: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D3-Pow-3 ) ;
4956: LD_EXP 19
4960: PPUSH
4961: LD_STRING D3-Pow-3
4963: PPUSH
4964: CALL 70229 0 2
// DialogueOff ;
4968: CALL_OW 7
// InGameOff ;
4972: CALL_OW 9
// powell_contact := true ;
4976: LD_ADDR_EXP 5
4980: PUSH
4981: LD_INT 1
4983: ST_TO_ADDR
// SetAreaMapShow ( exitArea , 1 ) ;
4984: LD_INT 10
4986: PPUSH
4987: LD_INT 1
4989: PPUSH
4990: CALL_OW 424
// uc_side := 4 ;
4994: LD_ADDR_OWVAR 20
4998: PUSH
4999: LD_INT 4
5001: ST_TO_ADDR
// uc_nation := 1 ;
5002: LD_ADDR_OWVAR 21
5006: PUSH
5007: LD_INT 1
5009: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
5010: LD_ADDR_EXP 19
5014: PUSH
5015: LD_STRING Powell
5017: PPUSH
5018: LD_INT 0
5020: PPUSH
5021: LD_STRING 
5023: PPUSH
5024: CALL 28359 0 3
5028: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
5029: LD_STRING M2
5031: PPUSH
5032: CALL_OW 337
// if not bobby_in_squad then
5036: LD_EXP 4
5040: NOT
5041: IFFALSE 5052
// ChangeMissionObjectives ( M2a ) else
5043: LD_STRING M2a
5045: PPUSH
5046: CALL_OW 337
5050: GO 5059
// ChangeMissionObjectives ( M2b ) ;
5052: LD_STRING M2b
5054: PPUSH
5055: CALL_OW 337
// end ;
5059: END
// every 0 0$01 trigger IsInArea ( JMM , fakeArea ) do
5060: LD_EXP 16
5064: PPUSH
5065: LD_INT 7
5067: PPUSH
5068: CALL_OW 308
5072: IFFALSE 5207
5074: GO 5076
5076: DISABLE
// begin DialogueOn ;
5077: CALL_OW 6
// SayRadioNoFaceNoName ( fakePokryshkin , D4-Rus3-1 ) ;
5081: LD_EXP 20
5085: PPUSH
5086: LD_STRING D4-Rus3-1
5088: PPUSH
5089: CALL 70229 0 2
// DialogueOff ;
5093: CALL_OW 7
// ChangeMissionObjectives ( M3a ) ;
5097: LD_STRING M3a
5099: PPUSH
5100: CALL_OW 337
// SetAreaMapShow ( fakeEnd , 1 ) ;
5104: LD_INT 11
5106: PPUSH
5107: LD_INT 1
5109: PPUSH
5110: CALL_OW 424
// Wait ( 0 0$02 ) ;
5114: LD_INT 70
5116: PPUSH
5117: CALL_OW 67
// DialogueOn ;
5121: CALL_OW 6
// SayRadioNoFace ( Powell , D4-Pow-1 ) ;
5125: LD_EXP 19
5129: PPUSH
5130: LD_STRING D4-Pow-1
5132: PPUSH
5133: CALL_OW 586
// DialogueOff ;
5137: CALL_OW 7
// ChangeMissionObjectives ( M3b ) ;
5141: LD_STRING M3b
5143: PPUSH
5144: CALL_OW 337
// case Query ( Q1 ) of 1 :
5148: LD_STRING Q1
5150: PPUSH
5151: CALL_OW 97
5155: PUSH
5156: LD_INT 1
5158: DOUBLE
5159: EQUAL
5160: IFTRUE 5164
5162: GO 5195
5164: POP
// begin macmilan_use_radio := true ;
5165: LD_ADDR_EXP 6
5169: PUSH
5170: LD_INT 1
5172: ST_TO_ADDR
// DialogueOn ;
5173: CALL_OW 6
// Say ( JMM , D4a-JMM-1 ) ;
5177: LD_EXP 16
5181: PPUSH
5182: LD_STRING D4a-JMM-1
5184: PPUSH
5185: CALL_OW 88
// DialogueOff ;
5189: CALL_OW 7
// end ; 2 :
5193: GO 5207
5195: LD_INT 2
5197: DOUBLE
5198: EQUAL
5199: IFTRUE 5203
5201: GO 5206
5203: POP
// ; end ;
5204: GO 5207
5206: POP
// end ;
5207: END
// every 0 0$02 trigger GetDistUnits ( JMM , Cyrus ) < 8 and IsOk ( Cyrus ) do
5208: LD_EXP 16
5212: PPUSH
5213: LD_EXP 18
5217: PPUSH
5218: CALL_OW 296
5222: PUSH
5223: LD_INT 8
5225: LESS
5226: PUSH
5227: LD_EXP 18
5231: PPUSH
5232: CALL_OW 302
5236: AND
5237: IFFALSE 5528
5239: GO 5241
5241: DISABLE
// begin InGameOn ;
5242: CALL_OW 8
// ComMoveXY ( JMM , GetX ( Cyrus ) , GetY ( Cyrus ) ) ;
5246: LD_EXP 16
5250: PPUSH
5251: LD_EXP 18
5255: PPUSH
5256: CALL_OW 250
5260: PPUSH
5261: LD_EXP 18
5265: PPUSH
5266: CALL_OW 251
5270: PPUSH
5271: CALL_OW 111
// if IsOk ( Bobby ) and bobby_in_squad then
5275: LD_EXP 17
5279: PPUSH
5280: CALL_OW 302
5284: PUSH
5285: LD_EXP 4
5289: AND
5290: IFFALSE 5321
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
5292: LD_EXP 17
5296: PPUSH
5297: LD_EXP 16
5301: PPUSH
5302: CALL_OW 250
5306: PPUSH
5307: LD_EXP 16
5311: PPUSH
5312: CALL_OW 251
5316: PPUSH
5317: CALL_OW 111
// Say ( JMM , D5-JMM-1 ) ;
5321: LD_EXP 16
5325: PPUSH
5326: LD_STRING D5-JMM-1
5328: PPUSH
5329: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
5333: LD_INT 10
5335: PPUSH
5336: CALL_OW 67
// ComTurnUnit ( JMM , Cyrus ) ;
5340: LD_EXP 16
5344: PPUSH
5345: LD_EXP 18
5349: PPUSH
5350: CALL_OW 119
// ComWalk ( Cyrus ) ;
5354: LD_EXP 18
5358: PPUSH
5359: CALL_OW 138
// ComTurnUnit ( Cyrus , JMM ) ;
5363: LD_EXP 18
5367: PPUSH
5368: LD_EXP 16
5372: PPUSH
5373: CALL_OW 119
// Say ( Cyrus , D5-Cyrus-1 ) ;
5377: LD_EXP 18
5381: PPUSH
5382: LD_STRING D5-Cyrus-1
5384: PPUSH
5385: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5389: LD_EXP 17
5393: PPUSH
5394: CALL_OW 302
5398: PUSH
5399: LD_EXP 4
5403: AND
5404: IFFALSE 5444
// begin ComTurnUnit ( Bobby , Cyrus ) ;
5406: LD_EXP 17
5410: PPUSH
5411: LD_EXP 18
5415: PPUSH
5416: CALL_OW 119
// Say ( Bobby , D5-Bobby-1 ) ;
5420: LD_EXP 17
5424: PPUSH
5425: LD_STRING D5-Bobby-1
5427: PPUSH
5428: CALL_OW 88
// Say ( JMM , D5-JMM-2 ) ;
5432: LD_EXP 16
5436: PPUSH
5437: LD_STRING D5-JMM-2
5439: PPUSH
5440: CALL_OW 88
// end ; InGameOff ;
5444: CALL_OW 9
// cyrus_in_squad := true ;
5448: LD_ADDR_EXP 7
5452: PUSH
5453: LD_INT 1
5455: ST_TO_ADDR
// SetSide ( Cyrus , 1 ) ;
5456: LD_EXP 18
5460: PPUSH
5461: LD_INT 1
5463: PPUSH
5464: CALL_OW 235
// if powell_contact and not bobby_in_squad then
5468: LD_EXP 5
5472: PUSH
5473: LD_EXP 4
5477: NOT
5478: AND
5479: IFFALSE 5488
// ChangeMissionObjectives ( M2b ) ;
5481: LD_STRING M2b
5483: PPUSH
5484: CALL_OW 337
// if not bobby_in_squad and GetSide ( Bobby ) = 4 and IsOk ( Bobby ) then
5488: LD_EXP 4
5492: NOT
5493: PUSH
5494: LD_EXP 17
5498: PPUSH
5499: CALL_OW 255
5503: PUSH
5504: LD_INT 4
5506: EQUAL
5507: AND
5508: PUSH
5509: LD_EXP 17
5513: PPUSH
5514: CALL_OW 302
5518: AND
5519: IFFALSE 5528
// SetAchievement ( ACH_CYRUS ) ;
5521: LD_STRING ACH_CYRUS
5523: PPUSH
5524: CALL_OW 543
// end ;
5528: END
// every 0 0$01 trigger bobby_in_squad and cyrus_in_squad do
5529: LD_EXP 4
5533: PUSH
5534: LD_EXP 7
5538: AND
5539: IFFALSE 5551
5541: GO 5543
5543: DISABLE
// ChangeMissionObjectives ( M2c ) ;
5544: LD_STRING M2c
5546: PPUSH
5547: CALL_OW 337
5551: END
// every 0 0$01 trigger IsInArea ( JMM , trap ) do
5552: LD_EXP 16
5556: PPUSH
5557: LD_INT 8
5559: PPUSH
5560: CALL_OW 308
5564: IFFALSE 5616
5566: GO 5568
5568: DISABLE
// begin macmilan_in_trap := true ;
5569: LD_ADDR_EXP 9
5573: PUSH
5574: LD_INT 1
5576: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
5577: LD_INT 35
5579: PPUSH
5580: CALL_OW 67
// DialogueOn ;
5584: CALL_OW 6
// Say ( Pokryshkin , D5-Pok-1 ) ;
5588: LD_EXP 27
5592: PPUSH
5593: LD_STRING D5-Pok-1
5595: PPUSH
5596: CALL_OW 88
// DialogueOff ;
5600: CALL_OW 7
// Say ( JMM , D4b-JMM-1 ) ;
5604: LD_EXP 16
5608: PPUSH
5609: LD_STRING D4b-JMM-1
5611: PPUSH
5612: CALL_OW 88
// end ;
5616: END
// every 0 0$01 trigger ( IsInArea ( JMM , endRoadArea ) and GetDistUnits ( JMM , russian_meta_guards [ russian_meta_guards ] ) < 12 ) or UnitFilter ( russian_meta_guards , [ f_not , [ f_lives , 990 ] ] ) do var i , hp ;
5617: LD_EXP 16
5621: PPUSH
5622: LD_INT 13
5624: PPUSH
5625: CALL_OW 308
5629: PUSH
5630: LD_EXP 16
5634: PPUSH
5635: LD_EXP 24
5639: PUSH
5640: LD_EXP 24
5644: ARRAY
5645: PPUSH
5646: CALL_OW 296
5650: PUSH
5651: LD_INT 12
5653: LESS
5654: AND
5655: PUSH
5656: LD_EXP 24
5660: PPUSH
5661: LD_INT 3
5663: PUSH
5664: LD_INT 24
5666: PUSH
5667: LD_INT 990
5669: PUSH
5670: EMPTY
5671: LIST
5672: LIST
5673: PUSH
5674: EMPTY
5675: LIST
5676: LIST
5677: PPUSH
5678: CALL_OW 72
5682: OR
5683: IFFALSE 5951
5685: GO 5687
5687: DISABLE
5688: LD_INT 0
5690: PPUSH
5691: PPUSH
// begin hp := [ 300 , 250 , 200 , 150 ] [ Difficulty ] ;
5692: LD_ADDR_VAR 0 2
5696: PUSH
5697: LD_INT 300
5699: PUSH
5700: LD_INT 250
5702: PUSH
5703: LD_INT 200
5705: PUSH
5706: LD_INT 150
5708: PUSH
5709: EMPTY
5710: LIST
5711: LIST
5712: LIST
5713: LIST
5714: PUSH
5715: LD_OWVAR 67
5719: ARRAY
5720: ST_TO_ADDR
// for i in russian_meta_guards do
5721: LD_ADDR_VAR 0 1
5725: PUSH
5726: LD_EXP 24
5730: PUSH
5731: FOR_IN
5732: IFFALSE 5772
// if IsOk ( i ) then
5734: LD_VAR 0 1
5738: PPUSH
5739: CALL_OW 302
5743: IFFALSE 5770
// SetLives ( i , GetLives ( i ) - hp ) ;
5745: LD_VAR 0 1
5749: PPUSH
5750: LD_VAR 0 1
5754: PPUSH
5755: CALL_OW 256
5759: PUSH
5760: LD_VAR 0 2
5764: MINUS
5765: PPUSH
5766: CALL_OW 234
5770: GO 5731
5772: POP
5773: POP
// DialogueOn ;
5774: CALL_OW 6
// Say ( russian_meta_guards [ russian_meta_guards ] , D6-FRus1-1 ) ;
5778: LD_EXP 24
5782: PUSH
5783: LD_EXP 24
5787: ARRAY
5788: PPUSH
5789: LD_STRING D6-FRus1-1
5791: PPUSH
5792: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] ] ) > 1 then
5796: LD_INT 22
5798: PUSH
5799: LD_INT 1
5801: PUSH
5802: EMPTY
5803: LIST
5804: LIST
5805: PUSH
5806: LD_INT 50
5808: PUSH
5809: EMPTY
5810: LIST
5811: PUSH
5812: EMPTY
5813: LIST
5814: LIST
5815: PPUSH
5816: CALL_OW 69
5820: PUSH
5821: LD_INT 1
5823: GREATER
5824: IFFALSE 5838
// Say ( JMM , D6-JMM-1 ) ;
5826: LD_EXP 16
5830: PPUSH
5831: LD_STRING D6-JMM-1
5833: PPUSH
5834: CALL_OW 88
// if IsOk ( Cyrus ) and cyrus_in_squad then
5838: LD_EXP 18
5842: PPUSH
5843: CALL_OW 302
5847: PUSH
5848: LD_EXP 7
5852: AND
5853: IFFALSE 5867
// Say ( Cyrus , D6-Cyrus-1 ) ;
5855: LD_EXP 18
5859: PPUSH
5860: LD_STRING D6-Cyrus-1
5862: PPUSH
5863: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5867: LD_EXP 17
5871: PPUSH
5872: CALL_OW 302
5876: PUSH
5877: LD_EXP 4
5881: AND
5882: IFFALSE 5896
// Say ( Bobby , D6-Bobby-1 ) ;
5884: LD_EXP 17
5888: PPUSH
5889: LD_STRING D6-Bobby-1
5891: PPUSH
5892: CALL_OW 88
// DialogueOff ;
5896: CALL_OW 7
// Wait ( [ 0 0$04 , 0 0$03 , 0 0$02 , 0 0$02 ] [ Difficulty ] ) ;
5900: LD_INT 140
5902: PUSH
5903: LD_INT 105
5905: PUSH
5906: LD_INT 70
5908: PUSH
5909: LD_INT 70
5911: PUSH
5912: EMPTY
5913: LIST
5914: LIST
5915: LIST
5916: LIST
5917: PUSH
5918: LD_OWVAR 67
5922: ARRAY
5923: PPUSH
5924: CALL_OW 67
// meta_action := true ;
5928: LD_ADDR_EXP 10
5932: PUSH
5933: LD_INT 1
5935: ST_TO_ADDR
// ComAgressiveMove ( russian_meta_guards , 94 , 8 ) ;
5936: LD_EXP 24
5940: PPUSH
5941: LD_INT 94
5943: PPUSH
5944: LD_INT 8
5946: PPUSH
5947: CALL_OW 114
// end ;
5951: PPOPN 2
5953: END
// every 0 0$1 trigger IsInArea ( JMM , secretPassage ) do
5954: LD_EXP 16
5958: PPUSH
5959: LD_INT 14
5961: PPUSH
5962: CALL_OW 308
5966: IFFALSE 5978
5968: GO 5970
5970: DISABLE
// SetAchievement ( ACH_SECRET ) ;
5971: LD_STRING ACH_SECRET
5973: PPUSH
5974: CALL_OW 543
5978: END
// every 0 0$01 trigger GetDistUnitXY ( JMM , 93 , 1 ) < 5 and FilterAllUnits ( [ f_side , 1 ] ) > 1 do
5979: LD_EXP 16
5983: PPUSH
5984: LD_INT 93
5986: PPUSH
5987: LD_INT 1
5989: PPUSH
5990: CALL_OW 297
5994: PUSH
5995: LD_INT 5
5997: LESS
5998: PUSH
5999: LD_INT 22
6001: PUSH
6002: LD_INT 1
6004: PUSH
6005: EMPTY
6006: LIST
6007: LIST
6008: PPUSH
6009: CALL_OW 69
6013: PUSH
6014: LD_INT 1
6016: GREATER
6017: AND
6018: IFFALSE 6035
6020: GO 6022
6022: DISABLE
// Say ( JMM , D6a-JMM-1 ) ;
6023: LD_EXP 16
6027: PPUSH
6028: LD_STRING D6a-JMM-1
6030: PPUSH
6031: CALL_OW 88
6035: END
// every 0 0$01 trigger IsInArea ( Bobby , exitArea ) or IsInArea ( Bobby , hiddenEnd ) do
6036: LD_EXP 17
6040: PPUSH
6041: LD_INT 10
6043: PPUSH
6044: CALL_OW 308
6048: PUSH
6049: LD_EXP 17
6053: PPUSH
6054: LD_INT 12
6056: PPUSH
6057: CALL_OW 308
6061: OR
6062: IFFALSE 6118
6064: GO 6066
6066: DISABLE
// begin bobby_saved := true ;
6067: LD_ADDR_EXP 12
6071: PUSH
6072: LD_INT 1
6074: ST_TO_ADDR
// SaveVariable ( GetLives ( Bobby ) , 01_BobbyLifePoints_1 ) ;
6075: LD_EXP 17
6079: PPUSH
6080: CALL_OW 256
6084: PPUSH
6085: LD_STRING 01_BobbyLifePoints_1
6087: PPUSH
6088: CALL_OW 39
// RemoveUnit ( Bobby ) ;
6092: LD_EXP 17
6096: PPUSH
6097: CALL_OW 64
// AddMedal ( Bobby , 1 ) ;
6101: LD_STRING Bobby
6103: PPUSH
6104: LD_INT 1
6106: PPUSH
6107: CALL_OW 101
// ToLua ( enableBioCharacter(BIO_BOBBY) ) ;
6111: LD_STRING enableBioCharacter(BIO_BOBBY)
6113: PPUSH
6114: CALL_OW 559
// end ;
6118: END
// every 0 0$01 trigger IsInArea ( Cyrus , exitArea ) or IsInArea ( Cyrus , hiddenEnd ) do
6119: LD_EXP 18
6123: PPUSH
6124: LD_INT 10
6126: PPUSH
6127: CALL_OW 308
6131: PUSH
6132: LD_EXP 18
6136: PPUSH
6137: LD_INT 12
6139: PPUSH
6140: CALL_OW 308
6144: OR
6145: IFFALSE 6201
6147: GO 6149
6149: DISABLE
// begin cyrus_saved := true ;
6150: LD_ADDR_EXP 13
6154: PUSH
6155: LD_INT 1
6157: ST_TO_ADDR
// SaveVariable ( GetLives ( Cyrus ) , 01_CyrusLifePoints_1 ) ;
6158: LD_EXP 18
6162: PPUSH
6163: CALL_OW 256
6167: PPUSH
6168: LD_STRING 01_CyrusLifePoints_1
6170: PPUSH
6171: CALL_OW 39
// RemoveUnit ( Cyrus ) ;
6175: LD_EXP 18
6179: PPUSH
6180: CALL_OW 64
// AddMedal ( Cyrus , 1 ) ;
6184: LD_STRING Cyrus
6186: PPUSH
6187: LD_INT 1
6189: PPUSH
6190: CALL_OW 101
// ToLua ( enableBioCharacter(BIO_CYRUS) ) ;
6194: LD_STRING enableBioCharacter(BIO_CYRUS)
6196: PPUSH
6197: CALL_OW 559
// end ;
6201: END
// every 0 0$01 trigger IsInArea ( JMM , exitArea ) or IsInArea ( JMM , hiddenEnd ) do var i , to_reward , wait_for_them , m1 , m2 , m3 ;
6202: LD_EXP 16
6206: PPUSH
6207: LD_INT 10
6209: PPUSH
6210: CALL_OW 308
6214: PUSH
6215: LD_EXP 16
6219: PPUSH
6220: LD_INT 12
6222: PPUSH
6223: CALL_OW 308
6227: OR
6228: IFFALSE 6857
6230: GO 6232
6232: DISABLE
6233: LD_INT 0
6235: PPUSH
6236: PPUSH
6237: PPUSH
6238: PPUSH
6239: PPUSH
6240: PPUSH
// begin if macmilan_use_radio then
6241: LD_EXP 6
6245: IFFALSE 6254
// SetAchievement ( ACH_RADIO ) ;
6247: LD_STRING ACH_RADIO
6249: PPUSH
6250: CALL_OW 543
// if ( not cyrus_saved and cyrus_in_squad and IsOk ( Cyrus ) ) or ( not bobby_saved and bobby_in_squad and IsOk ( Bobby ) ) then
6254: LD_EXP 13
6258: NOT
6259: PUSH
6260: LD_EXP 7
6264: AND
6265: PUSH
6266: LD_EXP 18
6270: PPUSH
6271: CALL_OW 302
6275: AND
6276: PUSH
6277: LD_EXP 12
6281: NOT
6282: PUSH
6283: LD_EXP 4
6287: AND
6288: PUSH
6289: LD_EXP 17
6293: PPUSH
6294: CALL_OW 302
6298: AND
6299: OR
6300: IFFALSE 6341
// case Query ( Q2 ) of 1 :
6302: LD_STRING Q2
6304: PPUSH
6305: CALL_OW 97
6309: PUSH
6310: LD_INT 1
6312: DOUBLE
6313: EQUAL
6314: IFTRUE 6318
6316: GO 6329
6318: POP
// wait_for_them := true ; 2 :
6319: LD_ADDR_VAR 0 3
6323: PUSH
6324: LD_INT 1
6326: ST_TO_ADDR
6327: GO 6341
6329: LD_INT 2
6331: DOUBLE
6332: EQUAL
6333: IFTRUE 6337
6335: GO 6340
6337: POP
// ; end ;
6338: GO 6341
6340: POP
// if wait_for_them then
6341: LD_VAR 0 3
6345: IFFALSE 6458
// repeat wait ( 0 0$01 ) ;
6347: LD_INT 35
6349: PPUSH
6350: CALL_OW 67
// until ( cyrus_saved and bobby_saved ) or ( cyrus_saved and ( not bobby_in_squad or IsDying ( Bobby ) or IsDead ( Bobby ) ) ) or ( bobby_saved and ( not cyrus_in_squad or IsDying ( Cyrus ) or IsDead ( Cyrus ) ) ) or ( IsDead ( Bobby ) and IsDead ( Cyrus ) ) ;
6354: LD_EXP 13
6358: PUSH
6359: LD_EXP 12
6363: AND
6364: PUSH
6365: LD_EXP 13
6369: PUSH
6370: LD_EXP 4
6374: NOT
6375: PUSH
6376: LD_EXP 17
6380: PPUSH
6381: CALL_OW 303
6385: OR
6386: PUSH
6387: LD_EXP 17
6391: PPUSH
6392: CALL_OW 301
6396: OR
6397: AND
6398: OR
6399: PUSH
6400: LD_EXP 12
6404: PUSH
6405: LD_EXP 7
6409: NOT
6410: PUSH
6411: LD_EXP 18
6415: PPUSH
6416: CALL_OW 303
6420: OR
6421: PUSH
6422: LD_EXP 18
6426: PPUSH
6427: CALL_OW 301
6431: OR
6432: AND
6433: OR
6434: PUSH
6435: LD_EXP 17
6439: PPUSH
6440: CALL_OW 301
6444: PUSH
6445: LD_EXP 18
6449: PPUSH
6450: CALL_OW 301
6454: AND
6455: OR
6456: IFFALSE 6347
// SaveVariable ( GetLives ( JMM ) , 01_JMMLifePoints_1 ) ;
6458: LD_EXP 16
6462: PPUSH
6463: CALL_OW 256
6467: PPUSH
6468: LD_STRING 01_JMMLifePoints_1
6470: PPUSH
6471: CALL_OW 39
// RemoveUnit ( JMM ) ;
6475: LD_EXP 16
6479: PPUSH
6480: CALL_OW 64
// to_reward := [ JMM ] ;
6484: LD_ADDR_VAR 0 2
6488: PUSH
6489: LD_EXP 16
6493: PUSH
6494: EMPTY
6495: LIST
6496: ST_TO_ADDR
// if bobby_saved then
6497: LD_EXP 12
6501: IFFALSE 6519
// to_reward := to_reward ^ Bobby ;
6503: LD_ADDR_VAR 0 2
6507: PUSH
6508: LD_VAR 0 2
6512: PUSH
6513: LD_EXP 17
6517: ADD
6518: ST_TO_ADDR
// if cyrus_saved then
6519: LD_EXP 13
6523: IFFALSE 6541
// to_reward := to_reward ^ Cyrus ;
6525: LD_ADDR_VAR 0 2
6529: PUSH
6530: LD_VAR 0 2
6534: PUSH
6535: LD_EXP 18
6539: ADD
6540: ST_TO_ADDR
// m1 := true ;
6541: LD_ADDR_VAR 0 4
6545: PUSH
6546: LD_INT 1
6548: ST_TO_ADDR
// m2 := bobby_saved ;
6549: LD_ADDR_VAR 0 5
6553: PUSH
6554: LD_EXP 12
6558: ST_TO_ADDR
// m3 := cyrus_saved ;
6559: LD_ADDR_VAR 0 6
6563: PUSH
6564: LD_EXP 13
6568: ST_TO_ADDR
// AddMedal ( JMM , 1 ) ;
6569: LD_STRING JMM
6571: PPUSH
6572: LD_INT 1
6574: PPUSH
6575: CALL_OW 101
// if not bobby_in_squad then
6579: LD_EXP 4
6583: NOT
6584: IFFALSE 6597
// AddMedal ( Bobby , - 1 ) ;
6586: LD_STRING Bobby
6588: PPUSH
6589: LD_INT 1
6591: NEG
6592: PPUSH
6593: CALL_OW 101
// if not bobby_saved and ( IsDying ( Bobby ) or IsDead ( Bobby ) ) then
6597: LD_EXP 12
6601: NOT
6602: PUSH
6603: LD_EXP 17
6607: PPUSH
6608: CALL_OW 303
6612: PUSH
6613: LD_EXP 17
6617: PPUSH
6618: CALL_OW 301
6622: OR
6623: AND
6624: IFFALSE 6637
// AddMedal ( Bobby , - 2 ) ;
6626: LD_STRING Bobby
6628: PPUSH
6629: LD_INT 2
6631: NEG
6632: PPUSH
6633: CALL_OW 101
// if not cyrus_in_squad then
6637: LD_EXP 7
6641: NOT
6642: IFFALSE 6655
// AddMedal ( Cyrus , - 1 ) ;
6644: LD_STRING Cyrus
6646: PPUSH
6647: LD_INT 1
6649: NEG
6650: PPUSH
6651: CALL_OW 101
// if not cyrus_saved and ( IsDying ( Cyrus ) or IsDead ( Cyrus ) ) then
6655: LD_EXP 13
6659: NOT
6660: PUSH
6661: LD_EXP 18
6665: PPUSH
6666: CALL_OW 303
6670: PUSH
6671: LD_EXP 18
6675: PPUSH
6676: CALL_OW 301
6680: OR
6681: AND
6682: IFFALSE 6695
// AddMedal ( Cyrus , - 2 ) ;
6684: LD_STRING Cyrus
6686: PPUSH
6687: LD_INT 2
6689: NEG
6690: PPUSH
6691: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 and m3 then
6695: LD_OWVAR 67
6699: PUSH
6700: LD_INT 3
6702: GREATEREQUAL
6703: PUSH
6704: LD_VAR 0 4
6708: AND
6709: PUSH
6710: LD_VAR 0 5
6714: AND
6715: PUSH
6716: LD_VAR 0 6
6720: AND
6721: IFFALSE 6733
// SetAchievementEX ( ACH_AMER , 1 ) ;
6723: LD_STRING ACH_AMER
6725: PPUSH
6726: LD_INT 1
6728: PPUSH
6729: CALL_OW 564
// GiveMedals ( MAIN ) ;
6733: LD_STRING MAIN
6735: PPUSH
6736: CALL_OW 102
// RewardPeople ( to_reward ) ;
6740: LD_VAR 0 2
6744: PPUSH
6745: CALL_OW 43
// if bobby_saved then
6749: LD_EXP 12
6753: IFFALSE 6773
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
6755: LD_EXP 17
6759: PPUSH
6760: LD_EXP 2
6764: PUSH
6765: LD_STRING Bobby
6767: STR
6768: PPUSH
6769: CALL_OW 38
// if cyrus_saved then
6773: LD_EXP 13
6777: IFFALSE 6797
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
6779: LD_EXP 18
6783: PPUSH
6784: LD_EXP 2
6788: PUSH
6789: LD_STRING Cyrus
6791: STR
6792: PPUSH
6793: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
6797: LD_EXP 16
6801: PPUSH
6802: LD_EXP 2
6806: PUSH
6807: LD_STRING JMM
6809: STR
6810: PPUSH
6811: CALL_OW 38
// if tick <= 3 3$00 then
6815: LD_OWVAR 1
6819: PUSH
6820: LD_INT 6300
6822: LESSEQUAL
6823: IFFALSE 6832
// SetAchievement ( ACH_ASPEED_1 ) ;
6825: LD_STRING ACH_ASPEED_1
6827: PPUSH
6828: CALL_OW 543
// ToLua ( enableBioCharacter(BIO_JMM) ) ;
6832: LD_STRING enableBioCharacter(BIO_JMM)
6834: PPUSH
6835: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_JOAN) ) ;
6839: LD_STRING enableBioCharacter(BIO_JOAN)
6841: PPUSH
6842: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_BARN) ) ;
6846: LD_STRING enableBioCharacter(BIO_BARN)
6848: PPUSH
6849: CALL_OW 559
// YouWin ;
6853: CALL_OW 103
// end ; end_of_file
6857: PPOPN 6
6859: END
// on UnitGoesToRed ( un ) do begin if un = JMM then
6860: LD_VAR 0 1
6864: PUSH
6865: LD_EXP 16
6869: EQUAL
6870: IFFALSE 6879
// YouLost ( JMM ) ;
6872: LD_STRING JMM
6874: PPUSH
6875: CALL_OW 104
// end ;
6879: PPOPN 1
6881: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
6882: LD_VAR 0 1
6886: PPUSH
6887: LD_VAR 0 2
6891: PPUSH
6892: CALL 23053 0 2
// end ;
6896: PPOPN 2
6898: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do var i ;
6899: LD_INT 0
6901: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) and killerSide = 1 then
6902: LD_VAR 0 1
6906: PUSH
6907: LD_INT 22
6909: PUSH
6910: LD_INT 1
6912: PUSH
6913: EMPTY
6914: LIST
6915: LIST
6916: PUSH
6917: LD_INT 23
6919: PUSH
6920: LD_INT 1
6922: PUSH
6923: EMPTY
6924: LIST
6925: LIST
6926: PUSH
6927: LD_INT 21
6929: PUSH
6930: LD_INT 1
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: PUSH
6937: EMPTY
6938: LIST
6939: LIST
6940: LIST
6941: PPUSH
6942: CALL_OW 69
6946: IN
6947: PUSH
6948: LD_VAR 0 2
6952: PUSH
6953: LD_INT 1
6955: EQUAL
6956: AND
6957: IFFALSE 7014
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_soldier ] ] ) do
6959: LD_ADDR_VAR 0 4
6963: PUSH
6964: LD_INT 22
6966: PUSH
6967: LD_INT 3
6969: PUSH
6970: EMPTY
6971: LIST
6972: LIST
6973: PUSH
6974: LD_INT 25
6976: PUSH
6977: LD_INT 1
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: PUSH
6984: EMPTY
6985: LIST
6986: LIST
6987: PPUSH
6988: CALL_OW 69
6992: PUSH
6993: FOR_IN
6994: IFFALSE 7012
// ComAttackUnit ( i , JMM ) ;
6996: LD_VAR 0 4
7000: PPUSH
7001: LD_EXP 16
7005: PPUSH
7006: CALL_OW 115
7010: GO 6993
7012: POP
7013: POP
// end ;
7014: PPOPN 4
7016: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
7017: LD_VAR 0 1
7021: PPUSH
7022: CALL 22995 0 1
// if un = JMM then
7026: LD_VAR 0 1
7030: PUSH
7031: LD_EXP 16
7035: EQUAL
7036: IFFALSE 7045
// YouLost ( JMM ) ;
7038: LD_STRING JMM
7040: PPUSH
7041: CALL_OW 104
// end ; end_of_file end_of_file
7045: PPOPN 1
7047: END
// export globalGameSaveCounter ; every 0 0$1 do
7048: GO 7050
7050: DISABLE
// begin enable ;
7051: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
7052: LD_STRING updateTimer(
7054: PUSH
7055: LD_OWVAR 1
7059: STR
7060: PUSH
7061: LD_STRING );
7063: STR
7064: PPUSH
7065: CALL_OW 559
// end ;
7069: END
// every 0 0$1 do
7070: GO 7072
7072: DISABLE
// begin globalGameSaveCounter := 0 ;
7073: LD_ADDR_EXP 28
7077: PUSH
7078: LD_INT 0
7080: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
7081: LD_STRING setGameSaveCounter(0)
7083: PPUSH
7084: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
7088: LD_STRING initStreamRollete();
7090: PPUSH
7091: CALL_OW 559
// InitStreamMode ;
7095: CALL 8438 0 0
// DefineStreamItems ( false ) ;
7099: LD_INT 0
7101: PPUSH
7102: CALL 8902 0 1
// end ;
7106: END
// export function SOS_MapStart ( ) ; begin
7107: LD_INT 0
7109: PPUSH
// if streamModeActive then
7110: LD_EXP 29
7114: IFFALSE 7123
// DefineStreamItems ( true ) ;
7116: LD_INT 1
7118: PPUSH
7119: CALL 8902 0 1
// UpdateLuaVariables ( ) ;
7123: CALL 7140 0 0
// UpdateFactoryWaypoints ( ) ;
7127: CALL 21904 0 0
// UpdateWarehouseGatheringPoints ( ) ;
7131: CALL 22156 0 0
// end ;
7135: LD_VAR 0 1
7139: RET
// function UpdateLuaVariables ( ) ; begin
7140: LD_INT 0
7142: PPUSH
// if globalGameSaveCounter then
7143: LD_EXP 28
7147: IFFALSE 7181
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
7149: LD_ADDR_EXP 28
7153: PUSH
7154: LD_EXP 28
7158: PPUSH
7159: CALL 67515 0 1
7163: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
7164: LD_STRING setGameSaveCounter(
7166: PUSH
7167: LD_EXP 28
7171: STR
7172: PUSH
7173: LD_STRING )
7175: STR
7176: PPUSH
7177: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
7181: LD_STRING setGameDifficulty(
7183: PUSH
7184: LD_OWVAR 67
7188: STR
7189: PUSH
7190: LD_STRING )
7192: STR
7193: PPUSH
7194: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
7198: LD_STRING displayDifficulty(
7200: PUSH
7201: LD_OWVAR 67
7205: STR
7206: PUSH
7207: LD_STRING )
7209: STR
7210: PPUSH
7211: CALL_OW 559
// end ;
7215: LD_VAR 0 1
7219: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7220: LD_INT 0
7222: PPUSH
// if p2 = stream_mode then
7223: LD_VAR 0 2
7227: PUSH
7228: LD_INT 100
7230: EQUAL
7231: IFFALSE 8234
// begin if not StreamModeActive then
7233: LD_EXP 29
7237: NOT
7238: IFFALSE 7248
// StreamModeActive := true ;
7240: LD_ADDR_EXP 29
7244: PUSH
7245: LD_INT 1
7247: ST_TO_ADDR
// if p3 = 0 then
7248: LD_VAR 0 3
7252: PUSH
7253: LD_INT 0
7255: EQUAL
7256: IFFALSE 7262
// InitStreamMode ;
7258: CALL 8438 0 0
// if p3 = 1 then
7262: LD_VAR 0 3
7266: PUSH
7267: LD_INT 1
7269: EQUAL
7270: IFFALSE 7280
// sRocket := true ;
7272: LD_ADDR_EXP 34
7276: PUSH
7277: LD_INT 1
7279: ST_TO_ADDR
// if p3 = 2 then
7280: LD_VAR 0 3
7284: PUSH
7285: LD_INT 2
7287: EQUAL
7288: IFFALSE 7298
// sSpeed := true ;
7290: LD_ADDR_EXP 33
7294: PUSH
7295: LD_INT 1
7297: ST_TO_ADDR
// if p3 = 3 then
7298: LD_VAR 0 3
7302: PUSH
7303: LD_INT 3
7305: EQUAL
7306: IFFALSE 7316
// sEngine := true ;
7308: LD_ADDR_EXP 35
7312: PUSH
7313: LD_INT 1
7315: ST_TO_ADDR
// if p3 = 4 then
7316: LD_VAR 0 3
7320: PUSH
7321: LD_INT 4
7323: EQUAL
7324: IFFALSE 7334
// sSpec := true ;
7326: LD_ADDR_EXP 32
7330: PUSH
7331: LD_INT 1
7333: ST_TO_ADDR
// if p3 = 5 then
7334: LD_VAR 0 3
7338: PUSH
7339: LD_INT 5
7341: EQUAL
7342: IFFALSE 7352
// sLevel := true ;
7344: LD_ADDR_EXP 36
7348: PUSH
7349: LD_INT 1
7351: ST_TO_ADDR
// if p3 = 6 then
7352: LD_VAR 0 3
7356: PUSH
7357: LD_INT 6
7359: EQUAL
7360: IFFALSE 7370
// sArmoury := true ;
7362: LD_ADDR_EXP 37
7366: PUSH
7367: LD_INT 1
7369: ST_TO_ADDR
// if p3 = 7 then
7370: LD_VAR 0 3
7374: PUSH
7375: LD_INT 7
7377: EQUAL
7378: IFFALSE 7388
// sRadar := true ;
7380: LD_ADDR_EXP 38
7384: PUSH
7385: LD_INT 1
7387: ST_TO_ADDR
// if p3 = 8 then
7388: LD_VAR 0 3
7392: PUSH
7393: LD_INT 8
7395: EQUAL
7396: IFFALSE 7406
// sBunker := true ;
7398: LD_ADDR_EXP 39
7402: PUSH
7403: LD_INT 1
7405: ST_TO_ADDR
// if p3 = 9 then
7406: LD_VAR 0 3
7410: PUSH
7411: LD_INT 9
7413: EQUAL
7414: IFFALSE 7424
// sHack := true ;
7416: LD_ADDR_EXP 40
7420: PUSH
7421: LD_INT 1
7423: ST_TO_ADDR
// if p3 = 10 then
7424: LD_VAR 0 3
7428: PUSH
7429: LD_INT 10
7431: EQUAL
7432: IFFALSE 7442
// sFire := true ;
7434: LD_ADDR_EXP 41
7438: PUSH
7439: LD_INT 1
7441: ST_TO_ADDR
// if p3 = 11 then
7442: LD_VAR 0 3
7446: PUSH
7447: LD_INT 11
7449: EQUAL
7450: IFFALSE 7460
// sRefresh := true ;
7452: LD_ADDR_EXP 42
7456: PUSH
7457: LD_INT 1
7459: ST_TO_ADDR
// if p3 = 12 then
7460: LD_VAR 0 3
7464: PUSH
7465: LD_INT 12
7467: EQUAL
7468: IFFALSE 7478
// sExp := true ;
7470: LD_ADDR_EXP 43
7474: PUSH
7475: LD_INT 1
7477: ST_TO_ADDR
// if p3 = 13 then
7478: LD_VAR 0 3
7482: PUSH
7483: LD_INT 13
7485: EQUAL
7486: IFFALSE 7496
// sDepot := true ;
7488: LD_ADDR_EXP 44
7492: PUSH
7493: LD_INT 1
7495: ST_TO_ADDR
// if p3 = 14 then
7496: LD_VAR 0 3
7500: PUSH
7501: LD_INT 14
7503: EQUAL
7504: IFFALSE 7514
// sFlag := true ;
7506: LD_ADDR_EXP 45
7510: PUSH
7511: LD_INT 1
7513: ST_TO_ADDR
// if p3 = 15 then
7514: LD_VAR 0 3
7518: PUSH
7519: LD_INT 15
7521: EQUAL
7522: IFFALSE 7532
// sKamikadze := true ;
7524: LD_ADDR_EXP 53
7528: PUSH
7529: LD_INT 1
7531: ST_TO_ADDR
// if p3 = 16 then
7532: LD_VAR 0 3
7536: PUSH
7537: LD_INT 16
7539: EQUAL
7540: IFFALSE 7550
// sTroll := true ;
7542: LD_ADDR_EXP 54
7546: PUSH
7547: LD_INT 1
7549: ST_TO_ADDR
// if p3 = 17 then
7550: LD_VAR 0 3
7554: PUSH
7555: LD_INT 17
7557: EQUAL
7558: IFFALSE 7568
// sSlow := true ;
7560: LD_ADDR_EXP 55
7564: PUSH
7565: LD_INT 1
7567: ST_TO_ADDR
// if p3 = 18 then
7568: LD_VAR 0 3
7572: PUSH
7573: LD_INT 18
7575: EQUAL
7576: IFFALSE 7586
// sLack := true ;
7578: LD_ADDR_EXP 56
7582: PUSH
7583: LD_INT 1
7585: ST_TO_ADDR
// if p3 = 19 then
7586: LD_VAR 0 3
7590: PUSH
7591: LD_INT 19
7593: EQUAL
7594: IFFALSE 7604
// sTank := true ;
7596: LD_ADDR_EXP 58
7600: PUSH
7601: LD_INT 1
7603: ST_TO_ADDR
// if p3 = 20 then
7604: LD_VAR 0 3
7608: PUSH
7609: LD_INT 20
7611: EQUAL
7612: IFFALSE 7622
// sRemote := true ;
7614: LD_ADDR_EXP 59
7618: PUSH
7619: LD_INT 1
7621: ST_TO_ADDR
// if p3 = 21 then
7622: LD_VAR 0 3
7626: PUSH
7627: LD_INT 21
7629: EQUAL
7630: IFFALSE 7640
// sPowell := true ;
7632: LD_ADDR_EXP 60
7636: PUSH
7637: LD_INT 1
7639: ST_TO_ADDR
// if p3 = 22 then
7640: LD_VAR 0 3
7644: PUSH
7645: LD_INT 22
7647: EQUAL
7648: IFFALSE 7658
// sTeleport := true ;
7650: LD_ADDR_EXP 63
7654: PUSH
7655: LD_INT 1
7657: ST_TO_ADDR
// if p3 = 23 then
7658: LD_VAR 0 3
7662: PUSH
7663: LD_INT 23
7665: EQUAL
7666: IFFALSE 7676
// sOilTower := true ;
7668: LD_ADDR_EXP 65
7672: PUSH
7673: LD_INT 1
7675: ST_TO_ADDR
// if p3 = 24 then
7676: LD_VAR 0 3
7680: PUSH
7681: LD_INT 24
7683: EQUAL
7684: IFFALSE 7694
// sShovel := true ;
7686: LD_ADDR_EXP 66
7690: PUSH
7691: LD_INT 1
7693: ST_TO_ADDR
// if p3 = 25 then
7694: LD_VAR 0 3
7698: PUSH
7699: LD_INT 25
7701: EQUAL
7702: IFFALSE 7712
// sSheik := true ;
7704: LD_ADDR_EXP 67
7708: PUSH
7709: LD_INT 1
7711: ST_TO_ADDR
// if p3 = 26 then
7712: LD_VAR 0 3
7716: PUSH
7717: LD_INT 26
7719: EQUAL
7720: IFFALSE 7730
// sEarthquake := true ;
7722: LD_ADDR_EXP 69
7726: PUSH
7727: LD_INT 1
7729: ST_TO_ADDR
// if p3 = 27 then
7730: LD_VAR 0 3
7734: PUSH
7735: LD_INT 27
7737: EQUAL
7738: IFFALSE 7748
// sAI := true ;
7740: LD_ADDR_EXP 70
7744: PUSH
7745: LD_INT 1
7747: ST_TO_ADDR
// if p3 = 28 then
7748: LD_VAR 0 3
7752: PUSH
7753: LD_INT 28
7755: EQUAL
7756: IFFALSE 7766
// sCargo := true ;
7758: LD_ADDR_EXP 73
7762: PUSH
7763: LD_INT 1
7765: ST_TO_ADDR
// if p3 = 29 then
7766: LD_VAR 0 3
7770: PUSH
7771: LD_INT 29
7773: EQUAL
7774: IFFALSE 7784
// sDLaser := true ;
7776: LD_ADDR_EXP 74
7780: PUSH
7781: LD_INT 1
7783: ST_TO_ADDR
// if p3 = 30 then
7784: LD_VAR 0 3
7788: PUSH
7789: LD_INT 30
7791: EQUAL
7792: IFFALSE 7802
// sExchange := true ;
7794: LD_ADDR_EXP 75
7798: PUSH
7799: LD_INT 1
7801: ST_TO_ADDR
// if p3 = 31 then
7802: LD_VAR 0 3
7806: PUSH
7807: LD_INT 31
7809: EQUAL
7810: IFFALSE 7820
// sFac := true ;
7812: LD_ADDR_EXP 76
7816: PUSH
7817: LD_INT 1
7819: ST_TO_ADDR
// if p3 = 32 then
7820: LD_VAR 0 3
7824: PUSH
7825: LD_INT 32
7827: EQUAL
7828: IFFALSE 7838
// sPower := true ;
7830: LD_ADDR_EXP 77
7834: PUSH
7835: LD_INT 1
7837: ST_TO_ADDR
// if p3 = 33 then
7838: LD_VAR 0 3
7842: PUSH
7843: LD_INT 33
7845: EQUAL
7846: IFFALSE 7856
// sRandom := true ;
7848: LD_ADDR_EXP 78
7852: PUSH
7853: LD_INT 1
7855: ST_TO_ADDR
// if p3 = 34 then
7856: LD_VAR 0 3
7860: PUSH
7861: LD_INT 34
7863: EQUAL
7864: IFFALSE 7874
// sShield := true ;
7866: LD_ADDR_EXP 79
7870: PUSH
7871: LD_INT 1
7873: ST_TO_ADDR
// if p3 = 35 then
7874: LD_VAR 0 3
7878: PUSH
7879: LD_INT 35
7881: EQUAL
7882: IFFALSE 7892
// sTime := true ;
7884: LD_ADDR_EXP 80
7888: PUSH
7889: LD_INT 1
7891: ST_TO_ADDR
// if p3 = 36 then
7892: LD_VAR 0 3
7896: PUSH
7897: LD_INT 36
7899: EQUAL
7900: IFFALSE 7910
// sTools := true ;
7902: LD_ADDR_EXP 81
7906: PUSH
7907: LD_INT 1
7909: ST_TO_ADDR
// if p3 = 101 then
7910: LD_VAR 0 3
7914: PUSH
7915: LD_INT 101
7917: EQUAL
7918: IFFALSE 7928
// sSold := true ;
7920: LD_ADDR_EXP 46
7924: PUSH
7925: LD_INT 1
7927: ST_TO_ADDR
// if p3 = 102 then
7928: LD_VAR 0 3
7932: PUSH
7933: LD_INT 102
7935: EQUAL
7936: IFFALSE 7946
// sDiff := true ;
7938: LD_ADDR_EXP 47
7942: PUSH
7943: LD_INT 1
7945: ST_TO_ADDR
// if p3 = 103 then
7946: LD_VAR 0 3
7950: PUSH
7951: LD_INT 103
7953: EQUAL
7954: IFFALSE 7964
// sFog := true ;
7956: LD_ADDR_EXP 50
7960: PUSH
7961: LD_INT 1
7963: ST_TO_ADDR
// if p3 = 104 then
7964: LD_VAR 0 3
7968: PUSH
7969: LD_INT 104
7971: EQUAL
7972: IFFALSE 7982
// sReset := true ;
7974: LD_ADDR_EXP 51
7978: PUSH
7979: LD_INT 1
7981: ST_TO_ADDR
// if p3 = 105 then
7982: LD_VAR 0 3
7986: PUSH
7987: LD_INT 105
7989: EQUAL
7990: IFFALSE 8000
// sSun := true ;
7992: LD_ADDR_EXP 52
7996: PUSH
7997: LD_INT 1
7999: ST_TO_ADDR
// if p3 = 106 then
8000: LD_VAR 0 3
8004: PUSH
8005: LD_INT 106
8007: EQUAL
8008: IFFALSE 8018
// sTiger := true ;
8010: LD_ADDR_EXP 48
8014: PUSH
8015: LD_INT 1
8017: ST_TO_ADDR
// if p3 = 107 then
8018: LD_VAR 0 3
8022: PUSH
8023: LD_INT 107
8025: EQUAL
8026: IFFALSE 8036
// sBomb := true ;
8028: LD_ADDR_EXP 49
8032: PUSH
8033: LD_INT 1
8035: ST_TO_ADDR
// if p3 = 108 then
8036: LD_VAR 0 3
8040: PUSH
8041: LD_INT 108
8043: EQUAL
8044: IFFALSE 8054
// sWound := true ;
8046: LD_ADDR_EXP 57
8050: PUSH
8051: LD_INT 1
8053: ST_TO_ADDR
// if p3 = 109 then
8054: LD_VAR 0 3
8058: PUSH
8059: LD_INT 109
8061: EQUAL
8062: IFFALSE 8072
// sBetray := true ;
8064: LD_ADDR_EXP 61
8068: PUSH
8069: LD_INT 1
8071: ST_TO_ADDR
// if p3 = 110 then
8072: LD_VAR 0 3
8076: PUSH
8077: LD_INT 110
8079: EQUAL
8080: IFFALSE 8090
// sContamin := true ;
8082: LD_ADDR_EXP 62
8086: PUSH
8087: LD_INT 1
8089: ST_TO_ADDR
// if p3 = 111 then
8090: LD_VAR 0 3
8094: PUSH
8095: LD_INT 111
8097: EQUAL
8098: IFFALSE 8108
// sOil := true ;
8100: LD_ADDR_EXP 64
8104: PUSH
8105: LD_INT 1
8107: ST_TO_ADDR
// if p3 = 112 then
8108: LD_VAR 0 3
8112: PUSH
8113: LD_INT 112
8115: EQUAL
8116: IFFALSE 8126
// sStu := true ;
8118: LD_ADDR_EXP 68
8122: PUSH
8123: LD_INT 1
8125: ST_TO_ADDR
// if p3 = 113 then
8126: LD_VAR 0 3
8130: PUSH
8131: LD_INT 113
8133: EQUAL
8134: IFFALSE 8144
// sBazooka := true ;
8136: LD_ADDR_EXP 71
8140: PUSH
8141: LD_INT 1
8143: ST_TO_ADDR
// if p3 = 114 then
8144: LD_VAR 0 3
8148: PUSH
8149: LD_INT 114
8151: EQUAL
8152: IFFALSE 8162
// sMortar := true ;
8154: LD_ADDR_EXP 72
8158: PUSH
8159: LD_INT 1
8161: ST_TO_ADDR
// if p3 = 115 then
8162: LD_VAR 0 3
8166: PUSH
8167: LD_INT 115
8169: EQUAL
8170: IFFALSE 8180
// sRanger := true ;
8172: LD_ADDR_EXP 82
8176: PUSH
8177: LD_INT 1
8179: ST_TO_ADDR
// if p3 = 116 then
8180: LD_VAR 0 3
8184: PUSH
8185: LD_INT 116
8187: EQUAL
8188: IFFALSE 8198
// sComputer := true ;
8190: LD_ADDR_EXP 83
8194: PUSH
8195: LD_INT 1
8197: ST_TO_ADDR
// if p3 = 117 then
8198: LD_VAR 0 3
8202: PUSH
8203: LD_INT 117
8205: EQUAL
8206: IFFALSE 8216
// s30 := true ;
8208: LD_ADDR_EXP 84
8212: PUSH
8213: LD_INT 1
8215: ST_TO_ADDR
// if p3 = 118 then
8216: LD_VAR 0 3
8220: PUSH
8221: LD_INT 118
8223: EQUAL
8224: IFFALSE 8234
// s60 := true ;
8226: LD_ADDR_EXP 85
8230: PUSH
8231: LD_INT 1
8233: ST_TO_ADDR
// end ; if p2 = hack_mode then
8234: LD_VAR 0 2
8238: PUSH
8239: LD_INT 101
8241: EQUAL
8242: IFFALSE 8370
// begin case p3 of 1 :
8244: LD_VAR 0 3
8248: PUSH
8249: LD_INT 1
8251: DOUBLE
8252: EQUAL
8253: IFTRUE 8257
8255: GO 8264
8257: POP
// hHackUnlimitedResources ; 2 :
8258: CALL 20517 0 0
8262: GO 8370
8264: LD_INT 2
8266: DOUBLE
8267: EQUAL
8268: IFTRUE 8272
8270: GO 8279
8272: POP
// hHackSetLevel10 ; 3 :
8273: CALL 20650 0 0
8277: GO 8370
8279: LD_INT 3
8281: DOUBLE
8282: EQUAL
8283: IFTRUE 8287
8285: GO 8294
8287: POP
// hHackSetLevel10YourUnits ; 4 :
8288: CALL 20735 0 0
8292: GO 8370
8294: LD_INT 4
8296: DOUBLE
8297: EQUAL
8298: IFTRUE 8302
8300: GO 8309
8302: POP
// hHackInvincible ; 5 :
8303: CALL 21183 0 0
8307: GO 8370
8309: LD_INT 5
8311: DOUBLE
8312: EQUAL
8313: IFTRUE 8317
8315: GO 8324
8317: POP
// hHackInvisible ; 6 :
8318: CALL 21294 0 0
8322: GO 8370
8324: LD_INT 6
8326: DOUBLE
8327: EQUAL
8328: IFTRUE 8332
8330: GO 8339
8332: POP
// hHackChangeYourSide ; 7 :
8333: CALL 21351 0 0
8337: GO 8370
8339: LD_INT 7
8341: DOUBLE
8342: EQUAL
8343: IFTRUE 8347
8345: GO 8354
8347: POP
// hHackChangeUnitSide ; 8 :
8348: CALL 21393 0 0
8352: GO 8370
8354: LD_INT 8
8356: DOUBLE
8357: EQUAL
8358: IFTRUE 8362
8360: GO 8369
8362: POP
// hHackFog ; end ;
8363: CALL 21494 0 0
8367: GO 8370
8369: POP
// end ; if p2 = game_save_mode then
8370: LD_VAR 0 2
8374: PUSH
8375: LD_INT 102
8377: EQUAL
8378: IFFALSE 8433
// begin if p3 = 1 then
8380: LD_VAR 0 3
8384: PUSH
8385: LD_INT 1
8387: EQUAL
8388: IFFALSE 8400
// globalGameSaveCounter := p4 ;
8390: LD_ADDR_EXP 28
8394: PUSH
8395: LD_VAR 0 4
8399: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
8400: LD_VAR 0 3
8404: PUSH
8405: LD_INT 2
8407: EQUAL
8408: PUSH
8409: LD_EXP 28
8413: AND
8414: IFFALSE 8433
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
8416: LD_STRING setGameSaveCounter(
8418: PUSH
8419: LD_EXP 28
8423: STR
8424: PUSH
8425: LD_STRING )
8427: STR
8428: PPUSH
8429: CALL_OW 559
// end ; end ;
8433: LD_VAR 0 7
8437: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
8438: LD_INT 0
8440: PPUSH
// streamModeActive := false ;
8441: LD_ADDR_EXP 29
8445: PUSH
8446: LD_INT 0
8448: ST_TO_ADDR
// normalCounter := 36 ;
8449: LD_ADDR_EXP 30
8453: PUSH
8454: LD_INT 36
8456: ST_TO_ADDR
// hardcoreCounter := 18 ;
8457: LD_ADDR_EXP 31
8461: PUSH
8462: LD_INT 18
8464: ST_TO_ADDR
// sRocket := false ;
8465: LD_ADDR_EXP 34
8469: PUSH
8470: LD_INT 0
8472: ST_TO_ADDR
// sSpeed := false ;
8473: LD_ADDR_EXP 33
8477: PUSH
8478: LD_INT 0
8480: ST_TO_ADDR
// sEngine := false ;
8481: LD_ADDR_EXP 35
8485: PUSH
8486: LD_INT 0
8488: ST_TO_ADDR
// sSpec := false ;
8489: LD_ADDR_EXP 32
8493: PUSH
8494: LD_INT 0
8496: ST_TO_ADDR
// sLevel := false ;
8497: LD_ADDR_EXP 36
8501: PUSH
8502: LD_INT 0
8504: ST_TO_ADDR
// sArmoury := false ;
8505: LD_ADDR_EXP 37
8509: PUSH
8510: LD_INT 0
8512: ST_TO_ADDR
// sRadar := false ;
8513: LD_ADDR_EXP 38
8517: PUSH
8518: LD_INT 0
8520: ST_TO_ADDR
// sBunker := false ;
8521: LD_ADDR_EXP 39
8525: PUSH
8526: LD_INT 0
8528: ST_TO_ADDR
// sHack := false ;
8529: LD_ADDR_EXP 40
8533: PUSH
8534: LD_INT 0
8536: ST_TO_ADDR
// sFire := false ;
8537: LD_ADDR_EXP 41
8541: PUSH
8542: LD_INT 0
8544: ST_TO_ADDR
// sRefresh := false ;
8545: LD_ADDR_EXP 42
8549: PUSH
8550: LD_INT 0
8552: ST_TO_ADDR
// sExp := false ;
8553: LD_ADDR_EXP 43
8557: PUSH
8558: LD_INT 0
8560: ST_TO_ADDR
// sDepot := false ;
8561: LD_ADDR_EXP 44
8565: PUSH
8566: LD_INT 0
8568: ST_TO_ADDR
// sFlag := false ;
8569: LD_ADDR_EXP 45
8573: PUSH
8574: LD_INT 0
8576: ST_TO_ADDR
// sKamikadze := false ;
8577: LD_ADDR_EXP 53
8581: PUSH
8582: LD_INT 0
8584: ST_TO_ADDR
// sTroll := false ;
8585: LD_ADDR_EXP 54
8589: PUSH
8590: LD_INT 0
8592: ST_TO_ADDR
// sSlow := false ;
8593: LD_ADDR_EXP 55
8597: PUSH
8598: LD_INT 0
8600: ST_TO_ADDR
// sLack := false ;
8601: LD_ADDR_EXP 56
8605: PUSH
8606: LD_INT 0
8608: ST_TO_ADDR
// sTank := false ;
8609: LD_ADDR_EXP 58
8613: PUSH
8614: LD_INT 0
8616: ST_TO_ADDR
// sRemote := false ;
8617: LD_ADDR_EXP 59
8621: PUSH
8622: LD_INT 0
8624: ST_TO_ADDR
// sPowell := false ;
8625: LD_ADDR_EXP 60
8629: PUSH
8630: LD_INT 0
8632: ST_TO_ADDR
// sTeleport := false ;
8633: LD_ADDR_EXP 63
8637: PUSH
8638: LD_INT 0
8640: ST_TO_ADDR
// sOilTower := false ;
8641: LD_ADDR_EXP 65
8645: PUSH
8646: LD_INT 0
8648: ST_TO_ADDR
// sShovel := false ;
8649: LD_ADDR_EXP 66
8653: PUSH
8654: LD_INT 0
8656: ST_TO_ADDR
// sSheik := false ;
8657: LD_ADDR_EXP 67
8661: PUSH
8662: LD_INT 0
8664: ST_TO_ADDR
// sEarthquake := false ;
8665: LD_ADDR_EXP 69
8669: PUSH
8670: LD_INT 0
8672: ST_TO_ADDR
// sAI := false ;
8673: LD_ADDR_EXP 70
8677: PUSH
8678: LD_INT 0
8680: ST_TO_ADDR
// sCargo := false ;
8681: LD_ADDR_EXP 73
8685: PUSH
8686: LD_INT 0
8688: ST_TO_ADDR
// sDLaser := false ;
8689: LD_ADDR_EXP 74
8693: PUSH
8694: LD_INT 0
8696: ST_TO_ADDR
// sExchange := false ;
8697: LD_ADDR_EXP 75
8701: PUSH
8702: LD_INT 0
8704: ST_TO_ADDR
// sFac := false ;
8705: LD_ADDR_EXP 76
8709: PUSH
8710: LD_INT 0
8712: ST_TO_ADDR
// sPower := false ;
8713: LD_ADDR_EXP 77
8717: PUSH
8718: LD_INT 0
8720: ST_TO_ADDR
// sRandom := false ;
8721: LD_ADDR_EXP 78
8725: PUSH
8726: LD_INT 0
8728: ST_TO_ADDR
// sShield := false ;
8729: LD_ADDR_EXP 79
8733: PUSH
8734: LD_INT 0
8736: ST_TO_ADDR
// sTime := false ;
8737: LD_ADDR_EXP 80
8741: PUSH
8742: LD_INT 0
8744: ST_TO_ADDR
// sTools := false ;
8745: LD_ADDR_EXP 81
8749: PUSH
8750: LD_INT 0
8752: ST_TO_ADDR
// sSold := false ;
8753: LD_ADDR_EXP 46
8757: PUSH
8758: LD_INT 0
8760: ST_TO_ADDR
// sDiff := false ;
8761: LD_ADDR_EXP 47
8765: PUSH
8766: LD_INT 0
8768: ST_TO_ADDR
// sFog := false ;
8769: LD_ADDR_EXP 50
8773: PUSH
8774: LD_INT 0
8776: ST_TO_ADDR
// sReset := false ;
8777: LD_ADDR_EXP 51
8781: PUSH
8782: LD_INT 0
8784: ST_TO_ADDR
// sSun := false ;
8785: LD_ADDR_EXP 52
8789: PUSH
8790: LD_INT 0
8792: ST_TO_ADDR
// sTiger := false ;
8793: LD_ADDR_EXP 48
8797: PUSH
8798: LD_INT 0
8800: ST_TO_ADDR
// sBomb := false ;
8801: LD_ADDR_EXP 49
8805: PUSH
8806: LD_INT 0
8808: ST_TO_ADDR
// sWound := false ;
8809: LD_ADDR_EXP 57
8813: PUSH
8814: LD_INT 0
8816: ST_TO_ADDR
// sBetray := false ;
8817: LD_ADDR_EXP 61
8821: PUSH
8822: LD_INT 0
8824: ST_TO_ADDR
// sContamin := false ;
8825: LD_ADDR_EXP 62
8829: PUSH
8830: LD_INT 0
8832: ST_TO_ADDR
// sOil := false ;
8833: LD_ADDR_EXP 64
8837: PUSH
8838: LD_INT 0
8840: ST_TO_ADDR
// sStu := false ;
8841: LD_ADDR_EXP 68
8845: PUSH
8846: LD_INT 0
8848: ST_TO_ADDR
// sBazooka := false ;
8849: LD_ADDR_EXP 71
8853: PUSH
8854: LD_INT 0
8856: ST_TO_ADDR
// sMortar := false ;
8857: LD_ADDR_EXP 72
8861: PUSH
8862: LD_INT 0
8864: ST_TO_ADDR
// sRanger := false ;
8865: LD_ADDR_EXP 82
8869: PUSH
8870: LD_INT 0
8872: ST_TO_ADDR
// sComputer := false ;
8873: LD_ADDR_EXP 83
8877: PUSH
8878: LD_INT 0
8880: ST_TO_ADDR
// s30 := false ;
8881: LD_ADDR_EXP 84
8885: PUSH
8886: LD_INT 0
8888: ST_TO_ADDR
// s60 := false ;
8889: LD_ADDR_EXP 85
8893: PUSH
8894: LD_INT 0
8896: ST_TO_ADDR
// end ;
8897: LD_VAR 0 1
8901: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
8902: LD_INT 0
8904: PPUSH
8905: PPUSH
8906: PPUSH
8907: PPUSH
8908: PPUSH
8909: PPUSH
8910: PPUSH
// result := [ ] ;
8911: LD_ADDR_VAR 0 2
8915: PUSH
8916: EMPTY
8917: ST_TO_ADDR
// if campaign_id = 1 then
8918: LD_OWVAR 69
8922: PUSH
8923: LD_INT 1
8925: EQUAL
8926: IFFALSE 12092
// begin case mission_number of 1 :
8928: LD_OWVAR 70
8932: PUSH
8933: LD_INT 1
8935: DOUBLE
8936: EQUAL
8937: IFTRUE 8941
8939: GO 9017
8941: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
8942: LD_ADDR_VAR 0 2
8946: PUSH
8947: LD_INT 2
8949: PUSH
8950: LD_INT 4
8952: PUSH
8953: LD_INT 11
8955: PUSH
8956: LD_INT 12
8958: PUSH
8959: LD_INT 15
8961: PUSH
8962: LD_INT 16
8964: PUSH
8965: LD_INT 22
8967: PUSH
8968: LD_INT 23
8970: PUSH
8971: LD_INT 26
8973: PUSH
8974: EMPTY
8975: LIST
8976: LIST
8977: LIST
8978: LIST
8979: LIST
8980: LIST
8981: LIST
8982: LIST
8983: LIST
8984: PUSH
8985: LD_INT 101
8987: PUSH
8988: LD_INT 102
8990: PUSH
8991: LD_INT 106
8993: PUSH
8994: LD_INT 116
8996: PUSH
8997: LD_INT 117
8999: PUSH
9000: LD_INT 118
9002: PUSH
9003: EMPTY
9004: LIST
9005: LIST
9006: LIST
9007: LIST
9008: LIST
9009: LIST
9010: PUSH
9011: EMPTY
9012: LIST
9013: LIST
9014: ST_TO_ADDR
9015: GO 12090
9017: LD_INT 2
9019: DOUBLE
9020: EQUAL
9021: IFTRUE 9025
9023: GO 9109
9025: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9026: LD_ADDR_VAR 0 2
9030: PUSH
9031: LD_INT 2
9033: PUSH
9034: LD_INT 4
9036: PUSH
9037: LD_INT 11
9039: PUSH
9040: LD_INT 12
9042: PUSH
9043: LD_INT 15
9045: PUSH
9046: LD_INT 16
9048: PUSH
9049: LD_INT 22
9051: PUSH
9052: LD_INT 23
9054: PUSH
9055: LD_INT 26
9057: PUSH
9058: EMPTY
9059: LIST
9060: LIST
9061: LIST
9062: LIST
9063: LIST
9064: LIST
9065: LIST
9066: LIST
9067: LIST
9068: PUSH
9069: LD_INT 101
9071: PUSH
9072: LD_INT 102
9074: PUSH
9075: LD_INT 105
9077: PUSH
9078: LD_INT 106
9080: PUSH
9081: LD_INT 108
9083: PUSH
9084: LD_INT 116
9086: PUSH
9087: LD_INT 117
9089: PUSH
9090: LD_INT 118
9092: PUSH
9093: EMPTY
9094: LIST
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: LIST
9100: LIST
9101: LIST
9102: PUSH
9103: EMPTY
9104: LIST
9105: LIST
9106: ST_TO_ADDR
9107: GO 12090
9109: LD_INT 3
9111: DOUBLE
9112: EQUAL
9113: IFTRUE 9117
9115: GO 9205
9117: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9118: LD_ADDR_VAR 0 2
9122: PUSH
9123: LD_INT 2
9125: PUSH
9126: LD_INT 4
9128: PUSH
9129: LD_INT 5
9131: PUSH
9132: LD_INT 11
9134: PUSH
9135: LD_INT 12
9137: PUSH
9138: LD_INT 15
9140: PUSH
9141: LD_INT 16
9143: PUSH
9144: LD_INT 22
9146: PUSH
9147: LD_INT 26
9149: PUSH
9150: LD_INT 36
9152: PUSH
9153: EMPTY
9154: LIST
9155: LIST
9156: LIST
9157: LIST
9158: LIST
9159: LIST
9160: LIST
9161: LIST
9162: LIST
9163: LIST
9164: PUSH
9165: LD_INT 101
9167: PUSH
9168: LD_INT 102
9170: PUSH
9171: LD_INT 105
9173: PUSH
9174: LD_INT 106
9176: PUSH
9177: LD_INT 108
9179: PUSH
9180: LD_INT 116
9182: PUSH
9183: LD_INT 117
9185: PUSH
9186: LD_INT 118
9188: PUSH
9189: EMPTY
9190: LIST
9191: LIST
9192: LIST
9193: LIST
9194: LIST
9195: LIST
9196: LIST
9197: LIST
9198: PUSH
9199: EMPTY
9200: LIST
9201: LIST
9202: ST_TO_ADDR
9203: GO 12090
9205: LD_INT 4
9207: DOUBLE
9208: EQUAL
9209: IFTRUE 9213
9211: GO 9309
9213: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9214: LD_ADDR_VAR 0 2
9218: PUSH
9219: LD_INT 2
9221: PUSH
9222: LD_INT 4
9224: PUSH
9225: LD_INT 5
9227: PUSH
9228: LD_INT 8
9230: PUSH
9231: LD_INT 11
9233: PUSH
9234: LD_INT 12
9236: PUSH
9237: LD_INT 15
9239: PUSH
9240: LD_INT 16
9242: PUSH
9243: LD_INT 22
9245: PUSH
9246: LD_INT 23
9248: PUSH
9249: LD_INT 26
9251: PUSH
9252: LD_INT 36
9254: PUSH
9255: EMPTY
9256: LIST
9257: LIST
9258: LIST
9259: LIST
9260: LIST
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: PUSH
9269: LD_INT 101
9271: PUSH
9272: LD_INT 102
9274: PUSH
9275: LD_INT 105
9277: PUSH
9278: LD_INT 106
9280: PUSH
9281: LD_INT 108
9283: PUSH
9284: LD_INT 116
9286: PUSH
9287: LD_INT 117
9289: PUSH
9290: LD_INT 118
9292: PUSH
9293: EMPTY
9294: LIST
9295: LIST
9296: LIST
9297: LIST
9298: LIST
9299: LIST
9300: LIST
9301: LIST
9302: PUSH
9303: EMPTY
9304: LIST
9305: LIST
9306: ST_TO_ADDR
9307: GO 12090
9309: LD_INT 5
9311: DOUBLE
9312: EQUAL
9313: IFTRUE 9317
9315: GO 9429
9317: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9318: LD_ADDR_VAR 0 2
9322: PUSH
9323: LD_INT 2
9325: PUSH
9326: LD_INT 4
9328: PUSH
9329: LD_INT 5
9331: PUSH
9332: LD_INT 6
9334: PUSH
9335: LD_INT 8
9337: PUSH
9338: LD_INT 11
9340: PUSH
9341: LD_INT 12
9343: PUSH
9344: LD_INT 15
9346: PUSH
9347: LD_INT 16
9349: PUSH
9350: LD_INT 22
9352: PUSH
9353: LD_INT 23
9355: PUSH
9356: LD_INT 25
9358: PUSH
9359: LD_INT 26
9361: PUSH
9362: LD_INT 36
9364: PUSH
9365: EMPTY
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: PUSH
9381: LD_INT 101
9383: PUSH
9384: LD_INT 102
9386: PUSH
9387: LD_INT 105
9389: PUSH
9390: LD_INT 106
9392: PUSH
9393: LD_INT 108
9395: PUSH
9396: LD_INT 109
9398: PUSH
9399: LD_INT 112
9401: PUSH
9402: LD_INT 116
9404: PUSH
9405: LD_INT 117
9407: PUSH
9408: LD_INT 118
9410: PUSH
9411: EMPTY
9412: LIST
9413: LIST
9414: LIST
9415: LIST
9416: LIST
9417: LIST
9418: LIST
9419: LIST
9420: LIST
9421: LIST
9422: PUSH
9423: EMPTY
9424: LIST
9425: LIST
9426: ST_TO_ADDR
9427: GO 12090
9429: LD_INT 6
9431: DOUBLE
9432: EQUAL
9433: IFTRUE 9437
9435: GO 9569
9437: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
9438: LD_ADDR_VAR 0 2
9442: PUSH
9443: LD_INT 2
9445: PUSH
9446: LD_INT 4
9448: PUSH
9449: LD_INT 5
9451: PUSH
9452: LD_INT 6
9454: PUSH
9455: LD_INT 8
9457: PUSH
9458: LD_INT 11
9460: PUSH
9461: LD_INT 12
9463: PUSH
9464: LD_INT 15
9466: PUSH
9467: LD_INT 16
9469: PUSH
9470: LD_INT 20
9472: PUSH
9473: LD_INT 21
9475: PUSH
9476: LD_INT 22
9478: PUSH
9479: LD_INT 23
9481: PUSH
9482: LD_INT 25
9484: PUSH
9485: LD_INT 26
9487: PUSH
9488: LD_INT 30
9490: PUSH
9491: LD_INT 31
9493: PUSH
9494: LD_INT 32
9496: PUSH
9497: LD_INT 36
9499: PUSH
9500: EMPTY
9501: LIST
9502: LIST
9503: LIST
9504: LIST
9505: LIST
9506: LIST
9507: LIST
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: LIST
9513: LIST
9514: LIST
9515: LIST
9516: LIST
9517: LIST
9518: LIST
9519: LIST
9520: PUSH
9521: LD_INT 101
9523: PUSH
9524: LD_INT 102
9526: PUSH
9527: LD_INT 105
9529: PUSH
9530: LD_INT 106
9532: PUSH
9533: LD_INT 108
9535: PUSH
9536: LD_INT 109
9538: PUSH
9539: LD_INT 112
9541: PUSH
9542: LD_INT 116
9544: PUSH
9545: LD_INT 117
9547: PUSH
9548: LD_INT 118
9550: PUSH
9551: EMPTY
9552: LIST
9553: LIST
9554: LIST
9555: LIST
9556: LIST
9557: LIST
9558: LIST
9559: LIST
9560: LIST
9561: LIST
9562: PUSH
9563: EMPTY
9564: LIST
9565: LIST
9566: ST_TO_ADDR
9567: GO 12090
9569: LD_INT 7
9571: DOUBLE
9572: EQUAL
9573: IFTRUE 9577
9575: GO 9689
9577: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
9578: LD_ADDR_VAR 0 2
9582: PUSH
9583: LD_INT 2
9585: PUSH
9586: LD_INT 4
9588: PUSH
9589: LD_INT 5
9591: PUSH
9592: LD_INT 7
9594: PUSH
9595: LD_INT 11
9597: PUSH
9598: LD_INT 12
9600: PUSH
9601: LD_INT 15
9603: PUSH
9604: LD_INT 16
9606: PUSH
9607: LD_INT 20
9609: PUSH
9610: LD_INT 21
9612: PUSH
9613: LD_INT 22
9615: PUSH
9616: LD_INT 23
9618: PUSH
9619: LD_INT 25
9621: PUSH
9622: LD_INT 26
9624: PUSH
9625: EMPTY
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: LIST
9631: LIST
9632: LIST
9633: LIST
9634: LIST
9635: LIST
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: PUSH
9641: LD_INT 101
9643: PUSH
9644: LD_INT 102
9646: PUSH
9647: LD_INT 103
9649: PUSH
9650: LD_INT 105
9652: PUSH
9653: LD_INT 106
9655: PUSH
9656: LD_INT 108
9658: PUSH
9659: LD_INT 112
9661: PUSH
9662: LD_INT 116
9664: PUSH
9665: LD_INT 117
9667: PUSH
9668: LD_INT 118
9670: PUSH
9671: EMPTY
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: PUSH
9683: EMPTY
9684: LIST
9685: LIST
9686: ST_TO_ADDR
9687: GO 12090
9689: LD_INT 8
9691: DOUBLE
9692: EQUAL
9693: IFTRUE 9697
9695: GO 9837
9697: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
9698: LD_ADDR_VAR 0 2
9702: PUSH
9703: LD_INT 2
9705: PUSH
9706: LD_INT 4
9708: PUSH
9709: LD_INT 5
9711: PUSH
9712: LD_INT 6
9714: PUSH
9715: LD_INT 7
9717: PUSH
9718: LD_INT 8
9720: PUSH
9721: LD_INT 11
9723: PUSH
9724: LD_INT 12
9726: PUSH
9727: LD_INT 15
9729: PUSH
9730: LD_INT 16
9732: PUSH
9733: LD_INT 20
9735: PUSH
9736: LD_INT 21
9738: PUSH
9739: LD_INT 22
9741: PUSH
9742: LD_INT 23
9744: PUSH
9745: LD_INT 25
9747: PUSH
9748: LD_INT 26
9750: PUSH
9751: LD_INT 30
9753: PUSH
9754: LD_INT 31
9756: PUSH
9757: LD_INT 32
9759: PUSH
9760: LD_INT 36
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: LIST
9782: LIST
9783: LIST
9784: PUSH
9785: LD_INT 101
9787: PUSH
9788: LD_INT 102
9790: PUSH
9791: LD_INT 103
9793: PUSH
9794: LD_INT 105
9796: PUSH
9797: LD_INT 106
9799: PUSH
9800: LD_INT 108
9802: PUSH
9803: LD_INT 109
9805: PUSH
9806: LD_INT 112
9808: PUSH
9809: LD_INT 116
9811: PUSH
9812: LD_INT 117
9814: PUSH
9815: LD_INT 118
9817: PUSH
9818: EMPTY
9819: LIST
9820: LIST
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: PUSH
9831: EMPTY
9832: LIST
9833: LIST
9834: ST_TO_ADDR
9835: GO 12090
9837: LD_INT 9
9839: DOUBLE
9840: EQUAL
9841: IFTRUE 9845
9843: GO 9993
9845: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
9846: LD_ADDR_VAR 0 2
9850: PUSH
9851: LD_INT 2
9853: PUSH
9854: LD_INT 4
9856: PUSH
9857: LD_INT 5
9859: PUSH
9860: LD_INT 6
9862: PUSH
9863: LD_INT 7
9865: PUSH
9866: LD_INT 8
9868: PUSH
9869: LD_INT 11
9871: PUSH
9872: LD_INT 12
9874: PUSH
9875: LD_INT 15
9877: PUSH
9878: LD_INT 16
9880: PUSH
9881: LD_INT 20
9883: PUSH
9884: LD_INT 21
9886: PUSH
9887: LD_INT 22
9889: PUSH
9890: LD_INT 23
9892: PUSH
9893: LD_INT 25
9895: PUSH
9896: LD_INT 26
9898: PUSH
9899: LD_INT 28
9901: PUSH
9902: LD_INT 30
9904: PUSH
9905: LD_INT 31
9907: PUSH
9908: LD_INT 32
9910: PUSH
9911: LD_INT 36
9913: PUSH
9914: EMPTY
9915: LIST
9916: LIST
9917: LIST
9918: LIST
9919: LIST
9920: LIST
9921: LIST
9922: LIST
9923: LIST
9924: LIST
9925: LIST
9926: LIST
9927: LIST
9928: LIST
9929: LIST
9930: LIST
9931: LIST
9932: LIST
9933: LIST
9934: LIST
9935: LIST
9936: PUSH
9937: LD_INT 101
9939: PUSH
9940: LD_INT 102
9942: PUSH
9943: LD_INT 103
9945: PUSH
9946: LD_INT 105
9948: PUSH
9949: LD_INT 106
9951: PUSH
9952: LD_INT 108
9954: PUSH
9955: LD_INT 109
9957: PUSH
9958: LD_INT 112
9960: PUSH
9961: LD_INT 114
9963: PUSH
9964: LD_INT 116
9966: PUSH
9967: LD_INT 117
9969: PUSH
9970: LD_INT 118
9972: PUSH
9973: EMPTY
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: LIST
9985: LIST
9986: PUSH
9987: EMPTY
9988: LIST
9989: LIST
9990: ST_TO_ADDR
9991: GO 12090
9993: LD_INT 10
9995: DOUBLE
9996: EQUAL
9997: IFTRUE 10001
9999: GO 10197
10001: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
10002: LD_ADDR_VAR 0 2
10006: PUSH
10007: LD_INT 2
10009: PUSH
10010: LD_INT 4
10012: PUSH
10013: LD_INT 5
10015: PUSH
10016: LD_INT 6
10018: PUSH
10019: LD_INT 7
10021: PUSH
10022: LD_INT 8
10024: PUSH
10025: LD_INT 9
10027: PUSH
10028: LD_INT 10
10030: PUSH
10031: LD_INT 11
10033: PUSH
10034: LD_INT 12
10036: PUSH
10037: LD_INT 13
10039: PUSH
10040: LD_INT 14
10042: PUSH
10043: LD_INT 15
10045: PUSH
10046: LD_INT 16
10048: PUSH
10049: LD_INT 17
10051: PUSH
10052: LD_INT 18
10054: PUSH
10055: LD_INT 19
10057: PUSH
10058: LD_INT 20
10060: PUSH
10061: LD_INT 21
10063: PUSH
10064: LD_INT 22
10066: PUSH
10067: LD_INT 23
10069: PUSH
10070: LD_INT 24
10072: PUSH
10073: LD_INT 25
10075: PUSH
10076: LD_INT 26
10078: PUSH
10079: LD_INT 28
10081: PUSH
10082: LD_INT 30
10084: PUSH
10085: LD_INT 31
10087: PUSH
10088: LD_INT 32
10090: PUSH
10091: LD_INT 36
10093: PUSH
10094: EMPTY
10095: LIST
10096: LIST
10097: LIST
10098: LIST
10099: LIST
10100: LIST
10101: LIST
10102: LIST
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: LIST
10120: LIST
10121: LIST
10122: LIST
10123: LIST
10124: PUSH
10125: LD_INT 101
10127: PUSH
10128: LD_INT 102
10130: PUSH
10131: LD_INT 103
10133: PUSH
10134: LD_INT 104
10136: PUSH
10137: LD_INT 105
10139: PUSH
10140: LD_INT 106
10142: PUSH
10143: LD_INT 107
10145: PUSH
10146: LD_INT 108
10148: PUSH
10149: LD_INT 109
10151: PUSH
10152: LD_INT 110
10154: PUSH
10155: LD_INT 111
10157: PUSH
10158: LD_INT 112
10160: PUSH
10161: LD_INT 114
10163: PUSH
10164: LD_INT 116
10166: PUSH
10167: LD_INT 117
10169: PUSH
10170: LD_INT 118
10172: PUSH
10173: EMPTY
10174: LIST
10175: LIST
10176: LIST
10177: LIST
10178: LIST
10179: LIST
10180: LIST
10181: LIST
10182: LIST
10183: LIST
10184: LIST
10185: LIST
10186: LIST
10187: LIST
10188: LIST
10189: LIST
10190: PUSH
10191: EMPTY
10192: LIST
10193: LIST
10194: ST_TO_ADDR
10195: GO 12090
10197: LD_INT 11
10199: DOUBLE
10200: EQUAL
10201: IFTRUE 10205
10203: GO 10409
10205: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10206: LD_ADDR_VAR 0 2
10210: PUSH
10211: LD_INT 2
10213: PUSH
10214: LD_INT 3
10216: PUSH
10217: LD_INT 4
10219: PUSH
10220: LD_INT 5
10222: PUSH
10223: LD_INT 6
10225: PUSH
10226: LD_INT 7
10228: PUSH
10229: LD_INT 8
10231: PUSH
10232: LD_INT 9
10234: PUSH
10235: LD_INT 10
10237: PUSH
10238: LD_INT 11
10240: PUSH
10241: LD_INT 12
10243: PUSH
10244: LD_INT 13
10246: PUSH
10247: LD_INT 14
10249: PUSH
10250: LD_INT 15
10252: PUSH
10253: LD_INT 16
10255: PUSH
10256: LD_INT 17
10258: PUSH
10259: LD_INT 18
10261: PUSH
10262: LD_INT 19
10264: PUSH
10265: LD_INT 20
10267: PUSH
10268: LD_INT 21
10270: PUSH
10271: LD_INT 22
10273: PUSH
10274: LD_INT 23
10276: PUSH
10277: LD_INT 24
10279: PUSH
10280: LD_INT 25
10282: PUSH
10283: LD_INT 26
10285: PUSH
10286: LD_INT 28
10288: PUSH
10289: LD_INT 30
10291: PUSH
10292: LD_INT 31
10294: PUSH
10295: LD_INT 32
10297: PUSH
10298: LD_INT 34
10300: PUSH
10301: LD_INT 36
10303: PUSH
10304: EMPTY
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: LIST
10316: LIST
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: LIST
10326: LIST
10327: LIST
10328: LIST
10329: LIST
10330: LIST
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: LIST
10336: PUSH
10337: LD_INT 101
10339: PUSH
10340: LD_INT 102
10342: PUSH
10343: LD_INT 103
10345: PUSH
10346: LD_INT 104
10348: PUSH
10349: LD_INT 105
10351: PUSH
10352: LD_INT 106
10354: PUSH
10355: LD_INT 107
10357: PUSH
10358: LD_INT 108
10360: PUSH
10361: LD_INT 109
10363: PUSH
10364: LD_INT 110
10366: PUSH
10367: LD_INT 111
10369: PUSH
10370: LD_INT 112
10372: PUSH
10373: LD_INT 114
10375: PUSH
10376: LD_INT 116
10378: PUSH
10379: LD_INT 117
10381: PUSH
10382: LD_INT 118
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: LIST
10399: LIST
10400: LIST
10401: LIST
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: ST_TO_ADDR
10407: GO 12090
10409: LD_INT 12
10411: DOUBLE
10412: EQUAL
10413: IFTRUE 10417
10415: GO 10637
10417: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
10418: LD_ADDR_VAR 0 2
10422: PUSH
10423: LD_INT 1
10425: PUSH
10426: LD_INT 2
10428: PUSH
10429: LD_INT 3
10431: PUSH
10432: LD_INT 4
10434: PUSH
10435: LD_INT 5
10437: PUSH
10438: LD_INT 6
10440: PUSH
10441: LD_INT 7
10443: PUSH
10444: LD_INT 8
10446: PUSH
10447: LD_INT 9
10449: PUSH
10450: LD_INT 10
10452: PUSH
10453: LD_INT 11
10455: PUSH
10456: LD_INT 12
10458: PUSH
10459: LD_INT 13
10461: PUSH
10462: LD_INT 14
10464: PUSH
10465: LD_INT 15
10467: PUSH
10468: LD_INT 16
10470: PUSH
10471: LD_INT 17
10473: PUSH
10474: LD_INT 18
10476: PUSH
10477: LD_INT 19
10479: PUSH
10480: LD_INT 20
10482: PUSH
10483: LD_INT 21
10485: PUSH
10486: LD_INT 22
10488: PUSH
10489: LD_INT 23
10491: PUSH
10492: LD_INT 24
10494: PUSH
10495: LD_INT 25
10497: PUSH
10498: LD_INT 26
10500: PUSH
10501: LD_INT 27
10503: PUSH
10504: LD_INT 28
10506: PUSH
10507: LD_INT 30
10509: PUSH
10510: LD_INT 31
10512: PUSH
10513: LD_INT 32
10515: PUSH
10516: LD_INT 33
10518: PUSH
10519: LD_INT 34
10521: PUSH
10522: LD_INT 36
10524: PUSH
10525: EMPTY
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: LIST
10546: LIST
10547: LIST
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: LIST
10557: LIST
10558: LIST
10559: LIST
10560: PUSH
10561: LD_INT 101
10563: PUSH
10564: LD_INT 102
10566: PUSH
10567: LD_INT 103
10569: PUSH
10570: LD_INT 104
10572: PUSH
10573: LD_INT 105
10575: PUSH
10576: LD_INT 106
10578: PUSH
10579: LD_INT 107
10581: PUSH
10582: LD_INT 108
10584: PUSH
10585: LD_INT 109
10587: PUSH
10588: LD_INT 110
10590: PUSH
10591: LD_INT 111
10593: PUSH
10594: LD_INT 112
10596: PUSH
10597: LD_INT 113
10599: PUSH
10600: LD_INT 114
10602: PUSH
10603: LD_INT 116
10605: PUSH
10606: LD_INT 117
10608: PUSH
10609: LD_INT 118
10611: PUSH
10612: EMPTY
10613: LIST
10614: LIST
10615: LIST
10616: LIST
10617: LIST
10618: LIST
10619: LIST
10620: LIST
10621: LIST
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: LIST
10627: LIST
10628: LIST
10629: LIST
10630: PUSH
10631: EMPTY
10632: LIST
10633: LIST
10634: ST_TO_ADDR
10635: GO 12090
10637: LD_INT 13
10639: DOUBLE
10640: EQUAL
10641: IFTRUE 10645
10643: GO 10853
10645: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
10646: LD_ADDR_VAR 0 2
10650: PUSH
10651: LD_INT 1
10653: PUSH
10654: LD_INT 2
10656: PUSH
10657: LD_INT 3
10659: PUSH
10660: LD_INT 4
10662: PUSH
10663: LD_INT 5
10665: PUSH
10666: LD_INT 8
10668: PUSH
10669: LD_INT 9
10671: PUSH
10672: LD_INT 10
10674: PUSH
10675: LD_INT 11
10677: PUSH
10678: LD_INT 12
10680: PUSH
10681: LD_INT 14
10683: PUSH
10684: LD_INT 15
10686: PUSH
10687: LD_INT 16
10689: PUSH
10690: LD_INT 17
10692: PUSH
10693: LD_INT 18
10695: PUSH
10696: LD_INT 19
10698: PUSH
10699: LD_INT 20
10701: PUSH
10702: LD_INT 21
10704: PUSH
10705: LD_INT 22
10707: PUSH
10708: LD_INT 23
10710: PUSH
10711: LD_INT 24
10713: PUSH
10714: LD_INT 25
10716: PUSH
10717: LD_INT 26
10719: PUSH
10720: LD_INT 27
10722: PUSH
10723: LD_INT 28
10725: PUSH
10726: LD_INT 30
10728: PUSH
10729: LD_INT 31
10731: PUSH
10732: LD_INT 32
10734: PUSH
10735: LD_INT 33
10737: PUSH
10738: LD_INT 34
10740: PUSH
10741: LD_INT 36
10743: PUSH
10744: EMPTY
10745: LIST
10746: LIST
10747: LIST
10748: LIST
10749: LIST
10750: LIST
10751: LIST
10752: LIST
10753: LIST
10754: LIST
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: LIST
10761: LIST
10762: LIST
10763: LIST
10764: LIST
10765: LIST
10766: LIST
10767: LIST
10768: LIST
10769: LIST
10770: LIST
10771: LIST
10772: LIST
10773: LIST
10774: LIST
10775: LIST
10776: PUSH
10777: LD_INT 101
10779: PUSH
10780: LD_INT 102
10782: PUSH
10783: LD_INT 103
10785: PUSH
10786: LD_INT 104
10788: PUSH
10789: LD_INT 105
10791: PUSH
10792: LD_INT 106
10794: PUSH
10795: LD_INT 107
10797: PUSH
10798: LD_INT 108
10800: PUSH
10801: LD_INT 109
10803: PUSH
10804: LD_INT 110
10806: PUSH
10807: LD_INT 111
10809: PUSH
10810: LD_INT 112
10812: PUSH
10813: LD_INT 113
10815: PUSH
10816: LD_INT 114
10818: PUSH
10819: LD_INT 116
10821: PUSH
10822: LD_INT 117
10824: PUSH
10825: LD_INT 118
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: PUSH
10847: EMPTY
10848: LIST
10849: LIST
10850: ST_TO_ADDR
10851: GO 12090
10853: LD_INT 14
10855: DOUBLE
10856: EQUAL
10857: IFTRUE 10861
10859: GO 11085
10861: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
10862: LD_ADDR_VAR 0 2
10866: PUSH
10867: LD_INT 1
10869: PUSH
10870: LD_INT 2
10872: PUSH
10873: LD_INT 3
10875: PUSH
10876: LD_INT 4
10878: PUSH
10879: LD_INT 5
10881: PUSH
10882: LD_INT 6
10884: PUSH
10885: LD_INT 7
10887: PUSH
10888: LD_INT 8
10890: PUSH
10891: LD_INT 9
10893: PUSH
10894: LD_INT 10
10896: PUSH
10897: LD_INT 11
10899: PUSH
10900: LD_INT 12
10902: PUSH
10903: LD_INT 13
10905: PUSH
10906: LD_INT 14
10908: PUSH
10909: LD_INT 15
10911: PUSH
10912: LD_INT 16
10914: PUSH
10915: LD_INT 17
10917: PUSH
10918: LD_INT 18
10920: PUSH
10921: LD_INT 19
10923: PUSH
10924: LD_INT 20
10926: PUSH
10927: LD_INT 21
10929: PUSH
10930: LD_INT 22
10932: PUSH
10933: LD_INT 23
10935: PUSH
10936: LD_INT 24
10938: PUSH
10939: LD_INT 25
10941: PUSH
10942: LD_INT 26
10944: PUSH
10945: LD_INT 27
10947: PUSH
10948: LD_INT 28
10950: PUSH
10951: LD_INT 29
10953: PUSH
10954: LD_INT 30
10956: PUSH
10957: LD_INT 31
10959: PUSH
10960: LD_INT 32
10962: PUSH
10963: LD_INT 33
10965: PUSH
10966: LD_INT 34
10968: PUSH
10969: LD_INT 36
10971: PUSH
10972: EMPTY
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: LIST
10999: LIST
11000: LIST
11001: LIST
11002: LIST
11003: LIST
11004: LIST
11005: LIST
11006: LIST
11007: LIST
11008: PUSH
11009: LD_INT 101
11011: PUSH
11012: LD_INT 102
11014: PUSH
11015: LD_INT 103
11017: PUSH
11018: LD_INT 104
11020: PUSH
11021: LD_INT 105
11023: PUSH
11024: LD_INT 106
11026: PUSH
11027: LD_INT 107
11029: PUSH
11030: LD_INT 108
11032: PUSH
11033: LD_INT 109
11035: PUSH
11036: LD_INT 110
11038: PUSH
11039: LD_INT 111
11041: PUSH
11042: LD_INT 112
11044: PUSH
11045: LD_INT 113
11047: PUSH
11048: LD_INT 114
11050: PUSH
11051: LD_INT 116
11053: PUSH
11054: LD_INT 117
11056: PUSH
11057: LD_INT 118
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: LIST
11071: LIST
11072: LIST
11073: LIST
11074: LIST
11075: LIST
11076: LIST
11077: LIST
11078: PUSH
11079: EMPTY
11080: LIST
11081: LIST
11082: ST_TO_ADDR
11083: GO 12090
11085: LD_INT 15
11087: DOUBLE
11088: EQUAL
11089: IFTRUE 11093
11091: GO 11317
11093: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11094: LD_ADDR_VAR 0 2
11098: PUSH
11099: LD_INT 1
11101: PUSH
11102: LD_INT 2
11104: PUSH
11105: LD_INT 3
11107: PUSH
11108: LD_INT 4
11110: PUSH
11111: LD_INT 5
11113: PUSH
11114: LD_INT 6
11116: PUSH
11117: LD_INT 7
11119: PUSH
11120: LD_INT 8
11122: PUSH
11123: LD_INT 9
11125: PUSH
11126: LD_INT 10
11128: PUSH
11129: LD_INT 11
11131: PUSH
11132: LD_INT 12
11134: PUSH
11135: LD_INT 13
11137: PUSH
11138: LD_INT 14
11140: PUSH
11141: LD_INT 15
11143: PUSH
11144: LD_INT 16
11146: PUSH
11147: LD_INT 17
11149: PUSH
11150: LD_INT 18
11152: PUSH
11153: LD_INT 19
11155: PUSH
11156: LD_INT 20
11158: PUSH
11159: LD_INT 21
11161: PUSH
11162: LD_INT 22
11164: PUSH
11165: LD_INT 23
11167: PUSH
11168: LD_INT 24
11170: PUSH
11171: LD_INT 25
11173: PUSH
11174: LD_INT 26
11176: PUSH
11177: LD_INT 27
11179: PUSH
11180: LD_INT 28
11182: PUSH
11183: LD_INT 29
11185: PUSH
11186: LD_INT 30
11188: PUSH
11189: LD_INT 31
11191: PUSH
11192: LD_INT 32
11194: PUSH
11195: LD_INT 33
11197: PUSH
11198: LD_INT 34
11200: PUSH
11201: LD_INT 36
11203: PUSH
11204: EMPTY
11205: LIST
11206: LIST
11207: LIST
11208: LIST
11209: LIST
11210: LIST
11211: LIST
11212: LIST
11213: LIST
11214: LIST
11215: LIST
11216: LIST
11217: LIST
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: LIST
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: LIST
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: PUSH
11241: LD_INT 101
11243: PUSH
11244: LD_INT 102
11246: PUSH
11247: LD_INT 103
11249: PUSH
11250: LD_INT 104
11252: PUSH
11253: LD_INT 105
11255: PUSH
11256: LD_INT 106
11258: PUSH
11259: LD_INT 107
11261: PUSH
11262: LD_INT 108
11264: PUSH
11265: LD_INT 109
11267: PUSH
11268: LD_INT 110
11270: PUSH
11271: LD_INT 111
11273: PUSH
11274: LD_INT 112
11276: PUSH
11277: LD_INT 113
11279: PUSH
11280: LD_INT 114
11282: PUSH
11283: LD_INT 116
11285: PUSH
11286: LD_INT 117
11288: PUSH
11289: LD_INT 118
11291: PUSH
11292: EMPTY
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: LIST
11300: LIST
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: LIST
11306: LIST
11307: LIST
11308: LIST
11309: LIST
11310: PUSH
11311: EMPTY
11312: LIST
11313: LIST
11314: ST_TO_ADDR
11315: GO 12090
11317: LD_INT 16
11319: DOUBLE
11320: EQUAL
11321: IFTRUE 11325
11323: GO 11461
11325: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11326: LD_ADDR_VAR 0 2
11330: PUSH
11331: LD_INT 2
11333: PUSH
11334: LD_INT 4
11336: PUSH
11337: LD_INT 5
11339: PUSH
11340: LD_INT 7
11342: PUSH
11343: LD_INT 11
11345: PUSH
11346: LD_INT 12
11348: PUSH
11349: LD_INT 15
11351: PUSH
11352: LD_INT 16
11354: PUSH
11355: LD_INT 20
11357: PUSH
11358: LD_INT 21
11360: PUSH
11361: LD_INT 22
11363: PUSH
11364: LD_INT 23
11366: PUSH
11367: LD_INT 25
11369: PUSH
11370: LD_INT 26
11372: PUSH
11373: LD_INT 30
11375: PUSH
11376: LD_INT 31
11378: PUSH
11379: LD_INT 32
11381: PUSH
11382: LD_INT 33
11384: PUSH
11385: LD_INT 34
11387: PUSH
11388: EMPTY
11389: LIST
11390: LIST
11391: LIST
11392: LIST
11393: LIST
11394: LIST
11395: LIST
11396: LIST
11397: LIST
11398: LIST
11399: LIST
11400: LIST
11401: LIST
11402: LIST
11403: LIST
11404: LIST
11405: LIST
11406: LIST
11407: LIST
11408: PUSH
11409: LD_INT 101
11411: PUSH
11412: LD_INT 102
11414: PUSH
11415: LD_INT 103
11417: PUSH
11418: LD_INT 106
11420: PUSH
11421: LD_INT 108
11423: PUSH
11424: LD_INT 112
11426: PUSH
11427: LD_INT 113
11429: PUSH
11430: LD_INT 114
11432: PUSH
11433: LD_INT 116
11435: PUSH
11436: LD_INT 117
11438: PUSH
11439: LD_INT 118
11441: PUSH
11442: EMPTY
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: PUSH
11455: EMPTY
11456: LIST
11457: LIST
11458: ST_TO_ADDR
11459: GO 12090
11461: LD_INT 17
11463: DOUBLE
11464: EQUAL
11465: IFTRUE 11469
11467: GO 11693
11469: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
11470: LD_ADDR_VAR 0 2
11474: PUSH
11475: LD_INT 1
11477: PUSH
11478: LD_INT 2
11480: PUSH
11481: LD_INT 3
11483: PUSH
11484: LD_INT 4
11486: PUSH
11487: LD_INT 5
11489: PUSH
11490: LD_INT 6
11492: PUSH
11493: LD_INT 7
11495: PUSH
11496: LD_INT 8
11498: PUSH
11499: LD_INT 9
11501: PUSH
11502: LD_INT 10
11504: PUSH
11505: LD_INT 11
11507: PUSH
11508: LD_INT 12
11510: PUSH
11511: LD_INT 13
11513: PUSH
11514: LD_INT 14
11516: PUSH
11517: LD_INT 15
11519: PUSH
11520: LD_INT 16
11522: PUSH
11523: LD_INT 17
11525: PUSH
11526: LD_INT 18
11528: PUSH
11529: LD_INT 19
11531: PUSH
11532: LD_INT 20
11534: PUSH
11535: LD_INT 21
11537: PUSH
11538: LD_INT 22
11540: PUSH
11541: LD_INT 23
11543: PUSH
11544: LD_INT 24
11546: PUSH
11547: LD_INT 25
11549: PUSH
11550: LD_INT 26
11552: PUSH
11553: LD_INT 27
11555: PUSH
11556: LD_INT 28
11558: PUSH
11559: LD_INT 29
11561: PUSH
11562: LD_INT 30
11564: PUSH
11565: LD_INT 31
11567: PUSH
11568: LD_INT 32
11570: PUSH
11571: LD_INT 33
11573: PUSH
11574: LD_INT 34
11576: PUSH
11577: LD_INT 36
11579: PUSH
11580: EMPTY
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: LIST
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: LIST
11607: LIST
11608: LIST
11609: LIST
11610: LIST
11611: LIST
11612: LIST
11613: LIST
11614: LIST
11615: LIST
11616: PUSH
11617: LD_INT 101
11619: PUSH
11620: LD_INT 102
11622: PUSH
11623: LD_INT 103
11625: PUSH
11626: LD_INT 104
11628: PUSH
11629: LD_INT 105
11631: PUSH
11632: LD_INT 106
11634: PUSH
11635: LD_INT 107
11637: PUSH
11638: LD_INT 108
11640: PUSH
11641: LD_INT 109
11643: PUSH
11644: LD_INT 110
11646: PUSH
11647: LD_INT 111
11649: PUSH
11650: LD_INT 112
11652: PUSH
11653: LD_INT 113
11655: PUSH
11656: LD_INT 114
11658: PUSH
11659: LD_INT 116
11661: PUSH
11662: LD_INT 117
11664: PUSH
11665: LD_INT 118
11667: PUSH
11668: EMPTY
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: LIST
11679: LIST
11680: LIST
11681: LIST
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: PUSH
11687: EMPTY
11688: LIST
11689: LIST
11690: ST_TO_ADDR
11691: GO 12090
11693: LD_INT 18
11695: DOUBLE
11696: EQUAL
11697: IFTRUE 11701
11699: GO 11849
11701: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
11702: LD_ADDR_VAR 0 2
11706: PUSH
11707: LD_INT 2
11709: PUSH
11710: LD_INT 4
11712: PUSH
11713: LD_INT 5
11715: PUSH
11716: LD_INT 7
11718: PUSH
11719: LD_INT 11
11721: PUSH
11722: LD_INT 12
11724: PUSH
11725: LD_INT 15
11727: PUSH
11728: LD_INT 16
11730: PUSH
11731: LD_INT 20
11733: PUSH
11734: LD_INT 21
11736: PUSH
11737: LD_INT 22
11739: PUSH
11740: LD_INT 23
11742: PUSH
11743: LD_INT 25
11745: PUSH
11746: LD_INT 26
11748: PUSH
11749: LD_INT 30
11751: PUSH
11752: LD_INT 31
11754: PUSH
11755: LD_INT 32
11757: PUSH
11758: LD_INT 33
11760: PUSH
11761: LD_INT 34
11763: PUSH
11764: LD_INT 35
11766: PUSH
11767: LD_INT 36
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: PUSH
11793: LD_INT 101
11795: PUSH
11796: LD_INT 102
11798: PUSH
11799: LD_INT 103
11801: PUSH
11802: LD_INT 106
11804: PUSH
11805: LD_INT 108
11807: PUSH
11808: LD_INT 112
11810: PUSH
11811: LD_INT 113
11813: PUSH
11814: LD_INT 114
11816: PUSH
11817: LD_INT 115
11819: PUSH
11820: LD_INT 116
11822: PUSH
11823: LD_INT 117
11825: PUSH
11826: LD_INT 118
11828: PUSH
11829: EMPTY
11830: LIST
11831: LIST
11832: LIST
11833: LIST
11834: LIST
11835: LIST
11836: LIST
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: PUSH
11843: EMPTY
11844: LIST
11845: LIST
11846: ST_TO_ADDR
11847: GO 12090
11849: LD_INT 19
11851: DOUBLE
11852: EQUAL
11853: IFTRUE 11857
11855: GO 12089
11857: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
11858: LD_ADDR_VAR 0 2
11862: PUSH
11863: LD_INT 1
11865: PUSH
11866: LD_INT 2
11868: PUSH
11869: LD_INT 3
11871: PUSH
11872: LD_INT 4
11874: PUSH
11875: LD_INT 5
11877: PUSH
11878: LD_INT 6
11880: PUSH
11881: LD_INT 7
11883: PUSH
11884: LD_INT 8
11886: PUSH
11887: LD_INT 9
11889: PUSH
11890: LD_INT 10
11892: PUSH
11893: LD_INT 11
11895: PUSH
11896: LD_INT 12
11898: PUSH
11899: LD_INT 13
11901: PUSH
11902: LD_INT 14
11904: PUSH
11905: LD_INT 15
11907: PUSH
11908: LD_INT 16
11910: PUSH
11911: LD_INT 17
11913: PUSH
11914: LD_INT 18
11916: PUSH
11917: LD_INT 19
11919: PUSH
11920: LD_INT 20
11922: PUSH
11923: LD_INT 21
11925: PUSH
11926: LD_INT 22
11928: PUSH
11929: LD_INT 23
11931: PUSH
11932: LD_INT 24
11934: PUSH
11935: LD_INT 25
11937: PUSH
11938: LD_INT 26
11940: PUSH
11941: LD_INT 27
11943: PUSH
11944: LD_INT 28
11946: PUSH
11947: LD_INT 29
11949: PUSH
11950: LD_INT 30
11952: PUSH
11953: LD_INT 31
11955: PUSH
11956: LD_INT 32
11958: PUSH
11959: LD_INT 33
11961: PUSH
11962: LD_INT 34
11964: PUSH
11965: LD_INT 35
11967: PUSH
11968: LD_INT 36
11970: PUSH
11971: EMPTY
11972: LIST
11973: LIST
11974: LIST
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: LIST
11999: LIST
12000: LIST
12001: LIST
12002: LIST
12003: LIST
12004: LIST
12005: LIST
12006: LIST
12007: LIST
12008: PUSH
12009: LD_INT 101
12011: PUSH
12012: LD_INT 102
12014: PUSH
12015: LD_INT 103
12017: PUSH
12018: LD_INT 104
12020: PUSH
12021: LD_INT 105
12023: PUSH
12024: LD_INT 106
12026: PUSH
12027: LD_INT 107
12029: PUSH
12030: LD_INT 108
12032: PUSH
12033: LD_INT 109
12035: PUSH
12036: LD_INT 110
12038: PUSH
12039: LD_INT 111
12041: PUSH
12042: LD_INT 112
12044: PUSH
12045: LD_INT 113
12047: PUSH
12048: LD_INT 114
12050: PUSH
12051: LD_INT 115
12053: PUSH
12054: LD_INT 116
12056: PUSH
12057: LD_INT 117
12059: PUSH
12060: LD_INT 118
12062: PUSH
12063: EMPTY
12064: LIST
12065: LIST
12066: LIST
12067: LIST
12068: LIST
12069: LIST
12070: LIST
12071: LIST
12072: LIST
12073: LIST
12074: LIST
12075: LIST
12076: LIST
12077: LIST
12078: LIST
12079: LIST
12080: LIST
12081: LIST
12082: PUSH
12083: EMPTY
12084: LIST
12085: LIST
12086: ST_TO_ADDR
12087: GO 12090
12089: POP
// end else
12090: GO 12321
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12092: LD_ADDR_VAR 0 2
12096: PUSH
12097: LD_INT 1
12099: PUSH
12100: LD_INT 2
12102: PUSH
12103: LD_INT 3
12105: PUSH
12106: LD_INT 4
12108: PUSH
12109: LD_INT 5
12111: PUSH
12112: LD_INT 6
12114: PUSH
12115: LD_INT 7
12117: PUSH
12118: LD_INT 8
12120: PUSH
12121: LD_INT 9
12123: PUSH
12124: LD_INT 10
12126: PUSH
12127: LD_INT 11
12129: PUSH
12130: LD_INT 12
12132: PUSH
12133: LD_INT 13
12135: PUSH
12136: LD_INT 14
12138: PUSH
12139: LD_INT 15
12141: PUSH
12142: LD_INT 16
12144: PUSH
12145: LD_INT 17
12147: PUSH
12148: LD_INT 18
12150: PUSH
12151: LD_INT 19
12153: PUSH
12154: LD_INT 20
12156: PUSH
12157: LD_INT 21
12159: PUSH
12160: LD_INT 22
12162: PUSH
12163: LD_INT 23
12165: PUSH
12166: LD_INT 24
12168: PUSH
12169: LD_INT 25
12171: PUSH
12172: LD_INT 26
12174: PUSH
12175: LD_INT 27
12177: PUSH
12178: LD_INT 28
12180: PUSH
12181: LD_INT 29
12183: PUSH
12184: LD_INT 30
12186: PUSH
12187: LD_INT 31
12189: PUSH
12190: LD_INT 32
12192: PUSH
12193: LD_INT 33
12195: PUSH
12196: LD_INT 34
12198: PUSH
12199: LD_INT 35
12201: PUSH
12202: LD_INT 36
12204: PUSH
12205: EMPTY
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: LIST
12233: LIST
12234: LIST
12235: LIST
12236: LIST
12237: LIST
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: PUSH
12243: LD_INT 101
12245: PUSH
12246: LD_INT 102
12248: PUSH
12249: LD_INT 103
12251: PUSH
12252: LD_INT 104
12254: PUSH
12255: LD_INT 105
12257: PUSH
12258: LD_INT 106
12260: PUSH
12261: LD_INT 107
12263: PUSH
12264: LD_INT 108
12266: PUSH
12267: LD_INT 109
12269: PUSH
12270: LD_INT 110
12272: PUSH
12273: LD_INT 111
12275: PUSH
12276: LD_INT 112
12278: PUSH
12279: LD_INT 113
12281: PUSH
12282: LD_INT 114
12284: PUSH
12285: LD_INT 115
12287: PUSH
12288: LD_INT 116
12290: PUSH
12291: LD_INT 117
12293: PUSH
12294: LD_INT 118
12296: PUSH
12297: EMPTY
12298: LIST
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: LIST
12307: LIST
12308: LIST
12309: LIST
12310: LIST
12311: LIST
12312: LIST
12313: LIST
12314: LIST
12315: LIST
12316: PUSH
12317: EMPTY
12318: LIST
12319: LIST
12320: ST_TO_ADDR
// if result then
12321: LD_VAR 0 2
12325: IFFALSE 13111
// begin normal :=  ;
12327: LD_ADDR_VAR 0 5
12331: PUSH
12332: LD_STRING 
12334: ST_TO_ADDR
// hardcore :=  ;
12335: LD_ADDR_VAR 0 6
12339: PUSH
12340: LD_STRING 
12342: ST_TO_ADDR
// active :=  ;
12343: LD_ADDR_VAR 0 7
12347: PUSH
12348: LD_STRING 
12350: ST_TO_ADDR
// for i = 1 to normalCounter do
12351: LD_ADDR_VAR 0 8
12355: PUSH
12356: DOUBLE
12357: LD_INT 1
12359: DEC
12360: ST_TO_ADDR
12361: LD_EXP 30
12365: PUSH
12366: FOR_TO
12367: IFFALSE 12468
// begin tmp := 0 ;
12369: LD_ADDR_VAR 0 3
12373: PUSH
12374: LD_STRING 0
12376: ST_TO_ADDR
// if result [ 1 ] then
12377: LD_VAR 0 2
12381: PUSH
12382: LD_INT 1
12384: ARRAY
12385: IFFALSE 12450
// if result [ 1 ] [ 1 ] = i then
12387: LD_VAR 0 2
12391: PUSH
12392: LD_INT 1
12394: ARRAY
12395: PUSH
12396: LD_INT 1
12398: ARRAY
12399: PUSH
12400: LD_VAR 0 8
12404: EQUAL
12405: IFFALSE 12450
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12407: LD_ADDR_VAR 0 2
12411: PUSH
12412: LD_VAR 0 2
12416: PPUSH
12417: LD_INT 1
12419: PPUSH
12420: LD_VAR 0 2
12424: PUSH
12425: LD_INT 1
12427: ARRAY
12428: PPUSH
12429: LD_INT 1
12431: PPUSH
12432: CALL_OW 3
12436: PPUSH
12437: CALL_OW 1
12441: ST_TO_ADDR
// tmp := 1 ;
12442: LD_ADDR_VAR 0 3
12446: PUSH
12447: LD_STRING 1
12449: ST_TO_ADDR
// end ; normal := normal & tmp ;
12450: LD_ADDR_VAR 0 5
12454: PUSH
12455: LD_VAR 0 5
12459: PUSH
12460: LD_VAR 0 3
12464: STR
12465: ST_TO_ADDR
// end ;
12466: GO 12366
12468: POP
12469: POP
// for i = 1 to hardcoreCounter do
12470: LD_ADDR_VAR 0 8
12474: PUSH
12475: DOUBLE
12476: LD_INT 1
12478: DEC
12479: ST_TO_ADDR
12480: LD_EXP 31
12484: PUSH
12485: FOR_TO
12486: IFFALSE 12591
// begin tmp := 0 ;
12488: LD_ADDR_VAR 0 3
12492: PUSH
12493: LD_STRING 0
12495: ST_TO_ADDR
// if result [ 2 ] then
12496: LD_VAR 0 2
12500: PUSH
12501: LD_INT 2
12503: ARRAY
12504: IFFALSE 12573
// if result [ 2 ] [ 1 ] = 100 + i then
12506: LD_VAR 0 2
12510: PUSH
12511: LD_INT 2
12513: ARRAY
12514: PUSH
12515: LD_INT 1
12517: ARRAY
12518: PUSH
12519: LD_INT 100
12521: PUSH
12522: LD_VAR 0 8
12526: PLUS
12527: EQUAL
12528: IFFALSE 12573
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12530: LD_ADDR_VAR 0 2
12534: PUSH
12535: LD_VAR 0 2
12539: PPUSH
12540: LD_INT 2
12542: PPUSH
12543: LD_VAR 0 2
12547: PUSH
12548: LD_INT 2
12550: ARRAY
12551: PPUSH
12552: LD_INT 1
12554: PPUSH
12555: CALL_OW 3
12559: PPUSH
12560: CALL_OW 1
12564: ST_TO_ADDR
// tmp := 1 ;
12565: LD_ADDR_VAR 0 3
12569: PUSH
12570: LD_STRING 1
12572: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12573: LD_ADDR_VAR 0 6
12577: PUSH
12578: LD_VAR 0 6
12582: PUSH
12583: LD_VAR 0 3
12587: STR
12588: ST_TO_ADDR
// end ;
12589: GO 12485
12591: POP
12592: POP
// if isGameLoad then
12593: LD_VAR 0 1
12597: IFFALSE 13072
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
12599: LD_ADDR_VAR 0 4
12603: PUSH
12604: LD_EXP 34
12608: PUSH
12609: LD_EXP 33
12613: PUSH
12614: LD_EXP 35
12618: PUSH
12619: LD_EXP 32
12623: PUSH
12624: LD_EXP 36
12628: PUSH
12629: LD_EXP 37
12633: PUSH
12634: LD_EXP 38
12638: PUSH
12639: LD_EXP 39
12643: PUSH
12644: LD_EXP 40
12648: PUSH
12649: LD_EXP 41
12653: PUSH
12654: LD_EXP 42
12658: PUSH
12659: LD_EXP 43
12663: PUSH
12664: LD_EXP 44
12668: PUSH
12669: LD_EXP 45
12673: PUSH
12674: LD_EXP 53
12678: PUSH
12679: LD_EXP 54
12683: PUSH
12684: LD_EXP 55
12688: PUSH
12689: LD_EXP 56
12693: PUSH
12694: LD_EXP 58
12698: PUSH
12699: LD_EXP 59
12703: PUSH
12704: LD_EXP 60
12708: PUSH
12709: LD_EXP 63
12713: PUSH
12714: LD_EXP 65
12718: PUSH
12719: LD_EXP 66
12723: PUSH
12724: LD_EXP 67
12728: PUSH
12729: LD_EXP 69
12733: PUSH
12734: LD_EXP 70
12738: PUSH
12739: LD_EXP 73
12743: PUSH
12744: LD_EXP 74
12748: PUSH
12749: LD_EXP 75
12753: PUSH
12754: LD_EXP 76
12758: PUSH
12759: LD_EXP 77
12763: PUSH
12764: LD_EXP 78
12768: PUSH
12769: LD_EXP 79
12773: PUSH
12774: LD_EXP 80
12778: PUSH
12779: LD_EXP 81
12783: PUSH
12784: LD_EXP 46
12788: PUSH
12789: LD_EXP 47
12793: PUSH
12794: LD_EXP 50
12798: PUSH
12799: LD_EXP 51
12803: PUSH
12804: LD_EXP 52
12808: PUSH
12809: LD_EXP 48
12813: PUSH
12814: LD_EXP 49
12818: PUSH
12819: LD_EXP 57
12823: PUSH
12824: LD_EXP 61
12828: PUSH
12829: LD_EXP 62
12833: PUSH
12834: LD_EXP 64
12838: PUSH
12839: LD_EXP 68
12843: PUSH
12844: LD_EXP 71
12848: PUSH
12849: LD_EXP 72
12853: PUSH
12854: LD_EXP 82
12858: PUSH
12859: LD_EXP 83
12863: PUSH
12864: LD_EXP 84
12868: PUSH
12869: LD_EXP 85
12873: PUSH
12874: EMPTY
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: LIST
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: LIST
12908: LIST
12909: LIST
12910: LIST
12911: LIST
12912: LIST
12913: LIST
12914: LIST
12915: LIST
12916: LIST
12917: LIST
12918: LIST
12919: LIST
12920: LIST
12921: LIST
12922: LIST
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: LIST
12928: LIST
12929: ST_TO_ADDR
// tmp :=  ;
12930: LD_ADDR_VAR 0 3
12934: PUSH
12935: LD_STRING 
12937: ST_TO_ADDR
// for i = 1 to normalCounter do
12938: LD_ADDR_VAR 0 8
12942: PUSH
12943: DOUBLE
12944: LD_INT 1
12946: DEC
12947: ST_TO_ADDR
12948: LD_EXP 30
12952: PUSH
12953: FOR_TO
12954: IFFALSE 12990
// begin if flags [ i ] then
12956: LD_VAR 0 4
12960: PUSH
12961: LD_VAR 0 8
12965: ARRAY
12966: IFFALSE 12988
// tmp := tmp & i & ; ;
12968: LD_ADDR_VAR 0 3
12972: PUSH
12973: LD_VAR 0 3
12977: PUSH
12978: LD_VAR 0 8
12982: STR
12983: PUSH
12984: LD_STRING ;
12986: STR
12987: ST_TO_ADDR
// end ;
12988: GO 12953
12990: POP
12991: POP
// for i = 1 to hardcoreCounter do
12992: LD_ADDR_VAR 0 8
12996: PUSH
12997: DOUBLE
12998: LD_INT 1
13000: DEC
13001: ST_TO_ADDR
13002: LD_EXP 31
13006: PUSH
13007: FOR_TO
13008: IFFALSE 13054
// begin if flags [ normalCounter + i ] then
13010: LD_VAR 0 4
13014: PUSH
13015: LD_EXP 30
13019: PUSH
13020: LD_VAR 0 8
13024: PLUS
13025: ARRAY
13026: IFFALSE 13052
// tmp := tmp & ( 100 + i ) & ; ;
13028: LD_ADDR_VAR 0 3
13032: PUSH
13033: LD_VAR 0 3
13037: PUSH
13038: LD_INT 100
13040: PUSH
13041: LD_VAR 0 8
13045: PLUS
13046: STR
13047: PUSH
13048: LD_STRING ;
13050: STR
13051: ST_TO_ADDR
// end ;
13052: GO 13007
13054: POP
13055: POP
// if tmp then
13056: LD_VAR 0 3
13060: IFFALSE 13072
// active := tmp ;
13062: LD_ADDR_VAR 0 7
13066: PUSH
13067: LD_VAR 0 3
13071: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
13072: LD_STRING getStreamItemsFromMission("
13074: PUSH
13075: LD_VAR 0 5
13079: STR
13080: PUSH
13081: LD_STRING ","
13083: STR
13084: PUSH
13085: LD_VAR 0 6
13089: STR
13090: PUSH
13091: LD_STRING ","
13093: STR
13094: PUSH
13095: LD_VAR 0 7
13099: STR
13100: PUSH
13101: LD_STRING ")
13103: STR
13104: PPUSH
13105: CALL_OW 559
// end else
13109: GO 13118
// ToLua ( getStreamItemsFromMission("","","") ) ;
13111: LD_STRING getStreamItemsFromMission("","","")
13113: PPUSH
13114: CALL_OW 559
// end ;
13118: LD_VAR 0 2
13122: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13123: LD_EXP 29
13127: PUSH
13128: LD_EXP 34
13132: AND
13133: IFFALSE 13257
13135: GO 13137
13137: DISABLE
13138: LD_INT 0
13140: PPUSH
13141: PPUSH
// begin enable ;
13142: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13143: LD_ADDR_VAR 0 2
13147: PUSH
13148: LD_INT 22
13150: PUSH
13151: LD_OWVAR 2
13155: PUSH
13156: EMPTY
13157: LIST
13158: LIST
13159: PUSH
13160: LD_INT 2
13162: PUSH
13163: LD_INT 34
13165: PUSH
13166: LD_INT 7
13168: PUSH
13169: EMPTY
13170: LIST
13171: LIST
13172: PUSH
13173: LD_INT 34
13175: PUSH
13176: LD_INT 45
13178: PUSH
13179: EMPTY
13180: LIST
13181: LIST
13182: PUSH
13183: LD_INT 34
13185: PUSH
13186: LD_INT 28
13188: PUSH
13189: EMPTY
13190: LIST
13191: LIST
13192: PUSH
13193: LD_INT 34
13195: PUSH
13196: LD_INT 47
13198: PUSH
13199: EMPTY
13200: LIST
13201: LIST
13202: PUSH
13203: EMPTY
13204: LIST
13205: LIST
13206: LIST
13207: LIST
13208: LIST
13209: PUSH
13210: EMPTY
13211: LIST
13212: LIST
13213: PPUSH
13214: CALL_OW 69
13218: ST_TO_ADDR
// if not tmp then
13219: LD_VAR 0 2
13223: NOT
13224: IFFALSE 13228
// exit ;
13226: GO 13257
// for i in tmp do
13228: LD_ADDR_VAR 0 1
13232: PUSH
13233: LD_VAR 0 2
13237: PUSH
13238: FOR_IN
13239: IFFALSE 13255
// begin SetLives ( i , 0 ) ;
13241: LD_VAR 0 1
13245: PPUSH
13246: LD_INT 0
13248: PPUSH
13249: CALL_OW 234
// end ;
13253: GO 13238
13255: POP
13256: POP
// end ;
13257: PPOPN 2
13259: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13260: LD_EXP 29
13264: PUSH
13265: LD_EXP 35
13269: AND
13270: IFFALSE 13354
13272: GO 13274
13274: DISABLE
13275: LD_INT 0
13277: PPUSH
13278: PPUSH
// begin enable ;
13279: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13280: LD_ADDR_VAR 0 2
13284: PUSH
13285: LD_INT 22
13287: PUSH
13288: LD_OWVAR 2
13292: PUSH
13293: EMPTY
13294: LIST
13295: LIST
13296: PUSH
13297: LD_INT 32
13299: PUSH
13300: LD_INT 3
13302: PUSH
13303: EMPTY
13304: LIST
13305: LIST
13306: PUSH
13307: EMPTY
13308: LIST
13309: LIST
13310: PPUSH
13311: CALL_OW 69
13315: ST_TO_ADDR
// if not tmp then
13316: LD_VAR 0 2
13320: NOT
13321: IFFALSE 13325
// exit ;
13323: GO 13354
// for i in tmp do
13325: LD_ADDR_VAR 0 1
13329: PUSH
13330: LD_VAR 0 2
13334: PUSH
13335: FOR_IN
13336: IFFALSE 13352
// begin SetLives ( i , 0 ) ;
13338: LD_VAR 0 1
13342: PPUSH
13343: LD_INT 0
13345: PPUSH
13346: CALL_OW 234
// end ;
13350: GO 13335
13352: POP
13353: POP
// end ;
13354: PPOPN 2
13356: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13357: LD_EXP 29
13361: PUSH
13362: LD_EXP 32
13366: AND
13367: IFFALSE 13460
13369: GO 13371
13371: DISABLE
13372: LD_INT 0
13374: PPUSH
// begin enable ;
13375: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13376: LD_ADDR_VAR 0 1
13380: PUSH
13381: LD_INT 22
13383: PUSH
13384: LD_OWVAR 2
13388: PUSH
13389: EMPTY
13390: LIST
13391: LIST
13392: PUSH
13393: LD_INT 2
13395: PUSH
13396: LD_INT 25
13398: PUSH
13399: LD_INT 5
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: PUSH
13406: LD_INT 25
13408: PUSH
13409: LD_INT 9
13411: PUSH
13412: EMPTY
13413: LIST
13414: LIST
13415: PUSH
13416: LD_INT 25
13418: PUSH
13419: LD_INT 8
13421: PUSH
13422: EMPTY
13423: LIST
13424: LIST
13425: PUSH
13426: EMPTY
13427: LIST
13428: LIST
13429: LIST
13430: LIST
13431: PUSH
13432: EMPTY
13433: LIST
13434: LIST
13435: PPUSH
13436: CALL_OW 69
13440: PUSH
13441: FOR_IN
13442: IFFALSE 13458
// begin SetClass ( i , 1 ) ;
13444: LD_VAR 0 1
13448: PPUSH
13449: LD_INT 1
13451: PPUSH
13452: CALL_OW 336
// end ;
13456: GO 13441
13458: POP
13459: POP
// end ;
13460: PPOPN 1
13462: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13463: LD_EXP 29
13467: PUSH
13468: LD_EXP 33
13472: AND
13473: PUSH
13474: LD_OWVAR 65
13478: PUSH
13479: LD_INT 7
13481: LESS
13482: AND
13483: IFFALSE 13497
13485: GO 13487
13487: DISABLE
// begin enable ;
13488: ENABLE
// game_speed := 7 ;
13489: LD_ADDR_OWVAR 65
13493: PUSH
13494: LD_INT 7
13496: ST_TO_ADDR
// end ;
13497: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13498: LD_EXP 29
13502: PUSH
13503: LD_EXP 36
13507: AND
13508: IFFALSE 13710
13510: GO 13512
13512: DISABLE
13513: LD_INT 0
13515: PPUSH
13516: PPUSH
13517: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13518: LD_ADDR_VAR 0 3
13522: PUSH
13523: LD_INT 81
13525: PUSH
13526: LD_OWVAR 2
13530: PUSH
13531: EMPTY
13532: LIST
13533: LIST
13534: PUSH
13535: LD_INT 21
13537: PUSH
13538: LD_INT 1
13540: PUSH
13541: EMPTY
13542: LIST
13543: LIST
13544: PUSH
13545: EMPTY
13546: LIST
13547: LIST
13548: PPUSH
13549: CALL_OW 69
13553: ST_TO_ADDR
// if not tmp then
13554: LD_VAR 0 3
13558: NOT
13559: IFFALSE 13563
// exit ;
13561: GO 13710
// if tmp > 5 then
13563: LD_VAR 0 3
13567: PUSH
13568: LD_INT 5
13570: GREATER
13571: IFFALSE 13583
// k := 5 else
13573: LD_ADDR_VAR 0 2
13577: PUSH
13578: LD_INT 5
13580: ST_TO_ADDR
13581: GO 13593
// k := tmp ;
13583: LD_ADDR_VAR 0 2
13587: PUSH
13588: LD_VAR 0 3
13592: ST_TO_ADDR
// for i := 1 to k do
13593: LD_ADDR_VAR 0 1
13597: PUSH
13598: DOUBLE
13599: LD_INT 1
13601: DEC
13602: ST_TO_ADDR
13603: LD_VAR 0 2
13607: PUSH
13608: FOR_TO
13609: IFFALSE 13708
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13611: LD_VAR 0 3
13615: PUSH
13616: LD_VAR 0 1
13620: ARRAY
13621: PPUSH
13622: LD_VAR 0 1
13626: PUSH
13627: LD_INT 4
13629: MOD
13630: PUSH
13631: LD_INT 1
13633: PLUS
13634: PPUSH
13635: CALL_OW 259
13639: PUSH
13640: LD_INT 10
13642: LESS
13643: IFFALSE 13706
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13645: LD_VAR 0 3
13649: PUSH
13650: LD_VAR 0 1
13654: ARRAY
13655: PPUSH
13656: LD_VAR 0 1
13660: PUSH
13661: LD_INT 4
13663: MOD
13664: PUSH
13665: LD_INT 1
13667: PLUS
13668: PPUSH
13669: LD_VAR 0 3
13673: PUSH
13674: LD_VAR 0 1
13678: ARRAY
13679: PPUSH
13680: LD_VAR 0 1
13684: PUSH
13685: LD_INT 4
13687: MOD
13688: PUSH
13689: LD_INT 1
13691: PLUS
13692: PPUSH
13693: CALL_OW 259
13697: PUSH
13698: LD_INT 1
13700: PLUS
13701: PPUSH
13702: CALL_OW 237
13706: GO 13608
13708: POP
13709: POP
// end ;
13710: PPOPN 3
13712: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13713: LD_EXP 29
13717: PUSH
13718: LD_EXP 37
13722: AND
13723: IFFALSE 13743
13725: GO 13727
13727: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13728: LD_INT 4
13730: PPUSH
13731: LD_OWVAR 2
13735: PPUSH
13736: LD_INT 0
13738: PPUSH
13739: CALL_OW 324
13743: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13744: LD_EXP 29
13748: PUSH
13749: LD_EXP 66
13753: AND
13754: IFFALSE 13774
13756: GO 13758
13758: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13759: LD_INT 19
13761: PPUSH
13762: LD_OWVAR 2
13766: PPUSH
13767: LD_INT 0
13769: PPUSH
13770: CALL_OW 324
13774: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13775: LD_EXP 29
13779: PUSH
13780: LD_EXP 38
13784: AND
13785: IFFALSE 13887
13787: GO 13789
13789: DISABLE
13790: LD_INT 0
13792: PPUSH
13793: PPUSH
// begin enable ;
13794: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13795: LD_ADDR_VAR 0 2
13799: PUSH
13800: LD_INT 22
13802: PUSH
13803: LD_OWVAR 2
13807: PUSH
13808: EMPTY
13809: LIST
13810: LIST
13811: PUSH
13812: LD_INT 2
13814: PUSH
13815: LD_INT 34
13817: PUSH
13818: LD_INT 11
13820: PUSH
13821: EMPTY
13822: LIST
13823: LIST
13824: PUSH
13825: LD_INT 34
13827: PUSH
13828: LD_INT 30
13830: PUSH
13831: EMPTY
13832: LIST
13833: LIST
13834: PUSH
13835: EMPTY
13836: LIST
13837: LIST
13838: LIST
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: PPUSH
13844: CALL_OW 69
13848: ST_TO_ADDR
// if not tmp then
13849: LD_VAR 0 2
13853: NOT
13854: IFFALSE 13858
// exit ;
13856: GO 13887
// for i in tmp do
13858: LD_ADDR_VAR 0 1
13862: PUSH
13863: LD_VAR 0 2
13867: PUSH
13868: FOR_IN
13869: IFFALSE 13885
// begin SetLives ( i , 0 ) ;
13871: LD_VAR 0 1
13875: PPUSH
13876: LD_INT 0
13878: PPUSH
13879: CALL_OW 234
// end ;
13883: GO 13868
13885: POP
13886: POP
// end ;
13887: PPOPN 2
13889: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13890: LD_EXP 29
13894: PUSH
13895: LD_EXP 39
13899: AND
13900: IFFALSE 13920
13902: GO 13904
13904: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13905: LD_INT 32
13907: PPUSH
13908: LD_OWVAR 2
13912: PPUSH
13913: LD_INT 0
13915: PPUSH
13916: CALL_OW 324
13920: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13921: LD_EXP 29
13925: PUSH
13926: LD_EXP 40
13930: AND
13931: IFFALSE 14112
13933: GO 13935
13935: DISABLE
13936: LD_INT 0
13938: PPUSH
13939: PPUSH
13940: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13941: LD_ADDR_VAR 0 2
13945: PUSH
13946: LD_INT 22
13948: PUSH
13949: LD_OWVAR 2
13953: PUSH
13954: EMPTY
13955: LIST
13956: LIST
13957: PUSH
13958: LD_INT 33
13960: PUSH
13961: LD_INT 3
13963: PUSH
13964: EMPTY
13965: LIST
13966: LIST
13967: PUSH
13968: EMPTY
13969: LIST
13970: LIST
13971: PPUSH
13972: CALL_OW 69
13976: ST_TO_ADDR
// if not tmp then
13977: LD_VAR 0 2
13981: NOT
13982: IFFALSE 13986
// exit ;
13984: GO 14112
// side := 0 ;
13986: LD_ADDR_VAR 0 3
13990: PUSH
13991: LD_INT 0
13993: ST_TO_ADDR
// for i := 1 to 8 do
13994: LD_ADDR_VAR 0 1
13998: PUSH
13999: DOUBLE
14000: LD_INT 1
14002: DEC
14003: ST_TO_ADDR
14004: LD_INT 8
14006: PUSH
14007: FOR_TO
14008: IFFALSE 14056
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14010: LD_OWVAR 2
14014: PUSH
14015: LD_VAR 0 1
14019: NONEQUAL
14020: PUSH
14021: LD_OWVAR 2
14025: PPUSH
14026: LD_VAR 0 1
14030: PPUSH
14031: CALL_OW 81
14035: PUSH
14036: LD_INT 2
14038: EQUAL
14039: AND
14040: IFFALSE 14054
// begin side := i ;
14042: LD_ADDR_VAR 0 3
14046: PUSH
14047: LD_VAR 0 1
14051: ST_TO_ADDR
// break ;
14052: GO 14056
// end ;
14054: GO 14007
14056: POP
14057: POP
// if not side then
14058: LD_VAR 0 3
14062: NOT
14063: IFFALSE 14067
// exit ;
14065: GO 14112
// for i := 1 to tmp do
14067: LD_ADDR_VAR 0 1
14071: PUSH
14072: DOUBLE
14073: LD_INT 1
14075: DEC
14076: ST_TO_ADDR
14077: LD_VAR 0 2
14081: PUSH
14082: FOR_TO
14083: IFFALSE 14110
// if Prob ( 60 ) then
14085: LD_INT 60
14087: PPUSH
14088: CALL_OW 13
14092: IFFALSE 14108
// SetSide ( i , side ) ;
14094: LD_VAR 0 1
14098: PPUSH
14099: LD_VAR 0 3
14103: PPUSH
14104: CALL_OW 235
14108: GO 14082
14110: POP
14111: POP
// end ;
14112: PPOPN 3
14114: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14115: LD_EXP 29
14119: PUSH
14120: LD_EXP 42
14124: AND
14125: IFFALSE 14244
14127: GO 14129
14129: DISABLE
14130: LD_INT 0
14132: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14133: LD_ADDR_VAR 0 1
14137: PUSH
14138: LD_INT 22
14140: PUSH
14141: LD_OWVAR 2
14145: PUSH
14146: EMPTY
14147: LIST
14148: LIST
14149: PUSH
14150: LD_INT 21
14152: PUSH
14153: LD_INT 1
14155: PUSH
14156: EMPTY
14157: LIST
14158: LIST
14159: PUSH
14160: LD_INT 3
14162: PUSH
14163: LD_INT 23
14165: PUSH
14166: LD_INT 0
14168: PUSH
14169: EMPTY
14170: LIST
14171: LIST
14172: PUSH
14173: EMPTY
14174: LIST
14175: LIST
14176: PUSH
14177: EMPTY
14178: LIST
14179: LIST
14180: LIST
14181: PPUSH
14182: CALL_OW 69
14186: PUSH
14187: FOR_IN
14188: IFFALSE 14242
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14190: LD_VAR 0 1
14194: PPUSH
14195: CALL_OW 257
14199: PUSH
14200: LD_INT 1
14202: PUSH
14203: LD_INT 2
14205: PUSH
14206: LD_INT 3
14208: PUSH
14209: LD_INT 4
14211: PUSH
14212: EMPTY
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: IN
14218: IFFALSE 14240
// SetClass ( un , rand ( 1 , 4 ) ) ;
14220: LD_VAR 0 1
14224: PPUSH
14225: LD_INT 1
14227: PPUSH
14228: LD_INT 4
14230: PPUSH
14231: CALL_OW 12
14235: PPUSH
14236: CALL_OW 336
14240: GO 14187
14242: POP
14243: POP
// end ;
14244: PPOPN 1
14246: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14247: LD_EXP 29
14251: PUSH
14252: LD_EXP 41
14256: AND
14257: IFFALSE 14336
14259: GO 14261
14261: DISABLE
14262: LD_INT 0
14264: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14265: LD_ADDR_VAR 0 1
14269: PUSH
14270: LD_INT 22
14272: PUSH
14273: LD_OWVAR 2
14277: PUSH
14278: EMPTY
14279: LIST
14280: LIST
14281: PUSH
14282: LD_INT 21
14284: PUSH
14285: LD_INT 3
14287: PUSH
14288: EMPTY
14289: LIST
14290: LIST
14291: PUSH
14292: EMPTY
14293: LIST
14294: LIST
14295: PPUSH
14296: CALL_OW 69
14300: ST_TO_ADDR
// if not tmp then
14301: LD_VAR 0 1
14305: NOT
14306: IFFALSE 14310
// exit ;
14308: GO 14336
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14310: LD_VAR 0 1
14314: PUSH
14315: LD_INT 1
14317: PPUSH
14318: LD_VAR 0 1
14322: PPUSH
14323: CALL_OW 12
14327: ARRAY
14328: PPUSH
14329: LD_INT 100
14331: PPUSH
14332: CALL_OW 234
// end ;
14336: PPOPN 1
14338: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14339: LD_EXP 29
14343: PUSH
14344: LD_EXP 43
14348: AND
14349: IFFALSE 14447
14351: GO 14353
14353: DISABLE
14354: LD_INT 0
14356: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14357: LD_ADDR_VAR 0 1
14361: PUSH
14362: LD_INT 22
14364: PUSH
14365: LD_OWVAR 2
14369: PUSH
14370: EMPTY
14371: LIST
14372: LIST
14373: PUSH
14374: LD_INT 21
14376: PUSH
14377: LD_INT 1
14379: PUSH
14380: EMPTY
14381: LIST
14382: LIST
14383: PUSH
14384: EMPTY
14385: LIST
14386: LIST
14387: PPUSH
14388: CALL_OW 69
14392: ST_TO_ADDR
// if not tmp then
14393: LD_VAR 0 1
14397: NOT
14398: IFFALSE 14402
// exit ;
14400: GO 14447
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14402: LD_VAR 0 1
14406: PUSH
14407: LD_INT 1
14409: PPUSH
14410: LD_VAR 0 1
14414: PPUSH
14415: CALL_OW 12
14419: ARRAY
14420: PPUSH
14421: LD_INT 1
14423: PPUSH
14424: LD_INT 4
14426: PPUSH
14427: CALL_OW 12
14431: PPUSH
14432: LD_INT 3000
14434: PPUSH
14435: LD_INT 9000
14437: PPUSH
14438: CALL_OW 12
14442: PPUSH
14443: CALL_OW 492
// end ;
14447: PPOPN 1
14449: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14450: LD_EXP 29
14454: PUSH
14455: LD_EXP 44
14459: AND
14460: IFFALSE 14480
14462: GO 14464
14464: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14465: LD_INT 1
14467: PPUSH
14468: LD_OWVAR 2
14472: PPUSH
14473: LD_INT 0
14475: PPUSH
14476: CALL_OW 324
14480: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14481: LD_EXP 29
14485: PUSH
14486: LD_EXP 45
14490: AND
14491: IFFALSE 14574
14493: GO 14495
14495: DISABLE
14496: LD_INT 0
14498: PPUSH
14499: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14500: LD_ADDR_VAR 0 2
14504: PUSH
14505: LD_INT 22
14507: PUSH
14508: LD_OWVAR 2
14512: PUSH
14513: EMPTY
14514: LIST
14515: LIST
14516: PUSH
14517: LD_INT 21
14519: PUSH
14520: LD_INT 3
14522: PUSH
14523: EMPTY
14524: LIST
14525: LIST
14526: PUSH
14527: EMPTY
14528: LIST
14529: LIST
14530: PPUSH
14531: CALL_OW 69
14535: ST_TO_ADDR
// if not tmp then
14536: LD_VAR 0 2
14540: NOT
14541: IFFALSE 14545
// exit ;
14543: GO 14574
// for i in tmp do
14545: LD_ADDR_VAR 0 1
14549: PUSH
14550: LD_VAR 0 2
14554: PUSH
14555: FOR_IN
14556: IFFALSE 14572
// SetBLevel ( i , 10 ) ;
14558: LD_VAR 0 1
14562: PPUSH
14563: LD_INT 10
14565: PPUSH
14566: CALL_OW 241
14570: GO 14555
14572: POP
14573: POP
// end ;
14574: PPOPN 2
14576: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14577: LD_EXP 29
14581: PUSH
14582: LD_EXP 46
14586: AND
14587: IFFALSE 14698
14589: GO 14591
14591: DISABLE
14592: LD_INT 0
14594: PPUSH
14595: PPUSH
14596: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14597: LD_ADDR_VAR 0 3
14601: PUSH
14602: LD_INT 22
14604: PUSH
14605: LD_OWVAR 2
14609: PUSH
14610: EMPTY
14611: LIST
14612: LIST
14613: PUSH
14614: LD_INT 25
14616: PUSH
14617: LD_INT 1
14619: PUSH
14620: EMPTY
14621: LIST
14622: LIST
14623: PUSH
14624: EMPTY
14625: LIST
14626: LIST
14627: PPUSH
14628: CALL_OW 69
14632: ST_TO_ADDR
// if not tmp then
14633: LD_VAR 0 3
14637: NOT
14638: IFFALSE 14642
// exit ;
14640: GO 14698
// un := tmp [ rand ( 1 , tmp ) ] ;
14642: LD_ADDR_VAR 0 2
14646: PUSH
14647: LD_VAR 0 3
14651: PUSH
14652: LD_INT 1
14654: PPUSH
14655: LD_VAR 0 3
14659: PPUSH
14660: CALL_OW 12
14664: ARRAY
14665: ST_TO_ADDR
// if Crawls ( un ) then
14666: LD_VAR 0 2
14670: PPUSH
14671: CALL_OW 318
14675: IFFALSE 14686
// ComWalk ( un ) ;
14677: LD_VAR 0 2
14681: PPUSH
14682: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14686: LD_VAR 0 2
14690: PPUSH
14691: LD_INT 5
14693: PPUSH
14694: CALL_OW 336
// end ;
14698: PPOPN 3
14700: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
14701: LD_EXP 29
14705: PUSH
14706: LD_EXP 47
14710: AND
14711: PUSH
14712: LD_OWVAR 67
14716: PUSH
14717: LD_INT 4
14719: LESS
14720: AND
14721: IFFALSE 14740
14723: GO 14725
14725: DISABLE
// begin Difficulty := Difficulty + 1 ;
14726: LD_ADDR_OWVAR 67
14730: PUSH
14731: LD_OWVAR 67
14735: PUSH
14736: LD_INT 1
14738: PLUS
14739: ST_TO_ADDR
// end ;
14740: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14741: LD_EXP 29
14745: PUSH
14746: LD_EXP 48
14750: AND
14751: IFFALSE 14854
14753: GO 14755
14755: DISABLE
14756: LD_INT 0
14758: PPUSH
// begin for i := 1 to 5 do
14759: LD_ADDR_VAR 0 1
14763: PUSH
14764: DOUBLE
14765: LD_INT 1
14767: DEC
14768: ST_TO_ADDR
14769: LD_INT 5
14771: PUSH
14772: FOR_TO
14773: IFFALSE 14852
// begin uc_nation := nation_nature ;
14775: LD_ADDR_OWVAR 21
14779: PUSH
14780: LD_INT 0
14782: ST_TO_ADDR
// uc_side := 0 ;
14783: LD_ADDR_OWVAR 20
14787: PUSH
14788: LD_INT 0
14790: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14791: LD_ADDR_OWVAR 29
14795: PUSH
14796: LD_INT 12
14798: PUSH
14799: LD_INT 12
14801: PUSH
14802: EMPTY
14803: LIST
14804: LIST
14805: ST_TO_ADDR
// hc_agressivity := 20 ;
14806: LD_ADDR_OWVAR 35
14810: PUSH
14811: LD_INT 20
14813: ST_TO_ADDR
// hc_class := class_tiger ;
14814: LD_ADDR_OWVAR 28
14818: PUSH
14819: LD_INT 14
14821: ST_TO_ADDR
// hc_gallery :=  ;
14822: LD_ADDR_OWVAR 33
14826: PUSH
14827: LD_STRING 
14829: ST_TO_ADDR
// hc_name :=  ;
14830: LD_ADDR_OWVAR 26
14834: PUSH
14835: LD_STRING 
14837: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14838: CALL_OW 44
14842: PPUSH
14843: LD_INT 0
14845: PPUSH
14846: CALL_OW 51
// end ;
14850: GO 14772
14852: POP
14853: POP
// end ;
14854: PPOPN 1
14856: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14857: LD_EXP 29
14861: PUSH
14862: LD_EXP 49
14866: AND
14867: IFFALSE 14876
14869: GO 14871
14871: DISABLE
// StreamSibBomb ;
14872: CALL 14877 0 0
14876: END
// export function StreamSibBomb ; var i , x , y ; begin
14877: LD_INT 0
14879: PPUSH
14880: PPUSH
14881: PPUSH
14882: PPUSH
// result := false ;
14883: LD_ADDR_VAR 0 1
14887: PUSH
14888: LD_INT 0
14890: ST_TO_ADDR
// for i := 1 to 16 do
14891: LD_ADDR_VAR 0 2
14895: PUSH
14896: DOUBLE
14897: LD_INT 1
14899: DEC
14900: ST_TO_ADDR
14901: LD_INT 16
14903: PUSH
14904: FOR_TO
14905: IFFALSE 15104
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14907: LD_ADDR_VAR 0 3
14911: PUSH
14912: LD_INT 10
14914: PUSH
14915: LD_INT 20
14917: PUSH
14918: LD_INT 30
14920: PUSH
14921: LD_INT 40
14923: PUSH
14924: LD_INT 50
14926: PUSH
14927: LD_INT 60
14929: PUSH
14930: LD_INT 70
14932: PUSH
14933: LD_INT 80
14935: PUSH
14936: LD_INT 90
14938: PUSH
14939: LD_INT 100
14941: PUSH
14942: LD_INT 110
14944: PUSH
14945: LD_INT 120
14947: PUSH
14948: LD_INT 130
14950: PUSH
14951: LD_INT 140
14953: PUSH
14954: LD_INT 150
14956: PUSH
14957: EMPTY
14958: LIST
14959: LIST
14960: LIST
14961: LIST
14962: LIST
14963: LIST
14964: LIST
14965: LIST
14966: LIST
14967: LIST
14968: LIST
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: PUSH
14974: LD_INT 1
14976: PPUSH
14977: LD_INT 15
14979: PPUSH
14980: CALL_OW 12
14984: ARRAY
14985: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14986: LD_ADDR_VAR 0 4
14990: PUSH
14991: LD_INT 10
14993: PUSH
14994: LD_INT 20
14996: PUSH
14997: LD_INT 30
14999: PUSH
15000: LD_INT 40
15002: PUSH
15003: LD_INT 50
15005: PUSH
15006: LD_INT 60
15008: PUSH
15009: LD_INT 70
15011: PUSH
15012: LD_INT 80
15014: PUSH
15015: LD_INT 90
15017: PUSH
15018: LD_INT 100
15020: PUSH
15021: LD_INT 110
15023: PUSH
15024: LD_INT 120
15026: PUSH
15027: LD_INT 130
15029: PUSH
15030: LD_INT 140
15032: PUSH
15033: LD_INT 150
15035: PUSH
15036: EMPTY
15037: LIST
15038: LIST
15039: LIST
15040: LIST
15041: LIST
15042: LIST
15043: LIST
15044: LIST
15045: LIST
15046: LIST
15047: LIST
15048: LIST
15049: LIST
15050: LIST
15051: LIST
15052: PUSH
15053: LD_INT 1
15055: PPUSH
15056: LD_INT 15
15058: PPUSH
15059: CALL_OW 12
15063: ARRAY
15064: ST_TO_ADDR
// if ValidHex ( x , y ) then
15065: LD_VAR 0 3
15069: PPUSH
15070: LD_VAR 0 4
15074: PPUSH
15075: CALL_OW 488
15079: IFFALSE 15102
// begin result := [ x , y ] ;
15081: LD_ADDR_VAR 0 1
15085: PUSH
15086: LD_VAR 0 3
15090: PUSH
15091: LD_VAR 0 4
15095: PUSH
15096: EMPTY
15097: LIST
15098: LIST
15099: ST_TO_ADDR
// break ;
15100: GO 15104
// end ; end ;
15102: GO 14904
15104: POP
15105: POP
// if result then
15106: LD_VAR 0 1
15110: IFFALSE 15170
// begin ToLua ( playSibBomb() ) ;
15112: LD_STRING playSibBomb()
15114: PPUSH
15115: CALL_OW 559
// wait ( 0 0$14 ) ;
15119: LD_INT 490
15121: PPUSH
15122: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15126: LD_VAR 0 1
15130: PUSH
15131: LD_INT 1
15133: ARRAY
15134: PPUSH
15135: LD_VAR 0 1
15139: PUSH
15140: LD_INT 2
15142: ARRAY
15143: PPUSH
15144: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15148: LD_VAR 0 1
15152: PUSH
15153: LD_INT 1
15155: ARRAY
15156: PPUSH
15157: LD_VAR 0 1
15161: PUSH
15162: LD_INT 2
15164: ARRAY
15165: PPUSH
15166: CALL_OW 429
// end ; end ;
15170: LD_VAR 0 1
15174: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15175: LD_EXP 29
15179: PUSH
15180: LD_EXP 51
15184: AND
15185: IFFALSE 15197
15187: GO 15189
15189: DISABLE
// YouLost (  ) ;
15190: LD_STRING 
15192: PPUSH
15193: CALL_OW 104
15197: END
// every 0 0$1 trigger StreamModeActive and sFog do
15198: LD_EXP 29
15202: PUSH
15203: LD_EXP 50
15207: AND
15208: IFFALSE 15222
15210: GO 15212
15212: DISABLE
// FogOff ( your_side ) ;
15213: LD_OWVAR 2
15217: PPUSH
15218: CALL_OW 344
15222: END
// every 0 0$1 trigger StreamModeActive and sSun do
15223: LD_EXP 29
15227: PUSH
15228: LD_EXP 52
15232: AND
15233: IFFALSE 15261
15235: GO 15237
15237: DISABLE
// begin solar_recharge_percent := 0 ;
15238: LD_ADDR_OWVAR 79
15242: PUSH
15243: LD_INT 0
15245: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15246: LD_INT 10500
15248: PPUSH
15249: CALL_OW 67
// solar_recharge_percent := 100 ;
15253: LD_ADDR_OWVAR 79
15257: PUSH
15258: LD_INT 100
15260: ST_TO_ADDR
// end ;
15261: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15262: LD_EXP 29
15266: PUSH
15267: LD_EXP 53
15271: AND
15272: IFFALSE 15511
15274: GO 15276
15276: DISABLE
15277: LD_INT 0
15279: PPUSH
15280: PPUSH
15281: PPUSH
// begin tmp := [ ] ;
15282: LD_ADDR_VAR 0 3
15286: PUSH
15287: EMPTY
15288: ST_TO_ADDR
// for i := 1 to 6 do
15289: LD_ADDR_VAR 0 1
15293: PUSH
15294: DOUBLE
15295: LD_INT 1
15297: DEC
15298: ST_TO_ADDR
15299: LD_INT 6
15301: PUSH
15302: FOR_TO
15303: IFFALSE 15408
// begin uc_nation := nation_nature ;
15305: LD_ADDR_OWVAR 21
15309: PUSH
15310: LD_INT 0
15312: ST_TO_ADDR
// uc_side := 0 ;
15313: LD_ADDR_OWVAR 20
15317: PUSH
15318: LD_INT 0
15320: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15321: LD_ADDR_OWVAR 29
15325: PUSH
15326: LD_INT 12
15328: PUSH
15329: LD_INT 12
15331: PUSH
15332: EMPTY
15333: LIST
15334: LIST
15335: ST_TO_ADDR
// hc_agressivity := 20 ;
15336: LD_ADDR_OWVAR 35
15340: PUSH
15341: LD_INT 20
15343: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15344: LD_ADDR_OWVAR 28
15348: PUSH
15349: LD_INT 17
15351: ST_TO_ADDR
// hc_gallery :=  ;
15352: LD_ADDR_OWVAR 33
15356: PUSH
15357: LD_STRING 
15359: ST_TO_ADDR
// hc_name :=  ;
15360: LD_ADDR_OWVAR 26
15364: PUSH
15365: LD_STRING 
15367: ST_TO_ADDR
// un := CreateHuman ;
15368: LD_ADDR_VAR 0 2
15372: PUSH
15373: CALL_OW 44
15377: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15378: LD_VAR 0 2
15382: PPUSH
15383: LD_INT 1
15385: PPUSH
15386: CALL_OW 51
// tmp := tmp ^ un ;
15390: LD_ADDR_VAR 0 3
15394: PUSH
15395: LD_VAR 0 3
15399: PUSH
15400: LD_VAR 0 2
15404: ADD
15405: ST_TO_ADDR
// end ;
15406: GO 15302
15408: POP
15409: POP
// repeat wait ( 0 0$1 ) ;
15410: LD_INT 35
15412: PPUSH
15413: CALL_OW 67
// for un in tmp do
15417: LD_ADDR_VAR 0 2
15421: PUSH
15422: LD_VAR 0 3
15426: PUSH
15427: FOR_IN
15428: IFFALSE 15502
// begin if IsDead ( un ) then
15430: LD_VAR 0 2
15434: PPUSH
15435: CALL_OW 301
15439: IFFALSE 15459
// begin tmp := tmp diff un ;
15441: LD_ADDR_VAR 0 3
15445: PUSH
15446: LD_VAR 0 3
15450: PUSH
15451: LD_VAR 0 2
15455: DIFF
15456: ST_TO_ADDR
// continue ;
15457: GO 15427
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15459: LD_VAR 0 2
15463: PPUSH
15464: LD_INT 3
15466: PUSH
15467: LD_INT 22
15469: PUSH
15470: LD_INT 0
15472: PUSH
15473: EMPTY
15474: LIST
15475: LIST
15476: PUSH
15477: EMPTY
15478: LIST
15479: LIST
15480: PPUSH
15481: CALL_OW 69
15485: PPUSH
15486: LD_VAR 0 2
15490: PPUSH
15491: CALL_OW 74
15495: PPUSH
15496: CALL_OW 115
// end ;
15500: GO 15427
15502: POP
15503: POP
// until not tmp ;
15504: LD_VAR 0 3
15508: NOT
15509: IFFALSE 15410
// end ;
15511: PPOPN 3
15513: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15514: LD_EXP 29
15518: PUSH
15519: LD_EXP 54
15523: AND
15524: IFFALSE 15578
15526: GO 15528
15528: DISABLE
// begin ToLua ( displayTroll(); ) ;
15529: LD_STRING displayTroll();
15531: PPUSH
15532: CALL_OW 559
// wait ( 3 3$00 ) ;
15536: LD_INT 6300
15538: PPUSH
15539: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15543: LD_STRING hideTroll();
15545: PPUSH
15546: CALL_OW 559
// wait ( 1 1$00 ) ;
15550: LD_INT 2100
15552: PPUSH
15553: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15557: LD_STRING displayTroll();
15559: PPUSH
15560: CALL_OW 559
// wait ( 1 1$00 ) ;
15564: LD_INT 2100
15566: PPUSH
15567: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15571: LD_STRING hideTroll();
15573: PPUSH
15574: CALL_OW 559
// end ;
15578: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15579: LD_EXP 29
15583: PUSH
15584: LD_EXP 55
15588: AND
15589: IFFALSE 15652
15591: GO 15593
15593: DISABLE
15594: LD_INT 0
15596: PPUSH
// begin p := 0 ;
15597: LD_ADDR_VAR 0 1
15601: PUSH
15602: LD_INT 0
15604: ST_TO_ADDR
// repeat game_speed := 1 ;
15605: LD_ADDR_OWVAR 65
15609: PUSH
15610: LD_INT 1
15612: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15613: LD_INT 35
15615: PPUSH
15616: CALL_OW 67
// p := p + 1 ;
15620: LD_ADDR_VAR 0 1
15624: PUSH
15625: LD_VAR 0 1
15629: PUSH
15630: LD_INT 1
15632: PLUS
15633: ST_TO_ADDR
// until p >= 60 ;
15634: LD_VAR 0 1
15638: PUSH
15639: LD_INT 60
15641: GREATEREQUAL
15642: IFFALSE 15605
// game_speed := 4 ;
15644: LD_ADDR_OWVAR 65
15648: PUSH
15649: LD_INT 4
15651: ST_TO_ADDR
// end ;
15652: PPOPN 1
15654: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15655: LD_EXP 29
15659: PUSH
15660: LD_EXP 56
15664: AND
15665: IFFALSE 15811
15667: GO 15669
15669: DISABLE
15670: LD_INT 0
15672: PPUSH
15673: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15674: LD_ADDR_VAR 0 1
15678: PUSH
15679: LD_INT 22
15681: PUSH
15682: LD_OWVAR 2
15686: PUSH
15687: EMPTY
15688: LIST
15689: LIST
15690: PUSH
15691: LD_INT 2
15693: PUSH
15694: LD_INT 30
15696: PUSH
15697: LD_INT 0
15699: PUSH
15700: EMPTY
15701: LIST
15702: LIST
15703: PUSH
15704: LD_INT 30
15706: PUSH
15707: LD_INT 1
15709: PUSH
15710: EMPTY
15711: LIST
15712: LIST
15713: PUSH
15714: EMPTY
15715: LIST
15716: LIST
15717: LIST
15718: PUSH
15719: EMPTY
15720: LIST
15721: LIST
15722: PPUSH
15723: CALL_OW 69
15727: ST_TO_ADDR
// if not depot then
15728: LD_VAR 0 1
15732: NOT
15733: IFFALSE 15737
// exit ;
15735: GO 15811
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15737: LD_ADDR_VAR 0 2
15741: PUSH
15742: LD_VAR 0 1
15746: PUSH
15747: LD_INT 1
15749: PPUSH
15750: LD_VAR 0 1
15754: PPUSH
15755: CALL_OW 12
15759: ARRAY
15760: PPUSH
15761: CALL_OW 274
15765: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15766: LD_VAR 0 2
15770: PPUSH
15771: LD_INT 1
15773: PPUSH
15774: LD_INT 0
15776: PPUSH
15777: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15781: LD_VAR 0 2
15785: PPUSH
15786: LD_INT 2
15788: PPUSH
15789: LD_INT 0
15791: PPUSH
15792: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15796: LD_VAR 0 2
15800: PPUSH
15801: LD_INT 3
15803: PPUSH
15804: LD_INT 0
15806: PPUSH
15807: CALL_OW 277
// end ;
15811: PPOPN 2
15813: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15814: LD_EXP 29
15818: PUSH
15819: LD_EXP 57
15823: AND
15824: IFFALSE 15921
15826: GO 15828
15828: DISABLE
15829: LD_INT 0
15831: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15832: LD_ADDR_VAR 0 1
15836: PUSH
15837: LD_INT 22
15839: PUSH
15840: LD_OWVAR 2
15844: PUSH
15845: EMPTY
15846: LIST
15847: LIST
15848: PUSH
15849: LD_INT 21
15851: PUSH
15852: LD_INT 1
15854: PUSH
15855: EMPTY
15856: LIST
15857: LIST
15858: PUSH
15859: LD_INT 3
15861: PUSH
15862: LD_INT 23
15864: PUSH
15865: LD_INT 0
15867: PUSH
15868: EMPTY
15869: LIST
15870: LIST
15871: PUSH
15872: EMPTY
15873: LIST
15874: LIST
15875: PUSH
15876: EMPTY
15877: LIST
15878: LIST
15879: LIST
15880: PPUSH
15881: CALL_OW 69
15885: ST_TO_ADDR
// if not tmp then
15886: LD_VAR 0 1
15890: NOT
15891: IFFALSE 15895
// exit ;
15893: GO 15921
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15895: LD_VAR 0 1
15899: PUSH
15900: LD_INT 1
15902: PPUSH
15903: LD_VAR 0 1
15907: PPUSH
15908: CALL_OW 12
15912: ARRAY
15913: PPUSH
15914: LD_INT 200
15916: PPUSH
15917: CALL_OW 234
// end ;
15921: PPOPN 1
15923: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15924: LD_EXP 29
15928: PUSH
15929: LD_EXP 58
15933: AND
15934: IFFALSE 16013
15936: GO 15938
15938: DISABLE
15939: LD_INT 0
15941: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15942: LD_ADDR_VAR 0 1
15946: PUSH
15947: LD_INT 22
15949: PUSH
15950: LD_OWVAR 2
15954: PUSH
15955: EMPTY
15956: LIST
15957: LIST
15958: PUSH
15959: LD_INT 21
15961: PUSH
15962: LD_INT 2
15964: PUSH
15965: EMPTY
15966: LIST
15967: LIST
15968: PUSH
15969: EMPTY
15970: LIST
15971: LIST
15972: PPUSH
15973: CALL_OW 69
15977: ST_TO_ADDR
// if not tmp then
15978: LD_VAR 0 1
15982: NOT
15983: IFFALSE 15987
// exit ;
15985: GO 16013
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15987: LD_VAR 0 1
15991: PUSH
15992: LD_INT 1
15994: PPUSH
15995: LD_VAR 0 1
15999: PPUSH
16000: CALL_OW 12
16004: ARRAY
16005: PPUSH
16006: LD_INT 60
16008: PPUSH
16009: CALL_OW 234
// end ;
16013: PPOPN 1
16015: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16016: LD_EXP 29
16020: PUSH
16021: LD_EXP 59
16025: AND
16026: IFFALSE 16125
16028: GO 16030
16030: DISABLE
16031: LD_INT 0
16033: PPUSH
16034: PPUSH
// begin enable ;
16035: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16036: LD_ADDR_VAR 0 1
16040: PUSH
16041: LD_INT 22
16043: PUSH
16044: LD_OWVAR 2
16048: PUSH
16049: EMPTY
16050: LIST
16051: LIST
16052: PUSH
16053: LD_INT 61
16055: PUSH
16056: EMPTY
16057: LIST
16058: PUSH
16059: LD_INT 33
16061: PUSH
16062: LD_INT 2
16064: PUSH
16065: EMPTY
16066: LIST
16067: LIST
16068: PUSH
16069: EMPTY
16070: LIST
16071: LIST
16072: LIST
16073: PPUSH
16074: CALL_OW 69
16078: ST_TO_ADDR
// if not tmp then
16079: LD_VAR 0 1
16083: NOT
16084: IFFALSE 16088
// exit ;
16086: GO 16125
// for i in tmp do
16088: LD_ADDR_VAR 0 2
16092: PUSH
16093: LD_VAR 0 1
16097: PUSH
16098: FOR_IN
16099: IFFALSE 16123
// if IsControledBy ( i ) then
16101: LD_VAR 0 2
16105: PPUSH
16106: CALL_OW 312
16110: IFFALSE 16121
// ComUnlink ( i ) ;
16112: LD_VAR 0 2
16116: PPUSH
16117: CALL_OW 136
16121: GO 16098
16123: POP
16124: POP
// end ;
16125: PPOPN 2
16127: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16128: LD_EXP 29
16132: PUSH
16133: LD_EXP 60
16137: AND
16138: IFFALSE 16278
16140: GO 16142
16142: DISABLE
16143: LD_INT 0
16145: PPUSH
16146: PPUSH
// begin ToLua ( displayPowell(); ) ;
16147: LD_STRING displayPowell();
16149: PPUSH
16150: CALL_OW 559
// uc_side := 0 ;
16154: LD_ADDR_OWVAR 20
16158: PUSH
16159: LD_INT 0
16161: ST_TO_ADDR
// uc_nation := 2 ;
16162: LD_ADDR_OWVAR 21
16166: PUSH
16167: LD_INT 2
16169: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16170: LD_ADDR_OWVAR 37
16174: PUSH
16175: LD_INT 14
16177: ST_TO_ADDR
// vc_engine := engine_siberite ;
16178: LD_ADDR_OWVAR 39
16182: PUSH
16183: LD_INT 3
16185: ST_TO_ADDR
// vc_control := control_apeman ;
16186: LD_ADDR_OWVAR 38
16190: PUSH
16191: LD_INT 5
16193: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16194: LD_ADDR_OWVAR 40
16198: PUSH
16199: LD_INT 29
16201: ST_TO_ADDR
// un := CreateVehicle ;
16202: LD_ADDR_VAR 0 2
16206: PUSH
16207: CALL_OW 45
16211: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16212: LD_VAR 0 2
16216: PPUSH
16217: LD_INT 1
16219: PPUSH
16220: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16224: LD_INT 35
16226: PPUSH
16227: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16231: LD_VAR 0 2
16235: PPUSH
16236: LD_INT 22
16238: PUSH
16239: LD_OWVAR 2
16243: PUSH
16244: EMPTY
16245: LIST
16246: LIST
16247: PPUSH
16248: CALL_OW 69
16252: PPUSH
16253: LD_VAR 0 2
16257: PPUSH
16258: CALL_OW 74
16262: PPUSH
16263: CALL_OW 115
// until IsDead ( un ) ;
16267: LD_VAR 0 2
16271: PPUSH
16272: CALL_OW 301
16276: IFFALSE 16224
// end ;
16278: PPOPN 2
16280: END
// every 0 0$1 trigger StreamModeActive and sStu do
16281: LD_EXP 29
16285: PUSH
16286: LD_EXP 68
16290: AND
16291: IFFALSE 16307
16293: GO 16295
16295: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16296: LD_STRING displayStucuk();
16298: PPUSH
16299: CALL_OW 559
// ResetFog ;
16303: CALL_OW 335
// end ;
16307: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16308: LD_EXP 29
16312: PUSH
16313: LD_EXP 61
16317: AND
16318: IFFALSE 16459
16320: GO 16322
16322: DISABLE
16323: LD_INT 0
16325: PPUSH
16326: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16327: LD_ADDR_VAR 0 2
16331: PUSH
16332: LD_INT 22
16334: PUSH
16335: LD_OWVAR 2
16339: PUSH
16340: EMPTY
16341: LIST
16342: LIST
16343: PUSH
16344: LD_INT 21
16346: PUSH
16347: LD_INT 1
16349: PUSH
16350: EMPTY
16351: LIST
16352: LIST
16353: PUSH
16354: EMPTY
16355: LIST
16356: LIST
16357: PPUSH
16358: CALL_OW 69
16362: ST_TO_ADDR
// if not tmp then
16363: LD_VAR 0 2
16367: NOT
16368: IFFALSE 16372
// exit ;
16370: GO 16459
// un := tmp [ rand ( 1 , tmp ) ] ;
16372: LD_ADDR_VAR 0 1
16376: PUSH
16377: LD_VAR 0 2
16381: PUSH
16382: LD_INT 1
16384: PPUSH
16385: LD_VAR 0 2
16389: PPUSH
16390: CALL_OW 12
16394: ARRAY
16395: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16396: LD_VAR 0 1
16400: PPUSH
16401: LD_INT 0
16403: PPUSH
16404: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16408: LD_VAR 0 1
16412: PPUSH
16413: LD_OWVAR 3
16417: PUSH
16418: LD_VAR 0 1
16422: DIFF
16423: PPUSH
16424: LD_VAR 0 1
16428: PPUSH
16429: CALL_OW 74
16433: PPUSH
16434: CALL_OW 115
// wait ( 0 0$20 ) ;
16438: LD_INT 700
16440: PPUSH
16441: CALL_OW 67
// SetSide ( un , your_side ) ;
16445: LD_VAR 0 1
16449: PPUSH
16450: LD_OWVAR 2
16454: PPUSH
16455: CALL_OW 235
// end ;
16459: PPOPN 2
16461: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16462: LD_EXP 29
16466: PUSH
16467: LD_EXP 62
16471: AND
16472: IFFALSE 16578
16474: GO 16476
16476: DISABLE
16477: LD_INT 0
16479: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16480: LD_ADDR_VAR 0 1
16484: PUSH
16485: LD_INT 22
16487: PUSH
16488: LD_OWVAR 2
16492: PUSH
16493: EMPTY
16494: LIST
16495: LIST
16496: PUSH
16497: LD_INT 2
16499: PUSH
16500: LD_INT 30
16502: PUSH
16503: LD_INT 0
16505: PUSH
16506: EMPTY
16507: LIST
16508: LIST
16509: PUSH
16510: LD_INT 30
16512: PUSH
16513: LD_INT 1
16515: PUSH
16516: EMPTY
16517: LIST
16518: LIST
16519: PUSH
16520: EMPTY
16521: LIST
16522: LIST
16523: LIST
16524: PUSH
16525: EMPTY
16526: LIST
16527: LIST
16528: PPUSH
16529: CALL_OW 69
16533: ST_TO_ADDR
// if not depot then
16534: LD_VAR 0 1
16538: NOT
16539: IFFALSE 16543
// exit ;
16541: GO 16578
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16543: LD_VAR 0 1
16547: PUSH
16548: LD_INT 1
16550: ARRAY
16551: PPUSH
16552: CALL_OW 250
16556: PPUSH
16557: LD_VAR 0 1
16561: PUSH
16562: LD_INT 1
16564: ARRAY
16565: PPUSH
16566: CALL_OW 251
16570: PPUSH
16571: LD_INT 70
16573: PPUSH
16574: CALL_OW 495
// end ;
16578: PPOPN 1
16580: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16581: LD_EXP 29
16585: PUSH
16586: LD_EXP 63
16590: AND
16591: IFFALSE 16802
16593: GO 16595
16595: DISABLE
16596: LD_INT 0
16598: PPUSH
16599: PPUSH
16600: PPUSH
16601: PPUSH
16602: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16603: LD_ADDR_VAR 0 5
16607: PUSH
16608: LD_INT 22
16610: PUSH
16611: LD_OWVAR 2
16615: PUSH
16616: EMPTY
16617: LIST
16618: LIST
16619: PUSH
16620: LD_INT 21
16622: PUSH
16623: LD_INT 1
16625: PUSH
16626: EMPTY
16627: LIST
16628: LIST
16629: PUSH
16630: EMPTY
16631: LIST
16632: LIST
16633: PPUSH
16634: CALL_OW 69
16638: ST_TO_ADDR
// if not tmp then
16639: LD_VAR 0 5
16643: NOT
16644: IFFALSE 16648
// exit ;
16646: GO 16802
// for i in tmp do
16648: LD_ADDR_VAR 0 1
16652: PUSH
16653: LD_VAR 0 5
16657: PUSH
16658: FOR_IN
16659: IFFALSE 16800
// begin d := rand ( 0 , 5 ) ;
16661: LD_ADDR_VAR 0 4
16665: PUSH
16666: LD_INT 0
16668: PPUSH
16669: LD_INT 5
16671: PPUSH
16672: CALL_OW 12
16676: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16677: LD_ADDR_VAR 0 2
16681: PUSH
16682: LD_VAR 0 1
16686: PPUSH
16687: CALL_OW 250
16691: PPUSH
16692: LD_VAR 0 4
16696: PPUSH
16697: LD_INT 3
16699: PPUSH
16700: LD_INT 12
16702: PPUSH
16703: CALL_OW 12
16707: PPUSH
16708: CALL_OW 272
16712: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16713: LD_ADDR_VAR 0 3
16717: PUSH
16718: LD_VAR 0 1
16722: PPUSH
16723: CALL_OW 251
16727: PPUSH
16728: LD_VAR 0 4
16732: PPUSH
16733: LD_INT 3
16735: PPUSH
16736: LD_INT 12
16738: PPUSH
16739: CALL_OW 12
16743: PPUSH
16744: CALL_OW 273
16748: ST_TO_ADDR
// if ValidHex ( x , y ) then
16749: LD_VAR 0 2
16753: PPUSH
16754: LD_VAR 0 3
16758: PPUSH
16759: CALL_OW 488
16763: IFFALSE 16798
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16765: LD_VAR 0 1
16769: PPUSH
16770: LD_VAR 0 2
16774: PPUSH
16775: LD_VAR 0 3
16779: PPUSH
16780: LD_INT 3
16782: PPUSH
16783: LD_INT 6
16785: PPUSH
16786: CALL_OW 12
16790: PPUSH
16791: LD_INT 1
16793: PPUSH
16794: CALL_OW 483
// end ;
16798: GO 16658
16800: POP
16801: POP
// end ;
16802: PPOPN 5
16804: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16805: LD_EXP 29
16809: PUSH
16810: LD_EXP 64
16814: AND
16815: IFFALSE 16909
16817: GO 16819
16819: DISABLE
16820: LD_INT 0
16822: PPUSH
16823: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16824: LD_ADDR_VAR 0 2
16828: PUSH
16829: LD_INT 22
16831: PUSH
16832: LD_OWVAR 2
16836: PUSH
16837: EMPTY
16838: LIST
16839: LIST
16840: PUSH
16841: LD_INT 32
16843: PUSH
16844: LD_INT 1
16846: PUSH
16847: EMPTY
16848: LIST
16849: LIST
16850: PUSH
16851: LD_INT 21
16853: PUSH
16854: LD_INT 2
16856: PUSH
16857: EMPTY
16858: LIST
16859: LIST
16860: PUSH
16861: EMPTY
16862: LIST
16863: LIST
16864: LIST
16865: PPUSH
16866: CALL_OW 69
16870: ST_TO_ADDR
// if not tmp then
16871: LD_VAR 0 2
16875: NOT
16876: IFFALSE 16880
// exit ;
16878: GO 16909
// for i in tmp do
16880: LD_ADDR_VAR 0 1
16884: PUSH
16885: LD_VAR 0 2
16889: PUSH
16890: FOR_IN
16891: IFFALSE 16907
// SetFuel ( i , 0 ) ;
16893: LD_VAR 0 1
16897: PPUSH
16898: LD_INT 0
16900: PPUSH
16901: CALL_OW 240
16905: GO 16890
16907: POP
16908: POP
// end ;
16909: PPOPN 2
16911: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16912: LD_EXP 29
16916: PUSH
16917: LD_EXP 65
16921: AND
16922: IFFALSE 16988
16924: GO 16926
16926: DISABLE
16927: LD_INT 0
16929: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16930: LD_ADDR_VAR 0 1
16934: PUSH
16935: LD_INT 22
16937: PUSH
16938: LD_OWVAR 2
16942: PUSH
16943: EMPTY
16944: LIST
16945: LIST
16946: PUSH
16947: LD_INT 30
16949: PUSH
16950: LD_INT 29
16952: PUSH
16953: EMPTY
16954: LIST
16955: LIST
16956: PUSH
16957: EMPTY
16958: LIST
16959: LIST
16960: PPUSH
16961: CALL_OW 69
16965: ST_TO_ADDR
// if not tmp then
16966: LD_VAR 0 1
16970: NOT
16971: IFFALSE 16975
// exit ;
16973: GO 16988
// DestroyUnit ( tmp [ 1 ] ) ;
16975: LD_VAR 0 1
16979: PUSH
16980: LD_INT 1
16982: ARRAY
16983: PPUSH
16984: CALL_OW 65
// end ;
16988: PPOPN 1
16990: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16991: LD_EXP 29
16995: PUSH
16996: LD_EXP 67
17000: AND
17001: IFFALSE 17130
17003: GO 17005
17005: DISABLE
17006: LD_INT 0
17008: PPUSH
// begin uc_side := 0 ;
17009: LD_ADDR_OWVAR 20
17013: PUSH
17014: LD_INT 0
17016: ST_TO_ADDR
// uc_nation := nation_arabian ;
17017: LD_ADDR_OWVAR 21
17021: PUSH
17022: LD_INT 2
17024: ST_TO_ADDR
// hc_gallery :=  ;
17025: LD_ADDR_OWVAR 33
17029: PUSH
17030: LD_STRING 
17032: ST_TO_ADDR
// hc_name :=  ;
17033: LD_ADDR_OWVAR 26
17037: PUSH
17038: LD_STRING 
17040: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17041: LD_INT 1
17043: PPUSH
17044: LD_INT 11
17046: PPUSH
17047: LD_INT 10
17049: PPUSH
17050: CALL_OW 380
// un := CreateHuman ;
17054: LD_ADDR_VAR 0 1
17058: PUSH
17059: CALL_OW 44
17063: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17064: LD_VAR 0 1
17068: PPUSH
17069: LD_INT 1
17071: PPUSH
17072: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17076: LD_INT 35
17078: PPUSH
17079: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17083: LD_VAR 0 1
17087: PPUSH
17088: LD_INT 22
17090: PUSH
17091: LD_OWVAR 2
17095: PUSH
17096: EMPTY
17097: LIST
17098: LIST
17099: PPUSH
17100: CALL_OW 69
17104: PPUSH
17105: LD_VAR 0 1
17109: PPUSH
17110: CALL_OW 74
17114: PPUSH
17115: CALL_OW 115
// until IsDead ( un ) ;
17119: LD_VAR 0 1
17123: PPUSH
17124: CALL_OW 301
17128: IFFALSE 17076
// end ;
17130: PPOPN 1
17132: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17133: LD_EXP 29
17137: PUSH
17138: LD_EXP 69
17142: AND
17143: IFFALSE 17155
17145: GO 17147
17147: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17148: LD_STRING earthquake(getX(game), 0, 32)
17150: PPUSH
17151: CALL_OW 559
17155: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17156: LD_EXP 29
17160: PUSH
17161: LD_EXP 70
17165: AND
17166: IFFALSE 17257
17168: GO 17170
17170: DISABLE
17171: LD_INT 0
17173: PPUSH
// begin enable ;
17174: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17175: LD_ADDR_VAR 0 1
17179: PUSH
17180: LD_INT 22
17182: PUSH
17183: LD_OWVAR 2
17187: PUSH
17188: EMPTY
17189: LIST
17190: LIST
17191: PUSH
17192: LD_INT 21
17194: PUSH
17195: LD_INT 2
17197: PUSH
17198: EMPTY
17199: LIST
17200: LIST
17201: PUSH
17202: LD_INT 33
17204: PUSH
17205: LD_INT 3
17207: PUSH
17208: EMPTY
17209: LIST
17210: LIST
17211: PUSH
17212: EMPTY
17213: LIST
17214: LIST
17215: LIST
17216: PPUSH
17217: CALL_OW 69
17221: ST_TO_ADDR
// if not tmp then
17222: LD_VAR 0 1
17226: NOT
17227: IFFALSE 17231
// exit ;
17229: GO 17257
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17231: LD_VAR 0 1
17235: PUSH
17236: LD_INT 1
17238: PPUSH
17239: LD_VAR 0 1
17243: PPUSH
17244: CALL_OW 12
17248: ARRAY
17249: PPUSH
17250: LD_INT 1
17252: PPUSH
17253: CALL_OW 234
// end ;
17257: PPOPN 1
17259: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17260: LD_EXP 29
17264: PUSH
17265: LD_EXP 71
17269: AND
17270: IFFALSE 17411
17272: GO 17274
17274: DISABLE
17275: LD_INT 0
17277: PPUSH
17278: PPUSH
17279: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17280: LD_ADDR_VAR 0 3
17284: PUSH
17285: LD_INT 22
17287: PUSH
17288: LD_OWVAR 2
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: PUSH
17297: LD_INT 25
17299: PUSH
17300: LD_INT 1
17302: PUSH
17303: EMPTY
17304: LIST
17305: LIST
17306: PUSH
17307: EMPTY
17308: LIST
17309: LIST
17310: PPUSH
17311: CALL_OW 69
17315: ST_TO_ADDR
// if not tmp then
17316: LD_VAR 0 3
17320: NOT
17321: IFFALSE 17325
// exit ;
17323: GO 17411
// un := tmp [ rand ( 1 , tmp ) ] ;
17325: LD_ADDR_VAR 0 2
17329: PUSH
17330: LD_VAR 0 3
17334: PUSH
17335: LD_INT 1
17337: PPUSH
17338: LD_VAR 0 3
17342: PPUSH
17343: CALL_OW 12
17347: ARRAY
17348: ST_TO_ADDR
// if Crawls ( un ) then
17349: LD_VAR 0 2
17353: PPUSH
17354: CALL_OW 318
17358: IFFALSE 17369
// ComWalk ( un ) ;
17360: LD_VAR 0 2
17364: PPUSH
17365: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17369: LD_VAR 0 2
17373: PPUSH
17374: LD_INT 9
17376: PPUSH
17377: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17381: LD_INT 28
17383: PPUSH
17384: LD_OWVAR 2
17388: PPUSH
17389: LD_INT 2
17391: PPUSH
17392: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17396: LD_INT 29
17398: PPUSH
17399: LD_OWVAR 2
17403: PPUSH
17404: LD_INT 2
17406: PPUSH
17407: CALL_OW 322
// end ;
17411: PPOPN 3
17413: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17414: LD_EXP 29
17418: PUSH
17419: LD_EXP 72
17423: AND
17424: IFFALSE 17535
17426: GO 17428
17428: DISABLE
17429: LD_INT 0
17431: PPUSH
17432: PPUSH
17433: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17434: LD_ADDR_VAR 0 3
17438: PUSH
17439: LD_INT 22
17441: PUSH
17442: LD_OWVAR 2
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: PUSH
17451: LD_INT 25
17453: PUSH
17454: LD_INT 1
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: PUSH
17461: EMPTY
17462: LIST
17463: LIST
17464: PPUSH
17465: CALL_OW 69
17469: ST_TO_ADDR
// if not tmp then
17470: LD_VAR 0 3
17474: NOT
17475: IFFALSE 17479
// exit ;
17477: GO 17535
// un := tmp [ rand ( 1 , tmp ) ] ;
17479: LD_ADDR_VAR 0 2
17483: PUSH
17484: LD_VAR 0 3
17488: PUSH
17489: LD_INT 1
17491: PPUSH
17492: LD_VAR 0 3
17496: PPUSH
17497: CALL_OW 12
17501: ARRAY
17502: ST_TO_ADDR
// if Crawls ( un ) then
17503: LD_VAR 0 2
17507: PPUSH
17508: CALL_OW 318
17512: IFFALSE 17523
// ComWalk ( un ) ;
17514: LD_VAR 0 2
17518: PPUSH
17519: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17523: LD_VAR 0 2
17527: PPUSH
17528: LD_INT 8
17530: PPUSH
17531: CALL_OW 336
// end ;
17535: PPOPN 3
17537: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17538: LD_EXP 29
17542: PUSH
17543: LD_EXP 73
17547: AND
17548: IFFALSE 17692
17550: GO 17552
17552: DISABLE
17553: LD_INT 0
17555: PPUSH
17556: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17557: LD_ADDR_VAR 0 2
17561: PUSH
17562: LD_INT 22
17564: PUSH
17565: LD_OWVAR 2
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: PUSH
17574: LD_INT 21
17576: PUSH
17577: LD_INT 2
17579: PUSH
17580: EMPTY
17581: LIST
17582: LIST
17583: PUSH
17584: LD_INT 2
17586: PUSH
17587: LD_INT 34
17589: PUSH
17590: LD_INT 12
17592: PUSH
17593: EMPTY
17594: LIST
17595: LIST
17596: PUSH
17597: LD_INT 34
17599: PUSH
17600: LD_INT 51
17602: PUSH
17603: EMPTY
17604: LIST
17605: LIST
17606: PUSH
17607: LD_INT 34
17609: PUSH
17610: LD_INT 32
17612: PUSH
17613: EMPTY
17614: LIST
17615: LIST
17616: PUSH
17617: EMPTY
17618: LIST
17619: LIST
17620: LIST
17621: LIST
17622: PUSH
17623: EMPTY
17624: LIST
17625: LIST
17626: LIST
17627: PPUSH
17628: CALL_OW 69
17632: ST_TO_ADDR
// if not tmp then
17633: LD_VAR 0 2
17637: NOT
17638: IFFALSE 17642
// exit ;
17640: GO 17692
// for i in tmp do
17642: LD_ADDR_VAR 0 1
17646: PUSH
17647: LD_VAR 0 2
17651: PUSH
17652: FOR_IN
17653: IFFALSE 17690
// if GetCargo ( i , mat_artifact ) = 0 then
17655: LD_VAR 0 1
17659: PPUSH
17660: LD_INT 4
17662: PPUSH
17663: CALL_OW 289
17667: PUSH
17668: LD_INT 0
17670: EQUAL
17671: IFFALSE 17688
// SetCargo ( i , mat_siberit , 100 ) ;
17673: LD_VAR 0 1
17677: PPUSH
17678: LD_INT 3
17680: PPUSH
17681: LD_INT 100
17683: PPUSH
17684: CALL_OW 290
17688: GO 17652
17690: POP
17691: POP
// end ;
17692: PPOPN 2
17694: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17695: LD_EXP 29
17699: PUSH
17700: LD_EXP 74
17704: AND
17705: IFFALSE 17888
17707: GO 17709
17709: DISABLE
17710: LD_INT 0
17712: PPUSH
17713: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17714: LD_ADDR_VAR 0 2
17718: PUSH
17719: LD_INT 22
17721: PUSH
17722: LD_OWVAR 2
17726: PUSH
17727: EMPTY
17728: LIST
17729: LIST
17730: PPUSH
17731: CALL_OW 69
17735: ST_TO_ADDR
// if not tmp then
17736: LD_VAR 0 2
17740: NOT
17741: IFFALSE 17745
// exit ;
17743: GO 17888
// for i := 1 to 2 do
17745: LD_ADDR_VAR 0 1
17749: PUSH
17750: DOUBLE
17751: LD_INT 1
17753: DEC
17754: ST_TO_ADDR
17755: LD_INT 2
17757: PUSH
17758: FOR_TO
17759: IFFALSE 17886
// begin uc_side := your_side ;
17761: LD_ADDR_OWVAR 20
17765: PUSH
17766: LD_OWVAR 2
17770: ST_TO_ADDR
// uc_nation := nation_american ;
17771: LD_ADDR_OWVAR 21
17775: PUSH
17776: LD_INT 1
17778: ST_TO_ADDR
// vc_chassis := us_morphling ;
17779: LD_ADDR_OWVAR 37
17783: PUSH
17784: LD_INT 5
17786: ST_TO_ADDR
// vc_engine := engine_siberite ;
17787: LD_ADDR_OWVAR 39
17791: PUSH
17792: LD_INT 3
17794: ST_TO_ADDR
// vc_control := control_computer ;
17795: LD_ADDR_OWVAR 38
17799: PUSH
17800: LD_INT 3
17802: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17803: LD_ADDR_OWVAR 40
17807: PUSH
17808: LD_INT 10
17810: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17811: LD_VAR 0 2
17815: PUSH
17816: LD_INT 1
17818: ARRAY
17819: PPUSH
17820: CALL_OW 310
17824: NOT
17825: IFFALSE 17872
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17827: CALL_OW 45
17831: PPUSH
17832: LD_VAR 0 2
17836: PUSH
17837: LD_INT 1
17839: ARRAY
17840: PPUSH
17841: CALL_OW 250
17845: PPUSH
17846: LD_VAR 0 2
17850: PUSH
17851: LD_INT 1
17853: ARRAY
17854: PPUSH
17855: CALL_OW 251
17859: PPUSH
17860: LD_INT 12
17862: PPUSH
17863: LD_INT 1
17865: PPUSH
17866: CALL_OW 50
17870: GO 17884
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17872: CALL_OW 45
17876: PPUSH
17877: LD_INT 1
17879: PPUSH
17880: CALL_OW 51
// end ;
17884: GO 17758
17886: POP
17887: POP
// end ;
17888: PPOPN 2
17890: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17891: LD_EXP 29
17895: PUSH
17896: LD_EXP 75
17900: AND
17901: IFFALSE 18123
17903: GO 17905
17905: DISABLE
17906: LD_INT 0
17908: PPUSH
17909: PPUSH
17910: PPUSH
17911: PPUSH
17912: PPUSH
17913: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17914: LD_ADDR_VAR 0 6
17918: PUSH
17919: LD_INT 22
17921: PUSH
17922: LD_OWVAR 2
17926: PUSH
17927: EMPTY
17928: LIST
17929: LIST
17930: PUSH
17931: LD_INT 21
17933: PUSH
17934: LD_INT 1
17936: PUSH
17937: EMPTY
17938: LIST
17939: LIST
17940: PUSH
17941: LD_INT 3
17943: PUSH
17944: LD_INT 23
17946: PUSH
17947: LD_INT 0
17949: PUSH
17950: EMPTY
17951: LIST
17952: LIST
17953: PUSH
17954: EMPTY
17955: LIST
17956: LIST
17957: PUSH
17958: EMPTY
17959: LIST
17960: LIST
17961: LIST
17962: PPUSH
17963: CALL_OW 69
17967: ST_TO_ADDR
// if not tmp then
17968: LD_VAR 0 6
17972: NOT
17973: IFFALSE 17977
// exit ;
17975: GO 18123
// s1 := rand ( 1 , 4 ) ;
17977: LD_ADDR_VAR 0 2
17981: PUSH
17982: LD_INT 1
17984: PPUSH
17985: LD_INT 4
17987: PPUSH
17988: CALL_OW 12
17992: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17993: LD_ADDR_VAR 0 4
17997: PUSH
17998: LD_VAR 0 6
18002: PUSH
18003: LD_INT 1
18005: ARRAY
18006: PPUSH
18007: LD_VAR 0 2
18011: PPUSH
18012: CALL_OW 259
18016: ST_TO_ADDR
// if s1 = 1 then
18017: LD_VAR 0 2
18021: PUSH
18022: LD_INT 1
18024: EQUAL
18025: IFFALSE 18045
// s2 := rand ( 2 , 4 ) else
18027: LD_ADDR_VAR 0 3
18031: PUSH
18032: LD_INT 2
18034: PPUSH
18035: LD_INT 4
18037: PPUSH
18038: CALL_OW 12
18042: ST_TO_ADDR
18043: GO 18053
// s2 := 1 ;
18045: LD_ADDR_VAR 0 3
18049: PUSH
18050: LD_INT 1
18052: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18053: LD_ADDR_VAR 0 5
18057: PUSH
18058: LD_VAR 0 6
18062: PUSH
18063: LD_INT 1
18065: ARRAY
18066: PPUSH
18067: LD_VAR 0 3
18071: PPUSH
18072: CALL_OW 259
18076: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18077: LD_VAR 0 6
18081: PUSH
18082: LD_INT 1
18084: ARRAY
18085: PPUSH
18086: LD_VAR 0 2
18090: PPUSH
18091: LD_VAR 0 5
18095: PPUSH
18096: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18100: LD_VAR 0 6
18104: PUSH
18105: LD_INT 1
18107: ARRAY
18108: PPUSH
18109: LD_VAR 0 3
18113: PPUSH
18114: LD_VAR 0 4
18118: PPUSH
18119: CALL_OW 237
// end ;
18123: PPOPN 6
18125: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18126: LD_EXP 29
18130: PUSH
18131: LD_EXP 76
18135: AND
18136: IFFALSE 18215
18138: GO 18140
18140: DISABLE
18141: LD_INT 0
18143: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18144: LD_ADDR_VAR 0 1
18148: PUSH
18149: LD_INT 22
18151: PUSH
18152: LD_OWVAR 2
18156: PUSH
18157: EMPTY
18158: LIST
18159: LIST
18160: PUSH
18161: LD_INT 30
18163: PUSH
18164: LD_INT 3
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: PUSH
18171: EMPTY
18172: LIST
18173: LIST
18174: PPUSH
18175: CALL_OW 69
18179: ST_TO_ADDR
// if not tmp then
18180: LD_VAR 0 1
18184: NOT
18185: IFFALSE 18189
// exit ;
18187: GO 18215
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18189: LD_VAR 0 1
18193: PUSH
18194: LD_INT 1
18196: PPUSH
18197: LD_VAR 0 1
18201: PPUSH
18202: CALL_OW 12
18206: ARRAY
18207: PPUSH
18208: LD_INT 1
18210: PPUSH
18211: CALL_OW 234
// end ;
18215: PPOPN 1
18217: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18218: LD_EXP 29
18222: PUSH
18223: LD_EXP 77
18227: AND
18228: IFFALSE 18340
18230: GO 18232
18232: DISABLE
18233: LD_INT 0
18235: PPUSH
18236: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18237: LD_ADDR_VAR 0 2
18241: PUSH
18242: LD_INT 22
18244: PUSH
18245: LD_OWVAR 2
18249: PUSH
18250: EMPTY
18251: LIST
18252: LIST
18253: PUSH
18254: LD_INT 2
18256: PUSH
18257: LD_INT 30
18259: PUSH
18260: LD_INT 27
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: PUSH
18267: LD_INT 30
18269: PUSH
18270: LD_INT 26
18272: PUSH
18273: EMPTY
18274: LIST
18275: LIST
18276: PUSH
18277: LD_INT 30
18279: PUSH
18280: LD_INT 28
18282: PUSH
18283: EMPTY
18284: LIST
18285: LIST
18286: PUSH
18287: EMPTY
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: PUSH
18293: EMPTY
18294: LIST
18295: LIST
18296: PPUSH
18297: CALL_OW 69
18301: ST_TO_ADDR
// if not tmp then
18302: LD_VAR 0 2
18306: NOT
18307: IFFALSE 18311
// exit ;
18309: GO 18340
// for i in tmp do
18311: LD_ADDR_VAR 0 1
18315: PUSH
18316: LD_VAR 0 2
18320: PUSH
18321: FOR_IN
18322: IFFALSE 18338
// SetLives ( i , 1 ) ;
18324: LD_VAR 0 1
18328: PPUSH
18329: LD_INT 1
18331: PPUSH
18332: CALL_OW 234
18336: GO 18321
18338: POP
18339: POP
// end ;
18340: PPOPN 2
18342: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18343: LD_EXP 29
18347: PUSH
18348: LD_EXP 78
18352: AND
18353: IFFALSE 18640
18355: GO 18357
18357: DISABLE
18358: LD_INT 0
18360: PPUSH
18361: PPUSH
18362: PPUSH
// begin i := rand ( 1 , 7 ) ;
18363: LD_ADDR_VAR 0 1
18367: PUSH
18368: LD_INT 1
18370: PPUSH
18371: LD_INT 7
18373: PPUSH
18374: CALL_OW 12
18378: ST_TO_ADDR
// case i of 1 :
18379: LD_VAR 0 1
18383: PUSH
18384: LD_INT 1
18386: DOUBLE
18387: EQUAL
18388: IFTRUE 18392
18390: GO 18402
18392: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18393: LD_STRING earthquake(getX(game), 0, 32)
18395: PPUSH
18396: CALL_OW 559
18400: GO 18640
18402: LD_INT 2
18404: DOUBLE
18405: EQUAL
18406: IFTRUE 18410
18408: GO 18424
18410: POP
// begin ToLua ( displayStucuk(); ) ;
18411: LD_STRING displayStucuk();
18413: PPUSH
18414: CALL_OW 559
// ResetFog ;
18418: CALL_OW 335
// end ; 3 :
18422: GO 18640
18424: LD_INT 3
18426: DOUBLE
18427: EQUAL
18428: IFTRUE 18432
18430: GO 18536
18432: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18433: LD_ADDR_VAR 0 2
18437: PUSH
18438: LD_INT 22
18440: PUSH
18441: LD_OWVAR 2
18445: PUSH
18446: EMPTY
18447: LIST
18448: LIST
18449: PUSH
18450: LD_INT 25
18452: PUSH
18453: LD_INT 1
18455: PUSH
18456: EMPTY
18457: LIST
18458: LIST
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: PPUSH
18464: CALL_OW 69
18468: ST_TO_ADDR
// if not tmp then
18469: LD_VAR 0 2
18473: NOT
18474: IFFALSE 18478
// exit ;
18476: GO 18640
// un := tmp [ rand ( 1 , tmp ) ] ;
18478: LD_ADDR_VAR 0 3
18482: PUSH
18483: LD_VAR 0 2
18487: PUSH
18488: LD_INT 1
18490: PPUSH
18491: LD_VAR 0 2
18495: PPUSH
18496: CALL_OW 12
18500: ARRAY
18501: ST_TO_ADDR
// if Crawls ( un ) then
18502: LD_VAR 0 3
18506: PPUSH
18507: CALL_OW 318
18511: IFFALSE 18522
// ComWalk ( un ) ;
18513: LD_VAR 0 3
18517: PPUSH
18518: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18522: LD_VAR 0 3
18526: PPUSH
18527: LD_INT 8
18529: PPUSH
18530: CALL_OW 336
// end ; 4 :
18534: GO 18640
18536: LD_INT 4
18538: DOUBLE
18539: EQUAL
18540: IFTRUE 18544
18542: GO 18618
18544: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18545: LD_ADDR_VAR 0 2
18549: PUSH
18550: LD_INT 22
18552: PUSH
18553: LD_OWVAR 2
18557: PUSH
18558: EMPTY
18559: LIST
18560: LIST
18561: PUSH
18562: LD_INT 30
18564: PUSH
18565: LD_INT 29
18567: PUSH
18568: EMPTY
18569: LIST
18570: LIST
18571: PUSH
18572: EMPTY
18573: LIST
18574: LIST
18575: PPUSH
18576: CALL_OW 69
18580: ST_TO_ADDR
// if not tmp then
18581: LD_VAR 0 2
18585: NOT
18586: IFFALSE 18590
// exit ;
18588: GO 18640
// CenterNowOnUnits ( tmp [ 1 ] ) ;
18590: LD_VAR 0 2
18594: PUSH
18595: LD_INT 1
18597: ARRAY
18598: PPUSH
18599: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
18603: LD_VAR 0 2
18607: PUSH
18608: LD_INT 1
18610: ARRAY
18611: PPUSH
18612: CALL_OW 65
// end ; 5 .. 7 :
18616: GO 18640
18618: LD_INT 5
18620: DOUBLE
18621: GREATEREQUAL
18622: IFFALSE 18630
18624: LD_INT 7
18626: DOUBLE
18627: LESSEQUAL
18628: IFTRUE 18632
18630: GO 18639
18632: POP
// StreamSibBomb ; end ;
18633: CALL 14877 0 0
18637: GO 18640
18639: POP
// end ;
18640: PPOPN 3
18642: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18643: LD_EXP 29
18647: PUSH
18648: LD_EXP 79
18652: AND
18653: IFFALSE 18809
18655: GO 18657
18657: DISABLE
18658: LD_INT 0
18660: PPUSH
18661: PPUSH
18662: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18663: LD_ADDR_VAR 0 2
18667: PUSH
18668: LD_INT 81
18670: PUSH
18671: LD_OWVAR 2
18675: PUSH
18676: EMPTY
18677: LIST
18678: LIST
18679: PUSH
18680: LD_INT 2
18682: PUSH
18683: LD_INT 21
18685: PUSH
18686: LD_INT 1
18688: PUSH
18689: EMPTY
18690: LIST
18691: LIST
18692: PUSH
18693: LD_INT 21
18695: PUSH
18696: LD_INT 2
18698: PUSH
18699: EMPTY
18700: LIST
18701: LIST
18702: PUSH
18703: EMPTY
18704: LIST
18705: LIST
18706: LIST
18707: PUSH
18708: EMPTY
18709: LIST
18710: LIST
18711: PPUSH
18712: CALL_OW 69
18716: ST_TO_ADDR
// if not tmp then
18717: LD_VAR 0 2
18721: NOT
18722: IFFALSE 18726
// exit ;
18724: GO 18809
// p := 0 ;
18726: LD_ADDR_VAR 0 3
18730: PUSH
18731: LD_INT 0
18733: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18734: LD_INT 35
18736: PPUSH
18737: CALL_OW 67
// p := p + 1 ;
18741: LD_ADDR_VAR 0 3
18745: PUSH
18746: LD_VAR 0 3
18750: PUSH
18751: LD_INT 1
18753: PLUS
18754: ST_TO_ADDR
// for i in tmp do
18755: LD_ADDR_VAR 0 1
18759: PUSH
18760: LD_VAR 0 2
18764: PUSH
18765: FOR_IN
18766: IFFALSE 18797
// if GetLives ( i ) < 1000 then
18768: LD_VAR 0 1
18772: PPUSH
18773: CALL_OW 256
18777: PUSH
18778: LD_INT 1000
18780: LESS
18781: IFFALSE 18795
// SetLives ( i , 1000 ) ;
18783: LD_VAR 0 1
18787: PPUSH
18788: LD_INT 1000
18790: PPUSH
18791: CALL_OW 234
18795: GO 18765
18797: POP
18798: POP
// until p > 20 ;
18799: LD_VAR 0 3
18803: PUSH
18804: LD_INT 20
18806: GREATER
18807: IFFALSE 18734
// end ;
18809: PPOPN 3
18811: END
// every 0 0$1 trigger StreamModeActive and sTime do
18812: LD_EXP 29
18816: PUSH
18817: LD_EXP 80
18821: AND
18822: IFFALSE 18857
18824: GO 18826
18826: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18827: LD_INT 28
18829: PPUSH
18830: LD_OWVAR 2
18834: PPUSH
18835: LD_INT 2
18837: PPUSH
18838: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18842: LD_INT 30
18844: PPUSH
18845: LD_OWVAR 2
18849: PPUSH
18850: LD_INT 2
18852: PPUSH
18853: CALL_OW 322
// end ;
18857: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18858: LD_EXP 29
18862: PUSH
18863: LD_EXP 81
18867: AND
18868: IFFALSE 18989
18870: GO 18872
18872: DISABLE
18873: LD_INT 0
18875: PPUSH
18876: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18877: LD_ADDR_VAR 0 2
18881: PUSH
18882: LD_INT 22
18884: PUSH
18885: LD_OWVAR 2
18889: PUSH
18890: EMPTY
18891: LIST
18892: LIST
18893: PUSH
18894: LD_INT 21
18896: PUSH
18897: LD_INT 1
18899: PUSH
18900: EMPTY
18901: LIST
18902: LIST
18903: PUSH
18904: LD_INT 3
18906: PUSH
18907: LD_INT 23
18909: PUSH
18910: LD_INT 0
18912: PUSH
18913: EMPTY
18914: LIST
18915: LIST
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: PUSH
18921: EMPTY
18922: LIST
18923: LIST
18924: LIST
18925: PPUSH
18926: CALL_OW 69
18930: ST_TO_ADDR
// if not tmp then
18931: LD_VAR 0 2
18935: NOT
18936: IFFALSE 18940
// exit ;
18938: GO 18989
// for i in tmp do
18940: LD_ADDR_VAR 0 1
18944: PUSH
18945: LD_VAR 0 2
18949: PUSH
18950: FOR_IN
18951: IFFALSE 18987
// begin if Crawls ( i ) then
18953: LD_VAR 0 1
18957: PPUSH
18958: CALL_OW 318
18962: IFFALSE 18973
// ComWalk ( i ) ;
18964: LD_VAR 0 1
18968: PPUSH
18969: CALL_OW 138
// SetClass ( i , 2 ) ;
18973: LD_VAR 0 1
18977: PPUSH
18978: LD_INT 2
18980: PPUSH
18981: CALL_OW 336
// end ;
18985: GO 18950
18987: POP
18988: POP
// end ;
18989: PPOPN 2
18991: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18992: LD_EXP 29
18996: PUSH
18997: LD_EXP 82
19001: AND
19002: IFFALSE 19290
19004: GO 19006
19006: DISABLE
19007: LD_INT 0
19009: PPUSH
19010: PPUSH
19011: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19012: LD_OWVAR 2
19016: PPUSH
19017: LD_INT 9
19019: PPUSH
19020: LD_INT 1
19022: PPUSH
19023: LD_INT 1
19025: PPUSH
19026: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19030: LD_INT 9
19032: PPUSH
19033: LD_OWVAR 2
19037: PPUSH
19038: CALL_OW 343
// uc_side := 9 ;
19042: LD_ADDR_OWVAR 20
19046: PUSH
19047: LD_INT 9
19049: ST_TO_ADDR
// uc_nation := 2 ;
19050: LD_ADDR_OWVAR 21
19054: PUSH
19055: LD_INT 2
19057: ST_TO_ADDR
// hc_name := Dark Warrior ;
19058: LD_ADDR_OWVAR 26
19062: PUSH
19063: LD_STRING Dark Warrior
19065: ST_TO_ADDR
// hc_gallery :=  ;
19066: LD_ADDR_OWVAR 33
19070: PUSH
19071: LD_STRING 
19073: ST_TO_ADDR
// hc_noskilllimit := true ;
19074: LD_ADDR_OWVAR 76
19078: PUSH
19079: LD_INT 1
19081: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19082: LD_ADDR_OWVAR 31
19086: PUSH
19087: LD_INT 30
19089: PUSH
19090: LD_INT 30
19092: PUSH
19093: LD_INT 30
19095: PUSH
19096: LD_INT 30
19098: PUSH
19099: EMPTY
19100: LIST
19101: LIST
19102: LIST
19103: LIST
19104: ST_TO_ADDR
// un := CreateHuman ;
19105: LD_ADDR_VAR 0 3
19109: PUSH
19110: CALL_OW 44
19114: ST_TO_ADDR
// hc_noskilllimit := false ;
19115: LD_ADDR_OWVAR 76
19119: PUSH
19120: LD_INT 0
19122: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19123: LD_VAR 0 3
19127: PPUSH
19128: LD_INT 1
19130: PPUSH
19131: CALL_OW 51
// ToLua ( playRanger() ) ;
19135: LD_STRING playRanger()
19137: PPUSH
19138: CALL_OW 559
// p := 0 ;
19142: LD_ADDR_VAR 0 2
19146: PUSH
19147: LD_INT 0
19149: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19150: LD_INT 35
19152: PPUSH
19153: CALL_OW 67
// p := p + 1 ;
19157: LD_ADDR_VAR 0 2
19161: PUSH
19162: LD_VAR 0 2
19166: PUSH
19167: LD_INT 1
19169: PLUS
19170: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19171: LD_VAR 0 3
19175: PPUSH
19176: CALL_OW 256
19180: PUSH
19181: LD_INT 1000
19183: LESS
19184: IFFALSE 19198
// SetLives ( un , 1000 ) ;
19186: LD_VAR 0 3
19190: PPUSH
19191: LD_INT 1000
19193: PPUSH
19194: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19198: LD_VAR 0 3
19202: PPUSH
19203: LD_INT 81
19205: PUSH
19206: LD_OWVAR 2
19210: PUSH
19211: EMPTY
19212: LIST
19213: LIST
19214: PUSH
19215: LD_INT 91
19217: PUSH
19218: LD_VAR 0 3
19222: PUSH
19223: LD_INT 30
19225: PUSH
19226: EMPTY
19227: LIST
19228: LIST
19229: LIST
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: PPUSH
19235: CALL_OW 69
19239: PPUSH
19240: LD_VAR 0 3
19244: PPUSH
19245: CALL_OW 74
19249: PPUSH
19250: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
19254: LD_VAR 0 2
19258: PUSH
19259: LD_INT 80
19261: GREATER
19262: PUSH
19263: LD_VAR 0 3
19267: PPUSH
19268: CALL_OW 301
19272: OR
19273: IFFALSE 19150
// if un then
19275: LD_VAR 0 3
19279: IFFALSE 19290
// RemoveUnit ( un ) ;
19281: LD_VAR 0 3
19285: PPUSH
19286: CALL_OW 64
// end ;
19290: PPOPN 3
19292: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
19293: LD_EXP 83
19297: IFFALSE 19413
19299: GO 19301
19301: DISABLE
19302: LD_INT 0
19304: PPUSH
19305: PPUSH
19306: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19307: LD_ADDR_VAR 0 2
19311: PUSH
19312: LD_INT 81
19314: PUSH
19315: LD_OWVAR 2
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: PUSH
19324: LD_INT 21
19326: PUSH
19327: LD_INT 1
19329: PUSH
19330: EMPTY
19331: LIST
19332: LIST
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: PPUSH
19338: CALL_OW 69
19342: ST_TO_ADDR
// ToLua ( playComputer() ) ;
19343: LD_STRING playComputer()
19345: PPUSH
19346: CALL_OW 559
// if not tmp then
19350: LD_VAR 0 2
19354: NOT
19355: IFFALSE 19359
// exit ;
19357: GO 19413
// for i in tmp do
19359: LD_ADDR_VAR 0 1
19363: PUSH
19364: LD_VAR 0 2
19368: PUSH
19369: FOR_IN
19370: IFFALSE 19411
// for j := 1 to 4 do
19372: LD_ADDR_VAR 0 3
19376: PUSH
19377: DOUBLE
19378: LD_INT 1
19380: DEC
19381: ST_TO_ADDR
19382: LD_INT 4
19384: PUSH
19385: FOR_TO
19386: IFFALSE 19407
// SetSkill ( i , j , 10 ) ;
19388: LD_VAR 0 1
19392: PPUSH
19393: LD_VAR 0 3
19397: PPUSH
19398: LD_INT 10
19400: PPUSH
19401: CALL_OW 237
19405: GO 19385
19407: POP
19408: POP
19409: GO 19369
19411: POP
19412: POP
// end ;
19413: PPOPN 3
19415: END
// every 0 0$1 trigger s30 do var i , tmp ;
19416: LD_EXP 84
19420: IFFALSE 19489
19422: GO 19424
19424: DISABLE
19425: LD_INT 0
19427: PPUSH
19428: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19429: LD_ADDR_VAR 0 2
19433: PUSH
19434: LD_INT 22
19436: PUSH
19437: LD_OWVAR 2
19441: PUSH
19442: EMPTY
19443: LIST
19444: LIST
19445: PPUSH
19446: CALL_OW 69
19450: ST_TO_ADDR
// if not tmp then
19451: LD_VAR 0 2
19455: NOT
19456: IFFALSE 19460
// exit ;
19458: GO 19489
// for i in tmp do
19460: LD_ADDR_VAR 0 1
19464: PUSH
19465: LD_VAR 0 2
19469: PUSH
19470: FOR_IN
19471: IFFALSE 19487
// SetLives ( i , 300 ) ;
19473: LD_VAR 0 1
19477: PPUSH
19478: LD_INT 300
19480: PPUSH
19481: CALL_OW 234
19485: GO 19470
19487: POP
19488: POP
// end ;
19489: PPOPN 2
19491: END
// every 0 0$1 trigger s60 do var i , tmp ;
19492: LD_EXP 85
19496: IFFALSE 19565
19498: GO 19500
19500: DISABLE
19501: LD_INT 0
19503: PPUSH
19504: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19505: LD_ADDR_VAR 0 2
19509: PUSH
19510: LD_INT 22
19512: PUSH
19513: LD_OWVAR 2
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: PPUSH
19522: CALL_OW 69
19526: ST_TO_ADDR
// if not tmp then
19527: LD_VAR 0 2
19531: NOT
19532: IFFALSE 19536
// exit ;
19534: GO 19565
// for i in tmp do
19536: LD_ADDR_VAR 0 1
19540: PUSH
19541: LD_VAR 0 2
19545: PUSH
19546: FOR_IN
19547: IFFALSE 19563
// SetLives ( i , 600 ) ;
19549: LD_VAR 0 1
19553: PPUSH
19554: LD_INT 600
19556: PPUSH
19557: CALL_OW 234
19561: GO 19546
19563: POP
19564: POP
// end ;
19565: PPOPN 2
19567: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19568: LD_INT 0
19570: PPUSH
// case cmd of 301 :
19571: LD_VAR 0 1
19575: PUSH
19576: LD_INT 301
19578: DOUBLE
19579: EQUAL
19580: IFTRUE 19584
19582: GO 19616
19584: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
19585: LD_VAR 0 6
19589: PPUSH
19590: LD_VAR 0 7
19594: PPUSH
19595: LD_VAR 0 8
19599: PPUSH
19600: LD_VAR 0 4
19604: PPUSH
19605: LD_VAR 0 5
19609: PPUSH
19610: CALL 20825 0 5
19614: GO 19737
19616: LD_INT 302
19618: DOUBLE
19619: EQUAL
19620: IFTRUE 19624
19622: GO 19661
19624: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
19625: LD_VAR 0 6
19629: PPUSH
19630: LD_VAR 0 7
19634: PPUSH
19635: LD_VAR 0 8
19639: PPUSH
19640: LD_VAR 0 9
19644: PPUSH
19645: LD_VAR 0 4
19649: PPUSH
19650: LD_VAR 0 5
19654: PPUSH
19655: CALL 20916 0 6
19659: GO 19737
19661: LD_INT 303
19663: DOUBLE
19664: EQUAL
19665: IFTRUE 19669
19667: GO 19706
19669: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
19670: LD_VAR 0 6
19674: PPUSH
19675: LD_VAR 0 7
19679: PPUSH
19680: LD_VAR 0 8
19684: PPUSH
19685: LD_VAR 0 9
19689: PPUSH
19690: LD_VAR 0 4
19694: PPUSH
19695: LD_VAR 0 5
19699: PPUSH
19700: CALL 19742 0 6
19704: GO 19737
19706: LD_INT 304
19708: DOUBLE
19709: EQUAL
19710: IFTRUE 19714
19712: GO 19736
19714: POP
// hHackTeleport ( unit , x , y ) ; end ;
19715: LD_VAR 0 2
19719: PPUSH
19720: LD_VAR 0 4
19724: PPUSH
19725: LD_VAR 0 5
19729: PPUSH
19730: CALL 21509 0 3
19734: GO 19737
19736: POP
// end ;
19737: LD_VAR 0 12
19741: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
19742: LD_INT 0
19744: PPUSH
19745: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
19746: LD_VAR 0 1
19750: PUSH
19751: LD_INT 1
19753: LESS
19754: PUSH
19755: LD_VAR 0 1
19759: PUSH
19760: LD_INT 3
19762: GREATER
19763: OR
19764: PUSH
19765: LD_VAR 0 5
19769: PPUSH
19770: LD_VAR 0 6
19774: PPUSH
19775: CALL_OW 428
19779: OR
19780: IFFALSE 19784
// exit ;
19782: GO 20512
// uc_side := your_side ;
19784: LD_ADDR_OWVAR 20
19788: PUSH
19789: LD_OWVAR 2
19793: ST_TO_ADDR
// uc_nation := nation ;
19794: LD_ADDR_OWVAR 21
19798: PUSH
19799: LD_VAR 0 1
19803: ST_TO_ADDR
// bc_level = 1 ;
19804: LD_ADDR_OWVAR 43
19808: PUSH
19809: LD_INT 1
19811: ST_TO_ADDR
// case btype of 1 :
19812: LD_VAR 0 2
19816: PUSH
19817: LD_INT 1
19819: DOUBLE
19820: EQUAL
19821: IFTRUE 19825
19823: GO 19836
19825: POP
// bc_type := b_depot ; 2 :
19826: LD_ADDR_OWVAR 42
19830: PUSH
19831: LD_INT 0
19833: ST_TO_ADDR
19834: GO 20456
19836: LD_INT 2
19838: DOUBLE
19839: EQUAL
19840: IFTRUE 19844
19842: GO 19855
19844: POP
// bc_type := b_warehouse ; 3 :
19845: LD_ADDR_OWVAR 42
19849: PUSH
19850: LD_INT 1
19852: ST_TO_ADDR
19853: GO 20456
19855: LD_INT 3
19857: DOUBLE
19858: EQUAL
19859: IFTRUE 19863
19861: GO 19874
19863: POP
// bc_type := b_lab ; 4 .. 9 :
19864: LD_ADDR_OWVAR 42
19868: PUSH
19869: LD_INT 6
19871: ST_TO_ADDR
19872: GO 20456
19874: LD_INT 4
19876: DOUBLE
19877: GREATEREQUAL
19878: IFFALSE 19886
19880: LD_INT 9
19882: DOUBLE
19883: LESSEQUAL
19884: IFTRUE 19888
19886: GO 19948
19888: POP
// begin bc_type := b_lab_half ;
19889: LD_ADDR_OWVAR 42
19893: PUSH
19894: LD_INT 7
19896: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
19897: LD_ADDR_OWVAR 44
19901: PUSH
19902: LD_INT 10
19904: PUSH
19905: LD_INT 11
19907: PUSH
19908: LD_INT 12
19910: PUSH
19911: LD_INT 15
19913: PUSH
19914: LD_INT 14
19916: PUSH
19917: LD_INT 13
19919: PUSH
19920: EMPTY
19921: LIST
19922: LIST
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: PUSH
19928: LD_VAR 0 2
19932: PUSH
19933: LD_INT 3
19935: MINUS
19936: ARRAY
19937: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
19938: LD_ADDR_OWVAR 45
19942: PUSH
19943: LD_INT 9
19945: ST_TO_ADDR
// end ; 10 .. 13 :
19946: GO 20456
19948: LD_INT 10
19950: DOUBLE
19951: GREATEREQUAL
19952: IFFALSE 19960
19954: LD_INT 13
19956: DOUBLE
19957: LESSEQUAL
19958: IFTRUE 19962
19960: GO 20039
19962: POP
// begin bc_type := b_lab_full ;
19963: LD_ADDR_OWVAR 42
19967: PUSH
19968: LD_INT 8
19970: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
19971: LD_ADDR_OWVAR 44
19975: PUSH
19976: LD_INT 10
19978: PUSH
19979: LD_INT 12
19981: PUSH
19982: LD_INT 14
19984: PUSH
19985: LD_INT 13
19987: PUSH
19988: EMPTY
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: PUSH
19994: LD_VAR 0 2
19998: PUSH
19999: LD_INT 9
20001: MINUS
20002: ARRAY
20003: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
20004: LD_ADDR_OWVAR 45
20008: PUSH
20009: LD_INT 11
20011: PUSH
20012: LD_INT 15
20014: PUSH
20015: LD_INT 12
20017: PUSH
20018: LD_INT 15
20020: PUSH
20021: EMPTY
20022: LIST
20023: LIST
20024: LIST
20025: LIST
20026: PUSH
20027: LD_VAR 0 2
20031: PUSH
20032: LD_INT 9
20034: MINUS
20035: ARRAY
20036: ST_TO_ADDR
// end ; 14 :
20037: GO 20456
20039: LD_INT 14
20041: DOUBLE
20042: EQUAL
20043: IFTRUE 20047
20045: GO 20058
20047: POP
// bc_type := b_workshop ; 15 :
20048: LD_ADDR_OWVAR 42
20052: PUSH
20053: LD_INT 2
20055: ST_TO_ADDR
20056: GO 20456
20058: LD_INT 15
20060: DOUBLE
20061: EQUAL
20062: IFTRUE 20066
20064: GO 20077
20066: POP
// bc_type := b_factory ; 16 :
20067: LD_ADDR_OWVAR 42
20071: PUSH
20072: LD_INT 3
20074: ST_TO_ADDR
20075: GO 20456
20077: LD_INT 16
20079: DOUBLE
20080: EQUAL
20081: IFTRUE 20085
20083: GO 20096
20085: POP
// bc_type := b_ext_gun ; 17 :
20086: LD_ADDR_OWVAR 42
20090: PUSH
20091: LD_INT 17
20093: ST_TO_ADDR
20094: GO 20456
20096: LD_INT 17
20098: DOUBLE
20099: EQUAL
20100: IFTRUE 20104
20102: GO 20132
20104: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20105: LD_ADDR_OWVAR 42
20109: PUSH
20110: LD_INT 19
20112: PUSH
20113: LD_INT 23
20115: PUSH
20116: LD_INT 19
20118: PUSH
20119: EMPTY
20120: LIST
20121: LIST
20122: LIST
20123: PUSH
20124: LD_VAR 0 1
20128: ARRAY
20129: ST_TO_ADDR
20130: GO 20456
20132: LD_INT 18
20134: DOUBLE
20135: EQUAL
20136: IFTRUE 20140
20138: GO 20151
20140: POP
// bc_type := b_ext_radar ; 19 :
20141: LD_ADDR_OWVAR 42
20145: PUSH
20146: LD_INT 20
20148: ST_TO_ADDR
20149: GO 20456
20151: LD_INT 19
20153: DOUBLE
20154: EQUAL
20155: IFTRUE 20159
20157: GO 20170
20159: POP
// bc_type := b_ext_radio ; 20 :
20160: LD_ADDR_OWVAR 42
20164: PUSH
20165: LD_INT 22
20167: ST_TO_ADDR
20168: GO 20456
20170: LD_INT 20
20172: DOUBLE
20173: EQUAL
20174: IFTRUE 20178
20176: GO 20189
20178: POP
// bc_type := b_ext_siberium ; 21 :
20179: LD_ADDR_OWVAR 42
20183: PUSH
20184: LD_INT 21
20186: ST_TO_ADDR
20187: GO 20456
20189: LD_INT 21
20191: DOUBLE
20192: EQUAL
20193: IFTRUE 20197
20195: GO 20208
20197: POP
// bc_type := b_ext_computer ; 22 :
20198: LD_ADDR_OWVAR 42
20202: PUSH
20203: LD_INT 24
20205: ST_TO_ADDR
20206: GO 20456
20208: LD_INT 22
20210: DOUBLE
20211: EQUAL
20212: IFTRUE 20216
20214: GO 20227
20216: POP
// bc_type := b_ext_track ; 23 :
20217: LD_ADDR_OWVAR 42
20221: PUSH
20222: LD_INT 16
20224: ST_TO_ADDR
20225: GO 20456
20227: LD_INT 23
20229: DOUBLE
20230: EQUAL
20231: IFTRUE 20235
20233: GO 20246
20235: POP
// bc_type := b_ext_laser ; 24 :
20236: LD_ADDR_OWVAR 42
20240: PUSH
20241: LD_INT 25
20243: ST_TO_ADDR
20244: GO 20456
20246: LD_INT 24
20248: DOUBLE
20249: EQUAL
20250: IFTRUE 20254
20252: GO 20265
20254: POP
// bc_type := b_control_tower ; 25 :
20255: LD_ADDR_OWVAR 42
20259: PUSH
20260: LD_INT 36
20262: ST_TO_ADDR
20263: GO 20456
20265: LD_INT 25
20267: DOUBLE
20268: EQUAL
20269: IFTRUE 20273
20271: GO 20284
20273: POP
// bc_type := b_breastwork ; 26 :
20274: LD_ADDR_OWVAR 42
20278: PUSH
20279: LD_INT 31
20281: ST_TO_ADDR
20282: GO 20456
20284: LD_INT 26
20286: DOUBLE
20287: EQUAL
20288: IFTRUE 20292
20290: GO 20303
20292: POP
// bc_type := b_bunker ; 27 :
20293: LD_ADDR_OWVAR 42
20297: PUSH
20298: LD_INT 32
20300: ST_TO_ADDR
20301: GO 20456
20303: LD_INT 27
20305: DOUBLE
20306: EQUAL
20307: IFTRUE 20311
20309: GO 20322
20311: POP
// bc_type := b_turret ; 28 :
20312: LD_ADDR_OWVAR 42
20316: PUSH
20317: LD_INT 33
20319: ST_TO_ADDR
20320: GO 20456
20322: LD_INT 28
20324: DOUBLE
20325: EQUAL
20326: IFTRUE 20330
20328: GO 20341
20330: POP
// bc_type := b_armoury ; 29 :
20331: LD_ADDR_OWVAR 42
20335: PUSH
20336: LD_INT 4
20338: ST_TO_ADDR
20339: GO 20456
20341: LD_INT 29
20343: DOUBLE
20344: EQUAL
20345: IFTRUE 20349
20347: GO 20360
20349: POP
// bc_type := b_barracks ; 30 :
20350: LD_ADDR_OWVAR 42
20354: PUSH
20355: LD_INT 5
20357: ST_TO_ADDR
20358: GO 20456
20360: LD_INT 30
20362: DOUBLE
20363: EQUAL
20364: IFTRUE 20368
20366: GO 20379
20368: POP
// bc_type := b_solar_power ; 31 :
20369: LD_ADDR_OWVAR 42
20373: PUSH
20374: LD_INT 27
20376: ST_TO_ADDR
20377: GO 20456
20379: LD_INT 31
20381: DOUBLE
20382: EQUAL
20383: IFTRUE 20387
20385: GO 20398
20387: POP
// bc_type := b_oil_power ; 32 :
20388: LD_ADDR_OWVAR 42
20392: PUSH
20393: LD_INT 26
20395: ST_TO_ADDR
20396: GO 20456
20398: LD_INT 32
20400: DOUBLE
20401: EQUAL
20402: IFTRUE 20406
20404: GO 20417
20406: POP
// bc_type := b_siberite_power ; 33 :
20407: LD_ADDR_OWVAR 42
20411: PUSH
20412: LD_INT 28
20414: ST_TO_ADDR
20415: GO 20456
20417: LD_INT 33
20419: DOUBLE
20420: EQUAL
20421: IFTRUE 20425
20423: GO 20436
20425: POP
// bc_type := b_oil_mine ; 34 :
20426: LD_ADDR_OWVAR 42
20430: PUSH
20431: LD_INT 29
20433: ST_TO_ADDR
20434: GO 20456
20436: LD_INT 34
20438: DOUBLE
20439: EQUAL
20440: IFTRUE 20444
20442: GO 20455
20444: POP
// bc_type := b_siberite_mine ; end ;
20445: LD_ADDR_OWVAR 42
20449: PUSH
20450: LD_INT 30
20452: ST_TO_ADDR
20453: GO 20456
20455: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
20456: LD_ADDR_VAR 0 8
20460: PUSH
20461: LD_VAR 0 5
20465: PPUSH
20466: LD_VAR 0 6
20470: PPUSH
20471: LD_VAR 0 3
20475: PPUSH
20476: CALL_OW 47
20480: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
20481: LD_OWVAR 42
20485: PUSH
20486: LD_INT 32
20488: PUSH
20489: LD_INT 33
20491: PUSH
20492: EMPTY
20493: LIST
20494: LIST
20495: IN
20496: IFFALSE 20512
// PlaceWeaponTurret ( b , weapon ) ;
20498: LD_VAR 0 8
20502: PPUSH
20503: LD_VAR 0 4
20507: PPUSH
20508: CALL_OW 431
// end ;
20512: LD_VAR 0 7
20516: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
20517: LD_INT 0
20519: PPUSH
20520: PPUSH
20521: PPUSH
20522: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20523: LD_ADDR_VAR 0 4
20527: PUSH
20528: LD_INT 22
20530: PUSH
20531: LD_OWVAR 2
20535: PUSH
20536: EMPTY
20537: LIST
20538: LIST
20539: PUSH
20540: LD_INT 2
20542: PUSH
20543: LD_INT 30
20545: PUSH
20546: LD_INT 0
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: PUSH
20553: LD_INT 30
20555: PUSH
20556: LD_INT 1
20558: PUSH
20559: EMPTY
20560: LIST
20561: LIST
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: LIST
20567: PUSH
20568: EMPTY
20569: LIST
20570: LIST
20571: PPUSH
20572: CALL_OW 69
20576: ST_TO_ADDR
// if not tmp then
20577: LD_VAR 0 4
20581: NOT
20582: IFFALSE 20586
// exit ;
20584: GO 20645
// for i in tmp do
20586: LD_ADDR_VAR 0 2
20590: PUSH
20591: LD_VAR 0 4
20595: PUSH
20596: FOR_IN
20597: IFFALSE 20643
// for j = 1 to 3 do
20599: LD_ADDR_VAR 0 3
20603: PUSH
20604: DOUBLE
20605: LD_INT 1
20607: DEC
20608: ST_TO_ADDR
20609: LD_INT 3
20611: PUSH
20612: FOR_TO
20613: IFFALSE 20639
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
20615: LD_VAR 0 2
20619: PPUSH
20620: CALL_OW 274
20624: PPUSH
20625: LD_VAR 0 3
20629: PPUSH
20630: LD_INT 99999
20632: PPUSH
20633: CALL_OW 277
20637: GO 20612
20639: POP
20640: POP
20641: GO 20596
20643: POP
20644: POP
// end ;
20645: LD_VAR 0 1
20649: RET
// export function hHackSetLevel10 ; var i , j ; begin
20650: LD_INT 0
20652: PPUSH
20653: PPUSH
20654: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20655: LD_ADDR_VAR 0 2
20659: PUSH
20660: LD_INT 21
20662: PUSH
20663: LD_INT 1
20665: PUSH
20666: EMPTY
20667: LIST
20668: LIST
20669: PPUSH
20670: CALL_OW 69
20674: PUSH
20675: FOR_IN
20676: IFFALSE 20728
// if IsSelected ( i ) then
20678: LD_VAR 0 2
20682: PPUSH
20683: CALL_OW 306
20687: IFFALSE 20726
// begin for j := 1 to 4 do
20689: LD_ADDR_VAR 0 3
20693: PUSH
20694: DOUBLE
20695: LD_INT 1
20697: DEC
20698: ST_TO_ADDR
20699: LD_INT 4
20701: PUSH
20702: FOR_TO
20703: IFFALSE 20724
// SetSkill ( i , j , 10 ) ;
20705: LD_VAR 0 2
20709: PPUSH
20710: LD_VAR 0 3
20714: PPUSH
20715: LD_INT 10
20717: PPUSH
20718: CALL_OW 237
20722: GO 20702
20724: POP
20725: POP
// end ;
20726: GO 20675
20728: POP
20729: POP
// end ;
20730: LD_VAR 0 1
20734: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
20735: LD_INT 0
20737: PPUSH
20738: PPUSH
20739: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
20740: LD_ADDR_VAR 0 2
20744: PUSH
20745: LD_INT 22
20747: PUSH
20748: LD_OWVAR 2
20752: PUSH
20753: EMPTY
20754: LIST
20755: LIST
20756: PUSH
20757: LD_INT 21
20759: PUSH
20760: LD_INT 1
20762: PUSH
20763: EMPTY
20764: LIST
20765: LIST
20766: PUSH
20767: EMPTY
20768: LIST
20769: LIST
20770: PPUSH
20771: CALL_OW 69
20775: PUSH
20776: FOR_IN
20777: IFFALSE 20818
// begin for j := 1 to 4 do
20779: LD_ADDR_VAR 0 3
20783: PUSH
20784: DOUBLE
20785: LD_INT 1
20787: DEC
20788: ST_TO_ADDR
20789: LD_INT 4
20791: PUSH
20792: FOR_TO
20793: IFFALSE 20814
// SetSkill ( i , j , 10 ) ;
20795: LD_VAR 0 2
20799: PPUSH
20800: LD_VAR 0 3
20804: PPUSH
20805: LD_INT 10
20807: PPUSH
20808: CALL_OW 237
20812: GO 20792
20814: POP
20815: POP
// end ;
20816: GO 20776
20818: POP
20819: POP
// end ;
20820: LD_VAR 0 1
20824: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
20825: LD_INT 0
20827: PPUSH
// uc_side := your_side ;
20828: LD_ADDR_OWVAR 20
20832: PUSH
20833: LD_OWVAR 2
20837: ST_TO_ADDR
// uc_nation := nation ;
20838: LD_ADDR_OWVAR 21
20842: PUSH
20843: LD_VAR 0 1
20847: ST_TO_ADDR
// InitHc ;
20848: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
20852: LD_INT 0
20854: PPUSH
20855: LD_VAR 0 2
20859: PPUSH
20860: LD_VAR 0 3
20864: PPUSH
20865: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
20869: LD_VAR 0 4
20873: PPUSH
20874: LD_VAR 0 5
20878: PPUSH
20879: CALL_OW 428
20883: PUSH
20884: LD_INT 0
20886: EQUAL
20887: IFFALSE 20911
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
20889: CALL_OW 44
20893: PPUSH
20894: LD_VAR 0 4
20898: PPUSH
20899: LD_VAR 0 5
20903: PPUSH
20904: LD_INT 1
20906: PPUSH
20907: CALL_OW 48
// end ;
20911: LD_VAR 0 6
20915: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
20916: LD_INT 0
20918: PPUSH
20919: PPUSH
// uc_side := your_side ;
20920: LD_ADDR_OWVAR 20
20924: PUSH
20925: LD_OWVAR 2
20929: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
20930: LD_VAR 0 1
20934: PUSH
20935: LD_INT 1
20937: PUSH
20938: LD_INT 2
20940: PUSH
20941: LD_INT 3
20943: PUSH
20944: LD_INT 4
20946: PUSH
20947: LD_INT 5
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: IN
20957: IFFALSE 20969
// uc_nation := nation_american else
20959: LD_ADDR_OWVAR 21
20963: PUSH
20964: LD_INT 1
20966: ST_TO_ADDR
20967: GO 21012
// if chassis in [ 11 , 12 , 13 , 14 ] then
20969: LD_VAR 0 1
20973: PUSH
20974: LD_INT 11
20976: PUSH
20977: LD_INT 12
20979: PUSH
20980: LD_INT 13
20982: PUSH
20983: LD_INT 14
20985: PUSH
20986: EMPTY
20987: LIST
20988: LIST
20989: LIST
20990: LIST
20991: IN
20992: IFFALSE 21004
// uc_nation := nation_arabian else
20994: LD_ADDR_OWVAR 21
20998: PUSH
20999: LD_INT 2
21001: ST_TO_ADDR
21002: GO 21012
// uc_nation := nation_russian ;
21004: LD_ADDR_OWVAR 21
21008: PUSH
21009: LD_INT 3
21011: ST_TO_ADDR
// vc_chassis := chassis ;
21012: LD_ADDR_OWVAR 37
21016: PUSH
21017: LD_VAR 0 1
21021: ST_TO_ADDR
// vc_engine := engine ;
21022: LD_ADDR_OWVAR 39
21026: PUSH
21027: LD_VAR 0 2
21031: ST_TO_ADDR
// vc_control := control ;
21032: LD_ADDR_OWVAR 38
21036: PUSH
21037: LD_VAR 0 3
21041: ST_TO_ADDR
// vc_weapon := weapon ;
21042: LD_ADDR_OWVAR 40
21046: PUSH
21047: LD_VAR 0 4
21051: ST_TO_ADDR
// un := CreateVehicle ;
21052: LD_ADDR_VAR 0 8
21056: PUSH
21057: CALL_OW 45
21061: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21062: LD_VAR 0 8
21066: PPUSH
21067: LD_INT 0
21069: PPUSH
21070: LD_INT 5
21072: PPUSH
21073: CALL_OW 12
21077: PPUSH
21078: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21082: LD_VAR 0 8
21086: PPUSH
21087: LD_VAR 0 5
21091: PPUSH
21092: LD_VAR 0 6
21096: PPUSH
21097: LD_INT 1
21099: PPUSH
21100: CALL_OW 48
// end ;
21104: LD_VAR 0 7
21108: RET
// export hInvincible ; every 1 do
21109: GO 21111
21111: DISABLE
// hInvincible := [ ] ;
21112: LD_ADDR_EXP 86
21116: PUSH
21117: EMPTY
21118: ST_TO_ADDR
21119: END
// every 10 do var i ;
21120: GO 21122
21122: DISABLE
21123: LD_INT 0
21125: PPUSH
// begin enable ;
21126: ENABLE
// if not hInvincible then
21127: LD_EXP 86
21131: NOT
21132: IFFALSE 21136
// exit ;
21134: GO 21180
// for i in hInvincible do
21136: LD_ADDR_VAR 0 1
21140: PUSH
21141: LD_EXP 86
21145: PUSH
21146: FOR_IN
21147: IFFALSE 21178
// if GetLives ( i ) < 1000 then
21149: LD_VAR 0 1
21153: PPUSH
21154: CALL_OW 256
21158: PUSH
21159: LD_INT 1000
21161: LESS
21162: IFFALSE 21176
// SetLives ( i , 1000 ) ;
21164: LD_VAR 0 1
21168: PPUSH
21169: LD_INT 1000
21171: PPUSH
21172: CALL_OW 234
21176: GO 21146
21178: POP
21179: POP
// end ;
21180: PPOPN 1
21182: END
// export function hHackInvincible ; var i ; begin
21183: LD_INT 0
21185: PPUSH
21186: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21187: LD_ADDR_VAR 0 2
21191: PUSH
21192: LD_INT 2
21194: PUSH
21195: LD_INT 21
21197: PUSH
21198: LD_INT 1
21200: PUSH
21201: EMPTY
21202: LIST
21203: LIST
21204: PUSH
21205: LD_INT 21
21207: PUSH
21208: LD_INT 2
21210: PUSH
21211: EMPTY
21212: LIST
21213: LIST
21214: PUSH
21215: EMPTY
21216: LIST
21217: LIST
21218: LIST
21219: PPUSH
21220: CALL_OW 69
21224: PUSH
21225: FOR_IN
21226: IFFALSE 21287
// if IsSelected ( i ) then
21228: LD_VAR 0 2
21232: PPUSH
21233: CALL_OW 306
21237: IFFALSE 21285
// begin if i in hInvincible then
21239: LD_VAR 0 2
21243: PUSH
21244: LD_EXP 86
21248: IN
21249: IFFALSE 21269
// hInvincible := hInvincible diff i else
21251: LD_ADDR_EXP 86
21255: PUSH
21256: LD_EXP 86
21260: PUSH
21261: LD_VAR 0 2
21265: DIFF
21266: ST_TO_ADDR
21267: GO 21285
// hInvincible := hInvincible union i ;
21269: LD_ADDR_EXP 86
21273: PUSH
21274: LD_EXP 86
21278: PUSH
21279: LD_VAR 0 2
21283: UNION
21284: ST_TO_ADDR
// end ;
21285: GO 21225
21287: POP
21288: POP
// end ;
21289: LD_VAR 0 1
21293: RET
// export function hHackInvisible ; var i , j ; begin
21294: LD_INT 0
21296: PPUSH
21297: PPUSH
21298: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21299: LD_ADDR_VAR 0 2
21303: PUSH
21304: LD_INT 21
21306: PUSH
21307: LD_INT 1
21309: PUSH
21310: EMPTY
21311: LIST
21312: LIST
21313: PPUSH
21314: CALL_OW 69
21318: PUSH
21319: FOR_IN
21320: IFFALSE 21344
// if IsSelected ( i ) then
21322: LD_VAR 0 2
21326: PPUSH
21327: CALL_OW 306
21331: IFFALSE 21342
// ComForceInvisible ( i ) ;
21333: LD_VAR 0 2
21337: PPUSH
21338: CALL_OW 496
21342: GO 21319
21344: POP
21345: POP
// end ;
21346: LD_VAR 0 1
21350: RET
// export function hHackChangeYourSide ; begin
21351: LD_INT 0
21353: PPUSH
// if your_side = 8 then
21354: LD_OWVAR 2
21358: PUSH
21359: LD_INT 8
21361: EQUAL
21362: IFFALSE 21374
// your_side := 0 else
21364: LD_ADDR_OWVAR 2
21368: PUSH
21369: LD_INT 0
21371: ST_TO_ADDR
21372: GO 21388
// your_side := your_side + 1 ;
21374: LD_ADDR_OWVAR 2
21378: PUSH
21379: LD_OWVAR 2
21383: PUSH
21384: LD_INT 1
21386: PLUS
21387: ST_TO_ADDR
// end ;
21388: LD_VAR 0 1
21392: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21393: LD_INT 0
21395: PPUSH
21396: PPUSH
21397: PPUSH
// for i in all_units do
21398: LD_ADDR_VAR 0 2
21402: PUSH
21403: LD_OWVAR 3
21407: PUSH
21408: FOR_IN
21409: IFFALSE 21487
// if IsSelected ( i ) then
21411: LD_VAR 0 2
21415: PPUSH
21416: CALL_OW 306
21420: IFFALSE 21485
// begin j := GetSide ( i ) ;
21422: LD_ADDR_VAR 0 3
21426: PUSH
21427: LD_VAR 0 2
21431: PPUSH
21432: CALL_OW 255
21436: ST_TO_ADDR
// if j = 8 then
21437: LD_VAR 0 3
21441: PUSH
21442: LD_INT 8
21444: EQUAL
21445: IFFALSE 21457
// j := 0 else
21447: LD_ADDR_VAR 0 3
21451: PUSH
21452: LD_INT 0
21454: ST_TO_ADDR
21455: GO 21471
// j := j + 1 ;
21457: LD_ADDR_VAR 0 3
21461: PUSH
21462: LD_VAR 0 3
21466: PUSH
21467: LD_INT 1
21469: PLUS
21470: ST_TO_ADDR
// SetSide ( i , j ) ;
21471: LD_VAR 0 2
21475: PPUSH
21476: LD_VAR 0 3
21480: PPUSH
21481: CALL_OW 235
// end ;
21485: GO 21408
21487: POP
21488: POP
// end ;
21489: LD_VAR 0 1
21493: RET
// export function hHackFog ; begin
21494: LD_INT 0
21496: PPUSH
// FogOff ( true ) ;
21497: LD_INT 1
21499: PPUSH
21500: CALL_OW 344
// end ;
21504: LD_VAR 0 1
21508: RET
// export function hHackTeleport ( unit , x , y ) ; begin
21509: LD_INT 0
21511: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
21512: LD_VAR 0 1
21516: PPUSH
21517: LD_VAR 0 2
21521: PPUSH
21522: LD_VAR 0 3
21526: PPUSH
21527: LD_INT 1
21529: PPUSH
21530: LD_INT 1
21532: PPUSH
21533: CALL_OW 483
// CenterOnXY ( x , y ) ;
21537: LD_VAR 0 2
21541: PPUSH
21542: LD_VAR 0 3
21546: PPUSH
21547: CALL_OW 84
// end ;
21551: LD_VAR 0 4
21555: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
21556: LD_INT 0
21558: PPUSH
21559: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
21560: LD_VAR 0 1
21564: NOT
21565: PUSH
21566: LD_VAR 0 2
21570: PPUSH
21571: LD_VAR 0 3
21575: PPUSH
21576: CALL_OW 488
21580: NOT
21581: OR
21582: PUSH
21583: LD_VAR 0 1
21587: PPUSH
21588: CALL_OW 266
21592: PUSH
21593: LD_INT 3
21595: NONEQUAL
21596: PUSH
21597: LD_VAR 0 1
21601: PPUSH
21602: CALL_OW 247
21606: PUSH
21607: LD_INT 1
21609: EQUAL
21610: NOT
21611: AND
21612: OR
21613: IFFALSE 21617
// exit ;
21615: GO 21899
// if GetType ( factory ) = unit_human then
21617: LD_VAR 0 1
21621: PPUSH
21622: CALL_OW 247
21626: PUSH
21627: LD_INT 1
21629: EQUAL
21630: IFFALSE 21647
// factory := IsInUnit ( factory ) ;
21632: LD_ADDR_VAR 0 1
21636: PUSH
21637: LD_VAR 0 1
21641: PPUSH
21642: CALL_OW 310
21646: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
21647: LD_VAR 0 1
21651: PPUSH
21652: CALL_OW 266
21656: PUSH
21657: LD_INT 3
21659: NONEQUAL
21660: IFFALSE 21664
// exit ;
21662: GO 21899
// for i := 1 to Count ( factoryWaypoints ) do
21664: LD_ADDR_VAR 0 5
21668: PUSH
21669: DOUBLE
21670: LD_INT 1
21672: DEC
21673: ST_TO_ADDR
21674: LD_EXP 87
21678: PPUSH
21679: CALL 30545 0 1
21683: PUSH
21684: FOR_TO
21685: IFFALSE 21847
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
21687: LD_VAR 0 2
21691: PPUSH
21692: LD_VAR 0 3
21696: PPUSH
21697: CALL_OW 428
21701: PUSH
21702: LD_EXP 87
21706: PUSH
21707: LD_VAR 0 5
21711: ARRAY
21712: PUSH
21713: LD_INT 2
21715: ARRAY
21716: EQUAL
21717: IFFALSE 21749
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
21719: LD_ADDR_EXP 87
21723: PUSH
21724: LD_EXP 87
21728: PPUSH
21729: LD_VAR 0 5
21733: PPUSH
21734: CALL_OW 3
21738: ST_TO_ADDR
// UpdateFactoryWaypoints ;
21739: CALL 21904 0 0
// exit ;
21743: POP
21744: POP
21745: GO 21899
// end else
21747: GO 21845
// if factory = factoryWaypoints [ i ] [ 2 ] then
21749: LD_VAR 0 1
21753: PUSH
21754: LD_EXP 87
21758: PUSH
21759: LD_VAR 0 5
21763: ARRAY
21764: PUSH
21765: LD_INT 2
21767: ARRAY
21768: EQUAL
21769: IFFALSE 21845
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
21771: LD_ADDR_EXP 87
21775: PUSH
21776: LD_EXP 87
21780: PPUSH
21781: LD_VAR 0 5
21785: PPUSH
21786: CALL_OW 3
21790: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
21791: LD_ADDR_EXP 87
21795: PUSH
21796: LD_EXP 87
21800: PPUSH
21801: LD_VAR 0 1
21805: PPUSH
21806: CALL_OW 255
21810: PUSH
21811: LD_VAR 0 1
21815: PUSH
21816: LD_VAR 0 2
21820: PUSH
21821: LD_VAR 0 3
21825: PUSH
21826: EMPTY
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: PPUSH
21832: CALL 66154 0 2
21836: ST_TO_ADDR
// UpdateFactoryWaypoints ;
21837: CALL 21904 0 0
// exit ;
21841: POP
21842: POP
21843: GO 21899
// end ; end ;
21845: GO 21684
21847: POP
21848: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
21849: LD_ADDR_EXP 87
21853: PUSH
21854: LD_EXP 87
21858: PPUSH
21859: LD_VAR 0 1
21863: PPUSH
21864: CALL_OW 255
21868: PUSH
21869: LD_VAR 0 1
21873: PUSH
21874: LD_VAR 0 2
21878: PUSH
21879: LD_VAR 0 3
21883: PUSH
21884: EMPTY
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: PPUSH
21890: CALL 66154 0 2
21894: ST_TO_ADDR
// UpdateFactoryWaypoints ;
21895: CALL 21904 0 0
// end ;
21899: LD_VAR 0 4
21903: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
21904: LD_INT 0
21906: PPUSH
21907: PPUSH
21908: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
21909: LD_STRING resetFactoryWaypoint();
21911: PPUSH
21912: CALL_OW 559
// if factoryWaypoints then
21916: LD_EXP 87
21920: IFFALSE 22041
// begin list := factoryWaypoints ;
21922: LD_ADDR_VAR 0 3
21926: PUSH
21927: LD_EXP 87
21931: ST_TO_ADDR
// for i := 1 to list do
21932: LD_ADDR_VAR 0 2
21936: PUSH
21937: DOUBLE
21938: LD_INT 1
21940: DEC
21941: ST_TO_ADDR
21942: LD_VAR 0 3
21946: PUSH
21947: FOR_TO
21948: IFFALSE 22039
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
21950: LD_STRING setFactoryWaypointXY(
21952: PUSH
21953: LD_VAR 0 3
21957: PUSH
21958: LD_VAR 0 2
21962: ARRAY
21963: PUSH
21964: LD_INT 1
21966: ARRAY
21967: STR
21968: PUSH
21969: LD_STRING ,
21971: STR
21972: PUSH
21973: LD_VAR 0 3
21977: PUSH
21978: LD_VAR 0 2
21982: ARRAY
21983: PUSH
21984: LD_INT 2
21986: ARRAY
21987: STR
21988: PUSH
21989: LD_STRING ,
21991: STR
21992: PUSH
21993: LD_VAR 0 3
21997: PUSH
21998: LD_VAR 0 2
22002: ARRAY
22003: PUSH
22004: LD_INT 3
22006: ARRAY
22007: STR
22008: PUSH
22009: LD_STRING ,
22011: STR
22012: PUSH
22013: LD_VAR 0 3
22017: PUSH
22018: LD_VAR 0 2
22022: ARRAY
22023: PUSH
22024: LD_INT 4
22026: ARRAY
22027: STR
22028: PUSH
22029: LD_STRING )
22031: STR
22032: PPUSH
22033: CALL_OW 559
22037: GO 21947
22039: POP
22040: POP
// end ; end ;
22041: LD_VAR 0 1
22045: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
22046: LD_INT 0
22048: PPUSH
// if HexInfo ( x , y ) = warehouse then
22049: LD_VAR 0 2
22053: PPUSH
22054: LD_VAR 0 3
22058: PPUSH
22059: CALL_OW 428
22063: PUSH
22064: LD_VAR 0 1
22068: EQUAL
22069: IFFALSE 22096
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
22071: LD_ADDR_EXP 89
22075: PUSH
22076: LD_EXP 89
22080: PPUSH
22081: LD_VAR 0 1
22085: PPUSH
22086: LD_INT 0
22088: PPUSH
22089: CALL_OW 1
22093: ST_TO_ADDR
22094: GO 22147
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
22096: LD_ADDR_EXP 89
22100: PUSH
22101: LD_EXP 89
22105: PPUSH
22106: LD_VAR 0 1
22110: PPUSH
22111: LD_VAR 0 1
22115: PPUSH
22116: CALL_OW 255
22120: PUSH
22121: LD_VAR 0 1
22125: PUSH
22126: LD_VAR 0 2
22130: PUSH
22131: LD_VAR 0 3
22135: PUSH
22136: EMPTY
22137: LIST
22138: LIST
22139: LIST
22140: LIST
22141: PPUSH
22142: CALL_OW 1
22146: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
22147: CALL 22156 0 0
// end ;
22151: LD_VAR 0 4
22155: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
22156: LD_INT 0
22158: PPUSH
22159: PPUSH
22160: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
22161: LD_STRING resetWarehouseGatheringPoints();
22163: PPUSH
22164: CALL_OW 559
// if warehouseGatheringPoints then
22168: LD_EXP 89
22172: IFFALSE 22298
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
22174: LD_ADDR_VAR 0 3
22178: PUSH
22179: LD_EXP 89
22183: PPUSH
22184: CALL 69922 0 1
22188: ST_TO_ADDR
// for i := 1 to list do
22189: LD_ADDR_VAR 0 2
22193: PUSH
22194: DOUBLE
22195: LD_INT 1
22197: DEC
22198: ST_TO_ADDR
22199: LD_VAR 0 3
22203: PUSH
22204: FOR_TO
22205: IFFALSE 22296
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22207: LD_STRING setWarehouseGatheringPointXY(
22209: PUSH
22210: LD_VAR 0 3
22214: PUSH
22215: LD_VAR 0 2
22219: ARRAY
22220: PUSH
22221: LD_INT 1
22223: ARRAY
22224: STR
22225: PUSH
22226: LD_STRING ,
22228: STR
22229: PUSH
22230: LD_VAR 0 3
22234: PUSH
22235: LD_VAR 0 2
22239: ARRAY
22240: PUSH
22241: LD_INT 2
22243: ARRAY
22244: STR
22245: PUSH
22246: LD_STRING ,
22248: STR
22249: PUSH
22250: LD_VAR 0 3
22254: PUSH
22255: LD_VAR 0 2
22259: ARRAY
22260: PUSH
22261: LD_INT 3
22263: ARRAY
22264: STR
22265: PUSH
22266: LD_STRING ,
22268: STR
22269: PUSH
22270: LD_VAR 0 3
22274: PUSH
22275: LD_VAR 0 2
22279: ARRAY
22280: PUSH
22281: LD_INT 4
22283: ARRAY
22284: STR
22285: PUSH
22286: LD_STRING )
22288: STR
22289: PPUSH
22290: CALL_OW 559
22294: GO 22204
22296: POP
22297: POP
// end ; end ;
22298: LD_VAR 0 1
22302: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
22303: LD_EXP 89
22307: IFFALSE 22992
22309: GO 22311
22311: DISABLE
22312: LD_INT 0
22314: PPUSH
22315: PPUSH
22316: PPUSH
22317: PPUSH
22318: PPUSH
22319: PPUSH
22320: PPUSH
22321: PPUSH
22322: PPUSH
// begin enable ;
22323: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
22324: LD_ADDR_VAR 0 3
22328: PUSH
22329: LD_EXP 89
22333: PPUSH
22334: CALL 69922 0 1
22338: ST_TO_ADDR
// if not list then
22339: LD_VAR 0 3
22343: NOT
22344: IFFALSE 22348
// exit ;
22346: GO 22992
// for i := 1 to list do
22348: LD_ADDR_VAR 0 1
22352: PUSH
22353: DOUBLE
22354: LD_INT 1
22356: DEC
22357: ST_TO_ADDR
22358: LD_VAR 0 3
22362: PUSH
22363: FOR_TO
22364: IFFALSE 22990
// begin depot := list [ i ] [ 2 ] ;
22366: LD_ADDR_VAR 0 8
22370: PUSH
22371: LD_VAR 0 3
22375: PUSH
22376: LD_VAR 0 1
22380: ARRAY
22381: PUSH
22382: LD_INT 2
22384: ARRAY
22385: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
22386: LD_ADDR_VAR 0 5
22390: PUSH
22391: LD_VAR 0 3
22395: PUSH
22396: LD_VAR 0 1
22400: ARRAY
22401: PUSH
22402: LD_INT 1
22404: ARRAY
22405: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
22406: LD_VAR 0 8
22410: PPUSH
22411: CALL_OW 301
22415: PUSH
22416: LD_VAR 0 5
22420: PUSH
22421: LD_VAR 0 8
22425: PPUSH
22426: CALL_OW 255
22430: NONEQUAL
22431: OR
22432: IFFALSE 22461
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
22434: LD_ADDR_EXP 89
22438: PUSH
22439: LD_EXP 89
22443: PPUSH
22444: LD_VAR 0 8
22448: PPUSH
22449: LD_INT 0
22451: PPUSH
22452: CALL_OW 1
22456: ST_TO_ADDR
// exit ;
22457: POP
22458: POP
22459: GO 22992
// end ; x := list [ i ] [ 3 ] ;
22461: LD_ADDR_VAR 0 6
22465: PUSH
22466: LD_VAR 0 3
22470: PUSH
22471: LD_VAR 0 1
22475: ARRAY
22476: PUSH
22477: LD_INT 3
22479: ARRAY
22480: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
22481: LD_ADDR_VAR 0 7
22485: PUSH
22486: LD_VAR 0 3
22490: PUSH
22491: LD_VAR 0 1
22495: ARRAY
22496: PUSH
22497: LD_INT 4
22499: ARRAY
22500: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
22501: LD_ADDR_VAR 0 9
22505: PUSH
22506: LD_VAR 0 6
22510: PPUSH
22511: LD_VAR 0 7
22515: PPUSH
22516: LD_INT 16
22518: PPUSH
22519: CALL 68506 0 3
22523: ST_TO_ADDR
// if not cratesNearbyPoint then
22524: LD_VAR 0 9
22528: NOT
22529: IFFALSE 22535
// exit ;
22531: POP
22532: POP
22533: GO 22992
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
22535: LD_ADDR_VAR 0 4
22539: PUSH
22540: LD_INT 22
22542: PUSH
22543: LD_VAR 0 5
22547: PUSH
22548: EMPTY
22549: LIST
22550: LIST
22551: PUSH
22552: LD_INT 3
22554: PUSH
22555: LD_INT 60
22557: PUSH
22558: EMPTY
22559: LIST
22560: PUSH
22561: EMPTY
22562: LIST
22563: LIST
22564: PUSH
22565: LD_INT 91
22567: PUSH
22568: LD_VAR 0 8
22572: PUSH
22573: LD_INT 6
22575: PUSH
22576: EMPTY
22577: LIST
22578: LIST
22579: LIST
22580: PUSH
22581: LD_INT 2
22583: PUSH
22584: LD_INT 25
22586: PUSH
22587: LD_INT 2
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: PUSH
22594: LD_INT 25
22596: PUSH
22597: LD_INT 16
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: PUSH
22604: EMPTY
22605: LIST
22606: LIST
22607: LIST
22608: PUSH
22609: EMPTY
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: PPUSH
22615: CALL_OW 69
22619: PUSH
22620: LD_VAR 0 8
22624: PPUSH
22625: CALL_OW 313
22629: PPUSH
22630: LD_INT 3
22632: PUSH
22633: LD_INT 60
22635: PUSH
22636: EMPTY
22637: LIST
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: PUSH
22643: LD_INT 2
22645: PUSH
22646: LD_INT 25
22648: PUSH
22649: LD_INT 2
22651: PUSH
22652: EMPTY
22653: LIST
22654: LIST
22655: PUSH
22656: LD_INT 25
22658: PUSH
22659: LD_INT 16
22661: PUSH
22662: EMPTY
22663: LIST
22664: LIST
22665: PUSH
22666: EMPTY
22667: LIST
22668: LIST
22669: LIST
22670: PUSH
22671: EMPTY
22672: LIST
22673: LIST
22674: PPUSH
22675: CALL_OW 72
22679: UNION
22680: ST_TO_ADDR
// if tmp then
22681: LD_VAR 0 4
22685: IFFALSE 22765
// begin tmp := ShrinkArray ( tmp , 3 ) ;
22687: LD_ADDR_VAR 0 4
22691: PUSH
22692: LD_VAR 0 4
22696: PPUSH
22697: LD_INT 3
22699: PPUSH
22700: CALL 66469 0 2
22704: ST_TO_ADDR
// for j in tmp do
22705: LD_ADDR_VAR 0 2
22709: PUSH
22710: LD_VAR 0 4
22714: PUSH
22715: FOR_IN
22716: IFFALSE 22759
// begin if IsInUnit ( j ) then
22718: LD_VAR 0 2
22722: PPUSH
22723: CALL_OW 310
22727: IFFALSE 22738
// ComExit ( j ) ;
22729: LD_VAR 0 2
22733: PPUSH
22734: CALL 66552 0 1
// AddComCollect ( j , x , y ) ;
22738: LD_VAR 0 2
22742: PPUSH
22743: LD_VAR 0 6
22747: PPUSH
22748: LD_VAR 0 7
22752: PPUSH
22753: CALL_OW 177
// end ;
22757: GO 22715
22759: POP
22760: POP
// exit ;
22761: POP
22762: POP
22763: GO 22992
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
22765: LD_ADDR_VAR 0 4
22769: PUSH
22770: LD_INT 22
22772: PUSH
22773: LD_VAR 0 5
22777: PUSH
22778: EMPTY
22779: LIST
22780: LIST
22781: PUSH
22782: LD_INT 91
22784: PUSH
22785: LD_VAR 0 8
22789: PUSH
22790: LD_INT 8
22792: PUSH
22793: EMPTY
22794: LIST
22795: LIST
22796: LIST
22797: PUSH
22798: LD_INT 2
22800: PUSH
22801: LD_INT 34
22803: PUSH
22804: LD_INT 12
22806: PUSH
22807: EMPTY
22808: LIST
22809: LIST
22810: PUSH
22811: LD_INT 34
22813: PUSH
22814: LD_INT 51
22816: PUSH
22817: EMPTY
22818: LIST
22819: LIST
22820: PUSH
22821: LD_INT 34
22823: PUSH
22824: LD_INT 32
22826: PUSH
22827: EMPTY
22828: LIST
22829: LIST
22830: PUSH
22831: LD_INT 34
22833: PUSH
22834: LD_INT 89
22836: PUSH
22837: EMPTY
22838: LIST
22839: LIST
22840: PUSH
22841: EMPTY
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: PUSH
22848: EMPTY
22849: LIST
22850: LIST
22851: LIST
22852: PPUSH
22853: CALL_OW 69
22857: ST_TO_ADDR
// if tmp then
22858: LD_VAR 0 4
22862: IFFALSE 22988
// begin for j in tmp do
22864: LD_ADDR_VAR 0 2
22868: PUSH
22869: LD_VAR 0 4
22873: PUSH
22874: FOR_IN
22875: IFFALSE 22986
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
22877: LD_VAR 0 2
22881: PPUSH
22882: CALL_OW 262
22886: PUSH
22887: LD_INT 3
22889: EQUAL
22890: PUSH
22891: LD_VAR 0 2
22895: PPUSH
22896: CALL_OW 261
22900: PUSH
22901: LD_INT 20
22903: GREATER
22904: OR
22905: PUSH
22906: LD_VAR 0 2
22910: PPUSH
22911: CALL_OW 314
22915: NOT
22916: AND
22917: PUSH
22918: LD_VAR 0 2
22922: PPUSH
22923: CALL_OW 263
22927: PUSH
22928: LD_INT 1
22930: NONEQUAL
22931: PUSH
22932: LD_VAR 0 2
22936: PPUSH
22937: CALL_OW 311
22941: OR
22942: AND
22943: IFFALSE 22984
// begin ComCollect ( j , x , y ) ;
22945: LD_VAR 0 2
22949: PPUSH
22950: LD_VAR 0 6
22954: PPUSH
22955: LD_VAR 0 7
22959: PPUSH
22960: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
22964: LD_VAR 0 2
22968: PPUSH
22969: LD_VAR 0 8
22973: PPUSH
22974: CALL_OW 172
// exit ;
22978: POP
22979: POP
22980: POP
22981: POP
22982: GO 22992
// end ;
22984: GO 22874
22986: POP
22987: POP
// end ; end ;
22988: GO 22363
22990: POP
22991: POP
// end ; end_of_file
22992: PPOPN 9
22994: END
// export function SOS_UnitDestroyed ( un ) ; begin
22995: LD_INT 0
22997: PPUSH
// ComRadiation ( un ) ;
22998: LD_VAR 0 1
23002: PPUSH
23003: CALL 24064 0 1
// end ;
23007: LD_VAR 0 2
23011: RET
// export function SOS_UnitKamikazed ( un ) ; begin
23012: LD_INT 0
23014: PPUSH
// ComRadiation ( un ) ;
23015: LD_VAR 0 1
23019: PPUSH
23020: CALL 24064 0 1
// end ;
23024: LD_VAR 0 2
23028: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
23029: LD_INT 0
23031: PPUSH
// end ;
23032: LD_VAR 0 4
23036: RET
// export function SOS_Command ( cmd ) ; begin
23037: LD_INT 0
23039: PPUSH
// end ;
23040: LD_VAR 0 2
23044: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
23045: LD_INT 0
23047: PPUSH
// end ;
23048: LD_VAR 0 6
23052: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
23053: LD_INT 0
23055: PPUSH
23056: PPUSH
23057: PPUSH
23058: PPUSH
// if not vehicle or not factory then
23059: LD_VAR 0 1
23063: NOT
23064: PUSH
23065: LD_VAR 0 2
23069: NOT
23070: OR
23071: IFFALSE 23075
// exit ;
23073: GO 23655
// if not factoryWaypoints then
23075: LD_EXP 87
23079: NOT
23080: IFFALSE 23084
// exit ;
23082: GO 23655
// for i := 1 to Count ( factoryWaypoints ) do
23084: LD_ADDR_VAR 0 4
23088: PUSH
23089: DOUBLE
23090: LD_INT 1
23092: DEC
23093: ST_TO_ADDR
23094: LD_EXP 87
23098: PPUSH
23099: CALL 30545 0 1
23103: PUSH
23104: FOR_TO
23105: IFFALSE 23653
// if factoryWaypoints [ i ] [ 2 ] = factory then
23107: LD_EXP 87
23111: PUSH
23112: LD_VAR 0 4
23116: ARRAY
23117: PUSH
23118: LD_INT 2
23120: ARRAY
23121: PUSH
23122: LD_VAR 0 2
23126: EQUAL
23127: IFFALSE 23651
// begin if GetControl ( vehicle ) = control_manual then
23129: LD_VAR 0 1
23133: PPUSH
23134: CALL_OW 263
23138: PUSH
23139: LD_INT 1
23141: EQUAL
23142: IFFALSE 23504
// begin driver := IsDrivenBy ( vehicle ) ;
23144: LD_ADDR_VAR 0 5
23148: PUSH
23149: LD_VAR 0 1
23153: PPUSH
23154: CALL_OW 311
23158: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
23159: LD_VAR 0 5
23163: PUSH
23164: LD_EXP 88
23168: IN
23169: PUSH
23170: LD_VAR 0 1
23174: PUSH
23175: LD_EXP 88
23179: IN
23180: OR
23181: IFFALSE 23187
// exit ;
23183: POP
23184: POP
23185: GO 23655
// if not HasTask ( driver ) then
23187: LD_VAR 0 5
23191: PPUSH
23192: CALL_OW 314
23196: NOT
23197: IFFALSE 23502
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
23199: LD_ADDR_EXP 88
23203: PUSH
23204: LD_EXP 88
23208: PPUSH
23209: LD_VAR 0 5
23213: PPUSH
23214: CALL 66154 0 2
23218: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
23219: LD_ADDR_EXP 88
23223: PUSH
23224: LD_EXP 88
23228: PPUSH
23229: LD_VAR 0 1
23233: PPUSH
23234: CALL 66154 0 2
23238: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
23239: LD_ADDR_VAR 0 6
23243: PUSH
23244: LD_EXP 87
23248: PUSH
23249: LD_VAR 0 4
23253: ARRAY
23254: PUSH
23255: LD_INT 3
23257: ARRAY
23258: PPUSH
23259: LD_EXP 87
23263: PUSH
23264: LD_VAR 0 4
23268: ARRAY
23269: PUSH
23270: LD_INT 4
23272: ARRAY
23273: PPUSH
23274: CALL_OW 428
23278: ST_TO_ADDR
// if hex then
23279: LD_VAR 0 6
23283: IFFALSE 23301
// ComMoveUnit ( driver , hex ) else
23285: LD_VAR 0 5
23289: PPUSH
23290: LD_VAR 0 6
23294: PPUSH
23295: CALL_OW 112
23299: GO 23385
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
23301: LD_VAR 0 1
23305: PPUSH
23306: LD_EXP 87
23310: PUSH
23311: LD_VAR 0 4
23315: ARRAY
23316: PUSH
23317: LD_INT 3
23319: ARRAY
23320: PPUSH
23321: LD_EXP 87
23325: PUSH
23326: LD_VAR 0 4
23330: ARRAY
23331: PUSH
23332: LD_INT 4
23334: ARRAY
23335: PPUSH
23336: CALL_OW 297
23340: PUSH
23341: LD_INT 0
23343: GREATER
23344: IFFALSE 23385
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
23346: LD_VAR 0 5
23350: PPUSH
23351: LD_EXP 87
23355: PUSH
23356: LD_VAR 0 4
23360: ARRAY
23361: PUSH
23362: LD_INT 3
23364: ARRAY
23365: PPUSH
23366: LD_EXP 87
23370: PUSH
23371: LD_VAR 0 4
23375: ARRAY
23376: PUSH
23377: LD_INT 4
23379: ARRAY
23380: PPUSH
23381: CALL_OW 111
// AddComExitVehicle ( driver ) ;
23385: LD_VAR 0 5
23389: PPUSH
23390: CALL_OW 181
// if Multiplayer then
23394: LD_OWVAR 4
23398: IFFALSE 23447
// begin repeat wait ( 10 ) ;
23400: LD_INT 10
23402: PPUSH
23403: CALL_OW 67
// until not IsInUnit ( driver ) ;
23407: LD_VAR 0 5
23411: PPUSH
23412: CALL_OW 310
23416: NOT
23417: IFFALSE 23400
// if not HasTask ( driver ) then
23419: LD_VAR 0 5
23423: PPUSH
23424: CALL_OW 314
23428: NOT
23429: IFFALSE 23445
// ComEnterUnit ( driver , factory ) ;
23431: LD_VAR 0 5
23435: PPUSH
23436: LD_VAR 0 2
23440: PPUSH
23441: CALL_OW 120
// end else
23445: GO 23461
// AddComEnterUnit ( driver , factory ) ;
23447: LD_VAR 0 5
23451: PPUSH
23452: LD_VAR 0 2
23456: PPUSH
23457: CALL_OW 180
// wait ( 0 0$1 ) ;
23461: LD_INT 35
23463: PPUSH
23464: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
23468: LD_ADDR_EXP 88
23472: PUSH
23473: LD_EXP 88
23477: PUSH
23478: LD_VAR 0 5
23482: DIFF
23483: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
23484: LD_ADDR_EXP 88
23488: PUSH
23489: LD_EXP 88
23493: PUSH
23494: LD_VAR 0 1
23498: DIFF
23499: ST_TO_ADDR
// break ;
23500: GO 23653
// end ; end else
23502: GO 23651
// if GetControl ( vehicle ) = control_remote then
23504: LD_VAR 0 1
23508: PPUSH
23509: CALL_OW 263
23513: PUSH
23514: LD_INT 2
23516: EQUAL
23517: IFFALSE 23603
// begin wait ( 0 0$2 ) ;
23519: LD_INT 70
23521: PPUSH
23522: CALL_OW 67
// repeat wait ( 10 ) ;
23526: LD_INT 10
23528: PPUSH
23529: CALL_OW 67
// Connect ( vehicle ) ;
23533: LD_VAR 0 1
23537: PPUSH
23538: CALL 36751 0 1
// until IsControledBy ( vehicle ) ;
23542: LD_VAR 0 1
23546: PPUSH
23547: CALL_OW 312
23551: IFFALSE 23526
// wait ( 10 ) ;
23553: LD_INT 10
23555: PPUSH
23556: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
23560: LD_VAR 0 1
23564: PPUSH
23565: LD_EXP 87
23569: PUSH
23570: LD_VAR 0 4
23574: ARRAY
23575: PUSH
23576: LD_INT 3
23578: ARRAY
23579: PPUSH
23580: LD_EXP 87
23584: PUSH
23585: LD_VAR 0 4
23589: ARRAY
23590: PUSH
23591: LD_INT 4
23593: ARRAY
23594: PPUSH
23595: CALL_OW 111
// break ;
23599: GO 23653
// end else
23601: GO 23651
// begin wait ( 0 0$3 ) ;
23603: LD_INT 105
23605: PPUSH
23606: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
23610: LD_VAR 0 1
23614: PPUSH
23615: LD_EXP 87
23619: PUSH
23620: LD_VAR 0 4
23624: ARRAY
23625: PUSH
23626: LD_INT 3
23628: ARRAY
23629: PPUSH
23630: LD_EXP 87
23634: PUSH
23635: LD_VAR 0 4
23639: ARRAY
23640: PUSH
23641: LD_INT 4
23643: ARRAY
23644: PPUSH
23645: CALL_OW 111
// break ;
23649: GO 23653
// end ; end ;
23651: GO 23104
23653: POP
23654: POP
// end ;
23655: LD_VAR 0 3
23659: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
23660: LD_INT 0
23662: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
23663: LD_VAR 0 1
23667: PUSH
23668: LD_INT 250
23670: EQUAL
23671: PUSH
23672: LD_VAR 0 2
23676: PPUSH
23677: CALL_OW 264
23681: PUSH
23682: LD_INT 81
23684: EQUAL
23685: AND
23686: IFFALSE 23707
// MinerPlaceMine ( unit , x , y ) ;
23688: LD_VAR 0 2
23692: PPUSH
23693: LD_VAR 0 4
23697: PPUSH
23698: LD_VAR 0 5
23702: PPUSH
23703: CALL 26799 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
23707: LD_VAR 0 1
23711: PUSH
23712: LD_INT 251
23714: EQUAL
23715: PUSH
23716: LD_VAR 0 2
23720: PPUSH
23721: CALL_OW 264
23725: PUSH
23726: LD_INT 81
23728: EQUAL
23729: AND
23730: IFFALSE 23751
// MinerDetonateMine ( unit , x , y ) ;
23732: LD_VAR 0 2
23736: PPUSH
23737: LD_VAR 0 4
23741: PPUSH
23742: LD_VAR 0 5
23746: PPUSH
23747: CALL 27074 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
23751: LD_VAR 0 1
23755: PUSH
23756: LD_INT 252
23758: EQUAL
23759: PUSH
23760: LD_VAR 0 2
23764: PPUSH
23765: CALL_OW 264
23769: PUSH
23770: LD_INT 81
23772: EQUAL
23773: AND
23774: IFFALSE 23795
// MinerCreateMinefield ( unit , x , y ) ;
23776: LD_VAR 0 2
23780: PPUSH
23781: LD_VAR 0 4
23785: PPUSH
23786: LD_VAR 0 5
23790: PPUSH
23791: CALL 27491 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
23795: LD_VAR 0 1
23799: PUSH
23800: LD_INT 253
23802: EQUAL
23803: PUSH
23804: LD_VAR 0 2
23808: PPUSH
23809: CALL_OW 257
23813: PUSH
23814: LD_INT 5
23816: EQUAL
23817: AND
23818: IFFALSE 23839
// ComBinocular ( unit , x , y ) ;
23820: LD_VAR 0 2
23824: PPUSH
23825: LD_VAR 0 4
23829: PPUSH
23830: LD_VAR 0 5
23834: PPUSH
23835: CALL 27860 0 3
// if selectedUnit then
23839: LD_VAR 0 3
23843: IFFALSE 23899
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
23845: LD_VAR 0 1
23849: PUSH
23850: LD_INT 254
23852: EQUAL
23853: PUSH
23854: LD_VAR 0 2
23858: PPUSH
23859: CALL_OW 264
23863: PUSH
23864: LD_INT 99
23866: EQUAL
23867: AND
23868: PUSH
23869: LD_VAR 0 3
23873: PPUSH
23874: CALL_OW 263
23878: PUSH
23879: LD_INT 3
23881: EQUAL
23882: AND
23883: IFFALSE 23899
// HackDestroyVehicle ( unit , selectedUnit ) ;
23885: LD_VAR 0 2
23889: PPUSH
23890: LD_VAR 0 3
23894: PPUSH
23895: CALL 26163 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
23899: LD_VAR 0 1
23903: PUSH
23904: LD_INT 255
23906: EQUAL
23907: PUSH
23908: LD_VAR 0 2
23912: PPUSH
23913: CALL_OW 264
23917: PUSH
23918: LD_INT 14
23920: PUSH
23921: LD_INT 53
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: IN
23928: AND
23929: PUSH
23930: LD_VAR 0 4
23934: PPUSH
23935: LD_VAR 0 5
23939: PPUSH
23940: CALL_OW 488
23944: AND
23945: IFFALSE 23969
// CutTreeXYR ( unit , x , y , 12 ) ;
23947: LD_VAR 0 2
23951: PPUSH
23952: LD_VAR 0 4
23956: PPUSH
23957: LD_VAR 0 5
23961: PPUSH
23962: LD_INT 12
23964: PPUSH
23965: CALL 24160 0 4
// if cmd = 256 then
23969: LD_VAR 0 1
23973: PUSH
23974: LD_INT 256
23976: EQUAL
23977: IFFALSE 23998
// SetFactoryWaypoint ( unit , x , y ) ;
23979: LD_VAR 0 2
23983: PPUSH
23984: LD_VAR 0 4
23988: PPUSH
23989: LD_VAR 0 5
23993: PPUSH
23994: CALL 21556 0 3
// if cmd = 257 then
23998: LD_VAR 0 1
24002: PUSH
24003: LD_INT 257
24005: EQUAL
24006: IFFALSE 24027
// SetWarehouseGatheringPoint ( unit , x , y ) ;
24008: LD_VAR 0 2
24012: PPUSH
24013: LD_VAR 0 4
24017: PPUSH
24018: LD_VAR 0 5
24022: PPUSH
24023: CALL 22046 0 3
// if cmd = 258 then
24027: LD_VAR 0 1
24031: PUSH
24032: LD_INT 258
24034: EQUAL
24035: IFFALSE 24059
// BurnTreeXYR ( unit , x , y , 8 ) ;
24037: LD_VAR 0 2
24041: PPUSH
24042: LD_VAR 0 4
24046: PPUSH
24047: LD_VAR 0 5
24051: PPUSH
24052: LD_INT 8
24054: PPUSH
24055: CALL 24554 0 4
// end ;
24059: LD_VAR 0 6
24063: RET
// export function ComRadiation ( un ) ; var eff ; begin
24064: LD_INT 0
24066: PPUSH
24067: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
24068: LD_VAR 0 1
24072: PPUSH
24073: CALL_OW 264
24077: PUSH
24078: LD_INT 91
24080: NONEQUAL
24081: IFFALSE 24085
// exit ;
24083: GO 24155
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24085: LD_INT 68
24087: PPUSH
24088: LD_VAR 0 1
24092: PPUSH
24093: CALL_OW 255
24097: PPUSH
24098: CALL_OW 321
24102: PUSH
24103: LD_INT 2
24105: EQUAL
24106: IFFALSE 24118
// eff := 50 else
24108: LD_ADDR_VAR 0 3
24112: PUSH
24113: LD_INT 50
24115: ST_TO_ADDR
24116: GO 24126
// eff := 25 ;
24118: LD_ADDR_VAR 0 3
24122: PUSH
24123: LD_INT 25
24125: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24126: LD_VAR 0 1
24130: PPUSH
24131: CALL_OW 250
24135: PPUSH
24136: LD_VAR 0 1
24140: PPUSH
24141: CALL_OW 251
24145: PPUSH
24146: LD_VAR 0 3
24150: PPUSH
24151: CALL_OW 495
// end ;
24155: LD_VAR 0 2
24159: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
24160: LD_INT 0
24162: PPUSH
24163: PPUSH
24164: PPUSH
24165: PPUSH
24166: PPUSH
24167: PPUSH
24168: PPUSH
24169: PPUSH
24170: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
24171: LD_VAR 0 1
24175: PPUSH
24176: CALL_OW 302
24180: NOT
24181: PUSH
24182: LD_VAR 0 2
24186: PPUSH
24187: LD_VAR 0 3
24191: PPUSH
24192: CALL_OW 488
24196: NOT
24197: OR
24198: PUSH
24199: LD_VAR 0 4
24203: NOT
24204: OR
24205: IFFALSE 24209
// exit ;
24207: GO 24549
// list := [ ] ;
24209: LD_ADDR_VAR 0 13
24213: PUSH
24214: EMPTY
24215: ST_TO_ADDR
// if x - r < 0 then
24216: LD_VAR 0 2
24220: PUSH
24221: LD_VAR 0 4
24225: MINUS
24226: PUSH
24227: LD_INT 0
24229: LESS
24230: IFFALSE 24242
// min_x := 0 else
24232: LD_ADDR_VAR 0 7
24236: PUSH
24237: LD_INT 0
24239: ST_TO_ADDR
24240: GO 24258
// min_x := x - r ;
24242: LD_ADDR_VAR 0 7
24246: PUSH
24247: LD_VAR 0 2
24251: PUSH
24252: LD_VAR 0 4
24256: MINUS
24257: ST_TO_ADDR
// if y - r < 0 then
24258: LD_VAR 0 3
24262: PUSH
24263: LD_VAR 0 4
24267: MINUS
24268: PUSH
24269: LD_INT 0
24271: LESS
24272: IFFALSE 24284
// min_y := 0 else
24274: LD_ADDR_VAR 0 8
24278: PUSH
24279: LD_INT 0
24281: ST_TO_ADDR
24282: GO 24300
// min_y := y - r ;
24284: LD_ADDR_VAR 0 8
24288: PUSH
24289: LD_VAR 0 3
24293: PUSH
24294: LD_VAR 0 4
24298: MINUS
24299: ST_TO_ADDR
// max_x := x + r ;
24300: LD_ADDR_VAR 0 9
24304: PUSH
24305: LD_VAR 0 2
24309: PUSH
24310: LD_VAR 0 4
24314: PLUS
24315: ST_TO_ADDR
// max_y := y + r ;
24316: LD_ADDR_VAR 0 10
24320: PUSH
24321: LD_VAR 0 3
24325: PUSH
24326: LD_VAR 0 4
24330: PLUS
24331: ST_TO_ADDR
// for _x = min_x to max_x do
24332: LD_ADDR_VAR 0 11
24336: PUSH
24337: DOUBLE
24338: LD_VAR 0 7
24342: DEC
24343: ST_TO_ADDR
24344: LD_VAR 0 9
24348: PUSH
24349: FOR_TO
24350: IFFALSE 24467
// for _y = min_y to max_y do
24352: LD_ADDR_VAR 0 12
24356: PUSH
24357: DOUBLE
24358: LD_VAR 0 8
24362: DEC
24363: ST_TO_ADDR
24364: LD_VAR 0 10
24368: PUSH
24369: FOR_TO
24370: IFFALSE 24463
// begin if not ValidHex ( _x , _y ) then
24372: LD_VAR 0 11
24376: PPUSH
24377: LD_VAR 0 12
24381: PPUSH
24382: CALL_OW 488
24386: NOT
24387: IFFALSE 24391
// continue ;
24389: GO 24369
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24391: LD_VAR 0 11
24395: PPUSH
24396: LD_VAR 0 12
24400: PPUSH
24401: CALL_OW 351
24405: PUSH
24406: LD_VAR 0 11
24410: PPUSH
24411: LD_VAR 0 12
24415: PPUSH
24416: CALL_OW 554
24420: AND
24421: IFFALSE 24461
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
24423: LD_ADDR_VAR 0 13
24427: PUSH
24428: LD_VAR 0 13
24432: PPUSH
24433: LD_VAR 0 13
24437: PUSH
24438: LD_INT 1
24440: PLUS
24441: PPUSH
24442: LD_VAR 0 11
24446: PUSH
24447: LD_VAR 0 12
24451: PUSH
24452: EMPTY
24453: LIST
24454: LIST
24455: PPUSH
24456: CALL_OW 2
24460: ST_TO_ADDR
// end ;
24461: GO 24369
24463: POP
24464: POP
24465: GO 24349
24467: POP
24468: POP
// if not list then
24469: LD_VAR 0 13
24473: NOT
24474: IFFALSE 24478
// exit ;
24476: GO 24549
// for i in list do
24478: LD_ADDR_VAR 0 6
24482: PUSH
24483: LD_VAR 0 13
24487: PUSH
24488: FOR_IN
24489: IFFALSE 24547
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
24491: LD_VAR 0 1
24495: PPUSH
24496: LD_STRING M
24498: PUSH
24499: LD_VAR 0 6
24503: PUSH
24504: LD_INT 1
24506: ARRAY
24507: PUSH
24508: LD_VAR 0 6
24512: PUSH
24513: LD_INT 2
24515: ARRAY
24516: PUSH
24517: LD_INT 0
24519: PUSH
24520: LD_INT 0
24522: PUSH
24523: LD_INT 0
24525: PUSH
24526: LD_INT 0
24528: PUSH
24529: EMPTY
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: LIST
24535: LIST
24536: LIST
24537: PUSH
24538: EMPTY
24539: LIST
24540: PPUSH
24541: CALL_OW 447
24545: GO 24488
24547: POP
24548: POP
// end ;
24549: LD_VAR 0 5
24553: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
24554: LD_INT 0
24556: PPUSH
24557: PPUSH
24558: PPUSH
24559: PPUSH
24560: PPUSH
24561: PPUSH
24562: PPUSH
24563: PPUSH
24564: PPUSH
24565: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
24566: LD_VAR 0 1
24570: PPUSH
24571: CALL_OW 302
24575: NOT
24576: PUSH
24577: LD_VAR 0 2
24581: PPUSH
24582: LD_VAR 0 3
24586: PPUSH
24587: CALL_OW 488
24591: NOT
24592: OR
24593: PUSH
24594: LD_VAR 0 4
24598: NOT
24599: OR
24600: IFFALSE 24604
// exit ;
24602: GO 25117
// list := [ ] ;
24604: LD_ADDR_VAR 0 13
24608: PUSH
24609: EMPTY
24610: ST_TO_ADDR
// if x - r < 0 then
24611: LD_VAR 0 2
24615: PUSH
24616: LD_VAR 0 4
24620: MINUS
24621: PUSH
24622: LD_INT 0
24624: LESS
24625: IFFALSE 24637
// min_x := 0 else
24627: LD_ADDR_VAR 0 7
24631: PUSH
24632: LD_INT 0
24634: ST_TO_ADDR
24635: GO 24653
// min_x := x - r ;
24637: LD_ADDR_VAR 0 7
24641: PUSH
24642: LD_VAR 0 2
24646: PUSH
24647: LD_VAR 0 4
24651: MINUS
24652: ST_TO_ADDR
// if y - r < 0 then
24653: LD_VAR 0 3
24657: PUSH
24658: LD_VAR 0 4
24662: MINUS
24663: PUSH
24664: LD_INT 0
24666: LESS
24667: IFFALSE 24679
// min_y := 0 else
24669: LD_ADDR_VAR 0 8
24673: PUSH
24674: LD_INT 0
24676: ST_TO_ADDR
24677: GO 24695
// min_y := y - r ;
24679: LD_ADDR_VAR 0 8
24683: PUSH
24684: LD_VAR 0 3
24688: PUSH
24689: LD_VAR 0 4
24693: MINUS
24694: ST_TO_ADDR
// max_x := x + r ;
24695: LD_ADDR_VAR 0 9
24699: PUSH
24700: LD_VAR 0 2
24704: PUSH
24705: LD_VAR 0 4
24709: PLUS
24710: ST_TO_ADDR
// max_y := y + r ;
24711: LD_ADDR_VAR 0 10
24715: PUSH
24716: LD_VAR 0 3
24720: PUSH
24721: LD_VAR 0 4
24725: PLUS
24726: ST_TO_ADDR
// for _x = min_x to max_x do
24727: LD_ADDR_VAR 0 11
24731: PUSH
24732: DOUBLE
24733: LD_VAR 0 7
24737: DEC
24738: ST_TO_ADDR
24739: LD_VAR 0 9
24743: PUSH
24744: FOR_TO
24745: IFFALSE 24862
// for _y = min_y to max_y do
24747: LD_ADDR_VAR 0 12
24751: PUSH
24752: DOUBLE
24753: LD_VAR 0 8
24757: DEC
24758: ST_TO_ADDR
24759: LD_VAR 0 10
24763: PUSH
24764: FOR_TO
24765: IFFALSE 24858
// begin if not ValidHex ( _x , _y ) then
24767: LD_VAR 0 11
24771: PPUSH
24772: LD_VAR 0 12
24776: PPUSH
24777: CALL_OW 488
24781: NOT
24782: IFFALSE 24786
// continue ;
24784: GO 24764
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24786: LD_VAR 0 11
24790: PPUSH
24791: LD_VAR 0 12
24795: PPUSH
24796: CALL_OW 351
24800: PUSH
24801: LD_VAR 0 11
24805: PPUSH
24806: LD_VAR 0 12
24810: PPUSH
24811: CALL_OW 554
24815: AND
24816: IFFALSE 24856
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
24818: LD_ADDR_VAR 0 13
24822: PUSH
24823: LD_VAR 0 13
24827: PPUSH
24828: LD_VAR 0 13
24832: PUSH
24833: LD_INT 1
24835: PLUS
24836: PPUSH
24837: LD_VAR 0 11
24841: PUSH
24842: LD_VAR 0 12
24846: PUSH
24847: EMPTY
24848: LIST
24849: LIST
24850: PPUSH
24851: CALL_OW 2
24855: ST_TO_ADDR
// end ;
24856: GO 24764
24858: POP
24859: POP
24860: GO 24744
24862: POP
24863: POP
// if not list then
24864: LD_VAR 0 13
24868: NOT
24869: IFFALSE 24873
// exit ;
24871: GO 25117
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
24873: LD_ADDR_VAR 0 13
24877: PUSH
24878: LD_VAR 0 1
24882: PPUSH
24883: LD_VAR 0 13
24887: PPUSH
24888: LD_INT 1
24890: PPUSH
24891: LD_INT 1
24893: PPUSH
24894: CALL 33893 0 4
24898: ST_TO_ADDR
// ComStop ( flame ) ;
24899: LD_VAR 0 1
24903: PPUSH
24904: CALL_OW 141
// for i in list do
24908: LD_ADDR_VAR 0 6
24912: PUSH
24913: LD_VAR 0 13
24917: PUSH
24918: FOR_IN
24919: IFFALSE 24950
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
24921: LD_VAR 0 1
24925: PPUSH
24926: LD_VAR 0 6
24930: PUSH
24931: LD_INT 1
24933: ARRAY
24934: PPUSH
24935: LD_VAR 0 6
24939: PUSH
24940: LD_INT 2
24942: ARRAY
24943: PPUSH
24944: CALL_OW 176
24948: GO 24918
24950: POP
24951: POP
// repeat wait ( 0 0$1 ) ;
24952: LD_INT 35
24954: PPUSH
24955: CALL_OW 67
// task := GetTaskList ( flame ) ;
24959: LD_ADDR_VAR 0 14
24963: PUSH
24964: LD_VAR 0 1
24968: PPUSH
24969: CALL_OW 437
24973: ST_TO_ADDR
// if not task then
24974: LD_VAR 0 14
24978: NOT
24979: IFFALSE 24983
// exit ;
24981: GO 25117
// if task [ 1 ] [ 1 ] <> | then
24983: LD_VAR 0 14
24987: PUSH
24988: LD_INT 1
24990: ARRAY
24991: PUSH
24992: LD_INT 1
24994: ARRAY
24995: PUSH
24996: LD_STRING |
24998: NONEQUAL
24999: IFFALSE 25003
// exit ;
25001: GO 25117
// _x := task [ 1 ] [ 2 ] ;
25003: LD_ADDR_VAR 0 11
25007: PUSH
25008: LD_VAR 0 14
25012: PUSH
25013: LD_INT 1
25015: ARRAY
25016: PUSH
25017: LD_INT 2
25019: ARRAY
25020: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
25021: LD_ADDR_VAR 0 12
25025: PUSH
25026: LD_VAR 0 14
25030: PUSH
25031: LD_INT 1
25033: ARRAY
25034: PUSH
25035: LD_INT 3
25037: ARRAY
25038: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
25039: LD_VAR 0 11
25043: PPUSH
25044: LD_VAR 0 12
25048: PPUSH
25049: CALL_OW 351
25053: NOT
25054: PUSH
25055: LD_VAR 0 11
25059: PPUSH
25060: LD_VAR 0 12
25064: PPUSH
25065: CALL_OW 554
25069: NOT
25070: OR
25071: IFFALSE 25105
// begin task := Delete ( task , 1 ) ;
25073: LD_ADDR_VAR 0 14
25077: PUSH
25078: LD_VAR 0 14
25082: PPUSH
25083: LD_INT 1
25085: PPUSH
25086: CALL_OW 3
25090: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
25091: LD_VAR 0 1
25095: PPUSH
25096: LD_VAR 0 14
25100: PPUSH
25101: CALL_OW 446
// end ; until not HasTask ( flame ) ;
25105: LD_VAR 0 1
25109: PPUSH
25110: CALL_OW 314
25114: NOT
25115: IFFALSE 24952
// end ;
25117: LD_VAR 0 5
25121: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
25122: LD_EXP 91
25126: NOT
25127: IFFALSE 25177
25129: GO 25131
25131: DISABLE
// begin initHack := true ;
25132: LD_ADDR_EXP 91
25136: PUSH
25137: LD_INT 1
25139: ST_TO_ADDR
// hackTanks := [ ] ;
25140: LD_ADDR_EXP 92
25144: PUSH
25145: EMPTY
25146: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
25147: LD_ADDR_EXP 93
25151: PUSH
25152: EMPTY
25153: ST_TO_ADDR
// hackLimit := 3 ;
25154: LD_ADDR_EXP 94
25158: PUSH
25159: LD_INT 3
25161: ST_TO_ADDR
// hackDist := 12 ;
25162: LD_ADDR_EXP 95
25166: PUSH
25167: LD_INT 12
25169: ST_TO_ADDR
// hackCounter := [ ] ;
25170: LD_ADDR_EXP 96
25174: PUSH
25175: EMPTY
25176: ST_TO_ADDR
// end ;
25177: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
25178: LD_EXP 91
25182: PUSH
25183: LD_INT 34
25185: PUSH
25186: LD_INT 99
25188: PUSH
25189: EMPTY
25190: LIST
25191: LIST
25192: PPUSH
25193: CALL_OW 69
25197: AND
25198: IFFALSE 25451
25200: GO 25202
25202: DISABLE
25203: LD_INT 0
25205: PPUSH
25206: PPUSH
// begin enable ;
25207: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
25208: LD_ADDR_VAR 0 1
25212: PUSH
25213: LD_INT 34
25215: PUSH
25216: LD_INT 99
25218: PUSH
25219: EMPTY
25220: LIST
25221: LIST
25222: PPUSH
25223: CALL_OW 69
25227: PUSH
25228: FOR_IN
25229: IFFALSE 25449
// begin if not i in hackTanks then
25231: LD_VAR 0 1
25235: PUSH
25236: LD_EXP 92
25240: IN
25241: NOT
25242: IFFALSE 25325
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
25244: LD_ADDR_EXP 92
25248: PUSH
25249: LD_EXP 92
25253: PPUSH
25254: LD_EXP 92
25258: PUSH
25259: LD_INT 1
25261: PLUS
25262: PPUSH
25263: LD_VAR 0 1
25267: PPUSH
25268: CALL_OW 1
25272: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
25273: LD_ADDR_EXP 93
25277: PUSH
25278: LD_EXP 93
25282: PPUSH
25283: LD_EXP 93
25287: PUSH
25288: LD_INT 1
25290: PLUS
25291: PPUSH
25292: EMPTY
25293: PPUSH
25294: CALL_OW 1
25298: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
25299: LD_ADDR_EXP 96
25303: PUSH
25304: LD_EXP 96
25308: PPUSH
25309: LD_EXP 96
25313: PUSH
25314: LD_INT 1
25316: PLUS
25317: PPUSH
25318: EMPTY
25319: PPUSH
25320: CALL_OW 1
25324: ST_TO_ADDR
// end ; if not IsOk ( i ) then
25325: LD_VAR 0 1
25329: PPUSH
25330: CALL_OW 302
25334: NOT
25335: IFFALSE 25348
// begin HackUnlinkAll ( i ) ;
25337: LD_VAR 0 1
25341: PPUSH
25342: CALL 25454 0 1
// continue ;
25346: GO 25228
// end ; HackCheckCapturedStatus ( i ) ;
25348: LD_VAR 0 1
25352: PPUSH
25353: CALL 25897 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
25357: LD_ADDR_VAR 0 2
25361: PUSH
25362: LD_INT 81
25364: PUSH
25365: LD_VAR 0 1
25369: PPUSH
25370: CALL_OW 255
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: PUSH
25379: LD_INT 33
25381: PUSH
25382: LD_INT 3
25384: PUSH
25385: EMPTY
25386: LIST
25387: LIST
25388: PUSH
25389: LD_INT 91
25391: PUSH
25392: LD_VAR 0 1
25396: PUSH
25397: LD_EXP 95
25401: PUSH
25402: EMPTY
25403: LIST
25404: LIST
25405: LIST
25406: PUSH
25407: LD_INT 50
25409: PUSH
25410: EMPTY
25411: LIST
25412: PUSH
25413: EMPTY
25414: LIST
25415: LIST
25416: LIST
25417: LIST
25418: PPUSH
25419: CALL_OW 69
25423: ST_TO_ADDR
// if not tmp then
25424: LD_VAR 0 2
25428: NOT
25429: IFFALSE 25433
// continue ;
25431: GO 25228
// HackLink ( i , tmp ) ;
25433: LD_VAR 0 1
25437: PPUSH
25438: LD_VAR 0 2
25442: PPUSH
25443: CALL 25590 0 2
// end ;
25447: GO 25228
25449: POP
25450: POP
// end ;
25451: PPOPN 2
25453: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
25454: LD_INT 0
25456: PPUSH
25457: PPUSH
25458: PPUSH
// if not hack in hackTanks then
25459: LD_VAR 0 1
25463: PUSH
25464: LD_EXP 92
25468: IN
25469: NOT
25470: IFFALSE 25474
// exit ;
25472: GO 25585
// index := GetElementIndex ( hackTanks , hack ) ;
25474: LD_ADDR_VAR 0 4
25478: PUSH
25479: LD_EXP 92
25483: PPUSH
25484: LD_VAR 0 1
25488: PPUSH
25489: CALL 33190 0 2
25493: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
25494: LD_EXP 93
25498: PUSH
25499: LD_VAR 0 4
25503: ARRAY
25504: IFFALSE 25585
// begin for i in hackTanksCaptured [ index ] do
25506: LD_ADDR_VAR 0 3
25510: PUSH
25511: LD_EXP 93
25515: PUSH
25516: LD_VAR 0 4
25520: ARRAY
25521: PUSH
25522: FOR_IN
25523: IFFALSE 25549
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
25525: LD_VAR 0 3
25529: PUSH
25530: LD_INT 1
25532: ARRAY
25533: PPUSH
25534: LD_VAR 0 3
25538: PUSH
25539: LD_INT 2
25541: ARRAY
25542: PPUSH
25543: CALL_OW 235
25547: GO 25522
25549: POP
25550: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
25551: LD_ADDR_EXP 93
25555: PUSH
25556: LD_EXP 93
25560: PPUSH
25561: LD_VAR 0 4
25565: PPUSH
25566: EMPTY
25567: PPUSH
25568: CALL_OW 1
25572: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
25573: LD_VAR 0 1
25577: PPUSH
25578: LD_INT 0
25580: PPUSH
25581: CALL_OW 505
// end ; end ;
25585: LD_VAR 0 2
25589: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
25590: LD_INT 0
25592: PPUSH
25593: PPUSH
25594: PPUSH
// if not hack in hackTanks or not vehicles then
25595: LD_VAR 0 1
25599: PUSH
25600: LD_EXP 92
25604: IN
25605: NOT
25606: PUSH
25607: LD_VAR 0 2
25611: NOT
25612: OR
25613: IFFALSE 25617
// exit ;
25615: GO 25892
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
25617: LD_ADDR_VAR 0 2
25621: PUSH
25622: LD_VAR 0 1
25626: PPUSH
25627: LD_VAR 0 2
25631: PPUSH
25632: LD_INT 1
25634: PPUSH
25635: LD_INT 1
25637: PPUSH
25638: CALL 33840 0 4
25642: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
25643: LD_ADDR_VAR 0 5
25647: PUSH
25648: LD_EXP 92
25652: PPUSH
25653: LD_VAR 0 1
25657: PPUSH
25658: CALL 33190 0 2
25662: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
25663: LD_EXP 93
25667: PUSH
25668: LD_VAR 0 5
25672: ARRAY
25673: PUSH
25674: LD_EXP 94
25678: LESS
25679: IFFALSE 25868
// begin for i := 1 to vehicles do
25681: LD_ADDR_VAR 0 4
25685: PUSH
25686: DOUBLE
25687: LD_INT 1
25689: DEC
25690: ST_TO_ADDR
25691: LD_VAR 0 2
25695: PUSH
25696: FOR_TO
25697: IFFALSE 25866
// begin if hackTanksCaptured [ index ] = hackLimit then
25699: LD_EXP 93
25703: PUSH
25704: LD_VAR 0 5
25708: ARRAY
25709: PUSH
25710: LD_EXP 94
25714: EQUAL
25715: IFFALSE 25719
// break ;
25717: GO 25866
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
25719: LD_ADDR_EXP 96
25723: PUSH
25724: LD_EXP 96
25728: PPUSH
25729: LD_VAR 0 5
25733: PPUSH
25734: LD_EXP 96
25738: PUSH
25739: LD_VAR 0 5
25743: ARRAY
25744: PUSH
25745: LD_INT 1
25747: PLUS
25748: PPUSH
25749: CALL_OW 1
25753: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
25754: LD_ADDR_EXP 93
25758: PUSH
25759: LD_EXP 93
25763: PPUSH
25764: LD_VAR 0 5
25768: PUSH
25769: LD_EXP 93
25773: PUSH
25774: LD_VAR 0 5
25778: ARRAY
25779: PUSH
25780: LD_INT 1
25782: PLUS
25783: PUSH
25784: EMPTY
25785: LIST
25786: LIST
25787: PPUSH
25788: LD_VAR 0 2
25792: PUSH
25793: LD_VAR 0 4
25797: ARRAY
25798: PUSH
25799: LD_VAR 0 2
25803: PUSH
25804: LD_VAR 0 4
25808: ARRAY
25809: PPUSH
25810: CALL_OW 255
25814: PUSH
25815: EMPTY
25816: LIST
25817: LIST
25818: PPUSH
25819: CALL 33405 0 3
25823: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
25824: LD_VAR 0 2
25828: PUSH
25829: LD_VAR 0 4
25833: ARRAY
25834: PPUSH
25835: LD_VAR 0 1
25839: PPUSH
25840: CALL_OW 255
25844: PPUSH
25845: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
25849: LD_VAR 0 2
25853: PUSH
25854: LD_VAR 0 4
25858: ARRAY
25859: PPUSH
25860: CALL_OW 141
// end ;
25864: GO 25696
25866: POP
25867: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25868: LD_VAR 0 1
25872: PPUSH
25873: LD_EXP 93
25877: PUSH
25878: LD_VAR 0 5
25882: ARRAY
25883: PUSH
25884: LD_INT 0
25886: PLUS
25887: PPUSH
25888: CALL_OW 505
// end ;
25892: LD_VAR 0 3
25896: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
25897: LD_INT 0
25899: PPUSH
25900: PPUSH
25901: PPUSH
25902: PPUSH
// if not hack in hackTanks then
25903: LD_VAR 0 1
25907: PUSH
25908: LD_EXP 92
25912: IN
25913: NOT
25914: IFFALSE 25918
// exit ;
25916: GO 26158
// index := GetElementIndex ( hackTanks , hack ) ;
25918: LD_ADDR_VAR 0 4
25922: PUSH
25923: LD_EXP 92
25927: PPUSH
25928: LD_VAR 0 1
25932: PPUSH
25933: CALL 33190 0 2
25937: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
25938: LD_ADDR_VAR 0 3
25942: PUSH
25943: DOUBLE
25944: LD_EXP 93
25948: PUSH
25949: LD_VAR 0 4
25953: ARRAY
25954: INC
25955: ST_TO_ADDR
25956: LD_INT 1
25958: PUSH
25959: FOR_DOWNTO
25960: IFFALSE 26132
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
25962: LD_ADDR_VAR 0 5
25966: PUSH
25967: LD_EXP 93
25971: PUSH
25972: LD_VAR 0 4
25976: ARRAY
25977: PUSH
25978: LD_VAR 0 3
25982: ARRAY
25983: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
25984: LD_VAR 0 5
25988: PUSH
25989: LD_INT 1
25991: ARRAY
25992: PPUSH
25993: CALL_OW 302
25997: NOT
25998: PUSH
25999: LD_VAR 0 5
26003: PUSH
26004: LD_INT 1
26006: ARRAY
26007: PPUSH
26008: CALL_OW 255
26012: PUSH
26013: LD_VAR 0 1
26017: PPUSH
26018: CALL_OW 255
26022: NONEQUAL
26023: OR
26024: IFFALSE 26130
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
26026: LD_VAR 0 5
26030: PUSH
26031: LD_INT 1
26033: ARRAY
26034: PPUSH
26035: CALL_OW 305
26039: PUSH
26040: LD_VAR 0 5
26044: PUSH
26045: LD_INT 1
26047: ARRAY
26048: PPUSH
26049: CALL_OW 255
26053: PUSH
26054: LD_VAR 0 1
26058: PPUSH
26059: CALL_OW 255
26063: EQUAL
26064: AND
26065: IFFALSE 26089
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
26067: LD_VAR 0 5
26071: PUSH
26072: LD_INT 1
26074: ARRAY
26075: PPUSH
26076: LD_VAR 0 5
26080: PUSH
26081: LD_INT 2
26083: ARRAY
26084: PPUSH
26085: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
26089: LD_ADDR_EXP 93
26093: PUSH
26094: LD_EXP 93
26098: PPUSH
26099: LD_VAR 0 4
26103: PPUSH
26104: LD_EXP 93
26108: PUSH
26109: LD_VAR 0 4
26113: ARRAY
26114: PPUSH
26115: LD_VAR 0 3
26119: PPUSH
26120: CALL_OW 3
26124: PPUSH
26125: CALL_OW 1
26129: ST_TO_ADDR
// end ; end ;
26130: GO 25959
26132: POP
26133: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26134: LD_VAR 0 1
26138: PPUSH
26139: LD_EXP 93
26143: PUSH
26144: LD_VAR 0 4
26148: ARRAY
26149: PUSH
26150: LD_INT 0
26152: PLUS
26153: PPUSH
26154: CALL_OW 505
// end ;
26158: LD_VAR 0 2
26162: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
26163: LD_INT 0
26165: PPUSH
26166: PPUSH
26167: PPUSH
26168: PPUSH
// if not hack in hackTanks then
26169: LD_VAR 0 1
26173: PUSH
26174: LD_EXP 92
26178: IN
26179: NOT
26180: IFFALSE 26184
// exit ;
26182: GO 26269
// index := GetElementIndex ( hackTanks , hack ) ;
26184: LD_ADDR_VAR 0 5
26188: PUSH
26189: LD_EXP 92
26193: PPUSH
26194: LD_VAR 0 1
26198: PPUSH
26199: CALL 33190 0 2
26203: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
26204: LD_ADDR_VAR 0 4
26208: PUSH
26209: DOUBLE
26210: LD_INT 1
26212: DEC
26213: ST_TO_ADDR
26214: LD_EXP 93
26218: PUSH
26219: LD_VAR 0 5
26223: ARRAY
26224: PUSH
26225: FOR_TO
26226: IFFALSE 26267
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
26228: LD_EXP 93
26232: PUSH
26233: LD_VAR 0 5
26237: ARRAY
26238: PUSH
26239: LD_VAR 0 4
26243: ARRAY
26244: PUSH
26245: LD_INT 1
26247: ARRAY
26248: PUSH
26249: LD_VAR 0 2
26253: EQUAL
26254: IFFALSE 26265
// KillUnit ( vehicle ) ;
26256: LD_VAR 0 2
26260: PPUSH
26261: CALL_OW 66
26265: GO 26225
26267: POP
26268: POP
// end ;
26269: LD_VAR 0 3
26273: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
26274: LD_EXP 97
26278: NOT
26279: IFFALSE 26314
26281: GO 26283
26283: DISABLE
// begin initMiner := true ;
26284: LD_ADDR_EXP 97
26288: PUSH
26289: LD_INT 1
26291: ST_TO_ADDR
// minersList := [ ] ;
26292: LD_ADDR_EXP 98
26296: PUSH
26297: EMPTY
26298: ST_TO_ADDR
// minerMinesList := [ ] ;
26299: LD_ADDR_EXP 99
26303: PUSH
26304: EMPTY
26305: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
26306: LD_ADDR_EXP 100
26310: PUSH
26311: LD_INT 5
26313: ST_TO_ADDR
// end ;
26314: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
26315: LD_EXP 97
26319: PUSH
26320: LD_INT 34
26322: PUSH
26323: LD_INT 81
26325: PUSH
26326: EMPTY
26327: LIST
26328: LIST
26329: PPUSH
26330: CALL_OW 69
26334: AND
26335: IFFALSE 26796
26337: GO 26339
26339: DISABLE
26340: LD_INT 0
26342: PPUSH
26343: PPUSH
26344: PPUSH
26345: PPUSH
// begin enable ;
26346: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
26347: LD_ADDR_VAR 0 1
26351: PUSH
26352: LD_INT 34
26354: PUSH
26355: LD_INT 81
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: PPUSH
26362: CALL_OW 69
26366: PUSH
26367: FOR_IN
26368: IFFALSE 26440
// begin if not i in minersList then
26370: LD_VAR 0 1
26374: PUSH
26375: LD_EXP 98
26379: IN
26380: NOT
26381: IFFALSE 26438
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
26383: LD_ADDR_EXP 98
26387: PUSH
26388: LD_EXP 98
26392: PPUSH
26393: LD_EXP 98
26397: PUSH
26398: LD_INT 1
26400: PLUS
26401: PPUSH
26402: LD_VAR 0 1
26406: PPUSH
26407: CALL_OW 1
26411: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
26412: LD_ADDR_EXP 99
26416: PUSH
26417: LD_EXP 99
26421: PPUSH
26422: LD_EXP 99
26426: PUSH
26427: LD_INT 1
26429: PLUS
26430: PPUSH
26431: EMPTY
26432: PPUSH
26433: CALL_OW 1
26437: ST_TO_ADDR
// end end ;
26438: GO 26367
26440: POP
26441: POP
// for i := minerMinesList downto 1 do
26442: LD_ADDR_VAR 0 1
26446: PUSH
26447: DOUBLE
26448: LD_EXP 99
26452: INC
26453: ST_TO_ADDR
26454: LD_INT 1
26456: PUSH
26457: FOR_DOWNTO
26458: IFFALSE 26794
// begin if IsLive ( minersList [ i ] ) then
26460: LD_EXP 98
26464: PUSH
26465: LD_VAR 0 1
26469: ARRAY
26470: PPUSH
26471: CALL_OW 300
26475: IFFALSE 26503
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
26477: LD_EXP 98
26481: PUSH
26482: LD_VAR 0 1
26486: ARRAY
26487: PPUSH
26488: LD_EXP 99
26492: PUSH
26493: LD_VAR 0 1
26497: ARRAY
26498: PPUSH
26499: CALL_OW 505
// if not minerMinesList [ i ] then
26503: LD_EXP 99
26507: PUSH
26508: LD_VAR 0 1
26512: ARRAY
26513: NOT
26514: IFFALSE 26518
// continue ;
26516: GO 26457
// for j := minerMinesList [ i ] downto 1 do
26518: LD_ADDR_VAR 0 2
26522: PUSH
26523: DOUBLE
26524: LD_EXP 99
26528: PUSH
26529: LD_VAR 0 1
26533: ARRAY
26534: INC
26535: ST_TO_ADDR
26536: LD_INT 1
26538: PUSH
26539: FOR_DOWNTO
26540: IFFALSE 26790
// begin side := GetSide ( minersList [ i ] ) ;
26542: LD_ADDR_VAR 0 3
26546: PUSH
26547: LD_EXP 98
26551: PUSH
26552: LD_VAR 0 1
26556: ARRAY
26557: PPUSH
26558: CALL_OW 255
26562: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
26563: LD_ADDR_VAR 0 4
26567: PUSH
26568: LD_EXP 99
26572: PUSH
26573: LD_VAR 0 1
26577: ARRAY
26578: PUSH
26579: LD_VAR 0 2
26583: ARRAY
26584: PUSH
26585: LD_INT 1
26587: ARRAY
26588: PPUSH
26589: LD_EXP 99
26593: PUSH
26594: LD_VAR 0 1
26598: ARRAY
26599: PUSH
26600: LD_VAR 0 2
26604: ARRAY
26605: PUSH
26606: LD_INT 2
26608: ARRAY
26609: PPUSH
26610: CALL_OW 428
26614: ST_TO_ADDR
// if not tmp then
26615: LD_VAR 0 4
26619: NOT
26620: IFFALSE 26624
// continue ;
26622: GO 26539
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
26624: LD_VAR 0 4
26628: PUSH
26629: LD_INT 81
26631: PUSH
26632: LD_VAR 0 3
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: PPUSH
26641: CALL_OW 69
26645: IN
26646: PUSH
26647: LD_EXP 99
26651: PUSH
26652: LD_VAR 0 1
26656: ARRAY
26657: PUSH
26658: LD_VAR 0 2
26662: ARRAY
26663: PUSH
26664: LD_INT 1
26666: ARRAY
26667: PPUSH
26668: LD_EXP 99
26672: PUSH
26673: LD_VAR 0 1
26677: ARRAY
26678: PUSH
26679: LD_VAR 0 2
26683: ARRAY
26684: PUSH
26685: LD_INT 2
26687: ARRAY
26688: PPUSH
26689: CALL_OW 458
26693: AND
26694: IFFALSE 26788
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
26696: LD_EXP 99
26700: PUSH
26701: LD_VAR 0 1
26705: ARRAY
26706: PUSH
26707: LD_VAR 0 2
26711: ARRAY
26712: PUSH
26713: LD_INT 1
26715: ARRAY
26716: PPUSH
26717: LD_EXP 99
26721: PUSH
26722: LD_VAR 0 1
26726: ARRAY
26727: PUSH
26728: LD_VAR 0 2
26732: ARRAY
26733: PUSH
26734: LD_INT 2
26736: ARRAY
26737: PPUSH
26738: LD_VAR 0 3
26742: PPUSH
26743: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
26747: LD_ADDR_EXP 99
26751: PUSH
26752: LD_EXP 99
26756: PPUSH
26757: LD_VAR 0 1
26761: PPUSH
26762: LD_EXP 99
26766: PUSH
26767: LD_VAR 0 1
26771: ARRAY
26772: PPUSH
26773: LD_VAR 0 2
26777: PPUSH
26778: CALL_OW 3
26782: PPUSH
26783: CALL_OW 1
26787: ST_TO_ADDR
// end ; end ;
26788: GO 26539
26790: POP
26791: POP
// end ;
26792: GO 26457
26794: POP
26795: POP
// end ;
26796: PPOPN 4
26798: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
26799: LD_INT 0
26801: PPUSH
26802: PPUSH
// result := false ;
26803: LD_ADDR_VAR 0 4
26807: PUSH
26808: LD_INT 0
26810: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
26811: LD_VAR 0 1
26815: PPUSH
26816: CALL_OW 264
26820: PUSH
26821: LD_INT 81
26823: EQUAL
26824: NOT
26825: IFFALSE 26829
// exit ;
26827: GO 27069
// index := GetElementIndex ( minersList , unit ) ;
26829: LD_ADDR_VAR 0 5
26833: PUSH
26834: LD_EXP 98
26838: PPUSH
26839: LD_VAR 0 1
26843: PPUSH
26844: CALL 33190 0 2
26848: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
26849: LD_EXP 99
26853: PUSH
26854: LD_VAR 0 5
26858: ARRAY
26859: PUSH
26860: LD_EXP 100
26864: GREATEREQUAL
26865: IFFALSE 26869
// exit ;
26867: GO 27069
// ComMoveXY ( unit , x , y ) ;
26869: LD_VAR 0 1
26873: PPUSH
26874: LD_VAR 0 2
26878: PPUSH
26879: LD_VAR 0 3
26883: PPUSH
26884: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26888: LD_INT 35
26890: PPUSH
26891: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
26895: LD_VAR 0 1
26899: PPUSH
26900: LD_VAR 0 2
26904: PPUSH
26905: LD_VAR 0 3
26909: PPUSH
26910: CALL 64951 0 3
26914: NOT
26915: PUSH
26916: LD_VAR 0 1
26920: PPUSH
26921: CALL_OW 314
26925: AND
26926: IFFALSE 26930
// exit ;
26928: GO 27069
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
26930: LD_VAR 0 2
26934: PPUSH
26935: LD_VAR 0 3
26939: PPUSH
26940: CALL_OW 428
26944: PUSH
26945: LD_VAR 0 1
26949: EQUAL
26950: PUSH
26951: LD_VAR 0 1
26955: PPUSH
26956: CALL_OW 314
26960: NOT
26961: AND
26962: IFFALSE 26888
// PlaySoundXY ( x , y , PlantMine ) ;
26964: LD_VAR 0 2
26968: PPUSH
26969: LD_VAR 0 3
26973: PPUSH
26974: LD_STRING PlantMine
26976: PPUSH
26977: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
26981: LD_VAR 0 2
26985: PPUSH
26986: LD_VAR 0 3
26990: PPUSH
26991: LD_VAR 0 1
26995: PPUSH
26996: CALL_OW 255
27000: PPUSH
27001: LD_INT 0
27003: PPUSH
27004: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
27008: LD_ADDR_EXP 99
27012: PUSH
27013: LD_EXP 99
27017: PPUSH
27018: LD_VAR 0 5
27022: PUSH
27023: LD_EXP 99
27027: PUSH
27028: LD_VAR 0 5
27032: ARRAY
27033: PUSH
27034: LD_INT 1
27036: PLUS
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: PPUSH
27042: LD_VAR 0 2
27046: PUSH
27047: LD_VAR 0 3
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: PPUSH
27056: CALL 33405 0 3
27060: ST_TO_ADDR
// result := true ;
27061: LD_ADDR_VAR 0 4
27065: PUSH
27066: LD_INT 1
27068: ST_TO_ADDR
// end ;
27069: LD_VAR 0 4
27073: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
27074: LD_INT 0
27076: PPUSH
27077: PPUSH
27078: PPUSH
// if not unit in minersList then
27079: LD_VAR 0 1
27083: PUSH
27084: LD_EXP 98
27088: IN
27089: NOT
27090: IFFALSE 27094
// exit ;
27092: GO 27486
// index := GetElementIndex ( minersList , unit ) ;
27094: LD_ADDR_VAR 0 6
27098: PUSH
27099: LD_EXP 98
27103: PPUSH
27104: LD_VAR 0 1
27108: PPUSH
27109: CALL 33190 0 2
27113: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
27114: LD_ADDR_VAR 0 5
27118: PUSH
27119: DOUBLE
27120: LD_EXP 99
27124: PUSH
27125: LD_VAR 0 6
27129: ARRAY
27130: INC
27131: ST_TO_ADDR
27132: LD_INT 1
27134: PUSH
27135: FOR_DOWNTO
27136: IFFALSE 27297
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
27138: LD_EXP 99
27142: PUSH
27143: LD_VAR 0 6
27147: ARRAY
27148: PUSH
27149: LD_VAR 0 5
27153: ARRAY
27154: PUSH
27155: LD_INT 1
27157: ARRAY
27158: PUSH
27159: LD_VAR 0 2
27163: EQUAL
27164: PUSH
27165: LD_EXP 99
27169: PUSH
27170: LD_VAR 0 6
27174: ARRAY
27175: PUSH
27176: LD_VAR 0 5
27180: ARRAY
27181: PUSH
27182: LD_INT 2
27184: ARRAY
27185: PUSH
27186: LD_VAR 0 3
27190: EQUAL
27191: AND
27192: IFFALSE 27295
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27194: LD_EXP 99
27198: PUSH
27199: LD_VAR 0 6
27203: ARRAY
27204: PUSH
27205: LD_VAR 0 5
27209: ARRAY
27210: PUSH
27211: LD_INT 1
27213: ARRAY
27214: PPUSH
27215: LD_EXP 99
27219: PUSH
27220: LD_VAR 0 6
27224: ARRAY
27225: PUSH
27226: LD_VAR 0 5
27230: ARRAY
27231: PUSH
27232: LD_INT 2
27234: ARRAY
27235: PPUSH
27236: LD_VAR 0 1
27240: PPUSH
27241: CALL_OW 255
27245: PPUSH
27246: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27250: LD_ADDR_EXP 99
27254: PUSH
27255: LD_EXP 99
27259: PPUSH
27260: LD_VAR 0 6
27264: PPUSH
27265: LD_EXP 99
27269: PUSH
27270: LD_VAR 0 6
27274: ARRAY
27275: PPUSH
27276: LD_VAR 0 5
27280: PPUSH
27281: CALL_OW 3
27285: PPUSH
27286: CALL_OW 1
27290: ST_TO_ADDR
// exit ;
27291: POP
27292: POP
27293: GO 27486
// end ; end ;
27295: GO 27135
27297: POP
27298: POP
// for i := minerMinesList [ index ] downto 1 do
27299: LD_ADDR_VAR 0 5
27303: PUSH
27304: DOUBLE
27305: LD_EXP 99
27309: PUSH
27310: LD_VAR 0 6
27314: ARRAY
27315: INC
27316: ST_TO_ADDR
27317: LD_INT 1
27319: PUSH
27320: FOR_DOWNTO
27321: IFFALSE 27484
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
27323: LD_EXP 99
27327: PUSH
27328: LD_VAR 0 6
27332: ARRAY
27333: PUSH
27334: LD_VAR 0 5
27338: ARRAY
27339: PUSH
27340: LD_INT 1
27342: ARRAY
27343: PPUSH
27344: LD_EXP 99
27348: PUSH
27349: LD_VAR 0 6
27353: ARRAY
27354: PUSH
27355: LD_VAR 0 5
27359: ARRAY
27360: PUSH
27361: LD_INT 2
27363: ARRAY
27364: PPUSH
27365: LD_VAR 0 2
27369: PPUSH
27370: LD_VAR 0 3
27374: PPUSH
27375: CALL_OW 298
27379: PUSH
27380: LD_INT 6
27382: LESS
27383: IFFALSE 27482
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27385: LD_EXP 99
27389: PUSH
27390: LD_VAR 0 6
27394: ARRAY
27395: PUSH
27396: LD_VAR 0 5
27400: ARRAY
27401: PUSH
27402: LD_INT 1
27404: ARRAY
27405: PPUSH
27406: LD_EXP 99
27410: PUSH
27411: LD_VAR 0 6
27415: ARRAY
27416: PUSH
27417: LD_VAR 0 5
27421: ARRAY
27422: PUSH
27423: LD_INT 2
27425: ARRAY
27426: PPUSH
27427: LD_VAR 0 1
27431: PPUSH
27432: CALL_OW 255
27436: PPUSH
27437: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27441: LD_ADDR_EXP 99
27445: PUSH
27446: LD_EXP 99
27450: PPUSH
27451: LD_VAR 0 6
27455: PPUSH
27456: LD_EXP 99
27460: PUSH
27461: LD_VAR 0 6
27465: ARRAY
27466: PPUSH
27467: LD_VAR 0 5
27471: PPUSH
27472: CALL_OW 3
27476: PPUSH
27477: CALL_OW 1
27481: ST_TO_ADDR
// end ; end ;
27482: GO 27320
27484: POP
27485: POP
// end ;
27486: LD_VAR 0 4
27490: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
27491: LD_INT 0
27493: PPUSH
27494: PPUSH
27495: PPUSH
27496: PPUSH
27497: PPUSH
27498: PPUSH
27499: PPUSH
27500: PPUSH
27501: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
27502: LD_VAR 0 1
27506: PPUSH
27507: CALL_OW 264
27511: PUSH
27512: LD_INT 81
27514: EQUAL
27515: NOT
27516: PUSH
27517: LD_VAR 0 1
27521: PUSH
27522: LD_EXP 98
27526: IN
27527: NOT
27528: OR
27529: IFFALSE 27533
// exit ;
27531: GO 27855
// index := GetElementIndex ( minersList , unit ) ;
27533: LD_ADDR_VAR 0 6
27537: PUSH
27538: LD_EXP 98
27542: PPUSH
27543: LD_VAR 0 1
27547: PPUSH
27548: CALL 33190 0 2
27552: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
27553: LD_ADDR_VAR 0 8
27557: PUSH
27558: LD_EXP 100
27562: PUSH
27563: LD_EXP 99
27567: PUSH
27568: LD_VAR 0 6
27572: ARRAY
27573: MINUS
27574: ST_TO_ADDR
// if not minesFreeAmount then
27575: LD_VAR 0 8
27579: NOT
27580: IFFALSE 27584
// exit ;
27582: GO 27855
// tmp := [ ] ;
27584: LD_ADDR_VAR 0 7
27588: PUSH
27589: EMPTY
27590: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
27591: LD_ADDR_VAR 0 5
27595: PUSH
27596: DOUBLE
27597: LD_INT 1
27599: DEC
27600: ST_TO_ADDR
27601: LD_VAR 0 8
27605: PUSH
27606: FOR_TO
27607: IFFALSE 27802
// begin _d := rand ( 0 , 5 ) ;
27609: LD_ADDR_VAR 0 11
27613: PUSH
27614: LD_INT 0
27616: PPUSH
27617: LD_INT 5
27619: PPUSH
27620: CALL_OW 12
27624: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
27625: LD_ADDR_VAR 0 12
27629: PUSH
27630: LD_INT 2
27632: PPUSH
27633: LD_INT 6
27635: PPUSH
27636: CALL_OW 12
27640: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
27641: LD_ADDR_VAR 0 9
27645: PUSH
27646: LD_VAR 0 2
27650: PPUSH
27651: LD_VAR 0 11
27655: PPUSH
27656: LD_VAR 0 12
27660: PPUSH
27661: CALL_OW 272
27665: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
27666: LD_ADDR_VAR 0 10
27670: PUSH
27671: LD_VAR 0 3
27675: PPUSH
27676: LD_VAR 0 11
27680: PPUSH
27681: LD_VAR 0 12
27685: PPUSH
27686: CALL_OW 273
27690: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
27691: LD_VAR 0 9
27695: PPUSH
27696: LD_VAR 0 10
27700: PPUSH
27701: CALL_OW 488
27705: PUSH
27706: LD_VAR 0 9
27710: PUSH
27711: LD_VAR 0 10
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: PUSH
27720: LD_VAR 0 7
27724: IN
27725: NOT
27726: AND
27727: PUSH
27728: LD_VAR 0 9
27732: PPUSH
27733: LD_VAR 0 10
27737: PPUSH
27738: CALL_OW 458
27742: NOT
27743: AND
27744: IFFALSE 27786
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
27746: LD_ADDR_VAR 0 7
27750: PUSH
27751: LD_VAR 0 7
27755: PPUSH
27756: LD_VAR 0 7
27760: PUSH
27761: LD_INT 1
27763: PLUS
27764: PPUSH
27765: LD_VAR 0 9
27769: PUSH
27770: LD_VAR 0 10
27774: PUSH
27775: EMPTY
27776: LIST
27777: LIST
27778: PPUSH
27779: CALL_OW 1
27783: ST_TO_ADDR
27784: GO 27800
// i := i - 1 ;
27786: LD_ADDR_VAR 0 5
27790: PUSH
27791: LD_VAR 0 5
27795: PUSH
27796: LD_INT 1
27798: MINUS
27799: ST_TO_ADDR
// end ;
27800: GO 27606
27802: POP
27803: POP
// for i in tmp do
27804: LD_ADDR_VAR 0 5
27808: PUSH
27809: LD_VAR 0 7
27813: PUSH
27814: FOR_IN
27815: IFFALSE 27853
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
27817: LD_VAR 0 1
27821: PPUSH
27822: LD_VAR 0 5
27826: PUSH
27827: LD_INT 1
27829: ARRAY
27830: PPUSH
27831: LD_VAR 0 5
27835: PUSH
27836: LD_INT 2
27838: ARRAY
27839: PPUSH
27840: CALL 26799 0 3
27844: NOT
27845: IFFALSE 27851
// exit ;
27847: POP
27848: POP
27849: GO 27855
27851: GO 27814
27853: POP
27854: POP
// end ;
27855: LD_VAR 0 4
27859: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
27860: LD_INT 0
27862: PPUSH
27863: PPUSH
27864: PPUSH
27865: PPUSH
27866: PPUSH
27867: PPUSH
27868: PPUSH
27869: PPUSH
27870: PPUSH
// if GetClass ( unit ) <> class_sniper then
27871: LD_VAR 0 1
27875: PPUSH
27876: CALL_OW 257
27880: PUSH
27881: LD_INT 5
27883: NONEQUAL
27884: IFFALSE 27888
// exit ;
27886: GO 28354
// dist := 8 ;
27888: LD_ADDR_VAR 0 5
27892: PUSH
27893: LD_INT 8
27895: ST_TO_ADDR
// viewRange := 12 ;
27896: LD_ADDR_VAR 0 8
27900: PUSH
27901: LD_INT 12
27903: ST_TO_ADDR
// side := GetSide ( unit ) ;
27904: LD_ADDR_VAR 0 6
27908: PUSH
27909: LD_VAR 0 1
27913: PPUSH
27914: CALL_OW 255
27918: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
27919: LD_INT 61
27921: PPUSH
27922: LD_VAR 0 6
27926: PPUSH
27927: CALL_OW 321
27931: PUSH
27932: LD_INT 2
27934: EQUAL
27935: IFFALSE 27945
// viewRange := 16 ;
27937: LD_ADDR_VAR 0 8
27941: PUSH
27942: LD_INT 16
27944: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
27945: LD_VAR 0 1
27949: PPUSH
27950: LD_VAR 0 2
27954: PPUSH
27955: LD_VAR 0 3
27959: PPUSH
27960: CALL_OW 297
27964: PUSH
27965: LD_VAR 0 5
27969: GREATER
27970: IFFALSE 28049
// begin ComMoveXY ( unit , x , y ) ;
27972: LD_VAR 0 1
27976: PPUSH
27977: LD_VAR 0 2
27981: PPUSH
27982: LD_VAR 0 3
27986: PPUSH
27987: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27991: LD_INT 35
27993: PPUSH
27994: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
27998: LD_VAR 0 1
28002: PPUSH
28003: LD_VAR 0 2
28007: PPUSH
28008: LD_VAR 0 3
28012: PPUSH
28013: CALL 64951 0 3
28017: NOT
28018: IFFALSE 28022
// exit ;
28020: GO 28354
// until GetDistUnitXY ( unit , x , y ) < dist ;
28022: LD_VAR 0 1
28026: PPUSH
28027: LD_VAR 0 2
28031: PPUSH
28032: LD_VAR 0 3
28036: PPUSH
28037: CALL_OW 297
28041: PUSH
28042: LD_VAR 0 5
28046: LESS
28047: IFFALSE 27991
// end ; ComTurnXY ( unit , x , y ) ;
28049: LD_VAR 0 1
28053: PPUSH
28054: LD_VAR 0 2
28058: PPUSH
28059: LD_VAR 0 3
28063: PPUSH
28064: CALL_OW 118
// repeat if Multiplayer then
28068: LD_OWVAR 4
28072: IFFALSE 28083
// wait ( 35 ) else
28074: LD_INT 35
28076: PPUSH
28077: CALL_OW 67
28081: GO 28090
// wait ( 5 ) ;
28083: LD_INT 5
28085: PPUSH
28086: CALL_OW 67
// _d := GetDir ( unit ) ;
28090: LD_ADDR_VAR 0 11
28094: PUSH
28095: LD_VAR 0 1
28099: PPUSH
28100: CALL_OW 254
28104: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
28105: LD_ADDR_VAR 0 7
28109: PUSH
28110: LD_VAR 0 1
28114: PPUSH
28115: CALL_OW 250
28119: PPUSH
28120: LD_VAR 0 1
28124: PPUSH
28125: CALL_OW 251
28129: PPUSH
28130: LD_VAR 0 2
28134: PPUSH
28135: LD_VAR 0 3
28139: PPUSH
28140: CALL 67559 0 4
28144: ST_TO_ADDR
// until dir = _d ;
28145: LD_VAR 0 7
28149: PUSH
28150: LD_VAR 0 11
28154: EQUAL
28155: IFFALSE 28068
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
28157: LD_ADDR_VAR 0 9
28161: PUSH
28162: LD_VAR 0 1
28166: PPUSH
28167: CALL_OW 250
28171: PPUSH
28172: LD_VAR 0 7
28176: PPUSH
28177: LD_VAR 0 5
28181: PPUSH
28182: CALL_OW 272
28186: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
28187: LD_ADDR_VAR 0 10
28191: PUSH
28192: LD_VAR 0 1
28196: PPUSH
28197: CALL_OW 251
28201: PPUSH
28202: LD_VAR 0 7
28206: PPUSH
28207: LD_VAR 0 5
28211: PPUSH
28212: CALL_OW 273
28216: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28217: LD_VAR 0 9
28221: PPUSH
28222: LD_VAR 0 10
28226: PPUSH
28227: CALL_OW 488
28231: NOT
28232: IFFALSE 28236
// exit ;
28234: GO 28354
// ComAnimCustom ( unit , 1 ) ;
28236: LD_VAR 0 1
28240: PPUSH
28241: LD_INT 1
28243: PPUSH
28244: CALL_OW 592
// p := 0 ;
28248: LD_ADDR_VAR 0 12
28252: PUSH
28253: LD_INT 0
28255: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
28256: LD_VAR 0 9
28260: PPUSH
28261: LD_VAR 0 10
28265: PPUSH
28266: LD_VAR 0 6
28270: PPUSH
28271: LD_VAR 0 8
28275: PPUSH
28276: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
28280: LD_INT 35
28282: PPUSH
28283: CALL_OW 67
// p := Inc ( p ) ;
28287: LD_ADDR_VAR 0 12
28291: PUSH
28292: LD_VAR 0 12
28296: PPUSH
28297: CALL 67515 0 1
28301: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
28302: LD_VAR 0 12
28306: PUSH
28307: LD_INT 3
28309: EQUAL
28310: PUSH
28311: LD_VAR 0 1
28315: PPUSH
28316: CALL_OW 302
28320: NOT
28321: OR
28322: PUSH
28323: LD_VAR 0 1
28327: PPUSH
28328: CALL_OW 301
28332: OR
28333: IFFALSE 28280
// RemoveSeeing ( _x , _y , side ) ;
28335: LD_VAR 0 9
28339: PPUSH
28340: LD_VAR 0 10
28344: PPUSH
28345: LD_VAR 0 6
28349: PPUSH
28350: CALL_OW 331
// end ; end_of_file
28354: LD_VAR 0 4
28358: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28359: LD_INT 0
28361: PPUSH
28362: PPUSH
// if exist_mode then
28363: LD_VAR 0 2
28367: IFFALSE 28413
// begin unit := CreateCharacter ( prefix & ident ) ;
28369: LD_ADDR_VAR 0 5
28373: PUSH
28374: LD_VAR 0 3
28378: PUSH
28379: LD_VAR 0 1
28383: STR
28384: PPUSH
28385: CALL_OW 34
28389: ST_TO_ADDR
// if unit then
28390: LD_VAR 0 5
28394: IFFALSE 28411
// DeleteCharacters ( prefix & ident ) ;
28396: LD_VAR 0 3
28400: PUSH
28401: LD_VAR 0 1
28405: STR
28406: PPUSH
28407: CALL_OW 40
// end else
28411: GO 28428
// unit := NewCharacter ( ident ) ;
28413: LD_ADDR_VAR 0 5
28417: PUSH
28418: LD_VAR 0 1
28422: PPUSH
28423: CALL_OW 25
28427: ST_TO_ADDR
// result := unit ;
28428: LD_ADDR_VAR 0 4
28432: PUSH
28433: LD_VAR 0 5
28437: ST_TO_ADDR
// end ;
28438: LD_VAR 0 4
28442: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
28443: LD_INT 0
28445: PPUSH
28446: PPUSH
// if exist_mode then
28447: LD_VAR 0 2
28451: IFFALSE 28476
// unit := CreateCharacter ( prefix & ident ) else
28453: LD_ADDR_VAR 0 5
28457: PUSH
28458: LD_VAR 0 3
28462: PUSH
28463: LD_VAR 0 1
28467: STR
28468: PPUSH
28469: CALL_OW 34
28473: ST_TO_ADDR
28474: GO 28491
// unit := NewCharacter ( ident ) ;
28476: LD_ADDR_VAR 0 5
28480: PUSH
28481: LD_VAR 0 1
28485: PPUSH
28486: CALL_OW 25
28490: ST_TO_ADDR
// result := unit ;
28491: LD_ADDR_VAR 0 4
28495: PUSH
28496: LD_VAR 0 5
28500: ST_TO_ADDR
// end ;
28501: LD_VAR 0 4
28505: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28506: LD_INT 0
28508: PPUSH
28509: PPUSH
// if not side or not nation then
28510: LD_VAR 0 1
28514: NOT
28515: PUSH
28516: LD_VAR 0 2
28520: NOT
28521: OR
28522: IFFALSE 28526
// exit ;
28524: GO 29294
// case nation of nation_american :
28526: LD_VAR 0 2
28530: PUSH
28531: LD_INT 1
28533: DOUBLE
28534: EQUAL
28535: IFTRUE 28539
28537: GO 28753
28539: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28540: LD_ADDR_VAR 0 4
28544: PUSH
28545: LD_INT 35
28547: PUSH
28548: LD_INT 45
28550: PUSH
28551: LD_INT 46
28553: PUSH
28554: LD_INT 47
28556: PUSH
28557: LD_INT 82
28559: PUSH
28560: LD_INT 83
28562: PUSH
28563: LD_INT 84
28565: PUSH
28566: LD_INT 85
28568: PUSH
28569: LD_INT 86
28571: PUSH
28572: LD_INT 1
28574: PUSH
28575: LD_INT 2
28577: PUSH
28578: LD_INT 6
28580: PUSH
28581: LD_INT 15
28583: PUSH
28584: LD_INT 16
28586: PUSH
28587: LD_INT 7
28589: PUSH
28590: LD_INT 12
28592: PUSH
28593: LD_INT 13
28595: PUSH
28596: LD_INT 10
28598: PUSH
28599: LD_INT 14
28601: PUSH
28602: LD_INT 20
28604: PUSH
28605: LD_INT 21
28607: PUSH
28608: LD_INT 22
28610: PUSH
28611: LD_INT 25
28613: PUSH
28614: LD_INT 32
28616: PUSH
28617: LD_INT 27
28619: PUSH
28620: LD_INT 36
28622: PUSH
28623: LD_INT 69
28625: PUSH
28626: LD_INT 39
28628: PUSH
28629: LD_INT 34
28631: PUSH
28632: LD_INT 40
28634: PUSH
28635: LD_INT 48
28637: PUSH
28638: LD_INT 49
28640: PUSH
28641: LD_INT 50
28643: PUSH
28644: LD_INT 51
28646: PUSH
28647: LD_INT 52
28649: PUSH
28650: LD_INT 53
28652: PUSH
28653: LD_INT 54
28655: PUSH
28656: LD_INT 55
28658: PUSH
28659: LD_INT 56
28661: PUSH
28662: LD_INT 57
28664: PUSH
28665: LD_INT 58
28667: PUSH
28668: LD_INT 59
28670: PUSH
28671: LD_INT 60
28673: PUSH
28674: LD_INT 61
28676: PUSH
28677: LD_INT 62
28679: PUSH
28680: LD_INT 80
28682: PUSH
28683: LD_INT 82
28685: PUSH
28686: LD_INT 83
28688: PUSH
28689: LD_INT 84
28691: PUSH
28692: LD_INT 85
28694: PUSH
28695: LD_INT 86
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: LIST
28702: LIST
28703: LIST
28704: LIST
28705: LIST
28706: LIST
28707: LIST
28708: LIST
28709: LIST
28710: LIST
28711: LIST
28712: LIST
28713: LIST
28714: LIST
28715: LIST
28716: LIST
28717: LIST
28718: LIST
28719: LIST
28720: LIST
28721: LIST
28722: LIST
28723: LIST
28724: LIST
28725: LIST
28726: LIST
28727: LIST
28728: LIST
28729: LIST
28730: LIST
28731: LIST
28732: LIST
28733: LIST
28734: LIST
28735: LIST
28736: LIST
28737: LIST
28738: LIST
28739: LIST
28740: LIST
28741: LIST
28742: LIST
28743: LIST
28744: LIST
28745: LIST
28746: LIST
28747: LIST
28748: LIST
28749: LIST
28750: ST_TO_ADDR
28751: GO 29218
28753: LD_INT 2
28755: DOUBLE
28756: EQUAL
28757: IFTRUE 28761
28759: GO 28987
28761: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
28762: LD_ADDR_VAR 0 4
28766: PUSH
28767: LD_INT 35
28769: PUSH
28770: LD_INT 45
28772: PUSH
28773: LD_INT 46
28775: PUSH
28776: LD_INT 47
28778: PUSH
28779: LD_INT 82
28781: PUSH
28782: LD_INT 83
28784: PUSH
28785: LD_INT 84
28787: PUSH
28788: LD_INT 85
28790: PUSH
28791: LD_INT 87
28793: PUSH
28794: LD_INT 70
28796: PUSH
28797: LD_INT 1
28799: PUSH
28800: LD_INT 11
28802: PUSH
28803: LD_INT 3
28805: PUSH
28806: LD_INT 4
28808: PUSH
28809: LD_INT 5
28811: PUSH
28812: LD_INT 6
28814: PUSH
28815: LD_INT 15
28817: PUSH
28818: LD_INT 18
28820: PUSH
28821: LD_INT 7
28823: PUSH
28824: LD_INT 17
28826: PUSH
28827: LD_INT 8
28829: PUSH
28830: LD_INT 20
28832: PUSH
28833: LD_INT 21
28835: PUSH
28836: LD_INT 22
28838: PUSH
28839: LD_INT 72
28841: PUSH
28842: LD_INT 26
28844: PUSH
28845: LD_INT 69
28847: PUSH
28848: LD_INT 39
28850: PUSH
28851: LD_INT 40
28853: PUSH
28854: LD_INT 41
28856: PUSH
28857: LD_INT 42
28859: PUSH
28860: LD_INT 43
28862: PUSH
28863: LD_INT 48
28865: PUSH
28866: LD_INT 49
28868: PUSH
28869: LD_INT 50
28871: PUSH
28872: LD_INT 51
28874: PUSH
28875: LD_INT 52
28877: PUSH
28878: LD_INT 53
28880: PUSH
28881: LD_INT 54
28883: PUSH
28884: LD_INT 55
28886: PUSH
28887: LD_INT 56
28889: PUSH
28890: LD_INT 60
28892: PUSH
28893: LD_INT 61
28895: PUSH
28896: LD_INT 62
28898: PUSH
28899: LD_INT 66
28901: PUSH
28902: LD_INT 67
28904: PUSH
28905: LD_INT 68
28907: PUSH
28908: LD_INT 81
28910: PUSH
28911: LD_INT 82
28913: PUSH
28914: LD_INT 83
28916: PUSH
28917: LD_INT 84
28919: PUSH
28920: LD_INT 85
28922: PUSH
28923: LD_INT 87
28925: PUSH
28926: LD_INT 88
28928: PUSH
28929: EMPTY
28930: LIST
28931: LIST
28932: LIST
28933: LIST
28934: LIST
28935: LIST
28936: LIST
28937: LIST
28938: LIST
28939: LIST
28940: LIST
28941: LIST
28942: LIST
28943: LIST
28944: LIST
28945: LIST
28946: LIST
28947: LIST
28948: LIST
28949: LIST
28950: LIST
28951: LIST
28952: LIST
28953: LIST
28954: LIST
28955: LIST
28956: LIST
28957: LIST
28958: LIST
28959: LIST
28960: LIST
28961: LIST
28962: LIST
28963: LIST
28964: LIST
28965: LIST
28966: LIST
28967: LIST
28968: LIST
28969: LIST
28970: LIST
28971: LIST
28972: LIST
28973: LIST
28974: LIST
28975: LIST
28976: LIST
28977: LIST
28978: LIST
28979: LIST
28980: LIST
28981: LIST
28982: LIST
28983: LIST
28984: ST_TO_ADDR
28985: GO 29218
28987: LD_INT 3
28989: DOUBLE
28990: EQUAL
28991: IFTRUE 28995
28993: GO 29217
28995: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
28996: LD_ADDR_VAR 0 4
29000: PUSH
29001: LD_INT 46
29003: PUSH
29004: LD_INT 47
29006: PUSH
29007: LD_INT 1
29009: PUSH
29010: LD_INT 2
29012: PUSH
29013: LD_INT 82
29015: PUSH
29016: LD_INT 83
29018: PUSH
29019: LD_INT 84
29021: PUSH
29022: LD_INT 85
29024: PUSH
29025: LD_INT 86
29027: PUSH
29028: LD_INT 11
29030: PUSH
29031: LD_INT 9
29033: PUSH
29034: LD_INT 20
29036: PUSH
29037: LD_INT 19
29039: PUSH
29040: LD_INT 21
29042: PUSH
29043: LD_INT 24
29045: PUSH
29046: LD_INT 22
29048: PUSH
29049: LD_INT 25
29051: PUSH
29052: LD_INT 28
29054: PUSH
29055: LD_INT 29
29057: PUSH
29058: LD_INT 30
29060: PUSH
29061: LD_INT 31
29063: PUSH
29064: LD_INT 37
29066: PUSH
29067: LD_INT 38
29069: PUSH
29070: LD_INT 32
29072: PUSH
29073: LD_INT 27
29075: PUSH
29076: LD_INT 33
29078: PUSH
29079: LD_INT 69
29081: PUSH
29082: LD_INT 39
29084: PUSH
29085: LD_INT 34
29087: PUSH
29088: LD_INT 40
29090: PUSH
29091: LD_INT 71
29093: PUSH
29094: LD_INT 23
29096: PUSH
29097: LD_INT 44
29099: PUSH
29100: LD_INT 48
29102: PUSH
29103: LD_INT 49
29105: PUSH
29106: LD_INT 50
29108: PUSH
29109: LD_INT 51
29111: PUSH
29112: LD_INT 52
29114: PUSH
29115: LD_INT 53
29117: PUSH
29118: LD_INT 54
29120: PUSH
29121: LD_INT 55
29123: PUSH
29124: LD_INT 56
29126: PUSH
29127: LD_INT 57
29129: PUSH
29130: LD_INT 58
29132: PUSH
29133: LD_INT 59
29135: PUSH
29136: LD_INT 63
29138: PUSH
29139: LD_INT 64
29141: PUSH
29142: LD_INT 65
29144: PUSH
29145: LD_INT 82
29147: PUSH
29148: LD_INT 83
29150: PUSH
29151: LD_INT 84
29153: PUSH
29154: LD_INT 85
29156: PUSH
29157: LD_INT 86
29159: PUSH
29160: EMPTY
29161: LIST
29162: LIST
29163: LIST
29164: LIST
29165: LIST
29166: LIST
29167: LIST
29168: LIST
29169: LIST
29170: LIST
29171: LIST
29172: LIST
29173: LIST
29174: LIST
29175: LIST
29176: LIST
29177: LIST
29178: LIST
29179: LIST
29180: LIST
29181: LIST
29182: LIST
29183: LIST
29184: LIST
29185: LIST
29186: LIST
29187: LIST
29188: LIST
29189: LIST
29190: LIST
29191: LIST
29192: LIST
29193: LIST
29194: LIST
29195: LIST
29196: LIST
29197: LIST
29198: LIST
29199: LIST
29200: LIST
29201: LIST
29202: LIST
29203: LIST
29204: LIST
29205: LIST
29206: LIST
29207: LIST
29208: LIST
29209: LIST
29210: LIST
29211: LIST
29212: LIST
29213: LIST
29214: ST_TO_ADDR
29215: GO 29218
29217: POP
// if state > - 1 and state < 3 then
29218: LD_VAR 0 3
29222: PUSH
29223: LD_INT 1
29225: NEG
29226: GREATER
29227: PUSH
29228: LD_VAR 0 3
29232: PUSH
29233: LD_INT 3
29235: LESS
29236: AND
29237: IFFALSE 29294
// for i in result do
29239: LD_ADDR_VAR 0 5
29243: PUSH
29244: LD_VAR 0 4
29248: PUSH
29249: FOR_IN
29250: IFFALSE 29292
// if GetTech ( i , side ) <> state then
29252: LD_VAR 0 5
29256: PPUSH
29257: LD_VAR 0 1
29261: PPUSH
29262: CALL_OW 321
29266: PUSH
29267: LD_VAR 0 3
29271: NONEQUAL
29272: IFFALSE 29290
// result := result diff i ;
29274: LD_ADDR_VAR 0 4
29278: PUSH
29279: LD_VAR 0 4
29283: PUSH
29284: LD_VAR 0 5
29288: DIFF
29289: ST_TO_ADDR
29290: GO 29249
29292: POP
29293: POP
// end ;
29294: LD_VAR 0 4
29298: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29299: LD_INT 0
29301: PPUSH
29302: PPUSH
29303: PPUSH
// result := true ;
29304: LD_ADDR_VAR 0 3
29308: PUSH
29309: LD_INT 1
29311: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29312: LD_ADDR_VAR 0 5
29316: PUSH
29317: LD_VAR 0 2
29321: PPUSH
29322: CALL_OW 480
29326: ST_TO_ADDR
// if not tmp then
29327: LD_VAR 0 5
29331: NOT
29332: IFFALSE 29336
// exit ;
29334: GO 29385
// for i in tmp do
29336: LD_ADDR_VAR 0 4
29340: PUSH
29341: LD_VAR 0 5
29345: PUSH
29346: FOR_IN
29347: IFFALSE 29383
// if GetTech ( i , side ) <> state_researched then
29349: LD_VAR 0 4
29353: PPUSH
29354: LD_VAR 0 1
29358: PPUSH
29359: CALL_OW 321
29363: PUSH
29364: LD_INT 2
29366: NONEQUAL
29367: IFFALSE 29381
// begin result := false ;
29369: LD_ADDR_VAR 0 3
29373: PUSH
29374: LD_INT 0
29376: ST_TO_ADDR
// exit ;
29377: POP
29378: POP
29379: GO 29385
// end ;
29381: GO 29346
29383: POP
29384: POP
// end ;
29385: LD_VAR 0 3
29389: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29390: LD_INT 0
29392: PPUSH
29393: PPUSH
29394: PPUSH
29395: PPUSH
29396: PPUSH
29397: PPUSH
29398: PPUSH
29399: PPUSH
29400: PPUSH
29401: PPUSH
29402: PPUSH
29403: PPUSH
29404: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29405: LD_VAR 0 1
29409: NOT
29410: PUSH
29411: LD_VAR 0 1
29415: PPUSH
29416: CALL_OW 257
29420: PUSH
29421: LD_INT 9
29423: NONEQUAL
29424: OR
29425: IFFALSE 29429
// exit ;
29427: GO 30002
// side := GetSide ( unit ) ;
29429: LD_ADDR_VAR 0 9
29433: PUSH
29434: LD_VAR 0 1
29438: PPUSH
29439: CALL_OW 255
29443: ST_TO_ADDR
// tech_space := tech_spacanom ;
29444: LD_ADDR_VAR 0 12
29448: PUSH
29449: LD_INT 29
29451: ST_TO_ADDR
// tech_time := tech_taurad ;
29452: LD_ADDR_VAR 0 13
29456: PUSH
29457: LD_INT 28
29459: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29460: LD_ADDR_VAR 0 11
29464: PUSH
29465: LD_VAR 0 1
29469: PPUSH
29470: CALL_OW 310
29474: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29475: LD_VAR 0 11
29479: PPUSH
29480: CALL_OW 247
29484: PUSH
29485: LD_INT 2
29487: EQUAL
29488: IFFALSE 29492
// exit ;
29490: GO 30002
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29492: LD_ADDR_VAR 0 8
29496: PUSH
29497: LD_INT 81
29499: PUSH
29500: LD_VAR 0 9
29504: PUSH
29505: EMPTY
29506: LIST
29507: LIST
29508: PUSH
29509: LD_INT 3
29511: PUSH
29512: LD_INT 21
29514: PUSH
29515: LD_INT 3
29517: PUSH
29518: EMPTY
29519: LIST
29520: LIST
29521: PUSH
29522: EMPTY
29523: LIST
29524: LIST
29525: PUSH
29526: EMPTY
29527: LIST
29528: LIST
29529: PPUSH
29530: CALL_OW 69
29534: ST_TO_ADDR
// if not tmp then
29535: LD_VAR 0 8
29539: NOT
29540: IFFALSE 29544
// exit ;
29542: GO 30002
// if in_unit then
29544: LD_VAR 0 11
29548: IFFALSE 29572
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29550: LD_ADDR_VAR 0 10
29554: PUSH
29555: LD_VAR 0 8
29559: PPUSH
29560: LD_VAR 0 11
29564: PPUSH
29565: CALL_OW 74
29569: ST_TO_ADDR
29570: GO 29592
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29572: LD_ADDR_VAR 0 10
29576: PUSH
29577: LD_VAR 0 8
29581: PPUSH
29582: LD_VAR 0 1
29586: PPUSH
29587: CALL_OW 74
29591: ST_TO_ADDR
// if not enemy then
29592: LD_VAR 0 10
29596: NOT
29597: IFFALSE 29601
// exit ;
29599: GO 30002
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29601: LD_VAR 0 11
29605: PUSH
29606: LD_VAR 0 11
29610: PPUSH
29611: LD_VAR 0 10
29615: PPUSH
29616: CALL_OW 296
29620: PUSH
29621: LD_INT 13
29623: GREATER
29624: AND
29625: PUSH
29626: LD_VAR 0 1
29630: PPUSH
29631: LD_VAR 0 10
29635: PPUSH
29636: CALL_OW 296
29640: PUSH
29641: LD_INT 12
29643: GREATER
29644: OR
29645: IFFALSE 29649
// exit ;
29647: GO 30002
// missile := [ 1 ] ;
29649: LD_ADDR_VAR 0 14
29653: PUSH
29654: LD_INT 1
29656: PUSH
29657: EMPTY
29658: LIST
29659: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29660: LD_VAR 0 9
29664: PPUSH
29665: LD_VAR 0 12
29669: PPUSH
29670: CALL_OW 325
29674: IFFALSE 29703
// missile := Replace ( missile , missile + 1 , 2 ) ;
29676: LD_ADDR_VAR 0 14
29680: PUSH
29681: LD_VAR 0 14
29685: PPUSH
29686: LD_VAR 0 14
29690: PUSH
29691: LD_INT 1
29693: PLUS
29694: PPUSH
29695: LD_INT 2
29697: PPUSH
29698: CALL_OW 1
29702: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29703: LD_VAR 0 9
29707: PPUSH
29708: LD_VAR 0 13
29712: PPUSH
29713: CALL_OW 325
29717: PUSH
29718: LD_VAR 0 10
29722: PPUSH
29723: CALL_OW 255
29727: PPUSH
29728: LD_VAR 0 13
29732: PPUSH
29733: CALL_OW 325
29737: NOT
29738: AND
29739: IFFALSE 29768
// missile := Replace ( missile , missile + 1 , 3 ) ;
29741: LD_ADDR_VAR 0 14
29745: PUSH
29746: LD_VAR 0 14
29750: PPUSH
29751: LD_VAR 0 14
29755: PUSH
29756: LD_INT 1
29758: PLUS
29759: PPUSH
29760: LD_INT 3
29762: PPUSH
29763: CALL_OW 1
29767: ST_TO_ADDR
// if missile < 2 then
29768: LD_VAR 0 14
29772: PUSH
29773: LD_INT 2
29775: LESS
29776: IFFALSE 29780
// exit ;
29778: GO 30002
// x := GetX ( enemy ) ;
29780: LD_ADDR_VAR 0 4
29784: PUSH
29785: LD_VAR 0 10
29789: PPUSH
29790: CALL_OW 250
29794: ST_TO_ADDR
// y := GetY ( enemy ) ;
29795: LD_ADDR_VAR 0 5
29799: PUSH
29800: LD_VAR 0 10
29804: PPUSH
29805: CALL_OW 251
29809: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
29810: LD_ADDR_VAR 0 6
29814: PUSH
29815: LD_VAR 0 4
29819: PUSH
29820: LD_INT 1
29822: NEG
29823: PPUSH
29824: LD_INT 1
29826: PPUSH
29827: CALL_OW 12
29831: PLUS
29832: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
29833: LD_ADDR_VAR 0 7
29837: PUSH
29838: LD_VAR 0 5
29842: PUSH
29843: LD_INT 1
29845: NEG
29846: PPUSH
29847: LD_INT 1
29849: PPUSH
29850: CALL_OW 12
29854: PLUS
29855: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29856: LD_VAR 0 6
29860: PPUSH
29861: LD_VAR 0 7
29865: PPUSH
29866: CALL_OW 488
29870: NOT
29871: IFFALSE 29893
// begin _x := x ;
29873: LD_ADDR_VAR 0 6
29877: PUSH
29878: LD_VAR 0 4
29882: ST_TO_ADDR
// _y := y ;
29883: LD_ADDR_VAR 0 7
29887: PUSH
29888: LD_VAR 0 5
29892: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
29893: LD_ADDR_VAR 0 3
29897: PUSH
29898: LD_INT 1
29900: PPUSH
29901: LD_VAR 0 14
29905: PPUSH
29906: CALL_OW 12
29910: ST_TO_ADDR
// case i of 1 :
29911: LD_VAR 0 3
29915: PUSH
29916: LD_INT 1
29918: DOUBLE
29919: EQUAL
29920: IFTRUE 29924
29922: GO 29941
29924: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
29925: LD_VAR 0 1
29929: PPUSH
29930: LD_VAR 0 10
29934: PPUSH
29935: CALL_OW 115
29939: GO 30002
29941: LD_INT 2
29943: DOUBLE
29944: EQUAL
29945: IFTRUE 29949
29947: GO 29971
29949: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
29950: LD_VAR 0 1
29954: PPUSH
29955: LD_VAR 0 6
29959: PPUSH
29960: LD_VAR 0 7
29964: PPUSH
29965: CALL_OW 153
29969: GO 30002
29971: LD_INT 3
29973: DOUBLE
29974: EQUAL
29975: IFTRUE 29979
29977: GO 30001
29979: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
29980: LD_VAR 0 1
29984: PPUSH
29985: LD_VAR 0 6
29989: PPUSH
29990: LD_VAR 0 7
29994: PPUSH
29995: CALL_OW 154
29999: GO 30002
30001: POP
// end ;
30002: LD_VAR 0 2
30006: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30007: LD_INT 0
30009: PPUSH
30010: PPUSH
30011: PPUSH
30012: PPUSH
30013: PPUSH
30014: PPUSH
// if not unit or not building then
30015: LD_VAR 0 1
30019: NOT
30020: PUSH
30021: LD_VAR 0 2
30025: NOT
30026: OR
30027: IFFALSE 30031
// exit ;
30029: GO 30189
// x := GetX ( building ) ;
30031: LD_ADDR_VAR 0 5
30035: PUSH
30036: LD_VAR 0 2
30040: PPUSH
30041: CALL_OW 250
30045: ST_TO_ADDR
// y := GetY ( building ) ;
30046: LD_ADDR_VAR 0 6
30050: PUSH
30051: LD_VAR 0 2
30055: PPUSH
30056: CALL_OW 251
30060: ST_TO_ADDR
// for i = 0 to 5 do
30061: LD_ADDR_VAR 0 4
30065: PUSH
30066: DOUBLE
30067: LD_INT 0
30069: DEC
30070: ST_TO_ADDR
30071: LD_INT 5
30073: PUSH
30074: FOR_TO
30075: IFFALSE 30187
// begin _x := ShiftX ( x , i , 3 ) ;
30077: LD_ADDR_VAR 0 7
30081: PUSH
30082: LD_VAR 0 5
30086: PPUSH
30087: LD_VAR 0 4
30091: PPUSH
30092: LD_INT 3
30094: PPUSH
30095: CALL_OW 272
30099: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30100: LD_ADDR_VAR 0 8
30104: PUSH
30105: LD_VAR 0 6
30109: PPUSH
30110: LD_VAR 0 4
30114: PPUSH
30115: LD_INT 3
30117: PPUSH
30118: CALL_OW 273
30122: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30123: LD_VAR 0 7
30127: PPUSH
30128: LD_VAR 0 8
30132: PPUSH
30133: CALL_OW 488
30137: NOT
30138: IFFALSE 30142
// continue ;
30140: GO 30074
// if HexInfo ( _x , _y ) = 0 then
30142: LD_VAR 0 7
30146: PPUSH
30147: LD_VAR 0 8
30151: PPUSH
30152: CALL_OW 428
30156: PUSH
30157: LD_INT 0
30159: EQUAL
30160: IFFALSE 30185
// begin ComMoveXY ( unit , _x , _y ) ;
30162: LD_VAR 0 1
30166: PPUSH
30167: LD_VAR 0 7
30171: PPUSH
30172: LD_VAR 0 8
30176: PPUSH
30177: CALL_OW 111
// exit ;
30181: POP
30182: POP
30183: GO 30189
// end ; end ;
30185: GO 30074
30187: POP
30188: POP
// end ;
30189: LD_VAR 0 3
30193: RET
// export function ScanBase ( side , base_area ) ; begin
30194: LD_INT 0
30196: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30197: LD_ADDR_VAR 0 3
30201: PUSH
30202: LD_VAR 0 2
30206: PPUSH
30207: LD_INT 81
30209: PUSH
30210: LD_VAR 0 1
30214: PUSH
30215: EMPTY
30216: LIST
30217: LIST
30218: PPUSH
30219: CALL_OW 70
30223: ST_TO_ADDR
// end ;
30224: LD_VAR 0 3
30228: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30229: LD_INT 0
30231: PPUSH
30232: PPUSH
30233: PPUSH
30234: PPUSH
// result := false ;
30235: LD_ADDR_VAR 0 2
30239: PUSH
30240: LD_INT 0
30242: ST_TO_ADDR
// side := GetSide ( unit ) ;
30243: LD_ADDR_VAR 0 3
30247: PUSH
30248: LD_VAR 0 1
30252: PPUSH
30253: CALL_OW 255
30257: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30258: LD_ADDR_VAR 0 4
30262: PUSH
30263: LD_VAR 0 1
30267: PPUSH
30268: CALL_OW 248
30272: ST_TO_ADDR
// case nat of 1 :
30273: LD_VAR 0 4
30277: PUSH
30278: LD_INT 1
30280: DOUBLE
30281: EQUAL
30282: IFTRUE 30286
30284: GO 30297
30286: POP
// tech := tech_lassight ; 2 :
30287: LD_ADDR_VAR 0 5
30291: PUSH
30292: LD_INT 12
30294: ST_TO_ADDR
30295: GO 30336
30297: LD_INT 2
30299: DOUBLE
30300: EQUAL
30301: IFTRUE 30305
30303: GO 30316
30305: POP
// tech := tech_mortar ; 3 :
30306: LD_ADDR_VAR 0 5
30310: PUSH
30311: LD_INT 41
30313: ST_TO_ADDR
30314: GO 30336
30316: LD_INT 3
30318: DOUBLE
30319: EQUAL
30320: IFTRUE 30324
30322: GO 30335
30324: POP
// tech := tech_bazooka ; end ;
30325: LD_ADDR_VAR 0 5
30329: PUSH
30330: LD_INT 44
30332: ST_TO_ADDR
30333: GO 30336
30335: POP
// if Researched ( side , tech ) then
30336: LD_VAR 0 3
30340: PPUSH
30341: LD_VAR 0 5
30345: PPUSH
30346: CALL_OW 325
30350: IFFALSE 30377
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30352: LD_ADDR_VAR 0 2
30356: PUSH
30357: LD_INT 5
30359: PUSH
30360: LD_INT 8
30362: PUSH
30363: LD_INT 9
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: LIST
30370: PUSH
30371: LD_VAR 0 4
30375: ARRAY
30376: ST_TO_ADDR
// end ;
30377: LD_VAR 0 2
30381: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30382: LD_INT 0
30384: PPUSH
30385: PPUSH
30386: PPUSH
// if not mines then
30387: LD_VAR 0 2
30391: NOT
30392: IFFALSE 30396
// exit ;
30394: GO 30540
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30396: LD_ADDR_VAR 0 5
30400: PUSH
30401: LD_INT 81
30403: PUSH
30404: LD_VAR 0 1
30408: PUSH
30409: EMPTY
30410: LIST
30411: LIST
30412: PUSH
30413: LD_INT 3
30415: PUSH
30416: LD_INT 21
30418: PUSH
30419: LD_INT 3
30421: PUSH
30422: EMPTY
30423: LIST
30424: LIST
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: PUSH
30430: EMPTY
30431: LIST
30432: LIST
30433: PPUSH
30434: CALL_OW 69
30438: ST_TO_ADDR
// for i in mines do
30439: LD_ADDR_VAR 0 4
30443: PUSH
30444: LD_VAR 0 2
30448: PUSH
30449: FOR_IN
30450: IFFALSE 30538
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30452: LD_VAR 0 4
30456: PUSH
30457: LD_INT 1
30459: ARRAY
30460: PPUSH
30461: LD_VAR 0 4
30465: PUSH
30466: LD_INT 2
30468: ARRAY
30469: PPUSH
30470: CALL_OW 458
30474: NOT
30475: IFFALSE 30479
// continue ;
30477: GO 30449
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30479: LD_VAR 0 4
30483: PUSH
30484: LD_INT 1
30486: ARRAY
30487: PPUSH
30488: LD_VAR 0 4
30492: PUSH
30493: LD_INT 2
30495: ARRAY
30496: PPUSH
30497: CALL_OW 428
30501: PUSH
30502: LD_VAR 0 5
30506: IN
30507: IFFALSE 30536
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30509: LD_VAR 0 4
30513: PUSH
30514: LD_INT 1
30516: ARRAY
30517: PPUSH
30518: LD_VAR 0 4
30522: PUSH
30523: LD_INT 2
30525: ARRAY
30526: PPUSH
30527: LD_VAR 0 1
30531: PPUSH
30532: CALL_OW 456
// end ;
30536: GO 30449
30538: POP
30539: POP
// end ;
30540: LD_VAR 0 3
30544: RET
// export function Count ( array ) ; begin
30545: LD_INT 0
30547: PPUSH
// result := array + 0 ;
30548: LD_ADDR_VAR 0 2
30552: PUSH
30553: LD_VAR 0 1
30557: PUSH
30558: LD_INT 0
30560: PLUS
30561: ST_TO_ADDR
// end ;
30562: LD_VAR 0 2
30566: RET
// export function IsEmpty ( building ) ; begin
30567: LD_INT 0
30569: PPUSH
// if not building then
30570: LD_VAR 0 1
30574: NOT
30575: IFFALSE 30579
// exit ;
30577: GO 30622
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30579: LD_ADDR_VAR 0 2
30583: PUSH
30584: LD_VAR 0 1
30588: PUSH
30589: LD_INT 22
30591: PUSH
30592: LD_VAR 0 1
30596: PPUSH
30597: CALL_OW 255
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PUSH
30606: LD_INT 58
30608: PUSH
30609: EMPTY
30610: LIST
30611: PUSH
30612: EMPTY
30613: LIST
30614: LIST
30615: PPUSH
30616: CALL_OW 69
30620: IN
30621: ST_TO_ADDR
// end ;
30622: LD_VAR 0 2
30626: RET
// export function IsNotFull ( building ) ; var places ; begin
30627: LD_INT 0
30629: PPUSH
30630: PPUSH
// if not building then
30631: LD_VAR 0 1
30635: NOT
30636: IFFALSE 30640
// exit ;
30638: GO 30668
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
30640: LD_ADDR_VAR 0 2
30644: PUSH
30645: LD_VAR 0 1
30649: PPUSH
30650: LD_INT 3
30652: PUSH
30653: LD_INT 62
30655: PUSH
30656: EMPTY
30657: LIST
30658: PUSH
30659: EMPTY
30660: LIST
30661: LIST
30662: PPUSH
30663: CALL_OW 72
30667: ST_TO_ADDR
// end ;
30668: LD_VAR 0 2
30672: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
30673: LD_INT 0
30675: PPUSH
30676: PPUSH
30677: PPUSH
30678: PPUSH
// tmp := [ ] ;
30679: LD_ADDR_VAR 0 3
30683: PUSH
30684: EMPTY
30685: ST_TO_ADDR
// list := [ ] ;
30686: LD_ADDR_VAR 0 5
30690: PUSH
30691: EMPTY
30692: ST_TO_ADDR
// for i = 16 to 25 do
30693: LD_ADDR_VAR 0 4
30697: PUSH
30698: DOUBLE
30699: LD_INT 16
30701: DEC
30702: ST_TO_ADDR
30703: LD_INT 25
30705: PUSH
30706: FOR_TO
30707: IFFALSE 30780
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
30709: LD_ADDR_VAR 0 3
30713: PUSH
30714: LD_VAR 0 3
30718: PUSH
30719: LD_INT 22
30721: PUSH
30722: LD_VAR 0 1
30726: PPUSH
30727: CALL_OW 255
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: PUSH
30736: LD_INT 91
30738: PUSH
30739: LD_VAR 0 1
30743: PUSH
30744: LD_INT 6
30746: PUSH
30747: EMPTY
30748: LIST
30749: LIST
30750: LIST
30751: PUSH
30752: LD_INT 30
30754: PUSH
30755: LD_VAR 0 4
30759: PUSH
30760: EMPTY
30761: LIST
30762: LIST
30763: PUSH
30764: EMPTY
30765: LIST
30766: LIST
30767: LIST
30768: PUSH
30769: EMPTY
30770: LIST
30771: PPUSH
30772: CALL_OW 69
30776: ADD
30777: ST_TO_ADDR
30778: GO 30706
30780: POP
30781: POP
// for i = 1 to tmp do
30782: LD_ADDR_VAR 0 4
30786: PUSH
30787: DOUBLE
30788: LD_INT 1
30790: DEC
30791: ST_TO_ADDR
30792: LD_VAR 0 3
30796: PUSH
30797: FOR_TO
30798: IFFALSE 30886
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
30800: LD_ADDR_VAR 0 5
30804: PUSH
30805: LD_VAR 0 5
30809: PUSH
30810: LD_VAR 0 3
30814: PUSH
30815: LD_VAR 0 4
30819: ARRAY
30820: PPUSH
30821: CALL_OW 266
30825: PUSH
30826: LD_VAR 0 3
30830: PUSH
30831: LD_VAR 0 4
30835: ARRAY
30836: PPUSH
30837: CALL_OW 250
30841: PUSH
30842: LD_VAR 0 3
30846: PUSH
30847: LD_VAR 0 4
30851: ARRAY
30852: PPUSH
30853: CALL_OW 251
30857: PUSH
30858: LD_VAR 0 3
30862: PUSH
30863: LD_VAR 0 4
30867: ARRAY
30868: PPUSH
30869: CALL_OW 254
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: LIST
30878: LIST
30879: PUSH
30880: EMPTY
30881: LIST
30882: ADD
30883: ST_TO_ADDR
30884: GO 30797
30886: POP
30887: POP
// result := list ;
30888: LD_ADDR_VAR 0 2
30892: PUSH
30893: LD_VAR 0 5
30897: ST_TO_ADDR
// end ;
30898: LD_VAR 0 2
30902: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
30903: LD_INT 0
30905: PPUSH
30906: PPUSH
30907: PPUSH
30908: PPUSH
30909: PPUSH
30910: PPUSH
30911: PPUSH
// if not factory then
30912: LD_VAR 0 1
30916: NOT
30917: IFFALSE 30921
// exit ;
30919: GO 31514
// if control = control_apeman then
30921: LD_VAR 0 4
30925: PUSH
30926: LD_INT 5
30928: EQUAL
30929: IFFALSE 31038
// begin tmp := UnitsInside ( factory ) ;
30931: LD_ADDR_VAR 0 8
30935: PUSH
30936: LD_VAR 0 1
30940: PPUSH
30941: CALL_OW 313
30945: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
30946: LD_VAR 0 8
30950: PPUSH
30951: LD_INT 25
30953: PUSH
30954: LD_INT 12
30956: PUSH
30957: EMPTY
30958: LIST
30959: LIST
30960: PPUSH
30961: CALL_OW 72
30965: NOT
30966: IFFALSE 30976
// control := control_manual ;
30968: LD_ADDR_VAR 0 4
30972: PUSH
30973: LD_INT 1
30975: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
30976: LD_ADDR_VAR 0 8
30980: PUSH
30981: LD_VAR 0 1
30985: PPUSH
30986: CALL 30673 0 1
30990: ST_TO_ADDR
// if tmp then
30991: LD_VAR 0 8
30995: IFFALSE 31038
// begin for i in tmp do
30997: LD_ADDR_VAR 0 7
31001: PUSH
31002: LD_VAR 0 8
31006: PUSH
31007: FOR_IN
31008: IFFALSE 31036
// if i [ 1 ] = b_ext_radio then
31010: LD_VAR 0 7
31014: PUSH
31015: LD_INT 1
31017: ARRAY
31018: PUSH
31019: LD_INT 22
31021: EQUAL
31022: IFFALSE 31034
// begin control := control_remote ;
31024: LD_ADDR_VAR 0 4
31028: PUSH
31029: LD_INT 2
31031: ST_TO_ADDR
// break ;
31032: GO 31036
// end ;
31034: GO 31007
31036: POP
31037: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31038: LD_VAR 0 1
31042: PPUSH
31043: LD_VAR 0 2
31047: PPUSH
31048: LD_VAR 0 3
31052: PPUSH
31053: LD_VAR 0 4
31057: PPUSH
31058: LD_VAR 0 5
31062: PPUSH
31063: CALL_OW 448
31067: IFFALSE 31102
// begin result := [ chassis , engine , control , weapon ] ;
31069: LD_ADDR_VAR 0 6
31073: PUSH
31074: LD_VAR 0 2
31078: PUSH
31079: LD_VAR 0 3
31083: PUSH
31084: LD_VAR 0 4
31088: PUSH
31089: LD_VAR 0 5
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: LIST
31098: LIST
31099: ST_TO_ADDR
// exit ;
31100: GO 31514
// end ; _chassis := AvailableChassisList ( factory ) ;
31102: LD_ADDR_VAR 0 9
31106: PUSH
31107: LD_VAR 0 1
31111: PPUSH
31112: CALL_OW 475
31116: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31117: LD_ADDR_VAR 0 11
31121: PUSH
31122: LD_VAR 0 1
31126: PPUSH
31127: CALL_OW 476
31131: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31132: LD_ADDR_VAR 0 12
31136: PUSH
31137: LD_VAR 0 1
31141: PPUSH
31142: CALL_OW 477
31146: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31147: LD_ADDR_VAR 0 10
31151: PUSH
31152: LD_VAR 0 1
31156: PPUSH
31157: CALL_OW 478
31161: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31162: LD_VAR 0 9
31166: NOT
31167: PUSH
31168: LD_VAR 0 11
31172: NOT
31173: OR
31174: PUSH
31175: LD_VAR 0 12
31179: NOT
31180: OR
31181: PUSH
31182: LD_VAR 0 10
31186: NOT
31187: OR
31188: IFFALSE 31223
// begin result := [ chassis , engine , control , weapon ] ;
31190: LD_ADDR_VAR 0 6
31194: PUSH
31195: LD_VAR 0 2
31199: PUSH
31200: LD_VAR 0 3
31204: PUSH
31205: LD_VAR 0 4
31209: PUSH
31210: LD_VAR 0 5
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: LIST
31219: LIST
31220: ST_TO_ADDR
// exit ;
31221: GO 31514
// end ; if not chassis in _chassis then
31223: LD_VAR 0 2
31227: PUSH
31228: LD_VAR 0 9
31232: IN
31233: NOT
31234: IFFALSE 31260
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31236: LD_ADDR_VAR 0 2
31240: PUSH
31241: LD_VAR 0 9
31245: PUSH
31246: LD_INT 1
31248: PPUSH
31249: LD_VAR 0 9
31253: PPUSH
31254: CALL_OW 12
31258: ARRAY
31259: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31260: LD_VAR 0 2
31264: PPUSH
31265: LD_VAR 0 3
31269: PPUSH
31270: CALL 31519 0 2
31274: NOT
31275: IFFALSE 31334
// repeat engine := _engine [ 1 ] ;
31277: LD_ADDR_VAR 0 3
31281: PUSH
31282: LD_VAR 0 11
31286: PUSH
31287: LD_INT 1
31289: ARRAY
31290: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31291: LD_ADDR_VAR 0 11
31295: PUSH
31296: LD_VAR 0 11
31300: PPUSH
31301: LD_INT 1
31303: PPUSH
31304: CALL_OW 3
31308: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31309: LD_VAR 0 2
31313: PPUSH
31314: LD_VAR 0 3
31318: PPUSH
31319: CALL 31519 0 2
31323: PUSH
31324: LD_VAR 0 11
31328: PUSH
31329: EMPTY
31330: EQUAL
31331: OR
31332: IFFALSE 31277
// if not control in _control then
31334: LD_VAR 0 4
31338: PUSH
31339: LD_VAR 0 12
31343: IN
31344: NOT
31345: IFFALSE 31371
// control := _control [ rand ( 1 , _control ) ] ;
31347: LD_ADDR_VAR 0 4
31351: PUSH
31352: LD_VAR 0 12
31356: PUSH
31357: LD_INT 1
31359: PPUSH
31360: LD_VAR 0 12
31364: PPUSH
31365: CALL_OW 12
31369: ARRAY
31370: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31371: LD_VAR 0 2
31375: PPUSH
31376: LD_VAR 0 5
31380: PPUSH
31381: CALL 31739 0 2
31385: NOT
31386: IFFALSE 31445
// repeat weapon := _weapon [ 1 ] ;
31388: LD_ADDR_VAR 0 5
31392: PUSH
31393: LD_VAR 0 10
31397: PUSH
31398: LD_INT 1
31400: ARRAY
31401: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31402: LD_ADDR_VAR 0 10
31406: PUSH
31407: LD_VAR 0 10
31411: PPUSH
31412: LD_INT 1
31414: PPUSH
31415: CALL_OW 3
31419: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31420: LD_VAR 0 2
31424: PPUSH
31425: LD_VAR 0 5
31429: PPUSH
31430: CALL 31739 0 2
31434: PUSH
31435: LD_VAR 0 10
31439: PUSH
31440: EMPTY
31441: EQUAL
31442: OR
31443: IFFALSE 31388
// result := [ ] ;
31445: LD_ADDR_VAR 0 6
31449: PUSH
31450: EMPTY
31451: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31452: LD_VAR 0 1
31456: PPUSH
31457: LD_VAR 0 2
31461: PPUSH
31462: LD_VAR 0 3
31466: PPUSH
31467: LD_VAR 0 4
31471: PPUSH
31472: LD_VAR 0 5
31476: PPUSH
31477: CALL_OW 448
31481: IFFALSE 31514
// result := [ chassis , engine , control , weapon ] ;
31483: LD_ADDR_VAR 0 6
31487: PUSH
31488: LD_VAR 0 2
31492: PUSH
31493: LD_VAR 0 3
31497: PUSH
31498: LD_VAR 0 4
31502: PUSH
31503: LD_VAR 0 5
31507: PUSH
31508: EMPTY
31509: LIST
31510: LIST
31511: LIST
31512: LIST
31513: ST_TO_ADDR
// end ;
31514: LD_VAR 0 6
31518: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31519: LD_INT 0
31521: PPUSH
// if not chassis or not engine then
31522: LD_VAR 0 1
31526: NOT
31527: PUSH
31528: LD_VAR 0 2
31532: NOT
31533: OR
31534: IFFALSE 31538
// exit ;
31536: GO 31734
// case engine of engine_solar :
31538: LD_VAR 0 2
31542: PUSH
31543: LD_INT 2
31545: DOUBLE
31546: EQUAL
31547: IFTRUE 31551
31549: GO 31589
31551: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31552: LD_ADDR_VAR 0 3
31556: PUSH
31557: LD_INT 11
31559: PUSH
31560: LD_INT 12
31562: PUSH
31563: LD_INT 13
31565: PUSH
31566: LD_INT 14
31568: PUSH
31569: LD_INT 1
31571: PUSH
31572: LD_INT 2
31574: PUSH
31575: LD_INT 3
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: ST_TO_ADDR
31587: GO 31718
31589: LD_INT 1
31591: DOUBLE
31592: EQUAL
31593: IFTRUE 31597
31595: GO 31659
31597: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
31598: LD_ADDR_VAR 0 3
31602: PUSH
31603: LD_INT 11
31605: PUSH
31606: LD_INT 12
31608: PUSH
31609: LD_INT 13
31611: PUSH
31612: LD_INT 14
31614: PUSH
31615: LD_INT 1
31617: PUSH
31618: LD_INT 2
31620: PUSH
31621: LD_INT 3
31623: PUSH
31624: LD_INT 4
31626: PUSH
31627: LD_INT 5
31629: PUSH
31630: LD_INT 21
31632: PUSH
31633: LD_INT 23
31635: PUSH
31636: LD_INT 22
31638: PUSH
31639: LD_INT 24
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: LIST
31646: LIST
31647: LIST
31648: LIST
31649: LIST
31650: LIST
31651: LIST
31652: LIST
31653: LIST
31654: LIST
31655: LIST
31656: ST_TO_ADDR
31657: GO 31718
31659: LD_INT 3
31661: DOUBLE
31662: EQUAL
31663: IFTRUE 31667
31665: GO 31717
31667: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31668: LD_ADDR_VAR 0 3
31672: PUSH
31673: LD_INT 13
31675: PUSH
31676: LD_INT 14
31678: PUSH
31679: LD_INT 2
31681: PUSH
31682: LD_INT 3
31684: PUSH
31685: LD_INT 4
31687: PUSH
31688: LD_INT 5
31690: PUSH
31691: LD_INT 21
31693: PUSH
31694: LD_INT 22
31696: PUSH
31697: LD_INT 23
31699: PUSH
31700: LD_INT 24
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: LIST
31707: LIST
31708: LIST
31709: LIST
31710: LIST
31711: LIST
31712: LIST
31713: LIST
31714: ST_TO_ADDR
31715: GO 31718
31717: POP
// result := ( chassis in result ) ;
31718: LD_ADDR_VAR 0 3
31722: PUSH
31723: LD_VAR 0 1
31727: PUSH
31728: LD_VAR 0 3
31732: IN
31733: ST_TO_ADDR
// end ;
31734: LD_VAR 0 3
31738: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
31739: LD_INT 0
31741: PPUSH
// if not chassis or not weapon then
31742: LD_VAR 0 1
31746: NOT
31747: PUSH
31748: LD_VAR 0 2
31752: NOT
31753: OR
31754: IFFALSE 31758
// exit ;
31756: GO 32818
// case weapon of us_machine_gun :
31758: LD_VAR 0 2
31762: PUSH
31763: LD_INT 2
31765: DOUBLE
31766: EQUAL
31767: IFTRUE 31771
31769: GO 31801
31771: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
31772: LD_ADDR_VAR 0 3
31776: PUSH
31777: LD_INT 1
31779: PUSH
31780: LD_INT 2
31782: PUSH
31783: LD_INT 3
31785: PUSH
31786: LD_INT 4
31788: PUSH
31789: LD_INT 5
31791: PUSH
31792: EMPTY
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: ST_TO_ADDR
31799: GO 32802
31801: LD_INT 3
31803: DOUBLE
31804: EQUAL
31805: IFTRUE 31809
31807: GO 31839
31809: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
31810: LD_ADDR_VAR 0 3
31814: PUSH
31815: LD_INT 1
31817: PUSH
31818: LD_INT 2
31820: PUSH
31821: LD_INT 3
31823: PUSH
31824: LD_INT 4
31826: PUSH
31827: LD_INT 5
31829: PUSH
31830: EMPTY
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: ST_TO_ADDR
31837: GO 32802
31839: LD_INT 11
31841: DOUBLE
31842: EQUAL
31843: IFTRUE 31847
31845: GO 31877
31847: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
31848: LD_ADDR_VAR 0 3
31852: PUSH
31853: LD_INT 1
31855: PUSH
31856: LD_INT 2
31858: PUSH
31859: LD_INT 3
31861: PUSH
31862: LD_INT 4
31864: PUSH
31865: LD_INT 5
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: LIST
31872: LIST
31873: LIST
31874: ST_TO_ADDR
31875: GO 32802
31877: LD_INT 4
31879: DOUBLE
31880: EQUAL
31881: IFTRUE 31885
31883: GO 31911
31885: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
31886: LD_ADDR_VAR 0 3
31890: PUSH
31891: LD_INT 2
31893: PUSH
31894: LD_INT 3
31896: PUSH
31897: LD_INT 4
31899: PUSH
31900: LD_INT 5
31902: PUSH
31903: EMPTY
31904: LIST
31905: LIST
31906: LIST
31907: LIST
31908: ST_TO_ADDR
31909: GO 32802
31911: LD_INT 5
31913: DOUBLE
31914: EQUAL
31915: IFTRUE 31919
31917: GO 31945
31919: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
31920: LD_ADDR_VAR 0 3
31924: PUSH
31925: LD_INT 2
31927: PUSH
31928: LD_INT 3
31930: PUSH
31931: LD_INT 4
31933: PUSH
31934: LD_INT 5
31936: PUSH
31937: EMPTY
31938: LIST
31939: LIST
31940: LIST
31941: LIST
31942: ST_TO_ADDR
31943: GO 32802
31945: LD_INT 9
31947: DOUBLE
31948: EQUAL
31949: IFTRUE 31953
31951: GO 31979
31953: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
31954: LD_ADDR_VAR 0 3
31958: PUSH
31959: LD_INT 2
31961: PUSH
31962: LD_INT 3
31964: PUSH
31965: LD_INT 4
31967: PUSH
31968: LD_INT 5
31970: PUSH
31971: EMPTY
31972: LIST
31973: LIST
31974: LIST
31975: LIST
31976: ST_TO_ADDR
31977: GO 32802
31979: LD_INT 7
31981: DOUBLE
31982: EQUAL
31983: IFTRUE 31987
31985: GO 32013
31987: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
31988: LD_ADDR_VAR 0 3
31992: PUSH
31993: LD_INT 2
31995: PUSH
31996: LD_INT 3
31998: PUSH
31999: LD_INT 4
32001: PUSH
32002: LD_INT 5
32004: PUSH
32005: EMPTY
32006: LIST
32007: LIST
32008: LIST
32009: LIST
32010: ST_TO_ADDR
32011: GO 32802
32013: LD_INT 12
32015: DOUBLE
32016: EQUAL
32017: IFTRUE 32021
32019: GO 32047
32021: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32022: LD_ADDR_VAR 0 3
32026: PUSH
32027: LD_INT 2
32029: PUSH
32030: LD_INT 3
32032: PUSH
32033: LD_INT 4
32035: PUSH
32036: LD_INT 5
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: ST_TO_ADDR
32045: GO 32802
32047: LD_INT 13
32049: DOUBLE
32050: EQUAL
32051: IFTRUE 32055
32053: GO 32081
32055: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32056: LD_ADDR_VAR 0 3
32060: PUSH
32061: LD_INT 2
32063: PUSH
32064: LD_INT 3
32066: PUSH
32067: LD_INT 4
32069: PUSH
32070: LD_INT 5
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: ST_TO_ADDR
32079: GO 32802
32081: LD_INT 14
32083: DOUBLE
32084: EQUAL
32085: IFTRUE 32089
32087: GO 32107
32089: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32090: LD_ADDR_VAR 0 3
32094: PUSH
32095: LD_INT 4
32097: PUSH
32098: LD_INT 5
32100: PUSH
32101: EMPTY
32102: LIST
32103: LIST
32104: ST_TO_ADDR
32105: GO 32802
32107: LD_INT 6
32109: DOUBLE
32110: EQUAL
32111: IFTRUE 32115
32113: GO 32133
32115: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32116: LD_ADDR_VAR 0 3
32120: PUSH
32121: LD_INT 4
32123: PUSH
32124: LD_INT 5
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: ST_TO_ADDR
32131: GO 32802
32133: LD_INT 10
32135: DOUBLE
32136: EQUAL
32137: IFTRUE 32141
32139: GO 32159
32141: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32142: LD_ADDR_VAR 0 3
32146: PUSH
32147: LD_INT 4
32149: PUSH
32150: LD_INT 5
32152: PUSH
32153: EMPTY
32154: LIST
32155: LIST
32156: ST_TO_ADDR
32157: GO 32802
32159: LD_INT 22
32161: DOUBLE
32162: EQUAL
32163: IFTRUE 32167
32165: GO 32193
32167: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32168: LD_ADDR_VAR 0 3
32172: PUSH
32173: LD_INT 11
32175: PUSH
32176: LD_INT 12
32178: PUSH
32179: LD_INT 13
32181: PUSH
32182: LD_INT 14
32184: PUSH
32185: EMPTY
32186: LIST
32187: LIST
32188: LIST
32189: LIST
32190: ST_TO_ADDR
32191: GO 32802
32193: LD_INT 23
32195: DOUBLE
32196: EQUAL
32197: IFTRUE 32201
32199: GO 32227
32201: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32202: LD_ADDR_VAR 0 3
32206: PUSH
32207: LD_INT 11
32209: PUSH
32210: LD_INT 12
32212: PUSH
32213: LD_INT 13
32215: PUSH
32216: LD_INT 14
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: LIST
32223: LIST
32224: ST_TO_ADDR
32225: GO 32802
32227: LD_INT 24
32229: DOUBLE
32230: EQUAL
32231: IFTRUE 32235
32233: GO 32261
32235: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32236: LD_ADDR_VAR 0 3
32240: PUSH
32241: LD_INT 11
32243: PUSH
32244: LD_INT 12
32246: PUSH
32247: LD_INT 13
32249: PUSH
32250: LD_INT 14
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: LIST
32257: LIST
32258: ST_TO_ADDR
32259: GO 32802
32261: LD_INT 30
32263: DOUBLE
32264: EQUAL
32265: IFTRUE 32269
32267: GO 32295
32269: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32270: LD_ADDR_VAR 0 3
32274: PUSH
32275: LD_INT 11
32277: PUSH
32278: LD_INT 12
32280: PUSH
32281: LD_INT 13
32283: PUSH
32284: LD_INT 14
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: LIST
32291: LIST
32292: ST_TO_ADDR
32293: GO 32802
32295: LD_INT 25
32297: DOUBLE
32298: EQUAL
32299: IFTRUE 32303
32301: GO 32321
32303: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32304: LD_ADDR_VAR 0 3
32308: PUSH
32309: LD_INT 13
32311: PUSH
32312: LD_INT 14
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: ST_TO_ADDR
32319: GO 32802
32321: LD_INT 27
32323: DOUBLE
32324: EQUAL
32325: IFTRUE 32329
32327: GO 32347
32329: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
32330: LD_ADDR_VAR 0 3
32334: PUSH
32335: LD_INT 13
32337: PUSH
32338: LD_INT 14
32340: PUSH
32341: EMPTY
32342: LIST
32343: LIST
32344: ST_TO_ADDR
32345: GO 32802
32347: LD_INT 92
32349: DOUBLE
32350: EQUAL
32351: IFTRUE 32355
32353: GO 32381
32355: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32356: LD_ADDR_VAR 0 3
32360: PUSH
32361: LD_INT 11
32363: PUSH
32364: LD_INT 12
32366: PUSH
32367: LD_INT 13
32369: PUSH
32370: LD_INT 14
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: ST_TO_ADDR
32379: GO 32802
32381: LD_INT 28
32383: DOUBLE
32384: EQUAL
32385: IFTRUE 32389
32387: GO 32407
32389: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32390: LD_ADDR_VAR 0 3
32394: PUSH
32395: LD_INT 13
32397: PUSH
32398: LD_INT 14
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: ST_TO_ADDR
32405: GO 32802
32407: LD_INT 29
32409: DOUBLE
32410: EQUAL
32411: IFTRUE 32415
32413: GO 32433
32415: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32416: LD_ADDR_VAR 0 3
32420: PUSH
32421: LD_INT 13
32423: PUSH
32424: LD_INT 14
32426: PUSH
32427: EMPTY
32428: LIST
32429: LIST
32430: ST_TO_ADDR
32431: GO 32802
32433: LD_INT 31
32435: DOUBLE
32436: EQUAL
32437: IFTRUE 32441
32439: GO 32459
32441: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32442: LD_ADDR_VAR 0 3
32446: PUSH
32447: LD_INT 13
32449: PUSH
32450: LD_INT 14
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: ST_TO_ADDR
32457: GO 32802
32459: LD_INT 26
32461: DOUBLE
32462: EQUAL
32463: IFTRUE 32467
32465: GO 32485
32467: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32468: LD_ADDR_VAR 0 3
32472: PUSH
32473: LD_INT 13
32475: PUSH
32476: LD_INT 14
32478: PUSH
32479: EMPTY
32480: LIST
32481: LIST
32482: ST_TO_ADDR
32483: GO 32802
32485: LD_INT 42
32487: DOUBLE
32488: EQUAL
32489: IFTRUE 32493
32491: GO 32519
32493: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32494: LD_ADDR_VAR 0 3
32498: PUSH
32499: LD_INT 21
32501: PUSH
32502: LD_INT 22
32504: PUSH
32505: LD_INT 23
32507: PUSH
32508: LD_INT 24
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: LIST
32515: LIST
32516: ST_TO_ADDR
32517: GO 32802
32519: LD_INT 43
32521: DOUBLE
32522: EQUAL
32523: IFTRUE 32527
32525: GO 32553
32527: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32528: LD_ADDR_VAR 0 3
32532: PUSH
32533: LD_INT 21
32535: PUSH
32536: LD_INT 22
32538: PUSH
32539: LD_INT 23
32541: PUSH
32542: LD_INT 24
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: LIST
32549: LIST
32550: ST_TO_ADDR
32551: GO 32802
32553: LD_INT 44
32555: DOUBLE
32556: EQUAL
32557: IFTRUE 32561
32559: GO 32587
32561: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32562: LD_ADDR_VAR 0 3
32566: PUSH
32567: LD_INT 21
32569: PUSH
32570: LD_INT 22
32572: PUSH
32573: LD_INT 23
32575: PUSH
32576: LD_INT 24
32578: PUSH
32579: EMPTY
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: ST_TO_ADDR
32585: GO 32802
32587: LD_INT 45
32589: DOUBLE
32590: EQUAL
32591: IFTRUE 32595
32593: GO 32621
32595: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
32596: LD_ADDR_VAR 0 3
32600: PUSH
32601: LD_INT 21
32603: PUSH
32604: LD_INT 22
32606: PUSH
32607: LD_INT 23
32609: PUSH
32610: LD_INT 24
32612: PUSH
32613: EMPTY
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: ST_TO_ADDR
32619: GO 32802
32621: LD_INT 49
32623: DOUBLE
32624: EQUAL
32625: IFTRUE 32629
32627: GO 32655
32629: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
32630: LD_ADDR_VAR 0 3
32634: PUSH
32635: LD_INT 21
32637: PUSH
32638: LD_INT 22
32640: PUSH
32641: LD_INT 23
32643: PUSH
32644: LD_INT 24
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: ST_TO_ADDR
32653: GO 32802
32655: LD_INT 51
32657: DOUBLE
32658: EQUAL
32659: IFTRUE 32663
32661: GO 32689
32663: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
32664: LD_ADDR_VAR 0 3
32668: PUSH
32669: LD_INT 21
32671: PUSH
32672: LD_INT 22
32674: PUSH
32675: LD_INT 23
32677: PUSH
32678: LD_INT 24
32680: PUSH
32681: EMPTY
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: ST_TO_ADDR
32687: GO 32802
32689: LD_INT 52
32691: DOUBLE
32692: EQUAL
32693: IFTRUE 32697
32695: GO 32723
32697: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
32698: LD_ADDR_VAR 0 3
32702: PUSH
32703: LD_INT 21
32705: PUSH
32706: LD_INT 22
32708: PUSH
32709: LD_INT 23
32711: PUSH
32712: LD_INT 24
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: LIST
32719: LIST
32720: ST_TO_ADDR
32721: GO 32802
32723: LD_INT 53
32725: DOUBLE
32726: EQUAL
32727: IFTRUE 32731
32729: GO 32749
32731: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
32732: LD_ADDR_VAR 0 3
32736: PUSH
32737: LD_INT 23
32739: PUSH
32740: LD_INT 24
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: ST_TO_ADDR
32747: GO 32802
32749: LD_INT 46
32751: DOUBLE
32752: EQUAL
32753: IFTRUE 32757
32755: GO 32775
32757: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
32758: LD_ADDR_VAR 0 3
32762: PUSH
32763: LD_INT 23
32765: PUSH
32766: LD_INT 24
32768: PUSH
32769: EMPTY
32770: LIST
32771: LIST
32772: ST_TO_ADDR
32773: GO 32802
32775: LD_INT 47
32777: DOUBLE
32778: EQUAL
32779: IFTRUE 32783
32781: GO 32801
32783: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32784: LD_ADDR_VAR 0 3
32788: PUSH
32789: LD_INT 23
32791: PUSH
32792: LD_INT 24
32794: PUSH
32795: EMPTY
32796: LIST
32797: LIST
32798: ST_TO_ADDR
32799: GO 32802
32801: POP
// result := ( chassis in result ) ;
32802: LD_ADDR_VAR 0 3
32806: PUSH
32807: LD_VAR 0 1
32811: PUSH
32812: LD_VAR 0 3
32816: IN
32817: ST_TO_ADDR
// end ;
32818: LD_VAR 0 3
32822: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
32823: LD_INT 0
32825: PPUSH
32826: PPUSH
32827: PPUSH
32828: PPUSH
32829: PPUSH
32830: PPUSH
32831: PPUSH
// result := array ;
32832: LD_ADDR_VAR 0 5
32836: PUSH
32837: LD_VAR 0 1
32841: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
32842: LD_VAR 0 1
32846: NOT
32847: PUSH
32848: LD_VAR 0 2
32852: NOT
32853: OR
32854: PUSH
32855: LD_VAR 0 3
32859: NOT
32860: OR
32861: PUSH
32862: LD_VAR 0 2
32866: PUSH
32867: LD_VAR 0 1
32871: GREATER
32872: OR
32873: PUSH
32874: LD_VAR 0 3
32878: PUSH
32879: LD_VAR 0 1
32883: GREATER
32884: OR
32885: IFFALSE 32889
// exit ;
32887: GO 33185
// if direction then
32889: LD_VAR 0 4
32893: IFFALSE 32957
// begin d := 1 ;
32895: LD_ADDR_VAR 0 9
32899: PUSH
32900: LD_INT 1
32902: ST_TO_ADDR
// if i_from > i_to then
32903: LD_VAR 0 2
32907: PUSH
32908: LD_VAR 0 3
32912: GREATER
32913: IFFALSE 32939
// length := ( array - i_from ) + i_to else
32915: LD_ADDR_VAR 0 11
32919: PUSH
32920: LD_VAR 0 1
32924: PUSH
32925: LD_VAR 0 2
32929: MINUS
32930: PUSH
32931: LD_VAR 0 3
32935: PLUS
32936: ST_TO_ADDR
32937: GO 32955
// length := i_to - i_from ;
32939: LD_ADDR_VAR 0 11
32943: PUSH
32944: LD_VAR 0 3
32948: PUSH
32949: LD_VAR 0 2
32953: MINUS
32954: ST_TO_ADDR
// end else
32955: GO 33018
// begin d := - 1 ;
32957: LD_ADDR_VAR 0 9
32961: PUSH
32962: LD_INT 1
32964: NEG
32965: ST_TO_ADDR
// if i_from > i_to then
32966: LD_VAR 0 2
32970: PUSH
32971: LD_VAR 0 3
32975: GREATER
32976: IFFALSE 32996
// length := i_from - i_to else
32978: LD_ADDR_VAR 0 11
32982: PUSH
32983: LD_VAR 0 2
32987: PUSH
32988: LD_VAR 0 3
32992: MINUS
32993: ST_TO_ADDR
32994: GO 33018
// length := ( array - i_to ) + i_from ;
32996: LD_ADDR_VAR 0 11
33000: PUSH
33001: LD_VAR 0 1
33005: PUSH
33006: LD_VAR 0 3
33010: MINUS
33011: PUSH
33012: LD_VAR 0 2
33016: PLUS
33017: ST_TO_ADDR
// end ; if not length then
33018: LD_VAR 0 11
33022: NOT
33023: IFFALSE 33027
// exit ;
33025: GO 33185
// tmp := array ;
33027: LD_ADDR_VAR 0 10
33031: PUSH
33032: LD_VAR 0 1
33036: ST_TO_ADDR
// for i = 1 to length do
33037: LD_ADDR_VAR 0 6
33041: PUSH
33042: DOUBLE
33043: LD_INT 1
33045: DEC
33046: ST_TO_ADDR
33047: LD_VAR 0 11
33051: PUSH
33052: FOR_TO
33053: IFFALSE 33173
// begin for j = 1 to array do
33055: LD_ADDR_VAR 0 7
33059: PUSH
33060: DOUBLE
33061: LD_INT 1
33063: DEC
33064: ST_TO_ADDR
33065: LD_VAR 0 1
33069: PUSH
33070: FOR_TO
33071: IFFALSE 33159
// begin k := j + d ;
33073: LD_ADDR_VAR 0 8
33077: PUSH
33078: LD_VAR 0 7
33082: PUSH
33083: LD_VAR 0 9
33087: PLUS
33088: ST_TO_ADDR
// if k > array then
33089: LD_VAR 0 8
33093: PUSH
33094: LD_VAR 0 1
33098: GREATER
33099: IFFALSE 33109
// k := 1 ;
33101: LD_ADDR_VAR 0 8
33105: PUSH
33106: LD_INT 1
33108: ST_TO_ADDR
// if not k then
33109: LD_VAR 0 8
33113: NOT
33114: IFFALSE 33126
// k := array ;
33116: LD_ADDR_VAR 0 8
33120: PUSH
33121: LD_VAR 0 1
33125: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33126: LD_ADDR_VAR 0 10
33130: PUSH
33131: LD_VAR 0 10
33135: PPUSH
33136: LD_VAR 0 8
33140: PPUSH
33141: LD_VAR 0 1
33145: PUSH
33146: LD_VAR 0 7
33150: ARRAY
33151: PPUSH
33152: CALL_OW 1
33156: ST_TO_ADDR
// end ;
33157: GO 33070
33159: POP
33160: POP
// array := tmp ;
33161: LD_ADDR_VAR 0 1
33165: PUSH
33166: LD_VAR 0 10
33170: ST_TO_ADDR
// end ;
33171: GO 33052
33173: POP
33174: POP
// result := array ;
33175: LD_ADDR_VAR 0 5
33179: PUSH
33180: LD_VAR 0 1
33184: ST_TO_ADDR
// end ;
33185: LD_VAR 0 5
33189: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33190: LD_INT 0
33192: PPUSH
33193: PPUSH
// result := 0 ;
33194: LD_ADDR_VAR 0 3
33198: PUSH
33199: LD_INT 0
33201: ST_TO_ADDR
// if not array or not value in array then
33202: LD_VAR 0 1
33206: NOT
33207: PUSH
33208: LD_VAR 0 2
33212: PUSH
33213: LD_VAR 0 1
33217: IN
33218: NOT
33219: OR
33220: IFFALSE 33224
// exit ;
33222: GO 33278
// for i = 1 to array do
33224: LD_ADDR_VAR 0 4
33228: PUSH
33229: DOUBLE
33230: LD_INT 1
33232: DEC
33233: ST_TO_ADDR
33234: LD_VAR 0 1
33238: PUSH
33239: FOR_TO
33240: IFFALSE 33276
// if value = array [ i ] then
33242: LD_VAR 0 2
33246: PUSH
33247: LD_VAR 0 1
33251: PUSH
33252: LD_VAR 0 4
33256: ARRAY
33257: EQUAL
33258: IFFALSE 33274
// begin result := i ;
33260: LD_ADDR_VAR 0 3
33264: PUSH
33265: LD_VAR 0 4
33269: ST_TO_ADDR
// exit ;
33270: POP
33271: POP
33272: GO 33278
// end ;
33274: GO 33239
33276: POP
33277: POP
// end ;
33278: LD_VAR 0 3
33282: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33283: LD_INT 0
33285: PPUSH
// vc_chassis := chassis ;
33286: LD_ADDR_OWVAR 37
33290: PUSH
33291: LD_VAR 0 1
33295: ST_TO_ADDR
// vc_engine := engine ;
33296: LD_ADDR_OWVAR 39
33300: PUSH
33301: LD_VAR 0 2
33305: ST_TO_ADDR
// vc_control := control ;
33306: LD_ADDR_OWVAR 38
33310: PUSH
33311: LD_VAR 0 3
33315: ST_TO_ADDR
// vc_weapon := weapon ;
33316: LD_ADDR_OWVAR 40
33320: PUSH
33321: LD_VAR 0 4
33325: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33326: LD_ADDR_OWVAR 41
33330: PUSH
33331: LD_VAR 0 5
33335: ST_TO_ADDR
// end ;
33336: LD_VAR 0 6
33340: RET
// export function WantPlant ( unit ) ; var task ; begin
33341: LD_INT 0
33343: PPUSH
33344: PPUSH
// result := false ;
33345: LD_ADDR_VAR 0 2
33349: PUSH
33350: LD_INT 0
33352: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33353: LD_ADDR_VAR 0 3
33357: PUSH
33358: LD_VAR 0 1
33362: PPUSH
33363: CALL_OW 437
33367: ST_TO_ADDR
// if task then
33368: LD_VAR 0 3
33372: IFFALSE 33400
// if task [ 1 ] [ 1 ] = p then
33374: LD_VAR 0 3
33378: PUSH
33379: LD_INT 1
33381: ARRAY
33382: PUSH
33383: LD_INT 1
33385: ARRAY
33386: PUSH
33387: LD_STRING p
33389: EQUAL
33390: IFFALSE 33400
// result := true ;
33392: LD_ADDR_VAR 0 2
33396: PUSH
33397: LD_INT 1
33399: ST_TO_ADDR
// end ;
33400: LD_VAR 0 2
33404: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33405: LD_INT 0
33407: PPUSH
33408: PPUSH
33409: PPUSH
33410: PPUSH
// if pos < 1 then
33411: LD_VAR 0 2
33415: PUSH
33416: LD_INT 1
33418: LESS
33419: IFFALSE 33423
// exit ;
33421: GO 33726
// if pos = 1 then
33423: LD_VAR 0 2
33427: PUSH
33428: LD_INT 1
33430: EQUAL
33431: IFFALSE 33464
// result := Replace ( arr , pos [ 1 ] , value ) else
33433: LD_ADDR_VAR 0 4
33437: PUSH
33438: LD_VAR 0 1
33442: PPUSH
33443: LD_VAR 0 2
33447: PUSH
33448: LD_INT 1
33450: ARRAY
33451: PPUSH
33452: LD_VAR 0 3
33456: PPUSH
33457: CALL_OW 1
33461: ST_TO_ADDR
33462: GO 33726
// begin tmp := arr ;
33464: LD_ADDR_VAR 0 6
33468: PUSH
33469: LD_VAR 0 1
33473: ST_TO_ADDR
// s_arr := [ tmp ] ;
33474: LD_ADDR_VAR 0 7
33478: PUSH
33479: LD_VAR 0 6
33483: PUSH
33484: EMPTY
33485: LIST
33486: ST_TO_ADDR
// for i = 1 to pos - 1 do
33487: LD_ADDR_VAR 0 5
33491: PUSH
33492: DOUBLE
33493: LD_INT 1
33495: DEC
33496: ST_TO_ADDR
33497: LD_VAR 0 2
33501: PUSH
33502: LD_INT 1
33504: MINUS
33505: PUSH
33506: FOR_TO
33507: IFFALSE 33552
// begin tmp := tmp [ pos [ i ] ] ;
33509: LD_ADDR_VAR 0 6
33513: PUSH
33514: LD_VAR 0 6
33518: PUSH
33519: LD_VAR 0 2
33523: PUSH
33524: LD_VAR 0 5
33528: ARRAY
33529: ARRAY
33530: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33531: LD_ADDR_VAR 0 7
33535: PUSH
33536: LD_VAR 0 7
33540: PUSH
33541: LD_VAR 0 6
33545: PUSH
33546: EMPTY
33547: LIST
33548: ADD
33549: ST_TO_ADDR
// end ;
33550: GO 33506
33552: POP
33553: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33554: LD_ADDR_VAR 0 6
33558: PUSH
33559: LD_VAR 0 6
33563: PPUSH
33564: LD_VAR 0 2
33568: PUSH
33569: LD_VAR 0 2
33573: ARRAY
33574: PPUSH
33575: LD_VAR 0 3
33579: PPUSH
33580: CALL_OW 1
33584: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
33585: LD_ADDR_VAR 0 7
33589: PUSH
33590: LD_VAR 0 7
33594: PPUSH
33595: LD_VAR 0 7
33599: PPUSH
33600: LD_VAR 0 6
33604: PPUSH
33605: CALL_OW 1
33609: ST_TO_ADDR
// for i = s_arr downto 2 do
33610: LD_ADDR_VAR 0 5
33614: PUSH
33615: DOUBLE
33616: LD_VAR 0 7
33620: INC
33621: ST_TO_ADDR
33622: LD_INT 2
33624: PUSH
33625: FOR_DOWNTO
33626: IFFALSE 33710
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
33628: LD_ADDR_VAR 0 6
33632: PUSH
33633: LD_VAR 0 7
33637: PUSH
33638: LD_VAR 0 5
33642: PUSH
33643: LD_INT 1
33645: MINUS
33646: ARRAY
33647: PPUSH
33648: LD_VAR 0 2
33652: PUSH
33653: LD_VAR 0 5
33657: PUSH
33658: LD_INT 1
33660: MINUS
33661: ARRAY
33662: PPUSH
33663: LD_VAR 0 7
33667: PUSH
33668: LD_VAR 0 5
33672: ARRAY
33673: PPUSH
33674: CALL_OW 1
33678: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
33679: LD_ADDR_VAR 0 7
33683: PUSH
33684: LD_VAR 0 7
33688: PPUSH
33689: LD_VAR 0 5
33693: PUSH
33694: LD_INT 1
33696: MINUS
33697: PPUSH
33698: LD_VAR 0 6
33702: PPUSH
33703: CALL_OW 1
33707: ST_TO_ADDR
// end ;
33708: GO 33625
33710: POP
33711: POP
// result := s_arr [ 1 ] ;
33712: LD_ADDR_VAR 0 4
33716: PUSH
33717: LD_VAR 0 7
33721: PUSH
33722: LD_INT 1
33724: ARRAY
33725: ST_TO_ADDR
// end ; end ;
33726: LD_VAR 0 4
33730: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
33731: LD_INT 0
33733: PPUSH
33734: PPUSH
// if not list then
33735: LD_VAR 0 1
33739: NOT
33740: IFFALSE 33744
// exit ;
33742: GO 33835
// i := list [ pos1 ] ;
33744: LD_ADDR_VAR 0 5
33748: PUSH
33749: LD_VAR 0 1
33753: PUSH
33754: LD_VAR 0 2
33758: ARRAY
33759: ST_TO_ADDR
// if not i then
33760: LD_VAR 0 5
33764: NOT
33765: IFFALSE 33769
// exit ;
33767: GO 33835
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
33769: LD_ADDR_VAR 0 1
33773: PUSH
33774: LD_VAR 0 1
33778: PPUSH
33779: LD_VAR 0 2
33783: PPUSH
33784: LD_VAR 0 1
33788: PUSH
33789: LD_VAR 0 3
33793: ARRAY
33794: PPUSH
33795: CALL_OW 1
33799: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
33800: LD_ADDR_VAR 0 1
33804: PUSH
33805: LD_VAR 0 1
33809: PPUSH
33810: LD_VAR 0 3
33814: PPUSH
33815: LD_VAR 0 5
33819: PPUSH
33820: CALL_OW 1
33824: ST_TO_ADDR
// result := list ;
33825: LD_ADDR_VAR 0 4
33829: PUSH
33830: LD_VAR 0 1
33834: ST_TO_ADDR
// end ;
33835: LD_VAR 0 4
33839: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
33840: LD_INT 0
33842: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
33843: LD_ADDR_VAR 0 5
33847: PUSH
33848: LD_VAR 0 1
33852: PPUSH
33853: CALL_OW 250
33857: PPUSH
33858: LD_VAR 0 1
33862: PPUSH
33863: CALL_OW 251
33867: PPUSH
33868: LD_VAR 0 2
33872: PPUSH
33873: LD_VAR 0 3
33877: PPUSH
33878: LD_VAR 0 4
33882: PPUSH
33883: CALL 34261 0 5
33887: ST_TO_ADDR
// end ;
33888: LD_VAR 0 5
33892: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
33893: LD_INT 0
33895: PPUSH
33896: PPUSH
33897: PPUSH
33898: PPUSH
// if not list or not unit then
33899: LD_VAR 0 2
33903: NOT
33904: PUSH
33905: LD_VAR 0 1
33909: NOT
33910: OR
33911: IFFALSE 33915
// exit ;
33913: GO 34256
// result := [ ] ;
33915: LD_ADDR_VAR 0 5
33919: PUSH
33920: EMPTY
33921: ST_TO_ADDR
// for i in list do
33922: LD_ADDR_VAR 0 6
33926: PUSH
33927: LD_VAR 0 2
33931: PUSH
33932: FOR_IN
33933: IFFALSE 34151
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
33935: LD_ADDR_VAR 0 8
33939: PUSH
33940: LD_VAR 0 1
33944: PPUSH
33945: LD_VAR 0 6
33949: PUSH
33950: LD_INT 1
33952: ARRAY
33953: PPUSH
33954: LD_VAR 0 6
33958: PUSH
33959: LD_INT 2
33961: ARRAY
33962: PPUSH
33963: CALL_OW 297
33967: ST_TO_ADDR
// if not Count ( result ) then
33968: LD_VAR 0 5
33972: PPUSH
33973: CALL 30545 0 1
33977: NOT
33978: IFFALSE 34011
// begin result := Join ( result , [ i , tmp ] ) ;
33980: LD_ADDR_VAR 0 5
33984: PUSH
33985: LD_VAR 0 5
33989: PPUSH
33990: LD_VAR 0 6
33994: PUSH
33995: LD_VAR 0 8
33999: PUSH
34000: EMPTY
34001: LIST
34002: LIST
34003: PPUSH
34004: CALL 66154 0 2
34008: ST_TO_ADDR
// continue ;
34009: GO 33932
// end ; if result [ result ] [ 2 ] <= tmp then
34011: LD_VAR 0 5
34015: PUSH
34016: LD_VAR 0 5
34020: ARRAY
34021: PUSH
34022: LD_INT 2
34024: ARRAY
34025: PUSH
34026: LD_VAR 0 8
34030: LESSEQUAL
34031: IFFALSE 34064
// result := Join ( result , [ i , tmp ] ) else
34033: LD_ADDR_VAR 0 5
34037: PUSH
34038: LD_VAR 0 5
34042: PPUSH
34043: LD_VAR 0 6
34047: PUSH
34048: LD_VAR 0 8
34052: PUSH
34053: EMPTY
34054: LIST
34055: LIST
34056: PPUSH
34057: CALL 66154 0 2
34061: ST_TO_ADDR
34062: GO 34149
// begin for j := 1 to Count ( result ) do
34064: LD_ADDR_VAR 0 7
34068: PUSH
34069: DOUBLE
34070: LD_INT 1
34072: DEC
34073: ST_TO_ADDR
34074: LD_VAR 0 5
34078: PPUSH
34079: CALL 30545 0 1
34083: PUSH
34084: FOR_TO
34085: IFFALSE 34147
// begin if tmp < result [ j ] [ 2 ] then
34087: LD_VAR 0 8
34091: PUSH
34092: LD_VAR 0 5
34096: PUSH
34097: LD_VAR 0 7
34101: ARRAY
34102: PUSH
34103: LD_INT 2
34105: ARRAY
34106: LESS
34107: IFFALSE 34145
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34109: LD_ADDR_VAR 0 5
34113: PUSH
34114: LD_VAR 0 5
34118: PPUSH
34119: LD_VAR 0 7
34123: PPUSH
34124: LD_VAR 0 6
34128: PUSH
34129: LD_VAR 0 8
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: PPUSH
34138: CALL_OW 2
34142: ST_TO_ADDR
// break ;
34143: GO 34147
// end ; end ;
34145: GO 34084
34147: POP
34148: POP
// end ; end ;
34149: GO 33932
34151: POP
34152: POP
// if result and not asc then
34153: LD_VAR 0 5
34157: PUSH
34158: LD_VAR 0 3
34162: NOT
34163: AND
34164: IFFALSE 34181
// result := ReverseArray ( result ) ;
34166: LD_ADDR_VAR 0 5
34170: PUSH
34171: LD_VAR 0 5
34175: PPUSH
34176: CALL 61421 0 1
34180: ST_TO_ADDR
// tmp := [ ] ;
34181: LD_ADDR_VAR 0 8
34185: PUSH
34186: EMPTY
34187: ST_TO_ADDR
// if mode then
34188: LD_VAR 0 4
34192: IFFALSE 34256
// begin for i := 1 to result do
34194: LD_ADDR_VAR 0 6
34198: PUSH
34199: DOUBLE
34200: LD_INT 1
34202: DEC
34203: ST_TO_ADDR
34204: LD_VAR 0 5
34208: PUSH
34209: FOR_TO
34210: IFFALSE 34244
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
34212: LD_ADDR_VAR 0 8
34216: PUSH
34217: LD_VAR 0 8
34221: PPUSH
34222: LD_VAR 0 5
34226: PUSH
34227: LD_VAR 0 6
34231: ARRAY
34232: PUSH
34233: LD_INT 1
34235: ARRAY
34236: PPUSH
34237: CALL 66154 0 2
34241: ST_TO_ADDR
34242: GO 34209
34244: POP
34245: POP
// result := tmp ;
34246: LD_ADDR_VAR 0 5
34250: PUSH
34251: LD_VAR 0 8
34255: ST_TO_ADDR
// end ; end ;
34256: LD_VAR 0 5
34260: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34261: LD_INT 0
34263: PPUSH
34264: PPUSH
34265: PPUSH
34266: PPUSH
// if not list then
34267: LD_VAR 0 3
34271: NOT
34272: IFFALSE 34276
// exit ;
34274: GO 34664
// result := [ ] ;
34276: LD_ADDR_VAR 0 6
34280: PUSH
34281: EMPTY
34282: ST_TO_ADDR
// for i in list do
34283: LD_ADDR_VAR 0 7
34287: PUSH
34288: LD_VAR 0 3
34292: PUSH
34293: FOR_IN
34294: IFFALSE 34496
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34296: LD_ADDR_VAR 0 9
34300: PUSH
34301: LD_VAR 0 7
34305: PPUSH
34306: LD_VAR 0 1
34310: PPUSH
34311: LD_VAR 0 2
34315: PPUSH
34316: CALL_OW 297
34320: ST_TO_ADDR
// if not result then
34321: LD_VAR 0 6
34325: NOT
34326: IFFALSE 34352
// result := [ [ i , tmp ] ] else
34328: LD_ADDR_VAR 0 6
34332: PUSH
34333: LD_VAR 0 7
34337: PUSH
34338: LD_VAR 0 9
34342: PUSH
34343: EMPTY
34344: LIST
34345: LIST
34346: PUSH
34347: EMPTY
34348: LIST
34349: ST_TO_ADDR
34350: GO 34494
// begin if result [ result ] [ 2 ] <= tmp then
34352: LD_VAR 0 6
34356: PUSH
34357: LD_VAR 0 6
34361: ARRAY
34362: PUSH
34363: LD_INT 2
34365: ARRAY
34366: PUSH
34367: LD_VAR 0 9
34371: LESSEQUAL
34372: IFFALSE 34414
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34374: LD_ADDR_VAR 0 6
34378: PUSH
34379: LD_VAR 0 6
34383: PPUSH
34384: LD_VAR 0 6
34388: PUSH
34389: LD_INT 1
34391: PLUS
34392: PPUSH
34393: LD_VAR 0 7
34397: PUSH
34398: LD_VAR 0 9
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: PPUSH
34407: CALL_OW 2
34411: ST_TO_ADDR
34412: GO 34494
// for j := 1 to result do
34414: LD_ADDR_VAR 0 8
34418: PUSH
34419: DOUBLE
34420: LD_INT 1
34422: DEC
34423: ST_TO_ADDR
34424: LD_VAR 0 6
34428: PUSH
34429: FOR_TO
34430: IFFALSE 34492
// begin if tmp < result [ j ] [ 2 ] then
34432: LD_VAR 0 9
34436: PUSH
34437: LD_VAR 0 6
34441: PUSH
34442: LD_VAR 0 8
34446: ARRAY
34447: PUSH
34448: LD_INT 2
34450: ARRAY
34451: LESS
34452: IFFALSE 34490
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34454: LD_ADDR_VAR 0 6
34458: PUSH
34459: LD_VAR 0 6
34463: PPUSH
34464: LD_VAR 0 8
34468: PPUSH
34469: LD_VAR 0 7
34473: PUSH
34474: LD_VAR 0 9
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: PPUSH
34483: CALL_OW 2
34487: ST_TO_ADDR
// break ;
34488: GO 34492
// end ; end ;
34490: GO 34429
34492: POP
34493: POP
// end ; end ;
34494: GO 34293
34496: POP
34497: POP
// if result and not asc then
34498: LD_VAR 0 6
34502: PUSH
34503: LD_VAR 0 4
34507: NOT
34508: AND
34509: IFFALSE 34584
// begin tmp := result ;
34511: LD_ADDR_VAR 0 9
34515: PUSH
34516: LD_VAR 0 6
34520: ST_TO_ADDR
// for i = tmp downto 1 do
34521: LD_ADDR_VAR 0 7
34525: PUSH
34526: DOUBLE
34527: LD_VAR 0 9
34531: INC
34532: ST_TO_ADDR
34533: LD_INT 1
34535: PUSH
34536: FOR_DOWNTO
34537: IFFALSE 34582
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34539: LD_ADDR_VAR 0 6
34543: PUSH
34544: LD_VAR 0 6
34548: PPUSH
34549: LD_VAR 0 9
34553: PUSH
34554: LD_VAR 0 7
34558: MINUS
34559: PUSH
34560: LD_INT 1
34562: PLUS
34563: PPUSH
34564: LD_VAR 0 9
34568: PUSH
34569: LD_VAR 0 7
34573: ARRAY
34574: PPUSH
34575: CALL_OW 1
34579: ST_TO_ADDR
34580: GO 34536
34582: POP
34583: POP
// end ; tmp := [ ] ;
34584: LD_ADDR_VAR 0 9
34588: PUSH
34589: EMPTY
34590: ST_TO_ADDR
// if mode then
34591: LD_VAR 0 5
34595: IFFALSE 34664
// begin for i = 1 to result do
34597: LD_ADDR_VAR 0 7
34601: PUSH
34602: DOUBLE
34603: LD_INT 1
34605: DEC
34606: ST_TO_ADDR
34607: LD_VAR 0 6
34611: PUSH
34612: FOR_TO
34613: IFFALSE 34652
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34615: LD_ADDR_VAR 0 9
34619: PUSH
34620: LD_VAR 0 9
34624: PPUSH
34625: LD_VAR 0 7
34629: PPUSH
34630: LD_VAR 0 6
34634: PUSH
34635: LD_VAR 0 7
34639: ARRAY
34640: PUSH
34641: LD_INT 1
34643: ARRAY
34644: PPUSH
34645: CALL_OW 1
34649: ST_TO_ADDR
34650: GO 34612
34652: POP
34653: POP
// result := tmp ;
34654: LD_ADDR_VAR 0 6
34658: PUSH
34659: LD_VAR 0 9
34663: ST_TO_ADDR
// end ; end ;
34664: LD_VAR 0 6
34668: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34669: LD_INT 0
34671: PPUSH
34672: PPUSH
34673: PPUSH
34674: PPUSH
34675: PPUSH
34676: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34677: LD_ADDR_VAR 0 5
34681: PUSH
34682: LD_INT 0
34684: PUSH
34685: LD_INT 0
34687: PUSH
34688: LD_INT 0
34690: PUSH
34691: EMPTY
34692: PUSH
34693: EMPTY
34694: LIST
34695: LIST
34696: LIST
34697: LIST
34698: ST_TO_ADDR
// if not x or not y then
34699: LD_VAR 0 2
34703: NOT
34704: PUSH
34705: LD_VAR 0 3
34709: NOT
34710: OR
34711: IFFALSE 34715
// exit ;
34713: GO 36365
// if not range then
34715: LD_VAR 0 4
34719: NOT
34720: IFFALSE 34730
// range := 10 ;
34722: LD_ADDR_VAR 0 4
34726: PUSH
34727: LD_INT 10
34729: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34730: LD_ADDR_VAR 0 8
34734: PUSH
34735: LD_INT 81
34737: PUSH
34738: LD_VAR 0 1
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: PUSH
34747: LD_INT 92
34749: PUSH
34750: LD_VAR 0 2
34754: PUSH
34755: LD_VAR 0 3
34759: PUSH
34760: LD_VAR 0 4
34764: PUSH
34765: EMPTY
34766: LIST
34767: LIST
34768: LIST
34769: LIST
34770: PUSH
34771: LD_INT 3
34773: PUSH
34774: LD_INT 21
34776: PUSH
34777: LD_INT 3
34779: PUSH
34780: EMPTY
34781: LIST
34782: LIST
34783: PUSH
34784: EMPTY
34785: LIST
34786: LIST
34787: PUSH
34788: EMPTY
34789: LIST
34790: LIST
34791: LIST
34792: PPUSH
34793: CALL_OW 69
34797: ST_TO_ADDR
// if not tmp then
34798: LD_VAR 0 8
34802: NOT
34803: IFFALSE 34807
// exit ;
34805: GO 36365
// for i in tmp do
34807: LD_ADDR_VAR 0 6
34811: PUSH
34812: LD_VAR 0 8
34816: PUSH
34817: FOR_IN
34818: IFFALSE 36340
// begin points := [ 0 , 0 , 0 ] ;
34820: LD_ADDR_VAR 0 9
34824: PUSH
34825: LD_INT 0
34827: PUSH
34828: LD_INT 0
34830: PUSH
34831: LD_INT 0
34833: PUSH
34834: EMPTY
34835: LIST
34836: LIST
34837: LIST
34838: ST_TO_ADDR
// bpoints := 1 ;
34839: LD_ADDR_VAR 0 10
34843: PUSH
34844: LD_INT 1
34846: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34847: LD_VAR 0 6
34851: PPUSH
34852: CALL_OW 247
34856: PUSH
34857: LD_INT 1
34859: DOUBLE
34860: EQUAL
34861: IFTRUE 34865
34863: GO 35443
34865: POP
// begin if GetClass ( i ) = 1 then
34866: LD_VAR 0 6
34870: PPUSH
34871: CALL_OW 257
34875: PUSH
34876: LD_INT 1
34878: EQUAL
34879: IFFALSE 34900
// points := [ 10 , 5 , 3 ] ;
34881: LD_ADDR_VAR 0 9
34885: PUSH
34886: LD_INT 10
34888: PUSH
34889: LD_INT 5
34891: PUSH
34892: LD_INT 3
34894: PUSH
34895: EMPTY
34896: LIST
34897: LIST
34898: LIST
34899: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34900: LD_VAR 0 6
34904: PPUSH
34905: CALL_OW 257
34909: PUSH
34910: LD_INT 2
34912: PUSH
34913: LD_INT 3
34915: PUSH
34916: LD_INT 4
34918: PUSH
34919: EMPTY
34920: LIST
34921: LIST
34922: LIST
34923: IN
34924: IFFALSE 34945
// points := [ 3 , 2 , 1 ] ;
34926: LD_ADDR_VAR 0 9
34930: PUSH
34931: LD_INT 3
34933: PUSH
34934: LD_INT 2
34936: PUSH
34937: LD_INT 1
34939: PUSH
34940: EMPTY
34941: LIST
34942: LIST
34943: LIST
34944: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34945: LD_VAR 0 6
34949: PPUSH
34950: CALL_OW 257
34954: PUSH
34955: LD_INT 5
34957: EQUAL
34958: IFFALSE 34979
// points := [ 130 , 5 , 2 ] ;
34960: LD_ADDR_VAR 0 9
34964: PUSH
34965: LD_INT 130
34967: PUSH
34968: LD_INT 5
34970: PUSH
34971: LD_INT 2
34973: PUSH
34974: EMPTY
34975: LIST
34976: LIST
34977: LIST
34978: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34979: LD_VAR 0 6
34983: PPUSH
34984: CALL_OW 257
34988: PUSH
34989: LD_INT 8
34991: EQUAL
34992: IFFALSE 35013
// points := [ 35 , 35 , 30 ] ;
34994: LD_ADDR_VAR 0 9
34998: PUSH
34999: LD_INT 35
35001: PUSH
35002: LD_INT 35
35004: PUSH
35005: LD_INT 30
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: LIST
35012: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35013: LD_VAR 0 6
35017: PPUSH
35018: CALL_OW 257
35022: PUSH
35023: LD_INT 9
35025: EQUAL
35026: IFFALSE 35047
// points := [ 20 , 55 , 40 ] ;
35028: LD_ADDR_VAR 0 9
35032: PUSH
35033: LD_INT 20
35035: PUSH
35036: LD_INT 55
35038: PUSH
35039: LD_INT 40
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: LIST
35046: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35047: LD_VAR 0 6
35051: PPUSH
35052: CALL_OW 257
35056: PUSH
35057: LD_INT 12
35059: PUSH
35060: LD_INT 16
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: IN
35067: IFFALSE 35088
// points := [ 5 , 3 , 2 ] ;
35069: LD_ADDR_VAR 0 9
35073: PUSH
35074: LD_INT 5
35076: PUSH
35077: LD_INT 3
35079: PUSH
35080: LD_INT 2
35082: PUSH
35083: EMPTY
35084: LIST
35085: LIST
35086: LIST
35087: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35088: LD_VAR 0 6
35092: PPUSH
35093: CALL_OW 257
35097: PUSH
35098: LD_INT 17
35100: EQUAL
35101: IFFALSE 35122
// points := [ 100 , 50 , 75 ] ;
35103: LD_ADDR_VAR 0 9
35107: PUSH
35108: LD_INT 100
35110: PUSH
35111: LD_INT 50
35113: PUSH
35114: LD_INT 75
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: LIST
35121: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35122: LD_VAR 0 6
35126: PPUSH
35127: CALL_OW 257
35131: PUSH
35132: LD_INT 15
35134: EQUAL
35135: IFFALSE 35156
// points := [ 10 , 5 , 3 ] ;
35137: LD_ADDR_VAR 0 9
35141: PUSH
35142: LD_INT 10
35144: PUSH
35145: LD_INT 5
35147: PUSH
35148: LD_INT 3
35150: PUSH
35151: EMPTY
35152: LIST
35153: LIST
35154: LIST
35155: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35156: LD_VAR 0 6
35160: PPUSH
35161: CALL_OW 257
35165: PUSH
35166: LD_INT 14
35168: EQUAL
35169: IFFALSE 35190
// points := [ 10 , 0 , 0 ] ;
35171: LD_ADDR_VAR 0 9
35175: PUSH
35176: LD_INT 10
35178: PUSH
35179: LD_INT 0
35181: PUSH
35182: LD_INT 0
35184: PUSH
35185: EMPTY
35186: LIST
35187: LIST
35188: LIST
35189: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35190: LD_VAR 0 6
35194: PPUSH
35195: CALL_OW 257
35199: PUSH
35200: LD_INT 11
35202: EQUAL
35203: IFFALSE 35224
// points := [ 30 , 10 , 5 ] ;
35205: LD_ADDR_VAR 0 9
35209: PUSH
35210: LD_INT 30
35212: PUSH
35213: LD_INT 10
35215: PUSH
35216: LD_INT 5
35218: PUSH
35219: EMPTY
35220: LIST
35221: LIST
35222: LIST
35223: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35224: LD_VAR 0 1
35228: PPUSH
35229: LD_INT 5
35231: PPUSH
35232: CALL_OW 321
35236: PUSH
35237: LD_INT 2
35239: EQUAL
35240: IFFALSE 35257
// bpoints := bpoints * 1.8 ;
35242: LD_ADDR_VAR 0 10
35246: PUSH
35247: LD_VAR 0 10
35251: PUSH
35252: LD_REAL  1.80000000000000E+0000
35255: MUL
35256: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35257: LD_VAR 0 6
35261: PPUSH
35262: CALL_OW 257
35266: PUSH
35267: LD_INT 1
35269: PUSH
35270: LD_INT 2
35272: PUSH
35273: LD_INT 3
35275: PUSH
35276: LD_INT 4
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: LIST
35283: LIST
35284: IN
35285: PUSH
35286: LD_VAR 0 1
35290: PPUSH
35291: LD_INT 51
35293: PPUSH
35294: CALL_OW 321
35298: PUSH
35299: LD_INT 2
35301: EQUAL
35302: AND
35303: IFFALSE 35320
// bpoints := bpoints * 1.2 ;
35305: LD_ADDR_VAR 0 10
35309: PUSH
35310: LD_VAR 0 10
35314: PUSH
35315: LD_REAL  1.20000000000000E+0000
35318: MUL
35319: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35320: LD_VAR 0 6
35324: PPUSH
35325: CALL_OW 257
35329: PUSH
35330: LD_INT 5
35332: PUSH
35333: LD_INT 7
35335: PUSH
35336: LD_INT 9
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: LIST
35343: IN
35344: PUSH
35345: LD_VAR 0 1
35349: PPUSH
35350: LD_INT 52
35352: PPUSH
35353: CALL_OW 321
35357: PUSH
35358: LD_INT 2
35360: EQUAL
35361: AND
35362: IFFALSE 35379
// bpoints := bpoints * 1.5 ;
35364: LD_ADDR_VAR 0 10
35368: PUSH
35369: LD_VAR 0 10
35373: PUSH
35374: LD_REAL  1.50000000000000E+0000
35377: MUL
35378: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35379: LD_VAR 0 1
35383: PPUSH
35384: LD_INT 66
35386: PPUSH
35387: CALL_OW 321
35391: PUSH
35392: LD_INT 2
35394: EQUAL
35395: IFFALSE 35412
// bpoints := bpoints * 1.1 ;
35397: LD_ADDR_VAR 0 10
35401: PUSH
35402: LD_VAR 0 10
35406: PUSH
35407: LD_REAL  1.10000000000000E+0000
35410: MUL
35411: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35412: LD_ADDR_VAR 0 10
35416: PUSH
35417: LD_VAR 0 10
35421: PUSH
35422: LD_VAR 0 6
35426: PPUSH
35427: LD_INT 1
35429: PPUSH
35430: CALL_OW 259
35434: PUSH
35435: LD_REAL  1.15000000000000E+0000
35438: MUL
35439: MUL
35440: ST_TO_ADDR
// end ; unit_vehicle :
35441: GO 36269
35443: LD_INT 2
35445: DOUBLE
35446: EQUAL
35447: IFTRUE 35451
35449: GO 36257
35451: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35452: LD_VAR 0 6
35456: PPUSH
35457: CALL_OW 264
35461: PUSH
35462: LD_INT 2
35464: PUSH
35465: LD_INT 42
35467: PUSH
35468: LD_INT 24
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: LIST
35475: IN
35476: IFFALSE 35497
// points := [ 25 , 5 , 3 ] ;
35478: LD_ADDR_VAR 0 9
35482: PUSH
35483: LD_INT 25
35485: PUSH
35486: LD_INT 5
35488: PUSH
35489: LD_INT 3
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: LIST
35496: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
35497: LD_VAR 0 6
35501: PPUSH
35502: CALL_OW 264
35506: PUSH
35507: LD_INT 4
35509: PUSH
35510: LD_INT 43
35512: PUSH
35513: LD_INT 25
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: LIST
35520: IN
35521: IFFALSE 35542
// points := [ 40 , 15 , 5 ] ;
35523: LD_ADDR_VAR 0 9
35527: PUSH
35528: LD_INT 40
35530: PUSH
35531: LD_INT 15
35533: PUSH
35534: LD_INT 5
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: LIST
35541: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35542: LD_VAR 0 6
35546: PPUSH
35547: CALL_OW 264
35551: PUSH
35552: LD_INT 3
35554: PUSH
35555: LD_INT 23
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: IN
35562: IFFALSE 35583
// points := [ 7 , 25 , 8 ] ;
35564: LD_ADDR_VAR 0 9
35568: PUSH
35569: LD_INT 7
35571: PUSH
35572: LD_INT 25
35574: PUSH
35575: LD_INT 8
35577: PUSH
35578: EMPTY
35579: LIST
35580: LIST
35581: LIST
35582: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35583: LD_VAR 0 6
35587: PPUSH
35588: CALL_OW 264
35592: PUSH
35593: LD_INT 5
35595: PUSH
35596: LD_INT 27
35598: PUSH
35599: LD_INT 44
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: LIST
35606: IN
35607: IFFALSE 35628
// points := [ 14 , 50 , 16 ] ;
35609: LD_ADDR_VAR 0 9
35613: PUSH
35614: LD_INT 14
35616: PUSH
35617: LD_INT 50
35619: PUSH
35620: LD_INT 16
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: LIST
35627: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35628: LD_VAR 0 6
35632: PPUSH
35633: CALL_OW 264
35637: PUSH
35638: LD_INT 6
35640: PUSH
35641: LD_INT 46
35643: PUSH
35644: EMPTY
35645: LIST
35646: LIST
35647: IN
35648: IFFALSE 35669
// points := [ 32 , 120 , 70 ] ;
35650: LD_ADDR_VAR 0 9
35654: PUSH
35655: LD_INT 32
35657: PUSH
35658: LD_INT 120
35660: PUSH
35661: LD_INT 70
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: LIST
35668: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
35669: LD_VAR 0 6
35673: PPUSH
35674: CALL_OW 264
35678: PUSH
35679: LD_INT 7
35681: PUSH
35682: LD_INT 28
35684: PUSH
35685: LD_INT 45
35687: PUSH
35688: LD_INT 92
35690: PUSH
35691: EMPTY
35692: LIST
35693: LIST
35694: LIST
35695: LIST
35696: IN
35697: IFFALSE 35718
// points := [ 35 , 20 , 45 ] ;
35699: LD_ADDR_VAR 0 9
35703: PUSH
35704: LD_INT 35
35706: PUSH
35707: LD_INT 20
35709: PUSH
35710: LD_INT 45
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: LIST
35717: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35718: LD_VAR 0 6
35722: PPUSH
35723: CALL_OW 264
35727: PUSH
35728: LD_INT 47
35730: PUSH
35731: EMPTY
35732: LIST
35733: IN
35734: IFFALSE 35755
// points := [ 67 , 45 , 75 ] ;
35736: LD_ADDR_VAR 0 9
35740: PUSH
35741: LD_INT 67
35743: PUSH
35744: LD_INT 45
35746: PUSH
35747: LD_INT 75
35749: PUSH
35750: EMPTY
35751: LIST
35752: LIST
35753: LIST
35754: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35755: LD_VAR 0 6
35759: PPUSH
35760: CALL_OW 264
35764: PUSH
35765: LD_INT 26
35767: PUSH
35768: EMPTY
35769: LIST
35770: IN
35771: IFFALSE 35792
// points := [ 120 , 30 , 80 ] ;
35773: LD_ADDR_VAR 0 9
35777: PUSH
35778: LD_INT 120
35780: PUSH
35781: LD_INT 30
35783: PUSH
35784: LD_INT 80
35786: PUSH
35787: EMPTY
35788: LIST
35789: LIST
35790: LIST
35791: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35792: LD_VAR 0 6
35796: PPUSH
35797: CALL_OW 264
35801: PUSH
35802: LD_INT 22
35804: PUSH
35805: EMPTY
35806: LIST
35807: IN
35808: IFFALSE 35829
// points := [ 40 , 1 , 1 ] ;
35810: LD_ADDR_VAR 0 9
35814: PUSH
35815: LD_INT 40
35817: PUSH
35818: LD_INT 1
35820: PUSH
35821: LD_INT 1
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: LIST
35828: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35829: LD_VAR 0 6
35833: PPUSH
35834: CALL_OW 264
35838: PUSH
35839: LD_INT 29
35841: PUSH
35842: EMPTY
35843: LIST
35844: IN
35845: IFFALSE 35866
// points := [ 70 , 200 , 400 ] ;
35847: LD_ADDR_VAR 0 9
35851: PUSH
35852: LD_INT 70
35854: PUSH
35855: LD_INT 200
35857: PUSH
35858: LD_INT 400
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: LIST
35865: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35866: LD_VAR 0 6
35870: PPUSH
35871: CALL_OW 264
35875: PUSH
35876: LD_INT 14
35878: PUSH
35879: LD_INT 53
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: IN
35886: IFFALSE 35907
// points := [ 40 , 10 , 20 ] ;
35888: LD_ADDR_VAR 0 9
35892: PUSH
35893: LD_INT 40
35895: PUSH
35896: LD_INT 10
35898: PUSH
35899: LD_INT 20
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: LIST
35906: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35907: LD_VAR 0 6
35911: PPUSH
35912: CALL_OW 264
35916: PUSH
35917: LD_INT 9
35919: PUSH
35920: EMPTY
35921: LIST
35922: IN
35923: IFFALSE 35944
// points := [ 5 , 70 , 20 ] ;
35925: LD_ADDR_VAR 0 9
35929: PUSH
35930: LD_INT 5
35932: PUSH
35933: LD_INT 70
35935: PUSH
35936: LD_INT 20
35938: PUSH
35939: EMPTY
35940: LIST
35941: LIST
35942: LIST
35943: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35944: LD_VAR 0 6
35948: PPUSH
35949: CALL_OW 264
35953: PUSH
35954: LD_INT 10
35956: PUSH
35957: EMPTY
35958: LIST
35959: IN
35960: IFFALSE 35981
// points := [ 35 , 110 , 70 ] ;
35962: LD_ADDR_VAR 0 9
35966: PUSH
35967: LD_INT 35
35969: PUSH
35970: LD_INT 110
35972: PUSH
35973: LD_INT 70
35975: PUSH
35976: EMPTY
35977: LIST
35978: LIST
35979: LIST
35980: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35981: LD_VAR 0 6
35985: PPUSH
35986: CALL_OW 265
35990: PUSH
35991: LD_INT 25
35993: EQUAL
35994: IFFALSE 36015
// points := [ 80 , 65 , 100 ] ;
35996: LD_ADDR_VAR 0 9
36000: PUSH
36001: LD_INT 80
36003: PUSH
36004: LD_INT 65
36006: PUSH
36007: LD_INT 100
36009: PUSH
36010: EMPTY
36011: LIST
36012: LIST
36013: LIST
36014: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36015: LD_VAR 0 6
36019: PPUSH
36020: CALL_OW 263
36024: PUSH
36025: LD_INT 1
36027: EQUAL
36028: IFFALSE 36063
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36030: LD_ADDR_VAR 0 10
36034: PUSH
36035: LD_VAR 0 10
36039: PUSH
36040: LD_VAR 0 6
36044: PPUSH
36045: CALL_OW 311
36049: PPUSH
36050: LD_INT 3
36052: PPUSH
36053: CALL_OW 259
36057: PUSH
36058: LD_INT 4
36060: MUL
36061: MUL
36062: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36063: LD_VAR 0 6
36067: PPUSH
36068: CALL_OW 263
36072: PUSH
36073: LD_INT 2
36075: EQUAL
36076: IFFALSE 36127
// begin j := IsControledBy ( i ) ;
36078: LD_ADDR_VAR 0 7
36082: PUSH
36083: LD_VAR 0 6
36087: PPUSH
36088: CALL_OW 312
36092: ST_TO_ADDR
// if j then
36093: LD_VAR 0 7
36097: IFFALSE 36127
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36099: LD_ADDR_VAR 0 10
36103: PUSH
36104: LD_VAR 0 10
36108: PUSH
36109: LD_VAR 0 7
36113: PPUSH
36114: LD_INT 3
36116: PPUSH
36117: CALL_OW 259
36121: PUSH
36122: LD_INT 3
36124: MUL
36125: MUL
36126: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36127: LD_VAR 0 6
36131: PPUSH
36132: CALL_OW 264
36136: PUSH
36137: LD_INT 5
36139: PUSH
36140: LD_INT 6
36142: PUSH
36143: LD_INT 46
36145: PUSH
36146: LD_INT 44
36148: PUSH
36149: LD_INT 47
36151: PUSH
36152: LD_INT 45
36154: PUSH
36155: LD_INT 28
36157: PUSH
36158: LD_INT 7
36160: PUSH
36161: LD_INT 27
36163: PUSH
36164: LD_INT 29
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: LIST
36171: LIST
36172: LIST
36173: LIST
36174: LIST
36175: LIST
36176: LIST
36177: LIST
36178: IN
36179: PUSH
36180: LD_VAR 0 1
36184: PPUSH
36185: LD_INT 52
36187: PPUSH
36188: CALL_OW 321
36192: PUSH
36193: LD_INT 2
36195: EQUAL
36196: AND
36197: IFFALSE 36214
// bpoints := bpoints * 1.2 ;
36199: LD_ADDR_VAR 0 10
36203: PUSH
36204: LD_VAR 0 10
36208: PUSH
36209: LD_REAL  1.20000000000000E+0000
36212: MUL
36213: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36214: LD_VAR 0 6
36218: PPUSH
36219: CALL_OW 264
36223: PUSH
36224: LD_INT 6
36226: PUSH
36227: LD_INT 46
36229: PUSH
36230: LD_INT 47
36232: PUSH
36233: EMPTY
36234: LIST
36235: LIST
36236: LIST
36237: IN
36238: IFFALSE 36255
// bpoints := bpoints * 1.2 ;
36240: LD_ADDR_VAR 0 10
36244: PUSH
36245: LD_VAR 0 10
36249: PUSH
36250: LD_REAL  1.20000000000000E+0000
36253: MUL
36254: ST_TO_ADDR
// end ; unit_building :
36255: GO 36269
36257: LD_INT 3
36259: DOUBLE
36260: EQUAL
36261: IFTRUE 36265
36263: GO 36268
36265: POP
// ; end ;
36266: GO 36269
36268: POP
// for j = 1 to 3 do
36269: LD_ADDR_VAR 0 7
36273: PUSH
36274: DOUBLE
36275: LD_INT 1
36277: DEC
36278: ST_TO_ADDR
36279: LD_INT 3
36281: PUSH
36282: FOR_TO
36283: IFFALSE 36336
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36285: LD_ADDR_VAR 0 5
36289: PUSH
36290: LD_VAR 0 5
36294: PPUSH
36295: LD_VAR 0 7
36299: PPUSH
36300: LD_VAR 0 5
36304: PUSH
36305: LD_VAR 0 7
36309: ARRAY
36310: PUSH
36311: LD_VAR 0 9
36315: PUSH
36316: LD_VAR 0 7
36320: ARRAY
36321: PUSH
36322: LD_VAR 0 10
36326: MUL
36327: PLUS
36328: PPUSH
36329: CALL_OW 1
36333: ST_TO_ADDR
36334: GO 36282
36336: POP
36337: POP
// end ;
36338: GO 34817
36340: POP
36341: POP
// result := Replace ( result , 4 , tmp ) ;
36342: LD_ADDR_VAR 0 5
36346: PUSH
36347: LD_VAR 0 5
36351: PPUSH
36352: LD_INT 4
36354: PPUSH
36355: LD_VAR 0 8
36359: PPUSH
36360: CALL_OW 1
36364: ST_TO_ADDR
// end ;
36365: LD_VAR 0 5
36369: RET
// export function DangerAtRange ( unit , range ) ; begin
36370: LD_INT 0
36372: PPUSH
// if not unit then
36373: LD_VAR 0 1
36377: NOT
36378: IFFALSE 36382
// exit ;
36380: GO 36427
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36382: LD_ADDR_VAR 0 3
36386: PUSH
36387: LD_VAR 0 1
36391: PPUSH
36392: CALL_OW 255
36396: PPUSH
36397: LD_VAR 0 1
36401: PPUSH
36402: CALL_OW 250
36406: PPUSH
36407: LD_VAR 0 1
36411: PPUSH
36412: CALL_OW 251
36416: PPUSH
36417: LD_VAR 0 2
36421: PPUSH
36422: CALL 34669 0 4
36426: ST_TO_ADDR
// end ;
36427: LD_VAR 0 3
36431: RET
// export function DangerInArea ( side , area ) ; begin
36432: LD_INT 0
36434: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36435: LD_ADDR_VAR 0 3
36439: PUSH
36440: LD_VAR 0 2
36444: PPUSH
36445: LD_INT 81
36447: PUSH
36448: LD_VAR 0 1
36452: PUSH
36453: EMPTY
36454: LIST
36455: LIST
36456: PPUSH
36457: CALL_OW 70
36461: ST_TO_ADDR
// end ;
36462: LD_VAR 0 3
36466: RET
// export function IsExtension ( b ) ; begin
36467: LD_INT 0
36469: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36470: LD_ADDR_VAR 0 2
36474: PUSH
36475: LD_VAR 0 1
36479: PUSH
36480: LD_INT 23
36482: PUSH
36483: LD_INT 20
36485: PUSH
36486: LD_INT 22
36488: PUSH
36489: LD_INT 17
36491: PUSH
36492: LD_INT 24
36494: PUSH
36495: LD_INT 21
36497: PUSH
36498: LD_INT 19
36500: PUSH
36501: LD_INT 16
36503: PUSH
36504: LD_INT 25
36506: PUSH
36507: LD_INT 18
36509: PUSH
36510: EMPTY
36511: LIST
36512: LIST
36513: LIST
36514: LIST
36515: LIST
36516: LIST
36517: LIST
36518: LIST
36519: LIST
36520: LIST
36521: IN
36522: ST_TO_ADDR
// end ;
36523: LD_VAR 0 2
36527: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
36528: LD_INT 0
36530: PPUSH
36531: PPUSH
36532: PPUSH
// result := [ ] ;
36533: LD_ADDR_VAR 0 4
36537: PUSH
36538: EMPTY
36539: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36540: LD_ADDR_VAR 0 5
36544: PUSH
36545: LD_VAR 0 2
36549: PPUSH
36550: LD_INT 21
36552: PUSH
36553: LD_INT 3
36555: PUSH
36556: EMPTY
36557: LIST
36558: LIST
36559: PPUSH
36560: CALL_OW 70
36564: ST_TO_ADDR
// if not tmp then
36565: LD_VAR 0 5
36569: NOT
36570: IFFALSE 36574
// exit ;
36572: GO 36638
// if checkLink then
36574: LD_VAR 0 3
36578: IFFALSE 36628
// begin for i in tmp do
36580: LD_ADDR_VAR 0 6
36584: PUSH
36585: LD_VAR 0 5
36589: PUSH
36590: FOR_IN
36591: IFFALSE 36626
// if GetBase ( i ) <> base then
36593: LD_VAR 0 6
36597: PPUSH
36598: CALL_OW 274
36602: PUSH
36603: LD_VAR 0 1
36607: NONEQUAL
36608: IFFALSE 36624
// ComLinkToBase ( base , i ) ;
36610: LD_VAR 0 1
36614: PPUSH
36615: LD_VAR 0 6
36619: PPUSH
36620: CALL_OW 169
36624: GO 36590
36626: POP
36627: POP
// end ; result := tmp ;
36628: LD_ADDR_VAR 0 4
36632: PUSH
36633: LD_VAR 0 5
36637: ST_TO_ADDR
// end ;
36638: LD_VAR 0 4
36642: RET
// export function ComComplete ( units , b ) ; var i ; begin
36643: LD_INT 0
36645: PPUSH
36646: PPUSH
// if not units then
36647: LD_VAR 0 1
36651: NOT
36652: IFFALSE 36656
// exit ;
36654: GO 36746
// for i in units do
36656: LD_ADDR_VAR 0 4
36660: PUSH
36661: LD_VAR 0 1
36665: PUSH
36666: FOR_IN
36667: IFFALSE 36744
// if BuildingStatus ( b ) = bs_build then
36669: LD_VAR 0 2
36673: PPUSH
36674: CALL_OW 461
36678: PUSH
36679: LD_INT 1
36681: EQUAL
36682: IFFALSE 36742
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36684: LD_VAR 0 4
36688: PPUSH
36689: LD_STRING h
36691: PUSH
36692: LD_VAR 0 2
36696: PPUSH
36697: CALL_OW 250
36701: PUSH
36702: LD_VAR 0 2
36706: PPUSH
36707: CALL_OW 251
36711: PUSH
36712: LD_VAR 0 2
36716: PUSH
36717: LD_INT 0
36719: PUSH
36720: LD_INT 0
36722: PUSH
36723: LD_INT 0
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: LIST
36730: LIST
36731: LIST
36732: LIST
36733: LIST
36734: PUSH
36735: EMPTY
36736: LIST
36737: PPUSH
36738: CALL_OW 446
36742: GO 36666
36744: POP
36745: POP
// end ;
36746: LD_VAR 0 3
36750: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36751: LD_INT 0
36753: PPUSH
36754: PPUSH
36755: PPUSH
36756: PPUSH
36757: PPUSH
36758: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
36759: LD_VAR 0 1
36763: NOT
36764: PUSH
36765: LD_VAR 0 1
36769: PPUSH
36770: CALL_OW 263
36774: PUSH
36775: LD_INT 2
36777: NONEQUAL
36778: OR
36779: IFFALSE 36783
// exit ;
36781: GO 37099
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36783: LD_ADDR_VAR 0 6
36787: PUSH
36788: LD_INT 22
36790: PUSH
36791: LD_VAR 0 1
36795: PPUSH
36796: CALL_OW 255
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: PUSH
36805: LD_INT 2
36807: PUSH
36808: LD_INT 30
36810: PUSH
36811: LD_INT 36
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: PUSH
36818: LD_INT 34
36820: PUSH
36821: LD_INT 31
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: PUSH
36828: EMPTY
36829: LIST
36830: LIST
36831: LIST
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: PPUSH
36837: CALL_OW 69
36841: ST_TO_ADDR
// if not tmp then
36842: LD_VAR 0 6
36846: NOT
36847: IFFALSE 36851
// exit ;
36849: GO 37099
// result := [ ] ;
36851: LD_ADDR_VAR 0 2
36855: PUSH
36856: EMPTY
36857: ST_TO_ADDR
// for i in tmp do
36858: LD_ADDR_VAR 0 3
36862: PUSH
36863: LD_VAR 0 6
36867: PUSH
36868: FOR_IN
36869: IFFALSE 36940
// begin t := UnitsInside ( i ) ;
36871: LD_ADDR_VAR 0 4
36875: PUSH
36876: LD_VAR 0 3
36880: PPUSH
36881: CALL_OW 313
36885: ST_TO_ADDR
// if t then
36886: LD_VAR 0 4
36890: IFFALSE 36938
// for j in t do
36892: LD_ADDR_VAR 0 7
36896: PUSH
36897: LD_VAR 0 4
36901: PUSH
36902: FOR_IN
36903: IFFALSE 36936
// result := Replace ( result , result + 1 , j ) ;
36905: LD_ADDR_VAR 0 2
36909: PUSH
36910: LD_VAR 0 2
36914: PPUSH
36915: LD_VAR 0 2
36919: PUSH
36920: LD_INT 1
36922: PLUS
36923: PPUSH
36924: LD_VAR 0 7
36928: PPUSH
36929: CALL_OW 1
36933: ST_TO_ADDR
36934: GO 36902
36936: POP
36937: POP
// end ;
36938: GO 36868
36940: POP
36941: POP
// if not result then
36942: LD_VAR 0 2
36946: NOT
36947: IFFALSE 36951
// exit ;
36949: GO 37099
// mech := result [ 1 ] ;
36951: LD_ADDR_VAR 0 5
36955: PUSH
36956: LD_VAR 0 2
36960: PUSH
36961: LD_INT 1
36963: ARRAY
36964: ST_TO_ADDR
// if result > 1 then
36965: LD_VAR 0 2
36969: PUSH
36970: LD_INT 1
36972: GREATER
36973: IFFALSE 37085
// begin for i = 2 to result do
36975: LD_ADDR_VAR 0 3
36979: PUSH
36980: DOUBLE
36981: LD_INT 2
36983: DEC
36984: ST_TO_ADDR
36985: LD_VAR 0 2
36989: PUSH
36990: FOR_TO
36991: IFFALSE 37083
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36993: LD_ADDR_VAR 0 4
36997: PUSH
36998: LD_VAR 0 2
37002: PUSH
37003: LD_VAR 0 3
37007: ARRAY
37008: PPUSH
37009: LD_INT 3
37011: PPUSH
37012: CALL_OW 259
37016: PUSH
37017: LD_VAR 0 2
37021: PUSH
37022: LD_VAR 0 3
37026: ARRAY
37027: PPUSH
37028: CALL_OW 432
37032: MINUS
37033: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37034: LD_VAR 0 4
37038: PUSH
37039: LD_VAR 0 5
37043: PPUSH
37044: LD_INT 3
37046: PPUSH
37047: CALL_OW 259
37051: PUSH
37052: LD_VAR 0 5
37056: PPUSH
37057: CALL_OW 432
37061: MINUS
37062: GREATEREQUAL
37063: IFFALSE 37081
// mech := result [ i ] ;
37065: LD_ADDR_VAR 0 5
37069: PUSH
37070: LD_VAR 0 2
37074: PUSH
37075: LD_VAR 0 3
37079: ARRAY
37080: ST_TO_ADDR
// end ;
37081: GO 36990
37083: POP
37084: POP
// end ; ComLinkTo ( vehicle , mech ) ;
37085: LD_VAR 0 1
37089: PPUSH
37090: LD_VAR 0 5
37094: PPUSH
37095: CALL_OW 135
// end ;
37099: LD_VAR 0 2
37103: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37104: LD_INT 0
37106: PPUSH
37107: PPUSH
37108: PPUSH
37109: PPUSH
37110: PPUSH
37111: PPUSH
37112: PPUSH
37113: PPUSH
37114: PPUSH
37115: PPUSH
37116: PPUSH
37117: PPUSH
37118: PPUSH
// result := [ ] ;
37119: LD_ADDR_VAR 0 7
37123: PUSH
37124: EMPTY
37125: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37126: LD_VAR 0 1
37130: PPUSH
37131: CALL_OW 266
37135: PUSH
37136: LD_INT 0
37138: PUSH
37139: LD_INT 1
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: IN
37146: NOT
37147: IFFALSE 37151
// exit ;
37149: GO 38785
// if name then
37151: LD_VAR 0 3
37155: IFFALSE 37171
// SetBName ( base_dep , name ) ;
37157: LD_VAR 0 1
37161: PPUSH
37162: LD_VAR 0 3
37166: PPUSH
37167: CALL_OW 500
// base := GetBase ( base_dep ) ;
37171: LD_ADDR_VAR 0 15
37175: PUSH
37176: LD_VAR 0 1
37180: PPUSH
37181: CALL_OW 274
37185: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37186: LD_ADDR_VAR 0 16
37190: PUSH
37191: LD_VAR 0 1
37195: PPUSH
37196: CALL_OW 255
37200: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37201: LD_ADDR_VAR 0 17
37205: PUSH
37206: LD_VAR 0 1
37210: PPUSH
37211: CALL_OW 248
37215: ST_TO_ADDR
// if sources then
37216: LD_VAR 0 5
37220: IFFALSE 37267
// for i = 1 to 3 do
37222: LD_ADDR_VAR 0 8
37226: PUSH
37227: DOUBLE
37228: LD_INT 1
37230: DEC
37231: ST_TO_ADDR
37232: LD_INT 3
37234: PUSH
37235: FOR_TO
37236: IFFALSE 37265
// AddResourceType ( base , i , sources [ i ] ) ;
37238: LD_VAR 0 15
37242: PPUSH
37243: LD_VAR 0 8
37247: PPUSH
37248: LD_VAR 0 5
37252: PUSH
37253: LD_VAR 0 8
37257: ARRAY
37258: PPUSH
37259: CALL_OW 276
37263: GO 37235
37265: POP
37266: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
37267: LD_ADDR_VAR 0 18
37271: PUSH
37272: LD_VAR 0 15
37276: PPUSH
37277: LD_VAR 0 2
37281: PPUSH
37282: LD_INT 1
37284: PPUSH
37285: CALL 36528 0 3
37289: ST_TO_ADDR
// InitHc ;
37290: CALL_OW 19
// InitUc ;
37294: CALL_OW 18
// uc_side := side ;
37298: LD_ADDR_OWVAR 20
37302: PUSH
37303: LD_VAR 0 16
37307: ST_TO_ADDR
// uc_nation := nation ;
37308: LD_ADDR_OWVAR 21
37312: PUSH
37313: LD_VAR 0 17
37317: ST_TO_ADDR
// if buildings then
37318: LD_VAR 0 18
37322: IFFALSE 38644
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37324: LD_ADDR_VAR 0 19
37328: PUSH
37329: LD_VAR 0 18
37333: PPUSH
37334: LD_INT 2
37336: PUSH
37337: LD_INT 30
37339: PUSH
37340: LD_INT 29
37342: PUSH
37343: EMPTY
37344: LIST
37345: LIST
37346: PUSH
37347: LD_INT 30
37349: PUSH
37350: LD_INT 30
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: PUSH
37357: EMPTY
37358: LIST
37359: LIST
37360: LIST
37361: PPUSH
37362: CALL_OW 72
37366: ST_TO_ADDR
// if tmp then
37367: LD_VAR 0 19
37371: IFFALSE 37419
// for i in tmp do
37373: LD_ADDR_VAR 0 8
37377: PUSH
37378: LD_VAR 0 19
37382: PUSH
37383: FOR_IN
37384: IFFALSE 37417
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37386: LD_VAR 0 8
37390: PPUSH
37391: CALL_OW 250
37395: PPUSH
37396: LD_VAR 0 8
37400: PPUSH
37401: CALL_OW 251
37405: PPUSH
37406: LD_VAR 0 16
37410: PPUSH
37411: CALL_OW 441
37415: GO 37383
37417: POP
37418: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37419: LD_VAR 0 18
37423: PPUSH
37424: LD_INT 2
37426: PUSH
37427: LD_INT 30
37429: PUSH
37430: LD_INT 32
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: PUSH
37437: LD_INT 30
37439: PUSH
37440: LD_INT 33
37442: PUSH
37443: EMPTY
37444: LIST
37445: LIST
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: LIST
37451: PPUSH
37452: CALL_OW 72
37456: IFFALSE 37544
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
37458: LD_ADDR_VAR 0 8
37462: PUSH
37463: LD_VAR 0 18
37467: PPUSH
37468: LD_INT 2
37470: PUSH
37471: LD_INT 30
37473: PUSH
37474: LD_INT 32
37476: PUSH
37477: EMPTY
37478: LIST
37479: LIST
37480: PUSH
37481: LD_INT 30
37483: PUSH
37484: LD_INT 33
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: PUSH
37491: EMPTY
37492: LIST
37493: LIST
37494: LIST
37495: PPUSH
37496: CALL_OW 72
37500: PUSH
37501: FOR_IN
37502: IFFALSE 37542
// begin if not GetBWeapon ( i ) then
37504: LD_VAR 0 8
37508: PPUSH
37509: CALL_OW 269
37513: NOT
37514: IFFALSE 37540
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
37516: LD_VAR 0 8
37520: PPUSH
37521: LD_VAR 0 8
37525: PPUSH
37526: LD_VAR 0 2
37530: PPUSH
37531: CALL 38790 0 2
37535: PPUSH
37536: CALL_OW 431
// end ;
37540: GO 37501
37542: POP
37543: POP
// end ; for i = 1 to personel do
37544: LD_ADDR_VAR 0 8
37548: PUSH
37549: DOUBLE
37550: LD_INT 1
37552: DEC
37553: ST_TO_ADDR
37554: LD_VAR 0 6
37558: PUSH
37559: FOR_TO
37560: IFFALSE 38624
// begin if i > 4 then
37562: LD_VAR 0 8
37566: PUSH
37567: LD_INT 4
37569: GREATER
37570: IFFALSE 37574
// break ;
37572: GO 38624
// case i of 1 :
37574: LD_VAR 0 8
37578: PUSH
37579: LD_INT 1
37581: DOUBLE
37582: EQUAL
37583: IFTRUE 37587
37585: GO 37667
37587: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37588: LD_ADDR_VAR 0 12
37592: PUSH
37593: LD_VAR 0 18
37597: PPUSH
37598: LD_INT 22
37600: PUSH
37601: LD_VAR 0 16
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: PUSH
37610: LD_INT 58
37612: PUSH
37613: EMPTY
37614: LIST
37615: PUSH
37616: LD_INT 2
37618: PUSH
37619: LD_INT 30
37621: PUSH
37622: LD_INT 32
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: PUSH
37629: LD_INT 30
37631: PUSH
37632: LD_INT 4
37634: PUSH
37635: EMPTY
37636: LIST
37637: LIST
37638: PUSH
37639: LD_INT 30
37641: PUSH
37642: LD_INT 5
37644: PUSH
37645: EMPTY
37646: LIST
37647: LIST
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: LIST
37653: LIST
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: LIST
37659: PPUSH
37660: CALL_OW 72
37664: ST_TO_ADDR
37665: GO 37889
37667: LD_INT 2
37669: DOUBLE
37670: EQUAL
37671: IFTRUE 37675
37673: GO 37737
37675: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37676: LD_ADDR_VAR 0 12
37680: PUSH
37681: LD_VAR 0 18
37685: PPUSH
37686: LD_INT 22
37688: PUSH
37689: LD_VAR 0 16
37693: PUSH
37694: EMPTY
37695: LIST
37696: LIST
37697: PUSH
37698: LD_INT 2
37700: PUSH
37701: LD_INT 30
37703: PUSH
37704: LD_INT 0
37706: PUSH
37707: EMPTY
37708: LIST
37709: LIST
37710: PUSH
37711: LD_INT 30
37713: PUSH
37714: LD_INT 1
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: PUSH
37721: EMPTY
37722: LIST
37723: LIST
37724: LIST
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: PPUSH
37730: CALL_OW 72
37734: ST_TO_ADDR
37735: GO 37889
37737: LD_INT 3
37739: DOUBLE
37740: EQUAL
37741: IFTRUE 37745
37743: GO 37807
37745: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37746: LD_ADDR_VAR 0 12
37750: PUSH
37751: LD_VAR 0 18
37755: PPUSH
37756: LD_INT 22
37758: PUSH
37759: LD_VAR 0 16
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: PUSH
37768: LD_INT 2
37770: PUSH
37771: LD_INT 30
37773: PUSH
37774: LD_INT 2
37776: PUSH
37777: EMPTY
37778: LIST
37779: LIST
37780: PUSH
37781: LD_INT 30
37783: PUSH
37784: LD_INT 3
37786: PUSH
37787: EMPTY
37788: LIST
37789: LIST
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: LIST
37795: PUSH
37796: EMPTY
37797: LIST
37798: LIST
37799: PPUSH
37800: CALL_OW 72
37804: ST_TO_ADDR
37805: GO 37889
37807: LD_INT 4
37809: DOUBLE
37810: EQUAL
37811: IFTRUE 37815
37813: GO 37888
37815: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37816: LD_ADDR_VAR 0 12
37820: PUSH
37821: LD_VAR 0 18
37825: PPUSH
37826: LD_INT 22
37828: PUSH
37829: LD_VAR 0 16
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: PUSH
37838: LD_INT 2
37840: PUSH
37841: LD_INT 30
37843: PUSH
37844: LD_INT 6
37846: PUSH
37847: EMPTY
37848: LIST
37849: LIST
37850: PUSH
37851: LD_INT 30
37853: PUSH
37854: LD_INT 7
37856: PUSH
37857: EMPTY
37858: LIST
37859: LIST
37860: PUSH
37861: LD_INT 30
37863: PUSH
37864: LD_INT 8
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: PUSH
37871: EMPTY
37872: LIST
37873: LIST
37874: LIST
37875: LIST
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: PPUSH
37881: CALL_OW 72
37885: ST_TO_ADDR
37886: GO 37889
37888: POP
// if i = 1 then
37889: LD_VAR 0 8
37893: PUSH
37894: LD_INT 1
37896: EQUAL
37897: IFFALSE 38008
// begin tmp := [ ] ;
37899: LD_ADDR_VAR 0 19
37903: PUSH
37904: EMPTY
37905: ST_TO_ADDR
// for j in f do
37906: LD_ADDR_VAR 0 9
37910: PUSH
37911: LD_VAR 0 12
37915: PUSH
37916: FOR_IN
37917: IFFALSE 37990
// if GetBType ( j ) = b_bunker then
37919: LD_VAR 0 9
37923: PPUSH
37924: CALL_OW 266
37928: PUSH
37929: LD_INT 32
37931: EQUAL
37932: IFFALSE 37959
// tmp := Insert ( tmp , 1 , j ) else
37934: LD_ADDR_VAR 0 19
37938: PUSH
37939: LD_VAR 0 19
37943: PPUSH
37944: LD_INT 1
37946: PPUSH
37947: LD_VAR 0 9
37951: PPUSH
37952: CALL_OW 2
37956: ST_TO_ADDR
37957: GO 37988
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37959: LD_ADDR_VAR 0 19
37963: PUSH
37964: LD_VAR 0 19
37968: PPUSH
37969: LD_VAR 0 19
37973: PUSH
37974: LD_INT 1
37976: PLUS
37977: PPUSH
37978: LD_VAR 0 9
37982: PPUSH
37983: CALL_OW 2
37987: ST_TO_ADDR
37988: GO 37916
37990: POP
37991: POP
// if tmp then
37992: LD_VAR 0 19
37996: IFFALSE 38008
// f := tmp ;
37998: LD_ADDR_VAR 0 12
38002: PUSH
38003: LD_VAR 0 19
38007: ST_TO_ADDR
// end ; x := personel [ i ] ;
38008: LD_ADDR_VAR 0 13
38012: PUSH
38013: LD_VAR 0 6
38017: PUSH
38018: LD_VAR 0 8
38022: ARRAY
38023: ST_TO_ADDR
// if x = - 1 then
38024: LD_VAR 0 13
38028: PUSH
38029: LD_INT 1
38031: NEG
38032: EQUAL
38033: IFFALSE 38242
// begin for j in f do
38035: LD_ADDR_VAR 0 9
38039: PUSH
38040: LD_VAR 0 12
38044: PUSH
38045: FOR_IN
38046: IFFALSE 38238
// repeat InitHc ;
38048: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38052: LD_VAR 0 9
38056: PPUSH
38057: CALL_OW 266
38061: PUSH
38062: LD_INT 5
38064: EQUAL
38065: IFFALSE 38135
// begin if UnitsInside ( j ) < 3 then
38067: LD_VAR 0 9
38071: PPUSH
38072: CALL_OW 313
38076: PUSH
38077: LD_INT 3
38079: LESS
38080: IFFALSE 38116
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38082: LD_INT 0
38084: PPUSH
38085: LD_INT 5
38087: PUSH
38088: LD_INT 8
38090: PUSH
38091: LD_INT 9
38093: PUSH
38094: EMPTY
38095: LIST
38096: LIST
38097: LIST
38098: PUSH
38099: LD_VAR 0 17
38103: ARRAY
38104: PPUSH
38105: LD_VAR 0 4
38109: PPUSH
38110: CALL_OW 380
38114: GO 38133
// PrepareHuman ( false , i , skill ) ;
38116: LD_INT 0
38118: PPUSH
38119: LD_VAR 0 8
38123: PPUSH
38124: LD_VAR 0 4
38128: PPUSH
38129: CALL_OW 380
// end else
38133: GO 38152
// PrepareHuman ( false , i , skill ) ;
38135: LD_INT 0
38137: PPUSH
38138: LD_VAR 0 8
38142: PPUSH
38143: LD_VAR 0 4
38147: PPUSH
38148: CALL_OW 380
// un := CreateHuman ;
38152: LD_ADDR_VAR 0 14
38156: PUSH
38157: CALL_OW 44
38161: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38162: LD_ADDR_VAR 0 7
38166: PUSH
38167: LD_VAR 0 7
38171: PPUSH
38172: LD_INT 1
38174: PPUSH
38175: LD_VAR 0 14
38179: PPUSH
38180: CALL_OW 2
38184: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38185: LD_VAR 0 14
38189: PPUSH
38190: LD_VAR 0 9
38194: PPUSH
38195: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38199: LD_VAR 0 9
38203: PPUSH
38204: CALL_OW 313
38208: PUSH
38209: LD_INT 6
38211: EQUAL
38212: PUSH
38213: LD_VAR 0 9
38217: PPUSH
38218: CALL_OW 266
38222: PUSH
38223: LD_INT 32
38225: PUSH
38226: LD_INT 31
38228: PUSH
38229: EMPTY
38230: LIST
38231: LIST
38232: IN
38233: OR
38234: IFFALSE 38048
38236: GO 38045
38238: POP
38239: POP
// end else
38240: GO 38622
// for j = 1 to x do
38242: LD_ADDR_VAR 0 9
38246: PUSH
38247: DOUBLE
38248: LD_INT 1
38250: DEC
38251: ST_TO_ADDR
38252: LD_VAR 0 13
38256: PUSH
38257: FOR_TO
38258: IFFALSE 38620
// begin InitHc ;
38260: CALL_OW 19
// if not f then
38264: LD_VAR 0 12
38268: NOT
38269: IFFALSE 38358
// begin PrepareHuman ( false , i , skill ) ;
38271: LD_INT 0
38273: PPUSH
38274: LD_VAR 0 8
38278: PPUSH
38279: LD_VAR 0 4
38283: PPUSH
38284: CALL_OW 380
// un := CreateHuman ;
38288: LD_ADDR_VAR 0 14
38292: PUSH
38293: CALL_OW 44
38297: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38298: LD_ADDR_VAR 0 7
38302: PUSH
38303: LD_VAR 0 7
38307: PPUSH
38308: LD_INT 1
38310: PPUSH
38311: LD_VAR 0 14
38315: PPUSH
38316: CALL_OW 2
38320: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38321: LD_VAR 0 14
38325: PPUSH
38326: LD_VAR 0 1
38330: PPUSH
38331: CALL_OW 250
38335: PPUSH
38336: LD_VAR 0 1
38340: PPUSH
38341: CALL_OW 251
38345: PPUSH
38346: LD_INT 10
38348: PPUSH
38349: LD_INT 0
38351: PPUSH
38352: CALL_OW 50
// continue ;
38356: GO 38257
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38358: LD_VAR 0 12
38362: PUSH
38363: LD_INT 1
38365: ARRAY
38366: PPUSH
38367: CALL_OW 313
38371: PUSH
38372: LD_VAR 0 12
38376: PUSH
38377: LD_INT 1
38379: ARRAY
38380: PPUSH
38381: CALL_OW 266
38385: PUSH
38386: LD_INT 32
38388: PUSH
38389: LD_INT 31
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: IN
38396: AND
38397: PUSH
38398: LD_VAR 0 12
38402: PUSH
38403: LD_INT 1
38405: ARRAY
38406: PPUSH
38407: CALL_OW 313
38411: PUSH
38412: LD_INT 6
38414: EQUAL
38415: OR
38416: IFFALSE 38436
// f := Delete ( f , 1 ) ;
38418: LD_ADDR_VAR 0 12
38422: PUSH
38423: LD_VAR 0 12
38427: PPUSH
38428: LD_INT 1
38430: PPUSH
38431: CALL_OW 3
38435: ST_TO_ADDR
// if not f then
38436: LD_VAR 0 12
38440: NOT
38441: IFFALSE 38459
// begin x := x + 2 ;
38443: LD_ADDR_VAR 0 13
38447: PUSH
38448: LD_VAR 0 13
38452: PUSH
38453: LD_INT 2
38455: PLUS
38456: ST_TO_ADDR
// continue ;
38457: GO 38257
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
38459: LD_VAR 0 12
38463: PUSH
38464: LD_INT 1
38466: ARRAY
38467: PPUSH
38468: CALL_OW 266
38472: PUSH
38473: LD_INT 5
38475: EQUAL
38476: IFFALSE 38550
// begin if UnitsInside ( f [ 1 ] ) < 3 then
38478: LD_VAR 0 12
38482: PUSH
38483: LD_INT 1
38485: ARRAY
38486: PPUSH
38487: CALL_OW 313
38491: PUSH
38492: LD_INT 3
38494: LESS
38495: IFFALSE 38531
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38497: LD_INT 0
38499: PPUSH
38500: LD_INT 5
38502: PUSH
38503: LD_INT 8
38505: PUSH
38506: LD_INT 9
38508: PUSH
38509: EMPTY
38510: LIST
38511: LIST
38512: LIST
38513: PUSH
38514: LD_VAR 0 17
38518: ARRAY
38519: PPUSH
38520: LD_VAR 0 4
38524: PPUSH
38525: CALL_OW 380
38529: GO 38548
// PrepareHuman ( false , i , skill ) ;
38531: LD_INT 0
38533: PPUSH
38534: LD_VAR 0 8
38538: PPUSH
38539: LD_VAR 0 4
38543: PPUSH
38544: CALL_OW 380
// end else
38548: GO 38567
// PrepareHuman ( false , i , skill ) ;
38550: LD_INT 0
38552: PPUSH
38553: LD_VAR 0 8
38557: PPUSH
38558: LD_VAR 0 4
38562: PPUSH
38563: CALL_OW 380
// un := CreateHuman ;
38567: LD_ADDR_VAR 0 14
38571: PUSH
38572: CALL_OW 44
38576: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38577: LD_ADDR_VAR 0 7
38581: PUSH
38582: LD_VAR 0 7
38586: PPUSH
38587: LD_INT 1
38589: PPUSH
38590: LD_VAR 0 14
38594: PPUSH
38595: CALL_OW 2
38599: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38600: LD_VAR 0 14
38604: PPUSH
38605: LD_VAR 0 12
38609: PUSH
38610: LD_INT 1
38612: ARRAY
38613: PPUSH
38614: CALL_OW 52
// end ;
38618: GO 38257
38620: POP
38621: POP
// end ;
38622: GO 37559
38624: POP
38625: POP
// result := result ^ buildings ;
38626: LD_ADDR_VAR 0 7
38630: PUSH
38631: LD_VAR 0 7
38635: PUSH
38636: LD_VAR 0 18
38640: ADD
38641: ST_TO_ADDR
// end else
38642: GO 38785
// begin for i = 1 to personel do
38644: LD_ADDR_VAR 0 8
38648: PUSH
38649: DOUBLE
38650: LD_INT 1
38652: DEC
38653: ST_TO_ADDR
38654: LD_VAR 0 6
38658: PUSH
38659: FOR_TO
38660: IFFALSE 38783
// begin if i > 4 then
38662: LD_VAR 0 8
38666: PUSH
38667: LD_INT 4
38669: GREATER
38670: IFFALSE 38674
// break ;
38672: GO 38783
// x := personel [ i ] ;
38674: LD_ADDR_VAR 0 13
38678: PUSH
38679: LD_VAR 0 6
38683: PUSH
38684: LD_VAR 0 8
38688: ARRAY
38689: ST_TO_ADDR
// if x = - 1 then
38690: LD_VAR 0 13
38694: PUSH
38695: LD_INT 1
38697: NEG
38698: EQUAL
38699: IFFALSE 38703
// continue ;
38701: GO 38659
// PrepareHuman ( false , i , skill ) ;
38703: LD_INT 0
38705: PPUSH
38706: LD_VAR 0 8
38710: PPUSH
38711: LD_VAR 0 4
38715: PPUSH
38716: CALL_OW 380
// un := CreateHuman ;
38720: LD_ADDR_VAR 0 14
38724: PUSH
38725: CALL_OW 44
38729: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38730: LD_VAR 0 14
38734: PPUSH
38735: LD_VAR 0 1
38739: PPUSH
38740: CALL_OW 250
38744: PPUSH
38745: LD_VAR 0 1
38749: PPUSH
38750: CALL_OW 251
38754: PPUSH
38755: LD_INT 10
38757: PPUSH
38758: LD_INT 0
38760: PPUSH
38761: CALL_OW 50
// result := result ^ un ;
38765: LD_ADDR_VAR 0 7
38769: PUSH
38770: LD_VAR 0 7
38774: PUSH
38775: LD_VAR 0 14
38779: ADD
38780: ST_TO_ADDR
// end ;
38781: GO 38659
38783: POP
38784: POP
// end ; end ;
38785: LD_VAR 0 7
38789: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38790: LD_INT 0
38792: PPUSH
38793: PPUSH
38794: PPUSH
38795: PPUSH
38796: PPUSH
38797: PPUSH
38798: PPUSH
38799: PPUSH
38800: PPUSH
38801: PPUSH
38802: PPUSH
38803: PPUSH
38804: PPUSH
38805: PPUSH
38806: PPUSH
38807: PPUSH
// result := false ;
38808: LD_ADDR_VAR 0 3
38812: PUSH
38813: LD_INT 0
38815: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38816: LD_VAR 0 1
38820: NOT
38821: PUSH
38822: LD_VAR 0 1
38826: PPUSH
38827: CALL_OW 266
38831: PUSH
38832: LD_INT 32
38834: PUSH
38835: LD_INT 33
38837: PUSH
38838: EMPTY
38839: LIST
38840: LIST
38841: IN
38842: NOT
38843: OR
38844: IFFALSE 38848
// exit ;
38846: GO 39957
// nat := GetNation ( tower ) ;
38848: LD_ADDR_VAR 0 12
38852: PUSH
38853: LD_VAR 0 1
38857: PPUSH
38858: CALL_OW 248
38862: ST_TO_ADDR
// side := GetSide ( tower ) ;
38863: LD_ADDR_VAR 0 16
38867: PUSH
38868: LD_VAR 0 1
38872: PPUSH
38873: CALL_OW 255
38877: ST_TO_ADDR
// x := GetX ( tower ) ;
38878: LD_ADDR_VAR 0 10
38882: PUSH
38883: LD_VAR 0 1
38887: PPUSH
38888: CALL_OW 250
38892: ST_TO_ADDR
// y := GetY ( tower ) ;
38893: LD_ADDR_VAR 0 11
38897: PUSH
38898: LD_VAR 0 1
38902: PPUSH
38903: CALL_OW 251
38907: ST_TO_ADDR
// if not x or not y then
38908: LD_VAR 0 10
38912: NOT
38913: PUSH
38914: LD_VAR 0 11
38918: NOT
38919: OR
38920: IFFALSE 38924
// exit ;
38922: GO 39957
// weapon := 0 ;
38924: LD_ADDR_VAR 0 18
38928: PUSH
38929: LD_INT 0
38931: ST_TO_ADDR
// fac_list := [ ] ;
38932: LD_ADDR_VAR 0 17
38936: PUSH
38937: EMPTY
38938: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
38939: LD_ADDR_VAR 0 6
38943: PUSH
38944: LD_VAR 0 1
38948: PPUSH
38949: CALL_OW 274
38953: PPUSH
38954: LD_VAR 0 2
38958: PPUSH
38959: LD_INT 0
38961: PPUSH
38962: CALL 36528 0 3
38966: PPUSH
38967: LD_INT 30
38969: PUSH
38970: LD_INT 3
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: PPUSH
38977: CALL_OW 72
38981: ST_TO_ADDR
// if not factories then
38982: LD_VAR 0 6
38986: NOT
38987: IFFALSE 38991
// exit ;
38989: GO 39957
// for i in factories do
38991: LD_ADDR_VAR 0 8
38995: PUSH
38996: LD_VAR 0 6
39000: PUSH
39001: FOR_IN
39002: IFFALSE 39027
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39004: LD_ADDR_VAR 0 17
39008: PUSH
39009: LD_VAR 0 17
39013: PUSH
39014: LD_VAR 0 8
39018: PPUSH
39019: CALL_OW 478
39023: UNION
39024: ST_TO_ADDR
39025: GO 39001
39027: POP
39028: POP
// if not fac_list then
39029: LD_VAR 0 17
39033: NOT
39034: IFFALSE 39038
// exit ;
39036: GO 39957
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39038: LD_ADDR_VAR 0 5
39042: PUSH
39043: LD_INT 4
39045: PUSH
39046: LD_INT 5
39048: PUSH
39049: LD_INT 9
39051: PUSH
39052: LD_INT 10
39054: PUSH
39055: LD_INT 6
39057: PUSH
39058: LD_INT 7
39060: PUSH
39061: LD_INT 11
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: LIST
39068: LIST
39069: LIST
39070: LIST
39071: LIST
39072: PUSH
39073: LD_INT 27
39075: PUSH
39076: LD_INT 28
39078: PUSH
39079: LD_INT 26
39081: PUSH
39082: LD_INT 30
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: LIST
39089: LIST
39090: PUSH
39091: LD_INT 43
39093: PUSH
39094: LD_INT 44
39096: PUSH
39097: LD_INT 46
39099: PUSH
39100: LD_INT 45
39102: PUSH
39103: LD_INT 47
39105: PUSH
39106: LD_INT 49
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: LIST
39113: LIST
39114: LIST
39115: LIST
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: LIST
39121: PUSH
39122: LD_VAR 0 12
39126: ARRAY
39127: ST_TO_ADDR
// list := list isect fac_list ;
39128: LD_ADDR_VAR 0 5
39132: PUSH
39133: LD_VAR 0 5
39137: PUSH
39138: LD_VAR 0 17
39142: ISECT
39143: ST_TO_ADDR
// if not list then
39144: LD_VAR 0 5
39148: NOT
39149: IFFALSE 39153
// exit ;
39151: GO 39957
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39153: LD_VAR 0 12
39157: PUSH
39158: LD_INT 3
39160: EQUAL
39161: PUSH
39162: LD_INT 49
39164: PUSH
39165: LD_VAR 0 5
39169: IN
39170: AND
39171: PUSH
39172: LD_INT 31
39174: PPUSH
39175: LD_VAR 0 16
39179: PPUSH
39180: CALL_OW 321
39184: PUSH
39185: LD_INT 2
39187: EQUAL
39188: AND
39189: IFFALSE 39249
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39191: LD_INT 22
39193: PUSH
39194: LD_VAR 0 16
39198: PUSH
39199: EMPTY
39200: LIST
39201: LIST
39202: PUSH
39203: LD_INT 35
39205: PUSH
39206: LD_INT 49
39208: PUSH
39209: EMPTY
39210: LIST
39211: LIST
39212: PUSH
39213: LD_INT 91
39215: PUSH
39216: LD_VAR 0 1
39220: PUSH
39221: LD_INT 10
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: LIST
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: LIST
39233: PPUSH
39234: CALL_OW 69
39238: NOT
39239: IFFALSE 39249
// weapon := ru_time_lapser ;
39241: LD_ADDR_VAR 0 18
39245: PUSH
39246: LD_INT 49
39248: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39249: LD_VAR 0 12
39253: PUSH
39254: LD_INT 1
39256: PUSH
39257: LD_INT 2
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: IN
39264: PUSH
39265: LD_INT 11
39267: PUSH
39268: LD_VAR 0 5
39272: IN
39273: PUSH
39274: LD_INT 30
39276: PUSH
39277: LD_VAR 0 5
39281: IN
39282: OR
39283: AND
39284: PUSH
39285: LD_INT 6
39287: PPUSH
39288: LD_VAR 0 16
39292: PPUSH
39293: CALL_OW 321
39297: PUSH
39298: LD_INT 2
39300: EQUAL
39301: AND
39302: IFFALSE 39467
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39304: LD_INT 22
39306: PUSH
39307: LD_VAR 0 16
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: PUSH
39316: LD_INT 2
39318: PUSH
39319: LD_INT 35
39321: PUSH
39322: LD_INT 11
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: PUSH
39329: LD_INT 35
39331: PUSH
39332: LD_INT 30
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: PUSH
39339: EMPTY
39340: LIST
39341: LIST
39342: LIST
39343: PUSH
39344: LD_INT 91
39346: PUSH
39347: LD_VAR 0 1
39351: PUSH
39352: LD_INT 18
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: LIST
39359: PUSH
39360: EMPTY
39361: LIST
39362: LIST
39363: LIST
39364: PPUSH
39365: CALL_OW 69
39369: NOT
39370: PUSH
39371: LD_INT 22
39373: PUSH
39374: LD_VAR 0 16
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: PUSH
39383: LD_INT 2
39385: PUSH
39386: LD_INT 30
39388: PUSH
39389: LD_INT 32
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: PUSH
39396: LD_INT 30
39398: PUSH
39399: LD_INT 33
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: LIST
39410: PUSH
39411: LD_INT 91
39413: PUSH
39414: LD_VAR 0 1
39418: PUSH
39419: LD_INT 12
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: LIST
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: LIST
39431: PUSH
39432: EMPTY
39433: LIST
39434: PPUSH
39435: CALL_OW 69
39439: PUSH
39440: LD_INT 2
39442: GREATER
39443: AND
39444: IFFALSE 39467
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39446: LD_ADDR_VAR 0 18
39450: PUSH
39451: LD_INT 11
39453: PUSH
39454: LD_INT 30
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: PUSH
39461: LD_VAR 0 12
39465: ARRAY
39466: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39467: LD_VAR 0 18
39471: NOT
39472: PUSH
39473: LD_INT 40
39475: PPUSH
39476: LD_VAR 0 16
39480: PPUSH
39481: CALL_OW 321
39485: PUSH
39486: LD_INT 2
39488: EQUAL
39489: AND
39490: PUSH
39491: LD_INT 7
39493: PUSH
39494: LD_VAR 0 5
39498: IN
39499: PUSH
39500: LD_INT 28
39502: PUSH
39503: LD_VAR 0 5
39507: IN
39508: OR
39509: PUSH
39510: LD_INT 45
39512: PUSH
39513: LD_VAR 0 5
39517: IN
39518: OR
39519: AND
39520: IFFALSE 39774
// begin hex := GetHexInfo ( x , y ) ;
39522: LD_ADDR_VAR 0 4
39526: PUSH
39527: LD_VAR 0 10
39531: PPUSH
39532: LD_VAR 0 11
39536: PPUSH
39537: CALL_OW 546
39541: ST_TO_ADDR
// if hex [ 1 ] then
39542: LD_VAR 0 4
39546: PUSH
39547: LD_INT 1
39549: ARRAY
39550: IFFALSE 39554
// exit ;
39552: GO 39957
// height := hex [ 2 ] ;
39554: LD_ADDR_VAR 0 15
39558: PUSH
39559: LD_VAR 0 4
39563: PUSH
39564: LD_INT 2
39566: ARRAY
39567: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39568: LD_ADDR_VAR 0 14
39572: PUSH
39573: LD_INT 0
39575: PUSH
39576: LD_INT 2
39578: PUSH
39579: LD_INT 3
39581: PUSH
39582: LD_INT 5
39584: PUSH
39585: EMPTY
39586: LIST
39587: LIST
39588: LIST
39589: LIST
39590: ST_TO_ADDR
// for i in tmp do
39591: LD_ADDR_VAR 0 8
39595: PUSH
39596: LD_VAR 0 14
39600: PUSH
39601: FOR_IN
39602: IFFALSE 39772
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39604: LD_ADDR_VAR 0 9
39608: PUSH
39609: LD_VAR 0 10
39613: PPUSH
39614: LD_VAR 0 8
39618: PPUSH
39619: LD_INT 5
39621: PPUSH
39622: CALL_OW 272
39626: PUSH
39627: LD_VAR 0 11
39631: PPUSH
39632: LD_VAR 0 8
39636: PPUSH
39637: LD_INT 5
39639: PPUSH
39640: CALL_OW 273
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39649: LD_VAR 0 9
39653: PUSH
39654: LD_INT 1
39656: ARRAY
39657: PPUSH
39658: LD_VAR 0 9
39662: PUSH
39663: LD_INT 2
39665: ARRAY
39666: PPUSH
39667: CALL_OW 488
39671: IFFALSE 39770
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39673: LD_ADDR_VAR 0 4
39677: PUSH
39678: LD_VAR 0 9
39682: PUSH
39683: LD_INT 1
39685: ARRAY
39686: PPUSH
39687: LD_VAR 0 9
39691: PUSH
39692: LD_INT 2
39694: ARRAY
39695: PPUSH
39696: CALL_OW 546
39700: ST_TO_ADDR
// if hex [ 1 ] then
39701: LD_VAR 0 4
39705: PUSH
39706: LD_INT 1
39708: ARRAY
39709: IFFALSE 39713
// continue ;
39711: GO 39601
// h := hex [ 2 ] ;
39713: LD_ADDR_VAR 0 13
39717: PUSH
39718: LD_VAR 0 4
39722: PUSH
39723: LD_INT 2
39725: ARRAY
39726: ST_TO_ADDR
// if h + 7 < height then
39727: LD_VAR 0 13
39731: PUSH
39732: LD_INT 7
39734: PLUS
39735: PUSH
39736: LD_VAR 0 15
39740: LESS
39741: IFFALSE 39770
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39743: LD_ADDR_VAR 0 18
39747: PUSH
39748: LD_INT 7
39750: PUSH
39751: LD_INT 28
39753: PUSH
39754: LD_INT 45
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: LIST
39761: PUSH
39762: LD_VAR 0 12
39766: ARRAY
39767: ST_TO_ADDR
// break ;
39768: GO 39772
// end ; end ; end ;
39770: GO 39601
39772: POP
39773: POP
// end ; if not weapon then
39774: LD_VAR 0 18
39778: NOT
39779: IFFALSE 39839
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39781: LD_ADDR_VAR 0 5
39785: PUSH
39786: LD_VAR 0 5
39790: PUSH
39791: LD_INT 11
39793: PUSH
39794: LD_INT 30
39796: PUSH
39797: LD_INT 49
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: LIST
39804: DIFF
39805: ST_TO_ADDR
// if not list then
39806: LD_VAR 0 5
39810: NOT
39811: IFFALSE 39815
// exit ;
39813: GO 39957
// weapon := list [ rand ( 1 , list ) ] ;
39815: LD_ADDR_VAR 0 18
39819: PUSH
39820: LD_VAR 0 5
39824: PUSH
39825: LD_INT 1
39827: PPUSH
39828: LD_VAR 0 5
39832: PPUSH
39833: CALL_OW 12
39837: ARRAY
39838: ST_TO_ADDR
// end ; if weapon then
39839: LD_VAR 0 18
39843: IFFALSE 39957
// begin tmp := CostOfWeapon ( weapon ) ;
39845: LD_ADDR_VAR 0 14
39849: PUSH
39850: LD_VAR 0 18
39854: PPUSH
39855: CALL_OW 451
39859: ST_TO_ADDR
// j := GetBase ( tower ) ;
39860: LD_ADDR_VAR 0 9
39864: PUSH
39865: LD_VAR 0 1
39869: PPUSH
39870: CALL_OW 274
39874: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39875: LD_VAR 0 9
39879: PPUSH
39880: LD_INT 1
39882: PPUSH
39883: CALL_OW 275
39887: PUSH
39888: LD_VAR 0 14
39892: PUSH
39893: LD_INT 1
39895: ARRAY
39896: GREATEREQUAL
39897: PUSH
39898: LD_VAR 0 9
39902: PPUSH
39903: LD_INT 2
39905: PPUSH
39906: CALL_OW 275
39910: PUSH
39911: LD_VAR 0 14
39915: PUSH
39916: LD_INT 2
39918: ARRAY
39919: GREATEREQUAL
39920: AND
39921: PUSH
39922: LD_VAR 0 9
39926: PPUSH
39927: LD_INT 3
39929: PPUSH
39930: CALL_OW 275
39934: PUSH
39935: LD_VAR 0 14
39939: PUSH
39940: LD_INT 3
39942: ARRAY
39943: GREATEREQUAL
39944: AND
39945: IFFALSE 39957
// result := weapon ;
39947: LD_ADDR_VAR 0 3
39951: PUSH
39952: LD_VAR 0 18
39956: ST_TO_ADDR
// end ; end ;
39957: LD_VAR 0 3
39961: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39962: LD_INT 0
39964: PPUSH
39965: PPUSH
// result := true ;
39966: LD_ADDR_VAR 0 3
39970: PUSH
39971: LD_INT 1
39973: ST_TO_ADDR
// if array1 = array2 then
39974: LD_VAR 0 1
39978: PUSH
39979: LD_VAR 0 2
39983: EQUAL
39984: IFFALSE 40044
// begin for i = 1 to array1 do
39986: LD_ADDR_VAR 0 4
39990: PUSH
39991: DOUBLE
39992: LD_INT 1
39994: DEC
39995: ST_TO_ADDR
39996: LD_VAR 0 1
40000: PUSH
40001: FOR_TO
40002: IFFALSE 40040
// if array1 [ i ] <> array2 [ i ] then
40004: LD_VAR 0 1
40008: PUSH
40009: LD_VAR 0 4
40013: ARRAY
40014: PUSH
40015: LD_VAR 0 2
40019: PUSH
40020: LD_VAR 0 4
40024: ARRAY
40025: NONEQUAL
40026: IFFALSE 40038
// begin result := false ;
40028: LD_ADDR_VAR 0 3
40032: PUSH
40033: LD_INT 0
40035: ST_TO_ADDR
// break ;
40036: GO 40040
// end ;
40038: GO 40001
40040: POP
40041: POP
// end else
40042: GO 40052
// result := false ;
40044: LD_ADDR_VAR 0 3
40048: PUSH
40049: LD_INT 0
40051: ST_TO_ADDR
// end ;
40052: LD_VAR 0 3
40056: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40057: LD_INT 0
40059: PPUSH
40060: PPUSH
// if not array1 or not array2 then
40061: LD_VAR 0 1
40065: NOT
40066: PUSH
40067: LD_VAR 0 2
40071: NOT
40072: OR
40073: IFFALSE 40077
// exit ;
40075: GO 40141
// result := true ;
40077: LD_ADDR_VAR 0 3
40081: PUSH
40082: LD_INT 1
40084: ST_TO_ADDR
// for i = 1 to array1 do
40085: LD_ADDR_VAR 0 4
40089: PUSH
40090: DOUBLE
40091: LD_INT 1
40093: DEC
40094: ST_TO_ADDR
40095: LD_VAR 0 1
40099: PUSH
40100: FOR_TO
40101: IFFALSE 40139
// if array1 [ i ] <> array2 [ i ] then
40103: LD_VAR 0 1
40107: PUSH
40108: LD_VAR 0 4
40112: ARRAY
40113: PUSH
40114: LD_VAR 0 2
40118: PUSH
40119: LD_VAR 0 4
40123: ARRAY
40124: NONEQUAL
40125: IFFALSE 40137
// begin result := false ;
40127: LD_ADDR_VAR 0 3
40131: PUSH
40132: LD_INT 0
40134: ST_TO_ADDR
// break ;
40135: GO 40139
// end ;
40137: GO 40100
40139: POP
40140: POP
// end ;
40141: LD_VAR 0 3
40145: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40146: LD_INT 0
40148: PPUSH
40149: PPUSH
40150: PPUSH
// pom := GetBase ( fac ) ;
40151: LD_ADDR_VAR 0 5
40155: PUSH
40156: LD_VAR 0 1
40160: PPUSH
40161: CALL_OW 274
40165: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40166: LD_ADDR_VAR 0 4
40170: PUSH
40171: LD_VAR 0 2
40175: PUSH
40176: LD_INT 1
40178: ARRAY
40179: PPUSH
40180: LD_VAR 0 2
40184: PUSH
40185: LD_INT 2
40187: ARRAY
40188: PPUSH
40189: LD_VAR 0 2
40193: PUSH
40194: LD_INT 3
40196: ARRAY
40197: PPUSH
40198: LD_VAR 0 2
40202: PUSH
40203: LD_INT 4
40205: ARRAY
40206: PPUSH
40207: CALL_OW 449
40211: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40212: LD_ADDR_VAR 0 3
40216: PUSH
40217: LD_VAR 0 5
40221: PPUSH
40222: LD_INT 1
40224: PPUSH
40225: CALL_OW 275
40229: PUSH
40230: LD_VAR 0 4
40234: PUSH
40235: LD_INT 1
40237: ARRAY
40238: GREATEREQUAL
40239: PUSH
40240: LD_VAR 0 5
40244: PPUSH
40245: LD_INT 2
40247: PPUSH
40248: CALL_OW 275
40252: PUSH
40253: LD_VAR 0 4
40257: PUSH
40258: LD_INT 2
40260: ARRAY
40261: GREATEREQUAL
40262: AND
40263: PUSH
40264: LD_VAR 0 5
40268: PPUSH
40269: LD_INT 3
40271: PPUSH
40272: CALL_OW 275
40276: PUSH
40277: LD_VAR 0 4
40281: PUSH
40282: LD_INT 3
40284: ARRAY
40285: GREATEREQUAL
40286: AND
40287: ST_TO_ADDR
// end ;
40288: LD_VAR 0 3
40292: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40293: LD_INT 0
40295: PPUSH
40296: PPUSH
40297: PPUSH
40298: PPUSH
// pom := GetBase ( building ) ;
40299: LD_ADDR_VAR 0 3
40303: PUSH
40304: LD_VAR 0 1
40308: PPUSH
40309: CALL_OW 274
40313: ST_TO_ADDR
// if not pom then
40314: LD_VAR 0 3
40318: NOT
40319: IFFALSE 40323
// exit ;
40321: GO 40493
// btype := GetBType ( building ) ;
40323: LD_ADDR_VAR 0 5
40327: PUSH
40328: LD_VAR 0 1
40332: PPUSH
40333: CALL_OW 266
40337: ST_TO_ADDR
// if btype = b_armoury then
40338: LD_VAR 0 5
40342: PUSH
40343: LD_INT 4
40345: EQUAL
40346: IFFALSE 40356
// btype := b_barracks ;
40348: LD_ADDR_VAR 0 5
40352: PUSH
40353: LD_INT 5
40355: ST_TO_ADDR
// if btype = b_depot then
40356: LD_VAR 0 5
40360: PUSH
40361: LD_INT 0
40363: EQUAL
40364: IFFALSE 40374
// btype := b_warehouse ;
40366: LD_ADDR_VAR 0 5
40370: PUSH
40371: LD_INT 1
40373: ST_TO_ADDR
// if btype = b_workshop then
40374: LD_VAR 0 5
40378: PUSH
40379: LD_INT 2
40381: EQUAL
40382: IFFALSE 40392
// btype := b_factory ;
40384: LD_ADDR_VAR 0 5
40388: PUSH
40389: LD_INT 3
40391: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40392: LD_ADDR_VAR 0 4
40396: PUSH
40397: LD_VAR 0 5
40401: PPUSH
40402: LD_VAR 0 1
40406: PPUSH
40407: CALL_OW 248
40411: PPUSH
40412: CALL_OW 450
40416: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40417: LD_ADDR_VAR 0 2
40421: PUSH
40422: LD_VAR 0 3
40426: PPUSH
40427: LD_INT 1
40429: PPUSH
40430: CALL_OW 275
40434: PUSH
40435: LD_VAR 0 4
40439: PUSH
40440: LD_INT 1
40442: ARRAY
40443: GREATEREQUAL
40444: PUSH
40445: LD_VAR 0 3
40449: PPUSH
40450: LD_INT 2
40452: PPUSH
40453: CALL_OW 275
40457: PUSH
40458: LD_VAR 0 4
40462: PUSH
40463: LD_INT 2
40465: ARRAY
40466: GREATEREQUAL
40467: AND
40468: PUSH
40469: LD_VAR 0 3
40473: PPUSH
40474: LD_INT 3
40476: PPUSH
40477: CALL_OW 275
40481: PUSH
40482: LD_VAR 0 4
40486: PUSH
40487: LD_INT 3
40489: ARRAY
40490: GREATEREQUAL
40491: AND
40492: ST_TO_ADDR
// end ;
40493: LD_VAR 0 2
40497: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
40498: LD_INT 0
40500: PPUSH
40501: PPUSH
40502: PPUSH
// pom := GetBase ( building ) ;
40503: LD_ADDR_VAR 0 4
40507: PUSH
40508: LD_VAR 0 1
40512: PPUSH
40513: CALL_OW 274
40517: ST_TO_ADDR
// if not pom then
40518: LD_VAR 0 4
40522: NOT
40523: IFFALSE 40527
// exit ;
40525: GO 40628
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40527: LD_ADDR_VAR 0 5
40531: PUSH
40532: LD_VAR 0 2
40536: PPUSH
40537: LD_VAR 0 1
40541: PPUSH
40542: CALL_OW 248
40546: PPUSH
40547: CALL_OW 450
40551: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40552: LD_ADDR_VAR 0 3
40556: PUSH
40557: LD_VAR 0 4
40561: PPUSH
40562: LD_INT 1
40564: PPUSH
40565: CALL_OW 275
40569: PUSH
40570: LD_VAR 0 5
40574: PUSH
40575: LD_INT 1
40577: ARRAY
40578: GREATEREQUAL
40579: PUSH
40580: LD_VAR 0 4
40584: PPUSH
40585: LD_INT 2
40587: PPUSH
40588: CALL_OW 275
40592: PUSH
40593: LD_VAR 0 5
40597: PUSH
40598: LD_INT 2
40600: ARRAY
40601: GREATEREQUAL
40602: AND
40603: PUSH
40604: LD_VAR 0 4
40608: PPUSH
40609: LD_INT 3
40611: PPUSH
40612: CALL_OW 275
40616: PUSH
40617: LD_VAR 0 5
40621: PUSH
40622: LD_INT 3
40624: ARRAY
40625: GREATEREQUAL
40626: AND
40627: ST_TO_ADDR
// end ;
40628: LD_VAR 0 3
40632: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
40633: LD_INT 0
40635: PPUSH
40636: PPUSH
40637: PPUSH
40638: PPUSH
40639: PPUSH
40640: PPUSH
40641: PPUSH
40642: PPUSH
40643: PPUSH
40644: PPUSH
40645: PPUSH
// result := false ;
40646: LD_ADDR_VAR 0 8
40650: PUSH
40651: LD_INT 0
40653: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
40654: LD_VAR 0 5
40658: NOT
40659: PUSH
40660: LD_VAR 0 1
40664: NOT
40665: OR
40666: PUSH
40667: LD_VAR 0 2
40671: NOT
40672: OR
40673: PUSH
40674: LD_VAR 0 3
40678: NOT
40679: OR
40680: IFFALSE 40684
// exit ;
40682: GO 41498
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
40684: LD_ADDR_VAR 0 14
40688: PUSH
40689: LD_VAR 0 1
40693: PPUSH
40694: LD_VAR 0 2
40698: PPUSH
40699: LD_VAR 0 3
40703: PPUSH
40704: LD_VAR 0 4
40708: PPUSH
40709: LD_VAR 0 5
40713: PUSH
40714: LD_INT 1
40716: ARRAY
40717: PPUSH
40718: CALL_OW 248
40722: PPUSH
40723: LD_INT 0
40725: PPUSH
40726: CALL 42751 0 6
40730: ST_TO_ADDR
// if not hexes then
40731: LD_VAR 0 14
40735: NOT
40736: IFFALSE 40740
// exit ;
40738: GO 41498
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40740: LD_ADDR_VAR 0 17
40744: PUSH
40745: LD_VAR 0 5
40749: PPUSH
40750: LD_INT 22
40752: PUSH
40753: LD_VAR 0 13
40757: PPUSH
40758: CALL_OW 255
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: PUSH
40767: LD_INT 2
40769: PUSH
40770: LD_INT 30
40772: PUSH
40773: LD_INT 0
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: PUSH
40780: LD_INT 30
40782: PUSH
40783: LD_INT 1
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: LIST
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: PPUSH
40799: CALL_OW 72
40803: ST_TO_ADDR
// for i = 1 to hexes do
40804: LD_ADDR_VAR 0 9
40808: PUSH
40809: DOUBLE
40810: LD_INT 1
40812: DEC
40813: ST_TO_ADDR
40814: LD_VAR 0 14
40818: PUSH
40819: FOR_TO
40820: IFFALSE 41496
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40822: LD_ADDR_VAR 0 13
40826: PUSH
40827: LD_VAR 0 14
40831: PUSH
40832: LD_VAR 0 9
40836: ARRAY
40837: PUSH
40838: LD_INT 1
40840: ARRAY
40841: PPUSH
40842: LD_VAR 0 14
40846: PUSH
40847: LD_VAR 0 9
40851: ARRAY
40852: PUSH
40853: LD_INT 2
40855: ARRAY
40856: PPUSH
40857: CALL_OW 428
40861: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40862: LD_VAR 0 14
40866: PUSH
40867: LD_VAR 0 9
40871: ARRAY
40872: PUSH
40873: LD_INT 1
40875: ARRAY
40876: PPUSH
40877: LD_VAR 0 14
40881: PUSH
40882: LD_VAR 0 9
40886: ARRAY
40887: PUSH
40888: LD_INT 2
40890: ARRAY
40891: PPUSH
40892: CALL_OW 351
40896: PUSH
40897: LD_VAR 0 14
40901: PUSH
40902: LD_VAR 0 9
40906: ARRAY
40907: PUSH
40908: LD_INT 1
40910: ARRAY
40911: PPUSH
40912: LD_VAR 0 14
40916: PUSH
40917: LD_VAR 0 9
40921: ARRAY
40922: PUSH
40923: LD_INT 2
40925: ARRAY
40926: PPUSH
40927: CALL_OW 488
40931: NOT
40932: OR
40933: PUSH
40934: LD_VAR 0 13
40938: PPUSH
40939: CALL_OW 247
40943: PUSH
40944: LD_INT 3
40946: EQUAL
40947: OR
40948: IFFALSE 40954
// exit ;
40950: POP
40951: POP
40952: GO 41498
// if not tmp then
40954: LD_VAR 0 13
40958: NOT
40959: IFFALSE 40963
// continue ;
40961: GO 40819
// result := true ;
40963: LD_ADDR_VAR 0 8
40967: PUSH
40968: LD_INT 1
40970: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
40971: LD_VAR 0 6
40975: PUSH
40976: LD_VAR 0 13
40980: PPUSH
40981: CALL_OW 247
40985: PUSH
40986: LD_INT 2
40988: EQUAL
40989: AND
40990: PUSH
40991: LD_VAR 0 13
40995: PPUSH
40996: CALL_OW 263
41000: PUSH
41001: LD_INT 1
41003: EQUAL
41004: AND
41005: IFFALSE 41169
// begin if IsDrivenBy ( tmp ) then
41007: LD_VAR 0 13
41011: PPUSH
41012: CALL_OW 311
41016: IFFALSE 41020
// continue ;
41018: GO 40819
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41020: LD_VAR 0 6
41024: PPUSH
41025: LD_INT 3
41027: PUSH
41028: LD_INT 60
41030: PUSH
41031: EMPTY
41032: LIST
41033: PUSH
41034: EMPTY
41035: LIST
41036: LIST
41037: PUSH
41038: LD_INT 3
41040: PUSH
41041: LD_INT 55
41043: PUSH
41044: EMPTY
41045: LIST
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PPUSH
41055: CALL_OW 72
41059: IFFALSE 41167
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41061: LD_ADDR_VAR 0 18
41065: PUSH
41066: LD_VAR 0 6
41070: PPUSH
41071: LD_INT 3
41073: PUSH
41074: LD_INT 60
41076: PUSH
41077: EMPTY
41078: LIST
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: PUSH
41084: LD_INT 3
41086: PUSH
41087: LD_INT 55
41089: PUSH
41090: EMPTY
41091: LIST
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PPUSH
41101: CALL_OW 72
41105: PUSH
41106: LD_INT 1
41108: ARRAY
41109: ST_TO_ADDR
// if IsInUnit ( driver ) then
41110: LD_VAR 0 18
41114: PPUSH
41115: CALL_OW 310
41119: IFFALSE 41130
// ComExit ( driver ) ;
41121: LD_VAR 0 18
41125: PPUSH
41126: CALL 66552 0 1
// AddComEnterUnit ( driver , tmp ) ;
41130: LD_VAR 0 18
41134: PPUSH
41135: LD_VAR 0 13
41139: PPUSH
41140: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41144: LD_VAR 0 18
41148: PPUSH
41149: LD_VAR 0 7
41153: PPUSH
41154: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41158: LD_VAR 0 18
41162: PPUSH
41163: CALL_OW 181
// end ; continue ;
41167: GO 40819
// end ; if not cleaners or not tmp in cleaners then
41169: LD_VAR 0 6
41173: NOT
41174: PUSH
41175: LD_VAR 0 13
41179: PUSH
41180: LD_VAR 0 6
41184: IN
41185: NOT
41186: OR
41187: IFFALSE 41494
// begin if dep then
41189: LD_VAR 0 17
41193: IFFALSE 41329
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41195: LD_ADDR_VAR 0 16
41199: PUSH
41200: LD_VAR 0 17
41204: PUSH
41205: LD_INT 1
41207: ARRAY
41208: PPUSH
41209: CALL_OW 250
41213: PPUSH
41214: LD_VAR 0 17
41218: PUSH
41219: LD_INT 1
41221: ARRAY
41222: PPUSH
41223: CALL_OW 254
41227: PPUSH
41228: LD_INT 5
41230: PPUSH
41231: CALL_OW 272
41235: PUSH
41236: LD_VAR 0 17
41240: PUSH
41241: LD_INT 1
41243: ARRAY
41244: PPUSH
41245: CALL_OW 251
41249: PPUSH
41250: LD_VAR 0 17
41254: PUSH
41255: LD_INT 1
41257: ARRAY
41258: PPUSH
41259: CALL_OW 254
41263: PPUSH
41264: LD_INT 5
41266: PPUSH
41267: CALL_OW 273
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41276: LD_VAR 0 16
41280: PUSH
41281: LD_INT 1
41283: ARRAY
41284: PPUSH
41285: LD_VAR 0 16
41289: PUSH
41290: LD_INT 2
41292: ARRAY
41293: PPUSH
41294: CALL_OW 488
41298: IFFALSE 41329
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41300: LD_VAR 0 13
41304: PPUSH
41305: LD_VAR 0 16
41309: PUSH
41310: LD_INT 1
41312: ARRAY
41313: PPUSH
41314: LD_VAR 0 16
41318: PUSH
41319: LD_INT 2
41321: ARRAY
41322: PPUSH
41323: CALL_OW 111
// continue ;
41327: GO 40819
// end ; end ; r := GetDir ( tmp ) ;
41329: LD_ADDR_VAR 0 15
41333: PUSH
41334: LD_VAR 0 13
41338: PPUSH
41339: CALL_OW 254
41343: ST_TO_ADDR
// if r = 5 then
41344: LD_VAR 0 15
41348: PUSH
41349: LD_INT 5
41351: EQUAL
41352: IFFALSE 41362
// r := 0 ;
41354: LD_ADDR_VAR 0 15
41358: PUSH
41359: LD_INT 0
41361: ST_TO_ADDR
// for j = r to 5 do
41362: LD_ADDR_VAR 0 10
41366: PUSH
41367: DOUBLE
41368: LD_VAR 0 15
41372: DEC
41373: ST_TO_ADDR
41374: LD_INT 5
41376: PUSH
41377: FOR_TO
41378: IFFALSE 41492
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41380: LD_ADDR_VAR 0 11
41384: PUSH
41385: LD_VAR 0 13
41389: PPUSH
41390: CALL_OW 250
41394: PPUSH
41395: LD_VAR 0 10
41399: PPUSH
41400: LD_INT 2
41402: PPUSH
41403: CALL_OW 272
41407: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41408: LD_ADDR_VAR 0 12
41412: PUSH
41413: LD_VAR 0 13
41417: PPUSH
41418: CALL_OW 251
41422: PPUSH
41423: LD_VAR 0 10
41427: PPUSH
41428: LD_INT 2
41430: PPUSH
41431: CALL_OW 273
41435: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41436: LD_VAR 0 11
41440: PPUSH
41441: LD_VAR 0 12
41445: PPUSH
41446: CALL_OW 488
41450: PUSH
41451: LD_VAR 0 11
41455: PPUSH
41456: LD_VAR 0 12
41460: PPUSH
41461: CALL_OW 428
41465: NOT
41466: AND
41467: IFFALSE 41490
// begin ComMoveXY ( tmp , _x , _y ) ;
41469: LD_VAR 0 13
41473: PPUSH
41474: LD_VAR 0 11
41478: PPUSH
41479: LD_VAR 0 12
41483: PPUSH
41484: CALL_OW 111
// break ;
41488: GO 41492
// end ; end ;
41490: GO 41377
41492: POP
41493: POP
// end ; end ;
41494: GO 40819
41496: POP
41497: POP
// end ;
41498: LD_VAR 0 8
41502: RET
// export function BuildingTechInvented ( side , btype ) ; begin
41503: LD_INT 0
41505: PPUSH
// result := true ;
41506: LD_ADDR_VAR 0 3
41510: PUSH
41511: LD_INT 1
41513: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
41514: LD_VAR 0 2
41518: PUSH
41519: LD_INT 24
41521: DOUBLE
41522: EQUAL
41523: IFTRUE 41533
41525: LD_INT 33
41527: DOUBLE
41528: EQUAL
41529: IFTRUE 41533
41531: GO 41558
41533: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
41534: LD_ADDR_VAR 0 3
41538: PUSH
41539: LD_INT 32
41541: PPUSH
41542: LD_VAR 0 1
41546: PPUSH
41547: CALL_OW 321
41551: PUSH
41552: LD_INT 2
41554: EQUAL
41555: ST_TO_ADDR
41556: GO 41874
41558: LD_INT 20
41560: DOUBLE
41561: EQUAL
41562: IFTRUE 41566
41564: GO 41591
41566: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
41567: LD_ADDR_VAR 0 3
41571: PUSH
41572: LD_INT 6
41574: PPUSH
41575: LD_VAR 0 1
41579: PPUSH
41580: CALL_OW 321
41584: PUSH
41585: LD_INT 2
41587: EQUAL
41588: ST_TO_ADDR
41589: GO 41874
41591: LD_INT 22
41593: DOUBLE
41594: EQUAL
41595: IFTRUE 41605
41597: LD_INT 36
41599: DOUBLE
41600: EQUAL
41601: IFTRUE 41605
41603: GO 41630
41605: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
41606: LD_ADDR_VAR 0 3
41610: PUSH
41611: LD_INT 15
41613: PPUSH
41614: LD_VAR 0 1
41618: PPUSH
41619: CALL_OW 321
41623: PUSH
41624: LD_INT 2
41626: EQUAL
41627: ST_TO_ADDR
41628: GO 41874
41630: LD_INT 30
41632: DOUBLE
41633: EQUAL
41634: IFTRUE 41638
41636: GO 41663
41638: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
41639: LD_ADDR_VAR 0 3
41643: PUSH
41644: LD_INT 20
41646: PPUSH
41647: LD_VAR 0 1
41651: PPUSH
41652: CALL_OW 321
41656: PUSH
41657: LD_INT 2
41659: EQUAL
41660: ST_TO_ADDR
41661: GO 41874
41663: LD_INT 28
41665: DOUBLE
41666: EQUAL
41667: IFTRUE 41677
41669: LD_INT 21
41671: DOUBLE
41672: EQUAL
41673: IFTRUE 41677
41675: GO 41702
41677: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
41678: LD_ADDR_VAR 0 3
41682: PUSH
41683: LD_INT 21
41685: PPUSH
41686: LD_VAR 0 1
41690: PPUSH
41691: CALL_OW 321
41695: PUSH
41696: LD_INT 2
41698: EQUAL
41699: ST_TO_ADDR
41700: GO 41874
41702: LD_INT 16
41704: DOUBLE
41705: EQUAL
41706: IFTRUE 41710
41708: GO 41735
41710: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
41711: LD_ADDR_VAR 0 3
41715: PUSH
41716: LD_INT 84
41718: PPUSH
41719: LD_VAR 0 1
41723: PPUSH
41724: CALL_OW 321
41728: PUSH
41729: LD_INT 2
41731: EQUAL
41732: ST_TO_ADDR
41733: GO 41874
41735: LD_INT 19
41737: DOUBLE
41738: EQUAL
41739: IFTRUE 41749
41741: LD_INT 23
41743: DOUBLE
41744: EQUAL
41745: IFTRUE 41749
41747: GO 41774
41749: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
41750: LD_ADDR_VAR 0 3
41754: PUSH
41755: LD_INT 83
41757: PPUSH
41758: LD_VAR 0 1
41762: PPUSH
41763: CALL_OW 321
41767: PUSH
41768: LD_INT 2
41770: EQUAL
41771: ST_TO_ADDR
41772: GO 41874
41774: LD_INT 17
41776: DOUBLE
41777: EQUAL
41778: IFTRUE 41782
41780: GO 41807
41782: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
41783: LD_ADDR_VAR 0 3
41787: PUSH
41788: LD_INT 39
41790: PPUSH
41791: LD_VAR 0 1
41795: PPUSH
41796: CALL_OW 321
41800: PUSH
41801: LD_INT 2
41803: EQUAL
41804: ST_TO_ADDR
41805: GO 41874
41807: LD_INT 18
41809: DOUBLE
41810: EQUAL
41811: IFTRUE 41815
41813: GO 41840
41815: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
41816: LD_ADDR_VAR 0 3
41820: PUSH
41821: LD_INT 40
41823: PPUSH
41824: LD_VAR 0 1
41828: PPUSH
41829: CALL_OW 321
41833: PUSH
41834: LD_INT 2
41836: EQUAL
41837: ST_TO_ADDR
41838: GO 41874
41840: LD_INT 27
41842: DOUBLE
41843: EQUAL
41844: IFTRUE 41848
41846: GO 41873
41848: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
41849: LD_ADDR_VAR 0 3
41853: PUSH
41854: LD_INT 35
41856: PPUSH
41857: LD_VAR 0 1
41861: PPUSH
41862: CALL_OW 321
41866: PUSH
41867: LD_INT 2
41869: EQUAL
41870: ST_TO_ADDR
41871: GO 41874
41873: POP
// end ;
41874: LD_VAR 0 3
41878: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
41879: LD_INT 0
41881: PPUSH
41882: PPUSH
41883: PPUSH
41884: PPUSH
41885: PPUSH
41886: PPUSH
41887: PPUSH
41888: PPUSH
41889: PPUSH
41890: PPUSH
41891: PPUSH
// result := false ;
41892: LD_ADDR_VAR 0 6
41896: PUSH
41897: LD_INT 0
41899: ST_TO_ADDR
// if btype = b_depot then
41900: LD_VAR 0 2
41904: PUSH
41905: LD_INT 0
41907: EQUAL
41908: IFFALSE 41920
// begin result := true ;
41910: LD_ADDR_VAR 0 6
41914: PUSH
41915: LD_INT 1
41917: ST_TO_ADDR
// exit ;
41918: GO 42746
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41920: LD_VAR 0 1
41924: NOT
41925: PUSH
41926: LD_VAR 0 1
41930: PPUSH
41931: CALL_OW 266
41935: PUSH
41936: LD_INT 0
41938: PUSH
41939: LD_INT 1
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: IN
41946: NOT
41947: OR
41948: PUSH
41949: LD_VAR 0 2
41953: NOT
41954: OR
41955: PUSH
41956: LD_VAR 0 5
41960: PUSH
41961: LD_INT 0
41963: PUSH
41964: LD_INT 1
41966: PUSH
41967: LD_INT 2
41969: PUSH
41970: LD_INT 3
41972: PUSH
41973: LD_INT 4
41975: PUSH
41976: LD_INT 5
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: LIST
41986: IN
41987: NOT
41988: OR
41989: PUSH
41990: LD_VAR 0 3
41994: PPUSH
41995: LD_VAR 0 4
41999: PPUSH
42000: CALL_OW 488
42004: NOT
42005: OR
42006: IFFALSE 42010
// exit ;
42008: GO 42746
// side := GetSide ( depot ) ;
42010: LD_ADDR_VAR 0 9
42014: PUSH
42015: LD_VAR 0 1
42019: PPUSH
42020: CALL_OW 255
42024: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42025: LD_VAR 0 9
42029: PPUSH
42030: LD_VAR 0 2
42034: PPUSH
42035: CALL 41503 0 2
42039: NOT
42040: IFFALSE 42044
// exit ;
42042: GO 42746
// pom := GetBase ( depot ) ;
42044: LD_ADDR_VAR 0 10
42048: PUSH
42049: LD_VAR 0 1
42053: PPUSH
42054: CALL_OW 274
42058: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42059: LD_ADDR_VAR 0 11
42063: PUSH
42064: LD_VAR 0 2
42068: PPUSH
42069: LD_VAR 0 1
42073: PPUSH
42074: CALL_OW 248
42078: PPUSH
42079: CALL_OW 450
42083: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42084: LD_VAR 0 10
42088: PPUSH
42089: LD_INT 1
42091: PPUSH
42092: CALL_OW 275
42096: PUSH
42097: LD_VAR 0 11
42101: PUSH
42102: LD_INT 1
42104: ARRAY
42105: GREATEREQUAL
42106: PUSH
42107: LD_VAR 0 10
42111: PPUSH
42112: LD_INT 2
42114: PPUSH
42115: CALL_OW 275
42119: PUSH
42120: LD_VAR 0 11
42124: PUSH
42125: LD_INT 2
42127: ARRAY
42128: GREATEREQUAL
42129: AND
42130: PUSH
42131: LD_VAR 0 10
42135: PPUSH
42136: LD_INT 3
42138: PPUSH
42139: CALL_OW 275
42143: PUSH
42144: LD_VAR 0 11
42148: PUSH
42149: LD_INT 3
42151: ARRAY
42152: GREATEREQUAL
42153: AND
42154: NOT
42155: IFFALSE 42159
// exit ;
42157: GO 42746
// if GetBType ( depot ) = b_depot then
42159: LD_VAR 0 1
42163: PPUSH
42164: CALL_OW 266
42168: PUSH
42169: LD_INT 0
42171: EQUAL
42172: IFFALSE 42184
// dist := 28 else
42174: LD_ADDR_VAR 0 14
42178: PUSH
42179: LD_INT 28
42181: ST_TO_ADDR
42182: GO 42192
// dist := 36 ;
42184: LD_ADDR_VAR 0 14
42188: PUSH
42189: LD_INT 36
42191: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42192: LD_VAR 0 1
42196: PPUSH
42197: LD_VAR 0 3
42201: PPUSH
42202: LD_VAR 0 4
42206: PPUSH
42207: CALL_OW 297
42211: PUSH
42212: LD_VAR 0 14
42216: GREATER
42217: IFFALSE 42221
// exit ;
42219: GO 42746
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42221: LD_ADDR_VAR 0 12
42225: PUSH
42226: LD_VAR 0 2
42230: PPUSH
42231: LD_VAR 0 3
42235: PPUSH
42236: LD_VAR 0 4
42240: PPUSH
42241: LD_VAR 0 5
42245: PPUSH
42246: LD_VAR 0 1
42250: PPUSH
42251: CALL_OW 248
42255: PPUSH
42256: LD_INT 0
42258: PPUSH
42259: CALL 42751 0 6
42263: ST_TO_ADDR
// if not hexes then
42264: LD_VAR 0 12
42268: NOT
42269: IFFALSE 42273
// exit ;
42271: GO 42746
// hex := GetHexInfo ( x , y ) ;
42273: LD_ADDR_VAR 0 15
42277: PUSH
42278: LD_VAR 0 3
42282: PPUSH
42283: LD_VAR 0 4
42287: PPUSH
42288: CALL_OW 546
42292: ST_TO_ADDR
// if hex [ 1 ] then
42293: LD_VAR 0 15
42297: PUSH
42298: LD_INT 1
42300: ARRAY
42301: IFFALSE 42305
// exit ;
42303: GO 42746
// height := hex [ 2 ] ;
42305: LD_ADDR_VAR 0 13
42309: PUSH
42310: LD_VAR 0 15
42314: PUSH
42315: LD_INT 2
42317: ARRAY
42318: ST_TO_ADDR
// for i = 1 to hexes do
42319: LD_ADDR_VAR 0 7
42323: PUSH
42324: DOUBLE
42325: LD_INT 1
42327: DEC
42328: ST_TO_ADDR
42329: LD_VAR 0 12
42333: PUSH
42334: FOR_TO
42335: IFFALSE 42665
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42337: LD_VAR 0 12
42341: PUSH
42342: LD_VAR 0 7
42346: ARRAY
42347: PUSH
42348: LD_INT 1
42350: ARRAY
42351: PPUSH
42352: LD_VAR 0 12
42356: PUSH
42357: LD_VAR 0 7
42361: ARRAY
42362: PUSH
42363: LD_INT 2
42365: ARRAY
42366: PPUSH
42367: CALL_OW 488
42371: NOT
42372: PUSH
42373: LD_VAR 0 12
42377: PUSH
42378: LD_VAR 0 7
42382: ARRAY
42383: PUSH
42384: LD_INT 1
42386: ARRAY
42387: PPUSH
42388: LD_VAR 0 12
42392: PUSH
42393: LD_VAR 0 7
42397: ARRAY
42398: PUSH
42399: LD_INT 2
42401: ARRAY
42402: PPUSH
42403: CALL_OW 428
42407: PUSH
42408: LD_INT 0
42410: GREATER
42411: OR
42412: PUSH
42413: LD_VAR 0 12
42417: PUSH
42418: LD_VAR 0 7
42422: ARRAY
42423: PUSH
42424: LD_INT 1
42426: ARRAY
42427: PPUSH
42428: LD_VAR 0 12
42432: PUSH
42433: LD_VAR 0 7
42437: ARRAY
42438: PUSH
42439: LD_INT 2
42441: ARRAY
42442: PPUSH
42443: CALL_OW 351
42447: OR
42448: IFFALSE 42454
// exit ;
42450: POP
42451: POP
42452: GO 42746
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42454: LD_ADDR_VAR 0 8
42458: PUSH
42459: LD_VAR 0 12
42463: PUSH
42464: LD_VAR 0 7
42468: ARRAY
42469: PUSH
42470: LD_INT 1
42472: ARRAY
42473: PPUSH
42474: LD_VAR 0 12
42478: PUSH
42479: LD_VAR 0 7
42483: ARRAY
42484: PUSH
42485: LD_INT 2
42487: ARRAY
42488: PPUSH
42489: CALL_OW 546
42493: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42494: LD_VAR 0 8
42498: PUSH
42499: LD_INT 1
42501: ARRAY
42502: PUSH
42503: LD_VAR 0 8
42507: PUSH
42508: LD_INT 2
42510: ARRAY
42511: PUSH
42512: LD_VAR 0 13
42516: PUSH
42517: LD_INT 2
42519: PLUS
42520: GREATER
42521: OR
42522: PUSH
42523: LD_VAR 0 8
42527: PUSH
42528: LD_INT 2
42530: ARRAY
42531: PUSH
42532: LD_VAR 0 13
42536: PUSH
42537: LD_INT 2
42539: MINUS
42540: LESS
42541: OR
42542: PUSH
42543: LD_VAR 0 8
42547: PUSH
42548: LD_INT 3
42550: ARRAY
42551: PUSH
42552: LD_INT 0
42554: PUSH
42555: LD_INT 8
42557: PUSH
42558: LD_INT 9
42560: PUSH
42561: LD_INT 10
42563: PUSH
42564: LD_INT 11
42566: PUSH
42567: LD_INT 12
42569: PUSH
42570: LD_INT 13
42572: PUSH
42573: LD_INT 16
42575: PUSH
42576: LD_INT 17
42578: PUSH
42579: LD_INT 18
42581: PUSH
42582: LD_INT 19
42584: PUSH
42585: LD_INT 20
42587: PUSH
42588: LD_INT 21
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: LIST
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: LIST
42601: LIST
42602: LIST
42603: LIST
42604: LIST
42605: IN
42606: NOT
42607: OR
42608: PUSH
42609: LD_VAR 0 8
42613: PUSH
42614: LD_INT 5
42616: ARRAY
42617: NOT
42618: OR
42619: PUSH
42620: LD_VAR 0 8
42624: PUSH
42625: LD_INT 6
42627: ARRAY
42628: PUSH
42629: LD_INT 1
42631: PUSH
42632: LD_INT 2
42634: PUSH
42635: LD_INT 7
42637: PUSH
42638: LD_INT 9
42640: PUSH
42641: LD_INT 10
42643: PUSH
42644: LD_INT 11
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: LIST
42651: LIST
42652: LIST
42653: LIST
42654: IN
42655: NOT
42656: OR
42657: IFFALSE 42663
// exit ;
42659: POP
42660: POP
42661: GO 42746
// end ;
42663: GO 42334
42665: POP
42666: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
42667: LD_VAR 0 9
42671: PPUSH
42672: LD_VAR 0 3
42676: PPUSH
42677: LD_VAR 0 4
42681: PPUSH
42682: LD_INT 20
42684: PPUSH
42685: CALL 34669 0 4
42689: PUSH
42690: LD_INT 4
42692: ARRAY
42693: IFFALSE 42697
// exit ;
42695: GO 42746
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42697: LD_VAR 0 2
42701: PUSH
42702: LD_INT 29
42704: PUSH
42705: LD_INT 30
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: IN
42712: PUSH
42713: LD_VAR 0 3
42717: PPUSH
42718: LD_VAR 0 4
42722: PPUSH
42723: LD_VAR 0 9
42727: PPUSH
42728: CALL_OW 440
42732: NOT
42733: AND
42734: IFFALSE 42738
// exit ;
42736: GO 42746
// result := true ;
42738: LD_ADDR_VAR 0 6
42742: PUSH
42743: LD_INT 1
42745: ST_TO_ADDR
// end ;
42746: LD_VAR 0 6
42750: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
42751: LD_INT 0
42753: PPUSH
42754: PPUSH
42755: PPUSH
42756: PPUSH
42757: PPUSH
42758: PPUSH
42759: PPUSH
42760: PPUSH
42761: PPUSH
42762: PPUSH
42763: PPUSH
42764: PPUSH
42765: PPUSH
42766: PPUSH
42767: PPUSH
42768: PPUSH
42769: PPUSH
42770: PPUSH
42771: PPUSH
42772: PPUSH
42773: PPUSH
42774: PPUSH
42775: PPUSH
42776: PPUSH
42777: PPUSH
42778: PPUSH
42779: PPUSH
42780: PPUSH
42781: PPUSH
42782: PPUSH
42783: PPUSH
42784: PPUSH
42785: PPUSH
42786: PPUSH
42787: PPUSH
42788: PPUSH
42789: PPUSH
42790: PPUSH
42791: PPUSH
42792: PPUSH
42793: PPUSH
42794: PPUSH
42795: PPUSH
42796: PPUSH
42797: PPUSH
42798: PPUSH
42799: PPUSH
42800: PPUSH
42801: PPUSH
42802: PPUSH
42803: PPUSH
42804: PPUSH
42805: PPUSH
42806: PPUSH
42807: PPUSH
42808: PPUSH
42809: PPUSH
42810: PPUSH
// result = [ ] ;
42811: LD_ADDR_VAR 0 7
42815: PUSH
42816: EMPTY
42817: ST_TO_ADDR
// temp_list = [ ] ;
42818: LD_ADDR_VAR 0 9
42822: PUSH
42823: EMPTY
42824: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42825: LD_VAR 0 4
42829: PUSH
42830: LD_INT 0
42832: PUSH
42833: LD_INT 1
42835: PUSH
42836: LD_INT 2
42838: PUSH
42839: LD_INT 3
42841: PUSH
42842: LD_INT 4
42844: PUSH
42845: LD_INT 5
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: LIST
42852: LIST
42853: LIST
42854: LIST
42855: IN
42856: NOT
42857: PUSH
42858: LD_VAR 0 1
42862: PUSH
42863: LD_INT 0
42865: PUSH
42866: LD_INT 1
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: IN
42873: PUSH
42874: LD_VAR 0 5
42878: PUSH
42879: LD_INT 1
42881: PUSH
42882: LD_INT 2
42884: PUSH
42885: LD_INT 3
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: LIST
42892: IN
42893: NOT
42894: AND
42895: OR
42896: IFFALSE 42900
// exit ;
42898: GO 61291
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42900: LD_VAR 0 1
42904: PUSH
42905: LD_INT 6
42907: PUSH
42908: LD_INT 7
42910: PUSH
42911: LD_INT 8
42913: PUSH
42914: LD_INT 13
42916: PUSH
42917: LD_INT 12
42919: PUSH
42920: LD_INT 15
42922: PUSH
42923: LD_INT 11
42925: PUSH
42926: LD_INT 14
42928: PUSH
42929: LD_INT 10
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: LIST
42940: LIST
42941: LIST
42942: IN
42943: IFFALSE 42953
// btype = b_lab ;
42945: LD_ADDR_VAR 0 1
42949: PUSH
42950: LD_INT 6
42952: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
42953: LD_VAR 0 6
42957: PUSH
42958: LD_INT 0
42960: PUSH
42961: LD_INT 1
42963: PUSH
42964: LD_INT 2
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: LIST
42971: IN
42972: NOT
42973: PUSH
42974: LD_VAR 0 1
42978: PUSH
42979: LD_INT 0
42981: PUSH
42982: LD_INT 1
42984: PUSH
42985: LD_INT 2
42987: PUSH
42988: LD_INT 3
42990: PUSH
42991: LD_INT 6
42993: PUSH
42994: LD_INT 36
42996: PUSH
42997: LD_INT 4
42999: PUSH
43000: LD_INT 5
43002: PUSH
43003: LD_INT 31
43005: PUSH
43006: LD_INT 32
43008: PUSH
43009: LD_INT 33
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: LIST
43016: LIST
43017: LIST
43018: LIST
43019: LIST
43020: LIST
43021: LIST
43022: LIST
43023: LIST
43024: IN
43025: NOT
43026: PUSH
43027: LD_VAR 0 6
43031: PUSH
43032: LD_INT 1
43034: EQUAL
43035: AND
43036: OR
43037: PUSH
43038: LD_VAR 0 1
43042: PUSH
43043: LD_INT 2
43045: PUSH
43046: LD_INT 3
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: IN
43053: NOT
43054: PUSH
43055: LD_VAR 0 6
43059: PUSH
43060: LD_INT 2
43062: EQUAL
43063: AND
43064: OR
43065: IFFALSE 43075
// mode = 0 ;
43067: LD_ADDR_VAR 0 6
43071: PUSH
43072: LD_INT 0
43074: ST_TO_ADDR
// case mode of 0 :
43075: LD_VAR 0 6
43079: PUSH
43080: LD_INT 0
43082: DOUBLE
43083: EQUAL
43084: IFTRUE 43088
43086: GO 54541
43088: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43089: LD_ADDR_VAR 0 11
43093: PUSH
43094: LD_INT 0
43096: PUSH
43097: LD_INT 0
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: LD_INT 0
43106: PUSH
43107: LD_INT 1
43109: NEG
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: PUSH
43115: LD_INT 1
43117: PUSH
43118: LD_INT 0
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: PUSH
43125: LD_INT 1
43127: PUSH
43128: LD_INT 1
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: PUSH
43135: LD_INT 0
43137: PUSH
43138: LD_INT 1
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: PUSH
43145: LD_INT 1
43147: NEG
43148: PUSH
43149: LD_INT 0
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: LD_INT 1
43158: NEG
43159: PUSH
43160: LD_INT 1
43162: NEG
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 1
43170: NEG
43171: PUSH
43172: LD_INT 2
43174: NEG
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: LD_INT 0
43182: PUSH
43183: LD_INT 2
43185: NEG
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: PUSH
43191: LD_INT 1
43193: PUSH
43194: LD_INT 1
43196: NEG
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 1
43204: PUSH
43205: LD_INT 2
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: PUSH
43212: LD_INT 0
43214: PUSH
43215: LD_INT 2
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: PUSH
43222: LD_INT 1
43224: NEG
43225: PUSH
43226: LD_INT 1
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PUSH
43233: LD_INT 1
43235: PUSH
43236: LD_INT 3
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 0
43245: PUSH
43246: LD_INT 3
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PUSH
43253: LD_INT 1
43255: NEG
43256: PUSH
43257: LD_INT 2
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: LIST
43271: LIST
43272: LIST
43273: LIST
43274: LIST
43275: LIST
43276: LIST
43277: LIST
43278: LIST
43279: LIST
43280: LIST
43281: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43282: LD_ADDR_VAR 0 12
43286: PUSH
43287: LD_INT 0
43289: PUSH
43290: LD_INT 0
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: LD_INT 0
43299: PUSH
43300: LD_INT 1
43302: NEG
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 1
43310: PUSH
43311: LD_INT 0
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 1
43320: PUSH
43321: LD_INT 1
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 0
43330: PUSH
43331: LD_INT 1
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: LD_INT 1
43340: NEG
43341: PUSH
43342: LD_INT 0
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: LD_INT 1
43351: NEG
43352: PUSH
43353: LD_INT 1
43355: NEG
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: LD_INT 1
43363: PUSH
43364: LD_INT 1
43366: NEG
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 2
43374: PUSH
43375: LD_INT 0
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: LD_INT 2
43384: PUSH
43385: LD_INT 1
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: PUSH
43392: LD_INT 1
43394: NEG
43395: PUSH
43396: LD_INT 1
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: PUSH
43403: LD_INT 2
43405: NEG
43406: PUSH
43407: LD_INT 0
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PUSH
43414: LD_INT 2
43416: NEG
43417: PUSH
43418: LD_INT 1
43420: NEG
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: LD_INT 2
43428: NEG
43429: PUSH
43430: LD_INT 1
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 3
43439: NEG
43440: PUSH
43441: LD_INT 0
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 3
43450: NEG
43451: PUSH
43452: LD_INT 1
43454: NEG
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: LIST
43477: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43478: LD_ADDR_VAR 0 13
43482: PUSH
43483: LD_INT 0
43485: PUSH
43486: LD_INT 0
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 0
43495: PUSH
43496: LD_INT 1
43498: NEG
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 1
43506: PUSH
43507: LD_INT 0
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: PUSH
43514: LD_INT 1
43516: PUSH
43517: LD_INT 1
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: PUSH
43524: LD_INT 0
43526: PUSH
43527: LD_INT 1
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: LD_INT 1
43536: NEG
43537: PUSH
43538: LD_INT 0
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 1
43547: NEG
43548: PUSH
43549: LD_INT 1
43551: NEG
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 1
43559: NEG
43560: PUSH
43561: LD_INT 2
43563: NEG
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PUSH
43569: LD_INT 2
43571: PUSH
43572: LD_INT 1
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: PUSH
43579: LD_INT 2
43581: PUSH
43582: LD_INT 2
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: LD_INT 1
43591: PUSH
43592: LD_INT 2
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 2
43601: NEG
43602: PUSH
43603: LD_INT 1
43605: NEG
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PUSH
43611: LD_INT 2
43613: NEG
43614: PUSH
43615: LD_INT 2
43617: NEG
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: LD_INT 2
43625: NEG
43626: PUSH
43627: LD_INT 3
43629: NEG
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: LD_INT 3
43637: NEG
43638: PUSH
43639: LD_INT 2
43641: NEG
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 3
43649: NEG
43650: PUSH
43651: LD_INT 3
43653: NEG
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: LIST
43663: LIST
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: LIST
43672: LIST
43673: LIST
43674: LIST
43675: LIST
43676: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43677: LD_ADDR_VAR 0 14
43681: PUSH
43682: LD_INT 0
43684: PUSH
43685: LD_INT 0
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 0
43694: PUSH
43695: LD_INT 1
43697: NEG
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 1
43705: PUSH
43706: LD_INT 0
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 1
43715: PUSH
43716: LD_INT 1
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: LD_INT 0
43725: PUSH
43726: LD_INT 1
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 1
43735: NEG
43736: PUSH
43737: LD_INT 0
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_INT 1
43746: NEG
43747: PUSH
43748: LD_INT 1
43750: NEG
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 1
43758: NEG
43759: PUSH
43760: LD_INT 2
43762: NEG
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: PUSH
43768: LD_INT 0
43770: PUSH
43771: LD_INT 2
43773: NEG
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: LD_INT 1
43781: PUSH
43782: LD_INT 1
43784: NEG
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_INT 1
43792: PUSH
43793: LD_INT 2
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: LD_INT 0
43802: PUSH
43803: LD_INT 2
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: PUSH
43810: LD_INT 1
43812: NEG
43813: PUSH
43814: LD_INT 1
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 1
43823: NEG
43824: PUSH
43825: LD_INT 3
43827: NEG
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: PUSH
43833: LD_INT 0
43835: PUSH
43836: LD_INT 3
43838: NEG
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 1
43846: PUSH
43847: LD_INT 2
43849: NEG
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: LIST
43859: LIST
43860: LIST
43861: LIST
43862: LIST
43863: LIST
43864: LIST
43865: LIST
43866: LIST
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43873: LD_ADDR_VAR 0 15
43877: PUSH
43878: LD_INT 0
43880: PUSH
43881: LD_INT 0
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: LD_INT 0
43890: PUSH
43891: LD_INT 1
43893: NEG
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: PUSH
43899: LD_INT 1
43901: PUSH
43902: LD_INT 0
43904: PUSH
43905: EMPTY
43906: LIST
43907: LIST
43908: PUSH
43909: LD_INT 1
43911: PUSH
43912: LD_INT 1
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: PUSH
43919: LD_INT 0
43921: PUSH
43922: LD_INT 1
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: LD_INT 1
43931: NEG
43932: PUSH
43933: LD_INT 0
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: LD_INT 1
43942: NEG
43943: PUSH
43944: LD_INT 1
43946: NEG
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: PUSH
43952: LD_INT 1
43954: PUSH
43955: LD_INT 1
43957: NEG
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: LD_INT 2
43965: PUSH
43966: LD_INT 0
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 2
43975: PUSH
43976: LD_INT 1
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: LD_INT 1
43985: NEG
43986: PUSH
43987: LD_INT 1
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 2
43996: NEG
43997: PUSH
43998: LD_INT 0
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: PUSH
44005: LD_INT 2
44007: NEG
44008: PUSH
44009: LD_INT 1
44011: NEG
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: PUSH
44017: LD_INT 2
44019: PUSH
44020: LD_INT 1
44022: NEG
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: PUSH
44028: LD_INT 3
44030: PUSH
44031: LD_INT 0
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: LD_INT 3
44040: PUSH
44041: LD_INT 1
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: PUSH
44048: EMPTY
44049: LIST
44050: LIST
44051: LIST
44052: LIST
44053: LIST
44054: LIST
44055: LIST
44056: LIST
44057: LIST
44058: LIST
44059: LIST
44060: LIST
44061: LIST
44062: LIST
44063: LIST
44064: LIST
44065: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44066: LD_ADDR_VAR 0 16
44070: PUSH
44071: LD_INT 0
44073: PUSH
44074: LD_INT 0
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 0
44083: PUSH
44084: LD_INT 1
44086: NEG
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: LD_INT 1
44094: PUSH
44095: LD_INT 0
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PUSH
44102: LD_INT 1
44104: PUSH
44105: LD_INT 1
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: PUSH
44112: LD_INT 0
44114: PUSH
44115: LD_INT 1
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: PUSH
44122: LD_INT 1
44124: NEG
44125: PUSH
44126: LD_INT 0
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 1
44135: NEG
44136: PUSH
44137: LD_INT 1
44139: NEG
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: PUSH
44145: LD_INT 1
44147: NEG
44148: PUSH
44149: LD_INT 2
44151: NEG
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: PUSH
44157: LD_INT 2
44159: PUSH
44160: LD_INT 1
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 2
44169: PUSH
44170: LD_INT 2
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: PUSH
44177: LD_INT 1
44179: PUSH
44180: LD_INT 2
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: PUSH
44187: LD_INT 2
44189: NEG
44190: PUSH
44191: LD_INT 1
44193: NEG
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: LD_INT 2
44201: NEG
44202: PUSH
44203: LD_INT 2
44205: NEG
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: LD_INT 3
44213: PUSH
44214: LD_INT 2
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PUSH
44221: LD_INT 3
44223: PUSH
44224: LD_INT 3
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 2
44233: PUSH
44234: LD_INT 3
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: LIST
44253: LIST
44254: LIST
44255: LIST
44256: LIST
44257: LIST
44258: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44259: LD_ADDR_VAR 0 17
44263: PUSH
44264: LD_INT 0
44266: PUSH
44267: LD_INT 0
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 0
44276: PUSH
44277: LD_INT 1
44279: NEG
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: LD_INT 1
44287: PUSH
44288: LD_INT 0
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: PUSH
44295: LD_INT 1
44297: PUSH
44298: LD_INT 1
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: LD_INT 0
44307: PUSH
44308: LD_INT 1
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 1
44317: NEG
44318: PUSH
44319: LD_INT 0
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: PUSH
44326: LD_INT 1
44328: NEG
44329: PUSH
44330: LD_INT 1
44332: NEG
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: LD_INT 1
44340: NEG
44341: PUSH
44342: LD_INT 2
44344: NEG
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 0
44352: PUSH
44353: LD_INT 2
44355: NEG
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 1
44363: PUSH
44364: LD_INT 1
44366: NEG
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: LD_INT 2
44374: PUSH
44375: LD_INT 0
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 2
44384: PUSH
44385: LD_INT 1
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: LD_INT 2
44394: PUSH
44395: LD_INT 2
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: PUSH
44402: LD_INT 1
44404: PUSH
44405: LD_INT 2
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: PUSH
44412: LD_INT 0
44414: PUSH
44415: LD_INT 2
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: LD_INT 1
44424: NEG
44425: PUSH
44426: LD_INT 1
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 2
44435: NEG
44436: PUSH
44437: LD_INT 0
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: PUSH
44444: LD_INT 2
44446: NEG
44447: PUSH
44448: LD_INT 1
44450: NEG
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PUSH
44456: LD_INT 2
44458: NEG
44459: PUSH
44460: LD_INT 2
44462: NEG
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44489: LD_ADDR_VAR 0 18
44493: PUSH
44494: LD_INT 0
44496: PUSH
44497: LD_INT 0
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 0
44506: PUSH
44507: LD_INT 1
44509: NEG
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: PUSH
44515: LD_INT 1
44517: PUSH
44518: LD_INT 0
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: PUSH
44525: LD_INT 1
44527: PUSH
44528: LD_INT 1
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: PUSH
44535: LD_INT 0
44537: PUSH
44538: LD_INT 1
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: LD_INT 1
44547: NEG
44548: PUSH
44549: LD_INT 0
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PUSH
44556: LD_INT 1
44558: NEG
44559: PUSH
44560: LD_INT 1
44562: NEG
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: LD_INT 1
44570: NEG
44571: PUSH
44572: LD_INT 2
44574: NEG
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: LD_INT 0
44582: PUSH
44583: LD_INT 2
44585: NEG
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 1
44593: PUSH
44594: LD_INT 1
44596: NEG
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 2
44604: PUSH
44605: LD_INT 0
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 2
44614: PUSH
44615: LD_INT 1
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 2
44624: PUSH
44625: LD_INT 2
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PUSH
44632: LD_INT 1
44634: PUSH
44635: LD_INT 2
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 0
44644: PUSH
44645: LD_INT 2
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: PUSH
44652: LD_INT 1
44654: NEG
44655: PUSH
44656: LD_INT 1
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 2
44665: NEG
44666: PUSH
44667: LD_INT 0
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: LD_INT 2
44676: NEG
44677: PUSH
44678: LD_INT 1
44680: NEG
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: PUSH
44686: LD_INT 2
44688: NEG
44689: PUSH
44690: LD_INT 2
44692: NEG
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: LIST
44717: LIST
44718: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44719: LD_ADDR_VAR 0 19
44723: PUSH
44724: LD_INT 0
44726: PUSH
44727: LD_INT 0
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 0
44736: PUSH
44737: LD_INT 1
44739: NEG
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: PUSH
44745: LD_INT 1
44747: PUSH
44748: LD_INT 0
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: PUSH
44755: LD_INT 1
44757: PUSH
44758: LD_INT 1
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 0
44767: PUSH
44768: LD_INT 1
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 1
44777: NEG
44778: PUSH
44779: LD_INT 0
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: PUSH
44786: LD_INT 1
44788: NEG
44789: PUSH
44790: LD_INT 1
44792: NEG
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 1
44800: NEG
44801: PUSH
44802: LD_INT 2
44804: NEG
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 0
44812: PUSH
44813: LD_INT 2
44815: NEG
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 1
44823: PUSH
44824: LD_INT 1
44826: NEG
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 2
44834: PUSH
44835: LD_INT 0
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 2
44844: PUSH
44845: LD_INT 1
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 2
44854: PUSH
44855: LD_INT 2
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 1
44864: PUSH
44865: LD_INT 2
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 0
44874: PUSH
44875: LD_INT 2
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: LD_INT 1
44884: NEG
44885: PUSH
44886: LD_INT 1
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 2
44895: NEG
44896: PUSH
44897: LD_INT 0
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 2
44906: NEG
44907: PUSH
44908: LD_INT 1
44910: NEG
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: PUSH
44916: LD_INT 2
44918: NEG
44919: PUSH
44920: LD_INT 2
44922: NEG
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: LIST
44937: LIST
44938: LIST
44939: LIST
44940: LIST
44941: LIST
44942: LIST
44943: LIST
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44949: LD_ADDR_VAR 0 20
44953: PUSH
44954: LD_INT 0
44956: PUSH
44957: LD_INT 0
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 0
44966: PUSH
44967: LD_INT 1
44969: NEG
44970: PUSH
44971: EMPTY
44972: LIST
44973: LIST
44974: PUSH
44975: LD_INT 1
44977: PUSH
44978: LD_INT 0
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: PUSH
44985: LD_INT 1
44987: PUSH
44988: LD_INT 1
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 0
44997: PUSH
44998: LD_INT 1
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 1
45007: NEG
45008: PUSH
45009: LD_INT 0
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 1
45018: NEG
45019: PUSH
45020: LD_INT 1
45022: NEG
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 1
45030: NEG
45031: PUSH
45032: LD_INT 2
45034: NEG
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 0
45042: PUSH
45043: LD_INT 2
45045: NEG
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 1
45053: PUSH
45054: LD_INT 1
45056: NEG
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: LD_INT 2
45064: PUSH
45065: LD_INT 0
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 2
45074: PUSH
45075: LD_INT 1
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 2
45084: PUSH
45085: LD_INT 2
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 1
45094: PUSH
45095: LD_INT 2
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: LD_INT 0
45104: PUSH
45105: LD_INT 2
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: LD_INT 1
45114: NEG
45115: PUSH
45116: LD_INT 1
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 2
45125: NEG
45126: PUSH
45127: LD_INT 0
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 2
45136: NEG
45137: PUSH
45138: LD_INT 1
45140: NEG
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 2
45148: NEG
45149: PUSH
45150: LD_INT 2
45152: NEG
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: LIST
45162: LIST
45163: LIST
45164: LIST
45165: LIST
45166: LIST
45167: LIST
45168: LIST
45169: LIST
45170: LIST
45171: LIST
45172: LIST
45173: LIST
45174: LIST
45175: LIST
45176: LIST
45177: LIST
45178: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45179: LD_ADDR_VAR 0 21
45183: PUSH
45184: LD_INT 0
45186: PUSH
45187: LD_INT 0
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 0
45196: PUSH
45197: LD_INT 1
45199: NEG
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: LD_INT 1
45207: PUSH
45208: LD_INT 0
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 1
45217: PUSH
45218: LD_INT 1
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 0
45227: PUSH
45228: LD_INT 1
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: LD_INT 1
45237: NEG
45238: PUSH
45239: LD_INT 0
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 1
45248: NEG
45249: PUSH
45250: LD_INT 1
45252: NEG
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 1
45260: NEG
45261: PUSH
45262: LD_INT 2
45264: NEG
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 0
45272: PUSH
45273: LD_INT 2
45275: NEG
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 1
45283: PUSH
45284: LD_INT 1
45286: NEG
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 2
45294: PUSH
45295: LD_INT 0
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 2
45304: PUSH
45305: LD_INT 1
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 2
45314: PUSH
45315: LD_INT 2
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: LD_INT 1
45324: PUSH
45325: LD_INT 2
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: LD_INT 0
45334: PUSH
45335: LD_INT 2
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PUSH
45342: LD_INT 1
45344: NEG
45345: PUSH
45346: LD_INT 1
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: LD_INT 2
45355: NEG
45356: PUSH
45357: LD_INT 0
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 2
45366: NEG
45367: PUSH
45368: LD_INT 1
45370: NEG
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 2
45378: NEG
45379: PUSH
45380: LD_INT 2
45382: NEG
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: LIST
45396: LIST
45397: LIST
45398: LIST
45399: LIST
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: LIST
45405: LIST
45406: LIST
45407: LIST
45408: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45409: LD_ADDR_VAR 0 22
45413: PUSH
45414: LD_INT 0
45416: PUSH
45417: LD_INT 0
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: PUSH
45424: LD_INT 0
45426: PUSH
45427: LD_INT 1
45429: NEG
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: PUSH
45435: LD_INT 1
45437: PUSH
45438: LD_INT 0
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: LD_INT 1
45447: PUSH
45448: LD_INT 1
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 0
45457: PUSH
45458: LD_INT 1
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 1
45467: NEG
45468: PUSH
45469: LD_INT 0
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 1
45478: NEG
45479: PUSH
45480: LD_INT 1
45482: NEG
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 1
45490: NEG
45491: PUSH
45492: LD_INT 2
45494: NEG
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: PUSH
45500: LD_INT 0
45502: PUSH
45503: LD_INT 2
45505: NEG
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 1
45513: PUSH
45514: LD_INT 1
45516: NEG
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 2
45524: PUSH
45525: LD_INT 0
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 2
45534: PUSH
45535: LD_INT 1
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 2
45544: PUSH
45545: LD_INT 2
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: LD_INT 1
45554: PUSH
45555: LD_INT 2
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 0
45564: PUSH
45565: LD_INT 2
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 1
45574: NEG
45575: PUSH
45576: LD_INT 1
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PUSH
45583: LD_INT 2
45585: NEG
45586: PUSH
45587: LD_INT 0
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 2
45596: NEG
45597: PUSH
45598: LD_INT 1
45600: NEG
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: LD_INT 2
45608: NEG
45609: PUSH
45610: LD_INT 2
45612: NEG
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: LIST
45631: LIST
45632: LIST
45633: LIST
45634: LIST
45635: LIST
45636: LIST
45637: LIST
45638: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45639: LD_ADDR_VAR 0 23
45643: PUSH
45644: LD_INT 0
45646: PUSH
45647: LD_INT 0
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 0
45656: PUSH
45657: LD_INT 1
45659: NEG
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 1
45667: PUSH
45668: LD_INT 0
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 1
45677: PUSH
45678: LD_INT 1
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 0
45687: PUSH
45688: LD_INT 1
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 1
45697: NEG
45698: PUSH
45699: LD_INT 0
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: LD_INT 1
45708: NEG
45709: PUSH
45710: LD_INT 1
45712: NEG
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 1
45720: NEG
45721: PUSH
45722: LD_INT 2
45724: NEG
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 0
45732: PUSH
45733: LD_INT 2
45735: NEG
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 1
45743: PUSH
45744: LD_INT 1
45746: NEG
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 2
45754: PUSH
45755: LD_INT 0
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 2
45764: PUSH
45765: LD_INT 1
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 2
45774: PUSH
45775: LD_INT 2
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 1
45784: PUSH
45785: LD_INT 2
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: LD_INT 0
45794: PUSH
45795: LD_INT 2
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 1
45804: NEG
45805: PUSH
45806: LD_INT 1
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: LD_INT 2
45815: NEG
45816: PUSH
45817: LD_INT 0
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 2
45826: NEG
45827: PUSH
45828: LD_INT 1
45830: NEG
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 2
45838: NEG
45839: PUSH
45840: LD_INT 2
45842: NEG
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 2
45850: NEG
45851: PUSH
45852: LD_INT 3
45854: NEG
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 1
45862: NEG
45863: PUSH
45864: LD_INT 3
45866: NEG
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 1
45874: PUSH
45875: LD_INT 2
45877: NEG
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 2
45885: PUSH
45886: LD_INT 1
45888: NEG
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: LIST
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45919: LD_ADDR_VAR 0 24
45923: PUSH
45924: LD_INT 0
45926: PUSH
45927: LD_INT 0
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 0
45936: PUSH
45937: LD_INT 1
45939: NEG
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 1
45947: PUSH
45948: LD_INT 0
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 1
45957: PUSH
45958: LD_INT 1
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 0
45967: PUSH
45968: LD_INT 1
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 1
45977: NEG
45978: PUSH
45979: LD_INT 0
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 1
45988: NEG
45989: PUSH
45990: LD_INT 1
45992: NEG
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 1
46000: NEG
46001: PUSH
46002: LD_INT 2
46004: NEG
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 0
46012: PUSH
46013: LD_INT 2
46015: NEG
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 1
46023: PUSH
46024: LD_INT 1
46026: NEG
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: LD_INT 2
46034: PUSH
46035: LD_INT 0
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 2
46044: PUSH
46045: LD_INT 1
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 2
46054: PUSH
46055: LD_INT 2
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 1
46064: PUSH
46065: LD_INT 2
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 0
46074: PUSH
46075: LD_INT 2
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: LD_INT 1
46084: NEG
46085: PUSH
46086: LD_INT 1
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: LD_INT 2
46095: NEG
46096: PUSH
46097: LD_INT 0
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: PUSH
46104: LD_INT 2
46106: NEG
46107: PUSH
46108: LD_INT 1
46110: NEG
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 2
46118: NEG
46119: PUSH
46120: LD_INT 2
46122: NEG
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: LD_INT 1
46130: PUSH
46131: LD_INT 2
46133: NEG
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 2
46141: PUSH
46142: LD_INT 1
46144: NEG
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 3
46152: PUSH
46153: LD_INT 1
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 3
46162: PUSH
46163: LD_INT 2
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46195: LD_ADDR_VAR 0 25
46199: PUSH
46200: LD_INT 0
46202: PUSH
46203: LD_INT 0
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 0
46212: PUSH
46213: LD_INT 1
46215: NEG
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: PUSH
46221: LD_INT 1
46223: PUSH
46224: LD_INT 0
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: PUSH
46231: LD_INT 1
46233: PUSH
46234: LD_INT 1
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: LD_INT 0
46243: PUSH
46244: LD_INT 1
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 1
46253: NEG
46254: PUSH
46255: LD_INT 0
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 1
46264: NEG
46265: PUSH
46266: LD_INT 1
46268: NEG
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 1
46276: NEG
46277: PUSH
46278: LD_INT 2
46280: NEG
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 0
46288: PUSH
46289: LD_INT 2
46291: NEG
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 1
46299: PUSH
46300: LD_INT 1
46302: NEG
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 2
46310: PUSH
46311: LD_INT 0
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 2
46320: PUSH
46321: LD_INT 1
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 2
46330: PUSH
46331: LD_INT 2
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: PUSH
46338: LD_INT 1
46340: PUSH
46341: LD_INT 2
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PUSH
46348: LD_INT 0
46350: PUSH
46351: LD_INT 2
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 1
46360: NEG
46361: PUSH
46362: LD_INT 1
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 2
46371: NEG
46372: PUSH
46373: LD_INT 0
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 2
46382: NEG
46383: PUSH
46384: LD_INT 1
46386: NEG
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 2
46394: NEG
46395: PUSH
46396: LD_INT 2
46398: NEG
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 3
46406: PUSH
46407: LD_INT 1
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 3
46416: PUSH
46417: LD_INT 2
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 2
46426: PUSH
46427: LD_INT 3
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 1
46436: PUSH
46437: LD_INT 3
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46469: LD_ADDR_VAR 0 26
46473: PUSH
46474: LD_INT 0
46476: PUSH
46477: LD_INT 0
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 0
46486: PUSH
46487: LD_INT 1
46489: NEG
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 1
46497: PUSH
46498: LD_INT 0
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 1
46507: PUSH
46508: LD_INT 1
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 0
46517: PUSH
46518: LD_INT 1
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: LD_INT 1
46527: NEG
46528: PUSH
46529: LD_INT 0
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 1
46538: NEG
46539: PUSH
46540: LD_INT 1
46542: NEG
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 1
46550: NEG
46551: PUSH
46552: LD_INT 2
46554: NEG
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 0
46562: PUSH
46563: LD_INT 2
46565: NEG
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 1
46573: PUSH
46574: LD_INT 1
46576: NEG
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 2
46584: PUSH
46585: LD_INT 0
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 2
46594: PUSH
46595: LD_INT 1
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 2
46604: PUSH
46605: LD_INT 2
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 1
46614: PUSH
46615: LD_INT 2
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 0
46624: PUSH
46625: LD_INT 2
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 1
46634: NEG
46635: PUSH
46636: LD_INT 1
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 2
46645: NEG
46646: PUSH
46647: LD_INT 0
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 2
46656: NEG
46657: PUSH
46658: LD_INT 1
46660: NEG
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 2
46668: NEG
46669: PUSH
46670: LD_INT 2
46672: NEG
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 2
46680: PUSH
46681: LD_INT 3
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 1
46690: PUSH
46691: LD_INT 3
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 1
46700: NEG
46701: PUSH
46702: LD_INT 2
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 2
46711: NEG
46712: PUSH
46713: LD_INT 1
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46745: LD_ADDR_VAR 0 27
46749: PUSH
46750: LD_INT 0
46752: PUSH
46753: LD_INT 0
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PUSH
46760: LD_INT 0
46762: PUSH
46763: LD_INT 1
46765: NEG
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 1
46773: PUSH
46774: LD_INT 0
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 1
46783: PUSH
46784: LD_INT 1
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 0
46793: PUSH
46794: LD_INT 1
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 1
46803: NEG
46804: PUSH
46805: LD_INT 0
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 1
46814: NEG
46815: PUSH
46816: LD_INT 1
46818: NEG
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 1
46826: NEG
46827: PUSH
46828: LD_INT 2
46830: NEG
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 0
46838: PUSH
46839: LD_INT 2
46841: NEG
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 1
46849: PUSH
46850: LD_INT 1
46852: NEG
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 2
46860: PUSH
46861: LD_INT 0
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 2
46870: PUSH
46871: LD_INT 1
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 2
46880: PUSH
46881: LD_INT 2
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 1
46890: PUSH
46891: LD_INT 2
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 0
46900: PUSH
46901: LD_INT 2
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 1
46910: NEG
46911: PUSH
46912: LD_INT 1
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 2
46921: NEG
46922: PUSH
46923: LD_INT 0
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 2
46932: NEG
46933: PUSH
46934: LD_INT 1
46936: NEG
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 2
46944: NEG
46945: PUSH
46946: LD_INT 2
46948: NEG
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 1
46956: NEG
46957: PUSH
46958: LD_INT 2
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 2
46967: NEG
46968: PUSH
46969: LD_INT 1
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 3
46978: NEG
46979: PUSH
46980: LD_INT 1
46982: NEG
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 3
46990: NEG
46991: PUSH
46992: LD_INT 2
46994: NEG
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47025: LD_ADDR_VAR 0 28
47029: PUSH
47030: LD_INT 0
47032: PUSH
47033: LD_INT 0
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 0
47042: PUSH
47043: LD_INT 1
47045: NEG
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 1
47053: PUSH
47054: LD_INT 0
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: LD_INT 1
47063: PUSH
47064: LD_INT 1
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 0
47073: PUSH
47074: LD_INT 1
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 1
47083: NEG
47084: PUSH
47085: LD_INT 0
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 1
47094: NEG
47095: PUSH
47096: LD_INT 1
47098: NEG
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 1
47106: NEG
47107: PUSH
47108: LD_INT 2
47110: NEG
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 0
47118: PUSH
47119: LD_INT 2
47121: NEG
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 1
47129: PUSH
47130: LD_INT 1
47132: NEG
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 2
47140: PUSH
47141: LD_INT 0
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 2
47150: PUSH
47151: LD_INT 1
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 2
47160: PUSH
47161: LD_INT 2
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 1
47170: PUSH
47171: LD_INT 2
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 0
47180: PUSH
47181: LD_INT 2
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 1
47190: NEG
47191: PUSH
47192: LD_INT 1
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 2
47201: NEG
47202: PUSH
47203: LD_INT 0
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 2
47212: NEG
47213: PUSH
47214: LD_INT 1
47216: NEG
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 2
47224: NEG
47225: PUSH
47226: LD_INT 2
47228: NEG
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 2
47236: NEG
47237: PUSH
47238: LD_INT 3
47240: NEG
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 1
47248: NEG
47249: PUSH
47250: LD_INT 3
47252: NEG
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 3
47260: NEG
47261: PUSH
47262: LD_INT 1
47264: NEG
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 3
47272: NEG
47273: PUSH
47274: LD_INT 2
47276: NEG
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: LIST
47306: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47307: LD_ADDR_VAR 0 29
47311: PUSH
47312: LD_INT 0
47314: PUSH
47315: LD_INT 0
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 0
47324: PUSH
47325: LD_INT 1
47327: NEG
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 1
47335: PUSH
47336: LD_INT 0
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 1
47345: PUSH
47346: LD_INT 1
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 0
47355: PUSH
47356: LD_INT 1
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 1
47365: NEG
47366: PUSH
47367: LD_INT 0
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 1
47376: NEG
47377: PUSH
47378: LD_INT 1
47380: NEG
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: LD_INT 1
47388: NEG
47389: PUSH
47390: LD_INT 2
47392: NEG
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 0
47400: PUSH
47401: LD_INT 2
47403: NEG
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 1
47411: PUSH
47412: LD_INT 1
47414: NEG
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 2
47422: PUSH
47423: LD_INT 0
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 2
47432: PUSH
47433: LD_INT 1
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 1
47442: PUSH
47443: LD_INT 2
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 0
47452: PUSH
47453: LD_INT 2
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: LD_INT 1
47462: NEG
47463: PUSH
47464: LD_INT 1
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 2
47473: NEG
47474: PUSH
47475: LD_INT 1
47477: NEG
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 2
47485: NEG
47486: PUSH
47487: LD_INT 2
47489: NEG
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: LD_INT 2
47497: NEG
47498: PUSH
47499: LD_INT 3
47501: NEG
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 2
47509: PUSH
47510: LD_INT 1
47512: NEG
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 3
47520: PUSH
47521: LD_INT 1
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 1
47530: PUSH
47531: LD_INT 3
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 1
47540: NEG
47541: PUSH
47542: LD_INT 2
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 3
47551: NEG
47552: PUSH
47553: LD_INT 2
47555: NEG
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: LIST
47572: LIST
47573: LIST
47574: LIST
47575: LIST
47576: LIST
47577: LIST
47578: LIST
47579: LIST
47580: LIST
47581: LIST
47582: LIST
47583: LIST
47584: LIST
47585: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47586: LD_ADDR_VAR 0 30
47590: PUSH
47591: LD_INT 0
47593: PUSH
47594: LD_INT 0
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 0
47603: PUSH
47604: LD_INT 1
47606: NEG
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 1
47614: PUSH
47615: LD_INT 0
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 1
47624: PUSH
47625: LD_INT 1
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 0
47634: PUSH
47635: LD_INT 1
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 1
47644: NEG
47645: PUSH
47646: LD_INT 0
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 1
47655: NEG
47656: PUSH
47657: LD_INT 1
47659: NEG
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 1
47667: NEG
47668: PUSH
47669: LD_INT 2
47671: NEG
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 0
47679: PUSH
47680: LD_INT 2
47682: NEG
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 1
47690: PUSH
47691: LD_INT 1
47693: NEG
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 2
47701: PUSH
47702: LD_INT 0
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 2
47711: PUSH
47712: LD_INT 1
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: LD_INT 2
47721: PUSH
47722: LD_INT 2
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: LD_INT 1
47731: PUSH
47732: LD_INT 2
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 1
47741: NEG
47742: PUSH
47743: LD_INT 1
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 2
47752: NEG
47753: PUSH
47754: LD_INT 0
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 2
47763: NEG
47764: PUSH
47765: LD_INT 1
47767: NEG
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: LD_INT 1
47775: NEG
47776: PUSH
47777: LD_INT 3
47779: NEG
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 1
47787: PUSH
47788: LD_INT 2
47790: NEG
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 3
47798: PUSH
47799: LD_INT 2
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 2
47808: PUSH
47809: LD_INT 3
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 2
47818: NEG
47819: PUSH
47820: LD_INT 1
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 3
47829: NEG
47830: PUSH
47831: LD_INT 1
47833: NEG
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47864: LD_ADDR_VAR 0 31
47868: PUSH
47869: LD_INT 0
47871: PUSH
47872: LD_INT 0
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 0
47881: PUSH
47882: LD_INT 1
47884: NEG
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 1
47892: PUSH
47893: LD_INT 0
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 1
47902: PUSH
47903: LD_INT 1
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 0
47912: PUSH
47913: LD_INT 1
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 1
47922: NEG
47923: PUSH
47924: LD_INT 0
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 1
47933: NEG
47934: PUSH
47935: LD_INT 1
47937: NEG
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 1
47945: NEG
47946: PUSH
47947: LD_INT 2
47949: NEG
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 1
47957: PUSH
47958: LD_INT 1
47960: NEG
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 2
47968: PUSH
47969: LD_INT 0
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 2
47978: PUSH
47979: LD_INT 1
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 2
47988: PUSH
47989: LD_INT 2
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 1
47998: PUSH
47999: LD_INT 2
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 0
48008: PUSH
48009: LD_INT 2
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 1
48018: NEG
48019: PUSH
48020: LD_INT 1
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 2
48029: NEG
48030: PUSH
48031: LD_INT 1
48033: NEG
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 2
48041: NEG
48042: PUSH
48043: LD_INT 2
48045: NEG
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PUSH
48051: LD_INT 2
48053: NEG
48054: PUSH
48055: LD_INT 3
48057: NEG
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 2
48065: PUSH
48066: LD_INT 1
48068: NEG
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 3
48076: PUSH
48077: LD_INT 1
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 1
48086: PUSH
48087: LD_INT 3
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: LD_INT 1
48096: NEG
48097: PUSH
48098: LD_INT 2
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 3
48107: NEG
48108: PUSH
48109: LD_INT 2
48111: NEG
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48142: LD_ADDR_VAR 0 32
48146: PUSH
48147: LD_INT 0
48149: PUSH
48150: LD_INT 0
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 0
48159: PUSH
48160: LD_INT 1
48162: NEG
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 1
48170: PUSH
48171: LD_INT 0
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 1
48180: PUSH
48181: LD_INT 1
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 0
48190: PUSH
48191: LD_INT 1
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 1
48200: NEG
48201: PUSH
48202: LD_INT 0
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 1
48211: NEG
48212: PUSH
48213: LD_INT 1
48215: NEG
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 1
48223: NEG
48224: PUSH
48225: LD_INT 2
48227: NEG
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 0
48235: PUSH
48236: LD_INT 2
48238: NEG
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: LD_INT 1
48246: PUSH
48247: LD_INT 1
48249: NEG
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: LD_INT 2
48257: PUSH
48258: LD_INT 1
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: LD_INT 2
48267: PUSH
48268: LD_INT 2
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: LD_INT 1
48277: PUSH
48278: LD_INT 2
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: LD_INT 0
48287: PUSH
48288: LD_INT 2
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 1
48297: NEG
48298: PUSH
48299: LD_INT 1
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 2
48308: NEG
48309: PUSH
48310: LD_INT 0
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 2
48319: NEG
48320: PUSH
48321: LD_INT 1
48323: NEG
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: LD_INT 1
48331: NEG
48332: PUSH
48333: LD_INT 3
48335: NEG
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: PUSH
48341: LD_INT 1
48343: PUSH
48344: LD_INT 2
48346: NEG
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 3
48354: PUSH
48355: LD_INT 2
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 2
48364: PUSH
48365: LD_INT 3
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 2
48374: NEG
48375: PUSH
48376: LD_INT 1
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 3
48385: NEG
48386: PUSH
48387: LD_INT 1
48389: NEG
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48420: LD_ADDR_VAR 0 33
48424: PUSH
48425: LD_INT 0
48427: PUSH
48428: LD_INT 0
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 0
48437: PUSH
48438: LD_INT 1
48440: NEG
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 1
48448: PUSH
48449: LD_INT 0
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: LD_INT 1
48458: PUSH
48459: LD_INT 1
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 0
48468: PUSH
48469: LD_INT 1
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 1
48478: NEG
48479: PUSH
48480: LD_INT 0
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 1
48489: NEG
48490: PUSH
48491: LD_INT 1
48493: NEG
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 1
48501: NEG
48502: PUSH
48503: LD_INT 2
48505: NEG
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 1
48513: PUSH
48514: LD_INT 1
48516: NEG
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 2
48524: PUSH
48525: LD_INT 0
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 2
48534: PUSH
48535: LD_INT 1
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 1
48544: PUSH
48545: LD_INT 2
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 0
48554: PUSH
48555: LD_INT 2
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 1
48564: NEG
48565: PUSH
48566: LD_INT 1
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 2
48575: NEG
48576: PUSH
48577: LD_INT 0
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 2
48586: NEG
48587: PUSH
48588: LD_INT 1
48590: NEG
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: LD_INT 2
48598: NEG
48599: PUSH
48600: LD_INT 2
48602: NEG
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: LD_INT 2
48610: NEG
48611: PUSH
48612: LD_INT 3
48614: NEG
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 2
48622: PUSH
48623: LD_INT 1
48625: NEG
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 3
48633: PUSH
48634: LD_INT 1
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 1
48643: PUSH
48644: LD_INT 3
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 1
48653: NEG
48654: PUSH
48655: LD_INT 2
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 3
48664: NEG
48665: PUSH
48666: LD_INT 2
48668: NEG
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48699: LD_ADDR_VAR 0 34
48703: PUSH
48704: LD_INT 0
48706: PUSH
48707: LD_INT 0
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 0
48716: PUSH
48717: LD_INT 1
48719: NEG
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 1
48727: PUSH
48728: LD_INT 0
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: LD_INT 1
48737: PUSH
48738: LD_INT 1
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 0
48747: PUSH
48748: LD_INT 1
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 1
48757: NEG
48758: PUSH
48759: LD_INT 0
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 1
48768: NEG
48769: PUSH
48770: LD_INT 1
48772: NEG
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: PUSH
48778: LD_INT 1
48780: NEG
48781: PUSH
48782: LD_INT 2
48784: NEG
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: LD_INT 0
48792: PUSH
48793: LD_INT 2
48795: NEG
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: LD_INT 1
48803: PUSH
48804: LD_INT 1
48806: NEG
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 2
48814: PUSH
48815: LD_INT 1
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 2
48824: PUSH
48825: LD_INT 2
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 1
48834: PUSH
48835: LD_INT 2
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 1
48844: NEG
48845: PUSH
48846: LD_INT 1
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 2
48855: NEG
48856: PUSH
48857: LD_INT 0
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 2
48866: NEG
48867: PUSH
48868: LD_INT 1
48870: NEG
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 2
48878: NEG
48879: PUSH
48880: LD_INT 2
48882: NEG
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 1
48890: NEG
48891: PUSH
48892: LD_INT 3
48894: NEG
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 1
48902: PUSH
48903: LD_INT 2
48905: NEG
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 3
48913: PUSH
48914: LD_INT 2
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 2
48923: PUSH
48924: LD_INT 3
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 2
48933: NEG
48934: PUSH
48935: LD_INT 1
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 3
48944: NEG
48945: PUSH
48946: LD_INT 1
48948: NEG
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: LIST
48978: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48979: LD_ADDR_VAR 0 35
48983: PUSH
48984: LD_INT 0
48986: PUSH
48987: LD_INT 0
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: PUSH
48994: LD_INT 0
48996: PUSH
48997: LD_INT 1
48999: NEG
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 1
49007: PUSH
49008: LD_INT 0
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 1
49017: PUSH
49018: LD_INT 1
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 0
49027: PUSH
49028: LD_INT 1
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: PUSH
49035: LD_INT 1
49037: NEG
49038: PUSH
49039: LD_INT 0
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 1
49048: NEG
49049: PUSH
49050: LD_INT 1
49052: NEG
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 2
49060: PUSH
49061: LD_INT 1
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 2
49070: NEG
49071: PUSH
49072: LD_INT 1
49074: NEG
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49091: LD_ADDR_VAR 0 36
49095: PUSH
49096: LD_INT 0
49098: PUSH
49099: LD_INT 0
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 0
49108: PUSH
49109: LD_INT 1
49111: NEG
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 1
49119: PUSH
49120: LD_INT 0
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 1
49129: PUSH
49130: LD_INT 1
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 0
49139: PUSH
49140: LD_INT 1
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: LD_INT 1
49149: NEG
49150: PUSH
49151: LD_INT 0
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: PUSH
49158: LD_INT 1
49160: NEG
49161: PUSH
49162: LD_INT 1
49164: NEG
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 1
49172: NEG
49173: PUSH
49174: LD_INT 2
49176: NEG
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 1
49184: PUSH
49185: LD_INT 2
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: LIST
49196: LIST
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: LIST
49202: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49203: LD_ADDR_VAR 0 37
49207: PUSH
49208: LD_INT 0
49210: PUSH
49211: LD_INT 0
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 0
49220: PUSH
49221: LD_INT 1
49223: NEG
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 1
49231: PUSH
49232: LD_INT 0
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 1
49241: PUSH
49242: LD_INT 1
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 0
49251: PUSH
49252: LD_INT 1
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: LD_INT 1
49261: NEG
49262: PUSH
49263: LD_INT 0
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: LD_INT 1
49272: NEG
49273: PUSH
49274: LD_INT 1
49276: NEG
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 1
49284: PUSH
49285: LD_INT 1
49287: NEG
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 1
49295: NEG
49296: PUSH
49297: LD_INT 1
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49315: LD_ADDR_VAR 0 38
49319: PUSH
49320: LD_INT 0
49322: PUSH
49323: LD_INT 0
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 0
49332: PUSH
49333: LD_INT 1
49335: NEG
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 1
49343: PUSH
49344: LD_INT 0
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 1
49353: PUSH
49354: LD_INT 1
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 0
49363: PUSH
49364: LD_INT 1
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 1
49373: NEG
49374: PUSH
49375: LD_INT 0
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 1
49384: NEG
49385: PUSH
49386: LD_INT 1
49388: NEG
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 2
49396: PUSH
49397: LD_INT 1
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 2
49406: NEG
49407: PUSH
49408: LD_INT 1
49410: NEG
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49427: LD_ADDR_VAR 0 39
49431: PUSH
49432: LD_INT 0
49434: PUSH
49435: LD_INT 0
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 0
49444: PUSH
49445: LD_INT 1
49447: NEG
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 1
49455: PUSH
49456: LD_INT 0
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: LD_INT 1
49465: PUSH
49466: LD_INT 1
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: PUSH
49473: LD_INT 0
49475: PUSH
49476: LD_INT 1
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: PUSH
49483: LD_INT 1
49485: NEG
49486: PUSH
49487: LD_INT 0
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: LD_INT 1
49496: NEG
49497: PUSH
49498: LD_INT 1
49500: NEG
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 1
49508: NEG
49509: PUSH
49510: LD_INT 2
49512: NEG
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 1
49520: PUSH
49521: LD_INT 2
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49539: LD_ADDR_VAR 0 40
49543: PUSH
49544: LD_INT 0
49546: PUSH
49547: LD_INT 0
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 0
49556: PUSH
49557: LD_INT 1
49559: NEG
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 1
49567: PUSH
49568: LD_INT 0
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 1
49577: PUSH
49578: LD_INT 1
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: LD_INT 0
49587: PUSH
49588: LD_INT 1
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 1
49597: NEG
49598: PUSH
49599: LD_INT 0
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 1
49608: NEG
49609: PUSH
49610: LD_INT 1
49612: NEG
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 1
49620: PUSH
49621: LD_INT 1
49623: NEG
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 1
49631: NEG
49632: PUSH
49633: LD_INT 1
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49651: LD_ADDR_VAR 0 41
49655: PUSH
49656: LD_INT 0
49658: PUSH
49659: LD_INT 0
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 0
49668: PUSH
49669: LD_INT 1
49671: NEG
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 1
49679: PUSH
49680: LD_INT 0
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 1
49689: PUSH
49690: LD_INT 1
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 0
49699: PUSH
49700: LD_INT 1
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 1
49709: NEG
49710: PUSH
49711: LD_INT 0
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 1
49720: NEG
49721: PUSH
49722: LD_INT 1
49724: NEG
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 1
49732: NEG
49733: PUSH
49734: LD_INT 2
49736: NEG
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 1
49744: PUSH
49745: LD_INT 1
49747: NEG
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 2
49755: PUSH
49756: LD_INT 0
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 2
49765: PUSH
49766: LD_INT 1
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 2
49775: PUSH
49776: LD_INT 2
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 1
49785: PUSH
49786: LD_INT 2
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: LD_INT 1
49795: NEG
49796: PUSH
49797: LD_INT 1
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_INT 2
49806: NEG
49807: PUSH
49808: LD_INT 0
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 2
49817: NEG
49818: PUSH
49819: LD_INT 1
49821: NEG
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 2
49829: NEG
49830: PUSH
49831: LD_INT 2
49833: NEG
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 2
49841: NEG
49842: PUSH
49843: LD_INT 3
49845: NEG
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 2
49853: PUSH
49854: LD_INT 1
49856: NEG
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 3
49864: PUSH
49865: LD_INT 0
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 3
49874: PUSH
49875: LD_INT 1
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 3
49884: PUSH
49885: LD_INT 2
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 3
49894: PUSH
49895: LD_INT 3
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 2
49904: PUSH
49905: LD_INT 3
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 2
49914: NEG
49915: PUSH
49916: LD_INT 1
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 3
49925: NEG
49926: PUSH
49927: LD_INT 0
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_INT 3
49936: NEG
49937: PUSH
49938: LD_INT 1
49940: NEG
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 3
49948: NEG
49949: PUSH
49950: LD_INT 2
49952: NEG
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 3
49960: NEG
49961: PUSH
49962: LD_INT 3
49964: NEG
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50001: LD_ADDR_VAR 0 42
50005: PUSH
50006: LD_INT 0
50008: PUSH
50009: LD_INT 0
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 0
50018: PUSH
50019: LD_INT 1
50021: NEG
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 1
50029: PUSH
50030: LD_INT 0
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 1
50039: PUSH
50040: LD_INT 1
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: LD_INT 0
50049: PUSH
50050: LD_INT 1
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 1
50059: NEG
50060: PUSH
50061: LD_INT 0
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 1
50070: NEG
50071: PUSH
50072: LD_INT 1
50074: NEG
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 1
50082: NEG
50083: PUSH
50084: LD_INT 2
50086: NEG
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 0
50094: PUSH
50095: LD_INT 2
50097: NEG
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 1
50105: PUSH
50106: LD_INT 1
50108: NEG
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 2
50116: PUSH
50117: LD_INT 1
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 2
50126: PUSH
50127: LD_INT 2
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 1
50136: PUSH
50137: LD_INT 2
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 0
50146: PUSH
50147: LD_INT 2
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 1
50156: NEG
50157: PUSH
50158: LD_INT 1
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 2
50167: NEG
50168: PUSH
50169: LD_INT 1
50171: NEG
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 2
50179: NEG
50180: PUSH
50181: LD_INT 2
50183: NEG
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 2
50191: NEG
50192: PUSH
50193: LD_INT 3
50195: NEG
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 1
50203: NEG
50204: PUSH
50205: LD_INT 3
50207: NEG
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 0
50215: PUSH
50216: LD_INT 3
50218: NEG
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 1
50226: PUSH
50227: LD_INT 2
50229: NEG
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 3
50237: PUSH
50238: LD_INT 2
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 3
50247: PUSH
50248: LD_INT 3
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 2
50257: PUSH
50258: LD_INT 3
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 1
50267: PUSH
50268: LD_INT 3
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 0
50277: PUSH
50278: LD_INT 3
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: LD_INT 1
50287: NEG
50288: PUSH
50289: LD_INT 2
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: PUSH
50296: LD_INT 3
50298: NEG
50299: PUSH
50300: LD_INT 2
50302: NEG
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: LD_INT 3
50310: NEG
50311: PUSH
50312: LD_INT 3
50314: NEG
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50351: LD_ADDR_VAR 0 43
50355: PUSH
50356: LD_INT 0
50358: PUSH
50359: LD_INT 0
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 0
50368: PUSH
50369: LD_INT 1
50371: NEG
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 1
50379: PUSH
50380: LD_INT 0
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 1
50389: PUSH
50390: LD_INT 1
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 0
50399: PUSH
50400: LD_INT 1
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 1
50409: NEG
50410: PUSH
50411: LD_INT 0
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 1
50420: NEG
50421: PUSH
50422: LD_INT 1
50424: NEG
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 1
50432: NEG
50433: PUSH
50434: LD_INT 2
50436: NEG
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 0
50444: PUSH
50445: LD_INT 2
50447: NEG
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 1
50455: PUSH
50456: LD_INT 1
50458: NEG
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 2
50466: PUSH
50467: LD_INT 0
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 2
50476: PUSH
50477: LD_INT 1
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 1
50486: PUSH
50487: LD_INT 2
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 0
50496: PUSH
50497: LD_INT 2
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: PUSH
50504: LD_INT 1
50506: NEG
50507: PUSH
50508: LD_INT 1
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 2
50517: NEG
50518: PUSH
50519: LD_INT 0
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: LD_INT 2
50528: NEG
50529: PUSH
50530: LD_INT 1
50532: NEG
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 1
50540: NEG
50541: PUSH
50542: LD_INT 3
50544: NEG
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 0
50552: PUSH
50553: LD_INT 3
50555: NEG
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 1
50563: PUSH
50564: LD_INT 2
50566: NEG
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 2
50574: PUSH
50575: LD_INT 1
50577: NEG
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 3
50585: PUSH
50586: LD_INT 0
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 3
50595: PUSH
50596: LD_INT 1
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 1
50605: PUSH
50606: LD_INT 3
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 0
50615: PUSH
50616: LD_INT 3
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 1
50625: NEG
50626: PUSH
50627: LD_INT 2
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 2
50636: NEG
50637: PUSH
50638: LD_INT 1
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 3
50647: NEG
50648: PUSH
50649: LD_INT 0
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 3
50658: NEG
50659: PUSH
50660: LD_INT 1
50662: NEG
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50699: LD_ADDR_VAR 0 44
50703: PUSH
50704: LD_INT 0
50706: PUSH
50707: LD_INT 0
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 0
50716: PUSH
50717: LD_INT 1
50719: NEG
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: LD_INT 1
50727: PUSH
50728: LD_INT 0
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 1
50737: PUSH
50738: LD_INT 1
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 0
50747: PUSH
50748: LD_INT 1
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 1
50757: NEG
50758: PUSH
50759: LD_INT 0
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 1
50768: NEG
50769: PUSH
50770: LD_INT 1
50772: NEG
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 1
50780: NEG
50781: PUSH
50782: LD_INT 2
50784: NEG
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 1
50792: PUSH
50793: LD_INT 1
50795: NEG
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 2
50803: PUSH
50804: LD_INT 0
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 2
50813: PUSH
50814: LD_INT 1
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 2
50823: PUSH
50824: LD_INT 2
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: LD_INT 1
50833: PUSH
50834: LD_INT 2
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: LD_INT 1
50843: NEG
50844: PUSH
50845: LD_INT 1
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 2
50854: NEG
50855: PUSH
50856: LD_INT 0
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 2
50865: NEG
50866: PUSH
50867: LD_INT 1
50869: NEG
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 2
50877: NEG
50878: PUSH
50879: LD_INT 2
50881: NEG
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 2
50889: NEG
50890: PUSH
50891: LD_INT 3
50893: NEG
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 2
50901: PUSH
50902: LD_INT 1
50904: NEG
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 3
50912: PUSH
50913: LD_INT 0
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 3
50922: PUSH
50923: LD_INT 1
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 3
50932: PUSH
50933: LD_INT 2
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 3
50942: PUSH
50943: LD_INT 3
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 2
50952: PUSH
50953: LD_INT 3
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 2
50962: NEG
50963: PUSH
50964: LD_INT 1
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 3
50973: NEG
50974: PUSH
50975: LD_INT 0
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 3
50984: NEG
50985: PUSH
50986: LD_INT 1
50988: NEG
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 3
50996: NEG
50997: PUSH
50998: LD_INT 2
51000: NEG
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 3
51008: NEG
51009: PUSH
51010: LD_INT 3
51012: NEG
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51049: LD_ADDR_VAR 0 45
51053: PUSH
51054: LD_INT 0
51056: PUSH
51057: LD_INT 0
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 0
51066: PUSH
51067: LD_INT 1
51069: NEG
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 1
51077: PUSH
51078: LD_INT 0
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 1
51087: PUSH
51088: LD_INT 1
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 0
51097: PUSH
51098: LD_INT 1
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 1
51107: NEG
51108: PUSH
51109: LD_INT 0
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 1
51118: NEG
51119: PUSH
51120: LD_INT 1
51122: NEG
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 1
51130: NEG
51131: PUSH
51132: LD_INT 2
51134: NEG
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 0
51142: PUSH
51143: LD_INT 2
51145: NEG
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 1
51153: PUSH
51154: LD_INT 1
51156: NEG
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 2
51164: PUSH
51165: LD_INT 1
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 2
51174: PUSH
51175: LD_INT 2
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 1
51184: PUSH
51185: LD_INT 2
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 0
51194: PUSH
51195: LD_INT 2
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: LD_INT 1
51204: NEG
51205: PUSH
51206: LD_INT 1
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 2
51215: NEG
51216: PUSH
51217: LD_INT 1
51219: NEG
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 2
51227: NEG
51228: PUSH
51229: LD_INT 2
51231: NEG
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 2
51239: NEG
51240: PUSH
51241: LD_INT 3
51243: NEG
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 1
51251: NEG
51252: PUSH
51253: LD_INT 3
51255: NEG
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 0
51263: PUSH
51264: LD_INT 3
51266: NEG
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 1
51274: PUSH
51275: LD_INT 2
51277: NEG
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 3
51285: PUSH
51286: LD_INT 2
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 3
51295: PUSH
51296: LD_INT 3
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 2
51305: PUSH
51306: LD_INT 3
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 1
51315: PUSH
51316: LD_INT 3
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 0
51325: PUSH
51326: LD_INT 3
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 1
51335: NEG
51336: PUSH
51337: LD_INT 2
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: LD_INT 3
51346: NEG
51347: PUSH
51348: LD_INT 2
51350: NEG
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 3
51358: NEG
51359: PUSH
51360: LD_INT 3
51362: NEG
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51399: LD_ADDR_VAR 0 46
51403: PUSH
51404: LD_INT 0
51406: PUSH
51407: LD_INT 0
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 0
51416: PUSH
51417: LD_INT 1
51419: NEG
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 1
51427: PUSH
51428: LD_INT 0
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 1
51437: PUSH
51438: LD_INT 1
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 0
51447: PUSH
51448: LD_INT 1
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 1
51457: NEG
51458: PUSH
51459: LD_INT 0
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 1
51468: NEG
51469: PUSH
51470: LD_INT 1
51472: NEG
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: LD_INT 1
51480: NEG
51481: PUSH
51482: LD_INT 2
51484: NEG
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 0
51492: PUSH
51493: LD_INT 2
51495: NEG
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 1
51503: PUSH
51504: LD_INT 1
51506: NEG
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: LD_INT 2
51514: PUSH
51515: LD_INT 0
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 2
51524: PUSH
51525: LD_INT 1
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 1
51534: PUSH
51535: LD_INT 2
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 0
51544: PUSH
51545: LD_INT 2
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 1
51554: NEG
51555: PUSH
51556: LD_INT 1
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 2
51565: NEG
51566: PUSH
51567: LD_INT 0
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 2
51576: NEG
51577: PUSH
51578: LD_INT 1
51580: NEG
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 1
51588: NEG
51589: PUSH
51590: LD_INT 3
51592: NEG
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 0
51600: PUSH
51601: LD_INT 3
51603: NEG
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 1
51611: PUSH
51612: LD_INT 2
51614: NEG
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 2
51622: PUSH
51623: LD_INT 1
51625: NEG
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 3
51633: PUSH
51634: LD_INT 0
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 3
51643: PUSH
51644: LD_INT 1
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 1
51653: PUSH
51654: LD_INT 3
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 0
51663: PUSH
51664: LD_INT 3
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: LD_INT 1
51673: NEG
51674: PUSH
51675: LD_INT 2
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 2
51684: NEG
51685: PUSH
51686: LD_INT 1
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 3
51695: NEG
51696: PUSH
51697: LD_INT 0
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 3
51706: NEG
51707: PUSH
51708: LD_INT 1
51710: NEG
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51747: LD_ADDR_VAR 0 47
51751: PUSH
51752: LD_INT 0
51754: PUSH
51755: LD_INT 0
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 0
51764: PUSH
51765: LD_INT 1
51767: NEG
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 1
51775: PUSH
51776: LD_INT 0
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 1
51785: PUSH
51786: LD_INT 1
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 0
51795: PUSH
51796: LD_INT 1
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 1
51805: NEG
51806: PUSH
51807: LD_INT 0
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 1
51816: NEG
51817: PUSH
51818: LD_INT 1
51820: NEG
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 1
51828: NEG
51829: PUSH
51830: LD_INT 2
51832: NEG
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 0
51840: PUSH
51841: LD_INT 2
51843: NEG
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 1
51851: PUSH
51852: LD_INT 1
51854: NEG
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 2
51862: NEG
51863: PUSH
51864: LD_INT 1
51866: NEG
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 2
51874: NEG
51875: PUSH
51876: LD_INT 2
51878: NEG
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51898: LD_ADDR_VAR 0 48
51902: PUSH
51903: LD_INT 0
51905: PUSH
51906: LD_INT 0
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 0
51915: PUSH
51916: LD_INT 1
51918: NEG
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 1
51926: PUSH
51927: LD_INT 0
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 1
51936: PUSH
51937: LD_INT 1
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 0
51946: PUSH
51947: LD_INT 1
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: LD_INT 1
51956: NEG
51957: PUSH
51958: LD_INT 0
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 1
51967: NEG
51968: PUSH
51969: LD_INT 1
51971: NEG
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 1
51979: NEG
51980: PUSH
51981: LD_INT 2
51983: NEG
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 0
51991: PUSH
51992: LD_INT 2
51994: NEG
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 1
52002: PUSH
52003: LD_INT 1
52005: NEG
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 2
52013: PUSH
52014: LD_INT 0
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 2
52023: PUSH
52024: LD_INT 1
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52045: LD_ADDR_VAR 0 49
52049: PUSH
52050: LD_INT 0
52052: PUSH
52053: LD_INT 0
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 0
52062: PUSH
52063: LD_INT 1
52065: NEG
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 1
52073: PUSH
52074: LD_INT 0
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: LD_INT 1
52083: PUSH
52084: LD_INT 1
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 0
52093: PUSH
52094: LD_INT 1
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: PUSH
52101: LD_INT 1
52103: NEG
52104: PUSH
52105: LD_INT 0
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 1
52114: NEG
52115: PUSH
52116: LD_INT 1
52118: NEG
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 1
52126: PUSH
52127: LD_INT 1
52129: NEG
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 2
52137: PUSH
52138: LD_INT 0
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 2
52147: PUSH
52148: LD_INT 1
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 2
52157: PUSH
52158: LD_INT 2
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 1
52167: PUSH
52168: LD_INT 2
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52189: LD_ADDR_VAR 0 50
52193: PUSH
52194: LD_INT 0
52196: PUSH
52197: LD_INT 0
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 0
52206: PUSH
52207: LD_INT 1
52209: NEG
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 1
52217: PUSH
52218: LD_INT 0
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 1
52227: PUSH
52228: LD_INT 1
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 0
52237: PUSH
52238: LD_INT 1
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 1
52247: NEG
52248: PUSH
52249: LD_INT 0
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 1
52258: NEG
52259: PUSH
52260: LD_INT 1
52262: NEG
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 2
52270: PUSH
52271: LD_INT 1
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 2
52280: PUSH
52281: LD_INT 2
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 1
52290: PUSH
52291: LD_INT 2
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 0
52300: PUSH
52301: LD_INT 2
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: LD_INT 1
52310: NEG
52311: PUSH
52312: LD_INT 1
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52333: LD_ADDR_VAR 0 51
52337: PUSH
52338: LD_INT 0
52340: PUSH
52341: LD_INT 0
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 0
52350: PUSH
52351: LD_INT 1
52353: NEG
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 1
52361: PUSH
52362: LD_INT 0
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 1
52371: PUSH
52372: LD_INT 1
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 0
52381: PUSH
52382: LD_INT 1
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 1
52391: NEG
52392: PUSH
52393: LD_INT 0
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: LD_INT 1
52402: NEG
52403: PUSH
52404: LD_INT 1
52406: NEG
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 1
52414: PUSH
52415: LD_INT 2
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 0
52424: PUSH
52425: LD_INT 2
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: LD_INT 1
52434: NEG
52435: PUSH
52436: LD_INT 1
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 2
52445: NEG
52446: PUSH
52447: LD_INT 0
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 2
52456: NEG
52457: PUSH
52458: LD_INT 1
52460: NEG
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52480: LD_ADDR_VAR 0 52
52484: PUSH
52485: LD_INT 0
52487: PUSH
52488: LD_INT 0
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 0
52497: PUSH
52498: LD_INT 1
52500: NEG
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 1
52508: PUSH
52509: LD_INT 0
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 1
52518: PUSH
52519: LD_INT 1
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 0
52528: PUSH
52529: LD_INT 1
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 1
52538: NEG
52539: PUSH
52540: LD_INT 0
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 1
52549: NEG
52550: PUSH
52551: LD_INT 1
52553: NEG
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 1
52561: NEG
52562: PUSH
52563: LD_INT 2
52565: NEG
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 1
52573: NEG
52574: PUSH
52575: LD_INT 1
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 2
52584: NEG
52585: PUSH
52586: LD_INT 0
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 2
52595: NEG
52596: PUSH
52597: LD_INT 1
52599: NEG
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 2
52607: NEG
52608: PUSH
52609: LD_INT 2
52611: NEG
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52631: LD_ADDR_VAR 0 53
52635: PUSH
52636: LD_INT 0
52638: PUSH
52639: LD_INT 0
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 0
52648: PUSH
52649: LD_INT 1
52651: NEG
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 1
52659: PUSH
52660: LD_INT 0
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: LD_INT 1
52669: PUSH
52670: LD_INT 1
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 0
52679: PUSH
52680: LD_INT 1
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 1
52689: NEG
52690: PUSH
52691: LD_INT 0
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 1
52700: NEG
52701: PUSH
52702: LD_INT 1
52704: NEG
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 1
52712: NEG
52713: PUSH
52714: LD_INT 2
52716: NEG
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 0
52724: PUSH
52725: LD_INT 2
52727: NEG
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 1
52735: PUSH
52736: LD_INT 1
52738: NEG
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: LD_INT 2
52746: PUSH
52747: LD_INT 0
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 2
52756: PUSH
52757: LD_INT 1
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 2
52766: PUSH
52767: LD_INT 2
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 1
52776: PUSH
52777: LD_INT 2
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 0
52786: PUSH
52787: LD_INT 2
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 1
52796: NEG
52797: PUSH
52798: LD_INT 1
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 2
52807: NEG
52808: PUSH
52809: LD_INT 0
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 2
52818: NEG
52819: PUSH
52820: LD_INT 1
52822: NEG
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 2
52830: NEG
52831: PUSH
52832: LD_INT 2
52834: NEG
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52861: LD_ADDR_VAR 0 54
52865: PUSH
52866: LD_INT 0
52868: PUSH
52869: LD_INT 0
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 0
52878: PUSH
52879: LD_INT 1
52881: NEG
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 1
52889: PUSH
52890: LD_INT 0
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 1
52899: PUSH
52900: LD_INT 1
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 0
52909: PUSH
52910: LD_INT 1
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 1
52919: NEG
52920: PUSH
52921: LD_INT 0
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 1
52930: NEG
52931: PUSH
52932: LD_INT 1
52934: NEG
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 1
52942: NEG
52943: PUSH
52944: LD_INT 2
52946: NEG
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 0
52954: PUSH
52955: LD_INT 2
52957: NEG
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 1
52965: PUSH
52966: LD_INT 1
52968: NEG
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 2
52976: PUSH
52977: LD_INT 0
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 2
52986: PUSH
52987: LD_INT 1
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 2
52996: PUSH
52997: LD_INT 2
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 1
53006: PUSH
53007: LD_INT 2
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 0
53016: PUSH
53017: LD_INT 2
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 1
53026: NEG
53027: PUSH
53028: LD_INT 1
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 2
53037: NEG
53038: PUSH
53039: LD_INT 0
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 2
53048: NEG
53049: PUSH
53050: LD_INT 1
53052: NEG
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 2
53060: NEG
53061: PUSH
53062: LD_INT 2
53064: NEG
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: LIST
53080: LIST
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53091: LD_ADDR_VAR 0 55
53095: PUSH
53096: LD_INT 0
53098: PUSH
53099: LD_INT 0
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 0
53108: PUSH
53109: LD_INT 1
53111: NEG
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 1
53119: PUSH
53120: LD_INT 0
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: LD_INT 1
53129: PUSH
53130: LD_INT 1
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: LD_INT 0
53139: PUSH
53140: LD_INT 1
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: LD_INT 1
53149: NEG
53150: PUSH
53151: LD_INT 0
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 1
53160: NEG
53161: PUSH
53162: LD_INT 1
53164: NEG
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 1
53172: NEG
53173: PUSH
53174: LD_INT 2
53176: NEG
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: LD_INT 0
53184: PUSH
53185: LD_INT 2
53187: NEG
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 1
53195: PUSH
53196: LD_INT 1
53198: NEG
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 2
53206: PUSH
53207: LD_INT 0
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 2
53216: PUSH
53217: LD_INT 1
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 2
53226: PUSH
53227: LD_INT 2
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 1
53236: PUSH
53237: LD_INT 2
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 0
53246: PUSH
53247: LD_INT 2
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: PUSH
53254: LD_INT 1
53256: NEG
53257: PUSH
53258: LD_INT 1
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 2
53267: NEG
53268: PUSH
53269: LD_INT 0
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: LD_INT 2
53278: NEG
53279: PUSH
53280: LD_INT 1
53282: NEG
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 2
53290: NEG
53291: PUSH
53292: LD_INT 2
53294: NEG
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53321: LD_ADDR_VAR 0 56
53325: PUSH
53326: LD_INT 0
53328: PUSH
53329: LD_INT 0
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 0
53338: PUSH
53339: LD_INT 1
53341: NEG
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 1
53349: PUSH
53350: LD_INT 0
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 1
53359: PUSH
53360: LD_INT 1
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 0
53369: PUSH
53370: LD_INT 1
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 1
53379: NEG
53380: PUSH
53381: LD_INT 0
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 1
53390: NEG
53391: PUSH
53392: LD_INT 1
53394: NEG
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 1
53402: NEG
53403: PUSH
53404: LD_INT 2
53406: NEG
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 0
53414: PUSH
53415: LD_INT 2
53417: NEG
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 1
53425: PUSH
53426: LD_INT 1
53428: NEG
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 2
53436: PUSH
53437: LD_INT 0
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 2
53446: PUSH
53447: LD_INT 1
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 2
53456: PUSH
53457: LD_INT 2
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 1
53466: PUSH
53467: LD_INT 2
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 0
53476: PUSH
53477: LD_INT 2
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 1
53486: NEG
53487: PUSH
53488: LD_INT 1
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 2
53497: NEG
53498: PUSH
53499: LD_INT 0
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 2
53508: NEG
53509: PUSH
53510: LD_INT 1
53512: NEG
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 2
53520: NEG
53521: PUSH
53522: LD_INT 2
53524: NEG
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53551: LD_ADDR_VAR 0 57
53555: PUSH
53556: LD_INT 0
53558: PUSH
53559: LD_INT 0
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 0
53568: PUSH
53569: LD_INT 1
53571: NEG
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 1
53579: PUSH
53580: LD_INT 0
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 1
53589: PUSH
53590: LD_INT 1
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 0
53599: PUSH
53600: LD_INT 1
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 1
53609: NEG
53610: PUSH
53611: LD_INT 0
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 1
53620: NEG
53621: PUSH
53622: LD_INT 1
53624: NEG
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: LD_INT 1
53632: NEG
53633: PUSH
53634: LD_INT 2
53636: NEG
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 0
53644: PUSH
53645: LD_INT 2
53647: NEG
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 1
53655: PUSH
53656: LD_INT 1
53658: NEG
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 2
53666: PUSH
53667: LD_INT 0
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 2
53676: PUSH
53677: LD_INT 1
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 2
53686: PUSH
53687: LD_INT 2
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 1
53696: PUSH
53697: LD_INT 2
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 0
53706: PUSH
53707: LD_INT 2
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: LD_INT 1
53716: NEG
53717: PUSH
53718: LD_INT 1
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 2
53727: NEG
53728: PUSH
53729: LD_INT 0
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 2
53738: NEG
53739: PUSH
53740: LD_INT 1
53742: NEG
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 2
53750: NEG
53751: PUSH
53752: LD_INT 2
53754: NEG
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53781: LD_ADDR_VAR 0 58
53785: PUSH
53786: LD_INT 0
53788: PUSH
53789: LD_INT 0
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 0
53798: PUSH
53799: LD_INT 1
53801: NEG
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 1
53809: PUSH
53810: LD_INT 0
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 1
53819: PUSH
53820: LD_INT 1
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 0
53829: PUSH
53830: LD_INT 1
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 1
53839: NEG
53840: PUSH
53841: LD_INT 0
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 1
53850: NEG
53851: PUSH
53852: LD_INT 1
53854: NEG
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 1
53862: NEG
53863: PUSH
53864: LD_INT 2
53866: NEG
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 0
53874: PUSH
53875: LD_INT 2
53877: NEG
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 1
53885: PUSH
53886: LD_INT 1
53888: NEG
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 2
53896: PUSH
53897: LD_INT 0
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 2
53906: PUSH
53907: LD_INT 1
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 2
53916: PUSH
53917: LD_INT 2
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 1
53926: PUSH
53927: LD_INT 2
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 0
53936: PUSH
53937: LD_INT 2
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 1
53946: NEG
53947: PUSH
53948: LD_INT 1
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 2
53957: NEG
53958: PUSH
53959: LD_INT 0
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 2
53968: NEG
53969: PUSH
53970: LD_INT 1
53972: NEG
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 2
53980: NEG
53981: PUSH
53982: LD_INT 2
53984: NEG
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: LIST
54005: LIST
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54011: LD_ADDR_VAR 0 59
54015: PUSH
54016: LD_INT 0
54018: PUSH
54019: LD_INT 0
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: LD_INT 0
54028: PUSH
54029: LD_INT 1
54031: NEG
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 1
54039: PUSH
54040: LD_INT 0
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 1
54049: PUSH
54050: LD_INT 1
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: LD_INT 0
54059: PUSH
54060: LD_INT 1
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 1
54069: NEG
54070: PUSH
54071: LD_INT 0
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 1
54080: NEG
54081: PUSH
54082: LD_INT 1
54084: NEG
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54099: LD_ADDR_VAR 0 60
54103: PUSH
54104: LD_INT 0
54106: PUSH
54107: LD_INT 0
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 0
54116: PUSH
54117: LD_INT 1
54119: NEG
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 1
54127: PUSH
54128: LD_INT 0
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 1
54137: PUSH
54138: LD_INT 1
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 0
54147: PUSH
54148: LD_INT 1
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 1
54157: NEG
54158: PUSH
54159: LD_INT 0
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 1
54168: NEG
54169: PUSH
54170: LD_INT 1
54172: NEG
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54187: LD_ADDR_VAR 0 61
54191: PUSH
54192: LD_INT 0
54194: PUSH
54195: LD_INT 0
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 0
54204: PUSH
54205: LD_INT 1
54207: NEG
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 1
54215: PUSH
54216: LD_INT 0
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 1
54225: PUSH
54226: LD_INT 1
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 0
54235: PUSH
54236: LD_INT 1
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 1
54245: NEG
54246: PUSH
54247: LD_INT 0
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 1
54256: NEG
54257: PUSH
54258: LD_INT 1
54260: NEG
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54275: LD_ADDR_VAR 0 62
54279: PUSH
54280: LD_INT 0
54282: PUSH
54283: LD_INT 0
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 0
54292: PUSH
54293: LD_INT 1
54295: NEG
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 1
54303: PUSH
54304: LD_INT 0
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 1
54313: PUSH
54314: LD_INT 1
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 0
54323: PUSH
54324: LD_INT 1
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 1
54333: NEG
54334: PUSH
54335: LD_INT 0
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 1
54344: NEG
54345: PUSH
54346: LD_INT 1
54348: NEG
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54363: LD_ADDR_VAR 0 63
54367: PUSH
54368: LD_INT 0
54370: PUSH
54371: LD_INT 0
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 0
54380: PUSH
54381: LD_INT 1
54383: NEG
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 1
54391: PUSH
54392: LD_INT 0
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 1
54401: PUSH
54402: LD_INT 1
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 0
54411: PUSH
54412: LD_INT 1
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 1
54421: NEG
54422: PUSH
54423: LD_INT 0
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 1
54432: NEG
54433: PUSH
54434: LD_INT 1
54436: NEG
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: LIST
54450: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54451: LD_ADDR_VAR 0 64
54455: PUSH
54456: LD_INT 0
54458: PUSH
54459: LD_INT 0
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 0
54468: PUSH
54469: LD_INT 1
54471: NEG
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 1
54479: PUSH
54480: LD_INT 0
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 1
54489: PUSH
54490: LD_INT 1
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 0
54499: PUSH
54500: LD_INT 1
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 1
54509: NEG
54510: PUSH
54511: LD_INT 0
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 1
54520: NEG
54521: PUSH
54522: LD_INT 1
54524: NEG
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: ST_TO_ADDR
// end ; 1 :
54539: GO 60436
54541: LD_INT 1
54543: DOUBLE
54544: EQUAL
54545: IFTRUE 54549
54547: GO 57172
54549: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54550: LD_ADDR_VAR 0 11
54554: PUSH
54555: LD_INT 1
54557: NEG
54558: PUSH
54559: LD_INT 3
54561: NEG
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 0
54569: PUSH
54570: LD_INT 3
54572: NEG
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 1
54580: PUSH
54581: LD_INT 2
54583: NEG
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: LIST
54593: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54594: LD_ADDR_VAR 0 12
54598: PUSH
54599: LD_INT 2
54601: PUSH
54602: LD_INT 1
54604: NEG
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: LD_INT 3
54612: PUSH
54613: LD_INT 0
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 3
54622: PUSH
54623: LD_INT 1
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: LIST
54634: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54635: LD_ADDR_VAR 0 13
54639: PUSH
54640: LD_INT 3
54642: PUSH
54643: LD_INT 2
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 3
54652: PUSH
54653: LD_INT 3
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 2
54662: PUSH
54663: LD_INT 3
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: LIST
54674: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54675: LD_ADDR_VAR 0 14
54679: PUSH
54680: LD_INT 1
54682: PUSH
54683: LD_INT 3
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 0
54692: PUSH
54693: LD_INT 3
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 1
54702: NEG
54703: PUSH
54704: LD_INT 2
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: LIST
54715: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54716: LD_ADDR_VAR 0 15
54720: PUSH
54721: LD_INT 2
54723: NEG
54724: PUSH
54725: LD_INT 1
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 3
54734: NEG
54735: PUSH
54736: LD_INT 0
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 3
54745: NEG
54746: PUSH
54747: LD_INT 1
54749: NEG
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: LIST
54759: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54760: LD_ADDR_VAR 0 16
54764: PUSH
54765: LD_INT 2
54767: NEG
54768: PUSH
54769: LD_INT 3
54771: NEG
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 3
54779: NEG
54780: PUSH
54781: LD_INT 2
54783: NEG
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 3
54791: NEG
54792: PUSH
54793: LD_INT 3
54795: NEG
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: LIST
54805: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54806: LD_ADDR_VAR 0 17
54810: PUSH
54811: LD_INT 1
54813: NEG
54814: PUSH
54815: LD_INT 3
54817: NEG
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 0
54825: PUSH
54826: LD_INT 3
54828: NEG
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 1
54836: PUSH
54837: LD_INT 2
54839: NEG
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: LIST
54849: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54850: LD_ADDR_VAR 0 18
54854: PUSH
54855: LD_INT 2
54857: PUSH
54858: LD_INT 1
54860: NEG
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 3
54868: PUSH
54869: LD_INT 0
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 3
54878: PUSH
54879: LD_INT 1
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: LIST
54890: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54891: LD_ADDR_VAR 0 19
54895: PUSH
54896: LD_INT 3
54898: PUSH
54899: LD_INT 2
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 3
54908: PUSH
54909: LD_INT 3
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: LD_INT 2
54918: PUSH
54919: LD_INT 3
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: LIST
54930: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54931: LD_ADDR_VAR 0 20
54935: PUSH
54936: LD_INT 1
54938: PUSH
54939: LD_INT 3
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 0
54948: PUSH
54949: LD_INT 3
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: LD_INT 1
54958: NEG
54959: PUSH
54960: LD_INT 2
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: LIST
54971: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54972: LD_ADDR_VAR 0 21
54976: PUSH
54977: LD_INT 2
54979: NEG
54980: PUSH
54981: LD_INT 1
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 3
54990: NEG
54991: PUSH
54992: LD_INT 0
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 3
55001: NEG
55002: PUSH
55003: LD_INT 1
55005: NEG
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: LIST
55015: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55016: LD_ADDR_VAR 0 22
55020: PUSH
55021: LD_INT 2
55023: NEG
55024: PUSH
55025: LD_INT 3
55027: NEG
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 3
55035: NEG
55036: PUSH
55037: LD_INT 2
55039: NEG
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 3
55047: NEG
55048: PUSH
55049: LD_INT 3
55051: NEG
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: LIST
55061: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55062: LD_ADDR_VAR 0 23
55066: PUSH
55067: LD_INT 0
55069: PUSH
55070: LD_INT 3
55072: NEG
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 1
55080: NEG
55081: PUSH
55082: LD_INT 4
55084: NEG
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 1
55092: PUSH
55093: LD_INT 3
55095: NEG
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: LIST
55105: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55106: LD_ADDR_VAR 0 24
55110: PUSH
55111: LD_INT 3
55113: PUSH
55114: LD_INT 0
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 3
55123: PUSH
55124: LD_INT 1
55126: NEG
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 4
55134: PUSH
55135: LD_INT 1
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: LIST
55146: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55147: LD_ADDR_VAR 0 25
55151: PUSH
55152: LD_INT 3
55154: PUSH
55155: LD_INT 3
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 4
55164: PUSH
55165: LD_INT 3
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 3
55174: PUSH
55175: LD_INT 4
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: LIST
55186: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55187: LD_ADDR_VAR 0 26
55191: PUSH
55192: LD_INT 0
55194: PUSH
55195: LD_INT 3
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 1
55204: PUSH
55205: LD_INT 4
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 1
55214: NEG
55215: PUSH
55216: LD_INT 3
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: LIST
55227: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55228: LD_ADDR_VAR 0 27
55232: PUSH
55233: LD_INT 3
55235: NEG
55236: PUSH
55237: LD_INT 0
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 3
55246: NEG
55247: PUSH
55248: LD_INT 1
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: PUSH
55255: LD_INT 4
55257: NEG
55258: PUSH
55259: LD_INT 1
55261: NEG
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: LIST
55271: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55272: LD_ADDR_VAR 0 28
55276: PUSH
55277: LD_INT 3
55279: NEG
55280: PUSH
55281: LD_INT 3
55283: NEG
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 3
55291: NEG
55292: PUSH
55293: LD_INT 4
55295: NEG
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 4
55303: NEG
55304: PUSH
55305: LD_INT 3
55307: NEG
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: LIST
55317: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55318: LD_ADDR_VAR 0 29
55322: PUSH
55323: LD_INT 1
55325: NEG
55326: PUSH
55327: LD_INT 3
55329: NEG
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 0
55337: PUSH
55338: LD_INT 3
55340: NEG
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 1
55348: PUSH
55349: LD_INT 2
55351: NEG
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 1
55359: NEG
55360: PUSH
55361: LD_INT 4
55363: NEG
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 0
55371: PUSH
55372: LD_INT 4
55374: NEG
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 1
55382: PUSH
55383: LD_INT 3
55385: NEG
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 1
55393: NEG
55394: PUSH
55395: LD_INT 5
55397: NEG
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 0
55405: PUSH
55406: LD_INT 5
55408: NEG
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 1
55416: PUSH
55417: LD_INT 4
55419: NEG
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 1
55427: NEG
55428: PUSH
55429: LD_INT 6
55431: NEG
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 0
55439: PUSH
55440: LD_INT 6
55442: NEG
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 1
55450: PUSH
55451: LD_INT 5
55453: NEG
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55473: LD_ADDR_VAR 0 30
55477: PUSH
55478: LD_INT 2
55480: PUSH
55481: LD_INT 1
55483: NEG
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 3
55491: PUSH
55492: LD_INT 0
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 3
55501: PUSH
55502: LD_INT 1
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 3
55511: PUSH
55512: LD_INT 1
55514: NEG
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 4
55522: PUSH
55523: LD_INT 0
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 4
55532: PUSH
55533: LD_INT 1
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 4
55542: PUSH
55543: LD_INT 1
55545: NEG
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 5
55553: PUSH
55554: LD_INT 0
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: LD_INT 5
55563: PUSH
55564: LD_INT 1
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 5
55573: PUSH
55574: LD_INT 1
55576: NEG
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 6
55584: PUSH
55585: LD_INT 0
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 6
55594: PUSH
55595: LD_INT 1
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55616: LD_ADDR_VAR 0 31
55620: PUSH
55621: LD_INT 3
55623: PUSH
55624: LD_INT 2
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: LD_INT 3
55633: PUSH
55634: LD_INT 3
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: LD_INT 2
55643: PUSH
55644: LD_INT 3
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: LD_INT 4
55653: PUSH
55654: LD_INT 3
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 4
55663: PUSH
55664: LD_INT 4
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 3
55673: PUSH
55674: LD_INT 4
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 5
55683: PUSH
55684: LD_INT 4
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 5
55693: PUSH
55694: LD_INT 5
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 4
55703: PUSH
55704: LD_INT 5
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 6
55713: PUSH
55714: LD_INT 5
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 6
55723: PUSH
55724: LD_INT 6
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 5
55733: PUSH
55734: LD_INT 6
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55755: LD_ADDR_VAR 0 32
55759: PUSH
55760: LD_INT 1
55762: PUSH
55763: LD_INT 3
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 0
55772: PUSH
55773: LD_INT 3
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 1
55782: NEG
55783: PUSH
55784: LD_INT 2
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 1
55793: PUSH
55794: LD_INT 4
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 0
55803: PUSH
55804: LD_INT 4
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 1
55813: NEG
55814: PUSH
55815: LD_INT 3
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 1
55824: PUSH
55825: LD_INT 5
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 0
55834: PUSH
55835: LD_INT 5
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 1
55844: NEG
55845: PUSH
55846: LD_INT 4
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: LD_INT 1
55855: PUSH
55856: LD_INT 6
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 0
55865: PUSH
55866: LD_INT 6
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 1
55875: NEG
55876: PUSH
55877: LD_INT 5
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55898: LD_ADDR_VAR 0 33
55902: PUSH
55903: LD_INT 2
55905: NEG
55906: PUSH
55907: LD_INT 1
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 3
55916: NEG
55917: PUSH
55918: LD_INT 0
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 3
55927: NEG
55928: PUSH
55929: LD_INT 1
55931: NEG
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 3
55939: NEG
55940: PUSH
55941: LD_INT 1
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 4
55950: NEG
55951: PUSH
55952: LD_INT 0
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 4
55961: NEG
55962: PUSH
55963: LD_INT 1
55965: NEG
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 4
55973: NEG
55974: PUSH
55975: LD_INT 1
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 5
55984: NEG
55985: PUSH
55986: LD_INT 0
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 5
55995: NEG
55996: PUSH
55997: LD_INT 1
55999: NEG
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 5
56007: NEG
56008: PUSH
56009: LD_INT 1
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 6
56018: NEG
56019: PUSH
56020: LD_INT 0
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 6
56029: NEG
56030: PUSH
56031: LD_INT 1
56033: NEG
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: LIST
56043: LIST
56044: LIST
56045: LIST
56046: LIST
56047: LIST
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56053: LD_ADDR_VAR 0 34
56057: PUSH
56058: LD_INT 2
56060: NEG
56061: PUSH
56062: LD_INT 3
56064: NEG
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 3
56072: NEG
56073: PUSH
56074: LD_INT 2
56076: NEG
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 3
56084: NEG
56085: PUSH
56086: LD_INT 3
56088: NEG
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: LD_INT 3
56096: NEG
56097: PUSH
56098: LD_INT 4
56100: NEG
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: PUSH
56106: LD_INT 4
56108: NEG
56109: PUSH
56110: LD_INT 3
56112: NEG
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 4
56120: NEG
56121: PUSH
56122: LD_INT 4
56124: NEG
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 4
56132: NEG
56133: PUSH
56134: LD_INT 5
56136: NEG
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 5
56144: NEG
56145: PUSH
56146: LD_INT 4
56148: NEG
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 5
56156: NEG
56157: PUSH
56158: LD_INT 5
56160: NEG
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: LD_INT 5
56168: NEG
56169: PUSH
56170: LD_INT 6
56172: NEG
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 6
56180: NEG
56181: PUSH
56182: LD_INT 5
56184: NEG
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 6
56192: NEG
56193: PUSH
56194: LD_INT 6
56196: NEG
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56216: LD_ADDR_VAR 0 41
56220: PUSH
56221: LD_INT 0
56223: PUSH
56224: LD_INT 2
56226: NEG
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 1
56234: NEG
56235: PUSH
56236: LD_INT 3
56238: NEG
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 1
56246: PUSH
56247: LD_INT 2
56249: NEG
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: LIST
56259: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56260: LD_ADDR_VAR 0 42
56264: PUSH
56265: LD_INT 2
56267: PUSH
56268: LD_INT 0
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 2
56277: PUSH
56278: LD_INT 1
56280: NEG
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 3
56288: PUSH
56289: LD_INT 1
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: LIST
56300: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56301: LD_ADDR_VAR 0 43
56305: PUSH
56306: LD_INT 2
56308: PUSH
56309: LD_INT 2
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: LD_INT 3
56318: PUSH
56319: LD_INT 2
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 2
56328: PUSH
56329: LD_INT 3
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: LIST
56340: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56341: LD_ADDR_VAR 0 44
56345: PUSH
56346: LD_INT 0
56348: PUSH
56349: LD_INT 2
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 1
56358: PUSH
56359: LD_INT 3
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 1
56368: NEG
56369: PUSH
56370: LD_INT 2
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: LIST
56381: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56382: LD_ADDR_VAR 0 45
56386: PUSH
56387: LD_INT 2
56389: NEG
56390: PUSH
56391: LD_INT 0
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 2
56400: NEG
56401: PUSH
56402: LD_INT 1
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 3
56411: NEG
56412: PUSH
56413: LD_INT 1
56415: NEG
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: LIST
56425: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56426: LD_ADDR_VAR 0 46
56430: PUSH
56431: LD_INT 2
56433: NEG
56434: PUSH
56435: LD_INT 2
56437: NEG
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 2
56445: NEG
56446: PUSH
56447: LD_INT 3
56449: NEG
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 3
56457: NEG
56458: PUSH
56459: LD_INT 2
56461: NEG
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: LIST
56471: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56472: LD_ADDR_VAR 0 47
56476: PUSH
56477: LD_INT 2
56479: NEG
56480: PUSH
56481: LD_INT 3
56483: NEG
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 1
56491: NEG
56492: PUSH
56493: LD_INT 3
56495: NEG
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56505: LD_ADDR_VAR 0 48
56509: PUSH
56510: LD_INT 1
56512: PUSH
56513: LD_INT 2
56515: NEG
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 2
56523: PUSH
56524: LD_INT 1
56526: NEG
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56536: LD_ADDR_VAR 0 49
56540: PUSH
56541: LD_INT 3
56543: PUSH
56544: LD_INT 1
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: PUSH
56551: LD_INT 3
56553: PUSH
56554: LD_INT 2
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56565: LD_ADDR_VAR 0 50
56569: PUSH
56570: LD_INT 2
56572: PUSH
56573: LD_INT 3
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 1
56582: PUSH
56583: LD_INT 3
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56594: LD_ADDR_VAR 0 51
56598: PUSH
56599: LD_INT 1
56601: NEG
56602: PUSH
56603: LD_INT 2
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: LD_INT 2
56612: NEG
56613: PUSH
56614: LD_INT 1
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56625: LD_ADDR_VAR 0 52
56629: PUSH
56630: LD_INT 3
56632: NEG
56633: PUSH
56634: LD_INT 1
56636: NEG
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 3
56644: NEG
56645: PUSH
56646: LD_INT 2
56648: NEG
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56658: LD_ADDR_VAR 0 53
56662: PUSH
56663: LD_INT 1
56665: NEG
56666: PUSH
56667: LD_INT 3
56669: NEG
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 0
56677: PUSH
56678: LD_INT 3
56680: NEG
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 1
56688: PUSH
56689: LD_INT 2
56691: NEG
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: LIST
56701: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56702: LD_ADDR_VAR 0 54
56706: PUSH
56707: LD_INT 2
56709: PUSH
56710: LD_INT 1
56712: NEG
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 3
56720: PUSH
56721: LD_INT 0
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 3
56730: PUSH
56731: LD_INT 1
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: LIST
56742: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56743: LD_ADDR_VAR 0 55
56747: PUSH
56748: LD_INT 3
56750: PUSH
56751: LD_INT 2
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 3
56760: PUSH
56761: LD_INT 3
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 2
56770: PUSH
56771: LD_INT 3
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: LIST
56782: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56783: LD_ADDR_VAR 0 56
56787: PUSH
56788: LD_INT 1
56790: PUSH
56791: LD_INT 3
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 0
56800: PUSH
56801: LD_INT 3
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 1
56810: NEG
56811: PUSH
56812: LD_INT 2
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: LIST
56823: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56824: LD_ADDR_VAR 0 57
56828: PUSH
56829: LD_INT 2
56831: NEG
56832: PUSH
56833: LD_INT 1
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 3
56842: NEG
56843: PUSH
56844: LD_INT 0
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 3
56853: NEG
56854: PUSH
56855: LD_INT 1
56857: NEG
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: LIST
56867: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56868: LD_ADDR_VAR 0 58
56872: PUSH
56873: LD_INT 2
56875: NEG
56876: PUSH
56877: LD_INT 3
56879: NEG
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 3
56887: NEG
56888: PUSH
56889: LD_INT 2
56891: NEG
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 3
56899: NEG
56900: PUSH
56901: LD_INT 3
56903: NEG
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: LIST
56913: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56914: LD_ADDR_VAR 0 59
56918: PUSH
56919: LD_INT 1
56921: NEG
56922: PUSH
56923: LD_INT 2
56925: NEG
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 0
56933: PUSH
56934: LD_INT 2
56936: NEG
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 1
56944: PUSH
56945: LD_INT 1
56947: NEG
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: LIST
56957: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56958: LD_ADDR_VAR 0 60
56962: PUSH
56963: LD_INT 1
56965: PUSH
56966: LD_INT 1
56968: NEG
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 2
56976: PUSH
56977: LD_INT 0
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 2
56986: PUSH
56987: LD_INT 1
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: LIST
56998: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56999: LD_ADDR_VAR 0 61
57003: PUSH
57004: LD_INT 2
57006: PUSH
57007: LD_INT 1
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 2
57016: PUSH
57017: LD_INT 2
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 1
57026: PUSH
57027: LD_INT 2
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: LIST
57038: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57039: LD_ADDR_VAR 0 62
57043: PUSH
57044: LD_INT 1
57046: PUSH
57047: LD_INT 2
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 0
57056: PUSH
57057: LD_INT 2
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 1
57066: NEG
57067: PUSH
57068: LD_INT 1
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: LIST
57079: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57080: LD_ADDR_VAR 0 63
57084: PUSH
57085: LD_INT 1
57087: NEG
57088: PUSH
57089: LD_INT 1
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 2
57098: NEG
57099: PUSH
57100: LD_INT 0
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: LD_INT 2
57109: NEG
57110: PUSH
57111: LD_INT 1
57113: NEG
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: LIST
57123: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57124: LD_ADDR_VAR 0 64
57128: PUSH
57129: LD_INT 1
57131: NEG
57132: PUSH
57133: LD_INT 2
57135: NEG
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 2
57143: NEG
57144: PUSH
57145: LD_INT 1
57147: NEG
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 2
57155: NEG
57156: PUSH
57157: LD_INT 2
57159: NEG
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: LIST
57169: ST_TO_ADDR
// end ; 2 :
57170: GO 60436
57172: LD_INT 2
57174: DOUBLE
57175: EQUAL
57176: IFTRUE 57180
57178: GO 60435
57180: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57181: LD_ADDR_VAR 0 29
57185: PUSH
57186: LD_INT 4
57188: PUSH
57189: LD_INT 0
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 4
57198: PUSH
57199: LD_INT 1
57201: NEG
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 5
57209: PUSH
57210: LD_INT 0
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 5
57219: PUSH
57220: LD_INT 1
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: LD_INT 4
57229: PUSH
57230: LD_INT 1
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: LD_INT 3
57239: PUSH
57240: LD_INT 0
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: LD_INT 3
57249: PUSH
57250: LD_INT 1
57252: NEG
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 3
57260: PUSH
57261: LD_INT 2
57263: NEG
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: PUSH
57269: LD_INT 5
57271: PUSH
57272: LD_INT 2
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 3
57281: PUSH
57282: LD_INT 3
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 3
57291: PUSH
57292: LD_INT 2
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 4
57301: PUSH
57302: LD_INT 3
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 4
57311: PUSH
57312: LD_INT 4
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 3
57321: PUSH
57322: LD_INT 4
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PUSH
57329: LD_INT 2
57331: PUSH
57332: LD_INT 3
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: LD_INT 2
57341: PUSH
57342: LD_INT 2
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 4
57351: PUSH
57352: LD_INT 2
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 2
57361: PUSH
57362: LD_INT 4
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 0
57371: PUSH
57372: LD_INT 4
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 0
57381: PUSH
57382: LD_INT 3
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 1
57391: PUSH
57392: LD_INT 4
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 1
57401: PUSH
57402: LD_INT 5
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 0
57411: PUSH
57412: LD_INT 5
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 1
57421: NEG
57422: PUSH
57423: LD_INT 4
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 1
57432: NEG
57433: PUSH
57434: LD_INT 3
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: LD_INT 2
57443: PUSH
57444: LD_INT 5
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 2
57453: NEG
57454: PUSH
57455: LD_INT 3
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 3
57464: NEG
57465: PUSH
57466: LD_INT 0
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 3
57475: NEG
57476: PUSH
57477: LD_INT 1
57479: NEG
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 2
57487: NEG
57488: PUSH
57489: LD_INT 0
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 2
57498: NEG
57499: PUSH
57500: LD_INT 1
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_INT 3
57509: NEG
57510: PUSH
57511: LD_INT 1
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: PUSH
57518: LD_INT 4
57520: NEG
57521: PUSH
57522: LD_INT 0
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 4
57531: NEG
57532: PUSH
57533: LD_INT 1
57535: NEG
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 4
57543: NEG
57544: PUSH
57545: LD_INT 2
57547: NEG
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 2
57555: NEG
57556: PUSH
57557: LD_INT 2
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 4
57566: NEG
57567: PUSH
57568: LD_INT 4
57570: NEG
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 4
57578: NEG
57579: PUSH
57580: LD_INT 5
57582: NEG
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 3
57590: NEG
57591: PUSH
57592: LD_INT 4
57594: NEG
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 3
57602: NEG
57603: PUSH
57604: LD_INT 3
57606: NEG
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 4
57614: NEG
57615: PUSH
57616: LD_INT 3
57618: NEG
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 5
57626: NEG
57627: PUSH
57628: LD_INT 4
57630: NEG
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 5
57638: NEG
57639: PUSH
57640: LD_INT 5
57642: NEG
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 3
57650: NEG
57651: PUSH
57652: LD_INT 5
57654: NEG
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: LD_INT 5
57662: NEG
57663: PUSH
57664: LD_INT 3
57666: NEG
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: LIST
57691: LIST
57692: LIST
57693: LIST
57694: LIST
57695: LIST
57696: LIST
57697: LIST
57698: LIST
57699: LIST
57700: LIST
57701: LIST
57702: LIST
57703: LIST
57704: LIST
57705: LIST
57706: LIST
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57719: LD_ADDR_VAR 0 30
57723: PUSH
57724: LD_INT 4
57726: PUSH
57727: LD_INT 4
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 4
57736: PUSH
57737: LD_INT 3
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 5
57746: PUSH
57747: LD_INT 4
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 5
57756: PUSH
57757: LD_INT 5
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 4
57766: PUSH
57767: LD_INT 5
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 3
57776: PUSH
57777: LD_INT 4
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 3
57786: PUSH
57787: LD_INT 3
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 5
57796: PUSH
57797: LD_INT 3
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: LD_INT 3
57806: PUSH
57807: LD_INT 5
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 0
57816: PUSH
57817: LD_INT 3
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 0
57826: PUSH
57827: LD_INT 2
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 1
57836: PUSH
57837: LD_INT 3
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 1
57846: PUSH
57847: LD_INT 4
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 0
57856: PUSH
57857: LD_INT 4
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 1
57866: NEG
57867: PUSH
57868: LD_INT 3
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 1
57877: NEG
57878: PUSH
57879: LD_INT 2
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 2
57888: PUSH
57889: LD_INT 4
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 2
57898: NEG
57899: PUSH
57900: LD_INT 2
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 4
57909: NEG
57910: PUSH
57911: LD_INT 0
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 4
57920: NEG
57921: PUSH
57922: LD_INT 1
57924: NEG
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 3
57932: NEG
57933: PUSH
57934: LD_INT 0
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 3
57943: NEG
57944: PUSH
57945: LD_INT 1
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 4
57954: NEG
57955: PUSH
57956: LD_INT 1
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 5
57965: NEG
57966: PUSH
57967: LD_INT 0
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 5
57976: NEG
57977: PUSH
57978: LD_INT 1
57980: NEG
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 5
57988: NEG
57989: PUSH
57990: LD_INT 2
57992: NEG
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 3
58000: NEG
58001: PUSH
58002: LD_INT 2
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_INT 3
58011: NEG
58012: PUSH
58013: LD_INT 3
58015: NEG
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 3
58023: NEG
58024: PUSH
58025: LD_INT 4
58027: NEG
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PUSH
58033: LD_INT 2
58035: NEG
58036: PUSH
58037: LD_INT 3
58039: NEG
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 2
58047: NEG
58048: PUSH
58049: LD_INT 2
58051: NEG
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 3
58059: NEG
58060: PUSH
58061: LD_INT 2
58063: NEG
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 4
58071: NEG
58072: PUSH
58073: LD_INT 3
58075: NEG
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 4
58083: NEG
58084: PUSH
58085: LD_INT 4
58087: NEG
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 2
58095: NEG
58096: PUSH
58097: LD_INT 4
58099: NEG
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: LD_INT 4
58107: NEG
58108: PUSH
58109: LD_INT 2
58111: NEG
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 0
58119: PUSH
58120: LD_INT 4
58122: NEG
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 0
58130: PUSH
58131: LD_INT 5
58133: NEG
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 1
58141: PUSH
58142: LD_INT 4
58144: NEG
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 1
58152: PUSH
58153: LD_INT 3
58155: NEG
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 0
58163: PUSH
58164: LD_INT 3
58166: NEG
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: LD_INT 1
58174: NEG
58175: PUSH
58176: LD_INT 4
58178: NEG
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 1
58186: NEG
58187: PUSH
58188: LD_INT 5
58190: NEG
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 2
58198: PUSH
58199: LD_INT 3
58201: NEG
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 2
58209: NEG
58210: PUSH
58211: LD_INT 5
58213: NEG
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: LIST
58244: LIST
58245: LIST
58246: LIST
58247: LIST
58248: LIST
58249: LIST
58250: LIST
58251: LIST
58252: LIST
58253: LIST
58254: LIST
58255: LIST
58256: LIST
58257: LIST
58258: LIST
58259: LIST
58260: LIST
58261: LIST
58262: LIST
58263: LIST
58264: LIST
58265: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58266: LD_ADDR_VAR 0 31
58270: PUSH
58271: LD_INT 0
58273: PUSH
58274: LD_INT 4
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 0
58283: PUSH
58284: LD_INT 3
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 1
58293: PUSH
58294: LD_INT 4
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 1
58303: PUSH
58304: LD_INT 5
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 0
58313: PUSH
58314: LD_INT 5
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: LD_INT 1
58323: NEG
58324: PUSH
58325: LD_INT 4
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 1
58334: NEG
58335: PUSH
58336: LD_INT 3
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 2
58345: PUSH
58346: LD_INT 5
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 2
58355: NEG
58356: PUSH
58357: LD_INT 3
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 3
58366: NEG
58367: PUSH
58368: LD_INT 0
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 3
58377: NEG
58378: PUSH
58379: LD_INT 1
58381: NEG
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: LD_INT 2
58389: NEG
58390: PUSH
58391: LD_INT 0
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 2
58400: NEG
58401: PUSH
58402: LD_INT 1
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 3
58411: NEG
58412: PUSH
58413: LD_INT 1
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 4
58422: NEG
58423: PUSH
58424: LD_INT 0
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: PUSH
58431: LD_INT 4
58433: NEG
58434: PUSH
58435: LD_INT 1
58437: NEG
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 4
58445: NEG
58446: PUSH
58447: LD_INT 2
58449: NEG
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 2
58457: NEG
58458: PUSH
58459: LD_INT 2
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: LD_INT 4
58468: NEG
58469: PUSH
58470: LD_INT 4
58472: NEG
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 4
58480: NEG
58481: PUSH
58482: LD_INT 5
58484: NEG
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 3
58492: NEG
58493: PUSH
58494: LD_INT 4
58496: NEG
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 3
58504: NEG
58505: PUSH
58506: LD_INT 3
58508: NEG
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 4
58516: NEG
58517: PUSH
58518: LD_INT 3
58520: NEG
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: LD_INT 5
58528: NEG
58529: PUSH
58530: LD_INT 4
58532: NEG
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 5
58540: NEG
58541: PUSH
58542: LD_INT 5
58544: NEG
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: LD_INT 3
58552: NEG
58553: PUSH
58554: LD_INT 5
58556: NEG
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 5
58564: NEG
58565: PUSH
58566: LD_INT 3
58568: NEG
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 0
58576: PUSH
58577: LD_INT 3
58579: NEG
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: PUSH
58585: LD_INT 0
58587: PUSH
58588: LD_INT 4
58590: NEG
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 1
58598: PUSH
58599: LD_INT 3
58601: NEG
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: LD_INT 1
58609: PUSH
58610: LD_INT 2
58612: NEG
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 0
58620: PUSH
58621: LD_INT 2
58623: NEG
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 1
58631: NEG
58632: PUSH
58633: LD_INT 3
58635: NEG
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: LD_INT 1
58643: NEG
58644: PUSH
58645: LD_INT 4
58647: NEG
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 2
58655: PUSH
58656: LD_INT 2
58658: NEG
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 2
58666: NEG
58667: PUSH
58668: LD_INT 4
58670: NEG
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 4
58678: PUSH
58679: LD_INT 0
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PUSH
58686: LD_INT 4
58688: PUSH
58689: LD_INT 1
58691: NEG
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: LD_INT 5
58699: PUSH
58700: LD_INT 0
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 5
58709: PUSH
58710: LD_INT 1
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: LD_INT 4
58719: PUSH
58720: LD_INT 1
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: LD_INT 3
58729: PUSH
58730: LD_INT 0
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: LD_INT 3
58739: PUSH
58740: LD_INT 1
58742: NEG
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 3
58750: PUSH
58751: LD_INT 2
58753: NEG
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 5
58761: PUSH
58762: LD_INT 2
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: LIST
58773: LIST
58774: LIST
58775: LIST
58776: LIST
58777: LIST
58778: LIST
58779: LIST
58780: LIST
58781: LIST
58782: LIST
58783: LIST
58784: LIST
58785: LIST
58786: LIST
58787: LIST
58788: LIST
58789: LIST
58790: LIST
58791: LIST
58792: LIST
58793: LIST
58794: LIST
58795: LIST
58796: LIST
58797: LIST
58798: LIST
58799: LIST
58800: LIST
58801: LIST
58802: LIST
58803: LIST
58804: LIST
58805: LIST
58806: LIST
58807: LIST
58808: LIST
58809: LIST
58810: LIST
58811: LIST
58812: LIST
58813: LIST
58814: LIST
58815: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58816: LD_ADDR_VAR 0 32
58820: PUSH
58821: LD_INT 4
58823: NEG
58824: PUSH
58825: LD_INT 0
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: LD_INT 4
58834: NEG
58835: PUSH
58836: LD_INT 1
58838: NEG
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: LD_INT 3
58846: NEG
58847: PUSH
58848: LD_INT 0
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 3
58857: NEG
58858: PUSH
58859: LD_INT 1
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 4
58868: NEG
58869: PUSH
58870: LD_INT 1
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 5
58879: NEG
58880: PUSH
58881: LD_INT 0
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 5
58890: NEG
58891: PUSH
58892: LD_INT 1
58894: NEG
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: LD_INT 5
58902: NEG
58903: PUSH
58904: LD_INT 2
58906: NEG
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: LD_INT 3
58914: NEG
58915: PUSH
58916: LD_INT 2
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: LD_INT 3
58925: NEG
58926: PUSH
58927: LD_INT 3
58929: NEG
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: PUSH
58935: LD_INT 3
58937: NEG
58938: PUSH
58939: LD_INT 4
58941: NEG
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: LD_INT 2
58949: NEG
58950: PUSH
58951: LD_INT 3
58953: NEG
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 2
58961: NEG
58962: PUSH
58963: LD_INT 2
58965: NEG
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: PUSH
58971: LD_INT 3
58973: NEG
58974: PUSH
58975: LD_INT 2
58977: NEG
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: LD_INT 4
58985: NEG
58986: PUSH
58987: LD_INT 3
58989: NEG
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 4
58997: NEG
58998: PUSH
58999: LD_INT 4
59001: NEG
59002: PUSH
59003: EMPTY
59004: LIST
59005: LIST
59006: PUSH
59007: LD_INT 2
59009: NEG
59010: PUSH
59011: LD_INT 4
59013: NEG
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 4
59021: NEG
59022: PUSH
59023: LD_INT 2
59025: NEG
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 0
59033: PUSH
59034: LD_INT 4
59036: NEG
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 0
59044: PUSH
59045: LD_INT 5
59047: NEG
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 1
59055: PUSH
59056: LD_INT 4
59058: NEG
59059: PUSH
59060: EMPTY
59061: LIST
59062: LIST
59063: PUSH
59064: LD_INT 1
59066: PUSH
59067: LD_INT 3
59069: NEG
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 0
59077: PUSH
59078: LD_INT 3
59080: NEG
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: PUSH
59086: LD_INT 1
59088: NEG
59089: PUSH
59090: LD_INT 4
59092: NEG
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 1
59100: NEG
59101: PUSH
59102: LD_INT 5
59104: NEG
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: PUSH
59110: LD_INT 2
59112: PUSH
59113: LD_INT 3
59115: NEG
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 2
59123: NEG
59124: PUSH
59125: LD_INT 5
59127: NEG
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 3
59135: PUSH
59136: LD_INT 0
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: LD_INT 3
59145: PUSH
59146: LD_INT 1
59148: NEG
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 4
59156: PUSH
59157: LD_INT 0
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 4
59166: PUSH
59167: LD_INT 1
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PUSH
59174: LD_INT 3
59176: PUSH
59177: LD_INT 1
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 2
59186: PUSH
59187: LD_INT 0
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PUSH
59194: LD_INT 2
59196: PUSH
59197: LD_INT 1
59199: NEG
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: LD_INT 2
59207: PUSH
59208: LD_INT 2
59210: NEG
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PUSH
59216: LD_INT 4
59218: PUSH
59219: LD_INT 2
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: LD_INT 4
59228: PUSH
59229: LD_INT 4
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: LD_INT 4
59238: PUSH
59239: LD_INT 3
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 5
59248: PUSH
59249: LD_INT 4
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 5
59258: PUSH
59259: LD_INT 5
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 4
59268: PUSH
59269: LD_INT 5
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: LD_INT 3
59278: PUSH
59279: LD_INT 4
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 3
59288: PUSH
59289: LD_INT 3
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: PUSH
59296: LD_INT 5
59298: PUSH
59299: LD_INT 3
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: LD_INT 3
59308: PUSH
59309: LD_INT 5
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: LIST
59320: LIST
59321: LIST
59322: LIST
59323: LIST
59324: LIST
59325: LIST
59326: LIST
59327: LIST
59328: LIST
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: LIST
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59363: LD_ADDR_VAR 0 33
59367: PUSH
59368: LD_INT 4
59370: NEG
59371: PUSH
59372: LD_INT 4
59374: NEG
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: PUSH
59380: LD_INT 4
59382: NEG
59383: PUSH
59384: LD_INT 5
59386: NEG
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: LD_INT 3
59394: NEG
59395: PUSH
59396: LD_INT 4
59398: NEG
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: LD_INT 3
59406: NEG
59407: PUSH
59408: LD_INT 3
59410: NEG
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: PUSH
59416: LD_INT 4
59418: NEG
59419: PUSH
59420: LD_INT 3
59422: NEG
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: PUSH
59428: LD_INT 5
59430: NEG
59431: PUSH
59432: LD_INT 4
59434: NEG
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 5
59442: NEG
59443: PUSH
59444: LD_INT 5
59446: NEG
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: PUSH
59452: LD_INT 3
59454: NEG
59455: PUSH
59456: LD_INT 5
59458: NEG
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 5
59466: NEG
59467: PUSH
59468: LD_INT 3
59470: NEG
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: LD_INT 0
59478: PUSH
59479: LD_INT 3
59481: NEG
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: LD_INT 0
59489: PUSH
59490: LD_INT 4
59492: NEG
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 1
59500: PUSH
59501: LD_INT 3
59503: NEG
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: LD_INT 1
59511: PUSH
59512: LD_INT 2
59514: NEG
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_INT 0
59522: PUSH
59523: LD_INT 2
59525: NEG
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: LD_INT 1
59533: NEG
59534: PUSH
59535: LD_INT 3
59537: NEG
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: LD_INT 1
59545: NEG
59546: PUSH
59547: LD_INT 4
59549: NEG
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: LD_INT 2
59557: PUSH
59558: LD_INT 2
59560: NEG
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 2
59568: NEG
59569: PUSH
59570: LD_INT 4
59572: NEG
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: LD_INT 4
59580: PUSH
59581: LD_INT 0
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 4
59590: PUSH
59591: LD_INT 1
59593: NEG
59594: PUSH
59595: EMPTY
59596: LIST
59597: LIST
59598: PUSH
59599: LD_INT 5
59601: PUSH
59602: LD_INT 0
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 5
59611: PUSH
59612: LD_INT 1
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: LD_INT 4
59621: PUSH
59622: LD_INT 1
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: LD_INT 3
59631: PUSH
59632: LD_INT 0
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PUSH
59639: LD_INT 3
59641: PUSH
59642: LD_INT 1
59644: NEG
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: LD_INT 3
59652: PUSH
59653: LD_INT 2
59655: NEG
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_INT 5
59663: PUSH
59664: LD_INT 2
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: LD_INT 3
59673: PUSH
59674: LD_INT 3
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: PUSH
59681: LD_INT 3
59683: PUSH
59684: LD_INT 2
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: LD_INT 4
59693: PUSH
59694: LD_INT 3
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PUSH
59701: LD_INT 4
59703: PUSH
59704: LD_INT 4
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: PUSH
59711: LD_INT 3
59713: PUSH
59714: LD_INT 4
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: LD_INT 2
59723: PUSH
59724: LD_INT 3
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 2
59733: PUSH
59734: LD_INT 2
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: LD_INT 4
59743: PUSH
59744: LD_INT 2
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: LD_INT 2
59753: PUSH
59754: LD_INT 4
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: PUSH
59761: LD_INT 0
59763: PUSH
59764: LD_INT 4
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 0
59773: PUSH
59774: LD_INT 3
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: LD_INT 1
59783: PUSH
59784: LD_INT 4
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: LD_INT 1
59793: PUSH
59794: LD_INT 5
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 0
59803: PUSH
59804: LD_INT 5
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: LD_INT 1
59813: NEG
59814: PUSH
59815: LD_INT 4
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 1
59824: NEG
59825: PUSH
59826: LD_INT 3
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PUSH
59833: LD_INT 2
59835: PUSH
59836: LD_INT 5
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: PUSH
59843: LD_INT 2
59845: NEG
59846: PUSH
59847: LD_INT 3
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: LIST
59858: LIST
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: LIST
59864: LIST
59865: LIST
59866: LIST
59867: LIST
59868: LIST
59869: LIST
59870: LIST
59871: LIST
59872: LIST
59873: LIST
59874: LIST
59875: LIST
59876: LIST
59877: LIST
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: LIST
59883: LIST
59884: LIST
59885: LIST
59886: LIST
59887: LIST
59888: LIST
59889: LIST
59890: LIST
59891: LIST
59892: LIST
59893: LIST
59894: LIST
59895: LIST
59896: LIST
59897: LIST
59898: LIST
59899: LIST
59900: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59901: LD_ADDR_VAR 0 34
59905: PUSH
59906: LD_INT 0
59908: PUSH
59909: LD_INT 4
59911: NEG
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_INT 0
59919: PUSH
59920: LD_INT 5
59922: NEG
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 1
59930: PUSH
59931: LD_INT 4
59933: NEG
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: LD_INT 1
59941: PUSH
59942: LD_INT 3
59944: NEG
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: LD_INT 0
59952: PUSH
59953: LD_INT 3
59955: NEG
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: LD_INT 1
59963: NEG
59964: PUSH
59965: LD_INT 4
59967: NEG
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PUSH
59973: LD_INT 1
59975: NEG
59976: PUSH
59977: LD_INT 5
59979: NEG
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: LD_INT 2
59987: PUSH
59988: LD_INT 3
59990: NEG
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: PUSH
59996: LD_INT 2
59998: NEG
59999: PUSH
60000: LD_INT 5
60002: NEG
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 3
60010: PUSH
60011: LD_INT 0
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 3
60020: PUSH
60021: LD_INT 1
60023: NEG
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 4
60031: PUSH
60032: LD_INT 0
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: LD_INT 4
60041: PUSH
60042: LD_INT 1
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: LD_INT 3
60051: PUSH
60052: LD_INT 1
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: PUSH
60059: LD_INT 2
60061: PUSH
60062: LD_INT 0
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 2
60071: PUSH
60072: LD_INT 1
60074: NEG
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 2
60082: PUSH
60083: LD_INT 2
60085: NEG
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 4
60093: PUSH
60094: LD_INT 2
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 4
60103: PUSH
60104: LD_INT 4
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 4
60113: PUSH
60114: LD_INT 3
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 5
60123: PUSH
60124: LD_INT 4
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 5
60133: PUSH
60134: LD_INT 5
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 4
60143: PUSH
60144: LD_INT 5
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: LD_INT 3
60153: PUSH
60154: LD_INT 4
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: LD_INT 3
60163: PUSH
60164: LD_INT 3
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: PUSH
60171: LD_INT 5
60173: PUSH
60174: LD_INT 3
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: PUSH
60181: LD_INT 3
60183: PUSH
60184: LD_INT 5
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: PUSH
60191: LD_INT 0
60193: PUSH
60194: LD_INT 3
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: PUSH
60201: LD_INT 0
60203: PUSH
60204: LD_INT 2
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: LD_INT 1
60213: PUSH
60214: LD_INT 3
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: PUSH
60221: LD_INT 1
60223: PUSH
60224: LD_INT 4
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 0
60233: PUSH
60234: LD_INT 4
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 1
60243: NEG
60244: PUSH
60245: LD_INT 3
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 1
60254: NEG
60255: PUSH
60256: LD_INT 2
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: LD_INT 2
60265: PUSH
60266: LD_INT 4
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: LD_INT 2
60275: NEG
60276: PUSH
60277: LD_INT 2
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: PUSH
60284: LD_INT 4
60286: NEG
60287: PUSH
60288: LD_INT 0
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: LD_INT 4
60297: NEG
60298: PUSH
60299: LD_INT 1
60301: NEG
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: PUSH
60307: LD_INT 3
60309: NEG
60310: PUSH
60311: LD_INT 0
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: PUSH
60318: LD_INT 3
60320: NEG
60321: PUSH
60322: LD_INT 1
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 4
60331: NEG
60332: PUSH
60333: LD_INT 1
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: PUSH
60340: LD_INT 5
60342: NEG
60343: PUSH
60344: LD_INT 0
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: LD_INT 5
60353: NEG
60354: PUSH
60355: LD_INT 1
60357: NEG
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: PUSH
60363: LD_INT 5
60365: NEG
60366: PUSH
60367: LD_INT 2
60369: NEG
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: PUSH
60375: LD_INT 3
60377: NEG
60378: PUSH
60379: LD_INT 2
60381: PUSH
60382: EMPTY
60383: LIST
60384: LIST
60385: PUSH
60386: EMPTY
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: LIST
60407: LIST
60408: LIST
60409: LIST
60410: LIST
60411: LIST
60412: LIST
60413: LIST
60414: LIST
60415: LIST
60416: LIST
60417: LIST
60418: LIST
60419: LIST
60420: LIST
60421: LIST
60422: LIST
60423: LIST
60424: LIST
60425: LIST
60426: LIST
60427: LIST
60428: LIST
60429: LIST
60430: LIST
60431: LIST
60432: ST_TO_ADDR
// end ; end ;
60433: GO 60436
60435: POP
// case btype of b_depot , b_warehouse :
60436: LD_VAR 0 1
60440: PUSH
60441: LD_INT 0
60443: DOUBLE
60444: EQUAL
60445: IFTRUE 60455
60447: LD_INT 1
60449: DOUBLE
60450: EQUAL
60451: IFTRUE 60455
60453: GO 60656
60455: POP
// case nation of nation_american :
60456: LD_VAR 0 5
60460: PUSH
60461: LD_INT 1
60463: DOUBLE
60464: EQUAL
60465: IFTRUE 60469
60467: GO 60525
60469: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60470: LD_ADDR_VAR 0 9
60474: PUSH
60475: LD_VAR 0 11
60479: PUSH
60480: LD_VAR 0 12
60484: PUSH
60485: LD_VAR 0 13
60489: PUSH
60490: LD_VAR 0 14
60494: PUSH
60495: LD_VAR 0 15
60499: PUSH
60500: LD_VAR 0 16
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: LIST
60509: LIST
60510: LIST
60511: LIST
60512: PUSH
60513: LD_VAR 0 4
60517: PUSH
60518: LD_INT 1
60520: PLUS
60521: ARRAY
60522: ST_TO_ADDR
60523: GO 60654
60525: LD_INT 2
60527: DOUBLE
60528: EQUAL
60529: IFTRUE 60533
60531: GO 60589
60533: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
60534: LD_ADDR_VAR 0 9
60538: PUSH
60539: LD_VAR 0 17
60543: PUSH
60544: LD_VAR 0 18
60548: PUSH
60549: LD_VAR 0 19
60553: PUSH
60554: LD_VAR 0 20
60558: PUSH
60559: LD_VAR 0 21
60563: PUSH
60564: LD_VAR 0 22
60568: PUSH
60569: EMPTY
60570: LIST
60571: LIST
60572: LIST
60573: LIST
60574: LIST
60575: LIST
60576: PUSH
60577: LD_VAR 0 4
60581: PUSH
60582: LD_INT 1
60584: PLUS
60585: ARRAY
60586: ST_TO_ADDR
60587: GO 60654
60589: LD_INT 3
60591: DOUBLE
60592: EQUAL
60593: IFTRUE 60597
60595: GO 60653
60597: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60598: LD_ADDR_VAR 0 9
60602: PUSH
60603: LD_VAR 0 23
60607: PUSH
60608: LD_VAR 0 24
60612: PUSH
60613: LD_VAR 0 25
60617: PUSH
60618: LD_VAR 0 26
60622: PUSH
60623: LD_VAR 0 27
60627: PUSH
60628: LD_VAR 0 28
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: PUSH
60641: LD_VAR 0 4
60645: PUSH
60646: LD_INT 1
60648: PLUS
60649: ARRAY
60650: ST_TO_ADDR
60651: GO 60654
60653: POP
60654: GO 61209
60656: LD_INT 2
60658: DOUBLE
60659: EQUAL
60660: IFTRUE 60670
60662: LD_INT 3
60664: DOUBLE
60665: EQUAL
60666: IFTRUE 60670
60668: GO 60726
60670: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
60671: LD_ADDR_VAR 0 9
60675: PUSH
60676: LD_VAR 0 29
60680: PUSH
60681: LD_VAR 0 30
60685: PUSH
60686: LD_VAR 0 31
60690: PUSH
60691: LD_VAR 0 32
60695: PUSH
60696: LD_VAR 0 33
60700: PUSH
60701: LD_VAR 0 34
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: LIST
60713: PUSH
60714: LD_VAR 0 4
60718: PUSH
60719: LD_INT 1
60721: PLUS
60722: ARRAY
60723: ST_TO_ADDR
60724: GO 61209
60726: LD_INT 16
60728: DOUBLE
60729: EQUAL
60730: IFTRUE 60788
60732: LD_INT 17
60734: DOUBLE
60735: EQUAL
60736: IFTRUE 60788
60738: LD_INT 18
60740: DOUBLE
60741: EQUAL
60742: IFTRUE 60788
60744: LD_INT 19
60746: DOUBLE
60747: EQUAL
60748: IFTRUE 60788
60750: LD_INT 22
60752: DOUBLE
60753: EQUAL
60754: IFTRUE 60788
60756: LD_INT 20
60758: DOUBLE
60759: EQUAL
60760: IFTRUE 60788
60762: LD_INT 21
60764: DOUBLE
60765: EQUAL
60766: IFTRUE 60788
60768: LD_INT 23
60770: DOUBLE
60771: EQUAL
60772: IFTRUE 60788
60774: LD_INT 24
60776: DOUBLE
60777: EQUAL
60778: IFTRUE 60788
60780: LD_INT 25
60782: DOUBLE
60783: EQUAL
60784: IFTRUE 60788
60786: GO 60844
60788: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60789: LD_ADDR_VAR 0 9
60793: PUSH
60794: LD_VAR 0 35
60798: PUSH
60799: LD_VAR 0 36
60803: PUSH
60804: LD_VAR 0 37
60808: PUSH
60809: LD_VAR 0 38
60813: PUSH
60814: LD_VAR 0 39
60818: PUSH
60819: LD_VAR 0 40
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: PUSH
60832: LD_VAR 0 4
60836: PUSH
60837: LD_INT 1
60839: PLUS
60840: ARRAY
60841: ST_TO_ADDR
60842: GO 61209
60844: LD_INT 6
60846: DOUBLE
60847: EQUAL
60848: IFTRUE 60900
60850: LD_INT 7
60852: DOUBLE
60853: EQUAL
60854: IFTRUE 60900
60856: LD_INT 8
60858: DOUBLE
60859: EQUAL
60860: IFTRUE 60900
60862: LD_INT 13
60864: DOUBLE
60865: EQUAL
60866: IFTRUE 60900
60868: LD_INT 12
60870: DOUBLE
60871: EQUAL
60872: IFTRUE 60900
60874: LD_INT 15
60876: DOUBLE
60877: EQUAL
60878: IFTRUE 60900
60880: LD_INT 11
60882: DOUBLE
60883: EQUAL
60884: IFTRUE 60900
60886: LD_INT 14
60888: DOUBLE
60889: EQUAL
60890: IFTRUE 60900
60892: LD_INT 10
60894: DOUBLE
60895: EQUAL
60896: IFTRUE 60900
60898: GO 60956
60900: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
60901: LD_ADDR_VAR 0 9
60905: PUSH
60906: LD_VAR 0 41
60910: PUSH
60911: LD_VAR 0 42
60915: PUSH
60916: LD_VAR 0 43
60920: PUSH
60921: LD_VAR 0 44
60925: PUSH
60926: LD_VAR 0 45
60930: PUSH
60931: LD_VAR 0 46
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: LIST
60940: LIST
60941: LIST
60942: LIST
60943: PUSH
60944: LD_VAR 0 4
60948: PUSH
60949: LD_INT 1
60951: PLUS
60952: ARRAY
60953: ST_TO_ADDR
60954: GO 61209
60956: LD_INT 36
60958: DOUBLE
60959: EQUAL
60960: IFTRUE 60964
60962: GO 61020
60964: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
60965: LD_ADDR_VAR 0 9
60969: PUSH
60970: LD_VAR 0 47
60974: PUSH
60975: LD_VAR 0 48
60979: PUSH
60980: LD_VAR 0 49
60984: PUSH
60985: LD_VAR 0 50
60989: PUSH
60990: LD_VAR 0 51
60994: PUSH
60995: LD_VAR 0 52
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: LIST
61004: LIST
61005: LIST
61006: LIST
61007: PUSH
61008: LD_VAR 0 4
61012: PUSH
61013: LD_INT 1
61015: PLUS
61016: ARRAY
61017: ST_TO_ADDR
61018: GO 61209
61020: LD_INT 4
61022: DOUBLE
61023: EQUAL
61024: IFTRUE 61046
61026: LD_INT 5
61028: DOUBLE
61029: EQUAL
61030: IFTRUE 61046
61032: LD_INT 34
61034: DOUBLE
61035: EQUAL
61036: IFTRUE 61046
61038: LD_INT 37
61040: DOUBLE
61041: EQUAL
61042: IFTRUE 61046
61044: GO 61102
61046: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61047: LD_ADDR_VAR 0 9
61051: PUSH
61052: LD_VAR 0 53
61056: PUSH
61057: LD_VAR 0 54
61061: PUSH
61062: LD_VAR 0 55
61066: PUSH
61067: LD_VAR 0 56
61071: PUSH
61072: LD_VAR 0 57
61076: PUSH
61077: LD_VAR 0 58
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: LIST
61086: LIST
61087: LIST
61088: LIST
61089: PUSH
61090: LD_VAR 0 4
61094: PUSH
61095: LD_INT 1
61097: PLUS
61098: ARRAY
61099: ST_TO_ADDR
61100: GO 61209
61102: LD_INT 31
61104: DOUBLE
61105: EQUAL
61106: IFTRUE 61152
61108: LD_INT 32
61110: DOUBLE
61111: EQUAL
61112: IFTRUE 61152
61114: LD_INT 33
61116: DOUBLE
61117: EQUAL
61118: IFTRUE 61152
61120: LD_INT 27
61122: DOUBLE
61123: EQUAL
61124: IFTRUE 61152
61126: LD_INT 26
61128: DOUBLE
61129: EQUAL
61130: IFTRUE 61152
61132: LD_INT 28
61134: DOUBLE
61135: EQUAL
61136: IFTRUE 61152
61138: LD_INT 29
61140: DOUBLE
61141: EQUAL
61142: IFTRUE 61152
61144: LD_INT 30
61146: DOUBLE
61147: EQUAL
61148: IFTRUE 61152
61150: GO 61208
61152: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61153: LD_ADDR_VAR 0 9
61157: PUSH
61158: LD_VAR 0 59
61162: PUSH
61163: LD_VAR 0 60
61167: PUSH
61168: LD_VAR 0 61
61172: PUSH
61173: LD_VAR 0 62
61177: PUSH
61178: LD_VAR 0 63
61182: PUSH
61183: LD_VAR 0 64
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: LIST
61192: LIST
61193: LIST
61194: LIST
61195: PUSH
61196: LD_VAR 0 4
61200: PUSH
61201: LD_INT 1
61203: PLUS
61204: ARRAY
61205: ST_TO_ADDR
61206: GO 61209
61208: POP
// temp_list2 = [ ] ;
61209: LD_ADDR_VAR 0 10
61213: PUSH
61214: EMPTY
61215: ST_TO_ADDR
// for i in temp_list do
61216: LD_ADDR_VAR 0 8
61220: PUSH
61221: LD_VAR 0 9
61225: PUSH
61226: FOR_IN
61227: IFFALSE 61279
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61229: LD_ADDR_VAR 0 10
61233: PUSH
61234: LD_VAR 0 10
61238: PUSH
61239: LD_VAR 0 8
61243: PUSH
61244: LD_INT 1
61246: ARRAY
61247: PUSH
61248: LD_VAR 0 2
61252: PLUS
61253: PUSH
61254: LD_VAR 0 8
61258: PUSH
61259: LD_INT 2
61261: ARRAY
61262: PUSH
61263: LD_VAR 0 3
61267: PLUS
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: PUSH
61273: EMPTY
61274: LIST
61275: ADD
61276: ST_TO_ADDR
61277: GO 61226
61279: POP
61280: POP
// result = temp_list2 ;
61281: LD_ADDR_VAR 0 7
61285: PUSH
61286: LD_VAR 0 10
61290: ST_TO_ADDR
// end ;
61291: LD_VAR 0 7
61295: RET
// export function EnemyInRange ( unit , dist ) ; begin
61296: LD_INT 0
61298: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61299: LD_ADDR_VAR 0 3
61303: PUSH
61304: LD_VAR 0 1
61308: PPUSH
61309: CALL_OW 255
61313: PPUSH
61314: LD_VAR 0 1
61318: PPUSH
61319: CALL_OW 250
61323: PPUSH
61324: LD_VAR 0 1
61328: PPUSH
61329: CALL_OW 251
61333: PPUSH
61334: LD_VAR 0 2
61338: PPUSH
61339: CALL 34669 0 4
61343: PUSH
61344: LD_INT 4
61346: ARRAY
61347: ST_TO_ADDR
// end ;
61348: LD_VAR 0 3
61352: RET
// export function PlayerSeeMe ( unit ) ; begin
61353: LD_INT 0
61355: PPUSH
// result := See ( your_side , unit ) ;
61356: LD_ADDR_VAR 0 2
61360: PUSH
61361: LD_OWVAR 2
61365: PPUSH
61366: LD_VAR 0 1
61370: PPUSH
61371: CALL_OW 292
61375: ST_TO_ADDR
// end ;
61376: LD_VAR 0 2
61380: RET
// export function ReverseDir ( unit ) ; begin
61381: LD_INT 0
61383: PPUSH
// if not unit then
61384: LD_VAR 0 1
61388: NOT
61389: IFFALSE 61393
// exit ;
61391: GO 61416
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61393: LD_ADDR_VAR 0 2
61397: PUSH
61398: LD_VAR 0 1
61402: PPUSH
61403: CALL_OW 254
61407: PUSH
61408: LD_INT 3
61410: PLUS
61411: PUSH
61412: LD_INT 6
61414: MOD
61415: ST_TO_ADDR
// end ;
61416: LD_VAR 0 2
61420: RET
// export function ReverseArray ( array ) ; var i ; begin
61421: LD_INT 0
61423: PPUSH
61424: PPUSH
// if not array then
61425: LD_VAR 0 1
61429: NOT
61430: IFFALSE 61434
// exit ;
61432: GO 61489
// result := [ ] ;
61434: LD_ADDR_VAR 0 2
61438: PUSH
61439: EMPTY
61440: ST_TO_ADDR
// for i := array downto 1 do
61441: LD_ADDR_VAR 0 3
61445: PUSH
61446: DOUBLE
61447: LD_VAR 0 1
61451: INC
61452: ST_TO_ADDR
61453: LD_INT 1
61455: PUSH
61456: FOR_DOWNTO
61457: IFFALSE 61487
// result := Join ( result , array [ i ] ) ;
61459: LD_ADDR_VAR 0 2
61463: PUSH
61464: LD_VAR 0 2
61468: PPUSH
61469: LD_VAR 0 1
61473: PUSH
61474: LD_VAR 0 3
61478: ARRAY
61479: PPUSH
61480: CALL 66154 0 2
61484: ST_TO_ADDR
61485: GO 61456
61487: POP
61488: POP
// end ;
61489: LD_VAR 0 2
61493: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
61494: LD_INT 0
61496: PPUSH
61497: PPUSH
61498: PPUSH
61499: PPUSH
61500: PPUSH
61501: PPUSH
// if not unit or not hexes then
61502: LD_VAR 0 1
61506: NOT
61507: PUSH
61508: LD_VAR 0 2
61512: NOT
61513: OR
61514: IFFALSE 61518
// exit ;
61516: GO 61641
// dist := 9999 ;
61518: LD_ADDR_VAR 0 5
61522: PUSH
61523: LD_INT 9999
61525: ST_TO_ADDR
// for i = 1 to hexes do
61526: LD_ADDR_VAR 0 4
61530: PUSH
61531: DOUBLE
61532: LD_INT 1
61534: DEC
61535: ST_TO_ADDR
61536: LD_VAR 0 2
61540: PUSH
61541: FOR_TO
61542: IFFALSE 61629
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61544: LD_ADDR_VAR 0 6
61548: PUSH
61549: LD_VAR 0 1
61553: PPUSH
61554: LD_VAR 0 2
61558: PUSH
61559: LD_VAR 0 4
61563: ARRAY
61564: PUSH
61565: LD_INT 1
61567: ARRAY
61568: PPUSH
61569: LD_VAR 0 2
61573: PUSH
61574: LD_VAR 0 4
61578: ARRAY
61579: PUSH
61580: LD_INT 2
61582: ARRAY
61583: PPUSH
61584: CALL_OW 297
61588: ST_TO_ADDR
// if tdist < dist then
61589: LD_VAR 0 6
61593: PUSH
61594: LD_VAR 0 5
61598: LESS
61599: IFFALSE 61627
// begin hex := hexes [ i ] ;
61601: LD_ADDR_VAR 0 8
61605: PUSH
61606: LD_VAR 0 2
61610: PUSH
61611: LD_VAR 0 4
61615: ARRAY
61616: ST_TO_ADDR
// dist := tdist ;
61617: LD_ADDR_VAR 0 5
61621: PUSH
61622: LD_VAR 0 6
61626: ST_TO_ADDR
// end ; end ;
61627: GO 61541
61629: POP
61630: POP
// result := hex ;
61631: LD_ADDR_VAR 0 3
61635: PUSH
61636: LD_VAR 0 8
61640: ST_TO_ADDR
// end ;
61641: LD_VAR 0 3
61645: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61646: LD_INT 0
61648: PPUSH
61649: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61650: LD_VAR 0 1
61654: NOT
61655: PUSH
61656: LD_VAR 0 1
61660: PUSH
61661: LD_INT 21
61663: PUSH
61664: LD_INT 2
61666: PUSH
61667: EMPTY
61668: LIST
61669: LIST
61670: PUSH
61671: LD_INT 23
61673: PUSH
61674: LD_INT 2
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PPUSH
61685: CALL_OW 69
61689: IN
61690: NOT
61691: OR
61692: IFFALSE 61696
// exit ;
61694: GO 61743
// for i = 1 to 3 do
61696: LD_ADDR_VAR 0 3
61700: PUSH
61701: DOUBLE
61702: LD_INT 1
61704: DEC
61705: ST_TO_ADDR
61706: LD_INT 3
61708: PUSH
61709: FOR_TO
61710: IFFALSE 61741
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61712: LD_VAR 0 1
61716: PPUSH
61717: CALL_OW 250
61721: PPUSH
61722: LD_VAR 0 1
61726: PPUSH
61727: CALL_OW 251
61731: PPUSH
61732: LD_INT 1
61734: PPUSH
61735: CALL_OW 453
61739: GO 61709
61741: POP
61742: POP
// end ;
61743: LD_VAR 0 2
61747: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61748: LD_INT 0
61750: PPUSH
61751: PPUSH
61752: PPUSH
61753: PPUSH
61754: PPUSH
61755: PPUSH
// if not unit or not enemy_unit then
61756: LD_VAR 0 1
61760: NOT
61761: PUSH
61762: LD_VAR 0 2
61766: NOT
61767: OR
61768: IFFALSE 61772
// exit ;
61770: GO 62239
// if GetLives ( i ) < 250 then
61772: LD_VAR 0 4
61776: PPUSH
61777: CALL_OW 256
61781: PUSH
61782: LD_INT 250
61784: LESS
61785: IFFALSE 61798
// begin ComAutodestruct ( i ) ;
61787: LD_VAR 0 4
61791: PPUSH
61792: CALL 61646 0 1
// exit ;
61796: GO 62239
// end ; x := GetX ( enemy_unit ) ;
61798: LD_ADDR_VAR 0 7
61802: PUSH
61803: LD_VAR 0 2
61807: PPUSH
61808: CALL_OW 250
61812: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61813: LD_ADDR_VAR 0 8
61817: PUSH
61818: LD_VAR 0 2
61822: PPUSH
61823: CALL_OW 251
61827: ST_TO_ADDR
// if not x or not y then
61828: LD_VAR 0 7
61832: NOT
61833: PUSH
61834: LD_VAR 0 8
61838: NOT
61839: OR
61840: IFFALSE 61844
// exit ;
61842: GO 62239
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
61844: LD_ADDR_VAR 0 6
61848: PUSH
61849: LD_VAR 0 7
61853: PPUSH
61854: LD_INT 0
61856: PPUSH
61857: LD_INT 4
61859: PPUSH
61860: CALL_OW 272
61864: PUSH
61865: LD_VAR 0 8
61869: PPUSH
61870: LD_INT 0
61872: PPUSH
61873: LD_INT 4
61875: PPUSH
61876: CALL_OW 273
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PUSH
61885: LD_VAR 0 7
61889: PPUSH
61890: LD_INT 1
61892: PPUSH
61893: LD_INT 4
61895: PPUSH
61896: CALL_OW 272
61900: PUSH
61901: LD_VAR 0 8
61905: PPUSH
61906: LD_INT 1
61908: PPUSH
61909: LD_INT 4
61911: PPUSH
61912: CALL_OW 273
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: PUSH
61921: LD_VAR 0 7
61925: PPUSH
61926: LD_INT 2
61928: PPUSH
61929: LD_INT 4
61931: PPUSH
61932: CALL_OW 272
61936: PUSH
61937: LD_VAR 0 8
61941: PPUSH
61942: LD_INT 2
61944: PPUSH
61945: LD_INT 4
61947: PPUSH
61948: CALL_OW 273
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: LD_VAR 0 7
61961: PPUSH
61962: LD_INT 3
61964: PPUSH
61965: LD_INT 4
61967: PPUSH
61968: CALL_OW 272
61972: PUSH
61973: LD_VAR 0 8
61977: PPUSH
61978: LD_INT 3
61980: PPUSH
61981: LD_INT 4
61983: PPUSH
61984: CALL_OW 273
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_VAR 0 7
61997: PPUSH
61998: LD_INT 4
62000: PPUSH
62001: LD_INT 4
62003: PPUSH
62004: CALL_OW 272
62008: PUSH
62009: LD_VAR 0 8
62013: PPUSH
62014: LD_INT 4
62016: PPUSH
62017: LD_INT 4
62019: PPUSH
62020: CALL_OW 273
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: PUSH
62029: LD_VAR 0 7
62033: PPUSH
62034: LD_INT 5
62036: PPUSH
62037: LD_INT 4
62039: PPUSH
62040: CALL_OW 272
62044: PUSH
62045: LD_VAR 0 8
62049: PPUSH
62050: LD_INT 5
62052: PPUSH
62053: LD_INT 4
62055: PPUSH
62056: CALL_OW 273
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: LIST
62069: LIST
62070: LIST
62071: LIST
62072: ST_TO_ADDR
// for i = tmp downto 1 do
62073: LD_ADDR_VAR 0 4
62077: PUSH
62078: DOUBLE
62079: LD_VAR 0 6
62083: INC
62084: ST_TO_ADDR
62085: LD_INT 1
62087: PUSH
62088: FOR_DOWNTO
62089: IFFALSE 62190
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62091: LD_VAR 0 6
62095: PUSH
62096: LD_VAR 0 4
62100: ARRAY
62101: PUSH
62102: LD_INT 1
62104: ARRAY
62105: PPUSH
62106: LD_VAR 0 6
62110: PUSH
62111: LD_VAR 0 4
62115: ARRAY
62116: PUSH
62117: LD_INT 2
62119: ARRAY
62120: PPUSH
62121: CALL_OW 488
62125: NOT
62126: PUSH
62127: LD_VAR 0 6
62131: PUSH
62132: LD_VAR 0 4
62136: ARRAY
62137: PUSH
62138: LD_INT 1
62140: ARRAY
62141: PPUSH
62142: LD_VAR 0 6
62146: PUSH
62147: LD_VAR 0 4
62151: ARRAY
62152: PUSH
62153: LD_INT 2
62155: ARRAY
62156: PPUSH
62157: CALL_OW 428
62161: PUSH
62162: LD_INT 0
62164: NONEQUAL
62165: OR
62166: IFFALSE 62188
// tmp := Delete ( tmp , i ) ;
62168: LD_ADDR_VAR 0 6
62172: PUSH
62173: LD_VAR 0 6
62177: PPUSH
62178: LD_VAR 0 4
62182: PPUSH
62183: CALL_OW 3
62187: ST_TO_ADDR
62188: GO 62088
62190: POP
62191: POP
// j := GetClosestHex ( unit , tmp ) ;
62192: LD_ADDR_VAR 0 5
62196: PUSH
62197: LD_VAR 0 1
62201: PPUSH
62202: LD_VAR 0 6
62206: PPUSH
62207: CALL 61494 0 2
62211: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62212: LD_VAR 0 1
62216: PPUSH
62217: LD_VAR 0 5
62221: PUSH
62222: LD_INT 1
62224: ARRAY
62225: PPUSH
62226: LD_VAR 0 5
62230: PUSH
62231: LD_INT 2
62233: ARRAY
62234: PPUSH
62235: CALL_OW 111
// end ;
62239: LD_VAR 0 3
62243: RET
// export function PrepareApemanSoldier ( ) ; begin
62244: LD_INT 0
62246: PPUSH
// uc_nation := 0 ;
62247: LD_ADDR_OWVAR 21
62251: PUSH
62252: LD_INT 0
62254: ST_TO_ADDR
// hc_sex := sex_male ;
62255: LD_ADDR_OWVAR 27
62259: PUSH
62260: LD_INT 1
62262: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
62263: LD_ADDR_OWVAR 28
62267: PUSH
62268: LD_INT 15
62270: ST_TO_ADDR
// hc_gallery :=  ;
62271: LD_ADDR_OWVAR 33
62275: PUSH
62276: LD_STRING 
62278: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62279: LD_ADDR_OWVAR 31
62283: PUSH
62284: LD_INT 0
62286: PPUSH
62287: LD_INT 3
62289: PPUSH
62290: CALL_OW 12
62294: PUSH
62295: LD_INT 0
62297: PPUSH
62298: LD_INT 3
62300: PPUSH
62301: CALL_OW 12
62305: PUSH
62306: LD_INT 0
62308: PUSH
62309: LD_INT 0
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: LIST
62316: LIST
62317: ST_TO_ADDR
// end ;
62318: LD_VAR 0 1
62322: RET
// export function PrepareApemanEngineer ( ) ; begin
62323: LD_INT 0
62325: PPUSH
// uc_nation := 0 ;
62326: LD_ADDR_OWVAR 21
62330: PUSH
62331: LD_INT 0
62333: ST_TO_ADDR
// hc_sex := sex_male ;
62334: LD_ADDR_OWVAR 27
62338: PUSH
62339: LD_INT 1
62341: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
62342: LD_ADDR_OWVAR 28
62346: PUSH
62347: LD_INT 16
62349: ST_TO_ADDR
// hc_gallery :=  ;
62350: LD_ADDR_OWVAR 33
62354: PUSH
62355: LD_STRING 
62357: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62358: LD_ADDR_OWVAR 31
62362: PUSH
62363: LD_INT 0
62365: PPUSH
62366: LD_INT 3
62368: PPUSH
62369: CALL_OW 12
62373: PUSH
62374: LD_INT 0
62376: PPUSH
62377: LD_INT 3
62379: PPUSH
62380: CALL_OW 12
62384: PUSH
62385: LD_INT 0
62387: PUSH
62388: LD_INT 0
62390: PUSH
62391: EMPTY
62392: LIST
62393: LIST
62394: LIST
62395: LIST
62396: ST_TO_ADDR
// end ;
62397: LD_VAR 0 1
62401: RET
// export function PrepareApeman ( agressivity ) ; begin
62402: LD_INT 0
62404: PPUSH
// uc_side := 0 ;
62405: LD_ADDR_OWVAR 20
62409: PUSH
62410: LD_INT 0
62412: ST_TO_ADDR
// uc_nation := 0 ;
62413: LD_ADDR_OWVAR 21
62417: PUSH
62418: LD_INT 0
62420: ST_TO_ADDR
// hc_sex := sex_male ;
62421: LD_ADDR_OWVAR 27
62425: PUSH
62426: LD_INT 1
62428: ST_TO_ADDR
// hc_class := class_apeman ;
62429: LD_ADDR_OWVAR 28
62433: PUSH
62434: LD_INT 12
62436: ST_TO_ADDR
// hc_gallery :=  ;
62437: LD_ADDR_OWVAR 33
62441: PUSH
62442: LD_STRING 
62444: ST_TO_ADDR
// if agressivity = 0 then
62445: LD_VAR 0 1
62449: PUSH
62450: LD_INT 0
62452: EQUAL
62453: IFFALSE 62465
// hc_agressivity := 0 else
62455: LD_ADDR_OWVAR 35
62459: PUSH
62460: LD_INT 0
62462: ST_TO_ADDR
62463: GO 62486
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62465: LD_ADDR_OWVAR 35
62469: PUSH
62470: LD_VAR 0 1
62474: NEG
62475: PPUSH
62476: LD_VAR 0 1
62480: PPUSH
62481: CALL_OW 12
62485: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62486: LD_ADDR_OWVAR 31
62490: PUSH
62491: LD_INT 0
62493: PPUSH
62494: LD_INT 3
62496: PPUSH
62497: CALL_OW 12
62501: PUSH
62502: LD_INT 0
62504: PPUSH
62505: LD_INT 3
62507: PPUSH
62508: CALL_OW 12
62512: PUSH
62513: LD_INT 0
62515: PUSH
62516: LD_INT 0
62518: PUSH
62519: EMPTY
62520: LIST
62521: LIST
62522: LIST
62523: LIST
62524: ST_TO_ADDR
// end ;
62525: LD_VAR 0 2
62529: RET
// export function PrepareTiger ( agressivity ) ; begin
62530: LD_INT 0
62532: PPUSH
// uc_side := 0 ;
62533: LD_ADDR_OWVAR 20
62537: PUSH
62538: LD_INT 0
62540: ST_TO_ADDR
// uc_nation := 0 ;
62541: LD_ADDR_OWVAR 21
62545: PUSH
62546: LD_INT 0
62548: ST_TO_ADDR
// hc_class := class_tiger ;
62549: LD_ADDR_OWVAR 28
62553: PUSH
62554: LD_INT 14
62556: ST_TO_ADDR
// hc_gallery :=  ;
62557: LD_ADDR_OWVAR 33
62561: PUSH
62562: LD_STRING 
62564: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62565: LD_ADDR_OWVAR 35
62569: PUSH
62570: LD_VAR 0 1
62574: NEG
62575: PPUSH
62576: LD_VAR 0 1
62580: PPUSH
62581: CALL_OW 12
62585: ST_TO_ADDR
// end ;
62586: LD_VAR 0 2
62590: RET
// export function PrepareEnchidna ( ) ; begin
62591: LD_INT 0
62593: PPUSH
// uc_side := 0 ;
62594: LD_ADDR_OWVAR 20
62598: PUSH
62599: LD_INT 0
62601: ST_TO_ADDR
// uc_nation := 0 ;
62602: LD_ADDR_OWVAR 21
62606: PUSH
62607: LD_INT 0
62609: ST_TO_ADDR
// hc_class := class_baggie ;
62610: LD_ADDR_OWVAR 28
62614: PUSH
62615: LD_INT 13
62617: ST_TO_ADDR
// hc_gallery :=  ;
62618: LD_ADDR_OWVAR 33
62622: PUSH
62623: LD_STRING 
62625: ST_TO_ADDR
// end ;
62626: LD_VAR 0 1
62630: RET
// export function PrepareFrog ( ) ; begin
62631: LD_INT 0
62633: PPUSH
// uc_side := 0 ;
62634: LD_ADDR_OWVAR 20
62638: PUSH
62639: LD_INT 0
62641: ST_TO_ADDR
// uc_nation := 0 ;
62642: LD_ADDR_OWVAR 21
62646: PUSH
62647: LD_INT 0
62649: ST_TO_ADDR
// hc_class := class_frog ;
62650: LD_ADDR_OWVAR 28
62654: PUSH
62655: LD_INT 19
62657: ST_TO_ADDR
// hc_gallery :=  ;
62658: LD_ADDR_OWVAR 33
62662: PUSH
62663: LD_STRING 
62665: ST_TO_ADDR
// end ;
62666: LD_VAR 0 1
62670: RET
// export function PrepareFish ( ) ; begin
62671: LD_INT 0
62673: PPUSH
// uc_side := 0 ;
62674: LD_ADDR_OWVAR 20
62678: PUSH
62679: LD_INT 0
62681: ST_TO_ADDR
// uc_nation := 0 ;
62682: LD_ADDR_OWVAR 21
62686: PUSH
62687: LD_INT 0
62689: ST_TO_ADDR
// hc_class := class_fish ;
62690: LD_ADDR_OWVAR 28
62694: PUSH
62695: LD_INT 20
62697: ST_TO_ADDR
// hc_gallery :=  ;
62698: LD_ADDR_OWVAR 33
62702: PUSH
62703: LD_STRING 
62705: ST_TO_ADDR
// end ;
62706: LD_VAR 0 1
62710: RET
// export function PrepareBird ( ) ; begin
62711: LD_INT 0
62713: PPUSH
// uc_side := 0 ;
62714: LD_ADDR_OWVAR 20
62718: PUSH
62719: LD_INT 0
62721: ST_TO_ADDR
// uc_nation := 0 ;
62722: LD_ADDR_OWVAR 21
62726: PUSH
62727: LD_INT 0
62729: ST_TO_ADDR
// hc_class := class_phororhacos ;
62730: LD_ADDR_OWVAR 28
62734: PUSH
62735: LD_INT 18
62737: ST_TO_ADDR
// hc_gallery :=  ;
62738: LD_ADDR_OWVAR 33
62742: PUSH
62743: LD_STRING 
62745: ST_TO_ADDR
// end ;
62746: LD_VAR 0 1
62750: RET
// export function PrepareHorse ( ) ; begin
62751: LD_INT 0
62753: PPUSH
// uc_side := 0 ;
62754: LD_ADDR_OWVAR 20
62758: PUSH
62759: LD_INT 0
62761: ST_TO_ADDR
// uc_nation := 0 ;
62762: LD_ADDR_OWVAR 21
62766: PUSH
62767: LD_INT 0
62769: ST_TO_ADDR
// hc_class := class_horse ;
62770: LD_ADDR_OWVAR 28
62774: PUSH
62775: LD_INT 21
62777: ST_TO_ADDR
// hc_gallery :=  ;
62778: LD_ADDR_OWVAR 33
62782: PUSH
62783: LD_STRING 
62785: ST_TO_ADDR
// end ;
62786: LD_VAR 0 1
62790: RET
// export function PrepareMastodont ( ) ; begin
62791: LD_INT 0
62793: PPUSH
// uc_side := 0 ;
62794: LD_ADDR_OWVAR 20
62798: PUSH
62799: LD_INT 0
62801: ST_TO_ADDR
// uc_nation := 0 ;
62802: LD_ADDR_OWVAR 21
62806: PUSH
62807: LD_INT 0
62809: ST_TO_ADDR
// vc_chassis := class_mastodont ;
62810: LD_ADDR_OWVAR 37
62814: PUSH
62815: LD_INT 31
62817: ST_TO_ADDR
// vc_control := control_rider ;
62818: LD_ADDR_OWVAR 38
62822: PUSH
62823: LD_INT 4
62825: ST_TO_ADDR
// end ;
62826: LD_VAR 0 1
62830: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62831: LD_INT 0
62833: PPUSH
62834: PPUSH
62835: PPUSH
// uc_side = 0 ;
62836: LD_ADDR_OWVAR 20
62840: PUSH
62841: LD_INT 0
62843: ST_TO_ADDR
// uc_nation = 0 ;
62844: LD_ADDR_OWVAR 21
62848: PUSH
62849: LD_INT 0
62851: ST_TO_ADDR
// InitHc_All ( ) ;
62852: CALL_OW 584
// InitVc ;
62856: CALL_OW 20
// if mastodonts then
62860: LD_VAR 0 6
62864: IFFALSE 62931
// for i = 1 to mastodonts do
62866: LD_ADDR_VAR 0 11
62870: PUSH
62871: DOUBLE
62872: LD_INT 1
62874: DEC
62875: ST_TO_ADDR
62876: LD_VAR 0 6
62880: PUSH
62881: FOR_TO
62882: IFFALSE 62929
// begin vc_chassis := 31 ;
62884: LD_ADDR_OWVAR 37
62888: PUSH
62889: LD_INT 31
62891: ST_TO_ADDR
// vc_control := control_rider ;
62892: LD_ADDR_OWVAR 38
62896: PUSH
62897: LD_INT 4
62899: ST_TO_ADDR
// animal := CreateVehicle ;
62900: LD_ADDR_VAR 0 12
62904: PUSH
62905: CALL_OW 45
62909: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62910: LD_VAR 0 12
62914: PPUSH
62915: LD_VAR 0 8
62919: PPUSH
62920: LD_INT 0
62922: PPUSH
62923: CALL 65059 0 3
// end ;
62927: GO 62881
62929: POP
62930: POP
// if horses then
62931: LD_VAR 0 5
62935: IFFALSE 63002
// for i = 1 to horses do
62937: LD_ADDR_VAR 0 11
62941: PUSH
62942: DOUBLE
62943: LD_INT 1
62945: DEC
62946: ST_TO_ADDR
62947: LD_VAR 0 5
62951: PUSH
62952: FOR_TO
62953: IFFALSE 63000
// begin hc_class := 21 ;
62955: LD_ADDR_OWVAR 28
62959: PUSH
62960: LD_INT 21
62962: ST_TO_ADDR
// hc_gallery :=  ;
62963: LD_ADDR_OWVAR 33
62967: PUSH
62968: LD_STRING 
62970: ST_TO_ADDR
// animal := CreateHuman ;
62971: LD_ADDR_VAR 0 12
62975: PUSH
62976: CALL_OW 44
62980: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62981: LD_VAR 0 12
62985: PPUSH
62986: LD_VAR 0 8
62990: PPUSH
62991: LD_INT 0
62993: PPUSH
62994: CALL 65059 0 3
// end ;
62998: GO 62952
63000: POP
63001: POP
// if birds then
63002: LD_VAR 0 1
63006: IFFALSE 63073
// for i = 1 to birds do
63008: LD_ADDR_VAR 0 11
63012: PUSH
63013: DOUBLE
63014: LD_INT 1
63016: DEC
63017: ST_TO_ADDR
63018: LD_VAR 0 1
63022: PUSH
63023: FOR_TO
63024: IFFALSE 63071
// begin hc_class := 18 ;
63026: LD_ADDR_OWVAR 28
63030: PUSH
63031: LD_INT 18
63033: ST_TO_ADDR
// hc_gallery =  ;
63034: LD_ADDR_OWVAR 33
63038: PUSH
63039: LD_STRING 
63041: ST_TO_ADDR
// animal := CreateHuman ;
63042: LD_ADDR_VAR 0 12
63046: PUSH
63047: CALL_OW 44
63051: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63052: LD_VAR 0 12
63056: PPUSH
63057: LD_VAR 0 8
63061: PPUSH
63062: LD_INT 0
63064: PPUSH
63065: CALL 65059 0 3
// end ;
63069: GO 63023
63071: POP
63072: POP
// if tigers then
63073: LD_VAR 0 2
63077: IFFALSE 63161
// for i = 1 to tigers do
63079: LD_ADDR_VAR 0 11
63083: PUSH
63084: DOUBLE
63085: LD_INT 1
63087: DEC
63088: ST_TO_ADDR
63089: LD_VAR 0 2
63093: PUSH
63094: FOR_TO
63095: IFFALSE 63159
// begin hc_class = class_tiger ;
63097: LD_ADDR_OWVAR 28
63101: PUSH
63102: LD_INT 14
63104: ST_TO_ADDR
// hc_gallery =  ;
63105: LD_ADDR_OWVAR 33
63109: PUSH
63110: LD_STRING 
63112: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63113: LD_ADDR_OWVAR 35
63117: PUSH
63118: LD_INT 7
63120: NEG
63121: PPUSH
63122: LD_INT 7
63124: PPUSH
63125: CALL_OW 12
63129: ST_TO_ADDR
// animal := CreateHuman ;
63130: LD_ADDR_VAR 0 12
63134: PUSH
63135: CALL_OW 44
63139: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63140: LD_VAR 0 12
63144: PPUSH
63145: LD_VAR 0 8
63149: PPUSH
63150: LD_INT 0
63152: PPUSH
63153: CALL 65059 0 3
// end ;
63157: GO 63094
63159: POP
63160: POP
// if apemans then
63161: LD_VAR 0 3
63165: IFFALSE 63288
// for i = 1 to apemans do
63167: LD_ADDR_VAR 0 11
63171: PUSH
63172: DOUBLE
63173: LD_INT 1
63175: DEC
63176: ST_TO_ADDR
63177: LD_VAR 0 3
63181: PUSH
63182: FOR_TO
63183: IFFALSE 63286
// begin hc_class = class_apeman ;
63185: LD_ADDR_OWVAR 28
63189: PUSH
63190: LD_INT 12
63192: ST_TO_ADDR
// hc_gallery =  ;
63193: LD_ADDR_OWVAR 33
63197: PUSH
63198: LD_STRING 
63200: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63201: LD_ADDR_OWVAR 35
63205: PUSH
63206: LD_INT 2
63208: NEG
63209: PPUSH
63210: LD_INT 2
63212: PPUSH
63213: CALL_OW 12
63217: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63218: LD_ADDR_OWVAR 31
63222: PUSH
63223: LD_INT 1
63225: PPUSH
63226: LD_INT 3
63228: PPUSH
63229: CALL_OW 12
63233: PUSH
63234: LD_INT 1
63236: PPUSH
63237: LD_INT 3
63239: PPUSH
63240: CALL_OW 12
63244: PUSH
63245: LD_INT 0
63247: PUSH
63248: LD_INT 0
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: LIST
63255: LIST
63256: ST_TO_ADDR
// animal := CreateHuman ;
63257: LD_ADDR_VAR 0 12
63261: PUSH
63262: CALL_OW 44
63266: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63267: LD_VAR 0 12
63271: PPUSH
63272: LD_VAR 0 8
63276: PPUSH
63277: LD_INT 0
63279: PPUSH
63280: CALL 65059 0 3
// end ;
63284: GO 63182
63286: POP
63287: POP
// if enchidnas then
63288: LD_VAR 0 4
63292: IFFALSE 63359
// for i = 1 to enchidnas do
63294: LD_ADDR_VAR 0 11
63298: PUSH
63299: DOUBLE
63300: LD_INT 1
63302: DEC
63303: ST_TO_ADDR
63304: LD_VAR 0 4
63308: PUSH
63309: FOR_TO
63310: IFFALSE 63357
// begin hc_class = 13 ;
63312: LD_ADDR_OWVAR 28
63316: PUSH
63317: LD_INT 13
63319: ST_TO_ADDR
// hc_gallery =  ;
63320: LD_ADDR_OWVAR 33
63324: PUSH
63325: LD_STRING 
63327: ST_TO_ADDR
// animal := CreateHuman ;
63328: LD_ADDR_VAR 0 12
63332: PUSH
63333: CALL_OW 44
63337: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63338: LD_VAR 0 12
63342: PPUSH
63343: LD_VAR 0 8
63347: PPUSH
63348: LD_INT 0
63350: PPUSH
63351: CALL 65059 0 3
// end ;
63355: GO 63309
63357: POP
63358: POP
// if fishes then
63359: LD_VAR 0 7
63363: IFFALSE 63430
// for i = 1 to fishes do
63365: LD_ADDR_VAR 0 11
63369: PUSH
63370: DOUBLE
63371: LD_INT 1
63373: DEC
63374: ST_TO_ADDR
63375: LD_VAR 0 7
63379: PUSH
63380: FOR_TO
63381: IFFALSE 63428
// begin hc_class = 20 ;
63383: LD_ADDR_OWVAR 28
63387: PUSH
63388: LD_INT 20
63390: ST_TO_ADDR
// hc_gallery =  ;
63391: LD_ADDR_OWVAR 33
63395: PUSH
63396: LD_STRING 
63398: ST_TO_ADDR
// animal := CreateHuman ;
63399: LD_ADDR_VAR 0 12
63403: PUSH
63404: CALL_OW 44
63408: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63409: LD_VAR 0 12
63413: PPUSH
63414: LD_VAR 0 9
63418: PPUSH
63419: LD_INT 0
63421: PPUSH
63422: CALL 65059 0 3
// end ;
63426: GO 63380
63428: POP
63429: POP
// end ;
63430: LD_VAR 0 10
63434: RET
// export function WantHeal ( sci , unit ) ; begin
63435: LD_INT 0
63437: PPUSH
// if GetTaskList ( sci ) > 0 then
63438: LD_VAR 0 1
63442: PPUSH
63443: CALL_OW 437
63447: PUSH
63448: LD_INT 0
63450: GREATER
63451: IFFALSE 63521
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63453: LD_VAR 0 1
63457: PPUSH
63458: CALL_OW 437
63462: PUSH
63463: LD_INT 1
63465: ARRAY
63466: PUSH
63467: LD_INT 1
63469: ARRAY
63470: PUSH
63471: LD_STRING l
63473: EQUAL
63474: PUSH
63475: LD_VAR 0 1
63479: PPUSH
63480: CALL_OW 437
63484: PUSH
63485: LD_INT 1
63487: ARRAY
63488: PUSH
63489: LD_INT 4
63491: ARRAY
63492: PUSH
63493: LD_VAR 0 2
63497: EQUAL
63498: AND
63499: IFFALSE 63511
// result := true else
63501: LD_ADDR_VAR 0 3
63505: PUSH
63506: LD_INT 1
63508: ST_TO_ADDR
63509: GO 63519
// result := false ;
63511: LD_ADDR_VAR 0 3
63515: PUSH
63516: LD_INT 0
63518: ST_TO_ADDR
// end else
63519: GO 63529
// result := false ;
63521: LD_ADDR_VAR 0 3
63525: PUSH
63526: LD_INT 0
63528: ST_TO_ADDR
// end ;
63529: LD_VAR 0 3
63533: RET
// export function HealTarget ( sci ) ; begin
63534: LD_INT 0
63536: PPUSH
// if not sci then
63537: LD_VAR 0 1
63541: NOT
63542: IFFALSE 63546
// exit ;
63544: GO 63611
// result := 0 ;
63546: LD_ADDR_VAR 0 2
63550: PUSH
63551: LD_INT 0
63553: ST_TO_ADDR
// if GetTaskList ( sci ) then
63554: LD_VAR 0 1
63558: PPUSH
63559: CALL_OW 437
63563: IFFALSE 63611
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63565: LD_VAR 0 1
63569: PPUSH
63570: CALL_OW 437
63574: PUSH
63575: LD_INT 1
63577: ARRAY
63578: PUSH
63579: LD_INT 1
63581: ARRAY
63582: PUSH
63583: LD_STRING l
63585: EQUAL
63586: IFFALSE 63611
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63588: LD_ADDR_VAR 0 2
63592: PUSH
63593: LD_VAR 0 1
63597: PPUSH
63598: CALL_OW 437
63602: PUSH
63603: LD_INT 1
63605: ARRAY
63606: PUSH
63607: LD_INT 4
63609: ARRAY
63610: ST_TO_ADDR
// end ;
63611: LD_VAR 0 2
63615: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63616: LD_INT 0
63618: PPUSH
63619: PPUSH
63620: PPUSH
63621: PPUSH
// if not base_units then
63622: LD_VAR 0 1
63626: NOT
63627: IFFALSE 63631
// exit ;
63629: GO 63718
// result := false ;
63631: LD_ADDR_VAR 0 2
63635: PUSH
63636: LD_INT 0
63638: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63639: LD_ADDR_VAR 0 5
63643: PUSH
63644: LD_VAR 0 1
63648: PPUSH
63649: LD_INT 21
63651: PUSH
63652: LD_INT 3
63654: PUSH
63655: EMPTY
63656: LIST
63657: LIST
63658: PPUSH
63659: CALL_OW 72
63663: ST_TO_ADDR
// if not tmp then
63664: LD_VAR 0 5
63668: NOT
63669: IFFALSE 63673
// exit ;
63671: GO 63718
// for i in tmp do
63673: LD_ADDR_VAR 0 3
63677: PUSH
63678: LD_VAR 0 5
63682: PUSH
63683: FOR_IN
63684: IFFALSE 63716
// begin result := EnemyInRange ( i , 22 ) ;
63686: LD_ADDR_VAR 0 2
63690: PUSH
63691: LD_VAR 0 3
63695: PPUSH
63696: LD_INT 22
63698: PPUSH
63699: CALL 61296 0 2
63703: ST_TO_ADDR
// if result then
63704: LD_VAR 0 2
63708: IFFALSE 63714
// exit ;
63710: POP
63711: POP
63712: GO 63718
// end ;
63714: GO 63683
63716: POP
63717: POP
// end ;
63718: LD_VAR 0 2
63722: RET
// export function FilterByTag ( units , tag ) ; begin
63723: LD_INT 0
63725: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
63726: LD_ADDR_VAR 0 3
63730: PUSH
63731: LD_VAR 0 1
63735: PPUSH
63736: LD_INT 120
63738: PUSH
63739: LD_VAR 0 2
63743: PUSH
63744: EMPTY
63745: LIST
63746: LIST
63747: PPUSH
63748: CALL_OW 72
63752: ST_TO_ADDR
// end ;
63753: LD_VAR 0 3
63757: RET
// export function IsDriver ( un ) ; begin
63758: LD_INT 0
63760: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63761: LD_ADDR_VAR 0 2
63765: PUSH
63766: LD_VAR 0 1
63770: PUSH
63771: LD_INT 55
63773: PUSH
63774: EMPTY
63775: LIST
63776: PPUSH
63777: CALL_OW 69
63781: IN
63782: ST_TO_ADDR
// end ;
63783: LD_VAR 0 2
63787: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63788: LD_INT 0
63790: PPUSH
63791: PPUSH
// list := [ ] ;
63792: LD_ADDR_VAR 0 5
63796: PUSH
63797: EMPTY
63798: ST_TO_ADDR
// case d of 0 :
63799: LD_VAR 0 3
63803: PUSH
63804: LD_INT 0
63806: DOUBLE
63807: EQUAL
63808: IFTRUE 63812
63810: GO 63945
63812: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63813: LD_ADDR_VAR 0 5
63817: PUSH
63818: LD_VAR 0 1
63822: PUSH
63823: LD_INT 4
63825: MINUS
63826: PUSH
63827: LD_VAR 0 2
63831: PUSH
63832: LD_INT 4
63834: MINUS
63835: PUSH
63836: LD_INT 2
63838: PUSH
63839: EMPTY
63840: LIST
63841: LIST
63842: LIST
63843: PUSH
63844: LD_VAR 0 1
63848: PUSH
63849: LD_INT 3
63851: MINUS
63852: PUSH
63853: LD_VAR 0 2
63857: PUSH
63858: LD_INT 1
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: LIST
63865: PUSH
63866: LD_VAR 0 1
63870: PUSH
63871: LD_INT 4
63873: PLUS
63874: PUSH
63875: LD_VAR 0 2
63879: PUSH
63880: LD_INT 4
63882: PUSH
63883: EMPTY
63884: LIST
63885: LIST
63886: LIST
63887: PUSH
63888: LD_VAR 0 1
63892: PUSH
63893: LD_INT 3
63895: PLUS
63896: PUSH
63897: LD_VAR 0 2
63901: PUSH
63902: LD_INT 3
63904: PLUS
63905: PUSH
63906: LD_INT 5
63908: PUSH
63909: EMPTY
63910: LIST
63911: LIST
63912: LIST
63913: PUSH
63914: LD_VAR 0 1
63918: PUSH
63919: LD_VAR 0 2
63923: PUSH
63924: LD_INT 4
63926: PLUS
63927: PUSH
63928: LD_INT 0
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: LIST
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: LIST
63940: LIST
63941: LIST
63942: ST_TO_ADDR
// end ; 1 :
63943: GO 64643
63945: LD_INT 1
63947: DOUBLE
63948: EQUAL
63949: IFTRUE 63953
63951: GO 64086
63953: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63954: LD_ADDR_VAR 0 5
63958: PUSH
63959: LD_VAR 0 1
63963: PUSH
63964: LD_VAR 0 2
63968: PUSH
63969: LD_INT 4
63971: MINUS
63972: PUSH
63973: LD_INT 3
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: LIST
63980: PUSH
63981: LD_VAR 0 1
63985: PUSH
63986: LD_INT 3
63988: MINUS
63989: PUSH
63990: LD_VAR 0 2
63994: PUSH
63995: LD_INT 3
63997: MINUS
63998: PUSH
63999: LD_INT 2
64001: PUSH
64002: EMPTY
64003: LIST
64004: LIST
64005: LIST
64006: PUSH
64007: LD_VAR 0 1
64011: PUSH
64012: LD_INT 4
64014: MINUS
64015: PUSH
64016: LD_VAR 0 2
64020: PUSH
64021: LD_INT 1
64023: PUSH
64024: EMPTY
64025: LIST
64026: LIST
64027: LIST
64028: PUSH
64029: LD_VAR 0 1
64033: PUSH
64034: LD_VAR 0 2
64038: PUSH
64039: LD_INT 3
64041: PLUS
64042: PUSH
64043: LD_INT 0
64045: PUSH
64046: EMPTY
64047: LIST
64048: LIST
64049: LIST
64050: PUSH
64051: LD_VAR 0 1
64055: PUSH
64056: LD_INT 4
64058: PLUS
64059: PUSH
64060: LD_VAR 0 2
64064: PUSH
64065: LD_INT 4
64067: PLUS
64068: PUSH
64069: LD_INT 5
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: LIST
64076: PUSH
64077: EMPTY
64078: LIST
64079: LIST
64080: LIST
64081: LIST
64082: LIST
64083: ST_TO_ADDR
// end ; 2 :
64084: GO 64643
64086: LD_INT 2
64088: DOUBLE
64089: EQUAL
64090: IFTRUE 64094
64092: GO 64223
64094: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64095: LD_ADDR_VAR 0 5
64099: PUSH
64100: LD_VAR 0 1
64104: PUSH
64105: LD_VAR 0 2
64109: PUSH
64110: LD_INT 3
64112: MINUS
64113: PUSH
64114: LD_INT 3
64116: PUSH
64117: EMPTY
64118: LIST
64119: LIST
64120: LIST
64121: PUSH
64122: LD_VAR 0 1
64126: PUSH
64127: LD_INT 4
64129: PLUS
64130: PUSH
64131: LD_VAR 0 2
64135: PUSH
64136: LD_INT 4
64138: PUSH
64139: EMPTY
64140: LIST
64141: LIST
64142: LIST
64143: PUSH
64144: LD_VAR 0 1
64148: PUSH
64149: LD_VAR 0 2
64153: PUSH
64154: LD_INT 4
64156: PLUS
64157: PUSH
64158: LD_INT 0
64160: PUSH
64161: EMPTY
64162: LIST
64163: LIST
64164: LIST
64165: PUSH
64166: LD_VAR 0 1
64170: PUSH
64171: LD_INT 3
64173: MINUS
64174: PUSH
64175: LD_VAR 0 2
64179: PUSH
64180: LD_INT 1
64182: PUSH
64183: EMPTY
64184: LIST
64185: LIST
64186: LIST
64187: PUSH
64188: LD_VAR 0 1
64192: PUSH
64193: LD_INT 4
64195: MINUS
64196: PUSH
64197: LD_VAR 0 2
64201: PUSH
64202: LD_INT 4
64204: MINUS
64205: PUSH
64206: LD_INT 2
64208: PUSH
64209: EMPTY
64210: LIST
64211: LIST
64212: LIST
64213: PUSH
64214: EMPTY
64215: LIST
64216: LIST
64217: LIST
64218: LIST
64219: LIST
64220: ST_TO_ADDR
// end ; 3 :
64221: GO 64643
64223: LD_INT 3
64225: DOUBLE
64226: EQUAL
64227: IFTRUE 64231
64229: GO 64364
64231: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64232: LD_ADDR_VAR 0 5
64236: PUSH
64237: LD_VAR 0 1
64241: PUSH
64242: LD_INT 3
64244: PLUS
64245: PUSH
64246: LD_VAR 0 2
64250: PUSH
64251: LD_INT 4
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: LIST
64258: PUSH
64259: LD_VAR 0 1
64263: PUSH
64264: LD_INT 4
64266: PLUS
64267: PUSH
64268: LD_VAR 0 2
64272: PUSH
64273: LD_INT 4
64275: PLUS
64276: PUSH
64277: LD_INT 5
64279: PUSH
64280: EMPTY
64281: LIST
64282: LIST
64283: LIST
64284: PUSH
64285: LD_VAR 0 1
64289: PUSH
64290: LD_INT 4
64292: MINUS
64293: PUSH
64294: LD_VAR 0 2
64298: PUSH
64299: LD_INT 1
64301: PUSH
64302: EMPTY
64303: LIST
64304: LIST
64305: LIST
64306: PUSH
64307: LD_VAR 0 1
64311: PUSH
64312: LD_VAR 0 2
64316: PUSH
64317: LD_INT 4
64319: MINUS
64320: PUSH
64321: LD_INT 3
64323: PUSH
64324: EMPTY
64325: LIST
64326: LIST
64327: LIST
64328: PUSH
64329: LD_VAR 0 1
64333: PUSH
64334: LD_INT 3
64336: MINUS
64337: PUSH
64338: LD_VAR 0 2
64342: PUSH
64343: LD_INT 3
64345: MINUS
64346: PUSH
64347: LD_INT 2
64349: PUSH
64350: EMPTY
64351: LIST
64352: LIST
64353: LIST
64354: PUSH
64355: EMPTY
64356: LIST
64357: LIST
64358: LIST
64359: LIST
64360: LIST
64361: ST_TO_ADDR
// end ; 4 :
64362: GO 64643
64364: LD_INT 4
64366: DOUBLE
64367: EQUAL
64368: IFTRUE 64372
64370: GO 64505
64372: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64373: LD_ADDR_VAR 0 5
64377: PUSH
64378: LD_VAR 0 1
64382: PUSH
64383: LD_VAR 0 2
64387: PUSH
64388: LD_INT 4
64390: PLUS
64391: PUSH
64392: LD_INT 0
64394: PUSH
64395: EMPTY
64396: LIST
64397: LIST
64398: LIST
64399: PUSH
64400: LD_VAR 0 1
64404: PUSH
64405: LD_INT 3
64407: PLUS
64408: PUSH
64409: LD_VAR 0 2
64413: PUSH
64414: LD_INT 3
64416: PLUS
64417: PUSH
64418: LD_INT 5
64420: PUSH
64421: EMPTY
64422: LIST
64423: LIST
64424: LIST
64425: PUSH
64426: LD_VAR 0 1
64430: PUSH
64431: LD_INT 4
64433: PLUS
64434: PUSH
64435: LD_VAR 0 2
64439: PUSH
64440: LD_INT 4
64442: PUSH
64443: EMPTY
64444: LIST
64445: LIST
64446: LIST
64447: PUSH
64448: LD_VAR 0 1
64452: PUSH
64453: LD_VAR 0 2
64457: PUSH
64458: LD_INT 3
64460: MINUS
64461: PUSH
64462: LD_INT 3
64464: PUSH
64465: EMPTY
64466: LIST
64467: LIST
64468: LIST
64469: PUSH
64470: LD_VAR 0 1
64474: PUSH
64475: LD_INT 4
64477: MINUS
64478: PUSH
64479: LD_VAR 0 2
64483: PUSH
64484: LD_INT 4
64486: MINUS
64487: PUSH
64488: LD_INT 2
64490: PUSH
64491: EMPTY
64492: LIST
64493: LIST
64494: LIST
64495: PUSH
64496: EMPTY
64497: LIST
64498: LIST
64499: LIST
64500: LIST
64501: LIST
64502: ST_TO_ADDR
// end ; 5 :
64503: GO 64643
64505: LD_INT 5
64507: DOUBLE
64508: EQUAL
64509: IFTRUE 64513
64511: GO 64642
64513: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
64514: LD_ADDR_VAR 0 5
64518: PUSH
64519: LD_VAR 0 1
64523: PUSH
64524: LD_INT 4
64526: MINUS
64527: PUSH
64528: LD_VAR 0 2
64532: PUSH
64533: LD_INT 1
64535: PUSH
64536: EMPTY
64537: LIST
64538: LIST
64539: LIST
64540: PUSH
64541: LD_VAR 0 1
64545: PUSH
64546: LD_VAR 0 2
64550: PUSH
64551: LD_INT 4
64553: MINUS
64554: PUSH
64555: LD_INT 3
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: LIST
64562: PUSH
64563: LD_VAR 0 1
64567: PUSH
64568: LD_INT 4
64570: PLUS
64571: PUSH
64572: LD_VAR 0 2
64576: PUSH
64577: LD_INT 4
64579: PLUS
64580: PUSH
64581: LD_INT 5
64583: PUSH
64584: EMPTY
64585: LIST
64586: LIST
64587: LIST
64588: PUSH
64589: LD_VAR 0 1
64593: PUSH
64594: LD_INT 3
64596: PLUS
64597: PUSH
64598: LD_VAR 0 2
64602: PUSH
64603: LD_INT 4
64605: PUSH
64606: EMPTY
64607: LIST
64608: LIST
64609: LIST
64610: PUSH
64611: LD_VAR 0 1
64615: PUSH
64616: LD_VAR 0 2
64620: PUSH
64621: LD_INT 3
64623: PLUS
64624: PUSH
64625: LD_INT 0
64627: PUSH
64628: EMPTY
64629: LIST
64630: LIST
64631: LIST
64632: PUSH
64633: EMPTY
64634: LIST
64635: LIST
64636: LIST
64637: LIST
64638: LIST
64639: ST_TO_ADDR
// end ; end ;
64640: GO 64643
64642: POP
// result := list ;
64643: LD_ADDR_VAR 0 4
64647: PUSH
64648: LD_VAR 0 5
64652: ST_TO_ADDR
// end ;
64653: LD_VAR 0 4
64657: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64658: LD_INT 0
64660: PPUSH
64661: PPUSH
64662: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64663: LD_VAR 0 1
64667: NOT
64668: PUSH
64669: LD_VAR 0 2
64673: PUSH
64674: LD_INT 1
64676: PUSH
64677: LD_INT 2
64679: PUSH
64680: LD_INT 3
64682: PUSH
64683: LD_INT 4
64685: PUSH
64686: EMPTY
64687: LIST
64688: LIST
64689: LIST
64690: LIST
64691: IN
64692: NOT
64693: OR
64694: IFFALSE 64698
// exit ;
64696: GO 64781
// tmp := [ ] ;
64698: LD_ADDR_VAR 0 5
64702: PUSH
64703: EMPTY
64704: ST_TO_ADDR
// for i in units do
64705: LD_ADDR_VAR 0 4
64709: PUSH
64710: LD_VAR 0 1
64714: PUSH
64715: FOR_IN
64716: IFFALSE 64750
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
64718: LD_ADDR_VAR 0 5
64722: PUSH
64723: LD_VAR 0 5
64727: PPUSH
64728: LD_VAR 0 4
64732: PPUSH
64733: LD_VAR 0 2
64737: PPUSH
64738: CALL_OW 259
64742: PPUSH
64743: CALL 66154 0 2
64747: ST_TO_ADDR
64748: GO 64715
64750: POP
64751: POP
// if not tmp then
64752: LD_VAR 0 5
64756: NOT
64757: IFFALSE 64761
// exit ;
64759: GO 64781
// result := SortListByListDesc ( units , tmp ) ;
64761: LD_ADDR_VAR 0 3
64765: PUSH
64766: LD_VAR 0 1
64770: PPUSH
64771: LD_VAR 0 5
64775: PPUSH
64776: CALL_OW 77
64780: ST_TO_ADDR
// end ;
64781: LD_VAR 0 3
64785: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64786: LD_INT 0
64788: PPUSH
64789: PPUSH
64790: PPUSH
// result := false ;
64791: LD_ADDR_VAR 0 3
64795: PUSH
64796: LD_INT 0
64798: ST_TO_ADDR
// if not building then
64799: LD_VAR 0 2
64803: NOT
64804: IFFALSE 64808
// exit ;
64806: GO 64946
// x := GetX ( building ) ;
64808: LD_ADDR_VAR 0 4
64812: PUSH
64813: LD_VAR 0 2
64817: PPUSH
64818: CALL_OW 250
64822: ST_TO_ADDR
// y := GetY ( building ) ;
64823: LD_ADDR_VAR 0 5
64827: PUSH
64828: LD_VAR 0 2
64832: PPUSH
64833: CALL_OW 251
64837: ST_TO_ADDR
// if not x or not y then
64838: LD_VAR 0 4
64842: NOT
64843: PUSH
64844: LD_VAR 0 5
64848: NOT
64849: OR
64850: IFFALSE 64854
// exit ;
64852: GO 64946
// if GetTaskList ( unit ) then
64854: LD_VAR 0 1
64858: PPUSH
64859: CALL_OW 437
64863: IFFALSE 64946
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64865: LD_STRING e
64867: PUSH
64868: LD_VAR 0 1
64872: PPUSH
64873: CALL_OW 437
64877: PUSH
64878: LD_INT 1
64880: ARRAY
64881: PUSH
64882: LD_INT 1
64884: ARRAY
64885: EQUAL
64886: PUSH
64887: LD_VAR 0 4
64891: PUSH
64892: LD_VAR 0 1
64896: PPUSH
64897: CALL_OW 437
64901: PUSH
64902: LD_INT 1
64904: ARRAY
64905: PUSH
64906: LD_INT 2
64908: ARRAY
64909: EQUAL
64910: AND
64911: PUSH
64912: LD_VAR 0 5
64916: PUSH
64917: LD_VAR 0 1
64921: PPUSH
64922: CALL_OW 437
64926: PUSH
64927: LD_INT 1
64929: ARRAY
64930: PUSH
64931: LD_INT 3
64933: ARRAY
64934: EQUAL
64935: AND
64936: IFFALSE 64946
// result := true end ;
64938: LD_ADDR_VAR 0 3
64942: PUSH
64943: LD_INT 1
64945: ST_TO_ADDR
// end ;
64946: LD_VAR 0 3
64950: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64951: LD_INT 0
64953: PPUSH
// result := false ;
64954: LD_ADDR_VAR 0 4
64958: PUSH
64959: LD_INT 0
64961: ST_TO_ADDR
// if GetTaskList ( unit ) then
64962: LD_VAR 0 1
64966: PPUSH
64967: CALL_OW 437
64971: IFFALSE 65054
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64973: LD_STRING M
64975: PUSH
64976: LD_VAR 0 1
64980: PPUSH
64981: CALL_OW 437
64985: PUSH
64986: LD_INT 1
64988: ARRAY
64989: PUSH
64990: LD_INT 1
64992: ARRAY
64993: EQUAL
64994: PUSH
64995: LD_VAR 0 2
64999: PUSH
65000: LD_VAR 0 1
65004: PPUSH
65005: CALL_OW 437
65009: PUSH
65010: LD_INT 1
65012: ARRAY
65013: PUSH
65014: LD_INT 2
65016: ARRAY
65017: EQUAL
65018: AND
65019: PUSH
65020: LD_VAR 0 3
65024: PUSH
65025: LD_VAR 0 1
65029: PPUSH
65030: CALL_OW 437
65034: PUSH
65035: LD_INT 1
65037: ARRAY
65038: PUSH
65039: LD_INT 3
65041: ARRAY
65042: EQUAL
65043: AND
65044: IFFALSE 65054
// result := true ;
65046: LD_ADDR_VAR 0 4
65050: PUSH
65051: LD_INT 1
65053: ST_TO_ADDR
// end ; end ;
65054: LD_VAR 0 4
65058: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65059: LD_INT 0
65061: PPUSH
65062: PPUSH
65063: PPUSH
65064: PPUSH
// if not unit or not area then
65065: LD_VAR 0 1
65069: NOT
65070: PUSH
65071: LD_VAR 0 2
65075: NOT
65076: OR
65077: IFFALSE 65081
// exit ;
65079: GO 65257
// tmp := AreaToList ( area , i ) ;
65081: LD_ADDR_VAR 0 6
65085: PUSH
65086: LD_VAR 0 2
65090: PPUSH
65091: LD_VAR 0 5
65095: PPUSH
65096: CALL_OW 517
65100: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65101: LD_ADDR_VAR 0 5
65105: PUSH
65106: DOUBLE
65107: LD_INT 1
65109: DEC
65110: ST_TO_ADDR
65111: LD_VAR 0 6
65115: PUSH
65116: LD_INT 1
65118: ARRAY
65119: PUSH
65120: FOR_TO
65121: IFFALSE 65255
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65123: LD_ADDR_VAR 0 7
65127: PUSH
65128: LD_VAR 0 6
65132: PUSH
65133: LD_INT 1
65135: ARRAY
65136: PUSH
65137: LD_VAR 0 5
65141: ARRAY
65142: PUSH
65143: LD_VAR 0 6
65147: PUSH
65148: LD_INT 2
65150: ARRAY
65151: PUSH
65152: LD_VAR 0 5
65156: ARRAY
65157: PUSH
65158: EMPTY
65159: LIST
65160: LIST
65161: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
65162: LD_INT 92
65164: PUSH
65165: LD_VAR 0 7
65169: PUSH
65170: LD_INT 1
65172: ARRAY
65173: PUSH
65174: LD_VAR 0 7
65178: PUSH
65179: LD_INT 2
65181: ARRAY
65182: PUSH
65183: LD_INT 2
65185: PUSH
65186: EMPTY
65187: LIST
65188: LIST
65189: LIST
65190: LIST
65191: PPUSH
65192: CALL_OW 69
65196: PUSH
65197: LD_INT 0
65199: EQUAL
65200: IFFALSE 65253
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
65202: LD_VAR 0 1
65206: PPUSH
65207: LD_VAR 0 7
65211: PUSH
65212: LD_INT 1
65214: ARRAY
65215: PPUSH
65216: LD_VAR 0 7
65220: PUSH
65221: LD_INT 2
65223: ARRAY
65224: PPUSH
65225: LD_VAR 0 3
65229: PPUSH
65230: CALL_OW 48
// result := IsPlaced ( unit ) ;
65234: LD_ADDR_VAR 0 4
65238: PUSH
65239: LD_VAR 0 1
65243: PPUSH
65244: CALL_OW 305
65248: ST_TO_ADDR
// exit ;
65249: POP
65250: POP
65251: GO 65257
// end ; end ;
65253: GO 65120
65255: POP
65256: POP
// end ;
65257: LD_VAR 0 4
65261: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65262: LD_INT 0
65264: PPUSH
65265: PPUSH
65266: PPUSH
// if not side or side > 8 then
65267: LD_VAR 0 1
65271: NOT
65272: PUSH
65273: LD_VAR 0 1
65277: PUSH
65278: LD_INT 8
65280: GREATER
65281: OR
65282: IFFALSE 65286
// exit ;
65284: GO 65473
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65286: LD_ADDR_VAR 0 4
65290: PUSH
65291: LD_INT 22
65293: PUSH
65294: LD_VAR 0 1
65298: PUSH
65299: EMPTY
65300: LIST
65301: LIST
65302: PUSH
65303: LD_INT 21
65305: PUSH
65306: LD_INT 3
65308: PUSH
65309: EMPTY
65310: LIST
65311: LIST
65312: PUSH
65313: EMPTY
65314: LIST
65315: LIST
65316: PPUSH
65317: CALL_OW 69
65321: ST_TO_ADDR
// if not tmp then
65322: LD_VAR 0 4
65326: NOT
65327: IFFALSE 65331
// exit ;
65329: GO 65473
// enable_addtolog := true ;
65331: LD_ADDR_OWVAR 81
65335: PUSH
65336: LD_INT 1
65338: ST_TO_ADDR
// AddToLog ( [ ) ;
65339: LD_STRING [
65341: PPUSH
65342: CALL_OW 561
// for i in tmp do
65346: LD_ADDR_VAR 0 3
65350: PUSH
65351: LD_VAR 0 4
65355: PUSH
65356: FOR_IN
65357: IFFALSE 65464
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65359: LD_STRING [
65361: PUSH
65362: LD_VAR 0 3
65366: PPUSH
65367: CALL_OW 266
65371: STR
65372: PUSH
65373: LD_STRING , 
65375: STR
65376: PUSH
65377: LD_VAR 0 3
65381: PPUSH
65382: CALL_OW 250
65386: STR
65387: PUSH
65388: LD_STRING , 
65390: STR
65391: PUSH
65392: LD_VAR 0 3
65396: PPUSH
65397: CALL_OW 251
65401: STR
65402: PUSH
65403: LD_STRING , 
65405: STR
65406: PUSH
65407: LD_VAR 0 3
65411: PPUSH
65412: CALL_OW 254
65416: STR
65417: PUSH
65418: LD_STRING , 
65420: STR
65421: PUSH
65422: LD_VAR 0 3
65426: PPUSH
65427: LD_INT 1
65429: PPUSH
65430: CALL_OW 268
65434: STR
65435: PUSH
65436: LD_STRING , 
65438: STR
65439: PUSH
65440: LD_VAR 0 3
65444: PPUSH
65445: LD_INT 2
65447: PPUSH
65448: CALL_OW 268
65452: STR
65453: PUSH
65454: LD_STRING ],
65456: STR
65457: PPUSH
65458: CALL_OW 561
// end ;
65462: GO 65356
65464: POP
65465: POP
// AddToLog ( ]; ) ;
65466: LD_STRING ];
65468: PPUSH
65469: CALL_OW 561
// end ;
65473: LD_VAR 0 2
65477: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65478: LD_INT 0
65480: PPUSH
65481: PPUSH
65482: PPUSH
65483: PPUSH
65484: PPUSH
// if not area or not rate or not max then
65485: LD_VAR 0 1
65489: NOT
65490: PUSH
65491: LD_VAR 0 2
65495: NOT
65496: OR
65497: PUSH
65498: LD_VAR 0 4
65502: NOT
65503: OR
65504: IFFALSE 65508
// exit ;
65506: GO 65697
// while 1 do
65508: LD_INT 1
65510: IFFALSE 65697
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65512: LD_ADDR_VAR 0 9
65516: PUSH
65517: LD_VAR 0 1
65521: PPUSH
65522: LD_INT 1
65524: PPUSH
65525: CALL_OW 287
65529: PUSH
65530: LD_INT 10
65532: MUL
65533: ST_TO_ADDR
// r := rate / 10 ;
65534: LD_ADDR_VAR 0 7
65538: PUSH
65539: LD_VAR 0 2
65543: PUSH
65544: LD_INT 10
65546: DIVREAL
65547: ST_TO_ADDR
// time := 1 1$00 ;
65548: LD_ADDR_VAR 0 8
65552: PUSH
65553: LD_INT 2100
65555: ST_TO_ADDR
// if amount < min then
65556: LD_VAR 0 9
65560: PUSH
65561: LD_VAR 0 3
65565: LESS
65566: IFFALSE 65584
// r := r * 2 else
65568: LD_ADDR_VAR 0 7
65572: PUSH
65573: LD_VAR 0 7
65577: PUSH
65578: LD_INT 2
65580: MUL
65581: ST_TO_ADDR
65582: GO 65610
// if amount > max then
65584: LD_VAR 0 9
65588: PUSH
65589: LD_VAR 0 4
65593: GREATER
65594: IFFALSE 65610
// r := r / 2 ;
65596: LD_ADDR_VAR 0 7
65600: PUSH
65601: LD_VAR 0 7
65605: PUSH
65606: LD_INT 2
65608: DIVREAL
65609: ST_TO_ADDR
// time := time / r ;
65610: LD_ADDR_VAR 0 8
65614: PUSH
65615: LD_VAR 0 8
65619: PUSH
65620: LD_VAR 0 7
65624: DIVREAL
65625: ST_TO_ADDR
// if time < 0 then
65626: LD_VAR 0 8
65630: PUSH
65631: LD_INT 0
65633: LESS
65634: IFFALSE 65651
// time := time * - 1 ;
65636: LD_ADDR_VAR 0 8
65640: PUSH
65641: LD_VAR 0 8
65645: PUSH
65646: LD_INT 1
65648: NEG
65649: MUL
65650: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
65651: LD_VAR 0 8
65655: PUSH
65656: LD_INT 35
65658: PPUSH
65659: LD_INT 875
65661: PPUSH
65662: CALL_OW 12
65666: PLUS
65667: PPUSH
65668: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65672: LD_INT 1
65674: PPUSH
65675: LD_INT 5
65677: PPUSH
65678: CALL_OW 12
65682: PPUSH
65683: LD_VAR 0 1
65687: PPUSH
65688: LD_INT 1
65690: PPUSH
65691: CALL_OW 55
// end ;
65695: GO 65508
// end ;
65697: LD_VAR 0 5
65701: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65702: LD_INT 0
65704: PPUSH
65705: PPUSH
65706: PPUSH
65707: PPUSH
65708: PPUSH
65709: PPUSH
65710: PPUSH
65711: PPUSH
// if not turrets or not factories then
65712: LD_VAR 0 1
65716: NOT
65717: PUSH
65718: LD_VAR 0 2
65722: NOT
65723: OR
65724: IFFALSE 65728
// exit ;
65726: GO 66035
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65728: LD_ADDR_VAR 0 10
65732: PUSH
65733: LD_INT 5
65735: PUSH
65736: LD_INT 6
65738: PUSH
65739: EMPTY
65740: LIST
65741: LIST
65742: PUSH
65743: LD_INT 2
65745: PUSH
65746: LD_INT 4
65748: PUSH
65749: EMPTY
65750: LIST
65751: LIST
65752: PUSH
65753: LD_INT 3
65755: PUSH
65756: LD_INT 5
65758: PUSH
65759: EMPTY
65760: LIST
65761: LIST
65762: PUSH
65763: EMPTY
65764: LIST
65765: LIST
65766: LIST
65767: PUSH
65768: LD_INT 24
65770: PUSH
65771: LD_INT 25
65773: PUSH
65774: EMPTY
65775: LIST
65776: LIST
65777: PUSH
65778: LD_INT 23
65780: PUSH
65781: LD_INT 27
65783: PUSH
65784: EMPTY
65785: LIST
65786: LIST
65787: PUSH
65788: EMPTY
65789: LIST
65790: LIST
65791: PUSH
65792: LD_INT 42
65794: PUSH
65795: LD_INT 43
65797: PUSH
65798: EMPTY
65799: LIST
65800: LIST
65801: PUSH
65802: LD_INT 44
65804: PUSH
65805: LD_INT 46
65807: PUSH
65808: EMPTY
65809: LIST
65810: LIST
65811: PUSH
65812: LD_INT 45
65814: PUSH
65815: LD_INT 47
65817: PUSH
65818: EMPTY
65819: LIST
65820: LIST
65821: PUSH
65822: EMPTY
65823: LIST
65824: LIST
65825: LIST
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: LIST
65831: ST_TO_ADDR
// result := [ ] ;
65832: LD_ADDR_VAR 0 3
65836: PUSH
65837: EMPTY
65838: ST_TO_ADDR
// for i in turrets do
65839: LD_ADDR_VAR 0 4
65843: PUSH
65844: LD_VAR 0 1
65848: PUSH
65849: FOR_IN
65850: IFFALSE 66033
// begin nat := GetNation ( i ) ;
65852: LD_ADDR_VAR 0 7
65856: PUSH
65857: LD_VAR 0 4
65861: PPUSH
65862: CALL_OW 248
65866: ST_TO_ADDR
// weapon := 0 ;
65867: LD_ADDR_VAR 0 8
65871: PUSH
65872: LD_INT 0
65874: ST_TO_ADDR
// if not nat then
65875: LD_VAR 0 7
65879: NOT
65880: IFFALSE 65884
// continue ;
65882: GO 65849
// for j in list [ nat ] do
65884: LD_ADDR_VAR 0 5
65888: PUSH
65889: LD_VAR 0 10
65893: PUSH
65894: LD_VAR 0 7
65898: ARRAY
65899: PUSH
65900: FOR_IN
65901: IFFALSE 65942
// if GetBWeapon ( i ) = j [ 1 ] then
65903: LD_VAR 0 4
65907: PPUSH
65908: CALL_OW 269
65912: PUSH
65913: LD_VAR 0 5
65917: PUSH
65918: LD_INT 1
65920: ARRAY
65921: EQUAL
65922: IFFALSE 65940
// begin weapon := j [ 2 ] ;
65924: LD_ADDR_VAR 0 8
65928: PUSH
65929: LD_VAR 0 5
65933: PUSH
65934: LD_INT 2
65936: ARRAY
65937: ST_TO_ADDR
// break ;
65938: GO 65942
// end ;
65940: GO 65900
65942: POP
65943: POP
// if not weapon then
65944: LD_VAR 0 8
65948: NOT
65949: IFFALSE 65953
// continue ;
65951: GO 65849
// for k in factories do
65953: LD_ADDR_VAR 0 6
65957: PUSH
65958: LD_VAR 0 2
65962: PUSH
65963: FOR_IN
65964: IFFALSE 66029
// begin weapons := AvailableWeaponList ( k ) ;
65966: LD_ADDR_VAR 0 9
65970: PUSH
65971: LD_VAR 0 6
65975: PPUSH
65976: CALL_OW 478
65980: ST_TO_ADDR
// if not weapons then
65981: LD_VAR 0 9
65985: NOT
65986: IFFALSE 65990
// continue ;
65988: GO 65963
// if weapon in weapons then
65990: LD_VAR 0 8
65994: PUSH
65995: LD_VAR 0 9
65999: IN
66000: IFFALSE 66027
// begin result := [ i , weapon ] ;
66002: LD_ADDR_VAR 0 3
66006: PUSH
66007: LD_VAR 0 4
66011: PUSH
66012: LD_VAR 0 8
66016: PUSH
66017: EMPTY
66018: LIST
66019: LIST
66020: ST_TO_ADDR
// exit ;
66021: POP
66022: POP
66023: POP
66024: POP
66025: GO 66035
// end ; end ;
66027: GO 65963
66029: POP
66030: POP
// end ;
66031: GO 65849
66033: POP
66034: POP
// end ;
66035: LD_VAR 0 3
66039: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66040: LD_INT 0
66042: PPUSH
// if not side or side > 8 then
66043: LD_VAR 0 3
66047: NOT
66048: PUSH
66049: LD_VAR 0 3
66053: PUSH
66054: LD_INT 8
66056: GREATER
66057: OR
66058: IFFALSE 66062
// exit ;
66060: GO 66121
// if not range then
66062: LD_VAR 0 4
66066: NOT
66067: IFFALSE 66078
// range := - 12 ;
66069: LD_ADDR_VAR 0 4
66073: PUSH
66074: LD_INT 12
66076: NEG
66077: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66078: LD_VAR 0 1
66082: PPUSH
66083: LD_VAR 0 2
66087: PPUSH
66088: LD_VAR 0 3
66092: PPUSH
66093: LD_VAR 0 4
66097: PPUSH
66098: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66102: LD_VAR 0 1
66106: PPUSH
66107: LD_VAR 0 2
66111: PPUSH
66112: LD_VAR 0 3
66116: PPUSH
66117: CALL_OW 331
// end ;
66121: LD_VAR 0 5
66125: RET
// export function Video ( mode ) ; begin
66126: LD_INT 0
66128: PPUSH
// ingame_video = mode ;
66129: LD_ADDR_OWVAR 52
66133: PUSH
66134: LD_VAR 0 1
66138: ST_TO_ADDR
// interface_hidden = mode ;
66139: LD_ADDR_OWVAR 54
66143: PUSH
66144: LD_VAR 0 1
66148: ST_TO_ADDR
// end ;
66149: LD_VAR 0 2
66153: RET
// export function Join ( array , element ) ; begin
66154: LD_INT 0
66156: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66157: LD_ADDR_VAR 0 3
66161: PUSH
66162: LD_VAR 0 1
66166: PPUSH
66167: LD_VAR 0 1
66171: PUSH
66172: LD_INT 1
66174: PLUS
66175: PPUSH
66176: LD_VAR 0 2
66180: PPUSH
66181: CALL_OW 1
66185: ST_TO_ADDR
// end ;
66186: LD_VAR 0 3
66190: RET
// export function JoinUnion ( array , element ) ; begin
66191: LD_INT 0
66193: PPUSH
// result := array union element ;
66194: LD_ADDR_VAR 0 3
66198: PUSH
66199: LD_VAR 0 1
66203: PUSH
66204: LD_VAR 0 2
66208: UNION
66209: ST_TO_ADDR
// end ;
66210: LD_VAR 0 3
66214: RET
// export function GetBehemoths ( side ) ; begin
66215: LD_INT 0
66217: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
66218: LD_ADDR_VAR 0 2
66222: PUSH
66223: LD_INT 22
66225: PUSH
66226: LD_VAR 0 1
66230: PUSH
66231: EMPTY
66232: LIST
66233: LIST
66234: PUSH
66235: LD_INT 31
66237: PUSH
66238: LD_INT 25
66240: PUSH
66241: EMPTY
66242: LIST
66243: LIST
66244: PUSH
66245: EMPTY
66246: LIST
66247: LIST
66248: PPUSH
66249: CALL_OW 69
66253: ST_TO_ADDR
// end ;
66254: LD_VAR 0 2
66258: RET
// export function Shuffle ( array ) ; var i , index ; begin
66259: LD_INT 0
66261: PPUSH
66262: PPUSH
66263: PPUSH
// result := [ ] ;
66264: LD_ADDR_VAR 0 2
66268: PUSH
66269: EMPTY
66270: ST_TO_ADDR
// if not array then
66271: LD_VAR 0 1
66275: NOT
66276: IFFALSE 66280
// exit ;
66278: GO 66379
// Randomize ;
66280: CALL_OW 10
// for i = array downto 1 do
66284: LD_ADDR_VAR 0 3
66288: PUSH
66289: DOUBLE
66290: LD_VAR 0 1
66294: INC
66295: ST_TO_ADDR
66296: LD_INT 1
66298: PUSH
66299: FOR_DOWNTO
66300: IFFALSE 66377
// begin index := rand ( 1 , array ) ;
66302: LD_ADDR_VAR 0 4
66306: PUSH
66307: LD_INT 1
66309: PPUSH
66310: LD_VAR 0 1
66314: PPUSH
66315: CALL_OW 12
66319: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66320: LD_ADDR_VAR 0 2
66324: PUSH
66325: LD_VAR 0 2
66329: PPUSH
66330: LD_VAR 0 2
66334: PUSH
66335: LD_INT 1
66337: PLUS
66338: PPUSH
66339: LD_VAR 0 1
66343: PUSH
66344: LD_VAR 0 4
66348: ARRAY
66349: PPUSH
66350: CALL_OW 2
66354: ST_TO_ADDR
// array := Delete ( array , index ) ;
66355: LD_ADDR_VAR 0 1
66359: PUSH
66360: LD_VAR 0 1
66364: PPUSH
66365: LD_VAR 0 4
66369: PPUSH
66370: CALL_OW 3
66374: ST_TO_ADDR
// end ;
66375: GO 66299
66377: POP
66378: POP
// end ;
66379: LD_VAR 0 2
66383: RET
// export function GetBaseMaterials ( base ) ; begin
66384: LD_INT 0
66386: PPUSH
// result := [ 0 , 0 , 0 ] ;
66387: LD_ADDR_VAR 0 2
66391: PUSH
66392: LD_INT 0
66394: PUSH
66395: LD_INT 0
66397: PUSH
66398: LD_INT 0
66400: PUSH
66401: EMPTY
66402: LIST
66403: LIST
66404: LIST
66405: ST_TO_ADDR
// if not base then
66406: LD_VAR 0 1
66410: NOT
66411: IFFALSE 66415
// exit ;
66413: GO 66464
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66415: LD_ADDR_VAR 0 2
66419: PUSH
66420: LD_VAR 0 1
66424: PPUSH
66425: LD_INT 1
66427: PPUSH
66428: CALL_OW 275
66432: PUSH
66433: LD_VAR 0 1
66437: PPUSH
66438: LD_INT 2
66440: PPUSH
66441: CALL_OW 275
66445: PUSH
66446: LD_VAR 0 1
66450: PPUSH
66451: LD_INT 3
66453: PPUSH
66454: CALL_OW 275
66458: PUSH
66459: EMPTY
66460: LIST
66461: LIST
66462: LIST
66463: ST_TO_ADDR
// end ;
66464: LD_VAR 0 2
66468: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66469: LD_INT 0
66471: PPUSH
66472: PPUSH
// result := array ;
66473: LD_ADDR_VAR 0 3
66477: PUSH
66478: LD_VAR 0 1
66482: ST_TO_ADDR
// if size >= result then
66483: LD_VAR 0 2
66487: PUSH
66488: LD_VAR 0 3
66492: GREATEREQUAL
66493: IFFALSE 66497
// exit ;
66495: GO 66547
// if size then
66497: LD_VAR 0 2
66501: IFFALSE 66547
// for i := array downto size do
66503: LD_ADDR_VAR 0 4
66507: PUSH
66508: DOUBLE
66509: LD_VAR 0 1
66513: INC
66514: ST_TO_ADDR
66515: LD_VAR 0 2
66519: PUSH
66520: FOR_DOWNTO
66521: IFFALSE 66545
// result := Delete ( result , result ) ;
66523: LD_ADDR_VAR 0 3
66527: PUSH
66528: LD_VAR 0 3
66532: PPUSH
66533: LD_VAR 0 3
66537: PPUSH
66538: CALL_OW 3
66542: ST_TO_ADDR
66543: GO 66520
66545: POP
66546: POP
// end ;
66547: LD_VAR 0 3
66551: RET
// export function ComExit ( unit ) ; var tmp ; begin
66552: LD_INT 0
66554: PPUSH
66555: PPUSH
// if not IsInUnit ( unit ) then
66556: LD_VAR 0 1
66560: PPUSH
66561: CALL_OW 310
66565: NOT
66566: IFFALSE 66570
// exit ;
66568: GO 66630
// tmp := IsInUnit ( unit ) ;
66570: LD_ADDR_VAR 0 3
66574: PUSH
66575: LD_VAR 0 1
66579: PPUSH
66580: CALL_OW 310
66584: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66585: LD_VAR 0 3
66589: PPUSH
66590: CALL_OW 247
66594: PUSH
66595: LD_INT 2
66597: EQUAL
66598: IFFALSE 66611
// ComExitVehicle ( unit ) else
66600: LD_VAR 0 1
66604: PPUSH
66605: CALL_OW 121
66609: GO 66620
// ComExitBuilding ( unit ) ;
66611: LD_VAR 0 1
66615: PPUSH
66616: CALL_OW 122
// result := tmp ;
66620: LD_ADDR_VAR 0 2
66624: PUSH
66625: LD_VAR 0 3
66629: ST_TO_ADDR
// end ;
66630: LD_VAR 0 2
66634: RET
// export function ComExitAll ( units ) ; var i ; begin
66635: LD_INT 0
66637: PPUSH
66638: PPUSH
// if not units then
66639: LD_VAR 0 1
66643: NOT
66644: IFFALSE 66648
// exit ;
66646: GO 66674
// for i in units do
66648: LD_ADDR_VAR 0 3
66652: PUSH
66653: LD_VAR 0 1
66657: PUSH
66658: FOR_IN
66659: IFFALSE 66672
// ComExit ( i ) ;
66661: LD_VAR 0 3
66665: PPUSH
66666: CALL 66552 0 1
66670: GO 66658
66672: POP
66673: POP
// end ;
66674: LD_VAR 0 2
66678: RET
// export function ResetHc ; begin
66679: LD_INT 0
66681: PPUSH
// InitHc ;
66682: CALL_OW 19
// hc_importance := 0 ;
66686: LD_ADDR_OWVAR 32
66690: PUSH
66691: LD_INT 0
66693: ST_TO_ADDR
// end ;
66694: LD_VAR 0 1
66698: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
66699: LD_INT 0
66701: PPUSH
66702: PPUSH
66703: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66704: LD_ADDR_VAR 0 6
66708: PUSH
66709: LD_VAR 0 1
66713: PUSH
66714: LD_VAR 0 3
66718: PLUS
66719: PUSH
66720: LD_INT 2
66722: DIV
66723: ST_TO_ADDR
// if _x < 0 then
66724: LD_VAR 0 6
66728: PUSH
66729: LD_INT 0
66731: LESS
66732: IFFALSE 66749
// _x := _x * - 1 ;
66734: LD_ADDR_VAR 0 6
66738: PUSH
66739: LD_VAR 0 6
66743: PUSH
66744: LD_INT 1
66746: NEG
66747: MUL
66748: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66749: LD_ADDR_VAR 0 7
66753: PUSH
66754: LD_VAR 0 2
66758: PUSH
66759: LD_VAR 0 4
66763: PLUS
66764: PUSH
66765: LD_INT 2
66767: DIV
66768: ST_TO_ADDR
// if _y < 0 then
66769: LD_VAR 0 7
66773: PUSH
66774: LD_INT 0
66776: LESS
66777: IFFALSE 66794
// _y := _y * - 1 ;
66779: LD_ADDR_VAR 0 7
66783: PUSH
66784: LD_VAR 0 7
66788: PUSH
66789: LD_INT 1
66791: NEG
66792: MUL
66793: ST_TO_ADDR
// result := [ _x , _y ] ;
66794: LD_ADDR_VAR 0 5
66798: PUSH
66799: LD_VAR 0 6
66803: PUSH
66804: LD_VAR 0 7
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: ST_TO_ADDR
// end ;
66813: LD_VAR 0 5
66817: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66818: LD_INT 0
66820: PPUSH
66821: PPUSH
66822: PPUSH
66823: PPUSH
// task := GetTaskList ( unit ) ;
66824: LD_ADDR_VAR 0 7
66828: PUSH
66829: LD_VAR 0 1
66833: PPUSH
66834: CALL_OW 437
66838: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66839: LD_VAR 0 7
66843: NOT
66844: PUSH
66845: LD_VAR 0 1
66849: PPUSH
66850: LD_VAR 0 2
66854: PPUSH
66855: CALL_OW 308
66859: NOT
66860: AND
66861: IFFALSE 66865
// exit ;
66863: GO 66983
// if IsInArea ( unit , area ) then
66865: LD_VAR 0 1
66869: PPUSH
66870: LD_VAR 0 2
66874: PPUSH
66875: CALL_OW 308
66879: IFFALSE 66897
// begin ComMoveToArea ( unit , goAway ) ;
66881: LD_VAR 0 1
66885: PPUSH
66886: LD_VAR 0 3
66890: PPUSH
66891: CALL_OW 113
// exit ;
66895: GO 66983
// end ; if task [ 1 ] [ 1 ] <> M then
66897: LD_VAR 0 7
66901: PUSH
66902: LD_INT 1
66904: ARRAY
66905: PUSH
66906: LD_INT 1
66908: ARRAY
66909: PUSH
66910: LD_STRING M
66912: NONEQUAL
66913: IFFALSE 66917
// exit ;
66915: GO 66983
// x := task [ 1 ] [ 2 ] ;
66917: LD_ADDR_VAR 0 5
66921: PUSH
66922: LD_VAR 0 7
66926: PUSH
66927: LD_INT 1
66929: ARRAY
66930: PUSH
66931: LD_INT 2
66933: ARRAY
66934: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66935: LD_ADDR_VAR 0 6
66939: PUSH
66940: LD_VAR 0 7
66944: PUSH
66945: LD_INT 1
66947: ARRAY
66948: PUSH
66949: LD_INT 3
66951: ARRAY
66952: ST_TO_ADDR
// if InArea ( x , y , area ) then
66953: LD_VAR 0 5
66957: PPUSH
66958: LD_VAR 0 6
66962: PPUSH
66963: LD_VAR 0 2
66967: PPUSH
66968: CALL_OW 309
66972: IFFALSE 66983
// ComStop ( unit ) ;
66974: LD_VAR 0 1
66978: PPUSH
66979: CALL_OW 141
// end ;
66983: LD_VAR 0 4
66987: RET
// export function Abs ( value ) ; begin
66988: LD_INT 0
66990: PPUSH
// result := value ;
66991: LD_ADDR_VAR 0 2
66995: PUSH
66996: LD_VAR 0 1
67000: ST_TO_ADDR
// if value < 0 then
67001: LD_VAR 0 1
67005: PUSH
67006: LD_INT 0
67008: LESS
67009: IFFALSE 67026
// result := value * - 1 ;
67011: LD_ADDR_VAR 0 2
67015: PUSH
67016: LD_VAR 0 1
67020: PUSH
67021: LD_INT 1
67023: NEG
67024: MUL
67025: ST_TO_ADDR
// end ;
67026: LD_VAR 0 2
67030: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67031: LD_INT 0
67033: PPUSH
67034: PPUSH
67035: PPUSH
67036: PPUSH
67037: PPUSH
67038: PPUSH
67039: PPUSH
67040: PPUSH
// if not unit or not building then
67041: LD_VAR 0 1
67045: NOT
67046: PUSH
67047: LD_VAR 0 2
67051: NOT
67052: OR
67053: IFFALSE 67057
// exit ;
67055: GO 67283
// x := GetX ( building ) ;
67057: LD_ADDR_VAR 0 4
67061: PUSH
67062: LD_VAR 0 2
67066: PPUSH
67067: CALL_OW 250
67071: ST_TO_ADDR
// y := GetY ( building ) ;
67072: LD_ADDR_VAR 0 6
67076: PUSH
67077: LD_VAR 0 2
67081: PPUSH
67082: CALL_OW 251
67086: ST_TO_ADDR
// d := GetDir ( building ) ;
67087: LD_ADDR_VAR 0 8
67091: PUSH
67092: LD_VAR 0 2
67096: PPUSH
67097: CALL_OW 254
67101: ST_TO_ADDR
// r := 4 ;
67102: LD_ADDR_VAR 0 9
67106: PUSH
67107: LD_INT 4
67109: ST_TO_ADDR
// for i := 1 to 5 do
67110: LD_ADDR_VAR 0 10
67114: PUSH
67115: DOUBLE
67116: LD_INT 1
67118: DEC
67119: ST_TO_ADDR
67120: LD_INT 5
67122: PUSH
67123: FOR_TO
67124: IFFALSE 67281
// begin _x := ShiftX ( x , d , r + i ) ;
67126: LD_ADDR_VAR 0 5
67130: PUSH
67131: LD_VAR 0 4
67135: PPUSH
67136: LD_VAR 0 8
67140: PPUSH
67141: LD_VAR 0 9
67145: PUSH
67146: LD_VAR 0 10
67150: PLUS
67151: PPUSH
67152: CALL_OW 272
67156: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67157: LD_ADDR_VAR 0 7
67161: PUSH
67162: LD_VAR 0 6
67166: PPUSH
67167: LD_VAR 0 8
67171: PPUSH
67172: LD_VAR 0 9
67176: PUSH
67177: LD_VAR 0 10
67181: PLUS
67182: PPUSH
67183: CALL_OW 273
67187: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67188: LD_VAR 0 5
67192: PPUSH
67193: LD_VAR 0 7
67197: PPUSH
67198: CALL_OW 488
67202: PUSH
67203: LD_VAR 0 5
67207: PPUSH
67208: LD_VAR 0 7
67212: PPUSH
67213: CALL_OW 428
67217: PPUSH
67218: CALL_OW 247
67222: PUSH
67223: LD_INT 3
67225: PUSH
67226: LD_INT 2
67228: PUSH
67229: EMPTY
67230: LIST
67231: LIST
67232: IN
67233: NOT
67234: AND
67235: IFFALSE 67279
// begin ComMoveXY ( unit , _x , _y ) ;
67237: LD_VAR 0 1
67241: PPUSH
67242: LD_VAR 0 5
67246: PPUSH
67247: LD_VAR 0 7
67251: PPUSH
67252: CALL_OW 111
// result := [ _x , _y ] ;
67256: LD_ADDR_VAR 0 3
67260: PUSH
67261: LD_VAR 0 5
67265: PUSH
67266: LD_VAR 0 7
67270: PUSH
67271: EMPTY
67272: LIST
67273: LIST
67274: ST_TO_ADDR
// exit ;
67275: POP
67276: POP
67277: GO 67283
// end ; end ;
67279: GO 67123
67281: POP
67282: POP
// end ;
67283: LD_VAR 0 3
67287: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67288: LD_INT 0
67290: PPUSH
67291: PPUSH
67292: PPUSH
// result := 0 ;
67293: LD_ADDR_VAR 0 3
67297: PUSH
67298: LD_INT 0
67300: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67301: LD_VAR 0 1
67305: PUSH
67306: LD_INT 0
67308: LESS
67309: PUSH
67310: LD_VAR 0 1
67314: PUSH
67315: LD_INT 8
67317: GREATER
67318: OR
67319: PUSH
67320: LD_VAR 0 2
67324: PUSH
67325: LD_INT 0
67327: LESS
67328: OR
67329: PUSH
67330: LD_VAR 0 2
67334: PUSH
67335: LD_INT 8
67337: GREATER
67338: OR
67339: IFFALSE 67343
// exit ;
67341: GO 67418
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67343: LD_ADDR_VAR 0 4
67347: PUSH
67348: LD_INT 22
67350: PUSH
67351: LD_VAR 0 2
67355: PUSH
67356: EMPTY
67357: LIST
67358: LIST
67359: PPUSH
67360: CALL_OW 69
67364: PUSH
67365: FOR_IN
67366: IFFALSE 67416
// begin un := UnitShoot ( i ) ;
67368: LD_ADDR_VAR 0 5
67372: PUSH
67373: LD_VAR 0 4
67377: PPUSH
67378: CALL_OW 504
67382: ST_TO_ADDR
// if GetSide ( un ) = side1 then
67383: LD_VAR 0 5
67387: PPUSH
67388: CALL_OW 255
67392: PUSH
67393: LD_VAR 0 1
67397: EQUAL
67398: IFFALSE 67414
// begin result := un ;
67400: LD_ADDR_VAR 0 3
67404: PUSH
67405: LD_VAR 0 5
67409: ST_TO_ADDR
// exit ;
67410: POP
67411: POP
67412: GO 67418
// end ; end ;
67414: GO 67365
67416: POP
67417: POP
// end ;
67418: LD_VAR 0 3
67422: RET
// export function GetCargoBay ( units ) ; begin
67423: LD_INT 0
67425: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
67426: LD_ADDR_VAR 0 2
67430: PUSH
67431: LD_VAR 0 1
67435: PPUSH
67436: LD_INT 2
67438: PUSH
67439: LD_INT 34
67441: PUSH
67442: LD_INT 12
67444: PUSH
67445: EMPTY
67446: LIST
67447: LIST
67448: PUSH
67449: LD_INT 34
67451: PUSH
67452: LD_INT 51
67454: PUSH
67455: EMPTY
67456: LIST
67457: LIST
67458: PUSH
67459: LD_INT 34
67461: PUSH
67462: LD_INT 32
67464: PUSH
67465: EMPTY
67466: LIST
67467: LIST
67468: PUSH
67469: LD_INT 34
67471: PUSH
67472: LD_INT 89
67474: PUSH
67475: EMPTY
67476: LIST
67477: LIST
67478: PUSH
67479: EMPTY
67480: LIST
67481: LIST
67482: LIST
67483: LIST
67484: LIST
67485: PPUSH
67486: CALL_OW 72
67490: ST_TO_ADDR
// end ;
67491: LD_VAR 0 2
67495: RET
// export function Negate ( value ) ; begin
67496: LD_INT 0
67498: PPUSH
// result := not value ;
67499: LD_ADDR_VAR 0 2
67503: PUSH
67504: LD_VAR 0 1
67508: NOT
67509: ST_TO_ADDR
// end ;
67510: LD_VAR 0 2
67514: RET
// export function Inc ( value ) ; begin
67515: LD_INT 0
67517: PPUSH
// result := value + 1 ;
67518: LD_ADDR_VAR 0 2
67522: PUSH
67523: LD_VAR 0 1
67527: PUSH
67528: LD_INT 1
67530: PLUS
67531: ST_TO_ADDR
// end ;
67532: LD_VAR 0 2
67536: RET
// export function Dec ( value ) ; begin
67537: LD_INT 0
67539: PPUSH
// result := value - 1 ;
67540: LD_ADDR_VAR 0 2
67544: PUSH
67545: LD_VAR 0 1
67549: PUSH
67550: LD_INT 1
67552: MINUS
67553: ST_TO_ADDR
// end ;
67554: LD_VAR 0 2
67558: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
67559: LD_INT 0
67561: PPUSH
67562: PPUSH
67563: PPUSH
67564: PPUSH
67565: PPUSH
67566: PPUSH
67567: PPUSH
67568: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
67569: LD_VAR 0 1
67573: PPUSH
67574: LD_VAR 0 2
67578: PPUSH
67579: CALL_OW 488
67583: NOT
67584: PUSH
67585: LD_VAR 0 3
67589: PPUSH
67590: LD_VAR 0 4
67594: PPUSH
67595: CALL_OW 488
67599: NOT
67600: OR
67601: IFFALSE 67614
// begin result := - 1 ;
67603: LD_ADDR_VAR 0 5
67607: PUSH
67608: LD_INT 1
67610: NEG
67611: ST_TO_ADDR
// exit ;
67612: GO 67849
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
67614: LD_ADDR_VAR 0 12
67618: PUSH
67619: LD_VAR 0 1
67623: PPUSH
67624: LD_VAR 0 2
67628: PPUSH
67629: LD_VAR 0 3
67633: PPUSH
67634: LD_VAR 0 4
67638: PPUSH
67639: CALL 66699 0 4
67643: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
67644: LD_ADDR_VAR 0 11
67648: PUSH
67649: LD_VAR 0 1
67653: PPUSH
67654: LD_VAR 0 2
67658: PPUSH
67659: LD_VAR 0 12
67663: PUSH
67664: LD_INT 1
67666: ARRAY
67667: PPUSH
67668: LD_VAR 0 12
67672: PUSH
67673: LD_INT 2
67675: ARRAY
67676: PPUSH
67677: CALL_OW 298
67681: ST_TO_ADDR
// distance := 9999 ;
67682: LD_ADDR_VAR 0 10
67686: PUSH
67687: LD_INT 9999
67689: ST_TO_ADDR
// for i := 0 to 5 do
67690: LD_ADDR_VAR 0 6
67694: PUSH
67695: DOUBLE
67696: LD_INT 0
67698: DEC
67699: ST_TO_ADDR
67700: LD_INT 5
67702: PUSH
67703: FOR_TO
67704: IFFALSE 67847
// begin _x := ShiftX ( x1 , i , centerDist ) ;
67706: LD_ADDR_VAR 0 7
67710: PUSH
67711: LD_VAR 0 1
67715: PPUSH
67716: LD_VAR 0 6
67720: PPUSH
67721: LD_VAR 0 11
67725: PPUSH
67726: CALL_OW 272
67730: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
67731: LD_ADDR_VAR 0 8
67735: PUSH
67736: LD_VAR 0 2
67740: PPUSH
67741: LD_VAR 0 6
67745: PPUSH
67746: LD_VAR 0 11
67750: PPUSH
67751: CALL_OW 273
67755: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
67756: LD_VAR 0 7
67760: PPUSH
67761: LD_VAR 0 8
67765: PPUSH
67766: CALL_OW 488
67770: NOT
67771: IFFALSE 67775
// continue ;
67773: GO 67703
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
67775: LD_ADDR_VAR 0 9
67779: PUSH
67780: LD_VAR 0 12
67784: PUSH
67785: LD_INT 1
67787: ARRAY
67788: PPUSH
67789: LD_VAR 0 12
67793: PUSH
67794: LD_INT 2
67796: ARRAY
67797: PPUSH
67798: LD_VAR 0 7
67802: PPUSH
67803: LD_VAR 0 8
67807: PPUSH
67808: CALL_OW 298
67812: ST_TO_ADDR
// if tmp < distance then
67813: LD_VAR 0 9
67817: PUSH
67818: LD_VAR 0 10
67822: LESS
67823: IFFALSE 67845
// begin result := i ;
67825: LD_ADDR_VAR 0 5
67829: PUSH
67830: LD_VAR 0 6
67834: ST_TO_ADDR
// distance := tmp ;
67835: LD_ADDR_VAR 0 10
67839: PUSH
67840: LD_VAR 0 9
67844: ST_TO_ADDR
// end ; end ;
67845: GO 67703
67847: POP
67848: POP
// end ;
67849: LD_VAR 0 5
67853: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67854: LD_INT 0
67856: PPUSH
67857: PPUSH
// if not driver or not IsInUnit ( driver ) then
67858: LD_VAR 0 1
67862: NOT
67863: PUSH
67864: LD_VAR 0 1
67868: PPUSH
67869: CALL_OW 310
67873: NOT
67874: OR
67875: IFFALSE 67879
// exit ;
67877: GO 67969
// vehicle := IsInUnit ( driver ) ;
67879: LD_ADDR_VAR 0 3
67883: PUSH
67884: LD_VAR 0 1
67888: PPUSH
67889: CALL_OW 310
67893: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67894: LD_VAR 0 1
67898: PPUSH
67899: LD_STRING \
67901: PUSH
67902: LD_INT 0
67904: PUSH
67905: LD_INT 0
67907: PUSH
67908: LD_INT 0
67910: PUSH
67911: LD_INT 0
67913: PUSH
67914: LD_INT 0
67916: PUSH
67917: LD_INT 0
67919: PUSH
67920: EMPTY
67921: LIST
67922: LIST
67923: LIST
67924: LIST
67925: LIST
67926: LIST
67927: LIST
67928: PUSH
67929: LD_STRING E
67931: PUSH
67932: LD_INT 0
67934: PUSH
67935: LD_INT 0
67937: PUSH
67938: LD_VAR 0 3
67942: PUSH
67943: LD_INT 0
67945: PUSH
67946: LD_INT 0
67948: PUSH
67949: LD_INT 0
67951: PUSH
67952: EMPTY
67953: LIST
67954: LIST
67955: LIST
67956: LIST
67957: LIST
67958: LIST
67959: LIST
67960: PUSH
67961: EMPTY
67962: LIST
67963: LIST
67964: PPUSH
67965: CALL_OW 446
// end ;
67969: LD_VAR 0 2
67973: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67974: LD_INT 0
67976: PPUSH
67977: PPUSH
// if not driver or not IsInUnit ( driver ) then
67978: LD_VAR 0 1
67982: NOT
67983: PUSH
67984: LD_VAR 0 1
67988: PPUSH
67989: CALL_OW 310
67993: NOT
67994: OR
67995: IFFALSE 67999
// exit ;
67997: GO 68089
// vehicle := IsInUnit ( driver ) ;
67999: LD_ADDR_VAR 0 3
68003: PUSH
68004: LD_VAR 0 1
68008: PPUSH
68009: CALL_OW 310
68013: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68014: LD_VAR 0 1
68018: PPUSH
68019: LD_STRING \
68021: PUSH
68022: LD_INT 0
68024: PUSH
68025: LD_INT 0
68027: PUSH
68028: LD_INT 0
68030: PUSH
68031: LD_INT 0
68033: PUSH
68034: LD_INT 0
68036: PUSH
68037: LD_INT 0
68039: PUSH
68040: EMPTY
68041: LIST
68042: LIST
68043: LIST
68044: LIST
68045: LIST
68046: LIST
68047: LIST
68048: PUSH
68049: LD_STRING E
68051: PUSH
68052: LD_INT 0
68054: PUSH
68055: LD_INT 0
68057: PUSH
68058: LD_VAR 0 3
68062: PUSH
68063: LD_INT 0
68065: PUSH
68066: LD_INT 0
68068: PUSH
68069: LD_INT 0
68071: PUSH
68072: EMPTY
68073: LIST
68074: LIST
68075: LIST
68076: LIST
68077: LIST
68078: LIST
68079: LIST
68080: PUSH
68081: EMPTY
68082: LIST
68083: LIST
68084: PPUSH
68085: CALL_OW 447
// end ;
68089: LD_VAR 0 2
68093: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68094: LD_INT 0
68096: PPUSH
68097: PPUSH
68098: PPUSH
// tmp := [ ] ;
68099: LD_ADDR_VAR 0 5
68103: PUSH
68104: EMPTY
68105: ST_TO_ADDR
// for i in units do
68106: LD_ADDR_VAR 0 4
68110: PUSH
68111: LD_VAR 0 1
68115: PUSH
68116: FOR_IN
68117: IFFALSE 68155
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68119: LD_ADDR_VAR 0 5
68123: PUSH
68124: LD_VAR 0 5
68128: PPUSH
68129: LD_VAR 0 5
68133: PUSH
68134: LD_INT 1
68136: PLUS
68137: PPUSH
68138: LD_VAR 0 4
68142: PPUSH
68143: CALL_OW 256
68147: PPUSH
68148: CALL_OW 2
68152: ST_TO_ADDR
68153: GO 68116
68155: POP
68156: POP
// if not tmp then
68157: LD_VAR 0 5
68161: NOT
68162: IFFALSE 68166
// exit ;
68164: GO 68214
// if asc then
68166: LD_VAR 0 2
68170: IFFALSE 68194
// result := SortListByListAsc ( units , tmp ) else
68172: LD_ADDR_VAR 0 3
68176: PUSH
68177: LD_VAR 0 1
68181: PPUSH
68182: LD_VAR 0 5
68186: PPUSH
68187: CALL_OW 76
68191: ST_TO_ADDR
68192: GO 68214
// result := SortListByListDesc ( units , tmp ) ;
68194: LD_ADDR_VAR 0 3
68198: PUSH
68199: LD_VAR 0 1
68203: PPUSH
68204: LD_VAR 0 5
68208: PPUSH
68209: CALL_OW 77
68213: ST_TO_ADDR
// end ;
68214: LD_VAR 0 3
68218: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
68219: LD_INT 0
68221: PPUSH
68222: PPUSH
// task := GetTaskList ( mech ) ;
68223: LD_ADDR_VAR 0 4
68227: PUSH
68228: LD_VAR 0 1
68232: PPUSH
68233: CALL_OW 437
68237: ST_TO_ADDR
// if not task then
68238: LD_VAR 0 4
68242: NOT
68243: IFFALSE 68247
// exit ;
68245: GO 68289
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
68247: LD_ADDR_VAR 0 3
68251: PUSH
68252: LD_VAR 0 4
68256: PUSH
68257: LD_INT 1
68259: ARRAY
68260: PUSH
68261: LD_INT 1
68263: ARRAY
68264: PUSH
68265: LD_STRING r
68267: EQUAL
68268: PUSH
68269: LD_VAR 0 4
68273: PUSH
68274: LD_INT 1
68276: ARRAY
68277: PUSH
68278: LD_INT 4
68280: ARRAY
68281: PUSH
68282: LD_VAR 0 2
68286: EQUAL
68287: AND
68288: ST_TO_ADDR
// end ;
68289: LD_VAR 0 3
68293: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
68294: LD_INT 0
68296: PPUSH
// SetDir ( unit , d ) ;
68297: LD_VAR 0 1
68301: PPUSH
68302: LD_VAR 0 4
68306: PPUSH
68307: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
68311: LD_ADDR_VAR 0 6
68315: PUSH
68316: LD_VAR 0 1
68320: PPUSH
68321: LD_VAR 0 2
68325: PPUSH
68326: LD_VAR 0 3
68330: PPUSH
68331: LD_VAR 0 5
68335: PPUSH
68336: CALL_OW 48
68340: ST_TO_ADDR
// end ;
68341: LD_VAR 0 6
68345: RET
// export function ToNaturalNumber ( number ) ; begin
68346: LD_INT 0
68348: PPUSH
// result := number div 1 ;
68349: LD_ADDR_VAR 0 2
68353: PUSH
68354: LD_VAR 0 1
68358: PUSH
68359: LD_INT 1
68361: DIV
68362: ST_TO_ADDR
// if number < 0 then
68363: LD_VAR 0 1
68367: PUSH
68368: LD_INT 0
68370: LESS
68371: IFFALSE 68381
// result := 0 ;
68373: LD_ADDR_VAR 0 2
68377: PUSH
68378: LD_INT 0
68380: ST_TO_ADDR
// end ;
68381: LD_VAR 0 2
68385: RET
// export function SortByClass ( units , class ) ; var un ; begin
68386: LD_INT 0
68388: PPUSH
68389: PPUSH
// if not units or not class then
68390: LD_VAR 0 1
68394: NOT
68395: PUSH
68396: LD_VAR 0 2
68400: NOT
68401: OR
68402: IFFALSE 68406
// exit ;
68404: GO 68501
// result := [ ] ;
68406: LD_ADDR_VAR 0 3
68410: PUSH
68411: EMPTY
68412: ST_TO_ADDR
// for un in units do
68413: LD_ADDR_VAR 0 4
68417: PUSH
68418: LD_VAR 0 1
68422: PUSH
68423: FOR_IN
68424: IFFALSE 68499
// if GetClass ( un ) = class then
68426: LD_VAR 0 4
68430: PPUSH
68431: CALL_OW 257
68435: PUSH
68436: LD_VAR 0 2
68440: EQUAL
68441: IFFALSE 68468
// result := Insert ( result , 1 , un ) else
68443: LD_ADDR_VAR 0 3
68447: PUSH
68448: LD_VAR 0 3
68452: PPUSH
68453: LD_INT 1
68455: PPUSH
68456: LD_VAR 0 4
68460: PPUSH
68461: CALL_OW 2
68465: ST_TO_ADDR
68466: GO 68497
// result := Replace ( result , result + 1 , un ) ;
68468: LD_ADDR_VAR 0 3
68472: PUSH
68473: LD_VAR 0 3
68477: PPUSH
68478: LD_VAR 0 3
68482: PUSH
68483: LD_INT 1
68485: PLUS
68486: PPUSH
68487: LD_VAR 0 4
68491: PPUSH
68492: CALL_OW 1
68496: ST_TO_ADDR
68497: GO 68423
68499: POP
68500: POP
// end ;
68501: LD_VAR 0 3
68505: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
68506: LD_INT 0
68508: PPUSH
68509: PPUSH
68510: PPUSH
68511: PPUSH
68512: PPUSH
68513: PPUSH
68514: PPUSH
// result := [ ] ;
68515: LD_ADDR_VAR 0 4
68519: PUSH
68520: EMPTY
68521: ST_TO_ADDR
// if x - r < 0 then
68522: LD_VAR 0 1
68526: PUSH
68527: LD_VAR 0 3
68531: MINUS
68532: PUSH
68533: LD_INT 0
68535: LESS
68536: IFFALSE 68548
// min_x := 0 else
68538: LD_ADDR_VAR 0 8
68542: PUSH
68543: LD_INT 0
68545: ST_TO_ADDR
68546: GO 68564
// min_x := x - r ;
68548: LD_ADDR_VAR 0 8
68552: PUSH
68553: LD_VAR 0 1
68557: PUSH
68558: LD_VAR 0 3
68562: MINUS
68563: ST_TO_ADDR
// if y - r < 0 then
68564: LD_VAR 0 2
68568: PUSH
68569: LD_VAR 0 3
68573: MINUS
68574: PUSH
68575: LD_INT 0
68577: LESS
68578: IFFALSE 68590
// min_y := 0 else
68580: LD_ADDR_VAR 0 7
68584: PUSH
68585: LD_INT 0
68587: ST_TO_ADDR
68588: GO 68606
// min_y := y - r ;
68590: LD_ADDR_VAR 0 7
68594: PUSH
68595: LD_VAR 0 2
68599: PUSH
68600: LD_VAR 0 3
68604: MINUS
68605: ST_TO_ADDR
// max_x := x + r ;
68606: LD_ADDR_VAR 0 9
68610: PUSH
68611: LD_VAR 0 1
68615: PUSH
68616: LD_VAR 0 3
68620: PLUS
68621: ST_TO_ADDR
// max_y := y + r ;
68622: LD_ADDR_VAR 0 10
68626: PUSH
68627: LD_VAR 0 2
68631: PUSH
68632: LD_VAR 0 3
68636: PLUS
68637: ST_TO_ADDR
// for _x = min_x to max_x do
68638: LD_ADDR_VAR 0 5
68642: PUSH
68643: DOUBLE
68644: LD_VAR 0 8
68648: DEC
68649: ST_TO_ADDR
68650: LD_VAR 0 9
68654: PUSH
68655: FOR_TO
68656: IFFALSE 68757
// for _y = min_y to max_y do
68658: LD_ADDR_VAR 0 6
68662: PUSH
68663: DOUBLE
68664: LD_VAR 0 7
68668: DEC
68669: ST_TO_ADDR
68670: LD_VAR 0 10
68674: PUSH
68675: FOR_TO
68676: IFFALSE 68753
// begin if not ValidHex ( _x , _y ) then
68678: LD_VAR 0 5
68682: PPUSH
68683: LD_VAR 0 6
68687: PPUSH
68688: CALL_OW 488
68692: NOT
68693: IFFALSE 68697
// continue ;
68695: GO 68675
// if GetResourceTypeXY ( _x , _y ) then
68697: LD_VAR 0 5
68701: PPUSH
68702: LD_VAR 0 6
68706: PPUSH
68707: CALL_OW 283
68711: IFFALSE 68751
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
68713: LD_ADDR_VAR 0 4
68717: PUSH
68718: LD_VAR 0 4
68722: PPUSH
68723: LD_VAR 0 4
68727: PUSH
68728: LD_INT 1
68730: PLUS
68731: PPUSH
68732: LD_VAR 0 5
68736: PUSH
68737: LD_VAR 0 6
68741: PUSH
68742: EMPTY
68743: LIST
68744: LIST
68745: PPUSH
68746: CALL_OW 1
68750: ST_TO_ADDR
// end ;
68751: GO 68675
68753: POP
68754: POP
68755: GO 68655
68757: POP
68758: POP
// end ;
68759: LD_VAR 0 4
68763: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
68764: LD_INT 0
68766: PPUSH
68767: PPUSH
68768: PPUSH
68769: PPUSH
68770: PPUSH
68771: PPUSH
68772: PPUSH
68773: PPUSH
// if not units then
68774: LD_VAR 0 1
68778: NOT
68779: IFFALSE 68783
// exit ;
68781: GO 69311
// result := UnitFilter ( units , [ f_ok ] ) ;
68783: LD_ADDR_VAR 0 3
68787: PUSH
68788: LD_VAR 0 1
68792: PPUSH
68793: LD_INT 50
68795: PUSH
68796: EMPTY
68797: LIST
68798: PPUSH
68799: CALL_OW 72
68803: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
68804: LD_ADDR_VAR 0 8
68808: PUSH
68809: LD_VAR 0 1
68813: PUSH
68814: LD_INT 1
68816: ARRAY
68817: PPUSH
68818: CALL_OW 255
68822: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
68823: LD_ADDR_VAR 0 10
68827: PUSH
68828: LD_INT 29
68830: PUSH
68831: LD_INT 91
68833: PUSH
68834: LD_INT 49
68836: PUSH
68837: EMPTY
68838: LIST
68839: LIST
68840: LIST
68841: ST_TO_ADDR
// if not result then
68842: LD_VAR 0 3
68846: NOT
68847: IFFALSE 68851
// exit ;
68849: GO 69311
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
68851: LD_ADDR_VAR 0 5
68855: PUSH
68856: LD_INT 81
68858: PUSH
68859: LD_VAR 0 8
68863: PUSH
68864: EMPTY
68865: LIST
68866: LIST
68867: PPUSH
68868: CALL_OW 69
68872: ST_TO_ADDR
// for i in result do
68873: LD_ADDR_VAR 0 4
68877: PUSH
68878: LD_VAR 0 3
68882: PUSH
68883: FOR_IN
68884: IFFALSE 69309
// begin tag := GetTag ( i ) + 1 ;
68886: LD_ADDR_VAR 0 9
68890: PUSH
68891: LD_VAR 0 4
68895: PPUSH
68896: CALL_OW 110
68900: PUSH
68901: LD_INT 1
68903: PLUS
68904: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
68905: LD_ADDR_VAR 0 7
68909: PUSH
68910: LD_VAR 0 4
68914: PPUSH
68915: CALL_OW 250
68919: PPUSH
68920: LD_VAR 0 4
68924: PPUSH
68925: CALL_OW 251
68929: PPUSH
68930: LD_INT 4
68932: PPUSH
68933: CALL 68506 0 3
68937: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
68938: LD_VAR 0 4
68942: PPUSH
68943: CALL_OW 247
68947: PUSH
68948: LD_INT 2
68950: EQUAL
68951: PUSH
68952: LD_VAR 0 7
68956: PUSH
68957: LD_INT 2
68959: GREATER
68960: AND
68961: PUSH
68962: LD_VAR 0 4
68966: PPUSH
68967: CALL_OW 264
68971: PUSH
68972: LD_VAR 0 10
68976: IN
68977: NOT
68978: AND
68979: IFFALSE 69018
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
68981: LD_VAR 0 4
68985: PPUSH
68986: LD_VAR 0 7
68990: PUSH
68991: LD_INT 1
68993: ARRAY
68994: PUSH
68995: LD_INT 1
68997: ARRAY
68998: PPUSH
68999: LD_VAR 0 7
69003: PUSH
69004: LD_INT 1
69006: ARRAY
69007: PUSH
69008: LD_INT 2
69010: ARRAY
69011: PPUSH
69012: CALL_OW 116
69016: GO 69307
// if path > tag then
69018: LD_VAR 0 2
69022: PUSH
69023: LD_VAR 0 9
69027: GREATER
69028: IFFALSE 69236
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
69030: LD_ADDR_VAR 0 6
69034: PUSH
69035: LD_VAR 0 5
69039: PPUSH
69040: LD_INT 91
69042: PUSH
69043: LD_VAR 0 4
69047: PUSH
69048: LD_INT 8
69050: PUSH
69051: EMPTY
69052: LIST
69053: LIST
69054: LIST
69055: PPUSH
69056: CALL_OW 72
69060: ST_TO_ADDR
// if nearEnemy then
69061: LD_VAR 0 6
69065: IFFALSE 69134
// begin if GetWeapon ( i ) = ru_time_lapser then
69067: LD_VAR 0 4
69071: PPUSH
69072: CALL_OW 264
69076: PUSH
69077: LD_INT 49
69079: EQUAL
69080: IFFALSE 69108
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
69082: LD_VAR 0 4
69086: PPUSH
69087: LD_VAR 0 6
69091: PPUSH
69092: LD_VAR 0 4
69096: PPUSH
69097: CALL_OW 74
69101: PPUSH
69102: CALL_OW 112
69106: GO 69132
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
69108: LD_VAR 0 4
69112: PPUSH
69113: LD_VAR 0 6
69117: PPUSH
69118: LD_VAR 0 4
69122: PPUSH
69123: CALL_OW 74
69127: PPUSH
69128: CALL 70382 0 2
// end else
69132: GO 69234
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69134: LD_VAR 0 4
69138: PPUSH
69139: LD_VAR 0 2
69143: PUSH
69144: LD_VAR 0 9
69148: ARRAY
69149: PUSH
69150: LD_INT 1
69152: ARRAY
69153: PPUSH
69154: LD_VAR 0 2
69158: PUSH
69159: LD_VAR 0 9
69163: ARRAY
69164: PUSH
69165: LD_INT 2
69167: ARRAY
69168: PPUSH
69169: CALL_OW 297
69173: PUSH
69174: LD_INT 6
69176: GREATER
69177: IFFALSE 69220
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69179: LD_VAR 0 4
69183: PPUSH
69184: LD_VAR 0 2
69188: PUSH
69189: LD_VAR 0 9
69193: ARRAY
69194: PUSH
69195: LD_INT 1
69197: ARRAY
69198: PPUSH
69199: LD_VAR 0 2
69203: PUSH
69204: LD_VAR 0 9
69208: ARRAY
69209: PUSH
69210: LD_INT 2
69212: ARRAY
69213: PPUSH
69214: CALL_OW 114
69218: GO 69234
// SetTag ( i , tag ) ;
69220: LD_VAR 0 4
69224: PPUSH
69225: LD_VAR 0 9
69229: PPUSH
69230: CALL_OW 109
// end else
69234: GO 69307
// if enemy then
69236: LD_VAR 0 5
69240: IFFALSE 69307
// begin if GetWeapon ( i ) = ru_time_lapser then
69242: LD_VAR 0 4
69246: PPUSH
69247: CALL_OW 264
69251: PUSH
69252: LD_INT 49
69254: EQUAL
69255: IFFALSE 69283
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
69257: LD_VAR 0 4
69261: PPUSH
69262: LD_VAR 0 5
69266: PPUSH
69267: LD_VAR 0 4
69271: PPUSH
69272: CALL_OW 74
69276: PPUSH
69277: CALL_OW 112
69281: GO 69307
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
69283: LD_VAR 0 4
69287: PPUSH
69288: LD_VAR 0 5
69292: PPUSH
69293: LD_VAR 0 4
69297: PPUSH
69298: CALL_OW 74
69302: PPUSH
69303: CALL 70382 0 2
// end ; end ;
69307: GO 68883
69309: POP
69310: POP
// end ;
69311: LD_VAR 0 3
69315: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
69316: LD_INT 0
69318: PPUSH
69319: PPUSH
69320: PPUSH
// if not unit or IsInUnit ( unit ) then
69321: LD_VAR 0 1
69325: NOT
69326: PUSH
69327: LD_VAR 0 1
69331: PPUSH
69332: CALL_OW 310
69336: OR
69337: IFFALSE 69341
// exit ;
69339: GO 69432
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
69341: LD_ADDR_VAR 0 4
69345: PUSH
69346: LD_VAR 0 1
69350: PPUSH
69351: CALL_OW 250
69355: PPUSH
69356: LD_VAR 0 2
69360: PPUSH
69361: LD_INT 1
69363: PPUSH
69364: CALL_OW 272
69368: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
69369: LD_ADDR_VAR 0 5
69373: PUSH
69374: LD_VAR 0 1
69378: PPUSH
69379: CALL_OW 251
69383: PPUSH
69384: LD_VAR 0 2
69388: PPUSH
69389: LD_INT 1
69391: PPUSH
69392: CALL_OW 273
69396: ST_TO_ADDR
// if ValidHex ( x , y ) then
69397: LD_VAR 0 4
69401: PPUSH
69402: LD_VAR 0 5
69406: PPUSH
69407: CALL_OW 488
69411: IFFALSE 69432
// ComTurnXY ( unit , x , y ) ;
69413: LD_VAR 0 1
69417: PPUSH
69418: LD_VAR 0 4
69422: PPUSH
69423: LD_VAR 0 5
69427: PPUSH
69428: CALL_OW 118
// end ;
69432: LD_VAR 0 3
69436: RET
// export function SeeUnits ( side , units ) ; var i ; begin
69437: LD_INT 0
69439: PPUSH
69440: PPUSH
// result := false ;
69441: LD_ADDR_VAR 0 3
69445: PUSH
69446: LD_INT 0
69448: ST_TO_ADDR
// if not units then
69449: LD_VAR 0 2
69453: NOT
69454: IFFALSE 69458
// exit ;
69456: GO 69503
// for i in units do
69458: LD_ADDR_VAR 0 4
69462: PUSH
69463: LD_VAR 0 2
69467: PUSH
69468: FOR_IN
69469: IFFALSE 69501
// if See ( side , i ) then
69471: LD_VAR 0 1
69475: PPUSH
69476: LD_VAR 0 4
69480: PPUSH
69481: CALL_OW 292
69485: IFFALSE 69499
// begin result := true ;
69487: LD_ADDR_VAR 0 3
69491: PUSH
69492: LD_INT 1
69494: ST_TO_ADDR
// exit ;
69495: POP
69496: POP
69497: GO 69503
// end ;
69499: GO 69468
69501: POP
69502: POP
// end ;
69503: LD_VAR 0 3
69507: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
69508: LD_INT 0
69510: PPUSH
69511: PPUSH
69512: PPUSH
69513: PPUSH
// if not unit or not points then
69514: LD_VAR 0 1
69518: NOT
69519: PUSH
69520: LD_VAR 0 2
69524: NOT
69525: OR
69526: IFFALSE 69530
// exit ;
69528: GO 69620
// dist := 99999 ;
69530: LD_ADDR_VAR 0 5
69534: PUSH
69535: LD_INT 99999
69537: ST_TO_ADDR
// for i in points do
69538: LD_ADDR_VAR 0 4
69542: PUSH
69543: LD_VAR 0 2
69547: PUSH
69548: FOR_IN
69549: IFFALSE 69618
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
69551: LD_ADDR_VAR 0 6
69555: PUSH
69556: LD_VAR 0 1
69560: PPUSH
69561: LD_VAR 0 4
69565: PUSH
69566: LD_INT 1
69568: ARRAY
69569: PPUSH
69570: LD_VAR 0 4
69574: PUSH
69575: LD_INT 2
69577: ARRAY
69578: PPUSH
69579: CALL_OW 297
69583: ST_TO_ADDR
// if tmpDist < dist then
69584: LD_VAR 0 6
69588: PUSH
69589: LD_VAR 0 5
69593: LESS
69594: IFFALSE 69616
// begin result := i ;
69596: LD_ADDR_VAR 0 3
69600: PUSH
69601: LD_VAR 0 4
69605: ST_TO_ADDR
// dist := tmpDist ;
69606: LD_ADDR_VAR 0 5
69610: PUSH
69611: LD_VAR 0 6
69615: ST_TO_ADDR
// end ; end ;
69616: GO 69548
69618: POP
69619: POP
// end ;
69620: LD_VAR 0 3
69624: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
69625: LD_INT 0
69627: PPUSH
// uc_side := side ;
69628: LD_ADDR_OWVAR 20
69632: PUSH
69633: LD_VAR 0 1
69637: ST_TO_ADDR
// uc_nation := 3 ;
69638: LD_ADDR_OWVAR 21
69642: PUSH
69643: LD_INT 3
69645: ST_TO_ADDR
// vc_chassis := 25 ;
69646: LD_ADDR_OWVAR 37
69650: PUSH
69651: LD_INT 25
69653: ST_TO_ADDR
// vc_engine := engine_siberite ;
69654: LD_ADDR_OWVAR 39
69658: PUSH
69659: LD_INT 3
69661: ST_TO_ADDR
// vc_control := control_computer ;
69662: LD_ADDR_OWVAR 38
69666: PUSH
69667: LD_INT 3
69669: ST_TO_ADDR
// vc_weapon := 59 ;
69670: LD_ADDR_OWVAR 40
69674: PUSH
69675: LD_INT 59
69677: ST_TO_ADDR
// result := CreateVehicle ;
69678: LD_ADDR_VAR 0 5
69682: PUSH
69683: CALL_OW 45
69687: ST_TO_ADDR
// SetDir ( result , d ) ;
69688: LD_VAR 0 5
69692: PPUSH
69693: LD_VAR 0 4
69697: PPUSH
69698: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
69702: LD_VAR 0 5
69706: PPUSH
69707: LD_VAR 0 2
69711: PPUSH
69712: LD_VAR 0 3
69716: PPUSH
69717: LD_INT 0
69719: PPUSH
69720: CALL_OW 48
// end ;
69724: LD_VAR 0 5
69728: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
69729: LD_INT 0
69731: PPUSH
69732: PPUSH
69733: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
69734: LD_ADDR_VAR 0 2
69738: PUSH
69739: LD_INT 0
69741: PUSH
69742: LD_INT 0
69744: PUSH
69745: LD_INT 0
69747: PUSH
69748: LD_INT 0
69750: PUSH
69751: EMPTY
69752: LIST
69753: LIST
69754: LIST
69755: LIST
69756: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
69757: LD_VAR 0 1
69761: NOT
69762: PUSH
69763: LD_VAR 0 1
69767: PPUSH
69768: CALL_OW 264
69772: PUSH
69773: LD_INT 12
69775: PUSH
69776: LD_INT 51
69778: PUSH
69779: LD_INT 32
69781: PUSH
69782: LD_INT 89
69784: PUSH
69785: EMPTY
69786: LIST
69787: LIST
69788: LIST
69789: LIST
69790: IN
69791: NOT
69792: OR
69793: IFFALSE 69797
// exit ;
69795: GO 69895
// for i := 1 to 3 do
69797: LD_ADDR_VAR 0 3
69801: PUSH
69802: DOUBLE
69803: LD_INT 1
69805: DEC
69806: ST_TO_ADDR
69807: LD_INT 3
69809: PUSH
69810: FOR_TO
69811: IFFALSE 69893
// begin tmp := GetCargo ( cargo , i ) ;
69813: LD_ADDR_VAR 0 4
69817: PUSH
69818: LD_VAR 0 1
69822: PPUSH
69823: LD_VAR 0 3
69827: PPUSH
69828: CALL_OW 289
69832: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
69833: LD_ADDR_VAR 0 2
69837: PUSH
69838: LD_VAR 0 2
69842: PPUSH
69843: LD_VAR 0 3
69847: PPUSH
69848: LD_VAR 0 4
69852: PPUSH
69853: CALL_OW 1
69857: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
69858: LD_ADDR_VAR 0 2
69862: PUSH
69863: LD_VAR 0 2
69867: PPUSH
69868: LD_INT 4
69870: PPUSH
69871: LD_VAR 0 2
69875: PUSH
69876: LD_INT 4
69878: ARRAY
69879: PUSH
69880: LD_VAR 0 4
69884: PLUS
69885: PPUSH
69886: CALL_OW 1
69890: ST_TO_ADDR
// end ;
69891: GO 69810
69893: POP
69894: POP
// end ;
69895: LD_VAR 0 2
69899: RET
// export function Length ( array ) ; begin
69900: LD_INT 0
69902: PPUSH
// result := array + 0 ;
69903: LD_ADDR_VAR 0 2
69907: PUSH
69908: LD_VAR 0 1
69912: PUSH
69913: LD_INT 0
69915: PLUS
69916: ST_TO_ADDR
// end ;
69917: LD_VAR 0 2
69921: RET
// export function PrepareArray ( array ) ; begin
69922: LD_INT 0
69924: PPUSH
// result := array diff 0 ;
69925: LD_ADDR_VAR 0 2
69929: PUSH
69930: LD_VAR 0 1
69934: PUSH
69935: LD_INT 0
69937: DIFF
69938: ST_TO_ADDR
// if not result [ 1 ] then
69939: LD_VAR 0 2
69943: PUSH
69944: LD_INT 1
69946: ARRAY
69947: NOT
69948: IFFALSE 69968
// result := Delete ( result , 1 ) ;
69950: LD_ADDR_VAR 0 2
69954: PUSH
69955: LD_VAR 0 2
69959: PPUSH
69960: LD_INT 1
69962: PPUSH
69963: CALL_OW 3
69967: ST_TO_ADDR
// end ;
69968: LD_VAR 0 2
69972: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
69973: LD_INT 0
69975: PPUSH
69976: PPUSH
69977: PPUSH
69978: PPUSH
// sibRocketRange := 25 ;
69979: LD_ADDR_VAR 0 6
69983: PUSH
69984: LD_INT 25
69986: ST_TO_ADDR
// result := false ;
69987: LD_ADDR_VAR 0 4
69991: PUSH
69992: LD_INT 0
69994: ST_TO_ADDR
// for i := 0 to 5 do
69995: LD_ADDR_VAR 0 5
69999: PUSH
70000: DOUBLE
70001: LD_INT 0
70003: DEC
70004: ST_TO_ADDR
70005: LD_INT 5
70007: PUSH
70008: FOR_TO
70009: IFFALSE 70076
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
70011: LD_VAR 0 1
70015: PPUSH
70016: LD_VAR 0 5
70020: PPUSH
70021: LD_VAR 0 6
70025: PPUSH
70026: CALL_OW 272
70030: PPUSH
70031: LD_VAR 0 2
70035: PPUSH
70036: LD_VAR 0 5
70040: PPUSH
70041: LD_VAR 0 6
70045: PPUSH
70046: CALL_OW 273
70050: PPUSH
70051: LD_VAR 0 3
70055: PPUSH
70056: CALL_OW 309
70060: IFFALSE 70074
// begin result := true ;
70062: LD_ADDR_VAR 0 4
70066: PUSH
70067: LD_INT 1
70069: ST_TO_ADDR
// exit ;
70070: POP
70071: POP
70072: GO 70078
// end ;
70074: GO 70008
70076: POP
70077: POP
// end ;
70078: LD_VAR 0 4
70082: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
70083: LD_INT 0
70085: PPUSH
70086: PPUSH
70087: PPUSH
// if btype = b_depot then
70088: LD_VAR 0 2
70092: PUSH
70093: LD_INT 0
70095: EQUAL
70096: IFFALSE 70108
// begin result := true ;
70098: LD_ADDR_VAR 0 3
70102: PUSH
70103: LD_INT 1
70105: ST_TO_ADDR
// exit ;
70106: GO 70224
// end ; pom := GetBase ( depot ) ;
70108: LD_ADDR_VAR 0 4
70112: PUSH
70113: LD_VAR 0 1
70117: PPUSH
70118: CALL_OW 274
70122: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
70123: LD_ADDR_VAR 0 5
70127: PUSH
70128: LD_VAR 0 2
70132: PPUSH
70133: LD_VAR 0 1
70137: PPUSH
70138: CALL_OW 248
70142: PPUSH
70143: CALL_OW 450
70147: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
70148: LD_ADDR_VAR 0 3
70152: PUSH
70153: LD_VAR 0 4
70157: PPUSH
70158: LD_INT 1
70160: PPUSH
70161: CALL_OW 275
70165: PUSH
70166: LD_VAR 0 5
70170: PUSH
70171: LD_INT 1
70173: ARRAY
70174: GREATEREQUAL
70175: PUSH
70176: LD_VAR 0 4
70180: PPUSH
70181: LD_INT 2
70183: PPUSH
70184: CALL_OW 275
70188: PUSH
70189: LD_VAR 0 5
70193: PUSH
70194: LD_INT 2
70196: ARRAY
70197: GREATEREQUAL
70198: AND
70199: PUSH
70200: LD_VAR 0 4
70204: PPUSH
70205: LD_INT 3
70207: PPUSH
70208: CALL_OW 275
70212: PUSH
70213: LD_VAR 0 5
70217: PUSH
70218: LD_INT 3
70220: ARRAY
70221: GREATEREQUAL
70222: AND
70223: ST_TO_ADDR
// end ;
70224: LD_VAR 0 3
70228: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
70229: LD_INT 0
70231: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
70232: LD_VAR 0 1
70236: PPUSH
70237: LD_VAR 0 2
70241: PPUSH
70242: LD_INT 0
70244: PPUSH
70245: LD_INT 0
70247: PPUSH
70248: LD_INT 1
70250: PPUSH
70251: LD_INT 0
70253: PPUSH
70254: CALL_OW 587
// end ;
70258: LD_VAR 0 3
70262: RET
// export function CenterOnNow ( unit ) ; begin
70263: LD_INT 0
70265: PPUSH
// result := IsInUnit ( unit ) ;
70266: LD_ADDR_VAR 0 2
70270: PUSH
70271: LD_VAR 0 1
70275: PPUSH
70276: CALL_OW 310
70280: ST_TO_ADDR
// if not result then
70281: LD_VAR 0 2
70285: NOT
70286: IFFALSE 70298
// result := unit ;
70288: LD_ADDR_VAR 0 2
70292: PUSH
70293: LD_VAR 0 1
70297: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
70298: LD_VAR 0 1
70302: PPUSH
70303: CALL_OW 87
// end ;
70307: LD_VAR 0 2
70311: RET
// export function ComMoveHex ( unit , hex ) ; begin
70312: LD_INT 0
70314: PPUSH
// if not hex then
70315: LD_VAR 0 2
70319: NOT
70320: IFFALSE 70324
// exit ;
70322: GO 70377
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
70324: LD_VAR 0 2
70328: PUSH
70329: LD_INT 1
70331: ARRAY
70332: PPUSH
70333: LD_VAR 0 2
70337: PUSH
70338: LD_INT 2
70340: ARRAY
70341: PPUSH
70342: CALL_OW 428
70346: IFFALSE 70350
// exit ;
70348: GO 70377
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
70350: LD_VAR 0 1
70354: PPUSH
70355: LD_VAR 0 2
70359: PUSH
70360: LD_INT 1
70362: ARRAY
70363: PPUSH
70364: LD_VAR 0 2
70368: PUSH
70369: LD_INT 2
70371: ARRAY
70372: PPUSH
70373: CALL_OW 111
// end ;
70377: LD_VAR 0 3
70381: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
70382: LD_INT 0
70384: PPUSH
70385: PPUSH
70386: PPUSH
// if not unit or not enemy then
70387: LD_VAR 0 1
70391: NOT
70392: PUSH
70393: LD_VAR 0 2
70397: NOT
70398: OR
70399: IFFALSE 70403
// exit ;
70401: GO 70527
// x := GetX ( enemy ) ;
70403: LD_ADDR_VAR 0 4
70407: PUSH
70408: LD_VAR 0 2
70412: PPUSH
70413: CALL_OW 250
70417: ST_TO_ADDR
// y := GetY ( enemy ) ;
70418: LD_ADDR_VAR 0 5
70422: PUSH
70423: LD_VAR 0 2
70427: PPUSH
70428: CALL_OW 251
70432: ST_TO_ADDR
// if ValidHex ( x , y ) then
70433: LD_VAR 0 4
70437: PPUSH
70438: LD_VAR 0 5
70442: PPUSH
70443: CALL_OW 488
70447: IFFALSE 70527
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
70449: LD_VAR 0 2
70453: PPUSH
70454: CALL_OW 247
70458: PUSH
70459: LD_INT 3
70461: PUSH
70462: LD_INT 2
70464: PUSH
70465: EMPTY
70466: LIST
70467: LIST
70468: IN
70469: PUSH
70470: LD_VAR 0 1
70474: PPUSH
70475: CALL_OW 255
70479: PPUSH
70480: LD_VAR 0 2
70484: PPUSH
70485: CALL_OW 292
70489: OR
70490: IFFALSE 70508
// ComAttackUnit ( unit , enemy ) else
70492: LD_VAR 0 1
70496: PPUSH
70497: LD_VAR 0 2
70501: PPUSH
70502: CALL_OW 115
70506: GO 70527
// ComAgressiveMove ( unit , x , y ) ;
70508: LD_VAR 0 1
70512: PPUSH
70513: LD_VAR 0 4
70517: PPUSH
70518: LD_VAR 0 5
70522: PPUSH
70523: CALL_OW 114
// end ;
70527: LD_VAR 0 3
70531: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
70532: LD_INT 0
70534: PPUSH
70535: PPUSH
70536: PPUSH
// list := AreaToList ( area , 0 ) ;
70537: LD_ADDR_VAR 0 5
70541: PUSH
70542: LD_VAR 0 1
70546: PPUSH
70547: LD_INT 0
70549: PPUSH
70550: CALL_OW 517
70554: ST_TO_ADDR
// if not list then
70555: LD_VAR 0 5
70559: NOT
70560: IFFALSE 70564
// exit ;
70562: GO 70694
// if all then
70564: LD_VAR 0 2
70568: IFFALSE 70656
// begin for i := 1 to list [ 1 ] do
70570: LD_ADDR_VAR 0 4
70574: PUSH
70575: DOUBLE
70576: LD_INT 1
70578: DEC
70579: ST_TO_ADDR
70580: LD_VAR 0 5
70584: PUSH
70585: LD_INT 1
70587: ARRAY
70588: PUSH
70589: FOR_TO
70590: IFFALSE 70652
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
70592: LD_ADDR_VAR 0 3
70596: PUSH
70597: LD_VAR 0 3
70601: PPUSH
70602: LD_VAR 0 3
70606: PUSH
70607: LD_INT 1
70609: PLUS
70610: PPUSH
70611: LD_VAR 0 5
70615: PUSH
70616: LD_INT 1
70618: ARRAY
70619: PUSH
70620: LD_VAR 0 4
70624: ARRAY
70625: PUSH
70626: LD_VAR 0 5
70630: PUSH
70631: LD_INT 2
70633: ARRAY
70634: PUSH
70635: LD_VAR 0 4
70639: ARRAY
70640: PUSH
70641: EMPTY
70642: LIST
70643: LIST
70644: PPUSH
70645: CALL_OW 1
70649: ST_TO_ADDR
70650: GO 70589
70652: POP
70653: POP
// exit ;
70654: GO 70694
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
70656: LD_ADDR_VAR 0 3
70660: PUSH
70661: LD_VAR 0 5
70665: PUSH
70666: LD_INT 1
70668: ARRAY
70669: PUSH
70670: LD_INT 1
70672: ARRAY
70673: PUSH
70674: LD_VAR 0 5
70678: PUSH
70679: LD_INT 2
70681: ARRAY
70682: PUSH
70683: LD_INT 1
70685: ARRAY
70686: PUSH
70687: EMPTY
70688: LIST
70689: LIST
70690: PUSH
70691: EMPTY
70692: LIST
70693: ST_TO_ADDR
// end ;
70694: LD_VAR 0 3
70698: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
70699: LD_INT 0
70701: PPUSH
70702: PPUSH
// list := AreaToList ( area , 0 ) ;
70703: LD_ADDR_VAR 0 4
70707: PUSH
70708: LD_VAR 0 1
70712: PPUSH
70713: LD_INT 0
70715: PPUSH
70716: CALL_OW 517
70720: ST_TO_ADDR
// if not list then
70721: LD_VAR 0 4
70725: NOT
70726: IFFALSE 70730
// exit ;
70728: GO 70771
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
70730: LD_ADDR_VAR 0 3
70734: PUSH
70735: LD_VAR 0 4
70739: PUSH
70740: LD_INT 1
70742: ARRAY
70743: PUSH
70744: LD_INT 1
70746: ARRAY
70747: PUSH
70748: LD_VAR 0 4
70752: PUSH
70753: LD_INT 2
70755: ARRAY
70756: PUSH
70757: LD_INT 1
70759: ARRAY
70760: PUSH
70761: LD_VAR 0 2
70765: PUSH
70766: EMPTY
70767: LIST
70768: LIST
70769: LIST
70770: ST_TO_ADDR
// end ;
70771: LD_VAR 0 3
70775: RET
// export function First ( array ) ; begin
70776: LD_INT 0
70778: PPUSH
// if not array then
70779: LD_VAR 0 1
70783: NOT
70784: IFFALSE 70788
// exit ;
70786: GO 70802
// result := array [ 1 ] ;
70788: LD_ADDR_VAR 0 2
70792: PUSH
70793: LD_VAR 0 1
70797: PUSH
70798: LD_INT 1
70800: ARRAY
70801: ST_TO_ADDR
// end ;
70802: LD_VAR 0 2
70806: RET
// export function Last ( array ) ; begin
70807: LD_INT 0
70809: PPUSH
// if not array then
70810: LD_VAR 0 1
70814: NOT
70815: IFFALSE 70819
// exit ;
70817: GO 70835
// result := array [ array ] ;
70819: LD_ADDR_VAR 0 2
70823: PUSH
70824: LD_VAR 0 1
70828: PUSH
70829: LD_VAR 0 1
70833: ARRAY
70834: ST_TO_ADDR
// end ;
70835: LD_VAR 0 2
70839: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
70840: LD_INT 0
70842: PPUSH
70843: PPUSH
// result := [ ] ;
70844: LD_ADDR_VAR 0 5
70848: PUSH
70849: EMPTY
70850: ST_TO_ADDR
// if not array then
70851: LD_VAR 0 1
70855: NOT
70856: IFFALSE 70860
// exit ;
70858: GO 70972
// for i := 1 to array do
70860: LD_ADDR_VAR 0 6
70864: PUSH
70865: DOUBLE
70866: LD_INT 1
70868: DEC
70869: ST_TO_ADDR
70870: LD_VAR 0 1
70874: PUSH
70875: FOR_TO
70876: IFFALSE 70970
// if array [ i ] [ index ] = value then
70878: LD_VAR 0 1
70882: PUSH
70883: LD_VAR 0 6
70887: ARRAY
70888: PUSH
70889: LD_VAR 0 2
70893: ARRAY
70894: PUSH
70895: LD_VAR 0 3
70899: EQUAL
70900: IFFALSE 70968
// begin if indexColumn then
70902: LD_VAR 0 4
70906: IFFALSE 70942
// result := Join ( result , array [ i ] [ indexColumn ] ) else
70908: LD_ADDR_VAR 0 5
70912: PUSH
70913: LD_VAR 0 5
70917: PPUSH
70918: LD_VAR 0 1
70922: PUSH
70923: LD_VAR 0 6
70927: ARRAY
70928: PUSH
70929: LD_VAR 0 4
70933: ARRAY
70934: PPUSH
70935: CALL 66154 0 2
70939: ST_TO_ADDR
70940: GO 70968
// result := Join ( result , array [ i ] ) ;
70942: LD_ADDR_VAR 0 5
70946: PUSH
70947: LD_VAR 0 5
70951: PPUSH
70952: LD_VAR 0 1
70956: PUSH
70957: LD_VAR 0 6
70961: ARRAY
70962: PPUSH
70963: CALL 66154 0 2
70967: ST_TO_ADDR
// end ;
70968: GO 70875
70970: POP
70971: POP
// end ;
70972: LD_VAR 0 5
70976: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
70977: LD_INT 0
70979: PPUSH
// if not vehicles or not parkingPoint then
70980: LD_VAR 0 1
70984: NOT
70985: PUSH
70986: LD_VAR 0 2
70990: NOT
70991: OR
70992: IFFALSE 70996
// exit ;
70994: GO 71094
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
70996: LD_ADDR_VAR 0 1
71000: PUSH
71001: LD_VAR 0 1
71005: PPUSH
71006: LD_INT 50
71008: PUSH
71009: EMPTY
71010: LIST
71011: PUSH
71012: LD_INT 3
71014: PUSH
71015: LD_INT 92
71017: PUSH
71018: LD_VAR 0 2
71022: PUSH
71023: LD_INT 1
71025: ARRAY
71026: PUSH
71027: LD_VAR 0 2
71031: PUSH
71032: LD_INT 2
71034: ARRAY
71035: PUSH
71036: LD_INT 8
71038: PUSH
71039: EMPTY
71040: LIST
71041: LIST
71042: LIST
71043: LIST
71044: PUSH
71045: EMPTY
71046: LIST
71047: LIST
71048: PUSH
71049: EMPTY
71050: LIST
71051: LIST
71052: PPUSH
71053: CALL_OW 72
71057: ST_TO_ADDR
// if not vehicles then
71058: LD_VAR 0 1
71062: NOT
71063: IFFALSE 71067
// exit ;
71065: GO 71094
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
71067: LD_VAR 0 1
71071: PPUSH
71072: LD_VAR 0 2
71076: PUSH
71077: LD_INT 1
71079: ARRAY
71080: PPUSH
71081: LD_VAR 0 2
71085: PUSH
71086: LD_INT 2
71088: ARRAY
71089: PPUSH
71090: CALL_OW 111
// end ;
71094: LD_VAR 0 3
71098: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
71099: LD_INT 0
71101: PPUSH
71102: PPUSH
71103: PPUSH
// if not side or not area then
71104: LD_VAR 0 1
71108: NOT
71109: PUSH
71110: LD_VAR 0 2
71114: NOT
71115: OR
71116: IFFALSE 71120
// exit ;
71118: GO 71239
// tmp := AreaToList ( area , 0 ) ;
71120: LD_ADDR_VAR 0 5
71124: PUSH
71125: LD_VAR 0 2
71129: PPUSH
71130: LD_INT 0
71132: PPUSH
71133: CALL_OW 517
71137: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
71138: LD_ADDR_VAR 0 4
71142: PUSH
71143: DOUBLE
71144: LD_INT 1
71146: DEC
71147: ST_TO_ADDR
71148: LD_VAR 0 5
71152: PUSH
71153: LD_INT 1
71155: ARRAY
71156: PUSH
71157: FOR_TO
71158: IFFALSE 71237
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
71160: LD_VAR 0 5
71164: PUSH
71165: LD_INT 1
71167: ARRAY
71168: PUSH
71169: LD_VAR 0 4
71173: ARRAY
71174: PPUSH
71175: LD_VAR 0 5
71179: PUSH
71180: LD_INT 2
71182: ARRAY
71183: PUSH
71184: LD_VAR 0 4
71188: ARRAY
71189: PPUSH
71190: CALL_OW 351
71194: IFFALSE 71235
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
71196: LD_VAR 0 5
71200: PUSH
71201: LD_INT 1
71203: ARRAY
71204: PUSH
71205: LD_VAR 0 4
71209: ARRAY
71210: PPUSH
71211: LD_VAR 0 5
71215: PUSH
71216: LD_INT 2
71218: ARRAY
71219: PUSH
71220: LD_VAR 0 4
71224: ARRAY
71225: PPUSH
71226: LD_VAR 0 1
71230: PPUSH
71231: CALL_OW 244
// end ;
71235: GO 71157
71237: POP
71238: POP
// end ; end_of_file
71239: LD_VAR 0 3
71243: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
71244: LD_VAR 0 1
71248: PUSH
71249: LD_INT 200
71251: DOUBLE
71252: GREATEREQUAL
71253: IFFALSE 71261
71255: LD_INT 299
71257: DOUBLE
71258: LESSEQUAL
71259: IFTRUE 71263
71261: GO 71295
71263: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
71264: LD_VAR 0 1
71268: PPUSH
71269: LD_VAR 0 2
71273: PPUSH
71274: LD_VAR 0 3
71278: PPUSH
71279: LD_VAR 0 4
71283: PPUSH
71284: LD_VAR 0 5
71288: PPUSH
71289: CALL 23660 0 5
71293: GO 71372
71295: LD_INT 300
71297: DOUBLE
71298: GREATEREQUAL
71299: IFFALSE 71307
71301: LD_INT 399
71303: DOUBLE
71304: LESSEQUAL
71305: IFTRUE 71309
71307: GO 71371
71309: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
71310: LD_VAR 0 1
71314: PPUSH
71315: LD_VAR 0 2
71319: PPUSH
71320: LD_VAR 0 3
71324: PPUSH
71325: LD_VAR 0 4
71329: PPUSH
71330: LD_VAR 0 5
71334: PPUSH
71335: LD_VAR 0 6
71339: PPUSH
71340: LD_VAR 0 7
71344: PPUSH
71345: LD_VAR 0 8
71349: PPUSH
71350: LD_VAR 0 9
71354: PPUSH
71355: LD_VAR 0 10
71359: PPUSH
71360: LD_VAR 0 11
71364: PPUSH
71365: CALL 19568 0 11
71369: GO 71372
71371: POP
// end ;
71372: PPOPN 11
71374: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
71375: LD_VAR 0 1
71379: PPUSH
71380: LD_VAR 0 2
71384: PPUSH
71385: LD_VAR 0 3
71389: PPUSH
71390: LD_VAR 0 4
71394: PPUSH
71395: LD_VAR 0 5
71399: PPUSH
71400: CALL 23045 0 5
// end ; end_of_file
71404: PPOPN 5
71406: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
71407: LD_VAR 0 1
71411: PPUSH
71412: LD_VAR 0 2
71416: PPUSH
71417: LD_VAR 0 3
71421: PPUSH
71422: LD_VAR 0 4
71426: PPUSH
71427: LD_VAR 0 5
71431: PPUSH
71432: LD_VAR 0 6
71436: PPUSH
71437: CALL 7220 0 6
// end ;
71441: PPOPN 6
71443: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
71444: LD_INT 0
71446: PPUSH
// begin if not units then
71447: LD_VAR 0 1
71451: NOT
71452: IFFALSE 71456
// exit ;
71454: GO 71456
// end ;
71456: PPOPN 7
71458: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
71459: CALL 7107 0 0
// end ;
71463: PPOPN 1
71465: END
