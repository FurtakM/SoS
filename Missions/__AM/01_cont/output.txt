// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 32 0 0
// InitAmerican ;
  15: CALL 866 0 0
// InitRussian ;
  19: CALL 1137 0 0
// DebugMode ;
  23: CALL 160 0 0
// Action ;
  27: CALL 2860 0 0
// end ;
  31: END
// export debug ; export mission_prefix ; export active_russian_dialog , bobby_in_squad , powell_contact , macmilan_use_radio , cyrus_in_squad , active_road_patrol , macmilan_in_trap , meta_action , end_mission , bobby_saved , cyrus_saved , send_troops_to_forest , active_powell_dialog ; function Init ; begin
  32: LD_INT 0
  34: PPUSH
// mission_prefix := 01_ ;
  35: LD_ADDR_EXP 2
  39: PUSH
  40: LD_STRING 01_
  42: ST_TO_ADDR
// debug := false ;
  43: LD_ADDR_EXP 1
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// active_russian_dialog := false ;
  51: LD_ADDR_EXP 3
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// bobby_in_squad := false ;
  59: LD_ADDR_EXP 4
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// cyrus_in_squad := false ;
  67: LD_ADDR_EXP 7
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// powell_contact := false ;
  75: LD_ADDR_EXP 5
  79: PUSH
  80: LD_INT 0
  82: ST_TO_ADDR
// macmilan_use_radio := false ;
  83: LD_ADDR_EXP 6
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// active_road_patrol := false ;
  91: LD_ADDR_EXP 8
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// macmilan_in_trap := false ;
  99: LD_ADDR_EXP 9
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// meta_action := false ;
 107: LD_ADDR_EXP 10
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// end_mission := false ;
 115: LD_ADDR_EXP 11
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// bobby_saved := false ;
 123: LD_ADDR_EXP 12
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// cyrus_saved := false ;
 131: LD_ADDR_EXP 13
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// send_troops_to_forest := false ;
 139: LD_ADDR_EXP 14
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// active_powell_dialog := false ;
 147: LD_ADDR_EXP 15
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// end ;
 155: LD_VAR 0 1
 159: RET
// function DebugMode ; var i ; begin
 160: LD_INT 0
 162: PPUSH
 163: PPUSH
// if not debug then
 164: LD_EXP 1
 168: NOT
 169: IFFALSE 173
// exit ;
 171: GO 192
// Difficulty := 4 ;
 173: LD_ADDR_OWVAR 67
 177: PUSH
 178: LD_INT 4
 180: ST_TO_ADDR
// TurnFogOff ( ) ;
 181: CALL_OW 537
// FogOff ( 1 ) ;
 185: LD_INT 1
 187: PPUSH
 188: CALL_OW 344
// end ; end_of_file
 192: LD_VAR 0 1
 196: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 197: LD_INT 0
 199: PPUSH
 200: PPUSH
 201: PPUSH
// uc_side := GetSide ( b ) ;
 202: LD_ADDR_OWVAR 20
 206: PUSH
 207: LD_VAR 0 2
 211: PPUSH
 212: CALL_OW 255
 216: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 217: LD_ADDR_OWVAR 21
 221: PUSH
 222: LD_VAR 0 2
 226: PPUSH
 227: CALL_OW 248
 231: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 232: LD_INT 0
 234: PPUSH
 235: LD_INT 1
 237: PPUSH
 238: LD_VAR 0 1
 242: PPUSH
 243: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
 247: LD_ADDR_VAR 0 5
 251: PUSH
 252: LD_VAR 0 2
 256: PPUSH
 257: CALL_OW 254
 261: PUSH
 262: LD_INT 3
 264: MINUS
 265: ST_TO_ADDR
// if dir < 0 then
 266: LD_VAR 0 5
 270: PUSH
 271: LD_INT 0
 273: LESS
 274: IFFALSE 290
// dir := 6 + dir ;
 276: LD_ADDR_VAR 0 5
 280: PUSH
 281: LD_INT 6
 283: PUSH
 284: LD_VAR 0 5
 288: PLUS
 289: ST_TO_ADDR
// un := CreateHuman ;
 290: LD_ADDR_VAR 0 4
 294: PUSH
 295: CALL_OW 44
 299: ST_TO_ADDR
// SetDir ( un , dir ) ;
 300: LD_VAR 0 4
 304: PPUSH
 305: LD_VAR 0 5
 309: PPUSH
 310: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 314: LD_VAR 0 4
 318: PPUSH
 319: LD_VAR 0 2
 323: PPUSH
 324: CALL_OW 52
// end ;
 328: LD_VAR 0 3
 332: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 333: LD_INT 0
 335: PPUSH
// uc_side := side ;
 336: LD_ADDR_OWVAR 20
 340: PUSH
 341: LD_VAR 0 1
 345: ST_TO_ADDR
// uc_nation := nation ;
 346: LD_ADDR_OWVAR 21
 350: PUSH
 351: LD_VAR 0 2
 355: ST_TO_ADDR
// vc_chassis := chassis ;
 356: LD_ADDR_OWVAR 37
 360: PUSH
 361: LD_VAR 0 3
 365: ST_TO_ADDR
// vc_engine := engine ;
 366: LD_ADDR_OWVAR 39
 370: PUSH
 371: LD_VAR 0 4
 375: ST_TO_ADDR
// vc_control := control ;
 376: LD_ADDR_OWVAR 38
 380: PUSH
 381: LD_VAR 0 5
 385: ST_TO_ADDR
// vc_weapon := weapon ;
 386: LD_ADDR_OWVAR 40
 390: PUSH
 391: LD_VAR 0 6
 395: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 396: LD_ADDR_OWVAR 41
 400: PUSH
 401: LD_VAR 0 7
 405: ST_TO_ADDR
// result := CreateVehicle ;
 406: LD_ADDR_VAR 0 8
 410: PUSH
 411: CALL_OW 45
 415: ST_TO_ADDR
// end ;
 416: LD_VAR 0 8
 420: RET
// export function ComPatrol ( unit , mode , pause , coords ) ; var i ; begin
 421: LD_INT 0
 423: PPUSH
 424: PPUSH
// while ( active_road_patrol ) do
 425: LD_EXP 8
 429: IFFALSE 783
// begin Wait ( 0 0$01 ) ;
 431: LD_INT 35
 433: PPUSH
 434: CALL_OW 67
// if not unit then
 438: LD_VAR 0 1
 442: NOT
 443: IFFALSE 447
// exit ;
 445: GO 783
// if mode = road then
 447: LD_VAR 0 2
 451: PUSH
 452: LD_STRING road
 454: EQUAL
 455: IFFALSE 511
// if GetFuel ( unit ) < 50 and not See ( 1 , unit ) and not HasTask ( unit ) then
 457: LD_VAR 0 1
 461: PPUSH
 462: CALL_OW 261
 466: PUSH
 467: LD_INT 50
 469: LESS
 470: PUSH
 471: LD_INT 1
 473: PPUSH
 474: LD_VAR 0 1
 478: PPUSH
 479: CALL_OW 292
 483: NOT
 484: AND
 485: PUSH
 486: LD_VAR 0 1
 490: PPUSH
 491: CALL_OW 314
 495: NOT
 496: AND
 497: IFFALSE 511
// SetFuel ( unit , 100 ) ;
 499: LD_VAR 0 1
 503: PPUSH
 504: LD_INT 100
 506: PPUSH
 507: CALL_OW 240
// if mode = forest then
 511: LD_VAR 0 2
 515: PUSH
 516: LD_STRING forest
 518: EQUAL
 519: IFFALSE 599
// if GetLives ( unit ) < 600 then
 521: LD_VAR 0 1
 525: PPUSH
 526: CALL_OW 256
 530: PUSH
 531: LD_INT 600
 533: LESS
 534: IFFALSE 599
// begin ComMoveXY ( unit , 42 , 3 ) ;
 536: LD_VAR 0 1
 540: PPUSH
 541: LD_INT 42
 543: PPUSH
 544: LD_INT 3
 546: PPUSH
 547: CALL_OW 111
// SetRememberedX ( unit , GetX ( unit ) ) ;
 551: LD_VAR 0 1
 555: PPUSH
 556: LD_VAR 0 1
 560: PPUSH
 561: CALL_OW 250
 565: PPUSH
 566: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
 570: LD_VAR 0 1
 574: PPUSH
 575: LD_VAR 0 1
 579: PPUSH
 580: CALL_OW 251
 584: PPUSH
 585: CALL_OW 232
// send_troops_to_forest := true ;
 589: LD_ADDR_EXP 14
 593: PUSH
 594: LD_INT 1
 596: ST_TO_ADDR
// break ;
 597: GO 783
// end ; if not HasTask ( unit ) then
 599: LD_VAR 0 1
 603: PPUSH
 604: CALL_OW 314
 608: NOT
 609: IFFALSE 781
// begin for i = 1 to coords do
 611: LD_ADDR_VAR 0 6
 615: PUSH
 616: DOUBLE
 617: LD_INT 1
 619: DEC
 620: ST_TO_ADDR
 621: LD_VAR 0 4
 625: PUSH
 626: FOR_TO
 627: IFFALSE 694
// begin AddComAgressiveMove ( unit , coords [ i ] , coords [ i + 1 ] ) ;
 629: LD_VAR 0 1
 633: PPUSH
 634: LD_VAR 0 4
 638: PUSH
 639: LD_VAR 0 6
 643: ARRAY
 644: PPUSH
 645: LD_VAR 0 4
 649: PUSH
 650: LD_VAR 0 6
 654: PUSH
 655: LD_INT 1
 657: PLUS
 658: ARRAY
 659: PPUSH
 660: CALL_OW 174
// AddComWait ( unit , pause ) ;
 664: LD_VAR 0 1
 668: PPUSH
 669: LD_VAR 0 3
 673: PPUSH
 674: CALL_OW 202
// i := i + 1 ;
 678: LD_ADDR_VAR 0 6
 682: PUSH
 683: LD_VAR 0 6
 687: PUSH
 688: LD_INT 1
 690: PLUS
 691: ST_TO_ADDR
// end ;
 692: GO 626
 694: POP
 695: POP
// for i = coords downto 1 do
 696: LD_ADDR_VAR 0 6
 700: PUSH
 701: DOUBLE
 702: LD_VAR 0 4
 706: INC
 707: ST_TO_ADDR
 708: LD_INT 1
 710: PUSH
 711: FOR_DOWNTO
 712: IFFALSE 779
// begin AddComAgressiveMove ( unit , coords [ i - 1 ] , coords [ i ] ) ;
 714: LD_VAR 0 1
 718: PPUSH
 719: LD_VAR 0 4
 723: PUSH
 724: LD_VAR 0 6
 728: PUSH
 729: LD_INT 1
 731: MINUS
 732: ARRAY
 733: PPUSH
 734: LD_VAR 0 4
 738: PUSH
 739: LD_VAR 0 6
 743: ARRAY
 744: PPUSH
 745: CALL_OW 174
// AddComWait ( unit , pause ) ;
 749: LD_VAR 0 1
 753: PPUSH
 754: LD_VAR 0 3
 758: PPUSH
 759: CALL_OW 202
// i := i - 1 ;
 763: LD_ADDR_VAR 0 6
 767: PUSH
 768: LD_VAR 0 6
 772: PUSH
 773: LD_INT 1
 775: MINUS
 776: ST_TO_ADDR
// end ;
 777: GO 711
 779: POP
 780: POP
// end ; end ;
 781: GO 425
// end ;
 783: LD_VAR 0 5
 787: RET
// export function DebugSay ( dialog ) ; var speaker ; begin
 788: LD_INT 0
 790: PPUSH
 791: PPUSH
// uc_nation := 1 ;
 792: LD_ADDR_OWVAR 21
 796: PUSH
 797: LD_INT 1
 799: ST_TO_ADDR
// uc_side := 0 ;
 800: LD_ADDR_OWVAR 20
 804: PUSH
 805: LD_INT 0
 807: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
 808: LD_INT 0
 810: PPUSH
 811: LD_INT 1
 813: PPUSH
 814: LD_INT 0
 816: PPUSH
 817: CALL_OW 380
// hc_name := speaker ;
 821: LD_ADDR_OWVAR 26
 825: PUSH
 826: LD_STRING speaker
 828: ST_TO_ADDR
// hc_gallery :=  ;
 829: LD_ADDR_OWVAR 33
 833: PUSH
 834: LD_STRING 
 836: ST_TO_ADDR
// speaker := CreateHuman ;
 837: LD_ADDR_VAR 0 3
 841: PUSH
 842: CALL_OW 44
 846: ST_TO_ADDR
// Say ( speaker , dialog ) ;
 847: LD_VAR 0 3
 851: PPUSH
 852: LD_VAR 0 1
 856: PPUSH
 857: CALL_OW 88
// end ; end_of_file
 861: LD_VAR 0 2
 865: RET
// export JMM , Bobby , Cyrus , Powell , fakePokryshkin ; export function InitAmerican ; begin
 866: LD_INT 0
 868: PPUSH
// uc_nation := 1 ;
 869: LD_ADDR_OWVAR 21
 873: PUSH
 874: LD_INT 1
 876: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , false ,  ) ;
 877: LD_ADDR_EXP 16
 881: PUSH
 882: LD_STRING JMM
 884: PPUSH
 885: LD_INT 0
 887: PPUSH
 888: LD_STRING 
 890: PPUSH
 891: CALL 26919 0 3
 895: ST_TO_ADDR
// uc_side := 4 ;
 896: LD_ADDR_OWVAR 20
 900: PUSH
 901: LD_INT 4
 903: ST_TO_ADDR
// hc_gallery := us ;
 904: LD_ADDR_OWVAR 33
 908: PUSH
 909: LD_STRING us
 911: ST_TO_ADDR
// hc_face_number := 7 ;
 912: LD_ADDR_OWVAR 34
 916: PUSH
 917: LD_INT 7
 919: ST_TO_ADDR
// hc_sex := sex_male ;
 920: LD_ADDR_OWVAR 27
 924: PUSH
 925: LD_INT 1
 927: ST_TO_ADDR
// hc_name := . ;
 928: LD_ADDR_OWVAR 26
 932: PUSH
 933: LD_STRING .
 935: ST_TO_ADDR
// hc_class := 1 ;
 936: LD_ADDR_OWVAR 28
 940: PUSH
 941: LD_INT 1
 943: ST_TO_ADDR
// Powell := CreateHuman ;
 944: LD_ADDR_EXP 19
 948: PUSH
 949: CALL_OW 44
 953: ST_TO_ADDR
// hc_name := . ;
 954: LD_ADDR_OWVAR 26
 958: PUSH
 959: LD_STRING .
 961: ST_TO_ADDR
// hc_gallery := ru ;
 962: LD_ADDR_OWVAR 33
 966: PUSH
 967: LD_STRING ru
 969: ST_TO_ADDR
// hc_face_number := 4 ;
 970: LD_ADDR_OWVAR 34
 974: PUSH
 975: LD_INT 4
 977: ST_TO_ADDR
// hc_sex := sex_male ;
 978: LD_ADDR_OWVAR 27
 982: PUSH
 983: LD_INT 1
 985: ST_TO_ADDR
// fakePokryshkin := CreateHuman ;
 986: LD_ADDR_EXP 20
 990: PUSH
 991: CALL_OW 44
 995: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , false ,  ) ;
 996: LD_ADDR_EXP 17
1000: PUSH
1001: LD_STRING Bobby
1003: PPUSH
1004: LD_INT 0
1006: PPUSH
1007: LD_STRING 
1009: PPUSH
1010: CALL 26919 0 3
1014: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , false ,  ) ;
1015: LD_ADDR_EXP 18
1019: PUSH
1020: LD_STRING Cyrus
1022: PPUSH
1023: LD_INT 0
1025: PPUSH
1026: LD_STRING 
1028: PPUSH
1029: CALL 26919 0 3
1033: ST_TO_ADDR
// case Difficulty of 1 :
1034: LD_OWVAR 67
1038: PUSH
1039: LD_INT 1
1041: DOUBLE
1042: EQUAL
1043: IFTRUE 1047
1045: GO 1062
1047: POP
// SetLives ( Bobby , 500 ) ; 2 :
1048: LD_EXP 17
1052: PPUSH
1053: LD_INT 500
1055: PPUSH
1056: CALL_OW 234
1060: GO 1132
1062: LD_INT 2
1064: DOUBLE
1065: EQUAL
1066: IFTRUE 1070
1068: GO 1085
1070: POP
// SetLives ( Bobby , 460 ) ; 3 :
1071: LD_EXP 17
1075: PPUSH
1076: LD_INT 460
1078: PPUSH
1079: CALL_OW 234
1083: GO 1132
1085: LD_INT 3
1087: DOUBLE
1088: EQUAL
1089: IFTRUE 1093
1091: GO 1108
1093: POP
// SetLives ( Bobby , 420 ) ; 4 :
1094: LD_EXP 17
1098: PPUSH
1099: LD_INT 420
1101: PPUSH
1102: CALL_OW 234
1106: GO 1132
1108: LD_INT 4
1110: DOUBLE
1111: EQUAL
1112: IFTRUE 1116
1114: GO 1131
1116: POP
// SetLives ( Bobby , 400 ) ; end ;
1117: LD_EXP 17
1121: PPUSH
1122: LD_INT 400
1124: PPUSH
1125: CALL_OW 234
1129: GO 1132
1131: POP
// end ; end_of_file
1132: LD_VAR 0 1
1136: RET
// export russian_troops_1 , russian_troops_2 , russian_patrol_tanks , russian_meta_guards , russian_patrol_forest , russian_patrol_hidden ; export Pokryshkin ; export function InitRussian ; var skill , i , un ; begin
1137: LD_INT 0
1139: PPUSH
1140: PPUSH
1141: PPUSH
1142: PPUSH
// skill := [ 1 , 2 , 3 , 4 ] [ Difficulty ] ;
1143: LD_ADDR_VAR 0 2
1147: PUSH
1148: LD_INT 1
1150: PUSH
1151: LD_INT 2
1153: PUSH
1154: LD_INT 3
1156: PUSH
1157: LD_INT 4
1159: PUSH
1160: EMPTY
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: PUSH
1166: LD_OWVAR 67
1170: ARRAY
1171: ST_TO_ADDR
// uc_side := 3 ;
1172: LD_ADDR_OWVAR 20
1176: PUSH
1177: LD_INT 3
1179: ST_TO_ADDR
// uc_nation := 3 ;
1180: LD_ADDR_OWVAR 21
1184: PUSH
1185: LD_INT 3
1187: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
1188: LD_ADDR_EXP 27
1192: PUSH
1193: LD_STRING Pokryshkin
1195: PPUSH
1196: LD_INT 0
1198: PPUSH
1199: LD_STRING 
1201: PPUSH
1202: CALL 26919 0 3
1206: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 44 , 5 , false ) ;
1207: LD_EXP 27
1211: PPUSH
1212: LD_INT 44
1214: PPUSH
1215: LD_INT 5
1217: PPUSH
1218: LD_INT 0
1220: PPUSH
1221: CALL_OW 48
// hc_importance := 0 ;
1225: LD_ADDR_OWVAR 32
1229: PUSH
1230: LD_INT 0
1232: ST_TO_ADDR
// hc_gallery :=  ;
1233: LD_ADDR_OWVAR 33
1237: PUSH
1238: LD_STRING 
1240: ST_TO_ADDR
// hc_name :=  ;
1241: LD_ADDR_OWVAR 26
1245: PUSH
1246: LD_STRING 
1248: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1249: LD_INT 1
1251: PPUSH
1252: LD_INT 1
1254: PPUSH
1255: LD_VAR 0 2
1259: PPUSH
1260: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1264: LD_ADDR_OWVAR 33
1268: PUSH
1269: LD_STRING SecondCharsGal
1271: ST_TO_ADDR
// hc_face_number := 69 ;
1272: LD_ADDR_OWVAR 34
1276: PUSH
1277: LD_INT 69
1279: ST_TO_ADDR
// hc_sex := sex_male ;
1280: LD_ADDR_OWVAR 27
1284: PUSH
1285: LD_INT 1
1287: ST_TO_ADDR
// hc_name := Ilja Ivanov ;
1288: LD_ADDR_OWVAR 26
1292: PUSH
1293: LD_STRING Ilja Ivanov
1295: ST_TO_ADDR
// un := CreateHuman ;
1296: LD_ADDR_VAR 0 4
1300: PUSH
1301: CALL_OW 44
1305: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 1 , un ) ;
1306: LD_ADDR_EXP 21
1310: PUSH
1311: LD_EXP 21
1315: PPUSH
1316: LD_INT 1
1318: PPUSH
1319: LD_VAR 0 4
1323: PPUSH
1324: CALL_OW 2
1328: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1329: LD_VAR 0 4
1333: PPUSH
1334: LD_INT 3
1336: PPUSH
1337: LD_INT 0
1339: PPUSH
1340: CALL_OW 49
// PrepareHuman ( sex_male , 1 , skill ) ;
1344: LD_INT 1
1346: PPUSH
1347: LD_INT 1
1349: PPUSH
1350: LD_VAR 0 2
1354: PPUSH
1355: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1359: LD_ADDR_OWVAR 33
1363: PUSH
1364: LD_STRING SecondCharsGal
1366: ST_TO_ADDR
// hc_face_number := 70 ;
1367: LD_ADDR_OWVAR 34
1371: PUSH
1372: LD_INT 70
1374: ST_TO_ADDR
// hc_name := Pavel Starczy ;
1375: LD_ADDR_OWVAR 26
1379: PUSH
1380: LD_STRING Pavel Starczy
1382: ST_TO_ADDR
// un := CreateHuman ;
1383: LD_ADDR_VAR 0 4
1387: PUSH
1388: CALL_OW 44
1392: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 2 , un ) ;
1393: LD_ADDR_EXP 21
1397: PUSH
1398: LD_EXP 21
1402: PPUSH
1403: LD_INT 2
1405: PPUSH
1406: LD_VAR 0 4
1410: PPUSH
1411: CALL_OW 2
1415: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1416: LD_VAR 0 4
1420: PPUSH
1421: LD_INT 3
1423: PPUSH
1424: LD_INT 0
1426: PPUSH
1427: CALL_OW 49
// InitHc ;
1431: CALL_OW 19
// for i = 1 to 7 do
1435: LD_ADDR_VAR 0 3
1439: PUSH
1440: DOUBLE
1441: LD_INT 1
1443: DEC
1444: ST_TO_ADDR
1445: LD_INT 7
1447: PUSH
1448: FOR_TO
1449: IFFALSE 1600
// begin PrepareHuman ( false , 1 , skill ) ;
1451: LD_INT 0
1453: PPUSH
1454: LD_INT 1
1456: PPUSH
1457: LD_VAR 0 2
1461: PPUSH
1462: CALL_OW 380
// un := CreateHuman ;
1466: LD_ADDR_VAR 0 4
1470: PUSH
1471: CALL_OW 44
1475: ST_TO_ADDR
// if i mod 2 = 0 then
1476: LD_VAR 0 3
1480: PUSH
1481: LD_INT 2
1483: MOD
1484: PUSH
1485: LD_INT 0
1487: EQUAL
1488: IFFALSE 1545
// begin russian_troops_1 := Insert ( russian_troops_1 , russian_troops_1 + 1 , un ) ;
1490: LD_ADDR_EXP 21
1494: PUSH
1495: LD_EXP 21
1499: PPUSH
1500: LD_EXP 21
1504: PUSH
1505: LD_INT 1
1507: PLUS
1508: PPUSH
1509: LD_VAR 0 4
1513: PPUSH
1514: CALL_OW 2
1518: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1519: LD_VAR 0 4
1523: PPUSH
1524: LD_INT 3
1526: PPUSH
1527: LD_INT 0
1529: PPUSH
1530: CALL_OW 49
// ComHold ( un ) ;
1534: LD_VAR 0 4
1538: PPUSH
1539: CALL_OW 140
// end else
1543: GO 1598
// begin russian_troops_2 := Insert ( russian_troops_2 , russian_troops_2 + 1 , un ) ;
1545: LD_ADDR_EXP 22
1549: PUSH
1550: LD_EXP 22
1554: PPUSH
1555: LD_EXP 22
1559: PUSH
1560: LD_INT 1
1562: PLUS
1563: PPUSH
1564: LD_VAR 0 4
1568: PPUSH
1569: CALL_OW 2
1573: ST_TO_ADDR
// PlaceUnitArea ( un , guard_south , false ) ;
1574: LD_VAR 0 4
1578: PPUSH
1579: LD_INT 4
1581: PPUSH
1582: LD_INT 0
1584: PPUSH
1585: CALL_OW 49
// ComHold ( un ) ;
1589: LD_VAR 0 4
1593: PPUSH
1594: CALL_OW 140
// end ; end ;
1598: GO 1448
1600: POP
1601: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) do
1602: LD_ADDR_VAR 0 3
1606: PUSH
1607: LD_INT 22
1609: PUSH
1610: LD_INT 3
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: PUSH
1617: LD_INT 30
1619: PUSH
1620: LD_INT 31
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: PUSH
1627: EMPTY
1628: LIST
1629: LIST
1630: PPUSH
1631: CALL_OW 69
1635: PUSH
1636: FOR_IN
1637: IFFALSE 1655
// PrepareSolBun ( skill , i ) ;
1639: LD_VAR 0 2
1643: PPUSH
1644: LD_VAR 0 3
1648: PPUSH
1649: CALL 197 0 2
1653: GO 1636
1655: POP
1656: POP
// for i = 1 to 3 do
1657: LD_ADDR_VAR 0 3
1661: PUSH
1662: DOUBLE
1663: LD_INT 1
1665: DEC
1666: ST_TO_ADDR
1667: LD_INT 3
1669: PUSH
1670: FOR_TO
1671: IFFALSE 1807
// begin un := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1673: LD_ADDR_VAR 0 4
1677: PUSH
1678: LD_INT 3
1680: PPUSH
1681: LD_INT 3
1683: PPUSH
1684: LD_INT 22
1686: PPUSH
1687: LD_INT 1
1689: PPUSH
1690: LD_INT 1
1692: PPUSH
1693: LD_INT 42
1695: PPUSH
1696: LD_INT 100
1698: PPUSH
1699: CALL 333 0 7
1703: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
1704: LD_INT 0
1706: PPUSH
1707: LD_INT 3
1709: PPUSH
1710: LD_VAR 0 2
1714: PPUSH
1715: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1719: CALL_OW 44
1723: PPUSH
1724: LD_VAR 0 4
1728: PPUSH
1729: CALL_OW 52
// PlaceUnitXY ( un , [ 131 , 23 , 167 ] [ i ] , [ 87 , 14 , 95 ] [ i ] , false ) ;
1733: LD_VAR 0 4
1737: PPUSH
1738: LD_INT 131
1740: PUSH
1741: LD_INT 23
1743: PUSH
1744: LD_INT 167
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: LIST
1751: PUSH
1752: LD_VAR 0 3
1756: ARRAY
1757: PPUSH
1758: LD_INT 87
1760: PUSH
1761: LD_INT 14
1763: PUSH
1764: LD_INT 95
1766: PUSH
1767: EMPTY
1768: LIST
1769: LIST
1770: LIST
1771: PUSH
1772: LD_VAR 0 3
1776: ARRAY
1777: PPUSH
1778: LD_INT 0
1780: PPUSH
1781: CALL_OW 48
// russian_patrol_tanks := Join ( russian_patrol_tanks , un ) ;
1785: LD_ADDR_EXP 23
1789: PUSH
1790: LD_EXP 23
1794: PPUSH
1795: LD_VAR 0 4
1799: PPUSH
1800: CALL 64240 0 2
1804: ST_TO_ADDR
// end ;
1805: GO 1670
1807: POP
1808: POP
// for i = 1 to 2 do
1809: LD_ADDR_VAR 0 3
1813: PUSH
1814: DOUBLE
1815: LD_INT 1
1817: DEC
1818: ST_TO_ADDR
1819: LD_INT 2
1821: PUSH
1822: FOR_TO
1823: IFFALSE 1914
// begin PrepareHuman ( [ sex_female , sex_male , sex_male ] [ i ] , 1 , 1 ) ;
1825: LD_INT 2
1827: PUSH
1828: LD_INT 1
1830: PUSH
1831: LD_INT 1
1833: PUSH
1834: EMPTY
1835: LIST
1836: LIST
1837: LIST
1838: PUSH
1839: LD_VAR 0 3
1843: ARRAY
1844: PPUSH
1845: LD_INT 1
1847: PPUSH
1848: LD_INT 1
1850: PPUSH
1851: CALL_OW 380
// un := CreateHuman ;
1855: LD_ADDR_VAR 0 4
1859: PUSH
1860: CALL_OW 44
1864: ST_TO_ADDR
// russian_meta_guards := Insert ( russian_meta_guards , 1 , un ) ;
1865: LD_ADDR_EXP 24
1869: PUSH
1870: LD_EXP 24
1874: PPUSH
1875: LD_INT 1
1877: PPUSH
1878: LD_VAR 0 4
1882: PPUSH
1883: CALL_OW 2
1887: ST_TO_ADDR
// PlaceUnitArea ( un , exitArea , false ) ;
1888: LD_VAR 0 4
1892: PPUSH
1893: LD_INT 10
1895: PPUSH
1896: LD_INT 0
1898: PPUSH
1899: CALL_OW 49
// ComHold ( un ) ;
1903: LD_VAR 0 4
1907: PPUSH
1908: CALL_OW 140
// end ;
1912: GO 1822
1914: POP
1915: POP
// if Difficulty < 3 then
1916: LD_OWVAR 67
1920: PUSH
1921: LD_INT 3
1923: LESS
1924: IFFALSE 1928
// exit ;
1926: GO 1999
// PrepareHuman ( false , 1 , skill ) ;
1928: LD_INT 0
1930: PPUSH
1931: LD_INT 1
1933: PPUSH
1934: LD_VAR 0 2
1938: PPUSH
1939: CALL_OW 380
// russian_patrol_forest := CreateHuman ;
1943: LD_ADDR_EXP 25
1947: PUSH
1948: CALL_OW 44
1952: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_forest , 82 , 2 , false ) ;
1953: LD_EXP 25
1957: PPUSH
1958: LD_INT 82
1960: PPUSH
1961: LD_INT 2
1963: PPUSH
1964: LD_INT 0
1966: PPUSH
1967: CALL_OW 48
// russian_patrol_hidden := CreateHuman ;
1971: LD_ADDR_EXP 26
1975: PUSH
1976: CALL_OW 44
1980: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_hidden , 136 , 30 , false ) ;
1981: LD_EXP 26
1985: PPUSH
1986: LD_INT 136
1988: PPUSH
1989: LD_INT 30
1991: PPUSH
1992: LD_INT 0
1994: PPUSH
1995: CALL_OW 48
// end ;
1999: LD_VAR 0 1
2003: RET
// every 0 0$01 trigger active_road_patrol do
2004: LD_EXP 8
2008: IFFALSE 2074
2010: GO 2012
2012: DISABLE
// ComPatrol ( russian_patrol_tanks [ 1 ] , road , 0 0$02 , [ 131 , 87 , 107 , 75 , 107 , 66 , 114 , 61 , 107 , 34 ] ) ;
2013: LD_EXP 23
2017: PUSH
2018: LD_INT 1
2020: ARRAY
2021: PPUSH
2022: LD_STRING road
2024: PPUSH
2025: LD_INT 70
2027: PPUSH
2028: LD_INT 131
2030: PUSH
2031: LD_INT 87
2033: PUSH
2034: LD_INT 107
2036: PUSH
2037: LD_INT 75
2039: PUSH
2040: LD_INT 107
2042: PUSH
2043: LD_INT 66
2045: PUSH
2046: LD_INT 114
2048: PUSH
2049: LD_INT 61
2051: PUSH
2052: LD_INT 107
2054: PUSH
2055: LD_INT 34
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: PPUSH
2070: CALL 421 0 4
2074: END
// every 0 0$01 trigger active_road_patrol do
2075: LD_EXP 8
2079: IFFALSE 2137
2081: GO 2083
2083: DISABLE
// ComPatrol ( russian_patrol_tanks [ 2 ] , road , 0 0$02 , [ 21 , 12 , 37 , 30 , 65 , 62 , 107 , 76 ] ) ;
2084: LD_EXP 23
2088: PUSH
2089: LD_INT 2
2091: ARRAY
2092: PPUSH
2093: LD_STRING road
2095: PPUSH
2096: LD_INT 70
2098: PPUSH
2099: LD_INT 21
2101: PUSH
2102: LD_INT 12
2104: PUSH
2105: LD_INT 37
2107: PUSH
2108: LD_INT 30
2110: PUSH
2111: LD_INT 65
2113: PUSH
2114: LD_INT 62
2116: PUSH
2117: LD_INT 107
2119: PUSH
2120: LD_INT 76
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: PPUSH
2133: CALL 421 0 4
2137: END
// every 0 0$01 trigger active_road_patrol do
2138: LD_EXP 8
2142: IFFALSE 2200
2144: GO 2146
2146: DISABLE
// ComPatrol ( russian_patrol_tanks [ 3 ] , road , 0 0$02 , [ 167 , 95 , 147 , 81 , 144 , 66 , 149 , 55 ] ) ;
2147: LD_EXP 23
2151: PUSH
2152: LD_INT 3
2154: ARRAY
2155: PPUSH
2156: LD_STRING road
2158: PPUSH
2159: LD_INT 70
2161: PPUSH
2162: LD_INT 167
2164: PUSH
2165: LD_INT 95
2167: PUSH
2168: LD_INT 147
2170: PUSH
2171: LD_INT 81
2173: PUSH
2174: LD_INT 144
2176: PUSH
2177: LD_INT 66
2179: PUSH
2180: LD_INT 149
2182: PUSH
2183: LD_INT 55
2185: PUSH
2186: EMPTY
2187: LIST
2188: LIST
2189: LIST
2190: LIST
2191: LIST
2192: LIST
2193: LIST
2194: LIST
2195: PPUSH
2196: CALL 421 0 4
2200: END
// every 0 0$01 trigger IsOk ( russian_patrol_forest ) do
2201: LD_EXP 25
2205: PPUSH
2206: CALL_OW 302
2210: IFFALSE 2272
2212: GO 2214
2214: DISABLE
// ComPatrol ( russian_patrol_forest , forest , 0 0$01 , [ 52 , 15 , 81 , 9 , 120 , 52 , 135 , 80 , 122 , 95 ] ) ;
2215: LD_EXP 25
2219: PPUSH
2220: LD_STRING forest
2222: PPUSH
2223: LD_INT 35
2225: PPUSH
2226: LD_INT 52
2228: PUSH
2229: LD_INT 15
2231: PUSH
2232: LD_INT 81
2234: PUSH
2235: LD_INT 9
2237: PUSH
2238: LD_INT 120
2240: PUSH
2241: LD_INT 52
2243: PUSH
2244: LD_INT 135
2246: PUSH
2247: LD_INT 80
2249: PUSH
2250: LD_INT 122
2252: PUSH
2253: LD_INT 95
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: LIST
2260: LIST
2261: LIST
2262: LIST
2263: LIST
2264: LIST
2265: LIST
2266: LIST
2267: PPUSH
2268: CALL 421 0 4
2272: END
// every 0 0$01 trigger IsOk ( russian_patrol_hidden ) do
2273: LD_EXP 26
2277: PPUSH
2278: CALL_OW 302
2282: IFFALSE 2336
2284: GO 2286
2286: DISABLE
// ComPatrol ( russian_patrol_hidden , forest , 0 0$02 , [ 137 , 30 , 127 , 23 , 122 , 16 , 114 , 3 ] ) ;
2287: LD_EXP 26
2291: PPUSH
2292: LD_STRING forest
2294: PPUSH
2295: LD_INT 70
2297: PPUSH
2298: LD_INT 137
2300: PUSH
2301: LD_INT 30
2303: PUSH
2304: LD_INT 127
2306: PUSH
2307: LD_INT 23
2309: PUSH
2310: LD_INT 122
2312: PUSH
2313: LD_INT 16
2315: PUSH
2316: LD_INT 114
2318: PUSH
2319: LD_INT 3
2321: PUSH
2322: EMPTY
2323: LIST
2324: LIST
2325: LIST
2326: LIST
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: PPUSH
2332: CALL 421 0 4
2336: END
// every 0 0$01 trigger macmilan_use_radio do
2337: LD_EXP 6
2341: IFFALSE 2402
2343: GO 2345
2345: DISABLE
// begin active_road_patrol := false ;
2346: LD_ADDR_EXP 8
2350: PUSH
2351: LD_INT 0
2353: ST_TO_ADDR
// ComStop ( russian_patrol_tanks ) ;
2354: LD_EXP 23
2358: PPUSH
2359: CALL_OW 141
// AddComAgressiveMove ( russian_patrol_tanks , 72 , 41 ) ;
2363: LD_EXP 23
2367: PPUSH
2368: LD_INT 72
2370: PPUSH
2371: LD_INT 41
2373: PPUSH
2374: CALL_OW 174
// ComExitBuilding ( russian_troops_2 ) ;
2378: LD_EXP 22
2382: PPUSH
2383: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , 72 , 41 ) ;
2387: LD_EXP 22
2391: PPUSH
2392: LD_INT 72
2394: PPUSH
2395: LD_INT 41
2397: PPUSH
2398: CALL_OW 174
// end ;
2402: END
// every 0 0$03 trigger FilterUnitsInArea ( def_south , [ f_side , 1 ] ) do var un ;
2403: LD_INT 9
2405: PPUSH
2406: LD_INT 22
2408: PUSH
2409: LD_INT 1
2411: PUSH
2412: EMPTY
2413: LIST
2414: LIST
2415: PPUSH
2416: CALL_OW 70
2420: IFFALSE 2494
2422: GO 2424
2424: DISABLE
2425: LD_INT 0
2427: PPUSH
// begin enable ;
2428: ENABLE
// un := FilterUnitsInArea ( def_south , [ f_side , 1 ] ) [ 1 ] ;
2429: LD_ADDR_VAR 0 1
2433: PUSH
2434: LD_INT 9
2436: PPUSH
2437: LD_INT 22
2439: PUSH
2440: LD_INT 1
2442: PUSH
2443: EMPTY
2444: LIST
2445: LIST
2446: PPUSH
2447: CALL_OW 70
2451: PUSH
2452: LD_INT 1
2454: ARRAY
2455: ST_TO_ADDR
// ComExitBuilding ( russian_troops_2 ) ;
2456: LD_EXP 22
2460: PPUSH
2461: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , GetX ( un ) , GetY ( un ) ) ;
2465: LD_EXP 22
2469: PPUSH
2470: LD_VAR 0 1
2474: PPUSH
2475: CALL_OW 250
2479: PPUSH
2480: LD_VAR 0 1
2484: PPUSH
2485: CALL_OW 251
2489: PPUSH
2490: CALL_OW 174
// end ;
2494: PPOPN 1
2496: END
// every 0 0$01 trigger ( GetLives ( russian_patrol_tanks [ 1 ] ) < 999 or GetLives ( russian_patrol_tanks [ 2 ] ) < 999 ) and See ( 3 , JMM ) do
2497: LD_EXP 23
2501: PUSH
2502: LD_INT 1
2504: ARRAY
2505: PPUSH
2506: CALL_OW 256
2510: PUSH
2511: LD_INT 999
2513: LESS
2514: PUSH
2515: LD_EXP 23
2519: PUSH
2520: LD_INT 2
2522: ARRAY
2523: PPUSH
2524: CALL_OW 256
2528: PUSH
2529: LD_INT 999
2531: LESS
2532: OR
2533: PUSH
2534: LD_INT 3
2536: PPUSH
2537: LD_EXP 16
2541: PPUSH
2542: CALL_OW 292
2546: AND
2547: IFFALSE 2574
2549: GO 2551
2551: DISABLE
// begin active_road_patrol := false ;
2552: LD_ADDR_EXP 8
2556: PUSH
2557: LD_INT 0
2559: ST_TO_ADDR
// ComAttackUnit ( russian_patrol_tanks , JMM ) ;
2560: LD_EXP 23
2564: PPUSH
2565: LD_EXP 16
2569: PPUSH
2570: CALL_OW 115
// end ;
2574: END
// every 0 0$01 trigger macmilan_in_trap do
2575: LD_EXP 9
2579: IFFALSE 2625
2581: GO 2583
2583: DISABLE
// begin ComExitBuilding ( russian_troops_2 ) ;
2584: LD_EXP 22
2588: PPUSH
2589: CALL_OW 122
// ComAttackUnit ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , JMM ) ;
2593: LD_EXP 21
2597: PUSH
2598: LD_EXP 22
2602: ADD
2603: PUSH
2604: LD_EXP 27
2608: ADD
2609: PUSH
2610: LD_EXP 23
2614: ADD
2615: PPUSH
2616: LD_EXP 16
2620: PPUSH
2621: CALL_OW 115
// end ;
2625: END
// every 0 0$01 trigger meta_action do
2626: LD_EXP 10
2630: IFFALSE 2676
2632: GO 2634
2634: DISABLE
// begin active_road_patrol := false ;
2635: LD_ADDR_EXP 8
2639: PUSH
2640: LD_INT 0
2642: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , 93 , 1 ) ;
2643: LD_EXP 21
2647: PUSH
2648: LD_EXP 22
2652: ADD
2653: PUSH
2654: LD_EXP 27
2658: ADD
2659: PUSH
2660: LD_EXP 23
2664: ADD
2665: PPUSH
2666: LD_INT 93
2668: PPUSH
2669: LD_INT 1
2671: PPUSH
2672: CALL_OW 114
// end ;
2676: END
// every 0 0$1 trigger GetLives ( Pokryshkin ) < 1000 do
2677: LD_EXP 27
2681: PPUSH
2682: CALL_OW 256
2686: PUSH
2687: LD_INT 1000
2689: LESS
2690: IFFALSE 2741
2692: GO 2694
2694: DISABLE
// begin enable ;
2695: ENABLE
// if HexInfo ( 18 , 1 ) = Pokryshkin then
2696: LD_INT 18
2698: PPUSH
2699: LD_INT 1
2701: PPUSH
2702: CALL_OW 428
2706: PUSH
2707: LD_EXP 27
2711: EQUAL
2712: IFFALSE 2726
// begin RemoveUnit ( Pokryshkin ) ;
2714: LD_EXP 27
2718: PPUSH
2719: CALL_OW 64
// disable ;
2723: DISABLE
// end else
2724: GO 2741
// ComMoveXY ( Pokryshkin , 18 , 1 ) ;
2726: LD_EXP 27
2730: PPUSH
2731: LD_INT 18
2733: PPUSH
2734: LD_INT 1
2736: PPUSH
2737: CALL_OW 111
// end ;
2741: END
// every 0 0$20 trigger send_troops_to_forest do
2742: LD_EXP 14
2746: IFFALSE 2800
2748: GO 2750
2750: DISABLE
// begin if not IsOk ( russian_patrol_forest ) then
2751: LD_EXP 25
2755: PPUSH
2756: CALL_OW 302
2760: NOT
2761: IFFALSE 2765
// exit ;
2763: GO 2800
// ComAgressiveMove ( russian_troops_1 ^ Pokryshkin , GetRememberedX ( russian_patrol_forest ) , GetRememberedY ( russian_patrol_forest ) ) ;
2765: LD_EXP 21
2769: PUSH
2770: LD_EXP 27
2774: ADD
2775: PPUSH
2776: LD_EXP 25
2780: PPUSH
2781: CALL_OW 252
2785: PPUSH
2786: LD_EXP 25
2790: PPUSH
2791: CALL_OW 253
2795: PPUSH
2796: CALL_OW 114
// end ;
2800: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) = 3 then
2801: LD_VAR 0 1
2805: PPUSH
2806: CALL_OW 255
2810: PUSH
2811: LD_INT 3
2813: EQUAL
2814: IFFALSE 2857
// begin wait ( 11 ) ;
2816: LD_INT 11
2818: PPUSH
2819: CALL_OW 67
// ComEnterUnit ( driver , NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_depot ] ) , driver ) ) ;
2823: LD_VAR 0 1
2827: PPUSH
2828: LD_INT 30
2830: PUSH
2831: LD_INT 0
2833: PUSH
2834: EMPTY
2835: LIST
2836: LIST
2837: PPUSH
2838: CALL_OW 69
2842: PPUSH
2843: LD_VAR 0 1
2847: PPUSH
2848: CALL_OW 74
2852: PPUSH
2853: CALL_OW 120
// end ; end ; end_of_file
2857: PPOPN 4
2859: END
// export function Action ; var i ; begin
2860: LD_INT 0
2862: PPUSH
2863: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
2864: LD_ADDR_VAR 0 2
2868: PUSH
2869: LD_INT 22
2871: PUSH
2872: LD_INT 3
2874: PUSH
2875: EMPTY
2876: LIST
2877: LIST
2878: PUSH
2879: LD_INT 25
2881: PUSH
2882: LD_INT 1
2884: PUSH
2885: EMPTY
2886: LIST
2887: LIST
2888: PUSH
2889: EMPTY
2890: LIST
2891: LIST
2892: PPUSH
2893: CALL_OW 69
2897: PUSH
2898: FOR_IN
2899: IFFALSE 2912
// ComHold ( i ) ;
2901: LD_VAR 0 2
2905: PPUSH
2906: CALL_OW 140
2910: GO 2898
2912: POP
2913: POP
// InGameOn ;
2914: CALL_OW 8
// CenterOnXY ( 79 , 76 ) ;
2918: LD_INT 79
2920: PPUSH
2921: LD_INT 76
2923: PPUSH
2924: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
2928: LD_INT 10
2930: PPUSH
2931: CALL_OW 67
// PlaceUnitXY ( JMM , 80 , 79 , true ) ;
2935: LD_EXP 16
2939: PPUSH
2940: LD_INT 80
2942: PPUSH
2943: LD_INT 79
2945: PPUSH
2946: LD_INT 1
2948: PPUSH
2949: CALL_OW 48
// Wait ( 0 0$03 ) ;
2953: LD_INT 105
2955: PPUSH
2956: CALL_OW 67
// ComMoveXY ( JMM , 80 , 76 ) ;
2960: LD_EXP 16
2964: PPUSH
2965: LD_INT 80
2967: PPUSH
2968: LD_INT 76
2970: PPUSH
2971: CALL_OW 111
// Say ( JMM , D1-JMM-1 ) ;
2975: LD_EXP 16
2979: PPUSH
2980: LD_STRING D1-JMM-1
2982: PPUSH
2983: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2987: LD_INT 10
2989: PPUSH
2990: CALL_OW 67
// ComMoveXY ( JMM , 76 , 76 ) ;
2994: LD_EXP 16
2998: PPUSH
2999: LD_INT 76
3001: PPUSH
3002: LD_INT 76
3004: PPUSH
3005: CALL_OW 111
// Say ( JMM , D1-JMM-1a ) ;
3009: LD_EXP 16
3013: PPUSH
3014: LD_STRING D1-JMM-1a
3016: PPUSH
3017: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
3021: LD_INT 10
3023: PPUSH
3024: CALL_OW 67
// ComTurnXY ( JMM , 83 , 66 ) ;
3028: LD_EXP 16
3032: PPUSH
3033: LD_INT 83
3035: PPUSH
3036: LD_INT 66
3038: PPUSH
3039: CALL_OW 118
// Say ( JMM , D1-JMM-1b ) ;
3043: LD_EXP 16
3047: PPUSH
3048: LD_STRING D1-JMM-1b
3050: PPUSH
3051: CALL_OW 88
// Wait ( 0 0$0.5 ) ;
3055: LD_INT 18
3057: PPUSH
3058: CALL_OW 67
// Say ( JMM , D1-JMM-1c ) ;
3062: LD_EXP 16
3066: PPUSH
3067: LD_STRING D1-JMM-1c
3069: PPUSH
3070: CALL_OW 88
// Wait ( 0 0$0.2 ) ;
3074: LD_INT 7
3076: PPUSH
3077: CALL_OW 67
// SayRadioNoFaceNoName ( Powell , D1-Pow-1 ) ;
3081: LD_EXP 19
3085: PPUSH
3086: LD_STRING D1-Pow-1
3088: PPUSH
3089: CALL 68159 0 2
// Say ( JMM , D1-JMM-2 ) ;
3093: LD_EXP 16
3097: PPUSH
3098: LD_STRING D1-JMM-2
3100: PPUSH
3101: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D1-Pow-2 ) ;
3105: LD_EXP 19
3109: PPUSH
3110: LD_STRING D1-Pow-2
3112: PPUSH
3113: CALL 68159 0 2
// Say ( JMM , D1-JMM-3 ) ;
3117: LD_EXP 16
3121: PPUSH
3122: LD_STRING D1-JMM-3
3124: PPUSH
3125: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D1-Pow-3 ) ;
3129: LD_EXP 19
3133: PPUSH
3134: LD_STRING D1-Pow-3
3136: PPUSH
3137: CALL 68159 0 2
// Say ( JMM , D1-JMM-4 ) ;
3141: LD_EXP 16
3145: PPUSH
3146: LD_STRING D1-JMM-4
3148: PPUSH
3149: CALL_OW 88
// ComFree ( JMM ) ;
3153: LD_EXP 16
3157: PPUSH
3158: CALL_OW 139
// Wait ( 0 0$0.3 ) ;
3162: LD_INT 10
3164: PPUSH
3165: CALL_OW 67
// InGameOff ;
3169: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
3173: LD_STRING M1
3175: PPUSH
3176: CALL_OW 337
// SaveForQuickRestart ;
3180: CALL_OW 22
// active_russian_dialog := true ;
3184: LD_ADDR_EXP 3
3188: PUSH
3189: LD_INT 1
3191: ST_TO_ADDR
// active_road_patrol := true ;
3192: LD_ADDR_EXP 8
3196: PUSH
3197: LD_INT 1
3199: ST_TO_ADDR
// if Difficulty < 3 then
3200: LD_OWVAR 67
3204: PUSH
3205: LD_INT 3
3207: LESS
3208: IFFALSE 3239
// begin PlaceUnitXY ( Bobby , 41 , 71 , false ) ;
3210: LD_EXP 17
3214: PPUSH
3215: LD_INT 41
3217: PPUSH
3218: LD_INT 71
3220: PPUSH
3221: LD_INT 0
3223: PPUSH
3224: CALL_OW 48
// ComHold ( Bobby ) ;
3228: LD_EXP 17
3232: PPUSH
3233: CALL_OW 140
// end else
3237: GO 3287
// begin SetDir ( Bobby , 5 ) ;
3239: LD_EXP 17
3243: PPUSH
3244: LD_INT 5
3246: PPUSH
3247: CALL_OW 233
// PlaceUnitXY ( Bobby , 105 , 98 , false ) ;
3251: LD_EXP 17
3255: PPUSH
3256: LD_INT 105
3258: PPUSH
3259: LD_INT 98
3261: PPUSH
3262: LD_INT 0
3264: PPUSH
3265: CALL_OW 48
// ComCrawl ( Bobby ) ;
3269: LD_EXP 17
3273: PPUSH
3274: CALL_OW 137
// AddComHold ( Bobby ) ;
3278: LD_EXP 17
3282: PPUSH
3283: CALL_OW 200
// end ; if Difficulty < 3 then
3287: LD_OWVAR 67
3291: PUSH
3292: LD_INT 3
3294: LESS
3295: IFFALSE 3332
// begin PlaceUnitXY ( Cyrus , 90 , 42 , false ) ;
3297: LD_EXP 18
3301: PPUSH
3302: LD_INT 90
3304: PPUSH
3305: LD_INT 42
3307: PPUSH
3308: LD_INT 0
3310: PPUSH
3311: CALL_OW 48
// ComMoveXY ( Cyrus , 79 , 34 ) ;
3315: LD_EXP 18
3319: PPUSH
3320: LD_INT 79
3322: PPUSH
3323: LD_INT 34
3325: PPUSH
3326: CALL_OW 111
// end else
3330: GO 3380
// if Difficulty = 3 then
3332: LD_OWVAR 67
3336: PUSH
3337: LD_INT 3
3339: EQUAL
3340: IFFALSE 3362
// PlaceUnitXY ( Cyrus , 125 , 42 , false ) else
3342: LD_EXP 18
3346: PPUSH
3347: LD_INT 125
3349: PPUSH
3350: LD_INT 42
3352: PPUSH
3353: LD_INT 0
3355: PPUSH
3356: CALL_OW 48
3360: GO 3380
// PlaceUnitXY ( Cyrus , 154 , 97 , false ) ;
3362: LD_EXP 18
3366: PPUSH
3367: LD_INT 154
3369: PPUSH
3370: LD_INT 97
3372: PPUSH
3373: LD_INT 0
3375: PPUSH
3376: CALL_OW 48
// AddComCrawl ( Cyrus ) ;
3380: LD_EXP 18
3384: PPUSH
3385: CALL_OW 197
// AddComHold ( Cyrus ) ;
3389: LD_EXP 18
3393: PPUSH
3394: CALL_OW 200
// end ;
3398: LD_VAR 0 1
3402: RET
// every 0 0$01 trigger active_russian_dialog do var wait_points ;
3403: LD_EXP 3
3407: IFFALSE 4001
3409: GO 3411
3411: DISABLE
3412: LD_INT 0
3414: PPUSH
// begin wait_points := 0 ;
3415: LD_ADDR_VAR 0 1
3419: PUSH
3420: LD_INT 0
3422: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
3423: LD_INT 70
3425: PPUSH
3426: CALL_OW 67
// ComAgressiveMove ( russian_troops_1 , 79 , 83 ) ;
3430: LD_EXP 21
3434: PPUSH
3435: LD_INT 79
3437: PPUSH
3438: LD_INT 83
3440: PPUSH
3441: CALL_OW 114
// Say ( russian_troops_1 [ 2 ] , D1R-Rus1-1 ) ;
3445: LD_EXP 21
3449: PUSH
3450: LD_INT 2
3452: ARRAY
3453: PPUSH
3454: LD_STRING D1R-Rus1-1
3456: PPUSH
3457: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1R-Rus2-1 ) ;
3461: LD_EXP 21
3465: PUSH
3466: LD_INT 1
3468: ARRAY
3469: PPUSH
3470: LD_STRING D1R-Rus2-1
3472: PPUSH
3473: CALL_OW 88
// ComAgressiveMove ( russian_troops_2 , 91 , 80 ) ;
3477: LD_EXP 22
3481: PPUSH
3482: LD_INT 91
3484: PPUSH
3485: LD_INT 80
3487: PPUSH
3488: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
3492: LD_INT 35
3494: PPUSH
3495: CALL_OW 67
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 79 , 82 ) < 6 ;
3499: LD_EXP 21
3503: PUSH
3504: LD_INT 1
3506: ARRAY
3507: PPUSH
3508: LD_INT 79
3510: PPUSH
3511: LD_INT 82
3513: PPUSH
3514: CALL_OW 297
3518: PUSH
3519: LD_INT 6
3521: LESS
3522: IFFALSE 3492
// if not IsInArea ( JMM , jmm_spot ) then
3524: LD_EXP 16
3528: PPUSH
3529: LD_INT 5
3531: PPUSH
3532: CALL_OW 308
3536: NOT
3537: IFFALSE 3557
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1 ) else
3539: LD_EXP 21
3543: PUSH
3544: LD_INT 1
3546: ARRAY
3547: PPUSH
3548: LD_STRING D1Ra-Rus2-1
3550: PPUSH
3551: CALL_OW 88
3555: GO 3624
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3557: LD_EXP 21
3561: PUSH
3562: LD_INT 2
3564: ARRAY
3565: PPUSH
3566: LD_STRING D1Rb-Rus1-1
3568: PPUSH
3569: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Rb-Rus2-1 ) ;
3573: LD_EXP 21
3577: PUSH
3578: LD_INT 1
3580: ARRAY
3581: PPUSH
3582: LD_STRING D1Rb-Rus2-1
3584: PPUSH
3585: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 , GetX ( JMM ) , GetY ( JMM ) ) ;
3589: LD_EXP 21
3593: PUSH
3594: LD_EXP 22
3598: ADD
3599: PPUSH
3600: LD_EXP 16
3604: PPUSH
3605: CALL_OW 250
3609: PPUSH
3610: LD_EXP 16
3614: PPUSH
3615: CALL_OW 251
3619: PPUSH
3620: CALL_OW 114
// end ; wait_points := 10 ;
3624: LD_ADDR_VAR 0 1
3628: PUSH
3629: LD_INT 10
3631: ST_TO_ADDR
// if Difficulty > 1 then
3632: LD_OWVAR 67
3636: PUSH
3637: LD_INT 1
3639: GREATER
3640: IFFALSE 3722
// begin ComAgressiveMove ( russian_troops_1 , 78 , 95 ) ;
3642: LD_EXP 21
3646: PPUSH
3647: LD_INT 78
3649: PPUSH
3650: LD_INT 95
3652: PPUSH
3653: CALL_OW 114
// AddComWait ( russian_troops_1 , 0 0$05 ) ;
3657: LD_EXP 21
3661: PPUSH
3662: LD_INT 175
3664: PPUSH
3665: CALL_OW 202
// wait_points := wait_points + 15 ;
3669: LD_ADDR_VAR 0 1
3673: PUSH
3674: LD_VAR 0 1
3678: PUSH
3679: LD_INT 15
3681: PLUS
3682: ST_TO_ADDR
// if Difficulty > 2 then
3683: LD_OWVAR 67
3687: PUSH
3688: LD_INT 2
3690: GREATER
3691: IFFALSE 3722
// begin AddComAgressiveMove ( russian_troops_1 , 65 , 79 ) ;
3693: LD_EXP 21
3697: PPUSH
3698: LD_INT 65
3700: PPUSH
3701: LD_INT 79
3703: PPUSH
3704: CALL_OW 174
// wait_points := wait_points + 5 ;
3708: LD_ADDR_VAR 0 1
3712: PUSH
3713: LD_VAR 0 1
3717: PUSH
3718: LD_INT 5
3720: PLUS
3721: ST_TO_ADDR
// end ; end ; repeat wait ( 0 0$01 ) ;
3722: LD_INT 35
3724: PPUSH
3725: CALL_OW 67
// wait_points := wait_points - 1 ;
3729: LD_ADDR_VAR 0 1
3733: PUSH
3734: LD_VAR 0 1
3738: PUSH
3739: LD_INT 1
3741: MINUS
3742: ST_TO_ADDR
// if See ( 3 , JMM ) then
3743: LD_INT 3
3745: PPUSH
3746: LD_EXP 16
3750: PPUSH
3751: CALL_OW 292
3755: IFFALSE 3809
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3757: LD_EXP 21
3761: PUSH
3762: LD_INT 2
3764: ARRAY
3765: PPUSH
3766: LD_STRING D1Rb-Rus1-1
3768: PPUSH
3769: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3773: LD_EXP 21
3777: PPUSH
3778: LD_EXP 16
3782: PPUSH
3783: CALL_OW 250
3787: PPUSH
3788: LD_EXP 16
3792: PPUSH
3793: CALL_OW 251
3797: PPUSH
3798: CALL_OW 114
// Wait ( 0 0$03 ) ;
3802: LD_INT 105
3804: PPUSH
3805: CALL_OW 67
// end ; until wait_points = 0 ;
3809: LD_VAR 0 1
3813: PUSH
3814: LD_INT 0
3816: EQUAL
3817: IFFALSE 3722
// Say ( russian_troops_1 [ 2 ] , D1Rc-Rus1-1 ) ;
3819: LD_EXP 21
3823: PUSH
3824: LD_INT 2
3826: ARRAY
3827: PPUSH
3828: LD_STRING D1Rc-Rus1-1
3830: PPUSH
3831: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1a ) ;
3835: LD_EXP 21
3839: PUSH
3840: LD_INT 1
3842: ARRAY
3843: PPUSH
3844: LD_STRING D1Ra-Rus2-1a
3846: PPUSH
3847: CALL_OW 88
// active_powell_dialog := true ;
3851: LD_ADDR_EXP 15
3855: PUSH
3856: LD_INT 1
3858: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3859: LD_EXP 21
3863: PPUSH
3864: LD_INT 45
3866: PPUSH
3867: LD_INT 5
3869: PPUSH
3870: CALL_OW 114
// ComEnterUnit ( russian_troops_2 , rbar1 ) ;
3874: LD_EXP 22
3878: PPUSH
3879: LD_INT 26
3881: PPUSH
3882: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
3886: LD_INT 35
3888: PPUSH
3889: CALL_OW 67
// if See ( 3 , JMM ) then
3893: LD_INT 3
3895: PPUSH
3896: LD_EXP 16
3900: PPUSH
3901: CALL_OW 292
3905: IFFALSE 3961
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3907: LD_EXP 21
3911: PUSH
3912: LD_INT 2
3914: ARRAY
3915: PPUSH
3916: LD_STRING D1Rb-Rus1-1
3918: PPUSH
3919: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3923: LD_EXP 21
3927: PPUSH
3928: LD_EXP 16
3932: PPUSH
3933: CALL_OW 250
3937: PPUSH
3938: LD_EXP 16
3942: PPUSH
3943: CALL_OW 251
3947: PPUSH
3948: CALL_OW 114
// Wait ( 0 0$50 ) ;
3952: LD_INT 1750
3954: PPUSH
3955: CALL_OW 67
// end else
3959: GO 3976
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3961: LD_EXP 21
3965: PPUSH
3966: LD_INT 45
3968: PPUSH
3969: LD_INT 5
3971: PPUSH
3972: CALL_OW 114
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 45 , 5 ) < 10 ;
3976: LD_EXP 21
3980: PUSH
3981: LD_INT 1
3983: ARRAY
3984: PPUSH
3985: LD_INT 45
3987: PPUSH
3988: LD_INT 5
3990: PPUSH
3991: CALL_OW 297
3995: PUSH
3996: LD_INT 10
3998: LESS
3999: IFFALSE 3886
// end ;
4001: PPOPN 1
4003: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 6 ] ] ) and Difficulty = 1 do
4004: LD_INT 22
4006: PUSH
4007: LD_INT 3
4009: PUSH
4010: EMPTY
4011: LIST
4012: LIST
4013: PUSH
4014: LD_INT 92
4016: PUSH
4017: LD_INT 80
4019: PUSH
4020: LD_INT 83
4022: PUSH
4023: LD_INT 6
4025: PUSH
4026: EMPTY
4027: LIST
4028: LIST
4029: LIST
4030: LIST
4031: PUSH
4032: EMPTY
4033: LIST
4034: LIST
4035: PPUSH
4036: CALL_OW 69
4040: PUSH
4041: LD_OWVAR 67
4045: PUSH
4046: LD_INT 1
4048: EQUAL
4049: AND
4050: IFFALSE 4131
4052: GO 4054
4054: DISABLE
// begin PlaceSeeing ( 80 , 83 , 1 , - 7 ) ;
4055: LD_INT 80
4057: PPUSH
4058: LD_INT 83
4060: PPUSH
4061: LD_INT 1
4063: PPUSH
4064: LD_INT 7
4066: NEG
4067: PPUSH
4068: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
4072: LD_INT 35
4074: PPUSH
4075: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 10 ] ] ) ;
4079: LD_INT 22
4081: PUSH
4082: LD_INT 3
4084: PUSH
4085: EMPTY
4086: LIST
4087: LIST
4088: PUSH
4089: LD_INT 92
4091: PUSH
4092: LD_INT 80
4094: PUSH
4095: LD_INT 83
4097: PUSH
4098: LD_INT 10
4100: PUSH
4101: EMPTY
4102: LIST
4103: LIST
4104: LIST
4105: LIST
4106: PUSH
4107: EMPTY
4108: LIST
4109: LIST
4110: PPUSH
4111: CALL_OW 69
4115: NOT
4116: IFFALSE 4072
// RemoveSeeing ( 80 , 83 , 1 ) ;
4118: LD_INT 80
4120: PPUSH
4121: LD_INT 83
4123: PPUSH
4124: LD_INT 1
4126: PPUSH
4127: CALL_OW 331
// end ;
4131: END
// every 0 0$02 trigger GetDistUnits ( JMM , Bobby ) < 6 and IsOk ( Bobby ) do
4132: LD_EXP 16
4136: PPUSH
4137: LD_EXP 17
4141: PPUSH
4142: CALL_OW 296
4146: PUSH
4147: LD_INT 6
4149: LESS
4150: PUSH
4151: LD_EXP 17
4155: PPUSH
4156: CALL_OW 302
4160: AND
4161: IFFALSE 4620
4163: GO 4165
4165: DISABLE
// begin ComWalk ( Bobby ) ;
4166: LD_EXP 17
4170: PPUSH
4171: CALL_OW 138
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4175: LD_EXP 17
4179: PPUSH
4180: LD_EXP 16
4184: PPUSH
4185: CALL_OW 250
4189: PPUSH
4190: LD_EXP 16
4194: PPUSH
4195: CALL_OW 251
4199: PPUSH
4200: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
4204: LD_INT 35
4206: PPUSH
4207: CALL_OW 67
// until See ( 4 , JMM ) ;
4211: LD_INT 4
4213: PPUSH
4214: LD_EXP 16
4218: PPUSH
4219: CALL_OW 292
4223: IFFALSE 4204
// InGameOn ;
4225: CALL_OW 8
// ComTurnUnit ( JMM , Bobby ) ;
4229: LD_EXP 16
4233: PPUSH
4234: LD_EXP 17
4238: PPUSH
4239: CALL_OW 119
// if cyrus_in_squad and IsOk ( Cyrus ) and GetDistUnits ( JMM , Cyrus ) < 10 then
4243: LD_EXP 7
4247: PUSH
4248: LD_EXP 18
4252: PPUSH
4253: CALL_OW 302
4257: AND
4258: PUSH
4259: LD_EXP 16
4263: PPUSH
4264: LD_EXP 18
4268: PPUSH
4269: CALL_OW 296
4273: PUSH
4274: LD_INT 10
4276: LESS
4277: AND
4278: IFFALSE 4323
// begin ComMoveXY ( Cyrus , GetX ( JMM ) , GetY ( JMM ) ) ;
4280: LD_EXP 18
4284: PPUSH
4285: LD_EXP 16
4289: PPUSH
4290: CALL_OW 250
4294: PPUSH
4295: LD_EXP 16
4299: PPUSH
4300: CALL_OW 251
4304: PPUSH
4305: CALL_OW 111
// AddComTurnUnit ( Cyrus , Bobby ) ;
4309: LD_EXP 18
4313: PPUSH
4314: LD_EXP 17
4318: PPUSH
4319: CALL_OW 179
// end ; Say ( JMM , D2-JMM-1 ) ;
4323: LD_EXP 16
4327: PPUSH
4328: LD_STRING D2-JMM-1
4330: PPUSH
4331: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
4335: LD_INT 10
4337: PPUSH
4338: CALL_OW 67
// ComTurnUnit ( Bobby , JMM ) ;
4342: LD_EXP 17
4346: PPUSH
4347: LD_EXP 16
4351: PPUSH
4352: CALL_OW 119
// Say ( Bobby , D2-Bobby-1 ) ;
4356: LD_EXP 17
4360: PPUSH
4361: LD_STRING D2-Bobby-1
4363: PPUSH
4364: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
4368: LD_EXP 16
4372: PPUSH
4373: LD_STRING D2-JMM-2
4375: PPUSH
4376: CALL_OW 88
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4380: LD_EXP 17
4384: PPUSH
4385: LD_EXP 16
4389: PPUSH
4390: CALL_OW 250
4394: PPUSH
4395: LD_EXP 16
4399: PPUSH
4400: CALL_OW 251
4404: PPUSH
4405: CALL_OW 111
// Say ( Bobby , D2-Bobby-2 ) ;
4409: LD_EXP 17
4413: PPUSH
4414: LD_STRING D2-Bobby-2
4416: PPUSH
4417: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
4421: LD_EXP 16
4425: PPUSH
4426: LD_STRING D2-JMM-3
4428: PPUSH
4429: CALL_OW 88
// ComTurnUnit ( Bobby , JMM ) ;
4433: LD_EXP 17
4437: PPUSH
4438: LD_EXP 16
4442: PPUSH
4443: CALL_OW 119
// DialogueOn ;
4447: CALL_OW 6
// Say ( Bobby , D2-Bobby-3 ) ;
4451: LD_EXP 17
4455: PPUSH
4456: LD_STRING D2-Bobby-3
4458: PPUSH
4459: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
4463: LD_EXP 16
4467: PPUSH
4468: LD_STRING D2-JMM-4
4470: PPUSH
4471: CALL_OW 88
// Say ( Bobby , D2-Bobby-4 ) ;
4475: LD_EXP 17
4479: PPUSH
4480: LD_STRING D2-Bobby-4
4482: PPUSH
4483: CALL_OW 88
// Say ( JMM , D2-JMM-5 ) ;
4487: LD_EXP 16
4491: PPUSH
4492: LD_STRING D2-JMM-5
4494: PPUSH
4495: CALL_OW 88
// Say ( Bobby , D2-Bobby-5 ) ;
4499: LD_EXP 17
4503: PPUSH
4504: LD_STRING D2-Bobby-5
4506: PPUSH
4507: CALL_OW 88
// Say ( JMM , D2-JMM-6 ) ;
4511: LD_EXP 16
4515: PPUSH
4516: LD_STRING D2-JMM-6
4518: PPUSH
4519: CALL_OW 88
// if not powell_contact then
4523: LD_EXP 5
4527: NOT
4528: IFFALSE 4554
// begin Say ( Bobby , D2-Bobby-6 ) ;
4530: LD_EXP 17
4534: PPUSH
4535: LD_STRING D2-Bobby-6
4537: PPUSH
4538: CALL_OW 88
// Say ( JMM , D2-JMM-7 ) ;
4542: LD_EXP 16
4546: PPUSH
4547: LD_STRING D2-JMM-7
4549: PPUSH
4550: CALL_OW 88
// end ; DialogueOff ;
4554: CALL_OW 7
// InGameOff ;
4558: CALL_OW 9
// SetSide ( Bobby , 1 ) ;
4562: LD_EXP 17
4566: PPUSH
4567: LD_INT 1
4569: PPUSH
4570: CALL_OW 235
// ComFree ( [ JMM , Bobby ] ) ;
4574: LD_EXP 16
4578: PUSH
4579: LD_EXP 17
4583: PUSH
4584: EMPTY
4585: LIST
4586: LIST
4587: PPUSH
4588: CALL_OW 139
// bobby_in_squad := true ;
4592: LD_ADDR_EXP 4
4596: PUSH
4597: LD_INT 1
4599: ST_TO_ADDR
// if powell_contact and not cyrus_in_squad then
4600: LD_EXP 5
4604: PUSH
4605: LD_EXP 7
4609: NOT
4610: AND
4611: IFFALSE 4620
// ChangeMissionObjectives ( M2b ) ;
4613: LD_STRING M2b
4615: PPUSH
4616: CALL_OW 337
// end ;
4620: END
// every 0 0$10 trigger active_russian_dialog and Difficulty < 3 do
4621: LD_EXP 3
4625: PUSH
4626: LD_OWVAR 67
4630: PUSH
4631: LD_INT 3
4633: LESS
4634: AND
4635: IFFALSE 4669
4637: GO 4639
4639: DISABLE
// begin wait ( 1 1$00 ) ;
4640: LD_INT 2100
4642: PPUSH
4643: CALL_OW 67
// if not bobby_in_squad then
4647: LD_EXP 4
4651: NOT
4652: IFFALSE 4669
// ComMoveXY ( Bobby , 75 , 83 ) ;
4654: LD_EXP 17
4658: PPUSH
4659: LD_INT 75
4661: PPUSH
4662: LD_INT 83
4664: PPUSH
4665: CALL_OW 111
// end ;
4669: END
// every 0 0$10 trigger cyrus_in_squad and not bobby_in_squad do
4670: LD_EXP 7
4674: PUSH
4675: LD_EXP 4
4679: NOT
4680: AND
4681: IFFALSE 4710
4683: GO 4685
4685: DISABLE
// begin ComMoveXY ( Bobby , 105 , 97 ) ;
4686: LD_EXP 17
4690: PPUSH
4691: LD_INT 105
4693: PPUSH
4694: LD_INT 97
4696: PPUSH
4697: CALL_OW 111
// AddComCrawl ( Bobby ) ;
4701: LD_EXP 17
4705: PPUSH
4706: CALL_OW 197
// end ;
4710: END
// every 0 0$01 trigger IsInArea ( JMM , obstacle_area ) and GetDistUnits ( JMM , Bobby ) < 7 and bobby_in_squad do
4711: LD_EXP 16
4715: PPUSH
4716: LD_INT 6
4718: PPUSH
4719: CALL_OW 308
4723: PUSH
4724: LD_EXP 16
4728: PPUSH
4729: LD_EXP 17
4733: PPUSH
4734: CALL_OW 296
4738: PUSH
4739: LD_INT 7
4741: LESS
4742: AND
4743: PUSH
4744: LD_EXP 4
4748: AND
4749: IFFALSE 4796
4751: GO 4753
4753: DISABLE
// begin ComHold ( [ JMM , Bobby ] ) ;
4754: LD_EXP 16
4758: PUSH
4759: LD_EXP 17
4763: PUSH
4764: EMPTY
4765: LIST
4766: LIST
4767: PPUSH
4768: CALL_OW 140
// Say ( JMM , D2a-JMM-1 ) ;
4772: LD_EXP 16
4776: PPUSH
4777: LD_STRING D2a-JMM-1
4779: PPUSH
4780: CALL_OW 88
// Say ( Bobby , D2a-Bobby-1 ) ;
4784: LD_EXP 17
4788: PPUSH
4789: LD_STRING D2a-Bobby-1
4791: PPUSH
4792: CALL_OW 88
// end ;
4796: END
// every 0 0$50 trigger active_powell_dialog and not See ( 3 , JMM ) do
4797: LD_EXP 15
4801: PUSH
4802: LD_INT 3
4804: PPUSH
4805: LD_EXP 16
4809: PPUSH
4810: CALL_OW 292
4814: NOT
4815: AND
4816: IFFALSE 4987
4818: GO 4820
4820: DISABLE
// begin wait ( 0 0$5 ) ;
4821: LD_INT 175
4823: PPUSH
4824: CALL_OW 67
// InGameOn ;
4828: CALL_OW 8
// DialogueOn ;
4832: CALL_OW 6
// SayRadioNoFaceNoName ( Powell , D3-Pow-1 ) ;
4836: LD_EXP 19
4840: PPUSH
4841: LD_STRING D3-Pow-1
4843: PPUSH
4844: CALL 68159 0 2
// Say ( JMM , D3-JMM-1 ) ;
4848: LD_EXP 16
4852: PPUSH
4853: LD_STRING D3-JMM-1
4855: PPUSH
4856: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D3-Pow-2 ) ;
4860: LD_EXP 19
4864: PPUSH
4865: LD_STRING D3-Pow-2
4867: PPUSH
4868: CALL 68159 0 2
// Say ( JMM , D3-JMM-2 ) ;
4872: LD_EXP 16
4876: PPUSH
4877: LD_STRING D3-JMM-2
4879: PPUSH
4880: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D3-Pow-3 ) ;
4884: LD_EXP 19
4888: PPUSH
4889: LD_STRING D3-Pow-3
4891: PPUSH
4892: CALL 68159 0 2
// DialogueOff ;
4896: CALL_OW 7
// InGameOff ;
4900: CALL_OW 9
// powell_contact := true ;
4904: LD_ADDR_EXP 5
4908: PUSH
4909: LD_INT 1
4911: ST_TO_ADDR
// SetAreaMapShow ( exitArea , 1 ) ;
4912: LD_INT 10
4914: PPUSH
4915: LD_INT 1
4917: PPUSH
4918: CALL_OW 424
// uc_side := 4 ;
4922: LD_ADDR_OWVAR 20
4926: PUSH
4927: LD_INT 4
4929: ST_TO_ADDR
// uc_nation := 1 ;
4930: LD_ADDR_OWVAR 21
4934: PUSH
4935: LD_INT 1
4937: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
4938: LD_ADDR_EXP 19
4942: PUSH
4943: LD_STRING Powell
4945: PPUSH
4946: LD_INT 0
4948: PPUSH
4949: LD_STRING 
4951: PPUSH
4952: CALL 26919 0 3
4956: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
4957: LD_STRING M2
4959: PPUSH
4960: CALL_OW 337
// if not bobby_in_squad then
4964: LD_EXP 4
4968: NOT
4969: IFFALSE 4980
// ChangeMissionObjectives ( M2a ) else
4971: LD_STRING M2a
4973: PPUSH
4974: CALL_OW 337
4978: GO 4987
// ChangeMissionObjectives ( M2b ) ;
4980: LD_STRING M2b
4982: PPUSH
4983: CALL_OW 337
// end ;
4987: END
// every 0 0$01 trigger IsInArea ( JMM , fakeArea ) do
4988: LD_EXP 16
4992: PPUSH
4993: LD_INT 7
4995: PPUSH
4996: CALL_OW 308
5000: IFFALSE 5135
5002: GO 5004
5004: DISABLE
// begin DialogueOn ;
5005: CALL_OW 6
// SayRadioNoFaceNoName ( fakePokryshkin , D4-Rus3-1 ) ;
5009: LD_EXP 20
5013: PPUSH
5014: LD_STRING D4-Rus3-1
5016: PPUSH
5017: CALL 68159 0 2
// DialogueOff ;
5021: CALL_OW 7
// ChangeMissionObjectives ( M3a ) ;
5025: LD_STRING M3a
5027: PPUSH
5028: CALL_OW 337
// SetAreaMapShow ( fakeEnd , 1 ) ;
5032: LD_INT 11
5034: PPUSH
5035: LD_INT 1
5037: PPUSH
5038: CALL_OW 424
// Wait ( 0 0$02 ) ;
5042: LD_INT 70
5044: PPUSH
5045: CALL_OW 67
// DialogueOn ;
5049: CALL_OW 6
// SayRadioNoFace ( Powell , D4-Pow-1 ) ;
5053: LD_EXP 19
5057: PPUSH
5058: LD_STRING D4-Pow-1
5060: PPUSH
5061: CALL_OW 586
// DialogueOff ;
5065: CALL_OW 7
// ChangeMissionObjectives ( M3b ) ;
5069: LD_STRING M3b
5071: PPUSH
5072: CALL_OW 337
// case Query ( Q1 ) of 1 :
5076: LD_STRING Q1
5078: PPUSH
5079: CALL_OW 97
5083: PUSH
5084: LD_INT 1
5086: DOUBLE
5087: EQUAL
5088: IFTRUE 5092
5090: GO 5123
5092: POP
// begin macmilan_use_radio := true ;
5093: LD_ADDR_EXP 6
5097: PUSH
5098: LD_INT 1
5100: ST_TO_ADDR
// DialogueOn ;
5101: CALL_OW 6
// Say ( JMM , D4a-JMM-1 ) ;
5105: LD_EXP 16
5109: PPUSH
5110: LD_STRING D4a-JMM-1
5112: PPUSH
5113: CALL_OW 88
// DialogueOff ;
5117: CALL_OW 7
// end ; 2 :
5121: GO 5135
5123: LD_INT 2
5125: DOUBLE
5126: EQUAL
5127: IFTRUE 5131
5129: GO 5134
5131: POP
// ; end ;
5132: GO 5135
5134: POP
// end ;
5135: END
// every 0 0$02 trigger GetDistUnits ( JMM , Cyrus ) < 8 and IsOk ( Cyrus ) do
5136: LD_EXP 16
5140: PPUSH
5141: LD_EXP 18
5145: PPUSH
5146: CALL_OW 296
5150: PUSH
5151: LD_INT 8
5153: LESS
5154: PUSH
5155: LD_EXP 18
5159: PPUSH
5160: CALL_OW 302
5164: AND
5165: IFFALSE 5456
5167: GO 5169
5169: DISABLE
// begin InGameOn ;
5170: CALL_OW 8
// ComMoveXY ( JMM , GetX ( Cyrus ) , GetY ( Cyrus ) ) ;
5174: LD_EXP 16
5178: PPUSH
5179: LD_EXP 18
5183: PPUSH
5184: CALL_OW 250
5188: PPUSH
5189: LD_EXP 18
5193: PPUSH
5194: CALL_OW 251
5198: PPUSH
5199: CALL_OW 111
// if IsOk ( Bobby ) and bobby_in_squad then
5203: LD_EXP 17
5207: PPUSH
5208: CALL_OW 302
5212: PUSH
5213: LD_EXP 4
5217: AND
5218: IFFALSE 5249
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
5220: LD_EXP 17
5224: PPUSH
5225: LD_EXP 16
5229: PPUSH
5230: CALL_OW 250
5234: PPUSH
5235: LD_EXP 16
5239: PPUSH
5240: CALL_OW 251
5244: PPUSH
5245: CALL_OW 111
// Say ( JMM , D5-JMM-1 ) ;
5249: LD_EXP 16
5253: PPUSH
5254: LD_STRING D5-JMM-1
5256: PPUSH
5257: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
5261: LD_INT 10
5263: PPUSH
5264: CALL_OW 67
// ComTurnUnit ( JMM , Cyrus ) ;
5268: LD_EXP 16
5272: PPUSH
5273: LD_EXP 18
5277: PPUSH
5278: CALL_OW 119
// ComWalk ( Cyrus ) ;
5282: LD_EXP 18
5286: PPUSH
5287: CALL_OW 138
// ComTurnUnit ( Cyrus , JMM ) ;
5291: LD_EXP 18
5295: PPUSH
5296: LD_EXP 16
5300: PPUSH
5301: CALL_OW 119
// Say ( Cyrus , D5-Cyrus-1 ) ;
5305: LD_EXP 18
5309: PPUSH
5310: LD_STRING D5-Cyrus-1
5312: PPUSH
5313: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5317: LD_EXP 17
5321: PPUSH
5322: CALL_OW 302
5326: PUSH
5327: LD_EXP 4
5331: AND
5332: IFFALSE 5372
// begin ComTurnUnit ( Bobby , Cyrus ) ;
5334: LD_EXP 17
5338: PPUSH
5339: LD_EXP 18
5343: PPUSH
5344: CALL_OW 119
// Say ( Bobby , D5-Bobby-1 ) ;
5348: LD_EXP 17
5352: PPUSH
5353: LD_STRING D5-Bobby-1
5355: PPUSH
5356: CALL_OW 88
// Say ( JMM , D5-JMM-2 ) ;
5360: LD_EXP 16
5364: PPUSH
5365: LD_STRING D5-JMM-2
5367: PPUSH
5368: CALL_OW 88
// end ; InGameOff ;
5372: CALL_OW 9
// cyrus_in_squad := true ;
5376: LD_ADDR_EXP 7
5380: PUSH
5381: LD_INT 1
5383: ST_TO_ADDR
// SetSide ( Cyrus , 1 ) ;
5384: LD_EXP 18
5388: PPUSH
5389: LD_INT 1
5391: PPUSH
5392: CALL_OW 235
// if powell_contact and not bobby_in_squad then
5396: LD_EXP 5
5400: PUSH
5401: LD_EXP 4
5405: NOT
5406: AND
5407: IFFALSE 5416
// ChangeMissionObjectives ( M2b ) ;
5409: LD_STRING M2b
5411: PPUSH
5412: CALL_OW 337
// if not bobby_in_squad and GetSide ( Bobby ) = 4 and IsOk ( Bobby ) then
5416: LD_EXP 4
5420: NOT
5421: PUSH
5422: LD_EXP 17
5426: PPUSH
5427: CALL_OW 255
5431: PUSH
5432: LD_INT 4
5434: EQUAL
5435: AND
5436: PUSH
5437: LD_EXP 17
5441: PPUSH
5442: CALL_OW 302
5446: AND
5447: IFFALSE 5456
// SetAchievement ( ACH_CYRUS ) ;
5449: LD_STRING ACH_CYRUS
5451: PPUSH
5452: CALL_OW 543
// end ;
5456: END
// every 0 0$01 trigger bobby_in_squad and cyrus_in_squad do
5457: LD_EXP 4
5461: PUSH
5462: LD_EXP 7
5466: AND
5467: IFFALSE 5479
5469: GO 5471
5471: DISABLE
// ChangeMissionObjectives ( M2c ) ;
5472: LD_STRING M2c
5474: PPUSH
5475: CALL_OW 337
5479: END
// every 0 0$01 trigger IsInArea ( JMM , trap ) do
5480: LD_EXP 16
5484: PPUSH
5485: LD_INT 8
5487: PPUSH
5488: CALL_OW 308
5492: IFFALSE 5544
5494: GO 5496
5496: DISABLE
// begin macmilan_in_trap := true ;
5497: LD_ADDR_EXP 9
5501: PUSH
5502: LD_INT 1
5504: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
5505: LD_INT 35
5507: PPUSH
5508: CALL_OW 67
// DialogueOn ;
5512: CALL_OW 6
// Say ( Pokryshkin , D5-Pok-1 ) ;
5516: LD_EXP 27
5520: PPUSH
5521: LD_STRING D5-Pok-1
5523: PPUSH
5524: CALL_OW 88
// DialogueOff ;
5528: CALL_OW 7
// Say ( JMM , D4b-JMM-1 ) ;
5532: LD_EXP 16
5536: PPUSH
5537: LD_STRING D4b-JMM-1
5539: PPUSH
5540: CALL_OW 88
// end ;
5544: END
// every 0 0$01 trigger ( IsInArea ( JMM , endRoadArea ) and GetDistUnits ( JMM , russian_meta_guards [ russian_meta_guards ] ) < 12 ) or UnitFilter ( russian_meta_guards , [ f_not , [ f_lives , 990 ] ] ) do var i , hp ;
5545: LD_EXP 16
5549: PPUSH
5550: LD_INT 13
5552: PPUSH
5553: CALL_OW 308
5557: PUSH
5558: LD_EXP 16
5562: PPUSH
5563: LD_EXP 24
5567: PUSH
5568: LD_EXP 24
5572: ARRAY
5573: PPUSH
5574: CALL_OW 296
5578: PUSH
5579: LD_INT 12
5581: LESS
5582: AND
5583: PUSH
5584: LD_EXP 24
5588: PPUSH
5589: LD_INT 3
5591: PUSH
5592: LD_INT 24
5594: PUSH
5595: LD_INT 990
5597: PUSH
5598: EMPTY
5599: LIST
5600: LIST
5601: PUSH
5602: EMPTY
5603: LIST
5604: LIST
5605: PPUSH
5606: CALL_OW 72
5610: OR
5611: IFFALSE 5849
5613: GO 5615
5615: DISABLE
5616: LD_INT 0
5618: PPUSH
5619: PPUSH
// begin hp := [ 300 , 250 , 200 , 150 ] [ Difficulty ] ;
5620: LD_ADDR_VAR 0 2
5624: PUSH
5625: LD_INT 300
5627: PUSH
5628: LD_INT 250
5630: PUSH
5631: LD_INT 200
5633: PUSH
5634: LD_INT 150
5636: PUSH
5637: EMPTY
5638: LIST
5639: LIST
5640: LIST
5641: LIST
5642: PUSH
5643: LD_OWVAR 67
5647: ARRAY
5648: ST_TO_ADDR
// for i in russian_meta_guards do
5649: LD_ADDR_VAR 0 1
5653: PUSH
5654: LD_EXP 24
5658: PUSH
5659: FOR_IN
5660: IFFALSE 5700
// if IsOk ( i ) then
5662: LD_VAR 0 1
5666: PPUSH
5667: CALL_OW 302
5671: IFFALSE 5698
// SetLives ( i , GetLives ( i ) - hp ) ;
5673: LD_VAR 0 1
5677: PPUSH
5678: LD_VAR 0 1
5682: PPUSH
5683: CALL_OW 256
5687: PUSH
5688: LD_VAR 0 2
5692: MINUS
5693: PPUSH
5694: CALL_OW 234
5698: GO 5659
5700: POP
5701: POP
// DialogueOn ;
5702: CALL_OW 6
// Say ( russian_meta_guards [ russian_meta_guards ] , D6-FRus1-1 ) ;
5706: LD_EXP 24
5710: PUSH
5711: LD_EXP 24
5715: ARRAY
5716: PPUSH
5717: LD_STRING D6-FRus1-1
5719: PPUSH
5720: CALL_OW 88
// Say ( JMM , D6-JMM-1 ) ;
5724: LD_EXP 16
5728: PPUSH
5729: LD_STRING D6-JMM-1
5731: PPUSH
5732: CALL_OW 88
// if IsOk ( Cyrus ) and cyrus_in_squad then
5736: LD_EXP 18
5740: PPUSH
5741: CALL_OW 302
5745: PUSH
5746: LD_EXP 7
5750: AND
5751: IFFALSE 5765
// Say ( Cyrus , D6-Cyrus-1 ) ;
5753: LD_EXP 18
5757: PPUSH
5758: LD_STRING D6-Cyrus-1
5760: PPUSH
5761: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5765: LD_EXP 17
5769: PPUSH
5770: CALL_OW 302
5774: PUSH
5775: LD_EXP 4
5779: AND
5780: IFFALSE 5794
// Say ( Bobby , D6-Bobby-1 ) ;
5782: LD_EXP 17
5786: PPUSH
5787: LD_STRING D6-Bobby-1
5789: PPUSH
5790: CALL_OW 88
// DialogueOff ;
5794: CALL_OW 7
// Wait ( [ 0 0$04 , 0 0$03 , 0 0$02 , 0 0$02 ] [ Difficulty ] ) ;
5798: LD_INT 140
5800: PUSH
5801: LD_INT 105
5803: PUSH
5804: LD_INT 70
5806: PUSH
5807: LD_INT 70
5809: PUSH
5810: EMPTY
5811: LIST
5812: LIST
5813: LIST
5814: LIST
5815: PUSH
5816: LD_OWVAR 67
5820: ARRAY
5821: PPUSH
5822: CALL_OW 67
// meta_action := true ;
5826: LD_ADDR_EXP 10
5830: PUSH
5831: LD_INT 1
5833: ST_TO_ADDR
// ComAgressiveMove ( russian_meta_guards , 94 , 8 ) ;
5834: LD_EXP 24
5838: PPUSH
5839: LD_INT 94
5841: PPUSH
5842: LD_INT 8
5844: PPUSH
5845: CALL_OW 114
// end ;
5849: PPOPN 2
5851: END
// every 0 0$1 trigger IsInArea ( JMM , secretPassage ) do
5852: LD_EXP 16
5856: PPUSH
5857: LD_INT 14
5859: PPUSH
5860: CALL_OW 308
5864: IFFALSE 5876
5866: GO 5868
5868: DISABLE
// SetAchievement ( ACH_SECRET ) ;
5869: LD_STRING ACH_SECRET
5871: PPUSH
5872: CALL_OW 543
5876: END
// every 0 0$01 trigger GetDistUnitXY ( JMM , 93 , 1 ) < 5 and FilterAllUnits ( [ f_side , 1 ] ) > 1 do
5877: LD_EXP 16
5881: PPUSH
5882: LD_INT 93
5884: PPUSH
5885: LD_INT 1
5887: PPUSH
5888: CALL_OW 297
5892: PUSH
5893: LD_INT 5
5895: LESS
5896: PUSH
5897: LD_INT 22
5899: PUSH
5900: LD_INT 1
5902: PUSH
5903: EMPTY
5904: LIST
5905: LIST
5906: PPUSH
5907: CALL_OW 69
5911: PUSH
5912: LD_INT 1
5914: GREATER
5915: AND
5916: IFFALSE 5933
5918: GO 5920
5920: DISABLE
// Say ( JMM , D6a-JMM-1 ) ;
5921: LD_EXP 16
5925: PPUSH
5926: LD_STRING D6a-JMM-1
5928: PPUSH
5929: CALL_OW 88
5933: END
// every 0 0$01 trigger IsInArea ( Bobby , exitArea ) or IsInArea ( Bobby , hiddenEnd ) do
5934: LD_EXP 17
5938: PPUSH
5939: LD_INT 10
5941: PPUSH
5942: CALL_OW 308
5946: PUSH
5947: LD_EXP 17
5951: PPUSH
5952: LD_INT 12
5954: PPUSH
5955: CALL_OW 308
5959: OR
5960: IFFALSE 6016
5962: GO 5964
5964: DISABLE
// begin bobby_saved := true ;
5965: LD_ADDR_EXP 12
5969: PUSH
5970: LD_INT 1
5972: ST_TO_ADDR
// SaveVariable ( GetLives ( Bobby ) , 01_BobbyLifePoints_1 ) ;
5973: LD_EXP 17
5977: PPUSH
5978: CALL_OW 256
5982: PPUSH
5983: LD_STRING 01_BobbyLifePoints_1
5985: PPUSH
5986: CALL_OW 39
// RemoveUnit ( Bobby ) ;
5990: LD_EXP 17
5994: PPUSH
5995: CALL_OW 64
// AddMedal ( Bobby , 1 ) ;
5999: LD_STRING Bobby
6001: PPUSH
6002: LD_INT 1
6004: PPUSH
6005: CALL_OW 101
// ToLua ( enableBioCharacter(BIO_BOBBY) ) ;
6009: LD_STRING enableBioCharacter(BIO_BOBBY)
6011: PPUSH
6012: CALL_OW 559
// end ;
6016: END
// every 0 0$01 trigger IsInArea ( Cyrus , exitArea ) or IsInArea ( Cyrus , hiddenEnd ) do
6017: LD_EXP 18
6021: PPUSH
6022: LD_INT 10
6024: PPUSH
6025: CALL_OW 308
6029: PUSH
6030: LD_EXP 18
6034: PPUSH
6035: LD_INT 12
6037: PPUSH
6038: CALL_OW 308
6042: OR
6043: IFFALSE 6099
6045: GO 6047
6047: DISABLE
// begin cyrus_saved := true ;
6048: LD_ADDR_EXP 13
6052: PUSH
6053: LD_INT 1
6055: ST_TO_ADDR
// SaveVariable ( GetLives ( Cyrus ) , 01_CyrusLifePoints_1 ) ;
6056: LD_EXP 18
6060: PPUSH
6061: CALL_OW 256
6065: PPUSH
6066: LD_STRING 01_CyrusLifePoints_1
6068: PPUSH
6069: CALL_OW 39
// RemoveUnit ( Cyrus ) ;
6073: LD_EXP 18
6077: PPUSH
6078: CALL_OW 64
// AddMedal ( Cyrus , 1 ) ;
6082: LD_STRING Cyrus
6084: PPUSH
6085: LD_INT 1
6087: PPUSH
6088: CALL_OW 101
// ToLua ( enableBioCharacter(BIO_CYRUS) ) ;
6092: LD_STRING enableBioCharacter(BIO_CYRUS)
6094: PPUSH
6095: CALL_OW 559
// end ;
6099: END
// every 0 0$01 trigger IsInArea ( JMM , exitArea ) or IsInArea ( JMM , hiddenEnd ) do var i , to_reward , wait_for_them , m1 , m2 , m3 ;
6100: LD_EXP 16
6104: PPUSH
6105: LD_INT 10
6107: PPUSH
6108: CALL_OW 308
6112: PUSH
6113: LD_EXP 16
6117: PPUSH
6118: LD_INT 12
6120: PPUSH
6121: CALL_OW 308
6125: OR
6126: IFFALSE 6755
6128: GO 6130
6130: DISABLE
6131: LD_INT 0
6133: PPUSH
6134: PPUSH
6135: PPUSH
6136: PPUSH
6137: PPUSH
6138: PPUSH
// begin if macmilan_use_radio then
6139: LD_EXP 6
6143: IFFALSE 6152
// SetAchievement ( ACH_RADIO ) ;
6145: LD_STRING ACH_RADIO
6147: PPUSH
6148: CALL_OW 543
// if ( not cyrus_saved and cyrus_in_squad and IsOk ( Cyrus ) ) or ( not bobby_saved and bobby_in_squad and IsOk ( Bobby ) ) then
6152: LD_EXP 13
6156: NOT
6157: PUSH
6158: LD_EXP 7
6162: AND
6163: PUSH
6164: LD_EXP 18
6168: PPUSH
6169: CALL_OW 302
6173: AND
6174: PUSH
6175: LD_EXP 12
6179: NOT
6180: PUSH
6181: LD_EXP 4
6185: AND
6186: PUSH
6187: LD_EXP 17
6191: PPUSH
6192: CALL_OW 302
6196: AND
6197: OR
6198: IFFALSE 6239
// case Query ( Q2 ) of 1 :
6200: LD_STRING Q2
6202: PPUSH
6203: CALL_OW 97
6207: PUSH
6208: LD_INT 1
6210: DOUBLE
6211: EQUAL
6212: IFTRUE 6216
6214: GO 6227
6216: POP
// wait_for_them := true ; 2 :
6217: LD_ADDR_VAR 0 3
6221: PUSH
6222: LD_INT 1
6224: ST_TO_ADDR
6225: GO 6239
6227: LD_INT 2
6229: DOUBLE
6230: EQUAL
6231: IFTRUE 6235
6233: GO 6238
6235: POP
// ; end ;
6236: GO 6239
6238: POP
// if wait_for_them then
6239: LD_VAR 0 3
6243: IFFALSE 6356
// repeat wait ( 0 0$01 ) ;
6245: LD_INT 35
6247: PPUSH
6248: CALL_OW 67
// until ( cyrus_saved and bobby_saved ) or ( cyrus_saved and ( not bobby_in_squad or IsDying ( Bobby ) or IsDead ( Bobby ) ) ) or ( bobby_saved and ( not cyrus_in_squad or IsDying ( Cyrus ) or IsDead ( Cyrus ) ) ) or ( IsDead ( Bobby ) and IsDead ( Cyrus ) ) ;
6252: LD_EXP 13
6256: PUSH
6257: LD_EXP 12
6261: AND
6262: PUSH
6263: LD_EXP 13
6267: PUSH
6268: LD_EXP 4
6272: NOT
6273: PUSH
6274: LD_EXP 17
6278: PPUSH
6279: CALL_OW 303
6283: OR
6284: PUSH
6285: LD_EXP 17
6289: PPUSH
6290: CALL_OW 301
6294: OR
6295: AND
6296: OR
6297: PUSH
6298: LD_EXP 12
6302: PUSH
6303: LD_EXP 7
6307: NOT
6308: PUSH
6309: LD_EXP 18
6313: PPUSH
6314: CALL_OW 303
6318: OR
6319: PUSH
6320: LD_EXP 18
6324: PPUSH
6325: CALL_OW 301
6329: OR
6330: AND
6331: OR
6332: PUSH
6333: LD_EXP 17
6337: PPUSH
6338: CALL_OW 301
6342: PUSH
6343: LD_EXP 18
6347: PPUSH
6348: CALL_OW 301
6352: AND
6353: OR
6354: IFFALSE 6245
// SaveVariable ( GetLives ( JMM ) , 01_JMMLifePoints_1 ) ;
6356: LD_EXP 16
6360: PPUSH
6361: CALL_OW 256
6365: PPUSH
6366: LD_STRING 01_JMMLifePoints_1
6368: PPUSH
6369: CALL_OW 39
// RemoveUnit ( JMM ) ;
6373: LD_EXP 16
6377: PPUSH
6378: CALL_OW 64
// to_reward := [ JMM ] ;
6382: LD_ADDR_VAR 0 2
6386: PUSH
6387: LD_EXP 16
6391: PUSH
6392: EMPTY
6393: LIST
6394: ST_TO_ADDR
// if bobby_saved then
6395: LD_EXP 12
6399: IFFALSE 6417
// to_reward := to_reward ^ Bobby ;
6401: LD_ADDR_VAR 0 2
6405: PUSH
6406: LD_VAR 0 2
6410: PUSH
6411: LD_EXP 17
6415: ADD
6416: ST_TO_ADDR
// if cyrus_saved then
6417: LD_EXP 13
6421: IFFALSE 6439
// to_reward := to_reward ^ Cyrus ;
6423: LD_ADDR_VAR 0 2
6427: PUSH
6428: LD_VAR 0 2
6432: PUSH
6433: LD_EXP 18
6437: ADD
6438: ST_TO_ADDR
// m1 := true ;
6439: LD_ADDR_VAR 0 4
6443: PUSH
6444: LD_INT 1
6446: ST_TO_ADDR
// m2 := bobby_saved ;
6447: LD_ADDR_VAR 0 5
6451: PUSH
6452: LD_EXP 12
6456: ST_TO_ADDR
// m3 := cyrus_saved ;
6457: LD_ADDR_VAR 0 6
6461: PUSH
6462: LD_EXP 13
6466: ST_TO_ADDR
// AddMedal ( JMM , 1 ) ;
6467: LD_STRING JMM
6469: PPUSH
6470: LD_INT 1
6472: PPUSH
6473: CALL_OW 101
// if not bobby_in_squad then
6477: LD_EXP 4
6481: NOT
6482: IFFALSE 6495
// AddMedal ( Bobby , - 1 ) ;
6484: LD_STRING Bobby
6486: PPUSH
6487: LD_INT 1
6489: NEG
6490: PPUSH
6491: CALL_OW 101
// if not bobby_saved and ( IsDying ( Bobby ) or IsDead ( Bobby ) ) then
6495: LD_EXP 12
6499: NOT
6500: PUSH
6501: LD_EXP 17
6505: PPUSH
6506: CALL_OW 303
6510: PUSH
6511: LD_EXP 17
6515: PPUSH
6516: CALL_OW 301
6520: OR
6521: AND
6522: IFFALSE 6535
// AddMedal ( Bobby , - 2 ) ;
6524: LD_STRING Bobby
6526: PPUSH
6527: LD_INT 2
6529: NEG
6530: PPUSH
6531: CALL_OW 101
// if not cyrus_in_squad then
6535: LD_EXP 7
6539: NOT
6540: IFFALSE 6553
// AddMedal ( Cyrus , - 1 ) ;
6542: LD_STRING Cyrus
6544: PPUSH
6545: LD_INT 1
6547: NEG
6548: PPUSH
6549: CALL_OW 101
// if not cyrus_saved and ( IsDying ( Cyrus ) or IsDead ( Cyrus ) ) then
6553: LD_EXP 13
6557: NOT
6558: PUSH
6559: LD_EXP 18
6563: PPUSH
6564: CALL_OW 303
6568: PUSH
6569: LD_EXP 18
6573: PPUSH
6574: CALL_OW 301
6578: OR
6579: AND
6580: IFFALSE 6593
// AddMedal ( Cyrus , - 2 ) ;
6582: LD_STRING Cyrus
6584: PPUSH
6585: LD_INT 2
6587: NEG
6588: PPUSH
6589: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 and m3 then
6593: LD_OWVAR 67
6597: PUSH
6598: LD_INT 3
6600: GREATEREQUAL
6601: PUSH
6602: LD_VAR 0 4
6606: AND
6607: PUSH
6608: LD_VAR 0 5
6612: AND
6613: PUSH
6614: LD_VAR 0 6
6618: AND
6619: IFFALSE 6631
// SetAchievementEX ( ACH_AMER , 1 ) ;
6621: LD_STRING ACH_AMER
6623: PPUSH
6624: LD_INT 1
6626: PPUSH
6627: CALL_OW 564
// GiveMedals ( MAIN ) ;
6631: LD_STRING MAIN
6633: PPUSH
6634: CALL_OW 102
// RewardPeople ( to_reward ) ;
6638: LD_VAR 0 2
6642: PPUSH
6643: CALL_OW 43
// if bobby_saved then
6647: LD_EXP 12
6651: IFFALSE 6671
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
6653: LD_EXP 17
6657: PPUSH
6658: LD_EXP 2
6662: PUSH
6663: LD_STRING Bobby
6665: STR
6666: PPUSH
6667: CALL_OW 38
// if cyrus_saved then
6671: LD_EXP 13
6675: IFFALSE 6695
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
6677: LD_EXP 18
6681: PPUSH
6682: LD_EXP 2
6686: PUSH
6687: LD_STRING Cyrus
6689: STR
6690: PPUSH
6691: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
6695: LD_EXP 16
6699: PPUSH
6700: LD_EXP 2
6704: PUSH
6705: LD_STRING JMM
6707: STR
6708: PPUSH
6709: CALL_OW 38
// if tick <= 3 3$00 then
6713: LD_OWVAR 1
6717: PUSH
6718: LD_INT 6300
6720: LESSEQUAL
6721: IFFALSE 6730
// SetAchievement ( ACH_ASPEED_1 ) ;
6723: LD_STRING ACH_ASPEED_1
6725: PPUSH
6726: CALL_OW 543
// ToLua ( enableBioCharacter(BIO_JMM) ) ;
6730: LD_STRING enableBioCharacter(BIO_JMM)
6732: PPUSH
6733: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_JOAN) ) ;
6737: LD_STRING enableBioCharacter(BIO_JOAN)
6739: PPUSH
6740: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_BARN) ) ;
6744: LD_STRING enableBioCharacter(BIO_BARN)
6746: PPUSH
6747: CALL_OW 559
// YouWin ;
6751: CALL_OW 103
// end ; end_of_file
6755: PPOPN 6
6757: END
// on UnitGoesToRed ( un ) do begin if un = JMM then
6758: LD_VAR 0 1
6762: PUSH
6763: LD_EXP 16
6767: EQUAL
6768: IFFALSE 6777
// YouLost ( JMM ) ;
6770: LD_STRING JMM
6772: PPUSH
6773: CALL_OW 104
// end ;
6777: PPOPN 1
6779: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
6780: LD_VAR 0 1
6784: PPUSH
6785: LD_VAR 0 2
6789: PPUSH
6790: CALL 22750 0 2
// end ;
6794: PPOPN 2
6796: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
6797: LD_VAR 0 1
6801: PPUSH
6802: CALL 22630 0 1
// if un = JMM then
6806: LD_VAR 0 1
6810: PUSH
6811: LD_EXP 16
6815: EQUAL
6816: IFFALSE 6825
// YouLost ( JMM ) ;
6818: LD_STRING JMM
6820: PPUSH
6821: CALL_OW 104
// end ; end_of_file end_of_file
6825: PPOPN 1
6827: END
// export globalGameSaveCounter ; every 0 0$1 do
6828: GO 6830
6830: DISABLE
// begin enable ;
6831: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
6832: LD_STRING updateTimer(
6834: PUSH
6835: LD_OWVAR 1
6839: STR
6840: PUSH
6841: LD_STRING );
6843: STR
6844: PPUSH
6845: CALL_OW 559
// end ;
6849: END
// every 0 0$1 do
6850: GO 6852
6852: DISABLE
// begin globalGameSaveCounter := 0 ;
6853: LD_ADDR_EXP 28
6857: PUSH
6858: LD_INT 0
6860: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
6861: LD_STRING setGameSaveCounter(0)
6863: PPUSH
6864: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
6868: LD_STRING initStreamRollete();
6870: PPUSH
6871: CALL_OW 559
// InitStreamMode ;
6875: CALL 8201 0 0
// DefineStreamItems ( false ) ;
6879: LD_INT 0
6881: PPUSH
6882: CALL 8665 0 1
// end ;
6886: END
// export function SOS_MapStart ( ) ; begin
6887: LD_INT 0
6889: PPUSH
// if streamModeActive then
6890: LD_EXP 29
6894: IFFALSE 6903
// DefineStreamItems ( true ) ;
6896: LD_INT 1
6898: PPUSH
6899: CALL 8665 0 1
// UpdateLuaVariables ( ) ;
6903: CALL 6920 0 0
// UpdateFactoryWaypoints ( ) ;
6907: CALL 21534 0 0
// UpdateWarehouseGatheringPoints ( ) ;
6911: CALL 21791 0 0
// end ;
6915: LD_VAR 0 1
6919: RET
// function UpdateLuaVariables ( ) ; begin
6920: LD_INT 0
6922: PPUSH
// if globalGameSaveCounter then
6923: LD_EXP 28
6927: IFFALSE 6961
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
6929: LD_ADDR_EXP 28
6933: PUSH
6934: LD_EXP 28
6938: PPUSH
6939: CALL 65601 0 1
6943: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
6944: LD_STRING setGameSaveCounter(
6946: PUSH
6947: LD_EXP 28
6951: STR
6952: PUSH
6953: LD_STRING )
6955: STR
6956: PPUSH
6957: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
6961: LD_STRING setGameDifficulty(
6963: PUSH
6964: LD_OWVAR 67
6968: STR
6969: PUSH
6970: LD_STRING )
6972: STR
6973: PPUSH
6974: CALL_OW 559
// end ;
6978: LD_VAR 0 1
6982: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
6983: LD_INT 0
6985: PPUSH
// if p2 = stream_mode then
6986: LD_VAR 0 2
6990: PUSH
6991: LD_INT 100
6993: EQUAL
6994: IFFALSE 7997
// begin if not StreamModeActive then
6996: LD_EXP 29
7000: NOT
7001: IFFALSE 7011
// StreamModeActive := true ;
7003: LD_ADDR_EXP 29
7007: PUSH
7008: LD_INT 1
7010: ST_TO_ADDR
// if p3 = 0 then
7011: LD_VAR 0 3
7015: PUSH
7016: LD_INT 0
7018: EQUAL
7019: IFFALSE 7025
// InitStreamMode ;
7021: CALL 8201 0 0
// if p3 = 1 then
7025: LD_VAR 0 3
7029: PUSH
7030: LD_INT 1
7032: EQUAL
7033: IFFALSE 7043
// sRocket := true ;
7035: LD_ADDR_EXP 34
7039: PUSH
7040: LD_INT 1
7042: ST_TO_ADDR
// if p3 = 2 then
7043: LD_VAR 0 3
7047: PUSH
7048: LD_INT 2
7050: EQUAL
7051: IFFALSE 7061
// sSpeed := true ;
7053: LD_ADDR_EXP 33
7057: PUSH
7058: LD_INT 1
7060: ST_TO_ADDR
// if p3 = 3 then
7061: LD_VAR 0 3
7065: PUSH
7066: LD_INT 3
7068: EQUAL
7069: IFFALSE 7079
// sEngine := true ;
7071: LD_ADDR_EXP 35
7075: PUSH
7076: LD_INT 1
7078: ST_TO_ADDR
// if p3 = 4 then
7079: LD_VAR 0 3
7083: PUSH
7084: LD_INT 4
7086: EQUAL
7087: IFFALSE 7097
// sSpec := true ;
7089: LD_ADDR_EXP 32
7093: PUSH
7094: LD_INT 1
7096: ST_TO_ADDR
// if p3 = 5 then
7097: LD_VAR 0 3
7101: PUSH
7102: LD_INT 5
7104: EQUAL
7105: IFFALSE 7115
// sLevel := true ;
7107: LD_ADDR_EXP 36
7111: PUSH
7112: LD_INT 1
7114: ST_TO_ADDR
// if p3 = 6 then
7115: LD_VAR 0 3
7119: PUSH
7120: LD_INT 6
7122: EQUAL
7123: IFFALSE 7133
// sArmoury := true ;
7125: LD_ADDR_EXP 37
7129: PUSH
7130: LD_INT 1
7132: ST_TO_ADDR
// if p3 = 7 then
7133: LD_VAR 0 3
7137: PUSH
7138: LD_INT 7
7140: EQUAL
7141: IFFALSE 7151
// sRadar := true ;
7143: LD_ADDR_EXP 38
7147: PUSH
7148: LD_INT 1
7150: ST_TO_ADDR
// if p3 = 8 then
7151: LD_VAR 0 3
7155: PUSH
7156: LD_INT 8
7158: EQUAL
7159: IFFALSE 7169
// sBunker := true ;
7161: LD_ADDR_EXP 39
7165: PUSH
7166: LD_INT 1
7168: ST_TO_ADDR
// if p3 = 9 then
7169: LD_VAR 0 3
7173: PUSH
7174: LD_INT 9
7176: EQUAL
7177: IFFALSE 7187
// sHack := true ;
7179: LD_ADDR_EXP 40
7183: PUSH
7184: LD_INT 1
7186: ST_TO_ADDR
// if p3 = 10 then
7187: LD_VAR 0 3
7191: PUSH
7192: LD_INT 10
7194: EQUAL
7195: IFFALSE 7205
// sFire := true ;
7197: LD_ADDR_EXP 41
7201: PUSH
7202: LD_INT 1
7204: ST_TO_ADDR
// if p3 = 11 then
7205: LD_VAR 0 3
7209: PUSH
7210: LD_INT 11
7212: EQUAL
7213: IFFALSE 7223
// sRefresh := true ;
7215: LD_ADDR_EXP 42
7219: PUSH
7220: LD_INT 1
7222: ST_TO_ADDR
// if p3 = 12 then
7223: LD_VAR 0 3
7227: PUSH
7228: LD_INT 12
7230: EQUAL
7231: IFFALSE 7241
// sExp := true ;
7233: LD_ADDR_EXP 43
7237: PUSH
7238: LD_INT 1
7240: ST_TO_ADDR
// if p3 = 13 then
7241: LD_VAR 0 3
7245: PUSH
7246: LD_INT 13
7248: EQUAL
7249: IFFALSE 7259
// sDepot := true ;
7251: LD_ADDR_EXP 44
7255: PUSH
7256: LD_INT 1
7258: ST_TO_ADDR
// if p3 = 14 then
7259: LD_VAR 0 3
7263: PUSH
7264: LD_INT 14
7266: EQUAL
7267: IFFALSE 7277
// sFlag := true ;
7269: LD_ADDR_EXP 45
7273: PUSH
7274: LD_INT 1
7276: ST_TO_ADDR
// if p3 = 15 then
7277: LD_VAR 0 3
7281: PUSH
7282: LD_INT 15
7284: EQUAL
7285: IFFALSE 7295
// sKamikadze := true ;
7287: LD_ADDR_EXP 53
7291: PUSH
7292: LD_INT 1
7294: ST_TO_ADDR
// if p3 = 16 then
7295: LD_VAR 0 3
7299: PUSH
7300: LD_INT 16
7302: EQUAL
7303: IFFALSE 7313
// sTroll := true ;
7305: LD_ADDR_EXP 54
7309: PUSH
7310: LD_INT 1
7312: ST_TO_ADDR
// if p3 = 17 then
7313: LD_VAR 0 3
7317: PUSH
7318: LD_INT 17
7320: EQUAL
7321: IFFALSE 7331
// sSlow := true ;
7323: LD_ADDR_EXP 55
7327: PUSH
7328: LD_INT 1
7330: ST_TO_ADDR
// if p3 = 18 then
7331: LD_VAR 0 3
7335: PUSH
7336: LD_INT 18
7338: EQUAL
7339: IFFALSE 7349
// sLack := true ;
7341: LD_ADDR_EXP 56
7345: PUSH
7346: LD_INT 1
7348: ST_TO_ADDR
// if p3 = 19 then
7349: LD_VAR 0 3
7353: PUSH
7354: LD_INT 19
7356: EQUAL
7357: IFFALSE 7367
// sTank := true ;
7359: LD_ADDR_EXP 58
7363: PUSH
7364: LD_INT 1
7366: ST_TO_ADDR
// if p3 = 20 then
7367: LD_VAR 0 3
7371: PUSH
7372: LD_INT 20
7374: EQUAL
7375: IFFALSE 7385
// sRemote := true ;
7377: LD_ADDR_EXP 59
7381: PUSH
7382: LD_INT 1
7384: ST_TO_ADDR
// if p3 = 21 then
7385: LD_VAR 0 3
7389: PUSH
7390: LD_INT 21
7392: EQUAL
7393: IFFALSE 7403
// sPowell := true ;
7395: LD_ADDR_EXP 60
7399: PUSH
7400: LD_INT 1
7402: ST_TO_ADDR
// if p3 = 22 then
7403: LD_VAR 0 3
7407: PUSH
7408: LD_INT 22
7410: EQUAL
7411: IFFALSE 7421
// sTeleport := true ;
7413: LD_ADDR_EXP 63
7417: PUSH
7418: LD_INT 1
7420: ST_TO_ADDR
// if p3 = 23 then
7421: LD_VAR 0 3
7425: PUSH
7426: LD_INT 23
7428: EQUAL
7429: IFFALSE 7439
// sOilTower := true ;
7431: LD_ADDR_EXP 65
7435: PUSH
7436: LD_INT 1
7438: ST_TO_ADDR
// if p3 = 24 then
7439: LD_VAR 0 3
7443: PUSH
7444: LD_INT 24
7446: EQUAL
7447: IFFALSE 7457
// sShovel := true ;
7449: LD_ADDR_EXP 66
7453: PUSH
7454: LD_INT 1
7456: ST_TO_ADDR
// if p3 = 25 then
7457: LD_VAR 0 3
7461: PUSH
7462: LD_INT 25
7464: EQUAL
7465: IFFALSE 7475
// sSheik := true ;
7467: LD_ADDR_EXP 67
7471: PUSH
7472: LD_INT 1
7474: ST_TO_ADDR
// if p3 = 26 then
7475: LD_VAR 0 3
7479: PUSH
7480: LD_INT 26
7482: EQUAL
7483: IFFALSE 7493
// sEarthquake := true ;
7485: LD_ADDR_EXP 69
7489: PUSH
7490: LD_INT 1
7492: ST_TO_ADDR
// if p3 = 27 then
7493: LD_VAR 0 3
7497: PUSH
7498: LD_INT 27
7500: EQUAL
7501: IFFALSE 7511
// sAI := true ;
7503: LD_ADDR_EXP 70
7507: PUSH
7508: LD_INT 1
7510: ST_TO_ADDR
// if p3 = 28 then
7511: LD_VAR 0 3
7515: PUSH
7516: LD_INT 28
7518: EQUAL
7519: IFFALSE 7529
// sCargo := true ;
7521: LD_ADDR_EXP 73
7525: PUSH
7526: LD_INT 1
7528: ST_TO_ADDR
// if p3 = 29 then
7529: LD_VAR 0 3
7533: PUSH
7534: LD_INT 29
7536: EQUAL
7537: IFFALSE 7547
// sDLaser := true ;
7539: LD_ADDR_EXP 74
7543: PUSH
7544: LD_INT 1
7546: ST_TO_ADDR
// if p3 = 30 then
7547: LD_VAR 0 3
7551: PUSH
7552: LD_INT 30
7554: EQUAL
7555: IFFALSE 7565
// sExchange := true ;
7557: LD_ADDR_EXP 75
7561: PUSH
7562: LD_INT 1
7564: ST_TO_ADDR
// if p3 = 31 then
7565: LD_VAR 0 3
7569: PUSH
7570: LD_INT 31
7572: EQUAL
7573: IFFALSE 7583
// sFac := true ;
7575: LD_ADDR_EXP 76
7579: PUSH
7580: LD_INT 1
7582: ST_TO_ADDR
// if p3 = 32 then
7583: LD_VAR 0 3
7587: PUSH
7588: LD_INT 32
7590: EQUAL
7591: IFFALSE 7601
// sPower := true ;
7593: LD_ADDR_EXP 77
7597: PUSH
7598: LD_INT 1
7600: ST_TO_ADDR
// if p3 = 33 then
7601: LD_VAR 0 3
7605: PUSH
7606: LD_INT 33
7608: EQUAL
7609: IFFALSE 7619
// sRandom := true ;
7611: LD_ADDR_EXP 78
7615: PUSH
7616: LD_INT 1
7618: ST_TO_ADDR
// if p3 = 34 then
7619: LD_VAR 0 3
7623: PUSH
7624: LD_INT 34
7626: EQUAL
7627: IFFALSE 7637
// sShield := true ;
7629: LD_ADDR_EXP 79
7633: PUSH
7634: LD_INT 1
7636: ST_TO_ADDR
// if p3 = 35 then
7637: LD_VAR 0 3
7641: PUSH
7642: LD_INT 35
7644: EQUAL
7645: IFFALSE 7655
// sTime := true ;
7647: LD_ADDR_EXP 80
7651: PUSH
7652: LD_INT 1
7654: ST_TO_ADDR
// if p3 = 36 then
7655: LD_VAR 0 3
7659: PUSH
7660: LD_INT 36
7662: EQUAL
7663: IFFALSE 7673
// sTools := true ;
7665: LD_ADDR_EXP 81
7669: PUSH
7670: LD_INT 1
7672: ST_TO_ADDR
// if p3 = 101 then
7673: LD_VAR 0 3
7677: PUSH
7678: LD_INT 101
7680: EQUAL
7681: IFFALSE 7691
// sSold := true ;
7683: LD_ADDR_EXP 46
7687: PUSH
7688: LD_INT 1
7690: ST_TO_ADDR
// if p3 = 102 then
7691: LD_VAR 0 3
7695: PUSH
7696: LD_INT 102
7698: EQUAL
7699: IFFALSE 7709
// sDiff := true ;
7701: LD_ADDR_EXP 47
7705: PUSH
7706: LD_INT 1
7708: ST_TO_ADDR
// if p3 = 103 then
7709: LD_VAR 0 3
7713: PUSH
7714: LD_INT 103
7716: EQUAL
7717: IFFALSE 7727
// sFog := true ;
7719: LD_ADDR_EXP 50
7723: PUSH
7724: LD_INT 1
7726: ST_TO_ADDR
// if p3 = 104 then
7727: LD_VAR 0 3
7731: PUSH
7732: LD_INT 104
7734: EQUAL
7735: IFFALSE 7745
// sReset := true ;
7737: LD_ADDR_EXP 51
7741: PUSH
7742: LD_INT 1
7744: ST_TO_ADDR
// if p3 = 105 then
7745: LD_VAR 0 3
7749: PUSH
7750: LD_INT 105
7752: EQUAL
7753: IFFALSE 7763
// sSun := true ;
7755: LD_ADDR_EXP 52
7759: PUSH
7760: LD_INT 1
7762: ST_TO_ADDR
// if p3 = 106 then
7763: LD_VAR 0 3
7767: PUSH
7768: LD_INT 106
7770: EQUAL
7771: IFFALSE 7781
// sTiger := true ;
7773: LD_ADDR_EXP 48
7777: PUSH
7778: LD_INT 1
7780: ST_TO_ADDR
// if p3 = 107 then
7781: LD_VAR 0 3
7785: PUSH
7786: LD_INT 107
7788: EQUAL
7789: IFFALSE 7799
// sBomb := true ;
7791: LD_ADDR_EXP 49
7795: PUSH
7796: LD_INT 1
7798: ST_TO_ADDR
// if p3 = 108 then
7799: LD_VAR 0 3
7803: PUSH
7804: LD_INT 108
7806: EQUAL
7807: IFFALSE 7817
// sWound := true ;
7809: LD_ADDR_EXP 57
7813: PUSH
7814: LD_INT 1
7816: ST_TO_ADDR
// if p3 = 109 then
7817: LD_VAR 0 3
7821: PUSH
7822: LD_INT 109
7824: EQUAL
7825: IFFALSE 7835
// sBetray := true ;
7827: LD_ADDR_EXP 61
7831: PUSH
7832: LD_INT 1
7834: ST_TO_ADDR
// if p3 = 110 then
7835: LD_VAR 0 3
7839: PUSH
7840: LD_INT 110
7842: EQUAL
7843: IFFALSE 7853
// sContamin := true ;
7845: LD_ADDR_EXP 62
7849: PUSH
7850: LD_INT 1
7852: ST_TO_ADDR
// if p3 = 111 then
7853: LD_VAR 0 3
7857: PUSH
7858: LD_INT 111
7860: EQUAL
7861: IFFALSE 7871
// sOil := true ;
7863: LD_ADDR_EXP 64
7867: PUSH
7868: LD_INT 1
7870: ST_TO_ADDR
// if p3 = 112 then
7871: LD_VAR 0 3
7875: PUSH
7876: LD_INT 112
7878: EQUAL
7879: IFFALSE 7889
// sStu := true ;
7881: LD_ADDR_EXP 68
7885: PUSH
7886: LD_INT 1
7888: ST_TO_ADDR
// if p3 = 113 then
7889: LD_VAR 0 3
7893: PUSH
7894: LD_INT 113
7896: EQUAL
7897: IFFALSE 7907
// sBazooka := true ;
7899: LD_ADDR_EXP 71
7903: PUSH
7904: LD_INT 1
7906: ST_TO_ADDR
// if p3 = 114 then
7907: LD_VAR 0 3
7911: PUSH
7912: LD_INT 114
7914: EQUAL
7915: IFFALSE 7925
// sMortar := true ;
7917: LD_ADDR_EXP 72
7921: PUSH
7922: LD_INT 1
7924: ST_TO_ADDR
// if p3 = 115 then
7925: LD_VAR 0 3
7929: PUSH
7930: LD_INT 115
7932: EQUAL
7933: IFFALSE 7943
// sRanger := true ;
7935: LD_ADDR_EXP 82
7939: PUSH
7940: LD_INT 1
7942: ST_TO_ADDR
// if p3 = 116 then
7943: LD_VAR 0 3
7947: PUSH
7948: LD_INT 116
7950: EQUAL
7951: IFFALSE 7961
// sComputer := true ;
7953: LD_ADDR_EXP 83
7957: PUSH
7958: LD_INT 1
7960: ST_TO_ADDR
// if p3 = 117 then
7961: LD_VAR 0 3
7965: PUSH
7966: LD_INT 117
7968: EQUAL
7969: IFFALSE 7979
// s30 := true ;
7971: LD_ADDR_EXP 84
7975: PUSH
7976: LD_INT 1
7978: ST_TO_ADDR
// if p3 = 118 then
7979: LD_VAR 0 3
7983: PUSH
7984: LD_INT 118
7986: EQUAL
7987: IFFALSE 7997
// s60 := true ;
7989: LD_ADDR_EXP 85
7993: PUSH
7994: LD_INT 1
7996: ST_TO_ADDR
// end ; if p2 = hack_mode then
7997: LD_VAR 0 2
8001: PUSH
8002: LD_INT 101
8004: EQUAL
8005: IFFALSE 8133
// begin case p3 of 1 :
8007: LD_VAR 0 3
8011: PUSH
8012: LD_INT 1
8014: DOUBLE
8015: EQUAL
8016: IFTRUE 8020
8018: GO 8027
8020: POP
// hHackUnlimitedResources ; 2 :
8021: CALL 20280 0 0
8025: GO 8133
8027: LD_INT 2
8029: DOUBLE
8030: EQUAL
8031: IFTRUE 8035
8033: GO 8042
8035: POP
// hHackSetLevel10 ; 3 :
8036: CALL 20413 0 0
8040: GO 8133
8042: LD_INT 3
8044: DOUBLE
8045: EQUAL
8046: IFTRUE 8050
8048: GO 8057
8050: POP
// hHackSetLevel10YourUnits ; 4 :
8051: CALL 20498 0 0
8055: GO 8133
8057: LD_INT 4
8059: DOUBLE
8060: EQUAL
8061: IFTRUE 8065
8063: GO 8072
8065: POP
// hHackInvincible ; 5 :
8066: CALL 20946 0 0
8070: GO 8133
8072: LD_INT 5
8074: DOUBLE
8075: EQUAL
8076: IFTRUE 8080
8078: GO 8087
8080: POP
// hHackInvisible ; 6 :
8081: CALL 21057 0 0
8085: GO 8133
8087: LD_INT 6
8089: DOUBLE
8090: EQUAL
8091: IFTRUE 8095
8093: GO 8102
8095: POP
// hHackChangeYourSide ; 7 :
8096: CALL 21114 0 0
8100: GO 8133
8102: LD_INT 7
8104: DOUBLE
8105: EQUAL
8106: IFTRUE 8110
8108: GO 8117
8110: POP
// hHackChangeUnitSide ; 8 :
8111: CALL 21156 0 0
8115: GO 8133
8117: LD_INT 8
8119: DOUBLE
8120: EQUAL
8121: IFTRUE 8125
8123: GO 8132
8125: POP
// hHackFog ; end ;
8126: CALL 21257 0 0
8130: GO 8133
8132: POP
// end ; if p2 = game_save_mode then
8133: LD_VAR 0 2
8137: PUSH
8138: LD_INT 102
8140: EQUAL
8141: IFFALSE 8196
// begin if p3 = 1 then
8143: LD_VAR 0 3
8147: PUSH
8148: LD_INT 1
8150: EQUAL
8151: IFFALSE 8163
// globalGameSaveCounter := p4 ;
8153: LD_ADDR_EXP 28
8157: PUSH
8158: LD_VAR 0 4
8162: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
8163: LD_VAR 0 3
8167: PUSH
8168: LD_INT 2
8170: EQUAL
8171: PUSH
8172: LD_EXP 28
8176: AND
8177: IFFALSE 8196
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
8179: LD_STRING setGameSaveCounter(
8181: PUSH
8182: LD_EXP 28
8186: STR
8187: PUSH
8188: LD_STRING )
8190: STR
8191: PPUSH
8192: CALL_OW 559
// end ; end ;
8196: LD_VAR 0 7
8200: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
8201: LD_INT 0
8203: PPUSH
// streamModeActive := false ;
8204: LD_ADDR_EXP 29
8208: PUSH
8209: LD_INT 0
8211: ST_TO_ADDR
// normalCounter := 36 ;
8212: LD_ADDR_EXP 30
8216: PUSH
8217: LD_INT 36
8219: ST_TO_ADDR
// hardcoreCounter := 18 ;
8220: LD_ADDR_EXP 31
8224: PUSH
8225: LD_INT 18
8227: ST_TO_ADDR
// sRocket := false ;
8228: LD_ADDR_EXP 34
8232: PUSH
8233: LD_INT 0
8235: ST_TO_ADDR
// sSpeed := false ;
8236: LD_ADDR_EXP 33
8240: PUSH
8241: LD_INT 0
8243: ST_TO_ADDR
// sEngine := false ;
8244: LD_ADDR_EXP 35
8248: PUSH
8249: LD_INT 0
8251: ST_TO_ADDR
// sSpec := false ;
8252: LD_ADDR_EXP 32
8256: PUSH
8257: LD_INT 0
8259: ST_TO_ADDR
// sLevel := false ;
8260: LD_ADDR_EXP 36
8264: PUSH
8265: LD_INT 0
8267: ST_TO_ADDR
// sArmoury := false ;
8268: LD_ADDR_EXP 37
8272: PUSH
8273: LD_INT 0
8275: ST_TO_ADDR
// sRadar := false ;
8276: LD_ADDR_EXP 38
8280: PUSH
8281: LD_INT 0
8283: ST_TO_ADDR
// sBunker := false ;
8284: LD_ADDR_EXP 39
8288: PUSH
8289: LD_INT 0
8291: ST_TO_ADDR
// sHack := false ;
8292: LD_ADDR_EXP 40
8296: PUSH
8297: LD_INT 0
8299: ST_TO_ADDR
// sFire := false ;
8300: LD_ADDR_EXP 41
8304: PUSH
8305: LD_INT 0
8307: ST_TO_ADDR
// sRefresh := false ;
8308: LD_ADDR_EXP 42
8312: PUSH
8313: LD_INT 0
8315: ST_TO_ADDR
// sExp := false ;
8316: LD_ADDR_EXP 43
8320: PUSH
8321: LD_INT 0
8323: ST_TO_ADDR
// sDepot := false ;
8324: LD_ADDR_EXP 44
8328: PUSH
8329: LD_INT 0
8331: ST_TO_ADDR
// sFlag := false ;
8332: LD_ADDR_EXP 45
8336: PUSH
8337: LD_INT 0
8339: ST_TO_ADDR
// sKamikadze := false ;
8340: LD_ADDR_EXP 53
8344: PUSH
8345: LD_INT 0
8347: ST_TO_ADDR
// sTroll := false ;
8348: LD_ADDR_EXP 54
8352: PUSH
8353: LD_INT 0
8355: ST_TO_ADDR
// sSlow := false ;
8356: LD_ADDR_EXP 55
8360: PUSH
8361: LD_INT 0
8363: ST_TO_ADDR
// sLack := false ;
8364: LD_ADDR_EXP 56
8368: PUSH
8369: LD_INT 0
8371: ST_TO_ADDR
// sTank := false ;
8372: LD_ADDR_EXP 58
8376: PUSH
8377: LD_INT 0
8379: ST_TO_ADDR
// sRemote := false ;
8380: LD_ADDR_EXP 59
8384: PUSH
8385: LD_INT 0
8387: ST_TO_ADDR
// sPowell := false ;
8388: LD_ADDR_EXP 60
8392: PUSH
8393: LD_INT 0
8395: ST_TO_ADDR
// sTeleport := false ;
8396: LD_ADDR_EXP 63
8400: PUSH
8401: LD_INT 0
8403: ST_TO_ADDR
// sOilTower := false ;
8404: LD_ADDR_EXP 65
8408: PUSH
8409: LD_INT 0
8411: ST_TO_ADDR
// sShovel := false ;
8412: LD_ADDR_EXP 66
8416: PUSH
8417: LD_INT 0
8419: ST_TO_ADDR
// sSheik := false ;
8420: LD_ADDR_EXP 67
8424: PUSH
8425: LD_INT 0
8427: ST_TO_ADDR
// sEarthquake := false ;
8428: LD_ADDR_EXP 69
8432: PUSH
8433: LD_INT 0
8435: ST_TO_ADDR
// sAI := false ;
8436: LD_ADDR_EXP 70
8440: PUSH
8441: LD_INT 0
8443: ST_TO_ADDR
// sCargo := false ;
8444: LD_ADDR_EXP 73
8448: PUSH
8449: LD_INT 0
8451: ST_TO_ADDR
// sDLaser := false ;
8452: LD_ADDR_EXP 74
8456: PUSH
8457: LD_INT 0
8459: ST_TO_ADDR
// sExchange := false ;
8460: LD_ADDR_EXP 75
8464: PUSH
8465: LD_INT 0
8467: ST_TO_ADDR
// sFac := false ;
8468: LD_ADDR_EXP 76
8472: PUSH
8473: LD_INT 0
8475: ST_TO_ADDR
// sPower := false ;
8476: LD_ADDR_EXP 77
8480: PUSH
8481: LD_INT 0
8483: ST_TO_ADDR
// sRandom := false ;
8484: LD_ADDR_EXP 78
8488: PUSH
8489: LD_INT 0
8491: ST_TO_ADDR
// sShield := false ;
8492: LD_ADDR_EXP 79
8496: PUSH
8497: LD_INT 0
8499: ST_TO_ADDR
// sTime := false ;
8500: LD_ADDR_EXP 80
8504: PUSH
8505: LD_INT 0
8507: ST_TO_ADDR
// sTools := false ;
8508: LD_ADDR_EXP 81
8512: PUSH
8513: LD_INT 0
8515: ST_TO_ADDR
// sSold := false ;
8516: LD_ADDR_EXP 46
8520: PUSH
8521: LD_INT 0
8523: ST_TO_ADDR
// sDiff := false ;
8524: LD_ADDR_EXP 47
8528: PUSH
8529: LD_INT 0
8531: ST_TO_ADDR
// sFog := false ;
8532: LD_ADDR_EXP 50
8536: PUSH
8537: LD_INT 0
8539: ST_TO_ADDR
// sReset := false ;
8540: LD_ADDR_EXP 51
8544: PUSH
8545: LD_INT 0
8547: ST_TO_ADDR
// sSun := false ;
8548: LD_ADDR_EXP 52
8552: PUSH
8553: LD_INT 0
8555: ST_TO_ADDR
// sTiger := false ;
8556: LD_ADDR_EXP 48
8560: PUSH
8561: LD_INT 0
8563: ST_TO_ADDR
// sBomb := false ;
8564: LD_ADDR_EXP 49
8568: PUSH
8569: LD_INT 0
8571: ST_TO_ADDR
// sWound := false ;
8572: LD_ADDR_EXP 57
8576: PUSH
8577: LD_INT 0
8579: ST_TO_ADDR
// sBetray := false ;
8580: LD_ADDR_EXP 61
8584: PUSH
8585: LD_INT 0
8587: ST_TO_ADDR
// sContamin := false ;
8588: LD_ADDR_EXP 62
8592: PUSH
8593: LD_INT 0
8595: ST_TO_ADDR
// sOil := false ;
8596: LD_ADDR_EXP 64
8600: PUSH
8601: LD_INT 0
8603: ST_TO_ADDR
// sStu := false ;
8604: LD_ADDR_EXP 68
8608: PUSH
8609: LD_INT 0
8611: ST_TO_ADDR
// sBazooka := false ;
8612: LD_ADDR_EXP 71
8616: PUSH
8617: LD_INT 0
8619: ST_TO_ADDR
// sMortar := false ;
8620: LD_ADDR_EXP 72
8624: PUSH
8625: LD_INT 0
8627: ST_TO_ADDR
// sRanger := false ;
8628: LD_ADDR_EXP 82
8632: PUSH
8633: LD_INT 0
8635: ST_TO_ADDR
// sComputer := false ;
8636: LD_ADDR_EXP 83
8640: PUSH
8641: LD_INT 0
8643: ST_TO_ADDR
// s30 := false ;
8644: LD_ADDR_EXP 84
8648: PUSH
8649: LD_INT 0
8651: ST_TO_ADDR
// s60 := false ;
8652: LD_ADDR_EXP 85
8656: PUSH
8657: LD_INT 0
8659: ST_TO_ADDR
// end ;
8660: LD_VAR 0 1
8664: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
8665: LD_INT 0
8667: PPUSH
8668: PPUSH
8669: PPUSH
8670: PPUSH
8671: PPUSH
8672: PPUSH
8673: PPUSH
// result := [ ] ;
8674: LD_ADDR_VAR 0 2
8678: PUSH
8679: EMPTY
8680: ST_TO_ADDR
// if campaign_id = 1 then
8681: LD_OWVAR 69
8685: PUSH
8686: LD_INT 1
8688: EQUAL
8689: IFFALSE 11855
// begin case mission_number of 1 :
8691: LD_OWVAR 70
8695: PUSH
8696: LD_INT 1
8698: DOUBLE
8699: EQUAL
8700: IFTRUE 8704
8702: GO 8780
8704: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
8705: LD_ADDR_VAR 0 2
8709: PUSH
8710: LD_INT 2
8712: PUSH
8713: LD_INT 4
8715: PUSH
8716: LD_INT 11
8718: PUSH
8719: LD_INT 12
8721: PUSH
8722: LD_INT 15
8724: PUSH
8725: LD_INT 16
8727: PUSH
8728: LD_INT 22
8730: PUSH
8731: LD_INT 23
8733: PUSH
8734: LD_INT 26
8736: PUSH
8737: EMPTY
8738: LIST
8739: LIST
8740: LIST
8741: LIST
8742: LIST
8743: LIST
8744: LIST
8745: LIST
8746: LIST
8747: PUSH
8748: LD_INT 101
8750: PUSH
8751: LD_INT 102
8753: PUSH
8754: LD_INT 106
8756: PUSH
8757: LD_INT 116
8759: PUSH
8760: LD_INT 117
8762: PUSH
8763: LD_INT 118
8765: PUSH
8766: EMPTY
8767: LIST
8768: LIST
8769: LIST
8770: LIST
8771: LIST
8772: LIST
8773: PUSH
8774: EMPTY
8775: LIST
8776: LIST
8777: ST_TO_ADDR
8778: GO 11853
8780: LD_INT 2
8782: DOUBLE
8783: EQUAL
8784: IFTRUE 8788
8786: GO 8872
8788: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
8789: LD_ADDR_VAR 0 2
8793: PUSH
8794: LD_INT 2
8796: PUSH
8797: LD_INT 4
8799: PUSH
8800: LD_INT 11
8802: PUSH
8803: LD_INT 12
8805: PUSH
8806: LD_INT 15
8808: PUSH
8809: LD_INT 16
8811: PUSH
8812: LD_INT 22
8814: PUSH
8815: LD_INT 23
8817: PUSH
8818: LD_INT 26
8820: PUSH
8821: EMPTY
8822: LIST
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: LIST
8831: PUSH
8832: LD_INT 101
8834: PUSH
8835: LD_INT 102
8837: PUSH
8838: LD_INT 105
8840: PUSH
8841: LD_INT 106
8843: PUSH
8844: LD_INT 108
8846: PUSH
8847: LD_INT 116
8849: PUSH
8850: LD_INT 117
8852: PUSH
8853: LD_INT 118
8855: PUSH
8856: EMPTY
8857: LIST
8858: LIST
8859: LIST
8860: LIST
8861: LIST
8862: LIST
8863: LIST
8864: LIST
8865: PUSH
8866: EMPTY
8867: LIST
8868: LIST
8869: ST_TO_ADDR
8870: GO 11853
8872: LD_INT 3
8874: DOUBLE
8875: EQUAL
8876: IFTRUE 8880
8878: GO 8968
8880: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
8881: LD_ADDR_VAR 0 2
8885: PUSH
8886: LD_INT 2
8888: PUSH
8889: LD_INT 4
8891: PUSH
8892: LD_INT 5
8894: PUSH
8895: LD_INT 11
8897: PUSH
8898: LD_INT 12
8900: PUSH
8901: LD_INT 15
8903: PUSH
8904: LD_INT 16
8906: PUSH
8907: LD_INT 22
8909: PUSH
8910: LD_INT 26
8912: PUSH
8913: LD_INT 36
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: PUSH
8928: LD_INT 101
8930: PUSH
8931: LD_INT 102
8933: PUSH
8934: LD_INT 105
8936: PUSH
8937: LD_INT 106
8939: PUSH
8940: LD_INT 108
8942: PUSH
8943: LD_INT 116
8945: PUSH
8946: LD_INT 117
8948: PUSH
8949: LD_INT 118
8951: PUSH
8952: EMPTY
8953: LIST
8954: LIST
8955: LIST
8956: LIST
8957: LIST
8958: LIST
8959: LIST
8960: LIST
8961: PUSH
8962: EMPTY
8963: LIST
8964: LIST
8965: ST_TO_ADDR
8966: GO 11853
8968: LD_INT 4
8970: DOUBLE
8971: EQUAL
8972: IFTRUE 8976
8974: GO 9072
8976: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
8977: LD_ADDR_VAR 0 2
8981: PUSH
8982: LD_INT 2
8984: PUSH
8985: LD_INT 4
8987: PUSH
8988: LD_INT 5
8990: PUSH
8991: LD_INT 8
8993: PUSH
8994: LD_INT 11
8996: PUSH
8997: LD_INT 12
8999: PUSH
9000: LD_INT 15
9002: PUSH
9003: LD_INT 16
9005: PUSH
9006: LD_INT 22
9008: PUSH
9009: LD_INT 23
9011: PUSH
9012: LD_INT 26
9014: PUSH
9015: LD_INT 36
9017: PUSH
9018: EMPTY
9019: LIST
9020: LIST
9021: LIST
9022: LIST
9023: LIST
9024: LIST
9025: LIST
9026: LIST
9027: LIST
9028: LIST
9029: LIST
9030: LIST
9031: PUSH
9032: LD_INT 101
9034: PUSH
9035: LD_INT 102
9037: PUSH
9038: LD_INT 105
9040: PUSH
9041: LD_INT 106
9043: PUSH
9044: LD_INT 108
9046: PUSH
9047: LD_INT 116
9049: PUSH
9050: LD_INT 117
9052: PUSH
9053: LD_INT 118
9055: PUSH
9056: EMPTY
9057: LIST
9058: LIST
9059: LIST
9060: LIST
9061: LIST
9062: LIST
9063: LIST
9064: LIST
9065: PUSH
9066: EMPTY
9067: LIST
9068: LIST
9069: ST_TO_ADDR
9070: GO 11853
9072: LD_INT 5
9074: DOUBLE
9075: EQUAL
9076: IFTRUE 9080
9078: GO 9192
9080: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9081: LD_ADDR_VAR 0 2
9085: PUSH
9086: LD_INT 2
9088: PUSH
9089: LD_INT 4
9091: PUSH
9092: LD_INT 5
9094: PUSH
9095: LD_INT 6
9097: PUSH
9098: LD_INT 8
9100: PUSH
9101: LD_INT 11
9103: PUSH
9104: LD_INT 12
9106: PUSH
9107: LD_INT 15
9109: PUSH
9110: LD_INT 16
9112: PUSH
9113: LD_INT 22
9115: PUSH
9116: LD_INT 23
9118: PUSH
9119: LD_INT 25
9121: PUSH
9122: LD_INT 26
9124: PUSH
9125: LD_INT 36
9127: PUSH
9128: EMPTY
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: PUSH
9144: LD_INT 101
9146: PUSH
9147: LD_INT 102
9149: PUSH
9150: LD_INT 105
9152: PUSH
9153: LD_INT 106
9155: PUSH
9156: LD_INT 108
9158: PUSH
9159: LD_INT 109
9161: PUSH
9162: LD_INT 112
9164: PUSH
9165: LD_INT 116
9167: PUSH
9168: LD_INT 117
9170: PUSH
9171: LD_INT 118
9173: PUSH
9174: EMPTY
9175: LIST
9176: LIST
9177: LIST
9178: LIST
9179: LIST
9180: LIST
9181: LIST
9182: LIST
9183: LIST
9184: LIST
9185: PUSH
9186: EMPTY
9187: LIST
9188: LIST
9189: ST_TO_ADDR
9190: GO 11853
9192: LD_INT 6
9194: DOUBLE
9195: EQUAL
9196: IFTRUE 9200
9198: GO 9332
9200: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
9201: LD_ADDR_VAR 0 2
9205: PUSH
9206: LD_INT 2
9208: PUSH
9209: LD_INT 4
9211: PUSH
9212: LD_INT 5
9214: PUSH
9215: LD_INT 6
9217: PUSH
9218: LD_INT 8
9220: PUSH
9221: LD_INT 11
9223: PUSH
9224: LD_INT 12
9226: PUSH
9227: LD_INT 15
9229: PUSH
9230: LD_INT 16
9232: PUSH
9233: LD_INT 20
9235: PUSH
9236: LD_INT 21
9238: PUSH
9239: LD_INT 22
9241: PUSH
9242: LD_INT 23
9244: PUSH
9245: LD_INT 25
9247: PUSH
9248: LD_INT 26
9250: PUSH
9251: LD_INT 30
9253: PUSH
9254: LD_INT 31
9256: PUSH
9257: LD_INT 32
9259: PUSH
9260: LD_INT 36
9262: PUSH
9263: EMPTY
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: LIST
9274: LIST
9275: LIST
9276: LIST
9277: LIST
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: LIST
9283: PUSH
9284: LD_INT 101
9286: PUSH
9287: LD_INT 102
9289: PUSH
9290: LD_INT 105
9292: PUSH
9293: LD_INT 106
9295: PUSH
9296: LD_INT 108
9298: PUSH
9299: LD_INT 109
9301: PUSH
9302: LD_INT 112
9304: PUSH
9305: LD_INT 116
9307: PUSH
9308: LD_INT 117
9310: PUSH
9311: LD_INT 118
9313: PUSH
9314: EMPTY
9315: LIST
9316: LIST
9317: LIST
9318: LIST
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: LIST
9324: LIST
9325: PUSH
9326: EMPTY
9327: LIST
9328: LIST
9329: ST_TO_ADDR
9330: GO 11853
9332: LD_INT 7
9334: DOUBLE
9335: EQUAL
9336: IFTRUE 9340
9338: GO 9452
9340: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
9341: LD_ADDR_VAR 0 2
9345: PUSH
9346: LD_INT 2
9348: PUSH
9349: LD_INT 4
9351: PUSH
9352: LD_INT 5
9354: PUSH
9355: LD_INT 7
9357: PUSH
9358: LD_INT 11
9360: PUSH
9361: LD_INT 12
9363: PUSH
9364: LD_INT 15
9366: PUSH
9367: LD_INT 16
9369: PUSH
9370: LD_INT 20
9372: PUSH
9373: LD_INT 21
9375: PUSH
9376: LD_INT 22
9378: PUSH
9379: LD_INT 23
9381: PUSH
9382: LD_INT 25
9384: PUSH
9385: LD_INT 26
9387: PUSH
9388: EMPTY
9389: LIST
9390: LIST
9391: LIST
9392: LIST
9393: LIST
9394: LIST
9395: LIST
9396: LIST
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: LIST
9402: LIST
9403: PUSH
9404: LD_INT 101
9406: PUSH
9407: LD_INT 102
9409: PUSH
9410: LD_INT 103
9412: PUSH
9413: LD_INT 105
9415: PUSH
9416: LD_INT 106
9418: PUSH
9419: LD_INT 108
9421: PUSH
9422: LD_INT 112
9424: PUSH
9425: LD_INT 116
9427: PUSH
9428: LD_INT 117
9430: PUSH
9431: LD_INT 118
9433: PUSH
9434: EMPTY
9435: LIST
9436: LIST
9437: LIST
9438: LIST
9439: LIST
9440: LIST
9441: LIST
9442: LIST
9443: LIST
9444: LIST
9445: PUSH
9446: EMPTY
9447: LIST
9448: LIST
9449: ST_TO_ADDR
9450: GO 11853
9452: LD_INT 8
9454: DOUBLE
9455: EQUAL
9456: IFTRUE 9460
9458: GO 9600
9460: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
9461: LD_ADDR_VAR 0 2
9465: PUSH
9466: LD_INT 2
9468: PUSH
9469: LD_INT 4
9471: PUSH
9472: LD_INT 5
9474: PUSH
9475: LD_INT 6
9477: PUSH
9478: LD_INT 7
9480: PUSH
9481: LD_INT 8
9483: PUSH
9484: LD_INT 11
9486: PUSH
9487: LD_INT 12
9489: PUSH
9490: LD_INT 15
9492: PUSH
9493: LD_INT 16
9495: PUSH
9496: LD_INT 20
9498: PUSH
9499: LD_INT 21
9501: PUSH
9502: LD_INT 22
9504: PUSH
9505: LD_INT 23
9507: PUSH
9508: LD_INT 25
9510: PUSH
9511: LD_INT 26
9513: PUSH
9514: LD_INT 30
9516: PUSH
9517: LD_INT 31
9519: PUSH
9520: LD_INT 32
9522: PUSH
9523: LD_INT 36
9525: PUSH
9526: EMPTY
9527: LIST
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: LIST
9538: LIST
9539: LIST
9540: LIST
9541: LIST
9542: LIST
9543: LIST
9544: LIST
9545: LIST
9546: LIST
9547: PUSH
9548: LD_INT 101
9550: PUSH
9551: LD_INT 102
9553: PUSH
9554: LD_INT 103
9556: PUSH
9557: LD_INT 105
9559: PUSH
9560: LD_INT 106
9562: PUSH
9563: LD_INT 108
9565: PUSH
9566: LD_INT 109
9568: PUSH
9569: LD_INT 112
9571: PUSH
9572: LD_INT 116
9574: PUSH
9575: LD_INT 117
9577: PUSH
9578: LD_INT 118
9580: PUSH
9581: EMPTY
9582: LIST
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: PUSH
9594: EMPTY
9595: LIST
9596: LIST
9597: ST_TO_ADDR
9598: GO 11853
9600: LD_INT 9
9602: DOUBLE
9603: EQUAL
9604: IFTRUE 9608
9606: GO 9756
9608: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
9609: LD_ADDR_VAR 0 2
9613: PUSH
9614: LD_INT 2
9616: PUSH
9617: LD_INT 4
9619: PUSH
9620: LD_INT 5
9622: PUSH
9623: LD_INT 6
9625: PUSH
9626: LD_INT 7
9628: PUSH
9629: LD_INT 8
9631: PUSH
9632: LD_INT 11
9634: PUSH
9635: LD_INT 12
9637: PUSH
9638: LD_INT 15
9640: PUSH
9641: LD_INT 16
9643: PUSH
9644: LD_INT 20
9646: PUSH
9647: LD_INT 21
9649: PUSH
9650: LD_INT 22
9652: PUSH
9653: LD_INT 23
9655: PUSH
9656: LD_INT 25
9658: PUSH
9659: LD_INT 26
9661: PUSH
9662: LD_INT 28
9664: PUSH
9665: LD_INT 30
9667: PUSH
9668: LD_INT 31
9670: PUSH
9671: LD_INT 32
9673: PUSH
9674: LD_INT 36
9676: PUSH
9677: EMPTY
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: LIST
9699: PUSH
9700: LD_INT 101
9702: PUSH
9703: LD_INT 102
9705: PUSH
9706: LD_INT 103
9708: PUSH
9709: LD_INT 105
9711: PUSH
9712: LD_INT 106
9714: PUSH
9715: LD_INT 108
9717: PUSH
9718: LD_INT 109
9720: PUSH
9721: LD_INT 112
9723: PUSH
9724: LD_INT 114
9726: PUSH
9727: LD_INT 116
9729: PUSH
9730: LD_INT 117
9732: PUSH
9733: LD_INT 118
9735: PUSH
9736: EMPTY
9737: LIST
9738: LIST
9739: LIST
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: LIST
9745: LIST
9746: LIST
9747: LIST
9748: LIST
9749: PUSH
9750: EMPTY
9751: LIST
9752: LIST
9753: ST_TO_ADDR
9754: GO 11853
9756: LD_INT 10
9758: DOUBLE
9759: EQUAL
9760: IFTRUE 9764
9762: GO 9960
9764: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
9765: LD_ADDR_VAR 0 2
9769: PUSH
9770: LD_INT 2
9772: PUSH
9773: LD_INT 4
9775: PUSH
9776: LD_INT 5
9778: PUSH
9779: LD_INT 6
9781: PUSH
9782: LD_INT 7
9784: PUSH
9785: LD_INT 8
9787: PUSH
9788: LD_INT 9
9790: PUSH
9791: LD_INT 10
9793: PUSH
9794: LD_INT 11
9796: PUSH
9797: LD_INT 12
9799: PUSH
9800: LD_INT 13
9802: PUSH
9803: LD_INT 14
9805: PUSH
9806: LD_INT 15
9808: PUSH
9809: LD_INT 16
9811: PUSH
9812: LD_INT 17
9814: PUSH
9815: LD_INT 18
9817: PUSH
9818: LD_INT 19
9820: PUSH
9821: LD_INT 20
9823: PUSH
9824: LD_INT 21
9826: PUSH
9827: LD_INT 22
9829: PUSH
9830: LD_INT 23
9832: PUSH
9833: LD_INT 24
9835: PUSH
9836: LD_INT 25
9838: PUSH
9839: LD_INT 26
9841: PUSH
9842: LD_INT 28
9844: PUSH
9845: LD_INT 30
9847: PUSH
9848: LD_INT 31
9850: PUSH
9851: LD_INT 32
9853: PUSH
9854: LD_INT 36
9856: PUSH
9857: EMPTY
9858: LIST
9859: LIST
9860: LIST
9861: LIST
9862: LIST
9863: LIST
9864: LIST
9865: LIST
9866: LIST
9867: LIST
9868: LIST
9869: LIST
9870: LIST
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: PUSH
9888: LD_INT 101
9890: PUSH
9891: LD_INT 102
9893: PUSH
9894: LD_INT 103
9896: PUSH
9897: LD_INT 104
9899: PUSH
9900: LD_INT 105
9902: PUSH
9903: LD_INT 106
9905: PUSH
9906: LD_INT 107
9908: PUSH
9909: LD_INT 108
9911: PUSH
9912: LD_INT 109
9914: PUSH
9915: LD_INT 110
9917: PUSH
9918: LD_INT 111
9920: PUSH
9921: LD_INT 112
9923: PUSH
9924: LD_INT 114
9926: PUSH
9927: LD_INT 116
9929: PUSH
9930: LD_INT 117
9932: PUSH
9933: LD_INT 118
9935: PUSH
9936: EMPTY
9937: LIST
9938: LIST
9939: LIST
9940: LIST
9941: LIST
9942: LIST
9943: LIST
9944: LIST
9945: LIST
9946: LIST
9947: LIST
9948: LIST
9949: LIST
9950: LIST
9951: LIST
9952: LIST
9953: PUSH
9954: EMPTY
9955: LIST
9956: LIST
9957: ST_TO_ADDR
9958: GO 11853
9960: LD_INT 11
9962: DOUBLE
9963: EQUAL
9964: IFTRUE 9968
9966: GO 10172
9968: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
9969: LD_ADDR_VAR 0 2
9973: PUSH
9974: LD_INT 2
9976: PUSH
9977: LD_INT 3
9979: PUSH
9980: LD_INT 4
9982: PUSH
9983: LD_INT 5
9985: PUSH
9986: LD_INT 6
9988: PUSH
9989: LD_INT 7
9991: PUSH
9992: LD_INT 8
9994: PUSH
9995: LD_INT 9
9997: PUSH
9998: LD_INT 10
10000: PUSH
10001: LD_INT 11
10003: PUSH
10004: LD_INT 12
10006: PUSH
10007: LD_INT 13
10009: PUSH
10010: LD_INT 14
10012: PUSH
10013: LD_INT 15
10015: PUSH
10016: LD_INT 16
10018: PUSH
10019: LD_INT 17
10021: PUSH
10022: LD_INT 18
10024: PUSH
10025: LD_INT 19
10027: PUSH
10028: LD_INT 20
10030: PUSH
10031: LD_INT 21
10033: PUSH
10034: LD_INT 22
10036: PUSH
10037: LD_INT 23
10039: PUSH
10040: LD_INT 24
10042: PUSH
10043: LD_INT 25
10045: PUSH
10046: LD_INT 26
10048: PUSH
10049: LD_INT 28
10051: PUSH
10052: LD_INT 30
10054: PUSH
10055: LD_INT 31
10057: PUSH
10058: LD_INT 32
10060: PUSH
10061: LD_INT 34
10063: PUSH
10064: LD_INT 36
10066: PUSH
10067: EMPTY
10068: LIST
10069: LIST
10070: LIST
10071: LIST
10072: LIST
10073: LIST
10074: LIST
10075: LIST
10076: LIST
10077: LIST
10078: LIST
10079: LIST
10080: LIST
10081: LIST
10082: LIST
10083: LIST
10084: LIST
10085: LIST
10086: LIST
10087: LIST
10088: LIST
10089: LIST
10090: LIST
10091: LIST
10092: LIST
10093: LIST
10094: LIST
10095: LIST
10096: LIST
10097: LIST
10098: LIST
10099: PUSH
10100: LD_INT 101
10102: PUSH
10103: LD_INT 102
10105: PUSH
10106: LD_INT 103
10108: PUSH
10109: LD_INT 104
10111: PUSH
10112: LD_INT 105
10114: PUSH
10115: LD_INT 106
10117: PUSH
10118: LD_INT 107
10120: PUSH
10121: LD_INT 108
10123: PUSH
10124: LD_INT 109
10126: PUSH
10127: LD_INT 110
10129: PUSH
10130: LD_INT 111
10132: PUSH
10133: LD_INT 112
10135: PUSH
10136: LD_INT 114
10138: PUSH
10139: LD_INT 116
10141: PUSH
10142: LD_INT 117
10144: PUSH
10145: LD_INT 118
10147: PUSH
10148: EMPTY
10149: LIST
10150: LIST
10151: LIST
10152: LIST
10153: LIST
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: LIST
10159: LIST
10160: LIST
10161: LIST
10162: LIST
10163: LIST
10164: LIST
10165: PUSH
10166: EMPTY
10167: LIST
10168: LIST
10169: ST_TO_ADDR
10170: GO 11853
10172: LD_INT 12
10174: DOUBLE
10175: EQUAL
10176: IFTRUE 10180
10178: GO 10400
10180: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
10181: LD_ADDR_VAR 0 2
10185: PUSH
10186: LD_INT 1
10188: PUSH
10189: LD_INT 2
10191: PUSH
10192: LD_INT 3
10194: PUSH
10195: LD_INT 4
10197: PUSH
10198: LD_INT 5
10200: PUSH
10201: LD_INT 6
10203: PUSH
10204: LD_INT 7
10206: PUSH
10207: LD_INT 8
10209: PUSH
10210: LD_INT 9
10212: PUSH
10213: LD_INT 10
10215: PUSH
10216: LD_INT 11
10218: PUSH
10219: LD_INT 12
10221: PUSH
10222: LD_INT 13
10224: PUSH
10225: LD_INT 14
10227: PUSH
10228: LD_INT 15
10230: PUSH
10231: LD_INT 16
10233: PUSH
10234: LD_INT 17
10236: PUSH
10237: LD_INT 18
10239: PUSH
10240: LD_INT 19
10242: PUSH
10243: LD_INT 20
10245: PUSH
10246: LD_INT 21
10248: PUSH
10249: LD_INT 22
10251: PUSH
10252: LD_INT 23
10254: PUSH
10255: LD_INT 24
10257: PUSH
10258: LD_INT 25
10260: PUSH
10261: LD_INT 26
10263: PUSH
10264: LD_INT 27
10266: PUSH
10267: LD_INT 28
10269: PUSH
10270: LD_INT 30
10272: PUSH
10273: LD_INT 31
10275: PUSH
10276: LD_INT 32
10278: PUSH
10279: LD_INT 33
10281: PUSH
10282: LD_INT 34
10284: PUSH
10285: LD_INT 36
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: LIST
10316: LIST
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: PUSH
10324: LD_INT 101
10326: PUSH
10327: LD_INT 102
10329: PUSH
10330: LD_INT 103
10332: PUSH
10333: LD_INT 104
10335: PUSH
10336: LD_INT 105
10338: PUSH
10339: LD_INT 106
10341: PUSH
10342: LD_INT 107
10344: PUSH
10345: LD_INT 108
10347: PUSH
10348: LD_INT 109
10350: PUSH
10351: LD_INT 110
10353: PUSH
10354: LD_INT 111
10356: PUSH
10357: LD_INT 112
10359: PUSH
10360: LD_INT 113
10362: PUSH
10363: LD_INT 114
10365: PUSH
10366: LD_INT 116
10368: PUSH
10369: LD_INT 117
10371: PUSH
10372: LD_INT 118
10374: PUSH
10375: EMPTY
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: ST_TO_ADDR
10398: GO 11853
10400: LD_INT 13
10402: DOUBLE
10403: EQUAL
10404: IFTRUE 10408
10406: GO 10616
10408: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
10409: LD_ADDR_VAR 0 2
10413: PUSH
10414: LD_INT 1
10416: PUSH
10417: LD_INT 2
10419: PUSH
10420: LD_INT 3
10422: PUSH
10423: LD_INT 4
10425: PUSH
10426: LD_INT 5
10428: PUSH
10429: LD_INT 8
10431: PUSH
10432: LD_INT 9
10434: PUSH
10435: LD_INT 10
10437: PUSH
10438: LD_INT 11
10440: PUSH
10441: LD_INT 12
10443: PUSH
10444: LD_INT 14
10446: PUSH
10447: LD_INT 15
10449: PUSH
10450: LD_INT 16
10452: PUSH
10453: LD_INT 17
10455: PUSH
10456: LD_INT 18
10458: PUSH
10459: LD_INT 19
10461: PUSH
10462: LD_INT 20
10464: PUSH
10465: LD_INT 21
10467: PUSH
10468: LD_INT 22
10470: PUSH
10471: LD_INT 23
10473: PUSH
10474: LD_INT 24
10476: PUSH
10477: LD_INT 25
10479: PUSH
10480: LD_INT 26
10482: PUSH
10483: LD_INT 27
10485: PUSH
10486: LD_INT 28
10488: PUSH
10489: LD_INT 30
10491: PUSH
10492: LD_INT 31
10494: PUSH
10495: LD_INT 32
10497: PUSH
10498: LD_INT 33
10500: PUSH
10501: LD_INT 34
10503: PUSH
10504: LD_INT 36
10506: PUSH
10507: EMPTY
10508: LIST
10509: LIST
10510: LIST
10511: LIST
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: PUSH
10540: LD_INT 101
10542: PUSH
10543: LD_INT 102
10545: PUSH
10546: LD_INT 103
10548: PUSH
10549: LD_INT 104
10551: PUSH
10552: LD_INT 105
10554: PUSH
10555: LD_INT 106
10557: PUSH
10558: LD_INT 107
10560: PUSH
10561: LD_INT 108
10563: PUSH
10564: LD_INT 109
10566: PUSH
10567: LD_INT 110
10569: PUSH
10570: LD_INT 111
10572: PUSH
10573: LD_INT 112
10575: PUSH
10576: LD_INT 113
10578: PUSH
10579: LD_INT 114
10581: PUSH
10582: LD_INT 116
10584: PUSH
10585: LD_INT 117
10587: PUSH
10588: LD_INT 118
10590: PUSH
10591: EMPTY
10592: LIST
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: LIST
10598: LIST
10599: LIST
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: PUSH
10610: EMPTY
10611: LIST
10612: LIST
10613: ST_TO_ADDR
10614: GO 11853
10616: LD_INT 14
10618: DOUBLE
10619: EQUAL
10620: IFTRUE 10624
10622: GO 10848
10624: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
10625: LD_ADDR_VAR 0 2
10629: PUSH
10630: LD_INT 1
10632: PUSH
10633: LD_INT 2
10635: PUSH
10636: LD_INT 3
10638: PUSH
10639: LD_INT 4
10641: PUSH
10642: LD_INT 5
10644: PUSH
10645: LD_INT 6
10647: PUSH
10648: LD_INT 7
10650: PUSH
10651: LD_INT 8
10653: PUSH
10654: LD_INT 9
10656: PUSH
10657: LD_INT 10
10659: PUSH
10660: LD_INT 11
10662: PUSH
10663: LD_INT 12
10665: PUSH
10666: LD_INT 13
10668: PUSH
10669: LD_INT 14
10671: PUSH
10672: LD_INT 15
10674: PUSH
10675: LD_INT 16
10677: PUSH
10678: LD_INT 17
10680: PUSH
10681: LD_INT 18
10683: PUSH
10684: LD_INT 19
10686: PUSH
10687: LD_INT 20
10689: PUSH
10690: LD_INT 21
10692: PUSH
10693: LD_INT 22
10695: PUSH
10696: LD_INT 23
10698: PUSH
10699: LD_INT 24
10701: PUSH
10702: LD_INT 25
10704: PUSH
10705: LD_INT 26
10707: PUSH
10708: LD_INT 27
10710: PUSH
10711: LD_INT 28
10713: PUSH
10714: LD_INT 29
10716: PUSH
10717: LD_INT 30
10719: PUSH
10720: LD_INT 31
10722: PUSH
10723: LD_INT 32
10725: PUSH
10726: LD_INT 33
10728: PUSH
10729: LD_INT 34
10731: PUSH
10732: LD_INT 36
10734: PUSH
10735: EMPTY
10736: LIST
10737: LIST
10738: LIST
10739: LIST
10740: LIST
10741: LIST
10742: LIST
10743: LIST
10744: LIST
10745: LIST
10746: LIST
10747: LIST
10748: LIST
10749: LIST
10750: LIST
10751: LIST
10752: LIST
10753: LIST
10754: LIST
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: LIST
10761: LIST
10762: LIST
10763: LIST
10764: LIST
10765: LIST
10766: LIST
10767: LIST
10768: LIST
10769: LIST
10770: LIST
10771: PUSH
10772: LD_INT 101
10774: PUSH
10775: LD_INT 102
10777: PUSH
10778: LD_INT 103
10780: PUSH
10781: LD_INT 104
10783: PUSH
10784: LD_INT 105
10786: PUSH
10787: LD_INT 106
10789: PUSH
10790: LD_INT 107
10792: PUSH
10793: LD_INT 108
10795: PUSH
10796: LD_INT 109
10798: PUSH
10799: LD_INT 110
10801: PUSH
10802: LD_INT 111
10804: PUSH
10805: LD_INT 112
10807: PUSH
10808: LD_INT 113
10810: PUSH
10811: LD_INT 114
10813: PUSH
10814: LD_INT 116
10816: PUSH
10817: LD_INT 117
10819: PUSH
10820: LD_INT 118
10822: PUSH
10823: EMPTY
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: ST_TO_ADDR
10846: GO 11853
10848: LD_INT 15
10850: DOUBLE
10851: EQUAL
10852: IFTRUE 10856
10854: GO 11080
10856: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
10857: LD_ADDR_VAR 0 2
10861: PUSH
10862: LD_INT 1
10864: PUSH
10865: LD_INT 2
10867: PUSH
10868: LD_INT 3
10870: PUSH
10871: LD_INT 4
10873: PUSH
10874: LD_INT 5
10876: PUSH
10877: LD_INT 6
10879: PUSH
10880: LD_INT 7
10882: PUSH
10883: LD_INT 8
10885: PUSH
10886: LD_INT 9
10888: PUSH
10889: LD_INT 10
10891: PUSH
10892: LD_INT 11
10894: PUSH
10895: LD_INT 12
10897: PUSH
10898: LD_INT 13
10900: PUSH
10901: LD_INT 14
10903: PUSH
10904: LD_INT 15
10906: PUSH
10907: LD_INT 16
10909: PUSH
10910: LD_INT 17
10912: PUSH
10913: LD_INT 18
10915: PUSH
10916: LD_INT 19
10918: PUSH
10919: LD_INT 20
10921: PUSH
10922: LD_INT 21
10924: PUSH
10925: LD_INT 22
10927: PUSH
10928: LD_INT 23
10930: PUSH
10931: LD_INT 24
10933: PUSH
10934: LD_INT 25
10936: PUSH
10937: LD_INT 26
10939: PUSH
10940: LD_INT 27
10942: PUSH
10943: LD_INT 28
10945: PUSH
10946: LD_INT 29
10948: PUSH
10949: LD_INT 30
10951: PUSH
10952: LD_INT 31
10954: PUSH
10955: LD_INT 32
10957: PUSH
10958: LD_INT 33
10960: PUSH
10961: LD_INT 34
10963: PUSH
10964: LD_INT 36
10966: PUSH
10967: EMPTY
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: LIST
10999: LIST
11000: LIST
11001: LIST
11002: LIST
11003: PUSH
11004: LD_INT 101
11006: PUSH
11007: LD_INT 102
11009: PUSH
11010: LD_INT 103
11012: PUSH
11013: LD_INT 104
11015: PUSH
11016: LD_INT 105
11018: PUSH
11019: LD_INT 106
11021: PUSH
11022: LD_INT 107
11024: PUSH
11025: LD_INT 108
11027: PUSH
11028: LD_INT 109
11030: PUSH
11031: LD_INT 110
11033: PUSH
11034: LD_INT 111
11036: PUSH
11037: LD_INT 112
11039: PUSH
11040: LD_INT 113
11042: PUSH
11043: LD_INT 114
11045: PUSH
11046: LD_INT 116
11048: PUSH
11049: LD_INT 117
11051: PUSH
11052: LD_INT 118
11054: PUSH
11055: EMPTY
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: LIST
11071: LIST
11072: LIST
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: ST_TO_ADDR
11078: GO 11853
11080: LD_INT 16
11082: DOUBLE
11083: EQUAL
11084: IFTRUE 11088
11086: GO 11224
11088: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11089: LD_ADDR_VAR 0 2
11093: PUSH
11094: LD_INT 2
11096: PUSH
11097: LD_INT 4
11099: PUSH
11100: LD_INT 5
11102: PUSH
11103: LD_INT 7
11105: PUSH
11106: LD_INT 11
11108: PUSH
11109: LD_INT 12
11111: PUSH
11112: LD_INT 15
11114: PUSH
11115: LD_INT 16
11117: PUSH
11118: LD_INT 20
11120: PUSH
11121: LD_INT 21
11123: PUSH
11124: LD_INT 22
11126: PUSH
11127: LD_INT 23
11129: PUSH
11130: LD_INT 25
11132: PUSH
11133: LD_INT 26
11135: PUSH
11136: LD_INT 30
11138: PUSH
11139: LD_INT 31
11141: PUSH
11142: LD_INT 32
11144: PUSH
11145: LD_INT 33
11147: PUSH
11148: LD_INT 34
11150: PUSH
11151: EMPTY
11152: LIST
11153: LIST
11154: LIST
11155: LIST
11156: LIST
11157: LIST
11158: LIST
11159: LIST
11160: LIST
11161: LIST
11162: LIST
11163: LIST
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: LIST
11169: LIST
11170: LIST
11171: PUSH
11172: LD_INT 101
11174: PUSH
11175: LD_INT 102
11177: PUSH
11178: LD_INT 103
11180: PUSH
11181: LD_INT 106
11183: PUSH
11184: LD_INT 108
11186: PUSH
11187: LD_INT 112
11189: PUSH
11190: LD_INT 113
11192: PUSH
11193: LD_INT 114
11195: PUSH
11196: LD_INT 116
11198: PUSH
11199: LD_INT 117
11201: PUSH
11202: LD_INT 118
11204: PUSH
11205: EMPTY
11206: LIST
11207: LIST
11208: LIST
11209: LIST
11210: LIST
11211: LIST
11212: LIST
11213: LIST
11214: LIST
11215: LIST
11216: LIST
11217: PUSH
11218: EMPTY
11219: LIST
11220: LIST
11221: ST_TO_ADDR
11222: GO 11853
11224: LD_INT 17
11226: DOUBLE
11227: EQUAL
11228: IFTRUE 11232
11230: GO 11456
11232: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
11233: LD_ADDR_VAR 0 2
11237: PUSH
11238: LD_INT 1
11240: PUSH
11241: LD_INT 2
11243: PUSH
11244: LD_INT 3
11246: PUSH
11247: LD_INT 4
11249: PUSH
11250: LD_INT 5
11252: PUSH
11253: LD_INT 6
11255: PUSH
11256: LD_INT 7
11258: PUSH
11259: LD_INT 8
11261: PUSH
11262: LD_INT 9
11264: PUSH
11265: LD_INT 10
11267: PUSH
11268: LD_INT 11
11270: PUSH
11271: LD_INT 12
11273: PUSH
11274: LD_INT 13
11276: PUSH
11277: LD_INT 14
11279: PUSH
11280: LD_INT 15
11282: PUSH
11283: LD_INT 16
11285: PUSH
11286: LD_INT 17
11288: PUSH
11289: LD_INT 18
11291: PUSH
11292: LD_INT 19
11294: PUSH
11295: LD_INT 20
11297: PUSH
11298: LD_INT 21
11300: PUSH
11301: LD_INT 22
11303: PUSH
11304: LD_INT 23
11306: PUSH
11307: LD_INT 24
11309: PUSH
11310: LD_INT 25
11312: PUSH
11313: LD_INT 26
11315: PUSH
11316: LD_INT 27
11318: PUSH
11319: LD_INT 28
11321: PUSH
11322: LD_INT 29
11324: PUSH
11325: LD_INT 30
11327: PUSH
11328: LD_INT 31
11330: PUSH
11331: LD_INT 32
11333: PUSH
11334: LD_INT 33
11336: PUSH
11337: LD_INT 34
11339: PUSH
11340: LD_INT 36
11342: PUSH
11343: EMPTY
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: LIST
11349: LIST
11350: LIST
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: LIST
11356: LIST
11357: LIST
11358: LIST
11359: LIST
11360: LIST
11361: LIST
11362: LIST
11363: LIST
11364: LIST
11365: LIST
11366: LIST
11367: LIST
11368: LIST
11369: LIST
11370: LIST
11371: LIST
11372: LIST
11373: LIST
11374: LIST
11375: LIST
11376: LIST
11377: LIST
11378: LIST
11379: PUSH
11380: LD_INT 101
11382: PUSH
11383: LD_INT 102
11385: PUSH
11386: LD_INT 103
11388: PUSH
11389: LD_INT 104
11391: PUSH
11392: LD_INT 105
11394: PUSH
11395: LD_INT 106
11397: PUSH
11398: LD_INT 107
11400: PUSH
11401: LD_INT 108
11403: PUSH
11404: LD_INT 109
11406: PUSH
11407: LD_INT 110
11409: PUSH
11410: LD_INT 111
11412: PUSH
11413: LD_INT 112
11415: PUSH
11416: LD_INT 113
11418: PUSH
11419: LD_INT 114
11421: PUSH
11422: LD_INT 116
11424: PUSH
11425: LD_INT 117
11427: PUSH
11428: LD_INT 118
11430: PUSH
11431: EMPTY
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: PUSH
11450: EMPTY
11451: LIST
11452: LIST
11453: ST_TO_ADDR
11454: GO 11853
11456: LD_INT 18
11458: DOUBLE
11459: EQUAL
11460: IFTRUE 11464
11462: GO 11612
11464: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
11465: LD_ADDR_VAR 0 2
11469: PUSH
11470: LD_INT 2
11472: PUSH
11473: LD_INT 4
11475: PUSH
11476: LD_INT 5
11478: PUSH
11479: LD_INT 7
11481: PUSH
11482: LD_INT 11
11484: PUSH
11485: LD_INT 12
11487: PUSH
11488: LD_INT 15
11490: PUSH
11491: LD_INT 16
11493: PUSH
11494: LD_INT 20
11496: PUSH
11497: LD_INT 21
11499: PUSH
11500: LD_INT 22
11502: PUSH
11503: LD_INT 23
11505: PUSH
11506: LD_INT 25
11508: PUSH
11509: LD_INT 26
11511: PUSH
11512: LD_INT 30
11514: PUSH
11515: LD_INT 31
11517: PUSH
11518: LD_INT 32
11520: PUSH
11521: LD_INT 33
11523: PUSH
11524: LD_INT 34
11526: PUSH
11527: LD_INT 35
11529: PUSH
11530: LD_INT 36
11532: PUSH
11533: EMPTY
11534: LIST
11535: LIST
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: LIST
11543: LIST
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: LIST
11549: LIST
11550: LIST
11551: LIST
11552: LIST
11553: LIST
11554: LIST
11555: PUSH
11556: LD_INT 101
11558: PUSH
11559: LD_INT 102
11561: PUSH
11562: LD_INT 103
11564: PUSH
11565: LD_INT 106
11567: PUSH
11568: LD_INT 108
11570: PUSH
11571: LD_INT 112
11573: PUSH
11574: LD_INT 113
11576: PUSH
11577: LD_INT 114
11579: PUSH
11580: LD_INT 115
11582: PUSH
11583: LD_INT 116
11585: PUSH
11586: LD_INT 117
11588: PUSH
11589: LD_INT 118
11591: PUSH
11592: EMPTY
11593: LIST
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: PUSH
11606: EMPTY
11607: LIST
11608: LIST
11609: ST_TO_ADDR
11610: GO 11853
11612: LD_INT 19
11614: DOUBLE
11615: EQUAL
11616: IFTRUE 11620
11618: GO 11852
11620: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
11621: LD_ADDR_VAR 0 2
11625: PUSH
11626: LD_INT 1
11628: PUSH
11629: LD_INT 2
11631: PUSH
11632: LD_INT 3
11634: PUSH
11635: LD_INT 4
11637: PUSH
11638: LD_INT 5
11640: PUSH
11641: LD_INT 6
11643: PUSH
11644: LD_INT 7
11646: PUSH
11647: LD_INT 8
11649: PUSH
11650: LD_INT 9
11652: PUSH
11653: LD_INT 10
11655: PUSH
11656: LD_INT 11
11658: PUSH
11659: LD_INT 12
11661: PUSH
11662: LD_INT 13
11664: PUSH
11665: LD_INT 14
11667: PUSH
11668: LD_INT 15
11670: PUSH
11671: LD_INT 16
11673: PUSH
11674: LD_INT 17
11676: PUSH
11677: LD_INT 18
11679: PUSH
11680: LD_INT 19
11682: PUSH
11683: LD_INT 20
11685: PUSH
11686: LD_INT 21
11688: PUSH
11689: LD_INT 22
11691: PUSH
11692: LD_INT 23
11694: PUSH
11695: LD_INT 24
11697: PUSH
11698: LD_INT 25
11700: PUSH
11701: LD_INT 26
11703: PUSH
11704: LD_INT 27
11706: PUSH
11707: LD_INT 28
11709: PUSH
11710: LD_INT 29
11712: PUSH
11713: LD_INT 30
11715: PUSH
11716: LD_INT 31
11718: PUSH
11719: LD_INT 32
11721: PUSH
11722: LD_INT 33
11724: PUSH
11725: LD_INT 34
11727: PUSH
11728: LD_INT 35
11730: PUSH
11731: LD_INT 36
11733: PUSH
11734: EMPTY
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: LIST
11741: LIST
11742: LIST
11743: LIST
11744: LIST
11745: LIST
11746: LIST
11747: LIST
11748: LIST
11749: LIST
11750: LIST
11751: LIST
11752: LIST
11753: LIST
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: LIST
11759: LIST
11760: LIST
11761: LIST
11762: LIST
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: PUSH
11772: LD_INT 101
11774: PUSH
11775: LD_INT 102
11777: PUSH
11778: LD_INT 103
11780: PUSH
11781: LD_INT 104
11783: PUSH
11784: LD_INT 105
11786: PUSH
11787: LD_INT 106
11789: PUSH
11790: LD_INT 107
11792: PUSH
11793: LD_INT 108
11795: PUSH
11796: LD_INT 109
11798: PUSH
11799: LD_INT 110
11801: PUSH
11802: LD_INT 111
11804: PUSH
11805: LD_INT 112
11807: PUSH
11808: LD_INT 113
11810: PUSH
11811: LD_INT 114
11813: PUSH
11814: LD_INT 115
11816: PUSH
11817: LD_INT 116
11819: PUSH
11820: LD_INT 117
11822: PUSH
11823: LD_INT 118
11825: PUSH
11826: EMPTY
11827: LIST
11828: LIST
11829: LIST
11830: LIST
11831: LIST
11832: LIST
11833: LIST
11834: LIST
11835: LIST
11836: LIST
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: PUSH
11846: EMPTY
11847: LIST
11848: LIST
11849: ST_TO_ADDR
11850: GO 11853
11852: POP
// end else
11853: GO 12084
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
11855: LD_ADDR_VAR 0 2
11859: PUSH
11860: LD_INT 1
11862: PUSH
11863: LD_INT 2
11865: PUSH
11866: LD_INT 3
11868: PUSH
11869: LD_INT 4
11871: PUSH
11872: LD_INT 5
11874: PUSH
11875: LD_INT 6
11877: PUSH
11878: LD_INT 7
11880: PUSH
11881: LD_INT 8
11883: PUSH
11884: LD_INT 9
11886: PUSH
11887: LD_INT 10
11889: PUSH
11890: LD_INT 11
11892: PUSH
11893: LD_INT 12
11895: PUSH
11896: LD_INT 13
11898: PUSH
11899: LD_INT 14
11901: PUSH
11902: LD_INT 15
11904: PUSH
11905: LD_INT 16
11907: PUSH
11908: LD_INT 17
11910: PUSH
11911: LD_INT 18
11913: PUSH
11914: LD_INT 19
11916: PUSH
11917: LD_INT 20
11919: PUSH
11920: LD_INT 21
11922: PUSH
11923: LD_INT 22
11925: PUSH
11926: LD_INT 23
11928: PUSH
11929: LD_INT 24
11931: PUSH
11932: LD_INT 25
11934: PUSH
11935: LD_INT 26
11937: PUSH
11938: LD_INT 27
11940: PUSH
11941: LD_INT 28
11943: PUSH
11944: LD_INT 29
11946: PUSH
11947: LD_INT 30
11949: PUSH
11950: LD_INT 31
11952: PUSH
11953: LD_INT 32
11955: PUSH
11956: LD_INT 33
11958: PUSH
11959: LD_INT 34
11961: PUSH
11962: LD_INT 35
11964: PUSH
11965: LD_INT 36
11967: PUSH
11968: EMPTY
11969: LIST
11970: LIST
11971: LIST
11972: LIST
11973: LIST
11974: LIST
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: LIST
11999: LIST
12000: LIST
12001: LIST
12002: LIST
12003: LIST
12004: LIST
12005: PUSH
12006: LD_INT 101
12008: PUSH
12009: LD_INT 102
12011: PUSH
12012: LD_INT 103
12014: PUSH
12015: LD_INT 104
12017: PUSH
12018: LD_INT 105
12020: PUSH
12021: LD_INT 106
12023: PUSH
12024: LD_INT 107
12026: PUSH
12027: LD_INT 108
12029: PUSH
12030: LD_INT 109
12032: PUSH
12033: LD_INT 110
12035: PUSH
12036: LD_INT 111
12038: PUSH
12039: LD_INT 112
12041: PUSH
12042: LD_INT 113
12044: PUSH
12045: LD_INT 114
12047: PUSH
12048: LD_INT 115
12050: PUSH
12051: LD_INT 116
12053: PUSH
12054: LD_INT 117
12056: PUSH
12057: LD_INT 118
12059: PUSH
12060: EMPTY
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: LIST
12067: LIST
12068: LIST
12069: LIST
12070: LIST
12071: LIST
12072: LIST
12073: LIST
12074: LIST
12075: LIST
12076: LIST
12077: LIST
12078: LIST
12079: PUSH
12080: EMPTY
12081: LIST
12082: LIST
12083: ST_TO_ADDR
// if result then
12084: LD_VAR 0 2
12088: IFFALSE 12874
// begin normal :=  ;
12090: LD_ADDR_VAR 0 5
12094: PUSH
12095: LD_STRING 
12097: ST_TO_ADDR
// hardcore :=  ;
12098: LD_ADDR_VAR 0 6
12102: PUSH
12103: LD_STRING 
12105: ST_TO_ADDR
// active :=  ;
12106: LD_ADDR_VAR 0 7
12110: PUSH
12111: LD_STRING 
12113: ST_TO_ADDR
// for i = 1 to normalCounter do
12114: LD_ADDR_VAR 0 8
12118: PUSH
12119: DOUBLE
12120: LD_INT 1
12122: DEC
12123: ST_TO_ADDR
12124: LD_EXP 30
12128: PUSH
12129: FOR_TO
12130: IFFALSE 12231
// begin tmp := 0 ;
12132: LD_ADDR_VAR 0 3
12136: PUSH
12137: LD_STRING 0
12139: ST_TO_ADDR
// if result [ 1 ] then
12140: LD_VAR 0 2
12144: PUSH
12145: LD_INT 1
12147: ARRAY
12148: IFFALSE 12213
// if result [ 1 ] [ 1 ] = i then
12150: LD_VAR 0 2
12154: PUSH
12155: LD_INT 1
12157: ARRAY
12158: PUSH
12159: LD_INT 1
12161: ARRAY
12162: PUSH
12163: LD_VAR 0 8
12167: EQUAL
12168: IFFALSE 12213
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12170: LD_ADDR_VAR 0 2
12174: PUSH
12175: LD_VAR 0 2
12179: PPUSH
12180: LD_INT 1
12182: PPUSH
12183: LD_VAR 0 2
12187: PUSH
12188: LD_INT 1
12190: ARRAY
12191: PPUSH
12192: LD_INT 1
12194: PPUSH
12195: CALL_OW 3
12199: PPUSH
12200: CALL_OW 1
12204: ST_TO_ADDR
// tmp := 1 ;
12205: LD_ADDR_VAR 0 3
12209: PUSH
12210: LD_STRING 1
12212: ST_TO_ADDR
// end ; normal := normal & tmp ;
12213: LD_ADDR_VAR 0 5
12217: PUSH
12218: LD_VAR 0 5
12222: PUSH
12223: LD_VAR 0 3
12227: STR
12228: ST_TO_ADDR
// end ;
12229: GO 12129
12231: POP
12232: POP
// for i = 1 to hardcoreCounter do
12233: LD_ADDR_VAR 0 8
12237: PUSH
12238: DOUBLE
12239: LD_INT 1
12241: DEC
12242: ST_TO_ADDR
12243: LD_EXP 31
12247: PUSH
12248: FOR_TO
12249: IFFALSE 12354
// begin tmp := 0 ;
12251: LD_ADDR_VAR 0 3
12255: PUSH
12256: LD_STRING 0
12258: ST_TO_ADDR
// if result [ 2 ] then
12259: LD_VAR 0 2
12263: PUSH
12264: LD_INT 2
12266: ARRAY
12267: IFFALSE 12336
// if result [ 2 ] [ 1 ] = 100 + i then
12269: LD_VAR 0 2
12273: PUSH
12274: LD_INT 2
12276: ARRAY
12277: PUSH
12278: LD_INT 1
12280: ARRAY
12281: PUSH
12282: LD_INT 100
12284: PUSH
12285: LD_VAR 0 8
12289: PLUS
12290: EQUAL
12291: IFFALSE 12336
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12293: LD_ADDR_VAR 0 2
12297: PUSH
12298: LD_VAR 0 2
12302: PPUSH
12303: LD_INT 2
12305: PPUSH
12306: LD_VAR 0 2
12310: PUSH
12311: LD_INT 2
12313: ARRAY
12314: PPUSH
12315: LD_INT 1
12317: PPUSH
12318: CALL_OW 3
12322: PPUSH
12323: CALL_OW 1
12327: ST_TO_ADDR
// tmp := 1 ;
12328: LD_ADDR_VAR 0 3
12332: PUSH
12333: LD_STRING 1
12335: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12336: LD_ADDR_VAR 0 6
12340: PUSH
12341: LD_VAR 0 6
12345: PUSH
12346: LD_VAR 0 3
12350: STR
12351: ST_TO_ADDR
// end ;
12352: GO 12248
12354: POP
12355: POP
// if isGameLoad then
12356: LD_VAR 0 1
12360: IFFALSE 12835
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
12362: LD_ADDR_VAR 0 4
12366: PUSH
12367: LD_EXP 34
12371: PUSH
12372: LD_EXP 33
12376: PUSH
12377: LD_EXP 35
12381: PUSH
12382: LD_EXP 32
12386: PUSH
12387: LD_EXP 36
12391: PUSH
12392: LD_EXP 37
12396: PUSH
12397: LD_EXP 38
12401: PUSH
12402: LD_EXP 39
12406: PUSH
12407: LD_EXP 40
12411: PUSH
12412: LD_EXP 41
12416: PUSH
12417: LD_EXP 42
12421: PUSH
12422: LD_EXP 43
12426: PUSH
12427: LD_EXP 44
12431: PUSH
12432: LD_EXP 45
12436: PUSH
12437: LD_EXP 53
12441: PUSH
12442: LD_EXP 54
12446: PUSH
12447: LD_EXP 55
12451: PUSH
12452: LD_EXP 56
12456: PUSH
12457: LD_EXP 58
12461: PUSH
12462: LD_EXP 59
12466: PUSH
12467: LD_EXP 60
12471: PUSH
12472: LD_EXP 63
12476: PUSH
12477: LD_EXP 65
12481: PUSH
12482: LD_EXP 66
12486: PUSH
12487: LD_EXP 67
12491: PUSH
12492: LD_EXP 69
12496: PUSH
12497: LD_EXP 70
12501: PUSH
12502: LD_EXP 73
12506: PUSH
12507: LD_EXP 74
12511: PUSH
12512: LD_EXP 75
12516: PUSH
12517: LD_EXP 76
12521: PUSH
12522: LD_EXP 77
12526: PUSH
12527: LD_EXP 78
12531: PUSH
12532: LD_EXP 79
12536: PUSH
12537: LD_EXP 80
12541: PUSH
12542: LD_EXP 81
12546: PUSH
12547: LD_EXP 46
12551: PUSH
12552: LD_EXP 47
12556: PUSH
12557: LD_EXP 50
12561: PUSH
12562: LD_EXP 51
12566: PUSH
12567: LD_EXP 52
12571: PUSH
12572: LD_EXP 48
12576: PUSH
12577: LD_EXP 49
12581: PUSH
12582: LD_EXP 57
12586: PUSH
12587: LD_EXP 61
12591: PUSH
12592: LD_EXP 62
12596: PUSH
12597: LD_EXP 64
12601: PUSH
12602: LD_EXP 68
12606: PUSH
12607: LD_EXP 71
12611: PUSH
12612: LD_EXP 72
12616: PUSH
12617: LD_EXP 82
12621: PUSH
12622: LD_EXP 83
12626: PUSH
12627: LD_EXP 84
12631: PUSH
12632: LD_EXP 85
12636: PUSH
12637: EMPTY
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: LIST
12643: LIST
12644: LIST
12645: LIST
12646: LIST
12647: LIST
12648: LIST
12649: LIST
12650: LIST
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: LIST
12668: LIST
12669: LIST
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: LIST
12678: LIST
12679: LIST
12680: LIST
12681: LIST
12682: LIST
12683: LIST
12684: LIST
12685: LIST
12686: LIST
12687: LIST
12688: LIST
12689: LIST
12690: LIST
12691: LIST
12692: ST_TO_ADDR
// tmp :=  ;
12693: LD_ADDR_VAR 0 3
12697: PUSH
12698: LD_STRING 
12700: ST_TO_ADDR
// for i = 1 to normalCounter do
12701: LD_ADDR_VAR 0 8
12705: PUSH
12706: DOUBLE
12707: LD_INT 1
12709: DEC
12710: ST_TO_ADDR
12711: LD_EXP 30
12715: PUSH
12716: FOR_TO
12717: IFFALSE 12753
// begin if flags [ i ] then
12719: LD_VAR 0 4
12723: PUSH
12724: LD_VAR 0 8
12728: ARRAY
12729: IFFALSE 12751
// tmp := tmp & i & ; ;
12731: LD_ADDR_VAR 0 3
12735: PUSH
12736: LD_VAR 0 3
12740: PUSH
12741: LD_VAR 0 8
12745: STR
12746: PUSH
12747: LD_STRING ;
12749: STR
12750: ST_TO_ADDR
// end ;
12751: GO 12716
12753: POP
12754: POP
// for i = 1 to hardcoreCounter do
12755: LD_ADDR_VAR 0 8
12759: PUSH
12760: DOUBLE
12761: LD_INT 1
12763: DEC
12764: ST_TO_ADDR
12765: LD_EXP 31
12769: PUSH
12770: FOR_TO
12771: IFFALSE 12817
// begin if flags [ normalCounter + i ] then
12773: LD_VAR 0 4
12777: PUSH
12778: LD_EXP 30
12782: PUSH
12783: LD_VAR 0 8
12787: PLUS
12788: ARRAY
12789: IFFALSE 12815
// tmp := tmp & ( 100 + i ) & ; ;
12791: LD_ADDR_VAR 0 3
12795: PUSH
12796: LD_VAR 0 3
12800: PUSH
12801: LD_INT 100
12803: PUSH
12804: LD_VAR 0 8
12808: PLUS
12809: STR
12810: PUSH
12811: LD_STRING ;
12813: STR
12814: ST_TO_ADDR
// end ;
12815: GO 12770
12817: POP
12818: POP
// if tmp then
12819: LD_VAR 0 3
12823: IFFALSE 12835
// active := tmp ;
12825: LD_ADDR_VAR 0 7
12829: PUSH
12830: LD_VAR 0 3
12834: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
12835: LD_STRING getStreamItemsFromMission("
12837: PUSH
12838: LD_VAR 0 5
12842: STR
12843: PUSH
12844: LD_STRING ","
12846: STR
12847: PUSH
12848: LD_VAR 0 6
12852: STR
12853: PUSH
12854: LD_STRING ","
12856: STR
12857: PUSH
12858: LD_VAR 0 7
12862: STR
12863: PUSH
12864: LD_STRING ")
12866: STR
12867: PPUSH
12868: CALL_OW 559
// end else
12872: GO 12881
// ToLua ( getStreamItemsFromMission("","","") ) ;
12874: LD_STRING getStreamItemsFromMission("","","")
12876: PPUSH
12877: CALL_OW 559
// end ;
12881: LD_VAR 0 2
12885: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
12886: LD_EXP 29
12890: PUSH
12891: LD_EXP 34
12895: AND
12896: IFFALSE 13020
12898: GO 12900
12900: DISABLE
12901: LD_INT 0
12903: PPUSH
12904: PPUSH
// begin enable ;
12905: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
12906: LD_ADDR_VAR 0 2
12910: PUSH
12911: LD_INT 22
12913: PUSH
12914: LD_OWVAR 2
12918: PUSH
12919: EMPTY
12920: LIST
12921: LIST
12922: PUSH
12923: LD_INT 2
12925: PUSH
12926: LD_INT 34
12928: PUSH
12929: LD_INT 7
12931: PUSH
12932: EMPTY
12933: LIST
12934: LIST
12935: PUSH
12936: LD_INT 34
12938: PUSH
12939: LD_INT 45
12941: PUSH
12942: EMPTY
12943: LIST
12944: LIST
12945: PUSH
12946: LD_INT 34
12948: PUSH
12949: LD_INT 28
12951: PUSH
12952: EMPTY
12953: LIST
12954: LIST
12955: PUSH
12956: LD_INT 34
12958: PUSH
12959: LD_INT 47
12961: PUSH
12962: EMPTY
12963: LIST
12964: LIST
12965: PUSH
12966: EMPTY
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: PUSH
12973: EMPTY
12974: LIST
12975: LIST
12976: PPUSH
12977: CALL_OW 69
12981: ST_TO_ADDR
// if not tmp then
12982: LD_VAR 0 2
12986: NOT
12987: IFFALSE 12991
// exit ;
12989: GO 13020
// for i in tmp do
12991: LD_ADDR_VAR 0 1
12995: PUSH
12996: LD_VAR 0 2
13000: PUSH
13001: FOR_IN
13002: IFFALSE 13018
// begin SetLives ( i , 0 ) ;
13004: LD_VAR 0 1
13008: PPUSH
13009: LD_INT 0
13011: PPUSH
13012: CALL_OW 234
// end ;
13016: GO 13001
13018: POP
13019: POP
// end ;
13020: PPOPN 2
13022: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13023: LD_EXP 29
13027: PUSH
13028: LD_EXP 35
13032: AND
13033: IFFALSE 13117
13035: GO 13037
13037: DISABLE
13038: LD_INT 0
13040: PPUSH
13041: PPUSH
// begin enable ;
13042: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13043: LD_ADDR_VAR 0 2
13047: PUSH
13048: LD_INT 22
13050: PUSH
13051: LD_OWVAR 2
13055: PUSH
13056: EMPTY
13057: LIST
13058: LIST
13059: PUSH
13060: LD_INT 32
13062: PUSH
13063: LD_INT 3
13065: PUSH
13066: EMPTY
13067: LIST
13068: LIST
13069: PUSH
13070: EMPTY
13071: LIST
13072: LIST
13073: PPUSH
13074: CALL_OW 69
13078: ST_TO_ADDR
// if not tmp then
13079: LD_VAR 0 2
13083: NOT
13084: IFFALSE 13088
// exit ;
13086: GO 13117
// for i in tmp do
13088: LD_ADDR_VAR 0 1
13092: PUSH
13093: LD_VAR 0 2
13097: PUSH
13098: FOR_IN
13099: IFFALSE 13115
// begin SetLives ( i , 0 ) ;
13101: LD_VAR 0 1
13105: PPUSH
13106: LD_INT 0
13108: PPUSH
13109: CALL_OW 234
// end ;
13113: GO 13098
13115: POP
13116: POP
// end ;
13117: PPOPN 2
13119: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13120: LD_EXP 29
13124: PUSH
13125: LD_EXP 32
13129: AND
13130: IFFALSE 13223
13132: GO 13134
13134: DISABLE
13135: LD_INT 0
13137: PPUSH
// begin enable ;
13138: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13139: LD_ADDR_VAR 0 1
13143: PUSH
13144: LD_INT 22
13146: PUSH
13147: LD_OWVAR 2
13151: PUSH
13152: EMPTY
13153: LIST
13154: LIST
13155: PUSH
13156: LD_INT 2
13158: PUSH
13159: LD_INT 25
13161: PUSH
13162: LD_INT 5
13164: PUSH
13165: EMPTY
13166: LIST
13167: LIST
13168: PUSH
13169: LD_INT 25
13171: PUSH
13172: LD_INT 9
13174: PUSH
13175: EMPTY
13176: LIST
13177: LIST
13178: PUSH
13179: LD_INT 25
13181: PUSH
13182: LD_INT 8
13184: PUSH
13185: EMPTY
13186: LIST
13187: LIST
13188: PUSH
13189: EMPTY
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: PUSH
13195: EMPTY
13196: LIST
13197: LIST
13198: PPUSH
13199: CALL_OW 69
13203: PUSH
13204: FOR_IN
13205: IFFALSE 13221
// begin SetClass ( i , 1 ) ;
13207: LD_VAR 0 1
13211: PPUSH
13212: LD_INT 1
13214: PPUSH
13215: CALL_OW 336
// end ;
13219: GO 13204
13221: POP
13222: POP
// end ;
13223: PPOPN 1
13225: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13226: LD_EXP 29
13230: PUSH
13231: LD_EXP 33
13235: AND
13236: PUSH
13237: LD_OWVAR 65
13241: PUSH
13242: LD_INT 7
13244: LESS
13245: AND
13246: IFFALSE 13260
13248: GO 13250
13250: DISABLE
// begin enable ;
13251: ENABLE
// game_speed := 7 ;
13252: LD_ADDR_OWVAR 65
13256: PUSH
13257: LD_INT 7
13259: ST_TO_ADDR
// end ;
13260: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13261: LD_EXP 29
13265: PUSH
13266: LD_EXP 36
13270: AND
13271: IFFALSE 13473
13273: GO 13275
13275: DISABLE
13276: LD_INT 0
13278: PPUSH
13279: PPUSH
13280: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13281: LD_ADDR_VAR 0 3
13285: PUSH
13286: LD_INT 81
13288: PUSH
13289: LD_OWVAR 2
13293: PUSH
13294: EMPTY
13295: LIST
13296: LIST
13297: PUSH
13298: LD_INT 21
13300: PUSH
13301: LD_INT 1
13303: PUSH
13304: EMPTY
13305: LIST
13306: LIST
13307: PUSH
13308: EMPTY
13309: LIST
13310: LIST
13311: PPUSH
13312: CALL_OW 69
13316: ST_TO_ADDR
// if not tmp then
13317: LD_VAR 0 3
13321: NOT
13322: IFFALSE 13326
// exit ;
13324: GO 13473
// if tmp > 5 then
13326: LD_VAR 0 3
13330: PUSH
13331: LD_INT 5
13333: GREATER
13334: IFFALSE 13346
// k := 5 else
13336: LD_ADDR_VAR 0 2
13340: PUSH
13341: LD_INT 5
13343: ST_TO_ADDR
13344: GO 13356
// k := tmp ;
13346: LD_ADDR_VAR 0 2
13350: PUSH
13351: LD_VAR 0 3
13355: ST_TO_ADDR
// for i := 1 to k do
13356: LD_ADDR_VAR 0 1
13360: PUSH
13361: DOUBLE
13362: LD_INT 1
13364: DEC
13365: ST_TO_ADDR
13366: LD_VAR 0 2
13370: PUSH
13371: FOR_TO
13372: IFFALSE 13471
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13374: LD_VAR 0 3
13378: PUSH
13379: LD_VAR 0 1
13383: ARRAY
13384: PPUSH
13385: LD_VAR 0 1
13389: PUSH
13390: LD_INT 4
13392: MOD
13393: PUSH
13394: LD_INT 1
13396: PLUS
13397: PPUSH
13398: CALL_OW 259
13402: PUSH
13403: LD_INT 10
13405: LESS
13406: IFFALSE 13469
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13408: LD_VAR 0 3
13412: PUSH
13413: LD_VAR 0 1
13417: ARRAY
13418: PPUSH
13419: LD_VAR 0 1
13423: PUSH
13424: LD_INT 4
13426: MOD
13427: PUSH
13428: LD_INT 1
13430: PLUS
13431: PPUSH
13432: LD_VAR 0 3
13436: PUSH
13437: LD_VAR 0 1
13441: ARRAY
13442: PPUSH
13443: LD_VAR 0 1
13447: PUSH
13448: LD_INT 4
13450: MOD
13451: PUSH
13452: LD_INT 1
13454: PLUS
13455: PPUSH
13456: CALL_OW 259
13460: PUSH
13461: LD_INT 1
13463: PLUS
13464: PPUSH
13465: CALL_OW 237
13469: GO 13371
13471: POP
13472: POP
// end ;
13473: PPOPN 3
13475: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13476: LD_EXP 29
13480: PUSH
13481: LD_EXP 37
13485: AND
13486: IFFALSE 13506
13488: GO 13490
13490: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13491: LD_INT 4
13493: PPUSH
13494: LD_OWVAR 2
13498: PPUSH
13499: LD_INT 0
13501: PPUSH
13502: CALL_OW 324
13506: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13507: LD_EXP 29
13511: PUSH
13512: LD_EXP 66
13516: AND
13517: IFFALSE 13537
13519: GO 13521
13521: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13522: LD_INT 19
13524: PPUSH
13525: LD_OWVAR 2
13529: PPUSH
13530: LD_INT 0
13532: PPUSH
13533: CALL_OW 324
13537: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13538: LD_EXP 29
13542: PUSH
13543: LD_EXP 38
13547: AND
13548: IFFALSE 13650
13550: GO 13552
13552: DISABLE
13553: LD_INT 0
13555: PPUSH
13556: PPUSH
// begin enable ;
13557: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13558: LD_ADDR_VAR 0 2
13562: PUSH
13563: LD_INT 22
13565: PUSH
13566: LD_OWVAR 2
13570: PUSH
13571: EMPTY
13572: LIST
13573: LIST
13574: PUSH
13575: LD_INT 2
13577: PUSH
13578: LD_INT 34
13580: PUSH
13581: LD_INT 11
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: PUSH
13588: LD_INT 34
13590: PUSH
13591: LD_INT 30
13593: PUSH
13594: EMPTY
13595: LIST
13596: LIST
13597: PUSH
13598: EMPTY
13599: LIST
13600: LIST
13601: LIST
13602: PUSH
13603: EMPTY
13604: LIST
13605: LIST
13606: PPUSH
13607: CALL_OW 69
13611: ST_TO_ADDR
// if not tmp then
13612: LD_VAR 0 2
13616: NOT
13617: IFFALSE 13621
// exit ;
13619: GO 13650
// for i in tmp do
13621: LD_ADDR_VAR 0 1
13625: PUSH
13626: LD_VAR 0 2
13630: PUSH
13631: FOR_IN
13632: IFFALSE 13648
// begin SetLives ( i , 0 ) ;
13634: LD_VAR 0 1
13638: PPUSH
13639: LD_INT 0
13641: PPUSH
13642: CALL_OW 234
// end ;
13646: GO 13631
13648: POP
13649: POP
// end ;
13650: PPOPN 2
13652: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13653: LD_EXP 29
13657: PUSH
13658: LD_EXP 39
13662: AND
13663: IFFALSE 13683
13665: GO 13667
13667: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13668: LD_INT 32
13670: PPUSH
13671: LD_OWVAR 2
13675: PPUSH
13676: LD_INT 0
13678: PPUSH
13679: CALL_OW 324
13683: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13684: LD_EXP 29
13688: PUSH
13689: LD_EXP 40
13693: AND
13694: IFFALSE 13875
13696: GO 13698
13698: DISABLE
13699: LD_INT 0
13701: PPUSH
13702: PPUSH
13703: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13704: LD_ADDR_VAR 0 2
13708: PUSH
13709: LD_INT 22
13711: PUSH
13712: LD_OWVAR 2
13716: PUSH
13717: EMPTY
13718: LIST
13719: LIST
13720: PUSH
13721: LD_INT 33
13723: PUSH
13724: LD_INT 3
13726: PUSH
13727: EMPTY
13728: LIST
13729: LIST
13730: PUSH
13731: EMPTY
13732: LIST
13733: LIST
13734: PPUSH
13735: CALL_OW 69
13739: ST_TO_ADDR
// if not tmp then
13740: LD_VAR 0 2
13744: NOT
13745: IFFALSE 13749
// exit ;
13747: GO 13875
// side := 0 ;
13749: LD_ADDR_VAR 0 3
13753: PUSH
13754: LD_INT 0
13756: ST_TO_ADDR
// for i := 1 to 8 do
13757: LD_ADDR_VAR 0 1
13761: PUSH
13762: DOUBLE
13763: LD_INT 1
13765: DEC
13766: ST_TO_ADDR
13767: LD_INT 8
13769: PUSH
13770: FOR_TO
13771: IFFALSE 13819
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
13773: LD_OWVAR 2
13777: PUSH
13778: LD_VAR 0 1
13782: NONEQUAL
13783: PUSH
13784: LD_OWVAR 2
13788: PPUSH
13789: LD_VAR 0 1
13793: PPUSH
13794: CALL_OW 81
13798: PUSH
13799: LD_INT 2
13801: EQUAL
13802: AND
13803: IFFALSE 13817
// begin side := i ;
13805: LD_ADDR_VAR 0 3
13809: PUSH
13810: LD_VAR 0 1
13814: ST_TO_ADDR
// break ;
13815: GO 13819
// end ;
13817: GO 13770
13819: POP
13820: POP
// if not side then
13821: LD_VAR 0 3
13825: NOT
13826: IFFALSE 13830
// exit ;
13828: GO 13875
// for i := 1 to tmp do
13830: LD_ADDR_VAR 0 1
13834: PUSH
13835: DOUBLE
13836: LD_INT 1
13838: DEC
13839: ST_TO_ADDR
13840: LD_VAR 0 2
13844: PUSH
13845: FOR_TO
13846: IFFALSE 13873
// if Prob ( 60 ) then
13848: LD_INT 60
13850: PPUSH
13851: CALL_OW 13
13855: IFFALSE 13871
// SetSide ( i , side ) ;
13857: LD_VAR 0 1
13861: PPUSH
13862: LD_VAR 0 3
13866: PPUSH
13867: CALL_OW 235
13871: GO 13845
13873: POP
13874: POP
// end ;
13875: PPOPN 3
13877: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
13878: LD_EXP 29
13882: PUSH
13883: LD_EXP 42
13887: AND
13888: IFFALSE 14007
13890: GO 13892
13892: DISABLE
13893: LD_INT 0
13895: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
13896: LD_ADDR_VAR 0 1
13900: PUSH
13901: LD_INT 22
13903: PUSH
13904: LD_OWVAR 2
13908: PUSH
13909: EMPTY
13910: LIST
13911: LIST
13912: PUSH
13913: LD_INT 21
13915: PUSH
13916: LD_INT 1
13918: PUSH
13919: EMPTY
13920: LIST
13921: LIST
13922: PUSH
13923: LD_INT 3
13925: PUSH
13926: LD_INT 23
13928: PUSH
13929: LD_INT 0
13931: PUSH
13932: EMPTY
13933: LIST
13934: LIST
13935: PUSH
13936: EMPTY
13937: LIST
13938: LIST
13939: PUSH
13940: EMPTY
13941: LIST
13942: LIST
13943: LIST
13944: PPUSH
13945: CALL_OW 69
13949: PUSH
13950: FOR_IN
13951: IFFALSE 14005
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
13953: LD_VAR 0 1
13957: PPUSH
13958: CALL_OW 257
13962: PUSH
13963: LD_INT 1
13965: PUSH
13966: LD_INT 2
13968: PUSH
13969: LD_INT 3
13971: PUSH
13972: LD_INT 4
13974: PUSH
13975: EMPTY
13976: LIST
13977: LIST
13978: LIST
13979: LIST
13980: IN
13981: IFFALSE 14003
// SetClass ( un , rand ( 1 , 4 ) ) ;
13983: LD_VAR 0 1
13987: PPUSH
13988: LD_INT 1
13990: PPUSH
13991: LD_INT 4
13993: PPUSH
13994: CALL_OW 12
13998: PPUSH
13999: CALL_OW 336
14003: GO 13950
14005: POP
14006: POP
// end ;
14007: PPOPN 1
14009: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14010: LD_EXP 29
14014: PUSH
14015: LD_EXP 41
14019: AND
14020: IFFALSE 14099
14022: GO 14024
14024: DISABLE
14025: LD_INT 0
14027: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14028: LD_ADDR_VAR 0 1
14032: PUSH
14033: LD_INT 22
14035: PUSH
14036: LD_OWVAR 2
14040: PUSH
14041: EMPTY
14042: LIST
14043: LIST
14044: PUSH
14045: LD_INT 21
14047: PUSH
14048: LD_INT 3
14050: PUSH
14051: EMPTY
14052: LIST
14053: LIST
14054: PUSH
14055: EMPTY
14056: LIST
14057: LIST
14058: PPUSH
14059: CALL_OW 69
14063: ST_TO_ADDR
// if not tmp then
14064: LD_VAR 0 1
14068: NOT
14069: IFFALSE 14073
// exit ;
14071: GO 14099
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14073: LD_VAR 0 1
14077: PUSH
14078: LD_INT 1
14080: PPUSH
14081: LD_VAR 0 1
14085: PPUSH
14086: CALL_OW 12
14090: ARRAY
14091: PPUSH
14092: LD_INT 100
14094: PPUSH
14095: CALL_OW 234
// end ;
14099: PPOPN 1
14101: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14102: LD_EXP 29
14106: PUSH
14107: LD_EXP 43
14111: AND
14112: IFFALSE 14210
14114: GO 14116
14116: DISABLE
14117: LD_INT 0
14119: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14120: LD_ADDR_VAR 0 1
14124: PUSH
14125: LD_INT 22
14127: PUSH
14128: LD_OWVAR 2
14132: PUSH
14133: EMPTY
14134: LIST
14135: LIST
14136: PUSH
14137: LD_INT 21
14139: PUSH
14140: LD_INT 1
14142: PUSH
14143: EMPTY
14144: LIST
14145: LIST
14146: PUSH
14147: EMPTY
14148: LIST
14149: LIST
14150: PPUSH
14151: CALL_OW 69
14155: ST_TO_ADDR
// if not tmp then
14156: LD_VAR 0 1
14160: NOT
14161: IFFALSE 14165
// exit ;
14163: GO 14210
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14165: LD_VAR 0 1
14169: PUSH
14170: LD_INT 1
14172: PPUSH
14173: LD_VAR 0 1
14177: PPUSH
14178: CALL_OW 12
14182: ARRAY
14183: PPUSH
14184: LD_INT 1
14186: PPUSH
14187: LD_INT 4
14189: PPUSH
14190: CALL_OW 12
14194: PPUSH
14195: LD_INT 3000
14197: PPUSH
14198: LD_INT 9000
14200: PPUSH
14201: CALL_OW 12
14205: PPUSH
14206: CALL_OW 492
// end ;
14210: PPOPN 1
14212: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14213: LD_EXP 29
14217: PUSH
14218: LD_EXP 44
14222: AND
14223: IFFALSE 14243
14225: GO 14227
14227: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14228: LD_INT 1
14230: PPUSH
14231: LD_OWVAR 2
14235: PPUSH
14236: LD_INT 0
14238: PPUSH
14239: CALL_OW 324
14243: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14244: LD_EXP 29
14248: PUSH
14249: LD_EXP 45
14253: AND
14254: IFFALSE 14337
14256: GO 14258
14258: DISABLE
14259: LD_INT 0
14261: PPUSH
14262: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14263: LD_ADDR_VAR 0 2
14267: PUSH
14268: LD_INT 22
14270: PUSH
14271: LD_OWVAR 2
14275: PUSH
14276: EMPTY
14277: LIST
14278: LIST
14279: PUSH
14280: LD_INT 21
14282: PUSH
14283: LD_INT 3
14285: PUSH
14286: EMPTY
14287: LIST
14288: LIST
14289: PUSH
14290: EMPTY
14291: LIST
14292: LIST
14293: PPUSH
14294: CALL_OW 69
14298: ST_TO_ADDR
// if not tmp then
14299: LD_VAR 0 2
14303: NOT
14304: IFFALSE 14308
// exit ;
14306: GO 14337
// for i in tmp do
14308: LD_ADDR_VAR 0 1
14312: PUSH
14313: LD_VAR 0 2
14317: PUSH
14318: FOR_IN
14319: IFFALSE 14335
// SetBLevel ( i , 10 ) ;
14321: LD_VAR 0 1
14325: PPUSH
14326: LD_INT 10
14328: PPUSH
14329: CALL_OW 241
14333: GO 14318
14335: POP
14336: POP
// end ;
14337: PPOPN 2
14339: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14340: LD_EXP 29
14344: PUSH
14345: LD_EXP 46
14349: AND
14350: IFFALSE 14461
14352: GO 14354
14354: DISABLE
14355: LD_INT 0
14357: PPUSH
14358: PPUSH
14359: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14360: LD_ADDR_VAR 0 3
14364: PUSH
14365: LD_INT 22
14367: PUSH
14368: LD_OWVAR 2
14372: PUSH
14373: EMPTY
14374: LIST
14375: LIST
14376: PUSH
14377: LD_INT 25
14379: PUSH
14380: LD_INT 1
14382: PUSH
14383: EMPTY
14384: LIST
14385: LIST
14386: PUSH
14387: EMPTY
14388: LIST
14389: LIST
14390: PPUSH
14391: CALL_OW 69
14395: ST_TO_ADDR
// if not tmp then
14396: LD_VAR 0 3
14400: NOT
14401: IFFALSE 14405
// exit ;
14403: GO 14461
// un := tmp [ rand ( 1 , tmp ) ] ;
14405: LD_ADDR_VAR 0 2
14409: PUSH
14410: LD_VAR 0 3
14414: PUSH
14415: LD_INT 1
14417: PPUSH
14418: LD_VAR 0 3
14422: PPUSH
14423: CALL_OW 12
14427: ARRAY
14428: ST_TO_ADDR
// if Crawls ( un ) then
14429: LD_VAR 0 2
14433: PPUSH
14434: CALL_OW 318
14438: IFFALSE 14449
// ComWalk ( un ) ;
14440: LD_VAR 0 2
14444: PPUSH
14445: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14449: LD_VAR 0 2
14453: PPUSH
14454: LD_INT 5
14456: PPUSH
14457: CALL_OW 336
// end ;
14461: PPOPN 3
14463: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
14464: LD_EXP 29
14468: PUSH
14469: LD_EXP 47
14473: AND
14474: PUSH
14475: LD_OWVAR 67
14479: PUSH
14480: LD_INT 4
14482: LESS
14483: AND
14484: IFFALSE 14503
14486: GO 14488
14488: DISABLE
// begin Difficulty := Difficulty + 1 ;
14489: LD_ADDR_OWVAR 67
14493: PUSH
14494: LD_OWVAR 67
14498: PUSH
14499: LD_INT 1
14501: PLUS
14502: ST_TO_ADDR
// end ;
14503: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14504: LD_EXP 29
14508: PUSH
14509: LD_EXP 48
14513: AND
14514: IFFALSE 14617
14516: GO 14518
14518: DISABLE
14519: LD_INT 0
14521: PPUSH
// begin for i := 1 to 5 do
14522: LD_ADDR_VAR 0 1
14526: PUSH
14527: DOUBLE
14528: LD_INT 1
14530: DEC
14531: ST_TO_ADDR
14532: LD_INT 5
14534: PUSH
14535: FOR_TO
14536: IFFALSE 14615
// begin uc_nation := nation_nature ;
14538: LD_ADDR_OWVAR 21
14542: PUSH
14543: LD_INT 0
14545: ST_TO_ADDR
// uc_side := 0 ;
14546: LD_ADDR_OWVAR 20
14550: PUSH
14551: LD_INT 0
14553: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14554: LD_ADDR_OWVAR 29
14558: PUSH
14559: LD_INT 12
14561: PUSH
14562: LD_INT 12
14564: PUSH
14565: EMPTY
14566: LIST
14567: LIST
14568: ST_TO_ADDR
// hc_agressivity := 20 ;
14569: LD_ADDR_OWVAR 35
14573: PUSH
14574: LD_INT 20
14576: ST_TO_ADDR
// hc_class := class_tiger ;
14577: LD_ADDR_OWVAR 28
14581: PUSH
14582: LD_INT 14
14584: ST_TO_ADDR
// hc_gallery :=  ;
14585: LD_ADDR_OWVAR 33
14589: PUSH
14590: LD_STRING 
14592: ST_TO_ADDR
// hc_name :=  ;
14593: LD_ADDR_OWVAR 26
14597: PUSH
14598: LD_STRING 
14600: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14601: CALL_OW 44
14605: PPUSH
14606: LD_INT 0
14608: PPUSH
14609: CALL_OW 51
// end ;
14613: GO 14535
14615: POP
14616: POP
// end ;
14617: PPOPN 1
14619: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14620: LD_EXP 29
14624: PUSH
14625: LD_EXP 49
14629: AND
14630: IFFALSE 14639
14632: GO 14634
14634: DISABLE
// StreamSibBomb ;
14635: CALL 14640 0 0
14639: END
// export function StreamSibBomb ; var i , x , y ; begin
14640: LD_INT 0
14642: PPUSH
14643: PPUSH
14644: PPUSH
14645: PPUSH
// result := false ;
14646: LD_ADDR_VAR 0 1
14650: PUSH
14651: LD_INT 0
14653: ST_TO_ADDR
// for i := 1 to 16 do
14654: LD_ADDR_VAR 0 2
14658: PUSH
14659: DOUBLE
14660: LD_INT 1
14662: DEC
14663: ST_TO_ADDR
14664: LD_INT 16
14666: PUSH
14667: FOR_TO
14668: IFFALSE 14867
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14670: LD_ADDR_VAR 0 3
14674: PUSH
14675: LD_INT 10
14677: PUSH
14678: LD_INT 20
14680: PUSH
14681: LD_INT 30
14683: PUSH
14684: LD_INT 40
14686: PUSH
14687: LD_INT 50
14689: PUSH
14690: LD_INT 60
14692: PUSH
14693: LD_INT 70
14695: PUSH
14696: LD_INT 80
14698: PUSH
14699: LD_INT 90
14701: PUSH
14702: LD_INT 100
14704: PUSH
14705: LD_INT 110
14707: PUSH
14708: LD_INT 120
14710: PUSH
14711: LD_INT 130
14713: PUSH
14714: LD_INT 140
14716: PUSH
14717: LD_INT 150
14719: PUSH
14720: EMPTY
14721: LIST
14722: LIST
14723: LIST
14724: LIST
14725: LIST
14726: LIST
14727: LIST
14728: LIST
14729: LIST
14730: LIST
14731: LIST
14732: LIST
14733: LIST
14734: LIST
14735: LIST
14736: PUSH
14737: LD_INT 1
14739: PPUSH
14740: LD_INT 15
14742: PPUSH
14743: CALL_OW 12
14747: ARRAY
14748: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14749: LD_ADDR_VAR 0 4
14753: PUSH
14754: LD_INT 10
14756: PUSH
14757: LD_INT 20
14759: PUSH
14760: LD_INT 30
14762: PUSH
14763: LD_INT 40
14765: PUSH
14766: LD_INT 50
14768: PUSH
14769: LD_INT 60
14771: PUSH
14772: LD_INT 70
14774: PUSH
14775: LD_INT 80
14777: PUSH
14778: LD_INT 90
14780: PUSH
14781: LD_INT 100
14783: PUSH
14784: LD_INT 110
14786: PUSH
14787: LD_INT 120
14789: PUSH
14790: LD_INT 130
14792: PUSH
14793: LD_INT 140
14795: PUSH
14796: LD_INT 150
14798: PUSH
14799: EMPTY
14800: LIST
14801: LIST
14802: LIST
14803: LIST
14804: LIST
14805: LIST
14806: LIST
14807: LIST
14808: LIST
14809: LIST
14810: LIST
14811: LIST
14812: LIST
14813: LIST
14814: LIST
14815: PUSH
14816: LD_INT 1
14818: PPUSH
14819: LD_INT 15
14821: PPUSH
14822: CALL_OW 12
14826: ARRAY
14827: ST_TO_ADDR
// if ValidHex ( x , y ) then
14828: LD_VAR 0 3
14832: PPUSH
14833: LD_VAR 0 4
14837: PPUSH
14838: CALL_OW 488
14842: IFFALSE 14865
// begin result := [ x , y ] ;
14844: LD_ADDR_VAR 0 1
14848: PUSH
14849: LD_VAR 0 3
14853: PUSH
14854: LD_VAR 0 4
14858: PUSH
14859: EMPTY
14860: LIST
14861: LIST
14862: ST_TO_ADDR
// break ;
14863: GO 14867
// end ; end ;
14865: GO 14667
14867: POP
14868: POP
// if result then
14869: LD_VAR 0 1
14873: IFFALSE 14933
// begin ToLua ( playSibBomb() ) ;
14875: LD_STRING playSibBomb()
14877: PPUSH
14878: CALL_OW 559
// wait ( 0 0$14 ) ;
14882: LD_INT 490
14884: PPUSH
14885: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
14889: LD_VAR 0 1
14893: PUSH
14894: LD_INT 1
14896: ARRAY
14897: PPUSH
14898: LD_VAR 0 1
14902: PUSH
14903: LD_INT 2
14905: ARRAY
14906: PPUSH
14907: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
14911: LD_VAR 0 1
14915: PUSH
14916: LD_INT 1
14918: ARRAY
14919: PPUSH
14920: LD_VAR 0 1
14924: PUSH
14925: LD_INT 2
14927: ARRAY
14928: PPUSH
14929: CALL_OW 429
// end ; end ;
14933: LD_VAR 0 1
14937: RET
// every 0 0$1 trigger StreamModeActive and sReset do
14938: LD_EXP 29
14942: PUSH
14943: LD_EXP 51
14947: AND
14948: IFFALSE 14960
14950: GO 14952
14952: DISABLE
// YouLost (  ) ;
14953: LD_STRING 
14955: PPUSH
14956: CALL_OW 104
14960: END
// every 0 0$1 trigger StreamModeActive and sFog do
14961: LD_EXP 29
14965: PUSH
14966: LD_EXP 50
14970: AND
14971: IFFALSE 14985
14973: GO 14975
14975: DISABLE
// FogOff ( your_side ) ;
14976: LD_OWVAR 2
14980: PPUSH
14981: CALL_OW 344
14985: END
// every 0 0$1 trigger StreamModeActive and sSun do
14986: LD_EXP 29
14990: PUSH
14991: LD_EXP 52
14995: AND
14996: IFFALSE 15024
14998: GO 15000
15000: DISABLE
// begin solar_recharge_percent := 0 ;
15001: LD_ADDR_OWVAR 79
15005: PUSH
15006: LD_INT 0
15008: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15009: LD_INT 10500
15011: PPUSH
15012: CALL_OW 67
// solar_recharge_percent := 100 ;
15016: LD_ADDR_OWVAR 79
15020: PUSH
15021: LD_INT 100
15023: ST_TO_ADDR
// end ;
15024: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15025: LD_EXP 29
15029: PUSH
15030: LD_EXP 53
15034: AND
15035: IFFALSE 15274
15037: GO 15039
15039: DISABLE
15040: LD_INT 0
15042: PPUSH
15043: PPUSH
15044: PPUSH
// begin tmp := [ ] ;
15045: LD_ADDR_VAR 0 3
15049: PUSH
15050: EMPTY
15051: ST_TO_ADDR
// for i := 1 to 6 do
15052: LD_ADDR_VAR 0 1
15056: PUSH
15057: DOUBLE
15058: LD_INT 1
15060: DEC
15061: ST_TO_ADDR
15062: LD_INT 6
15064: PUSH
15065: FOR_TO
15066: IFFALSE 15171
// begin uc_nation := nation_nature ;
15068: LD_ADDR_OWVAR 21
15072: PUSH
15073: LD_INT 0
15075: ST_TO_ADDR
// uc_side := 0 ;
15076: LD_ADDR_OWVAR 20
15080: PUSH
15081: LD_INT 0
15083: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15084: LD_ADDR_OWVAR 29
15088: PUSH
15089: LD_INT 12
15091: PUSH
15092: LD_INT 12
15094: PUSH
15095: EMPTY
15096: LIST
15097: LIST
15098: ST_TO_ADDR
// hc_agressivity := 20 ;
15099: LD_ADDR_OWVAR 35
15103: PUSH
15104: LD_INT 20
15106: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15107: LD_ADDR_OWVAR 28
15111: PUSH
15112: LD_INT 17
15114: ST_TO_ADDR
// hc_gallery :=  ;
15115: LD_ADDR_OWVAR 33
15119: PUSH
15120: LD_STRING 
15122: ST_TO_ADDR
// hc_name :=  ;
15123: LD_ADDR_OWVAR 26
15127: PUSH
15128: LD_STRING 
15130: ST_TO_ADDR
// un := CreateHuman ;
15131: LD_ADDR_VAR 0 2
15135: PUSH
15136: CALL_OW 44
15140: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15141: LD_VAR 0 2
15145: PPUSH
15146: LD_INT 1
15148: PPUSH
15149: CALL_OW 51
// tmp := tmp ^ un ;
15153: LD_ADDR_VAR 0 3
15157: PUSH
15158: LD_VAR 0 3
15162: PUSH
15163: LD_VAR 0 2
15167: ADD
15168: ST_TO_ADDR
// end ;
15169: GO 15065
15171: POP
15172: POP
// repeat wait ( 0 0$1 ) ;
15173: LD_INT 35
15175: PPUSH
15176: CALL_OW 67
// for un in tmp do
15180: LD_ADDR_VAR 0 2
15184: PUSH
15185: LD_VAR 0 3
15189: PUSH
15190: FOR_IN
15191: IFFALSE 15265
// begin if IsDead ( un ) then
15193: LD_VAR 0 2
15197: PPUSH
15198: CALL_OW 301
15202: IFFALSE 15222
// begin tmp := tmp diff un ;
15204: LD_ADDR_VAR 0 3
15208: PUSH
15209: LD_VAR 0 3
15213: PUSH
15214: LD_VAR 0 2
15218: DIFF
15219: ST_TO_ADDR
// continue ;
15220: GO 15190
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15222: LD_VAR 0 2
15226: PPUSH
15227: LD_INT 3
15229: PUSH
15230: LD_INT 22
15232: PUSH
15233: LD_INT 0
15235: PUSH
15236: EMPTY
15237: LIST
15238: LIST
15239: PUSH
15240: EMPTY
15241: LIST
15242: LIST
15243: PPUSH
15244: CALL_OW 69
15248: PPUSH
15249: LD_VAR 0 2
15253: PPUSH
15254: CALL_OW 74
15258: PPUSH
15259: CALL_OW 115
// end ;
15263: GO 15190
15265: POP
15266: POP
// until not tmp ;
15267: LD_VAR 0 3
15271: NOT
15272: IFFALSE 15173
// end ;
15274: PPOPN 3
15276: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15277: LD_EXP 29
15281: PUSH
15282: LD_EXP 54
15286: AND
15287: IFFALSE 15341
15289: GO 15291
15291: DISABLE
// begin ToLua ( displayTroll(); ) ;
15292: LD_STRING displayTroll();
15294: PPUSH
15295: CALL_OW 559
// wait ( 3 3$00 ) ;
15299: LD_INT 6300
15301: PPUSH
15302: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15306: LD_STRING hideTroll();
15308: PPUSH
15309: CALL_OW 559
// wait ( 1 1$00 ) ;
15313: LD_INT 2100
15315: PPUSH
15316: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15320: LD_STRING displayTroll();
15322: PPUSH
15323: CALL_OW 559
// wait ( 1 1$00 ) ;
15327: LD_INT 2100
15329: PPUSH
15330: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15334: LD_STRING hideTroll();
15336: PPUSH
15337: CALL_OW 559
// end ;
15341: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15342: LD_EXP 29
15346: PUSH
15347: LD_EXP 55
15351: AND
15352: IFFALSE 15415
15354: GO 15356
15356: DISABLE
15357: LD_INT 0
15359: PPUSH
// begin p := 0 ;
15360: LD_ADDR_VAR 0 1
15364: PUSH
15365: LD_INT 0
15367: ST_TO_ADDR
// repeat game_speed := 1 ;
15368: LD_ADDR_OWVAR 65
15372: PUSH
15373: LD_INT 1
15375: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15376: LD_INT 35
15378: PPUSH
15379: CALL_OW 67
// p := p + 1 ;
15383: LD_ADDR_VAR 0 1
15387: PUSH
15388: LD_VAR 0 1
15392: PUSH
15393: LD_INT 1
15395: PLUS
15396: ST_TO_ADDR
// until p >= 60 ;
15397: LD_VAR 0 1
15401: PUSH
15402: LD_INT 60
15404: GREATEREQUAL
15405: IFFALSE 15368
// game_speed := 4 ;
15407: LD_ADDR_OWVAR 65
15411: PUSH
15412: LD_INT 4
15414: ST_TO_ADDR
// end ;
15415: PPOPN 1
15417: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15418: LD_EXP 29
15422: PUSH
15423: LD_EXP 56
15427: AND
15428: IFFALSE 15574
15430: GO 15432
15432: DISABLE
15433: LD_INT 0
15435: PPUSH
15436: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15437: LD_ADDR_VAR 0 1
15441: PUSH
15442: LD_INT 22
15444: PUSH
15445: LD_OWVAR 2
15449: PUSH
15450: EMPTY
15451: LIST
15452: LIST
15453: PUSH
15454: LD_INT 2
15456: PUSH
15457: LD_INT 30
15459: PUSH
15460: LD_INT 0
15462: PUSH
15463: EMPTY
15464: LIST
15465: LIST
15466: PUSH
15467: LD_INT 30
15469: PUSH
15470: LD_INT 1
15472: PUSH
15473: EMPTY
15474: LIST
15475: LIST
15476: PUSH
15477: EMPTY
15478: LIST
15479: LIST
15480: LIST
15481: PUSH
15482: EMPTY
15483: LIST
15484: LIST
15485: PPUSH
15486: CALL_OW 69
15490: ST_TO_ADDR
// if not depot then
15491: LD_VAR 0 1
15495: NOT
15496: IFFALSE 15500
// exit ;
15498: GO 15574
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15500: LD_ADDR_VAR 0 2
15504: PUSH
15505: LD_VAR 0 1
15509: PUSH
15510: LD_INT 1
15512: PPUSH
15513: LD_VAR 0 1
15517: PPUSH
15518: CALL_OW 12
15522: ARRAY
15523: PPUSH
15524: CALL_OW 274
15528: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15529: LD_VAR 0 2
15533: PPUSH
15534: LD_INT 1
15536: PPUSH
15537: LD_INT 0
15539: PPUSH
15540: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15544: LD_VAR 0 2
15548: PPUSH
15549: LD_INT 2
15551: PPUSH
15552: LD_INT 0
15554: PPUSH
15555: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15559: LD_VAR 0 2
15563: PPUSH
15564: LD_INT 3
15566: PPUSH
15567: LD_INT 0
15569: PPUSH
15570: CALL_OW 277
// end ;
15574: PPOPN 2
15576: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15577: LD_EXP 29
15581: PUSH
15582: LD_EXP 57
15586: AND
15587: IFFALSE 15684
15589: GO 15591
15591: DISABLE
15592: LD_INT 0
15594: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15595: LD_ADDR_VAR 0 1
15599: PUSH
15600: LD_INT 22
15602: PUSH
15603: LD_OWVAR 2
15607: PUSH
15608: EMPTY
15609: LIST
15610: LIST
15611: PUSH
15612: LD_INT 21
15614: PUSH
15615: LD_INT 1
15617: PUSH
15618: EMPTY
15619: LIST
15620: LIST
15621: PUSH
15622: LD_INT 3
15624: PUSH
15625: LD_INT 23
15627: PUSH
15628: LD_INT 0
15630: PUSH
15631: EMPTY
15632: LIST
15633: LIST
15634: PUSH
15635: EMPTY
15636: LIST
15637: LIST
15638: PUSH
15639: EMPTY
15640: LIST
15641: LIST
15642: LIST
15643: PPUSH
15644: CALL_OW 69
15648: ST_TO_ADDR
// if not tmp then
15649: LD_VAR 0 1
15653: NOT
15654: IFFALSE 15658
// exit ;
15656: GO 15684
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15658: LD_VAR 0 1
15662: PUSH
15663: LD_INT 1
15665: PPUSH
15666: LD_VAR 0 1
15670: PPUSH
15671: CALL_OW 12
15675: ARRAY
15676: PPUSH
15677: LD_INT 200
15679: PPUSH
15680: CALL_OW 234
// end ;
15684: PPOPN 1
15686: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15687: LD_EXP 29
15691: PUSH
15692: LD_EXP 58
15696: AND
15697: IFFALSE 15776
15699: GO 15701
15701: DISABLE
15702: LD_INT 0
15704: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15705: LD_ADDR_VAR 0 1
15709: PUSH
15710: LD_INT 22
15712: PUSH
15713: LD_OWVAR 2
15717: PUSH
15718: EMPTY
15719: LIST
15720: LIST
15721: PUSH
15722: LD_INT 21
15724: PUSH
15725: LD_INT 2
15727: PUSH
15728: EMPTY
15729: LIST
15730: LIST
15731: PUSH
15732: EMPTY
15733: LIST
15734: LIST
15735: PPUSH
15736: CALL_OW 69
15740: ST_TO_ADDR
// if not tmp then
15741: LD_VAR 0 1
15745: NOT
15746: IFFALSE 15750
// exit ;
15748: GO 15776
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15750: LD_VAR 0 1
15754: PUSH
15755: LD_INT 1
15757: PPUSH
15758: LD_VAR 0 1
15762: PPUSH
15763: CALL_OW 12
15767: ARRAY
15768: PPUSH
15769: LD_INT 60
15771: PPUSH
15772: CALL_OW 234
// end ;
15776: PPOPN 1
15778: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
15779: LD_EXP 29
15783: PUSH
15784: LD_EXP 59
15788: AND
15789: IFFALSE 15888
15791: GO 15793
15793: DISABLE
15794: LD_INT 0
15796: PPUSH
15797: PPUSH
// begin enable ;
15798: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
15799: LD_ADDR_VAR 0 1
15803: PUSH
15804: LD_INT 22
15806: PUSH
15807: LD_OWVAR 2
15811: PUSH
15812: EMPTY
15813: LIST
15814: LIST
15815: PUSH
15816: LD_INT 61
15818: PUSH
15819: EMPTY
15820: LIST
15821: PUSH
15822: LD_INT 33
15824: PUSH
15825: LD_INT 2
15827: PUSH
15828: EMPTY
15829: LIST
15830: LIST
15831: PUSH
15832: EMPTY
15833: LIST
15834: LIST
15835: LIST
15836: PPUSH
15837: CALL_OW 69
15841: ST_TO_ADDR
// if not tmp then
15842: LD_VAR 0 1
15846: NOT
15847: IFFALSE 15851
// exit ;
15849: GO 15888
// for i in tmp do
15851: LD_ADDR_VAR 0 2
15855: PUSH
15856: LD_VAR 0 1
15860: PUSH
15861: FOR_IN
15862: IFFALSE 15886
// if IsControledBy ( i ) then
15864: LD_VAR 0 2
15868: PPUSH
15869: CALL_OW 312
15873: IFFALSE 15884
// ComUnlink ( i ) ;
15875: LD_VAR 0 2
15879: PPUSH
15880: CALL_OW 136
15884: GO 15861
15886: POP
15887: POP
// end ;
15888: PPOPN 2
15890: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
15891: LD_EXP 29
15895: PUSH
15896: LD_EXP 60
15900: AND
15901: IFFALSE 16041
15903: GO 15905
15905: DISABLE
15906: LD_INT 0
15908: PPUSH
15909: PPUSH
// begin ToLua ( displayPowell(); ) ;
15910: LD_STRING displayPowell();
15912: PPUSH
15913: CALL_OW 559
// uc_side := 0 ;
15917: LD_ADDR_OWVAR 20
15921: PUSH
15922: LD_INT 0
15924: ST_TO_ADDR
// uc_nation := 2 ;
15925: LD_ADDR_OWVAR 21
15929: PUSH
15930: LD_INT 2
15932: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
15933: LD_ADDR_OWVAR 37
15937: PUSH
15938: LD_INT 14
15940: ST_TO_ADDR
// vc_engine := engine_siberite ;
15941: LD_ADDR_OWVAR 39
15945: PUSH
15946: LD_INT 3
15948: ST_TO_ADDR
// vc_control := control_apeman ;
15949: LD_ADDR_OWVAR 38
15953: PUSH
15954: LD_INT 5
15956: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
15957: LD_ADDR_OWVAR 40
15961: PUSH
15962: LD_INT 29
15964: ST_TO_ADDR
// un := CreateVehicle ;
15965: LD_ADDR_VAR 0 2
15969: PUSH
15970: CALL_OW 45
15974: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15975: LD_VAR 0 2
15979: PPUSH
15980: LD_INT 1
15982: PPUSH
15983: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15987: LD_INT 35
15989: PPUSH
15990: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15994: LD_VAR 0 2
15998: PPUSH
15999: LD_INT 22
16001: PUSH
16002: LD_OWVAR 2
16006: PUSH
16007: EMPTY
16008: LIST
16009: LIST
16010: PPUSH
16011: CALL_OW 69
16015: PPUSH
16016: LD_VAR 0 2
16020: PPUSH
16021: CALL_OW 74
16025: PPUSH
16026: CALL_OW 115
// until IsDead ( un ) ;
16030: LD_VAR 0 2
16034: PPUSH
16035: CALL_OW 301
16039: IFFALSE 15987
// end ;
16041: PPOPN 2
16043: END
// every 0 0$1 trigger StreamModeActive and sStu do
16044: LD_EXP 29
16048: PUSH
16049: LD_EXP 68
16053: AND
16054: IFFALSE 16070
16056: GO 16058
16058: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16059: LD_STRING displayStucuk();
16061: PPUSH
16062: CALL_OW 559
// ResetFog ;
16066: CALL_OW 335
// end ;
16070: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16071: LD_EXP 29
16075: PUSH
16076: LD_EXP 61
16080: AND
16081: IFFALSE 16222
16083: GO 16085
16085: DISABLE
16086: LD_INT 0
16088: PPUSH
16089: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16090: LD_ADDR_VAR 0 2
16094: PUSH
16095: LD_INT 22
16097: PUSH
16098: LD_OWVAR 2
16102: PUSH
16103: EMPTY
16104: LIST
16105: LIST
16106: PUSH
16107: LD_INT 21
16109: PUSH
16110: LD_INT 1
16112: PUSH
16113: EMPTY
16114: LIST
16115: LIST
16116: PUSH
16117: EMPTY
16118: LIST
16119: LIST
16120: PPUSH
16121: CALL_OW 69
16125: ST_TO_ADDR
// if not tmp then
16126: LD_VAR 0 2
16130: NOT
16131: IFFALSE 16135
// exit ;
16133: GO 16222
// un := tmp [ rand ( 1 , tmp ) ] ;
16135: LD_ADDR_VAR 0 1
16139: PUSH
16140: LD_VAR 0 2
16144: PUSH
16145: LD_INT 1
16147: PPUSH
16148: LD_VAR 0 2
16152: PPUSH
16153: CALL_OW 12
16157: ARRAY
16158: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16159: LD_VAR 0 1
16163: PPUSH
16164: LD_INT 0
16166: PPUSH
16167: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16171: LD_VAR 0 1
16175: PPUSH
16176: LD_OWVAR 3
16180: PUSH
16181: LD_VAR 0 1
16185: DIFF
16186: PPUSH
16187: LD_VAR 0 1
16191: PPUSH
16192: CALL_OW 74
16196: PPUSH
16197: CALL_OW 115
// wait ( 0 0$20 ) ;
16201: LD_INT 700
16203: PPUSH
16204: CALL_OW 67
// SetSide ( un , your_side ) ;
16208: LD_VAR 0 1
16212: PPUSH
16213: LD_OWVAR 2
16217: PPUSH
16218: CALL_OW 235
// end ;
16222: PPOPN 2
16224: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16225: LD_EXP 29
16229: PUSH
16230: LD_EXP 62
16234: AND
16235: IFFALSE 16341
16237: GO 16239
16239: DISABLE
16240: LD_INT 0
16242: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16243: LD_ADDR_VAR 0 1
16247: PUSH
16248: LD_INT 22
16250: PUSH
16251: LD_OWVAR 2
16255: PUSH
16256: EMPTY
16257: LIST
16258: LIST
16259: PUSH
16260: LD_INT 2
16262: PUSH
16263: LD_INT 30
16265: PUSH
16266: LD_INT 0
16268: PUSH
16269: EMPTY
16270: LIST
16271: LIST
16272: PUSH
16273: LD_INT 30
16275: PUSH
16276: LD_INT 1
16278: PUSH
16279: EMPTY
16280: LIST
16281: LIST
16282: PUSH
16283: EMPTY
16284: LIST
16285: LIST
16286: LIST
16287: PUSH
16288: EMPTY
16289: LIST
16290: LIST
16291: PPUSH
16292: CALL_OW 69
16296: ST_TO_ADDR
// if not depot then
16297: LD_VAR 0 1
16301: NOT
16302: IFFALSE 16306
// exit ;
16304: GO 16341
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16306: LD_VAR 0 1
16310: PUSH
16311: LD_INT 1
16313: ARRAY
16314: PPUSH
16315: CALL_OW 250
16319: PPUSH
16320: LD_VAR 0 1
16324: PUSH
16325: LD_INT 1
16327: ARRAY
16328: PPUSH
16329: CALL_OW 251
16333: PPUSH
16334: LD_INT 70
16336: PPUSH
16337: CALL_OW 495
// end ;
16341: PPOPN 1
16343: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16344: LD_EXP 29
16348: PUSH
16349: LD_EXP 63
16353: AND
16354: IFFALSE 16565
16356: GO 16358
16358: DISABLE
16359: LD_INT 0
16361: PPUSH
16362: PPUSH
16363: PPUSH
16364: PPUSH
16365: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16366: LD_ADDR_VAR 0 5
16370: PUSH
16371: LD_INT 22
16373: PUSH
16374: LD_OWVAR 2
16378: PUSH
16379: EMPTY
16380: LIST
16381: LIST
16382: PUSH
16383: LD_INT 21
16385: PUSH
16386: LD_INT 1
16388: PUSH
16389: EMPTY
16390: LIST
16391: LIST
16392: PUSH
16393: EMPTY
16394: LIST
16395: LIST
16396: PPUSH
16397: CALL_OW 69
16401: ST_TO_ADDR
// if not tmp then
16402: LD_VAR 0 5
16406: NOT
16407: IFFALSE 16411
// exit ;
16409: GO 16565
// for i in tmp do
16411: LD_ADDR_VAR 0 1
16415: PUSH
16416: LD_VAR 0 5
16420: PUSH
16421: FOR_IN
16422: IFFALSE 16563
// begin d := rand ( 0 , 5 ) ;
16424: LD_ADDR_VAR 0 4
16428: PUSH
16429: LD_INT 0
16431: PPUSH
16432: LD_INT 5
16434: PPUSH
16435: CALL_OW 12
16439: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16440: LD_ADDR_VAR 0 2
16444: PUSH
16445: LD_VAR 0 1
16449: PPUSH
16450: CALL_OW 250
16454: PPUSH
16455: LD_VAR 0 4
16459: PPUSH
16460: LD_INT 3
16462: PPUSH
16463: LD_INT 12
16465: PPUSH
16466: CALL_OW 12
16470: PPUSH
16471: CALL_OW 272
16475: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16476: LD_ADDR_VAR 0 3
16480: PUSH
16481: LD_VAR 0 1
16485: PPUSH
16486: CALL_OW 251
16490: PPUSH
16491: LD_VAR 0 4
16495: PPUSH
16496: LD_INT 3
16498: PPUSH
16499: LD_INT 12
16501: PPUSH
16502: CALL_OW 12
16506: PPUSH
16507: CALL_OW 273
16511: ST_TO_ADDR
// if ValidHex ( x , y ) then
16512: LD_VAR 0 2
16516: PPUSH
16517: LD_VAR 0 3
16521: PPUSH
16522: CALL_OW 488
16526: IFFALSE 16561
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16528: LD_VAR 0 1
16532: PPUSH
16533: LD_VAR 0 2
16537: PPUSH
16538: LD_VAR 0 3
16542: PPUSH
16543: LD_INT 3
16545: PPUSH
16546: LD_INT 6
16548: PPUSH
16549: CALL_OW 12
16553: PPUSH
16554: LD_INT 1
16556: PPUSH
16557: CALL_OW 483
// end ;
16561: GO 16421
16563: POP
16564: POP
// end ;
16565: PPOPN 5
16567: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16568: LD_EXP 29
16572: PUSH
16573: LD_EXP 64
16577: AND
16578: IFFALSE 16672
16580: GO 16582
16582: DISABLE
16583: LD_INT 0
16585: PPUSH
16586: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16587: LD_ADDR_VAR 0 2
16591: PUSH
16592: LD_INT 22
16594: PUSH
16595: LD_OWVAR 2
16599: PUSH
16600: EMPTY
16601: LIST
16602: LIST
16603: PUSH
16604: LD_INT 32
16606: PUSH
16607: LD_INT 1
16609: PUSH
16610: EMPTY
16611: LIST
16612: LIST
16613: PUSH
16614: LD_INT 21
16616: PUSH
16617: LD_INT 2
16619: PUSH
16620: EMPTY
16621: LIST
16622: LIST
16623: PUSH
16624: EMPTY
16625: LIST
16626: LIST
16627: LIST
16628: PPUSH
16629: CALL_OW 69
16633: ST_TO_ADDR
// if not tmp then
16634: LD_VAR 0 2
16638: NOT
16639: IFFALSE 16643
// exit ;
16641: GO 16672
// for i in tmp do
16643: LD_ADDR_VAR 0 1
16647: PUSH
16648: LD_VAR 0 2
16652: PUSH
16653: FOR_IN
16654: IFFALSE 16670
// SetFuel ( i , 0 ) ;
16656: LD_VAR 0 1
16660: PPUSH
16661: LD_INT 0
16663: PPUSH
16664: CALL_OW 240
16668: GO 16653
16670: POP
16671: POP
// end ;
16672: PPOPN 2
16674: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16675: LD_EXP 29
16679: PUSH
16680: LD_EXP 65
16684: AND
16685: IFFALSE 16751
16687: GO 16689
16689: DISABLE
16690: LD_INT 0
16692: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16693: LD_ADDR_VAR 0 1
16697: PUSH
16698: LD_INT 22
16700: PUSH
16701: LD_OWVAR 2
16705: PUSH
16706: EMPTY
16707: LIST
16708: LIST
16709: PUSH
16710: LD_INT 30
16712: PUSH
16713: LD_INT 29
16715: PUSH
16716: EMPTY
16717: LIST
16718: LIST
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: PPUSH
16724: CALL_OW 69
16728: ST_TO_ADDR
// if not tmp then
16729: LD_VAR 0 1
16733: NOT
16734: IFFALSE 16738
// exit ;
16736: GO 16751
// DestroyUnit ( tmp [ 1 ] ) ;
16738: LD_VAR 0 1
16742: PUSH
16743: LD_INT 1
16745: ARRAY
16746: PPUSH
16747: CALL_OW 65
// end ;
16751: PPOPN 1
16753: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16754: LD_EXP 29
16758: PUSH
16759: LD_EXP 67
16763: AND
16764: IFFALSE 16893
16766: GO 16768
16768: DISABLE
16769: LD_INT 0
16771: PPUSH
// begin uc_side := 0 ;
16772: LD_ADDR_OWVAR 20
16776: PUSH
16777: LD_INT 0
16779: ST_TO_ADDR
// uc_nation := nation_arabian ;
16780: LD_ADDR_OWVAR 21
16784: PUSH
16785: LD_INT 2
16787: ST_TO_ADDR
// hc_gallery :=  ;
16788: LD_ADDR_OWVAR 33
16792: PUSH
16793: LD_STRING 
16795: ST_TO_ADDR
// hc_name :=  ;
16796: LD_ADDR_OWVAR 26
16800: PUSH
16801: LD_STRING 
16803: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
16804: LD_INT 1
16806: PPUSH
16807: LD_INT 11
16809: PPUSH
16810: LD_INT 10
16812: PPUSH
16813: CALL_OW 380
// un := CreateHuman ;
16817: LD_ADDR_VAR 0 1
16821: PUSH
16822: CALL_OW 44
16826: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16827: LD_VAR 0 1
16831: PPUSH
16832: LD_INT 1
16834: PPUSH
16835: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16839: LD_INT 35
16841: PPUSH
16842: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16846: LD_VAR 0 1
16850: PPUSH
16851: LD_INT 22
16853: PUSH
16854: LD_OWVAR 2
16858: PUSH
16859: EMPTY
16860: LIST
16861: LIST
16862: PPUSH
16863: CALL_OW 69
16867: PPUSH
16868: LD_VAR 0 1
16872: PPUSH
16873: CALL_OW 74
16877: PPUSH
16878: CALL_OW 115
// until IsDead ( un ) ;
16882: LD_VAR 0 1
16886: PPUSH
16887: CALL_OW 301
16891: IFFALSE 16839
// end ;
16893: PPOPN 1
16895: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
16896: LD_EXP 29
16900: PUSH
16901: LD_EXP 69
16905: AND
16906: IFFALSE 16918
16908: GO 16910
16910: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
16911: LD_STRING earthquake(getX(game), 0, 32)
16913: PPUSH
16914: CALL_OW 559
16918: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
16919: LD_EXP 29
16923: PUSH
16924: LD_EXP 70
16928: AND
16929: IFFALSE 17020
16931: GO 16933
16933: DISABLE
16934: LD_INT 0
16936: PPUSH
// begin enable ;
16937: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
16938: LD_ADDR_VAR 0 1
16942: PUSH
16943: LD_INT 22
16945: PUSH
16946: LD_OWVAR 2
16950: PUSH
16951: EMPTY
16952: LIST
16953: LIST
16954: PUSH
16955: LD_INT 21
16957: PUSH
16958: LD_INT 2
16960: PUSH
16961: EMPTY
16962: LIST
16963: LIST
16964: PUSH
16965: LD_INT 33
16967: PUSH
16968: LD_INT 3
16970: PUSH
16971: EMPTY
16972: LIST
16973: LIST
16974: PUSH
16975: EMPTY
16976: LIST
16977: LIST
16978: LIST
16979: PPUSH
16980: CALL_OW 69
16984: ST_TO_ADDR
// if not tmp then
16985: LD_VAR 0 1
16989: NOT
16990: IFFALSE 16994
// exit ;
16992: GO 17020
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16994: LD_VAR 0 1
16998: PUSH
16999: LD_INT 1
17001: PPUSH
17002: LD_VAR 0 1
17006: PPUSH
17007: CALL_OW 12
17011: ARRAY
17012: PPUSH
17013: LD_INT 1
17015: PPUSH
17016: CALL_OW 234
// end ;
17020: PPOPN 1
17022: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17023: LD_EXP 29
17027: PUSH
17028: LD_EXP 71
17032: AND
17033: IFFALSE 17174
17035: GO 17037
17037: DISABLE
17038: LD_INT 0
17040: PPUSH
17041: PPUSH
17042: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17043: LD_ADDR_VAR 0 3
17047: PUSH
17048: LD_INT 22
17050: PUSH
17051: LD_OWVAR 2
17055: PUSH
17056: EMPTY
17057: LIST
17058: LIST
17059: PUSH
17060: LD_INT 25
17062: PUSH
17063: LD_INT 1
17065: PUSH
17066: EMPTY
17067: LIST
17068: LIST
17069: PUSH
17070: EMPTY
17071: LIST
17072: LIST
17073: PPUSH
17074: CALL_OW 69
17078: ST_TO_ADDR
// if not tmp then
17079: LD_VAR 0 3
17083: NOT
17084: IFFALSE 17088
// exit ;
17086: GO 17174
// un := tmp [ rand ( 1 , tmp ) ] ;
17088: LD_ADDR_VAR 0 2
17092: PUSH
17093: LD_VAR 0 3
17097: PUSH
17098: LD_INT 1
17100: PPUSH
17101: LD_VAR 0 3
17105: PPUSH
17106: CALL_OW 12
17110: ARRAY
17111: ST_TO_ADDR
// if Crawls ( un ) then
17112: LD_VAR 0 2
17116: PPUSH
17117: CALL_OW 318
17121: IFFALSE 17132
// ComWalk ( un ) ;
17123: LD_VAR 0 2
17127: PPUSH
17128: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17132: LD_VAR 0 2
17136: PPUSH
17137: LD_INT 9
17139: PPUSH
17140: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17144: LD_INT 28
17146: PPUSH
17147: LD_OWVAR 2
17151: PPUSH
17152: LD_INT 2
17154: PPUSH
17155: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17159: LD_INT 29
17161: PPUSH
17162: LD_OWVAR 2
17166: PPUSH
17167: LD_INT 2
17169: PPUSH
17170: CALL_OW 322
// end ;
17174: PPOPN 3
17176: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17177: LD_EXP 29
17181: PUSH
17182: LD_EXP 72
17186: AND
17187: IFFALSE 17298
17189: GO 17191
17191: DISABLE
17192: LD_INT 0
17194: PPUSH
17195: PPUSH
17196: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17197: LD_ADDR_VAR 0 3
17201: PUSH
17202: LD_INT 22
17204: PUSH
17205: LD_OWVAR 2
17209: PUSH
17210: EMPTY
17211: LIST
17212: LIST
17213: PUSH
17214: LD_INT 25
17216: PUSH
17217: LD_INT 1
17219: PUSH
17220: EMPTY
17221: LIST
17222: LIST
17223: PUSH
17224: EMPTY
17225: LIST
17226: LIST
17227: PPUSH
17228: CALL_OW 69
17232: ST_TO_ADDR
// if not tmp then
17233: LD_VAR 0 3
17237: NOT
17238: IFFALSE 17242
// exit ;
17240: GO 17298
// un := tmp [ rand ( 1 , tmp ) ] ;
17242: LD_ADDR_VAR 0 2
17246: PUSH
17247: LD_VAR 0 3
17251: PUSH
17252: LD_INT 1
17254: PPUSH
17255: LD_VAR 0 3
17259: PPUSH
17260: CALL_OW 12
17264: ARRAY
17265: ST_TO_ADDR
// if Crawls ( un ) then
17266: LD_VAR 0 2
17270: PPUSH
17271: CALL_OW 318
17275: IFFALSE 17286
// ComWalk ( un ) ;
17277: LD_VAR 0 2
17281: PPUSH
17282: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17286: LD_VAR 0 2
17290: PPUSH
17291: LD_INT 8
17293: PPUSH
17294: CALL_OW 336
// end ;
17298: PPOPN 3
17300: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17301: LD_EXP 29
17305: PUSH
17306: LD_EXP 73
17310: AND
17311: IFFALSE 17455
17313: GO 17315
17315: DISABLE
17316: LD_INT 0
17318: PPUSH
17319: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17320: LD_ADDR_VAR 0 2
17324: PUSH
17325: LD_INT 22
17327: PUSH
17328: LD_OWVAR 2
17332: PUSH
17333: EMPTY
17334: LIST
17335: LIST
17336: PUSH
17337: LD_INT 21
17339: PUSH
17340: LD_INT 2
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: PUSH
17347: LD_INT 2
17349: PUSH
17350: LD_INT 34
17352: PUSH
17353: LD_INT 12
17355: PUSH
17356: EMPTY
17357: LIST
17358: LIST
17359: PUSH
17360: LD_INT 34
17362: PUSH
17363: LD_INT 51
17365: PUSH
17366: EMPTY
17367: LIST
17368: LIST
17369: PUSH
17370: LD_INT 34
17372: PUSH
17373: LD_INT 32
17375: PUSH
17376: EMPTY
17377: LIST
17378: LIST
17379: PUSH
17380: EMPTY
17381: LIST
17382: LIST
17383: LIST
17384: LIST
17385: PUSH
17386: EMPTY
17387: LIST
17388: LIST
17389: LIST
17390: PPUSH
17391: CALL_OW 69
17395: ST_TO_ADDR
// if not tmp then
17396: LD_VAR 0 2
17400: NOT
17401: IFFALSE 17405
// exit ;
17403: GO 17455
// for i in tmp do
17405: LD_ADDR_VAR 0 1
17409: PUSH
17410: LD_VAR 0 2
17414: PUSH
17415: FOR_IN
17416: IFFALSE 17453
// if GetCargo ( i , mat_artifact ) = 0 then
17418: LD_VAR 0 1
17422: PPUSH
17423: LD_INT 4
17425: PPUSH
17426: CALL_OW 289
17430: PUSH
17431: LD_INT 0
17433: EQUAL
17434: IFFALSE 17451
// SetCargo ( i , mat_siberit , 100 ) ;
17436: LD_VAR 0 1
17440: PPUSH
17441: LD_INT 3
17443: PPUSH
17444: LD_INT 100
17446: PPUSH
17447: CALL_OW 290
17451: GO 17415
17453: POP
17454: POP
// end ;
17455: PPOPN 2
17457: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17458: LD_EXP 29
17462: PUSH
17463: LD_EXP 74
17467: AND
17468: IFFALSE 17651
17470: GO 17472
17472: DISABLE
17473: LD_INT 0
17475: PPUSH
17476: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17477: LD_ADDR_VAR 0 2
17481: PUSH
17482: LD_INT 22
17484: PUSH
17485: LD_OWVAR 2
17489: PUSH
17490: EMPTY
17491: LIST
17492: LIST
17493: PPUSH
17494: CALL_OW 69
17498: ST_TO_ADDR
// if not tmp then
17499: LD_VAR 0 2
17503: NOT
17504: IFFALSE 17508
// exit ;
17506: GO 17651
// for i := 1 to 2 do
17508: LD_ADDR_VAR 0 1
17512: PUSH
17513: DOUBLE
17514: LD_INT 1
17516: DEC
17517: ST_TO_ADDR
17518: LD_INT 2
17520: PUSH
17521: FOR_TO
17522: IFFALSE 17649
// begin uc_side := your_side ;
17524: LD_ADDR_OWVAR 20
17528: PUSH
17529: LD_OWVAR 2
17533: ST_TO_ADDR
// uc_nation := nation_american ;
17534: LD_ADDR_OWVAR 21
17538: PUSH
17539: LD_INT 1
17541: ST_TO_ADDR
// vc_chassis := us_morphling ;
17542: LD_ADDR_OWVAR 37
17546: PUSH
17547: LD_INT 5
17549: ST_TO_ADDR
// vc_engine := engine_siberite ;
17550: LD_ADDR_OWVAR 39
17554: PUSH
17555: LD_INT 3
17557: ST_TO_ADDR
// vc_control := control_computer ;
17558: LD_ADDR_OWVAR 38
17562: PUSH
17563: LD_INT 3
17565: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17566: LD_ADDR_OWVAR 40
17570: PUSH
17571: LD_INT 10
17573: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17574: LD_VAR 0 2
17578: PUSH
17579: LD_INT 1
17581: ARRAY
17582: PPUSH
17583: CALL_OW 310
17587: NOT
17588: IFFALSE 17635
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17590: CALL_OW 45
17594: PPUSH
17595: LD_VAR 0 2
17599: PUSH
17600: LD_INT 1
17602: ARRAY
17603: PPUSH
17604: CALL_OW 250
17608: PPUSH
17609: LD_VAR 0 2
17613: PUSH
17614: LD_INT 1
17616: ARRAY
17617: PPUSH
17618: CALL_OW 251
17622: PPUSH
17623: LD_INT 12
17625: PPUSH
17626: LD_INT 1
17628: PPUSH
17629: CALL_OW 50
17633: GO 17647
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17635: CALL_OW 45
17639: PPUSH
17640: LD_INT 1
17642: PPUSH
17643: CALL_OW 51
// end ;
17647: GO 17521
17649: POP
17650: POP
// end ;
17651: PPOPN 2
17653: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17654: LD_EXP 29
17658: PUSH
17659: LD_EXP 75
17663: AND
17664: IFFALSE 17886
17666: GO 17668
17668: DISABLE
17669: LD_INT 0
17671: PPUSH
17672: PPUSH
17673: PPUSH
17674: PPUSH
17675: PPUSH
17676: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17677: LD_ADDR_VAR 0 6
17681: PUSH
17682: LD_INT 22
17684: PUSH
17685: LD_OWVAR 2
17689: PUSH
17690: EMPTY
17691: LIST
17692: LIST
17693: PUSH
17694: LD_INT 21
17696: PUSH
17697: LD_INT 1
17699: PUSH
17700: EMPTY
17701: LIST
17702: LIST
17703: PUSH
17704: LD_INT 3
17706: PUSH
17707: LD_INT 23
17709: PUSH
17710: LD_INT 0
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: PUSH
17721: EMPTY
17722: LIST
17723: LIST
17724: LIST
17725: PPUSH
17726: CALL_OW 69
17730: ST_TO_ADDR
// if not tmp then
17731: LD_VAR 0 6
17735: NOT
17736: IFFALSE 17740
// exit ;
17738: GO 17886
// s1 := rand ( 1 , 4 ) ;
17740: LD_ADDR_VAR 0 2
17744: PUSH
17745: LD_INT 1
17747: PPUSH
17748: LD_INT 4
17750: PPUSH
17751: CALL_OW 12
17755: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17756: LD_ADDR_VAR 0 4
17760: PUSH
17761: LD_VAR 0 6
17765: PUSH
17766: LD_INT 1
17768: ARRAY
17769: PPUSH
17770: LD_VAR 0 2
17774: PPUSH
17775: CALL_OW 259
17779: ST_TO_ADDR
// if s1 = 1 then
17780: LD_VAR 0 2
17784: PUSH
17785: LD_INT 1
17787: EQUAL
17788: IFFALSE 17808
// s2 := rand ( 2 , 4 ) else
17790: LD_ADDR_VAR 0 3
17794: PUSH
17795: LD_INT 2
17797: PPUSH
17798: LD_INT 4
17800: PPUSH
17801: CALL_OW 12
17805: ST_TO_ADDR
17806: GO 17816
// s2 := 1 ;
17808: LD_ADDR_VAR 0 3
17812: PUSH
17813: LD_INT 1
17815: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
17816: LD_ADDR_VAR 0 5
17820: PUSH
17821: LD_VAR 0 6
17825: PUSH
17826: LD_INT 1
17828: ARRAY
17829: PPUSH
17830: LD_VAR 0 3
17834: PPUSH
17835: CALL_OW 259
17839: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
17840: LD_VAR 0 6
17844: PUSH
17845: LD_INT 1
17847: ARRAY
17848: PPUSH
17849: LD_VAR 0 2
17853: PPUSH
17854: LD_VAR 0 5
17858: PPUSH
17859: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
17863: LD_VAR 0 6
17867: PUSH
17868: LD_INT 1
17870: ARRAY
17871: PPUSH
17872: LD_VAR 0 3
17876: PPUSH
17877: LD_VAR 0 4
17881: PPUSH
17882: CALL_OW 237
// end ;
17886: PPOPN 6
17888: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
17889: LD_EXP 29
17893: PUSH
17894: LD_EXP 76
17898: AND
17899: IFFALSE 17978
17901: GO 17903
17903: DISABLE
17904: LD_INT 0
17906: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
17907: LD_ADDR_VAR 0 1
17911: PUSH
17912: LD_INT 22
17914: PUSH
17915: LD_OWVAR 2
17919: PUSH
17920: EMPTY
17921: LIST
17922: LIST
17923: PUSH
17924: LD_INT 30
17926: PUSH
17927: LD_INT 3
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: PUSH
17934: EMPTY
17935: LIST
17936: LIST
17937: PPUSH
17938: CALL_OW 69
17942: ST_TO_ADDR
// if not tmp then
17943: LD_VAR 0 1
17947: NOT
17948: IFFALSE 17952
// exit ;
17950: GO 17978
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17952: LD_VAR 0 1
17956: PUSH
17957: LD_INT 1
17959: PPUSH
17960: LD_VAR 0 1
17964: PPUSH
17965: CALL_OW 12
17969: ARRAY
17970: PPUSH
17971: LD_INT 1
17973: PPUSH
17974: CALL_OW 234
// end ;
17978: PPOPN 1
17980: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
17981: LD_EXP 29
17985: PUSH
17986: LD_EXP 77
17990: AND
17991: IFFALSE 18103
17993: GO 17995
17995: DISABLE
17996: LD_INT 0
17998: PPUSH
17999: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18000: LD_ADDR_VAR 0 2
18004: PUSH
18005: LD_INT 22
18007: PUSH
18008: LD_OWVAR 2
18012: PUSH
18013: EMPTY
18014: LIST
18015: LIST
18016: PUSH
18017: LD_INT 2
18019: PUSH
18020: LD_INT 30
18022: PUSH
18023: LD_INT 27
18025: PUSH
18026: EMPTY
18027: LIST
18028: LIST
18029: PUSH
18030: LD_INT 30
18032: PUSH
18033: LD_INT 26
18035: PUSH
18036: EMPTY
18037: LIST
18038: LIST
18039: PUSH
18040: LD_INT 30
18042: PUSH
18043: LD_INT 28
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: PUSH
18050: EMPTY
18051: LIST
18052: LIST
18053: LIST
18054: LIST
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: PPUSH
18060: CALL_OW 69
18064: ST_TO_ADDR
// if not tmp then
18065: LD_VAR 0 2
18069: NOT
18070: IFFALSE 18074
// exit ;
18072: GO 18103
// for i in tmp do
18074: LD_ADDR_VAR 0 1
18078: PUSH
18079: LD_VAR 0 2
18083: PUSH
18084: FOR_IN
18085: IFFALSE 18101
// SetLives ( i , 1 ) ;
18087: LD_VAR 0 1
18091: PPUSH
18092: LD_INT 1
18094: PPUSH
18095: CALL_OW 234
18099: GO 18084
18101: POP
18102: POP
// end ;
18103: PPOPN 2
18105: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18106: LD_EXP 29
18110: PUSH
18111: LD_EXP 78
18115: AND
18116: IFFALSE 18403
18118: GO 18120
18120: DISABLE
18121: LD_INT 0
18123: PPUSH
18124: PPUSH
18125: PPUSH
// begin i := rand ( 1 , 7 ) ;
18126: LD_ADDR_VAR 0 1
18130: PUSH
18131: LD_INT 1
18133: PPUSH
18134: LD_INT 7
18136: PPUSH
18137: CALL_OW 12
18141: ST_TO_ADDR
// case i of 1 :
18142: LD_VAR 0 1
18146: PUSH
18147: LD_INT 1
18149: DOUBLE
18150: EQUAL
18151: IFTRUE 18155
18153: GO 18165
18155: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18156: LD_STRING earthquake(getX(game), 0, 32)
18158: PPUSH
18159: CALL_OW 559
18163: GO 18403
18165: LD_INT 2
18167: DOUBLE
18168: EQUAL
18169: IFTRUE 18173
18171: GO 18187
18173: POP
// begin ToLua ( displayStucuk(); ) ;
18174: LD_STRING displayStucuk();
18176: PPUSH
18177: CALL_OW 559
// ResetFog ;
18181: CALL_OW 335
// end ; 3 :
18185: GO 18403
18187: LD_INT 3
18189: DOUBLE
18190: EQUAL
18191: IFTRUE 18195
18193: GO 18299
18195: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18196: LD_ADDR_VAR 0 2
18200: PUSH
18201: LD_INT 22
18203: PUSH
18204: LD_OWVAR 2
18208: PUSH
18209: EMPTY
18210: LIST
18211: LIST
18212: PUSH
18213: LD_INT 25
18215: PUSH
18216: LD_INT 1
18218: PUSH
18219: EMPTY
18220: LIST
18221: LIST
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PPUSH
18227: CALL_OW 69
18231: ST_TO_ADDR
// if not tmp then
18232: LD_VAR 0 2
18236: NOT
18237: IFFALSE 18241
// exit ;
18239: GO 18403
// un := tmp [ rand ( 1 , tmp ) ] ;
18241: LD_ADDR_VAR 0 3
18245: PUSH
18246: LD_VAR 0 2
18250: PUSH
18251: LD_INT 1
18253: PPUSH
18254: LD_VAR 0 2
18258: PPUSH
18259: CALL_OW 12
18263: ARRAY
18264: ST_TO_ADDR
// if Crawls ( un ) then
18265: LD_VAR 0 3
18269: PPUSH
18270: CALL_OW 318
18274: IFFALSE 18285
// ComWalk ( un ) ;
18276: LD_VAR 0 3
18280: PPUSH
18281: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18285: LD_VAR 0 3
18289: PPUSH
18290: LD_INT 8
18292: PPUSH
18293: CALL_OW 336
// end ; 4 :
18297: GO 18403
18299: LD_INT 4
18301: DOUBLE
18302: EQUAL
18303: IFTRUE 18307
18305: GO 18381
18307: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18308: LD_ADDR_VAR 0 2
18312: PUSH
18313: LD_INT 22
18315: PUSH
18316: LD_OWVAR 2
18320: PUSH
18321: EMPTY
18322: LIST
18323: LIST
18324: PUSH
18325: LD_INT 30
18327: PUSH
18328: LD_INT 29
18330: PUSH
18331: EMPTY
18332: LIST
18333: LIST
18334: PUSH
18335: EMPTY
18336: LIST
18337: LIST
18338: PPUSH
18339: CALL_OW 69
18343: ST_TO_ADDR
// if not tmp then
18344: LD_VAR 0 2
18348: NOT
18349: IFFALSE 18353
// exit ;
18351: GO 18403
// CenterNowOnUnits ( tmp [ 1 ] ) ;
18353: LD_VAR 0 2
18357: PUSH
18358: LD_INT 1
18360: ARRAY
18361: PPUSH
18362: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
18366: LD_VAR 0 2
18370: PUSH
18371: LD_INT 1
18373: ARRAY
18374: PPUSH
18375: CALL_OW 65
// end ; 5 .. 7 :
18379: GO 18403
18381: LD_INT 5
18383: DOUBLE
18384: GREATEREQUAL
18385: IFFALSE 18393
18387: LD_INT 7
18389: DOUBLE
18390: LESSEQUAL
18391: IFTRUE 18395
18393: GO 18402
18395: POP
// StreamSibBomb ; end ;
18396: CALL 14640 0 0
18400: GO 18403
18402: POP
// end ;
18403: PPOPN 3
18405: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18406: LD_EXP 29
18410: PUSH
18411: LD_EXP 79
18415: AND
18416: IFFALSE 18572
18418: GO 18420
18420: DISABLE
18421: LD_INT 0
18423: PPUSH
18424: PPUSH
18425: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18426: LD_ADDR_VAR 0 2
18430: PUSH
18431: LD_INT 81
18433: PUSH
18434: LD_OWVAR 2
18438: PUSH
18439: EMPTY
18440: LIST
18441: LIST
18442: PUSH
18443: LD_INT 2
18445: PUSH
18446: LD_INT 21
18448: PUSH
18449: LD_INT 1
18451: PUSH
18452: EMPTY
18453: LIST
18454: LIST
18455: PUSH
18456: LD_INT 21
18458: PUSH
18459: LD_INT 2
18461: PUSH
18462: EMPTY
18463: LIST
18464: LIST
18465: PUSH
18466: EMPTY
18467: LIST
18468: LIST
18469: LIST
18470: PUSH
18471: EMPTY
18472: LIST
18473: LIST
18474: PPUSH
18475: CALL_OW 69
18479: ST_TO_ADDR
// if not tmp then
18480: LD_VAR 0 2
18484: NOT
18485: IFFALSE 18489
// exit ;
18487: GO 18572
// p := 0 ;
18489: LD_ADDR_VAR 0 3
18493: PUSH
18494: LD_INT 0
18496: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18497: LD_INT 35
18499: PPUSH
18500: CALL_OW 67
// p := p + 1 ;
18504: LD_ADDR_VAR 0 3
18508: PUSH
18509: LD_VAR 0 3
18513: PUSH
18514: LD_INT 1
18516: PLUS
18517: ST_TO_ADDR
// for i in tmp do
18518: LD_ADDR_VAR 0 1
18522: PUSH
18523: LD_VAR 0 2
18527: PUSH
18528: FOR_IN
18529: IFFALSE 18560
// if GetLives ( i ) < 1000 then
18531: LD_VAR 0 1
18535: PPUSH
18536: CALL_OW 256
18540: PUSH
18541: LD_INT 1000
18543: LESS
18544: IFFALSE 18558
// SetLives ( i , 1000 ) ;
18546: LD_VAR 0 1
18550: PPUSH
18551: LD_INT 1000
18553: PPUSH
18554: CALL_OW 234
18558: GO 18528
18560: POP
18561: POP
// until p > 20 ;
18562: LD_VAR 0 3
18566: PUSH
18567: LD_INT 20
18569: GREATER
18570: IFFALSE 18497
// end ;
18572: PPOPN 3
18574: END
// every 0 0$1 trigger StreamModeActive and sTime do
18575: LD_EXP 29
18579: PUSH
18580: LD_EXP 80
18584: AND
18585: IFFALSE 18620
18587: GO 18589
18589: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18590: LD_INT 28
18592: PPUSH
18593: LD_OWVAR 2
18597: PPUSH
18598: LD_INT 2
18600: PPUSH
18601: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18605: LD_INT 30
18607: PPUSH
18608: LD_OWVAR 2
18612: PPUSH
18613: LD_INT 2
18615: PPUSH
18616: CALL_OW 322
// end ;
18620: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18621: LD_EXP 29
18625: PUSH
18626: LD_EXP 81
18630: AND
18631: IFFALSE 18752
18633: GO 18635
18635: DISABLE
18636: LD_INT 0
18638: PPUSH
18639: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18640: LD_ADDR_VAR 0 2
18644: PUSH
18645: LD_INT 22
18647: PUSH
18648: LD_OWVAR 2
18652: PUSH
18653: EMPTY
18654: LIST
18655: LIST
18656: PUSH
18657: LD_INT 21
18659: PUSH
18660: LD_INT 1
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: PUSH
18667: LD_INT 3
18669: PUSH
18670: LD_INT 23
18672: PUSH
18673: LD_INT 0
18675: PUSH
18676: EMPTY
18677: LIST
18678: LIST
18679: PUSH
18680: EMPTY
18681: LIST
18682: LIST
18683: PUSH
18684: EMPTY
18685: LIST
18686: LIST
18687: LIST
18688: PPUSH
18689: CALL_OW 69
18693: ST_TO_ADDR
// if not tmp then
18694: LD_VAR 0 2
18698: NOT
18699: IFFALSE 18703
// exit ;
18701: GO 18752
// for i in tmp do
18703: LD_ADDR_VAR 0 1
18707: PUSH
18708: LD_VAR 0 2
18712: PUSH
18713: FOR_IN
18714: IFFALSE 18750
// begin if Crawls ( i ) then
18716: LD_VAR 0 1
18720: PPUSH
18721: CALL_OW 318
18725: IFFALSE 18736
// ComWalk ( i ) ;
18727: LD_VAR 0 1
18731: PPUSH
18732: CALL_OW 138
// SetClass ( i , 2 ) ;
18736: LD_VAR 0 1
18740: PPUSH
18741: LD_INT 2
18743: PPUSH
18744: CALL_OW 336
// end ;
18748: GO 18713
18750: POP
18751: POP
// end ;
18752: PPOPN 2
18754: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18755: LD_EXP 29
18759: PUSH
18760: LD_EXP 82
18764: AND
18765: IFFALSE 19053
18767: GO 18769
18769: DISABLE
18770: LD_INT 0
18772: PPUSH
18773: PPUSH
18774: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
18775: LD_OWVAR 2
18779: PPUSH
18780: LD_INT 9
18782: PPUSH
18783: LD_INT 1
18785: PPUSH
18786: LD_INT 1
18788: PPUSH
18789: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
18793: LD_INT 9
18795: PPUSH
18796: LD_OWVAR 2
18800: PPUSH
18801: CALL_OW 343
// uc_side := 9 ;
18805: LD_ADDR_OWVAR 20
18809: PUSH
18810: LD_INT 9
18812: ST_TO_ADDR
// uc_nation := 2 ;
18813: LD_ADDR_OWVAR 21
18817: PUSH
18818: LD_INT 2
18820: ST_TO_ADDR
// hc_name := Dark Warrior ;
18821: LD_ADDR_OWVAR 26
18825: PUSH
18826: LD_STRING Dark Warrior
18828: ST_TO_ADDR
// hc_gallery :=  ;
18829: LD_ADDR_OWVAR 33
18833: PUSH
18834: LD_STRING 
18836: ST_TO_ADDR
// hc_noskilllimit := true ;
18837: LD_ADDR_OWVAR 76
18841: PUSH
18842: LD_INT 1
18844: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
18845: LD_ADDR_OWVAR 31
18849: PUSH
18850: LD_INT 30
18852: PUSH
18853: LD_INT 30
18855: PUSH
18856: LD_INT 30
18858: PUSH
18859: LD_INT 30
18861: PUSH
18862: EMPTY
18863: LIST
18864: LIST
18865: LIST
18866: LIST
18867: ST_TO_ADDR
// un := CreateHuman ;
18868: LD_ADDR_VAR 0 3
18872: PUSH
18873: CALL_OW 44
18877: ST_TO_ADDR
// hc_noskilllimit := false ;
18878: LD_ADDR_OWVAR 76
18882: PUSH
18883: LD_INT 0
18885: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18886: LD_VAR 0 3
18890: PPUSH
18891: LD_INT 1
18893: PPUSH
18894: CALL_OW 51
// ToLua ( playRanger() ) ;
18898: LD_STRING playRanger()
18900: PPUSH
18901: CALL_OW 559
// p := 0 ;
18905: LD_ADDR_VAR 0 2
18909: PUSH
18910: LD_INT 0
18912: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18913: LD_INT 35
18915: PPUSH
18916: CALL_OW 67
// p := p + 1 ;
18920: LD_ADDR_VAR 0 2
18924: PUSH
18925: LD_VAR 0 2
18929: PUSH
18930: LD_INT 1
18932: PLUS
18933: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
18934: LD_VAR 0 3
18938: PPUSH
18939: CALL_OW 256
18943: PUSH
18944: LD_INT 1000
18946: LESS
18947: IFFALSE 18961
// SetLives ( un , 1000 ) ;
18949: LD_VAR 0 3
18953: PPUSH
18954: LD_INT 1000
18956: PPUSH
18957: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
18961: LD_VAR 0 3
18965: PPUSH
18966: LD_INT 81
18968: PUSH
18969: LD_OWVAR 2
18973: PUSH
18974: EMPTY
18975: LIST
18976: LIST
18977: PUSH
18978: LD_INT 91
18980: PUSH
18981: LD_VAR 0 3
18985: PUSH
18986: LD_INT 30
18988: PUSH
18989: EMPTY
18990: LIST
18991: LIST
18992: LIST
18993: PUSH
18994: EMPTY
18995: LIST
18996: LIST
18997: PPUSH
18998: CALL_OW 69
19002: PPUSH
19003: LD_VAR 0 3
19007: PPUSH
19008: CALL_OW 74
19012: PPUSH
19013: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
19017: LD_VAR 0 2
19021: PUSH
19022: LD_INT 80
19024: GREATER
19025: PUSH
19026: LD_VAR 0 3
19030: PPUSH
19031: CALL_OW 301
19035: OR
19036: IFFALSE 18913
// if un then
19038: LD_VAR 0 3
19042: IFFALSE 19053
// RemoveUnit ( un ) ;
19044: LD_VAR 0 3
19048: PPUSH
19049: CALL_OW 64
// end ;
19053: PPOPN 3
19055: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
19056: LD_EXP 83
19060: IFFALSE 19176
19062: GO 19064
19064: DISABLE
19065: LD_INT 0
19067: PPUSH
19068: PPUSH
19069: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19070: LD_ADDR_VAR 0 2
19074: PUSH
19075: LD_INT 81
19077: PUSH
19078: LD_OWVAR 2
19082: PUSH
19083: EMPTY
19084: LIST
19085: LIST
19086: PUSH
19087: LD_INT 21
19089: PUSH
19090: LD_INT 1
19092: PUSH
19093: EMPTY
19094: LIST
19095: LIST
19096: PUSH
19097: EMPTY
19098: LIST
19099: LIST
19100: PPUSH
19101: CALL_OW 69
19105: ST_TO_ADDR
// ToLua ( playComputer() ) ;
19106: LD_STRING playComputer()
19108: PPUSH
19109: CALL_OW 559
// if not tmp then
19113: LD_VAR 0 2
19117: NOT
19118: IFFALSE 19122
// exit ;
19120: GO 19176
// for i in tmp do
19122: LD_ADDR_VAR 0 1
19126: PUSH
19127: LD_VAR 0 2
19131: PUSH
19132: FOR_IN
19133: IFFALSE 19174
// for j := 1 to 4 do
19135: LD_ADDR_VAR 0 3
19139: PUSH
19140: DOUBLE
19141: LD_INT 1
19143: DEC
19144: ST_TO_ADDR
19145: LD_INT 4
19147: PUSH
19148: FOR_TO
19149: IFFALSE 19170
// SetSkill ( i , j , 10 ) ;
19151: LD_VAR 0 1
19155: PPUSH
19156: LD_VAR 0 3
19160: PPUSH
19161: LD_INT 10
19163: PPUSH
19164: CALL_OW 237
19168: GO 19148
19170: POP
19171: POP
19172: GO 19132
19174: POP
19175: POP
// end ;
19176: PPOPN 3
19178: END
// every 0 0$1 trigger s30 do var i , tmp ;
19179: LD_EXP 84
19183: IFFALSE 19252
19185: GO 19187
19187: DISABLE
19188: LD_INT 0
19190: PPUSH
19191: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19192: LD_ADDR_VAR 0 2
19196: PUSH
19197: LD_INT 22
19199: PUSH
19200: LD_OWVAR 2
19204: PUSH
19205: EMPTY
19206: LIST
19207: LIST
19208: PPUSH
19209: CALL_OW 69
19213: ST_TO_ADDR
// if not tmp then
19214: LD_VAR 0 2
19218: NOT
19219: IFFALSE 19223
// exit ;
19221: GO 19252
// for i in tmp do
19223: LD_ADDR_VAR 0 1
19227: PUSH
19228: LD_VAR 0 2
19232: PUSH
19233: FOR_IN
19234: IFFALSE 19250
// SetLives ( i , 300 ) ;
19236: LD_VAR 0 1
19240: PPUSH
19241: LD_INT 300
19243: PPUSH
19244: CALL_OW 234
19248: GO 19233
19250: POP
19251: POP
// end ;
19252: PPOPN 2
19254: END
// every 0 0$1 trigger s60 do var i , tmp ;
19255: LD_EXP 85
19259: IFFALSE 19328
19261: GO 19263
19263: DISABLE
19264: LD_INT 0
19266: PPUSH
19267: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19268: LD_ADDR_VAR 0 2
19272: PUSH
19273: LD_INT 22
19275: PUSH
19276: LD_OWVAR 2
19280: PUSH
19281: EMPTY
19282: LIST
19283: LIST
19284: PPUSH
19285: CALL_OW 69
19289: ST_TO_ADDR
// if not tmp then
19290: LD_VAR 0 2
19294: NOT
19295: IFFALSE 19299
// exit ;
19297: GO 19328
// for i in tmp do
19299: LD_ADDR_VAR 0 1
19303: PUSH
19304: LD_VAR 0 2
19308: PUSH
19309: FOR_IN
19310: IFFALSE 19326
// SetLives ( i , 600 ) ;
19312: LD_VAR 0 1
19316: PPUSH
19317: LD_INT 600
19319: PPUSH
19320: CALL_OW 234
19324: GO 19309
19326: POP
19327: POP
// end ;
19328: PPOPN 2
19330: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19331: LD_INT 0
19333: PPUSH
// case cmd of 301 :
19334: LD_VAR 0 1
19338: PUSH
19339: LD_INT 301
19341: DOUBLE
19342: EQUAL
19343: IFTRUE 19347
19345: GO 19379
19347: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
19348: LD_VAR 0 6
19352: PPUSH
19353: LD_VAR 0 7
19357: PPUSH
19358: LD_VAR 0 8
19362: PPUSH
19363: LD_VAR 0 4
19367: PPUSH
19368: LD_VAR 0 5
19372: PPUSH
19373: CALL 20588 0 5
19377: GO 19500
19379: LD_INT 302
19381: DOUBLE
19382: EQUAL
19383: IFTRUE 19387
19385: GO 19424
19387: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
19388: LD_VAR 0 6
19392: PPUSH
19393: LD_VAR 0 7
19397: PPUSH
19398: LD_VAR 0 8
19402: PPUSH
19403: LD_VAR 0 9
19407: PPUSH
19408: LD_VAR 0 4
19412: PPUSH
19413: LD_VAR 0 5
19417: PPUSH
19418: CALL 20679 0 6
19422: GO 19500
19424: LD_INT 303
19426: DOUBLE
19427: EQUAL
19428: IFTRUE 19432
19430: GO 19469
19432: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
19433: LD_VAR 0 6
19437: PPUSH
19438: LD_VAR 0 7
19442: PPUSH
19443: LD_VAR 0 8
19447: PPUSH
19448: LD_VAR 0 9
19452: PPUSH
19453: LD_VAR 0 4
19457: PPUSH
19458: LD_VAR 0 5
19462: PPUSH
19463: CALL 19505 0 6
19467: GO 19500
19469: LD_INT 304
19471: DOUBLE
19472: EQUAL
19473: IFTRUE 19477
19475: GO 19499
19477: POP
// hHackTeleport ( unit , x , y ) ; end ;
19478: LD_VAR 0 2
19482: PPUSH
19483: LD_VAR 0 4
19487: PPUSH
19488: LD_VAR 0 5
19492: PPUSH
19493: CALL 21272 0 3
19497: GO 19500
19499: POP
// end ;
19500: LD_VAR 0 12
19504: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
19505: LD_INT 0
19507: PPUSH
19508: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
19509: LD_VAR 0 1
19513: PUSH
19514: LD_INT 1
19516: LESS
19517: PUSH
19518: LD_VAR 0 1
19522: PUSH
19523: LD_INT 3
19525: GREATER
19526: OR
19527: PUSH
19528: LD_VAR 0 5
19532: PPUSH
19533: LD_VAR 0 6
19537: PPUSH
19538: CALL_OW 428
19542: OR
19543: IFFALSE 19547
// exit ;
19545: GO 20275
// uc_side := your_side ;
19547: LD_ADDR_OWVAR 20
19551: PUSH
19552: LD_OWVAR 2
19556: ST_TO_ADDR
// uc_nation := nation ;
19557: LD_ADDR_OWVAR 21
19561: PUSH
19562: LD_VAR 0 1
19566: ST_TO_ADDR
// bc_level = 1 ;
19567: LD_ADDR_OWVAR 43
19571: PUSH
19572: LD_INT 1
19574: ST_TO_ADDR
// case btype of 1 :
19575: LD_VAR 0 2
19579: PUSH
19580: LD_INT 1
19582: DOUBLE
19583: EQUAL
19584: IFTRUE 19588
19586: GO 19599
19588: POP
// bc_type := b_depot ; 2 :
19589: LD_ADDR_OWVAR 42
19593: PUSH
19594: LD_INT 0
19596: ST_TO_ADDR
19597: GO 20219
19599: LD_INT 2
19601: DOUBLE
19602: EQUAL
19603: IFTRUE 19607
19605: GO 19618
19607: POP
// bc_type := b_warehouse ; 3 :
19608: LD_ADDR_OWVAR 42
19612: PUSH
19613: LD_INT 1
19615: ST_TO_ADDR
19616: GO 20219
19618: LD_INT 3
19620: DOUBLE
19621: EQUAL
19622: IFTRUE 19626
19624: GO 19637
19626: POP
// bc_type := b_lab ; 4 .. 9 :
19627: LD_ADDR_OWVAR 42
19631: PUSH
19632: LD_INT 6
19634: ST_TO_ADDR
19635: GO 20219
19637: LD_INT 4
19639: DOUBLE
19640: GREATEREQUAL
19641: IFFALSE 19649
19643: LD_INT 9
19645: DOUBLE
19646: LESSEQUAL
19647: IFTRUE 19651
19649: GO 19711
19651: POP
// begin bc_type := b_lab_half ;
19652: LD_ADDR_OWVAR 42
19656: PUSH
19657: LD_INT 7
19659: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
19660: LD_ADDR_OWVAR 44
19664: PUSH
19665: LD_INT 10
19667: PUSH
19668: LD_INT 11
19670: PUSH
19671: LD_INT 12
19673: PUSH
19674: LD_INT 15
19676: PUSH
19677: LD_INT 14
19679: PUSH
19680: LD_INT 13
19682: PUSH
19683: EMPTY
19684: LIST
19685: LIST
19686: LIST
19687: LIST
19688: LIST
19689: LIST
19690: PUSH
19691: LD_VAR 0 2
19695: PUSH
19696: LD_INT 3
19698: MINUS
19699: ARRAY
19700: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
19701: LD_ADDR_OWVAR 45
19705: PUSH
19706: LD_INT 9
19708: ST_TO_ADDR
// end ; 10 .. 13 :
19709: GO 20219
19711: LD_INT 10
19713: DOUBLE
19714: GREATEREQUAL
19715: IFFALSE 19723
19717: LD_INT 13
19719: DOUBLE
19720: LESSEQUAL
19721: IFTRUE 19725
19723: GO 19802
19725: POP
// begin bc_type := b_lab_full ;
19726: LD_ADDR_OWVAR 42
19730: PUSH
19731: LD_INT 8
19733: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
19734: LD_ADDR_OWVAR 44
19738: PUSH
19739: LD_INT 10
19741: PUSH
19742: LD_INT 12
19744: PUSH
19745: LD_INT 14
19747: PUSH
19748: LD_INT 13
19750: PUSH
19751: EMPTY
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: PUSH
19757: LD_VAR 0 2
19761: PUSH
19762: LD_INT 9
19764: MINUS
19765: ARRAY
19766: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
19767: LD_ADDR_OWVAR 45
19771: PUSH
19772: LD_INT 11
19774: PUSH
19775: LD_INT 15
19777: PUSH
19778: LD_INT 12
19780: PUSH
19781: LD_INT 15
19783: PUSH
19784: EMPTY
19785: LIST
19786: LIST
19787: LIST
19788: LIST
19789: PUSH
19790: LD_VAR 0 2
19794: PUSH
19795: LD_INT 9
19797: MINUS
19798: ARRAY
19799: ST_TO_ADDR
// end ; 14 :
19800: GO 20219
19802: LD_INT 14
19804: DOUBLE
19805: EQUAL
19806: IFTRUE 19810
19808: GO 19821
19810: POP
// bc_type := b_workshop ; 15 :
19811: LD_ADDR_OWVAR 42
19815: PUSH
19816: LD_INT 2
19818: ST_TO_ADDR
19819: GO 20219
19821: LD_INT 15
19823: DOUBLE
19824: EQUAL
19825: IFTRUE 19829
19827: GO 19840
19829: POP
// bc_type := b_factory ; 16 :
19830: LD_ADDR_OWVAR 42
19834: PUSH
19835: LD_INT 3
19837: ST_TO_ADDR
19838: GO 20219
19840: LD_INT 16
19842: DOUBLE
19843: EQUAL
19844: IFTRUE 19848
19846: GO 19859
19848: POP
// bc_type := b_ext_gun ; 17 :
19849: LD_ADDR_OWVAR 42
19853: PUSH
19854: LD_INT 17
19856: ST_TO_ADDR
19857: GO 20219
19859: LD_INT 17
19861: DOUBLE
19862: EQUAL
19863: IFTRUE 19867
19865: GO 19895
19867: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
19868: LD_ADDR_OWVAR 42
19872: PUSH
19873: LD_INT 19
19875: PUSH
19876: LD_INT 23
19878: PUSH
19879: LD_INT 19
19881: PUSH
19882: EMPTY
19883: LIST
19884: LIST
19885: LIST
19886: PUSH
19887: LD_VAR 0 1
19891: ARRAY
19892: ST_TO_ADDR
19893: GO 20219
19895: LD_INT 18
19897: DOUBLE
19898: EQUAL
19899: IFTRUE 19903
19901: GO 19914
19903: POP
// bc_type := b_ext_radar ; 19 :
19904: LD_ADDR_OWVAR 42
19908: PUSH
19909: LD_INT 20
19911: ST_TO_ADDR
19912: GO 20219
19914: LD_INT 19
19916: DOUBLE
19917: EQUAL
19918: IFTRUE 19922
19920: GO 19933
19922: POP
// bc_type := b_ext_radio ; 20 :
19923: LD_ADDR_OWVAR 42
19927: PUSH
19928: LD_INT 22
19930: ST_TO_ADDR
19931: GO 20219
19933: LD_INT 20
19935: DOUBLE
19936: EQUAL
19937: IFTRUE 19941
19939: GO 19952
19941: POP
// bc_type := b_ext_siberium ; 21 :
19942: LD_ADDR_OWVAR 42
19946: PUSH
19947: LD_INT 21
19949: ST_TO_ADDR
19950: GO 20219
19952: LD_INT 21
19954: DOUBLE
19955: EQUAL
19956: IFTRUE 19960
19958: GO 19971
19960: POP
// bc_type := b_ext_computer ; 22 :
19961: LD_ADDR_OWVAR 42
19965: PUSH
19966: LD_INT 24
19968: ST_TO_ADDR
19969: GO 20219
19971: LD_INT 22
19973: DOUBLE
19974: EQUAL
19975: IFTRUE 19979
19977: GO 19990
19979: POP
// bc_type := b_ext_track ; 23 :
19980: LD_ADDR_OWVAR 42
19984: PUSH
19985: LD_INT 16
19987: ST_TO_ADDR
19988: GO 20219
19990: LD_INT 23
19992: DOUBLE
19993: EQUAL
19994: IFTRUE 19998
19996: GO 20009
19998: POP
// bc_type := b_ext_laser ; 24 :
19999: LD_ADDR_OWVAR 42
20003: PUSH
20004: LD_INT 25
20006: ST_TO_ADDR
20007: GO 20219
20009: LD_INT 24
20011: DOUBLE
20012: EQUAL
20013: IFTRUE 20017
20015: GO 20028
20017: POP
// bc_type := b_control_tower ; 25 :
20018: LD_ADDR_OWVAR 42
20022: PUSH
20023: LD_INT 36
20025: ST_TO_ADDR
20026: GO 20219
20028: LD_INT 25
20030: DOUBLE
20031: EQUAL
20032: IFTRUE 20036
20034: GO 20047
20036: POP
// bc_type := b_breastwork ; 26 :
20037: LD_ADDR_OWVAR 42
20041: PUSH
20042: LD_INT 31
20044: ST_TO_ADDR
20045: GO 20219
20047: LD_INT 26
20049: DOUBLE
20050: EQUAL
20051: IFTRUE 20055
20053: GO 20066
20055: POP
// bc_type := b_bunker ; 27 :
20056: LD_ADDR_OWVAR 42
20060: PUSH
20061: LD_INT 32
20063: ST_TO_ADDR
20064: GO 20219
20066: LD_INT 27
20068: DOUBLE
20069: EQUAL
20070: IFTRUE 20074
20072: GO 20085
20074: POP
// bc_type := b_turret ; 28 :
20075: LD_ADDR_OWVAR 42
20079: PUSH
20080: LD_INT 33
20082: ST_TO_ADDR
20083: GO 20219
20085: LD_INT 28
20087: DOUBLE
20088: EQUAL
20089: IFTRUE 20093
20091: GO 20104
20093: POP
// bc_type := b_armoury ; 29 :
20094: LD_ADDR_OWVAR 42
20098: PUSH
20099: LD_INT 4
20101: ST_TO_ADDR
20102: GO 20219
20104: LD_INT 29
20106: DOUBLE
20107: EQUAL
20108: IFTRUE 20112
20110: GO 20123
20112: POP
// bc_type := b_barracks ; 30 :
20113: LD_ADDR_OWVAR 42
20117: PUSH
20118: LD_INT 5
20120: ST_TO_ADDR
20121: GO 20219
20123: LD_INT 30
20125: DOUBLE
20126: EQUAL
20127: IFTRUE 20131
20129: GO 20142
20131: POP
// bc_type := b_solar_power ; 31 :
20132: LD_ADDR_OWVAR 42
20136: PUSH
20137: LD_INT 27
20139: ST_TO_ADDR
20140: GO 20219
20142: LD_INT 31
20144: DOUBLE
20145: EQUAL
20146: IFTRUE 20150
20148: GO 20161
20150: POP
// bc_type := b_oil_power ; 32 :
20151: LD_ADDR_OWVAR 42
20155: PUSH
20156: LD_INT 26
20158: ST_TO_ADDR
20159: GO 20219
20161: LD_INT 32
20163: DOUBLE
20164: EQUAL
20165: IFTRUE 20169
20167: GO 20180
20169: POP
// bc_type := b_siberite_power ; 33 :
20170: LD_ADDR_OWVAR 42
20174: PUSH
20175: LD_INT 28
20177: ST_TO_ADDR
20178: GO 20219
20180: LD_INT 33
20182: DOUBLE
20183: EQUAL
20184: IFTRUE 20188
20186: GO 20199
20188: POP
// bc_type := b_oil_mine ; 34 :
20189: LD_ADDR_OWVAR 42
20193: PUSH
20194: LD_INT 29
20196: ST_TO_ADDR
20197: GO 20219
20199: LD_INT 34
20201: DOUBLE
20202: EQUAL
20203: IFTRUE 20207
20205: GO 20218
20207: POP
// bc_type := b_siberite_mine ; end ;
20208: LD_ADDR_OWVAR 42
20212: PUSH
20213: LD_INT 30
20215: ST_TO_ADDR
20216: GO 20219
20218: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
20219: LD_ADDR_VAR 0 8
20223: PUSH
20224: LD_VAR 0 5
20228: PPUSH
20229: LD_VAR 0 6
20233: PPUSH
20234: LD_VAR 0 3
20238: PPUSH
20239: CALL_OW 47
20243: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
20244: LD_OWVAR 42
20248: PUSH
20249: LD_INT 32
20251: PUSH
20252: LD_INT 33
20254: PUSH
20255: EMPTY
20256: LIST
20257: LIST
20258: IN
20259: IFFALSE 20275
// PlaceWeaponTurret ( b , weapon ) ;
20261: LD_VAR 0 8
20265: PPUSH
20266: LD_VAR 0 4
20270: PPUSH
20271: CALL_OW 431
// end ;
20275: LD_VAR 0 7
20279: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
20280: LD_INT 0
20282: PPUSH
20283: PPUSH
20284: PPUSH
20285: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20286: LD_ADDR_VAR 0 4
20290: PUSH
20291: LD_INT 22
20293: PUSH
20294: LD_OWVAR 2
20298: PUSH
20299: EMPTY
20300: LIST
20301: LIST
20302: PUSH
20303: LD_INT 2
20305: PUSH
20306: LD_INT 30
20308: PUSH
20309: LD_INT 0
20311: PUSH
20312: EMPTY
20313: LIST
20314: LIST
20315: PUSH
20316: LD_INT 30
20318: PUSH
20319: LD_INT 1
20321: PUSH
20322: EMPTY
20323: LIST
20324: LIST
20325: PUSH
20326: EMPTY
20327: LIST
20328: LIST
20329: LIST
20330: PUSH
20331: EMPTY
20332: LIST
20333: LIST
20334: PPUSH
20335: CALL_OW 69
20339: ST_TO_ADDR
// if not tmp then
20340: LD_VAR 0 4
20344: NOT
20345: IFFALSE 20349
// exit ;
20347: GO 20408
// for i in tmp do
20349: LD_ADDR_VAR 0 2
20353: PUSH
20354: LD_VAR 0 4
20358: PUSH
20359: FOR_IN
20360: IFFALSE 20406
// for j = 1 to 3 do
20362: LD_ADDR_VAR 0 3
20366: PUSH
20367: DOUBLE
20368: LD_INT 1
20370: DEC
20371: ST_TO_ADDR
20372: LD_INT 3
20374: PUSH
20375: FOR_TO
20376: IFFALSE 20402
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
20378: LD_VAR 0 2
20382: PPUSH
20383: CALL_OW 274
20387: PPUSH
20388: LD_VAR 0 3
20392: PPUSH
20393: LD_INT 99999
20395: PPUSH
20396: CALL_OW 277
20400: GO 20375
20402: POP
20403: POP
20404: GO 20359
20406: POP
20407: POP
// end ;
20408: LD_VAR 0 1
20412: RET
// export function hHackSetLevel10 ; var i , j ; begin
20413: LD_INT 0
20415: PPUSH
20416: PPUSH
20417: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20418: LD_ADDR_VAR 0 2
20422: PUSH
20423: LD_INT 21
20425: PUSH
20426: LD_INT 1
20428: PUSH
20429: EMPTY
20430: LIST
20431: LIST
20432: PPUSH
20433: CALL_OW 69
20437: PUSH
20438: FOR_IN
20439: IFFALSE 20491
// if IsSelected ( i ) then
20441: LD_VAR 0 2
20445: PPUSH
20446: CALL_OW 306
20450: IFFALSE 20489
// begin for j := 1 to 4 do
20452: LD_ADDR_VAR 0 3
20456: PUSH
20457: DOUBLE
20458: LD_INT 1
20460: DEC
20461: ST_TO_ADDR
20462: LD_INT 4
20464: PUSH
20465: FOR_TO
20466: IFFALSE 20487
// SetSkill ( i , j , 10 ) ;
20468: LD_VAR 0 2
20472: PPUSH
20473: LD_VAR 0 3
20477: PPUSH
20478: LD_INT 10
20480: PPUSH
20481: CALL_OW 237
20485: GO 20465
20487: POP
20488: POP
// end ;
20489: GO 20438
20491: POP
20492: POP
// end ;
20493: LD_VAR 0 1
20497: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
20498: LD_INT 0
20500: PPUSH
20501: PPUSH
20502: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
20503: LD_ADDR_VAR 0 2
20507: PUSH
20508: LD_INT 22
20510: PUSH
20511: LD_OWVAR 2
20515: PUSH
20516: EMPTY
20517: LIST
20518: LIST
20519: PUSH
20520: LD_INT 21
20522: PUSH
20523: LD_INT 1
20525: PUSH
20526: EMPTY
20527: LIST
20528: LIST
20529: PUSH
20530: EMPTY
20531: LIST
20532: LIST
20533: PPUSH
20534: CALL_OW 69
20538: PUSH
20539: FOR_IN
20540: IFFALSE 20581
// begin for j := 1 to 4 do
20542: LD_ADDR_VAR 0 3
20546: PUSH
20547: DOUBLE
20548: LD_INT 1
20550: DEC
20551: ST_TO_ADDR
20552: LD_INT 4
20554: PUSH
20555: FOR_TO
20556: IFFALSE 20577
// SetSkill ( i , j , 10 ) ;
20558: LD_VAR 0 2
20562: PPUSH
20563: LD_VAR 0 3
20567: PPUSH
20568: LD_INT 10
20570: PPUSH
20571: CALL_OW 237
20575: GO 20555
20577: POP
20578: POP
// end ;
20579: GO 20539
20581: POP
20582: POP
// end ;
20583: LD_VAR 0 1
20587: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
20588: LD_INT 0
20590: PPUSH
// uc_side := your_side ;
20591: LD_ADDR_OWVAR 20
20595: PUSH
20596: LD_OWVAR 2
20600: ST_TO_ADDR
// uc_nation := nation ;
20601: LD_ADDR_OWVAR 21
20605: PUSH
20606: LD_VAR 0 1
20610: ST_TO_ADDR
// InitHc ;
20611: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
20615: LD_INT 0
20617: PPUSH
20618: LD_VAR 0 2
20622: PPUSH
20623: LD_VAR 0 3
20627: PPUSH
20628: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
20632: LD_VAR 0 4
20636: PPUSH
20637: LD_VAR 0 5
20641: PPUSH
20642: CALL_OW 428
20646: PUSH
20647: LD_INT 0
20649: EQUAL
20650: IFFALSE 20674
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
20652: CALL_OW 44
20656: PPUSH
20657: LD_VAR 0 4
20661: PPUSH
20662: LD_VAR 0 5
20666: PPUSH
20667: LD_INT 1
20669: PPUSH
20670: CALL_OW 48
// end ;
20674: LD_VAR 0 6
20678: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
20679: LD_INT 0
20681: PPUSH
20682: PPUSH
// uc_side := your_side ;
20683: LD_ADDR_OWVAR 20
20687: PUSH
20688: LD_OWVAR 2
20692: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
20693: LD_VAR 0 1
20697: PUSH
20698: LD_INT 1
20700: PUSH
20701: LD_INT 2
20703: PUSH
20704: LD_INT 3
20706: PUSH
20707: LD_INT 4
20709: PUSH
20710: LD_INT 5
20712: PUSH
20713: EMPTY
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: IN
20720: IFFALSE 20732
// uc_nation := nation_american else
20722: LD_ADDR_OWVAR 21
20726: PUSH
20727: LD_INT 1
20729: ST_TO_ADDR
20730: GO 20775
// if chassis in [ 11 , 12 , 13 , 14 ] then
20732: LD_VAR 0 1
20736: PUSH
20737: LD_INT 11
20739: PUSH
20740: LD_INT 12
20742: PUSH
20743: LD_INT 13
20745: PUSH
20746: LD_INT 14
20748: PUSH
20749: EMPTY
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: IN
20755: IFFALSE 20767
// uc_nation := nation_arabian else
20757: LD_ADDR_OWVAR 21
20761: PUSH
20762: LD_INT 2
20764: ST_TO_ADDR
20765: GO 20775
// uc_nation := nation_russian ;
20767: LD_ADDR_OWVAR 21
20771: PUSH
20772: LD_INT 3
20774: ST_TO_ADDR
// vc_chassis := chassis ;
20775: LD_ADDR_OWVAR 37
20779: PUSH
20780: LD_VAR 0 1
20784: ST_TO_ADDR
// vc_engine := engine ;
20785: LD_ADDR_OWVAR 39
20789: PUSH
20790: LD_VAR 0 2
20794: ST_TO_ADDR
// vc_control := control ;
20795: LD_ADDR_OWVAR 38
20799: PUSH
20800: LD_VAR 0 3
20804: ST_TO_ADDR
// vc_weapon := weapon ;
20805: LD_ADDR_OWVAR 40
20809: PUSH
20810: LD_VAR 0 4
20814: ST_TO_ADDR
// un := CreateVehicle ;
20815: LD_ADDR_VAR 0 8
20819: PUSH
20820: CALL_OW 45
20824: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
20825: LD_VAR 0 8
20829: PPUSH
20830: LD_INT 0
20832: PPUSH
20833: LD_INT 5
20835: PPUSH
20836: CALL_OW 12
20840: PPUSH
20841: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
20845: LD_VAR 0 8
20849: PPUSH
20850: LD_VAR 0 5
20854: PPUSH
20855: LD_VAR 0 6
20859: PPUSH
20860: LD_INT 1
20862: PPUSH
20863: CALL_OW 48
// end ;
20867: LD_VAR 0 7
20871: RET
// export hInvincible ; every 1 do
20872: GO 20874
20874: DISABLE
// hInvincible := [ ] ;
20875: LD_ADDR_EXP 86
20879: PUSH
20880: EMPTY
20881: ST_TO_ADDR
20882: END
// every 10 do var i ;
20883: GO 20885
20885: DISABLE
20886: LD_INT 0
20888: PPUSH
// begin enable ;
20889: ENABLE
// if not hInvincible then
20890: LD_EXP 86
20894: NOT
20895: IFFALSE 20899
// exit ;
20897: GO 20943
// for i in hInvincible do
20899: LD_ADDR_VAR 0 1
20903: PUSH
20904: LD_EXP 86
20908: PUSH
20909: FOR_IN
20910: IFFALSE 20941
// if GetLives ( i ) < 1000 then
20912: LD_VAR 0 1
20916: PPUSH
20917: CALL_OW 256
20921: PUSH
20922: LD_INT 1000
20924: LESS
20925: IFFALSE 20939
// SetLives ( i , 1000 ) ;
20927: LD_VAR 0 1
20931: PPUSH
20932: LD_INT 1000
20934: PPUSH
20935: CALL_OW 234
20939: GO 20909
20941: POP
20942: POP
// end ;
20943: PPOPN 1
20945: END
// export function hHackInvincible ; var i ; begin
20946: LD_INT 0
20948: PPUSH
20949: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
20950: LD_ADDR_VAR 0 2
20954: PUSH
20955: LD_INT 2
20957: PUSH
20958: LD_INT 21
20960: PUSH
20961: LD_INT 1
20963: PUSH
20964: EMPTY
20965: LIST
20966: LIST
20967: PUSH
20968: LD_INT 21
20970: PUSH
20971: LD_INT 2
20973: PUSH
20974: EMPTY
20975: LIST
20976: LIST
20977: PUSH
20978: EMPTY
20979: LIST
20980: LIST
20981: LIST
20982: PPUSH
20983: CALL_OW 69
20987: PUSH
20988: FOR_IN
20989: IFFALSE 21050
// if IsSelected ( i ) then
20991: LD_VAR 0 2
20995: PPUSH
20996: CALL_OW 306
21000: IFFALSE 21048
// begin if i in hInvincible then
21002: LD_VAR 0 2
21006: PUSH
21007: LD_EXP 86
21011: IN
21012: IFFALSE 21032
// hInvincible := hInvincible diff i else
21014: LD_ADDR_EXP 86
21018: PUSH
21019: LD_EXP 86
21023: PUSH
21024: LD_VAR 0 2
21028: DIFF
21029: ST_TO_ADDR
21030: GO 21048
// hInvincible := hInvincible union i ;
21032: LD_ADDR_EXP 86
21036: PUSH
21037: LD_EXP 86
21041: PUSH
21042: LD_VAR 0 2
21046: UNION
21047: ST_TO_ADDR
// end ;
21048: GO 20988
21050: POP
21051: POP
// end ;
21052: LD_VAR 0 1
21056: RET
// export function hHackInvisible ; var i , j ; begin
21057: LD_INT 0
21059: PPUSH
21060: PPUSH
21061: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21062: LD_ADDR_VAR 0 2
21066: PUSH
21067: LD_INT 21
21069: PUSH
21070: LD_INT 1
21072: PUSH
21073: EMPTY
21074: LIST
21075: LIST
21076: PPUSH
21077: CALL_OW 69
21081: PUSH
21082: FOR_IN
21083: IFFALSE 21107
// if IsSelected ( i ) then
21085: LD_VAR 0 2
21089: PPUSH
21090: CALL_OW 306
21094: IFFALSE 21105
// ComForceInvisible ( i ) ;
21096: LD_VAR 0 2
21100: PPUSH
21101: CALL_OW 496
21105: GO 21082
21107: POP
21108: POP
// end ;
21109: LD_VAR 0 1
21113: RET
// export function hHackChangeYourSide ; begin
21114: LD_INT 0
21116: PPUSH
// if your_side = 8 then
21117: LD_OWVAR 2
21121: PUSH
21122: LD_INT 8
21124: EQUAL
21125: IFFALSE 21137
// your_side := 0 else
21127: LD_ADDR_OWVAR 2
21131: PUSH
21132: LD_INT 0
21134: ST_TO_ADDR
21135: GO 21151
// your_side := your_side + 1 ;
21137: LD_ADDR_OWVAR 2
21141: PUSH
21142: LD_OWVAR 2
21146: PUSH
21147: LD_INT 1
21149: PLUS
21150: ST_TO_ADDR
// end ;
21151: LD_VAR 0 1
21155: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21156: LD_INT 0
21158: PPUSH
21159: PPUSH
21160: PPUSH
// for i in all_units do
21161: LD_ADDR_VAR 0 2
21165: PUSH
21166: LD_OWVAR 3
21170: PUSH
21171: FOR_IN
21172: IFFALSE 21250
// if IsSelected ( i ) then
21174: LD_VAR 0 2
21178: PPUSH
21179: CALL_OW 306
21183: IFFALSE 21248
// begin j := GetSide ( i ) ;
21185: LD_ADDR_VAR 0 3
21189: PUSH
21190: LD_VAR 0 2
21194: PPUSH
21195: CALL_OW 255
21199: ST_TO_ADDR
// if j = 8 then
21200: LD_VAR 0 3
21204: PUSH
21205: LD_INT 8
21207: EQUAL
21208: IFFALSE 21220
// j := 0 else
21210: LD_ADDR_VAR 0 3
21214: PUSH
21215: LD_INT 0
21217: ST_TO_ADDR
21218: GO 21234
// j := j + 1 ;
21220: LD_ADDR_VAR 0 3
21224: PUSH
21225: LD_VAR 0 3
21229: PUSH
21230: LD_INT 1
21232: PLUS
21233: ST_TO_ADDR
// SetSide ( i , j ) ;
21234: LD_VAR 0 2
21238: PPUSH
21239: LD_VAR 0 3
21243: PPUSH
21244: CALL_OW 235
// end ;
21248: GO 21171
21250: POP
21251: POP
// end ;
21252: LD_VAR 0 1
21256: RET
// export function hHackFog ; begin
21257: LD_INT 0
21259: PPUSH
// FogOff ( true ) ;
21260: LD_INT 1
21262: PPUSH
21263: CALL_OW 344
// end ;
21267: LD_VAR 0 1
21271: RET
// export function hHackTeleport ( unit , x , y ) ; begin
21272: LD_INT 0
21274: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
21275: LD_VAR 0 1
21279: PPUSH
21280: LD_VAR 0 2
21284: PPUSH
21285: LD_VAR 0 3
21289: PPUSH
21290: LD_INT 1
21292: PPUSH
21293: LD_INT 1
21295: PPUSH
21296: CALL_OW 483
// CenterOnXY ( x , y ) ;
21300: LD_VAR 0 2
21304: PPUSH
21305: LD_VAR 0 3
21309: PPUSH
21310: CALL_OW 84
// end ;
21314: LD_VAR 0 4
21318: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
21319: LD_INT 0
21321: PPUSH
21322: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
21323: LD_VAR 0 1
21327: NOT
21328: PUSH
21329: LD_VAR 0 2
21333: PPUSH
21334: LD_VAR 0 3
21338: PPUSH
21339: CALL_OW 488
21343: NOT
21344: OR
21345: PUSH
21346: LD_VAR 0 1
21350: PPUSH
21351: CALL_OW 266
21355: PUSH
21356: LD_INT 3
21358: NONEQUAL
21359: PUSH
21360: LD_VAR 0 1
21364: PPUSH
21365: CALL_OW 247
21369: PUSH
21370: LD_INT 1
21372: EQUAL
21373: NOT
21374: AND
21375: OR
21376: IFFALSE 21380
// exit ;
21378: GO 21529
// if GetType ( factory ) = unit_human then
21380: LD_VAR 0 1
21384: PPUSH
21385: CALL_OW 247
21389: PUSH
21390: LD_INT 1
21392: EQUAL
21393: IFFALSE 21410
// factory := IsInUnit ( factory ) ;
21395: LD_ADDR_VAR 0 1
21399: PUSH
21400: LD_VAR 0 1
21404: PPUSH
21405: CALL_OW 310
21409: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
21410: LD_VAR 0 1
21414: PPUSH
21415: CALL_OW 266
21419: PUSH
21420: LD_INT 3
21422: NONEQUAL
21423: IFFALSE 21427
// exit ;
21425: GO 21529
// if HexInfo ( x , y ) = factory then
21427: LD_VAR 0 2
21431: PPUSH
21432: LD_VAR 0 3
21436: PPUSH
21437: CALL_OW 428
21441: PUSH
21442: LD_VAR 0 1
21446: EQUAL
21447: IFFALSE 21474
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
21449: LD_ADDR_EXP 87
21453: PUSH
21454: LD_EXP 87
21458: PPUSH
21459: LD_VAR 0 1
21463: PPUSH
21464: LD_INT 0
21466: PPUSH
21467: CALL_OW 1
21471: ST_TO_ADDR
21472: GO 21525
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
21474: LD_ADDR_EXP 87
21478: PUSH
21479: LD_EXP 87
21483: PPUSH
21484: LD_VAR 0 1
21488: PPUSH
21489: LD_VAR 0 1
21493: PPUSH
21494: CALL_OW 255
21498: PUSH
21499: LD_VAR 0 1
21503: PUSH
21504: LD_VAR 0 2
21508: PUSH
21509: LD_VAR 0 3
21513: PUSH
21514: EMPTY
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: PPUSH
21520: CALL_OW 1
21524: ST_TO_ADDR
// UpdateFactoryWaypoints ;
21525: CALL 21534 0 0
// end ;
21529: LD_VAR 0 4
21533: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
21534: LD_INT 0
21536: PPUSH
21537: PPUSH
21538: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
21539: LD_STRING resetFactoryWaypoint();
21541: PPUSH
21542: CALL_OW 559
// if factoryWaypoints then
21546: LD_EXP 87
21550: IFFALSE 21676
// begin list := PrepareArray ( factoryWaypoints ) ;
21552: LD_ADDR_VAR 0 3
21556: PUSH
21557: LD_EXP 87
21561: PPUSH
21562: CALL 67998 0 1
21566: ST_TO_ADDR
// for i := 1 to list do
21567: LD_ADDR_VAR 0 2
21571: PUSH
21572: DOUBLE
21573: LD_INT 1
21575: DEC
21576: ST_TO_ADDR
21577: LD_VAR 0 3
21581: PUSH
21582: FOR_TO
21583: IFFALSE 21674
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
21585: LD_STRING setFactoryWaypointXY(
21587: PUSH
21588: LD_VAR 0 3
21592: PUSH
21593: LD_VAR 0 2
21597: ARRAY
21598: PUSH
21599: LD_INT 1
21601: ARRAY
21602: STR
21603: PUSH
21604: LD_STRING ,
21606: STR
21607: PUSH
21608: LD_VAR 0 3
21612: PUSH
21613: LD_VAR 0 2
21617: ARRAY
21618: PUSH
21619: LD_INT 2
21621: ARRAY
21622: STR
21623: PUSH
21624: LD_STRING ,
21626: STR
21627: PUSH
21628: LD_VAR 0 3
21632: PUSH
21633: LD_VAR 0 2
21637: ARRAY
21638: PUSH
21639: LD_INT 3
21641: ARRAY
21642: STR
21643: PUSH
21644: LD_STRING ,
21646: STR
21647: PUSH
21648: LD_VAR 0 3
21652: PUSH
21653: LD_VAR 0 2
21657: ARRAY
21658: PUSH
21659: LD_INT 4
21661: ARRAY
21662: STR
21663: PUSH
21664: LD_STRING )
21666: STR
21667: PPUSH
21668: CALL_OW 559
21672: GO 21582
21674: POP
21675: POP
// end ; end ;
21676: LD_VAR 0 1
21680: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
21681: LD_INT 0
21683: PPUSH
// if HexInfo ( x , y ) = warehouse then
21684: LD_VAR 0 2
21688: PPUSH
21689: LD_VAR 0 3
21693: PPUSH
21694: CALL_OW 428
21698: PUSH
21699: LD_VAR 0 1
21703: EQUAL
21704: IFFALSE 21731
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
21706: LD_ADDR_EXP 88
21710: PUSH
21711: LD_EXP 88
21715: PPUSH
21716: LD_VAR 0 1
21720: PPUSH
21721: LD_INT 0
21723: PPUSH
21724: CALL_OW 1
21728: ST_TO_ADDR
21729: GO 21782
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
21731: LD_ADDR_EXP 88
21735: PUSH
21736: LD_EXP 88
21740: PPUSH
21741: LD_VAR 0 1
21745: PPUSH
21746: LD_VAR 0 1
21750: PPUSH
21751: CALL_OW 255
21755: PUSH
21756: LD_VAR 0 1
21760: PUSH
21761: LD_VAR 0 2
21765: PUSH
21766: LD_VAR 0 3
21770: PUSH
21771: EMPTY
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: PPUSH
21777: CALL_OW 1
21781: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
21782: CALL 21791 0 0
// end ;
21786: LD_VAR 0 4
21790: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
21791: LD_INT 0
21793: PPUSH
21794: PPUSH
21795: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
21796: LD_STRING resetWarehouseGatheringPoints();
21798: PPUSH
21799: CALL_OW 559
// if warehouseGatheringPoints then
21803: LD_EXP 88
21807: IFFALSE 21933
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
21809: LD_ADDR_VAR 0 3
21813: PUSH
21814: LD_EXP 88
21818: PPUSH
21819: CALL 67998 0 1
21823: ST_TO_ADDR
// for i := 1 to list do
21824: LD_ADDR_VAR 0 2
21828: PUSH
21829: DOUBLE
21830: LD_INT 1
21832: DEC
21833: ST_TO_ADDR
21834: LD_VAR 0 3
21838: PUSH
21839: FOR_TO
21840: IFFALSE 21931
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
21842: LD_STRING setWarehouseGatheringPointXY(
21844: PUSH
21845: LD_VAR 0 3
21849: PUSH
21850: LD_VAR 0 2
21854: ARRAY
21855: PUSH
21856: LD_INT 1
21858: ARRAY
21859: STR
21860: PUSH
21861: LD_STRING ,
21863: STR
21864: PUSH
21865: LD_VAR 0 3
21869: PUSH
21870: LD_VAR 0 2
21874: ARRAY
21875: PUSH
21876: LD_INT 2
21878: ARRAY
21879: STR
21880: PUSH
21881: LD_STRING ,
21883: STR
21884: PUSH
21885: LD_VAR 0 3
21889: PUSH
21890: LD_VAR 0 2
21894: ARRAY
21895: PUSH
21896: LD_INT 3
21898: ARRAY
21899: STR
21900: PUSH
21901: LD_STRING ,
21903: STR
21904: PUSH
21905: LD_VAR 0 3
21909: PUSH
21910: LD_VAR 0 2
21914: ARRAY
21915: PUSH
21916: LD_INT 4
21918: ARRAY
21919: STR
21920: PUSH
21921: LD_STRING )
21923: STR
21924: PPUSH
21925: CALL_OW 559
21929: GO 21839
21931: POP
21932: POP
// end ; end ;
21933: LD_VAR 0 1
21937: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
21938: LD_EXP 88
21942: IFFALSE 22627
21944: GO 21946
21946: DISABLE
21947: LD_INT 0
21949: PPUSH
21950: PPUSH
21951: PPUSH
21952: PPUSH
21953: PPUSH
21954: PPUSH
21955: PPUSH
21956: PPUSH
21957: PPUSH
// begin enable ;
21958: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
21959: LD_ADDR_VAR 0 3
21963: PUSH
21964: LD_EXP 88
21968: PPUSH
21969: CALL 67998 0 1
21973: ST_TO_ADDR
// if not list then
21974: LD_VAR 0 3
21978: NOT
21979: IFFALSE 21983
// exit ;
21981: GO 22627
// for i := 1 to list do
21983: LD_ADDR_VAR 0 1
21987: PUSH
21988: DOUBLE
21989: LD_INT 1
21991: DEC
21992: ST_TO_ADDR
21993: LD_VAR 0 3
21997: PUSH
21998: FOR_TO
21999: IFFALSE 22625
// begin depot := list [ i ] [ 2 ] ;
22001: LD_ADDR_VAR 0 8
22005: PUSH
22006: LD_VAR 0 3
22010: PUSH
22011: LD_VAR 0 1
22015: ARRAY
22016: PUSH
22017: LD_INT 2
22019: ARRAY
22020: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
22021: LD_ADDR_VAR 0 5
22025: PUSH
22026: LD_VAR 0 3
22030: PUSH
22031: LD_VAR 0 1
22035: ARRAY
22036: PUSH
22037: LD_INT 1
22039: ARRAY
22040: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
22041: LD_VAR 0 8
22045: PPUSH
22046: CALL_OW 301
22050: PUSH
22051: LD_VAR 0 5
22055: PUSH
22056: LD_VAR 0 8
22060: PPUSH
22061: CALL_OW 255
22065: NONEQUAL
22066: OR
22067: IFFALSE 22096
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
22069: LD_ADDR_EXP 88
22073: PUSH
22074: LD_EXP 88
22078: PPUSH
22079: LD_VAR 0 8
22083: PPUSH
22084: LD_INT 0
22086: PPUSH
22087: CALL_OW 1
22091: ST_TO_ADDR
// exit ;
22092: POP
22093: POP
22094: GO 22627
// end ; x := list [ i ] [ 3 ] ;
22096: LD_ADDR_VAR 0 6
22100: PUSH
22101: LD_VAR 0 3
22105: PUSH
22106: LD_VAR 0 1
22110: ARRAY
22111: PUSH
22112: LD_INT 3
22114: ARRAY
22115: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
22116: LD_ADDR_VAR 0 7
22120: PUSH
22121: LD_VAR 0 3
22125: PUSH
22126: LD_VAR 0 1
22130: ARRAY
22131: PUSH
22132: LD_INT 4
22134: ARRAY
22135: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
22136: LD_ADDR_VAR 0 9
22140: PUSH
22141: LD_VAR 0 6
22145: PPUSH
22146: LD_VAR 0 7
22150: PPUSH
22151: LD_INT 16
22153: PPUSH
22154: CALL 66586 0 3
22158: ST_TO_ADDR
// if not cratesNearbyPoint then
22159: LD_VAR 0 9
22163: NOT
22164: IFFALSE 22170
// exit ;
22166: POP
22167: POP
22168: GO 22627
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
22170: LD_ADDR_VAR 0 4
22174: PUSH
22175: LD_INT 22
22177: PUSH
22178: LD_VAR 0 5
22182: PUSH
22183: EMPTY
22184: LIST
22185: LIST
22186: PUSH
22187: LD_INT 3
22189: PUSH
22190: LD_INT 60
22192: PUSH
22193: EMPTY
22194: LIST
22195: PUSH
22196: EMPTY
22197: LIST
22198: LIST
22199: PUSH
22200: LD_INT 91
22202: PUSH
22203: LD_VAR 0 8
22207: PUSH
22208: LD_INT 6
22210: PUSH
22211: EMPTY
22212: LIST
22213: LIST
22214: LIST
22215: PUSH
22216: LD_INT 2
22218: PUSH
22219: LD_INT 25
22221: PUSH
22222: LD_INT 2
22224: PUSH
22225: EMPTY
22226: LIST
22227: LIST
22228: PUSH
22229: LD_INT 25
22231: PUSH
22232: LD_INT 16
22234: PUSH
22235: EMPTY
22236: LIST
22237: LIST
22238: PUSH
22239: EMPTY
22240: LIST
22241: LIST
22242: LIST
22243: PUSH
22244: EMPTY
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: PPUSH
22250: CALL_OW 69
22254: PUSH
22255: LD_VAR 0 8
22259: PPUSH
22260: CALL_OW 313
22264: PPUSH
22265: LD_INT 3
22267: PUSH
22268: LD_INT 60
22270: PUSH
22271: EMPTY
22272: LIST
22273: PUSH
22274: EMPTY
22275: LIST
22276: LIST
22277: PUSH
22278: LD_INT 2
22280: PUSH
22281: LD_INT 25
22283: PUSH
22284: LD_INT 2
22286: PUSH
22287: EMPTY
22288: LIST
22289: LIST
22290: PUSH
22291: LD_INT 25
22293: PUSH
22294: LD_INT 16
22296: PUSH
22297: EMPTY
22298: LIST
22299: LIST
22300: PUSH
22301: EMPTY
22302: LIST
22303: LIST
22304: LIST
22305: PUSH
22306: EMPTY
22307: LIST
22308: LIST
22309: PPUSH
22310: CALL_OW 72
22314: UNION
22315: ST_TO_ADDR
// if tmp then
22316: LD_VAR 0 4
22320: IFFALSE 22400
// begin tmp := ShrinkArray ( tmp , 3 ) ;
22322: LD_ADDR_VAR 0 4
22326: PUSH
22327: LD_VAR 0 4
22331: PPUSH
22332: LD_INT 3
22334: PPUSH
22335: CALL 64555 0 2
22339: ST_TO_ADDR
// for j in tmp do
22340: LD_ADDR_VAR 0 2
22344: PUSH
22345: LD_VAR 0 4
22349: PUSH
22350: FOR_IN
22351: IFFALSE 22394
// begin if IsInUnit ( j ) then
22353: LD_VAR 0 2
22357: PPUSH
22358: CALL_OW 310
22362: IFFALSE 22373
// ComExit ( j ) ;
22364: LD_VAR 0 2
22368: PPUSH
22369: CALL 64638 0 1
// AddComCollect ( j , x , y ) ;
22373: LD_VAR 0 2
22377: PPUSH
22378: LD_VAR 0 6
22382: PPUSH
22383: LD_VAR 0 7
22387: PPUSH
22388: CALL_OW 177
// end ;
22392: GO 22350
22394: POP
22395: POP
// exit ;
22396: POP
22397: POP
22398: GO 22627
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
22400: LD_ADDR_VAR 0 4
22404: PUSH
22405: LD_INT 22
22407: PUSH
22408: LD_VAR 0 5
22412: PUSH
22413: EMPTY
22414: LIST
22415: LIST
22416: PUSH
22417: LD_INT 91
22419: PUSH
22420: LD_VAR 0 8
22424: PUSH
22425: LD_INT 8
22427: PUSH
22428: EMPTY
22429: LIST
22430: LIST
22431: LIST
22432: PUSH
22433: LD_INT 2
22435: PUSH
22436: LD_INT 34
22438: PUSH
22439: LD_INT 12
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: PUSH
22446: LD_INT 34
22448: PUSH
22449: LD_INT 51
22451: PUSH
22452: EMPTY
22453: LIST
22454: LIST
22455: PUSH
22456: LD_INT 34
22458: PUSH
22459: LD_INT 32
22461: PUSH
22462: EMPTY
22463: LIST
22464: LIST
22465: PUSH
22466: LD_INT 34
22468: PUSH
22469: LD_INT 89
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: PUSH
22476: EMPTY
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: PUSH
22483: EMPTY
22484: LIST
22485: LIST
22486: LIST
22487: PPUSH
22488: CALL_OW 69
22492: ST_TO_ADDR
// if tmp then
22493: LD_VAR 0 4
22497: IFFALSE 22623
// begin for j in tmp do
22499: LD_ADDR_VAR 0 2
22503: PUSH
22504: LD_VAR 0 4
22508: PUSH
22509: FOR_IN
22510: IFFALSE 22621
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
22512: LD_VAR 0 2
22516: PPUSH
22517: CALL_OW 262
22521: PUSH
22522: LD_INT 3
22524: EQUAL
22525: PUSH
22526: LD_VAR 0 2
22530: PPUSH
22531: CALL_OW 261
22535: PUSH
22536: LD_INT 20
22538: GREATER
22539: OR
22540: PUSH
22541: LD_VAR 0 2
22545: PPUSH
22546: CALL_OW 314
22550: NOT
22551: AND
22552: PUSH
22553: LD_VAR 0 2
22557: PPUSH
22558: CALL_OW 263
22562: PUSH
22563: LD_INT 1
22565: NONEQUAL
22566: PUSH
22567: LD_VAR 0 2
22571: PPUSH
22572: CALL_OW 311
22576: OR
22577: AND
22578: IFFALSE 22619
// begin ComCollect ( j , x , y ) ;
22580: LD_VAR 0 2
22584: PPUSH
22585: LD_VAR 0 6
22589: PPUSH
22590: LD_VAR 0 7
22594: PPUSH
22595: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
22599: LD_VAR 0 2
22603: PPUSH
22604: LD_VAR 0 8
22608: PPUSH
22609: CALL_OW 172
// exit ;
22613: POP
22614: POP
22615: POP
22616: POP
22617: GO 22627
// end ;
22619: GO 22509
22621: POP
22622: POP
// end ; end ;
22623: GO 21998
22625: POP
22626: POP
// end ; end_of_file
22627: PPOPN 9
22629: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
22630: LD_INT 0
22632: PPUSH
22633: PPUSH
22634: PPUSH
22635: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
22636: LD_VAR 0 1
22640: PPUSH
22641: CALL_OW 264
22645: PUSH
22646: LD_INT 91
22648: EQUAL
22649: IFFALSE 22721
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
22651: LD_INT 68
22653: PPUSH
22654: LD_VAR 0 1
22658: PPUSH
22659: CALL_OW 255
22663: PPUSH
22664: CALL_OW 321
22668: PUSH
22669: LD_INT 2
22671: EQUAL
22672: IFFALSE 22684
// eff := 70 else
22674: LD_ADDR_VAR 0 4
22678: PUSH
22679: LD_INT 70
22681: ST_TO_ADDR
22682: GO 22692
// eff := 30 ;
22684: LD_ADDR_VAR 0 4
22688: PUSH
22689: LD_INT 30
22691: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
22692: LD_VAR 0 1
22696: PPUSH
22697: CALL_OW 250
22701: PPUSH
22702: LD_VAR 0 1
22706: PPUSH
22707: CALL_OW 251
22711: PPUSH
22712: LD_VAR 0 4
22716: PPUSH
22717: CALL_OW 495
// end ; end ;
22721: LD_VAR 0 2
22725: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
22726: LD_INT 0
22728: PPUSH
// end ;
22729: LD_VAR 0 4
22733: RET
// export function SOS_Command ( cmd ) ; begin
22734: LD_INT 0
22736: PPUSH
// end ;
22737: LD_VAR 0 2
22741: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
22742: LD_INT 0
22744: PPUSH
// end ;
22745: LD_VAR 0 6
22749: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
22750: LD_INT 0
22752: PPUSH
22753: PPUSH
// if not vehicle or not factory then
22754: LD_VAR 0 1
22758: NOT
22759: PUSH
22760: LD_VAR 0 2
22764: NOT
22765: OR
22766: IFFALSE 22770
// exit ;
22768: GO 23001
// if factoryWaypoints >= factory then
22770: LD_EXP 87
22774: PUSH
22775: LD_VAR 0 2
22779: GREATEREQUAL
22780: IFFALSE 23001
// if factoryWaypoints [ factory ] then
22782: LD_EXP 87
22786: PUSH
22787: LD_VAR 0 2
22791: ARRAY
22792: IFFALSE 23001
// begin if GetControl ( vehicle ) = control_manual then
22794: LD_VAR 0 1
22798: PPUSH
22799: CALL_OW 263
22803: PUSH
22804: LD_INT 1
22806: EQUAL
22807: IFFALSE 22888
// begin driver := IsDrivenBy ( vehicle ) ;
22809: LD_ADDR_VAR 0 4
22813: PUSH
22814: LD_VAR 0 1
22818: PPUSH
22819: CALL_OW 311
22823: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
22824: LD_VAR 0 4
22828: PPUSH
22829: LD_EXP 87
22833: PUSH
22834: LD_VAR 0 2
22838: ARRAY
22839: PUSH
22840: LD_INT 3
22842: ARRAY
22843: PPUSH
22844: LD_EXP 87
22848: PUSH
22849: LD_VAR 0 2
22853: ARRAY
22854: PUSH
22855: LD_INT 4
22857: ARRAY
22858: PPUSH
22859: CALL_OW 171
// AddComExitVehicle ( driver ) ;
22863: LD_VAR 0 4
22867: PPUSH
22868: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
22872: LD_VAR 0 4
22876: PPUSH
22877: LD_VAR 0 2
22881: PPUSH
22882: CALL_OW 180
// end else
22886: GO 23001
// if GetControl ( vehicle ) = control_remote then
22888: LD_VAR 0 1
22892: PPUSH
22893: CALL_OW 263
22897: PUSH
22898: LD_INT 2
22900: EQUAL
22901: IFFALSE 22962
// begin wait ( 0 0$2 ) ;
22903: LD_INT 70
22905: PPUSH
22906: CALL_OW 67
// if Connect ( vehicle ) then
22910: LD_VAR 0 1
22914: PPUSH
22915: CALL 34859 0 1
22919: IFFALSE 22960
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
22921: LD_VAR 0 1
22925: PPUSH
22926: LD_EXP 87
22930: PUSH
22931: LD_VAR 0 2
22935: ARRAY
22936: PUSH
22937: LD_INT 3
22939: ARRAY
22940: PPUSH
22941: LD_EXP 87
22945: PUSH
22946: LD_VAR 0 2
22950: ARRAY
22951: PUSH
22952: LD_INT 4
22954: ARRAY
22955: PPUSH
22956: CALL_OW 171
// end else
22960: GO 23001
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
22962: LD_VAR 0 1
22966: PPUSH
22967: LD_EXP 87
22971: PUSH
22972: LD_VAR 0 2
22976: ARRAY
22977: PUSH
22978: LD_INT 3
22980: ARRAY
22981: PPUSH
22982: LD_EXP 87
22986: PUSH
22987: LD_VAR 0 2
22991: ARRAY
22992: PUSH
22993: LD_INT 4
22995: ARRAY
22996: PPUSH
22997: CALL_OW 171
// end ; end ;
23001: LD_VAR 0 3
23005: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
23006: LD_INT 0
23008: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
23009: LD_VAR 0 1
23013: PUSH
23014: LD_INT 250
23016: EQUAL
23017: PUSH
23018: LD_VAR 0 2
23022: PPUSH
23023: CALL_OW 264
23027: PUSH
23028: LD_INT 81
23030: EQUAL
23031: AND
23032: IFFALSE 23053
// MinerPlaceMine ( unit , x , y ) ;
23034: LD_VAR 0 2
23038: PPUSH
23039: LD_VAR 0 4
23043: PPUSH
23044: LD_VAR 0 5
23048: PPUSH
23049: CALL 25438 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
23053: LD_VAR 0 1
23057: PUSH
23058: LD_INT 251
23060: EQUAL
23061: PUSH
23062: LD_VAR 0 2
23066: PPUSH
23067: CALL_OW 264
23071: PUSH
23072: LD_INT 81
23074: EQUAL
23075: AND
23076: IFFALSE 23097
// MinerDetonateMine ( unit , x , y ) ;
23078: LD_VAR 0 2
23082: PPUSH
23083: LD_VAR 0 4
23087: PPUSH
23088: LD_VAR 0 5
23092: PPUSH
23093: CALL 25713 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
23097: LD_VAR 0 1
23101: PUSH
23102: LD_INT 252
23104: EQUAL
23105: PUSH
23106: LD_VAR 0 2
23110: PPUSH
23111: CALL_OW 264
23115: PUSH
23116: LD_INT 81
23118: EQUAL
23119: AND
23120: IFFALSE 23141
// MinerCreateMinefield ( unit , x , y ) ;
23122: LD_VAR 0 2
23126: PPUSH
23127: LD_VAR 0 4
23131: PPUSH
23132: LD_VAR 0 5
23136: PPUSH
23137: CALL 26130 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
23141: LD_VAR 0 1
23145: PUSH
23146: LD_INT 253
23148: EQUAL
23149: PUSH
23150: LD_VAR 0 2
23154: PPUSH
23155: CALL_OW 257
23159: PUSH
23160: LD_INT 5
23162: EQUAL
23163: AND
23164: IFFALSE 23185
// ComBinocular ( unit , x , y ) ;
23166: LD_VAR 0 2
23170: PPUSH
23171: LD_VAR 0 4
23175: PPUSH
23176: LD_VAR 0 5
23180: PPUSH
23181: CALL 26499 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
23185: LD_VAR 0 1
23189: PUSH
23190: LD_INT 254
23192: EQUAL
23193: PUSH
23194: LD_VAR 0 2
23198: PPUSH
23199: CALL_OW 264
23203: PUSH
23204: LD_INT 99
23206: EQUAL
23207: AND
23208: PUSH
23209: LD_VAR 0 3
23213: PPUSH
23214: CALL_OW 263
23218: PUSH
23219: LD_INT 3
23221: EQUAL
23222: AND
23223: IFFALSE 23239
// HackDestroyVehicle ( unit , selectedUnit ) ;
23225: LD_VAR 0 2
23229: PPUSH
23230: LD_VAR 0 3
23234: PPUSH
23235: CALL 24802 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
23239: LD_VAR 0 1
23243: PUSH
23244: LD_INT 255
23246: EQUAL
23247: PUSH
23248: LD_VAR 0 2
23252: PPUSH
23253: CALL_OW 264
23257: PUSH
23258: LD_INT 14
23260: PUSH
23261: LD_INT 53
23263: PUSH
23264: EMPTY
23265: LIST
23266: LIST
23267: IN
23268: AND
23269: PUSH
23270: LD_VAR 0 4
23274: PPUSH
23275: LD_VAR 0 5
23279: PPUSH
23280: CALL_OW 488
23284: AND
23285: IFFALSE 23309
// CutTreeXYR ( unit , x , y , 12 ) ;
23287: LD_VAR 0 2
23291: PPUSH
23292: LD_VAR 0 4
23296: PPUSH
23297: LD_VAR 0 5
23301: PPUSH
23302: LD_INT 12
23304: PPUSH
23305: CALL 23372 0 4
// if cmd = 256 then
23309: LD_VAR 0 1
23313: PUSH
23314: LD_INT 256
23316: EQUAL
23317: IFFALSE 23338
// SetFactoryWaypoint ( unit , x , y ) ;
23319: LD_VAR 0 2
23323: PPUSH
23324: LD_VAR 0 4
23328: PPUSH
23329: LD_VAR 0 5
23333: PPUSH
23334: CALL 21319 0 3
// if cmd = 257 then
23338: LD_VAR 0 1
23342: PUSH
23343: LD_INT 257
23345: EQUAL
23346: IFFALSE 23367
// SetWarehouseGatheringPoint ( unit , x , y ) ;
23348: LD_VAR 0 2
23352: PPUSH
23353: LD_VAR 0 4
23357: PPUSH
23358: LD_VAR 0 5
23362: PPUSH
23363: CALL 21681 0 3
// end ;
23367: LD_VAR 0 6
23371: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23372: LD_INT 0
23374: PPUSH
23375: PPUSH
23376: PPUSH
23377: PPUSH
23378: PPUSH
23379: PPUSH
23380: PPUSH
23381: PPUSH
23382: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
23383: LD_VAR 0 1
23387: NOT
23388: PUSH
23389: LD_VAR 0 2
23393: PPUSH
23394: LD_VAR 0 3
23398: PPUSH
23399: CALL_OW 488
23403: NOT
23404: OR
23405: PUSH
23406: LD_VAR 0 4
23410: NOT
23411: OR
23412: IFFALSE 23416
// exit ;
23414: GO 23756
// list := [ ] ;
23416: LD_ADDR_VAR 0 13
23420: PUSH
23421: EMPTY
23422: ST_TO_ADDR
// if x - r < 0 then
23423: LD_VAR 0 2
23427: PUSH
23428: LD_VAR 0 4
23432: MINUS
23433: PUSH
23434: LD_INT 0
23436: LESS
23437: IFFALSE 23449
// min_x := 0 else
23439: LD_ADDR_VAR 0 7
23443: PUSH
23444: LD_INT 0
23446: ST_TO_ADDR
23447: GO 23465
// min_x := x - r ;
23449: LD_ADDR_VAR 0 7
23453: PUSH
23454: LD_VAR 0 2
23458: PUSH
23459: LD_VAR 0 4
23463: MINUS
23464: ST_TO_ADDR
// if y - r < 0 then
23465: LD_VAR 0 3
23469: PUSH
23470: LD_VAR 0 4
23474: MINUS
23475: PUSH
23476: LD_INT 0
23478: LESS
23479: IFFALSE 23491
// min_y := 0 else
23481: LD_ADDR_VAR 0 8
23485: PUSH
23486: LD_INT 0
23488: ST_TO_ADDR
23489: GO 23507
// min_y := y - r ;
23491: LD_ADDR_VAR 0 8
23495: PUSH
23496: LD_VAR 0 3
23500: PUSH
23501: LD_VAR 0 4
23505: MINUS
23506: ST_TO_ADDR
// max_x := x + r ;
23507: LD_ADDR_VAR 0 9
23511: PUSH
23512: LD_VAR 0 2
23516: PUSH
23517: LD_VAR 0 4
23521: PLUS
23522: ST_TO_ADDR
// max_y := y + r ;
23523: LD_ADDR_VAR 0 10
23527: PUSH
23528: LD_VAR 0 3
23532: PUSH
23533: LD_VAR 0 4
23537: PLUS
23538: ST_TO_ADDR
// for _x = min_x to max_x do
23539: LD_ADDR_VAR 0 11
23543: PUSH
23544: DOUBLE
23545: LD_VAR 0 7
23549: DEC
23550: ST_TO_ADDR
23551: LD_VAR 0 9
23555: PUSH
23556: FOR_TO
23557: IFFALSE 23674
// for _y = min_y to max_y do
23559: LD_ADDR_VAR 0 12
23563: PUSH
23564: DOUBLE
23565: LD_VAR 0 8
23569: DEC
23570: ST_TO_ADDR
23571: LD_VAR 0 10
23575: PUSH
23576: FOR_TO
23577: IFFALSE 23670
// begin if not ValidHex ( _x , _y ) then
23579: LD_VAR 0 11
23583: PPUSH
23584: LD_VAR 0 12
23588: PPUSH
23589: CALL_OW 488
23593: NOT
23594: IFFALSE 23598
// continue ;
23596: GO 23576
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23598: LD_VAR 0 11
23602: PPUSH
23603: LD_VAR 0 12
23607: PPUSH
23608: CALL_OW 351
23612: PUSH
23613: LD_VAR 0 11
23617: PPUSH
23618: LD_VAR 0 12
23622: PPUSH
23623: CALL_OW 554
23627: AND
23628: IFFALSE 23668
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23630: LD_ADDR_VAR 0 13
23634: PUSH
23635: LD_VAR 0 13
23639: PPUSH
23640: LD_VAR 0 13
23644: PUSH
23645: LD_INT 1
23647: PLUS
23648: PPUSH
23649: LD_VAR 0 11
23653: PUSH
23654: LD_VAR 0 12
23658: PUSH
23659: EMPTY
23660: LIST
23661: LIST
23662: PPUSH
23663: CALL_OW 2
23667: ST_TO_ADDR
// end ;
23668: GO 23576
23670: POP
23671: POP
23672: GO 23556
23674: POP
23675: POP
// if not list then
23676: LD_VAR 0 13
23680: NOT
23681: IFFALSE 23685
// exit ;
23683: GO 23756
// for i in list do
23685: LD_ADDR_VAR 0 6
23689: PUSH
23690: LD_VAR 0 13
23694: PUSH
23695: FOR_IN
23696: IFFALSE 23754
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23698: LD_VAR 0 1
23702: PPUSH
23703: LD_STRING M
23705: PUSH
23706: LD_VAR 0 6
23710: PUSH
23711: LD_INT 1
23713: ARRAY
23714: PUSH
23715: LD_VAR 0 6
23719: PUSH
23720: LD_INT 2
23722: ARRAY
23723: PUSH
23724: LD_INT 0
23726: PUSH
23727: LD_INT 0
23729: PUSH
23730: LD_INT 0
23732: PUSH
23733: LD_INT 0
23735: PUSH
23736: EMPTY
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: PUSH
23745: EMPTY
23746: LIST
23747: PPUSH
23748: CALL_OW 447
23752: GO 23695
23754: POP
23755: POP
// end ;
23756: LD_VAR 0 5
23760: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
23761: LD_EXP 90
23765: NOT
23766: IFFALSE 23816
23768: GO 23770
23770: DISABLE
// begin initHack := true ;
23771: LD_ADDR_EXP 90
23775: PUSH
23776: LD_INT 1
23778: ST_TO_ADDR
// hackTanks := [ ] ;
23779: LD_ADDR_EXP 91
23783: PUSH
23784: EMPTY
23785: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
23786: LD_ADDR_EXP 92
23790: PUSH
23791: EMPTY
23792: ST_TO_ADDR
// hackLimit := 3 ;
23793: LD_ADDR_EXP 93
23797: PUSH
23798: LD_INT 3
23800: ST_TO_ADDR
// hackDist := 12 ;
23801: LD_ADDR_EXP 94
23805: PUSH
23806: LD_INT 12
23808: ST_TO_ADDR
// hackCounter := [ ] ;
23809: LD_ADDR_EXP 95
23813: PUSH
23814: EMPTY
23815: ST_TO_ADDR
// end ;
23816: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
23817: LD_EXP 90
23821: PUSH
23822: LD_INT 34
23824: PUSH
23825: LD_INT 99
23827: PUSH
23828: EMPTY
23829: LIST
23830: LIST
23831: PPUSH
23832: CALL_OW 69
23836: AND
23837: IFFALSE 24090
23839: GO 23841
23841: DISABLE
23842: LD_INT 0
23844: PPUSH
23845: PPUSH
// begin enable ;
23846: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
23847: LD_ADDR_VAR 0 1
23851: PUSH
23852: LD_INT 34
23854: PUSH
23855: LD_INT 99
23857: PUSH
23858: EMPTY
23859: LIST
23860: LIST
23861: PPUSH
23862: CALL_OW 69
23866: PUSH
23867: FOR_IN
23868: IFFALSE 24088
// begin if not i in hackTanks then
23870: LD_VAR 0 1
23874: PUSH
23875: LD_EXP 91
23879: IN
23880: NOT
23881: IFFALSE 23964
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
23883: LD_ADDR_EXP 91
23887: PUSH
23888: LD_EXP 91
23892: PPUSH
23893: LD_EXP 91
23897: PUSH
23898: LD_INT 1
23900: PLUS
23901: PPUSH
23902: LD_VAR 0 1
23906: PPUSH
23907: CALL_OW 1
23911: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
23912: LD_ADDR_EXP 92
23916: PUSH
23917: LD_EXP 92
23921: PPUSH
23922: LD_EXP 92
23926: PUSH
23927: LD_INT 1
23929: PLUS
23930: PPUSH
23931: EMPTY
23932: PPUSH
23933: CALL_OW 1
23937: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
23938: LD_ADDR_EXP 95
23942: PUSH
23943: LD_EXP 95
23947: PPUSH
23948: LD_EXP 95
23952: PUSH
23953: LD_INT 1
23955: PLUS
23956: PPUSH
23957: EMPTY
23958: PPUSH
23959: CALL_OW 1
23963: ST_TO_ADDR
// end ; if not IsOk ( i ) then
23964: LD_VAR 0 1
23968: PPUSH
23969: CALL_OW 302
23973: NOT
23974: IFFALSE 23987
// begin HackUnlinkAll ( i ) ;
23976: LD_VAR 0 1
23980: PPUSH
23981: CALL 24093 0 1
// continue ;
23985: GO 23867
// end ; HackCheckCapturedStatus ( i ) ;
23987: LD_VAR 0 1
23991: PPUSH
23992: CALL 24536 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
23996: LD_ADDR_VAR 0 2
24000: PUSH
24001: LD_INT 81
24003: PUSH
24004: LD_VAR 0 1
24008: PPUSH
24009: CALL_OW 255
24013: PUSH
24014: EMPTY
24015: LIST
24016: LIST
24017: PUSH
24018: LD_INT 33
24020: PUSH
24021: LD_INT 3
24023: PUSH
24024: EMPTY
24025: LIST
24026: LIST
24027: PUSH
24028: LD_INT 91
24030: PUSH
24031: LD_VAR 0 1
24035: PUSH
24036: LD_EXP 94
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: LIST
24045: PUSH
24046: LD_INT 50
24048: PUSH
24049: EMPTY
24050: LIST
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: PPUSH
24058: CALL_OW 69
24062: ST_TO_ADDR
// if not tmp then
24063: LD_VAR 0 2
24067: NOT
24068: IFFALSE 24072
// continue ;
24070: GO 23867
// HackLink ( i , tmp ) ;
24072: LD_VAR 0 1
24076: PPUSH
24077: LD_VAR 0 2
24081: PPUSH
24082: CALL 24229 0 2
// end ;
24086: GO 23867
24088: POP
24089: POP
// end ;
24090: PPOPN 2
24092: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24093: LD_INT 0
24095: PPUSH
24096: PPUSH
24097: PPUSH
// if not hack in hackTanks then
24098: LD_VAR 0 1
24102: PUSH
24103: LD_EXP 91
24107: IN
24108: NOT
24109: IFFALSE 24113
// exit ;
24111: GO 24224
// index := GetElementIndex ( hackTanks , hack ) ;
24113: LD_ADDR_VAR 0 4
24117: PUSH
24118: LD_EXP 91
24122: PPUSH
24123: LD_VAR 0 1
24127: PPUSH
24128: CALL 31666 0 2
24132: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24133: LD_EXP 92
24137: PUSH
24138: LD_VAR 0 4
24142: ARRAY
24143: IFFALSE 24224
// begin for i in hackTanksCaptured [ index ] do
24145: LD_ADDR_VAR 0 3
24149: PUSH
24150: LD_EXP 92
24154: PUSH
24155: LD_VAR 0 4
24159: ARRAY
24160: PUSH
24161: FOR_IN
24162: IFFALSE 24188
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24164: LD_VAR 0 3
24168: PUSH
24169: LD_INT 1
24171: ARRAY
24172: PPUSH
24173: LD_VAR 0 3
24177: PUSH
24178: LD_INT 2
24180: ARRAY
24181: PPUSH
24182: CALL_OW 235
24186: GO 24161
24188: POP
24189: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
24190: LD_ADDR_EXP 92
24194: PUSH
24195: LD_EXP 92
24199: PPUSH
24200: LD_VAR 0 4
24204: PPUSH
24205: EMPTY
24206: PPUSH
24207: CALL_OW 1
24211: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
24212: LD_VAR 0 1
24216: PPUSH
24217: LD_INT 0
24219: PPUSH
24220: CALL_OW 505
// end ; end ;
24224: LD_VAR 0 2
24228: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
24229: LD_INT 0
24231: PPUSH
24232: PPUSH
24233: PPUSH
// if not hack in hackTanks or not vehicles then
24234: LD_VAR 0 1
24238: PUSH
24239: LD_EXP 91
24243: IN
24244: NOT
24245: PUSH
24246: LD_VAR 0 2
24250: NOT
24251: OR
24252: IFFALSE 24256
// exit ;
24254: GO 24531
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
24256: LD_ADDR_VAR 0 2
24260: PUSH
24261: LD_VAR 0 1
24265: PPUSH
24266: LD_VAR 0 2
24270: PPUSH
24271: LD_INT 1
24273: PPUSH
24274: LD_INT 1
24276: PPUSH
24277: CALL 32316 0 4
24281: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
24282: LD_ADDR_VAR 0 5
24286: PUSH
24287: LD_EXP 91
24291: PPUSH
24292: LD_VAR 0 1
24296: PPUSH
24297: CALL 31666 0 2
24301: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
24302: LD_EXP 92
24306: PUSH
24307: LD_VAR 0 5
24311: ARRAY
24312: PUSH
24313: LD_EXP 93
24317: LESS
24318: IFFALSE 24507
// begin for i := 1 to vehicles do
24320: LD_ADDR_VAR 0 4
24324: PUSH
24325: DOUBLE
24326: LD_INT 1
24328: DEC
24329: ST_TO_ADDR
24330: LD_VAR 0 2
24334: PUSH
24335: FOR_TO
24336: IFFALSE 24505
// begin if hackTanksCaptured [ index ] = hackLimit then
24338: LD_EXP 92
24342: PUSH
24343: LD_VAR 0 5
24347: ARRAY
24348: PUSH
24349: LD_EXP 93
24353: EQUAL
24354: IFFALSE 24358
// break ;
24356: GO 24505
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
24358: LD_ADDR_EXP 95
24362: PUSH
24363: LD_EXP 95
24367: PPUSH
24368: LD_VAR 0 5
24372: PPUSH
24373: LD_EXP 95
24377: PUSH
24378: LD_VAR 0 5
24382: ARRAY
24383: PUSH
24384: LD_INT 1
24386: PLUS
24387: PPUSH
24388: CALL_OW 1
24392: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
24393: LD_ADDR_EXP 92
24397: PUSH
24398: LD_EXP 92
24402: PPUSH
24403: LD_VAR 0 5
24407: PUSH
24408: LD_EXP 92
24412: PUSH
24413: LD_VAR 0 5
24417: ARRAY
24418: PUSH
24419: LD_INT 1
24421: PLUS
24422: PUSH
24423: EMPTY
24424: LIST
24425: LIST
24426: PPUSH
24427: LD_VAR 0 2
24431: PUSH
24432: LD_VAR 0 4
24436: ARRAY
24437: PUSH
24438: LD_VAR 0 2
24442: PUSH
24443: LD_VAR 0 4
24447: ARRAY
24448: PPUSH
24449: CALL_OW 255
24453: PUSH
24454: EMPTY
24455: LIST
24456: LIST
24457: PPUSH
24458: CALL 31881 0 3
24462: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
24463: LD_VAR 0 2
24467: PUSH
24468: LD_VAR 0 4
24472: ARRAY
24473: PPUSH
24474: LD_VAR 0 1
24478: PPUSH
24479: CALL_OW 255
24483: PPUSH
24484: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
24488: LD_VAR 0 2
24492: PUSH
24493: LD_VAR 0 4
24497: ARRAY
24498: PPUSH
24499: CALL_OW 141
// end ;
24503: GO 24335
24505: POP
24506: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24507: LD_VAR 0 1
24511: PPUSH
24512: LD_EXP 92
24516: PUSH
24517: LD_VAR 0 5
24521: ARRAY
24522: PUSH
24523: LD_INT 0
24525: PLUS
24526: PPUSH
24527: CALL_OW 505
// end ;
24531: LD_VAR 0 3
24535: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
24536: LD_INT 0
24538: PPUSH
24539: PPUSH
24540: PPUSH
24541: PPUSH
// if not hack in hackTanks then
24542: LD_VAR 0 1
24546: PUSH
24547: LD_EXP 91
24551: IN
24552: NOT
24553: IFFALSE 24557
// exit ;
24555: GO 24797
// index := GetElementIndex ( hackTanks , hack ) ;
24557: LD_ADDR_VAR 0 4
24561: PUSH
24562: LD_EXP 91
24566: PPUSH
24567: LD_VAR 0 1
24571: PPUSH
24572: CALL 31666 0 2
24576: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
24577: LD_ADDR_VAR 0 3
24581: PUSH
24582: DOUBLE
24583: LD_EXP 92
24587: PUSH
24588: LD_VAR 0 4
24592: ARRAY
24593: INC
24594: ST_TO_ADDR
24595: LD_INT 1
24597: PUSH
24598: FOR_DOWNTO
24599: IFFALSE 24771
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
24601: LD_ADDR_VAR 0 5
24605: PUSH
24606: LD_EXP 92
24610: PUSH
24611: LD_VAR 0 4
24615: ARRAY
24616: PUSH
24617: LD_VAR 0 3
24621: ARRAY
24622: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
24623: LD_VAR 0 5
24627: PUSH
24628: LD_INT 1
24630: ARRAY
24631: PPUSH
24632: CALL_OW 302
24636: NOT
24637: PUSH
24638: LD_VAR 0 5
24642: PUSH
24643: LD_INT 1
24645: ARRAY
24646: PPUSH
24647: CALL_OW 255
24651: PUSH
24652: LD_VAR 0 1
24656: PPUSH
24657: CALL_OW 255
24661: NONEQUAL
24662: OR
24663: IFFALSE 24769
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
24665: LD_VAR 0 5
24669: PUSH
24670: LD_INT 1
24672: ARRAY
24673: PPUSH
24674: CALL_OW 305
24678: PUSH
24679: LD_VAR 0 5
24683: PUSH
24684: LD_INT 1
24686: ARRAY
24687: PPUSH
24688: CALL_OW 255
24692: PUSH
24693: LD_VAR 0 1
24697: PPUSH
24698: CALL_OW 255
24702: EQUAL
24703: AND
24704: IFFALSE 24728
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
24706: LD_VAR 0 5
24710: PUSH
24711: LD_INT 1
24713: ARRAY
24714: PPUSH
24715: LD_VAR 0 5
24719: PUSH
24720: LD_INT 2
24722: ARRAY
24723: PPUSH
24724: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
24728: LD_ADDR_EXP 92
24732: PUSH
24733: LD_EXP 92
24737: PPUSH
24738: LD_VAR 0 4
24742: PPUSH
24743: LD_EXP 92
24747: PUSH
24748: LD_VAR 0 4
24752: ARRAY
24753: PPUSH
24754: LD_VAR 0 3
24758: PPUSH
24759: CALL_OW 3
24763: PPUSH
24764: CALL_OW 1
24768: ST_TO_ADDR
// end ; end ;
24769: GO 24598
24771: POP
24772: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24773: LD_VAR 0 1
24777: PPUSH
24778: LD_EXP 92
24782: PUSH
24783: LD_VAR 0 4
24787: ARRAY
24788: PUSH
24789: LD_INT 0
24791: PLUS
24792: PPUSH
24793: CALL_OW 505
// end ;
24797: LD_VAR 0 2
24801: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
24802: LD_INT 0
24804: PPUSH
24805: PPUSH
24806: PPUSH
24807: PPUSH
// if not hack in hackTanks then
24808: LD_VAR 0 1
24812: PUSH
24813: LD_EXP 91
24817: IN
24818: NOT
24819: IFFALSE 24823
// exit ;
24821: GO 24908
// index := GetElementIndex ( hackTanks , hack ) ;
24823: LD_ADDR_VAR 0 5
24827: PUSH
24828: LD_EXP 91
24832: PPUSH
24833: LD_VAR 0 1
24837: PPUSH
24838: CALL 31666 0 2
24842: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
24843: LD_ADDR_VAR 0 4
24847: PUSH
24848: DOUBLE
24849: LD_INT 1
24851: DEC
24852: ST_TO_ADDR
24853: LD_EXP 92
24857: PUSH
24858: LD_VAR 0 5
24862: ARRAY
24863: PUSH
24864: FOR_TO
24865: IFFALSE 24906
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
24867: LD_EXP 92
24871: PUSH
24872: LD_VAR 0 5
24876: ARRAY
24877: PUSH
24878: LD_VAR 0 4
24882: ARRAY
24883: PUSH
24884: LD_INT 1
24886: ARRAY
24887: PUSH
24888: LD_VAR 0 2
24892: EQUAL
24893: IFFALSE 24904
// KillUnit ( vehicle ) ;
24895: LD_VAR 0 2
24899: PPUSH
24900: CALL_OW 66
24904: GO 24864
24906: POP
24907: POP
// end ;
24908: LD_VAR 0 3
24912: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
24913: LD_EXP 96
24917: NOT
24918: IFFALSE 24953
24920: GO 24922
24922: DISABLE
// begin initMiner := true ;
24923: LD_ADDR_EXP 96
24927: PUSH
24928: LD_INT 1
24930: ST_TO_ADDR
// minersList := [ ] ;
24931: LD_ADDR_EXP 97
24935: PUSH
24936: EMPTY
24937: ST_TO_ADDR
// minerMinesList := [ ] ;
24938: LD_ADDR_EXP 98
24942: PUSH
24943: EMPTY
24944: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
24945: LD_ADDR_EXP 99
24949: PUSH
24950: LD_INT 5
24952: ST_TO_ADDR
// end ;
24953: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
24954: LD_EXP 96
24958: PUSH
24959: LD_INT 34
24961: PUSH
24962: LD_INT 81
24964: PUSH
24965: EMPTY
24966: LIST
24967: LIST
24968: PPUSH
24969: CALL_OW 69
24973: AND
24974: IFFALSE 25435
24976: GO 24978
24978: DISABLE
24979: LD_INT 0
24981: PPUSH
24982: PPUSH
24983: PPUSH
24984: PPUSH
// begin enable ;
24985: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
24986: LD_ADDR_VAR 0 1
24990: PUSH
24991: LD_INT 34
24993: PUSH
24994: LD_INT 81
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: PPUSH
25001: CALL_OW 69
25005: PUSH
25006: FOR_IN
25007: IFFALSE 25079
// begin if not i in minersList then
25009: LD_VAR 0 1
25013: PUSH
25014: LD_EXP 97
25018: IN
25019: NOT
25020: IFFALSE 25077
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
25022: LD_ADDR_EXP 97
25026: PUSH
25027: LD_EXP 97
25031: PPUSH
25032: LD_EXP 97
25036: PUSH
25037: LD_INT 1
25039: PLUS
25040: PPUSH
25041: LD_VAR 0 1
25045: PPUSH
25046: CALL_OW 1
25050: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25051: LD_ADDR_EXP 98
25055: PUSH
25056: LD_EXP 98
25060: PPUSH
25061: LD_EXP 98
25065: PUSH
25066: LD_INT 1
25068: PLUS
25069: PPUSH
25070: EMPTY
25071: PPUSH
25072: CALL_OW 1
25076: ST_TO_ADDR
// end end ;
25077: GO 25006
25079: POP
25080: POP
// for i := minerMinesList downto 1 do
25081: LD_ADDR_VAR 0 1
25085: PUSH
25086: DOUBLE
25087: LD_EXP 98
25091: INC
25092: ST_TO_ADDR
25093: LD_INT 1
25095: PUSH
25096: FOR_DOWNTO
25097: IFFALSE 25433
// begin if IsLive ( minersList [ i ] ) then
25099: LD_EXP 97
25103: PUSH
25104: LD_VAR 0 1
25108: ARRAY
25109: PPUSH
25110: CALL_OW 300
25114: IFFALSE 25142
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
25116: LD_EXP 97
25120: PUSH
25121: LD_VAR 0 1
25125: ARRAY
25126: PPUSH
25127: LD_EXP 98
25131: PUSH
25132: LD_VAR 0 1
25136: ARRAY
25137: PPUSH
25138: CALL_OW 505
// if not minerMinesList [ i ] then
25142: LD_EXP 98
25146: PUSH
25147: LD_VAR 0 1
25151: ARRAY
25152: NOT
25153: IFFALSE 25157
// continue ;
25155: GO 25096
// for j := minerMinesList [ i ] downto 1 do
25157: LD_ADDR_VAR 0 2
25161: PUSH
25162: DOUBLE
25163: LD_EXP 98
25167: PUSH
25168: LD_VAR 0 1
25172: ARRAY
25173: INC
25174: ST_TO_ADDR
25175: LD_INT 1
25177: PUSH
25178: FOR_DOWNTO
25179: IFFALSE 25429
// begin side := GetSide ( minersList [ i ] ) ;
25181: LD_ADDR_VAR 0 3
25185: PUSH
25186: LD_EXP 97
25190: PUSH
25191: LD_VAR 0 1
25195: ARRAY
25196: PPUSH
25197: CALL_OW 255
25201: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
25202: LD_ADDR_VAR 0 4
25206: PUSH
25207: LD_EXP 98
25211: PUSH
25212: LD_VAR 0 1
25216: ARRAY
25217: PUSH
25218: LD_VAR 0 2
25222: ARRAY
25223: PUSH
25224: LD_INT 1
25226: ARRAY
25227: PPUSH
25228: LD_EXP 98
25232: PUSH
25233: LD_VAR 0 1
25237: ARRAY
25238: PUSH
25239: LD_VAR 0 2
25243: ARRAY
25244: PUSH
25245: LD_INT 2
25247: ARRAY
25248: PPUSH
25249: CALL_OW 428
25253: ST_TO_ADDR
// if not tmp then
25254: LD_VAR 0 4
25258: NOT
25259: IFFALSE 25263
// continue ;
25261: GO 25178
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
25263: LD_VAR 0 4
25267: PUSH
25268: LD_INT 81
25270: PUSH
25271: LD_VAR 0 3
25275: PUSH
25276: EMPTY
25277: LIST
25278: LIST
25279: PPUSH
25280: CALL_OW 69
25284: IN
25285: PUSH
25286: LD_EXP 98
25290: PUSH
25291: LD_VAR 0 1
25295: ARRAY
25296: PUSH
25297: LD_VAR 0 2
25301: ARRAY
25302: PUSH
25303: LD_INT 1
25305: ARRAY
25306: PPUSH
25307: LD_EXP 98
25311: PUSH
25312: LD_VAR 0 1
25316: ARRAY
25317: PUSH
25318: LD_VAR 0 2
25322: ARRAY
25323: PUSH
25324: LD_INT 2
25326: ARRAY
25327: PPUSH
25328: CALL_OW 458
25332: AND
25333: IFFALSE 25427
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
25335: LD_EXP 98
25339: PUSH
25340: LD_VAR 0 1
25344: ARRAY
25345: PUSH
25346: LD_VAR 0 2
25350: ARRAY
25351: PUSH
25352: LD_INT 1
25354: ARRAY
25355: PPUSH
25356: LD_EXP 98
25360: PUSH
25361: LD_VAR 0 1
25365: ARRAY
25366: PUSH
25367: LD_VAR 0 2
25371: ARRAY
25372: PUSH
25373: LD_INT 2
25375: ARRAY
25376: PPUSH
25377: LD_VAR 0 3
25381: PPUSH
25382: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
25386: LD_ADDR_EXP 98
25390: PUSH
25391: LD_EXP 98
25395: PPUSH
25396: LD_VAR 0 1
25400: PPUSH
25401: LD_EXP 98
25405: PUSH
25406: LD_VAR 0 1
25410: ARRAY
25411: PPUSH
25412: LD_VAR 0 2
25416: PPUSH
25417: CALL_OW 3
25421: PPUSH
25422: CALL_OW 1
25426: ST_TO_ADDR
// end ; end ;
25427: GO 25178
25429: POP
25430: POP
// end ;
25431: GO 25096
25433: POP
25434: POP
// end ;
25435: PPOPN 4
25437: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
25438: LD_INT 0
25440: PPUSH
25441: PPUSH
// result := false ;
25442: LD_ADDR_VAR 0 4
25446: PUSH
25447: LD_INT 0
25449: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
25450: LD_VAR 0 1
25454: PPUSH
25455: CALL_OW 264
25459: PUSH
25460: LD_INT 81
25462: EQUAL
25463: NOT
25464: IFFALSE 25468
// exit ;
25466: GO 25708
// index := GetElementIndex ( minersList , unit ) ;
25468: LD_ADDR_VAR 0 5
25472: PUSH
25473: LD_EXP 97
25477: PPUSH
25478: LD_VAR 0 1
25482: PPUSH
25483: CALL 31666 0 2
25487: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
25488: LD_EXP 98
25492: PUSH
25493: LD_VAR 0 5
25497: ARRAY
25498: PUSH
25499: LD_EXP 99
25503: GREATEREQUAL
25504: IFFALSE 25508
// exit ;
25506: GO 25708
// ComMoveXY ( unit , x , y ) ;
25508: LD_VAR 0 1
25512: PPUSH
25513: LD_VAR 0 2
25517: PPUSH
25518: LD_VAR 0 3
25522: PPUSH
25523: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25527: LD_INT 35
25529: PPUSH
25530: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
25534: LD_VAR 0 1
25538: PPUSH
25539: LD_VAR 0 2
25543: PPUSH
25544: LD_VAR 0 3
25548: PPUSH
25549: CALL 63050 0 3
25553: NOT
25554: PUSH
25555: LD_VAR 0 1
25559: PPUSH
25560: CALL_OW 314
25564: AND
25565: IFFALSE 25569
// exit ;
25567: GO 25708
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
25569: LD_VAR 0 2
25573: PPUSH
25574: LD_VAR 0 3
25578: PPUSH
25579: CALL_OW 428
25583: PUSH
25584: LD_VAR 0 1
25588: EQUAL
25589: PUSH
25590: LD_VAR 0 1
25594: PPUSH
25595: CALL_OW 314
25599: NOT
25600: AND
25601: IFFALSE 25527
// PlaySoundXY ( x , y , PlantMine ) ;
25603: LD_VAR 0 2
25607: PPUSH
25608: LD_VAR 0 3
25612: PPUSH
25613: LD_STRING PlantMine
25615: PPUSH
25616: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
25620: LD_VAR 0 2
25624: PPUSH
25625: LD_VAR 0 3
25629: PPUSH
25630: LD_VAR 0 1
25634: PPUSH
25635: CALL_OW 255
25639: PPUSH
25640: LD_INT 0
25642: PPUSH
25643: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
25647: LD_ADDR_EXP 98
25651: PUSH
25652: LD_EXP 98
25656: PPUSH
25657: LD_VAR 0 5
25661: PUSH
25662: LD_EXP 98
25666: PUSH
25667: LD_VAR 0 5
25671: ARRAY
25672: PUSH
25673: LD_INT 1
25675: PLUS
25676: PUSH
25677: EMPTY
25678: LIST
25679: LIST
25680: PPUSH
25681: LD_VAR 0 2
25685: PUSH
25686: LD_VAR 0 3
25690: PUSH
25691: EMPTY
25692: LIST
25693: LIST
25694: PPUSH
25695: CALL 31881 0 3
25699: ST_TO_ADDR
// result := true ;
25700: LD_ADDR_VAR 0 4
25704: PUSH
25705: LD_INT 1
25707: ST_TO_ADDR
// end ;
25708: LD_VAR 0 4
25712: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
25713: LD_INT 0
25715: PPUSH
25716: PPUSH
25717: PPUSH
// if not unit in minersList then
25718: LD_VAR 0 1
25722: PUSH
25723: LD_EXP 97
25727: IN
25728: NOT
25729: IFFALSE 25733
// exit ;
25731: GO 26125
// index := GetElementIndex ( minersList , unit ) ;
25733: LD_ADDR_VAR 0 6
25737: PUSH
25738: LD_EXP 97
25742: PPUSH
25743: LD_VAR 0 1
25747: PPUSH
25748: CALL 31666 0 2
25752: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
25753: LD_ADDR_VAR 0 5
25757: PUSH
25758: DOUBLE
25759: LD_EXP 98
25763: PUSH
25764: LD_VAR 0 6
25768: ARRAY
25769: INC
25770: ST_TO_ADDR
25771: LD_INT 1
25773: PUSH
25774: FOR_DOWNTO
25775: IFFALSE 25936
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
25777: LD_EXP 98
25781: PUSH
25782: LD_VAR 0 6
25786: ARRAY
25787: PUSH
25788: LD_VAR 0 5
25792: ARRAY
25793: PUSH
25794: LD_INT 1
25796: ARRAY
25797: PUSH
25798: LD_VAR 0 2
25802: EQUAL
25803: PUSH
25804: LD_EXP 98
25808: PUSH
25809: LD_VAR 0 6
25813: ARRAY
25814: PUSH
25815: LD_VAR 0 5
25819: ARRAY
25820: PUSH
25821: LD_INT 2
25823: ARRAY
25824: PUSH
25825: LD_VAR 0 3
25829: EQUAL
25830: AND
25831: IFFALSE 25934
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25833: LD_EXP 98
25837: PUSH
25838: LD_VAR 0 6
25842: ARRAY
25843: PUSH
25844: LD_VAR 0 5
25848: ARRAY
25849: PUSH
25850: LD_INT 1
25852: ARRAY
25853: PPUSH
25854: LD_EXP 98
25858: PUSH
25859: LD_VAR 0 6
25863: ARRAY
25864: PUSH
25865: LD_VAR 0 5
25869: ARRAY
25870: PUSH
25871: LD_INT 2
25873: ARRAY
25874: PPUSH
25875: LD_VAR 0 1
25879: PPUSH
25880: CALL_OW 255
25884: PPUSH
25885: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25889: LD_ADDR_EXP 98
25893: PUSH
25894: LD_EXP 98
25898: PPUSH
25899: LD_VAR 0 6
25903: PPUSH
25904: LD_EXP 98
25908: PUSH
25909: LD_VAR 0 6
25913: ARRAY
25914: PPUSH
25915: LD_VAR 0 5
25919: PPUSH
25920: CALL_OW 3
25924: PPUSH
25925: CALL_OW 1
25929: ST_TO_ADDR
// exit ;
25930: POP
25931: POP
25932: GO 26125
// end ; end ;
25934: GO 25774
25936: POP
25937: POP
// for i := minerMinesList [ index ] downto 1 do
25938: LD_ADDR_VAR 0 5
25942: PUSH
25943: DOUBLE
25944: LD_EXP 98
25948: PUSH
25949: LD_VAR 0 6
25953: ARRAY
25954: INC
25955: ST_TO_ADDR
25956: LD_INT 1
25958: PUSH
25959: FOR_DOWNTO
25960: IFFALSE 26123
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
25962: LD_EXP 98
25966: PUSH
25967: LD_VAR 0 6
25971: ARRAY
25972: PUSH
25973: LD_VAR 0 5
25977: ARRAY
25978: PUSH
25979: LD_INT 1
25981: ARRAY
25982: PPUSH
25983: LD_EXP 98
25987: PUSH
25988: LD_VAR 0 6
25992: ARRAY
25993: PUSH
25994: LD_VAR 0 5
25998: ARRAY
25999: PUSH
26000: LD_INT 2
26002: ARRAY
26003: PPUSH
26004: LD_VAR 0 2
26008: PPUSH
26009: LD_VAR 0 3
26013: PPUSH
26014: CALL_OW 298
26018: PUSH
26019: LD_INT 6
26021: LESS
26022: IFFALSE 26121
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26024: LD_EXP 98
26028: PUSH
26029: LD_VAR 0 6
26033: ARRAY
26034: PUSH
26035: LD_VAR 0 5
26039: ARRAY
26040: PUSH
26041: LD_INT 1
26043: ARRAY
26044: PPUSH
26045: LD_EXP 98
26049: PUSH
26050: LD_VAR 0 6
26054: ARRAY
26055: PUSH
26056: LD_VAR 0 5
26060: ARRAY
26061: PUSH
26062: LD_INT 2
26064: ARRAY
26065: PPUSH
26066: LD_VAR 0 1
26070: PPUSH
26071: CALL_OW 255
26075: PPUSH
26076: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26080: LD_ADDR_EXP 98
26084: PUSH
26085: LD_EXP 98
26089: PPUSH
26090: LD_VAR 0 6
26094: PPUSH
26095: LD_EXP 98
26099: PUSH
26100: LD_VAR 0 6
26104: ARRAY
26105: PPUSH
26106: LD_VAR 0 5
26110: PPUSH
26111: CALL_OW 3
26115: PPUSH
26116: CALL_OW 1
26120: ST_TO_ADDR
// end ; end ;
26121: GO 25959
26123: POP
26124: POP
// end ;
26125: LD_VAR 0 4
26129: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
26130: LD_INT 0
26132: PPUSH
26133: PPUSH
26134: PPUSH
26135: PPUSH
26136: PPUSH
26137: PPUSH
26138: PPUSH
26139: PPUSH
26140: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26141: LD_VAR 0 1
26145: PPUSH
26146: CALL_OW 264
26150: PUSH
26151: LD_INT 81
26153: EQUAL
26154: NOT
26155: PUSH
26156: LD_VAR 0 1
26160: PUSH
26161: LD_EXP 97
26165: IN
26166: NOT
26167: OR
26168: IFFALSE 26172
// exit ;
26170: GO 26494
// index := GetElementIndex ( minersList , unit ) ;
26172: LD_ADDR_VAR 0 6
26176: PUSH
26177: LD_EXP 97
26181: PPUSH
26182: LD_VAR 0 1
26186: PPUSH
26187: CALL 31666 0 2
26191: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
26192: LD_ADDR_VAR 0 8
26196: PUSH
26197: LD_EXP 99
26201: PUSH
26202: LD_EXP 98
26206: PUSH
26207: LD_VAR 0 6
26211: ARRAY
26212: MINUS
26213: ST_TO_ADDR
// if not minesFreeAmount then
26214: LD_VAR 0 8
26218: NOT
26219: IFFALSE 26223
// exit ;
26221: GO 26494
// tmp := [ ] ;
26223: LD_ADDR_VAR 0 7
26227: PUSH
26228: EMPTY
26229: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
26230: LD_ADDR_VAR 0 5
26234: PUSH
26235: DOUBLE
26236: LD_INT 1
26238: DEC
26239: ST_TO_ADDR
26240: LD_VAR 0 8
26244: PUSH
26245: FOR_TO
26246: IFFALSE 26441
// begin _d := rand ( 0 , 5 ) ;
26248: LD_ADDR_VAR 0 11
26252: PUSH
26253: LD_INT 0
26255: PPUSH
26256: LD_INT 5
26258: PPUSH
26259: CALL_OW 12
26263: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
26264: LD_ADDR_VAR 0 12
26268: PUSH
26269: LD_INT 2
26271: PPUSH
26272: LD_INT 6
26274: PPUSH
26275: CALL_OW 12
26279: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
26280: LD_ADDR_VAR 0 9
26284: PUSH
26285: LD_VAR 0 2
26289: PPUSH
26290: LD_VAR 0 11
26294: PPUSH
26295: LD_VAR 0 12
26299: PPUSH
26300: CALL_OW 272
26304: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
26305: LD_ADDR_VAR 0 10
26309: PUSH
26310: LD_VAR 0 3
26314: PPUSH
26315: LD_VAR 0 11
26319: PPUSH
26320: LD_VAR 0 12
26324: PPUSH
26325: CALL_OW 273
26329: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
26330: LD_VAR 0 9
26334: PPUSH
26335: LD_VAR 0 10
26339: PPUSH
26340: CALL_OW 488
26344: PUSH
26345: LD_VAR 0 9
26349: PUSH
26350: LD_VAR 0 10
26354: PUSH
26355: EMPTY
26356: LIST
26357: LIST
26358: PUSH
26359: LD_VAR 0 7
26363: IN
26364: NOT
26365: AND
26366: PUSH
26367: LD_VAR 0 9
26371: PPUSH
26372: LD_VAR 0 10
26376: PPUSH
26377: CALL_OW 458
26381: NOT
26382: AND
26383: IFFALSE 26425
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
26385: LD_ADDR_VAR 0 7
26389: PUSH
26390: LD_VAR 0 7
26394: PPUSH
26395: LD_VAR 0 7
26399: PUSH
26400: LD_INT 1
26402: PLUS
26403: PPUSH
26404: LD_VAR 0 9
26408: PUSH
26409: LD_VAR 0 10
26413: PUSH
26414: EMPTY
26415: LIST
26416: LIST
26417: PPUSH
26418: CALL_OW 1
26422: ST_TO_ADDR
26423: GO 26439
// i := i - 1 ;
26425: LD_ADDR_VAR 0 5
26429: PUSH
26430: LD_VAR 0 5
26434: PUSH
26435: LD_INT 1
26437: MINUS
26438: ST_TO_ADDR
// end ;
26439: GO 26245
26441: POP
26442: POP
// for i in tmp do
26443: LD_ADDR_VAR 0 5
26447: PUSH
26448: LD_VAR 0 7
26452: PUSH
26453: FOR_IN
26454: IFFALSE 26492
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
26456: LD_VAR 0 1
26460: PPUSH
26461: LD_VAR 0 5
26465: PUSH
26466: LD_INT 1
26468: ARRAY
26469: PPUSH
26470: LD_VAR 0 5
26474: PUSH
26475: LD_INT 2
26477: ARRAY
26478: PPUSH
26479: CALL 25438 0 3
26483: NOT
26484: IFFALSE 26490
// exit ;
26486: POP
26487: POP
26488: GO 26494
26490: GO 26453
26492: POP
26493: POP
// end ;
26494: LD_VAR 0 4
26498: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
26499: LD_INT 0
26501: PPUSH
26502: PPUSH
26503: PPUSH
26504: PPUSH
26505: PPUSH
26506: PPUSH
26507: PPUSH
// if not GetClass ( unit ) = class_sniper then
26508: LD_VAR 0 1
26512: PPUSH
26513: CALL_OW 257
26517: PUSH
26518: LD_INT 5
26520: EQUAL
26521: NOT
26522: IFFALSE 26526
// exit ;
26524: GO 26914
// dist := 8 ;
26526: LD_ADDR_VAR 0 5
26530: PUSH
26531: LD_INT 8
26533: ST_TO_ADDR
// viewRange := 12 ;
26534: LD_ADDR_VAR 0 7
26538: PUSH
26539: LD_INT 12
26541: ST_TO_ADDR
// side := GetSide ( unit ) ;
26542: LD_ADDR_VAR 0 6
26546: PUSH
26547: LD_VAR 0 1
26551: PPUSH
26552: CALL_OW 255
26556: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
26557: LD_INT 61
26559: PPUSH
26560: LD_VAR 0 6
26564: PPUSH
26565: CALL_OW 321
26569: PUSH
26570: LD_INT 2
26572: EQUAL
26573: IFFALSE 26583
// viewRange := 16 ;
26575: LD_ADDR_VAR 0 7
26579: PUSH
26580: LD_INT 16
26582: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
26583: LD_VAR 0 1
26587: PPUSH
26588: LD_VAR 0 2
26592: PPUSH
26593: LD_VAR 0 3
26597: PPUSH
26598: CALL_OW 297
26602: PUSH
26603: LD_VAR 0 5
26607: GREATER
26608: IFFALSE 26687
// begin ComMoveXY ( unit , x , y ) ;
26610: LD_VAR 0 1
26614: PPUSH
26615: LD_VAR 0 2
26619: PPUSH
26620: LD_VAR 0 3
26624: PPUSH
26625: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26629: LD_INT 35
26631: PPUSH
26632: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
26636: LD_VAR 0 1
26640: PPUSH
26641: LD_VAR 0 2
26645: PPUSH
26646: LD_VAR 0 3
26650: PPUSH
26651: CALL 63050 0 3
26655: NOT
26656: IFFALSE 26660
// exit ;
26658: GO 26914
// until GetDistUnitXY ( unit , x , y ) < dist ;
26660: LD_VAR 0 1
26664: PPUSH
26665: LD_VAR 0 2
26669: PPUSH
26670: LD_VAR 0 3
26674: PPUSH
26675: CALL_OW 297
26679: PUSH
26680: LD_VAR 0 5
26684: LESS
26685: IFFALSE 26629
// end ; ComTurnXY ( unit , x , y ) ;
26687: LD_VAR 0 1
26691: PPUSH
26692: LD_VAR 0 2
26696: PPUSH
26697: LD_VAR 0 3
26701: PPUSH
26702: CALL_OW 118
// wait ( 5 ) ;
26706: LD_INT 5
26708: PPUSH
26709: CALL_OW 67
// _d := GetDir ( unit ) ;
26713: LD_ADDR_VAR 0 10
26717: PUSH
26718: LD_VAR 0 1
26722: PPUSH
26723: CALL_OW 254
26727: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
26728: LD_ADDR_VAR 0 8
26732: PUSH
26733: LD_VAR 0 1
26737: PPUSH
26738: CALL_OW 250
26742: PPUSH
26743: LD_VAR 0 10
26747: PPUSH
26748: LD_VAR 0 5
26752: PPUSH
26753: CALL_OW 272
26757: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
26758: LD_ADDR_VAR 0 9
26762: PUSH
26763: LD_VAR 0 1
26767: PPUSH
26768: CALL_OW 251
26772: PPUSH
26773: LD_VAR 0 10
26777: PPUSH
26778: LD_VAR 0 5
26782: PPUSH
26783: CALL_OW 273
26787: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26788: LD_VAR 0 8
26792: PPUSH
26793: LD_VAR 0 9
26797: PPUSH
26798: CALL_OW 488
26802: NOT
26803: IFFALSE 26807
// exit ;
26805: GO 26914
// ComAnimCustom ( unit , 1 ) ;
26807: LD_VAR 0 1
26811: PPUSH
26812: LD_INT 1
26814: PPUSH
26815: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
26819: LD_VAR 0 8
26823: PPUSH
26824: LD_VAR 0 9
26828: PPUSH
26829: LD_VAR 0 6
26833: PPUSH
26834: LD_VAR 0 7
26838: PPUSH
26839: CALL_OW 330
// repeat wait ( 1 ) ;
26843: LD_INT 1
26845: PPUSH
26846: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
26850: LD_VAR 0 1
26854: PPUSH
26855: CALL_OW 316
26859: PUSH
26860: LD_VAR 0 1
26864: PPUSH
26865: CALL_OW 314
26869: OR
26870: PUSH
26871: LD_VAR 0 1
26875: PPUSH
26876: CALL_OW 302
26880: NOT
26881: OR
26882: PUSH
26883: LD_VAR 0 1
26887: PPUSH
26888: CALL_OW 301
26892: OR
26893: IFFALSE 26843
// RemoveSeeing ( _x , _y , side ) ;
26895: LD_VAR 0 8
26899: PPUSH
26900: LD_VAR 0 9
26904: PPUSH
26905: LD_VAR 0 6
26909: PPUSH
26910: CALL_OW 331
// end ; end_of_file
26914: LD_VAR 0 4
26918: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
26919: LD_INT 0
26921: PPUSH
26922: PPUSH
// if exist_mode then
26923: LD_VAR 0 2
26927: IFFALSE 26952
// unit := CreateCharacter ( prefix & ident ) else
26929: LD_ADDR_VAR 0 5
26933: PUSH
26934: LD_VAR 0 3
26938: PUSH
26939: LD_VAR 0 1
26943: STR
26944: PPUSH
26945: CALL_OW 34
26949: ST_TO_ADDR
26950: GO 26967
// unit := NewCharacter ( ident ) ;
26952: LD_ADDR_VAR 0 5
26956: PUSH
26957: LD_VAR 0 1
26961: PPUSH
26962: CALL_OW 25
26966: ST_TO_ADDR
// result := unit ;
26967: LD_ADDR_VAR 0 4
26971: PUSH
26972: LD_VAR 0 5
26976: ST_TO_ADDR
// end ;
26977: LD_VAR 0 4
26981: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
26982: LD_INT 0
26984: PPUSH
26985: PPUSH
// if not side or not nation then
26986: LD_VAR 0 1
26990: NOT
26991: PUSH
26992: LD_VAR 0 2
26996: NOT
26997: OR
26998: IFFALSE 27002
// exit ;
27000: GO 27770
// case nation of nation_american :
27002: LD_VAR 0 2
27006: PUSH
27007: LD_INT 1
27009: DOUBLE
27010: EQUAL
27011: IFTRUE 27015
27013: GO 27229
27015: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
27016: LD_ADDR_VAR 0 4
27020: PUSH
27021: LD_INT 35
27023: PUSH
27024: LD_INT 45
27026: PUSH
27027: LD_INT 46
27029: PUSH
27030: LD_INT 47
27032: PUSH
27033: LD_INT 82
27035: PUSH
27036: LD_INT 83
27038: PUSH
27039: LD_INT 84
27041: PUSH
27042: LD_INT 85
27044: PUSH
27045: LD_INT 86
27047: PUSH
27048: LD_INT 1
27050: PUSH
27051: LD_INT 2
27053: PUSH
27054: LD_INT 6
27056: PUSH
27057: LD_INT 15
27059: PUSH
27060: LD_INT 16
27062: PUSH
27063: LD_INT 7
27065: PUSH
27066: LD_INT 12
27068: PUSH
27069: LD_INT 13
27071: PUSH
27072: LD_INT 10
27074: PUSH
27075: LD_INT 14
27077: PUSH
27078: LD_INT 20
27080: PUSH
27081: LD_INT 21
27083: PUSH
27084: LD_INT 22
27086: PUSH
27087: LD_INT 25
27089: PUSH
27090: LD_INT 32
27092: PUSH
27093: LD_INT 27
27095: PUSH
27096: LD_INT 36
27098: PUSH
27099: LD_INT 69
27101: PUSH
27102: LD_INT 39
27104: PUSH
27105: LD_INT 34
27107: PUSH
27108: LD_INT 40
27110: PUSH
27111: LD_INT 48
27113: PUSH
27114: LD_INT 49
27116: PUSH
27117: LD_INT 50
27119: PUSH
27120: LD_INT 51
27122: PUSH
27123: LD_INT 52
27125: PUSH
27126: LD_INT 53
27128: PUSH
27129: LD_INT 54
27131: PUSH
27132: LD_INT 55
27134: PUSH
27135: LD_INT 56
27137: PUSH
27138: LD_INT 57
27140: PUSH
27141: LD_INT 58
27143: PUSH
27144: LD_INT 59
27146: PUSH
27147: LD_INT 60
27149: PUSH
27150: LD_INT 61
27152: PUSH
27153: LD_INT 62
27155: PUSH
27156: LD_INT 80
27158: PUSH
27159: LD_INT 82
27161: PUSH
27162: LD_INT 83
27164: PUSH
27165: LD_INT 84
27167: PUSH
27168: LD_INT 85
27170: PUSH
27171: LD_INT 86
27173: PUSH
27174: EMPTY
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: LIST
27189: LIST
27190: LIST
27191: LIST
27192: LIST
27193: LIST
27194: LIST
27195: LIST
27196: LIST
27197: LIST
27198: LIST
27199: LIST
27200: LIST
27201: LIST
27202: LIST
27203: LIST
27204: LIST
27205: LIST
27206: LIST
27207: LIST
27208: LIST
27209: LIST
27210: LIST
27211: LIST
27212: LIST
27213: LIST
27214: LIST
27215: LIST
27216: LIST
27217: LIST
27218: LIST
27219: LIST
27220: LIST
27221: LIST
27222: LIST
27223: LIST
27224: LIST
27225: LIST
27226: ST_TO_ADDR
27227: GO 27694
27229: LD_INT 2
27231: DOUBLE
27232: EQUAL
27233: IFTRUE 27237
27235: GO 27463
27237: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
27238: LD_ADDR_VAR 0 4
27242: PUSH
27243: LD_INT 35
27245: PUSH
27246: LD_INT 45
27248: PUSH
27249: LD_INT 46
27251: PUSH
27252: LD_INT 47
27254: PUSH
27255: LD_INT 82
27257: PUSH
27258: LD_INT 83
27260: PUSH
27261: LD_INT 84
27263: PUSH
27264: LD_INT 85
27266: PUSH
27267: LD_INT 87
27269: PUSH
27270: LD_INT 70
27272: PUSH
27273: LD_INT 1
27275: PUSH
27276: LD_INT 11
27278: PUSH
27279: LD_INT 3
27281: PUSH
27282: LD_INT 4
27284: PUSH
27285: LD_INT 5
27287: PUSH
27288: LD_INT 6
27290: PUSH
27291: LD_INT 15
27293: PUSH
27294: LD_INT 18
27296: PUSH
27297: LD_INT 7
27299: PUSH
27300: LD_INT 17
27302: PUSH
27303: LD_INT 8
27305: PUSH
27306: LD_INT 20
27308: PUSH
27309: LD_INT 21
27311: PUSH
27312: LD_INT 22
27314: PUSH
27315: LD_INT 72
27317: PUSH
27318: LD_INT 26
27320: PUSH
27321: LD_INT 69
27323: PUSH
27324: LD_INT 39
27326: PUSH
27327: LD_INT 40
27329: PUSH
27330: LD_INT 41
27332: PUSH
27333: LD_INT 42
27335: PUSH
27336: LD_INT 43
27338: PUSH
27339: LD_INT 48
27341: PUSH
27342: LD_INT 49
27344: PUSH
27345: LD_INT 50
27347: PUSH
27348: LD_INT 51
27350: PUSH
27351: LD_INT 52
27353: PUSH
27354: LD_INT 53
27356: PUSH
27357: LD_INT 54
27359: PUSH
27360: LD_INT 55
27362: PUSH
27363: LD_INT 56
27365: PUSH
27366: LD_INT 60
27368: PUSH
27369: LD_INT 61
27371: PUSH
27372: LD_INT 62
27374: PUSH
27375: LD_INT 66
27377: PUSH
27378: LD_INT 67
27380: PUSH
27381: LD_INT 68
27383: PUSH
27384: LD_INT 81
27386: PUSH
27387: LD_INT 82
27389: PUSH
27390: LD_INT 83
27392: PUSH
27393: LD_INT 84
27395: PUSH
27396: LD_INT 85
27398: PUSH
27399: LD_INT 87
27401: PUSH
27402: LD_INT 88
27404: PUSH
27405: EMPTY
27406: LIST
27407: LIST
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: LIST
27421: LIST
27422: LIST
27423: LIST
27424: LIST
27425: LIST
27426: LIST
27427: LIST
27428: LIST
27429: LIST
27430: LIST
27431: LIST
27432: LIST
27433: LIST
27434: LIST
27435: LIST
27436: LIST
27437: LIST
27438: LIST
27439: LIST
27440: LIST
27441: LIST
27442: LIST
27443: LIST
27444: LIST
27445: LIST
27446: LIST
27447: LIST
27448: LIST
27449: LIST
27450: LIST
27451: LIST
27452: LIST
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: LIST
27458: LIST
27459: LIST
27460: ST_TO_ADDR
27461: GO 27694
27463: LD_INT 3
27465: DOUBLE
27466: EQUAL
27467: IFTRUE 27471
27469: GO 27693
27471: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27472: LD_ADDR_VAR 0 4
27476: PUSH
27477: LD_INT 46
27479: PUSH
27480: LD_INT 47
27482: PUSH
27483: LD_INT 1
27485: PUSH
27486: LD_INT 2
27488: PUSH
27489: LD_INT 82
27491: PUSH
27492: LD_INT 83
27494: PUSH
27495: LD_INT 84
27497: PUSH
27498: LD_INT 85
27500: PUSH
27501: LD_INT 86
27503: PUSH
27504: LD_INT 11
27506: PUSH
27507: LD_INT 9
27509: PUSH
27510: LD_INT 20
27512: PUSH
27513: LD_INT 19
27515: PUSH
27516: LD_INT 21
27518: PUSH
27519: LD_INT 24
27521: PUSH
27522: LD_INT 22
27524: PUSH
27525: LD_INT 25
27527: PUSH
27528: LD_INT 28
27530: PUSH
27531: LD_INT 29
27533: PUSH
27534: LD_INT 30
27536: PUSH
27537: LD_INT 31
27539: PUSH
27540: LD_INT 37
27542: PUSH
27543: LD_INT 38
27545: PUSH
27546: LD_INT 32
27548: PUSH
27549: LD_INT 27
27551: PUSH
27552: LD_INT 33
27554: PUSH
27555: LD_INT 69
27557: PUSH
27558: LD_INT 39
27560: PUSH
27561: LD_INT 34
27563: PUSH
27564: LD_INT 40
27566: PUSH
27567: LD_INT 71
27569: PUSH
27570: LD_INT 23
27572: PUSH
27573: LD_INT 44
27575: PUSH
27576: LD_INT 48
27578: PUSH
27579: LD_INT 49
27581: PUSH
27582: LD_INT 50
27584: PUSH
27585: LD_INT 51
27587: PUSH
27588: LD_INT 52
27590: PUSH
27591: LD_INT 53
27593: PUSH
27594: LD_INT 54
27596: PUSH
27597: LD_INT 55
27599: PUSH
27600: LD_INT 56
27602: PUSH
27603: LD_INT 57
27605: PUSH
27606: LD_INT 58
27608: PUSH
27609: LD_INT 59
27611: PUSH
27612: LD_INT 63
27614: PUSH
27615: LD_INT 64
27617: PUSH
27618: LD_INT 65
27620: PUSH
27621: LD_INT 82
27623: PUSH
27624: LD_INT 83
27626: PUSH
27627: LD_INT 84
27629: PUSH
27630: LD_INT 85
27632: PUSH
27633: LD_INT 86
27635: PUSH
27636: EMPTY
27637: LIST
27638: LIST
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: LIST
27650: LIST
27651: LIST
27652: LIST
27653: LIST
27654: LIST
27655: LIST
27656: LIST
27657: LIST
27658: LIST
27659: LIST
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: LIST
27665: LIST
27666: LIST
27667: LIST
27668: LIST
27669: LIST
27670: LIST
27671: LIST
27672: LIST
27673: LIST
27674: LIST
27675: LIST
27676: LIST
27677: LIST
27678: LIST
27679: LIST
27680: LIST
27681: LIST
27682: LIST
27683: LIST
27684: LIST
27685: LIST
27686: LIST
27687: LIST
27688: LIST
27689: LIST
27690: ST_TO_ADDR
27691: GO 27694
27693: POP
// if state > - 1 and state < 3 then
27694: LD_VAR 0 3
27698: PUSH
27699: LD_INT 1
27701: NEG
27702: GREATER
27703: PUSH
27704: LD_VAR 0 3
27708: PUSH
27709: LD_INT 3
27711: LESS
27712: AND
27713: IFFALSE 27770
// for i in result do
27715: LD_ADDR_VAR 0 5
27719: PUSH
27720: LD_VAR 0 4
27724: PUSH
27725: FOR_IN
27726: IFFALSE 27768
// if GetTech ( i , side ) <> state then
27728: LD_VAR 0 5
27732: PPUSH
27733: LD_VAR 0 1
27737: PPUSH
27738: CALL_OW 321
27742: PUSH
27743: LD_VAR 0 3
27747: NONEQUAL
27748: IFFALSE 27766
// result := result diff i ;
27750: LD_ADDR_VAR 0 4
27754: PUSH
27755: LD_VAR 0 4
27759: PUSH
27760: LD_VAR 0 5
27764: DIFF
27765: ST_TO_ADDR
27766: GO 27725
27768: POP
27769: POP
// end ;
27770: LD_VAR 0 4
27774: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
27775: LD_INT 0
27777: PPUSH
27778: PPUSH
27779: PPUSH
// result := true ;
27780: LD_ADDR_VAR 0 3
27784: PUSH
27785: LD_INT 1
27787: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
27788: LD_ADDR_VAR 0 5
27792: PUSH
27793: LD_VAR 0 2
27797: PPUSH
27798: CALL_OW 480
27802: ST_TO_ADDR
// if not tmp then
27803: LD_VAR 0 5
27807: NOT
27808: IFFALSE 27812
// exit ;
27810: GO 27861
// for i in tmp do
27812: LD_ADDR_VAR 0 4
27816: PUSH
27817: LD_VAR 0 5
27821: PUSH
27822: FOR_IN
27823: IFFALSE 27859
// if GetTech ( i , side ) <> state_researched then
27825: LD_VAR 0 4
27829: PPUSH
27830: LD_VAR 0 1
27834: PPUSH
27835: CALL_OW 321
27839: PUSH
27840: LD_INT 2
27842: NONEQUAL
27843: IFFALSE 27857
// begin result := false ;
27845: LD_ADDR_VAR 0 3
27849: PUSH
27850: LD_INT 0
27852: ST_TO_ADDR
// exit ;
27853: POP
27854: POP
27855: GO 27861
// end ;
27857: GO 27822
27859: POP
27860: POP
// end ;
27861: LD_VAR 0 3
27865: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
27866: LD_INT 0
27868: PPUSH
27869: PPUSH
27870: PPUSH
27871: PPUSH
27872: PPUSH
27873: PPUSH
27874: PPUSH
27875: PPUSH
27876: PPUSH
27877: PPUSH
27878: PPUSH
27879: PPUSH
27880: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
27881: LD_VAR 0 1
27885: NOT
27886: PUSH
27887: LD_VAR 0 1
27891: PPUSH
27892: CALL_OW 257
27896: PUSH
27897: LD_INT 9
27899: NONEQUAL
27900: OR
27901: IFFALSE 27905
// exit ;
27903: GO 28478
// side := GetSide ( unit ) ;
27905: LD_ADDR_VAR 0 9
27909: PUSH
27910: LD_VAR 0 1
27914: PPUSH
27915: CALL_OW 255
27919: ST_TO_ADDR
// tech_space := tech_spacanom ;
27920: LD_ADDR_VAR 0 12
27924: PUSH
27925: LD_INT 29
27927: ST_TO_ADDR
// tech_time := tech_taurad ;
27928: LD_ADDR_VAR 0 13
27932: PUSH
27933: LD_INT 28
27935: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
27936: LD_ADDR_VAR 0 11
27940: PUSH
27941: LD_VAR 0 1
27945: PPUSH
27946: CALL_OW 310
27950: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
27951: LD_VAR 0 11
27955: PPUSH
27956: CALL_OW 247
27960: PUSH
27961: LD_INT 2
27963: EQUAL
27964: IFFALSE 27968
// exit ;
27966: GO 28478
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27968: LD_ADDR_VAR 0 8
27972: PUSH
27973: LD_INT 81
27975: PUSH
27976: LD_VAR 0 9
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: PUSH
27985: LD_INT 3
27987: PUSH
27988: LD_INT 21
27990: PUSH
27991: LD_INT 3
27993: PUSH
27994: EMPTY
27995: LIST
27996: LIST
27997: PUSH
27998: EMPTY
27999: LIST
28000: LIST
28001: PUSH
28002: EMPTY
28003: LIST
28004: LIST
28005: PPUSH
28006: CALL_OW 69
28010: ST_TO_ADDR
// if not tmp then
28011: LD_VAR 0 8
28015: NOT
28016: IFFALSE 28020
// exit ;
28018: GO 28478
// if in_unit then
28020: LD_VAR 0 11
28024: IFFALSE 28048
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28026: LD_ADDR_VAR 0 10
28030: PUSH
28031: LD_VAR 0 8
28035: PPUSH
28036: LD_VAR 0 11
28040: PPUSH
28041: CALL_OW 74
28045: ST_TO_ADDR
28046: GO 28068
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28048: LD_ADDR_VAR 0 10
28052: PUSH
28053: LD_VAR 0 8
28057: PPUSH
28058: LD_VAR 0 1
28062: PPUSH
28063: CALL_OW 74
28067: ST_TO_ADDR
// if not enemy then
28068: LD_VAR 0 10
28072: NOT
28073: IFFALSE 28077
// exit ;
28075: GO 28478
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28077: LD_VAR 0 11
28081: PUSH
28082: LD_VAR 0 11
28086: PPUSH
28087: LD_VAR 0 10
28091: PPUSH
28092: CALL_OW 296
28096: PUSH
28097: LD_INT 13
28099: GREATER
28100: AND
28101: PUSH
28102: LD_VAR 0 1
28106: PPUSH
28107: LD_VAR 0 10
28111: PPUSH
28112: CALL_OW 296
28116: PUSH
28117: LD_INT 12
28119: GREATER
28120: OR
28121: IFFALSE 28125
// exit ;
28123: GO 28478
// missile := [ 1 ] ;
28125: LD_ADDR_VAR 0 14
28129: PUSH
28130: LD_INT 1
28132: PUSH
28133: EMPTY
28134: LIST
28135: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28136: LD_VAR 0 9
28140: PPUSH
28141: LD_VAR 0 12
28145: PPUSH
28146: CALL_OW 325
28150: IFFALSE 28179
// missile := Replace ( missile , missile + 1 , 2 ) ;
28152: LD_ADDR_VAR 0 14
28156: PUSH
28157: LD_VAR 0 14
28161: PPUSH
28162: LD_VAR 0 14
28166: PUSH
28167: LD_INT 1
28169: PLUS
28170: PPUSH
28171: LD_INT 2
28173: PPUSH
28174: CALL_OW 1
28178: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28179: LD_VAR 0 9
28183: PPUSH
28184: LD_VAR 0 13
28188: PPUSH
28189: CALL_OW 325
28193: PUSH
28194: LD_VAR 0 10
28198: PPUSH
28199: CALL_OW 255
28203: PPUSH
28204: LD_VAR 0 13
28208: PPUSH
28209: CALL_OW 325
28213: NOT
28214: AND
28215: IFFALSE 28244
// missile := Replace ( missile , missile + 1 , 3 ) ;
28217: LD_ADDR_VAR 0 14
28221: PUSH
28222: LD_VAR 0 14
28226: PPUSH
28227: LD_VAR 0 14
28231: PUSH
28232: LD_INT 1
28234: PLUS
28235: PPUSH
28236: LD_INT 3
28238: PPUSH
28239: CALL_OW 1
28243: ST_TO_ADDR
// if missile < 2 then
28244: LD_VAR 0 14
28248: PUSH
28249: LD_INT 2
28251: LESS
28252: IFFALSE 28256
// exit ;
28254: GO 28478
// x := GetX ( enemy ) ;
28256: LD_ADDR_VAR 0 4
28260: PUSH
28261: LD_VAR 0 10
28265: PPUSH
28266: CALL_OW 250
28270: ST_TO_ADDR
// y := GetY ( enemy ) ;
28271: LD_ADDR_VAR 0 5
28275: PUSH
28276: LD_VAR 0 10
28280: PPUSH
28281: CALL_OW 251
28285: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28286: LD_ADDR_VAR 0 6
28290: PUSH
28291: LD_VAR 0 4
28295: PUSH
28296: LD_INT 1
28298: NEG
28299: PPUSH
28300: LD_INT 1
28302: PPUSH
28303: CALL_OW 12
28307: PLUS
28308: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28309: LD_ADDR_VAR 0 7
28313: PUSH
28314: LD_VAR 0 5
28318: PUSH
28319: LD_INT 1
28321: NEG
28322: PPUSH
28323: LD_INT 1
28325: PPUSH
28326: CALL_OW 12
28330: PLUS
28331: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28332: LD_VAR 0 6
28336: PPUSH
28337: LD_VAR 0 7
28341: PPUSH
28342: CALL_OW 488
28346: NOT
28347: IFFALSE 28369
// begin _x := x ;
28349: LD_ADDR_VAR 0 6
28353: PUSH
28354: LD_VAR 0 4
28358: ST_TO_ADDR
// _y := y ;
28359: LD_ADDR_VAR 0 7
28363: PUSH
28364: LD_VAR 0 5
28368: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28369: LD_ADDR_VAR 0 3
28373: PUSH
28374: LD_INT 1
28376: PPUSH
28377: LD_VAR 0 14
28381: PPUSH
28382: CALL_OW 12
28386: ST_TO_ADDR
// case i of 1 :
28387: LD_VAR 0 3
28391: PUSH
28392: LD_INT 1
28394: DOUBLE
28395: EQUAL
28396: IFTRUE 28400
28398: GO 28417
28400: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28401: LD_VAR 0 1
28405: PPUSH
28406: LD_VAR 0 10
28410: PPUSH
28411: CALL_OW 115
28415: GO 28478
28417: LD_INT 2
28419: DOUBLE
28420: EQUAL
28421: IFTRUE 28425
28423: GO 28447
28425: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28426: LD_VAR 0 1
28430: PPUSH
28431: LD_VAR 0 6
28435: PPUSH
28436: LD_VAR 0 7
28440: PPUSH
28441: CALL_OW 153
28445: GO 28478
28447: LD_INT 3
28449: DOUBLE
28450: EQUAL
28451: IFTRUE 28455
28453: GO 28477
28455: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28456: LD_VAR 0 1
28460: PPUSH
28461: LD_VAR 0 6
28465: PPUSH
28466: LD_VAR 0 7
28470: PPUSH
28471: CALL_OW 154
28475: GO 28478
28477: POP
// end ;
28478: LD_VAR 0 2
28482: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28483: LD_INT 0
28485: PPUSH
28486: PPUSH
28487: PPUSH
28488: PPUSH
28489: PPUSH
28490: PPUSH
// if not unit or not building then
28491: LD_VAR 0 1
28495: NOT
28496: PUSH
28497: LD_VAR 0 2
28501: NOT
28502: OR
28503: IFFALSE 28507
// exit ;
28505: GO 28665
// x := GetX ( building ) ;
28507: LD_ADDR_VAR 0 5
28511: PUSH
28512: LD_VAR 0 2
28516: PPUSH
28517: CALL_OW 250
28521: ST_TO_ADDR
// y := GetY ( building ) ;
28522: LD_ADDR_VAR 0 6
28526: PUSH
28527: LD_VAR 0 2
28531: PPUSH
28532: CALL_OW 251
28536: ST_TO_ADDR
// for i = 0 to 5 do
28537: LD_ADDR_VAR 0 4
28541: PUSH
28542: DOUBLE
28543: LD_INT 0
28545: DEC
28546: ST_TO_ADDR
28547: LD_INT 5
28549: PUSH
28550: FOR_TO
28551: IFFALSE 28663
// begin _x := ShiftX ( x , i , 3 ) ;
28553: LD_ADDR_VAR 0 7
28557: PUSH
28558: LD_VAR 0 5
28562: PPUSH
28563: LD_VAR 0 4
28567: PPUSH
28568: LD_INT 3
28570: PPUSH
28571: CALL_OW 272
28575: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28576: LD_ADDR_VAR 0 8
28580: PUSH
28581: LD_VAR 0 6
28585: PPUSH
28586: LD_VAR 0 4
28590: PPUSH
28591: LD_INT 3
28593: PPUSH
28594: CALL_OW 273
28598: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28599: LD_VAR 0 7
28603: PPUSH
28604: LD_VAR 0 8
28608: PPUSH
28609: CALL_OW 488
28613: NOT
28614: IFFALSE 28618
// continue ;
28616: GO 28550
// if HexInfo ( _x , _y ) = 0 then
28618: LD_VAR 0 7
28622: PPUSH
28623: LD_VAR 0 8
28627: PPUSH
28628: CALL_OW 428
28632: PUSH
28633: LD_INT 0
28635: EQUAL
28636: IFFALSE 28661
// begin ComMoveXY ( unit , _x , _y ) ;
28638: LD_VAR 0 1
28642: PPUSH
28643: LD_VAR 0 7
28647: PPUSH
28648: LD_VAR 0 8
28652: PPUSH
28653: CALL_OW 111
// exit ;
28657: POP
28658: POP
28659: GO 28665
// end ; end ;
28661: GO 28550
28663: POP
28664: POP
// end ;
28665: LD_VAR 0 3
28669: RET
// export function ScanBase ( side , base_area ) ; begin
28670: LD_INT 0
28672: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28673: LD_ADDR_VAR 0 3
28677: PUSH
28678: LD_VAR 0 2
28682: PPUSH
28683: LD_INT 81
28685: PUSH
28686: LD_VAR 0 1
28690: PUSH
28691: EMPTY
28692: LIST
28693: LIST
28694: PPUSH
28695: CALL_OW 70
28699: ST_TO_ADDR
// end ;
28700: LD_VAR 0 3
28704: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28705: LD_INT 0
28707: PPUSH
28708: PPUSH
28709: PPUSH
28710: PPUSH
// result := false ;
28711: LD_ADDR_VAR 0 2
28715: PUSH
28716: LD_INT 0
28718: ST_TO_ADDR
// side := GetSide ( unit ) ;
28719: LD_ADDR_VAR 0 3
28723: PUSH
28724: LD_VAR 0 1
28728: PPUSH
28729: CALL_OW 255
28733: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28734: LD_ADDR_VAR 0 4
28738: PUSH
28739: LD_VAR 0 1
28743: PPUSH
28744: CALL_OW 248
28748: ST_TO_ADDR
// case nat of 1 :
28749: LD_VAR 0 4
28753: PUSH
28754: LD_INT 1
28756: DOUBLE
28757: EQUAL
28758: IFTRUE 28762
28760: GO 28773
28762: POP
// tech := tech_lassight ; 2 :
28763: LD_ADDR_VAR 0 5
28767: PUSH
28768: LD_INT 12
28770: ST_TO_ADDR
28771: GO 28812
28773: LD_INT 2
28775: DOUBLE
28776: EQUAL
28777: IFTRUE 28781
28779: GO 28792
28781: POP
// tech := tech_mortar ; 3 :
28782: LD_ADDR_VAR 0 5
28786: PUSH
28787: LD_INT 41
28789: ST_TO_ADDR
28790: GO 28812
28792: LD_INT 3
28794: DOUBLE
28795: EQUAL
28796: IFTRUE 28800
28798: GO 28811
28800: POP
// tech := tech_bazooka ; end ;
28801: LD_ADDR_VAR 0 5
28805: PUSH
28806: LD_INT 44
28808: ST_TO_ADDR
28809: GO 28812
28811: POP
// if Researched ( side , tech ) then
28812: LD_VAR 0 3
28816: PPUSH
28817: LD_VAR 0 5
28821: PPUSH
28822: CALL_OW 325
28826: IFFALSE 28853
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
28828: LD_ADDR_VAR 0 2
28832: PUSH
28833: LD_INT 5
28835: PUSH
28836: LD_INT 8
28838: PUSH
28839: LD_INT 9
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: LIST
28846: PUSH
28847: LD_VAR 0 4
28851: ARRAY
28852: ST_TO_ADDR
// end ;
28853: LD_VAR 0 2
28857: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
28858: LD_INT 0
28860: PPUSH
28861: PPUSH
28862: PPUSH
// if not mines then
28863: LD_VAR 0 2
28867: NOT
28868: IFFALSE 28872
// exit ;
28870: GO 29016
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28872: LD_ADDR_VAR 0 5
28876: PUSH
28877: LD_INT 81
28879: PUSH
28880: LD_VAR 0 1
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: PUSH
28889: LD_INT 3
28891: PUSH
28892: LD_INT 21
28894: PUSH
28895: LD_INT 3
28897: PUSH
28898: EMPTY
28899: LIST
28900: LIST
28901: PUSH
28902: EMPTY
28903: LIST
28904: LIST
28905: PUSH
28906: EMPTY
28907: LIST
28908: LIST
28909: PPUSH
28910: CALL_OW 69
28914: ST_TO_ADDR
// for i in mines do
28915: LD_ADDR_VAR 0 4
28919: PUSH
28920: LD_VAR 0 2
28924: PUSH
28925: FOR_IN
28926: IFFALSE 29014
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
28928: LD_VAR 0 4
28932: PUSH
28933: LD_INT 1
28935: ARRAY
28936: PPUSH
28937: LD_VAR 0 4
28941: PUSH
28942: LD_INT 2
28944: ARRAY
28945: PPUSH
28946: CALL_OW 458
28950: NOT
28951: IFFALSE 28955
// continue ;
28953: GO 28925
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
28955: LD_VAR 0 4
28959: PUSH
28960: LD_INT 1
28962: ARRAY
28963: PPUSH
28964: LD_VAR 0 4
28968: PUSH
28969: LD_INT 2
28971: ARRAY
28972: PPUSH
28973: CALL_OW 428
28977: PUSH
28978: LD_VAR 0 5
28982: IN
28983: IFFALSE 29012
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
28985: LD_VAR 0 4
28989: PUSH
28990: LD_INT 1
28992: ARRAY
28993: PPUSH
28994: LD_VAR 0 4
28998: PUSH
28999: LD_INT 2
29001: ARRAY
29002: PPUSH
29003: LD_VAR 0 1
29007: PPUSH
29008: CALL_OW 456
// end ;
29012: GO 28925
29014: POP
29015: POP
// end ;
29016: LD_VAR 0 3
29020: RET
// export function Count ( array ) ; begin
29021: LD_INT 0
29023: PPUSH
// result := array + 0 ;
29024: LD_ADDR_VAR 0 2
29028: PUSH
29029: LD_VAR 0 1
29033: PUSH
29034: LD_INT 0
29036: PLUS
29037: ST_TO_ADDR
// end ;
29038: LD_VAR 0 2
29042: RET
// export function IsEmpty ( building ) ; begin
29043: LD_INT 0
29045: PPUSH
// if not building then
29046: LD_VAR 0 1
29050: NOT
29051: IFFALSE 29055
// exit ;
29053: GO 29098
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29055: LD_ADDR_VAR 0 2
29059: PUSH
29060: LD_VAR 0 1
29064: PUSH
29065: LD_INT 22
29067: PUSH
29068: LD_VAR 0 1
29072: PPUSH
29073: CALL_OW 255
29077: PUSH
29078: EMPTY
29079: LIST
29080: LIST
29081: PUSH
29082: LD_INT 58
29084: PUSH
29085: EMPTY
29086: LIST
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: PPUSH
29092: CALL_OW 69
29096: IN
29097: ST_TO_ADDR
// end ;
29098: LD_VAR 0 2
29102: RET
// export function IsNotFull ( building ) ; var places ; begin
29103: LD_INT 0
29105: PPUSH
29106: PPUSH
// if not building then
29107: LD_VAR 0 1
29111: NOT
29112: IFFALSE 29116
// exit ;
29114: GO 29144
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
29116: LD_ADDR_VAR 0 2
29120: PUSH
29121: LD_VAR 0 1
29125: PPUSH
29126: LD_INT 3
29128: PUSH
29129: LD_INT 62
29131: PUSH
29132: EMPTY
29133: LIST
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PPUSH
29139: CALL_OW 72
29143: ST_TO_ADDR
// end ;
29144: LD_VAR 0 2
29148: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29149: LD_INT 0
29151: PPUSH
29152: PPUSH
29153: PPUSH
29154: PPUSH
// tmp := [ ] ;
29155: LD_ADDR_VAR 0 3
29159: PUSH
29160: EMPTY
29161: ST_TO_ADDR
// list := [ ] ;
29162: LD_ADDR_VAR 0 5
29166: PUSH
29167: EMPTY
29168: ST_TO_ADDR
// for i = 16 to 25 do
29169: LD_ADDR_VAR 0 4
29173: PUSH
29174: DOUBLE
29175: LD_INT 16
29177: DEC
29178: ST_TO_ADDR
29179: LD_INT 25
29181: PUSH
29182: FOR_TO
29183: IFFALSE 29256
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29185: LD_ADDR_VAR 0 3
29189: PUSH
29190: LD_VAR 0 3
29194: PUSH
29195: LD_INT 22
29197: PUSH
29198: LD_VAR 0 1
29202: PPUSH
29203: CALL_OW 255
29207: PUSH
29208: EMPTY
29209: LIST
29210: LIST
29211: PUSH
29212: LD_INT 91
29214: PUSH
29215: LD_VAR 0 1
29219: PUSH
29220: LD_INT 6
29222: PUSH
29223: EMPTY
29224: LIST
29225: LIST
29226: LIST
29227: PUSH
29228: LD_INT 30
29230: PUSH
29231: LD_VAR 0 4
29235: PUSH
29236: EMPTY
29237: LIST
29238: LIST
29239: PUSH
29240: EMPTY
29241: LIST
29242: LIST
29243: LIST
29244: PUSH
29245: EMPTY
29246: LIST
29247: PPUSH
29248: CALL_OW 69
29252: ADD
29253: ST_TO_ADDR
29254: GO 29182
29256: POP
29257: POP
// for i = 1 to tmp do
29258: LD_ADDR_VAR 0 4
29262: PUSH
29263: DOUBLE
29264: LD_INT 1
29266: DEC
29267: ST_TO_ADDR
29268: LD_VAR 0 3
29272: PUSH
29273: FOR_TO
29274: IFFALSE 29362
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29276: LD_ADDR_VAR 0 5
29280: PUSH
29281: LD_VAR 0 5
29285: PUSH
29286: LD_VAR 0 3
29290: PUSH
29291: LD_VAR 0 4
29295: ARRAY
29296: PPUSH
29297: CALL_OW 266
29301: PUSH
29302: LD_VAR 0 3
29306: PUSH
29307: LD_VAR 0 4
29311: ARRAY
29312: PPUSH
29313: CALL_OW 250
29317: PUSH
29318: LD_VAR 0 3
29322: PUSH
29323: LD_VAR 0 4
29327: ARRAY
29328: PPUSH
29329: CALL_OW 251
29333: PUSH
29334: LD_VAR 0 3
29338: PUSH
29339: LD_VAR 0 4
29343: ARRAY
29344: PPUSH
29345: CALL_OW 254
29349: PUSH
29350: EMPTY
29351: LIST
29352: LIST
29353: LIST
29354: LIST
29355: PUSH
29356: EMPTY
29357: LIST
29358: ADD
29359: ST_TO_ADDR
29360: GO 29273
29362: POP
29363: POP
// result := list ;
29364: LD_ADDR_VAR 0 2
29368: PUSH
29369: LD_VAR 0 5
29373: ST_TO_ADDR
// end ;
29374: LD_VAR 0 2
29378: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29379: LD_INT 0
29381: PPUSH
29382: PPUSH
29383: PPUSH
29384: PPUSH
29385: PPUSH
29386: PPUSH
29387: PPUSH
// if not factory then
29388: LD_VAR 0 1
29392: NOT
29393: IFFALSE 29397
// exit ;
29395: GO 29990
// if control = control_apeman then
29397: LD_VAR 0 4
29401: PUSH
29402: LD_INT 5
29404: EQUAL
29405: IFFALSE 29514
// begin tmp := UnitsInside ( factory ) ;
29407: LD_ADDR_VAR 0 8
29411: PUSH
29412: LD_VAR 0 1
29416: PPUSH
29417: CALL_OW 313
29421: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29422: LD_VAR 0 8
29426: PPUSH
29427: LD_INT 25
29429: PUSH
29430: LD_INT 12
29432: PUSH
29433: EMPTY
29434: LIST
29435: LIST
29436: PPUSH
29437: CALL_OW 72
29441: NOT
29442: IFFALSE 29452
// control := control_manual ;
29444: LD_ADDR_VAR 0 4
29448: PUSH
29449: LD_INT 1
29451: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29452: LD_ADDR_VAR 0 8
29456: PUSH
29457: LD_VAR 0 1
29461: PPUSH
29462: CALL 29149 0 1
29466: ST_TO_ADDR
// if tmp then
29467: LD_VAR 0 8
29471: IFFALSE 29514
// begin for i in tmp do
29473: LD_ADDR_VAR 0 7
29477: PUSH
29478: LD_VAR 0 8
29482: PUSH
29483: FOR_IN
29484: IFFALSE 29512
// if i [ 1 ] = b_ext_radio then
29486: LD_VAR 0 7
29490: PUSH
29491: LD_INT 1
29493: ARRAY
29494: PUSH
29495: LD_INT 22
29497: EQUAL
29498: IFFALSE 29510
// begin control := control_remote ;
29500: LD_ADDR_VAR 0 4
29504: PUSH
29505: LD_INT 2
29507: ST_TO_ADDR
// break ;
29508: GO 29512
// end ;
29510: GO 29483
29512: POP
29513: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29514: LD_VAR 0 1
29518: PPUSH
29519: LD_VAR 0 2
29523: PPUSH
29524: LD_VAR 0 3
29528: PPUSH
29529: LD_VAR 0 4
29533: PPUSH
29534: LD_VAR 0 5
29538: PPUSH
29539: CALL_OW 448
29543: IFFALSE 29578
// begin result := [ chassis , engine , control , weapon ] ;
29545: LD_ADDR_VAR 0 6
29549: PUSH
29550: LD_VAR 0 2
29554: PUSH
29555: LD_VAR 0 3
29559: PUSH
29560: LD_VAR 0 4
29564: PUSH
29565: LD_VAR 0 5
29569: PUSH
29570: EMPTY
29571: LIST
29572: LIST
29573: LIST
29574: LIST
29575: ST_TO_ADDR
// exit ;
29576: GO 29990
// end ; _chassis := AvailableChassisList ( factory ) ;
29578: LD_ADDR_VAR 0 9
29582: PUSH
29583: LD_VAR 0 1
29587: PPUSH
29588: CALL_OW 475
29592: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29593: LD_ADDR_VAR 0 11
29597: PUSH
29598: LD_VAR 0 1
29602: PPUSH
29603: CALL_OW 476
29607: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29608: LD_ADDR_VAR 0 12
29612: PUSH
29613: LD_VAR 0 1
29617: PPUSH
29618: CALL_OW 477
29622: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29623: LD_ADDR_VAR 0 10
29627: PUSH
29628: LD_VAR 0 1
29632: PPUSH
29633: CALL_OW 478
29637: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29638: LD_VAR 0 9
29642: NOT
29643: PUSH
29644: LD_VAR 0 11
29648: NOT
29649: OR
29650: PUSH
29651: LD_VAR 0 12
29655: NOT
29656: OR
29657: PUSH
29658: LD_VAR 0 10
29662: NOT
29663: OR
29664: IFFALSE 29699
// begin result := [ chassis , engine , control , weapon ] ;
29666: LD_ADDR_VAR 0 6
29670: PUSH
29671: LD_VAR 0 2
29675: PUSH
29676: LD_VAR 0 3
29680: PUSH
29681: LD_VAR 0 4
29685: PUSH
29686: LD_VAR 0 5
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: LIST
29695: LIST
29696: ST_TO_ADDR
// exit ;
29697: GO 29990
// end ; if not chassis in _chassis then
29699: LD_VAR 0 2
29703: PUSH
29704: LD_VAR 0 9
29708: IN
29709: NOT
29710: IFFALSE 29736
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29712: LD_ADDR_VAR 0 2
29716: PUSH
29717: LD_VAR 0 9
29721: PUSH
29722: LD_INT 1
29724: PPUSH
29725: LD_VAR 0 9
29729: PPUSH
29730: CALL_OW 12
29734: ARRAY
29735: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29736: LD_VAR 0 2
29740: PPUSH
29741: LD_VAR 0 3
29745: PPUSH
29746: CALL 29995 0 2
29750: NOT
29751: IFFALSE 29810
// repeat engine := _engine [ 1 ] ;
29753: LD_ADDR_VAR 0 3
29757: PUSH
29758: LD_VAR 0 11
29762: PUSH
29763: LD_INT 1
29765: ARRAY
29766: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
29767: LD_ADDR_VAR 0 11
29771: PUSH
29772: LD_VAR 0 11
29776: PPUSH
29777: LD_INT 1
29779: PPUSH
29780: CALL_OW 3
29784: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
29785: LD_VAR 0 2
29789: PPUSH
29790: LD_VAR 0 3
29794: PPUSH
29795: CALL 29995 0 2
29799: PUSH
29800: LD_VAR 0 11
29804: PUSH
29805: EMPTY
29806: EQUAL
29807: OR
29808: IFFALSE 29753
// if not control in _control then
29810: LD_VAR 0 4
29814: PUSH
29815: LD_VAR 0 12
29819: IN
29820: NOT
29821: IFFALSE 29847
// control := _control [ rand ( 1 , _control ) ] ;
29823: LD_ADDR_VAR 0 4
29827: PUSH
29828: LD_VAR 0 12
29832: PUSH
29833: LD_INT 1
29835: PPUSH
29836: LD_VAR 0 12
29840: PPUSH
29841: CALL_OW 12
29845: ARRAY
29846: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
29847: LD_VAR 0 2
29851: PPUSH
29852: LD_VAR 0 5
29856: PPUSH
29857: CALL 30215 0 2
29861: NOT
29862: IFFALSE 29921
// repeat weapon := _weapon [ 1 ] ;
29864: LD_ADDR_VAR 0 5
29868: PUSH
29869: LD_VAR 0 10
29873: PUSH
29874: LD_INT 1
29876: ARRAY
29877: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
29878: LD_ADDR_VAR 0 10
29882: PUSH
29883: LD_VAR 0 10
29887: PPUSH
29888: LD_INT 1
29890: PPUSH
29891: CALL_OW 3
29895: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
29896: LD_VAR 0 2
29900: PPUSH
29901: LD_VAR 0 5
29905: PPUSH
29906: CALL 30215 0 2
29910: PUSH
29911: LD_VAR 0 10
29915: PUSH
29916: EMPTY
29917: EQUAL
29918: OR
29919: IFFALSE 29864
// result := [ ] ;
29921: LD_ADDR_VAR 0 6
29925: PUSH
29926: EMPTY
29927: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29928: LD_VAR 0 1
29932: PPUSH
29933: LD_VAR 0 2
29937: PPUSH
29938: LD_VAR 0 3
29942: PPUSH
29943: LD_VAR 0 4
29947: PPUSH
29948: LD_VAR 0 5
29952: PPUSH
29953: CALL_OW 448
29957: IFFALSE 29990
// result := [ chassis , engine , control , weapon ] ;
29959: LD_ADDR_VAR 0 6
29963: PUSH
29964: LD_VAR 0 2
29968: PUSH
29969: LD_VAR 0 3
29973: PUSH
29974: LD_VAR 0 4
29978: PUSH
29979: LD_VAR 0 5
29983: PUSH
29984: EMPTY
29985: LIST
29986: LIST
29987: LIST
29988: LIST
29989: ST_TO_ADDR
// end ;
29990: LD_VAR 0 6
29994: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
29995: LD_INT 0
29997: PPUSH
// if not chassis or not engine then
29998: LD_VAR 0 1
30002: NOT
30003: PUSH
30004: LD_VAR 0 2
30008: NOT
30009: OR
30010: IFFALSE 30014
// exit ;
30012: GO 30210
// case engine of engine_solar :
30014: LD_VAR 0 2
30018: PUSH
30019: LD_INT 2
30021: DOUBLE
30022: EQUAL
30023: IFTRUE 30027
30025: GO 30065
30027: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30028: LD_ADDR_VAR 0 3
30032: PUSH
30033: LD_INT 11
30035: PUSH
30036: LD_INT 12
30038: PUSH
30039: LD_INT 13
30041: PUSH
30042: LD_INT 14
30044: PUSH
30045: LD_INT 1
30047: PUSH
30048: LD_INT 2
30050: PUSH
30051: LD_INT 3
30053: PUSH
30054: EMPTY
30055: LIST
30056: LIST
30057: LIST
30058: LIST
30059: LIST
30060: LIST
30061: LIST
30062: ST_TO_ADDR
30063: GO 30194
30065: LD_INT 1
30067: DOUBLE
30068: EQUAL
30069: IFTRUE 30073
30071: GO 30135
30073: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30074: LD_ADDR_VAR 0 3
30078: PUSH
30079: LD_INT 11
30081: PUSH
30082: LD_INT 12
30084: PUSH
30085: LD_INT 13
30087: PUSH
30088: LD_INT 14
30090: PUSH
30091: LD_INT 1
30093: PUSH
30094: LD_INT 2
30096: PUSH
30097: LD_INT 3
30099: PUSH
30100: LD_INT 4
30102: PUSH
30103: LD_INT 5
30105: PUSH
30106: LD_INT 21
30108: PUSH
30109: LD_INT 23
30111: PUSH
30112: LD_INT 22
30114: PUSH
30115: LD_INT 24
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: LIST
30122: LIST
30123: LIST
30124: LIST
30125: LIST
30126: LIST
30127: LIST
30128: LIST
30129: LIST
30130: LIST
30131: LIST
30132: ST_TO_ADDR
30133: GO 30194
30135: LD_INT 3
30137: DOUBLE
30138: EQUAL
30139: IFTRUE 30143
30141: GO 30193
30143: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30144: LD_ADDR_VAR 0 3
30148: PUSH
30149: LD_INT 13
30151: PUSH
30152: LD_INT 14
30154: PUSH
30155: LD_INT 2
30157: PUSH
30158: LD_INT 3
30160: PUSH
30161: LD_INT 4
30163: PUSH
30164: LD_INT 5
30166: PUSH
30167: LD_INT 21
30169: PUSH
30170: LD_INT 22
30172: PUSH
30173: LD_INT 23
30175: PUSH
30176: LD_INT 24
30178: PUSH
30179: EMPTY
30180: LIST
30181: LIST
30182: LIST
30183: LIST
30184: LIST
30185: LIST
30186: LIST
30187: LIST
30188: LIST
30189: LIST
30190: ST_TO_ADDR
30191: GO 30194
30193: POP
// result := ( chassis in result ) ;
30194: LD_ADDR_VAR 0 3
30198: PUSH
30199: LD_VAR 0 1
30203: PUSH
30204: LD_VAR 0 3
30208: IN
30209: ST_TO_ADDR
// end ;
30210: LD_VAR 0 3
30214: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30215: LD_INT 0
30217: PPUSH
// if not chassis or not weapon then
30218: LD_VAR 0 1
30222: NOT
30223: PUSH
30224: LD_VAR 0 2
30228: NOT
30229: OR
30230: IFFALSE 30234
// exit ;
30232: GO 31294
// case weapon of us_machine_gun :
30234: LD_VAR 0 2
30238: PUSH
30239: LD_INT 2
30241: DOUBLE
30242: EQUAL
30243: IFTRUE 30247
30245: GO 30277
30247: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30248: LD_ADDR_VAR 0 3
30252: PUSH
30253: LD_INT 1
30255: PUSH
30256: LD_INT 2
30258: PUSH
30259: LD_INT 3
30261: PUSH
30262: LD_INT 4
30264: PUSH
30265: LD_INT 5
30267: PUSH
30268: EMPTY
30269: LIST
30270: LIST
30271: LIST
30272: LIST
30273: LIST
30274: ST_TO_ADDR
30275: GO 31278
30277: LD_INT 3
30279: DOUBLE
30280: EQUAL
30281: IFTRUE 30285
30283: GO 30315
30285: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30286: LD_ADDR_VAR 0 3
30290: PUSH
30291: LD_INT 1
30293: PUSH
30294: LD_INT 2
30296: PUSH
30297: LD_INT 3
30299: PUSH
30300: LD_INT 4
30302: PUSH
30303: LD_INT 5
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: LIST
30310: LIST
30311: LIST
30312: ST_TO_ADDR
30313: GO 31278
30315: LD_INT 11
30317: DOUBLE
30318: EQUAL
30319: IFTRUE 30323
30321: GO 30353
30323: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30324: LD_ADDR_VAR 0 3
30328: PUSH
30329: LD_INT 1
30331: PUSH
30332: LD_INT 2
30334: PUSH
30335: LD_INT 3
30337: PUSH
30338: LD_INT 4
30340: PUSH
30341: LD_INT 5
30343: PUSH
30344: EMPTY
30345: LIST
30346: LIST
30347: LIST
30348: LIST
30349: LIST
30350: ST_TO_ADDR
30351: GO 31278
30353: LD_INT 4
30355: DOUBLE
30356: EQUAL
30357: IFTRUE 30361
30359: GO 30387
30361: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30362: LD_ADDR_VAR 0 3
30366: PUSH
30367: LD_INT 2
30369: PUSH
30370: LD_INT 3
30372: PUSH
30373: LD_INT 4
30375: PUSH
30376: LD_INT 5
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: LIST
30383: LIST
30384: ST_TO_ADDR
30385: GO 31278
30387: LD_INT 5
30389: DOUBLE
30390: EQUAL
30391: IFTRUE 30395
30393: GO 30421
30395: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30396: LD_ADDR_VAR 0 3
30400: PUSH
30401: LD_INT 2
30403: PUSH
30404: LD_INT 3
30406: PUSH
30407: LD_INT 4
30409: PUSH
30410: LD_INT 5
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: LIST
30417: LIST
30418: ST_TO_ADDR
30419: GO 31278
30421: LD_INT 9
30423: DOUBLE
30424: EQUAL
30425: IFTRUE 30429
30427: GO 30455
30429: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30430: LD_ADDR_VAR 0 3
30434: PUSH
30435: LD_INT 2
30437: PUSH
30438: LD_INT 3
30440: PUSH
30441: LD_INT 4
30443: PUSH
30444: LD_INT 5
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: LIST
30451: LIST
30452: ST_TO_ADDR
30453: GO 31278
30455: LD_INT 7
30457: DOUBLE
30458: EQUAL
30459: IFTRUE 30463
30461: GO 30489
30463: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30464: LD_ADDR_VAR 0 3
30468: PUSH
30469: LD_INT 2
30471: PUSH
30472: LD_INT 3
30474: PUSH
30475: LD_INT 4
30477: PUSH
30478: LD_INT 5
30480: PUSH
30481: EMPTY
30482: LIST
30483: LIST
30484: LIST
30485: LIST
30486: ST_TO_ADDR
30487: GO 31278
30489: LD_INT 12
30491: DOUBLE
30492: EQUAL
30493: IFTRUE 30497
30495: GO 30523
30497: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30498: LD_ADDR_VAR 0 3
30502: PUSH
30503: LD_INT 2
30505: PUSH
30506: LD_INT 3
30508: PUSH
30509: LD_INT 4
30511: PUSH
30512: LD_INT 5
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: ST_TO_ADDR
30521: GO 31278
30523: LD_INT 13
30525: DOUBLE
30526: EQUAL
30527: IFTRUE 30531
30529: GO 30557
30531: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30532: LD_ADDR_VAR 0 3
30536: PUSH
30537: LD_INT 2
30539: PUSH
30540: LD_INT 3
30542: PUSH
30543: LD_INT 4
30545: PUSH
30546: LD_INT 5
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: LIST
30553: LIST
30554: ST_TO_ADDR
30555: GO 31278
30557: LD_INT 14
30559: DOUBLE
30560: EQUAL
30561: IFTRUE 30565
30563: GO 30583
30565: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30566: LD_ADDR_VAR 0 3
30570: PUSH
30571: LD_INT 4
30573: PUSH
30574: LD_INT 5
30576: PUSH
30577: EMPTY
30578: LIST
30579: LIST
30580: ST_TO_ADDR
30581: GO 31278
30583: LD_INT 6
30585: DOUBLE
30586: EQUAL
30587: IFTRUE 30591
30589: GO 30609
30591: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30592: LD_ADDR_VAR 0 3
30596: PUSH
30597: LD_INT 4
30599: PUSH
30600: LD_INT 5
30602: PUSH
30603: EMPTY
30604: LIST
30605: LIST
30606: ST_TO_ADDR
30607: GO 31278
30609: LD_INT 10
30611: DOUBLE
30612: EQUAL
30613: IFTRUE 30617
30615: GO 30635
30617: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30618: LD_ADDR_VAR 0 3
30622: PUSH
30623: LD_INT 4
30625: PUSH
30626: LD_INT 5
30628: PUSH
30629: EMPTY
30630: LIST
30631: LIST
30632: ST_TO_ADDR
30633: GO 31278
30635: LD_INT 22
30637: DOUBLE
30638: EQUAL
30639: IFTRUE 30643
30641: GO 30669
30643: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30644: LD_ADDR_VAR 0 3
30648: PUSH
30649: LD_INT 11
30651: PUSH
30652: LD_INT 12
30654: PUSH
30655: LD_INT 13
30657: PUSH
30658: LD_INT 14
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: LIST
30665: LIST
30666: ST_TO_ADDR
30667: GO 31278
30669: LD_INT 23
30671: DOUBLE
30672: EQUAL
30673: IFTRUE 30677
30675: GO 30703
30677: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
30678: LD_ADDR_VAR 0 3
30682: PUSH
30683: LD_INT 11
30685: PUSH
30686: LD_INT 12
30688: PUSH
30689: LD_INT 13
30691: PUSH
30692: LD_INT 14
30694: PUSH
30695: EMPTY
30696: LIST
30697: LIST
30698: LIST
30699: LIST
30700: ST_TO_ADDR
30701: GO 31278
30703: LD_INT 24
30705: DOUBLE
30706: EQUAL
30707: IFTRUE 30711
30709: GO 30737
30711: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30712: LD_ADDR_VAR 0 3
30716: PUSH
30717: LD_INT 11
30719: PUSH
30720: LD_INT 12
30722: PUSH
30723: LD_INT 13
30725: PUSH
30726: LD_INT 14
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: LIST
30733: LIST
30734: ST_TO_ADDR
30735: GO 31278
30737: LD_INT 30
30739: DOUBLE
30740: EQUAL
30741: IFTRUE 30745
30743: GO 30771
30745: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30746: LD_ADDR_VAR 0 3
30750: PUSH
30751: LD_INT 11
30753: PUSH
30754: LD_INT 12
30756: PUSH
30757: LD_INT 13
30759: PUSH
30760: LD_INT 14
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: LIST
30767: LIST
30768: ST_TO_ADDR
30769: GO 31278
30771: LD_INT 25
30773: DOUBLE
30774: EQUAL
30775: IFTRUE 30779
30777: GO 30797
30779: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
30780: LD_ADDR_VAR 0 3
30784: PUSH
30785: LD_INT 13
30787: PUSH
30788: LD_INT 14
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: ST_TO_ADDR
30795: GO 31278
30797: LD_INT 27
30799: DOUBLE
30800: EQUAL
30801: IFTRUE 30805
30803: GO 30823
30805: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
30806: LD_ADDR_VAR 0 3
30810: PUSH
30811: LD_INT 13
30813: PUSH
30814: LD_INT 14
30816: PUSH
30817: EMPTY
30818: LIST
30819: LIST
30820: ST_TO_ADDR
30821: GO 31278
30823: LD_INT 92
30825: DOUBLE
30826: EQUAL
30827: IFTRUE 30831
30829: GO 30857
30831: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
30832: LD_ADDR_VAR 0 3
30836: PUSH
30837: LD_INT 11
30839: PUSH
30840: LD_INT 12
30842: PUSH
30843: LD_INT 13
30845: PUSH
30846: LD_INT 14
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: LIST
30853: LIST
30854: ST_TO_ADDR
30855: GO 31278
30857: LD_INT 28
30859: DOUBLE
30860: EQUAL
30861: IFTRUE 30865
30863: GO 30883
30865: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
30866: LD_ADDR_VAR 0 3
30870: PUSH
30871: LD_INT 13
30873: PUSH
30874: LD_INT 14
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: ST_TO_ADDR
30881: GO 31278
30883: LD_INT 29
30885: DOUBLE
30886: EQUAL
30887: IFTRUE 30891
30889: GO 30909
30891: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
30892: LD_ADDR_VAR 0 3
30896: PUSH
30897: LD_INT 13
30899: PUSH
30900: LD_INT 14
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: ST_TO_ADDR
30907: GO 31278
30909: LD_INT 31
30911: DOUBLE
30912: EQUAL
30913: IFTRUE 30917
30915: GO 30935
30917: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
30918: LD_ADDR_VAR 0 3
30922: PUSH
30923: LD_INT 13
30925: PUSH
30926: LD_INT 14
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: ST_TO_ADDR
30933: GO 31278
30935: LD_INT 26
30937: DOUBLE
30938: EQUAL
30939: IFTRUE 30943
30941: GO 30961
30943: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
30944: LD_ADDR_VAR 0 3
30948: PUSH
30949: LD_INT 13
30951: PUSH
30952: LD_INT 14
30954: PUSH
30955: EMPTY
30956: LIST
30957: LIST
30958: ST_TO_ADDR
30959: GO 31278
30961: LD_INT 42
30963: DOUBLE
30964: EQUAL
30965: IFTRUE 30969
30967: GO 30995
30969: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
30970: LD_ADDR_VAR 0 3
30974: PUSH
30975: LD_INT 21
30977: PUSH
30978: LD_INT 22
30980: PUSH
30981: LD_INT 23
30983: PUSH
30984: LD_INT 24
30986: PUSH
30987: EMPTY
30988: LIST
30989: LIST
30990: LIST
30991: LIST
30992: ST_TO_ADDR
30993: GO 31278
30995: LD_INT 43
30997: DOUBLE
30998: EQUAL
30999: IFTRUE 31003
31001: GO 31029
31003: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31004: LD_ADDR_VAR 0 3
31008: PUSH
31009: LD_INT 21
31011: PUSH
31012: LD_INT 22
31014: PUSH
31015: LD_INT 23
31017: PUSH
31018: LD_INT 24
31020: PUSH
31021: EMPTY
31022: LIST
31023: LIST
31024: LIST
31025: LIST
31026: ST_TO_ADDR
31027: GO 31278
31029: LD_INT 44
31031: DOUBLE
31032: EQUAL
31033: IFTRUE 31037
31035: GO 31063
31037: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31038: LD_ADDR_VAR 0 3
31042: PUSH
31043: LD_INT 21
31045: PUSH
31046: LD_INT 22
31048: PUSH
31049: LD_INT 23
31051: PUSH
31052: LD_INT 24
31054: PUSH
31055: EMPTY
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: ST_TO_ADDR
31061: GO 31278
31063: LD_INT 45
31065: DOUBLE
31066: EQUAL
31067: IFTRUE 31071
31069: GO 31097
31071: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31072: LD_ADDR_VAR 0 3
31076: PUSH
31077: LD_INT 21
31079: PUSH
31080: LD_INT 22
31082: PUSH
31083: LD_INT 23
31085: PUSH
31086: LD_INT 24
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: LIST
31093: LIST
31094: ST_TO_ADDR
31095: GO 31278
31097: LD_INT 49
31099: DOUBLE
31100: EQUAL
31101: IFTRUE 31105
31103: GO 31131
31105: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31106: LD_ADDR_VAR 0 3
31110: PUSH
31111: LD_INT 21
31113: PUSH
31114: LD_INT 22
31116: PUSH
31117: LD_INT 23
31119: PUSH
31120: LD_INT 24
31122: PUSH
31123: EMPTY
31124: LIST
31125: LIST
31126: LIST
31127: LIST
31128: ST_TO_ADDR
31129: GO 31278
31131: LD_INT 51
31133: DOUBLE
31134: EQUAL
31135: IFTRUE 31139
31137: GO 31165
31139: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31140: LD_ADDR_VAR 0 3
31144: PUSH
31145: LD_INT 21
31147: PUSH
31148: LD_INT 22
31150: PUSH
31151: LD_INT 23
31153: PUSH
31154: LD_INT 24
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: LIST
31161: LIST
31162: ST_TO_ADDR
31163: GO 31278
31165: LD_INT 52
31167: DOUBLE
31168: EQUAL
31169: IFTRUE 31173
31171: GO 31199
31173: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31174: LD_ADDR_VAR 0 3
31178: PUSH
31179: LD_INT 21
31181: PUSH
31182: LD_INT 22
31184: PUSH
31185: LD_INT 23
31187: PUSH
31188: LD_INT 24
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: LIST
31195: LIST
31196: ST_TO_ADDR
31197: GO 31278
31199: LD_INT 53
31201: DOUBLE
31202: EQUAL
31203: IFTRUE 31207
31205: GO 31225
31207: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31208: LD_ADDR_VAR 0 3
31212: PUSH
31213: LD_INT 23
31215: PUSH
31216: LD_INT 24
31218: PUSH
31219: EMPTY
31220: LIST
31221: LIST
31222: ST_TO_ADDR
31223: GO 31278
31225: LD_INT 46
31227: DOUBLE
31228: EQUAL
31229: IFTRUE 31233
31231: GO 31251
31233: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31234: LD_ADDR_VAR 0 3
31238: PUSH
31239: LD_INT 23
31241: PUSH
31242: LD_INT 24
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: ST_TO_ADDR
31249: GO 31278
31251: LD_INT 47
31253: DOUBLE
31254: EQUAL
31255: IFTRUE 31259
31257: GO 31277
31259: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31260: LD_ADDR_VAR 0 3
31264: PUSH
31265: LD_INT 23
31267: PUSH
31268: LD_INT 24
31270: PUSH
31271: EMPTY
31272: LIST
31273: LIST
31274: ST_TO_ADDR
31275: GO 31278
31277: POP
// result := ( chassis in result ) ;
31278: LD_ADDR_VAR 0 3
31282: PUSH
31283: LD_VAR 0 1
31287: PUSH
31288: LD_VAR 0 3
31292: IN
31293: ST_TO_ADDR
// end ;
31294: LD_VAR 0 3
31298: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31299: LD_INT 0
31301: PPUSH
31302: PPUSH
31303: PPUSH
31304: PPUSH
31305: PPUSH
31306: PPUSH
31307: PPUSH
// result := array ;
31308: LD_ADDR_VAR 0 5
31312: PUSH
31313: LD_VAR 0 1
31317: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31318: LD_VAR 0 1
31322: NOT
31323: PUSH
31324: LD_VAR 0 2
31328: NOT
31329: OR
31330: PUSH
31331: LD_VAR 0 3
31335: NOT
31336: OR
31337: PUSH
31338: LD_VAR 0 2
31342: PUSH
31343: LD_VAR 0 1
31347: GREATER
31348: OR
31349: PUSH
31350: LD_VAR 0 3
31354: PUSH
31355: LD_VAR 0 1
31359: GREATER
31360: OR
31361: IFFALSE 31365
// exit ;
31363: GO 31661
// if direction then
31365: LD_VAR 0 4
31369: IFFALSE 31433
// begin d := 1 ;
31371: LD_ADDR_VAR 0 9
31375: PUSH
31376: LD_INT 1
31378: ST_TO_ADDR
// if i_from > i_to then
31379: LD_VAR 0 2
31383: PUSH
31384: LD_VAR 0 3
31388: GREATER
31389: IFFALSE 31415
// length := ( array - i_from ) + i_to else
31391: LD_ADDR_VAR 0 11
31395: PUSH
31396: LD_VAR 0 1
31400: PUSH
31401: LD_VAR 0 2
31405: MINUS
31406: PUSH
31407: LD_VAR 0 3
31411: PLUS
31412: ST_TO_ADDR
31413: GO 31431
// length := i_to - i_from ;
31415: LD_ADDR_VAR 0 11
31419: PUSH
31420: LD_VAR 0 3
31424: PUSH
31425: LD_VAR 0 2
31429: MINUS
31430: ST_TO_ADDR
// end else
31431: GO 31494
// begin d := - 1 ;
31433: LD_ADDR_VAR 0 9
31437: PUSH
31438: LD_INT 1
31440: NEG
31441: ST_TO_ADDR
// if i_from > i_to then
31442: LD_VAR 0 2
31446: PUSH
31447: LD_VAR 0 3
31451: GREATER
31452: IFFALSE 31472
// length := i_from - i_to else
31454: LD_ADDR_VAR 0 11
31458: PUSH
31459: LD_VAR 0 2
31463: PUSH
31464: LD_VAR 0 3
31468: MINUS
31469: ST_TO_ADDR
31470: GO 31494
// length := ( array - i_to ) + i_from ;
31472: LD_ADDR_VAR 0 11
31476: PUSH
31477: LD_VAR 0 1
31481: PUSH
31482: LD_VAR 0 3
31486: MINUS
31487: PUSH
31488: LD_VAR 0 2
31492: PLUS
31493: ST_TO_ADDR
// end ; if not length then
31494: LD_VAR 0 11
31498: NOT
31499: IFFALSE 31503
// exit ;
31501: GO 31661
// tmp := array ;
31503: LD_ADDR_VAR 0 10
31507: PUSH
31508: LD_VAR 0 1
31512: ST_TO_ADDR
// for i = 1 to length do
31513: LD_ADDR_VAR 0 6
31517: PUSH
31518: DOUBLE
31519: LD_INT 1
31521: DEC
31522: ST_TO_ADDR
31523: LD_VAR 0 11
31527: PUSH
31528: FOR_TO
31529: IFFALSE 31649
// begin for j = 1 to array do
31531: LD_ADDR_VAR 0 7
31535: PUSH
31536: DOUBLE
31537: LD_INT 1
31539: DEC
31540: ST_TO_ADDR
31541: LD_VAR 0 1
31545: PUSH
31546: FOR_TO
31547: IFFALSE 31635
// begin k := j + d ;
31549: LD_ADDR_VAR 0 8
31553: PUSH
31554: LD_VAR 0 7
31558: PUSH
31559: LD_VAR 0 9
31563: PLUS
31564: ST_TO_ADDR
// if k > array then
31565: LD_VAR 0 8
31569: PUSH
31570: LD_VAR 0 1
31574: GREATER
31575: IFFALSE 31585
// k := 1 ;
31577: LD_ADDR_VAR 0 8
31581: PUSH
31582: LD_INT 1
31584: ST_TO_ADDR
// if not k then
31585: LD_VAR 0 8
31589: NOT
31590: IFFALSE 31602
// k := array ;
31592: LD_ADDR_VAR 0 8
31596: PUSH
31597: LD_VAR 0 1
31601: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31602: LD_ADDR_VAR 0 10
31606: PUSH
31607: LD_VAR 0 10
31611: PPUSH
31612: LD_VAR 0 8
31616: PPUSH
31617: LD_VAR 0 1
31621: PUSH
31622: LD_VAR 0 7
31626: ARRAY
31627: PPUSH
31628: CALL_OW 1
31632: ST_TO_ADDR
// end ;
31633: GO 31546
31635: POP
31636: POP
// array := tmp ;
31637: LD_ADDR_VAR 0 1
31641: PUSH
31642: LD_VAR 0 10
31646: ST_TO_ADDR
// end ;
31647: GO 31528
31649: POP
31650: POP
// result := array ;
31651: LD_ADDR_VAR 0 5
31655: PUSH
31656: LD_VAR 0 1
31660: ST_TO_ADDR
// end ;
31661: LD_VAR 0 5
31665: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31666: LD_INT 0
31668: PPUSH
31669: PPUSH
// result := 0 ;
31670: LD_ADDR_VAR 0 3
31674: PUSH
31675: LD_INT 0
31677: ST_TO_ADDR
// if not array or not value in array then
31678: LD_VAR 0 1
31682: NOT
31683: PUSH
31684: LD_VAR 0 2
31688: PUSH
31689: LD_VAR 0 1
31693: IN
31694: NOT
31695: OR
31696: IFFALSE 31700
// exit ;
31698: GO 31754
// for i = 1 to array do
31700: LD_ADDR_VAR 0 4
31704: PUSH
31705: DOUBLE
31706: LD_INT 1
31708: DEC
31709: ST_TO_ADDR
31710: LD_VAR 0 1
31714: PUSH
31715: FOR_TO
31716: IFFALSE 31752
// if value = array [ i ] then
31718: LD_VAR 0 2
31722: PUSH
31723: LD_VAR 0 1
31727: PUSH
31728: LD_VAR 0 4
31732: ARRAY
31733: EQUAL
31734: IFFALSE 31750
// begin result := i ;
31736: LD_ADDR_VAR 0 3
31740: PUSH
31741: LD_VAR 0 4
31745: ST_TO_ADDR
// exit ;
31746: POP
31747: POP
31748: GO 31754
// end ;
31750: GO 31715
31752: POP
31753: POP
// end ;
31754: LD_VAR 0 3
31758: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
31759: LD_INT 0
31761: PPUSH
// vc_chassis := chassis ;
31762: LD_ADDR_OWVAR 37
31766: PUSH
31767: LD_VAR 0 1
31771: ST_TO_ADDR
// vc_engine := engine ;
31772: LD_ADDR_OWVAR 39
31776: PUSH
31777: LD_VAR 0 2
31781: ST_TO_ADDR
// vc_control := control ;
31782: LD_ADDR_OWVAR 38
31786: PUSH
31787: LD_VAR 0 3
31791: ST_TO_ADDR
// vc_weapon := weapon ;
31792: LD_ADDR_OWVAR 40
31796: PUSH
31797: LD_VAR 0 4
31801: ST_TO_ADDR
// vc_fuel_battery := fuel ;
31802: LD_ADDR_OWVAR 41
31806: PUSH
31807: LD_VAR 0 5
31811: ST_TO_ADDR
// end ;
31812: LD_VAR 0 6
31816: RET
// export function WantPlant ( unit ) ; var task ; begin
31817: LD_INT 0
31819: PPUSH
31820: PPUSH
// result := false ;
31821: LD_ADDR_VAR 0 2
31825: PUSH
31826: LD_INT 0
31828: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
31829: LD_ADDR_VAR 0 3
31833: PUSH
31834: LD_VAR 0 1
31838: PPUSH
31839: CALL_OW 437
31843: ST_TO_ADDR
// if task then
31844: LD_VAR 0 3
31848: IFFALSE 31876
// if task [ 1 ] [ 1 ] = p then
31850: LD_VAR 0 3
31854: PUSH
31855: LD_INT 1
31857: ARRAY
31858: PUSH
31859: LD_INT 1
31861: ARRAY
31862: PUSH
31863: LD_STRING p
31865: EQUAL
31866: IFFALSE 31876
// result := true ;
31868: LD_ADDR_VAR 0 2
31872: PUSH
31873: LD_INT 1
31875: ST_TO_ADDR
// end ;
31876: LD_VAR 0 2
31880: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
31881: LD_INT 0
31883: PPUSH
31884: PPUSH
31885: PPUSH
31886: PPUSH
// if pos < 1 then
31887: LD_VAR 0 2
31891: PUSH
31892: LD_INT 1
31894: LESS
31895: IFFALSE 31899
// exit ;
31897: GO 32202
// if pos = 1 then
31899: LD_VAR 0 2
31903: PUSH
31904: LD_INT 1
31906: EQUAL
31907: IFFALSE 31940
// result := Replace ( arr , pos [ 1 ] , value ) else
31909: LD_ADDR_VAR 0 4
31913: PUSH
31914: LD_VAR 0 1
31918: PPUSH
31919: LD_VAR 0 2
31923: PUSH
31924: LD_INT 1
31926: ARRAY
31927: PPUSH
31928: LD_VAR 0 3
31932: PPUSH
31933: CALL_OW 1
31937: ST_TO_ADDR
31938: GO 32202
// begin tmp := arr ;
31940: LD_ADDR_VAR 0 6
31944: PUSH
31945: LD_VAR 0 1
31949: ST_TO_ADDR
// s_arr := [ tmp ] ;
31950: LD_ADDR_VAR 0 7
31954: PUSH
31955: LD_VAR 0 6
31959: PUSH
31960: EMPTY
31961: LIST
31962: ST_TO_ADDR
// for i = 1 to pos - 1 do
31963: LD_ADDR_VAR 0 5
31967: PUSH
31968: DOUBLE
31969: LD_INT 1
31971: DEC
31972: ST_TO_ADDR
31973: LD_VAR 0 2
31977: PUSH
31978: LD_INT 1
31980: MINUS
31981: PUSH
31982: FOR_TO
31983: IFFALSE 32028
// begin tmp := tmp [ pos [ i ] ] ;
31985: LD_ADDR_VAR 0 6
31989: PUSH
31990: LD_VAR 0 6
31994: PUSH
31995: LD_VAR 0 2
31999: PUSH
32000: LD_VAR 0 5
32004: ARRAY
32005: ARRAY
32006: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32007: LD_ADDR_VAR 0 7
32011: PUSH
32012: LD_VAR 0 7
32016: PUSH
32017: LD_VAR 0 6
32021: PUSH
32022: EMPTY
32023: LIST
32024: ADD
32025: ST_TO_ADDR
// end ;
32026: GO 31982
32028: POP
32029: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32030: LD_ADDR_VAR 0 6
32034: PUSH
32035: LD_VAR 0 6
32039: PPUSH
32040: LD_VAR 0 2
32044: PUSH
32045: LD_VAR 0 2
32049: ARRAY
32050: PPUSH
32051: LD_VAR 0 3
32055: PPUSH
32056: CALL_OW 1
32060: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32061: LD_ADDR_VAR 0 7
32065: PUSH
32066: LD_VAR 0 7
32070: PPUSH
32071: LD_VAR 0 7
32075: PPUSH
32076: LD_VAR 0 6
32080: PPUSH
32081: CALL_OW 1
32085: ST_TO_ADDR
// for i = s_arr downto 2 do
32086: LD_ADDR_VAR 0 5
32090: PUSH
32091: DOUBLE
32092: LD_VAR 0 7
32096: INC
32097: ST_TO_ADDR
32098: LD_INT 2
32100: PUSH
32101: FOR_DOWNTO
32102: IFFALSE 32186
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32104: LD_ADDR_VAR 0 6
32108: PUSH
32109: LD_VAR 0 7
32113: PUSH
32114: LD_VAR 0 5
32118: PUSH
32119: LD_INT 1
32121: MINUS
32122: ARRAY
32123: PPUSH
32124: LD_VAR 0 2
32128: PUSH
32129: LD_VAR 0 5
32133: PUSH
32134: LD_INT 1
32136: MINUS
32137: ARRAY
32138: PPUSH
32139: LD_VAR 0 7
32143: PUSH
32144: LD_VAR 0 5
32148: ARRAY
32149: PPUSH
32150: CALL_OW 1
32154: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32155: LD_ADDR_VAR 0 7
32159: PUSH
32160: LD_VAR 0 7
32164: PPUSH
32165: LD_VAR 0 5
32169: PUSH
32170: LD_INT 1
32172: MINUS
32173: PPUSH
32174: LD_VAR 0 6
32178: PPUSH
32179: CALL_OW 1
32183: ST_TO_ADDR
// end ;
32184: GO 32101
32186: POP
32187: POP
// result := s_arr [ 1 ] ;
32188: LD_ADDR_VAR 0 4
32192: PUSH
32193: LD_VAR 0 7
32197: PUSH
32198: LD_INT 1
32200: ARRAY
32201: ST_TO_ADDR
// end ; end ;
32202: LD_VAR 0 4
32206: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32207: LD_INT 0
32209: PPUSH
32210: PPUSH
// if not list then
32211: LD_VAR 0 1
32215: NOT
32216: IFFALSE 32220
// exit ;
32218: GO 32311
// i := list [ pos1 ] ;
32220: LD_ADDR_VAR 0 5
32224: PUSH
32225: LD_VAR 0 1
32229: PUSH
32230: LD_VAR 0 2
32234: ARRAY
32235: ST_TO_ADDR
// if not i then
32236: LD_VAR 0 5
32240: NOT
32241: IFFALSE 32245
// exit ;
32243: GO 32311
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32245: LD_ADDR_VAR 0 1
32249: PUSH
32250: LD_VAR 0 1
32254: PPUSH
32255: LD_VAR 0 2
32259: PPUSH
32260: LD_VAR 0 1
32264: PUSH
32265: LD_VAR 0 3
32269: ARRAY
32270: PPUSH
32271: CALL_OW 1
32275: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32276: LD_ADDR_VAR 0 1
32280: PUSH
32281: LD_VAR 0 1
32285: PPUSH
32286: LD_VAR 0 3
32290: PPUSH
32291: LD_VAR 0 5
32295: PPUSH
32296: CALL_OW 1
32300: ST_TO_ADDR
// result := list ;
32301: LD_ADDR_VAR 0 4
32305: PUSH
32306: LD_VAR 0 1
32310: ST_TO_ADDR
// end ;
32311: LD_VAR 0 4
32315: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32316: LD_INT 0
32318: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32319: LD_ADDR_VAR 0 5
32323: PUSH
32324: LD_VAR 0 1
32328: PPUSH
32329: CALL_OW 250
32333: PPUSH
32334: LD_VAR 0 1
32338: PPUSH
32339: CALL_OW 251
32343: PPUSH
32344: LD_VAR 0 2
32348: PPUSH
32349: LD_VAR 0 3
32353: PPUSH
32354: LD_VAR 0 4
32358: PPUSH
32359: CALL 32369 0 5
32363: ST_TO_ADDR
// end ;
32364: LD_VAR 0 5
32368: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32369: LD_INT 0
32371: PPUSH
32372: PPUSH
32373: PPUSH
32374: PPUSH
// if not list then
32375: LD_VAR 0 3
32379: NOT
32380: IFFALSE 32384
// exit ;
32382: GO 32772
// result := [ ] ;
32384: LD_ADDR_VAR 0 6
32388: PUSH
32389: EMPTY
32390: ST_TO_ADDR
// for i in list do
32391: LD_ADDR_VAR 0 7
32395: PUSH
32396: LD_VAR 0 3
32400: PUSH
32401: FOR_IN
32402: IFFALSE 32604
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32404: LD_ADDR_VAR 0 9
32408: PUSH
32409: LD_VAR 0 7
32413: PPUSH
32414: LD_VAR 0 1
32418: PPUSH
32419: LD_VAR 0 2
32423: PPUSH
32424: CALL_OW 297
32428: ST_TO_ADDR
// if not result then
32429: LD_VAR 0 6
32433: NOT
32434: IFFALSE 32460
// result := [ [ i , tmp ] ] else
32436: LD_ADDR_VAR 0 6
32440: PUSH
32441: LD_VAR 0 7
32445: PUSH
32446: LD_VAR 0 9
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: PUSH
32455: EMPTY
32456: LIST
32457: ST_TO_ADDR
32458: GO 32602
// begin if result [ result ] [ 2 ] < tmp then
32460: LD_VAR 0 6
32464: PUSH
32465: LD_VAR 0 6
32469: ARRAY
32470: PUSH
32471: LD_INT 2
32473: ARRAY
32474: PUSH
32475: LD_VAR 0 9
32479: LESS
32480: IFFALSE 32522
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32482: LD_ADDR_VAR 0 6
32486: PUSH
32487: LD_VAR 0 6
32491: PPUSH
32492: LD_VAR 0 6
32496: PUSH
32497: LD_INT 1
32499: PLUS
32500: PPUSH
32501: LD_VAR 0 7
32505: PUSH
32506: LD_VAR 0 9
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: PPUSH
32515: CALL_OW 2
32519: ST_TO_ADDR
32520: GO 32602
// for j = 1 to result do
32522: LD_ADDR_VAR 0 8
32526: PUSH
32527: DOUBLE
32528: LD_INT 1
32530: DEC
32531: ST_TO_ADDR
32532: LD_VAR 0 6
32536: PUSH
32537: FOR_TO
32538: IFFALSE 32600
// begin if tmp < result [ j ] [ 2 ] then
32540: LD_VAR 0 9
32544: PUSH
32545: LD_VAR 0 6
32549: PUSH
32550: LD_VAR 0 8
32554: ARRAY
32555: PUSH
32556: LD_INT 2
32558: ARRAY
32559: LESS
32560: IFFALSE 32598
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32562: LD_ADDR_VAR 0 6
32566: PUSH
32567: LD_VAR 0 6
32571: PPUSH
32572: LD_VAR 0 8
32576: PPUSH
32577: LD_VAR 0 7
32581: PUSH
32582: LD_VAR 0 9
32586: PUSH
32587: EMPTY
32588: LIST
32589: LIST
32590: PPUSH
32591: CALL_OW 2
32595: ST_TO_ADDR
// break ;
32596: GO 32600
// end ; end ;
32598: GO 32537
32600: POP
32601: POP
// end ; end ;
32602: GO 32401
32604: POP
32605: POP
// if result and not asc then
32606: LD_VAR 0 6
32610: PUSH
32611: LD_VAR 0 4
32615: NOT
32616: AND
32617: IFFALSE 32692
// begin tmp := result ;
32619: LD_ADDR_VAR 0 9
32623: PUSH
32624: LD_VAR 0 6
32628: ST_TO_ADDR
// for i = tmp downto 1 do
32629: LD_ADDR_VAR 0 7
32633: PUSH
32634: DOUBLE
32635: LD_VAR 0 9
32639: INC
32640: ST_TO_ADDR
32641: LD_INT 1
32643: PUSH
32644: FOR_DOWNTO
32645: IFFALSE 32690
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
32647: LD_ADDR_VAR 0 6
32651: PUSH
32652: LD_VAR 0 6
32656: PPUSH
32657: LD_VAR 0 9
32661: PUSH
32662: LD_VAR 0 7
32666: MINUS
32667: PUSH
32668: LD_INT 1
32670: PLUS
32671: PPUSH
32672: LD_VAR 0 9
32676: PUSH
32677: LD_VAR 0 7
32681: ARRAY
32682: PPUSH
32683: CALL_OW 1
32687: ST_TO_ADDR
32688: GO 32644
32690: POP
32691: POP
// end ; tmp := [ ] ;
32692: LD_ADDR_VAR 0 9
32696: PUSH
32697: EMPTY
32698: ST_TO_ADDR
// if mode then
32699: LD_VAR 0 5
32703: IFFALSE 32772
// begin for i = 1 to result do
32705: LD_ADDR_VAR 0 7
32709: PUSH
32710: DOUBLE
32711: LD_INT 1
32713: DEC
32714: ST_TO_ADDR
32715: LD_VAR 0 6
32719: PUSH
32720: FOR_TO
32721: IFFALSE 32760
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
32723: LD_ADDR_VAR 0 9
32727: PUSH
32728: LD_VAR 0 9
32732: PPUSH
32733: LD_VAR 0 7
32737: PPUSH
32738: LD_VAR 0 6
32742: PUSH
32743: LD_VAR 0 7
32747: ARRAY
32748: PUSH
32749: LD_INT 1
32751: ARRAY
32752: PPUSH
32753: CALL_OW 1
32757: ST_TO_ADDR
32758: GO 32720
32760: POP
32761: POP
// result := tmp ;
32762: LD_ADDR_VAR 0 6
32766: PUSH
32767: LD_VAR 0 9
32771: ST_TO_ADDR
// end ; end ;
32772: LD_VAR 0 6
32776: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
32777: LD_INT 0
32779: PPUSH
32780: PPUSH
32781: PPUSH
32782: PPUSH
32783: PPUSH
32784: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
32785: LD_ADDR_VAR 0 5
32789: PUSH
32790: LD_INT 0
32792: PUSH
32793: LD_INT 0
32795: PUSH
32796: LD_INT 0
32798: PUSH
32799: EMPTY
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: LIST
32805: LIST
32806: ST_TO_ADDR
// if not x or not y then
32807: LD_VAR 0 2
32811: NOT
32812: PUSH
32813: LD_VAR 0 3
32817: NOT
32818: OR
32819: IFFALSE 32823
// exit ;
32821: GO 34473
// if not range then
32823: LD_VAR 0 4
32827: NOT
32828: IFFALSE 32838
// range := 10 ;
32830: LD_ADDR_VAR 0 4
32834: PUSH
32835: LD_INT 10
32837: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32838: LD_ADDR_VAR 0 8
32842: PUSH
32843: LD_INT 81
32845: PUSH
32846: LD_VAR 0 1
32850: PUSH
32851: EMPTY
32852: LIST
32853: LIST
32854: PUSH
32855: LD_INT 92
32857: PUSH
32858: LD_VAR 0 2
32862: PUSH
32863: LD_VAR 0 3
32867: PUSH
32868: LD_VAR 0 4
32872: PUSH
32873: EMPTY
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: PUSH
32879: LD_INT 3
32881: PUSH
32882: LD_INT 21
32884: PUSH
32885: LD_INT 3
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: PUSH
32892: EMPTY
32893: LIST
32894: LIST
32895: PUSH
32896: EMPTY
32897: LIST
32898: LIST
32899: LIST
32900: PPUSH
32901: CALL_OW 69
32905: ST_TO_ADDR
// if not tmp then
32906: LD_VAR 0 8
32910: NOT
32911: IFFALSE 32915
// exit ;
32913: GO 34473
// for i in tmp do
32915: LD_ADDR_VAR 0 6
32919: PUSH
32920: LD_VAR 0 8
32924: PUSH
32925: FOR_IN
32926: IFFALSE 34448
// begin points := [ 0 , 0 , 0 ] ;
32928: LD_ADDR_VAR 0 9
32932: PUSH
32933: LD_INT 0
32935: PUSH
32936: LD_INT 0
32938: PUSH
32939: LD_INT 0
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: LIST
32946: ST_TO_ADDR
// bpoints := 1 ;
32947: LD_ADDR_VAR 0 10
32951: PUSH
32952: LD_INT 1
32954: ST_TO_ADDR
// case GetType ( i ) of unit_human :
32955: LD_VAR 0 6
32959: PPUSH
32960: CALL_OW 247
32964: PUSH
32965: LD_INT 1
32967: DOUBLE
32968: EQUAL
32969: IFTRUE 32973
32971: GO 33551
32973: POP
// begin if GetClass ( i ) = 1 then
32974: LD_VAR 0 6
32978: PPUSH
32979: CALL_OW 257
32983: PUSH
32984: LD_INT 1
32986: EQUAL
32987: IFFALSE 33008
// points := [ 10 , 5 , 3 ] ;
32989: LD_ADDR_VAR 0 9
32993: PUSH
32994: LD_INT 10
32996: PUSH
32997: LD_INT 5
32999: PUSH
33000: LD_INT 3
33002: PUSH
33003: EMPTY
33004: LIST
33005: LIST
33006: LIST
33007: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
33008: LD_VAR 0 6
33012: PPUSH
33013: CALL_OW 257
33017: PUSH
33018: LD_INT 2
33020: PUSH
33021: LD_INT 3
33023: PUSH
33024: LD_INT 4
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: LIST
33031: IN
33032: IFFALSE 33053
// points := [ 3 , 2 , 1 ] ;
33034: LD_ADDR_VAR 0 9
33038: PUSH
33039: LD_INT 3
33041: PUSH
33042: LD_INT 2
33044: PUSH
33045: LD_INT 1
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: LIST
33052: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33053: LD_VAR 0 6
33057: PPUSH
33058: CALL_OW 257
33062: PUSH
33063: LD_INT 5
33065: EQUAL
33066: IFFALSE 33087
// points := [ 130 , 5 , 2 ] ;
33068: LD_ADDR_VAR 0 9
33072: PUSH
33073: LD_INT 130
33075: PUSH
33076: LD_INT 5
33078: PUSH
33079: LD_INT 2
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: LIST
33086: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33087: LD_VAR 0 6
33091: PPUSH
33092: CALL_OW 257
33096: PUSH
33097: LD_INT 8
33099: EQUAL
33100: IFFALSE 33121
// points := [ 35 , 35 , 30 ] ;
33102: LD_ADDR_VAR 0 9
33106: PUSH
33107: LD_INT 35
33109: PUSH
33110: LD_INT 35
33112: PUSH
33113: LD_INT 30
33115: PUSH
33116: EMPTY
33117: LIST
33118: LIST
33119: LIST
33120: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33121: LD_VAR 0 6
33125: PPUSH
33126: CALL_OW 257
33130: PUSH
33131: LD_INT 9
33133: EQUAL
33134: IFFALSE 33155
// points := [ 20 , 55 , 40 ] ;
33136: LD_ADDR_VAR 0 9
33140: PUSH
33141: LD_INT 20
33143: PUSH
33144: LD_INT 55
33146: PUSH
33147: LD_INT 40
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: LIST
33154: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33155: LD_VAR 0 6
33159: PPUSH
33160: CALL_OW 257
33164: PUSH
33165: LD_INT 12
33167: PUSH
33168: LD_INT 16
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: IN
33175: IFFALSE 33196
// points := [ 5 , 3 , 2 ] ;
33177: LD_ADDR_VAR 0 9
33181: PUSH
33182: LD_INT 5
33184: PUSH
33185: LD_INT 3
33187: PUSH
33188: LD_INT 2
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: LIST
33195: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33196: LD_VAR 0 6
33200: PPUSH
33201: CALL_OW 257
33205: PUSH
33206: LD_INT 17
33208: EQUAL
33209: IFFALSE 33230
// points := [ 100 , 50 , 75 ] ;
33211: LD_ADDR_VAR 0 9
33215: PUSH
33216: LD_INT 100
33218: PUSH
33219: LD_INT 50
33221: PUSH
33222: LD_INT 75
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: LIST
33229: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33230: LD_VAR 0 6
33234: PPUSH
33235: CALL_OW 257
33239: PUSH
33240: LD_INT 15
33242: EQUAL
33243: IFFALSE 33264
// points := [ 10 , 5 , 3 ] ;
33245: LD_ADDR_VAR 0 9
33249: PUSH
33250: LD_INT 10
33252: PUSH
33253: LD_INT 5
33255: PUSH
33256: LD_INT 3
33258: PUSH
33259: EMPTY
33260: LIST
33261: LIST
33262: LIST
33263: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33264: LD_VAR 0 6
33268: PPUSH
33269: CALL_OW 257
33273: PUSH
33274: LD_INT 14
33276: EQUAL
33277: IFFALSE 33298
// points := [ 10 , 0 , 0 ] ;
33279: LD_ADDR_VAR 0 9
33283: PUSH
33284: LD_INT 10
33286: PUSH
33287: LD_INT 0
33289: PUSH
33290: LD_INT 0
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: LIST
33297: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33298: LD_VAR 0 6
33302: PPUSH
33303: CALL_OW 257
33307: PUSH
33308: LD_INT 11
33310: EQUAL
33311: IFFALSE 33332
// points := [ 30 , 10 , 5 ] ;
33313: LD_ADDR_VAR 0 9
33317: PUSH
33318: LD_INT 30
33320: PUSH
33321: LD_INT 10
33323: PUSH
33324: LD_INT 5
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: LIST
33331: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33332: LD_VAR 0 1
33336: PPUSH
33337: LD_INT 5
33339: PPUSH
33340: CALL_OW 321
33344: PUSH
33345: LD_INT 2
33347: EQUAL
33348: IFFALSE 33365
// bpoints := bpoints * 1.8 ;
33350: LD_ADDR_VAR 0 10
33354: PUSH
33355: LD_VAR 0 10
33359: PUSH
33360: LD_REAL  1.80000000000000E+0000
33363: MUL
33364: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33365: LD_VAR 0 6
33369: PPUSH
33370: CALL_OW 257
33374: PUSH
33375: LD_INT 1
33377: PUSH
33378: LD_INT 2
33380: PUSH
33381: LD_INT 3
33383: PUSH
33384: LD_INT 4
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: LIST
33391: LIST
33392: IN
33393: PUSH
33394: LD_VAR 0 1
33398: PPUSH
33399: LD_INT 51
33401: PPUSH
33402: CALL_OW 321
33406: PUSH
33407: LD_INT 2
33409: EQUAL
33410: AND
33411: IFFALSE 33428
// bpoints := bpoints * 1.2 ;
33413: LD_ADDR_VAR 0 10
33417: PUSH
33418: LD_VAR 0 10
33422: PUSH
33423: LD_REAL  1.20000000000000E+0000
33426: MUL
33427: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33428: LD_VAR 0 6
33432: PPUSH
33433: CALL_OW 257
33437: PUSH
33438: LD_INT 5
33440: PUSH
33441: LD_INT 7
33443: PUSH
33444: LD_INT 9
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: LIST
33451: IN
33452: PUSH
33453: LD_VAR 0 1
33457: PPUSH
33458: LD_INT 52
33460: PPUSH
33461: CALL_OW 321
33465: PUSH
33466: LD_INT 2
33468: EQUAL
33469: AND
33470: IFFALSE 33487
// bpoints := bpoints * 1.5 ;
33472: LD_ADDR_VAR 0 10
33476: PUSH
33477: LD_VAR 0 10
33481: PUSH
33482: LD_REAL  1.50000000000000E+0000
33485: MUL
33486: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33487: LD_VAR 0 1
33491: PPUSH
33492: LD_INT 66
33494: PPUSH
33495: CALL_OW 321
33499: PUSH
33500: LD_INT 2
33502: EQUAL
33503: IFFALSE 33520
// bpoints := bpoints * 1.1 ;
33505: LD_ADDR_VAR 0 10
33509: PUSH
33510: LD_VAR 0 10
33514: PUSH
33515: LD_REAL  1.10000000000000E+0000
33518: MUL
33519: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33520: LD_ADDR_VAR 0 10
33524: PUSH
33525: LD_VAR 0 10
33529: PUSH
33530: LD_VAR 0 6
33534: PPUSH
33535: LD_INT 1
33537: PPUSH
33538: CALL_OW 259
33542: PUSH
33543: LD_REAL  1.15000000000000E+0000
33546: MUL
33547: MUL
33548: ST_TO_ADDR
// end ; unit_vehicle :
33549: GO 34377
33551: LD_INT 2
33553: DOUBLE
33554: EQUAL
33555: IFTRUE 33559
33557: GO 34365
33559: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33560: LD_VAR 0 6
33564: PPUSH
33565: CALL_OW 264
33569: PUSH
33570: LD_INT 2
33572: PUSH
33573: LD_INT 42
33575: PUSH
33576: LD_INT 24
33578: PUSH
33579: EMPTY
33580: LIST
33581: LIST
33582: LIST
33583: IN
33584: IFFALSE 33605
// points := [ 25 , 5 , 3 ] ;
33586: LD_ADDR_VAR 0 9
33590: PUSH
33591: LD_INT 25
33593: PUSH
33594: LD_INT 5
33596: PUSH
33597: LD_INT 3
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: LIST
33604: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33605: LD_VAR 0 6
33609: PPUSH
33610: CALL_OW 264
33614: PUSH
33615: LD_INT 4
33617: PUSH
33618: LD_INT 43
33620: PUSH
33621: LD_INT 25
33623: PUSH
33624: EMPTY
33625: LIST
33626: LIST
33627: LIST
33628: IN
33629: IFFALSE 33650
// points := [ 40 , 15 , 5 ] ;
33631: LD_ADDR_VAR 0 9
33635: PUSH
33636: LD_INT 40
33638: PUSH
33639: LD_INT 15
33641: PUSH
33642: LD_INT 5
33644: PUSH
33645: EMPTY
33646: LIST
33647: LIST
33648: LIST
33649: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
33650: LD_VAR 0 6
33654: PPUSH
33655: CALL_OW 264
33659: PUSH
33660: LD_INT 3
33662: PUSH
33663: LD_INT 23
33665: PUSH
33666: EMPTY
33667: LIST
33668: LIST
33669: IN
33670: IFFALSE 33691
// points := [ 7 , 25 , 8 ] ;
33672: LD_ADDR_VAR 0 9
33676: PUSH
33677: LD_INT 7
33679: PUSH
33680: LD_INT 25
33682: PUSH
33683: LD_INT 8
33685: PUSH
33686: EMPTY
33687: LIST
33688: LIST
33689: LIST
33690: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
33691: LD_VAR 0 6
33695: PPUSH
33696: CALL_OW 264
33700: PUSH
33701: LD_INT 5
33703: PUSH
33704: LD_INT 27
33706: PUSH
33707: LD_INT 44
33709: PUSH
33710: EMPTY
33711: LIST
33712: LIST
33713: LIST
33714: IN
33715: IFFALSE 33736
// points := [ 14 , 50 , 16 ] ;
33717: LD_ADDR_VAR 0 9
33721: PUSH
33722: LD_INT 14
33724: PUSH
33725: LD_INT 50
33727: PUSH
33728: LD_INT 16
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: LIST
33735: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
33736: LD_VAR 0 6
33740: PPUSH
33741: CALL_OW 264
33745: PUSH
33746: LD_INT 6
33748: PUSH
33749: LD_INT 46
33751: PUSH
33752: EMPTY
33753: LIST
33754: LIST
33755: IN
33756: IFFALSE 33777
// points := [ 32 , 120 , 70 ] ;
33758: LD_ADDR_VAR 0 9
33762: PUSH
33763: LD_INT 32
33765: PUSH
33766: LD_INT 120
33768: PUSH
33769: LD_INT 70
33771: PUSH
33772: EMPTY
33773: LIST
33774: LIST
33775: LIST
33776: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
33777: LD_VAR 0 6
33781: PPUSH
33782: CALL_OW 264
33786: PUSH
33787: LD_INT 7
33789: PUSH
33790: LD_INT 28
33792: PUSH
33793: LD_INT 45
33795: PUSH
33796: LD_INT 92
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: LIST
33803: LIST
33804: IN
33805: IFFALSE 33826
// points := [ 35 , 20 , 45 ] ;
33807: LD_ADDR_VAR 0 9
33811: PUSH
33812: LD_INT 35
33814: PUSH
33815: LD_INT 20
33817: PUSH
33818: LD_INT 45
33820: PUSH
33821: EMPTY
33822: LIST
33823: LIST
33824: LIST
33825: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
33826: LD_VAR 0 6
33830: PPUSH
33831: CALL_OW 264
33835: PUSH
33836: LD_INT 47
33838: PUSH
33839: EMPTY
33840: LIST
33841: IN
33842: IFFALSE 33863
// points := [ 67 , 45 , 75 ] ;
33844: LD_ADDR_VAR 0 9
33848: PUSH
33849: LD_INT 67
33851: PUSH
33852: LD_INT 45
33854: PUSH
33855: LD_INT 75
33857: PUSH
33858: EMPTY
33859: LIST
33860: LIST
33861: LIST
33862: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
33863: LD_VAR 0 6
33867: PPUSH
33868: CALL_OW 264
33872: PUSH
33873: LD_INT 26
33875: PUSH
33876: EMPTY
33877: LIST
33878: IN
33879: IFFALSE 33900
// points := [ 120 , 30 , 80 ] ;
33881: LD_ADDR_VAR 0 9
33885: PUSH
33886: LD_INT 120
33888: PUSH
33889: LD_INT 30
33891: PUSH
33892: LD_INT 80
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: LIST
33899: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
33900: LD_VAR 0 6
33904: PPUSH
33905: CALL_OW 264
33909: PUSH
33910: LD_INT 22
33912: PUSH
33913: EMPTY
33914: LIST
33915: IN
33916: IFFALSE 33937
// points := [ 40 , 1 , 1 ] ;
33918: LD_ADDR_VAR 0 9
33922: PUSH
33923: LD_INT 40
33925: PUSH
33926: LD_INT 1
33928: PUSH
33929: LD_INT 1
33931: PUSH
33932: EMPTY
33933: LIST
33934: LIST
33935: LIST
33936: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
33937: LD_VAR 0 6
33941: PPUSH
33942: CALL_OW 264
33946: PUSH
33947: LD_INT 29
33949: PUSH
33950: EMPTY
33951: LIST
33952: IN
33953: IFFALSE 33974
// points := [ 70 , 200 , 400 ] ;
33955: LD_ADDR_VAR 0 9
33959: PUSH
33960: LD_INT 70
33962: PUSH
33963: LD_INT 200
33965: PUSH
33966: LD_INT 400
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: LIST
33973: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
33974: LD_VAR 0 6
33978: PPUSH
33979: CALL_OW 264
33983: PUSH
33984: LD_INT 14
33986: PUSH
33987: LD_INT 53
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: IN
33994: IFFALSE 34015
// points := [ 40 , 10 , 20 ] ;
33996: LD_ADDR_VAR 0 9
34000: PUSH
34001: LD_INT 40
34003: PUSH
34004: LD_INT 10
34006: PUSH
34007: LD_INT 20
34009: PUSH
34010: EMPTY
34011: LIST
34012: LIST
34013: LIST
34014: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34015: LD_VAR 0 6
34019: PPUSH
34020: CALL_OW 264
34024: PUSH
34025: LD_INT 9
34027: PUSH
34028: EMPTY
34029: LIST
34030: IN
34031: IFFALSE 34052
// points := [ 5 , 70 , 20 ] ;
34033: LD_ADDR_VAR 0 9
34037: PUSH
34038: LD_INT 5
34040: PUSH
34041: LD_INT 70
34043: PUSH
34044: LD_INT 20
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: LIST
34051: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34052: LD_VAR 0 6
34056: PPUSH
34057: CALL_OW 264
34061: PUSH
34062: LD_INT 10
34064: PUSH
34065: EMPTY
34066: LIST
34067: IN
34068: IFFALSE 34089
// points := [ 35 , 110 , 70 ] ;
34070: LD_ADDR_VAR 0 9
34074: PUSH
34075: LD_INT 35
34077: PUSH
34078: LD_INT 110
34080: PUSH
34081: LD_INT 70
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: LIST
34088: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34089: LD_VAR 0 6
34093: PPUSH
34094: CALL_OW 265
34098: PUSH
34099: LD_INT 25
34101: EQUAL
34102: IFFALSE 34123
// points := [ 80 , 65 , 100 ] ;
34104: LD_ADDR_VAR 0 9
34108: PUSH
34109: LD_INT 80
34111: PUSH
34112: LD_INT 65
34114: PUSH
34115: LD_INT 100
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: LIST
34122: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34123: LD_VAR 0 6
34127: PPUSH
34128: CALL_OW 263
34132: PUSH
34133: LD_INT 1
34135: EQUAL
34136: IFFALSE 34171
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34138: LD_ADDR_VAR 0 10
34142: PUSH
34143: LD_VAR 0 10
34147: PUSH
34148: LD_VAR 0 6
34152: PPUSH
34153: CALL_OW 311
34157: PPUSH
34158: LD_INT 3
34160: PPUSH
34161: CALL_OW 259
34165: PUSH
34166: LD_INT 4
34168: MUL
34169: MUL
34170: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34171: LD_VAR 0 6
34175: PPUSH
34176: CALL_OW 263
34180: PUSH
34181: LD_INT 2
34183: EQUAL
34184: IFFALSE 34235
// begin j := IsControledBy ( i ) ;
34186: LD_ADDR_VAR 0 7
34190: PUSH
34191: LD_VAR 0 6
34195: PPUSH
34196: CALL_OW 312
34200: ST_TO_ADDR
// if j then
34201: LD_VAR 0 7
34205: IFFALSE 34235
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34207: LD_ADDR_VAR 0 10
34211: PUSH
34212: LD_VAR 0 10
34216: PUSH
34217: LD_VAR 0 7
34221: PPUSH
34222: LD_INT 3
34224: PPUSH
34225: CALL_OW 259
34229: PUSH
34230: LD_INT 3
34232: MUL
34233: MUL
34234: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34235: LD_VAR 0 6
34239: PPUSH
34240: CALL_OW 264
34244: PUSH
34245: LD_INT 5
34247: PUSH
34248: LD_INT 6
34250: PUSH
34251: LD_INT 46
34253: PUSH
34254: LD_INT 44
34256: PUSH
34257: LD_INT 47
34259: PUSH
34260: LD_INT 45
34262: PUSH
34263: LD_INT 28
34265: PUSH
34266: LD_INT 7
34268: PUSH
34269: LD_INT 27
34271: PUSH
34272: LD_INT 29
34274: PUSH
34275: EMPTY
34276: LIST
34277: LIST
34278: LIST
34279: LIST
34280: LIST
34281: LIST
34282: LIST
34283: LIST
34284: LIST
34285: LIST
34286: IN
34287: PUSH
34288: LD_VAR 0 1
34292: PPUSH
34293: LD_INT 52
34295: PPUSH
34296: CALL_OW 321
34300: PUSH
34301: LD_INT 2
34303: EQUAL
34304: AND
34305: IFFALSE 34322
// bpoints := bpoints * 1.2 ;
34307: LD_ADDR_VAR 0 10
34311: PUSH
34312: LD_VAR 0 10
34316: PUSH
34317: LD_REAL  1.20000000000000E+0000
34320: MUL
34321: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34322: LD_VAR 0 6
34326: PPUSH
34327: CALL_OW 264
34331: PUSH
34332: LD_INT 6
34334: PUSH
34335: LD_INT 46
34337: PUSH
34338: LD_INT 47
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: LIST
34345: IN
34346: IFFALSE 34363
// bpoints := bpoints * 1.2 ;
34348: LD_ADDR_VAR 0 10
34352: PUSH
34353: LD_VAR 0 10
34357: PUSH
34358: LD_REAL  1.20000000000000E+0000
34361: MUL
34362: ST_TO_ADDR
// end ; unit_building :
34363: GO 34377
34365: LD_INT 3
34367: DOUBLE
34368: EQUAL
34369: IFTRUE 34373
34371: GO 34376
34373: POP
// ; end ;
34374: GO 34377
34376: POP
// for j = 1 to 3 do
34377: LD_ADDR_VAR 0 7
34381: PUSH
34382: DOUBLE
34383: LD_INT 1
34385: DEC
34386: ST_TO_ADDR
34387: LD_INT 3
34389: PUSH
34390: FOR_TO
34391: IFFALSE 34444
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34393: LD_ADDR_VAR 0 5
34397: PUSH
34398: LD_VAR 0 5
34402: PPUSH
34403: LD_VAR 0 7
34407: PPUSH
34408: LD_VAR 0 5
34412: PUSH
34413: LD_VAR 0 7
34417: ARRAY
34418: PUSH
34419: LD_VAR 0 9
34423: PUSH
34424: LD_VAR 0 7
34428: ARRAY
34429: PUSH
34430: LD_VAR 0 10
34434: MUL
34435: PLUS
34436: PPUSH
34437: CALL_OW 1
34441: ST_TO_ADDR
34442: GO 34390
34444: POP
34445: POP
// end ;
34446: GO 32925
34448: POP
34449: POP
// result := Replace ( result , 4 , tmp ) ;
34450: LD_ADDR_VAR 0 5
34454: PUSH
34455: LD_VAR 0 5
34459: PPUSH
34460: LD_INT 4
34462: PPUSH
34463: LD_VAR 0 8
34467: PPUSH
34468: CALL_OW 1
34472: ST_TO_ADDR
// end ;
34473: LD_VAR 0 5
34477: RET
// export function DangerAtRange ( unit , range ) ; begin
34478: LD_INT 0
34480: PPUSH
// if not unit then
34481: LD_VAR 0 1
34485: NOT
34486: IFFALSE 34490
// exit ;
34488: GO 34535
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34490: LD_ADDR_VAR 0 3
34494: PUSH
34495: LD_VAR 0 1
34499: PPUSH
34500: CALL_OW 255
34504: PPUSH
34505: LD_VAR 0 1
34509: PPUSH
34510: CALL_OW 250
34514: PPUSH
34515: LD_VAR 0 1
34519: PPUSH
34520: CALL_OW 251
34524: PPUSH
34525: LD_VAR 0 2
34529: PPUSH
34530: CALL 32777 0 4
34534: ST_TO_ADDR
// end ;
34535: LD_VAR 0 3
34539: RET
// export function DangerInArea ( side , area ) ; begin
34540: LD_INT 0
34542: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34543: LD_ADDR_VAR 0 3
34547: PUSH
34548: LD_VAR 0 2
34552: PPUSH
34553: LD_INT 81
34555: PUSH
34556: LD_VAR 0 1
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: PPUSH
34565: CALL_OW 70
34569: ST_TO_ADDR
// end ;
34570: LD_VAR 0 3
34574: RET
// export function IsExtension ( b ) ; begin
34575: LD_INT 0
34577: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34578: LD_ADDR_VAR 0 2
34582: PUSH
34583: LD_VAR 0 1
34587: PUSH
34588: LD_INT 23
34590: PUSH
34591: LD_INT 20
34593: PUSH
34594: LD_INT 22
34596: PUSH
34597: LD_INT 17
34599: PUSH
34600: LD_INT 24
34602: PUSH
34603: LD_INT 21
34605: PUSH
34606: LD_INT 19
34608: PUSH
34609: LD_INT 16
34611: PUSH
34612: LD_INT 25
34614: PUSH
34615: LD_INT 18
34617: PUSH
34618: EMPTY
34619: LIST
34620: LIST
34621: LIST
34622: LIST
34623: LIST
34624: LIST
34625: LIST
34626: LIST
34627: LIST
34628: LIST
34629: IN
34630: ST_TO_ADDR
// end ;
34631: LD_VAR 0 2
34635: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
34636: LD_INT 0
34638: PPUSH
34639: PPUSH
34640: PPUSH
// result := [ ] ;
34641: LD_ADDR_VAR 0 4
34645: PUSH
34646: EMPTY
34647: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
34648: LD_ADDR_VAR 0 5
34652: PUSH
34653: LD_VAR 0 2
34657: PPUSH
34658: LD_INT 21
34660: PUSH
34661: LD_INT 3
34663: PUSH
34664: EMPTY
34665: LIST
34666: LIST
34667: PPUSH
34668: CALL_OW 70
34672: ST_TO_ADDR
// if not tmp then
34673: LD_VAR 0 5
34677: NOT
34678: IFFALSE 34682
// exit ;
34680: GO 34746
// if checkLink then
34682: LD_VAR 0 3
34686: IFFALSE 34736
// begin for i in tmp do
34688: LD_ADDR_VAR 0 6
34692: PUSH
34693: LD_VAR 0 5
34697: PUSH
34698: FOR_IN
34699: IFFALSE 34734
// if GetBase ( i ) <> base then
34701: LD_VAR 0 6
34705: PPUSH
34706: CALL_OW 274
34710: PUSH
34711: LD_VAR 0 1
34715: NONEQUAL
34716: IFFALSE 34732
// ComLinkToBase ( base , i ) ;
34718: LD_VAR 0 1
34722: PPUSH
34723: LD_VAR 0 6
34727: PPUSH
34728: CALL_OW 169
34732: GO 34698
34734: POP
34735: POP
// end ; result := tmp ;
34736: LD_ADDR_VAR 0 4
34740: PUSH
34741: LD_VAR 0 5
34745: ST_TO_ADDR
// end ;
34746: LD_VAR 0 4
34750: RET
// export function ComComplete ( units , b ) ; var i ; begin
34751: LD_INT 0
34753: PPUSH
34754: PPUSH
// if not units then
34755: LD_VAR 0 1
34759: NOT
34760: IFFALSE 34764
// exit ;
34762: GO 34854
// for i in units do
34764: LD_ADDR_VAR 0 4
34768: PUSH
34769: LD_VAR 0 1
34773: PUSH
34774: FOR_IN
34775: IFFALSE 34852
// if BuildingStatus ( b ) = bs_build then
34777: LD_VAR 0 2
34781: PPUSH
34782: CALL_OW 461
34786: PUSH
34787: LD_INT 1
34789: EQUAL
34790: IFFALSE 34850
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
34792: LD_VAR 0 4
34796: PPUSH
34797: LD_STRING h
34799: PUSH
34800: LD_VAR 0 2
34804: PPUSH
34805: CALL_OW 250
34809: PUSH
34810: LD_VAR 0 2
34814: PPUSH
34815: CALL_OW 251
34819: PUSH
34820: LD_VAR 0 2
34824: PUSH
34825: LD_INT 0
34827: PUSH
34828: LD_INT 0
34830: PUSH
34831: LD_INT 0
34833: PUSH
34834: EMPTY
34835: LIST
34836: LIST
34837: LIST
34838: LIST
34839: LIST
34840: LIST
34841: LIST
34842: PUSH
34843: EMPTY
34844: LIST
34845: PPUSH
34846: CALL_OW 446
34850: GO 34774
34852: POP
34853: POP
// end ;
34854: LD_VAR 0 3
34858: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
34859: LD_INT 0
34861: PPUSH
34862: PPUSH
34863: PPUSH
34864: PPUSH
34865: PPUSH
34866: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
34867: LD_VAR 0 1
34871: NOT
34872: PUSH
34873: LD_VAR 0 1
34877: PPUSH
34878: CALL_OW 263
34882: PUSH
34883: LD_INT 2
34885: NONEQUAL
34886: OR
34887: IFFALSE 34891
// exit ;
34889: GO 35207
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
34891: LD_ADDR_VAR 0 6
34895: PUSH
34896: LD_INT 22
34898: PUSH
34899: LD_VAR 0 1
34903: PPUSH
34904: CALL_OW 255
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PUSH
34913: LD_INT 2
34915: PUSH
34916: LD_INT 30
34918: PUSH
34919: LD_INT 36
34921: PUSH
34922: EMPTY
34923: LIST
34924: LIST
34925: PUSH
34926: LD_INT 34
34928: PUSH
34929: LD_INT 31
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: PUSH
34936: EMPTY
34937: LIST
34938: LIST
34939: LIST
34940: PUSH
34941: EMPTY
34942: LIST
34943: LIST
34944: PPUSH
34945: CALL_OW 69
34949: ST_TO_ADDR
// if not tmp then
34950: LD_VAR 0 6
34954: NOT
34955: IFFALSE 34959
// exit ;
34957: GO 35207
// result := [ ] ;
34959: LD_ADDR_VAR 0 2
34963: PUSH
34964: EMPTY
34965: ST_TO_ADDR
// for i in tmp do
34966: LD_ADDR_VAR 0 3
34970: PUSH
34971: LD_VAR 0 6
34975: PUSH
34976: FOR_IN
34977: IFFALSE 35048
// begin t := UnitsInside ( i ) ;
34979: LD_ADDR_VAR 0 4
34983: PUSH
34984: LD_VAR 0 3
34988: PPUSH
34989: CALL_OW 313
34993: ST_TO_ADDR
// if t then
34994: LD_VAR 0 4
34998: IFFALSE 35046
// for j in t do
35000: LD_ADDR_VAR 0 7
35004: PUSH
35005: LD_VAR 0 4
35009: PUSH
35010: FOR_IN
35011: IFFALSE 35044
// result := Replace ( result , result + 1 , j ) ;
35013: LD_ADDR_VAR 0 2
35017: PUSH
35018: LD_VAR 0 2
35022: PPUSH
35023: LD_VAR 0 2
35027: PUSH
35028: LD_INT 1
35030: PLUS
35031: PPUSH
35032: LD_VAR 0 7
35036: PPUSH
35037: CALL_OW 1
35041: ST_TO_ADDR
35042: GO 35010
35044: POP
35045: POP
// end ;
35046: GO 34976
35048: POP
35049: POP
// if not result then
35050: LD_VAR 0 2
35054: NOT
35055: IFFALSE 35059
// exit ;
35057: GO 35207
// mech := result [ 1 ] ;
35059: LD_ADDR_VAR 0 5
35063: PUSH
35064: LD_VAR 0 2
35068: PUSH
35069: LD_INT 1
35071: ARRAY
35072: ST_TO_ADDR
// if result > 1 then
35073: LD_VAR 0 2
35077: PUSH
35078: LD_INT 1
35080: GREATER
35081: IFFALSE 35193
// begin for i = 2 to result do
35083: LD_ADDR_VAR 0 3
35087: PUSH
35088: DOUBLE
35089: LD_INT 2
35091: DEC
35092: ST_TO_ADDR
35093: LD_VAR 0 2
35097: PUSH
35098: FOR_TO
35099: IFFALSE 35191
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35101: LD_ADDR_VAR 0 4
35105: PUSH
35106: LD_VAR 0 2
35110: PUSH
35111: LD_VAR 0 3
35115: ARRAY
35116: PPUSH
35117: LD_INT 3
35119: PPUSH
35120: CALL_OW 259
35124: PUSH
35125: LD_VAR 0 2
35129: PUSH
35130: LD_VAR 0 3
35134: ARRAY
35135: PPUSH
35136: CALL_OW 432
35140: MINUS
35141: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35142: LD_VAR 0 4
35146: PUSH
35147: LD_VAR 0 5
35151: PPUSH
35152: LD_INT 3
35154: PPUSH
35155: CALL_OW 259
35159: PUSH
35160: LD_VAR 0 5
35164: PPUSH
35165: CALL_OW 432
35169: MINUS
35170: GREATEREQUAL
35171: IFFALSE 35189
// mech := result [ i ] ;
35173: LD_ADDR_VAR 0 5
35177: PUSH
35178: LD_VAR 0 2
35182: PUSH
35183: LD_VAR 0 3
35187: ARRAY
35188: ST_TO_ADDR
// end ;
35189: GO 35098
35191: POP
35192: POP
// end ; ComLinkTo ( vehicle , mech ) ;
35193: LD_VAR 0 1
35197: PPUSH
35198: LD_VAR 0 5
35202: PPUSH
35203: CALL_OW 135
// end ;
35207: LD_VAR 0 2
35211: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35212: LD_INT 0
35214: PPUSH
35215: PPUSH
35216: PPUSH
35217: PPUSH
35218: PPUSH
35219: PPUSH
35220: PPUSH
35221: PPUSH
35222: PPUSH
35223: PPUSH
35224: PPUSH
35225: PPUSH
35226: PPUSH
// result := [ ] ;
35227: LD_ADDR_VAR 0 7
35231: PUSH
35232: EMPTY
35233: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35234: LD_VAR 0 1
35238: PPUSH
35239: CALL_OW 266
35243: PUSH
35244: LD_INT 0
35246: PUSH
35247: LD_INT 1
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: IN
35254: NOT
35255: IFFALSE 35259
// exit ;
35257: GO 36893
// if name then
35259: LD_VAR 0 3
35263: IFFALSE 35279
// SetBName ( base_dep , name ) ;
35265: LD_VAR 0 1
35269: PPUSH
35270: LD_VAR 0 3
35274: PPUSH
35275: CALL_OW 500
// base := GetBase ( base_dep ) ;
35279: LD_ADDR_VAR 0 15
35283: PUSH
35284: LD_VAR 0 1
35288: PPUSH
35289: CALL_OW 274
35293: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35294: LD_ADDR_VAR 0 16
35298: PUSH
35299: LD_VAR 0 1
35303: PPUSH
35304: CALL_OW 255
35308: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35309: LD_ADDR_VAR 0 17
35313: PUSH
35314: LD_VAR 0 1
35318: PPUSH
35319: CALL_OW 248
35323: ST_TO_ADDR
// if sources then
35324: LD_VAR 0 5
35328: IFFALSE 35375
// for i = 1 to 3 do
35330: LD_ADDR_VAR 0 8
35334: PUSH
35335: DOUBLE
35336: LD_INT 1
35338: DEC
35339: ST_TO_ADDR
35340: LD_INT 3
35342: PUSH
35343: FOR_TO
35344: IFFALSE 35373
// AddResourceType ( base , i , sources [ i ] ) ;
35346: LD_VAR 0 15
35350: PPUSH
35351: LD_VAR 0 8
35355: PPUSH
35356: LD_VAR 0 5
35360: PUSH
35361: LD_VAR 0 8
35365: ARRAY
35366: PPUSH
35367: CALL_OW 276
35371: GO 35343
35373: POP
35374: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35375: LD_ADDR_VAR 0 18
35379: PUSH
35380: LD_VAR 0 15
35384: PPUSH
35385: LD_VAR 0 2
35389: PPUSH
35390: LD_INT 1
35392: PPUSH
35393: CALL 34636 0 3
35397: ST_TO_ADDR
// InitHc ;
35398: CALL_OW 19
// InitUc ;
35402: CALL_OW 18
// uc_side := side ;
35406: LD_ADDR_OWVAR 20
35410: PUSH
35411: LD_VAR 0 16
35415: ST_TO_ADDR
// uc_nation := nation ;
35416: LD_ADDR_OWVAR 21
35420: PUSH
35421: LD_VAR 0 17
35425: ST_TO_ADDR
// if buildings then
35426: LD_VAR 0 18
35430: IFFALSE 36752
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35432: LD_ADDR_VAR 0 19
35436: PUSH
35437: LD_VAR 0 18
35441: PPUSH
35442: LD_INT 2
35444: PUSH
35445: LD_INT 30
35447: PUSH
35448: LD_INT 29
35450: PUSH
35451: EMPTY
35452: LIST
35453: LIST
35454: PUSH
35455: LD_INT 30
35457: PUSH
35458: LD_INT 30
35460: PUSH
35461: EMPTY
35462: LIST
35463: LIST
35464: PUSH
35465: EMPTY
35466: LIST
35467: LIST
35468: LIST
35469: PPUSH
35470: CALL_OW 72
35474: ST_TO_ADDR
// if tmp then
35475: LD_VAR 0 19
35479: IFFALSE 35527
// for i in tmp do
35481: LD_ADDR_VAR 0 8
35485: PUSH
35486: LD_VAR 0 19
35490: PUSH
35491: FOR_IN
35492: IFFALSE 35525
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35494: LD_VAR 0 8
35498: PPUSH
35499: CALL_OW 250
35503: PPUSH
35504: LD_VAR 0 8
35508: PPUSH
35509: CALL_OW 251
35513: PPUSH
35514: LD_VAR 0 16
35518: PPUSH
35519: CALL_OW 441
35523: GO 35491
35525: POP
35526: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35527: LD_VAR 0 18
35531: PPUSH
35532: LD_INT 2
35534: PUSH
35535: LD_INT 30
35537: PUSH
35538: LD_INT 32
35540: PUSH
35541: EMPTY
35542: LIST
35543: LIST
35544: PUSH
35545: LD_INT 30
35547: PUSH
35548: LD_INT 33
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: PUSH
35555: EMPTY
35556: LIST
35557: LIST
35558: LIST
35559: PPUSH
35560: CALL_OW 72
35564: IFFALSE 35652
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35566: LD_ADDR_VAR 0 8
35570: PUSH
35571: LD_VAR 0 18
35575: PPUSH
35576: LD_INT 2
35578: PUSH
35579: LD_INT 30
35581: PUSH
35582: LD_INT 32
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: PUSH
35589: LD_INT 30
35591: PUSH
35592: LD_INT 33
35594: PUSH
35595: EMPTY
35596: LIST
35597: LIST
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: LIST
35603: PPUSH
35604: CALL_OW 72
35608: PUSH
35609: FOR_IN
35610: IFFALSE 35650
// begin if not GetBWeapon ( i ) then
35612: LD_VAR 0 8
35616: PPUSH
35617: CALL_OW 269
35621: NOT
35622: IFFALSE 35648
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35624: LD_VAR 0 8
35628: PPUSH
35629: LD_VAR 0 8
35633: PPUSH
35634: LD_VAR 0 2
35638: PPUSH
35639: CALL 36898 0 2
35643: PPUSH
35644: CALL_OW 431
// end ;
35648: GO 35609
35650: POP
35651: POP
// end ; for i = 1 to personel do
35652: LD_ADDR_VAR 0 8
35656: PUSH
35657: DOUBLE
35658: LD_INT 1
35660: DEC
35661: ST_TO_ADDR
35662: LD_VAR 0 6
35666: PUSH
35667: FOR_TO
35668: IFFALSE 36732
// begin if i > 4 then
35670: LD_VAR 0 8
35674: PUSH
35675: LD_INT 4
35677: GREATER
35678: IFFALSE 35682
// break ;
35680: GO 36732
// case i of 1 :
35682: LD_VAR 0 8
35686: PUSH
35687: LD_INT 1
35689: DOUBLE
35690: EQUAL
35691: IFTRUE 35695
35693: GO 35775
35695: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
35696: LD_ADDR_VAR 0 12
35700: PUSH
35701: LD_VAR 0 18
35705: PPUSH
35706: LD_INT 22
35708: PUSH
35709: LD_VAR 0 16
35713: PUSH
35714: EMPTY
35715: LIST
35716: LIST
35717: PUSH
35718: LD_INT 58
35720: PUSH
35721: EMPTY
35722: LIST
35723: PUSH
35724: LD_INT 2
35726: PUSH
35727: LD_INT 30
35729: PUSH
35730: LD_INT 32
35732: PUSH
35733: EMPTY
35734: LIST
35735: LIST
35736: PUSH
35737: LD_INT 30
35739: PUSH
35740: LD_INT 4
35742: PUSH
35743: EMPTY
35744: LIST
35745: LIST
35746: PUSH
35747: LD_INT 30
35749: PUSH
35750: LD_INT 5
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: PUSH
35757: EMPTY
35758: LIST
35759: LIST
35760: LIST
35761: LIST
35762: PUSH
35763: EMPTY
35764: LIST
35765: LIST
35766: LIST
35767: PPUSH
35768: CALL_OW 72
35772: ST_TO_ADDR
35773: GO 35997
35775: LD_INT 2
35777: DOUBLE
35778: EQUAL
35779: IFTRUE 35783
35781: GO 35845
35783: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
35784: LD_ADDR_VAR 0 12
35788: PUSH
35789: LD_VAR 0 18
35793: PPUSH
35794: LD_INT 22
35796: PUSH
35797: LD_VAR 0 16
35801: PUSH
35802: EMPTY
35803: LIST
35804: LIST
35805: PUSH
35806: LD_INT 2
35808: PUSH
35809: LD_INT 30
35811: PUSH
35812: LD_INT 0
35814: PUSH
35815: EMPTY
35816: LIST
35817: LIST
35818: PUSH
35819: LD_INT 30
35821: PUSH
35822: LD_INT 1
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: PUSH
35829: EMPTY
35830: LIST
35831: LIST
35832: LIST
35833: PUSH
35834: EMPTY
35835: LIST
35836: LIST
35837: PPUSH
35838: CALL_OW 72
35842: ST_TO_ADDR
35843: GO 35997
35845: LD_INT 3
35847: DOUBLE
35848: EQUAL
35849: IFTRUE 35853
35851: GO 35915
35853: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
35854: LD_ADDR_VAR 0 12
35858: PUSH
35859: LD_VAR 0 18
35863: PPUSH
35864: LD_INT 22
35866: PUSH
35867: LD_VAR 0 16
35871: PUSH
35872: EMPTY
35873: LIST
35874: LIST
35875: PUSH
35876: LD_INT 2
35878: PUSH
35879: LD_INT 30
35881: PUSH
35882: LD_INT 2
35884: PUSH
35885: EMPTY
35886: LIST
35887: LIST
35888: PUSH
35889: LD_INT 30
35891: PUSH
35892: LD_INT 3
35894: PUSH
35895: EMPTY
35896: LIST
35897: LIST
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: LIST
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: PPUSH
35908: CALL_OW 72
35912: ST_TO_ADDR
35913: GO 35997
35915: LD_INT 4
35917: DOUBLE
35918: EQUAL
35919: IFTRUE 35923
35921: GO 35996
35923: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
35924: LD_ADDR_VAR 0 12
35928: PUSH
35929: LD_VAR 0 18
35933: PPUSH
35934: LD_INT 22
35936: PUSH
35937: LD_VAR 0 16
35941: PUSH
35942: EMPTY
35943: LIST
35944: LIST
35945: PUSH
35946: LD_INT 2
35948: PUSH
35949: LD_INT 30
35951: PUSH
35952: LD_INT 6
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: PUSH
35959: LD_INT 30
35961: PUSH
35962: LD_INT 7
35964: PUSH
35965: EMPTY
35966: LIST
35967: LIST
35968: PUSH
35969: LD_INT 30
35971: PUSH
35972: LD_INT 8
35974: PUSH
35975: EMPTY
35976: LIST
35977: LIST
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: LIST
35983: LIST
35984: PUSH
35985: EMPTY
35986: LIST
35987: LIST
35988: PPUSH
35989: CALL_OW 72
35993: ST_TO_ADDR
35994: GO 35997
35996: POP
// if i = 1 then
35997: LD_VAR 0 8
36001: PUSH
36002: LD_INT 1
36004: EQUAL
36005: IFFALSE 36116
// begin tmp := [ ] ;
36007: LD_ADDR_VAR 0 19
36011: PUSH
36012: EMPTY
36013: ST_TO_ADDR
// for j in f do
36014: LD_ADDR_VAR 0 9
36018: PUSH
36019: LD_VAR 0 12
36023: PUSH
36024: FOR_IN
36025: IFFALSE 36098
// if GetBType ( j ) = b_bunker then
36027: LD_VAR 0 9
36031: PPUSH
36032: CALL_OW 266
36036: PUSH
36037: LD_INT 32
36039: EQUAL
36040: IFFALSE 36067
// tmp := Insert ( tmp , 1 , j ) else
36042: LD_ADDR_VAR 0 19
36046: PUSH
36047: LD_VAR 0 19
36051: PPUSH
36052: LD_INT 1
36054: PPUSH
36055: LD_VAR 0 9
36059: PPUSH
36060: CALL_OW 2
36064: ST_TO_ADDR
36065: GO 36096
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36067: LD_ADDR_VAR 0 19
36071: PUSH
36072: LD_VAR 0 19
36076: PPUSH
36077: LD_VAR 0 19
36081: PUSH
36082: LD_INT 1
36084: PLUS
36085: PPUSH
36086: LD_VAR 0 9
36090: PPUSH
36091: CALL_OW 2
36095: ST_TO_ADDR
36096: GO 36024
36098: POP
36099: POP
// if tmp then
36100: LD_VAR 0 19
36104: IFFALSE 36116
// f := tmp ;
36106: LD_ADDR_VAR 0 12
36110: PUSH
36111: LD_VAR 0 19
36115: ST_TO_ADDR
// end ; x := personel [ i ] ;
36116: LD_ADDR_VAR 0 13
36120: PUSH
36121: LD_VAR 0 6
36125: PUSH
36126: LD_VAR 0 8
36130: ARRAY
36131: ST_TO_ADDR
// if x = - 1 then
36132: LD_VAR 0 13
36136: PUSH
36137: LD_INT 1
36139: NEG
36140: EQUAL
36141: IFFALSE 36350
// begin for j in f do
36143: LD_ADDR_VAR 0 9
36147: PUSH
36148: LD_VAR 0 12
36152: PUSH
36153: FOR_IN
36154: IFFALSE 36346
// repeat InitHc ;
36156: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36160: LD_VAR 0 9
36164: PPUSH
36165: CALL_OW 266
36169: PUSH
36170: LD_INT 5
36172: EQUAL
36173: IFFALSE 36243
// begin if UnitsInside ( j ) < 3 then
36175: LD_VAR 0 9
36179: PPUSH
36180: CALL_OW 313
36184: PUSH
36185: LD_INT 3
36187: LESS
36188: IFFALSE 36224
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36190: LD_INT 0
36192: PPUSH
36193: LD_INT 5
36195: PUSH
36196: LD_INT 8
36198: PUSH
36199: LD_INT 9
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: LIST
36206: PUSH
36207: LD_VAR 0 17
36211: ARRAY
36212: PPUSH
36213: LD_VAR 0 4
36217: PPUSH
36218: CALL_OW 380
36222: GO 36241
// PrepareHuman ( false , i , skill ) ;
36224: LD_INT 0
36226: PPUSH
36227: LD_VAR 0 8
36231: PPUSH
36232: LD_VAR 0 4
36236: PPUSH
36237: CALL_OW 380
// end else
36241: GO 36260
// PrepareHuman ( false , i , skill ) ;
36243: LD_INT 0
36245: PPUSH
36246: LD_VAR 0 8
36250: PPUSH
36251: LD_VAR 0 4
36255: PPUSH
36256: CALL_OW 380
// un := CreateHuman ;
36260: LD_ADDR_VAR 0 14
36264: PUSH
36265: CALL_OW 44
36269: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36270: LD_ADDR_VAR 0 7
36274: PUSH
36275: LD_VAR 0 7
36279: PPUSH
36280: LD_INT 1
36282: PPUSH
36283: LD_VAR 0 14
36287: PPUSH
36288: CALL_OW 2
36292: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36293: LD_VAR 0 14
36297: PPUSH
36298: LD_VAR 0 9
36302: PPUSH
36303: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36307: LD_VAR 0 9
36311: PPUSH
36312: CALL_OW 313
36316: PUSH
36317: LD_INT 6
36319: EQUAL
36320: PUSH
36321: LD_VAR 0 9
36325: PPUSH
36326: CALL_OW 266
36330: PUSH
36331: LD_INT 32
36333: PUSH
36334: LD_INT 31
36336: PUSH
36337: EMPTY
36338: LIST
36339: LIST
36340: IN
36341: OR
36342: IFFALSE 36156
36344: GO 36153
36346: POP
36347: POP
// end else
36348: GO 36730
// for j = 1 to x do
36350: LD_ADDR_VAR 0 9
36354: PUSH
36355: DOUBLE
36356: LD_INT 1
36358: DEC
36359: ST_TO_ADDR
36360: LD_VAR 0 13
36364: PUSH
36365: FOR_TO
36366: IFFALSE 36728
// begin InitHc ;
36368: CALL_OW 19
// if not f then
36372: LD_VAR 0 12
36376: NOT
36377: IFFALSE 36466
// begin PrepareHuman ( false , i , skill ) ;
36379: LD_INT 0
36381: PPUSH
36382: LD_VAR 0 8
36386: PPUSH
36387: LD_VAR 0 4
36391: PPUSH
36392: CALL_OW 380
// un := CreateHuman ;
36396: LD_ADDR_VAR 0 14
36400: PUSH
36401: CALL_OW 44
36405: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36406: LD_ADDR_VAR 0 7
36410: PUSH
36411: LD_VAR 0 7
36415: PPUSH
36416: LD_INT 1
36418: PPUSH
36419: LD_VAR 0 14
36423: PPUSH
36424: CALL_OW 2
36428: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36429: LD_VAR 0 14
36433: PPUSH
36434: LD_VAR 0 1
36438: PPUSH
36439: CALL_OW 250
36443: PPUSH
36444: LD_VAR 0 1
36448: PPUSH
36449: CALL_OW 251
36453: PPUSH
36454: LD_INT 10
36456: PPUSH
36457: LD_INT 0
36459: PPUSH
36460: CALL_OW 50
// continue ;
36464: GO 36365
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36466: LD_VAR 0 12
36470: PUSH
36471: LD_INT 1
36473: ARRAY
36474: PPUSH
36475: CALL_OW 313
36479: PUSH
36480: LD_VAR 0 12
36484: PUSH
36485: LD_INT 1
36487: ARRAY
36488: PPUSH
36489: CALL_OW 266
36493: PUSH
36494: LD_INT 32
36496: PUSH
36497: LD_INT 31
36499: PUSH
36500: EMPTY
36501: LIST
36502: LIST
36503: IN
36504: AND
36505: PUSH
36506: LD_VAR 0 12
36510: PUSH
36511: LD_INT 1
36513: ARRAY
36514: PPUSH
36515: CALL_OW 313
36519: PUSH
36520: LD_INT 6
36522: EQUAL
36523: OR
36524: IFFALSE 36544
// f := Delete ( f , 1 ) ;
36526: LD_ADDR_VAR 0 12
36530: PUSH
36531: LD_VAR 0 12
36535: PPUSH
36536: LD_INT 1
36538: PPUSH
36539: CALL_OW 3
36543: ST_TO_ADDR
// if not f then
36544: LD_VAR 0 12
36548: NOT
36549: IFFALSE 36567
// begin x := x + 2 ;
36551: LD_ADDR_VAR 0 13
36555: PUSH
36556: LD_VAR 0 13
36560: PUSH
36561: LD_INT 2
36563: PLUS
36564: ST_TO_ADDR
// continue ;
36565: GO 36365
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36567: LD_VAR 0 12
36571: PUSH
36572: LD_INT 1
36574: ARRAY
36575: PPUSH
36576: CALL_OW 266
36580: PUSH
36581: LD_INT 5
36583: EQUAL
36584: IFFALSE 36658
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36586: LD_VAR 0 12
36590: PUSH
36591: LD_INT 1
36593: ARRAY
36594: PPUSH
36595: CALL_OW 313
36599: PUSH
36600: LD_INT 3
36602: LESS
36603: IFFALSE 36639
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36605: LD_INT 0
36607: PPUSH
36608: LD_INT 5
36610: PUSH
36611: LD_INT 8
36613: PUSH
36614: LD_INT 9
36616: PUSH
36617: EMPTY
36618: LIST
36619: LIST
36620: LIST
36621: PUSH
36622: LD_VAR 0 17
36626: ARRAY
36627: PPUSH
36628: LD_VAR 0 4
36632: PPUSH
36633: CALL_OW 380
36637: GO 36656
// PrepareHuman ( false , i , skill ) ;
36639: LD_INT 0
36641: PPUSH
36642: LD_VAR 0 8
36646: PPUSH
36647: LD_VAR 0 4
36651: PPUSH
36652: CALL_OW 380
// end else
36656: GO 36675
// PrepareHuman ( false , i , skill ) ;
36658: LD_INT 0
36660: PPUSH
36661: LD_VAR 0 8
36665: PPUSH
36666: LD_VAR 0 4
36670: PPUSH
36671: CALL_OW 380
// un := CreateHuman ;
36675: LD_ADDR_VAR 0 14
36679: PUSH
36680: CALL_OW 44
36684: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36685: LD_ADDR_VAR 0 7
36689: PUSH
36690: LD_VAR 0 7
36694: PPUSH
36695: LD_INT 1
36697: PPUSH
36698: LD_VAR 0 14
36702: PPUSH
36703: CALL_OW 2
36707: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
36708: LD_VAR 0 14
36712: PPUSH
36713: LD_VAR 0 12
36717: PUSH
36718: LD_INT 1
36720: ARRAY
36721: PPUSH
36722: CALL_OW 52
// end ;
36726: GO 36365
36728: POP
36729: POP
// end ;
36730: GO 35667
36732: POP
36733: POP
// result := result ^ buildings ;
36734: LD_ADDR_VAR 0 7
36738: PUSH
36739: LD_VAR 0 7
36743: PUSH
36744: LD_VAR 0 18
36748: ADD
36749: ST_TO_ADDR
// end else
36750: GO 36893
// begin for i = 1 to personel do
36752: LD_ADDR_VAR 0 8
36756: PUSH
36757: DOUBLE
36758: LD_INT 1
36760: DEC
36761: ST_TO_ADDR
36762: LD_VAR 0 6
36766: PUSH
36767: FOR_TO
36768: IFFALSE 36891
// begin if i > 4 then
36770: LD_VAR 0 8
36774: PUSH
36775: LD_INT 4
36777: GREATER
36778: IFFALSE 36782
// break ;
36780: GO 36891
// x := personel [ i ] ;
36782: LD_ADDR_VAR 0 13
36786: PUSH
36787: LD_VAR 0 6
36791: PUSH
36792: LD_VAR 0 8
36796: ARRAY
36797: ST_TO_ADDR
// if x = - 1 then
36798: LD_VAR 0 13
36802: PUSH
36803: LD_INT 1
36805: NEG
36806: EQUAL
36807: IFFALSE 36811
// continue ;
36809: GO 36767
// PrepareHuman ( false , i , skill ) ;
36811: LD_INT 0
36813: PPUSH
36814: LD_VAR 0 8
36818: PPUSH
36819: LD_VAR 0 4
36823: PPUSH
36824: CALL_OW 380
// un := CreateHuman ;
36828: LD_ADDR_VAR 0 14
36832: PUSH
36833: CALL_OW 44
36837: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36838: LD_VAR 0 14
36842: PPUSH
36843: LD_VAR 0 1
36847: PPUSH
36848: CALL_OW 250
36852: PPUSH
36853: LD_VAR 0 1
36857: PPUSH
36858: CALL_OW 251
36862: PPUSH
36863: LD_INT 10
36865: PPUSH
36866: LD_INT 0
36868: PPUSH
36869: CALL_OW 50
// result := result ^ un ;
36873: LD_ADDR_VAR 0 7
36877: PUSH
36878: LD_VAR 0 7
36882: PUSH
36883: LD_VAR 0 14
36887: ADD
36888: ST_TO_ADDR
// end ;
36889: GO 36767
36891: POP
36892: POP
// end ; end ;
36893: LD_VAR 0 7
36897: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
36898: LD_INT 0
36900: PPUSH
36901: PPUSH
36902: PPUSH
36903: PPUSH
36904: PPUSH
36905: PPUSH
36906: PPUSH
36907: PPUSH
36908: PPUSH
36909: PPUSH
36910: PPUSH
36911: PPUSH
36912: PPUSH
36913: PPUSH
36914: PPUSH
36915: PPUSH
// result := false ;
36916: LD_ADDR_VAR 0 3
36920: PUSH
36921: LD_INT 0
36923: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
36924: LD_VAR 0 1
36928: NOT
36929: PUSH
36930: LD_VAR 0 1
36934: PPUSH
36935: CALL_OW 266
36939: PUSH
36940: LD_INT 32
36942: PUSH
36943: LD_INT 33
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: IN
36950: NOT
36951: OR
36952: IFFALSE 36956
// exit ;
36954: GO 38065
// nat := GetNation ( tower ) ;
36956: LD_ADDR_VAR 0 12
36960: PUSH
36961: LD_VAR 0 1
36965: PPUSH
36966: CALL_OW 248
36970: ST_TO_ADDR
// side := GetSide ( tower ) ;
36971: LD_ADDR_VAR 0 16
36975: PUSH
36976: LD_VAR 0 1
36980: PPUSH
36981: CALL_OW 255
36985: ST_TO_ADDR
// x := GetX ( tower ) ;
36986: LD_ADDR_VAR 0 10
36990: PUSH
36991: LD_VAR 0 1
36995: PPUSH
36996: CALL_OW 250
37000: ST_TO_ADDR
// y := GetY ( tower ) ;
37001: LD_ADDR_VAR 0 11
37005: PUSH
37006: LD_VAR 0 1
37010: PPUSH
37011: CALL_OW 251
37015: ST_TO_ADDR
// if not x or not y then
37016: LD_VAR 0 10
37020: NOT
37021: PUSH
37022: LD_VAR 0 11
37026: NOT
37027: OR
37028: IFFALSE 37032
// exit ;
37030: GO 38065
// weapon := 0 ;
37032: LD_ADDR_VAR 0 18
37036: PUSH
37037: LD_INT 0
37039: ST_TO_ADDR
// fac_list := [ ] ;
37040: LD_ADDR_VAR 0 17
37044: PUSH
37045: EMPTY
37046: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
37047: LD_ADDR_VAR 0 6
37051: PUSH
37052: LD_VAR 0 1
37056: PPUSH
37057: CALL_OW 274
37061: PPUSH
37062: LD_VAR 0 2
37066: PPUSH
37067: LD_INT 0
37069: PPUSH
37070: CALL 34636 0 3
37074: PPUSH
37075: LD_INT 30
37077: PUSH
37078: LD_INT 3
37080: PUSH
37081: EMPTY
37082: LIST
37083: LIST
37084: PPUSH
37085: CALL_OW 72
37089: ST_TO_ADDR
// if not factories then
37090: LD_VAR 0 6
37094: NOT
37095: IFFALSE 37099
// exit ;
37097: GO 38065
// for i in factories do
37099: LD_ADDR_VAR 0 8
37103: PUSH
37104: LD_VAR 0 6
37108: PUSH
37109: FOR_IN
37110: IFFALSE 37135
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37112: LD_ADDR_VAR 0 17
37116: PUSH
37117: LD_VAR 0 17
37121: PUSH
37122: LD_VAR 0 8
37126: PPUSH
37127: CALL_OW 478
37131: UNION
37132: ST_TO_ADDR
37133: GO 37109
37135: POP
37136: POP
// if not fac_list then
37137: LD_VAR 0 17
37141: NOT
37142: IFFALSE 37146
// exit ;
37144: GO 38065
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37146: LD_ADDR_VAR 0 5
37150: PUSH
37151: LD_INT 4
37153: PUSH
37154: LD_INT 5
37156: PUSH
37157: LD_INT 9
37159: PUSH
37160: LD_INT 10
37162: PUSH
37163: LD_INT 6
37165: PUSH
37166: LD_INT 7
37168: PUSH
37169: LD_INT 11
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: LIST
37176: LIST
37177: LIST
37178: LIST
37179: LIST
37180: PUSH
37181: LD_INT 27
37183: PUSH
37184: LD_INT 28
37186: PUSH
37187: LD_INT 26
37189: PUSH
37190: LD_INT 30
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: LIST
37197: LIST
37198: PUSH
37199: LD_INT 43
37201: PUSH
37202: LD_INT 44
37204: PUSH
37205: LD_INT 46
37207: PUSH
37208: LD_INT 45
37210: PUSH
37211: LD_INT 47
37213: PUSH
37214: LD_INT 49
37216: PUSH
37217: EMPTY
37218: LIST
37219: LIST
37220: LIST
37221: LIST
37222: LIST
37223: LIST
37224: PUSH
37225: EMPTY
37226: LIST
37227: LIST
37228: LIST
37229: PUSH
37230: LD_VAR 0 12
37234: ARRAY
37235: ST_TO_ADDR
// list := list isect fac_list ;
37236: LD_ADDR_VAR 0 5
37240: PUSH
37241: LD_VAR 0 5
37245: PUSH
37246: LD_VAR 0 17
37250: ISECT
37251: ST_TO_ADDR
// if not list then
37252: LD_VAR 0 5
37256: NOT
37257: IFFALSE 37261
// exit ;
37259: GO 38065
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37261: LD_VAR 0 12
37265: PUSH
37266: LD_INT 3
37268: EQUAL
37269: PUSH
37270: LD_INT 49
37272: PUSH
37273: LD_VAR 0 5
37277: IN
37278: AND
37279: PUSH
37280: LD_INT 31
37282: PPUSH
37283: LD_VAR 0 16
37287: PPUSH
37288: CALL_OW 321
37292: PUSH
37293: LD_INT 2
37295: EQUAL
37296: AND
37297: IFFALSE 37357
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37299: LD_INT 22
37301: PUSH
37302: LD_VAR 0 16
37306: PUSH
37307: EMPTY
37308: LIST
37309: LIST
37310: PUSH
37311: LD_INT 35
37313: PUSH
37314: LD_INT 49
37316: PUSH
37317: EMPTY
37318: LIST
37319: LIST
37320: PUSH
37321: LD_INT 91
37323: PUSH
37324: LD_VAR 0 1
37328: PUSH
37329: LD_INT 10
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: LIST
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: LIST
37341: PPUSH
37342: CALL_OW 69
37346: NOT
37347: IFFALSE 37357
// weapon := ru_time_lapser ;
37349: LD_ADDR_VAR 0 18
37353: PUSH
37354: LD_INT 49
37356: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37357: LD_VAR 0 12
37361: PUSH
37362: LD_INT 1
37364: PUSH
37365: LD_INT 2
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: IN
37372: PUSH
37373: LD_INT 11
37375: PUSH
37376: LD_VAR 0 5
37380: IN
37381: PUSH
37382: LD_INT 30
37384: PUSH
37385: LD_VAR 0 5
37389: IN
37390: OR
37391: AND
37392: PUSH
37393: LD_INT 6
37395: PPUSH
37396: LD_VAR 0 16
37400: PPUSH
37401: CALL_OW 321
37405: PUSH
37406: LD_INT 2
37408: EQUAL
37409: AND
37410: IFFALSE 37575
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37412: LD_INT 22
37414: PUSH
37415: LD_VAR 0 16
37419: PUSH
37420: EMPTY
37421: LIST
37422: LIST
37423: PUSH
37424: LD_INT 2
37426: PUSH
37427: LD_INT 35
37429: PUSH
37430: LD_INT 11
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: PUSH
37437: LD_INT 35
37439: PUSH
37440: LD_INT 30
37442: PUSH
37443: EMPTY
37444: LIST
37445: LIST
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: LIST
37451: PUSH
37452: LD_INT 91
37454: PUSH
37455: LD_VAR 0 1
37459: PUSH
37460: LD_INT 18
37462: PUSH
37463: EMPTY
37464: LIST
37465: LIST
37466: LIST
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: LIST
37472: PPUSH
37473: CALL_OW 69
37477: NOT
37478: PUSH
37479: LD_INT 22
37481: PUSH
37482: LD_VAR 0 16
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: PUSH
37491: LD_INT 2
37493: PUSH
37494: LD_INT 30
37496: PUSH
37497: LD_INT 32
37499: PUSH
37500: EMPTY
37501: LIST
37502: LIST
37503: PUSH
37504: LD_INT 30
37506: PUSH
37507: LD_INT 33
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: PUSH
37514: EMPTY
37515: LIST
37516: LIST
37517: LIST
37518: PUSH
37519: LD_INT 91
37521: PUSH
37522: LD_VAR 0 1
37526: PUSH
37527: LD_INT 12
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: LIST
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: LIST
37539: PUSH
37540: EMPTY
37541: LIST
37542: PPUSH
37543: CALL_OW 69
37547: PUSH
37548: LD_INT 2
37550: GREATER
37551: AND
37552: IFFALSE 37575
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37554: LD_ADDR_VAR 0 18
37558: PUSH
37559: LD_INT 11
37561: PUSH
37562: LD_INT 30
37564: PUSH
37565: EMPTY
37566: LIST
37567: LIST
37568: PUSH
37569: LD_VAR 0 12
37573: ARRAY
37574: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37575: LD_VAR 0 18
37579: NOT
37580: PUSH
37581: LD_INT 40
37583: PPUSH
37584: LD_VAR 0 16
37588: PPUSH
37589: CALL_OW 321
37593: PUSH
37594: LD_INT 2
37596: EQUAL
37597: AND
37598: PUSH
37599: LD_INT 7
37601: PUSH
37602: LD_VAR 0 5
37606: IN
37607: PUSH
37608: LD_INT 28
37610: PUSH
37611: LD_VAR 0 5
37615: IN
37616: OR
37617: PUSH
37618: LD_INT 45
37620: PUSH
37621: LD_VAR 0 5
37625: IN
37626: OR
37627: AND
37628: IFFALSE 37882
// begin hex := GetHexInfo ( x , y ) ;
37630: LD_ADDR_VAR 0 4
37634: PUSH
37635: LD_VAR 0 10
37639: PPUSH
37640: LD_VAR 0 11
37644: PPUSH
37645: CALL_OW 546
37649: ST_TO_ADDR
// if hex [ 1 ] then
37650: LD_VAR 0 4
37654: PUSH
37655: LD_INT 1
37657: ARRAY
37658: IFFALSE 37662
// exit ;
37660: GO 38065
// height := hex [ 2 ] ;
37662: LD_ADDR_VAR 0 15
37666: PUSH
37667: LD_VAR 0 4
37671: PUSH
37672: LD_INT 2
37674: ARRAY
37675: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
37676: LD_ADDR_VAR 0 14
37680: PUSH
37681: LD_INT 0
37683: PUSH
37684: LD_INT 2
37686: PUSH
37687: LD_INT 3
37689: PUSH
37690: LD_INT 5
37692: PUSH
37693: EMPTY
37694: LIST
37695: LIST
37696: LIST
37697: LIST
37698: ST_TO_ADDR
// for i in tmp do
37699: LD_ADDR_VAR 0 8
37703: PUSH
37704: LD_VAR 0 14
37708: PUSH
37709: FOR_IN
37710: IFFALSE 37880
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
37712: LD_ADDR_VAR 0 9
37716: PUSH
37717: LD_VAR 0 10
37721: PPUSH
37722: LD_VAR 0 8
37726: PPUSH
37727: LD_INT 5
37729: PPUSH
37730: CALL_OW 272
37734: PUSH
37735: LD_VAR 0 11
37739: PPUSH
37740: LD_VAR 0 8
37744: PPUSH
37745: LD_INT 5
37747: PPUSH
37748: CALL_OW 273
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
37757: LD_VAR 0 9
37761: PUSH
37762: LD_INT 1
37764: ARRAY
37765: PPUSH
37766: LD_VAR 0 9
37770: PUSH
37771: LD_INT 2
37773: ARRAY
37774: PPUSH
37775: CALL_OW 488
37779: IFFALSE 37878
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
37781: LD_ADDR_VAR 0 4
37785: PUSH
37786: LD_VAR 0 9
37790: PUSH
37791: LD_INT 1
37793: ARRAY
37794: PPUSH
37795: LD_VAR 0 9
37799: PUSH
37800: LD_INT 2
37802: ARRAY
37803: PPUSH
37804: CALL_OW 546
37808: ST_TO_ADDR
// if hex [ 1 ] then
37809: LD_VAR 0 4
37813: PUSH
37814: LD_INT 1
37816: ARRAY
37817: IFFALSE 37821
// continue ;
37819: GO 37709
// h := hex [ 2 ] ;
37821: LD_ADDR_VAR 0 13
37825: PUSH
37826: LD_VAR 0 4
37830: PUSH
37831: LD_INT 2
37833: ARRAY
37834: ST_TO_ADDR
// if h + 7 < height then
37835: LD_VAR 0 13
37839: PUSH
37840: LD_INT 7
37842: PLUS
37843: PUSH
37844: LD_VAR 0 15
37848: LESS
37849: IFFALSE 37878
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
37851: LD_ADDR_VAR 0 18
37855: PUSH
37856: LD_INT 7
37858: PUSH
37859: LD_INT 28
37861: PUSH
37862: LD_INT 45
37864: PUSH
37865: EMPTY
37866: LIST
37867: LIST
37868: LIST
37869: PUSH
37870: LD_VAR 0 12
37874: ARRAY
37875: ST_TO_ADDR
// break ;
37876: GO 37880
// end ; end ; end ;
37878: GO 37709
37880: POP
37881: POP
// end ; if not weapon then
37882: LD_VAR 0 18
37886: NOT
37887: IFFALSE 37947
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
37889: LD_ADDR_VAR 0 5
37893: PUSH
37894: LD_VAR 0 5
37898: PUSH
37899: LD_INT 11
37901: PUSH
37902: LD_INT 30
37904: PUSH
37905: LD_INT 49
37907: PUSH
37908: EMPTY
37909: LIST
37910: LIST
37911: LIST
37912: DIFF
37913: ST_TO_ADDR
// if not list then
37914: LD_VAR 0 5
37918: NOT
37919: IFFALSE 37923
// exit ;
37921: GO 38065
// weapon := list [ rand ( 1 , list ) ] ;
37923: LD_ADDR_VAR 0 18
37927: PUSH
37928: LD_VAR 0 5
37932: PUSH
37933: LD_INT 1
37935: PPUSH
37936: LD_VAR 0 5
37940: PPUSH
37941: CALL_OW 12
37945: ARRAY
37946: ST_TO_ADDR
// end ; if weapon then
37947: LD_VAR 0 18
37951: IFFALSE 38065
// begin tmp := CostOfWeapon ( weapon ) ;
37953: LD_ADDR_VAR 0 14
37957: PUSH
37958: LD_VAR 0 18
37962: PPUSH
37963: CALL_OW 451
37967: ST_TO_ADDR
// j := GetBase ( tower ) ;
37968: LD_ADDR_VAR 0 9
37972: PUSH
37973: LD_VAR 0 1
37977: PPUSH
37978: CALL_OW 274
37982: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
37983: LD_VAR 0 9
37987: PPUSH
37988: LD_INT 1
37990: PPUSH
37991: CALL_OW 275
37995: PUSH
37996: LD_VAR 0 14
38000: PUSH
38001: LD_INT 1
38003: ARRAY
38004: GREATEREQUAL
38005: PUSH
38006: LD_VAR 0 9
38010: PPUSH
38011: LD_INT 2
38013: PPUSH
38014: CALL_OW 275
38018: PUSH
38019: LD_VAR 0 14
38023: PUSH
38024: LD_INT 2
38026: ARRAY
38027: GREATEREQUAL
38028: AND
38029: PUSH
38030: LD_VAR 0 9
38034: PPUSH
38035: LD_INT 3
38037: PPUSH
38038: CALL_OW 275
38042: PUSH
38043: LD_VAR 0 14
38047: PUSH
38048: LD_INT 3
38050: ARRAY
38051: GREATEREQUAL
38052: AND
38053: IFFALSE 38065
// result := weapon ;
38055: LD_ADDR_VAR 0 3
38059: PUSH
38060: LD_VAR 0 18
38064: ST_TO_ADDR
// end ; end ;
38065: LD_VAR 0 3
38069: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38070: LD_INT 0
38072: PPUSH
38073: PPUSH
// result := true ;
38074: LD_ADDR_VAR 0 3
38078: PUSH
38079: LD_INT 1
38081: ST_TO_ADDR
// if array1 = array2 then
38082: LD_VAR 0 1
38086: PUSH
38087: LD_VAR 0 2
38091: EQUAL
38092: IFFALSE 38152
// begin for i = 1 to array1 do
38094: LD_ADDR_VAR 0 4
38098: PUSH
38099: DOUBLE
38100: LD_INT 1
38102: DEC
38103: ST_TO_ADDR
38104: LD_VAR 0 1
38108: PUSH
38109: FOR_TO
38110: IFFALSE 38148
// if array1 [ i ] <> array2 [ i ] then
38112: LD_VAR 0 1
38116: PUSH
38117: LD_VAR 0 4
38121: ARRAY
38122: PUSH
38123: LD_VAR 0 2
38127: PUSH
38128: LD_VAR 0 4
38132: ARRAY
38133: NONEQUAL
38134: IFFALSE 38146
// begin result := false ;
38136: LD_ADDR_VAR 0 3
38140: PUSH
38141: LD_INT 0
38143: ST_TO_ADDR
// break ;
38144: GO 38148
// end ;
38146: GO 38109
38148: POP
38149: POP
// end else
38150: GO 38160
// result := false ;
38152: LD_ADDR_VAR 0 3
38156: PUSH
38157: LD_INT 0
38159: ST_TO_ADDR
// end ;
38160: LD_VAR 0 3
38164: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38165: LD_INT 0
38167: PPUSH
38168: PPUSH
// if not array1 or not array2 then
38169: LD_VAR 0 1
38173: NOT
38174: PUSH
38175: LD_VAR 0 2
38179: NOT
38180: OR
38181: IFFALSE 38185
// exit ;
38183: GO 38249
// result := true ;
38185: LD_ADDR_VAR 0 3
38189: PUSH
38190: LD_INT 1
38192: ST_TO_ADDR
// for i = 1 to array1 do
38193: LD_ADDR_VAR 0 4
38197: PUSH
38198: DOUBLE
38199: LD_INT 1
38201: DEC
38202: ST_TO_ADDR
38203: LD_VAR 0 1
38207: PUSH
38208: FOR_TO
38209: IFFALSE 38247
// if array1 [ i ] <> array2 [ i ] then
38211: LD_VAR 0 1
38215: PUSH
38216: LD_VAR 0 4
38220: ARRAY
38221: PUSH
38222: LD_VAR 0 2
38226: PUSH
38227: LD_VAR 0 4
38231: ARRAY
38232: NONEQUAL
38233: IFFALSE 38245
// begin result := false ;
38235: LD_ADDR_VAR 0 3
38239: PUSH
38240: LD_INT 0
38242: ST_TO_ADDR
// break ;
38243: GO 38247
// end ;
38245: GO 38208
38247: POP
38248: POP
// end ;
38249: LD_VAR 0 3
38253: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38254: LD_INT 0
38256: PPUSH
38257: PPUSH
38258: PPUSH
// pom := GetBase ( fac ) ;
38259: LD_ADDR_VAR 0 5
38263: PUSH
38264: LD_VAR 0 1
38268: PPUSH
38269: CALL_OW 274
38273: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38274: LD_ADDR_VAR 0 4
38278: PUSH
38279: LD_VAR 0 2
38283: PUSH
38284: LD_INT 1
38286: ARRAY
38287: PPUSH
38288: LD_VAR 0 2
38292: PUSH
38293: LD_INT 2
38295: ARRAY
38296: PPUSH
38297: LD_VAR 0 2
38301: PUSH
38302: LD_INT 3
38304: ARRAY
38305: PPUSH
38306: LD_VAR 0 2
38310: PUSH
38311: LD_INT 4
38313: ARRAY
38314: PPUSH
38315: CALL_OW 449
38319: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38320: LD_ADDR_VAR 0 3
38324: PUSH
38325: LD_VAR 0 5
38329: PPUSH
38330: LD_INT 1
38332: PPUSH
38333: CALL_OW 275
38337: PUSH
38338: LD_VAR 0 4
38342: PUSH
38343: LD_INT 1
38345: ARRAY
38346: GREATEREQUAL
38347: PUSH
38348: LD_VAR 0 5
38352: PPUSH
38353: LD_INT 2
38355: PPUSH
38356: CALL_OW 275
38360: PUSH
38361: LD_VAR 0 4
38365: PUSH
38366: LD_INT 2
38368: ARRAY
38369: GREATEREQUAL
38370: AND
38371: PUSH
38372: LD_VAR 0 5
38376: PPUSH
38377: LD_INT 3
38379: PPUSH
38380: CALL_OW 275
38384: PUSH
38385: LD_VAR 0 4
38389: PUSH
38390: LD_INT 3
38392: ARRAY
38393: GREATEREQUAL
38394: AND
38395: ST_TO_ADDR
// end ;
38396: LD_VAR 0 3
38400: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38401: LD_INT 0
38403: PPUSH
38404: PPUSH
38405: PPUSH
38406: PPUSH
// pom := GetBase ( building ) ;
38407: LD_ADDR_VAR 0 3
38411: PUSH
38412: LD_VAR 0 1
38416: PPUSH
38417: CALL_OW 274
38421: ST_TO_ADDR
// if not pom then
38422: LD_VAR 0 3
38426: NOT
38427: IFFALSE 38431
// exit ;
38429: GO 38601
// btype := GetBType ( building ) ;
38431: LD_ADDR_VAR 0 5
38435: PUSH
38436: LD_VAR 0 1
38440: PPUSH
38441: CALL_OW 266
38445: ST_TO_ADDR
// if btype = b_armoury then
38446: LD_VAR 0 5
38450: PUSH
38451: LD_INT 4
38453: EQUAL
38454: IFFALSE 38464
// btype := b_barracks ;
38456: LD_ADDR_VAR 0 5
38460: PUSH
38461: LD_INT 5
38463: ST_TO_ADDR
// if btype = b_depot then
38464: LD_VAR 0 5
38468: PUSH
38469: LD_INT 0
38471: EQUAL
38472: IFFALSE 38482
// btype := b_warehouse ;
38474: LD_ADDR_VAR 0 5
38478: PUSH
38479: LD_INT 1
38481: ST_TO_ADDR
// if btype = b_workshop then
38482: LD_VAR 0 5
38486: PUSH
38487: LD_INT 2
38489: EQUAL
38490: IFFALSE 38500
// btype := b_factory ;
38492: LD_ADDR_VAR 0 5
38496: PUSH
38497: LD_INT 3
38499: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38500: LD_ADDR_VAR 0 4
38504: PUSH
38505: LD_VAR 0 5
38509: PPUSH
38510: LD_VAR 0 1
38514: PPUSH
38515: CALL_OW 248
38519: PPUSH
38520: CALL_OW 450
38524: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38525: LD_ADDR_VAR 0 2
38529: PUSH
38530: LD_VAR 0 3
38534: PPUSH
38535: LD_INT 1
38537: PPUSH
38538: CALL_OW 275
38542: PUSH
38543: LD_VAR 0 4
38547: PUSH
38548: LD_INT 1
38550: ARRAY
38551: GREATEREQUAL
38552: PUSH
38553: LD_VAR 0 3
38557: PPUSH
38558: LD_INT 2
38560: PPUSH
38561: CALL_OW 275
38565: PUSH
38566: LD_VAR 0 4
38570: PUSH
38571: LD_INT 2
38573: ARRAY
38574: GREATEREQUAL
38575: AND
38576: PUSH
38577: LD_VAR 0 3
38581: PPUSH
38582: LD_INT 3
38584: PPUSH
38585: CALL_OW 275
38589: PUSH
38590: LD_VAR 0 4
38594: PUSH
38595: LD_INT 3
38597: ARRAY
38598: GREATEREQUAL
38599: AND
38600: ST_TO_ADDR
// end ;
38601: LD_VAR 0 2
38605: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38606: LD_INT 0
38608: PPUSH
38609: PPUSH
38610: PPUSH
// pom := GetBase ( building ) ;
38611: LD_ADDR_VAR 0 4
38615: PUSH
38616: LD_VAR 0 1
38620: PPUSH
38621: CALL_OW 274
38625: ST_TO_ADDR
// if not pom then
38626: LD_VAR 0 4
38630: NOT
38631: IFFALSE 38635
// exit ;
38633: GO 38736
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38635: LD_ADDR_VAR 0 5
38639: PUSH
38640: LD_VAR 0 2
38644: PPUSH
38645: LD_VAR 0 1
38649: PPUSH
38650: CALL_OW 248
38654: PPUSH
38655: CALL_OW 450
38659: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38660: LD_ADDR_VAR 0 3
38664: PUSH
38665: LD_VAR 0 4
38669: PPUSH
38670: LD_INT 1
38672: PPUSH
38673: CALL_OW 275
38677: PUSH
38678: LD_VAR 0 5
38682: PUSH
38683: LD_INT 1
38685: ARRAY
38686: GREATEREQUAL
38687: PUSH
38688: LD_VAR 0 4
38692: PPUSH
38693: LD_INT 2
38695: PPUSH
38696: CALL_OW 275
38700: PUSH
38701: LD_VAR 0 5
38705: PUSH
38706: LD_INT 2
38708: ARRAY
38709: GREATEREQUAL
38710: AND
38711: PUSH
38712: LD_VAR 0 4
38716: PPUSH
38717: LD_INT 3
38719: PPUSH
38720: CALL_OW 275
38724: PUSH
38725: LD_VAR 0 5
38729: PUSH
38730: LD_INT 3
38732: ARRAY
38733: GREATEREQUAL
38734: AND
38735: ST_TO_ADDR
// end ;
38736: LD_VAR 0 3
38740: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
38741: LD_INT 0
38743: PPUSH
38744: PPUSH
38745: PPUSH
38746: PPUSH
38747: PPUSH
38748: PPUSH
38749: PPUSH
38750: PPUSH
38751: PPUSH
38752: PPUSH
38753: PPUSH
// result := false ;
38754: LD_ADDR_VAR 0 8
38758: PUSH
38759: LD_INT 0
38761: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
38762: LD_VAR 0 5
38766: NOT
38767: PUSH
38768: LD_VAR 0 1
38772: NOT
38773: OR
38774: PUSH
38775: LD_VAR 0 2
38779: NOT
38780: OR
38781: PUSH
38782: LD_VAR 0 3
38786: NOT
38787: OR
38788: IFFALSE 38792
// exit ;
38790: GO 39606
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
38792: LD_ADDR_VAR 0 14
38796: PUSH
38797: LD_VAR 0 1
38801: PPUSH
38802: LD_VAR 0 2
38806: PPUSH
38807: LD_VAR 0 3
38811: PPUSH
38812: LD_VAR 0 4
38816: PPUSH
38817: LD_VAR 0 5
38821: PUSH
38822: LD_INT 1
38824: ARRAY
38825: PPUSH
38826: CALL_OW 248
38830: PPUSH
38831: LD_INT 0
38833: PPUSH
38834: CALL 40859 0 6
38838: ST_TO_ADDR
// if not hexes then
38839: LD_VAR 0 14
38843: NOT
38844: IFFALSE 38848
// exit ;
38846: GO 39606
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38848: LD_ADDR_VAR 0 17
38852: PUSH
38853: LD_VAR 0 5
38857: PPUSH
38858: LD_INT 22
38860: PUSH
38861: LD_VAR 0 13
38865: PPUSH
38866: CALL_OW 255
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PUSH
38875: LD_INT 2
38877: PUSH
38878: LD_INT 30
38880: PUSH
38881: LD_INT 0
38883: PUSH
38884: EMPTY
38885: LIST
38886: LIST
38887: PUSH
38888: LD_INT 30
38890: PUSH
38891: LD_INT 1
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: LIST
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: PPUSH
38907: CALL_OW 72
38911: ST_TO_ADDR
// for i = 1 to hexes do
38912: LD_ADDR_VAR 0 9
38916: PUSH
38917: DOUBLE
38918: LD_INT 1
38920: DEC
38921: ST_TO_ADDR
38922: LD_VAR 0 14
38926: PUSH
38927: FOR_TO
38928: IFFALSE 39604
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38930: LD_ADDR_VAR 0 13
38934: PUSH
38935: LD_VAR 0 14
38939: PUSH
38940: LD_VAR 0 9
38944: ARRAY
38945: PUSH
38946: LD_INT 1
38948: ARRAY
38949: PPUSH
38950: LD_VAR 0 14
38954: PUSH
38955: LD_VAR 0 9
38959: ARRAY
38960: PUSH
38961: LD_INT 2
38963: ARRAY
38964: PPUSH
38965: CALL_OW 428
38969: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
38970: LD_VAR 0 14
38974: PUSH
38975: LD_VAR 0 9
38979: ARRAY
38980: PUSH
38981: LD_INT 1
38983: ARRAY
38984: PPUSH
38985: LD_VAR 0 14
38989: PUSH
38990: LD_VAR 0 9
38994: ARRAY
38995: PUSH
38996: LD_INT 2
38998: ARRAY
38999: PPUSH
39000: CALL_OW 351
39004: PUSH
39005: LD_VAR 0 14
39009: PUSH
39010: LD_VAR 0 9
39014: ARRAY
39015: PUSH
39016: LD_INT 1
39018: ARRAY
39019: PPUSH
39020: LD_VAR 0 14
39024: PUSH
39025: LD_VAR 0 9
39029: ARRAY
39030: PUSH
39031: LD_INT 2
39033: ARRAY
39034: PPUSH
39035: CALL_OW 488
39039: NOT
39040: OR
39041: PUSH
39042: LD_VAR 0 13
39046: PPUSH
39047: CALL_OW 247
39051: PUSH
39052: LD_INT 3
39054: EQUAL
39055: OR
39056: IFFALSE 39062
// exit ;
39058: POP
39059: POP
39060: GO 39606
// if not tmp then
39062: LD_VAR 0 13
39066: NOT
39067: IFFALSE 39071
// continue ;
39069: GO 38927
// result := true ;
39071: LD_ADDR_VAR 0 8
39075: PUSH
39076: LD_INT 1
39078: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
39079: LD_VAR 0 6
39083: PUSH
39084: LD_VAR 0 13
39088: PPUSH
39089: CALL_OW 247
39093: PUSH
39094: LD_INT 2
39096: EQUAL
39097: AND
39098: PUSH
39099: LD_VAR 0 13
39103: PPUSH
39104: CALL_OW 263
39108: PUSH
39109: LD_INT 1
39111: EQUAL
39112: AND
39113: IFFALSE 39277
// begin if IsDrivenBy ( tmp ) then
39115: LD_VAR 0 13
39119: PPUSH
39120: CALL_OW 311
39124: IFFALSE 39128
// continue ;
39126: GO 38927
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
39128: LD_VAR 0 6
39132: PPUSH
39133: LD_INT 3
39135: PUSH
39136: LD_INT 60
39138: PUSH
39139: EMPTY
39140: LIST
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: PUSH
39146: LD_INT 3
39148: PUSH
39149: LD_INT 55
39151: PUSH
39152: EMPTY
39153: LIST
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: PPUSH
39163: CALL_OW 72
39167: IFFALSE 39275
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39169: LD_ADDR_VAR 0 18
39173: PUSH
39174: LD_VAR 0 6
39178: PPUSH
39179: LD_INT 3
39181: PUSH
39182: LD_INT 60
39184: PUSH
39185: EMPTY
39186: LIST
39187: PUSH
39188: EMPTY
39189: LIST
39190: LIST
39191: PUSH
39192: LD_INT 3
39194: PUSH
39195: LD_INT 55
39197: PUSH
39198: EMPTY
39199: LIST
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: PPUSH
39209: CALL_OW 72
39213: PUSH
39214: LD_INT 1
39216: ARRAY
39217: ST_TO_ADDR
// if IsInUnit ( driver ) then
39218: LD_VAR 0 18
39222: PPUSH
39223: CALL_OW 310
39227: IFFALSE 39238
// ComExit ( driver ) ;
39229: LD_VAR 0 18
39233: PPUSH
39234: CALL 64638 0 1
// AddComEnterUnit ( driver , tmp ) ;
39238: LD_VAR 0 18
39242: PPUSH
39243: LD_VAR 0 13
39247: PPUSH
39248: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39252: LD_VAR 0 18
39256: PPUSH
39257: LD_VAR 0 7
39261: PPUSH
39262: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39266: LD_VAR 0 18
39270: PPUSH
39271: CALL_OW 181
// end ; continue ;
39275: GO 38927
// end ; if not cleaners or not tmp in cleaners then
39277: LD_VAR 0 6
39281: NOT
39282: PUSH
39283: LD_VAR 0 13
39287: PUSH
39288: LD_VAR 0 6
39292: IN
39293: NOT
39294: OR
39295: IFFALSE 39602
// begin if dep then
39297: LD_VAR 0 17
39301: IFFALSE 39437
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39303: LD_ADDR_VAR 0 16
39307: PUSH
39308: LD_VAR 0 17
39312: PUSH
39313: LD_INT 1
39315: ARRAY
39316: PPUSH
39317: CALL_OW 250
39321: PPUSH
39322: LD_VAR 0 17
39326: PUSH
39327: LD_INT 1
39329: ARRAY
39330: PPUSH
39331: CALL_OW 254
39335: PPUSH
39336: LD_INT 5
39338: PPUSH
39339: CALL_OW 272
39343: PUSH
39344: LD_VAR 0 17
39348: PUSH
39349: LD_INT 1
39351: ARRAY
39352: PPUSH
39353: CALL_OW 251
39357: PPUSH
39358: LD_VAR 0 17
39362: PUSH
39363: LD_INT 1
39365: ARRAY
39366: PPUSH
39367: CALL_OW 254
39371: PPUSH
39372: LD_INT 5
39374: PPUSH
39375: CALL_OW 273
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39384: LD_VAR 0 16
39388: PUSH
39389: LD_INT 1
39391: ARRAY
39392: PPUSH
39393: LD_VAR 0 16
39397: PUSH
39398: LD_INT 2
39400: ARRAY
39401: PPUSH
39402: CALL_OW 488
39406: IFFALSE 39437
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39408: LD_VAR 0 13
39412: PPUSH
39413: LD_VAR 0 16
39417: PUSH
39418: LD_INT 1
39420: ARRAY
39421: PPUSH
39422: LD_VAR 0 16
39426: PUSH
39427: LD_INT 2
39429: ARRAY
39430: PPUSH
39431: CALL_OW 111
// continue ;
39435: GO 38927
// end ; end ; r := GetDir ( tmp ) ;
39437: LD_ADDR_VAR 0 15
39441: PUSH
39442: LD_VAR 0 13
39446: PPUSH
39447: CALL_OW 254
39451: ST_TO_ADDR
// if r = 5 then
39452: LD_VAR 0 15
39456: PUSH
39457: LD_INT 5
39459: EQUAL
39460: IFFALSE 39470
// r := 0 ;
39462: LD_ADDR_VAR 0 15
39466: PUSH
39467: LD_INT 0
39469: ST_TO_ADDR
// for j = r to 5 do
39470: LD_ADDR_VAR 0 10
39474: PUSH
39475: DOUBLE
39476: LD_VAR 0 15
39480: DEC
39481: ST_TO_ADDR
39482: LD_INT 5
39484: PUSH
39485: FOR_TO
39486: IFFALSE 39600
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39488: LD_ADDR_VAR 0 11
39492: PUSH
39493: LD_VAR 0 13
39497: PPUSH
39498: CALL_OW 250
39502: PPUSH
39503: LD_VAR 0 10
39507: PPUSH
39508: LD_INT 2
39510: PPUSH
39511: CALL_OW 272
39515: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39516: LD_ADDR_VAR 0 12
39520: PUSH
39521: LD_VAR 0 13
39525: PPUSH
39526: CALL_OW 251
39530: PPUSH
39531: LD_VAR 0 10
39535: PPUSH
39536: LD_INT 2
39538: PPUSH
39539: CALL_OW 273
39543: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39544: LD_VAR 0 11
39548: PPUSH
39549: LD_VAR 0 12
39553: PPUSH
39554: CALL_OW 488
39558: PUSH
39559: LD_VAR 0 11
39563: PPUSH
39564: LD_VAR 0 12
39568: PPUSH
39569: CALL_OW 428
39573: NOT
39574: AND
39575: IFFALSE 39598
// begin ComMoveXY ( tmp , _x , _y ) ;
39577: LD_VAR 0 13
39581: PPUSH
39582: LD_VAR 0 11
39586: PPUSH
39587: LD_VAR 0 12
39591: PPUSH
39592: CALL_OW 111
// break ;
39596: GO 39600
// end ; end ;
39598: GO 39485
39600: POP
39601: POP
// end ; end ;
39602: GO 38927
39604: POP
39605: POP
// end ;
39606: LD_VAR 0 8
39610: RET
// export function BuildingTechInvented ( side , btype ) ; begin
39611: LD_INT 0
39613: PPUSH
// result := true ;
39614: LD_ADDR_VAR 0 3
39618: PUSH
39619: LD_INT 1
39621: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
39622: LD_VAR 0 2
39626: PUSH
39627: LD_INT 24
39629: DOUBLE
39630: EQUAL
39631: IFTRUE 39641
39633: LD_INT 33
39635: DOUBLE
39636: EQUAL
39637: IFTRUE 39641
39639: GO 39666
39641: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
39642: LD_ADDR_VAR 0 3
39646: PUSH
39647: LD_INT 32
39649: PPUSH
39650: LD_VAR 0 1
39654: PPUSH
39655: CALL_OW 321
39659: PUSH
39660: LD_INT 2
39662: EQUAL
39663: ST_TO_ADDR
39664: GO 39982
39666: LD_INT 20
39668: DOUBLE
39669: EQUAL
39670: IFTRUE 39674
39672: GO 39699
39674: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
39675: LD_ADDR_VAR 0 3
39679: PUSH
39680: LD_INT 6
39682: PPUSH
39683: LD_VAR 0 1
39687: PPUSH
39688: CALL_OW 321
39692: PUSH
39693: LD_INT 2
39695: EQUAL
39696: ST_TO_ADDR
39697: GO 39982
39699: LD_INT 22
39701: DOUBLE
39702: EQUAL
39703: IFTRUE 39713
39705: LD_INT 36
39707: DOUBLE
39708: EQUAL
39709: IFTRUE 39713
39711: GO 39738
39713: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
39714: LD_ADDR_VAR 0 3
39718: PUSH
39719: LD_INT 15
39721: PPUSH
39722: LD_VAR 0 1
39726: PPUSH
39727: CALL_OW 321
39731: PUSH
39732: LD_INT 2
39734: EQUAL
39735: ST_TO_ADDR
39736: GO 39982
39738: LD_INT 30
39740: DOUBLE
39741: EQUAL
39742: IFTRUE 39746
39744: GO 39771
39746: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
39747: LD_ADDR_VAR 0 3
39751: PUSH
39752: LD_INT 20
39754: PPUSH
39755: LD_VAR 0 1
39759: PPUSH
39760: CALL_OW 321
39764: PUSH
39765: LD_INT 2
39767: EQUAL
39768: ST_TO_ADDR
39769: GO 39982
39771: LD_INT 28
39773: DOUBLE
39774: EQUAL
39775: IFTRUE 39785
39777: LD_INT 21
39779: DOUBLE
39780: EQUAL
39781: IFTRUE 39785
39783: GO 39810
39785: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
39786: LD_ADDR_VAR 0 3
39790: PUSH
39791: LD_INT 21
39793: PPUSH
39794: LD_VAR 0 1
39798: PPUSH
39799: CALL_OW 321
39803: PUSH
39804: LD_INT 2
39806: EQUAL
39807: ST_TO_ADDR
39808: GO 39982
39810: LD_INT 16
39812: DOUBLE
39813: EQUAL
39814: IFTRUE 39818
39816: GO 39843
39818: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
39819: LD_ADDR_VAR 0 3
39823: PUSH
39824: LD_INT 84
39826: PPUSH
39827: LD_VAR 0 1
39831: PPUSH
39832: CALL_OW 321
39836: PUSH
39837: LD_INT 2
39839: EQUAL
39840: ST_TO_ADDR
39841: GO 39982
39843: LD_INT 19
39845: DOUBLE
39846: EQUAL
39847: IFTRUE 39857
39849: LD_INT 23
39851: DOUBLE
39852: EQUAL
39853: IFTRUE 39857
39855: GO 39882
39857: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
39858: LD_ADDR_VAR 0 3
39862: PUSH
39863: LD_INT 83
39865: PPUSH
39866: LD_VAR 0 1
39870: PPUSH
39871: CALL_OW 321
39875: PUSH
39876: LD_INT 2
39878: EQUAL
39879: ST_TO_ADDR
39880: GO 39982
39882: LD_INT 17
39884: DOUBLE
39885: EQUAL
39886: IFTRUE 39890
39888: GO 39915
39890: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
39891: LD_ADDR_VAR 0 3
39895: PUSH
39896: LD_INT 39
39898: PPUSH
39899: LD_VAR 0 1
39903: PPUSH
39904: CALL_OW 321
39908: PUSH
39909: LD_INT 2
39911: EQUAL
39912: ST_TO_ADDR
39913: GO 39982
39915: LD_INT 18
39917: DOUBLE
39918: EQUAL
39919: IFTRUE 39923
39921: GO 39948
39923: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
39924: LD_ADDR_VAR 0 3
39928: PUSH
39929: LD_INT 40
39931: PPUSH
39932: LD_VAR 0 1
39936: PPUSH
39937: CALL_OW 321
39941: PUSH
39942: LD_INT 2
39944: EQUAL
39945: ST_TO_ADDR
39946: GO 39982
39948: LD_INT 27
39950: DOUBLE
39951: EQUAL
39952: IFTRUE 39956
39954: GO 39981
39956: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
39957: LD_ADDR_VAR 0 3
39961: PUSH
39962: LD_INT 35
39964: PPUSH
39965: LD_VAR 0 1
39969: PPUSH
39970: CALL_OW 321
39974: PUSH
39975: LD_INT 2
39977: EQUAL
39978: ST_TO_ADDR
39979: GO 39982
39981: POP
// end ;
39982: LD_VAR 0 3
39986: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
39987: LD_INT 0
39989: PPUSH
39990: PPUSH
39991: PPUSH
39992: PPUSH
39993: PPUSH
39994: PPUSH
39995: PPUSH
39996: PPUSH
39997: PPUSH
39998: PPUSH
39999: PPUSH
// result := false ;
40000: LD_ADDR_VAR 0 6
40004: PUSH
40005: LD_INT 0
40007: ST_TO_ADDR
// if btype = b_depot then
40008: LD_VAR 0 2
40012: PUSH
40013: LD_INT 0
40015: EQUAL
40016: IFFALSE 40028
// begin result := true ;
40018: LD_ADDR_VAR 0 6
40022: PUSH
40023: LD_INT 1
40025: ST_TO_ADDR
// exit ;
40026: GO 40854
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40028: LD_VAR 0 1
40032: NOT
40033: PUSH
40034: LD_VAR 0 1
40038: PPUSH
40039: CALL_OW 266
40043: PUSH
40044: LD_INT 0
40046: PUSH
40047: LD_INT 1
40049: PUSH
40050: EMPTY
40051: LIST
40052: LIST
40053: IN
40054: NOT
40055: OR
40056: PUSH
40057: LD_VAR 0 2
40061: NOT
40062: OR
40063: PUSH
40064: LD_VAR 0 5
40068: PUSH
40069: LD_INT 0
40071: PUSH
40072: LD_INT 1
40074: PUSH
40075: LD_INT 2
40077: PUSH
40078: LD_INT 3
40080: PUSH
40081: LD_INT 4
40083: PUSH
40084: LD_INT 5
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: IN
40095: NOT
40096: OR
40097: PUSH
40098: LD_VAR 0 3
40102: PPUSH
40103: LD_VAR 0 4
40107: PPUSH
40108: CALL_OW 488
40112: NOT
40113: OR
40114: IFFALSE 40118
// exit ;
40116: GO 40854
// side := GetSide ( depot ) ;
40118: LD_ADDR_VAR 0 9
40122: PUSH
40123: LD_VAR 0 1
40127: PPUSH
40128: CALL_OW 255
40132: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
40133: LD_VAR 0 9
40137: PPUSH
40138: LD_VAR 0 2
40142: PPUSH
40143: CALL 39611 0 2
40147: NOT
40148: IFFALSE 40152
// exit ;
40150: GO 40854
// pom := GetBase ( depot ) ;
40152: LD_ADDR_VAR 0 10
40156: PUSH
40157: LD_VAR 0 1
40161: PPUSH
40162: CALL_OW 274
40166: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40167: LD_ADDR_VAR 0 11
40171: PUSH
40172: LD_VAR 0 2
40176: PPUSH
40177: LD_VAR 0 1
40181: PPUSH
40182: CALL_OW 248
40186: PPUSH
40187: CALL_OW 450
40191: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40192: LD_VAR 0 10
40196: PPUSH
40197: LD_INT 1
40199: PPUSH
40200: CALL_OW 275
40204: PUSH
40205: LD_VAR 0 11
40209: PUSH
40210: LD_INT 1
40212: ARRAY
40213: GREATEREQUAL
40214: PUSH
40215: LD_VAR 0 10
40219: PPUSH
40220: LD_INT 2
40222: PPUSH
40223: CALL_OW 275
40227: PUSH
40228: LD_VAR 0 11
40232: PUSH
40233: LD_INT 2
40235: ARRAY
40236: GREATEREQUAL
40237: AND
40238: PUSH
40239: LD_VAR 0 10
40243: PPUSH
40244: LD_INT 3
40246: PPUSH
40247: CALL_OW 275
40251: PUSH
40252: LD_VAR 0 11
40256: PUSH
40257: LD_INT 3
40259: ARRAY
40260: GREATEREQUAL
40261: AND
40262: NOT
40263: IFFALSE 40267
// exit ;
40265: GO 40854
// if GetBType ( depot ) = b_depot then
40267: LD_VAR 0 1
40271: PPUSH
40272: CALL_OW 266
40276: PUSH
40277: LD_INT 0
40279: EQUAL
40280: IFFALSE 40292
// dist := 28 else
40282: LD_ADDR_VAR 0 14
40286: PUSH
40287: LD_INT 28
40289: ST_TO_ADDR
40290: GO 40300
// dist := 36 ;
40292: LD_ADDR_VAR 0 14
40296: PUSH
40297: LD_INT 36
40299: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40300: LD_VAR 0 1
40304: PPUSH
40305: LD_VAR 0 3
40309: PPUSH
40310: LD_VAR 0 4
40314: PPUSH
40315: CALL_OW 297
40319: PUSH
40320: LD_VAR 0 14
40324: GREATER
40325: IFFALSE 40329
// exit ;
40327: GO 40854
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40329: LD_ADDR_VAR 0 12
40333: PUSH
40334: LD_VAR 0 2
40338: PPUSH
40339: LD_VAR 0 3
40343: PPUSH
40344: LD_VAR 0 4
40348: PPUSH
40349: LD_VAR 0 5
40353: PPUSH
40354: LD_VAR 0 1
40358: PPUSH
40359: CALL_OW 248
40363: PPUSH
40364: LD_INT 0
40366: PPUSH
40367: CALL 40859 0 6
40371: ST_TO_ADDR
// if not hexes then
40372: LD_VAR 0 12
40376: NOT
40377: IFFALSE 40381
// exit ;
40379: GO 40854
// hex := GetHexInfo ( x , y ) ;
40381: LD_ADDR_VAR 0 15
40385: PUSH
40386: LD_VAR 0 3
40390: PPUSH
40391: LD_VAR 0 4
40395: PPUSH
40396: CALL_OW 546
40400: ST_TO_ADDR
// if hex [ 1 ] then
40401: LD_VAR 0 15
40405: PUSH
40406: LD_INT 1
40408: ARRAY
40409: IFFALSE 40413
// exit ;
40411: GO 40854
// height := hex [ 2 ] ;
40413: LD_ADDR_VAR 0 13
40417: PUSH
40418: LD_VAR 0 15
40422: PUSH
40423: LD_INT 2
40425: ARRAY
40426: ST_TO_ADDR
// for i = 1 to hexes do
40427: LD_ADDR_VAR 0 7
40431: PUSH
40432: DOUBLE
40433: LD_INT 1
40435: DEC
40436: ST_TO_ADDR
40437: LD_VAR 0 12
40441: PUSH
40442: FOR_TO
40443: IFFALSE 40773
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40445: LD_VAR 0 12
40449: PUSH
40450: LD_VAR 0 7
40454: ARRAY
40455: PUSH
40456: LD_INT 1
40458: ARRAY
40459: PPUSH
40460: LD_VAR 0 12
40464: PUSH
40465: LD_VAR 0 7
40469: ARRAY
40470: PUSH
40471: LD_INT 2
40473: ARRAY
40474: PPUSH
40475: CALL_OW 488
40479: NOT
40480: PUSH
40481: LD_VAR 0 12
40485: PUSH
40486: LD_VAR 0 7
40490: ARRAY
40491: PUSH
40492: LD_INT 1
40494: ARRAY
40495: PPUSH
40496: LD_VAR 0 12
40500: PUSH
40501: LD_VAR 0 7
40505: ARRAY
40506: PUSH
40507: LD_INT 2
40509: ARRAY
40510: PPUSH
40511: CALL_OW 428
40515: PUSH
40516: LD_INT 0
40518: GREATER
40519: OR
40520: PUSH
40521: LD_VAR 0 12
40525: PUSH
40526: LD_VAR 0 7
40530: ARRAY
40531: PUSH
40532: LD_INT 1
40534: ARRAY
40535: PPUSH
40536: LD_VAR 0 12
40540: PUSH
40541: LD_VAR 0 7
40545: ARRAY
40546: PUSH
40547: LD_INT 2
40549: ARRAY
40550: PPUSH
40551: CALL_OW 351
40555: OR
40556: IFFALSE 40562
// exit ;
40558: POP
40559: POP
40560: GO 40854
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40562: LD_ADDR_VAR 0 8
40566: PUSH
40567: LD_VAR 0 12
40571: PUSH
40572: LD_VAR 0 7
40576: ARRAY
40577: PUSH
40578: LD_INT 1
40580: ARRAY
40581: PPUSH
40582: LD_VAR 0 12
40586: PUSH
40587: LD_VAR 0 7
40591: ARRAY
40592: PUSH
40593: LD_INT 2
40595: ARRAY
40596: PPUSH
40597: CALL_OW 546
40601: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
40602: LD_VAR 0 8
40606: PUSH
40607: LD_INT 1
40609: ARRAY
40610: PUSH
40611: LD_VAR 0 8
40615: PUSH
40616: LD_INT 2
40618: ARRAY
40619: PUSH
40620: LD_VAR 0 13
40624: PUSH
40625: LD_INT 2
40627: PLUS
40628: GREATER
40629: OR
40630: PUSH
40631: LD_VAR 0 8
40635: PUSH
40636: LD_INT 2
40638: ARRAY
40639: PUSH
40640: LD_VAR 0 13
40644: PUSH
40645: LD_INT 2
40647: MINUS
40648: LESS
40649: OR
40650: PUSH
40651: LD_VAR 0 8
40655: PUSH
40656: LD_INT 3
40658: ARRAY
40659: PUSH
40660: LD_INT 0
40662: PUSH
40663: LD_INT 8
40665: PUSH
40666: LD_INT 9
40668: PUSH
40669: LD_INT 10
40671: PUSH
40672: LD_INT 11
40674: PUSH
40675: LD_INT 12
40677: PUSH
40678: LD_INT 13
40680: PUSH
40681: LD_INT 16
40683: PUSH
40684: LD_INT 17
40686: PUSH
40687: LD_INT 18
40689: PUSH
40690: LD_INT 19
40692: PUSH
40693: LD_INT 20
40695: PUSH
40696: LD_INT 21
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: LIST
40703: LIST
40704: LIST
40705: LIST
40706: LIST
40707: LIST
40708: LIST
40709: LIST
40710: LIST
40711: LIST
40712: LIST
40713: IN
40714: NOT
40715: OR
40716: PUSH
40717: LD_VAR 0 8
40721: PUSH
40722: LD_INT 5
40724: ARRAY
40725: NOT
40726: OR
40727: PUSH
40728: LD_VAR 0 8
40732: PUSH
40733: LD_INT 6
40735: ARRAY
40736: PUSH
40737: LD_INT 1
40739: PUSH
40740: LD_INT 2
40742: PUSH
40743: LD_INT 7
40745: PUSH
40746: LD_INT 9
40748: PUSH
40749: LD_INT 10
40751: PUSH
40752: LD_INT 11
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: LIST
40759: LIST
40760: LIST
40761: LIST
40762: IN
40763: NOT
40764: OR
40765: IFFALSE 40771
// exit ;
40767: POP
40768: POP
40769: GO 40854
// end ;
40771: GO 40442
40773: POP
40774: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
40775: LD_VAR 0 9
40779: PPUSH
40780: LD_VAR 0 3
40784: PPUSH
40785: LD_VAR 0 4
40789: PPUSH
40790: LD_INT 20
40792: PPUSH
40793: CALL 32777 0 4
40797: PUSH
40798: LD_INT 4
40800: ARRAY
40801: IFFALSE 40805
// exit ;
40803: GO 40854
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
40805: LD_VAR 0 2
40809: PUSH
40810: LD_INT 29
40812: PUSH
40813: LD_INT 30
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: IN
40820: PUSH
40821: LD_VAR 0 3
40825: PPUSH
40826: LD_VAR 0 4
40830: PPUSH
40831: LD_VAR 0 9
40835: PPUSH
40836: CALL_OW 440
40840: NOT
40841: AND
40842: IFFALSE 40846
// exit ;
40844: GO 40854
// result := true ;
40846: LD_ADDR_VAR 0 6
40850: PUSH
40851: LD_INT 1
40853: ST_TO_ADDR
// end ;
40854: LD_VAR 0 6
40858: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
40859: LD_INT 0
40861: PPUSH
40862: PPUSH
40863: PPUSH
40864: PPUSH
40865: PPUSH
40866: PPUSH
40867: PPUSH
40868: PPUSH
40869: PPUSH
40870: PPUSH
40871: PPUSH
40872: PPUSH
40873: PPUSH
40874: PPUSH
40875: PPUSH
40876: PPUSH
40877: PPUSH
40878: PPUSH
40879: PPUSH
40880: PPUSH
40881: PPUSH
40882: PPUSH
40883: PPUSH
40884: PPUSH
40885: PPUSH
40886: PPUSH
40887: PPUSH
40888: PPUSH
40889: PPUSH
40890: PPUSH
40891: PPUSH
40892: PPUSH
40893: PPUSH
40894: PPUSH
40895: PPUSH
40896: PPUSH
40897: PPUSH
40898: PPUSH
40899: PPUSH
40900: PPUSH
40901: PPUSH
40902: PPUSH
40903: PPUSH
40904: PPUSH
40905: PPUSH
40906: PPUSH
40907: PPUSH
40908: PPUSH
40909: PPUSH
40910: PPUSH
40911: PPUSH
40912: PPUSH
40913: PPUSH
40914: PPUSH
40915: PPUSH
40916: PPUSH
40917: PPUSH
40918: PPUSH
// result = [ ] ;
40919: LD_ADDR_VAR 0 7
40923: PUSH
40924: EMPTY
40925: ST_TO_ADDR
// temp_list = [ ] ;
40926: LD_ADDR_VAR 0 9
40930: PUSH
40931: EMPTY
40932: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
40933: LD_VAR 0 4
40937: PUSH
40938: LD_INT 0
40940: PUSH
40941: LD_INT 1
40943: PUSH
40944: LD_INT 2
40946: PUSH
40947: LD_INT 3
40949: PUSH
40950: LD_INT 4
40952: PUSH
40953: LD_INT 5
40955: PUSH
40956: EMPTY
40957: LIST
40958: LIST
40959: LIST
40960: LIST
40961: LIST
40962: LIST
40963: IN
40964: NOT
40965: PUSH
40966: LD_VAR 0 1
40970: PUSH
40971: LD_INT 0
40973: PUSH
40974: LD_INT 1
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: IN
40981: PUSH
40982: LD_VAR 0 5
40986: PUSH
40987: LD_INT 1
40989: PUSH
40990: LD_INT 2
40992: PUSH
40993: LD_INT 3
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: LIST
41000: IN
41001: NOT
41002: AND
41003: OR
41004: IFFALSE 41008
// exit ;
41006: GO 59399
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41008: LD_VAR 0 1
41012: PUSH
41013: LD_INT 6
41015: PUSH
41016: LD_INT 7
41018: PUSH
41019: LD_INT 8
41021: PUSH
41022: LD_INT 13
41024: PUSH
41025: LD_INT 12
41027: PUSH
41028: LD_INT 15
41030: PUSH
41031: LD_INT 11
41033: PUSH
41034: LD_INT 14
41036: PUSH
41037: LD_INT 10
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: LIST
41044: LIST
41045: LIST
41046: LIST
41047: LIST
41048: LIST
41049: LIST
41050: IN
41051: IFFALSE 41061
// btype = b_lab ;
41053: LD_ADDR_VAR 0 1
41057: PUSH
41058: LD_INT 6
41060: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41061: LD_VAR 0 6
41065: PUSH
41066: LD_INT 0
41068: PUSH
41069: LD_INT 1
41071: PUSH
41072: LD_INT 2
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: LIST
41079: IN
41080: NOT
41081: PUSH
41082: LD_VAR 0 1
41086: PUSH
41087: LD_INT 0
41089: PUSH
41090: LD_INT 1
41092: PUSH
41093: LD_INT 2
41095: PUSH
41096: LD_INT 3
41098: PUSH
41099: LD_INT 6
41101: PUSH
41102: LD_INT 36
41104: PUSH
41105: LD_INT 4
41107: PUSH
41108: LD_INT 5
41110: PUSH
41111: LD_INT 31
41113: PUSH
41114: LD_INT 32
41116: PUSH
41117: LD_INT 33
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: LIST
41130: LIST
41131: LIST
41132: IN
41133: NOT
41134: PUSH
41135: LD_VAR 0 6
41139: PUSH
41140: LD_INT 1
41142: EQUAL
41143: AND
41144: OR
41145: PUSH
41146: LD_VAR 0 1
41150: PUSH
41151: LD_INT 2
41153: PUSH
41154: LD_INT 3
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: IN
41161: NOT
41162: PUSH
41163: LD_VAR 0 6
41167: PUSH
41168: LD_INT 2
41170: EQUAL
41171: AND
41172: OR
41173: IFFALSE 41183
// mode = 0 ;
41175: LD_ADDR_VAR 0 6
41179: PUSH
41180: LD_INT 0
41182: ST_TO_ADDR
// case mode of 0 :
41183: LD_VAR 0 6
41187: PUSH
41188: LD_INT 0
41190: DOUBLE
41191: EQUAL
41192: IFTRUE 41196
41194: GO 52649
41196: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41197: LD_ADDR_VAR 0 11
41201: PUSH
41202: LD_INT 0
41204: PUSH
41205: LD_INT 0
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: PUSH
41212: LD_INT 0
41214: PUSH
41215: LD_INT 1
41217: NEG
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PUSH
41223: LD_INT 1
41225: PUSH
41226: LD_INT 0
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: PUSH
41233: LD_INT 1
41235: PUSH
41236: LD_INT 1
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: PUSH
41243: LD_INT 0
41245: PUSH
41246: LD_INT 1
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: LD_INT 1
41255: NEG
41256: PUSH
41257: LD_INT 0
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 1
41266: NEG
41267: PUSH
41268: LD_INT 1
41270: NEG
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: PUSH
41276: LD_INT 1
41278: NEG
41279: PUSH
41280: LD_INT 2
41282: NEG
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PUSH
41288: LD_INT 0
41290: PUSH
41291: LD_INT 2
41293: NEG
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: LD_INT 1
41301: PUSH
41302: LD_INT 1
41304: NEG
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 1
41312: PUSH
41313: LD_INT 2
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 0
41322: PUSH
41323: LD_INT 2
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 1
41332: NEG
41333: PUSH
41334: LD_INT 1
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PUSH
41341: LD_INT 1
41343: PUSH
41344: LD_INT 3
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 0
41353: PUSH
41354: LD_INT 3
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 1
41363: NEG
41364: PUSH
41365: LD_INT 2
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: LIST
41376: LIST
41377: LIST
41378: LIST
41379: LIST
41380: LIST
41381: LIST
41382: LIST
41383: LIST
41384: LIST
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41390: LD_ADDR_VAR 0 12
41394: PUSH
41395: LD_INT 0
41397: PUSH
41398: LD_INT 0
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: LD_INT 0
41407: PUSH
41408: LD_INT 1
41410: NEG
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 1
41418: PUSH
41419: LD_INT 0
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: LD_INT 1
41428: PUSH
41429: LD_INT 1
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: PUSH
41436: LD_INT 0
41438: PUSH
41439: LD_INT 1
41441: PUSH
41442: EMPTY
41443: LIST
41444: LIST
41445: PUSH
41446: LD_INT 1
41448: NEG
41449: PUSH
41450: LD_INT 0
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: PUSH
41457: LD_INT 1
41459: NEG
41460: PUSH
41461: LD_INT 1
41463: NEG
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PUSH
41469: LD_INT 1
41471: PUSH
41472: LD_INT 1
41474: NEG
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: PUSH
41480: LD_INT 2
41482: PUSH
41483: LD_INT 0
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: PUSH
41490: LD_INT 2
41492: PUSH
41493: LD_INT 1
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 1
41502: NEG
41503: PUSH
41504: LD_INT 1
41506: PUSH
41507: EMPTY
41508: LIST
41509: LIST
41510: PUSH
41511: LD_INT 2
41513: NEG
41514: PUSH
41515: LD_INT 0
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: PUSH
41522: LD_INT 2
41524: NEG
41525: PUSH
41526: LD_INT 1
41528: NEG
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: PUSH
41534: LD_INT 2
41536: NEG
41537: PUSH
41538: LD_INT 1
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: PUSH
41545: LD_INT 3
41547: NEG
41548: PUSH
41549: LD_INT 0
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: PUSH
41556: LD_INT 3
41558: NEG
41559: PUSH
41560: LD_INT 1
41562: NEG
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: LIST
41572: LIST
41573: LIST
41574: LIST
41575: LIST
41576: LIST
41577: LIST
41578: LIST
41579: LIST
41580: LIST
41581: LIST
41582: LIST
41583: LIST
41584: LIST
41585: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41586: LD_ADDR_VAR 0 13
41590: PUSH
41591: LD_INT 0
41593: PUSH
41594: LD_INT 0
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: PUSH
41601: LD_INT 0
41603: PUSH
41604: LD_INT 1
41606: NEG
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 1
41614: PUSH
41615: LD_INT 0
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PUSH
41622: LD_INT 1
41624: PUSH
41625: LD_INT 1
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: LD_INT 0
41634: PUSH
41635: LD_INT 1
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: PUSH
41642: LD_INT 1
41644: NEG
41645: PUSH
41646: LD_INT 0
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: PUSH
41653: LD_INT 1
41655: NEG
41656: PUSH
41657: LD_INT 1
41659: NEG
41660: PUSH
41661: EMPTY
41662: LIST
41663: LIST
41664: PUSH
41665: LD_INT 1
41667: NEG
41668: PUSH
41669: LD_INT 2
41671: NEG
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: LD_INT 2
41679: PUSH
41680: LD_INT 1
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PUSH
41687: LD_INT 2
41689: PUSH
41690: LD_INT 2
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: PUSH
41697: LD_INT 1
41699: PUSH
41700: LD_INT 2
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: PUSH
41707: LD_INT 2
41709: NEG
41710: PUSH
41711: LD_INT 1
41713: NEG
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: PUSH
41719: LD_INT 2
41721: NEG
41722: PUSH
41723: LD_INT 2
41725: NEG
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: PUSH
41731: LD_INT 2
41733: NEG
41734: PUSH
41735: LD_INT 3
41737: NEG
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: PUSH
41743: LD_INT 3
41745: NEG
41746: PUSH
41747: LD_INT 2
41749: NEG
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: LD_INT 3
41757: NEG
41758: PUSH
41759: LD_INT 3
41761: NEG
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: LIST
41771: LIST
41772: LIST
41773: LIST
41774: LIST
41775: LIST
41776: LIST
41777: LIST
41778: LIST
41779: LIST
41780: LIST
41781: LIST
41782: LIST
41783: LIST
41784: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41785: LD_ADDR_VAR 0 14
41789: PUSH
41790: LD_INT 0
41792: PUSH
41793: LD_INT 0
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 0
41802: PUSH
41803: LD_INT 1
41805: NEG
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 1
41813: PUSH
41814: LD_INT 0
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 1
41823: PUSH
41824: LD_INT 1
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: PUSH
41831: LD_INT 0
41833: PUSH
41834: LD_INT 1
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 1
41843: NEG
41844: PUSH
41845: LD_INT 0
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 1
41854: NEG
41855: PUSH
41856: LD_INT 1
41858: NEG
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: LD_INT 1
41866: NEG
41867: PUSH
41868: LD_INT 2
41870: NEG
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: LD_INT 0
41878: PUSH
41879: LD_INT 2
41881: NEG
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: LD_INT 1
41889: PUSH
41890: LD_INT 1
41892: NEG
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 1
41900: PUSH
41901: LD_INT 2
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 0
41910: PUSH
41911: LD_INT 2
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 1
41920: NEG
41921: PUSH
41922: LD_INT 1
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PUSH
41929: LD_INT 1
41931: NEG
41932: PUSH
41933: LD_INT 3
41935: NEG
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: PUSH
41941: LD_INT 0
41943: PUSH
41944: LD_INT 3
41946: NEG
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 1
41954: PUSH
41955: LD_INT 2
41957: NEG
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: LIST
41967: LIST
41968: LIST
41969: LIST
41970: LIST
41971: LIST
41972: LIST
41973: LIST
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: LIST
41979: LIST
41980: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41981: LD_ADDR_VAR 0 15
41985: PUSH
41986: LD_INT 0
41988: PUSH
41989: LD_INT 0
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: LD_INT 0
41998: PUSH
41999: LD_INT 1
42001: NEG
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 1
42009: PUSH
42010: LD_INT 0
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: LD_INT 1
42019: PUSH
42020: LD_INT 1
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: LD_INT 0
42029: PUSH
42030: LD_INT 1
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PUSH
42037: LD_INT 1
42039: NEG
42040: PUSH
42041: LD_INT 0
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 1
42050: NEG
42051: PUSH
42052: LD_INT 1
42054: NEG
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 1
42062: PUSH
42063: LD_INT 1
42065: NEG
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: LD_INT 2
42073: PUSH
42074: LD_INT 0
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: PUSH
42081: LD_INT 2
42083: PUSH
42084: LD_INT 1
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: LD_INT 1
42093: NEG
42094: PUSH
42095: LD_INT 1
42097: PUSH
42098: EMPTY
42099: LIST
42100: LIST
42101: PUSH
42102: LD_INT 2
42104: NEG
42105: PUSH
42106: LD_INT 0
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: PUSH
42113: LD_INT 2
42115: NEG
42116: PUSH
42117: LD_INT 1
42119: NEG
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 2
42127: PUSH
42128: LD_INT 1
42130: NEG
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: LD_INT 3
42138: PUSH
42139: LD_INT 0
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PUSH
42146: LD_INT 3
42148: PUSH
42149: LD_INT 1
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: LIST
42160: LIST
42161: LIST
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: LIST
42172: LIST
42173: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42174: LD_ADDR_VAR 0 16
42178: PUSH
42179: LD_INT 0
42181: PUSH
42182: LD_INT 0
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: LD_INT 0
42191: PUSH
42192: LD_INT 1
42194: NEG
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: PUSH
42200: LD_INT 1
42202: PUSH
42203: LD_INT 0
42205: PUSH
42206: EMPTY
42207: LIST
42208: LIST
42209: PUSH
42210: LD_INT 1
42212: PUSH
42213: LD_INT 1
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: PUSH
42220: LD_INT 0
42222: PUSH
42223: LD_INT 1
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: PUSH
42230: LD_INT 1
42232: NEG
42233: PUSH
42234: LD_INT 0
42236: PUSH
42237: EMPTY
42238: LIST
42239: LIST
42240: PUSH
42241: LD_INT 1
42243: NEG
42244: PUSH
42245: LD_INT 1
42247: NEG
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: PUSH
42253: LD_INT 1
42255: NEG
42256: PUSH
42257: LD_INT 2
42259: NEG
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: PUSH
42265: LD_INT 2
42267: PUSH
42268: LD_INT 1
42270: PUSH
42271: EMPTY
42272: LIST
42273: LIST
42274: PUSH
42275: LD_INT 2
42277: PUSH
42278: LD_INT 2
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: PUSH
42285: LD_INT 1
42287: PUSH
42288: LD_INT 2
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: PUSH
42295: LD_INT 2
42297: NEG
42298: PUSH
42299: LD_INT 1
42301: NEG
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: PUSH
42307: LD_INT 2
42309: NEG
42310: PUSH
42311: LD_INT 2
42313: NEG
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: LD_INT 3
42321: PUSH
42322: LD_INT 2
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: PUSH
42329: LD_INT 3
42331: PUSH
42332: LD_INT 3
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: PUSH
42339: LD_INT 2
42341: PUSH
42342: LD_INT 3
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: LIST
42353: LIST
42354: LIST
42355: LIST
42356: LIST
42357: LIST
42358: LIST
42359: LIST
42360: LIST
42361: LIST
42362: LIST
42363: LIST
42364: LIST
42365: LIST
42366: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42367: LD_ADDR_VAR 0 17
42371: PUSH
42372: LD_INT 0
42374: PUSH
42375: LD_INT 0
42377: PUSH
42378: EMPTY
42379: LIST
42380: LIST
42381: PUSH
42382: LD_INT 0
42384: PUSH
42385: LD_INT 1
42387: NEG
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 1
42395: PUSH
42396: LD_INT 0
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: PUSH
42403: LD_INT 1
42405: PUSH
42406: LD_INT 1
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: LD_INT 0
42415: PUSH
42416: LD_INT 1
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: LD_INT 1
42425: NEG
42426: PUSH
42427: LD_INT 0
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: LD_INT 1
42436: NEG
42437: PUSH
42438: LD_INT 1
42440: NEG
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_INT 1
42448: NEG
42449: PUSH
42450: LD_INT 2
42452: NEG
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: LD_INT 0
42460: PUSH
42461: LD_INT 2
42463: NEG
42464: PUSH
42465: EMPTY
42466: LIST
42467: LIST
42468: PUSH
42469: LD_INT 1
42471: PUSH
42472: LD_INT 1
42474: NEG
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: LD_INT 2
42482: PUSH
42483: LD_INT 0
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 2
42492: PUSH
42493: LD_INT 1
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: LD_INT 2
42502: PUSH
42503: LD_INT 2
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: PUSH
42510: LD_INT 1
42512: PUSH
42513: LD_INT 2
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: PUSH
42520: LD_INT 0
42522: PUSH
42523: LD_INT 2
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 1
42532: NEG
42533: PUSH
42534: LD_INT 1
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: PUSH
42541: LD_INT 2
42543: NEG
42544: PUSH
42545: LD_INT 0
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: LD_INT 2
42554: NEG
42555: PUSH
42556: LD_INT 1
42558: NEG
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: PUSH
42564: LD_INT 2
42566: NEG
42567: PUSH
42568: LD_INT 2
42570: NEG
42571: PUSH
42572: EMPTY
42573: LIST
42574: LIST
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: LIST
42583: LIST
42584: LIST
42585: LIST
42586: LIST
42587: LIST
42588: LIST
42589: LIST
42590: LIST
42591: LIST
42592: LIST
42593: LIST
42594: LIST
42595: LIST
42596: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42597: LD_ADDR_VAR 0 18
42601: PUSH
42602: LD_INT 0
42604: PUSH
42605: LD_INT 0
42607: PUSH
42608: EMPTY
42609: LIST
42610: LIST
42611: PUSH
42612: LD_INT 0
42614: PUSH
42615: LD_INT 1
42617: NEG
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 1
42625: PUSH
42626: LD_INT 0
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: PUSH
42633: LD_INT 1
42635: PUSH
42636: LD_INT 1
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: PUSH
42643: LD_INT 0
42645: PUSH
42646: LD_INT 1
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: PUSH
42653: LD_INT 1
42655: NEG
42656: PUSH
42657: LD_INT 0
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: PUSH
42664: LD_INT 1
42666: NEG
42667: PUSH
42668: LD_INT 1
42670: NEG
42671: PUSH
42672: EMPTY
42673: LIST
42674: LIST
42675: PUSH
42676: LD_INT 1
42678: NEG
42679: PUSH
42680: LD_INT 2
42682: NEG
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: PUSH
42688: LD_INT 0
42690: PUSH
42691: LD_INT 2
42693: NEG
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: PUSH
42699: LD_INT 1
42701: PUSH
42702: LD_INT 1
42704: NEG
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: PUSH
42710: LD_INT 2
42712: PUSH
42713: LD_INT 0
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: PUSH
42720: LD_INT 2
42722: PUSH
42723: LD_INT 1
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: LD_INT 2
42732: PUSH
42733: LD_INT 2
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: PUSH
42740: LD_INT 1
42742: PUSH
42743: LD_INT 2
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: PUSH
42750: LD_INT 0
42752: PUSH
42753: LD_INT 2
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: LD_INT 1
42762: NEG
42763: PUSH
42764: LD_INT 1
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: LD_INT 2
42773: NEG
42774: PUSH
42775: LD_INT 0
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: PUSH
42782: LD_INT 2
42784: NEG
42785: PUSH
42786: LD_INT 1
42788: NEG
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: PUSH
42794: LD_INT 2
42796: NEG
42797: PUSH
42798: LD_INT 2
42800: NEG
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: LIST
42810: LIST
42811: LIST
42812: LIST
42813: LIST
42814: LIST
42815: LIST
42816: LIST
42817: LIST
42818: LIST
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42827: LD_ADDR_VAR 0 19
42831: PUSH
42832: LD_INT 0
42834: PUSH
42835: LD_INT 0
42837: PUSH
42838: EMPTY
42839: LIST
42840: LIST
42841: PUSH
42842: LD_INT 0
42844: PUSH
42845: LD_INT 1
42847: NEG
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: PUSH
42853: LD_INT 1
42855: PUSH
42856: LD_INT 0
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: PUSH
42863: LD_INT 1
42865: PUSH
42866: LD_INT 1
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: PUSH
42873: LD_INT 0
42875: PUSH
42876: LD_INT 1
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: PUSH
42883: LD_INT 1
42885: NEG
42886: PUSH
42887: LD_INT 0
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: PUSH
42894: LD_INT 1
42896: NEG
42897: PUSH
42898: LD_INT 1
42900: NEG
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: PUSH
42906: LD_INT 1
42908: NEG
42909: PUSH
42910: LD_INT 2
42912: NEG
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 0
42920: PUSH
42921: LD_INT 2
42923: NEG
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: LD_INT 1
42931: PUSH
42932: LD_INT 1
42934: NEG
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: LD_INT 2
42942: PUSH
42943: LD_INT 0
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: PUSH
42950: LD_INT 2
42952: PUSH
42953: LD_INT 1
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 2
42962: PUSH
42963: LD_INT 2
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: LD_INT 1
42972: PUSH
42973: LD_INT 2
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: PUSH
42980: LD_INT 0
42982: PUSH
42983: LD_INT 2
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PUSH
42990: LD_INT 1
42992: NEG
42993: PUSH
42994: LD_INT 1
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: PUSH
43001: LD_INT 2
43003: NEG
43004: PUSH
43005: LD_INT 0
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PUSH
43012: LD_INT 2
43014: NEG
43015: PUSH
43016: LD_INT 1
43018: NEG
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 2
43026: NEG
43027: PUSH
43028: LD_INT 2
43030: NEG
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: LIST
43040: LIST
43041: LIST
43042: LIST
43043: LIST
43044: LIST
43045: LIST
43046: LIST
43047: LIST
43048: LIST
43049: LIST
43050: LIST
43051: LIST
43052: LIST
43053: LIST
43054: LIST
43055: LIST
43056: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43057: LD_ADDR_VAR 0 20
43061: PUSH
43062: LD_INT 0
43064: PUSH
43065: LD_INT 0
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: PUSH
43072: LD_INT 0
43074: PUSH
43075: LD_INT 1
43077: NEG
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 1
43085: PUSH
43086: LD_INT 0
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: LD_INT 1
43095: PUSH
43096: LD_INT 1
43098: PUSH
43099: EMPTY
43100: LIST
43101: LIST
43102: PUSH
43103: LD_INT 0
43105: PUSH
43106: LD_INT 1
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: PUSH
43113: LD_INT 1
43115: NEG
43116: PUSH
43117: LD_INT 0
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: PUSH
43124: LD_INT 1
43126: NEG
43127: PUSH
43128: LD_INT 1
43130: NEG
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: PUSH
43136: LD_INT 1
43138: NEG
43139: PUSH
43140: LD_INT 2
43142: NEG
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: PUSH
43148: LD_INT 0
43150: PUSH
43151: LD_INT 2
43153: NEG
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PUSH
43159: LD_INT 1
43161: PUSH
43162: LD_INT 1
43164: NEG
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: LD_INT 2
43172: PUSH
43173: LD_INT 0
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: LD_INT 2
43182: PUSH
43183: LD_INT 1
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 2
43192: PUSH
43193: LD_INT 2
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PUSH
43200: LD_INT 1
43202: PUSH
43203: LD_INT 2
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PUSH
43210: LD_INT 0
43212: PUSH
43213: LD_INT 2
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: LD_INT 1
43222: NEG
43223: PUSH
43224: LD_INT 1
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PUSH
43231: LD_INT 2
43233: NEG
43234: PUSH
43235: LD_INT 0
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: PUSH
43242: LD_INT 2
43244: NEG
43245: PUSH
43246: LD_INT 1
43248: NEG
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 2
43256: NEG
43257: PUSH
43258: LD_INT 2
43260: NEG
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: LIST
43270: LIST
43271: LIST
43272: LIST
43273: LIST
43274: LIST
43275: LIST
43276: LIST
43277: LIST
43278: LIST
43279: LIST
43280: LIST
43281: LIST
43282: LIST
43283: LIST
43284: LIST
43285: LIST
43286: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43287: LD_ADDR_VAR 0 21
43291: PUSH
43292: LD_INT 0
43294: PUSH
43295: LD_INT 0
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: PUSH
43302: LD_INT 0
43304: PUSH
43305: LD_INT 1
43307: NEG
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 1
43315: PUSH
43316: LD_INT 0
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: LD_INT 1
43325: PUSH
43326: LD_INT 1
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: LD_INT 0
43335: PUSH
43336: LD_INT 1
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: LD_INT 1
43345: NEG
43346: PUSH
43347: LD_INT 0
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: LD_INT 1
43356: NEG
43357: PUSH
43358: LD_INT 1
43360: NEG
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: PUSH
43366: LD_INT 1
43368: NEG
43369: PUSH
43370: LD_INT 2
43372: NEG
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 0
43380: PUSH
43381: LD_INT 2
43383: NEG
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: LD_INT 1
43391: PUSH
43392: LD_INT 1
43394: NEG
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: LD_INT 2
43402: PUSH
43403: LD_INT 0
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: PUSH
43410: LD_INT 2
43412: PUSH
43413: LD_INT 1
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: PUSH
43420: LD_INT 2
43422: PUSH
43423: LD_INT 2
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: PUSH
43430: LD_INT 1
43432: PUSH
43433: LD_INT 2
43435: PUSH
43436: EMPTY
43437: LIST
43438: LIST
43439: PUSH
43440: LD_INT 0
43442: PUSH
43443: LD_INT 2
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: PUSH
43450: LD_INT 1
43452: NEG
43453: PUSH
43454: LD_INT 1
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: PUSH
43461: LD_INT 2
43463: NEG
43464: PUSH
43465: LD_INT 0
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: LD_INT 2
43474: NEG
43475: PUSH
43476: LD_INT 1
43478: NEG
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: LD_INT 2
43486: NEG
43487: PUSH
43488: LD_INT 2
43490: NEG
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: LIST
43500: LIST
43501: LIST
43502: LIST
43503: LIST
43504: LIST
43505: LIST
43506: LIST
43507: LIST
43508: LIST
43509: LIST
43510: LIST
43511: LIST
43512: LIST
43513: LIST
43514: LIST
43515: LIST
43516: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43517: LD_ADDR_VAR 0 22
43521: PUSH
43522: LD_INT 0
43524: PUSH
43525: LD_INT 0
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 0
43534: PUSH
43535: LD_INT 1
43537: NEG
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 1
43545: PUSH
43546: LD_INT 0
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: LD_INT 1
43555: PUSH
43556: LD_INT 1
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 0
43565: PUSH
43566: LD_INT 1
43568: PUSH
43569: EMPTY
43570: LIST
43571: LIST
43572: PUSH
43573: LD_INT 1
43575: NEG
43576: PUSH
43577: LD_INT 0
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: LD_INT 1
43586: NEG
43587: PUSH
43588: LD_INT 1
43590: NEG
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 1
43598: NEG
43599: PUSH
43600: LD_INT 2
43602: NEG
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: PUSH
43608: LD_INT 0
43610: PUSH
43611: LD_INT 2
43613: NEG
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 1
43621: PUSH
43622: LD_INT 1
43624: NEG
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: PUSH
43630: LD_INT 2
43632: PUSH
43633: LD_INT 0
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: PUSH
43640: LD_INT 2
43642: PUSH
43643: LD_INT 1
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: PUSH
43650: LD_INT 2
43652: PUSH
43653: LD_INT 2
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: PUSH
43660: LD_INT 1
43662: PUSH
43663: LD_INT 2
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: PUSH
43670: LD_INT 0
43672: PUSH
43673: LD_INT 2
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: LD_INT 1
43682: NEG
43683: PUSH
43684: LD_INT 1
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: PUSH
43691: LD_INT 2
43693: NEG
43694: PUSH
43695: LD_INT 0
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: LD_INT 2
43704: NEG
43705: PUSH
43706: LD_INT 1
43708: NEG
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PUSH
43714: LD_INT 2
43716: NEG
43717: PUSH
43718: LD_INT 2
43720: NEG
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: LIST
43733: LIST
43734: LIST
43735: LIST
43736: LIST
43737: LIST
43738: LIST
43739: LIST
43740: LIST
43741: LIST
43742: LIST
43743: LIST
43744: LIST
43745: LIST
43746: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43747: LD_ADDR_VAR 0 23
43751: PUSH
43752: LD_INT 0
43754: PUSH
43755: LD_INT 0
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: LD_INT 0
43764: PUSH
43765: LD_INT 1
43767: NEG
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 1
43775: PUSH
43776: LD_INT 0
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 1
43785: PUSH
43786: LD_INT 1
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PUSH
43793: LD_INT 0
43795: PUSH
43796: LD_INT 1
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: PUSH
43803: LD_INT 1
43805: NEG
43806: PUSH
43807: LD_INT 0
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: PUSH
43814: LD_INT 1
43816: NEG
43817: PUSH
43818: LD_INT 1
43820: NEG
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: PUSH
43826: LD_INT 1
43828: NEG
43829: PUSH
43830: LD_INT 2
43832: NEG
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 0
43840: PUSH
43841: LD_INT 2
43843: NEG
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: LD_INT 1
43851: PUSH
43852: LD_INT 1
43854: NEG
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: LD_INT 2
43862: PUSH
43863: LD_INT 0
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: PUSH
43870: LD_INT 2
43872: PUSH
43873: LD_INT 1
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: PUSH
43880: LD_INT 2
43882: PUSH
43883: LD_INT 2
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PUSH
43890: LD_INT 1
43892: PUSH
43893: LD_INT 2
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: PUSH
43900: LD_INT 0
43902: PUSH
43903: LD_INT 2
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: PUSH
43910: LD_INT 1
43912: NEG
43913: PUSH
43914: LD_INT 1
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PUSH
43921: LD_INT 2
43923: NEG
43924: PUSH
43925: LD_INT 0
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 2
43934: NEG
43935: PUSH
43936: LD_INT 1
43938: NEG
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 2
43946: NEG
43947: PUSH
43948: LD_INT 2
43950: NEG
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 2
43958: NEG
43959: PUSH
43960: LD_INT 3
43962: NEG
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: LD_INT 1
43970: NEG
43971: PUSH
43972: LD_INT 3
43974: NEG
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PUSH
43980: LD_INT 1
43982: PUSH
43983: LD_INT 2
43985: NEG
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: LD_INT 2
43993: PUSH
43994: LD_INT 1
43996: NEG
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: LIST
44008: LIST
44009: LIST
44010: LIST
44011: LIST
44012: LIST
44013: LIST
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44027: LD_ADDR_VAR 0 24
44031: PUSH
44032: LD_INT 0
44034: PUSH
44035: LD_INT 0
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: PUSH
44042: LD_INT 0
44044: PUSH
44045: LD_INT 1
44047: NEG
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 1
44055: PUSH
44056: LD_INT 0
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 1
44065: PUSH
44066: LD_INT 1
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: LD_INT 0
44075: PUSH
44076: LD_INT 1
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: PUSH
44083: LD_INT 1
44085: NEG
44086: PUSH
44087: LD_INT 0
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: LD_INT 1
44096: NEG
44097: PUSH
44098: LD_INT 1
44100: NEG
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 1
44108: NEG
44109: PUSH
44110: LD_INT 2
44112: NEG
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 0
44120: PUSH
44121: LD_INT 2
44123: NEG
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 1
44131: PUSH
44132: LD_INT 1
44134: NEG
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 2
44142: PUSH
44143: LD_INT 0
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 2
44152: PUSH
44153: LD_INT 1
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 2
44162: PUSH
44163: LD_INT 2
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 1
44172: PUSH
44173: LD_INT 2
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 0
44182: PUSH
44183: LD_INT 2
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: PUSH
44190: LD_INT 1
44192: NEG
44193: PUSH
44194: LD_INT 1
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 2
44203: NEG
44204: PUSH
44205: LD_INT 0
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 2
44214: NEG
44215: PUSH
44216: LD_INT 1
44218: NEG
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: LD_INT 2
44226: NEG
44227: PUSH
44228: LD_INT 2
44230: NEG
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: LD_INT 1
44238: PUSH
44239: LD_INT 2
44241: NEG
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: LD_INT 2
44249: PUSH
44250: LD_INT 1
44252: NEG
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: LD_INT 3
44260: PUSH
44261: LD_INT 1
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 3
44270: PUSH
44271: LD_INT 2
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: PUSH
44278: EMPTY
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: LIST
44289: LIST
44290: LIST
44291: LIST
44292: LIST
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: LIST
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44303: LD_ADDR_VAR 0 25
44307: PUSH
44308: LD_INT 0
44310: PUSH
44311: LD_INT 0
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PUSH
44318: LD_INT 0
44320: PUSH
44321: LD_INT 1
44323: NEG
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: LD_INT 1
44331: PUSH
44332: LD_INT 0
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: PUSH
44339: LD_INT 1
44341: PUSH
44342: LD_INT 1
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: LD_INT 0
44351: PUSH
44352: LD_INT 1
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: PUSH
44359: LD_INT 1
44361: NEG
44362: PUSH
44363: LD_INT 0
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: LD_INT 1
44372: NEG
44373: PUSH
44374: LD_INT 1
44376: NEG
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 1
44384: NEG
44385: PUSH
44386: LD_INT 2
44388: NEG
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: PUSH
44394: LD_INT 0
44396: PUSH
44397: LD_INT 2
44399: NEG
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: PUSH
44405: LD_INT 1
44407: PUSH
44408: LD_INT 1
44410: NEG
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: LD_INT 2
44418: PUSH
44419: LD_INT 0
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 2
44428: PUSH
44429: LD_INT 1
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 2
44438: PUSH
44439: LD_INT 2
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: PUSH
44446: LD_INT 1
44448: PUSH
44449: LD_INT 2
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PUSH
44456: LD_INT 0
44458: PUSH
44459: LD_INT 2
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 1
44468: NEG
44469: PUSH
44470: LD_INT 1
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: PUSH
44477: LD_INT 2
44479: NEG
44480: PUSH
44481: LD_INT 0
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: PUSH
44488: LD_INT 2
44490: NEG
44491: PUSH
44492: LD_INT 1
44494: NEG
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: LD_INT 2
44502: NEG
44503: PUSH
44504: LD_INT 2
44506: NEG
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 3
44514: PUSH
44515: LD_INT 1
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 3
44524: PUSH
44525: LD_INT 2
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_INT 2
44534: PUSH
44535: LD_INT 3
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: LD_INT 1
44544: PUSH
44545: LD_INT 3
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: LIST
44556: LIST
44557: LIST
44558: LIST
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: LIST
44572: LIST
44573: LIST
44574: LIST
44575: LIST
44576: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44577: LD_ADDR_VAR 0 26
44581: PUSH
44582: LD_INT 0
44584: PUSH
44585: LD_INT 0
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: LD_INT 0
44594: PUSH
44595: LD_INT 1
44597: NEG
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 1
44605: PUSH
44606: LD_INT 0
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 1
44615: PUSH
44616: LD_INT 1
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 0
44625: PUSH
44626: LD_INT 1
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 1
44635: NEG
44636: PUSH
44637: LD_INT 0
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: LD_INT 1
44646: NEG
44647: PUSH
44648: LD_INT 1
44650: NEG
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 1
44658: NEG
44659: PUSH
44660: LD_INT 2
44662: NEG
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 0
44670: PUSH
44671: LD_INT 2
44673: NEG
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: LD_INT 1
44681: PUSH
44682: LD_INT 1
44684: NEG
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: PUSH
44690: LD_INT 2
44692: PUSH
44693: LD_INT 0
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 2
44702: PUSH
44703: LD_INT 1
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 2
44712: PUSH
44713: LD_INT 2
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 1
44722: PUSH
44723: LD_INT 2
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 0
44732: PUSH
44733: LD_INT 2
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: LD_INT 1
44742: NEG
44743: PUSH
44744: LD_INT 1
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 2
44753: NEG
44754: PUSH
44755: LD_INT 0
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: PUSH
44762: LD_INT 2
44764: NEG
44765: PUSH
44766: LD_INT 1
44768: NEG
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: LD_INT 2
44776: NEG
44777: PUSH
44778: LD_INT 2
44780: NEG
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: PUSH
44786: LD_INT 2
44788: PUSH
44789: LD_INT 3
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 1
44798: PUSH
44799: LD_INT 3
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 1
44808: NEG
44809: PUSH
44810: LD_INT 2
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: LD_INT 2
44819: NEG
44820: PUSH
44821: LD_INT 1
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: LIST
44851: LIST
44852: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44853: LD_ADDR_VAR 0 27
44857: PUSH
44858: LD_INT 0
44860: PUSH
44861: LD_INT 0
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: PUSH
44868: LD_INT 0
44870: PUSH
44871: LD_INT 1
44873: NEG
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 1
44881: PUSH
44882: LD_INT 0
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 1
44891: PUSH
44892: LD_INT 1
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 0
44901: PUSH
44902: LD_INT 1
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 1
44911: NEG
44912: PUSH
44913: LD_INT 0
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 1
44922: NEG
44923: PUSH
44924: LD_INT 1
44926: NEG
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 1
44934: NEG
44935: PUSH
44936: LD_INT 2
44938: NEG
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: LD_INT 0
44946: PUSH
44947: LD_INT 2
44949: NEG
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 1
44957: PUSH
44958: LD_INT 1
44960: NEG
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 2
44968: PUSH
44969: LD_INT 0
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 2
44978: PUSH
44979: LD_INT 1
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 2
44988: PUSH
44989: LD_INT 2
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: LD_INT 1
44998: PUSH
44999: LD_INT 2
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: LD_INT 0
45008: PUSH
45009: LD_INT 2
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 1
45018: NEG
45019: PUSH
45020: LD_INT 1
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: PUSH
45027: LD_INT 2
45029: NEG
45030: PUSH
45031: LD_INT 0
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: LD_INT 2
45040: NEG
45041: PUSH
45042: LD_INT 1
45044: NEG
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: LD_INT 2
45052: NEG
45053: PUSH
45054: LD_INT 2
45056: NEG
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: LD_INT 1
45064: NEG
45065: PUSH
45066: LD_INT 2
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 2
45075: NEG
45076: PUSH
45077: LD_INT 1
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 3
45086: NEG
45087: PUSH
45088: LD_INT 1
45090: NEG
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 3
45098: NEG
45099: PUSH
45100: LD_INT 2
45102: NEG
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: LIST
45128: LIST
45129: LIST
45130: LIST
45131: LIST
45132: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45133: LD_ADDR_VAR 0 28
45137: PUSH
45138: LD_INT 0
45140: PUSH
45141: LD_INT 0
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 0
45150: PUSH
45151: LD_INT 1
45153: NEG
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 1
45161: PUSH
45162: LD_INT 0
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 1
45171: PUSH
45172: LD_INT 1
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 0
45181: PUSH
45182: LD_INT 1
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 1
45191: NEG
45192: PUSH
45193: LD_INT 0
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 1
45202: NEG
45203: PUSH
45204: LD_INT 1
45206: NEG
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: LD_INT 1
45214: NEG
45215: PUSH
45216: LD_INT 2
45218: NEG
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: LD_INT 0
45226: PUSH
45227: LD_INT 2
45229: NEG
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: LD_INT 1
45237: PUSH
45238: LD_INT 1
45240: NEG
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 2
45248: PUSH
45249: LD_INT 0
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 2
45258: PUSH
45259: LD_INT 1
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 2
45268: PUSH
45269: LD_INT 2
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 1
45278: PUSH
45279: LD_INT 2
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: LD_INT 0
45288: PUSH
45289: LD_INT 2
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: LD_INT 1
45298: NEG
45299: PUSH
45300: LD_INT 1
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 2
45309: NEG
45310: PUSH
45311: LD_INT 0
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: LD_INT 2
45320: NEG
45321: PUSH
45322: LD_INT 1
45324: NEG
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 2
45332: NEG
45333: PUSH
45334: LD_INT 2
45336: NEG
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PUSH
45342: LD_INT 2
45344: NEG
45345: PUSH
45346: LD_INT 3
45348: NEG
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 1
45356: NEG
45357: PUSH
45358: LD_INT 3
45360: NEG
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 3
45368: NEG
45369: PUSH
45370: LD_INT 1
45372: NEG
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 3
45380: NEG
45381: PUSH
45382: LD_INT 2
45384: NEG
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: LIST
45396: LIST
45397: LIST
45398: LIST
45399: LIST
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: LIST
45405: LIST
45406: LIST
45407: LIST
45408: LIST
45409: LIST
45410: LIST
45411: LIST
45412: LIST
45413: LIST
45414: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45415: LD_ADDR_VAR 0 29
45419: PUSH
45420: LD_INT 0
45422: PUSH
45423: LD_INT 0
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 0
45432: PUSH
45433: LD_INT 1
45435: NEG
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 1
45443: PUSH
45444: LD_INT 0
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 1
45453: PUSH
45454: LD_INT 1
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 0
45463: PUSH
45464: LD_INT 1
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: LD_INT 1
45473: NEG
45474: PUSH
45475: LD_INT 0
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: LD_INT 1
45484: NEG
45485: PUSH
45486: LD_INT 1
45488: NEG
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: PUSH
45494: LD_INT 1
45496: NEG
45497: PUSH
45498: LD_INT 2
45500: NEG
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 0
45508: PUSH
45509: LD_INT 2
45511: NEG
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 1
45519: PUSH
45520: LD_INT 1
45522: NEG
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 2
45530: PUSH
45531: LD_INT 0
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 2
45540: PUSH
45541: LD_INT 1
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: LD_INT 1
45550: PUSH
45551: LD_INT 2
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: PUSH
45558: LD_INT 0
45560: PUSH
45561: LD_INT 2
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: PUSH
45568: LD_INT 1
45570: NEG
45571: PUSH
45572: LD_INT 1
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 2
45581: NEG
45582: PUSH
45583: LD_INT 1
45585: NEG
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 2
45593: NEG
45594: PUSH
45595: LD_INT 2
45597: NEG
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: LD_INT 2
45605: NEG
45606: PUSH
45607: LD_INT 3
45609: NEG
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: PUSH
45615: LD_INT 2
45617: PUSH
45618: LD_INT 1
45620: NEG
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 3
45628: PUSH
45629: LD_INT 1
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 1
45638: PUSH
45639: LD_INT 3
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 1
45648: NEG
45649: PUSH
45650: LD_INT 2
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 3
45659: NEG
45660: PUSH
45661: LD_INT 2
45663: NEG
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: LIST
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45694: LD_ADDR_VAR 0 30
45698: PUSH
45699: LD_INT 0
45701: PUSH
45702: LD_INT 0
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 0
45711: PUSH
45712: LD_INT 1
45714: NEG
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: LD_INT 1
45722: PUSH
45723: LD_INT 0
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 1
45732: PUSH
45733: LD_INT 1
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: PUSH
45740: LD_INT 0
45742: PUSH
45743: LD_INT 1
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: LD_INT 1
45752: NEG
45753: PUSH
45754: LD_INT 0
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 1
45763: NEG
45764: PUSH
45765: LD_INT 1
45767: NEG
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 1
45775: NEG
45776: PUSH
45777: LD_INT 2
45779: NEG
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 0
45787: PUSH
45788: LD_INT 2
45790: NEG
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 1
45798: PUSH
45799: LD_INT 1
45801: NEG
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PUSH
45807: LD_INT 2
45809: PUSH
45810: LD_INT 0
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: LD_INT 2
45819: PUSH
45820: LD_INT 1
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: PUSH
45827: LD_INT 2
45829: PUSH
45830: LD_INT 2
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: LD_INT 1
45839: PUSH
45840: LD_INT 2
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: LD_INT 1
45849: NEG
45850: PUSH
45851: LD_INT 1
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 2
45860: NEG
45861: PUSH
45862: LD_INT 0
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 2
45871: NEG
45872: PUSH
45873: LD_INT 1
45875: NEG
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 1
45883: NEG
45884: PUSH
45885: LD_INT 3
45887: NEG
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 1
45895: PUSH
45896: LD_INT 2
45898: NEG
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 3
45906: PUSH
45907: LD_INT 2
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PUSH
45914: LD_INT 2
45916: PUSH
45917: LD_INT 3
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 2
45926: NEG
45927: PUSH
45928: LD_INT 1
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 3
45937: NEG
45938: PUSH
45939: LD_INT 1
45941: NEG
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45972: LD_ADDR_VAR 0 31
45976: PUSH
45977: LD_INT 0
45979: PUSH
45980: LD_INT 0
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 0
45989: PUSH
45990: LD_INT 1
45992: NEG
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 1
46000: PUSH
46001: LD_INT 0
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 1
46010: PUSH
46011: LD_INT 1
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 0
46020: PUSH
46021: LD_INT 1
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 1
46030: NEG
46031: PUSH
46032: LD_INT 0
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: LD_INT 1
46041: NEG
46042: PUSH
46043: LD_INT 1
46045: NEG
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 1
46053: NEG
46054: PUSH
46055: LD_INT 2
46057: NEG
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 1
46065: PUSH
46066: LD_INT 1
46068: NEG
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 2
46076: PUSH
46077: LD_INT 0
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 2
46086: PUSH
46087: LD_INT 1
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: PUSH
46094: LD_INT 2
46096: PUSH
46097: LD_INT 2
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: PUSH
46104: LD_INT 1
46106: PUSH
46107: LD_INT 2
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: LD_INT 0
46116: PUSH
46117: LD_INT 2
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: PUSH
46124: LD_INT 1
46126: NEG
46127: PUSH
46128: LD_INT 1
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 2
46137: NEG
46138: PUSH
46139: LD_INT 1
46141: NEG
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: LD_INT 2
46149: NEG
46150: PUSH
46151: LD_INT 2
46153: NEG
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 2
46161: NEG
46162: PUSH
46163: LD_INT 3
46165: NEG
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: LD_INT 2
46173: PUSH
46174: LD_INT 1
46176: NEG
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 3
46184: PUSH
46185: LD_INT 1
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 1
46194: PUSH
46195: LD_INT 3
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 1
46204: NEG
46205: PUSH
46206: LD_INT 2
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 3
46215: NEG
46216: PUSH
46217: LD_INT 2
46219: NEG
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: LIST
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: LIST
46248: LIST
46249: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46250: LD_ADDR_VAR 0 32
46254: PUSH
46255: LD_INT 0
46257: PUSH
46258: LD_INT 0
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 0
46267: PUSH
46268: LD_INT 1
46270: NEG
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 1
46278: PUSH
46279: LD_INT 0
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 1
46288: PUSH
46289: LD_INT 1
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 0
46298: PUSH
46299: LD_INT 1
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 1
46308: NEG
46309: PUSH
46310: LD_INT 0
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 1
46319: NEG
46320: PUSH
46321: LD_INT 1
46323: NEG
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 1
46331: NEG
46332: PUSH
46333: LD_INT 2
46335: NEG
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 0
46343: PUSH
46344: LD_INT 2
46346: NEG
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 1
46354: PUSH
46355: LD_INT 1
46357: NEG
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 2
46365: PUSH
46366: LD_INT 1
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: LD_INT 2
46375: PUSH
46376: LD_INT 2
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 1
46385: PUSH
46386: LD_INT 2
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 0
46395: PUSH
46396: LD_INT 2
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 1
46405: NEG
46406: PUSH
46407: LD_INT 1
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 2
46416: NEG
46417: PUSH
46418: LD_INT 0
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 2
46427: NEG
46428: PUSH
46429: LD_INT 1
46431: NEG
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 1
46439: NEG
46440: PUSH
46441: LD_INT 3
46443: NEG
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 1
46451: PUSH
46452: LD_INT 2
46454: NEG
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 3
46462: PUSH
46463: LD_INT 2
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 2
46472: PUSH
46473: LD_INT 3
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 2
46482: NEG
46483: PUSH
46484: LD_INT 1
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 3
46493: NEG
46494: PUSH
46495: LD_INT 1
46497: NEG
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46528: LD_ADDR_VAR 0 33
46532: PUSH
46533: LD_INT 0
46535: PUSH
46536: LD_INT 0
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 0
46545: PUSH
46546: LD_INT 1
46548: NEG
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 1
46556: PUSH
46557: LD_INT 0
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 1
46566: PUSH
46567: LD_INT 1
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 0
46576: PUSH
46577: LD_INT 1
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 1
46586: NEG
46587: PUSH
46588: LD_INT 0
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 1
46597: NEG
46598: PUSH
46599: LD_INT 1
46601: NEG
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 1
46609: NEG
46610: PUSH
46611: LD_INT 2
46613: NEG
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: PUSH
46619: LD_INT 1
46621: PUSH
46622: LD_INT 1
46624: NEG
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 2
46632: PUSH
46633: LD_INT 0
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 2
46642: PUSH
46643: LD_INT 1
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 1
46652: PUSH
46653: LD_INT 2
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 0
46662: PUSH
46663: LD_INT 2
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 1
46672: NEG
46673: PUSH
46674: LD_INT 1
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: PUSH
46681: LD_INT 2
46683: NEG
46684: PUSH
46685: LD_INT 0
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: LD_INT 2
46694: NEG
46695: PUSH
46696: LD_INT 1
46698: NEG
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 2
46706: NEG
46707: PUSH
46708: LD_INT 2
46710: NEG
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 2
46718: NEG
46719: PUSH
46720: LD_INT 3
46722: NEG
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 2
46730: PUSH
46731: LD_INT 1
46733: NEG
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 3
46741: PUSH
46742: LD_INT 1
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 1
46751: PUSH
46752: LD_INT 3
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 1
46761: NEG
46762: PUSH
46763: LD_INT 2
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 3
46772: NEG
46773: PUSH
46774: LD_INT 2
46776: NEG
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46807: LD_ADDR_VAR 0 34
46811: PUSH
46812: LD_INT 0
46814: PUSH
46815: LD_INT 0
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 0
46824: PUSH
46825: LD_INT 1
46827: NEG
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 1
46835: PUSH
46836: LD_INT 0
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 1
46845: PUSH
46846: LD_INT 1
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 0
46855: PUSH
46856: LD_INT 1
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 1
46865: NEG
46866: PUSH
46867: LD_INT 0
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: PUSH
46874: LD_INT 1
46876: NEG
46877: PUSH
46878: LD_INT 1
46880: NEG
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 1
46888: NEG
46889: PUSH
46890: LD_INT 2
46892: NEG
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 0
46900: PUSH
46901: LD_INT 2
46903: NEG
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 1
46911: PUSH
46912: LD_INT 1
46914: NEG
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 2
46922: PUSH
46923: LD_INT 1
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 2
46932: PUSH
46933: LD_INT 2
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 1
46942: PUSH
46943: LD_INT 2
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 1
46952: NEG
46953: PUSH
46954: LD_INT 1
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 2
46963: NEG
46964: PUSH
46965: LD_INT 0
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 2
46974: NEG
46975: PUSH
46976: LD_INT 1
46978: NEG
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 2
46986: NEG
46987: PUSH
46988: LD_INT 2
46990: NEG
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 1
46998: NEG
46999: PUSH
47000: LD_INT 3
47002: NEG
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 1
47010: PUSH
47011: LD_INT 2
47013: NEG
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 3
47021: PUSH
47022: LD_INT 2
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: LD_INT 2
47031: PUSH
47032: LD_INT 3
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 2
47041: NEG
47042: PUSH
47043: LD_INT 1
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 3
47052: NEG
47053: PUSH
47054: LD_INT 1
47056: NEG
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47087: LD_ADDR_VAR 0 35
47091: PUSH
47092: LD_INT 0
47094: PUSH
47095: LD_INT 0
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 0
47104: PUSH
47105: LD_INT 1
47107: NEG
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 1
47115: PUSH
47116: LD_INT 0
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 1
47125: PUSH
47126: LD_INT 1
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 0
47135: PUSH
47136: LD_INT 1
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 1
47145: NEG
47146: PUSH
47147: LD_INT 0
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 1
47156: NEG
47157: PUSH
47158: LD_INT 1
47160: NEG
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 2
47168: PUSH
47169: LD_INT 1
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 2
47178: NEG
47179: PUSH
47180: LD_INT 1
47182: NEG
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: LIST
47192: LIST
47193: LIST
47194: LIST
47195: LIST
47196: LIST
47197: LIST
47198: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47199: LD_ADDR_VAR 0 36
47203: PUSH
47204: LD_INT 0
47206: PUSH
47207: LD_INT 0
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 0
47216: PUSH
47217: LD_INT 1
47219: NEG
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 1
47227: PUSH
47228: LD_INT 0
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 1
47237: PUSH
47238: LD_INT 1
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 0
47247: PUSH
47248: LD_INT 1
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 1
47257: NEG
47258: PUSH
47259: LD_INT 0
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 1
47268: NEG
47269: PUSH
47270: LD_INT 1
47272: NEG
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 1
47280: NEG
47281: PUSH
47282: LD_INT 2
47284: NEG
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 1
47292: PUSH
47293: LD_INT 2
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47311: LD_ADDR_VAR 0 37
47315: PUSH
47316: LD_INT 0
47318: PUSH
47319: LD_INT 0
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 0
47328: PUSH
47329: LD_INT 1
47331: NEG
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: LD_INT 1
47339: PUSH
47340: LD_INT 0
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 1
47349: PUSH
47350: LD_INT 1
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 0
47359: PUSH
47360: LD_INT 1
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 1
47369: NEG
47370: PUSH
47371: LD_INT 0
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 1
47380: NEG
47381: PUSH
47382: LD_INT 1
47384: NEG
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 1
47392: PUSH
47393: LD_INT 1
47395: NEG
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 1
47403: NEG
47404: PUSH
47405: LD_INT 1
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47423: LD_ADDR_VAR 0 38
47427: PUSH
47428: LD_INT 0
47430: PUSH
47431: LD_INT 0
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 0
47440: PUSH
47441: LD_INT 1
47443: NEG
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 1
47451: PUSH
47452: LD_INT 0
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 1
47461: PUSH
47462: LD_INT 1
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: LD_INT 0
47471: PUSH
47472: LD_INT 1
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 1
47481: NEG
47482: PUSH
47483: LD_INT 0
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 1
47492: NEG
47493: PUSH
47494: LD_INT 1
47496: NEG
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 2
47504: PUSH
47505: LD_INT 1
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: LD_INT 2
47514: NEG
47515: PUSH
47516: LD_INT 1
47518: NEG
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47535: LD_ADDR_VAR 0 39
47539: PUSH
47540: LD_INT 0
47542: PUSH
47543: LD_INT 0
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 0
47552: PUSH
47553: LD_INT 1
47555: NEG
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 1
47563: PUSH
47564: LD_INT 0
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 1
47573: PUSH
47574: LD_INT 1
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 0
47583: PUSH
47584: LD_INT 1
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 1
47593: NEG
47594: PUSH
47595: LD_INT 0
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 1
47604: NEG
47605: PUSH
47606: LD_INT 1
47608: NEG
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 1
47616: NEG
47617: PUSH
47618: LD_INT 2
47620: NEG
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 1
47628: PUSH
47629: LD_INT 2
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47647: LD_ADDR_VAR 0 40
47651: PUSH
47652: LD_INT 0
47654: PUSH
47655: LD_INT 0
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 0
47664: PUSH
47665: LD_INT 1
47667: NEG
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 1
47675: PUSH
47676: LD_INT 0
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 1
47685: PUSH
47686: LD_INT 1
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 0
47695: PUSH
47696: LD_INT 1
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 1
47705: NEG
47706: PUSH
47707: LD_INT 0
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 1
47716: NEG
47717: PUSH
47718: LD_INT 1
47720: NEG
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 1
47728: PUSH
47729: LD_INT 1
47731: NEG
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 1
47739: NEG
47740: PUSH
47741: LD_INT 1
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47759: LD_ADDR_VAR 0 41
47763: PUSH
47764: LD_INT 0
47766: PUSH
47767: LD_INT 0
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 0
47776: PUSH
47777: LD_INT 1
47779: NEG
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 1
47787: PUSH
47788: LD_INT 0
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 1
47797: PUSH
47798: LD_INT 1
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: LD_INT 0
47807: PUSH
47808: LD_INT 1
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 1
47817: NEG
47818: PUSH
47819: LD_INT 0
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 1
47828: NEG
47829: PUSH
47830: LD_INT 1
47832: NEG
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 1
47840: NEG
47841: PUSH
47842: LD_INT 2
47844: NEG
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 1
47852: PUSH
47853: LD_INT 1
47855: NEG
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 2
47863: PUSH
47864: LD_INT 0
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 2
47873: PUSH
47874: LD_INT 1
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 2
47883: PUSH
47884: LD_INT 2
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 1
47893: PUSH
47894: LD_INT 2
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 1
47903: NEG
47904: PUSH
47905: LD_INT 1
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 2
47914: NEG
47915: PUSH
47916: LD_INT 0
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 2
47925: NEG
47926: PUSH
47927: LD_INT 1
47929: NEG
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 2
47937: NEG
47938: PUSH
47939: LD_INT 2
47941: NEG
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 2
47949: NEG
47950: PUSH
47951: LD_INT 3
47953: NEG
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 2
47961: PUSH
47962: LD_INT 1
47964: NEG
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 3
47972: PUSH
47973: LD_INT 0
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: LD_INT 3
47982: PUSH
47983: LD_INT 1
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 3
47992: PUSH
47993: LD_INT 2
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 3
48002: PUSH
48003: LD_INT 3
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 2
48012: PUSH
48013: LD_INT 3
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 2
48022: NEG
48023: PUSH
48024: LD_INT 1
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: LD_INT 3
48033: NEG
48034: PUSH
48035: LD_INT 0
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 3
48044: NEG
48045: PUSH
48046: LD_INT 1
48048: NEG
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 3
48056: NEG
48057: PUSH
48058: LD_INT 2
48060: NEG
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 3
48068: NEG
48069: PUSH
48070: LD_INT 3
48072: NEG
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: LIST
48093: LIST
48094: LIST
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: LIST
48108: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48109: LD_ADDR_VAR 0 42
48113: PUSH
48114: LD_INT 0
48116: PUSH
48117: LD_INT 0
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: LD_INT 0
48126: PUSH
48127: LD_INT 1
48129: NEG
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: PUSH
48135: LD_INT 1
48137: PUSH
48138: LD_INT 0
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 1
48147: PUSH
48148: LD_INT 1
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 0
48157: PUSH
48158: LD_INT 1
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 1
48167: NEG
48168: PUSH
48169: LD_INT 0
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: PUSH
48176: LD_INT 1
48178: NEG
48179: PUSH
48180: LD_INT 1
48182: NEG
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 1
48190: NEG
48191: PUSH
48192: LD_INT 2
48194: NEG
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 0
48202: PUSH
48203: LD_INT 2
48205: NEG
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: LD_INT 1
48213: PUSH
48214: LD_INT 1
48216: NEG
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 2
48224: PUSH
48225: LD_INT 1
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 2
48234: PUSH
48235: LD_INT 2
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 1
48244: PUSH
48245: LD_INT 2
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 0
48254: PUSH
48255: LD_INT 2
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 1
48264: NEG
48265: PUSH
48266: LD_INT 1
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 2
48275: NEG
48276: PUSH
48277: LD_INT 1
48279: NEG
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: LD_INT 2
48287: NEG
48288: PUSH
48289: LD_INT 2
48291: NEG
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PUSH
48297: LD_INT 2
48299: NEG
48300: PUSH
48301: LD_INT 3
48303: NEG
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: LD_INT 1
48311: NEG
48312: PUSH
48313: LD_INT 3
48315: NEG
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 0
48323: PUSH
48324: LD_INT 3
48326: NEG
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 1
48334: PUSH
48335: LD_INT 2
48337: NEG
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 3
48345: PUSH
48346: LD_INT 2
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 3
48355: PUSH
48356: LD_INT 3
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 2
48365: PUSH
48366: LD_INT 3
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: PUSH
48373: LD_INT 1
48375: PUSH
48376: LD_INT 3
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 0
48385: PUSH
48386: LD_INT 3
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 1
48395: NEG
48396: PUSH
48397: LD_INT 2
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: LD_INT 3
48406: NEG
48407: PUSH
48408: LD_INT 2
48410: NEG
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: LD_INT 3
48418: NEG
48419: PUSH
48420: LD_INT 3
48422: NEG
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48459: LD_ADDR_VAR 0 43
48463: PUSH
48464: LD_INT 0
48466: PUSH
48467: LD_INT 0
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 0
48476: PUSH
48477: LD_INT 1
48479: NEG
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 1
48487: PUSH
48488: LD_INT 0
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 1
48497: PUSH
48498: LD_INT 1
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 0
48507: PUSH
48508: LD_INT 1
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: LD_INT 1
48517: NEG
48518: PUSH
48519: LD_INT 0
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: PUSH
48526: LD_INT 1
48528: NEG
48529: PUSH
48530: LD_INT 1
48532: NEG
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 1
48540: NEG
48541: PUSH
48542: LD_INT 2
48544: NEG
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: LD_INT 0
48552: PUSH
48553: LD_INT 2
48555: NEG
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: LD_INT 1
48563: PUSH
48564: LD_INT 1
48566: NEG
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 2
48574: PUSH
48575: LD_INT 0
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 2
48584: PUSH
48585: LD_INT 1
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 1
48594: PUSH
48595: LD_INT 2
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 0
48604: PUSH
48605: LD_INT 2
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 1
48614: NEG
48615: PUSH
48616: LD_INT 1
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 2
48625: NEG
48626: PUSH
48627: LD_INT 0
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 2
48636: NEG
48637: PUSH
48638: LD_INT 1
48640: NEG
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 1
48648: NEG
48649: PUSH
48650: LD_INT 3
48652: NEG
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 0
48660: PUSH
48661: LD_INT 3
48663: NEG
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 1
48671: PUSH
48672: LD_INT 2
48674: NEG
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 2
48682: PUSH
48683: LD_INT 1
48685: NEG
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: LD_INT 3
48693: PUSH
48694: LD_INT 0
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 3
48703: PUSH
48704: LD_INT 1
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 1
48713: PUSH
48714: LD_INT 3
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 0
48723: PUSH
48724: LD_INT 3
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 1
48733: NEG
48734: PUSH
48735: LD_INT 2
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 2
48744: NEG
48745: PUSH
48746: LD_INT 1
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 3
48755: NEG
48756: PUSH
48757: LD_INT 0
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 3
48766: NEG
48767: PUSH
48768: LD_INT 1
48770: NEG
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: LIST
48786: LIST
48787: LIST
48788: LIST
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48807: LD_ADDR_VAR 0 44
48811: PUSH
48812: LD_INT 0
48814: PUSH
48815: LD_INT 0
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 0
48824: PUSH
48825: LD_INT 1
48827: NEG
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 1
48835: PUSH
48836: LD_INT 0
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 1
48845: PUSH
48846: LD_INT 1
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 0
48855: PUSH
48856: LD_INT 1
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 1
48865: NEG
48866: PUSH
48867: LD_INT 0
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 1
48876: NEG
48877: PUSH
48878: LD_INT 1
48880: NEG
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 1
48888: NEG
48889: PUSH
48890: LD_INT 2
48892: NEG
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 1
48900: PUSH
48901: LD_INT 1
48903: NEG
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 2
48911: PUSH
48912: LD_INT 0
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 2
48921: PUSH
48922: LD_INT 1
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 2
48931: PUSH
48932: LD_INT 2
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 1
48941: PUSH
48942: LD_INT 2
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 1
48951: NEG
48952: PUSH
48953: LD_INT 1
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 2
48962: NEG
48963: PUSH
48964: LD_INT 0
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 2
48973: NEG
48974: PUSH
48975: LD_INT 1
48977: NEG
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 2
48985: NEG
48986: PUSH
48987: LD_INT 2
48989: NEG
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 2
48997: NEG
48998: PUSH
48999: LD_INT 3
49001: NEG
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 2
49009: PUSH
49010: LD_INT 1
49012: NEG
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 3
49020: PUSH
49021: LD_INT 0
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 3
49030: PUSH
49031: LD_INT 1
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 3
49040: PUSH
49041: LD_INT 2
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 3
49050: PUSH
49051: LD_INT 3
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 2
49060: PUSH
49061: LD_INT 3
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 2
49070: NEG
49071: PUSH
49072: LD_INT 1
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 3
49081: NEG
49082: PUSH
49083: LD_INT 0
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 3
49092: NEG
49093: PUSH
49094: LD_INT 1
49096: NEG
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 3
49104: NEG
49105: PUSH
49106: LD_INT 2
49108: NEG
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: PUSH
49114: LD_INT 3
49116: NEG
49117: PUSH
49118: LD_INT 3
49120: NEG
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49157: LD_ADDR_VAR 0 45
49161: PUSH
49162: LD_INT 0
49164: PUSH
49165: LD_INT 0
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 0
49174: PUSH
49175: LD_INT 1
49177: NEG
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 1
49185: PUSH
49186: LD_INT 0
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 1
49195: PUSH
49196: LD_INT 1
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 0
49205: PUSH
49206: LD_INT 1
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 1
49215: NEG
49216: PUSH
49217: LD_INT 0
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 1
49226: NEG
49227: PUSH
49228: LD_INT 1
49230: NEG
49231: PUSH
49232: EMPTY
49233: LIST
49234: LIST
49235: PUSH
49236: LD_INT 1
49238: NEG
49239: PUSH
49240: LD_INT 2
49242: NEG
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 0
49250: PUSH
49251: LD_INT 2
49253: NEG
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: LD_INT 1
49261: PUSH
49262: LD_INT 1
49264: NEG
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: LD_INT 2
49272: PUSH
49273: LD_INT 1
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: LD_INT 2
49282: PUSH
49283: LD_INT 2
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: PUSH
49290: LD_INT 1
49292: PUSH
49293: LD_INT 2
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 0
49302: PUSH
49303: LD_INT 2
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 1
49312: NEG
49313: PUSH
49314: LD_INT 1
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 2
49323: NEG
49324: PUSH
49325: LD_INT 1
49327: NEG
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: LD_INT 2
49335: NEG
49336: PUSH
49337: LD_INT 2
49339: NEG
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 2
49347: NEG
49348: PUSH
49349: LD_INT 3
49351: NEG
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 1
49359: NEG
49360: PUSH
49361: LD_INT 3
49363: NEG
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 0
49371: PUSH
49372: LD_INT 3
49374: NEG
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 1
49382: PUSH
49383: LD_INT 2
49385: NEG
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 3
49393: PUSH
49394: LD_INT 2
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 3
49403: PUSH
49404: LD_INT 3
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 2
49413: PUSH
49414: LD_INT 3
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: LD_INT 1
49423: PUSH
49424: LD_INT 3
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: LD_INT 0
49433: PUSH
49434: LD_INT 3
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 1
49443: NEG
49444: PUSH
49445: LD_INT 2
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 3
49454: NEG
49455: PUSH
49456: LD_INT 2
49458: NEG
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 3
49466: NEG
49467: PUSH
49468: LD_INT 3
49470: NEG
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: LIST
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49507: LD_ADDR_VAR 0 46
49511: PUSH
49512: LD_INT 0
49514: PUSH
49515: LD_INT 0
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 0
49524: PUSH
49525: LD_INT 1
49527: NEG
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 1
49535: PUSH
49536: LD_INT 0
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 1
49545: PUSH
49546: LD_INT 1
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 0
49555: PUSH
49556: LD_INT 1
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 1
49565: NEG
49566: PUSH
49567: LD_INT 0
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 1
49576: NEG
49577: PUSH
49578: LD_INT 1
49580: NEG
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 1
49588: NEG
49589: PUSH
49590: LD_INT 2
49592: NEG
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: LD_INT 0
49600: PUSH
49601: LD_INT 2
49603: NEG
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 1
49611: PUSH
49612: LD_INT 1
49614: NEG
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 2
49622: PUSH
49623: LD_INT 0
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 2
49632: PUSH
49633: LD_INT 1
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 1
49642: PUSH
49643: LD_INT 2
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 0
49652: PUSH
49653: LD_INT 2
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 1
49662: NEG
49663: PUSH
49664: LD_INT 1
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: LD_INT 2
49673: NEG
49674: PUSH
49675: LD_INT 0
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 2
49684: NEG
49685: PUSH
49686: LD_INT 1
49688: NEG
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 1
49696: NEG
49697: PUSH
49698: LD_INT 3
49700: NEG
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 0
49708: PUSH
49709: LD_INT 3
49711: NEG
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: LD_INT 1
49719: PUSH
49720: LD_INT 2
49722: NEG
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 2
49730: PUSH
49731: LD_INT 1
49733: NEG
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 3
49741: PUSH
49742: LD_INT 0
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 3
49751: PUSH
49752: LD_INT 1
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 1
49761: PUSH
49762: LD_INT 3
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 0
49771: PUSH
49772: LD_INT 3
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 1
49781: NEG
49782: PUSH
49783: LD_INT 2
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 2
49792: NEG
49793: PUSH
49794: LD_INT 1
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 3
49803: NEG
49804: PUSH
49805: LD_INT 0
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 3
49814: NEG
49815: PUSH
49816: LD_INT 1
49818: NEG
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: LIST
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49855: LD_ADDR_VAR 0 47
49859: PUSH
49860: LD_INT 0
49862: PUSH
49863: LD_INT 0
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 0
49872: PUSH
49873: LD_INT 1
49875: NEG
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 1
49883: PUSH
49884: LD_INT 0
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 1
49893: PUSH
49894: LD_INT 1
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 0
49903: PUSH
49904: LD_INT 1
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 1
49913: NEG
49914: PUSH
49915: LD_INT 0
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: LD_INT 1
49924: NEG
49925: PUSH
49926: LD_INT 1
49928: NEG
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_INT 1
49936: NEG
49937: PUSH
49938: LD_INT 2
49940: NEG
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 0
49948: PUSH
49949: LD_INT 2
49951: NEG
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: LD_INT 1
49959: PUSH
49960: LD_INT 1
49962: NEG
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 2
49970: NEG
49971: PUSH
49972: LD_INT 1
49974: NEG
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 2
49982: NEG
49983: PUSH
49984: LD_INT 2
49986: NEG
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50006: LD_ADDR_VAR 0 48
50010: PUSH
50011: LD_INT 0
50013: PUSH
50014: LD_INT 0
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 0
50023: PUSH
50024: LD_INT 1
50026: NEG
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 1
50034: PUSH
50035: LD_INT 0
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 1
50044: PUSH
50045: LD_INT 1
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 0
50054: PUSH
50055: LD_INT 1
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 1
50064: NEG
50065: PUSH
50066: LD_INT 0
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 1
50075: NEG
50076: PUSH
50077: LD_INT 1
50079: NEG
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 1
50087: NEG
50088: PUSH
50089: LD_INT 2
50091: NEG
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 0
50099: PUSH
50100: LD_INT 2
50102: NEG
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 1
50110: PUSH
50111: LD_INT 1
50113: NEG
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 2
50121: PUSH
50122: LD_INT 0
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 2
50131: PUSH
50132: LD_INT 1
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50153: LD_ADDR_VAR 0 49
50157: PUSH
50158: LD_INT 0
50160: PUSH
50161: LD_INT 0
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: LD_INT 0
50170: PUSH
50171: LD_INT 1
50173: NEG
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 1
50181: PUSH
50182: LD_INT 0
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 1
50191: PUSH
50192: LD_INT 1
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 0
50201: PUSH
50202: LD_INT 1
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 1
50211: NEG
50212: PUSH
50213: LD_INT 0
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 1
50222: NEG
50223: PUSH
50224: LD_INT 1
50226: NEG
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 1
50234: PUSH
50235: LD_INT 1
50237: NEG
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 2
50245: PUSH
50246: LD_INT 0
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 2
50255: PUSH
50256: LD_INT 1
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 2
50265: PUSH
50266: LD_INT 2
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: LD_INT 1
50275: PUSH
50276: LD_INT 2
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: LIST
50292: LIST
50293: LIST
50294: LIST
50295: LIST
50296: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50297: LD_ADDR_VAR 0 50
50301: PUSH
50302: LD_INT 0
50304: PUSH
50305: LD_INT 0
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 0
50314: PUSH
50315: LD_INT 1
50317: NEG
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 1
50325: PUSH
50326: LD_INT 0
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 1
50335: PUSH
50336: LD_INT 1
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 0
50345: PUSH
50346: LD_INT 1
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 1
50355: NEG
50356: PUSH
50357: LD_INT 0
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 1
50366: NEG
50367: PUSH
50368: LD_INT 1
50370: NEG
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 2
50378: PUSH
50379: LD_INT 1
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 2
50388: PUSH
50389: LD_INT 2
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 1
50398: PUSH
50399: LD_INT 2
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 0
50408: PUSH
50409: LD_INT 2
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: LD_INT 1
50418: NEG
50419: PUSH
50420: LD_INT 1
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50441: LD_ADDR_VAR 0 51
50445: PUSH
50446: LD_INT 0
50448: PUSH
50449: LD_INT 0
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 0
50458: PUSH
50459: LD_INT 1
50461: NEG
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 1
50469: PUSH
50470: LD_INT 0
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 1
50479: PUSH
50480: LD_INT 1
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 0
50489: PUSH
50490: LD_INT 1
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: LD_INT 1
50499: NEG
50500: PUSH
50501: LD_INT 0
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 1
50510: NEG
50511: PUSH
50512: LD_INT 1
50514: NEG
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 1
50522: PUSH
50523: LD_INT 2
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 0
50532: PUSH
50533: LD_INT 2
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 1
50542: NEG
50543: PUSH
50544: LD_INT 1
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 2
50553: NEG
50554: PUSH
50555: LD_INT 0
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 2
50564: NEG
50565: PUSH
50566: LD_INT 1
50568: NEG
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50588: LD_ADDR_VAR 0 52
50592: PUSH
50593: LD_INT 0
50595: PUSH
50596: LD_INT 0
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 0
50605: PUSH
50606: LD_INT 1
50608: NEG
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 1
50616: PUSH
50617: LD_INT 0
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 1
50626: PUSH
50627: LD_INT 1
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 0
50636: PUSH
50637: LD_INT 1
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 1
50646: NEG
50647: PUSH
50648: LD_INT 0
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 1
50657: NEG
50658: PUSH
50659: LD_INT 1
50661: NEG
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 1
50669: NEG
50670: PUSH
50671: LD_INT 2
50673: NEG
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 1
50681: NEG
50682: PUSH
50683: LD_INT 1
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 2
50692: NEG
50693: PUSH
50694: LD_INT 0
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 2
50703: NEG
50704: PUSH
50705: LD_INT 1
50707: NEG
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 2
50715: NEG
50716: PUSH
50717: LD_INT 2
50719: NEG
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50739: LD_ADDR_VAR 0 53
50743: PUSH
50744: LD_INT 0
50746: PUSH
50747: LD_INT 0
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 0
50756: PUSH
50757: LD_INT 1
50759: NEG
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 1
50767: PUSH
50768: LD_INT 0
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 1
50777: PUSH
50778: LD_INT 1
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 0
50787: PUSH
50788: LD_INT 1
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 1
50797: NEG
50798: PUSH
50799: LD_INT 0
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 1
50808: NEG
50809: PUSH
50810: LD_INT 1
50812: NEG
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 1
50820: NEG
50821: PUSH
50822: LD_INT 2
50824: NEG
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 0
50832: PUSH
50833: LD_INT 2
50835: NEG
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: LD_INT 1
50843: PUSH
50844: LD_INT 1
50846: NEG
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 2
50854: PUSH
50855: LD_INT 0
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 2
50864: PUSH
50865: LD_INT 1
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 2
50874: PUSH
50875: LD_INT 2
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 1
50884: PUSH
50885: LD_INT 2
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 0
50894: PUSH
50895: LD_INT 2
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 1
50904: NEG
50905: PUSH
50906: LD_INT 1
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: LD_INT 2
50915: NEG
50916: PUSH
50917: LD_INT 0
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 2
50926: NEG
50927: PUSH
50928: LD_INT 1
50930: NEG
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PUSH
50936: LD_INT 2
50938: NEG
50939: PUSH
50940: LD_INT 2
50942: NEG
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50969: LD_ADDR_VAR 0 54
50973: PUSH
50974: LD_INT 0
50976: PUSH
50977: LD_INT 0
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 0
50986: PUSH
50987: LD_INT 1
50989: NEG
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 1
50997: PUSH
50998: LD_INT 0
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 1
51007: PUSH
51008: LD_INT 1
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 0
51017: PUSH
51018: LD_INT 1
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 1
51027: NEG
51028: PUSH
51029: LD_INT 0
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 1
51038: NEG
51039: PUSH
51040: LD_INT 1
51042: NEG
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 1
51050: NEG
51051: PUSH
51052: LD_INT 2
51054: NEG
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 0
51062: PUSH
51063: LD_INT 2
51065: NEG
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 1
51073: PUSH
51074: LD_INT 1
51076: NEG
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 2
51084: PUSH
51085: LD_INT 0
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 2
51094: PUSH
51095: LD_INT 1
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 2
51104: PUSH
51105: LD_INT 2
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 1
51114: PUSH
51115: LD_INT 2
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 0
51124: PUSH
51125: LD_INT 2
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 1
51134: NEG
51135: PUSH
51136: LD_INT 1
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 2
51145: NEG
51146: PUSH
51147: LD_INT 0
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 2
51156: NEG
51157: PUSH
51158: LD_INT 1
51160: NEG
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 2
51168: NEG
51169: PUSH
51170: LD_INT 2
51172: NEG
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51199: LD_ADDR_VAR 0 55
51203: PUSH
51204: LD_INT 0
51206: PUSH
51207: LD_INT 0
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 0
51216: PUSH
51217: LD_INT 1
51219: NEG
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 1
51227: PUSH
51228: LD_INT 0
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 1
51237: PUSH
51238: LD_INT 1
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 0
51247: PUSH
51248: LD_INT 1
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: LD_INT 1
51257: NEG
51258: PUSH
51259: LD_INT 0
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 1
51268: NEG
51269: PUSH
51270: LD_INT 1
51272: NEG
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 1
51280: NEG
51281: PUSH
51282: LD_INT 2
51284: NEG
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 0
51292: PUSH
51293: LD_INT 2
51295: NEG
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 1
51303: PUSH
51304: LD_INT 1
51306: NEG
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 2
51314: PUSH
51315: LD_INT 0
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 2
51324: PUSH
51325: LD_INT 1
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 2
51334: PUSH
51335: LD_INT 2
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 1
51344: PUSH
51345: LD_INT 2
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 0
51354: PUSH
51355: LD_INT 2
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 1
51364: NEG
51365: PUSH
51366: LD_INT 1
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 2
51375: NEG
51376: PUSH
51377: LD_INT 0
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: LD_INT 2
51386: NEG
51387: PUSH
51388: LD_INT 1
51390: NEG
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 2
51398: NEG
51399: PUSH
51400: LD_INT 2
51402: NEG
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51429: LD_ADDR_VAR 0 56
51433: PUSH
51434: LD_INT 0
51436: PUSH
51437: LD_INT 0
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 0
51446: PUSH
51447: LD_INT 1
51449: NEG
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 1
51457: PUSH
51458: LD_INT 0
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 1
51467: PUSH
51468: LD_INT 1
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 0
51477: PUSH
51478: LD_INT 1
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 1
51487: NEG
51488: PUSH
51489: LD_INT 0
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 1
51498: NEG
51499: PUSH
51500: LD_INT 1
51502: NEG
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 1
51510: NEG
51511: PUSH
51512: LD_INT 2
51514: NEG
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 0
51522: PUSH
51523: LD_INT 2
51525: NEG
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 1
51533: PUSH
51534: LD_INT 1
51536: NEG
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 2
51544: PUSH
51545: LD_INT 0
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 2
51554: PUSH
51555: LD_INT 1
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 2
51564: PUSH
51565: LD_INT 2
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 1
51574: PUSH
51575: LD_INT 2
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 0
51584: PUSH
51585: LD_INT 2
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 1
51594: NEG
51595: PUSH
51596: LD_INT 1
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 2
51605: NEG
51606: PUSH
51607: LD_INT 0
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: LD_INT 2
51616: NEG
51617: PUSH
51618: LD_INT 1
51620: NEG
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 2
51628: NEG
51629: PUSH
51630: LD_INT 2
51632: NEG
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: LIST
51645: LIST
51646: LIST
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: LIST
51658: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51659: LD_ADDR_VAR 0 57
51663: PUSH
51664: LD_INT 0
51666: PUSH
51667: LD_INT 0
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 0
51676: PUSH
51677: LD_INT 1
51679: NEG
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 1
51687: PUSH
51688: LD_INT 0
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 1
51697: PUSH
51698: LD_INT 1
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 0
51707: PUSH
51708: LD_INT 1
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 1
51717: NEG
51718: PUSH
51719: LD_INT 0
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 1
51728: NEG
51729: PUSH
51730: LD_INT 1
51732: NEG
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 1
51740: NEG
51741: PUSH
51742: LD_INT 2
51744: NEG
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 0
51752: PUSH
51753: LD_INT 2
51755: NEG
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 1
51763: PUSH
51764: LD_INT 1
51766: NEG
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: LD_INT 2
51774: PUSH
51775: LD_INT 0
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 2
51784: PUSH
51785: LD_INT 1
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 2
51794: PUSH
51795: LD_INT 2
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 1
51804: PUSH
51805: LD_INT 2
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: PUSH
51812: LD_INT 0
51814: PUSH
51815: LD_INT 2
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 1
51824: NEG
51825: PUSH
51826: LD_INT 1
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 2
51835: NEG
51836: PUSH
51837: LD_INT 0
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 2
51846: NEG
51847: PUSH
51848: LD_INT 1
51850: NEG
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 2
51858: NEG
51859: PUSH
51860: LD_INT 2
51862: NEG
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51889: LD_ADDR_VAR 0 58
51893: PUSH
51894: LD_INT 0
51896: PUSH
51897: LD_INT 0
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 0
51906: PUSH
51907: LD_INT 1
51909: NEG
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 1
51917: PUSH
51918: LD_INT 0
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: LD_INT 1
51927: PUSH
51928: LD_INT 1
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 0
51937: PUSH
51938: LD_INT 1
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 1
51947: NEG
51948: PUSH
51949: LD_INT 0
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 1
51958: NEG
51959: PUSH
51960: LD_INT 1
51962: NEG
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 1
51970: NEG
51971: PUSH
51972: LD_INT 2
51974: NEG
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 0
51982: PUSH
51983: LD_INT 2
51985: NEG
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 1
51993: PUSH
51994: LD_INT 1
51996: NEG
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 2
52004: PUSH
52005: LD_INT 0
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 2
52014: PUSH
52015: LD_INT 1
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 2
52024: PUSH
52025: LD_INT 2
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 1
52034: PUSH
52035: LD_INT 2
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: LD_INT 0
52044: PUSH
52045: LD_INT 2
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 1
52054: NEG
52055: PUSH
52056: LD_INT 1
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 2
52065: NEG
52066: PUSH
52067: LD_INT 0
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 2
52076: NEG
52077: PUSH
52078: LD_INT 1
52080: NEG
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 2
52088: NEG
52089: PUSH
52090: LD_INT 2
52092: NEG
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52119: LD_ADDR_VAR 0 59
52123: PUSH
52124: LD_INT 0
52126: PUSH
52127: LD_INT 0
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 0
52136: PUSH
52137: LD_INT 1
52139: NEG
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 1
52147: PUSH
52148: LD_INT 0
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 1
52157: PUSH
52158: LD_INT 1
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 0
52167: PUSH
52168: LD_INT 1
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 1
52177: NEG
52178: PUSH
52179: LD_INT 0
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 1
52188: NEG
52189: PUSH
52190: LD_INT 1
52192: NEG
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52207: LD_ADDR_VAR 0 60
52211: PUSH
52212: LD_INT 0
52214: PUSH
52215: LD_INT 0
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 0
52224: PUSH
52225: LD_INT 1
52227: NEG
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 1
52235: PUSH
52236: LD_INT 0
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 1
52245: PUSH
52246: LD_INT 1
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 0
52255: PUSH
52256: LD_INT 1
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 1
52265: NEG
52266: PUSH
52267: LD_INT 0
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 1
52276: NEG
52277: PUSH
52278: LD_INT 1
52280: NEG
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52295: LD_ADDR_VAR 0 61
52299: PUSH
52300: LD_INT 0
52302: PUSH
52303: LD_INT 0
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 0
52312: PUSH
52313: LD_INT 1
52315: NEG
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 1
52323: PUSH
52324: LD_INT 0
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 1
52333: PUSH
52334: LD_INT 1
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: LD_INT 0
52343: PUSH
52344: LD_INT 1
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 1
52353: NEG
52354: PUSH
52355: LD_INT 0
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 1
52364: NEG
52365: PUSH
52366: LD_INT 1
52368: NEG
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: LIST
52378: LIST
52379: LIST
52380: LIST
52381: LIST
52382: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52383: LD_ADDR_VAR 0 62
52387: PUSH
52388: LD_INT 0
52390: PUSH
52391: LD_INT 0
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 0
52400: PUSH
52401: LD_INT 1
52403: NEG
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: LD_INT 1
52411: PUSH
52412: LD_INT 0
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 1
52421: PUSH
52422: LD_INT 1
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 0
52431: PUSH
52432: LD_INT 1
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 1
52441: NEG
52442: PUSH
52443: LD_INT 0
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: LD_INT 1
52452: NEG
52453: PUSH
52454: LD_INT 1
52456: NEG
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52471: LD_ADDR_VAR 0 63
52475: PUSH
52476: LD_INT 0
52478: PUSH
52479: LD_INT 0
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 0
52488: PUSH
52489: LD_INT 1
52491: NEG
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 1
52499: PUSH
52500: LD_INT 0
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 1
52509: PUSH
52510: LD_INT 1
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 0
52519: PUSH
52520: LD_INT 1
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PUSH
52527: LD_INT 1
52529: NEG
52530: PUSH
52531: LD_INT 0
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 1
52540: NEG
52541: PUSH
52542: LD_INT 1
52544: NEG
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52559: LD_ADDR_VAR 0 64
52563: PUSH
52564: LD_INT 0
52566: PUSH
52567: LD_INT 0
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 0
52576: PUSH
52577: LD_INT 1
52579: NEG
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 1
52587: PUSH
52588: LD_INT 0
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 1
52597: PUSH
52598: LD_INT 1
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 0
52607: PUSH
52608: LD_INT 1
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 1
52617: NEG
52618: PUSH
52619: LD_INT 0
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 1
52628: NEG
52629: PUSH
52630: LD_INT 1
52632: NEG
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: ST_TO_ADDR
// end ; 1 :
52647: GO 58544
52649: LD_INT 1
52651: DOUBLE
52652: EQUAL
52653: IFTRUE 52657
52655: GO 55280
52657: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52658: LD_ADDR_VAR 0 11
52662: PUSH
52663: LD_INT 1
52665: NEG
52666: PUSH
52667: LD_INT 3
52669: NEG
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: LD_INT 0
52677: PUSH
52678: LD_INT 3
52680: NEG
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 1
52688: PUSH
52689: LD_INT 2
52691: NEG
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: LIST
52701: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52702: LD_ADDR_VAR 0 12
52706: PUSH
52707: LD_INT 2
52709: PUSH
52710: LD_INT 1
52712: NEG
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 3
52720: PUSH
52721: LD_INT 0
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 3
52730: PUSH
52731: LD_INT 1
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: LIST
52742: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52743: LD_ADDR_VAR 0 13
52747: PUSH
52748: LD_INT 3
52750: PUSH
52751: LD_INT 2
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 3
52760: PUSH
52761: LD_INT 3
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 2
52770: PUSH
52771: LD_INT 3
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: LIST
52782: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52783: LD_ADDR_VAR 0 14
52787: PUSH
52788: LD_INT 1
52790: PUSH
52791: LD_INT 3
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 0
52800: PUSH
52801: LD_INT 3
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 1
52810: NEG
52811: PUSH
52812: LD_INT 2
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: LIST
52823: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52824: LD_ADDR_VAR 0 15
52828: PUSH
52829: LD_INT 2
52831: NEG
52832: PUSH
52833: LD_INT 1
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 3
52842: NEG
52843: PUSH
52844: LD_INT 0
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 3
52853: NEG
52854: PUSH
52855: LD_INT 1
52857: NEG
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: LIST
52867: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52868: LD_ADDR_VAR 0 16
52872: PUSH
52873: LD_INT 2
52875: NEG
52876: PUSH
52877: LD_INT 3
52879: NEG
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 3
52887: NEG
52888: PUSH
52889: LD_INT 2
52891: NEG
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 3
52899: NEG
52900: PUSH
52901: LD_INT 3
52903: NEG
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: LIST
52913: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52914: LD_ADDR_VAR 0 17
52918: PUSH
52919: LD_INT 1
52921: NEG
52922: PUSH
52923: LD_INT 3
52925: NEG
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: LD_INT 0
52933: PUSH
52934: LD_INT 3
52936: NEG
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 1
52944: PUSH
52945: LD_INT 2
52947: NEG
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: LIST
52957: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52958: LD_ADDR_VAR 0 18
52962: PUSH
52963: LD_INT 2
52965: PUSH
52966: LD_INT 1
52968: NEG
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 3
52976: PUSH
52977: LD_INT 0
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 3
52986: PUSH
52987: LD_INT 1
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: LIST
52998: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52999: LD_ADDR_VAR 0 19
53003: PUSH
53004: LD_INT 3
53006: PUSH
53007: LD_INT 2
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 3
53016: PUSH
53017: LD_INT 3
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 2
53026: PUSH
53027: LD_INT 3
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: LIST
53038: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53039: LD_ADDR_VAR 0 20
53043: PUSH
53044: LD_INT 1
53046: PUSH
53047: LD_INT 3
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: LD_INT 0
53056: PUSH
53057: LD_INT 3
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: PUSH
53064: LD_INT 1
53066: NEG
53067: PUSH
53068: LD_INT 2
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: LIST
53079: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53080: LD_ADDR_VAR 0 21
53084: PUSH
53085: LD_INT 2
53087: NEG
53088: PUSH
53089: LD_INT 1
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 3
53098: NEG
53099: PUSH
53100: LD_INT 0
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 3
53109: NEG
53110: PUSH
53111: LD_INT 1
53113: NEG
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: LIST
53123: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53124: LD_ADDR_VAR 0 22
53128: PUSH
53129: LD_INT 2
53131: NEG
53132: PUSH
53133: LD_INT 3
53135: NEG
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_INT 3
53143: NEG
53144: PUSH
53145: LD_INT 2
53147: NEG
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 3
53155: NEG
53156: PUSH
53157: LD_INT 3
53159: NEG
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: LIST
53169: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53170: LD_ADDR_VAR 0 23
53174: PUSH
53175: LD_INT 0
53177: PUSH
53178: LD_INT 3
53180: NEG
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: LD_INT 1
53188: NEG
53189: PUSH
53190: LD_INT 4
53192: NEG
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 1
53200: PUSH
53201: LD_INT 3
53203: NEG
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: LIST
53213: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53214: LD_ADDR_VAR 0 24
53218: PUSH
53219: LD_INT 3
53221: PUSH
53222: LD_INT 0
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 3
53231: PUSH
53232: LD_INT 1
53234: NEG
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 4
53242: PUSH
53243: LD_INT 1
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: LIST
53254: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53255: LD_ADDR_VAR 0 25
53259: PUSH
53260: LD_INT 3
53262: PUSH
53263: LD_INT 3
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 4
53272: PUSH
53273: LD_INT 3
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 3
53282: PUSH
53283: LD_INT 4
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: LIST
53294: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53295: LD_ADDR_VAR 0 26
53299: PUSH
53300: LD_INT 0
53302: PUSH
53303: LD_INT 3
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 1
53312: PUSH
53313: LD_INT 4
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 1
53322: NEG
53323: PUSH
53324: LD_INT 3
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: LIST
53335: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53336: LD_ADDR_VAR 0 27
53340: PUSH
53341: LD_INT 3
53343: NEG
53344: PUSH
53345: LD_INT 0
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 3
53354: NEG
53355: PUSH
53356: LD_INT 1
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 4
53365: NEG
53366: PUSH
53367: LD_INT 1
53369: NEG
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: LIST
53379: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53380: LD_ADDR_VAR 0 28
53384: PUSH
53385: LD_INT 3
53387: NEG
53388: PUSH
53389: LD_INT 3
53391: NEG
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 3
53399: NEG
53400: PUSH
53401: LD_INT 4
53403: NEG
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 4
53411: NEG
53412: PUSH
53413: LD_INT 3
53415: NEG
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: LIST
53425: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53426: LD_ADDR_VAR 0 29
53430: PUSH
53431: LD_INT 1
53433: NEG
53434: PUSH
53435: LD_INT 3
53437: NEG
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: LD_INT 0
53445: PUSH
53446: LD_INT 3
53448: NEG
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 1
53456: PUSH
53457: LD_INT 2
53459: NEG
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 1
53467: NEG
53468: PUSH
53469: LD_INT 4
53471: NEG
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: LD_INT 0
53479: PUSH
53480: LD_INT 4
53482: NEG
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 1
53490: PUSH
53491: LD_INT 3
53493: NEG
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: LD_INT 1
53501: NEG
53502: PUSH
53503: LD_INT 5
53505: NEG
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 0
53513: PUSH
53514: LD_INT 5
53516: NEG
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 1
53524: PUSH
53525: LD_INT 4
53527: NEG
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 1
53535: NEG
53536: PUSH
53537: LD_INT 6
53539: NEG
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 0
53547: PUSH
53548: LD_INT 6
53550: NEG
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 1
53558: PUSH
53559: LD_INT 5
53561: NEG
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: LIST
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: LIST
53577: LIST
53578: LIST
53579: LIST
53580: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53581: LD_ADDR_VAR 0 30
53585: PUSH
53586: LD_INT 2
53588: PUSH
53589: LD_INT 1
53591: NEG
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 3
53599: PUSH
53600: LD_INT 0
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 3
53609: PUSH
53610: LD_INT 1
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 3
53619: PUSH
53620: LD_INT 1
53622: NEG
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 4
53630: PUSH
53631: LD_INT 0
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: LD_INT 4
53640: PUSH
53641: LD_INT 1
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 4
53650: PUSH
53651: LD_INT 1
53653: NEG
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 5
53661: PUSH
53662: LD_INT 0
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 5
53671: PUSH
53672: LD_INT 1
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 5
53681: PUSH
53682: LD_INT 1
53684: NEG
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 6
53692: PUSH
53693: LD_INT 0
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 6
53702: PUSH
53703: LD_INT 1
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
53724: LD_ADDR_VAR 0 31
53728: PUSH
53729: LD_INT 3
53731: PUSH
53732: LD_INT 2
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 3
53741: PUSH
53742: LD_INT 3
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 2
53751: PUSH
53752: LD_INT 3
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 4
53761: PUSH
53762: LD_INT 3
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 4
53771: PUSH
53772: LD_INT 4
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 3
53781: PUSH
53782: LD_INT 4
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 5
53791: PUSH
53792: LD_INT 4
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 5
53801: PUSH
53802: LD_INT 5
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 4
53811: PUSH
53812: LD_INT 5
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 6
53821: PUSH
53822: LD_INT 5
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: LD_INT 6
53831: PUSH
53832: LD_INT 6
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 5
53841: PUSH
53842: LD_INT 6
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
53863: LD_ADDR_VAR 0 32
53867: PUSH
53868: LD_INT 1
53870: PUSH
53871: LD_INT 3
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 0
53880: PUSH
53881: LD_INT 3
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 1
53890: NEG
53891: PUSH
53892: LD_INT 2
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 1
53901: PUSH
53902: LD_INT 4
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 0
53911: PUSH
53912: LD_INT 4
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 1
53921: NEG
53922: PUSH
53923: LD_INT 3
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 1
53932: PUSH
53933: LD_INT 5
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 0
53942: PUSH
53943: LD_INT 5
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 1
53952: NEG
53953: PUSH
53954: LD_INT 4
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 1
53963: PUSH
53964: LD_INT 6
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 0
53973: PUSH
53974: LD_INT 6
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 1
53983: NEG
53984: PUSH
53985: LD_INT 5
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: LIST
54005: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54006: LD_ADDR_VAR 0 33
54010: PUSH
54011: LD_INT 2
54013: NEG
54014: PUSH
54015: LD_INT 1
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 3
54024: NEG
54025: PUSH
54026: LD_INT 0
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 3
54035: NEG
54036: PUSH
54037: LD_INT 1
54039: NEG
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: PUSH
54045: LD_INT 3
54047: NEG
54048: PUSH
54049: LD_INT 1
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 4
54058: NEG
54059: PUSH
54060: LD_INT 0
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 4
54069: NEG
54070: PUSH
54071: LD_INT 1
54073: NEG
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 4
54081: NEG
54082: PUSH
54083: LD_INT 1
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 5
54092: NEG
54093: PUSH
54094: LD_INT 0
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 5
54103: NEG
54104: PUSH
54105: LD_INT 1
54107: NEG
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 5
54115: NEG
54116: PUSH
54117: LD_INT 1
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 6
54126: NEG
54127: PUSH
54128: LD_INT 0
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 6
54137: NEG
54138: PUSH
54139: LD_INT 1
54141: NEG
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: LIST
54154: LIST
54155: LIST
54156: LIST
54157: LIST
54158: LIST
54159: LIST
54160: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54161: LD_ADDR_VAR 0 34
54165: PUSH
54166: LD_INT 2
54168: NEG
54169: PUSH
54170: LD_INT 3
54172: NEG
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 3
54180: NEG
54181: PUSH
54182: LD_INT 2
54184: NEG
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 3
54192: NEG
54193: PUSH
54194: LD_INT 3
54196: NEG
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 3
54204: NEG
54205: PUSH
54206: LD_INT 4
54208: NEG
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 4
54216: NEG
54217: PUSH
54218: LD_INT 3
54220: NEG
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 4
54228: NEG
54229: PUSH
54230: LD_INT 4
54232: NEG
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 4
54240: NEG
54241: PUSH
54242: LD_INT 5
54244: NEG
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: LD_INT 5
54252: NEG
54253: PUSH
54254: LD_INT 4
54256: NEG
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: LD_INT 5
54264: NEG
54265: PUSH
54266: LD_INT 5
54268: NEG
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 5
54276: NEG
54277: PUSH
54278: LD_INT 6
54280: NEG
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 6
54288: NEG
54289: PUSH
54290: LD_INT 5
54292: NEG
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 6
54300: NEG
54301: PUSH
54302: LD_INT 6
54304: NEG
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54324: LD_ADDR_VAR 0 41
54328: PUSH
54329: LD_INT 0
54331: PUSH
54332: LD_INT 2
54334: NEG
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 1
54342: NEG
54343: PUSH
54344: LD_INT 3
54346: NEG
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: LD_INT 1
54354: PUSH
54355: LD_INT 2
54357: NEG
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: LIST
54367: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54368: LD_ADDR_VAR 0 42
54372: PUSH
54373: LD_INT 2
54375: PUSH
54376: LD_INT 0
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 2
54385: PUSH
54386: LD_INT 1
54388: NEG
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 3
54396: PUSH
54397: LD_INT 1
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: LIST
54408: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54409: LD_ADDR_VAR 0 43
54413: PUSH
54414: LD_INT 2
54416: PUSH
54417: LD_INT 2
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 3
54426: PUSH
54427: LD_INT 2
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 2
54436: PUSH
54437: LD_INT 3
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: LIST
54448: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54449: LD_ADDR_VAR 0 44
54453: PUSH
54454: LD_INT 0
54456: PUSH
54457: LD_INT 2
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 1
54466: PUSH
54467: LD_INT 3
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 1
54476: NEG
54477: PUSH
54478: LD_INT 2
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: LIST
54489: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54490: LD_ADDR_VAR 0 45
54494: PUSH
54495: LD_INT 2
54497: NEG
54498: PUSH
54499: LD_INT 0
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 2
54508: NEG
54509: PUSH
54510: LD_INT 1
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 3
54519: NEG
54520: PUSH
54521: LD_INT 1
54523: NEG
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: LIST
54533: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54534: LD_ADDR_VAR 0 46
54538: PUSH
54539: LD_INT 2
54541: NEG
54542: PUSH
54543: LD_INT 2
54545: NEG
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 2
54553: NEG
54554: PUSH
54555: LD_INT 3
54557: NEG
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 3
54565: NEG
54566: PUSH
54567: LD_INT 2
54569: NEG
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: LIST
54579: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
54580: LD_ADDR_VAR 0 47
54584: PUSH
54585: LD_INT 2
54587: NEG
54588: PUSH
54589: LD_INT 3
54591: NEG
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_INT 1
54599: NEG
54600: PUSH
54601: LD_INT 3
54603: NEG
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54613: LD_ADDR_VAR 0 48
54617: PUSH
54618: LD_INT 1
54620: PUSH
54621: LD_INT 2
54623: NEG
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 2
54631: PUSH
54632: LD_INT 1
54634: NEG
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
54644: LD_ADDR_VAR 0 49
54648: PUSH
54649: LD_INT 3
54651: PUSH
54652: LD_INT 1
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 3
54661: PUSH
54662: LD_INT 2
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
54673: LD_ADDR_VAR 0 50
54677: PUSH
54678: LD_INT 2
54680: PUSH
54681: LD_INT 3
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 1
54690: PUSH
54691: LD_INT 3
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54702: LD_ADDR_VAR 0 51
54706: PUSH
54707: LD_INT 1
54709: NEG
54710: PUSH
54711: LD_INT 2
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: LD_INT 2
54720: NEG
54721: PUSH
54722: LD_INT 1
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54733: LD_ADDR_VAR 0 52
54737: PUSH
54738: LD_INT 3
54740: NEG
54741: PUSH
54742: LD_INT 1
54744: NEG
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 3
54752: NEG
54753: PUSH
54754: LD_INT 2
54756: NEG
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54766: LD_ADDR_VAR 0 53
54770: PUSH
54771: LD_INT 1
54773: NEG
54774: PUSH
54775: LD_INT 3
54777: NEG
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 0
54785: PUSH
54786: LD_INT 3
54788: NEG
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 1
54796: PUSH
54797: LD_INT 2
54799: NEG
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: LIST
54809: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54810: LD_ADDR_VAR 0 54
54814: PUSH
54815: LD_INT 2
54817: PUSH
54818: LD_INT 1
54820: NEG
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 3
54828: PUSH
54829: LD_INT 0
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 3
54838: PUSH
54839: LD_INT 1
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: LIST
54850: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54851: LD_ADDR_VAR 0 55
54855: PUSH
54856: LD_INT 3
54858: PUSH
54859: LD_INT 2
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 3
54868: PUSH
54869: LD_INT 3
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 2
54878: PUSH
54879: LD_INT 3
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: LIST
54890: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54891: LD_ADDR_VAR 0 56
54895: PUSH
54896: LD_INT 1
54898: PUSH
54899: LD_INT 3
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 0
54908: PUSH
54909: LD_INT 3
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: LD_INT 1
54918: NEG
54919: PUSH
54920: LD_INT 2
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: LIST
54931: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54932: LD_ADDR_VAR 0 57
54936: PUSH
54937: LD_INT 2
54939: NEG
54940: PUSH
54941: LD_INT 1
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 3
54950: NEG
54951: PUSH
54952: LD_INT 0
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 3
54961: NEG
54962: PUSH
54963: LD_INT 1
54965: NEG
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: LIST
54975: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54976: LD_ADDR_VAR 0 58
54980: PUSH
54981: LD_INT 2
54983: NEG
54984: PUSH
54985: LD_INT 3
54987: NEG
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 3
54995: NEG
54996: PUSH
54997: LD_INT 2
54999: NEG
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 3
55007: NEG
55008: PUSH
55009: LD_INT 3
55011: NEG
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: LIST
55021: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55022: LD_ADDR_VAR 0 59
55026: PUSH
55027: LD_INT 1
55029: NEG
55030: PUSH
55031: LD_INT 2
55033: NEG
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 0
55041: PUSH
55042: LD_INT 2
55044: NEG
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: LD_INT 1
55052: PUSH
55053: LD_INT 1
55055: NEG
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: LIST
55065: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55066: LD_ADDR_VAR 0 60
55070: PUSH
55071: LD_INT 1
55073: PUSH
55074: LD_INT 1
55076: NEG
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 2
55084: PUSH
55085: LD_INT 0
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 2
55094: PUSH
55095: LD_INT 1
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: LIST
55106: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55107: LD_ADDR_VAR 0 61
55111: PUSH
55112: LD_INT 2
55114: PUSH
55115: LD_INT 1
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 2
55124: PUSH
55125: LD_INT 2
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 1
55134: PUSH
55135: LD_INT 2
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: LIST
55146: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55147: LD_ADDR_VAR 0 62
55151: PUSH
55152: LD_INT 1
55154: PUSH
55155: LD_INT 2
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 0
55164: PUSH
55165: LD_INT 2
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 1
55174: NEG
55175: PUSH
55176: LD_INT 1
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: LIST
55187: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55188: LD_ADDR_VAR 0 63
55192: PUSH
55193: LD_INT 1
55195: NEG
55196: PUSH
55197: LD_INT 1
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 2
55206: NEG
55207: PUSH
55208: LD_INT 0
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 2
55217: NEG
55218: PUSH
55219: LD_INT 1
55221: NEG
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: LIST
55231: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55232: LD_ADDR_VAR 0 64
55236: PUSH
55237: LD_INT 1
55239: NEG
55240: PUSH
55241: LD_INT 2
55243: NEG
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 2
55251: NEG
55252: PUSH
55253: LD_INT 1
55255: NEG
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 2
55263: NEG
55264: PUSH
55265: LD_INT 2
55267: NEG
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: LIST
55277: ST_TO_ADDR
// end ; 2 :
55278: GO 58544
55280: LD_INT 2
55282: DOUBLE
55283: EQUAL
55284: IFTRUE 55288
55286: GO 58543
55288: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55289: LD_ADDR_VAR 0 29
55293: PUSH
55294: LD_INT 4
55296: PUSH
55297: LD_INT 0
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 4
55306: PUSH
55307: LD_INT 1
55309: NEG
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 5
55317: PUSH
55318: LD_INT 0
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 5
55327: PUSH
55328: LD_INT 1
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 4
55337: PUSH
55338: LD_INT 1
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 3
55347: PUSH
55348: LD_INT 0
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 3
55357: PUSH
55358: LD_INT 1
55360: NEG
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 3
55368: PUSH
55369: LD_INT 2
55371: NEG
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 5
55379: PUSH
55380: LD_INT 2
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 3
55389: PUSH
55390: LD_INT 3
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 3
55399: PUSH
55400: LD_INT 2
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 4
55409: PUSH
55410: LD_INT 3
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 4
55419: PUSH
55420: LD_INT 4
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 3
55429: PUSH
55430: LD_INT 4
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 2
55439: PUSH
55440: LD_INT 3
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 2
55449: PUSH
55450: LD_INT 2
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 4
55459: PUSH
55460: LD_INT 2
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 2
55469: PUSH
55470: LD_INT 4
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 0
55479: PUSH
55480: LD_INT 4
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 0
55489: PUSH
55490: LD_INT 3
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 1
55499: PUSH
55500: LD_INT 4
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 1
55509: PUSH
55510: LD_INT 5
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 0
55519: PUSH
55520: LD_INT 5
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 1
55529: NEG
55530: PUSH
55531: LD_INT 4
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 1
55540: NEG
55541: PUSH
55542: LD_INT 3
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 2
55551: PUSH
55552: LD_INT 5
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 2
55561: NEG
55562: PUSH
55563: LD_INT 3
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 3
55572: NEG
55573: PUSH
55574: LD_INT 0
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 3
55583: NEG
55584: PUSH
55585: LD_INT 1
55587: NEG
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 2
55595: NEG
55596: PUSH
55597: LD_INT 0
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 2
55606: NEG
55607: PUSH
55608: LD_INT 1
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 3
55617: NEG
55618: PUSH
55619: LD_INT 1
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 4
55628: NEG
55629: PUSH
55630: LD_INT 0
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 4
55639: NEG
55640: PUSH
55641: LD_INT 1
55643: NEG
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 4
55651: NEG
55652: PUSH
55653: LD_INT 2
55655: NEG
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 2
55663: NEG
55664: PUSH
55665: LD_INT 2
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: LD_INT 4
55674: NEG
55675: PUSH
55676: LD_INT 4
55678: NEG
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 4
55686: NEG
55687: PUSH
55688: LD_INT 5
55690: NEG
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 3
55698: NEG
55699: PUSH
55700: LD_INT 4
55702: NEG
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: LD_INT 3
55710: NEG
55711: PUSH
55712: LD_INT 3
55714: NEG
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 4
55722: NEG
55723: PUSH
55724: LD_INT 3
55726: NEG
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 5
55734: NEG
55735: PUSH
55736: LD_INT 4
55738: NEG
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 5
55746: NEG
55747: PUSH
55748: LD_INT 5
55750: NEG
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 3
55758: NEG
55759: PUSH
55760: LD_INT 5
55762: NEG
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 5
55770: NEG
55771: PUSH
55772: LD_INT 3
55774: NEG
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
55827: LD_ADDR_VAR 0 30
55831: PUSH
55832: LD_INT 4
55834: PUSH
55835: LD_INT 4
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 4
55844: PUSH
55845: LD_INT 3
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 5
55854: PUSH
55855: LD_INT 4
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 5
55864: PUSH
55865: LD_INT 5
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 4
55874: PUSH
55875: LD_INT 5
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 3
55884: PUSH
55885: LD_INT 4
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 3
55894: PUSH
55895: LD_INT 3
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 5
55904: PUSH
55905: LD_INT 3
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 3
55914: PUSH
55915: LD_INT 5
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 0
55924: PUSH
55925: LD_INT 3
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 0
55934: PUSH
55935: LD_INT 2
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 1
55944: PUSH
55945: LD_INT 3
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 1
55954: PUSH
55955: LD_INT 4
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 0
55964: PUSH
55965: LD_INT 4
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 1
55974: NEG
55975: PUSH
55976: LD_INT 3
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 1
55985: NEG
55986: PUSH
55987: LD_INT 2
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 2
55996: PUSH
55997: LD_INT 4
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 2
56006: NEG
56007: PUSH
56008: LD_INT 2
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: PUSH
56015: LD_INT 4
56017: NEG
56018: PUSH
56019: LD_INT 0
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 4
56028: NEG
56029: PUSH
56030: LD_INT 1
56032: NEG
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 3
56040: NEG
56041: PUSH
56042: LD_INT 0
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 3
56051: NEG
56052: PUSH
56053: LD_INT 1
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 4
56062: NEG
56063: PUSH
56064: LD_INT 1
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 5
56073: NEG
56074: PUSH
56075: LD_INT 0
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 5
56084: NEG
56085: PUSH
56086: LD_INT 1
56088: NEG
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: LD_INT 5
56096: NEG
56097: PUSH
56098: LD_INT 2
56100: NEG
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: PUSH
56106: LD_INT 3
56108: NEG
56109: PUSH
56110: LD_INT 2
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 3
56119: NEG
56120: PUSH
56121: LD_INT 3
56123: NEG
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 3
56131: NEG
56132: PUSH
56133: LD_INT 4
56135: NEG
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 2
56143: NEG
56144: PUSH
56145: LD_INT 3
56147: NEG
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 2
56155: NEG
56156: PUSH
56157: LD_INT 2
56159: NEG
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 3
56167: NEG
56168: PUSH
56169: LD_INT 2
56171: NEG
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 4
56179: NEG
56180: PUSH
56181: LD_INT 3
56183: NEG
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: PUSH
56189: LD_INT 4
56191: NEG
56192: PUSH
56193: LD_INT 4
56195: NEG
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 2
56203: NEG
56204: PUSH
56205: LD_INT 4
56207: NEG
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 4
56215: NEG
56216: PUSH
56217: LD_INT 2
56219: NEG
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 0
56227: PUSH
56228: LD_INT 4
56230: NEG
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: LD_INT 0
56238: PUSH
56239: LD_INT 5
56241: NEG
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 1
56249: PUSH
56250: LD_INT 4
56252: NEG
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: LD_INT 1
56260: PUSH
56261: LD_INT 3
56263: NEG
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 0
56271: PUSH
56272: LD_INT 3
56274: NEG
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 1
56282: NEG
56283: PUSH
56284: LD_INT 4
56286: NEG
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 1
56294: NEG
56295: PUSH
56296: LD_INT 5
56298: NEG
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 2
56306: PUSH
56307: LD_INT 3
56309: NEG
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 2
56317: NEG
56318: PUSH
56319: LD_INT 5
56321: NEG
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: LIST
56335: LIST
56336: LIST
56337: LIST
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56374: LD_ADDR_VAR 0 31
56378: PUSH
56379: LD_INT 0
56381: PUSH
56382: LD_INT 4
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 0
56391: PUSH
56392: LD_INT 3
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: LD_INT 1
56401: PUSH
56402: LD_INT 4
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 1
56411: PUSH
56412: LD_INT 5
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 0
56421: PUSH
56422: LD_INT 5
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 1
56431: NEG
56432: PUSH
56433: LD_INT 4
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 1
56442: NEG
56443: PUSH
56444: LD_INT 3
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 2
56453: PUSH
56454: LD_INT 5
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 2
56463: NEG
56464: PUSH
56465: LD_INT 3
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 3
56474: NEG
56475: PUSH
56476: LD_INT 0
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: LD_INT 3
56485: NEG
56486: PUSH
56487: LD_INT 1
56489: NEG
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 2
56497: NEG
56498: PUSH
56499: LD_INT 0
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 2
56508: NEG
56509: PUSH
56510: LD_INT 1
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 3
56519: NEG
56520: PUSH
56521: LD_INT 1
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 4
56530: NEG
56531: PUSH
56532: LD_INT 0
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 4
56541: NEG
56542: PUSH
56543: LD_INT 1
56545: NEG
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: PUSH
56551: LD_INT 4
56553: NEG
56554: PUSH
56555: LD_INT 2
56557: NEG
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: LD_INT 2
56565: NEG
56566: PUSH
56567: LD_INT 2
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: LD_INT 4
56576: NEG
56577: PUSH
56578: LD_INT 4
56580: NEG
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 4
56588: NEG
56589: PUSH
56590: LD_INT 5
56592: NEG
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 3
56600: NEG
56601: PUSH
56602: LD_INT 4
56604: NEG
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: LD_INT 3
56612: NEG
56613: PUSH
56614: LD_INT 3
56616: NEG
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 4
56624: NEG
56625: PUSH
56626: LD_INT 3
56628: NEG
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 5
56636: NEG
56637: PUSH
56638: LD_INT 4
56640: NEG
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_INT 5
56648: NEG
56649: PUSH
56650: LD_INT 5
56652: NEG
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: LD_INT 3
56660: NEG
56661: PUSH
56662: LD_INT 5
56664: NEG
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 5
56672: NEG
56673: PUSH
56674: LD_INT 3
56676: NEG
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 0
56684: PUSH
56685: LD_INT 3
56687: NEG
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 0
56695: PUSH
56696: LD_INT 4
56698: NEG
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 1
56706: PUSH
56707: LD_INT 3
56709: NEG
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 1
56717: PUSH
56718: LD_INT 2
56720: NEG
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 0
56728: PUSH
56729: LD_INT 2
56731: NEG
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 1
56739: NEG
56740: PUSH
56741: LD_INT 3
56743: NEG
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 1
56751: NEG
56752: PUSH
56753: LD_INT 4
56755: NEG
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 2
56763: PUSH
56764: LD_INT 2
56766: NEG
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 2
56774: NEG
56775: PUSH
56776: LD_INT 4
56778: NEG
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 4
56786: PUSH
56787: LD_INT 0
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 4
56796: PUSH
56797: LD_INT 1
56799: NEG
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 5
56807: PUSH
56808: LD_INT 0
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 5
56817: PUSH
56818: LD_INT 1
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 4
56827: PUSH
56828: LD_INT 1
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 3
56837: PUSH
56838: LD_INT 0
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 3
56847: PUSH
56848: LD_INT 1
56850: NEG
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 3
56858: PUSH
56859: LD_INT 2
56861: NEG
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 5
56869: PUSH
56870: LD_INT 2
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: LIST
56881: LIST
56882: LIST
56883: LIST
56884: LIST
56885: LIST
56886: LIST
56887: LIST
56888: LIST
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
56924: LD_ADDR_VAR 0 32
56928: PUSH
56929: LD_INT 4
56931: NEG
56932: PUSH
56933: LD_INT 0
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: LD_INT 4
56942: NEG
56943: PUSH
56944: LD_INT 1
56946: NEG
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 3
56954: NEG
56955: PUSH
56956: LD_INT 0
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 3
56965: NEG
56966: PUSH
56967: LD_INT 1
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 4
56976: NEG
56977: PUSH
56978: LD_INT 1
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 5
56987: NEG
56988: PUSH
56989: LD_INT 0
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 5
56998: NEG
56999: PUSH
57000: LD_INT 1
57002: NEG
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 5
57010: NEG
57011: PUSH
57012: LD_INT 2
57014: NEG
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: LD_INT 3
57022: NEG
57023: PUSH
57024: LD_INT 2
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 3
57033: NEG
57034: PUSH
57035: LD_INT 3
57037: NEG
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 3
57045: NEG
57046: PUSH
57047: LD_INT 4
57049: NEG
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 2
57057: NEG
57058: PUSH
57059: LD_INT 3
57061: NEG
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 2
57069: NEG
57070: PUSH
57071: LD_INT 2
57073: NEG
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 3
57081: NEG
57082: PUSH
57083: LD_INT 2
57085: NEG
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: LD_INT 4
57093: NEG
57094: PUSH
57095: LD_INT 3
57097: NEG
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: LD_INT 4
57105: NEG
57106: PUSH
57107: LD_INT 4
57109: NEG
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 2
57117: NEG
57118: PUSH
57119: LD_INT 4
57121: NEG
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 4
57129: NEG
57130: PUSH
57131: LD_INT 2
57133: NEG
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 0
57141: PUSH
57142: LD_INT 4
57144: NEG
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 0
57152: PUSH
57153: LD_INT 5
57155: NEG
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 1
57163: PUSH
57164: LD_INT 4
57166: NEG
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 1
57174: PUSH
57175: LD_INT 3
57177: NEG
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 0
57185: PUSH
57186: LD_INT 3
57188: NEG
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 1
57196: NEG
57197: PUSH
57198: LD_INT 4
57200: NEG
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 1
57208: NEG
57209: PUSH
57210: LD_INT 5
57212: NEG
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 2
57220: PUSH
57221: LD_INT 3
57223: NEG
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 2
57231: NEG
57232: PUSH
57233: LD_INT 5
57235: NEG
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 3
57243: PUSH
57244: LD_INT 0
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 3
57253: PUSH
57254: LD_INT 1
57256: NEG
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 4
57264: PUSH
57265: LD_INT 0
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 4
57274: PUSH
57275: LD_INT 1
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 3
57284: PUSH
57285: LD_INT 1
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 2
57294: PUSH
57295: LD_INT 0
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 2
57304: PUSH
57305: LD_INT 1
57307: NEG
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PUSH
57313: LD_INT 2
57315: PUSH
57316: LD_INT 2
57318: NEG
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 4
57326: PUSH
57327: LD_INT 2
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 4
57336: PUSH
57337: LD_INT 4
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 4
57346: PUSH
57347: LD_INT 3
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 5
57356: PUSH
57357: LD_INT 4
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 5
57366: PUSH
57367: LD_INT 5
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 4
57376: PUSH
57377: LD_INT 5
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 3
57386: PUSH
57387: LD_INT 4
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 3
57396: PUSH
57397: LD_INT 3
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 5
57406: PUSH
57407: LD_INT 3
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 3
57416: PUSH
57417: LD_INT 5
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57471: LD_ADDR_VAR 0 33
57475: PUSH
57476: LD_INT 4
57478: NEG
57479: PUSH
57480: LD_INT 4
57482: NEG
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 4
57490: NEG
57491: PUSH
57492: LD_INT 5
57494: NEG
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 3
57502: NEG
57503: PUSH
57504: LD_INT 4
57506: NEG
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: LD_INT 3
57514: NEG
57515: PUSH
57516: LD_INT 3
57518: NEG
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 4
57526: NEG
57527: PUSH
57528: LD_INT 3
57530: NEG
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: LD_INT 5
57538: NEG
57539: PUSH
57540: LD_INT 4
57542: NEG
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 5
57550: NEG
57551: PUSH
57552: LD_INT 5
57554: NEG
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 3
57562: NEG
57563: PUSH
57564: LD_INT 5
57566: NEG
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 5
57574: NEG
57575: PUSH
57576: LD_INT 3
57578: NEG
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: LD_INT 0
57586: PUSH
57587: LD_INT 3
57589: NEG
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 0
57597: PUSH
57598: LD_INT 4
57600: NEG
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 1
57608: PUSH
57609: LD_INT 3
57611: NEG
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: LD_INT 1
57619: PUSH
57620: LD_INT 2
57622: NEG
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: LD_INT 0
57630: PUSH
57631: LD_INT 2
57633: NEG
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 1
57641: NEG
57642: PUSH
57643: LD_INT 3
57645: NEG
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 1
57653: NEG
57654: PUSH
57655: LD_INT 4
57657: NEG
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 2
57665: PUSH
57666: LD_INT 2
57668: NEG
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 2
57676: NEG
57677: PUSH
57678: LD_INT 4
57680: NEG
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 4
57688: PUSH
57689: LD_INT 0
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: LD_INT 4
57698: PUSH
57699: LD_INT 1
57701: NEG
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 5
57709: PUSH
57710: LD_INT 0
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 5
57719: PUSH
57720: LD_INT 1
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 4
57729: PUSH
57730: LD_INT 1
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_INT 3
57739: PUSH
57740: LD_INT 0
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 3
57749: PUSH
57750: LD_INT 1
57752: NEG
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 3
57760: PUSH
57761: LD_INT 2
57763: NEG
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: LD_INT 5
57771: PUSH
57772: LD_INT 2
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 3
57781: PUSH
57782: LD_INT 3
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: LD_INT 3
57791: PUSH
57792: LD_INT 2
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 4
57801: PUSH
57802: LD_INT 3
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 4
57811: PUSH
57812: LD_INT 4
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 3
57821: PUSH
57822: LD_INT 4
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 2
57831: PUSH
57832: LD_INT 3
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 2
57841: PUSH
57842: LD_INT 2
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 4
57851: PUSH
57852: LD_INT 2
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: LD_INT 2
57861: PUSH
57862: LD_INT 4
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 0
57871: PUSH
57872: LD_INT 4
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 0
57881: PUSH
57882: LD_INT 3
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 1
57891: PUSH
57892: LD_INT 4
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 1
57901: PUSH
57902: LD_INT 5
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: LD_INT 0
57911: PUSH
57912: LD_INT 5
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 1
57921: NEG
57922: PUSH
57923: LD_INT 4
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 1
57932: NEG
57933: PUSH
57934: LD_INT 3
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 2
57943: PUSH
57944: LD_INT 5
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 2
57953: NEG
57954: PUSH
57955: LD_INT 3
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: LIST
57966: LIST
57967: LIST
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: LIST
58003: LIST
58004: LIST
58005: LIST
58006: LIST
58007: LIST
58008: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58009: LD_ADDR_VAR 0 34
58013: PUSH
58014: LD_INT 0
58016: PUSH
58017: LD_INT 4
58019: NEG
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 0
58027: PUSH
58028: LD_INT 5
58030: NEG
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 1
58038: PUSH
58039: LD_INT 4
58041: NEG
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 1
58049: PUSH
58050: LD_INT 3
58052: NEG
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: LD_INT 0
58060: PUSH
58061: LD_INT 3
58063: NEG
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 1
58071: NEG
58072: PUSH
58073: LD_INT 4
58075: NEG
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 1
58083: NEG
58084: PUSH
58085: LD_INT 5
58087: NEG
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 2
58095: PUSH
58096: LD_INT 3
58098: NEG
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 2
58106: NEG
58107: PUSH
58108: LD_INT 5
58110: NEG
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: LD_INT 3
58118: PUSH
58119: LD_INT 0
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: LD_INT 3
58128: PUSH
58129: LD_INT 1
58131: NEG
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 4
58139: PUSH
58140: LD_INT 0
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 4
58149: PUSH
58150: LD_INT 1
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 3
58159: PUSH
58160: LD_INT 1
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 2
58169: PUSH
58170: LD_INT 0
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 2
58179: PUSH
58180: LD_INT 1
58182: NEG
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 2
58190: PUSH
58191: LD_INT 2
58193: NEG
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: LD_INT 4
58201: PUSH
58202: LD_INT 2
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 4
58211: PUSH
58212: LD_INT 4
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 4
58221: PUSH
58222: LD_INT 3
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 5
58231: PUSH
58232: LD_INT 4
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: LD_INT 5
58241: PUSH
58242: LD_INT 5
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 4
58251: PUSH
58252: LD_INT 5
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: PUSH
58259: LD_INT 3
58261: PUSH
58262: LD_INT 4
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 3
58271: PUSH
58272: LD_INT 3
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 5
58281: PUSH
58282: LD_INT 3
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 3
58291: PUSH
58292: LD_INT 5
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: LD_INT 0
58301: PUSH
58302: LD_INT 3
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 0
58311: PUSH
58312: LD_INT 2
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 1
58321: PUSH
58322: LD_INT 3
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 1
58331: PUSH
58332: LD_INT 4
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_INT 0
58341: PUSH
58342: LD_INT 4
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: PUSH
58349: LD_INT 1
58351: NEG
58352: PUSH
58353: LD_INT 3
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 1
58362: NEG
58363: PUSH
58364: LD_INT 2
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 2
58373: PUSH
58374: LD_INT 4
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 2
58383: NEG
58384: PUSH
58385: LD_INT 2
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 4
58394: NEG
58395: PUSH
58396: LD_INT 0
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 4
58405: NEG
58406: PUSH
58407: LD_INT 1
58409: NEG
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 3
58417: NEG
58418: PUSH
58419: LD_INT 0
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 3
58428: NEG
58429: PUSH
58430: LD_INT 1
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 4
58439: NEG
58440: PUSH
58441: LD_INT 1
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_INT 5
58450: NEG
58451: PUSH
58452: LD_INT 0
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 5
58461: NEG
58462: PUSH
58463: LD_INT 1
58465: NEG
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 5
58473: NEG
58474: PUSH
58475: LD_INT 2
58477: NEG
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 3
58485: NEG
58486: PUSH
58487: LD_INT 2
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: LIST
58504: LIST
58505: LIST
58506: LIST
58507: LIST
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: LIST
58521: LIST
58522: LIST
58523: LIST
58524: LIST
58525: LIST
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: LIST
58535: LIST
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: ST_TO_ADDR
// end ; end ;
58541: GO 58544
58543: POP
// case btype of b_depot , b_warehouse :
58544: LD_VAR 0 1
58548: PUSH
58549: LD_INT 0
58551: DOUBLE
58552: EQUAL
58553: IFTRUE 58563
58555: LD_INT 1
58557: DOUBLE
58558: EQUAL
58559: IFTRUE 58563
58561: GO 58764
58563: POP
// case nation of nation_american :
58564: LD_VAR 0 5
58568: PUSH
58569: LD_INT 1
58571: DOUBLE
58572: EQUAL
58573: IFTRUE 58577
58575: GO 58633
58577: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
58578: LD_ADDR_VAR 0 9
58582: PUSH
58583: LD_VAR 0 11
58587: PUSH
58588: LD_VAR 0 12
58592: PUSH
58593: LD_VAR 0 13
58597: PUSH
58598: LD_VAR 0 14
58602: PUSH
58603: LD_VAR 0 15
58607: PUSH
58608: LD_VAR 0 16
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: LIST
58617: LIST
58618: LIST
58619: LIST
58620: PUSH
58621: LD_VAR 0 4
58625: PUSH
58626: LD_INT 1
58628: PLUS
58629: ARRAY
58630: ST_TO_ADDR
58631: GO 58762
58633: LD_INT 2
58635: DOUBLE
58636: EQUAL
58637: IFTRUE 58641
58639: GO 58697
58641: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
58642: LD_ADDR_VAR 0 9
58646: PUSH
58647: LD_VAR 0 17
58651: PUSH
58652: LD_VAR 0 18
58656: PUSH
58657: LD_VAR 0 19
58661: PUSH
58662: LD_VAR 0 20
58666: PUSH
58667: LD_VAR 0 21
58671: PUSH
58672: LD_VAR 0 22
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: LIST
58681: LIST
58682: LIST
58683: LIST
58684: PUSH
58685: LD_VAR 0 4
58689: PUSH
58690: LD_INT 1
58692: PLUS
58693: ARRAY
58694: ST_TO_ADDR
58695: GO 58762
58697: LD_INT 3
58699: DOUBLE
58700: EQUAL
58701: IFTRUE 58705
58703: GO 58761
58705: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
58706: LD_ADDR_VAR 0 9
58710: PUSH
58711: LD_VAR 0 23
58715: PUSH
58716: LD_VAR 0 24
58720: PUSH
58721: LD_VAR 0 25
58725: PUSH
58726: LD_VAR 0 26
58730: PUSH
58731: LD_VAR 0 27
58735: PUSH
58736: LD_VAR 0 28
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: LIST
58745: LIST
58746: LIST
58747: LIST
58748: PUSH
58749: LD_VAR 0 4
58753: PUSH
58754: LD_INT 1
58756: PLUS
58757: ARRAY
58758: ST_TO_ADDR
58759: GO 58762
58761: POP
58762: GO 59317
58764: LD_INT 2
58766: DOUBLE
58767: EQUAL
58768: IFTRUE 58778
58770: LD_INT 3
58772: DOUBLE
58773: EQUAL
58774: IFTRUE 58778
58776: GO 58834
58778: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
58779: LD_ADDR_VAR 0 9
58783: PUSH
58784: LD_VAR 0 29
58788: PUSH
58789: LD_VAR 0 30
58793: PUSH
58794: LD_VAR 0 31
58798: PUSH
58799: LD_VAR 0 32
58803: PUSH
58804: LD_VAR 0 33
58808: PUSH
58809: LD_VAR 0 34
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: LIST
58818: LIST
58819: LIST
58820: LIST
58821: PUSH
58822: LD_VAR 0 4
58826: PUSH
58827: LD_INT 1
58829: PLUS
58830: ARRAY
58831: ST_TO_ADDR
58832: GO 59317
58834: LD_INT 16
58836: DOUBLE
58837: EQUAL
58838: IFTRUE 58896
58840: LD_INT 17
58842: DOUBLE
58843: EQUAL
58844: IFTRUE 58896
58846: LD_INT 18
58848: DOUBLE
58849: EQUAL
58850: IFTRUE 58896
58852: LD_INT 19
58854: DOUBLE
58855: EQUAL
58856: IFTRUE 58896
58858: LD_INT 22
58860: DOUBLE
58861: EQUAL
58862: IFTRUE 58896
58864: LD_INT 20
58866: DOUBLE
58867: EQUAL
58868: IFTRUE 58896
58870: LD_INT 21
58872: DOUBLE
58873: EQUAL
58874: IFTRUE 58896
58876: LD_INT 23
58878: DOUBLE
58879: EQUAL
58880: IFTRUE 58896
58882: LD_INT 24
58884: DOUBLE
58885: EQUAL
58886: IFTRUE 58896
58888: LD_INT 25
58890: DOUBLE
58891: EQUAL
58892: IFTRUE 58896
58894: GO 58952
58896: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
58897: LD_ADDR_VAR 0 9
58901: PUSH
58902: LD_VAR 0 35
58906: PUSH
58907: LD_VAR 0 36
58911: PUSH
58912: LD_VAR 0 37
58916: PUSH
58917: LD_VAR 0 38
58921: PUSH
58922: LD_VAR 0 39
58926: PUSH
58927: LD_VAR 0 40
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: LIST
58936: LIST
58937: LIST
58938: LIST
58939: PUSH
58940: LD_VAR 0 4
58944: PUSH
58945: LD_INT 1
58947: PLUS
58948: ARRAY
58949: ST_TO_ADDR
58950: GO 59317
58952: LD_INT 6
58954: DOUBLE
58955: EQUAL
58956: IFTRUE 59008
58958: LD_INT 7
58960: DOUBLE
58961: EQUAL
58962: IFTRUE 59008
58964: LD_INT 8
58966: DOUBLE
58967: EQUAL
58968: IFTRUE 59008
58970: LD_INT 13
58972: DOUBLE
58973: EQUAL
58974: IFTRUE 59008
58976: LD_INT 12
58978: DOUBLE
58979: EQUAL
58980: IFTRUE 59008
58982: LD_INT 15
58984: DOUBLE
58985: EQUAL
58986: IFTRUE 59008
58988: LD_INT 11
58990: DOUBLE
58991: EQUAL
58992: IFTRUE 59008
58994: LD_INT 14
58996: DOUBLE
58997: EQUAL
58998: IFTRUE 59008
59000: LD_INT 10
59002: DOUBLE
59003: EQUAL
59004: IFTRUE 59008
59006: GO 59064
59008: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
59009: LD_ADDR_VAR 0 9
59013: PUSH
59014: LD_VAR 0 41
59018: PUSH
59019: LD_VAR 0 42
59023: PUSH
59024: LD_VAR 0 43
59028: PUSH
59029: LD_VAR 0 44
59033: PUSH
59034: LD_VAR 0 45
59038: PUSH
59039: LD_VAR 0 46
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: LIST
59048: LIST
59049: LIST
59050: LIST
59051: PUSH
59052: LD_VAR 0 4
59056: PUSH
59057: LD_INT 1
59059: PLUS
59060: ARRAY
59061: ST_TO_ADDR
59062: GO 59317
59064: LD_INT 36
59066: DOUBLE
59067: EQUAL
59068: IFTRUE 59072
59070: GO 59128
59072: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59073: LD_ADDR_VAR 0 9
59077: PUSH
59078: LD_VAR 0 47
59082: PUSH
59083: LD_VAR 0 48
59087: PUSH
59088: LD_VAR 0 49
59092: PUSH
59093: LD_VAR 0 50
59097: PUSH
59098: LD_VAR 0 51
59102: PUSH
59103: LD_VAR 0 52
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: PUSH
59116: LD_VAR 0 4
59120: PUSH
59121: LD_INT 1
59123: PLUS
59124: ARRAY
59125: ST_TO_ADDR
59126: GO 59317
59128: LD_INT 4
59130: DOUBLE
59131: EQUAL
59132: IFTRUE 59154
59134: LD_INT 5
59136: DOUBLE
59137: EQUAL
59138: IFTRUE 59154
59140: LD_INT 34
59142: DOUBLE
59143: EQUAL
59144: IFTRUE 59154
59146: LD_INT 37
59148: DOUBLE
59149: EQUAL
59150: IFTRUE 59154
59152: GO 59210
59154: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59155: LD_ADDR_VAR 0 9
59159: PUSH
59160: LD_VAR 0 53
59164: PUSH
59165: LD_VAR 0 54
59169: PUSH
59170: LD_VAR 0 55
59174: PUSH
59175: LD_VAR 0 56
59179: PUSH
59180: LD_VAR 0 57
59184: PUSH
59185: LD_VAR 0 58
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: LIST
59197: PUSH
59198: LD_VAR 0 4
59202: PUSH
59203: LD_INT 1
59205: PLUS
59206: ARRAY
59207: ST_TO_ADDR
59208: GO 59317
59210: LD_INT 31
59212: DOUBLE
59213: EQUAL
59214: IFTRUE 59260
59216: LD_INT 32
59218: DOUBLE
59219: EQUAL
59220: IFTRUE 59260
59222: LD_INT 33
59224: DOUBLE
59225: EQUAL
59226: IFTRUE 59260
59228: LD_INT 27
59230: DOUBLE
59231: EQUAL
59232: IFTRUE 59260
59234: LD_INT 26
59236: DOUBLE
59237: EQUAL
59238: IFTRUE 59260
59240: LD_INT 28
59242: DOUBLE
59243: EQUAL
59244: IFTRUE 59260
59246: LD_INT 29
59248: DOUBLE
59249: EQUAL
59250: IFTRUE 59260
59252: LD_INT 30
59254: DOUBLE
59255: EQUAL
59256: IFTRUE 59260
59258: GO 59316
59260: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59261: LD_ADDR_VAR 0 9
59265: PUSH
59266: LD_VAR 0 59
59270: PUSH
59271: LD_VAR 0 60
59275: PUSH
59276: LD_VAR 0 61
59280: PUSH
59281: LD_VAR 0 62
59285: PUSH
59286: LD_VAR 0 63
59290: PUSH
59291: LD_VAR 0 64
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: PUSH
59304: LD_VAR 0 4
59308: PUSH
59309: LD_INT 1
59311: PLUS
59312: ARRAY
59313: ST_TO_ADDR
59314: GO 59317
59316: POP
// temp_list2 = [ ] ;
59317: LD_ADDR_VAR 0 10
59321: PUSH
59322: EMPTY
59323: ST_TO_ADDR
// for i in temp_list do
59324: LD_ADDR_VAR 0 8
59328: PUSH
59329: LD_VAR 0 9
59333: PUSH
59334: FOR_IN
59335: IFFALSE 59387
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59337: LD_ADDR_VAR 0 10
59341: PUSH
59342: LD_VAR 0 10
59346: PUSH
59347: LD_VAR 0 8
59351: PUSH
59352: LD_INT 1
59354: ARRAY
59355: PUSH
59356: LD_VAR 0 2
59360: PLUS
59361: PUSH
59362: LD_VAR 0 8
59366: PUSH
59367: LD_INT 2
59369: ARRAY
59370: PUSH
59371: LD_VAR 0 3
59375: PLUS
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: EMPTY
59382: LIST
59383: ADD
59384: ST_TO_ADDR
59385: GO 59334
59387: POP
59388: POP
// result = temp_list2 ;
59389: LD_ADDR_VAR 0 7
59393: PUSH
59394: LD_VAR 0 10
59398: ST_TO_ADDR
// end ;
59399: LD_VAR 0 7
59403: RET
// export function EnemyInRange ( unit , dist ) ; begin
59404: LD_INT 0
59406: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59407: LD_ADDR_VAR 0 3
59411: PUSH
59412: LD_VAR 0 1
59416: PPUSH
59417: CALL_OW 255
59421: PPUSH
59422: LD_VAR 0 1
59426: PPUSH
59427: CALL_OW 250
59431: PPUSH
59432: LD_VAR 0 1
59436: PPUSH
59437: CALL_OW 251
59441: PPUSH
59442: LD_VAR 0 2
59446: PPUSH
59447: CALL 32777 0 4
59451: PUSH
59452: LD_INT 4
59454: ARRAY
59455: ST_TO_ADDR
// end ;
59456: LD_VAR 0 3
59460: RET
// export function PlayerSeeMe ( unit ) ; begin
59461: LD_INT 0
59463: PPUSH
// result := See ( your_side , unit ) ;
59464: LD_ADDR_VAR 0 2
59468: PUSH
59469: LD_OWVAR 2
59473: PPUSH
59474: LD_VAR 0 1
59478: PPUSH
59479: CALL_OW 292
59483: ST_TO_ADDR
// end ;
59484: LD_VAR 0 2
59488: RET
// export function ReverseDir ( unit ) ; begin
59489: LD_INT 0
59491: PPUSH
// if not unit then
59492: LD_VAR 0 1
59496: NOT
59497: IFFALSE 59501
// exit ;
59499: GO 59524
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59501: LD_ADDR_VAR 0 2
59505: PUSH
59506: LD_VAR 0 1
59510: PPUSH
59511: CALL_OW 254
59515: PUSH
59516: LD_INT 3
59518: PLUS
59519: PUSH
59520: LD_INT 6
59522: MOD
59523: ST_TO_ADDR
// end ;
59524: LD_VAR 0 2
59528: RET
// export function ReverseArray ( array ) ; var i ; begin
59529: LD_INT 0
59531: PPUSH
59532: PPUSH
// if not array then
59533: LD_VAR 0 1
59537: NOT
59538: IFFALSE 59542
// exit ;
59540: GO 59597
// result := [ ] ;
59542: LD_ADDR_VAR 0 2
59546: PUSH
59547: EMPTY
59548: ST_TO_ADDR
// for i := array downto 1 do
59549: LD_ADDR_VAR 0 3
59553: PUSH
59554: DOUBLE
59555: LD_VAR 0 1
59559: INC
59560: ST_TO_ADDR
59561: LD_INT 1
59563: PUSH
59564: FOR_DOWNTO
59565: IFFALSE 59595
// result := Join ( result , array [ i ] ) ;
59567: LD_ADDR_VAR 0 2
59571: PUSH
59572: LD_VAR 0 2
59576: PPUSH
59577: LD_VAR 0 1
59581: PUSH
59582: LD_VAR 0 3
59586: ARRAY
59587: PPUSH
59588: CALL 64240 0 2
59592: ST_TO_ADDR
59593: GO 59564
59595: POP
59596: POP
// end ;
59597: LD_VAR 0 2
59601: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
59602: LD_INT 0
59604: PPUSH
59605: PPUSH
59606: PPUSH
59607: PPUSH
59608: PPUSH
59609: PPUSH
// if not unit or not hexes then
59610: LD_VAR 0 1
59614: NOT
59615: PUSH
59616: LD_VAR 0 2
59620: NOT
59621: OR
59622: IFFALSE 59626
// exit ;
59624: GO 59749
// dist := 9999 ;
59626: LD_ADDR_VAR 0 5
59630: PUSH
59631: LD_INT 9999
59633: ST_TO_ADDR
// for i = 1 to hexes do
59634: LD_ADDR_VAR 0 4
59638: PUSH
59639: DOUBLE
59640: LD_INT 1
59642: DEC
59643: ST_TO_ADDR
59644: LD_VAR 0 2
59648: PUSH
59649: FOR_TO
59650: IFFALSE 59737
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59652: LD_ADDR_VAR 0 6
59656: PUSH
59657: LD_VAR 0 1
59661: PPUSH
59662: LD_VAR 0 2
59666: PUSH
59667: LD_VAR 0 4
59671: ARRAY
59672: PUSH
59673: LD_INT 1
59675: ARRAY
59676: PPUSH
59677: LD_VAR 0 2
59681: PUSH
59682: LD_VAR 0 4
59686: ARRAY
59687: PUSH
59688: LD_INT 2
59690: ARRAY
59691: PPUSH
59692: CALL_OW 297
59696: ST_TO_ADDR
// if tdist < dist then
59697: LD_VAR 0 6
59701: PUSH
59702: LD_VAR 0 5
59706: LESS
59707: IFFALSE 59735
// begin hex := hexes [ i ] ;
59709: LD_ADDR_VAR 0 8
59713: PUSH
59714: LD_VAR 0 2
59718: PUSH
59719: LD_VAR 0 4
59723: ARRAY
59724: ST_TO_ADDR
// dist := tdist ;
59725: LD_ADDR_VAR 0 5
59729: PUSH
59730: LD_VAR 0 6
59734: ST_TO_ADDR
// end ; end ;
59735: GO 59649
59737: POP
59738: POP
// result := hex ;
59739: LD_ADDR_VAR 0 3
59743: PUSH
59744: LD_VAR 0 8
59748: ST_TO_ADDR
// end ;
59749: LD_VAR 0 3
59753: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
59754: LD_INT 0
59756: PPUSH
59757: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
59758: LD_VAR 0 1
59762: NOT
59763: PUSH
59764: LD_VAR 0 1
59768: PUSH
59769: LD_INT 21
59771: PUSH
59772: LD_INT 2
59774: PUSH
59775: EMPTY
59776: LIST
59777: LIST
59778: PUSH
59779: LD_INT 23
59781: PUSH
59782: LD_INT 2
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PPUSH
59793: CALL_OW 69
59797: IN
59798: NOT
59799: OR
59800: IFFALSE 59804
// exit ;
59802: GO 59851
// for i = 1 to 3 do
59804: LD_ADDR_VAR 0 3
59808: PUSH
59809: DOUBLE
59810: LD_INT 1
59812: DEC
59813: ST_TO_ADDR
59814: LD_INT 3
59816: PUSH
59817: FOR_TO
59818: IFFALSE 59849
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
59820: LD_VAR 0 1
59824: PPUSH
59825: CALL_OW 250
59829: PPUSH
59830: LD_VAR 0 1
59834: PPUSH
59835: CALL_OW 251
59839: PPUSH
59840: LD_INT 1
59842: PPUSH
59843: CALL_OW 453
59847: GO 59817
59849: POP
59850: POP
// end ;
59851: LD_VAR 0 2
59855: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
59856: LD_INT 0
59858: PPUSH
59859: PPUSH
59860: PPUSH
59861: PPUSH
59862: PPUSH
59863: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
59864: LD_VAR 0 1
59868: NOT
59869: PUSH
59870: LD_VAR 0 2
59874: NOT
59875: OR
59876: PUSH
59877: LD_VAR 0 1
59881: PPUSH
59882: CALL_OW 314
59886: OR
59887: IFFALSE 59891
// exit ;
59889: GO 60358
// if GetLives ( i ) < 250 then
59891: LD_VAR 0 4
59895: PPUSH
59896: CALL_OW 256
59900: PUSH
59901: LD_INT 250
59903: LESS
59904: IFFALSE 59917
// begin ComAutodestruct ( i ) ;
59906: LD_VAR 0 4
59910: PPUSH
59911: CALL 59754 0 1
// exit ;
59915: GO 60358
// end ; x := GetX ( enemy_unit ) ;
59917: LD_ADDR_VAR 0 7
59921: PUSH
59922: LD_VAR 0 2
59926: PPUSH
59927: CALL_OW 250
59931: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
59932: LD_ADDR_VAR 0 8
59936: PUSH
59937: LD_VAR 0 2
59941: PPUSH
59942: CALL_OW 251
59946: ST_TO_ADDR
// if not x or not y then
59947: LD_VAR 0 7
59951: NOT
59952: PUSH
59953: LD_VAR 0 8
59957: NOT
59958: OR
59959: IFFALSE 59963
// exit ;
59961: GO 60358
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
59963: LD_ADDR_VAR 0 6
59967: PUSH
59968: LD_VAR 0 7
59972: PPUSH
59973: LD_INT 0
59975: PPUSH
59976: LD_INT 4
59978: PPUSH
59979: CALL_OW 272
59983: PUSH
59984: LD_VAR 0 8
59988: PPUSH
59989: LD_INT 0
59991: PPUSH
59992: LD_INT 4
59994: PPUSH
59995: CALL_OW 273
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_VAR 0 7
60008: PPUSH
60009: LD_INT 1
60011: PPUSH
60012: LD_INT 4
60014: PPUSH
60015: CALL_OW 272
60019: PUSH
60020: LD_VAR 0 8
60024: PPUSH
60025: LD_INT 1
60027: PPUSH
60028: LD_INT 4
60030: PPUSH
60031: CALL_OW 273
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: LD_VAR 0 7
60044: PPUSH
60045: LD_INT 2
60047: PPUSH
60048: LD_INT 4
60050: PPUSH
60051: CALL_OW 272
60055: PUSH
60056: LD_VAR 0 8
60060: PPUSH
60061: LD_INT 2
60063: PPUSH
60064: LD_INT 4
60066: PPUSH
60067: CALL_OW 273
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_VAR 0 7
60080: PPUSH
60081: LD_INT 3
60083: PPUSH
60084: LD_INT 4
60086: PPUSH
60087: CALL_OW 272
60091: PUSH
60092: LD_VAR 0 8
60096: PPUSH
60097: LD_INT 3
60099: PPUSH
60100: LD_INT 4
60102: PPUSH
60103: CALL_OW 273
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: LD_VAR 0 7
60116: PPUSH
60117: LD_INT 4
60119: PPUSH
60120: LD_INT 4
60122: PPUSH
60123: CALL_OW 272
60127: PUSH
60128: LD_VAR 0 8
60132: PPUSH
60133: LD_INT 4
60135: PPUSH
60136: LD_INT 4
60138: PPUSH
60139: CALL_OW 273
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PUSH
60148: LD_VAR 0 7
60152: PPUSH
60153: LD_INT 5
60155: PPUSH
60156: LD_INT 4
60158: PPUSH
60159: CALL_OW 272
60163: PUSH
60164: LD_VAR 0 8
60168: PPUSH
60169: LD_INT 5
60171: PPUSH
60172: LD_INT 4
60174: PPUSH
60175: CALL_OW 273
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: ST_TO_ADDR
// for i = tmp downto 1 do
60192: LD_ADDR_VAR 0 4
60196: PUSH
60197: DOUBLE
60198: LD_VAR 0 6
60202: INC
60203: ST_TO_ADDR
60204: LD_INT 1
60206: PUSH
60207: FOR_DOWNTO
60208: IFFALSE 60309
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60210: LD_VAR 0 6
60214: PUSH
60215: LD_VAR 0 4
60219: ARRAY
60220: PUSH
60221: LD_INT 1
60223: ARRAY
60224: PPUSH
60225: LD_VAR 0 6
60229: PUSH
60230: LD_VAR 0 4
60234: ARRAY
60235: PUSH
60236: LD_INT 2
60238: ARRAY
60239: PPUSH
60240: CALL_OW 488
60244: NOT
60245: PUSH
60246: LD_VAR 0 6
60250: PUSH
60251: LD_VAR 0 4
60255: ARRAY
60256: PUSH
60257: LD_INT 1
60259: ARRAY
60260: PPUSH
60261: LD_VAR 0 6
60265: PUSH
60266: LD_VAR 0 4
60270: ARRAY
60271: PUSH
60272: LD_INT 2
60274: ARRAY
60275: PPUSH
60276: CALL_OW 428
60280: PUSH
60281: LD_INT 0
60283: NONEQUAL
60284: OR
60285: IFFALSE 60307
// tmp := Delete ( tmp , i ) ;
60287: LD_ADDR_VAR 0 6
60291: PUSH
60292: LD_VAR 0 6
60296: PPUSH
60297: LD_VAR 0 4
60301: PPUSH
60302: CALL_OW 3
60306: ST_TO_ADDR
60307: GO 60207
60309: POP
60310: POP
// j := GetClosestHex ( unit , tmp ) ;
60311: LD_ADDR_VAR 0 5
60315: PUSH
60316: LD_VAR 0 1
60320: PPUSH
60321: LD_VAR 0 6
60325: PPUSH
60326: CALL 59602 0 2
60330: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60331: LD_VAR 0 1
60335: PPUSH
60336: LD_VAR 0 5
60340: PUSH
60341: LD_INT 1
60343: ARRAY
60344: PPUSH
60345: LD_VAR 0 5
60349: PUSH
60350: LD_INT 2
60352: ARRAY
60353: PPUSH
60354: CALL_OW 111
// end ;
60358: LD_VAR 0 3
60362: RET
// export function PrepareApemanSoldier ( ) ; begin
60363: LD_INT 0
60365: PPUSH
// uc_nation := 0 ;
60366: LD_ADDR_OWVAR 21
60370: PUSH
60371: LD_INT 0
60373: ST_TO_ADDR
// hc_sex := sex_male ;
60374: LD_ADDR_OWVAR 27
60378: PUSH
60379: LD_INT 1
60381: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
60382: LD_ADDR_OWVAR 28
60386: PUSH
60387: LD_INT 15
60389: ST_TO_ADDR
// hc_gallery :=  ;
60390: LD_ADDR_OWVAR 33
60394: PUSH
60395: LD_STRING 
60397: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60398: LD_ADDR_OWVAR 31
60402: PUSH
60403: LD_INT 0
60405: PPUSH
60406: LD_INT 3
60408: PPUSH
60409: CALL_OW 12
60413: PUSH
60414: LD_INT 0
60416: PPUSH
60417: LD_INT 3
60419: PPUSH
60420: CALL_OW 12
60424: PUSH
60425: LD_INT 0
60427: PUSH
60428: LD_INT 0
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: ST_TO_ADDR
// end ;
60437: LD_VAR 0 1
60441: RET
// export function PrepareApemanEngineer ( ) ; begin
60442: LD_INT 0
60444: PPUSH
// uc_nation := 0 ;
60445: LD_ADDR_OWVAR 21
60449: PUSH
60450: LD_INT 0
60452: ST_TO_ADDR
// hc_sex := sex_male ;
60453: LD_ADDR_OWVAR 27
60457: PUSH
60458: LD_INT 1
60460: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
60461: LD_ADDR_OWVAR 28
60465: PUSH
60466: LD_INT 16
60468: ST_TO_ADDR
// hc_gallery :=  ;
60469: LD_ADDR_OWVAR 33
60473: PUSH
60474: LD_STRING 
60476: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60477: LD_ADDR_OWVAR 31
60481: PUSH
60482: LD_INT 0
60484: PPUSH
60485: LD_INT 3
60487: PPUSH
60488: CALL_OW 12
60492: PUSH
60493: LD_INT 0
60495: PPUSH
60496: LD_INT 3
60498: PPUSH
60499: CALL_OW 12
60503: PUSH
60504: LD_INT 0
60506: PUSH
60507: LD_INT 0
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: LIST
60514: LIST
60515: ST_TO_ADDR
// end ;
60516: LD_VAR 0 1
60520: RET
// export function PrepareApeman ( agressivity ) ; begin
60521: LD_INT 0
60523: PPUSH
// uc_side := 0 ;
60524: LD_ADDR_OWVAR 20
60528: PUSH
60529: LD_INT 0
60531: ST_TO_ADDR
// uc_nation := 0 ;
60532: LD_ADDR_OWVAR 21
60536: PUSH
60537: LD_INT 0
60539: ST_TO_ADDR
// hc_sex := sex_male ;
60540: LD_ADDR_OWVAR 27
60544: PUSH
60545: LD_INT 1
60547: ST_TO_ADDR
// hc_class := class_apeman ;
60548: LD_ADDR_OWVAR 28
60552: PUSH
60553: LD_INT 12
60555: ST_TO_ADDR
// hc_gallery :=  ;
60556: LD_ADDR_OWVAR 33
60560: PUSH
60561: LD_STRING 
60563: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60564: LD_ADDR_OWVAR 35
60568: PUSH
60569: LD_VAR 0 1
60573: NEG
60574: PPUSH
60575: LD_VAR 0 1
60579: PPUSH
60580: CALL_OW 12
60584: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60585: LD_ADDR_OWVAR 31
60589: PUSH
60590: LD_INT 0
60592: PPUSH
60593: LD_INT 3
60595: PPUSH
60596: CALL_OW 12
60600: PUSH
60601: LD_INT 0
60603: PPUSH
60604: LD_INT 3
60606: PPUSH
60607: CALL_OW 12
60611: PUSH
60612: LD_INT 0
60614: PUSH
60615: LD_INT 0
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: ST_TO_ADDR
// end ;
60624: LD_VAR 0 2
60628: RET
// export function PrepareTiger ( agressivity ) ; begin
60629: LD_INT 0
60631: PPUSH
// uc_side := 0 ;
60632: LD_ADDR_OWVAR 20
60636: PUSH
60637: LD_INT 0
60639: ST_TO_ADDR
// uc_nation := 0 ;
60640: LD_ADDR_OWVAR 21
60644: PUSH
60645: LD_INT 0
60647: ST_TO_ADDR
// hc_class := class_tiger ;
60648: LD_ADDR_OWVAR 28
60652: PUSH
60653: LD_INT 14
60655: ST_TO_ADDR
// hc_gallery :=  ;
60656: LD_ADDR_OWVAR 33
60660: PUSH
60661: LD_STRING 
60663: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60664: LD_ADDR_OWVAR 35
60668: PUSH
60669: LD_VAR 0 1
60673: NEG
60674: PPUSH
60675: LD_VAR 0 1
60679: PPUSH
60680: CALL_OW 12
60684: ST_TO_ADDR
// end ;
60685: LD_VAR 0 2
60689: RET
// export function PrepareEnchidna ( ) ; begin
60690: LD_INT 0
60692: PPUSH
// uc_side := 0 ;
60693: LD_ADDR_OWVAR 20
60697: PUSH
60698: LD_INT 0
60700: ST_TO_ADDR
// uc_nation := 0 ;
60701: LD_ADDR_OWVAR 21
60705: PUSH
60706: LD_INT 0
60708: ST_TO_ADDR
// hc_class := class_baggie ;
60709: LD_ADDR_OWVAR 28
60713: PUSH
60714: LD_INT 13
60716: ST_TO_ADDR
// hc_gallery :=  ;
60717: LD_ADDR_OWVAR 33
60721: PUSH
60722: LD_STRING 
60724: ST_TO_ADDR
// end ;
60725: LD_VAR 0 1
60729: RET
// export function PrepareFrog ( ) ; begin
60730: LD_INT 0
60732: PPUSH
// uc_side := 0 ;
60733: LD_ADDR_OWVAR 20
60737: PUSH
60738: LD_INT 0
60740: ST_TO_ADDR
// uc_nation := 0 ;
60741: LD_ADDR_OWVAR 21
60745: PUSH
60746: LD_INT 0
60748: ST_TO_ADDR
// hc_class := class_frog ;
60749: LD_ADDR_OWVAR 28
60753: PUSH
60754: LD_INT 19
60756: ST_TO_ADDR
// hc_gallery :=  ;
60757: LD_ADDR_OWVAR 33
60761: PUSH
60762: LD_STRING 
60764: ST_TO_ADDR
// end ;
60765: LD_VAR 0 1
60769: RET
// export function PrepareFish ( ) ; begin
60770: LD_INT 0
60772: PPUSH
// uc_side := 0 ;
60773: LD_ADDR_OWVAR 20
60777: PUSH
60778: LD_INT 0
60780: ST_TO_ADDR
// uc_nation := 0 ;
60781: LD_ADDR_OWVAR 21
60785: PUSH
60786: LD_INT 0
60788: ST_TO_ADDR
// hc_class := class_fish ;
60789: LD_ADDR_OWVAR 28
60793: PUSH
60794: LD_INT 20
60796: ST_TO_ADDR
// hc_gallery :=  ;
60797: LD_ADDR_OWVAR 33
60801: PUSH
60802: LD_STRING 
60804: ST_TO_ADDR
// end ;
60805: LD_VAR 0 1
60809: RET
// export function PrepareBird ( ) ; begin
60810: LD_INT 0
60812: PPUSH
// uc_side := 0 ;
60813: LD_ADDR_OWVAR 20
60817: PUSH
60818: LD_INT 0
60820: ST_TO_ADDR
// uc_nation := 0 ;
60821: LD_ADDR_OWVAR 21
60825: PUSH
60826: LD_INT 0
60828: ST_TO_ADDR
// hc_class := class_phororhacos ;
60829: LD_ADDR_OWVAR 28
60833: PUSH
60834: LD_INT 18
60836: ST_TO_ADDR
// hc_gallery :=  ;
60837: LD_ADDR_OWVAR 33
60841: PUSH
60842: LD_STRING 
60844: ST_TO_ADDR
// end ;
60845: LD_VAR 0 1
60849: RET
// export function PrepareHorse ( ) ; begin
60850: LD_INT 0
60852: PPUSH
// uc_side := 0 ;
60853: LD_ADDR_OWVAR 20
60857: PUSH
60858: LD_INT 0
60860: ST_TO_ADDR
// uc_nation := 0 ;
60861: LD_ADDR_OWVAR 21
60865: PUSH
60866: LD_INT 0
60868: ST_TO_ADDR
// hc_class := class_horse ;
60869: LD_ADDR_OWVAR 28
60873: PUSH
60874: LD_INT 21
60876: ST_TO_ADDR
// hc_gallery :=  ;
60877: LD_ADDR_OWVAR 33
60881: PUSH
60882: LD_STRING 
60884: ST_TO_ADDR
// end ;
60885: LD_VAR 0 1
60889: RET
// export function PrepareMastodont ( ) ; begin
60890: LD_INT 0
60892: PPUSH
// uc_side := 0 ;
60893: LD_ADDR_OWVAR 20
60897: PUSH
60898: LD_INT 0
60900: ST_TO_ADDR
// uc_nation := 0 ;
60901: LD_ADDR_OWVAR 21
60905: PUSH
60906: LD_INT 0
60908: ST_TO_ADDR
// vc_chassis := class_mastodont ;
60909: LD_ADDR_OWVAR 37
60913: PUSH
60914: LD_INT 31
60916: ST_TO_ADDR
// vc_control := control_rider ;
60917: LD_ADDR_OWVAR 38
60921: PUSH
60922: LD_INT 4
60924: ST_TO_ADDR
// end ;
60925: LD_VAR 0 1
60929: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
60930: LD_INT 0
60932: PPUSH
60933: PPUSH
60934: PPUSH
// uc_side = 0 ;
60935: LD_ADDR_OWVAR 20
60939: PUSH
60940: LD_INT 0
60942: ST_TO_ADDR
// uc_nation = 0 ;
60943: LD_ADDR_OWVAR 21
60947: PUSH
60948: LD_INT 0
60950: ST_TO_ADDR
// InitHc_All ( ) ;
60951: CALL_OW 584
// InitVc ;
60955: CALL_OW 20
// if mastodonts then
60959: LD_VAR 0 6
60963: IFFALSE 61030
// for i = 1 to mastodonts do
60965: LD_ADDR_VAR 0 11
60969: PUSH
60970: DOUBLE
60971: LD_INT 1
60973: DEC
60974: ST_TO_ADDR
60975: LD_VAR 0 6
60979: PUSH
60980: FOR_TO
60981: IFFALSE 61028
// begin vc_chassis := 31 ;
60983: LD_ADDR_OWVAR 37
60987: PUSH
60988: LD_INT 31
60990: ST_TO_ADDR
// vc_control := control_rider ;
60991: LD_ADDR_OWVAR 38
60995: PUSH
60996: LD_INT 4
60998: ST_TO_ADDR
// animal := CreateVehicle ;
60999: LD_ADDR_VAR 0 12
61003: PUSH
61004: CALL_OW 45
61008: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61009: LD_VAR 0 12
61013: PPUSH
61014: LD_VAR 0 8
61018: PPUSH
61019: LD_INT 0
61021: PPUSH
61022: CALL 63158 0 3
// end ;
61026: GO 60980
61028: POP
61029: POP
// if horses then
61030: LD_VAR 0 5
61034: IFFALSE 61101
// for i = 1 to horses do
61036: LD_ADDR_VAR 0 11
61040: PUSH
61041: DOUBLE
61042: LD_INT 1
61044: DEC
61045: ST_TO_ADDR
61046: LD_VAR 0 5
61050: PUSH
61051: FOR_TO
61052: IFFALSE 61099
// begin hc_class := 21 ;
61054: LD_ADDR_OWVAR 28
61058: PUSH
61059: LD_INT 21
61061: ST_TO_ADDR
// hc_gallery :=  ;
61062: LD_ADDR_OWVAR 33
61066: PUSH
61067: LD_STRING 
61069: ST_TO_ADDR
// animal := CreateHuman ;
61070: LD_ADDR_VAR 0 12
61074: PUSH
61075: CALL_OW 44
61079: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61080: LD_VAR 0 12
61084: PPUSH
61085: LD_VAR 0 8
61089: PPUSH
61090: LD_INT 0
61092: PPUSH
61093: CALL 63158 0 3
// end ;
61097: GO 61051
61099: POP
61100: POP
// if birds then
61101: LD_VAR 0 1
61105: IFFALSE 61172
// for i = 1 to birds do
61107: LD_ADDR_VAR 0 11
61111: PUSH
61112: DOUBLE
61113: LD_INT 1
61115: DEC
61116: ST_TO_ADDR
61117: LD_VAR 0 1
61121: PUSH
61122: FOR_TO
61123: IFFALSE 61170
// begin hc_class := 18 ;
61125: LD_ADDR_OWVAR 28
61129: PUSH
61130: LD_INT 18
61132: ST_TO_ADDR
// hc_gallery =  ;
61133: LD_ADDR_OWVAR 33
61137: PUSH
61138: LD_STRING 
61140: ST_TO_ADDR
// animal := CreateHuman ;
61141: LD_ADDR_VAR 0 12
61145: PUSH
61146: CALL_OW 44
61150: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61151: LD_VAR 0 12
61155: PPUSH
61156: LD_VAR 0 8
61160: PPUSH
61161: LD_INT 0
61163: PPUSH
61164: CALL 63158 0 3
// end ;
61168: GO 61122
61170: POP
61171: POP
// if tigers then
61172: LD_VAR 0 2
61176: IFFALSE 61260
// for i = 1 to tigers do
61178: LD_ADDR_VAR 0 11
61182: PUSH
61183: DOUBLE
61184: LD_INT 1
61186: DEC
61187: ST_TO_ADDR
61188: LD_VAR 0 2
61192: PUSH
61193: FOR_TO
61194: IFFALSE 61258
// begin hc_class = class_tiger ;
61196: LD_ADDR_OWVAR 28
61200: PUSH
61201: LD_INT 14
61203: ST_TO_ADDR
// hc_gallery =  ;
61204: LD_ADDR_OWVAR 33
61208: PUSH
61209: LD_STRING 
61211: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61212: LD_ADDR_OWVAR 35
61216: PUSH
61217: LD_INT 7
61219: NEG
61220: PPUSH
61221: LD_INT 7
61223: PPUSH
61224: CALL_OW 12
61228: ST_TO_ADDR
// animal := CreateHuman ;
61229: LD_ADDR_VAR 0 12
61233: PUSH
61234: CALL_OW 44
61238: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61239: LD_VAR 0 12
61243: PPUSH
61244: LD_VAR 0 8
61248: PPUSH
61249: LD_INT 0
61251: PPUSH
61252: CALL 63158 0 3
// end ;
61256: GO 61193
61258: POP
61259: POP
// if apemans then
61260: LD_VAR 0 3
61264: IFFALSE 61387
// for i = 1 to apemans do
61266: LD_ADDR_VAR 0 11
61270: PUSH
61271: DOUBLE
61272: LD_INT 1
61274: DEC
61275: ST_TO_ADDR
61276: LD_VAR 0 3
61280: PUSH
61281: FOR_TO
61282: IFFALSE 61385
// begin hc_class = class_apeman ;
61284: LD_ADDR_OWVAR 28
61288: PUSH
61289: LD_INT 12
61291: ST_TO_ADDR
// hc_gallery =  ;
61292: LD_ADDR_OWVAR 33
61296: PUSH
61297: LD_STRING 
61299: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
61300: LD_ADDR_OWVAR 35
61304: PUSH
61305: LD_INT 2
61307: NEG
61308: PPUSH
61309: LD_INT 2
61311: PPUSH
61312: CALL_OW 12
61316: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61317: LD_ADDR_OWVAR 31
61321: PUSH
61322: LD_INT 1
61324: PPUSH
61325: LD_INT 3
61327: PPUSH
61328: CALL_OW 12
61332: PUSH
61333: LD_INT 1
61335: PPUSH
61336: LD_INT 3
61338: PPUSH
61339: CALL_OW 12
61343: PUSH
61344: LD_INT 0
61346: PUSH
61347: LD_INT 0
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: ST_TO_ADDR
// animal := CreateHuman ;
61356: LD_ADDR_VAR 0 12
61360: PUSH
61361: CALL_OW 44
61365: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61366: LD_VAR 0 12
61370: PPUSH
61371: LD_VAR 0 8
61375: PPUSH
61376: LD_INT 0
61378: PPUSH
61379: CALL 63158 0 3
// end ;
61383: GO 61281
61385: POP
61386: POP
// if enchidnas then
61387: LD_VAR 0 4
61391: IFFALSE 61458
// for i = 1 to enchidnas do
61393: LD_ADDR_VAR 0 11
61397: PUSH
61398: DOUBLE
61399: LD_INT 1
61401: DEC
61402: ST_TO_ADDR
61403: LD_VAR 0 4
61407: PUSH
61408: FOR_TO
61409: IFFALSE 61456
// begin hc_class = 13 ;
61411: LD_ADDR_OWVAR 28
61415: PUSH
61416: LD_INT 13
61418: ST_TO_ADDR
// hc_gallery =  ;
61419: LD_ADDR_OWVAR 33
61423: PUSH
61424: LD_STRING 
61426: ST_TO_ADDR
// animal := CreateHuman ;
61427: LD_ADDR_VAR 0 12
61431: PUSH
61432: CALL_OW 44
61436: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61437: LD_VAR 0 12
61441: PPUSH
61442: LD_VAR 0 8
61446: PPUSH
61447: LD_INT 0
61449: PPUSH
61450: CALL 63158 0 3
// end ;
61454: GO 61408
61456: POP
61457: POP
// if fishes then
61458: LD_VAR 0 7
61462: IFFALSE 61529
// for i = 1 to fishes do
61464: LD_ADDR_VAR 0 11
61468: PUSH
61469: DOUBLE
61470: LD_INT 1
61472: DEC
61473: ST_TO_ADDR
61474: LD_VAR 0 7
61478: PUSH
61479: FOR_TO
61480: IFFALSE 61527
// begin hc_class = 20 ;
61482: LD_ADDR_OWVAR 28
61486: PUSH
61487: LD_INT 20
61489: ST_TO_ADDR
// hc_gallery =  ;
61490: LD_ADDR_OWVAR 33
61494: PUSH
61495: LD_STRING 
61497: ST_TO_ADDR
// animal := CreateHuman ;
61498: LD_ADDR_VAR 0 12
61502: PUSH
61503: CALL_OW 44
61507: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61508: LD_VAR 0 12
61512: PPUSH
61513: LD_VAR 0 9
61517: PPUSH
61518: LD_INT 0
61520: PPUSH
61521: CALL 63158 0 3
// end ;
61525: GO 61479
61527: POP
61528: POP
// end ;
61529: LD_VAR 0 10
61533: RET
// export function WantHeal ( sci , unit ) ; begin
61534: LD_INT 0
61536: PPUSH
// if GetTaskList ( sci ) > 0 then
61537: LD_VAR 0 1
61541: PPUSH
61542: CALL_OW 437
61546: PUSH
61547: LD_INT 0
61549: GREATER
61550: IFFALSE 61620
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61552: LD_VAR 0 1
61556: PPUSH
61557: CALL_OW 437
61561: PUSH
61562: LD_INT 1
61564: ARRAY
61565: PUSH
61566: LD_INT 1
61568: ARRAY
61569: PUSH
61570: LD_STRING l
61572: EQUAL
61573: PUSH
61574: LD_VAR 0 1
61578: PPUSH
61579: CALL_OW 437
61583: PUSH
61584: LD_INT 1
61586: ARRAY
61587: PUSH
61588: LD_INT 4
61590: ARRAY
61591: PUSH
61592: LD_VAR 0 2
61596: EQUAL
61597: AND
61598: IFFALSE 61610
// result := true else
61600: LD_ADDR_VAR 0 3
61604: PUSH
61605: LD_INT 1
61607: ST_TO_ADDR
61608: GO 61618
// result := false ;
61610: LD_ADDR_VAR 0 3
61614: PUSH
61615: LD_INT 0
61617: ST_TO_ADDR
// end else
61618: GO 61628
// result := false ;
61620: LD_ADDR_VAR 0 3
61624: PUSH
61625: LD_INT 0
61627: ST_TO_ADDR
// end ;
61628: LD_VAR 0 3
61632: RET
// export function HealTarget ( sci ) ; begin
61633: LD_INT 0
61635: PPUSH
// if not sci then
61636: LD_VAR 0 1
61640: NOT
61641: IFFALSE 61645
// exit ;
61643: GO 61710
// result := 0 ;
61645: LD_ADDR_VAR 0 2
61649: PUSH
61650: LD_INT 0
61652: ST_TO_ADDR
// if GetTaskList ( sci ) then
61653: LD_VAR 0 1
61657: PPUSH
61658: CALL_OW 437
61662: IFFALSE 61710
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61664: LD_VAR 0 1
61668: PPUSH
61669: CALL_OW 437
61673: PUSH
61674: LD_INT 1
61676: ARRAY
61677: PUSH
61678: LD_INT 1
61680: ARRAY
61681: PUSH
61682: LD_STRING l
61684: EQUAL
61685: IFFALSE 61710
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
61687: LD_ADDR_VAR 0 2
61691: PUSH
61692: LD_VAR 0 1
61696: PPUSH
61697: CALL_OW 437
61701: PUSH
61702: LD_INT 1
61704: ARRAY
61705: PUSH
61706: LD_INT 4
61708: ARRAY
61709: ST_TO_ADDR
// end ;
61710: LD_VAR 0 2
61714: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
61715: LD_INT 0
61717: PPUSH
61718: PPUSH
61719: PPUSH
61720: PPUSH
// if not base_units then
61721: LD_VAR 0 1
61725: NOT
61726: IFFALSE 61730
// exit ;
61728: GO 61817
// result := false ;
61730: LD_ADDR_VAR 0 2
61734: PUSH
61735: LD_INT 0
61737: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
61738: LD_ADDR_VAR 0 5
61742: PUSH
61743: LD_VAR 0 1
61747: PPUSH
61748: LD_INT 21
61750: PUSH
61751: LD_INT 3
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: PPUSH
61758: CALL_OW 72
61762: ST_TO_ADDR
// if not tmp then
61763: LD_VAR 0 5
61767: NOT
61768: IFFALSE 61772
// exit ;
61770: GO 61817
// for i in tmp do
61772: LD_ADDR_VAR 0 3
61776: PUSH
61777: LD_VAR 0 5
61781: PUSH
61782: FOR_IN
61783: IFFALSE 61815
// begin result := EnemyInRange ( i , 22 ) ;
61785: LD_ADDR_VAR 0 2
61789: PUSH
61790: LD_VAR 0 3
61794: PPUSH
61795: LD_INT 22
61797: PPUSH
61798: CALL 59404 0 2
61802: ST_TO_ADDR
// if result then
61803: LD_VAR 0 2
61807: IFFALSE 61813
// exit ;
61809: POP
61810: POP
61811: GO 61817
// end ;
61813: GO 61782
61815: POP
61816: POP
// end ;
61817: LD_VAR 0 2
61821: RET
// export function FilterByTag ( units , tag ) ; begin
61822: LD_INT 0
61824: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
61825: LD_ADDR_VAR 0 3
61829: PUSH
61830: LD_VAR 0 1
61834: PPUSH
61835: LD_INT 120
61837: PUSH
61838: LD_VAR 0 2
61842: PUSH
61843: EMPTY
61844: LIST
61845: LIST
61846: PPUSH
61847: CALL_OW 72
61851: ST_TO_ADDR
// end ;
61852: LD_VAR 0 3
61856: RET
// export function IsDriver ( un ) ; begin
61857: LD_INT 0
61859: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
61860: LD_ADDR_VAR 0 2
61864: PUSH
61865: LD_VAR 0 1
61869: PUSH
61870: LD_INT 55
61872: PUSH
61873: EMPTY
61874: LIST
61875: PPUSH
61876: CALL_OW 69
61880: IN
61881: ST_TO_ADDR
// end ;
61882: LD_VAR 0 2
61886: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
61887: LD_INT 0
61889: PPUSH
61890: PPUSH
// list := [ ] ;
61891: LD_ADDR_VAR 0 5
61895: PUSH
61896: EMPTY
61897: ST_TO_ADDR
// case d of 0 :
61898: LD_VAR 0 3
61902: PUSH
61903: LD_INT 0
61905: DOUBLE
61906: EQUAL
61907: IFTRUE 61911
61909: GO 62044
61911: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
61912: LD_ADDR_VAR 0 5
61916: PUSH
61917: LD_VAR 0 1
61921: PUSH
61922: LD_INT 4
61924: MINUS
61925: PUSH
61926: LD_VAR 0 2
61930: PUSH
61931: LD_INT 4
61933: MINUS
61934: PUSH
61935: LD_INT 2
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: LIST
61942: PUSH
61943: LD_VAR 0 1
61947: PUSH
61948: LD_INT 3
61950: MINUS
61951: PUSH
61952: LD_VAR 0 2
61956: PUSH
61957: LD_INT 1
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: LIST
61964: PUSH
61965: LD_VAR 0 1
61969: PUSH
61970: LD_INT 4
61972: PLUS
61973: PUSH
61974: LD_VAR 0 2
61978: PUSH
61979: LD_INT 4
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: LIST
61986: PUSH
61987: LD_VAR 0 1
61991: PUSH
61992: LD_INT 3
61994: PLUS
61995: PUSH
61996: LD_VAR 0 2
62000: PUSH
62001: LD_INT 3
62003: PLUS
62004: PUSH
62005: LD_INT 5
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: LIST
62012: PUSH
62013: LD_VAR 0 1
62017: PUSH
62018: LD_VAR 0 2
62022: PUSH
62023: LD_INT 4
62025: PLUS
62026: PUSH
62027: LD_INT 0
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: LIST
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: LIST
62039: LIST
62040: LIST
62041: ST_TO_ADDR
// end ; 1 :
62042: GO 62742
62044: LD_INT 1
62046: DOUBLE
62047: EQUAL
62048: IFTRUE 62052
62050: GO 62185
62052: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62053: LD_ADDR_VAR 0 5
62057: PUSH
62058: LD_VAR 0 1
62062: PUSH
62063: LD_VAR 0 2
62067: PUSH
62068: LD_INT 4
62070: MINUS
62071: PUSH
62072: LD_INT 3
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: LIST
62079: PUSH
62080: LD_VAR 0 1
62084: PUSH
62085: LD_INT 3
62087: MINUS
62088: PUSH
62089: LD_VAR 0 2
62093: PUSH
62094: LD_INT 3
62096: MINUS
62097: PUSH
62098: LD_INT 2
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: LIST
62105: PUSH
62106: LD_VAR 0 1
62110: PUSH
62111: LD_INT 4
62113: MINUS
62114: PUSH
62115: LD_VAR 0 2
62119: PUSH
62120: LD_INT 1
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: LIST
62127: PUSH
62128: LD_VAR 0 1
62132: PUSH
62133: LD_VAR 0 2
62137: PUSH
62138: LD_INT 3
62140: PLUS
62141: PUSH
62142: LD_INT 0
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: LIST
62149: PUSH
62150: LD_VAR 0 1
62154: PUSH
62155: LD_INT 4
62157: PLUS
62158: PUSH
62159: LD_VAR 0 2
62163: PUSH
62164: LD_INT 4
62166: PLUS
62167: PUSH
62168: LD_INT 5
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: LIST
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: LIST
62180: LIST
62181: LIST
62182: ST_TO_ADDR
// end ; 2 :
62183: GO 62742
62185: LD_INT 2
62187: DOUBLE
62188: EQUAL
62189: IFTRUE 62193
62191: GO 62322
62193: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62194: LD_ADDR_VAR 0 5
62198: PUSH
62199: LD_VAR 0 1
62203: PUSH
62204: LD_VAR 0 2
62208: PUSH
62209: LD_INT 3
62211: MINUS
62212: PUSH
62213: LD_INT 3
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: LIST
62220: PUSH
62221: LD_VAR 0 1
62225: PUSH
62226: LD_INT 4
62228: PLUS
62229: PUSH
62230: LD_VAR 0 2
62234: PUSH
62235: LD_INT 4
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: LIST
62242: PUSH
62243: LD_VAR 0 1
62247: PUSH
62248: LD_VAR 0 2
62252: PUSH
62253: LD_INT 4
62255: PLUS
62256: PUSH
62257: LD_INT 0
62259: PUSH
62260: EMPTY
62261: LIST
62262: LIST
62263: LIST
62264: PUSH
62265: LD_VAR 0 1
62269: PUSH
62270: LD_INT 3
62272: MINUS
62273: PUSH
62274: LD_VAR 0 2
62278: PUSH
62279: LD_INT 1
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: LIST
62286: PUSH
62287: LD_VAR 0 1
62291: PUSH
62292: LD_INT 4
62294: MINUS
62295: PUSH
62296: LD_VAR 0 2
62300: PUSH
62301: LD_INT 4
62303: MINUS
62304: PUSH
62305: LD_INT 2
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: LIST
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: LIST
62319: ST_TO_ADDR
// end ; 3 :
62320: GO 62742
62322: LD_INT 3
62324: DOUBLE
62325: EQUAL
62326: IFTRUE 62330
62328: GO 62463
62330: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62331: LD_ADDR_VAR 0 5
62335: PUSH
62336: LD_VAR 0 1
62340: PUSH
62341: LD_INT 3
62343: PLUS
62344: PUSH
62345: LD_VAR 0 2
62349: PUSH
62350: LD_INT 4
62352: PUSH
62353: EMPTY
62354: LIST
62355: LIST
62356: LIST
62357: PUSH
62358: LD_VAR 0 1
62362: PUSH
62363: LD_INT 4
62365: PLUS
62366: PUSH
62367: LD_VAR 0 2
62371: PUSH
62372: LD_INT 4
62374: PLUS
62375: PUSH
62376: LD_INT 5
62378: PUSH
62379: EMPTY
62380: LIST
62381: LIST
62382: LIST
62383: PUSH
62384: LD_VAR 0 1
62388: PUSH
62389: LD_INT 4
62391: MINUS
62392: PUSH
62393: LD_VAR 0 2
62397: PUSH
62398: LD_INT 1
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: LIST
62405: PUSH
62406: LD_VAR 0 1
62410: PUSH
62411: LD_VAR 0 2
62415: PUSH
62416: LD_INT 4
62418: MINUS
62419: PUSH
62420: LD_INT 3
62422: PUSH
62423: EMPTY
62424: LIST
62425: LIST
62426: LIST
62427: PUSH
62428: LD_VAR 0 1
62432: PUSH
62433: LD_INT 3
62435: MINUS
62436: PUSH
62437: LD_VAR 0 2
62441: PUSH
62442: LD_INT 3
62444: MINUS
62445: PUSH
62446: LD_INT 2
62448: PUSH
62449: EMPTY
62450: LIST
62451: LIST
62452: LIST
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: ST_TO_ADDR
// end ; 4 :
62461: GO 62742
62463: LD_INT 4
62465: DOUBLE
62466: EQUAL
62467: IFTRUE 62471
62469: GO 62604
62471: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62472: LD_ADDR_VAR 0 5
62476: PUSH
62477: LD_VAR 0 1
62481: PUSH
62482: LD_VAR 0 2
62486: PUSH
62487: LD_INT 4
62489: PLUS
62490: PUSH
62491: LD_INT 0
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: LIST
62498: PUSH
62499: LD_VAR 0 1
62503: PUSH
62504: LD_INT 3
62506: PLUS
62507: PUSH
62508: LD_VAR 0 2
62512: PUSH
62513: LD_INT 3
62515: PLUS
62516: PUSH
62517: LD_INT 5
62519: PUSH
62520: EMPTY
62521: LIST
62522: LIST
62523: LIST
62524: PUSH
62525: LD_VAR 0 1
62529: PUSH
62530: LD_INT 4
62532: PLUS
62533: PUSH
62534: LD_VAR 0 2
62538: PUSH
62539: LD_INT 4
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: LIST
62546: PUSH
62547: LD_VAR 0 1
62551: PUSH
62552: LD_VAR 0 2
62556: PUSH
62557: LD_INT 3
62559: MINUS
62560: PUSH
62561: LD_INT 3
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: LIST
62568: PUSH
62569: LD_VAR 0 1
62573: PUSH
62574: LD_INT 4
62576: MINUS
62577: PUSH
62578: LD_VAR 0 2
62582: PUSH
62583: LD_INT 4
62585: MINUS
62586: PUSH
62587: LD_INT 2
62589: PUSH
62590: EMPTY
62591: LIST
62592: LIST
62593: LIST
62594: PUSH
62595: EMPTY
62596: LIST
62597: LIST
62598: LIST
62599: LIST
62600: LIST
62601: ST_TO_ADDR
// end ; 5 :
62602: GO 62742
62604: LD_INT 5
62606: DOUBLE
62607: EQUAL
62608: IFTRUE 62612
62610: GO 62741
62612: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62613: LD_ADDR_VAR 0 5
62617: PUSH
62618: LD_VAR 0 1
62622: PUSH
62623: LD_INT 4
62625: MINUS
62626: PUSH
62627: LD_VAR 0 2
62631: PUSH
62632: LD_INT 1
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: LIST
62639: PUSH
62640: LD_VAR 0 1
62644: PUSH
62645: LD_VAR 0 2
62649: PUSH
62650: LD_INT 4
62652: MINUS
62653: PUSH
62654: LD_INT 3
62656: PUSH
62657: EMPTY
62658: LIST
62659: LIST
62660: LIST
62661: PUSH
62662: LD_VAR 0 1
62666: PUSH
62667: LD_INT 4
62669: PLUS
62670: PUSH
62671: LD_VAR 0 2
62675: PUSH
62676: LD_INT 4
62678: PLUS
62679: PUSH
62680: LD_INT 5
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: LIST
62687: PUSH
62688: LD_VAR 0 1
62692: PUSH
62693: LD_INT 3
62695: PLUS
62696: PUSH
62697: LD_VAR 0 2
62701: PUSH
62702: LD_INT 4
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: LIST
62709: PUSH
62710: LD_VAR 0 1
62714: PUSH
62715: LD_VAR 0 2
62719: PUSH
62720: LD_INT 3
62722: PLUS
62723: PUSH
62724: LD_INT 0
62726: PUSH
62727: EMPTY
62728: LIST
62729: LIST
62730: LIST
62731: PUSH
62732: EMPTY
62733: LIST
62734: LIST
62735: LIST
62736: LIST
62737: LIST
62738: ST_TO_ADDR
// end ; end ;
62739: GO 62742
62741: POP
// result := list ;
62742: LD_ADDR_VAR 0 4
62746: PUSH
62747: LD_VAR 0 5
62751: ST_TO_ADDR
// end ;
62752: LD_VAR 0 4
62756: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
62757: LD_INT 0
62759: PPUSH
62760: PPUSH
62761: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
62762: LD_VAR 0 1
62766: NOT
62767: PUSH
62768: LD_VAR 0 2
62772: PUSH
62773: LD_INT 1
62775: PUSH
62776: LD_INT 2
62778: PUSH
62779: LD_INT 3
62781: PUSH
62782: LD_INT 4
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: LIST
62789: LIST
62790: IN
62791: NOT
62792: OR
62793: IFFALSE 62797
// exit ;
62795: GO 62880
// tmp := [ ] ;
62797: LD_ADDR_VAR 0 5
62801: PUSH
62802: EMPTY
62803: ST_TO_ADDR
// for i in units do
62804: LD_ADDR_VAR 0 4
62808: PUSH
62809: LD_VAR 0 1
62813: PUSH
62814: FOR_IN
62815: IFFALSE 62849
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
62817: LD_ADDR_VAR 0 5
62821: PUSH
62822: LD_VAR 0 5
62826: PPUSH
62827: LD_VAR 0 4
62831: PPUSH
62832: LD_VAR 0 2
62836: PPUSH
62837: CALL_OW 259
62841: PPUSH
62842: CALL 64240 0 2
62846: ST_TO_ADDR
62847: GO 62814
62849: POP
62850: POP
// if not tmp then
62851: LD_VAR 0 5
62855: NOT
62856: IFFALSE 62860
// exit ;
62858: GO 62880
// result := SortListByListDesc ( units , tmp ) ;
62860: LD_ADDR_VAR 0 3
62864: PUSH
62865: LD_VAR 0 1
62869: PPUSH
62870: LD_VAR 0 5
62874: PPUSH
62875: CALL_OW 77
62879: ST_TO_ADDR
// end ;
62880: LD_VAR 0 3
62884: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
62885: LD_INT 0
62887: PPUSH
62888: PPUSH
62889: PPUSH
// result := false ;
62890: LD_ADDR_VAR 0 3
62894: PUSH
62895: LD_INT 0
62897: ST_TO_ADDR
// if not building then
62898: LD_VAR 0 2
62902: NOT
62903: IFFALSE 62907
// exit ;
62905: GO 63045
// x := GetX ( building ) ;
62907: LD_ADDR_VAR 0 4
62911: PUSH
62912: LD_VAR 0 2
62916: PPUSH
62917: CALL_OW 250
62921: ST_TO_ADDR
// y := GetY ( building ) ;
62922: LD_ADDR_VAR 0 5
62926: PUSH
62927: LD_VAR 0 2
62931: PPUSH
62932: CALL_OW 251
62936: ST_TO_ADDR
// if not x or not y then
62937: LD_VAR 0 4
62941: NOT
62942: PUSH
62943: LD_VAR 0 5
62947: NOT
62948: OR
62949: IFFALSE 62953
// exit ;
62951: GO 63045
// if GetTaskList ( unit ) then
62953: LD_VAR 0 1
62957: PPUSH
62958: CALL_OW 437
62962: IFFALSE 63045
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62964: LD_STRING e
62966: PUSH
62967: LD_VAR 0 1
62971: PPUSH
62972: CALL_OW 437
62976: PUSH
62977: LD_INT 1
62979: ARRAY
62980: PUSH
62981: LD_INT 1
62983: ARRAY
62984: EQUAL
62985: PUSH
62986: LD_VAR 0 4
62990: PUSH
62991: LD_VAR 0 1
62995: PPUSH
62996: CALL_OW 437
63000: PUSH
63001: LD_INT 1
63003: ARRAY
63004: PUSH
63005: LD_INT 2
63007: ARRAY
63008: EQUAL
63009: AND
63010: PUSH
63011: LD_VAR 0 5
63015: PUSH
63016: LD_VAR 0 1
63020: PPUSH
63021: CALL_OW 437
63025: PUSH
63026: LD_INT 1
63028: ARRAY
63029: PUSH
63030: LD_INT 3
63032: ARRAY
63033: EQUAL
63034: AND
63035: IFFALSE 63045
// result := true end ;
63037: LD_ADDR_VAR 0 3
63041: PUSH
63042: LD_INT 1
63044: ST_TO_ADDR
// end ;
63045: LD_VAR 0 3
63049: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
63050: LD_INT 0
63052: PPUSH
// result := false ;
63053: LD_ADDR_VAR 0 4
63057: PUSH
63058: LD_INT 0
63060: ST_TO_ADDR
// if GetTaskList ( unit ) then
63061: LD_VAR 0 1
63065: PPUSH
63066: CALL_OW 437
63070: IFFALSE 63153
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63072: LD_STRING M
63074: PUSH
63075: LD_VAR 0 1
63079: PPUSH
63080: CALL_OW 437
63084: PUSH
63085: LD_INT 1
63087: ARRAY
63088: PUSH
63089: LD_INT 1
63091: ARRAY
63092: EQUAL
63093: PUSH
63094: LD_VAR 0 2
63098: PUSH
63099: LD_VAR 0 1
63103: PPUSH
63104: CALL_OW 437
63108: PUSH
63109: LD_INT 1
63111: ARRAY
63112: PUSH
63113: LD_INT 2
63115: ARRAY
63116: EQUAL
63117: AND
63118: PUSH
63119: LD_VAR 0 3
63123: PUSH
63124: LD_VAR 0 1
63128: PPUSH
63129: CALL_OW 437
63133: PUSH
63134: LD_INT 1
63136: ARRAY
63137: PUSH
63138: LD_INT 3
63140: ARRAY
63141: EQUAL
63142: AND
63143: IFFALSE 63153
// result := true ;
63145: LD_ADDR_VAR 0 4
63149: PUSH
63150: LD_INT 1
63152: ST_TO_ADDR
// end ; end ;
63153: LD_VAR 0 4
63157: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63158: LD_INT 0
63160: PPUSH
63161: PPUSH
63162: PPUSH
63163: PPUSH
// if not unit or not area then
63164: LD_VAR 0 1
63168: NOT
63169: PUSH
63170: LD_VAR 0 2
63174: NOT
63175: OR
63176: IFFALSE 63180
// exit ;
63178: GO 63343
// tmp := AreaToList ( area , i ) ;
63180: LD_ADDR_VAR 0 6
63184: PUSH
63185: LD_VAR 0 2
63189: PPUSH
63190: LD_VAR 0 5
63194: PPUSH
63195: CALL_OW 517
63199: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63200: LD_ADDR_VAR 0 5
63204: PUSH
63205: DOUBLE
63206: LD_INT 1
63208: DEC
63209: ST_TO_ADDR
63210: LD_VAR 0 6
63214: PUSH
63215: LD_INT 1
63217: ARRAY
63218: PUSH
63219: FOR_TO
63220: IFFALSE 63341
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63222: LD_ADDR_VAR 0 7
63226: PUSH
63227: LD_VAR 0 6
63231: PUSH
63232: LD_INT 1
63234: ARRAY
63235: PUSH
63236: LD_VAR 0 5
63240: ARRAY
63241: PUSH
63242: LD_VAR 0 6
63246: PUSH
63247: LD_INT 2
63249: ARRAY
63250: PUSH
63251: LD_VAR 0 5
63255: ARRAY
63256: PUSH
63257: EMPTY
63258: LIST
63259: LIST
63260: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
63261: LD_INT 92
63263: PUSH
63264: LD_VAR 0 7
63268: PUSH
63269: LD_INT 1
63271: ARRAY
63272: PUSH
63273: LD_VAR 0 7
63277: PUSH
63278: LD_INT 2
63280: ARRAY
63281: PUSH
63282: LD_INT 3
63284: PUSH
63285: EMPTY
63286: LIST
63287: LIST
63288: LIST
63289: LIST
63290: PPUSH
63291: CALL_OW 69
63295: PUSH
63296: LD_INT 0
63298: EQUAL
63299: IFFALSE 63339
// begin PlaceUnitArea ( unit , area , mode ) ;
63301: LD_VAR 0 1
63305: PPUSH
63306: LD_VAR 0 2
63310: PPUSH
63311: LD_VAR 0 3
63315: PPUSH
63316: CALL_OW 49
// result := IsPlaced ( unit ) ;
63320: LD_ADDR_VAR 0 4
63324: PUSH
63325: LD_VAR 0 1
63329: PPUSH
63330: CALL_OW 305
63334: ST_TO_ADDR
// exit ;
63335: POP
63336: POP
63337: GO 63343
// end ; end ;
63339: GO 63219
63341: POP
63342: POP
// end ;
63343: LD_VAR 0 4
63347: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63348: LD_INT 0
63350: PPUSH
63351: PPUSH
63352: PPUSH
// if not side or side > 8 then
63353: LD_VAR 0 1
63357: NOT
63358: PUSH
63359: LD_VAR 0 1
63363: PUSH
63364: LD_INT 8
63366: GREATER
63367: OR
63368: IFFALSE 63372
// exit ;
63370: GO 63559
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63372: LD_ADDR_VAR 0 4
63376: PUSH
63377: LD_INT 22
63379: PUSH
63380: LD_VAR 0 1
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: PUSH
63389: LD_INT 21
63391: PUSH
63392: LD_INT 3
63394: PUSH
63395: EMPTY
63396: LIST
63397: LIST
63398: PUSH
63399: EMPTY
63400: LIST
63401: LIST
63402: PPUSH
63403: CALL_OW 69
63407: ST_TO_ADDR
// if not tmp then
63408: LD_VAR 0 4
63412: NOT
63413: IFFALSE 63417
// exit ;
63415: GO 63559
// enable_addtolog := true ;
63417: LD_ADDR_OWVAR 81
63421: PUSH
63422: LD_INT 1
63424: ST_TO_ADDR
// AddToLog ( [ ) ;
63425: LD_STRING [
63427: PPUSH
63428: CALL_OW 561
// for i in tmp do
63432: LD_ADDR_VAR 0 3
63436: PUSH
63437: LD_VAR 0 4
63441: PUSH
63442: FOR_IN
63443: IFFALSE 63550
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63445: LD_STRING [
63447: PUSH
63448: LD_VAR 0 3
63452: PPUSH
63453: CALL_OW 266
63457: STR
63458: PUSH
63459: LD_STRING , 
63461: STR
63462: PUSH
63463: LD_VAR 0 3
63467: PPUSH
63468: CALL_OW 250
63472: STR
63473: PUSH
63474: LD_STRING , 
63476: STR
63477: PUSH
63478: LD_VAR 0 3
63482: PPUSH
63483: CALL_OW 251
63487: STR
63488: PUSH
63489: LD_STRING , 
63491: STR
63492: PUSH
63493: LD_VAR 0 3
63497: PPUSH
63498: CALL_OW 254
63502: STR
63503: PUSH
63504: LD_STRING , 
63506: STR
63507: PUSH
63508: LD_VAR 0 3
63512: PPUSH
63513: LD_INT 1
63515: PPUSH
63516: CALL_OW 268
63520: STR
63521: PUSH
63522: LD_STRING , 
63524: STR
63525: PUSH
63526: LD_VAR 0 3
63530: PPUSH
63531: LD_INT 2
63533: PPUSH
63534: CALL_OW 268
63538: STR
63539: PUSH
63540: LD_STRING ],
63542: STR
63543: PPUSH
63544: CALL_OW 561
// end ;
63548: GO 63442
63550: POP
63551: POP
// AddToLog ( ]; ) ;
63552: LD_STRING ];
63554: PPUSH
63555: CALL_OW 561
// end ;
63559: LD_VAR 0 2
63563: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63564: LD_INT 0
63566: PPUSH
63567: PPUSH
63568: PPUSH
63569: PPUSH
63570: PPUSH
// if not area or not rate or not max then
63571: LD_VAR 0 1
63575: NOT
63576: PUSH
63577: LD_VAR 0 2
63581: NOT
63582: OR
63583: PUSH
63584: LD_VAR 0 4
63588: NOT
63589: OR
63590: IFFALSE 63594
// exit ;
63592: GO 63783
// while 1 do
63594: LD_INT 1
63596: IFFALSE 63783
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63598: LD_ADDR_VAR 0 9
63602: PUSH
63603: LD_VAR 0 1
63607: PPUSH
63608: LD_INT 1
63610: PPUSH
63611: CALL_OW 287
63615: PUSH
63616: LD_INT 10
63618: MUL
63619: ST_TO_ADDR
// r := rate / 10 ;
63620: LD_ADDR_VAR 0 7
63624: PUSH
63625: LD_VAR 0 2
63629: PUSH
63630: LD_INT 10
63632: DIVREAL
63633: ST_TO_ADDR
// time := 1 1$00 ;
63634: LD_ADDR_VAR 0 8
63638: PUSH
63639: LD_INT 2100
63641: ST_TO_ADDR
// if amount < min then
63642: LD_VAR 0 9
63646: PUSH
63647: LD_VAR 0 3
63651: LESS
63652: IFFALSE 63670
// r := r * 2 else
63654: LD_ADDR_VAR 0 7
63658: PUSH
63659: LD_VAR 0 7
63663: PUSH
63664: LD_INT 2
63666: MUL
63667: ST_TO_ADDR
63668: GO 63696
// if amount > max then
63670: LD_VAR 0 9
63674: PUSH
63675: LD_VAR 0 4
63679: GREATER
63680: IFFALSE 63696
// r := r / 2 ;
63682: LD_ADDR_VAR 0 7
63686: PUSH
63687: LD_VAR 0 7
63691: PUSH
63692: LD_INT 2
63694: DIVREAL
63695: ST_TO_ADDR
// time := time / r ;
63696: LD_ADDR_VAR 0 8
63700: PUSH
63701: LD_VAR 0 8
63705: PUSH
63706: LD_VAR 0 7
63710: DIVREAL
63711: ST_TO_ADDR
// if time < 0 then
63712: LD_VAR 0 8
63716: PUSH
63717: LD_INT 0
63719: LESS
63720: IFFALSE 63737
// time := time * - 1 ;
63722: LD_ADDR_VAR 0 8
63726: PUSH
63727: LD_VAR 0 8
63731: PUSH
63732: LD_INT 1
63734: NEG
63735: MUL
63736: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
63737: LD_VAR 0 8
63741: PUSH
63742: LD_INT 35
63744: PPUSH
63745: LD_INT 875
63747: PPUSH
63748: CALL_OW 12
63752: PLUS
63753: PPUSH
63754: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
63758: LD_INT 1
63760: PPUSH
63761: LD_INT 5
63763: PPUSH
63764: CALL_OW 12
63768: PPUSH
63769: LD_VAR 0 1
63773: PPUSH
63774: LD_INT 1
63776: PPUSH
63777: CALL_OW 55
// end ;
63781: GO 63594
// end ;
63783: LD_VAR 0 5
63787: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
63788: LD_INT 0
63790: PPUSH
63791: PPUSH
63792: PPUSH
63793: PPUSH
63794: PPUSH
63795: PPUSH
63796: PPUSH
63797: PPUSH
// if not turrets or not factories then
63798: LD_VAR 0 1
63802: NOT
63803: PUSH
63804: LD_VAR 0 2
63808: NOT
63809: OR
63810: IFFALSE 63814
// exit ;
63812: GO 64121
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
63814: LD_ADDR_VAR 0 10
63818: PUSH
63819: LD_INT 5
63821: PUSH
63822: LD_INT 6
63824: PUSH
63825: EMPTY
63826: LIST
63827: LIST
63828: PUSH
63829: LD_INT 2
63831: PUSH
63832: LD_INT 4
63834: PUSH
63835: EMPTY
63836: LIST
63837: LIST
63838: PUSH
63839: LD_INT 3
63841: PUSH
63842: LD_INT 5
63844: PUSH
63845: EMPTY
63846: LIST
63847: LIST
63848: PUSH
63849: EMPTY
63850: LIST
63851: LIST
63852: LIST
63853: PUSH
63854: LD_INT 24
63856: PUSH
63857: LD_INT 25
63859: PUSH
63860: EMPTY
63861: LIST
63862: LIST
63863: PUSH
63864: LD_INT 23
63866: PUSH
63867: LD_INT 27
63869: PUSH
63870: EMPTY
63871: LIST
63872: LIST
63873: PUSH
63874: EMPTY
63875: LIST
63876: LIST
63877: PUSH
63878: LD_INT 42
63880: PUSH
63881: LD_INT 43
63883: PUSH
63884: EMPTY
63885: LIST
63886: LIST
63887: PUSH
63888: LD_INT 44
63890: PUSH
63891: LD_INT 46
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: PUSH
63898: LD_INT 45
63900: PUSH
63901: LD_INT 47
63903: PUSH
63904: EMPTY
63905: LIST
63906: LIST
63907: PUSH
63908: EMPTY
63909: LIST
63910: LIST
63911: LIST
63912: PUSH
63913: EMPTY
63914: LIST
63915: LIST
63916: LIST
63917: ST_TO_ADDR
// result := [ ] ;
63918: LD_ADDR_VAR 0 3
63922: PUSH
63923: EMPTY
63924: ST_TO_ADDR
// for i in turrets do
63925: LD_ADDR_VAR 0 4
63929: PUSH
63930: LD_VAR 0 1
63934: PUSH
63935: FOR_IN
63936: IFFALSE 64119
// begin nat := GetNation ( i ) ;
63938: LD_ADDR_VAR 0 7
63942: PUSH
63943: LD_VAR 0 4
63947: PPUSH
63948: CALL_OW 248
63952: ST_TO_ADDR
// weapon := 0 ;
63953: LD_ADDR_VAR 0 8
63957: PUSH
63958: LD_INT 0
63960: ST_TO_ADDR
// if not nat then
63961: LD_VAR 0 7
63965: NOT
63966: IFFALSE 63970
// continue ;
63968: GO 63935
// for j in list [ nat ] do
63970: LD_ADDR_VAR 0 5
63974: PUSH
63975: LD_VAR 0 10
63979: PUSH
63980: LD_VAR 0 7
63984: ARRAY
63985: PUSH
63986: FOR_IN
63987: IFFALSE 64028
// if GetBWeapon ( i ) = j [ 1 ] then
63989: LD_VAR 0 4
63993: PPUSH
63994: CALL_OW 269
63998: PUSH
63999: LD_VAR 0 5
64003: PUSH
64004: LD_INT 1
64006: ARRAY
64007: EQUAL
64008: IFFALSE 64026
// begin weapon := j [ 2 ] ;
64010: LD_ADDR_VAR 0 8
64014: PUSH
64015: LD_VAR 0 5
64019: PUSH
64020: LD_INT 2
64022: ARRAY
64023: ST_TO_ADDR
// break ;
64024: GO 64028
// end ;
64026: GO 63986
64028: POP
64029: POP
// if not weapon then
64030: LD_VAR 0 8
64034: NOT
64035: IFFALSE 64039
// continue ;
64037: GO 63935
// for k in factories do
64039: LD_ADDR_VAR 0 6
64043: PUSH
64044: LD_VAR 0 2
64048: PUSH
64049: FOR_IN
64050: IFFALSE 64115
// begin weapons := AvailableWeaponList ( k ) ;
64052: LD_ADDR_VAR 0 9
64056: PUSH
64057: LD_VAR 0 6
64061: PPUSH
64062: CALL_OW 478
64066: ST_TO_ADDR
// if not weapons then
64067: LD_VAR 0 9
64071: NOT
64072: IFFALSE 64076
// continue ;
64074: GO 64049
// if weapon in weapons then
64076: LD_VAR 0 8
64080: PUSH
64081: LD_VAR 0 9
64085: IN
64086: IFFALSE 64113
// begin result := [ i , weapon ] ;
64088: LD_ADDR_VAR 0 3
64092: PUSH
64093: LD_VAR 0 4
64097: PUSH
64098: LD_VAR 0 8
64102: PUSH
64103: EMPTY
64104: LIST
64105: LIST
64106: ST_TO_ADDR
// exit ;
64107: POP
64108: POP
64109: POP
64110: POP
64111: GO 64121
// end ; end ;
64113: GO 64049
64115: POP
64116: POP
// end ;
64117: GO 63935
64119: POP
64120: POP
// end ;
64121: LD_VAR 0 3
64125: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64126: LD_INT 0
64128: PPUSH
// if not side or side > 8 then
64129: LD_VAR 0 3
64133: NOT
64134: PUSH
64135: LD_VAR 0 3
64139: PUSH
64140: LD_INT 8
64142: GREATER
64143: OR
64144: IFFALSE 64148
// exit ;
64146: GO 64207
// if not range then
64148: LD_VAR 0 4
64152: NOT
64153: IFFALSE 64164
// range := - 12 ;
64155: LD_ADDR_VAR 0 4
64159: PUSH
64160: LD_INT 12
64162: NEG
64163: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64164: LD_VAR 0 1
64168: PPUSH
64169: LD_VAR 0 2
64173: PPUSH
64174: LD_VAR 0 3
64178: PPUSH
64179: LD_VAR 0 4
64183: PPUSH
64184: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64188: LD_VAR 0 1
64192: PPUSH
64193: LD_VAR 0 2
64197: PPUSH
64198: LD_VAR 0 3
64202: PPUSH
64203: CALL_OW 331
// end ;
64207: LD_VAR 0 5
64211: RET
// export function Video ( mode ) ; begin
64212: LD_INT 0
64214: PPUSH
// ingame_video = mode ;
64215: LD_ADDR_OWVAR 52
64219: PUSH
64220: LD_VAR 0 1
64224: ST_TO_ADDR
// interface_hidden = mode ;
64225: LD_ADDR_OWVAR 54
64229: PUSH
64230: LD_VAR 0 1
64234: ST_TO_ADDR
// end ;
64235: LD_VAR 0 2
64239: RET
// export function Join ( array , element ) ; begin
64240: LD_INT 0
64242: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64243: LD_ADDR_VAR 0 3
64247: PUSH
64248: LD_VAR 0 1
64252: PPUSH
64253: LD_VAR 0 1
64257: PUSH
64258: LD_INT 1
64260: PLUS
64261: PPUSH
64262: LD_VAR 0 2
64266: PPUSH
64267: CALL_OW 1
64271: ST_TO_ADDR
// end ;
64272: LD_VAR 0 3
64276: RET
// export function JoinUnion ( array , element ) ; begin
64277: LD_INT 0
64279: PPUSH
// result := array union element ;
64280: LD_ADDR_VAR 0 3
64284: PUSH
64285: LD_VAR 0 1
64289: PUSH
64290: LD_VAR 0 2
64294: UNION
64295: ST_TO_ADDR
// end ;
64296: LD_VAR 0 3
64300: RET
// export function GetBehemoths ( side ) ; begin
64301: LD_INT 0
64303: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
64304: LD_ADDR_VAR 0 2
64308: PUSH
64309: LD_INT 22
64311: PUSH
64312: LD_VAR 0 1
64316: PUSH
64317: EMPTY
64318: LIST
64319: LIST
64320: PUSH
64321: LD_INT 31
64323: PUSH
64324: LD_INT 25
64326: PUSH
64327: EMPTY
64328: LIST
64329: LIST
64330: PUSH
64331: EMPTY
64332: LIST
64333: LIST
64334: PPUSH
64335: CALL_OW 69
64339: ST_TO_ADDR
// end ;
64340: LD_VAR 0 2
64344: RET
// export function Shuffle ( array ) ; var i , index ; begin
64345: LD_INT 0
64347: PPUSH
64348: PPUSH
64349: PPUSH
// result := [ ] ;
64350: LD_ADDR_VAR 0 2
64354: PUSH
64355: EMPTY
64356: ST_TO_ADDR
// if not array then
64357: LD_VAR 0 1
64361: NOT
64362: IFFALSE 64366
// exit ;
64364: GO 64465
// Randomize ;
64366: CALL_OW 10
// for i = array downto 1 do
64370: LD_ADDR_VAR 0 3
64374: PUSH
64375: DOUBLE
64376: LD_VAR 0 1
64380: INC
64381: ST_TO_ADDR
64382: LD_INT 1
64384: PUSH
64385: FOR_DOWNTO
64386: IFFALSE 64463
// begin index := rand ( 1 , array ) ;
64388: LD_ADDR_VAR 0 4
64392: PUSH
64393: LD_INT 1
64395: PPUSH
64396: LD_VAR 0 1
64400: PPUSH
64401: CALL_OW 12
64405: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64406: LD_ADDR_VAR 0 2
64410: PUSH
64411: LD_VAR 0 2
64415: PPUSH
64416: LD_VAR 0 2
64420: PUSH
64421: LD_INT 1
64423: PLUS
64424: PPUSH
64425: LD_VAR 0 1
64429: PUSH
64430: LD_VAR 0 4
64434: ARRAY
64435: PPUSH
64436: CALL_OW 2
64440: ST_TO_ADDR
// array := Delete ( array , index ) ;
64441: LD_ADDR_VAR 0 1
64445: PUSH
64446: LD_VAR 0 1
64450: PPUSH
64451: LD_VAR 0 4
64455: PPUSH
64456: CALL_OW 3
64460: ST_TO_ADDR
// end ;
64461: GO 64385
64463: POP
64464: POP
// end ;
64465: LD_VAR 0 2
64469: RET
// export function GetBaseMaterials ( base ) ; begin
64470: LD_INT 0
64472: PPUSH
// result := [ 0 , 0 , 0 ] ;
64473: LD_ADDR_VAR 0 2
64477: PUSH
64478: LD_INT 0
64480: PUSH
64481: LD_INT 0
64483: PUSH
64484: LD_INT 0
64486: PUSH
64487: EMPTY
64488: LIST
64489: LIST
64490: LIST
64491: ST_TO_ADDR
// if not base then
64492: LD_VAR 0 1
64496: NOT
64497: IFFALSE 64501
// exit ;
64499: GO 64550
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64501: LD_ADDR_VAR 0 2
64505: PUSH
64506: LD_VAR 0 1
64510: PPUSH
64511: LD_INT 1
64513: PPUSH
64514: CALL_OW 275
64518: PUSH
64519: LD_VAR 0 1
64523: PPUSH
64524: LD_INT 2
64526: PPUSH
64527: CALL_OW 275
64531: PUSH
64532: LD_VAR 0 1
64536: PPUSH
64537: LD_INT 3
64539: PPUSH
64540: CALL_OW 275
64544: PUSH
64545: EMPTY
64546: LIST
64547: LIST
64548: LIST
64549: ST_TO_ADDR
// end ;
64550: LD_VAR 0 2
64554: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64555: LD_INT 0
64557: PPUSH
64558: PPUSH
// result := array ;
64559: LD_ADDR_VAR 0 3
64563: PUSH
64564: LD_VAR 0 1
64568: ST_TO_ADDR
// if size >= result then
64569: LD_VAR 0 2
64573: PUSH
64574: LD_VAR 0 3
64578: GREATEREQUAL
64579: IFFALSE 64583
// exit ;
64581: GO 64633
// if size then
64583: LD_VAR 0 2
64587: IFFALSE 64633
// for i := array downto size do
64589: LD_ADDR_VAR 0 4
64593: PUSH
64594: DOUBLE
64595: LD_VAR 0 1
64599: INC
64600: ST_TO_ADDR
64601: LD_VAR 0 2
64605: PUSH
64606: FOR_DOWNTO
64607: IFFALSE 64631
// result := Delete ( result , result ) ;
64609: LD_ADDR_VAR 0 3
64613: PUSH
64614: LD_VAR 0 3
64618: PPUSH
64619: LD_VAR 0 3
64623: PPUSH
64624: CALL_OW 3
64628: ST_TO_ADDR
64629: GO 64606
64631: POP
64632: POP
// end ;
64633: LD_VAR 0 3
64637: RET
// export function ComExit ( unit ) ; var tmp ; begin
64638: LD_INT 0
64640: PPUSH
64641: PPUSH
// if not IsInUnit ( unit ) then
64642: LD_VAR 0 1
64646: PPUSH
64647: CALL_OW 310
64651: NOT
64652: IFFALSE 64656
// exit ;
64654: GO 64716
// tmp := IsInUnit ( unit ) ;
64656: LD_ADDR_VAR 0 3
64660: PUSH
64661: LD_VAR 0 1
64665: PPUSH
64666: CALL_OW 310
64670: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
64671: LD_VAR 0 3
64675: PPUSH
64676: CALL_OW 247
64680: PUSH
64681: LD_INT 2
64683: EQUAL
64684: IFFALSE 64697
// ComExitVehicle ( unit ) else
64686: LD_VAR 0 1
64690: PPUSH
64691: CALL_OW 121
64695: GO 64706
// ComExitBuilding ( unit ) ;
64697: LD_VAR 0 1
64701: PPUSH
64702: CALL_OW 122
// result := tmp ;
64706: LD_ADDR_VAR 0 2
64710: PUSH
64711: LD_VAR 0 3
64715: ST_TO_ADDR
// end ;
64716: LD_VAR 0 2
64720: RET
// export function ComExitAll ( units ) ; var i ; begin
64721: LD_INT 0
64723: PPUSH
64724: PPUSH
// if not units then
64725: LD_VAR 0 1
64729: NOT
64730: IFFALSE 64734
// exit ;
64732: GO 64760
// for i in units do
64734: LD_ADDR_VAR 0 3
64738: PUSH
64739: LD_VAR 0 1
64743: PUSH
64744: FOR_IN
64745: IFFALSE 64758
// ComExit ( i ) ;
64747: LD_VAR 0 3
64751: PPUSH
64752: CALL 64638 0 1
64756: GO 64744
64758: POP
64759: POP
// end ;
64760: LD_VAR 0 2
64764: RET
// export function ResetHc ; begin
64765: LD_INT 0
64767: PPUSH
// InitHc ;
64768: CALL_OW 19
// hc_importance := 0 ;
64772: LD_ADDR_OWVAR 32
64776: PUSH
64777: LD_INT 0
64779: ST_TO_ADDR
// end ;
64780: LD_VAR 0 1
64784: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
64785: LD_INT 0
64787: PPUSH
64788: PPUSH
64789: PPUSH
// _x := ( x1 + x2 ) div 2 ;
64790: LD_ADDR_VAR 0 6
64794: PUSH
64795: LD_VAR 0 1
64799: PUSH
64800: LD_VAR 0 3
64804: PLUS
64805: PUSH
64806: LD_INT 2
64808: DIV
64809: ST_TO_ADDR
// if _x < 0 then
64810: LD_VAR 0 6
64814: PUSH
64815: LD_INT 0
64817: LESS
64818: IFFALSE 64835
// _x := _x * - 1 ;
64820: LD_ADDR_VAR 0 6
64824: PUSH
64825: LD_VAR 0 6
64829: PUSH
64830: LD_INT 1
64832: NEG
64833: MUL
64834: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
64835: LD_ADDR_VAR 0 7
64839: PUSH
64840: LD_VAR 0 2
64844: PUSH
64845: LD_VAR 0 4
64849: PLUS
64850: PUSH
64851: LD_INT 2
64853: DIV
64854: ST_TO_ADDR
// if _y < 0 then
64855: LD_VAR 0 7
64859: PUSH
64860: LD_INT 0
64862: LESS
64863: IFFALSE 64880
// _y := _y * - 1 ;
64865: LD_ADDR_VAR 0 7
64869: PUSH
64870: LD_VAR 0 7
64874: PUSH
64875: LD_INT 1
64877: NEG
64878: MUL
64879: ST_TO_ADDR
// result := [ _x , _y ] ;
64880: LD_ADDR_VAR 0 5
64884: PUSH
64885: LD_VAR 0 6
64889: PUSH
64890: LD_VAR 0 7
64894: PUSH
64895: EMPTY
64896: LIST
64897: LIST
64898: ST_TO_ADDR
// end ;
64899: LD_VAR 0 5
64903: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
64904: LD_INT 0
64906: PPUSH
64907: PPUSH
64908: PPUSH
64909: PPUSH
// task := GetTaskList ( unit ) ;
64910: LD_ADDR_VAR 0 7
64914: PUSH
64915: LD_VAR 0 1
64919: PPUSH
64920: CALL_OW 437
64924: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
64925: LD_VAR 0 7
64929: NOT
64930: PUSH
64931: LD_VAR 0 1
64935: PPUSH
64936: LD_VAR 0 2
64940: PPUSH
64941: CALL_OW 308
64945: NOT
64946: AND
64947: IFFALSE 64951
// exit ;
64949: GO 65069
// if IsInArea ( unit , area ) then
64951: LD_VAR 0 1
64955: PPUSH
64956: LD_VAR 0 2
64960: PPUSH
64961: CALL_OW 308
64965: IFFALSE 64983
// begin ComMoveToArea ( unit , goAway ) ;
64967: LD_VAR 0 1
64971: PPUSH
64972: LD_VAR 0 3
64976: PPUSH
64977: CALL_OW 113
// exit ;
64981: GO 65069
// end ; if task [ 1 ] [ 1 ] <> M then
64983: LD_VAR 0 7
64987: PUSH
64988: LD_INT 1
64990: ARRAY
64991: PUSH
64992: LD_INT 1
64994: ARRAY
64995: PUSH
64996: LD_STRING M
64998: NONEQUAL
64999: IFFALSE 65003
// exit ;
65001: GO 65069
// x := task [ 1 ] [ 2 ] ;
65003: LD_ADDR_VAR 0 5
65007: PUSH
65008: LD_VAR 0 7
65012: PUSH
65013: LD_INT 1
65015: ARRAY
65016: PUSH
65017: LD_INT 2
65019: ARRAY
65020: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
65021: LD_ADDR_VAR 0 6
65025: PUSH
65026: LD_VAR 0 7
65030: PUSH
65031: LD_INT 1
65033: ARRAY
65034: PUSH
65035: LD_INT 3
65037: ARRAY
65038: ST_TO_ADDR
// if InArea ( x , y , area ) then
65039: LD_VAR 0 5
65043: PPUSH
65044: LD_VAR 0 6
65048: PPUSH
65049: LD_VAR 0 2
65053: PPUSH
65054: CALL_OW 309
65058: IFFALSE 65069
// ComStop ( unit ) ;
65060: LD_VAR 0 1
65064: PPUSH
65065: CALL_OW 141
// end ;
65069: LD_VAR 0 4
65073: RET
// export function Abs ( value ) ; begin
65074: LD_INT 0
65076: PPUSH
// result := value ;
65077: LD_ADDR_VAR 0 2
65081: PUSH
65082: LD_VAR 0 1
65086: ST_TO_ADDR
// if value < 0 then
65087: LD_VAR 0 1
65091: PUSH
65092: LD_INT 0
65094: LESS
65095: IFFALSE 65112
// result := value * - 1 ;
65097: LD_ADDR_VAR 0 2
65101: PUSH
65102: LD_VAR 0 1
65106: PUSH
65107: LD_INT 1
65109: NEG
65110: MUL
65111: ST_TO_ADDR
// end ;
65112: LD_VAR 0 2
65116: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65117: LD_INT 0
65119: PPUSH
65120: PPUSH
65121: PPUSH
65122: PPUSH
65123: PPUSH
65124: PPUSH
65125: PPUSH
65126: PPUSH
// if not unit or not building then
65127: LD_VAR 0 1
65131: NOT
65132: PUSH
65133: LD_VAR 0 2
65137: NOT
65138: OR
65139: IFFALSE 65143
// exit ;
65141: GO 65369
// x := GetX ( building ) ;
65143: LD_ADDR_VAR 0 4
65147: PUSH
65148: LD_VAR 0 2
65152: PPUSH
65153: CALL_OW 250
65157: ST_TO_ADDR
// y := GetY ( building ) ;
65158: LD_ADDR_VAR 0 6
65162: PUSH
65163: LD_VAR 0 2
65167: PPUSH
65168: CALL_OW 251
65172: ST_TO_ADDR
// d := GetDir ( building ) ;
65173: LD_ADDR_VAR 0 8
65177: PUSH
65178: LD_VAR 0 2
65182: PPUSH
65183: CALL_OW 254
65187: ST_TO_ADDR
// r := 4 ;
65188: LD_ADDR_VAR 0 9
65192: PUSH
65193: LD_INT 4
65195: ST_TO_ADDR
// for i := 1 to 5 do
65196: LD_ADDR_VAR 0 10
65200: PUSH
65201: DOUBLE
65202: LD_INT 1
65204: DEC
65205: ST_TO_ADDR
65206: LD_INT 5
65208: PUSH
65209: FOR_TO
65210: IFFALSE 65367
// begin _x := ShiftX ( x , d , r + i ) ;
65212: LD_ADDR_VAR 0 5
65216: PUSH
65217: LD_VAR 0 4
65221: PPUSH
65222: LD_VAR 0 8
65226: PPUSH
65227: LD_VAR 0 9
65231: PUSH
65232: LD_VAR 0 10
65236: PLUS
65237: PPUSH
65238: CALL_OW 272
65242: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65243: LD_ADDR_VAR 0 7
65247: PUSH
65248: LD_VAR 0 6
65252: PPUSH
65253: LD_VAR 0 8
65257: PPUSH
65258: LD_VAR 0 9
65262: PUSH
65263: LD_VAR 0 10
65267: PLUS
65268: PPUSH
65269: CALL_OW 273
65273: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65274: LD_VAR 0 5
65278: PPUSH
65279: LD_VAR 0 7
65283: PPUSH
65284: CALL_OW 488
65288: PUSH
65289: LD_VAR 0 5
65293: PPUSH
65294: LD_VAR 0 7
65298: PPUSH
65299: CALL_OW 428
65303: PPUSH
65304: CALL_OW 247
65308: PUSH
65309: LD_INT 3
65311: PUSH
65312: LD_INT 2
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: IN
65319: NOT
65320: AND
65321: IFFALSE 65365
// begin ComMoveXY ( unit , _x , _y ) ;
65323: LD_VAR 0 1
65327: PPUSH
65328: LD_VAR 0 5
65332: PPUSH
65333: LD_VAR 0 7
65337: PPUSH
65338: CALL_OW 111
// result := [ _x , _y ] ;
65342: LD_ADDR_VAR 0 3
65346: PUSH
65347: LD_VAR 0 5
65351: PUSH
65352: LD_VAR 0 7
65356: PUSH
65357: EMPTY
65358: LIST
65359: LIST
65360: ST_TO_ADDR
// exit ;
65361: POP
65362: POP
65363: GO 65369
// end ; end ;
65365: GO 65209
65367: POP
65368: POP
// end ;
65369: LD_VAR 0 3
65373: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65374: LD_INT 0
65376: PPUSH
65377: PPUSH
65378: PPUSH
// result := 0 ;
65379: LD_ADDR_VAR 0 3
65383: PUSH
65384: LD_INT 0
65386: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65387: LD_VAR 0 1
65391: PUSH
65392: LD_INT 0
65394: LESS
65395: PUSH
65396: LD_VAR 0 1
65400: PUSH
65401: LD_INT 8
65403: GREATER
65404: OR
65405: PUSH
65406: LD_VAR 0 2
65410: PUSH
65411: LD_INT 0
65413: LESS
65414: OR
65415: PUSH
65416: LD_VAR 0 2
65420: PUSH
65421: LD_INT 8
65423: GREATER
65424: OR
65425: IFFALSE 65429
// exit ;
65427: GO 65504
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65429: LD_ADDR_VAR 0 4
65433: PUSH
65434: LD_INT 22
65436: PUSH
65437: LD_VAR 0 2
65441: PUSH
65442: EMPTY
65443: LIST
65444: LIST
65445: PPUSH
65446: CALL_OW 69
65450: PUSH
65451: FOR_IN
65452: IFFALSE 65502
// begin un := UnitShoot ( i ) ;
65454: LD_ADDR_VAR 0 5
65458: PUSH
65459: LD_VAR 0 4
65463: PPUSH
65464: CALL_OW 504
65468: ST_TO_ADDR
// if GetSide ( un ) = side1 then
65469: LD_VAR 0 5
65473: PPUSH
65474: CALL_OW 255
65478: PUSH
65479: LD_VAR 0 1
65483: EQUAL
65484: IFFALSE 65500
// begin result := un ;
65486: LD_ADDR_VAR 0 3
65490: PUSH
65491: LD_VAR 0 5
65495: ST_TO_ADDR
// exit ;
65496: POP
65497: POP
65498: GO 65504
// end ; end ;
65500: GO 65451
65502: POP
65503: POP
// end ;
65504: LD_VAR 0 3
65508: RET
// export function GetCargoBay ( units ) ; begin
65509: LD_INT 0
65511: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
65512: LD_ADDR_VAR 0 2
65516: PUSH
65517: LD_VAR 0 1
65521: PPUSH
65522: LD_INT 2
65524: PUSH
65525: LD_INT 34
65527: PUSH
65528: LD_INT 12
65530: PUSH
65531: EMPTY
65532: LIST
65533: LIST
65534: PUSH
65535: LD_INT 34
65537: PUSH
65538: LD_INT 51
65540: PUSH
65541: EMPTY
65542: LIST
65543: LIST
65544: PUSH
65545: LD_INT 34
65547: PUSH
65548: LD_INT 32
65550: PUSH
65551: EMPTY
65552: LIST
65553: LIST
65554: PUSH
65555: LD_INT 34
65557: PUSH
65558: LD_INT 89
65560: PUSH
65561: EMPTY
65562: LIST
65563: LIST
65564: PUSH
65565: EMPTY
65566: LIST
65567: LIST
65568: LIST
65569: LIST
65570: LIST
65571: PPUSH
65572: CALL_OW 72
65576: ST_TO_ADDR
// end ;
65577: LD_VAR 0 2
65581: RET
// export function Negate ( value ) ; begin
65582: LD_INT 0
65584: PPUSH
// result := not value ;
65585: LD_ADDR_VAR 0 2
65589: PUSH
65590: LD_VAR 0 1
65594: NOT
65595: ST_TO_ADDR
// end ;
65596: LD_VAR 0 2
65600: RET
// export function Inc ( value ) ; begin
65601: LD_INT 0
65603: PPUSH
// result := value + 1 ;
65604: LD_ADDR_VAR 0 2
65608: PUSH
65609: LD_VAR 0 1
65613: PUSH
65614: LD_INT 1
65616: PLUS
65617: ST_TO_ADDR
// end ;
65618: LD_VAR 0 2
65622: RET
// export function Dec ( value ) ; begin
65623: LD_INT 0
65625: PPUSH
// result := value - 1 ;
65626: LD_ADDR_VAR 0 2
65630: PUSH
65631: LD_VAR 0 1
65635: PUSH
65636: LD_INT 1
65638: MINUS
65639: ST_TO_ADDR
// end ;
65640: LD_VAR 0 2
65644: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
65645: LD_INT 0
65647: PPUSH
65648: PPUSH
65649: PPUSH
65650: PPUSH
65651: PPUSH
65652: PPUSH
65653: PPUSH
65654: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
65655: LD_VAR 0 1
65659: PPUSH
65660: LD_VAR 0 2
65664: PPUSH
65665: CALL_OW 488
65669: NOT
65670: PUSH
65671: LD_VAR 0 3
65675: PPUSH
65676: LD_VAR 0 4
65680: PPUSH
65681: CALL_OW 488
65685: NOT
65686: OR
65687: IFFALSE 65700
// begin result := - 1 ;
65689: LD_ADDR_VAR 0 5
65693: PUSH
65694: LD_INT 1
65696: NEG
65697: ST_TO_ADDR
// exit ;
65698: GO 65935
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
65700: LD_ADDR_VAR 0 12
65704: PUSH
65705: LD_VAR 0 1
65709: PPUSH
65710: LD_VAR 0 2
65714: PPUSH
65715: LD_VAR 0 3
65719: PPUSH
65720: LD_VAR 0 4
65724: PPUSH
65725: CALL 64785 0 4
65729: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
65730: LD_ADDR_VAR 0 11
65734: PUSH
65735: LD_VAR 0 1
65739: PPUSH
65740: LD_VAR 0 2
65744: PPUSH
65745: LD_VAR 0 12
65749: PUSH
65750: LD_INT 1
65752: ARRAY
65753: PPUSH
65754: LD_VAR 0 12
65758: PUSH
65759: LD_INT 2
65761: ARRAY
65762: PPUSH
65763: CALL_OW 298
65767: ST_TO_ADDR
// distance := 9999 ;
65768: LD_ADDR_VAR 0 10
65772: PUSH
65773: LD_INT 9999
65775: ST_TO_ADDR
// for i := 0 to 5 do
65776: LD_ADDR_VAR 0 6
65780: PUSH
65781: DOUBLE
65782: LD_INT 0
65784: DEC
65785: ST_TO_ADDR
65786: LD_INT 5
65788: PUSH
65789: FOR_TO
65790: IFFALSE 65933
// begin _x := ShiftX ( x1 , i , centerDist ) ;
65792: LD_ADDR_VAR 0 7
65796: PUSH
65797: LD_VAR 0 1
65801: PPUSH
65802: LD_VAR 0 6
65806: PPUSH
65807: LD_VAR 0 11
65811: PPUSH
65812: CALL_OW 272
65816: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
65817: LD_ADDR_VAR 0 8
65821: PUSH
65822: LD_VAR 0 2
65826: PPUSH
65827: LD_VAR 0 6
65831: PPUSH
65832: LD_VAR 0 11
65836: PPUSH
65837: CALL_OW 273
65841: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
65842: LD_VAR 0 7
65846: PPUSH
65847: LD_VAR 0 8
65851: PPUSH
65852: CALL_OW 488
65856: NOT
65857: IFFALSE 65861
// continue ;
65859: GO 65789
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
65861: LD_ADDR_VAR 0 9
65865: PUSH
65866: LD_VAR 0 12
65870: PUSH
65871: LD_INT 1
65873: ARRAY
65874: PPUSH
65875: LD_VAR 0 12
65879: PUSH
65880: LD_INT 2
65882: ARRAY
65883: PPUSH
65884: LD_VAR 0 7
65888: PPUSH
65889: LD_VAR 0 8
65893: PPUSH
65894: CALL_OW 298
65898: ST_TO_ADDR
// if tmp < distance then
65899: LD_VAR 0 9
65903: PUSH
65904: LD_VAR 0 10
65908: LESS
65909: IFFALSE 65931
// begin result := i ;
65911: LD_ADDR_VAR 0 5
65915: PUSH
65916: LD_VAR 0 6
65920: ST_TO_ADDR
// distance := tmp ;
65921: LD_ADDR_VAR 0 10
65925: PUSH
65926: LD_VAR 0 9
65930: ST_TO_ADDR
// end ; end ;
65931: GO 65789
65933: POP
65934: POP
// end ;
65935: LD_VAR 0 5
65939: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65940: LD_INT 0
65942: PPUSH
65943: PPUSH
// if not driver or not IsInUnit ( driver ) then
65944: LD_VAR 0 1
65948: NOT
65949: PUSH
65950: LD_VAR 0 1
65954: PPUSH
65955: CALL_OW 310
65959: NOT
65960: OR
65961: IFFALSE 65965
// exit ;
65963: GO 66055
// vehicle := IsInUnit ( driver ) ;
65965: LD_ADDR_VAR 0 3
65969: PUSH
65970: LD_VAR 0 1
65974: PPUSH
65975: CALL_OW 310
65979: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65980: LD_VAR 0 1
65984: PPUSH
65985: LD_STRING \
65987: PUSH
65988: LD_INT 0
65990: PUSH
65991: LD_INT 0
65993: PUSH
65994: LD_INT 0
65996: PUSH
65997: LD_INT 0
65999: PUSH
66000: LD_INT 0
66002: PUSH
66003: LD_INT 0
66005: PUSH
66006: EMPTY
66007: LIST
66008: LIST
66009: LIST
66010: LIST
66011: LIST
66012: LIST
66013: LIST
66014: PUSH
66015: LD_STRING E
66017: PUSH
66018: LD_INT 0
66020: PUSH
66021: LD_INT 0
66023: PUSH
66024: LD_VAR 0 3
66028: PUSH
66029: LD_INT 0
66031: PUSH
66032: LD_INT 0
66034: PUSH
66035: LD_INT 0
66037: PUSH
66038: EMPTY
66039: LIST
66040: LIST
66041: LIST
66042: LIST
66043: LIST
66044: LIST
66045: LIST
66046: PUSH
66047: EMPTY
66048: LIST
66049: LIST
66050: PPUSH
66051: CALL_OW 446
// end ;
66055: LD_VAR 0 2
66059: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66060: LD_INT 0
66062: PPUSH
66063: PPUSH
// if not driver or not IsInUnit ( driver ) then
66064: LD_VAR 0 1
66068: NOT
66069: PUSH
66070: LD_VAR 0 1
66074: PPUSH
66075: CALL_OW 310
66079: NOT
66080: OR
66081: IFFALSE 66085
// exit ;
66083: GO 66175
// vehicle := IsInUnit ( driver ) ;
66085: LD_ADDR_VAR 0 3
66089: PUSH
66090: LD_VAR 0 1
66094: PPUSH
66095: CALL_OW 310
66099: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66100: LD_VAR 0 1
66104: PPUSH
66105: LD_STRING \
66107: PUSH
66108: LD_INT 0
66110: PUSH
66111: LD_INT 0
66113: PUSH
66114: LD_INT 0
66116: PUSH
66117: LD_INT 0
66119: PUSH
66120: LD_INT 0
66122: PUSH
66123: LD_INT 0
66125: PUSH
66126: EMPTY
66127: LIST
66128: LIST
66129: LIST
66130: LIST
66131: LIST
66132: LIST
66133: LIST
66134: PUSH
66135: LD_STRING E
66137: PUSH
66138: LD_INT 0
66140: PUSH
66141: LD_INT 0
66143: PUSH
66144: LD_VAR 0 3
66148: PUSH
66149: LD_INT 0
66151: PUSH
66152: LD_INT 0
66154: PUSH
66155: LD_INT 0
66157: PUSH
66158: EMPTY
66159: LIST
66160: LIST
66161: LIST
66162: LIST
66163: LIST
66164: LIST
66165: LIST
66166: PUSH
66167: EMPTY
66168: LIST
66169: LIST
66170: PPUSH
66171: CALL_OW 447
// end ;
66175: LD_VAR 0 2
66179: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
66180: LD_INT 0
66182: PPUSH
66183: PPUSH
66184: PPUSH
// tmp := [ ] ;
66185: LD_ADDR_VAR 0 5
66189: PUSH
66190: EMPTY
66191: ST_TO_ADDR
// for i in units do
66192: LD_ADDR_VAR 0 4
66196: PUSH
66197: LD_VAR 0 1
66201: PUSH
66202: FOR_IN
66203: IFFALSE 66241
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
66205: LD_ADDR_VAR 0 5
66209: PUSH
66210: LD_VAR 0 5
66214: PPUSH
66215: LD_VAR 0 5
66219: PUSH
66220: LD_INT 1
66222: PLUS
66223: PPUSH
66224: LD_VAR 0 4
66228: PPUSH
66229: CALL_OW 256
66233: PPUSH
66234: CALL_OW 2
66238: ST_TO_ADDR
66239: GO 66202
66241: POP
66242: POP
// if not tmp then
66243: LD_VAR 0 5
66247: NOT
66248: IFFALSE 66252
// exit ;
66250: GO 66300
// if asc then
66252: LD_VAR 0 2
66256: IFFALSE 66280
// result := SortListByListAsc ( units , tmp ) else
66258: LD_ADDR_VAR 0 3
66262: PUSH
66263: LD_VAR 0 1
66267: PPUSH
66268: LD_VAR 0 5
66272: PPUSH
66273: CALL_OW 76
66277: ST_TO_ADDR
66278: GO 66300
// result := SortListByListDesc ( units , tmp ) ;
66280: LD_ADDR_VAR 0 3
66284: PUSH
66285: LD_VAR 0 1
66289: PPUSH
66290: LD_VAR 0 5
66294: PPUSH
66295: CALL_OW 77
66299: ST_TO_ADDR
// end ;
66300: LD_VAR 0 3
66304: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
66305: LD_INT 0
66307: PPUSH
66308: PPUSH
// task := GetTaskList ( mech ) ;
66309: LD_ADDR_VAR 0 4
66313: PUSH
66314: LD_VAR 0 1
66318: PPUSH
66319: CALL_OW 437
66323: ST_TO_ADDR
// if not task then
66324: LD_VAR 0 4
66328: NOT
66329: IFFALSE 66333
// exit ;
66331: GO 66375
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
66333: LD_ADDR_VAR 0 3
66337: PUSH
66338: LD_VAR 0 4
66342: PUSH
66343: LD_INT 1
66345: ARRAY
66346: PUSH
66347: LD_INT 1
66349: ARRAY
66350: PUSH
66351: LD_STRING r
66353: EQUAL
66354: PUSH
66355: LD_VAR 0 4
66359: PUSH
66360: LD_INT 1
66362: ARRAY
66363: PUSH
66364: LD_INT 4
66366: ARRAY
66367: PUSH
66368: LD_VAR 0 2
66372: EQUAL
66373: AND
66374: ST_TO_ADDR
// end ;
66375: LD_VAR 0 3
66379: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
66380: LD_INT 0
66382: PPUSH
// SetDir ( unit , d ) ;
66383: LD_VAR 0 1
66387: PPUSH
66388: LD_VAR 0 4
66392: PPUSH
66393: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
66397: LD_VAR 0 1
66401: PPUSH
66402: LD_VAR 0 2
66406: PPUSH
66407: LD_VAR 0 3
66411: PPUSH
66412: LD_VAR 0 5
66416: PPUSH
66417: CALL_OW 48
// end ;
66421: LD_VAR 0 6
66425: RET
// export function ToNaturalNumber ( number ) ; begin
66426: LD_INT 0
66428: PPUSH
// result := number div 1 ;
66429: LD_ADDR_VAR 0 2
66433: PUSH
66434: LD_VAR 0 1
66438: PUSH
66439: LD_INT 1
66441: DIV
66442: ST_TO_ADDR
// if number < 0 then
66443: LD_VAR 0 1
66447: PUSH
66448: LD_INT 0
66450: LESS
66451: IFFALSE 66461
// result := 0 ;
66453: LD_ADDR_VAR 0 2
66457: PUSH
66458: LD_INT 0
66460: ST_TO_ADDR
// end ;
66461: LD_VAR 0 2
66465: RET
// export function SortByClass ( units , class ) ; var un ; begin
66466: LD_INT 0
66468: PPUSH
66469: PPUSH
// if not units or not class then
66470: LD_VAR 0 1
66474: NOT
66475: PUSH
66476: LD_VAR 0 2
66480: NOT
66481: OR
66482: IFFALSE 66486
// exit ;
66484: GO 66581
// result := [ ] ;
66486: LD_ADDR_VAR 0 3
66490: PUSH
66491: EMPTY
66492: ST_TO_ADDR
// for un in units do
66493: LD_ADDR_VAR 0 4
66497: PUSH
66498: LD_VAR 0 1
66502: PUSH
66503: FOR_IN
66504: IFFALSE 66579
// if GetClass ( un ) = class then
66506: LD_VAR 0 4
66510: PPUSH
66511: CALL_OW 257
66515: PUSH
66516: LD_VAR 0 2
66520: EQUAL
66521: IFFALSE 66548
// result := Insert ( result , 1 , un ) else
66523: LD_ADDR_VAR 0 3
66527: PUSH
66528: LD_VAR 0 3
66532: PPUSH
66533: LD_INT 1
66535: PPUSH
66536: LD_VAR 0 4
66540: PPUSH
66541: CALL_OW 2
66545: ST_TO_ADDR
66546: GO 66577
// result := Replace ( result , result + 1 , un ) ;
66548: LD_ADDR_VAR 0 3
66552: PUSH
66553: LD_VAR 0 3
66557: PPUSH
66558: LD_VAR 0 3
66562: PUSH
66563: LD_INT 1
66565: PLUS
66566: PPUSH
66567: LD_VAR 0 4
66571: PPUSH
66572: CALL_OW 1
66576: ST_TO_ADDR
66577: GO 66503
66579: POP
66580: POP
// end ;
66581: LD_VAR 0 3
66585: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
66586: LD_INT 0
66588: PPUSH
66589: PPUSH
66590: PPUSH
66591: PPUSH
66592: PPUSH
66593: PPUSH
66594: PPUSH
// result := [ ] ;
66595: LD_ADDR_VAR 0 4
66599: PUSH
66600: EMPTY
66601: ST_TO_ADDR
// if x - r < 0 then
66602: LD_VAR 0 1
66606: PUSH
66607: LD_VAR 0 3
66611: MINUS
66612: PUSH
66613: LD_INT 0
66615: LESS
66616: IFFALSE 66628
// min_x := 0 else
66618: LD_ADDR_VAR 0 8
66622: PUSH
66623: LD_INT 0
66625: ST_TO_ADDR
66626: GO 66644
// min_x := x - r ;
66628: LD_ADDR_VAR 0 8
66632: PUSH
66633: LD_VAR 0 1
66637: PUSH
66638: LD_VAR 0 3
66642: MINUS
66643: ST_TO_ADDR
// if y - r < 0 then
66644: LD_VAR 0 2
66648: PUSH
66649: LD_VAR 0 3
66653: MINUS
66654: PUSH
66655: LD_INT 0
66657: LESS
66658: IFFALSE 66670
// min_y := 0 else
66660: LD_ADDR_VAR 0 7
66664: PUSH
66665: LD_INT 0
66667: ST_TO_ADDR
66668: GO 66686
// min_y := y - r ;
66670: LD_ADDR_VAR 0 7
66674: PUSH
66675: LD_VAR 0 2
66679: PUSH
66680: LD_VAR 0 3
66684: MINUS
66685: ST_TO_ADDR
// max_x := x + r ;
66686: LD_ADDR_VAR 0 9
66690: PUSH
66691: LD_VAR 0 1
66695: PUSH
66696: LD_VAR 0 3
66700: PLUS
66701: ST_TO_ADDR
// max_y := y + r ;
66702: LD_ADDR_VAR 0 10
66706: PUSH
66707: LD_VAR 0 2
66711: PUSH
66712: LD_VAR 0 3
66716: PLUS
66717: ST_TO_ADDR
// for _x = min_x to max_x do
66718: LD_ADDR_VAR 0 5
66722: PUSH
66723: DOUBLE
66724: LD_VAR 0 8
66728: DEC
66729: ST_TO_ADDR
66730: LD_VAR 0 9
66734: PUSH
66735: FOR_TO
66736: IFFALSE 66837
// for _y = min_y to max_y do
66738: LD_ADDR_VAR 0 6
66742: PUSH
66743: DOUBLE
66744: LD_VAR 0 7
66748: DEC
66749: ST_TO_ADDR
66750: LD_VAR 0 10
66754: PUSH
66755: FOR_TO
66756: IFFALSE 66833
// begin if not ValidHex ( _x , _y ) then
66758: LD_VAR 0 5
66762: PPUSH
66763: LD_VAR 0 6
66767: PPUSH
66768: CALL_OW 488
66772: NOT
66773: IFFALSE 66777
// continue ;
66775: GO 66755
// if GetResourceTypeXY ( _x , _y ) then
66777: LD_VAR 0 5
66781: PPUSH
66782: LD_VAR 0 6
66786: PPUSH
66787: CALL_OW 283
66791: IFFALSE 66831
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
66793: LD_ADDR_VAR 0 4
66797: PUSH
66798: LD_VAR 0 4
66802: PPUSH
66803: LD_VAR 0 4
66807: PUSH
66808: LD_INT 1
66810: PLUS
66811: PPUSH
66812: LD_VAR 0 5
66816: PUSH
66817: LD_VAR 0 6
66821: PUSH
66822: EMPTY
66823: LIST
66824: LIST
66825: PPUSH
66826: CALL_OW 1
66830: ST_TO_ADDR
// end ;
66831: GO 66755
66833: POP
66834: POP
66835: GO 66735
66837: POP
66838: POP
// end ;
66839: LD_VAR 0 4
66843: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
66844: LD_INT 0
66846: PPUSH
66847: PPUSH
66848: PPUSH
66849: PPUSH
66850: PPUSH
66851: PPUSH
66852: PPUSH
66853: PPUSH
// if not units then
66854: LD_VAR 0 1
66858: NOT
66859: IFFALSE 66863
// exit ;
66861: GO 67387
// result := UnitFilter ( units , [ f_ok ] ) ;
66863: LD_ADDR_VAR 0 3
66867: PUSH
66868: LD_VAR 0 1
66872: PPUSH
66873: LD_INT 50
66875: PUSH
66876: EMPTY
66877: LIST
66878: PPUSH
66879: CALL_OW 72
66883: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
66884: LD_ADDR_VAR 0 8
66888: PUSH
66889: LD_VAR 0 1
66893: PUSH
66894: LD_INT 1
66896: ARRAY
66897: PPUSH
66898: CALL_OW 255
66902: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
66903: LD_ADDR_VAR 0 10
66907: PUSH
66908: LD_INT 29
66910: PUSH
66911: LD_INT 91
66913: PUSH
66914: LD_INT 49
66916: PUSH
66917: EMPTY
66918: LIST
66919: LIST
66920: LIST
66921: ST_TO_ADDR
// if not result then
66922: LD_VAR 0 3
66926: NOT
66927: IFFALSE 66931
// exit ;
66929: GO 67387
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
66931: LD_ADDR_VAR 0 5
66935: PUSH
66936: LD_INT 81
66938: PUSH
66939: LD_VAR 0 8
66943: PUSH
66944: EMPTY
66945: LIST
66946: LIST
66947: PPUSH
66948: CALL_OW 69
66952: ST_TO_ADDR
// for i in result do
66953: LD_ADDR_VAR 0 4
66957: PUSH
66958: LD_VAR 0 3
66962: PUSH
66963: FOR_IN
66964: IFFALSE 67385
// begin tag := GetTag ( i ) + 1 ;
66966: LD_ADDR_VAR 0 9
66970: PUSH
66971: LD_VAR 0 4
66975: PPUSH
66976: CALL_OW 110
66980: PUSH
66981: LD_INT 1
66983: PLUS
66984: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
66985: LD_ADDR_VAR 0 7
66989: PUSH
66990: LD_VAR 0 4
66994: PPUSH
66995: CALL_OW 250
66999: PPUSH
67000: LD_VAR 0 4
67004: PPUSH
67005: CALL_OW 251
67009: PPUSH
67010: LD_INT 6
67012: PPUSH
67013: CALL 66586 0 3
67017: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
67018: LD_VAR 0 4
67022: PPUSH
67023: CALL_OW 247
67027: PUSH
67028: LD_INT 2
67030: EQUAL
67031: PUSH
67032: LD_VAR 0 7
67036: AND
67037: PUSH
67038: LD_VAR 0 4
67042: PPUSH
67043: CALL_OW 264
67047: PUSH
67048: LD_VAR 0 10
67052: IN
67053: NOT
67054: AND
67055: IFFALSE 67094
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
67057: LD_VAR 0 4
67061: PPUSH
67062: LD_VAR 0 7
67066: PUSH
67067: LD_INT 1
67069: ARRAY
67070: PUSH
67071: LD_INT 1
67073: ARRAY
67074: PPUSH
67075: LD_VAR 0 7
67079: PUSH
67080: LD_INT 1
67082: ARRAY
67083: PUSH
67084: LD_INT 2
67086: ARRAY
67087: PPUSH
67088: CALL_OW 116
67092: GO 67383
// if path > tag then
67094: LD_VAR 0 2
67098: PUSH
67099: LD_VAR 0 9
67103: GREATER
67104: IFFALSE 67312
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
67106: LD_ADDR_VAR 0 6
67110: PUSH
67111: LD_VAR 0 5
67115: PPUSH
67116: LD_INT 91
67118: PUSH
67119: LD_VAR 0 4
67123: PUSH
67124: LD_INT 8
67126: PUSH
67127: EMPTY
67128: LIST
67129: LIST
67130: LIST
67131: PPUSH
67132: CALL_OW 72
67136: ST_TO_ADDR
// if nearEnemy then
67137: LD_VAR 0 6
67141: IFFALSE 67210
// begin if GetWeapon ( i ) = ru_time_lapser then
67143: LD_VAR 0 4
67147: PPUSH
67148: CALL_OW 264
67152: PUSH
67153: LD_INT 49
67155: EQUAL
67156: IFFALSE 67184
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
67158: LD_VAR 0 4
67162: PPUSH
67163: LD_VAR 0 6
67167: PPUSH
67168: LD_VAR 0 4
67172: PPUSH
67173: CALL_OW 74
67177: PPUSH
67178: CALL_OW 112
67182: GO 67208
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
67184: LD_VAR 0 4
67188: PPUSH
67189: LD_VAR 0 6
67193: PPUSH
67194: LD_VAR 0 4
67198: PPUSH
67199: CALL_OW 74
67203: PPUSH
67204: CALL 68312 0 2
// end else
67208: GO 67310
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
67210: LD_VAR 0 4
67214: PPUSH
67215: LD_VAR 0 2
67219: PUSH
67220: LD_VAR 0 9
67224: ARRAY
67225: PUSH
67226: LD_INT 1
67228: ARRAY
67229: PPUSH
67230: LD_VAR 0 2
67234: PUSH
67235: LD_VAR 0 9
67239: ARRAY
67240: PUSH
67241: LD_INT 2
67243: ARRAY
67244: PPUSH
67245: CALL_OW 297
67249: PUSH
67250: LD_INT 6
67252: GREATER
67253: IFFALSE 67296
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
67255: LD_VAR 0 4
67259: PPUSH
67260: LD_VAR 0 2
67264: PUSH
67265: LD_VAR 0 9
67269: ARRAY
67270: PUSH
67271: LD_INT 1
67273: ARRAY
67274: PPUSH
67275: LD_VAR 0 2
67279: PUSH
67280: LD_VAR 0 9
67284: ARRAY
67285: PUSH
67286: LD_INT 2
67288: ARRAY
67289: PPUSH
67290: CALL_OW 114
67294: GO 67310
// SetTag ( i , tag ) ;
67296: LD_VAR 0 4
67300: PPUSH
67301: LD_VAR 0 9
67305: PPUSH
67306: CALL_OW 109
// end else
67310: GO 67383
// if enemy then
67312: LD_VAR 0 5
67316: IFFALSE 67383
// begin if GetWeapon ( i ) = ru_time_lapser then
67318: LD_VAR 0 4
67322: PPUSH
67323: CALL_OW 264
67327: PUSH
67328: LD_INT 49
67330: EQUAL
67331: IFFALSE 67359
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
67333: LD_VAR 0 4
67337: PPUSH
67338: LD_VAR 0 5
67342: PPUSH
67343: LD_VAR 0 4
67347: PPUSH
67348: CALL_OW 74
67352: PPUSH
67353: CALL_OW 112
67357: GO 67383
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
67359: LD_VAR 0 4
67363: PPUSH
67364: LD_VAR 0 5
67368: PPUSH
67369: LD_VAR 0 4
67373: PPUSH
67374: CALL_OW 74
67378: PPUSH
67379: CALL 68312 0 2
// end ; end ;
67383: GO 66963
67385: POP
67386: POP
// end ;
67387: LD_VAR 0 3
67391: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
67392: LD_INT 0
67394: PPUSH
67395: PPUSH
67396: PPUSH
// if not unit or IsInUnit ( unit ) then
67397: LD_VAR 0 1
67401: NOT
67402: PUSH
67403: LD_VAR 0 1
67407: PPUSH
67408: CALL_OW 310
67412: OR
67413: IFFALSE 67417
// exit ;
67415: GO 67508
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
67417: LD_ADDR_VAR 0 4
67421: PUSH
67422: LD_VAR 0 1
67426: PPUSH
67427: CALL_OW 250
67431: PPUSH
67432: LD_VAR 0 2
67436: PPUSH
67437: LD_INT 1
67439: PPUSH
67440: CALL_OW 272
67444: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
67445: LD_ADDR_VAR 0 5
67449: PUSH
67450: LD_VAR 0 1
67454: PPUSH
67455: CALL_OW 251
67459: PPUSH
67460: LD_VAR 0 2
67464: PPUSH
67465: LD_INT 1
67467: PPUSH
67468: CALL_OW 273
67472: ST_TO_ADDR
// if ValidHex ( x , y ) then
67473: LD_VAR 0 4
67477: PPUSH
67478: LD_VAR 0 5
67482: PPUSH
67483: CALL_OW 488
67487: IFFALSE 67508
// ComTurnXY ( unit , x , y ) ;
67489: LD_VAR 0 1
67493: PPUSH
67494: LD_VAR 0 4
67498: PPUSH
67499: LD_VAR 0 5
67503: PPUSH
67504: CALL_OW 118
// end ;
67508: LD_VAR 0 3
67512: RET
// export function SeeUnits ( side , units ) ; var i ; begin
67513: LD_INT 0
67515: PPUSH
67516: PPUSH
// result := false ;
67517: LD_ADDR_VAR 0 3
67521: PUSH
67522: LD_INT 0
67524: ST_TO_ADDR
// if not units then
67525: LD_VAR 0 2
67529: NOT
67530: IFFALSE 67534
// exit ;
67532: GO 67579
// for i in units do
67534: LD_ADDR_VAR 0 4
67538: PUSH
67539: LD_VAR 0 2
67543: PUSH
67544: FOR_IN
67545: IFFALSE 67577
// if See ( side , i ) then
67547: LD_VAR 0 1
67551: PPUSH
67552: LD_VAR 0 4
67556: PPUSH
67557: CALL_OW 292
67561: IFFALSE 67575
// begin result := true ;
67563: LD_ADDR_VAR 0 3
67567: PUSH
67568: LD_INT 1
67570: ST_TO_ADDR
// exit ;
67571: POP
67572: POP
67573: GO 67579
// end ;
67575: GO 67544
67577: POP
67578: POP
// end ;
67579: LD_VAR 0 3
67583: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
67584: LD_INT 0
67586: PPUSH
67587: PPUSH
67588: PPUSH
67589: PPUSH
// if not unit or not points then
67590: LD_VAR 0 1
67594: NOT
67595: PUSH
67596: LD_VAR 0 2
67600: NOT
67601: OR
67602: IFFALSE 67606
// exit ;
67604: GO 67696
// dist := 99999 ;
67606: LD_ADDR_VAR 0 5
67610: PUSH
67611: LD_INT 99999
67613: ST_TO_ADDR
// for i in points do
67614: LD_ADDR_VAR 0 4
67618: PUSH
67619: LD_VAR 0 2
67623: PUSH
67624: FOR_IN
67625: IFFALSE 67694
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
67627: LD_ADDR_VAR 0 6
67631: PUSH
67632: LD_VAR 0 1
67636: PPUSH
67637: LD_VAR 0 4
67641: PUSH
67642: LD_INT 1
67644: ARRAY
67645: PPUSH
67646: LD_VAR 0 4
67650: PUSH
67651: LD_INT 2
67653: ARRAY
67654: PPUSH
67655: CALL_OW 297
67659: ST_TO_ADDR
// if tmpDist < dist then
67660: LD_VAR 0 6
67664: PUSH
67665: LD_VAR 0 5
67669: LESS
67670: IFFALSE 67692
// begin result := i ;
67672: LD_ADDR_VAR 0 3
67676: PUSH
67677: LD_VAR 0 4
67681: ST_TO_ADDR
// dist := tmpDist ;
67682: LD_ADDR_VAR 0 5
67686: PUSH
67687: LD_VAR 0 6
67691: ST_TO_ADDR
// end ; end ;
67692: GO 67624
67694: POP
67695: POP
// end ;
67696: LD_VAR 0 3
67700: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
67701: LD_INT 0
67703: PPUSH
// uc_side := side ;
67704: LD_ADDR_OWVAR 20
67708: PUSH
67709: LD_VAR 0 1
67713: ST_TO_ADDR
// uc_nation := 3 ;
67714: LD_ADDR_OWVAR 21
67718: PUSH
67719: LD_INT 3
67721: ST_TO_ADDR
// vc_chassis := 25 ;
67722: LD_ADDR_OWVAR 37
67726: PUSH
67727: LD_INT 25
67729: ST_TO_ADDR
// vc_engine := engine_siberite ;
67730: LD_ADDR_OWVAR 39
67734: PUSH
67735: LD_INT 3
67737: ST_TO_ADDR
// vc_control := control_computer ;
67738: LD_ADDR_OWVAR 38
67742: PUSH
67743: LD_INT 3
67745: ST_TO_ADDR
// vc_weapon := 59 ;
67746: LD_ADDR_OWVAR 40
67750: PUSH
67751: LD_INT 59
67753: ST_TO_ADDR
// result := CreateVehicle ;
67754: LD_ADDR_VAR 0 5
67758: PUSH
67759: CALL_OW 45
67763: ST_TO_ADDR
// SetDir ( result , d ) ;
67764: LD_VAR 0 5
67768: PPUSH
67769: LD_VAR 0 4
67773: PPUSH
67774: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
67778: LD_VAR 0 5
67782: PPUSH
67783: LD_VAR 0 2
67787: PPUSH
67788: LD_VAR 0 3
67792: PPUSH
67793: LD_INT 0
67795: PPUSH
67796: CALL_OW 48
// end ;
67800: LD_VAR 0 5
67804: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
67805: LD_INT 0
67807: PPUSH
67808: PPUSH
67809: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
67810: LD_ADDR_VAR 0 2
67814: PUSH
67815: LD_INT 0
67817: PUSH
67818: LD_INT 0
67820: PUSH
67821: LD_INT 0
67823: PUSH
67824: LD_INT 0
67826: PUSH
67827: EMPTY
67828: LIST
67829: LIST
67830: LIST
67831: LIST
67832: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
67833: LD_VAR 0 1
67837: NOT
67838: PUSH
67839: LD_VAR 0 1
67843: PPUSH
67844: CALL_OW 264
67848: PUSH
67849: LD_INT 12
67851: PUSH
67852: LD_INT 51
67854: PUSH
67855: LD_INT 32
67857: PUSH
67858: LD_INT 89
67860: PUSH
67861: EMPTY
67862: LIST
67863: LIST
67864: LIST
67865: LIST
67866: IN
67867: NOT
67868: OR
67869: IFFALSE 67873
// exit ;
67871: GO 67971
// for i := 1 to 3 do
67873: LD_ADDR_VAR 0 3
67877: PUSH
67878: DOUBLE
67879: LD_INT 1
67881: DEC
67882: ST_TO_ADDR
67883: LD_INT 3
67885: PUSH
67886: FOR_TO
67887: IFFALSE 67969
// begin tmp := GetCargo ( cargo , i ) ;
67889: LD_ADDR_VAR 0 4
67893: PUSH
67894: LD_VAR 0 1
67898: PPUSH
67899: LD_VAR 0 3
67903: PPUSH
67904: CALL_OW 289
67908: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
67909: LD_ADDR_VAR 0 2
67913: PUSH
67914: LD_VAR 0 2
67918: PPUSH
67919: LD_VAR 0 3
67923: PPUSH
67924: LD_VAR 0 4
67928: PPUSH
67929: CALL_OW 1
67933: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
67934: LD_ADDR_VAR 0 2
67938: PUSH
67939: LD_VAR 0 2
67943: PPUSH
67944: LD_INT 4
67946: PPUSH
67947: LD_VAR 0 2
67951: PUSH
67952: LD_INT 4
67954: ARRAY
67955: PUSH
67956: LD_VAR 0 4
67960: PLUS
67961: PPUSH
67962: CALL_OW 1
67966: ST_TO_ADDR
// end ;
67967: GO 67886
67969: POP
67970: POP
// end ;
67971: LD_VAR 0 2
67975: RET
// export function Length ( array ) ; begin
67976: LD_INT 0
67978: PPUSH
// result := array + 0 ;
67979: LD_ADDR_VAR 0 2
67983: PUSH
67984: LD_VAR 0 1
67988: PUSH
67989: LD_INT 0
67991: PLUS
67992: ST_TO_ADDR
// end ;
67993: LD_VAR 0 2
67997: RET
// export function PrepareArray ( array ) ; begin
67998: LD_INT 0
68000: PPUSH
// result := array diff 0 ;
68001: LD_ADDR_VAR 0 2
68005: PUSH
68006: LD_VAR 0 1
68010: PUSH
68011: LD_INT 0
68013: DIFF
68014: ST_TO_ADDR
// if not result [ 1 ] then
68015: LD_VAR 0 2
68019: PUSH
68020: LD_INT 1
68022: ARRAY
68023: NOT
68024: IFFALSE 68044
// result := Delete ( result , 1 ) ;
68026: LD_ADDR_VAR 0 2
68030: PUSH
68031: LD_VAR 0 2
68035: PPUSH
68036: LD_INT 1
68038: PPUSH
68039: CALL_OW 3
68043: ST_TO_ADDR
// end ;
68044: LD_VAR 0 2
68048: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
68049: LD_INT 0
68051: PPUSH
68052: PPUSH
68053: PPUSH
68054: PPUSH
// sibRocketRange := 25 ;
68055: LD_ADDR_VAR 0 6
68059: PUSH
68060: LD_INT 25
68062: ST_TO_ADDR
// result := false ;
68063: LD_ADDR_VAR 0 4
68067: PUSH
68068: LD_INT 0
68070: ST_TO_ADDR
// for i := 0 to 5 do
68071: LD_ADDR_VAR 0 5
68075: PUSH
68076: DOUBLE
68077: LD_INT 0
68079: DEC
68080: ST_TO_ADDR
68081: LD_INT 5
68083: PUSH
68084: FOR_TO
68085: IFFALSE 68152
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
68087: LD_VAR 0 1
68091: PPUSH
68092: LD_VAR 0 5
68096: PPUSH
68097: LD_VAR 0 6
68101: PPUSH
68102: CALL_OW 272
68106: PPUSH
68107: LD_VAR 0 2
68111: PPUSH
68112: LD_VAR 0 5
68116: PPUSH
68117: LD_VAR 0 6
68121: PPUSH
68122: CALL_OW 273
68126: PPUSH
68127: LD_VAR 0 3
68131: PPUSH
68132: CALL_OW 309
68136: IFFALSE 68150
// begin result := true ;
68138: LD_ADDR_VAR 0 4
68142: PUSH
68143: LD_INT 1
68145: ST_TO_ADDR
// exit ;
68146: POP
68147: POP
68148: GO 68154
// end ;
68150: GO 68084
68152: POP
68153: POP
// end ;
68154: LD_VAR 0 4
68158: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
68159: LD_INT 0
68161: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
68162: LD_VAR 0 1
68166: PPUSH
68167: LD_VAR 0 2
68171: PPUSH
68172: LD_INT 0
68174: PPUSH
68175: LD_INT 0
68177: PPUSH
68178: LD_INT 1
68180: PPUSH
68181: LD_INT 0
68183: PPUSH
68184: CALL_OW 587
// end ;
68188: LD_VAR 0 3
68192: RET
// export function CenterOnNow ( unit ) ; begin
68193: LD_INT 0
68195: PPUSH
// result := IsInUnit ( unit ) ;
68196: LD_ADDR_VAR 0 2
68200: PUSH
68201: LD_VAR 0 1
68205: PPUSH
68206: CALL_OW 310
68210: ST_TO_ADDR
// if not result then
68211: LD_VAR 0 2
68215: NOT
68216: IFFALSE 68228
// result := unit ;
68218: LD_ADDR_VAR 0 2
68222: PUSH
68223: LD_VAR 0 1
68227: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
68228: LD_VAR 0 1
68232: PPUSH
68233: CALL_OW 87
// end ;
68237: LD_VAR 0 2
68241: RET
// export function ComMoveHex ( unit , hex ) ; begin
68242: LD_INT 0
68244: PPUSH
// if not hex then
68245: LD_VAR 0 2
68249: NOT
68250: IFFALSE 68254
// exit ;
68252: GO 68307
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
68254: LD_VAR 0 2
68258: PUSH
68259: LD_INT 1
68261: ARRAY
68262: PPUSH
68263: LD_VAR 0 2
68267: PUSH
68268: LD_INT 2
68270: ARRAY
68271: PPUSH
68272: CALL_OW 428
68276: IFFALSE 68280
// exit ;
68278: GO 68307
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
68280: LD_VAR 0 1
68284: PPUSH
68285: LD_VAR 0 2
68289: PUSH
68290: LD_INT 1
68292: ARRAY
68293: PPUSH
68294: LD_VAR 0 2
68298: PUSH
68299: LD_INT 2
68301: ARRAY
68302: PPUSH
68303: CALL_OW 111
// end ;
68307: LD_VAR 0 3
68311: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
68312: LD_INT 0
68314: PPUSH
68315: PPUSH
68316: PPUSH
// if not unit or not enemy then
68317: LD_VAR 0 1
68321: NOT
68322: PUSH
68323: LD_VAR 0 2
68327: NOT
68328: OR
68329: IFFALSE 68333
// exit ;
68331: GO 68457
// x := GetX ( enemy ) ;
68333: LD_ADDR_VAR 0 4
68337: PUSH
68338: LD_VAR 0 2
68342: PPUSH
68343: CALL_OW 250
68347: ST_TO_ADDR
// y := GetY ( enemy ) ;
68348: LD_ADDR_VAR 0 5
68352: PUSH
68353: LD_VAR 0 2
68357: PPUSH
68358: CALL_OW 251
68362: ST_TO_ADDR
// if ValidHex ( x , y ) then
68363: LD_VAR 0 4
68367: PPUSH
68368: LD_VAR 0 5
68372: PPUSH
68373: CALL_OW 488
68377: IFFALSE 68457
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
68379: LD_VAR 0 2
68383: PPUSH
68384: CALL_OW 247
68388: PUSH
68389: LD_INT 3
68391: PUSH
68392: LD_INT 2
68394: PUSH
68395: EMPTY
68396: LIST
68397: LIST
68398: IN
68399: PUSH
68400: LD_VAR 0 1
68404: PPUSH
68405: CALL_OW 255
68409: PPUSH
68410: LD_VAR 0 2
68414: PPUSH
68415: CALL_OW 292
68419: AND
68420: IFFALSE 68438
// ComAttackUnit ( unit , enemy ) else
68422: LD_VAR 0 1
68426: PPUSH
68427: LD_VAR 0 2
68431: PPUSH
68432: CALL_OW 115
68436: GO 68457
// ComAgressiveMove ( unit , x , y ) ;
68438: LD_VAR 0 1
68442: PPUSH
68443: LD_VAR 0 4
68447: PPUSH
68448: LD_VAR 0 5
68452: PPUSH
68453: CALL_OW 114
// end ; end_of_file
68457: LD_VAR 0 3
68461: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
68462: LD_VAR 0 1
68466: PUSH
68467: LD_INT 200
68469: DOUBLE
68470: GREATEREQUAL
68471: IFFALSE 68479
68473: LD_INT 299
68475: DOUBLE
68476: LESSEQUAL
68477: IFTRUE 68481
68479: GO 68513
68481: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
68482: LD_VAR 0 1
68486: PPUSH
68487: LD_VAR 0 2
68491: PPUSH
68492: LD_VAR 0 3
68496: PPUSH
68497: LD_VAR 0 4
68501: PPUSH
68502: LD_VAR 0 5
68506: PPUSH
68507: CALL 23006 0 5
68511: GO 68590
68513: LD_INT 300
68515: DOUBLE
68516: GREATEREQUAL
68517: IFFALSE 68525
68519: LD_INT 399
68521: DOUBLE
68522: LESSEQUAL
68523: IFTRUE 68527
68525: GO 68589
68527: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
68528: LD_VAR 0 1
68532: PPUSH
68533: LD_VAR 0 2
68537: PPUSH
68538: LD_VAR 0 3
68542: PPUSH
68543: LD_VAR 0 4
68547: PPUSH
68548: LD_VAR 0 5
68552: PPUSH
68553: LD_VAR 0 6
68557: PPUSH
68558: LD_VAR 0 7
68562: PPUSH
68563: LD_VAR 0 8
68567: PPUSH
68568: LD_VAR 0 9
68572: PPUSH
68573: LD_VAR 0 10
68577: PPUSH
68578: LD_VAR 0 11
68582: PPUSH
68583: CALL 19331 0 11
68587: GO 68590
68589: POP
// end ;
68590: PPOPN 11
68592: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
68593: LD_VAR 0 1
68597: PPUSH
68598: LD_VAR 0 2
68602: PPUSH
68603: LD_VAR 0 3
68607: PPUSH
68608: LD_VAR 0 4
68612: PPUSH
68613: LD_VAR 0 5
68617: PPUSH
68618: CALL 22742 0 5
// end ; end_of_file
68622: PPOPN 5
68624: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
68625: LD_VAR 0 1
68629: PPUSH
68630: LD_VAR 0 2
68634: PPUSH
68635: LD_VAR 0 3
68639: PPUSH
68640: LD_VAR 0 4
68644: PPUSH
68645: LD_VAR 0 5
68649: PPUSH
68650: LD_VAR 0 6
68654: PPUSH
68655: CALL 6983 0 6
// end ;
68659: PPOPN 6
68661: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
68662: LD_INT 0
68664: PPUSH
// begin if not units then
68665: LD_VAR 0 1
68669: NOT
68670: IFFALSE 68674
// exit ;
68672: GO 68674
// end ;
68674: PPOPN 7
68676: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
68677: CALL 6887 0 0
// end ;
68681: PPOPN 1
68683: END
