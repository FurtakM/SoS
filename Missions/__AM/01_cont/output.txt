// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 32 0 0
// InitAmerican ;
  15: CALL 866 0 0
// InitRussian ;
  19: CALL 1137 0 0
// DebugMode ;
  23: CALL 160 0 0
// Action ;
  27: CALL 2700 0 0
// end ;
  31: END
// export debug ; export mission_prefix ; export active_russian_dialog , bobby_in_squad , powell_contact , macmilan_use_radio , cyrus_in_squad , active_road_patrol , macmilan_in_trap , meta_action , end_mission , bobby_saved , cyrus_saved , send_troops_to_forest , active_powell_dialog ; function Init ; begin
  32: LD_INT 0
  34: PPUSH
// mission_prefix := 01_ ;
  35: LD_ADDR_EXP 2
  39: PUSH
  40: LD_STRING 01_
  42: ST_TO_ADDR
// debug := false ;
  43: LD_ADDR_EXP 1
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// active_russian_dialog := false ;
  51: LD_ADDR_EXP 3
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// bobby_in_squad := false ;
  59: LD_ADDR_EXP 4
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// cyrus_in_squad := false ;
  67: LD_ADDR_EXP 7
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// powell_contact := false ;
  75: LD_ADDR_EXP 5
  79: PUSH
  80: LD_INT 0
  82: ST_TO_ADDR
// macmilan_use_radio := false ;
  83: LD_ADDR_EXP 6
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// active_road_patrol := false ;
  91: LD_ADDR_EXP 8
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// macmilan_in_trap := false ;
  99: LD_ADDR_EXP 9
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// meta_action := false ;
 107: LD_ADDR_EXP 10
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// end_mission := false ;
 115: LD_ADDR_EXP 11
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// bobby_saved := false ;
 123: LD_ADDR_EXP 12
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// cyrus_saved := false ;
 131: LD_ADDR_EXP 13
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// send_troops_to_forest := false ;
 139: LD_ADDR_EXP 14
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// active_powell_dialog := false ;
 147: LD_ADDR_EXP 15
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// end ;
 155: LD_VAR 0 1
 159: RET
// function DebugMode ; var i ; begin
 160: LD_INT 0
 162: PPUSH
 163: PPUSH
// if not debug then
 164: LD_EXP 1
 168: NOT
 169: IFFALSE 173
// exit ;
 171: GO 192
// Difficulty := 3 ;
 173: LD_ADDR_OWVAR 67
 177: PUSH
 178: LD_INT 3
 180: ST_TO_ADDR
// TurnFogOff ( ) ;
 181: CALL_OW 537
// FogOff ( 1 ) ;
 185: LD_INT 1
 187: PPUSH
 188: CALL_OW 344
// end ; end_of_file
 192: LD_VAR 0 1
 196: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 197: LD_INT 0
 199: PPUSH
 200: PPUSH
 201: PPUSH
// uc_side := GetSide ( b ) ;
 202: LD_ADDR_OWVAR 20
 206: PUSH
 207: LD_VAR 0 2
 211: PPUSH
 212: CALL_OW 255
 216: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 217: LD_ADDR_OWVAR 21
 221: PUSH
 222: LD_VAR 0 2
 226: PPUSH
 227: CALL_OW 248
 231: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 232: LD_INT 0
 234: PPUSH
 235: LD_INT 1
 237: PPUSH
 238: LD_VAR 0 1
 242: PPUSH
 243: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
 247: LD_ADDR_VAR 0 5
 251: PUSH
 252: LD_VAR 0 2
 256: PPUSH
 257: CALL_OW 254
 261: PUSH
 262: LD_INT 3
 264: MINUS
 265: ST_TO_ADDR
// if dir < 0 then
 266: LD_VAR 0 5
 270: PUSH
 271: LD_INT 0
 273: LESS
 274: IFFALSE 290
// dir := 6 + dir ;
 276: LD_ADDR_VAR 0 5
 280: PUSH
 281: LD_INT 6
 283: PUSH
 284: LD_VAR 0 5
 288: PLUS
 289: ST_TO_ADDR
// un := CreateHuman ;
 290: LD_ADDR_VAR 0 4
 294: PUSH
 295: CALL_OW 44
 299: ST_TO_ADDR
// SetDir ( un , dir ) ;
 300: LD_VAR 0 4
 304: PPUSH
 305: LD_VAR 0 5
 309: PPUSH
 310: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 314: LD_VAR 0 4
 318: PPUSH
 319: LD_VAR 0 2
 323: PPUSH
 324: CALL_OW 52
// end ;
 328: LD_VAR 0 3
 332: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 333: LD_INT 0
 335: PPUSH
// uc_side := side ;
 336: LD_ADDR_OWVAR 20
 340: PUSH
 341: LD_VAR 0 1
 345: ST_TO_ADDR
// uc_nation := nation ;
 346: LD_ADDR_OWVAR 21
 350: PUSH
 351: LD_VAR 0 2
 355: ST_TO_ADDR
// vc_chassis := chassis ;
 356: LD_ADDR_OWVAR 37
 360: PUSH
 361: LD_VAR 0 3
 365: ST_TO_ADDR
// vc_engine := engine ;
 366: LD_ADDR_OWVAR 39
 370: PUSH
 371: LD_VAR 0 4
 375: ST_TO_ADDR
// vc_control := control ;
 376: LD_ADDR_OWVAR 38
 380: PUSH
 381: LD_VAR 0 5
 385: ST_TO_ADDR
// vc_weapon := weapon ;
 386: LD_ADDR_OWVAR 40
 390: PUSH
 391: LD_VAR 0 6
 395: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 396: LD_ADDR_OWVAR 41
 400: PUSH
 401: LD_VAR 0 7
 405: ST_TO_ADDR
// result := CreateVehicle ;
 406: LD_ADDR_VAR 0 8
 410: PUSH
 411: CALL_OW 45
 415: ST_TO_ADDR
// end ;
 416: LD_VAR 0 8
 420: RET
// export function ComPatrol ( unit , mode , pause , coords ) ; var i ; begin
 421: LD_INT 0
 423: PPUSH
 424: PPUSH
// while ( active_road_patrol ) do
 425: LD_EXP 8
 429: IFFALSE 783
// begin Wait ( 0 0$01 ) ;
 431: LD_INT 35
 433: PPUSH
 434: CALL_OW 67
// if not unit then
 438: LD_VAR 0 1
 442: NOT
 443: IFFALSE 447
// exit ;
 445: GO 783
// if mode = road then
 447: LD_VAR 0 2
 451: PUSH
 452: LD_STRING road
 454: EQUAL
 455: IFFALSE 511
// if GetFuel ( unit ) < 50 and not See ( 1 , unit ) and not HasTask ( unit ) then
 457: LD_VAR 0 1
 461: PPUSH
 462: CALL_OW 261
 466: PUSH
 467: LD_INT 50
 469: LESS
 470: PUSH
 471: LD_INT 1
 473: PPUSH
 474: LD_VAR 0 1
 478: PPUSH
 479: CALL_OW 292
 483: NOT
 484: AND
 485: PUSH
 486: LD_VAR 0 1
 490: PPUSH
 491: CALL_OW 314
 495: NOT
 496: AND
 497: IFFALSE 511
// SetFuel ( unit , 100 ) ;
 499: LD_VAR 0 1
 503: PPUSH
 504: LD_INT 100
 506: PPUSH
 507: CALL_OW 240
// if mode = forest then
 511: LD_VAR 0 2
 515: PUSH
 516: LD_STRING forest
 518: EQUAL
 519: IFFALSE 599
// if GetLives ( unit ) < 600 then
 521: LD_VAR 0 1
 525: PPUSH
 526: CALL_OW 256
 530: PUSH
 531: LD_INT 600
 533: LESS
 534: IFFALSE 599
// begin ComMoveXY ( unit , 42 , 3 ) ;
 536: LD_VAR 0 1
 540: PPUSH
 541: LD_INT 42
 543: PPUSH
 544: LD_INT 3
 546: PPUSH
 547: CALL_OW 111
// SetRememberedX ( unit , GetX ( unit ) ) ;
 551: LD_VAR 0 1
 555: PPUSH
 556: LD_VAR 0 1
 560: PPUSH
 561: CALL_OW 250
 565: PPUSH
 566: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
 570: LD_VAR 0 1
 574: PPUSH
 575: LD_VAR 0 1
 579: PPUSH
 580: CALL_OW 251
 584: PPUSH
 585: CALL_OW 232
// send_troops_to_forest := true ;
 589: LD_ADDR_EXP 14
 593: PUSH
 594: LD_INT 1
 596: ST_TO_ADDR
// break ;
 597: GO 783
// end ; if not HasTask ( unit ) then
 599: LD_VAR 0 1
 603: PPUSH
 604: CALL_OW 314
 608: NOT
 609: IFFALSE 781
// begin for i = 1 to coords do
 611: LD_ADDR_VAR 0 6
 615: PUSH
 616: DOUBLE
 617: LD_INT 1
 619: DEC
 620: ST_TO_ADDR
 621: LD_VAR 0 4
 625: PUSH
 626: FOR_TO
 627: IFFALSE 694
// begin AddComAgressiveMove ( unit , coords [ i ] , coords [ i + 1 ] ) ;
 629: LD_VAR 0 1
 633: PPUSH
 634: LD_VAR 0 4
 638: PUSH
 639: LD_VAR 0 6
 643: ARRAY
 644: PPUSH
 645: LD_VAR 0 4
 649: PUSH
 650: LD_VAR 0 6
 654: PUSH
 655: LD_INT 1
 657: PLUS
 658: ARRAY
 659: PPUSH
 660: CALL_OW 174
// AddComWait ( unit , pause ) ;
 664: LD_VAR 0 1
 668: PPUSH
 669: LD_VAR 0 3
 673: PPUSH
 674: CALL_OW 202
// i := i + 1 ;
 678: LD_ADDR_VAR 0 6
 682: PUSH
 683: LD_VAR 0 6
 687: PUSH
 688: LD_INT 1
 690: PLUS
 691: ST_TO_ADDR
// end ;
 692: GO 626
 694: POP
 695: POP
// for i = coords downto 1 do
 696: LD_ADDR_VAR 0 6
 700: PUSH
 701: DOUBLE
 702: LD_VAR 0 4
 706: INC
 707: ST_TO_ADDR
 708: LD_INT 1
 710: PUSH
 711: FOR_DOWNTO
 712: IFFALSE 779
// begin AddComAgressiveMove ( unit , coords [ i - 1 ] , coords [ i ] ) ;
 714: LD_VAR 0 1
 718: PPUSH
 719: LD_VAR 0 4
 723: PUSH
 724: LD_VAR 0 6
 728: PUSH
 729: LD_INT 1
 731: MINUS
 732: ARRAY
 733: PPUSH
 734: LD_VAR 0 4
 738: PUSH
 739: LD_VAR 0 6
 743: ARRAY
 744: PPUSH
 745: CALL_OW 174
// AddComWait ( unit , pause ) ;
 749: LD_VAR 0 1
 753: PPUSH
 754: LD_VAR 0 3
 758: PPUSH
 759: CALL_OW 202
// i := i - 1 ;
 763: LD_ADDR_VAR 0 6
 767: PUSH
 768: LD_VAR 0 6
 772: PUSH
 773: LD_INT 1
 775: MINUS
 776: ST_TO_ADDR
// end ;
 777: GO 711
 779: POP
 780: POP
// end ; end ;
 781: GO 425
// end ;
 783: LD_VAR 0 5
 787: RET
// export function DebugSay ( dialog ) ; var speaker ; begin
 788: LD_INT 0
 790: PPUSH
 791: PPUSH
// uc_nation := 1 ;
 792: LD_ADDR_OWVAR 21
 796: PUSH
 797: LD_INT 1
 799: ST_TO_ADDR
// uc_side := 0 ;
 800: LD_ADDR_OWVAR 20
 804: PUSH
 805: LD_INT 0
 807: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
 808: LD_INT 0
 810: PPUSH
 811: LD_INT 1
 813: PPUSH
 814: LD_INT 0
 816: PPUSH
 817: CALL_OW 380
// hc_name := speaker ;
 821: LD_ADDR_OWVAR 26
 825: PUSH
 826: LD_STRING speaker
 828: ST_TO_ADDR
// hc_gallery :=  ;
 829: LD_ADDR_OWVAR 33
 833: PUSH
 834: LD_STRING 
 836: ST_TO_ADDR
// speaker := CreateHuman ;
 837: LD_ADDR_VAR 0 3
 841: PUSH
 842: CALL_OW 44
 846: ST_TO_ADDR
// Say ( speaker , dialog ) ;
 847: LD_VAR 0 3
 851: PPUSH
 852: LD_VAR 0 1
 856: PPUSH
 857: CALL_OW 88
// end ; end_of_file
 861: LD_VAR 0 2
 865: RET
// export JMM , Bobby , Cyrus , Powell , fakePokryshkin ; export function InitAmerican ; begin
 866: LD_INT 0
 868: PPUSH
// uc_nation := 1 ;
 869: LD_ADDR_OWVAR 21
 873: PUSH
 874: LD_INT 1
 876: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , false ,  ) ;
 877: LD_ADDR_EXP 16
 881: PUSH
 882: LD_STRING JMM
 884: PPUSH
 885: LD_INT 0
 887: PPUSH
 888: LD_STRING 
 890: PPUSH
 891: CALL 25594 0 3
 895: ST_TO_ADDR
// uc_side := 4 ;
 896: LD_ADDR_OWVAR 20
 900: PUSH
 901: LD_INT 4
 903: ST_TO_ADDR
// hc_gallery := us ;
 904: LD_ADDR_OWVAR 33
 908: PUSH
 909: LD_STRING us
 911: ST_TO_ADDR
// hc_face_number := 7 ;
 912: LD_ADDR_OWVAR 34
 916: PUSH
 917: LD_INT 7
 919: ST_TO_ADDR
// hc_sex := sex_male ;
 920: LD_ADDR_OWVAR 27
 924: PUSH
 925: LD_INT 1
 927: ST_TO_ADDR
// hc_name := . ;
 928: LD_ADDR_OWVAR 26
 932: PUSH
 933: LD_STRING .
 935: ST_TO_ADDR
// hc_class := 1 ;
 936: LD_ADDR_OWVAR 28
 940: PUSH
 941: LD_INT 1
 943: ST_TO_ADDR
// Powell := CreateHuman ;
 944: LD_ADDR_EXP 19
 948: PUSH
 949: CALL_OW 44
 953: ST_TO_ADDR
// hc_name := . ;
 954: LD_ADDR_OWVAR 26
 958: PUSH
 959: LD_STRING .
 961: ST_TO_ADDR
// hc_gallery := ru ;
 962: LD_ADDR_OWVAR 33
 966: PUSH
 967: LD_STRING ru
 969: ST_TO_ADDR
// hc_face_number := 4 ;
 970: LD_ADDR_OWVAR 34
 974: PUSH
 975: LD_INT 4
 977: ST_TO_ADDR
// hc_sex := sex_male ;
 978: LD_ADDR_OWVAR 27
 982: PUSH
 983: LD_INT 1
 985: ST_TO_ADDR
// fakePokryshkin := CreateHuman ;
 986: LD_ADDR_EXP 20
 990: PUSH
 991: CALL_OW 44
 995: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , false ,  ) ;
 996: LD_ADDR_EXP 17
1000: PUSH
1001: LD_STRING Bobby
1003: PPUSH
1004: LD_INT 0
1006: PPUSH
1007: LD_STRING 
1009: PPUSH
1010: CALL 25594 0 3
1014: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , false ,  ) ;
1015: LD_ADDR_EXP 18
1019: PUSH
1020: LD_STRING Cyrus
1022: PPUSH
1023: LD_INT 0
1025: PPUSH
1026: LD_STRING 
1028: PPUSH
1029: CALL 25594 0 3
1033: ST_TO_ADDR
// case Difficulty of 1 :
1034: LD_OWVAR 67
1038: PUSH
1039: LD_INT 1
1041: DOUBLE
1042: EQUAL
1043: IFTRUE 1047
1045: GO 1062
1047: POP
// SetLives ( Bobby , 500 ) ; 2 :
1048: LD_EXP 17
1052: PPUSH
1053: LD_INT 500
1055: PPUSH
1056: CALL_OW 234
1060: GO 1132
1062: LD_INT 2
1064: DOUBLE
1065: EQUAL
1066: IFTRUE 1070
1068: GO 1085
1070: POP
// SetLives ( Bobby , 460 ) ; 3 :
1071: LD_EXP 17
1075: PPUSH
1076: LD_INT 460
1078: PPUSH
1079: CALL_OW 234
1083: GO 1132
1085: LD_INT 3
1087: DOUBLE
1088: EQUAL
1089: IFTRUE 1093
1091: GO 1108
1093: POP
// SetLives ( Bobby , 420 ) ; 4 :
1094: LD_EXP 17
1098: PPUSH
1099: LD_INT 420
1101: PPUSH
1102: CALL_OW 234
1106: GO 1132
1108: LD_INT 4
1110: DOUBLE
1111: EQUAL
1112: IFTRUE 1116
1114: GO 1131
1116: POP
// SetLives ( Bobby , 400 ) ; end ;
1117: LD_EXP 17
1121: PPUSH
1122: LD_INT 400
1124: PPUSH
1125: CALL_OW 234
1129: GO 1132
1131: POP
// end ; end_of_file
1132: LD_VAR 0 1
1136: RET
// export russian_troops_1 , russian_troops_2 , russian_patrol_tanks , russian_meta_guards , russian_patrol_forest ; export Pokryshkin ; export function InitRussian ; var skill , i , un ; begin
1137: LD_INT 0
1139: PPUSH
1140: PPUSH
1141: PPUSH
1142: PPUSH
// skill := [ 1 , 2 , 3 , 3 ] [ Difficulty ] ;
1143: LD_ADDR_VAR 0 2
1147: PUSH
1148: LD_INT 1
1150: PUSH
1151: LD_INT 2
1153: PUSH
1154: LD_INT 3
1156: PUSH
1157: LD_INT 3
1159: PUSH
1160: EMPTY
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: PUSH
1166: LD_OWVAR 67
1170: ARRAY
1171: ST_TO_ADDR
// uc_side := 3 ;
1172: LD_ADDR_OWVAR 20
1176: PUSH
1177: LD_INT 3
1179: ST_TO_ADDR
// uc_nation := 3 ;
1180: LD_ADDR_OWVAR 21
1184: PUSH
1185: LD_INT 3
1187: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
1188: LD_ADDR_EXP 26
1192: PUSH
1193: LD_STRING Pokryshkin
1195: PPUSH
1196: LD_INT 0
1198: PPUSH
1199: LD_STRING 
1201: PPUSH
1202: CALL 25594 0 3
1206: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 44 , 5 , false ) ;
1207: LD_EXP 26
1211: PPUSH
1212: LD_INT 44
1214: PPUSH
1215: LD_INT 5
1217: PPUSH
1218: LD_INT 0
1220: PPUSH
1221: CALL_OW 48
// hc_importance := 0 ;
1225: LD_ADDR_OWVAR 32
1229: PUSH
1230: LD_INT 0
1232: ST_TO_ADDR
// hc_gallery :=  ;
1233: LD_ADDR_OWVAR 33
1237: PUSH
1238: LD_STRING 
1240: ST_TO_ADDR
// hc_name :=  ;
1241: LD_ADDR_OWVAR 26
1245: PUSH
1246: LD_STRING 
1248: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1249: LD_INT 1
1251: PPUSH
1252: LD_INT 1
1254: PPUSH
1255: LD_VAR 0 2
1259: PPUSH
1260: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1264: LD_ADDR_OWVAR 33
1268: PUSH
1269: LD_STRING SecondCharsGal
1271: ST_TO_ADDR
// hc_face_number := 69 ;
1272: LD_ADDR_OWVAR 34
1276: PUSH
1277: LD_INT 69
1279: ST_TO_ADDR
// hc_sex := sex_male ;
1280: LD_ADDR_OWVAR 27
1284: PUSH
1285: LD_INT 1
1287: ST_TO_ADDR
// hc_name := Ilja Ivanov ;
1288: LD_ADDR_OWVAR 26
1292: PUSH
1293: LD_STRING Ilja Ivanov
1295: ST_TO_ADDR
// un := CreateHuman ;
1296: LD_ADDR_VAR 0 4
1300: PUSH
1301: CALL_OW 44
1305: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 1 , un ) ;
1306: LD_ADDR_EXP 21
1310: PUSH
1311: LD_EXP 21
1315: PPUSH
1316: LD_INT 1
1318: PPUSH
1319: LD_VAR 0 4
1323: PPUSH
1324: CALL_OW 2
1328: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1329: LD_VAR 0 4
1333: PPUSH
1334: LD_INT 3
1336: PPUSH
1337: LD_INT 0
1339: PPUSH
1340: CALL_OW 49
// PrepareHuman ( sex_male , 1 , skill ) ;
1344: LD_INT 1
1346: PPUSH
1347: LD_INT 1
1349: PPUSH
1350: LD_VAR 0 2
1354: PPUSH
1355: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1359: LD_ADDR_OWVAR 33
1363: PUSH
1364: LD_STRING SecondCharsGal
1366: ST_TO_ADDR
// hc_face_number := 70 ;
1367: LD_ADDR_OWVAR 34
1371: PUSH
1372: LD_INT 70
1374: ST_TO_ADDR
// hc_name := Pavel Starczy ;
1375: LD_ADDR_OWVAR 26
1379: PUSH
1380: LD_STRING Pavel Starczy
1382: ST_TO_ADDR
// un := CreateHuman ;
1383: LD_ADDR_VAR 0 4
1387: PUSH
1388: CALL_OW 44
1392: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 2 , un ) ;
1393: LD_ADDR_EXP 21
1397: PUSH
1398: LD_EXP 21
1402: PPUSH
1403: LD_INT 2
1405: PPUSH
1406: LD_VAR 0 4
1410: PPUSH
1411: CALL_OW 2
1415: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1416: LD_VAR 0 4
1420: PPUSH
1421: LD_INT 3
1423: PPUSH
1424: LD_INT 0
1426: PPUSH
1427: CALL_OW 49
// InitHc ;
1431: CALL_OW 19
// for i = 1 to 7 do
1435: LD_ADDR_VAR 0 3
1439: PUSH
1440: DOUBLE
1441: LD_INT 1
1443: DEC
1444: ST_TO_ADDR
1445: LD_INT 7
1447: PUSH
1448: FOR_TO
1449: IFFALSE 1600
// begin PrepareHuman ( false , 1 , skill ) ;
1451: LD_INT 0
1453: PPUSH
1454: LD_INT 1
1456: PPUSH
1457: LD_VAR 0 2
1461: PPUSH
1462: CALL_OW 380
// un := CreateHuman ;
1466: LD_ADDR_VAR 0 4
1470: PUSH
1471: CALL_OW 44
1475: ST_TO_ADDR
// if i mod 2 = 0 then
1476: LD_VAR 0 3
1480: PUSH
1481: LD_INT 2
1483: MOD
1484: PUSH
1485: LD_INT 0
1487: EQUAL
1488: IFFALSE 1545
// begin russian_troops_1 := Insert ( russian_troops_1 , russian_troops_1 + 1 , un ) ;
1490: LD_ADDR_EXP 21
1494: PUSH
1495: LD_EXP 21
1499: PPUSH
1500: LD_EXP 21
1504: PUSH
1505: LD_INT 1
1507: PLUS
1508: PPUSH
1509: LD_VAR 0 4
1513: PPUSH
1514: CALL_OW 2
1518: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1519: LD_VAR 0 4
1523: PPUSH
1524: LD_INT 3
1526: PPUSH
1527: LD_INT 0
1529: PPUSH
1530: CALL_OW 49
// ComHold ( un ) ;
1534: LD_VAR 0 4
1538: PPUSH
1539: CALL_OW 140
// end else
1543: GO 1598
// begin russian_troops_2 := Insert ( russian_troops_2 , russian_troops_2 + 1 , un ) ;
1545: LD_ADDR_EXP 22
1549: PUSH
1550: LD_EXP 22
1554: PPUSH
1555: LD_EXP 22
1559: PUSH
1560: LD_INT 1
1562: PLUS
1563: PPUSH
1564: LD_VAR 0 4
1568: PPUSH
1569: CALL_OW 2
1573: ST_TO_ADDR
// PlaceUnitArea ( un , guard_south , false ) ;
1574: LD_VAR 0 4
1578: PPUSH
1579: LD_INT 4
1581: PPUSH
1582: LD_INT 0
1584: PPUSH
1585: CALL_OW 49
// ComHold ( un ) ;
1589: LD_VAR 0 4
1593: PPUSH
1594: CALL_OW 140
// end ; end ;
1598: GO 1448
1600: POP
1601: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) do
1602: LD_ADDR_VAR 0 3
1606: PUSH
1607: LD_INT 22
1609: PUSH
1610: LD_INT 3
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: PUSH
1617: LD_INT 30
1619: PUSH
1620: LD_INT 31
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: PUSH
1627: EMPTY
1628: LIST
1629: LIST
1630: PPUSH
1631: CALL_OW 69
1635: PUSH
1636: FOR_IN
1637: IFFALSE 1655
// PrepareSolBun ( skill , i ) ;
1639: LD_VAR 0 2
1643: PPUSH
1644: LD_VAR 0 3
1648: PPUSH
1649: CALL 197 0 2
1653: GO 1636
1655: POP
1656: POP
// for i = 1 to 2 do
1657: LD_ADDR_VAR 0 3
1661: PUSH
1662: DOUBLE
1663: LD_INT 1
1665: DEC
1666: ST_TO_ADDR
1667: LD_INT 2
1669: PUSH
1670: FOR_TO
1671: IFFALSE 1802
// begin un := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1673: LD_ADDR_VAR 0 4
1677: PUSH
1678: LD_INT 3
1680: PPUSH
1681: LD_INT 3
1683: PPUSH
1684: LD_INT 22
1686: PPUSH
1687: LD_INT 1
1689: PPUSH
1690: LD_INT 1
1692: PPUSH
1693: LD_INT 42
1695: PPUSH
1696: LD_INT 100
1698: PPUSH
1699: CALL 333 0 7
1703: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
1704: LD_INT 0
1706: PPUSH
1707: LD_INT 3
1709: PPUSH
1710: LD_VAR 0 2
1714: PPUSH
1715: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1719: CALL_OW 44
1723: PPUSH
1724: LD_VAR 0 4
1728: PPUSH
1729: CALL_OW 52
// PlaceUnitXY ( un , [ 23 , 131 ] [ i ] , [ 14 , 87 ] [ i ] , false ) ;
1733: LD_VAR 0 4
1737: PPUSH
1738: LD_INT 23
1740: PUSH
1741: LD_INT 131
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: PUSH
1748: LD_VAR 0 3
1752: ARRAY
1753: PPUSH
1754: LD_INT 14
1756: PUSH
1757: LD_INT 87
1759: PUSH
1760: EMPTY
1761: LIST
1762: LIST
1763: PUSH
1764: LD_VAR 0 3
1768: ARRAY
1769: PPUSH
1770: LD_INT 0
1772: PPUSH
1773: CALL_OW 48
// russian_patrol_tanks := Insert ( russian_patrol_tanks , 1 , un ) ;
1777: LD_ADDR_EXP 23
1781: PUSH
1782: LD_EXP 23
1786: PPUSH
1787: LD_INT 1
1789: PPUSH
1790: LD_VAR 0 4
1794: PPUSH
1795: CALL_OW 2
1799: ST_TO_ADDR
// end ;
1800: GO 1670
1802: POP
1803: POP
// for i = 1 to 2 do
1804: LD_ADDR_VAR 0 3
1808: PUSH
1809: DOUBLE
1810: LD_INT 1
1812: DEC
1813: ST_TO_ADDR
1814: LD_INT 2
1816: PUSH
1817: FOR_TO
1818: IFFALSE 1909
// begin PrepareHuman ( [ sex_female , sex_male , sex_male ] [ i ] , 1 , 1 ) ;
1820: LD_INT 2
1822: PUSH
1823: LD_INT 1
1825: PUSH
1826: LD_INT 1
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: LIST
1833: PUSH
1834: LD_VAR 0 3
1838: ARRAY
1839: PPUSH
1840: LD_INT 1
1842: PPUSH
1843: LD_INT 1
1845: PPUSH
1846: CALL_OW 380
// un := CreateHuman ;
1850: LD_ADDR_VAR 0 4
1854: PUSH
1855: CALL_OW 44
1859: ST_TO_ADDR
// russian_meta_guards := Insert ( russian_meta_guards , 1 , un ) ;
1860: LD_ADDR_EXP 24
1864: PUSH
1865: LD_EXP 24
1869: PPUSH
1870: LD_INT 1
1872: PPUSH
1873: LD_VAR 0 4
1877: PPUSH
1878: CALL_OW 2
1882: ST_TO_ADDR
// PlaceUnitArea ( un , exitArea , false ) ;
1883: LD_VAR 0 4
1887: PPUSH
1888: LD_INT 10
1890: PPUSH
1891: LD_INT 0
1893: PPUSH
1894: CALL_OW 49
// ComHold ( un ) ;
1898: LD_VAR 0 4
1902: PPUSH
1903: CALL_OW 140
// end ;
1907: GO 1817
1909: POP
1910: POP
// if Difficulty < 3 then
1911: LD_OWVAR 67
1915: PUSH
1916: LD_INT 3
1918: LESS
1919: IFFALSE 1923
// exit ;
1921: GO 1966
// PrepareHuman ( false , 1 , skill ) ;
1923: LD_INT 0
1925: PPUSH
1926: LD_INT 1
1928: PPUSH
1929: LD_VAR 0 2
1933: PPUSH
1934: CALL_OW 380
// russian_patrol_forest := CreateHuman ;
1938: LD_ADDR_EXP 25
1942: PUSH
1943: CALL_OW 44
1947: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_forest , 82 , 2 , false ) ;
1948: LD_EXP 25
1952: PPUSH
1953: LD_INT 82
1955: PPUSH
1956: LD_INT 2
1958: PPUSH
1959: LD_INT 0
1961: PPUSH
1962: CALL_OW 48
// end ;
1966: LD_VAR 0 1
1970: RET
// every 0 0$01 trigger active_road_patrol do
1971: LD_EXP 8
1975: IFFALSE 2041
1977: GO 1979
1979: DISABLE
// ComPatrol ( russian_patrol_tanks [ 1 ] , road , 0 0$02 , [ 131 , 87 , 107 , 75 , 107 , 66 , 114 , 61 , 107 , 34 ] ) ;
1980: LD_EXP 23
1984: PUSH
1985: LD_INT 1
1987: ARRAY
1988: PPUSH
1989: LD_STRING road
1991: PPUSH
1992: LD_INT 70
1994: PPUSH
1995: LD_INT 131
1997: PUSH
1998: LD_INT 87
2000: PUSH
2001: LD_INT 107
2003: PUSH
2004: LD_INT 75
2006: PUSH
2007: LD_INT 107
2009: PUSH
2010: LD_INT 66
2012: PUSH
2013: LD_INT 114
2015: PUSH
2016: LD_INT 61
2018: PUSH
2019: LD_INT 107
2021: PUSH
2022: LD_INT 34
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: LIST
2029: LIST
2030: LIST
2031: LIST
2032: LIST
2033: LIST
2034: LIST
2035: LIST
2036: PPUSH
2037: CALL 421 0 4
2041: END
// every 0 0$01 trigger active_road_patrol do
2042: LD_EXP 8
2046: IFFALSE 2104
2048: GO 2050
2050: DISABLE
// ComPatrol ( russian_patrol_tanks [ 2 ] , road , 0 0$02 , [ 21 , 12 , 37 , 30 , 65 , 62 , 107 , 76 ] ) ;
2051: LD_EXP 23
2055: PUSH
2056: LD_INT 2
2058: ARRAY
2059: PPUSH
2060: LD_STRING road
2062: PPUSH
2063: LD_INT 70
2065: PPUSH
2066: LD_INT 21
2068: PUSH
2069: LD_INT 12
2071: PUSH
2072: LD_INT 37
2074: PUSH
2075: LD_INT 30
2077: PUSH
2078: LD_INT 65
2080: PUSH
2081: LD_INT 62
2083: PUSH
2084: LD_INT 107
2086: PUSH
2087: LD_INT 76
2089: PUSH
2090: EMPTY
2091: LIST
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: LIST
2097: LIST
2098: LIST
2099: PPUSH
2100: CALL 421 0 4
2104: END
// every 0 0$01 trigger IsOk ( russian_patrol_forest ) do
2105: LD_EXP 25
2109: PPUSH
2110: CALL_OW 302
2114: IFFALSE 2176
2116: GO 2118
2118: DISABLE
// ComPatrol ( russian_patrol_forest , forest , 0 0$01 , [ 52 , 15 , 81 , 9 , 120 , 52 , 135 , 80 , 122 , 95 ] ) ;
2119: LD_EXP 25
2123: PPUSH
2124: LD_STRING forest
2126: PPUSH
2127: LD_INT 35
2129: PPUSH
2130: LD_INT 52
2132: PUSH
2133: LD_INT 15
2135: PUSH
2136: LD_INT 81
2138: PUSH
2139: LD_INT 9
2141: PUSH
2142: LD_INT 120
2144: PUSH
2145: LD_INT 52
2147: PUSH
2148: LD_INT 135
2150: PUSH
2151: LD_INT 80
2153: PUSH
2154: LD_INT 122
2156: PUSH
2157: LD_INT 95
2159: PUSH
2160: EMPTY
2161: LIST
2162: LIST
2163: LIST
2164: LIST
2165: LIST
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: PPUSH
2172: CALL 421 0 4
2176: END
// every 0 0$01 trigger macmilan_use_radio do
2177: LD_EXP 6
2181: IFFALSE 2242
2183: GO 2185
2185: DISABLE
// begin active_road_patrol := false ;
2186: LD_ADDR_EXP 8
2190: PUSH
2191: LD_INT 0
2193: ST_TO_ADDR
// ComStop ( russian_patrol_tanks ) ;
2194: LD_EXP 23
2198: PPUSH
2199: CALL_OW 141
// AddComAgressiveMove ( russian_patrol_tanks , 72 , 41 ) ;
2203: LD_EXP 23
2207: PPUSH
2208: LD_INT 72
2210: PPUSH
2211: LD_INT 41
2213: PPUSH
2214: CALL_OW 174
// ComExitBuilding ( russian_troops_2 ) ;
2218: LD_EXP 22
2222: PPUSH
2223: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , 72 , 41 ) ;
2227: LD_EXP 22
2231: PPUSH
2232: LD_INT 72
2234: PPUSH
2235: LD_INT 41
2237: PPUSH
2238: CALL_OW 174
// end ;
2242: END
// every 0 0$03 trigger FilterUnitsInArea ( def_south , [ f_side , 1 ] ) do var un ;
2243: LD_INT 9
2245: PPUSH
2246: LD_INT 22
2248: PUSH
2249: LD_INT 1
2251: PUSH
2252: EMPTY
2253: LIST
2254: LIST
2255: PPUSH
2256: CALL_OW 70
2260: IFFALSE 2334
2262: GO 2264
2264: DISABLE
2265: LD_INT 0
2267: PPUSH
// begin enable ;
2268: ENABLE
// un := FilterUnitsInArea ( def_south , [ f_side , 1 ] ) [ 1 ] ;
2269: LD_ADDR_VAR 0 1
2273: PUSH
2274: LD_INT 9
2276: PPUSH
2277: LD_INT 22
2279: PUSH
2280: LD_INT 1
2282: PUSH
2283: EMPTY
2284: LIST
2285: LIST
2286: PPUSH
2287: CALL_OW 70
2291: PUSH
2292: LD_INT 1
2294: ARRAY
2295: ST_TO_ADDR
// ComExitBuilding ( russian_troops_2 ) ;
2296: LD_EXP 22
2300: PPUSH
2301: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , GetX ( un ) , GetY ( un ) ) ;
2305: LD_EXP 22
2309: PPUSH
2310: LD_VAR 0 1
2314: PPUSH
2315: CALL_OW 250
2319: PPUSH
2320: LD_VAR 0 1
2324: PPUSH
2325: CALL_OW 251
2329: PPUSH
2330: CALL_OW 174
// end ;
2334: PPOPN 1
2336: END
// every 0 0$01 trigger ( GetLives ( russian_patrol_tanks [ 1 ] ) < 999 or GetLives ( russian_patrol_tanks [ 2 ] ) < 999 ) and See ( 3 , JMM ) do
2337: LD_EXP 23
2341: PUSH
2342: LD_INT 1
2344: ARRAY
2345: PPUSH
2346: CALL_OW 256
2350: PUSH
2351: LD_INT 999
2353: LESS
2354: PUSH
2355: LD_EXP 23
2359: PUSH
2360: LD_INT 2
2362: ARRAY
2363: PPUSH
2364: CALL_OW 256
2368: PUSH
2369: LD_INT 999
2371: LESS
2372: OR
2373: PUSH
2374: LD_INT 3
2376: PPUSH
2377: LD_EXP 16
2381: PPUSH
2382: CALL_OW 292
2386: AND
2387: IFFALSE 2414
2389: GO 2391
2391: DISABLE
// begin active_road_patrol := false ;
2392: LD_ADDR_EXP 8
2396: PUSH
2397: LD_INT 0
2399: ST_TO_ADDR
// ComAttackUnit ( russian_patrol_tanks , JMM ) ;
2400: LD_EXP 23
2404: PPUSH
2405: LD_EXP 16
2409: PPUSH
2410: CALL_OW 115
// end ;
2414: END
// every 0 0$01 trigger macmilan_in_trap do
2415: LD_EXP 9
2419: IFFALSE 2465
2421: GO 2423
2423: DISABLE
// begin ComExitBuilding ( russian_troops_2 ) ;
2424: LD_EXP 22
2428: PPUSH
2429: CALL_OW 122
// ComAttackUnit ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , JMM ) ;
2433: LD_EXP 21
2437: PUSH
2438: LD_EXP 22
2442: ADD
2443: PUSH
2444: LD_EXP 26
2448: ADD
2449: PUSH
2450: LD_EXP 23
2454: ADD
2455: PPUSH
2456: LD_EXP 16
2460: PPUSH
2461: CALL_OW 115
// end ;
2465: END
// every 0 0$01 trigger meta_action do
2466: LD_EXP 10
2470: IFFALSE 2516
2472: GO 2474
2474: DISABLE
// begin active_road_patrol := false ;
2475: LD_ADDR_EXP 8
2479: PUSH
2480: LD_INT 0
2482: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , 93 , 1 ) ;
2483: LD_EXP 21
2487: PUSH
2488: LD_EXP 22
2492: ADD
2493: PUSH
2494: LD_EXP 26
2498: ADD
2499: PUSH
2500: LD_EXP 23
2504: ADD
2505: PPUSH
2506: LD_INT 93
2508: PPUSH
2509: LD_INT 1
2511: PPUSH
2512: CALL_OW 114
// end ;
2516: END
// every 0 0$1 trigger GetLives ( Pokryshkin ) < 1000 do
2517: LD_EXP 26
2521: PPUSH
2522: CALL_OW 256
2526: PUSH
2527: LD_INT 1000
2529: LESS
2530: IFFALSE 2581
2532: GO 2534
2534: DISABLE
// begin enable ;
2535: ENABLE
// if HexInfo ( 18 , 1 ) = Pokryshkin then
2536: LD_INT 18
2538: PPUSH
2539: LD_INT 1
2541: PPUSH
2542: CALL_OW 428
2546: PUSH
2547: LD_EXP 26
2551: EQUAL
2552: IFFALSE 2566
// begin RemoveUnit ( Pokryshkin ) ;
2554: LD_EXP 26
2558: PPUSH
2559: CALL_OW 64
// disable ;
2563: DISABLE
// end else
2564: GO 2581
// ComMoveXY ( Pokryshkin , 18 , 1 ) ;
2566: LD_EXP 26
2570: PPUSH
2571: LD_INT 18
2573: PPUSH
2574: LD_INT 1
2576: PPUSH
2577: CALL_OW 111
// end ;
2581: END
// every 0 0$20 trigger send_troops_to_forest do
2582: LD_EXP 14
2586: IFFALSE 2640
2588: GO 2590
2590: DISABLE
// begin if not IsOk ( russian_patrol_forest ) then
2591: LD_EXP 25
2595: PPUSH
2596: CALL_OW 302
2600: NOT
2601: IFFALSE 2605
// exit ;
2603: GO 2640
// ComAgressiveMove ( russian_troops_1 ^ Pokryshkin , GetRememberedX ( russian_patrol_forest ) , GetRememberedY ( russian_patrol_forest ) ) ;
2605: LD_EXP 21
2609: PUSH
2610: LD_EXP 26
2614: ADD
2615: PPUSH
2616: LD_EXP 25
2620: PPUSH
2621: CALL_OW 252
2625: PPUSH
2626: LD_EXP 25
2630: PPUSH
2631: CALL_OW 253
2635: PPUSH
2636: CALL_OW 114
// end ;
2640: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) = 3 then
2641: LD_VAR 0 1
2645: PPUSH
2646: CALL_OW 255
2650: PUSH
2651: LD_INT 3
2653: EQUAL
2654: IFFALSE 2697
// begin wait ( 11 ) ;
2656: LD_INT 11
2658: PPUSH
2659: CALL_OW 67
// ComEnterUnit ( driver , NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_depot ] ) , driver ) ) ;
2663: LD_VAR 0 1
2667: PPUSH
2668: LD_INT 30
2670: PUSH
2671: LD_INT 0
2673: PUSH
2674: EMPTY
2675: LIST
2676: LIST
2677: PPUSH
2678: CALL_OW 69
2682: PPUSH
2683: LD_VAR 0 1
2687: PPUSH
2688: CALL_OW 74
2692: PPUSH
2693: CALL_OW 120
// end ; end ; end_of_file
2697: PPOPN 4
2699: END
// export function Action ; var i ; begin
2700: LD_INT 0
2702: PPUSH
2703: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
2704: LD_ADDR_VAR 0 2
2708: PUSH
2709: LD_INT 22
2711: PUSH
2712: LD_INT 3
2714: PUSH
2715: EMPTY
2716: LIST
2717: LIST
2718: PUSH
2719: LD_INT 25
2721: PUSH
2722: LD_INT 1
2724: PUSH
2725: EMPTY
2726: LIST
2727: LIST
2728: PUSH
2729: EMPTY
2730: LIST
2731: LIST
2732: PPUSH
2733: CALL_OW 69
2737: PUSH
2738: FOR_IN
2739: IFFALSE 2752
// ComHold ( i ) ;
2741: LD_VAR 0 2
2745: PPUSH
2746: CALL_OW 140
2750: GO 2738
2752: POP
2753: POP
// InGameOn ;
2754: CALL_OW 8
// CenterOnXY ( 79 , 76 ) ;
2758: LD_INT 79
2760: PPUSH
2761: LD_INT 76
2763: PPUSH
2764: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
2768: LD_INT 10
2770: PPUSH
2771: CALL_OW 67
// PlaceUnitXY ( JMM , 80 , 79 , true ) ;
2775: LD_EXP 16
2779: PPUSH
2780: LD_INT 80
2782: PPUSH
2783: LD_INT 79
2785: PPUSH
2786: LD_INT 1
2788: PPUSH
2789: CALL_OW 48
// Wait ( 0 0$03 ) ;
2793: LD_INT 105
2795: PPUSH
2796: CALL_OW 67
// ComMoveXY ( JMM , 80 , 76 ) ;
2800: LD_EXP 16
2804: PPUSH
2805: LD_INT 80
2807: PPUSH
2808: LD_INT 76
2810: PPUSH
2811: CALL_OW 111
// Say ( JMM , D1-JMM-1 ) ;
2815: LD_EXP 16
2819: PPUSH
2820: LD_STRING D1-JMM-1
2822: PPUSH
2823: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2827: LD_INT 10
2829: PPUSH
2830: CALL_OW 67
// ComMoveXY ( JMM , 76 , 76 ) ;
2834: LD_EXP 16
2838: PPUSH
2839: LD_INT 76
2841: PPUSH
2842: LD_INT 76
2844: PPUSH
2845: CALL_OW 111
// Say ( JMM , D1-JMM-1a ) ;
2849: LD_EXP 16
2853: PPUSH
2854: LD_STRING D1-JMM-1a
2856: PPUSH
2857: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2861: LD_INT 10
2863: PPUSH
2864: CALL_OW 67
// ComTurnXY ( JMM , 83 , 66 ) ;
2868: LD_EXP 16
2872: PPUSH
2873: LD_INT 83
2875: PPUSH
2876: LD_INT 66
2878: PPUSH
2879: CALL_OW 118
// Say ( JMM , D1-JMM-1b ) ;
2883: LD_EXP 16
2887: PPUSH
2888: LD_STRING D1-JMM-1b
2890: PPUSH
2891: CALL_OW 88
// Wait ( 0 0$0.5 ) ;
2895: LD_INT 18
2897: PPUSH
2898: CALL_OW 67
// Say ( JMM , D1-JMM-1c ) ;
2902: LD_EXP 16
2906: PPUSH
2907: LD_STRING D1-JMM-1c
2909: PPUSH
2910: CALL_OW 88
// Wait ( 0 0$0.2 ) ;
2914: LD_INT 7
2916: PPUSH
2917: CALL_OW 67
// SayRadioNoFace ( Powell , D1-Pow-1 ) ;
2921: LD_EXP 19
2925: PPUSH
2926: LD_STRING D1-Pow-1
2928: PPUSH
2929: CALL_OW 586
// Say ( JMM , D1-JMM-2 ) ;
2933: LD_EXP 16
2937: PPUSH
2938: LD_STRING D1-JMM-2
2940: PPUSH
2941: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-2 ) ;
2945: LD_EXP 19
2949: PPUSH
2950: LD_STRING D1-Pow-2
2952: PPUSH
2953: CALL_OW 586
// Say ( JMM , D1-JMM-3 ) ;
2957: LD_EXP 16
2961: PPUSH
2962: LD_STRING D1-JMM-3
2964: PPUSH
2965: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-3 ) ;
2969: LD_EXP 19
2973: PPUSH
2974: LD_STRING D1-Pow-3
2976: PPUSH
2977: CALL_OW 586
// Say ( JMM , D1-JMM-4 ) ;
2981: LD_EXP 16
2985: PPUSH
2986: LD_STRING D1-JMM-4
2988: PPUSH
2989: CALL_OW 88
// ComFree ( JMM ) ;
2993: LD_EXP 16
2997: PPUSH
2998: CALL_OW 139
// Wait ( 0 0$0.3 ) ;
3002: LD_INT 10
3004: PPUSH
3005: CALL_OW 67
// InGameOff ;
3009: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
3013: LD_STRING M1
3015: PPUSH
3016: CALL_OW 337
// SaveForQuickRestart ;
3020: CALL_OW 22
// active_russian_dialog := true ;
3024: LD_ADDR_EXP 3
3028: PUSH
3029: LD_INT 1
3031: ST_TO_ADDR
// active_road_patrol := true ;
3032: LD_ADDR_EXP 8
3036: PUSH
3037: LD_INT 1
3039: ST_TO_ADDR
// if Difficulty < 3 then
3040: LD_OWVAR 67
3044: PUSH
3045: LD_INT 3
3047: LESS
3048: IFFALSE 3079
// begin PlaceUnitXY ( Bobby , 41 , 71 , false ) ;
3050: LD_EXP 17
3054: PPUSH
3055: LD_INT 41
3057: PPUSH
3058: LD_INT 71
3060: PPUSH
3061: LD_INT 0
3063: PPUSH
3064: CALL_OW 48
// ComHold ( Bobby ) ;
3068: LD_EXP 17
3072: PPUSH
3073: CALL_OW 140
// end else
3077: GO 3127
// begin SetDir ( Bobby , 5 ) ;
3079: LD_EXP 17
3083: PPUSH
3084: LD_INT 5
3086: PPUSH
3087: CALL_OW 233
// PlaceUnitXY ( Bobby , 105 , 98 , false ) ;
3091: LD_EXP 17
3095: PPUSH
3096: LD_INT 105
3098: PPUSH
3099: LD_INT 98
3101: PPUSH
3102: LD_INT 0
3104: PPUSH
3105: CALL_OW 48
// ComCrawl ( Bobby ) ;
3109: LD_EXP 17
3113: PPUSH
3114: CALL_OW 137
// AddComHold ( Bobby ) ;
3118: LD_EXP 17
3122: PPUSH
3123: CALL_OW 200
// end ; PlaceUnitXY ( Cyrus , 90 , 42 , false ) ;
3127: LD_EXP 18
3131: PPUSH
3132: LD_INT 90
3134: PPUSH
3135: LD_INT 42
3137: PPUSH
3138: LD_INT 0
3140: PPUSH
3141: CALL_OW 48
// ComMoveXY ( Cyrus , 79 , 34 ) ;
3145: LD_EXP 18
3149: PPUSH
3150: LD_INT 79
3152: PPUSH
3153: LD_INT 34
3155: PPUSH
3156: CALL_OW 111
// AddComCrawl ( Cyrus ) ;
3160: LD_EXP 18
3164: PPUSH
3165: CALL_OW 197
// end ;
3169: LD_VAR 0 1
3173: RET
// every 0 0$01 trigger active_russian_dialog do var wait_points ;
3174: LD_EXP 3
3178: IFFALSE 3772
3180: GO 3182
3182: DISABLE
3183: LD_INT 0
3185: PPUSH
// begin wait_points := 0 ;
3186: LD_ADDR_VAR 0 1
3190: PUSH
3191: LD_INT 0
3193: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
3194: LD_INT 70
3196: PPUSH
3197: CALL_OW 67
// ComAgressiveMove ( russian_troops_1 , 79 , 83 ) ;
3201: LD_EXP 21
3205: PPUSH
3206: LD_INT 79
3208: PPUSH
3209: LD_INT 83
3211: PPUSH
3212: CALL_OW 114
// Say ( russian_troops_1 [ 2 ] , D1R-Rus1-1 ) ;
3216: LD_EXP 21
3220: PUSH
3221: LD_INT 2
3223: ARRAY
3224: PPUSH
3225: LD_STRING D1R-Rus1-1
3227: PPUSH
3228: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1R-Rus2-1 ) ;
3232: LD_EXP 21
3236: PUSH
3237: LD_INT 1
3239: ARRAY
3240: PPUSH
3241: LD_STRING D1R-Rus2-1
3243: PPUSH
3244: CALL_OW 88
// ComAgressiveMove ( russian_troops_2 , 91 , 80 ) ;
3248: LD_EXP 22
3252: PPUSH
3253: LD_INT 91
3255: PPUSH
3256: LD_INT 80
3258: PPUSH
3259: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
3263: LD_INT 35
3265: PPUSH
3266: CALL_OW 67
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 79 , 82 ) < 6 ;
3270: LD_EXP 21
3274: PUSH
3275: LD_INT 1
3277: ARRAY
3278: PPUSH
3279: LD_INT 79
3281: PPUSH
3282: LD_INT 82
3284: PPUSH
3285: CALL_OW 297
3289: PUSH
3290: LD_INT 6
3292: LESS
3293: IFFALSE 3263
// if not IsInArea ( JMM , jmm_spot ) then
3295: LD_EXP 16
3299: PPUSH
3300: LD_INT 5
3302: PPUSH
3303: CALL_OW 308
3307: NOT
3308: IFFALSE 3328
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1 ) else
3310: LD_EXP 21
3314: PUSH
3315: LD_INT 1
3317: ARRAY
3318: PPUSH
3319: LD_STRING D1Ra-Rus2-1
3321: PPUSH
3322: CALL_OW 88
3326: GO 3395
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3328: LD_EXP 21
3332: PUSH
3333: LD_INT 2
3335: ARRAY
3336: PPUSH
3337: LD_STRING D1Rb-Rus1-1
3339: PPUSH
3340: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Rb-Rus2-1 ) ;
3344: LD_EXP 21
3348: PUSH
3349: LD_INT 1
3351: ARRAY
3352: PPUSH
3353: LD_STRING D1Rb-Rus2-1
3355: PPUSH
3356: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 , GetX ( JMM ) , GetY ( JMM ) ) ;
3360: LD_EXP 21
3364: PUSH
3365: LD_EXP 22
3369: ADD
3370: PPUSH
3371: LD_EXP 16
3375: PPUSH
3376: CALL_OW 250
3380: PPUSH
3381: LD_EXP 16
3385: PPUSH
3386: CALL_OW 251
3390: PPUSH
3391: CALL_OW 114
// end ; wait_points := 10 ;
3395: LD_ADDR_VAR 0 1
3399: PUSH
3400: LD_INT 10
3402: ST_TO_ADDR
// if Difficulty > 1 then
3403: LD_OWVAR 67
3407: PUSH
3408: LD_INT 1
3410: GREATER
3411: IFFALSE 3493
// begin ComAgressiveMove ( russian_troops_1 , 78 , 95 ) ;
3413: LD_EXP 21
3417: PPUSH
3418: LD_INT 78
3420: PPUSH
3421: LD_INT 95
3423: PPUSH
3424: CALL_OW 114
// AddComWait ( russian_troops_1 , 0 0$05 ) ;
3428: LD_EXP 21
3432: PPUSH
3433: LD_INT 175
3435: PPUSH
3436: CALL_OW 202
// wait_points := wait_points + 15 ;
3440: LD_ADDR_VAR 0 1
3444: PUSH
3445: LD_VAR 0 1
3449: PUSH
3450: LD_INT 15
3452: PLUS
3453: ST_TO_ADDR
// if Difficulty > 2 then
3454: LD_OWVAR 67
3458: PUSH
3459: LD_INT 2
3461: GREATER
3462: IFFALSE 3493
// begin AddComAgressiveMove ( russian_troops_1 , 65 , 79 ) ;
3464: LD_EXP 21
3468: PPUSH
3469: LD_INT 65
3471: PPUSH
3472: LD_INT 79
3474: PPUSH
3475: CALL_OW 174
// wait_points := wait_points + 5 ;
3479: LD_ADDR_VAR 0 1
3483: PUSH
3484: LD_VAR 0 1
3488: PUSH
3489: LD_INT 5
3491: PLUS
3492: ST_TO_ADDR
// end ; end ; repeat wait ( 0 0$01 ) ;
3493: LD_INT 35
3495: PPUSH
3496: CALL_OW 67
// wait_points := wait_points - 1 ;
3500: LD_ADDR_VAR 0 1
3504: PUSH
3505: LD_VAR 0 1
3509: PUSH
3510: LD_INT 1
3512: MINUS
3513: ST_TO_ADDR
// if See ( 3 , JMM ) then
3514: LD_INT 3
3516: PPUSH
3517: LD_EXP 16
3521: PPUSH
3522: CALL_OW 292
3526: IFFALSE 3580
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3528: LD_EXP 21
3532: PUSH
3533: LD_INT 2
3535: ARRAY
3536: PPUSH
3537: LD_STRING D1Rb-Rus1-1
3539: PPUSH
3540: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3544: LD_EXP 21
3548: PPUSH
3549: LD_EXP 16
3553: PPUSH
3554: CALL_OW 250
3558: PPUSH
3559: LD_EXP 16
3563: PPUSH
3564: CALL_OW 251
3568: PPUSH
3569: CALL_OW 114
// Wait ( 0 0$03 ) ;
3573: LD_INT 105
3575: PPUSH
3576: CALL_OW 67
// end ; until wait_points = 0 ;
3580: LD_VAR 0 1
3584: PUSH
3585: LD_INT 0
3587: EQUAL
3588: IFFALSE 3493
// Say ( russian_troops_1 [ 2 ] , D1Rc-Rus1-1 ) ;
3590: LD_EXP 21
3594: PUSH
3595: LD_INT 2
3597: ARRAY
3598: PPUSH
3599: LD_STRING D1Rc-Rus1-1
3601: PPUSH
3602: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1a ) ;
3606: LD_EXP 21
3610: PUSH
3611: LD_INT 1
3613: ARRAY
3614: PPUSH
3615: LD_STRING D1Ra-Rus2-1a
3617: PPUSH
3618: CALL_OW 88
// active_powell_dialog := true ;
3622: LD_ADDR_EXP 15
3626: PUSH
3627: LD_INT 1
3629: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3630: LD_EXP 21
3634: PPUSH
3635: LD_INT 45
3637: PPUSH
3638: LD_INT 5
3640: PPUSH
3641: CALL_OW 114
// ComEnterUnit ( russian_troops_2 , rbar1 ) ;
3645: LD_EXP 22
3649: PPUSH
3650: LD_INT 26
3652: PPUSH
3653: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
3657: LD_INT 35
3659: PPUSH
3660: CALL_OW 67
// if See ( 3 , JMM ) then
3664: LD_INT 3
3666: PPUSH
3667: LD_EXP 16
3671: PPUSH
3672: CALL_OW 292
3676: IFFALSE 3732
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3678: LD_EXP 21
3682: PUSH
3683: LD_INT 2
3685: ARRAY
3686: PPUSH
3687: LD_STRING D1Rb-Rus1-1
3689: PPUSH
3690: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3694: LD_EXP 21
3698: PPUSH
3699: LD_EXP 16
3703: PPUSH
3704: CALL_OW 250
3708: PPUSH
3709: LD_EXP 16
3713: PPUSH
3714: CALL_OW 251
3718: PPUSH
3719: CALL_OW 114
// Wait ( 0 0$50 ) ;
3723: LD_INT 1750
3725: PPUSH
3726: CALL_OW 67
// end else
3730: GO 3747
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3732: LD_EXP 21
3736: PPUSH
3737: LD_INT 45
3739: PPUSH
3740: LD_INT 5
3742: PPUSH
3743: CALL_OW 114
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 45 , 5 ) < 10 ;
3747: LD_EXP 21
3751: PUSH
3752: LD_INT 1
3754: ARRAY
3755: PPUSH
3756: LD_INT 45
3758: PPUSH
3759: LD_INT 5
3761: PPUSH
3762: CALL_OW 297
3766: PUSH
3767: LD_INT 10
3769: LESS
3770: IFFALSE 3657
// end ;
3772: PPOPN 1
3774: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 6 ] ] ) and Difficulty = 1 do
3775: LD_INT 22
3777: PUSH
3778: LD_INT 3
3780: PUSH
3781: EMPTY
3782: LIST
3783: LIST
3784: PUSH
3785: LD_INT 92
3787: PUSH
3788: LD_INT 80
3790: PUSH
3791: LD_INT 83
3793: PUSH
3794: LD_INT 6
3796: PUSH
3797: EMPTY
3798: LIST
3799: LIST
3800: LIST
3801: LIST
3802: PUSH
3803: EMPTY
3804: LIST
3805: LIST
3806: PPUSH
3807: CALL_OW 69
3811: PUSH
3812: LD_OWVAR 67
3816: PUSH
3817: LD_INT 1
3819: EQUAL
3820: AND
3821: IFFALSE 3902
3823: GO 3825
3825: DISABLE
// begin PlaceSeeing ( 80 , 83 , 1 , - 7 ) ;
3826: LD_INT 80
3828: PPUSH
3829: LD_INT 83
3831: PPUSH
3832: LD_INT 1
3834: PPUSH
3835: LD_INT 7
3837: NEG
3838: PPUSH
3839: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
3843: LD_INT 35
3845: PPUSH
3846: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 10 ] ] ) ;
3850: LD_INT 22
3852: PUSH
3853: LD_INT 3
3855: PUSH
3856: EMPTY
3857: LIST
3858: LIST
3859: PUSH
3860: LD_INT 92
3862: PUSH
3863: LD_INT 80
3865: PUSH
3866: LD_INT 83
3868: PUSH
3869: LD_INT 10
3871: PUSH
3872: EMPTY
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: PUSH
3878: EMPTY
3879: LIST
3880: LIST
3881: PPUSH
3882: CALL_OW 69
3886: NOT
3887: IFFALSE 3843
// RemoveSeeing ( 80 , 83 , 1 ) ;
3889: LD_INT 80
3891: PPUSH
3892: LD_INT 83
3894: PPUSH
3895: LD_INT 1
3897: PPUSH
3898: CALL_OW 331
// end ;
3902: END
// every 0 0$02 trigger GetDistUnits ( JMM , Bobby ) < 6 and IsOk ( Bobby ) do
3903: LD_EXP 16
3907: PPUSH
3908: LD_EXP 17
3912: PPUSH
3913: CALL_OW 296
3917: PUSH
3918: LD_INT 6
3920: LESS
3921: PUSH
3922: LD_EXP 17
3926: PPUSH
3927: CALL_OW 302
3931: AND
3932: IFFALSE 4391
3934: GO 3936
3936: DISABLE
// begin ComWalk ( Bobby ) ;
3937: LD_EXP 17
3941: PPUSH
3942: CALL_OW 138
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
3946: LD_EXP 17
3950: PPUSH
3951: LD_EXP 16
3955: PPUSH
3956: CALL_OW 250
3960: PPUSH
3961: LD_EXP 16
3965: PPUSH
3966: CALL_OW 251
3970: PPUSH
3971: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
3975: LD_INT 35
3977: PPUSH
3978: CALL_OW 67
// until See ( 4 , JMM ) ;
3982: LD_INT 4
3984: PPUSH
3985: LD_EXP 16
3989: PPUSH
3990: CALL_OW 292
3994: IFFALSE 3975
// InGameOn ;
3996: CALL_OW 8
// ComTurnUnit ( JMM , Bobby ) ;
4000: LD_EXP 16
4004: PPUSH
4005: LD_EXP 17
4009: PPUSH
4010: CALL_OW 119
// if cyrus_in_squad and IsOk ( Cyrus ) and GetDistUnits ( JMM , Cyrus ) < 10 then
4014: LD_EXP 7
4018: PUSH
4019: LD_EXP 18
4023: PPUSH
4024: CALL_OW 302
4028: AND
4029: PUSH
4030: LD_EXP 16
4034: PPUSH
4035: LD_EXP 18
4039: PPUSH
4040: CALL_OW 296
4044: PUSH
4045: LD_INT 10
4047: LESS
4048: AND
4049: IFFALSE 4094
// begin ComMoveXY ( Cyrus , GetX ( JMM ) , GetY ( JMM ) ) ;
4051: LD_EXP 18
4055: PPUSH
4056: LD_EXP 16
4060: PPUSH
4061: CALL_OW 250
4065: PPUSH
4066: LD_EXP 16
4070: PPUSH
4071: CALL_OW 251
4075: PPUSH
4076: CALL_OW 111
// AddComTurnUnit ( Cyrus , Bobby ) ;
4080: LD_EXP 18
4084: PPUSH
4085: LD_EXP 17
4089: PPUSH
4090: CALL_OW 179
// end ; Say ( JMM , D2-JMM-1 ) ;
4094: LD_EXP 16
4098: PPUSH
4099: LD_STRING D2-JMM-1
4101: PPUSH
4102: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
4106: LD_INT 10
4108: PPUSH
4109: CALL_OW 67
// ComTurnUnit ( Bobby , JMM ) ;
4113: LD_EXP 17
4117: PPUSH
4118: LD_EXP 16
4122: PPUSH
4123: CALL_OW 119
// Say ( Bobby , D2-Bobby-1 ) ;
4127: LD_EXP 17
4131: PPUSH
4132: LD_STRING D2-Bobby-1
4134: PPUSH
4135: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
4139: LD_EXP 16
4143: PPUSH
4144: LD_STRING D2-JMM-2
4146: PPUSH
4147: CALL_OW 88
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4151: LD_EXP 17
4155: PPUSH
4156: LD_EXP 16
4160: PPUSH
4161: CALL_OW 250
4165: PPUSH
4166: LD_EXP 16
4170: PPUSH
4171: CALL_OW 251
4175: PPUSH
4176: CALL_OW 111
// Say ( Bobby , D2-Bobby-2 ) ;
4180: LD_EXP 17
4184: PPUSH
4185: LD_STRING D2-Bobby-2
4187: PPUSH
4188: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
4192: LD_EXP 16
4196: PPUSH
4197: LD_STRING D2-JMM-3
4199: PPUSH
4200: CALL_OW 88
// ComTurnUnit ( Bobby , JMM ) ;
4204: LD_EXP 17
4208: PPUSH
4209: LD_EXP 16
4213: PPUSH
4214: CALL_OW 119
// DialogueOn ;
4218: CALL_OW 6
// Say ( Bobby , D2-Bobby-3 ) ;
4222: LD_EXP 17
4226: PPUSH
4227: LD_STRING D2-Bobby-3
4229: PPUSH
4230: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
4234: LD_EXP 16
4238: PPUSH
4239: LD_STRING D2-JMM-4
4241: PPUSH
4242: CALL_OW 88
// Say ( Bobby , D2-Bobby-4 ) ;
4246: LD_EXP 17
4250: PPUSH
4251: LD_STRING D2-Bobby-4
4253: PPUSH
4254: CALL_OW 88
// Say ( JMM , D2-JMM-5 ) ;
4258: LD_EXP 16
4262: PPUSH
4263: LD_STRING D2-JMM-5
4265: PPUSH
4266: CALL_OW 88
// Say ( Bobby , D2-Bobby-5 ) ;
4270: LD_EXP 17
4274: PPUSH
4275: LD_STRING D2-Bobby-5
4277: PPUSH
4278: CALL_OW 88
// Say ( JMM , D2-JMM-6 ) ;
4282: LD_EXP 16
4286: PPUSH
4287: LD_STRING D2-JMM-6
4289: PPUSH
4290: CALL_OW 88
// if not powell_contact then
4294: LD_EXP 5
4298: NOT
4299: IFFALSE 4325
// begin Say ( Bobby , D2-Bobby-6 ) ;
4301: LD_EXP 17
4305: PPUSH
4306: LD_STRING D2-Bobby-6
4308: PPUSH
4309: CALL_OW 88
// Say ( JMM , D2-JMM-7 ) ;
4313: LD_EXP 16
4317: PPUSH
4318: LD_STRING D2-JMM-7
4320: PPUSH
4321: CALL_OW 88
// end ; DialogueOff ;
4325: CALL_OW 7
// InGameOff ;
4329: CALL_OW 9
// SetSide ( Bobby , 1 ) ;
4333: LD_EXP 17
4337: PPUSH
4338: LD_INT 1
4340: PPUSH
4341: CALL_OW 235
// ComFree ( [ JMM , Bobby ] ) ;
4345: LD_EXP 16
4349: PUSH
4350: LD_EXP 17
4354: PUSH
4355: EMPTY
4356: LIST
4357: LIST
4358: PPUSH
4359: CALL_OW 139
// bobby_in_squad := true ;
4363: LD_ADDR_EXP 4
4367: PUSH
4368: LD_INT 1
4370: ST_TO_ADDR
// if powell_contact and not cyrus_in_squad then
4371: LD_EXP 5
4375: PUSH
4376: LD_EXP 7
4380: NOT
4381: AND
4382: IFFALSE 4391
// ChangeMissionObjectives ( M2b ) ;
4384: LD_STRING M2b
4386: PPUSH
4387: CALL_OW 337
// end ;
4391: END
// every 0 0$10 trigger active_russian_dialog and Difficulty < 3 do
4392: LD_EXP 3
4396: PUSH
4397: LD_OWVAR 67
4401: PUSH
4402: LD_INT 3
4404: LESS
4405: AND
4406: IFFALSE 4440
4408: GO 4410
4410: DISABLE
// begin wait ( 1 1$00 ) ;
4411: LD_INT 2100
4413: PPUSH
4414: CALL_OW 67
// if not bobby_in_squad then
4418: LD_EXP 4
4422: NOT
4423: IFFALSE 4440
// ComMoveXY ( Bobby , 75 , 83 ) ;
4425: LD_EXP 17
4429: PPUSH
4430: LD_INT 75
4432: PPUSH
4433: LD_INT 83
4435: PPUSH
4436: CALL_OW 111
// end ;
4440: END
// every 0 0$10 trigger cyrus_in_squad and not bobby_in_squad do
4441: LD_EXP 7
4445: PUSH
4446: LD_EXP 4
4450: NOT
4451: AND
4452: IFFALSE 4481
4454: GO 4456
4456: DISABLE
// begin ComMoveXY ( Bobby , 105 , 97 ) ;
4457: LD_EXP 17
4461: PPUSH
4462: LD_INT 105
4464: PPUSH
4465: LD_INT 97
4467: PPUSH
4468: CALL_OW 111
// AddComCrawl ( Bobby ) ;
4472: LD_EXP 17
4476: PPUSH
4477: CALL_OW 197
// end ;
4481: END
// every 0 0$01 trigger IsInArea ( JMM , obstacle_area ) and GetDistUnits ( JMM , Bobby ) < 7 and bobby_in_squad do
4482: LD_EXP 16
4486: PPUSH
4487: LD_INT 6
4489: PPUSH
4490: CALL_OW 308
4494: PUSH
4495: LD_EXP 16
4499: PPUSH
4500: LD_EXP 17
4504: PPUSH
4505: CALL_OW 296
4509: PUSH
4510: LD_INT 7
4512: LESS
4513: AND
4514: PUSH
4515: LD_EXP 4
4519: AND
4520: IFFALSE 4567
4522: GO 4524
4524: DISABLE
// begin ComHold ( [ JMM , Bobby ] ) ;
4525: LD_EXP 16
4529: PUSH
4530: LD_EXP 17
4534: PUSH
4535: EMPTY
4536: LIST
4537: LIST
4538: PPUSH
4539: CALL_OW 140
// Say ( JMM , D2a-JMM-1 ) ;
4543: LD_EXP 16
4547: PPUSH
4548: LD_STRING D2a-JMM-1
4550: PPUSH
4551: CALL_OW 88
// Say ( Bobby , D2a-Bobby-1 ) ;
4555: LD_EXP 17
4559: PPUSH
4560: LD_STRING D2a-Bobby-1
4562: PPUSH
4563: CALL_OW 88
// end ;
4567: END
// every 0 0$50 trigger active_powell_dialog and not See ( 3 , JMM ) do
4568: LD_EXP 15
4572: PUSH
4573: LD_INT 3
4575: PPUSH
4576: LD_EXP 16
4580: PPUSH
4581: CALL_OW 292
4585: NOT
4586: AND
4587: IFFALSE 4758
4589: GO 4591
4591: DISABLE
// begin wait ( 0 0$5 ) ;
4592: LD_INT 175
4594: PPUSH
4595: CALL_OW 67
// InGameOn ;
4599: CALL_OW 8
// DialogueOn ;
4603: CALL_OW 6
// SayRadioNoFace ( Powell , D3-Pow-1 ) ;
4607: LD_EXP 19
4611: PPUSH
4612: LD_STRING D3-Pow-1
4614: PPUSH
4615: CALL_OW 586
// Say ( JMM , D3-JMM-1 ) ;
4619: LD_EXP 16
4623: PPUSH
4624: LD_STRING D3-JMM-1
4626: PPUSH
4627: CALL_OW 88
// SayRadioNoFace ( Powell , D3-Pow-2 ) ;
4631: LD_EXP 19
4635: PPUSH
4636: LD_STRING D3-Pow-2
4638: PPUSH
4639: CALL_OW 586
// Say ( JMM , D3-JMM-2 ) ;
4643: LD_EXP 16
4647: PPUSH
4648: LD_STRING D3-JMM-2
4650: PPUSH
4651: CALL_OW 88
// SayRadioNoFace ( Powell , D3-Pow-3 ) ;
4655: LD_EXP 19
4659: PPUSH
4660: LD_STRING D3-Pow-3
4662: PPUSH
4663: CALL_OW 586
// DialogueOff ;
4667: CALL_OW 7
// InGameOff ;
4671: CALL_OW 9
// powell_contact := true ;
4675: LD_ADDR_EXP 5
4679: PUSH
4680: LD_INT 1
4682: ST_TO_ADDR
// SetAreaMapShow ( exitArea , 1 ) ;
4683: LD_INT 10
4685: PPUSH
4686: LD_INT 1
4688: PPUSH
4689: CALL_OW 424
// uc_side := 4 ;
4693: LD_ADDR_OWVAR 20
4697: PUSH
4698: LD_INT 4
4700: ST_TO_ADDR
// uc_nation := 1 ;
4701: LD_ADDR_OWVAR 21
4705: PUSH
4706: LD_INT 1
4708: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
4709: LD_ADDR_EXP 19
4713: PUSH
4714: LD_STRING Powell
4716: PPUSH
4717: LD_INT 0
4719: PPUSH
4720: LD_STRING 
4722: PPUSH
4723: CALL 25594 0 3
4727: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
4728: LD_STRING M2
4730: PPUSH
4731: CALL_OW 337
// if not bobby_in_squad then
4735: LD_EXP 4
4739: NOT
4740: IFFALSE 4751
// ChangeMissionObjectives ( M2a ) else
4742: LD_STRING M2a
4744: PPUSH
4745: CALL_OW 337
4749: GO 4758
// ChangeMissionObjectives ( M2b ) ;
4751: LD_STRING M2b
4753: PPUSH
4754: CALL_OW 337
// end ;
4758: END
// every 0 0$01 trigger IsInArea ( JMM , fakeArea ) do
4759: LD_EXP 16
4763: PPUSH
4764: LD_INT 7
4766: PPUSH
4767: CALL_OW 308
4771: IFFALSE 4906
4773: GO 4775
4775: DISABLE
// begin DialogueOn ;
4776: CALL_OW 6
// SayRadioNoFace ( fakePokryshkin , D4-Rus3-1 ) ;
4780: LD_EXP 20
4784: PPUSH
4785: LD_STRING D4-Rus3-1
4787: PPUSH
4788: CALL_OW 586
// DialogueOff ;
4792: CALL_OW 7
// ChangeMissionObjectives ( M3a ) ;
4796: LD_STRING M3a
4798: PPUSH
4799: CALL_OW 337
// SetAreaMapShow ( fakeEnd , 1 ) ;
4803: LD_INT 11
4805: PPUSH
4806: LD_INT 1
4808: PPUSH
4809: CALL_OW 424
// Wait ( 0 0$02 ) ;
4813: LD_INT 70
4815: PPUSH
4816: CALL_OW 67
// DialogueOn ;
4820: CALL_OW 6
// SayRadioNoFace ( Powell , D4-Pow-1 ) ;
4824: LD_EXP 19
4828: PPUSH
4829: LD_STRING D4-Pow-1
4831: PPUSH
4832: CALL_OW 586
// DialogueOff ;
4836: CALL_OW 7
// ChangeMissionObjectives ( M3b ) ;
4840: LD_STRING M3b
4842: PPUSH
4843: CALL_OW 337
// case Query ( Q1 ) of 1 :
4847: LD_STRING Q1
4849: PPUSH
4850: CALL_OW 97
4854: PUSH
4855: LD_INT 1
4857: DOUBLE
4858: EQUAL
4859: IFTRUE 4863
4861: GO 4894
4863: POP
// begin macmilan_use_radio := true ;
4864: LD_ADDR_EXP 6
4868: PUSH
4869: LD_INT 1
4871: ST_TO_ADDR
// DialogueOn ;
4872: CALL_OW 6
// Say ( JMM , D4a-JMM-1 ) ;
4876: LD_EXP 16
4880: PPUSH
4881: LD_STRING D4a-JMM-1
4883: PPUSH
4884: CALL_OW 88
// DialogueOff ;
4888: CALL_OW 7
// end ; 2 :
4892: GO 4906
4894: LD_INT 2
4896: DOUBLE
4897: EQUAL
4898: IFTRUE 4902
4900: GO 4905
4902: POP
// ; end ;
4903: GO 4906
4905: POP
// end ;
4906: END
// every 0 0$02 trigger GetDistUnits ( JMM , Cyrus ) < 8 and IsOk ( Cyrus ) do
4907: LD_EXP 16
4911: PPUSH
4912: LD_EXP 18
4916: PPUSH
4917: CALL_OW 296
4921: PUSH
4922: LD_INT 8
4924: LESS
4925: PUSH
4926: LD_EXP 18
4930: PPUSH
4931: CALL_OW 302
4935: AND
4936: IFFALSE 5227
4938: GO 4940
4940: DISABLE
// begin InGameOn ;
4941: CALL_OW 8
// ComMoveXY ( JMM , GetX ( Cyrus ) , GetY ( Cyrus ) ) ;
4945: LD_EXP 16
4949: PPUSH
4950: LD_EXP 18
4954: PPUSH
4955: CALL_OW 250
4959: PPUSH
4960: LD_EXP 18
4964: PPUSH
4965: CALL_OW 251
4969: PPUSH
4970: CALL_OW 111
// if IsOk ( Bobby ) and bobby_in_squad then
4974: LD_EXP 17
4978: PPUSH
4979: CALL_OW 302
4983: PUSH
4984: LD_EXP 4
4988: AND
4989: IFFALSE 5020
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4991: LD_EXP 17
4995: PPUSH
4996: LD_EXP 16
5000: PPUSH
5001: CALL_OW 250
5005: PPUSH
5006: LD_EXP 16
5010: PPUSH
5011: CALL_OW 251
5015: PPUSH
5016: CALL_OW 111
// Say ( JMM , D5-JMM-1 ) ;
5020: LD_EXP 16
5024: PPUSH
5025: LD_STRING D5-JMM-1
5027: PPUSH
5028: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
5032: LD_INT 10
5034: PPUSH
5035: CALL_OW 67
// ComTurnUnit ( JMM , Cyrus ) ;
5039: LD_EXP 16
5043: PPUSH
5044: LD_EXP 18
5048: PPUSH
5049: CALL_OW 119
// ComWalk ( Cyrus ) ;
5053: LD_EXP 18
5057: PPUSH
5058: CALL_OW 138
// ComTurnUnit ( Cyrus , JMM ) ;
5062: LD_EXP 18
5066: PPUSH
5067: LD_EXP 16
5071: PPUSH
5072: CALL_OW 119
// Say ( Cyrus , D5-Cyrus-1 ) ;
5076: LD_EXP 18
5080: PPUSH
5081: LD_STRING D5-Cyrus-1
5083: PPUSH
5084: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5088: LD_EXP 17
5092: PPUSH
5093: CALL_OW 302
5097: PUSH
5098: LD_EXP 4
5102: AND
5103: IFFALSE 5143
// begin ComTurnUnit ( Bobby , Cyrus ) ;
5105: LD_EXP 17
5109: PPUSH
5110: LD_EXP 18
5114: PPUSH
5115: CALL_OW 119
// Say ( Bobby , D5-Bobby-1 ) ;
5119: LD_EXP 17
5123: PPUSH
5124: LD_STRING D5-Bobby-1
5126: PPUSH
5127: CALL_OW 88
// Say ( JMM , D5-JMM-2 ) ;
5131: LD_EXP 16
5135: PPUSH
5136: LD_STRING D5-JMM-2
5138: PPUSH
5139: CALL_OW 88
// end ; InGameOff ;
5143: CALL_OW 9
// cyrus_in_squad := true ;
5147: LD_ADDR_EXP 7
5151: PUSH
5152: LD_INT 1
5154: ST_TO_ADDR
// SetSide ( Cyrus , 1 ) ;
5155: LD_EXP 18
5159: PPUSH
5160: LD_INT 1
5162: PPUSH
5163: CALL_OW 235
// if powell_contact and not bobby_in_squad then
5167: LD_EXP 5
5171: PUSH
5172: LD_EXP 4
5176: NOT
5177: AND
5178: IFFALSE 5187
// ChangeMissionObjectives ( M2b ) ;
5180: LD_STRING M2b
5182: PPUSH
5183: CALL_OW 337
// if not bobby_in_squad and GetSide ( Bobby ) = 4 and IsOk ( Bobby ) then
5187: LD_EXP 4
5191: NOT
5192: PUSH
5193: LD_EXP 17
5197: PPUSH
5198: CALL_OW 255
5202: PUSH
5203: LD_INT 4
5205: EQUAL
5206: AND
5207: PUSH
5208: LD_EXP 17
5212: PPUSH
5213: CALL_OW 302
5217: AND
5218: IFFALSE 5227
// SetAchievement ( ACH_CYRUS ) ;
5220: LD_STRING ACH_CYRUS
5222: PPUSH
5223: CALL_OW 543
// end ;
5227: END
// every 0 0$01 trigger bobby_in_squad and cyrus_in_squad do
5228: LD_EXP 4
5232: PUSH
5233: LD_EXP 7
5237: AND
5238: IFFALSE 5250
5240: GO 5242
5242: DISABLE
// ChangeMissionObjectives ( M2c ) ;
5243: LD_STRING M2c
5245: PPUSH
5246: CALL_OW 337
5250: END
// every 0 0$01 trigger IsInArea ( JMM , trap ) do
5251: LD_EXP 16
5255: PPUSH
5256: LD_INT 8
5258: PPUSH
5259: CALL_OW 308
5263: IFFALSE 5315
5265: GO 5267
5267: DISABLE
// begin macmilan_in_trap := true ;
5268: LD_ADDR_EXP 9
5272: PUSH
5273: LD_INT 1
5275: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
5276: LD_INT 35
5278: PPUSH
5279: CALL_OW 67
// DialogueOn ;
5283: CALL_OW 6
// Say ( Pokryshkin , D5-Pok-1 ) ;
5287: LD_EXP 26
5291: PPUSH
5292: LD_STRING D5-Pok-1
5294: PPUSH
5295: CALL_OW 88
// DialogueOff ;
5299: CALL_OW 7
// Say ( JMM , D4b-JMM-1 ) ;
5303: LD_EXP 16
5307: PPUSH
5308: LD_STRING D4b-JMM-1
5310: PPUSH
5311: CALL_OW 88
// end ;
5315: END
// every 0 0$01 trigger GetDistUnits ( JMM , russian_meta_guards [ russian_meta_guards ] ) < 12 or UnitFilter ( russian_meta_guards , [ f_not , [ f_lives , 990 ] ] ) do var i , hp ;
5316: LD_EXP 16
5320: PPUSH
5321: LD_EXP 24
5325: PUSH
5326: LD_EXP 24
5330: ARRAY
5331: PPUSH
5332: CALL_OW 296
5336: PUSH
5337: LD_INT 12
5339: LESS
5340: PUSH
5341: LD_EXP 24
5345: PPUSH
5346: LD_INT 3
5348: PUSH
5349: LD_INT 24
5351: PUSH
5352: LD_INT 990
5354: PUSH
5355: EMPTY
5356: LIST
5357: LIST
5358: PUSH
5359: EMPTY
5360: LIST
5361: LIST
5362: PPUSH
5363: CALL_OW 72
5367: OR
5368: IFFALSE 5606
5370: GO 5372
5372: DISABLE
5373: LD_INT 0
5375: PPUSH
5376: PPUSH
// begin hp := [ 300 , 250 , 200 , 150 ] [ Difficulty ] ;
5377: LD_ADDR_VAR 0 2
5381: PUSH
5382: LD_INT 300
5384: PUSH
5385: LD_INT 250
5387: PUSH
5388: LD_INT 200
5390: PUSH
5391: LD_INT 150
5393: PUSH
5394: EMPTY
5395: LIST
5396: LIST
5397: LIST
5398: LIST
5399: PUSH
5400: LD_OWVAR 67
5404: ARRAY
5405: ST_TO_ADDR
// for i in russian_meta_guards do
5406: LD_ADDR_VAR 0 1
5410: PUSH
5411: LD_EXP 24
5415: PUSH
5416: FOR_IN
5417: IFFALSE 5457
// if IsOk ( i ) then
5419: LD_VAR 0 1
5423: PPUSH
5424: CALL_OW 302
5428: IFFALSE 5455
// SetLives ( i , GetLives ( i ) - hp ) ;
5430: LD_VAR 0 1
5434: PPUSH
5435: LD_VAR 0 1
5439: PPUSH
5440: CALL_OW 256
5444: PUSH
5445: LD_VAR 0 2
5449: MINUS
5450: PPUSH
5451: CALL_OW 234
5455: GO 5416
5457: POP
5458: POP
// DialogueOn ;
5459: CALL_OW 6
// Say ( russian_meta_guards [ russian_meta_guards ] , D6-FRus1-1 ) ;
5463: LD_EXP 24
5467: PUSH
5468: LD_EXP 24
5472: ARRAY
5473: PPUSH
5474: LD_STRING D6-FRus1-1
5476: PPUSH
5477: CALL_OW 88
// Say ( JMM , D6-JMM-1 ) ;
5481: LD_EXP 16
5485: PPUSH
5486: LD_STRING D6-JMM-1
5488: PPUSH
5489: CALL_OW 88
// if IsOk ( Cyrus ) and cyrus_in_squad then
5493: LD_EXP 18
5497: PPUSH
5498: CALL_OW 302
5502: PUSH
5503: LD_EXP 7
5507: AND
5508: IFFALSE 5522
// Say ( Cyrus , D6-Cyrus-1 ) ;
5510: LD_EXP 18
5514: PPUSH
5515: LD_STRING D6-Cyrus-1
5517: PPUSH
5518: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5522: LD_EXP 17
5526: PPUSH
5527: CALL_OW 302
5531: PUSH
5532: LD_EXP 4
5536: AND
5537: IFFALSE 5551
// Say ( Bobby , D6-Bobby-1 ) ;
5539: LD_EXP 17
5543: PPUSH
5544: LD_STRING D6-Bobby-1
5546: PPUSH
5547: CALL_OW 88
// DialogueOff ;
5551: CALL_OW 7
// Wait ( [ 0 0$04 , 0 0$03 , 0 0$02 , 0 0$02 ] [ Difficulty ] ) ;
5555: LD_INT 140
5557: PUSH
5558: LD_INT 105
5560: PUSH
5561: LD_INT 70
5563: PUSH
5564: LD_INT 70
5566: PUSH
5567: EMPTY
5568: LIST
5569: LIST
5570: LIST
5571: LIST
5572: PUSH
5573: LD_OWVAR 67
5577: ARRAY
5578: PPUSH
5579: CALL_OW 67
// meta_action := true ;
5583: LD_ADDR_EXP 10
5587: PUSH
5588: LD_INT 1
5590: ST_TO_ADDR
// ComAgressiveMove ( russian_meta_guards , 94 , 8 ) ;
5591: LD_EXP 24
5595: PPUSH
5596: LD_INT 94
5598: PPUSH
5599: LD_INT 8
5601: PPUSH
5602: CALL_OW 114
// end ;
5606: PPOPN 2
5608: END
// every 0 0$01 trigger GetDistUnitXY ( JMM , 93 , 1 ) < 5 and FilterAllUnits ( [ f_side , 1 ] ) > 1 do
5609: LD_EXP 16
5613: PPUSH
5614: LD_INT 93
5616: PPUSH
5617: LD_INT 1
5619: PPUSH
5620: CALL_OW 297
5624: PUSH
5625: LD_INT 5
5627: LESS
5628: PUSH
5629: LD_INT 22
5631: PUSH
5632: LD_INT 1
5634: PUSH
5635: EMPTY
5636: LIST
5637: LIST
5638: PPUSH
5639: CALL_OW 69
5643: PUSH
5644: LD_INT 1
5646: GREATER
5647: AND
5648: IFFALSE 5665
5650: GO 5652
5652: DISABLE
// Say ( JMM , D6a-JMM-1 ) ;
5653: LD_EXP 16
5657: PPUSH
5658: LD_STRING D6a-JMM-1
5660: PPUSH
5661: CALL_OW 88
5665: END
// on UnitGoesToRed ( un ) do begin if un = JMM then
5666: LD_VAR 0 1
5670: PUSH
5671: LD_EXP 16
5675: EQUAL
5676: IFFALSE 5685
// YouLost ( JMM ) ;
5678: LD_STRING JMM
5680: PPUSH
5681: CALL_OW 104
// end ;
5685: PPOPN 1
5687: END
// on UnitDestroyed ( un ) do begin if un = JMM then
5688: LD_VAR 0 1
5692: PUSH
5693: LD_EXP 16
5697: EQUAL
5698: IFFALSE 5707
// YouLost ( JMM ) ;
5700: LD_STRING JMM
5702: PPUSH
5703: CALL_OW 104
// end ;
5707: PPOPN 1
5709: END
// every 0 0$01 trigger IsInArea ( Bobby , exitArea ) do
5710: LD_EXP 17
5714: PPUSH
5715: LD_INT 10
5717: PPUSH
5718: CALL_OW 308
5722: IFFALSE 5771
5724: GO 5726
5726: DISABLE
// begin bobby_saved := true ;
5727: LD_ADDR_EXP 12
5731: PUSH
5732: LD_INT 1
5734: ST_TO_ADDR
// SaveVariable ( GetLives ( Bobby ) , 01_BobbyLifePoints_1 ) ;
5735: LD_EXP 17
5739: PPUSH
5740: CALL_OW 256
5744: PPUSH
5745: LD_STRING 01_BobbyLifePoints_1
5747: PPUSH
5748: CALL_OW 39
// RemoveUnit ( Bobby ) ;
5752: LD_EXP 17
5756: PPUSH
5757: CALL_OW 64
// AddMedal ( Bobby , 1 ) ;
5761: LD_STRING Bobby
5763: PPUSH
5764: LD_INT 1
5766: PPUSH
5767: CALL_OW 101
// end ;
5771: END
// every 0 0$01 trigger IsInArea ( Cyrus , exitArea ) do
5772: LD_EXP 18
5776: PPUSH
5777: LD_INT 10
5779: PPUSH
5780: CALL_OW 308
5784: IFFALSE 5833
5786: GO 5788
5788: DISABLE
// begin cyrus_saved := true ;
5789: LD_ADDR_EXP 13
5793: PUSH
5794: LD_INT 1
5796: ST_TO_ADDR
// SaveVariable ( GetLives ( Cyrus ) , 01_CyrusLifePoints_1 ) ;
5797: LD_EXP 18
5801: PPUSH
5802: CALL_OW 256
5806: PPUSH
5807: LD_STRING 01_CyrusLifePoints_1
5809: PPUSH
5810: CALL_OW 39
// RemoveUnit ( Cyrus ) ;
5814: LD_EXP 18
5818: PPUSH
5819: CALL_OW 64
// AddMedal ( Cyrus , 1 ) ;
5823: LD_STRING Cyrus
5825: PPUSH
5826: LD_INT 1
5828: PPUSH
5829: CALL_OW 101
// end ;
5833: END
// every 0 0$01 trigger IsInArea ( JMM , exitArea ) do var i , to_reward , wait_for_them , m1 , m2 , m3 ;
5834: LD_EXP 16
5838: PPUSH
5839: LD_INT 10
5841: PPUSH
5842: CALL_OW 308
5846: IFFALSE 6454
5848: GO 5850
5850: DISABLE
5851: LD_INT 0
5853: PPUSH
5854: PPUSH
5855: PPUSH
5856: PPUSH
5857: PPUSH
5858: PPUSH
// begin if macmilan_use_radio then
5859: LD_EXP 6
5863: IFFALSE 5872
// SetAchievement ( ACH_RADIO ) ;
5865: LD_STRING ACH_RADIO
5867: PPUSH
5868: CALL_OW 543
// if ( not cyrus_saved and cyrus_in_squad and IsOk ( Cyrus ) ) or ( not bobby_saved and bobby_in_squad and IsOk ( Bobby ) ) then
5872: LD_EXP 13
5876: NOT
5877: PUSH
5878: LD_EXP 7
5882: AND
5883: PUSH
5884: LD_EXP 18
5888: PPUSH
5889: CALL_OW 302
5893: AND
5894: PUSH
5895: LD_EXP 12
5899: NOT
5900: PUSH
5901: LD_EXP 4
5905: AND
5906: PUSH
5907: LD_EXP 17
5911: PPUSH
5912: CALL_OW 302
5916: AND
5917: OR
5918: IFFALSE 5959
// case Query ( Q2 ) of 1 :
5920: LD_STRING Q2
5922: PPUSH
5923: CALL_OW 97
5927: PUSH
5928: LD_INT 1
5930: DOUBLE
5931: EQUAL
5932: IFTRUE 5936
5934: GO 5947
5936: POP
// wait_for_them := true ; 2 :
5937: LD_ADDR_VAR 0 3
5941: PUSH
5942: LD_INT 1
5944: ST_TO_ADDR
5945: GO 5959
5947: LD_INT 2
5949: DOUBLE
5950: EQUAL
5951: IFTRUE 5955
5953: GO 5958
5955: POP
// ; end ;
5956: GO 5959
5958: POP
// if wait_for_them then
5959: LD_VAR 0 3
5963: IFFALSE 6076
// repeat wait ( 0 0$01 ) ;
5965: LD_INT 35
5967: PPUSH
5968: CALL_OW 67
// until ( cyrus_saved and bobby_saved ) or ( cyrus_saved and ( not bobby_in_squad or IsDying ( Bobby ) or IsDead ( Bobby ) ) ) or ( bobby_saved and ( not cyrus_in_squad or IsDying ( Cyrus ) or IsDead ( Cyrus ) ) ) or ( IsDead ( Bobby ) and IsDead ( Cyrus ) ) ;
5972: LD_EXP 13
5976: PUSH
5977: LD_EXP 12
5981: AND
5982: PUSH
5983: LD_EXP 13
5987: PUSH
5988: LD_EXP 4
5992: NOT
5993: PUSH
5994: LD_EXP 17
5998: PPUSH
5999: CALL_OW 303
6003: OR
6004: PUSH
6005: LD_EXP 17
6009: PPUSH
6010: CALL_OW 301
6014: OR
6015: AND
6016: OR
6017: PUSH
6018: LD_EXP 12
6022: PUSH
6023: LD_EXP 7
6027: NOT
6028: PUSH
6029: LD_EXP 18
6033: PPUSH
6034: CALL_OW 303
6038: OR
6039: PUSH
6040: LD_EXP 18
6044: PPUSH
6045: CALL_OW 301
6049: OR
6050: AND
6051: OR
6052: PUSH
6053: LD_EXP 17
6057: PPUSH
6058: CALL_OW 301
6062: PUSH
6063: LD_EXP 18
6067: PPUSH
6068: CALL_OW 301
6072: AND
6073: OR
6074: IFFALSE 5965
// SaveVariable ( GetLives ( JMM ) , 01_JMMLifePoints_1 ) ;
6076: LD_EXP 16
6080: PPUSH
6081: CALL_OW 256
6085: PPUSH
6086: LD_STRING 01_JMMLifePoints_1
6088: PPUSH
6089: CALL_OW 39
// RemoveUnit ( JMM ) ;
6093: LD_EXP 16
6097: PPUSH
6098: CALL_OW 64
// to_reward := [ JMM ] ;
6102: LD_ADDR_VAR 0 2
6106: PUSH
6107: LD_EXP 16
6111: PUSH
6112: EMPTY
6113: LIST
6114: ST_TO_ADDR
// if bobby_saved then
6115: LD_EXP 12
6119: IFFALSE 6137
// to_reward := to_reward ^ Bobby ;
6121: LD_ADDR_VAR 0 2
6125: PUSH
6126: LD_VAR 0 2
6130: PUSH
6131: LD_EXP 17
6135: ADD
6136: ST_TO_ADDR
// if cyrus_saved then
6137: LD_EXP 13
6141: IFFALSE 6159
// to_reward := to_reward ^ Cyrus ;
6143: LD_ADDR_VAR 0 2
6147: PUSH
6148: LD_VAR 0 2
6152: PUSH
6153: LD_EXP 18
6157: ADD
6158: ST_TO_ADDR
// m1 := true ;
6159: LD_ADDR_VAR 0 4
6163: PUSH
6164: LD_INT 1
6166: ST_TO_ADDR
// m2 := bobby_saved ;
6167: LD_ADDR_VAR 0 5
6171: PUSH
6172: LD_EXP 12
6176: ST_TO_ADDR
// m3 := cyrus_saved ;
6177: LD_ADDR_VAR 0 6
6181: PUSH
6182: LD_EXP 13
6186: ST_TO_ADDR
// AddMedal ( JMM , 1 ) ;
6187: LD_STRING JMM
6189: PPUSH
6190: LD_INT 1
6192: PPUSH
6193: CALL_OW 101
// if not bobby_in_squad then
6197: LD_EXP 4
6201: NOT
6202: IFFALSE 6215
// AddMedal ( Bobby , - 1 ) ;
6204: LD_STRING Bobby
6206: PPUSH
6207: LD_INT 1
6209: NEG
6210: PPUSH
6211: CALL_OW 101
// if not bobby_saved and ( IsDying ( Bobby ) or IsDead ( Bobby ) ) then
6215: LD_EXP 12
6219: NOT
6220: PUSH
6221: LD_EXP 17
6225: PPUSH
6226: CALL_OW 303
6230: PUSH
6231: LD_EXP 17
6235: PPUSH
6236: CALL_OW 301
6240: OR
6241: AND
6242: IFFALSE 6255
// AddMedal ( Bobby , - 2 ) ;
6244: LD_STRING Bobby
6246: PPUSH
6247: LD_INT 2
6249: NEG
6250: PPUSH
6251: CALL_OW 101
// if not cyrus_in_squad then
6255: LD_EXP 7
6259: NOT
6260: IFFALSE 6273
// AddMedal ( Cyrus , - 1 ) ;
6262: LD_STRING Cyrus
6264: PPUSH
6265: LD_INT 1
6267: NEG
6268: PPUSH
6269: CALL_OW 101
// if not cyrus_saved and ( IsDying ( Cyrus ) or IsDead ( Cyrus ) ) then
6273: LD_EXP 13
6277: NOT
6278: PUSH
6279: LD_EXP 18
6283: PPUSH
6284: CALL_OW 303
6288: PUSH
6289: LD_EXP 18
6293: PPUSH
6294: CALL_OW 301
6298: OR
6299: AND
6300: IFFALSE 6313
// AddMedal ( Cyrus , - 2 ) ;
6302: LD_STRING Cyrus
6304: PPUSH
6305: LD_INT 2
6307: NEG
6308: PPUSH
6309: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 and m3 then
6313: LD_OWVAR 67
6317: PUSH
6318: LD_INT 3
6320: GREATEREQUAL
6321: PUSH
6322: LD_VAR 0 4
6326: AND
6327: PUSH
6328: LD_VAR 0 5
6332: AND
6333: PUSH
6334: LD_VAR 0 6
6338: AND
6339: IFFALSE 6351
// SetAchievementEX ( ACH_AMER , 1 ) ;
6341: LD_STRING ACH_AMER
6343: PPUSH
6344: LD_INT 1
6346: PPUSH
6347: CALL_OW 564
// GiveMedals ( MAIN ) ;
6351: LD_STRING MAIN
6353: PPUSH
6354: CALL_OW 102
// RewardPeople ( to_reward ) ;
6358: LD_VAR 0 2
6362: PPUSH
6363: CALL_OW 43
// if bobby_saved then
6367: LD_EXP 12
6371: IFFALSE 6391
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
6373: LD_EXP 17
6377: PPUSH
6378: LD_EXP 2
6382: PUSH
6383: LD_STRING Bobby
6385: STR
6386: PPUSH
6387: CALL_OW 38
// if cyrus_saved then
6391: LD_EXP 13
6395: IFFALSE 6415
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
6397: LD_EXP 18
6401: PPUSH
6402: LD_EXP 2
6406: PUSH
6407: LD_STRING Cyrus
6409: STR
6410: PPUSH
6411: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
6415: LD_EXP 16
6419: PPUSH
6420: LD_EXP 2
6424: PUSH
6425: LD_STRING JMM
6427: STR
6428: PPUSH
6429: CALL_OW 38
// if tick <= 3 3$00 then
6433: LD_OWVAR 1
6437: PUSH
6438: LD_INT 6300
6440: LESSEQUAL
6441: IFFALSE 6450
// SetAchievement ( ACH_ASPEED_1 ) ;
6443: LD_STRING ACH_ASPEED_1
6445: PPUSH
6446: CALL_OW 543
// YouWin ;
6450: CALL_OW 103
// end ; end_of_file end_of_file
6454: PPOPN 6
6456: END
// every 0 0$1 do
6457: GO 6459
6459: DISABLE
// begin enable ;
6460: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
6461: LD_STRING updateTimer(
6463: PUSH
6464: LD_OWVAR 1
6468: STR
6469: PUSH
6470: LD_STRING );
6472: STR
6473: PPUSH
6474: CALL_OW 559
// end ;
6478: END
// on MapStart ( p ) do begin if streamModeActive then
6479: LD_EXP 27
6483: IFFALSE 6492
// DefineStreamItems ( true ) ;
6485: LD_INT 1
6487: PPUSH
6488: CALL 8140 0 1
// UpdateFactoryWaypoints ( ) ;
6492: CALL 21724 0 0
// end ;
6496: PPOPN 1
6498: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
6499: LD_INT 0
6501: PPUSH
// if p2 = 100 then
6502: LD_VAR 0 2
6506: PUSH
6507: LD_INT 100
6509: EQUAL
6510: IFFALSE 7513
// begin if not StreamModeActive then
6512: LD_EXP 27
6516: NOT
6517: IFFALSE 6527
// StreamModeActive := true ;
6519: LD_ADDR_EXP 27
6523: PUSH
6524: LD_INT 1
6526: ST_TO_ADDR
// if p3 = 0 then
6527: LD_VAR 0 3
6531: PUSH
6532: LD_INT 0
6534: EQUAL
6535: IFFALSE 6541
// InitStreamMode ;
6537: CALL 7676 0 0
// if p3 = 1 then
6541: LD_VAR 0 3
6545: PUSH
6546: LD_INT 1
6548: EQUAL
6549: IFFALSE 6559
// sRocket := true ;
6551: LD_ADDR_EXP 32
6555: PUSH
6556: LD_INT 1
6558: ST_TO_ADDR
// if p3 = 2 then
6559: LD_VAR 0 3
6563: PUSH
6564: LD_INT 2
6566: EQUAL
6567: IFFALSE 6577
// sSpeed := true ;
6569: LD_ADDR_EXP 31
6573: PUSH
6574: LD_INT 1
6576: ST_TO_ADDR
// if p3 = 3 then
6577: LD_VAR 0 3
6581: PUSH
6582: LD_INT 3
6584: EQUAL
6585: IFFALSE 6595
// sEngine := true ;
6587: LD_ADDR_EXP 33
6591: PUSH
6592: LD_INT 1
6594: ST_TO_ADDR
// if p3 = 4 then
6595: LD_VAR 0 3
6599: PUSH
6600: LD_INT 4
6602: EQUAL
6603: IFFALSE 6613
// sSpec := true ;
6605: LD_ADDR_EXP 30
6609: PUSH
6610: LD_INT 1
6612: ST_TO_ADDR
// if p3 = 5 then
6613: LD_VAR 0 3
6617: PUSH
6618: LD_INT 5
6620: EQUAL
6621: IFFALSE 6631
// sLevel := true ;
6623: LD_ADDR_EXP 34
6627: PUSH
6628: LD_INT 1
6630: ST_TO_ADDR
// if p3 = 6 then
6631: LD_VAR 0 3
6635: PUSH
6636: LD_INT 6
6638: EQUAL
6639: IFFALSE 6649
// sArmoury := true ;
6641: LD_ADDR_EXP 35
6645: PUSH
6646: LD_INT 1
6648: ST_TO_ADDR
// if p3 = 7 then
6649: LD_VAR 0 3
6653: PUSH
6654: LD_INT 7
6656: EQUAL
6657: IFFALSE 6667
// sRadar := true ;
6659: LD_ADDR_EXP 36
6663: PUSH
6664: LD_INT 1
6666: ST_TO_ADDR
// if p3 = 8 then
6667: LD_VAR 0 3
6671: PUSH
6672: LD_INT 8
6674: EQUAL
6675: IFFALSE 6685
// sBunker := true ;
6677: LD_ADDR_EXP 37
6681: PUSH
6682: LD_INT 1
6684: ST_TO_ADDR
// if p3 = 9 then
6685: LD_VAR 0 3
6689: PUSH
6690: LD_INT 9
6692: EQUAL
6693: IFFALSE 6703
// sHack := true ;
6695: LD_ADDR_EXP 38
6699: PUSH
6700: LD_INT 1
6702: ST_TO_ADDR
// if p3 = 10 then
6703: LD_VAR 0 3
6707: PUSH
6708: LD_INT 10
6710: EQUAL
6711: IFFALSE 6721
// sFire := true ;
6713: LD_ADDR_EXP 39
6717: PUSH
6718: LD_INT 1
6720: ST_TO_ADDR
// if p3 = 11 then
6721: LD_VAR 0 3
6725: PUSH
6726: LD_INT 11
6728: EQUAL
6729: IFFALSE 6739
// sRefresh := true ;
6731: LD_ADDR_EXP 40
6735: PUSH
6736: LD_INT 1
6738: ST_TO_ADDR
// if p3 = 12 then
6739: LD_VAR 0 3
6743: PUSH
6744: LD_INT 12
6746: EQUAL
6747: IFFALSE 6757
// sExp := true ;
6749: LD_ADDR_EXP 41
6753: PUSH
6754: LD_INT 1
6756: ST_TO_ADDR
// if p3 = 13 then
6757: LD_VAR 0 3
6761: PUSH
6762: LD_INT 13
6764: EQUAL
6765: IFFALSE 6775
// sDepot := true ;
6767: LD_ADDR_EXP 42
6771: PUSH
6772: LD_INT 1
6774: ST_TO_ADDR
// if p3 = 14 then
6775: LD_VAR 0 3
6779: PUSH
6780: LD_INT 14
6782: EQUAL
6783: IFFALSE 6793
// sFlag := true ;
6785: LD_ADDR_EXP 43
6789: PUSH
6790: LD_INT 1
6792: ST_TO_ADDR
// if p3 = 15 then
6793: LD_VAR 0 3
6797: PUSH
6798: LD_INT 15
6800: EQUAL
6801: IFFALSE 6811
// sKamikadze := true ;
6803: LD_ADDR_EXP 51
6807: PUSH
6808: LD_INT 1
6810: ST_TO_ADDR
// if p3 = 16 then
6811: LD_VAR 0 3
6815: PUSH
6816: LD_INT 16
6818: EQUAL
6819: IFFALSE 6829
// sTroll := true ;
6821: LD_ADDR_EXP 52
6825: PUSH
6826: LD_INT 1
6828: ST_TO_ADDR
// if p3 = 17 then
6829: LD_VAR 0 3
6833: PUSH
6834: LD_INT 17
6836: EQUAL
6837: IFFALSE 6847
// sSlow := true ;
6839: LD_ADDR_EXP 53
6843: PUSH
6844: LD_INT 1
6846: ST_TO_ADDR
// if p3 = 18 then
6847: LD_VAR 0 3
6851: PUSH
6852: LD_INT 18
6854: EQUAL
6855: IFFALSE 6865
// sLack := true ;
6857: LD_ADDR_EXP 54
6861: PUSH
6862: LD_INT 1
6864: ST_TO_ADDR
// if p3 = 19 then
6865: LD_VAR 0 3
6869: PUSH
6870: LD_INT 19
6872: EQUAL
6873: IFFALSE 6883
// sTank := true ;
6875: LD_ADDR_EXP 56
6879: PUSH
6880: LD_INT 1
6882: ST_TO_ADDR
// if p3 = 20 then
6883: LD_VAR 0 3
6887: PUSH
6888: LD_INT 20
6890: EQUAL
6891: IFFALSE 6901
// sRemote := true ;
6893: LD_ADDR_EXP 57
6897: PUSH
6898: LD_INT 1
6900: ST_TO_ADDR
// if p3 = 21 then
6901: LD_VAR 0 3
6905: PUSH
6906: LD_INT 21
6908: EQUAL
6909: IFFALSE 6919
// sPowell := true ;
6911: LD_ADDR_EXP 58
6915: PUSH
6916: LD_INT 1
6918: ST_TO_ADDR
// if p3 = 22 then
6919: LD_VAR 0 3
6923: PUSH
6924: LD_INT 22
6926: EQUAL
6927: IFFALSE 6937
// sTeleport := true ;
6929: LD_ADDR_EXP 61
6933: PUSH
6934: LD_INT 1
6936: ST_TO_ADDR
// if p3 = 23 then
6937: LD_VAR 0 3
6941: PUSH
6942: LD_INT 23
6944: EQUAL
6945: IFFALSE 6955
// sOilTower := true ;
6947: LD_ADDR_EXP 63
6951: PUSH
6952: LD_INT 1
6954: ST_TO_ADDR
// if p3 = 24 then
6955: LD_VAR 0 3
6959: PUSH
6960: LD_INT 24
6962: EQUAL
6963: IFFALSE 6973
// sShovel := true ;
6965: LD_ADDR_EXP 64
6969: PUSH
6970: LD_INT 1
6972: ST_TO_ADDR
// if p3 = 25 then
6973: LD_VAR 0 3
6977: PUSH
6978: LD_INT 25
6980: EQUAL
6981: IFFALSE 6991
// sSheik := true ;
6983: LD_ADDR_EXP 65
6987: PUSH
6988: LD_INT 1
6990: ST_TO_ADDR
// if p3 = 26 then
6991: LD_VAR 0 3
6995: PUSH
6996: LD_INT 26
6998: EQUAL
6999: IFFALSE 7009
// sEarthquake := true ;
7001: LD_ADDR_EXP 67
7005: PUSH
7006: LD_INT 1
7008: ST_TO_ADDR
// if p3 = 27 then
7009: LD_VAR 0 3
7013: PUSH
7014: LD_INT 27
7016: EQUAL
7017: IFFALSE 7027
// sAI := true ;
7019: LD_ADDR_EXP 68
7023: PUSH
7024: LD_INT 1
7026: ST_TO_ADDR
// if p3 = 28 then
7027: LD_VAR 0 3
7031: PUSH
7032: LD_INT 28
7034: EQUAL
7035: IFFALSE 7045
// sCargo := true ;
7037: LD_ADDR_EXP 71
7041: PUSH
7042: LD_INT 1
7044: ST_TO_ADDR
// if p3 = 29 then
7045: LD_VAR 0 3
7049: PUSH
7050: LD_INT 29
7052: EQUAL
7053: IFFALSE 7063
// sDLaser := true ;
7055: LD_ADDR_EXP 72
7059: PUSH
7060: LD_INT 1
7062: ST_TO_ADDR
// if p3 = 30 then
7063: LD_VAR 0 3
7067: PUSH
7068: LD_INT 30
7070: EQUAL
7071: IFFALSE 7081
// sExchange := true ;
7073: LD_ADDR_EXP 73
7077: PUSH
7078: LD_INT 1
7080: ST_TO_ADDR
// if p3 = 31 then
7081: LD_VAR 0 3
7085: PUSH
7086: LD_INT 31
7088: EQUAL
7089: IFFALSE 7099
// sFac := true ;
7091: LD_ADDR_EXP 74
7095: PUSH
7096: LD_INT 1
7098: ST_TO_ADDR
// if p3 = 32 then
7099: LD_VAR 0 3
7103: PUSH
7104: LD_INT 32
7106: EQUAL
7107: IFFALSE 7117
// sPower := true ;
7109: LD_ADDR_EXP 75
7113: PUSH
7114: LD_INT 1
7116: ST_TO_ADDR
// if p3 = 33 then
7117: LD_VAR 0 3
7121: PUSH
7122: LD_INT 33
7124: EQUAL
7125: IFFALSE 7135
// sRandom := true ;
7127: LD_ADDR_EXP 76
7131: PUSH
7132: LD_INT 1
7134: ST_TO_ADDR
// if p3 = 34 then
7135: LD_VAR 0 3
7139: PUSH
7140: LD_INT 34
7142: EQUAL
7143: IFFALSE 7153
// sShield := true ;
7145: LD_ADDR_EXP 77
7149: PUSH
7150: LD_INT 1
7152: ST_TO_ADDR
// if p3 = 35 then
7153: LD_VAR 0 3
7157: PUSH
7158: LD_INT 35
7160: EQUAL
7161: IFFALSE 7171
// sTime := true ;
7163: LD_ADDR_EXP 78
7167: PUSH
7168: LD_INT 1
7170: ST_TO_ADDR
// if p3 = 36 then
7171: LD_VAR 0 3
7175: PUSH
7176: LD_INT 36
7178: EQUAL
7179: IFFALSE 7189
// sTools := true ;
7181: LD_ADDR_EXP 79
7185: PUSH
7186: LD_INT 1
7188: ST_TO_ADDR
// if p3 = 101 then
7189: LD_VAR 0 3
7193: PUSH
7194: LD_INT 101
7196: EQUAL
7197: IFFALSE 7207
// sSold := true ;
7199: LD_ADDR_EXP 44
7203: PUSH
7204: LD_INT 1
7206: ST_TO_ADDR
// if p3 = 102 then
7207: LD_VAR 0 3
7211: PUSH
7212: LD_INT 102
7214: EQUAL
7215: IFFALSE 7225
// sDiff := true ;
7217: LD_ADDR_EXP 45
7221: PUSH
7222: LD_INT 1
7224: ST_TO_ADDR
// if p3 = 103 then
7225: LD_VAR 0 3
7229: PUSH
7230: LD_INT 103
7232: EQUAL
7233: IFFALSE 7243
// sFog := true ;
7235: LD_ADDR_EXP 48
7239: PUSH
7240: LD_INT 1
7242: ST_TO_ADDR
// if p3 = 104 then
7243: LD_VAR 0 3
7247: PUSH
7248: LD_INT 104
7250: EQUAL
7251: IFFALSE 7261
// sReset := true ;
7253: LD_ADDR_EXP 49
7257: PUSH
7258: LD_INT 1
7260: ST_TO_ADDR
// if p3 = 105 then
7261: LD_VAR 0 3
7265: PUSH
7266: LD_INT 105
7268: EQUAL
7269: IFFALSE 7279
// sSun := true ;
7271: LD_ADDR_EXP 50
7275: PUSH
7276: LD_INT 1
7278: ST_TO_ADDR
// if p3 = 106 then
7279: LD_VAR 0 3
7283: PUSH
7284: LD_INT 106
7286: EQUAL
7287: IFFALSE 7297
// sTiger := true ;
7289: LD_ADDR_EXP 46
7293: PUSH
7294: LD_INT 1
7296: ST_TO_ADDR
// if p3 = 107 then
7297: LD_VAR 0 3
7301: PUSH
7302: LD_INT 107
7304: EQUAL
7305: IFFALSE 7315
// sBomb := true ;
7307: LD_ADDR_EXP 47
7311: PUSH
7312: LD_INT 1
7314: ST_TO_ADDR
// if p3 = 108 then
7315: LD_VAR 0 3
7319: PUSH
7320: LD_INT 108
7322: EQUAL
7323: IFFALSE 7333
// sWound := true ;
7325: LD_ADDR_EXP 55
7329: PUSH
7330: LD_INT 1
7332: ST_TO_ADDR
// if p3 = 109 then
7333: LD_VAR 0 3
7337: PUSH
7338: LD_INT 109
7340: EQUAL
7341: IFFALSE 7351
// sBetray := true ;
7343: LD_ADDR_EXP 59
7347: PUSH
7348: LD_INT 1
7350: ST_TO_ADDR
// if p3 = 110 then
7351: LD_VAR 0 3
7355: PUSH
7356: LD_INT 110
7358: EQUAL
7359: IFFALSE 7369
// sContamin := true ;
7361: LD_ADDR_EXP 60
7365: PUSH
7366: LD_INT 1
7368: ST_TO_ADDR
// if p3 = 111 then
7369: LD_VAR 0 3
7373: PUSH
7374: LD_INT 111
7376: EQUAL
7377: IFFALSE 7387
// sOil := true ;
7379: LD_ADDR_EXP 62
7383: PUSH
7384: LD_INT 1
7386: ST_TO_ADDR
// if p3 = 112 then
7387: LD_VAR 0 3
7391: PUSH
7392: LD_INT 112
7394: EQUAL
7395: IFFALSE 7405
// sStu := true ;
7397: LD_ADDR_EXP 66
7401: PUSH
7402: LD_INT 1
7404: ST_TO_ADDR
// if p3 = 113 then
7405: LD_VAR 0 3
7409: PUSH
7410: LD_INT 113
7412: EQUAL
7413: IFFALSE 7423
// sBazooka := true ;
7415: LD_ADDR_EXP 69
7419: PUSH
7420: LD_INT 1
7422: ST_TO_ADDR
// if p3 = 114 then
7423: LD_VAR 0 3
7427: PUSH
7428: LD_INT 114
7430: EQUAL
7431: IFFALSE 7441
// sMortar := true ;
7433: LD_ADDR_EXP 70
7437: PUSH
7438: LD_INT 1
7440: ST_TO_ADDR
// if p3 = 115 then
7441: LD_VAR 0 3
7445: PUSH
7446: LD_INT 115
7448: EQUAL
7449: IFFALSE 7459
// sRanger := true ;
7451: LD_ADDR_EXP 80
7455: PUSH
7456: LD_INT 1
7458: ST_TO_ADDR
// if p3 = 116 then
7459: LD_VAR 0 3
7463: PUSH
7464: LD_INT 116
7466: EQUAL
7467: IFFALSE 7477
// sComputer := true ;
7469: LD_ADDR_EXP 81
7473: PUSH
7474: LD_INT 1
7476: ST_TO_ADDR
// if p3 = 117 then
7477: LD_VAR 0 3
7481: PUSH
7482: LD_INT 117
7484: EQUAL
7485: IFFALSE 7495
// s30 := true ;
7487: LD_ADDR_EXP 82
7491: PUSH
7492: LD_INT 1
7494: ST_TO_ADDR
// if p3 = 118 then
7495: LD_VAR 0 3
7499: PUSH
7500: LD_INT 118
7502: EQUAL
7503: IFFALSE 7513
// s60 := true ;
7505: LD_ADDR_EXP 83
7509: PUSH
7510: LD_INT 1
7512: ST_TO_ADDR
// end ; if p2 = 101 then
7513: LD_VAR 0 2
7517: PUSH
7518: LD_INT 101
7520: EQUAL
7521: IFFALSE 7649
// begin case p3 of 1 :
7523: LD_VAR 0 3
7527: PUSH
7528: LD_INT 1
7530: DOUBLE
7531: EQUAL
7532: IFTRUE 7536
7534: GO 7543
7536: POP
// hHackUnlimitedResources ; 2 :
7537: CALL 19747 0 0
7541: GO 7649
7543: LD_INT 2
7545: DOUBLE
7546: EQUAL
7547: IFTRUE 7551
7549: GO 7558
7551: POP
// hHackSetLevel10 ; 3 :
7552: CALL 19880 0 0
7556: GO 7649
7558: LD_INT 3
7560: DOUBLE
7561: EQUAL
7562: IFTRUE 7566
7564: GO 7573
7566: POP
// hHackSetLevel10YourUnits ; 4 :
7567: CALL 19965 0 0
7571: GO 7649
7573: LD_INT 4
7575: DOUBLE
7576: EQUAL
7577: IFTRUE 7581
7579: GO 7588
7581: POP
// hHackInvincible ; 5 :
7582: CALL 20413 0 0
7586: GO 7649
7588: LD_INT 5
7590: DOUBLE
7591: EQUAL
7592: IFTRUE 7596
7594: GO 7603
7596: POP
// hHackInvisible ; 6 :
7597: CALL 20524 0 0
7601: GO 7649
7603: LD_INT 6
7605: DOUBLE
7606: EQUAL
7607: IFTRUE 7611
7609: GO 7618
7611: POP
// hHackChangeYourSide ; 7 :
7612: CALL 20581 0 0
7616: GO 7649
7618: LD_INT 7
7620: DOUBLE
7621: EQUAL
7622: IFTRUE 7626
7624: GO 7633
7626: POP
// hHackChangeUnitSide ; 8 :
7627: CALL 20623 0 0
7631: GO 7649
7633: LD_INT 8
7635: DOUBLE
7636: EQUAL
7637: IFTRUE 7641
7639: GO 7648
7641: POP
// hHackFog ; end ;
7642: CALL 20724 0 0
7646: GO 7649
7648: POP
// end ; end ;
7649: LD_VAR 0 7
7653: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
7654: GO 7656
7656: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
7657: LD_STRING initStreamRollete();
7659: PPUSH
7660: CALL_OW 559
// InitStreamMode ;
7664: CALL 7676 0 0
// DefineStreamItems ( false ) ;
7668: LD_INT 0
7670: PPUSH
7671: CALL 8140 0 1
// end ;
7675: END
// function InitStreamMode ; begin
7676: LD_INT 0
7678: PPUSH
// streamModeActive := false ;
7679: LD_ADDR_EXP 27
7683: PUSH
7684: LD_INT 0
7686: ST_TO_ADDR
// normalCounter := 36 ;
7687: LD_ADDR_EXP 28
7691: PUSH
7692: LD_INT 36
7694: ST_TO_ADDR
// hardcoreCounter := 18 ;
7695: LD_ADDR_EXP 29
7699: PUSH
7700: LD_INT 18
7702: ST_TO_ADDR
// sRocket := false ;
7703: LD_ADDR_EXP 32
7707: PUSH
7708: LD_INT 0
7710: ST_TO_ADDR
// sSpeed := false ;
7711: LD_ADDR_EXP 31
7715: PUSH
7716: LD_INT 0
7718: ST_TO_ADDR
// sEngine := false ;
7719: LD_ADDR_EXP 33
7723: PUSH
7724: LD_INT 0
7726: ST_TO_ADDR
// sSpec := false ;
7727: LD_ADDR_EXP 30
7731: PUSH
7732: LD_INT 0
7734: ST_TO_ADDR
// sLevel := false ;
7735: LD_ADDR_EXP 34
7739: PUSH
7740: LD_INT 0
7742: ST_TO_ADDR
// sArmoury := false ;
7743: LD_ADDR_EXP 35
7747: PUSH
7748: LD_INT 0
7750: ST_TO_ADDR
// sRadar := false ;
7751: LD_ADDR_EXP 36
7755: PUSH
7756: LD_INT 0
7758: ST_TO_ADDR
// sBunker := false ;
7759: LD_ADDR_EXP 37
7763: PUSH
7764: LD_INT 0
7766: ST_TO_ADDR
// sHack := false ;
7767: LD_ADDR_EXP 38
7771: PUSH
7772: LD_INT 0
7774: ST_TO_ADDR
// sFire := false ;
7775: LD_ADDR_EXP 39
7779: PUSH
7780: LD_INT 0
7782: ST_TO_ADDR
// sRefresh := false ;
7783: LD_ADDR_EXP 40
7787: PUSH
7788: LD_INT 0
7790: ST_TO_ADDR
// sExp := false ;
7791: LD_ADDR_EXP 41
7795: PUSH
7796: LD_INT 0
7798: ST_TO_ADDR
// sDepot := false ;
7799: LD_ADDR_EXP 42
7803: PUSH
7804: LD_INT 0
7806: ST_TO_ADDR
// sFlag := false ;
7807: LD_ADDR_EXP 43
7811: PUSH
7812: LD_INT 0
7814: ST_TO_ADDR
// sKamikadze := false ;
7815: LD_ADDR_EXP 51
7819: PUSH
7820: LD_INT 0
7822: ST_TO_ADDR
// sTroll := false ;
7823: LD_ADDR_EXP 52
7827: PUSH
7828: LD_INT 0
7830: ST_TO_ADDR
// sSlow := false ;
7831: LD_ADDR_EXP 53
7835: PUSH
7836: LD_INT 0
7838: ST_TO_ADDR
// sLack := false ;
7839: LD_ADDR_EXP 54
7843: PUSH
7844: LD_INT 0
7846: ST_TO_ADDR
// sTank := false ;
7847: LD_ADDR_EXP 56
7851: PUSH
7852: LD_INT 0
7854: ST_TO_ADDR
// sRemote := false ;
7855: LD_ADDR_EXP 57
7859: PUSH
7860: LD_INT 0
7862: ST_TO_ADDR
// sPowell := false ;
7863: LD_ADDR_EXP 58
7867: PUSH
7868: LD_INT 0
7870: ST_TO_ADDR
// sTeleport := false ;
7871: LD_ADDR_EXP 61
7875: PUSH
7876: LD_INT 0
7878: ST_TO_ADDR
// sOilTower := false ;
7879: LD_ADDR_EXP 63
7883: PUSH
7884: LD_INT 0
7886: ST_TO_ADDR
// sShovel := false ;
7887: LD_ADDR_EXP 64
7891: PUSH
7892: LD_INT 0
7894: ST_TO_ADDR
// sSheik := false ;
7895: LD_ADDR_EXP 65
7899: PUSH
7900: LD_INT 0
7902: ST_TO_ADDR
// sEarthquake := false ;
7903: LD_ADDR_EXP 67
7907: PUSH
7908: LD_INT 0
7910: ST_TO_ADDR
// sAI := false ;
7911: LD_ADDR_EXP 68
7915: PUSH
7916: LD_INT 0
7918: ST_TO_ADDR
// sCargo := false ;
7919: LD_ADDR_EXP 71
7923: PUSH
7924: LD_INT 0
7926: ST_TO_ADDR
// sDLaser := false ;
7927: LD_ADDR_EXP 72
7931: PUSH
7932: LD_INT 0
7934: ST_TO_ADDR
// sExchange := false ;
7935: LD_ADDR_EXP 73
7939: PUSH
7940: LD_INT 0
7942: ST_TO_ADDR
// sFac := false ;
7943: LD_ADDR_EXP 74
7947: PUSH
7948: LD_INT 0
7950: ST_TO_ADDR
// sPower := false ;
7951: LD_ADDR_EXP 75
7955: PUSH
7956: LD_INT 0
7958: ST_TO_ADDR
// sRandom := false ;
7959: LD_ADDR_EXP 76
7963: PUSH
7964: LD_INT 0
7966: ST_TO_ADDR
// sShield := false ;
7967: LD_ADDR_EXP 77
7971: PUSH
7972: LD_INT 0
7974: ST_TO_ADDR
// sTime := false ;
7975: LD_ADDR_EXP 78
7979: PUSH
7980: LD_INT 0
7982: ST_TO_ADDR
// sTools := false ;
7983: LD_ADDR_EXP 79
7987: PUSH
7988: LD_INT 0
7990: ST_TO_ADDR
// sSold := false ;
7991: LD_ADDR_EXP 44
7995: PUSH
7996: LD_INT 0
7998: ST_TO_ADDR
// sDiff := false ;
7999: LD_ADDR_EXP 45
8003: PUSH
8004: LD_INT 0
8006: ST_TO_ADDR
// sFog := false ;
8007: LD_ADDR_EXP 48
8011: PUSH
8012: LD_INT 0
8014: ST_TO_ADDR
// sReset := false ;
8015: LD_ADDR_EXP 49
8019: PUSH
8020: LD_INT 0
8022: ST_TO_ADDR
// sSun := false ;
8023: LD_ADDR_EXP 50
8027: PUSH
8028: LD_INT 0
8030: ST_TO_ADDR
// sTiger := false ;
8031: LD_ADDR_EXP 46
8035: PUSH
8036: LD_INT 0
8038: ST_TO_ADDR
// sBomb := false ;
8039: LD_ADDR_EXP 47
8043: PUSH
8044: LD_INT 0
8046: ST_TO_ADDR
// sWound := false ;
8047: LD_ADDR_EXP 55
8051: PUSH
8052: LD_INT 0
8054: ST_TO_ADDR
// sBetray := false ;
8055: LD_ADDR_EXP 59
8059: PUSH
8060: LD_INT 0
8062: ST_TO_ADDR
// sContamin := false ;
8063: LD_ADDR_EXP 60
8067: PUSH
8068: LD_INT 0
8070: ST_TO_ADDR
// sOil := false ;
8071: LD_ADDR_EXP 62
8075: PUSH
8076: LD_INT 0
8078: ST_TO_ADDR
// sStu := false ;
8079: LD_ADDR_EXP 66
8083: PUSH
8084: LD_INT 0
8086: ST_TO_ADDR
// sBazooka := false ;
8087: LD_ADDR_EXP 69
8091: PUSH
8092: LD_INT 0
8094: ST_TO_ADDR
// sMortar := false ;
8095: LD_ADDR_EXP 70
8099: PUSH
8100: LD_INT 0
8102: ST_TO_ADDR
// sRanger := false ;
8103: LD_ADDR_EXP 80
8107: PUSH
8108: LD_INT 0
8110: ST_TO_ADDR
// sComputer := false ;
8111: LD_ADDR_EXP 81
8115: PUSH
8116: LD_INT 0
8118: ST_TO_ADDR
// s30 := false ;
8119: LD_ADDR_EXP 82
8123: PUSH
8124: LD_INT 0
8126: ST_TO_ADDR
// s60 := false ;
8127: LD_ADDR_EXP 83
8131: PUSH
8132: LD_INT 0
8134: ST_TO_ADDR
// end ;
8135: LD_VAR 0 1
8139: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
8140: LD_INT 0
8142: PPUSH
8143: PPUSH
8144: PPUSH
8145: PPUSH
8146: PPUSH
8147: PPUSH
8148: PPUSH
// result := [ ] ;
8149: LD_ADDR_VAR 0 2
8153: PUSH
8154: EMPTY
8155: ST_TO_ADDR
// if campaign_id = 1 then
8156: LD_OWVAR 69
8160: PUSH
8161: LD_INT 1
8163: EQUAL
8164: IFFALSE 11330
// begin case mission_number of 1 :
8166: LD_OWVAR 70
8170: PUSH
8171: LD_INT 1
8173: DOUBLE
8174: EQUAL
8175: IFTRUE 8179
8177: GO 8255
8179: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
8180: LD_ADDR_VAR 0 2
8184: PUSH
8185: LD_INT 2
8187: PUSH
8188: LD_INT 4
8190: PUSH
8191: LD_INT 11
8193: PUSH
8194: LD_INT 12
8196: PUSH
8197: LD_INT 15
8199: PUSH
8200: LD_INT 16
8202: PUSH
8203: LD_INT 22
8205: PUSH
8206: LD_INT 23
8208: PUSH
8209: LD_INT 26
8211: PUSH
8212: EMPTY
8213: LIST
8214: LIST
8215: LIST
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: LIST
8222: PUSH
8223: LD_INT 101
8225: PUSH
8226: LD_INT 102
8228: PUSH
8229: LD_INT 106
8231: PUSH
8232: LD_INT 116
8234: PUSH
8235: LD_INT 117
8237: PUSH
8238: LD_INT 118
8240: PUSH
8241: EMPTY
8242: LIST
8243: LIST
8244: LIST
8245: LIST
8246: LIST
8247: LIST
8248: PUSH
8249: EMPTY
8250: LIST
8251: LIST
8252: ST_TO_ADDR
8253: GO 11328
8255: LD_INT 2
8257: DOUBLE
8258: EQUAL
8259: IFTRUE 8263
8261: GO 8347
8263: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
8264: LD_ADDR_VAR 0 2
8268: PUSH
8269: LD_INT 2
8271: PUSH
8272: LD_INT 4
8274: PUSH
8275: LD_INT 11
8277: PUSH
8278: LD_INT 12
8280: PUSH
8281: LD_INT 15
8283: PUSH
8284: LD_INT 16
8286: PUSH
8287: LD_INT 22
8289: PUSH
8290: LD_INT 23
8292: PUSH
8293: LD_INT 26
8295: PUSH
8296: EMPTY
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: PUSH
8307: LD_INT 101
8309: PUSH
8310: LD_INT 102
8312: PUSH
8313: LD_INT 105
8315: PUSH
8316: LD_INT 106
8318: PUSH
8319: LD_INT 108
8321: PUSH
8322: LD_INT 116
8324: PUSH
8325: LD_INT 117
8327: PUSH
8328: LD_INT 118
8330: PUSH
8331: EMPTY
8332: LIST
8333: LIST
8334: LIST
8335: LIST
8336: LIST
8337: LIST
8338: LIST
8339: LIST
8340: PUSH
8341: EMPTY
8342: LIST
8343: LIST
8344: ST_TO_ADDR
8345: GO 11328
8347: LD_INT 3
8349: DOUBLE
8350: EQUAL
8351: IFTRUE 8355
8353: GO 8443
8355: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
8356: LD_ADDR_VAR 0 2
8360: PUSH
8361: LD_INT 2
8363: PUSH
8364: LD_INT 4
8366: PUSH
8367: LD_INT 5
8369: PUSH
8370: LD_INT 11
8372: PUSH
8373: LD_INT 12
8375: PUSH
8376: LD_INT 15
8378: PUSH
8379: LD_INT 16
8381: PUSH
8382: LD_INT 22
8384: PUSH
8385: LD_INT 26
8387: PUSH
8388: LD_INT 36
8390: PUSH
8391: EMPTY
8392: LIST
8393: LIST
8394: LIST
8395: LIST
8396: LIST
8397: LIST
8398: LIST
8399: LIST
8400: LIST
8401: LIST
8402: PUSH
8403: LD_INT 101
8405: PUSH
8406: LD_INT 102
8408: PUSH
8409: LD_INT 105
8411: PUSH
8412: LD_INT 106
8414: PUSH
8415: LD_INT 108
8417: PUSH
8418: LD_INT 116
8420: PUSH
8421: LD_INT 117
8423: PUSH
8424: LD_INT 118
8426: PUSH
8427: EMPTY
8428: LIST
8429: LIST
8430: LIST
8431: LIST
8432: LIST
8433: LIST
8434: LIST
8435: LIST
8436: PUSH
8437: EMPTY
8438: LIST
8439: LIST
8440: ST_TO_ADDR
8441: GO 11328
8443: LD_INT 4
8445: DOUBLE
8446: EQUAL
8447: IFTRUE 8451
8449: GO 8547
8451: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
8452: LD_ADDR_VAR 0 2
8456: PUSH
8457: LD_INT 2
8459: PUSH
8460: LD_INT 4
8462: PUSH
8463: LD_INT 5
8465: PUSH
8466: LD_INT 8
8468: PUSH
8469: LD_INT 11
8471: PUSH
8472: LD_INT 12
8474: PUSH
8475: LD_INT 15
8477: PUSH
8478: LD_INT 16
8480: PUSH
8481: LD_INT 22
8483: PUSH
8484: LD_INT 23
8486: PUSH
8487: LD_INT 26
8489: PUSH
8490: LD_INT 36
8492: PUSH
8493: EMPTY
8494: LIST
8495: LIST
8496: LIST
8497: LIST
8498: LIST
8499: LIST
8500: LIST
8501: LIST
8502: LIST
8503: LIST
8504: LIST
8505: LIST
8506: PUSH
8507: LD_INT 101
8509: PUSH
8510: LD_INT 102
8512: PUSH
8513: LD_INT 105
8515: PUSH
8516: LD_INT 106
8518: PUSH
8519: LD_INT 108
8521: PUSH
8522: LD_INT 116
8524: PUSH
8525: LD_INT 117
8527: PUSH
8528: LD_INT 118
8530: PUSH
8531: EMPTY
8532: LIST
8533: LIST
8534: LIST
8535: LIST
8536: LIST
8537: LIST
8538: LIST
8539: LIST
8540: PUSH
8541: EMPTY
8542: LIST
8543: LIST
8544: ST_TO_ADDR
8545: GO 11328
8547: LD_INT 5
8549: DOUBLE
8550: EQUAL
8551: IFTRUE 8555
8553: GO 8667
8555: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
8556: LD_ADDR_VAR 0 2
8560: PUSH
8561: LD_INT 2
8563: PUSH
8564: LD_INT 4
8566: PUSH
8567: LD_INT 5
8569: PUSH
8570: LD_INT 6
8572: PUSH
8573: LD_INT 8
8575: PUSH
8576: LD_INT 11
8578: PUSH
8579: LD_INT 12
8581: PUSH
8582: LD_INT 15
8584: PUSH
8585: LD_INT 16
8587: PUSH
8588: LD_INT 22
8590: PUSH
8591: LD_INT 23
8593: PUSH
8594: LD_INT 25
8596: PUSH
8597: LD_INT 26
8599: PUSH
8600: LD_INT 36
8602: PUSH
8603: EMPTY
8604: LIST
8605: LIST
8606: LIST
8607: LIST
8608: LIST
8609: LIST
8610: LIST
8611: LIST
8612: LIST
8613: LIST
8614: LIST
8615: LIST
8616: LIST
8617: LIST
8618: PUSH
8619: LD_INT 101
8621: PUSH
8622: LD_INT 102
8624: PUSH
8625: LD_INT 105
8627: PUSH
8628: LD_INT 106
8630: PUSH
8631: LD_INT 108
8633: PUSH
8634: LD_INT 109
8636: PUSH
8637: LD_INT 112
8639: PUSH
8640: LD_INT 116
8642: PUSH
8643: LD_INT 117
8645: PUSH
8646: LD_INT 118
8648: PUSH
8649: EMPTY
8650: LIST
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: LIST
8656: LIST
8657: LIST
8658: LIST
8659: LIST
8660: PUSH
8661: EMPTY
8662: LIST
8663: LIST
8664: ST_TO_ADDR
8665: GO 11328
8667: LD_INT 6
8669: DOUBLE
8670: EQUAL
8671: IFTRUE 8675
8673: GO 8807
8675: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
8676: LD_ADDR_VAR 0 2
8680: PUSH
8681: LD_INT 2
8683: PUSH
8684: LD_INT 4
8686: PUSH
8687: LD_INT 5
8689: PUSH
8690: LD_INT 6
8692: PUSH
8693: LD_INT 8
8695: PUSH
8696: LD_INT 11
8698: PUSH
8699: LD_INT 12
8701: PUSH
8702: LD_INT 15
8704: PUSH
8705: LD_INT 16
8707: PUSH
8708: LD_INT 20
8710: PUSH
8711: LD_INT 21
8713: PUSH
8714: LD_INT 22
8716: PUSH
8717: LD_INT 23
8719: PUSH
8720: LD_INT 25
8722: PUSH
8723: LD_INT 26
8725: PUSH
8726: LD_INT 30
8728: PUSH
8729: LD_INT 31
8731: PUSH
8732: LD_INT 32
8734: PUSH
8735: LD_INT 36
8737: PUSH
8738: EMPTY
8739: LIST
8740: LIST
8741: LIST
8742: LIST
8743: LIST
8744: LIST
8745: LIST
8746: LIST
8747: LIST
8748: LIST
8749: LIST
8750: LIST
8751: LIST
8752: LIST
8753: LIST
8754: LIST
8755: LIST
8756: LIST
8757: LIST
8758: PUSH
8759: LD_INT 101
8761: PUSH
8762: LD_INT 102
8764: PUSH
8765: LD_INT 105
8767: PUSH
8768: LD_INT 106
8770: PUSH
8771: LD_INT 108
8773: PUSH
8774: LD_INT 109
8776: PUSH
8777: LD_INT 112
8779: PUSH
8780: LD_INT 116
8782: PUSH
8783: LD_INT 117
8785: PUSH
8786: LD_INT 118
8788: PUSH
8789: EMPTY
8790: LIST
8791: LIST
8792: LIST
8793: LIST
8794: LIST
8795: LIST
8796: LIST
8797: LIST
8798: LIST
8799: LIST
8800: PUSH
8801: EMPTY
8802: LIST
8803: LIST
8804: ST_TO_ADDR
8805: GO 11328
8807: LD_INT 7
8809: DOUBLE
8810: EQUAL
8811: IFTRUE 8815
8813: GO 8927
8815: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
8816: LD_ADDR_VAR 0 2
8820: PUSH
8821: LD_INT 2
8823: PUSH
8824: LD_INT 4
8826: PUSH
8827: LD_INT 5
8829: PUSH
8830: LD_INT 7
8832: PUSH
8833: LD_INT 11
8835: PUSH
8836: LD_INT 12
8838: PUSH
8839: LD_INT 15
8841: PUSH
8842: LD_INT 16
8844: PUSH
8845: LD_INT 20
8847: PUSH
8848: LD_INT 21
8850: PUSH
8851: LD_INT 22
8853: PUSH
8854: LD_INT 23
8856: PUSH
8857: LD_INT 25
8859: PUSH
8860: LD_INT 26
8862: PUSH
8863: EMPTY
8864: LIST
8865: LIST
8866: LIST
8867: LIST
8868: LIST
8869: LIST
8870: LIST
8871: LIST
8872: LIST
8873: LIST
8874: LIST
8875: LIST
8876: LIST
8877: LIST
8878: PUSH
8879: LD_INT 101
8881: PUSH
8882: LD_INT 102
8884: PUSH
8885: LD_INT 103
8887: PUSH
8888: LD_INT 105
8890: PUSH
8891: LD_INT 106
8893: PUSH
8894: LD_INT 108
8896: PUSH
8897: LD_INT 112
8899: PUSH
8900: LD_INT 116
8902: PUSH
8903: LD_INT 117
8905: PUSH
8906: LD_INT 118
8908: PUSH
8909: EMPTY
8910: LIST
8911: LIST
8912: LIST
8913: LIST
8914: LIST
8915: LIST
8916: LIST
8917: LIST
8918: LIST
8919: LIST
8920: PUSH
8921: EMPTY
8922: LIST
8923: LIST
8924: ST_TO_ADDR
8925: GO 11328
8927: LD_INT 8
8929: DOUBLE
8930: EQUAL
8931: IFTRUE 8935
8933: GO 9075
8935: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
8936: LD_ADDR_VAR 0 2
8940: PUSH
8941: LD_INT 2
8943: PUSH
8944: LD_INT 4
8946: PUSH
8947: LD_INT 5
8949: PUSH
8950: LD_INT 6
8952: PUSH
8953: LD_INT 7
8955: PUSH
8956: LD_INT 8
8958: PUSH
8959: LD_INT 11
8961: PUSH
8962: LD_INT 12
8964: PUSH
8965: LD_INT 15
8967: PUSH
8968: LD_INT 16
8970: PUSH
8971: LD_INT 20
8973: PUSH
8974: LD_INT 21
8976: PUSH
8977: LD_INT 22
8979: PUSH
8980: LD_INT 23
8982: PUSH
8983: LD_INT 25
8985: PUSH
8986: LD_INT 26
8988: PUSH
8989: LD_INT 30
8991: PUSH
8992: LD_INT 31
8994: PUSH
8995: LD_INT 32
8997: PUSH
8998: LD_INT 36
9000: PUSH
9001: EMPTY
9002: LIST
9003: LIST
9004: LIST
9005: LIST
9006: LIST
9007: LIST
9008: LIST
9009: LIST
9010: LIST
9011: LIST
9012: LIST
9013: LIST
9014: LIST
9015: LIST
9016: LIST
9017: LIST
9018: LIST
9019: LIST
9020: LIST
9021: LIST
9022: PUSH
9023: LD_INT 101
9025: PUSH
9026: LD_INT 102
9028: PUSH
9029: LD_INT 103
9031: PUSH
9032: LD_INT 105
9034: PUSH
9035: LD_INT 106
9037: PUSH
9038: LD_INT 108
9040: PUSH
9041: LD_INT 109
9043: PUSH
9044: LD_INT 112
9046: PUSH
9047: LD_INT 116
9049: PUSH
9050: LD_INT 117
9052: PUSH
9053: LD_INT 118
9055: PUSH
9056: EMPTY
9057: LIST
9058: LIST
9059: LIST
9060: LIST
9061: LIST
9062: LIST
9063: LIST
9064: LIST
9065: LIST
9066: LIST
9067: LIST
9068: PUSH
9069: EMPTY
9070: LIST
9071: LIST
9072: ST_TO_ADDR
9073: GO 11328
9075: LD_INT 9
9077: DOUBLE
9078: EQUAL
9079: IFTRUE 9083
9081: GO 9231
9083: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
9084: LD_ADDR_VAR 0 2
9088: PUSH
9089: LD_INT 2
9091: PUSH
9092: LD_INT 4
9094: PUSH
9095: LD_INT 5
9097: PUSH
9098: LD_INT 6
9100: PUSH
9101: LD_INT 7
9103: PUSH
9104: LD_INT 8
9106: PUSH
9107: LD_INT 11
9109: PUSH
9110: LD_INT 12
9112: PUSH
9113: LD_INT 15
9115: PUSH
9116: LD_INT 16
9118: PUSH
9119: LD_INT 20
9121: PUSH
9122: LD_INT 21
9124: PUSH
9125: LD_INT 22
9127: PUSH
9128: LD_INT 23
9130: PUSH
9131: LD_INT 25
9133: PUSH
9134: LD_INT 26
9136: PUSH
9137: LD_INT 28
9139: PUSH
9140: LD_INT 30
9142: PUSH
9143: LD_INT 31
9145: PUSH
9146: LD_INT 32
9148: PUSH
9149: LD_INT 36
9151: PUSH
9152: EMPTY
9153: LIST
9154: LIST
9155: LIST
9156: LIST
9157: LIST
9158: LIST
9159: LIST
9160: LIST
9161: LIST
9162: LIST
9163: LIST
9164: LIST
9165: LIST
9166: LIST
9167: LIST
9168: LIST
9169: LIST
9170: LIST
9171: LIST
9172: LIST
9173: LIST
9174: PUSH
9175: LD_INT 101
9177: PUSH
9178: LD_INT 102
9180: PUSH
9181: LD_INT 103
9183: PUSH
9184: LD_INT 105
9186: PUSH
9187: LD_INT 106
9189: PUSH
9190: LD_INT 108
9192: PUSH
9193: LD_INT 109
9195: PUSH
9196: LD_INT 112
9198: PUSH
9199: LD_INT 114
9201: PUSH
9202: LD_INT 116
9204: PUSH
9205: LD_INT 117
9207: PUSH
9208: LD_INT 118
9210: PUSH
9211: EMPTY
9212: LIST
9213: LIST
9214: LIST
9215: LIST
9216: LIST
9217: LIST
9218: LIST
9219: LIST
9220: LIST
9221: LIST
9222: LIST
9223: LIST
9224: PUSH
9225: EMPTY
9226: LIST
9227: LIST
9228: ST_TO_ADDR
9229: GO 11328
9231: LD_INT 10
9233: DOUBLE
9234: EQUAL
9235: IFTRUE 9239
9237: GO 9435
9239: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
9240: LD_ADDR_VAR 0 2
9244: PUSH
9245: LD_INT 2
9247: PUSH
9248: LD_INT 4
9250: PUSH
9251: LD_INT 5
9253: PUSH
9254: LD_INT 6
9256: PUSH
9257: LD_INT 7
9259: PUSH
9260: LD_INT 8
9262: PUSH
9263: LD_INT 9
9265: PUSH
9266: LD_INT 10
9268: PUSH
9269: LD_INT 11
9271: PUSH
9272: LD_INT 12
9274: PUSH
9275: LD_INT 13
9277: PUSH
9278: LD_INT 14
9280: PUSH
9281: LD_INT 15
9283: PUSH
9284: LD_INT 16
9286: PUSH
9287: LD_INT 17
9289: PUSH
9290: LD_INT 18
9292: PUSH
9293: LD_INT 19
9295: PUSH
9296: LD_INT 20
9298: PUSH
9299: LD_INT 21
9301: PUSH
9302: LD_INT 22
9304: PUSH
9305: LD_INT 23
9307: PUSH
9308: LD_INT 24
9310: PUSH
9311: LD_INT 25
9313: PUSH
9314: LD_INT 26
9316: PUSH
9317: LD_INT 28
9319: PUSH
9320: LD_INT 30
9322: PUSH
9323: LD_INT 31
9325: PUSH
9326: LD_INT 32
9328: PUSH
9329: LD_INT 36
9331: PUSH
9332: EMPTY
9333: LIST
9334: LIST
9335: LIST
9336: LIST
9337: LIST
9338: LIST
9339: LIST
9340: LIST
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: PUSH
9363: LD_INT 101
9365: PUSH
9366: LD_INT 102
9368: PUSH
9369: LD_INT 103
9371: PUSH
9372: LD_INT 104
9374: PUSH
9375: LD_INT 105
9377: PUSH
9378: LD_INT 106
9380: PUSH
9381: LD_INT 107
9383: PUSH
9384: LD_INT 108
9386: PUSH
9387: LD_INT 109
9389: PUSH
9390: LD_INT 110
9392: PUSH
9393: LD_INT 111
9395: PUSH
9396: LD_INT 112
9398: PUSH
9399: LD_INT 114
9401: PUSH
9402: LD_INT 116
9404: PUSH
9405: LD_INT 117
9407: PUSH
9408: LD_INT 118
9410: PUSH
9411: EMPTY
9412: LIST
9413: LIST
9414: LIST
9415: LIST
9416: LIST
9417: LIST
9418: LIST
9419: LIST
9420: LIST
9421: LIST
9422: LIST
9423: LIST
9424: LIST
9425: LIST
9426: LIST
9427: LIST
9428: PUSH
9429: EMPTY
9430: LIST
9431: LIST
9432: ST_TO_ADDR
9433: GO 11328
9435: LD_INT 11
9437: DOUBLE
9438: EQUAL
9439: IFTRUE 9443
9441: GO 9647
9443: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
9444: LD_ADDR_VAR 0 2
9448: PUSH
9449: LD_INT 2
9451: PUSH
9452: LD_INT 3
9454: PUSH
9455: LD_INT 4
9457: PUSH
9458: LD_INT 5
9460: PUSH
9461: LD_INT 6
9463: PUSH
9464: LD_INT 7
9466: PUSH
9467: LD_INT 8
9469: PUSH
9470: LD_INT 9
9472: PUSH
9473: LD_INT 10
9475: PUSH
9476: LD_INT 11
9478: PUSH
9479: LD_INT 12
9481: PUSH
9482: LD_INT 13
9484: PUSH
9485: LD_INT 14
9487: PUSH
9488: LD_INT 15
9490: PUSH
9491: LD_INT 16
9493: PUSH
9494: LD_INT 17
9496: PUSH
9497: LD_INT 18
9499: PUSH
9500: LD_INT 19
9502: PUSH
9503: LD_INT 20
9505: PUSH
9506: LD_INT 21
9508: PUSH
9509: LD_INT 22
9511: PUSH
9512: LD_INT 23
9514: PUSH
9515: LD_INT 24
9517: PUSH
9518: LD_INT 25
9520: PUSH
9521: LD_INT 26
9523: PUSH
9524: LD_INT 28
9526: PUSH
9527: LD_INT 30
9529: PUSH
9530: LD_INT 31
9532: PUSH
9533: LD_INT 32
9535: PUSH
9536: LD_INT 34
9538: PUSH
9539: LD_INT 36
9541: PUSH
9542: EMPTY
9543: LIST
9544: LIST
9545: LIST
9546: LIST
9547: LIST
9548: LIST
9549: LIST
9550: LIST
9551: LIST
9552: LIST
9553: LIST
9554: LIST
9555: LIST
9556: LIST
9557: LIST
9558: LIST
9559: LIST
9560: LIST
9561: LIST
9562: LIST
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: LIST
9569: LIST
9570: LIST
9571: LIST
9572: LIST
9573: LIST
9574: PUSH
9575: LD_INT 101
9577: PUSH
9578: LD_INT 102
9580: PUSH
9581: LD_INT 103
9583: PUSH
9584: LD_INT 104
9586: PUSH
9587: LD_INT 105
9589: PUSH
9590: LD_INT 106
9592: PUSH
9593: LD_INT 107
9595: PUSH
9596: LD_INT 108
9598: PUSH
9599: LD_INT 109
9601: PUSH
9602: LD_INT 110
9604: PUSH
9605: LD_INT 111
9607: PUSH
9608: LD_INT 112
9610: PUSH
9611: LD_INT 114
9613: PUSH
9614: LD_INT 116
9616: PUSH
9617: LD_INT 117
9619: PUSH
9620: LD_INT 118
9622: PUSH
9623: EMPTY
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: LIST
9631: LIST
9632: LIST
9633: LIST
9634: LIST
9635: LIST
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: PUSH
9641: EMPTY
9642: LIST
9643: LIST
9644: ST_TO_ADDR
9645: GO 11328
9647: LD_INT 12
9649: DOUBLE
9650: EQUAL
9651: IFTRUE 9655
9653: GO 9875
9655: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
9656: LD_ADDR_VAR 0 2
9660: PUSH
9661: LD_INT 1
9663: PUSH
9664: LD_INT 2
9666: PUSH
9667: LD_INT 3
9669: PUSH
9670: LD_INT 4
9672: PUSH
9673: LD_INT 5
9675: PUSH
9676: LD_INT 6
9678: PUSH
9679: LD_INT 7
9681: PUSH
9682: LD_INT 8
9684: PUSH
9685: LD_INT 9
9687: PUSH
9688: LD_INT 10
9690: PUSH
9691: LD_INT 11
9693: PUSH
9694: LD_INT 12
9696: PUSH
9697: LD_INT 13
9699: PUSH
9700: LD_INT 14
9702: PUSH
9703: LD_INT 15
9705: PUSH
9706: LD_INT 16
9708: PUSH
9709: LD_INT 17
9711: PUSH
9712: LD_INT 18
9714: PUSH
9715: LD_INT 19
9717: PUSH
9718: LD_INT 20
9720: PUSH
9721: LD_INT 21
9723: PUSH
9724: LD_INT 22
9726: PUSH
9727: LD_INT 23
9729: PUSH
9730: LD_INT 24
9732: PUSH
9733: LD_INT 25
9735: PUSH
9736: LD_INT 26
9738: PUSH
9739: LD_INT 27
9741: PUSH
9742: LD_INT 28
9744: PUSH
9745: LD_INT 30
9747: PUSH
9748: LD_INT 31
9750: PUSH
9751: LD_INT 32
9753: PUSH
9754: LD_INT 33
9756: PUSH
9757: LD_INT 34
9759: PUSH
9760: LD_INT 36
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: LIST
9782: LIST
9783: LIST
9784: LIST
9785: LIST
9786: LIST
9787: LIST
9788: LIST
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: LIST
9795: LIST
9796: LIST
9797: LIST
9798: PUSH
9799: LD_INT 101
9801: PUSH
9802: LD_INT 102
9804: PUSH
9805: LD_INT 103
9807: PUSH
9808: LD_INT 104
9810: PUSH
9811: LD_INT 105
9813: PUSH
9814: LD_INT 106
9816: PUSH
9817: LD_INT 107
9819: PUSH
9820: LD_INT 108
9822: PUSH
9823: LD_INT 109
9825: PUSH
9826: LD_INT 110
9828: PUSH
9829: LD_INT 111
9831: PUSH
9832: LD_INT 112
9834: PUSH
9835: LD_INT 113
9837: PUSH
9838: LD_INT 114
9840: PUSH
9841: LD_INT 116
9843: PUSH
9844: LD_INT 117
9846: PUSH
9847: LD_INT 118
9849: PUSH
9850: EMPTY
9851: LIST
9852: LIST
9853: LIST
9854: LIST
9855: LIST
9856: LIST
9857: LIST
9858: LIST
9859: LIST
9860: LIST
9861: LIST
9862: LIST
9863: LIST
9864: LIST
9865: LIST
9866: LIST
9867: LIST
9868: PUSH
9869: EMPTY
9870: LIST
9871: LIST
9872: ST_TO_ADDR
9873: GO 11328
9875: LD_INT 13
9877: DOUBLE
9878: EQUAL
9879: IFTRUE 9883
9881: GO 10091
9883: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
9884: LD_ADDR_VAR 0 2
9888: PUSH
9889: LD_INT 1
9891: PUSH
9892: LD_INT 2
9894: PUSH
9895: LD_INT 3
9897: PUSH
9898: LD_INT 4
9900: PUSH
9901: LD_INT 5
9903: PUSH
9904: LD_INT 8
9906: PUSH
9907: LD_INT 9
9909: PUSH
9910: LD_INT 10
9912: PUSH
9913: LD_INT 11
9915: PUSH
9916: LD_INT 12
9918: PUSH
9919: LD_INT 14
9921: PUSH
9922: LD_INT 15
9924: PUSH
9925: LD_INT 16
9927: PUSH
9928: LD_INT 17
9930: PUSH
9931: LD_INT 18
9933: PUSH
9934: LD_INT 19
9936: PUSH
9937: LD_INT 20
9939: PUSH
9940: LD_INT 21
9942: PUSH
9943: LD_INT 22
9945: PUSH
9946: LD_INT 23
9948: PUSH
9949: LD_INT 24
9951: PUSH
9952: LD_INT 25
9954: PUSH
9955: LD_INT 26
9957: PUSH
9958: LD_INT 27
9960: PUSH
9961: LD_INT 28
9963: PUSH
9964: LD_INT 30
9966: PUSH
9967: LD_INT 31
9969: PUSH
9970: LD_INT 32
9972: PUSH
9973: LD_INT 33
9975: PUSH
9976: LD_INT 34
9978: PUSH
9979: LD_INT 36
9981: PUSH
9982: EMPTY
9983: LIST
9984: LIST
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: LIST
9992: LIST
9993: LIST
9994: LIST
9995: LIST
9996: LIST
9997: LIST
9998: LIST
9999: LIST
10000: LIST
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: PUSH
10015: LD_INT 101
10017: PUSH
10018: LD_INT 102
10020: PUSH
10021: LD_INT 103
10023: PUSH
10024: LD_INT 104
10026: PUSH
10027: LD_INT 105
10029: PUSH
10030: LD_INT 106
10032: PUSH
10033: LD_INT 107
10035: PUSH
10036: LD_INT 108
10038: PUSH
10039: LD_INT 109
10041: PUSH
10042: LD_INT 110
10044: PUSH
10045: LD_INT 111
10047: PUSH
10048: LD_INT 112
10050: PUSH
10051: LD_INT 113
10053: PUSH
10054: LD_INT 114
10056: PUSH
10057: LD_INT 116
10059: PUSH
10060: LD_INT 117
10062: PUSH
10063: LD_INT 118
10065: PUSH
10066: EMPTY
10067: LIST
10068: LIST
10069: LIST
10070: LIST
10071: LIST
10072: LIST
10073: LIST
10074: LIST
10075: LIST
10076: LIST
10077: LIST
10078: LIST
10079: LIST
10080: LIST
10081: LIST
10082: LIST
10083: LIST
10084: PUSH
10085: EMPTY
10086: LIST
10087: LIST
10088: ST_TO_ADDR
10089: GO 11328
10091: LD_INT 14
10093: DOUBLE
10094: EQUAL
10095: IFTRUE 10099
10097: GO 10323
10099: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
10100: LD_ADDR_VAR 0 2
10104: PUSH
10105: LD_INT 1
10107: PUSH
10108: LD_INT 2
10110: PUSH
10111: LD_INT 3
10113: PUSH
10114: LD_INT 4
10116: PUSH
10117: LD_INT 5
10119: PUSH
10120: LD_INT 6
10122: PUSH
10123: LD_INT 7
10125: PUSH
10126: LD_INT 8
10128: PUSH
10129: LD_INT 9
10131: PUSH
10132: LD_INT 10
10134: PUSH
10135: LD_INT 11
10137: PUSH
10138: LD_INT 12
10140: PUSH
10141: LD_INT 13
10143: PUSH
10144: LD_INT 14
10146: PUSH
10147: LD_INT 15
10149: PUSH
10150: LD_INT 16
10152: PUSH
10153: LD_INT 17
10155: PUSH
10156: LD_INT 18
10158: PUSH
10159: LD_INT 19
10161: PUSH
10162: LD_INT 20
10164: PUSH
10165: LD_INT 21
10167: PUSH
10168: LD_INT 22
10170: PUSH
10171: LD_INT 23
10173: PUSH
10174: LD_INT 24
10176: PUSH
10177: LD_INT 25
10179: PUSH
10180: LD_INT 26
10182: PUSH
10183: LD_INT 27
10185: PUSH
10186: LD_INT 28
10188: PUSH
10189: LD_INT 29
10191: PUSH
10192: LD_INT 30
10194: PUSH
10195: LD_INT 31
10197: PUSH
10198: LD_INT 32
10200: PUSH
10201: LD_INT 33
10203: PUSH
10204: LD_INT 34
10206: PUSH
10207: LD_INT 36
10209: PUSH
10210: EMPTY
10211: LIST
10212: LIST
10213: LIST
10214: LIST
10215: LIST
10216: LIST
10217: LIST
10218: LIST
10219: LIST
10220: LIST
10221: LIST
10222: LIST
10223: LIST
10224: LIST
10225: LIST
10226: LIST
10227: LIST
10228: LIST
10229: LIST
10230: LIST
10231: LIST
10232: LIST
10233: LIST
10234: LIST
10235: LIST
10236: LIST
10237: LIST
10238: LIST
10239: LIST
10240: LIST
10241: LIST
10242: LIST
10243: LIST
10244: LIST
10245: LIST
10246: PUSH
10247: LD_INT 101
10249: PUSH
10250: LD_INT 102
10252: PUSH
10253: LD_INT 103
10255: PUSH
10256: LD_INT 104
10258: PUSH
10259: LD_INT 105
10261: PUSH
10262: LD_INT 106
10264: PUSH
10265: LD_INT 107
10267: PUSH
10268: LD_INT 108
10270: PUSH
10271: LD_INT 109
10273: PUSH
10274: LD_INT 110
10276: PUSH
10277: LD_INT 111
10279: PUSH
10280: LD_INT 112
10282: PUSH
10283: LD_INT 113
10285: PUSH
10286: LD_INT 114
10288: PUSH
10289: LD_INT 116
10291: PUSH
10292: LD_INT 117
10294: PUSH
10295: LD_INT 118
10297: PUSH
10298: EMPTY
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: LIST
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: ST_TO_ADDR
10321: GO 11328
10323: LD_INT 15
10325: DOUBLE
10326: EQUAL
10327: IFTRUE 10331
10329: GO 10555
10331: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
10332: LD_ADDR_VAR 0 2
10336: PUSH
10337: LD_INT 1
10339: PUSH
10340: LD_INT 2
10342: PUSH
10343: LD_INT 3
10345: PUSH
10346: LD_INT 4
10348: PUSH
10349: LD_INT 5
10351: PUSH
10352: LD_INT 6
10354: PUSH
10355: LD_INT 7
10357: PUSH
10358: LD_INT 8
10360: PUSH
10361: LD_INT 9
10363: PUSH
10364: LD_INT 10
10366: PUSH
10367: LD_INT 11
10369: PUSH
10370: LD_INT 12
10372: PUSH
10373: LD_INT 13
10375: PUSH
10376: LD_INT 14
10378: PUSH
10379: LD_INT 15
10381: PUSH
10382: LD_INT 16
10384: PUSH
10385: LD_INT 17
10387: PUSH
10388: LD_INT 18
10390: PUSH
10391: LD_INT 19
10393: PUSH
10394: LD_INT 20
10396: PUSH
10397: LD_INT 21
10399: PUSH
10400: LD_INT 22
10402: PUSH
10403: LD_INT 23
10405: PUSH
10406: LD_INT 24
10408: PUSH
10409: LD_INT 25
10411: PUSH
10412: LD_INT 26
10414: PUSH
10415: LD_INT 27
10417: PUSH
10418: LD_INT 28
10420: PUSH
10421: LD_INT 29
10423: PUSH
10424: LD_INT 30
10426: PUSH
10427: LD_INT 31
10429: PUSH
10430: LD_INT 32
10432: PUSH
10433: LD_INT 33
10435: PUSH
10436: LD_INT 34
10438: PUSH
10439: LD_INT 36
10441: PUSH
10442: EMPTY
10443: LIST
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: LIST
10453: LIST
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: LIST
10459: LIST
10460: LIST
10461: LIST
10462: LIST
10463: LIST
10464: LIST
10465: LIST
10466: LIST
10467: LIST
10468: LIST
10469: LIST
10470: LIST
10471: LIST
10472: LIST
10473: LIST
10474: LIST
10475: LIST
10476: LIST
10477: LIST
10478: PUSH
10479: LD_INT 101
10481: PUSH
10482: LD_INT 102
10484: PUSH
10485: LD_INT 103
10487: PUSH
10488: LD_INT 104
10490: PUSH
10491: LD_INT 105
10493: PUSH
10494: LD_INT 106
10496: PUSH
10497: LD_INT 107
10499: PUSH
10500: LD_INT 108
10502: PUSH
10503: LD_INT 109
10505: PUSH
10506: LD_INT 110
10508: PUSH
10509: LD_INT 111
10511: PUSH
10512: LD_INT 112
10514: PUSH
10515: LD_INT 113
10517: PUSH
10518: LD_INT 114
10520: PUSH
10521: LD_INT 116
10523: PUSH
10524: LD_INT 117
10526: PUSH
10527: LD_INT 118
10529: PUSH
10530: EMPTY
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: LIST
10546: LIST
10547: LIST
10548: PUSH
10549: EMPTY
10550: LIST
10551: LIST
10552: ST_TO_ADDR
10553: GO 11328
10555: LD_INT 16
10557: DOUBLE
10558: EQUAL
10559: IFTRUE 10563
10561: GO 10699
10563: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
10564: LD_ADDR_VAR 0 2
10568: PUSH
10569: LD_INT 2
10571: PUSH
10572: LD_INT 4
10574: PUSH
10575: LD_INT 5
10577: PUSH
10578: LD_INT 7
10580: PUSH
10581: LD_INT 11
10583: PUSH
10584: LD_INT 12
10586: PUSH
10587: LD_INT 15
10589: PUSH
10590: LD_INT 16
10592: PUSH
10593: LD_INT 20
10595: PUSH
10596: LD_INT 21
10598: PUSH
10599: LD_INT 22
10601: PUSH
10602: LD_INT 23
10604: PUSH
10605: LD_INT 25
10607: PUSH
10608: LD_INT 26
10610: PUSH
10611: LD_INT 30
10613: PUSH
10614: LD_INT 31
10616: PUSH
10617: LD_INT 32
10619: PUSH
10620: LD_INT 33
10622: PUSH
10623: LD_INT 34
10625: PUSH
10626: EMPTY
10627: LIST
10628: LIST
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: PUSH
10647: LD_INT 101
10649: PUSH
10650: LD_INT 102
10652: PUSH
10653: LD_INT 103
10655: PUSH
10656: LD_INT 106
10658: PUSH
10659: LD_INT 108
10661: PUSH
10662: LD_INT 112
10664: PUSH
10665: LD_INT 113
10667: PUSH
10668: LD_INT 114
10670: PUSH
10671: LD_INT 116
10673: PUSH
10674: LD_INT 117
10676: PUSH
10677: LD_INT 118
10679: PUSH
10680: EMPTY
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: LIST
10687: LIST
10688: LIST
10689: LIST
10690: LIST
10691: LIST
10692: PUSH
10693: EMPTY
10694: LIST
10695: LIST
10696: ST_TO_ADDR
10697: GO 11328
10699: LD_INT 17
10701: DOUBLE
10702: EQUAL
10703: IFTRUE 10707
10705: GO 10931
10707: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
10708: LD_ADDR_VAR 0 2
10712: PUSH
10713: LD_INT 1
10715: PUSH
10716: LD_INT 2
10718: PUSH
10719: LD_INT 3
10721: PUSH
10722: LD_INT 4
10724: PUSH
10725: LD_INT 5
10727: PUSH
10728: LD_INT 6
10730: PUSH
10731: LD_INT 7
10733: PUSH
10734: LD_INT 8
10736: PUSH
10737: LD_INT 9
10739: PUSH
10740: LD_INT 10
10742: PUSH
10743: LD_INT 11
10745: PUSH
10746: LD_INT 12
10748: PUSH
10749: LD_INT 13
10751: PUSH
10752: LD_INT 14
10754: PUSH
10755: LD_INT 15
10757: PUSH
10758: LD_INT 16
10760: PUSH
10761: LD_INT 17
10763: PUSH
10764: LD_INT 18
10766: PUSH
10767: LD_INT 19
10769: PUSH
10770: LD_INT 20
10772: PUSH
10773: LD_INT 21
10775: PUSH
10776: LD_INT 22
10778: PUSH
10779: LD_INT 23
10781: PUSH
10782: LD_INT 24
10784: PUSH
10785: LD_INT 25
10787: PUSH
10788: LD_INT 26
10790: PUSH
10791: LD_INT 27
10793: PUSH
10794: LD_INT 28
10796: PUSH
10797: LD_INT 29
10799: PUSH
10800: LD_INT 30
10802: PUSH
10803: LD_INT 31
10805: PUSH
10806: LD_INT 32
10808: PUSH
10809: LD_INT 33
10811: PUSH
10812: LD_INT 34
10814: PUSH
10815: LD_INT 36
10817: PUSH
10818: EMPTY
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: PUSH
10855: LD_INT 101
10857: PUSH
10858: LD_INT 102
10860: PUSH
10861: LD_INT 103
10863: PUSH
10864: LD_INT 104
10866: PUSH
10867: LD_INT 105
10869: PUSH
10870: LD_INT 106
10872: PUSH
10873: LD_INT 107
10875: PUSH
10876: LD_INT 108
10878: PUSH
10879: LD_INT 109
10881: PUSH
10882: LD_INT 110
10884: PUSH
10885: LD_INT 111
10887: PUSH
10888: LD_INT 112
10890: PUSH
10891: LD_INT 113
10893: PUSH
10894: LD_INT 114
10896: PUSH
10897: LD_INT 116
10899: PUSH
10900: LD_INT 117
10902: PUSH
10903: LD_INT 118
10905: PUSH
10906: EMPTY
10907: LIST
10908: LIST
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: PUSH
10925: EMPTY
10926: LIST
10927: LIST
10928: ST_TO_ADDR
10929: GO 11328
10931: LD_INT 18
10933: DOUBLE
10934: EQUAL
10935: IFTRUE 10939
10937: GO 11087
10939: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
10940: LD_ADDR_VAR 0 2
10944: PUSH
10945: LD_INT 2
10947: PUSH
10948: LD_INT 4
10950: PUSH
10951: LD_INT 5
10953: PUSH
10954: LD_INT 7
10956: PUSH
10957: LD_INT 11
10959: PUSH
10960: LD_INT 12
10962: PUSH
10963: LD_INT 15
10965: PUSH
10966: LD_INT 16
10968: PUSH
10969: LD_INT 20
10971: PUSH
10972: LD_INT 21
10974: PUSH
10975: LD_INT 22
10977: PUSH
10978: LD_INT 23
10980: PUSH
10981: LD_INT 25
10983: PUSH
10984: LD_INT 26
10986: PUSH
10987: LD_INT 30
10989: PUSH
10990: LD_INT 31
10992: PUSH
10993: LD_INT 32
10995: PUSH
10996: LD_INT 33
10998: PUSH
10999: LD_INT 34
11001: PUSH
11002: LD_INT 35
11004: PUSH
11005: LD_INT 36
11007: PUSH
11008: EMPTY
11009: LIST
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: LIST
11030: PUSH
11031: LD_INT 101
11033: PUSH
11034: LD_INT 102
11036: PUSH
11037: LD_INT 103
11039: PUSH
11040: LD_INT 106
11042: PUSH
11043: LD_INT 108
11045: PUSH
11046: LD_INT 112
11048: PUSH
11049: LD_INT 113
11051: PUSH
11052: LD_INT 114
11054: PUSH
11055: LD_INT 115
11057: PUSH
11058: LD_INT 116
11060: PUSH
11061: LD_INT 117
11063: PUSH
11064: LD_INT 118
11066: PUSH
11067: EMPTY
11068: LIST
11069: LIST
11070: LIST
11071: LIST
11072: LIST
11073: LIST
11074: LIST
11075: LIST
11076: LIST
11077: LIST
11078: LIST
11079: LIST
11080: PUSH
11081: EMPTY
11082: LIST
11083: LIST
11084: ST_TO_ADDR
11085: GO 11328
11087: LD_INT 19
11089: DOUBLE
11090: EQUAL
11091: IFTRUE 11095
11093: GO 11327
11095: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
11096: LD_ADDR_VAR 0 2
11100: PUSH
11101: LD_INT 1
11103: PUSH
11104: LD_INT 2
11106: PUSH
11107: LD_INT 3
11109: PUSH
11110: LD_INT 4
11112: PUSH
11113: LD_INT 5
11115: PUSH
11116: LD_INT 6
11118: PUSH
11119: LD_INT 7
11121: PUSH
11122: LD_INT 8
11124: PUSH
11125: LD_INT 9
11127: PUSH
11128: LD_INT 10
11130: PUSH
11131: LD_INT 11
11133: PUSH
11134: LD_INT 12
11136: PUSH
11137: LD_INT 13
11139: PUSH
11140: LD_INT 14
11142: PUSH
11143: LD_INT 15
11145: PUSH
11146: LD_INT 16
11148: PUSH
11149: LD_INT 17
11151: PUSH
11152: LD_INT 18
11154: PUSH
11155: LD_INT 19
11157: PUSH
11158: LD_INT 20
11160: PUSH
11161: LD_INT 21
11163: PUSH
11164: LD_INT 22
11166: PUSH
11167: LD_INT 23
11169: PUSH
11170: LD_INT 24
11172: PUSH
11173: LD_INT 25
11175: PUSH
11176: LD_INT 26
11178: PUSH
11179: LD_INT 27
11181: PUSH
11182: LD_INT 28
11184: PUSH
11185: LD_INT 29
11187: PUSH
11188: LD_INT 30
11190: PUSH
11191: LD_INT 31
11193: PUSH
11194: LD_INT 32
11196: PUSH
11197: LD_INT 33
11199: PUSH
11200: LD_INT 34
11202: PUSH
11203: LD_INT 35
11205: PUSH
11206: LD_INT 36
11208: PUSH
11209: EMPTY
11210: LIST
11211: LIST
11212: LIST
11213: LIST
11214: LIST
11215: LIST
11216: LIST
11217: LIST
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: LIST
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: LIST
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: LIST
11241: LIST
11242: LIST
11243: LIST
11244: LIST
11245: LIST
11246: PUSH
11247: LD_INT 101
11249: PUSH
11250: LD_INT 102
11252: PUSH
11253: LD_INT 103
11255: PUSH
11256: LD_INT 104
11258: PUSH
11259: LD_INT 105
11261: PUSH
11262: LD_INT 106
11264: PUSH
11265: LD_INT 107
11267: PUSH
11268: LD_INT 108
11270: PUSH
11271: LD_INT 109
11273: PUSH
11274: LD_INT 110
11276: PUSH
11277: LD_INT 111
11279: PUSH
11280: LD_INT 112
11282: PUSH
11283: LD_INT 113
11285: PUSH
11286: LD_INT 114
11288: PUSH
11289: LD_INT 115
11291: PUSH
11292: LD_INT 116
11294: PUSH
11295: LD_INT 117
11297: PUSH
11298: LD_INT 118
11300: PUSH
11301: EMPTY
11302: LIST
11303: LIST
11304: LIST
11305: LIST
11306: LIST
11307: LIST
11308: LIST
11309: LIST
11310: LIST
11311: LIST
11312: LIST
11313: LIST
11314: LIST
11315: LIST
11316: LIST
11317: LIST
11318: LIST
11319: LIST
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: ST_TO_ADDR
11325: GO 11328
11327: POP
// end else
11328: GO 11559
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
11330: LD_ADDR_VAR 0 2
11334: PUSH
11335: LD_INT 1
11337: PUSH
11338: LD_INT 2
11340: PUSH
11341: LD_INT 3
11343: PUSH
11344: LD_INT 4
11346: PUSH
11347: LD_INT 5
11349: PUSH
11350: LD_INT 6
11352: PUSH
11353: LD_INT 7
11355: PUSH
11356: LD_INT 8
11358: PUSH
11359: LD_INT 9
11361: PUSH
11362: LD_INT 10
11364: PUSH
11365: LD_INT 11
11367: PUSH
11368: LD_INT 12
11370: PUSH
11371: LD_INT 13
11373: PUSH
11374: LD_INT 14
11376: PUSH
11377: LD_INT 15
11379: PUSH
11380: LD_INT 16
11382: PUSH
11383: LD_INT 17
11385: PUSH
11386: LD_INT 18
11388: PUSH
11389: LD_INT 19
11391: PUSH
11392: LD_INT 20
11394: PUSH
11395: LD_INT 21
11397: PUSH
11398: LD_INT 22
11400: PUSH
11401: LD_INT 23
11403: PUSH
11404: LD_INT 24
11406: PUSH
11407: LD_INT 25
11409: PUSH
11410: LD_INT 26
11412: PUSH
11413: LD_INT 27
11415: PUSH
11416: LD_INT 28
11418: PUSH
11419: LD_INT 29
11421: PUSH
11422: LD_INT 30
11424: PUSH
11425: LD_INT 31
11427: PUSH
11428: LD_INT 32
11430: PUSH
11431: LD_INT 33
11433: PUSH
11434: LD_INT 34
11436: PUSH
11437: LD_INT 35
11439: PUSH
11440: LD_INT 36
11442: PUSH
11443: EMPTY
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: PUSH
11481: LD_INT 101
11483: PUSH
11484: LD_INT 102
11486: PUSH
11487: LD_INT 103
11489: PUSH
11490: LD_INT 104
11492: PUSH
11493: LD_INT 105
11495: PUSH
11496: LD_INT 106
11498: PUSH
11499: LD_INT 107
11501: PUSH
11502: LD_INT 108
11504: PUSH
11505: LD_INT 109
11507: PUSH
11508: LD_INT 110
11510: PUSH
11511: LD_INT 111
11513: PUSH
11514: LD_INT 112
11516: PUSH
11517: LD_INT 113
11519: PUSH
11520: LD_INT 114
11522: PUSH
11523: LD_INT 115
11525: PUSH
11526: LD_INT 116
11528: PUSH
11529: LD_INT 117
11531: PUSH
11532: LD_INT 118
11534: PUSH
11535: EMPTY
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: LIST
11543: LIST
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: LIST
11549: LIST
11550: LIST
11551: LIST
11552: LIST
11553: LIST
11554: PUSH
11555: EMPTY
11556: LIST
11557: LIST
11558: ST_TO_ADDR
// if result then
11559: LD_VAR 0 2
11563: IFFALSE 12349
// begin normal :=  ;
11565: LD_ADDR_VAR 0 5
11569: PUSH
11570: LD_STRING 
11572: ST_TO_ADDR
// hardcore :=  ;
11573: LD_ADDR_VAR 0 6
11577: PUSH
11578: LD_STRING 
11580: ST_TO_ADDR
// active :=  ;
11581: LD_ADDR_VAR 0 7
11585: PUSH
11586: LD_STRING 
11588: ST_TO_ADDR
// for i = 1 to normalCounter do
11589: LD_ADDR_VAR 0 8
11593: PUSH
11594: DOUBLE
11595: LD_INT 1
11597: DEC
11598: ST_TO_ADDR
11599: LD_EXP 28
11603: PUSH
11604: FOR_TO
11605: IFFALSE 11706
// begin tmp := 0 ;
11607: LD_ADDR_VAR 0 3
11611: PUSH
11612: LD_STRING 0
11614: ST_TO_ADDR
// if result [ 1 ] then
11615: LD_VAR 0 2
11619: PUSH
11620: LD_INT 1
11622: ARRAY
11623: IFFALSE 11688
// if result [ 1 ] [ 1 ] = i then
11625: LD_VAR 0 2
11629: PUSH
11630: LD_INT 1
11632: ARRAY
11633: PUSH
11634: LD_INT 1
11636: ARRAY
11637: PUSH
11638: LD_VAR 0 8
11642: EQUAL
11643: IFFALSE 11688
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
11645: LD_ADDR_VAR 0 2
11649: PUSH
11650: LD_VAR 0 2
11654: PPUSH
11655: LD_INT 1
11657: PPUSH
11658: LD_VAR 0 2
11662: PUSH
11663: LD_INT 1
11665: ARRAY
11666: PPUSH
11667: LD_INT 1
11669: PPUSH
11670: CALL_OW 3
11674: PPUSH
11675: CALL_OW 1
11679: ST_TO_ADDR
// tmp := 1 ;
11680: LD_ADDR_VAR 0 3
11684: PUSH
11685: LD_STRING 1
11687: ST_TO_ADDR
// end ; normal := normal & tmp ;
11688: LD_ADDR_VAR 0 5
11692: PUSH
11693: LD_VAR 0 5
11697: PUSH
11698: LD_VAR 0 3
11702: STR
11703: ST_TO_ADDR
// end ;
11704: GO 11604
11706: POP
11707: POP
// for i = 1 to hardcoreCounter do
11708: LD_ADDR_VAR 0 8
11712: PUSH
11713: DOUBLE
11714: LD_INT 1
11716: DEC
11717: ST_TO_ADDR
11718: LD_EXP 29
11722: PUSH
11723: FOR_TO
11724: IFFALSE 11829
// begin tmp := 0 ;
11726: LD_ADDR_VAR 0 3
11730: PUSH
11731: LD_STRING 0
11733: ST_TO_ADDR
// if result [ 2 ] then
11734: LD_VAR 0 2
11738: PUSH
11739: LD_INT 2
11741: ARRAY
11742: IFFALSE 11811
// if result [ 2 ] [ 1 ] = 100 + i then
11744: LD_VAR 0 2
11748: PUSH
11749: LD_INT 2
11751: ARRAY
11752: PUSH
11753: LD_INT 1
11755: ARRAY
11756: PUSH
11757: LD_INT 100
11759: PUSH
11760: LD_VAR 0 8
11764: PLUS
11765: EQUAL
11766: IFFALSE 11811
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
11768: LD_ADDR_VAR 0 2
11772: PUSH
11773: LD_VAR 0 2
11777: PPUSH
11778: LD_INT 2
11780: PPUSH
11781: LD_VAR 0 2
11785: PUSH
11786: LD_INT 2
11788: ARRAY
11789: PPUSH
11790: LD_INT 1
11792: PPUSH
11793: CALL_OW 3
11797: PPUSH
11798: CALL_OW 1
11802: ST_TO_ADDR
// tmp := 1 ;
11803: LD_ADDR_VAR 0 3
11807: PUSH
11808: LD_STRING 1
11810: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
11811: LD_ADDR_VAR 0 6
11815: PUSH
11816: LD_VAR 0 6
11820: PUSH
11821: LD_VAR 0 3
11825: STR
11826: ST_TO_ADDR
// end ;
11827: GO 11723
11829: POP
11830: POP
// if isGameLoad then
11831: LD_VAR 0 1
11835: IFFALSE 12310
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
11837: LD_ADDR_VAR 0 4
11841: PUSH
11842: LD_EXP 32
11846: PUSH
11847: LD_EXP 31
11851: PUSH
11852: LD_EXP 33
11856: PUSH
11857: LD_EXP 30
11861: PUSH
11862: LD_EXP 34
11866: PUSH
11867: LD_EXP 35
11871: PUSH
11872: LD_EXP 36
11876: PUSH
11877: LD_EXP 37
11881: PUSH
11882: LD_EXP 38
11886: PUSH
11887: LD_EXP 39
11891: PUSH
11892: LD_EXP 40
11896: PUSH
11897: LD_EXP 41
11901: PUSH
11902: LD_EXP 42
11906: PUSH
11907: LD_EXP 43
11911: PUSH
11912: LD_EXP 51
11916: PUSH
11917: LD_EXP 52
11921: PUSH
11922: LD_EXP 53
11926: PUSH
11927: LD_EXP 54
11931: PUSH
11932: LD_EXP 56
11936: PUSH
11937: LD_EXP 57
11941: PUSH
11942: LD_EXP 58
11946: PUSH
11947: LD_EXP 61
11951: PUSH
11952: LD_EXP 63
11956: PUSH
11957: LD_EXP 64
11961: PUSH
11962: LD_EXP 65
11966: PUSH
11967: LD_EXP 67
11971: PUSH
11972: LD_EXP 68
11976: PUSH
11977: LD_EXP 71
11981: PUSH
11982: LD_EXP 72
11986: PUSH
11987: LD_EXP 73
11991: PUSH
11992: LD_EXP 74
11996: PUSH
11997: LD_EXP 75
12001: PUSH
12002: LD_EXP 76
12006: PUSH
12007: LD_EXP 77
12011: PUSH
12012: LD_EXP 78
12016: PUSH
12017: LD_EXP 79
12021: PUSH
12022: LD_EXP 44
12026: PUSH
12027: LD_EXP 45
12031: PUSH
12032: LD_EXP 48
12036: PUSH
12037: LD_EXP 49
12041: PUSH
12042: LD_EXP 50
12046: PUSH
12047: LD_EXP 46
12051: PUSH
12052: LD_EXP 47
12056: PUSH
12057: LD_EXP 55
12061: PUSH
12062: LD_EXP 59
12066: PUSH
12067: LD_EXP 60
12071: PUSH
12072: LD_EXP 62
12076: PUSH
12077: LD_EXP 66
12081: PUSH
12082: LD_EXP 69
12086: PUSH
12087: LD_EXP 70
12091: PUSH
12092: LD_EXP 80
12096: PUSH
12097: LD_EXP 81
12101: PUSH
12102: LD_EXP 82
12106: PUSH
12107: LD_EXP 83
12111: PUSH
12112: EMPTY
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: LIST
12118: LIST
12119: LIST
12120: LIST
12121: LIST
12122: LIST
12123: LIST
12124: LIST
12125: LIST
12126: LIST
12127: LIST
12128: LIST
12129: LIST
12130: LIST
12131: LIST
12132: LIST
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: LIST
12138: LIST
12139: LIST
12140: LIST
12141: LIST
12142: LIST
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: LIST
12156: LIST
12157: LIST
12158: LIST
12159: LIST
12160: LIST
12161: LIST
12162: LIST
12163: LIST
12164: LIST
12165: LIST
12166: LIST
12167: ST_TO_ADDR
// tmp :=  ;
12168: LD_ADDR_VAR 0 3
12172: PUSH
12173: LD_STRING 
12175: ST_TO_ADDR
// for i = 1 to normalCounter do
12176: LD_ADDR_VAR 0 8
12180: PUSH
12181: DOUBLE
12182: LD_INT 1
12184: DEC
12185: ST_TO_ADDR
12186: LD_EXP 28
12190: PUSH
12191: FOR_TO
12192: IFFALSE 12228
// begin if flags [ i ] then
12194: LD_VAR 0 4
12198: PUSH
12199: LD_VAR 0 8
12203: ARRAY
12204: IFFALSE 12226
// tmp := tmp & i & ; ;
12206: LD_ADDR_VAR 0 3
12210: PUSH
12211: LD_VAR 0 3
12215: PUSH
12216: LD_VAR 0 8
12220: STR
12221: PUSH
12222: LD_STRING ;
12224: STR
12225: ST_TO_ADDR
// end ;
12226: GO 12191
12228: POP
12229: POP
// for i = 1 to hardcoreCounter do
12230: LD_ADDR_VAR 0 8
12234: PUSH
12235: DOUBLE
12236: LD_INT 1
12238: DEC
12239: ST_TO_ADDR
12240: LD_EXP 29
12244: PUSH
12245: FOR_TO
12246: IFFALSE 12292
// begin if flags [ normalCounter + i ] then
12248: LD_VAR 0 4
12252: PUSH
12253: LD_EXP 28
12257: PUSH
12258: LD_VAR 0 8
12262: PLUS
12263: ARRAY
12264: IFFALSE 12290
// tmp := tmp & ( 100 + i ) & ; ;
12266: LD_ADDR_VAR 0 3
12270: PUSH
12271: LD_VAR 0 3
12275: PUSH
12276: LD_INT 100
12278: PUSH
12279: LD_VAR 0 8
12283: PLUS
12284: STR
12285: PUSH
12286: LD_STRING ;
12288: STR
12289: ST_TO_ADDR
// end ;
12290: GO 12245
12292: POP
12293: POP
// if tmp then
12294: LD_VAR 0 3
12298: IFFALSE 12310
// active := tmp ;
12300: LD_ADDR_VAR 0 7
12304: PUSH
12305: LD_VAR 0 3
12309: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
12310: LD_STRING getStreamItemsFromMission("
12312: PUSH
12313: LD_VAR 0 5
12317: STR
12318: PUSH
12319: LD_STRING ","
12321: STR
12322: PUSH
12323: LD_VAR 0 6
12327: STR
12328: PUSH
12329: LD_STRING ","
12331: STR
12332: PUSH
12333: LD_VAR 0 7
12337: STR
12338: PUSH
12339: LD_STRING ")
12341: STR
12342: PPUSH
12343: CALL_OW 559
// end else
12347: GO 12356
// ToLua ( getStreamItemsFromMission("","","") ) ;
12349: LD_STRING getStreamItemsFromMission("","","")
12351: PPUSH
12352: CALL_OW 559
// end ;
12356: LD_VAR 0 2
12360: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
12361: LD_EXP 27
12365: PUSH
12366: LD_EXP 32
12370: AND
12371: IFFALSE 12495
12373: GO 12375
12375: DISABLE
12376: LD_INT 0
12378: PPUSH
12379: PPUSH
// begin enable ;
12380: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
12381: LD_ADDR_VAR 0 2
12385: PUSH
12386: LD_INT 22
12388: PUSH
12389: LD_OWVAR 2
12393: PUSH
12394: EMPTY
12395: LIST
12396: LIST
12397: PUSH
12398: LD_INT 2
12400: PUSH
12401: LD_INT 34
12403: PUSH
12404: LD_INT 7
12406: PUSH
12407: EMPTY
12408: LIST
12409: LIST
12410: PUSH
12411: LD_INT 34
12413: PUSH
12414: LD_INT 45
12416: PUSH
12417: EMPTY
12418: LIST
12419: LIST
12420: PUSH
12421: LD_INT 34
12423: PUSH
12424: LD_INT 28
12426: PUSH
12427: EMPTY
12428: LIST
12429: LIST
12430: PUSH
12431: LD_INT 34
12433: PUSH
12434: LD_INT 47
12436: PUSH
12437: EMPTY
12438: LIST
12439: LIST
12440: PUSH
12441: EMPTY
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: LIST
12447: PUSH
12448: EMPTY
12449: LIST
12450: LIST
12451: PPUSH
12452: CALL_OW 69
12456: ST_TO_ADDR
// if not tmp then
12457: LD_VAR 0 2
12461: NOT
12462: IFFALSE 12466
// exit ;
12464: GO 12495
// for i in tmp do
12466: LD_ADDR_VAR 0 1
12470: PUSH
12471: LD_VAR 0 2
12475: PUSH
12476: FOR_IN
12477: IFFALSE 12493
// begin SetLives ( i , 0 ) ;
12479: LD_VAR 0 1
12483: PPUSH
12484: LD_INT 0
12486: PPUSH
12487: CALL_OW 234
// end ;
12491: GO 12476
12493: POP
12494: POP
// end ;
12495: PPOPN 2
12497: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
12498: LD_EXP 27
12502: PUSH
12503: LD_EXP 33
12507: AND
12508: IFFALSE 12592
12510: GO 12512
12512: DISABLE
12513: LD_INT 0
12515: PPUSH
12516: PPUSH
// begin enable ;
12517: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
12518: LD_ADDR_VAR 0 2
12522: PUSH
12523: LD_INT 22
12525: PUSH
12526: LD_OWVAR 2
12530: PUSH
12531: EMPTY
12532: LIST
12533: LIST
12534: PUSH
12535: LD_INT 32
12537: PUSH
12538: LD_INT 3
12540: PUSH
12541: EMPTY
12542: LIST
12543: LIST
12544: PUSH
12545: EMPTY
12546: LIST
12547: LIST
12548: PPUSH
12549: CALL_OW 69
12553: ST_TO_ADDR
// if not tmp then
12554: LD_VAR 0 2
12558: NOT
12559: IFFALSE 12563
// exit ;
12561: GO 12592
// for i in tmp do
12563: LD_ADDR_VAR 0 1
12567: PUSH
12568: LD_VAR 0 2
12572: PUSH
12573: FOR_IN
12574: IFFALSE 12590
// begin SetLives ( i , 0 ) ;
12576: LD_VAR 0 1
12580: PPUSH
12581: LD_INT 0
12583: PPUSH
12584: CALL_OW 234
// end ;
12588: GO 12573
12590: POP
12591: POP
// end ;
12592: PPOPN 2
12594: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
12595: LD_EXP 27
12599: PUSH
12600: LD_EXP 30
12604: AND
12605: IFFALSE 12698
12607: GO 12609
12609: DISABLE
12610: LD_INT 0
12612: PPUSH
// begin enable ;
12613: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
12614: LD_ADDR_VAR 0 1
12618: PUSH
12619: LD_INT 22
12621: PUSH
12622: LD_OWVAR 2
12626: PUSH
12627: EMPTY
12628: LIST
12629: LIST
12630: PUSH
12631: LD_INT 2
12633: PUSH
12634: LD_INT 25
12636: PUSH
12637: LD_INT 5
12639: PUSH
12640: EMPTY
12641: LIST
12642: LIST
12643: PUSH
12644: LD_INT 25
12646: PUSH
12647: LD_INT 9
12649: PUSH
12650: EMPTY
12651: LIST
12652: LIST
12653: PUSH
12654: LD_INT 25
12656: PUSH
12657: LD_INT 8
12659: PUSH
12660: EMPTY
12661: LIST
12662: LIST
12663: PUSH
12664: EMPTY
12665: LIST
12666: LIST
12667: LIST
12668: LIST
12669: PUSH
12670: EMPTY
12671: LIST
12672: LIST
12673: PPUSH
12674: CALL_OW 69
12678: PUSH
12679: FOR_IN
12680: IFFALSE 12696
// begin SetClass ( i , 1 ) ;
12682: LD_VAR 0 1
12686: PPUSH
12687: LD_INT 1
12689: PPUSH
12690: CALL_OW 336
// end ;
12694: GO 12679
12696: POP
12697: POP
// end ;
12698: PPOPN 1
12700: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
12701: LD_EXP 27
12705: PUSH
12706: LD_EXP 31
12710: AND
12711: PUSH
12712: LD_OWVAR 65
12716: PUSH
12717: LD_INT 7
12719: LESS
12720: AND
12721: IFFALSE 12735
12723: GO 12725
12725: DISABLE
// begin enable ;
12726: ENABLE
// game_speed := 7 ;
12727: LD_ADDR_OWVAR 65
12731: PUSH
12732: LD_INT 7
12734: ST_TO_ADDR
// end ;
12735: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
12736: LD_EXP 27
12740: PUSH
12741: LD_EXP 34
12745: AND
12746: IFFALSE 12948
12748: GO 12750
12750: DISABLE
12751: LD_INT 0
12753: PPUSH
12754: PPUSH
12755: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12756: LD_ADDR_VAR 0 3
12760: PUSH
12761: LD_INT 81
12763: PUSH
12764: LD_OWVAR 2
12768: PUSH
12769: EMPTY
12770: LIST
12771: LIST
12772: PUSH
12773: LD_INT 21
12775: PUSH
12776: LD_INT 1
12778: PUSH
12779: EMPTY
12780: LIST
12781: LIST
12782: PUSH
12783: EMPTY
12784: LIST
12785: LIST
12786: PPUSH
12787: CALL_OW 69
12791: ST_TO_ADDR
// if not tmp then
12792: LD_VAR 0 3
12796: NOT
12797: IFFALSE 12801
// exit ;
12799: GO 12948
// if tmp > 5 then
12801: LD_VAR 0 3
12805: PUSH
12806: LD_INT 5
12808: GREATER
12809: IFFALSE 12821
// k := 5 else
12811: LD_ADDR_VAR 0 2
12815: PUSH
12816: LD_INT 5
12818: ST_TO_ADDR
12819: GO 12831
// k := tmp ;
12821: LD_ADDR_VAR 0 2
12825: PUSH
12826: LD_VAR 0 3
12830: ST_TO_ADDR
// for i := 1 to k do
12831: LD_ADDR_VAR 0 1
12835: PUSH
12836: DOUBLE
12837: LD_INT 1
12839: DEC
12840: ST_TO_ADDR
12841: LD_VAR 0 2
12845: PUSH
12846: FOR_TO
12847: IFFALSE 12946
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
12849: LD_VAR 0 3
12853: PUSH
12854: LD_VAR 0 1
12858: ARRAY
12859: PPUSH
12860: LD_VAR 0 1
12864: PUSH
12865: LD_INT 4
12867: MOD
12868: PUSH
12869: LD_INT 1
12871: PLUS
12872: PPUSH
12873: CALL_OW 259
12877: PUSH
12878: LD_INT 10
12880: LESS
12881: IFFALSE 12944
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12883: LD_VAR 0 3
12887: PUSH
12888: LD_VAR 0 1
12892: ARRAY
12893: PPUSH
12894: LD_VAR 0 1
12898: PUSH
12899: LD_INT 4
12901: MOD
12902: PUSH
12903: LD_INT 1
12905: PLUS
12906: PPUSH
12907: LD_VAR 0 3
12911: PUSH
12912: LD_VAR 0 1
12916: ARRAY
12917: PPUSH
12918: LD_VAR 0 1
12922: PUSH
12923: LD_INT 4
12925: MOD
12926: PUSH
12927: LD_INT 1
12929: PLUS
12930: PPUSH
12931: CALL_OW 259
12935: PUSH
12936: LD_INT 1
12938: PLUS
12939: PPUSH
12940: CALL_OW 237
12944: GO 12846
12946: POP
12947: POP
// end ;
12948: PPOPN 3
12950: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12951: LD_EXP 27
12955: PUSH
12956: LD_EXP 35
12960: AND
12961: IFFALSE 12981
12963: GO 12965
12965: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12966: LD_INT 4
12968: PPUSH
12969: LD_OWVAR 2
12973: PPUSH
12974: LD_INT 0
12976: PPUSH
12977: CALL_OW 324
12981: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12982: LD_EXP 27
12986: PUSH
12987: LD_EXP 64
12991: AND
12992: IFFALSE 13012
12994: GO 12996
12996: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
12997: LD_INT 19
12999: PPUSH
13000: LD_OWVAR 2
13004: PPUSH
13005: LD_INT 0
13007: PPUSH
13008: CALL_OW 324
13012: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13013: LD_EXP 27
13017: PUSH
13018: LD_EXP 36
13022: AND
13023: IFFALSE 13125
13025: GO 13027
13027: DISABLE
13028: LD_INT 0
13030: PPUSH
13031: PPUSH
// begin enable ;
13032: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13033: LD_ADDR_VAR 0 2
13037: PUSH
13038: LD_INT 22
13040: PUSH
13041: LD_OWVAR 2
13045: PUSH
13046: EMPTY
13047: LIST
13048: LIST
13049: PUSH
13050: LD_INT 2
13052: PUSH
13053: LD_INT 34
13055: PUSH
13056: LD_INT 11
13058: PUSH
13059: EMPTY
13060: LIST
13061: LIST
13062: PUSH
13063: LD_INT 34
13065: PUSH
13066: LD_INT 30
13068: PUSH
13069: EMPTY
13070: LIST
13071: LIST
13072: PUSH
13073: EMPTY
13074: LIST
13075: LIST
13076: LIST
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: PPUSH
13082: CALL_OW 69
13086: ST_TO_ADDR
// if not tmp then
13087: LD_VAR 0 2
13091: NOT
13092: IFFALSE 13096
// exit ;
13094: GO 13125
// for i in tmp do
13096: LD_ADDR_VAR 0 1
13100: PUSH
13101: LD_VAR 0 2
13105: PUSH
13106: FOR_IN
13107: IFFALSE 13123
// begin SetLives ( i , 0 ) ;
13109: LD_VAR 0 1
13113: PPUSH
13114: LD_INT 0
13116: PPUSH
13117: CALL_OW 234
// end ;
13121: GO 13106
13123: POP
13124: POP
// end ;
13125: PPOPN 2
13127: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13128: LD_EXP 27
13132: PUSH
13133: LD_EXP 37
13137: AND
13138: IFFALSE 13158
13140: GO 13142
13142: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13143: LD_INT 32
13145: PPUSH
13146: LD_OWVAR 2
13150: PPUSH
13151: LD_INT 0
13153: PPUSH
13154: CALL_OW 324
13158: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13159: LD_EXP 27
13163: PUSH
13164: LD_EXP 38
13168: AND
13169: IFFALSE 13350
13171: GO 13173
13173: DISABLE
13174: LD_INT 0
13176: PPUSH
13177: PPUSH
13178: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13179: LD_ADDR_VAR 0 2
13183: PUSH
13184: LD_INT 22
13186: PUSH
13187: LD_OWVAR 2
13191: PUSH
13192: EMPTY
13193: LIST
13194: LIST
13195: PUSH
13196: LD_INT 33
13198: PUSH
13199: LD_INT 3
13201: PUSH
13202: EMPTY
13203: LIST
13204: LIST
13205: PUSH
13206: EMPTY
13207: LIST
13208: LIST
13209: PPUSH
13210: CALL_OW 69
13214: ST_TO_ADDR
// if not tmp then
13215: LD_VAR 0 2
13219: NOT
13220: IFFALSE 13224
// exit ;
13222: GO 13350
// side := 0 ;
13224: LD_ADDR_VAR 0 3
13228: PUSH
13229: LD_INT 0
13231: ST_TO_ADDR
// for i := 1 to 8 do
13232: LD_ADDR_VAR 0 1
13236: PUSH
13237: DOUBLE
13238: LD_INT 1
13240: DEC
13241: ST_TO_ADDR
13242: LD_INT 8
13244: PUSH
13245: FOR_TO
13246: IFFALSE 13294
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
13248: LD_OWVAR 2
13252: PUSH
13253: LD_VAR 0 1
13257: NONEQUAL
13258: PUSH
13259: LD_OWVAR 2
13263: PPUSH
13264: LD_VAR 0 1
13268: PPUSH
13269: CALL_OW 81
13273: PUSH
13274: LD_INT 2
13276: EQUAL
13277: AND
13278: IFFALSE 13292
// begin side := i ;
13280: LD_ADDR_VAR 0 3
13284: PUSH
13285: LD_VAR 0 1
13289: ST_TO_ADDR
// break ;
13290: GO 13294
// end ;
13292: GO 13245
13294: POP
13295: POP
// if not side then
13296: LD_VAR 0 3
13300: NOT
13301: IFFALSE 13305
// exit ;
13303: GO 13350
// for i := 1 to tmp do
13305: LD_ADDR_VAR 0 1
13309: PUSH
13310: DOUBLE
13311: LD_INT 1
13313: DEC
13314: ST_TO_ADDR
13315: LD_VAR 0 2
13319: PUSH
13320: FOR_TO
13321: IFFALSE 13348
// if Prob ( 60 ) then
13323: LD_INT 60
13325: PPUSH
13326: CALL_OW 13
13330: IFFALSE 13346
// SetSide ( i , side ) ;
13332: LD_VAR 0 1
13336: PPUSH
13337: LD_VAR 0 3
13341: PPUSH
13342: CALL_OW 235
13346: GO 13320
13348: POP
13349: POP
// end ;
13350: PPOPN 3
13352: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
13353: LD_EXP 27
13357: PUSH
13358: LD_EXP 40
13362: AND
13363: IFFALSE 13482
13365: GO 13367
13367: DISABLE
13368: LD_INT 0
13370: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
13371: LD_ADDR_VAR 0 1
13375: PUSH
13376: LD_INT 22
13378: PUSH
13379: LD_OWVAR 2
13383: PUSH
13384: EMPTY
13385: LIST
13386: LIST
13387: PUSH
13388: LD_INT 21
13390: PUSH
13391: LD_INT 1
13393: PUSH
13394: EMPTY
13395: LIST
13396: LIST
13397: PUSH
13398: LD_INT 3
13400: PUSH
13401: LD_INT 23
13403: PUSH
13404: LD_INT 0
13406: PUSH
13407: EMPTY
13408: LIST
13409: LIST
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: PUSH
13415: EMPTY
13416: LIST
13417: LIST
13418: LIST
13419: PPUSH
13420: CALL_OW 69
13424: PUSH
13425: FOR_IN
13426: IFFALSE 13480
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
13428: LD_VAR 0 1
13432: PPUSH
13433: CALL_OW 257
13437: PUSH
13438: LD_INT 1
13440: PUSH
13441: LD_INT 2
13443: PUSH
13444: LD_INT 3
13446: PUSH
13447: LD_INT 4
13449: PUSH
13450: EMPTY
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: IN
13456: IFFALSE 13478
// SetClass ( un , rand ( 1 , 4 ) ) ;
13458: LD_VAR 0 1
13462: PPUSH
13463: LD_INT 1
13465: PPUSH
13466: LD_INT 4
13468: PPUSH
13469: CALL_OW 12
13473: PPUSH
13474: CALL_OW 336
13478: GO 13425
13480: POP
13481: POP
// end ;
13482: PPOPN 1
13484: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
13485: LD_EXP 27
13489: PUSH
13490: LD_EXP 39
13494: AND
13495: IFFALSE 13574
13497: GO 13499
13499: DISABLE
13500: LD_INT 0
13502: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13503: LD_ADDR_VAR 0 1
13507: PUSH
13508: LD_INT 22
13510: PUSH
13511: LD_OWVAR 2
13515: PUSH
13516: EMPTY
13517: LIST
13518: LIST
13519: PUSH
13520: LD_INT 21
13522: PUSH
13523: LD_INT 3
13525: PUSH
13526: EMPTY
13527: LIST
13528: LIST
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: PPUSH
13534: CALL_OW 69
13538: ST_TO_ADDR
// if not tmp then
13539: LD_VAR 0 1
13543: NOT
13544: IFFALSE 13548
// exit ;
13546: GO 13574
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
13548: LD_VAR 0 1
13552: PUSH
13553: LD_INT 1
13555: PPUSH
13556: LD_VAR 0 1
13560: PPUSH
13561: CALL_OW 12
13565: ARRAY
13566: PPUSH
13567: LD_INT 100
13569: PPUSH
13570: CALL_OW 234
// end ;
13574: PPOPN 1
13576: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
13577: LD_EXP 27
13581: PUSH
13582: LD_EXP 41
13586: AND
13587: IFFALSE 13685
13589: GO 13591
13591: DISABLE
13592: LD_INT 0
13594: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13595: LD_ADDR_VAR 0 1
13599: PUSH
13600: LD_INT 22
13602: PUSH
13603: LD_OWVAR 2
13607: PUSH
13608: EMPTY
13609: LIST
13610: LIST
13611: PUSH
13612: LD_INT 21
13614: PUSH
13615: LD_INT 1
13617: PUSH
13618: EMPTY
13619: LIST
13620: LIST
13621: PUSH
13622: EMPTY
13623: LIST
13624: LIST
13625: PPUSH
13626: CALL_OW 69
13630: ST_TO_ADDR
// if not tmp then
13631: LD_VAR 0 1
13635: NOT
13636: IFFALSE 13640
// exit ;
13638: GO 13685
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
13640: LD_VAR 0 1
13644: PUSH
13645: LD_INT 1
13647: PPUSH
13648: LD_VAR 0 1
13652: PPUSH
13653: CALL_OW 12
13657: ARRAY
13658: PPUSH
13659: LD_INT 1
13661: PPUSH
13662: LD_INT 4
13664: PPUSH
13665: CALL_OW 12
13669: PPUSH
13670: LD_INT 3000
13672: PPUSH
13673: LD_INT 9000
13675: PPUSH
13676: CALL_OW 12
13680: PPUSH
13681: CALL_OW 492
// end ;
13685: PPOPN 1
13687: END
// every 0 0$1 trigger StreamModeActive and sDepot do
13688: LD_EXP 27
13692: PUSH
13693: LD_EXP 42
13697: AND
13698: IFFALSE 13718
13700: GO 13702
13702: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
13703: LD_INT 1
13705: PPUSH
13706: LD_OWVAR 2
13710: PPUSH
13711: LD_INT 0
13713: PPUSH
13714: CALL_OW 324
13718: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
13719: LD_EXP 27
13723: PUSH
13724: LD_EXP 43
13728: AND
13729: IFFALSE 13812
13731: GO 13733
13733: DISABLE
13734: LD_INT 0
13736: PPUSH
13737: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13738: LD_ADDR_VAR 0 2
13742: PUSH
13743: LD_INT 22
13745: PUSH
13746: LD_OWVAR 2
13750: PUSH
13751: EMPTY
13752: LIST
13753: LIST
13754: PUSH
13755: LD_INT 21
13757: PUSH
13758: LD_INT 3
13760: PUSH
13761: EMPTY
13762: LIST
13763: LIST
13764: PUSH
13765: EMPTY
13766: LIST
13767: LIST
13768: PPUSH
13769: CALL_OW 69
13773: ST_TO_ADDR
// if not tmp then
13774: LD_VAR 0 2
13778: NOT
13779: IFFALSE 13783
// exit ;
13781: GO 13812
// for i in tmp do
13783: LD_ADDR_VAR 0 1
13787: PUSH
13788: LD_VAR 0 2
13792: PUSH
13793: FOR_IN
13794: IFFALSE 13810
// SetBLevel ( i , 10 ) ;
13796: LD_VAR 0 1
13800: PPUSH
13801: LD_INT 10
13803: PPUSH
13804: CALL_OW 241
13808: GO 13793
13810: POP
13811: POP
// end ;
13812: PPOPN 2
13814: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
13815: LD_EXP 27
13819: PUSH
13820: LD_EXP 44
13824: AND
13825: IFFALSE 13936
13827: GO 13829
13829: DISABLE
13830: LD_INT 0
13832: PPUSH
13833: PPUSH
13834: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13835: LD_ADDR_VAR 0 3
13839: PUSH
13840: LD_INT 22
13842: PUSH
13843: LD_OWVAR 2
13847: PUSH
13848: EMPTY
13849: LIST
13850: LIST
13851: PUSH
13852: LD_INT 25
13854: PUSH
13855: LD_INT 1
13857: PUSH
13858: EMPTY
13859: LIST
13860: LIST
13861: PUSH
13862: EMPTY
13863: LIST
13864: LIST
13865: PPUSH
13866: CALL_OW 69
13870: ST_TO_ADDR
// if not tmp then
13871: LD_VAR 0 3
13875: NOT
13876: IFFALSE 13880
// exit ;
13878: GO 13936
// un := tmp [ rand ( 1 , tmp ) ] ;
13880: LD_ADDR_VAR 0 2
13884: PUSH
13885: LD_VAR 0 3
13889: PUSH
13890: LD_INT 1
13892: PPUSH
13893: LD_VAR 0 3
13897: PPUSH
13898: CALL_OW 12
13902: ARRAY
13903: ST_TO_ADDR
// if Crawls ( un ) then
13904: LD_VAR 0 2
13908: PPUSH
13909: CALL_OW 318
13913: IFFALSE 13924
// ComWalk ( un ) ;
13915: LD_VAR 0 2
13919: PPUSH
13920: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13924: LD_VAR 0 2
13928: PPUSH
13929: LD_INT 5
13931: PPUSH
13932: CALL_OW 336
// end ;
13936: PPOPN 3
13938: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
13939: LD_EXP 27
13943: PUSH
13944: LD_EXP 45
13948: AND
13949: PUSH
13950: LD_OWVAR 67
13954: PUSH
13955: LD_INT 4
13957: LESS
13958: AND
13959: IFFALSE 13978
13961: GO 13963
13963: DISABLE
// begin Difficulty := Difficulty + 1 ;
13964: LD_ADDR_OWVAR 67
13968: PUSH
13969: LD_OWVAR 67
13973: PUSH
13974: LD_INT 1
13976: PLUS
13977: ST_TO_ADDR
// end ;
13978: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
13979: LD_EXP 27
13983: PUSH
13984: LD_EXP 46
13988: AND
13989: IFFALSE 14092
13991: GO 13993
13993: DISABLE
13994: LD_INT 0
13996: PPUSH
// begin for i := 1 to 5 do
13997: LD_ADDR_VAR 0 1
14001: PUSH
14002: DOUBLE
14003: LD_INT 1
14005: DEC
14006: ST_TO_ADDR
14007: LD_INT 5
14009: PUSH
14010: FOR_TO
14011: IFFALSE 14090
// begin uc_nation := nation_nature ;
14013: LD_ADDR_OWVAR 21
14017: PUSH
14018: LD_INT 0
14020: ST_TO_ADDR
// uc_side := 0 ;
14021: LD_ADDR_OWVAR 20
14025: PUSH
14026: LD_INT 0
14028: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14029: LD_ADDR_OWVAR 29
14033: PUSH
14034: LD_INT 12
14036: PUSH
14037: LD_INT 12
14039: PUSH
14040: EMPTY
14041: LIST
14042: LIST
14043: ST_TO_ADDR
// hc_agressivity := 20 ;
14044: LD_ADDR_OWVAR 35
14048: PUSH
14049: LD_INT 20
14051: ST_TO_ADDR
// hc_class := class_tiger ;
14052: LD_ADDR_OWVAR 28
14056: PUSH
14057: LD_INT 14
14059: ST_TO_ADDR
// hc_gallery :=  ;
14060: LD_ADDR_OWVAR 33
14064: PUSH
14065: LD_STRING 
14067: ST_TO_ADDR
// hc_name :=  ;
14068: LD_ADDR_OWVAR 26
14072: PUSH
14073: LD_STRING 
14075: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14076: CALL_OW 44
14080: PPUSH
14081: LD_INT 0
14083: PPUSH
14084: CALL_OW 51
// end ;
14088: GO 14010
14090: POP
14091: POP
// end ;
14092: PPOPN 1
14094: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14095: LD_EXP 27
14099: PUSH
14100: LD_EXP 47
14104: AND
14105: IFFALSE 14114
14107: GO 14109
14109: DISABLE
// StreamSibBomb ;
14110: CALL 14115 0 0
14114: END
// export function StreamSibBomb ; var i , x , y ; begin
14115: LD_INT 0
14117: PPUSH
14118: PPUSH
14119: PPUSH
14120: PPUSH
// result := false ;
14121: LD_ADDR_VAR 0 1
14125: PUSH
14126: LD_INT 0
14128: ST_TO_ADDR
// for i := 1 to 16 do
14129: LD_ADDR_VAR 0 2
14133: PUSH
14134: DOUBLE
14135: LD_INT 1
14137: DEC
14138: ST_TO_ADDR
14139: LD_INT 16
14141: PUSH
14142: FOR_TO
14143: IFFALSE 14342
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14145: LD_ADDR_VAR 0 3
14149: PUSH
14150: LD_INT 10
14152: PUSH
14153: LD_INT 20
14155: PUSH
14156: LD_INT 30
14158: PUSH
14159: LD_INT 40
14161: PUSH
14162: LD_INT 50
14164: PUSH
14165: LD_INT 60
14167: PUSH
14168: LD_INT 70
14170: PUSH
14171: LD_INT 80
14173: PUSH
14174: LD_INT 90
14176: PUSH
14177: LD_INT 100
14179: PUSH
14180: LD_INT 110
14182: PUSH
14183: LD_INT 120
14185: PUSH
14186: LD_INT 130
14188: PUSH
14189: LD_INT 140
14191: PUSH
14192: LD_INT 150
14194: PUSH
14195: EMPTY
14196: LIST
14197: LIST
14198: LIST
14199: LIST
14200: LIST
14201: LIST
14202: LIST
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: LIST
14208: LIST
14209: LIST
14210: LIST
14211: PUSH
14212: LD_INT 1
14214: PPUSH
14215: LD_INT 15
14217: PPUSH
14218: CALL_OW 12
14222: ARRAY
14223: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14224: LD_ADDR_VAR 0 4
14228: PUSH
14229: LD_INT 10
14231: PUSH
14232: LD_INT 20
14234: PUSH
14235: LD_INT 30
14237: PUSH
14238: LD_INT 40
14240: PUSH
14241: LD_INT 50
14243: PUSH
14244: LD_INT 60
14246: PUSH
14247: LD_INT 70
14249: PUSH
14250: LD_INT 80
14252: PUSH
14253: LD_INT 90
14255: PUSH
14256: LD_INT 100
14258: PUSH
14259: LD_INT 110
14261: PUSH
14262: LD_INT 120
14264: PUSH
14265: LD_INT 130
14267: PUSH
14268: LD_INT 140
14270: PUSH
14271: LD_INT 150
14273: PUSH
14274: EMPTY
14275: LIST
14276: LIST
14277: LIST
14278: LIST
14279: LIST
14280: LIST
14281: LIST
14282: LIST
14283: LIST
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: PUSH
14291: LD_INT 1
14293: PPUSH
14294: LD_INT 15
14296: PPUSH
14297: CALL_OW 12
14301: ARRAY
14302: ST_TO_ADDR
// if ValidHex ( x , y ) then
14303: LD_VAR 0 3
14307: PPUSH
14308: LD_VAR 0 4
14312: PPUSH
14313: CALL_OW 488
14317: IFFALSE 14340
// begin result := [ x , y ] ;
14319: LD_ADDR_VAR 0 1
14323: PUSH
14324: LD_VAR 0 3
14328: PUSH
14329: LD_VAR 0 4
14333: PUSH
14334: EMPTY
14335: LIST
14336: LIST
14337: ST_TO_ADDR
// break ;
14338: GO 14342
// end ; end ;
14340: GO 14142
14342: POP
14343: POP
// if result then
14344: LD_VAR 0 1
14348: IFFALSE 14408
// begin ToLua ( playSibBomb() ) ;
14350: LD_STRING playSibBomb()
14352: PPUSH
14353: CALL_OW 559
// wait ( 0 0$14 ) ;
14357: LD_INT 490
14359: PPUSH
14360: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
14364: LD_VAR 0 1
14368: PUSH
14369: LD_INT 1
14371: ARRAY
14372: PPUSH
14373: LD_VAR 0 1
14377: PUSH
14378: LD_INT 2
14380: ARRAY
14381: PPUSH
14382: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
14386: LD_VAR 0 1
14390: PUSH
14391: LD_INT 1
14393: ARRAY
14394: PPUSH
14395: LD_VAR 0 1
14399: PUSH
14400: LD_INT 2
14402: ARRAY
14403: PPUSH
14404: CALL_OW 429
// end ; end ;
14408: LD_VAR 0 1
14412: RET
// every 0 0$1 trigger StreamModeActive and sReset do
14413: LD_EXP 27
14417: PUSH
14418: LD_EXP 49
14422: AND
14423: IFFALSE 14435
14425: GO 14427
14427: DISABLE
// YouLost (  ) ;
14428: LD_STRING 
14430: PPUSH
14431: CALL_OW 104
14435: END
// every 0 0$1 trigger StreamModeActive and sFog do
14436: LD_EXP 27
14440: PUSH
14441: LD_EXP 48
14445: AND
14446: IFFALSE 14460
14448: GO 14450
14450: DISABLE
// FogOff ( your_side ) ;
14451: LD_OWVAR 2
14455: PPUSH
14456: CALL_OW 344
14460: END
// every 0 0$1 trigger StreamModeActive and sSun do
14461: LD_EXP 27
14465: PUSH
14466: LD_EXP 50
14470: AND
14471: IFFALSE 14499
14473: GO 14475
14475: DISABLE
// begin solar_recharge_percent := 0 ;
14476: LD_ADDR_OWVAR 79
14480: PUSH
14481: LD_INT 0
14483: ST_TO_ADDR
// wait ( 5 5$00 ) ;
14484: LD_INT 10500
14486: PPUSH
14487: CALL_OW 67
// solar_recharge_percent := 100 ;
14491: LD_ADDR_OWVAR 79
14495: PUSH
14496: LD_INT 100
14498: ST_TO_ADDR
// end ;
14499: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
14500: LD_EXP 27
14504: PUSH
14505: LD_EXP 51
14509: AND
14510: IFFALSE 14749
14512: GO 14514
14514: DISABLE
14515: LD_INT 0
14517: PPUSH
14518: PPUSH
14519: PPUSH
// begin tmp := [ ] ;
14520: LD_ADDR_VAR 0 3
14524: PUSH
14525: EMPTY
14526: ST_TO_ADDR
// for i := 1 to 6 do
14527: LD_ADDR_VAR 0 1
14531: PUSH
14532: DOUBLE
14533: LD_INT 1
14535: DEC
14536: ST_TO_ADDR
14537: LD_INT 6
14539: PUSH
14540: FOR_TO
14541: IFFALSE 14646
// begin uc_nation := nation_nature ;
14543: LD_ADDR_OWVAR 21
14547: PUSH
14548: LD_INT 0
14550: ST_TO_ADDR
// uc_side := 0 ;
14551: LD_ADDR_OWVAR 20
14555: PUSH
14556: LD_INT 0
14558: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14559: LD_ADDR_OWVAR 29
14563: PUSH
14564: LD_INT 12
14566: PUSH
14567: LD_INT 12
14569: PUSH
14570: EMPTY
14571: LIST
14572: LIST
14573: ST_TO_ADDR
// hc_agressivity := 20 ;
14574: LD_ADDR_OWVAR 35
14578: PUSH
14579: LD_INT 20
14581: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
14582: LD_ADDR_OWVAR 28
14586: PUSH
14587: LD_INT 17
14589: ST_TO_ADDR
// hc_gallery :=  ;
14590: LD_ADDR_OWVAR 33
14594: PUSH
14595: LD_STRING 
14597: ST_TO_ADDR
// hc_name :=  ;
14598: LD_ADDR_OWVAR 26
14602: PUSH
14603: LD_STRING 
14605: ST_TO_ADDR
// un := CreateHuman ;
14606: LD_ADDR_VAR 0 2
14610: PUSH
14611: CALL_OW 44
14615: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
14616: LD_VAR 0 2
14620: PPUSH
14621: LD_INT 1
14623: PPUSH
14624: CALL_OW 51
// tmp := tmp ^ un ;
14628: LD_ADDR_VAR 0 3
14632: PUSH
14633: LD_VAR 0 3
14637: PUSH
14638: LD_VAR 0 2
14642: ADD
14643: ST_TO_ADDR
// end ;
14644: GO 14540
14646: POP
14647: POP
// repeat wait ( 0 0$1 ) ;
14648: LD_INT 35
14650: PPUSH
14651: CALL_OW 67
// for un in tmp do
14655: LD_ADDR_VAR 0 2
14659: PUSH
14660: LD_VAR 0 3
14664: PUSH
14665: FOR_IN
14666: IFFALSE 14740
// begin if IsDead ( un ) then
14668: LD_VAR 0 2
14672: PPUSH
14673: CALL_OW 301
14677: IFFALSE 14697
// begin tmp := tmp diff un ;
14679: LD_ADDR_VAR 0 3
14683: PUSH
14684: LD_VAR 0 3
14688: PUSH
14689: LD_VAR 0 2
14693: DIFF
14694: ST_TO_ADDR
// continue ;
14695: GO 14665
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
14697: LD_VAR 0 2
14701: PPUSH
14702: LD_INT 3
14704: PUSH
14705: LD_INT 22
14707: PUSH
14708: LD_INT 0
14710: PUSH
14711: EMPTY
14712: LIST
14713: LIST
14714: PUSH
14715: EMPTY
14716: LIST
14717: LIST
14718: PPUSH
14719: CALL_OW 69
14723: PPUSH
14724: LD_VAR 0 2
14728: PPUSH
14729: CALL_OW 74
14733: PPUSH
14734: CALL_OW 115
// end ;
14738: GO 14665
14740: POP
14741: POP
// until not tmp ;
14742: LD_VAR 0 3
14746: NOT
14747: IFFALSE 14648
// end ;
14749: PPOPN 3
14751: END
// every 0 0$1 trigger StreamModeActive and sTroll do
14752: LD_EXP 27
14756: PUSH
14757: LD_EXP 52
14761: AND
14762: IFFALSE 14816
14764: GO 14766
14766: DISABLE
// begin ToLua ( displayTroll(); ) ;
14767: LD_STRING displayTroll();
14769: PPUSH
14770: CALL_OW 559
// wait ( 3 3$00 ) ;
14774: LD_INT 6300
14776: PPUSH
14777: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14781: LD_STRING hideTroll();
14783: PPUSH
14784: CALL_OW 559
// wait ( 1 1$00 ) ;
14788: LD_INT 2100
14790: PPUSH
14791: CALL_OW 67
// ToLua ( displayTroll(); ) ;
14795: LD_STRING displayTroll();
14797: PPUSH
14798: CALL_OW 559
// wait ( 1 1$00 ) ;
14802: LD_INT 2100
14804: PPUSH
14805: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14809: LD_STRING hideTroll();
14811: PPUSH
14812: CALL_OW 559
// end ;
14816: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
14817: LD_EXP 27
14821: PUSH
14822: LD_EXP 53
14826: AND
14827: IFFALSE 14890
14829: GO 14831
14831: DISABLE
14832: LD_INT 0
14834: PPUSH
// begin p := 0 ;
14835: LD_ADDR_VAR 0 1
14839: PUSH
14840: LD_INT 0
14842: ST_TO_ADDR
// repeat game_speed := 1 ;
14843: LD_ADDR_OWVAR 65
14847: PUSH
14848: LD_INT 1
14850: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14851: LD_INT 35
14853: PPUSH
14854: CALL_OW 67
// p := p + 1 ;
14858: LD_ADDR_VAR 0 1
14862: PUSH
14863: LD_VAR 0 1
14867: PUSH
14868: LD_INT 1
14870: PLUS
14871: ST_TO_ADDR
// until p >= 60 ;
14872: LD_VAR 0 1
14876: PUSH
14877: LD_INT 60
14879: GREATEREQUAL
14880: IFFALSE 14843
// game_speed := 4 ;
14882: LD_ADDR_OWVAR 65
14886: PUSH
14887: LD_INT 4
14889: ST_TO_ADDR
// end ;
14890: PPOPN 1
14892: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14893: LD_EXP 27
14897: PUSH
14898: LD_EXP 54
14902: AND
14903: IFFALSE 15049
14905: GO 14907
14907: DISABLE
14908: LD_INT 0
14910: PPUSH
14911: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14912: LD_ADDR_VAR 0 1
14916: PUSH
14917: LD_INT 22
14919: PUSH
14920: LD_OWVAR 2
14924: PUSH
14925: EMPTY
14926: LIST
14927: LIST
14928: PUSH
14929: LD_INT 2
14931: PUSH
14932: LD_INT 30
14934: PUSH
14935: LD_INT 0
14937: PUSH
14938: EMPTY
14939: LIST
14940: LIST
14941: PUSH
14942: LD_INT 30
14944: PUSH
14945: LD_INT 1
14947: PUSH
14948: EMPTY
14949: LIST
14950: LIST
14951: PUSH
14952: EMPTY
14953: LIST
14954: LIST
14955: LIST
14956: PUSH
14957: EMPTY
14958: LIST
14959: LIST
14960: PPUSH
14961: CALL_OW 69
14965: ST_TO_ADDR
// if not depot then
14966: LD_VAR 0 1
14970: NOT
14971: IFFALSE 14975
// exit ;
14973: GO 15049
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
14975: LD_ADDR_VAR 0 2
14979: PUSH
14980: LD_VAR 0 1
14984: PUSH
14985: LD_INT 1
14987: PPUSH
14988: LD_VAR 0 1
14992: PPUSH
14993: CALL_OW 12
14997: ARRAY
14998: PPUSH
14999: CALL_OW 274
15003: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15004: LD_VAR 0 2
15008: PPUSH
15009: LD_INT 1
15011: PPUSH
15012: LD_INT 0
15014: PPUSH
15015: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15019: LD_VAR 0 2
15023: PPUSH
15024: LD_INT 2
15026: PPUSH
15027: LD_INT 0
15029: PPUSH
15030: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15034: LD_VAR 0 2
15038: PPUSH
15039: LD_INT 3
15041: PPUSH
15042: LD_INT 0
15044: PPUSH
15045: CALL_OW 277
// end ;
15049: PPOPN 2
15051: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15052: LD_EXP 27
15056: PUSH
15057: LD_EXP 55
15061: AND
15062: IFFALSE 15159
15064: GO 15066
15066: DISABLE
15067: LD_INT 0
15069: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15070: LD_ADDR_VAR 0 1
15074: PUSH
15075: LD_INT 22
15077: PUSH
15078: LD_OWVAR 2
15082: PUSH
15083: EMPTY
15084: LIST
15085: LIST
15086: PUSH
15087: LD_INT 21
15089: PUSH
15090: LD_INT 1
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: PUSH
15097: LD_INT 3
15099: PUSH
15100: LD_INT 23
15102: PUSH
15103: LD_INT 0
15105: PUSH
15106: EMPTY
15107: LIST
15108: LIST
15109: PUSH
15110: EMPTY
15111: LIST
15112: LIST
15113: PUSH
15114: EMPTY
15115: LIST
15116: LIST
15117: LIST
15118: PPUSH
15119: CALL_OW 69
15123: ST_TO_ADDR
// if not tmp then
15124: LD_VAR 0 1
15128: NOT
15129: IFFALSE 15133
// exit ;
15131: GO 15159
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15133: LD_VAR 0 1
15137: PUSH
15138: LD_INT 1
15140: PPUSH
15141: LD_VAR 0 1
15145: PPUSH
15146: CALL_OW 12
15150: ARRAY
15151: PPUSH
15152: LD_INT 200
15154: PPUSH
15155: CALL_OW 234
// end ;
15159: PPOPN 1
15161: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15162: LD_EXP 27
15166: PUSH
15167: LD_EXP 56
15171: AND
15172: IFFALSE 15251
15174: GO 15176
15176: DISABLE
15177: LD_INT 0
15179: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15180: LD_ADDR_VAR 0 1
15184: PUSH
15185: LD_INT 22
15187: PUSH
15188: LD_OWVAR 2
15192: PUSH
15193: EMPTY
15194: LIST
15195: LIST
15196: PUSH
15197: LD_INT 21
15199: PUSH
15200: LD_INT 2
15202: PUSH
15203: EMPTY
15204: LIST
15205: LIST
15206: PUSH
15207: EMPTY
15208: LIST
15209: LIST
15210: PPUSH
15211: CALL_OW 69
15215: ST_TO_ADDR
// if not tmp then
15216: LD_VAR 0 1
15220: NOT
15221: IFFALSE 15225
// exit ;
15223: GO 15251
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15225: LD_VAR 0 1
15229: PUSH
15230: LD_INT 1
15232: PPUSH
15233: LD_VAR 0 1
15237: PPUSH
15238: CALL_OW 12
15242: ARRAY
15243: PPUSH
15244: LD_INT 60
15246: PPUSH
15247: CALL_OW 234
// end ;
15251: PPOPN 1
15253: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
15254: LD_EXP 27
15258: PUSH
15259: LD_EXP 57
15263: AND
15264: IFFALSE 15363
15266: GO 15268
15268: DISABLE
15269: LD_INT 0
15271: PPUSH
15272: PPUSH
// begin enable ;
15273: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
15274: LD_ADDR_VAR 0 1
15278: PUSH
15279: LD_INT 22
15281: PUSH
15282: LD_OWVAR 2
15286: PUSH
15287: EMPTY
15288: LIST
15289: LIST
15290: PUSH
15291: LD_INT 61
15293: PUSH
15294: EMPTY
15295: LIST
15296: PUSH
15297: LD_INT 33
15299: PUSH
15300: LD_INT 2
15302: PUSH
15303: EMPTY
15304: LIST
15305: LIST
15306: PUSH
15307: EMPTY
15308: LIST
15309: LIST
15310: LIST
15311: PPUSH
15312: CALL_OW 69
15316: ST_TO_ADDR
// if not tmp then
15317: LD_VAR 0 1
15321: NOT
15322: IFFALSE 15326
// exit ;
15324: GO 15363
// for i in tmp do
15326: LD_ADDR_VAR 0 2
15330: PUSH
15331: LD_VAR 0 1
15335: PUSH
15336: FOR_IN
15337: IFFALSE 15361
// if IsControledBy ( i ) then
15339: LD_VAR 0 2
15343: PPUSH
15344: CALL_OW 312
15348: IFFALSE 15359
// ComUnlink ( i ) ;
15350: LD_VAR 0 2
15354: PPUSH
15355: CALL_OW 136
15359: GO 15336
15361: POP
15362: POP
// end ;
15363: PPOPN 2
15365: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
15366: LD_EXP 27
15370: PUSH
15371: LD_EXP 58
15375: AND
15376: IFFALSE 15516
15378: GO 15380
15380: DISABLE
15381: LD_INT 0
15383: PPUSH
15384: PPUSH
// begin ToLua ( displayPowell(); ) ;
15385: LD_STRING displayPowell();
15387: PPUSH
15388: CALL_OW 559
// uc_side := 0 ;
15392: LD_ADDR_OWVAR 20
15396: PUSH
15397: LD_INT 0
15399: ST_TO_ADDR
// uc_nation := 2 ;
15400: LD_ADDR_OWVAR 21
15404: PUSH
15405: LD_INT 2
15407: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
15408: LD_ADDR_OWVAR 37
15412: PUSH
15413: LD_INT 14
15415: ST_TO_ADDR
// vc_engine := engine_siberite ;
15416: LD_ADDR_OWVAR 39
15420: PUSH
15421: LD_INT 3
15423: ST_TO_ADDR
// vc_control := control_apeman ;
15424: LD_ADDR_OWVAR 38
15428: PUSH
15429: LD_INT 5
15431: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
15432: LD_ADDR_OWVAR 40
15436: PUSH
15437: LD_INT 29
15439: ST_TO_ADDR
// un := CreateVehicle ;
15440: LD_ADDR_VAR 0 2
15444: PUSH
15445: CALL_OW 45
15449: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15450: LD_VAR 0 2
15454: PPUSH
15455: LD_INT 1
15457: PPUSH
15458: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15462: LD_INT 35
15464: PPUSH
15465: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15469: LD_VAR 0 2
15473: PPUSH
15474: LD_INT 22
15476: PUSH
15477: LD_OWVAR 2
15481: PUSH
15482: EMPTY
15483: LIST
15484: LIST
15485: PPUSH
15486: CALL_OW 69
15490: PPUSH
15491: LD_VAR 0 2
15495: PPUSH
15496: CALL_OW 74
15500: PPUSH
15501: CALL_OW 115
// until IsDead ( un ) ;
15505: LD_VAR 0 2
15509: PPUSH
15510: CALL_OW 301
15514: IFFALSE 15462
// end ;
15516: PPOPN 2
15518: END
// every 0 0$1 trigger StreamModeActive and sStu do
15519: LD_EXP 27
15523: PUSH
15524: LD_EXP 66
15528: AND
15529: IFFALSE 15545
15531: GO 15533
15533: DISABLE
// begin ToLua ( displayStucuk(); ) ;
15534: LD_STRING displayStucuk();
15536: PPUSH
15537: CALL_OW 559
// ResetFog ;
15541: CALL_OW 335
// end ;
15545: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
15546: LD_EXP 27
15550: PUSH
15551: LD_EXP 59
15555: AND
15556: IFFALSE 15697
15558: GO 15560
15560: DISABLE
15561: LD_INT 0
15563: PPUSH
15564: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15565: LD_ADDR_VAR 0 2
15569: PUSH
15570: LD_INT 22
15572: PUSH
15573: LD_OWVAR 2
15577: PUSH
15578: EMPTY
15579: LIST
15580: LIST
15581: PUSH
15582: LD_INT 21
15584: PUSH
15585: LD_INT 1
15587: PUSH
15588: EMPTY
15589: LIST
15590: LIST
15591: PUSH
15592: EMPTY
15593: LIST
15594: LIST
15595: PPUSH
15596: CALL_OW 69
15600: ST_TO_ADDR
// if not tmp then
15601: LD_VAR 0 2
15605: NOT
15606: IFFALSE 15610
// exit ;
15608: GO 15697
// un := tmp [ rand ( 1 , tmp ) ] ;
15610: LD_ADDR_VAR 0 1
15614: PUSH
15615: LD_VAR 0 2
15619: PUSH
15620: LD_INT 1
15622: PPUSH
15623: LD_VAR 0 2
15627: PPUSH
15628: CALL_OW 12
15632: ARRAY
15633: ST_TO_ADDR
// SetSide ( un , 0 ) ;
15634: LD_VAR 0 1
15638: PPUSH
15639: LD_INT 0
15641: PPUSH
15642: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
15646: LD_VAR 0 1
15650: PPUSH
15651: LD_OWVAR 3
15655: PUSH
15656: LD_VAR 0 1
15660: DIFF
15661: PPUSH
15662: LD_VAR 0 1
15666: PPUSH
15667: CALL_OW 74
15671: PPUSH
15672: CALL_OW 115
// wait ( 0 0$20 ) ;
15676: LD_INT 700
15678: PPUSH
15679: CALL_OW 67
// SetSide ( un , your_side ) ;
15683: LD_VAR 0 1
15687: PPUSH
15688: LD_OWVAR 2
15692: PPUSH
15693: CALL_OW 235
// end ;
15697: PPOPN 2
15699: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
15700: LD_EXP 27
15704: PUSH
15705: LD_EXP 60
15709: AND
15710: IFFALSE 15816
15712: GO 15714
15714: DISABLE
15715: LD_INT 0
15717: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15718: LD_ADDR_VAR 0 1
15722: PUSH
15723: LD_INT 22
15725: PUSH
15726: LD_OWVAR 2
15730: PUSH
15731: EMPTY
15732: LIST
15733: LIST
15734: PUSH
15735: LD_INT 2
15737: PUSH
15738: LD_INT 30
15740: PUSH
15741: LD_INT 0
15743: PUSH
15744: EMPTY
15745: LIST
15746: LIST
15747: PUSH
15748: LD_INT 30
15750: PUSH
15751: LD_INT 1
15753: PUSH
15754: EMPTY
15755: LIST
15756: LIST
15757: PUSH
15758: EMPTY
15759: LIST
15760: LIST
15761: LIST
15762: PUSH
15763: EMPTY
15764: LIST
15765: LIST
15766: PPUSH
15767: CALL_OW 69
15771: ST_TO_ADDR
// if not depot then
15772: LD_VAR 0 1
15776: NOT
15777: IFFALSE 15781
// exit ;
15779: GO 15816
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
15781: LD_VAR 0 1
15785: PUSH
15786: LD_INT 1
15788: ARRAY
15789: PPUSH
15790: CALL_OW 250
15794: PPUSH
15795: LD_VAR 0 1
15799: PUSH
15800: LD_INT 1
15802: ARRAY
15803: PPUSH
15804: CALL_OW 251
15808: PPUSH
15809: LD_INT 70
15811: PPUSH
15812: CALL_OW 495
// end ;
15816: PPOPN 1
15818: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
15819: LD_EXP 27
15823: PUSH
15824: LD_EXP 61
15828: AND
15829: IFFALSE 16040
15831: GO 15833
15833: DISABLE
15834: LD_INT 0
15836: PPUSH
15837: PPUSH
15838: PPUSH
15839: PPUSH
15840: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15841: LD_ADDR_VAR 0 5
15845: PUSH
15846: LD_INT 22
15848: PUSH
15849: LD_OWVAR 2
15853: PUSH
15854: EMPTY
15855: LIST
15856: LIST
15857: PUSH
15858: LD_INT 21
15860: PUSH
15861: LD_INT 1
15863: PUSH
15864: EMPTY
15865: LIST
15866: LIST
15867: PUSH
15868: EMPTY
15869: LIST
15870: LIST
15871: PPUSH
15872: CALL_OW 69
15876: ST_TO_ADDR
// if not tmp then
15877: LD_VAR 0 5
15881: NOT
15882: IFFALSE 15886
// exit ;
15884: GO 16040
// for i in tmp do
15886: LD_ADDR_VAR 0 1
15890: PUSH
15891: LD_VAR 0 5
15895: PUSH
15896: FOR_IN
15897: IFFALSE 16038
// begin d := rand ( 0 , 5 ) ;
15899: LD_ADDR_VAR 0 4
15903: PUSH
15904: LD_INT 0
15906: PPUSH
15907: LD_INT 5
15909: PPUSH
15910: CALL_OW 12
15914: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15915: LD_ADDR_VAR 0 2
15919: PUSH
15920: LD_VAR 0 1
15924: PPUSH
15925: CALL_OW 250
15929: PPUSH
15930: LD_VAR 0 4
15934: PPUSH
15935: LD_INT 3
15937: PPUSH
15938: LD_INT 12
15940: PPUSH
15941: CALL_OW 12
15945: PPUSH
15946: CALL_OW 272
15950: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15951: LD_ADDR_VAR 0 3
15955: PUSH
15956: LD_VAR 0 1
15960: PPUSH
15961: CALL_OW 251
15965: PPUSH
15966: LD_VAR 0 4
15970: PPUSH
15971: LD_INT 3
15973: PPUSH
15974: LD_INT 12
15976: PPUSH
15977: CALL_OW 12
15981: PPUSH
15982: CALL_OW 273
15986: ST_TO_ADDR
// if ValidHex ( x , y ) then
15987: LD_VAR 0 2
15991: PPUSH
15992: LD_VAR 0 3
15996: PPUSH
15997: CALL_OW 488
16001: IFFALSE 16036
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16003: LD_VAR 0 1
16007: PPUSH
16008: LD_VAR 0 2
16012: PPUSH
16013: LD_VAR 0 3
16017: PPUSH
16018: LD_INT 3
16020: PPUSH
16021: LD_INT 6
16023: PPUSH
16024: CALL_OW 12
16028: PPUSH
16029: LD_INT 1
16031: PPUSH
16032: CALL_OW 483
// end ;
16036: GO 15896
16038: POP
16039: POP
// end ;
16040: PPOPN 5
16042: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16043: LD_EXP 27
16047: PUSH
16048: LD_EXP 62
16052: AND
16053: IFFALSE 16147
16055: GO 16057
16057: DISABLE
16058: LD_INT 0
16060: PPUSH
16061: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16062: LD_ADDR_VAR 0 2
16066: PUSH
16067: LD_INT 22
16069: PUSH
16070: LD_OWVAR 2
16074: PUSH
16075: EMPTY
16076: LIST
16077: LIST
16078: PUSH
16079: LD_INT 32
16081: PUSH
16082: LD_INT 1
16084: PUSH
16085: EMPTY
16086: LIST
16087: LIST
16088: PUSH
16089: LD_INT 21
16091: PUSH
16092: LD_INT 2
16094: PUSH
16095: EMPTY
16096: LIST
16097: LIST
16098: PUSH
16099: EMPTY
16100: LIST
16101: LIST
16102: LIST
16103: PPUSH
16104: CALL_OW 69
16108: ST_TO_ADDR
// if not tmp then
16109: LD_VAR 0 2
16113: NOT
16114: IFFALSE 16118
// exit ;
16116: GO 16147
// for i in tmp do
16118: LD_ADDR_VAR 0 1
16122: PUSH
16123: LD_VAR 0 2
16127: PUSH
16128: FOR_IN
16129: IFFALSE 16145
// SetFuel ( i , 0 ) ;
16131: LD_VAR 0 1
16135: PPUSH
16136: LD_INT 0
16138: PPUSH
16139: CALL_OW 240
16143: GO 16128
16145: POP
16146: POP
// end ;
16147: PPOPN 2
16149: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16150: LD_EXP 27
16154: PUSH
16155: LD_EXP 63
16159: AND
16160: IFFALSE 16226
16162: GO 16164
16164: DISABLE
16165: LD_INT 0
16167: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16168: LD_ADDR_VAR 0 1
16172: PUSH
16173: LD_INT 22
16175: PUSH
16176: LD_OWVAR 2
16180: PUSH
16181: EMPTY
16182: LIST
16183: LIST
16184: PUSH
16185: LD_INT 30
16187: PUSH
16188: LD_INT 29
16190: PUSH
16191: EMPTY
16192: LIST
16193: LIST
16194: PUSH
16195: EMPTY
16196: LIST
16197: LIST
16198: PPUSH
16199: CALL_OW 69
16203: ST_TO_ADDR
// if not tmp then
16204: LD_VAR 0 1
16208: NOT
16209: IFFALSE 16213
// exit ;
16211: GO 16226
// DestroyUnit ( tmp [ 1 ] ) ;
16213: LD_VAR 0 1
16217: PUSH
16218: LD_INT 1
16220: ARRAY
16221: PPUSH
16222: CALL_OW 65
// end ;
16226: PPOPN 1
16228: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16229: LD_EXP 27
16233: PUSH
16234: LD_EXP 65
16238: AND
16239: IFFALSE 16368
16241: GO 16243
16243: DISABLE
16244: LD_INT 0
16246: PPUSH
// begin uc_side := 0 ;
16247: LD_ADDR_OWVAR 20
16251: PUSH
16252: LD_INT 0
16254: ST_TO_ADDR
// uc_nation := nation_arabian ;
16255: LD_ADDR_OWVAR 21
16259: PUSH
16260: LD_INT 2
16262: ST_TO_ADDR
// hc_gallery :=  ;
16263: LD_ADDR_OWVAR 33
16267: PUSH
16268: LD_STRING 
16270: ST_TO_ADDR
// hc_name :=  ;
16271: LD_ADDR_OWVAR 26
16275: PUSH
16276: LD_STRING 
16278: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
16279: LD_INT 1
16281: PPUSH
16282: LD_INT 11
16284: PPUSH
16285: LD_INT 10
16287: PPUSH
16288: CALL_OW 380
// un := CreateHuman ;
16292: LD_ADDR_VAR 0 1
16296: PUSH
16297: CALL_OW 44
16301: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16302: LD_VAR 0 1
16306: PPUSH
16307: LD_INT 1
16309: PPUSH
16310: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16314: LD_INT 35
16316: PPUSH
16317: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16321: LD_VAR 0 1
16325: PPUSH
16326: LD_INT 22
16328: PUSH
16329: LD_OWVAR 2
16333: PUSH
16334: EMPTY
16335: LIST
16336: LIST
16337: PPUSH
16338: CALL_OW 69
16342: PPUSH
16343: LD_VAR 0 1
16347: PPUSH
16348: CALL_OW 74
16352: PPUSH
16353: CALL_OW 115
// until IsDead ( un ) ;
16357: LD_VAR 0 1
16361: PPUSH
16362: CALL_OW 301
16366: IFFALSE 16314
// end ;
16368: PPOPN 1
16370: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
16371: LD_EXP 27
16375: PUSH
16376: LD_EXP 67
16380: AND
16381: IFFALSE 16393
16383: GO 16385
16385: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
16386: LD_STRING earthquake(getX(game), 0, 32)
16388: PPUSH
16389: CALL_OW 559
16393: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
16394: LD_EXP 27
16398: PUSH
16399: LD_EXP 68
16403: AND
16404: IFFALSE 16495
16406: GO 16408
16408: DISABLE
16409: LD_INT 0
16411: PPUSH
// begin enable ;
16412: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
16413: LD_ADDR_VAR 0 1
16417: PUSH
16418: LD_INT 22
16420: PUSH
16421: LD_OWVAR 2
16425: PUSH
16426: EMPTY
16427: LIST
16428: LIST
16429: PUSH
16430: LD_INT 21
16432: PUSH
16433: LD_INT 2
16435: PUSH
16436: EMPTY
16437: LIST
16438: LIST
16439: PUSH
16440: LD_INT 33
16442: PUSH
16443: LD_INT 3
16445: PUSH
16446: EMPTY
16447: LIST
16448: LIST
16449: PUSH
16450: EMPTY
16451: LIST
16452: LIST
16453: LIST
16454: PPUSH
16455: CALL_OW 69
16459: ST_TO_ADDR
// if not tmp then
16460: LD_VAR 0 1
16464: NOT
16465: IFFALSE 16469
// exit ;
16467: GO 16495
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16469: LD_VAR 0 1
16473: PUSH
16474: LD_INT 1
16476: PPUSH
16477: LD_VAR 0 1
16481: PPUSH
16482: CALL_OW 12
16486: ARRAY
16487: PPUSH
16488: LD_INT 1
16490: PPUSH
16491: CALL_OW 234
// end ;
16495: PPOPN 1
16497: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
16498: LD_EXP 27
16502: PUSH
16503: LD_EXP 69
16507: AND
16508: IFFALSE 16649
16510: GO 16512
16512: DISABLE
16513: LD_INT 0
16515: PPUSH
16516: PPUSH
16517: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16518: LD_ADDR_VAR 0 3
16522: PUSH
16523: LD_INT 22
16525: PUSH
16526: LD_OWVAR 2
16530: PUSH
16531: EMPTY
16532: LIST
16533: LIST
16534: PUSH
16535: LD_INT 25
16537: PUSH
16538: LD_INT 1
16540: PUSH
16541: EMPTY
16542: LIST
16543: LIST
16544: PUSH
16545: EMPTY
16546: LIST
16547: LIST
16548: PPUSH
16549: CALL_OW 69
16553: ST_TO_ADDR
// if not tmp then
16554: LD_VAR 0 3
16558: NOT
16559: IFFALSE 16563
// exit ;
16561: GO 16649
// un := tmp [ rand ( 1 , tmp ) ] ;
16563: LD_ADDR_VAR 0 2
16567: PUSH
16568: LD_VAR 0 3
16572: PUSH
16573: LD_INT 1
16575: PPUSH
16576: LD_VAR 0 3
16580: PPUSH
16581: CALL_OW 12
16585: ARRAY
16586: ST_TO_ADDR
// if Crawls ( un ) then
16587: LD_VAR 0 2
16591: PPUSH
16592: CALL_OW 318
16596: IFFALSE 16607
// ComWalk ( un ) ;
16598: LD_VAR 0 2
16602: PPUSH
16603: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
16607: LD_VAR 0 2
16611: PPUSH
16612: LD_INT 9
16614: PPUSH
16615: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
16619: LD_INT 28
16621: PPUSH
16622: LD_OWVAR 2
16626: PPUSH
16627: LD_INT 2
16629: PPUSH
16630: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
16634: LD_INT 29
16636: PPUSH
16637: LD_OWVAR 2
16641: PPUSH
16642: LD_INT 2
16644: PPUSH
16645: CALL_OW 322
// end ;
16649: PPOPN 3
16651: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
16652: LD_EXP 27
16656: PUSH
16657: LD_EXP 70
16661: AND
16662: IFFALSE 16773
16664: GO 16666
16666: DISABLE
16667: LD_INT 0
16669: PPUSH
16670: PPUSH
16671: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16672: LD_ADDR_VAR 0 3
16676: PUSH
16677: LD_INT 22
16679: PUSH
16680: LD_OWVAR 2
16684: PUSH
16685: EMPTY
16686: LIST
16687: LIST
16688: PUSH
16689: LD_INT 25
16691: PUSH
16692: LD_INT 1
16694: PUSH
16695: EMPTY
16696: LIST
16697: LIST
16698: PUSH
16699: EMPTY
16700: LIST
16701: LIST
16702: PPUSH
16703: CALL_OW 69
16707: ST_TO_ADDR
// if not tmp then
16708: LD_VAR 0 3
16712: NOT
16713: IFFALSE 16717
// exit ;
16715: GO 16773
// un := tmp [ rand ( 1 , tmp ) ] ;
16717: LD_ADDR_VAR 0 2
16721: PUSH
16722: LD_VAR 0 3
16726: PUSH
16727: LD_INT 1
16729: PPUSH
16730: LD_VAR 0 3
16734: PPUSH
16735: CALL_OW 12
16739: ARRAY
16740: ST_TO_ADDR
// if Crawls ( un ) then
16741: LD_VAR 0 2
16745: PPUSH
16746: CALL_OW 318
16750: IFFALSE 16761
// ComWalk ( un ) ;
16752: LD_VAR 0 2
16756: PPUSH
16757: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16761: LD_VAR 0 2
16765: PPUSH
16766: LD_INT 8
16768: PPUSH
16769: CALL_OW 336
// end ;
16773: PPOPN 3
16775: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
16776: LD_EXP 27
16780: PUSH
16781: LD_EXP 71
16785: AND
16786: IFFALSE 16930
16788: GO 16790
16790: DISABLE
16791: LD_INT 0
16793: PPUSH
16794: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
16795: LD_ADDR_VAR 0 2
16799: PUSH
16800: LD_INT 22
16802: PUSH
16803: LD_OWVAR 2
16807: PUSH
16808: EMPTY
16809: LIST
16810: LIST
16811: PUSH
16812: LD_INT 21
16814: PUSH
16815: LD_INT 2
16817: PUSH
16818: EMPTY
16819: LIST
16820: LIST
16821: PUSH
16822: LD_INT 2
16824: PUSH
16825: LD_INT 34
16827: PUSH
16828: LD_INT 12
16830: PUSH
16831: EMPTY
16832: LIST
16833: LIST
16834: PUSH
16835: LD_INT 34
16837: PUSH
16838: LD_INT 51
16840: PUSH
16841: EMPTY
16842: LIST
16843: LIST
16844: PUSH
16845: LD_INT 34
16847: PUSH
16848: LD_INT 32
16850: PUSH
16851: EMPTY
16852: LIST
16853: LIST
16854: PUSH
16855: EMPTY
16856: LIST
16857: LIST
16858: LIST
16859: LIST
16860: PUSH
16861: EMPTY
16862: LIST
16863: LIST
16864: LIST
16865: PPUSH
16866: CALL_OW 69
16870: ST_TO_ADDR
// if not tmp then
16871: LD_VAR 0 2
16875: NOT
16876: IFFALSE 16880
// exit ;
16878: GO 16930
// for i in tmp do
16880: LD_ADDR_VAR 0 1
16884: PUSH
16885: LD_VAR 0 2
16889: PUSH
16890: FOR_IN
16891: IFFALSE 16928
// if GetCargo ( i , mat_artifact ) = 0 then
16893: LD_VAR 0 1
16897: PPUSH
16898: LD_INT 4
16900: PPUSH
16901: CALL_OW 289
16905: PUSH
16906: LD_INT 0
16908: EQUAL
16909: IFFALSE 16926
// SetCargo ( i , mat_siberit , 100 ) ;
16911: LD_VAR 0 1
16915: PPUSH
16916: LD_INT 3
16918: PPUSH
16919: LD_INT 100
16921: PPUSH
16922: CALL_OW 290
16926: GO 16890
16928: POP
16929: POP
// end ;
16930: PPOPN 2
16932: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16933: LD_EXP 27
16937: PUSH
16938: LD_EXP 72
16942: AND
16943: IFFALSE 17126
16945: GO 16947
16947: DISABLE
16948: LD_INT 0
16950: PPUSH
16951: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16952: LD_ADDR_VAR 0 2
16956: PUSH
16957: LD_INT 22
16959: PUSH
16960: LD_OWVAR 2
16964: PUSH
16965: EMPTY
16966: LIST
16967: LIST
16968: PPUSH
16969: CALL_OW 69
16973: ST_TO_ADDR
// if not tmp then
16974: LD_VAR 0 2
16978: NOT
16979: IFFALSE 16983
// exit ;
16981: GO 17126
// for i := 1 to 2 do
16983: LD_ADDR_VAR 0 1
16987: PUSH
16988: DOUBLE
16989: LD_INT 1
16991: DEC
16992: ST_TO_ADDR
16993: LD_INT 2
16995: PUSH
16996: FOR_TO
16997: IFFALSE 17124
// begin uc_side := your_side ;
16999: LD_ADDR_OWVAR 20
17003: PUSH
17004: LD_OWVAR 2
17008: ST_TO_ADDR
// uc_nation := nation_american ;
17009: LD_ADDR_OWVAR 21
17013: PUSH
17014: LD_INT 1
17016: ST_TO_ADDR
// vc_chassis := us_morphling ;
17017: LD_ADDR_OWVAR 37
17021: PUSH
17022: LD_INT 5
17024: ST_TO_ADDR
// vc_engine := engine_siberite ;
17025: LD_ADDR_OWVAR 39
17029: PUSH
17030: LD_INT 3
17032: ST_TO_ADDR
// vc_control := control_computer ;
17033: LD_ADDR_OWVAR 38
17037: PUSH
17038: LD_INT 3
17040: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17041: LD_ADDR_OWVAR 40
17045: PUSH
17046: LD_INT 10
17048: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17049: LD_VAR 0 2
17053: PUSH
17054: LD_INT 1
17056: ARRAY
17057: PPUSH
17058: CALL_OW 310
17062: NOT
17063: IFFALSE 17110
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17065: CALL_OW 45
17069: PPUSH
17070: LD_VAR 0 2
17074: PUSH
17075: LD_INT 1
17077: ARRAY
17078: PPUSH
17079: CALL_OW 250
17083: PPUSH
17084: LD_VAR 0 2
17088: PUSH
17089: LD_INT 1
17091: ARRAY
17092: PPUSH
17093: CALL_OW 251
17097: PPUSH
17098: LD_INT 12
17100: PPUSH
17101: LD_INT 1
17103: PPUSH
17104: CALL_OW 50
17108: GO 17122
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17110: CALL_OW 45
17114: PPUSH
17115: LD_INT 1
17117: PPUSH
17118: CALL_OW 51
// end ;
17122: GO 16996
17124: POP
17125: POP
// end ;
17126: PPOPN 2
17128: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17129: LD_EXP 27
17133: PUSH
17134: LD_EXP 73
17138: AND
17139: IFFALSE 17361
17141: GO 17143
17143: DISABLE
17144: LD_INT 0
17146: PPUSH
17147: PPUSH
17148: PPUSH
17149: PPUSH
17150: PPUSH
17151: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17152: LD_ADDR_VAR 0 6
17156: PUSH
17157: LD_INT 22
17159: PUSH
17160: LD_OWVAR 2
17164: PUSH
17165: EMPTY
17166: LIST
17167: LIST
17168: PUSH
17169: LD_INT 21
17171: PUSH
17172: LD_INT 1
17174: PUSH
17175: EMPTY
17176: LIST
17177: LIST
17178: PUSH
17179: LD_INT 3
17181: PUSH
17182: LD_INT 23
17184: PUSH
17185: LD_INT 0
17187: PUSH
17188: EMPTY
17189: LIST
17190: LIST
17191: PUSH
17192: EMPTY
17193: LIST
17194: LIST
17195: PUSH
17196: EMPTY
17197: LIST
17198: LIST
17199: LIST
17200: PPUSH
17201: CALL_OW 69
17205: ST_TO_ADDR
// if not tmp then
17206: LD_VAR 0 6
17210: NOT
17211: IFFALSE 17215
// exit ;
17213: GO 17361
// s1 := rand ( 1 , 4 ) ;
17215: LD_ADDR_VAR 0 2
17219: PUSH
17220: LD_INT 1
17222: PPUSH
17223: LD_INT 4
17225: PPUSH
17226: CALL_OW 12
17230: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17231: LD_ADDR_VAR 0 4
17235: PUSH
17236: LD_VAR 0 6
17240: PUSH
17241: LD_INT 1
17243: ARRAY
17244: PPUSH
17245: LD_VAR 0 2
17249: PPUSH
17250: CALL_OW 259
17254: ST_TO_ADDR
// if s1 = 1 then
17255: LD_VAR 0 2
17259: PUSH
17260: LD_INT 1
17262: EQUAL
17263: IFFALSE 17283
// s2 := rand ( 2 , 4 ) else
17265: LD_ADDR_VAR 0 3
17269: PUSH
17270: LD_INT 2
17272: PPUSH
17273: LD_INT 4
17275: PPUSH
17276: CALL_OW 12
17280: ST_TO_ADDR
17281: GO 17291
// s2 := 1 ;
17283: LD_ADDR_VAR 0 3
17287: PUSH
17288: LD_INT 1
17290: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
17291: LD_ADDR_VAR 0 5
17295: PUSH
17296: LD_VAR 0 6
17300: PUSH
17301: LD_INT 1
17303: ARRAY
17304: PPUSH
17305: LD_VAR 0 3
17309: PPUSH
17310: CALL_OW 259
17314: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
17315: LD_VAR 0 6
17319: PUSH
17320: LD_INT 1
17322: ARRAY
17323: PPUSH
17324: LD_VAR 0 2
17328: PPUSH
17329: LD_VAR 0 5
17333: PPUSH
17334: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
17338: LD_VAR 0 6
17342: PUSH
17343: LD_INT 1
17345: ARRAY
17346: PPUSH
17347: LD_VAR 0 3
17351: PPUSH
17352: LD_VAR 0 4
17356: PPUSH
17357: CALL_OW 237
// end ;
17361: PPOPN 6
17363: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
17364: LD_EXP 27
17368: PUSH
17369: LD_EXP 74
17373: AND
17374: IFFALSE 17453
17376: GO 17378
17378: DISABLE
17379: LD_INT 0
17381: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
17382: LD_ADDR_VAR 0 1
17386: PUSH
17387: LD_INT 22
17389: PUSH
17390: LD_OWVAR 2
17394: PUSH
17395: EMPTY
17396: LIST
17397: LIST
17398: PUSH
17399: LD_INT 30
17401: PUSH
17402: LD_INT 3
17404: PUSH
17405: EMPTY
17406: LIST
17407: LIST
17408: PUSH
17409: EMPTY
17410: LIST
17411: LIST
17412: PPUSH
17413: CALL_OW 69
17417: ST_TO_ADDR
// if not tmp then
17418: LD_VAR 0 1
17422: NOT
17423: IFFALSE 17427
// exit ;
17425: GO 17453
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17427: LD_VAR 0 1
17431: PUSH
17432: LD_INT 1
17434: PPUSH
17435: LD_VAR 0 1
17439: PPUSH
17440: CALL_OW 12
17444: ARRAY
17445: PPUSH
17446: LD_INT 1
17448: PPUSH
17449: CALL_OW 234
// end ;
17453: PPOPN 1
17455: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
17456: LD_EXP 27
17460: PUSH
17461: LD_EXP 75
17465: AND
17466: IFFALSE 17578
17468: GO 17470
17470: DISABLE
17471: LD_INT 0
17473: PPUSH
17474: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
17475: LD_ADDR_VAR 0 2
17479: PUSH
17480: LD_INT 22
17482: PUSH
17483: LD_OWVAR 2
17487: PUSH
17488: EMPTY
17489: LIST
17490: LIST
17491: PUSH
17492: LD_INT 2
17494: PUSH
17495: LD_INT 30
17497: PUSH
17498: LD_INT 27
17500: PUSH
17501: EMPTY
17502: LIST
17503: LIST
17504: PUSH
17505: LD_INT 30
17507: PUSH
17508: LD_INT 26
17510: PUSH
17511: EMPTY
17512: LIST
17513: LIST
17514: PUSH
17515: LD_INT 30
17517: PUSH
17518: LD_INT 28
17520: PUSH
17521: EMPTY
17522: LIST
17523: LIST
17524: PUSH
17525: EMPTY
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: PUSH
17531: EMPTY
17532: LIST
17533: LIST
17534: PPUSH
17535: CALL_OW 69
17539: ST_TO_ADDR
// if not tmp then
17540: LD_VAR 0 2
17544: NOT
17545: IFFALSE 17549
// exit ;
17547: GO 17578
// for i in tmp do
17549: LD_ADDR_VAR 0 1
17553: PUSH
17554: LD_VAR 0 2
17558: PUSH
17559: FOR_IN
17560: IFFALSE 17576
// SetLives ( i , 1 ) ;
17562: LD_VAR 0 1
17566: PPUSH
17567: LD_INT 1
17569: PPUSH
17570: CALL_OW 234
17574: GO 17559
17576: POP
17577: POP
// end ;
17578: PPOPN 2
17580: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
17581: LD_EXP 27
17585: PUSH
17586: LD_EXP 76
17590: AND
17591: IFFALSE 17878
17593: GO 17595
17595: DISABLE
17596: LD_INT 0
17598: PPUSH
17599: PPUSH
17600: PPUSH
// begin i := rand ( 1 , 7 ) ;
17601: LD_ADDR_VAR 0 1
17605: PUSH
17606: LD_INT 1
17608: PPUSH
17609: LD_INT 7
17611: PPUSH
17612: CALL_OW 12
17616: ST_TO_ADDR
// case i of 1 :
17617: LD_VAR 0 1
17621: PUSH
17622: LD_INT 1
17624: DOUBLE
17625: EQUAL
17626: IFTRUE 17630
17628: GO 17640
17630: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
17631: LD_STRING earthquake(getX(game), 0, 32)
17633: PPUSH
17634: CALL_OW 559
17638: GO 17878
17640: LD_INT 2
17642: DOUBLE
17643: EQUAL
17644: IFTRUE 17648
17646: GO 17662
17648: POP
// begin ToLua ( displayStucuk(); ) ;
17649: LD_STRING displayStucuk();
17651: PPUSH
17652: CALL_OW 559
// ResetFog ;
17656: CALL_OW 335
// end ; 3 :
17660: GO 17878
17662: LD_INT 3
17664: DOUBLE
17665: EQUAL
17666: IFTRUE 17670
17668: GO 17774
17670: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17671: LD_ADDR_VAR 0 2
17675: PUSH
17676: LD_INT 22
17678: PUSH
17679: LD_OWVAR 2
17683: PUSH
17684: EMPTY
17685: LIST
17686: LIST
17687: PUSH
17688: LD_INT 25
17690: PUSH
17691: LD_INT 1
17693: PUSH
17694: EMPTY
17695: LIST
17696: LIST
17697: PUSH
17698: EMPTY
17699: LIST
17700: LIST
17701: PPUSH
17702: CALL_OW 69
17706: ST_TO_ADDR
// if not tmp then
17707: LD_VAR 0 2
17711: NOT
17712: IFFALSE 17716
// exit ;
17714: GO 17878
// un := tmp [ rand ( 1 , tmp ) ] ;
17716: LD_ADDR_VAR 0 3
17720: PUSH
17721: LD_VAR 0 2
17725: PUSH
17726: LD_INT 1
17728: PPUSH
17729: LD_VAR 0 2
17733: PPUSH
17734: CALL_OW 12
17738: ARRAY
17739: ST_TO_ADDR
// if Crawls ( un ) then
17740: LD_VAR 0 3
17744: PPUSH
17745: CALL_OW 318
17749: IFFALSE 17760
// ComWalk ( un ) ;
17751: LD_VAR 0 3
17755: PPUSH
17756: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17760: LD_VAR 0 3
17764: PPUSH
17765: LD_INT 8
17767: PPUSH
17768: CALL_OW 336
// end ; 4 :
17772: GO 17878
17774: LD_INT 4
17776: DOUBLE
17777: EQUAL
17778: IFTRUE 17782
17780: GO 17856
17782: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17783: LD_ADDR_VAR 0 2
17787: PUSH
17788: LD_INT 22
17790: PUSH
17791: LD_OWVAR 2
17795: PUSH
17796: EMPTY
17797: LIST
17798: LIST
17799: PUSH
17800: LD_INT 30
17802: PUSH
17803: LD_INT 29
17805: PUSH
17806: EMPTY
17807: LIST
17808: LIST
17809: PUSH
17810: EMPTY
17811: LIST
17812: LIST
17813: PPUSH
17814: CALL_OW 69
17818: ST_TO_ADDR
// if not tmp then
17819: LD_VAR 0 2
17823: NOT
17824: IFFALSE 17828
// exit ;
17826: GO 17878
// CenterNowOnUnits ( tmp [ 1 ] ) ;
17828: LD_VAR 0 2
17832: PUSH
17833: LD_INT 1
17835: ARRAY
17836: PPUSH
17837: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
17841: LD_VAR 0 2
17845: PUSH
17846: LD_INT 1
17848: ARRAY
17849: PPUSH
17850: CALL_OW 65
// end ; 5 .. 7 :
17854: GO 17878
17856: LD_INT 5
17858: DOUBLE
17859: GREATEREQUAL
17860: IFFALSE 17868
17862: LD_INT 7
17864: DOUBLE
17865: LESSEQUAL
17866: IFTRUE 17870
17868: GO 17877
17870: POP
// StreamSibBomb ; end ;
17871: CALL 14115 0 0
17875: GO 17878
17877: POP
// end ;
17878: PPOPN 3
17880: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17881: LD_EXP 27
17885: PUSH
17886: LD_EXP 77
17890: AND
17891: IFFALSE 18047
17893: GO 17895
17895: DISABLE
17896: LD_INT 0
17898: PPUSH
17899: PPUSH
17900: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17901: LD_ADDR_VAR 0 2
17905: PUSH
17906: LD_INT 81
17908: PUSH
17909: LD_OWVAR 2
17913: PUSH
17914: EMPTY
17915: LIST
17916: LIST
17917: PUSH
17918: LD_INT 2
17920: PUSH
17921: LD_INT 21
17923: PUSH
17924: LD_INT 1
17926: PUSH
17927: EMPTY
17928: LIST
17929: LIST
17930: PUSH
17931: LD_INT 21
17933: PUSH
17934: LD_INT 2
17936: PUSH
17937: EMPTY
17938: LIST
17939: LIST
17940: PUSH
17941: EMPTY
17942: LIST
17943: LIST
17944: LIST
17945: PUSH
17946: EMPTY
17947: LIST
17948: LIST
17949: PPUSH
17950: CALL_OW 69
17954: ST_TO_ADDR
// if not tmp then
17955: LD_VAR 0 2
17959: NOT
17960: IFFALSE 17964
// exit ;
17962: GO 18047
// p := 0 ;
17964: LD_ADDR_VAR 0 3
17968: PUSH
17969: LD_INT 0
17971: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17972: LD_INT 35
17974: PPUSH
17975: CALL_OW 67
// p := p + 1 ;
17979: LD_ADDR_VAR 0 3
17983: PUSH
17984: LD_VAR 0 3
17988: PUSH
17989: LD_INT 1
17991: PLUS
17992: ST_TO_ADDR
// for i in tmp do
17993: LD_ADDR_VAR 0 1
17997: PUSH
17998: LD_VAR 0 2
18002: PUSH
18003: FOR_IN
18004: IFFALSE 18035
// if GetLives ( i ) < 1000 then
18006: LD_VAR 0 1
18010: PPUSH
18011: CALL_OW 256
18015: PUSH
18016: LD_INT 1000
18018: LESS
18019: IFFALSE 18033
// SetLives ( i , 1000 ) ;
18021: LD_VAR 0 1
18025: PPUSH
18026: LD_INT 1000
18028: PPUSH
18029: CALL_OW 234
18033: GO 18003
18035: POP
18036: POP
// until p > 20 ;
18037: LD_VAR 0 3
18041: PUSH
18042: LD_INT 20
18044: GREATER
18045: IFFALSE 17972
// end ;
18047: PPOPN 3
18049: END
// every 0 0$1 trigger StreamModeActive and sTime do
18050: LD_EXP 27
18054: PUSH
18055: LD_EXP 78
18059: AND
18060: IFFALSE 18095
18062: GO 18064
18064: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18065: LD_INT 28
18067: PPUSH
18068: LD_OWVAR 2
18072: PPUSH
18073: LD_INT 2
18075: PPUSH
18076: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18080: LD_INT 30
18082: PPUSH
18083: LD_OWVAR 2
18087: PPUSH
18088: LD_INT 2
18090: PPUSH
18091: CALL_OW 322
// end ;
18095: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18096: LD_EXP 27
18100: PUSH
18101: LD_EXP 79
18105: AND
18106: IFFALSE 18227
18108: GO 18110
18110: DISABLE
18111: LD_INT 0
18113: PPUSH
18114: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18115: LD_ADDR_VAR 0 2
18119: PUSH
18120: LD_INT 22
18122: PUSH
18123: LD_OWVAR 2
18127: PUSH
18128: EMPTY
18129: LIST
18130: LIST
18131: PUSH
18132: LD_INT 21
18134: PUSH
18135: LD_INT 1
18137: PUSH
18138: EMPTY
18139: LIST
18140: LIST
18141: PUSH
18142: LD_INT 3
18144: PUSH
18145: LD_INT 23
18147: PUSH
18148: LD_INT 0
18150: PUSH
18151: EMPTY
18152: LIST
18153: LIST
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: LIST
18163: PPUSH
18164: CALL_OW 69
18168: ST_TO_ADDR
// if not tmp then
18169: LD_VAR 0 2
18173: NOT
18174: IFFALSE 18178
// exit ;
18176: GO 18227
// for i in tmp do
18178: LD_ADDR_VAR 0 1
18182: PUSH
18183: LD_VAR 0 2
18187: PUSH
18188: FOR_IN
18189: IFFALSE 18225
// begin if Crawls ( i ) then
18191: LD_VAR 0 1
18195: PPUSH
18196: CALL_OW 318
18200: IFFALSE 18211
// ComWalk ( i ) ;
18202: LD_VAR 0 1
18206: PPUSH
18207: CALL_OW 138
// SetClass ( i , 2 ) ;
18211: LD_VAR 0 1
18215: PPUSH
18216: LD_INT 2
18218: PPUSH
18219: CALL_OW 336
// end ;
18223: GO 18188
18225: POP
18226: POP
// end ;
18227: PPOPN 2
18229: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18230: LD_EXP 27
18234: PUSH
18235: LD_EXP 80
18239: AND
18240: IFFALSE 18528
18242: GO 18244
18244: DISABLE
18245: LD_INT 0
18247: PPUSH
18248: PPUSH
18249: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
18250: LD_OWVAR 2
18254: PPUSH
18255: LD_INT 9
18257: PPUSH
18258: LD_INT 1
18260: PPUSH
18261: LD_INT 1
18263: PPUSH
18264: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
18268: LD_INT 9
18270: PPUSH
18271: LD_OWVAR 2
18275: PPUSH
18276: CALL_OW 343
// uc_side := 9 ;
18280: LD_ADDR_OWVAR 20
18284: PUSH
18285: LD_INT 9
18287: ST_TO_ADDR
// uc_nation := 2 ;
18288: LD_ADDR_OWVAR 21
18292: PUSH
18293: LD_INT 2
18295: ST_TO_ADDR
// hc_name := Dark Warrior ;
18296: LD_ADDR_OWVAR 26
18300: PUSH
18301: LD_STRING Dark Warrior
18303: ST_TO_ADDR
// hc_gallery :=  ;
18304: LD_ADDR_OWVAR 33
18308: PUSH
18309: LD_STRING 
18311: ST_TO_ADDR
// hc_noskilllimit := true ;
18312: LD_ADDR_OWVAR 76
18316: PUSH
18317: LD_INT 1
18319: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
18320: LD_ADDR_OWVAR 31
18324: PUSH
18325: LD_INT 30
18327: PUSH
18328: LD_INT 30
18330: PUSH
18331: LD_INT 30
18333: PUSH
18334: LD_INT 30
18336: PUSH
18337: EMPTY
18338: LIST
18339: LIST
18340: LIST
18341: LIST
18342: ST_TO_ADDR
// un := CreateHuman ;
18343: LD_ADDR_VAR 0 3
18347: PUSH
18348: CALL_OW 44
18352: ST_TO_ADDR
// hc_noskilllimit := false ;
18353: LD_ADDR_OWVAR 76
18357: PUSH
18358: LD_INT 0
18360: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18361: LD_VAR 0 3
18365: PPUSH
18366: LD_INT 1
18368: PPUSH
18369: CALL_OW 51
// ToLua ( playRanger() ) ;
18373: LD_STRING playRanger()
18375: PPUSH
18376: CALL_OW 559
// p := 0 ;
18380: LD_ADDR_VAR 0 2
18384: PUSH
18385: LD_INT 0
18387: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18388: LD_INT 35
18390: PPUSH
18391: CALL_OW 67
// p := p + 1 ;
18395: LD_ADDR_VAR 0 2
18399: PUSH
18400: LD_VAR 0 2
18404: PUSH
18405: LD_INT 1
18407: PLUS
18408: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
18409: LD_VAR 0 3
18413: PPUSH
18414: CALL_OW 256
18418: PUSH
18419: LD_INT 1000
18421: LESS
18422: IFFALSE 18436
// SetLives ( un , 1000 ) ;
18424: LD_VAR 0 3
18428: PPUSH
18429: LD_INT 1000
18431: PPUSH
18432: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
18436: LD_VAR 0 3
18440: PPUSH
18441: LD_INT 81
18443: PUSH
18444: LD_OWVAR 2
18448: PUSH
18449: EMPTY
18450: LIST
18451: LIST
18452: PUSH
18453: LD_INT 91
18455: PUSH
18456: LD_VAR 0 3
18460: PUSH
18461: LD_INT 30
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: LIST
18468: PUSH
18469: EMPTY
18470: LIST
18471: LIST
18472: PPUSH
18473: CALL_OW 69
18477: PPUSH
18478: LD_VAR 0 3
18482: PPUSH
18483: CALL_OW 74
18487: PPUSH
18488: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
18492: LD_VAR 0 2
18496: PUSH
18497: LD_INT 80
18499: GREATER
18500: PUSH
18501: LD_VAR 0 3
18505: PPUSH
18506: CALL_OW 301
18510: OR
18511: IFFALSE 18388
// if un then
18513: LD_VAR 0 3
18517: IFFALSE 18528
// RemoveUnit ( un ) ;
18519: LD_VAR 0 3
18523: PPUSH
18524: CALL_OW 64
// end ;
18528: PPOPN 3
18530: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
18531: LD_EXP 81
18535: IFFALSE 18651
18537: GO 18539
18539: DISABLE
18540: LD_INT 0
18542: PPUSH
18543: PPUSH
18544: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18545: LD_ADDR_VAR 0 2
18549: PUSH
18550: LD_INT 81
18552: PUSH
18553: LD_OWVAR 2
18557: PUSH
18558: EMPTY
18559: LIST
18560: LIST
18561: PUSH
18562: LD_INT 21
18564: PUSH
18565: LD_INT 1
18567: PUSH
18568: EMPTY
18569: LIST
18570: LIST
18571: PUSH
18572: EMPTY
18573: LIST
18574: LIST
18575: PPUSH
18576: CALL_OW 69
18580: ST_TO_ADDR
// ToLua ( playComputer() ) ;
18581: LD_STRING playComputer()
18583: PPUSH
18584: CALL_OW 559
// if not tmp then
18588: LD_VAR 0 2
18592: NOT
18593: IFFALSE 18597
// exit ;
18595: GO 18651
// for i in tmp do
18597: LD_ADDR_VAR 0 1
18601: PUSH
18602: LD_VAR 0 2
18606: PUSH
18607: FOR_IN
18608: IFFALSE 18649
// for j := 1 to 4 do
18610: LD_ADDR_VAR 0 3
18614: PUSH
18615: DOUBLE
18616: LD_INT 1
18618: DEC
18619: ST_TO_ADDR
18620: LD_INT 4
18622: PUSH
18623: FOR_TO
18624: IFFALSE 18645
// SetSkill ( i , j , 10 ) ;
18626: LD_VAR 0 1
18630: PPUSH
18631: LD_VAR 0 3
18635: PPUSH
18636: LD_INT 10
18638: PPUSH
18639: CALL_OW 237
18643: GO 18623
18645: POP
18646: POP
18647: GO 18607
18649: POP
18650: POP
// end ;
18651: PPOPN 3
18653: END
// every 0 0$1 trigger s30 do var i , tmp ;
18654: LD_EXP 82
18658: IFFALSE 18727
18660: GO 18662
18662: DISABLE
18663: LD_INT 0
18665: PPUSH
18666: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18667: LD_ADDR_VAR 0 2
18671: PUSH
18672: LD_INT 22
18674: PUSH
18675: LD_OWVAR 2
18679: PUSH
18680: EMPTY
18681: LIST
18682: LIST
18683: PPUSH
18684: CALL_OW 69
18688: ST_TO_ADDR
// if not tmp then
18689: LD_VAR 0 2
18693: NOT
18694: IFFALSE 18698
// exit ;
18696: GO 18727
// for i in tmp do
18698: LD_ADDR_VAR 0 1
18702: PUSH
18703: LD_VAR 0 2
18707: PUSH
18708: FOR_IN
18709: IFFALSE 18725
// SetLives ( i , 300 ) ;
18711: LD_VAR 0 1
18715: PPUSH
18716: LD_INT 300
18718: PPUSH
18719: CALL_OW 234
18723: GO 18708
18725: POP
18726: POP
// end ;
18727: PPOPN 2
18729: END
// every 0 0$1 trigger s60 do var i , tmp ;
18730: LD_EXP 83
18734: IFFALSE 18803
18736: GO 18738
18738: DISABLE
18739: LD_INT 0
18741: PPUSH
18742: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18743: LD_ADDR_VAR 0 2
18747: PUSH
18748: LD_INT 22
18750: PUSH
18751: LD_OWVAR 2
18755: PUSH
18756: EMPTY
18757: LIST
18758: LIST
18759: PPUSH
18760: CALL_OW 69
18764: ST_TO_ADDR
// if not tmp then
18765: LD_VAR 0 2
18769: NOT
18770: IFFALSE 18774
// exit ;
18772: GO 18803
// for i in tmp do
18774: LD_ADDR_VAR 0 1
18778: PUSH
18779: LD_VAR 0 2
18783: PUSH
18784: FOR_IN
18785: IFFALSE 18801
// SetLives ( i , 600 ) ;
18787: LD_VAR 0 1
18791: PPUSH
18792: LD_INT 600
18794: PPUSH
18795: CALL_OW 234
18799: GO 18784
18801: POP
18802: POP
// end ;
18803: PPOPN 2
18805: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18806: LD_INT 0
18808: PPUSH
// case cmd of 301 :
18809: LD_VAR 0 1
18813: PUSH
18814: LD_INT 301
18816: DOUBLE
18817: EQUAL
18818: IFTRUE 18822
18820: GO 18854
18822: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
18823: LD_VAR 0 6
18827: PPUSH
18828: LD_VAR 0 7
18832: PPUSH
18833: LD_VAR 0 8
18837: PPUSH
18838: LD_VAR 0 4
18842: PPUSH
18843: LD_VAR 0 5
18847: PPUSH
18848: CALL 20055 0 5
18852: GO 18975
18854: LD_INT 302
18856: DOUBLE
18857: EQUAL
18858: IFTRUE 18862
18860: GO 18899
18862: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
18863: LD_VAR 0 6
18867: PPUSH
18868: LD_VAR 0 7
18872: PPUSH
18873: LD_VAR 0 8
18877: PPUSH
18878: LD_VAR 0 9
18882: PPUSH
18883: LD_VAR 0 4
18887: PPUSH
18888: LD_VAR 0 5
18892: PPUSH
18893: CALL 20146 0 6
18897: GO 18975
18899: LD_INT 303
18901: DOUBLE
18902: EQUAL
18903: IFTRUE 18907
18905: GO 18944
18907: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
18908: LD_VAR 0 6
18912: PPUSH
18913: LD_VAR 0 7
18917: PPUSH
18918: LD_VAR 0 8
18922: PPUSH
18923: LD_VAR 0 9
18927: PPUSH
18928: LD_VAR 0 4
18932: PPUSH
18933: LD_VAR 0 5
18937: PPUSH
18938: CALL 18980 0 6
18942: GO 18975
18944: LD_INT 304
18946: DOUBLE
18947: EQUAL
18948: IFTRUE 18952
18950: GO 18974
18952: POP
// hHackTeleport ( unit , x , y ) ; end ;
18953: LD_VAR 0 2
18957: PPUSH
18958: LD_VAR 0 4
18962: PPUSH
18963: LD_VAR 0 5
18967: PPUSH
18968: CALL 20739 0 3
18972: GO 18975
18974: POP
// end ;
18975: LD_VAR 0 12
18979: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
18980: LD_INT 0
18982: PPUSH
18983: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
18984: LD_VAR 0 1
18988: PUSH
18989: LD_INT 1
18991: LESS
18992: PUSH
18993: LD_VAR 0 1
18997: PUSH
18998: LD_INT 3
19000: GREATER
19001: OR
19002: PUSH
19003: LD_VAR 0 5
19007: PPUSH
19008: LD_VAR 0 6
19012: PPUSH
19013: CALL_OW 428
19017: OR
19018: IFFALSE 19022
// exit ;
19020: GO 19742
// uc_side := your_side ;
19022: LD_ADDR_OWVAR 20
19026: PUSH
19027: LD_OWVAR 2
19031: ST_TO_ADDR
// uc_nation := nation ;
19032: LD_ADDR_OWVAR 21
19036: PUSH
19037: LD_VAR 0 1
19041: ST_TO_ADDR
// bc_level = 1 ;
19042: LD_ADDR_OWVAR 43
19046: PUSH
19047: LD_INT 1
19049: ST_TO_ADDR
// case btype of 1 :
19050: LD_VAR 0 2
19054: PUSH
19055: LD_INT 1
19057: DOUBLE
19058: EQUAL
19059: IFTRUE 19063
19061: GO 19074
19063: POP
// bc_type := b_depot ; 2 :
19064: LD_ADDR_OWVAR 42
19068: PUSH
19069: LD_INT 0
19071: ST_TO_ADDR
19072: GO 19686
19074: LD_INT 2
19076: DOUBLE
19077: EQUAL
19078: IFTRUE 19082
19080: GO 19093
19082: POP
// bc_type := b_warehouse ; 3 :
19083: LD_ADDR_OWVAR 42
19087: PUSH
19088: LD_INT 1
19090: ST_TO_ADDR
19091: GO 19686
19093: LD_INT 3
19095: DOUBLE
19096: EQUAL
19097: IFTRUE 19101
19099: GO 19112
19101: POP
// bc_type := b_lab ; 4 .. 9 :
19102: LD_ADDR_OWVAR 42
19106: PUSH
19107: LD_INT 6
19109: ST_TO_ADDR
19110: GO 19686
19112: LD_INT 4
19114: DOUBLE
19115: GREATEREQUAL
19116: IFFALSE 19124
19118: LD_INT 9
19120: DOUBLE
19121: LESSEQUAL
19122: IFTRUE 19126
19124: GO 19178
19126: POP
// begin bc_type := b_lab_half ;
19127: LD_ADDR_OWVAR 42
19131: PUSH
19132: LD_INT 7
19134: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
19135: LD_ADDR_OWVAR 44
19139: PUSH
19140: LD_INT 10
19142: PUSH
19143: LD_INT 11
19145: PUSH
19146: LD_INT 12
19148: PUSH
19149: LD_INT 15
19151: PUSH
19152: LD_INT 14
19154: PUSH
19155: LD_INT 13
19157: PUSH
19158: EMPTY
19159: LIST
19160: LIST
19161: LIST
19162: LIST
19163: LIST
19164: LIST
19165: PUSH
19166: LD_VAR 0 2
19170: PUSH
19171: LD_INT 3
19173: MINUS
19174: ARRAY
19175: ST_TO_ADDR
// end ; 10 .. 13 :
19176: GO 19686
19178: LD_INT 10
19180: DOUBLE
19181: GREATEREQUAL
19182: IFFALSE 19190
19184: LD_INT 13
19186: DOUBLE
19187: LESSEQUAL
19188: IFTRUE 19192
19190: GO 19269
19192: POP
// begin bc_type := b_lab_full ;
19193: LD_ADDR_OWVAR 42
19197: PUSH
19198: LD_INT 8
19200: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
19201: LD_ADDR_OWVAR 44
19205: PUSH
19206: LD_INT 10
19208: PUSH
19209: LD_INT 12
19211: PUSH
19212: LD_INT 14
19214: PUSH
19215: LD_INT 13
19217: PUSH
19218: EMPTY
19219: LIST
19220: LIST
19221: LIST
19222: LIST
19223: PUSH
19224: LD_VAR 0 2
19228: PUSH
19229: LD_INT 9
19231: MINUS
19232: ARRAY
19233: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
19234: LD_ADDR_OWVAR 45
19238: PUSH
19239: LD_INT 11
19241: PUSH
19242: LD_INT 15
19244: PUSH
19245: LD_INT 12
19247: PUSH
19248: LD_INT 15
19250: PUSH
19251: EMPTY
19252: LIST
19253: LIST
19254: LIST
19255: LIST
19256: PUSH
19257: LD_VAR 0 2
19261: PUSH
19262: LD_INT 9
19264: MINUS
19265: ARRAY
19266: ST_TO_ADDR
// end ; 14 :
19267: GO 19686
19269: LD_INT 14
19271: DOUBLE
19272: EQUAL
19273: IFTRUE 19277
19275: GO 19288
19277: POP
// bc_type := b_workshop ; 15 :
19278: LD_ADDR_OWVAR 42
19282: PUSH
19283: LD_INT 2
19285: ST_TO_ADDR
19286: GO 19686
19288: LD_INT 15
19290: DOUBLE
19291: EQUAL
19292: IFTRUE 19296
19294: GO 19307
19296: POP
// bc_type := b_factory ; 16 :
19297: LD_ADDR_OWVAR 42
19301: PUSH
19302: LD_INT 3
19304: ST_TO_ADDR
19305: GO 19686
19307: LD_INT 16
19309: DOUBLE
19310: EQUAL
19311: IFTRUE 19315
19313: GO 19326
19315: POP
// bc_type := b_ext_gun ; 17 :
19316: LD_ADDR_OWVAR 42
19320: PUSH
19321: LD_INT 17
19323: ST_TO_ADDR
19324: GO 19686
19326: LD_INT 17
19328: DOUBLE
19329: EQUAL
19330: IFTRUE 19334
19332: GO 19362
19334: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
19335: LD_ADDR_OWVAR 42
19339: PUSH
19340: LD_INT 19
19342: PUSH
19343: LD_INT 23
19345: PUSH
19346: LD_INT 19
19348: PUSH
19349: EMPTY
19350: LIST
19351: LIST
19352: LIST
19353: PUSH
19354: LD_VAR 0 1
19358: ARRAY
19359: ST_TO_ADDR
19360: GO 19686
19362: LD_INT 18
19364: DOUBLE
19365: EQUAL
19366: IFTRUE 19370
19368: GO 19381
19370: POP
// bc_type := b_ext_radar ; 19 :
19371: LD_ADDR_OWVAR 42
19375: PUSH
19376: LD_INT 20
19378: ST_TO_ADDR
19379: GO 19686
19381: LD_INT 19
19383: DOUBLE
19384: EQUAL
19385: IFTRUE 19389
19387: GO 19400
19389: POP
// bc_type := b_ext_radio ; 20 :
19390: LD_ADDR_OWVAR 42
19394: PUSH
19395: LD_INT 22
19397: ST_TO_ADDR
19398: GO 19686
19400: LD_INT 20
19402: DOUBLE
19403: EQUAL
19404: IFTRUE 19408
19406: GO 19419
19408: POP
// bc_type := b_ext_siberium ; 21 :
19409: LD_ADDR_OWVAR 42
19413: PUSH
19414: LD_INT 21
19416: ST_TO_ADDR
19417: GO 19686
19419: LD_INT 21
19421: DOUBLE
19422: EQUAL
19423: IFTRUE 19427
19425: GO 19438
19427: POP
// bc_type := b_ext_computer ; 22 :
19428: LD_ADDR_OWVAR 42
19432: PUSH
19433: LD_INT 24
19435: ST_TO_ADDR
19436: GO 19686
19438: LD_INT 22
19440: DOUBLE
19441: EQUAL
19442: IFTRUE 19446
19444: GO 19457
19446: POP
// bc_type := b_ext_track ; 23 :
19447: LD_ADDR_OWVAR 42
19451: PUSH
19452: LD_INT 16
19454: ST_TO_ADDR
19455: GO 19686
19457: LD_INT 23
19459: DOUBLE
19460: EQUAL
19461: IFTRUE 19465
19463: GO 19476
19465: POP
// bc_type := b_ext_laser ; 24 :
19466: LD_ADDR_OWVAR 42
19470: PUSH
19471: LD_INT 25
19473: ST_TO_ADDR
19474: GO 19686
19476: LD_INT 24
19478: DOUBLE
19479: EQUAL
19480: IFTRUE 19484
19482: GO 19495
19484: POP
// bc_type := b_control_tower ; 25 :
19485: LD_ADDR_OWVAR 42
19489: PUSH
19490: LD_INT 36
19492: ST_TO_ADDR
19493: GO 19686
19495: LD_INT 25
19497: DOUBLE
19498: EQUAL
19499: IFTRUE 19503
19501: GO 19514
19503: POP
// bc_type := b_breastwork ; 26 :
19504: LD_ADDR_OWVAR 42
19508: PUSH
19509: LD_INT 31
19511: ST_TO_ADDR
19512: GO 19686
19514: LD_INT 26
19516: DOUBLE
19517: EQUAL
19518: IFTRUE 19522
19520: GO 19533
19522: POP
// bc_type := b_bunker ; 27 :
19523: LD_ADDR_OWVAR 42
19527: PUSH
19528: LD_INT 32
19530: ST_TO_ADDR
19531: GO 19686
19533: LD_INT 27
19535: DOUBLE
19536: EQUAL
19537: IFTRUE 19541
19539: GO 19552
19541: POP
// bc_type := b_turret ; 28 :
19542: LD_ADDR_OWVAR 42
19546: PUSH
19547: LD_INT 33
19549: ST_TO_ADDR
19550: GO 19686
19552: LD_INT 28
19554: DOUBLE
19555: EQUAL
19556: IFTRUE 19560
19558: GO 19571
19560: POP
// bc_type := b_armoury ; 29 :
19561: LD_ADDR_OWVAR 42
19565: PUSH
19566: LD_INT 4
19568: ST_TO_ADDR
19569: GO 19686
19571: LD_INT 29
19573: DOUBLE
19574: EQUAL
19575: IFTRUE 19579
19577: GO 19590
19579: POP
// bc_type := b_barracks ; 30 :
19580: LD_ADDR_OWVAR 42
19584: PUSH
19585: LD_INT 5
19587: ST_TO_ADDR
19588: GO 19686
19590: LD_INT 30
19592: DOUBLE
19593: EQUAL
19594: IFTRUE 19598
19596: GO 19609
19598: POP
// bc_type := b_solar_power ; 31 :
19599: LD_ADDR_OWVAR 42
19603: PUSH
19604: LD_INT 27
19606: ST_TO_ADDR
19607: GO 19686
19609: LD_INT 31
19611: DOUBLE
19612: EQUAL
19613: IFTRUE 19617
19615: GO 19628
19617: POP
// bc_type := b_oil_power ; 32 :
19618: LD_ADDR_OWVAR 42
19622: PUSH
19623: LD_INT 26
19625: ST_TO_ADDR
19626: GO 19686
19628: LD_INT 32
19630: DOUBLE
19631: EQUAL
19632: IFTRUE 19636
19634: GO 19647
19636: POP
// bc_type := b_siberite_power ; 33 :
19637: LD_ADDR_OWVAR 42
19641: PUSH
19642: LD_INT 28
19644: ST_TO_ADDR
19645: GO 19686
19647: LD_INT 33
19649: DOUBLE
19650: EQUAL
19651: IFTRUE 19655
19653: GO 19666
19655: POP
// bc_type := b_oil_mine ; 34 :
19656: LD_ADDR_OWVAR 42
19660: PUSH
19661: LD_INT 29
19663: ST_TO_ADDR
19664: GO 19686
19666: LD_INT 34
19668: DOUBLE
19669: EQUAL
19670: IFTRUE 19674
19672: GO 19685
19674: POP
// bc_type := b_siberite_mine ; end ;
19675: LD_ADDR_OWVAR 42
19679: PUSH
19680: LD_INT 30
19682: ST_TO_ADDR
19683: GO 19686
19685: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
19686: LD_ADDR_VAR 0 8
19690: PUSH
19691: LD_VAR 0 5
19695: PPUSH
19696: LD_VAR 0 6
19700: PPUSH
19701: LD_VAR 0 3
19705: PPUSH
19706: CALL_OW 47
19710: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
19711: LD_OWVAR 42
19715: PUSH
19716: LD_INT 32
19718: PUSH
19719: LD_INT 33
19721: PUSH
19722: EMPTY
19723: LIST
19724: LIST
19725: IN
19726: IFFALSE 19742
// PlaceWeaponTurret ( b , weapon ) ;
19728: LD_VAR 0 8
19732: PPUSH
19733: LD_VAR 0 4
19737: PPUSH
19738: CALL_OW 431
// end ;
19742: LD_VAR 0 7
19746: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
19747: LD_INT 0
19749: PPUSH
19750: PPUSH
19751: PPUSH
19752: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19753: LD_ADDR_VAR 0 4
19757: PUSH
19758: LD_INT 22
19760: PUSH
19761: LD_OWVAR 2
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: PUSH
19770: LD_INT 2
19772: PUSH
19773: LD_INT 30
19775: PUSH
19776: LD_INT 0
19778: PUSH
19779: EMPTY
19780: LIST
19781: LIST
19782: PUSH
19783: LD_INT 30
19785: PUSH
19786: LD_INT 1
19788: PUSH
19789: EMPTY
19790: LIST
19791: LIST
19792: PUSH
19793: EMPTY
19794: LIST
19795: LIST
19796: LIST
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: PPUSH
19802: CALL_OW 69
19806: ST_TO_ADDR
// if not tmp then
19807: LD_VAR 0 4
19811: NOT
19812: IFFALSE 19816
// exit ;
19814: GO 19875
// for i in tmp do
19816: LD_ADDR_VAR 0 2
19820: PUSH
19821: LD_VAR 0 4
19825: PUSH
19826: FOR_IN
19827: IFFALSE 19873
// for j = 1 to 3 do
19829: LD_ADDR_VAR 0 3
19833: PUSH
19834: DOUBLE
19835: LD_INT 1
19837: DEC
19838: ST_TO_ADDR
19839: LD_INT 3
19841: PUSH
19842: FOR_TO
19843: IFFALSE 19869
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
19845: LD_VAR 0 2
19849: PPUSH
19850: CALL_OW 274
19854: PPUSH
19855: LD_VAR 0 3
19859: PPUSH
19860: LD_INT 99999
19862: PPUSH
19863: CALL_OW 277
19867: GO 19842
19869: POP
19870: POP
19871: GO 19826
19873: POP
19874: POP
// end ;
19875: LD_VAR 0 1
19879: RET
// export function hHackSetLevel10 ; var i , j ; begin
19880: LD_INT 0
19882: PPUSH
19883: PPUSH
19884: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19885: LD_ADDR_VAR 0 2
19889: PUSH
19890: LD_INT 21
19892: PUSH
19893: LD_INT 1
19895: PUSH
19896: EMPTY
19897: LIST
19898: LIST
19899: PPUSH
19900: CALL_OW 69
19904: PUSH
19905: FOR_IN
19906: IFFALSE 19958
// if IsSelected ( i ) then
19908: LD_VAR 0 2
19912: PPUSH
19913: CALL_OW 306
19917: IFFALSE 19956
// begin for j := 1 to 4 do
19919: LD_ADDR_VAR 0 3
19923: PUSH
19924: DOUBLE
19925: LD_INT 1
19927: DEC
19928: ST_TO_ADDR
19929: LD_INT 4
19931: PUSH
19932: FOR_TO
19933: IFFALSE 19954
// SetSkill ( i , j , 10 ) ;
19935: LD_VAR 0 2
19939: PPUSH
19940: LD_VAR 0 3
19944: PPUSH
19945: LD_INT 10
19947: PPUSH
19948: CALL_OW 237
19952: GO 19932
19954: POP
19955: POP
// end ;
19956: GO 19905
19958: POP
19959: POP
// end ;
19960: LD_VAR 0 1
19964: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
19965: LD_INT 0
19967: PPUSH
19968: PPUSH
19969: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
19970: LD_ADDR_VAR 0 2
19974: PUSH
19975: LD_INT 22
19977: PUSH
19978: LD_OWVAR 2
19982: PUSH
19983: EMPTY
19984: LIST
19985: LIST
19986: PUSH
19987: LD_INT 21
19989: PUSH
19990: LD_INT 1
19992: PUSH
19993: EMPTY
19994: LIST
19995: LIST
19996: PUSH
19997: EMPTY
19998: LIST
19999: LIST
20000: PPUSH
20001: CALL_OW 69
20005: PUSH
20006: FOR_IN
20007: IFFALSE 20048
// begin for j := 1 to 4 do
20009: LD_ADDR_VAR 0 3
20013: PUSH
20014: DOUBLE
20015: LD_INT 1
20017: DEC
20018: ST_TO_ADDR
20019: LD_INT 4
20021: PUSH
20022: FOR_TO
20023: IFFALSE 20044
// SetSkill ( i , j , 10 ) ;
20025: LD_VAR 0 2
20029: PPUSH
20030: LD_VAR 0 3
20034: PPUSH
20035: LD_INT 10
20037: PPUSH
20038: CALL_OW 237
20042: GO 20022
20044: POP
20045: POP
// end ;
20046: GO 20006
20048: POP
20049: POP
// end ;
20050: LD_VAR 0 1
20054: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
20055: LD_INT 0
20057: PPUSH
// uc_side := your_side ;
20058: LD_ADDR_OWVAR 20
20062: PUSH
20063: LD_OWVAR 2
20067: ST_TO_ADDR
// uc_nation := nation ;
20068: LD_ADDR_OWVAR 21
20072: PUSH
20073: LD_VAR 0 1
20077: ST_TO_ADDR
// InitHc ;
20078: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
20082: LD_INT 0
20084: PPUSH
20085: LD_VAR 0 2
20089: PPUSH
20090: LD_VAR 0 3
20094: PPUSH
20095: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
20099: LD_VAR 0 4
20103: PPUSH
20104: LD_VAR 0 5
20108: PPUSH
20109: CALL_OW 428
20113: PUSH
20114: LD_INT 0
20116: EQUAL
20117: IFFALSE 20141
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
20119: CALL_OW 44
20123: PPUSH
20124: LD_VAR 0 4
20128: PPUSH
20129: LD_VAR 0 5
20133: PPUSH
20134: LD_INT 1
20136: PPUSH
20137: CALL_OW 48
// end ;
20141: LD_VAR 0 6
20145: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
20146: LD_INT 0
20148: PPUSH
20149: PPUSH
// uc_side := your_side ;
20150: LD_ADDR_OWVAR 20
20154: PUSH
20155: LD_OWVAR 2
20159: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
20160: LD_VAR 0 1
20164: PUSH
20165: LD_INT 1
20167: PUSH
20168: LD_INT 2
20170: PUSH
20171: LD_INT 3
20173: PUSH
20174: LD_INT 4
20176: PUSH
20177: LD_INT 5
20179: PUSH
20180: EMPTY
20181: LIST
20182: LIST
20183: LIST
20184: LIST
20185: LIST
20186: IN
20187: IFFALSE 20199
// uc_nation := nation_american else
20189: LD_ADDR_OWVAR 21
20193: PUSH
20194: LD_INT 1
20196: ST_TO_ADDR
20197: GO 20242
// if chassis in [ 11 , 12 , 13 , 14 ] then
20199: LD_VAR 0 1
20203: PUSH
20204: LD_INT 11
20206: PUSH
20207: LD_INT 12
20209: PUSH
20210: LD_INT 13
20212: PUSH
20213: LD_INT 14
20215: PUSH
20216: EMPTY
20217: LIST
20218: LIST
20219: LIST
20220: LIST
20221: IN
20222: IFFALSE 20234
// uc_nation := nation_arabian else
20224: LD_ADDR_OWVAR 21
20228: PUSH
20229: LD_INT 2
20231: ST_TO_ADDR
20232: GO 20242
// uc_nation := nation_russian ;
20234: LD_ADDR_OWVAR 21
20238: PUSH
20239: LD_INT 3
20241: ST_TO_ADDR
// vc_chassis := chassis ;
20242: LD_ADDR_OWVAR 37
20246: PUSH
20247: LD_VAR 0 1
20251: ST_TO_ADDR
// vc_engine := engine ;
20252: LD_ADDR_OWVAR 39
20256: PUSH
20257: LD_VAR 0 2
20261: ST_TO_ADDR
// vc_control := control ;
20262: LD_ADDR_OWVAR 38
20266: PUSH
20267: LD_VAR 0 3
20271: ST_TO_ADDR
// vc_weapon := weapon ;
20272: LD_ADDR_OWVAR 40
20276: PUSH
20277: LD_VAR 0 4
20281: ST_TO_ADDR
// un := CreateVehicle ;
20282: LD_ADDR_VAR 0 8
20286: PUSH
20287: CALL_OW 45
20291: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
20292: LD_VAR 0 8
20296: PPUSH
20297: LD_INT 0
20299: PPUSH
20300: LD_INT 5
20302: PPUSH
20303: CALL_OW 12
20307: PPUSH
20308: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
20312: LD_VAR 0 8
20316: PPUSH
20317: LD_VAR 0 5
20321: PPUSH
20322: LD_VAR 0 6
20326: PPUSH
20327: LD_INT 1
20329: PPUSH
20330: CALL_OW 48
// end ;
20334: LD_VAR 0 7
20338: RET
// export hInvincible ; every 1 do
20339: GO 20341
20341: DISABLE
// hInvincible := [ ] ;
20342: LD_ADDR_EXP 84
20346: PUSH
20347: EMPTY
20348: ST_TO_ADDR
20349: END
// every 10 do var i ;
20350: GO 20352
20352: DISABLE
20353: LD_INT 0
20355: PPUSH
// begin enable ;
20356: ENABLE
// if not hInvincible then
20357: LD_EXP 84
20361: NOT
20362: IFFALSE 20366
// exit ;
20364: GO 20410
// for i in hInvincible do
20366: LD_ADDR_VAR 0 1
20370: PUSH
20371: LD_EXP 84
20375: PUSH
20376: FOR_IN
20377: IFFALSE 20408
// if GetLives ( i ) < 1000 then
20379: LD_VAR 0 1
20383: PPUSH
20384: CALL_OW 256
20388: PUSH
20389: LD_INT 1000
20391: LESS
20392: IFFALSE 20406
// SetLives ( i , 1000 ) ;
20394: LD_VAR 0 1
20398: PPUSH
20399: LD_INT 1000
20401: PPUSH
20402: CALL_OW 234
20406: GO 20376
20408: POP
20409: POP
// end ;
20410: PPOPN 1
20412: END
// export function hHackInvincible ; var i ; begin
20413: LD_INT 0
20415: PPUSH
20416: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
20417: LD_ADDR_VAR 0 2
20421: PUSH
20422: LD_INT 2
20424: PUSH
20425: LD_INT 21
20427: PUSH
20428: LD_INT 1
20430: PUSH
20431: EMPTY
20432: LIST
20433: LIST
20434: PUSH
20435: LD_INT 21
20437: PUSH
20438: LD_INT 2
20440: PUSH
20441: EMPTY
20442: LIST
20443: LIST
20444: PUSH
20445: EMPTY
20446: LIST
20447: LIST
20448: LIST
20449: PPUSH
20450: CALL_OW 69
20454: PUSH
20455: FOR_IN
20456: IFFALSE 20517
// if IsSelected ( i ) then
20458: LD_VAR 0 2
20462: PPUSH
20463: CALL_OW 306
20467: IFFALSE 20515
// begin if i in hInvincible then
20469: LD_VAR 0 2
20473: PUSH
20474: LD_EXP 84
20478: IN
20479: IFFALSE 20499
// hInvincible := hInvincible diff i else
20481: LD_ADDR_EXP 84
20485: PUSH
20486: LD_EXP 84
20490: PUSH
20491: LD_VAR 0 2
20495: DIFF
20496: ST_TO_ADDR
20497: GO 20515
// hInvincible := hInvincible union i ;
20499: LD_ADDR_EXP 84
20503: PUSH
20504: LD_EXP 84
20508: PUSH
20509: LD_VAR 0 2
20513: UNION
20514: ST_TO_ADDR
// end ;
20515: GO 20455
20517: POP
20518: POP
// end ;
20519: LD_VAR 0 1
20523: RET
// export function hHackInvisible ; var i , j ; begin
20524: LD_INT 0
20526: PPUSH
20527: PPUSH
20528: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20529: LD_ADDR_VAR 0 2
20533: PUSH
20534: LD_INT 21
20536: PUSH
20537: LD_INT 1
20539: PUSH
20540: EMPTY
20541: LIST
20542: LIST
20543: PPUSH
20544: CALL_OW 69
20548: PUSH
20549: FOR_IN
20550: IFFALSE 20574
// if IsSelected ( i ) then
20552: LD_VAR 0 2
20556: PPUSH
20557: CALL_OW 306
20561: IFFALSE 20572
// ComForceInvisible ( i ) ;
20563: LD_VAR 0 2
20567: PPUSH
20568: CALL_OW 496
20572: GO 20549
20574: POP
20575: POP
// end ;
20576: LD_VAR 0 1
20580: RET
// export function hHackChangeYourSide ; begin
20581: LD_INT 0
20583: PPUSH
// if your_side = 8 then
20584: LD_OWVAR 2
20588: PUSH
20589: LD_INT 8
20591: EQUAL
20592: IFFALSE 20604
// your_side := 0 else
20594: LD_ADDR_OWVAR 2
20598: PUSH
20599: LD_INT 0
20601: ST_TO_ADDR
20602: GO 20618
// your_side := your_side + 1 ;
20604: LD_ADDR_OWVAR 2
20608: PUSH
20609: LD_OWVAR 2
20613: PUSH
20614: LD_INT 1
20616: PLUS
20617: ST_TO_ADDR
// end ;
20618: LD_VAR 0 1
20622: RET
// export function hHackChangeUnitSide ; var i , j ; begin
20623: LD_INT 0
20625: PPUSH
20626: PPUSH
20627: PPUSH
// for i in all_units do
20628: LD_ADDR_VAR 0 2
20632: PUSH
20633: LD_OWVAR 3
20637: PUSH
20638: FOR_IN
20639: IFFALSE 20717
// if IsSelected ( i ) then
20641: LD_VAR 0 2
20645: PPUSH
20646: CALL_OW 306
20650: IFFALSE 20715
// begin j := GetSide ( i ) ;
20652: LD_ADDR_VAR 0 3
20656: PUSH
20657: LD_VAR 0 2
20661: PPUSH
20662: CALL_OW 255
20666: ST_TO_ADDR
// if j = 8 then
20667: LD_VAR 0 3
20671: PUSH
20672: LD_INT 8
20674: EQUAL
20675: IFFALSE 20687
// j := 0 else
20677: LD_ADDR_VAR 0 3
20681: PUSH
20682: LD_INT 0
20684: ST_TO_ADDR
20685: GO 20701
// j := j + 1 ;
20687: LD_ADDR_VAR 0 3
20691: PUSH
20692: LD_VAR 0 3
20696: PUSH
20697: LD_INT 1
20699: PLUS
20700: ST_TO_ADDR
// SetSide ( i , j ) ;
20701: LD_VAR 0 2
20705: PPUSH
20706: LD_VAR 0 3
20710: PPUSH
20711: CALL_OW 235
// end ;
20715: GO 20638
20717: POP
20718: POP
// end ;
20719: LD_VAR 0 1
20723: RET
// export function hHackFog ; begin
20724: LD_INT 0
20726: PPUSH
// FogOff ( true ) ;
20727: LD_INT 1
20729: PPUSH
20730: CALL_OW 344
// end ;
20734: LD_VAR 0 1
20738: RET
// export function hHackTeleport ( unit , x , y ) ; begin
20739: LD_INT 0
20741: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
20742: LD_VAR 0 1
20746: PPUSH
20747: LD_VAR 0 2
20751: PPUSH
20752: LD_VAR 0 3
20756: PPUSH
20757: LD_INT 1
20759: PPUSH
20760: LD_INT 1
20762: PPUSH
20763: CALL_OW 483
// CenterOnXY ( x , y ) ;
20767: LD_VAR 0 2
20771: PPUSH
20772: LD_VAR 0 3
20776: PPUSH
20777: CALL_OW 84
// end ; end_of_file
20781: LD_VAR 0 4
20785: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
20786: LD_INT 0
20788: PPUSH
20789: PPUSH
20790: PPUSH
20791: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
20792: LD_VAR 0 1
20796: PPUSH
20797: CALL_OW 264
20801: PUSH
20802: LD_EXP 100
20806: EQUAL
20807: IFFALSE 20879
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
20809: LD_INT 68
20811: PPUSH
20812: LD_VAR 0 1
20816: PPUSH
20817: CALL_OW 255
20821: PPUSH
20822: CALL_OW 321
20826: PUSH
20827: LD_INT 2
20829: EQUAL
20830: IFFALSE 20842
// eff := 70 else
20832: LD_ADDR_VAR 0 4
20836: PUSH
20837: LD_INT 70
20839: ST_TO_ADDR
20840: GO 20850
// eff := 30 ;
20842: LD_ADDR_VAR 0 4
20846: PUSH
20847: LD_INT 30
20849: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
20850: LD_VAR 0 1
20854: PPUSH
20855: CALL_OW 250
20859: PPUSH
20860: LD_VAR 0 1
20864: PPUSH
20865: CALL_OW 251
20869: PPUSH
20870: LD_VAR 0 4
20874: PPUSH
20875: CALL_OW 495
// end ; end ;
20879: LD_VAR 0 2
20883: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20884: LD_INT 0
20886: PPUSH
// end ;
20887: LD_VAR 0 4
20891: RET
// export function SOS_Command ( cmd ) ; begin
20892: LD_INT 0
20894: PPUSH
// end ;
20895: LD_VAR 0 2
20899: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
20900: LD_INT 0
20902: PPUSH
// end ;
20903: LD_VAR 0 6
20907: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
20908: LD_INT 0
20910: PPUSH
20911: PPUSH
// if not vehicle or not factory then
20912: LD_VAR 0 1
20916: NOT
20917: PUSH
20918: LD_VAR 0 2
20922: NOT
20923: OR
20924: IFFALSE 20928
// exit ;
20926: GO 21159
// if factoryWaypoints >= factory then
20928: LD_EXP 85
20932: PUSH
20933: LD_VAR 0 2
20937: GREATEREQUAL
20938: IFFALSE 21159
// if factoryWaypoints [ factory ] then
20940: LD_EXP 85
20944: PUSH
20945: LD_VAR 0 2
20949: ARRAY
20950: IFFALSE 21159
// begin if GetControl ( vehicle ) = control_manual then
20952: LD_VAR 0 1
20956: PPUSH
20957: CALL_OW 263
20961: PUSH
20962: LD_INT 1
20964: EQUAL
20965: IFFALSE 21046
// begin driver := IsDrivenBy ( vehicle ) ;
20967: LD_ADDR_VAR 0 4
20971: PUSH
20972: LD_VAR 0 1
20976: PPUSH
20977: CALL_OW 311
20981: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
20982: LD_VAR 0 4
20986: PPUSH
20987: LD_EXP 85
20991: PUSH
20992: LD_VAR 0 2
20996: ARRAY
20997: PUSH
20998: LD_INT 1
21000: ARRAY
21001: PPUSH
21002: LD_EXP 85
21006: PUSH
21007: LD_VAR 0 2
21011: ARRAY
21012: PUSH
21013: LD_INT 2
21015: ARRAY
21016: PPUSH
21017: CALL_OW 171
// AddComExitVehicle ( driver ) ;
21021: LD_VAR 0 4
21025: PPUSH
21026: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
21030: LD_VAR 0 4
21034: PPUSH
21035: LD_VAR 0 2
21039: PPUSH
21040: CALL_OW 180
// end else
21044: GO 21159
// if GetControl ( vehicle ) = control_remote then
21046: LD_VAR 0 1
21050: PPUSH
21051: CALL_OW 263
21055: PUSH
21056: LD_INT 2
21058: EQUAL
21059: IFFALSE 21120
// begin wait ( 0 0$2 ) ;
21061: LD_INT 70
21063: PPUSH
21064: CALL_OW 67
// if Connect ( vehicle ) then
21068: LD_VAR 0 1
21072: PPUSH
21073: CALL 33551 0 1
21077: IFFALSE 21118
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
21079: LD_VAR 0 1
21083: PPUSH
21084: LD_EXP 85
21088: PUSH
21089: LD_VAR 0 2
21093: ARRAY
21094: PUSH
21095: LD_INT 1
21097: ARRAY
21098: PPUSH
21099: LD_EXP 85
21103: PUSH
21104: LD_VAR 0 2
21108: ARRAY
21109: PUSH
21110: LD_INT 2
21112: ARRAY
21113: PPUSH
21114: CALL_OW 171
// end else
21118: GO 21159
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
21120: LD_VAR 0 1
21124: PPUSH
21125: LD_EXP 85
21129: PUSH
21130: LD_VAR 0 2
21134: ARRAY
21135: PUSH
21136: LD_INT 1
21138: ARRAY
21139: PPUSH
21140: LD_EXP 85
21144: PUSH
21145: LD_VAR 0 2
21149: ARRAY
21150: PUSH
21151: LD_INT 2
21153: ARRAY
21154: PPUSH
21155: CALL_OW 171
// end ; end ;
21159: LD_VAR 0 3
21163: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
21164: LD_INT 0
21166: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
21167: LD_VAR 0 1
21171: PUSH
21172: LD_INT 250
21174: EQUAL
21175: PUSH
21176: LD_VAR 0 2
21180: PPUSH
21181: CALL_OW 264
21185: PUSH
21186: LD_EXP 103
21190: EQUAL
21191: AND
21192: IFFALSE 21213
// MinerPlaceMine ( unit , x , y ) ;
21194: LD_VAR 0 2
21198: PPUSH
21199: LD_VAR 0 4
21203: PPUSH
21204: LD_VAR 0 5
21208: PPUSH
21209: CALL 23941 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
21213: LD_VAR 0 1
21217: PUSH
21218: LD_INT 251
21220: EQUAL
21221: PUSH
21222: LD_VAR 0 2
21226: PPUSH
21227: CALL_OW 264
21231: PUSH
21232: LD_EXP 103
21236: EQUAL
21237: AND
21238: IFFALSE 21259
// MinerDetonateMine ( unit , x , y ) ;
21240: LD_VAR 0 2
21244: PPUSH
21245: LD_VAR 0 4
21249: PPUSH
21250: LD_VAR 0 5
21254: PPUSH
21255: CALL 24218 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
21259: LD_VAR 0 1
21263: PUSH
21264: LD_INT 252
21266: EQUAL
21267: PUSH
21268: LD_VAR 0 2
21272: PPUSH
21273: CALL_OW 264
21277: PUSH
21278: LD_EXP 103
21282: EQUAL
21283: AND
21284: IFFALSE 21305
// MinerCreateMinefield ( unit , x , y ) ;
21286: LD_VAR 0 2
21290: PPUSH
21291: LD_VAR 0 4
21295: PPUSH
21296: LD_VAR 0 5
21300: PPUSH
21301: CALL 24635 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
21305: LD_VAR 0 1
21309: PUSH
21310: LD_INT 253
21312: EQUAL
21313: PUSH
21314: LD_VAR 0 2
21318: PPUSH
21319: CALL_OW 257
21323: PUSH
21324: LD_INT 5
21326: EQUAL
21327: AND
21328: IFFALSE 21349
// ComBinocular ( unit , x , y ) ;
21330: LD_VAR 0 2
21334: PPUSH
21335: LD_VAR 0 4
21339: PPUSH
21340: LD_VAR 0 5
21344: PPUSH
21345: CALL 25006 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
21349: LD_VAR 0 1
21353: PUSH
21354: LD_INT 254
21356: EQUAL
21357: PUSH
21358: LD_VAR 0 2
21362: PPUSH
21363: CALL_OW 264
21367: PUSH
21368: LD_EXP 98
21372: EQUAL
21373: AND
21374: PUSH
21375: LD_VAR 0 3
21379: PPUSH
21380: CALL_OW 263
21384: PUSH
21385: LD_INT 3
21387: EQUAL
21388: AND
21389: IFFALSE 21405
// HackDestroyVehicle ( unit , selectedUnit ) ;
21391: LD_VAR 0 2
21395: PPUSH
21396: LD_VAR 0 3
21400: PPUSH
21401: CALL 23301 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
21405: LD_VAR 0 1
21409: PUSH
21410: LD_INT 255
21412: EQUAL
21413: PUSH
21414: LD_VAR 0 2
21418: PPUSH
21419: CALL_OW 264
21423: PUSH
21424: LD_INT 14
21426: PUSH
21427: LD_INT 53
21429: PUSH
21430: EMPTY
21431: LIST
21432: LIST
21433: IN
21434: AND
21435: PUSH
21436: LD_VAR 0 4
21440: PPUSH
21441: LD_VAR 0 5
21445: PPUSH
21446: CALL_OW 488
21450: AND
21451: IFFALSE 21475
// CutTreeXYR ( unit , x , y , 12 ) ;
21453: LD_VAR 0 2
21457: PPUSH
21458: LD_VAR 0 4
21462: PPUSH
21463: LD_VAR 0 5
21467: PPUSH
21468: LD_INT 12
21470: PPUSH
21471: CALL 21867 0 4
// if cmd = 256 then
21475: LD_VAR 0 1
21479: PUSH
21480: LD_INT 256
21482: EQUAL
21483: IFFALSE 21504
// SetFactoryWaypoint ( unit , x , y ) ;
21485: LD_VAR 0 2
21489: PPUSH
21490: LD_VAR 0 4
21494: PPUSH
21495: LD_VAR 0 5
21499: PPUSH
21500: CALL 21509 0 3
// end ;
21504: LD_VAR 0 6
21508: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
21509: LD_INT 0
21511: PPUSH
21512: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
21513: LD_VAR 0 1
21517: NOT
21518: PUSH
21519: LD_VAR 0 2
21523: PPUSH
21524: LD_VAR 0 3
21528: PPUSH
21529: CALL_OW 488
21533: NOT
21534: OR
21535: PUSH
21536: LD_VAR 0 1
21540: PPUSH
21541: CALL_OW 266
21545: PUSH
21546: LD_INT 3
21548: NONEQUAL
21549: PUSH
21550: LD_VAR 0 1
21554: PPUSH
21555: CALL_OW 247
21559: PUSH
21560: LD_INT 1
21562: EQUAL
21563: NOT
21564: AND
21565: OR
21566: IFFALSE 21570
// exit ;
21568: GO 21719
// if GetType ( factory ) = unit_human then
21570: LD_VAR 0 1
21574: PPUSH
21575: CALL_OW 247
21579: PUSH
21580: LD_INT 1
21582: EQUAL
21583: IFFALSE 21600
// factory := IsInUnit ( factory ) ;
21585: LD_ADDR_VAR 0 1
21589: PUSH
21590: LD_VAR 0 1
21594: PPUSH
21595: CALL_OW 310
21599: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
21600: LD_VAR 0 1
21604: PPUSH
21605: CALL_OW 266
21609: PUSH
21610: LD_INT 3
21612: NONEQUAL
21613: IFFALSE 21617
// exit ;
21615: GO 21719
// if HexInfo ( x , y ) = factory then
21617: LD_VAR 0 2
21621: PPUSH
21622: LD_VAR 0 3
21626: PPUSH
21627: CALL_OW 428
21631: PUSH
21632: LD_VAR 0 1
21636: EQUAL
21637: IFFALSE 21664
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
21639: LD_ADDR_EXP 85
21643: PUSH
21644: LD_EXP 85
21648: PPUSH
21649: LD_VAR 0 1
21653: PPUSH
21654: LD_INT 0
21656: PPUSH
21657: CALL_OW 1
21661: ST_TO_ADDR
21662: GO 21715
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
21664: LD_ADDR_EXP 85
21668: PUSH
21669: LD_EXP 85
21673: PPUSH
21674: LD_VAR 0 1
21678: PPUSH
21679: LD_VAR 0 1
21683: PPUSH
21684: CALL_OW 255
21688: PUSH
21689: LD_VAR 0 1
21693: PUSH
21694: LD_VAR 0 2
21698: PUSH
21699: LD_VAR 0 3
21703: PUSH
21704: EMPTY
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: PPUSH
21710: CALL_OW 1
21714: ST_TO_ADDR
// UpdateFactoryWaypoints ;
21715: CALL 21724 0 0
// end ;
21719: LD_VAR 0 4
21723: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
21724: LD_INT 0
21726: PPUSH
21727: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
21728: LD_STRING resetFactoryWaypoint();
21730: PPUSH
21731: CALL_OW 559
// if factoryWaypoints then
21735: LD_EXP 85
21739: IFFALSE 21862
// begin for i := 1 to factoryWaypoints do
21741: LD_ADDR_VAR 0 2
21745: PUSH
21746: DOUBLE
21747: LD_INT 1
21749: DEC
21750: ST_TO_ADDR
21751: LD_EXP 85
21755: PUSH
21756: FOR_TO
21757: IFFALSE 21860
// if factoryWaypoints [ i ] then
21759: LD_EXP 85
21763: PUSH
21764: LD_VAR 0 2
21768: ARRAY
21769: IFFALSE 21858
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
21771: LD_STRING setFactoryWaypointXY(
21773: PUSH
21774: LD_EXP 85
21778: PUSH
21779: LD_VAR 0 2
21783: ARRAY
21784: PUSH
21785: LD_INT 1
21787: ARRAY
21788: STR
21789: PUSH
21790: LD_STRING ,
21792: STR
21793: PUSH
21794: LD_EXP 85
21798: PUSH
21799: LD_VAR 0 2
21803: ARRAY
21804: PUSH
21805: LD_INT 2
21807: ARRAY
21808: STR
21809: PUSH
21810: LD_STRING ,
21812: STR
21813: PUSH
21814: LD_EXP 85
21818: PUSH
21819: LD_VAR 0 2
21823: ARRAY
21824: PUSH
21825: LD_INT 3
21827: ARRAY
21828: STR
21829: PUSH
21830: LD_STRING ,
21832: STR
21833: PUSH
21834: LD_EXP 85
21838: PUSH
21839: LD_VAR 0 2
21843: ARRAY
21844: PUSH
21845: LD_INT 4
21847: ARRAY
21848: STR
21849: PUSH
21850: LD_STRING )
21852: STR
21853: PPUSH
21854: CALL_OW 559
21858: GO 21756
21860: POP
21861: POP
// end ; end ;
21862: LD_VAR 0 1
21866: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21867: LD_INT 0
21869: PPUSH
21870: PPUSH
21871: PPUSH
21872: PPUSH
21873: PPUSH
21874: PPUSH
21875: PPUSH
21876: PPUSH
21877: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
21878: LD_VAR 0 1
21882: NOT
21883: PUSH
21884: LD_VAR 0 2
21888: PPUSH
21889: LD_VAR 0 3
21893: PPUSH
21894: CALL_OW 488
21898: NOT
21899: OR
21900: PUSH
21901: LD_VAR 0 4
21905: NOT
21906: OR
21907: IFFALSE 21911
// exit ;
21909: GO 22251
// list := [ ] ;
21911: LD_ADDR_VAR 0 13
21915: PUSH
21916: EMPTY
21917: ST_TO_ADDR
// if x - r < 0 then
21918: LD_VAR 0 2
21922: PUSH
21923: LD_VAR 0 4
21927: MINUS
21928: PUSH
21929: LD_INT 0
21931: LESS
21932: IFFALSE 21944
// min_x := 0 else
21934: LD_ADDR_VAR 0 7
21938: PUSH
21939: LD_INT 0
21941: ST_TO_ADDR
21942: GO 21960
// min_x := x - r ;
21944: LD_ADDR_VAR 0 7
21948: PUSH
21949: LD_VAR 0 2
21953: PUSH
21954: LD_VAR 0 4
21958: MINUS
21959: ST_TO_ADDR
// if y - r < 0 then
21960: LD_VAR 0 3
21964: PUSH
21965: LD_VAR 0 4
21969: MINUS
21970: PUSH
21971: LD_INT 0
21973: LESS
21974: IFFALSE 21986
// min_y := 0 else
21976: LD_ADDR_VAR 0 8
21980: PUSH
21981: LD_INT 0
21983: ST_TO_ADDR
21984: GO 22002
// min_y := y - r ;
21986: LD_ADDR_VAR 0 8
21990: PUSH
21991: LD_VAR 0 3
21995: PUSH
21996: LD_VAR 0 4
22000: MINUS
22001: ST_TO_ADDR
// max_x := x + r ;
22002: LD_ADDR_VAR 0 9
22006: PUSH
22007: LD_VAR 0 2
22011: PUSH
22012: LD_VAR 0 4
22016: PLUS
22017: ST_TO_ADDR
// max_y := y + r ;
22018: LD_ADDR_VAR 0 10
22022: PUSH
22023: LD_VAR 0 3
22027: PUSH
22028: LD_VAR 0 4
22032: PLUS
22033: ST_TO_ADDR
// for _x = min_x to max_x do
22034: LD_ADDR_VAR 0 11
22038: PUSH
22039: DOUBLE
22040: LD_VAR 0 7
22044: DEC
22045: ST_TO_ADDR
22046: LD_VAR 0 9
22050: PUSH
22051: FOR_TO
22052: IFFALSE 22169
// for _y = min_y to max_y do
22054: LD_ADDR_VAR 0 12
22058: PUSH
22059: DOUBLE
22060: LD_VAR 0 8
22064: DEC
22065: ST_TO_ADDR
22066: LD_VAR 0 10
22070: PUSH
22071: FOR_TO
22072: IFFALSE 22165
// begin if not ValidHex ( _x , _y ) then
22074: LD_VAR 0 11
22078: PPUSH
22079: LD_VAR 0 12
22083: PPUSH
22084: CALL_OW 488
22088: NOT
22089: IFFALSE 22093
// continue ;
22091: GO 22071
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22093: LD_VAR 0 11
22097: PPUSH
22098: LD_VAR 0 12
22102: PPUSH
22103: CALL_OW 351
22107: PUSH
22108: LD_VAR 0 11
22112: PPUSH
22113: LD_VAR 0 12
22117: PPUSH
22118: CALL_OW 554
22122: AND
22123: IFFALSE 22163
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22125: LD_ADDR_VAR 0 13
22129: PUSH
22130: LD_VAR 0 13
22134: PPUSH
22135: LD_VAR 0 13
22139: PUSH
22140: LD_INT 1
22142: PLUS
22143: PPUSH
22144: LD_VAR 0 11
22148: PUSH
22149: LD_VAR 0 12
22153: PUSH
22154: EMPTY
22155: LIST
22156: LIST
22157: PPUSH
22158: CALL_OW 2
22162: ST_TO_ADDR
// end ;
22163: GO 22071
22165: POP
22166: POP
22167: GO 22051
22169: POP
22170: POP
// if not list then
22171: LD_VAR 0 13
22175: NOT
22176: IFFALSE 22180
// exit ;
22178: GO 22251
// for i in list do
22180: LD_ADDR_VAR 0 6
22184: PUSH
22185: LD_VAR 0 13
22189: PUSH
22190: FOR_IN
22191: IFFALSE 22249
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
22193: LD_VAR 0 1
22197: PPUSH
22198: LD_STRING M
22200: PUSH
22201: LD_VAR 0 6
22205: PUSH
22206: LD_INT 1
22208: ARRAY
22209: PUSH
22210: LD_VAR 0 6
22214: PUSH
22215: LD_INT 2
22217: ARRAY
22218: PUSH
22219: LD_INT 0
22221: PUSH
22222: LD_INT 0
22224: PUSH
22225: LD_INT 0
22227: PUSH
22228: LD_INT 0
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: PUSH
22240: EMPTY
22241: LIST
22242: PPUSH
22243: CALL_OW 447
22247: GO 22190
22249: POP
22250: POP
// end ;
22251: LD_VAR 0 5
22255: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
22256: LD_EXP 86
22260: NOT
22261: IFFALSE 22311
22263: GO 22265
22265: DISABLE
// begin initHack := true ;
22266: LD_ADDR_EXP 86
22270: PUSH
22271: LD_INT 1
22273: ST_TO_ADDR
// hackTanks := [ ] ;
22274: LD_ADDR_EXP 87
22278: PUSH
22279: EMPTY
22280: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
22281: LD_ADDR_EXP 88
22285: PUSH
22286: EMPTY
22287: ST_TO_ADDR
// hackLimit := 3 ;
22288: LD_ADDR_EXP 89
22292: PUSH
22293: LD_INT 3
22295: ST_TO_ADDR
// hackDist := 12 ;
22296: LD_ADDR_EXP 90
22300: PUSH
22301: LD_INT 12
22303: ST_TO_ADDR
// hackCounter := [ ] ;
22304: LD_ADDR_EXP 91
22308: PUSH
22309: EMPTY
22310: ST_TO_ADDR
// end ;
22311: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
22312: LD_EXP 86
22316: PUSH
22317: LD_INT 34
22319: PUSH
22320: LD_EXP 98
22324: PUSH
22325: EMPTY
22326: LIST
22327: LIST
22328: PPUSH
22329: CALL_OW 69
22333: AND
22334: IFFALSE 22589
22336: GO 22338
22338: DISABLE
22339: LD_INT 0
22341: PPUSH
22342: PPUSH
// begin enable ;
22343: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
22344: LD_ADDR_VAR 0 1
22348: PUSH
22349: LD_INT 34
22351: PUSH
22352: LD_EXP 98
22356: PUSH
22357: EMPTY
22358: LIST
22359: LIST
22360: PPUSH
22361: CALL_OW 69
22365: PUSH
22366: FOR_IN
22367: IFFALSE 22587
// begin if not i in hackTanks then
22369: LD_VAR 0 1
22373: PUSH
22374: LD_EXP 87
22378: IN
22379: NOT
22380: IFFALSE 22463
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
22382: LD_ADDR_EXP 87
22386: PUSH
22387: LD_EXP 87
22391: PPUSH
22392: LD_EXP 87
22396: PUSH
22397: LD_INT 1
22399: PLUS
22400: PPUSH
22401: LD_VAR 0 1
22405: PPUSH
22406: CALL_OW 1
22410: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
22411: LD_ADDR_EXP 88
22415: PUSH
22416: LD_EXP 88
22420: PPUSH
22421: LD_EXP 88
22425: PUSH
22426: LD_INT 1
22428: PLUS
22429: PPUSH
22430: EMPTY
22431: PPUSH
22432: CALL_OW 1
22436: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
22437: LD_ADDR_EXP 91
22441: PUSH
22442: LD_EXP 91
22446: PPUSH
22447: LD_EXP 91
22451: PUSH
22452: LD_INT 1
22454: PLUS
22455: PPUSH
22456: EMPTY
22457: PPUSH
22458: CALL_OW 1
22462: ST_TO_ADDR
// end ; if not IsOk ( i ) then
22463: LD_VAR 0 1
22467: PPUSH
22468: CALL_OW 302
22472: NOT
22473: IFFALSE 22486
// begin HackUnlinkAll ( i ) ;
22475: LD_VAR 0 1
22479: PPUSH
22480: CALL 22592 0 1
// continue ;
22484: GO 22366
// end ; HackCheckCapturedStatus ( i ) ;
22486: LD_VAR 0 1
22490: PPUSH
22491: CALL 23035 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
22495: LD_ADDR_VAR 0 2
22499: PUSH
22500: LD_INT 81
22502: PUSH
22503: LD_VAR 0 1
22507: PPUSH
22508: CALL_OW 255
22512: PUSH
22513: EMPTY
22514: LIST
22515: LIST
22516: PUSH
22517: LD_INT 33
22519: PUSH
22520: LD_INT 3
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: PUSH
22527: LD_INT 91
22529: PUSH
22530: LD_VAR 0 1
22534: PUSH
22535: LD_EXP 90
22539: PUSH
22540: EMPTY
22541: LIST
22542: LIST
22543: LIST
22544: PUSH
22545: LD_INT 50
22547: PUSH
22548: EMPTY
22549: LIST
22550: PUSH
22551: EMPTY
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: PPUSH
22557: CALL_OW 69
22561: ST_TO_ADDR
// if not tmp then
22562: LD_VAR 0 2
22566: NOT
22567: IFFALSE 22571
// continue ;
22569: GO 22366
// HackLink ( i , tmp ) ;
22571: LD_VAR 0 1
22575: PPUSH
22576: LD_VAR 0 2
22580: PPUSH
22581: CALL 22728 0 2
// end ;
22585: GO 22366
22587: POP
22588: POP
// end ;
22589: PPOPN 2
22591: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
22592: LD_INT 0
22594: PPUSH
22595: PPUSH
22596: PPUSH
// if not hack in hackTanks then
22597: LD_VAR 0 1
22601: PUSH
22602: LD_EXP 87
22606: IN
22607: NOT
22608: IFFALSE 22612
// exit ;
22610: GO 22723
// index := GetElementIndex ( hackTanks , hack ) ;
22612: LD_ADDR_VAR 0 4
22616: PUSH
22617: LD_EXP 87
22621: PPUSH
22622: LD_VAR 0 1
22626: PPUSH
22627: CALL 30365 0 2
22631: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
22632: LD_EXP 88
22636: PUSH
22637: LD_VAR 0 4
22641: ARRAY
22642: IFFALSE 22723
// begin for i in hackTanksCaptured [ index ] do
22644: LD_ADDR_VAR 0 3
22648: PUSH
22649: LD_EXP 88
22653: PUSH
22654: LD_VAR 0 4
22658: ARRAY
22659: PUSH
22660: FOR_IN
22661: IFFALSE 22687
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
22663: LD_VAR 0 3
22667: PUSH
22668: LD_INT 1
22670: ARRAY
22671: PPUSH
22672: LD_VAR 0 3
22676: PUSH
22677: LD_INT 2
22679: ARRAY
22680: PPUSH
22681: CALL_OW 235
22685: GO 22660
22687: POP
22688: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
22689: LD_ADDR_EXP 88
22693: PUSH
22694: LD_EXP 88
22698: PPUSH
22699: LD_VAR 0 4
22703: PPUSH
22704: EMPTY
22705: PPUSH
22706: CALL_OW 1
22710: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
22711: LD_VAR 0 1
22715: PPUSH
22716: LD_INT 0
22718: PPUSH
22719: CALL_OW 505
// end ; end ;
22723: LD_VAR 0 2
22727: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
22728: LD_INT 0
22730: PPUSH
22731: PPUSH
22732: PPUSH
// if not hack in hackTanks or not vehicles then
22733: LD_VAR 0 1
22737: PUSH
22738: LD_EXP 87
22742: IN
22743: NOT
22744: PUSH
22745: LD_VAR 0 2
22749: NOT
22750: OR
22751: IFFALSE 22755
// exit ;
22753: GO 23030
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
22755: LD_ADDR_VAR 0 2
22759: PUSH
22760: LD_VAR 0 1
22764: PPUSH
22765: LD_VAR 0 2
22769: PPUSH
22770: LD_INT 1
22772: PPUSH
22773: LD_INT 1
22775: PPUSH
22776: CALL 31015 0 4
22780: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
22781: LD_ADDR_VAR 0 5
22785: PUSH
22786: LD_EXP 87
22790: PPUSH
22791: LD_VAR 0 1
22795: PPUSH
22796: CALL 30365 0 2
22800: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
22801: LD_EXP 88
22805: PUSH
22806: LD_VAR 0 5
22810: ARRAY
22811: PUSH
22812: LD_EXP 89
22816: LESS
22817: IFFALSE 23006
// begin for i := 1 to vehicles do
22819: LD_ADDR_VAR 0 4
22823: PUSH
22824: DOUBLE
22825: LD_INT 1
22827: DEC
22828: ST_TO_ADDR
22829: LD_VAR 0 2
22833: PUSH
22834: FOR_TO
22835: IFFALSE 23004
// begin if hackTanksCaptured [ index ] = hackLimit then
22837: LD_EXP 88
22841: PUSH
22842: LD_VAR 0 5
22846: ARRAY
22847: PUSH
22848: LD_EXP 89
22852: EQUAL
22853: IFFALSE 22857
// break ;
22855: GO 23004
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
22857: LD_ADDR_EXP 91
22861: PUSH
22862: LD_EXP 91
22866: PPUSH
22867: LD_VAR 0 5
22871: PPUSH
22872: LD_EXP 91
22876: PUSH
22877: LD_VAR 0 5
22881: ARRAY
22882: PUSH
22883: LD_INT 1
22885: PLUS
22886: PPUSH
22887: CALL_OW 1
22891: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
22892: LD_ADDR_EXP 88
22896: PUSH
22897: LD_EXP 88
22901: PPUSH
22902: LD_VAR 0 5
22906: PUSH
22907: LD_EXP 88
22911: PUSH
22912: LD_VAR 0 5
22916: ARRAY
22917: PUSH
22918: LD_INT 1
22920: PLUS
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: PPUSH
22926: LD_VAR 0 2
22930: PUSH
22931: LD_VAR 0 4
22935: ARRAY
22936: PUSH
22937: LD_VAR 0 2
22941: PUSH
22942: LD_VAR 0 4
22946: ARRAY
22947: PPUSH
22948: CALL_OW 255
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: PPUSH
22957: CALL 30580 0 3
22961: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
22962: LD_VAR 0 2
22966: PUSH
22967: LD_VAR 0 4
22971: ARRAY
22972: PPUSH
22973: LD_VAR 0 1
22977: PPUSH
22978: CALL_OW 255
22982: PPUSH
22983: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
22987: LD_VAR 0 2
22991: PUSH
22992: LD_VAR 0 4
22996: ARRAY
22997: PPUSH
22998: CALL_OW 141
// end ;
23002: GO 22834
23004: POP
23005: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23006: LD_VAR 0 1
23010: PPUSH
23011: LD_EXP 88
23015: PUSH
23016: LD_VAR 0 5
23020: ARRAY
23021: PUSH
23022: LD_INT 0
23024: PLUS
23025: PPUSH
23026: CALL_OW 505
// end ;
23030: LD_VAR 0 3
23034: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
23035: LD_INT 0
23037: PPUSH
23038: PPUSH
23039: PPUSH
23040: PPUSH
// if not hack in hackTanks then
23041: LD_VAR 0 1
23045: PUSH
23046: LD_EXP 87
23050: IN
23051: NOT
23052: IFFALSE 23056
// exit ;
23054: GO 23296
// index := GetElementIndex ( hackTanks , hack ) ;
23056: LD_ADDR_VAR 0 4
23060: PUSH
23061: LD_EXP 87
23065: PPUSH
23066: LD_VAR 0 1
23070: PPUSH
23071: CALL 30365 0 2
23075: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
23076: LD_ADDR_VAR 0 3
23080: PUSH
23081: DOUBLE
23082: LD_EXP 88
23086: PUSH
23087: LD_VAR 0 4
23091: ARRAY
23092: INC
23093: ST_TO_ADDR
23094: LD_INT 1
23096: PUSH
23097: FOR_DOWNTO
23098: IFFALSE 23270
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
23100: LD_ADDR_VAR 0 5
23104: PUSH
23105: LD_EXP 88
23109: PUSH
23110: LD_VAR 0 4
23114: ARRAY
23115: PUSH
23116: LD_VAR 0 3
23120: ARRAY
23121: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
23122: LD_VAR 0 5
23126: PUSH
23127: LD_INT 1
23129: ARRAY
23130: PPUSH
23131: CALL_OW 302
23135: NOT
23136: PUSH
23137: LD_VAR 0 5
23141: PUSH
23142: LD_INT 1
23144: ARRAY
23145: PPUSH
23146: CALL_OW 255
23150: PUSH
23151: LD_VAR 0 1
23155: PPUSH
23156: CALL_OW 255
23160: NONEQUAL
23161: OR
23162: IFFALSE 23268
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
23164: LD_VAR 0 5
23168: PUSH
23169: LD_INT 1
23171: ARRAY
23172: PPUSH
23173: CALL_OW 305
23177: PUSH
23178: LD_VAR 0 5
23182: PUSH
23183: LD_INT 1
23185: ARRAY
23186: PPUSH
23187: CALL_OW 255
23191: PUSH
23192: LD_VAR 0 1
23196: PPUSH
23197: CALL_OW 255
23201: EQUAL
23202: AND
23203: IFFALSE 23227
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
23205: LD_VAR 0 5
23209: PUSH
23210: LD_INT 1
23212: ARRAY
23213: PPUSH
23214: LD_VAR 0 5
23218: PUSH
23219: LD_INT 2
23221: ARRAY
23222: PPUSH
23223: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
23227: LD_ADDR_EXP 88
23231: PUSH
23232: LD_EXP 88
23236: PPUSH
23237: LD_VAR 0 4
23241: PPUSH
23242: LD_EXP 88
23246: PUSH
23247: LD_VAR 0 4
23251: ARRAY
23252: PPUSH
23253: LD_VAR 0 3
23257: PPUSH
23258: CALL_OW 3
23262: PPUSH
23263: CALL_OW 1
23267: ST_TO_ADDR
// end ; end ;
23268: GO 23097
23270: POP
23271: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23272: LD_VAR 0 1
23276: PPUSH
23277: LD_EXP 88
23281: PUSH
23282: LD_VAR 0 4
23286: ARRAY
23287: PUSH
23288: LD_INT 0
23290: PLUS
23291: PPUSH
23292: CALL_OW 505
// end ;
23296: LD_VAR 0 2
23300: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
23301: LD_INT 0
23303: PPUSH
23304: PPUSH
23305: PPUSH
23306: PPUSH
// if not hack in hackTanks then
23307: LD_VAR 0 1
23311: PUSH
23312: LD_EXP 87
23316: IN
23317: NOT
23318: IFFALSE 23322
// exit ;
23320: GO 23407
// index := GetElementIndex ( hackTanks , hack ) ;
23322: LD_ADDR_VAR 0 5
23326: PUSH
23327: LD_EXP 87
23331: PPUSH
23332: LD_VAR 0 1
23336: PPUSH
23337: CALL 30365 0 2
23341: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
23342: LD_ADDR_VAR 0 4
23346: PUSH
23347: DOUBLE
23348: LD_INT 1
23350: DEC
23351: ST_TO_ADDR
23352: LD_EXP 88
23356: PUSH
23357: LD_VAR 0 5
23361: ARRAY
23362: PUSH
23363: FOR_TO
23364: IFFALSE 23405
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
23366: LD_EXP 88
23370: PUSH
23371: LD_VAR 0 5
23375: ARRAY
23376: PUSH
23377: LD_VAR 0 4
23381: ARRAY
23382: PUSH
23383: LD_INT 1
23385: ARRAY
23386: PUSH
23387: LD_VAR 0 2
23391: EQUAL
23392: IFFALSE 23403
// KillUnit ( vehicle ) ;
23394: LD_VAR 0 2
23398: PPUSH
23399: CALL_OW 66
23403: GO 23363
23405: POP
23406: POP
// end ;
23407: LD_VAR 0 3
23411: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
23412: LD_EXP 92
23416: NOT
23417: IFFALSE 23452
23419: GO 23421
23421: DISABLE
// begin initMiner := true ;
23422: LD_ADDR_EXP 92
23426: PUSH
23427: LD_INT 1
23429: ST_TO_ADDR
// minersList := [ ] ;
23430: LD_ADDR_EXP 93
23434: PUSH
23435: EMPTY
23436: ST_TO_ADDR
// minerMinesList := [ ] ;
23437: LD_ADDR_EXP 94
23441: PUSH
23442: EMPTY
23443: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
23444: LD_ADDR_EXP 95
23448: PUSH
23449: LD_INT 5
23451: ST_TO_ADDR
// end ;
23452: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
23453: LD_EXP 92
23457: PUSH
23458: LD_INT 34
23460: PUSH
23461: LD_EXP 103
23465: PUSH
23466: EMPTY
23467: LIST
23468: LIST
23469: PPUSH
23470: CALL_OW 69
23474: AND
23475: IFFALSE 23938
23477: GO 23479
23479: DISABLE
23480: LD_INT 0
23482: PPUSH
23483: PPUSH
23484: PPUSH
23485: PPUSH
// begin enable ;
23486: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
23487: LD_ADDR_VAR 0 1
23491: PUSH
23492: LD_INT 34
23494: PUSH
23495: LD_EXP 103
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: PPUSH
23504: CALL_OW 69
23508: PUSH
23509: FOR_IN
23510: IFFALSE 23582
// begin if not i in minersList then
23512: LD_VAR 0 1
23516: PUSH
23517: LD_EXP 93
23521: IN
23522: NOT
23523: IFFALSE 23580
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
23525: LD_ADDR_EXP 93
23529: PUSH
23530: LD_EXP 93
23534: PPUSH
23535: LD_EXP 93
23539: PUSH
23540: LD_INT 1
23542: PLUS
23543: PPUSH
23544: LD_VAR 0 1
23548: PPUSH
23549: CALL_OW 1
23553: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
23554: LD_ADDR_EXP 94
23558: PUSH
23559: LD_EXP 94
23563: PPUSH
23564: LD_EXP 94
23568: PUSH
23569: LD_INT 1
23571: PLUS
23572: PPUSH
23573: EMPTY
23574: PPUSH
23575: CALL_OW 1
23579: ST_TO_ADDR
// end end ;
23580: GO 23509
23582: POP
23583: POP
// for i := minerMinesList downto 1 do
23584: LD_ADDR_VAR 0 1
23588: PUSH
23589: DOUBLE
23590: LD_EXP 94
23594: INC
23595: ST_TO_ADDR
23596: LD_INT 1
23598: PUSH
23599: FOR_DOWNTO
23600: IFFALSE 23936
// begin if IsLive ( minersList [ i ] ) then
23602: LD_EXP 93
23606: PUSH
23607: LD_VAR 0 1
23611: ARRAY
23612: PPUSH
23613: CALL_OW 300
23617: IFFALSE 23645
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
23619: LD_EXP 93
23623: PUSH
23624: LD_VAR 0 1
23628: ARRAY
23629: PPUSH
23630: LD_EXP 94
23634: PUSH
23635: LD_VAR 0 1
23639: ARRAY
23640: PPUSH
23641: CALL_OW 505
// if not minerMinesList [ i ] then
23645: LD_EXP 94
23649: PUSH
23650: LD_VAR 0 1
23654: ARRAY
23655: NOT
23656: IFFALSE 23660
// continue ;
23658: GO 23599
// for j := minerMinesList [ i ] downto 1 do
23660: LD_ADDR_VAR 0 2
23664: PUSH
23665: DOUBLE
23666: LD_EXP 94
23670: PUSH
23671: LD_VAR 0 1
23675: ARRAY
23676: INC
23677: ST_TO_ADDR
23678: LD_INT 1
23680: PUSH
23681: FOR_DOWNTO
23682: IFFALSE 23932
// begin side := GetSide ( minersList [ i ] ) ;
23684: LD_ADDR_VAR 0 3
23688: PUSH
23689: LD_EXP 93
23693: PUSH
23694: LD_VAR 0 1
23698: ARRAY
23699: PPUSH
23700: CALL_OW 255
23704: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
23705: LD_ADDR_VAR 0 4
23709: PUSH
23710: LD_EXP 94
23714: PUSH
23715: LD_VAR 0 1
23719: ARRAY
23720: PUSH
23721: LD_VAR 0 2
23725: ARRAY
23726: PUSH
23727: LD_INT 1
23729: ARRAY
23730: PPUSH
23731: LD_EXP 94
23735: PUSH
23736: LD_VAR 0 1
23740: ARRAY
23741: PUSH
23742: LD_VAR 0 2
23746: ARRAY
23747: PUSH
23748: LD_INT 2
23750: ARRAY
23751: PPUSH
23752: CALL_OW 428
23756: ST_TO_ADDR
// if not tmp then
23757: LD_VAR 0 4
23761: NOT
23762: IFFALSE 23766
// continue ;
23764: GO 23681
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
23766: LD_VAR 0 4
23770: PUSH
23771: LD_INT 81
23773: PUSH
23774: LD_VAR 0 3
23778: PUSH
23779: EMPTY
23780: LIST
23781: LIST
23782: PPUSH
23783: CALL_OW 69
23787: IN
23788: PUSH
23789: LD_EXP 94
23793: PUSH
23794: LD_VAR 0 1
23798: ARRAY
23799: PUSH
23800: LD_VAR 0 2
23804: ARRAY
23805: PUSH
23806: LD_INT 1
23808: ARRAY
23809: PPUSH
23810: LD_EXP 94
23814: PUSH
23815: LD_VAR 0 1
23819: ARRAY
23820: PUSH
23821: LD_VAR 0 2
23825: ARRAY
23826: PUSH
23827: LD_INT 2
23829: ARRAY
23830: PPUSH
23831: CALL_OW 458
23835: AND
23836: IFFALSE 23930
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
23838: LD_EXP 94
23842: PUSH
23843: LD_VAR 0 1
23847: ARRAY
23848: PUSH
23849: LD_VAR 0 2
23853: ARRAY
23854: PUSH
23855: LD_INT 1
23857: ARRAY
23858: PPUSH
23859: LD_EXP 94
23863: PUSH
23864: LD_VAR 0 1
23868: ARRAY
23869: PUSH
23870: LD_VAR 0 2
23874: ARRAY
23875: PUSH
23876: LD_INT 2
23878: ARRAY
23879: PPUSH
23880: LD_VAR 0 3
23884: PPUSH
23885: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
23889: LD_ADDR_EXP 94
23893: PUSH
23894: LD_EXP 94
23898: PPUSH
23899: LD_VAR 0 1
23903: PPUSH
23904: LD_EXP 94
23908: PUSH
23909: LD_VAR 0 1
23913: ARRAY
23914: PPUSH
23915: LD_VAR 0 2
23919: PPUSH
23920: CALL_OW 3
23924: PPUSH
23925: CALL_OW 1
23929: ST_TO_ADDR
// end ; end ;
23930: GO 23681
23932: POP
23933: POP
// end ;
23934: GO 23599
23936: POP
23937: POP
// end ;
23938: PPOPN 4
23940: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
23941: LD_INT 0
23943: PPUSH
23944: PPUSH
// result := false ;
23945: LD_ADDR_VAR 0 4
23949: PUSH
23950: LD_INT 0
23952: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
23953: LD_VAR 0 1
23957: PPUSH
23958: CALL_OW 264
23962: PUSH
23963: LD_EXP 103
23967: EQUAL
23968: NOT
23969: IFFALSE 23973
// exit ;
23971: GO 24213
// index := GetElementIndex ( minersList , unit ) ;
23973: LD_ADDR_VAR 0 5
23977: PUSH
23978: LD_EXP 93
23982: PPUSH
23983: LD_VAR 0 1
23987: PPUSH
23988: CALL 30365 0 2
23992: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
23993: LD_EXP 94
23997: PUSH
23998: LD_VAR 0 5
24002: ARRAY
24003: PUSH
24004: LD_EXP 95
24008: GREATEREQUAL
24009: IFFALSE 24013
// exit ;
24011: GO 24213
// ComMoveXY ( unit , x , y ) ;
24013: LD_VAR 0 1
24017: PPUSH
24018: LD_VAR 0 2
24022: PPUSH
24023: LD_VAR 0 3
24027: PPUSH
24028: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24032: LD_INT 35
24034: PPUSH
24035: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
24039: LD_VAR 0 1
24043: PPUSH
24044: LD_VAR 0 2
24048: PPUSH
24049: LD_VAR 0 3
24053: PPUSH
24054: CALL 61137 0 3
24058: NOT
24059: PUSH
24060: LD_VAR 0 1
24064: PPUSH
24065: CALL_OW 314
24069: AND
24070: IFFALSE 24074
// exit ;
24072: GO 24213
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
24074: LD_VAR 0 2
24078: PPUSH
24079: LD_VAR 0 3
24083: PPUSH
24084: CALL_OW 428
24088: PUSH
24089: LD_VAR 0 1
24093: EQUAL
24094: PUSH
24095: LD_VAR 0 1
24099: PPUSH
24100: CALL_OW 314
24104: NOT
24105: AND
24106: IFFALSE 24032
// PlaySoundXY ( x , y , PlantMine ) ;
24108: LD_VAR 0 2
24112: PPUSH
24113: LD_VAR 0 3
24117: PPUSH
24118: LD_STRING PlantMine
24120: PPUSH
24121: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
24125: LD_VAR 0 2
24129: PPUSH
24130: LD_VAR 0 3
24134: PPUSH
24135: LD_VAR 0 1
24139: PPUSH
24140: CALL_OW 255
24144: PPUSH
24145: LD_INT 0
24147: PPUSH
24148: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
24152: LD_ADDR_EXP 94
24156: PUSH
24157: LD_EXP 94
24161: PPUSH
24162: LD_VAR 0 5
24166: PUSH
24167: LD_EXP 94
24171: PUSH
24172: LD_VAR 0 5
24176: ARRAY
24177: PUSH
24178: LD_INT 1
24180: PLUS
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: PPUSH
24186: LD_VAR 0 2
24190: PUSH
24191: LD_VAR 0 3
24195: PUSH
24196: EMPTY
24197: LIST
24198: LIST
24199: PPUSH
24200: CALL 30580 0 3
24204: ST_TO_ADDR
// result := true ;
24205: LD_ADDR_VAR 0 4
24209: PUSH
24210: LD_INT 1
24212: ST_TO_ADDR
// end ;
24213: LD_VAR 0 4
24217: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
24218: LD_INT 0
24220: PPUSH
24221: PPUSH
24222: PPUSH
// if not unit in minersList then
24223: LD_VAR 0 1
24227: PUSH
24228: LD_EXP 93
24232: IN
24233: NOT
24234: IFFALSE 24238
// exit ;
24236: GO 24630
// index := GetElementIndex ( minersList , unit ) ;
24238: LD_ADDR_VAR 0 6
24242: PUSH
24243: LD_EXP 93
24247: PPUSH
24248: LD_VAR 0 1
24252: PPUSH
24253: CALL 30365 0 2
24257: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
24258: LD_ADDR_VAR 0 5
24262: PUSH
24263: DOUBLE
24264: LD_EXP 94
24268: PUSH
24269: LD_VAR 0 6
24273: ARRAY
24274: INC
24275: ST_TO_ADDR
24276: LD_INT 1
24278: PUSH
24279: FOR_DOWNTO
24280: IFFALSE 24441
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
24282: LD_EXP 94
24286: PUSH
24287: LD_VAR 0 6
24291: ARRAY
24292: PUSH
24293: LD_VAR 0 5
24297: ARRAY
24298: PUSH
24299: LD_INT 1
24301: ARRAY
24302: PUSH
24303: LD_VAR 0 2
24307: EQUAL
24308: PUSH
24309: LD_EXP 94
24313: PUSH
24314: LD_VAR 0 6
24318: ARRAY
24319: PUSH
24320: LD_VAR 0 5
24324: ARRAY
24325: PUSH
24326: LD_INT 2
24328: ARRAY
24329: PUSH
24330: LD_VAR 0 3
24334: EQUAL
24335: AND
24336: IFFALSE 24439
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24338: LD_EXP 94
24342: PUSH
24343: LD_VAR 0 6
24347: ARRAY
24348: PUSH
24349: LD_VAR 0 5
24353: ARRAY
24354: PUSH
24355: LD_INT 1
24357: ARRAY
24358: PPUSH
24359: LD_EXP 94
24363: PUSH
24364: LD_VAR 0 6
24368: ARRAY
24369: PUSH
24370: LD_VAR 0 5
24374: ARRAY
24375: PUSH
24376: LD_INT 2
24378: ARRAY
24379: PPUSH
24380: LD_VAR 0 1
24384: PPUSH
24385: CALL_OW 255
24389: PPUSH
24390: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24394: LD_ADDR_EXP 94
24398: PUSH
24399: LD_EXP 94
24403: PPUSH
24404: LD_VAR 0 6
24408: PPUSH
24409: LD_EXP 94
24413: PUSH
24414: LD_VAR 0 6
24418: ARRAY
24419: PPUSH
24420: LD_VAR 0 5
24424: PPUSH
24425: CALL_OW 3
24429: PPUSH
24430: CALL_OW 1
24434: ST_TO_ADDR
// exit ;
24435: POP
24436: POP
24437: GO 24630
// end ; end ;
24439: GO 24279
24441: POP
24442: POP
// for i := minerMinesList [ index ] downto 1 do
24443: LD_ADDR_VAR 0 5
24447: PUSH
24448: DOUBLE
24449: LD_EXP 94
24453: PUSH
24454: LD_VAR 0 6
24458: ARRAY
24459: INC
24460: ST_TO_ADDR
24461: LD_INT 1
24463: PUSH
24464: FOR_DOWNTO
24465: IFFALSE 24628
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
24467: LD_EXP 94
24471: PUSH
24472: LD_VAR 0 6
24476: ARRAY
24477: PUSH
24478: LD_VAR 0 5
24482: ARRAY
24483: PUSH
24484: LD_INT 1
24486: ARRAY
24487: PPUSH
24488: LD_EXP 94
24492: PUSH
24493: LD_VAR 0 6
24497: ARRAY
24498: PUSH
24499: LD_VAR 0 5
24503: ARRAY
24504: PUSH
24505: LD_INT 2
24507: ARRAY
24508: PPUSH
24509: LD_VAR 0 2
24513: PPUSH
24514: LD_VAR 0 3
24518: PPUSH
24519: CALL_OW 298
24523: PUSH
24524: LD_INT 6
24526: LESS
24527: IFFALSE 24626
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24529: LD_EXP 94
24533: PUSH
24534: LD_VAR 0 6
24538: ARRAY
24539: PUSH
24540: LD_VAR 0 5
24544: ARRAY
24545: PUSH
24546: LD_INT 1
24548: ARRAY
24549: PPUSH
24550: LD_EXP 94
24554: PUSH
24555: LD_VAR 0 6
24559: ARRAY
24560: PUSH
24561: LD_VAR 0 5
24565: ARRAY
24566: PUSH
24567: LD_INT 2
24569: ARRAY
24570: PPUSH
24571: LD_VAR 0 1
24575: PPUSH
24576: CALL_OW 255
24580: PPUSH
24581: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24585: LD_ADDR_EXP 94
24589: PUSH
24590: LD_EXP 94
24594: PPUSH
24595: LD_VAR 0 6
24599: PPUSH
24600: LD_EXP 94
24604: PUSH
24605: LD_VAR 0 6
24609: ARRAY
24610: PPUSH
24611: LD_VAR 0 5
24615: PPUSH
24616: CALL_OW 3
24620: PPUSH
24621: CALL_OW 1
24625: ST_TO_ADDR
// end ; end ;
24626: GO 24464
24628: POP
24629: POP
// end ;
24630: LD_VAR 0 4
24634: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
24635: LD_INT 0
24637: PPUSH
24638: PPUSH
24639: PPUSH
24640: PPUSH
24641: PPUSH
24642: PPUSH
24643: PPUSH
24644: PPUSH
24645: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
24646: LD_VAR 0 1
24650: PPUSH
24651: CALL_OW 264
24655: PUSH
24656: LD_EXP 103
24660: EQUAL
24661: NOT
24662: PUSH
24663: LD_VAR 0 1
24667: PUSH
24668: LD_EXP 93
24672: IN
24673: NOT
24674: OR
24675: IFFALSE 24679
// exit ;
24677: GO 25001
// index := GetElementIndex ( minersList , unit ) ;
24679: LD_ADDR_VAR 0 6
24683: PUSH
24684: LD_EXP 93
24688: PPUSH
24689: LD_VAR 0 1
24693: PPUSH
24694: CALL 30365 0 2
24698: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
24699: LD_ADDR_VAR 0 8
24703: PUSH
24704: LD_EXP 95
24708: PUSH
24709: LD_EXP 94
24713: PUSH
24714: LD_VAR 0 6
24718: ARRAY
24719: MINUS
24720: ST_TO_ADDR
// if not minesFreeAmount then
24721: LD_VAR 0 8
24725: NOT
24726: IFFALSE 24730
// exit ;
24728: GO 25001
// tmp := [ ] ;
24730: LD_ADDR_VAR 0 7
24734: PUSH
24735: EMPTY
24736: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
24737: LD_ADDR_VAR 0 5
24741: PUSH
24742: DOUBLE
24743: LD_INT 1
24745: DEC
24746: ST_TO_ADDR
24747: LD_VAR 0 8
24751: PUSH
24752: FOR_TO
24753: IFFALSE 24948
// begin _d := rand ( 0 , 5 ) ;
24755: LD_ADDR_VAR 0 11
24759: PUSH
24760: LD_INT 0
24762: PPUSH
24763: LD_INT 5
24765: PPUSH
24766: CALL_OW 12
24770: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
24771: LD_ADDR_VAR 0 12
24775: PUSH
24776: LD_INT 2
24778: PPUSH
24779: LD_INT 6
24781: PPUSH
24782: CALL_OW 12
24786: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
24787: LD_ADDR_VAR 0 9
24791: PUSH
24792: LD_VAR 0 2
24796: PPUSH
24797: LD_VAR 0 11
24801: PPUSH
24802: LD_VAR 0 12
24806: PPUSH
24807: CALL_OW 272
24811: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
24812: LD_ADDR_VAR 0 10
24816: PUSH
24817: LD_VAR 0 3
24821: PPUSH
24822: LD_VAR 0 11
24826: PPUSH
24827: LD_VAR 0 12
24831: PPUSH
24832: CALL_OW 273
24836: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
24837: LD_VAR 0 9
24841: PPUSH
24842: LD_VAR 0 10
24846: PPUSH
24847: CALL_OW 488
24851: PUSH
24852: LD_VAR 0 9
24856: PUSH
24857: LD_VAR 0 10
24861: PUSH
24862: EMPTY
24863: LIST
24864: LIST
24865: PUSH
24866: LD_VAR 0 7
24870: IN
24871: NOT
24872: AND
24873: PUSH
24874: LD_VAR 0 9
24878: PPUSH
24879: LD_VAR 0 10
24883: PPUSH
24884: CALL_OW 458
24888: NOT
24889: AND
24890: IFFALSE 24932
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
24892: LD_ADDR_VAR 0 7
24896: PUSH
24897: LD_VAR 0 7
24901: PPUSH
24902: LD_VAR 0 7
24906: PUSH
24907: LD_INT 1
24909: PLUS
24910: PPUSH
24911: LD_VAR 0 9
24915: PUSH
24916: LD_VAR 0 10
24920: PUSH
24921: EMPTY
24922: LIST
24923: LIST
24924: PPUSH
24925: CALL_OW 1
24929: ST_TO_ADDR
24930: GO 24946
// i := i - 1 ;
24932: LD_ADDR_VAR 0 5
24936: PUSH
24937: LD_VAR 0 5
24941: PUSH
24942: LD_INT 1
24944: MINUS
24945: ST_TO_ADDR
// end ;
24946: GO 24752
24948: POP
24949: POP
// for i in tmp do
24950: LD_ADDR_VAR 0 5
24954: PUSH
24955: LD_VAR 0 7
24959: PUSH
24960: FOR_IN
24961: IFFALSE 24999
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
24963: LD_VAR 0 1
24967: PPUSH
24968: LD_VAR 0 5
24972: PUSH
24973: LD_INT 1
24975: ARRAY
24976: PPUSH
24977: LD_VAR 0 5
24981: PUSH
24982: LD_INT 2
24984: ARRAY
24985: PPUSH
24986: CALL 23941 0 3
24990: NOT
24991: IFFALSE 24997
// exit ;
24993: POP
24994: POP
24995: GO 25001
24997: GO 24960
24999: POP
25000: POP
// end ;
25001: LD_VAR 0 4
25005: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
25006: LD_INT 0
25008: PPUSH
25009: PPUSH
25010: PPUSH
25011: PPUSH
25012: PPUSH
25013: PPUSH
25014: PPUSH
// if not GetClass ( unit ) = class_sniper then
25015: LD_VAR 0 1
25019: PPUSH
25020: CALL_OW 257
25024: PUSH
25025: LD_INT 5
25027: EQUAL
25028: NOT
25029: IFFALSE 25033
// exit ;
25031: GO 25421
// dist := 8 ;
25033: LD_ADDR_VAR 0 5
25037: PUSH
25038: LD_INT 8
25040: ST_TO_ADDR
// viewRange := 12 ;
25041: LD_ADDR_VAR 0 7
25045: PUSH
25046: LD_INT 12
25048: ST_TO_ADDR
// side := GetSide ( unit ) ;
25049: LD_ADDR_VAR 0 6
25053: PUSH
25054: LD_VAR 0 1
25058: PPUSH
25059: CALL_OW 255
25063: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
25064: LD_INT 61
25066: PPUSH
25067: LD_VAR 0 6
25071: PPUSH
25072: CALL_OW 321
25076: PUSH
25077: LD_INT 2
25079: EQUAL
25080: IFFALSE 25090
// viewRange := 16 ;
25082: LD_ADDR_VAR 0 7
25086: PUSH
25087: LD_INT 16
25089: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
25090: LD_VAR 0 1
25094: PPUSH
25095: LD_VAR 0 2
25099: PPUSH
25100: LD_VAR 0 3
25104: PPUSH
25105: CALL_OW 297
25109: PUSH
25110: LD_VAR 0 5
25114: GREATER
25115: IFFALSE 25194
// begin ComMoveXY ( unit , x , y ) ;
25117: LD_VAR 0 1
25121: PPUSH
25122: LD_VAR 0 2
25126: PPUSH
25127: LD_VAR 0 3
25131: PPUSH
25132: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25136: LD_INT 35
25138: PPUSH
25139: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
25143: LD_VAR 0 1
25147: PPUSH
25148: LD_VAR 0 2
25152: PPUSH
25153: LD_VAR 0 3
25157: PPUSH
25158: CALL 61137 0 3
25162: NOT
25163: IFFALSE 25167
// exit ;
25165: GO 25421
// until GetDistUnitXY ( unit , x , y ) < dist ;
25167: LD_VAR 0 1
25171: PPUSH
25172: LD_VAR 0 2
25176: PPUSH
25177: LD_VAR 0 3
25181: PPUSH
25182: CALL_OW 297
25186: PUSH
25187: LD_VAR 0 5
25191: LESS
25192: IFFALSE 25136
// end ; ComTurnXY ( unit , x , y ) ;
25194: LD_VAR 0 1
25198: PPUSH
25199: LD_VAR 0 2
25203: PPUSH
25204: LD_VAR 0 3
25208: PPUSH
25209: CALL_OW 118
// wait ( 5 ) ;
25213: LD_INT 5
25215: PPUSH
25216: CALL_OW 67
// _d := GetDir ( unit ) ;
25220: LD_ADDR_VAR 0 10
25224: PUSH
25225: LD_VAR 0 1
25229: PPUSH
25230: CALL_OW 254
25234: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
25235: LD_ADDR_VAR 0 8
25239: PUSH
25240: LD_VAR 0 1
25244: PPUSH
25245: CALL_OW 250
25249: PPUSH
25250: LD_VAR 0 10
25254: PPUSH
25255: LD_VAR 0 5
25259: PPUSH
25260: CALL_OW 272
25264: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
25265: LD_ADDR_VAR 0 9
25269: PUSH
25270: LD_VAR 0 1
25274: PPUSH
25275: CALL_OW 251
25279: PPUSH
25280: LD_VAR 0 10
25284: PPUSH
25285: LD_VAR 0 5
25289: PPUSH
25290: CALL_OW 273
25294: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25295: LD_VAR 0 8
25299: PPUSH
25300: LD_VAR 0 9
25304: PPUSH
25305: CALL_OW 488
25309: NOT
25310: IFFALSE 25314
// exit ;
25312: GO 25421
// ComAnimCustom ( unit , 1 ) ;
25314: LD_VAR 0 1
25318: PPUSH
25319: LD_INT 1
25321: PPUSH
25322: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
25326: LD_VAR 0 8
25330: PPUSH
25331: LD_VAR 0 9
25335: PPUSH
25336: LD_VAR 0 6
25340: PPUSH
25341: LD_VAR 0 7
25345: PPUSH
25346: CALL_OW 330
// repeat wait ( 1 ) ;
25350: LD_INT 1
25352: PPUSH
25353: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
25357: LD_VAR 0 1
25361: PPUSH
25362: CALL_OW 316
25366: PUSH
25367: LD_VAR 0 1
25371: PPUSH
25372: CALL_OW 314
25376: OR
25377: PUSH
25378: LD_VAR 0 1
25382: PPUSH
25383: CALL_OW 302
25387: NOT
25388: OR
25389: PUSH
25390: LD_VAR 0 1
25394: PPUSH
25395: CALL_OW 301
25399: OR
25400: IFFALSE 25350
// RemoveSeeing ( _x , _y , side ) ;
25402: LD_VAR 0 8
25406: PPUSH
25407: LD_VAR 0 9
25411: PPUSH
25412: LD_VAR 0 6
25416: PPUSH
25417: CALL_OW 331
// end ; end_of_file
25421: LD_VAR 0 4
25425: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
25426: LD_INT 0
25428: PPUSH
// ar_miner := 81 ;
25429: LD_ADDR_EXP 103
25433: PUSH
25434: LD_INT 81
25436: ST_TO_ADDR
// ar_crane := 88 ;
25437: LD_ADDR_EXP 102
25441: PUSH
25442: LD_INT 88
25444: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
25445: LD_ADDR_EXP 97
25449: PUSH
25450: LD_INT 89
25452: ST_TO_ADDR
// us_hack := 99 ;
25453: LD_ADDR_EXP 98
25457: PUSH
25458: LD_INT 99
25460: ST_TO_ADDR
// us_artillery := 97 ;
25461: LD_ADDR_EXP 99
25465: PUSH
25466: LD_INT 97
25468: ST_TO_ADDR
// ar_bio_bomb := 91 ;
25469: LD_ADDR_EXP 100
25473: PUSH
25474: LD_INT 91
25476: ST_TO_ADDR
// ar_mortar := 92 ;
25477: LD_ADDR_EXP 101
25481: PUSH
25482: LD_INT 92
25484: ST_TO_ADDR
// ru_radar := 98 ;
25485: LD_ADDR_EXP 96
25489: PUSH
25490: LD_INT 98
25492: ST_TO_ADDR
// tech_Artillery := 80 ;
25493: LD_ADDR_EXP 104
25497: PUSH
25498: LD_INT 80
25500: ST_TO_ADDR
// tech_RadMat := 81 ;
25501: LD_ADDR_EXP 105
25505: PUSH
25506: LD_INT 81
25508: ST_TO_ADDR
// tech_BasicTools := 82 ;
25509: LD_ADDR_EXP 106
25513: PUSH
25514: LD_INT 82
25516: ST_TO_ADDR
// tech_Cargo := 83 ;
25517: LD_ADDR_EXP 107
25521: PUSH
25522: LD_INT 83
25524: ST_TO_ADDR
// tech_Track := 84 ;
25525: LD_ADDR_EXP 108
25529: PUSH
25530: LD_INT 84
25532: ST_TO_ADDR
// tech_Crane := 85 ;
25533: LD_ADDR_EXP 109
25537: PUSH
25538: LD_INT 85
25540: ST_TO_ADDR
// tech_Bulldozer := 86 ;
25541: LD_ADDR_EXP 110
25545: PUSH
25546: LD_INT 86
25548: ST_TO_ADDR
// tech_Hovercraft := 87 ;
25549: LD_ADDR_EXP 111
25553: PUSH
25554: LD_INT 87
25556: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
25557: LD_ADDR_EXP 112
25561: PUSH
25562: LD_INT 88
25564: ST_TO_ADDR
// class_mastodont := 31 ;
25565: LD_ADDR_EXP 113
25569: PUSH
25570: LD_INT 31
25572: ST_TO_ADDR
// class_horse := 21 ;
25573: LD_ADDR_EXP 114
25577: PUSH
25578: LD_INT 21
25580: ST_TO_ADDR
// end ;
25581: LD_VAR 0 1
25585: RET
// every 1 do
25586: GO 25588
25588: DISABLE
// InitGlobalVariables ; end_of_file
25589: CALL 25426 0 0
25593: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25594: LD_INT 0
25596: PPUSH
25597: PPUSH
// if exist_mode then
25598: LD_VAR 0 2
25602: IFFALSE 25627
// unit := CreateCharacter ( prefix & ident ) else
25604: LD_ADDR_VAR 0 5
25608: PUSH
25609: LD_VAR 0 3
25613: PUSH
25614: LD_VAR 0 1
25618: STR
25619: PPUSH
25620: CALL_OW 34
25624: ST_TO_ADDR
25625: GO 25642
// unit := NewCharacter ( ident ) ;
25627: LD_ADDR_VAR 0 5
25631: PUSH
25632: LD_VAR 0 1
25636: PPUSH
25637: CALL_OW 25
25641: ST_TO_ADDR
// result := unit ;
25642: LD_ADDR_VAR 0 4
25646: PUSH
25647: LD_VAR 0 5
25651: ST_TO_ADDR
// end ;
25652: LD_VAR 0 4
25656: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
25657: LD_INT 0
25659: PPUSH
25660: PPUSH
// if not side or not nation then
25661: LD_VAR 0 1
25665: NOT
25666: PUSH
25667: LD_VAR 0 2
25671: NOT
25672: OR
25673: IFFALSE 25677
// exit ;
25675: GO 26445
// case nation of nation_american :
25677: LD_VAR 0 2
25681: PUSH
25682: LD_INT 1
25684: DOUBLE
25685: EQUAL
25686: IFTRUE 25690
25688: GO 25904
25690: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
25691: LD_ADDR_VAR 0 4
25695: PUSH
25696: LD_INT 35
25698: PUSH
25699: LD_INT 45
25701: PUSH
25702: LD_INT 46
25704: PUSH
25705: LD_INT 47
25707: PUSH
25708: LD_INT 82
25710: PUSH
25711: LD_INT 83
25713: PUSH
25714: LD_INT 84
25716: PUSH
25717: LD_INT 85
25719: PUSH
25720: LD_INT 86
25722: PUSH
25723: LD_INT 1
25725: PUSH
25726: LD_INT 2
25728: PUSH
25729: LD_INT 6
25731: PUSH
25732: LD_INT 15
25734: PUSH
25735: LD_INT 16
25737: PUSH
25738: LD_INT 7
25740: PUSH
25741: LD_INT 12
25743: PUSH
25744: LD_INT 13
25746: PUSH
25747: LD_INT 10
25749: PUSH
25750: LD_INT 14
25752: PUSH
25753: LD_INT 20
25755: PUSH
25756: LD_INT 21
25758: PUSH
25759: LD_INT 22
25761: PUSH
25762: LD_INT 25
25764: PUSH
25765: LD_INT 32
25767: PUSH
25768: LD_INT 27
25770: PUSH
25771: LD_INT 36
25773: PUSH
25774: LD_INT 69
25776: PUSH
25777: LD_INT 39
25779: PUSH
25780: LD_INT 34
25782: PUSH
25783: LD_INT 40
25785: PUSH
25786: LD_INT 48
25788: PUSH
25789: LD_INT 49
25791: PUSH
25792: LD_INT 50
25794: PUSH
25795: LD_INT 51
25797: PUSH
25798: LD_INT 52
25800: PUSH
25801: LD_INT 53
25803: PUSH
25804: LD_INT 54
25806: PUSH
25807: LD_INT 55
25809: PUSH
25810: LD_INT 56
25812: PUSH
25813: LD_INT 57
25815: PUSH
25816: LD_INT 58
25818: PUSH
25819: LD_INT 59
25821: PUSH
25822: LD_INT 60
25824: PUSH
25825: LD_INT 61
25827: PUSH
25828: LD_INT 62
25830: PUSH
25831: LD_INT 80
25833: PUSH
25834: LD_INT 82
25836: PUSH
25837: LD_INT 83
25839: PUSH
25840: LD_INT 84
25842: PUSH
25843: LD_INT 85
25845: PUSH
25846: LD_INT 86
25848: PUSH
25849: EMPTY
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: LIST
25862: LIST
25863: LIST
25864: LIST
25865: LIST
25866: LIST
25867: LIST
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: LIST
25882: LIST
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: LIST
25888: LIST
25889: LIST
25890: LIST
25891: LIST
25892: LIST
25893: LIST
25894: LIST
25895: LIST
25896: LIST
25897: LIST
25898: LIST
25899: LIST
25900: LIST
25901: ST_TO_ADDR
25902: GO 26369
25904: LD_INT 2
25906: DOUBLE
25907: EQUAL
25908: IFTRUE 25912
25910: GO 26138
25912: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
25913: LD_ADDR_VAR 0 4
25917: PUSH
25918: LD_INT 35
25920: PUSH
25921: LD_INT 45
25923: PUSH
25924: LD_INT 46
25926: PUSH
25927: LD_INT 47
25929: PUSH
25930: LD_INT 82
25932: PUSH
25933: LD_INT 83
25935: PUSH
25936: LD_INT 84
25938: PUSH
25939: LD_INT 85
25941: PUSH
25942: LD_INT 87
25944: PUSH
25945: LD_INT 70
25947: PUSH
25948: LD_INT 1
25950: PUSH
25951: LD_INT 11
25953: PUSH
25954: LD_INT 3
25956: PUSH
25957: LD_INT 4
25959: PUSH
25960: LD_INT 5
25962: PUSH
25963: LD_INT 6
25965: PUSH
25966: LD_INT 15
25968: PUSH
25969: LD_INT 18
25971: PUSH
25972: LD_INT 7
25974: PUSH
25975: LD_INT 17
25977: PUSH
25978: LD_INT 8
25980: PUSH
25981: LD_INT 20
25983: PUSH
25984: LD_INT 21
25986: PUSH
25987: LD_INT 22
25989: PUSH
25990: LD_INT 72
25992: PUSH
25993: LD_INT 26
25995: PUSH
25996: LD_INT 69
25998: PUSH
25999: LD_INT 39
26001: PUSH
26002: LD_INT 40
26004: PUSH
26005: LD_INT 41
26007: PUSH
26008: LD_INT 42
26010: PUSH
26011: LD_INT 43
26013: PUSH
26014: LD_INT 48
26016: PUSH
26017: LD_INT 49
26019: PUSH
26020: LD_INT 50
26022: PUSH
26023: LD_INT 51
26025: PUSH
26026: LD_INT 52
26028: PUSH
26029: LD_INT 53
26031: PUSH
26032: LD_INT 54
26034: PUSH
26035: LD_INT 55
26037: PUSH
26038: LD_INT 56
26040: PUSH
26041: LD_INT 60
26043: PUSH
26044: LD_INT 61
26046: PUSH
26047: LD_INT 62
26049: PUSH
26050: LD_INT 66
26052: PUSH
26053: LD_INT 67
26055: PUSH
26056: LD_INT 68
26058: PUSH
26059: LD_INT 81
26061: PUSH
26062: LD_INT 82
26064: PUSH
26065: LD_INT 83
26067: PUSH
26068: LD_INT 84
26070: PUSH
26071: LD_INT 85
26073: PUSH
26074: LD_INT 87
26076: PUSH
26077: LD_INT 88
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: LIST
26084: LIST
26085: LIST
26086: LIST
26087: LIST
26088: LIST
26089: LIST
26090: LIST
26091: LIST
26092: LIST
26093: LIST
26094: LIST
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: LIST
26112: LIST
26113: LIST
26114: LIST
26115: LIST
26116: LIST
26117: LIST
26118: LIST
26119: LIST
26120: LIST
26121: LIST
26122: LIST
26123: LIST
26124: LIST
26125: LIST
26126: LIST
26127: LIST
26128: LIST
26129: LIST
26130: LIST
26131: LIST
26132: LIST
26133: LIST
26134: LIST
26135: ST_TO_ADDR
26136: GO 26369
26138: LD_INT 3
26140: DOUBLE
26141: EQUAL
26142: IFTRUE 26146
26144: GO 26368
26146: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
26147: LD_ADDR_VAR 0 4
26151: PUSH
26152: LD_INT 46
26154: PUSH
26155: LD_INT 47
26157: PUSH
26158: LD_INT 1
26160: PUSH
26161: LD_INT 2
26163: PUSH
26164: LD_INT 82
26166: PUSH
26167: LD_INT 83
26169: PUSH
26170: LD_INT 84
26172: PUSH
26173: LD_INT 85
26175: PUSH
26176: LD_INT 86
26178: PUSH
26179: LD_INT 11
26181: PUSH
26182: LD_INT 9
26184: PUSH
26185: LD_INT 20
26187: PUSH
26188: LD_INT 19
26190: PUSH
26191: LD_INT 21
26193: PUSH
26194: LD_INT 24
26196: PUSH
26197: LD_INT 22
26199: PUSH
26200: LD_INT 25
26202: PUSH
26203: LD_INT 28
26205: PUSH
26206: LD_INT 29
26208: PUSH
26209: LD_INT 30
26211: PUSH
26212: LD_INT 31
26214: PUSH
26215: LD_INT 37
26217: PUSH
26218: LD_INT 38
26220: PUSH
26221: LD_INT 32
26223: PUSH
26224: LD_INT 27
26226: PUSH
26227: LD_INT 33
26229: PUSH
26230: LD_INT 69
26232: PUSH
26233: LD_INT 39
26235: PUSH
26236: LD_INT 34
26238: PUSH
26239: LD_INT 40
26241: PUSH
26242: LD_INT 71
26244: PUSH
26245: LD_INT 23
26247: PUSH
26248: LD_INT 44
26250: PUSH
26251: LD_INT 48
26253: PUSH
26254: LD_INT 49
26256: PUSH
26257: LD_INT 50
26259: PUSH
26260: LD_INT 51
26262: PUSH
26263: LD_INT 52
26265: PUSH
26266: LD_INT 53
26268: PUSH
26269: LD_INT 54
26271: PUSH
26272: LD_INT 55
26274: PUSH
26275: LD_INT 56
26277: PUSH
26278: LD_INT 57
26280: PUSH
26281: LD_INT 58
26283: PUSH
26284: LD_INT 59
26286: PUSH
26287: LD_INT 63
26289: PUSH
26290: LD_INT 64
26292: PUSH
26293: LD_INT 65
26295: PUSH
26296: LD_INT 82
26298: PUSH
26299: LD_INT 83
26301: PUSH
26302: LD_INT 84
26304: PUSH
26305: LD_INT 85
26307: PUSH
26308: LD_INT 86
26310: PUSH
26311: EMPTY
26312: LIST
26313: LIST
26314: LIST
26315: LIST
26316: LIST
26317: LIST
26318: LIST
26319: LIST
26320: LIST
26321: LIST
26322: LIST
26323: LIST
26324: LIST
26325: LIST
26326: LIST
26327: LIST
26328: LIST
26329: LIST
26330: LIST
26331: LIST
26332: LIST
26333: LIST
26334: LIST
26335: LIST
26336: LIST
26337: LIST
26338: LIST
26339: LIST
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: LIST
26355: LIST
26356: LIST
26357: LIST
26358: LIST
26359: LIST
26360: LIST
26361: LIST
26362: LIST
26363: LIST
26364: LIST
26365: ST_TO_ADDR
26366: GO 26369
26368: POP
// if state > - 1 and state < 3 then
26369: LD_VAR 0 3
26373: PUSH
26374: LD_INT 1
26376: NEG
26377: GREATER
26378: PUSH
26379: LD_VAR 0 3
26383: PUSH
26384: LD_INT 3
26386: LESS
26387: AND
26388: IFFALSE 26445
// for i in result do
26390: LD_ADDR_VAR 0 5
26394: PUSH
26395: LD_VAR 0 4
26399: PUSH
26400: FOR_IN
26401: IFFALSE 26443
// if GetTech ( i , side ) <> state then
26403: LD_VAR 0 5
26407: PPUSH
26408: LD_VAR 0 1
26412: PPUSH
26413: CALL_OW 321
26417: PUSH
26418: LD_VAR 0 3
26422: NONEQUAL
26423: IFFALSE 26441
// result := result diff i ;
26425: LD_ADDR_VAR 0 4
26429: PUSH
26430: LD_VAR 0 4
26434: PUSH
26435: LD_VAR 0 5
26439: DIFF
26440: ST_TO_ADDR
26441: GO 26400
26443: POP
26444: POP
// end ;
26445: LD_VAR 0 4
26449: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
26450: LD_INT 0
26452: PPUSH
26453: PPUSH
26454: PPUSH
// result := true ;
26455: LD_ADDR_VAR 0 3
26459: PUSH
26460: LD_INT 1
26462: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
26463: LD_ADDR_VAR 0 5
26467: PUSH
26468: LD_VAR 0 2
26472: PPUSH
26473: CALL_OW 480
26477: ST_TO_ADDR
// if not tmp then
26478: LD_VAR 0 5
26482: NOT
26483: IFFALSE 26487
// exit ;
26485: GO 26536
// for i in tmp do
26487: LD_ADDR_VAR 0 4
26491: PUSH
26492: LD_VAR 0 5
26496: PUSH
26497: FOR_IN
26498: IFFALSE 26534
// if GetTech ( i , side ) <> state_researched then
26500: LD_VAR 0 4
26504: PPUSH
26505: LD_VAR 0 1
26509: PPUSH
26510: CALL_OW 321
26514: PUSH
26515: LD_INT 2
26517: NONEQUAL
26518: IFFALSE 26532
// begin result := false ;
26520: LD_ADDR_VAR 0 3
26524: PUSH
26525: LD_INT 0
26527: ST_TO_ADDR
// exit ;
26528: POP
26529: POP
26530: GO 26536
// end ;
26532: GO 26497
26534: POP
26535: POP
// end ;
26536: LD_VAR 0 3
26540: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
26541: LD_INT 0
26543: PPUSH
26544: PPUSH
26545: PPUSH
26546: PPUSH
26547: PPUSH
26548: PPUSH
26549: PPUSH
26550: PPUSH
26551: PPUSH
26552: PPUSH
26553: PPUSH
26554: PPUSH
26555: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
26556: LD_VAR 0 1
26560: NOT
26561: PUSH
26562: LD_VAR 0 1
26566: PPUSH
26567: CALL_OW 257
26571: PUSH
26572: LD_INT 9
26574: NONEQUAL
26575: OR
26576: IFFALSE 26580
// exit ;
26578: GO 27153
// side := GetSide ( unit ) ;
26580: LD_ADDR_VAR 0 9
26584: PUSH
26585: LD_VAR 0 1
26589: PPUSH
26590: CALL_OW 255
26594: ST_TO_ADDR
// tech_space := tech_spacanom ;
26595: LD_ADDR_VAR 0 12
26599: PUSH
26600: LD_INT 29
26602: ST_TO_ADDR
// tech_time := tech_taurad ;
26603: LD_ADDR_VAR 0 13
26607: PUSH
26608: LD_INT 28
26610: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26611: LD_ADDR_VAR 0 11
26615: PUSH
26616: LD_VAR 0 1
26620: PPUSH
26621: CALL_OW 310
26625: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26626: LD_VAR 0 11
26630: PPUSH
26631: CALL_OW 247
26635: PUSH
26636: LD_INT 2
26638: EQUAL
26639: IFFALSE 26643
// exit ;
26641: GO 27153
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26643: LD_ADDR_VAR 0 8
26647: PUSH
26648: LD_INT 81
26650: PUSH
26651: LD_VAR 0 9
26655: PUSH
26656: EMPTY
26657: LIST
26658: LIST
26659: PUSH
26660: LD_INT 3
26662: PUSH
26663: LD_INT 21
26665: PUSH
26666: LD_INT 3
26668: PUSH
26669: EMPTY
26670: LIST
26671: LIST
26672: PUSH
26673: EMPTY
26674: LIST
26675: LIST
26676: PUSH
26677: EMPTY
26678: LIST
26679: LIST
26680: PPUSH
26681: CALL_OW 69
26685: ST_TO_ADDR
// if not tmp then
26686: LD_VAR 0 8
26690: NOT
26691: IFFALSE 26695
// exit ;
26693: GO 27153
// if in_unit then
26695: LD_VAR 0 11
26699: IFFALSE 26723
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
26701: LD_ADDR_VAR 0 10
26705: PUSH
26706: LD_VAR 0 8
26710: PPUSH
26711: LD_VAR 0 11
26715: PPUSH
26716: CALL_OW 74
26720: ST_TO_ADDR
26721: GO 26743
// enemy := NearestUnitToUnit ( tmp , unit ) ;
26723: LD_ADDR_VAR 0 10
26727: PUSH
26728: LD_VAR 0 8
26732: PPUSH
26733: LD_VAR 0 1
26737: PPUSH
26738: CALL_OW 74
26742: ST_TO_ADDR
// if not enemy then
26743: LD_VAR 0 10
26747: NOT
26748: IFFALSE 26752
// exit ;
26750: GO 27153
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
26752: LD_VAR 0 11
26756: PUSH
26757: LD_VAR 0 11
26761: PPUSH
26762: LD_VAR 0 10
26766: PPUSH
26767: CALL_OW 296
26771: PUSH
26772: LD_INT 13
26774: GREATER
26775: AND
26776: PUSH
26777: LD_VAR 0 1
26781: PPUSH
26782: LD_VAR 0 10
26786: PPUSH
26787: CALL_OW 296
26791: PUSH
26792: LD_INT 12
26794: GREATER
26795: OR
26796: IFFALSE 26800
// exit ;
26798: GO 27153
// missile := [ 1 ] ;
26800: LD_ADDR_VAR 0 14
26804: PUSH
26805: LD_INT 1
26807: PUSH
26808: EMPTY
26809: LIST
26810: ST_TO_ADDR
// if Researched ( side , tech_space ) then
26811: LD_VAR 0 9
26815: PPUSH
26816: LD_VAR 0 12
26820: PPUSH
26821: CALL_OW 325
26825: IFFALSE 26854
// missile := Insert ( missile , missile + 1 , 2 ) ;
26827: LD_ADDR_VAR 0 14
26831: PUSH
26832: LD_VAR 0 14
26836: PPUSH
26837: LD_VAR 0 14
26841: PUSH
26842: LD_INT 1
26844: PLUS
26845: PPUSH
26846: LD_INT 2
26848: PPUSH
26849: CALL_OW 2
26853: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
26854: LD_VAR 0 9
26858: PPUSH
26859: LD_VAR 0 13
26863: PPUSH
26864: CALL_OW 325
26868: PUSH
26869: LD_VAR 0 10
26873: PPUSH
26874: CALL_OW 255
26878: PPUSH
26879: LD_VAR 0 13
26883: PPUSH
26884: CALL_OW 325
26888: NOT
26889: AND
26890: IFFALSE 26919
// missile := Insert ( missile , missile + 1 , 3 ) ;
26892: LD_ADDR_VAR 0 14
26896: PUSH
26897: LD_VAR 0 14
26901: PPUSH
26902: LD_VAR 0 14
26906: PUSH
26907: LD_INT 1
26909: PLUS
26910: PPUSH
26911: LD_INT 3
26913: PPUSH
26914: CALL_OW 2
26918: ST_TO_ADDR
// if missile < 2 then
26919: LD_VAR 0 14
26923: PUSH
26924: LD_INT 2
26926: LESS
26927: IFFALSE 26931
// exit ;
26929: GO 27153
// x := GetX ( enemy ) ;
26931: LD_ADDR_VAR 0 4
26935: PUSH
26936: LD_VAR 0 10
26940: PPUSH
26941: CALL_OW 250
26945: ST_TO_ADDR
// y := GetY ( enemy ) ;
26946: LD_ADDR_VAR 0 5
26950: PUSH
26951: LD_VAR 0 10
26955: PPUSH
26956: CALL_OW 251
26960: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
26961: LD_ADDR_VAR 0 6
26965: PUSH
26966: LD_VAR 0 4
26970: PUSH
26971: LD_INT 1
26973: NEG
26974: PPUSH
26975: LD_INT 1
26977: PPUSH
26978: CALL_OW 12
26982: PLUS
26983: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
26984: LD_ADDR_VAR 0 7
26988: PUSH
26989: LD_VAR 0 5
26993: PUSH
26994: LD_INT 1
26996: NEG
26997: PPUSH
26998: LD_INT 1
27000: PPUSH
27001: CALL_OW 12
27005: PLUS
27006: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27007: LD_VAR 0 6
27011: PPUSH
27012: LD_VAR 0 7
27016: PPUSH
27017: CALL_OW 488
27021: NOT
27022: IFFALSE 27044
// begin _x := x ;
27024: LD_ADDR_VAR 0 6
27028: PUSH
27029: LD_VAR 0 4
27033: ST_TO_ADDR
// _y := y ;
27034: LD_ADDR_VAR 0 7
27038: PUSH
27039: LD_VAR 0 5
27043: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
27044: LD_ADDR_VAR 0 3
27048: PUSH
27049: LD_INT 1
27051: PPUSH
27052: LD_VAR 0 14
27056: PPUSH
27057: CALL_OW 12
27061: ST_TO_ADDR
// case i of 1 :
27062: LD_VAR 0 3
27066: PUSH
27067: LD_INT 1
27069: DOUBLE
27070: EQUAL
27071: IFTRUE 27075
27073: GO 27092
27075: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
27076: LD_VAR 0 1
27080: PPUSH
27081: LD_VAR 0 10
27085: PPUSH
27086: CALL_OW 115
27090: GO 27153
27092: LD_INT 2
27094: DOUBLE
27095: EQUAL
27096: IFTRUE 27100
27098: GO 27122
27100: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
27101: LD_VAR 0 1
27105: PPUSH
27106: LD_VAR 0 6
27110: PPUSH
27111: LD_VAR 0 7
27115: PPUSH
27116: CALL_OW 153
27120: GO 27153
27122: LD_INT 3
27124: DOUBLE
27125: EQUAL
27126: IFTRUE 27130
27128: GO 27152
27130: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
27131: LD_VAR 0 1
27135: PPUSH
27136: LD_VAR 0 6
27140: PPUSH
27141: LD_VAR 0 7
27145: PPUSH
27146: CALL_OW 154
27150: GO 27153
27152: POP
// end ;
27153: LD_VAR 0 2
27157: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
27158: LD_INT 0
27160: PPUSH
27161: PPUSH
27162: PPUSH
27163: PPUSH
27164: PPUSH
27165: PPUSH
// if not unit or not building then
27166: LD_VAR 0 1
27170: NOT
27171: PUSH
27172: LD_VAR 0 2
27176: NOT
27177: OR
27178: IFFALSE 27182
// exit ;
27180: GO 27340
// x := GetX ( building ) ;
27182: LD_ADDR_VAR 0 5
27186: PUSH
27187: LD_VAR 0 2
27191: PPUSH
27192: CALL_OW 250
27196: ST_TO_ADDR
// y := GetY ( building ) ;
27197: LD_ADDR_VAR 0 6
27201: PUSH
27202: LD_VAR 0 2
27206: PPUSH
27207: CALL_OW 251
27211: ST_TO_ADDR
// for i = 0 to 5 do
27212: LD_ADDR_VAR 0 4
27216: PUSH
27217: DOUBLE
27218: LD_INT 0
27220: DEC
27221: ST_TO_ADDR
27222: LD_INT 5
27224: PUSH
27225: FOR_TO
27226: IFFALSE 27338
// begin _x := ShiftX ( x , i , 3 ) ;
27228: LD_ADDR_VAR 0 7
27232: PUSH
27233: LD_VAR 0 5
27237: PPUSH
27238: LD_VAR 0 4
27242: PPUSH
27243: LD_INT 3
27245: PPUSH
27246: CALL_OW 272
27250: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
27251: LD_ADDR_VAR 0 8
27255: PUSH
27256: LD_VAR 0 6
27260: PPUSH
27261: LD_VAR 0 4
27265: PPUSH
27266: LD_INT 3
27268: PPUSH
27269: CALL_OW 273
27273: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27274: LD_VAR 0 7
27278: PPUSH
27279: LD_VAR 0 8
27283: PPUSH
27284: CALL_OW 488
27288: NOT
27289: IFFALSE 27293
// continue ;
27291: GO 27225
// if HexInfo ( _x , _y ) = 0 then
27293: LD_VAR 0 7
27297: PPUSH
27298: LD_VAR 0 8
27302: PPUSH
27303: CALL_OW 428
27307: PUSH
27308: LD_INT 0
27310: EQUAL
27311: IFFALSE 27336
// begin ComMoveXY ( unit , _x , _y ) ;
27313: LD_VAR 0 1
27317: PPUSH
27318: LD_VAR 0 7
27322: PPUSH
27323: LD_VAR 0 8
27327: PPUSH
27328: CALL_OW 111
// exit ;
27332: POP
27333: POP
27334: GO 27340
// end ; end ;
27336: GO 27225
27338: POP
27339: POP
// end ;
27340: LD_VAR 0 3
27344: RET
// export function ScanBase ( side , base_area ) ; begin
27345: LD_INT 0
27347: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
27348: LD_ADDR_VAR 0 3
27352: PUSH
27353: LD_VAR 0 2
27357: PPUSH
27358: LD_INT 81
27360: PUSH
27361: LD_VAR 0 1
27365: PUSH
27366: EMPTY
27367: LIST
27368: LIST
27369: PPUSH
27370: CALL_OW 70
27374: ST_TO_ADDR
// end ;
27375: LD_VAR 0 3
27379: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
27380: LD_INT 0
27382: PPUSH
27383: PPUSH
27384: PPUSH
27385: PPUSH
// result := false ;
27386: LD_ADDR_VAR 0 2
27390: PUSH
27391: LD_INT 0
27393: ST_TO_ADDR
// side := GetSide ( unit ) ;
27394: LD_ADDR_VAR 0 3
27398: PUSH
27399: LD_VAR 0 1
27403: PPUSH
27404: CALL_OW 255
27408: ST_TO_ADDR
// nat := GetNation ( unit ) ;
27409: LD_ADDR_VAR 0 4
27413: PUSH
27414: LD_VAR 0 1
27418: PPUSH
27419: CALL_OW 248
27423: ST_TO_ADDR
// case nat of 1 :
27424: LD_VAR 0 4
27428: PUSH
27429: LD_INT 1
27431: DOUBLE
27432: EQUAL
27433: IFTRUE 27437
27435: GO 27448
27437: POP
// tech := tech_lassight ; 2 :
27438: LD_ADDR_VAR 0 5
27442: PUSH
27443: LD_INT 12
27445: ST_TO_ADDR
27446: GO 27487
27448: LD_INT 2
27450: DOUBLE
27451: EQUAL
27452: IFTRUE 27456
27454: GO 27467
27456: POP
// tech := tech_mortar ; 3 :
27457: LD_ADDR_VAR 0 5
27461: PUSH
27462: LD_INT 41
27464: ST_TO_ADDR
27465: GO 27487
27467: LD_INT 3
27469: DOUBLE
27470: EQUAL
27471: IFTRUE 27475
27473: GO 27486
27475: POP
// tech := tech_bazooka ; end ;
27476: LD_ADDR_VAR 0 5
27480: PUSH
27481: LD_INT 44
27483: ST_TO_ADDR
27484: GO 27487
27486: POP
// if Researched ( side , tech ) then
27487: LD_VAR 0 3
27491: PPUSH
27492: LD_VAR 0 5
27496: PPUSH
27497: CALL_OW 325
27501: IFFALSE 27528
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
27503: LD_ADDR_VAR 0 2
27507: PUSH
27508: LD_INT 5
27510: PUSH
27511: LD_INT 8
27513: PUSH
27514: LD_INT 9
27516: PUSH
27517: EMPTY
27518: LIST
27519: LIST
27520: LIST
27521: PUSH
27522: LD_VAR 0 4
27526: ARRAY
27527: ST_TO_ADDR
// end ;
27528: LD_VAR 0 2
27532: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
27533: LD_INT 0
27535: PPUSH
27536: PPUSH
27537: PPUSH
// if not mines then
27538: LD_VAR 0 2
27542: NOT
27543: IFFALSE 27547
// exit ;
27545: GO 27691
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27547: LD_ADDR_VAR 0 5
27551: PUSH
27552: LD_INT 81
27554: PUSH
27555: LD_VAR 0 1
27559: PUSH
27560: EMPTY
27561: LIST
27562: LIST
27563: PUSH
27564: LD_INT 3
27566: PUSH
27567: LD_INT 21
27569: PUSH
27570: LD_INT 3
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: PUSH
27577: EMPTY
27578: LIST
27579: LIST
27580: PUSH
27581: EMPTY
27582: LIST
27583: LIST
27584: PPUSH
27585: CALL_OW 69
27589: ST_TO_ADDR
// for i in mines do
27590: LD_ADDR_VAR 0 4
27594: PUSH
27595: LD_VAR 0 2
27599: PUSH
27600: FOR_IN
27601: IFFALSE 27689
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27603: LD_VAR 0 4
27607: PUSH
27608: LD_INT 1
27610: ARRAY
27611: PPUSH
27612: LD_VAR 0 4
27616: PUSH
27617: LD_INT 2
27619: ARRAY
27620: PPUSH
27621: CALL_OW 458
27625: NOT
27626: IFFALSE 27630
// continue ;
27628: GO 27600
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27630: LD_VAR 0 4
27634: PUSH
27635: LD_INT 1
27637: ARRAY
27638: PPUSH
27639: LD_VAR 0 4
27643: PUSH
27644: LD_INT 2
27646: ARRAY
27647: PPUSH
27648: CALL_OW 428
27652: PUSH
27653: LD_VAR 0 5
27657: IN
27658: IFFALSE 27687
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
27660: LD_VAR 0 4
27664: PUSH
27665: LD_INT 1
27667: ARRAY
27668: PPUSH
27669: LD_VAR 0 4
27673: PUSH
27674: LD_INT 2
27676: ARRAY
27677: PPUSH
27678: LD_VAR 0 1
27682: PPUSH
27683: CALL_OW 456
// end ;
27687: GO 27600
27689: POP
27690: POP
// end ;
27691: LD_VAR 0 3
27695: RET
// export function Count ( array ) ; var i ; begin
27696: LD_INT 0
27698: PPUSH
27699: PPUSH
// result := 0 ;
27700: LD_ADDR_VAR 0 2
27704: PUSH
27705: LD_INT 0
27707: ST_TO_ADDR
// for i in array do
27708: LD_ADDR_VAR 0 3
27712: PUSH
27713: LD_VAR 0 1
27717: PUSH
27718: FOR_IN
27719: IFFALSE 27743
// if i then
27721: LD_VAR 0 3
27725: IFFALSE 27741
// result := result + 1 ;
27727: LD_ADDR_VAR 0 2
27731: PUSH
27732: LD_VAR 0 2
27736: PUSH
27737: LD_INT 1
27739: PLUS
27740: ST_TO_ADDR
27741: GO 27718
27743: POP
27744: POP
// end ;
27745: LD_VAR 0 2
27749: RET
// export function IsEmpty ( building ) ; begin
27750: LD_INT 0
27752: PPUSH
// if not building then
27753: LD_VAR 0 1
27757: NOT
27758: IFFALSE 27762
// exit ;
27760: GO 27805
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
27762: LD_ADDR_VAR 0 2
27766: PUSH
27767: LD_VAR 0 1
27771: PUSH
27772: LD_INT 22
27774: PUSH
27775: LD_VAR 0 1
27779: PPUSH
27780: CALL_OW 255
27784: PUSH
27785: EMPTY
27786: LIST
27787: LIST
27788: PUSH
27789: LD_INT 58
27791: PUSH
27792: EMPTY
27793: LIST
27794: PUSH
27795: EMPTY
27796: LIST
27797: LIST
27798: PPUSH
27799: CALL_OW 69
27803: IN
27804: ST_TO_ADDR
// end ;
27805: LD_VAR 0 2
27809: RET
// export function IsNotFull ( building ) ; begin
27810: LD_INT 0
27812: PPUSH
// if not building then
27813: LD_VAR 0 1
27817: NOT
27818: IFFALSE 27822
// exit ;
27820: GO 27841
// result := UnitsInside ( building ) < 6 ;
27822: LD_ADDR_VAR 0 2
27826: PUSH
27827: LD_VAR 0 1
27831: PPUSH
27832: CALL_OW 313
27836: PUSH
27837: LD_INT 6
27839: LESS
27840: ST_TO_ADDR
// end ;
27841: LD_VAR 0 2
27845: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
27846: LD_INT 0
27848: PPUSH
27849: PPUSH
27850: PPUSH
27851: PPUSH
// tmp := [ ] ;
27852: LD_ADDR_VAR 0 3
27856: PUSH
27857: EMPTY
27858: ST_TO_ADDR
// list := [ ] ;
27859: LD_ADDR_VAR 0 5
27863: PUSH
27864: EMPTY
27865: ST_TO_ADDR
// for i = 16 to 25 do
27866: LD_ADDR_VAR 0 4
27870: PUSH
27871: DOUBLE
27872: LD_INT 16
27874: DEC
27875: ST_TO_ADDR
27876: LD_INT 25
27878: PUSH
27879: FOR_TO
27880: IFFALSE 27953
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
27882: LD_ADDR_VAR 0 3
27886: PUSH
27887: LD_VAR 0 3
27891: PUSH
27892: LD_INT 22
27894: PUSH
27895: LD_VAR 0 1
27899: PPUSH
27900: CALL_OW 255
27904: PUSH
27905: EMPTY
27906: LIST
27907: LIST
27908: PUSH
27909: LD_INT 91
27911: PUSH
27912: LD_VAR 0 1
27916: PUSH
27917: LD_INT 6
27919: PUSH
27920: EMPTY
27921: LIST
27922: LIST
27923: LIST
27924: PUSH
27925: LD_INT 30
27927: PUSH
27928: LD_VAR 0 4
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: LIST
27941: PUSH
27942: EMPTY
27943: LIST
27944: PPUSH
27945: CALL_OW 69
27949: ADD
27950: ST_TO_ADDR
27951: GO 27879
27953: POP
27954: POP
// for i = 1 to tmp do
27955: LD_ADDR_VAR 0 4
27959: PUSH
27960: DOUBLE
27961: LD_INT 1
27963: DEC
27964: ST_TO_ADDR
27965: LD_VAR 0 3
27969: PUSH
27970: FOR_TO
27971: IFFALSE 28059
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
27973: LD_ADDR_VAR 0 5
27977: PUSH
27978: LD_VAR 0 5
27982: PUSH
27983: LD_VAR 0 3
27987: PUSH
27988: LD_VAR 0 4
27992: ARRAY
27993: PPUSH
27994: CALL_OW 266
27998: PUSH
27999: LD_VAR 0 3
28003: PUSH
28004: LD_VAR 0 4
28008: ARRAY
28009: PPUSH
28010: CALL_OW 250
28014: PUSH
28015: LD_VAR 0 3
28019: PUSH
28020: LD_VAR 0 4
28024: ARRAY
28025: PPUSH
28026: CALL_OW 251
28030: PUSH
28031: LD_VAR 0 3
28035: PUSH
28036: LD_VAR 0 4
28040: ARRAY
28041: PPUSH
28042: CALL_OW 254
28046: PUSH
28047: EMPTY
28048: LIST
28049: LIST
28050: LIST
28051: LIST
28052: PUSH
28053: EMPTY
28054: LIST
28055: ADD
28056: ST_TO_ADDR
28057: GO 27970
28059: POP
28060: POP
// result := list ;
28061: LD_ADDR_VAR 0 2
28065: PUSH
28066: LD_VAR 0 5
28070: ST_TO_ADDR
// end ;
28071: LD_VAR 0 2
28075: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
28076: LD_INT 0
28078: PPUSH
28079: PPUSH
28080: PPUSH
28081: PPUSH
28082: PPUSH
28083: PPUSH
28084: PPUSH
// if not factory then
28085: LD_VAR 0 1
28089: NOT
28090: IFFALSE 28094
// exit ;
28092: GO 28687
// if control = control_apeman then
28094: LD_VAR 0 4
28098: PUSH
28099: LD_INT 5
28101: EQUAL
28102: IFFALSE 28211
// begin tmp := UnitsInside ( factory ) ;
28104: LD_ADDR_VAR 0 8
28108: PUSH
28109: LD_VAR 0 1
28113: PPUSH
28114: CALL_OW 313
28118: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
28119: LD_VAR 0 8
28123: PPUSH
28124: LD_INT 25
28126: PUSH
28127: LD_INT 12
28129: PUSH
28130: EMPTY
28131: LIST
28132: LIST
28133: PPUSH
28134: CALL_OW 72
28138: NOT
28139: IFFALSE 28149
// control := control_manual ;
28141: LD_ADDR_VAR 0 4
28145: PUSH
28146: LD_INT 1
28148: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
28149: LD_ADDR_VAR 0 8
28153: PUSH
28154: LD_VAR 0 1
28158: PPUSH
28159: CALL 27846 0 1
28163: ST_TO_ADDR
// if tmp then
28164: LD_VAR 0 8
28168: IFFALSE 28211
// begin for i in tmp do
28170: LD_ADDR_VAR 0 7
28174: PUSH
28175: LD_VAR 0 8
28179: PUSH
28180: FOR_IN
28181: IFFALSE 28209
// if i [ 1 ] = b_ext_radio then
28183: LD_VAR 0 7
28187: PUSH
28188: LD_INT 1
28190: ARRAY
28191: PUSH
28192: LD_INT 22
28194: EQUAL
28195: IFFALSE 28207
// begin control := control_remote ;
28197: LD_ADDR_VAR 0 4
28201: PUSH
28202: LD_INT 2
28204: ST_TO_ADDR
// break ;
28205: GO 28209
// end ;
28207: GO 28180
28209: POP
28210: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28211: LD_VAR 0 1
28215: PPUSH
28216: LD_VAR 0 2
28220: PPUSH
28221: LD_VAR 0 3
28225: PPUSH
28226: LD_VAR 0 4
28230: PPUSH
28231: LD_VAR 0 5
28235: PPUSH
28236: CALL_OW 448
28240: IFFALSE 28275
// begin result := [ chassis , engine , control , weapon ] ;
28242: LD_ADDR_VAR 0 6
28246: PUSH
28247: LD_VAR 0 2
28251: PUSH
28252: LD_VAR 0 3
28256: PUSH
28257: LD_VAR 0 4
28261: PUSH
28262: LD_VAR 0 5
28266: PUSH
28267: EMPTY
28268: LIST
28269: LIST
28270: LIST
28271: LIST
28272: ST_TO_ADDR
// exit ;
28273: GO 28687
// end ; _chassis := AvailableChassisList ( factory ) ;
28275: LD_ADDR_VAR 0 9
28279: PUSH
28280: LD_VAR 0 1
28284: PPUSH
28285: CALL_OW 475
28289: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
28290: LD_ADDR_VAR 0 11
28294: PUSH
28295: LD_VAR 0 1
28299: PPUSH
28300: CALL_OW 476
28304: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
28305: LD_ADDR_VAR 0 12
28309: PUSH
28310: LD_VAR 0 1
28314: PPUSH
28315: CALL_OW 477
28319: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
28320: LD_ADDR_VAR 0 10
28324: PUSH
28325: LD_VAR 0 1
28329: PPUSH
28330: CALL_OW 478
28334: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
28335: LD_VAR 0 9
28339: NOT
28340: PUSH
28341: LD_VAR 0 11
28345: NOT
28346: OR
28347: PUSH
28348: LD_VAR 0 12
28352: NOT
28353: OR
28354: PUSH
28355: LD_VAR 0 10
28359: NOT
28360: OR
28361: IFFALSE 28396
// begin result := [ chassis , engine , control , weapon ] ;
28363: LD_ADDR_VAR 0 6
28367: PUSH
28368: LD_VAR 0 2
28372: PUSH
28373: LD_VAR 0 3
28377: PUSH
28378: LD_VAR 0 4
28382: PUSH
28383: LD_VAR 0 5
28387: PUSH
28388: EMPTY
28389: LIST
28390: LIST
28391: LIST
28392: LIST
28393: ST_TO_ADDR
// exit ;
28394: GO 28687
// end ; if not chassis in _chassis then
28396: LD_VAR 0 2
28400: PUSH
28401: LD_VAR 0 9
28405: IN
28406: NOT
28407: IFFALSE 28433
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
28409: LD_ADDR_VAR 0 2
28413: PUSH
28414: LD_VAR 0 9
28418: PUSH
28419: LD_INT 1
28421: PPUSH
28422: LD_VAR 0 9
28426: PPUSH
28427: CALL_OW 12
28431: ARRAY
28432: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
28433: LD_VAR 0 2
28437: PPUSH
28438: LD_VAR 0 3
28442: PPUSH
28443: CALL 28692 0 2
28447: NOT
28448: IFFALSE 28507
// repeat engine := _engine [ 1 ] ;
28450: LD_ADDR_VAR 0 3
28454: PUSH
28455: LD_VAR 0 11
28459: PUSH
28460: LD_INT 1
28462: ARRAY
28463: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
28464: LD_ADDR_VAR 0 11
28468: PUSH
28469: LD_VAR 0 11
28473: PPUSH
28474: LD_INT 1
28476: PPUSH
28477: CALL_OW 3
28481: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
28482: LD_VAR 0 2
28486: PPUSH
28487: LD_VAR 0 3
28491: PPUSH
28492: CALL 28692 0 2
28496: PUSH
28497: LD_VAR 0 11
28501: PUSH
28502: EMPTY
28503: EQUAL
28504: OR
28505: IFFALSE 28450
// if not control in _control then
28507: LD_VAR 0 4
28511: PUSH
28512: LD_VAR 0 12
28516: IN
28517: NOT
28518: IFFALSE 28544
// control := _control [ rand ( 1 , _control ) ] ;
28520: LD_ADDR_VAR 0 4
28524: PUSH
28525: LD_VAR 0 12
28529: PUSH
28530: LD_INT 1
28532: PPUSH
28533: LD_VAR 0 12
28537: PPUSH
28538: CALL_OW 12
28542: ARRAY
28543: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
28544: LD_VAR 0 2
28548: PPUSH
28549: LD_VAR 0 5
28553: PPUSH
28554: CALL 28912 0 2
28558: NOT
28559: IFFALSE 28618
// repeat weapon := _weapon [ 1 ] ;
28561: LD_ADDR_VAR 0 5
28565: PUSH
28566: LD_VAR 0 10
28570: PUSH
28571: LD_INT 1
28573: ARRAY
28574: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
28575: LD_ADDR_VAR 0 10
28579: PUSH
28580: LD_VAR 0 10
28584: PPUSH
28585: LD_INT 1
28587: PPUSH
28588: CALL_OW 3
28592: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
28593: LD_VAR 0 2
28597: PPUSH
28598: LD_VAR 0 5
28602: PPUSH
28603: CALL 28912 0 2
28607: PUSH
28608: LD_VAR 0 10
28612: PUSH
28613: EMPTY
28614: EQUAL
28615: OR
28616: IFFALSE 28561
// result := [ ] ;
28618: LD_ADDR_VAR 0 6
28622: PUSH
28623: EMPTY
28624: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28625: LD_VAR 0 1
28629: PPUSH
28630: LD_VAR 0 2
28634: PPUSH
28635: LD_VAR 0 3
28639: PPUSH
28640: LD_VAR 0 4
28644: PPUSH
28645: LD_VAR 0 5
28649: PPUSH
28650: CALL_OW 448
28654: IFFALSE 28687
// result := [ chassis , engine , control , weapon ] ;
28656: LD_ADDR_VAR 0 6
28660: PUSH
28661: LD_VAR 0 2
28665: PUSH
28666: LD_VAR 0 3
28670: PUSH
28671: LD_VAR 0 4
28675: PUSH
28676: LD_VAR 0 5
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: LIST
28685: LIST
28686: ST_TO_ADDR
// end ;
28687: LD_VAR 0 6
28691: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
28692: LD_INT 0
28694: PPUSH
// if not chassis or not engine then
28695: LD_VAR 0 1
28699: NOT
28700: PUSH
28701: LD_VAR 0 2
28705: NOT
28706: OR
28707: IFFALSE 28711
// exit ;
28709: GO 28907
// case engine of engine_solar :
28711: LD_VAR 0 2
28715: PUSH
28716: LD_INT 2
28718: DOUBLE
28719: EQUAL
28720: IFTRUE 28724
28722: GO 28762
28724: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
28725: LD_ADDR_VAR 0 3
28729: PUSH
28730: LD_INT 11
28732: PUSH
28733: LD_INT 12
28735: PUSH
28736: LD_INT 13
28738: PUSH
28739: LD_INT 14
28741: PUSH
28742: LD_INT 1
28744: PUSH
28745: LD_INT 2
28747: PUSH
28748: LD_INT 3
28750: PUSH
28751: EMPTY
28752: LIST
28753: LIST
28754: LIST
28755: LIST
28756: LIST
28757: LIST
28758: LIST
28759: ST_TO_ADDR
28760: GO 28891
28762: LD_INT 1
28764: DOUBLE
28765: EQUAL
28766: IFTRUE 28770
28768: GO 28832
28770: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
28771: LD_ADDR_VAR 0 3
28775: PUSH
28776: LD_INT 11
28778: PUSH
28779: LD_INT 12
28781: PUSH
28782: LD_INT 13
28784: PUSH
28785: LD_INT 14
28787: PUSH
28788: LD_INT 1
28790: PUSH
28791: LD_INT 2
28793: PUSH
28794: LD_INT 3
28796: PUSH
28797: LD_INT 4
28799: PUSH
28800: LD_INT 5
28802: PUSH
28803: LD_INT 21
28805: PUSH
28806: LD_INT 23
28808: PUSH
28809: LD_INT 22
28811: PUSH
28812: LD_INT 24
28814: PUSH
28815: EMPTY
28816: LIST
28817: LIST
28818: LIST
28819: LIST
28820: LIST
28821: LIST
28822: LIST
28823: LIST
28824: LIST
28825: LIST
28826: LIST
28827: LIST
28828: LIST
28829: ST_TO_ADDR
28830: GO 28891
28832: LD_INT 3
28834: DOUBLE
28835: EQUAL
28836: IFTRUE 28840
28838: GO 28890
28840: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28841: LD_ADDR_VAR 0 3
28845: PUSH
28846: LD_INT 13
28848: PUSH
28849: LD_INT 14
28851: PUSH
28852: LD_INT 2
28854: PUSH
28855: LD_INT 3
28857: PUSH
28858: LD_INT 4
28860: PUSH
28861: LD_INT 5
28863: PUSH
28864: LD_INT 21
28866: PUSH
28867: LD_INT 22
28869: PUSH
28870: LD_INT 23
28872: PUSH
28873: LD_INT 24
28875: PUSH
28876: EMPTY
28877: LIST
28878: LIST
28879: LIST
28880: LIST
28881: LIST
28882: LIST
28883: LIST
28884: LIST
28885: LIST
28886: LIST
28887: ST_TO_ADDR
28888: GO 28891
28890: POP
// result := ( chassis in result ) ;
28891: LD_ADDR_VAR 0 3
28895: PUSH
28896: LD_VAR 0 1
28900: PUSH
28901: LD_VAR 0 3
28905: IN
28906: ST_TO_ADDR
// end ;
28907: LD_VAR 0 3
28911: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
28912: LD_INT 0
28914: PPUSH
// if not chassis or not weapon then
28915: LD_VAR 0 1
28919: NOT
28920: PUSH
28921: LD_VAR 0 2
28925: NOT
28926: OR
28927: IFFALSE 28931
// exit ;
28929: GO 29993
// case weapon of us_machine_gun :
28931: LD_VAR 0 2
28935: PUSH
28936: LD_INT 2
28938: DOUBLE
28939: EQUAL
28940: IFTRUE 28944
28942: GO 28974
28944: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
28945: LD_ADDR_VAR 0 3
28949: PUSH
28950: LD_INT 1
28952: PUSH
28953: LD_INT 2
28955: PUSH
28956: LD_INT 3
28958: PUSH
28959: LD_INT 4
28961: PUSH
28962: LD_INT 5
28964: PUSH
28965: EMPTY
28966: LIST
28967: LIST
28968: LIST
28969: LIST
28970: LIST
28971: ST_TO_ADDR
28972: GO 29977
28974: LD_INT 3
28976: DOUBLE
28977: EQUAL
28978: IFTRUE 28982
28980: GO 29012
28982: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
28983: LD_ADDR_VAR 0 3
28987: PUSH
28988: LD_INT 1
28990: PUSH
28991: LD_INT 2
28993: PUSH
28994: LD_INT 3
28996: PUSH
28997: LD_INT 4
28999: PUSH
29000: LD_INT 5
29002: PUSH
29003: EMPTY
29004: LIST
29005: LIST
29006: LIST
29007: LIST
29008: LIST
29009: ST_TO_ADDR
29010: GO 29977
29012: LD_INT 11
29014: DOUBLE
29015: EQUAL
29016: IFTRUE 29020
29018: GO 29050
29020: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
29021: LD_ADDR_VAR 0 3
29025: PUSH
29026: LD_INT 1
29028: PUSH
29029: LD_INT 2
29031: PUSH
29032: LD_INT 3
29034: PUSH
29035: LD_INT 4
29037: PUSH
29038: LD_INT 5
29040: PUSH
29041: EMPTY
29042: LIST
29043: LIST
29044: LIST
29045: LIST
29046: LIST
29047: ST_TO_ADDR
29048: GO 29977
29050: LD_INT 4
29052: DOUBLE
29053: EQUAL
29054: IFTRUE 29058
29056: GO 29084
29058: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
29059: LD_ADDR_VAR 0 3
29063: PUSH
29064: LD_INT 2
29066: PUSH
29067: LD_INT 3
29069: PUSH
29070: LD_INT 4
29072: PUSH
29073: LD_INT 5
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: LIST
29080: LIST
29081: ST_TO_ADDR
29082: GO 29977
29084: LD_INT 5
29086: DOUBLE
29087: EQUAL
29088: IFTRUE 29092
29090: GO 29118
29092: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
29093: LD_ADDR_VAR 0 3
29097: PUSH
29098: LD_INT 2
29100: PUSH
29101: LD_INT 3
29103: PUSH
29104: LD_INT 4
29106: PUSH
29107: LD_INT 5
29109: PUSH
29110: EMPTY
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: ST_TO_ADDR
29116: GO 29977
29118: LD_INT 9
29120: DOUBLE
29121: EQUAL
29122: IFTRUE 29126
29124: GO 29152
29126: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
29127: LD_ADDR_VAR 0 3
29131: PUSH
29132: LD_INT 2
29134: PUSH
29135: LD_INT 3
29137: PUSH
29138: LD_INT 4
29140: PUSH
29141: LD_INT 5
29143: PUSH
29144: EMPTY
29145: LIST
29146: LIST
29147: LIST
29148: LIST
29149: ST_TO_ADDR
29150: GO 29977
29152: LD_INT 7
29154: DOUBLE
29155: EQUAL
29156: IFTRUE 29160
29158: GO 29186
29160: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
29161: LD_ADDR_VAR 0 3
29165: PUSH
29166: LD_INT 2
29168: PUSH
29169: LD_INT 3
29171: PUSH
29172: LD_INT 4
29174: PUSH
29175: LD_INT 5
29177: PUSH
29178: EMPTY
29179: LIST
29180: LIST
29181: LIST
29182: LIST
29183: ST_TO_ADDR
29184: GO 29977
29186: LD_INT 12
29188: DOUBLE
29189: EQUAL
29190: IFTRUE 29194
29192: GO 29220
29194: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
29195: LD_ADDR_VAR 0 3
29199: PUSH
29200: LD_INT 2
29202: PUSH
29203: LD_INT 3
29205: PUSH
29206: LD_INT 4
29208: PUSH
29209: LD_INT 5
29211: PUSH
29212: EMPTY
29213: LIST
29214: LIST
29215: LIST
29216: LIST
29217: ST_TO_ADDR
29218: GO 29977
29220: LD_INT 13
29222: DOUBLE
29223: EQUAL
29224: IFTRUE 29228
29226: GO 29254
29228: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
29229: LD_ADDR_VAR 0 3
29233: PUSH
29234: LD_INT 2
29236: PUSH
29237: LD_INT 3
29239: PUSH
29240: LD_INT 4
29242: PUSH
29243: LD_INT 5
29245: PUSH
29246: EMPTY
29247: LIST
29248: LIST
29249: LIST
29250: LIST
29251: ST_TO_ADDR
29252: GO 29977
29254: LD_INT 14
29256: DOUBLE
29257: EQUAL
29258: IFTRUE 29262
29260: GO 29280
29262: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
29263: LD_ADDR_VAR 0 3
29267: PUSH
29268: LD_INT 4
29270: PUSH
29271: LD_INT 5
29273: PUSH
29274: EMPTY
29275: LIST
29276: LIST
29277: ST_TO_ADDR
29278: GO 29977
29280: LD_INT 6
29282: DOUBLE
29283: EQUAL
29284: IFTRUE 29288
29286: GO 29306
29288: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
29289: LD_ADDR_VAR 0 3
29293: PUSH
29294: LD_INT 4
29296: PUSH
29297: LD_INT 5
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: ST_TO_ADDR
29304: GO 29977
29306: LD_INT 10
29308: DOUBLE
29309: EQUAL
29310: IFTRUE 29314
29312: GO 29332
29314: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
29315: LD_ADDR_VAR 0 3
29319: PUSH
29320: LD_INT 4
29322: PUSH
29323: LD_INT 5
29325: PUSH
29326: EMPTY
29327: LIST
29328: LIST
29329: ST_TO_ADDR
29330: GO 29977
29332: LD_INT 22
29334: DOUBLE
29335: EQUAL
29336: IFTRUE 29340
29338: GO 29366
29340: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
29341: LD_ADDR_VAR 0 3
29345: PUSH
29346: LD_INT 11
29348: PUSH
29349: LD_INT 12
29351: PUSH
29352: LD_INT 13
29354: PUSH
29355: LD_INT 14
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: LIST
29362: LIST
29363: ST_TO_ADDR
29364: GO 29977
29366: LD_INT 23
29368: DOUBLE
29369: EQUAL
29370: IFTRUE 29374
29372: GO 29400
29374: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
29375: LD_ADDR_VAR 0 3
29379: PUSH
29380: LD_INT 11
29382: PUSH
29383: LD_INT 12
29385: PUSH
29386: LD_INT 13
29388: PUSH
29389: LD_INT 14
29391: PUSH
29392: EMPTY
29393: LIST
29394: LIST
29395: LIST
29396: LIST
29397: ST_TO_ADDR
29398: GO 29977
29400: LD_INT 24
29402: DOUBLE
29403: EQUAL
29404: IFTRUE 29408
29406: GO 29434
29408: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
29409: LD_ADDR_VAR 0 3
29413: PUSH
29414: LD_INT 11
29416: PUSH
29417: LD_INT 12
29419: PUSH
29420: LD_INT 13
29422: PUSH
29423: LD_INT 14
29425: PUSH
29426: EMPTY
29427: LIST
29428: LIST
29429: LIST
29430: LIST
29431: ST_TO_ADDR
29432: GO 29977
29434: LD_INT 30
29436: DOUBLE
29437: EQUAL
29438: IFTRUE 29442
29440: GO 29468
29442: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
29443: LD_ADDR_VAR 0 3
29447: PUSH
29448: LD_INT 11
29450: PUSH
29451: LD_INT 12
29453: PUSH
29454: LD_INT 13
29456: PUSH
29457: LD_INT 14
29459: PUSH
29460: EMPTY
29461: LIST
29462: LIST
29463: LIST
29464: LIST
29465: ST_TO_ADDR
29466: GO 29977
29468: LD_INT 25
29470: DOUBLE
29471: EQUAL
29472: IFTRUE 29476
29474: GO 29494
29476: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
29477: LD_ADDR_VAR 0 3
29481: PUSH
29482: LD_INT 13
29484: PUSH
29485: LD_INT 14
29487: PUSH
29488: EMPTY
29489: LIST
29490: LIST
29491: ST_TO_ADDR
29492: GO 29977
29494: LD_INT 27
29496: DOUBLE
29497: EQUAL
29498: IFTRUE 29502
29500: GO 29520
29502: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
29503: LD_ADDR_VAR 0 3
29507: PUSH
29508: LD_INT 13
29510: PUSH
29511: LD_INT 14
29513: PUSH
29514: EMPTY
29515: LIST
29516: LIST
29517: ST_TO_ADDR
29518: GO 29977
29520: LD_EXP 101
29524: DOUBLE
29525: EQUAL
29526: IFTRUE 29530
29528: GO 29556
29530: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
29531: LD_ADDR_VAR 0 3
29535: PUSH
29536: LD_INT 11
29538: PUSH
29539: LD_INT 12
29541: PUSH
29542: LD_INT 13
29544: PUSH
29545: LD_INT 14
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: LIST
29552: LIST
29553: ST_TO_ADDR
29554: GO 29977
29556: LD_INT 28
29558: DOUBLE
29559: EQUAL
29560: IFTRUE 29564
29562: GO 29582
29564: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
29565: LD_ADDR_VAR 0 3
29569: PUSH
29570: LD_INT 13
29572: PUSH
29573: LD_INT 14
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: ST_TO_ADDR
29580: GO 29977
29582: LD_INT 29
29584: DOUBLE
29585: EQUAL
29586: IFTRUE 29590
29588: GO 29608
29590: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
29591: LD_ADDR_VAR 0 3
29595: PUSH
29596: LD_INT 13
29598: PUSH
29599: LD_INT 14
29601: PUSH
29602: EMPTY
29603: LIST
29604: LIST
29605: ST_TO_ADDR
29606: GO 29977
29608: LD_INT 31
29610: DOUBLE
29611: EQUAL
29612: IFTRUE 29616
29614: GO 29634
29616: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
29617: LD_ADDR_VAR 0 3
29621: PUSH
29622: LD_INT 13
29624: PUSH
29625: LD_INT 14
29627: PUSH
29628: EMPTY
29629: LIST
29630: LIST
29631: ST_TO_ADDR
29632: GO 29977
29634: LD_INT 26
29636: DOUBLE
29637: EQUAL
29638: IFTRUE 29642
29640: GO 29660
29642: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29643: LD_ADDR_VAR 0 3
29647: PUSH
29648: LD_INT 13
29650: PUSH
29651: LD_INT 14
29653: PUSH
29654: EMPTY
29655: LIST
29656: LIST
29657: ST_TO_ADDR
29658: GO 29977
29660: LD_INT 42
29662: DOUBLE
29663: EQUAL
29664: IFTRUE 29668
29666: GO 29694
29668: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
29669: LD_ADDR_VAR 0 3
29673: PUSH
29674: LD_INT 21
29676: PUSH
29677: LD_INT 22
29679: PUSH
29680: LD_INT 23
29682: PUSH
29683: LD_INT 24
29685: PUSH
29686: EMPTY
29687: LIST
29688: LIST
29689: LIST
29690: LIST
29691: ST_TO_ADDR
29692: GO 29977
29694: LD_INT 43
29696: DOUBLE
29697: EQUAL
29698: IFTRUE 29702
29700: GO 29728
29702: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
29703: LD_ADDR_VAR 0 3
29707: PUSH
29708: LD_INT 21
29710: PUSH
29711: LD_INT 22
29713: PUSH
29714: LD_INT 23
29716: PUSH
29717: LD_INT 24
29719: PUSH
29720: EMPTY
29721: LIST
29722: LIST
29723: LIST
29724: LIST
29725: ST_TO_ADDR
29726: GO 29977
29728: LD_INT 44
29730: DOUBLE
29731: EQUAL
29732: IFTRUE 29736
29734: GO 29762
29736: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
29737: LD_ADDR_VAR 0 3
29741: PUSH
29742: LD_INT 21
29744: PUSH
29745: LD_INT 22
29747: PUSH
29748: LD_INT 23
29750: PUSH
29751: LD_INT 24
29753: PUSH
29754: EMPTY
29755: LIST
29756: LIST
29757: LIST
29758: LIST
29759: ST_TO_ADDR
29760: GO 29977
29762: LD_INT 45
29764: DOUBLE
29765: EQUAL
29766: IFTRUE 29770
29768: GO 29796
29770: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
29771: LD_ADDR_VAR 0 3
29775: PUSH
29776: LD_INT 21
29778: PUSH
29779: LD_INT 22
29781: PUSH
29782: LD_INT 23
29784: PUSH
29785: LD_INT 24
29787: PUSH
29788: EMPTY
29789: LIST
29790: LIST
29791: LIST
29792: LIST
29793: ST_TO_ADDR
29794: GO 29977
29796: LD_INT 49
29798: DOUBLE
29799: EQUAL
29800: IFTRUE 29804
29802: GO 29830
29804: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
29805: LD_ADDR_VAR 0 3
29809: PUSH
29810: LD_INT 21
29812: PUSH
29813: LD_INT 22
29815: PUSH
29816: LD_INT 23
29818: PUSH
29819: LD_INT 24
29821: PUSH
29822: EMPTY
29823: LIST
29824: LIST
29825: LIST
29826: LIST
29827: ST_TO_ADDR
29828: GO 29977
29830: LD_INT 51
29832: DOUBLE
29833: EQUAL
29834: IFTRUE 29838
29836: GO 29864
29838: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
29839: LD_ADDR_VAR 0 3
29843: PUSH
29844: LD_INT 21
29846: PUSH
29847: LD_INT 22
29849: PUSH
29850: LD_INT 23
29852: PUSH
29853: LD_INT 24
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: LIST
29860: LIST
29861: ST_TO_ADDR
29862: GO 29977
29864: LD_INT 52
29866: DOUBLE
29867: EQUAL
29868: IFTRUE 29872
29870: GO 29898
29872: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
29873: LD_ADDR_VAR 0 3
29877: PUSH
29878: LD_INT 21
29880: PUSH
29881: LD_INT 22
29883: PUSH
29884: LD_INT 23
29886: PUSH
29887: LD_INT 24
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: LIST
29894: LIST
29895: ST_TO_ADDR
29896: GO 29977
29898: LD_INT 53
29900: DOUBLE
29901: EQUAL
29902: IFTRUE 29906
29904: GO 29924
29906: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
29907: LD_ADDR_VAR 0 3
29911: PUSH
29912: LD_INT 23
29914: PUSH
29915: LD_INT 24
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: ST_TO_ADDR
29922: GO 29977
29924: LD_INT 46
29926: DOUBLE
29927: EQUAL
29928: IFTRUE 29932
29930: GO 29950
29932: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
29933: LD_ADDR_VAR 0 3
29937: PUSH
29938: LD_INT 23
29940: PUSH
29941: LD_INT 24
29943: PUSH
29944: EMPTY
29945: LIST
29946: LIST
29947: ST_TO_ADDR
29948: GO 29977
29950: LD_INT 47
29952: DOUBLE
29953: EQUAL
29954: IFTRUE 29958
29956: GO 29976
29958: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29959: LD_ADDR_VAR 0 3
29963: PUSH
29964: LD_INT 23
29966: PUSH
29967: LD_INT 24
29969: PUSH
29970: EMPTY
29971: LIST
29972: LIST
29973: ST_TO_ADDR
29974: GO 29977
29976: POP
// result := ( chassis in result ) ;
29977: LD_ADDR_VAR 0 3
29981: PUSH
29982: LD_VAR 0 1
29986: PUSH
29987: LD_VAR 0 3
29991: IN
29992: ST_TO_ADDR
// end ;
29993: LD_VAR 0 3
29997: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
29998: LD_INT 0
30000: PPUSH
30001: PPUSH
30002: PPUSH
30003: PPUSH
30004: PPUSH
30005: PPUSH
30006: PPUSH
// result := array ;
30007: LD_ADDR_VAR 0 5
30011: PUSH
30012: LD_VAR 0 1
30016: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
30017: LD_VAR 0 1
30021: NOT
30022: PUSH
30023: LD_VAR 0 2
30027: NOT
30028: OR
30029: PUSH
30030: LD_VAR 0 3
30034: NOT
30035: OR
30036: PUSH
30037: LD_VAR 0 2
30041: PUSH
30042: LD_VAR 0 1
30046: GREATER
30047: OR
30048: PUSH
30049: LD_VAR 0 3
30053: PUSH
30054: LD_VAR 0 1
30058: GREATER
30059: OR
30060: IFFALSE 30064
// exit ;
30062: GO 30360
// if direction then
30064: LD_VAR 0 4
30068: IFFALSE 30132
// begin d := 1 ;
30070: LD_ADDR_VAR 0 9
30074: PUSH
30075: LD_INT 1
30077: ST_TO_ADDR
// if i_from > i_to then
30078: LD_VAR 0 2
30082: PUSH
30083: LD_VAR 0 3
30087: GREATER
30088: IFFALSE 30114
// length := ( array - i_from ) + i_to else
30090: LD_ADDR_VAR 0 11
30094: PUSH
30095: LD_VAR 0 1
30099: PUSH
30100: LD_VAR 0 2
30104: MINUS
30105: PUSH
30106: LD_VAR 0 3
30110: PLUS
30111: ST_TO_ADDR
30112: GO 30130
// length := i_to - i_from ;
30114: LD_ADDR_VAR 0 11
30118: PUSH
30119: LD_VAR 0 3
30123: PUSH
30124: LD_VAR 0 2
30128: MINUS
30129: ST_TO_ADDR
// end else
30130: GO 30193
// begin d := - 1 ;
30132: LD_ADDR_VAR 0 9
30136: PUSH
30137: LD_INT 1
30139: NEG
30140: ST_TO_ADDR
// if i_from > i_to then
30141: LD_VAR 0 2
30145: PUSH
30146: LD_VAR 0 3
30150: GREATER
30151: IFFALSE 30171
// length := i_from - i_to else
30153: LD_ADDR_VAR 0 11
30157: PUSH
30158: LD_VAR 0 2
30162: PUSH
30163: LD_VAR 0 3
30167: MINUS
30168: ST_TO_ADDR
30169: GO 30193
// length := ( array - i_to ) + i_from ;
30171: LD_ADDR_VAR 0 11
30175: PUSH
30176: LD_VAR 0 1
30180: PUSH
30181: LD_VAR 0 3
30185: MINUS
30186: PUSH
30187: LD_VAR 0 2
30191: PLUS
30192: ST_TO_ADDR
// end ; if not length then
30193: LD_VAR 0 11
30197: NOT
30198: IFFALSE 30202
// exit ;
30200: GO 30360
// tmp := array ;
30202: LD_ADDR_VAR 0 10
30206: PUSH
30207: LD_VAR 0 1
30211: ST_TO_ADDR
// for i = 1 to length do
30212: LD_ADDR_VAR 0 6
30216: PUSH
30217: DOUBLE
30218: LD_INT 1
30220: DEC
30221: ST_TO_ADDR
30222: LD_VAR 0 11
30226: PUSH
30227: FOR_TO
30228: IFFALSE 30348
// begin for j = 1 to array do
30230: LD_ADDR_VAR 0 7
30234: PUSH
30235: DOUBLE
30236: LD_INT 1
30238: DEC
30239: ST_TO_ADDR
30240: LD_VAR 0 1
30244: PUSH
30245: FOR_TO
30246: IFFALSE 30334
// begin k := j + d ;
30248: LD_ADDR_VAR 0 8
30252: PUSH
30253: LD_VAR 0 7
30257: PUSH
30258: LD_VAR 0 9
30262: PLUS
30263: ST_TO_ADDR
// if k > array then
30264: LD_VAR 0 8
30268: PUSH
30269: LD_VAR 0 1
30273: GREATER
30274: IFFALSE 30284
// k := 1 ;
30276: LD_ADDR_VAR 0 8
30280: PUSH
30281: LD_INT 1
30283: ST_TO_ADDR
// if not k then
30284: LD_VAR 0 8
30288: NOT
30289: IFFALSE 30301
// k := array ;
30291: LD_ADDR_VAR 0 8
30295: PUSH
30296: LD_VAR 0 1
30300: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
30301: LD_ADDR_VAR 0 10
30305: PUSH
30306: LD_VAR 0 10
30310: PPUSH
30311: LD_VAR 0 8
30315: PPUSH
30316: LD_VAR 0 1
30320: PUSH
30321: LD_VAR 0 7
30325: ARRAY
30326: PPUSH
30327: CALL_OW 1
30331: ST_TO_ADDR
// end ;
30332: GO 30245
30334: POP
30335: POP
// array := tmp ;
30336: LD_ADDR_VAR 0 1
30340: PUSH
30341: LD_VAR 0 10
30345: ST_TO_ADDR
// end ;
30346: GO 30227
30348: POP
30349: POP
// result := array ;
30350: LD_ADDR_VAR 0 5
30354: PUSH
30355: LD_VAR 0 1
30359: ST_TO_ADDR
// end ;
30360: LD_VAR 0 5
30364: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
30365: LD_INT 0
30367: PPUSH
30368: PPUSH
// result := 0 ;
30369: LD_ADDR_VAR 0 3
30373: PUSH
30374: LD_INT 0
30376: ST_TO_ADDR
// if not array or not value in array then
30377: LD_VAR 0 1
30381: NOT
30382: PUSH
30383: LD_VAR 0 2
30387: PUSH
30388: LD_VAR 0 1
30392: IN
30393: NOT
30394: OR
30395: IFFALSE 30399
// exit ;
30397: GO 30453
// for i = 1 to array do
30399: LD_ADDR_VAR 0 4
30403: PUSH
30404: DOUBLE
30405: LD_INT 1
30407: DEC
30408: ST_TO_ADDR
30409: LD_VAR 0 1
30413: PUSH
30414: FOR_TO
30415: IFFALSE 30451
// if value = array [ i ] then
30417: LD_VAR 0 2
30421: PUSH
30422: LD_VAR 0 1
30426: PUSH
30427: LD_VAR 0 4
30431: ARRAY
30432: EQUAL
30433: IFFALSE 30449
// begin result := i ;
30435: LD_ADDR_VAR 0 3
30439: PUSH
30440: LD_VAR 0 4
30444: ST_TO_ADDR
// exit ;
30445: POP
30446: POP
30447: GO 30453
// end ;
30449: GO 30414
30451: POP
30452: POP
// end ;
30453: LD_VAR 0 3
30457: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
30458: LD_INT 0
30460: PPUSH
// vc_chassis := chassis ;
30461: LD_ADDR_OWVAR 37
30465: PUSH
30466: LD_VAR 0 1
30470: ST_TO_ADDR
// vc_engine := engine ;
30471: LD_ADDR_OWVAR 39
30475: PUSH
30476: LD_VAR 0 2
30480: ST_TO_ADDR
// vc_control := control ;
30481: LD_ADDR_OWVAR 38
30485: PUSH
30486: LD_VAR 0 3
30490: ST_TO_ADDR
// vc_weapon := weapon ;
30491: LD_ADDR_OWVAR 40
30495: PUSH
30496: LD_VAR 0 4
30500: ST_TO_ADDR
// vc_fuel_battery := fuel ;
30501: LD_ADDR_OWVAR 41
30505: PUSH
30506: LD_VAR 0 5
30510: ST_TO_ADDR
// end ;
30511: LD_VAR 0 6
30515: RET
// export function WantPlant ( unit ) ; var task ; begin
30516: LD_INT 0
30518: PPUSH
30519: PPUSH
// result := false ;
30520: LD_ADDR_VAR 0 2
30524: PUSH
30525: LD_INT 0
30527: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
30528: LD_ADDR_VAR 0 3
30532: PUSH
30533: LD_VAR 0 1
30537: PPUSH
30538: CALL_OW 437
30542: ST_TO_ADDR
// if task then
30543: LD_VAR 0 3
30547: IFFALSE 30575
// if task [ 1 ] [ 1 ] = p then
30549: LD_VAR 0 3
30553: PUSH
30554: LD_INT 1
30556: ARRAY
30557: PUSH
30558: LD_INT 1
30560: ARRAY
30561: PUSH
30562: LD_STRING p
30564: EQUAL
30565: IFFALSE 30575
// result := true ;
30567: LD_ADDR_VAR 0 2
30571: PUSH
30572: LD_INT 1
30574: ST_TO_ADDR
// end ;
30575: LD_VAR 0 2
30579: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
30580: LD_INT 0
30582: PPUSH
30583: PPUSH
30584: PPUSH
30585: PPUSH
// if pos < 1 then
30586: LD_VAR 0 2
30590: PUSH
30591: LD_INT 1
30593: LESS
30594: IFFALSE 30598
// exit ;
30596: GO 30901
// if pos = 1 then
30598: LD_VAR 0 2
30602: PUSH
30603: LD_INT 1
30605: EQUAL
30606: IFFALSE 30639
// result := Replace ( arr , pos [ 1 ] , value ) else
30608: LD_ADDR_VAR 0 4
30612: PUSH
30613: LD_VAR 0 1
30617: PPUSH
30618: LD_VAR 0 2
30622: PUSH
30623: LD_INT 1
30625: ARRAY
30626: PPUSH
30627: LD_VAR 0 3
30631: PPUSH
30632: CALL_OW 1
30636: ST_TO_ADDR
30637: GO 30901
// begin tmp := arr ;
30639: LD_ADDR_VAR 0 6
30643: PUSH
30644: LD_VAR 0 1
30648: ST_TO_ADDR
// s_arr := [ tmp ] ;
30649: LD_ADDR_VAR 0 7
30653: PUSH
30654: LD_VAR 0 6
30658: PUSH
30659: EMPTY
30660: LIST
30661: ST_TO_ADDR
// for i = 1 to pos - 1 do
30662: LD_ADDR_VAR 0 5
30666: PUSH
30667: DOUBLE
30668: LD_INT 1
30670: DEC
30671: ST_TO_ADDR
30672: LD_VAR 0 2
30676: PUSH
30677: LD_INT 1
30679: MINUS
30680: PUSH
30681: FOR_TO
30682: IFFALSE 30727
// begin tmp := tmp [ pos [ i ] ] ;
30684: LD_ADDR_VAR 0 6
30688: PUSH
30689: LD_VAR 0 6
30693: PUSH
30694: LD_VAR 0 2
30698: PUSH
30699: LD_VAR 0 5
30703: ARRAY
30704: ARRAY
30705: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
30706: LD_ADDR_VAR 0 7
30710: PUSH
30711: LD_VAR 0 7
30715: PUSH
30716: LD_VAR 0 6
30720: PUSH
30721: EMPTY
30722: LIST
30723: ADD
30724: ST_TO_ADDR
// end ;
30725: GO 30681
30727: POP
30728: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
30729: LD_ADDR_VAR 0 6
30733: PUSH
30734: LD_VAR 0 6
30738: PPUSH
30739: LD_VAR 0 2
30743: PUSH
30744: LD_VAR 0 2
30748: ARRAY
30749: PPUSH
30750: LD_VAR 0 3
30754: PPUSH
30755: CALL_OW 1
30759: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
30760: LD_ADDR_VAR 0 7
30764: PUSH
30765: LD_VAR 0 7
30769: PPUSH
30770: LD_VAR 0 7
30774: PPUSH
30775: LD_VAR 0 6
30779: PPUSH
30780: CALL_OW 1
30784: ST_TO_ADDR
// for i = s_arr downto 2 do
30785: LD_ADDR_VAR 0 5
30789: PUSH
30790: DOUBLE
30791: LD_VAR 0 7
30795: INC
30796: ST_TO_ADDR
30797: LD_INT 2
30799: PUSH
30800: FOR_DOWNTO
30801: IFFALSE 30885
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
30803: LD_ADDR_VAR 0 6
30807: PUSH
30808: LD_VAR 0 7
30812: PUSH
30813: LD_VAR 0 5
30817: PUSH
30818: LD_INT 1
30820: MINUS
30821: ARRAY
30822: PPUSH
30823: LD_VAR 0 2
30827: PUSH
30828: LD_VAR 0 5
30832: PUSH
30833: LD_INT 1
30835: MINUS
30836: ARRAY
30837: PPUSH
30838: LD_VAR 0 7
30842: PUSH
30843: LD_VAR 0 5
30847: ARRAY
30848: PPUSH
30849: CALL_OW 1
30853: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
30854: LD_ADDR_VAR 0 7
30858: PUSH
30859: LD_VAR 0 7
30863: PPUSH
30864: LD_VAR 0 5
30868: PUSH
30869: LD_INT 1
30871: MINUS
30872: PPUSH
30873: LD_VAR 0 6
30877: PPUSH
30878: CALL_OW 1
30882: ST_TO_ADDR
// end ;
30883: GO 30800
30885: POP
30886: POP
// result := s_arr [ 1 ] ;
30887: LD_ADDR_VAR 0 4
30891: PUSH
30892: LD_VAR 0 7
30896: PUSH
30897: LD_INT 1
30899: ARRAY
30900: ST_TO_ADDR
// end ; end ;
30901: LD_VAR 0 4
30905: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
30906: LD_INT 0
30908: PPUSH
30909: PPUSH
// if not list then
30910: LD_VAR 0 1
30914: NOT
30915: IFFALSE 30919
// exit ;
30917: GO 31010
// i := list [ pos1 ] ;
30919: LD_ADDR_VAR 0 5
30923: PUSH
30924: LD_VAR 0 1
30928: PUSH
30929: LD_VAR 0 2
30933: ARRAY
30934: ST_TO_ADDR
// if not i then
30935: LD_VAR 0 5
30939: NOT
30940: IFFALSE 30944
// exit ;
30942: GO 31010
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
30944: LD_ADDR_VAR 0 1
30948: PUSH
30949: LD_VAR 0 1
30953: PPUSH
30954: LD_VAR 0 2
30958: PPUSH
30959: LD_VAR 0 1
30963: PUSH
30964: LD_VAR 0 3
30968: ARRAY
30969: PPUSH
30970: CALL_OW 1
30974: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
30975: LD_ADDR_VAR 0 1
30979: PUSH
30980: LD_VAR 0 1
30984: PPUSH
30985: LD_VAR 0 3
30989: PPUSH
30990: LD_VAR 0 5
30994: PPUSH
30995: CALL_OW 1
30999: ST_TO_ADDR
// result := list ;
31000: LD_ADDR_VAR 0 4
31004: PUSH
31005: LD_VAR 0 1
31009: ST_TO_ADDR
// end ;
31010: LD_VAR 0 4
31014: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
31015: LD_INT 0
31017: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
31018: LD_ADDR_VAR 0 5
31022: PUSH
31023: LD_VAR 0 1
31027: PPUSH
31028: CALL_OW 250
31032: PPUSH
31033: LD_VAR 0 1
31037: PPUSH
31038: CALL_OW 251
31042: PPUSH
31043: LD_VAR 0 2
31047: PPUSH
31048: LD_VAR 0 3
31052: PPUSH
31053: LD_VAR 0 4
31057: PPUSH
31058: CALL 31068 0 5
31062: ST_TO_ADDR
// end ;
31063: LD_VAR 0 5
31067: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
31068: LD_INT 0
31070: PPUSH
31071: PPUSH
31072: PPUSH
31073: PPUSH
// if not list then
31074: LD_VAR 0 3
31078: NOT
31079: IFFALSE 31083
// exit ;
31081: GO 31471
// result := [ ] ;
31083: LD_ADDR_VAR 0 6
31087: PUSH
31088: EMPTY
31089: ST_TO_ADDR
// for i in list do
31090: LD_ADDR_VAR 0 7
31094: PUSH
31095: LD_VAR 0 3
31099: PUSH
31100: FOR_IN
31101: IFFALSE 31303
// begin tmp := GetDistUnitXY ( i , x , y ) ;
31103: LD_ADDR_VAR 0 9
31107: PUSH
31108: LD_VAR 0 7
31112: PPUSH
31113: LD_VAR 0 1
31117: PPUSH
31118: LD_VAR 0 2
31122: PPUSH
31123: CALL_OW 297
31127: ST_TO_ADDR
// if not result then
31128: LD_VAR 0 6
31132: NOT
31133: IFFALSE 31159
// result := [ [ i , tmp ] ] else
31135: LD_ADDR_VAR 0 6
31139: PUSH
31140: LD_VAR 0 7
31144: PUSH
31145: LD_VAR 0 9
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: PUSH
31154: EMPTY
31155: LIST
31156: ST_TO_ADDR
31157: GO 31301
// begin if result [ result ] [ 2 ] < tmp then
31159: LD_VAR 0 6
31163: PUSH
31164: LD_VAR 0 6
31168: ARRAY
31169: PUSH
31170: LD_INT 2
31172: ARRAY
31173: PUSH
31174: LD_VAR 0 9
31178: LESS
31179: IFFALSE 31221
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
31181: LD_ADDR_VAR 0 6
31185: PUSH
31186: LD_VAR 0 6
31190: PPUSH
31191: LD_VAR 0 6
31195: PUSH
31196: LD_INT 1
31198: PLUS
31199: PPUSH
31200: LD_VAR 0 7
31204: PUSH
31205: LD_VAR 0 9
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: PPUSH
31214: CALL_OW 2
31218: ST_TO_ADDR
31219: GO 31301
// for j = 1 to result do
31221: LD_ADDR_VAR 0 8
31225: PUSH
31226: DOUBLE
31227: LD_INT 1
31229: DEC
31230: ST_TO_ADDR
31231: LD_VAR 0 6
31235: PUSH
31236: FOR_TO
31237: IFFALSE 31299
// begin if tmp < result [ j ] [ 2 ] then
31239: LD_VAR 0 9
31243: PUSH
31244: LD_VAR 0 6
31248: PUSH
31249: LD_VAR 0 8
31253: ARRAY
31254: PUSH
31255: LD_INT 2
31257: ARRAY
31258: LESS
31259: IFFALSE 31297
// begin result := Insert ( result , j , [ i , tmp ] ) ;
31261: LD_ADDR_VAR 0 6
31265: PUSH
31266: LD_VAR 0 6
31270: PPUSH
31271: LD_VAR 0 8
31275: PPUSH
31276: LD_VAR 0 7
31280: PUSH
31281: LD_VAR 0 9
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: PPUSH
31290: CALL_OW 2
31294: ST_TO_ADDR
// break ;
31295: GO 31299
// end ; end ;
31297: GO 31236
31299: POP
31300: POP
// end ; end ;
31301: GO 31100
31303: POP
31304: POP
// if result and not asc then
31305: LD_VAR 0 6
31309: PUSH
31310: LD_VAR 0 4
31314: NOT
31315: AND
31316: IFFALSE 31391
// begin tmp := result ;
31318: LD_ADDR_VAR 0 9
31322: PUSH
31323: LD_VAR 0 6
31327: ST_TO_ADDR
// for i = tmp downto 1 do
31328: LD_ADDR_VAR 0 7
31332: PUSH
31333: DOUBLE
31334: LD_VAR 0 9
31338: INC
31339: ST_TO_ADDR
31340: LD_INT 1
31342: PUSH
31343: FOR_DOWNTO
31344: IFFALSE 31389
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
31346: LD_ADDR_VAR 0 6
31350: PUSH
31351: LD_VAR 0 6
31355: PPUSH
31356: LD_VAR 0 9
31360: PUSH
31361: LD_VAR 0 7
31365: MINUS
31366: PUSH
31367: LD_INT 1
31369: PLUS
31370: PPUSH
31371: LD_VAR 0 9
31375: PUSH
31376: LD_VAR 0 7
31380: ARRAY
31381: PPUSH
31382: CALL_OW 1
31386: ST_TO_ADDR
31387: GO 31343
31389: POP
31390: POP
// end ; tmp := [ ] ;
31391: LD_ADDR_VAR 0 9
31395: PUSH
31396: EMPTY
31397: ST_TO_ADDR
// if mode then
31398: LD_VAR 0 5
31402: IFFALSE 31471
// begin for i = 1 to result do
31404: LD_ADDR_VAR 0 7
31408: PUSH
31409: DOUBLE
31410: LD_INT 1
31412: DEC
31413: ST_TO_ADDR
31414: LD_VAR 0 6
31418: PUSH
31419: FOR_TO
31420: IFFALSE 31459
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
31422: LD_ADDR_VAR 0 9
31426: PUSH
31427: LD_VAR 0 9
31431: PPUSH
31432: LD_VAR 0 7
31436: PPUSH
31437: LD_VAR 0 6
31441: PUSH
31442: LD_VAR 0 7
31446: ARRAY
31447: PUSH
31448: LD_INT 1
31450: ARRAY
31451: PPUSH
31452: CALL_OW 1
31456: ST_TO_ADDR
31457: GO 31419
31459: POP
31460: POP
// result := tmp ;
31461: LD_ADDR_VAR 0 6
31465: PUSH
31466: LD_VAR 0 9
31470: ST_TO_ADDR
// end ; end ;
31471: LD_VAR 0 6
31475: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
31476: LD_INT 0
31478: PPUSH
31479: PPUSH
31480: PPUSH
31481: PPUSH
31482: PPUSH
31483: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
31484: LD_ADDR_VAR 0 5
31488: PUSH
31489: LD_INT 0
31491: PUSH
31492: LD_INT 0
31494: PUSH
31495: LD_INT 0
31497: PUSH
31498: EMPTY
31499: PUSH
31500: EMPTY
31501: LIST
31502: LIST
31503: LIST
31504: LIST
31505: ST_TO_ADDR
// if not x or not y then
31506: LD_VAR 0 2
31510: NOT
31511: PUSH
31512: LD_VAR 0 3
31516: NOT
31517: OR
31518: IFFALSE 31522
// exit ;
31520: GO 33174
// if not range then
31522: LD_VAR 0 4
31526: NOT
31527: IFFALSE 31537
// range := 10 ;
31529: LD_ADDR_VAR 0 4
31533: PUSH
31534: LD_INT 10
31536: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31537: LD_ADDR_VAR 0 8
31541: PUSH
31542: LD_INT 81
31544: PUSH
31545: LD_VAR 0 1
31549: PUSH
31550: EMPTY
31551: LIST
31552: LIST
31553: PUSH
31554: LD_INT 92
31556: PUSH
31557: LD_VAR 0 2
31561: PUSH
31562: LD_VAR 0 3
31566: PUSH
31567: LD_VAR 0 4
31571: PUSH
31572: EMPTY
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: PUSH
31578: LD_INT 3
31580: PUSH
31581: LD_INT 21
31583: PUSH
31584: LD_INT 3
31586: PUSH
31587: EMPTY
31588: LIST
31589: LIST
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: LIST
31599: PPUSH
31600: CALL_OW 69
31604: ST_TO_ADDR
// if not tmp then
31605: LD_VAR 0 8
31609: NOT
31610: IFFALSE 31614
// exit ;
31612: GO 33174
// for i in tmp do
31614: LD_ADDR_VAR 0 6
31618: PUSH
31619: LD_VAR 0 8
31623: PUSH
31624: FOR_IN
31625: IFFALSE 33149
// begin points := [ 0 , 0 , 0 ] ;
31627: LD_ADDR_VAR 0 9
31631: PUSH
31632: LD_INT 0
31634: PUSH
31635: LD_INT 0
31637: PUSH
31638: LD_INT 0
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: LIST
31645: ST_TO_ADDR
// bpoints := 1 ;
31646: LD_ADDR_VAR 0 10
31650: PUSH
31651: LD_INT 1
31653: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31654: LD_VAR 0 6
31658: PPUSH
31659: CALL_OW 247
31663: PUSH
31664: LD_INT 1
31666: DOUBLE
31667: EQUAL
31668: IFTRUE 31672
31670: GO 32250
31672: POP
// begin if GetClass ( i ) = 1 then
31673: LD_VAR 0 6
31677: PPUSH
31678: CALL_OW 257
31682: PUSH
31683: LD_INT 1
31685: EQUAL
31686: IFFALSE 31707
// points := [ 10 , 5 , 3 ] ;
31688: LD_ADDR_VAR 0 9
31692: PUSH
31693: LD_INT 10
31695: PUSH
31696: LD_INT 5
31698: PUSH
31699: LD_INT 3
31701: PUSH
31702: EMPTY
31703: LIST
31704: LIST
31705: LIST
31706: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
31707: LD_VAR 0 6
31711: PPUSH
31712: CALL_OW 257
31716: PUSH
31717: LD_INT 2
31719: PUSH
31720: LD_INT 3
31722: PUSH
31723: LD_INT 4
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: LIST
31730: IN
31731: IFFALSE 31752
// points := [ 3 , 2 , 1 ] ;
31733: LD_ADDR_VAR 0 9
31737: PUSH
31738: LD_INT 3
31740: PUSH
31741: LD_INT 2
31743: PUSH
31744: LD_INT 1
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: LIST
31751: ST_TO_ADDR
// if GetClass ( i ) = 5 then
31752: LD_VAR 0 6
31756: PPUSH
31757: CALL_OW 257
31761: PUSH
31762: LD_INT 5
31764: EQUAL
31765: IFFALSE 31786
// points := [ 130 , 5 , 2 ] ;
31767: LD_ADDR_VAR 0 9
31771: PUSH
31772: LD_INT 130
31774: PUSH
31775: LD_INT 5
31777: PUSH
31778: LD_INT 2
31780: PUSH
31781: EMPTY
31782: LIST
31783: LIST
31784: LIST
31785: ST_TO_ADDR
// if GetClass ( i ) = 8 then
31786: LD_VAR 0 6
31790: PPUSH
31791: CALL_OW 257
31795: PUSH
31796: LD_INT 8
31798: EQUAL
31799: IFFALSE 31820
// points := [ 35 , 35 , 30 ] ;
31801: LD_ADDR_VAR 0 9
31805: PUSH
31806: LD_INT 35
31808: PUSH
31809: LD_INT 35
31811: PUSH
31812: LD_INT 30
31814: PUSH
31815: EMPTY
31816: LIST
31817: LIST
31818: LIST
31819: ST_TO_ADDR
// if GetClass ( i ) = 9 then
31820: LD_VAR 0 6
31824: PPUSH
31825: CALL_OW 257
31829: PUSH
31830: LD_INT 9
31832: EQUAL
31833: IFFALSE 31854
// points := [ 20 , 55 , 40 ] ;
31835: LD_ADDR_VAR 0 9
31839: PUSH
31840: LD_INT 20
31842: PUSH
31843: LD_INT 55
31845: PUSH
31846: LD_INT 40
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: LIST
31853: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
31854: LD_VAR 0 6
31858: PPUSH
31859: CALL_OW 257
31863: PUSH
31864: LD_INT 12
31866: PUSH
31867: LD_INT 16
31869: PUSH
31870: EMPTY
31871: LIST
31872: LIST
31873: IN
31874: IFFALSE 31895
// points := [ 5 , 3 , 2 ] ;
31876: LD_ADDR_VAR 0 9
31880: PUSH
31881: LD_INT 5
31883: PUSH
31884: LD_INT 3
31886: PUSH
31887: LD_INT 2
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: LIST
31894: ST_TO_ADDR
// if GetClass ( i ) = 17 then
31895: LD_VAR 0 6
31899: PPUSH
31900: CALL_OW 257
31904: PUSH
31905: LD_INT 17
31907: EQUAL
31908: IFFALSE 31929
// points := [ 100 , 50 , 75 ] ;
31910: LD_ADDR_VAR 0 9
31914: PUSH
31915: LD_INT 100
31917: PUSH
31918: LD_INT 50
31920: PUSH
31921: LD_INT 75
31923: PUSH
31924: EMPTY
31925: LIST
31926: LIST
31927: LIST
31928: ST_TO_ADDR
// if GetClass ( i ) = 15 then
31929: LD_VAR 0 6
31933: PPUSH
31934: CALL_OW 257
31938: PUSH
31939: LD_INT 15
31941: EQUAL
31942: IFFALSE 31963
// points := [ 10 , 5 , 3 ] ;
31944: LD_ADDR_VAR 0 9
31948: PUSH
31949: LD_INT 10
31951: PUSH
31952: LD_INT 5
31954: PUSH
31955: LD_INT 3
31957: PUSH
31958: EMPTY
31959: LIST
31960: LIST
31961: LIST
31962: ST_TO_ADDR
// if GetClass ( i ) = 14 then
31963: LD_VAR 0 6
31967: PPUSH
31968: CALL_OW 257
31972: PUSH
31973: LD_INT 14
31975: EQUAL
31976: IFFALSE 31997
// points := [ 10 , 0 , 0 ] ;
31978: LD_ADDR_VAR 0 9
31982: PUSH
31983: LD_INT 10
31985: PUSH
31986: LD_INT 0
31988: PUSH
31989: LD_INT 0
31991: PUSH
31992: EMPTY
31993: LIST
31994: LIST
31995: LIST
31996: ST_TO_ADDR
// if GetClass ( i ) = 11 then
31997: LD_VAR 0 6
32001: PPUSH
32002: CALL_OW 257
32006: PUSH
32007: LD_INT 11
32009: EQUAL
32010: IFFALSE 32031
// points := [ 30 , 10 , 5 ] ;
32012: LD_ADDR_VAR 0 9
32016: PUSH
32017: LD_INT 30
32019: PUSH
32020: LD_INT 10
32022: PUSH
32023: LD_INT 5
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: LIST
32030: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
32031: LD_VAR 0 1
32035: PPUSH
32036: LD_INT 5
32038: PPUSH
32039: CALL_OW 321
32043: PUSH
32044: LD_INT 2
32046: EQUAL
32047: IFFALSE 32064
// bpoints := bpoints * 1.8 ;
32049: LD_ADDR_VAR 0 10
32053: PUSH
32054: LD_VAR 0 10
32058: PUSH
32059: LD_REAL  1.80000000000000E+0000
32062: MUL
32063: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
32064: LD_VAR 0 6
32068: PPUSH
32069: CALL_OW 257
32073: PUSH
32074: LD_INT 1
32076: PUSH
32077: LD_INT 2
32079: PUSH
32080: LD_INT 3
32082: PUSH
32083: LD_INT 4
32085: PUSH
32086: EMPTY
32087: LIST
32088: LIST
32089: LIST
32090: LIST
32091: IN
32092: PUSH
32093: LD_VAR 0 1
32097: PPUSH
32098: LD_INT 51
32100: PPUSH
32101: CALL_OW 321
32105: PUSH
32106: LD_INT 2
32108: EQUAL
32109: AND
32110: IFFALSE 32127
// bpoints := bpoints * 1.2 ;
32112: LD_ADDR_VAR 0 10
32116: PUSH
32117: LD_VAR 0 10
32121: PUSH
32122: LD_REAL  1.20000000000000E+0000
32125: MUL
32126: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
32127: LD_VAR 0 6
32131: PPUSH
32132: CALL_OW 257
32136: PUSH
32137: LD_INT 5
32139: PUSH
32140: LD_INT 7
32142: PUSH
32143: LD_INT 9
32145: PUSH
32146: EMPTY
32147: LIST
32148: LIST
32149: LIST
32150: IN
32151: PUSH
32152: LD_VAR 0 1
32156: PPUSH
32157: LD_INT 52
32159: PPUSH
32160: CALL_OW 321
32164: PUSH
32165: LD_INT 2
32167: EQUAL
32168: AND
32169: IFFALSE 32186
// bpoints := bpoints * 1.5 ;
32171: LD_ADDR_VAR 0 10
32175: PUSH
32176: LD_VAR 0 10
32180: PUSH
32181: LD_REAL  1.50000000000000E+0000
32184: MUL
32185: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
32186: LD_VAR 0 1
32190: PPUSH
32191: LD_INT 66
32193: PPUSH
32194: CALL_OW 321
32198: PUSH
32199: LD_INT 2
32201: EQUAL
32202: IFFALSE 32219
// bpoints := bpoints * 1.1 ;
32204: LD_ADDR_VAR 0 10
32208: PUSH
32209: LD_VAR 0 10
32213: PUSH
32214: LD_REAL  1.10000000000000E+0000
32217: MUL
32218: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
32219: LD_ADDR_VAR 0 10
32223: PUSH
32224: LD_VAR 0 10
32228: PUSH
32229: LD_VAR 0 6
32233: PPUSH
32234: LD_INT 1
32236: PPUSH
32237: CALL_OW 259
32241: PUSH
32242: LD_REAL  1.15000000000000E+0000
32245: MUL
32246: MUL
32247: ST_TO_ADDR
// end ; unit_vehicle :
32248: GO 33078
32250: LD_INT 2
32252: DOUBLE
32253: EQUAL
32254: IFTRUE 32258
32256: GO 33066
32258: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
32259: LD_VAR 0 6
32263: PPUSH
32264: CALL_OW 264
32268: PUSH
32269: LD_INT 2
32271: PUSH
32272: LD_INT 42
32274: PUSH
32275: LD_INT 24
32277: PUSH
32278: EMPTY
32279: LIST
32280: LIST
32281: LIST
32282: IN
32283: IFFALSE 32304
// points := [ 25 , 5 , 3 ] ;
32285: LD_ADDR_VAR 0 9
32289: PUSH
32290: LD_INT 25
32292: PUSH
32293: LD_INT 5
32295: PUSH
32296: LD_INT 3
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: LIST
32303: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
32304: LD_VAR 0 6
32308: PPUSH
32309: CALL_OW 264
32313: PUSH
32314: LD_INT 4
32316: PUSH
32317: LD_INT 43
32319: PUSH
32320: LD_INT 25
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: LIST
32327: IN
32328: IFFALSE 32349
// points := [ 40 , 15 , 5 ] ;
32330: LD_ADDR_VAR 0 9
32334: PUSH
32335: LD_INT 40
32337: PUSH
32338: LD_INT 15
32340: PUSH
32341: LD_INT 5
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: LIST
32348: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
32349: LD_VAR 0 6
32353: PPUSH
32354: CALL_OW 264
32358: PUSH
32359: LD_INT 3
32361: PUSH
32362: LD_INT 23
32364: PUSH
32365: EMPTY
32366: LIST
32367: LIST
32368: IN
32369: IFFALSE 32390
// points := [ 7 , 25 , 8 ] ;
32371: LD_ADDR_VAR 0 9
32375: PUSH
32376: LD_INT 7
32378: PUSH
32379: LD_INT 25
32381: PUSH
32382: LD_INT 8
32384: PUSH
32385: EMPTY
32386: LIST
32387: LIST
32388: LIST
32389: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
32390: LD_VAR 0 6
32394: PPUSH
32395: CALL_OW 264
32399: PUSH
32400: LD_INT 5
32402: PUSH
32403: LD_INT 27
32405: PUSH
32406: LD_INT 44
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: LIST
32413: IN
32414: IFFALSE 32435
// points := [ 14 , 50 , 16 ] ;
32416: LD_ADDR_VAR 0 9
32420: PUSH
32421: LD_INT 14
32423: PUSH
32424: LD_INT 50
32426: PUSH
32427: LD_INT 16
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: LIST
32434: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
32435: LD_VAR 0 6
32439: PPUSH
32440: CALL_OW 264
32444: PUSH
32445: LD_INT 6
32447: PUSH
32448: LD_INT 46
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: IN
32455: IFFALSE 32476
// points := [ 32 , 120 , 70 ] ;
32457: LD_ADDR_VAR 0 9
32461: PUSH
32462: LD_INT 32
32464: PUSH
32465: LD_INT 120
32467: PUSH
32468: LD_INT 70
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: LIST
32475: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
32476: LD_VAR 0 6
32480: PPUSH
32481: CALL_OW 264
32485: PUSH
32486: LD_INT 7
32488: PUSH
32489: LD_INT 28
32491: PUSH
32492: LD_INT 45
32494: PUSH
32495: LD_EXP 101
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: LIST
32504: LIST
32505: IN
32506: IFFALSE 32527
// points := [ 35 , 20 , 45 ] ;
32508: LD_ADDR_VAR 0 9
32512: PUSH
32513: LD_INT 35
32515: PUSH
32516: LD_INT 20
32518: PUSH
32519: LD_INT 45
32521: PUSH
32522: EMPTY
32523: LIST
32524: LIST
32525: LIST
32526: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
32527: LD_VAR 0 6
32531: PPUSH
32532: CALL_OW 264
32536: PUSH
32537: LD_INT 47
32539: PUSH
32540: EMPTY
32541: LIST
32542: IN
32543: IFFALSE 32564
// points := [ 67 , 45 , 75 ] ;
32545: LD_ADDR_VAR 0 9
32549: PUSH
32550: LD_INT 67
32552: PUSH
32553: LD_INT 45
32555: PUSH
32556: LD_INT 75
32558: PUSH
32559: EMPTY
32560: LIST
32561: LIST
32562: LIST
32563: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
32564: LD_VAR 0 6
32568: PPUSH
32569: CALL_OW 264
32573: PUSH
32574: LD_INT 26
32576: PUSH
32577: EMPTY
32578: LIST
32579: IN
32580: IFFALSE 32601
// points := [ 120 , 30 , 80 ] ;
32582: LD_ADDR_VAR 0 9
32586: PUSH
32587: LD_INT 120
32589: PUSH
32590: LD_INT 30
32592: PUSH
32593: LD_INT 80
32595: PUSH
32596: EMPTY
32597: LIST
32598: LIST
32599: LIST
32600: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
32601: LD_VAR 0 6
32605: PPUSH
32606: CALL_OW 264
32610: PUSH
32611: LD_INT 22
32613: PUSH
32614: EMPTY
32615: LIST
32616: IN
32617: IFFALSE 32638
// points := [ 40 , 1 , 1 ] ;
32619: LD_ADDR_VAR 0 9
32623: PUSH
32624: LD_INT 40
32626: PUSH
32627: LD_INT 1
32629: PUSH
32630: LD_INT 1
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: LIST
32637: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32638: LD_VAR 0 6
32642: PPUSH
32643: CALL_OW 264
32647: PUSH
32648: LD_INT 29
32650: PUSH
32651: EMPTY
32652: LIST
32653: IN
32654: IFFALSE 32675
// points := [ 70 , 200 , 400 ] ;
32656: LD_ADDR_VAR 0 9
32660: PUSH
32661: LD_INT 70
32663: PUSH
32664: LD_INT 200
32666: PUSH
32667: LD_INT 400
32669: PUSH
32670: EMPTY
32671: LIST
32672: LIST
32673: LIST
32674: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32675: LD_VAR 0 6
32679: PPUSH
32680: CALL_OW 264
32684: PUSH
32685: LD_INT 14
32687: PUSH
32688: LD_INT 53
32690: PUSH
32691: EMPTY
32692: LIST
32693: LIST
32694: IN
32695: IFFALSE 32716
// points := [ 40 , 10 , 20 ] ;
32697: LD_ADDR_VAR 0 9
32701: PUSH
32702: LD_INT 40
32704: PUSH
32705: LD_INT 10
32707: PUSH
32708: LD_INT 20
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: LIST
32715: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
32716: LD_VAR 0 6
32720: PPUSH
32721: CALL_OW 264
32725: PUSH
32726: LD_INT 9
32728: PUSH
32729: EMPTY
32730: LIST
32731: IN
32732: IFFALSE 32753
// points := [ 5 , 70 , 20 ] ;
32734: LD_ADDR_VAR 0 9
32738: PUSH
32739: LD_INT 5
32741: PUSH
32742: LD_INT 70
32744: PUSH
32745: LD_INT 20
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: LIST
32752: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
32753: LD_VAR 0 6
32757: PPUSH
32758: CALL_OW 264
32762: PUSH
32763: LD_INT 10
32765: PUSH
32766: EMPTY
32767: LIST
32768: IN
32769: IFFALSE 32790
// points := [ 35 , 110 , 70 ] ;
32771: LD_ADDR_VAR 0 9
32775: PUSH
32776: LD_INT 35
32778: PUSH
32779: LD_INT 110
32781: PUSH
32782: LD_INT 70
32784: PUSH
32785: EMPTY
32786: LIST
32787: LIST
32788: LIST
32789: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
32790: LD_VAR 0 6
32794: PPUSH
32795: CALL_OW 265
32799: PUSH
32800: LD_INT 25
32802: EQUAL
32803: IFFALSE 32824
// points := [ 80 , 65 , 100 ] ;
32805: LD_ADDR_VAR 0 9
32809: PUSH
32810: LD_INT 80
32812: PUSH
32813: LD_INT 65
32815: PUSH
32816: LD_INT 100
32818: PUSH
32819: EMPTY
32820: LIST
32821: LIST
32822: LIST
32823: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
32824: LD_VAR 0 6
32828: PPUSH
32829: CALL_OW 263
32833: PUSH
32834: LD_INT 1
32836: EQUAL
32837: IFFALSE 32872
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
32839: LD_ADDR_VAR 0 10
32843: PUSH
32844: LD_VAR 0 10
32848: PUSH
32849: LD_VAR 0 6
32853: PPUSH
32854: CALL_OW 311
32858: PPUSH
32859: LD_INT 3
32861: PPUSH
32862: CALL_OW 259
32866: PUSH
32867: LD_INT 4
32869: MUL
32870: MUL
32871: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
32872: LD_VAR 0 6
32876: PPUSH
32877: CALL_OW 263
32881: PUSH
32882: LD_INT 2
32884: EQUAL
32885: IFFALSE 32936
// begin j := IsControledBy ( i ) ;
32887: LD_ADDR_VAR 0 7
32891: PUSH
32892: LD_VAR 0 6
32896: PPUSH
32897: CALL_OW 312
32901: ST_TO_ADDR
// if j then
32902: LD_VAR 0 7
32906: IFFALSE 32936
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
32908: LD_ADDR_VAR 0 10
32912: PUSH
32913: LD_VAR 0 10
32917: PUSH
32918: LD_VAR 0 7
32922: PPUSH
32923: LD_INT 3
32925: PPUSH
32926: CALL_OW 259
32930: PUSH
32931: LD_INT 3
32933: MUL
32934: MUL
32935: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
32936: LD_VAR 0 6
32940: PPUSH
32941: CALL_OW 264
32945: PUSH
32946: LD_INT 5
32948: PUSH
32949: LD_INT 6
32951: PUSH
32952: LD_INT 46
32954: PUSH
32955: LD_INT 44
32957: PUSH
32958: LD_INT 47
32960: PUSH
32961: LD_INT 45
32963: PUSH
32964: LD_INT 28
32966: PUSH
32967: LD_INT 7
32969: PUSH
32970: LD_INT 27
32972: PUSH
32973: LD_INT 29
32975: PUSH
32976: EMPTY
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: LIST
32985: LIST
32986: LIST
32987: IN
32988: PUSH
32989: LD_VAR 0 1
32993: PPUSH
32994: LD_INT 52
32996: PPUSH
32997: CALL_OW 321
33001: PUSH
33002: LD_INT 2
33004: EQUAL
33005: AND
33006: IFFALSE 33023
// bpoints := bpoints * 1.2 ;
33008: LD_ADDR_VAR 0 10
33012: PUSH
33013: LD_VAR 0 10
33017: PUSH
33018: LD_REAL  1.20000000000000E+0000
33021: MUL
33022: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
33023: LD_VAR 0 6
33027: PPUSH
33028: CALL_OW 264
33032: PUSH
33033: LD_INT 6
33035: PUSH
33036: LD_INT 46
33038: PUSH
33039: LD_INT 47
33041: PUSH
33042: EMPTY
33043: LIST
33044: LIST
33045: LIST
33046: IN
33047: IFFALSE 33064
// bpoints := bpoints * 1.2 ;
33049: LD_ADDR_VAR 0 10
33053: PUSH
33054: LD_VAR 0 10
33058: PUSH
33059: LD_REAL  1.20000000000000E+0000
33062: MUL
33063: ST_TO_ADDR
// end ; unit_building :
33064: GO 33078
33066: LD_INT 3
33068: DOUBLE
33069: EQUAL
33070: IFTRUE 33074
33072: GO 33077
33074: POP
// ; end ;
33075: GO 33078
33077: POP
// for j = 1 to 3 do
33078: LD_ADDR_VAR 0 7
33082: PUSH
33083: DOUBLE
33084: LD_INT 1
33086: DEC
33087: ST_TO_ADDR
33088: LD_INT 3
33090: PUSH
33091: FOR_TO
33092: IFFALSE 33145
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
33094: LD_ADDR_VAR 0 5
33098: PUSH
33099: LD_VAR 0 5
33103: PPUSH
33104: LD_VAR 0 7
33108: PPUSH
33109: LD_VAR 0 5
33113: PUSH
33114: LD_VAR 0 7
33118: ARRAY
33119: PUSH
33120: LD_VAR 0 9
33124: PUSH
33125: LD_VAR 0 7
33129: ARRAY
33130: PUSH
33131: LD_VAR 0 10
33135: MUL
33136: PLUS
33137: PPUSH
33138: CALL_OW 1
33142: ST_TO_ADDR
33143: GO 33091
33145: POP
33146: POP
// end ;
33147: GO 31624
33149: POP
33150: POP
// result := Replace ( result , 4 , tmp ) ;
33151: LD_ADDR_VAR 0 5
33155: PUSH
33156: LD_VAR 0 5
33160: PPUSH
33161: LD_INT 4
33163: PPUSH
33164: LD_VAR 0 8
33168: PPUSH
33169: CALL_OW 1
33173: ST_TO_ADDR
// end ;
33174: LD_VAR 0 5
33178: RET
// export function DangerAtRange ( unit , range ) ; begin
33179: LD_INT 0
33181: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
33182: LD_ADDR_VAR 0 3
33186: PUSH
33187: LD_VAR 0 1
33191: PPUSH
33192: CALL_OW 255
33196: PPUSH
33197: LD_VAR 0 1
33201: PPUSH
33202: CALL_OW 250
33206: PPUSH
33207: LD_VAR 0 1
33211: PPUSH
33212: CALL_OW 251
33216: PPUSH
33217: LD_VAR 0 2
33221: PPUSH
33222: CALL 31476 0 4
33226: ST_TO_ADDR
// end ;
33227: LD_VAR 0 3
33231: RET
// export function DangerInArea ( side , area ) ; begin
33232: LD_INT 0
33234: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
33235: LD_ADDR_VAR 0 3
33239: PUSH
33240: LD_VAR 0 2
33244: PPUSH
33245: LD_INT 81
33247: PUSH
33248: LD_VAR 0 1
33252: PUSH
33253: EMPTY
33254: LIST
33255: LIST
33256: PPUSH
33257: CALL_OW 70
33261: ST_TO_ADDR
// end ;
33262: LD_VAR 0 3
33266: RET
// export function IsExtension ( b ) ; begin
33267: LD_INT 0
33269: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
33270: LD_ADDR_VAR 0 2
33274: PUSH
33275: LD_VAR 0 1
33279: PUSH
33280: LD_INT 23
33282: PUSH
33283: LD_INT 20
33285: PUSH
33286: LD_INT 22
33288: PUSH
33289: LD_INT 17
33291: PUSH
33292: LD_INT 24
33294: PUSH
33295: LD_INT 21
33297: PUSH
33298: LD_INT 19
33300: PUSH
33301: LD_INT 16
33303: PUSH
33304: LD_INT 25
33306: PUSH
33307: LD_INT 18
33309: PUSH
33310: EMPTY
33311: LIST
33312: LIST
33313: LIST
33314: LIST
33315: LIST
33316: LIST
33317: LIST
33318: LIST
33319: LIST
33320: LIST
33321: IN
33322: ST_TO_ADDR
// end ;
33323: LD_VAR 0 2
33327: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
33328: LD_INT 0
33330: PPUSH
33331: PPUSH
33332: PPUSH
// result := [ ] ;
33333: LD_ADDR_VAR 0 4
33337: PUSH
33338: EMPTY
33339: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
33340: LD_ADDR_VAR 0 5
33344: PUSH
33345: LD_VAR 0 2
33349: PPUSH
33350: LD_INT 21
33352: PUSH
33353: LD_INT 3
33355: PUSH
33356: EMPTY
33357: LIST
33358: LIST
33359: PPUSH
33360: CALL_OW 70
33364: ST_TO_ADDR
// if not tmp then
33365: LD_VAR 0 5
33369: NOT
33370: IFFALSE 33374
// exit ;
33372: GO 33438
// if checkLink then
33374: LD_VAR 0 3
33378: IFFALSE 33428
// begin for i in tmp do
33380: LD_ADDR_VAR 0 6
33384: PUSH
33385: LD_VAR 0 5
33389: PUSH
33390: FOR_IN
33391: IFFALSE 33426
// if GetBase ( i ) <> base then
33393: LD_VAR 0 6
33397: PPUSH
33398: CALL_OW 274
33402: PUSH
33403: LD_VAR 0 1
33407: NONEQUAL
33408: IFFALSE 33424
// ComLinkToBase ( base , i ) ;
33410: LD_VAR 0 1
33414: PPUSH
33415: LD_VAR 0 6
33419: PPUSH
33420: CALL_OW 169
33424: GO 33390
33426: POP
33427: POP
// end ; result := tmp ;
33428: LD_ADDR_VAR 0 4
33432: PUSH
33433: LD_VAR 0 5
33437: ST_TO_ADDR
// end ;
33438: LD_VAR 0 4
33442: RET
// export function ComComplete ( units , b ) ; var i ; begin
33443: LD_INT 0
33445: PPUSH
33446: PPUSH
// if not units then
33447: LD_VAR 0 1
33451: NOT
33452: IFFALSE 33456
// exit ;
33454: GO 33546
// for i in units do
33456: LD_ADDR_VAR 0 4
33460: PUSH
33461: LD_VAR 0 1
33465: PUSH
33466: FOR_IN
33467: IFFALSE 33544
// if BuildingStatus ( b ) = bs_build then
33469: LD_VAR 0 2
33473: PPUSH
33474: CALL_OW 461
33478: PUSH
33479: LD_INT 1
33481: EQUAL
33482: IFFALSE 33542
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
33484: LD_VAR 0 4
33488: PPUSH
33489: LD_STRING h
33491: PUSH
33492: LD_VAR 0 2
33496: PPUSH
33497: CALL_OW 250
33501: PUSH
33502: LD_VAR 0 2
33506: PPUSH
33507: CALL_OW 251
33511: PUSH
33512: LD_VAR 0 2
33516: PUSH
33517: LD_INT 0
33519: PUSH
33520: LD_INT 0
33522: PUSH
33523: LD_INT 0
33525: PUSH
33526: EMPTY
33527: LIST
33528: LIST
33529: LIST
33530: LIST
33531: LIST
33532: LIST
33533: LIST
33534: PUSH
33535: EMPTY
33536: LIST
33537: PPUSH
33538: CALL_OW 446
33542: GO 33466
33544: POP
33545: POP
// end ;
33546: LD_VAR 0 3
33550: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
33551: LD_INT 0
33553: PPUSH
33554: PPUSH
33555: PPUSH
33556: PPUSH
33557: PPUSH
33558: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
33559: LD_VAR 0 1
33563: NOT
33564: PUSH
33565: LD_VAR 0 1
33569: PPUSH
33570: CALL_OW 263
33574: PUSH
33575: LD_INT 2
33577: NONEQUAL
33578: OR
33579: IFFALSE 33583
// exit ;
33581: GO 33899
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
33583: LD_ADDR_VAR 0 6
33587: PUSH
33588: LD_INT 22
33590: PUSH
33591: LD_VAR 0 1
33595: PPUSH
33596: CALL_OW 255
33600: PUSH
33601: EMPTY
33602: LIST
33603: LIST
33604: PUSH
33605: LD_INT 2
33607: PUSH
33608: LD_INT 30
33610: PUSH
33611: LD_INT 36
33613: PUSH
33614: EMPTY
33615: LIST
33616: LIST
33617: PUSH
33618: LD_INT 34
33620: PUSH
33621: LD_INT 31
33623: PUSH
33624: EMPTY
33625: LIST
33626: LIST
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: LIST
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: PPUSH
33637: CALL_OW 69
33641: ST_TO_ADDR
// if not tmp then
33642: LD_VAR 0 6
33646: NOT
33647: IFFALSE 33651
// exit ;
33649: GO 33899
// result := [ ] ;
33651: LD_ADDR_VAR 0 2
33655: PUSH
33656: EMPTY
33657: ST_TO_ADDR
// for i in tmp do
33658: LD_ADDR_VAR 0 3
33662: PUSH
33663: LD_VAR 0 6
33667: PUSH
33668: FOR_IN
33669: IFFALSE 33740
// begin t := UnitsInside ( i ) ;
33671: LD_ADDR_VAR 0 4
33675: PUSH
33676: LD_VAR 0 3
33680: PPUSH
33681: CALL_OW 313
33685: ST_TO_ADDR
// if t then
33686: LD_VAR 0 4
33690: IFFALSE 33738
// for j in t do
33692: LD_ADDR_VAR 0 7
33696: PUSH
33697: LD_VAR 0 4
33701: PUSH
33702: FOR_IN
33703: IFFALSE 33736
// result := Replace ( result , result + 1 , j ) ;
33705: LD_ADDR_VAR 0 2
33709: PUSH
33710: LD_VAR 0 2
33714: PPUSH
33715: LD_VAR 0 2
33719: PUSH
33720: LD_INT 1
33722: PLUS
33723: PPUSH
33724: LD_VAR 0 7
33728: PPUSH
33729: CALL_OW 1
33733: ST_TO_ADDR
33734: GO 33702
33736: POP
33737: POP
// end ;
33738: GO 33668
33740: POP
33741: POP
// if not result then
33742: LD_VAR 0 2
33746: NOT
33747: IFFALSE 33751
// exit ;
33749: GO 33899
// mech := result [ 1 ] ;
33751: LD_ADDR_VAR 0 5
33755: PUSH
33756: LD_VAR 0 2
33760: PUSH
33761: LD_INT 1
33763: ARRAY
33764: ST_TO_ADDR
// if result > 1 then
33765: LD_VAR 0 2
33769: PUSH
33770: LD_INT 1
33772: GREATER
33773: IFFALSE 33885
// begin for i = 2 to result do
33775: LD_ADDR_VAR 0 3
33779: PUSH
33780: DOUBLE
33781: LD_INT 2
33783: DEC
33784: ST_TO_ADDR
33785: LD_VAR 0 2
33789: PUSH
33790: FOR_TO
33791: IFFALSE 33883
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
33793: LD_ADDR_VAR 0 4
33797: PUSH
33798: LD_VAR 0 2
33802: PUSH
33803: LD_VAR 0 3
33807: ARRAY
33808: PPUSH
33809: LD_INT 3
33811: PPUSH
33812: CALL_OW 259
33816: PUSH
33817: LD_VAR 0 2
33821: PUSH
33822: LD_VAR 0 3
33826: ARRAY
33827: PPUSH
33828: CALL_OW 432
33832: MINUS
33833: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
33834: LD_VAR 0 4
33838: PUSH
33839: LD_VAR 0 5
33843: PPUSH
33844: LD_INT 3
33846: PPUSH
33847: CALL_OW 259
33851: PUSH
33852: LD_VAR 0 5
33856: PPUSH
33857: CALL_OW 432
33861: MINUS
33862: GREATEREQUAL
33863: IFFALSE 33881
// mech := result [ i ] ;
33865: LD_ADDR_VAR 0 5
33869: PUSH
33870: LD_VAR 0 2
33874: PUSH
33875: LD_VAR 0 3
33879: ARRAY
33880: ST_TO_ADDR
// end ;
33881: GO 33790
33883: POP
33884: POP
// end ; ComLinkTo ( vehicle , mech ) ;
33885: LD_VAR 0 1
33889: PPUSH
33890: LD_VAR 0 5
33894: PPUSH
33895: CALL_OW 135
// end ;
33899: LD_VAR 0 2
33903: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
33904: LD_INT 0
33906: PPUSH
33907: PPUSH
33908: PPUSH
33909: PPUSH
33910: PPUSH
33911: PPUSH
33912: PPUSH
33913: PPUSH
33914: PPUSH
33915: PPUSH
33916: PPUSH
33917: PPUSH
33918: PPUSH
// result := [ ] ;
33919: LD_ADDR_VAR 0 7
33923: PUSH
33924: EMPTY
33925: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
33926: LD_VAR 0 1
33930: PPUSH
33931: CALL_OW 266
33935: PUSH
33936: LD_INT 0
33938: PUSH
33939: LD_INT 1
33941: PUSH
33942: EMPTY
33943: LIST
33944: LIST
33945: IN
33946: NOT
33947: IFFALSE 33951
// exit ;
33949: GO 35585
// if name then
33951: LD_VAR 0 3
33955: IFFALSE 33971
// SetBName ( base_dep , name ) ;
33957: LD_VAR 0 1
33961: PPUSH
33962: LD_VAR 0 3
33966: PPUSH
33967: CALL_OW 500
// base := GetBase ( base_dep ) ;
33971: LD_ADDR_VAR 0 15
33975: PUSH
33976: LD_VAR 0 1
33980: PPUSH
33981: CALL_OW 274
33985: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
33986: LD_ADDR_VAR 0 16
33990: PUSH
33991: LD_VAR 0 1
33995: PPUSH
33996: CALL_OW 255
34000: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
34001: LD_ADDR_VAR 0 17
34005: PUSH
34006: LD_VAR 0 1
34010: PPUSH
34011: CALL_OW 248
34015: ST_TO_ADDR
// if sources then
34016: LD_VAR 0 5
34020: IFFALSE 34067
// for i = 1 to 3 do
34022: LD_ADDR_VAR 0 8
34026: PUSH
34027: DOUBLE
34028: LD_INT 1
34030: DEC
34031: ST_TO_ADDR
34032: LD_INT 3
34034: PUSH
34035: FOR_TO
34036: IFFALSE 34065
// AddResourceType ( base , i , sources [ i ] ) ;
34038: LD_VAR 0 15
34042: PPUSH
34043: LD_VAR 0 8
34047: PPUSH
34048: LD_VAR 0 5
34052: PUSH
34053: LD_VAR 0 8
34057: ARRAY
34058: PPUSH
34059: CALL_OW 276
34063: GO 34035
34065: POP
34066: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
34067: LD_ADDR_VAR 0 18
34071: PUSH
34072: LD_VAR 0 15
34076: PPUSH
34077: LD_VAR 0 2
34081: PPUSH
34082: LD_INT 1
34084: PPUSH
34085: CALL 33328 0 3
34089: ST_TO_ADDR
// InitHc ;
34090: CALL_OW 19
// InitUc ;
34094: CALL_OW 18
// uc_side := side ;
34098: LD_ADDR_OWVAR 20
34102: PUSH
34103: LD_VAR 0 16
34107: ST_TO_ADDR
// uc_nation := nation ;
34108: LD_ADDR_OWVAR 21
34112: PUSH
34113: LD_VAR 0 17
34117: ST_TO_ADDR
// if buildings then
34118: LD_VAR 0 18
34122: IFFALSE 35444
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
34124: LD_ADDR_VAR 0 19
34128: PUSH
34129: LD_VAR 0 18
34133: PPUSH
34134: LD_INT 2
34136: PUSH
34137: LD_INT 30
34139: PUSH
34140: LD_INT 29
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: PUSH
34147: LD_INT 30
34149: PUSH
34150: LD_INT 30
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: LIST
34161: PPUSH
34162: CALL_OW 72
34166: ST_TO_ADDR
// if tmp then
34167: LD_VAR 0 19
34171: IFFALSE 34219
// for i in tmp do
34173: LD_ADDR_VAR 0 8
34177: PUSH
34178: LD_VAR 0 19
34182: PUSH
34183: FOR_IN
34184: IFFALSE 34217
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
34186: LD_VAR 0 8
34190: PPUSH
34191: CALL_OW 250
34195: PPUSH
34196: LD_VAR 0 8
34200: PPUSH
34201: CALL_OW 251
34205: PPUSH
34206: LD_VAR 0 16
34210: PPUSH
34211: CALL_OW 441
34215: GO 34183
34217: POP
34218: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
34219: LD_VAR 0 18
34223: PPUSH
34224: LD_INT 2
34226: PUSH
34227: LD_INT 30
34229: PUSH
34230: LD_INT 32
34232: PUSH
34233: EMPTY
34234: LIST
34235: LIST
34236: PUSH
34237: LD_INT 30
34239: PUSH
34240: LD_INT 33
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: PUSH
34247: EMPTY
34248: LIST
34249: LIST
34250: LIST
34251: PPUSH
34252: CALL_OW 72
34256: IFFALSE 34344
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
34258: LD_ADDR_VAR 0 8
34262: PUSH
34263: LD_VAR 0 18
34267: PPUSH
34268: LD_INT 2
34270: PUSH
34271: LD_INT 30
34273: PUSH
34274: LD_INT 32
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: PUSH
34281: LD_INT 30
34283: PUSH
34284: LD_INT 33
34286: PUSH
34287: EMPTY
34288: LIST
34289: LIST
34290: PUSH
34291: EMPTY
34292: LIST
34293: LIST
34294: LIST
34295: PPUSH
34296: CALL_OW 72
34300: PUSH
34301: FOR_IN
34302: IFFALSE 34342
// begin if not GetBWeapon ( i ) then
34304: LD_VAR 0 8
34308: PPUSH
34309: CALL_OW 269
34313: NOT
34314: IFFALSE 34340
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
34316: LD_VAR 0 8
34320: PPUSH
34321: LD_VAR 0 8
34325: PPUSH
34326: LD_VAR 0 2
34330: PPUSH
34331: CALL 35590 0 2
34335: PPUSH
34336: CALL_OW 431
// end ;
34340: GO 34301
34342: POP
34343: POP
// end ; for i = 1 to personel do
34344: LD_ADDR_VAR 0 8
34348: PUSH
34349: DOUBLE
34350: LD_INT 1
34352: DEC
34353: ST_TO_ADDR
34354: LD_VAR 0 6
34358: PUSH
34359: FOR_TO
34360: IFFALSE 35424
// begin if i > 4 then
34362: LD_VAR 0 8
34366: PUSH
34367: LD_INT 4
34369: GREATER
34370: IFFALSE 34374
// break ;
34372: GO 35424
// case i of 1 :
34374: LD_VAR 0 8
34378: PUSH
34379: LD_INT 1
34381: DOUBLE
34382: EQUAL
34383: IFTRUE 34387
34385: GO 34467
34387: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
34388: LD_ADDR_VAR 0 12
34392: PUSH
34393: LD_VAR 0 18
34397: PPUSH
34398: LD_INT 22
34400: PUSH
34401: LD_VAR 0 16
34405: PUSH
34406: EMPTY
34407: LIST
34408: LIST
34409: PUSH
34410: LD_INT 58
34412: PUSH
34413: EMPTY
34414: LIST
34415: PUSH
34416: LD_INT 2
34418: PUSH
34419: LD_INT 30
34421: PUSH
34422: LD_INT 32
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: PUSH
34429: LD_INT 30
34431: PUSH
34432: LD_INT 4
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: PUSH
34439: LD_INT 30
34441: PUSH
34442: LD_INT 5
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: LIST
34459: PPUSH
34460: CALL_OW 72
34464: ST_TO_ADDR
34465: GO 34689
34467: LD_INT 2
34469: DOUBLE
34470: EQUAL
34471: IFTRUE 34475
34473: GO 34537
34475: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
34476: LD_ADDR_VAR 0 12
34480: PUSH
34481: LD_VAR 0 18
34485: PPUSH
34486: LD_INT 22
34488: PUSH
34489: LD_VAR 0 16
34493: PUSH
34494: EMPTY
34495: LIST
34496: LIST
34497: PUSH
34498: LD_INT 2
34500: PUSH
34501: LD_INT 30
34503: PUSH
34504: LD_INT 0
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: PUSH
34511: LD_INT 30
34513: PUSH
34514: LD_INT 1
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: PUSH
34521: EMPTY
34522: LIST
34523: LIST
34524: LIST
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: PPUSH
34530: CALL_OW 72
34534: ST_TO_ADDR
34535: GO 34689
34537: LD_INT 3
34539: DOUBLE
34540: EQUAL
34541: IFTRUE 34545
34543: GO 34607
34545: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
34546: LD_ADDR_VAR 0 12
34550: PUSH
34551: LD_VAR 0 18
34555: PPUSH
34556: LD_INT 22
34558: PUSH
34559: LD_VAR 0 16
34563: PUSH
34564: EMPTY
34565: LIST
34566: LIST
34567: PUSH
34568: LD_INT 2
34570: PUSH
34571: LD_INT 30
34573: PUSH
34574: LD_INT 2
34576: PUSH
34577: EMPTY
34578: LIST
34579: LIST
34580: PUSH
34581: LD_INT 30
34583: PUSH
34584: LD_INT 3
34586: PUSH
34587: EMPTY
34588: LIST
34589: LIST
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: LIST
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: PPUSH
34600: CALL_OW 72
34604: ST_TO_ADDR
34605: GO 34689
34607: LD_INT 4
34609: DOUBLE
34610: EQUAL
34611: IFTRUE 34615
34613: GO 34688
34615: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
34616: LD_ADDR_VAR 0 12
34620: PUSH
34621: LD_VAR 0 18
34625: PPUSH
34626: LD_INT 22
34628: PUSH
34629: LD_VAR 0 16
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: PUSH
34638: LD_INT 2
34640: PUSH
34641: LD_INT 30
34643: PUSH
34644: LD_INT 6
34646: PUSH
34647: EMPTY
34648: LIST
34649: LIST
34650: PUSH
34651: LD_INT 30
34653: PUSH
34654: LD_INT 7
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: PUSH
34661: LD_INT 30
34663: PUSH
34664: LD_INT 8
34666: PUSH
34667: EMPTY
34668: LIST
34669: LIST
34670: PUSH
34671: EMPTY
34672: LIST
34673: LIST
34674: LIST
34675: LIST
34676: PUSH
34677: EMPTY
34678: LIST
34679: LIST
34680: PPUSH
34681: CALL_OW 72
34685: ST_TO_ADDR
34686: GO 34689
34688: POP
// if i = 1 then
34689: LD_VAR 0 8
34693: PUSH
34694: LD_INT 1
34696: EQUAL
34697: IFFALSE 34808
// begin tmp := [ ] ;
34699: LD_ADDR_VAR 0 19
34703: PUSH
34704: EMPTY
34705: ST_TO_ADDR
// for j in f do
34706: LD_ADDR_VAR 0 9
34710: PUSH
34711: LD_VAR 0 12
34715: PUSH
34716: FOR_IN
34717: IFFALSE 34790
// if GetBType ( j ) = b_bunker then
34719: LD_VAR 0 9
34723: PPUSH
34724: CALL_OW 266
34728: PUSH
34729: LD_INT 32
34731: EQUAL
34732: IFFALSE 34759
// tmp := Insert ( tmp , 1 , j ) else
34734: LD_ADDR_VAR 0 19
34738: PUSH
34739: LD_VAR 0 19
34743: PPUSH
34744: LD_INT 1
34746: PPUSH
34747: LD_VAR 0 9
34751: PPUSH
34752: CALL_OW 2
34756: ST_TO_ADDR
34757: GO 34788
// tmp := Insert ( tmp , tmp + 1 , j ) ;
34759: LD_ADDR_VAR 0 19
34763: PUSH
34764: LD_VAR 0 19
34768: PPUSH
34769: LD_VAR 0 19
34773: PUSH
34774: LD_INT 1
34776: PLUS
34777: PPUSH
34778: LD_VAR 0 9
34782: PPUSH
34783: CALL_OW 2
34787: ST_TO_ADDR
34788: GO 34716
34790: POP
34791: POP
// if tmp then
34792: LD_VAR 0 19
34796: IFFALSE 34808
// f := tmp ;
34798: LD_ADDR_VAR 0 12
34802: PUSH
34803: LD_VAR 0 19
34807: ST_TO_ADDR
// end ; x := personel [ i ] ;
34808: LD_ADDR_VAR 0 13
34812: PUSH
34813: LD_VAR 0 6
34817: PUSH
34818: LD_VAR 0 8
34822: ARRAY
34823: ST_TO_ADDR
// if x = - 1 then
34824: LD_VAR 0 13
34828: PUSH
34829: LD_INT 1
34831: NEG
34832: EQUAL
34833: IFFALSE 35042
// begin for j in f do
34835: LD_ADDR_VAR 0 9
34839: PUSH
34840: LD_VAR 0 12
34844: PUSH
34845: FOR_IN
34846: IFFALSE 35038
// repeat InitHc ;
34848: CALL_OW 19
// if GetBType ( j ) = b_barracks then
34852: LD_VAR 0 9
34856: PPUSH
34857: CALL_OW 266
34861: PUSH
34862: LD_INT 5
34864: EQUAL
34865: IFFALSE 34935
// begin if UnitsInside ( j ) < 3 then
34867: LD_VAR 0 9
34871: PPUSH
34872: CALL_OW 313
34876: PUSH
34877: LD_INT 3
34879: LESS
34880: IFFALSE 34916
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34882: LD_INT 0
34884: PPUSH
34885: LD_INT 5
34887: PUSH
34888: LD_INT 8
34890: PUSH
34891: LD_INT 9
34893: PUSH
34894: EMPTY
34895: LIST
34896: LIST
34897: LIST
34898: PUSH
34899: LD_VAR 0 17
34903: ARRAY
34904: PPUSH
34905: LD_VAR 0 4
34909: PPUSH
34910: CALL_OW 380
34914: GO 34933
// PrepareHuman ( false , i , skill ) ;
34916: LD_INT 0
34918: PPUSH
34919: LD_VAR 0 8
34923: PPUSH
34924: LD_VAR 0 4
34928: PPUSH
34929: CALL_OW 380
// end else
34933: GO 34952
// PrepareHuman ( false , i , skill ) ;
34935: LD_INT 0
34937: PPUSH
34938: LD_VAR 0 8
34942: PPUSH
34943: LD_VAR 0 4
34947: PPUSH
34948: CALL_OW 380
// un := CreateHuman ;
34952: LD_ADDR_VAR 0 14
34956: PUSH
34957: CALL_OW 44
34961: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34962: LD_ADDR_VAR 0 7
34966: PUSH
34967: LD_VAR 0 7
34971: PPUSH
34972: LD_INT 1
34974: PPUSH
34975: LD_VAR 0 14
34979: PPUSH
34980: CALL_OW 2
34984: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
34985: LD_VAR 0 14
34989: PPUSH
34990: LD_VAR 0 9
34994: PPUSH
34995: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
34999: LD_VAR 0 9
35003: PPUSH
35004: CALL_OW 313
35008: PUSH
35009: LD_INT 6
35011: EQUAL
35012: PUSH
35013: LD_VAR 0 9
35017: PPUSH
35018: CALL_OW 266
35022: PUSH
35023: LD_INT 32
35025: PUSH
35026: LD_INT 31
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: IN
35033: OR
35034: IFFALSE 34848
35036: GO 34845
35038: POP
35039: POP
// end else
35040: GO 35422
// for j = 1 to x do
35042: LD_ADDR_VAR 0 9
35046: PUSH
35047: DOUBLE
35048: LD_INT 1
35050: DEC
35051: ST_TO_ADDR
35052: LD_VAR 0 13
35056: PUSH
35057: FOR_TO
35058: IFFALSE 35420
// begin InitHc ;
35060: CALL_OW 19
// if not f then
35064: LD_VAR 0 12
35068: NOT
35069: IFFALSE 35158
// begin PrepareHuman ( false , i , skill ) ;
35071: LD_INT 0
35073: PPUSH
35074: LD_VAR 0 8
35078: PPUSH
35079: LD_VAR 0 4
35083: PPUSH
35084: CALL_OW 380
// un := CreateHuman ;
35088: LD_ADDR_VAR 0 14
35092: PUSH
35093: CALL_OW 44
35097: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35098: LD_ADDR_VAR 0 7
35102: PUSH
35103: LD_VAR 0 7
35107: PPUSH
35108: LD_INT 1
35110: PPUSH
35111: LD_VAR 0 14
35115: PPUSH
35116: CALL_OW 2
35120: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35121: LD_VAR 0 14
35125: PPUSH
35126: LD_VAR 0 1
35130: PPUSH
35131: CALL_OW 250
35135: PPUSH
35136: LD_VAR 0 1
35140: PPUSH
35141: CALL_OW 251
35145: PPUSH
35146: LD_INT 10
35148: PPUSH
35149: LD_INT 0
35151: PPUSH
35152: CALL_OW 50
// continue ;
35156: GO 35057
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
35158: LD_VAR 0 12
35162: PUSH
35163: LD_INT 1
35165: ARRAY
35166: PPUSH
35167: CALL_OW 313
35171: PUSH
35172: LD_VAR 0 12
35176: PUSH
35177: LD_INT 1
35179: ARRAY
35180: PPUSH
35181: CALL_OW 266
35185: PUSH
35186: LD_INT 32
35188: PUSH
35189: LD_INT 31
35191: PUSH
35192: EMPTY
35193: LIST
35194: LIST
35195: IN
35196: AND
35197: PUSH
35198: LD_VAR 0 12
35202: PUSH
35203: LD_INT 1
35205: ARRAY
35206: PPUSH
35207: CALL_OW 313
35211: PUSH
35212: LD_INT 6
35214: EQUAL
35215: OR
35216: IFFALSE 35236
// f := Delete ( f , 1 ) ;
35218: LD_ADDR_VAR 0 12
35222: PUSH
35223: LD_VAR 0 12
35227: PPUSH
35228: LD_INT 1
35230: PPUSH
35231: CALL_OW 3
35235: ST_TO_ADDR
// if not f then
35236: LD_VAR 0 12
35240: NOT
35241: IFFALSE 35259
// begin x := x + 2 ;
35243: LD_ADDR_VAR 0 13
35247: PUSH
35248: LD_VAR 0 13
35252: PUSH
35253: LD_INT 2
35255: PLUS
35256: ST_TO_ADDR
// continue ;
35257: GO 35057
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
35259: LD_VAR 0 12
35263: PUSH
35264: LD_INT 1
35266: ARRAY
35267: PPUSH
35268: CALL_OW 266
35272: PUSH
35273: LD_INT 5
35275: EQUAL
35276: IFFALSE 35350
// begin if UnitsInside ( f [ 1 ] ) < 3 then
35278: LD_VAR 0 12
35282: PUSH
35283: LD_INT 1
35285: ARRAY
35286: PPUSH
35287: CALL_OW 313
35291: PUSH
35292: LD_INT 3
35294: LESS
35295: IFFALSE 35331
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35297: LD_INT 0
35299: PPUSH
35300: LD_INT 5
35302: PUSH
35303: LD_INT 8
35305: PUSH
35306: LD_INT 9
35308: PUSH
35309: EMPTY
35310: LIST
35311: LIST
35312: LIST
35313: PUSH
35314: LD_VAR 0 17
35318: ARRAY
35319: PPUSH
35320: LD_VAR 0 4
35324: PPUSH
35325: CALL_OW 380
35329: GO 35348
// PrepareHuman ( false , i , skill ) ;
35331: LD_INT 0
35333: PPUSH
35334: LD_VAR 0 8
35338: PPUSH
35339: LD_VAR 0 4
35343: PPUSH
35344: CALL_OW 380
// end else
35348: GO 35367
// PrepareHuman ( false , i , skill ) ;
35350: LD_INT 0
35352: PPUSH
35353: LD_VAR 0 8
35357: PPUSH
35358: LD_VAR 0 4
35362: PPUSH
35363: CALL_OW 380
// un := CreateHuman ;
35367: LD_ADDR_VAR 0 14
35371: PUSH
35372: CALL_OW 44
35376: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35377: LD_ADDR_VAR 0 7
35381: PUSH
35382: LD_VAR 0 7
35386: PPUSH
35387: LD_INT 1
35389: PPUSH
35390: LD_VAR 0 14
35394: PPUSH
35395: CALL_OW 2
35399: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
35400: LD_VAR 0 14
35404: PPUSH
35405: LD_VAR 0 12
35409: PUSH
35410: LD_INT 1
35412: ARRAY
35413: PPUSH
35414: CALL_OW 52
// end ;
35418: GO 35057
35420: POP
35421: POP
// end ;
35422: GO 34359
35424: POP
35425: POP
// result := result ^ buildings ;
35426: LD_ADDR_VAR 0 7
35430: PUSH
35431: LD_VAR 0 7
35435: PUSH
35436: LD_VAR 0 18
35440: ADD
35441: ST_TO_ADDR
// end else
35442: GO 35585
// begin for i = 1 to personel do
35444: LD_ADDR_VAR 0 8
35448: PUSH
35449: DOUBLE
35450: LD_INT 1
35452: DEC
35453: ST_TO_ADDR
35454: LD_VAR 0 6
35458: PUSH
35459: FOR_TO
35460: IFFALSE 35583
// begin if i > 4 then
35462: LD_VAR 0 8
35466: PUSH
35467: LD_INT 4
35469: GREATER
35470: IFFALSE 35474
// break ;
35472: GO 35583
// x := personel [ i ] ;
35474: LD_ADDR_VAR 0 13
35478: PUSH
35479: LD_VAR 0 6
35483: PUSH
35484: LD_VAR 0 8
35488: ARRAY
35489: ST_TO_ADDR
// if x = - 1 then
35490: LD_VAR 0 13
35494: PUSH
35495: LD_INT 1
35497: NEG
35498: EQUAL
35499: IFFALSE 35503
// continue ;
35501: GO 35459
// PrepareHuman ( false , i , skill ) ;
35503: LD_INT 0
35505: PPUSH
35506: LD_VAR 0 8
35510: PPUSH
35511: LD_VAR 0 4
35515: PPUSH
35516: CALL_OW 380
// un := CreateHuman ;
35520: LD_ADDR_VAR 0 14
35524: PUSH
35525: CALL_OW 44
35529: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35530: LD_VAR 0 14
35534: PPUSH
35535: LD_VAR 0 1
35539: PPUSH
35540: CALL_OW 250
35544: PPUSH
35545: LD_VAR 0 1
35549: PPUSH
35550: CALL_OW 251
35554: PPUSH
35555: LD_INT 10
35557: PPUSH
35558: LD_INT 0
35560: PPUSH
35561: CALL_OW 50
// result := result ^ un ;
35565: LD_ADDR_VAR 0 7
35569: PUSH
35570: LD_VAR 0 7
35574: PUSH
35575: LD_VAR 0 14
35579: ADD
35580: ST_TO_ADDR
// end ;
35581: GO 35459
35583: POP
35584: POP
// end ; end ;
35585: LD_VAR 0 7
35589: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
35590: LD_INT 0
35592: PPUSH
35593: PPUSH
35594: PPUSH
35595: PPUSH
35596: PPUSH
35597: PPUSH
35598: PPUSH
35599: PPUSH
35600: PPUSH
35601: PPUSH
35602: PPUSH
35603: PPUSH
35604: PPUSH
35605: PPUSH
35606: PPUSH
35607: PPUSH
// result := false ;
35608: LD_ADDR_VAR 0 3
35612: PUSH
35613: LD_INT 0
35615: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
35616: LD_VAR 0 1
35620: NOT
35621: PUSH
35622: LD_VAR 0 1
35626: PPUSH
35627: CALL_OW 266
35631: PUSH
35632: LD_INT 32
35634: PUSH
35635: LD_INT 33
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: IN
35642: NOT
35643: OR
35644: IFFALSE 35648
// exit ;
35646: GO 36757
// nat := GetNation ( tower ) ;
35648: LD_ADDR_VAR 0 12
35652: PUSH
35653: LD_VAR 0 1
35657: PPUSH
35658: CALL_OW 248
35662: ST_TO_ADDR
// side := GetSide ( tower ) ;
35663: LD_ADDR_VAR 0 16
35667: PUSH
35668: LD_VAR 0 1
35672: PPUSH
35673: CALL_OW 255
35677: ST_TO_ADDR
// x := GetX ( tower ) ;
35678: LD_ADDR_VAR 0 10
35682: PUSH
35683: LD_VAR 0 1
35687: PPUSH
35688: CALL_OW 250
35692: ST_TO_ADDR
// y := GetY ( tower ) ;
35693: LD_ADDR_VAR 0 11
35697: PUSH
35698: LD_VAR 0 1
35702: PPUSH
35703: CALL_OW 251
35707: ST_TO_ADDR
// if not x or not y then
35708: LD_VAR 0 10
35712: NOT
35713: PUSH
35714: LD_VAR 0 11
35718: NOT
35719: OR
35720: IFFALSE 35724
// exit ;
35722: GO 36757
// weapon := 0 ;
35724: LD_ADDR_VAR 0 18
35728: PUSH
35729: LD_INT 0
35731: ST_TO_ADDR
// fac_list := [ ] ;
35732: LD_ADDR_VAR 0 17
35736: PUSH
35737: EMPTY
35738: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
35739: LD_ADDR_VAR 0 6
35743: PUSH
35744: LD_VAR 0 1
35748: PPUSH
35749: CALL_OW 274
35753: PPUSH
35754: LD_VAR 0 2
35758: PPUSH
35759: LD_INT 0
35761: PPUSH
35762: CALL 33328 0 3
35766: PPUSH
35767: LD_INT 30
35769: PUSH
35770: LD_INT 3
35772: PUSH
35773: EMPTY
35774: LIST
35775: LIST
35776: PPUSH
35777: CALL_OW 72
35781: ST_TO_ADDR
// if not factories then
35782: LD_VAR 0 6
35786: NOT
35787: IFFALSE 35791
// exit ;
35789: GO 36757
// for i in factories do
35791: LD_ADDR_VAR 0 8
35795: PUSH
35796: LD_VAR 0 6
35800: PUSH
35801: FOR_IN
35802: IFFALSE 35827
// fac_list := fac_list union AvailableWeaponList ( i ) ;
35804: LD_ADDR_VAR 0 17
35808: PUSH
35809: LD_VAR 0 17
35813: PUSH
35814: LD_VAR 0 8
35818: PPUSH
35819: CALL_OW 478
35823: UNION
35824: ST_TO_ADDR
35825: GO 35801
35827: POP
35828: POP
// if not fac_list then
35829: LD_VAR 0 17
35833: NOT
35834: IFFALSE 35838
// exit ;
35836: GO 36757
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
35838: LD_ADDR_VAR 0 5
35842: PUSH
35843: LD_INT 4
35845: PUSH
35846: LD_INT 5
35848: PUSH
35849: LD_INT 9
35851: PUSH
35852: LD_INT 10
35854: PUSH
35855: LD_INT 6
35857: PUSH
35858: LD_INT 7
35860: PUSH
35861: LD_INT 11
35863: PUSH
35864: EMPTY
35865: LIST
35866: LIST
35867: LIST
35868: LIST
35869: LIST
35870: LIST
35871: LIST
35872: PUSH
35873: LD_INT 27
35875: PUSH
35876: LD_INT 28
35878: PUSH
35879: LD_INT 26
35881: PUSH
35882: LD_INT 30
35884: PUSH
35885: EMPTY
35886: LIST
35887: LIST
35888: LIST
35889: LIST
35890: PUSH
35891: LD_INT 43
35893: PUSH
35894: LD_INT 44
35896: PUSH
35897: LD_INT 46
35899: PUSH
35900: LD_INT 45
35902: PUSH
35903: LD_INT 47
35905: PUSH
35906: LD_INT 49
35908: PUSH
35909: EMPTY
35910: LIST
35911: LIST
35912: LIST
35913: LIST
35914: LIST
35915: LIST
35916: PUSH
35917: EMPTY
35918: LIST
35919: LIST
35920: LIST
35921: PUSH
35922: LD_VAR 0 12
35926: ARRAY
35927: ST_TO_ADDR
// list := list isect fac_list ;
35928: LD_ADDR_VAR 0 5
35932: PUSH
35933: LD_VAR 0 5
35937: PUSH
35938: LD_VAR 0 17
35942: ISECT
35943: ST_TO_ADDR
// if not list then
35944: LD_VAR 0 5
35948: NOT
35949: IFFALSE 35953
// exit ;
35951: GO 36757
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
35953: LD_VAR 0 12
35957: PUSH
35958: LD_INT 3
35960: EQUAL
35961: PUSH
35962: LD_INT 49
35964: PUSH
35965: LD_VAR 0 5
35969: IN
35970: AND
35971: PUSH
35972: LD_INT 31
35974: PPUSH
35975: LD_VAR 0 16
35979: PPUSH
35980: CALL_OW 321
35984: PUSH
35985: LD_INT 2
35987: EQUAL
35988: AND
35989: IFFALSE 36049
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
35991: LD_INT 22
35993: PUSH
35994: LD_VAR 0 16
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: PUSH
36003: LD_INT 35
36005: PUSH
36006: LD_INT 49
36008: PUSH
36009: EMPTY
36010: LIST
36011: LIST
36012: PUSH
36013: LD_INT 91
36015: PUSH
36016: LD_VAR 0 1
36020: PUSH
36021: LD_INT 10
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: LIST
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: LIST
36033: PPUSH
36034: CALL_OW 69
36038: NOT
36039: IFFALSE 36049
// weapon := ru_time_lapser ;
36041: LD_ADDR_VAR 0 18
36045: PUSH
36046: LD_INT 49
36048: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
36049: LD_VAR 0 12
36053: PUSH
36054: LD_INT 1
36056: PUSH
36057: LD_INT 2
36059: PUSH
36060: EMPTY
36061: LIST
36062: LIST
36063: IN
36064: PUSH
36065: LD_INT 11
36067: PUSH
36068: LD_VAR 0 5
36072: IN
36073: PUSH
36074: LD_INT 30
36076: PUSH
36077: LD_VAR 0 5
36081: IN
36082: OR
36083: AND
36084: PUSH
36085: LD_INT 6
36087: PPUSH
36088: LD_VAR 0 16
36092: PPUSH
36093: CALL_OW 321
36097: PUSH
36098: LD_INT 2
36100: EQUAL
36101: AND
36102: IFFALSE 36267
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
36104: LD_INT 22
36106: PUSH
36107: LD_VAR 0 16
36111: PUSH
36112: EMPTY
36113: LIST
36114: LIST
36115: PUSH
36116: LD_INT 2
36118: PUSH
36119: LD_INT 35
36121: PUSH
36122: LD_INT 11
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: PUSH
36129: LD_INT 35
36131: PUSH
36132: LD_INT 30
36134: PUSH
36135: EMPTY
36136: LIST
36137: LIST
36138: PUSH
36139: EMPTY
36140: LIST
36141: LIST
36142: LIST
36143: PUSH
36144: LD_INT 91
36146: PUSH
36147: LD_VAR 0 1
36151: PUSH
36152: LD_INT 18
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: LIST
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: LIST
36164: PPUSH
36165: CALL_OW 69
36169: NOT
36170: PUSH
36171: LD_INT 22
36173: PUSH
36174: LD_VAR 0 16
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: PUSH
36183: LD_INT 2
36185: PUSH
36186: LD_INT 30
36188: PUSH
36189: LD_INT 32
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: PUSH
36196: LD_INT 30
36198: PUSH
36199: LD_INT 33
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: PUSH
36206: EMPTY
36207: LIST
36208: LIST
36209: LIST
36210: PUSH
36211: LD_INT 91
36213: PUSH
36214: LD_VAR 0 1
36218: PUSH
36219: LD_INT 12
36221: PUSH
36222: EMPTY
36223: LIST
36224: LIST
36225: LIST
36226: PUSH
36227: EMPTY
36228: LIST
36229: LIST
36230: LIST
36231: PUSH
36232: EMPTY
36233: LIST
36234: PPUSH
36235: CALL_OW 69
36239: PUSH
36240: LD_INT 2
36242: GREATER
36243: AND
36244: IFFALSE 36267
// weapon := [ us_radar , ar_radar ] [ nat ] ;
36246: LD_ADDR_VAR 0 18
36250: PUSH
36251: LD_INT 11
36253: PUSH
36254: LD_INT 30
36256: PUSH
36257: EMPTY
36258: LIST
36259: LIST
36260: PUSH
36261: LD_VAR 0 12
36265: ARRAY
36266: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
36267: LD_VAR 0 18
36271: NOT
36272: PUSH
36273: LD_INT 40
36275: PPUSH
36276: LD_VAR 0 16
36280: PPUSH
36281: CALL_OW 321
36285: PUSH
36286: LD_INT 2
36288: EQUAL
36289: AND
36290: PUSH
36291: LD_INT 7
36293: PUSH
36294: LD_VAR 0 5
36298: IN
36299: PUSH
36300: LD_INT 28
36302: PUSH
36303: LD_VAR 0 5
36307: IN
36308: OR
36309: PUSH
36310: LD_INT 45
36312: PUSH
36313: LD_VAR 0 5
36317: IN
36318: OR
36319: AND
36320: IFFALSE 36574
// begin hex := GetHexInfo ( x , y ) ;
36322: LD_ADDR_VAR 0 4
36326: PUSH
36327: LD_VAR 0 10
36331: PPUSH
36332: LD_VAR 0 11
36336: PPUSH
36337: CALL_OW 546
36341: ST_TO_ADDR
// if hex [ 1 ] then
36342: LD_VAR 0 4
36346: PUSH
36347: LD_INT 1
36349: ARRAY
36350: IFFALSE 36354
// exit ;
36352: GO 36757
// height := hex [ 2 ] ;
36354: LD_ADDR_VAR 0 15
36358: PUSH
36359: LD_VAR 0 4
36363: PUSH
36364: LD_INT 2
36366: ARRAY
36367: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
36368: LD_ADDR_VAR 0 14
36372: PUSH
36373: LD_INT 0
36375: PUSH
36376: LD_INT 2
36378: PUSH
36379: LD_INT 3
36381: PUSH
36382: LD_INT 5
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: LIST
36389: LIST
36390: ST_TO_ADDR
// for i in tmp do
36391: LD_ADDR_VAR 0 8
36395: PUSH
36396: LD_VAR 0 14
36400: PUSH
36401: FOR_IN
36402: IFFALSE 36572
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
36404: LD_ADDR_VAR 0 9
36408: PUSH
36409: LD_VAR 0 10
36413: PPUSH
36414: LD_VAR 0 8
36418: PPUSH
36419: LD_INT 5
36421: PPUSH
36422: CALL_OW 272
36426: PUSH
36427: LD_VAR 0 11
36431: PPUSH
36432: LD_VAR 0 8
36436: PPUSH
36437: LD_INT 5
36439: PPUSH
36440: CALL_OW 273
36444: PUSH
36445: EMPTY
36446: LIST
36447: LIST
36448: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
36449: LD_VAR 0 9
36453: PUSH
36454: LD_INT 1
36456: ARRAY
36457: PPUSH
36458: LD_VAR 0 9
36462: PUSH
36463: LD_INT 2
36465: ARRAY
36466: PPUSH
36467: CALL_OW 488
36471: IFFALSE 36570
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
36473: LD_ADDR_VAR 0 4
36477: PUSH
36478: LD_VAR 0 9
36482: PUSH
36483: LD_INT 1
36485: ARRAY
36486: PPUSH
36487: LD_VAR 0 9
36491: PUSH
36492: LD_INT 2
36494: ARRAY
36495: PPUSH
36496: CALL_OW 546
36500: ST_TO_ADDR
// if hex [ 1 ] then
36501: LD_VAR 0 4
36505: PUSH
36506: LD_INT 1
36508: ARRAY
36509: IFFALSE 36513
// continue ;
36511: GO 36401
// h := hex [ 2 ] ;
36513: LD_ADDR_VAR 0 13
36517: PUSH
36518: LD_VAR 0 4
36522: PUSH
36523: LD_INT 2
36525: ARRAY
36526: ST_TO_ADDR
// if h + 7 < height then
36527: LD_VAR 0 13
36531: PUSH
36532: LD_INT 7
36534: PLUS
36535: PUSH
36536: LD_VAR 0 15
36540: LESS
36541: IFFALSE 36570
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
36543: LD_ADDR_VAR 0 18
36547: PUSH
36548: LD_INT 7
36550: PUSH
36551: LD_INT 28
36553: PUSH
36554: LD_INT 45
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: LIST
36561: PUSH
36562: LD_VAR 0 12
36566: ARRAY
36567: ST_TO_ADDR
// break ;
36568: GO 36572
// end ; end ; end ;
36570: GO 36401
36572: POP
36573: POP
// end ; if not weapon then
36574: LD_VAR 0 18
36578: NOT
36579: IFFALSE 36639
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
36581: LD_ADDR_VAR 0 5
36585: PUSH
36586: LD_VAR 0 5
36590: PUSH
36591: LD_INT 11
36593: PUSH
36594: LD_INT 30
36596: PUSH
36597: LD_INT 49
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: LIST
36604: DIFF
36605: ST_TO_ADDR
// if not list then
36606: LD_VAR 0 5
36610: NOT
36611: IFFALSE 36615
// exit ;
36613: GO 36757
// weapon := list [ rand ( 1 , list ) ] ;
36615: LD_ADDR_VAR 0 18
36619: PUSH
36620: LD_VAR 0 5
36624: PUSH
36625: LD_INT 1
36627: PPUSH
36628: LD_VAR 0 5
36632: PPUSH
36633: CALL_OW 12
36637: ARRAY
36638: ST_TO_ADDR
// end ; if weapon then
36639: LD_VAR 0 18
36643: IFFALSE 36757
// begin tmp := CostOfWeapon ( weapon ) ;
36645: LD_ADDR_VAR 0 14
36649: PUSH
36650: LD_VAR 0 18
36654: PPUSH
36655: CALL_OW 451
36659: ST_TO_ADDR
// j := GetBase ( tower ) ;
36660: LD_ADDR_VAR 0 9
36664: PUSH
36665: LD_VAR 0 1
36669: PPUSH
36670: CALL_OW 274
36674: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36675: LD_VAR 0 9
36679: PPUSH
36680: LD_INT 1
36682: PPUSH
36683: CALL_OW 275
36687: PUSH
36688: LD_VAR 0 14
36692: PUSH
36693: LD_INT 1
36695: ARRAY
36696: GREATEREQUAL
36697: PUSH
36698: LD_VAR 0 9
36702: PPUSH
36703: LD_INT 2
36705: PPUSH
36706: CALL_OW 275
36710: PUSH
36711: LD_VAR 0 14
36715: PUSH
36716: LD_INT 2
36718: ARRAY
36719: GREATEREQUAL
36720: AND
36721: PUSH
36722: LD_VAR 0 9
36726: PPUSH
36727: LD_INT 3
36729: PPUSH
36730: CALL_OW 275
36734: PUSH
36735: LD_VAR 0 14
36739: PUSH
36740: LD_INT 3
36742: ARRAY
36743: GREATEREQUAL
36744: AND
36745: IFFALSE 36757
// result := weapon ;
36747: LD_ADDR_VAR 0 3
36751: PUSH
36752: LD_VAR 0 18
36756: ST_TO_ADDR
// end ; end ;
36757: LD_VAR 0 3
36761: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
36762: LD_INT 0
36764: PPUSH
36765: PPUSH
// result := true ;
36766: LD_ADDR_VAR 0 3
36770: PUSH
36771: LD_INT 1
36773: ST_TO_ADDR
// if array1 = array2 then
36774: LD_VAR 0 1
36778: PUSH
36779: LD_VAR 0 2
36783: EQUAL
36784: IFFALSE 36844
// begin for i = 1 to array1 do
36786: LD_ADDR_VAR 0 4
36790: PUSH
36791: DOUBLE
36792: LD_INT 1
36794: DEC
36795: ST_TO_ADDR
36796: LD_VAR 0 1
36800: PUSH
36801: FOR_TO
36802: IFFALSE 36840
// if array1 [ i ] <> array2 [ i ] then
36804: LD_VAR 0 1
36808: PUSH
36809: LD_VAR 0 4
36813: ARRAY
36814: PUSH
36815: LD_VAR 0 2
36819: PUSH
36820: LD_VAR 0 4
36824: ARRAY
36825: NONEQUAL
36826: IFFALSE 36838
// begin result := false ;
36828: LD_ADDR_VAR 0 3
36832: PUSH
36833: LD_INT 0
36835: ST_TO_ADDR
// break ;
36836: GO 36840
// end ;
36838: GO 36801
36840: POP
36841: POP
// end else
36842: GO 36852
// result := false ;
36844: LD_ADDR_VAR 0 3
36848: PUSH
36849: LD_INT 0
36851: ST_TO_ADDR
// end ;
36852: LD_VAR 0 3
36856: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
36857: LD_INT 0
36859: PPUSH
36860: PPUSH
// if not array1 or not array2 then
36861: LD_VAR 0 1
36865: NOT
36866: PUSH
36867: LD_VAR 0 2
36871: NOT
36872: OR
36873: IFFALSE 36877
// exit ;
36875: GO 36941
// result := true ;
36877: LD_ADDR_VAR 0 3
36881: PUSH
36882: LD_INT 1
36884: ST_TO_ADDR
// for i = 1 to array1 do
36885: LD_ADDR_VAR 0 4
36889: PUSH
36890: DOUBLE
36891: LD_INT 1
36893: DEC
36894: ST_TO_ADDR
36895: LD_VAR 0 1
36899: PUSH
36900: FOR_TO
36901: IFFALSE 36939
// if array1 [ i ] <> array2 [ i ] then
36903: LD_VAR 0 1
36907: PUSH
36908: LD_VAR 0 4
36912: ARRAY
36913: PUSH
36914: LD_VAR 0 2
36918: PUSH
36919: LD_VAR 0 4
36923: ARRAY
36924: NONEQUAL
36925: IFFALSE 36937
// begin result := false ;
36927: LD_ADDR_VAR 0 3
36931: PUSH
36932: LD_INT 0
36934: ST_TO_ADDR
// break ;
36935: GO 36939
// end ;
36937: GO 36900
36939: POP
36940: POP
// end ;
36941: LD_VAR 0 3
36945: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
36946: LD_INT 0
36948: PPUSH
36949: PPUSH
36950: PPUSH
// pom := GetBase ( fac ) ;
36951: LD_ADDR_VAR 0 5
36955: PUSH
36956: LD_VAR 0 1
36960: PPUSH
36961: CALL_OW 274
36965: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
36966: LD_ADDR_VAR 0 4
36970: PUSH
36971: LD_VAR 0 2
36975: PUSH
36976: LD_INT 1
36978: ARRAY
36979: PPUSH
36980: LD_VAR 0 2
36984: PUSH
36985: LD_INT 2
36987: ARRAY
36988: PPUSH
36989: LD_VAR 0 2
36993: PUSH
36994: LD_INT 3
36996: ARRAY
36997: PPUSH
36998: LD_VAR 0 2
37002: PUSH
37003: LD_INT 4
37005: ARRAY
37006: PPUSH
37007: CALL_OW 449
37011: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37012: LD_ADDR_VAR 0 3
37016: PUSH
37017: LD_VAR 0 5
37021: PPUSH
37022: LD_INT 1
37024: PPUSH
37025: CALL_OW 275
37029: PUSH
37030: LD_VAR 0 4
37034: PUSH
37035: LD_INT 1
37037: ARRAY
37038: GREATEREQUAL
37039: PUSH
37040: LD_VAR 0 5
37044: PPUSH
37045: LD_INT 2
37047: PPUSH
37048: CALL_OW 275
37052: PUSH
37053: LD_VAR 0 4
37057: PUSH
37058: LD_INT 2
37060: ARRAY
37061: GREATEREQUAL
37062: AND
37063: PUSH
37064: LD_VAR 0 5
37068: PPUSH
37069: LD_INT 3
37071: PPUSH
37072: CALL_OW 275
37076: PUSH
37077: LD_VAR 0 4
37081: PUSH
37082: LD_INT 3
37084: ARRAY
37085: GREATEREQUAL
37086: AND
37087: ST_TO_ADDR
// end ;
37088: LD_VAR 0 3
37092: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
37093: LD_INT 0
37095: PPUSH
37096: PPUSH
37097: PPUSH
37098: PPUSH
// pom := GetBase ( building ) ;
37099: LD_ADDR_VAR 0 3
37103: PUSH
37104: LD_VAR 0 1
37108: PPUSH
37109: CALL_OW 274
37113: ST_TO_ADDR
// if not pom then
37114: LD_VAR 0 3
37118: NOT
37119: IFFALSE 37123
// exit ;
37121: GO 37293
// btype := GetBType ( building ) ;
37123: LD_ADDR_VAR 0 5
37127: PUSH
37128: LD_VAR 0 1
37132: PPUSH
37133: CALL_OW 266
37137: ST_TO_ADDR
// if btype = b_armoury then
37138: LD_VAR 0 5
37142: PUSH
37143: LD_INT 4
37145: EQUAL
37146: IFFALSE 37156
// btype := b_barracks ;
37148: LD_ADDR_VAR 0 5
37152: PUSH
37153: LD_INT 5
37155: ST_TO_ADDR
// if btype = b_depot then
37156: LD_VAR 0 5
37160: PUSH
37161: LD_INT 0
37163: EQUAL
37164: IFFALSE 37174
// btype := b_warehouse ;
37166: LD_ADDR_VAR 0 5
37170: PUSH
37171: LD_INT 1
37173: ST_TO_ADDR
// if btype = b_workshop then
37174: LD_VAR 0 5
37178: PUSH
37179: LD_INT 2
37181: EQUAL
37182: IFFALSE 37192
// btype := b_factory ;
37184: LD_ADDR_VAR 0 5
37188: PUSH
37189: LD_INT 3
37191: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37192: LD_ADDR_VAR 0 4
37196: PUSH
37197: LD_VAR 0 5
37201: PPUSH
37202: LD_VAR 0 1
37206: PPUSH
37207: CALL_OW 248
37211: PPUSH
37212: CALL_OW 450
37216: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37217: LD_ADDR_VAR 0 2
37221: PUSH
37222: LD_VAR 0 3
37226: PPUSH
37227: LD_INT 1
37229: PPUSH
37230: CALL_OW 275
37234: PUSH
37235: LD_VAR 0 4
37239: PUSH
37240: LD_INT 1
37242: ARRAY
37243: GREATEREQUAL
37244: PUSH
37245: LD_VAR 0 3
37249: PPUSH
37250: LD_INT 2
37252: PPUSH
37253: CALL_OW 275
37257: PUSH
37258: LD_VAR 0 4
37262: PUSH
37263: LD_INT 2
37265: ARRAY
37266: GREATEREQUAL
37267: AND
37268: PUSH
37269: LD_VAR 0 3
37273: PPUSH
37274: LD_INT 3
37276: PPUSH
37277: CALL_OW 275
37281: PUSH
37282: LD_VAR 0 4
37286: PUSH
37287: LD_INT 3
37289: ARRAY
37290: GREATEREQUAL
37291: AND
37292: ST_TO_ADDR
// end ;
37293: LD_VAR 0 2
37297: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
37298: LD_INT 0
37300: PPUSH
37301: PPUSH
37302: PPUSH
// pom := GetBase ( building ) ;
37303: LD_ADDR_VAR 0 4
37307: PUSH
37308: LD_VAR 0 1
37312: PPUSH
37313: CALL_OW 274
37317: ST_TO_ADDR
// if not pom then
37318: LD_VAR 0 4
37322: NOT
37323: IFFALSE 37327
// exit ;
37325: GO 37428
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37327: LD_ADDR_VAR 0 5
37331: PUSH
37332: LD_VAR 0 2
37336: PPUSH
37337: LD_VAR 0 1
37341: PPUSH
37342: CALL_OW 248
37346: PPUSH
37347: CALL_OW 450
37351: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37352: LD_ADDR_VAR 0 3
37356: PUSH
37357: LD_VAR 0 4
37361: PPUSH
37362: LD_INT 1
37364: PPUSH
37365: CALL_OW 275
37369: PUSH
37370: LD_VAR 0 5
37374: PUSH
37375: LD_INT 1
37377: ARRAY
37378: GREATEREQUAL
37379: PUSH
37380: LD_VAR 0 4
37384: PPUSH
37385: LD_INT 2
37387: PPUSH
37388: CALL_OW 275
37392: PUSH
37393: LD_VAR 0 5
37397: PUSH
37398: LD_INT 2
37400: ARRAY
37401: GREATEREQUAL
37402: AND
37403: PUSH
37404: LD_VAR 0 4
37408: PPUSH
37409: LD_INT 3
37411: PPUSH
37412: CALL_OW 275
37416: PUSH
37417: LD_VAR 0 5
37421: PUSH
37422: LD_INT 3
37424: ARRAY
37425: GREATEREQUAL
37426: AND
37427: ST_TO_ADDR
// end ;
37428: LD_VAR 0 3
37432: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
37433: LD_INT 0
37435: PPUSH
37436: PPUSH
37437: PPUSH
37438: PPUSH
37439: PPUSH
37440: PPUSH
37441: PPUSH
37442: PPUSH
37443: PPUSH
37444: PPUSH
37445: PPUSH
// result := false ;
37446: LD_ADDR_VAR 0 8
37450: PUSH
37451: LD_INT 0
37453: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
37454: LD_VAR 0 5
37458: NOT
37459: PUSH
37460: LD_VAR 0 1
37464: NOT
37465: OR
37466: PUSH
37467: LD_VAR 0 2
37471: NOT
37472: OR
37473: PUSH
37474: LD_VAR 0 3
37478: NOT
37479: OR
37480: IFFALSE 37484
// exit ;
37482: GO 38298
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
37484: LD_ADDR_VAR 0 14
37488: PUSH
37489: LD_VAR 0 1
37493: PPUSH
37494: LD_VAR 0 2
37498: PPUSH
37499: LD_VAR 0 3
37503: PPUSH
37504: LD_VAR 0 4
37508: PPUSH
37509: LD_VAR 0 5
37513: PUSH
37514: LD_INT 1
37516: ARRAY
37517: PPUSH
37518: CALL_OW 248
37522: PPUSH
37523: LD_INT 0
37525: PPUSH
37526: CALL 39535 0 6
37530: ST_TO_ADDR
// if not hexes then
37531: LD_VAR 0 14
37535: NOT
37536: IFFALSE 37540
// exit ;
37538: GO 38298
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37540: LD_ADDR_VAR 0 17
37544: PUSH
37545: LD_VAR 0 5
37549: PPUSH
37550: LD_INT 22
37552: PUSH
37553: LD_VAR 0 13
37557: PPUSH
37558: CALL_OW 255
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: PUSH
37567: LD_INT 2
37569: PUSH
37570: LD_INT 30
37572: PUSH
37573: LD_INT 0
37575: PUSH
37576: EMPTY
37577: LIST
37578: LIST
37579: PUSH
37580: LD_INT 30
37582: PUSH
37583: LD_INT 1
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: LIST
37594: PUSH
37595: EMPTY
37596: LIST
37597: LIST
37598: PPUSH
37599: CALL_OW 72
37603: ST_TO_ADDR
// for i = 1 to hexes do
37604: LD_ADDR_VAR 0 9
37608: PUSH
37609: DOUBLE
37610: LD_INT 1
37612: DEC
37613: ST_TO_ADDR
37614: LD_VAR 0 14
37618: PUSH
37619: FOR_TO
37620: IFFALSE 38296
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37622: LD_ADDR_VAR 0 13
37626: PUSH
37627: LD_VAR 0 14
37631: PUSH
37632: LD_VAR 0 9
37636: ARRAY
37637: PUSH
37638: LD_INT 1
37640: ARRAY
37641: PPUSH
37642: LD_VAR 0 14
37646: PUSH
37647: LD_VAR 0 9
37651: ARRAY
37652: PUSH
37653: LD_INT 2
37655: ARRAY
37656: PPUSH
37657: CALL_OW 428
37661: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37662: LD_VAR 0 14
37666: PUSH
37667: LD_VAR 0 9
37671: ARRAY
37672: PUSH
37673: LD_INT 1
37675: ARRAY
37676: PPUSH
37677: LD_VAR 0 14
37681: PUSH
37682: LD_VAR 0 9
37686: ARRAY
37687: PUSH
37688: LD_INT 2
37690: ARRAY
37691: PPUSH
37692: CALL_OW 351
37696: PUSH
37697: LD_VAR 0 14
37701: PUSH
37702: LD_VAR 0 9
37706: ARRAY
37707: PUSH
37708: LD_INT 1
37710: ARRAY
37711: PPUSH
37712: LD_VAR 0 14
37716: PUSH
37717: LD_VAR 0 9
37721: ARRAY
37722: PUSH
37723: LD_INT 2
37725: ARRAY
37726: PPUSH
37727: CALL_OW 488
37731: NOT
37732: OR
37733: PUSH
37734: LD_VAR 0 13
37738: PPUSH
37739: CALL_OW 247
37743: PUSH
37744: LD_INT 3
37746: EQUAL
37747: OR
37748: IFFALSE 37754
// exit ;
37750: POP
37751: POP
37752: GO 38298
// if not tmp then
37754: LD_VAR 0 13
37758: NOT
37759: IFFALSE 37763
// continue ;
37761: GO 37619
// result := true ;
37763: LD_ADDR_VAR 0 8
37767: PUSH
37768: LD_INT 1
37770: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
37771: LD_VAR 0 6
37775: PUSH
37776: LD_VAR 0 13
37780: PPUSH
37781: CALL_OW 247
37785: PUSH
37786: LD_INT 2
37788: EQUAL
37789: AND
37790: PUSH
37791: LD_VAR 0 13
37795: PPUSH
37796: CALL_OW 263
37800: PUSH
37801: LD_INT 1
37803: EQUAL
37804: AND
37805: IFFALSE 37969
// begin if IsDrivenBy ( tmp ) then
37807: LD_VAR 0 13
37811: PPUSH
37812: CALL_OW 311
37816: IFFALSE 37820
// continue ;
37818: GO 37619
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
37820: LD_VAR 0 6
37824: PPUSH
37825: LD_INT 3
37827: PUSH
37828: LD_INT 60
37830: PUSH
37831: EMPTY
37832: LIST
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: PUSH
37838: LD_INT 3
37840: PUSH
37841: LD_INT 55
37843: PUSH
37844: EMPTY
37845: LIST
37846: PUSH
37847: EMPTY
37848: LIST
37849: LIST
37850: PUSH
37851: EMPTY
37852: LIST
37853: LIST
37854: PPUSH
37855: CALL_OW 72
37859: IFFALSE 37967
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
37861: LD_ADDR_VAR 0 18
37865: PUSH
37866: LD_VAR 0 6
37870: PPUSH
37871: LD_INT 3
37873: PUSH
37874: LD_INT 60
37876: PUSH
37877: EMPTY
37878: LIST
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: PUSH
37884: LD_INT 3
37886: PUSH
37887: LD_INT 55
37889: PUSH
37890: EMPTY
37891: LIST
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: PUSH
37897: EMPTY
37898: LIST
37899: LIST
37900: PPUSH
37901: CALL_OW 72
37905: PUSH
37906: LD_INT 1
37908: ARRAY
37909: ST_TO_ADDR
// if IsInUnit ( driver ) then
37910: LD_VAR 0 18
37914: PPUSH
37915: CALL_OW 310
37919: IFFALSE 37930
// ComExit ( driver ) ;
37921: LD_VAR 0 18
37925: PPUSH
37926: CALL 62719 0 1
// AddComEnterUnit ( driver , tmp ) ;
37930: LD_VAR 0 18
37934: PPUSH
37935: LD_VAR 0 13
37939: PPUSH
37940: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
37944: LD_VAR 0 18
37948: PPUSH
37949: LD_VAR 0 7
37953: PPUSH
37954: CALL_OW 173
// AddComExitVehicle ( driver ) ;
37958: LD_VAR 0 18
37962: PPUSH
37963: CALL_OW 181
// end ; continue ;
37967: GO 37619
// end ; if not cleaners or not tmp in cleaners then
37969: LD_VAR 0 6
37973: NOT
37974: PUSH
37975: LD_VAR 0 13
37979: PUSH
37980: LD_VAR 0 6
37984: IN
37985: NOT
37986: OR
37987: IFFALSE 38294
// begin if dep then
37989: LD_VAR 0 17
37993: IFFALSE 38129
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
37995: LD_ADDR_VAR 0 16
37999: PUSH
38000: LD_VAR 0 17
38004: PUSH
38005: LD_INT 1
38007: ARRAY
38008: PPUSH
38009: CALL_OW 250
38013: PPUSH
38014: LD_VAR 0 17
38018: PUSH
38019: LD_INT 1
38021: ARRAY
38022: PPUSH
38023: CALL_OW 254
38027: PPUSH
38028: LD_INT 5
38030: PPUSH
38031: CALL_OW 272
38035: PUSH
38036: LD_VAR 0 17
38040: PUSH
38041: LD_INT 1
38043: ARRAY
38044: PPUSH
38045: CALL_OW 251
38049: PPUSH
38050: LD_VAR 0 17
38054: PUSH
38055: LD_INT 1
38057: ARRAY
38058: PPUSH
38059: CALL_OW 254
38063: PPUSH
38064: LD_INT 5
38066: PPUSH
38067: CALL_OW 273
38071: PUSH
38072: EMPTY
38073: LIST
38074: LIST
38075: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
38076: LD_VAR 0 16
38080: PUSH
38081: LD_INT 1
38083: ARRAY
38084: PPUSH
38085: LD_VAR 0 16
38089: PUSH
38090: LD_INT 2
38092: ARRAY
38093: PPUSH
38094: CALL_OW 488
38098: IFFALSE 38129
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
38100: LD_VAR 0 13
38104: PPUSH
38105: LD_VAR 0 16
38109: PUSH
38110: LD_INT 1
38112: ARRAY
38113: PPUSH
38114: LD_VAR 0 16
38118: PUSH
38119: LD_INT 2
38121: ARRAY
38122: PPUSH
38123: CALL_OW 111
// continue ;
38127: GO 37619
// end ; end ; r := GetDir ( tmp ) ;
38129: LD_ADDR_VAR 0 15
38133: PUSH
38134: LD_VAR 0 13
38138: PPUSH
38139: CALL_OW 254
38143: ST_TO_ADDR
// if r = 5 then
38144: LD_VAR 0 15
38148: PUSH
38149: LD_INT 5
38151: EQUAL
38152: IFFALSE 38162
// r := 0 ;
38154: LD_ADDR_VAR 0 15
38158: PUSH
38159: LD_INT 0
38161: ST_TO_ADDR
// for j = r to 5 do
38162: LD_ADDR_VAR 0 10
38166: PUSH
38167: DOUBLE
38168: LD_VAR 0 15
38172: DEC
38173: ST_TO_ADDR
38174: LD_INT 5
38176: PUSH
38177: FOR_TO
38178: IFFALSE 38292
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
38180: LD_ADDR_VAR 0 11
38184: PUSH
38185: LD_VAR 0 13
38189: PPUSH
38190: CALL_OW 250
38194: PPUSH
38195: LD_VAR 0 10
38199: PPUSH
38200: LD_INT 2
38202: PPUSH
38203: CALL_OW 272
38207: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
38208: LD_ADDR_VAR 0 12
38212: PUSH
38213: LD_VAR 0 13
38217: PPUSH
38218: CALL_OW 251
38222: PPUSH
38223: LD_VAR 0 10
38227: PPUSH
38228: LD_INT 2
38230: PPUSH
38231: CALL_OW 273
38235: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
38236: LD_VAR 0 11
38240: PPUSH
38241: LD_VAR 0 12
38245: PPUSH
38246: CALL_OW 488
38250: PUSH
38251: LD_VAR 0 11
38255: PPUSH
38256: LD_VAR 0 12
38260: PPUSH
38261: CALL_OW 428
38265: NOT
38266: AND
38267: IFFALSE 38290
// begin ComMoveXY ( tmp , _x , _y ) ;
38269: LD_VAR 0 13
38273: PPUSH
38274: LD_VAR 0 11
38278: PPUSH
38279: LD_VAR 0 12
38283: PPUSH
38284: CALL_OW 111
// break ;
38288: GO 38292
// end ; end ;
38290: GO 38177
38292: POP
38293: POP
// end ; end ;
38294: GO 37619
38296: POP
38297: POP
// end ;
38298: LD_VAR 0 8
38302: RET
// export function BuildingTechInvented ( side , btype ) ; begin
38303: LD_INT 0
38305: PPUSH
// result := true ;
38306: LD_ADDR_VAR 0 3
38310: PUSH
38311: LD_INT 1
38313: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
38314: LD_VAR 0 2
38318: PUSH
38319: LD_INT 24
38321: DOUBLE
38322: EQUAL
38323: IFTRUE 38333
38325: LD_INT 33
38327: DOUBLE
38328: EQUAL
38329: IFTRUE 38333
38331: GO 38358
38333: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
38334: LD_ADDR_VAR 0 3
38338: PUSH
38339: LD_INT 32
38341: PPUSH
38342: LD_VAR 0 1
38346: PPUSH
38347: CALL_OW 321
38351: PUSH
38352: LD_INT 2
38354: EQUAL
38355: ST_TO_ADDR
38356: GO 38678
38358: LD_INT 20
38360: DOUBLE
38361: EQUAL
38362: IFTRUE 38366
38364: GO 38391
38366: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
38367: LD_ADDR_VAR 0 3
38371: PUSH
38372: LD_INT 6
38374: PPUSH
38375: LD_VAR 0 1
38379: PPUSH
38380: CALL_OW 321
38384: PUSH
38385: LD_INT 2
38387: EQUAL
38388: ST_TO_ADDR
38389: GO 38678
38391: LD_INT 22
38393: DOUBLE
38394: EQUAL
38395: IFTRUE 38405
38397: LD_INT 36
38399: DOUBLE
38400: EQUAL
38401: IFTRUE 38405
38403: GO 38430
38405: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
38406: LD_ADDR_VAR 0 3
38410: PUSH
38411: LD_INT 15
38413: PPUSH
38414: LD_VAR 0 1
38418: PPUSH
38419: CALL_OW 321
38423: PUSH
38424: LD_INT 2
38426: EQUAL
38427: ST_TO_ADDR
38428: GO 38678
38430: LD_INT 30
38432: DOUBLE
38433: EQUAL
38434: IFTRUE 38438
38436: GO 38463
38438: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
38439: LD_ADDR_VAR 0 3
38443: PUSH
38444: LD_INT 20
38446: PPUSH
38447: LD_VAR 0 1
38451: PPUSH
38452: CALL_OW 321
38456: PUSH
38457: LD_INT 2
38459: EQUAL
38460: ST_TO_ADDR
38461: GO 38678
38463: LD_INT 28
38465: DOUBLE
38466: EQUAL
38467: IFTRUE 38477
38469: LD_INT 21
38471: DOUBLE
38472: EQUAL
38473: IFTRUE 38477
38475: GO 38502
38477: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
38478: LD_ADDR_VAR 0 3
38482: PUSH
38483: LD_INT 21
38485: PPUSH
38486: LD_VAR 0 1
38490: PPUSH
38491: CALL_OW 321
38495: PUSH
38496: LD_INT 2
38498: EQUAL
38499: ST_TO_ADDR
38500: GO 38678
38502: LD_INT 16
38504: DOUBLE
38505: EQUAL
38506: IFTRUE 38510
38508: GO 38537
38510: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
38511: LD_ADDR_VAR 0 3
38515: PUSH
38516: LD_EXP 108
38520: PPUSH
38521: LD_VAR 0 1
38525: PPUSH
38526: CALL_OW 321
38530: PUSH
38531: LD_INT 2
38533: EQUAL
38534: ST_TO_ADDR
38535: GO 38678
38537: LD_INT 19
38539: DOUBLE
38540: EQUAL
38541: IFTRUE 38551
38543: LD_INT 23
38545: DOUBLE
38546: EQUAL
38547: IFTRUE 38551
38549: GO 38578
38551: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
38552: LD_ADDR_VAR 0 3
38556: PUSH
38557: LD_EXP 107
38561: PPUSH
38562: LD_VAR 0 1
38566: PPUSH
38567: CALL_OW 321
38571: PUSH
38572: LD_INT 2
38574: EQUAL
38575: ST_TO_ADDR
38576: GO 38678
38578: LD_INT 17
38580: DOUBLE
38581: EQUAL
38582: IFTRUE 38586
38584: GO 38611
38586: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
38587: LD_ADDR_VAR 0 3
38591: PUSH
38592: LD_INT 39
38594: PPUSH
38595: LD_VAR 0 1
38599: PPUSH
38600: CALL_OW 321
38604: PUSH
38605: LD_INT 2
38607: EQUAL
38608: ST_TO_ADDR
38609: GO 38678
38611: LD_INT 18
38613: DOUBLE
38614: EQUAL
38615: IFTRUE 38619
38617: GO 38644
38619: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
38620: LD_ADDR_VAR 0 3
38624: PUSH
38625: LD_INT 40
38627: PPUSH
38628: LD_VAR 0 1
38632: PPUSH
38633: CALL_OW 321
38637: PUSH
38638: LD_INT 2
38640: EQUAL
38641: ST_TO_ADDR
38642: GO 38678
38644: LD_INT 27
38646: DOUBLE
38647: EQUAL
38648: IFTRUE 38652
38650: GO 38677
38652: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
38653: LD_ADDR_VAR 0 3
38657: PUSH
38658: LD_INT 35
38660: PPUSH
38661: LD_VAR 0 1
38665: PPUSH
38666: CALL_OW 321
38670: PUSH
38671: LD_INT 2
38673: EQUAL
38674: ST_TO_ADDR
38675: GO 38678
38677: POP
// end ;
38678: LD_VAR 0 3
38682: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
38683: LD_INT 0
38685: PPUSH
38686: PPUSH
38687: PPUSH
38688: PPUSH
38689: PPUSH
38690: PPUSH
38691: PPUSH
38692: PPUSH
38693: PPUSH
38694: PPUSH
38695: PPUSH
// result := false ;
38696: LD_ADDR_VAR 0 6
38700: PUSH
38701: LD_INT 0
38703: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
38704: LD_VAR 0 1
38708: NOT
38709: PUSH
38710: LD_VAR 0 1
38714: PPUSH
38715: CALL_OW 266
38719: PUSH
38720: LD_INT 0
38722: PUSH
38723: LD_INT 1
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: IN
38730: NOT
38731: OR
38732: PUSH
38733: LD_VAR 0 2
38737: NOT
38738: OR
38739: PUSH
38740: LD_VAR 0 5
38744: PUSH
38745: LD_INT 0
38747: PUSH
38748: LD_INT 1
38750: PUSH
38751: LD_INT 2
38753: PUSH
38754: LD_INT 3
38756: PUSH
38757: LD_INT 4
38759: PUSH
38760: LD_INT 5
38762: PUSH
38763: EMPTY
38764: LIST
38765: LIST
38766: LIST
38767: LIST
38768: LIST
38769: LIST
38770: IN
38771: NOT
38772: OR
38773: PUSH
38774: LD_VAR 0 3
38778: PPUSH
38779: LD_VAR 0 4
38783: PPUSH
38784: CALL_OW 488
38788: NOT
38789: OR
38790: IFFALSE 38794
// exit ;
38792: GO 39530
// side := GetSide ( depot ) ;
38794: LD_ADDR_VAR 0 9
38798: PUSH
38799: LD_VAR 0 1
38803: PPUSH
38804: CALL_OW 255
38808: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
38809: LD_VAR 0 9
38813: PPUSH
38814: LD_VAR 0 2
38818: PPUSH
38819: CALL 38303 0 2
38823: NOT
38824: IFFALSE 38828
// exit ;
38826: GO 39530
// pom := GetBase ( depot ) ;
38828: LD_ADDR_VAR 0 10
38832: PUSH
38833: LD_VAR 0 1
38837: PPUSH
38838: CALL_OW 274
38842: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
38843: LD_ADDR_VAR 0 11
38847: PUSH
38848: LD_VAR 0 2
38852: PPUSH
38853: LD_VAR 0 1
38857: PPUSH
38858: CALL_OW 248
38862: PPUSH
38863: CALL_OW 450
38867: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
38868: LD_VAR 0 10
38872: PPUSH
38873: LD_INT 1
38875: PPUSH
38876: CALL_OW 275
38880: PUSH
38881: LD_VAR 0 11
38885: PUSH
38886: LD_INT 1
38888: ARRAY
38889: GREATEREQUAL
38890: PUSH
38891: LD_VAR 0 10
38895: PPUSH
38896: LD_INT 2
38898: PPUSH
38899: CALL_OW 275
38903: PUSH
38904: LD_VAR 0 11
38908: PUSH
38909: LD_INT 2
38911: ARRAY
38912: GREATEREQUAL
38913: AND
38914: PUSH
38915: LD_VAR 0 10
38919: PPUSH
38920: LD_INT 3
38922: PPUSH
38923: CALL_OW 275
38927: PUSH
38928: LD_VAR 0 11
38932: PUSH
38933: LD_INT 3
38935: ARRAY
38936: GREATEREQUAL
38937: AND
38938: NOT
38939: IFFALSE 38943
// exit ;
38941: GO 39530
// if GetBType ( depot ) = b_depot then
38943: LD_VAR 0 1
38947: PPUSH
38948: CALL_OW 266
38952: PUSH
38953: LD_INT 0
38955: EQUAL
38956: IFFALSE 38968
// dist := 28 else
38958: LD_ADDR_VAR 0 14
38962: PUSH
38963: LD_INT 28
38965: ST_TO_ADDR
38966: GO 38976
// dist := 36 ;
38968: LD_ADDR_VAR 0 14
38972: PUSH
38973: LD_INT 36
38975: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
38976: LD_VAR 0 1
38980: PPUSH
38981: LD_VAR 0 3
38985: PPUSH
38986: LD_VAR 0 4
38990: PPUSH
38991: CALL_OW 297
38995: PUSH
38996: LD_VAR 0 14
39000: GREATER
39001: IFFALSE 39005
// exit ;
39003: GO 39530
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
39005: LD_ADDR_VAR 0 12
39009: PUSH
39010: LD_VAR 0 2
39014: PPUSH
39015: LD_VAR 0 3
39019: PPUSH
39020: LD_VAR 0 4
39024: PPUSH
39025: LD_VAR 0 5
39029: PPUSH
39030: LD_VAR 0 1
39034: PPUSH
39035: CALL_OW 248
39039: PPUSH
39040: LD_INT 0
39042: PPUSH
39043: CALL 39535 0 6
39047: ST_TO_ADDR
// if not hexes then
39048: LD_VAR 0 12
39052: NOT
39053: IFFALSE 39057
// exit ;
39055: GO 39530
// hex := GetHexInfo ( x , y ) ;
39057: LD_ADDR_VAR 0 15
39061: PUSH
39062: LD_VAR 0 3
39066: PPUSH
39067: LD_VAR 0 4
39071: PPUSH
39072: CALL_OW 546
39076: ST_TO_ADDR
// if hex [ 1 ] then
39077: LD_VAR 0 15
39081: PUSH
39082: LD_INT 1
39084: ARRAY
39085: IFFALSE 39089
// exit ;
39087: GO 39530
// height := hex [ 2 ] ;
39089: LD_ADDR_VAR 0 13
39093: PUSH
39094: LD_VAR 0 15
39098: PUSH
39099: LD_INT 2
39101: ARRAY
39102: ST_TO_ADDR
// for i = 1 to hexes do
39103: LD_ADDR_VAR 0 7
39107: PUSH
39108: DOUBLE
39109: LD_INT 1
39111: DEC
39112: ST_TO_ADDR
39113: LD_VAR 0 12
39117: PUSH
39118: FOR_TO
39119: IFFALSE 39449
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
39121: LD_VAR 0 12
39125: PUSH
39126: LD_VAR 0 7
39130: ARRAY
39131: PUSH
39132: LD_INT 1
39134: ARRAY
39135: PPUSH
39136: LD_VAR 0 12
39140: PUSH
39141: LD_VAR 0 7
39145: ARRAY
39146: PUSH
39147: LD_INT 2
39149: ARRAY
39150: PPUSH
39151: CALL_OW 488
39155: NOT
39156: PUSH
39157: LD_VAR 0 12
39161: PUSH
39162: LD_VAR 0 7
39166: ARRAY
39167: PUSH
39168: LD_INT 1
39170: ARRAY
39171: PPUSH
39172: LD_VAR 0 12
39176: PUSH
39177: LD_VAR 0 7
39181: ARRAY
39182: PUSH
39183: LD_INT 2
39185: ARRAY
39186: PPUSH
39187: CALL_OW 428
39191: PUSH
39192: LD_INT 0
39194: GREATER
39195: OR
39196: PUSH
39197: LD_VAR 0 12
39201: PUSH
39202: LD_VAR 0 7
39206: ARRAY
39207: PUSH
39208: LD_INT 1
39210: ARRAY
39211: PPUSH
39212: LD_VAR 0 12
39216: PUSH
39217: LD_VAR 0 7
39221: ARRAY
39222: PUSH
39223: LD_INT 2
39225: ARRAY
39226: PPUSH
39227: CALL_OW 351
39231: OR
39232: IFFALSE 39238
// exit ;
39234: POP
39235: POP
39236: GO 39530
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39238: LD_ADDR_VAR 0 8
39242: PUSH
39243: LD_VAR 0 12
39247: PUSH
39248: LD_VAR 0 7
39252: ARRAY
39253: PUSH
39254: LD_INT 1
39256: ARRAY
39257: PPUSH
39258: LD_VAR 0 12
39262: PUSH
39263: LD_VAR 0 7
39267: ARRAY
39268: PUSH
39269: LD_INT 2
39271: ARRAY
39272: PPUSH
39273: CALL_OW 546
39277: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
39278: LD_VAR 0 8
39282: PUSH
39283: LD_INT 1
39285: ARRAY
39286: PUSH
39287: LD_VAR 0 8
39291: PUSH
39292: LD_INT 2
39294: ARRAY
39295: PUSH
39296: LD_VAR 0 13
39300: PUSH
39301: LD_INT 2
39303: PLUS
39304: GREATER
39305: OR
39306: PUSH
39307: LD_VAR 0 8
39311: PUSH
39312: LD_INT 2
39314: ARRAY
39315: PUSH
39316: LD_VAR 0 13
39320: PUSH
39321: LD_INT 2
39323: MINUS
39324: LESS
39325: OR
39326: PUSH
39327: LD_VAR 0 8
39331: PUSH
39332: LD_INT 3
39334: ARRAY
39335: PUSH
39336: LD_INT 0
39338: PUSH
39339: LD_INT 8
39341: PUSH
39342: LD_INT 9
39344: PUSH
39345: LD_INT 10
39347: PUSH
39348: LD_INT 11
39350: PUSH
39351: LD_INT 12
39353: PUSH
39354: LD_INT 13
39356: PUSH
39357: LD_INT 16
39359: PUSH
39360: LD_INT 17
39362: PUSH
39363: LD_INT 18
39365: PUSH
39366: LD_INT 19
39368: PUSH
39369: LD_INT 20
39371: PUSH
39372: LD_INT 21
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: LIST
39379: LIST
39380: LIST
39381: LIST
39382: LIST
39383: LIST
39384: LIST
39385: LIST
39386: LIST
39387: LIST
39388: LIST
39389: IN
39390: NOT
39391: OR
39392: PUSH
39393: LD_VAR 0 8
39397: PUSH
39398: LD_INT 5
39400: ARRAY
39401: NOT
39402: OR
39403: PUSH
39404: LD_VAR 0 8
39408: PUSH
39409: LD_INT 6
39411: ARRAY
39412: PUSH
39413: LD_INT 1
39415: PUSH
39416: LD_INT 2
39418: PUSH
39419: LD_INT 7
39421: PUSH
39422: LD_INT 9
39424: PUSH
39425: LD_INT 10
39427: PUSH
39428: LD_INT 11
39430: PUSH
39431: EMPTY
39432: LIST
39433: LIST
39434: LIST
39435: LIST
39436: LIST
39437: LIST
39438: IN
39439: NOT
39440: OR
39441: IFFALSE 39447
// exit ;
39443: POP
39444: POP
39445: GO 39530
// end ;
39447: GO 39118
39449: POP
39450: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39451: LD_VAR 0 9
39455: PPUSH
39456: LD_VAR 0 3
39460: PPUSH
39461: LD_VAR 0 4
39465: PPUSH
39466: LD_INT 20
39468: PPUSH
39469: CALL 31476 0 4
39473: PUSH
39474: LD_INT 4
39476: ARRAY
39477: IFFALSE 39481
// exit ;
39479: GO 39530
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
39481: LD_VAR 0 2
39485: PUSH
39486: LD_INT 29
39488: PUSH
39489: LD_INT 30
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: IN
39496: PUSH
39497: LD_VAR 0 3
39501: PPUSH
39502: LD_VAR 0 4
39506: PPUSH
39507: LD_VAR 0 9
39511: PPUSH
39512: CALL_OW 440
39516: NOT
39517: AND
39518: IFFALSE 39522
// exit ;
39520: GO 39530
// result := true ;
39522: LD_ADDR_VAR 0 6
39526: PUSH
39527: LD_INT 1
39529: ST_TO_ADDR
// end ;
39530: LD_VAR 0 6
39534: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
39535: LD_INT 0
39537: PPUSH
39538: PPUSH
39539: PPUSH
39540: PPUSH
39541: PPUSH
39542: PPUSH
39543: PPUSH
39544: PPUSH
39545: PPUSH
39546: PPUSH
39547: PPUSH
39548: PPUSH
39549: PPUSH
39550: PPUSH
39551: PPUSH
39552: PPUSH
39553: PPUSH
39554: PPUSH
39555: PPUSH
39556: PPUSH
39557: PPUSH
39558: PPUSH
39559: PPUSH
39560: PPUSH
39561: PPUSH
39562: PPUSH
39563: PPUSH
39564: PPUSH
39565: PPUSH
39566: PPUSH
39567: PPUSH
39568: PPUSH
39569: PPUSH
39570: PPUSH
39571: PPUSH
39572: PPUSH
39573: PPUSH
39574: PPUSH
39575: PPUSH
39576: PPUSH
39577: PPUSH
39578: PPUSH
39579: PPUSH
39580: PPUSH
39581: PPUSH
39582: PPUSH
39583: PPUSH
39584: PPUSH
39585: PPUSH
39586: PPUSH
39587: PPUSH
39588: PPUSH
39589: PPUSH
39590: PPUSH
39591: PPUSH
39592: PPUSH
39593: PPUSH
39594: PPUSH
// result = [ ] ;
39595: LD_ADDR_VAR 0 7
39599: PUSH
39600: EMPTY
39601: ST_TO_ADDR
// temp_list = [ ] ;
39602: LD_ADDR_VAR 0 9
39606: PUSH
39607: EMPTY
39608: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
39609: LD_VAR 0 4
39613: PUSH
39614: LD_INT 0
39616: PUSH
39617: LD_INT 1
39619: PUSH
39620: LD_INT 2
39622: PUSH
39623: LD_INT 3
39625: PUSH
39626: LD_INT 4
39628: PUSH
39629: LD_INT 5
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: LIST
39636: LIST
39637: LIST
39638: LIST
39639: IN
39640: NOT
39641: PUSH
39642: LD_VAR 0 1
39646: PUSH
39647: LD_INT 0
39649: PUSH
39650: LD_INT 1
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: IN
39657: PUSH
39658: LD_VAR 0 5
39662: PUSH
39663: LD_INT 1
39665: PUSH
39666: LD_INT 2
39668: PUSH
39669: LD_INT 3
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: LIST
39676: IN
39677: NOT
39678: AND
39679: OR
39680: IFFALSE 39684
// exit ;
39682: GO 58075
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
39684: LD_VAR 0 1
39688: PUSH
39689: LD_INT 6
39691: PUSH
39692: LD_INT 7
39694: PUSH
39695: LD_INT 8
39697: PUSH
39698: LD_INT 13
39700: PUSH
39701: LD_INT 12
39703: PUSH
39704: LD_INT 15
39706: PUSH
39707: LD_INT 11
39709: PUSH
39710: LD_INT 14
39712: PUSH
39713: LD_INT 10
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: LIST
39720: LIST
39721: LIST
39722: LIST
39723: LIST
39724: LIST
39725: LIST
39726: IN
39727: IFFALSE 39737
// btype = b_lab ;
39729: LD_ADDR_VAR 0 1
39733: PUSH
39734: LD_INT 6
39736: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
39737: LD_VAR 0 6
39741: PUSH
39742: LD_INT 0
39744: PUSH
39745: LD_INT 1
39747: PUSH
39748: LD_INT 2
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: LIST
39755: IN
39756: NOT
39757: PUSH
39758: LD_VAR 0 1
39762: PUSH
39763: LD_INT 0
39765: PUSH
39766: LD_INT 1
39768: PUSH
39769: LD_INT 2
39771: PUSH
39772: LD_INT 3
39774: PUSH
39775: LD_INT 6
39777: PUSH
39778: LD_INT 36
39780: PUSH
39781: LD_INT 4
39783: PUSH
39784: LD_INT 5
39786: PUSH
39787: LD_INT 31
39789: PUSH
39790: LD_INT 32
39792: PUSH
39793: LD_INT 33
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: LIST
39800: LIST
39801: LIST
39802: LIST
39803: LIST
39804: LIST
39805: LIST
39806: LIST
39807: LIST
39808: IN
39809: NOT
39810: PUSH
39811: LD_VAR 0 6
39815: PUSH
39816: LD_INT 1
39818: EQUAL
39819: AND
39820: OR
39821: PUSH
39822: LD_VAR 0 1
39826: PUSH
39827: LD_INT 2
39829: PUSH
39830: LD_INT 3
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: IN
39837: NOT
39838: PUSH
39839: LD_VAR 0 6
39843: PUSH
39844: LD_INT 2
39846: EQUAL
39847: AND
39848: OR
39849: IFFALSE 39859
// mode = 0 ;
39851: LD_ADDR_VAR 0 6
39855: PUSH
39856: LD_INT 0
39858: ST_TO_ADDR
// case mode of 0 :
39859: LD_VAR 0 6
39863: PUSH
39864: LD_INT 0
39866: DOUBLE
39867: EQUAL
39868: IFTRUE 39872
39870: GO 51325
39872: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39873: LD_ADDR_VAR 0 11
39877: PUSH
39878: LD_INT 0
39880: PUSH
39881: LD_INT 0
39883: PUSH
39884: EMPTY
39885: LIST
39886: LIST
39887: PUSH
39888: LD_INT 0
39890: PUSH
39891: LD_INT 1
39893: NEG
39894: PUSH
39895: EMPTY
39896: LIST
39897: LIST
39898: PUSH
39899: LD_INT 1
39901: PUSH
39902: LD_INT 0
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: PUSH
39909: LD_INT 1
39911: PUSH
39912: LD_INT 1
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: PUSH
39919: LD_INT 0
39921: PUSH
39922: LD_INT 1
39924: PUSH
39925: EMPTY
39926: LIST
39927: LIST
39928: PUSH
39929: LD_INT 1
39931: NEG
39932: PUSH
39933: LD_INT 0
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: PUSH
39940: LD_INT 1
39942: NEG
39943: PUSH
39944: LD_INT 1
39946: NEG
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: PUSH
39952: LD_INT 1
39954: NEG
39955: PUSH
39956: LD_INT 2
39958: NEG
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: PUSH
39964: LD_INT 0
39966: PUSH
39967: LD_INT 2
39969: NEG
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: PUSH
39975: LD_INT 1
39977: PUSH
39978: LD_INT 1
39980: NEG
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PUSH
39986: LD_INT 1
39988: PUSH
39989: LD_INT 2
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: PUSH
39996: LD_INT 0
39998: PUSH
39999: LD_INT 2
40001: PUSH
40002: EMPTY
40003: LIST
40004: LIST
40005: PUSH
40006: LD_INT 1
40008: NEG
40009: PUSH
40010: LD_INT 1
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: PUSH
40017: LD_INT 1
40019: PUSH
40020: LD_INT 3
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: PUSH
40027: LD_INT 0
40029: PUSH
40030: LD_INT 3
40032: PUSH
40033: EMPTY
40034: LIST
40035: LIST
40036: PUSH
40037: LD_INT 1
40039: NEG
40040: PUSH
40041: LD_INT 2
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40066: LD_ADDR_VAR 0 12
40070: PUSH
40071: LD_INT 0
40073: PUSH
40074: LD_INT 0
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: PUSH
40081: LD_INT 0
40083: PUSH
40084: LD_INT 1
40086: NEG
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: PUSH
40092: LD_INT 1
40094: PUSH
40095: LD_INT 0
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: PUSH
40102: LD_INT 1
40104: PUSH
40105: LD_INT 1
40107: PUSH
40108: EMPTY
40109: LIST
40110: LIST
40111: PUSH
40112: LD_INT 0
40114: PUSH
40115: LD_INT 1
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: LD_INT 1
40124: NEG
40125: PUSH
40126: LD_INT 0
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: PUSH
40133: LD_INT 1
40135: NEG
40136: PUSH
40137: LD_INT 1
40139: NEG
40140: PUSH
40141: EMPTY
40142: LIST
40143: LIST
40144: PUSH
40145: LD_INT 1
40147: PUSH
40148: LD_INT 1
40150: NEG
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: PUSH
40156: LD_INT 2
40158: PUSH
40159: LD_INT 0
40161: PUSH
40162: EMPTY
40163: LIST
40164: LIST
40165: PUSH
40166: LD_INT 2
40168: PUSH
40169: LD_INT 1
40171: PUSH
40172: EMPTY
40173: LIST
40174: LIST
40175: PUSH
40176: LD_INT 1
40178: NEG
40179: PUSH
40180: LD_INT 1
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: PUSH
40187: LD_INT 2
40189: NEG
40190: PUSH
40191: LD_INT 0
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: PUSH
40198: LD_INT 2
40200: NEG
40201: PUSH
40202: LD_INT 1
40204: NEG
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: PUSH
40210: LD_INT 2
40212: NEG
40213: PUSH
40214: LD_INT 1
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: LD_INT 3
40223: NEG
40224: PUSH
40225: LD_INT 0
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PUSH
40232: LD_INT 3
40234: NEG
40235: PUSH
40236: LD_INT 1
40238: NEG
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: LIST
40258: LIST
40259: LIST
40260: LIST
40261: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40262: LD_ADDR_VAR 0 13
40266: PUSH
40267: LD_INT 0
40269: PUSH
40270: LD_INT 0
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: PUSH
40277: LD_INT 0
40279: PUSH
40280: LD_INT 1
40282: NEG
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: PUSH
40288: LD_INT 1
40290: PUSH
40291: LD_INT 0
40293: PUSH
40294: EMPTY
40295: LIST
40296: LIST
40297: PUSH
40298: LD_INT 1
40300: PUSH
40301: LD_INT 1
40303: PUSH
40304: EMPTY
40305: LIST
40306: LIST
40307: PUSH
40308: LD_INT 0
40310: PUSH
40311: LD_INT 1
40313: PUSH
40314: EMPTY
40315: LIST
40316: LIST
40317: PUSH
40318: LD_INT 1
40320: NEG
40321: PUSH
40322: LD_INT 0
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: PUSH
40329: LD_INT 1
40331: NEG
40332: PUSH
40333: LD_INT 1
40335: NEG
40336: PUSH
40337: EMPTY
40338: LIST
40339: LIST
40340: PUSH
40341: LD_INT 1
40343: NEG
40344: PUSH
40345: LD_INT 2
40347: NEG
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PUSH
40353: LD_INT 2
40355: PUSH
40356: LD_INT 1
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 2
40365: PUSH
40366: LD_INT 2
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PUSH
40373: LD_INT 1
40375: PUSH
40376: LD_INT 2
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 2
40385: NEG
40386: PUSH
40387: LD_INT 1
40389: NEG
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: PUSH
40395: LD_INT 2
40397: NEG
40398: PUSH
40399: LD_INT 2
40401: NEG
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: PUSH
40407: LD_INT 2
40409: NEG
40410: PUSH
40411: LD_INT 3
40413: NEG
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: PUSH
40419: LD_INT 3
40421: NEG
40422: PUSH
40423: LD_INT 2
40425: NEG
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PUSH
40431: LD_INT 3
40433: NEG
40434: PUSH
40435: LD_INT 3
40437: NEG
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: LIST
40447: LIST
40448: LIST
40449: LIST
40450: LIST
40451: LIST
40452: LIST
40453: LIST
40454: LIST
40455: LIST
40456: LIST
40457: LIST
40458: LIST
40459: LIST
40460: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40461: LD_ADDR_VAR 0 14
40465: PUSH
40466: LD_INT 0
40468: PUSH
40469: LD_INT 0
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: LD_INT 0
40478: PUSH
40479: LD_INT 1
40481: NEG
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: PUSH
40487: LD_INT 1
40489: PUSH
40490: LD_INT 0
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: PUSH
40497: LD_INT 1
40499: PUSH
40500: LD_INT 1
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: LD_INT 0
40509: PUSH
40510: LD_INT 1
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: PUSH
40517: LD_INT 1
40519: NEG
40520: PUSH
40521: LD_INT 0
40523: PUSH
40524: EMPTY
40525: LIST
40526: LIST
40527: PUSH
40528: LD_INT 1
40530: NEG
40531: PUSH
40532: LD_INT 1
40534: NEG
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: PUSH
40540: LD_INT 1
40542: NEG
40543: PUSH
40544: LD_INT 2
40546: NEG
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: PUSH
40552: LD_INT 0
40554: PUSH
40555: LD_INT 2
40557: NEG
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: LD_INT 1
40565: PUSH
40566: LD_INT 1
40568: NEG
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 1
40576: PUSH
40577: LD_INT 2
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: LD_INT 0
40586: PUSH
40587: LD_INT 2
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: PUSH
40594: LD_INT 1
40596: NEG
40597: PUSH
40598: LD_INT 1
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: PUSH
40605: LD_INT 1
40607: NEG
40608: PUSH
40609: LD_INT 3
40611: NEG
40612: PUSH
40613: EMPTY
40614: LIST
40615: LIST
40616: PUSH
40617: LD_INT 0
40619: PUSH
40620: LD_INT 3
40622: NEG
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: LD_INT 1
40630: PUSH
40631: LD_INT 2
40633: NEG
40634: PUSH
40635: EMPTY
40636: LIST
40637: LIST
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: LIST
40647: LIST
40648: LIST
40649: LIST
40650: LIST
40651: LIST
40652: LIST
40653: LIST
40654: LIST
40655: LIST
40656: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40657: LD_ADDR_VAR 0 15
40661: PUSH
40662: LD_INT 0
40664: PUSH
40665: LD_INT 0
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: PUSH
40672: LD_INT 0
40674: PUSH
40675: LD_INT 1
40677: NEG
40678: PUSH
40679: EMPTY
40680: LIST
40681: LIST
40682: PUSH
40683: LD_INT 1
40685: PUSH
40686: LD_INT 0
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: PUSH
40693: LD_INT 1
40695: PUSH
40696: LD_INT 1
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: PUSH
40703: LD_INT 0
40705: PUSH
40706: LD_INT 1
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: LD_INT 1
40715: NEG
40716: PUSH
40717: LD_INT 0
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: LD_INT 1
40726: NEG
40727: PUSH
40728: LD_INT 1
40730: NEG
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: LD_INT 1
40738: PUSH
40739: LD_INT 1
40741: NEG
40742: PUSH
40743: EMPTY
40744: LIST
40745: LIST
40746: PUSH
40747: LD_INT 2
40749: PUSH
40750: LD_INT 0
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: LD_INT 2
40759: PUSH
40760: LD_INT 1
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: PUSH
40767: LD_INT 1
40769: NEG
40770: PUSH
40771: LD_INT 1
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: LD_INT 2
40780: NEG
40781: PUSH
40782: LD_INT 0
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: PUSH
40789: LD_INT 2
40791: NEG
40792: PUSH
40793: LD_INT 1
40795: NEG
40796: PUSH
40797: EMPTY
40798: LIST
40799: LIST
40800: PUSH
40801: LD_INT 2
40803: PUSH
40804: LD_INT 1
40806: NEG
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: PUSH
40812: LD_INT 3
40814: PUSH
40815: LD_INT 0
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PUSH
40822: LD_INT 3
40824: PUSH
40825: LD_INT 1
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: LIST
40844: LIST
40845: LIST
40846: LIST
40847: LIST
40848: LIST
40849: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40850: LD_ADDR_VAR 0 16
40854: PUSH
40855: LD_INT 0
40857: PUSH
40858: LD_INT 0
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PUSH
40865: LD_INT 0
40867: PUSH
40868: LD_INT 1
40870: NEG
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PUSH
40876: LD_INT 1
40878: PUSH
40879: LD_INT 0
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: PUSH
40886: LD_INT 1
40888: PUSH
40889: LD_INT 1
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: PUSH
40896: LD_INT 0
40898: PUSH
40899: LD_INT 1
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: PUSH
40906: LD_INT 1
40908: NEG
40909: PUSH
40910: LD_INT 0
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 1
40919: NEG
40920: PUSH
40921: LD_INT 1
40923: NEG
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: PUSH
40929: LD_INT 1
40931: NEG
40932: PUSH
40933: LD_INT 2
40935: NEG
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: LD_INT 2
40943: PUSH
40944: LD_INT 1
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PUSH
40951: LD_INT 2
40953: PUSH
40954: LD_INT 2
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: PUSH
40961: LD_INT 1
40963: PUSH
40964: LD_INT 2
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: PUSH
40971: LD_INT 2
40973: NEG
40974: PUSH
40975: LD_INT 1
40977: NEG
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: PUSH
40983: LD_INT 2
40985: NEG
40986: PUSH
40987: LD_INT 2
40989: NEG
40990: PUSH
40991: EMPTY
40992: LIST
40993: LIST
40994: PUSH
40995: LD_INT 3
40997: PUSH
40998: LD_INT 2
41000: PUSH
41001: EMPTY
41002: LIST
41003: LIST
41004: PUSH
41005: LD_INT 3
41007: PUSH
41008: LD_INT 3
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PUSH
41015: LD_INT 2
41017: PUSH
41018: LD_INT 3
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: LIST
41029: LIST
41030: LIST
41031: LIST
41032: LIST
41033: LIST
41034: LIST
41035: LIST
41036: LIST
41037: LIST
41038: LIST
41039: LIST
41040: LIST
41041: LIST
41042: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41043: LD_ADDR_VAR 0 17
41047: PUSH
41048: LD_INT 0
41050: PUSH
41051: LD_INT 0
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: PUSH
41058: LD_INT 0
41060: PUSH
41061: LD_INT 1
41063: NEG
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: PUSH
41069: LD_INT 1
41071: PUSH
41072: LD_INT 0
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: PUSH
41079: LD_INT 1
41081: PUSH
41082: LD_INT 1
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: PUSH
41089: LD_INT 0
41091: PUSH
41092: LD_INT 1
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: LD_INT 1
41101: NEG
41102: PUSH
41103: LD_INT 0
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: PUSH
41110: LD_INT 1
41112: NEG
41113: PUSH
41114: LD_INT 1
41116: NEG
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: PUSH
41122: LD_INT 1
41124: NEG
41125: PUSH
41126: LD_INT 2
41128: NEG
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: PUSH
41134: LD_INT 0
41136: PUSH
41137: LD_INT 2
41139: NEG
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 1
41147: PUSH
41148: LD_INT 1
41150: NEG
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: PUSH
41156: LD_INT 2
41158: PUSH
41159: LD_INT 0
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: PUSH
41166: LD_INT 2
41168: PUSH
41169: LD_INT 1
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: PUSH
41176: LD_INT 2
41178: PUSH
41179: LD_INT 2
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 1
41188: PUSH
41189: LD_INT 2
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: LD_INT 0
41198: PUSH
41199: LD_INT 2
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: PUSH
41206: LD_INT 1
41208: NEG
41209: PUSH
41210: LD_INT 1
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: PUSH
41217: LD_INT 2
41219: NEG
41220: PUSH
41221: LD_INT 0
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: LD_INT 2
41230: NEG
41231: PUSH
41232: LD_INT 1
41234: NEG
41235: PUSH
41236: EMPTY
41237: LIST
41238: LIST
41239: PUSH
41240: LD_INT 2
41242: NEG
41243: PUSH
41244: LD_INT 2
41246: NEG
41247: PUSH
41248: EMPTY
41249: LIST
41250: LIST
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: LIST
41256: LIST
41257: LIST
41258: LIST
41259: LIST
41260: LIST
41261: LIST
41262: LIST
41263: LIST
41264: LIST
41265: LIST
41266: LIST
41267: LIST
41268: LIST
41269: LIST
41270: LIST
41271: LIST
41272: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41273: LD_ADDR_VAR 0 18
41277: PUSH
41278: LD_INT 0
41280: PUSH
41281: LD_INT 0
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PUSH
41288: LD_INT 0
41290: PUSH
41291: LD_INT 1
41293: NEG
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: LD_INT 1
41301: PUSH
41302: LD_INT 0
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 1
41311: PUSH
41312: LD_INT 1
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 0
41321: PUSH
41322: LD_INT 1
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: PUSH
41329: LD_INT 1
41331: NEG
41332: PUSH
41333: LD_INT 0
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 1
41342: NEG
41343: PUSH
41344: LD_INT 1
41346: NEG
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: LD_INT 1
41354: NEG
41355: PUSH
41356: LD_INT 2
41358: NEG
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 0
41366: PUSH
41367: LD_INT 2
41369: NEG
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: LD_INT 1
41377: PUSH
41378: LD_INT 1
41380: NEG
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: PUSH
41386: LD_INT 2
41388: PUSH
41389: LD_INT 0
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: LD_INT 2
41398: PUSH
41399: LD_INT 1
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: LD_INT 2
41408: PUSH
41409: LD_INT 2
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 1
41418: PUSH
41419: LD_INT 2
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: LD_INT 0
41428: PUSH
41429: LD_INT 2
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: PUSH
41436: LD_INT 1
41438: NEG
41439: PUSH
41440: LD_INT 1
41442: PUSH
41443: EMPTY
41444: LIST
41445: LIST
41446: PUSH
41447: LD_INT 2
41449: NEG
41450: PUSH
41451: LD_INT 0
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 2
41460: NEG
41461: PUSH
41462: LD_INT 1
41464: NEG
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: PUSH
41470: LD_INT 2
41472: NEG
41473: PUSH
41474: LD_INT 2
41476: NEG
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: LIST
41486: LIST
41487: LIST
41488: LIST
41489: LIST
41490: LIST
41491: LIST
41492: LIST
41493: LIST
41494: LIST
41495: LIST
41496: LIST
41497: LIST
41498: LIST
41499: LIST
41500: LIST
41501: LIST
41502: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41503: LD_ADDR_VAR 0 19
41507: PUSH
41508: LD_INT 0
41510: PUSH
41511: LD_INT 0
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: PUSH
41518: LD_INT 0
41520: PUSH
41521: LD_INT 1
41523: NEG
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: PUSH
41529: LD_INT 1
41531: PUSH
41532: LD_INT 0
41534: PUSH
41535: EMPTY
41536: LIST
41537: LIST
41538: PUSH
41539: LD_INT 1
41541: PUSH
41542: LD_INT 1
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: PUSH
41549: LD_INT 0
41551: PUSH
41552: LD_INT 1
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PUSH
41559: LD_INT 1
41561: NEG
41562: PUSH
41563: LD_INT 0
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 1
41572: NEG
41573: PUSH
41574: LD_INT 1
41576: NEG
41577: PUSH
41578: EMPTY
41579: LIST
41580: LIST
41581: PUSH
41582: LD_INT 1
41584: NEG
41585: PUSH
41586: LD_INT 2
41588: NEG
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: PUSH
41594: LD_INT 0
41596: PUSH
41597: LD_INT 2
41599: NEG
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: PUSH
41605: LD_INT 1
41607: PUSH
41608: LD_INT 1
41610: NEG
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 2
41618: PUSH
41619: LD_INT 0
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 2
41628: PUSH
41629: LD_INT 1
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 2
41638: PUSH
41639: LD_INT 2
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: PUSH
41646: LD_INT 1
41648: PUSH
41649: LD_INT 2
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: PUSH
41656: LD_INT 0
41658: PUSH
41659: LD_INT 2
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: PUSH
41666: LD_INT 1
41668: NEG
41669: PUSH
41670: LD_INT 1
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: LD_INT 2
41679: NEG
41680: PUSH
41681: LD_INT 0
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: LD_INT 2
41690: NEG
41691: PUSH
41692: LD_INT 1
41694: NEG
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: LD_INT 2
41702: NEG
41703: PUSH
41704: LD_INT 2
41706: NEG
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: EMPTY
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41733: LD_ADDR_VAR 0 20
41737: PUSH
41738: LD_INT 0
41740: PUSH
41741: LD_INT 0
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: LD_INT 0
41750: PUSH
41751: LD_INT 1
41753: NEG
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: PUSH
41759: LD_INT 1
41761: PUSH
41762: LD_INT 0
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: LD_INT 1
41771: PUSH
41772: LD_INT 1
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 0
41781: PUSH
41782: LD_INT 1
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: PUSH
41789: LD_INT 1
41791: NEG
41792: PUSH
41793: LD_INT 0
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 1
41802: NEG
41803: PUSH
41804: LD_INT 1
41806: NEG
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 1
41814: NEG
41815: PUSH
41816: LD_INT 2
41818: NEG
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: PUSH
41824: LD_INT 0
41826: PUSH
41827: LD_INT 2
41829: NEG
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: LD_INT 1
41837: PUSH
41838: LD_INT 1
41840: NEG
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 2
41848: PUSH
41849: LD_INT 0
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: PUSH
41856: LD_INT 2
41858: PUSH
41859: LD_INT 1
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: PUSH
41866: LD_INT 2
41868: PUSH
41869: LD_INT 2
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: LD_INT 1
41878: PUSH
41879: LD_INT 2
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: PUSH
41886: LD_INT 0
41888: PUSH
41889: LD_INT 2
41891: PUSH
41892: EMPTY
41893: LIST
41894: LIST
41895: PUSH
41896: LD_INT 1
41898: NEG
41899: PUSH
41900: LD_INT 1
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: PUSH
41907: LD_INT 2
41909: NEG
41910: PUSH
41911: LD_INT 0
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 2
41920: NEG
41921: PUSH
41922: LD_INT 1
41924: NEG
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: LD_INT 2
41932: NEG
41933: PUSH
41934: LD_INT 2
41936: NEG
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: LIST
41946: LIST
41947: LIST
41948: LIST
41949: LIST
41950: LIST
41951: LIST
41952: LIST
41953: LIST
41954: LIST
41955: LIST
41956: LIST
41957: LIST
41958: LIST
41959: LIST
41960: LIST
41961: LIST
41962: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41963: LD_ADDR_VAR 0 21
41967: PUSH
41968: LD_INT 0
41970: PUSH
41971: LD_INT 0
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: LD_INT 0
41980: PUSH
41981: LD_INT 1
41983: NEG
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: PUSH
41989: LD_INT 1
41991: PUSH
41992: LD_INT 0
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: LD_INT 1
42001: PUSH
42002: LD_INT 1
42004: PUSH
42005: EMPTY
42006: LIST
42007: LIST
42008: PUSH
42009: LD_INT 0
42011: PUSH
42012: LD_INT 1
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: PUSH
42019: LD_INT 1
42021: NEG
42022: PUSH
42023: LD_INT 0
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 1
42032: NEG
42033: PUSH
42034: LD_INT 1
42036: NEG
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: PUSH
42042: LD_INT 1
42044: NEG
42045: PUSH
42046: LD_INT 2
42048: NEG
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: PUSH
42054: LD_INT 0
42056: PUSH
42057: LD_INT 2
42059: NEG
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: PUSH
42065: LD_INT 1
42067: PUSH
42068: LD_INT 1
42070: NEG
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: PUSH
42076: LD_INT 2
42078: PUSH
42079: LD_INT 0
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: PUSH
42086: LD_INT 2
42088: PUSH
42089: LD_INT 1
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: PUSH
42096: LD_INT 2
42098: PUSH
42099: LD_INT 2
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PUSH
42106: LD_INT 1
42108: PUSH
42109: LD_INT 2
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: PUSH
42116: LD_INT 0
42118: PUSH
42119: LD_INT 2
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: LD_INT 1
42128: NEG
42129: PUSH
42130: LD_INT 1
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 2
42139: NEG
42140: PUSH
42141: LD_INT 0
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: PUSH
42148: LD_INT 2
42150: NEG
42151: PUSH
42152: LD_INT 1
42154: NEG
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: LD_INT 2
42162: NEG
42163: PUSH
42164: LD_INT 2
42166: NEG
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: LIST
42176: LIST
42177: LIST
42178: LIST
42179: LIST
42180: LIST
42181: LIST
42182: LIST
42183: LIST
42184: LIST
42185: LIST
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: LIST
42191: LIST
42192: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42193: LD_ADDR_VAR 0 22
42197: PUSH
42198: LD_INT 0
42200: PUSH
42201: LD_INT 0
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: PUSH
42208: LD_INT 0
42210: PUSH
42211: LD_INT 1
42213: NEG
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: PUSH
42219: LD_INT 1
42221: PUSH
42222: LD_INT 0
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 1
42231: PUSH
42232: LD_INT 1
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: LD_INT 0
42241: PUSH
42242: LD_INT 1
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: LD_INT 1
42251: NEG
42252: PUSH
42253: LD_INT 0
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 1
42262: NEG
42263: PUSH
42264: LD_INT 1
42266: NEG
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 1
42274: NEG
42275: PUSH
42276: LD_INT 2
42278: NEG
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: LD_INT 0
42286: PUSH
42287: LD_INT 2
42289: NEG
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: PUSH
42295: LD_INT 1
42297: PUSH
42298: LD_INT 1
42300: NEG
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: PUSH
42306: LD_INT 2
42308: PUSH
42309: LD_INT 0
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: LD_INT 2
42318: PUSH
42319: LD_INT 1
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 2
42328: PUSH
42329: LD_INT 2
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: LD_INT 1
42338: PUSH
42339: LD_INT 2
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 0
42348: PUSH
42349: LD_INT 2
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 1
42358: NEG
42359: PUSH
42360: LD_INT 1
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: LD_INT 2
42369: NEG
42370: PUSH
42371: LD_INT 0
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: PUSH
42378: LD_INT 2
42380: NEG
42381: PUSH
42382: LD_INT 1
42384: NEG
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 2
42392: NEG
42393: PUSH
42394: LD_INT 2
42396: NEG
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: LIST
42406: LIST
42407: LIST
42408: LIST
42409: LIST
42410: LIST
42411: LIST
42412: LIST
42413: LIST
42414: LIST
42415: LIST
42416: LIST
42417: LIST
42418: LIST
42419: LIST
42420: LIST
42421: LIST
42422: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42423: LD_ADDR_VAR 0 23
42427: PUSH
42428: LD_INT 0
42430: PUSH
42431: LD_INT 0
42433: PUSH
42434: EMPTY
42435: LIST
42436: LIST
42437: PUSH
42438: LD_INT 0
42440: PUSH
42441: LD_INT 1
42443: NEG
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: PUSH
42449: LD_INT 1
42451: PUSH
42452: LD_INT 0
42454: PUSH
42455: EMPTY
42456: LIST
42457: LIST
42458: PUSH
42459: LD_INT 1
42461: PUSH
42462: LD_INT 1
42464: PUSH
42465: EMPTY
42466: LIST
42467: LIST
42468: PUSH
42469: LD_INT 0
42471: PUSH
42472: LD_INT 1
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PUSH
42479: LD_INT 1
42481: NEG
42482: PUSH
42483: LD_INT 0
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 1
42492: NEG
42493: PUSH
42494: LD_INT 1
42496: NEG
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: LD_INT 1
42504: NEG
42505: PUSH
42506: LD_INT 2
42508: NEG
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: PUSH
42514: LD_INT 0
42516: PUSH
42517: LD_INT 2
42519: NEG
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: PUSH
42525: LD_INT 1
42527: PUSH
42528: LD_INT 1
42530: NEG
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: LD_INT 2
42538: PUSH
42539: LD_INT 0
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: PUSH
42546: LD_INT 2
42548: PUSH
42549: LD_INT 1
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: PUSH
42556: LD_INT 2
42558: PUSH
42559: LD_INT 2
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: PUSH
42566: LD_INT 1
42568: PUSH
42569: LD_INT 2
42571: PUSH
42572: EMPTY
42573: LIST
42574: LIST
42575: PUSH
42576: LD_INT 0
42578: PUSH
42579: LD_INT 2
42581: PUSH
42582: EMPTY
42583: LIST
42584: LIST
42585: PUSH
42586: LD_INT 1
42588: NEG
42589: PUSH
42590: LD_INT 1
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: PUSH
42597: LD_INT 2
42599: NEG
42600: PUSH
42601: LD_INT 0
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: PUSH
42608: LD_INT 2
42610: NEG
42611: PUSH
42612: LD_INT 1
42614: NEG
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: PUSH
42620: LD_INT 2
42622: NEG
42623: PUSH
42624: LD_INT 2
42626: NEG
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: PUSH
42632: LD_INT 2
42634: NEG
42635: PUSH
42636: LD_INT 3
42638: NEG
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 1
42646: NEG
42647: PUSH
42648: LD_INT 3
42650: NEG
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: PUSH
42656: LD_INT 1
42658: PUSH
42659: LD_INT 2
42661: NEG
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: LD_INT 2
42669: PUSH
42670: LD_INT 1
42672: NEG
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: LIST
42694: LIST
42695: LIST
42696: LIST
42697: LIST
42698: LIST
42699: LIST
42700: LIST
42701: LIST
42702: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
42703: LD_ADDR_VAR 0 24
42707: PUSH
42708: LD_INT 0
42710: PUSH
42711: LD_INT 0
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: LD_INT 0
42720: PUSH
42721: LD_INT 1
42723: NEG
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: PUSH
42729: LD_INT 1
42731: PUSH
42732: LD_INT 0
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: PUSH
42739: LD_INT 1
42741: PUSH
42742: LD_INT 1
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: PUSH
42749: LD_INT 0
42751: PUSH
42752: LD_INT 1
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: LD_INT 1
42761: NEG
42762: PUSH
42763: LD_INT 0
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: PUSH
42770: LD_INT 1
42772: NEG
42773: PUSH
42774: LD_INT 1
42776: NEG
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: PUSH
42782: LD_INT 1
42784: NEG
42785: PUSH
42786: LD_INT 2
42788: NEG
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: PUSH
42794: LD_INT 0
42796: PUSH
42797: LD_INT 2
42799: NEG
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: PUSH
42805: LD_INT 1
42807: PUSH
42808: LD_INT 1
42810: NEG
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: PUSH
42816: LD_INT 2
42818: PUSH
42819: LD_INT 0
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: PUSH
42826: LD_INT 2
42828: PUSH
42829: LD_INT 1
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: LD_INT 2
42838: PUSH
42839: LD_INT 2
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: PUSH
42846: LD_INT 1
42848: PUSH
42849: LD_INT 2
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: PUSH
42856: LD_INT 0
42858: PUSH
42859: LD_INT 2
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: PUSH
42866: LD_INT 1
42868: NEG
42869: PUSH
42870: LD_INT 1
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PUSH
42877: LD_INT 2
42879: NEG
42880: PUSH
42881: LD_INT 0
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 2
42890: NEG
42891: PUSH
42892: LD_INT 1
42894: NEG
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PUSH
42900: LD_INT 2
42902: NEG
42903: PUSH
42904: LD_INT 2
42906: NEG
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: PUSH
42912: LD_INT 1
42914: PUSH
42915: LD_INT 2
42917: NEG
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: PUSH
42923: LD_INT 2
42925: PUSH
42926: LD_INT 1
42928: NEG
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: LD_INT 3
42936: PUSH
42937: LD_INT 1
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: PUSH
42944: LD_INT 3
42946: PUSH
42947: LD_INT 2
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: LIST
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: LIST
42963: LIST
42964: LIST
42965: LIST
42966: LIST
42967: LIST
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: LIST
42973: LIST
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
42979: LD_ADDR_VAR 0 25
42983: PUSH
42984: LD_INT 0
42986: PUSH
42987: LD_INT 0
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 0
42996: PUSH
42997: LD_INT 1
42999: NEG
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: PUSH
43005: LD_INT 1
43007: PUSH
43008: LD_INT 0
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: LD_INT 1
43017: PUSH
43018: LD_INT 1
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 0
43027: PUSH
43028: LD_INT 1
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 1
43037: NEG
43038: PUSH
43039: LD_INT 0
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: PUSH
43046: LD_INT 1
43048: NEG
43049: PUSH
43050: LD_INT 1
43052: NEG
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: PUSH
43058: LD_INT 1
43060: NEG
43061: PUSH
43062: LD_INT 2
43064: NEG
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: PUSH
43070: LD_INT 0
43072: PUSH
43073: LD_INT 2
43075: NEG
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: PUSH
43081: LD_INT 1
43083: PUSH
43084: LD_INT 1
43086: NEG
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: PUSH
43092: LD_INT 2
43094: PUSH
43095: LD_INT 0
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: PUSH
43102: LD_INT 2
43104: PUSH
43105: LD_INT 1
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: PUSH
43112: LD_INT 2
43114: PUSH
43115: LD_INT 2
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: PUSH
43122: LD_INT 1
43124: PUSH
43125: LD_INT 2
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: PUSH
43132: LD_INT 0
43134: PUSH
43135: LD_INT 2
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: LD_INT 1
43144: NEG
43145: PUSH
43146: LD_INT 1
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 2
43155: NEG
43156: PUSH
43157: LD_INT 0
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 2
43166: NEG
43167: PUSH
43168: LD_INT 1
43170: NEG
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PUSH
43176: LD_INT 2
43178: NEG
43179: PUSH
43180: LD_INT 2
43182: NEG
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: LD_INT 3
43190: PUSH
43191: LD_INT 1
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: LD_INT 3
43200: PUSH
43201: LD_INT 2
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: PUSH
43208: LD_INT 2
43210: PUSH
43211: LD_INT 3
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 1
43220: PUSH
43221: LD_INT 3
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: LIST
43243: LIST
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43253: LD_ADDR_VAR 0 26
43257: PUSH
43258: LD_INT 0
43260: PUSH
43261: LD_INT 0
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 0
43270: PUSH
43271: LD_INT 1
43273: NEG
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: PUSH
43279: LD_INT 1
43281: PUSH
43282: LD_INT 0
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 1
43291: PUSH
43292: LD_INT 1
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 0
43301: PUSH
43302: LD_INT 1
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 1
43311: NEG
43312: PUSH
43313: LD_INT 0
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 1
43322: NEG
43323: PUSH
43324: LD_INT 1
43326: NEG
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PUSH
43332: LD_INT 1
43334: NEG
43335: PUSH
43336: LD_INT 2
43338: NEG
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PUSH
43344: LD_INT 0
43346: PUSH
43347: LD_INT 2
43349: NEG
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: PUSH
43355: LD_INT 1
43357: PUSH
43358: LD_INT 1
43360: NEG
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: PUSH
43366: LD_INT 2
43368: PUSH
43369: LD_INT 0
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: PUSH
43376: LD_INT 2
43378: PUSH
43379: LD_INT 1
43381: PUSH
43382: EMPTY
43383: LIST
43384: LIST
43385: PUSH
43386: LD_INT 2
43388: PUSH
43389: LD_INT 2
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: LD_INT 1
43398: PUSH
43399: LD_INT 2
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PUSH
43406: LD_INT 0
43408: PUSH
43409: LD_INT 2
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: PUSH
43416: LD_INT 1
43418: NEG
43419: PUSH
43420: LD_INT 1
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: PUSH
43427: LD_INT 2
43429: NEG
43430: PUSH
43431: LD_INT 0
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: PUSH
43438: LD_INT 2
43440: NEG
43441: PUSH
43442: LD_INT 1
43444: NEG
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: PUSH
43450: LD_INT 2
43452: NEG
43453: PUSH
43454: LD_INT 2
43456: NEG
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PUSH
43462: LD_INT 2
43464: PUSH
43465: LD_INT 3
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: LD_INT 1
43474: PUSH
43475: LD_INT 3
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PUSH
43482: LD_INT 1
43484: NEG
43485: PUSH
43486: LD_INT 2
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 2
43495: NEG
43496: PUSH
43497: LD_INT 1
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: LIST
43508: LIST
43509: LIST
43510: LIST
43511: LIST
43512: LIST
43513: LIST
43514: LIST
43515: LIST
43516: LIST
43517: LIST
43518: LIST
43519: LIST
43520: LIST
43521: LIST
43522: LIST
43523: LIST
43524: LIST
43525: LIST
43526: LIST
43527: LIST
43528: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43529: LD_ADDR_VAR 0 27
43533: PUSH
43534: LD_INT 0
43536: PUSH
43537: LD_INT 0
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: LD_INT 0
43546: PUSH
43547: LD_INT 1
43549: NEG
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: LD_INT 1
43557: PUSH
43558: LD_INT 0
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: PUSH
43565: LD_INT 1
43567: PUSH
43568: LD_INT 1
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_INT 0
43577: PUSH
43578: LD_INT 1
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PUSH
43585: LD_INT 1
43587: NEG
43588: PUSH
43589: LD_INT 0
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 1
43598: NEG
43599: PUSH
43600: LD_INT 1
43602: NEG
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: PUSH
43608: LD_INT 1
43610: NEG
43611: PUSH
43612: LD_INT 2
43614: NEG
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: PUSH
43620: LD_INT 0
43622: PUSH
43623: LD_INT 2
43625: NEG
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 1
43633: PUSH
43634: LD_INT 1
43636: NEG
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PUSH
43642: LD_INT 2
43644: PUSH
43645: LD_INT 0
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: LD_INT 2
43654: PUSH
43655: LD_INT 1
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 2
43664: PUSH
43665: LD_INT 2
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: PUSH
43672: LD_INT 1
43674: PUSH
43675: LD_INT 2
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 0
43684: PUSH
43685: LD_INT 2
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 1
43694: NEG
43695: PUSH
43696: LD_INT 1
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 2
43705: NEG
43706: PUSH
43707: LD_INT 0
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PUSH
43714: LD_INT 2
43716: NEG
43717: PUSH
43718: LD_INT 1
43720: NEG
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: LD_INT 2
43728: NEG
43729: PUSH
43730: LD_INT 2
43732: NEG
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PUSH
43738: LD_INT 1
43740: NEG
43741: PUSH
43742: LD_INT 2
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PUSH
43749: LD_INT 2
43751: NEG
43752: PUSH
43753: LD_INT 1
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: PUSH
43760: LD_INT 3
43762: NEG
43763: PUSH
43764: LD_INT 1
43766: NEG
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PUSH
43772: LD_INT 3
43774: NEG
43775: PUSH
43776: LD_INT 2
43778: NEG
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: LIST
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: LIST
43794: LIST
43795: LIST
43796: LIST
43797: LIST
43798: LIST
43799: LIST
43800: LIST
43801: LIST
43802: LIST
43803: LIST
43804: LIST
43805: LIST
43806: LIST
43807: LIST
43808: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43809: LD_ADDR_VAR 0 28
43813: PUSH
43814: LD_INT 0
43816: PUSH
43817: LD_INT 0
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: PUSH
43824: LD_INT 0
43826: PUSH
43827: LD_INT 1
43829: NEG
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: LD_INT 1
43837: PUSH
43838: LD_INT 0
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: LD_INT 1
43847: PUSH
43848: LD_INT 1
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 0
43857: PUSH
43858: LD_INT 1
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: LD_INT 1
43867: NEG
43868: PUSH
43869: LD_INT 0
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: PUSH
43876: LD_INT 1
43878: NEG
43879: PUSH
43880: LD_INT 1
43882: NEG
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: LD_INT 1
43890: NEG
43891: PUSH
43892: LD_INT 2
43894: NEG
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: PUSH
43900: LD_INT 0
43902: PUSH
43903: LD_INT 2
43905: NEG
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 1
43913: PUSH
43914: LD_INT 1
43916: NEG
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 2
43924: PUSH
43925: LD_INT 0
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 2
43934: PUSH
43935: LD_INT 1
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: PUSH
43942: LD_INT 2
43944: PUSH
43945: LD_INT 2
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: PUSH
43952: LD_INT 1
43954: PUSH
43955: LD_INT 2
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: PUSH
43962: LD_INT 0
43964: PUSH
43965: LD_INT 2
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: PUSH
43972: LD_INT 1
43974: NEG
43975: PUSH
43976: LD_INT 1
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: LD_INT 2
43985: NEG
43986: PUSH
43987: LD_INT 0
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 2
43996: NEG
43997: PUSH
43998: LD_INT 1
44000: NEG
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: PUSH
44006: LD_INT 2
44008: NEG
44009: PUSH
44010: LD_INT 2
44012: NEG
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 2
44020: NEG
44021: PUSH
44022: LD_INT 3
44024: NEG
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 1
44032: NEG
44033: PUSH
44034: LD_INT 3
44036: NEG
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: PUSH
44042: LD_INT 3
44044: NEG
44045: PUSH
44046: LD_INT 1
44048: NEG
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: PUSH
44054: LD_INT 3
44056: NEG
44057: PUSH
44058: LD_INT 2
44060: NEG
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: LIST
44070: LIST
44071: LIST
44072: LIST
44073: LIST
44074: LIST
44075: LIST
44076: LIST
44077: LIST
44078: LIST
44079: LIST
44080: LIST
44081: LIST
44082: LIST
44083: LIST
44084: LIST
44085: LIST
44086: LIST
44087: LIST
44088: LIST
44089: LIST
44090: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44091: LD_ADDR_VAR 0 29
44095: PUSH
44096: LD_INT 0
44098: PUSH
44099: LD_INT 0
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 0
44108: PUSH
44109: LD_INT 1
44111: NEG
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 1
44119: PUSH
44120: LD_INT 0
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 1
44129: PUSH
44130: LD_INT 1
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PUSH
44137: LD_INT 0
44139: PUSH
44140: LD_INT 1
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: PUSH
44147: LD_INT 1
44149: NEG
44150: PUSH
44151: LD_INT 0
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: LD_INT 1
44160: NEG
44161: PUSH
44162: LD_INT 1
44164: NEG
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 1
44172: NEG
44173: PUSH
44174: LD_INT 2
44176: NEG
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: PUSH
44182: LD_INT 0
44184: PUSH
44185: LD_INT 2
44187: NEG
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PUSH
44193: LD_INT 1
44195: PUSH
44196: LD_INT 1
44198: NEG
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 2
44206: PUSH
44207: LD_INT 0
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: PUSH
44214: LD_INT 2
44216: PUSH
44217: LD_INT 1
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: LD_INT 1
44226: PUSH
44227: LD_INT 2
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 0
44236: PUSH
44237: LD_INT 2
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: LD_INT 1
44246: NEG
44247: PUSH
44248: LD_INT 1
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 2
44257: NEG
44258: PUSH
44259: LD_INT 1
44261: NEG
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: LD_INT 2
44269: NEG
44270: PUSH
44271: LD_INT 2
44273: NEG
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 2
44281: NEG
44282: PUSH
44283: LD_INT 3
44285: NEG
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 2
44293: PUSH
44294: LD_INT 1
44296: NEG
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: LD_INT 3
44304: PUSH
44305: LD_INT 1
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: LD_INT 1
44314: PUSH
44315: LD_INT 3
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: PUSH
44322: LD_INT 1
44324: NEG
44325: PUSH
44326: LD_INT 2
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: LD_INT 3
44335: NEG
44336: PUSH
44337: LD_INT 2
44339: NEG
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: LIST
44349: LIST
44350: LIST
44351: LIST
44352: LIST
44353: LIST
44354: LIST
44355: LIST
44356: LIST
44357: LIST
44358: LIST
44359: LIST
44360: LIST
44361: LIST
44362: LIST
44363: LIST
44364: LIST
44365: LIST
44366: LIST
44367: LIST
44368: LIST
44369: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44370: LD_ADDR_VAR 0 30
44374: PUSH
44375: LD_INT 0
44377: PUSH
44378: LD_INT 0
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: LD_INT 0
44387: PUSH
44388: LD_INT 1
44390: NEG
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 1
44398: PUSH
44399: LD_INT 0
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: LD_INT 1
44408: PUSH
44409: LD_INT 1
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: LD_INT 0
44418: PUSH
44419: LD_INT 1
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 1
44428: NEG
44429: PUSH
44430: LD_INT 0
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 1
44439: NEG
44440: PUSH
44441: LD_INT 1
44443: NEG
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: PUSH
44449: LD_INT 1
44451: NEG
44452: PUSH
44453: LD_INT 2
44455: NEG
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PUSH
44461: LD_INT 0
44463: PUSH
44464: LD_INT 2
44466: NEG
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: PUSH
44472: LD_INT 1
44474: PUSH
44475: LD_INT 1
44477: NEG
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: LD_INT 2
44485: PUSH
44486: LD_INT 0
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 2
44495: PUSH
44496: LD_INT 1
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: PUSH
44503: LD_INT 2
44505: PUSH
44506: LD_INT 2
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: PUSH
44513: LD_INT 1
44515: PUSH
44516: LD_INT 2
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: LD_INT 1
44525: NEG
44526: PUSH
44527: LD_INT 1
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: LD_INT 2
44536: NEG
44537: PUSH
44538: LD_INT 0
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: LD_INT 2
44547: NEG
44548: PUSH
44549: LD_INT 1
44551: NEG
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: LD_INT 1
44559: NEG
44560: PUSH
44561: LD_INT 3
44563: NEG
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: PUSH
44569: LD_INT 1
44571: PUSH
44572: LD_INT 2
44574: NEG
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: LD_INT 3
44582: PUSH
44583: LD_INT 2
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: PUSH
44590: LD_INT 2
44592: PUSH
44593: LD_INT 3
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 2
44602: NEG
44603: PUSH
44604: LD_INT 1
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 3
44613: NEG
44614: PUSH
44615: LD_INT 1
44617: NEG
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: LIST
44627: LIST
44628: LIST
44629: LIST
44630: LIST
44631: LIST
44632: LIST
44633: LIST
44634: LIST
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: LIST
44647: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44648: LD_ADDR_VAR 0 31
44652: PUSH
44653: LD_INT 0
44655: PUSH
44656: LD_INT 0
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 0
44665: PUSH
44666: LD_INT 1
44668: NEG
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: LD_INT 1
44676: PUSH
44677: LD_INT 0
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 1
44686: PUSH
44687: LD_INT 1
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: LD_INT 0
44696: PUSH
44697: LD_INT 1
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 1
44706: NEG
44707: PUSH
44708: LD_INT 0
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 1
44717: NEG
44718: PUSH
44719: LD_INT 1
44721: NEG
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 1
44729: NEG
44730: PUSH
44731: LD_INT 2
44733: NEG
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: LD_INT 1
44741: PUSH
44742: LD_INT 1
44744: NEG
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: PUSH
44750: LD_INT 2
44752: PUSH
44753: LD_INT 0
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: LD_INT 2
44762: PUSH
44763: LD_INT 1
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 2
44772: PUSH
44773: LD_INT 2
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 1
44782: PUSH
44783: LD_INT 2
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PUSH
44790: LD_INT 0
44792: PUSH
44793: LD_INT 2
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 1
44802: NEG
44803: PUSH
44804: LD_INT 1
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 2
44813: NEG
44814: PUSH
44815: LD_INT 1
44817: NEG
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: LD_INT 2
44825: NEG
44826: PUSH
44827: LD_INT 2
44829: NEG
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: PUSH
44835: LD_INT 2
44837: NEG
44838: PUSH
44839: LD_INT 3
44841: NEG
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: PUSH
44847: LD_INT 2
44849: PUSH
44850: LD_INT 1
44852: NEG
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: PUSH
44858: LD_INT 3
44860: PUSH
44861: LD_INT 1
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: PUSH
44868: LD_INT 1
44870: PUSH
44871: LD_INT 3
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: PUSH
44878: LD_INT 1
44880: NEG
44881: PUSH
44882: LD_INT 2
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 3
44891: NEG
44892: PUSH
44893: LD_INT 2
44895: NEG
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: LIST
44905: LIST
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: LIST
44911: LIST
44912: LIST
44913: LIST
44914: LIST
44915: LIST
44916: LIST
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44926: LD_ADDR_VAR 0 32
44930: PUSH
44931: LD_INT 0
44933: PUSH
44934: LD_INT 0
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: LD_INT 0
44943: PUSH
44944: LD_INT 1
44946: NEG
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 1
44954: PUSH
44955: LD_INT 0
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: LD_INT 1
44964: PUSH
44965: LD_INT 1
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: LD_INT 0
44974: PUSH
44975: LD_INT 1
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: LD_INT 1
44984: NEG
44985: PUSH
44986: LD_INT 0
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: LD_INT 1
44995: NEG
44996: PUSH
44997: LD_INT 1
44999: NEG
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 1
45007: NEG
45008: PUSH
45009: LD_INT 2
45011: NEG
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 0
45019: PUSH
45020: LD_INT 2
45022: NEG
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 1
45030: PUSH
45031: LD_INT 1
45033: NEG
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: LD_INT 2
45041: PUSH
45042: LD_INT 1
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 2
45051: PUSH
45052: LD_INT 2
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 1
45061: PUSH
45062: LD_INT 2
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: LD_INT 0
45071: PUSH
45072: LD_INT 2
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 1
45081: NEG
45082: PUSH
45083: LD_INT 1
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: LD_INT 2
45092: NEG
45093: PUSH
45094: LD_INT 0
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: PUSH
45101: LD_INT 2
45103: NEG
45104: PUSH
45105: LD_INT 1
45107: NEG
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 1
45115: NEG
45116: PUSH
45117: LD_INT 3
45119: NEG
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 1
45127: PUSH
45128: LD_INT 2
45130: NEG
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 3
45138: PUSH
45139: LD_INT 2
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 2
45148: PUSH
45149: LD_INT 3
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 2
45158: NEG
45159: PUSH
45160: LD_INT 1
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: LD_INT 3
45169: NEG
45170: PUSH
45171: LD_INT 1
45173: NEG
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: LIST
45183: LIST
45184: LIST
45185: LIST
45186: LIST
45187: LIST
45188: LIST
45189: LIST
45190: LIST
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45204: LD_ADDR_VAR 0 33
45208: PUSH
45209: LD_INT 0
45211: PUSH
45212: LD_INT 0
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: LD_INT 0
45221: PUSH
45222: LD_INT 1
45224: NEG
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: LD_INT 1
45232: PUSH
45233: LD_INT 0
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: LD_INT 1
45242: PUSH
45243: LD_INT 1
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 0
45252: PUSH
45253: LD_INT 1
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 1
45262: NEG
45263: PUSH
45264: LD_INT 0
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 1
45273: NEG
45274: PUSH
45275: LD_INT 1
45277: NEG
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: LD_INT 1
45285: NEG
45286: PUSH
45287: LD_INT 2
45289: NEG
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_INT 1
45297: PUSH
45298: LD_INT 1
45300: NEG
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: LD_INT 2
45308: PUSH
45309: LD_INT 0
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_INT 2
45318: PUSH
45319: LD_INT 1
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: LD_INT 1
45328: PUSH
45329: LD_INT 2
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 0
45338: PUSH
45339: LD_INT 2
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PUSH
45346: LD_INT 1
45348: NEG
45349: PUSH
45350: LD_INT 1
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: LD_INT 2
45359: NEG
45360: PUSH
45361: LD_INT 0
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 2
45370: NEG
45371: PUSH
45372: LD_INT 1
45374: NEG
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 2
45382: NEG
45383: PUSH
45384: LD_INT 2
45386: NEG
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 2
45394: NEG
45395: PUSH
45396: LD_INT 3
45398: NEG
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 2
45406: PUSH
45407: LD_INT 1
45409: NEG
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: LD_INT 3
45417: PUSH
45418: LD_INT 1
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: LD_INT 1
45427: PUSH
45428: LD_INT 3
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: PUSH
45435: LD_INT 1
45437: NEG
45438: PUSH
45439: LD_INT 2
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: PUSH
45446: LD_INT 3
45448: NEG
45449: PUSH
45450: LD_INT 2
45452: NEG
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: LIST
45462: LIST
45463: LIST
45464: LIST
45465: LIST
45466: LIST
45467: LIST
45468: LIST
45469: LIST
45470: LIST
45471: LIST
45472: LIST
45473: LIST
45474: LIST
45475: LIST
45476: LIST
45477: LIST
45478: LIST
45479: LIST
45480: LIST
45481: LIST
45482: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45483: LD_ADDR_VAR 0 34
45487: PUSH
45488: LD_INT 0
45490: PUSH
45491: LD_INT 0
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 0
45500: PUSH
45501: LD_INT 1
45503: NEG
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 1
45511: PUSH
45512: LD_INT 0
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 1
45521: PUSH
45522: LD_INT 1
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 0
45531: PUSH
45532: LD_INT 1
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 1
45541: NEG
45542: PUSH
45543: LD_INT 0
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: LD_INT 1
45552: NEG
45553: PUSH
45554: LD_INT 1
45556: NEG
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 1
45564: NEG
45565: PUSH
45566: LD_INT 2
45568: NEG
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 0
45576: PUSH
45577: LD_INT 2
45579: NEG
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 1
45587: PUSH
45588: LD_INT 1
45590: NEG
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 2
45598: PUSH
45599: LD_INT 1
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: LD_INT 2
45608: PUSH
45609: LD_INT 2
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 1
45618: PUSH
45619: LD_INT 2
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 1
45628: NEG
45629: PUSH
45630: LD_INT 1
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 2
45639: NEG
45640: PUSH
45641: LD_INT 0
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 2
45650: NEG
45651: PUSH
45652: LD_INT 1
45654: NEG
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 2
45662: NEG
45663: PUSH
45664: LD_INT 2
45666: NEG
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 1
45674: NEG
45675: PUSH
45676: LD_INT 3
45678: NEG
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 1
45686: PUSH
45687: LD_INT 2
45689: NEG
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 3
45697: PUSH
45698: LD_INT 2
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 2
45707: PUSH
45708: LD_INT 3
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 2
45717: NEG
45718: PUSH
45719: LD_INT 1
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 3
45728: NEG
45729: PUSH
45730: LD_INT 1
45732: NEG
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: LIST
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45763: LD_ADDR_VAR 0 35
45767: PUSH
45768: LD_INT 0
45770: PUSH
45771: LD_INT 0
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 0
45780: PUSH
45781: LD_INT 1
45783: NEG
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 1
45791: PUSH
45792: LD_INT 0
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 1
45801: PUSH
45802: LD_INT 1
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 0
45811: PUSH
45812: LD_INT 1
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 1
45821: NEG
45822: PUSH
45823: LD_INT 0
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 1
45832: NEG
45833: PUSH
45834: LD_INT 1
45836: NEG
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 2
45844: PUSH
45845: LD_INT 1
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 2
45854: NEG
45855: PUSH
45856: LD_INT 1
45858: NEG
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: LIST
45868: LIST
45869: LIST
45870: LIST
45871: LIST
45872: LIST
45873: LIST
45874: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45875: LD_ADDR_VAR 0 36
45879: PUSH
45880: LD_INT 0
45882: PUSH
45883: LD_INT 0
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 0
45892: PUSH
45893: LD_INT 1
45895: NEG
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: LD_INT 1
45903: PUSH
45904: LD_INT 0
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 1
45913: PUSH
45914: LD_INT 1
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 0
45923: PUSH
45924: LD_INT 1
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 1
45933: NEG
45934: PUSH
45935: LD_INT 0
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: LD_INT 1
45944: NEG
45945: PUSH
45946: LD_INT 1
45948: NEG
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: LD_INT 1
45956: NEG
45957: PUSH
45958: LD_INT 2
45960: NEG
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 1
45968: PUSH
45969: LD_INT 2
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45987: LD_ADDR_VAR 0 37
45991: PUSH
45992: LD_INT 0
45994: PUSH
45995: LD_INT 0
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 0
46004: PUSH
46005: LD_INT 1
46007: NEG
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 1
46015: PUSH
46016: LD_INT 0
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 1
46025: PUSH
46026: LD_INT 1
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 0
46035: PUSH
46036: LD_INT 1
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 1
46045: NEG
46046: PUSH
46047: LD_INT 0
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 1
46056: NEG
46057: PUSH
46058: LD_INT 1
46060: NEG
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 1
46068: PUSH
46069: LD_INT 1
46071: NEG
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 1
46079: NEG
46080: PUSH
46081: LD_INT 1
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: LIST
46097: LIST
46098: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46099: LD_ADDR_VAR 0 38
46103: PUSH
46104: LD_INT 0
46106: PUSH
46107: LD_INT 0
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: LD_INT 0
46116: PUSH
46117: LD_INT 1
46119: NEG
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 1
46127: PUSH
46128: LD_INT 0
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 1
46137: PUSH
46138: LD_INT 1
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 0
46147: PUSH
46148: LD_INT 1
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 1
46157: NEG
46158: PUSH
46159: LD_INT 0
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 1
46168: NEG
46169: PUSH
46170: LD_INT 1
46172: NEG
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 2
46180: PUSH
46181: LD_INT 1
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 2
46190: NEG
46191: PUSH
46192: LD_INT 1
46194: NEG
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46211: LD_ADDR_VAR 0 39
46215: PUSH
46216: LD_INT 0
46218: PUSH
46219: LD_INT 0
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 0
46228: PUSH
46229: LD_INT 1
46231: NEG
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 1
46239: PUSH
46240: LD_INT 0
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 1
46249: PUSH
46250: LD_INT 1
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 0
46259: PUSH
46260: LD_INT 1
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 1
46269: NEG
46270: PUSH
46271: LD_INT 0
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 1
46280: NEG
46281: PUSH
46282: LD_INT 1
46284: NEG
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 1
46292: NEG
46293: PUSH
46294: LD_INT 2
46296: NEG
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 1
46304: PUSH
46305: LD_INT 2
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46323: LD_ADDR_VAR 0 40
46327: PUSH
46328: LD_INT 0
46330: PUSH
46331: LD_INT 0
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: PUSH
46338: LD_INT 0
46340: PUSH
46341: LD_INT 1
46343: NEG
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 1
46351: PUSH
46352: LD_INT 0
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 1
46361: PUSH
46362: LD_INT 1
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 0
46371: PUSH
46372: LD_INT 1
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 1
46381: NEG
46382: PUSH
46383: LD_INT 0
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 1
46392: NEG
46393: PUSH
46394: LD_INT 1
46396: NEG
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 1
46404: PUSH
46405: LD_INT 1
46407: NEG
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 1
46415: NEG
46416: PUSH
46417: LD_INT 1
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46435: LD_ADDR_VAR 0 41
46439: PUSH
46440: LD_INT 0
46442: PUSH
46443: LD_INT 0
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 0
46452: PUSH
46453: LD_INT 1
46455: NEG
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 1
46463: PUSH
46464: LD_INT 0
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 1
46473: PUSH
46474: LD_INT 1
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 0
46483: PUSH
46484: LD_INT 1
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 1
46493: NEG
46494: PUSH
46495: LD_INT 0
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 1
46504: NEG
46505: PUSH
46506: LD_INT 1
46508: NEG
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 1
46516: NEG
46517: PUSH
46518: LD_INT 2
46520: NEG
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 1
46528: PUSH
46529: LD_INT 1
46531: NEG
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 2
46539: PUSH
46540: LD_INT 0
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 2
46549: PUSH
46550: LD_INT 1
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: LD_INT 2
46559: PUSH
46560: LD_INT 2
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 1
46569: PUSH
46570: LD_INT 2
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 1
46579: NEG
46580: PUSH
46581: LD_INT 1
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 2
46590: NEG
46591: PUSH
46592: LD_INT 0
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 2
46601: NEG
46602: PUSH
46603: LD_INT 1
46605: NEG
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 2
46613: NEG
46614: PUSH
46615: LD_INT 2
46617: NEG
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 2
46625: NEG
46626: PUSH
46627: LD_INT 3
46629: NEG
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: PUSH
46635: LD_INT 2
46637: PUSH
46638: LD_INT 1
46640: NEG
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 3
46648: PUSH
46649: LD_INT 0
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 3
46658: PUSH
46659: LD_INT 1
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 3
46668: PUSH
46669: LD_INT 2
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 3
46678: PUSH
46679: LD_INT 3
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 2
46688: PUSH
46689: LD_INT 3
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 2
46698: NEG
46699: PUSH
46700: LD_INT 1
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 3
46709: NEG
46710: PUSH
46711: LD_INT 0
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 3
46720: NEG
46721: PUSH
46722: LD_INT 1
46724: NEG
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 3
46732: NEG
46733: PUSH
46734: LD_INT 2
46736: NEG
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 3
46744: NEG
46745: PUSH
46746: LD_INT 3
46748: NEG
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46785: LD_ADDR_VAR 0 42
46789: PUSH
46790: LD_INT 0
46792: PUSH
46793: LD_INT 0
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 0
46802: PUSH
46803: LD_INT 1
46805: NEG
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 1
46813: PUSH
46814: LD_INT 0
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 1
46823: PUSH
46824: LD_INT 1
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 0
46833: PUSH
46834: LD_INT 1
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 1
46843: NEG
46844: PUSH
46845: LD_INT 0
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 1
46854: NEG
46855: PUSH
46856: LD_INT 1
46858: NEG
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: LD_INT 1
46866: NEG
46867: PUSH
46868: LD_INT 2
46870: NEG
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: PUSH
46876: LD_INT 0
46878: PUSH
46879: LD_INT 2
46881: NEG
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: LD_INT 1
46889: PUSH
46890: LD_INT 1
46892: NEG
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 2
46900: PUSH
46901: LD_INT 1
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 2
46910: PUSH
46911: LD_INT 2
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 1
46920: PUSH
46921: LD_INT 2
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: LD_INT 0
46930: PUSH
46931: LD_INT 2
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 1
46940: NEG
46941: PUSH
46942: LD_INT 1
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 2
46951: NEG
46952: PUSH
46953: LD_INT 1
46955: NEG
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 2
46963: NEG
46964: PUSH
46965: LD_INT 2
46967: NEG
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 2
46975: NEG
46976: PUSH
46977: LD_INT 3
46979: NEG
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 1
46987: NEG
46988: PUSH
46989: LD_INT 3
46991: NEG
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 0
46999: PUSH
47000: LD_INT 3
47002: NEG
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 1
47010: PUSH
47011: LD_INT 2
47013: NEG
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 3
47021: PUSH
47022: LD_INT 2
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: LD_INT 3
47031: PUSH
47032: LD_INT 3
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 2
47041: PUSH
47042: LD_INT 3
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 1
47051: PUSH
47052: LD_INT 3
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 0
47061: PUSH
47062: LD_INT 3
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 1
47071: NEG
47072: PUSH
47073: LD_INT 2
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 3
47082: NEG
47083: PUSH
47084: LD_INT 2
47086: NEG
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 3
47094: NEG
47095: PUSH
47096: LD_INT 3
47098: NEG
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: LIST
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: LIST
47127: LIST
47128: LIST
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47135: LD_ADDR_VAR 0 43
47139: PUSH
47140: LD_INT 0
47142: PUSH
47143: LD_INT 0
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 0
47152: PUSH
47153: LD_INT 1
47155: NEG
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 1
47163: PUSH
47164: LD_INT 0
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: LD_INT 1
47173: PUSH
47174: LD_INT 1
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 0
47183: PUSH
47184: LD_INT 1
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: LD_INT 1
47193: NEG
47194: PUSH
47195: LD_INT 0
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: PUSH
47202: LD_INT 1
47204: NEG
47205: PUSH
47206: LD_INT 1
47208: NEG
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 1
47216: NEG
47217: PUSH
47218: LD_INT 2
47220: NEG
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 0
47228: PUSH
47229: LD_INT 2
47231: NEG
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 1
47239: PUSH
47240: LD_INT 1
47242: NEG
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 2
47250: PUSH
47251: LD_INT 0
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 2
47260: PUSH
47261: LD_INT 1
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 1
47270: PUSH
47271: LD_INT 2
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 0
47280: PUSH
47281: LD_INT 2
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 1
47290: NEG
47291: PUSH
47292: LD_INT 1
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 2
47301: NEG
47302: PUSH
47303: LD_INT 0
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 2
47312: NEG
47313: PUSH
47314: LD_INT 1
47316: NEG
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 1
47324: NEG
47325: PUSH
47326: LD_INT 3
47328: NEG
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 0
47336: PUSH
47337: LD_INT 3
47339: NEG
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 1
47347: PUSH
47348: LD_INT 2
47350: NEG
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 2
47358: PUSH
47359: LD_INT 1
47361: NEG
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 3
47369: PUSH
47370: LD_INT 0
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: LD_INT 3
47379: PUSH
47380: LD_INT 1
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 1
47389: PUSH
47390: LD_INT 3
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 0
47399: PUSH
47400: LD_INT 3
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 1
47409: NEG
47410: PUSH
47411: LD_INT 2
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 2
47420: NEG
47421: PUSH
47422: LD_INT 1
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 3
47431: NEG
47432: PUSH
47433: LD_INT 0
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 3
47442: NEG
47443: PUSH
47444: LD_INT 1
47446: NEG
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47483: LD_ADDR_VAR 0 44
47487: PUSH
47488: LD_INT 0
47490: PUSH
47491: LD_INT 0
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 0
47500: PUSH
47501: LD_INT 1
47503: NEG
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 1
47511: PUSH
47512: LD_INT 0
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 1
47521: PUSH
47522: LD_INT 1
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 0
47531: PUSH
47532: LD_INT 1
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 1
47541: NEG
47542: PUSH
47543: LD_INT 0
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 1
47552: NEG
47553: PUSH
47554: LD_INT 1
47556: NEG
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 1
47564: NEG
47565: PUSH
47566: LD_INT 2
47568: NEG
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 1
47576: PUSH
47577: LD_INT 1
47579: NEG
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 2
47587: PUSH
47588: LD_INT 0
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 2
47597: PUSH
47598: LD_INT 1
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 2
47607: PUSH
47608: LD_INT 2
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 1
47617: PUSH
47618: LD_INT 2
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 1
47627: NEG
47628: PUSH
47629: LD_INT 1
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 2
47638: NEG
47639: PUSH
47640: LD_INT 0
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 2
47649: NEG
47650: PUSH
47651: LD_INT 1
47653: NEG
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 2
47661: NEG
47662: PUSH
47663: LD_INT 2
47665: NEG
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 2
47673: NEG
47674: PUSH
47675: LD_INT 3
47677: NEG
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 2
47685: PUSH
47686: LD_INT 1
47688: NEG
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 3
47696: PUSH
47697: LD_INT 0
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 3
47706: PUSH
47707: LD_INT 1
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 3
47716: PUSH
47717: LD_INT 2
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 3
47726: PUSH
47727: LD_INT 3
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 2
47736: PUSH
47737: LD_INT 3
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 2
47746: NEG
47747: PUSH
47748: LD_INT 1
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 3
47757: NEG
47758: PUSH
47759: LD_INT 0
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 3
47768: NEG
47769: PUSH
47770: LD_INT 1
47772: NEG
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 3
47780: NEG
47781: PUSH
47782: LD_INT 2
47784: NEG
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 3
47792: NEG
47793: PUSH
47794: LD_INT 3
47796: NEG
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: LIST
47810: LIST
47811: LIST
47812: LIST
47813: LIST
47814: LIST
47815: LIST
47816: LIST
47817: LIST
47818: LIST
47819: LIST
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47833: LD_ADDR_VAR 0 45
47837: PUSH
47838: LD_INT 0
47840: PUSH
47841: LD_INT 0
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 0
47850: PUSH
47851: LD_INT 1
47853: NEG
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 1
47861: PUSH
47862: LD_INT 0
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 1
47871: PUSH
47872: LD_INT 1
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 0
47881: PUSH
47882: LD_INT 1
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 1
47891: NEG
47892: PUSH
47893: LD_INT 0
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 1
47902: NEG
47903: PUSH
47904: LD_INT 1
47906: NEG
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 1
47914: NEG
47915: PUSH
47916: LD_INT 2
47918: NEG
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 0
47926: PUSH
47927: LD_INT 2
47929: NEG
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 1
47937: PUSH
47938: LD_INT 1
47940: NEG
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 2
47948: PUSH
47949: LD_INT 1
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 2
47958: PUSH
47959: LD_INT 2
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 1
47968: PUSH
47969: LD_INT 2
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 0
47978: PUSH
47979: LD_INT 2
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 1
47988: NEG
47989: PUSH
47990: LD_INT 1
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 2
47999: NEG
48000: PUSH
48001: LD_INT 1
48003: NEG
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 2
48011: NEG
48012: PUSH
48013: LD_INT 2
48015: NEG
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 2
48023: NEG
48024: PUSH
48025: LD_INT 3
48027: NEG
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 1
48035: NEG
48036: PUSH
48037: LD_INT 3
48039: NEG
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 0
48047: PUSH
48048: LD_INT 3
48050: NEG
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 1
48058: PUSH
48059: LD_INT 2
48061: NEG
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: LD_INT 3
48069: PUSH
48070: LD_INT 2
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 3
48079: PUSH
48080: LD_INT 3
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 2
48089: PUSH
48090: LD_INT 3
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 1
48099: PUSH
48100: LD_INT 3
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PUSH
48107: LD_INT 0
48109: PUSH
48110: LD_INT 3
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: LD_INT 1
48119: NEG
48120: PUSH
48121: LD_INT 2
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 3
48130: NEG
48131: PUSH
48132: LD_INT 2
48134: NEG
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 3
48142: NEG
48143: PUSH
48144: LD_INT 3
48146: NEG
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48183: LD_ADDR_VAR 0 46
48187: PUSH
48188: LD_INT 0
48190: PUSH
48191: LD_INT 0
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 0
48200: PUSH
48201: LD_INT 1
48203: NEG
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 1
48211: PUSH
48212: LD_INT 0
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 1
48221: PUSH
48222: LD_INT 1
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 0
48231: PUSH
48232: LD_INT 1
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 1
48241: NEG
48242: PUSH
48243: LD_INT 0
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 1
48252: NEG
48253: PUSH
48254: LD_INT 1
48256: NEG
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 1
48264: NEG
48265: PUSH
48266: LD_INT 2
48268: NEG
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: LD_INT 0
48276: PUSH
48277: LD_INT 2
48279: NEG
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: LD_INT 1
48287: PUSH
48288: LD_INT 1
48290: NEG
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: LD_INT 2
48298: PUSH
48299: LD_INT 0
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 2
48308: PUSH
48309: LD_INT 1
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: LD_INT 1
48318: PUSH
48319: LD_INT 2
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: PUSH
48326: LD_INT 0
48328: PUSH
48329: LD_INT 2
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_INT 1
48338: NEG
48339: PUSH
48340: LD_INT 1
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 2
48349: NEG
48350: PUSH
48351: LD_INT 0
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 2
48360: NEG
48361: PUSH
48362: LD_INT 1
48364: NEG
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 1
48372: NEG
48373: PUSH
48374: LD_INT 3
48376: NEG
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 0
48384: PUSH
48385: LD_INT 3
48387: NEG
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 1
48395: PUSH
48396: LD_INT 2
48398: NEG
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: LD_INT 2
48406: PUSH
48407: LD_INT 1
48409: NEG
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 3
48417: PUSH
48418: LD_INT 0
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_INT 3
48427: PUSH
48428: LD_INT 1
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 1
48437: PUSH
48438: LD_INT 3
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 0
48447: PUSH
48448: LD_INT 3
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 1
48457: NEG
48458: PUSH
48459: LD_INT 2
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 2
48468: NEG
48469: PUSH
48470: LD_INT 1
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 3
48479: NEG
48480: PUSH
48481: LD_INT 0
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 3
48490: NEG
48491: PUSH
48492: LD_INT 1
48494: NEG
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: LIST
48504: LIST
48505: LIST
48506: LIST
48507: LIST
48508: LIST
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48531: LD_ADDR_VAR 0 47
48535: PUSH
48536: LD_INT 0
48538: PUSH
48539: LD_INT 0
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: LD_INT 0
48548: PUSH
48549: LD_INT 1
48551: NEG
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 1
48559: PUSH
48560: LD_INT 0
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: PUSH
48567: LD_INT 1
48569: PUSH
48570: LD_INT 1
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PUSH
48577: LD_INT 0
48579: PUSH
48580: LD_INT 1
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: LD_INT 1
48589: NEG
48590: PUSH
48591: LD_INT 0
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 1
48600: NEG
48601: PUSH
48602: LD_INT 1
48604: NEG
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: PUSH
48610: LD_INT 1
48612: NEG
48613: PUSH
48614: LD_INT 2
48616: NEG
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: LD_INT 0
48624: PUSH
48625: LD_INT 2
48627: NEG
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PUSH
48633: LD_INT 1
48635: PUSH
48636: LD_INT 1
48638: NEG
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: LD_INT 2
48646: NEG
48647: PUSH
48648: LD_INT 1
48650: NEG
48651: PUSH
48652: EMPTY
48653: LIST
48654: LIST
48655: PUSH
48656: LD_INT 2
48658: NEG
48659: PUSH
48660: LD_INT 2
48662: NEG
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48682: LD_ADDR_VAR 0 48
48686: PUSH
48687: LD_INT 0
48689: PUSH
48690: LD_INT 0
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 0
48699: PUSH
48700: LD_INT 1
48702: NEG
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 1
48710: PUSH
48711: LD_INT 0
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 1
48720: PUSH
48721: LD_INT 1
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 0
48730: PUSH
48731: LD_INT 1
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 1
48740: NEG
48741: PUSH
48742: LD_INT 0
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 1
48751: NEG
48752: PUSH
48753: LD_INT 1
48755: NEG
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 1
48763: NEG
48764: PUSH
48765: LD_INT 2
48767: NEG
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 0
48775: PUSH
48776: LD_INT 2
48778: NEG
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 1
48786: PUSH
48787: LD_INT 1
48789: NEG
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 2
48797: PUSH
48798: LD_INT 0
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 2
48807: PUSH
48808: LD_INT 1
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48829: LD_ADDR_VAR 0 49
48833: PUSH
48834: LD_INT 0
48836: PUSH
48837: LD_INT 0
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 0
48846: PUSH
48847: LD_INT 1
48849: NEG
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 1
48857: PUSH
48858: LD_INT 0
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 1
48867: PUSH
48868: LD_INT 1
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 0
48877: PUSH
48878: LD_INT 1
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 1
48887: NEG
48888: PUSH
48889: LD_INT 0
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 1
48898: NEG
48899: PUSH
48900: LD_INT 1
48902: NEG
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 1
48910: PUSH
48911: LD_INT 1
48913: NEG
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 2
48921: PUSH
48922: LD_INT 0
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 2
48931: PUSH
48932: LD_INT 1
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 2
48941: PUSH
48942: LD_INT 2
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 1
48951: PUSH
48952: LD_INT 2
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48973: LD_ADDR_VAR 0 50
48977: PUSH
48978: LD_INT 0
48980: PUSH
48981: LD_INT 0
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 0
48990: PUSH
48991: LD_INT 1
48993: NEG
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 1
49001: PUSH
49002: LD_INT 0
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: LD_INT 1
49011: PUSH
49012: LD_INT 1
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 0
49021: PUSH
49022: LD_INT 1
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 1
49031: NEG
49032: PUSH
49033: LD_INT 0
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 1
49042: NEG
49043: PUSH
49044: LD_INT 1
49046: NEG
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 2
49054: PUSH
49055: LD_INT 1
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: LD_INT 2
49064: PUSH
49065: LD_INT 2
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 1
49074: PUSH
49075: LD_INT 2
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 0
49084: PUSH
49085: LD_INT 2
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 1
49094: NEG
49095: PUSH
49096: LD_INT 1
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49117: LD_ADDR_VAR 0 51
49121: PUSH
49122: LD_INT 0
49124: PUSH
49125: LD_INT 0
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 0
49134: PUSH
49135: LD_INT 1
49137: NEG
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 1
49145: PUSH
49146: LD_INT 0
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: LD_INT 1
49155: PUSH
49156: LD_INT 1
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 0
49165: PUSH
49166: LD_INT 1
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 1
49175: NEG
49176: PUSH
49177: LD_INT 0
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 1
49186: NEG
49187: PUSH
49188: LD_INT 1
49190: NEG
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 1
49198: PUSH
49199: LD_INT 2
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 0
49208: PUSH
49209: LD_INT 2
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 1
49218: NEG
49219: PUSH
49220: LD_INT 1
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 2
49229: NEG
49230: PUSH
49231: LD_INT 0
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 2
49240: NEG
49241: PUSH
49242: LD_INT 1
49244: NEG
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49264: LD_ADDR_VAR 0 52
49268: PUSH
49269: LD_INT 0
49271: PUSH
49272: LD_INT 0
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 0
49281: PUSH
49282: LD_INT 1
49284: NEG
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: PUSH
49290: LD_INT 1
49292: PUSH
49293: LD_INT 0
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 1
49302: PUSH
49303: LD_INT 1
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 0
49312: PUSH
49313: LD_INT 1
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: LD_INT 1
49322: NEG
49323: PUSH
49324: LD_INT 0
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 1
49333: NEG
49334: PUSH
49335: LD_INT 1
49337: NEG
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: LD_INT 1
49345: NEG
49346: PUSH
49347: LD_INT 2
49349: NEG
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 1
49357: NEG
49358: PUSH
49359: LD_INT 1
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 2
49368: NEG
49369: PUSH
49370: LD_INT 0
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: LD_INT 2
49379: NEG
49380: PUSH
49381: LD_INT 1
49383: NEG
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 2
49391: NEG
49392: PUSH
49393: LD_INT 2
49395: NEG
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49415: LD_ADDR_VAR 0 53
49419: PUSH
49420: LD_INT 0
49422: PUSH
49423: LD_INT 0
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 0
49432: PUSH
49433: LD_INT 1
49435: NEG
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 1
49443: PUSH
49444: LD_INT 0
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 1
49453: PUSH
49454: LD_INT 1
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 0
49463: PUSH
49464: LD_INT 1
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 1
49473: NEG
49474: PUSH
49475: LD_INT 0
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 1
49484: NEG
49485: PUSH
49486: LD_INT 1
49488: NEG
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: LD_INT 1
49496: NEG
49497: PUSH
49498: LD_INT 2
49500: NEG
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 0
49508: PUSH
49509: LD_INT 2
49511: NEG
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 1
49519: PUSH
49520: LD_INT 1
49522: NEG
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 2
49530: PUSH
49531: LD_INT 0
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 2
49540: PUSH
49541: LD_INT 1
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 2
49550: PUSH
49551: LD_INT 2
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: PUSH
49558: LD_INT 1
49560: PUSH
49561: LD_INT 2
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 0
49570: PUSH
49571: LD_INT 2
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 1
49580: NEG
49581: PUSH
49582: LD_INT 1
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 2
49591: NEG
49592: PUSH
49593: LD_INT 0
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 2
49602: NEG
49603: PUSH
49604: LD_INT 1
49606: NEG
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 2
49614: NEG
49615: PUSH
49616: LD_INT 2
49618: NEG
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: LIST
49640: LIST
49641: LIST
49642: LIST
49643: LIST
49644: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49645: LD_ADDR_VAR 0 54
49649: PUSH
49650: LD_INT 0
49652: PUSH
49653: LD_INT 0
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 0
49662: PUSH
49663: LD_INT 1
49665: NEG
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: LD_INT 1
49673: PUSH
49674: LD_INT 0
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 1
49683: PUSH
49684: LD_INT 1
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 0
49693: PUSH
49694: LD_INT 1
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 1
49703: NEG
49704: PUSH
49705: LD_INT 0
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 1
49714: NEG
49715: PUSH
49716: LD_INT 1
49718: NEG
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: LD_INT 1
49726: NEG
49727: PUSH
49728: LD_INT 2
49730: NEG
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 0
49738: PUSH
49739: LD_INT 2
49741: NEG
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: LD_INT 1
49749: PUSH
49750: LD_INT 1
49752: NEG
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 2
49760: PUSH
49761: LD_INT 0
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: LD_INT 2
49770: PUSH
49771: LD_INT 1
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 2
49780: PUSH
49781: LD_INT 2
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 1
49790: PUSH
49791: LD_INT 2
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 0
49800: PUSH
49801: LD_INT 2
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 1
49810: NEG
49811: PUSH
49812: LD_INT 1
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 2
49821: NEG
49822: PUSH
49823: LD_INT 0
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 2
49832: NEG
49833: PUSH
49834: LD_INT 1
49836: NEG
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 2
49844: NEG
49845: PUSH
49846: LD_INT 2
49848: NEG
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49875: LD_ADDR_VAR 0 55
49879: PUSH
49880: LD_INT 0
49882: PUSH
49883: LD_INT 0
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 0
49892: PUSH
49893: LD_INT 1
49895: NEG
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 1
49903: PUSH
49904: LD_INT 0
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 1
49913: PUSH
49914: LD_INT 1
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 0
49923: PUSH
49924: LD_INT 1
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 1
49933: NEG
49934: PUSH
49935: LD_INT 0
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 1
49944: NEG
49945: PUSH
49946: LD_INT 1
49948: NEG
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 1
49956: NEG
49957: PUSH
49958: LD_INT 2
49960: NEG
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 0
49968: PUSH
49969: LD_INT 2
49971: NEG
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: LD_INT 1
49979: PUSH
49980: LD_INT 1
49982: NEG
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: LD_INT 2
49990: PUSH
49991: LD_INT 0
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: LD_INT 2
50000: PUSH
50001: LD_INT 1
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 2
50010: PUSH
50011: LD_INT 2
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 1
50020: PUSH
50021: LD_INT 2
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 0
50030: PUSH
50031: LD_INT 2
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 1
50040: NEG
50041: PUSH
50042: LD_INT 1
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 2
50051: NEG
50052: PUSH
50053: LD_INT 0
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 2
50062: NEG
50063: PUSH
50064: LD_INT 1
50066: NEG
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 2
50074: NEG
50075: PUSH
50076: LD_INT 2
50078: NEG
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: LIST
50101: LIST
50102: LIST
50103: LIST
50104: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50105: LD_ADDR_VAR 0 56
50109: PUSH
50110: LD_INT 0
50112: PUSH
50113: LD_INT 0
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 0
50122: PUSH
50123: LD_INT 1
50125: NEG
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 1
50133: PUSH
50134: LD_INT 0
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 1
50143: PUSH
50144: LD_INT 1
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 0
50153: PUSH
50154: LD_INT 1
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 1
50163: NEG
50164: PUSH
50165: LD_INT 0
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 1
50174: NEG
50175: PUSH
50176: LD_INT 1
50178: NEG
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 1
50186: NEG
50187: PUSH
50188: LD_INT 2
50190: NEG
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_INT 0
50198: PUSH
50199: LD_INT 2
50201: NEG
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 1
50209: PUSH
50210: LD_INT 1
50212: NEG
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 2
50220: PUSH
50221: LD_INT 0
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: PUSH
50228: LD_INT 2
50230: PUSH
50231: LD_INT 1
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: PUSH
50238: LD_INT 2
50240: PUSH
50241: LD_INT 2
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 1
50250: PUSH
50251: LD_INT 2
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 0
50260: PUSH
50261: LD_INT 2
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: PUSH
50268: LD_INT 1
50270: NEG
50271: PUSH
50272: LD_INT 1
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: LD_INT 2
50281: NEG
50282: PUSH
50283: LD_INT 0
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 2
50292: NEG
50293: PUSH
50294: LD_INT 1
50296: NEG
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 2
50304: NEG
50305: PUSH
50306: LD_INT 2
50308: NEG
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50335: LD_ADDR_VAR 0 57
50339: PUSH
50340: LD_INT 0
50342: PUSH
50343: LD_INT 0
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 0
50352: PUSH
50353: LD_INT 1
50355: NEG
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 1
50363: PUSH
50364: LD_INT 0
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 1
50373: PUSH
50374: LD_INT 1
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 0
50383: PUSH
50384: LD_INT 1
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 1
50393: NEG
50394: PUSH
50395: LD_INT 0
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 1
50404: NEG
50405: PUSH
50406: LD_INT 1
50408: NEG
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 1
50416: NEG
50417: PUSH
50418: LD_INT 2
50420: NEG
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PUSH
50426: LD_INT 0
50428: PUSH
50429: LD_INT 2
50431: NEG
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: LD_INT 1
50439: PUSH
50440: LD_INT 1
50442: NEG
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: PUSH
50448: LD_INT 2
50450: PUSH
50451: LD_INT 0
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 2
50460: PUSH
50461: LD_INT 1
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: LD_INT 2
50470: PUSH
50471: LD_INT 2
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 1
50480: PUSH
50481: LD_INT 2
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 0
50490: PUSH
50491: LD_INT 2
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 1
50500: NEG
50501: PUSH
50502: LD_INT 1
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 2
50511: NEG
50512: PUSH
50513: LD_INT 0
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 2
50522: NEG
50523: PUSH
50524: LD_INT 1
50526: NEG
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 2
50534: NEG
50535: PUSH
50536: LD_INT 2
50538: NEG
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50565: LD_ADDR_VAR 0 58
50569: PUSH
50570: LD_INT 0
50572: PUSH
50573: LD_INT 0
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: LD_INT 0
50582: PUSH
50583: LD_INT 1
50585: NEG
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 1
50593: PUSH
50594: LD_INT 0
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 1
50603: PUSH
50604: LD_INT 1
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 0
50613: PUSH
50614: LD_INT 1
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 1
50623: NEG
50624: PUSH
50625: LD_INT 0
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 1
50634: NEG
50635: PUSH
50636: LD_INT 1
50638: NEG
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 1
50646: NEG
50647: PUSH
50648: LD_INT 2
50650: NEG
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 0
50658: PUSH
50659: LD_INT 2
50661: NEG
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 1
50669: PUSH
50670: LD_INT 1
50672: NEG
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: LD_INT 2
50680: PUSH
50681: LD_INT 0
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 2
50690: PUSH
50691: LD_INT 1
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 2
50700: PUSH
50701: LD_INT 2
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 1
50710: PUSH
50711: LD_INT 2
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: LD_INT 0
50720: PUSH
50721: LD_INT 2
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 1
50730: NEG
50731: PUSH
50732: LD_INT 1
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: LD_INT 2
50741: NEG
50742: PUSH
50743: LD_INT 0
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 2
50752: NEG
50753: PUSH
50754: LD_INT 1
50756: NEG
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 2
50764: NEG
50765: PUSH
50766: LD_INT 2
50768: NEG
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50795: LD_ADDR_VAR 0 59
50799: PUSH
50800: LD_INT 0
50802: PUSH
50803: LD_INT 0
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 0
50812: PUSH
50813: LD_INT 1
50815: NEG
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 1
50823: PUSH
50824: LD_INT 0
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: LD_INT 1
50833: PUSH
50834: LD_INT 1
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: LD_INT 0
50843: PUSH
50844: LD_INT 1
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 1
50853: NEG
50854: PUSH
50855: LD_INT 0
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 1
50864: NEG
50865: PUSH
50866: LD_INT 1
50868: NEG
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50883: LD_ADDR_VAR 0 60
50887: PUSH
50888: LD_INT 0
50890: PUSH
50891: LD_INT 0
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 0
50900: PUSH
50901: LD_INT 1
50903: NEG
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 1
50911: PUSH
50912: LD_INT 0
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 1
50921: PUSH
50922: LD_INT 1
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 0
50931: PUSH
50932: LD_INT 1
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 1
50941: NEG
50942: PUSH
50943: LD_INT 0
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 1
50952: NEG
50953: PUSH
50954: LD_INT 1
50956: NEG
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50971: LD_ADDR_VAR 0 61
50975: PUSH
50976: LD_INT 0
50978: PUSH
50979: LD_INT 0
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 0
50988: PUSH
50989: LD_INT 1
50991: NEG
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 1
50999: PUSH
51000: LD_INT 0
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 1
51009: PUSH
51010: LD_INT 1
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 0
51019: PUSH
51020: LD_INT 1
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 1
51029: NEG
51030: PUSH
51031: LD_INT 0
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 1
51040: NEG
51041: PUSH
51042: LD_INT 1
51044: NEG
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51059: LD_ADDR_VAR 0 62
51063: PUSH
51064: LD_INT 0
51066: PUSH
51067: LD_INT 0
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 0
51076: PUSH
51077: LD_INT 1
51079: NEG
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 1
51087: PUSH
51088: LD_INT 0
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 1
51097: PUSH
51098: LD_INT 1
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 0
51107: PUSH
51108: LD_INT 1
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 1
51117: NEG
51118: PUSH
51119: LD_INT 0
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 1
51128: NEG
51129: PUSH
51130: LD_INT 1
51132: NEG
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51147: LD_ADDR_VAR 0 63
51151: PUSH
51152: LD_INT 0
51154: PUSH
51155: LD_INT 0
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 0
51164: PUSH
51165: LD_INT 1
51167: NEG
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 1
51175: PUSH
51176: LD_INT 0
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 1
51185: PUSH
51186: LD_INT 1
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 0
51195: PUSH
51196: LD_INT 1
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 1
51205: NEG
51206: PUSH
51207: LD_INT 0
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 1
51216: NEG
51217: PUSH
51218: LD_INT 1
51220: NEG
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51235: LD_ADDR_VAR 0 64
51239: PUSH
51240: LD_INT 0
51242: PUSH
51243: LD_INT 0
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 0
51252: PUSH
51253: LD_INT 1
51255: NEG
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 1
51263: PUSH
51264: LD_INT 0
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 1
51273: PUSH
51274: LD_INT 1
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 0
51283: PUSH
51284: LD_INT 1
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 1
51293: NEG
51294: PUSH
51295: LD_INT 0
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 1
51304: NEG
51305: PUSH
51306: LD_INT 1
51308: NEG
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: ST_TO_ADDR
// end ; 1 :
51323: GO 57220
51325: LD_INT 1
51327: DOUBLE
51328: EQUAL
51329: IFTRUE 51333
51331: GO 53956
51333: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51334: LD_ADDR_VAR 0 11
51338: PUSH
51339: LD_INT 1
51341: NEG
51342: PUSH
51343: LD_INT 3
51345: NEG
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: LD_INT 0
51353: PUSH
51354: LD_INT 3
51356: NEG
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 1
51364: PUSH
51365: LD_INT 2
51367: NEG
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: LIST
51377: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51378: LD_ADDR_VAR 0 12
51382: PUSH
51383: LD_INT 2
51385: PUSH
51386: LD_INT 1
51388: NEG
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 3
51396: PUSH
51397: LD_INT 0
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: LD_INT 3
51406: PUSH
51407: LD_INT 1
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: LIST
51418: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51419: LD_ADDR_VAR 0 13
51423: PUSH
51424: LD_INT 3
51426: PUSH
51427: LD_INT 2
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 3
51436: PUSH
51437: LD_INT 3
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 2
51446: PUSH
51447: LD_INT 3
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: LIST
51458: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51459: LD_ADDR_VAR 0 14
51463: PUSH
51464: LD_INT 1
51466: PUSH
51467: LD_INT 3
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 0
51476: PUSH
51477: LD_INT 3
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 1
51486: NEG
51487: PUSH
51488: LD_INT 2
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: LIST
51499: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51500: LD_ADDR_VAR 0 15
51504: PUSH
51505: LD_INT 2
51507: NEG
51508: PUSH
51509: LD_INT 1
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 3
51518: NEG
51519: PUSH
51520: LD_INT 0
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: PUSH
51527: LD_INT 3
51529: NEG
51530: PUSH
51531: LD_INT 1
51533: NEG
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: LIST
51543: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51544: LD_ADDR_VAR 0 16
51548: PUSH
51549: LD_INT 2
51551: NEG
51552: PUSH
51553: LD_INT 3
51555: NEG
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 3
51563: NEG
51564: PUSH
51565: LD_INT 2
51567: NEG
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 3
51575: NEG
51576: PUSH
51577: LD_INT 3
51579: NEG
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: LIST
51589: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51590: LD_ADDR_VAR 0 17
51594: PUSH
51595: LD_INT 1
51597: NEG
51598: PUSH
51599: LD_INT 3
51601: NEG
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 0
51609: PUSH
51610: LD_INT 3
51612: NEG
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 1
51620: PUSH
51621: LD_INT 2
51623: NEG
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: LIST
51633: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51634: LD_ADDR_VAR 0 18
51638: PUSH
51639: LD_INT 2
51641: PUSH
51642: LD_INT 1
51644: NEG
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 3
51652: PUSH
51653: LD_INT 0
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 3
51662: PUSH
51663: LD_INT 1
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: LIST
51674: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51675: LD_ADDR_VAR 0 19
51679: PUSH
51680: LD_INT 3
51682: PUSH
51683: LD_INT 2
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 3
51692: PUSH
51693: LD_INT 3
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 2
51702: PUSH
51703: LD_INT 3
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: LIST
51714: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51715: LD_ADDR_VAR 0 20
51719: PUSH
51720: LD_INT 1
51722: PUSH
51723: LD_INT 3
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 0
51732: PUSH
51733: LD_INT 3
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 1
51742: NEG
51743: PUSH
51744: LD_INT 2
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: LIST
51755: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51756: LD_ADDR_VAR 0 21
51760: PUSH
51761: LD_INT 2
51763: NEG
51764: PUSH
51765: LD_INT 1
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: LD_INT 3
51774: NEG
51775: PUSH
51776: LD_INT 0
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 3
51785: NEG
51786: PUSH
51787: LD_INT 1
51789: NEG
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: LIST
51799: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51800: LD_ADDR_VAR 0 22
51804: PUSH
51805: LD_INT 2
51807: NEG
51808: PUSH
51809: LD_INT 3
51811: NEG
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 3
51819: NEG
51820: PUSH
51821: LD_INT 2
51823: NEG
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 3
51831: NEG
51832: PUSH
51833: LD_INT 3
51835: NEG
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: LIST
51845: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
51846: LD_ADDR_VAR 0 23
51850: PUSH
51851: LD_INT 0
51853: PUSH
51854: LD_INT 3
51856: NEG
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 1
51864: NEG
51865: PUSH
51866: LD_INT 4
51868: NEG
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 1
51876: PUSH
51877: LD_INT 3
51879: NEG
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: LIST
51889: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
51890: LD_ADDR_VAR 0 24
51894: PUSH
51895: LD_INT 3
51897: PUSH
51898: LD_INT 0
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 3
51907: PUSH
51908: LD_INT 1
51910: NEG
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 4
51918: PUSH
51919: LD_INT 1
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: LIST
51930: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
51931: LD_ADDR_VAR 0 25
51935: PUSH
51936: LD_INT 3
51938: PUSH
51939: LD_INT 3
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 4
51948: PUSH
51949: LD_INT 3
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 3
51958: PUSH
51959: LD_INT 4
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: LIST
51970: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
51971: LD_ADDR_VAR 0 26
51975: PUSH
51976: LD_INT 0
51978: PUSH
51979: LD_INT 3
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 1
51988: PUSH
51989: LD_INT 4
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 1
51998: NEG
51999: PUSH
52000: LD_INT 3
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: LIST
52011: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
52012: LD_ADDR_VAR 0 27
52016: PUSH
52017: LD_INT 3
52019: NEG
52020: PUSH
52021: LD_INT 0
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 3
52030: NEG
52031: PUSH
52032: LD_INT 1
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 4
52041: NEG
52042: PUSH
52043: LD_INT 1
52045: NEG
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: LIST
52055: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
52056: LD_ADDR_VAR 0 28
52060: PUSH
52061: LD_INT 3
52063: NEG
52064: PUSH
52065: LD_INT 3
52067: NEG
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 3
52075: NEG
52076: PUSH
52077: LD_INT 4
52079: NEG
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 4
52087: NEG
52088: PUSH
52089: LD_INT 3
52091: NEG
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: LIST
52101: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
52102: LD_ADDR_VAR 0 29
52106: PUSH
52107: LD_INT 1
52109: NEG
52110: PUSH
52111: LD_INT 3
52113: NEG
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 0
52121: PUSH
52122: LD_INT 3
52124: NEG
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 1
52132: PUSH
52133: LD_INT 2
52135: NEG
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 1
52143: NEG
52144: PUSH
52145: LD_INT 4
52147: NEG
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 0
52155: PUSH
52156: LD_INT 4
52158: NEG
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 1
52166: PUSH
52167: LD_INT 3
52169: NEG
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 1
52177: NEG
52178: PUSH
52179: LD_INT 5
52181: NEG
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PUSH
52187: LD_INT 0
52189: PUSH
52190: LD_INT 5
52192: NEG
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 1
52200: PUSH
52201: LD_INT 4
52203: NEG
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 1
52211: NEG
52212: PUSH
52213: LD_INT 6
52215: NEG
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 0
52223: PUSH
52224: LD_INT 6
52226: NEG
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 1
52234: PUSH
52235: LD_INT 5
52237: NEG
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: LIST
52256: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
52257: LD_ADDR_VAR 0 30
52261: PUSH
52262: LD_INT 2
52264: PUSH
52265: LD_INT 1
52267: NEG
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 3
52275: PUSH
52276: LD_INT 0
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 3
52285: PUSH
52286: LD_INT 1
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: LD_INT 3
52295: PUSH
52296: LD_INT 1
52298: NEG
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: LD_INT 4
52306: PUSH
52307: LD_INT 0
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 4
52316: PUSH
52317: LD_INT 1
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: LD_INT 4
52326: PUSH
52327: LD_INT 1
52329: NEG
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 5
52337: PUSH
52338: LD_INT 0
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 5
52347: PUSH
52348: LD_INT 1
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 5
52357: PUSH
52358: LD_INT 1
52360: NEG
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 6
52368: PUSH
52369: LD_INT 0
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 6
52378: PUSH
52379: LD_INT 1
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
52400: LD_ADDR_VAR 0 31
52404: PUSH
52405: LD_INT 3
52407: PUSH
52408: LD_INT 2
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 3
52417: PUSH
52418: LD_INT 3
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 2
52427: PUSH
52428: LD_INT 3
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 4
52437: PUSH
52438: LD_INT 3
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 4
52447: PUSH
52448: LD_INT 4
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 3
52457: PUSH
52458: LD_INT 4
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: LD_INT 5
52467: PUSH
52468: LD_INT 4
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 5
52477: PUSH
52478: LD_INT 5
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 4
52487: PUSH
52488: LD_INT 5
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 6
52497: PUSH
52498: LD_INT 5
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 6
52507: PUSH
52508: LD_INT 6
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 5
52517: PUSH
52518: LD_INT 6
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
52539: LD_ADDR_VAR 0 32
52543: PUSH
52544: LD_INT 1
52546: PUSH
52547: LD_INT 3
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 0
52556: PUSH
52557: LD_INT 3
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 1
52566: NEG
52567: PUSH
52568: LD_INT 2
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 1
52577: PUSH
52578: LD_INT 4
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 0
52587: PUSH
52588: LD_INT 4
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 1
52597: NEG
52598: PUSH
52599: LD_INT 3
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 1
52608: PUSH
52609: LD_INT 5
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 0
52618: PUSH
52619: LD_INT 5
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 1
52628: NEG
52629: PUSH
52630: LD_INT 4
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 1
52639: PUSH
52640: LD_INT 6
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 0
52649: PUSH
52650: LD_INT 6
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 1
52659: NEG
52660: PUSH
52661: LD_INT 5
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
52682: LD_ADDR_VAR 0 33
52686: PUSH
52687: LD_INT 2
52689: NEG
52690: PUSH
52691: LD_INT 1
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 3
52700: NEG
52701: PUSH
52702: LD_INT 0
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 3
52711: NEG
52712: PUSH
52713: LD_INT 1
52715: NEG
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 3
52723: NEG
52724: PUSH
52725: LD_INT 1
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 4
52734: NEG
52735: PUSH
52736: LD_INT 0
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 4
52745: NEG
52746: PUSH
52747: LD_INT 1
52749: NEG
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 4
52757: NEG
52758: PUSH
52759: LD_INT 1
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 5
52768: NEG
52769: PUSH
52770: LD_INT 0
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 5
52779: NEG
52780: PUSH
52781: LD_INT 1
52783: NEG
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 5
52791: NEG
52792: PUSH
52793: LD_INT 1
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 6
52802: NEG
52803: PUSH
52804: LD_INT 0
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 6
52813: NEG
52814: PUSH
52815: LD_INT 1
52817: NEG
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
52837: LD_ADDR_VAR 0 34
52841: PUSH
52842: LD_INT 2
52844: NEG
52845: PUSH
52846: LD_INT 3
52848: NEG
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 3
52856: NEG
52857: PUSH
52858: LD_INT 2
52860: NEG
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: LD_INT 3
52868: NEG
52869: PUSH
52870: LD_INT 3
52872: NEG
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 3
52880: NEG
52881: PUSH
52882: LD_INT 4
52884: NEG
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 4
52892: NEG
52893: PUSH
52894: LD_INT 3
52896: NEG
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 4
52904: NEG
52905: PUSH
52906: LD_INT 4
52908: NEG
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 4
52916: NEG
52917: PUSH
52918: LD_INT 5
52920: NEG
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: LD_INT 5
52928: NEG
52929: PUSH
52930: LD_INT 4
52932: NEG
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 5
52940: NEG
52941: PUSH
52942: LD_INT 5
52944: NEG
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 5
52952: NEG
52953: PUSH
52954: LD_INT 6
52956: NEG
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 6
52964: NEG
52965: PUSH
52966: LD_INT 5
52968: NEG
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 6
52976: NEG
52977: PUSH
52978: LD_INT 6
52980: NEG
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
53000: LD_ADDR_VAR 0 41
53004: PUSH
53005: LD_INT 0
53007: PUSH
53008: LD_INT 2
53010: NEG
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 1
53018: NEG
53019: PUSH
53020: LD_INT 3
53022: NEG
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: LD_INT 1
53030: PUSH
53031: LD_INT 2
53033: NEG
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: LIST
53043: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
53044: LD_ADDR_VAR 0 42
53048: PUSH
53049: LD_INT 2
53051: PUSH
53052: LD_INT 0
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 2
53061: PUSH
53062: LD_INT 1
53064: NEG
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 3
53072: PUSH
53073: LD_INT 1
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: LIST
53084: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
53085: LD_ADDR_VAR 0 43
53089: PUSH
53090: LD_INT 2
53092: PUSH
53093: LD_INT 2
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 3
53102: PUSH
53103: LD_INT 2
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 2
53112: PUSH
53113: LD_INT 3
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: LIST
53124: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
53125: LD_ADDR_VAR 0 44
53129: PUSH
53130: LD_INT 0
53132: PUSH
53133: LD_INT 2
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 1
53142: PUSH
53143: LD_INT 3
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 1
53152: NEG
53153: PUSH
53154: LD_INT 2
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: LIST
53165: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53166: LD_ADDR_VAR 0 45
53170: PUSH
53171: LD_INT 2
53173: NEG
53174: PUSH
53175: LD_INT 0
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: LD_INT 2
53184: NEG
53185: PUSH
53186: LD_INT 1
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 3
53195: NEG
53196: PUSH
53197: LD_INT 1
53199: NEG
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: LIST
53209: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
53210: LD_ADDR_VAR 0 46
53214: PUSH
53215: LD_INT 2
53217: NEG
53218: PUSH
53219: LD_INT 2
53221: NEG
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 2
53229: NEG
53230: PUSH
53231: LD_INT 3
53233: NEG
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 3
53241: NEG
53242: PUSH
53243: LD_INT 2
53245: NEG
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: LIST
53255: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
53256: LD_ADDR_VAR 0 47
53260: PUSH
53261: LD_INT 2
53263: NEG
53264: PUSH
53265: LD_INT 3
53267: NEG
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 1
53275: NEG
53276: PUSH
53277: LD_INT 3
53279: NEG
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53289: LD_ADDR_VAR 0 48
53293: PUSH
53294: LD_INT 1
53296: PUSH
53297: LD_INT 2
53299: NEG
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 2
53307: PUSH
53308: LD_INT 1
53310: NEG
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
53320: LD_ADDR_VAR 0 49
53324: PUSH
53325: LD_INT 3
53327: PUSH
53328: LD_INT 1
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 3
53337: PUSH
53338: LD_INT 2
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
53349: LD_ADDR_VAR 0 50
53353: PUSH
53354: LD_INT 2
53356: PUSH
53357: LD_INT 3
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 1
53366: PUSH
53367: LD_INT 3
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53378: LD_ADDR_VAR 0 51
53382: PUSH
53383: LD_INT 1
53385: NEG
53386: PUSH
53387: LD_INT 2
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 2
53396: NEG
53397: PUSH
53398: LD_INT 1
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53409: LD_ADDR_VAR 0 52
53413: PUSH
53414: LD_INT 3
53416: NEG
53417: PUSH
53418: LD_INT 1
53420: NEG
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 3
53428: NEG
53429: PUSH
53430: LD_INT 2
53432: NEG
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53442: LD_ADDR_VAR 0 53
53446: PUSH
53447: LD_INT 1
53449: NEG
53450: PUSH
53451: LD_INT 3
53453: NEG
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 0
53461: PUSH
53462: LD_INT 3
53464: NEG
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 1
53472: PUSH
53473: LD_INT 2
53475: NEG
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: LIST
53485: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53486: LD_ADDR_VAR 0 54
53490: PUSH
53491: LD_INT 2
53493: PUSH
53494: LD_INT 1
53496: NEG
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 3
53504: PUSH
53505: LD_INT 0
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 3
53514: PUSH
53515: LD_INT 1
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: LIST
53526: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53527: LD_ADDR_VAR 0 55
53531: PUSH
53532: LD_INT 3
53534: PUSH
53535: LD_INT 2
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 3
53544: PUSH
53545: LD_INT 3
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 2
53554: PUSH
53555: LD_INT 3
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: LIST
53566: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53567: LD_ADDR_VAR 0 56
53571: PUSH
53572: LD_INT 1
53574: PUSH
53575: LD_INT 3
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 0
53584: PUSH
53585: LD_INT 3
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 1
53594: NEG
53595: PUSH
53596: LD_INT 2
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: LIST
53607: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53608: LD_ADDR_VAR 0 57
53612: PUSH
53613: LD_INT 2
53615: NEG
53616: PUSH
53617: LD_INT 1
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 3
53626: NEG
53627: PUSH
53628: LD_INT 0
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 3
53637: NEG
53638: PUSH
53639: LD_INT 1
53641: NEG
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: LIST
53651: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53652: LD_ADDR_VAR 0 58
53656: PUSH
53657: LD_INT 2
53659: NEG
53660: PUSH
53661: LD_INT 3
53663: NEG
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 3
53671: NEG
53672: PUSH
53673: LD_INT 2
53675: NEG
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 3
53683: NEG
53684: PUSH
53685: LD_INT 3
53687: NEG
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: LIST
53697: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
53698: LD_ADDR_VAR 0 59
53702: PUSH
53703: LD_INT 1
53705: NEG
53706: PUSH
53707: LD_INT 2
53709: NEG
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 0
53717: PUSH
53718: LD_INT 2
53720: NEG
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 1
53728: PUSH
53729: LD_INT 1
53731: NEG
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: LIST
53741: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53742: LD_ADDR_VAR 0 60
53746: PUSH
53747: LD_INT 1
53749: PUSH
53750: LD_INT 1
53752: NEG
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 2
53760: PUSH
53761: LD_INT 0
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 2
53770: PUSH
53771: LD_INT 1
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: LIST
53782: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53783: LD_ADDR_VAR 0 61
53787: PUSH
53788: LD_INT 2
53790: PUSH
53791: LD_INT 1
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 2
53800: PUSH
53801: LD_INT 2
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 1
53810: PUSH
53811: LD_INT 2
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: LIST
53822: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53823: LD_ADDR_VAR 0 62
53827: PUSH
53828: LD_INT 1
53830: PUSH
53831: LD_INT 2
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 0
53840: PUSH
53841: LD_INT 2
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 1
53850: NEG
53851: PUSH
53852: LD_INT 1
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: LIST
53863: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53864: LD_ADDR_VAR 0 63
53868: PUSH
53869: LD_INT 1
53871: NEG
53872: PUSH
53873: LD_INT 1
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: LD_INT 2
53882: NEG
53883: PUSH
53884: LD_INT 0
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 2
53893: NEG
53894: PUSH
53895: LD_INT 1
53897: NEG
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: LIST
53907: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53908: LD_ADDR_VAR 0 64
53912: PUSH
53913: LD_INT 1
53915: NEG
53916: PUSH
53917: LD_INT 2
53919: NEG
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 2
53927: NEG
53928: PUSH
53929: LD_INT 1
53931: NEG
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 2
53939: NEG
53940: PUSH
53941: LD_INT 2
53943: NEG
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: LIST
53953: ST_TO_ADDR
// end ; 2 :
53954: GO 57220
53956: LD_INT 2
53958: DOUBLE
53959: EQUAL
53960: IFTRUE 53964
53962: GO 57219
53964: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
53965: LD_ADDR_VAR 0 29
53969: PUSH
53970: LD_INT 4
53972: PUSH
53973: LD_INT 0
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 4
53982: PUSH
53983: LD_INT 1
53985: NEG
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 5
53993: PUSH
53994: LD_INT 0
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 5
54003: PUSH
54004: LD_INT 1
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 4
54013: PUSH
54014: LD_INT 1
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 3
54023: PUSH
54024: LD_INT 0
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 3
54033: PUSH
54034: LD_INT 1
54036: NEG
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 3
54044: PUSH
54045: LD_INT 2
54047: NEG
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 5
54055: PUSH
54056: LD_INT 2
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 3
54065: PUSH
54066: LD_INT 3
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: LD_INT 3
54075: PUSH
54076: LD_INT 2
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 4
54085: PUSH
54086: LD_INT 3
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 4
54095: PUSH
54096: LD_INT 4
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 3
54105: PUSH
54106: LD_INT 4
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 2
54115: PUSH
54116: LD_INT 3
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 2
54125: PUSH
54126: LD_INT 2
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 4
54135: PUSH
54136: LD_INT 2
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 2
54145: PUSH
54146: LD_INT 4
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 0
54155: PUSH
54156: LD_INT 4
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 0
54165: PUSH
54166: LD_INT 3
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 1
54175: PUSH
54176: LD_INT 4
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 1
54185: PUSH
54186: LD_INT 5
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 0
54195: PUSH
54196: LD_INT 5
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 1
54205: NEG
54206: PUSH
54207: LD_INT 4
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 1
54216: NEG
54217: PUSH
54218: LD_INT 3
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 2
54227: PUSH
54228: LD_INT 5
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 2
54237: NEG
54238: PUSH
54239: LD_INT 3
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 3
54248: NEG
54249: PUSH
54250: LD_INT 0
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 3
54259: NEG
54260: PUSH
54261: LD_INT 1
54263: NEG
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 2
54271: NEG
54272: PUSH
54273: LD_INT 0
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 2
54282: NEG
54283: PUSH
54284: LD_INT 1
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 3
54293: NEG
54294: PUSH
54295: LD_INT 1
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 4
54304: NEG
54305: PUSH
54306: LD_INT 0
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 4
54315: NEG
54316: PUSH
54317: LD_INT 1
54319: NEG
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 4
54327: NEG
54328: PUSH
54329: LD_INT 2
54331: NEG
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 2
54339: NEG
54340: PUSH
54341: LD_INT 2
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 4
54350: NEG
54351: PUSH
54352: LD_INT 4
54354: NEG
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 4
54362: NEG
54363: PUSH
54364: LD_INT 5
54366: NEG
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 3
54374: NEG
54375: PUSH
54376: LD_INT 4
54378: NEG
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 3
54386: NEG
54387: PUSH
54388: LD_INT 3
54390: NEG
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 4
54398: NEG
54399: PUSH
54400: LD_INT 3
54402: NEG
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 5
54410: NEG
54411: PUSH
54412: LD_INT 4
54414: NEG
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 5
54422: NEG
54423: PUSH
54424: LD_INT 5
54426: NEG
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 3
54434: NEG
54435: PUSH
54436: LD_INT 5
54438: NEG
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 5
54446: NEG
54447: PUSH
54448: LD_INT 3
54450: NEG
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: LIST
54460: LIST
54461: LIST
54462: LIST
54463: LIST
54464: LIST
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: LIST
54470: LIST
54471: LIST
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: LIST
54478: LIST
54479: LIST
54480: LIST
54481: LIST
54482: LIST
54483: LIST
54484: LIST
54485: LIST
54486: LIST
54487: LIST
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: LIST
54493: LIST
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
54503: LD_ADDR_VAR 0 30
54507: PUSH
54508: LD_INT 4
54510: PUSH
54511: LD_INT 4
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 4
54520: PUSH
54521: LD_INT 3
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 5
54530: PUSH
54531: LD_INT 4
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 5
54540: PUSH
54541: LD_INT 5
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 4
54550: PUSH
54551: LD_INT 5
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: LD_INT 3
54560: PUSH
54561: LD_INT 4
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 3
54570: PUSH
54571: LD_INT 3
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 5
54580: PUSH
54581: LD_INT 3
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 3
54590: PUSH
54591: LD_INT 5
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 0
54600: PUSH
54601: LD_INT 3
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 0
54610: PUSH
54611: LD_INT 2
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 1
54620: PUSH
54621: LD_INT 3
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 1
54630: PUSH
54631: LD_INT 4
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 0
54640: PUSH
54641: LD_INT 4
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 1
54650: NEG
54651: PUSH
54652: LD_INT 3
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 1
54661: NEG
54662: PUSH
54663: LD_INT 2
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 2
54672: PUSH
54673: LD_INT 4
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 2
54682: NEG
54683: PUSH
54684: LD_INT 2
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 4
54693: NEG
54694: PUSH
54695: LD_INT 0
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 4
54704: NEG
54705: PUSH
54706: LD_INT 1
54708: NEG
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: LD_INT 3
54716: NEG
54717: PUSH
54718: LD_INT 0
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 3
54727: NEG
54728: PUSH
54729: LD_INT 1
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 4
54738: NEG
54739: PUSH
54740: LD_INT 1
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 5
54749: NEG
54750: PUSH
54751: LD_INT 0
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 5
54760: NEG
54761: PUSH
54762: LD_INT 1
54764: NEG
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 5
54772: NEG
54773: PUSH
54774: LD_INT 2
54776: NEG
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 3
54784: NEG
54785: PUSH
54786: LD_INT 2
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 3
54795: NEG
54796: PUSH
54797: LD_INT 3
54799: NEG
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 3
54807: NEG
54808: PUSH
54809: LD_INT 4
54811: NEG
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 2
54819: NEG
54820: PUSH
54821: LD_INT 3
54823: NEG
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 2
54831: NEG
54832: PUSH
54833: LD_INT 2
54835: NEG
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 3
54843: NEG
54844: PUSH
54845: LD_INT 2
54847: NEG
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 4
54855: NEG
54856: PUSH
54857: LD_INT 3
54859: NEG
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 4
54867: NEG
54868: PUSH
54869: LD_INT 4
54871: NEG
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 2
54879: NEG
54880: PUSH
54881: LD_INT 4
54883: NEG
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 4
54891: NEG
54892: PUSH
54893: LD_INT 2
54895: NEG
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 0
54903: PUSH
54904: LD_INT 4
54906: NEG
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 0
54914: PUSH
54915: LD_INT 5
54917: NEG
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 1
54925: PUSH
54926: LD_INT 4
54928: NEG
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 1
54936: PUSH
54937: LD_INT 3
54939: NEG
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: LD_INT 0
54947: PUSH
54948: LD_INT 3
54950: NEG
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: LD_INT 1
54958: NEG
54959: PUSH
54960: LD_INT 4
54962: NEG
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 1
54970: NEG
54971: PUSH
54972: LD_INT 5
54974: NEG
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 2
54982: PUSH
54983: LD_INT 3
54985: NEG
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 2
54993: NEG
54994: PUSH
54995: LD_INT 5
54997: NEG
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: LIST
55039: LIST
55040: LIST
55041: LIST
55042: LIST
55043: LIST
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
55050: LD_ADDR_VAR 0 31
55054: PUSH
55055: LD_INT 0
55057: PUSH
55058: LD_INT 4
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 0
55067: PUSH
55068: LD_INT 3
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 1
55077: PUSH
55078: LD_INT 4
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 1
55087: PUSH
55088: LD_INT 5
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: LD_INT 0
55097: PUSH
55098: LD_INT 5
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 1
55107: NEG
55108: PUSH
55109: LD_INT 4
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 1
55118: NEG
55119: PUSH
55120: LD_INT 3
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 2
55129: PUSH
55130: LD_INT 5
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 2
55139: NEG
55140: PUSH
55141: LD_INT 3
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 3
55150: NEG
55151: PUSH
55152: LD_INT 0
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 3
55161: NEG
55162: PUSH
55163: LD_INT 1
55165: NEG
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: LD_INT 2
55173: NEG
55174: PUSH
55175: LD_INT 0
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 2
55184: NEG
55185: PUSH
55186: LD_INT 1
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 3
55195: NEG
55196: PUSH
55197: LD_INT 1
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 4
55206: NEG
55207: PUSH
55208: LD_INT 0
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 4
55217: NEG
55218: PUSH
55219: LD_INT 1
55221: NEG
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 4
55229: NEG
55230: PUSH
55231: LD_INT 2
55233: NEG
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 2
55241: NEG
55242: PUSH
55243: LD_INT 2
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 4
55252: NEG
55253: PUSH
55254: LD_INT 4
55256: NEG
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 4
55264: NEG
55265: PUSH
55266: LD_INT 5
55268: NEG
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 3
55276: NEG
55277: PUSH
55278: LD_INT 4
55280: NEG
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 3
55288: NEG
55289: PUSH
55290: LD_INT 3
55292: NEG
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 4
55300: NEG
55301: PUSH
55302: LD_INT 3
55304: NEG
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 5
55312: NEG
55313: PUSH
55314: LD_INT 4
55316: NEG
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: LD_INT 5
55324: NEG
55325: PUSH
55326: LD_INT 5
55328: NEG
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 3
55336: NEG
55337: PUSH
55338: LD_INT 5
55340: NEG
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 5
55348: NEG
55349: PUSH
55350: LD_INT 3
55352: NEG
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: LD_INT 0
55360: PUSH
55361: LD_INT 3
55363: NEG
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 0
55371: PUSH
55372: LD_INT 4
55374: NEG
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 1
55382: PUSH
55383: LD_INT 3
55385: NEG
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 1
55393: PUSH
55394: LD_INT 2
55396: NEG
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 0
55404: PUSH
55405: LD_INT 2
55407: NEG
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 1
55415: NEG
55416: PUSH
55417: LD_INT 3
55419: NEG
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 1
55427: NEG
55428: PUSH
55429: LD_INT 4
55431: NEG
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 2
55439: PUSH
55440: LD_INT 2
55442: NEG
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 2
55450: NEG
55451: PUSH
55452: LD_INT 4
55454: NEG
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: LD_INT 4
55462: PUSH
55463: LD_INT 0
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 4
55472: PUSH
55473: LD_INT 1
55475: NEG
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 5
55483: PUSH
55484: LD_INT 0
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 5
55493: PUSH
55494: LD_INT 1
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 4
55503: PUSH
55504: LD_INT 1
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 3
55513: PUSH
55514: LD_INT 0
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 3
55523: PUSH
55524: LD_INT 1
55526: NEG
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 3
55534: PUSH
55535: LD_INT 2
55537: NEG
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 5
55545: PUSH
55546: LD_INT 2
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: LIST
55569: LIST
55570: LIST
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: LIST
55576: LIST
55577: LIST
55578: LIST
55579: LIST
55580: LIST
55581: LIST
55582: LIST
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
55600: LD_ADDR_VAR 0 32
55604: PUSH
55605: LD_INT 4
55607: NEG
55608: PUSH
55609: LD_INT 0
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 4
55618: NEG
55619: PUSH
55620: LD_INT 1
55622: NEG
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: LD_INT 3
55630: NEG
55631: PUSH
55632: LD_INT 0
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 3
55641: NEG
55642: PUSH
55643: LD_INT 1
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 4
55652: NEG
55653: PUSH
55654: LD_INT 1
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 5
55663: NEG
55664: PUSH
55665: LD_INT 0
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: LD_INT 5
55674: NEG
55675: PUSH
55676: LD_INT 1
55678: NEG
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 5
55686: NEG
55687: PUSH
55688: LD_INT 2
55690: NEG
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 3
55698: NEG
55699: PUSH
55700: LD_INT 2
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 3
55709: NEG
55710: PUSH
55711: LD_INT 3
55713: NEG
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 3
55721: NEG
55722: PUSH
55723: LD_INT 4
55725: NEG
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 2
55733: NEG
55734: PUSH
55735: LD_INT 3
55737: NEG
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 2
55745: NEG
55746: PUSH
55747: LD_INT 2
55749: NEG
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 3
55757: NEG
55758: PUSH
55759: LD_INT 2
55761: NEG
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 4
55769: NEG
55770: PUSH
55771: LD_INT 3
55773: NEG
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 4
55781: NEG
55782: PUSH
55783: LD_INT 4
55785: NEG
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 2
55793: NEG
55794: PUSH
55795: LD_INT 4
55797: NEG
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 4
55805: NEG
55806: PUSH
55807: LD_INT 2
55809: NEG
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: LD_INT 0
55817: PUSH
55818: LD_INT 4
55820: NEG
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 0
55828: PUSH
55829: LD_INT 5
55831: NEG
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 1
55839: PUSH
55840: LD_INT 4
55842: NEG
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 1
55850: PUSH
55851: LD_INT 3
55853: NEG
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: LD_INT 0
55861: PUSH
55862: LD_INT 3
55864: NEG
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 1
55872: NEG
55873: PUSH
55874: LD_INT 4
55876: NEG
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 1
55884: NEG
55885: PUSH
55886: LD_INT 5
55888: NEG
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 2
55896: PUSH
55897: LD_INT 3
55899: NEG
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 2
55907: NEG
55908: PUSH
55909: LD_INT 5
55911: NEG
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 3
55919: PUSH
55920: LD_INT 0
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 3
55929: PUSH
55930: LD_INT 1
55932: NEG
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 4
55940: PUSH
55941: LD_INT 0
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 4
55950: PUSH
55951: LD_INT 1
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 3
55960: PUSH
55961: LD_INT 1
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 2
55970: PUSH
55971: LD_INT 0
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 2
55980: PUSH
55981: LD_INT 1
55983: NEG
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 2
55991: PUSH
55992: LD_INT 2
55994: NEG
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 4
56002: PUSH
56003: LD_INT 2
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 4
56012: PUSH
56013: LD_INT 4
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 4
56022: PUSH
56023: LD_INT 3
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 5
56032: PUSH
56033: LD_INT 4
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 5
56042: PUSH
56043: LD_INT 5
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 4
56052: PUSH
56053: LD_INT 5
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 3
56062: PUSH
56063: LD_INT 4
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 3
56072: PUSH
56073: LD_INT 3
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 5
56082: PUSH
56083: LD_INT 3
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 3
56092: PUSH
56093: LD_INT 5
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: LIST
56106: LIST
56107: LIST
56108: LIST
56109: LIST
56110: LIST
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: LIST
56141: LIST
56142: LIST
56143: LIST
56144: LIST
56145: LIST
56146: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
56147: LD_ADDR_VAR 0 33
56151: PUSH
56152: LD_INT 4
56154: NEG
56155: PUSH
56156: LD_INT 4
56158: NEG
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 4
56166: NEG
56167: PUSH
56168: LD_INT 5
56170: NEG
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 3
56178: NEG
56179: PUSH
56180: LD_INT 4
56182: NEG
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 3
56190: NEG
56191: PUSH
56192: LD_INT 3
56194: NEG
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 4
56202: NEG
56203: PUSH
56204: LD_INT 3
56206: NEG
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 5
56214: NEG
56215: PUSH
56216: LD_INT 4
56218: NEG
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 5
56226: NEG
56227: PUSH
56228: LD_INT 5
56230: NEG
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: LD_INT 3
56238: NEG
56239: PUSH
56240: LD_INT 5
56242: NEG
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: PUSH
56248: LD_INT 5
56250: NEG
56251: PUSH
56252: LD_INT 3
56254: NEG
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 0
56262: PUSH
56263: LD_INT 3
56265: NEG
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: LD_INT 0
56273: PUSH
56274: LD_INT 4
56276: NEG
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 1
56284: PUSH
56285: LD_INT 3
56287: NEG
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 1
56295: PUSH
56296: LD_INT 2
56298: NEG
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 0
56306: PUSH
56307: LD_INT 2
56309: NEG
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 1
56317: NEG
56318: PUSH
56319: LD_INT 3
56321: NEG
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 1
56329: NEG
56330: PUSH
56331: LD_INT 4
56333: NEG
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 2
56341: PUSH
56342: LD_INT 2
56344: NEG
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 2
56352: NEG
56353: PUSH
56354: LD_INT 4
56356: NEG
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 4
56364: PUSH
56365: LD_INT 0
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 4
56374: PUSH
56375: LD_INT 1
56377: NEG
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 5
56385: PUSH
56386: LD_INT 0
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 5
56395: PUSH
56396: LD_INT 1
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 4
56405: PUSH
56406: LD_INT 1
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 3
56415: PUSH
56416: LD_INT 0
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: LD_INT 3
56425: PUSH
56426: LD_INT 1
56428: NEG
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 3
56436: PUSH
56437: LD_INT 2
56439: NEG
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: LD_INT 5
56447: PUSH
56448: LD_INT 2
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 3
56457: PUSH
56458: LD_INT 3
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 3
56467: PUSH
56468: LD_INT 2
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 4
56477: PUSH
56478: LD_INT 3
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 4
56487: PUSH
56488: LD_INT 4
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 3
56497: PUSH
56498: LD_INT 4
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 2
56507: PUSH
56508: LD_INT 3
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 2
56517: PUSH
56518: LD_INT 2
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 4
56527: PUSH
56528: LD_INT 2
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 2
56537: PUSH
56538: LD_INT 4
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 0
56547: PUSH
56548: LD_INT 4
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 0
56557: PUSH
56558: LD_INT 3
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 1
56567: PUSH
56568: LD_INT 4
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 1
56577: PUSH
56578: LD_INT 5
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 0
56587: PUSH
56588: LD_INT 5
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 1
56597: NEG
56598: PUSH
56599: LD_INT 4
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 1
56608: NEG
56609: PUSH
56610: LD_INT 3
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 2
56619: PUSH
56620: LD_INT 5
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: PUSH
56627: LD_INT 2
56629: NEG
56630: PUSH
56631: LD_INT 3
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: LIST
56655: LIST
56656: LIST
56657: LIST
56658: LIST
56659: LIST
56660: LIST
56661: LIST
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: LIST
56667: LIST
56668: LIST
56669: LIST
56670: LIST
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: LIST
56684: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
56685: LD_ADDR_VAR 0 34
56689: PUSH
56690: LD_INT 0
56692: PUSH
56693: LD_INT 4
56695: NEG
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 0
56703: PUSH
56704: LD_INT 5
56706: NEG
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 1
56714: PUSH
56715: LD_INT 4
56717: NEG
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 1
56725: PUSH
56726: LD_INT 3
56728: NEG
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 0
56736: PUSH
56737: LD_INT 3
56739: NEG
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 1
56747: NEG
56748: PUSH
56749: LD_INT 4
56751: NEG
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: LD_INT 1
56759: NEG
56760: PUSH
56761: LD_INT 5
56763: NEG
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 2
56771: PUSH
56772: LD_INT 3
56774: NEG
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 2
56782: NEG
56783: PUSH
56784: LD_INT 5
56786: NEG
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 3
56794: PUSH
56795: LD_INT 0
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 3
56804: PUSH
56805: LD_INT 1
56807: NEG
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: LD_INT 4
56815: PUSH
56816: LD_INT 0
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: PUSH
56823: LD_INT 4
56825: PUSH
56826: LD_INT 1
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: LD_INT 3
56835: PUSH
56836: LD_INT 1
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: LD_INT 2
56845: PUSH
56846: LD_INT 0
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 2
56855: PUSH
56856: LD_INT 1
56858: NEG
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: LD_INT 2
56866: PUSH
56867: LD_INT 2
56869: NEG
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: LD_INT 4
56877: PUSH
56878: LD_INT 2
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 4
56887: PUSH
56888: LD_INT 4
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 4
56897: PUSH
56898: LD_INT 3
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 5
56907: PUSH
56908: LD_INT 4
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 5
56917: PUSH
56918: LD_INT 5
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 4
56927: PUSH
56928: LD_INT 5
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: PUSH
56935: LD_INT 3
56937: PUSH
56938: LD_INT 4
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 3
56947: PUSH
56948: LD_INT 3
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 5
56957: PUSH
56958: LD_INT 3
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 3
56967: PUSH
56968: LD_INT 5
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: LD_INT 0
56977: PUSH
56978: LD_INT 3
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 0
56987: PUSH
56988: LD_INT 2
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 1
56997: PUSH
56998: LD_INT 3
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 1
57007: PUSH
57008: LD_INT 4
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 0
57017: PUSH
57018: LD_INT 4
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 1
57027: NEG
57028: PUSH
57029: LD_INT 3
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: LD_INT 1
57038: NEG
57039: PUSH
57040: LD_INT 2
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 2
57049: PUSH
57050: LD_INT 4
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 2
57059: NEG
57060: PUSH
57061: LD_INT 2
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 4
57070: NEG
57071: PUSH
57072: LD_INT 0
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 4
57081: NEG
57082: PUSH
57083: LD_INT 1
57085: NEG
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: LD_INT 3
57093: NEG
57094: PUSH
57095: LD_INT 0
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 3
57104: NEG
57105: PUSH
57106: LD_INT 1
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: PUSH
57113: LD_INT 4
57115: NEG
57116: PUSH
57117: LD_INT 1
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 5
57126: NEG
57127: PUSH
57128: LD_INT 0
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 5
57137: NEG
57138: PUSH
57139: LD_INT 1
57141: NEG
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 5
57149: NEG
57150: PUSH
57151: LD_INT 2
57153: NEG
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 3
57161: NEG
57162: PUSH
57163: LD_INT 2
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: LIST
57174: LIST
57175: LIST
57176: LIST
57177: LIST
57178: LIST
57179: LIST
57180: LIST
57181: LIST
57182: LIST
57183: LIST
57184: LIST
57185: LIST
57186: LIST
57187: LIST
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: LIST
57202: LIST
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: LIST
57216: ST_TO_ADDR
// end ; end ;
57217: GO 57220
57219: POP
// case btype of b_depot , b_warehouse :
57220: LD_VAR 0 1
57224: PUSH
57225: LD_INT 0
57227: DOUBLE
57228: EQUAL
57229: IFTRUE 57239
57231: LD_INT 1
57233: DOUBLE
57234: EQUAL
57235: IFTRUE 57239
57237: GO 57440
57239: POP
// case nation of nation_american :
57240: LD_VAR 0 5
57244: PUSH
57245: LD_INT 1
57247: DOUBLE
57248: EQUAL
57249: IFTRUE 57253
57251: GO 57309
57253: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
57254: LD_ADDR_VAR 0 9
57258: PUSH
57259: LD_VAR 0 11
57263: PUSH
57264: LD_VAR 0 12
57268: PUSH
57269: LD_VAR 0 13
57273: PUSH
57274: LD_VAR 0 14
57278: PUSH
57279: LD_VAR 0 15
57283: PUSH
57284: LD_VAR 0 16
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: PUSH
57297: LD_VAR 0 4
57301: PUSH
57302: LD_INT 1
57304: PLUS
57305: ARRAY
57306: ST_TO_ADDR
57307: GO 57438
57309: LD_INT 2
57311: DOUBLE
57312: EQUAL
57313: IFTRUE 57317
57315: GO 57373
57317: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
57318: LD_ADDR_VAR 0 9
57322: PUSH
57323: LD_VAR 0 17
57327: PUSH
57328: LD_VAR 0 18
57332: PUSH
57333: LD_VAR 0 19
57337: PUSH
57338: LD_VAR 0 20
57342: PUSH
57343: LD_VAR 0 21
57347: PUSH
57348: LD_VAR 0 22
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: PUSH
57361: LD_VAR 0 4
57365: PUSH
57366: LD_INT 1
57368: PLUS
57369: ARRAY
57370: ST_TO_ADDR
57371: GO 57438
57373: LD_INT 3
57375: DOUBLE
57376: EQUAL
57377: IFTRUE 57381
57379: GO 57437
57381: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
57382: LD_ADDR_VAR 0 9
57386: PUSH
57387: LD_VAR 0 23
57391: PUSH
57392: LD_VAR 0 24
57396: PUSH
57397: LD_VAR 0 25
57401: PUSH
57402: LD_VAR 0 26
57406: PUSH
57407: LD_VAR 0 27
57411: PUSH
57412: LD_VAR 0 28
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: LIST
57421: LIST
57422: LIST
57423: LIST
57424: PUSH
57425: LD_VAR 0 4
57429: PUSH
57430: LD_INT 1
57432: PLUS
57433: ARRAY
57434: ST_TO_ADDR
57435: GO 57438
57437: POP
57438: GO 57993
57440: LD_INT 2
57442: DOUBLE
57443: EQUAL
57444: IFTRUE 57454
57446: LD_INT 3
57448: DOUBLE
57449: EQUAL
57450: IFTRUE 57454
57452: GO 57510
57454: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
57455: LD_ADDR_VAR 0 9
57459: PUSH
57460: LD_VAR 0 29
57464: PUSH
57465: LD_VAR 0 30
57469: PUSH
57470: LD_VAR 0 31
57474: PUSH
57475: LD_VAR 0 32
57479: PUSH
57480: LD_VAR 0 33
57484: PUSH
57485: LD_VAR 0 34
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: PUSH
57498: LD_VAR 0 4
57502: PUSH
57503: LD_INT 1
57505: PLUS
57506: ARRAY
57507: ST_TO_ADDR
57508: GO 57993
57510: LD_INT 16
57512: DOUBLE
57513: EQUAL
57514: IFTRUE 57572
57516: LD_INT 17
57518: DOUBLE
57519: EQUAL
57520: IFTRUE 57572
57522: LD_INT 18
57524: DOUBLE
57525: EQUAL
57526: IFTRUE 57572
57528: LD_INT 19
57530: DOUBLE
57531: EQUAL
57532: IFTRUE 57572
57534: LD_INT 22
57536: DOUBLE
57537: EQUAL
57538: IFTRUE 57572
57540: LD_INT 20
57542: DOUBLE
57543: EQUAL
57544: IFTRUE 57572
57546: LD_INT 21
57548: DOUBLE
57549: EQUAL
57550: IFTRUE 57572
57552: LD_INT 23
57554: DOUBLE
57555: EQUAL
57556: IFTRUE 57572
57558: LD_INT 24
57560: DOUBLE
57561: EQUAL
57562: IFTRUE 57572
57564: LD_INT 25
57566: DOUBLE
57567: EQUAL
57568: IFTRUE 57572
57570: GO 57628
57572: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
57573: LD_ADDR_VAR 0 9
57577: PUSH
57578: LD_VAR 0 35
57582: PUSH
57583: LD_VAR 0 36
57587: PUSH
57588: LD_VAR 0 37
57592: PUSH
57593: LD_VAR 0 38
57597: PUSH
57598: LD_VAR 0 39
57602: PUSH
57603: LD_VAR 0 40
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: LIST
57612: LIST
57613: LIST
57614: LIST
57615: PUSH
57616: LD_VAR 0 4
57620: PUSH
57621: LD_INT 1
57623: PLUS
57624: ARRAY
57625: ST_TO_ADDR
57626: GO 57993
57628: LD_INT 6
57630: DOUBLE
57631: EQUAL
57632: IFTRUE 57684
57634: LD_INT 7
57636: DOUBLE
57637: EQUAL
57638: IFTRUE 57684
57640: LD_INT 8
57642: DOUBLE
57643: EQUAL
57644: IFTRUE 57684
57646: LD_INT 13
57648: DOUBLE
57649: EQUAL
57650: IFTRUE 57684
57652: LD_INT 12
57654: DOUBLE
57655: EQUAL
57656: IFTRUE 57684
57658: LD_INT 15
57660: DOUBLE
57661: EQUAL
57662: IFTRUE 57684
57664: LD_INT 11
57666: DOUBLE
57667: EQUAL
57668: IFTRUE 57684
57670: LD_INT 14
57672: DOUBLE
57673: EQUAL
57674: IFTRUE 57684
57676: LD_INT 10
57678: DOUBLE
57679: EQUAL
57680: IFTRUE 57684
57682: GO 57740
57684: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
57685: LD_ADDR_VAR 0 9
57689: PUSH
57690: LD_VAR 0 41
57694: PUSH
57695: LD_VAR 0 42
57699: PUSH
57700: LD_VAR 0 43
57704: PUSH
57705: LD_VAR 0 44
57709: PUSH
57710: LD_VAR 0 45
57714: PUSH
57715: LD_VAR 0 46
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: LIST
57724: LIST
57725: LIST
57726: LIST
57727: PUSH
57728: LD_VAR 0 4
57732: PUSH
57733: LD_INT 1
57735: PLUS
57736: ARRAY
57737: ST_TO_ADDR
57738: GO 57993
57740: LD_INT 36
57742: DOUBLE
57743: EQUAL
57744: IFTRUE 57748
57746: GO 57804
57748: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
57749: LD_ADDR_VAR 0 9
57753: PUSH
57754: LD_VAR 0 47
57758: PUSH
57759: LD_VAR 0 48
57763: PUSH
57764: LD_VAR 0 49
57768: PUSH
57769: LD_VAR 0 50
57773: PUSH
57774: LD_VAR 0 51
57778: PUSH
57779: LD_VAR 0 52
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: PUSH
57792: LD_VAR 0 4
57796: PUSH
57797: LD_INT 1
57799: PLUS
57800: ARRAY
57801: ST_TO_ADDR
57802: GO 57993
57804: LD_INT 4
57806: DOUBLE
57807: EQUAL
57808: IFTRUE 57830
57810: LD_INT 5
57812: DOUBLE
57813: EQUAL
57814: IFTRUE 57830
57816: LD_INT 34
57818: DOUBLE
57819: EQUAL
57820: IFTRUE 57830
57822: LD_INT 37
57824: DOUBLE
57825: EQUAL
57826: IFTRUE 57830
57828: GO 57886
57830: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
57831: LD_ADDR_VAR 0 9
57835: PUSH
57836: LD_VAR 0 53
57840: PUSH
57841: LD_VAR 0 54
57845: PUSH
57846: LD_VAR 0 55
57850: PUSH
57851: LD_VAR 0 56
57855: PUSH
57856: LD_VAR 0 57
57860: PUSH
57861: LD_VAR 0 58
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: PUSH
57874: LD_VAR 0 4
57878: PUSH
57879: LD_INT 1
57881: PLUS
57882: ARRAY
57883: ST_TO_ADDR
57884: GO 57993
57886: LD_INT 31
57888: DOUBLE
57889: EQUAL
57890: IFTRUE 57936
57892: LD_INT 32
57894: DOUBLE
57895: EQUAL
57896: IFTRUE 57936
57898: LD_INT 33
57900: DOUBLE
57901: EQUAL
57902: IFTRUE 57936
57904: LD_INT 27
57906: DOUBLE
57907: EQUAL
57908: IFTRUE 57936
57910: LD_INT 26
57912: DOUBLE
57913: EQUAL
57914: IFTRUE 57936
57916: LD_INT 28
57918: DOUBLE
57919: EQUAL
57920: IFTRUE 57936
57922: LD_INT 29
57924: DOUBLE
57925: EQUAL
57926: IFTRUE 57936
57928: LD_INT 30
57930: DOUBLE
57931: EQUAL
57932: IFTRUE 57936
57934: GO 57992
57936: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
57937: LD_ADDR_VAR 0 9
57941: PUSH
57942: LD_VAR 0 59
57946: PUSH
57947: LD_VAR 0 60
57951: PUSH
57952: LD_VAR 0 61
57956: PUSH
57957: LD_VAR 0 62
57961: PUSH
57962: LD_VAR 0 63
57966: PUSH
57967: LD_VAR 0 64
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: PUSH
57980: LD_VAR 0 4
57984: PUSH
57985: LD_INT 1
57987: PLUS
57988: ARRAY
57989: ST_TO_ADDR
57990: GO 57993
57992: POP
// temp_list2 = [ ] ;
57993: LD_ADDR_VAR 0 10
57997: PUSH
57998: EMPTY
57999: ST_TO_ADDR
// for i in temp_list do
58000: LD_ADDR_VAR 0 8
58004: PUSH
58005: LD_VAR 0 9
58009: PUSH
58010: FOR_IN
58011: IFFALSE 58063
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
58013: LD_ADDR_VAR 0 10
58017: PUSH
58018: LD_VAR 0 10
58022: PUSH
58023: LD_VAR 0 8
58027: PUSH
58028: LD_INT 1
58030: ARRAY
58031: PUSH
58032: LD_VAR 0 2
58036: PLUS
58037: PUSH
58038: LD_VAR 0 8
58042: PUSH
58043: LD_INT 2
58045: ARRAY
58046: PUSH
58047: LD_VAR 0 3
58051: PLUS
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: EMPTY
58058: LIST
58059: ADD
58060: ST_TO_ADDR
58061: GO 58010
58063: POP
58064: POP
// result = temp_list2 ;
58065: LD_ADDR_VAR 0 7
58069: PUSH
58070: LD_VAR 0 10
58074: ST_TO_ADDR
// end ;
58075: LD_VAR 0 7
58079: RET
// export function EnemyInRange ( unit , dist ) ; begin
58080: LD_INT 0
58082: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
58083: LD_ADDR_VAR 0 3
58087: PUSH
58088: LD_VAR 0 1
58092: PPUSH
58093: CALL_OW 255
58097: PPUSH
58098: LD_VAR 0 1
58102: PPUSH
58103: CALL_OW 250
58107: PPUSH
58108: LD_VAR 0 1
58112: PPUSH
58113: CALL_OW 251
58117: PPUSH
58118: LD_VAR 0 2
58122: PPUSH
58123: CALL 31476 0 4
58127: PUSH
58128: LD_INT 4
58130: ARRAY
58131: ST_TO_ADDR
// end ;
58132: LD_VAR 0 3
58136: RET
// export function PlayerSeeMe ( unit ) ; begin
58137: LD_INT 0
58139: PPUSH
// result := See ( your_side , unit ) ;
58140: LD_ADDR_VAR 0 2
58144: PUSH
58145: LD_OWVAR 2
58149: PPUSH
58150: LD_VAR 0 1
58154: PPUSH
58155: CALL_OW 292
58159: ST_TO_ADDR
// end ;
58160: LD_VAR 0 2
58164: RET
// export function ReverseDir ( unit ) ; begin
58165: LD_INT 0
58167: PPUSH
// if not unit then
58168: LD_VAR 0 1
58172: NOT
58173: IFFALSE 58177
// exit ;
58175: GO 58200
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
58177: LD_ADDR_VAR 0 2
58181: PUSH
58182: LD_VAR 0 1
58186: PPUSH
58187: CALL_OW 254
58191: PUSH
58192: LD_INT 3
58194: PLUS
58195: PUSH
58196: LD_INT 6
58198: MOD
58199: ST_TO_ADDR
// end ;
58200: LD_VAR 0 2
58204: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
58205: LD_INT 0
58207: PPUSH
58208: PPUSH
58209: PPUSH
58210: PPUSH
58211: PPUSH
// if not hexes then
58212: LD_VAR 0 2
58216: NOT
58217: IFFALSE 58221
// exit ;
58219: GO 58369
// dist := 9999 ;
58221: LD_ADDR_VAR 0 5
58225: PUSH
58226: LD_INT 9999
58228: ST_TO_ADDR
// for i = 1 to hexes do
58229: LD_ADDR_VAR 0 4
58233: PUSH
58234: DOUBLE
58235: LD_INT 1
58237: DEC
58238: ST_TO_ADDR
58239: LD_VAR 0 2
58243: PUSH
58244: FOR_TO
58245: IFFALSE 58357
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
58247: LD_VAR 0 1
58251: PPUSH
58252: LD_VAR 0 2
58256: PUSH
58257: LD_VAR 0 4
58261: ARRAY
58262: PUSH
58263: LD_INT 1
58265: ARRAY
58266: PPUSH
58267: LD_VAR 0 2
58271: PUSH
58272: LD_VAR 0 4
58276: ARRAY
58277: PUSH
58278: LD_INT 2
58280: ARRAY
58281: PPUSH
58282: CALL_OW 297
58286: PUSH
58287: LD_VAR 0 5
58291: LESS
58292: IFFALSE 58355
// begin hex := hexes [ i ] ;
58294: LD_ADDR_VAR 0 7
58298: PUSH
58299: LD_VAR 0 2
58303: PUSH
58304: LD_VAR 0 4
58308: ARRAY
58309: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58310: LD_ADDR_VAR 0 5
58314: PUSH
58315: LD_VAR 0 1
58319: PPUSH
58320: LD_VAR 0 2
58324: PUSH
58325: LD_VAR 0 4
58329: ARRAY
58330: PUSH
58331: LD_INT 1
58333: ARRAY
58334: PPUSH
58335: LD_VAR 0 2
58339: PUSH
58340: LD_VAR 0 4
58344: ARRAY
58345: PUSH
58346: LD_INT 2
58348: ARRAY
58349: PPUSH
58350: CALL_OW 297
58354: ST_TO_ADDR
// end ; end ;
58355: GO 58244
58357: POP
58358: POP
// result := hex ;
58359: LD_ADDR_VAR 0 3
58363: PUSH
58364: LD_VAR 0 7
58368: ST_TO_ADDR
// end ;
58369: LD_VAR 0 3
58373: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
58374: LD_INT 0
58376: PPUSH
58377: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58378: LD_VAR 0 1
58382: NOT
58383: PUSH
58384: LD_VAR 0 1
58388: PUSH
58389: LD_INT 21
58391: PUSH
58392: LD_INT 2
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 23
58401: PUSH
58402: LD_INT 2
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PPUSH
58413: CALL_OW 69
58417: IN
58418: NOT
58419: OR
58420: IFFALSE 58424
// exit ;
58422: GO 58471
// for i = 1 to 3 do
58424: LD_ADDR_VAR 0 3
58428: PUSH
58429: DOUBLE
58430: LD_INT 1
58432: DEC
58433: ST_TO_ADDR
58434: LD_INT 3
58436: PUSH
58437: FOR_TO
58438: IFFALSE 58469
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
58440: LD_VAR 0 1
58444: PPUSH
58445: CALL_OW 250
58449: PPUSH
58450: LD_VAR 0 1
58454: PPUSH
58455: CALL_OW 251
58459: PPUSH
58460: LD_INT 1
58462: PPUSH
58463: CALL_OW 453
58467: GO 58437
58469: POP
58470: POP
// end ;
58471: LD_VAR 0 2
58475: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
58476: LD_INT 0
58478: PPUSH
58479: PPUSH
58480: PPUSH
58481: PPUSH
58482: PPUSH
58483: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
58484: LD_VAR 0 1
58488: NOT
58489: PUSH
58490: LD_VAR 0 2
58494: NOT
58495: OR
58496: PUSH
58497: LD_VAR 0 1
58501: PPUSH
58502: CALL_OW 314
58506: OR
58507: IFFALSE 58511
// exit ;
58509: GO 58952
// x := GetX ( enemy_unit ) ;
58511: LD_ADDR_VAR 0 7
58515: PUSH
58516: LD_VAR 0 2
58520: PPUSH
58521: CALL_OW 250
58525: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
58526: LD_ADDR_VAR 0 8
58530: PUSH
58531: LD_VAR 0 2
58535: PPUSH
58536: CALL_OW 251
58540: ST_TO_ADDR
// if not x or not y then
58541: LD_VAR 0 7
58545: NOT
58546: PUSH
58547: LD_VAR 0 8
58551: NOT
58552: OR
58553: IFFALSE 58557
// exit ;
58555: GO 58952
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
58557: LD_ADDR_VAR 0 6
58561: PUSH
58562: LD_VAR 0 7
58566: PPUSH
58567: LD_INT 0
58569: PPUSH
58570: LD_INT 4
58572: PPUSH
58573: CALL_OW 272
58577: PUSH
58578: LD_VAR 0 8
58582: PPUSH
58583: LD_INT 0
58585: PPUSH
58586: LD_INT 4
58588: PPUSH
58589: CALL_OW 273
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_VAR 0 7
58602: PPUSH
58603: LD_INT 1
58605: PPUSH
58606: LD_INT 4
58608: PPUSH
58609: CALL_OW 272
58613: PUSH
58614: LD_VAR 0 8
58618: PPUSH
58619: LD_INT 1
58621: PPUSH
58622: LD_INT 4
58624: PPUSH
58625: CALL_OW 273
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_VAR 0 7
58638: PPUSH
58639: LD_INT 2
58641: PPUSH
58642: LD_INT 4
58644: PPUSH
58645: CALL_OW 272
58649: PUSH
58650: LD_VAR 0 8
58654: PPUSH
58655: LD_INT 2
58657: PPUSH
58658: LD_INT 4
58660: PPUSH
58661: CALL_OW 273
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_VAR 0 7
58674: PPUSH
58675: LD_INT 3
58677: PPUSH
58678: LD_INT 4
58680: PPUSH
58681: CALL_OW 272
58685: PUSH
58686: LD_VAR 0 8
58690: PPUSH
58691: LD_INT 3
58693: PPUSH
58694: LD_INT 4
58696: PPUSH
58697: CALL_OW 273
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_VAR 0 7
58710: PPUSH
58711: LD_INT 4
58713: PPUSH
58714: LD_INT 4
58716: PPUSH
58717: CALL_OW 272
58721: PUSH
58722: LD_VAR 0 8
58726: PPUSH
58727: LD_INT 4
58729: PPUSH
58730: LD_INT 4
58732: PPUSH
58733: CALL_OW 273
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_VAR 0 7
58746: PPUSH
58747: LD_INT 5
58749: PPUSH
58750: LD_INT 4
58752: PPUSH
58753: CALL_OW 272
58757: PUSH
58758: LD_VAR 0 8
58762: PPUSH
58763: LD_INT 5
58765: PPUSH
58766: LD_INT 4
58768: PPUSH
58769: CALL_OW 273
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: LIST
58782: LIST
58783: LIST
58784: LIST
58785: ST_TO_ADDR
// for i = tmp downto 1 do
58786: LD_ADDR_VAR 0 4
58790: PUSH
58791: DOUBLE
58792: LD_VAR 0 6
58796: INC
58797: ST_TO_ADDR
58798: LD_INT 1
58800: PUSH
58801: FOR_DOWNTO
58802: IFFALSE 58903
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
58804: LD_VAR 0 6
58808: PUSH
58809: LD_VAR 0 4
58813: ARRAY
58814: PUSH
58815: LD_INT 1
58817: ARRAY
58818: PPUSH
58819: LD_VAR 0 6
58823: PUSH
58824: LD_VAR 0 4
58828: ARRAY
58829: PUSH
58830: LD_INT 2
58832: ARRAY
58833: PPUSH
58834: CALL_OW 488
58838: NOT
58839: PUSH
58840: LD_VAR 0 6
58844: PUSH
58845: LD_VAR 0 4
58849: ARRAY
58850: PUSH
58851: LD_INT 1
58853: ARRAY
58854: PPUSH
58855: LD_VAR 0 6
58859: PUSH
58860: LD_VAR 0 4
58864: ARRAY
58865: PUSH
58866: LD_INT 2
58868: ARRAY
58869: PPUSH
58870: CALL_OW 428
58874: PUSH
58875: LD_INT 0
58877: NONEQUAL
58878: OR
58879: IFFALSE 58901
// tmp := Delete ( tmp , i ) ;
58881: LD_ADDR_VAR 0 6
58885: PUSH
58886: LD_VAR 0 6
58890: PPUSH
58891: LD_VAR 0 4
58895: PPUSH
58896: CALL_OW 3
58900: ST_TO_ADDR
58901: GO 58801
58903: POP
58904: POP
// j := GetClosestHex ( unit , tmp ) ;
58905: LD_ADDR_VAR 0 5
58909: PUSH
58910: LD_VAR 0 1
58914: PPUSH
58915: LD_VAR 0 6
58919: PPUSH
58920: CALL 58205 0 2
58924: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
58925: LD_VAR 0 1
58929: PPUSH
58930: LD_VAR 0 5
58934: PUSH
58935: LD_INT 1
58937: ARRAY
58938: PPUSH
58939: LD_VAR 0 5
58943: PUSH
58944: LD_INT 2
58946: ARRAY
58947: PPUSH
58948: CALL_OW 111
// end ;
58952: LD_VAR 0 3
58956: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
58957: LD_INT 0
58959: PPUSH
58960: PPUSH
58961: PPUSH
// uc_side = 0 ;
58962: LD_ADDR_OWVAR 20
58966: PUSH
58967: LD_INT 0
58969: ST_TO_ADDR
// uc_nation = 0 ;
58970: LD_ADDR_OWVAR 21
58974: PUSH
58975: LD_INT 0
58977: ST_TO_ADDR
// InitHc_All ( ) ;
58978: CALL_OW 584
// InitVc ;
58982: CALL_OW 20
// if mastodonts then
58986: LD_VAR 0 6
58990: IFFALSE 59057
// for i = 1 to mastodonts do
58992: LD_ADDR_VAR 0 11
58996: PUSH
58997: DOUBLE
58998: LD_INT 1
59000: DEC
59001: ST_TO_ADDR
59002: LD_VAR 0 6
59006: PUSH
59007: FOR_TO
59008: IFFALSE 59055
// begin vc_chassis := 31 ;
59010: LD_ADDR_OWVAR 37
59014: PUSH
59015: LD_INT 31
59017: ST_TO_ADDR
// vc_control := control_rider ;
59018: LD_ADDR_OWVAR 38
59022: PUSH
59023: LD_INT 4
59025: ST_TO_ADDR
// animal := CreateVehicle ;
59026: LD_ADDR_VAR 0 12
59030: PUSH
59031: CALL_OW 45
59035: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59036: LD_VAR 0 12
59040: PPUSH
59041: LD_VAR 0 8
59045: PPUSH
59046: LD_INT 0
59048: PPUSH
59049: CALL 61245 0 3
// end ;
59053: GO 59007
59055: POP
59056: POP
// if horses then
59057: LD_VAR 0 5
59061: IFFALSE 59128
// for i = 1 to horses do
59063: LD_ADDR_VAR 0 11
59067: PUSH
59068: DOUBLE
59069: LD_INT 1
59071: DEC
59072: ST_TO_ADDR
59073: LD_VAR 0 5
59077: PUSH
59078: FOR_TO
59079: IFFALSE 59126
// begin hc_class := 21 ;
59081: LD_ADDR_OWVAR 28
59085: PUSH
59086: LD_INT 21
59088: ST_TO_ADDR
// hc_gallery :=  ;
59089: LD_ADDR_OWVAR 33
59093: PUSH
59094: LD_STRING 
59096: ST_TO_ADDR
// animal := CreateHuman ;
59097: LD_ADDR_VAR 0 12
59101: PUSH
59102: CALL_OW 44
59106: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59107: LD_VAR 0 12
59111: PPUSH
59112: LD_VAR 0 8
59116: PPUSH
59117: LD_INT 0
59119: PPUSH
59120: CALL 61245 0 3
// end ;
59124: GO 59078
59126: POP
59127: POP
// if birds then
59128: LD_VAR 0 1
59132: IFFALSE 59199
// for i = 1 to birds do
59134: LD_ADDR_VAR 0 11
59138: PUSH
59139: DOUBLE
59140: LD_INT 1
59142: DEC
59143: ST_TO_ADDR
59144: LD_VAR 0 1
59148: PUSH
59149: FOR_TO
59150: IFFALSE 59197
// begin hc_class = 18 ;
59152: LD_ADDR_OWVAR 28
59156: PUSH
59157: LD_INT 18
59159: ST_TO_ADDR
// hc_gallery =  ;
59160: LD_ADDR_OWVAR 33
59164: PUSH
59165: LD_STRING 
59167: ST_TO_ADDR
// animal := CreateHuman ;
59168: LD_ADDR_VAR 0 12
59172: PUSH
59173: CALL_OW 44
59177: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59178: LD_VAR 0 12
59182: PPUSH
59183: LD_VAR 0 8
59187: PPUSH
59188: LD_INT 0
59190: PPUSH
59191: CALL 61245 0 3
// end ;
59195: GO 59149
59197: POP
59198: POP
// if tigers then
59199: LD_VAR 0 2
59203: IFFALSE 59287
// for i = 1 to tigers do
59205: LD_ADDR_VAR 0 11
59209: PUSH
59210: DOUBLE
59211: LD_INT 1
59213: DEC
59214: ST_TO_ADDR
59215: LD_VAR 0 2
59219: PUSH
59220: FOR_TO
59221: IFFALSE 59285
// begin hc_class = class_tiger ;
59223: LD_ADDR_OWVAR 28
59227: PUSH
59228: LD_INT 14
59230: ST_TO_ADDR
// hc_gallery =  ;
59231: LD_ADDR_OWVAR 33
59235: PUSH
59236: LD_STRING 
59238: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
59239: LD_ADDR_OWVAR 35
59243: PUSH
59244: LD_INT 7
59246: NEG
59247: PPUSH
59248: LD_INT 7
59250: PPUSH
59251: CALL_OW 12
59255: ST_TO_ADDR
// animal := CreateHuman ;
59256: LD_ADDR_VAR 0 12
59260: PUSH
59261: CALL_OW 44
59265: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59266: LD_VAR 0 12
59270: PPUSH
59271: LD_VAR 0 8
59275: PPUSH
59276: LD_INT 0
59278: PPUSH
59279: CALL 61245 0 3
// end ;
59283: GO 59220
59285: POP
59286: POP
// if apemans then
59287: LD_VAR 0 3
59291: IFFALSE 59414
// for i = 1 to apemans do
59293: LD_ADDR_VAR 0 11
59297: PUSH
59298: DOUBLE
59299: LD_INT 1
59301: DEC
59302: ST_TO_ADDR
59303: LD_VAR 0 3
59307: PUSH
59308: FOR_TO
59309: IFFALSE 59412
// begin hc_class = class_apeman ;
59311: LD_ADDR_OWVAR 28
59315: PUSH
59316: LD_INT 12
59318: ST_TO_ADDR
// hc_gallery =  ;
59319: LD_ADDR_OWVAR 33
59323: PUSH
59324: LD_STRING 
59326: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
59327: LD_ADDR_OWVAR 35
59331: PUSH
59332: LD_INT 2
59334: NEG
59335: PPUSH
59336: LD_INT 2
59338: PPUSH
59339: CALL_OW 12
59343: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
59344: LD_ADDR_OWVAR 31
59348: PUSH
59349: LD_INT 1
59351: PPUSH
59352: LD_INT 3
59354: PPUSH
59355: CALL_OW 12
59359: PUSH
59360: LD_INT 1
59362: PPUSH
59363: LD_INT 3
59365: PPUSH
59366: CALL_OW 12
59370: PUSH
59371: LD_INT 0
59373: PUSH
59374: LD_INT 0
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: ST_TO_ADDR
// animal := CreateHuman ;
59383: LD_ADDR_VAR 0 12
59387: PUSH
59388: CALL_OW 44
59392: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59393: LD_VAR 0 12
59397: PPUSH
59398: LD_VAR 0 8
59402: PPUSH
59403: LD_INT 0
59405: PPUSH
59406: CALL 61245 0 3
// end ;
59410: GO 59308
59412: POP
59413: POP
// if enchidnas then
59414: LD_VAR 0 4
59418: IFFALSE 59485
// for i = 1 to enchidnas do
59420: LD_ADDR_VAR 0 11
59424: PUSH
59425: DOUBLE
59426: LD_INT 1
59428: DEC
59429: ST_TO_ADDR
59430: LD_VAR 0 4
59434: PUSH
59435: FOR_TO
59436: IFFALSE 59483
// begin hc_class = 13 ;
59438: LD_ADDR_OWVAR 28
59442: PUSH
59443: LD_INT 13
59445: ST_TO_ADDR
// hc_gallery =  ;
59446: LD_ADDR_OWVAR 33
59450: PUSH
59451: LD_STRING 
59453: ST_TO_ADDR
// animal := CreateHuman ;
59454: LD_ADDR_VAR 0 12
59458: PUSH
59459: CALL_OW 44
59463: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59464: LD_VAR 0 12
59468: PPUSH
59469: LD_VAR 0 8
59473: PPUSH
59474: LD_INT 0
59476: PPUSH
59477: CALL 61245 0 3
// end ;
59481: GO 59435
59483: POP
59484: POP
// if fishes then
59485: LD_VAR 0 7
59489: IFFALSE 59556
// for i = 1 to fishes do
59491: LD_ADDR_VAR 0 11
59495: PUSH
59496: DOUBLE
59497: LD_INT 1
59499: DEC
59500: ST_TO_ADDR
59501: LD_VAR 0 7
59505: PUSH
59506: FOR_TO
59507: IFFALSE 59554
// begin hc_class = 20 ;
59509: LD_ADDR_OWVAR 28
59513: PUSH
59514: LD_INT 20
59516: ST_TO_ADDR
// hc_gallery =  ;
59517: LD_ADDR_OWVAR 33
59521: PUSH
59522: LD_STRING 
59524: ST_TO_ADDR
// animal := CreateHuman ;
59525: LD_ADDR_VAR 0 12
59529: PUSH
59530: CALL_OW 44
59534: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
59535: LD_VAR 0 12
59539: PPUSH
59540: LD_VAR 0 9
59544: PPUSH
59545: LD_INT 0
59547: PPUSH
59548: CALL 61245 0 3
// end ;
59552: GO 59506
59554: POP
59555: POP
// end ;
59556: LD_VAR 0 10
59560: RET
// export function WantHeal ( sci , unit ) ; begin
59561: LD_INT 0
59563: PPUSH
// if GetTaskList ( sci ) > 0 then
59564: LD_VAR 0 1
59568: PPUSH
59569: CALL_OW 437
59573: PUSH
59574: LD_INT 0
59576: GREATER
59577: IFFALSE 59647
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
59579: LD_VAR 0 1
59583: PPUSH
59584: CALL_OW 437
59588: PUSH
59589: LD_INT 1
59591: ARRAY
59592: PUSH
59593: LD_INT 1
59595: ARRAY
59596: PUSH
59597: LD_STRING l
59599: EQUAL
59600: PUSH
59601: LD_VAR 0 1
59605: PPUSH
59606: CALL_OW 437
59610: PUSH
59611: LD_INT 1
59613: ARRAY
59614: PUSH
59615: LD_INT 4
59617: ARRAY
59618: PUSH
59619: LD_VAR 0 2
59623: EQUAL
59624: AND
59625: IFFALSE 59637
// result := true else
59627: LD_ADDR_VAR 0 3
59631: PUSH
59632: LD_INT 1
59634: ST_TO_ADDR
59635: GO 59645
// result := false ;
59637: LD_ADDR_VAR 0 3
59641: PUSH
59642: LD_INT 0
59644: ST_TO_ADDR
// end else
59645: GO 59655
// result := false ;
59647: LD_ADDR_VAR 0 3
59651: PUSH
59652: LD_INT 0
59654: ST_TO_ADDR
// end ;
59655: LD_VAR 0 3
59659: RET
// export function HealTarget ( sci ) ; begin
59660: LD_INT 0
59662: PPUSH
// if not sci then
59663: LD_VAR 0 1
59667: NOT
59668: IFFALSE 59672
// exit ;
59670: GO 59737
// result := 0 ;
59672: LD_ADDR_VAR 0 2
59676: PUSH
59677: LD_INT 0
59679: ST_TO_ADDR
// if GetTaskList ( sci ) then
59680: LD_VAR 0 1
59684: PPUSH
59685: CALL_OW 437
59689: IFFALSE 59737
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
59691: LD_VAR 0 1
59695: PPUSH
59696: CALL_OW 437
59700: PUSH
59701: LD_INT 1
59703: ARRAY
59704: PUSH
59705: LD_INT 1
59707: ARRAY
59708: PUSH
59709: LD_STRING l
59711: EQUAL
59712: IFFALSE 59737
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
59714: LD_ADDR_VAR 0 2
59718: PUSH
59719: LD_VAR 0 1
59723: PPUSH
59724: CALL_OW 437
59728: PUSH
59729: LD_INT 1
59731: ARRAY
59732: PUSH
59733: LD_INT 4
59735: ARRAY
59736: ST_TO_ADDR
// end ;
59737: LD_VAR 0 2
59741: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59742: LD_INT 0
59744: PPUSH
59745: PPUSH
59746: PPUSH
59747: PPUSH
// if not base_units then
59748: LD_VAR 0 1
59752: NOT
59753: IFFALSE 59757
// exit ;
59755: GO 59844
// result := false ;
59757: LD_ADDR_VAR 0 2
59761: PUSH
59762: LD_INT 0
59764: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59765: LD_ADDR_VAR 0 5
59769: PUSH
59770: LD_VAR 0 1
59774: PPUSH
59775: LD_INT 21
59777: PUSH
59778: LD_INT 3
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PPUSH
59785: CALL_OW 72
59789: ST_TO_ADDR
// if not tmp then
59790: LD_VAR 0 5
59794: NOT
59795: IFFALSE 59799
// exit ;
59797: GO 59844
// for i in tmp do
59799: LD_ADDR_VAR 0 3
59803: PUSH
59804: LD_VAR 0 5
59808: PUSH
59809: FOR_IN
59810: IFFALSE 59842
// begin result := EnemyInRange ( i , 22 ) ;
59812: LD_ADDR_VAR 0 2
59816: PUSH
59817: LD_VAR 0 3
59821: PPUSH
59822: LD_INT 22
59824: PPUSH
59825: CALL 58080 0 2
59829: ST_TO_ADDR
// if result then
59830: LD_VAR 0 2
59834: IFFALSE 59840
// exit ;
59836: POP
59837: POP
59838: GO 59844
// end ;
59840: GO 59809
59842: POP
59843: POP
// end ;
59844: LD_VAR 0 2
59848: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
59849: LD_INT 0
59851: PPUSH
59852: PPUSH
// if not units then
59853: LD_VAR 0 1
59857: NOT
59858: IFFALSE 59862
// exit ;
59860: GO 59932
// result := [ ] ;
59862: LD_ADDR_VAR 0 3
59866: PUSH
59867: EMPTY
59868: ST_TO_ADDR
// for i in units do
59869: LD_ADDR_VAR 0 4
59873: PUSH
59874: LD_VAR 0 1
59878: PUSH
59879: FOR_IN
59880: IFFALSE 59930
// if GetTag ( i ) = tag then
59882: LD_VAR 0 4
59886: PPUSH
59887: CALL_OW 110
59891: PUSH
59892: LD_VAR 0 2
59896: EQUAL
59897: IFFALSE 59928
// result := Replace ( result , result + 1 , i ) ;
59899: LD_ADDR_VAR 0 3
59903: PUSH
59904: LD_VAR 0 3
59908: PPUSH
59909: LD_VAR 0 3
59913: PUSH
59914: LD_INT 1
59916: PLUS
59917: PPUSH
59918: LD_VAR 0 4
59922: PPUSH
59923: CALL_OW 1
59927: ST_TO_ADDR
59928: GO 59879
59930: POP
59931: POP
// end ;
59932: LD_VAR 0 3
59936: RET
// export function IsDriver ( un ) ; begin
59937: LD_INT 0
59939: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59940: LD_ADDR_VAR 0 2
59944: PUSH
59945: LD_VAR 0 1
59949: PUSH
59950: LD_INT 55
59952: PUSH
59953: EMPTY
59954: LIST
59955: PPUSH
59956: CALL_OW 69
59960: IN
59961: ST_TO_ADDR
// end ;
59962: LD_VAR 0 2
59966: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59967: LD_INT 0
59969: PPUSH
59970: PPUSH
// list := [ ] ;
59971: LD_ADDR_VAR 0 5
59975: PUSH
59976: EMPTY
59977: ST_TO_ADDR
// case d of 0 :
59978: LD_VAR 0 3
59982: PUSH
59983: LD_INT 0
59985: DOUBLE
59986: EQUAL
59987: IFTRUE 59991
59989: GO 60124
59991: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59992: LD_ADDR_VAR 0 5
59996: PUSH
59997: LD_VAR 0 1
60001: PUSH
60002: LD_INT 4
60004: MINUS
60005: PUSH
60006: LD_VAR 0 2
60010: PUSH
60011: LD_INT 4
60013: MINUS
60014: PUSH
60015: LD_INT 2
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: LIST
60022: PUSH
60023: LD_VAR 0 1
60027: PUSH
60028: LD_INT 3
60030: MINUS
60031: PUSH
60032: LD_VAR 0 2
60036: PUSH
60037: LD_INT 1
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: LIST
60044: PUSH
60045: LD_VAR 0 1
60049: PUSH
60050: LD_INT 4
60052: PLUS
60053: PUSH
60054: LD_VAR 0 2
60058: PUSH
60059: LD_INT 4
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: LIST
60066: PUSH
60067: LD_VAR 0 1
60071: PUSH
60072: LD_INT 3
60074: PLUS
60075: PUSH
60076: LD_VAR 0 2
60080: PUSH
60081: LD_INT 3
60083: PLUS
60084: PUSH
60085: LD_INT 5
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: LIST
60092: PUSH
60093: LD_VAR 0 1
60097: PUSH
60098: LD_VAR 0 2
60102: PUSH
60103: LD_INT 4
60105: PLUS
60106: PUSH
60107: LD_INT 0
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: LIST
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: ST_TO_ADDR
// end ; 1 :
60122: GO 60822
60124: LD_INT 1
60126: DOUBLE
60127: EQUAL
60128: IFTRUE 60132
60130: GO 60265
60132: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60133: LD_ADDR_VAR 0 5
60137: PUSH
60138: LD_VAR 0 1
60142: PUSH
60143: LD_VAR 0 2
60147: PUSH
60148: LD_INT 4
60150: MINUS
60151: PUSH
60152: LD_INT 3
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: LIST
60159: PUSH
60160: LD_VAR 0 1
60164: PUSH
60165: LD_INT 3
60167: MINUS
60168: PUSH
60169: LD_VAR 0 2
60173: PUSH
60174: LD_INT 3
60176: MINUS
60177: PUSH
60178: LD_INT 2
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: LIST
60185: PUSH
60186: LD_VAR 0 1
60190: PUSH
60191: LD_INT 4
60193: MINUS
60194: PUSH
60195: LD_VAR 0 2
60199: PUSH
60200: LD_INT 1
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: LIST
60207: PUSH
60208: LD_VAR 0 1
60212: PUSH
60213: LD_VAR 0 2
60217: PUSH
60218: LD_INT 3
60220: PLUS
60221: PUSH
60222: LD_INT 0
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: LIST
60229: PUSH
60230: LD_VAR 0 1
60234: PUSH
60235: LD_INT 4
60237: PLUS
60238: PUSH
60239: LD_VAR 0 2
60243: PUSH
60244: LD_INT 4
60246: PLUS
60247: PUSH
60248: LD_INT 5
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: LIST
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: LIST
60260: LIST
60261: LIST
60262: ST_TO_ADDR
// end ; 2 :
60263: GO 60822
60265: LD_INT 2
60267: DOUBLE
60268: EQUAL
60269: IFTRUE 60273
60271: GO 60402
60273: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
60274: LD_ADDR_VAR 0 5
60278: PUSH
60279: LD_VAR 0 1
60283: PUSH
60284: LD_VAR 0 2
60288: PUSH
60289: LD_INT 3
60291: MINUS
60292: PUSH
60293: LD_INT 3
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: LIST
60300: PUSH
60301: LD_VAR 0 1
60305: PUSH
60306: LD_INT 4
60308: PLUS
60309: PUSH
60310: LD_VAR 0 2
60314: PUSH
60315: LD_INT 4
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: LIST
60322: PUSH
60323: LD_VAR 0 1
60327: PUSH
60328: LD_VAR 0 2
60332: PUSH
60333: LD_INT 4
60335: PLUS
60336: PUSH
60337: LD_INT 0
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: LIST
60344: PUSH
60345: LD_VAR 0 1
60349: PUSH
60350: LD_INT 3
60352: MINUS
60353: PUSH
60354: LD_VAR 0 2
60358: PUSH
60359: LD_INT 1
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: LIST
60366: PUSH
60367: LD_VAR 0 1
60371: PUSH
60372: LD_INT 4
60374: MINUS
60375: PUSH
60376: LD_VAR 0 2
60380: PUSH
60381: LD_INT 4
60383: MINUS
60384: PUSH
60385: LD_INT 2
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: LIST
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: ST_TO_ADDR
// end ; 3 :
60400: GO 60822
60402: LD_INT 3
60404: DOUBLE
60405: EQUAL
60406: IFTRUE 60410
60408: GO 60543
60410: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60411: LD_ADDR_VAR 0 5
60415: PUSH
60416: LD_VAR 0 1
60420: PUSH
60421: LD_INT 3
60423: PLUS
60424: PUSH
60425: LD_VAR 0 2
60429: PUSH
60430: LD_INT 4
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: LIST
60437: PUSH
60438: LD_VAR 0 1
60442: PUSH
60443: LD_INT 4
60445: PLUS
60446: PUSH
60447: LD_VAR 0 2
60451: PUSH
60452: LD_INT 4
60454: PLUS
60455: PUSH
60456: LD_INT 5
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: LIST
60463: PUSH
60464: LD_VAR 0 1
60468: PUSH
60469: LD_INT 4
60471: MINUS
60472: PUSH
60473: LD_VAR 0 2
60477: PUSH
60478: LD_INT 1
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: LIST
60485: PUSH
60486: LD_VAR 0 1
60490: PUSH
60491: LD_VAR 0 2
60495: PUSH
60496: LD_INT 4
60498: MINUS
60499: PUSH
60500: LD_INT 3
60502: PUSH
60503: EMPTY
60504: LIST
60505: LIST
60506: LIST
60507: PUSH
60508: LD_VAR 0 1
60512: PUSH
60513: LD_INT 3
60515: MINUS
60516: PUSH
60517: LD_VAR 0 2
60521: PUSH
60522: LD_INT 3
60524: MINUS
60525: PUSH
60526: LD_INT 2
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: LIST
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: LIST
60538: LIST
60539: LIST
60540: ST_TO_ADDR
// end ; 4 :
60541: GO 60822
60543: LD_INT 4
60545: DOUBLE
60546: EQUAL
60547: IFTRUE 60551
60549: GO 60684
60551: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60552: LD_ADDR_VAR 0 5
60556: PUSH
60557: LD_VAR 0 1
60561: PUSH
60562: LD_VAR 0 2
60566: PUSH
60567: LD_INT 4
60569: PLUS
60570: PUSH
60571: LD_INT 0
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: LIST
60578: PUSH
60579: LD_VAR 0 1
60583: PUSH
60584: LD_INT 3
60586: PLUS
60587: PUSH
60588: LD_VAR 0 2
60592: PUSH
60593: LD_INT 3
60595: PLUS
60596: PUSH
60597: LD_INT 5
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: LIST
60604: PUSH
60605: LD_VAR 0 1
60609: PUSH
60610: LD_INT 4
60612: PLUS
60613: PUSH
60614: LD_VAR 0 2
60618: PUSH
60619: LD_INT 4
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: LIST
60626: PUSH
60627: LD_VAR 0 1
60631: PUSH
60632: LD_VAR 0 2
60636: PUSH
60637: LD_INT 3
60639: MINUS
60640: PUSH
60641: LD_INT 3
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: LIST
60648: PUSH
60649: LD_VAR 0 1
60653: PUSH
60654: LD_INT 4
60656: MINUS
60657: PUSH
60658: LD_VAR 0 2
60662: PUSH
60663: LD_INT 4
60665: MINUS
60666: PUSH
60667: LD_INT 2
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: LIST
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: LIST
60681: ST_TO_ADDR
// end ; 5 :
60682: GO 60822
60684: LD_INT 5
60686: DOUBLE
60687: EQUAL
60688: IFTRUE 60692
60690: GO 60821
60692: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60693: LD_ADDR_VAR 0 5
60697: PUSH
60698: LD_VAR 0 1
60702: PUSH
60703: LD_INT 4
60705: MINUS
60706: PUSH
60707: LD_VAR 0 2
60711: PUSH
60712: LD_INT 1
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: LIST
60719: PUSH
60720: LD_VAR 0 1
60724: PUSH
60725: LD_VAR 0 2
60729: PUSH
60730: LD_INT 4
60732: MINUS
60733: PUSH
60734: LD_INT 3
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: LIST
60741: PUSH
60742: LD_VAR 0 1
60746: PUSH
60747: LD_INT 4
60749: PLUS
60750: PUSH
60751: LD_VAR 0 2
60755: PUSH
60756: LD_INT 4
60758: PLUS
60759: PUSH
60760: LD_INT 5
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: LIST
60767: PUSH
60768: LD_VAR 0 1
60772: PUSH
60773: LD_INT 3
60775: PLUS
60776: PUSH
60777: LD_VAR 0 2
60781: PUSH
60782: LD_INT 4
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: LIST
60789: PUSH
60790: LD_VAR 0 1
60794: PUSH
60795: LD_VAR 0 2
60799: PUSH
60800: LD_INT 3
60802: PLUS
60803: PUSH
60804: LD_INT 0
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: LIST
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: ST_TO_ADDR
// end ; end ;
60819: GO 60822
60821: POP
// result := list ;
60822: LD_ADDR_VAR 0 4
60826: PUSH
60827: LD_VAR 0 5
60831: ST_TO_ADDR
// end ;
60832: LD_VAR 0 4
60836: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60837: LD_INT 0
60839: PPUSH
60840: PPUSH
60841: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60842: LD_VAR 0 1
60846: NOT
60847: PUSH
60848: LD_VAR 0 2
60852: PUSH
60853: LD_INT 1
60855: PUSH
60856: LD_INT 2
60858: PUSH
60859: LD_INT 3
60861: PUSH
60862: LD_INT 4
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: LIST
60869: LIST
60870: IN
60871: NOT
60872: OR
60873: IFFALSE 60877
// exit ;
60875: GO 60969
// tmp := [ ] ;
60877: LD_ADDR_VAR 0 5
60881: PUSH
60882: EMPTY
60883: ST_TO_ADDR
// for i in units do
60884: LD_ADDR_VAR 0 4
60888: PUSH
60889: LD_VAR 0 1
60893: PUSH
60894: FOR_IN
60895: IFFALSE 60938
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
60897: LD_ADDR_VAR 0 5
60901: PUSH
60902: LD_VAR 0 5
60906: PPUSH
60907: LD_VAR 0 5
60911: PUSH
60912: LD_INT 1
60914: PLUS
60915: PPUSH
60916: LD_VAR 0 4
60920: PPUSH
60921: LD_VAR 0 2
60925: PPUSH
60926: CALL_OW 259
60930: PPUSH
60931: CALL_OW 2
60935: ST_TO_ADDR
60936: GO 60894
60938: POP
60939: POP
// if not tmp then
60940: LD_VAR 0 5
60944: NOT
60945: IFFALSE 60949
// exit ;
60947: GO 60969
// result := SortListByListDesc ( units , tmp ) ;
60949: LD_ADDR_VAR 0 3
60953: PUSH
60954: LD_VAR 0 1
60958: PPUSH
60959: LD_VAR 0 5
60963: PPUSH
60964: CALL_OW 77
60968: ST_TO_ADDR
// end ;
60969: LD_VAR 0 3
60973: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60974: LD_INT 0
60976: PPUSH
60977: PPUSH
60978: PPUSH
// result := false ;
60979: LD_ADDR_VAR 0 3
60983: PUSH
60984: LD_INT 0
60986: ST_TO_ADDR
// x := GetX ( building ) ;
60987: LD_ADDR_VAR 0 4
60991: PUSH
60992: LD_VAR 0 2
60996: PPUSH
60997: CALL_OW 250
61001: ST_TO_ADDR
// y := GetY ( building ) ;
61002: LD_ADDR_VAR 0 5
61006: PUSH
61007: LD_VAR 0 2
61011: PPUSH
61012: CALL_OW 251
61016: ST_TO_ADDR
// if not building or not x or not y then
61017: LD_VAR 0 2
61021: NOT
61022: PUSH
61023: LD_VAR 0 4
61027: NOT
61028: OR
61029: PUSH
61030: LD_VAR 0 5
61034: NOT
61035: OR
61036: IFFALSE 61040
// exit ;
61038: GO 61132
// if GetTaskList ( unit ) then
61040: LD_VAR 0 1
61044: PPUSH
61045: CALL_OW 437
61049: IFFALSE 61132
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61051: LD_STRING e
61053: PUSH
61054: LD_VAR 0 1
61058: PPUSH
61059: CALL_OW 437
61063: PUSH
61064: LD_INT 1
61066: ARRAY
61067: PUSH
61068: LD_INT 1
61070: ARRAY
61071: EQUAL
61072: PUSH
61073: LD_VAR 0 4
61077: PUSH
61078: LD_VAR 0 1
61082: PPUSH
61083: CALL_OW 437
61087: PUSH
61088: LD_INT 1
61090: ARRAY
61091: PUSH
61092: LD_INT 2
61094: ARRAY
61095: EQUAL
61096: AND
61097: PUSH
61098: LD_VAR 0 5
61102: PUSH
61103: LD_VAR 0 1
61107: PPUSH
61108: CALL_OW 437
61112: PUSH
61113: LD_INT 1
61115: ARRAY
61116: PUSH
61117: LD_INT 3
61119: ARRAY
61120: EQUAL
61121: AND
61122: IFFALSE 61132
// result := true end ;
61124: LD_ADDR_VAR 0 3
61128: PUSH
61129: LD_INT 1
61131: ST_TO_ADDR
// end ;
61132: LD_VAR 0 3
61136: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
61137: LD_INT 0
61139: PPUSH
// result := false ;
61140: LD_ADDR_VAR 0 4
61144: PUSH
61145: LD_INT 0
61147: ST_TO_ADDR
// if GetTaskList ( unit ) then
61148: LD_VAR 0 1
61152: PPUSH
61153: CALL_OW 437
61157: IFFALSE 61240
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61159: LD_STRING M
61161: PUSH
61162: LD_VAR 0 1
61166: PPUSH
61167: CALL_OW 437
61171: PUSH
61172: LD_INT 1
61174: ARRAY
61175: PUSH
61176: LD_INT 1
61178: ARRAY
61179: EQUAL
61180: PUSH
61181: LD_VAR 0 2
61185: PUSH
61186: LD_VAR 0 1
61190: PPUSH
61191: CALL_OW 437
61195: PUSH
61196: LD_INT 1
61198: ARRAY
61199: PUSH
61200: LD_INT 2
61202: ARRAY
61203: EQUAL
61204: AND
61205: PUSH
61206: LD_VAR 0 3
61210: PUSH
61211: LD_VAR 0 1
61215: PPUSH
61216: CALL_OW 437
61220: PUSH
61221: LD_INT 1
61223: ARRAY
61224: PUSH
61225: LD_INT 3
61227: ARRAY
61228: EQUAL
61229: AND
61230: IFFALSE 61240
// result := true ;
61232: LD_ADDR_VAR 0 4
61236: PUSH
61237: LD_INT 1
61239: ST_TO_ADDR
// end ; end ;
61240: LD_VAR 0 4
61244: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
61245: LD_INT 0
61247: PPUSH
61248: PPUSH
61249: PPUSH
61250: PPUSH
// if not unit or not area then
61251: LD_VAR 0 1
61255: NOT
61256: PUSH
61257: LD_VAR 0 2
61261: NOT
61262: OR
61263: IFFALSE 61267
// exit ;
61265: GO 61431
// tmp := AreaToList ( area , i ) ;
61267: LD_ADDR_VAR 0 6
61271: PUSH
61272: LD_VAR 0 2
61276: PPUSH
61277: LD_VAR 0 5
61281: PPUSH
61282: CALL_OW 517
61286: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
61287: LD_ADDR_VAR 0 5
61291: PUSH
61292: DOUBLE
61293: LD_INT 1
61295: DEC
61296: ST_TO_ADDR
61297: LD_VAR 0 6
61301: PUSH
61302: LD_INT 1
61304: ARRAY
61305: PUSH
61306: FOR_TO
61307: IFFALSE 61429
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
61309: LD_ADDR_VAR 0 7
61313: PUSH
61314: LD_VAR 0 6
61318: PUSH
61319: LD_INT 1
61321: ARRAY
61322: PUSH
61323: LD_VAR 0 5
61327: ARRAY
61328: PUSH
61329: LD_VAR 0 6
61333: PUSH
61334: LD_INT 2
61336: ARRAY
61337: PUSH
61338: LD_VAR 0 5
61342: ARRAY
61343: PUSH
61344: EMPTY
61345: LIST
61346: LIST
61347: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
61348: LD_VAR 0 7
61352: PUSH
61353: LD_INT 1
61355: ARRAY
61356: PPUSH
61357: LD_VAR 0 7
61361: PUSH
61362: LD_INT 2
61364: ARRAY
61365: PPUSH
61366: CALL_OW 428
61370: PUSH
61371: LD_INT 0
61373: EQUAL
61374: IFFALSE 61427
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61376: LD_VAR 0 1
61380: PPUSH
61381: LD_VAR 0 7
61385: PUSH
61386: LD_INT 1
61388: ARRAY
61389: PPUSH
61390: LD_VAR 0 7
61394: PUSH
61395: LD_INT 2
61397: ARRAY
61398: PPUSH
61399: LD_VAR 0 3
61403: PPUSH
61404: CALL_OW 48
// result := IsPlaced ( unit ) ;
61408: LD_ADDR_VAR 0 4
61412: PUSH
61413: LD_VAR 0 1
61417: PPUSH
61418: CALL_OW 305
61422: ST_TO_ADDR
// exit ;
61423: POP
61424: POP
61425: GO 61431
// end ; end ;
61427: GO 61306
61429: POP
61430: POP
// end ;
61431: LD_VAR 0 4
61435: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
61436: LD_INT 0
61438: PPUSH
61439: PPUSH
61440: PPUSH
// if not side or side > 8 then
61441: LD_VAR 0 1
61445: NOT
61446: PUSH
61447: LD_VAR 0 1
61451: PUSH
61452: LD_INT 8
61454: GREATER
61455: OR
61456: IFFALSE 61460
// exit ;
61458: GO 61647
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
61460: LD_ADDR_VAR 0 4
61464: PUSH
61465: LD_INT 22
61467: PUSH
61468: LD_VAR 0 1
61472: PUSH
61473: EMPTY
61474: LIST
61475: LIST
61476: PUSH
61477: LD_INT 21
61479: PUSH
61480: LD_INT 3
61482: PUSH
61483: EMPTY
61484: LIST
61485: LIST
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: PPUSH
61491: CALL_OW 69
61495: ST_TO_ADDR
// if not tmp then
61496: LD_VAR 0 4
61500: NOT
61501: IFFALSE 61505
// exit ;
61503: GO 61647
// enable_addtolog := true ;
61505: LD_ADDR_OWVAR 81
61509: PUSH
61510: LD_INT 1
61512: ST_TO_ADDR
// AddToLog ( [ ) ;
61513: LD_STRING [
61515: PPUSH
61516: CALL_OW 561
// for i in tmp do
61520: LD_ADDR_VAR 0 3
61524: PUSH
61525: LD_VAR 0 4
61529: PUSH
61530: FOR_IN
61531: IFFALSE 61638
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61533: LD_STRING [
61535: PUSH
61536: LD_VAR 0 3
61540: PPUSH
61541: CALL_OW 266
61545: STR
61546: PUSH
61547: LD_STRING , 
61549: STR
61550: PUSH
61551: LD_VAR 0 3
61555: PPUSH
61556: CALL_OW 250
61560: STR
61561: PUSH
61562: LD_STRING , 
61564: STR
61565: PUSH
61566: LD_VAR 0 3
61570: PPUSH
61571: CALL_OW 251
61575: STR
61576: PUSH
61577: LD_STRING , 
61579: STR
61580: PUSH
61581: LD_VAR 0 3
61585: PPUSH
61586: CALL_OW 254
61590: STR
61591: PUSH
61592: LD_STRING , 
61594: STR
61595: PUSH
61596: LD_VAR 0 3
61600: PPUSH
61601: LD_INT 1
61603: PPUSH
61604: CALL_OW 268
61608: STR
61609: PUSH
61610: LD_STRING , 
61612: STR
61613: PUSH
61614: LD_VAR 0 3
61618: PPUSH
61619: LD_INT 2
61621: PPUSH
61622: CALL_OW 268
61626: STR
61627: PUSH
61628: LD_STRING ],
61630: STR
61631: PPUSH
61632: CALL_OW 561
// end ;
61636: GO 61530
61638: POP
61639: POP
// AddToLog ( ]; ) ;
61640: LD_STRING ];
61642: PPUSH
61643: CALL_OW 561
// end ;
61647: LD_VAR 0 2
61651: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61652: LD_INT 0
61654: PPUSH
61655: PPUSH
61656: PPUSH
61657: PPUSH
61658: PPUSH
// if not area or not rate or not max then
61659: LD_VAR 0 1
61663: NOT
61664: PUSH
61665: LD_VAR 0 2
61669: NOT
61670: OR
61671: PUSH
61672: LD_VAR 0 4
61676: NOT
61677: OR
61678: IFFALSE 61682
// exit ;
61680: GO 61874
// while 1 do
61682: LD_INT 1
61684: IFFALSE 61874
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61686: LD_ADDR_VAR 0 9
61690: PUSH
61691: LD_VAR 0 1
61695: PPUSH
61696: LD_INT 1
61698: PPUSH
61699: CALL_OW 287
61703: PUSH
61704: LD_INT 10
61706: MUL
61707: ST_TO_ADDR
// r := rate / 10 ;
61708: LD_ADDR_VAR 0 7
61712: PUSH
61713: LD_VAR 0 2
61717: PUSH
61718: LD_INT 10
61720: DIVREAL
61721: ST_TO_ADDR
// time := 1 1$00 ;
61722: LD_ADDR_VAR 0 8
61726: PUSH
61727: LD_INT 2100
61729: ST_TO_ADDR
// if amount < min then
61730: LD_VAR 0 9
61734: PUSH
61735: LD_VAR 0 3
61739: LESS
61740: IFFALSE 61758
// r := r * 2 else
61742: LD_ADDR_VAR 0 7
61746: PUSH
61747: LD_VAR 0 7
61751: PUSH
61752: LD_INT 2
61754: MUL
61755: ST_TO_ADDR
61756: GO 61784
// if amount > max then
61758: LD_VAR 0 9
61762: PUSH
61763: LD_VAR 0 4
61767: GREATER
61768: IFFALSE 61784
// r := r / 2 ;
61770: LD_ADDR_VAR 0 7
61774: PUSH
61775: LD_VAR 0 7
61779: PUSH
61780: LD_INT 2
61782: DIVREAL
61783: ST_TO_ADDR
// time := time / r ;
61784: LD_ADDR_VAR 0 8
61788: PUSH
61789: LD_VAR 0 8
61793: PUSH
61794: LD_VAR 0 7
61798: DIVREAL
61799: ST_TO_ADDR
// if time < 0 then
61800: LD_VAR 0 8
61804: PUSH
61805: LD_INT 0
61807: LESS
61808: IFFALSE 61825
// time := time * - 1 ;
61810: LD_ADDR_VAR 0 8
61814: PUSH
61815: LD_VAR 0 8
61819: PUSH
61820: LD_INT 1
61822: NEG
61823: MUL
61824: ST_TO_ADDR
// wait ( time ) ;
61825: LD_VAR 0 8
61829: PPUSH
61830: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
61834: LD_INT 35
61836: PPUSH
61837: LD_INT 875
61839: PPUSH
61840: CALL_OW 12
61844: PPUSH
61845: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61849: LD_INT 1
61851: PPUSH
61852: LD_INT 5
61854: PPUSH
61855: CALL_OW 12
61859: PPUSH
61860: LD_VAR 0 1
61864: PPUSH
61865: LD_INT 1
61867: PPUSH
61868: CALL_OW 55
// end ;
61872: GO 61682
// end ;
61874: LD_VAR 0 5
61878: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61879: LD_INT 0
61881: PPUSH
61882: PPUSH
61883: PPUSH
61884: PPUSH
61885: PPUSH
61886: PPUSH
61887: PPUSH
61888: PPUSH
// if not turrets or not factories then
61889: LD_VAR 0 1
61893: NOT
61894: PUSH
61895: LD_VAR 0 2
61899: NOT
61900: OR
61901: IFFALSE 61905
// exit ;
61903: GO 62212
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61905: LD_ADDR_VAR 0 10
61909: PUSH
61910: LD_INT 5
61912: PUSH
61913: LD_INT 6
61915: PUSH
61916: EMPTY
61917: LIST
61918: LIST
61919: PUSH
61920: LD_INT 2
61922: PUSH
61923: LD_INT 4
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: PUSH
61930: LD_INT 3
61932: PUSH
61933: LD_INT 5
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 24
61947: PUSH
61948: LD_INT 25
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PUSH
61955: LD_INT 23
61957: PUSH
61958: LD_INT 27
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: PUSH
61969: LD_INT 42
61971: PUSH
61972: LD_INT 43
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: LD_INT 44
61981: PUSH
61982: LD_INT 46
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: LD_INT 45
61991: PUSH
61992: LD_INT 47
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: LIST
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: LIST
62008: ST_TO_ADDR
// result := [ ] ;
62009: LD_ADDR_VAR 0 3
62013: PUSH
62014: EMPTY
62015: ST_TO_ADDR
// for i in turrets do
62016: LD_ADDR_VAR 0 4
62020: PUSH
62021: LD_VAR 0 1
62025: PUSH
62026: FOR_IN
62027: IFFALSE 62210
// begin nat := GetNation ( i ) ;
62029: LD_ADDR_VAR 0 7
62033: PUSH
62034: LD_VAR 0 4
62038: PPUSH
62039: CALL_OW 248
62043: ST_TO_ADDR
// weapon := 0 ;
62044: LD_ADDR_VAR 0 8
62048: PUSH
62049: LD_INT 0
62051: ST_TO_ADDR
// if not nat then
62052: LD_VAR 0 7
62056: NOT
62057: IFFALSE 62061
// continue ;
62059: GO 62026
// for j in list [ nat ] do
62061: LD_ADDR_VAR 0 5
62065: PUSH
62066: LD_VAR 0 10
62070: PUSH
62071: LD_VAR 0 7
62075: ARRAY
62076: PUSH
62077: FOR_IN
62078: IFFALSE 62119
// if GetBWeapon ( i ) = j [ 1 ] then
62080: LD_VAR 0 4
62084: PPUSH
62085: CALL_OW 269
62089: PUSH
62090: LD_VAR 0 5
62094: PUSH
62095: LD_INT 1
62097: ARRAY
62098: EQUAL
62099: IFFALSE 62117
// begin weapon := j [ 2 ] ;
62101: LD_ADDR_VAR 0 8
62105: PUSH
62106: LD_VAR 0 5
62110: PUSH
62111: LD_INT 2
62113: ARRAY
62114: ST_TO_ADDR
// break ;
62115: GO 62119
// end ;
62117: GO 62077
62119: POP
62120: POP
// if not weapon then
62121: LD_VAR 0 8
62125: NOT
62126: IFFALSE 62130
// continue ;
62128: GO 62026
// for k in factories do
62130: LD_ADDR_VAR 0 6
62134: PUSH
62135: LD_VAR 0 2
62139: PUSH
62140: FOR_IN
62141: IFFALSE 62206
// begin weapons := AvailableWeaponList ( k ) ;
62143: LD_ADDR_VAR 0 9
62147: PUSH
62148: LD_VAR 0 6
62152: PPUSH
62153: CALL_OW 478
62157: ST_TO_ADDR
// if not weapons then
62158: LD_VAR 0 9
62162: NOT
62163: IFFALSE 62167
// continue ;
62165: GO 62140
// if weapon in weapons then
62167: LD_VAR 0 8
62171: PUSH
62172: LD_VAR 0 9
62176: IN
62177: IFFALSE 62204
// begin result := [ i , weapon ] ;
62179: LD_ADDR_VAR 0 3
62183: PUSH
62184: LD_VAR 0 4
62188: PUSH
62189: LD_VAR 0 8
62193: PUSH
62194: EMPTY
62195: LIST
62196: LIST
62197: ST_TO_ADDR
// exit ;
62198: POP
62199: POP
62200: POP
62201: POP
62202: GO 62212
// end ; end ;
62204: GO 62140
62206: POP
62207: POP
// end ;
62208: GO 62026
62210: POP
62211: POP
// end ;
62212: LD_VAR 0 3
62216: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
62217: LD_INT 0
62219: PPUSH
// if not side or side > 8 then
62220: LD_VAR 0 3
62224: NOT
62225: PUSH
62226: LD_VAR 0 3
62230: PUSH
62231: LD_INT 8
62233: GREATER
62234: OR
62235: IFFALSE 62239
// exit ;
62237: GO 62298
// if not range then
62239: LD_VAR 0 4
62243: NOT
62244: IFFALSE 62255
// range := - 12 ;
62246: LD_ADDR_VAR 0 4
62250: PUSH
62251: LD_INT 12
62253: NEG
62254: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
62255: LD_VAR 0 1
62259: PPUSH
62260: LD_VAR 0 2
62264: PPUSH
62265: LD_VAR 0 3
62269: PPUSH
62270: LD_VAR 0 4
62274: PPUSH
62275: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
62279: LD_VAR 0 1
62283: PPUSH
62284: LD_VAR 0 2
62288: PPUSH
62289: LD_VAR 0 3
62293: PPUSH
62294: CALL_OW 331
// end ;
62298: LD_VAR 0 5
62302: RET
// export function Video ( mode ) ; begin
62303: LD_INT 0
62305: PPUSH
// ingame_video = mode ;
62306: LD_ADDR_OWVAR 52
62310: PUSH
62311: LD_VAR 0 1
62315: ST_TO_ADDR
// interface_hidden = mode ;
62316: LD_ADDR_OWVAR 54
62320: PUSH
62321: LD_VAR 0 1
62325: ST_TO_ADDR
// end ;
62326: LD_VAR 0 2
62330: RET
// export function Join ( array , element ) ; begin
62331: LD_INT 0
62333: PPUSH
// result := Replace ( array , array + 1 , element ) ;
62334: LD_ADDR_VAR 0 3
62338: PUSH
62339: LD_VAR 0 1
62343: PPUSH
62344: LD_VAR 0 1
62348: PUSH
62349: LD_INT 1
62351: PLUS
62352: PPUSH
62353: LD_VAR 0 2
62357: PPUSH
62358: CALL_OW 1
62362: ST_TO_ADDR
// end ;
62363: LD_VAR 0 3
62367: RET
// export function JoinUnion ( array , element ) ; begin
62368: LD_INT 0
62370: PPUSH
// result := array union element ;
62371: LD_ADDR_VAR 0 3
62375: PUSH
62376: LD_VAR 0 1
62380: PUSH
62381: LD_VAR 0 2
62385: UNION
62386: ST_TO_ADDR
// end ;
62387: LD_VAR 0 3
62391: RET
// export function GetBehemoths ( side ) ; begin
62392: LD_INT 0
62394: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
62395: LD_ADDR_VAR 0 2
62399: PUSH
62400: LD_INT 22
62402: PUSH
62403: LD_VAR 0 1
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: PUSH
62412: LD_INT 31
62414: PUSH
62415: LD_INT 25
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: PUSH
62422: EMPTY
62423: LIST
62424: LIST
62425: PPUSH
62426: CALL_OW 69
62430: ST_TO_ADDR
// end ;
62431: LD_VAR 0 2
62435: RET
// export function Shuffle ( array ) ; var i , index ; begin
62436: LD_INT 0
62438: PPUSH
62439: PPUSH
62440: PPUSH
// result := [ ] ;
62441: LD_ADDR_VAR 0 2
62445: PUSH
62446: EMPTY
62447: ST_TO_ADDR
// if not array then
62448: LD_VAR 0 1
62452: NOT
62453: IFFALSE 62457
// exit ;
62455: GO 62556
// Randomize ;
62457: CALL_OW 10
// for i = array downto 1 do
62461: LD_ADDR_VAR 0 3
62465: PUSH
62466: DOUBLE
62467: LD_VAR 0 1
62471: INC
62472: ST_TO_ADDR
62473: LD_INT 1
62475: PUSH
62476: FOR_DOWNTO
62477: IFFALSE 62554
// begin index := rand ( 1 , array ) ;
62479: LD_ADDR_VAR 0 4
62483: PUSH
62484: LD_INT 1
62486: PPUSH
62487: LD_VAR 0 1
62491: PPUSH
62492: CALL_OW 12
62496: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62497: LD_ADDR_VAR 0 2
62501: PUSH
62502: LD_VAR 0 2
62506: PPUSH
62507: LD_VAR 0 2
62511: PUSH
62512: LD_INT 1
62514: PLUS
62515: PPUSH
62516: LD_VAR 0 1
62520: PUSH
62521: LD_VAR 0 4
62525: ARRAY
62526: PPUSH
62527: CALL_OW 2
62531: ST_TO_ADDR
// array := Delete ( array , index ) ;
62532: LD_ADDR_VAR 0 1
62536: PUSH
62537: LD_VAR 0 1
62541: PPUSH
62542: LD_VAR 0 4
62546: PPUSH
62547: CALL_OW 3
62551: ST_TO_ADDR
// end ;
62552: GO 62476
62554: POP
62555: POP
// end ;
62556: LD_VAR 0 2
62560: RET
// export function GetBaseMaterials ( base ) ; begin
62561: LD_INT 0
62563: PPUSH
// result := [ 0 , 0 , 0 ] ;
62564: LD_ADDR_VAR 0 2
62568: PUSH
62569: LD_INT 0
62571: PUSH
62572: LD_INT 0
62574: PUSH
62575: LD_INT 0
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: LIST
62582: ST_TO_ADDR
// if not base then
62583: LD_VAR 0 1
62587: NOT
62588: IFFALSE 62592
// exit ;
62590: GO 62641
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
62592: LD_ADDR_VAR 0 2
62596: PUSH
62597: LD_VAR 0 1
62601: PPUSH
62602: LD_INT 1
62604: PPUSH
62605: CALL_OW 275
62609: PUSH
62610: LD_VAR 0 1
62614: PPUSH
62615: LD_INT 2
62617: PPUSH
62618: CALL_OW 275
62622: PUSH
62623: LD_VAR 0 1
62627: PPUSH
62628: LD_INT 3
62630: PPUSH
62631: CALL_OW 275
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: LIST
62640: ST_TO_ADDR
// end ;
62641: LD_VAR 0 2
62645: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
62646: LD_INT 0
62648: PPUSH
62649: PPUSH
// result := array ;
62650: LD_ADDR_VAR 0 3
62654: PUSH
62655: LD_VAR 0 1
62659: ST_TO_ADDR
// if size > 0 then
62660: LD_VAR 0 2
62664: PUSH
62665: LD_INT 0
62667: GREATER
62668: IFFALSE 62714
// for i := array downto size do
62670: LD_ADDR_VAR 0 4
62674: PUSH
62675: DOUBLE
62676: LD_VAR 0 1
62680: INC
62681: ST_TO_ADDR
62682: LD_VAR 0 2
62686: PUSH
62687: FOR_DOWNTO
62688: IFFALSE 62712
// result := Delete ( result , result ) ;
62690: LD_ADDR_VAR 0 3
62694: PUSH
62695: LD_VAR 0 3
62699: PPUSH
62700: LD_VAR 0 3
62704: PPUSH
62705: CALL_OW 3
62709: ST_TO_ADDR
62710: GO 62687
62712: POP
62713: POP
// end ;
62714: LD_VAR 0 3
62718: RET
// export function ComExit ( unit ) ; var tmp ; begin
62719: LD_INT 0
62721: PPUSH
62722: PPUSH
// if not IsInUnit ( unit ) then
62723: LD_VAR 0 1
62727: PPUSH
62728: CALL_OW 310
62732: NOT
62733: IFFALSE 62737
// exit ;
62735: GO 62797
// tmp := IsInUnit ( unit ) ;
62737: LD_ADDR_VAR 0 3
62741: PUSH
62742: LD_VAR 0 1
62746: PPUSH
62747: CALL_OW 310
62751: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
62752: LD_VAR 0 3
62756: PPUSH
62757: CALL_OW 247
62761: PUSH
62762: LD_INT 2
62764: EQUAL
62765: IFFALSE 62778
// ComExitVehicle ( unit ) else
62767: LD_VAR 0 1
62771: PPUSH
62772: CALL_OW 121
62776: GO 62787
// ComExitBuilding ( unit ) ;
62778: LD_VAR 0 1
62782: PPUSH
62783: CALL_OW 122
// result := tmp ;
62787: LD_ADDR_VAR 0 2
62791: PUSH
62792: LD_VAR 0 3
62796: ST_TO_ADDR
// end ;
62797: LD_VAR 0 2
62801: RET
// export function ComExitAll ( units ) ; var i ; begin
62802: LD_INT 0
62804: PPUSH
62805: PPUSH
// if not units then
62806: LD_VAR 0 1
62810: NOT
62811: IFFALSE 62815
// exit ;
62813: GO 62841
// for i in units do
62815: LD_ADDR_VAR 0 3
62819: PUSH
62820: LD_VAR 0 1
62824: PUSH
62825: FOR_IN
62826: IFFALSE 62839
// ComExit ( i ) ;
62828: LD_VAR 0 3
62832: PPUSH
62833: CALL 62719 0 1
62837: GO 62825
62839: POP
62840: POP
// end ;
62841: LD_VAR 0 2
62845: RET
// export function ResetHc ; begin
62846: LD_INT 0
62848: PPUSH
// InitHc ;
62849: CALL_OW 19
// hc_importance := 0 ;
62853: LD_ADDR_OWVAR 32
62857: PUSH
62858: LD_INT 0
62860: ST_TO_ADDR
// end ;
62861: LD_VAR 0 1
62865: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
62866: LD_INT 0
62868: PPUSH
62869: PPUSH
62870: PPUSH
// _x := ( x1 + x2 ) div 2 ;
62871: LD_ADDR_VAR 0 6
62875: PUSH
62876: LD_VAR 0 1
62880: PUSH
62881: LD_VAR 0 3
62885: PLUS
62886: PUSH
62887: LD_INT 2
62889: DIV
62890: ST_TO_ADDR
// if _x < 0 then
62891: LD_VAR 0 6
62895: PUSH
62896: LD_INT 0
62898: LESS
62899: IFFALSE 62916
// _x := _x * - 1 ;
62901: LD_ADDR_VAR 0 6
62905: PUSH
62906: LD_VAR 0 6
62910: PUSH
62911: LD_INT 1
62913: NEG
62914: MUL
62915: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
62916: LD_ADDR_VAR 0 7
62920: PUSH
62921: LD_VAR 0 2
62925: PUSH
62926: LD_VAR 0 4
62930: PLUS
62931: PUSH
62932: LD_INT 2
62934: DIV
62935: ST_TO_ADDR
// if _y < 0 then
62936: LD_VAR 0 7
62940: PUSH
62941: LD_INT 0
62943: LESS
62944: IFFALSE 62961
// _y := _y * - 1 ;
62946: LD_ADDR_VAR 0 7
62950: PUSH
62951: LD_VAR 0 7
62955: PUSH
62956: LD_INT 1
62958: NEG
62959: MUL
62960: ST_TO_ADDR
// result := [ _x , _y ] ;
62961: LD_ADDR_VAR 0 5
62965: PUSH
62966: LD_VAR 0 6
62970: PUSH
62971: LD_VAR 0 7
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: ST_TO_ADDR
// end ;
62980: LD_VAR 0 5
62984: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
62985: LD_INT 0
62987: PPUSH
62988: PPUSH
62989: PPUSH
62990: PPUSH
// task := GetTaskList ( unit ) ;
62991: LD_ADDR_VAR 0 7
62995: PUSH
62996: LD_VAR 0 1
63000: PPUSH
63001: CALL_OW 437
63005: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
63006: LD_VAR 0 7
63010: NOT
63011: PUSH
63012: LD_VAR 0 1
63016: PPUSH
63017: LD_VAR 0 2
63021: PPUSH
63022: CALL_OW 308
63026: NOT
63027: AND
63028: IFFALSE 63032
// exit ;
63030: GO 63150
// if IsInArea ( unit , area ) then
63032: LD_VAR 0 1
63036: PPUSH
63037: LD_VAR 0 2
63041: PPUSH
63042: CALL_OW 308
63046: IFFALSE 63064
// begin ComMoveToArea ( unit , goAway ) ;
63048: LD_VAR 0 1
63052: PPUSH
63053: LD_VAR 0 3
63057: PPUSH
63058: CALL_OW 113
// exit ;
63062: GO 63150
// end ; if task [ 1 ] [ 1 ] <> M then
63064: LD_VAR 0 7
63068: PUSH
63069: LD_INT 1
63071: ARRAY
63072: PUSH
63073: LD_INT 1
63075: ARRAY
63076: PUSH
63077: LD_STRING M
63079: NONEQUAL
63080: IFFALSE 63084
// exit ;
63082: GO 63150
// x := task [ 1 ] [ 2 ] ;
63084: LD_ADDR_VAR 0 5
63088: PUSH
63089: LD_VAR 0 7
63093: PUSH
63094: LD_INT 1
63096: ARRAY
63097: PUSH
63098: LD_INT 2
63100: ARRAY
63101: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
63102: LD_ADDR_VAR 0 6
63106: PUSH
63107: LD_VAR 0 7
63111: PUSH
63112: LD_INT 1
63114: ARRAY
63115: PUSH
63116: LD_INT 3
63118: ARRAY
63119: ST_TO_ADDR
// if InArea ( x , y , area ) then
63120: LD_VAR 0 5
63124: PPUSH
63125: LD_VAR 0 6
63129: PPUSH
63130: LD_VAR 0 2
63134: PPUSH
63135: CALL_OW 309
63139: IFFALSE 63150
// ComStop ( unit ) ;
63141: LD_VAR 0 1
63145: PPUSH
63146: CALL_OW 141
// end ;
63150: LD_VAR 0 4
63154: RET
// export function Abs ( value ) ; begin
63155: LD_INT 0
63157: PPUSH
// result := value ;
63158: LD_ADDR_VAR 0 2
63162: PUSH
63163: LD_VAR 0 1
63167: ST_TO_ADDR
// if value < 0 then
63168: LD_VAR 0 1
63172: PUSH
63173: LD_INT 0
63175: LESS
63176: IFFALSE 63193
// result := value * - 1 ;
63178: LD_ADDR_VAR 0 2
63182: PUSH
63183: LD_VAR 0 1
63187: PUSH
63188: LD_INT 1
63190: NEG
63191: MUL
63192: ST_TO_ADDR
// end ;
63193: LD_VAR 0 2
63197: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
63198: LD_INT 0
63200: PPUSH
63201: PPUSH
63202: PPUSH
63203: PPUSH
63204: PPUSH
63205: PPUSH
63206: PPUSH
63207: PPUSH
// if not unit or not building then
63208: LD_VAR 0 1
63212: NOT
63213: PUSH
63214: LD_VAR 0 2
63218: NOT
63219: OR
63220: IFFALSE 63224
// exit ;
63222: GO 63450
// x := GetX ( building ) ;
63224: LD_ADDR_VAR 0 4
63228: PUSH
63229: LD_VAR 0 2
63233: PPUSH
63234: CALL_OW 250
63238: ST_TO_ADDR
// y := GetY ( building ) ;
63239: LD_ADDR_VAR 0 6
63243: PUSH
63244: LD_VAR 0 2
63248: PPUSH
63249: CALL_OW 251
63253: ST_TO_ADDR
// d := GetDir ( building ) ;
63254: LD_ADDR_VAR 0 8
63258: PUSH
63259: LD_VAR 0 2
63263: PPUSH
63264: CALL_OW 254
63268: ST_TO_ADDR
// r := 4 ;
63269: LD_ADDR_VAR 0 9
63273: PUSH
63274: LD_INT 4
63276: ST_TO_ADDR
// for i := 1 to 5 do
63277: LD_ADDR_VAR 0 10
63281: PUSH
63282: DOUBLE
63283: LD_INT 1
63285: DEC
63286: ST_TO_ADDR
63287: LD_INT 5
63289: PUSH
63290: FOR_TO
63291: IFFALSE 63448
// begin _x := ShiftX ( x , d , r + i ) ;
63293: LD_ADDR_VAR 0 5
63297: PUSH
63298: LD_VAR 0 4
63302: PPUSH
63303: LD_VAR 0 8
63307: PPUSH
63308: LD_VAR 0 9
63312: PUSH
63313: LD_VAR 0 10
63317: PLUS
63318: PPUSH
63319: CALL_OW 272
63323: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
63324: LD_ADDR_VAR 0 7
63328: PUSH
63329: LD_VAR 0 6
63333: PPUSH
63334: LD_VAR 0 8
63338: PPUSH
63339: LD_VAR 0 9
63343: PUSH
63344: LD_VAR 0 10
63348: PLUS
63349: PPUSH
63350: CALL_OW 273
63354: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
63355: LD_VAR 0 5
63359: PPUSH
63360: LD_VAR 0 7
63364: PPUSH
63365: CALL_OW 488
63369: PUSH
63370: LD_VAR 0 5
63374: PPUSH
63375: LD_VAR 0 7
63379: PPUSH
63380: CALL_OW 428
63384: PPUSH
63385: CALL_OW 247
63389: PUSH
63390: LD_INT 3
63392: PUSH
63393: LD_INT 2
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: IN
63400: NOT
63401: AND
63402: IFFALSE 63446
// begin ComMoveXY ( unit , _x , _y ) ;
63404: LD_VAR 0 1
63408: PPUSH
63409: LD_VAR 0 5
63413: PPUSH
63414: LD_VAR 0 7
63418: PPUSH
63419: CALL_OW 111
// result := [ _x , _y ] ;
63423: LD_ADDR_VAR 0 3
63427: PUSH
63428: LD_VAR 0 5
63432: PUSH
63433: LD_VAR 0 7
63437: PUSH
63438: EMPTY
63439: LIST
63440: LIST
63441: ST_TO_ADDR
// exit ;
63442: POP
63443: POP
63444: GO 63450
// end ; end ;
63446: GO 63290
63448: POP
63449: POP
// end ;
63450: LD_VAR 0 3
63454: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
63455: LD_INT 0
63457: PPUSH
63458: PPUSH
63459: PPUSH
// result := 0 ;
63460: LD_ADDR_VAR 0 3
63464: PUSH
63465: LD_INT 0
63467: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
63468: LD_VAR 0 1
63472: PUSH
63473: LD_INT 0
63475: LESS
63476: PUSH
63477: LD_VAR 0 1
63481: PUSH
63482: LD_INT 8
63484: GREATER
63485: OR
63486: PUSH
63487: LD_VAR 0 2
63491: PUSH
63492: LD_INT 0
63494: LESS
63495: OR
63496: PUSH
63497: LD_VAR 0 2
63501: PUSH
63502: LD_INT 8
63504: GREATER
63505: OR
63506: IFFALSE 63510
// exit ;
63508: GO 63585
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
63510: LD_ADDR_VAR 0 4
63514: PUSH
63515: LD_INT 22
63517: PUSH
63518: LD_VAR 0 2
63522: PUSH
63523: EMPTY
63524: LIST
63525: LIST
63526: PPUSH
63527: CALL_OW 69
63531: PUSH
63532: FOR_IN
63533: IFFALSE 63583
// begin un := UnitShoot ( i ) ;
63535: LD_ADDR_VAR 0 5
63539: PUSH
63540: LD_VAR 0 4
63544: PPUSH
63545: CALL_OW 504
63549: ST_TO_ADDR
// if GetSide ( un ) = side1 then
63550: LD_VAR 0 5
63554: PPUSH
63555: CALL_OW 255
63559: PUSH
63560: LD_VAR 0 1
63564: EQUAL
63565: IFFALSE 63581
// begin result := un ;
63567: LD_ADDR_VAR 0 3
63571: PUSH
63572: LD_VAR 0 5
63576: ST_TO_ADDR
// exit ;
63577: POP
63578: POP
63579: GO 63585
// end ; end ;
63581: GO 63532
63583: POP
63584: POP
// end ;
63585: LD_VAR 0 3
63589: RET
// export function GetCargoBay ( units ) ; begin
63590: LD_INT 0
63592: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
63593: LD_ADDR_VAR 0 2
63597: PUSH
63598: LD_VAR 0 1
63602: PPUSH
63603: LD_INT 2
63605: PUSH
63606: LD_INT 34
63608: PUSH
63609: LD_INT 12
63611: PUSH
63612: EMPTY
63613: LIST
63614: LIST
63615: PUSH
63616: LD_INT 34
63618: PUSH
63619: LD_INT 51
63621: PUSH
63622: EMPTY
63623: LIST
63624: LIST
63625: PUSH
63626: LD_INT 34
63628: PUSH
63629: LD_INT 32
63631: PUSH
63632: EMPTY
63633: LIST
63634: LIST
63635: PUSH
63636: LD_INT 34
63638: PUSH
63639: LD_EXP 97
63643: PUSH
63644: EMPTY
63645: LIST
63646: LIST
63647: PUSH
63648: EMPTY
63649: LIST
63650: LIST
63651: LIST
63652: LIST
63653: LIST
63654: PPUSH
63655: CALL_OW 72
63659: ST_TO_ADDR
// end ;
63660: LD_VAR 0 2
63664: RET
// export function Negate ( value ) ; begin
63665: LD_INT 0
63667: PPUSH
// result := not value ;
63668: LD_ADDR_VAR 0 2
63672: PUSH
63673: LD_VAR 0 1
63677: NOT
63678: ST_TO_ADDR
// end ;
63679: LD_VAR 0 2
63683: RET
// export function Inc ( value ) ; begin
63684: LD_INT 0
63686: PPUSH
// result := value + 1 ;
63687: LD_ADDR_VAR 0 2
63691: PUSH
63692: LD_VAR 0 1
63696: PUSH
63697: LD_INT 1
63699: PLUS
63700: ST_TO_ADDR
// end ;
63701: LD_VAR 0 2
63705: RET
// export function Dec ( value ) ; begin
63706: LD_INT 0
63708: PPUSH
// result := value - 1 ;
63709: LD_ADDR_VAR 0 2
63713: PUSH
63714: LD_VAR 0 1
63718: PUSH
63719: LD_INT 1
63721: MINUS
63722: ST_TO_ADDR
// end ;
63723: LD_VAR 0 2
63727: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
63728: LD_INT 0
63730: PPUSH
63731: PPUSH
63732: PPUSH
63733: PPUSH
63734: PPUSH
63735: PPUSH
63736: PPUSH
63737: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
63738: LD_VAR 0 1
63742: PPUSH
63743: LD_VAR 0 2
63747: PPUSH
63748: CALL_OW 488
63752: NOT
63753: PUSH
63754: LD_VAR 0 3
63758: PPUSH
63759: LD_VAR 0 4
63763: PPUSH
63764: CALL_OW 488
63768: NOT
63769: OR
63770: IFFALSE 63783
// begin result := - 1 ;
63772: LD_ADDR_VAR 0 5
63776: PUSH
63777: LD_INT 1
63779: NEG
63780: ST_TO_ADDR
// exit ;
63781: GO 64018
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
63783: LD_ADDR_VAR 0 12
63787: PUSH
63788: LD_VAR 0 1
63792: PPUSH
63793: LD_VAR 0 2
63797: PPUSH
63798: LD_VAR 0 3
63802: PPUSH
63803: LD_VAR 0 4
63807: PPUSH
63808: CALL 62866 0 4
63812: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
63813: LD_ADDR_VAR 0 11
63817: PUSH
63818: LD_VAR 0 1
63822: PPUSH
63823: LD_VAR 0 2
63827: PPUSH
63828: LD_VAR 0 12
63832: PUSH
63833: LD_INT 1
63835: ARRAY
63836: PPUSH
63837: LD_VAR 0 12
63841: PUSH
63842: LD_INT 2
63844: ARRAY
63845: PPUSH
63846: CALL_OW 298
63850: ST_TO_ADDR
// distance := 9999 ;
63851: LD_ADDR_VAR 0 10
63855: PUSH
63856: LD_INT 9999
63858: ST_TO_ADDR
// for i := 0 to 5 do
63859: LD_ADDR_VAR 0 6
63863: PUSH
63864: DOUBLE
63865: LD_INT 0
63867: DEC
63868: ST_TO_ADDR
63869: LD_INT 5
63871: PUSH
63872: FOR_TO
63873: IFFALSE 64016
// begin _x := ShiftX ( x1 , i , centerDist ) ;
63875: LD_ADDR_VAR 0 7
63879: PUSH
63880: LD_VAR 0 1
63884: PPUSH
63885: LD_VAR 0 6
63889: PPUSH
63890: LD_VAR 0 11
63894: PPUSH
63895: CALL_OW 272
63899: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
63900: LD_ADDR_VAR 0 8
63904: PUSH
63905: LD_VAR 0 2
63909: PPUSH
63910: LD_VAR 0 6
63914: PPUSH
63915: LD_VAR 0 11
63919: PPUSH
63920: CALL_OW 273
63924: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
63925: LD_VAR 0 7
63929: PPUSH
63930: LD_VAR 0 8
63934: PPUSH
63935: CALL_OW 488
63939: NOT
63940: IFFALSE 63944
// continue ;
63942: GO 63872
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
63944: LD_ADDR_VAR 0 9
63948: PUSH
63949: LD_VAR 0 12
63953: PUSH
63954: LD_INT 1
63956: ARRAY
63957: PPUSH
63958: LD_VAR 0 12
63962: PUSH
63963: LD_INT 2
63965: ARRAY
63966: PPUSH
63967: LD_VAR 0 7
63971: PPUSH
63972: LD_VAR 0 8
63976: PPUSH
63977: CALL_OW 298
63981: ST_TO_ADDR
// if tmp < distance then
63982: LD_VAR 0 9
63986: PUSH
63987: LD_VAR 0 10
63991: LESS
63992: IFFALSE 64014
// begin result := i ;
63994: LD_ADDR_VAR 0 5
63998: PUSH
63999: LD_VAR 0 6
64003: ST_TO_ADDR
// distance := tmp ;
64004: LD_ADDR_VAR 0 10
64008: PUSH
64009: LD_VAR 0 9
64013: ST_TO_ADDR
// end ; end ;
64014: GO 63872
64016: POP
64017: POP
// end ;
64018: LD_VAR 0 5
64022: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64023: LD_INT 0
64025: PPUSH
64026: PPUSH
// if not driver or not IsInUnit ( driver ) then
64027: LD_VAR 0 1
64031: NOT
64032: PUSH
64033: LD_VAR 0 1
64037: PPUSH
64038: CALL_OW 310
64042: NOT
64043: OR
64044: IFFALSE 64048
// exit ;
64046: GO 64138
// vehicle := IsInUnit ( driver ) ;
64048: LD_ADDR_VAR 0 3
64052: PUSH
64053: LD_VAR 0 1
64057: PPUSH
64058: CALL_OW 310
64062: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64063: LD_VAR 0 1
64067: PPUSH
64068: LD_STRING \
64070: PUSH
64071: LD_INT 0
64073: PUSH
64074: LD_INT 0
64076: PUSH
64077: LD_INT 0
64079: PUSH
64080: LD_INT 0
64082: PUSH
64083: LD_INT 0
64085: PUSH
64086: LD_INT 0
64088: PUSH
64089: EMPTY
64090: LIST
64091: LIST
64092: LIST
64093: LIST
64094: LIST
64095: LIST
64096: LIST
64097: PUSH
64098: LD_STRING E
64100: PUSH
64101: LD_INT 0
64103: PUSH
64104: LD_INT 0
64106: PUSH
64107: LD_VAR 0 3
64111: PUSH
64112: LD_INT 0
64114: PUSH
64115: LD_INT 0
64117: PUSH
64118: LD_INT 0
64120: PUSH
64121: EMPTY
64122: LIST
64123: LIST
64124: LIST
64125: LIST
64126: LIST
64127: LIST
64128: LIST
64129: PUSH
64130: EMPTY
64131: LIST
64132: LIST
64133: PPUSH
64134: CALL_OW 446
// end ;
64138: LD_VAR 0 2
64142: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64143: LD_INT 0
64145: PPUSH
64146: PPUSH
// if not driver or not IsInUnit ( driver ) then
64147: LD_VAR 0 1
64151: NOT
64152: PUSH
64153: LD_VAR 0 1
64157: PPUSH
64158: CALL_OW 310
64162: NOT
64163: OR
64164: IFFALSE 64168
// exit ;
64166: GO 64258
// vehicle := IsInUnit ( driver ) ;
64168: LD_ADDR_VAR 0 3
64172: PUSH
64173: LD_VAR 0 1
64177: PPUSH
64178: CALL_OW 310
64182: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64183: LD_VAR 0 1
64187: PPUSH
64188: LD_STRING \
64190: PUSH
64191: LD_INT 0
64193: PUSH
64194: LD_INT 0
64196: PUSH
64197: LD_INT 0
64199: PUSH
64200: LD_INT 0
64202: PUSH
64203: LD_INT 0
64205: PUSH
64206: LD_INT 0
64208: PUSH
64209: EMPTY
64210: LIST
64211: LIST
64212: LIST
64213: LIST
64214: LIST
64215: LIST
64216: LIST
64217: PUSH
64218: LD_STRING E
64220: PUSH
64221: LD_INT 0
64223: PUSH
64224: LD_INT 0
64226: PUSH
64227: LD_VAR 0 3
64231: PUSH
64232: LD_INT 0
64234: PUSH
64235: LD_INT 0
64237: PUSH
64238: LD_INT 0
64240: PUSH
64241: EMPTY
64242: LIST
64243: LIST
64244: LIST
64245: LIST
64246: LIST
64247: LIST
64248: LIST
64249: PUSH
64250: EMPTY
64251: LIST
64252: LIST
64253: PPUSH
64254: CALL_OW 447
// end ;
64258: LD_VAR 0 2
64262: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
64263: LD_INT 0
64265: PPUSH
64266: PPUSH
64267: PPUSH
// tmp := [ ] ;
64268: LD_ADDR_VAR 0 5
64272: PUSH
64273: EMPTY
64274: ST_TO_ADDR
// for i in units do
64275: LD_ADDR_VAR 0 4
64279: PUSH
64280: LD_VAR 0 1
64284: PUSH
64285: FOR_IN
64286: IFFALSE 64324
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
64288: LD_ADDR_VAR 0 5
64292: PUSH
64293: LD_VAR 0 5
64297: PPUSH
64298: LD_VAR 0 5
64302: PUSH
64303: LD_INT 1
64305: PLUS
64306: PPUSH
64307: LD_VAR 0 4
64311: PPUSH
64312: CALL_OW 256
64316: PPUSH
64317: CALL_OW 2
64321: ST_TO_ADDR
64322: GO 64285
64324: POP
64325: POP
// if not tmp then
64326: LD_VAR 0 5
64330: NOT
64331: IFFALSE 64335
// exit ;
64333: GO 64383
// if asc then
64335: LD_VAR 0 2
64339: IFFALSE 64363
// result := SortListByListAsc ( units , tmp ) else
64341: LD_ADDR_VAR 0 3
64345: PUSH
64346: LD_VAR 0 1
64350: PPUSH
64351: LD_VAR 0 5
64355: PPUSH
64356: CALL_OW 76
64360: ST_TO_ADDR
64361: GO 64383
// result := SortListByListDesc ( units , tmp ) ;
64363: LD_ADDR_VAR 0 3
64367: PUSH
64368: LD_VAR 0 1
64372: PPUSH
64373: LD_VAR 0 5
64377: PPUSH
64378: CALL_OW 77
64382: ST_TO_ADDR
// end ;
64383: LD_VAR 0 3
64387: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
64388: LD_INT 0
64390: PPUSH
64391: PPUSH
// task := GetTaskList ( mech ) ;
64392: LD_ADDR_VAR 0 4
64396: PUSH
64397: LD_VAR 0 1
64401: PPUSH
64402: CALL_OW 437
64406: ST_TO_ADDR
// if not task then
64407: LD_VAR 0 4
64411: NOT
64412: IFFALSE 64416
// exit ;
64414: GO 64458
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
64416: LD_ADDR_VAR 0 3
64420: PUSH
64421: LD_VAR 0 4
64425: PUSH
64426: LD_INT 1
64428: ARRAY
64429: PUSH
64430: LD_INT 1
64432: ARRAY
64433: PUSH
64434: LD_STRING r
64436: EQUAL
64437: PUSH
64438: LD_VAR 0 4
64442: PUSH
64443: LD_INT 1
64445: ARRAY
64446: PUSH
64447: LD_INT 4
64449: ARRAY
64450: PUSH
64451: LD_VAR 0 2
64455: EQUAL
64456: AND
64457: ST_TO_ADDR
// end ;
64458: LD_VAR 0 3
64462: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
64463: LD_INT 0
64465: PPUSH
// SetDir ( unit , d ) ;
64466: LD_VAR 0 1
64470: PPUSH
64471: LD_VAR 0 4
64475: PPUSH
64476: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
64480: LD_VAR 0 1
64484: PPUSH
64485: LD_VAR 0 2
64489: PPUSH
64490: LD_VAR 0 3
64494: PPUSH
64495: LD_VAR 0 5
64499: PPUSH
64500: CALL_OW 48
// end ;
64504: LD_VAR 0 6
64508: RET
// export function ToNaturalNumber ( number ) ; begin
64509: LD_INT 0
64511: PPUSH
// result := number div 1 ;
64512: LD_ADDR_VAR 0 2
64516: PUSH
64517: LD_VAR 0 1
64521: PUSH
64522: LD_INT 1
64524: DIV
64525: ST_TO_ADDR
// if number < 0 then
64526: LD_VAR 0 1
64530: PUSH
64531: LD_INT 0
64533: LESS
64534: IFFALSE 64544
// result := 0 ;
64536: LD_ADDR_VAR 0 2
64540: PUSH
64541: LD_INT 0
64543: ST_TO_ADDR
// end ;
64544: LD_VAR 0 2
64548: RET
// export function SortByClass ( units , class ) ; var un ; begin
64549: LD_INT 0
64551: PPUSH
64552: PPUSH
// if not units or not class then
64553: LD_VAR 0 1
64557: NOT
64558: PUSH
64559: LD_VAR 0 2
64563: NOT
64564: OR
64565: IFFALSE 64569
// exit ;
64567: GO 64664
// result := [ ] ;
64569: LD_ADDR_VAR 0 3
64573: PUSH
64574: EMPTY
64575: ST_TO_ADDR
// for un in units do
64576: LD_ADDR_VAR 0 4
64580: PUSH
64581: LD_VAR 0 1
64585: PUSH
64586: FOR_IN
64587: IFFALSE 64662
// if GetClass ( un ) = class then
64589: LD_VAR 0 4
64593: PPUSH
64594: CALL_OW 257
64598: PUSH
64599: LD_VAR 0 2
64603: EQUAL
64604: IFFALSE 64631
// result := Insert ( result , 1 , un ) else
64606: LD_ADDR_VAR 0 3
64610: PUSH
64611: LD_VAR 0 3
64615: PPUSH
64616: LD_INT 1
64618: PPUSH
64619: LD_VAR 0 4
64623: PPUSH
64624: CALL_OW 2
64628: ST_TO_ADDR
64629: GO 64660
// result := Replace ( result , result + 1 , un ) ;
64631: LD_ADDR_VAR 0 3
64635: PUSH
64636: LD_VAR 0 3
64640: PPUSH
64641: LD_VAR 0 3
64645: PUSH
64646: LD_INT 1
64648: PLUS
64649: PPUSH
64650: LD_VAR 0 4
64654: PPUSH
64655: CALL_OW 1
64659: ST_TO_ADDR
64660: GO 64586
64662: POP
64663: POP
// end ;
64664: LD_VAR 0 3
64668: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
64669: LD_INT 0
64671: PPUSH
64672: PPUSH
64673: PPUSH
64674: PPUSH
64675: PPUSH
64676: PPUSH
64677: PPUSH
// result := [ ] ;
64678: LD_ADDR_VAR 0 4
64682: PUSH
64683: EMPTY
64684: ST_TO_ADDR
// if x - r < 0 then
64685: LD_VAR 0 1
64689: PUSH
64690: LD_VAR 0 3
64694: MINUS
64695: PUSH
64696: LD_INT 0
64698: LESS
64699: IFFALSE 64711
// min_x := 0 else
64701: LD_ADDR_VAR 0 8
64705: PUSH
64706: LD_INT 0
64708: ST_TO_ADDR
64709: GO 64727
// min_x := x - r ;
64711: LD_ADDR_VAR 0 8
64715: PUSH
64716: LD_VAR 0 1
64720: PUSH
64721: LD_VAR 0 3
64725: MINUS
64726: ST_TO_ADDR
// if y - r < 0 then
64727: LD_VAR 0 2
64731: PUSH
64732: LD_VAR 0 3
64736: MINUS
64737: PUSH
64738: LD_INT 0
64740: LESS
64741: IFFALSE 64753
// min_y := 0 else
64743: LD_ADDR_VAR 0 7
64747: PUSH
64748: LD_INT 0
64750: ST_TO_ADDR
64751: GO 64769
// min_y := y - r ;
64753: LD_ADDR_VAR 0 7
64757: PUSH
64758: LD_VAR 0 2
64762: PUSH
64763: LD_VAR 0 3
64767: MINUS
64768: ST_TO_ADDR
// max_x := x + r ;
64769: LD_ADDR_VAR 0 9
64773: PUSH
64774: LD_VAR 0 1
64778: PUSH
64779: LD_VAR 0 3
64783: PLUS
64784: ST_TO_ADDR
// max_y := y + r ;
64785: LD_ADDR_VAR 0 10
64789: PUSH
64790: LD_VAR 0 2
64794: PUSH
64795: LD_VAR 0 3
64799: PLUS
64800: ST_TO_ADDR
// for _x = min_x to max_x do
64801: LD_ADDR_VAR 0 5
64805: PUSH
64806: DOUBLE
64807: LD_VAR 0 8
64811: DEC
64812: ST_TO_ADDR
64813: LD_VAR 0 9
64817: PUSH
64818: FOR_TO
64819: IFFALSE 64920
// for _y = min_y to max_y do
64821: LD_ADDR_VAR 0 6
64825: PUSH
64826: DOUBLE
64827: LD_VAR 0 7
64831: DEC
64832: ST_TO_ADDR
64833: LD_VAR 0 10
64837: PUSH
64838: FOR_TO
64839: IFFALSE 64916
// begin if not ValidHex ( _x , _y ) then
64841: LD_VAR 0 5
64845: PPUSH
64846: LD_VAR 0 6
64850: PPUSH
64851: CALL_OW 488
64855: NOT
64856: IFFALSE 64860
// continue ;
64858: GO 64838
// if GetResourceTypeXY ( _x , _y ) then
64860: LD_VAR 0 5
64864: PPUSH
64865: LD_VAR 0 6
64869: PPUSH
64870: CALL_OW 283
64874: IFFALSE 64914
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
64876: LD_ADDR_VAR 0 4
64880: PUSH
64881: LD_VAR 0 4
64885: PPUSH
64886: LD_VAR 0 4
64890: PUSH
64891: LD_INT 1
64893: PLUS
64894: PPUSH
64895: LD_VAR 0 5
64899: PUSH
64900: LD_VAR 0 6
64904: PUSH
64905: EMPTY
64906: LIST
64907: LIST
64908: PPUSH
64909: CALL_OW 1
64913: ST_TO_ADDR
// end ;
64914: GO 64838
64916: POP
64917: POP
64918: GO 64818
64920: POP
64921: POP
// end ;
64922: LD_VAR 0 4
64926: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
64927: LD_INT 0
64929: PPUSH
64930: PPUSH
64931: PPUSH
64932: PPUSH
64933: PPUSH
64934: PPUSH
64935: PPUSH
64936: PPUSH
// if not units then
64937: LD_VAR 0 1
64941: NOT
64942: IFFALSE 64946
// exit ;
64944: GO 65371
// result := UnitFilter ( units , [ f_ok ] ) ;
64946: LD_ADDR_VAR 0 3
64950: PUSH
64951: LD_VAR 0 1
64955: PPUSH
64956: LD_INT 50
64958: PUSH
64959: EMPTY
64960: LIST
64961: PPUSH
64962: CALL_OW 72
64966: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
64967: LD_ADDR_VAR 0 8
64971: PUSH
64972: LD_VAR 0 1
64976: PUSH
64977: LD_INT 1
64979: ARRAY
64980: PPUSH
64981: CALL_OW 255
64985: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
64986: LD_ADDR_VAR 0 10
64990: PUSH
64991: LD_INT 29
64993: PUSH
64994: LD_EXP 100
64998: PUSH
64999: EMPTY
65000: LIST
65001: LIST
65002: ST_TO_ADDR
// if not result then
65003: LD_VAR 0 3
65007: NOT
65008: IFFALSE 65012
// exit ;
65010: GO 65371
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
65012: LD_ADDR_VAR 0 5
65016: PUSH
65017: LD_INT 81
65019: PUSH
65020: LD_VAR 0 8
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: PPUSH
65029: CALL_OW 69
65033: ST_TO_ADDR
// for i in result do
65034: LD_ADDR_VAR 0 4
65038: PUSH
65039: LD_VAR 0 3
65043: PUSH
65044: FOR_IN
65045: IFFALSE 65369
// begin tag := GetTag ( i ) + 1 ;
65047: LD_ADDR_VAR 0 9
65051: PUSH
65052: LD_VAR 0 4
65056: PPUSH
65057: CALL_OW 110
65061: PUSH
65062: LD_INT 1
65064: PLUS
65065: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
65066: LD_ADDR_VAR 0 7
65070: PUSH
65071: LD_VAR 0 4
65075: PPUSH
65076: CALL_OW 250
65080: PPUSH
65081: LD_VAR 0 4
65085: PPUSH
65086: CALL_OW 251
65090: PPUSH
65091: LD_INT 6
65093: PPUSH
65094: CALL 64669 0 3
65098: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
65099: LD_VAR 0 7
65103: PUSH
65104: LD_VAR 0 4
65108: PPUSH
65109: CALL_OW 264
65113: PUSH
65114: LD_VAR 0 10
65118: IN
65119: NOT
65120: AND
65121: IFFALSE 65160
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
65123: LD_VAR 0 4
65127: PPUSH
65128: LD_VAR 0 7
65132: PUSH
65133: LD_INT 1
65135: ARRAY
65136: PUSH
65137: LD_INT 1
65139: ARRAY
65140: PPUSH
65141: LD_VAR 0 7
65145: PUSH
65146: LD_INT 1
65148: ARRAY
65149: PUSH
65150: LD_INT 2
65152: ARRAY
65153: PPUSH
65154: CALL_OW 116
65158: GO 65367
// if path > tag then
65160: LD_VAR 0 2
65164: PUSH
65165: LD_VAR 0 9
65169: GREATER
65170: IFFALSE 65337
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
65172: LD_ADDR_VAR 0 6
65176: PUSH
65177: LD_VAR 0 5
65181: PPUSH
65182: LD_INT 91
65184: PUSH
65185: LD_VAR 0 4
65189: PUSH
65190: LD_INT 12
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: LIST
65197: PPUSH
65198: CALL_OW 72
65202: ST_TO_ADDR
// if nearEnemy then
65203: LD_VAR 0 6
65207: IFFALSE 65235
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
65209: LD_VAR 0 4
65213: PPUSH
65214: LD_VAR 0 6
65218: PPUSH
65219: LD_VAR 0 4
65223: PPUSH
65224: CALL_OW 74
65228: PPUSH
65229: CALL_OW 115
65233: GO 65335
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
65235: LD_VAR 0 4
65239: PPUSH
65240: LD_VAR 0 2
65244: PUSH
65245: LD_VAR 0 9
65249: ARRAY
65250: PUSH
65251: LD_INT 1
65253: ARRAY
65254: PPUSH
65255: LD_VAR 0 2
65259: PUSH
65260: LD_VAR 0 9
65264: ARRAY
65265: PUSH
65266: LD_INT 2
65268: ARRAY
65269: PPUSH
65270: CALL_OW 297
65274: PUSH
65275: LD_INT 6
65277: GREATER
65278: IFFALSE 65321
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
65280: LD_VAR 0 4
65284: PPUSH
65285: LD_VAR 0 2
65289: PUSH
65290: LD_VAR 0 9
65294: ARRAY
65295: PUSH
65296: LD_INT 1
65298: ARRAY
65299: PPUSH
65300: LD_VAR 0 2
65304: PUSH
65305: LD_VAR 0 9
65309: ARRAY
65310: PUSH
65311: LD_INT 2
65313: ARRAY
65314: PPUSH
65315: CALL_OW 114
65319: GO 65335
// SetTag ( i , tag ) ;
65321: LD_VAR 0 4
65325: PPUSH
65326: LD_VAR 0 9
65330: PPUSH
65331: CALL_OW 109
// end else
65335: GO 65367
// if enemy then
65337: LD_VAR 0 5
65341: IFFALSE 65367
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
65343: LD_VAR 0 4
65347: PPUSH
65348: LD_VAR 0 5
65352: PPUSH
65353: LD_VAR 0 4
65357: PPUSH
65358: CALL_OW 74
65362: PPUSH
65363: CALL_OW 115
// end ;
65367: GO 65044
65369: POP
65370: POP
// end ;
65371: LD_VAR 0 3
65375: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
65376: LD_INT 0
65378: PPUSH
65379: PPUSH
65380: PPUSH
// if not unit or IsInUnit ( unit ) then
65381: LD_VAR 0 1
65385: NOT
65386: PUSH
65387: LD_VAR 0 1
65391: PPUSH
65392: CALL_OW 310
65396: OR
65397: IFFALSE 65401
// exit ;
65399: GO 65492
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
65401: LD_ADDR_VAR 0 4
65405: PUSH
65406: LD_VAR 0 1
65410: PPUSH
65411: CALL_OW 250
65415: PPUSH
65416: LD_VAR 0 2
65420: PPUSH
65421: LD_INT 1
65423: PPUSH
65424: CALL_OW 272
65428: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
65429: LD_ADDR_VAR 0 5
65433: PUSH
65434: LD_VAR 0 1
65438: PPUSH
65439: CALL_OW 251
65443: PPUSH
65444: LD_VAR 0 2
65448: PPUSH
65449: LD_INT 1
65451: PPUSH
65452: CALL_OW 273
65456: ST_TO_ADDR
// if ValidHex ( x , y ) then
65457: LD_VAR 0 4
65461: PPUSH
65462: LD_VAR 0 5
65466: PPUSH
65467: CALL_OW 488
65471: IFFALSE 65492
// ComTurnXY ( unit , x , y ) ;
65473: LD_VAR 0 1
65477: PPUSH
65478: LD_VAR 0 4
65482: PPUSH
65483: LD_VAR 0 5
65487: PPUSH
65488: CALL_OW 118
// end ;
65492: LD_VAR 0 3
65496: RET
// export function SeeUnits ( side , units ) ; var i ; begin
65497: LD_INT 0
65499: PPUSH
65500: PPUSH
// result := false ;
65501: LD_ADDR_VAR 0 3
65505: PUSH
65506: LD_INT 0
65508: ST_TO_ADDR
// if not units then
65509: LD_VAR 0 2
65513: NOT
65514: IFFALSE 65518
// exit ;
65516: GO 65563
// for i in units do
65518: LD_ADDR_VAR 0 4
65522: PUSH
65523: LD_VAR 0 2
65527: PUSH
65528: FOR_IN
65529: IFFALSE 65561
// if See ( side , i ) then
65531: LD_VAR 0 1
65535: PPUSH
65536: LD_VAR 0 4
65540: PPUSH
65541: CALL_OW 292
65545: IFFALSE 65559
// begin result := true ;
65547: LD_ADDR_VAR 0 3
65551: PUSH
65552: LD_INT 1
65554: ST_TO_ADDR
// exit ;
65555: POP
65556: POP
65557: GO 65563
// end ;
65559: GO 65528
65561: POP
65562: POP
// end ;
65563: LD_VAR 0 3
65567: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
65568: LD_INT 0
65570: PPUSH
65571: PPUSH
65572: PPUSH
65573: PPUSH
// if not unit or not points then
65574: LD_VAR 0 1
65578: NOT
65579: PUSH
65580: LD_VAR 0 2
65584: NOT
65585: OR
65586: IFFALSE 65590
// exit ;
65588: GO 65680
// dist := 99999 ;
65590: LD_ADDR_VAR 0 5
65594: PUSH
65595: LD_INT 99999
65597: ST_TO_ADDR
// for i in points do
65598: LD_ADDR_VAR 0 4
65602: PUSH
65603: LD_VAR 0 2
65607: PUSH
65608: FOR_IN
65609: IFFALSE 65678
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
65611: LD_ADDR_VAR 0 6
65615: PUSH
65616: LD_VAR 0 1
65620: PPUSH
65621: LD_VAR 0 4
65625: PUSH
65626: LD_INT 1
65628: ARRAY
65629: PPUSH
65630: LD_VAR 0 4
65634: PUSH
65635: LD_INT 2
65637: ARRAY
65638: PPUSH
65639: CALL_OW 297
65643: ST_TO_ADDR
// if tmpDist < dist then
65644: LD_VAR 0 6
65648: PUSH
65649: LD_VAR 0 5
65653: LESS
65654: IFFALSE 65676
// begin result := i ;
65656: LD_ADDR_VAR 0 3
65660: PUSH
65661: LD_VAR 0 4
65665: ST_TO_ADDR
// dist := tmpDist ;
65666: LD_ADDR_VAR 0 5
65670: PUSH
65671: LD_VAR 0 6
65675: ST_TO_ADDR
// end ; end ;
65676: GO 65608
65678: POP
65679: POP
// end ; end_of_file
65680: LD_VAR 0 3
65684: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
65685: LD_VAR 0 1
65689: PUSH
65690: LD_INT 200
65692: DOUBLE
65693: GREATEREQUAL
65694: IFFALSE 65702
65696: LD_INT 299
65698: DOUBLE
65699: LESSEQUAL
65700: IFTRUE 65704
65702: GO 65736
65704: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
65705: LD_VAR 0 1
65709: PPUSH
65710: LD_VAR 0 2
65714: PPUSH
65715: LD_VAR 0 3
65719: PPUSH
65720: LD_VAR 0 4
65724: PPUSH
65725: LD_VAR 0 5
65729: PPUSH
65730: CALL 21164 0 5
65734: GO 65813
65736: LD_INT 300
65738: DOUBLE
65739: GREATEREQUAL
65740: IFFALSE 65748
65742: LD_INT 399
65744: DOUBLE
65745: LESSEQUAL
65746: IFTRUE 65750
65748: GO 65812
65750: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
65751: LD_VAR 0 1
65755: PPUSH
65756: LD_VAR 0 2
65760: PPUSH
65761: LD_VAR 0 3
65765: PPUSH
65766: LD_VAR 0 4
65770: PPUSH
65771: LD_VAR 0 5
65775: PPUSH
65776: LD_VAR 0 6
65780: PPUSH
65781: LD_VAR 0 7
65785: PPUSH
65786: LD_VAR 0 8
65790: PPUSH
65791: LD_VAR 0 9
65795: PPUSH
65796: LD_VAR 0 10
65800: PPUSH
65801: LD_VAR 0 11
65805: PPUSH
65806: CALL 18806 0 11
65810: GO 65813
65812: POP
// end ;
65813: PPOPN 11
65815: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
65816: LD_VAR 0 1
65820: PPUSH
65821: LD_VAR 0 2
65825: PPUSH
65826: LD_VAR 0 3
65830: PPUSH
65831: LD_VAR 0 4
65835: PPUSH
65836: LD_VAR 0 5
65840: PPUSH
65841: CALL 20900 0 5
// end ; end_of_file
65845: PPOPN 5
65847: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
65848: LD_VAR 0 1
65852: PPUSH
65853: LD_VAR 0 2
65857: PPUSH
65858: LD_VAR 0 3
65862: PPUSH
65863: LD_VAR 0 4
65867: PPUSH
65868: LD_VAR 0 5
65872: PPUSH
65873: LD_VAR 0 6
65877: PPUSH
65878: CALL 6499 0 6
// end ;
65882: PPOPN 6
65884: END
