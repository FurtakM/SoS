// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 32 0 0
// InitAmerican ;
  15: CALL 915 0 0
// InitRussian ;
  19: CALL 1154 0 0
// DebugMode ;
  23: CALL 152 0 0
// Action ;
  27: CALL 2645 0 0
// end ;
  31: END
// export debug ; export mission_prefix ; export active_russian_dialog , bobby_in_squad , powell_contact , macmilan_use_radio , cyrus_in_squad , active_road_patrol , macmilan_in_trap , meta_action , end_mission , bobby_saved , cyrus_saved , send_troops_to_forest ; function Init ; begin
  32: LD_INT 0
  34: PPUSH
// mission_prefix := 01_ ;
  35: LD_ADDR_EXP 2
  39: PUSH
  40: LD_STRING 01_
  42: ST_TO_ADDR
// debug := 0 ;
  43: LD_ADDR_EXP 1
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// active_russian_dialog := false ;
  51: LD_ADDR_EXP 3
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// bobby_in_squad := false ;
  59: LD_ADDR_EXP 4
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// cyrus_in_squad := false ;
  67: LD_ADDR_EXP 7
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// powell_contact := false ;
  75: LD_ADDR_EXP 5
  79: PUSH
  80: LD_INT 0
  82: ST_TO_ADDR
// macmilan_use_radio := false ;
  83: LD_ADDR_EXP 6
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// active_road_patrol := false ;
  91: LD_ADDR_EXP 8
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// macmilan_in_trap := false ;
  99: LD_ADDR_EXP 9
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// meta_action := false ;
 107: LD_ADDR_EXP 10
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// end_mission := false ;
 115: LD_ADDR_EXP 11
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// bobby_saved := false ;
 123: LD_ADDR_EXP 12
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// cyrus_saved := false ;
 131: LD_ADDR_EXP 13
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// send_troops_to_forest := false ;
 139: LD_ADDR_EXP 14
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// end ;
 147: LD_VAR 0 1
 151: RET
// function DebugMode ; var i ; begin
 152: LD_INT 0
 154: PPUSH
 155: PPUSH
// if not debug then
 156: LD_EXP 1
 160: NOT
 161: IFFALSE 165
// exit ;
 163: GO 184
// Difficulty := 3 ;
 165: LD_ADDR_OWVAR 67
 169: PUSH
 170: LD_INT 3
 172: ST_TO_ADDR
// TurnFogOff ( ) ;
 173: CALL_OW 537
// FogOff ( 1 ) ;
 177: LD_INT 1
 179: PPUSH
 180: CALL_OW 344
// end ; end_of_file
 184: LD_VAR 0 1
 188: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
 189: LD_INT 0
 191: PPUSH
 192: PPUSH
// if exist_mode then
 193: LD_VAR 0 2
 197: IFFALSE 216
// unit := CreateCharacter ( ident ) else
 199: LD_ADDR_VAR 0 4
 203: PUSH
 204: LD_VAR 0 1
 208: PPUSH
 209: CALL_OW 34
 213: ST_TO_ADDR
 214: GO 231
// unit := NewCharacter ( ident ) ;
 216: LD_ADDR_VAR 0 4
 220: PUSH
 221: LD_VAR 0 1
 225: PPUSH
 226: CALL_OW 25
 230: ST_TO_ADDR
// result := unit ;
 231: LD_ADDR_VAR 0 3
 235: PUSH
 236: LD_VAR 0 4
 240: ST_TO_ADDR
// end ;
 241: LD_VAR 0 3
 245: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 246: LD_INT 0
 248: PPUSH
 249: PPUSH
 250: PPUSH
// uc_side := GetSide ( b ) ;
 251: LD_ADDR_OWVAR 20
 255: PUSH
 256: LD_VAR 0 2
 260: PPUSH
 261: CALL_OW 255
 265: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 266: LD_ADDR_OWVAR 21
 270: PUSH
 271: LD_VAR 0 2
 275: PPUSH
 276: CALL_OW 248
 280: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 281: LD_INT 0
 283: PPUSH
 284: LD_INT 1
 286: PPUSH
 287: LD_VAR 0 1
 291: PPUSH
 292: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
 296: LD_ADDR_VAR 0 5
 300: PUSH
 301: LD_VAR 0 2
 305: PPUSH
 306: CALL_OW 254
 310: PUSH
 311: LD_INT 3
 313: MINUS
 314: ST_TO_ADDR
// if dir < 0 then
 315: LD_VAR 0 5
 319: PUSH
 320: LD_INT 0
 322: LESS
 323: IFFALSE 339
// dir := 6 + dir ;
 325: LD_ADDR_VAR 0 5
 329: PUSH
 330: LD_INT 6
 332: PUSH
 333: LD_VAR 0 5
 337: PLUS
 338: ST_TO_ADDR
// un := CreateHuman ;
 339: LD_ADDR_VAR 0 4
 343: PUSH
 344: CALL_OW 44
 348: ST_TO_ADDR
// SetDir ( un , dir ) ;
 349: LD_VAR 0 4
 353: PPUSH
 354: LD_VAR 0 5
 358: PPUSH
 359: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 363: LD_VAR 0 4
 367: PPUSH
 368: LD_VAR 0 2
 372: PPUSH
 373: CALL_OW 52
// end ;
 377: LD_VAR 0 3
 381: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 382: LD_INT 0
 384: PPUSH
// uc_side := side ;
 385: LD_ADDR_OWVAR 20
 389: PUSH
 390: LD_VAR 0 1
 394: ST_TO_ADDR
// uc_nation := nation ;
 395: LD_ADDR_OWVAR 21
 399: PUSH
 400: LD_VAR 0 2
 404: ST_TO_ADDR
// vc_chassis := chassis ;
 405: LD_ADDR_OWVAR 37
 409: PUSH
 410: LD_VAR 0 3
 414: ST_TO_ADDR
// vc_engine := engine ;
 415: LD_ADDR_OWVAR 39
 419: PUSH
 420: LD_VAR 0 4
 424: ST_TO_ADDR
// vc_control := control ;
 425: LD_ADDR_OWVAR 38
 429: PUSH
 430: LD_VAR 0 5
 434: ST_TO_ADDR
// vc_weapon := weapon ;
 435: LD_ADDR_OWVAR 40
 439: PUSH
 440: LD_VAR 0 6
 444: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 445: LD_ADDR_OWVAR 41
 449: PUSH
 450: LD_VAR 0 7
 454: ST_TO_ADDR
// result := CreateVehicle ;
 455: LD_ADDR_VAR 0 8
 459: PUSH
 460: CALL_OW 45
 464: ST_TO_ADDR
// end ;
 465: LD_VAR 0 8
 469: RET
// export function ComPatrol ( unit , mode , pause , coords ) ; var i ; begin
 470: LD_INT 0
 472: PPUSH
 473: PPUSH
// while ( active_road_patrol ) do
 474: LD_EXP 8
 478: IFFALSE 832
// begin Wait ( 0 0$01 ) ;
 480: LD_INT 35
 482: PPUSH
 483: CALL_OW 67
// if not unit then
 487: LD_VAR 0 1
 491: NOT
 492: IFFALSE 496
// exit ;
 494: GO 832
// if mode = road then
 496: LD_VAR 0 2
 500: PUSH
 501: LD_STRING road
 503: EQUAL
 504: IFFALSE 560
// if GetFuel ( unit ) < 50 and not See ( 1 , unit ) and not HasTask ( unit ) then
 506: LD_VAR 0 1
 510: PPUSH
 511: CALL_OW 261
 515: PUSH
 516: LD_INT 50
 518: LESS
 519: PUSH
 520: LD_INT 1
 522: PPUSH
 523: LD_VAR 0 1
 527: PPUSH
 528: CALL_OW 292
 532: NOT
 533: AND
 534: PUSH
 535: LD_VAR 0 1
 539: PPUSH
 540: CALL_OW 314
 544: NOT
 545: AND
 546: IFFALSE 560
// SetFuel ( unit , 100 ) ;
 548: LD_VAR 0 1
 552: PPUSH
 553: LD_INT 100
 555: PPUSH
 556: CALL_OW 240
// if mode = forest then
 560: LD_VAR 0 2
 564: PUSH
 565: LD_STRING forest
 567: EQUAL
 568: IFFALSE 648
// if GetLives ( unit ) < 600 then
 570: LD_VAR 0 1
 574: PPUSH
 575: CALL_OW 256
 579: PUSH
 580: LD_INT 600
 582: LESS
 583: IFFALSE 648
// begin ComMoveXY ( unit , 42 , 3 ) ;
 585: LD_VAR 0 1
 589: PPUSH
 590: LD_INT 42
 592: PPUSH
 593: LD_INT 3
 595: PPUSH
 596: CALL_OW 111
// SetRememberedX ( unit , GetX ( unit ) ) ;
 600: LD_VAR 0 1
 604: PPUSH
 605: LD_VAR 0 1
 609: PPUSH
 610: CALL_OW 250
 614: PPUSH
 615: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
 619: LD_VAR 0 1
 623: PPUSH
 624: LD_VAR 0 1
 628: PPUSH
 629: CALL_OW 251
 633: PPUSH
 634: CALL_OW 232
// send_troops_to_forest := true ;
 638: LD_ADDR_EXP 14
 642: PUSH
 643: LD_INT 1
 645: ST_TO_ADDR
// break ;
 646: GO 832
// end ; if not HasTask ( unit ) then
 648: LD_VAR 0 1
 652: PPUSH
 653: CALL_OW 314
 657: NOT
 658: IFFALSE 830
// begin for i = 1 to coords do
 660: LD_ADDR_VAR 0 6
 664: PUSH
 665: DOUBLE
 666: LD_INT 1
 668: DEC
 669: ST_TO_ADDR
 670: LD_VAR 0 4
 674: PUSH
 675: FOR_TO
 676: IFFALSE 743
// begin AddComAgressiveMove ( unit , coords [ i ] , coords [ i + 1 ] ) ;
 678: LD_VAR 0 1
 682: PPUSH
 683: LD_VAR 0 4
 687: PUSH
 688: LD_VAR 0 6
 692: ARRAY
 693: PPUSH
 694: LD_VAR 0 4
 698: PUSH
 699: LD_VAR 0 6
 703: PUSH
 704: LD_INT 1
 706: PLUS
 707: ARRAY
 708: PPUSH
 709: CALL_OW 174
// AddComWait ( unit , pause ) ;
 713: LD_VAR 0 1
 717: PPUSH
 718: LD_VAR 0 3
 722: PPUSH
 723: CALL_OW 202
// i := i + 1 ;
 727: LD_ADDR_VAR 0 6
 731: PUSH
 732: LD_VAR 0 6
 736: PUSH
 737: LD_INT 1
 739: PLUS
 740: ST_TO_ADDR
// end ;
 741: GO 675
 743: POP
 744: POP
// for i = coords downto 1 do
 745: LD_ADDR_VAR 0 6
 749: PUSH
 750: DOUBLE
 751: LD_VAR 0 4
 755: INC
 756: ST_TO_ADDR
 757: LD_INT 1
 759: PUSH
 760: FOR_DOWNTO
 761: IFFALSE 828
// begin AddComAgressiveMove ( unit , coords [ i - 1 ] , coords [ i ] ) ;
 763: LD_VAR 0 1
 767: PPUSH
 768: LD_VAR 0 4
 772: PUSH
 773: LD_VAR 0 6
 777: PUSH
 778: LD_INT 1
 780: MINUS
 781: ARRAY
 782: PPUSH
 783: LD_VAR 0 4
 787: PUSH
 788: LD_VAR 0 6
 792: ARRAY
 793: PPUSH
 794: CALL_OW 174
// AddComWait ( unit , pause ) ;
 798: LD_VAR 0 1
 802: PPUSH
 803: LD_VAR 0 3
 807: PPUSH
 808: CALL_OW 202
// i := i - 1 ;
 812: LD_ADDR_VAR 0 6
 816: PUSH
 817: LD_VAR 0 6
 821: PUSH
 822: LD_INT 1
 824: MINUS
 825: ST_TO_ADDR
// end ;
 826: GO 760
 828: POP
 829: POP
// end ; end ;
 830: GO 474
// end ;
 832: LD_VAR 0 5
 836: RET
// export function DebugSay ( dialog ) ; var speaker ; begin
 837: LD_INT 0
 839: PPUSH
 840: PPUSH
// uc_nation := 1 ;
 841: LD_ADDR_OWVAR 21
 845: PUSH
 846: LD_INT 1
 848: ST_TO_ADDR
// uc_side := 0 ;
 849: LD_ADDR_OWVAR 20
 853: PUSH
 854: LD_INT 0
 856: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
 857: LD_INT 0
 859: PPUSH
 860: LD_INT 1
 862: PPUSH
 863: LD_INT 0
 865: PPUSH
 866: CALL_OW 380
// hc_name := speaker ;
 870: LD_ADDR_OWVAR 26
 874: PUSH
 875: LD_STRING speaker
 877: ST_TO_ADDR
// hc_gallery :=  ;
 878: LD_ADDR_OWVAR 33
 882: PUSH
 883: LD_STRING 
 885: ST_TO_ADDR
// speaker := CreateHuman ;
 886: LD_ADDR_VAR 0 3
 890: PUSH
 891: CALL_OW 44
 895: ST_TO_ADDR
// Say ( speaker , dialog ) ;
 896: LD_VAR 0 3
 900: PPUSH
 901: LD_VAR 0 1
 905: PPUSH
 906: CALL_OW 88
// end ; end_of_file
 910: LD_VAR 0 2
 914: RET
// export JMM , Bobby , Cyrus , Powell , fakePokryshkin ; export function InitAmerican ; begin
 915: LD_INT 0
 917: PPUSH
// uc_nation := 1 ;
 918: LD_ADDR_OWVAR 21
 922: PUSH
 923: LD_INT 1
 925: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , false ) ;
 926: LD_ADDR_EXP 15
 930: PUSH
 931: LD_STRING JMM
 933: PPUSH
 934: LD_INT 0
 936: PPUSH
 937: CALL 189 0 2
 941: ST_TO_ADDR
// uc_side := 4 ;
 942: LD_ADDR_OWVAR 20
 946: PUSH
 947: LD_INT 4
 949: ST_TO_ADDR
// hc_gallery := us ;
 950: LD_ADDR_OWVAR 33
 954: PUSH
 955: LD_STRING us
 957: ST_TO_ADDR
// hc_face_number := 7 ;
 958: LD_ADDR_OWVAR 34
 962: PUSH
 963: LD_INT 7
 965: ST_TO_ADDR
// hc_sex := sex_male ;
 966: LD_ADDR_OWVAR 27
 970: PUSH
 971: LD_INT 1
 973: ST_TO_ADDR
// hc_name := . ;
 974: LD_ADDR_OWVAR 26
 978: PUSH
 979: LD_STRING .
 981: ST_TO_ADDR
// hc_class := 1 ;
 982: LD_ADDR_OWVAR 28
 986: PUSH
 987: LD_INT 1
 989: ST_TO_ADDR
// Powell := CreateHuman ;
 990: LD_ADDR_EXP 18
 994: PUSH
 995: CALL_OW 44
 999: ST_TO_ADDR
// hc_name := . ;
1000: LD_ADDR_OWVAR 26
1004: PUSH
1005: LD_STRING .
1007: ST_TO_ADDR
// hc_gallery := ru ;
1008: LD_ADDR_OWVAR 33
1012: PUSH
1013: LD_STRING ru
1015: ST_TO_ADDR
// hc_face_number := 4 ;
1016: LD_ADDR_OWVAR 34
1020: PUSH
1021: LD_INT 4
1023: ST_TO_ADDR
// hc_sex := sex_male ;
1024: LD_ADDR_OWVAR 27
1028: PUSH
1029: LD_INT 1
1031: ST_TO_ADDR
// fakePokryshkin := CreateHuman ;
1032: LD_ADDR_EXP 19
1036: PUSH
1037: CALL_OW 44
1041: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , false ) ;
1042: LD_ADDR_EXP 16
1046: PUSH
1047: LD_STRING Bobby
1049: PPUSH
1050: LD_INT 0
1052: PPUSH
1053: CALL 189 0 2
1057: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , false ) ;
1058: LD_ADDR_EXP 17
1062: PUSH
1063: LD_STRING Cyrus
1065: PPUSH
1066: LD_INT 0
1068: PPUSH
1069: CALL 189 0 2
1073: ST_TO_ADDR
// case Difficulty of 1 :
1074: LD_OWVAR 67
1078: PUSH
1079: LD_INT 1
1081: DOUBLE
1082: EQUAL
1083: IFTRUE 1087
1085: GO 1102
1087: POP
// SetLives ( Bobby , 500 ) ; 2 :
1088: LD_EXP 16
1092: PPUSH
1093: LD_INT 500
1095: PPUSH
1096: CALL_OW 234
1100: GO 1149
1102: LD_INT 2
1104: DOUBLE
1105: EQUAL
1106: IFTRUE 1110
1108: GO 1125
1110: POP
// SetLives ( Bobby , 460 ) ; 3 :
1111: LD_EXP 16
1115: PPUSH
1116: LD_INT 460
1118: PPUSH
1119: CALL_OW 234
1123: GO 1149
1125: LD_INT 3
1127: DOUBLE
1128: EQUAL
1129: IFTRUE 1133
1131: GO 1148
1133: POP
// SetLives ( Bobby , 420 ) ; end ;
1134: LD_EXP 16
1138: PPUSH
1139: LD_INT 420
1141: PPUSH
1142: CALL_OW 234
1146: GO 1149
1148: POP
// end ; end_of_file
1149: LD_VAR 0 1
1153: RET
// export russian_troops_1 , russian_troops_2 , russian_patrol_tanks , russian_meta_guards , russian_patrol_forest ; export Pokryshkin ; export function InitRussian ; var skill , i , un ; begin
1154: LD_INT 0
1156: PPUSH
1157: PPUSH
1158: PPUSH
1159: PPUSH
// skill := [ 1 , 2 , 3 ] [ Difficulty ] ;
1160: LD_ADDR_VAR 0 2
1164: PUSH
1165: LD_INT 1
1167: PUSH
1168: LD_INT 2
1170: PUSH
1171: LD_INT 3
1173: PUSH
1174: EMPTY
1175: LIST
1176: LIST
1177: LIST
1178: PUSH
1179: LD_OWVAR 67
1183: ARRAY
1184: ST_TO_ADDR
// uc_side := 3 ;
1185: LD_ADDR_OWVAR 20
1189: PUSH
1190: LD_INT 3
1192: ST_TO_ADDR
// uc_nation := 3 ;
1193: LD_ADDR_OWVAR 21
1197: PUSH
1198: LD_INT 3
1200: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ) ;
1201: LD_ADDR_EXP 25
1205: PUSH
1206: LD_STRING Pokryshkin
1208: PPUSH
1209: LD_INT 0
1211: PPUSH
1212: CALL 189 0 2
1216: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 44 , 5 , false ) ;
1217: LD_EXP 25
1221: PPUSH
1222: LD_INT 44
1224: PPUSH
1225: LD_INT 5
1227: PPUSH
1228: LD_INT 0
1230: PPUSH
1231: CALL_OW 48
// hc_importance := 0 ;
1235: LD_ADDR_OWVAR 32
1239: PUSH
1240: LD_INT 0
1242: ST_TO_ADDR
// hc_gallery :=  ;
1243: LD_ADDR_OWVAR 33
1247: PUSH
1248: LD_STRING 
1250: ST_TO_ADDR
// hc_name :=  ;
1251: LD_ADDR_OWVAR 26
1255: PUSH
1256: LD_STRING 
1258: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1259: LD_INT 1
1261: PPUSH
1262: LD_INT 1
1264: PPUSH
1265: LD_VAR 0 2
1269: PPUSH
1270: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1274: LD_ADDR_OWVAR 33
1278: PUSH
1279: LD_STRING SecondCharsGal
1281: ST_TO_ADDR
// hc_face_number := 69 ;
1282: LD_ADDR_OWVAR 34
1286: PUSH
1287: LD_INT 69
1289: ST_TO_ADDR
// hc_sex := sex_male ;
1290: LD_ADDR_OWVAR 27
1294: PUSH
1295: LD_INT 1
1297: ST_TO_ADDR
// hc_name := Ilja Ivanov ;
1298: LD_ADDR_OWVAR 26
1302: PUSH
1303: LD_STRING Ilja Ivanov
1305: ST_TO_ADDR
// un := CreateHuman ;
1306: LD_ADDR_VAR 0 4
1310: PUSH
1311: CALL_OW 44
1315: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 1 , un ) ;
1316: LD_ADDR_EXP 20
1320: PUSH
1321: LD_EXP 20
1325: PPUSH
1326: LD_INT 1
1328: PPUSH
1329: LD_VAR 0 4
1333: PPUSH
1334: CALL_OW 2
1338: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1339: LD_VAR 0 4
1343: PPUSH
1344: LD_INT 3
1346: PPUSH
1347: LD_INT 0
1349: PPUSH
1350: CALL_OW 49
// PrepareHuman ( sex_male , 1 , skill ) ;
1354: LD_INT 1
1356: PPUSH
1357: LD_INT 1
1359: PPUSH
1360: LD_VAR 0 2
1364: PPUSH
1365: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1369: LD_ADDR_OWVAR 33
1373: PUSH
1374: LD_STRING SecondCharsGal
1376: ST_TO_ADDR
// hc_face_number := 70 ;
1377: LD_ADDR_OWVAR 34
1381: PUSH
1382: LD_INT 70
1384: ST_TO_ADDR
// hc_name := Pavel Starczy ;
1385: LD_ADDR_OWVAR 26
1389: PUSH
1390: LD_STRING Pavel Starczy
1392: ST_TO_ADDR
// un := CreateHuman ;
1393: LD_ADDR_VAR 0 4
1397: PUSH
1398: CALL_OW 44
1402: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 2 , un ) ;
1403: LD_ADDR_EXP 20
1407: PUSH
1408: LD_EXP 20
1412: PPUSH
1413: LD_INT 2
1415: PPUSH
1416: LD_VAR 0 4
1420: PPUSH
1421: CALL_OW 2
1425: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1426: LD_VAR 0 4
1430: PPUSH
1431: LD_INT 3
1433: PPUSH
1434: LD_INT 0
1436: PPUSH
1437: CALL_OW 49
// InitHc ;
1441: CALL_OW 19
// for i = 1 to 7 do
1445: LD_ADDR_VAR 0 3
1449: PUSH
1450: DOUBLE
1451: LD_INT 1
1453: DEC
1454: ST_TO_ADDR
1455: LD_INT 7
1457: PUSH
1458: FOR_TO
1459: IFFALSE 1610
// begin PrepareHuman ( false , 1 , skill ) ;
1461: LD_INT 0
1463: PPUSH
1464: LD_INT 1
1466: PPUSH
1467: LD_VAR 0 2
1471: PPUSH
1472: CALL_OW 380
// un := CreateHuman ;
1476: LD_ADDR_VAR 0 4
1480: PUSH
1481: CALL_OW 44
1485: ST_TO_ADDR
// if i mod 2 = 0 then
1486: LD_VAR 0 3
1490: PUSH
1491: LD_INT 2
1493: MOD
1494: PUSH
1495: LD_INT 0
1497: EQUAL
1498: IFFALSE 1555
// begin russian_troops_1 := Insert ( russian_troops_1 , russian_troops_1 + 1 , un ) ;
1500: LD_ADDR_EXP 20
1504: PUSH
1505: LD_EXP 20
1509: PPUSH
1510: LD_EXP 20
1514: PUSH
1515: LD_INT 1
1517: PLUS
1518: PPUSH
1519: LD_VAR 0 4
1523: PPUSH
1524: CALL_OW 2
1528: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1529: LD_VAR 0 4
1533: PPUSH
1534: LD_INT 3
1536: PPUSH
1537: LD_INT 0
1539: PPUSH
1540: CALL_OW 49
// ComHold ( un ) ;
1544: LD_VAR 0 4
1548: PPUSH
1549: CALL_OW 140
// end else
1553: GO 1608
// begin russian_troops_2 := Insert ( russian_troops_2 , russian_troops_2 + 1 , un ) ;
1555: LD_ADDR_EXP 21
1559: PUSH
1560: LD_EXP 21
1564: PPUSH
1565: LD_EXP 21
1569: PUSH
1570: LD_INT 1
1572: PLUS
1573: PPUSH
1574: LD_VAR 0 4
1578: PPUSH
1579: CALL_OW 2
1583: ST_TO_ADDR
// PlaceUnitArea ( un , guard_south , false ) ;
1584: LD_VAR 0 4
1588: PPUSH
1589: LD_INT 4
1591: PPUSH
1592: LD_INT 0
1594: PPUSH
1595: CALL_OW 49
// ComHold ( un ) ;
1599: LD_VAR 0 4
1603: PPUSH
1604: CALL_OW 140
// end ; end ;
1608: GO 1458
1610: POP
1611: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) do
1612: LD_ADDR_VAR 0 3
1616: PUSH
1617: LD_INT 22
1619: PUSH
1620: LD_INT 3
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: PUSH
1627: LD_INT 30
1629: PUSH
1630: LD_INT 31
1632: PUSH
1633: EMPTY
1634: LIST
1635: LIST
1636: PUSH
1637: EMPTY
1638: LIST
1639: LIST
1640: PPUSH
1641: CALL_OW 69
1645: PUSH
1646: FOR_IN
1647: IFFALSE 1665
// PrepareSolBun ( skill , i ) ;
1649: LD_VAR 0 2
1653: PPUSH
1654: LD_VAR 0 3
1658: PPUSH
1659: CALL 246 0 2
1663: GO 1646
1665: POP
1666: POP
// for i = 1 to 2 do
1667: LD_ADDR_VAR 0 3
1671: PUSH
1672: DOUBLE
1673: LD_INT 1
1675: DEC
1676: ST_TO_ADDR
1677: LD_INT 2
1679: PUSH
1680: FOR_TO
1681: IFFALSE 1812
// begin un := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1683: LD_ADDR_VAR 0 4
1687: PUSH
1688: LD_INT 3
1690: PPUSH
1691: LD_INT 3
1693: PPUSH
1694: LD_INT 22
1696: PPUSH
1697: LD_INT 1
1699: PPUSH
1700: LD_INT 1
1702: PPUSH
1703: LD_INT 42
1705: PPUSH
1706: LD_INT 100
1708: PPUSH
1709: CALL 382 0 7
1713: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
1714: LD_INT 0
1716: PPUSH
1717: LD_INT 3
1719: PPUSH
1720: LD_VAR 0 2
1724: PPUSH
1725: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1729: CALL_OW 44
1733: PPUSH
1734: LD_VAR 0 4
1738: PPUSH
1739: CALL_OW 52
// PlaceUnitXY ( un , [ 23 , 131 ] [ i ] , [ 14 , 87 ] [ i ] , false ) ;
1743: LD_VAR 0 4
1747: PPUSH
1748: LD_INT 23
1750: PUSH
1751: LD_INT 131
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PUSH
1758: LD_VAR 0 3
1762: ARRAY
1763: PPUSH
1764: LD_INT 14
1766: PUSH
1767: LD_INT 87
1769: PUSH
1770: EMPTY
1771: LIST
1772: LIST
1773: PUSH
1774: LD_VAR 0 3
1778: ARRAY
1779: PPUSH
1780: LD_INT 0
1782: PPUSH
1783: CALL_OW 48
// russian_patrol_tanks := Insert ( russian_patrol_tanks , 1 , un ) ;
1787: LD_ADDR_EXP 22
1791: PUSH
1792: LD_EXP 22
1796: PPUSH
1797: LD_INT 1
1799: PPUSH
1800: LD_VAR 0 4
1804: PPUSH
1805: CALL_OW 2
1809: ST_TO_ADDR
// end ;
1810: GO 1680
1812: POP
1813: POP
// for i = 1 to 2 do
1814: LD_ADDR_VAR 0 3
1818: PUSH
1819: DOUBLE
1820: LD_INT 1
1822: DEC
1823: ST_TO_ADDR
1824: LD_INT 2
1826: PUSH
1827: FOR_TO
1828: IFFALSE 1919
// begin PrepareHuman ( [ sex_female , sex_male , sex_male ] [ i ] , 1 , 1 ) ;
1830: LD_INT 2
1832: PUSH
1833: LD_INT 1
1835: PUSH
1836: LD_INT 1
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: LIST
1843: PUSH
1844: LD_VAR 0 3
1848: ARRAY
1849: PPUSH
1850: LD_INT 1
1852: PPUSH
1853: LD_INT 1
1855: PPUSH
1856: CALL_OW 380
// un := CreateHuman ;
1860: LD_ADDR_VAR 0 4
1864: PUSH
1865: CALL_OW 44
1869: ST_TO_ADDR
// russian_meta_guards := Insert ( russian_meta_guards , 1 , un ) ;
1870: LD_ADDR_EXP 23
1874: PUSH
1875: LD_EXP 23
1879: PPUSH
1880: LD_INT 1
1882: PPUSH
1883: LD_VAR 0 4
1887: PPUSH
1888: CALL_OW 2
1892: ST_TO_ADDR
// PlaceUnitArea ( un , exitArea , false ) ;
1893: LD_VAR 0 4
1897: PPUSH
1898: LD_INT 10
1900: PPUSH
1901: LD_INT 0
1903: PPUSH
1904: CALL_OW 49
// ComHold ( un ) ;
1908: LD_VAR 0 4
1912: PPUSH
1913: CALL_OW 140
// end ;
1917: GO 1827
1919: POP
1920: POP
// if Difficulty < 3 then
1921: LD_OWVAR 67
1925: PUSH
1926: LD_INT 3
1928: LESS
1929: IFFALSE 1933
// exit ;
1931: GO 1976
// PrepareHuman ( false , 1 , skill ) ;
1933: LD_INT 0
1935: PPUSH
1936: LD_INT 1
1938: PPUSH
1939: LD_VAR 0 2
1943: PPUSH
1944: CALL_OW 380
// russian_patrol_forest := CreateHuman ;
1948: LD_ADDR_EXP 24
1952: PUSH
1953: CALL_OW 44
1957: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_forest , 82 , 2 , false ) ;
1958: LD_EXP 24
1962: PPUSH
1963: LD_INT 82
1965: PPUSH
1966: LD_INT 2
1968: PPUSH
1969: LD_INT 0
1971: PPUSH
1972: CALL_OW 48
// end ;
1976: LD_VAR 0 1
1980: RET
// every 0 0$01 trigger active_road_patrol do
1981: LD_EXP 8
1985: IFFALSE 2051
1987: GO 1989
1989: DISABLE
// ComPatrol ( russian_patrol_tanks [ 1 ] , road , 0 0$02 , [ 131 , 87 , 107 , 75 , 107 , 66 , 114 , 61 , 107 , 34 ] ) ;
1990: LD_EXP 22
1994: PUSH
1995: LD_INT 1
1997: ARRAY
1998: PPUSH
1999: LD_STRING road
2001: PPUSH
2002: LD_INT 70
2004: PPUSH
2005: LD_INT 131
2007: PUSH
2008: LD_INT 87
2010: PUSH
2011: LD_INT 107
2013: PUSH
2014: LD_INT 75
2016: PUSH
2017: LD_INT 107
2019: PUSH
2020: LD_INT 66
2022: PUSH
2023: LD_INT 114
2025: PUSH
2026: LD_INT 61
2028: PUSH
2029: LD_INT 107
2031: PUSH
2032: LD_INT 34
2034: PUSH
2035: EMPTY
2036: LIST
2037: LIST
2038: LIST
2039: LIST
2040: LIST
2041: LIST
2042: LIST
2043: LIST
2044: LIST
2045: LIST
2046: PPUSH
2047: CALL 470 0 4
2051: END
// every 0 0$01 trigger active_road_patrol do
2052: LD_EXP 8
2056: IFFALSE 2114
2058: GO 2060
2060: DISABLE
// ComPatrol ( russian_patrol_tanks [ 2 ] , road , 0 0$02 , [ 21 , 12 , 37 , 30 , 65 , 62 , 107 , 76 ] ) ;
2061: LD_EXP 22
2065: PUSH
2066: LD_INT 2
2068: ARRAY
2069: PPUSH
2070: LD_STRING road
2072: PPUSH
2073: LD_INT 70
2075: PPUSH
2076: LD_INT 21
2078: PUSH
2079: LD_INT 12
2081: PUSH
2082: LD_INT 37
2084: PUSH
2085: LD_INT 30
2087: PUSH
2088: LD_INT 65
2090: PUSH
2091: LD_INT 62
2093: PUSH
2094: LD_INT 107
2096: PUSH
2097: LD_INT 76
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: LIST
2104: LIST
2105: LIST
2106: LIST
2107: LIST
2108: LIST
2109: PPUSH
2110: CALL 470 0 4
2114: END
// every 0 0$01 trigger IsOk ( russian_patrol_forest ) do
2115: LD_EXP 24
2119: PPUSH
2120: CALL_OW 302
2124: IFFALSE 2186
2126: GO 2128
2128: DISABLE
// ComPatrol ( russian_patrol_forest , forest , 0 0$01 , [ 52 , 15 , 81 , 9 , 120 , 52 , 135 , 80 , 122 , 95 ] ) ;
2129: LD_EXP 24
2133: PPUSH
2134: LD_STRING forest
2136: PPUSH
2137: LD_INT 35
2139: PPUSH
2140: LD_INT 52
2142: PUSH
2143: LD_INT 15
2145: PUSH
2146: LD_INT 81
2148: PUSH
2149: LD_INT 9
2151: PUSH
2152: LD_INT 120
2154: PUSH
2155: LD_INT 52
2157: PUSH
2158: LD_INT 135
2160: PUSH
2161: LD_INT 80
2163: PUSH
2164: LD_INT 122
2166: PUSH
2167: LD_INT 95
2169: PUSH
2170: EMPTY
2171: LIST
2172: LIST
2173: LIST
2174: LIST
2175: LIST
2176: LIST
2177: LIST
2178: LIST
2179: LIST
2180: LIST
2181: PPUSH
2182: CALL 470 0 4
2186: END
// every 0 0$01 trigger macmilan_use_radio do
2187: LD_EXP 6
2191: IFFALSE 2252
2193: GO 2195
2195: DISABLE
// begin active_road_patrol := false ;
2196: LD_ADDR_EXP 8
2200: PUSH
2201: LD_INT 0
2203: ST_TO_ADDR
// ComStop ( russian_patrol_tanks ) ;
2204: LD_EXP 22
2208: PPUSH
2209: CALL_OW 141
// AddComAgressiveMove ( russian_patrol_tanks , 72 , 41 ) ;
2213: LD_EXP 22
2217: PPUSH
2218: LD_INT 72
2220: PPUSH
2221: LD_INT 41
2223: PPUSH
2224: CALL_OW 174
// ComExitBuilding ( russian_troops_2 ) ;
2228: LD_EXP 21
2232: PPUSH
2233: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , 72 , 41 ) ;
2237: LD_EXP 21
2241: PPUSH
2242: LD_INT 72
2244: PPUSH
2245: LD_INT 41
2247: PPUSH
2248: CALL_OW 174
// end ;
2252: END
// every 0 0$03 trigger FilterUnitsInArea ( def_south , [ f_side , 1 ] ) do var un ;
2253: LD_INT 9
2255: PPUSH
2256: LD_INT 22
2258: PUSH
2259: LD_INT 1
2261: PUSH
2262: EMPTY
2263: LIST
2264: LIST
2265: PPUSH
2266: CALL_OW 70
2270: IFFALSE 2344
2272: GO 2274
2274: DISABLE
2275: LD_INT 0
2277: PPUSH
// begin enable ;
2278: ENABLE
// un := FilterUnitsInArea ( def_south , [ f_side , 1 ] ) [ 1 ] ;
2279: LD_ADDR_VAR 0 1
2283: PUSH
2284: LD_INT 9
2286: PPUSH
2287: LD_INT 22
2289: PUSH
2290: LD_INT 1
2292: PUSH
2293: EMPTY
2294: LIST
2295: LIST
2296: PPUSH
2297: CALL_OW 70
2301: PUSH
2302: LD_INT 1
2304: ARRAY
2305: ST_TO_ADDR
// ComExitBuilding ( russian_troops_2 ) ;
2306: LD_EXP 21
2310: PPUSH
2311: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , GetX ( un ) , GetY ( un ) ) ;
2315: LD_EXP 21
2319: PPUSH
2320: LD_VAR 0 1
2324: PPUSH
2325: CALL_OW 250
2329: PPUSH
2330: LD_VAR 0 1
2334: PPUSH
2335: CALL_OW 251
2339: PPUSH
2340: CALL_OW 174
// end ;
2344: PPOPN 1
2346: END
// every 0 0$01 trigger ( GetLives ( russian_patrol_tanks [ 1 ] ) < 999 or GetLives ( russian_patrol_tanks [ 2 ] ) < 999 ) and See ( 3 , JMM ) do
2347: LD_EXP 22
2351: PUSH
2352: LD_INT 1
2354: ARRAY
2355: PPUSH
2356: CALL_OW 256
2360: PUSH
2361: LD_INT 999
2363: LESS
2364: PUSH
2365: LD_EXP 22
2369: PUSH
2370: LD_INT 2
2372: ARRAY
2373: PPUSH
2374: CALL_OW 256
2378: PUSH
2379: LD_INT 999
2381: LESS
2382: OR
2383: PUSH
2384: LD_INT 3
2386: PPUSH
2387: LD_EXP 15
2391: PPUSH
2392: CALL_OW 292
2396: AND
2397: IFFALSE 2424
2399: GO 2401
2401: DISABLE
// begin active_road_patrol := false ;
2402: LD_ADDR_EXP 8
2406: PUSH
2407: LD_INT 0
2409: ST_TO_ADDR
// ComAttackUnit ( russian_patrol_tanks , JMM ) ;
2410: LD_EXP 22
2414: PPUSH
2415: LD_EXP 15
2419: PPUSH
2420: CALL_OW 115
// end ;
2424: END
// every 0 0$01 trigger macmilan_in_trap do
2425: LD_EXP 9
2429: IFFALSE 2475
2431: GO 2433
2433: DISABLE
// begin ComExitBuilding ( russian_troops_2 ) ;
2434: LD_EXP 21
2438: PPUSH
2439: CALL_OW 122
// ComAttackUnit ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , JMM ) ;
2443: LD_EXP 20
2447: PUSH
2448: LD_EXP 21
2452: ADD
2453: PUSH
2454: LD_EXP 25
2458: ADD
2459: PUSH
2460: LD_EXP 22
2464: ADD
2465: PPUSH
2466: LD_EXP 15
2470: PPUSH
2471: CALL_OW 115
// end ;
2475: END
// every 0 0$01 trigger meta_action do
2476: LD_EXP 10
2480: IFFALSE 2526
2482: GO 2484
2484: DISABLE
// begin active_road_patrol := false ;
2485: LD_ADDR_EXP 8
2489: PUSH
2490: LD_INT 0
2492: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , 93 , 1 ) ;
2493: LD_EXP 20
2497: PUSH
2498: LD_EXP 21
2502: ADD
2503: PUSH
2504: LD_EXP 25
2508: ADD
2509: PUSH
2510: LD_EXP 22
2514: ADD
2515: PPUSH
2516: LD_INT 93
2518: PPUSH
2519: LD_INT 1
2521: PPUSH
2522: CALL_OW 114
// end ;
2526: END
// every 0 0$20 trigger send_troops_to_forest do
2527: LD_EXP 14
2531: IFFALSE 2585
2533: GO 2535
2535: DISABLE
// begin if not IsOk ( russian_patrol_forest ) then
2536: LD_EXP 24
2540: PPUSH
2541: CALL_OW 302
2545: NOT
2546: IFFALSE 2550
// exit ;
2548: GO 2585
// ComAgressiveMove ( russian_troops_1 ^ Pokryshkin , GetRememberedX ( russian_patrol_forest ) , GetRememberedY ( russian_patrol_forest ) ) ;
2550: LD_EXP 20
2554: PUSH
2555: LD_EXP 25
2559: ADD
2560: PPUSH
2561: LD_EXP 24
2565: PPUSH
2566: CALL_OW 252
2570: PPUSH
2571: LD_EXP 24
2575: PPUSH
2576: CALL_OW 253
2580: PPUSH
2581: CALL_OW 114
// end ;
2585: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) = 3 then
2586: LD_VAR 0 1
2590: PPUSH
2591: CALL_OW 255
2595: PUSH
2596: LD_INT 3
2598: EQUAL
2599: IFFALSE 2642
// begin wait ( 11 ) ;
2601: LD_INT 11
2603: PPUSH
2604: CALL_OW 67
// ComEnterUnit ( driver , NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_depot ] ) , driver ) ) ;
2608: LD_VAR 0 1
2612: PPUSH
2613: LD_INT 30
2615: PUSH
2616: LD_INT 0
2618: PUSH
2619: EMPTY
2620: LIST
2621: LIST
2622: PPUSH
2623: CALL_OW 69
2627: PPUSH
2628: LD_VAR 0 1
2632: PPUSH
2633: CALL_OW 74
2637: PPUSH
2638: CALL_OW 120
// end ; end ; end_of_file
2642: PPOPN 4
2644: END
// export function Action ; var i ; begin
2645: LD_INT 0
2647: PPUSH
2648: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
2649: LD_ADDR_VAR 0 2
2653: PUSH
2654: LD_INT 22
2656: PUSH
2657: LD_INT 3
2659: PUSH
2660: EMPTY
2661: LIST
2662: LIST
2663: PUSH
2664: LD_INT 25
2666: PUSH
2667: LD_INT 1
2669: PUSH
2670: EMPTY
2671: LIST
2672: LIST
2673: PUSH
2674: EMPTY
2675: LIST
2676: LIST
2677: PPUSH
2678: CALL_OW 69
2682: PUSH
2683: FOR_IN
2684: IFFALSE 2697
// ComHold ( i ) ;
2686: LD_VAR 0 2
2690: PPUSH
2691: CALL_OW 140
2695: GO 2683
2697: POP
2698: POP
// InGameOn ;
2699: CALL_OW 8
// CenterOnXY ( 79 , 76 ) ;
2703: LD_INT 79
2705: PPUSH
2706: LD_INT 76
2708: PPUSH
2709: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
2713: LD_INT 10
2715: PPUSH
2716: CALL_OW 67
// PlaceUnitXY ( JMM , 80 , 79 , true ) ;
2720: LD_EXP 15
2724: PPUSH
2725: LD_INT 80
2727: PPUSH
2728: LD_INT 79
2730: PPUSH
2731: LD_INT 1
2733: PPUSH
2734: CALL_OW 48
// Wait ( 0 0$03 ) ;
2738: LD_INT 105
2740: PPUSH
2741: CALL_OW 67
// ComMoveXY ( JMM , 80 , 76 ) ;
2745: LD_EXP 15
2749: PPUSH
2750: LD_INT 80
2752: PPUSH
2753: LD_INT 76
2755: PPUSH
2756: CALL_OW 111
// Say ( JMM , D1-JMM-1 ) ;
2760: LD_EXP 15
2764: PPUSH
2765: LD_STRING D1-JMM-1
2767: PPUSH
2768: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2772: LD_INT 10
2774: PPUSH
2775: CALL_OW 67
// ComMoveXY ( JMM , 76 , 76 ) ;
2779: LD_EXP 15
2783: PPUSH
2784: LD_INT 76
2786: PPUSH
2787: LD_INT 76
2789: PPUSH
2790: CALL_OW 111
// Say ( JMM , D1-JMM-1a ) ;
2794: LD_EXP 15
2798: PPUSH
2799: LD_STRING D1-JMM-1a
2801: PPUSH
2802: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2806: LD_INT 10
2808: PPUSH
2809: CALL_OW 67
// ComTurnXY ( JMM , 83 , 66 ) ;
2813: LD_EXP 15
2817: PPUSH
2818: LD_INT 83
2820: PPUSH
2821: LD_INT 66
2823: PPUSH
2824: CALL_OW 118
// Say ( JMM , D1-JMM-1b ) ;
2828: LD_EXP 15
2832: PPUSH
2833: LD_STRING D1-JMM-1b
2835: PPUSH
2836: CALL_OW 88
// Wait ( 0 0$0.5 ) ;
2840: LD_INT 18
2842: PPUSH
2843: CALL_OW 67
// Say ( JMM , D1-JMM-1c ) ;
2847: LD_EXP 15
2851: PPUSH
2852: LD_STRING D1-JMM-1c
2854: PPUSH
2855: CALL_OW 88
// Wait ( 0 0$0.2 ) ;
2859: LD_INT 7
2861: PPUSH
2862: CALL_OW 67
// SayRadio ( Powell , D1-Pow-1 ) ;
2866: LD_EXP 18
2870: PPUSH
2871: LD_STRING D1-Pow-1
2873: PPUSH
2874: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
2878: LD_EXP 15
2882: PPUSH
2883: LD_STRING D1-JMM-2
2885: PPUSH
2886: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
2890: LD_EXP 18
2894: PPUSH
2895: LD_STRING D1-Pow-2
2897: PPUSH
2898: CALL_OW 94
// Say ( JMM , D1-JMM-3 ) ;
2902: LD_EXP 15
2906: PPUSH
2907: LD_STRING D1-JMM-3
2909: PPUSH
2910: CALL_OW 88
// SayRadio ( Powell , D1-Pow-3 ) ;
2914: LD_EXP 18
2918: PPUSH
2919: LD_STRING D1-Pow-3
2921: PPUSH
2922: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
2926: LD_EXP 15
2930: PPUSH
2931: LD_STRING D1-JMM-4
2933: PPUSH
2934: CALL_OW 88
// ComFree ( JMM ) ;
2938: LD_EXP 15
2942: PPUSH
2943: CALL_OW 139
// Wait ( 0 0$0.3 ) ;
2947: LD_INT 10
2949: PPUSH
2950: CALL_OW 67
// InGameOff ;
2954: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
2958: LD_STRING M1
2960: PPUSH
2961: CALL_OW 337
// SaveForQuickRestart ;
2965: CALL_OW 22
// active_russian_dialog := true ;
2969: LD_ADDR_EXP 3
2973: PUSH
2974: LD_INT 1
2976: ST_TO_ADDR
// active_road_patrol := true ;
2977: LD_ADDR_EXP 8
2981: PUSH
2982: LD_INT 1
2984: ST_TO_ADDR
// if Difficulty < 3 then
2985: LD_OWVAR 67
2989: PUSH
2990: LD_INT 3
2992: LESS
2993: IFFALSE 3024
// begin PlaceUnitXY ( Bobby , 41 , 71 , false ) ;
2995: LD_EXP 16
2999: PPUSH
3000: LD_INT 41
3002: PPUSH
3003: LD_INT 71
3005: PPUSH
3006: LD_INT 0
3008: PPUSH
3009: CALL_OW 48
// ComHold ( Bobby ) ;
3013: LD_EXP 16
3017: PPUSH
3018: CALL_OW 140
// end else
3022: GO 3072
// begin SetDir ( Bobby , 5 ) ;
3024: LD_EXP 16
3028: PPUSH
3029: LD_INT 5
3031: PPUSH
3032: CALL_OW 233
// PlaceUnitXY ( Bobby , 105 , 98 , false ) ;
3036: LD_EXP 16
3040: PPUSH
3041: LD_INT 105
3043: PPUSH
3044: LD_INT 98
3046: PPUSH
3047: LD_INT 0
3049: PPUSH
3050: CALL_OW 48
// ComCrawl ( Bobby ) ;
3054: LD_EXP 16
3058: PPUSH
3059: CALL_OW 137
// AddComHold ( Bobby ) ;
3063: LD_EXP 16
3067: PPUSH
3068: CALL_OW 200
// end ; PlaceUnitXY ( Cyrus , 90 , 42 , false ) ;
3072: LD_EXP 17
3076: PPUSH
3077: LD_INT 90
3079: PPUSH
3080: LD_INT 42
3082: PPUSH
3083: LD_INT 0
3085: PPUSH
3086: CALL_OW 48
// ComMoveXY ( Cyrus , 79 , 34 ) ;
3090: LD_EXP 17
3094: PPUSH
3095: LD_INT 79
3097: PPUSH
3098: LD_INT 34
3100: PPUSH
3101: CALL_OW 111
// AddComCrawl ( Cyrus ) ;
3105: LD_EXP 17
3109: PPUSH
3110: CALL_OW 197
// end ;
3114: LD_VAR 0 1
3118: RET
// every 0 0$01 trigger active_russian_dialog do var wait_points ;
3119: LD_EXP 3
3123: IFFALSE 3746
3125: GO 3127
3127: DISABLE
3128: LD_INT 0
3130: PPUSH
// begin wait_points := 0 ;
3131: LD_ADDR_VAR 0 1
3135: PUSH
3136: LD_INT 0
3138: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
3139: LD_INT 70
3141: PPUSH
3142: CALL_OW 67
// ComAgressiveMove ( russian_troops_1 , 79 , 83 ) ;
3146: LD_EXP 20
3150: PPUSH
3151: LD_INT 79
3153: PPUSH
3154: LD_INT 83
3156: PPUSH
3157: CALL_OW 114
// Say ( russian_troops_1 [ 2 ] , D1R-Rus1-1 ) ;
3161: LD_EXP 20
3165: PUSH
3166: LD_INT 2
3168: ARRAY
3169: PPUSH
3170: LD_STRING D1R-Rus1-1
3172: PPUSH
3173: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1R-Rus2-1 ) ;
3177: LD_EXP 20
3181: PUSH
3182: LD_INT 1
3184: ARRAY
3185: PPUSH
3186: LD_STRING D1R-Rus2-1
3188: PPUSH
3189: CALL_OW 88
// ComAgressiveMove ( russian_troops_2 , 91 , 80 ) ;
3193: LD_EXP 21
3197: PPUSH
3198: LD_INT 91
3200: PPUSH
3201: LD_INT 80
3203: PPUSH
3204: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
3208: LD_INT 35
3210: PPUSH
3211: CALL_OW 67
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 79 , 82 ) < 5 ;
3215: LD_EXP 20
3219: PUSH
3220: LD_INT 1
3222: ARRAY
3223: PPUSH
3224: LD_INT 79
3226: PPUSH
3227: LD_INT 82
3229: PPUSH
3230: CALL_OW 297
3234: PUSH
3235: LD_INT 5
3237: LESS
3238: IFFALSE 3208
// if not IsInArea ( JMM , jmm_spot ) then
3240: LD_EXP 15
3244: PPUSH
3245: LD_INT 5
3247: PPUSH
3248: CALL_OW 308
3252: NOT
3253: IFFALSE 3273
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1 ) else
3255: LD_EXP 20
3259: PUSH
3260: LD_INT 1
3262: ARRAY
3263: PPUSH
3264: LD_STRING D1Ra-Rus2-1
3266: PPUSH
3267: CALL_OW 88
3271: GO 3409
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3273: LD_EXP 20
3277: PUSH
3278: LD_INT 2
3280: ARRAY
3281: PPUSH
3282: LD_STRING D1Rb-Rus1-1
3284: PPUSH
3285: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Rb-Rus2-1 ) ;
3289: LD_EXP 20
3293: PUSH
3294: LD_INT 1
3296: ARRAY
3297: PPUSH
3298: LD_STRING D1Rb-Rus2-1
3300: PPUSH
3301: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 , GetX ( JMM ) , GetY ( JMM ) ) ;
3305: LD_EXP 20
3309: PUSH
3310: LD_EXP 21
3314: ADD
3315: PPUSH
3316: LD_EXP 15
3320: PPUSH
3321: CALL_OW 250
3325: PPUSH
3326: LD_EXP 15
3330: PPUSH
3331: CALL_OW 251
3335: PPUSH
3336: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
3340: LD_INT 35
3342: PPUSH
3343: CALL_OW 67
// until not IsInArea ( JMM , jmm_spot ) and not See ( 3 , jmm ) ;
3347: LD_EXP 15
3351: PPUSH
3352: LD_INT 5
3354: PPUSH
3355: CALL_OW 308
3359: NOT
3360: PUSH
3361: LD_INT 3
3363: PPUSH
3364: LD_EXP 15
3368: PPUSH
3369: CALL_OW 292
3373: NOT
3374: AND
3375: IFFALSE 3340
// Say ( russian_troops_1 [ 2 ] , D1Rc-Rus1-1 ) ;
3377: LD_EXP 20
3381: PUSH
3382: LD_INT 2
3384: ARRAY
3385: PPUSH
3386: LD_STRING D1Rc-Rus1-1
3388: PPUSH
3389: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1a ) ;
3393: LD_EXP 20
3397: PUSH
3398: LD_INT 1
3400: ARRAY
3401: PPUSH
3402: LD_STRING D1Ra-Rus2-1a
3404: PPUSH
3405: CALL_OW 88
// end ; wait_points := 10 ;
3409: LD_ADDR_VAR 0 1
3413: PUSH
3414: LD_INT 10
3416: ST_TO_ADDR
// if Difficulty > 1 then
3417: LD_OWVAR 67
3421: PUSH
3422: LD_INT 1
3424: GREATER
3425: IFFALSE 3507
// begin ComAgressiveMove ( russian_troops_1 , 78 , 95 ) ;
3427: LD_EXP 20
3431: PPUSH
3432: LD_INT 78
3434: PPUSH
3435: LD_INT 95
3437: PPUSH
3438: CALL_OW 114
// AddComWait ( russian_troops_1 , 0 0$05 ) ;
3442: LD_EXP 20
3446: PPUSH
3447: LD_INT 175
3449: PPUSH
3450: CALL_OW 202
// wait_points := wait_points + 15 ;
3454: LD_ADDR_VAR 0 1
3458: PUSH
3459: LD_VAR 0 1
3463: PUSH
3464: LD_INT 15
3466: PLUS
3467: ST_TO_ADDR
// if Difficulty > 2 then
3468: LD_OWVAR 67
3472: PUSH
3473: LD_INT 2
3475: GREATER
3476: IFFALSE 3507
// begin AddComAgressiveMove ( russian_troops_1 , 65 , 79 ) ;
3478: LD_EXP 20
3482: PPUSH
3483: LD_INT 65
3485: PPUSH
3486: LD_INT 79
3488: PPUSH
3489: CALL_OW 174
// wait_points := wait_points + 5 ;
3493: LD_ADDR_VAR 0 1
3497: PUSH
3498: LD_VAR 0 1
3502: PUSH
3503: LD_INT 5
3505: PLUS
3506: ST_TO_ADDR
// end ; end ; repeat wait ( 0 0$01 ) ;
3507: LD_INT 35
3509: PPUSH
3510: CALL_OW 67
// wait_points := wait_points - 1 ;
3514: LD_ADDR_VAR 0 1
3518: PUSH
3519: LD_VAR 0 1
3523: PUSH
3524: LD_INT 1
3526: MINUS
3527: ST_TO_ADDR
// if See ( 3 , JMM ) then
3528: LD_INT 3
3530: PPUSH
3531: LD_EXP 15
3535: PPUSH
3536: CALL_OW 292
3540: IFFALSE 3594
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3542: LD_EXP 20
3546: PUSH
3547: LD_INT 2
3549: ARRAY
3550: PPUSH
3551: LD_STRING D1Rb-Rus1-1
3553: PPUSH
3554: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3558: LD_EXP 20
3562: PPUSH
3563: LD_EXP 15
3567: PPUSH
3568: CALL_OW 250
3572: PPUSH
3573: LD_EXP 15
3577: PPUSH
3578: CALL_OW 251
3582: PPUSH
3583: CALL_OW 114
// Wait ( 0 0$03 ) ;
3587: LD_INT 105
3589: PPUSH
3590: CALL_OW 67
// end ; until wait_points = 0 ;
3594: LD_VAR 0 1
3598: PUSH
3599: LD_INT 0
3601: EQUAL
3602: IFFALSE 3507
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3604: LD_EXP 20
3608: PPUSH
3609: LD_INT 45
3611: PPUSH
3612: LD_INT 5
3614: PPUSH
3615: CALL_OW 114
// ComEnterUnit ( russian_troops_2 , rbar1 ) ;
3619: LD_EXP 21
3623: PPUSH
3624: LD_INT 26
3626: PPUSH
3627: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
3631: LD_INT 35
3633: PPUSH
3634: CALL_OW 67
// if See ( 3 , JMM ) then
3638: LD_INT 3
3640: PPUSH
3641: LD_EXP 15
3645: PPUSH
3646: CALL_OW 292
3650: IFFALSE 3706
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3652: LD_EXP 20
3656: PUSH
3657: LD_INT 2
3659: ARRAY
3660: PPUSH
3661: LD_STRING D1Rb-Rus1-1
3663: PPUSH
3664: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3668: LD_EXP 20
3672: PPUSH
3673: LD_EXP 15
3677: PPUSH
3678: CALL_OW 250
3682: PPUSH
3683: LD_EXP 15
3687: PPUSH
3688: CALL_OW 251
3692: PPUSH
3693: CALL_OW 114
// Wait ( 0 0$50 ) ;
3697: LD_INT 1750
3699: PPUSH
3700: CALL_OW 67
// end else
3704: GO 3721
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3706: LD_EXP 20
3710: PPUSH
3711: LD_INT 45
3713: PPUSH
3714: LD_INT 5
3716: PPUSH
3717: CALL_OW 114
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 45 , 5 ) < 10 ;
3721: LD_EXP 20
3725: PUSH
3726: LD_INT 1
3728: ARRAY
3729: PPUSH
3730: LD_INT 45
3732: PPUSH
3733: LD_INT 5
3735: PPUSH
3736: CALL_OW 297
3740: PUSH
3741: LD_INT 10
3743: LESS
3744: IFFALSE 3631
// end ;
3746: PPOPN 1
3748: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 6 ] ] ) and Difficulty = 1 do
3749: LD_INT 22
3751: PUSH
3752: LD_INT 3
3754: PUSH
3755: EMPTY
3756: LIST
3757: LIST
3758: PUSH
3759: LD_INT 92
3761: PUSH
3762: LD_INT 80
3764: PUSH
3765: LD_INT 83
3767: PUSH
3768: LD_INT 6
3770: PUSH
3771: EMPTY
3772: LIST
3773: LIST
3774: LIST
3775: LIST
3776: PUSH
3777: EMPTY
3778: LIST
3779: LIST
3780: PPUSH
3781: CALL_OW 69
3785: PUSH
3786: LD_OWVAR 67
3790: PUSH
3791: LD_INT 1
3793: EQUAL
3794: AND
3795: IFFALSE 3876
3797: GO 3799
3799: DISABLE
// begin PlaceSeeing ( 80 , 83 , 1 , - 7 ) ;
3800: LD_INT 80
3802: PPUSH
3803: LD_INT 83
3805: PPUSH
3806: LD_INT 1
3808: PPUSH
3809: LD_INT 7
3811: NEG
3812: PPUSH
3813: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
3817: LD_INT 35
3819: PPUSH
3820: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 10 ] ] ) ;
3824: LD_INT 22
3826: PUSH
3827: LD_INT 3
3829: PUSH
3830: EMPTY
3831: LIST
3832: LIST
3833: PUSH
3834: LD_INT 92
3836: PUSH
3837: LD_INT 80
3839: PUSH
3840: LD_INT 83
3842: PUSH
3843: LD_INT 10
3845: PUSH
3846: EMPTY
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: PUSH
3852: EMPTY
3853: LIST
3854: LIST
3855: PPUSH
3856: CALL_OW 69
3860: NOT
3861: IFFALSE 3817
// RemoveSeeing ( 80 , 83 , 1 ) ;
3863: LD_INT 80
3865: PPUSH
3866: LD_INT 83
3868: PPUSH
3869: LD_INT 1
3871: PPUSH
3872: CALL_OW 331
// end ;
3876: END
// every 0 0$02 trigger GetDistUnits ( JMM , Bobby ) < 9 do
3877: LD_EXP 15
3881: PPUSH
3882: LD_EXP 16
3886: PPUSH
3887: CALL_OW 296
3891: PUSH
3892: LD_INT 9
3894: LESS
3895: IFFALSE 4346
3897: GO 3899
3899: DISABLE
// begin ComWalk ( Bobby ) ;
3900: LD_EXP 16
3904: PPUSH
3905: CALL_OW 138
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
3909: LD_EXP 16
3913: PPUSH
3914: LD_EXP 15
3918: PPUSH
3919: CALL_OW 250
3923: PPUSH
3924: LD_EXP 15
3928: PPUSH
3929: CALL_OW 251
3933: PPUSH
3934: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
3938: LD_INT 35
3940: PPUSH
3941: CALL_OW 67
// until See ( 4 , JMM ) ;
3945: LD_INT 4
3947: PPUSH
3948: LD_EXP 15
3952: PPUSH
3953: CALL_OW 292
3957: IFFALSE 3938
// InGameOn ;
3959: CALL_OW 8
// ComTurnUnit ( JMM , Bobby ) ;
3963: LD_EXP 15
3967: PPUSH
3968: LD_EXP 16
3972: PPUSH
3973: CALL_OW 119
// if cyrus_in_squad and IsOk ( Cyrus ) and GetDistUnits ( JMM , Cyrus ) < 10 then
3977: LD_EXP 7
3981: PUSH
3982: LD_EXP 17
3986: PPUSH
3987: CALL_OW 302
3991: AND
3992: PUSH
3993: LD_EXP 15
3997: PPUSH
3998: LD_EXP 17
4002: PPUSH
4003: CALL_OW 296
4007: PUSH
4008: LD_INT 10
4010: LESS
4011: AND
4012: IFFALSE 4057
// begin ComMoveXY ( Cyrus , GetX ( JMM ) , GetY ( JMM ) ) ;
4014: LD_EXP 17
4018: PPUSH
4019: LD_EXP 15
4023: PPUSH
4024: CALL_OW 250
4028: PPUSH
4029: LD_EXP 15
4033: PPUSH
4034: CALL_OW 251
4038: PPUSH
4039: CALL_OW 111
// AddComTurnUnit ( Cyrus , Bobby ) ;
4043: LD_EXP 17
4047: PPUSH
4048: LD_EXP 16
4052: PPUSH
4053: CALL_OW 179
// end ; Say ( JMM , D2-JMM-1 ) ;
4057: LD_EXP 15
4061: PPUSH
4062: LD_STRING D2-JMM-1
4064: PPUSH
4065: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
4069: LD_INT 10
4071: PPUSH
4072: CALL_OW 67
// ComTurnUnit ( Bobby , JMM ) ;
4076: LD_EXP 16
4080: PPUSH
4081: LD_EXP 15
4085: PPUSH
4086: CALL_OW 119
// Say ( Bobby , D2-Bobby-1 ) ;
4090: LD_EXP 16
4094: PPUSH
4095: LD_STRING D2-Bobby-1
4097: PPUSH
4098: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
4102: LD_EXP 15
4106: PPUSH
4107: LD_STRING D2-JMM-2
4109: PPUSH
4110: CALL_OW 88
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4114: LD_EXP 16
4118: PPUSH
4119: LD_EXP 15
4123: PPUSH
4124: CALL_OW 250
4128: PPUSH
4129: LD_EXP 15
4133: PPUSH
4134: CALL_OW 251
4138: PPUSH
4139: CALL_OW 111
// Say ( Bobby , D2-Bobby-2 ) ;
4143: LD_EXP 16
4147: PPUSH
4148: LD_STRING D2-Bobby-2
4150: PPUSH
4151: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
4155: LD_EXP 15
4159: PPUSH
4160: LD_STRING D2-JMM-3
4162: PPUSH
4163: CALL_OW 88
// ComTurnUnit ( Bobby , JMM ) ;
4167: LD_EXP 16
4171: PPUSH
4172: LD_EXP 15
4176: PPUSH
4177: CALL_OW 119
// Say ( Bobby , D2-Bobby-3 ) ;
4181: LD_EXP 16
4185: PPUSH
4186: LD_STRING D2-Bobby-3
4188: PPUSH
4189: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
4193: LD_EXP 15
4197: PPUSH
4198: LD_STRING D2-JMM-4
4200: PPUSH
4201: CALL_OW 88
// Say ( Bobby , D2-Bobby-4 ) ;
4205: LD_EXP 16
4209: PPUSH
4210: LD_STRING D2-Bobby-4
4212: PPUSH
4213: CALL_OW 88
// Say ( JMM , D2-JMM-5 ) ;
4217: LD_EXP 15
4221: PPUSH
4222: LD_STRING D2-JMM-5
4224: PPUSH
4225: CALL_OW 88
// Say ( Bobby , D2-Bobby-5 ) ;
4229: LD_EXP 16
4233: PPUSH
4234: LD_STRING D2-Bobby-5
4236: PPUSH
4237: CALL_OW 88
// Say ( JMM , D2-JMM-6 ) ;
4241: LD_EXP 15
4245: PPUSH
4246: LD_STRING D2-JMM-6
4248: PPUSH
4249: CALL_OW 88
// if not powell_contact then
4253: LD_EXP 5
4257: NOT
4258: IFFALSE 4284
// begin Say ( Bobby , D2-Bobby-6 ) ;
4260: LD_EXP 16
4264: PPUSH
4265: LD_STRING D2-Bobby-6
4267: PPUSH
4268: CALL_OW 88
// Say ( JMM , D2-JMM-7 ) ;
4272: LD_EXP 15
4276: PPUSH
4277: LD_STRING D2-JMM-7
4279: PPUSH
4280: CALL_OW 88
// end ; InGameOff ;
4284: CALL_OW 9
// SetSide ( Bobby , 1 ) ;
4288: LD_EXP 16
4292: PPUSH
4293: LD_INT 1
4295: PPUSH
4296: CALL_OW 235
// ComFree ( [ JMM , Bobby ] ) ;
4300: LD_EXP 15
4304: PUSH
4305: LD_EXP 16
4309: PUSH
4310: EMPTY
4311: LIST
4312: LIST
4313: PPUSH
4314: CALL_OW 139
// bobby_in_squad := true ;
4318: LD_ADDR_EXP 4
4322: PUSH
4323: LD_INT 1
4325: ST_TO_ADDR
// if powell_contact and not cyrus_in_squad then
4326: LD_EXP 5
4330: PUSH
4331: LD_EXP 7
4335: NOT
4336: AND
4337: IFFALSE 4346
// ChangeMissionObjectives ( M2b ) ;
4339: LD_STRING M2b
4341: PPUSH
4342: CALL_OW 337
// end ;
4346: END
// every 0 0$45 trigger active_russian_dialog and not bobby_in_squad and Difficulty < 3 do
4347: LD_EXP 3
4351: PUSH
4352: LD_EXP 4
4356: NOT
4357: AND
4358: PUSH
4359: LD_OWVAR 67
4363: PUSH
4364: LD_INT 3
4366: LESS
4367: AND
4368: IFFALSE 4388
4370: GO 4372
4372: DISABLE
// ComMoveXY ( Bobby , 75 , 83 ) ;
4373: LD_EXP 16
4377: PPUSH
4378: LD_INT 75
4380: PPUSH
4381: LD_INT 83
4383: PPUSH
4384: CALL_OW 111
4388: END
// every 0 0$10 trigger cyrus_in_squad and not bobby_in_squad do
4389: LD_EXP 7
4393: PUSH
4394: LD_EXP 4
4398: NOT
4399: AND
4400: IFFALSE 4429
4402: GO 4404
4404: DISABLE
// begin ComMoveXY ( Bobby , 105 , 97 ) ;
4405: LD_EXP 16
4409: PPUSH
4410: LD_INT 105
4412: PPUSH
4413: LD_INT 97
4415: PPUSH
4416: CALL_OW 111
// AddComCrawl ( Bobby ) ;
4420: LD_EXP 16
4424: PPUSH
4425: CALL_OW 197
// end ;
4429: END
// every 0 0$01 trigger IsInArea ( JMM , obstacle_area ) and GetDistUnits ( JMM , Bobby ) < 7 and bobby_in_squad do
4430: LD_EXP 15
4434: PPUSH
4435: LD_INT 6
4437: PPUSH
4438: CALL_OW 308
4442: PUSH
4443: LD_EXP 15
4447: PPUSH
4448: LD_EXP 16
4452: PPUSH
4453: CALL_OW 296
4457: PUSH
4458: LD_INT 7
4460: LESS
4461: AND
4462: PUSH
4463: LD_EXP 4
4467: AND
4468: IFFALSE 4515
4470: GO 4472
4472: DISABLE
// begin ComHold ( [ JMM , Bobby ] ) ;
4473: LD_EXP 15
4477: PUSH
4478: LD_EXP 16
4482: PUSH
4483: EMPTY
4484: LIST
4485: LIST
4486: PPUSH
4487: CALL_OW 140
// Say ( JMM , D2a-JMM-1 ) ;
4491: LD_EXP 15
4495: PPUSH
4496: LD_STRING D2a-JMM-1
4498: PPUSH
4499: CALL_OW 88
// Say ( Bobby , D2a-Bobby-1 ) ;
4503: LD_EXP 16
4507: PPUSH
4508: LD_STRING D2a-Bobby-1
4510: PPUSH
4511: CALL_OW 88
// end ;
4515: END
// every 0 0$50 trigger active_russian_dialog and not See ( 3 , JMM ) do
4516: LD_EXP 3
4520: PUSH
4521: LD_INT 3
4523: PPUSH
4524: LD_EXP 15
4528: PPUSH
4529: CALL_OW 292
4533: NOT
4534: AND
4535: IFFALSE 4711
4537: GO 4539
4539: DISABLE
// begin Wait ( rand ( 0 0$10 , 0 0$20 ) ) ;
4540: LD_INT 350
4542: PPUSH
4543: LD_INT 700
4545: PPUSH
4546: CALL_OW 12
4550: PPUSH
4551: CALL_OW 67
// InGameOn ;
4555: CALL_OW 8
// DialogueOn ;
4559: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
4563: LD_EXP 18
4567: PPUSH
4568: LD_STRING D3-Pow-1
4570: PPUSH
4571: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
4575: LD_EXP 15
4579: PPUSH
4580: LD_STRING D3-JMM-1
4582: PPUSH
4583: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
4587: LD_EXP 18
4591: PPUSH
4592: LD_STRING D3-Pow-2
4594: PPUSH
4595: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
4599: LD_EXP 15
4603: PPUSH
4604: LD_STRING D3-JMM-2
4606: PPUSH
4607: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
4611: LD_EXP 18
4615: PPUSH
4616: LD_STRING D3-Pow-3
4618: PPUSH
4619: CALL_OW 94
// DialogueOff ;
4623: CALL_OW 7
// InGameOff ;
4627: CALL_OW 9
// powell_contact := true ;
4631: LD_ADDR_EXP 5
4635: PUSH
4636: LD_INT 1
4638: ST_TO_ADDR
// SetAreaMapShow ( exitArea , 1 ) ;
4639: LD_INT 10
4641: PPUSH
4642: LD_INT 1
4644: PPUSH
4645: CALL_OW 424
// uc_side := 4 ;
4649: LD_ADDR_OWVAR 20
4653: PUSH
4654: LD_INT 4
4656: ST_TO_ADDR
// uc_nation := 1 ;
4657: LD_ADDR_OWVAR 21
4661: PUSH
4662: LD_INT 1
4664: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ) ;
4665: LD_ADDR_EXP 18
4669: PUSH
4670: LD_STRING Powell
4672: PPUSH
4673: LD_INT 0
4675: PPUSH
4676: CALL 189 0 2
4680: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
4681: LD_STRING M2
4683: PPUSH
4684: CALL_OW 337
// if not bobby_in_squad then
4688: LD_EXP 4
4692: NOT
4693: IFFALSE 4704
// ChangeMissionObjectives ( M2a ) else
4695: LD_STRING M2a
4697: PPUSH
4698: CALL_OW 337
4702: GO 4711
// ChangeMissionObjectives ( M2b ) ;
4704: LD_STRING M2b
4706: PPUSH
4707: CALL_OW 337
// end ;
4711: END
// every 0 0$01 trigger IsInArea ( JMM , fakeArea ) do
4712: LD_EXP 15
4716: PPUSH
4717: LD_INT 7
4719: PPUSH
4720: CALL_OW 308
4724: IFFALSE 4859
4726: GO 4728
4728: DISABLE
// begin DialogueOn ;
4729: CALL_OW 6
// SayRadio ( fakePokryshkin , D4-Rus3-1 ) ;
4733: LD_EXP 19
4737: PPUSH
4738: LD_STRING D4-Rus3-1
4740: PPUSH
4741: CALL_OW 94
// DialogueOff ;
4745: CALL_OW 7
// ChangeMissionObjectives ( M3a ) ;
4749: LD_STRING M3a
4751: PPUSH
4752: CALL_OW 337
// SetAreaMapShow ( fakeEnd , 1 ) ;
4756: LD_INT 11
4758: PPUSH
4759: LD_INT 1
4761: PPUSH
4762: CALL_OW 424
// Wait ( 0 0$02 ) ;
4766: LD_INT 70
4768: PPUSH
4769: CALL_OW 67
// DialogueOn ;
4773: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
4777: LD_EXP 18
4781: PPUSH
4782: LD_STRING D4-Pow-1
4784: PPUSH
4785: CALL_OW 94
// DialogueOff ;
4789: CALL_OW 7
// ChangeMissionObjectives ( M3b ) ;
4793: LD_STRING M3b
4795: PPUSH
4796: CALL_OW 337
// case Query ( Q1 ) of 1 :
4800: LD_STRING Q1
4802: PPUSH
4803: CALL_OW 97
4807: PUSH
4808: LD_INT 1
4810: DOUBLE
4811: EQUAL
4812: IFTRUE 4816
4814: GO 4847
4816: POP
// begin macmilan_use_radio := true ;
4817: LD_ADDR_EXP 6
4821: PUSH
4822: LD_INT 1
4824: ST_TO_ADDR
// DialogueOn ;
4825: CALL_OW 6
// Say ( JMM , D4a-JMM-1 ) ;
4829: LD_EXP 15
4833: PPUSH
4834: LD_STRING D4a-JMM-1
4836: PPUSH
4837: CALL_OW 88
// DialogueOff ;
4841: CALL_OW 7
// end ; 2 :
4845: GO 4859
4847: LD_INT 2
4849: DOUBLE
4850: EQUAL
4851: IFTRUE 4855
4853: GO 4858
4855: POP
// ; end ;
4856: GO 4859
4858: POP
// end ;
4859: END
// every 0 0$02 trigger GetDistUnits ( JMM , Cyrus ) < 8 do
4860: LD_EXP 15
4864: PPUSH
4865: LD_EXP 17
4869: PPUSH
4870: CALL_OW 296
4874: PUSH
4875: LD_INT 8
4877: LESS
4878: IFFALSE 5169
4880: GO 4882
4882: DISABLE
// begin InGameOn ;
4883: CALL_OW 8
// ComMoveXY ( JMM , GetX ( Cyrus ) , GetY ( Cyrus ) ) ;
4887: LD_EXP 15
4891: PPUSH
4892: LD_EXP 17
4896: PPUSH
4897: CALL_OW 250
4901: PPUSH
4902: LD_EXP 17
4906: PPUSH
4907: CALL_OW 251
4911: PPUSH
4912: CALL_OW 111
// if IsOk ( Bobby ) and bobby_in_squad then
4916: LD_EXP 16
4920: PPUSH
4921: CALL_OW 302
4925: PUSH
4926: LD_EXP 4
4930: AND
4931: IFFALSE 4962
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4933: LD_EXP 16
4937: PPUSH
4938: LD_EXP 15
4942: PPUSH
4943: CALL_OW 250
4947: PPUSH
4948: LD_EXP 15
4952: PPUSH
4953: CALL_OW 251
4957: PPUSH
4958: CALL_OW 111
// Say ( JMM , D5-JMM-1 ) ;
4962: LD_EXP 15
4966: PPUSH
4967: LD_STRING D5-JMM-1
4969: PPUSH
4970: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
4974: LD_INT 10
4976: PPUSH
4977: CALL_OW 67
// ComTurnUnit ( JMM , Cyrus ) ;
4981: LD_EXP 15
4985: PPUSH
4986: LD_EXP 17
4990: PPUSH
4991: CALL_OW 119
// ComWalk ( Cyrus ) ;
4995: LD_EXP 17
4999: PPUSH
5000: CALL_OW 138
// ComTurnUnit ( Cyrus , JMM ) ;
5004: LD_EXP 17
5008: PPUSH
5009: LD_EXP 15
5013: PPUSH
5014: CALL_OW 119
// Say ( Cyrus , D5-Cyrus-1 ) ;
5018: LD_EXP 17
5022: PPUSH
5023: LD_STRING D5-Cyrus-1
5025: PPUSH
5026: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5030: LD_EXP 16
5034: PPUSH
5035: CALL_OW 302
5039: PUSH
5040: LD_EXP 4
5044: AND
5045: IFFALSE 5085
// begin ComTurnUnit ( Bobby , Cyrus ) ;
5047: LD_EXP 16
5051: PPUSH
5052: LD_EXP 17
5056: PPUSH
5057: CALL_OW 119
// Say ( Bobby , D5-Bobby-1 ) ;
5061: LD_EXP 16
5065: PPUSH
5066: LD_STRING D5-Bobby-1
5068: PPUSH
5069: CALL_OW 88
// Say ( JMM , D5-JMM-2 ) ;
5073: LD_EXP 15
5077: PPUSH
5078: LD_STRING D5-JMM-2
5080: PPUSH
5081: CALL_OW 88
// end ; InGameOff ;
5085: CALL_OW 9
// cyrus_in_squad := true ;
5089: LD_ADDR_EXP 7
5093: PUSH
5094: LD_INT 1
5096: ST_TO_ADDR
// SetSide ( Cyrus , 1 ) ;
5097: LD_EXP 17
5101: PPUSH
5102: LD_INT 1
5104: PPUSH
5105: CALL_OW 235
// if powell_contact and not bobby_in_squad then
5109: LD_EXP 5
5113: PUSH
5114: LD_EXP 4
5118: NOT
5119: AND
5120: IFFALSE 5129
// ChangeMissionObjectives ( M2b ) ;
5122: LD_STRING M2b
5124: PPUSH
5125: CALL_OW 337
// if not bobby_in_squad and GetSide ( Bobby ) = 4 and IsOk ( Bobby ) then
5129: LD_EXP 4
5133: NOT
5134: PUSH
5135: LD_EXP 16
5139: PPUSH
5140: CALL_OW 255
5144: PUSH
5145: LD_INT 4
5147: EQUAL
5148: AND
5149: PUSH
5150: LD_EXP 16
5154: PPUSH
5155: CALL_OW 302
5159: AND
5160: IFFALSE 5169
// SetAchievement ( ACH_CYRUS ) ;
5162: LD_STRING ACH_CYRUS
5164: PPUSH
5165: CALL_OW 543
// end ;
5169: END
// every 0 0$01 trigger bobby_in_squad and cyrus_in_squad do
5170: LD_EXP 4
5174: PUSH
5175: LD_EXP 7
5179: AND
5180: IFFALSE 5192
5182: GO 5184
5184: DISABLE
// ChangeMissionObjectives ( M2c ) ;
5185: LD_STRING M2c
5187: PPUSH
5188: CALL_OW 337
5192: END
// every 0 0$01 trigger IsInArea ( JMM , trap ) do
5193: LD_EXP 15
5197: PPUSH
5198: LD_INT 8
5200: PPUSH
5201: CALL_OW 308
5205: IFFALSE 5257
5207: GO 5209
5209: DISABLE
// begin macmilan_in_trap := true ;
5210: LD_ADDR_EXP 9
5214: PUSH
5215: LD_INT 1
5217: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
5218: LD_INT 35
5220: PPUSH
5221: CALL_OW 67
// DialogueOn ;
5225: CALL_OW 6
// Say ( Pokryshkin , D5-Pok-1 ) ;
5229: LD_EXP 25
5233: PPUSH
5234: LD_STRING D5-Pok-1
5236: PPUSH
5237: CALL_OW 88
// DialogueOff ;
5241: CALL_OW 7
// Say ( JMM , D4b-JMM-1 ) ;
5245: LD_EXP 15
5249: PPUSH
5250: LD_STRING D4b-JMM-1
5252: PPUSH
5253: CALL_OW 88
// end ;
5257: END
// every 0 0$01 trigger GetDistUnits ( JMM , russian_meta_guards [ russian_meta_guards ] ) < 12 or UnitFilter ( russian_meta_guards , [ f_not , [ f_lives , 990 ] ] ) do var i , hp ;
5258: LD_EXP 15
5262: PPUSH
5263: LD_EXP 23
5267: PUSH
5268: LD_EXP 23
5272: ARRAY
5273: PPUSH
5274: CALL_OW 296
5278: PUSH
5279: LD_INT 12
5281: LESS
5282: PUSH
5283: LD_EXP 23
5287: PPUSH
5288: LD_INT 3
5290: PUSH
5291: LD_INT 24
5293: PUSH
5294: LD_INT 990
5296: PUSH
5297: EMPTY
5298: LIST
5299: LIST
5300: PUSH
5301: EMPTY
5302: LIST
5303: LIST
5304: PPUSH
5305: CALL_OW 72
5309: OR
5310: IFFALSE 5540
5312: GO 5314
5314: DISABLE
5315: LD_INT 0
5317: PPUSH
5318: PPUSH
// begin hp := [ 300 , 250 , 200 ] [ Difficulty ] ;
5319: LD_ADDR_VAR 0 2
5323: PUSH
5324: LD_INT 300
5326: PUSH
5327: LD_INT 250
5329: PUSH
5330: LD_INT 200
5332: PUSH
5333: EMPTY
5334: LIST
5335: LIST
5336: LIST
5337: PUSH
5338: LD_OWVAR 67
5342: ARRAY
5343: ST_TO_ADDR
// for i in russian_meta_guards do
5344: LD_ADDR_VAR 0 1
5348: PUSH
5349: LD_EXP 23
5353: PUSH
5354: FOR_IN
5355: IFFALSE 5395
// if IsOk ( i ) then
5357: LD_VAR 0 1
5361: PPUSH
5362: CALL_OW 302
5366: IFFALSE 5393
// SetLives ( i , GetLives ( i ) - hp ) ;
5368: LD_VAR 0 1
5372: PPUSH
5373: LD_VAR 0 1
5377: PPUSH
5378: CALL_OW 256
5382: PUSH
5383: LD_VAR 0 2
5387: MINUS
5388: PPUSH
5389: CALL_OW 234
5393: GO 5354
5395: POP
5396: POP
// DialogueOn ;
5397: CALL_OW 6
// Say ( russian_meta_guards [ russian_meta_guards ] , D6-FRus1-1 ) ;
5401: LD_EXP 23
5405: PUSH
5406: LD_EXP 23
5410: ARRAY
5411: PPUSH
5412: LD_STRING D6-FRus1-1
5414: PPUSH
5415: CALL_OW 88
// Say ( JMM , D6-JMM-1 ) ;
5419: LD_EXP 15
5423: PPUSH
5424: LD_STRING D6-JMM-1
5426: PPUSH
5427: CALL_OW 88
// if IsOk ( Cyrus ) and cyrus_in_squad then
5431: LD_EXP 17
5435: PPUSH
5436: CALL_OW 302
5440: PUSH
5441: LD_EXP 7
5445: AND
5446: IFFALSE 5460
// Say ( Cyrus , D6-Cyrus-1 ) ;
5448: LD_EXP 17
5452: PPUSH
5453: LD_STRING D6-Cyrus-1
5455: PPUSH
5456: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5460: LD_EXP 16
5464: PPUSH
5465: CALL_OW 302
5469: PUSH
5470: LD_EXP 4
5474: AND
5475: IFFALSE 5489
// Say ( Bobby , D6-Bobby-1 ) ;
5477: LD_EXP 16
5481: PPUSH
5482: LD_STRING D6-Bobby-1
5484: PPUSH
5485: CALL_OW 88
// DialogueOff ;
5489: CALL_OW 7
// Wait ( [ 0 0$04 , 0 0$03 , 0 0$02 ] [ Difficulty ] ) ;
5493: LD_INT 140
5495: PUSH
5496: LD_INT 105
5498: PUSH
5499: LD_INT 70
5501: PUSH
5502: EMPTY
5503: LIST
5504: LIST
5505: LIST
5506: PUSH
5507: LD_OWVAR 67
5511: ARRAY
5512: PPUSH
5513: CALL_OW 67
// meta_action := true ;
5517: LD_ADDR_EXP 10
5521: PUSH
5522: LD_INT 1
5524: ST_TO_ADDR
// ComAgressiveMove ( russian_meta_guards , 94 , 8 ) ;
5525: LD_EXP 23
5529: PPUSH
5530: LD_INT 94
5532: PPUSH
5533: LD_INT 8
5535: PPUSH
5536: CALL_OW 114
// end ;
5540: PPOPN 2
5542: END
// every 0 0$01 trigger GetDistUnitXY ( JMM , 93 , 1 ) < 5 and FilterAllUnits ( [ f_side , 1 ] ) > 1 do
5543: LD_EXP 15
5547: PPUSH
5548: LD_INT 93
5550: PPUSH
5551: LD_INT 1
5553: PPUSH
5554: CALL_OW 297
5558: PUSH
5559: LD_INT 5
5561: LESS
5562: PUSH
5563: LD_INT 22
5565: PUSH
5566: LD_INT 1
5568: PUSH
5569: EMPTY
5570: LIST
5571: LIST
5572: PPUSH
5573: CALL_OW 69
5577: PUSH
5578: LD_INT 1
5580: GREATER
5581: AND
5582: IFFALSE 5599
5584: GO 5586
5586: DISABLE
// Say ( JMM , D6a-JMM-1 ) ;
5587: LD_EXP 15
5591: PPUSH
5592: LD_STRING D6a-JMM-1
5594: PPUSH
5595: CALL_OW 88
5599: END
// on UnitGoesToRed ( un ) do begin if un = JMM then
5600: LD_VAR 0 1
5604: PUSH
5605: LD_EXP 15
5609: EQUAL
5610: IFFALSE 5619
// YouLost ( JMM ) ;
5612: LD_STRING JMM
5614: PPUSH
5615: CALL_OW 104
// end ;
5619: PPOPN 1
5621: END
// on UnitDestroyed ( un ) do begin if un = JMM then
5622: LD_VAR 0 1
5626: PUSH
5627: LD_EXP 15
5631: EQUAL
5632: IFFALSE 5641
// YouLost ( JMM ) ;
5634: LD_STRING JMM
5636: PPUSH
5637: CALL_OW 104
// end ;
5641: PPOPN 1
5643: END
// every 0 0$01 trigger IsInArea ( Bobby , exitArea ) do
5644: LD_EXP 16
5648: PPUSH
5649: LD_INT 10
5651: PPUSH
5652: CALL_OW 308
5656: IFFALSE 5705
5658: GO 5660
5660: DISABLE
// begin bobby_saved := true ;
5661: LD_ADDR_EXP 12
5665: PUSH
5666: LD_INT 1
5668: ST_TO_ADDR
// SaveVariable ( GetLives ( Bobby ) , 01_BobbyLifePoints_1 ) ;
5669: LD_EXP 16
5673: PPUSH
5674: CALL_OW 256
5678: PPUSH
5679: LD_STRING 01_BobbyLifePoints_1
5681: PPUSH
5682: CALL_OW 39
// RemoveUnit ( Bobby ) ;
5686: LD_EXP 16
5690: PPUSH
5691: CALL_OW 64
// AddMedal ( Bobby , 1 ) ;
5695: LD_STRING Bobby
5697: PPUSH
5698: LD_INT 1
5700: PPUSH
5701: CALL_OW 101
// end ;
5705: END
// every 0 0$01 trigger IsInArea ( Cyrus , exitArea ) do
5706: LD_EXP 17
5710: PPUSH
5711: LD_INT 10
5713: PPUSH
5714: CALL_OW 308
5718: IFFALSE 5767
5720: GO 5722
5722: DISABLE
// begin cyrus_saved := true ;
5723: LD_ADDR_EXP 13
5727: PUSH
5728: LD_INT 1
5730: ST_TO_ADDR
// SaveVariable ( GetLives ( Cyrus ) , 01_CyrusLifePoints_1 ) ;
5731: LD_EXP 17
5735: PPUSH
5736: CALL_OW 256
5740: PPUSH
5741: LD_STRING 01_CyrusLifePoints_1
5743: PPUSH
5744: CALL_OW 39
// RemoveUnit ( Cyrus ) ;
5748: LD_EXP 17
5752: PPUSH
5753: CALL_OW 64
// AddMedal ( Cyrus , 1 ) ;
5757: LD_STRING Cyrus
5759: PPUSH
5760: LD_INT 1
5762: PPUSH
5763: CALL_OW 101
// end ;
5767: END
// every 0 0$01 trigger IsInArea ( JMM , exitArea ) do var i , to_reward , wait_for_them , m1 , m2 , m3 ;
5768: LD_EXP 15
5772: PPUSH
5773: LD_INT 10
5775: PPUSH
5776: CALL_OW 308
5780: IFFALSE 6388
5782: GO 5784
5784: DISABLE
5785: LD_INT 0
5787: PPUSH
5788: PPUSH
5789: PPUSH
5790: PPUSH
5791: PPUSH
5792: PPUSH
// begin if macmilan_use_radio then
5793: LD_EXP 6
5797: IFFALSE 5806
// SetAchievement ( ACH_RADIO ) ;
5799: LD_STRING ACH_RADIO
5801: PPUSH
5802: CALL_OW 543
// if ( not cyrus_saved and cyrus_in_squad and IsOk ( Cyrus ) ) or ( not bobby_saved and bobby_in_squad and IsOk ( Bobby ) ) then
5806: LD_EXP 13
5810: NOT
5811: PUSH
5812: LD_EXP 7
5816: AND
5817: PUSH
5818: LD_EXP 17
5822: PPUSH
5823: CALL_OW 302
5827: AND
5828: PUSH
5829: LD_EXP 12
5833: NOT
5834: PUSH
5835: LD_EXP 4
5839: AND
5840: PUSH
5841: LD_EXP 16
5845: PPUSH
5846: CALL_OW 302
5850: AND
5851: OR
5852: IFFALSE 5893
// case Query ( Q2 ) of 1 :
5854: LD_STRING Q2
5856: PPUSH
5857: CALL_OW 97
5861: PUSH
5862: LD_INT 1
5864: DOUBLE
5865: EQUAL
5866: IFTRUE 5870
5868: GO 5881
5870: POP
// wait_for_them := true ; 2 :
5871: LD_ADDR_VAR 0 3
5875: PUSH
5876: LD_INT 1
5878: ST_TO_ADDR
5879: GO 5893
5881: LD_INT 2
5883: DOUBLE
5884: EQUAL
5885: IFTRUE 5889
5887: GO 5892
5889: POP
// ; end ;
5890: GO 5893
5892: POP
// if wait_for_them then
5893: LD_VAR 0 3
5897: IFFALSE 6010
// repeat wait ( 0 0$01 ) ;
5899: LD_INT 35
5901: PPUSH
5902: CALL_OW 67
// until ( cyrus_saved and bobby_saved ) or ( cyrus_saved and ( not bobby_in_squad or IsDying ( Bobby ) or IsDead ( Bobby ) ) ) or ( bobby_saved and ( not cyrus_in_squad or IsDying ( Cyrus ) or IsDead ( Cyrus ) ) ) or ( IsDead ( Bobby ) and IsDead ( Cyrus ) ) ;
5906: LD_EXP 13
5910: PUSH
5911: LD_EXP 12
5915: AND
5916: PUSH
5917: LD_EXP 13
5921: PUSH
5922: LD_EXP 4
5926: NOT
5927: PUSH
5928: LD_EXP 16
5932: PPUSH
5933: CALL_OW 303
5937: OR
5938: PUSH
5939: LD_EXP 16
5943: PPUSH
5944: CALL_OW 301
5948: OR
5949: AND
5950: OR
5951: PUSH
5952: LD_EXP 12
5956: PUSH
5957: LD_EXP 7
5961: NOT
5962: PUSH
5963: LD_EXP 17
5967: PPUSH
5968: CALL_OW 303
5972: OR
5973: PUSH
5974: LD_EXP 17
5978: PPUSH
5979: CALL_OW 301
5983: OR
5984: AND
5985: OR
5986: PUSH
5987: LD_EXP 16
5991: PPUSH
5992: CALL_OW 301
5996: PUSH
5997: LD_EXP 17
6001: PPUSH
6002: CALL_OW 301
6006: AND
6007: OR
6008: IFFALSE 5899
// SaveVariable ( GetLives ( JMM ) , 01_JMMLifePoints_1 ) ;
6010: LD_EXP 15
6014: PPUSH
6015: CALL_OW 256
6019: PPUSH
6020: LD_STRING 01_JMMLifePoints_1
6022: PPUSH
6023: CALL_OW 39
// RemoveUnit ( JMM ) ;
6027: LD_EXP 15
6031: PPUSH
6032: CALL_OW 64
// to_reward := [ JMM ] ;
6036: LD_ADDR_VAR 0 2
6040: PUSH
6041: LD_EXP 15
6045: PUSH
6046: EMPTY
6047: LIST
6048: ST_TO_ADDR
// if bobby_saved then
6049: LD_EXP 12
6053: IFFALSE 6071
// to_reward := to_reward ^ Bobby ;
6055: LD_ADDR_VAR 0 2
6059: PUSH
6060: LD_VAR 0 2
6064: PUSH
6065: LD_EXP 16
6069: ADD
6070: ST_TO_ADDR
// if cyrus_saved then
6071: LD_EXP 13
6075: IFFALSE 6093
// to_reward := to_reward ^ Cyrus ;
6077: LD_ADDR_VAR 0 2
6081: PUSH
6082: LD_VAR 0 2
6086: PUSH
6087: LD_EXP 17
6091: ADD
6092: ST_TO_ADDR
// m1 := true ;
6093: LD_ADDR_VAR 0 4
6097: PUSH
6098: LD_INT 1
6100: ST_TO_ADDR
// m2 := bobby_saved ;
6101: LD_ADDR_VAR 0 5
6105: PUSH
6106: LD_EXP 12
6110: ST_TO_ADDR
// m3 := cyrus_saved ;
6111: LD_ADDR_VAR 0 6
6115: PUSH
6116: LD_EXP 13
6120: ST_TO_ADDR
// AddMedal ( JMM , 1 ) ;
6121: LD_STRING JMM
6123: PPUSH
6124: LD_INT 1
6126: PPUSH
6127: CALL_OW 101
// if not bobby_in_squad then
6131: LD_EXP 4
6135: NOT
6136: IFFALSE 6149
// AddMedal ( Bobby , - 1 ) ;
6138: LD_STRING Bobby
6140: PPUSH
6141: LD_INT 1
6143: NEG
6144: PPUSH
6145: CALL_OW 101
// if not bobby_saved and ( IsDying ( Bobby ) or IsDead ( Bobby ) ) then
6149: LD_EXP 12
6153: NOT
6154: PUSH
6155: LD_EXP 16
6159: PPUSH
6160: CALL_OW 303
6164: PUSH
6165: LD_EXP 16
6169: PPUSH
6170: CALL_OW 301
6174: OR
6175: AND
6176: IFFALSE 6189
// AddMedal ( Bobby , - 2 ) ;
6178: LD_STRING Bobby
6180: PPUSH
6181: LD_INT 2
6183: NEG
6184: PPUSH
6185: CALL_OW 101
// if not cyrus_in_squad then
6189: LD_EXP 7
6193: NOT
6194: IFFALSE 6207
// AddMedal ( Cyrus , - 1 ) ;
6196: LD_STRING Cyrus
6198: PPUSH
6199: LD_INT 1
6201: NEG
6202: PPUSH
6203: CALL_OW 101
// if not cyrus_saved and ( IsDying ( Cyrus ) or IsDead ( Cyrus ) ) then
6207: LD_EXP 13
6211: NOT
6212: PUSH
6213: LD_EXP 17
6217: PPUSH
6218: CALL_OW 303
6222: PUSH
6223: LD_EXP 17
6227: PPUSH
6228: CALL_OW 301
6232: OR
6233: AND
6234: IFFALSE 6247
// AddMedal ( Cyrus , - 2 ) ;
6236: LD_STRING Cyrus
6238: PPUSH
6239: LD_INT 2
6241: NEG
6242: PPUSH
6243: CALL_OW 101
// if Difficulty = 3 and m1 and m2 and m3 then
6247: LD_OWVAR 67
6251: PUSH
6252: LD_INT 3
6254: EQUAL
6255: PUSH
6256: LD_VAR 0 4
6260: AND
6261: PUSH
6262: LD_VAR 0 5
6266: AND
6267: PUSH
6268: LD_VAR 0 6
6272: AND
6273: IFFALSE 6285
// SetAchievementEX ( ACH_AMER , 1 ) ;
6275: LD_STRING ACH_AMER
6277: PPUSH
6278: LD_INT 1
6280: PPUSH
6281: CALL_OW 564
// GiveMedals ( MAIN ) ;
6285: LD_STRING MAIN
6287: PPUSH
6288: CALL_OW 102
// RewardPeople ( to_reward ) ;
6292: LD_VAR 0 2
6296: PPUSH
6297: CALL_OW 43
// if bobby_saved then
6301: LD_EXP 12
6305: IFFALSE 6325
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
6307: LD_EXP 16
6311: PPUSH
6312: LD_EXP 2
6316: PUSH
6317: LD_STRING Bobby
6319: STR
6320: PPUSH
6321: CALL_OW 38
// if cyrus_saved then
6325: LD_EXP 13
6329: IFFALSE 6349
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
6331: LD_EXP 17
6335: PPUSH
6336: LD_EXP 2
6340: PUSH
6341: LD_STRING Cyrus
6343: STR
6344: PPUSH
6345: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
6349: LD_EXP 15
6353: PPUSH
6354: LD_EXP 2
6358: PUSH
6359: LD_STRING JMM
6361: STR
6362: PPUSH
6363: CALL_OW 38
// if tick <= 3 3$00 then
6367: LD_OWVAR 1
6371: PUSH
6372: LD_INT 6300
6374: LESSEQUAL
6375: IFFALSE 6384
// SetAchievement ( ACH_ASPEED_1 ) ;
6377: LD_STRING ACH_ASPEED_1
6379: PPUSH
6380: CALL_OW 543
// YouWin ;
6384: CALL_OW 103
// end ; end_of_file end_of_file end_of_file
6388: PPOPN 6
6390: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
6391: LD_INT 0
6393: PPUSH
6394: PPUSH
6395: PPUSH
6396: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
6397: LD_VAR 0 1
6401: PPUSH
6402: CALL_OW 264
6406: PUSH
6407: LD_EXP 30
6411: EQUAL
6412: IFFALSE 6484
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
6414: LD_INT 68
6416: PPUSH
6417: LD_VAR 0 1
6421: PPUSH
6422: CALL_OW 255
6426: PPUSH
6427: CALL_OW 321
6431: PUSH
6432: LD_INT 2
6434: EQUAL
6435: IFFALSE 6447
// eff := 70 else
6437: LD_ADDR_VAR 0 6
6441: PUSH
6442: LD_INT 70
6444: ST_TO_ADDR
6445: GO 6455
// eff := 30 ;
6447: LD_ADDR_VAR 0 6
6451: PUSH
6452: LD_INT 30
6454: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
6455: LD_VAR 0 1
6459: PPUSH
6460: CALL_OW 250
6464: PPUSH
6465: LD_VAR 0 1
6469: PPUSH
6470: CALL_OW 251
6474: PPUSH
6475: LD_VAR 0 6
6479: PPUSH
6480: CALL_OW 495
// end ; end ;
6484: LD_VAR 0 4
6488: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
6489: LD_INT 0
6491: PPUSH
6492: PPUSH
6493: PPUSH
6494: PPUSH
6495: PPUSH
6496: PPUSH
// if cmd = 124 then
6497: LD_VAR 0 1
6501: PUSH
6502: LD_INT 124
6504: EQUAL
6505: IFFALSE 6711
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
6507: LD_ADDR_VAR 0 5
6511: PUSH
6512: LD_INT 2
6514: PUSH
6515: LD_INT 34
6517: PUSH
6518: LD_INT 53
6520: PUSH
6521: EMPTY
6522: LIST
6523: LIST
6524: PUSH
6525: LD_INT 34
6527: PUSH
6528: LD_INT 14
6530: PUSH
6531: EMPTY
6532: LIST
6533: LIST
6534: PUSH
6535: EMPTY
6536: LIST
6537: LIST
6538: LIST
6539: PPUSH
6540: CALL_OW 69
6544: ST_TO_ADDR
// if not tmp then
6545: LD_VAR 0 5
6549: NOT
6550: IFFALSE 6554
// exit ;
6552: GO 6711
// for i in tmp do
6554: LD_ADDR_VAR 0 3
6558: PUSH
6559: LD_VAR 0 5
6563: PUSH
6564: FOR_IN
6565: IFFALSE 6709
// begin taskList := GetTaskList ( i ) ;
6567: LD_ADDR_VAR 0 6
6571: PUSH
6572: LD_VAR 0 3
6576: PPUSH
6577: CALL_OW 437
6581: ST_TO_ADDR
// if not taskList then
6582: LD_VAR 0 6
6586: NOT
6587: IFFALSE 6591
// continue ;
6589: GO 6564
// for j = 1 to taskList do
6591: LD_ADDR_VAR 0 4
6595: PUSH
6596: DOUBLE
6597: LD_INT 1
6599: DEC
6600: ST_TO_ADDR
6601: LD_VAR 0 6
6605: PUSH
6606: FOR_TO
6607: IFFALSE 6705
// if taskList [ j ] [ 1 ] = | then
6609: LD_VAR 0 6
6613: PUSH
6614: LD_VAR 0 4
6618: ARRAY
6619: PUSH
6620: LD_INT 1
6622: ARRAY
6623: PUSH
6624: LD_STRING |
6626: EQUAL
6627: IFFALSE 6703
// begin _taskList := Delete ( taskList , 1 ) ;
6629: LD_ADDR_VAR 0 7
6633: PUSH
6634: LD_VAR 0 6
6638: PPUSH
6639: LD_INT 1
6641: PPUSH
6642: CALL_OW 3
6646: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
6647: LD_VAR 0 3
6651: PPUSH
6652: LD_VAR 0 7
6656: PPUSH
6657: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
6661: LD_VAR 0 3
6665: PPUSH
6666: LD_VAR 0 6
6670: PUSH
6671: LD_VAR 0 4
6675: ARRAY
6676: PUSH
6677: LD_INT 2
6679: ARRAY
6680: PPUSH
6681: LD_VAR 0 6
6685: PUSH
6686: LD_VAR 0 4
6690: ARRAY
6691: PUSH
6692: LD_INT 3
6694: ARRAY
6695: PPUSH
6696: LD_INT 8
6698: PPUSH
6699: CALL 6716 0 4
// end ;
6703: GO 6606
6705: POP
6706: POP
// end ;
6707: GO 6564
6709: POP
6710: POP
// end ; end ;
6711: LD_VAR 0 2
6715: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
6716: LD_INT 0
6718: PPUSH
6719: PPUSH
6720: PPUSH
6721: PPUSH
6722: PPUSH
6723: PPUSH
6724: PPUSH
6725: PPUSH
6726: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
6727: LD_VAR 0 1
6731: NOT
6732: PUSH
6733: LD_VAR 0 2
6737: PPUSH
6738: LD_VAR 0 3
6742: PPUSH
6743: CALL_OW 488
6747: NOT
6748: OR
6749: PUSH
6750: LD_VAR 0 4
6754: NOT
6755: OR
6756: IFFALSE 6760
// exit ;
6758: GO 7100
// list := [ ] ;
6760: LD_ADDR_VAR 0 13
6764: PUSH
6765: EMPTY
6766: ST_TO_ADDR
// if x - r < 0 then
6767: LD_VAR 0 2
6771: PUSH
6772: LD_VAR 0 4
6776: MINUS
6777: PUSH
6778: LD_INT 0
6780: LESS
6781: IFFALSE 6793
// min_x := 0 else
6783: LD_ADDR_VAR 0 7
6787: PUSH
6788: LD_INT 0
6790: ST_TO_ADDR
6791: GO 6809
// min_x := x - r ;
6793: LD_ADDR_VAR 0 7
6797: PUSH
6798: LD_VAR 0 2
6802: PUSH
6803: LD_VAR 0 4
6807: MINUS
6808: ST_TO_ADDR
// if y - r < 0 then
6809: LD_VAR 0 3
6813: PUSH
6814: LD_VAR 0 4
6818: MINUS
6819: PUSH
6820: LD_INT 0
6822: LESS
6823: IFFALSE 6835
// min_y := 0 else
6825: LD_ADDR_VAR 0 8
6829: PUSH
6830: LD_INT 0
6832: ST_TO_ADDR
6833: GO 6851
// min_y := y - r ;
6835: LD_ADDR_VAR 0 8
6839: PUSH
6840: LD_VAR 0 3
6844: PUSH
6845: LD_VAR 0 4
6849: MINUS
6850: ST_TO_ADDR
// max_x := x + r ;
6851: LD_ADDR_VAR 0 9
6855: PUSH
6856: LD_VAR 0 2
6860: PUSH
6861: LD_VAR 0 4
6865: PLUS
6866: ST_TO_ADDR
// max_y := y + r ;
6867: LD_ADDR_VAR 0 10
6871: PUSH
6872: LD_VAR 0 3
6876: PUSH
6877: LD_VAR 0 4
6881: PLUS
6882: ST_TO_ADDR
// for _x = min_x to max_x do
6883: LD_ADDR_VAR 0 11
6887: PUSH
6888: DOUBLE
6889: LD_VAR 0 7
6893: DEC
6894: ST_TO_ADDR
6895: LD_VAR 0 9
6899: PUSH
6900: FOR_TO
6901: IFFALSE 7018
// for _y = min_y to max_y do
6903: LD_ADDR_VAR 0 12
6907: PUSH
6908: DOUBLE
6909: LD_VAR 0 8
6913: DEC
6914: ST_TO_ADDR
6915: LD_VAR 0 10
6919: PUSH
6920: FOR_TO
6921: IFFALSE 7014
// begin if not ValidHex ( _x , _y ) then
6923: LD_VAR 0 11
6927: PPUSH
6928: LD_VAR 0 12
6932: PPUSH
6933: CALL_OW 488
6937: NOT
6938: IFFALSE 6942
// continue ;
6940: GO 6920
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
6942: LD_VAR 0 11
6946: PPUSH
6947: LD_VAR 0 12
6951: PPUSH
6952: CALL_OW 351
6956: PUSH
6957: LD_VAR 0 11
6961: PPUSH
6962: LD_VAR 0 12
6966: PPUSH
6967: CALL_OW 554
6971: AND
6972: IFFALSE 7012
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
6974: LD_ADDR_VAR 0 13
6978: PUSH
6979: LD_VAR 0 13
6983: PPUSH
6984: LD_VAR 0 13
6988: PUSH
6989: LD_INT 1
6991: PLUS
6992: PPUSH
6993: LD_VAR 0 11
6997: PUSH
6998: LD_VAR 0 12
7002: PUSH
7003: EMPTY
7004: LIST
7005: LIST
7006: PPUSH
7007: CALL_OW 2
7011: ST_TO_ADDR
// end ;
7012: GO 6920
7014: POP
7015: POP
7016: GO 6900
7018: POP
7019: POP
// if not list then
7020: LD_VAR 0 13
7024: NOT
7025: IFFALSE 7029
// exit ;
7027: GO 7100
// for i in list do
7029: LD_ADDR_VAR 0 6
7033: PUSH
7034: LD_VAR 0 13
7038: PUSH
7039: FOR_IN
7040: IFFALSE 7098
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
7042: LD_VAR 0 1
7046: PPUSH
7047: LD_STRING M
7049: PUSH
7050: LD_VAR 0 6
7054: PUSH
7055: LD_INT 1
7057: ARRAY
7058: PUSH
7059: LD_VAR 0 6
7063: PUSH
7064: LD_INT 2
7066: ARRAY
7067: PUSH
7068: LD_INT 0
7070: PUSH
7071: LD_INT 0
7073: PUSH
7074: LD_INT 0
7076: PUSH
7077: LD_INT 0
7079: PUSH
7080: EMPTY
7081: LIST
7082: LIST
7083: LIST
7084: LIST
7085: LIST
7086: LIST
7087: LIST
7088: PUSH
7089: EMPTY
7090: LIST
7091: PPUSH
7092: CALL_OW 447
7096: GO 7039
7098: POP
7099: POP
// end ; end_of_file
7100: LD_VAR 0 5
7104: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
7105: GO 7107
7107: DISABLE
// begin ru_radar := 98 ;
7108: LD_ADDR_EXP 26
7112: PUSH
7113: LD_INT 98
7115: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
7116: LD_ADDR_EXP 27
7120: PUSH
7121: LD_INT 89
7123: ST_TO_ADDR
// us_hack := 99 ;
7124: LD_ADDR_EXP 28
7128: PUSH
7129: LD_INT 99
7131: ST_TO_ADDR
// us_artillery := 97 ;
7132: LD_ADDR_EXP 29
7136: PUSH
7137: LD_INT 97
7139: ST_TO_ADDR
// ar_bio_bomb := 91 ;
7140: LD_ADDR_EXP 30
7144: PUSH
7145: LD_INT 91
7147: ST_TO_ADDR
// end ;
7148: END
