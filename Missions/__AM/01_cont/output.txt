// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 32 0 0
// InitAmerican ;
  15: CALL 866 0 0
// InitRussian ;
  19: CALL 1137 0 0
// DebugMode ;
  23: CALL 160 0 0
// Action ;
  27: CALL 2932 0 0
// end ;
  31: END
// export debug ; export mission_prefix ; export active_russian_dialog , bobby_in_squad , powell_contact , macmilan_use_radio , cyrus_in_squad , active_road_patrol , macmilan_in_trap , meta_action , end_mission , bobby_saved , cyrus_saved , send_troops_to_forest , active_powell_dialog ; function Init ; begin
  32: LD_INT 0
  34: PPUSH
// mission_prefix := 01_ ;
  35: LD_ADDR_EXP 2
  39: PUSH
  40: LD_STRING 01_
  42: ST_TO_ADDR
// debug := false ;
  43: LD_ADDR_EXP 1
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// active_russian_dialog := false ;
  51: LD_ADDR_EXP 3
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// bobby_in_squad := false ;
  59: LD_ADDR_EXP 4
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// cyrus_in_squad := false ;
  67: LD_ADDR_EXP 7
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// powell_contact := false ;
  75: LD_ADDR_EXP 5
  79: PUSH
  80: LD_INT 0
  82: ST_TO_ADDR
// macmilan_use_radio := false ;
  83: LD_ADDR_EXP 6
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// active_road_patrol := false ;
  91: LD_ADDR_EXP 8
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// macmilan_in_trap := false ;
  99: LD_ADDR_EXP 9
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// meta_action := false ;
 107: LD_ADDR_EXP 10
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// end_mission := false ;
 115: LD_ADDR_EXP 11
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// bobby_saved := false ;
 123: LD_ADDR_EXP 12
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// cyrus_saved := false ;
 131: LD_ADDR_EXP 13
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// send_troops_to_forest := false ;
 139: LD_ADDR_EXP 14
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// active_powell_dialog := false ;
 147: LD_ADDR_EXP 15
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// end ;
 155: LD_VAR 0 1
 159: RET
// function DebugMode ; var i ; begin
 160: LD_INT 0
 162: PPUSH
 163: PPUSH
// if not debug then
 164: LD_EXP 1
 168: NOT
 169: IFFALSE 173
// exit ;
 171: GO 192
// Difficulty := 4 ;
 173: LD_ADDR_OWVAR 67
 177: PUSH
 178: LD_INT 4
 180: ST_TO_ADDR
// TurnFogOff ( ) ;
 181: CALL_OW 537
// FogOff ( 1 ) ;
 185: LD_INT 1
 187: PPUSH
 188: CALL_OW 344
// end ; end_of_file
 192: LD_VAR 0 1
 196: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 197: LD_INT 0
 199: PPUSH
 200: PPUSH
 201: PPUSH
// uc_side := GetSide ( b ) ;
 202: LD_ADDR_OWVAR 20
 206: PUSH
 207: LD_VAR 0 2
 211: PPUSH
 212: CALL_OW 255
 216: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 217: LD_ADDR_OWVAR 21
 221: PUSH
 222: LD_VAR 0 2
 226: PPUSH
 227: CALL_OW 248
 231: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 232: LD_INT 0
 234: PPUSH
 235: LD_INT 1
 237: PPUSH
 238: LD_VAR 0 1
 242: PPUSH
 243: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
 247: LD_ADDR_VAR 0 5
 251: PUSH
 252: LD_VAR 0 2
 256: PPUSH
 257: CALL_OW 254
 261: PUSH
 262: LD_INT 3
 264: MINUS
 265: ST_TO_ADDR
// if dir < 0 then
 266: LD_VAR 0 5
 270: PUSH
 271: LD_INT 0
 273: LESS
 274: IFFALSE 290
// dir := 6 + dir ;
 276: LD_ADDR_VAR 0 5
 280: PUSH
 281: LD_INT 6
 283: PUSH
 284: LD_VAR 0 5
 288: PLUS
 289: ST_TO_ADDR
// un := CreateHuman ;
 290: LD_ADDR_VAR 0 4
 294: PUSH
 295: CALL_OW 44
 299: ST_TO_ADDR
// SetDir ( un , dir ) ;
 300: LD_VAR 0 4
 304: PPUSH
 305: LD_VAR 0 5
 309: PPUSH
 310: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 314: LD_VAR 0 4
 318: PPUSH
 319: LD_VAR 0 2
 323: PPUSH
 324: CALL_OW 52
// end ;
 328: LD_VAR 0 3
 332: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 333: LD_INT 0
 335: PPUSH
// uc_side := side ;
 336: LD_ADDR_OWVAR 20
 340: PUSH
 341: LD_VAR 0 1
 345: ST_TO_ADDR
// uc_nation := nation ;
 346: LD_ADDR_OWVAR 21
 350: PUSH
 351: LD_VAR 0 2
 355: ST_TO_ADDR
// vc_chassis := chassis ;
 356: LD_ADDR_OWVAR 37
 360: PUSH
 361: LD_VAR 0 3
 365: ST_TO_ADDR
// vc_engine := engine ;
 366: LD_ADDR_OWVAR 39
 370: PUSH
 371: LD_VAR 0 4
 375: ST_TO_ADDR
// vc_control := control ;
 376: LD_ADDR_OWVAR 38
 380: PUSH
 381: LD_VAR 0 5
 385: ST_TO_ADDR
// vc_weapon := weapon ;
 386: LD_ADDR_OWVAR 40
 390: PUSH
 391: LD_VAR 0 6
 395: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 396: LD_ADDR_OWVAR 41
 400: PUSH
 401: LD_VAR 0 7
 405: ST_TO_ADDR
// result := CreateVehicle ;
 406: LD_ADDR_VAR 0 8
 410: PUSH
 411: CALL_OW 45
 415: ST_TO_ADDR
// end ;
 416: LD_VAR 0 8
 420: RET
// export function ComPatrol ( unit , mode , pause , coords ) ; var i ; begin
 421: LD_INT 0
 423: PPUSH
 424: PPUSH
// while ( active_road_patrol ) do
 425: LD_EXP 8
 429: IFFALSE 783
// begin Wait ( 0 0$01 ) ;
 431: LD_INT 35
 433: PPUSH
 434: CALL_OW 67
// if not unit then
 438: LD_VAR 0 1
 442: NOT
 443: IFFALSE 447
// exit ;
 445: GO 783
// if mode = road then
 447: LD_VAR 0 2
 451: PUSH
 452: LD_STRING road
 454: EQUAL
 455: IFFALSE 511
// if GetFuel ( unit ) < 50 and not See ( 1 , unit ) and not HasTask ( unit ) then
 457: LD_VAR 0 1
 461: PPUSH
 462: CALL_OW 261
 466: PUSH
 467: LD_INT 50
 469: LESS
 470: PUSH
 471: LD_INT 1
 473: PPUSH
 474: LD_VAR 0 1
 478: PPUSH
 479: CALL_OW 292
 483: NOT
 484: AND
 485: PUSH
 486: LD_VAR 0 1
 490: PPUSH
 491: CALL_OW 314
 495: NOT
 496: AND
 497: IFFALSE 511
// SetFuel ( unit , 100 ) ;
 499: LD_VAR 0 1
 503: PPUSH
 504: LD_INT 100
 506: PPUSH
 507: CALL_OW 240
// if mode = forest then
 511: LD_VAR 0 2
 515: PUSH
 516: LD_STRING forest
 518: EQUAL
 519: IFFALSE 599
// if GetLives ( unit ) < 600 then
 521: LD_VAR 0 1
 525: PPUSH
 526: CALL_OW 256
 530: PUSH
 531: LD_INT 600
 533: LESS
 534: IFFALSE 599
// begin ComMoveXY ( unit , 42 , 3 ) ;
 536: LD_VAR 0 1
 540: PPUSH
 541: LD_INT 42
 543: PPUSH
 544: LD_INT 3
 546: PPUSH
 547: CALL_OW 111
// SetRememberedX ( unit , GetX ( unit ) ) ;
 551: LD_VAR 0 1
 555: PPUSH
 556: LD_VAR 0 1
 560: PPUSH
 561: CALL_OW 250
 565: PPUSH
 566: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
 570: LD_VAR 0 1
 574: PPUSH
 575: LD_VAR 0 1
 579: PPUSH
 580: CALL_OW 251
 584: PPUSH
 585: CALL_OW 232
// send_troops_to_forest := true ;
 589: LD_ADDR_EXP 14
 593: PUSH
 594: LD_INT 1
 596: ST_TO_ADDR
// break ;
 597: GO 783
// end ; if not HasTask ( unit ) then
 599: LD_VAR 0 1
 603: PPUSH
 604: CALL_OW 314
 608: NOT
 609: IFFALSE 781
// begin for i = 1 to coords do
 611: LD_ADDR_VAR 0 6
 615: PUSH
 616: DOUBLE
 617: LD_INT 1
 619: DEC
 620: ST_TO_ADDR
 621: LD_VAR 0 4
 625: PUSH
 626: FOR_TO
 627: IFFALSE 694
// begin AddComAgressiveMove ( unit , coords [ i ] , coords [ i + 1 ] ) ;
 629: LD_VAR 0 1
 633: PPUSH
 634: LD_VAR 0 4
 638: PUSH
 639: LD_VAR 0 6
 643: ARRAY
 644: PPUSH
 645: LD_VAR 0 4
 649: PUSH
 650: LD_VAR 0 6
 654: PUSH
 655: LD_INT 1
 657: PLUS
 658: ARRAY
 659: PPUSH
 660: CALL_OW 174
// AddComWait ( unit , pause ) ;
 664: LD_VAR 0 1
 668: PPUSH
 669: LD_VAR 0 3
 673: PPUSH
 674: CALL_OW 202
// i := i + 1 ;
 678: LD_ADDR_VAR 0 6
 682: PUSH
 683: LD_VAR 0 6
 687: PUSH
 688: LD_INT 1
 690: PLUS
 691: ST_TO_ADDR
// end ;
 692: GO 626
 694: POP
 695: POP
// for i = coords downto 1 do
 696: LD_ADDR_VAR 0 6
 700: PUSH
 701: DOUBLE
 702: LD_VAR 0 4
 706: INC
 707: ST_TO_ADDR
 708: LD_INT 1
 710: PUSH
 711: FOR_DOWNTO
 712: IFFALSE 779
// begin AddComAgressiveMove ( unit , coords [ i - 1 ] , coords [ i ] ) ;
 714: LD_VAR 0 1
 718: PPUSH
 719: LD_VAR 0 4
 723: PUSH
 724: LD_VAR 0 6
 728: PUSH
 729: LD_INT 1
 731: MINUS
 732: ARRAY
 733: PPUSH
 734: LD_VAR 0 4
 738: PUSH
 739: LD_VAR 0 6
 743: ARRAY
 744: PPUSH
 745: CALL_OW 174
// AddComWait ( unit , pause ) ;
 749: LD_VAR 0 1
 753: PPUSH
 754: LD_VAR 0 3
 758: PPUSH
 759: CALL_OW 202
// i := i - 1 ;
 763: LD_ADDR_VAR 0 6
 767: PUSH
 768: LD_VAR 0 6
 772: PUSH
 773: LD_INT 1
 775: MINUS
 776: ST_TO_ADDR
// end ;
 777: GO 711
 779: POP
 780: POP
// end ; end ;
 781: GO 425
// end ;
 783: LD_VAR 0 5
 787: RET
// export function DebugSay ( dialog ) ; var speaker ; begin
 788: LD_INT 0
 790: PPUSH
 791: PPUSH
// uc_nation := 1 ;
 792: LD_ADDR_OWVAR 21
 796: PUSH
 797: LD_INT 1
 799: ST_TO_ADDR
// uc_side := 0 ;
 800: LD_ADDR_OWVAR 20
 804: PUSH
 805: LD_INT 0
 807: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
 808: LD_INT 0
 810: PPUSH
 811: LD_INT 1
 813: PPUSH
 814: LD_INT 0
 816: PPUSH
 817: CALL_OW 380
// hc_name := speaker ;
 821: LD_ADDR_OWVAR 26
 825: PUSH
 826: LD_STRING speaker
 828: ST_TO_ADDR
// hc_gallery :=  ;
 829: LD_ADDR_OWVAR 33
 833: PUSH
 834: LD_STRING 
 836: ST_TO_ADDR
// speaker := CreateHuman ;
 837: LD_ADDR_VAR 0 3
 841: PUSH
 842: CALL_OW 44
 846: ST_TO_ADDR
// Say ( speaker , dialog ) ;
 847: LD_VAR 0 3
 851: PPUSH
 852: LD_VAR 0 1
 856: PPUSH
 857: CALL_OW 88
// end ; end_of_file
 861: LD_VAR 0 2
 865: RET
// export JMM , Bobby , Cyrus , Powell , fakePokryshkin ; export function InitAmerican ; begin
 866: LD_INT 0
 868: PPUSH
// uc_nation := 1 ;
 869: LD_ADDR_OWVAR 21
 873: PUSH
 874: LD_INT 1
 876: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , false ,  ) ;
 877: LD_ADDR_EXP 16
 881: PUSH
 882: LD_STRING JMM
 884: PPUSH
 885: LD_INT 0
 887: PPUSH
 888: LD_STRING 
 890: PPUSH
 891: CALL 27714 0 3
 895: ST_TO_ADDR
// uc_side := 4 ;
 896: LD_ADDR_OWVAR 20
 900: PUSH
 901: LD_INT 4
 903: ST_TO_ADDR
// hc_gallery := us ;
 904: LD_ADDR_OWVAR 33
 908: PUSH
 909: LD_STRING us
 911: ST_TO_ADDR
// hc_face_number := 7 ;
 912: LD_ADDR_OWVAR 34
 916: PUSH
 917: LD_INT 7
 919: ST_TO_ADDR
// hc_sex := sex_male ;
 920: LD_ADDR_OWVAR 27
 924: PUSH
 925: LD_INT 1
 927: ST_TO_ADDR
// hc_name := . ;
 928: LD_ADDR_OWVAR 26
 932: PUSH
 933: LD_STRING .
 935: ST_TO_ADDR
// hc_class := 1 ;
 936: LD_ADDR_OWVAR 28
 940: PUSH
 941: LD_INT 1
 943: ST_TO_ADDR
// Powell := CreateHuman ;
 944: LD_ADDR_EXP 19
 948: PUSH
 949: CALL_OW 44
 953: ST_TO_ADDR
// hc_name := . ;
 954: LD_ADDR_OWVAR 26
 958: PUSH
 959: LD_STRING .
 961: ST_TO_ADDR
// hc_gallery := ru ;
 962: LD_ADDR_OWVAR 33
 966: PUSH
 967: LD_STRING ru
 969: ST_TO_ADDR
// hc_face_number := 4 ;
 970: LD_ADDR_OWVAR 34
 974: PUSH
 975: LD_INT 4
 977: ST_TO_ADDR
// hc_sex := sex_male ;
 978: LD_ADDR_OWVAR 27
 982: PUSH
 983: LD_INT 1
 985: ST_TO_ADDR
// fakePokryshkin := CreateHuman ;
 986: LD_ADDR_EXP 20
 990: PUSH
 991: CALL_OW 44
 995: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , false ,  ) ;
 996: LD_ADDR_EXP 17
1000: PUSH
1001: LD_STRING Bobby
1003: PPUSH
1004: LD_INT 0
1006: PPUSH
1007: LD_STRING 
1009: PPUSH
1010: CALL 27714 0 3
1014: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , false ,  ) ;
1015: LD_ADDR_EXP 18
1019: PUSH
1020: LD_STRING Cyrus
1022: PPUSH
1023: LD_INT 0
1025: PPUSH
1026: LD_STRING 
1028: PPUSH
1029: CALL 27714 0 3
1033: ST_TO_ADDR
// case Difficulty of 1 :
1034: LD_OWVAR 67
1038: PUSH
1039: LD_INT 1
1041: DOUBLE
1042: EQUAL
1043: IFTRUE 1047
1045: GO 1062
1047: POP
// SetLives ( Bobby , 500 ) ; 2 :
1048: LD_EXP 17
1052: PPUSH
1053: LD_INT 500
1055: PPUSH
1056: CALL_OW 234
1060: GO 1132
1062: LD_INT 2
1064: DOUBLE
1065: EQUAL
1066: IFTRUE 1070
1068: GO 1085
1070: POP
// SetLives ( Bobby , 460 ) ; 3 :
1071: LD_EXP 17
1075: PPUSH
1076: LD_INT 460
1078: PPUSH
1079: CALL_OW 234
1083: GO 1132
1085: LD_INT 3
1087: DOUBLE
1088: EQUAL
1089: IFTRUE 1093
1091: GO 1108
1093: POP
// SetLives ( Bobby , 420 ) ; 4 :
1094: LD_EXP 17
1098: PPUSH
1099: LD_INT 420
1101: PPUSH
1102: CALL_OW 234
1106: GO 1132
1108: LD_INT 4
1110: DOUBLE
1111: EQUAL
1112: IFTRUE 1116
1114: GO 1131
1116: POP
// SetLives ( Bobby , 400 ) ; end ;
1117: LD_EXP 17
1121: PPUSH
1122: LD_INT 400
1124: PPUSH
1125: CALL_OW 234
1129: GO 1132
1131: POP
// end ; end_of_file
1132: LD_VAR 0 1
1136: RET
// export russian_troops_1 , russian_troops_2 , russian_patrol_tanks , russian_meta_guards , russian_patrol_forest , russian_patrol_hidden ; export Pokryshkin ; export function InitRussian ; var skill , i , un ; begin
1137: LD_INT 0
1139: PPUSH
1140: PPUSH
1141: PPUSH
1142: PPUSH
// skill := [ 1 , 2 , 3 , 4 ] [ Difficulty ] ;
1143: LD_ADDR_VAR 0 2
1147: PUSH
1148: LD_INT 1
1150: PUSH
1151: LD_INT 2
1153: PUSH
1154: LD_INT 3
1156: PUSH
1157: LD_INT 4
1159: PUSH
1160: EMPTY
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: PUSH
1166: LD_OWVAR 67
1170: ARRAY
1171: ST_TO_ADDR
// uc_side := 3 ;
1172: LD_ADDR_OWVAR 20
1176: PUSH
1177: LD_INT 3
1179: ST_TO_ADDR
// uc_nation := 3 ;
1180: LD_ADDR_OWVAR 21
1184: PUSH
1185: LD_INT 3
1187: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
1188: LD_ADDR_EXP 27
1192: PUSH
1193: LD_STRING Pokryshkin
1195: PPUSH
1196: LD_INT 0
1198: PPUSH
1199: LD_STRING 
1201: PPUSH
1202: CALL 27714 0 3
1206: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 44 , 5 , false ) ;
1207: LD_EXP 27
1211: PPUSH
1212: LD_INT 44
1214: PPUSH
1215: LD_INT 5
1217: PPUSH
1218: LD_INT 0
1220: PPUSH
1221: CALL_OW 48
// hc_importance := 0 ;
1225: LD_ADDR_OWVAR 32
1229: PUSH
1230: LD_INT 0
1232: ST_TO_ADDR
// hc_gallery :=  ;
1233: LD_ADDR_OWVAR 33
1237: PUSH
1238: LD_STRING 
1240: ST_TO_ADDR
// hc_name :=  ;
1241: LD_ADDR_OWVAR 26
1245: PUSH
1246: LD_STRING 
1248: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1249: LD_INT 1
1251: PPUSH
1252: LD_INT 1
1254: PPUSH
1255: LD_VAR 0 2
1259: PPUSH
1260: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1264: LD_ADDR_OWVAR 33
1268: PUSH
1269: LD_STRING SecondCharsGal
1271: ST_TO_ADDR
// hc_face_number := 69 ;
1272: LD_ADDR_OWVAR 34
1276: PUSH
1277: LD_INT 69
1279: ST_TO_ADDR
// hc_sex := sex_male ;
1280: LD_ADDR_OWVAR 27
1284: PUSH
1285: LD_INT 1
1287: ST_TO_ADDR
// hc_name := Ilja Ivanov ;
1288: LD_ADDR_OWVAR 26
1292: PUSH
1293: LD_STRING Ilja Ivanov
1295: ST_TO_ADDR
// un := CreateHuman ;
1296: LD_ADDR_VAR 0 4
1300: PUSH
1301: CALL_OW 44
1305: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 1 , un ) ;
1306: LD_ADDR_EXP 21
1310: PUSH
1311: LD_EXP 21
1315: PPUSH
1316: LD_INT 1
1318: PPUSH
1319: LD_VAR 0 4
1323: PPUSH
1324: CALL_OW 2
1328: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1329: LD_VAR 0 4
1333: PPUSH
1334: LD_INT 3
1336: PPUSH
1337: LD_INT 0
1339: PPUSH
1340: CALL_OW 49
// PrepareHuman ( sex_male , 1 , skill ) ;
1344: LD_INT 1
1346: PPUSH
1347: LD_INT 1
1349: PPUSH
1350: LD_VAR 0 2
1354: PPUSH
1355: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1359: LD_ADDR_OWVAR 33
1363: PUSH
1364: LD_STRING SecondCharsGal
1366: ST_TO_ADDR
// hc_face_number := 70 ;
1367: LD_ADDR_OWVAR 34
1371: PUSH
1372: LD_INT 70
1374: ST_TO_ADDR
// hc_name := Pavel Starczy ;
1375: LD_ADDR_OWVAR 26
1379: PUSH
1380: LD_STRING Pavel Starczy
1382: ST_TO_ADDR
// un := CreateHuman ;
1383: LD_ADDR_VAR 0 4
1387: PUSH
1388: CALL_OW 44
1392: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 2 , un ) ;
1393: LD_ADDR_EXP 21
1397: PUSH
1398: LD_EXP 21
1402: PPUSH
1403: LD_INT 2
1405: PPUSH
1406: LD_VAR 0 4
1410: PPUSH
1411: CALL_OW 2
1415: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1416: LD_VAR 0 4
1420: PPUSH
1421: LD_INT 3
1423: PPUSH
1424: LD_INT 0
1426: PPUSH
1427: CALL_OW 49
// InitHc ;
1431: CALL_OW 19
// for i = 1 to 7 do
1435: LD_ADDR_VAR 0 3
1439: PUSH
1440: DOUBLE
1441: LD_INT 1
1443: DEC
1444: ST_TO_ADDR
1445: LD_INT 7
1447: PUSH
1448: FOR_TO
1449: IFFALSE 1600
// begin PrepareHuman ( false , 1 , skill ) ;
1451: LD_INT 0
1453: PPUSH
1454: LD_INT 1
1456: PPUSH
1457: LD_VAR 0 2
1461: PPUSH
1462: CALL_OW 380
// un := CreateHuman ;
1466: LD_ADDR_VAR 0 4
1470: PUSH
1471: CALL_OW 44
1475: ST_TO_ADDR
// if i mod 2 = 0 then
1476: LD_VAR 0 3
1480: PUSH
1481: LD_INT 2
1483: MOD
1484: PUSH
1485: LD_INT 0
1487: EQUAL
1488: IFFALSE 1545
// begin russian_troops_1 := Insert ( russian_troops_1 , russian_troops_1 + 1 , un ) ;
1490: LD_ADDR_EXP 21
1494: PUSH
1495: LD_EXP 21
1499: PPUSH
1500: LD_EXP 21
1504: PUSH
1505: LD_INT 1
1507: PLUS
1508: PPUSH
1509: LD_VAR 0 4
1513: PPUSH
1514: CALL_OW 2
1518: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1519: LD_VAR 0 4
1523: PPUSH
1524: LD_INT 3
1526: PPUSH
1527: LD_INT 0
1529: PPUSH
1530: CALL_OW 49
// ComHold ( un ) ;
1534: LD_VAR 0 4
1538: PPUSH
1539: CALL_OW 140
// end else
1543: GO 1598
// begin russian_troops_2 := Insert ( russian_troops_2 , russian_troops_2 + 1 , un ) ;
1545: LD_ADDR_EXP 22
1549: PUSH
1550: LD_EXP 22
1554: PPUSH
1555: LD_EXP 22
1559: PUSH
1560: LD_INT 1
1562: PLUS
1563: PPUSH
1564: LD_VAR 0 4
1568: PPUSH
1569: CALL_OW 2
1573: ST_TO_ADDR
// PlaceUnitArea ( un , guard_south , false ) ;
1574: LD_VAR 0 4
1578: PPUSH
1579: LD_INT 4
1581: PPUSH
1582: LD_INT 0
1584: PPUSH
1585: CALL_OW 49
// ComHold ( un ) ;
1589: LD_VAR 0 4
1593: PPUSH
1594: CALL_OW 140
// end ; end ;
1598: GO 1448
1600: POP
1601: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) do
1602: LD_ADDR_VAR 0 3
1606: PUSH
1607: LD_INT 22
1609: PUSH
1610: LD_INT 3
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: PUSH
1617: LD_INT 30
1619: PUSH
1620: LD_INT 31
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: PUSH
1627: EMPTY
1628: LIST
1629: LIST
1630: PPUSH
1631: CALL_OW 69
1635: PUSH
1636: FOR_IN
1637: IFFALSE 1655
// PrepareSolBun ( skill , i ) ;
1639: LD_VAR 0 2
1643: PPUSH
1644: LD_VAR 0 3
1648: PPUSH
1649: CALL 197 0 2
1653: GO 1636
1655: POP
1656: POP
// for i = 1 to 3 do
1657: LD_ADDR_VAR 0 3
1661: PUSH
1662: DOUBLE
1663: LD_INT 1
1665: DEC
1666: ST_TO_ADDR
1667: LD_INT 3
1669: PUSH
1670: FOR_TO
1671: IFFALSE 1807
// begin un := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1673: LD_ADDR_VAR 0 4
1677: PUSH
1678: LD_INT 3
1680: PPUSH
1681: LD_INT 3
1683: PPUSH
1684: LD_INT 22
1686: PPUSH
1687: LD_INT 1
1689: PPUSH
1690: LD_INT 1
1692: PPUSH
1693: LD_INT 42
1695: PPUSH
1696: LD_INT 100
1698: PPUSH
1699: CALL 333 0 7
1703: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
1704: LD_INT 0
1706: PPUSH
1707: LD_INT 3
1709: PPUSH
1710: LD_VAR 0 2
1714: PPUSH
1715: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1719: CALL_OW 44
1723: PPUSH
1724: LD_VAR 0 4
1728: PPUSH
1729: CALL_OW 52
// PlaceUnitXY ( un , [ 131 , 23 , 167 ] [ i ] , [ 87 , 14 , 95 ] [ i ] , false ) ;
1733: LD_VAR 0 4
1737: PPUSH
1738: LD_INT 131
1740: PUSH
1741: LD_INT 23
1743: PUSH
1744: LD_INT 167
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: LIST
1751: PUSH
1752: LD_VAR 0 3
1756: ARRAY
1757: PPUSH
1758: LD_INT 87
1760: PUSH
1761: LD_INT 14
1763: PUSH
1764: LD_INT 95
1766: PUSH
1767: EMPTY
1768: LIST
1769: LIST
1770: LIST
1771: PUSH
1772: LD_VAR 0 3
1776: ARRAY
1777: PPUSH
1778: LD_INT 0
1780: PPUSH
1781: CALL_OW 48
// russian_patrol_tanks := Join ( russian_patrol_tanks , un ) ;
1785: LD_ADDR_EXP 23
1789: PUSH
1790: LD_EXP 23
1794: PPUSH
1795: LD_VAR 0 4
1799: PPUSH
1800: CALL 65416 0 2
1804: ST_TO_ADDR
// end ;
1805: GO 1670
1807: POP
1808: POP
// for i = 1 to 2 do
1809: LD_ADDR_VAR 0 3
1813: PUSH
1814: DOUBLE
1815: LD_INT 1
1817: DEC
1818: ST_TO_ADDR
1819: LD_INT 2
1821: PUSH
1822: FOR_TO
1823: IFFALSE 1914
// begin PrepareHuman ( [ sex_female , sex_male , sex_male ] [ i ] , 1 , 1 ) ;
1825: LD_INT 2
1827: PUSH
1828: LD_INT 1
1830: PUSH
1831: LD_INT 1
1833: PUSH
1834: EMPTY
1835: LIST
1836: LIST
1837: LIST
1838: PUSH
1839: LD_VAR 0 3
1843: ARRAY
1844: PPUSH
1845: LD_INT 1
1847: PPUSH
1848: LD_INT 1
1850: PPUSH
1851: CALL_OW 380
// un := CreateHuman ;
1855: LD_ADDR_VAR 0 4
1859: PUSH
1860: CALL_OW 44
1864: ST_TO_ADDR
// russian_meta_guards := Insert ( russian_meta_guards , 1 , un ) ;
1865: LD_ADDR_EXP 24
1869: PUSH
1870: LD_EXP 24
1874: PPUSH
1875: LD_INT 1
1877: PPUSH
1878: LD_VAR 0 4
1882: PPUSH
1883: CALL_OW 2
1887: ST_TO_ADDR
// PlaceUnitArea ( un , exitArea , false ) ;
1888: LD_VAR 0 4
1892: PPUSH
1893: LD_INT 10
1895: PPUSH
1896: LD_INT 0
1898: PPUSH
1899: CALL_OW 49
// ComHold ( un ) ;
1903: LD_VAR 0 4
1907: PPUSH
1908: CALL_OW 140
// end ;
1912: GO 1822
1914: POP
1915: POP
// if Difficulty < 3 then
1916: LD_OWVAR 67
1920: PUSH
1921: LD_INT 3
1923: LESS
1924: IFFALSE 1928
// exit ;
1926: GO 1999
// PrepareHuman ( false , 1 , skill ) ;
1928: LD_INT 0
1930: PPUSH
1931: LD_INT 1
1933: PPUSH
1934: LD_VAR 0 2
1938: PPUSH
1939: CALL_OW 380
// russian_patrol_forest := CreateHuman ;
1943: LD_ADDR_EXP 25
1947: PUSH
1948: CALL_OW 44
1952: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_forest , 82 , 2 , false ) ;
1953: LD_EXP 25
1957: PPUSH
1958: LD_INT 82
1960: PPUSH
1961: LD_INT 2
1963: PPUSH
1964: LD_INT 0
1966: PPUSH
1967: CALL_OW 48
// russian_patrol_hidden := CreateHuman ;
1971: LD_ADDR_EXP 26
1975: PUSH
1976: CALL_OW 44
1980: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_hidden , 136 , 30 , false ) ;
1981: LD_EXP 26
1985: PPUSH
1986: LD_INT 136
1988: PPUSH
1989: LD_INT 30
1991: PPUSH
1992: LD_INT 0
1994: PPUSH
1995: CALL_OW 48
// end ;
1999: LD_VAR 0 1
2003: RET
// every 0 0$01 trigger active_road_patrol do
2004: LD_EXP 8
2008: IFFALSE 2074
2010: GO 2012
2012: DISABLE
// ComPatrol ( russian_patrol_tanks [ 1 ] , road , 0 0$02 , [ 131 , 87 , 107 , 75 , 107 , 66 , 114 , 61 , 107 , 34 ] ) ;
2013: LD_EXP 23
2017: PUSH
2018: LD_INT 1
2020: ARRAY
2021: PPUSH
2022: LD_STRING road
2024: PPUSH
2025: LD_INT 70
2027: PPUSH
2028: LD_INT 131
2030: PUSH
2031: LD_INT 87
2033: PUSH
2034: LD_INT 107
2036: PUSH
2037: LD_INT 75
2039: PUSH
2040: LD_INT 107
2042: PUSH
2043: LD_INT 66
2045: PUSH
2046: LD_INT 114
2048: PUSH
2049: LD_INT 61
2051: PUSH
2052: LD_INT 107
2054: PUSH
2055: LD_INT 34
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: PPUSH
2070: CALL 421 0 4
2074: END
// every 0 0$01 trigger active_road_patrol do
2075: LD_EXP 8
2079: IFFALSE 2137
2081: GO 2083
2083: DISABLE
// ComPatrol ( russian_patrol_tanks [ 2 ] , road , 0 0$02 , [ 21 , 12 , 37 , 30 , 65 , 62 , 107 , 76 ] ) ;
2084: LD_EXP 23
2088: PUSH
2089: LD_INT 2
2091: ARRAY
2092: PPUSH
2093: LD_STRING road
2095: PPUSH
2096: LD_INT 70
2098: PPUSH
2099: LD_INT 21
2101: PUSH
2102: LD_INT 12
2104: PUSH
2105: LD_INT 37
2107: PUSH
2108: LD_INT 30
2110: PUSH
2111: LD_INT 65
2113: PUSH
2114: LD_INT 62
2116: PUSH
2117: LD_INT 107
2119: PUSH
2120: LD_INT 76
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: PPUSH
2133: CALL 421 0 4
2137: END
// every 0 0$01 trigger active_road_patrol do
2138: LD_EXP 8
2142: IFFALSE 2200
2144: GO 2146
2146: DISABLE
// ComPatrol ( russian_patrol_tanks [ 3 ] , road , 0 0$02 , [ 167 , 95 , 147 , 81 , 144 , 66 , 149 , 55 ] ) ;
2147: LD_EXP 23
2151: PUSH
2152: LD_INT 3
2154: ARRAY
2155: PPUSH
2156: LD_STRING road
2158: PPUSH
2159: LD_INT 70
2161: PPUSH
2162: LD_INT 167
2164: PUSH
2165: LD_INT 95
2167: PUSH
2168: LD_INT 147
2170: PUSH
2171: LD_INT 81
2173: PUSH
2174: LD_INT 144
2176: PUSH
2177: LD_INT 66
2179: PUSH
2180: LD_INT 149
2182: PUSH
2183: LD_INT 55
2185: PUSH
2186: EMPTY
2187: LIST
2188: LIST
2189: LIST
2190: LIST
2191: LIST
2192: LIST
2193: LIST
2194: LIST
2195: PPUSH
2196: CALL 421 0 4
2200: END
// every 0 0$01 trigger IsOk ( russian_patrol_forest ) do
2201: LD_EXP 25
2205: PPUSH
2206: CALL_OW 302
2210: IFFALSE 2272
2212: GO 2214
2214: DISABLE
// ComPatrol ( russian_patrol_forest , forest , 0 0$01 , [ 52 , 15 , 81 , 9 , 120 , 52 , 135 , 80 , 122 , 95 ] ) ;
2215: LD_EXP 25
2219: PPUSH
2220: LD_STRING forest
2222: PPUSH
2223: LD_INT 35
2225: PPUSH
2226: LD_INT 52
2228: PUSH
2229: LD_INT 15
2231: PUSH
2232: LD_INT 81
2234: PUSH
2235: LD_INT 9
2237: PUSH
2238: LD_INT 120
2240: PUSH
2241: LD_INT 52
2243: PUSH
2244: LD_INT 135
2246: PUSH
2247: LD_INT 80
2249: PUSH
2250: LD_INT 122
2252: PUSH
2253: LD_INT 95
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: LIST
2260: LIST
2261: LIST
2262: LIST
2263: LIST
2264: LIST
2265: LIST
2266: LIST
2267: PPUSH
2268: CALL 421 0 4
2272: END
// every 0 0$01 trigger IsOk ( russian_patrol_hidden ) do
2273: LD_EXP 26
2277: PPUSH
2278: CALL_OW 302
2282: IFFALSE 2336
2284: GO 2286
2286: DISABLE
// ComPatrol ( russian_patrol_hidden , forest , 0 0$02 , [ 137 , 30 , 127 , 23 , 122 , 16 , 114 , 3 ] ) ;
2287: LD_EXP 26
2291: PPUSH
2292: LD_STRING forest
2294: PPUSH
2295: LD_INT 70
2297: PPUSH
2298: LD_INT 137
2300: PUSH
2301: LD_INT 30
2303: PUSH
2304: LD_INT 127
2306: PUSH
2307: LD_INT 23
2309: PUSH
2310: LD_INT 122
2312: PUSH
2313: LD_INT 16
2315: PUSH
2316: LD_INT 114
2318: PUSH
2319: LD_INT 3
2321: PUSH
2322: EMPTY
2323: LIST
2324: LIST
2325: LIST
2326: LIST
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: PPUSH
2332: CALL 421 0 4
2336: END
// every 0 0$01 trigger macmilan_use_radio do
2337: LD_EXP 6
2341: IFFALSE 2402
2343: GO 2345
2345: DISABLE
// begin active_road_patrol := false ;
2346: LD_ADDR_EXP 8
2350: PUSH
2351: LD_INT 0
2353: ST_TO_ADDR
// ComStop ( russian_patrol_tanks ) ;
2354: LD_EXP 23
2358: PPUSH
2359: CALL_OW 141
// AddComAgressiveMove ( russian_patrol_tanks , 72 , 41 ) ;
2363: LD_EXP 23
2367: PPUSH
2368: LD_INT 72
2370: PPUSH
2371: LD_INT 41
2373: PPUSH
2374: CALL_OW 174
// ComExitBuilding ( russian_troops_2 ) ;
2378: LD_EXP 22
2382: PPUSH
2383: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , 72 , 41 ) ;
2387: LD_EXP 22
2391: PPUSH
2392: LD_INT 72
2394: PPUSH
2395: LD_INT 41
2397: PPUSH
2398: CALL_OW 174
// end ;
2402: END
// every 0 0$03 trigger FilterUnitsInArea ( def_south , [ f_side , 1 ] ) do var un ;
2403: LD_INT 9
2405: PPUSH
2406: LD_INT 22
2408: PUSH
2409: LD_INT 1
2411: PUSH
2412: EMPTY
2413: LIST
2414: LIST
2415: PPUSH
2416: CALL_OW 70
2420: IFFALSE 2494
2422: GO 2424
2424: DISABLE
2425: LD_INT 0
2427: PPUSH
// begin enable ;
2428: ENABLE
// un := FilterUnitsInArea ( def_south , [ f_side , 1 ] ) [ 1 ] ;
2429: LD_ADDR_VAR 0 1
2433: PUSH
2434: LD_INT 9
2436: PPUSH
2437: LD_INT 22
2439: PUSH
2440: LD_INT 1
2442: PUSH
2443: EMPTY
2444: LIST
2445: LIST
2446: PPUSH
2447: CALL_OW 70
2451: PUSH
2452: LD_INT 1
2454: ARRAY
2455: ST_TO_ADDR
// ComExitBuilding ( russian_troops_2 ) ;
2456: LD_EXP 22
2460: PPUSH
2461: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , GetX ( un ) , GetY ( un ) ) ;
2465: LD_EXP 22
2469: PPUSH
2470: LD_VAR 0 1
2474: PPUSH
2475: CALL_OW 250
2479: PPUSH
2480: LD_VAR 0 1
2484: PPUSH
2485: CALL_OW 251
2489: PPUSH
2490: CALL_OW 174
// end ;
2494: PPOPN 1
2496: END
// every 0 0$01 trigger ( GetLives ( russian_patrol_tanks [ 1 ] ) < 999 or GetLives ( russian_patrol_tanks [ 2 ] ) < 999 ) and See ( 3 , JMM ) do
2497: LD_EXP 23
2501: PUSH
2502: LD_INT 1
2504: ARRAY
2505: PPUSH
2506: CALL_OW 256
2510: PUSH
2511: LD_INT 999
2513: LESS
2514: PUSH
2515: LD_EXP 23
2519: PUSH
2520: LD_INT 2
2522: ARRAY
2523: PPUSH
2524: CALL_OW 256
2528: PUSH
2529: LD_INT 999
2531: LESS
2532: OR
2533: PUSH
2534: LD_INT 3
2536: PPUSH
2537: LD_EXP 16
2541: PPUSH
2542: CALL_OW 292
2546: AND
2547: IFFALSE 2574
2549: GO 2551
2551: DISABLE
// begin active_road_patrol := false ;
2552: LD_ADDR_EXP 8
2556: PUSH
2557: LD_INT 0
2559: ST_TO_ADDR
// ComAttackUnit ( russian_patrol_tanks , JMM ) ;
2560: LD_EXP 23
2564: PPUSH
2565: LD_EXP 16
2569: PPUSH
2570: CALL_OW 115
// end ;
2574: END
// every 0 0$01 trigger macmilan_in_trap do
2575: LD_EXP 9
2579: IFFALSE 2625
2581: GO 2583
2583: DISABLE
// begin ComExitBuilding ( russian_troops_2 ) ;
2584: LD_EXP 22
2588: PPUSH
2589: CALL_OW 122
// ComAttackUnit ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , JMM ) ;
2593: LD_EXP 21
2597: PUSH
2598: LD_EXP 22
2602: ADD
2603: PUSH
2604: LD_EXP 27
2608: ADD
2609: PUSH
2610: LD_EXP 23
2614: ADD
2615: PPUSH
2616: LD_EXP 16
2620: PPUSH
2621: CALL_OW 115
// end ;
2625: END
// every 0 0$01 trigger meta_action do
2626: LD_EXP 10
2630: IFFALSE 2748
2632: GO 2634
2634: DISABLE
// begin active_road_patrol := false ;
2635: LD_ADDR_EXP 8
2639: PUSH
2640: LD_INT 0
2642: ST_TO_ADDR
// if FilterUnitsInArea ( secretRoad , [ f_side , 1 ] ) then
2643: LD_INT 15
2645: PPUSH
2646: LD_INT 22
2648: PUSH
2649: LD_INT 1
2651: PUSH
2652: EMPTY
2653: LIST
2654: LIST
2655: PPUSH
2656: CALL_OW 70
2660: IFFALSE 2715
// begin ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 , 104 , 10 ) ;
2662: LD_EXP 21
2666: PUSH
2667: LD_EXP 22
2671: ADD
2672: PPUSH
2673: LD_INT 104
2675: PPUSH
2676: LD_INT 10
2678: PPUSH
2679: CALL_OW 114
// ComAgressiveMove ( russian_patrol_tanks , 96 , 14 ) ;
2683: LD_EXP 23
2687: PPUSH
2688: LD_INT 96
2690: PPUSH
2691: LD_INT 14
2693: PPUSH
2694: CALL_OW 114
// ComAgressiveMove ( Pokryshkin , 85 , 4 ) ;
2698: LD_EXP 27
2702: PPUSH
2703: LD_INT 85
2705: PPUSH
2706: LD_INT 4
2708: PPUSH
2709: CALL_OW 114
// end else
2713: GO 2748
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , 93 , 1 ) ;
2715: LD_EXP 21
2719: PUSH
2720: LD_EXP 22
2724: ADD
2725: PUSH
2726: LD_EXP 27
2730: ADD
2731: PUSH
2732: LD_EXP 23
2736: ADD
2737: PPUSH
2738: LD_INT 93
2740: PPUSH
2741: LD_INT 1
2743: PPUSH
2744: CALL_OW 114
// end ;
2748: END
// every 0 0$1 trigger GetLives ( Pokryshkin ) < 1000 do
2749: LD_EXP 27
2753: PPUSH
2754: CALL_OW 256
2758: PUSH
2759: LD_INT 1000
2761: LESS
2762: IFFALSE 2813
2764: GO 2766
2766: DISABLE
// begin enable ;
2767: ENABLE
// if HexInfo ( 18 , 1 ) = Pokryshkin then
2768: LD_INT 18
2770: PPUSH
2771: LD_INT 1
2773: PPUSH
2774: CALL_OW 428
2778: PUSH
2779: LD_EXP 27
2783: EQUAL
2784: IFFALSE 2798
// begin RemoveUnit ( Pokryshkin ) ;
2786: LD_EXP 27
2790: PPUSH
2791: CALL_OW 64
// disable ;
2795: DISABLE
// end else
2796: GO 2813
// ComMoveXY ( Pokryshkin , 18 , 1 ) ;
2798: LD_EXP 27
2802: PPUSH
2803: LD_INT 18
2805: PPUSH
2806: LD_INT 1
2808: PPUSH
2809: CALL_OW 111
// end ;
2813: END
// every 0 0$20 trigger send_troops_to_forest do
2814: LD_EXP 14
2818: IFFALSE 2872
2820: GO 2822
2822: DISABLE
// begin if not IsOk ( russian_patrol_forest ) then
2823: LD_EXP 25
2827: PPUSH
2828: CALL_OW 302
2832: NOT
2833: IFFALSE 2837
// exit ;
2835: GO 2872
// ComAgressiveMove ( russian_troops_1 ^ Pokryshkin , GetRememberedX ( russian_patrol_forest ) , GetRememberedY ( russian_patrol_forest ) ) ;
2837: LD_EXP 21
2841: PUSH
2842: LD_EXP 27
2846: ADD
2847: PPUSH
2848: LD_EXP 25
2852: PPUSH
2853: CALL_OW 252
2857: PPUSH
2858: LD_EXP 25
2862: PPUSH
2863: CALL_OW 253
2867: PPUSH
2868: CALL_OW 114
// end ;
2872: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) = 3 then
2873: LD_VAR 0 1
2877: PPUSH
2878: CALL_OW 255
2882: PUSH
2883: LD_INT 3
2885: EQUAL
2886: IFFALSE 2929
// begin wait ( 11 ) ;
2888: LD_INT 11
2890: PPUSH
2891: CALL_OW 67
// ComEnterUnit ( driver , NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_depot ] ) , driver ) ) ;
2895: LD_VAR 0 1
2899: PPUSH
2900: LD_INT 30
2902: PUSH
2903: LD_INT 0
2905: PUSH
2906: EMPTY
2907: LIST
2908: LIST
2909: PPUSH
2910: CALL_OW 69
2914: PPUSH
2915: LD_VAR 0 1
2919: PPUSH
2920: CALL_OW 74
2924: PPUSH
2925: CALL_OW 120
// end ; end ; end_of_file
2929: PPOPN 4
2931: END
// export function Action ; var i ; begin
2932: LD_INT 0
2934: PPUSH
2935: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
2936: LD_ADDR_VAR 0 2
2940: PUSH
2941: LD_INT 22
2943: PUSH
2944: LD_INT 3
2946: PUSH
2947: EMPTY
2948: LIST
2949: LIST
2950: PUSH
2951: LD_INT 25
2953: PUSH
2954: LD_INT 1
2956: PUSH
2957: EMPTY
2958: LIST
2959: LIST
2960: PUSH
2961: EMPTY
2962: LIST
2963: LIST
2964: PPUSH
2965: CALL_OW 69
2969: PUSH
2970: FOR_IN
2971: IFFALSE 2984
// ComHold ( i ) ;
2973: LD_VAR 0 2
2977: PPUSH
2978: CALL_OW 140
2982: GO 2970
2984: POP
2985: POP
// InGameOn ;
2986: CALL_OW 8
// CenterOnXY ( 79 , 76 ) ;
2990: LD_INT 79
2992: PPUSH
2993: LD_INT 76
2995: PPUSH
2996: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
3000: LD_INT 10
3002: PPUSH
3003: CALL_OW 67
// PlaceUnitXY ( JMM , 80 , 79 , true ) ;
3007: LD_EXP 16
3011: PPUSH
3012: LD_INT 80
3014: PPUSH
3015: LD_INT 79
3017: PPUSH
3018: LD_INT 1
3020: PPUSH
3021: CALL_OW 48
// Wait ( 0 0$03 ) ;
3025: LD_INT 105
3027: PPUSH
3028: CALL_OW 67
// ComMoveXY ( JMM , 80 , 76 ) ;
3032: LD_EXP 16
3036: PPUSH
3037: LD_INT 80
3039: PPUSH
3040: LD_INT 76
3042: PPUSH
3043: CALL_OW 111
// Say ( JMM , D1-JMM-1 ) ;
3047: LD_EXP 16
3051: PPUSH
3052: LD_STRING D1-JMM-1
3054: PPUSH
3055: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
3059: LD_INT 10
3061: PPUSH
3062: CALL_OW 67
// ComMoveXY ( JMM , 76 , 76 ) ;
3066: LD_EXP 16
3070: PPUSH
3071: LD_INT 76
3073: PPUSH
3074: LD_INT 76
3076: PPUSH
3077: CALL_OW 111
// Say ( JMM , D1-JMM-1a ) ;
3081: LD_EXP 16
3085: PPUSH
3086: LD_STRING D1-JMM-1a
3088: PPUSH
3089: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
3093: LD_INT 10
3095: PPUSH
3096: CALL_OW 67
// ComTurnXY ( JMM , 83 , 66 ) ;
3100: LD_EXP 16
3104: PPUSH
3105: LD_INT 83
3107: PPUSH
3108: LD_INT 66
3110: PPUSH
3111: CALL_OW 118
// Say ( JMM , D1-JMM-1b ) ;
3115: LD_EXP 16
3119: PPUSH
3120: LD_STRING D1-JMM-1b
3122: PPUSH
3123: CALL_OW 88
// Wait ( 0 0$0.5 ) ;
3127: LD_INT 18
3129: PPUSH
3130: CALL_OW 67
// Say ( JMM , D1-JMM-1c ) ;
3134: LD_EXP 16
3138: PPUSH
3139: LD_STRING D1-JMM-1c
3141: PPUSH
3142: CALL_OW 88
// Wait ( 0 0$0.2 ) ;
3146: LD_INT 7
3148: PPUSH
3149: CALL_OW 67
// SayRadioNoFaceNoName ( Powell , D1-Pow-1 ) ;
3153: LD_EXP 19
3157: PPUSH
3158: LD_STRING D1-Pow-1
3160: PPUSH
3161: CALL 69335 0 2
// Say ( JMM , D1-JMM-2 ) ;
3165: LD_EXP 16
3169: PPUSH
3170: LD_STRING D1-JMM-2
3172: PPUSH
3173: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D1-Pow-2 ) ;
3177: LD_EXP 19
3181: PPUSH
3182: LD_STRING D1-Pow-2
3184: PPUSH
3185: CALL 69335 0 2
// Say ( JMM , D1-JMM-3 ) ;
3189: LD_EXP 16
3193: PPUSH
3194: LD_STRING D1-JMM-3
3196: PPUSH
3197: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D1-Pow-3 ) ;
3201: LD_EXP 19
3205: PPUSH
3206: LD_STRING D1-Pow-3
3208: PPUSH
3209: CALL 69335 0 2
// Say ( JMM , D1-JMM-4 ) ;
3213: LD_EXP 16
3217: PPUSH
3218: LD_STRING D1-JMM-4
3220: PPUSH
3221: CALL_OW 88
// ComFree ( JMM ) ;
3225: LD_EXP 16
3229: PPUSH
3230: CALL_OW 139
// Wait ( 0 0$0.3 ) ;
3234: LD_INT 10
3236: PPUSH
3237: CALL_OW 67
// InGameOff ;
3241: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
3245: LD_STRING M1
3247: PPUSH
3248: CALL_OW 337
// SaveForQuickRestart ;
3252: CALL_OW 22
// active_russian_dialog := true ;
3256: LD_ADDR_EXP 3
3260: PUSH
3261: LD_INT 1
3263: ST_TO_ADDR
// active_road_patrol := true ;
3264: LD_ADDR_EXP 8
3268: PUSH
3269: LD_INT 1
3271: ST_TO_ADDR
// if Difficulty < 3 then
3272: LD_OWVAR 67
3276: PUSH
3277: LD_INT 3
3279: LESS
3280: IFFALSE 3311
// begin PlaceUnitXY ( Bobby , 41 , 71 , false ) ;
3282: LD_EXP 17
3286: PPUSH
3287: LD_INT 41
3289: PPUSH
3290: LD_INT 71
3292: PPUSH
3293: LD_INT 0
3295: PPUSH
3296: CALL_OW 48
// ComHold ( Bobby ) ;
3300: LD_EXP 17
3304: PPUSH
3305: CALL_OW 140
// end else
3309: GO 3359
// begin SetDir ( Bobby , 5 ) ;
3311: LD_EXP 17
3315: PPUSH
3316: LD_INT 5
3318: PPUSH
3319: CALL_OW 233
// PlaceUnitXY ( Bobby , 105 , 98 , false ) ;
3323: LD_EXP 17
3327: PPUSH
3328: LD_INT 105
3330: PPUSH
3331: LD_INT 98
3333: PPUSH
3334: LD_INT 0
3336: PPUSH
3337: CALL_OW 48
// ComCrawl ( Bobby ) ;
3341: LD_EXP 17
3345: PPUSH
3346: CALL_OW 137
// AddComHold ( Bobby ) ;
3350: LD_EXP 17
3354: PPUSH
3355: CALL_OW 200
// end ; if Difficulty < 3 then
3359: LD_OWVAR 67
3363: PUSH
3364: LD_INT 3
3366: LESS
3367: IFFALSE 3404
// begin PlaceUnitXY ( Cyrus , 90 , 42 , false ) ;
3369: LD_EXP 18
3373: PPUSH
3374: LD_INT 90
3376: PPUSH
3377: LD_INT 42
3379: PPUSH
3380: LD_INT 0
3382: PPUSH
3383: CALL_OW 48
// ComMoveXY ( Cyrus , 79 , 34 ) ;
3387: LD_EXP 18
3391: PPUSH
3392: LD_INT 79
3394: PPUSH
3395: LD_INT 34
3397: PPUSH
3398: CALL_OW 111
// end else
3402: GO 3452
// if Difficulty = 3 then
3404: LD_OWVAR 67
3408: PUSH
3409: LD_INT 3
3411: EQUAL
3412: IFFALSE 3434
// PlaceUnitXY ( Cyrus , 125 , 42 , false ) else
3414: LD_EXP 18
3418: PPUSH
3419: LD_INT 125
3421: PPUSH
3422: LD_INT 42
3424: PPUSH
3425: LD_INT 0
3427: PPUSH
3428: CALL_OW 48
3432: GO 3452
// PlaceUnitXY ( Cyrus , 154 , 97 , false ) ;
3434: LD_EXP 18
3438: PPUSH
3439: LD_INT 154
3441: PPUSH
3442: LD_INT 97
3444: PPUSH
3445: LD_INT 0
3447: PPUSH
3448: CALL_OW 48
// AddComCrawl ( Cyrus ) ;
3452: LD_EXP 18
3456: PPUSH
3457: CALL_OW 197
// AddComHold ( Cyrus ) ;
3461: LD_EXP 18
3465: PPUSH
3466: CALL_OW 200
// end ;
3470: LD_VAR 0 1
3474: RET
// every 0 0$01 trigger active_russian_dialog do var wait_points ;
3475: LD_EXP 3
3479: IFFALSE 4073
3481: GO 3483
3483: DISABLE
3484: LD_INT 0
3486: PPUSH
// begin wait_points := 0 ;
3487: LD_ADDR_VAR 0 1
3491: PUSH
3492: LD_INT 0
3494: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
3495: LD_INT 70
3497: PPUSH
3498: CALL_OW 67
// ComAgressiveMove ( russian_troops_1 , 79 , 83 ) ;
3502: LD_EXP 21
3506: PPUSH
3507: LD_INT 79
3509: PPUSH
3510: LD_INT 83
3512: PPUSH
3513: CALL_OW 114
// Say ( russian_troops_1 [ 2 ] , D1R-Rus1-1 ) ;
3517: LD_EXP 21
3521: PUSH
3522: LD_INT 2
3524: ARRAY
3525: PPUSH
3526: LD_STRING D1R-Rus1-1
3528: PPUSH
3529: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1R-Rus2-1 ) ;
3533: LD_EXP 21
3537: PUSH
3538: LD_INT 1
3540: ARRAY
3541: PPUSH
3542: LD_STRING D1R-Rus2-1
3544: PPUSH
3545: CALL_OW 88
// ComAgressiveMove ( russian_troops_2 , 91 , 80 ) ;
3549: LD_EXP 22
3553: PPUSH
3554: LD_INT 91
3556: PPUSH
3557: LD_INT 80
3559: PPUSH
3560: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
3564: LD_INT 35
3566: PPUSH
3567: CALL_OW 67
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 79 , 82 ) < 6 ;
3571: LD_EXP 21
3575: PUSH
3576: LD_INT 1
3578: ARRAY
3579: PPUSH
3580: LD_INT 79
3582: PPUSH
3583: LD_INT 82
3585: PPUSH
3586: CALL_OW 297
3590: PUSH
3591: LD_INT 6
3593: LESS
3594: IFFALSE 3564
// if not IsInArea ( JMM , jmm_spot ) then
3596: LD_EXP 16
3600: PPUSH
3601: LD_INT 5
3603: PPUSH
3604: CALL_OW 308
3608: NOT
3609: IFFALSE 3629
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1 ) else
3611: LD_EXP 21
3615: PUSH
3616: LD_INT 1
3618: ARRAY
3619: PPUSH
3620: LD_STRING D1Ra-Rus2-1
3622: PPUSH
3623: CALL_OW 88
3627: GO 3696
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3629: LD_EXP 21
3633: PUSH
3634: LD_INT 2
3636: ARRAY
3637: PPUSH
3638: LD_STRING D1Rb-Rus1-1
3640: PPUSH
3641: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Rb-Rus2-1 ) ;
3645: LD_EXP 21
3649: PUSH
3650: LD_INT 1
3652: ARRAY
3653: PPUSH
3654: LD_STRING D1Rb-Rus2-1
3656: PPUSH
3657: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 , GetX ( JMM ) , GetY ( JMM ) ) ;
3661: LD_EXP 21
3665: PUSH
3666: LD_EXP 22
3670: ADD
3671: PPUSH
3672: LD_EXP 16
3676: PPUSH
3677: CALL_OW 250
3681: PPUSH
3682: LD_EXP 16
3686: PPUSH
3687: CALL_OW 251
3691: PPUSH
3692: CALL_OW 114
// end ; wait_points := 10 ;
3696: LD_ADDR_VAR 0 1
3700: PUSH
3701: LD_INT 10
3703: ST_TO_ADDR
// if Difficulty > 1 then
3704: LD_OWVAR 67
3708: PUSH
3709: LD_INT 1
3711: GREATER
3712: IFFALSE 3794
// begin ComAgressiveMove ( russian_troops_1 , 78 , 95 ) ;
3714: LD_EXP 21
3718: PPUSH
3719: LD_INT 78
3721: PPUSH
3722: LD_INT 95
3724: PPUSH
3725: CALL_OW 114
// AddComWait ( russian_troops_1 , 0 0$05 ) ;
3729: LD_EXP 21
3733: PPUSH
3734: LD_INT 175
3736: PPUSH
3737: CALL_OW 202
// wait_points := wait_points + 15 ;
3741: LD_ADDR_VAR 0 1
3745: PUSH
3746: LD_VAR 0 1
3750: PUSH
3751: LD_INT 15
3753: PLUS
3754: ST_TO_ADDR
// if Difficulty > 2 then
3755: LD_OWVAR 67
3759: PUSH
3760: LD_INT 2
3762: GREATER
3763: IFFALSE 3794
// begin AddComAgressiveMove ( russian_troops_1 , 65 , 79 ) ;
3765: LD_EXP 21
3769: PPUSH
3770: LD_INT 65
3772: PPUSH
3773: LD_INT 79
3775: PPUSH
3776: CALL_OW 174
// wait_points := wait_points + 5 ;
3780: LD_ADDR_VAR 0 1
3784: PUSH
3785: LD_VAR 0 1
3789: PUSH
3790: LD_INT 5
3792: PLUS
3793: ST_TO_ADDR
// end ; end ; repeat wait ( 0 0$01 ) ;
3794: LD_INT 35
3796: PPUSH
3797: CALL_OW 67
// wait_points := wait_points - 1 ;
3801: LD_ADDR_VAR 0 1
3805: PUSH
3806: LD_VAR 0 1
3810: PUSH
3811: LD_INT 1
3813: MINUS
3814: ST_TO_ADDR
// if See ( 3 , JMM ) then
3815: LD_INT 3
3817: PPUSH
3818: LD_EXP 16
3822: PPUSH
3823: CALL_OW 292
3827: IFFALSE 3881
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3829: LD_EXP 21
3833: PUSH
3834: LD_INT 2
3836: ARRAY
3837: PPUSH
3838: LD_STRING D1Rb-Rus1-1
3840: PPUSH
3841: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3845: LD_EXP 21
3849: PPUSH
3850: LD_EXP 16
3854: PPUSH
3855: CALL_OW 250
3859: PPUSH
3860: LD_EXP 16
3864: PPUSH
3865: CALL_OW 251
3869: PPUSH
3870: CALL_OW 114
// Wait ( 0 0$03 ) ;
3874: LD_INT 105
3876: PPUSH
3877: CALL_OW 67
// end ; until wait_points = 0 ;
3881: LD_VAR 0 1
3885: PUSH
3886: LD_INT 0
3888: EQUAL
3889: IFFALSE 3794
// Say ( russian_troops_1 [ 2 ] , D1Rc-Rus1-1 ) ;
3891: LD_EXP 21
3895: PUSH
3896: LD_INT 2
3898: ARRAY
3899: PPUSH
3900: LD_STRING D1Rc-Rus1-1
3902: PPUSH
3903: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1a ) ;
3907: LD_EXP 21
3911: PUSH
3912: LD_INT 1
3914: ARRAY
3915: PPUSH
3916: LD_STRING D1Ra-Rus2-1a
3918: PPUSH
3919: CALL_OW 88
// active_powell_dialog := true ;
3923: LD_ADDR_EXP 15
3927: PUSH
3928: LD_INT 1
3930: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3931: LD_EXP 21
3935: PPUSH
3936: LD_INT 45
3938: PPUSH
3939: LD_INT 5
3941: PPUSH
3942: CALL_OW 114
// ComEnterUnit ( russian_troops_2 , rbar1 ) ;
3946: LD_EXP 22
3950: PPUSH
3951: LD_INT 26
3953: PPUSH
3954: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
3958: LD_INT 35
3960: PPUSH
3961: CALL_OW 67
// if See ( 3 , JMM ) then
3965: LD_INT 3
3967: PPUSH
3968: LD_EXP 16
3972: PPUSH
3973: CALL_OW 292
3977: IFFALSE 4033
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3979: LD_EXP 21
3983: PUSH
3984: LD_INT 2
3986: ARRAY
3987: PPUSH
3988: LD_STRING D1Rb-Rus1-1
3990: PPUSH
3991: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3995: LD_EXP 21
3999: PPUSH
4000: LD_EXP 16
4004: PPUSH
4005: CALL_OW 250
4009: PPUSH
4010: LD_EXP 16
4014: PPUSH
4015: CALL_OW 251
4019: PPUSH
4020: CALL_OW 114
// Wait ( 0 0$50 ) ;
4024: LD_INT 1750
4026: PPUSH
4027: CALL_OW 67
// end else
4031: GO 4048
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
4033: LD_EXP 21
4037: PPUSH
4038: LD_INT 45
4040: PPUSH
4041: LD_INT 5
4043: PPUSH
4044: CALL_OW 114
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 45 , 5 ) < 10 ;
4048: LD_EXP 21
4052: PUSH
4053: LD_INT 1
4055: ARRAY
4056: PPUSH
4057: LD_INT 45
4059: PPUSH
4060: LD_INT 5
4062: PPUSH
4063: CALL_OW 297
4067: PUSH
4068: LD_INT 10
4070: LESS
4071: IFFALSE 3958
// end ;
4073: PPOPN 1
4075: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 6 ] ] ) and Difficulty = 1 do
4076: LD_INT 22
4078: PUSH
4079: LD_INT 3
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: PUSH
4086: LD_INT 92
4088: PUSH
4089: LD_INT 80
4091: PUSH
4092: LD_INT 83
4094: PUSH
4095: LD_INT 6
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: LIST
4102: LIST
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: PPUSH
4108: CALL_OW 69
4112: PUSH
4113: LD_OWVAR 67
4117: PUSH
4118: LD_INT 1
4120: EQUAL
4121: AND
4122: IFFALSE 4203
4124: GO 4126
4126: DISABLE
// begin PlaceSeeing ( 80 , 83 , 1 , - 7 ) ;
4127: LD_INT 80
4129: PPUSH
4130: LD_INT 83
4132: PPUSH
4133: LD_INT 1
4135: PPUSH
4136: LD_INT 7
4138: NEG
4139: PPUSH
4140: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
4144: LD_INT 35
4146: PPUSH
4147: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 10 ] ] ) ;
4151: LD_INT 22
4153: PUSH
4154: LD_INT 3
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: PUSH
4161: LD_INT 92
4163: PUSH
4164: LD_INT 80
4166: PUSH
4167: LD_INT 83
4169: PUSH
4170: LD_INT 10
4172: PUSH
4173: EMPTY
4174: LIST
4175: LIST
4176: LIST
4177: LIST
4178: PUSH
4179: EMPTY
4180: LIST
4181: LIST
4182: PPUSH
4183: CALL_OW 69
4187: NOT
4188: IFFALSE 4144
// RemoveSeeing ( 80 , 83 , 1 ) ;
4190: LD_INT 80
4192: PPUSH
4193: LD_INT 83
4195: PPUSH
4196: LD_INT 1
4198: PPUSH
4199: CALL_OW 331
// end ;
4203: END
// every 0 0$02 trigger GetDistUnits ( JMM , Bobby ) < 6 and IsOk ( Bobby ) do
4204: LD_EXP 16
4208: PPUSH
4209: LD_EXP 17
4213: PPUSH
4214: CALL_OW 296
4218: PUSH
4219: LD_INT 6
4221: LESS
4222: PUSH
4223: LD_EXP 17
4227: PPUSH
4228: CALL_OW 302
4232: AND
4233: IFFALSE 4692
4235: GO 4237
4237: DISABLE
// begin ComWalk ( Bobby ) ;
4238: LD_EXP 17
4242: PPUSH
4243: CALL_OW 138
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4247: LD_EXP 17
4251: PPUSH
4252: LD_EXP 16
4256: PPUSH
4257: CALL_OW 250
4261: PPUSH
4262: LD_EXP 16
4266: PPUSH
4267: CALL_OW 251
4271: PPUSH
4272: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
4276: LD_INT 35
4278: PPUSH
4279: CALL_OW 67
// until See ( 4 , JMM ) ;
4283: LD_INT 4
4285: PPUSH
4286: LD_EXP 16
4290: PPUSH
4291: CALL_OW 292
4295: IFFALSE 4276
// InGameOn ;
4297: CALL_OW 8
// ComTurnUnit ( JMM , Bobby ) ;
4301: LD_EXP 16
4305: PPUSH
4306: LD_EXP 17
4310: PPUSH
4311: CALL_OW 119
// if cyrus_in_squad and IsOk ( Cyrus ) and GetDistUnits ( JMM , Cyrus ) < 10 then
4315: LD_EXP 7
4319: PUSH
4320: LD_EXP 18
4324: PPUSH
4325: CALL_OW 302
4329: AND
4330: PUSH
4331: LD_EXP 16
4335: PPUSH
4336: LD_EXP 18
4340: PPUSH
4341: CALL_OW 296
4345: PUSH
4346: LD_INT 10
4348: LESS
4349: AND
4350: IFFALSE 4395
// begin ComMoveXY ( Cyrus , GetX ( JMM ) , GetY ( JMM ) ) ;
4352: LD_EXP 18
4356: PPUSH
4357: LD_EXP 16
4361: PPUSH
4362: CALL_OW 250
4366: PPUSH
4367: LD_EXP 16
4371: PPUSH
4372: CALL_OW 251
4376: PPUSH
4377: CALL_OW 111
// AddComTurnUnit ( Cyrus , Bobby ) ;
4381: LD_EXP 18
4385: PPUSH
4386: LD_EXP 17
4390: PPUSH
4391: CALL_OW 179
// end ; Say ( JMM , D2-JMM-1 ) ;
4395: LD_EXP 16
4399: PPUSH
4400: LD_STRING D2-JMM-1
4402: PPUSH
4403: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
4407: LD_INT 10
4409: PPUSH
4410: CALL_OW 67
// ComTurnUnit ( Bobby , JMM ) ;
4414: LD_EXP 17
4418: PPUSH
4419: LD_EXP 16
4423: PPUSH
4424: CALL_OW 119
// Say ( Bobby , D2-Bobby-1 ) ;
4428: LD_EXP 17
4432: PPUSH
4433: LD_STRING D2-Bobby-1
4435: PPUSH
4436: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
4440: LD_EXP 16
4444: PPUSH
4445: LD_STRING D2-JMM-2
4447: PPUSH
4448: CALL_OW 88
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4452: LD_EXP 17
4456: PPUSH
4457: LD_EXP 16
4461: PPUSH
4462: CALL_OW 250
4466: PPUSH
4467: LD_EXP 16
4471: PPUSH
4472: CALL_OW 251
4476: PPUSH
4477: CALL_OW 111
// Say ( Bobby , D2-Bobby-2 ) ;
4481: LD_EXP 17
4485: PPUSH
4486: LD_STRING D2-Bobby-2
4488: PPUSH
4489: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
4493: LD_EXP 16
4497: PPUSH
4498: LD_STRING D2-JMM-3
4500: PPUSH
4501: CALL_OW 88
// ComTurnUnit ( Bobby , JMM ) ;
4505: LD_EXP 17
4509: PPUSH
4510: LD_EXP 16
4514: PPUSH
4515: CALL_OW 119
// DialogueOn ;
4519: CALL_OW 6
// Say ( Bobby , D2-Bobby-3 ) ;
4523: LD_EXP 17
4527: PPUSH
4528: LD_STRING D2-Bobby-3
4530: PPUSH
4531: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
4535: LD_EXP 16
4539: PPUSH
4540: LD_STRING D2-JMM-4
4542: PPUSH
4543: CALL_OW 88
// Say ( Bobby , D2-Bobby-4 ) ;
4547: LD_EXP 17
4551: PPUSH
4552: LD_STRING D2-Bobby-4
4554: PPUSH
4555: CALL_OW 88
// Say ( JMM , D2-JMM-5 ) ;
4559: LD_EXP 16
4563: PPUSH
4564: LD_STRING D2-JMM-5
4566: PPUSH
4567: CALL_OW 88
// Say ( Bobby , D2-Bobby-5 ) ;
4571: LD_EXP 17
4575: PPUSH
4576: LD_STRING D2-Bobby-5
4578: PPUSH
4579: CALL_OW 88
// Say ( JMM , D2-JMM-6 ) ;
4583: LD_EXP 16
4587: PPUSH
4588: LD_STRING D2-JMM-6
4590: PPUSH
4591: CALL_OW 88
// if not powell_contact then
4595: LD_EXP 5
4599: NOT
4600: IFFALSE 4626
// begin Say ( Bobby , D2-Bobby-6 ) ;
4602: LD_EXP 17
4606: PPUSH
4607: LD_STRING D2-Bobby-6
4609: PPUSH
4610: CALL_OW 88
// Say ( JMM , D2-JMM-7 ) ;
4614: LD_EXP 16
4618: PPUSH
4619: LD_STRING D2-JMM-7
4621: PPUSH
4622: CALL_OW 88
// end ; DialogueOff ;
4626: CALL_OW 7
// InGameOff ;
4630: CALL_OW 9
// SetSide ( Bobby , 1 ) ;
4634: LD_EXP 17
4638: PPUSH
4639: LD_INT 1
4641: PPUSH
4642: CALL_OW 235
// ComFree ( [ JMM , Bobby ] ) ;
4646: LD_EXP 16
4650: PUSH
4651: LD_EXP 17
4655: PUSH
4656: EMPTY
4657: LIST
4658: LIST
4659: PPUSH
4660: CALL_OW 139
// bobby_in_squad := true ;
4664: LD_ADDR_EXP 4
4668: PUSH
4669: LD_INT 1
4671: ST_TO_ADDR
// if powell_contact and not cyrus_in_squad then
4672: LD_EXP 5
4676: PUSH
4677: LD_EXP 7
4681: NOT
4682: AND
4683: IFFALSE 4692
// ChangeMissionObjectives ( M2b ) ;
4685: LD_STRING M2b
4687: PPUSH
4688: CALL_OW 337
// end ;
4692: END
// every 0 0$10 trigger active_russian_dialog and Difficulty < 3 do
4693: LD_EXP 3
4697: PUSH
4698: LD_OWVAR 67
4702: PUSH
4703: LD_INT 3
4705: LESS
4706: AND
4707: IFFALSE 4741
4709: GO 4711
4711: DISABLE
// begin wait ( 1 1$00 ) ;
4712: LD_INT 2100
4714: PPUSH
4715: CALL_OW 67
// if not bobby_in_squad then
4719: LD_EXP 4
4723: NOT
4724: IFFALSE 4741
// ComMoveXY ( Bobby , 75 , 83 ) ;
4726: LD_EXP 17
4730: PPUSH
4731: LD_INT 75
4733: PPUSH
4734: LD_INT 83
4736: PPUSH
4737: CALL_OW 111
// end ;
4741: END
// every 0 0$10 trigger cyrus_in_squad and not bobby_in_squad do
4742: LD_EXP 7
4746: PUSH
4747: LD_EXP 4
4751: NOT
4752: AND
4753: IFFALSE 4782
4755: GO 4757
4757: DISABLE
// begin ComMoveXY ( Bobby , 105 , 97 ) ;
4758: LD_EXP 17
4762: PPUSH
4763: LD_INT 105
4765: PPUSH
4766: LD_INT 97
4768: PPUSH
4769: CALL_OW 111
// AddComCrawl ( Bobby ) ;
4773: LD_EXP 17
4777: PPUSH
4778: CALL_OW 197
// end ;
4782: END
// every 0 0$01 trigger IsInArea ( JMM , obstacle_area ) and GetDistUnits ( JMM , Bobby ) < 7 and bobby_in_squad do
4783: LD_EXP 16
4787: PPUSH
4788: LD_INT 6
4790: PPUSH
4791: CALL_OW 308
4795: PUSH
4796: LD_EXP 16
4800: PPUSH
4801: LD_EXP 17
4805: PPUSH
4806: CALL_OW 296
4810: PUSH
4811: LD_INT 7
4813: LESS
4814: AND
4815: PUSH
4816: LD_EXP 4
4820: AND
4821: IFFALSE 4868
4823: GO 4825
4825: DISABLE
// begin ComHold ( [ JMM , Bobby ] ) ;
4826: LD_EXP 16
4830: PUSH
4831: LD_EXP 17
4835: PUSH
4836: EMPTY
4837: LIST
4838: LIST
4839: PPUSH
4840: CALL_OW 140
// Say ( JMM , D2a-JMM-1 ) ;
4844: LD_EXP 16
4848: PPUSH
4849: LD_STRING D2a-JMM-1
4851: PPUSH
4852: CALL_OW 88
// Say ( Bobby , D2a-Bobby-1 ) ;
4856: LD_EXP 17
4860: PPUSH
4861: LD_STRING D2a-Bobby-1
4863: PPUSH
4864: CALL_OW 88
// end ;
4868: END
// every 0 0$50 trigger active_powell_dialog and not See ( 3 , JMM ) do
4869: LD_EXP 15
4873: PUSH
4874: LD_INT 3
4876: PPUSH
4877: LD_EXP 16
4881: PPUSH
4882: CALL_OW 292
4886: NOT
4887: AND
4888: IFFALSE 5059
4890: GO 4892
4892: DISABLE
// begin wait ( 0 0$5 ) ;
4893: LD_INT 175
4895: PPUSH
4896: CALL_OW 67
// InGameOn ;
4900: CALL_OW 8
// DialogueOn ;
4904: CALL_OW 6
// SayRadioNoFaceNoName ( Powell , D3-Pow-1 ) ;
4908: LD_EXP 19
4912: PPUSH
4913: LD_STRING D3-Pow-1
4915: PPUSH
4916: CALL 69335 0 2
// Say ( JMM , D3-JMM-1 ) ;
4920: LD_EXP 16
4924: PPUSH
4925: LD_STRING D3-JMM-1
4927: PPUSH
4928: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D3-Pow-2 ) ;
4932: LD_EXP 19
4936: PPUSH
4937: LD_STRING D3-Pow-2
4939: PPUSH
4940: CALL 69335 0 2
// Say ( JMM , D3-JMM-2 ) ;
4944: LD_EXP 16
4948: PPUSH
4949: LD_STRING D3-JMM-2
4951: PPUSH
4952: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D3-Pow-3 ) ;
4956: LD_EXP 19
4960: PPUSH
4961: LD_STRING D3-Pow-3
4963: PPUSH
4964: CALL 69335 0 2
// DialogueOff ;
4968: CALL_OW 7
// InGameOff ;
4972: CALL_OW 9
// powell_contact := true ;
4976: LD_ADDR_EXP 5
4980: PUSH
4981: LD_INT 1
4983: ST_TO_ADDR
// SetAreaMapShow ( exitArea , 1 ) ;
4984: LD_INT 10
4986: PPUSH
4987: LD_INT 1
4989: PPUSH
4990: CALL_OW 424
// uc_side := 4 ;
4994: LD_ADDR_OWVAR 20
4998: PUSH
4999: LD_INT 4
5001: ST_TO_ADDR
// uc_nation := 1 ;
5002: LD_ADDR_OWVAR 21
5006: PUSH
5007: LD_INT 1
5009: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
5010: LD_ADDR_EXP 19
5014: PUSH
5015: LD_STRING Powell
5017: PPUSH
5018: LD_INT 0
5020: PPUSH
5021: LD_STRING 
5023: PPUSH
5024: CALL 27714 0 3
5028: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
5029: LD_STRING M2
5031: PPUSH
5032: CALL_OW 337
// if not bobby_in_squad then
5036: LD_EXP 4
5040: NOT
5041: IFFALSE 5052
// ChangeMissionObjectives ( M2a ) else
5043: LD_STRING M2a
5045: PPUSH
5046: CALL_OW 337
5050: GO 5059
// ChangeMissionObjectives ( M2b ) ;
5052: LD_STRING M2b
5054: PPUSH
5055: CALL_OW 337
// end ;
5059: END
// every 0 0$01 trigger IsInArea ( JMM , fakeArea ) do
5060: LD_EXP 16
5064: PPUSH
5065: LD_INT 7
5067: PPUSH
5068: CALL_OW 308
5072: IFFALSE 5207
5074: GO 5076
5076: DISABLE
// begin DialogueOn ;
5077: CALL_OW 6
// SayRadioNoFaceNoName ( fakePokryshkin , D4-Rus3-1 ) ;
5081: LD_EXP 20
5085: PPUSH
5086: LD_STRING D4-Rus3-1
5088: PPUSH
5089: CALL 69335 0 2
// DialogueOff ;
5093: CALL_OW 7
// ChangeMissionObjectives ( M3a ) ;
5097: LD_STRING M3a
5099: PPUSH
5100: CALL_OW 337
// SetAreaMapShow ( fakeEnd , 1 ) ;
5104: LD_INT 11
5106: PPUSH
5107: LD_INT 1
5109: PPUSH
5110: CALL_OW 424
// Wait ( 0 0$02 ) ;
5114: LD_INT 70
5116: PPUSH
5117: CALL_OW 67
// DialogueOn ;
5121: CALL_OW 6
// SayRadioNoFace ( Powell , D4-Pow-1 ) ;
5125: LD_EXP 19
5129: PPUSH
5130: LD_STRING D4-Pow-1
5132: PPUSH
5133: CALL_OW 586
// DialogueOff ;
5137: CALL_OW 7
// ChangeMissionObjectives ( M3b ) ;
5141: LD_STRING M3b
5143: PPUSH
5144: CALL_OW 337
// case Query ( Q1 ) of 1 :
5148: LD_STRING Q1
5150: PPUSH
5151: CALL_OW 97
5155: PUSH
5156: LD_INT 1
5158: DOUBLE
5159: EQUAL
5160: IFTRUE 5164
5162: GO 5195
5164: POP
// begin macmilan_use_radio := true ;
5165: LD_ADDR_EXP 6
5169: PUSH
5170: LD_INT 1
5172: ST_TO_ADDR
// DialogueOn ;
5173: CALL_OW 6
// Say ( JMM , D4a-JMM-1 ) ;
5177: LD_EXP 16
5181: PPUSH
5182: LD_STRING D4a-JMM-1
5184: PPUSH
5185: CALL_OW 88
// DialogueOff ;
5189: CALL_OW 7
// end ; 2 :
5193: GO 5207
5195: LD_INT 2
5197: DOUBLE
5198: EQUAL
5199: IFTRUE 5203
5201: GO 5206
5203: POP
// ; end ;
5204: GO 5207
5206: POP
// end ;
5207: END
// every 0 0$02 trigger GetDistUnits ( JMM , Cyrus ) < 8 and IsOk ( Cyrus ) do
5208: LD_EXP 16
5212: PPUSH
5213: LD_EXP 18
5217: PPUSH
5218: CALL_OW 296
5222: PUSH
5223: LD_INT 8
5225: LESS
5226: PUSH
5227: LD_EXP 18
5231: PPUSH
5232: CALL_OW 302
5236: AND
5237: IFFALSE 5528
5239: GO 5241
5241: DISABLE
// begin InGameOn ;
5242: CALL_OW 8
// ComMoveXY ( JMM , GetX ( Cyrus ) , GetY ( Cyrus ) ) ;
5246: LD_EXP 16
5250: PPUSH
5251: LD_EXP 18
5255: PPUSH
5256: CALL_OW 250
5260: PPUSH
5261: LD_EXP 18
5265: PPUSH
5266: CALL_OW 251
5270: PPUSH
5271: CALL_OW 111
// if IsOk ( Bobby ) and bobby_in_squad then
5275: LD_EXP 17
5279: PPUSH
5280: CALL_OW 302
5284: PUSH
5285: LD_EXP 4
5289: AND
5290: IFFALSE 5321
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
5292: LD_EXP 17
5296: PPUSH
5297: LD_EXP 16
5301: PPUSH
5302: CALL_OW 250
5306: PPUSH
5307: LD_EXP 16
5311: PPUSH
5312: CALL_OW 251
5316: PPUSH
5317: CALL_OW 111
// Say ( JMM , D5-JMM-1 ) ;
5321: LD_EXP 16
5325: PPUSH
5326: LD_STRING D5-JMM-1
5328: PPUSH
5329: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
5333: LD_INT 10
5335: PPUSH
5336: CALL_OW 67
// ComTurnUnit ( JMM , Cyrus ) ;
5340: LD_EXP 16
5344: PPUSH
5345: LD_EXP 18
5349: PPUSH
5350: CALL_OW 119
// ComWalk ( Cyrus ) ;
5354: LD_EXP 18
5358: PPUSH
5359: CALL_OW 138
// ComTurnUnit ( Cyrus , JMM ) ;
5363: LD_EXP 18
5367: PPUSH
5368: LD_EXP 16
5372: PPUSH
5373: CALL_OW 119
// Say ( Cyrus , D5-Cyrus-1 ) ;
5377: LD_EXP 18
5381: PPUSH
5382: LD_STRING D5-Cyrus-1
5384: PPUSH
5385: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5389: LD_EXP 17
5393: PPUSH
5394: CALL_OW 302
5398: PUSH
5399: LD_EXP 4
5403: AND
5404: IFFALSE 5444
// begin ComTurnUnit ( Bobby , Cyrus ) ;
5406: LD_EXP 17
5410: PPUSH
5411: LD_EXP 18
5415: PPUSH
5416: CALL_OW 119
// Say ( Bobby , D5-Bobby-1 ) ;
5420: LD_EXP 17
5424: PPUSH
5425: LD_STRING D5-Bobby-1
5427: PPUSH
5428: CALL_OW 88
// Say ( JMM , D5-JMM-2 ) ;
5432: LD_EXP 16
5436: PPUSH
5437: LD_STRING D5-JMM-2
5439: PPUSH
5440: CALL_OW 88
// end ; InGameOff ;
5444: CALL_OW 9
// cyrus_in_squad := true ;
5448: LD_ADDR_EXP 7
5452: PUSH
5453: LD_INT 1
5455: ST_TO_ADDR
// SetSide ( Cyrus , 1 ) ;
5456: LD_EXP 18
5460: PPUSH
5461: LD_INT 1
5463: PPUSH
5464: CALL_OW 235
// if powell_contact and not bobby_in_squad then
5468: LD_EXP 5
5472: PUSH
5473: LD_EXP 4
5477: NOT
5478: AND
5479: IFFALSE 5488
// ChangeMissionObjectives ( M2b ) ;
5481: LD_STRING M2b
5483: PPUSH
5484: CALL_OW 337
// if not bobby_in_squad and GetSide ( Bobby ) = 4 and IsOk ( Bobby ) then
5488: LD_EXP 4
5492: NOT
5493: PUSH
5494: LD_EXP 17
5498: PPUSH
5499: CALL_OW 255
5503: PUSH
5504: LD_INT 4
5506: EQUAL
5507: AND
5508: PUSH
5509: LD_EXP 17
5513: PPUSH
5514: CALL_OW 302
5518: AND
5519: IFFALSE 5528
// SetAchievement ( ACH_CYRUS ) ;
5521: LD_STRING ACH_CYRUS
5523: PPUSH
5524: CALL_OW 543
// end ;
5528: END
// every 0 0$01 trigger bobby_in_squad and cyrus_in_squad do
5529: LD_EXP 4
5533: PUSH
5534: LD_EXP 7
5538: AND
5539: IFFALSE 5551
5541: GO 5543
5543: DISABLE
// ChangeMissionObjectives ( M2c ) ;
5544: LD_STRING M2c
5546: PPUSH
5547: CALL_OW 337
5551: END
// every 0 0$01 trigger IsInArea ( JMM , trap ) do
5552: LD_EXP 16
5556: PPUSH
5557: LD_INT 8
5559: PPUSH
5560: CALL_OW 308
5564: IFFALSE 5616
5566: GO 5568
5568: DISABLE
// begin macmilan_in_trap := true ;
5569: LD_ADDR_EXP 9
5573: PUSH
5574: LD_INT 1
5576: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
5577: LD_INT 35
5579: PPUSH
5580: CALL_OW 67
// DialogueOn ;
5584: CALL_OW 6
// Say ( Pokryshkin , D5-Pok-1 ) ;
5588: LD_EXP 27
5592: PPUSH
5593: LD_STRING D5-Pok-1
5595: PPUSH
5596: CALL_OW 88
// DialogueOff ;
5600: CALL_OW 7
// Say ( JMM , D4b-JMM-1 ) ;
5604: LD_EXP 16
5608: PPUSH
5609: LD_STRING D4b-JMM-1
5611: PPUSH
5612: CALL_OW 88
// end ;
5616: END
// every 0 0$01 trigger ( IsInArea ( JMM , endRoadArea ) and GetDistUnits ( JMM , russian_meta_guards [ russian_meta_guards ] ) < 12 ) or UnitFilter ( russian_meta_guards , [ f_not , [ f_lives , 990 ] ] ) do var i , hp ;
5617: LD_EXP 16
5621: PPUSH
5622: LD_INT 13
5624: PPUSH
5625: CALL_OW 308
5629: PUSH
5630: LD_EXP 16
5634: PPUSH
5635: LD_EXP 24
5639: PUSH
5640: LD_EXP 24
5644: ARRAY
5645: PPUSH
5646: CALL_OW 296
5650: PUSH
5651: LD_INT 12
5653: LESS
5654: AND
5655: PUSH
5656: LD_EXP 24
5660: PPUSH
5661: LD_INT 3
5663: PUSH
5664: LD_INT 24
5666: PUSH
5667: LD_INT 990
5669: PUSH
5670: EMPTY
5671: LIST
5672: LIST
5673: PUSH
5674: EMPTY
5675: LIST
5676: LIST
5677: PPUSH
5678: CALL_OW 72
5682: OR
5683: IFFALSE 5921
5685: GO 5687
5687: DISABLE
5688: LD_INT 0
5690: PPUSH
5691: PPUSH
// begin hp := [ 300 , 250 , 200 , 150 ] [ Difficulty ] ;
5692: LD_ADDR_VAR 0 2
5696: PUSH
5697: LD_INT 300
5699: PUSH
5700: LD_INT 250
5702: PUSH
5703: LD_INT 200
5705: PUSH
5706: LD_INT 150
5708: PUSH
5709: EMPTY
5710: LIST
5711: LIST
5712: LIST
5713: LIST
5714: PUSH
5715: LD_OWVAR 67
5719: ARRAY
5720: ST_TO_ADDR
// for i in russian_meta_guards do
5721: LD_ADDR_VAR 0 1
5725: PUSH
5726: LD_EXP 24
5730: PUSH
5731: FOR_IN
5732: IFFALSE 5772
// if IsOk ( i ) then
5734: LD_VAR 0 1
5738: PPUSH
5739: CALL_OW 302
5743: IFFALSE 5770
// SetLives ( i , GetLives ( i ) - hp ) ;
5745: LD_VAR 0 1
5749: PPUSH
5750: LD_VAR 0 1
5754: PPUSH
5755: CALL_OW 256
5759: PUSH
5760: LD_VAR 0 2
5764: MINUS
5765: PPUSH
5766: CALL_OW 234
5770: GO 5731
5772: POP
5773: POP
// DialogueOn ;
5774: CALL_OW 6
// Say ( russian_meta_guards [ russian_meta_guards ] , D6-FRus1-1 ) ;
5778: LD_EXP 24
5782: PUSH
5783: LD_EXP 24
5787: ARRAY
5788: PPUSH
5789: LD_STRING D6-FRus1-1
5791: PPUSH
5792: CALL_OW 88
// Say ( JMM , D6-JMM-1 ) ;
5796: LD_EXP 16
5800: PPUSH
5801: LD_STRING D6-JMM-1
5803: PPUSH
5804: CALL_OW 88
// if IsOk ( Cyrus ) and cyrus_in_squad then
5808: LD_EXP 18
5812: PPUSH
5813: CALL_OW 302
5817: PUSH
5818: LD_EXP 7
5822: AND
5823: IFFALSE 5837
// Say ( Cyrus , D6-Cyrus-1 ) ;
5825: LD_EXP 18
5829: PPUSH
5830: LD_STRING D6-Cyrus-1
5832: PPUSH
5833: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5837: LD_EXP 17
5841: PPUSH
5842: CALL_OW 302
5846: PUSH
5847: LD_EXP 4
5851: AND
5852: IFFALSE 5866
// Say ( Bobby , D6-Bobby-1 ) ;
5854: LD_EXP 17
5858: PPUSH
5859: LD_STRING D6-Bobby-1
5861: PPUSH
5862: CALL_OW 88
// DialogueOff ;
5866: CALL_OW 7
// Wait ( [ 0 0$04 , 0 0$03 , 0 0$02 , 0 0$02 ] [ Difficulty ] ) ;
5870: LD_INT 140
5872: PUSH
5873: LD_INT 105
5875: PUSH
5876: LD_INT 70
5878: PUSH
5879: LD_INT 70
5881: PUSH
5882: EMPTY
5883: LIST
5884: LIST
5885: LIST
5886: LIST
5887: PUSH
5888: LD_OWVAR 67
5892: ARRAY
5893: PPUSH
5894: CALL_OW 67
// meta_action := true ;
5898: LD_ADDR_EXP 10
5902: PUSH
5903: LD_INT 1
5905: ST_TO_ADDR
// ComAgressiveMove ( russian_meta_guards , 94 , 8 ) ;
5906: LD_EXP 24
5910: PPUSH
5911: LD_INT 94
5913: PPUSH
5914: LD_INT 8
5916: PPUSH
5917: CALL_OW 114
// end ;
5921: PPOPN 2
5923: END
// every 0 0$1 trigger IsInArea ( JMM , secretPassage ) do
5924: LD_EXP 16
5928: PPUSH
5929: LD_INT 14
5931: PPUSH
5932: CALL_OW 308
5936: IFFALSE 5948
5938: GO 5940
5940: DISABLE
// SetAchievement ( ACH_SECRET ) ;
5941: LD_STRING ACH_SECRET
5943: PPUSH
5944: CALL_OW 543
5948: END
// every 0 0$01 trigger GetDistUnitXY ( JMM , 93 , 1 ) < 5 and FilterAllUnits ( [ f_side , 1 ] ) > 1 do
5949: LD_EXP 16
5953: PPUSH
5954: LD_INT 93
5956: PPUSH
5957: LD_INT 1
5959: PPUSH
5960: CALL_OW 297
5964: PUSH
5965: LD_INT 5
5967: LESS
5968: PUSH
5969: LD_INT 22
5971: PUSH
5972: LD_INT 1
5974: PUSH
5975: EMPTY
5976: LIST
5977: LIST
5978: PPUSH
5979: CALL_OW 69
5983: PUSH
5984: LD_INT 1
5986: GREATER
5987: AND
5988: IFFALSE 6005
5990: GO 5992
5992: DISABLE
// Say ( JMM , D6a-JMM-1 ) ;
5993: LD_EXP 16
5997: PPUSH
5998: LD_STRING D6a-JMM-1
6000: PPUSH
6001: CALL_OW 88
6005: END
// every 0 0$01 trigger IsInArea ( Bobby , exitArea ) or IsInArea ( Bobby , hiddenEnd ) do
6006: LD_EXP 17
6010: PPUSH
6011: LD_INT 10
6013: PPUSH
6014: CALL_OW 308
6018: PUSH
6019: LD_EXP 17
6023: PPUSH
6024: LD_INT 12
6026: PPUSH
6027: CALL_OW 308
6031: OR
6032: IFFALSE 6088
6034: GO 6036
6036: DISABLE
// begin bobby_saved := true ;
6037: LD_ADDR_EXP 12
6041: PUSH
6042: LD_INT 1
6044: ST_TO_ADDR
// SaveVariable ( GetLives ( Bobby ) , 01_BobbyLifePoints_1 ) ;
6045: LD_EXP 17
6049: PPUSH
6050: CALL_OW 256
6054: PPUSH
6055: LD_STRING 01_BobbyLifePoints_1
6057: PPUSH
6058: CALL_OW 39
// RemoveUnit ( Bobby ) ;
6062: LD_EXP 17
6066: PPUSH
6067: CALL_OW 64
// AddMedal ( Bobby , 1 ) ;
6071: LD_STRING Bobby
6073: PPUSH
6074: LD_INT 1
6076: PPUSH
6077: CALL_OW 101
// ToLua ( enableBioCharacter(BIO_BOBBY) ) ;
6081: LD_STRING enableBioCharacter(BIO_BOBBY)
6083: PPUSH
6084: CALL_OW 559
// end ;
6088: END
// every 0 0$01 trigger IsInArea ( Cyrus , exitArea ) or IsInArea ( Cyrus , hiddenEnd ) do
6089: LD_EXP 18
6093: PPUSH
6094: LD_INT 10
6096: PPUSH
6097: CALL_OW 308
6101: PUSH
6102: LD_EXP 18
6106: PPUSH
6107: LD_INT 12
6109: PPUSH
6110: CALL_OW 308
6114: OR
6115: IFFALSE 6171
6117: GO 6119
6119: DISABLE
// begin cyrus_saved := true ;
6120: LD_ADDR_EXP 13
6124: PUSH
6125: LD_INT 1
6127: ST_TO_ADDR
// SaveVariable ( GetLives ( Cyrus ) , 01_CyrusLifePoints_1 ) ;
6128: LD_EXP 18
6132: PPUSH
6133: CALL_OW 256
6137: PPUSH
6138: LD_STRING 01_CyrusLifePoints_1
6140: PPUSH
6141: CALL_OW 39
// RemoveUnit ( Cyrus ) ;
6145: LD_EXP 18
6149: PPUSH
6150: CALL_OW 64
// AddMedal ( Cyrus , 1 ) ;
6154: LD_STRING Cyrus
6156: PPUSH
6157: LD_INT 1
6159: PPUSH
6160: CALL_OW 101
// ToLua ( enableBioCharacter(BIO_CYRUS) ) ;
6164: LD_STRING enableBioCharacter(BIO_CYRUS)
6166: PPUSH
6167: CALL_OW 559
// end ;
6171: END
// every 0 0$01 trigger IsInArea ( JMM , exitArea ) or IsInArea ( JMM , hiddenEnd ) do var i , to_reward , wait_for_them , m1 , m2 , m3 ;
6172: LD_EXP 16
6176: PPUSH
6177: LD_INT 10
6179: PPUSH
6180: CALL_OW 308
6184: PUSH
6185: LD_EXP 16
6189: PPUSH
6190: LD_INT 12
6192: PPUSH
6193: CALL_OW 308
6197: OR
6198: IFFALSE 6827
6200: GO 6202
6202: DISABLE
6203: LD_INT 0
6205: PPUSH
6206: PPUSH
6207: PPUSH
6208: PPUSH
6209: PPUSH
6210: PPUSH
// begin if macmilan_use_radio then
6211: LD_EXP 6
6215: IFFALSE 6224
// SetAchievement ( ACH_RADIO ) ;
6217: LD_STRING ACH_RADIO
6219: PPUSH
6220: CALL_OW 543
// if ( not cyrus_saved and cyrus_in_squad and IsOk ( Cyrus ) ) or ( not bobby_saved and bobby_in_squad and IsOk ( Bobby ) ) then
6224: LD_EXP 13
6228: NOT
6229: PUSH
6230: LD_EXP 7
6234: AND
6235: PUSH
6236: LD_EXP 18
6240: PPUSH
6241: CALL_OW 302
6245: AND
6246: PUSH
6247: LD_EXP 12
6251: NOT
6252: PUSH
6253: LD_EXP 4
6257: AND
6258: PUSH
6259: LD_EXP 17
6263: PPUSH
6264: CALL_OW 302
6268: AND
6269: OR
6270: IFFALSE 6311
// case Query ( Q2 ) of 1 :
6272: LD_STRING Q2
6274: PPUSH
6275: CALL_OW 97
6279: PUSH
6280: LD_INT 1
6282: DOUBLE
6283: EQUAL
6284: IFTRUE 6288
6286: GO 6299
6288: POP
// wait_for_them := true ; 2 :
6289: LD_ADDR_VAR 0 3
6293: PUSH
6294: LD_INT 1
6296: ST_TO_ADDR
6297: GO 6311
6299: LD_INT 2
6301: DOUBLE
6302: EQUAL
6303: IFTRUE 6307
6305: GO 6310
6307: POP
// ; end ;
6308: GO 6311
6310: POP
// if wait_for_them then
6311: LD_VAR 0 3
6315: IFFALSE 6428
// repeat wait ( 0 0$01 ) ;
6317: LD_INT 35
6319: PPUSH
6320: CALL_OW 67
// until ( cyrus_saved and bobby_saved ) or ( cyrus_saved and ( not bobby_in_squad or IsDying ( Bobby ) or IsDead ( Bobby ) ) ) or ( bobby_saved and ( not cyrus_in_squad or IsDying ( Cyrus ) or IsDead ( Cyrus ) ) ) or ( IsDead ( Bobby ) and IsDead ( Cyrus ) ) ;
6324: LD_EXP 13
6328: PUSH
6329: LD_EXP 12
6333: AND
6334: PUSH
6335: LD_EXP 13
6339: PUSH
6340: LD_EXP 4
6344: NOT
6345: PUSH
6346: LD_EXP 17
6350: PPUSH
6351: CALL_OW 303
6355: OR
6356: PUSH
6357: LD_EXP 17
6361: PPUSH
6362: CALL_OW 301
6366: OR
6367: AND
6368: OR
6369: PUSH
6370: LD_EXP 12
6374: PUSH
6375: LD_EXP 7
6379: NOT
6380: PUSH
6381: LD_EXP 18
6385: PPUSH
6386: CALL_OW 303
6390: OR
6391: PUSH
6392: LD_EXP 18
6396: PPUSH
6397: CALL_OW 301
6401: OR
6402: AND
6403: OR
6404: PUSH
6405: LD_EXP 17
6409: PPUSH
6410: CALL_OW 301
6414: PUSH
6415: LD_EXP 18
6419: PPUSH
6420: CALL_OW 301
6424: AND
6425: OR
6426: IFFALSE 6317
// SaveVariable ( GetLives ( JMM ) , 01_JMMLifePoints_1 ) ;
6428: LD_EXP 16
6432: PPUSH
6433: CALL_OW 256
6437: PPUSH
6438: LD_STRING 01_JMMLifePoints_1
6440: PPUSH
6441: CALL_OW 39
// RemoveUnit ( JMM ) ;
6445: LD_EXP 16
6449: PPUSH
6450: CALL_OW 64
// to_reward := [ JMM ] ;
6454: LD_ADDR_VAR 0 2
6458: PUSH
6459: LD_EXP 16
6463: PUSH
6464: EMPTY
6465: LIST
6466: ST_TO_ADDR
// if bobby_saved then
6467: LD_EXP 12
6471: IFFALSE 6489
// to_reward := to_reward ^ Bobby ;
6473: LD_ADDR_VAR 0 2
6477: PUSH
6478: LD_VAR 0 2
6482: PUSH
6483: LD_EXP 17
6487: ADD
6488: ST_TO_ADDR
// if cyrus_saved then
6489: LD_EXP 13
6493: IFFALSE 6511
// to_reward := to_reward ^ Cyrus ;
6495: LD_ADDR_VAR 0 2
6499: PUSH
6500: LD_VAR 0 2
6504: PUSH
6505: LD_EXP 18
6509: ADD
6510: ST_TO_ADDR
// m1 := true ;
6511: LD_ADDR_VAR 0 4
6515: PUSH
6516: LD_INT 1
6518: ST_TO_ADDR
// m2 := bobby_saved ;
6519: LD_ADDR_VAR 0 5
6523: PUSH
6524: LD_EXP 12
6528: ST_TO_ADDR
// m3 := cyrus_saved ;
6529: LD_ADDR_VAR 0 6
6533: PUSH
6534: LD_EXP 13
6538: ST_TO_ADDR
// AddMedal ( JMM , 1 ) ;
6539: LD_STRING JMM
6541: PPUSH
6542: LD_INT 1
6544: PPUSH
6545: CALL_OW 101
// if not bobby_in_squad then
6549: LD_EXP 4
6553: NOT
6554: IFFALSE 6567
// AddMedal ( Bobby , - 1 ) ;
6556: LD_STRING Bobby
6558: PPUSH
6559: LD_INT 1
6561: NEG
6562: PPUSH
6563: CALL_OW 101
// if not bobby_saved and ( IsDying ( Bobby ) or IsDead ( Bobby ) ) then
6567: LD_EXP 12
6571: NOT
6572: PUSH
6573: LD_EXP 17
6577: PPUSH
6578: CALL_OW 303
6582: PUSH
6583: LD_EXP 17
6587: PPUSH
6588: CALL_OW 301
6592: OR
6593: AND
6594: IFFALSE 6607
// AddMedal ( Bobby , - 2 ) ;
6596: LD_STRING Bobby
6598: PPUSH
6599: LD_INT 2
6601: NEG
6602: PPUSH
6603: CALL_OW 101
// if not cyrus_in_squad then
6607: LD_EXP 7
6611: NOT
6612: IFFALSE 6625
// AddMedal ( Cyrus , - 1 ) ;
6614: LD_STRING Cyrus
6616: PPUSH
6617: LD_INT 1
6619: NEG
6620: PPUSH
6621: CALL_OW 101
// if not cyrus_saved and ( IsDying ( Cyrus ) or IsDead ( Cyrus ) ) then
6625: LD_EXP 13
6629: NOT
6630: PUSH
6631: LD_EXP 18
6635: PPUSH
6636: CALL_OW 303
6640: PUSH
6641: LD_EXP 18
6645: PPUSH
6646: CALL_OW 301
6650: OR
6651: AND
6652: IFFALSE 6665
// AddMedal ( Cyrus , - 2 ) ;
6654: LD_STRING Cyrus
6656: PPUSH
6657: LD_INT 2
6659: NEG
6660: PPUSH
6661: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 and m3 then
6665: LD_OWVAR 67
6669: PUSH
6670: LD_INT 3
6672: GREATEREQUAL
6673: PUSH
6674: LD_VAR 0 4
6678: AND
6679: PUSH
6680: LD_VAR 0 5
6684: AND
6685: PUSH
6686: LD_VAR 0 6
6690: AND
6691: IFFALSE 6703
// SetAchievementEX ( ACH_AMER , 1 ) ;
6693: LD_STRING ACH_AMER
6695: PPUSH
6696: LD_INT 1
6698: PPUSH
6699: CALL_OW 564
// GiveMedals ( MAIN ) ;
6703: LD_STRING MAIN
6705: PPUSH
6706: CALL_OW 102
// RewardPeople ( to_reward ) ;
6710: LD_VAR 0 2
6714: PPUSH
6715: CALL_OW 43
// if bobby_saved then
6719: LD_EXP 12
6723: IFFALSE 6743
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
6725: LD_EXP 17
6729: PPUSH
6730: LD_EXP 2
6734: PUSH
6735: LD_STRING Bobby
6737: STR
6738: PPUSH
6739: CALL_OW 38
// if cyrus_saved then
6743: LD_EXP 13
6747: IFFALSE 6767
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
6749: LD_EXP 18
6753: PPUSH
6754: LD_EXP 2
6758: PUSH
6759: LD_STRING Cyrus
6761: STR
6762: PPUSH
6763: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
6767: LD_EXP 16
6771: PPUSH
6772: LD_EXP 2
6776: PUSH
6777: LD_STRING JMM
6779: STR
6780: PPUSH
6781: CALL_OW 38
// if tick <= 3 3$00 then
6785: LD_OWVAR 1
6789: PUSH
6790: LD_INT 6300
6792: LESSEQUAL
6793: IFFALSE 6802
// SetAchievement ( ACH_ASPEED_1 ) ;
6795: LD_STRING ACH_ASPEED_1
6797: PPUSH
6798: CALL_OW 543
// ToLua ( enableBioCharacter(BIO_JMM) ) ;
6802: LD_STRING enableBioCharacter(BIO_JMM)
6804: PPUSH
6805: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_JOAN) ) ;
6809: LD_STRING enableBioCharacter(BIO_JOAN)
6811: PPUSH
6812: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_BARN) ) ;
6816: LD_STRING enableBioCharacter(BIO_BARN)
6818: PPUSH
6819: CALL_OW 559
// YouWin ;
6823: CALL_OW 103
// end ; end_of_file
6827: PPOPN 6
6829: END
// on UnitGoesToRed ( un ) do begin if un = JMM then
6830: LD_VAR 0 1
6834: PUSH
6835: LD_EXP 16
6839: EQUAL
6840: IFFALSE 6849
// YouLost ( JMM ) ;
6842: LD_STRING JMM
6844: PPUSH
6845: CALL_OW 104
// end ;
6849: PPOPN 1
6851: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
6852: LD_VAR 0 1
6856: PPUSH
6857: LD_VAR 0 2
6861: PPUSH
6862: CALL 22940 0 2
// end ;
6866: PPOPN 2
6868: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do var i ;
6869: LD_INT 0
6871: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) and killerSide = 1 then
6872: LD_VAR 0 1
6876: PUSH
6877: LD_INT 22
6879: PUSH
6880: LD_INT 1
6882: PUSH
6883: EMPTY
6884: LIST
6885: LIST
6886: PUSH
6887: LD_INT 23
6889: PUSH
6890: LD_INT 1
6892: PUSH
6893: EMPTY
6894: LIST
6895: LIST
6896: PUSH
6897: LD_INT 21
6899: PUSH
6900: LD_INT 1
6902: PUSH
6903: EMPTY
6904: LIST
6905: LIST
6906: PUSH
6907: EMPTY
6908: LIST
6909: LIST
6910: LIST
6911: PPUSH
6912: CALL_OW 69
6916: IN
6917: PUSH
6918: LD_VAR 0 2
6922: PUSH
6923: LD_INT 1
6925: EQUAL
6926: AND
6927: IFFALSE 6984
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_soldier ] ] ) do
6929: LD_ADDR_VAR 0 4
6933: PUSH
6934: LD_INT 22
6936: PUSH
6937: LD_INT 3
6939: PUSH
6940: EMPTY
6941: LIST
6942: LIST
6943: PUSH
6944: LD_INT 25
6946: PUSH
6947: LD_INT 1
6949: PUSH
6950: EMPTY
6951: LIST
6952: LIST
6953: PUSH
6954: EMPTY
6955: LIST
6956: LIST
6957: PPUSH
6958: CALL_OW 69
6962: PUSH
6963: FOR_IN
6964: IFFALSE 6982
// ComAttackUnit ( i , JMM ) ;
6966: LD_VAR 0 4
6970: PPUSH
6971: LD_EXP 16
6975: PPUSH
6976: CALL_OW 115
6980: GO 6963
6982: POP
6983: POP
// end ;
6984: PPOPN 4
6986: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
6987: LD_VAR 0 1
6991: PPUSH
6992: CALL 22820 0 1
// if un = JMM then
6996: LD_VAR 0 1
7000: PUSH
7001: LD_EXP 16
7005: EQUAL
7006: IFFALSE 7015
// YouLost ( JMM ) ;
7008: LD_STRING JMM
7010: PPUSH
7011: CALL_OW 104
// end ; end_of_file end_of_file
7015: PPOPN 1
7017: END
// export globalGameSaveCounter ; every 0 0$1 do
7018: GO 7020
7020: DISABLE
// begin enable ;
7021: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
7022: LD_STRING updateTimer(
7024: PUSH
7025: LD_OWVAR 1
7029: STR
7030: PUSH
7031: LD_STRING );
7033: STR
7034: PPUSH
7035: CALL_OW 559
// end ;
7039: END
// every 0 0$1 do
7040: GO 7042
7042: DISABLE
// begin globalGameSaveCounter := 0 ;
7043: LD_ADDR_EXP 28
7047: PUSH
7048: LD_INT 0
7050: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
7051: LD_STRING setGameSaveCounter(0)
7053: PPUSH
7054: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
7058: LD_STRING initStreamRollete();
7060: PPUSH
7061: CALL_OW 559
// InitStreamMode ;
7065: CALL 8391 0 0
// DefineStreamItems ( false ) ;
7069: LD_INT 0
7071: PPUSH
7072: CALL 8855 0 1
// end ;
7076: END
// export function SOS_MapStart ( ) ; begin
7077: LD_INT 0
7079: PPUSH
// if streamModeActive then
7080: LD_EXP 29
7084: IFFALSE 7093
// DefineStreamItems ( true ) ;
7086: LD_INT 1
7088: PPUSH
7089: CALL 8855 0 1
// UpdateLuaVariables ( ) ;
7093: CALL 7110 0 0
// UpdateFactoryWaypoints ( ) ;
7097: CALL 21724 0 0
// UpdateWarehouseGatheringPoints ( ) ;
7101: CALL 21981 0 0
// end ;
7105: LD_VAR 0 1
7109: RET
// function UpdateLuaVariables ( ) ; begin
7110: LD_INT 0
7112: PPUSH
// if globalGameSaveCounter then
7113: LD_EXP 28
7117: IFFALSE 7151
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
7119: LD_ADDR_EXP 28
7123: PUSH
7124: LD_EXP 28
7128: PPUSH
7129: CALL 66777 0 1
7133: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
7134: LD_STRING setGameSaveCounter(
7136: PUSH
7137: LD_EXP 28
7141: STR
7142: PUSH
7143: LD_STRING )
7145: STR
7146: PPUSH
7147: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
7151: LD_STRING setGameDifficulty(
7153: PUSH
7154: LD_OWVAR 67
7158: STR
7159: PUSH
7160: LD_STRING )
7162: STR
7163: PPUSH
7164: CALL_OW 559
// end ;
7168: LD_VAR 0 1
7172: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7173: LD_INT 0
7175: PPUSH
// if p2 = stream_mode then
7176: LD_VAR 0 2
7180: PUSH
7181: LD_INT 100
7183: EQUAL
7184: IFFALSE 8187
// begin if not StreamModeActive then
7186: LD_EXP 29
7190: NOT
7191: IFFALSE 7201
// StreamModeActive := true ;
7193: LD_ADDR_EXP 29
7197: PUSH
7198: LD_INT 1
7200: ST_TO_ADDR
// if p3 = 0 then
7201: LD_VAR 0 3
7205: PUSH
7206: LD_INT 0
7208: EQUAL
7209: IFFALSE 7215
// InitStreamMode ;
7211: CALL 8391 0 0
// if p3 = 1 then
7215: LD_VAR 0 3
7219: PUSH
7220: LD_INT 1
7222: EQUAL
7223: IFFALSE 7233
// sRocket := true ;
7225: LD_ADDR_EXP 34
7229: PUSH
7230: LD_INT 1
7232: ST_TO_ADDR
// if p3 = 2 then
7233: LD_VAR 0 3
7237: PUSH
7238: LD_INT 2
7240: EQUAL
7241: IFFALSE 7251
// sSpeed := true ;
7243: LD_ADDR_EXP 33
7247: PUSH
7248: LD_INT 1
7250: ST_TO_ADDR
// if p3 = 3 then
7251: LD_VAR 0 3
7255: PUSH
7256: LD_INT 3
7258: EQUAL
7259: IFFALSE 7269
// sEngine := true ;
7261: LD_ADDR_EXP 35
7265: PUSH
7266: LD_INT 1
7268: ST_TO_ADDR
// if p3 = 4 then
7269: LD_VAR 0 3
7273: PUSH
7274: LD_INT 4
7276: EQUAL
7277: IFFALSE 7287
// sSpec := true ;
7279: LD_ADDR_EXP 32
7283: PUSH
7284: LD_INT 1
7286: ST_TO_ADDR
// if p3 = 5 then
7287: LD_VAR 0 3
7291: PUSH
7292: LD_INT 5
7294: EQUAL
7295: IFFALSE 7305
// sLevel := true ;
7297: LD_ADDR_EXP 36
7301: PUSH
7302: LD_INT 1
7304: ST_TO_ADDR
// if p3 = 6 then
7305: LD_VAR 0 3
7309: PUSH
7310: LD_INT 6
7312: EQUAL
7313: IFFALSE 7323
// sArmoury := true ;
7315: LD_ADDR_EXP 37
7319: PUSH
7320: LD_INT 1
7322: ST_TO_ADDR
// if p3 = 7 then
7323: LD_VAR 0 3
7327: PUSH
7328: LD_INT 7
7330: EQUAL
7331: IFFALSE 7341
// sRadar := true ;
7333: LD_ADDR_EXP 38
7337: PUSH
7338: LD_INT 1
7340: ST_TO_ADDR
// if p3 = 8 then
7341: LD_VAR 0 3
7345: PUSH
7346: LD_INT 8
7348: EQUAL
7349: IFFALSE 7359
// sBunker := true ;
7351: LD_ADDR_EXP 39
7355: PUSH
7356: LD_INT 1
7358: ST_TO_ADDR
// if p3 = 9 then
7359: LD_VAR 0 3
7363: PUSH
7364: LD_INT 9
7366: EQUAL
7367: IFFALSE 7377
// sHack := true ;
7369: LD_ADDR_EXP 40
7373: PUSH
7374: LD_INT 1
7376: ST_TO_ADDR
// if p3 = 10 then
7377: LD_VAR 0 3
7381: PUSH
7382: LD_INT 10
7384: EQUAL
7385: IFFALSE 7395
// sFire := true ;
7387: LD_ADDR_EXP 41
7391: PUSH
7392: LD_INT 1
7394: ST_TO_ADDR
// if p3 = 11 then
7395: LD_VAR 0 3
7399: PUSH
7400: LD_INT 11
7402: EQUAL
7403: IFFALSE 7413
// sRefresh := true ;
7405: LD_ADDR_EXP 42
7409: PUSH
7410: LD_INT 1
7412: ST_TO_ADDR
// if p3 = 12 then
7413: LD_VAR 0 3
7417: PUSH
7418: LD_INT 12
7420: EQUAL
7421: IFFALSE 7431
// sExp := true ;
7423: LD_ADDR_EXP 43
7427: PUSH
7428: LD_INT 1
7430: ST_TO_ADDR
// if p3 = 13 then
7431: LD_VAR 0 3
7435: PUSH
7436: LD_INT 13
7438: EQUAL
7439: IFFALSE 7449
// sDepot := true ;
7441: LD_ADDR_EXP 44
7445: PUSH
7446: LD_INT 1
7448: ST_TO_ADDR
// if p3 = 14 then
7449: LD_VAR 0 3
7453: PUSH
7454: LD_INT 14
7456: EQUAL
7457: IFFALSE 7467
// sFlag := true ;
7459: LD_ADDR_EXP 45
7463: PUSH
7464: LD_INT 1
7466: ST_TO_ADDR
// if p3 = 15 then
7467: LD_VAR 0 3
7471: PUSH
7472: LD_INT 15
7474: EQUAL
7475: IFFALSE 7485
// sKamikadze := true ;
7477: LD_ADDR_EXP 53
7481: PUSH
7482: LD_INT 1
7484: ST_TO_ADDR
// if p3 = 16 then
7485: LD_VAR 0 3
7489: PUSH
7490: LD_INT 16
7492: EQUAL
7493: IFFALSE 7503
// sTroll := true ;
7495: LD_ADDR_EXP 54
7499: PUSH
7500: LD_INT 1
7502: ST_TO_ADDR
// if p3 = 17 then
7503: LD_VAR 0 3
7507: PUSH
7508: LD_INT 17
7510: EQUAL
7511: IFFALSE 7521
// sSlow := true ;
7513: LD_ADDR_EXP 55
7517: PUSH
7518: LD_INT 1
7520: ST_TO_ADDR
// if p3 = 18 then
7521: LD_VAR 0 3
7525: PUSH
7526: LD_INT 18
7528: EQUAL
7529: IFFALSE 7539
// sLack := true ;
7531: LD_ADDR_EXP 56
7535: PUSH
7536: LD_INT 1
7538: ST_TO_ADDR
// if p3 = 19 then
7539: LD_VAR 0 3
7543: PUSH
7544: LD_INT 19
7546: EQUAL
7547: IFFALSE 7557
// sTank := true ;
7549: LD_ADDR_EXP 58
7553: PUSH
7554: LD_INT 1
7556: ST_TO_ADDR
// if p3 = 20 then
7557: LD_VAR 0 3
7561: PUSH
7562: LD_INT 20
7564: EQUAL
7565: IFFALSE 7575
// sRemote := true ;
7567: LD_ADDR_EXP 59
7571: PUSH
7572: LD_INT 1
7574: ST_TO_ADDR
// if p3 = 21 then
7575: LD_VAR 0 3
7579: PUSH
7580: LD_INT 21
7582: EQUAL
7583: IFFALSE 7593
// sPowell := true ;
7585: LD_ADDR_EXP 60
7589: PUSH
7590: LD_INT 1
7592: ST_TO_ADDR
// if p3 = 22 then
7593: LD_VAR 0 3
7597: PUSH
7598: LD_INT 22
7600: EQUAL
7601: IFFALSE 7611
// sTeleport := true ;
7603: LD_ADDR_EXP 63
7607: PUSH
7608: LD_INT 1
7610: ST_TO_ADDR
// if p3 = 23 then
7611: LD_VAR 0 3
7615: PUSH
7616: LD_INT 23
7618: EQUAL
7619: IFFALSE 7629
// sOilTower := true ;
7621: LD_ADDR_EXP 65
7625: PUSH
7626: LD_INT 1
7628: ST_TO_ADDR
// if p3 = 24 then
7629: LD_VAR 0 3
7633: PUSH
7634: LD_INT 24
7636: EQUAL
7637: IFFALSE 7647
// sShovel := true ;
7639: LD_ADDR_EXP 66
7643: PUSH
7644: LD_INT 1
7646: ST_TO_ADDR
// if p3 = 25 then
7647: LD_VAR 0 3
7651: PUSH
7652: LD_INT 25
7654: EQUAL
7655: IFFALSE 7665
// sSheik := true ;
7657: LD_ADDR_EXP 67
7661: PUSH
7662: LD_INT 1
7664: ST_TO_ADDR
// if p3 = 26 then
7665: LD_VAR 0 3
7669: PUSH
7670: LD_INT 26
7672: EQUAL
7673: IFFALSE 7683
// sEarthquake := true ;
7675: LD_ADDR_EXP 69
7679: PUSH
7680: LD_INT 1
7682: ST_TO_ADDR
// if p3 = 27 then
7683: LD_VAR 0 3
7687: PUSH
7688: LD_INT 27
7690: EQUAL
7691: IFFALSE 7701
// sAI := true ;
7693: LD_ADDR_EXP 70
7697: PUSH
7698: LD_INT 1
7700: ST_TO_ADDR
// if p3 = 28 then
7701: LD_VAR 0 3
7705: PUSH
7706: LD_INT 28
7708: EQUAL
7709: IFFALSE 7719
// sCargo := true ;
7711: LD_ADDR_EXP 73
7715: PUSH
7716: LD_INT 1
7718: ST_TO_ADDR
// if p3 = 29 then
7719: LD_VAR 0 3
7723: PUSH
7724: LD_INT 29
7726: EQUAL
7727: IFFALSE 7737
// sDLaser := true ;
7729: LD_ADDR_EXP 74
7733: PUSH
7734: LD_INT 1
7736: ST_TO_ADDR
// if p3 = 30 then
7737: LD_VAR 0 3
7741: PUSH
7742: LD_INT 30
7744: EQUAL
7745: IFFALSE 7755
// sExchange := true ;
7747: LD_ADDR_EXP 75
7751: PUSH
7752: LD_INT 1
7754: ST_TO_ADDR
// if p3 = 31 then
7755: LD_VAR 0 3
7759: PUSH
7760: LD_INT 31
7762: EQUAL
7763: IFFALSE 7773
// sFac := true ;
7765: LD_ADDR_EXP 76
7769: PUSH
7770: LD_INT 1
7772: ST_TO_ADDR
// if p3 = 32 then
7773: LD_VAR 0 3
7777: PUSH
7778: LD_INT 32
7780: EQUAL
7781: IFFALSE 7791
// sPower := true ;
7783: LD_ADDR_EXP 77
7787: PUSH
7788: LD_INT 1
7790: ST_TO_ADDR
// if p3 = 33 then
7791: LD_VAR 0 3
7795: PUSH
7796: LD_INT 33
7798: EQUAL
7799: IFFALSE 7809
// sRandom := true ;
7801: LD_ADDR_EXP 78
7805: PUSH
7806: LD_INT 1
7808: ST_TO_ADDR
// if p3 = 34 then
7809: LD_VAR 0 3
7813: PUSH
7814: LD_INT 34
7816: EQUAL
7817: IFFALSE 7827
// sShield := true ;
7819: LD_ADDR_EXP 79
7823: PUSH
7824: LD_INT 1
7826: ST_TO_ADDR
// if p3 = 35 then
7827: LD_VAR 0 3
7831: PUSH
7832: LD_INT 35
7834: EQUAL
7835: IFFALSE 7845
// sTime := true ;
7837: LD_ADDR_EXP 80
7841: PUSH
7842: LD_INT 1
7844: ST_TO_ADDR
// if p3 = 36 then
7845: LD_VAR 0 3
7849: PUSH
7850: LD_INT 36
7852: EQUAL
7853: IFFALSE 7863
// sTools := true ;
7855: LD_ADDR_EXP 81
7859: PUSH
7860: LD_INT 1
7862: ST_TO_ADDR
// if p3 = 101 then
7863: LD_VAR 0 3
7867: PUSH
7868: LD_INT 101
7870: EQUAL
7871: IFFALSE 7881
// sSold := true ;
7873: LD_ADDR_EXP 46
7877: PUSH
7878: LD_INT 1
7880: ST_TO_ADDR
// if p3 = 102 then
7881: LD_VAR 0 3
7885: PUSH
7886: LD_INT 102
7888: EQUAL
7889: IFFALSE 7899
// sDiff := true ;
7891: LD_ADDR_EXP 47
7895: PUSH
7896: LD_INT 1
7898: ST_TO_ADDR
// if p3 = 103 then
7899: LD_VAR 0 3
7903: PUSH
7904: LD_INT 103
7906: EQUAL
7907: IFFALSE 7917
// sFog := true ;
7909: LD_ADDR_EXP 50
7913: PUSH
7914: LD_INT 1
7916: ST_TO_ADDR
// if p3 = 104 then
7917: LD_VAR 0 3
7921: PUSH
7922: LD_INT 104
7924: EQUAL
7925: IFFALSE 7935
// sReset := true ;
7927: LD_ADDR_EXP 51
7931: PUSH
7932: LD_INT 1
7934: ST_TO_ADDR
// if p3 = 105 then
7935: LD_VAR 0 3
7939: PUSH
7940: LD_INT 105
7942: EQUAL
7943: IFFALSE 7953
// sSun := true ;
7945: LD_ADDR_EXP 52
7949: PUSH
7950: LD_INT 1
7952: ST_TO_ADDR
// if p3 = 106 then
7953: LD_VAR 0 3
7957: PUSH
7958: LD_INT 106
7960: EQUAL
7961: IFFALSE 7971
// sTiger := true ;
7963: LD_ADDR_EXP 48
7967: PUSH
7968: LD_INT 1
7970: ST_TO_ADDR
// if p3 = 107 then
7971: LD_VAR 0 3
7975: PUSH
7976: LD_INT 107
7978: EQUAL
7979: IFFALSE 7989
// sBomb := true ;
7981: LD_ADDR_EXP 49
7985: PUSH
7986: LD_INT 1
7988: ST_TO_ADDR
// if p3 = 108 then
7989: LD_VAR 0 3
7993: PUSH
7994: LD_INT 108
7996: EQUAL
7997: IFFALSE 8007
// sWound := true ;
7999: LD_ADDR_EXP 57
8003: PUSH
8004: LD_INT 1
8006: ST_TO_ADDR
// if p3 = 109 then
8007: LD_VAR 0 3
8011: PUSH
8012: LD_INT 109
8014: EQUAL
8015: IFFALSE 8025
// sBetray := true ;
8017: LD_ADDR_EXP 61
8021: PUSH
8022: LD_INT 1
8024: ST_TO_ADDR
// if p3 = 110 then
8025: LD_VAR 0 3
8029: PUSH
8030: LD_INT 110
8032: EQUAL
8033: IFFALSE 8043
// sContamin := true ;
8035: LD_ADDR_EXP 62
8039: PUSH
8040: LD_INT 1
8042: ST_TO_ADDR
// if p3 = 111 then
8043: LD_VAR 0 3
8047: PUSH
8048: LD_INT 111
8050: EQUAL
8051: IFFALSE 8061
// sOil := true ;
8053: LD_ADDR_EXP 64
8057: PUSH
8058: LD_INT 1
8060: ST_TO_ADDR
// if p3 = 112 then
8061: LD_VAR 0 3
8065: PUSH
8066: LD_INT 112
8068: EQUAL
8069: IFFALSE 8079
// sStu := true ;
8071: LD_ADDR_EXP 68
8075: PUSH
8076: LD_INT 1
8078: ST_TO_ADDR
// if p3 = 113 then
8079: LD_VAR 0 3
8083: PUSH
8084: LD_INT 113
8086: EQUAL
8087: IFFALSE 8097
// sBazooka := true ;
8089: LD_ADDR_EXP 71
8093: PUSH
8094: LD_INT 1
8096: ST_TO_ADDR
// if p3 = 114 then
8097: LD_VAR 0 3
8101: PUSH
8102: LD_INT 114
8104: EQUAL
8105: IFFALSE 8115
// sMortar := true ;
8107: LD_ADDR_EXP 72
8111: PUSH
8112: LD_INT 1
8114: ST_TO_ADDR
// if p3 = 115 then
8115: LD_VAR 0 3
8119: PUSH
8120: LD_INT 115
8122: EQUAL
8123: IFFALSE 8133
// sRanger := true ;
8125: LD_ADDR_EXP 82
8129: PUSH
8130: LD_INT 1
8132: ST_TO_ADDR
// if p3 = 116 then
8133: LD_VAR 0 3
8137: PUSH
8138: LD_INT 116
8140: EQUAL
8141: IFFALSE 8151
// sComputer := true ;
8143: LD_ADDR_EXP 83
8147: PUSH
8148: LD_INT 1
8150: ST_TO_ADDR
// if p3 = 117 then
8151: LD_VAR 0 3
8155: PUSH
8156: LD_INT 117
8158: EQUAL
8159: IFFALSE 8169
// s30 := true ;
8161: LD_ADDR_EXP 84
8165: PUSH
8166: LD_INT 1
8168: ST_TO_ADDR
// if p3 = 118 then
8169: LD_VAR 0 3
8173: PUSH
8174: LD_INT 118
8176: EQUAL
8177: IFFALSE 8187
// s60 := true ;
8179: LD_ADDR_EXP 85
8183: PUSH
8184: LD_INT 1
8186: ST_TO_ADDR
// end ; if p2 = hack_mode then
8187: LD_VAR 0 2
8191: PUSH
8192: LD_INT 101
8194: EQUAL
8195: IFFALSE 8323
// begin case p3 of 1 :
8197: LD_VAR 0 3
8201: PUSH
8202: LD_INT 1
8204: DOUBLE
8205: EQUAL
8206: IFTRUE 8210
8208: GO 8217
8210: POP
// hHackUnlimitedResources ; 2 :
8211: CALL 20470 0 0
8215: GO 8323
8217: LD_INT 2
8219: DOUBLE
8220: EQUAL
8221: IFTRUE 8225
8223: GO 8232
8225: POP
// hHackSetLevel10 ; 3 :
8226: CALL 20603 0 0
8230: GO 8323
8232: LD_INT 3
8234: DOUBLE
8235: EQUAL
8236: IFTRUE 8240
8238: GO 8247
8240: POP
// hHackSetLevel10YourUnits ; 4 :
8241: CALL 20688 0 0
8245: GO 8323
8247: LD_INT 4
8249: DOUBLE
8250: EQUAL
8251: IFTRUE 8255
8253: GO 8262
8255: POP
// hHackInvincible ; 5 :
8256: CALL 21136 0 0
8260: GO 8323
8262: LD_INT 5
8264: DOUBLE
8265: EQUAL
8266: IFTRUE 8270
8268: GO 8277
8270: POP
// hHackInvisible ; 6 :
8271: CALL 21247 0 0
8275: GO 8323
8277: LD_INT 6
8279: DOUBLE
8280: EQUAL
8281: IFTRUE 8285
8283: GO 8292
8285: POP
// hHackChangeYourSide ; 7 :
8286: CALL 21304 0 0
8290: GO 8323
8292: LD_INT 7
8294: DOUBLE
8295: EQUAL
8296: IFTRUE 8300
8298: GO 8307
8300: POP
// hHackChangeUnitSide ; 8 :
8301: CALL 21346 0 0
8305: GO 8323
8307: LD_INT 8
8309: DOUBLE
8310: EQUAL
8311: IFTRUE 8315
8313: GO 8322
8315: POP
// hHackFog ; end ;
8316: CALL 21447 0 0
8320: GO 8323
8322: POP
// end ; if p2 = game_save_mode then
8323: LD_VAR 0 2
8327: PUSH
8328: LD_INT 102
8330: EQUAL
8331: IFFALSE 8386
// begin if p3 = 1 then
8333: LD_VAR 0 3
8337: PUSH
8338: LD_INT 1
8340: EQUAL
8341: IFFALSE 8353
// globalGameSaveCounter := p4 ;
8343: LD_ADDR_EXP 28
8347: PUSH
8348: LD_VAR 0 4
8352: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
8353: LD_VAR 0 3
8357: PUSH
8358: LD_INT 2
8360: EQUAL
8361: PUSH
8362: LD_EXP 28
8366: AND
8367: IFFALSE 8386
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
8369: LD_STRING setGameSaveCounter(
8371: PUSH
8372: LD_EXP 28
8376: STR
8377: PUSH
8378: LD_STRING )
8380: STR
8381: PPUSH
8382: CALL_OW 559
// end ; end ;
8386: LD_VAR 0 7
8390: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
8391: LD_INT 0
8393: PPUSH
// streamModeActive := false ;
8394: LD_ADDR_EXP 29
8398: PUSH
8399: LD_INT 0
8401: ST_TO_ADDR
// normalCounter := 36 ;
8402: LD_ADDR_EXP 30
8406: PUSH
8407: LD_INT 36
8409: ST_TO_ADDR
// hardcoreCounter := 18 ;
8410: LD_ADDR_EXP 31
8414: PUSH
8415: LD_INT 18
8417: ST_TO_ADDR
// sRocket := false ;
8418: LD_ADDR_EXP 34
8422: PUSH
8423: LD_INT 0
8425: ST_TO_ADDR
// sSpeed := false ;
8426: LD_ADDR_EXP 33
8430: PUSH
8431: LD_INT 0
8433: ST_TO_ADDR
// sEngine := false ;
8434: LD_ADDR_EXP 35
8438: PUSH
8439: LD_INT 0
8441: ST_TO_ADDR
// sSpec := false ;
8442: LD_ADDR_EXP 32
8446: PUSH
8447: LD_INT 0
8449: ST_TO_ADDR
// sLevel := false ;
8450: LD_ADDR_EXP 36
8454: PUSH
8455: LD_INT 0
8457: ST_TO_ADDR
// sArmoury := false ;
8458: LD_ADDR_EXP 37
8462: PUSH
8463: LD_INT 0
8465: ST_TO_ADDR
// sRadar := false ;
8466: LD_ADDR_EXP 38
8470: PUSH
8471: LD_INT 0
8473: ST_TO_ADDR
// sBunker := false ;
8474: LD_ADDR_EXP 39
8478: PUSH
8479: LD_INT 0
8481: ST_TO_ADDR
// sHack := false ;
8482: LD_ADDR_EXP 40
8486: PUSH
8487: LD_INT 0
8489: ST_TO_ADDR
// sFire := false ;
8490: LD_ADDR_EXP 41
8494: PUSH
8495: LD_INT 0
8497: ST_TO_ADDR
// sRefresh := false ;
8498: LD_ADDR_EXP 42
8502: PUSH
8503: LD_INT 0
8505: ST_TO_ADDR
// sExp := false ;
8506: LD_ADDR_EXP 43
8510: PUSH
8511: LD_INT 0
8513: ST_TO_ADDR
// sDepot := false ;
8514: LD_ADDR_EXP 44
8518: PUSH
8519: LD_INT 0
8521: ST_TO_ADDR
// sFlag := false ;
8522: LD_ADDR_EXP 45
8526: PUSH
8527: LD_INT 0
8529: ST_TO_ADDR
// sKamikadze := false ;
8530: LD_ADDR_EXP 53
8534: PUSH
8535: LD_INT 0
8537: ST_TO_ADDR
// sTroll := false ;
8538: LD_ADDR_EXP 54
8542: PUSH
8543: LD_INT 0
8545: ST_TO_ADDR
// sSlow := false ;
8546: LD_ADDR_EXP 55
8550: PUSH
8551: LD_INT 0
8553: ST_TO_ADDR
// sLack := false ;
8554: LD_ADDR_EXP 56
8558: PUSH
8559: LD_INT 0
8561: ST_TO_ADDR
// sTank := false ;
8562: LD_ADDR_EXP 58
8566: PUSH
8567: LD_INT 0
8569: ST_TO_ADDR
// sRemote := false ;
8570: LD_ADDR_EXP 59
8574: PUSH
8575: LD_INT 0
8577: ST_TO_ADDR
// sPowell := false ;
8578: LD_ADDR_EXP 60
8582: PUSH
8583: LD_INT 0
8585: ST_TO_ADDR
// sTeleport := false ;
8586: LD_ADDR_EXP 63
8590: PUSH
8591: LD_INT 0
8593: ST_TO_ADDR
// sOilTower := false ;
8594: LD_ADDR_EXP 65
8598: PUSH
8599: LD_INT 0
8601: ST_TO_ADDR
// sShovel := false ;
8602: LD_ADDR_EXP 66
8606: PUSH
8607: LD_INT 0
8609: ST_TO_ADDR
// sSheik := false ;
8610: LD_ADDR_EXP 67
8614: PUSH
8615: LD_INT 0
8617: ST_TO_ADDR
// sEarthquake := false ;
8618: LD_ADDR_EXP 69
8622: PUSH
8623: LD_INT 0
8625: ST_TO_ADDR
// sAI := false ;
8626: LD_ADDR_EXP 70
8630: PUSH
8631: LD_INT 0
8633: ST_TO_ADDR
// sCargo := false ;
8634: LD_ADDR_EXP 73
8638: PUSH
8639: LD_INT 0
8641: ST_TO_ADDR
// sDLaser := false ;
8642: LD_ADDR_EXP 74
8646: PUSH
8647: LD_INT 0
8649: ST_TO_ADDR
// sExchange := false ;
8650: LD_ADDR_EXP 75
8654: PUSH
8655: LD_INT 0
8657: ST_TO_ADDR
// sFac := false ;
8658: LD_ADDR_EXP 76
8662: PUSH
8663: LD_INT 0
8665: ST_TO_ADDR
// sPower := false ;
8666: LD_ADDR_EXP 77
8670: PUSH
8671: LD_INT 0
8673: ST_TO_ADDR
// sRandom := false ;
8674: LD_ADDR_EXP 78
8678: PUSH
8679: LD_INT 0
8681: ST_TO_ADDR
// sShield := false ;
8682: LD_ADDR_EXP 79
8686: PUSH
8687: LD_INT 0
8689: ST_TO_ADDR
// sTime := false ;
8690: LD_ADDR_EXP 80
8694: PUSH
8695: LD_INT 0
8697: ST_TO_ADDR
// sTools := false ;
8698: LD_ADDR_EXP 81
8702: PUSH
8703: LD_INT 0
8705: ST_TO_ADDR
// sSold := false ;
8706: LD_ADDR_EXP 46
8710: PUSH
8711: LD_INT 0
8713: ST_TO_ADDR
// sDiff := false ;
8714: LD_ADDR_EXP 47
8718: PUSH
8719: LD_INT 0
8721: ST_TO_ADDR
// sFog := false ;
8722: LD_ADDR_EXP 50
8726: PUSH
8727: LD_INT 0
8729: ST_TO_ADDR
// sReset := false ;
8730: LD_ADDR_EXP 51
8734: PUSH
8735: LD_INT 0
8737: ST_TO_ADDR
// sSun := false ;
8738: LD_ADDR_EXP 52
8742: PUSH
8743: LD_INT 0
8745: ST_TO_ADDR
// sTiger := false ;
8746: LD_ADDR_EXP 48
8750: PUSH
8751: LD_INT 0
8753: ST_TO_ADDR
// sBomb := false ;
8754: LD_ADDR_EXP 49
8758: PUSH
8759: LD_INT 0
8761: ST_TO_ADDR
// sWound := false ;
8762: LD_ADDR_EXP 57
8766: PUSH
8767: LD_INT 0
8769: ST_TO_ADDR
// sBetray := false ;
8770: LD_ADDR_EXP 61
8774: PUSH
8775: LD_INT 0
8777: ST_TO_ADDR
// sContamin := false ;
8778: LD_ADDR_EXP 62
8782: PUSH
8783: LD_INT 0
8785: ST_TO_ADDR
// sOil := false ;
8786: LD_ADDR_EXP 64
8790: PUSH
8791: LD_INT 0
8793: ST_TO_ADDR
// sStu := false ;
8794: LD_ADDR_EXP 68
8798: PUSH
8799: LD_INT 0
8801: ST_TO_ADDR
// sBazooka := false ;
8802: LD_ADDR_EXP 71
8806: PUSH
8807: LD_INT 0
8809: ST_TO_ADDR
// sMortar := false ;
8810: LD_ADDR_EXP 72
8814: PUSH
8815: LD_INT 0
8817: ST_TO_ADDR
// sRanger := false ;
8818: LD_ADDR_EXP 82
8822: PUSH
8823: LD_INT 0
8825: ST_TO_ADDR
// sComputer := false ;
8826: LD_ADDR_EXP 83
8830: PUSH
8831: LD_INT 0
8833: ST_TO_ADDR
// s30 := false ;
8834: LD_ADDR_EXP 84
8838: PUSH
8839: LD_INT 0
8841: ST_TO_ADDR
// s60 := false ;
8842: LD_ADDR_EXP 85
8846: PUSH
8847: LD_INT 0
8849: ST_TO_ADDR
// end ;
8850: LD_VAR 0 1
8854: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
8855: LD_INT 0
8857: PPUSH
8858: PPUSH
8859: PPUSH
8860: PPUSH
8861: PPUSH
8862: PPUSH
8863: PPUSH
// result := [ ] ;
8864: LD_ADDR_VAR 0 2
8868: PUSH
8869: EMPTY
8870: ST_TO_ADDR
// if campaign_id = 1 then
8871: LD_OWVAR 69
8875: PUSH
8876: LD_INT 1
8878: EQUAL
8879: IFFALSE 12045
// begin case mission_number of 1 :
8881: LD_OWVAR 70
8885: PUSH
8886: LD_INT 1
8888: DOUBLE
8889: EQUAL
8890: IFTRUE 8894
8892: GO 8970
8894: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
8895: LD_ADDR_VAR 0 2
8899: PUSH
8900: LD_INT 2
8902: PUSH
8903: LD_INT 4
8905: PUSH
8906: LD_INT 11
8908: PUSH
8909: LD_INT 12
8911: PUSH
8912: LD_INT 15
8914: PUSH
8915: LD_INT 16
8917: PUSH
8918: LD_INT 22
8920: PUSH
8921: LD_INT 23
8923: PUSH
8924: LD_INT 26
8926: PUSH
8927: EMPTY
8928: LIST
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: LIST
8937: PUSH
8938: LD_INT 101
8940: PUSH
8941: LD_INT 102
8943: PUSH
8944: LD_INT 106
8946: PUSH
8947: LD_INT 116
8949: PUSH
8950: LD_INT 117
8952: PUSH
8953: LD_INT 118
8955: PUSH
8956: EMPTY
8957: LIST
8958: LIST
8959: LIST
8960: LIST
8961: LIST
8962: LIST
8963: PUSH
8964: EMPTY
8965: LIST
8966: LIST
8967: ST_TO_ADDR
8968: GO 12043
8970: LD_INT 2
8972: DOUBLE
8973: EQUAL
8974: IFTRUE 8978
8976: GO 9062
8978: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
8979: LD_ADDR_VAR 0 2
8983: PUSH
8984: LD_INT 2
8986: PUSH
8987: LD_INT 4
8989: PUSH
8990: LD_INT 11
8992: PUSH
8993: LD_INT 12
8995: PUSH
8996: LD_INT 15
8998: PUSH
8999: LD_INT 16
9001: PUSH
9002: LD_INT 22
9004: PUSH
9005: LD_INT 23
9007: PUSH
9008: LD_INT 26
9010: PUSH
9011: EMPTY
9012: LIST
9013: LIST
9014: LIST
9015: LIST
9016: LIST
9017: LIST
9018: LIST
9019: LIST
9020: LIST
9021: PUSH
9022: LD_INT 101
9024: PUSH
9025: LD_INT 102
9027: PUSH
9028: LD_INT 105
9030: PUSH
9031: LD_INT 106
9033: PUSH
9034: LD_INT 108
9036: PUSH
9037: LD_INT 116
9039: PUSH
9040: LD_INT 117
9042: PUSH
9043: LD_INT 118
9045: PUSH
9046: EMPTY
9047: LIST
9048: LIST
9049: LIST
9050: LIST
9051: LIST
9052: LIST
9053: LIST
9054: LIST
9055: PUSH
9056: EMPTY
9057: LIST
9058: LIST
9059: ST_TO_ADDR
9060: GO 12043
9062: LD_INT 3
9064: DOUBLE
9065: EQUAL
9066: IFTRUE 9070
9068: GO 9158
9070: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9071: LD_ADDR_VAR 0 2
9075: PUSH
9076: LD_INT 2
9078: PUSH
9079: LD_INT 4
9081: PUSH
9082: LD_INT 5
9084: PUSH
9085: LD_INT 11
9087: PUSH
9088: LD_INT 12
9090: PUSH
9091: LD_INT 15
9093: PUSH
9094: LD_INT 16
9096: PUSH
9097: LD_INT 22
9099: PUSH
9100: LD_INT 26
9102: PUSH
9103: LD_INT 36
9105: PUSH
9106: EMPTY
9107: LIST
9108: LIST
9109: LIST
9110: LIST
9111: LIST
9112: LIST
9113: LIST
9114: LIST
9115: LIST
9116: LIST
9117: PUSH
9118: LD_INT 101
9120: PUSH
9121: LD_INT 102
9123: PUSH
9124: LD_INT 105
9126: PUSH
9127: LD_INT 106
9129: PUSH
9130: LD_INT 108
9132: PUSH
9133: LD_INT 116
9135: PUSH
9136: LD_INT 117
9138: PUSH
9139: LD_INT 118
9141: PUSH
9142: EMPTY
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: PUSH
9152: EMPTY
9153: LIST
9154: LIST
9155: ST_TO_ADDR
9156: GO 12043
9158: LD_INT 4
9160: DOUBLE
9161: EQUAL
9162: IFTRUE 9166
9164: GO 9262
9166: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9167: LD_ADDR_VAR 0 2
9171: PUSH
9172: LD_INT 2
9174: PUSH
9175: LD_INT 4
9177: PUSH
9178: LD_INT 5
9180: PUSH
9181: LD_INT 8
9183: PUSH
9184: LD_INT 11
9186: PUSH
9187: LD_INT 12
9189: PUSH
9190: LD_INT 15
9192: PUSH
9193: LD_INT 16
9195: PUSH
9196: LD_INT 22
9198: PUSH
9199: LD_INT 23
9201: PUSH
9202: LD_INT 26
9204: PUSH
9205: LD_INT 36
9207: PUSH
9208: EMPTY
9209: LIST
9210: LIST
9211: LIST
9212: LIST
9213: LIST
9214: LIST
9215: LIST
9216: LIST
9217: LIST
9218: LIST
9219: LIST
9220: LIST
9221: PUSH
9222: LD_INT 101
9224: PUSH
9225: LD_INT 102
9227: PUSH
9228: LD_INT 105
9230: PUSH
9231: LD_INT 106
9233: PUSH
9234: LD_INT 108
9236: PUSH
9237: LD_INT 116
9239: PUSH
9240: LD_INT 117
9242: PUSH
9243: LD_INT 118
9245: PUSH
9246: EMPTY
9247: LIST
9248: LIST
9249: LIST
9250: LIST
9251: LIST
9252: LIST
9253: LIST
9254: LIST
9255: PUSH
9256: EMPTY
9257: LIST
9258: LIST
9259: ST_TO_ADDR
9260: GO 12043
9262: LD_INT 5
9264: DOUBLE
9265: EQUAL
9266: IFTRUE 9270
9268: GO 9382
9270: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9271: LD_ADDR_VAR 0 2
9275: PUSH
9276: LD_INT 2
9278: PUSH
9279: LD_INT 4
9281: PUSH
9282: LD_INT 5
9284: PUSH
9285: LD_INT 6
9287: PUSH
9288: LD_INT 8
9290: PUSH
9291: LD_INT 11
9293: PUSH
9294: LD_INT 12
9296: PUSH
9297: LD_INT 15
9299: PUSH
9300: LD_INT 16
9302: PUSH
9303: LD_INT 22
9305: PUSH
9306: LD_INT 23
9308: PUSH
9309: LD_INT 25
9311: PUSH
9312: LD_INT 26
9314: PUSH
9315: LD_INT 36
9317: PUSH
9318: EMPTY
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: LIST
9324: LIST
9325: LIST
9326: LIST
9327: LIST
9328: LIST
9329: LIST
9330: LIST
9331: LIST
9332: LIST
9333: PUSH
9334: LD_INT 101
9336: PUSH
9337: LD_INT 102
9339: PUSH
9340: LD_INT 105
9342: PUSH
9343: LD_INT 106
9345: PUSH
9346: LD_INT 108
9348: PUSH
9349: LD_INT 109
9351: PUSH
9352: LD_INT 112
9354: PUSH
9355: LD_INT 116
9357: PUSH
9358: LD_INT 117
9360: PUSH
9361: LD_INT 118
9363: PUSH
9364: EMPTY
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: PUSH
9376: EMPTY
9377: LIST
9378: LIST
9379: ST_TO_ADDR
9380: GO 12043
9382: LD_INT 6
9384: DOUBLE
9385: EQUAL
9386: IFTRUE 9390
9388: GO 9522
9390: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
9391: LD_ADDR_VAR 0 2
9395: PUSH
9396: LD_INT 2
9398: PUSH
9399: LD_INT 4
9401: PUSH
9402: LD_INT 5
9404: PUSH
9405: LD_INT 6
9407: PUSH
9408: LD_INT 8
9410: PUSH
9411: LD_INT 11
9413: PUSH
9414: LD_INT 12
9416: PUSH
9417: LD_INT 15
9419: PUSH
9420: LD_INT 16
9422: PUSH
9423: LD_INT 20
9425: PUSH
9426: LD_INT 21
9428: PUSH
9429: LD_INT 22
9431: PUSH
9432: LD_INT 23
9434: PUSH
9435: LD_INT 25
9437: PUSH
9438: LD_INT 26
9440: PUSH
9441: LD_INT 30
9443: PUSH
9444: LD_INT 31
9446: PUSH
9447: LD_INT 32
9449: PUSH
9450: LD_INT 36
9452: PUSH
9453: EMPTY
9454: LIST
9455: LIST
9456: LIST
9457: LIST
9458: LIST
9459: LIST
9460: LIST
9461: LIST
9462: LIST
9463: LIST
9464: LIST
9465: LIST
9466: LIST
9467: LIST
9468: LIST
9469: LIST
9470: LIST
9471: LIST
9472: LIST
9473: PUSH
9474: LD_INT 101
9476: PUSH
9477: LD_INT 102
9479: PUSH
9480: LD_INT 105
9482: PUSH
9483: LD_INT 106
9485: PUSH
9486: LD_INT 108
9488: PUSH
9489: LD_INT 109
9491: PUSH
9492: LD_INT 112
9494: PUSH
9495: LD_INT 116
9497: PUSH
9498: LD_INT 117
9500: PUSH
9501: LD_INT 118
9503: PUSH
9504: EMPTY
9505: LIST
9506: LIST
9507: LIST
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: LIST
9513: LIST
9514: LIST
9515: PUSH
9516: EMPTY
9517: LIST
9518: LIST
9519: ST_TO_ADDR
9520: GO 12043
9522: LD_INT 7
9524: DOUBLE
9525: EQUAL
9526: IFTRUE 9530
9528: GO 9642
9530: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
9531: LD_ADDR_VAR 0 2
9535: PUSH
9536: LD_INT 2
9538: PUSH
9539: LD_INT 4
9541: PUSH
9542: LD_INT 5
9544: PUSH
9545: LD_INT 7
9547: PUSH
9548: LD_INT 11
9550: PUSH
9551: LD_INT 12
9553: PUSH
9554: LD_INT 15
9556: PUSH
9557: LD_INT 16
9559: PUSH
9560: LD_INT 20
9562: PUSH
9563: LD_INT 21
9565: PUSH
9566: LD_INT 22
9568: PUSH
9569: LD_INT 23
9571: PUSH
9572: LD_INT 25
9574: PUSH
9575: LD_INT 26
9577: PUSH
9578: EMPTY
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: PUSH
9594: LD_INT 101
9596: PUSH
9597: LD_INT 102
9599: PUSH
9600: LD_INT 103
9602: PUSH
9603: LD_INT 105
9605: PUSH
9606: LD_INT 106
9608: PUSH
9609: LD_INT 108
9611: PUSH
9612: LD_INT 112
9614: PUSH
9615: LD_INT 116
9617: PUSH
9618: LD_INT 117
9620: PUSH
9621: LD_INT 118
9623: PUSH
9624: EMPTY
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: LIST
9631: LIST
9632: LIST
9633: LIST
9634: LIST
9635: PUSH
9636: EMPTY
9637: LIST
9638: LIST
9639: ST_TO_ADDR
9640: GO 12043
9642: LD_INT 8
9644: DOUBLE
9645: EQUAL
9646: IFTRUE 9650
9648: GO 9790
9650: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
9651: LD_ADDR_VAR 0 2
9655: PUSH
9656: LD_INT 2
9658: PUSH
9659: LD_INT 4
9661: PUSH
9662: LD_INT 5
9664: PUSH
9665: LD_INT 6
9667: PUSH
9668: LD_INT 7
9670: PUSH
9671: LD_INT 8
9673: PUSH
9674: LD_INT 11
9676: PUSH
9677: LD_INT 12
9679: PUSH
9680: LD_INT 15
9682: PUSH
9683: LD_INT 16
9685: PUSH
9686: LD_INT 20
9688: PUSH
9689: LD_INT 21
9691: PUSH
9692: LD_INT 22
9694: PUSH
9695: LD_INT 23
9697: PUSH
9698: LD_INT 25
9700: PUSH
9701: LD_INT 26
9703: PUSH
9704: LD_INT 30
9706: PUSH
9707: LD_INT 31
9709: PUSH
9710: LD_INT 32
9712: PUSH
9713: LD_INT 36
9715: PUSH
9716: EMPTY
9717: LIST
9718: LIST
9719: LIST
9720: LIST
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: LIST
9728: LIST
9729: LIST
9730: LIST
9731: LIST
9732: LIST
9733: LIST
9734: LIST
9735: LIST
9736: LIST
9737: PUSH
9738: LD_INT 101
9740: PUSH
9741: LD_INT 102
9743: PUSH
9744: LD_INT 103
9746: PUSH
9747: LD_INT 105
9749: PUSH
9750: LD_INT 106
9752: PUSH
9753: LD_INT 108
9755: PUSH
9756: LD_INT 109
9758: PUSH
9759: LD_INT 112
9761: PUSH
9762: LD_INT 116
9764: PUSH
9765: LD_INT 117
9767: PUSH
9768: LD_INT 118
9770: PUSH
9771: EMPTY
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: LIST
9782: LIST
9783: PUSH
9784: EMPTY
9785: LIST
9786: LIST
9787: ST_TO_ADDR
9788: GO 12043
9790: LD_INT 9
9792: DOUBLE
9793: EQUAL
9794: IFTRUE 9798
9796: GO 9946
9798: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
9799: LD_ADDR_VAR 0 2
9803: PUSH
9804: LD_INT 2
9806: PUSH
9807: LD_INT 4
9809: PUSH
9810: LD_INT 5
9812: PUSH
9813: LD_INT 6
9815: PUSH
9816: LD_INT 7
9818: PUSH
9819: LD_INT 8
9821: PUSH
9822: LD_INT 11
9824: PUSH
9825: LD_INT 12
9827: PUSH
9828: LD_INT 15
9830: PUSH
9831: LD_INT 16
9833: PUSH
9834: LD_INT 20
9836: PUSH
9837: LD_INT 21
9839: PUSH
9840: LD_INT 22
9842: PUSH
9843: LD_INT 23
9845: PUSH
9846: LD_INT 25
9848: PUSH
9849: LD_INT 26
9851: PUSH
9852: LD_INT 28
9854: PUSH
9855: LD_INT 30
9857: PUSH
9858: LD_INT 31
9860: PUSH
9861: LD_INT 32
9863: PUSH
9864: LD_INT 36
9866: PUSH
9867: EMPTY
9868: LIST
9869: LIST
9870: LIST
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: PUSH
9890: LD_INT 101
9892: PUSH
9893: LD_INT 102
9895: PUSH
9896: LD_INT 103
9898: PUSH
9899: LD_INT 105
9901: PUSH
9902: LD_INT 106
9904: PUSH
9905: LD_INT 108
9907: PUSH
9908: LD_INT 109
9910: PUSH
9911: LD_INT 112
9913: PUSH
9914: LD_INT 114
9916: PUSH
9917: LD_INT 116
9919: PUSH
9920: LD_INT 117
9922: PUSH
9923: LD_INT 118
9925: PUSH
9926: EMPTY
9927: LIST
9928: LIST
9929: LIST
9930: LIST
9931: LIST
9932: LIST
9933: LIST
9934: LIST
9935: LIST
9936: LIST
9937: LIST
9938: LIST
9939: PUSH
9940: EMPTY
9941: LIST
9942: LIST
9943: ST_TO_ADDR
9944: GO 12043
9946: LD_INT 10
9948: DOUBLE
9949: EQUAL
9950: IFTRUE 9954
9952: GO 10150
9954: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
9955: LD_ADDR_VAR 0 2
9959: PUSH
9960: LD_INT 2
9962: PUSH
9963: LD_INT 4
9965: PUSH
9966: LD_INT 5
9968: PUSH
9969: LD_INT 6
9971: PUSH
9972: LD_INT 7
9974: PUSH
9975: LD_INT 8
9977: PUSH
9978: LD_INT 9
9980: PUSH
9981: LD_INT 10
9983: PUSH
9984: LD_INT 11
9986: PUSH
9987: LD_INT 12
9989: PUSH
9990: LD_INT 13
9992: PUSH
9993: LD_INT 14
9995: PUSH
9996: LD_INT 15
9998: PUSH
9999: LD_INT 16
10001: PUSH
10002: LD_INT 17
10004: PUSH
10005: LD_INT 18
10007: PUSH
10008: LD_INT 19
10010: PUSH
10011: LD_INT 20
10013: PUSH
10014: LD_INT 21
10016: PUSH
10017: LD_INT 22
10019: PUSH
10020: LD_INT 23
10022: PUSH
10023: LD_INT 24
10025: PUSH
10026: LD_INT 25
10028: PUSH
10029: LD_INT 26
10031: PUSH
10032: LD_INT 28
10034: PUSH
10035: LD_INT 30
10037: PUSH
10038: LD_INT 31
10040: PUSH
10041: LD_INT 32
10043: PUSH
10044: LD_INT 36
10046: PUSH
10047: EMPTY
10048: LIST
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: LIST
10064: LIST
10065: LIST
10066: LIST
10067: LIST
10068: LIST
10069: LIST
10070: LIST
10071: LIST
10072: LIST
10073: LIST
10074: LIST
10075: LIST
10076: LIST
10077: PUSH
10078: LD_INT 101
10080: PUSH
10081: LD_INT 102
10083: PUSH
10084: LD_INT 103
10086: PUSH
10087: LD_INT 104
10089: PUSH
10090: LD_INT 105
10092: PUSH
10093: LD_INT 106
10095: PUSH
10096: LD_INT 107
10098: PUSH
10099: LD_INT 108
10101: PUSH
10102: LD_INT 109
10104: PUSH
10105: LD_INT 110
10107: PUSH
10108: LD_INT 111
10110: PUSH
10111: LD_INT 112
10113: PUSH
10114: LD_INT 114
10116: PUSH
10117: LD_INT 116
10119: PUSH
10120: LD_INT 117
10122: PUSH
10123: LD_INT 118
10125: PUSH
10126: EMPTY
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: LIST
10132: LIST
10133: LIST
10134: LIST
10135: LIST
10136: LIST
10137: LIST
10138: LIST
10139: LIST
10140: LIST
10141: LIST
10142: LIST
10143: PUSH
10144: EMPTY
10145: LIST
10146: LIST
10147: ST_TO_ADDR
10148: GO 12043
10150: LD_INT 11
10152: DOUBLE
10153: EQUAL
10154: IFTRUE 10158
10156: GO 10362
10158: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10159: LD_ADDR_VAR 0 2
10163: PUSH
10164: LD_INT 2
10166: PUSH
10167: LD_INT 3
10169: PUSH
10170: LD_INT 4
10172: PUSH
10173: LD_INT 5
10175: PUSH
10176: LD_INT 6
10178: PUSH
10179: LD_INT 7
10181: PUSH
10182: LD_INT 8
10184: PUSH
10185: LD_INT 9
10187: PUSH
10188: LD_INT 10
10190: PUSH
10191: LD_INT 11
10193: PUSH
10194: LD_INT 12
10196: PUSH
10197: LD_INT 13
10199: PUSH
10200: LD_INT 14
10202: PUSH
10203: LD_INT 15
10205: PUSH
10206: LD_INT 16
10208: PUSH
10209: LD_INT 17
10211: PUSH
10212: LD_INT 18
10214: PUSH
10215: LD_INT 19
10217: PUSH
10218: LD_INT 20
10220: PUSH
10221: LD_INT 21
10223: PUSH
10224: LD_INT 22
10226: PUSH
10227: LD_INT 23
10229: PUSH
10230: LD_INT 24
10232: PUSH
10233: LD_INT 25
10235: PUSH
10236: LD_INT 26
10238: PUSH
10239: LD_INT 28
10241: PUSH
10242: LD_INT 30
10244: PUSH
10245: LD_INT 31
10247: PUSH
10248: LD_INT 32
10250: PUSH
10251: LD_INT 34
10253: PUSH
10254: LD_INT 36
10256: PUSH
10257: EMPTY
10258: LIST
10259: LIST
10260: LIST
10261: LIST
10262: LIST
10263: LIST
10264: LIST
10265: LIST
10266: LIST
10267: LIST
10268: LIST
10269: LIST
10270: LIST
10271: LIST
10272: LIST
10273: LIST
10274: LIST
10275: LIST
10276: LIST
10277: LIST
10278: LIST
10279: LIST
10280: LIST
10281: LIST
10282: LIST
10283: LIST
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: LIST
10289: PUSH
10290: LD_INT 101
10292: PUSH
10293: LD_INT 102
10295: PUSH
10296: LD_INT 103
10298: PUSH
10299: LD_INT 104
10301: PUSH
10302: LD_INT 105
10304: PUSH
10305: LD_INT 106
10307: PUSH
10308: LD_INT 107
10310: PUSH
10311: LD_INT 108
10313: PUSH
10314: LD_INT 109
10316: PUSH
10317: LD_INT 110
10319: PUSH
10320: LD_INT 111
10322: PUSH
10323: LD_INT 112
10325: PUSH
10326: LD_INT 114
10328: PUSH
10329: LD_INT 116
10331: PUSH
10332: LD_INT 117
10334: PUSH
10335: LD_INT 118
10337: PUSH
10338: EMPTY
10339: LIST
10340: LIST
10341: LIST
10342: LIST
10343: LIST
10344: LIST
10345: LIST
10346: LIST
10347: LIST
10348: LIST
10349: LIST
10350: LIST
10351: LIST
10352: LIST
10353: LIST
10354: LIST
10355: PUSH
10356: EMPTY
10357: LIST
10358: LIST
10359: ST_TO_ADDR
10360: GO 12043
10362: LD_INT 12
10364: DOUBLE
10365: EQUAL
10366: IFTRUE 10370
10368: GO 10590
10370: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
10371: LD_ADDR_VAR 0 2
10375: PUSH
10376: LD_INT 1
10378: PUSH
10379: LD_INT 2
10381: PUSH
10382: LD_INT 3
10384: PUSH
10385: LD_INT 4
10387: PUSH
10388: LD_INT 5
10390: PUSH
10391: LD_INT 6
10393: PUSH
10394: LD_INT 7
10396: PUSH
10397: LD_INT 8
10399: PUSH
10400: LD_INT 9
10402: PUSH
10403: LD_INT 10
10405: PUSH
10406: LD_INT 11
10408: PUSH
10409: LD_INT 12
10411: PUSH
10412: LD_INT 13
10414: PUSH
10415: LD_INT 14
10417: PUSH
10418: LD_INT 15
10420: PUSH
10421: LD_INT 16
10423: PUSH
10424: LD_INT 17
10426: PUSH
10427: LD_INT 18
10429: PUSH
10430: LD_INT 19
10432: PUSH
10433: LD_INT 20
10435: PUSH
10436: LD_INT 21
10438: PUSH
10439: LD_INT 22
10441: PUSH
10442: LD_INT 23
10444: PUSH
10445: LD_INT 24
10447: PUSH
10448: LD_INT 25
10450: PUSH
10451: LD_INT 26
10453: PUSH
10454: LD_INT 27
10456: PUSH
10457: LD_INT 28
10459: PUSH
10460: LD_INT 30
10462: PUSH
10463: LD_INT 31
10465: PUSH
10466: LD_INT 32
10468: PUSH
10469: LD_INT 33
10471: PUSH
10472: LD_INT 34
10474: PUSH
10475: LD_INT 36
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: LIST
10482: LIST
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: LIST
10492: LIST
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: LIST
10499: LIST
10500: LIST
10501: LIST
10502: LIST
10503: LIST
10504: LIST
10505: LIST
10506: LIST
10507: LIST
10508: LIST
10509: LIST
10510: LIST
10511: LIST
10512: LIST
10513: PUSH
10514: LD_INT 101
10516: PUSH
10517: LD_INT 102
10519: PUSH
10520: LD_INT 103
10522: PUSH
10523: LD_INT 104
10525: PUSH
10526: LD_INT 105
10528: PUSH
10529: LD_INT 106
10531: PUSH
10532: LD_INT 107
10534: PUSH
10535: LD_INT 108
10537: PUSH
10538: LD_INT 109
10540: PUSH
10541: LD_INT 110
10543: PUSH
10544: LD_INT 111
10546: PUSH
10547: LD_INT 112
10549: PUSH
10550: LD_INT 113
10552: PUSH
10553: LD_INT 114
10555: PUSH
10556: LD_INT 116
10558: PUSH
10559: LD_INT 117
10561: PUSH
10562: LD_INT 118
10564: PUSH
10565: EMPTY
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: LIST
10583: PUSH
10584: EMPTY
10585: LIST
10586: LIST
10587: ST_TO_ADDR
10588: GO 12043
10590: LD_INT 13
10592: DOUBLE
10593: EQUAL
10594: IFTRUE 10598
10596: GO 10806
10598: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
10599: LD_ADDR_VAR 0 2
10603: PUSH
10604: LD_INT 1
10606: PUSH
10607: LD_INT 2
10609: PUSH
10610: LD_INT 3
10612: PUSH
10613: LD_INT 4
10615: PUSH
10616: LD_INT 5
10618: PUSH
10619: LD_INT 8
10621: PUSH
10622: LD_INT 9
10624: PUSH
10625: LD_INT 10
10627: PUSH
10628: LD_INT 11
10630: PUSH
10631: LD_INT 12
10633: PUSH
10634: LD_INT 14
10636: PUSH
10637: LD_INT 15
10639: PUSH
10640: LD_INT 16
10642: PUSH
10643: LD_INT 17
10645: PUSH
10646: LD_INT 18
10648: PUSH
10649: LD_INT 19
10651: PUSH
10652: LD_INT 20
10654: PUSH
10655: LD_INT 21
10657: PUSH
10658: LD_INT 22
10660: PUSH
10661: LD_INT 23
10663: PUSH
10664: LD_INT 24
10666: PUSH
10667: LD_INT 25
10669: PUSH
10670: LD_INT 26
10672: PUSH
10673: LD_INT 27
10675: PUSH
10676: LD_INT 28
10678: PUSH
10679: LD_INT 30
10681: PUSH
10682: LD_INT 31
10684: PUSH
10685: LD_INT 32
10687: PUSH
10688: LD_INT 33
10690: PUSH
10691: LD_INT 34
10693: PUSH
10694: LD_INT 36
10696: PUSH
10697: EMPTY
10698: LIST
10699: LIST
10700: LIST
10701: LIST
10702: LIST
10703: LIST
10704: LIST
10705: LIST
10706: LIST
10707: LIST
10708: LIST
10709: LIST
10710: LIST
10711: LIST
10712: LIST
10713: LIST
10714: LIST
10715: LIST
10716: LIST
10717: LIST
10718: LIST
10719: LIST
10720: LIST
10721: LIST
10722: LIST
10723: LIST
10724: LIST
10725: LIST
10726: LIST
10727: LIST
10728: LIST
10729: PUSH
10730: LD_INT 101
10732: PUSH
10733: LD_INT 102
10735: PUSH
10736: LD_INT 103
10738: PUSH
10739: LD_INT 104
10741: PUSH
10742: LD_INT 105
10744: PUSH
10745: LD_INT 106
10747: PUSH
10748: LD_INT 107
10750: PUSH
10751: LD_INT 108
10753: PUSH
10754: LD_INT 109
10756: PUSH
10757: LD_INT 110
10759: PUSH
10760: LD_INT 111
10762: PUSH
10763: LD_INT 112
10765: PUSH
10766: LD_INT 113
10768: PUSH
10769: LD_INT 114
10771: PUSH
10772: LD_INT 116
10774: PUSH
10775: LD_INT 117
10777: PUSH
10778: LD_INT 118
10780: PUSH
10781: EMPTY
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: LIST
10797: LIST
10798: LIST
10799: PUSH
10800: EMPTY
10801: LIST
10802: LIST
10803: ST_TO_ADDR
10804: GO 12043
10806: LD_INT 14
10808: DOUBLE
10809: EQUAL
10810: IFTRUE 10814
10812: GO 11038
10814: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
10815: LD_ADDR_VAR 0 2
10819: PUSH
10820: LD_INT 1
10822: PUSH
10823: LD_INT 2
10825: PUSH
10826: LD_INT 3
10828: PUSH
10829: LD_INT 4
10831: PUSH
10832: LD_INT 5
10834: PUSH
10835: LD_INT 6
10837: PUSH
10838: LD_INT 7
10840: PUSH
10841: LD_INT 8
10843: PUSH
10844: LD_INT 9
10846: PUSH
10847: LD_INT 10
10849: PUSH
10850: LD_INT 11
10852: PUSH
10853: LD_INT 12
10855: PUSH
10856: LD_INT 13
10858: PUSH
10859: LD_INT 14
10861: PUSH
10862: LD_INT 15
10864: PUSH
10865: LD_INT 16
10867: PUSH
10868: LD_INT 17
10870: PUSH
10871: LD_INT 18
10873: PUSH
10874: LD_INT 19
10876: PUSH
10877: LD_INT 20
10879: PUSH
10880: LD_INT 21
10882: PUSH
10883: LD_INT 22
10885: PUSH
10886: LD_INT 23
10888: PUSH
10889: LD_INT 24
10891: PUSH
10892: LD_INT 25
10894: PUSH
10895: LD_INT 26
10897: PUSH
10898: LD_INT 27
10900: PUSH
10901: LD_INT 28
10903: PUSH
10904: LD_INT 29
10906: PUSH
10907: LD_INT 30
10909: PUSH
10910: LD_INT 31
10912: PUSH
10913: LD_INT 32
10915: PUSH
10916: LD_INT 33
10918: PUSH
10919: LD_INT 34
10921: PUSH
10922: LD_INT 36
10924: PUSH
10925: EMPTY
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: LIST
10935: LIST
10936: LIST
10937: LIST
10938: LIST
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: LIST
10953: LIST
10954: LIST
10955: LIST
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: LIST
10961: PUSH
10962: LD_INT 101
10964: PUSH
10965: LD_INT 102
10967: PUSH
10968: LD_INT 103
10970: PUSH
10971: LD_INT 104
10973: PUSH
10974: LD_INT 105
10976: PUSH
10977: LD_INT 106
10979: PUSH
10980: LD_INT 107
10982: PUSH
10983: LD_INT 108
10985: PUSH
10986: LD_INT 109
10988: PUSH
10989: LD_INT 110
10991: PUSH
10992: LD_INT 111
10994: PUSH
10995: LD_INT 112
10997: PUSH
10998: LD_INT 113
11000: PUSH
11001: LD_INT 114
11003: PUSH
11004: LD_INT 116
11006: PUSH
11007: LD_INT 117
11009: PUSH
11010: LD_INT 118
11012: PUSH
11013: EMPTY
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: LIST
11030: LIST
11031: PUSH
11032: EMPTY
11033: LIST
11034: LIST
11035: ST_TO_ADDR
11036: GO 12043
11038: LD_INT 15
11040: DOUBLE
11041: EQUAL
11042: IFTRUE 11046
11044: GO 11270
11046: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11047: LD_ADDR_VAR 0 2
11051: PUSH
11052: LD_INT 1
11054: PUSH
11055: LD_INT 2
11057: PUSH
11058: LD_INT 3
11060: PUSH
11061: LD_INT 4
11063: PUSH
11064: LD_INT 5
11066: PUSH
11067: LD_INT 6
11069: PUSH
11070: LD_INT 7
11072: PUSH
11073: LD_INT 8
11075: PUSH
11076: LD_INT 9
11078: PUSH
11079: LD_INT 10
11081: PUSH
11082: LD_INT 11
11084: PUSH
11085: LD_INT 12
11087: PUSH
11088: LD_INT 13
11090: PUSH
11091: LD_INT 14
11093: PUSH
11094: LD_INT 15
11096: PUSH
11097: LD_INT 16
11099: PUSH
11100: LD_INT 17
11102: PUSH
11103: LD_INT 18
11105: PUSH
11106: LD_INT 19
11108: PUSH
11109: LD_INT 20
11111: PUSH
11112: LD_INT 21
11114: PUSH
11115: LD_INT 22
11117: PUSH
11118: LD_INT 23
11120: PUSH
11121: LD_INT 24
11123: PUSH
11124: LD_INT 25
11126: PUSH
11127: LD_INT 26
11129: PUSH
11130: LD_INT 27
11132: PUSH
11133: LD_INT 28
11135: PUSH
11136: LD_INT 29
11138: PUSH
11139: LD_INT 30
11141: PUSH
11142: LD_INT 31
11144: PUSH
11145: LD_INT 32
11147: PUSH
11148: LD_INT 33
11150: PUSH
11151: LD_INT 34
11153: PUSH
11154: LD_INT 36
11156: PUSH
11157: EMPTY
11158: LIST
11159: LIST
11160: LIST
11161: LIST
11162: LIST
11163: LIST
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: LIST
11169: LIST
11170: LIST
11171: LIST
11172: LIST
11173: LIST
11174: LIST
11175: LIST
11176: LIST
11177: LIST
11178: LIST
11179: LIST
11180: LIST
11181: LIST
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: LIST
11187: LIST
11188: LIST
11189: LIST
11190: LIST
11191: LIST
11192: LIST
11193: PUSH
11194: LD_INT 101
11196: PUSH
11197: LD_INT 102
11199: PUSH
11200: LD_INT 103
11202: PUSH
11203: LD_INT 104
11205: PUSH
11206: LD_INT 105
11208: PUSH
11209: LD_INT 106
11211: PUSH
11212: LD_INT 107
11214: PUSH
11215: LD_INT 108
11217: PUSH
11218: LD_INT 109
11220: PUSH
11221: LD_INT 110
11223: PUSH
11224: LD_INT 111
11226: PUSH
11227: LD_INT 112
11229: PUSH
11230: LD_INT 113
11232: PUSH
11233: LD_INT 114
11235: PUSH
11236: LD_INT 116
11238: PUSH
11239: LD_INT 117
11241: PUSH
11242: LD_INT 118
11244: PUSH
11245: EMPTY
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: PUSH
11264: EMPTY
11265: LIST
11266: LIST
11267: ST_TO_ADDR
11268: GO 12043
11270: LD_INT 16
11272: DOUBLE
11273: EQUAL
11274: IFTRUE 11278
11276: GO 11414
11278: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11279: LD_ADDR_VAR 0 2
11283: PUSH
11284: LD_INT 2
11286: PUSH
11287: LD_INT 4
11289: PUSH
11290: LD_INT 5
11292: PUSH
11293: LD_INT 7
11295: PUSH
11296: LD_INT 11
11298: PUSH
11299: LD_INT 12
11301: PUSH
11302: LD_INT 15
11304: PUSH
11305: LD_INT 16
11307: PUSH
11308: LD_INT 20
11310: PUSH
11311: LD_INT 21
11313: PUSH
11314: LD_INT 22
11316: PUSH
11317: LD_INT 23
11319: PUSH
11320: LD_INT 25
11322: PUSH
11323: LD_INT 26
11325: PUSH
11326: LD_INT 30
11328: PUSH
11329: LD_INT 31
11331: PUSH
11332: LD_INT 32
11334: PUSH
11335: LD_INT 33
11337: PUSH
11338: LD_INT 34
11340: PUSH
11341: EMPTY
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: LIST
11349: LIST
11350: LIST
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: LIST
11356: LIST
11357: LIST
11358: LIST
11359: LIST
11360: LIST
11361: PUSH
11362: LD_INT 101
11364: PUSH
11365: LD_INT 102
11367: PUSH
11368: LD_INT 103
11370: PUSH
11371: LD_INT 106
11373: PUSH
11374: LD_INT 108
11376: PUSH
11377: LD_INT 112
11379: PUSH
11380: LD_INT 113
11382: PUSH
11383: LD_INT 114
11385: PUSH
11386: LD_INT 116
11388: PUSH
11389: LD_INT 117
11391: PUSH
11392: LD_INT 118
11394: PUSH
11395: EMPTY
11396: LIST
11397: LIST
11398: LIST
11399: LIST
11400: LIST
11401: LIST
11402: LIST
11403: LIST
11404: LIST
11405: LIST
11406: LIST
11407: PUSH
11408: EMPTY
11409: LIST
11410: LIST
11411: ST_TO_ADDR
11412: GO 12043
11414: LD_INT 17
11416: DOUBLE
11417: EQUAL
11418: IFTRUE 11422
11420: GO 11646
11422: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
11423: LD_ADDR_VAR 0 2
11427: PUSH
11428: LD_INT 1
11430: PUSH
11431: LD_INT 2
11433: PUSH
11434: LD_INT 3
11436: PUSH
11437: LD_INT 4
11439: PUSH
11440: LD_INT 5
11442: PUSH
11443: LD_INT 6
11445: PUSH
11446: LD_INT 7
11448: PUSH
11449: LD_INT 8
11451: PUSH
11452: LD_INT 9
11454: PUSH
11455: LD_INT 10
11457: PUSH
11458: LD_INT 11
11460: PUSH
11461: LD_INT 12
11463: PUSH
11464: LD_INT 13
11466: PUSH
11467: LD_INT 14
11469: PUSH
11470: LD_INT 15
11472: PUSH
11473: LD_INT 16
11475: PUSH
11476: LD_INT 17
11478: PUSH
11479: LD_INT 18
11481: PUSH
11482: LD_INT 19
11484: PUSH
11485: LD_INT 20
11487: PUSH
11488: LD_INT 21
11490: PUSH
11491: LD_INT 22
11493: PUSH
11494: LD_INT 23
11496: PUSH
11497: LD_INT 24
11499: PUSH
11500: LD_INT 25
11502: PUSH
11503: LD_INT 26
11505: PUSH
11506: LD_INT 27
11508: PUSH
11509: LD_INT 28
11511: PUSH
11512: LD_INT 29
11514: PUSH
11515: LD_INT 30
11517: PUSH
11518: LD_INT 31
11520: PUSH
11521: LD_INT 32
11523: PUSH
11524: LD_INT 33
11526: PUSH
11527: LD_INT 34
11529: PUSH
11530: LD_INT 36
11532: PUSH
11533: EMPTY
11534: LIST
11535: LIST
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: LIST
11543: LIST
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: LIST
11549: LIST
11550: LIST
11551: LIST
11552: LIST
11553: LIST
11554: LIST
11555: LIST
11556: LIST
11557: LIST
11558: LIST
11559: LIST
11560: LIST
11561: LIST
11562: LIST
11563: LIST
11564: LIST
11565: LIST
11566: LIST
11567: LIST
11568: LIST
11569: PUSH
11570: LD_INT 101
11572: PUSH
11573: LD_INT 102
11575: PUSH
11576: LD_INT 103
11578: PUSH
11579: LD_INT 104
11581: PUSH
11582: LD_INT 105
11584: PUSH
11585: LD_INT 106
11587: PUSH
11588: LD_INT 107
11590: PUSH
11591: LD_INT 108
11593: PUSH
11594: LD_INT 109
11596: PUSH
11597: LD_INT 110
11599: PUSH
11600: LD_INT 111
11602: PUSH
11603: LD_INT 112
11605: PUSH
11606: LD_INT 113
11608: PUSH
11609: LD_INT 114
11611: PUSH
11612: LD_INT 116
11614: PUSH
11615: LD_INT 117
11617: PUSH
11618: LD_INT 118
11620: PUSH
11621: EMPTY
11622: LIST
11623: LIST
11624: LIST
11625: LIST
11626: LIST
11627: LIST
11628: LIST
11629: LIST
11630: LIST
11631: LIST
11632: LIST
11633: LIST
11634: LIST
11635: LIST
11636: LIST
11637: LIST
11638: LIST
11639: PUSH
11640: EMPTY
11641: LIST
11642: LIST
11643: ST_TO_ADDR
11644: GO 12043
11646: LD_INT 18
11648: DOUBLE
11649: EQUAL
11650: IFTRUE 11654
11652: GO 11802
11654: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
11655: LD_ADDR_VAR 0 2
11659: PUSH
11660: LD_INT 2
11662: PUSH
11663: LD_INT 4
11665: PUSH
11666: LD_INT 5
11668: PUSH
11669: LD_INT 7
11671: PUSH
11672: LD_INT 11
11674: PUSH
11675: LD_INT 12
11677: PUSH
11678: LD_INT 15
11680: PUSH
11681: LD_INT 16
11683: PUSH
11684: LD_INT 20
11686: PUSH
11687: LD_INT 21
11689: PUSH
11690: LD_INT 22
11692: PUSH
11693: LD_INT 23
11695: PUSH
11696: LD_INT 25
11698: PUSH
11699: LD_INT 26
11701: PUSH
11702: LD_INT 30
11704: PUSH
11705: LD_INT 31
11707: PUSH
11708: LD_INT 32
11710: PUSH
11711: LD_INT 33
11713: PUSH
11714: LD_INT 34
11716: PUSH
11717: LD_INT 35
11719: PUSH
11720: LD_INT 36
11722: PUSH
11723: EMPTY
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: LIST
11741: LIST
11742: LIST
11743: LIST
11744: LIST
11745: PUSH
11746: LD_INT 101
11748: PUSH
11749: LD_INT 102
11751: PUSH
11752: LD_INT 103
11754: PUSH
11755: LD_INT 106
11757: PUSH
11758: LD_INT 108
11760: PUSH
11761: LD_INT 112
11763: PUSH
11764: LD_INT 113
11766: PUSH
11767: LD_INT 114
11769: PUSH
11770: LD_INT 115
11772: PUSH
11773: LD_INT 116
11775: PUSH
11776: LD_INT 117
11778: PUSH
11779: LD_INT 118
11781: PUSH
11782: EMPTY
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: LIST
11793: LIST
11794: LIST
11795: PUSH
11796: EMPTY
11797: LIST
11798: LIST
11799: ST_TO_ADDR
11800: GO 12043
11802: LD_INT 19
11804: DOUBLE
11805: EQUAL
11806: IFTRUE 11810
11808: GO 12042
11810: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
11811: LD_ADDR_VAR 0 2
11815: PUSH
11816: LD_INT 1
11818: PUSH
11819: LD_INT 2
11821: PUSH
11822: LD_INT 3
11824: PUSH
11825: LD_INT 4
11827: PUSH
11828: LD_INT 5
11830: PUSH
11831: LD_INT 6
11833: PUSH
11834: LD_INT 7
11836: PUSH
11837: LD_INT 8
11839: PUSH
11840: LD_INT 9
11842: PUSH
11843: LD_INT 10
11845: PUSH
11846: LD_INT 11
11848: PUSH
11849: LD_INT 12
11851: PUSH
11852: LD_INT 13
11854: PUSH
11855: LD_INT 14
11857: PUSH
11858: LD_INT 15
11860: PUSH
11861: LD_INT 16
11863: PUSH
11864: LD_INT 17
11866: PUSH
11867: LD_INT 18
11869: PUSH
11870: LD_INT 19
11872: PUSH
11873: LD_INT 20
11875: PUSH
11876: LD_INT 21
11878: PUSH
11879: LD_INT 22
11881: PUSH
11882: LD_INT 23
11884: PUSH
11885: LD_INT 24
11887: PUSH
11888: LD_INT 25
11890: PUSH
11891: LD_INT 26
11893: PUSH
11894: LD_INT 27
11896: PUSH
11897: LD_INT 28
11899: PUSH
11900: LD_INT 29
11902: PUSH
11903: LD_INT 30
11905: PUSH
11906: LD_INT 31
11908: PUSH
11909: LD_INT 32
11911: PUSH
11912: LD_INT 33
11914: PUSH
11915: LD_INT 34
11917: PUSH
11918: LD_INT 35
11920: PUSH
11921: LD_INT 36
11923: PUSH
11924: EMPTY
11925: LIST
11926: LIST
11927: LIST
11928: LIST
11929: LIST
11930: LIST
11931: LIST
11932: LIST
11933: LIST
11934: LIST
11935: LIST
11936: LIST
11937: LIST
11938: LIST
11939: LIST
11940: LIST
11941: LIST
11942: LIST
11943: LIST
11944: LIST
11945: LIST
11946: LIST
11947: LIST
11948: LIST
11949: LIST
11950: LIST
11951: LIST
11952: LIST
11953: LIST
11954: LIST
11955: LIST
11956: LIST
11957: LIST
11958: LIST
11959: LIST
11960: LIST
11961: PUSH
11962: LD_INT 101
11964: PUSH
11965: LD_INT 102
11967: PUSH
11968: LD_INT 103
11970: PUSH
11971: LD_INT 104
11973: PUSH
11974: LD_INT 105
11976: PUSH
11977: LD_INT 106
11979: PUSH
11980: LD_INT 107
11982: PUSH
11983: LD_INT 108
11985: PUSH
11986: LD_INT 109
11988: PUSH
11989: LD_INT 110
11991: PUSH
11992: LD_INT 111
11994: PUSH
11995: LD_INT 112
11997: PUSH
11998: LD_INT 113
12000: PUSH
12001: LD_INT 114
12003: PUSH
12004: LD_INT 115
12006: PUSH
12007: LD_INT 116
12009: PUSH
12010: LD_INT 117
12012: PUSH
12013: LD_INT 118
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: LIST
12020: LIST
12021: LIST
12022: LIST
12023: LIST
12024: LIST
12025: LIST
12026: LIST
12027: LIST
12028: LIST
12029: LIST
12030: LIST
12031: LIST
12032: LIST
12033: LIST
12034: LIST
12035: PUSH
12036: EMPTY
12037: LIST
12038: LIST
12039: ST_TO_ADDR
12040: GO 12043
12042: POP
// end else
12043: GO 12274
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12045: LD_ADDR_VAR 0 2
12049: PUSH
12050: LD_INT 1
12052: PUSH
12053: LD_INT 2
12055: PUSH
12056: LD_INT 3
12058: PUSH
12059: LD_INT 4
12061: PUSH
12062: LD_INT 5
12064: PUSH
12065: LD_INT 6
12067: PUSH
12068: LD_INT 7
12070: PUSH
12071: LD_INT 8
12073: PUSH
12074: LD_INT 9
12076: PUSH
12077: LD_INT 10
12079: PUSH
12080: LD_INT 11
12082: PUSH
12083: LD_INT 12
12085: PUSH
12086: LD_INT 13
12088: PUSH
12089: LD_INT 14
12091: PUSH
12092: LD_INT 15
12094: PUSH
12095: LD_INT 16
12097: PUSH
12098: LD_INT 17
12100: PUSH
12101: LD_INT 18
12103: PUSH
12104: LD_INT 19
12106: PUSH
12107: LD_INT 20
12109: PUSH
12110: LD_INT 21
12112: PUSH
12113: LD_INT 22
12115: PUSH
12116: LD_INT 23
12118: PUSH
12119: LD_INT 24
12121: PUSH
12122: LD_INT 25
12124: PUSH
12125: LD_INT 26
12127: PUSH
12128: LD_INT 27
12130: PUSH
12131: LD_INT 28
12133: PUSH
12134: LD_INT 29
12136: PUSH
12137: LD_INT 30
12139: PUSH
12140: LD_INT 31
12142: PUSH
12143: LD_INT 32
12145: PUSH
12146: LD_INT 33
12148: PUSH
12149: LD_INT 34
12151: PUSH
12152: LD_INT 35
12154: PUSH
12155: LD_INT 36
12157: PUSH
12158: EMPTY
12159: LIST
12160: LIST
12161: LIST
12162: LIST
12163: LIST
12164: LIST
12165: LIST
12166: LIST
12167: LIST
12168: LIST
12169: LIST
12170: LIST
12171: LIST
12172: LIST
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: LIST
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: LIST
12195: PUSH
12196: LD_INT 101
12198: PUSH
12199: LD_INT 102
12201: PUSH
12202: LD_INT 103
12204: PUSH
12205: LD_INT 104
12207: PUSH
12208: LD_INT 105
12210: PUSH
12211: LD_INT 106
12213: PUSH
12214: LD_INT 107
12216: PUSH
12217: LD_INT 108
12219: PUSH
12220: LD_INT 109
12222: PUSH
12223: LD_INT 110
12225: PUSH
12226: LD_INT 111
12228: PUSH
12229: LD_INT 112
12231: PUSH
12232: LD_INT 113
12234: PUSH
12235: LD_INT 114
12237: PUSH
12238: LD_INT 115
12240: PUSH
12241: LD_INT 116
12243: PUSH
12244: LD_INT 117
12246: PUSH
12247: LD_INT 118
12249: PUSH
12250: EMPTY
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: LIST
12261: LIST
12262: LIST
12263: LIST
12264: LIST
12265: LIST
12266: LIST
12267: LIST
12268: LIST
12269: PUSH
12270: EMPTY
12271: LIST
12272: LIST
12273: ST_TO_ADDR
// if result then
12274: LD_VAR 0 2
12278: IFFALSE 13064
// begin normal :=  ;
12280: LD_ADDR_VAR 0 5
12284: PUSH
12285: LD_STRING 
12287: ST_TO_ADDR
// hardcore :=  ;
12288: LD_ADDR_VAR 0 6
12292: PUSH
12293: LD_STRING 
12295: ST_TO_ADDR
// active :=  ;
12296: LD_ADDR_VAR 0 7
12300: PUSH
12301: LD_STRING 
12303: ST_TO_ADDR
// for i = 1 to normalCounter do
12304: LD_ADDR_VAR 0 8
12308: PUSH
12309: DOUBLE
12310: LD_INT 1
12312: DEC
12313: ST_TO_ADDR
12314: LD_EXP 30
12318: PUSH
12319: FOR_TO
12320: IFFALSE 12421
// begin tmp := 0 ;
12322: LD_ADDR_VAR 0 3
12326: PUSH
12327: LD_STRING 0
12329: ST_TO_ADDR
// if result [ 1 ] then
12330: LD_VAR 0 2
12334: PUSH
12335: LD_INT 1
12337: ARRAY
12338: IFFALSE 12403
// if result [ 1 ] [ 1 ] = i then
12340: LD_VAR 0 2
12344: PUSH
12345: LD_INT 1
12347: ARRAY
12348: PUSH
12349: LD_INT 1
12351: ARRAY
12352: PUSH
12353: LD_VAR 0 8
12357: EQUAL
12358: IFFALSE 12403
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12360: LD_ADDR_VAR 0 2
12364: PUSH
12365: LD_VAR 0 2
12369: PPUSH
12370: LD_INT 1
12372: PPUSH
12373: LD_VAR 0 2
12377: PUSH
12378: LD_INT 1
12380: ARRAY
12381: PPUSH
12382: LD_INT 1
12384: PPUSH
12385: CALL_OW 3
12389: PPUSH
12390: CALL_OW 1
12394: ST_TO_ADDR
// tmp := 1 ;
12395: LD_ADDR_VAR 0 3
12399: PUSH
12400: LD_STRING 1
12402: ST_TO_ADDR
// end ; normal := normal & tmp ;
12403: LD_ADDR_VAR 0 5
12407: PUSH
12408: LD_VAR 0 5
12412: PUSH
12413: LD_VAR 0 3
12417: STR
12418: ST_TO_ADDR
// end ;
12419: GO 12319
12421: POP
12422: POP
// for i = 1 to hardcoreCounter do
12423: LD_ADDR_VAR 0 8
12427: PUSH
12428: DOUBLE
12429: LD_INT 1
12431: DEC
12432: ST_TO_ADDR
12433: LD_EXP 31
12437: PUSH
12438: FOR_TO
12439: IFFALSE 12544
// begin tmp := 0 ;
12441: LD_ADDR_VAR 0 3
12445: PUSH
12446: LD_STRING 0
12448: ST_TO_ADDR
// if result [ 2 ] then
12449: LD_VAR 0 2
12453: PUSH
12454: LD_INT 2
12456: ARRAY
12457: IFFALSE 12526
// if result [ 2 ] [ 1 ] = 100 + i then
12459: LD_VAR 0 2
12463: PUSH
12464: LD_INT 2
12466: ARRAY
12467: PUSH
12468: LD_INT 1
12470: ARRAY
12471: PUSH
12472: LD_INT 100
12474: PUSH
12475: LD_VAR 0 8
12479: PLUS
12480: EQUAL
12481: IFFALSE 12526
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12483: LD_ADDR_VAR 0 2
12487: PUSH
12488: LD_VAR 0 2
12492: PPUSH
12493: LD_INT 2
12495: PPUSH
12496: LD_VAR 0 2
12500: PUSH
12501: LD_INT 2
12503: ARRAY
12504: PPUSH
12505: LD_INT 1
12507: PPUSH
12508: CALL_OW 3
12512: PPUSH
12513: CALL_OW 1
12517: ST_TO_ADDR
// tmp := 1 ;
12518: LD_ADDR_VAR 0 3
12522: PUSH
12523: LD_STRING 1
12525: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12526: LD_ADDR_VAR 0 6
12530: PUSH
12531: LD_VAR 0 6
12535: PUSH
12536: LD_VAR 0 3
12540: STR
12541: ST_TO_ADDR
// end ;
12542: GO 12438
12544: POP
12545: POP
// if isGameLoad then
12546: LD_VAR 0 1
12550: IFFALSE 13025
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
12552: LD_ADDR_VAR 0 4
12556: PUSH
12557: LD_EXP 34
12561: PUSH
12562: LD_EXP 33
12566: PUSH
12567: LD_EXP 35
12571: PUSH
12572: LD_EXP 32
12576: PUSH
12577: LD_EXP 36
12581: PUSH
12582: LD_EXP 37
12586: PUSH
12587: LD_EXP 38
12591: PUSH
12592: LD_EXP 39
12596: PUSH
12597: LD_EXP 40
12601: PUSH
12602: LD_EXP 41
12606: PUSH
12607: LD_EXP 42
12611: PUSH
12612: LD_EXP 43
12616: PUSH
12617: LD_EXP 44
12621: PUSH
12622: LD_EXP 45
12626: PUSH
12627: LD_EXP 53
12631: PUSH
12632: LD_EXP 54
12636: PUSH
12637: LD_EXP 55
12641: PUSH
12642: LD_EXP 56
12646: PUSH
12647: LD_EXP 58
12651: PUSH
12652: LD_EXP 59
12656: PUSH
12657: LD_EXP 60
12661: PUSH
12662: LD_EXP 63
12666: PUSH
12667: LD_EXP 65
12671: PUSH
12672: LD_EXP 66
12676: PUSH
12677: LD_EXP 67
12681: PUSH
12682: LD_EXP 69
12686: PUSH
12687: LD_EXP 70
12691: PUSH
12692: LD_EXP 73
12696: PUSH
12697: LD_EXP 74
12701: PUSH
12702: LD_EXP 75
12706: PUSH
12707: LD_EXP 76
12711: PUSH
12712: LD_EXP 77
12716: PUSH
12717: LD_EXP 78
12721: PUSH
12722: LD_EXP 79
12726: PUSH
12727: LD_EXP 80
12731: PUSH
12732: LD_EXP 81
12736: PUSH
12737: LD_EXP 46
12741: PUSH
12742: LD_EXP 47
12746: PUSH
12747: LD_EXP 50
12751: PUSH
12752: LD_EXP 51
12756: PUSH
12757: LD_EXP 52
12761: PUSH
12762: LD_EXP 48
12766: PUSH
12767: LD_EXP 49
12771: PUSH
12772: LD_EXP 57
12776: PUSH
12777: LD_EXP 61
12781: PUSH
12782: LD_EXP 62
12786: PUSH
12787: LD_EXP 64
12791: PUSH
12792: LD_EXP 68
12796: PUSH
12797: LD_EXP 71
12801: PUSH
12802: LD_EXP 72
12806: PUSH
12807: LD_EXP 82
12811: PUSH
12812: LD_EXP 83
12816: PUSH
12817: LD_EXP 84
12821: PUSH
12822: LD_EXP 85
12826: PUSH
12827: EMPTY
12828: LIST
12829: LIST
12830: LIST
12831: LIST
12832: LIST
12833: LIST
12834: LIST
12835: LIST
12836: LIST
12837: LIST
12838: LIST
12839: LIST
12840: LIST
12841: LIST
12842: LIST
12843: LIST
12844: LIST
12845: LIST
12846: LIST
12847: LIST
12848: LIST
12849: LIST
12850: LIST
12851: LIST
12852: LIST
12853: LIST
12854: LIST
12855: LIST
12856: LIST
12857: LIST
12858: LIST
12859: LIST
12860: LIST
12861: LIST
12862: LIST
12863: LIST
12864: LIST
12865: LIST
12866: LIST
12867: LIST
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: ST_TO_ADDR
// tmp :=  ;
12883: LD_ADDR_VAR 0 3
12887: PUSH
12888: LD_STRING 
12890: ST_TO_ADDR
// for i = 1 to normalCounter do
12891: LD_ADDR_VAR 0 8
12895: PUSH
12896: DOUBLE
12897: LD_INT 1
12899: DEC
12900: ST_TO_ADDR
12901: LD_EXP 30
12905: PUSH
12906: FOR_TO
12907: IFFALSE 12943
// begin if flags [ i ] then
12909: LD_VAR 0 4
12913: PUSH
12914: LD_VAR 0 8
12918: ARRAY
12919: IFFALSE 12941
// tmp := tmp & i & ; ;
12921: LD_ADDR_VAR 0 3
12925: PUSH
12926: LD_VAR 0 3
12930: PUSH
12931: LD_VAR 0 8
12935: STR
12936: PUSH
12937: LD_STRING ;
12939: STR
12940: ST_TO_ADDR
// end ;
12941: GO 12906
12943: POP
12944: POP
// for i = 1 to hardcoreCounter do
12945: LD_ADDR_VAR 0 8
12949: PUSH
12950: DOUBLE
12951: LD_INT 1
12953: DEC
12954: ST_TO_ADDR
12955: LD_EXP 31
12959: PUSH
12960: FOR_TO
12961: IFFALSE 13007
// begin if flags [ normalCounter + i ] then
12963: LD_VAR 0 4
12967: PUSH
12968: LD_EXP 30
12972: PUSH
12973: LD_VAR 0 8
12977: PLUS
12978: ARRAY
12979: IFFALSE 13005
// tmp := tmp & ( 100 + i ) & ; ;
12981: LD_ADDR_VAR 0 3
12985: PUSH
12986: LD_VAR 0 3
12990: PUSH
12991: LD_INT 100
12993: PUSH
12994: LD_VAR 0 8
12998: PLUS
12999: STR
13000: PUSH
13001: LD_STRING ;
13003: STR
13004: ST_TO_ADDR
// end ;
13005: GO 12960
13007: POP
13008: POP
// if tmp then
13009: LD_VAR 0 3
13013: IFFALSE 13025
// active := tmp ;
13015: LD_ADDR_VAR 0 7
13019: PUSH
13020: LD_VAR 0 3
13024: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
13025: LD_STRING getStreamItemsFromMission("
13027: PUSH
13028: LD_VAR 0 5
13032: STR
13033: PUSH
13034: LD_STRING ","
13036: STR
13037: PUSH
13038: LD_VAR 0 6
13042: STR
13043: PUSH
13044: LD_STRING ","
13046: STR
13047: PUSH
13048: LD_VAR 0 7
13052: STR
13053: PUSH
13054: LD_STRING ")
13056: STR
13057: PPUSH
13058: CALL_OW 559
// end else
13062: GO 13071
// ToLua ( getStreamItemsFromMission("","","") ) ;
13064: LD_STRING getStreamItemsFromMission("","","")
13066: PPUSH
13067: CALL_OW 559
// end ;
13071: LD_VAR 0 2
13075: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13076: LD_EXP 29
13080: PUSH
13081: LD_EXP 34
13085: AND
13086: IFFALSE 13210
13088: GO 13090
13090: DISABLE
13091: LD_INT 0
13093: PPUSH
13094: PPUSH
// begin enable ;
13095: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13096: LD_ADDR_VAR 0 2
13100: PUSH
13101: LD_INT 22
13103: PUSH
13104: LD_OWVAR 2
13108: PUSH
13109: EMPTY
13110: LIST
13111: LIST
13112: PUSH
13113: LD_INT 2
13115: PUSH
13116: LD_INT 34
13118: PUSH
13119: LD_INT 7
13121: PUSH
13122: EMPTY
13123: LIST
13124: LIST
13125: PUSH
13126: LD_INT 34
13128: PUSH
13129: LD_INT 45
13131: PUSH
13132: EMPTY
13133: LIST
13134: LIST
13135: PUSH
13136: LD_INT 34
13138: PUSH
13139: LD_INT 28
13141: PUSH
13142: EMPTY
13143: LIST
13144: LIST
13145: PUSH
13146: LD_INT 34
13148: PUSH
13149: LD_INT 47
13151: PUSH
13152: EMPTY
13153: LIST
13154: LIST
13155: PUSH
13156: EMPTY
13157: LIST
13158: LIST
13159: LIST
13160: LIST
13161: LIST
13162: PUSH
13163: EMPTY
13164: LIST
13165: LIST
13166: PPUSH
13167: CALL_OW 69
13171: ST_TO_ADDR
// if not tmp then
13172: LD_VAR 0 2
13176: NOT
13177: IFFALSE 13181
// exit ;
13179: GO 13210
// for i in tmp do
13181: LD_ADDR_VAR 0 1
13185: PUSH
13186: LD_VAR 0 2
13190: PUSH
13191: FOR_IN
13192: IFFALSE 13208
// begin SetLives ( i , 0 ) ;
13194: LD_VAR 0 1
13198: PPUSH
13199: LD_INT 0
13201: PPUSH
13202: CALL_OW 234
// end ;
13206: GO 13191
13208: POP
13209: POP
// end ;
13210: PPOPN 2
13212: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13213: LD_EXP 29
13217: PUSH
13218: LD_EXP 35
13222: AND
13223: IFFALSE 13307
13225: GO 13227
13227: DISABLE
13228: LD_INT 0
13230: PPUSH
13231: PPUSH
// begin enable ;
13232: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13233: LD_ADDR_VAR 0 2
13237: PUSH
13238: LD_INT 22
13240: PUSH
13241: LD_OWVAR 2
13245: PUSH
13246: EMPTY
13247: LIST
13248: LIST
13249: PUSH
13250: LD_INT 32
13252: PUSH
13253: LD_INT 3
13255: PUSH
13256: EMPTY
13257: LIST
13258: LIST
13259: PUSH
13260: EMPTY
13261: LIST
13262: LIST
13263: PPUSH
13264: CALL_OW 69
13268: ST_TO_ADDR
// if not tmp then
13269: LD_VAR 0 2
13273: NOT
13274: IFFALSE 13278
// exit ;
13276: GO 13307
// for i in tmp do
13278: LD_ADDR_VAR 0 1
13282: PUSH
13283: LD_VAR 0 2
13287: PUSH
13288: FOR_IN
13289: IFFALSE 13305
// begin SetLives ( i , 0 ) ;
13291: LD_VAR 0 1
13295: PPUSH
13296: LD_INT 0
13298: PPUSH
13299: CALL_OW 234
// end ;
13303: GO 13288
13305: POP
13306: POP
// end ;
13307: PPOPN 2
13309: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13310: LD_EXP 29
13314: PUSH
13315: LD_EXP 32
13319: AND
13320: IFFALSE 13413
13322: GO 13324
13324: DISABLE
13325: LD_INT 0
13327: PPUSH
// begin enable ;
13328: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13329: LD_ADDR_VAR 0 1
13333: PUSH
13334: LD_INT 22
13336: PUSH
13337: LD_OWVAR 2
13341: PUSH
13342: EMPTY
13343: LIST
13344: LIST
13345: PUSH
13346: LD_INT 2
13348: PUSH
13349: LD_INT 25
13351: PUSH
13352: LD_INT 5
13354: PUSH
13355: EMPTY
13356: LIST
13357: LIST
13358: PUSH
13359: LD_INT 25
13361: PUSH
13362: LD_INT 9
13364: PUSH
13365: EMPTY
13366: LIST
13367: LIST
13368: PUSH
13369: LD_INT 25
13371: PUSH
13372: LD_INT 8
13374: PUSH
13375: EMPTY
13376: LIST
13377: LIST
13378: PUSH
13379: EMPTY
13380: LIST
13381: LIST
13382: LIST
13383: LIST
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: PPUSH
13389: CALL_OW 69
13393: PUSH
13394: FOR_IN
13395: IFFALSE 13411
// begin SetClass ( i , 1 ) ;
13397: LD_VAR 0 1
13401: PPUSH
13402: LD_INT 1
13404: PPUSH
13405: CALL_OW 336
// end ;
13409: GO 13394
13411: POP
13412: POP
// end ;
13413: PPOPN 1
13415: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13416: LD_EXP 29
13420: PUSH
13421: LD_EXP 33
13425: AND
13426: PUSH
13427: LD_OWVAR 65
13431: PUSH
13432: LD_INT 7
13434: LESS
13435: AND
13436: IFFALSE 13450
13438: GO 13440
13440: DISABLE
// begin enable ;
13441: ENABLE
// game_speed := 7 ;
13442: LD_ADDR_OWVAR 65
13446: PUSH
13447: LD_INT 7
13449: ST_TO_ADDR
// end ;
13450: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13451: LD_EXP 29
13455: PUSH
13456: LD_EXP 36
13460: AND
13461: IFFALSE 13663
13463: GO 13465
13465: DISABLE
13466: LD_INT 0
13468: PPUSH
13469: PPUSH
13470: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13471: LD_ADDR_VAR 0 3
13475: PUSH
13476: LD_INT 81
13478: PUSH
13479: LD_OWVAR 2
13483: PUSH
13484: EMPTY
13485: LIST
13486: LIST
13487: PUSH
13488: LD_INT 21
13490: PUSH
13491: LD_INT 1
13493: PUSH
13494: EMPTY
13495: LIST
13496: LIST
13497: PUSH
13498: EMPTY
13499: LIST
13500: LIST
13501: PPUSH
13502: CALL_OW 69
13506: ST_TO_ADDR
// if not tmp then
13507: LD_VAR 0 3
13511: NOT
13512: IFFALSE 13516
// exit ;
13514: GO 13663
// if tmp > 5 then
13516: LD_VAR 0 3
13520: PUSH
13521: LD_INT 5
13523: GREATER
13524: IFFALSE 13536
// k := 5 else
13526: LD_ADDR_VAR 0 2
13530: PUSH
13531: LD_INT 5
13533: ST_TO_ADDR
13534: GO 13546
// k := tmp ;
13536: LD_ADDR_VAR 0 2
13540: PUSH
13541: LD_VAR 0 3
13545: ST_TO_ADDR
// for i := 1 to k do
13546: LD_ADDR_VAR 0 1
13550: PUSH
13551: DOUBLE
13552: LD_INT 1
13554: DEC
13555: ST_TO_ADDR
13556: LD_VAR 0 2
13560: PUSH
13561: FOR_TO
13562: IFFALSE 13661
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13564: LD_VAR 0 3
13568: PUSH
13569: LD_VAR 0 1
13573: ARRAY
13574: PPUSH
13575: LD_VAR 0 1
13579: PUSH
13580: LD_INT 4
13582: MOD
13583: PUSH
13584: LD_INT 1
13586: PLUS
13587: PPUSH
13588: CALL_OW 259
13592: PUSH
13593: LD_INT 10
13595: LESS
13596: IFFALSE 13659
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13598: LD_VAR 0 3
13602: PUSH
13603: LD_VAR 0 1
13607: ARRAY
13608: PPUSH
13609: LD_VAR 0 1
13613: PUSH
13614: LD_INT 4
13616: MOD
13617: PUSH
13618: LD_INT 1
13620: PLUS
13621: PPUSH
13622: LD_VAR 0 3
13626: PUSH
13627: LD_VAR 0 1
13631: ARRAY
13632: PPUSH
13633: LD_VAR 0 1
13637: PUSH
13638: LD_INT 4
13640: MOD
13641: PUSH
13642: LD_INT 1
13644: PLUS
13645: PPUSH
13646: CALL_OW 259
13650: PUSH
13651: LD_INT 1
13653: PLUS
13654: PPUSH
13655: CALL_OW 237
13659: GO 13561
13661: POP
13662: POP
// end ;
13663: PPOPN 3
13665: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13666: LD_EXP 29
13670: PUSH
13671: LD_EXP 37
13675: AND
13676: IFFALSE 13696
13678: GO 13680
13680: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13681: LD_INT 4
13683: PPUSH
13684: LD_OWVAR 2
13688: PPUSH
13689: LD_INT 0
13691: PPUSH
13692: CALL_OW 324
13696: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13697: LD_EXP 29
13701: PUSH
13702: LD_EXP 66
13706: AND
13707: IFFALSE 13727
13709: GO 13711
13711: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13712: LD_INT 19
13714: PPUSH
13715: LD_OWVAR 2
13719: PPUSH
13720: LD_INT 0
13722: PPUSH
13723: CALL_OW 324
13727: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13728: LD_EXP 29
13732: PUSH
13733: LD_EXP 38
13737: AND
13738: IFFALSE 13840
13740: GO 13742
13742: DISABLE
13743: LD_INT 0
13745: PPUSH
13746: PPUSH
// begin enable ;
13747: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13748: LD_ADDR_VAR 0 2
13752: PUSH
13753: LD_INT 22
13755: PUSH
13756: LD_OWVAR 2
13760: PUSH
13761: EMPTY
13762: LIST
13763: LIST
13764: PUSH
13765: LD_INT 2
13767: PUSH
13768: LD_INT 34
13770: PUSH
13771: LD_INT 11
13773: PUSH
13774: EMPTY
13775: LIST
13776: LIST
13777: PUSH
13778: LD_INT 34
13780: PUSH
13781: LD_INT 30
13783: PUSH
13784: EMPTY
13785: LIST
13786: LIST
13787: PUSH
13788: EMPTY
13789: LIST
13790: LIST
13791: LIST
13792: PUSH
13793: EMPTY
13794: LIST
13795: LIST
13796: PPUSH
13797: CALL_OW 69
13801: ST_TO_ADDR
// if not tmp then
13802: LD_VAR 0 2
13806: NOT
13807: IFFALSE 13811
// exit ;
13809: GO 13840
// for i in tmp do
13811: LD_ADDR_VAR 0 1
13815: PUSH
13816: LD_VAR 0 2
13820: PUSH
13821: FOR_IN
13822: IFFALSE 13838
// begin SetLives ( i , 0 ) ;
13824: LD_VAR 0 1
13828: PPUSH
13829: LD_INT 0
13831: PPUSH
13832: CALL_OW 234
// end ;
13836: GO 13821
13838: POP
13839: POP
// end ;
13840: PPOPN 2
13842: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13843: LD_EXP 29
13847: PUSH
13848: LD_EXP 39
13852: AND
13853: IFFALSE 13873
13855: GO 13857
13857: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13858: LD_INT 32
13860: PPUSH
13861: LD_OWVAR 2
13865: PPUSH
13866: LD_INT 0
13868: PPUSH
13869: CALL_OW 324
13873: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13874: LD_EXP 29
13878: PUSH
13879: LD_EXP 40
13883: AND
13884: IFFALSE 14065
13886: GO 13888
13888: DISABLE
13889: LD_INT 0
13891: PPUSH
13892: PPUSH
13893: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13894: LD_ADDR_VAR 0 2
13898: PUSH
13899: LD_INT 22
13901: PUSH
13902: LD_OWVAR 2
13906: PUSH
13907: EMPTY
13908: LIST
13909: LIST
13910: PUSH
13911: LD_INT 33
13913: PUSH
13914: LD_INT 3
13916: PUSH
13917: EMPTY
13918: LIST
13919: LIST
13920: PUSH
13921: EMPTY
13922: LIST
13923: LIST
13924: PPUSH
13925: CALL_OW 69
13929: ST_TO_ADDR
// if not tmp then
13930: LD_VAR 0 2
13934: NOT
13935: IFFALSE 13939
// exit ;
13937: GO 14065
// side := 0 ;
13939: LD_ADDR_VAR 0 3
13943: PUSH
13944: LD_INT 0
13946: ST_TO_ADDR
// for i := 1 to 8 do
13947: LD_ADDR_VAR 0 1
13951: PUSH
13952: DOUBLE
13953: LD_INT 1
13955: DEC
13956: ST_TO_ADDR
13957: LD_INT 8
13959: PUSH
13960: FOR_TO
13961: IFFALSE 14009
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
13963: LD_OWVAR 2
13967: PUSH
13968: LD_VAR 0 1
13972: NONEQUAL
13973: PUSH
13974: LD_OWVAR 2
13978: PPUSH
13979: LD_VAR 0 1
13983: PPUSH
13984: CALL_OW 81
13988: PUSH
13989: LD_INT 2
13991: EQUAL
13992: AND
13993: IFFALSE 14007
// begin side := i ;
13995: LD_ADDR_VAR 0 3
13999: PUSH
14000: LD_VAR 0 1
14004: ST_TO_ADDR
// break ;
14005: GO 14009
// end ;
14007: GO 13960
14009: POP
14010: POP
// if not side then
14011: LD_VAR 0 3
14015: NOT
14016: IFFALSE 14020
// exit ;
14018: GO 14065
// for i := 1 to tmp do
14020: LD_ADDR_VAR 0 1
14024: PUSH
14025: DOUBLE
14026: LD_INT 1
14028: DEC
14029: ST_TO_ADDR
14030: LD_VAR 0 2
14034: PUSH
14035: FOR_TO
14036: IFFALSE 14063
// if Prob ( 60 ) then
14038: LD_INT 60
14040: PPUSH
14041: CALL_OW 13
14045: IFFALSE 14061
// SetSide ( i , side ) ;
14047: LD_VAR 0 1
14051: PPUSH
14052: LD_VAR 0 3
14056: PPUSH
14057: CALL_OW 235
14061: GO 14035
14063: POP
14064: POP
// end ;
14065: PPOPN 3
14067: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14068: LD_EXP 29
14072: PUSH
14073: LD_EXP 42
14077: AND
14078: IFFALSE 14197
14080: GO 14082
14082: DISABLE
14083: LD_INT 0
14085: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14086: LD_ADDR_VAR 0 1
14090: PUSH
14091: LD_INT 22
14093: PUSH
14094: LD_OWVAR 2
14098: PUSH
14099: EMPTY
14100: LIST
14101: LIST
14102: PUSH
14103: LD_INT 21
14105: PUSH
14106: LD_INT 1
14108: PUSH
14109: EMPTY
14110: LIST
14111: LIST
14112: PUSH
14113: LD_INT 3
14115: PUSH
14116: LD_INT 23
14118: PUSH
14119: LD_INT 0
14121: PUSH
14122: EMPTY
14123: LIST
14124: LIST
14125: PUSH
14126: EMPTY
14127: LIST
14128: LIST
14129: PUSH
14130: EMPTY
14131: LIST
14132: LIST
14133: LIST
14134: PPUSH
14135: CALL_OW 69
14139: PUSH
14140: FOR_IN
14141: IFFALSE 14195
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14143: LD_VAR 0 1
14147: PPUSH
14148: CALL_OW 257
14152: PUSH
14153: LD_INT 1
14155: PUSH
14156: LD_INT 2
14158: PUSH
14159: LD_INT 3
14161: PUSH
14162: LD_INT 4
14164: PUSH
14165: EMPTY
14166: LIST
14167: LIST
14168: LIST
14169: LIST
14170: IN
14171: IFFALSE 14193
// SetClass ( un , rand ( 1 , 4 ) ) ;
14173: LD_VAR 0 1
14177: PPUSH
14178: LD_INT 1
14180: PPUSH
14181: LD_INT 4
14183: PPUSH
14184: CALL_OW 12
14188: PPUSH
14189: CALL_OW 336
14193: GO 14140
14195: POP
14196: POP
// end ;
14197: PPOPN 1
14199: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14200: LD_EXP 29
14204: PUSH
14205: LD_EXP 41
14209: AND
14210: IFFALSE 14289
14212: GO 14214
14214: DISABLE
14215: LD_INT 0
14217: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14218: LD_ADDR_VAR 0 1
14222: PUSH
14223: LD_INT 22
14225: PUSH
14226: LD_OWVAR 2
14230: PUSH
14231: EMPTY
14232: LIST
14233: LIST
14234: PUSH
14235: LD_INT 21
14237: PUSH
14238: LD_INT 3
14240: PUSH
14241: EMPTY
14242: LIST
14243: LIST
14244: PUSH
14245: EMPTY
14246: LIST
14247: LIST
14248: PPUSH
14249: CALL_OW 69
14253: ST_TO_ADDR
// if not tmp then
14254: LD_VAR 0 1
14258: NOT
14259: IFFALSE 14263
// exit ;
14261: GO 14289
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14263: LD_VAR 0 1
14267: PUSH
14268: LD_INT 1
14270: PPUSH
14271: LD_VAR 0 1
14275: PPUSH
14276: CALL_OW 12
14280: ARRAY
14281: PPUSH
14282: LD_INT 100
14284: PPUSH
14285: CALL_OW 234
// end ;
14289: PPOPN 1
14291: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14292: LD_EXP 29
14296: PUSH
14297: LD_EXP 43
14301: AND
14302: IFFALSE 14400
14304: GO 14306
14306: DISABLE
14307: LD_INT 0
14309: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14310: LD_ADDR_VAR 0 1
14314: PUSH
14315: LD_INT 22
14317: PUSH
14318: LD_OWVAR 2
14322: PUSH
14323: EMPTY
14324: LIST
14325: LIST
14326: PUSH
14327: LD_INT 21
14329: PUSH
14330: LD_INT 1
14332: PUSH
14333: EMPTY
14334: LIST
14335: LIST
14336: PUSH
14337: EMPTY
14338: LIST
14339: LIST
14340: PPUSH
14341: CALL_OW 69
14345: ST_TO_ADDR
// if not tmp then
14346: LD_VAR 0 1
14350: NOT
14351: IFFALSE 14355
// exit ;
14353: GO 14400
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14355: LD_VAR 0 1
14359: PUSH
14360: LD_INT 1
14362: PPUSH
14363: LD_VAR 0 1
14367: PPUSH
14368: CALL_OW 12
14372: ARRAY
14373: PPUSH
14374: LD_INT 1
14376: PPUSH
14377: LD_INT 4
14379: PPUSH
14380: CALL_OW 12
14384: PPUSH
14385: LD_INT 3000
14387: PPUSH
14388: LD_INT 9000
14390: PPUSH
14391: CALL_OW 12
14395: PPUSH
14396: CALL_OW 492
// end ;
14400: PPOPN 1
14402: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14403: LD_EXP 29
14407: PUSH
14408: LD_EXP 44
14412: AND
14413: IFFALSE 14433
14415: GO 14417
14417: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14418: LD_INT 1
14420: PPUSH
14421: LD_OWVAR 2
14425: PPUSH
14426: LD_INT 0
14428: PPUSH
14429: CALL_OW 324
14433: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14434: LD_EXP 29
14438: PUSH
14439: LD_EXP 45
14443: AND
14444: IFFALSE 14527
14446: GO 14448
14448: DISABLE
14449: LD_INT 0
14451: PPUSH
14452: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14453: LD_ADDR_VAR 0 2
14457: PUSH
14458: LD_INT 22
14460: PUSH
14461: LD_OWVAR 2
14465: PUSH
14466: EMPTY
14467: LIST
14468: LIST
14469: PUSH
14470: LD_INT 21
14472: PUSH
14473: LD_INT 3
14475: PUSH
14476: EMPTY
14477: LIST
14478: LIST
14479: PUSH
14480: EMPTY
14481: LIST
14482: LIST
14483: PPUSH
14484: CALL_OW 69
14488: ST_TO_ADDR
// if not tmp then
14489: LD_VAR 0 2
14493: NOT
14494: IFFALSE 14498
// exit ;
14496: GO 14527
// for i in tmp do
14498: LD_ADDR_VAR 0 1
14502: PUSH
14503: LD_VAR 0 2
14507: PUSH
14508: FOR_IN
14509: IFFALSE 14525
// SetBLevel ( i , 10 ) ;
14511: LD_VAR 0 1
14515: PPUSH
14516: LD_INT 10
14518: PPUSH
14519: CALL_OW 241
14523: GO 14508
14525: POP
14526: POP
// end ;
14527: PPOPN 2
14529: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14530: LD_EXP 29
14534: PUSH
14535: LD_EXP 46
14539: AND
14540: IFFALSE 14651
14542: GO 14544
14544: DISABLE
14545: LD_INT 0
14547: PPUSH
14548: PPUSH
14549: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14550: LD_ADDR_VAR 0 3
14554: PUSH
14555: LD_INT 22
14557: PUSH
14558: LD_OWVAR 2
14562: PUSH
14563: EMPTY
14564: LIST
14565: LIST
14566: PUSH
14567: LD_INT 25
14569: PUSH
14570: LD_INT 1
14572: PUSH
14573: EMPTY
14574: LIST
14575: LIST
14576: PUSH
14577: EMPTY
14578: LIST
14579: LIST
14580: PPUSH
14581: CALL_OW 69
14585: ST_TO_ADDR
// if not tmp then
14586: LD_VAR 0 3
14590: NOT
14591: IFFALSE 14595
// exit ;
14593: GO 14651
// un := tmp [ rand ( 1 , tmp ) ] ;
14595: LD_ADDR_VAR 0 2
14599: PUSH
14600: LD_VAR 0 3
14604: PUSH
14605: LD_INT 1
14607: PPUSH
14608: LD_VAR 0 3
14612: PPUSH
14613: CALL_OW 12
14617: ARRAY
14618: ST_TO_ADDR
// if Crawls ( un ) then
14619: LD_VAR 0 2
14623: PPUSH
14624: CALL_OW 318
14628: IFFALSE 14639
// ComWalk ( un ) ;
14630: LD_VAR 0 2
14634: PPUSH
14635: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14639: LD_VAR 0 2
14643: PPUSH
14644: LD_INT 5
14646: PPUSH
14647: CALL_OW 336
// end ;
14651: PPOPN 3
14653: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
14654: LD_EXP 29
14658: PUSH
14659: LD_EXP 47
14663: AND
14664: PUSH
14665: LD_OWVAR 67
14669: PUSH
14670: LD_INT 4
14672: LESS
14673: AND
14674: IFFALSE 14693
14676: GO 14678
14678: DISABLE
// begin Difficulty := Difficulty + 1 ;
14679: LD_ADDR_OWVAR 67
14683: PUSH
14684: LD_OWVAR 67
14688: PUSH
14689: LD_INT 1
14691: PLUS
14692: ST_TO_ADDR
// end ;
14693: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14694: LD_EXP 29
14698: PUSH
14699: LD_EXP 48
14703: AND
14704: IFFALSE 14807
14706: GO 14708
14708: DISABLE
14709: LD_INT 0
14711: PPUSH
// begin for i := 1 to 5 do
14712: LD_ADDR_VAR 0 1
14716: PUSH
14717: DOUBLE
14718: LD_INT 1
14720: DEC
14721: ST_TO_ADDR
14722: LD_INT 5
14724: PUSH
14725: FOR_TO
14726: IFFALSE 14805
// begin uc_nation := nation_nature ;
14728: LD_ADDR_OWVAR 21
14732: PUSH
14733: LD_INT 0
14735: ST_TO_ADDR
// uc_side := 0 ;
14736: LD_ADDR_OWVAR 20
14740: PUSH
14741: LD_INT 0
14743: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14744: LD_ADDR_OWVAR 29
14748: PUSH
14749: LD_INT 12
14751: PUSH
14752: LD_INT 12
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: ST_TO_ADDR
// hc_agressivity := 20 ;
14759: LD_ADDR_OWVAR 35
14763: PUSH
14764: LD_INT 20
14766: ST_TO_ADDR
// hc_class := class_tiger ;
14767: LD_ADDR_OWVAR 28
14771: PUSH
14772: LD_INT 14
14774: ST_TO_ADDR
// hc_gallery :=  ;
14775: LD_ADDR_OWVAR 33
14779: PUSH
14780: LD_STRING 
14782: ST_TO_ADDR
// hc_name :=  ;
14783: LD_ADDR_OWVAR 26
14787: PUSH
14788: LD_STRING 
14790: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14791: CALL_OW 44
14795: PPUSH
14796: LD_INT 0
14798: PPUSH
14799: CALL_OW 51
// end ;
14803: GO 14725
14805: POP
14806: POP
// end ;
14807: PPOPN 1
14809: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14810: LD_EXP 29
14814: PUSH
14815: LD_EXP 49
14819: AND
14820: IFFALSE 14829
14822: GO 14824
14824: DISABLE
// StreamSibBomb ;
14825: CALL 14830 0 0
14829: END
// export function StreamSibBomb ; var i , x , y ; begin
14830: LD_INT 0
14832: PPUSH
14833: PPUSH
14834: PPUSH
14835: PPUSH
// result := false ;
14836: LD_ADDR_VAR 0 1
14840: PUSH
14841: LD_INT 0
14843: ST_TO_ADDR
// for i := 1 to 16 do
14844: LD_ADDR_VAR 0 2
14848: PUSH
14849: DOUBLE
14850: LD_INT 1
14852: DEC
14853: ST_TO_ADDR
14854: LD_INT 16
14856: PUSH
14857: FOR_TO
14858: IFFALSE 15057
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14860: LD_ADDR_VAR 0 3
14864: PUSH
14865: LD_INT 10
14867: PUSH
14868: LD_INT 20
14870: PUSH
14871: LD_INT 30
14873: PUSH
14874: LD_INT 40
14876: PUSH
14877: LD_INT 50
14879: PUSH
14880: LD_INT 60
14882: PUSH
14883: LD_INT 70
14885: PUSH
14886: LD_INT 80
14888: PUSH
14889: LD_INT 90
14891: PUSH
14892: LD_INT 100
14894: PUSH
14895: LD_INT 110
14897: PUSH
14898: LD_INT 120
14900: PUSH
14901: LD_INT 130
14903: PUSH
14904: LD_INT 140
14906: PUSH
14907: LD_INT 150
14909: PUSH
14910: EMPTY
14911: LIST
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: PUSH
14927: LD_INT 1
14929: PPUSH
14930: LD_INT 15
14932: PPUSH
14933: CALL_OW 12
14937: ARRAY
14938: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14939: LD_ADDR_VAR 0 4
14943: PUSH
14944: LD_INT 10
14946: PUSH
14947: LD_INT 20
14949: PUSH
14950: LD_INT 30
14952: PUSH
14953: LD_INT 40
14955: PUSH
14956: LD_INT 50
14958: PUSH
14959: LD_INT 60
14961: PUSH
14962: LD_INT 70
14964: PUSH
14965: LD_INT 80
14967: PUSH
14968: LD_INT 90
14970: PUSH
14971: LD_INT 100
14973: PUSH
14974: LD_INT 110
14976: PUSH
14977: LD_INT 120
14979: PUSH
14980: LD_INT 130
14982: PUSH
14983: LD_INT 140
14985: PUSH
14986: LD_INT 150
14988: PUSH
14989: EMPTY
14990: LIST
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: PUSH
15006: LD_INT 1
15008: PPUSH
15009: LD_INT 15
15011: PPUSH
15012: CALL_OW 12
15016: ARRAY
15017: ST_TO_ADDR
// if ValidHex ( x , y ) then
15018: LD_VAR 0 3
15022: PPUSH
15023: LD_VAR 0 4
15027: PPUSH
15028: CALL_OW 488
15032: IFFALSE 15055
// begin result := [ x , y ] ;
15034: LD_ADDR_VAR 0 1
15038: PUSH
15039: LD_VAR 0 3
15043: PUSH
15044: LD_VAR 0 4
15048: PUSH
15049: EMPTY
15050: LIST
15051: LIST
15052: ST_TO_ADDR
// break ;
15053: GO 15057
// end ; end ;
15055: GO 14857
15057: POP
15058: POP
// if result then
15059: LD_VAR 0 1
15063: IFFALSE 15123
// begin ToLua ( playSibBomb() ) ;
15065: LD_STRING playSibBomb()
15067: PPUSH
15068: CALL_OW 559
// wait ( 0 0$14 ) ;
15072: LD_INT 490
15074: PPUSH
15075: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15079: LD_VAR 0 1
15083: PUSH
15084: LD_INT 1
15086: ARRAY
15087: PPUSH
15088: LD_VAR 0 1
15092: PUSH
15093: LD_INT 2
15095: ARRAY
15096: PPUSH
15097: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15101: LD_VAR 0 1
15105: PUSH
15106: LD_INT 1
15108: ARRAY
15109: PPUSH
15110: LD_VAR 0 1
15114: PUSH
15115: LD_INT 2
15117: ARRAY
15118: PPUSH
15119: CALL_OW 429
// end ; end ;
15123: LD_VAR 0 1
15127: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15128: LD_EXP 29
15132: PUSH
15133: LD_EXP 51
15137: AND
15138: IFFALSE 15150
15140: GO 15142
15142: DISABLE
// YouLost (  ) ;
15143: LD_STRING 
15145: PPUSH
15146: CALL_OW 104
15150: END
// every 0 0$1 trigger StreamModeActive and sFog do
15151: LD_EXP 29
15155: PUSH
15156: LD_EXP 50
15160: AND
15161: IFFALSE 15175
15163: GO 15165
15165: DISABLE
// FogOff ( your_side ) ;
15166: LD_OWVAR 2
15170: PPUSH
15171: CALL_OW 344
15175: END
// every 0 0$1 trigger StreamModeActive and sSun do
15176: LD_EXP 29
15180: PUSH
15181: LD_EXP 52
15185: AND
15186: IFFALSE 15214
15188: GO 15190
15190: DISABLE
// begin solar_recharge_percent := 0 ;
15191: LD_ADDR_OWVAR 79
15195: PUSH
15196: LD_INT 0
15198: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15199: LD_INT 10500
15201: PPUSH
15202: CALL_OW 67
// solar_recharge_percent := 100 ;
15206: LD_ADDR_OWVAR 79
15210: PUSH
15211: LD_INT 100
15213: ST_TO_ADDR
// end ;
15214: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15215: LD_EXP 29
15219: PUSH
15220: LD_EXP 53
15224: AND
15225: IFFALSE 15464
15227: GO 15229
15229: DISABLE
15230: LD_INT 0
15232: PPUSH
15233: PPUSH
15234: PPUSH
// begin tmp := [ ] ;
15235: LD_ADDR_VAR 0 3
15239: PUSH
15240: EMPTY
15241: ST_TO_ADDR
// for i := 1 to 6 do
15242: LD_ADDR_VAR 0 1
15246: PUSH
15247: DOUBLE
15248: LD_INT 1
15250: DEC
15251: ST_TO_ADDR
15252: LD_INT 6
15254: PUSH
15255: FOR_TO
15256: IFFALSE 15361
// begin uc_nation := nation_nature ;
15258: LD_ADDR_OWVAR 21
15262: PUSH
15263: LD_INT 0
15265: ST_TO_ADDR
// uc_side := 0 ;
15266: LD_ADDR_OWVAR 20
15270: PUSH
15271: LD_INT 0
15273: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15274: LD_ADDR_OWVAR 29
15278: PUSH
15279: LD_INT 12
15281: PUSH
15282: LD_INT 12
15284: PUSH
15285: EMPTY
15286: LIST
15287: LIST
15288: ST_TO_ADDR
// hc_agressivity := 20 ;
15289: LD_ADDR_OWVAR 35
15293: PUSH
15294: LD_INT 20
15296: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15297: LD_ADDR_OWVAR 28
15301: PUSH
15302: LD_INT 17
15304: ST_TO_ADDR
// hc_gallery :=  ;
15305: LD_ADDR_OWVAR 33
15309: PUSH
15310: LD_STRING 
15312: ST_TO_ADDR
// hc_name :=  ;
15313: LD_ADDR_OWVAR 26
15317: PUSH
15318: LD_STRING 
15320: ST_TO_ADDR
// un := CreateHuman ;
15321: LD_ADDR_VAR 0 2
15325: PUSH
15326: CALL_OW 44
15330: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15331: LD_VAR 0 2
15335: PPUSH
15336: LD_INT 1
15338: PPUSH
15339: CALL_OW 51
// tmp := tmp ^ un ;
15343: LD_ADDR_VAR 0 3
15347: PUSH
15348: LD_VAR 0 3
15352: PUSH
15353: LD_VAR 0 2
15357: ADD
15358: ST_TO_ADDR
// end ;
15359: GO 15255
15361: POP
15362: POP
// repeat wait ( 0 0$1 ) ;
15363: LD_INT 35
15365: PPUSH
15366: CALL_OW 67
// for un in tmp do
15370: LD_ADDR_VAR 0 2
15374: PUSH
15375: LD_VAR 0 3
15379: PUSH
15380: FOR_IN
15381: IFFALSE 15455
// begin if IsDead ( un ) then
15383: LD_VAR 0 2
15387: PPUSH
15388: CALL_OW 301
15392: IFFALSE 15412
// begin tmp := tmp diff un ;
15394: LD_ADDR_VAR 0 3
15398: PUSH
15399: LD_VAR 0 3
15403: PUSH
15404: LD_VAR 0 2
15408: DIFF
15409: ST_TO_ADDR
// continue ;
15410: GO 15380
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15412: LD_VAR 0 2
15416: PPUSH
15417: LD_INT 3
15419: PUSH
15420: LD_INT 22
15422: PUSH
15423: LD_INT 0
15425: PUSH
15426: EMPTY
15427: LIST
15428: LIST
15429: PUSH
15430: EMPTY
15431: LIST
15432: LIST
15433: PPUSH
15434: CALL_OW 69
15438: PPUSH
15439: LD_VAR 0 2
15443: PPUSH
15444: CALL_OW 74
15448: PPUSH
15449: CALL_OW 115
// end ;
15453: GO 15380
15455: POP
15456: POP
// until not tmp ;
15457: LD_VAR 0 3
15461: NOT
15462: IFFALSE 15363
// end ;
15464: PPOPN 3
15466: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15467: LD_EXP 29
15471: PUSH
15472: LD_EXP 54
15476: AND
15477: IFFALSE 15531
15479: GO 15481
15481: DISABLE
// begin ToLua ( displayTroll(); ) ;
15482: LD_STRING displayTroll();
15484: PPUSH
15485: CALL_OW 559
// wait ( 3 3$00 ) ;
15489: LD_INT 6300
15491: PPUSH
15492: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15496: LD_STRING hideTroll();
15498: PPUSH
15499: CALL_OW 559
// wait ( 1 1$00 ) ;
15503: LD_INT 2100
15505: PPUSH
15506: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15510: LD_STRING displayTroll();
15512: PPUSH
15513: CALL_OW 559
// wait ( 1 1$00 ) ;
15517: LD_INT 2100
15519: PPUSH
15520: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15524: LD_STRING hideTroll();
15526: PPUSH
15527: CALL_OW 559
// end ;
15531: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15532: LD_EXP 29
15536: PUSH
15537: LD_EXP 55
15541: AND
15542: IFFALSE 15605
15544: GO 15546
15546: DISABLE
15547: LD_INT 0
15549: PPUSH
// begin p := 0 ;
15550: LD_ADDR_VAR 0 1
15554: PUSH
15555: LD_INT 0
15557: ST_TO_ADDR
// repeat game_speed := 1 ;
15558: LD_ADDR_OWVAR 65
15562: PUSH
15563: LD_INT 1
15565: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15566: LD_INT 35
15568: PPUSH
15569: CALL_OW 67
// p := p + 1 ;
15573: LD_ADDR_VAR 0 1
15577: PUSH
15578: LD_VAR 0 1
15582: PUSH
15583: LD_INT 1
15585: PLUS
15586: ST_TO_ADDR
// until p >= 60 ;
15587: LD_VAR 0 1
15591: PUSH
15592: LD_INT 60
15594: GREATEREQUAL
15595: IFFALSE 15558
// game_speed := 4 ;
15597: LD_ADDR_OWVAR 65
15601: PUSH
15602: LD_INT 4
15604: ST_TO_ADDR
// end ;
15605: PPOPN 1
15607: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15608: LD_EXP 29
15612: PUSH
15613: LD_EXP 56
15617: AND
15618: IFFALSE 15764
15620: GO 15622
15622: DISABLE
15623: LD_INT 0
15625: PPUSH
15626: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15627: LD_ADDR_VAR 0 1
15631: PUSH
15632: LD_INT 22
15634: PUSH
15635: LD_OWVAR 2
15639: PUSH
15640: EMPTY
15641: LIST
15642: LIST
15643: PUSH
15644: LD_INT 2
15646: PUSH
15647: LD_INT 30
15649: PUSH
15650: LD_INT 0
15652: PUSH
15653: EMPTY
15654: LIST
15655: LIST
15656: PUSH
15657: LD_INT 30
15659: PUSH
15660: LD_INT 1
15662: PUSH
15663: EMPTY
15664: LIST
15665: LIST
15666: PUSH
15667: EMPTY
15668: LIST
15669: LIST
15670: LIST
15671: PUSH
15672: EMPTY
15673: LIST
15674: LIST
15675: PPUSH
15676: CALL_OW 69
15680: ST_TO_ADDR
// if not depot then
15681: LD_VAR 0 1
15685: NOT
15686: IFFALSE 15690
// exit ;
15688: GO 15764
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15690: LD_ADDR_VAR 0 2
15694: PUSH
15695: LD_VAR 0 1
15699: PUSH
15700: LD_INT 1
15702: PPUSH
15703: LD_VAR 0 1
15707: PPUSH
15708: CALL_OW 12
15712: ARRAY
15713: PPUSH
15714: CALL_OW 274
15718: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15719: LD_VAR 0 2
15723: PPUSH
15724: LD_INT 1
15726: PPUSH
15727: LD_INT 0
15729: PPUSH
15730: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15734: LD_VAR 0 2
15738: PPUSH
15739: LD_INT 2
15741: PPUSH
15742: LD_INT 0
15744: PPUSH
15745: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15749: LD_VAR 0 2
15753: PPUSH
15754: LD_INT 3
15756: PPUSH
15757: LD_INT 0
15759: PPUSH
15760: CALL_OW 277
// end ;
15764: PPOPN 2
15766: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15767: LD_EXP 29
15771: PUSH
15772: LD_EXP 57
15776: AND
15777: IFFALSE 15874
15779: GO 15781
15781: DISABLE
15782: LD_INT 0
15784: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15785: LD_ADDR_VAR 0 1
15789: PUSH
15790: LD_INT 22
15792: PUSH
15793: LD_OWVAR 2
15797: PUSH
15798: EMPTY
15799: LIST
15800: LIST
15801: PUSH
15802: LD_INT 21
15804: PUSH
15805: LD_INT 1
15807: PUSH
15808: EMPTY
15809: LIST
15810: LIST
15811: PUSH
15812: LD_INT 3
15814: PUSH
15815: LD_INT 23
15817: PUSH
15818: LD_INT 0
15820: PUSH
15821: EMPTY
15822: LIST
15823: LIST
15824: PUSH
15825: EMPTY
15826: LIST
15827: LIST
15828: PUSH
15829: EMPTY
15830: LIST
15831: LIST
15832: LIST
15833: PPUSH
15834: CALL_OW 69
15838: ST_TO_ADDR
// if not tmp then
15839: LD_VAR 0 1
15843: NOT
15844: IFFALSE 15848
// exit ;
15846: GO 15874
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15848: LD_VAR 0 1
15852: PUSH
15853: LD_INT 1
15855: PPUSH
15856: LD_VAR 0 1
15860: PPUSH
15861: CALL_OW 12
15865: ARRAY
15866: PPUSH
15867: LD_INT 200
15869: PPUSH
15870: CALL_OW 234
// end ;
15874: PPOPN 1
15876: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15877: LD_EXP 29
15881: PUSH
15882: LD_EXP 58
15886: AND
15887: IFFALSE 15966
15889: GO 15891
15891: DISABLE
15892: LD_INT 0
15894: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15895: LD_ADDR_VAR 0 1
15899: PUSH
15900: LD_INT 22
15902: PUSH
15903: LD_OWVAR 2
15907: PUSH
15908: EMPTY
15909: LIST
15910: LIST
15911: PUSH
15912: LD_INT 21
15914: PUSH
15915: LD_INT 2
15917: PUSH
15918: EMPTY
15919: LIST
15920: LIST
15921: PUSH
15922: EMPTY
15923: LIST
15924: LIST
15925: PPUSH
15926: CALL_OW 69
15930: ST_TO_ADDR
// if not tmp then
15931: LD_VAR 0 1
15935: NOT
15936: IFFALSE 15940
// exit ;
15938: GO 15966
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15940: LD_VAR 0 1
15944: PUSH
15945: LD_INT 1
15947: PPUSH
15948: LD_VAR 0 1
15952: PPUSH
15953: CALL_OW 12
15957: ARRAY
15958: PPUSH
15959: LD_INT 60
15961: PPUSH
15962: CALL_OW 234
// end ;
15966: PPOPN 1
15968: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
15969: LD_EXP 29
15973: PUSH
15974: LD_EXP 59
15978: AND
15979: IFFALSE 16078
15981: GO 15983
15983: DISABLE
15984: LD_INT 0
15986: PPUSH
15987: PPUSH
// begin enable ;
15988: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
15989: LD_ADDR_VAR 0 1
15993: PUSH
15994: LD_INT 22
15996: PUSH
15997: LD_OWVAR 2
16001: PUSH
16002: EMPTY
16003: LIST
16004: LIST
16005: PUSH
16006: LD_INT 61
16008: PUSH
16009: EMPTY
16010: LIST
16011: PUSH
16012: LD_INT 33
16014: PUSH
16015: LD_INT 2
16017: PUSH
16018: EMPTY
16019: LIST
16020: LIST
16021: PUSH
16022: EMPTY
16023: LIST
16024: LIST
16025: LIST
16026: PPUSH
16027: CALL_OW 69
16031: ST_TO_ADDR
// if not tmp then
16032: LD_VAR 0 1
16036: NOT
16037: IFFALSE 16041
// exit ;
16039: GO 16078
// for i in tmp do
16041: LD_ADDR_VAR 0 2
16045: PUSH
16046: LD_VAR 0 1
16050: PUSH
16051: FOR_IN
16052: IFFALSE 16076
// if IsControledBy ( i ) then
16054: LD_VAR 0 2
16058: PPUSH
16059: CALL_OW 312
16063: IFFALSE 16074
// ComUnlink ( i ) ;
16065: LD_VAR 0 2
16069: PPUSH
16070: CALL_OW 136
16074: GO 16051
16076: POP
16077: POP
// end ;
16078: PPOPN 2
16080: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16081: LD_EXP 29
16085: PUSH
16086: LD_EXP 60
16090: AND
16091: IFFALSE 16231
16093: GO 16095
16095: DISABLE
16096: LD_INT 0
16098: PPUSH
16099: PPUSH
// begin ToLua ( displayPowell(); ) ;
16100: LD_STRING displayPowell();
16102: PPUSH
16103: CALL_OW 559
// uc_side := 0 ;
16107: LD_ADDR_OWVAR 20
16111: PUSH
16112: LD_INT 0
16114: ST_TO_ADDR
// uc_nation := 2 ;
16115: LD_ADDR_OWVAR 21
16119: PUSH
16120: LD_INT 2
16122: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16123: LD_ADDR_OWVAR 37
16127: PUSH
16128: LD_INT 14
16130: ST_TO_ADDR
// vc_engine := engine_siberite ;
16131: LD_ADDR_OWVAR 39
16135: PUSH
16136: LD_INT 3
16138: ST_TO_ADDR
// vc_control := control_apeman ;
16139: LD_ADDR_OWVAR 38
16143: PUSH
16144: LD_INT 5
16146: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16147: LD_ADDR_OWVAR 40
16151: PUSH
16152: LD_INT 29
16154: ST_TO_ADDR
// un := CreateVehicle ;
16155: LD_ADDR_VAR 0 2
16159: PUSH
16160: CALL_OW 45
16164: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16165: LD_VAR 0 2
16169: PPUSH
16170: LD_INT 1
16172: PPUSH
16173: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16177: LD_INT 35
16179: PPUSH
16180: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16184: LD_VAR 0 2
16188: PPUSH
16189: LD_INT 22
16191: PUSH
16192: LD_OWVAR 2
16196: PUSH
16197: EMPTY
16198: LIST
16199: LIST
16200: PPUSH
16201: CALL_OW 69
16205: PPUSH
16206: LD_VAR 0 2
16210: PPUSH
16211: CALL_OW 74
16215: PPUSH
16216: CALL_OW 115
// until IsDead ( un ) ;
16220: LD_VAR 0 2
16224: PPUSH
16225: CALL_OW 301
16229: IFFALSE 16177
// end ;
16231: PPOPN 2
16233: END
// every 0 0$1 trigger StreamModeActive and sStu do
16234: LD_EXP 29
16238: PUSH
16239: LD_EXP 68
16243: AND
16244: IFFALSE 16260
16246: GO 16248
16248: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16249: LD_STRING displayStucuk();
16251: PPUSH
16252: CALL_OW 559
// ResetFog ;
16256: CALL_OW 335
// end ;
16260: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16261: LD_EXP 29
16265: PUSH
16266: LD_EXP 61
16270: AND
16271: IFFALSE 16412
16273: GO 16275
16275: DISABLE
16276: LD_INT 0
16278: PPUSH
16279: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16280: LD_ADDR_VAR 0 2
16284: PUSH
16285: LD_INT 22
16287: PUSH
16288: LD_OWVAR 2
16292: PUSH
16293: EMPTY
16294: LIST
16295: LIST
16296: PUSH
16297: LD_INT 21
16299: PUSH
16300: LD_INT 1
16302: PUSH
16303: EMPTY
16304: LIST
16305: LIST
16306: PUSH
16307: EMPTY
16308: LIST
16309: LIST
16310: PPUSH
16311: CALL_OW 69
16315: ST_TO_ADDR
// if not tmp then
16316: LD_VAR 0 2
16320: NOT
16321: IFFALSE 16325
// exit ;
16323: GO 16412
// un := tmp [ rand ( 1 , tmp ) ] ;
16325: LD_ADDR_VAR 0 1
16329: PUSH
16330: LD_VAR 0 2
16334: PUSH
16335: LD_INT 1
16337: PPUSH
16338: LD_VAR 0 2
16342: PPUSH
16343: CALL_OW 12
16347: ARRAY
16348: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16349: LD_VAR 0 1
16353: PPUSH
16354: LD_INT 0
16356: PPUSH
16357: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16361: LD_VAR 0 1
16365: PPUSH
16366: LD_OWVAR 3
16370: PUSH
16371: LD_VAR 0 1
16375: DIFF
16376: PPUSH
16377: LD_VAR 0 1
16381: PPUSH
16382: CALL_OW 74
16386: PPUSH
16387: CALL_OW 115
// wait ( 0 0$20 ) ;
16391: LD_INT 700
16393: PPUSH
16394: CALL_OW 67
// SetSide ( un , your_side ) ;
16398: LD_VAR 0 1
16402: PPUSH
16403: LD_OWVAR 2
16407: PPUSH
16408: CALL_OW 235
// end ;
16412: PPOPN 2
16414: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16415: LD_EXP 29
16419: PUSH
16420: LD_EXP 62
16424: AND
16425: IFFALSE 16531
16427: GO 16429
16429: DISABLE
16430: LD_INT 0
16432: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16433: LD_ADDR_VAR 0 1
16437: PUSH
16438: LD_INT 22
16440: PUSH
16441: LD_OWVAR 2
16445: PUSH
16446: EMPTY
16447: LIST
16448: LIST
16449: PUSH
16450: LD_INT 2
16452: PUSH
16453: LD_INT 30
16455: PUSH
16456: LD_INT 0
16458: PUSH
16459: EMPTY
16460: LIST
16461: LIST
16462: PUSH
16463: LD_INT 30
16465: PUSH
16466: LD_INT 1
16468: PUSH
16469: EMPTY
16470: LIST
16471: LIST
16472: PUSH
16473: EMPTY
16474: LIST
16475: LIST
16476: LIST
16477: PUSH
16478: EMPTY
16479: LIST
16480: LIST
16481: PPUSH
16482: CALL_OW 69
16486: ST_TO_ADDR
// if not depot then
16487: LD_VAR 0 1
16491: NOT
16492: IFFALSE 16496
// exit ;
16494: GO 16531
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16496: LD_VAR 0 1
16500: PUSH
16501: LD_INT 1
16503: ARRAY
16504: PPUSH
16505: CALL_OW 250
16509: PPUSH
16510: LD_VAR 0 1
16514: PUSH
16515: LD_INT 1
16517: ARRAY
16518: PPUSH
16519: CALL_OW 251
16523: PPUSH
16524: LD_INT 70
16526: PPUSH
16527: CALL_OW 495
// end ;
16531: PPOPN 1
16533: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16534: LD_EXP 29
16538: PUSH
16539: LD_EXP 63
16543: AND
16544: IFFALSE 16755
16546: GO 16548
16548: DISABLE
16549: LD_INT 0
16551: PPUSH
16552: PPUSH
16553: PPUSH
16554: PPUSH
16555: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16556: LD_ADDR_VAR 0 5
16560: PUSH
16561: LD_INT 22
16563: PUSH
16564: LD_OWVAR 2
16568: PUSH
16569: EMPTY
16570: LIST
16571: LIST
16572: PUSH
16573: LD_INT 21
16575: PUSH
16576: LD_INT 1
16578: PUSH
16579: EMPTY
16580: LIST
16581: LIST
16582: PUSH
16583: EMPTY
16584: LIST
16585: LIST
16586: PPUSH
16587: CALL_OW 69
16591: ST_TO_ADDR
// if not tmp then
16592: LD_VAR 0 5
16596: NOT
16597: IFFALSE 16601
// exit ;
16599: GO 16755
// for i in tmp do
16601: LD_ADDR_VAR 0 1
16605: PUSH
16606: LD_VAR 0 5
16610: PUSH
16611: FOR_IN
16612: IFFALSE 16753
// begin d := rand ( 0 , 5 ) ;
16614: LD_ADDR_VAR 0 4
16618: PUSH
16619: LD_INT 0
16621: PPUSH
16622: LD_INT 5
16624: PPUSH
16625: CALL_OW 12
16629: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16630: LD_ADDR_VAR 0 2
16634: PUSH
16635: LD_VAR 0 1
16639: PPUSH
16640: CALL_OW 250
16644: PPUSH
16645: LD_VAR 0 4
16649: PPUSH
16650: LD_INT 3
16652: PPUSH
16653: LD_INT 12
16655: PPUSH
16656: CALL_OW 12
16660: PPUSH
16661: CALL_OW 272
16665: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16666: LD_ADDR_VAR 0 3
16670: PUSH
16671: LD_VAR 0 1
16675: PPUSH
16676: CALL_OW 251
16680: PPUSH
16681: LD_VAR 0 4
16685: PPUSH
16686: LD_INT 3
16688: PPUSH
16689: LD_INT 12
16691: PPUSH
16692: CALL_OW 12
16696: PPUSH
16697: CALL_OW 273
16701: ST_TO_ADDR
// if ValidHex ( x , y ) then
16702: LD_VAR 0 2
16706: PPUSH
16707: LD_VAR 0 3
16711: PPUSH
16712: CALL_OW 488
16716: IFFALSE 16751
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16718: LD_VAR 0 1
16722: PPUSH
16723: LD_VAR 0 2
16727: PPUSH
16728: LD_VAR 0 3
16732: PPUSH
16733: LD_INT 3
16735: PPUSH
16736: LD_INT 6
16738: PPUSH
16739: CALL_OW 12
16743: PPUSH
16744: LD_INT 1
16746: PPUSH
16747: CALL_OW 483
// end ;
16751: GO 16611
16753: POP
16754: POP
// end ;
16755: PPOPN 5
16757: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16758: LD_EXP 29
16762: PUSH
16763: LD_EXP 64
16767: AND
16768: IFFALSE 16862
16770: GO 16772
16772: DISABLE
16773: LD_INT 0
16775: PPUSH
16776: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16777: LD_ADDR_VAR 0 2
16781: PUSH
16782: LD_INT 22
16784: PUSH
16785: LD_OWVAR 2
16789: PUSH
16790: EMPTY
16791: LIST
16792: LIST
16793: PUSH
16794: LD_INT 32
16796: PUSH
16797: LD_INT 1
16799: PUSH
16800: EMPTY
16801: LIST
16802: LIST
16803: PUSH
16804: LD_INT 21
16806: PUSH
16807: LD_INT 2
16809: PUSH
16810: EMPTY
16811: LIST
16812: LIST
16813: PUSH
16814: EMPTY
16815: LIST
16816: LIST
16817: LIST
16818: PPUSH
16819: CALL_OW 69
16823: ST_TO_ADDR
// if not tmp then
16824: LD_VAR 0 2
16828: NOT
16829: IFFALSE 16833
// exit ;
16831: GO 16862
// for i in tmp do
16833: LD_ADDR_VAR 0 1
16837: PUSH
16838: LD_VAR 0 2
16842: PUSH
16843: FOR_IN
16844: IFFALSE 16860
// SetFuel ( i , 0 ) ;
16846: LD_VAR 0 1
16850: PPUSH
16851: LD_INT 0
16853: PPUSH
16854: CALL_OW 240
16858: GO 16843
16860: POP
16861: POP
// end ;
16862: PPOPN 2
16864: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16865: LD_EXP 29
16869: PUSH
16870: LD_EXP 65
16874: AND
16875: IFFALSE 16941
16877: GO 16879
16879: DISABLE
16880: LD_INT 0
16882: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16883: LD_ADDR_VAR 0 1
16887: PUSH
16888: LD_INT 22
16890: PUSH
16891: LD_OWVAR 2
16895: PUSH
16896: EMPTY
16897: LIST
16898: LIST
16899: PUSH
16900: LD_INT 30
16902: PUSH
16903: LD_INT 29
16905: PUSH
16906: EMPTY
16907: LIST
16908: LIST
16909: PUSH
16910: EMPTY
16911: LIST
16912: LIST
16913: PPUSH
16914: CALL_OW 69
16918: ST_TO_ADDR
// if not tmp then
16919: LD_VAR 0 1
16923: NOT
16924: IFFALSE 16928
// exit ;
16926: GO 16941
// DestroyUnit ( tmp [ 1 ] ) ;
16928: LD_VAR 0 1
16932: PUSH
16933: LD_INT 1
16935: ARRAY
16936: PPUSH
16937: CALL_OW 65
// end ;
16941: PPOPN 1
16943: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16944: LD_EXP 29
16948: PUSH
16949: LD_EXP 67
16953: AND
16954: IFFALSE 17083
16956: GO 16958
16958: DISABLE
16959: LD_INT 0
16961: PPUSH
// begin uc_side := 0 ;
16962: LD_ADDR_OWVAR 20
16966: PUSH
16967: LD_INT 0
16969: ST_TO_ADDR
// uc_nation := nation_arabian ;
16970: LD_ADDR_OWVAR 21
16974: PUSH
16975: LD_INT 2
16977: ST_TO_ADDR
// hc_gallery :=  ;
16978: LD_ADDR_OWVAR 33
16982: PUSH
16983: LD_STRING 
16985: ST_TO_ADDR
// hc_name :=  ;
16986: LD_ADDR_OWVAR 26
16990: PUSH
16991: LD_STRING 
16993: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
16994: LD_INT 1
16996: PPUSH
16997: LD_INT 11
16999: PPUSH
17000: LD_INT 10
17002: PPUSH
17003: CALL_OW 380
// un := CreateHuman ;
17007: LD_ADDR_VAR 0 1
17011: PUSH
17012: CALL_OW 44
17016: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17017: LD_VAR 0 1
17021: PPUSH
17022: LD_INT 1
17024: PPUSH
17025: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17029: LD_INT 35
17031: PPUSH
17032: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17036: LD_VAR 0 1
17040: PPUSH
17041: LD_INT 22
17043: PUSH
17044: LD_OWVAR 2
17048: PUSH
17049: EMPTY
17050: LIST
17051: LIST
17052: PPUSH
17053: CALL_OW 69
17057: PPUSH
17058: LD_VAR 0 1
17062: PPUSH
17063: CALL_OW 74
17067: PPUSH
17068: CALL_OW 115
// until IsDead ( un ) ;
17072: LD_VAR 0 1
17076: PPUSH
17077: CALL_OW 301
17081: IFFALSE 17029
// end ;
17083: PPOPN 1
17085: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17086: LD_EXP 29
17090: PUSH
17091: LD_EXP 69
17095: AND
17096: IFFALSE 17108
17098: GO 17100
17100: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17101: LD_STRING earthquake(getX(game), 0, 32)
17103: PPUSH
17104: CALL_OW 559
17108: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17109: LD_EXP 29
17113: PUSH
17114: LD_EXP 70
17118: AND
17119: IFFALSE 17210
17121: GO 17123
17123: DISABLE
17124: LD_INT 0
17126: PPUSH
// begin enable ;
17127: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17128: LD_ADDR_VAR 0 1
17132: PUSH
17133: LD_INT 22
17135: PUSH
17136: LD_OWVAR 2
17140: PUSH
17141: EMPTY
17142: LIST
17143: LIST
17144: PUSH
17145: LD_INT 21
17147: PUSH
17148: LD_INT 2
17150: PUSH
17151: EMPTY
17152: LIST
17153: LIST
17154: PUSH
17155: LD_INT 33
17157: PUSH
17158: LD_INT 3
17160: PUSH
17161: EMPTY
17162: LIST
17163: LIST
17164: PUSH
17165: EMPTY
17166: LIST
17167: LIST
17168: LIST
17169: PPUSH
17170: CALL_OW 69
17174: ST_TO_ADDR
// if not tmp then
17175: LD_VAR 0 1
17179: NOT
17180: IFFALSE 17184
// exit ;
17182: GO 17210
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17184: LD_VAR 0 1
17188: PUSH
17189: LD_INT 1
17191: PPUSH
17192: LD_VAR 0 1
17196: PPUSH
17197: CALL_OW 12
17201: ARRAY
17202: PPUSH
17203: LD_INT 1
17205: PPUSH
17206: CALL_OW 234
// end ;
17210: PPOPN 1
17212: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17213: LD_EXP 29
17217: PUSH
17218: LD_EXP 71
17222: AND
17223: IFFALSE 17364
17225: GO 17227
17227: DISABLE
17228: LD_INT 0
17230: PPUSH
17231: PPUSH
17232: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17233: LD_ADDR_VAR 0 3
17237: PUSH
17238: LD_INT 22
17240: PUSH
17241: LD_OWVAR 2
17245: PUSH
17246: EMPTY
17247: LIST
17248: LIST
17249: PUSH
17250: LD_INT 25
17252: PUSH
17253: LD_INT 1
17255: PUSH
17256: EMPTY
17257: LIST
17258: LIST
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: PPUSH
17264: CALL_OW 69
17268: ST_TO_ADDR
// if not tmp then
17269: LD_VAR 0 3
17273: NOT
17274: IFFALSE 17278
// exit ;
17276: GO 17364
// un := tmp [ rand ( 1 , tmp ) ] ;
17278: LD_ADDR_VAR 0 2
17282: PUSH
17283: LD_VAR 0 3
17287: PUSH
17288: LD_INT 1
17290: PPUSH
17291: LD_VAR 0 3
17295: PPUSH
17296: CALL_OW 12
17300: ARRAY
17301: ST_TO_ADDR
// if Crawls ( un ) then
17302: LD_VAR 0 2
17306: PPUSH
17307: CALL_OW 318
17311: IFFALSE 17322
// ComWalk ( un ) ;
17313: LD_VAR 0 2
17317: PPUSH
17318: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17322: LD_VAR 0 2
17326: PPUSH
17327: LD_INT 9
17329: PPUSH
17330: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17334: LD_INT 28
17336: PPUSH
17337: LD_OWVAR 2
17341: PPUSH
17342: LD_INT 2
17344: PPUSH
17345: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17349: LD_INT 29
17351: PPUSH
17352: LD_OWVAR 2
17356: PPUSH
17357: LD_INT 2
17359: PPUSH
17360: CALL_OW 322
// end ;
17364: PPOPN 3
17366: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17367: LD_EXP 29
17371: PUSH
17372: LD_EXP 72
17376: AND
17377: IFFALSE 17488
17379: GO 17381
17381: DISABLE
17382: LD_INT 0
17384: PPUSH
17385: PPUSH
17386: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17387: LD_ADDR_VAR 0 3
17391: PUSH
17392: LD_INT 22
17394: PUSH
17395: LD_OWVAR 2
17399: PUSH
17400: EMPTY
17401: LIST
17402: LIST
17403: PUSH
17404: LD_INT 25
17406: PUSH
17407: LD_INT 1
17409: PUSH
17410: EMPTY
17411: LIST
17412: LIST
17413: PUSH
17414: EMPTY
17415: LIST
17416: LIST
17417: PPUSH
17418: CALL_OW 69
17422: ST_TO_ADDR
// if not tmp then
17423: LD_VAR 0 3
17427: NOT
17428: IFFALSE 17432
// exit ;
17430: GO 17488
// un := tmp [ rand ( 1 , tmp ) ] ;
17432: LD_ADDR_VAR 0 2
17436: PUSH
17437: LD_VAR 0 3
17441: PUSH
17442: LD_INT 1
17444: PPUSH
17445: LD_VAR 0 3
17449: PPUSH
17450: CALL_OW 12
17454: ARRAY
17455: ST_TO_ADDR
// if Crawls ( un ) then
17456: LD_VAR 0 2
17460: PPUSH
17461: CALL_OW 318
17465: IFFALSE 17476
// ComWalk ( un ) ;
17467: LD_VAR 0 2
17471: PPUSH
17472: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17476: LD_VAR 0 2
17480: PPUSH
17481: LD_INT 8
17483: PPUSH
17484: CALL_OW 336
// end ;
17488: PPOPN 3
17490: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17491: LD_EXP 29
17495: PUSH
17496: LD_EXP 73
17500: AND
17501: IFFALSE 17645
17503: GO 17505
17505: DISABLE
17506: LD_INT 0
17508: PPUSH
17509: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17510: LD_ADDR_VAR 0 2
17514: PUSH
17515: LD_INT 22
17517: PUSH
17518: LD_OWVAR 2
17522: PUSH
17523: EMPTY
17524: LIST
17525: LIST
17526: PUSH
17527: LD_INT 21
17529: PUSH
17530: LD_INT 2
17532: PUSH
17533: EMPTY
17534: LIST
17535: LIST
17536: PUSH
17537: LD_INT 2
17539: PUSH
17540: LD_INT 34
17542: PUSH
17543: LD_INT 12
17545: PUSH
17546: EMPTY
17547: LIST
17548: LIST
17549: PUSH
17550: LD_INT 34
17552: PUSH
17553: LD_INT 51
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: PUSH
17560: LD_INT 34
17562: PUSH
17563: LD_INT 32
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: LIST
17574: LIST
17575: PUSH
17576: EMPTY
17577: LIST
17578: LIST
17579: LIST
17580: PPUSH
17581: CALL_OW 69
17585: ST_TO_ADDR
// if not tmp then
17586: LD_VAR 0 2
17590: NOT
17591: IFFALSE 17595
// exit ;
17593: GO 17645
// for i in tmp do
17595: LD_ADDR_VAR 0 1
17599: PUSH
17600: LD_VAR 0 2
17604: PUSH
17605: FOR_IN
17606: IFFALSE 17643
// if GetCargo ( i , mat_artifact ) = 0 then
17608: LD_VAR 0 1
17612: PPUSH
17613: LD_INT 4
17615: PPUSH
17616: CALL_OW 289
17620: PUSH
17621: LD_INT 0
17623: EQUAL
17624: IFFALSE 17641
// SetCargo ( i , mat_siberit , 100 ) ;
17626: LD_VAR 0 1
17630: PPUSH
17631: LD_INT 3
17633: PPUSH
17634: LD_INT 100
17636: PPUSH
17637: CALL_OW 290
17641: GO 17605
17643: POP
17644: POP
// end ;
17645: PPOPN 2
17647: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17648: LD_EXP 29
17652: PUSH
17653: LD_EXP 74
17657: AND
17658: IFFALSE 17841
17660: GO 17662
17662: DISABLE
17663: LD_INT 0
17665: PPUSH
17666: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17667: LD_ADDR_VAR 0 2
17671: PUSH
17672: LD_INT 22
17674: PUSH
17675: LD_OWVAR 2
17679: PUSH
17680: EMPTY
17681: LIST
17682: LIST
17683: PPUSH
17684: CALL_OW 69
17688: ST_TO_ADDR
// if not tmp then
17689: LD_VAR 0 2
17693: NOT
17694: IFFALSE 17698
// exit ;
17696: GO 17841
// for i := 1 to 2 do
17698: LD_ADDR_VAR 0 1
17702: PUSH
17703: DOUBLE
17704: LD_INT 1
17706: DEC
17707: ST_TO_ADDR
17708: LD_INT 2
17710: PUSH
17711: FOR_TO
17712: IFFALSE 17839
// begin uc_side := your_side ;
17714: LD_ADDR_OWVAR 20
17718: PUSH
17719: LD_OWVAR 2
17723: ST_TO_ADDR
// uc_nation := nation_american ;
17724: LD_ADDR_OWVAR 21
17728: PUSH
17729: LD_INT 1
17731: ST_TO_ADDR
// vc_chassis := us_morphling ;
17732: LD_ADDR_OWVAR 37
17736: PUSH
17737: LD_INT 5
17739: ST_TO_ADDR
// vc_engine := engine_siberite ;
17740: LD_ADDR_OWVAR 39
17744: PUSH
17745: LD_INT 3
17747: ST_TO_ADDR
// vc_control := control_computer ;
17748: LD_ADDR_OWVAR 38
17752: PUSH
17753: LD_INT 3
17755: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17756: LD_ADDR_OWVAR 40
17760: PUSH
17761: LD_INT 10
17763: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17764: LD_VAR 0 2
17768: PUSH
17769: LD_INT 1
17771: ARRAY
17772: PPUSH
17773: CALL_OW 310
17777: NOT
17778: IFFALSE 17825
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17780: CALL_OW 45
17784: PPUSH
17785: LD_VAR 0 2
17789: PUSH
17790: LD_INT 1
17792: ARRAY
17793: PPUSH
17794: CALL_OW 250
17798: PPUSH
17799: LD_VAR 0 2
17803: PUSH
17804: LD_INT 1
17806: ARRAY
17807: PPUSH
17808: CALL_OW 251
17812: PPUSH
17813: LD_INT 12
17815: PPUSH
17816: LD_INT 1
17818: PPUSH
17819: CALL_OW 50
17823: GO 17837
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17825: CALL_OW 45
17829: PPUSH
17830: LD_INT 1
17832: PPUSH
17833: CALL_OW 51
// end ;
17837: GO 17711
17839: POP
17840: POP
// end ;
17841: PPOPN 2
17843: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17844: LD_EXP 29
17848: PUSH
17849: LD_EXP 75
17853: AND
17854: IFFALSE 18076
17856: GO 17858
17858: DISABLE
17859: LD_INT 0
17861: PPUSH
17862: PPUSH
17863: PPUSH
17864: PPUSH
17865: PPUSH
17866: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17867: LD_ADDR_VAR 0 6
17871: PUSH
17872: LD_INT 22
17874: PUSH
17875: LD_OWVAR 2
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: PUSH
17884: LD_INT 21
17886: PUSH
17887: LD_INT 1
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: PUSH
17894: LD_INT 3
17896: PUSH
17897: LD_INT 23
17899: PUSH
17900: LD_INT 0
17902: PUSH
17903: EMPTY
17904: LIST
17905: LIST
17906: PUSH
17907: EMPTY
17908: LIST
17909: LIST
17910: PUSH
17911: EMPTY
17912: LIST
17913: LIST
17914: LIST
17915: PPUSH
17916: CALL_OW 69
17920: ST_TO_ADDR
// if not tmp then
17921: LD_VAR 0 6
17925: NOT
17926: IFFALSE 17930
// exit ;
17928: GO 18076
// s1 := rand ( 1 , 4 ) ;
17930: LD_ADDR_VAR 0 2
17934: PUSH
17935: LD_INT 1
17937: PPUSH
17938: LD_INT 4
17940: PPUSH
17941: CALL_OW 12
17945: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17946: LD_ADDR_VAR 0 4
17950: PUSH
17951: LD_VAR 0 6
17955: PUSH
17956: LD_INT 1
17958: ARRAY
17959: PPUSH
17960: LD_VAR 0 2
17964: PPUSH
17965: CALL_OW 259
17969: ST_TO_ADDR
// if s1 = 1 then
17970: LD_VAR 0 2
17974: PUSH
17975: LD_INT 1
17977: EQUAL
17978: IFFALSE 17998
// s2 := rand ( 2 , 4 ) else
17980: LD_ADDR_VAR 0 3
17984: PUSH
17985: LD_INT 2
17987: PPUSH
17988: LD_INT 4
17990: PPUSH
17991: CALL_OW 12
17995: ST_TO_ADDR
17996: GO 18006
// s2 := 1 ;
17998: LD_ADDR_VAR 0 3
18002: PUSH
18003: LD_INT 1
18005: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18006: LD_ADDR_VAR 0 5
18010: PUSH
18011: LD_VAR 0 6
18015: PUSH
18016: LD_INT 1
18018: ARRAY
18019: PPUSH
18020: LD_VAR 0 3
18024: PPUSH
18025: CALL_OW 259
18029: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18030: LD_VAR 0 6
18034: PUSH
18035: LD_INT 1
18037: ARRAY
18038: PPUSH
18039: LD_VAR 0 2
18043: PPUSH
18044: LD_VAR 0 5
18048: PPUSH
18049: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18053: LD_VAR 0 6
18057: PUSH
18058: LD_INT 1
18060: ARRAY
18061: PPUSH
18062: LD_VAR 0 3
18066: PPUSH
18067: LD_VAR 0 4
18071: PPUSH
18072: CALL_OW 237
// end ;
18076: PPOPN 6
18078: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18079: LD_EXP 29
18083: PUSH
18084: LD_EXP 76
18088: AND
18089: IFFALSE 18168
18091: GO 18093
18093: DISABLE
18094: LD_INT 0
18096: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18097: LD_ADDR_VAR 0 1
18101: PUSH
18102: LD_INT 22
18104: PUSH
18105: LD_OWVAR 2
18109: PUSH
18110: EMPTY
18111: LIST
18112: LIST
18113: PUSH
18114: LD_INT 30
18116: PUSH
18117: LD_INT 3
18119: PUSH
18120: EMPTY
18121: LIST
18122: LIST
18123: PUSH
18124: EMPTY
18125: LIST
18126: LIST
18127: PPUSH
18128: CALL_OW 69
18132: ST_TO_ADDR
// if not tmp then
18133: LD_VAR 0 1
18137: NOT
18138: IFFALSE 18142
// exit ;
18140: GO 18168
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18142: LD_VAR 0 1
18146: PUSH
18147: LD_INT 1
18149: PPUSH
18150: LD_VAR 0 1
18154: PPUSH
18155: CALL_OW 12
18159: ARRAY
18160: PPUSH
18161: LD_INT 1
18163: PPUSH
18164: CALL_OW 234
// end ;
18168: PPOPN 1
18170: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18171: LD_EXP 29
18175: PUSH
18176: LD_EXP 77
18180: AND
18181: IFFALSE 18293
18183: GO 18185
18185: DISABLE
18186: LD_INT 0
18188: PPUSH
18189: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18190: LD_ADDR_VAR 0 2
18194: PUSH
18195: LD_INT 22
18197: PUSH
18198: LD_OWVAR 2
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: PUSH
18207: LD_INT 2
18209: PUSH
18210: LD_INT 30
18212: PUSH
18213: LD_INT 27
18215: PUSH
18216: EMPTY
18217: LIST
18218: LIST
18219: PUSH
18220: LD_INT 30
18222: PUSH
18223: LD_INT 26
18225: PUSH
18226: EMPTY
18227: LIST
18228: LIST
18229: PUSH
18230: LD_INT 30
18232: PUSH
18233: LD_INT 28
18235: PUSH
18236: EMPTY
18237: LIST
18238: LIST
18239: PUSH
18240: EMPTY
18241: LIST
18242: LIST
18243: LIST
18244: LIST
18245: PUSH
18246: EMPTY
18247: LIST
18248: LIST
18249: PPUSH
18250: CALL_OW 69
18254: ST_TO_ADDR
// if not tmp then
18255: LD_VAR 0 2
18259: NOT
18260: IFFALSE 18264
// exit ;
18262: GO 18293
// for i in tmp do
18264: LD_ADDR_VAR 0 1
18268: PUSH
18269: LD_VAR 0 2
18273: PUSH
18274: FOR_IN
18275: IFFALSE 18291
// SetLives ( i , 1 ) ;
18277: LD_VAR 0 1
18281: PPUSH
18282: LD_INT 1
18284: PPUSH
18285: CALL_OW 234
18289: GO 18274
18291: POP
18292: POP
// end ;
18293: PPOPN 2
18295: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18296: LD_EXP 29
18300: PUSH
18301: LD_EXP 78
18305: AND
18306: IFFALSE 18593
18308: GO 18310
18310: DISABLE
18311: LD_INT 0
18313: PPUSH
18314: PPUSH
18315: PPUSH
// begin i := rand ( 1 , 7 ) ;
18316: LD_ADDR_VAR 0 1
18320: PUSH
18321: LD_INT 1
18323: PPUSH
18324: LD_INT 7
18326: PPUSH
18327: CALL_OW 12
18331: ST_TO_ADDR
// case i of 1 :
18332: LD_VAR 0 1
18336: PUSH
18337: LD_INT 1
18339: DOUBLE
18340: EQUAL
18341: IFTRUE 18345
18343: GO 18355
18345: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18346: LD_STRING earthquake(getX(game), 0, 32)
18348: PPUSH
18349: CALL_OW 559
18353: GO 18593
18355: LD_INT 2
18357: DOUBLE
18358: EQUAL
18359: IFTRUE 18363
18361: GO 18377
18363: POP
// begin ToLua ( displayStucuk(); ) ;
18364: LD_STRING displayStucuk();
18366: PPUSH
18367: CALL_OW 559
// ResetFog ;
18371: CALL_OW 335
// end ; 3 :
18375: GO 18593
18377: LD_INT 3
18379: DOUBLE
18380: EQUAL
18381: IFTRUE 18385
18383: GO 18489
18385: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18386: LD_ADDR_VAR 0 2
18390: PUSH
18391: LD_INT 22
18393: PUSH
18394: LD_OWVAR 2
18398: PUSH
18399: EMPTY
18400: LIST
18401: LIST
18402: PUSH
18403: LD_INT 25
18405: PUSH
18406: LD_INT 1
18408: PUSH
18409: EMPTY
18410: LIST
18411: LIST
18412: PUSH
18413: EMPTY
18414: LIST
18415: LIST
18416: PPUSH
18417: CALL_OW 69
18421: ST_TO_ADDR
// if not tmp then
18422: LD_VAR 0 2
18426: NOT
18427: IFFALSE 18431
// exit ;
18429: GO 18593
// un := tmp [ rand ( 1 , tmp ) ] ;
18431: LD_ADDR_VAR 0 3
18435: PUSH
18436: LD_VAR 0 2
18440: PUSH
18441: LD_INT 1
18443: PPUSH
18444: LD_VAR 0 2
18448: PPUSH
18449: CALL_OW 12
18453: ARRAY
18454: ST_TO_ADDR
// if Crawls ( un ) then
18455: LD_VAR 0 3
18459: PPUSH
18460: CALL_OW 318
18464: IFFALSE 18475
// ComWalk ( un ) ;
18466: LD_VAR 0 3
18470: PPUSH
18471: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18475: LD_VAR 0 3
18479: PPUSH
18480: LD_INT 8
18482: PPUSH
18483: CALL_OW 336
// end ; 4 :
18487: GO 18593
18489: LD_INT 4
18491: DOUBLE
18492: EQUAL
18493: IFTRUE 18497
18495: GO 18571
18497: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18498: LD_ADDR_VAR 0 2
18502: PUSH
18503: LD_INT 22
18505: PUSH
18506: LD_OWVAR 2
18510: PUSH
18511: EMPTY
18512: LIST
18513: LIST
18514: PUSH
18515: LD_INT 30
18517: PUSH
18518: LD_INT 29
18520: PUSH
18521: EMPTY
18522: LIST
18523: LIST
18524: PUSH
18525: EMPTY
18526: LIST
18527: LIST
18528: PPUSH
18529: CALL_OW 69
18533: ST_TO_ADDR
// if not tmp then
18534: LD_VAR 0 2
18538: NOT
18539: IFFALSE 18543
// exit ;
18541: GO 18593
// CenterNowOnUnits ( tmp [ 1 ] ) ;
18543: LD_VAR 0 2
18547: PUSH
18548: LD_INT 1
18550: ARRAY
18551: PPUSH
18552: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
18556: LD_VAR 0 2
18560: PUSH
18561: LD_INT 1
18563: ARRAY
18564: PPUSH
18565: CALL_OW 65
// end ; 5 .. 7 :
18569: GO 18593
18571: LD_INT 5
18573: DOUBLE
18574: GREATEREQUAL
18575: IFFALSE 18583
18577: LD_INT 7
18579: DOUBLE
18580: LESSEQUAL
18581: IFTRUE 18585
18583: GO 18592
18585: POP
// StreamSibBomb ; end ;
18586: CALL 14830 0 0
18590: GO 18593
18592: POP
// end ;
18593: PPOPN 3
18595: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18596: LD_EXP 29
18600: PUSH
18601: LD_EXP 79
18605: AND
18606: IFFALSE 18762
18608: GO 18610
18610: DISABLE
18611: LD_INT 0
18613: PPUSH
18614: PPUSH
18615: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18616: LD_ADDR_VAR 0 2
18620: PUSH
18621: LD_INT 81
18623: PUSH
18624: LD_OWVAR 2
18628: PUSH
18629: EMPTY
18630: LIST
18631: LIST
18632: PUSH
18633: LD_INT 2
18635: PUSH
18636: LD_INT 21
18638: PUSH
18639: LD_INT 1
18641: PUSH
18642: EMPTY
18643: LIST
18644: LIST
18645: PUSH
18646: LD_INT 21
18648: PUSH
18649: LD_INT 2
18651: PUSH
18652: EMPTY
18653: LIST
18654: LIST
18655: PUSH
18656: EMPTY
18657: LIST
18658: LIST
18659: LIST
18660: PUSH
18661: EMPTY
18662: LIST
18663: LIST
18664: PPUSH
18665: CALL_OW 69
18669: ST_TO_ADDR
// if not tmp then
18670: LD_VAR 0 2
18674: NOT
18675: IFFALSE 18679
// exit ;
18677: GO 18762
// p := 0 ;
18679: LD_ADDR_VAR 0 3
18683: PUSH
18684: LD_INT 0
18686: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18687: LD_INT 35
18689: PPUSH
18690: CALL_OW 67
// p := p + 1 ;
18694: LD_ADDR_VAR 0 3
18698: PUSH
18699: LD_VAR 0 3
18703: PUSH
18704: LD_INT 1
18706: PLUS
18707: ST_TO_ADDR
// for i in tmp do
18708: LD_ADDR_VAR 0 1
18712: PUSH
18713: LD_VAR 0 2
18717: PUSH
18718: FOR_IN
18719: IFFALSE 18750
// if GetLives ( i ) < 1000 then
18721: LD_VAR 0 1
18725: PPUSH
18726: CALL_OW 256
18730: PUSH
18731: LD_INT 1000
18733: LESS
18734: IFFALSE 18748
// SetLives ( i , 1000 ) ;
18736: LD_VAR 0 1
18740: PPUSH
18741: LD_INT 1000
18743: PPUSH
18744: CALL_OW 234
18748: GO 18718
18750: POP
18751: POP
// until p > 20 ;
18752: LD_VAR 0 3
18756: PUSH
18757: LD_INT 20
18759: GREATER
18760: IFFALSE 18687
// end ;
18762: PPOPN 3
18764: END
// every 0 0$1 trigger StreamModeActive and sTime do
18765: LD_EXP 29
18769: PUSH
18770: LD_EXP 80
18774: AND
18775: IFFALSE 18810
18777: GO 18779
18779: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18780: LD_INT 28
18782: PPUSH
18783: LD_OWVAR 2
18787: PPUSH
18788: LD_INT 2
18790: PPUSH
18791: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18795: LD_INT 30
18797: PPUSH
18798: LD_OWVAR 2
18802: PPUSH
18803: LD_INT 2
18805: PPUSH
18806: CALL_OW 322
// end ;
18810: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18811: LD_EXP 29
18815: PUSH
18816: LD_EXP 81
18820: AND
18821: IFFALSE 18942
18823: GO 18825
18825: DISABLE
18826: LD_INT 0
18828: PPUSH
18829: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18830: LD_ADDR_VAR 0 2
18834: PUSH
18835: LD_INT 22
18837: PUSH
18838: LD_OWVAR 2
18842: PUSH
18843: EMPTY
18844: LIST
18845: LIST
18846: PUSH
18847: LD_INT 21
18849: PUSH
18850: LD_INT 1
18852: PUSH
18853: EMPTY
18854: LIST
18855: LIST
18856: PUSH
18857: LD_INT 3
18859: PUSH
18860: LD_INT 23
18862: PUSH
18863: LD_INT 0
18865: PUSH
18866: EMPTY
18867: LIST
18868: LIST
18869: PUSH
18870: EMPTY
18871: LIST
18872: LIST
18873: PUSH
18874: EMPTY
18875: LIST
18876: LIST
18877: LIST
18878: PPUSH
18879: CALL_OW 69
18883: ST_TO_ADDR
// if not tmp then
18884: LD_VAR 0 2
18888: NOT
18889: IFFALSE 18893
// exit ;
18891: GO 18942
// for i in tmp do
18893: LD_ADDR_VAR 0 1
18897: PUSH
18898: LD_VAR 0 2
18902: PUSH
18903: FOR_IN
18904: IFFALSE 18940
// begin if Crawls ( i ) then
18906: LD_VAR 0 1
18910: PPUSH
18911: CALL_OW 318
18915: IFFALSE 18926
// ComWalk ( i ) ;
18917: LD_VAR 0 1
18921: PPUSH
18922: CALL_OW 138
// SetClass ( i , 2 ) ;
18926: LD_VAR 0 1
18930: PPUSH
18931: LD_INT 2
18933: PPUSH
18934: CALL_OW 336
// end ;
18938: GO 18903
18940: POP
18941: POP
// end ;
18942: PPOPN 2
18944: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18945: LD_EXP 29
18949: PUSH
18950: LD_EXP 82
18954: AND
18955: IFFALSE 19243
18957: GO 18959
18959: DISABLE
18960: LD_INT 0
18962: PPUSH
18963: PPUSH
18964: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
18965: LD_OWVAR 2
18969: PPUSH
18970: LD_INT 9
18972: PPUSH
18973: LD_INT 1
18975: PPUSH
18976: LD_INT 1
18978: PPUSH
18979: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
18983: LD_INT 9
18985: PPUSH
18986: LD_OWVAR 2
18990: PPUSH
18991: CALL_OW 343
// uc_side := 9 ;
18995: LD_ADDR_OWVAR 20
18999: PUSH
19000: LD_INT 9
19002: ST_TO_ADDR
// uc_nation := 2 ;
19003: LD_ADDR_OWVAR 21
19007: PUSH
19008: LD_INT 2
19010: ST_TO_ADDR
// hc_name := Dark Warrior ;
19011: LD_ADDR_OWVAR 26
19015: PUSH
19016: LD_STRING Dark Warrior
19018: ST_TO_ADDR
// hc_gallery :=  ;
19019: LD_ADDR_OWVAR 33
19023: PUSH
19024: LD_STRING 
19026: ST_TO_ADDR
// hc_noskilllimit := true ;
19027: LD_ADDR_OWVAR 76
19031: PUSH
19032: LD_INT 1
19034: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19035: LD_ADDR_OWVAR 31
19039: PUSH
19040: LD_INT 30
19042: PUSH
19043: LD_INT 30
19045: PUSH
19046: LD_INT 30
19048: PUSH
19049: LD_INT 30
19051: PUSH
19052: EMPTY
19053: LIST
19054: LIST
19055: LIST
19056: LIST
19057: ST_TO_ADDR
// un := CreateHuman ;
19058: LD_ADDR_VAR 0 3
19062: PUSH
19063: CALL_OW 44
19067: ST_TO_ADDR
// hc_noskilllimit := false ;
19068: LD_ADDR_OWVAR 76
19072: PUSH
19073: LD_INT 0
19075: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19076: LD_VAR 0 3
19080: PPUSH
19081: LD_INT 1
19083: PPUSH
19084: CALL_OW 51
// ToLua ( playRanger() ) ;
19088: LD_STRING playRanger()
19090: PPUSH
19091: CALL_OW 559
// p := 0 ;
19095: LD_ADDR_VAR 0 2
19099: PUSH
19100: LD_INT 0
19102: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19103: LD_INT 35
19105: PPUSH
19106: CALL_OW 67
// p := p + 1 ;
19110: LD_ADDR_VAR 0 2
19114: PUSH
19115: LD_VAR 0 2
19119: PUSH
19120: LD_INT 1
19122: PLUS
19123: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19124: LD_VAR 0 3
19128: PPUSH
19129: CALL_OW 256
19133: PUSH
19134: LD_INT 1000
19136: LESS
19137: IFFALSE 19151
// SetLives ( un , 1000 ) ;
19139: LD_VAR 0 3
19143: PPUSH
19144: LD_INT 1000
19146: PPUSH
19147: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19151: LD_VAR 0 3
19155: PPUSH
19156: LD_INT 81
19158: PUSH
19159: LD_OWVAR 2
19163: PUSH
19164: EMPTY
19165: LIST
19166: LIST
19167: PUSH
19168: LD_INT 91
19170: PUSH
19171: LD_VAR 0 3
19175: PUSH
19176: LD_INT 30
19178: PUSH
19179: EMPTY
19180: LIST
19181: LIST
19182: LIST
19183: PUSH
19184: EMPTY
19185: LIST
19186: LIST
19187: PPUSH
19188: CALL_OW 69
19192: PPUSH
19193: LD_VAR 0 3
19197: PPUSH
19198: CALL_OW 74
19202: PPUSH
19203: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
19207: LD_VAR 0 2
19211: PUSH
19212: LD_INT 80
19214: GREATER
19215: PUSH
19216: LD_VAR 0 3
19220: PPUSH
19221: CALL_OW 301
19225: OR
19226: IFFALSE 19103
// if un then
19228: LD_VAR 0 3
19232: IFFALSE 19243
// RemoveUnit ( un ) ;
19234: LD_VAR 0 3
19238: PPUSH
19239: CALL_OW 64
// end ;
19243: PPOPN 3
19245: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
19246: LD_EXP 83
19250: IFFALSE 19366
19252: GO 19254
19254: DISABLE
19255: LD_INT 0
19257: PPUSH
19258: PPUSH
19259: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19260: LD_ADDR_VAR 0 2
19264: PUSH
19265: LD_INT 81
19267: PUSH
19268: LD_OWVAR 2
19272: PUSH
19273: EMPTY
19274: LIST
19275: LIST
19276: PUSH
19277: LD_INT 21
19279: PUSH
19280: LD_INT 1
19282: PUSH
19283: EMPTY
19284: LIST
19285: LIST
19286: PUSH
19287: EMPTY
19288: LIST
19289: LIST
19290: PPUSH
19291: CALL_OW 69
19295: ST_TO_ADDR
// ToLua ( playComputer() ) ;
19296: LD_STRING playComputer()
19298: PPUSH
19299: CALL_OW 559
// if not tmp then
19303: LD_VAR 0 2
19307: NOT
19308: IFFALSE 19312
// exit ;
19310: GO 19366
// for i in tmp do
19312: LD_ADDR_VAR 0 1
19316: PUSH
19317: LD_VAR 0 2
19321: PUSH
19322: FOR_IN
19323: IFFALSE 19364
// for j := 1 to 4 do
19325: LD_ADDR_VAR 0 3
19329: PUSH
19330: DOUBLE
19331: LD_INT 1
19333: DEC
19334: ST_TO_ADDR
19335: LD_INT 4
19337: PUSH
19338: FOR_TO
19339: IFFALSE 19360
// SetSkill ( i , j , 10 ) ;
19341: LD_VAR 0 1
19345: PPUSH
19346: LD_VAR 0 3
19350: PPUSH
19351: LD_INT 10
19353: PPUSH
19354: CALL_OW 237
19358: GO 19338
19360: POP
19361: POP
19362: GO 19322
19364: POP
19365: POP
// end ;
19366: PPOPN 3
19368: END
// every 0 0$1 trigger s30 do var i , tmp ;
19369: LD_EXP 84
19373: IFFALSE 19442
19375: GO 19377
19377: DISABLE
19378: LD_INT 0
19380: PPUSH
19381: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19382: LD_ADDR_VAR 0 2
19386: PUSH
19387: LD_INT 22
19389: PUSH
19390: LD_OWVAR 2
19394: PUSH
19395: EMPTY
19396: LIST
19397: LIST
19398: PPUSH
19399: CALL_OW 69
19403: ST_TO_ADDR
// if not tmp then
19404: LD_VAR 0 2
19408: NOT
19409: IFFALSE 19413
// exit ;
19411: GO 19442
// for i in tmp do
19413: LD_ADDR_VAR 0 1
19417: PUSH
19418: LD_VAR 0 2
19422: PUSH
19423: FOR_IN
19424: IFFALSE 19440
// SetLives ( i , 300 ) ;
19426: LD_VAR 0 1
19430: PPUSH
19431: LD_INT 300
19433: PPUSH
19434: CALL_OW 234
19438: GO 19423
19440: POP
19441: POP
// end ;
19442: PPOPN 2
19444: END
// every 0 0$1 trigger s60 do var i , tmp ;
19445: LD_EXP 85
19449: IFFALSE 19518
19451: GO 19453
19453: DISABLE
19454: LD_INT 0
19456: PPUSH
19457: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19458: LD_ADDR_VAR 0 2
19462: PUSH
19463: LD_INT 22
19465: PUSH
19466: LD_OWVAR 2
19470: PUSH
19471: EMPTY
19472: LIST
19473: LIST
19474: PPUSH
19475: CALL_OW 69
19479: ST_TO_ADDR
// if not tmp then
19480: LD_VAR 0 2
19484: NOT
19485: IFFALSE 19489
// exit ;
19487: GO 19518
// for i in tmp do
19489: LD_ADDR_VAR 0 1
19493: PUSH
19494: LD_VAR 0 2
19498: PUSH
19499: FOR_IN
19500: IFFALSE 19516
// SetLives ( i , 600 ) ;
19502: LD_VAR 0 1
19506: PPUSH
19507: LD_INT 600
19509: PPUSH
19510: CALL_OW 234
19514: GO 19499
19516: POP
19517: POP
// end ;
19518: PPOPN 2
19520: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19521: LD_INT 0
19523: PPUSH
// case cmd of 301 :
19524: LD_VAR 0 1
19528: PUSH
19529: LD_INT 301
19531: DOUBLE
19532: EQUAL
19533: IFTRUE 19537
19535: GO 19569
19537: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
19538: LD_VAR 0 6
19542: PPUSH
19543: LD_VAR 0 7
19547: PPUSH
19548: LD_VAR 0 8
19552: PPUSH
19553: LD_VAR 0 4
19557: PPUSH
19558: LD_VAR 0 5
19562: PPUSH
19563: CALL 20778 0 5
19567: GO 19690
19569: LD_INT 302
19571: DOUBLE
19572: EQUAL
19573: IFTRUE 19577
19575: GO 19614
19577: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
19578: LD_VAR 0 6
19582: PPUSH
19583: LD_VAR 0 7
19587: PPUSH
19588: LD_VAR 0 8
19592: PPUSH
19593: LD_VAR 0 9
19597: PPUSH
19598: LD_VAR 0 4
19602: PPUSH
19603: LD_VAR 0 5
19607: PPUSH
19608: CALL 20869 0 6
19612: GO 19690
19614: LD_INT 303
19616: DOUBLE
19617: EQUAL
19618: IFTRUE 19622
19620: GO 19659
19622: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
19623: LD_VAR 0 6
19627: PPUSH
19628: LD_VAR 0 7
19632: PPUSH
19633: LD_VAR 0 8
19637: PPUSH
19638: LD_VAR 0 9
19642: PPUSH
19643: LD_VAR 0 4
19647: PPUSH
19648: LD_VAR 0 5
19652: PPUSH
19653: CALL 19695 0 6
19657: GO 19690
19659: LD_INT 304
19661: DOUBLE
19662: EQUAL
19663: IFTRUE 19667
19665: GO 19689
19667: POP
// hHackTeleport ( unit , x , y ) ; end ;
19668: LD_VAR 0 2
19672: PPUSH
19673: LD_VAR 0 4
19677: PPUSH
19678: LD_VAR 0 5
19682: PPUSH
19683: CALL 21462 0 3
19687: GO 19690
19689: POP
// end ;
19690: LD_VAR 0 12
19694: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
19695: LD_INT 0
19697: PPUSH
19698: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
19699: LD_VAR 0 1
19703: PUSH
19704: LD_INT 1
19706: LESS
19707: PUSH
19708: LD_VAR 0 1
19712: PUSH
19713: LD_INT 3
19715: GREATER
19716: OR
19717: PUSH
19718: LD_VAR 0 5
19722: PPUSH
19723: LD_VAR 0 6
19727: PPUSH
19728: CALL_OW 428
19732: OR
19733: IFFALSE 19737
// exit ;
19735: GO 20465
// uc_side := your_side ;
19737: LD_ADDR_OWVAR 20
19741: PUSH
19742: LD_OWVAR 2
19746: ST_TO_ADDR
// uc_nation := nation ;
19747: LD_ADDR_OWVAR 21
19751: PUSH
19752: LD_VAR 0 1
19756: ST_TO_ADDR
// bc_level = 1 ;
19757: LD_ADDR_OWVAR 43
19761: PUSH
19762: LD_INT 1
19764: ST_TO_ADDR
// case btype of 1 :
19765: LD_VAR 0 2
19769: PUSH
19770: LD_INT 1
19772: DOUBLE
19773: EQUAL
19774: IFTRUE 19778
19776: GO 19789
19778: POP
// bc_type := b_depot ; 2 :
19779: LD_ADDR_OWVAR 42
19783: PUSH
19784: LD_INT 0
19786: ST_TO_ADDR
19787: GO 20409
19789: LD_INT 2
19791: DOUBLE
19792: EQUAL
19793: IFTRUE 19797
19795: GO 19808
19797: POP
// bc_type := b_warehouse ; 3 :
19798: LD_ADDR_OWVAR 42
19802: PUSH
19803: LD_INT 1
19805: ST_TO_ADDR
19806: GO 20409
19808: LD_INT 3
19810: DOUBLE
19811: EQUAL
19812: IFTRUE 19816
19814: GO 19827
19816: POP
// bc_type := b_lab ; 4 .. 9 :
19817: LD_ADDR_OWVAR 42
19821: PUSH
19822: LD_INT 6
19824: ST_TO_ADDR
19825: GO 20409
19827: LD_INT 4
19829: DOUBLE
19830: GREATEREQUAL
19831: IFFALSE 19839
19833: LD_INT 9
19835: DOUBLE
19836: LESSEQUAL
19837: IFTRUE 19841
19839: GO 19901
19841: POP
// begin bc_type := b_lab_half ;
19842: LD_ADDR_OWVAR 42
19846: PUSH
19847: LD_INT 7
19849: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
19850: LD_ADDR_OWVAR 44
19854: PUSH
19855: LD_INT 10
19857: PUSH
19858: LD_INT 11
19860: PUSH
19861: LD_INT 12
19863: PUSH
19864: LD_INT 15
19866: PUSH
19867: LD_INT 14
19869: PUSH
19870: LD_INT 13
19872: PUSH
19873: EMPTY
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: LIST
19880: PUSH
19881: LD_VAR 0 2
19885: PUSH
19886: LD_INT 3
19888: MINUS
19889: ARRAY
19890: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
19891: LD_ADDR_OWVAR 45
19895: PUSH
19896: LD_INT 9
19898: ST_TO_ADDR
// end ; 10 .. 13 :
19899: GO 20409
19901: LD_INT 10
19903: DOUBLE
19904: GREATEREQUAL
19905: IFFALSE 19913
19907: LD_INT 13
19909: DOUBLE
19910: LESSEQUAL
19911: IFTRUE 19915
19913: GO 19992
19915: POP
// begin bc_type := b_lab_full ;
19916: LD_ADDR_OWVAR 42
19920: PUSH
19921: LD_INT 8
19923: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
19924: LD_ADDR_OWVAR 44
19928: PUSH
19929: LD_INT 10
19931: PUSH
19932: LD_INT 12
19934: PUSH
19935: LD_INT 14
19937: PUSH
19938: LD_INT 13
19940: PUSH
19941: EMPTY
19942: LIST
19943: LIST
19944: LIST
19945: LIST
19946: PUSH
19947: LD_VAR 0 2
19951: PUSH
19952: LD_INT 9
19954: MINUS
19955: ARRAY
19956: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
19957: LD_ADDR_OWVAR 45
19961: PUSH
19962: LD_INT 11
19964: PUSH
19965: LD_INT 15
19967: PUSH
19968: LD_INT 12
19970: PUSH
19971: LD_INT 15
19973: PUSH
19974: EMPTY
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: PUSH
19980: LD_VAR 0 2
19984: PUSH
19985: LD_INT 9
19987: MINUS
19988: ARRAY
19989: ST_TO_ADDR
// end ; 14 :
19990: GO 20409
19992: LD_INT 14
19994: DOUBLE
19995: EQUAL
19996: IFTRUE 20000
19998: GO 20011
20000: POP
// bc_type := b_workshop ; 15 :
20001: LD_ADDR_OWVAR 42
20005: PUSH
20006: LD_INT 2
20008: ST_TO_ADDR
20009: GO 20409
20011: LD_INT 15
20013: DOUBLE
20014: EQUAL
20015: IFTRUE 20019
20017: GO 20030
20019: POP
// bc_type := b_factory ; 16 :
20020: LD_ADDR_OWVAR 42
20024: PUSH
20025: LD_INT 3
20027: ST_TO_ADDR
20028: GO 20409
20030: LD_INT 16
20032: DOUBLE
20033: EQUAL
20034: IFTRUE 20038
20036: GO 20049
20038: POP
// bc_type := b_ext_gun ; 17 :
20039: LD_ADDR_OWVAR 42
20043: PUSH
20044: LD_INT 17
20046: ST_TO_ADDR
20047: GO 20409
20049: LD_INT 17
20051: DOUBLE
20052: EQUAL
20053: IFTRUE 20057
20055: GO 20085
20057: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20058: LD_ADDR_OWVAR 42
20062: PUSH
20063: LD_INT 19
20065: PUSH
20066: LD_INT 23
20068: PUSH
20069: LD_INT 19
20071: PUSH
20072: EMPTY
20073: LIST
20074: LIST
20075: LIST
20076: PUSH
20077: LD_VAR 0 1
20081: ARRAY
20082: ST_TO_ADDR
20083: GO 20409
20085: LD_INT 18
20087: DOUBLE
20088: EQUAL
20089: IFTRUE 20093
20091: GO 20104
20093: POP
// bc_type := b_ext_radar ; 19 :
20094: LD_ADDR_OWVAR 42
20098: PUSH
20099: LD_INT 20
20101: ST_TO_ADDR
20102: GO 20409
20104: LD_INT 19
20106: DOUBLE
20107: EQUAL
20108: IFTRUE 20112
20110: GO 20123
20112: POP
// bc_type := b_ext_radio ; 20 :
20113: LD_ADDR_OWVAR 42
20117: PUSH
20118: LD_INT 22
20120: ST_TO_ADDR
20121: GO 20409
20123: LD_INT 20
20125: DOUBLE
20126: EQUAL
20127: IFTRUE 20131
20129: GO 20142
20131: POP
// bc_type := b_ext_siberium ; 21 :
20132: LD_ADDR_OWVAR 42
20136: PUSH
20137: LD_INT 21
20139: ST_TO_ADDR
20140: GO 20409
20142: LD_INT 21
20144: DOUBLE
20145: EQUAL
20146: IFTRUE 20150
20148: GO 20161
20150: POP
// bc_type := b_ext_computer ; 22 :
20151: LD_ADDR_OWVAR 42
20155: PUSH
20156: LD_INT 24
20158: ST_TO_ADDR
20159: GO 20409
20161: LD_INT 22
20163: DOUBLE
20164: EQUAL
20165: IFTRUE 20169
20167: GO 20180
20169: POP
// bc_type := b_ext_track ; 23 :
20170: LD_ADDR_OWVAR 42
20174: PUSH
20175: LD_INT 16
20177: ST_TO_ADDR
20178: GO 20409
20180: LD_INT 23
20182: DOUBLE
20183: EQUAL
20184: IFTRUE 20188
20186: GO 20199
20188: POP
// bc_type := b_ext_laser ; 24 :
20189: LD_ADDR_OWVAR 42
20193: PUSH
20194: LD_INT 25
20196: ST_TO_ADDR
20197: GO 20409
20199: LD_INT 24
20201: DOUBLE
20202: EQUAL
20203: IFTRUE 20207
20205: GO 20218
20207: POP
// bc_type := b_control_tower ; 25 :
20208: LD_ADDR_OWVAR 42
20212: PUSH
20213: LD_INT 36
20215: ST_TO_ADDR
20216: GO 20409
20218: LD_INT 25
20220: DOUBLE
20221: EQUAL
20222: IFTRUE 20226
20224: GO 20237
20226: POP
// bc_type := b_breastwork ; 26 :
20227: LD_ADDR_OWVAR 42
20231: PUSH
20232: LD_INT 31
20234: ST_TO_ADDR
20235: GO 20409
20237: LD_INT 26
20239: DOUBLE
20240: EQUAL
20241: IFTRUE 20245
20243: GO 20256
20245: POP
// bc_type := b_bunker ; 27 :
20246: LD_ADDR_OWVAR 42
20250: PUSH
20251: LD_INT 32
20253: ST_TO_ADDR
20254: GO 20409
20256: LD_INT 27
20258: DOUBLE
20259: EQUAL
20260: IFTRUE 20264
20262: GO 20275
20264: POP
// bc_type := b_turret ; 28 :
20265: LD_ADDR_OWVAR 42
20269: PUSH
20270: LD_INT 33
20272: ST_TO_ADDR
20273: GO 20409
20275: LD_INT 28
20277: DOUBLE
20278: EQUAL
20279: IFTRUE 20283
20281: GO 20294
20283: POP
// bc_type := b_armoury ; 29 :
20284: LD_ADDR_OWVAR 42
20288: PUSH
20289: LD_INT 4
20291: ST_TO_ADDR
20292: GO 20409
20294: LD_INT 29
20296: DOUBLE
20297: EQUAL
20298: IFTRUE 20302
20300: GO 20313
20302: POP
// bc_type := b_barracks ; 30 :
20303: LD_ADDR_OWVAR 42
20307: PUSH
20308: LD_INT 5
20310: ST_TO_ADDR
20311: GO 20409
20313: LD_INT 30
20315: DOUBLE
20316: EQUAL
20317: IFTRUE 20321
20319: GO 20332
20321: POP
// bc_type := b_solar_power ; 31 :
20322: LD_ADDR_OWVAR 42
20326: PUSH
20327: LD_INT 27
20329: ST_TO_ADDR
20330: GO 20409
20332: LD_INT 31
20334: DOUBLE
20335: EQUAL
20336: IFTRUE 20340
20338: GO 20351
20340: POP
// bc_type := b_oil_power ; 32 :
20341: LD_ADDR_OWVAR 42
20345: PUSH
20346: LD_INT 26
20348: ST_TO_ADDR
20349: GO 20409
20351: LD_INT 32
20353: DOUBLE
20354: EQUAL
20355: IFTRUE 20359
20357: GO 20370
20359: POP
// bc_type := b_siberite_power ; 33 :
20360: LD_ADDR_OWVAR 42
20364: PUSH
20365: LD_INT 28
20367: ST_TO_ADDR
20368: GO 20409
20370: LD_INT 33
20372: DOUBLE
20373: EQUAL
20374: IFTRUE 20378
20376: GO 20389
20378: POP
// bc_type := b_oil_mine ; 34 :
20379: LD_ADDR_OWVAR 42
20383: PUSH
20384: LD_INT 29
20386: ST_TO_ADDR
20387: GO 20409
20389: LD_INT 34
20391: DOUBLE
20392: EQUAL
20393: IFTRUE 20397
20395: GO 20408
20397: POP
// bc_type := b_siberite_mine ; end ;
20398: LD_ADDR_OWVAR 42
20402: PUSH
20403: LD_INT 30
20405: ST_TO_ADDR
20406: GO 20409
20408: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
20409: LD_ADDR_VAR 0 8
20413: PUSH
20414: LD_VAR 0 5
20418: PPUSH
20419: LD_VAR 0 6
20423: PPUSH
20424: LD_VAR 0 3
20428: PPUSH
20429: CALL_OW 47
20433: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
20434: LD_OWVAR 42
20438: PUSH
20439: LD_INT 32
20441: PUSH
20442: LD_INT 33
20444: PUSH
20445: EMPTY
20446: LIST
20447: LIST
20448: IN
20449: IFFALSE 20465
// PlaceWeaponTurret ( b , weapon ) ;
20451: LD_VAR 0 8
20455: PPUSH
20456: LD_VAR 0 4
20460: PPUSH
20461: CALL_OW 431
// end ;
20465: LD_VAR 0 7
20469: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
20470: LD_INT 0
20472: PPUSH
20473: PPUSH
20474: PPUSH
20475: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20476: LD_ADDR_VAR 0 4
20480: PUSH
20481: LD_INT 22
20483: PUSH
20484: LD_OWVAR 2
20488: PUSH
20489: EMPTY
20490: LIST
20491: LIST
20492: PUSH
20493: LD_INT 2
20495: PUSH
20496: LD_INT 30
20498: PUSH
20499: LD_INT 0
20501: PUSH
20502: EMPTY
20503: LIST
20504: LIST
20505: PUSH
20506: LD_INT 30
20508: PUSH
20509: LD_INT 1
20511: PUSH
20512: EMPTY
20513: LIST
20514: LIST
20515: PUSH
20516: EMPTY
20517: LIST
20518: LIST
20519: LIST
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: PPUSH
20525: CALL_OW 69
20529: ST_TO_ADDR
// if not tmp then
20530: LD_VAR 0 4
20534: NOT
20535: IFFALSE 20539
// exit ;
20537: GO 20598
// for i in tmp do
20539: LD_ADDR_VAR 0 2
20543: PUSH
20544: LD_VAR 0 4
20548: PUSH
20549: FOR_IN
20550: IFFALSE 20596
// for j = 1 to 3 do
20552: LD_ADDR_VAR 0 3
20556: PUSH
20557: DOUBLE
20558: LD_INT 1
20560: DEC
20561: ST_TO_ADDR
20562: LD_INT 3
20564: PUSH
20565: FOR_TO
20566: IFFALSE 20592
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
20568: LD_VAR 0 2
20572: PPUSH
20573: CALL_OW 274
20577: PPUSH
20578: LD_VAR 0 3
20582: PPUSH
20583: LD_INT 99999
20585: PPUSH
20586: CALL_OW 277
20590: GO 20565
20592: POP
20593: POP
20594: GO 20549
20596: POP
20597: POP
// end ;
20598: LD_VAR 0 1
20602: RET
// export function hHackSetLevel10 ; var i , j ; begin
20603: LD_INT 0
20605: PPUSH
20606: PPUSH
20607: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20608: LD_ADDR_VAR 0 2
20612: PUSH
20613: LD_INT 21
20615: PUSH
20616: LD_INT 1
20618: PUSH
20619: EMPTY
20620: LIST
20621: LIST
20622: PPUSH
20623: CALL_OW 69
20627: PUSH
20628: FOR_IN
20629: IFFALSE 20681
// if IsSelected ( i ) then
20631: LD_VAR 0 2
20635: PPUSH
20636: CALL_OW 306
20640: IFFALSE 20679
// begin for j := 1 to 4 do
20642: LD_ADDR_VAR 0 3
20646: PUSH
20647: DOUBLE
20648: LD_INT 1
20650: DEC
20651: ST_TO_ADDR
20652: LD_INT 4
20654: PUSH
20655: FOR_TO
20656: IFFALSE 20677
// SetSkill ( i , j , 10 ) ;
20658: LD_VAR 0 2
20662: PPUSH
20663: LD_VAR 0 3
20667: PPUSH
20668: LD_INT 10
20670: PPUSH
20671: CALL_OW 237
20675: GO 20655
20677: POP
20678: POP
// end ;
20679: GO 20628
20681: POP
20682: POP
// end ;
20683: LD_VAR 0 1
20687: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
20688: LD_INT 0
20690: PPUSH
20691: PPUSH
20692: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
20693: LD_ADDR_VAR 0 2
20697: PUSH
20698: LD_INT 22
20700: PUSH
20701: LD_OWVAR 2
20705: PUSH
20706: EMPTY
20707: LIST
20708: LIST
20709: PUSH
20710: LD_INT 21
20712: PUSH
20713: LD_INT 1
20715: PUSH
20716: EMPTY
20717: LIST
20718: LIST
20719: PUSH
20720: EMPTY
20721: LIST
20722: LIST
20723: PPUSH
20724: CALL_OW 69
20728: PUSH
20729: FOR_IN
20730: IFFALSE 20771
// begin for j := 1 to 4 do
20732: LD_ADDR_VAR 0 3
20736: PUSH
20737: DOUBLE
20738: LD_INT 1
20740: DEC
20741: ST_TO_ADDR
20742: LD_INT 4
20744: PUSH
20745: FOR_TO
20746: IFFALSE 20767
// SetSkill ( i , j , 10 ) ;
20748: LD_VAR 0 2
20752: PPUSH
20753: LD_VAR 0 3
20757: PPUSH
20758: LD_INT 10
20760: PPUSH
20761: CALL_OW 237
20765: GO 20745
20767: POP
20768: POP
// end ;
20769: GO 20729
20771: POP
20772: POP
// end ;
20773: LD_VAR 0 1
20777: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
20778: LD_INT 0
20780: PPUSH
// uc_side := your_side ;
20781: LD_ADDR_OWVAR 20
20785: PUSH
20786: LD_OWVAR 2
20790: ST_TO_ADDR
// uc_nation := nation ;
20791: LD_ADDR_OWVAR 21
20795: PUSH
20796: LD_VAR 0 1
20800: ST_TO_ADDR
// InitHc ;
20801: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
20805: LD_INT 0
20807: PPUSH
20808: LD_VAR 0 2
20812: PPUSH
20813: LD_VAR 0 3
20817: PPUSH
20818: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
20822: LD_VAR 0 4
20826: PPUSH
20827: LD_VAR 0 5
20831: PPUSH
20832: CALL_OW 428
20836: PUSH
20837: LD_INT 0
20839: EQUAL
20840: IFFALSE 20864
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
20842: CALL_OW 44
20846: PPUSH
20847: LD_VAR 0 4
20851: PPUSH
20852: LD_VAR 0 5
20856: PPUSH
20857: LD_INT 1
20859: PPUSH
20860: CALL_OW 48
// end ;
20864: LD_VAR 0 6
20868: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
20869: LD_INT 0
20871: PPUSH
20872: PPUSH
// uc_side := your_side ;
20873: LD_ADDR_OWVAR 20
20877: PUSH
20878: LD_OWVAR 2
20882: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
20883: LD_VAR 0 1
20887: PUSH
20888: LD_INT 1
20890: PUSH
20891: LD_INT 2
20893: PUSH
20894: LD_INT 3
20896: PUSH
20897: LD_INT 4
20899: PUSH
20900: LD_INT 5
20902: PUSH
20903: EMPTY
20904: LIST
20905: LIST
20906: LIST
20907: LIST
20908: LIST
20909: IN
20910: IFFALSE 20922
// uc_nation := nation_american else
20912: LD_ADDR_OWVAR 21
20916: PUSH
20917: LD_INT 1
20919: ST_TO_ADDR
20920: GO 20965
// if chassis in [ 11 , 12 , 13 , 14 ] then
20922: LD_VAR 0 1
20926: PUSH
20927: LD_INT 11
20929: PUSH
20930: LD_INT 12
20932: PUSH
20933: LD_INT 13
20935: PUSH
20936: LD_INT 14
20938: PUSH
20939: EMPTY
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: IN
20945: IFFALSE 20957
// uc_nation := nation_arabian else
20947: LD_ADDR_OWVAR 21
20951: PUSH
20952: LD_INT 2
20954: ST_TO_ADDR
20955: GO 20965
// uc_nation := nation_russian ;
20957: LD_ADDR_OWVAR 21
20961: PUSH
20962: LD_INT 3
20964: ST_TO_ADDR
// vc_chassis := chassis ;
20965: LD_ADDR_OWVAR 37
20969: PUSH
20970: LD_VAR 0 1
20974: ST_TO_ADDR
// vc_engine := engine ;
20975: LD_ADDR_OWVAR 39
20979: PUSH
20980: LD_VAR 0 2
20984: ST_TO_ADDR
// vc_control := control ;
20985: LD_ADDR_OWVAR 38
20989: PUSH
20990: LD_VAR 0 3
20994: ST_TO_ADDR
// vc_weapon := weapon ;
20995: LD_ADDR_OWVAR 40
20999: PUSH
21000: LD_VAR 0 4
21004: ST_TO_ADDR
// un := CreateVehicle ;
21005: LD_ADDR_VAR 0 8
21009: PUSH
21010: CALL_OW 45
21014: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21015: LD_VAR 0 8
21019: PPUSH
21020: LD_INT 0
21022: PPUSH
21023: LD_INT 5
21025: PPUSH
21026: CALL_OW 12
21030: PPUSH
21031: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21035: LD_VAR 0 8
21039: PPUSH
21040: LD_VAR 0 5
21044: PPUSH
21045: LD_VAR 0 6
21049: PPUSH
21050: LD_INT 1
21052: PPUSH
21053: CALL_OW 48
// end ;
21057: LD_VAR 0 7
21061: RET
// export hInvincible ; every 1 do
21062: GO 21064
21064: DISABLE
// hInvincible := [ ] ;
21065: LD_ADDR_EXP 86
21069: PUSH
21070: EMPTY
21071: ST_TO_ADDR
21072: END
// every 10 do var i ;
21073: GO 21075
21075: DISABLE
21076: LD_INT 0
21078: PPUSH
// begin enable ;
21079: ENABLE
// if not hInvincible then
21080: LD_EXP 86
21084: NOT
21085: IFFALSE 21089
// exit ;
21087: GO 21133
// for i in hInvincible do
21089: LD_ADDR_VAR 0 1
21093: PUSH
21094: LD_EXP 86
21098: PUSH
21099: FOR_IN
21100: IFFALSE 21131
// if GetLives ( i ) < 1000 then
21102: LD_VAR 0 1
21106: PPUSH
21107: CALL_OW 256
21111: PUSH
21112: LD_INT 1000
21114: LESS
21115: IFFALSE 21129
// SetLives ( i , 1000 ) ;
21117: LD_VAR 0 1
21121: PPUSH
21122: LD_INT 1000
21124: PPUSH
21125: CALL_OW 234
21129: GO 21099
21131: POP
21132: POP
// end ;
21133: PPOPN 1
21135: END
// export function hHackInvincible ; var i ; begin
21136: LD_INT 0
21138: PPUSH
21139: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21140: LD_ADDR_VAR 0 2
21144: PUSH
21145: LD_INT 2
21147: PUSH
21148: LD_INT 21
21150: PUSH
21151: LD_INT 1
21153: PUSH
21154: EMPTY
21155: LIST
21156: LIST
21157: PUSH
21158: LD_INT 21
21160: PUSH
21161: LD_INT 2
21163: PUSH
21164: EMPTY
21165: LIST
21166: LIST
21167: PUSH
21168: EMPTY
21169: LIST
21170: LIST
21171: LIST
21172: PPUSH
21173: CALL_OW 69
21177: PUSH
21178: FOR_IN
21179: IFFALSE 21240
// if IsSelected ( i ) then
21181: LD_VAR 0 2
21185: PPUSH
21186: CALL_OW 306
21190: IFFALSE 21238
// begin if i in hInvincible then
21192: LD_VAR 0 2
21196: PUSH
21197: LD_EXP 86
21201: IN
21202: IFFALSE 21222
// hInvincible := hInvincible diff i else
21204: LD_ADDR_EXP 86
21208: PUSH
21209: LD_EXP 86
21213: PUSH
21214: LD_VAR 0 2
21218: DIFF
21219: ST_TO_ADDR
21220: GO 21238
// hInvincible := hInvincible union i ;
21222: LD_ADDR_EXP 86
21226: PUSH
21227: LD_EXP 86
21231: PUSH
21232: LD_VAR 0 2
21236: UNION
21237: ST_TO_ADDR
// end ;
21238: GO 21178
21240: POP
21241: POP
// end ;
21242: LD_VAR 0 1
21246: RET
// export function hHackInvisible ; var i , j ; begin
21247: LD_INT 0
21249: PPUSH
21250: PPUSH
21251: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21252: LD_ADDR_VAR 0 2
21256: PUSH
21257: LD_INT 21
21259: PUSH
21260: LD_INT 1
21262: PUSH
21263: EMPTY
21264: LIST
21265: LIST
21266: PPUSH
21267: CALL_OW 69
21271: PUSH
21272: FOR_IN
21273: IFFALSE 21297
// if IsSelected ( i ) then
21275: LD_VAR 0 2
21279: PPUSH
21280: CALL_OW 306
21284: IFFALSE 21295
// ComForceInvisible ( i ) ;
21286: LD_VAR 0 2
21290: PPUSH
21291: CALL_OW 496
21295: GO 21272
21297: POP
21298: POP
// end ;
21299: LD_VAR 0 1
21303: RET
// export function hHackChangeYourSide ; begin
21304: LD_INT 0
21306: PPUSH
// if your_side = 8 then
21307: LD_OWVAR 2
21311: PUSH
21312: LD_INT 8
21314: EQUAL
21315: IFFALSE 21327
// your_side := 0 else
21317: LD_ADDR_OWVAR 2
21321: PUSH
21322: LD_INT 0
21324: ST_TO_ADDR
21325: GO 21341
// your_side := your_side + 1 ;
21327: LD_ADDR_OWVAR 2
21331: PUSH
21332: LD_OWVAR 2
21336: PUSH
21337: LD_INT 1
21339: PLUS
21340: ST_TO_ADDR
// end ;
21341: LD_VAR 0 1
21345: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21346: LD_INT 0
21348: PPUSH
21349: PPUSH
21350: PPUSH
// for i in all_units do
21351: LD_ADDR_VAR 0 2
21355: PUSH
21356: LD_OWVAR 3
21360: PUSH
21361: FOR_IN
21362: IFFALSE 21440
// if IsSelected ( i ) then
21364: LD_VAR 0 2
21368: PPUSH
21369: CALL_OW 306
21373: IFFALSE 21438
// begin j := GetSide ( i ) ;
21375: LD_ADDR_VAR 0 3
21379: PUSH
21380: LD_VAR 0 2
21384: PPUSH
21385: CALL_OW 255
21389: ST_TO_ADDR
// if j = 8 then
21390: LD_VAR 0 3
21394: PUSH
21395: LD_INT 8
21397: EQUAL
21398: IFFALSE 21410
// j := 0 else
21400: LD_ADDR_VAR 0 3
21404: PUSH
21405: LD_INT 0
21407: ST_TO_ADDR
21408: GO 21424
// j := j + 1 ;
21410: LD_ADDR_VAR 0 3
21414: PUSH
21415: LD_VAR 0 3
21419: PUSH
21420: LD_INT 1
21422: PLUS
21423: ST_TO_ADDR
// SetSide ( i , j ) ;
21424: LD_VAR 0 2
21428: PPUSH
21429: LD_VAR 0 3
21433: PPUSH
21434: CALL_OW 235
// end ;
21438: GO 21361
21440: POP
21441: POP
// end ;
21442: LD_VAR 0 1
21446: RET
// export function hHackFog ; begin
21447: LD_INT 0
21449: PPUSH
// FogOff ( true ) ;
21450: LD_INT 1
21452: PPUSH
21453: CALL_OW 344
// end ;
21457: LD_VAR 0 1
21461: RET
// export function hHackTeleport ( unit , x , y ) ; begin
21462: LD_INT 0
21464: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
21465: LD_VAR 0 1
21469: PPUSH
21470: LD_VAR 0 2
21474: PPUSH
21475: LD_VAR 0 3
21479: PPUSH
21480: LD_INT 1
21482: PPUSH
21483: LD_INT 1
21485: PPUSH
21486: CALL_OW 483
// CenterOnXY ( x , y ) ;
21490: LD_VAR 0 2
21494: PPUSH
21495: LD_VAR 0 3
21499: PPUSH
21500: CALL_OW 84
// end ;
21504: LD_VAR 0 4
21508: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
21509: LD_INT 0
21511: PPUSH
21512: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
21513: LD_VAR 0 1
21517: NOT
21518: PUSH
21519: LD_VAR 0 2
21523: PPUSH
21524: LD_VAR 0 3
21528: PPUSH
21529: CALL_OW 488
21533: NOT
21534: OR
21535: PUSH
21536: LD_VAR 0 1
21540: PPUSH
21541: CALL_OW 266
21545: PUSH
21546: LD_INT 3
21548: NONEQUAL
21549: PUSH
21550: LD_VAR 0 1
21554: PPUSH
21555: CALL_OW 247
21559: PUSH
21560: LD_INT 1
21562: EQUAL
21563: NOT
21564: AND
21565: OR
21566: IFFALSE 21570
// exit ;
21568: GO 21719
// if GetType ( factory ) = unit_human then
21570: LD_VAR 0 1
21574: PPUSH
21575: CALL_OW 247
21579: PUSH
21580: LD_INT 1
21582: EQUAL
21583: IFFALSE 21600
// factory := IsInUnit ( factory ) ;
21585: LD_ADDR_VAR 0 1
21589: PUSH
21590: LD_VAR 0 1
21594: PPUSH
21595: CALL_OW 310
21599: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
21600: LD_VAR 0 1
21604: PPUSH
21605: CALL_OW 266
21609: PUSH
21610: LD_INT 3
21612: NONEQUAL
21613: IFFALSE 21617
// exit ;
21615: GO 21719
// if HexInfo ( x , y ) = factory then
21617: LD_VAR 0 2
21621: PPUSH
21622: LD_VAR 0 3
21626: PPUSH
21627: CALL_OW 428
21631: PUSH
21632: LD_VAR 0 1
21636: EQUAL
21637: IFFALSE 21664
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
21639: LD_ADDR_EXP 87
21643: PUSH
21644: LD_EXP 87
21648: PPUSH
21649: LD_VAR 0 1
21653: PPUSH
21654: LD_INT 0
21656: PPUSH
21657: CALL_OW 1
21661: ST_TO_ADDR
21662: GO 21715
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
21664: LD_ADDR_EXP 87
21668: PUSH
21669: LD_EXP 87
21673: PPUSH
21674: LD_VAR 0 1
21678: PPUSH
21679: LD_VAR 0 1
21683: PPUSH
21684: CALL_OW 255
21688: PUSH
21689: LD_VAR 0 1
21693: PUSH
21694: LD_VAR 0 2
21698: PUSH
21699: LD_VAR 0 3
21703: PUSH
21704: EMPTY
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: PPUSH
21710: CALL_OW 1
21714: ST_TO_ADDR
// UpdateFactoryWaypoints ;
21715: CALL 21724 0 0
// end ;
21719: LD_VAR 0 4
21723: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
21724: LD_INT 0
21726: PPUSH
21727: PPUSH
21728: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
21729: LD_STRING resetFactoryWaypoint();
21731: PPUSH
21732: CALL_OW 559
// if factoryWaypoints then
21736: LD_EXP 87
21740: IFFALSE 21866
// begin list := PrepareArray ( factoryWaypoints ) ;
21742: LD_ADDR_VAR 0 3
21746: PUSH
21747: LD_EXP 87
21751: PPUSH
21752: CALL 69174 0 1
21756: ST_TO_ADDR
// for i := 1 to list do
21757: LD_ADDR_VAR 0 2
21761: PUSH
21762: DOUBLE
21763: LD_INT 1
21765: DEC
21766: ST_TO_ADDR
21767: LD_VAR 0 3
21771: PUSH
21772: FOR_TO
21773: IFFALSE 21864
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
21775: LD_STRING setFactoryWaypointXY(
21777: PUSH
21778: LD_VAR 0 3
21782: PUSH
21783: LD_VAR 0 2
21787: ARRAY
21788: PUSH
21789: LD_INT 1
21791: ARRAY
21792: STR
21793: PUSH
21794: LD_STRING ,
21796: STR
21797: PUSH
21798: LD_VAR 0 3
21802: PUSH
21803: LD_VAR 0 2
21807: ARRAY
21808: PUSH
21809: LD_INT 2
21811: ARRAY
21812: STR
21813: PUSH
21814: LD_STRING ,
21816: STR
21817: PUSH
21818: LD_VAR 0 3
21822: PUSH
21823: LD_VAR 0 2
21827: ARRAY
21828: PUSH
21829: LD_INT 3
21831: ARRAY
21832: STR
21833: PUSH
21834: LD_STRING ,
21836: STR
21837: PUSH
21838: LD_VAR 0 3
21842: PUSH
21843: LD_VAR 0 2
21847: ARRAY
21848: PUSH
21849: LD_INT 4
21851: ARRAY
21852: STR
21853: PUSH
21854: LD_STRING )
21856: STR
21857: PPUSH
21858: CALL_OW 559
21862: GO 21772
21864: POP
21865: POP
// end ; end ;
21866: LD_VAR 0 1
21870: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
21871: LD_INT 0
21873: PPUSH
// if HexInfo ( x , y ) = warehouse then
21874: LD_VAR 0 2
21878: PPUSH
21879: LD_VAR 0 3
21883: PPUSH
21884: CALL_OW 428
21888: PUSH
21889: LD_VAR 0 1
21893: EQUAL
21894: IFFALSE 21921
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
21896: LD_ADDR_EXP 88
21900: PUSH
21901: LD_EXP 88
21905: PPUSH
21906: LD_VAR 0 1
21910: PPUSH
21911: LD_INT 0
21913: PPUSH
21914: CALL_OW 1
21918: ST_TO_ADDR
21919: GO 21972
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
21921: LD_ADDR_EXP 88
21925: PUSH
21926: LD_EXP 88
21930: PPUSH
21931: LD_VAR 0 1
21935: PPUSH
21936: LD_VAR 0 1
21940: PPUSH
21941: CALL_OW 255
21945: PUSH
21946: LD_VAR 0 1
21950: PUSH
21951: LD_VAR 0 2
21955: PUSH
21956: LD_VAR 0 3
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: PPUSH
21967: CALL_OW 1
21971: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
21972: CALL 21981 0 0
// end ;
21976: LD_VAR 0 4
21980: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
21981: LD_INT 0
21983: PPUSH
21984: PPUSH
21985: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
21986: LD_STRING resetWarehouseGatheringPoints();
21988: PPUSH
21989: CALL_OW 559
// if warehouseGatheringPoints then
21993: LD_EXP 88
21997: IFFALSE 22123
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
21999: LD_ADDR_VAR 0 3
22003: PUSH
22004: LD_EXP 88
22008: PPUSH
22009: CALL 69174 0 1
22013: ST_TO_ADDR
// for i := 1 to list do
22014: LD_ADDR_VAR 0 2
22018: PUSH
22019: DOUBLE
22020: LD_INT 1
22022: DEC
22023: ST_TO_ADDR
22024: LD_VAR 0 3
22028: PUSH
22029: FOR_TO
22030: IFFALSE 22121
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22032: LD_STRING setWarehouseGatheringPointXY(
22034: PUSH
22035: LD_VAR 0 3
22039: PUSH
22040: LD_VAR 0 2
22044: ARRAY
22045: PUSH
22046: LD_INT 1
22048: ARRAY
22049: STR
22050: PUSH
22051: LD_STRING ,
22053: STR
22054: PUSH
22055: LD_VAR 0 3
22059: PUSH
22060: LD_VAR 0 2
22064: ARRAY
22065: PUSH
22066: LD_INT 2
22068: ARRAY
22069: STR
22070: PUSH
22071: LD_STRING ,
22073: STR
22074: PUSH
22075: LD_VAR 0 3
22079: PUSH
22080: LD_VAR 0 2
22084: ARRAY
22085: PUSH
22086: LD_INT 3
22088: ARRAY
22089: STR
22090: PUSH
22091: LD_STRING ,
22093: STR
22094: PUSH
22095: LD_VAR 0 3
22099: PUSH
22100: LD_VAR 0 2
22104: ARRAY
22105: PUSH
22106: LD_INT 4
22108: ARRAY
22109: STR
22110: PUSH
22111: LD_STRING )
22113: STR
22114: PPUSH
22115: CALL_OW 559
22119: GO 22029
22121: POP
22122: POP
// end ; end ;
22123: LD_VAR 0 1
22127: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
22128: LD_EXP 88
22132: IFFALSE 22817
22134: GO 22136
22136: DISABLE
22137: LD_INT 0
22139: PPUSH
22140: PPUSH
22141: PPUSH
22142: PPUSH
22143: PPUSH
22144: PPUSH
22145: PPUSH
22146: PPUSH
22147: PPUSH
// begin enable ;
22148: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
22149: LD_ADDR_VAR 0 3
22153: PUSH
22154: LD_EXP 88
22158: PPUSH
22159: CALL 69174 0 1
22163: ST_TO_ADDR
// if not list then
22164: LD_VAR 0 3
22168: NOT
22169: IFFALSE 22173
// exit ;
22171: GO 22817
// for i := 1 to list do
22173: LD_ADDR_VAR 0 1
22177: PUSH
22178: DOUBLE
22179: LD_INT 1
22181: DEC
22182: ST_TO_ADDR
22183: LD_VAR 0 3
22187: PUSH
22188: FOR_TO
22189: IFFALSE 22815
// begin depot := list [ i ] [ 2 ] ;
22191: LD_ADDR_VAR 0 8
22195: PUSH
22196: LD_VAR 0 3
22200: PUSH
22201: LD_VAR 0 1
22205: ARRAY
22206: PUSH
22207: LD_INT 2
22209: ARRAY
22210: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
22211: LD_ADDR_VAR 0 5
22215: PUSH
22216: LD_VAR 0 3
22220: PUSH
22221: LD_VAR 0 1
22225: ARRAY
22226: PUSH
22227: LD_INT 1
22229: ARRAY
22230: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
22231: LD_VAR 0 8
22235: PPUSH
22236: CALL_OW 301
22240: PUSH
22241: LD_VAR 0 5
22245: PUSH
22246: LD_VAR 0 8
22250: PPUSH
22251: CALL_OW 255
22255: NONEQUAL
22256: OR
22257: IFFALSE 22286
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
22259: LD_ADDR_EXP 88
22263: PUSH
22264: LD_EXP 88
22268: PPUSH
22269: LD_VAR 0 8
22273: PPUSH
22274: LD_INT 0
22276: PPUSH
22277: CALL_OW 1
22281: ST_TO_ADDR
// exit ;
22282: POP
22283: POP
22284: GO 22817
// end ; x := list [ i ] [ 3 ] ;
22286: LD_ADDR_VAR 0 6
22290: PUSH
22291: LD_VAR 0 3
22295: PUSH
22296: LD_VAR 0 1
22300: ARRAY
22301: PUSH
22302: LD_INT 3
22304: ARRAY
22305: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
22306: LD_ADDR_VAR 0 7
22310: PUSH
22311: LD_VAR 0 3
22315: PUSH
22316: LD_VAR 0 1
22320: ARRAY
22321: PUSH
22322: LD_INT 4
22324: ARRAY
22325: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
22326: LD_ADDR_VAR 0 9
22330: PUSH
22331: LD_VAR 0 6
22335: PPUSH
22336: LD_VAR 0 7
22340: PPUSH
22341: LD_INT 16
22343: PPUSH
22344: CALL 67762 0 3
22348: ST_TO_ADDR
// if not cratesNearbyPoint then
22349: LD_VAR 0 9
22353: NOT
22354: IFFALSE 22360
// exit ;
22356: POP
22357: POP
22358: GO 22817
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
22360: LD_ADDR_VAR 0 4
22364: PUSH
22365: LD_INT 22
22367: PUSH
22368: LD_VAR 0 5
22372: PUSH
22373: EMPTY
22374: LIST
22375: LIST
22376: PUSH
22377: LD_INT 3
22379: PUSH
22380: LD_INT 60
22382: PUSH
22383: EMPTY
22384: LIST
22385: PUSH
22386: EMPTY
22387: LIST
22388: LIST
22389: PUSH
22390: LD_INT 91
22392: PUSH
22393: LD_VAR 0 8
22397: PUSH
22398: LD_INT 6
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: LIST
22405: PUSH
22406: LD_INT 2
22408: PUSH
22409: LD_INT 25
22411: PUSH
22412: LD_INT 2
22414: PUSH
22415: EMPTY
22416: LIST
22417: LIST
22418: PUSH
22419: LD_INT 25
22421: PUSH
22422: LD_INT 16
22424: PUSH
22425: EMPTY
22426: LIST
22427: LIST
22428: PUSH
22429: EMPTY
22430: LIST
22431: LIST
22432: LIST
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: PPUSH
22440: CALL_OW 69
22444: PUSH
22445: LD_VAR 0 8
22449: PPUSH
22450: CALL_OW 313
22454: PPUSH
22455: LD_INT 3
22457: PUSH
22458: LD_INT 60
22460: PUSH
22461: EMPTY
22462: LIST
22463: PUSH
22464: EMPTY
22465: LIST
22466: LIST
22467: PUSH
22468: LD_INT 2
22470: PUSH
22471: LD_INT 25
22473: PUSH
22474: LD_INT 2
22476: PUSH
22477: EMPTY
22478: LIST
22479: LIST
22480: PUSH
22481: LD_INT 25
22483: PUSH
22484: LD_INT 16
22486: PUSH
22487: EMPTY
22488: LIST
22489: LIST
22490: PUSH
22491: EMPTY
22492: LIST
22493: LIST
22494: LIST
22495: PUSH
22496: EMPTY
22497: LIST
22498: LIST
22499: PPUSH
22500: CALL_OW 72
22504: UNION
22505: ST_TO_ADDR
// if tmp then
22506: LD_VAR 0 4
22510: IFFALSE 22590
// begin tmp := ShrinkArray ( tmp , 3 ) ;
22512: LD_ADDR_VAR 0 4
22516: PUSH
22517: LD_VAR 0 4
22521: PPUSH
22522: LD_INT 3
22524: PPUSH
22525: CALL 65731 0 2
22529: ST_TO_ADDR
// for j in tmp do
22530: LD_ADDR_VAR 0 2
22534: PUSH
22535: LD_VAR 0 4
22539: PUSH
22540: FOR_IN
22541: IFFALSE 22584
// begin if IsInUnit ( j ) then
22543: LD_VAR 0 2
22547: PPUSH
22548: CALL_OW 310
22552: IFFALSE 22563
// ComExit ( j ) ;
22554: LD_VAR 0 2
22558: PPUSH
22559: CALL 65814 0 1
// AddComCollect ( j , x , y ) ;
22563: LD_VAR 0 2
22567: PPUSH
22568: LD_VAR 0 6
22572: PPUSH
22573: LD_VAR 0 7
22577: PPUSH
22578: CALL_OW 177
// end ;
22582: GO 22540
22584: POP
22585: POP
// exit ;
22586: POP
22587: POP
22588: GO 22817
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
22590: LD_ADDR_VAR 0 4
22594: PUSH
22595: LD_INT 22
22597: PUSH
22598: LD_VAR 0 5
22602: PUSH
22603: EMPTY
22604: LIST
22605: LIST
22606: PUSH
22607: LD_INT 91
22609: PUSH
22610: LD_VAR 0 8
22614: PUSH
22615: LD_INT 8
22617: PUSH
22618: EMPTY
22619: LIST
22620: LIST
22621: LIST
22622: PUSH
22623: LD_INT 2
22625: PUSH
22626: LD_INT 34
22628: PUSH
22629: LD_INT 12
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: PUSH
22636: LD_INT 34
22638: PUSH
22639: LD_INT 51
22641: PUSH
22642: EMPTY
22643: LIST
22644: LIST
22645: PUSH
22646: LD_INT 34
22648: PUSH
22649: LD_INT 32
22651: PUSH
22652: EMPTY
22653: LIST
22654: LIST
22655: PUSH
22656: LD_INT 34
22658: PUSH
22659: LD_INT 89
22661: PUSH
22662: EMPTY
22663: LIST
22664: LIST
22665: PUSH
22666: EMPTY
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: PUSH
22673: EMPTY
22674: LIST
22675: LIST
22676: LIST
22677: PPUSH
22678: CALL_OW 69
22682: ST_TO_ADDR
// if tmp then
22683: LD_VAR 0 4
22687: IFFALSE 22813
// begin for j in tmp do
22689: LD_ADDR_VAR 0 2
22693: PUSH
22694: LD_VAR 0 4
22698: PUSH
22699: FOR_IN
22700: IFFALSE 22811
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
22702: LD_VAR 0 2
22706: PPUSH
22707: CALL_OW 262
22711: PUSH
22712: LD_INT 3
22714: EQUAL
22715: PUSH
22716: LD_VAR 0 2
22720: PPUSH
22721: CALL_OW 261
22725: PUSH
22726: LD_INT 20
22728: GREATER
22729: OR
22730: PUSH
22731: LD_VAR 0 2
22735: PPUSH
22736: CALL_OW 314
22740: NOT
22741: AND
22742: PUSH
22743: LD_VAR 0 2
22747: PPUSH
22748: CALL_OW 263
22752: PUSH
22753: LD_INT 1
22755: NONEQUAL
22756: PUSH
22757: LD_VAR 0 2
22761: PPUSH
22762: CALL_OW 311
22766: OR
22767: AND
22768: IFFALSE 22809
// begin ComCollect ( j , x , y ) ;
22770: LD_VAR 0 2
22774: PPUSH
22775: LD_VAR 0 6
22779: PPUSH
22780: LD_VAR 0 7
22784: PPUSH
22785: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
22789: LD_VAR 0 2
22793: PPUSH
22794: LD_VAR 0 8
22798: PPUSH
22799: CALL_OW 172
// exit ;
22803: POP
22804: POP
22805: POP
22806: POP
22807: GO 22817
// end ;
22809: GO 22699
22811: POP
22812: POP
// end ; end ;
22813: GO 22188
22815: POP
22816: POP
// end ; end_of_file
22817: PPOPN 9
22819: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
22820: LD_INT 0
22822: PPUSH
22823: PPUSH
22824: PPUSH
22825: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
22826: LD_VAR 0 1
22830: PPUSH
22831: CALL_OW 264
22835: PUSH
22836: LD_INT 91
22838: EQUAL
22839: IFFALSE 22911
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
22841: LD_INT 68
22843: PPUSH
22844: LD_VAR 0 1
22848: PPUSH
22849: CALL_OW 255
22853: PPUSH
22854: CALL_OW 321
22858: PUSH
22859: LD_INT 2
22861: EQUAL
22862: IFFALSE 22874
// eff := 70 else
22864: LD_ADDR_VAR 0 4
22868: PUSH
22869: LD_INT 70
22871: ST_TO_ADDR
22872: GO 22882
// eff := 30 ;
22874: LD_ADDR_VAR 0 4
22878: PUSH
22879: LD_INT 30
22881: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
22882: LD_VAR 0 1
22886: PPUSH
22887: CALL_OW 250
22891: PPUSH
22892: LD_VAR 0 1
22896: PPUSH
22897: CALL_OW 251
22901: PPUSH
22902: LD_VAR 0 4
22906: PPUSH
22907: CALL_OW 495
// end ; end ;
22911: LD_VAR 0 2
22915: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
22916: LD_INT 0
22918: PPUSH
// end ;
22919: LD_VAR 0 4
22923: RET
// export function SOS_Command ( cmd ) ; begin
22924: LD_INT 0
22926: PPUSH
// end ;
22927: LD_VAR 0 2
22931: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
22932: LD_INT 0
22934: PPUSH
// end ;
22935: LD_VAR 0 6
22939: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
22940: LD_INT 0
22942: PPUSH
22943: PPUSH
// if not vehicle or not factory then
22944: LD_VAR 0 1
22948: NOT
22949: PUSH
22950: LD_VAR 0 2
22954: NOT
22955: OR
22956: IFFALSE 22960
// exit ;
22958: GO 23191
// if factoryWaypoints >= factory then
22960: LD_EXP 87
22964: PUSH
22965: LD_VAR 0 2
22969: GREATEREQUAL
22970: IFFALSE 23191
// if factoryWaypoints [ factory ] then
22972: LD_EXP 87
22976: PUSH
22977: LD_VAR 0 2
22981: ARRAY
22982: IFFALSE 23191
// begin if GetControl ( vehicle ) = control_manual then
22984: LD_VAR 0 1
22988: PPUSH
22989: CALL_OW 263
22993: PUSH
22994: LD_INT 1
22996: EQUAL
22997: IFFALSE 23078
// begin driver := IsDrivenBy ( vehicle ) ;
22999: LD_ADDR_VAR 0 4
23003: PUSH
23004: LD_VAR 0 1
23008: PPUSH
23009: CALL_OW 311
23013: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23014: LD_VAR 0 4
23018: PPUSH
23019: LD_EXP 87
23023: PUSH
23024: LD_VAR 0 2
23028: ARRAY
23029: PUSH
23030: LD_INT 3
23032: ARRAY
23033: PPUSH
23034: LD_EXP 87
23038: PUSH
23039: LD_VAR 0 2
23043: ARRAY
23044: PUSH
23045: LD_INT 4
23047: ARRAY
23048: PPUSH
23049: CALL_OW 171
// AddComExitVehicle ( driver ) ;
23053: LD_VAR 0 4
23057: PPUSH
23058: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
23062: LD_VAR 0 4
23066: PPUSH
23067: LD_VAR 0 2
23071: PPUSH
23072: CALL_OW 180
// end else
23076: GO 23191
// if GetControl ( vehicle ) = control_remote then
23078: LD_VAR 0 1
23082: PPUSH
23083: CALL_OW 263
23087: PUSH
23088: LD_INT 2
23090: EQUAL
23091: IFFALSE 23152
// begin wait ( 0 0$2 ) ;
23093: LD_INT 70
23095: PPUSH
23096: CALL_OW 67
// if Connect ( vehicle ) then
23100: LD_VAR 0 1
23104: PPUSH
23105: CALL 36022 0 1
23109: IFFALSE 23150
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23111: LD_VAR 0 1
23115: PPUSH
23116: LD_EXP 87
23120: PUSH
23121: LD_VAR 0 2
23125: ARRAY
23126: PUSH
23127: LD_INT 3
23129: ARRAY
23130: PPUSH
23131: LD_EXP 87
23135: PUSH
23136: LD_VAR 0 2
23140: ARRAY
23141: PUSH
23142: LD_INT 4
23144: ARRAY
23145: PPUSH
23146: CALL_OW 171
// end else
23150: GO 23191
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23152: LD_VAR 0 1
23156: PPUSH
23157: LD_EXP 87
23161: PUSH
23162: LD_VAR 0 2
23166: ARRAY
23167: PUSH
23168: LD_INT 3
23170: ARRAY
23171: PPUSH
23172: LD_EXP 87
23176: PUSH
23177: LD_VAR 0 2
23181: ARRAY
23182: PUSH
23183: LD_INT 4
23185: ARRAY
23186: PPUSH
23187: CALL_OW 171
// end ; end ;
23191: LD_VAR 0 3
23195: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
23196: LD_INT 0
23198: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
23199: LD_VAR 0 1
23203: PUSH
23204: LD_INT 250
23206: EQUAL
23207: PUSH
23208: LD_VAR 0 2
23212: PPUSH
23213: CALL_OW 264
23217: PUSH
23218: LD_INT 81
23220: EQUAL
23221: AND
23222: IFFALSE 23243
// MinerPlaceMine ( unit , x , y ) ;
23224: LD_VAR 0 2
23228: PPUSH
23229: LD_VAR 0 4
23233: PPUSH
23234: LD_VAR 0 5
23238: PPUSH
23239: CALL 26233 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
23243: LD_VAR 0 1
23247: PUSH
23248: LD_INT 251
23250: EQUAL
23251: PUSH
23252: LD_VAR 0 2
23256: PPUSH
23257: CALL_OW 264
23261: PUSH
23262: LD_INT 81
23264: EQUAL
23265: AND
23266: IFFALSE 23287
// MinerDetonateMine ( unit , x , y ) ;
23268: LD_VAR 0 2
23272: PPUSH
23273: LD_VAR 0 4
23277: PPUSH
23278: LD_VAR 0 5
23282: PPUSH
23283: CALL 26508 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
23287: LD_VAR 0 1
23291: PUSH
23292: LD_INT 252
23294: EQUAL
23295: PUSH
23296: LD_VAR 0 2
23300: PPUSH
23301: CALL_OW 264
23305: PUSH
23306: LD_INT 81
23308: EQUAL
23309: AND
23310: IFFALSE 23331
// MinerCreateMinefield ( unit , x , y ) ;
23312: LD_VAR 0 2
23316: PPUSH
23317: LD_VAR 0 4
23321: PPUSH
23322: LD_VAR 0 5
23326: PPUSH
23327: CALL 26925 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
23331: LD_VAR 0 1
23335: PUSH
23336: LD_INT 253
23338: EQUAL
23339: PUSH
23340: LD_VAR 0 2
23344: PPUSH
23345: CALL_OW 257
23349: PUSH
23350: LD_INT 5
23352: EQUAL
23353: AND
23354: IFFALSE 23375
// ComBinocular ( unit , x , y ) ;
23356: LD_VAR 0 2
23360: PPUSH
23361: LD_VAR 0 4
23365: PPUSH
23366: LD_VAR 0 5
23370: PPUSH
23371: CALL 27294 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
23375: LD_VAR 0 1
23379: PUSH
23380: LD_INT 254
23382: EQUAL
23383: PUSH
23384: LD_VAR 0 2
23388: PPUSH
23389: CALL_OW 264
23393: PUSH
23394: LD_INT 99
23396: EQUAL
23397: AND
23398: PUSH
23399: LD_VAR 0 3
23403: PPUSH
23404: CALL_OW 263
23408: PUSH
23409: LD_INT 3
23411: EQUAL
23412: AND
23413: IFFALSE 23429
// HackDestroyVehicle ( unit , selectedUnit ) ;
23415: LD_VAR 0 2
23419: PPUSH
23420: LD_VAR 0 3
23424: PPUSH
23425: CALL 25597 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
23429: LD_VAR 0 1
23433: PUSH
23434: LD_INT 255
23436: EQUAL
23437: PUSH
23438: LD_VAR 0 2
23442: PPUSH
23443: CALL_OW 264
23447: PUSH
23448: LD_INT 14
23450: PUSH
23451: LD_INT 53
23453: PUSH
23454: EMPTY
23455: LIST
23456: LIST
23457: IN
23458: AND
23459: PUSH
23460: LD_VAR 0 4
23464: PPUSH
23465: LD_VAR 0 5
23469: PPUSH
23470: CALL_OW 488
23474: AND
23475: IFFALSE 23499
// CutTreeXYR ( unit , x , y , 12 ) ;
23477: LD_VAR 0 2
23481: PPUSH
23482: LD_VAR 0 4
23486: PPUSH
23487: LD_VAR 0 5
23491: PPUSH
23492: LD_INT 12
23494: PPUSH
23495: CALL 23594 0 4
// if cmd = 256 then
23499: LD_VAR 0 1
23503: PUSH
23504: LD_INT 256
23506: EQUAL
23507: IFFALSE 23528
// SetFactoryWaypoint ( unit , x , y ) ;
23509: LD_VAR 0 2
23513: PPUSH
23514: LD_VAR 0 4
23518: PPUSH
23519: LD_VAR 0 5
23523: PPUSH
23524: CALL 21509 0 3
// if cmd = 257 then
23528: LD_VAR 0 1
23532: PUSH
23533: LD_INT 257
23535: EQUAL
23536: IFFALSE 23557
// SetWarehouseGatheringPoint ( unit , x , y ) ;
23538: LD_VAR 0 2
23542: PPUSH
23543: LD_VAR 0 4
23547: PPUSH
23548: LD_VAR 0 5
23552: PPUSH
23553: CALL 21871 0 3
// if cmd = 258 then
23557: LD_VAR 0 1
23561: PUSH
23562: LD_INT 258
23564: EQUAL
23565: IFFALSE 23589
// BurnTreeXYR ( unit , x , y , 8 ) ;
23567: LD_VAR 0 2
23571: PPUSH
23572: LD_VAR 0 4
23576: PPUSH
23577: LD_VAR 0 5
23581: PPUSH
23582: LD_INT 8
23584: PPUSH
23585: CALL 23988 0 4
// end ;
23589: LD_VAR 0 6
23593: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23594: LD_INT 0
23596: PPUSH
23597: PPUSH
23598: PPUSH
23599: PPUSH
23600: PPUSH
23601: PPUSH
23602: PPUSH
23603: PPUSH
23604: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
23605: LD_VAR 0 1
23609: PPUSH
23610: CALL_OW 302
23614: NOT
23615: PUSH
23616: LD_VAR 0 2
23620: PPUSH
23621: LD_VAR 0 3
23625: PPUSH
23626: CALL_OW 488
23630: NOT
23631: OR
23632: PUSH
23633: LD_VAR 0 4
23637: NOT
23638: OR
23639: IFFALSE 23643
// exit ;
23641: GO 23983
// list := [ ] ;
23643: LD_ADDR_VAR 0 13
23647: PUSH
23648: EMPTY
23649: ST_TO_ADDR
// if x - r < 0 then
23650: LD_VAR 0 2
23654: PUSH
23655: LD_VAR 0 4
23659: MINUS
23660: PUSH
23661: LD_INT 0
23663: LESS
23664: IFFALSE 23676
// min_x := 0 else
23666: LD_ADDR_VAR 0 7
23670: PUSH
23671: LD_INT 0
23673: ST_TO_ADDR
23674: GO 23692
// min_x := x - r ;
23676: LD_ADDR_VAR 0 7
23680: PUSH
23681: LD_VAR 0 2
23685: PUSH
23686: LD_VAR 0 4
23690: MINUS
23691: ST_TO_ADDR
// if y - r < 0 then
23692: LD_VAR 0 3
23696: PUSH
23697: LD_VAR 0 4
23701: MINUS
23702: PUSH
23703: LD_INT 0
23705: LESS
23706: IFFALSE 23718
// min_y := 0 else
23708: LD_ADDR_VAR 0 8
23712: PUSH
23713: LD_INT 0
23715: ST_TO_ADDR
23716: GO 23734
// min_y := y - r ;
23718: LD_ADDR_VAR 0 8
23722: PUSH
23723: LD_VAR 0 3
23727: PUSH
23728: LD_VAR 0 4
23732: MINUS
23733: ST_TO_ADDR
// max_x := x + r ;
23734: LD_ADDR_VAR 0 9
23738: PUSH
23739: LD_VAR 0 2
23743: PUSH
23744: LD_VAR 0 4
23748: PLUS
23749: ST_TO_ADDR
// max_y := y + r ;
23750: LD_ADDR_VAR 0 10
23754: PUSH
23755: LD_VAR 0 3
23759: PUSH
23760: LD_VAR 0 4
23764: PLUS
23765: ST_TO_ADDR
// for _x = min_x to max_x do
23766: LD_ADDR_VAR 0 11
23770: PUSH
23771: DOUBLE
23772: LD_VAR 0 7
23776: DEC
23777: ST_TO_ADDR
23778: LD_VAR 0 9
23782: PUSH
23783: FOR_TO
23784: IFFALSE 23901
// for _y = min_y to max_y do
23786: LD_ADDR_VAR 0 12
23790: PUSH
23791: DOUBLE
23792: LD_VAR 0 8
23796: DEC
23797: ST_TO_ADDR
23798: LD_VAR 0 10
23802: PUSH
23803: FOR_TO
23804: IFFALSE 23897
// begin if not ValidHex ( _x , _y ) then
23806: LD_VAR 0 11
23810: PPUSH
23811: LD_VAR 0 12
23815: PPUSH
23816: CALL_OW 488
23820: NOT
23821: IFFALSE 23825
// continue ;
23823: GO 23803
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23825: LD_VAR 0 11
23829: PPUSH
23830: LD_VAR 0 12
23834: PPUSH
23835: CALL_OW 351
23839: PUSH
23840: LD_VAR 0 11
23844: PPUSH
23845: LD_VAR 0 12
23849: PPUSH
23850: CALL_OW 554
23854: AND
23855: IFFALSE 23895
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23857: LD_ADDR_VAR 0 13
23861: PUSH
23862: LD_VAR 0 13
23866: PPUSH
23867: LD_VAR 0 13
23871: PUSH
23872: LD_INT 1
23874: PLUS
23875: PPUSH
23876: LD_VAR 0 11
23880: PUSH
23881: LD_VAR 0 12
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: PPUSH
23890: CALL_OW 2
23894: ST_TO_ADDR
// end ;
23895: GO 23803
23897: POP
23898: POP
23899: GO 23783
23901: POP
23902: POP
// if not list then
23903: LD_VAR 0 13
23907: NOT
23908: IFFALSE 23912
// exit ;
23910: GO 23983
// for i in list do
23912: LD_ADDR_VAR 0 6
23916: PUSH
23917: LD_VAR 0 13
23921: PUSH
23922: FOR_IN
23923: IFFALSE 23981
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23925: LD_VAR 0 1
23929: PPUSH
23930: LD_STRING M
23932: PUSH
23933: LD_VAR 0 6
23937: PUSH
23938: LD_INT 1
23940: ARRAY
23941: PUSH
23942: LD_VAR 0 6
23946: PUSH
23947: LD_INT 2
23949: ARRAY
23950: PUSH
23951: LD_INT 0
23953: PUSH
23954: LD_INT 0
23956: PUSH
23957: LD_INT 0
23959: PUSH
23960: LD_INT 0
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: PUSH
23972: EMPTY
23973: LIST
23974: PPUSH
23975: CALL_OW 447
23979: GO 23922
23981: POP
23982: POP
// end ;
23983: LD_VAR 0 5
23987: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
23988: LD_INT 0
23990: PPUSH
23991: PPUSH
23992: PPUSH
23993: PPUSH
23994: PPUSH
23995: PPUSH
23996: PPUSH
23997: PPUSH
23998: PPUSH
23999: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
24000: LD_VAR 0 1
24004: PPUSH
24005: CALL_OW 302
24009: NOT
24010: PUSH
24011: LD_VAR 0 2
24015: PPUSH
24016: LD_VAR 0 3
24020: PPUSH
24021: CALL_OW 488
24025: NOT
24026: OR
24027: PUSH
24028: LD_VAR 0 4
24032: NOT
24033: OR
24034: IFFALSE 24038
// exit ;
24036: GO 24551
// list := [ ] ;
24038: LD_ADDR_VAR 0 13
24042: PUSH
24043: EMPTY
24044: ST_TO_ADDR
// if x - r < 0 then
24045: LD_VAR 0 2
24049: PUSH
24050: LD_VAR 0 4
24054: MINUS
24055: PUSH
24056: LD_INT 0
24058: LESS
24059: IFFALSE 24071
// min_x := 0 else
24061: LD_ADDR_VAR 0 7
24065: PUSH
24066: LD_INT 0
24068: ST_TO_ADDR
24069: GO 24087
// min_x := x - r ;
24071: LD_ADDR_VAR 0 7
24075: PUSH
24076: LD_VAR 0 2
24080: PUSH
24081: LD_VAR 0 4
24085: MINUS
24086: ST_TO_ADDR
// if y - r < 0 then
24087: LD_VAR 0 3
24091: PUSH
24092: LD_VAR 0 4
24096: MINUS
24097: PUSH
24098: LD_INT 0
24100: LESS
24101: IFFALSE 24113
// min_y := 0 else
24103: LD_ADDR_VAR 0 8
24107: PUSH
24108: LD_INT 0
24110: ST_TO_ADDR
24111: GO 24129
// min_y := y - r ;
24113: LD_ADDR_VAR 0 8
24117: PUSH
24118: LD_VAR 0 3
24122: PUSH
24123: LD_VAR 0 4
24127: MINUS
24128: ST_TO_ADDR
// max_x := x + r ;
24129: LD_ADDR_VAR 0 9
24133: PUSH
24134: LD_VAR 0 2
24138: PUSH
24139: LD_VAR 0 4
24143: PLUS
24144: ST_TO_ADDR
// max_y := y + r ;
24145: LD_ADDR_VAR 0 10
24149: PUSH
24150: LD_VAR 0 3
24154: PUSH
24155: LD_VAR 0 4
24159: PLUS
24160: ST_TO_ADDR
// for _x = min_x to max_x do
24161: LD_ADDR_VAR 0 11
24165: PUSH
24166: DOUBLE
24167: LD_VAR 0 7
24171: DEC
24172: ST_TO_ADDR
24173: LD_VAR 0 9
24177: PUSH
24178: FOR_TO
24179: IFFALSE 24296
// for _y = min_y to max_y do
24181: LD_ADDR_VAR 0 12
24185: PUSH
24186: DOUBLE
24187: LD_VAR 0 8
24191: DEC
24192: ST_TO_ADDR
24193: LD_VAR 0 10
24197: PUSH
24198: FOR_TO
24199: IFFALSE 24292
// begin if not ValidHex ( _x , _y ) then
24201: LD_VAR 0 11
24205: PPUSH
24206: LD_VAR 0 12
24210: PPUSH
24211: CALL_OW 488
24215: NOT
24216: IFFALSE 24220
// continue ;
24218: GO 24198
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24220: LD_VAR 0 11
24224: PPUSH
24225: LD_VAR 0 12
24229: PPUSH
24230: CALL_OW 351
24234: PUSH
24235: LD_VAR 0 11
24239: PPUSH
24240: LD_VAR 0 12
24244: PPUSH
24245: CALL_OW 554
24249: AND
24250: IFFALSE 24290
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
24252: LD_ADDR_VAR 0 13
24256: PUSH
24257: LD_VAR 0 13
24261: PPUSH
24262: LD_VAR 0 13
24266: PUSH
24267: LD_INT 1
24269: PLUS
24270: PPUSH
24271: LD_VAR 0 11
24275: PUSH
24276: LD_VAR 0 12
24280: PUSH
24281: EMPTY
24282: LIST
24283: LIST
24284: PPUSH
24285: CALL_OW 2
24289: ST_TO_ADDR
// end ;
24290: GO 24198
24292: POP
24293: POP
24294: GO 24178
24296: POP
24297: POP
// if not list then
24298: LD_VAR 0 13
24302: NOT
24303: IFFALSE 24307
// exit ;
24305: GO 24551
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
24307: LD_ADDR_VAR 0 13
24311: PUSH
24312: LD_VAR 0 1
24316: PPUSH
24317: LD_VAR 0 13
24321: PPUSH
24322: LD_INT 1
24324: PPUSH
24325: LD_INT 1
24327: PPUSH
24328: CALL 33164 0 4
24332: ST_TO_ADDR
// ComStop ( flame ) ;
24333: LD_VAR 0 1
24337: PPUSH
24338: CALL_OW 141
// for i in list do
24342: LD_ADDR_VAR 0 6
24346: PUSH
24347: LD_VAR 0 13
24351: PUSH
24352: FOR_IN
24353: IFFALSE 24384
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
24355: LD_VAR 0 1
24359: PPUSH
24360: LD_VAR 0 6
24364: PUSH
24365: LD_INT 1
24367: ARRAY
24368: PPUSH
24369: LD_VAR 0 6
24373: PUSH
24374: LD_INT 2
24376: ARRAY
24377: PPUSH
24378: CALL_OW 176
24382: GO 24352
24384: POP
24385: POP
// repeat wait ( 0 0$1 ) ;
24386: LD_INT 35
24388: PPUSH
24389: CALL_OW 67
// task := GetTaskList ( flame ) ;
24393: LD_ADDR_VAR 0 14
24397: PUSH
24398: LD_VAR 0 1
24402: PPUSH
24403: CALL_OW 437
24407: ST_TO_ADDR
// if not task then
24408: LD_VAR 0 14
24412: NOT
24413: IFFALSE 24417
// exit ;
24415: GO 24551
// if task [ 1 ] [ 1 ] <> | then
24417: LD_VAR 0 14
24421: PUSH
24422: LD_INT 1
24424: ARRAY
24425: PUSH
24426: LD_INT 1
24428: ARRAY
24429: PUSH
24430: LD_STRING |
24432: NONEQUAL
24433: IFFALSE 24437
// exit ;
24435: GO 24551
// _x := task [ 1 ] [ 2 ] ;
24437: LD_ADDR_VAR 0 11
24441: PUSH
24442: LD_VAR 0 14
24446: PUSH
24447: LD_INT 1
24449: ARRAY
24450: PUSH
24451: LD_INT 2
24453: ARRAY
24454: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
24455: LD_ADDR_VAR 0 12
24459: PUSH
24460: LD_VAR 0 14
24464: PUSH
24465: LD_INT 1
24467: ARRAY
24468: PUSH
24469: LD_INT 3
24471: ARRAY
24472: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
24473: LD_VAR 0 11
24477: PPUSH
24478: LD_VAR 0 12
24482: PPUSH
24483: CALL_OW 351
24487: NOT
24488: PUSH
24489: LD_VAR 0 11
24493: PPUSH
24494: LD_VAR 0 12
24498: PPUSH
24499: CALL_OW 554
24503: NOT
24504: OR
24505: IFFALSE 24539
// begin task := Delete ( task , 1 ) ;
24507: LD_ADDR_VAR 0 14
24511: PUSH
24512: LD_VAR 0 14
24516: PPUSH
24517: LD_INT 1
24519: PPUSH
24520: CALL_OW 3
24524: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
24525: LD_VAR 0 1
24529: PPUSH
24530: LD_VAR 0 14
24534: PPUSH
24535: CALL_OW 446
// end ; until not HasTask ( flame ) ;
24539: LD_VAR 0 1
24543: PPUSH
24544: CALL_OW 314
24548: NOT
24549: IFFALSE 24386
// end ;
24551: LD_VAR 0 5
24555: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
24556: LD_EXP 90
24560: NOT
24561: IFFALSE 24611
24563: GO 24565
24565: DISABLE
// begin initHack := true ;
24566: LD_ADDR_EXP 90
24570: PUSH
24571: LD_INT 1
24573: ST_TO_ADDR
// hackTanks := [ ] ;
24574: LD_ADDR_EXP 91
24578: PUSH
24579: EMPTY
24580: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
24581: LD_ADDR_EXP 92
24585: PUSH
24586: EMPTY
24587: ST_TO_ADDR
// hackLimit := 3 ;
24588: LD_ADDR_EXP 93
24592: PUSH
24593: LD_INT 3
24595: ST_TO_ADDR
// hackDist := 12 ;
24596: LD_ADDR_EXP 94
24600: PUSH
24601: LD_INT 12
24603: ST_TO_ADDR
// hackCounter := [ ] ;
24604: LD_ADDR_EXP 95
24608: PUSH
24609: EMPTY
24610: ST_TO_ADDR
// end ;
24611: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
24612: LD_EXP 90
24616: PUSH
24617: LD_INT 34
24619: PUSH
24620: LD_INT 99
24622: PUSH
24623: EMPTY
24624: LIST
24625: LIST
24626: PPUSH
24627: CALL_OW 69
24631: AND
24632: IFFALSE 24885
24634: GO 24636
24636: DISABLE
24637: LD_INT 0
24639: PPUSH
24640: PPUSH
// begin enable ;
24641: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
24642: LD_ADDR_VAR 0 1
24646: PUSH
24647: LD_INT 34
24649: PUSH
24650: LD_INT 99
24652: PUSH
24653: EMPTY
24654: LIST
24655: LIST
24656: PPUSH
24657: CALL_OW 69
24661: PUSH
24662: FOR_IN
24663: IFFALSE 24883
// begin if not i in hackTanks then
24665: LD_VAR 0 1
24669: PUSH
24670: LD_EXP 91
24674: IN
24675: NOT
24676: IFFALSE 24759
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
24678: LD_ADDR_EXP 91
24682: PUSH
24683: LD_EXP 91
24687: PPUSH
24688: LD_EXP 91
24692: PUSH
24693: LD_INT 1
24695: PLUS
24696: PPUSH
24697: LD_VAR 0 1
24701: PPUSH
24702: CALL_OW 1
24706: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
24707: LD_ADDR_EXP 92
24711: PUSH
24712: LD_EXP 92
24716: PPUSH
24717: LD_EXP 92
24721: PUSH
24722: LD_INT 1
24724: PLUS
24725: PPUSH
24726: EMPTY
24727: PPUSH
24728: CALL_OW 1
24732: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
24733: LD_ADDR_EXP 95
24737: PUSH
24738: LD_EXP 95
24742: PPUSH
24743: LD_EXP 95
24747: PUSH
24748: LD_INT 1
24750: PLUS
24751: PPUSH
24752: EMPTY
24753: PPUSH
24754: CALL_OW 1
24758: ST_TO_ADDR
// end ; if not IsOk ( i ) then
24759: LD_VAR 0 1
24763: PPUSH
24764: CALL_OW 302
24768: NOT
24769: IFFALSE 24782
// begin HackUnlinkAll ( i ) ;
24771: LD_VAR 0 1
24775: PPUSH
24776: CALL 24888 0 1
// continue ;
24780: GO 24662
// end ; HackCheckCapturedStatus ( i ) ;
24782: LD_VAR 0 1
24786: PPUSH
24787: CALL 25331 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
24791: LD_ADDR_VAR 0 2
24795: PUSH
24796: LD_INT 81
24798: PUSH
24799: LD_VAR 0 1
24803: PPUSH
24804: CALL_OW 255
24808: PUSH
24809: EMPTY
24810: LIST
24811: LIST
24812: PUSH
24813: LD_INT 33
24815: PUSH
24816: LD_INT 3
24818: PUSH
24819: EMPTY
24820: LIST
24821: LIST
24822: PUSH
24823: LD_INT 91
24825: PUSH
24826: LD_VAR 0 1
24830: PUSH
24831: LD_EXP 94
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: LIST
24840: PUSH
24841: LD_INT 50
24843: PUSH
24844: EMPTY
24845: LIST
24846: PUSH
24847: EMPTY
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: PPUSH
24853: CALL_OW 69
24857: ST_TO_ADDR
// if not tmp then
24858: LD_VAR 0 2
24862: NOT
24863: IFFALSE 24867
// continue ;
24865: GO 24662
// HackLink ( i , tmp ) ;
24867: LD_VAR 0 1
24871: PPUSH
24872: LD_VAR 0 2
24876: PPUSH
24877: CALL 25024 0 2
// end ;
24881: GO 24662
24883: POP
24884: POP
// end ;
24885: PPOPN 2
24887: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24888: LD_INT 0
24890: PPUSH
24891: PPUSH
24892: PPUSH
// if not hack in hackTanks then
24893: LD_VAR 0 1
24897: PUSH
24898: LD_EXP 91
24902: IN
24903: NOT
24904: IFFALSE 24908
// exit ;
24906: GO 25019
// index := GetElementIndex ( hackTanks , hack ) ;
24908: LD_ADDR_VAR 0 4
24912: PUSH
24913: LD_EXP 91
24917: PPUSH
24918: LD_VAR 0 1
24922: PPUSH
24923: CALL 32461 0 2
24927: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24928: LD_EXP 92
24932: PUSH
24933: LD_VAR 0 4
24937: ARRAY
24938: IFFALSE 25019
// begin for i in hackTanksCaptured [ index ] do
24940: LD_ADDR_VAR 0 3
24944: PUSH
24945: LD_EXP 92
24949: PUSH
24950: LD_VAR 0 4
24954: ARRAY
24955: PUSH
24956: FOR_IN
24957: IFFALSE 24983
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24959: LD_VAR 0 3
24963: PUSH
24964: LD_INT 1
24966: ARRAY
24967: PPUSH
24968: LD_VAR 0 3
24972: PUSH
24973: LD_INT 2
24975: ARRAY
24976: PPUSH
24977: CALL_OW 235
24981: GO 24956
24983: POP
24984: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
24985: LD_ADDR_EXP 92
24989: PUSH
24990: LD_EXP 92
24994: PPUSH
24995: LD_VAR 0 4
24999: PPUSH
25000: EMPTY
25001: PPUSH
25002: CALL_OW 1
25006: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
25007: LD_VAR 0 1
25011: PPUSH
25012: LD_INT 0
25014: PPUSH
25015: CALL_OW 505
// end ; end ;
25019: LD_VAR 0 2
25023: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
25024: LD_INT 0
25026: PPUSH
25027: PPUSH
25028: PPUSH
// if not hack in hackTanks or not vehicles then
25029: LD_VAR 0 1
25033: PUSH
25034: LD_EXP 91
25038: IN
25039: NOT
25040: PUSH
25041: LD_VAR 0 2
25045: NOT
25046: OR
25047: IFFALSE 25051
// exit ;
25049: GO 25326
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
25051: LD_ADDR_VAR 0 2
25055: PUSH
25056: LD_VAR 0 1
25060: PPUSH
25061: LD_VAR 0 2
25065: PPUSH
25066: LD_INT 1
25068: PPUSH
25069: LD_INT 1
25071: PPUSH
25072: CALL 33111 0 4
25076: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
25077: LD_ADDR_VAR 0 5
25081: PUSH
25082: LD_EXP 91
25086: PPUSH
25087: LD_VAR 0 1
25091: PPUSH
25092: CALL 32461 0 2
25096: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
25097: LD_EXP 92
25101: PUSH
25102: LD_VAR 0 5
25106: ARRAY
25107: PUSH
25108: LD_EXP 93
25112: LESS
25113: IFFALSE 25302
// begin for i := 1 to vehicles do
25115: LD_ADDR_VAR 0 4
25119: PUSH
25120: DOUBLE
25121: LD_INT 1
25123: DEC
25124: ST_TO_ADDR
25125: LD_VAR 0 2
25129: PUSH
25130: FOR_TO
25131: IFFALSE 25300
// begin if hackTanksCaptured [ index ] = hackLimit then
25133: LD_EXP 92
25137: PUSH
25138: LD_VAR 0 5
25142: ARRAY
25143: PUSH
25144: LD_EXP 93
25148: EQUAL
25149: IFFALSE 25153
// break ;
25151: GO 25300
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
25153: LD_ADDR_EXP 95
25157: PUSH
25158: LD_EXP 95
25162: PPUSH
25163: LD_VAR 0 5
25167: PPUSH
25168: LD_EXP 95
25172: PUSH
25173: LD_VAR 0 5
25177: ARRAY
25178: PUSH
25179: LD_INT 1
25181: PLUS
25182: PPUSH
25183: CALL_OW 1
25187: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
25188: LD_ADDR_EXP 92
25192: PUSH
25193: LD_EXP 92
25197: PPUSH
25198: LD_VAR 0 5
25202: PUSH
25203: LD_EXP 92
25207: PUSH
25208: LD_VAR 0 5
25212: ARRAY
25213: PUSH
25214: LD_INT 1
25216: PLUS
25217: PUSH
25218: EMPTY
25219: LIST
25220: LIST
25221: PPUSH
25222: LD_VAR 0 2
25226: PUSH
25227: LD_VAR 0 4
25231: ARRAY
25232: PUSH
25233: LD_VAR 0 2
25237: PUSH
25238: LD_VAR 0 4
25242: ARRAY
25243: PPUSH
25244: CALL_OW 255
25248: PUSH
25249: EMPTY
25250: LIST
25251: LIST
25252: PPUSH
25253: CALL 32676 0 3
25257: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
25258: LD_VAR 0 2
25262: PUSH
25263: LD_VAR 0 4
25267: ARRAY
25268: PPUSH
25269: LD_VAR 0 1
25273: PPUSH
25274: CALL_OW 255
25278: PPUSH
25279: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
25283: LD_VAR 0 2
25287: PUSH
25288: LD_VAR 0 4
25292: ARRAY
25293: PPUSH
25294: CALL_OW 141
// end ;
25298: GO 25130
25300: POP
25301: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25302: LD_VAR 0 1
25306: PPUSH
25307: LD_EXP 92
25311: PUSH
25312: LD_VAR 0 5
25316: ARRAY
25317: PUSH
25318: LD_INT 0
25320: PLUS
25321: PPUSH
25322: CALL_OW 505
// end ;
25326: LD_VAR 0 3
25330: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
25331: LD_INT 0
25333: PPUSH
25334: PPUSH
25335: PPUSH
25336: PPUSH
// if not hack in hackTanks then
25337: LD_VAR 0 1
25341: PUSH
25342: LD_EXP 91
25346: IN
25347: NOT
25348: IFFALSE 25352
// exit ;
25350: GO 25592
// index := GetElementIndex ( hackTanks , hack ) ;
25352: LD_ADDR_VAR 0 4
25356: PUSH
25357: LD_EXP 91
25361: PPUSH
25362: LD_VAR 0 1
25366: PPUSH
25367: CALL 32461 0 2
25371: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
25372: LD_ADDR_VAR 0 3
25376: PUSH
25377: DOUBLE
25378: LD_EXP 92
25382: PUSH
25383: LD_VAR 0 4
25387: ARRAY
25388: INC
25389: ST_TO_ADDR
25390: LD_INT 1
25392: PUSH
25393: FOR_DOWNTO
25394: IFFALSE 25566
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
25396: LD_ADDR_VAR 0 5
25400: PUSH
25401: LD_EXP 92
25405: PUSH
25406: LD_VAR 0 4
25410: ARRAY
25411: PUSH
25412: LD_VAR 0 3
25416: ARRAY
25417: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
25418: LD_VAR 0 5
25422: PUSH
25423: LD_INT 1
25425: ARRAY
25426: PPUSH
25427: CALL_OW 302
25431: NOT
25432: PUSH
25433: LD_VAR 0 5
25437: PUSH
25438: LD_INT 1
25440: ARRAY
25441: PPUSH
25442: CALL_OW 255
25446: PUSH
25447: LD_VAR 0 1
25451: PPUSH
25452: CALL_OW 255
25456: NONEQUAL
25457: OR
25458: IFFALSE 25564
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
25460: LD_VAR 0 5
25464: PUSH
25465: LD_INT 1
25467: ARRAY
25468: PPUSH
25469: CALL_OW 305
25473: PUSH
25474: LD_VAR 0 5
25478: PUSH
25479: LD_INT 1
25481: ARRAY
25482: PPUSH
25483: CALL_OW 255
25487: PUSH
25488: LD_VAR 0 1
25492: PPUSH
25493: CALL_OW 255
25497: EQUAL
25498: AND
25499: IFFALSE 25523
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
25501: LD_VAR 0 5
25505: PUSH
25506: LD_INT 1
25508: ARRAY
25509: PPUSH
25510: LD_VAR 0 5
25514: PUSH
25515: LD_INT 2
25517: ARRAY
25518: PPUSH
25519: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
25523: LD_ADDR_EXP 92
25527: PUSH
25528: LD_EXP 92
25532: PPUSH
25533: LD_VAR 0 4
25537: PPUSH
25538: LD_EXP 92
25542: PUSH
25543: LD_VAR 0 4
25547: ARRAY
25548: PPUSH
25549: LD_VAR 0 3
25553: PPUSH
25554: CALL_OW 3
25558: PPUSH
25559: CALL_OW 1
25563: ST_TO_ADDR
// end ; end ;
25564: GO 25393
25566: POP
25567: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25568: LD_VAR 0 1
25572: PPUSH
25573: LD_EXP 92
25577: PUSH
25578: LD_VAR 0 4
25582: ARRAY
25583: PUSH
25584: LD_INT 0
25586: PLUS
25587: PPUSH
25588: CALL_OW 505
// end ;
25592: LD_VAR 0 2
25596: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
25597: LD_INT 0
25599: PPUSH
25600: PPUSH
25601: PPUSH
25602: PPUSH
// if not hack in hackTanks then
25603: LD_VAR 0 1
25607: PUSH
25608: LD_EXP 91
25612: IN
25613: NOT
25614: IFFALSE 25618
// exit ;
25616: GO 25703
// index := GetElementIndex ( hackTanks , hack ) ;
25618: LD_ADDR_VAR 0 5
25622: PUSH
25623: LD_EXP 91
25627: PPUSH
25628: LD_VAR 0 1
25632: PPUSH
25633: CALL 32461 0 2
25637: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
25638: LD_ADDR_VAR 0 4
25642: PUSH
25643: DOUBLE
25644: LD_INT 1
25646: DEC
25647: ST_TO_ADDR
25648: LD_EXP 92
25652: PUSH
25653: LD_VAR 0 5
25657: ARRAY
25658: PUSH
25659: FOR_TO
25660: IFFALSE 25701
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
25662: LD_EXP 92
25666: PUSH
25667: LD_VAR 0 5
25671: ARRAY
25672: PUSH
25673: LD_VAR 0 4
25677: ARRAY
25678: PUSH
25679: LD_INT 1
25681: ARRAY
25682: PUSH
25683: LD_VAR 0 2
25687: EQUAL
25688: IFFALSE 25699
// KillUnit ( vehicle ) ;
25690: LD_VAR 0 2
25694: PPUSH
25695: CALL_OW 66
25699: GO 25659
25701: POP
25702: POP
// end ;
25703: LD_VAR 0 3
25707: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
25708: LD_EXP 96
25712: NOT
25713: IFFALSE 25748
25715: GO 25717
25717: DISABLE
// begin initMiner := true ;
25718: LD_ADDR_EXP 96
25722: PUSH
25723: LD_INT 1
25725: ST_TO_ADDR
// minersList := [ ] ;
25726: LD_ADDR_EXP 97
25730: PUSH
25731: EMPTY
25732: ST_TO_ADDR
// minerMinesList := [ ] ;
25733: LD_ADDR_EXP 98
25737: PUSH
25738: EMPTY
25739: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
25740: LD_ADDR_EXP 99
25744: PUSH
25745: LD_INT 5
25747: ST_TO_ADDR
// end ;
25748: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
25749: LD_EXP 96
25753: PUSH
25754: LD_INT 34
25756: PUSH
25757: LD_INT 81
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: PPUSH
25764: CALL_OW 69
25768: AND
25769: IFFALSE 26230
25771: GO 25773
25773: DISABLE
25774: LD_INT 0
25776: PPUSH
25777: PPUSH
25778: PPUSH
25779: PPUSH
// begin enable ;
25780: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
25781: LD_ADDR_VAR 0 1
25785: PUSH
25786: LD_INT 34
25788: PUSH
25789: LD_INT 81
25791: PUSH
25792: EMPTY
25793: LIST
25794: LIST
25795: PPUSH
25796: CALL_OW 69
25800: PUSH
25801: FOR_IN
25802: IFFALSE 25874
// begin if not i in minersList then
25804: LD_VAR 0 1
25808: PUSH
25809: LD_EXP 97
25813: IN
25814: NOT
25815: IFFALSE 25872
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
25817: LD_ADDR_EXP 97
25821: PUSH
25822: LD_EXP 97
25826: PPUSH
25827: LD_EXP 97
25831: PUSH
25832: LD_INT 1
25834: PLUS
25835: PPUSH
25836: LD_VAR 0 1
25840: PPUSH
25841: CALL_OW 1
25845: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25846: LD_ADDR_EXP 98
25850: PUSH
25851: LD_EXP 98
25855: PPUSH
25856: LD_EXP 98
25860: PUSH
25861: LD_INT 1
25863: PLUS
25864: PPUSH
25865: EMPTY
25866: PPUSH
25867: CALL_OW 1
25871: ST_TO_ADDR
// end end ;
25872: GO 25801
25874: POP
25875: POP
// for i := minerMinesList downto 1 do
25876: LD_ADDR_VAR 0 1
25880: PUSH
25881: DOUBLE
25882: LD_EXP 98
25886: INC
25887: ST_TO_ADDR
25888: LD_INT 1
25890: PUSH
25891: FOR_DOWNTO
25892: IFFALSE 26228
// begin if IsLive ( minersList [ i ] ) then
25894: LD_EXP 97
25898: PUSH
25899: LD_VAR 0 1
25903: ARRAY
25904: PPUSH
25905: CALL_OW 300
25909: IFFALSE 25937
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
25911: LD_EXP 97
25915: PUSH
25916: LD_VAR 0 1
25920: ARRAY
25921: PPUSH
25922: LD_EXP 98
25926: PUSH
25927: LD_VAR 0 1
25931: ARRAY
25932: PPUSH
25933: CALL_OW 505
// if not minerMinesList [ i ] then
25937: LD_EXP 98
25941: PUSH
25942: LD_VAR 0 1
25946: ARRAY
25947: NOT
25948: IFFALSE 25952
// continue ;
25950: GO 25891
// for j := minerMinesList [ i ] downto 1 do
25952: LD_ADDR_VAR 0 2
25956: PUSH
25957: DOUBLE
25958: LD_EXP 98
25962: PUSH
25963: LD_VAR 0 1
25967: ARRAY
25968: INC
25969: ST_TO_ADDR
25970: LD_INT 1
25972: PUSH
25973: FOR_DOWNTO
25974: IFFALSE 26224
// begin side := GetSide ( minersList [ i ] ) ;
25976: LD_ADDR_VAR 0 3
25980: PUSH
25981: LD_EXP 97
25985: PUSH
25986: LD_VAR 0 1
25990: ARRAY
25991: PPUSH
25992: CALL_OW 255
25996: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
25997: LD_ADDR_VAR 0 4
26001: PUSH
26002: LD_EXP 98
26006: PUSH
26007: LD_VAR 0 1
26011: ARRAY
26012: PUSH
26013: LD_VAR 0 2
26017: ARRAY
26018: PUSH
26019: LD_INT 1
26021: ARRAY
26022: PPUSH
26023: LD_EXP 98
26027: PUSH
26028: LD_VAR 0 1
26032: ARRAY
26033: PUSH
26034: LD_VAR 0 2
26038: ARRAY
26039: PUSH
26040: LD_INT 2
26042: ARRAY
26043: PPUSH
26044: CALL_OW 428
26048: ST_TO_ADDR
// if not tmp then
26049: LD_VAR 0 4
26053: NOT
26054: IFFALSE 26058
// continue ;
26056: GO 25973
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
26058: LD_VAR 0 4
26062: PUSH
26063: LD_INT 81
26065: PUSH
26066: LD_VAR 0 3
26070: PUSH
26071: EMPTY
26072: LIST
26073: LIST
26074: PPUSH
26075: CALL_OW 69
26079: IN
26080: PUSH
26081: LD_EXP 98
26085: PUSH
26086: LD_VAR 0 1
26090: ARRAY
26091: PUSH
26092: LD_VAR 0 2
26096: ARRAY
26097: PUSH
26098: LD_INT 1
26100: ARRAY
26101: PPUSH
26102: LD_EXP 98
26106: PUSH
26107: LD_VAR 0 1
26111: ARRAY
26112: PUSH
26113: LD_VAR 0 2
26117: ARRAY
26118: PUSH
26119: LD_INT 2
26121: ARRAY
26122: PPUSH
26123: CALL_OW 458
26127: AND
26128: IFFALSE 26222
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
26130: LD_EXP 98
26134: PUSH
26135: LD_VAR 0 1
26139: ARRAY
26140: PUSH
26141: LD_VAR 0 2
26145: ARRAY
26146: PUSH
26147: LD_INT 1
26149: ARRAY
26150: PPUSH
26151: LD_EXP 98
26155: PUSH
26156: LD_VAR 0 1
26160: ARRAY
26161: PUSH
26162: LD_VAR 0 2
26166: ARRAY
26167: PUSH
26168: LD_INT 2
26170: ARRAY
26171: PPUSH
26172: LD_VAR 0 3
26176: PPUSH
26177: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
26181: LD_ADDR_EXP 98
26185: PUSH
26186: LD_EXP 98
26190: PPUSH
26191: LD_VAR 0 1
26195: PPUSH
26196: LD_EXP 98
26200: PUSH
26201: LD_VAR 0 1
26205: ARRAY
26206: PPUSH
26207: LD_VAR 0 2
26211: PPUSH
26212: CALL_OW 3
26216: PPUSH
26217: CALL_OW 1
26221: ST_TO_ADDR
// end ; end ;
26222: GO 25973
26224: POP
26225: POP
// end ;
26226: GO 25891
26228: POP
26229: POP
// end ;
26230: PPOPN 4
26232: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
26233: LD_INT 0
26235: PPUSH
26236: PPUSH
// result := false ;
26237: LD_ADDR_VAR 0 4
26241: PUSH
26242: LD_INT 0
26244: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
26245: LD_VAR 0 1
26249: PPUSH
26250: CALL_OW 264
26254: PUSH
26255: LD_INT 81
26257: EQUAL
26258: NOT
26259: IFFALSE 26263
// exit ;
26261: GO 26503
// index := GetElementIndex ( minersList , unit ) ;
26263: LD_ADDR_VAR 0 5
26267: PUSH
26268: LD_EXP 97
26272: PPUSH
26273: LD_VAR 0 1
26277: PPUSH
26278: CALL 32461 0 2
26282: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
26283: LD_EXP 98
26287: PUSH
26288: LD_VAR 0 5
26292: ARRAY
26293: PUSH
26294: LD_EXP 99
26298: GREATEREQUAL
26299: IFFALSE 26303
// exit ;
26301: GO 26503
// ComMoveXY ( unit , x , y ) ;
26303: LD_VAR 0 1
26307: PPUSH
26308: LD_VAR 0 2
26312: PPUSH
26313: LD_VAR 0 3
26317: PPUSH
26318: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26322: LD_INT 35
26324: PPUSH
26325: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
26329: LD_VAR 0 1
26333: PPUSH
26334: LD_VAR 0 2
26338: PPUSH
26339: LD_VAR 0 3
26343: PPUSH
26344: CALL 64213 0 3
26348: NOT
26349: PUSH
26350: LD_VAR 0 1
26354: PPUSH
26355: CALL_OW 314
26359: AND
26360: IFFALSE 26364
// exit ;
26362: GO 26503
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
26364: LD_VAR 0 2
26368: PPUSH
26369: LD_VAR 0 3
26373: PPUSH
26374: CALL_OW 428
26378: PUSH
26379: LD_VAR 0 1
26383: EQUAL
26384: PUSH
26385: LD_VAR 0 1
26389: PPUSH
26390: CALL_OW 314
26394: NOT
26395: AND
26396: IFFALSE 26322
// PlaySoundXY ( x , y , PlantMine ) ;
26398: LD_VAR 0 2
26402: PPUSH
26403: LD_VAR 0 3
26407: PPUSH
26408: LD_STRING PlantMine
26410: PPUSH
26411: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
26415: LD_VAR 0 2
26419: PPUSH
26420: LD_VAR 0 3
26424: PPUSH
26425: LD_VAR 0 1
26429: PPUSH
26430: CALL_OW 255
26434: PPUSH
26435: LD_INT 0
26437: PPUSH
26438: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
26442: LD_ADDR_EXP 98
26446: PUSH
26447: LD_EXP 98
26451: PPUSH
26452: LD_VAR 0 5
26456: PUSH
26457: LD_EXP 98
26461: PUSH
26462: LD_VAR 0 5
26466: ARRAY
26467: PUSH
26468: LD_INT 1
26470: PLUS
26471: PUSH
26472: EMPTY
26473: LIST
26474: LIST
26475: PPUSH
26476: LD_VAR 0 2
26480: PUSH
26481: LD_VAR 0 3
26485: PUSH
26486: EMPTY
26487: LIST
26488: LIST
26489: PPUSH
26490: CALL 32676 0 3
26494: ST_TO_ADDR
// result := true ;
26495: LD_ADDR_VAR 0 4
26499: PUSH
26500: LD_INT 1
26502: ST_TO_ADDR
// end ;
26503: LD_VAR 0 4
26507: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
26508: LD_INT 0
26510: PPUSH
26511: PPUSH
26512: PPUSH
// if not unit in minersList then
26513: LD_VAR 0 1
26517: PUSH
26518: LD_EXP 97
26522: IN
26523: NOT
26524: IFFALSE 26528
// exit ;
26526: GO 26920
// index := GetElementIndex ( minersList , unit ) ;
26528: LD_ADDR_VAR 0 6
26532: PUSH
26533: LD_EXP 97
26537: PPUSH
26538: LD_VAR 0 1
26542: PPUSH
26543: CALL 32461 0 2
26547: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
26548: LD_ADDR_VAR 0 5
26552: PUSH
26553: DOUBLE
26554: LD_EXP 98
26558: PUSH
26559: LD_VAR 0 6
26563: ARRAY
26564: INC
26565: ST_TO_ADDR
26566: LD_INT 1
26568: PUSH
26569: FOR_DOWNTO
26570: IFFALSE 26731
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
26572: LD_EXP 98
26576: PUSH
26577: LD_VAR 0 6
26581: ARRAY
26582: PUSH
26583: LD_VAR 0 5
26587: ARRAY
26588: PUSH
26589: LD_INT 1
26591: ARRAY
26592: PUSH
26593: LD_VAR 0 2
26597: EQUAL
26598: PUSH
26599: LD_EXP 98
26603: PUSH
26604: LD_VAR 0 6
26608: ARRAY
26609: PUSH
26610: LD_VAR 0 5
26614: ARRAY
26615: PUSH
26616: LD_INT 2
26618: ARRAY
26619: PUSH
26620: LD_VAR 0 3
26624: EQUAL
26625: AND
26626: IFFALSE 26729
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26628: LD_EXP 98
26632: PUSH
26633: LD_VAR 0 6
26637: ARRAY
26638: PUSH
26639: LD_VAR 0 5
26643: ARRAY
26644: PUSH
26645: LD_INT 1
26647: ARRAY
26648: PPUSH
26649: LD_EXP 98
26653: PUSH
26654: LD_VAR 0 6
26658: ARRAY
26659: PUSH
26660: LD_VAR 0 5
26664: ARRAY
26665: PUSH
26666: LD_INT 2
26668: ARRAY
26669: PPUSH
26670: LD_VAR 0 1
26674: PPUSH
26675: CALL_OW 255
26679: PPUSH
26680: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26684: LD_ADDR_EXP 98
26688: PUSH
26689: LD_EXP 98
26693: PPUSH
26694: LD_VAR 0 6
26698: PPUSH
26699: LD_EXP 98
26703: PUSH
26704: LD_VAR 0 6
26708: ARRAY
26709: PPUSH
26710: LD_VAR 0 5
26714: PPUSH
26715: CALL_OW 3
26719: PPUSH
26720: CALL_OW 1
26724: ST_TO_ADDR
// exit ;
26725: POP
26726: POP
26727: GO 26920
// end ; end ;
26729: GO 26569
26731: POP
26732: POP
// for i := minerMinesList [ index ] downto 1 do
26733: LD_ADDR_VAR 0 5
26737: PUSH
26738: DOUBLE
26739: LD_EXP 98
26743: PUSH
26744: LD_VAR 0 6
26748: ARRAY
26749: INC
26750: ST_TO_ADDR
26751: LD_INT 1
26753: PUSH
26754: FOR_DOWNTO
26755: IFFALSE 26918
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
26757: LD_EXP 98
26761: PUSH
26762: LD_VAR 0 6
26766: ARRAY
26767: PUSH
26768: LD_VAR 0 5
26772: ARRAY
26773: PUSH
26774: LD_INT 1
26776: ARRAY
26777: PPUSH
26778: LD_EXP 98
26782: PUSH
26783: LD_VAR 0 6
26787: ARRAY
26788: PUSH
26789: LD_VAR 0 5
26793: ARRAY
26794: PUSH
26795: LD_INT 2
26797: ARRAY
26798: PPUSH
26799: LD_VAR 0 2
26803: PPUSH
26804: LD_VAR 0 3
26808: PPUSH
26809: CALL_OW 298
26813: PUSH
26814: LD_INT 6
26816: LESS
26817: IFFALSE 26916
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26819: LD_EXP 98
26823: PUSH
26824: LD_VAR 0 6
26828: ARRAY
26829: PUSH
26830: LD_VAR 0 5
26834: ARRAY
26835: PUSH
26836: LD_INT 1
26838: ARRAY
26839: PPUSH
26840: LD_EXP 98
26844: PUSH
26845: LD_VAR 0 6
26849: ARRAY
26850: PUSH
26851: LD_VAR 0 5
26855: ARRAY
26856: PUSH
26857: LD_INT 2
26859: ARRAY
26860: PPUSH
26861: LD_VAR 0 1
26865: PPUSH
26866: CALL_OW 255
26870: PPUSH
26871: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26875: LD_ADDR_EXP 98
26879: PUSH
26880: LD_EXP 98
26884: PPUSH
26885: LD_VAR 0 6
26889: PPUSH
26890: LD_EXP 98
26894: PUSH
26895: LD_VAR 0 6
26899: ARRAY
26900: PPUSH
26901: LD_VAR 0 5
26905: PPUSH
26906: CALL_OW 3
26910: PPUSH
26911: CALL_OW 1
26915: ST_TO_ADDR
// end ; end ;
26916: GO 26754
26918: POP
26919: POP
// end ;
26920: LD_VAR 0 4
26924: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
26925: LD_INT 0
26927: PPUSH
26928: PPUSH
26929: PPUSH
26930: PPUSH
26931: PPUSH
26932: PPUSH
26933: PPUSH
26934: PPUSH
26935: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26936: LD_VAR 0 1
26940: PPUSH
26941: CALL_OW 264
26945: PUSH
26946: LD_INT 81
26948: EQUAL
26949: NOT
26950: PUSH
26951: LD_VAR 0 1
26955: PUSH
26956: LD_EXP 97
26960: IN
26961: NOT
26962: OR
26963: IFFALSE 26967
// exit ;
26965: GO 27289
// index := GetElementIndex ( minersList , unit ) ;
26967: LD_ADDR_VAR 0 6
26971: PUSH
26972: LD_EXP 97
26976: PPUSH
26977: LD_VAR 0 1
26981: PPUSH
26982: CALL 32461 0 2
26986: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
26987: LD_ADDR_VAR 0 8
26991: PUSH
26992: LD_EXP 99
26996: PUSH
26997: LD_EXP 98
27001: PUSH
27002: LD_VAR 0 6
27006: ARRAY
27007: MINUS
27008: ST_TO_ADDR
// if not minesFreeAmount then
27009: LD_VAR 0 8
27013: NOT
27014: IFFALSE 27018
// exit ;
27016: GO 27289
// tmp := [ ] ;
27018: LD_ADDR_VAR 0 7
27022: PUSH
27023: EMPTY
27024: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
27025: LD_ADDR_VAR 0 5
27029: PUSH
27030: DOUBLE
27031: LD_INT 1
27033: DEC
27034: ST_TO_ADDR
27035: LD_VAR 0 8
27039: PUSH
27040: FOR_TO
27041: IFFALSE 27236
// begin _d := rand ( 0 , 5 ) ;
27043: LD_ADDR_VAR 0 11
27047: PUSH
27048: LD_INT 0
27050: PPUSH
27051: LD_INT 5
27053: PPUSH
27054: CALL_OW 12
27058: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
27059: LD_ADDR_VAR 0 12
27063: PUSH
27064: LD_INT 2
27066: PPUSH
27067: LD_INT 6
27069: PPUSH
27070: CALL_OW 12
27074: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
27075: LD_ADDR_VAR 0 9
27079: PUSH
27080: LD_VAR 0 2
27084: PPUSH
27085: LD_VAR 0 11
27089: PPUSH
27090: LD_VAR 0 12
27094: PPUSH
27095: CALL_OW 272
27099: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
27100: LD_ADDR_VAR 0 10
27104: PUSH
27105: LD_VAR 0 3
27109: PPUSH
27110: LD_VAR 0 11
27114: PPUSH
27115: LD_VAR 0 12
27119: PPUSH
27120: CALL_OW 273
27124: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
27125: LD_VAR 0 9
27129: PPUSH
27130: LD_VAR 0 10
27134: PPUSH
27135: CALL_OW 488
27139: PUSH
27140: LD_VAR 0 9
27144: PUSH
27145: LD_VAR 0 10
27149: PUSH
27150: EMPTY
27151: LIST
27152: LIST
27153: PUSH
27154: LD_VAR 0 7
27158: IN
27159: NOT
27160: AND
27161: PUSH
27162: LD_VAR 0 9
27166: PPUSH
27167: LD_VAR 0 10
27171: PPUSH
27172: CALL_OW 458
27176: NOT
27177: AND
27178: IFFALSE 27220
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
27180: LD_ADDR_VAR 0 7
27184: PUSH
27185: LD_VAR 0 7
27189: PPUSH
27190: LD_VAR 0 7
27194: PUSH
27195: LD_INT 1
27197: PLUS
27198: PPUSH
27199: LD_VAR 0 9
27203: PUSH
27204: LD_VAR 0 10
27208: PUSH
27209: EMPTY
27210: LIST
27211: LIST
27212: PPUSH
27213: CALL_OW 1
27217: ST_TO_ADDR
27218: GO 27234
// i := i - 1 ;
27220: LD_ADDR_VAR 0 5
27224: PUSH
27225: LD_VAR 0 5
27229: PUSH
27230: LD_INT 1
27232: MINUS
27233: ST_TO_ADDR
// end ;
27234: GO 27040
27236: POP
27237: POP
// for i in tmp do
27238: LD_ADDR_VAR 0 5
27242: PUSH
27243: LD_VAR 0 7
27247: PUSH
27248: FOR_IN
27249: IFFALSE 27287
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
27251: LD_VAR 0 1
27255: PPUSH
27256: LD_VAR 0 5
27260: PUSH
27261: LD_INT 1
27263: ARRAY
27264: PPUSH
27265: LD_VAR 0 5
27269: PUSH
27270: LD_INT 2
27272: ARRAY
27273: PPUSH
27274: CALL 26233 0 3
27278: NOT
27279: IFFALSE 27285
// exit ;
27281: POP
27282: POP
27283: GO 27289
27285: GO 27248
27287: POP
27288: POP
// end ;
27289: LD_VAR 0 4
27293: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
27294: LD_INT 0
27296: PPUSH
27297: PPUSH
27298: PPUSH
27299: PPUSH
27300: PPUSH
27301: PPUSH
27302: PPUSH
// if not GetClass ( unit ) = class_sniper then
27303: LD_VAR 0 1
27307: PPUSH
27308: CALL_OW 257
27312: PUSH
27313: LD_INT 5
27315: EQUAL
27316: NOT
27317: IFFALSE 27321
// exit ;
27319: GO 27709
// dist := 8 ;
27321: LD_ADDR_VAR 0 5
27325: PUSH
27326: LD_INT 8
27328: ST_TO_ADDR
// viewRange := 12 ;
27329: LD_ADDR_VAR 0 7
27333: PUSH
27334: LD_INT 12
27336: ST_TO_ADDR
// side := GetSide ( unit ) ;
27337: LD_ADDR_VAR 0 6
27341: PUSH
27342: LD_VAR 0 1
27346: PPUSH
27347: CALL_OW 255
27351: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
27352: LD_INT 61
27354: PPUSH
27355: LD_VAR 0 6
27359: PPUSH
27360: CALL_OW 321
27364: PUSH
27365: LD_INT 2
27367: EQUAL
27368: IFFALSE 27378
// viewRange := 16 ;
27370: LD_ADDR_VAR 0 7
27374: PUSH
27375: LD_INT 16
27377: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
27378: LD_VAR 0 1
27382: PPUSH
27383: LD_VAR 0 2
27387: PPUSH
27388: LD_VAR 0 3
27392: PPUSH
27393: CALL_OW 297
27397: PUSH
27398: LD_VAR 0 5
27402: GREATER
27403: IFFALSE 27482
// begin ComMoveXY ( unit , x , y ) ;
27405: LD_VAR 0 1
27409: PPUSH
27410: LD_VAR 0 2
27414: PPUSH
27415: LD_VAR 0 3
27419: PPUSH
27420: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27424: LD_INT 35
27426: PPUSH
27427: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
27431: LD_VAR 0 1
27435: PPUSH
27436: LD_VAR 0 2
27440: PPUSH
27441: LD_VAR 0 3
27445: PPUSH
27446: CALL 64213 0 3
27450: NOT
27451: IFFALSE 27455
// exit ;
27453: GO 27709
// until GetDistUnitXY ( unit , x , y ) < dist ;
27455: LD_VAR 0 1
27459: PPUSH
27460: LD_VAR 0 2
27464: PPUSH
27465: LD_VAR 0 3
27469: PPUSH
27470: CALL_OW 297
27474: PUSH
27475: LD_VAR 0 5
27479: LESS
27480: IFFALSE 27424
// end ; ComTurnXY ( unit , x , y ) ;
27482: LD_VAR 0 1
27486: PPUSH
27487: LD_VAR 0 2
27491: PPUSH
27492: LD_VAR 0 3
27496: PPUSH
27497: CALL_OW 118
// wait ( 5 ) ;
27501: LD_INT 5
27503: PPUSH
27504: CALL_OW 67
// _d := GetDir ( unit ) ;
27508: LD_ADDR_VAR 0 10
27512: PUSH
27513: LD_VAR 0 1
27517: PPUSH
27518: CALL_OW 254
27522: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
27523: LD_ADDR_VAR 0 8
27527: PUSH
27528: LD_VAR 0 1
27532: PPUSH
27533: CALL_OW 250
27537: PPUSH
27538: LD_VAR 0 10
27542: PPUSH
27543: LD_VAR 0 5
27547: PPUSH
27548: CALL_OW 272
27552: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
27553: LD_ADDR_VAR 0 9
27557: PUSH
27558: LD_VAR 0 1
27562: PPUSH
27563: CALL_OW 251
27567: PPUSH
27568: LD_VAR 0 10
27572: PPUSH
27573: LD_VAR 0 5
27577: PPUSH
27578: CALL_OW 273
27582: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27583: LD_VAR 0 8
27587: PPUSH
27588: LD_VAR 0 9
27592: PPUSH
27593: CALL_OW 488
27597: NOT
27598: IFFALSE 27602
// exit ;
27600: GO 27709
// ComAnimCustom ( unit , 1 ) ;
27602: LD_VAR 0 1
27606: PPUSH
27607: LD_INT 1
27609: PPUSH
27610: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
27614: LD_VAR 0 8
27618: PPUSH
27619: LD_VAR 0 9
27623: PPUSH
27624: LD_VAR 0 6
27628: PPUSH
27629: LD_VAR 0 7
27633: PPUSH
27634: CALL_OW 330
// repeat wait ( 1 ) ;
27638: LD_INT 1
27640: PPUSH
27641: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
27645: LD_VAR 0 1
27649: PPUSH
27650: CALL_OW 316
27654: PUSH
27655: LD_VAR 0 1
27659: PPUSH
27660: CALL_OW 314
27664: OR
27665: PUSH
27666: LD_VAR 0 1
27670: PPUSH
27671: CALL_OW 302
27675: NOT
27676: OR
27677: PUSH
27678: LD_VAR 0 1
27682: PPUSH
27683: CALL_OW 301
27687: OR
27688: IFFALSE 27638
// RemoveSeeing ( _x , _y , side ) ;
27690: LD_VAR 0 8
27694: PPUSH
27695: LD_VAR 0 9
27699: PPUSH
27700: LD_VAR 0 6
27704: PPUSH
27705: CALL_OW 331
// end ; end_of_file
27709: LD_VAR 0 4
27713: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27714: LD_INT 0
27716: PPUSH
27717: PPUSH
// if exist_mode then
27718: LD_VAR 0 2
27722: IFFALSE 27747
// unit := CreateCharacter ( prefix & ident ) else
27724: LD_ADDR_VAR 0 5
27728: PUSH
27729: LD_VAR 0 3
27733: PUSH
27734: LD_VAR 0 1
27738: STR
27739: PPUSH
27740: CALL_OW 34
27744: ST_TO_ADDR
27745: GO 27762
// unit := NewCharacter ( ident ) ;
27747: LD_ADDR_VAR 0 5
27751: PUSH
27752: LD_VAR 0 1
27756: PPUSH
27757: CALL_OW 25
27761: ST_TO_ADDR
// result := unit ;
27762: LD_ADDR_VAR 0 4
27766: PUSH
27767: LD_VAR 0 5
27771: ST_TO_ADDR
// end ;
27772: LD_VAR 0 4
27776: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27777: LD_INT 0
27779: PPUSH
27780: PPUSH
// if not side or not nation then
27781: LD_VAR 0 1
27785: NOT
27786: PUSH
27787: LD_VAR 0 2
27791: NOT
27792: OR
27793: IFFALSE 27797
// exit ;
27795: GO 28565
// case nation of nation_american :
27797: LD_VAR 0 2
27801: PUSH
27802: LD_INT 1
27804: DOUBLE
27805: EQUAL
27806: IFTRUE 27810
27808: GO 28024
27810: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
27811: LD_ADDR_VAR 0 4
27815: PUSH
27816: LD_INT 35
27818: PUSH
27819: LD_INT 45
27821: PUSH
27822: LD_INT 46
27824: PUSH
27825: LD_INT 47
27827: PUSH
27828: LD_INT 82
27830: PUSH
27831: LD_INT 83
27833: PUSH
27834: LD_INT 84
27836: PUSH
27837: LD_INT 85
27839: PUSH
27840: LD_INT 86
27842: PUSH
27843: LD_INT 1
27845: PUSH
27846: LD_INT 2
27848: PUSH
27849: LD_INT 6
27851: PUSH
27852: LD_INT 15
27854: PUSH
27855: LD_INT 16
27857: PUSH
27858: LD_INT 7
27860: PUSH
27861: LD_INT 12
27863: PUSH
27864: LD_INT 13
27866: PUSH
27867: LD_INT 10
27869: PUSH
27870: LD_INT 14
27872: PUSH
27873: LD_INT 20
27875: PUSH
27876: LD_INT 21
27878: PUSH
27879: LD_INT 22
27881: PUSH
27882: LD_INT 25
27884: PUSH
27885: LD_INT 32
27887: PUSH
27888: LD_INT 27
27890: PUSH
27891: LD_INT 36
27893: PUSH
27894: LD_INT 69
27896: PUSH
27897: LD_INT 39
27899: PUSH
27900: LD_INT 34
27902: PUSH
27903: LD_INT 40
27905: PUSH
27906: LD_INT 48
27908: PUSH
27909: LD_INT 49
27911: PUSH
27912: LD_INT 50
27914: PUSH
27915: LD_INT 51
27917: PUSH
27918: LD_INT 52
27920: PUSH
27921: LD_INT 53
27923: PUSH
27924: LD_INT 54
27926: PUSH
27927: LD_INT 55
27929: PUSH
27930: LD_INT 56
27932: PUSH
27933: LD_INT 57
27935: PUSH
27936: LD_INT 58
27938: PUSH
27939: LD_INT 59
27941: PUSH
27942: LD_INT 60
27944: PUSH
27945: LD_INT 61
27947: PUSH
27948: LD_INT 62
27950: PUSH
27951: LD_INT 80
27953: PUSH
27954: LD_INT 82
27956: PUSH
27957: LD_INT 83
27959: PUSH
27960: LD_INT 84
27962: PUSH
27963: LD_INT 85
27965: PUSH
27966: LD_INT 86
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: LIST
27973: LIST
27974: LIST
27975: LIST
27976: LIST
27977: LIST
27978: LIST
27979: LIST
27980: LIST
27981: LIST
27982: LIST
27983: LIST
27984: LIST
27985: LIST
27986: LIST
27987: LIST
27988: LIST
27989: LIST
27990: LIST
27991: LIST
27992: LIST
27993: LIST
27994: LIST
27995: LIST
27996: LIST
27997: LIST
27998: LIST
27999: LIST
28000: LIST
28001: LIST
28002: LIST
28003: LIST
28004: LIST
28005: LIST
28006: LIST
28007: LIST
28008: LIST
28009: LIST
28010: LIST
28011: LIST
28012: LIST
28013: LIST
28014: LIST
28015: LIST
28016: LIST
28017: LIST
28018: LIST
28019: LIST
28020: LIST
28021: ST_TO_ADDR
28022: GO 28489
28024: LD_INT 2
28026: DOUBLE
28027: EQUAL
28028: IFTRUE 28032
28030: GO 28258
28032: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
28033: LD_ADDR_VAR 0 4
28037: PUSH
28038: LD_INT 35
28040: PUSH
28041: LD_INT 45
28043: PUSH
28044: LD_INT 46
28046: PUSH
28047: LD_INT 47
28049: PUSH
28050: LD_INT 82
28052: PUSH
28053: LD_INT 83
28055: PUSH
28056: LD_INT 84
28058: PUSH
28059: LD_INT 85
28061: PUSH
28062: LD_INT 87
28064: PUSH
28065: LD_INT 70
28067: PUSH
28068: LD_INT 1
28070: PUSH
28071: LD_INT 11
28073: PUSH
28074: LD_INT 3
28076: PUSH
28077: LD_INT 4
28079: PUSH
28080: LD_INT 5
28082: PUSH
28083: LD_INT 6
28085: PUSH
28086: LD_INT 15
28088: PUSH
28089: LD_INT 18
28091: PUSH
28092: LD_INT 7
28094: PUSH
28095: LD_INT 17
28097: PUSH
28098: LD_INT 8
28100: PUSH
28101: LD_INT 20
28103: PUSH
28104: LD_INT 21
28106: PUSH
28107: LD_INT 22
28109: PUSH
28110: LD_INT 72
28112: PUSH
28113: LD_INT 26
28115: PUSH
28116: LD_INT 69
28118: PUSH
28119: LD_INT 39
28121: PUSH
28122: LD_INT 40
28124: PUSH
28125: LD_INT 41
28127: PUSH
28128: LD_INT 42
28130: PUSH
28131: LD_INT 43
28133: PUSH
28134: LD_INT 48
28136: PUSH
28137: LD_INT 49
28139: PUSH
28140: LD_INT 50
28142: PUSH
28143: LD_INT 51
28145: PUSH
28146: LD_INT 52
28148: PUSH
28149: LD_INT 53
28151: PUSH
28152: LD_INT 54
28154: PUSH
28155: LD_INT 55
28157: PUSH
28158: LD_INT 56
28160: PUSH
28161: LD_INT 60
28163: PUSH
28164: LD_INT 61
28166: PUSH
28167: LD_INT 62
28169: PUSH
28170: LD_INT 66
28172: PUSH
28173: LD_INT 67
28175: PUSH
28176: LD_INT 68
28178: PUSH
28179: LD_INT 81
28181: PUSH
28182: LD_INT 82
28184: PUSH
28185: LD_INT 83
28187: PUSH
28188: LD_INT 84
28190: PUSH
28191: LD_INT 85
28193: PUSH
28194: LD_INT 87
28196: PUSH
28197: LD_INT 88
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: LIST
28204: LIST
28205: LIST
28206: LIST
28207: LIST
28208: LIST
28209: LIST
28210: LIST
28211: LIST
28212: LIST
28213: LIST
28214: LIST
28215: LIST
28216: LIST
28217: LIST
28218: LIST
28219: LIST
28220: LIST
28221: LIST
28222: LIST
28223: LIST
28224: LIST
28225: LIST
28226: LIST
28227: LIST
28228: LIST
28229: LIST
28230: LIST
28231: LIST
28232: LIST
28233: LIST
28234: LIST
28235: LIST
28236: LIST
28237: LIST
28238: LIST
28239: LIST
28240: LIST
28241: LIST
28242: LIST
28243: LIST
28244: LIST
28245: LIST
28246: LIST
28247: LIST
28248: LIST
28249: LIST
28250: LIST
28251: LIST
28252: LIST
28253: LIST
28254: LIST
28255: ST_TO_ADDR
28256: GO 28489
28258: LD_INT 3
28260: DOUBLE
28261: EQUAL
28262: IFTRUE 28266
28264: GO 28488
28266: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
28267: LD_ADDR_VAR 0 4
28271: PUSH
28272: LD_INT 46
28274: PUSH
28275: LD_INT 47
28277: PUSH
28278: LD_INT 1
28280: PUSH
28281: LD_INT 2
28283: PUSH
28284: LD_INT 82
28286: PUSH
28287: LD_INT 83
28289: PUSH
28290: LD_INT 84
28292: PUSH
28293: LD_INT 85
28295: PUSH
28296: LD_INT 86
28298: PUSH
28299: LD_INT 11
28301: PUSH
28302: LD_INT 9
28304: PUSH
28305: LD_INT 20
28307: PUSH
28308: LD_INT 19
28310: PUSH
28311: LD_INT 21
28313: PUSH
28314: LD_INT 24
28316: PUSH
28317: LD_INT 22
28319: PUSH
28320: LD_INT 25
28322: PUSH
28323: LD_INT 28
28325: PUSH
28326: LD_INT 29
28328: PUSH
28329: LD_INT 30
28331: PUSH
28332: LD_INT 31
28334: PUSH
28335: LD_INT 37
28337: PUSH
28338: LD_INT 38
28340: PUSH
28341: LD_INT 32
28343: PUSH
28344: LD_INT 27
28346: PUSH
28347: LD_INT 33
28349: PUSH
28350: LD_INT 69
28352: PUSH
28353: LD_INT 39
28355: PUSH
28356: LD_INT 34
28358: PUSH
28359: LD_INT 40
28361: PUSH
28362: LD_INT 71
28364: PUSH
28365: LD_INT 23
28367: PUSH
28368: LD_INT 44
28370: PUSH
28371: LD_INT 48
28373: PUSH
28374: LD_INT 49
28376: PUSH
28377: LD_INT 50
28379: PUSH
28380: LD_INT 51
28382: PUSH
28383: LD_INT 52
28385: PUSH
28386: LD_INT 53
28388: PUSH
28389: LD_INT 54
28391: PUSH
28392: LD_INT 55
28394: PUSH
28395: LD_INT 56
28397: PUSH
28398: LD_INT 57
28400: PUSH
28401: LD_INT 58
28403: PUSH
28404: LD_INT 59
28406: PUSH
28407: LD_INT 63
28409: PUSH
28410: LD_INT 64
28412: PUSH
28413: LD_INT 65
28415: PUSH
28416: LD_INT 82
28418: PUSH
28419: LD_INT 83
28421: PUSH
28422: LD_INT 84
28424: PUSH
28425: LD_INT 85
28427: PUSH
28428: LD_INT 86
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: LIST
28435: LIST
28436: LIST
28437: LIST
28438: LIST
28439: LIST
28440: LIST
28441: LIST
28442: LIST
28443: LIST
28444: LIST
28445: LIST
28446: LIST
28447: LIST
28448: LIST
28449: LIST
28450: LIST
28451: LIST
28452: LIST
28453: LIST
28454: LIST
28455: LIST
28456: LIST
28457: LIST
28458: LIST
28459: LIST
28460: LIST
28461: LIST
28462: LIST
28463: LIST
28464: LIST
28465: LIST
28466: LIST
28467: LIST
28468: LIST
28469: LIST
28470: LIST
28471: LIST
28472: LIST
28473: LIST
28474: LIST
28475: LIST
28476: LIST
28477: LIST
28478: LIST
28479: LIST
28480: LIST
28481: LIST
28482: LIST
28483: LIST
28484: LIST
28485: ST_TO_ADDR
28486: GO 28489
28488: POP
// if state > - 1 and state < 3 then
28489: LD_VAR 0 3
28493: PUSH
28494: LD_INT 1
28496: NEG
28497: GREATER
28498: PUSH
28499: LD_VAR 0 3
28503: PUSH
28504: LD_INT 3
28506: LESS
28507: AND
28508: IFFALSE 28565
// for i in result do
28510: LD_ADDR_VAR 0 5
28514: PUSH
28515: LD_VAR 0 4
28519: PUSH
28520: FOR_IN
28521: IFFALSE 28563
// if GetTech ( i , side ) <> state then
28523: LD_VAR 0 5
28527: PPUSH
28528: LD_VAR 0 1
28532: PPUSH
28533: CALL_OW 321
28537: PUSH
28538: LD_VAR 0 3
28542: NONEQUAL
28543: IFFALSE 28561
// result := result diff i ;
28545: LD_ADDR_VAR 0 4
28549: PUSH
28550: LD_VAR 0 4
28554: PUSH
28555: LD_VAR 0 5
28559: DIFF
28560: ST_TO_ADDR
28561: GO 28520
28563: POP
28564: POP
// end ;
28565: LD_VAR 0 4
28569: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
28570: LD_INT 0
28572: PPUSH
28573: PPUSH
28574: PPUSH
// result := true ;
28575: LD_ADDR_VAR 0 3
28579: PUSH
28580: LD_INT 1
28582: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
28583: LD_ADDR_VAR 0 5
28587: PUSH
28588: LD_VAR 0 2
28592: PPUSH
28593: CALL_OW 480
28597: ST_TO_ADDR
// if not tmp then
28598: LD_VAR 0 5
28602: NOT
28603: IFFALSE 28607
// exit ;
28605: GO 28656
// for i in tmp do
28607: LD_ADDR_VAR 0 4
28611: PUSH
28612: LD_VAR 0 5
28616: PUSH
28617: FOR_IN
28618: IFFALSE 28654
// if GetTech ( i , side ) <> state_researched then
28620: LD_VAR 0 4
28624: PPUSH
28625: LD_VAR 0 1
28629: PPUSH
28630: CALL_OW 321
28634: PUSH
28635: LD_INT 2
28637: NONEQUAL
28638: IFFALSE 28652
// begin result := false ;
28640: LD_ADDR_VAR 0 3
28644: PUSH
28645: LD_INT 0
28647: ST_TO_ADDR
// exit ;
28648: POP
28649: POP
28650: GO 28656
// end ;
28652: GO 28617
28654: POP
28655: POP
// end ;
28656: LD_VAR 0 3
28660: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
28661: LD_INT 0
28663: PPUSH
28664: PPUSH
28665: PPUSH
28666: PPUSH
28667: PPUSH
28668: PPUSH
28669: PPUSH
28670: PPUSH
28671: PPUSH
28672: PPUSH
28673: PPUSH
28674: PPUSH
28675: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
28676: LD_VAR 0 1
28680: NOT
28681: PUSH
28682: LD_VAR 0 1
28686: PPUSH
28687: CALL_OW 257
28691: PUSH
28692: LD_INT 9
28694: NONEQUAL
28695: OR
28696: IFFALSE 28700
// exit ;
28698: GO 29273
// side := GetSide ( unit ) ;
28700: LD_ADDR_VAR 0 9
28704: PUSH
28705: LD_VAR 0 1
28709: PPUSH
28710: CALL_OW 255
28714: ST_TO_ADDR
// tech_space := tech_spacanom ;
28715: LD_ADDR_VAR 0 12
28719: PUSH
28720: LD_INT 29
28722: ST_TO_ADDR
// tech_time := tech_taurad ;
28723: LD_ADDR_VAR 0 13
28727: PUSH
28728: LD_INT 28
28730: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28731: LD_ADDR_VAR 0 11
28735: PUSH
28736: LD_VAR 0 1
28740: PPUSH
28741: CALL_OW 310
28745: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28746: LD_VAR 0 11
28750: PPUSH
28751: CALL_OW 247
28755: PUSH
28756: LD_INT 2
28758: EQUAL
28759: IFFALSE 28763
// exit ;
28761: GO 29273
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28763: LD_ADDR_VAR 0 8
28767: PUSH
28768: LD_INT 81
28770: PUSH
28771: LD_VAR 0 9
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: PUSH
28780: LD_INT 3
28782: PUSH
28783: LD_INT 21
28785: PUSH
28786: LD_INT 3
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: PPUSH
28801: CALL_OW 69
28805: ST_TO_ADDR
// if not tmp then
28806: LD_VAR 0 8
28810: NOT
28811: IFFALSE 28815
// exit ;
28813: GO 29273
// if in_unit then
28815: LD_VAR 0 11
28819: IFFALSE 28843
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28821: LD_ADDR_VAR 0 10
28825: PUSH
28826: LD_VAR 0 8
28830: PPUSH
28831: LD_VAR 0 11
28835: PPUSH
28836: CALL_OW 74
28840: ST_TO_ADDR
28841: GO 28863
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28843: LD_ADDR_VAR 0 10
28847: PUSH
28848: LD_VAR 0 8
28852: PPUSH
28853: LD_VAR 0 1
28857: PPUSH
28858: CALL_OW 74
28862: ST_TO_ADDR
// if not enemy then
28863: LD_VAR 0 10
28867: NOT
28868: IFFALSE 28872
// exit ;
28870: GO 29273
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28872: LD_VAR 0 11
28876: PUSH
28877: LD_VAR 0 11
28881: PPUSH
28882: LD_VAR 0 10
28886: PPUSH
28887: CALL_OW 296
28891: PUSH
28892: LD_INT 13
28894: GREATER
28895: AND
28896: PUSH
28897: LD_VAR 0 1
28901: PPUSH
28902: LD_VAR 0 10
28906: PPUSH
28907: CALL_OW 296
28911: PUSH
28912: LD_INT 12
28914: GREATER
28915: OR
28916: IFFALSE 28920
// exit ;
28918: GO 29273
// missile := [ 1 ] ;
28920: LD_ADDR_VAR 0 14
28924: PUSH
28925: LD_INT 1
28927: PUSH
28928: EMPTY
28929: LIST
28930: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28931: LD_VAR 0 9
28935: PPUSH
28936: LD_VAR 0 12
28940: PPUSH
28941: CALL_OW 325
28945: IFFALSE 28974
// missile := Replace ( missile , missile + 1 , 2 ) ;
28947: LD_ADDR_VAR 0 14
28951: PUSH
28952: LD_VAR 0 14
28956: PPUSH
28957: LD_VAR 0 14
28961: PUSH
28962: LD_INT 1
28964: PLUS
28965: PPUSH
28966: LD_INT 2
28968: PPUSH
28969: CALL_OW 1
28973: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28974: LD_VAR 0 9
28978: PPUSH
28979: LD_VAR 0 13
28983: PPUSH
28984: CALL_OW 325
28988: PUSH
28989: LD_VAR 0 10
28993: PPUSH
28994: CALL_OW 255
28998: PPUSH
28999: LD_VAR 0 13
29003: PPUSH
29004: CALL_OW 325
29008: NOT
29009: AND
29010: IFFALSE 29039
// missile := Replace ( missile , missile + 1 , 3 ) ;
29012: LD_ADDR_VAR 0 14
29016: PUSH
29017: LD_VAR 0 14
29021: PPUSH
29022: LD_VAR 0 14
29026: PUSH
29027: LD_INT 1
29029: PLUS
29030: PPUSH
29031: LD_INT 3
29033: PPUSH
29034: CALL_OW 1
29038: ST_TO_ADDR
// if missile < 2 then
29039: LD_VAR 0 14
29043: PUSH
29044: LD_INT 2
29046: LESS
29047: IFFALSE 29051
// exit ;
29049: GO 29273
// x := GetX ( enemy ) ;
29051: LD_ADDR_VAR 0 4
29055: PUSH
29056: LD_VAR 0 10
29060: PPUSH
29061: CALL_OW 250
29065: ST_TO_ADDR
// y := GetY ( enemy ) ;
29066: LD_ADDR_VAR 0 5
29070: PUSH
29071: LD_VAR 0 10
29075: PPUSH
29076: CALL_OW 251
29080: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
29081: LD_ADDR_VAR 0 6
29085: PUSH
29086: LD_VAR 0 4
29090: PUSH
29091: LD_INT 1
29093: NEG
29094: PPUSH
29095: LD_INT 1
29097: PPUSH
29098: CALL_OW 12
29102: PLUS
29103: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
29104: LD_ADDR_VAR 0 7
29108: PUSH
29109: LD_VAR 0 5
29113: PUSH
29114: LD_INT 1
29116: NEG
29117: PPUSH
29118: LD_INT 1
29120: PPUSH
29121: CALL_OW 12
29125: PLUS
29126: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29127: LD_VAR 0 6
29131: PPUSH
29132: LD_VAR 0 7
29136: PPUSH
29137: CALL_OW 488
29141: NOT
29142: IFFALSE 29164
// begin _x := x ;
29144: LD_ADDR_VAR 0 6
29148: PUSH
29149: LD_VAR 0 4
29153: ST_TO_ADDR
// _y := y ;
29154: LD_ADDR_VAR 0 7
29158: PUSH
29159: LD_VAR 0 5
29163: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
29164: LD_ADDR_VAR 0 3
29168: PUSH
29169: LD_INT 1
29171: PPUSH
29172: LD_VAR 0 14
29176: PPUSH
29177: CALL_OW 12
29181: ST_TO_ADDR
// case i of 1 :
29182: LD_VAR 0 3
29186: PUSH
29187: LD_INT 1
29189: DOUBLE
29190: EQUAL
29191: IFTRUE 29195
29193: GO 29212
29195: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
29196: LD_VAR 0 1
29200: PPUSH
29201: LD_VAR 0 10
29205: PPUSH
29206: CALL_OW 115
29210: GO 29273
29212: LD_INT 2
29214: DOUBLE
29215: EQUAL
29216: IFTRUE 29220
29218: GO 29242
29220: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
29221: LD_VAR 0 1
29225: PPUSH
29226: LD_VAR 0 6
29230: PPUSH
29231: LD_VAR 0 7
29235: PPUSH
29236: CALL_OW 153
29240: GO 29273
29242: LD_INT 3
29244: DOUBLE
29245: EQUAL
29246: IFTRUE 29250
29248: GO 29272
29250: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
29251: LD_VAR 0 1
29255: PPUSH
29256: LD_VAR 0 6
29260: PPUSH
29261: LD_VAR 0 7
29265: PPUSH
29266: CALL_OW 154
29270: GO 29273
29272: POP
// end ;
29273: LD_VAR 0 2
29277: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
29278: LD_INT 0
29280: PPUSH
29281: PPUSH
29282: PPUSH
29283: PPUSH
29284: PPUSH
29285: PPUSH
// if not unit or not building then
29286: LD_VAR 0 1
29290: NOT
29291: PUSH
29292: LD_VAR 0 2
29296: NOT
29297: OR
29298: IFFALSE 29302
// exit ;
29300: GO 29460
// x := GetX ( building ) ;
29302: LD_ADDR_VAR 0 5
29306: PUSH
29307: LD_VAR 0 2
29311: PPUSH
29312: CALL_OW 250
29316: ST_TO_ADDR
// y := GetY ( building ) ;
29317: LD_ADDR_VAR 0 6
29321: PUSH
29322: LD_VAR 0 2
29326: PPUSH
29327: CALL_OW 251
29331: ST_TO_ADDR
// for i = 0 to 5 do
29332: LD_ADDR_VAR 0 4
29336: PUSH
29337: DOUBLE
29338: LD_INT 0
29340: DEC
29341: ST_TO_ADDR
29342: LD_INT 5
29344: PUSH
29345: FOR_TO
29346: IFFALSE 29458
// begin _x := ShiftX ( x , i , 3 ) ;
29348: LD_ADDR_VAR 0 7
29352: PUSH
29353: LD_VAR 0 5
29357: PPUSH
29358: LD_VAR 0 4
29362: PPUSH
29363: LD_INT 3
29365: PPUSH
29366: CALL_OW 272
29370: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
29371: LD_ADDR_VAR 0 8
29375: PUSH
29376: LD_VAR 0 6
29380: PPUSH
29381: LD_VAR 0 4
29385: PPUSH
29386: LD_INT 3
29388: PPUSH
29389: CALL_OW 273
29393: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29394: LD_VAR 0 7
29398: PPUSH
29399: LD_VAR 0 8
29403: PPUSH
29404: CALL_OW 488
29408: NOT
29409: IFFALSE 29413
// continue ;
29411: GO 29345
// if HexInfo ( _x , _y ) = 0 then
29413: LD_VAR 0 7
29417: PPUSH
29418: LD_VAR 0 8
29422: PPUSH
29423: CALL_OW 428
29427: PUSH
29428: LD_INT 0
29430: EQUAL
29431: IFFALSE 29456
// begin ComMoveXY ( unit , _x , _y ) ;
29433: LD_VAR 0 1
29437: PPUSH
29438: LD_VAR 0 7
29442: PPUSH
29443: LD_VAR 0 8
29447: PPUSH
29448: CALL_OW 111
// exit ;
29452: POP
29453: POP
29454: GO 29460
// end ; end ;
29456: GO 29345
29458: POP
29459: POP
// end ;
29460: LD_VAR 0 3
29464: RET
// export function ScanBase ( side , base_area ) ; begin
29465: LD_INT 0
29467: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
29468: LD_ADDR_VAR 0 3
29472: PUSH
29473: LD_VAR 0 2
29477: PPUSH
29478: LD_INT 81
29480: PUSH
29481: LD_VAR 0 1
29485: PUSH
29486: EMPTY
29487: LIST
29488: LIST
29489: PPUSH
29490: CALL_OW 70
29494: ST_TO_ADDR
// end ;
29495: LD_VAR 0 3
29499: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
29500: LD_INT 0
29502: PPUSH
29503: PPUSH
29504: PPUSH
29505: PPUSH
// result := false ;
29506: LD_ADDR_VAR 0 2
29510: PUSH
29511: LD_INT 0
29513: ST_TO_ADDR
// side := GetSide ( unit ) ;
29514: LD_ADDR_VAR 0 3
29518: PUSH
29519: LD_VAR 0 1
29523: PPUSH
29524: CALL_OW 255
29528: ST_TO_ADDR
// nat := GetNation ( unit ) ;
29529: LD_ADDR_VAR 0 4
29533: PUSH
29534: LD_VAR 0 1
29538: PPUSH
29539: CALL_OW 248
29543: ST_TO_ADDR
// case nat of 1 :
29544: LD_VAR 0 4
29548: PUSH
29549: LD_INT 1
29551: DOUBLE
29552: EQUAL
29553: IFTRUE 29557
29555: GO 29568
29557: POP
// tech := tech_lassight ; 2 :
29558: LD_ADDR_VAR 0 5
29562: PUSH
29563: LD_INT 12
29565: ST_TO_ADDR
29566: GO 29607
29568: LD_INT 2
29570: DOUBLE
29571: EQUAL
29572: IFTRUE 29576
29574: GO 29587
29576: POP
// tech := tech_mortar ; 3 :
29577: LD_ADDR_VAR 0 5
29581: PUSH
29582: LD_INT 41
29584: ST_TO_ADDR
29585: GO 29607
29587: LD_INT 3
29589: DOUBLE
29590: EQUAL
29591: IFTRUE 29595
29593: GO 29606
29595: POP
// tech := tech_bazooka ; end ;
29596: LD_ADDR_VAR 0 5
29600: PUSH
29601: LD_INT 44
29603: ST_TO_ADDR
29604: GO 29607
29606: POP
// if Researched ( side , tech ) then
29607: LD_VAR 0 3
29611: PPUSH
29612: LD_VAR 0 5
29616: PPUSH
29617: CALL_OW 325
29621: IFFALSE 29648
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
29623: LD_ADDR_VAR 0 2
29627: PUSH
29628: LD_INT 5
29630: PUSH
29631: LD_INT 8
29633: PUSH
29634: LD_INT 9
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: LIST
29641: PUSH
29642: LD_VAR 0 4
29646: ARRAY
29647: ST_TO_ADDR
// end ;
29648: LD_VAR 0 2
29652: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
29653: LD_INT 0
29655: PPUSH
29656: PPUSH
29657: PPUSH
// if not mines then
29658: LD_VAR 0 2
29662: NOT
29663: IFFALSE 29667
// exit ;
29665: GO 29811
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29667: LD_ADDR_VAR 0 5
29671: PUSH
29672: LD_INT 81
29674: PUSH
29675: LD_VAR 0 1
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: PUSH
29684: LD_INT 3
29686: PUSH
29687: LD_INT 21
29689: PUSH
29690: LD_INT 3
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: PUSH
29697: EMPTY
29698: LIST
29699: LIST
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: PPUSH
29705: CALL_OW 69
29709: ST_TO_ADDR
// for i in mines do
29710: LD_ADDR_VAR 0 4
29714: PUSH
29715: LD_VAR 0 2
29719: PUSH
29720: FOR_IN
29721: IFFALSE 29809
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29723: LD_VAR 0 4
29727: PUSH
29728: LD_INT 1
29730: ARRAY
29731: PPUSH
29732: LD_VAR 0 4
29736: PUSH
29737: LD_INT 2
29739: ARRAY
29740: PPUSH
29741: CALL_OW 458
29745: NOT
29746: IFFALSE 29750
// continue ;
29748: GO 29720
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29750: LD_VAR 0 4
29754: PUSH
29755: LD_INT 1
29757: ARRAY
29758: PPUSH
29759: LD_VAR 0 4
29763: PUSH
29764: LD_INT 2
29766: ARRAY
29767: PPUSH
29768: CALL_OW 428
29772: PUSH
29773: LD_VAR 0 5
29777: IN
29778: IFFALSE 29807
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29780: LD_VAR 0 4
29784: PUSH
29785: LD_INT 1
29787: ARRAY
29788: PPUSH
29789: LD_VAR 0 4
29793: PUSH
29794: LD_INT 2
29796: ARRAY
29797: PPUSH
29798: LD_VAR 0 1
29802: PPUSH
29803: CALL_OW 456
// end ;
29807: GO 29720
29809: POP
29810: POP
// end ;
29811: LD_VAR 0 3
29815: RET
// export function Count ( array ) ; begin
29816: LD_INT 0
29818: PPUSH
// result := array + 0 ;
29819: LD_ADDR_VAR 0 2
29823: PUSH
29824: LD_VAR 0 1
29828: PUSH
29829: LD_INT 0
29831: PLUS
29832: ST_TO_ADDR
// end ;
29833: LD_VAR 0 2
29837: RET
// export function IsEmpty ( building ) ; begin
29838: LD_INT 0
29840: PPUSH
// if not building then
29841: LD_VAR 0 1
29845: NOT
29846: IFFALSE 29850
// exit ;
29848: GO 29893
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29850: LD_ADDR_VAR 0 2
29854: PUSH
29855: LD_VAR 0 1
29859: PUSH
29860: LD_INT 22
29862: PUSH
29863: LD_VAR 0 1
29867: PPUSH
29868: CALL_OW 255
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: PUSH
29877: LD_INT 58
29879: PUSH
29880: EMPTY
29881: LIST
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: PPUSH
29887: CALL_OW 69
29891: IN
29892: ST_TO_ADDR
// end ;
29893: LD_VAR 0 2
29897: RET
// export function IsNotFull ( building ) ; var places ; begin
29898: LD_INT 0
29900: PPUSH
29901: PPUSH
// if not building then
29902: LD_VAR 0 1
29906: NOT
29907: IFFALSE 29911
// exit ;
29909: GO 29939
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
29911: LD_ADDR_VAR 0 2
29915: PUSH
29916: LD_VAR 0 1
29920: PPUSH
29921: LD_INT 3
29923: PUSH
29924: LD_INT 62
29926: PUSH
29927: EMPTY
29928: LIST
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: PPUSH
29934: CALL_OW 72
29938: ST_TO_ADDR
// end ;
29939: LD_VAR 0 2
29943: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29944: LD_INT 0
29946: PPUSH
29947: PPUSH
29948: PPUSH
29949: PPUSH
// tmp := [ ] ;
29950: LD_ADDR_VAR 0 3
29954: PUSH
29955: EMPTY
29956: ST_TO_ADDR
// list := [ ] ;
29957: LD_ADDR_VAR 0 5
29961: PUSH
29962: EMPTY
29963: ST_TO_ADDR
// for i = 16 to 25 do
29964: LD_ADDR_VAR 0 4
29968: PUSH
29969: DOUBLE
29970: LD_INT 16
29972: DEC
29973: ST_TO_ADDR
29974: LD_INT 25
29976: PUSH
29977: FOR_TO
29978: IFFALSE 30051
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29980: LD_ADDR_VAR 0 3
29984: PUSH
29985: LD_VAR 0 3
29989: PUSH
29990: LD_INT 22
29992: PUSH
29993: LD_VAR 0 1
29997: PPUSH
29998: CALL_OW 255
30002: PUSH
30003: EMPTY
30004: LIST
30005: LIST
30006: PUSH
30007: LD_INT 91
30009: PUSH
30010: LD_VAR 0 1
30014: PUSH
30015: LD_INT 6
30017: PUSH
30018: EMPTY
30019: LIST
30020: LIST
30021: LIST
30022: PUSH
30023: LD_INT 30
30025: PUSH
30026: LD_VAR 0 4
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: LIST
30039: PUSH
30040: EMPTY
30041: LIST
30042: PPUSH
30043: CALL_OW 69
30047: ADD
30048: ST_TO_ADDR
30049: GO 29977
30051: POP
30052: POP
// for i = 1 to tmp do
30053: LD_ADDR_VAR 0 4
30057: PUSH
30058: DOUBLE
30059: LD_INT 1
30061: DEC
30062: ST_TO_ADDR
30063: LD_VAR 0 3
30067: PUSH
30068: FOR_TO
30069: IFFALSE 30157
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
30071: LD_ADDR_VAR 0 5
30075: PUSH
30076: LD_VAR 0 5
30080: PUSH
30081: LD_VAR 0 3
30085: PUSH
30086: LD_VAR 0 4
30090: ARRAY
30091: PPUSH
30092: CALL_OW 266
30096: PUSH
30097: LD_VAR 0 3
30101: PUSH
30102: LD_VAR 0 4
30106: ARRAY
30107: PPUSH
30108: CALL_OW 250
30112: PUSH
30113: LD_VAR 0 3
30117: PUSH
30118: LD_VAR 0 4
30122: ARRAY
30123: PPUSH
30124: CALL_OW 251
30128: PUSH
30129: LD_VAR 0 3
30133: PUSH
30134: LD_VAR 0 4
30138: ARRAY
30139: PPUSH
30140: CALL_OW 254
30144: PUSH
30145: EMPTY
30146: LIST
30147: LIST
30148: LIST
30149: LIST
30150: PUSH
30151: EMPTY
30152: LIST
30153: ADD
30154: ST_TO_ADDR
30155: GO 30068
30157: POP
30158: POP
// result := list ;
30159: LD_ADDR_VAR 0 2
30163: PUSH
30164: LD_VAR 0 5
30168: ST_TO_ADDR
// end ;
30169: LD_VAR 0 2
30173: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
30174: LD_INT 0
30176: PPUSH
30177: PPUSH
30178: PPUSH
30179: PPUSH
30180: PPUSH
30181: PPUSH
30182: PPUSH
// if not factory then
30183: LD_VAR 0 1
30187: NOT
30188: IFFALSE 30192
// exit ;
30190: GO 30785
// if control = control_apeman then
30192: LD_VAR 0 4
30196: PUSH
30197: LD_INT 5
30199: EQUAL
30200: IFFALSE 30309
// begin tmp := UnitsInside ( factory ) ;
30202: LD_ADDR_VAR 0 8
30206: PUSH
30207: LD_VAR 0 1
30211: PPUSH
30212: CALL_OW 313
30216: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
30217: LD_VAR 0 8
30221: PPUSH
30222: LD_INT 25
30224: PUSH
30225: LD_INT 12
30227: PUSH
30228: EMPTY
30229: LIST
30230: LIST
30231: PPUSH
30232: CALL_OW 72
30236: NOT
30237: IFFALSE 30247
// control := control_manual ;
30239: LD_ADDR_VAR 0 4
30243: PUSH
30244: LD_INT 1
30246: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
30247: LD_ADDR_VAR 0 8
30251: PUSH
30252: LD_VAR 0 1
30256: PPUSH
30257: CALL 29944 0 1
30261: ST_TO_ADDR
// if tmp then
30262: LD_VAR 0 8
30266: IFFALSE 30309
// begin for i in tmp do
30268: LD_ADDR_VAR 0 7
30272: PUSH
30273: LD_VAR 0 8
30277: PUSH
30278: FOR_IN
30279: IFFALSE 30307
// if i [ 1 ] = b_ext_radio then
30281: LD_VAR 0 7
30285: PUSH
30286: LD_INT 1
30288: ARRAY
30289: PUSH
30290: LD_INT 22
30292: EQUAL
30293: IFFALSE 30305
// begin control := control_remote ;
30295: LD_ADDR_VAR 0 4
30299: PUSH
30300: LD_INT 2
30302: ST_TO_ADDR
// break ;
30303: GO 30307
// end ;
30305: GO 30278
30307: POP
30308: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30309: LD_VAR 0 1
30313: PPUSH
30314: LD_VAR 0 2
30318: PPUSH
30319: LD_VAR 0 3
30323: PPUSH
30324: LD_VAR 0 4
30328: PPUSH
30329: LD_VAR 0 5
30333: PPUSH
30334: CALL_OW 448
30338: IFFALSE 30373
// begin result := [ chassis , engine , control , weapon ] ;
30340: LD_ADDR_VAR 0 6
30344: PUSH
30345: LD_VAR 0 2
30349: PUSH
30350: LD_VAR 0 3
30354: PUSH
30355: LD_VAR 0 4
30359: PUSH
30360: LD_VAR 0 5
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: LIST
30369: LIST
30370: ST_TO_ADDR
// exit ;
30371: GO 30785
// end ; _chassis := AvailableChassisList ( factory ) ;
30373: LD_ADDR_VAR 0 9
30377: PUSH
30378: LD_VAR 0 1
30382: PPUSH
30383: CALL_OW 475
30387: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
30388: LD_ADDR_VAR 0 11
30392: PUSH
30393: LD_VAR 0 1
30397: PPUSH
30398: CALL_OW 476
30402: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
30403: LD_ADDR_VAR 0 12
30407: PUSH
30408: LD_VAR 0 1
30412: PPUSH
30413: CALL_OW 477
30417: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
30418: LD_ADDR_VAR 0 10
30422: PUSH
30423: LD_VAR 0 1
30427: PPUSH
30428: CALL_OW 478
30432: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
30433: LD_VAR 0 9
30437: NOT
30438: PUSH
30439: LD_VAR 0 11
30443: NOT
30444: OR
30445: PUSH
30446: LD_VAR 0 12
30450: NOT
30451: OR
30452: PUSH
30453: LD_VAR 0 10
30457: NOT
30458: OR
30459: IFFALSE 30494
// begin result := [ chassis , engine , control , weapon ] ;
30461: LD_ADDR_VAR 0 6
30465: PUSH
30466: LD_VAR 0 2
30470: PUSH
30471: LD_VAR 0 3
30475: PUSH
30476: LD_VAR 0 4
30480: PUSH
30481: LD_VAR 0 5
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: ST_TO_ADDR
// exit ;
30492: GO 30785
// end ; if not chassis in _chassis then
30494: LD_VAR 0 2
30498: PUSH
30499: LD_VAR 0 9
30503: IN
30504: NOT
30505: IFFALSE 30531
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
30507: LD_ADDR_VAR 0 2
30511: PUSH
30512: LD_VAR 0 9
30516: PUSH
30517: LD_INT 1
30519: PPUSH
30520: LD_VAR 0 9
30524: PPUSH
30525: CALL_OW 12
30529: ARRAY
30530: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
30531: LD_VAR 0 2
30535: PPUSH
30536: LD_VAR 0 3
30540: PPUSH
30541: CALL 30790 0 2
30545: NOT
30546: IFFALSE 30605
// repeat engine := _engine [ 1 ] ;
30548: LD_ADDR_VAR 0 3
30552: PUSH
30553: LD_VAR 0 11
30557: PUSH
30558: LD_INT 1
30560: ARRAY
30561: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
30562: LD_ADDR_VAR 0 11
30566: PUSH
30567: LD_VAR 0 11
30571: PPUSH
30572: LD_INT 1
30574: PPUSH
30575: CALL_OW 3
30579: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
30580: LD_VAR 0 2
30584: PPUSH
30585: LD_VAR 0 3
30589: PPUSH
30590: CALL 30790 0 2
30594: PUSH
30595: LD_VAR 0 11
30599: PUSH
30600: EMPTY
30601: EQUAL
30602: OR
30603: IFFALSE 30548
// if not control in _control then
30605: LD_VAR 0 4
30609: PUSH
30610: LD_VAR 0 12
30614: IN
30615: NOT
30616: IFFALSE 30642
// control := _control [ rand ( 1 , _control ) ] ;
30618: LD_ADDR_VAR 0 4
30622: PUSH
30623: LD_VAR 0 12
30627: PUSH
30628: LD_INT 1
30630: PPUSH
30631: LD_VAR 0 12
30635: PPUSH
30636: CALL_OW 12
30640: ARRAY
30641: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
30642: LD_VAR 0 2
30646: PPUSH
30647: LD_VAR 0 5
30651: PPUSH
30652: CALL 31010 0 2
30656: NOT
30657: IFFALSE 30716
// repeat weapon := _weapon [ 1 ] ;
30659: LD_ADDR_VAR 0 5
30663: PUSH
30664: LD_VAR 0 10
30668: PUSH
30669: LD_INT 1
30671: ARRAY
30672: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30673: LD_ADDR_VAR 0 10
30677: PUSH
30678: LD_VAR 0 10
30682: PPUSH
30683: LD_INT 1
30685: PPUSH
30686: CALL_OW 3
30690: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30691: LD_VAR 0 2
30695: PPUSH
30696: LD_VAR 0 5
30700: PPUSH
30701: CALL 31010 0 2
30705: PUSH
30706: LD_VAR 0 10
30710: PUSH
30711: EMPTY
30712: EQUAL
30713: OR
30714: IFFALSE 30659
// result := [ ] ;
30716: LD_ADDR_VAR 0 6
30720: PUSH
30721: EMPTY
30722: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30723: LD_VAR 0 1
30727: PPUSH
30728: LD_VAR 0 2
30732: PPUSH
30733: LD_VAR 0 3
30737: PPUSH
30738: LD_VAR 0 4
30742: PPUSH
30743: LD_VAR 0 5
30747: PPUSH
30748: CALL_OW 448
30752: IFFALSE 30785
// result := [ chassis , engine , control , weapon ] ;
30754: LD_ADDR_VAR 0 6
30758: PUSH
30759: LD_VAR 0 2
30763: PUSH
30764: LD_VAR 0 3
30768: PUSH
30769: LD_VAR 0 4
30773: PUSH
30774: LD_VAR 0 5
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: ST_TO_ADDR
// end ;
30785: LD_VAR 0 6
30789: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30790: LD_INT 0
30792: PPUSH
// if not chassis or not engine then
30793: LD_VAR 0 1
30797: NOT
30798: PUSH
30799: LD_VAR 0 2
30803: NOT
30804: OR
30805: IFFALSE 30809
// exit ;
30807: GO 31005
// case engine of engine_solar :
30809: LD_VAR 0 2
30813: PUSH
30814: LD_INT 2
30816: DOUBLE
30817: EQUAL
30818: IFTRUE 30822
30820: GO 30860
30822: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30823: LD_ADDR_VAR 0 3
30827: PUSH
30828: LD_INT 11
30830: PUSH
30831: LD_INT 12
30833: PUSH
30834: LD_INT 13
30836: PUSH
30837: LD_INT 14
30839: PUSH
30840: LD_INT 1
30842: PUSH
30843: LD_INT 2
30845: PUSH
30846: LD_INT 3
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: LIST
30853: LIST
30854: LIST
30855: LIST
30856: LIST
30857: ST_TO_ADDR
30858: GO 30989
30860: LD_INT 1
30862: DOUBLE
30863: EQUAL
30864: IFTRUE 30868
30866: GO 30930
30868: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30869: LD_ADDR_VAR 0 3
30873: PUSH
30874: LD_INT 11
30876: PUSH
30877: LD_INT 12
30879: PUSH
30880: LD_INT 13
30882: PUSH
30883: LD_INT 14
30885: PUSH
30886: LD_INT 1
30888: PUSH
30889: LD_INT 2
30891: PUSH
30892: LD_INT 3
30894: PUSH
30895: LD_INT 4
30897: PUSH
30898: LD_INT 5
30900: PUSH
30901: LD_INT 21
30903: PUSH
30904: LD_INT 23
30906: PUSH
30907: LD_INT 22
30909: PUSH
30910: LD_INT 24
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: LIST
30917: LIST
30918: LIST
30919: LIST
30920: LIST
30921: LIST
30922: LIST
30923: LIST
30924: LIST
30925: LIST
30926: LIST
30927: ST_TO_ADDR
30928: GO 30989
30930: LD_INT 3
30932: DOUBLE
30933: EQUAL
30934: IFTRUE 30938
30936: GO 30988
30938: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30939: LD_ADDR_VAR 0 3
30943: PUSH
30944: LD_INT 13
30946: PUSH
30947: LD_INT 14
30949: PUSH
30950: LD_INT 2
30952: PUSH
30953: LD_INT 3
30955: PUSH
30956: LD_INT 4
30958: PUSH
30959: LD_INT 5
30961: PUSH
30962: LD_INT 21
30964: PUSH
30965: LD_INT 22
30967: PUSH
30968: LD_INT 23
30970: PUSH
30971: LD_INT 24
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: LIST
30978: LIST
30979: LIST
30980: LIST
30981: LIST
30982: LIST
30983: LIST
30984: LIST
30985: ST_TO_ADDR
30986: GO 30989
30988: POP
// result := ( chassis in result ) ;
30989: LD_ADDR_VAR 0 3
30993: PUSH
30994: LD_VAR 0 1
30998: PUSH
30999: LD_VAR 0 3
31003: IN
31004: ST_TO_ADDR
// end ;
31005: LD_VAR 0 3
31009: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
31010: LD_INT 0
31012: PPUSH
// if not chassis or not weapon then
31013: LD_VAR 0 1
31017: NOT
31018: PUSH
31019: LD_VAR 0 2
31023: NOT
31024: OR
31025: IFFALSE 31029
// exit ;
31027: GO 32089
// case weapon of us_machine_gun :
31029: LD_VAR 0 2
31033: PUSH
31034: LD_INT 2
31036: DOUBLE
31037: EQUAL
31038: IFTRUE 31042
31040: GO 31072
31042: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
31043: LD_ADDR_VAR 0 3
31047: PUSH
31048: LD_INT 1
31050: PUSH
31051: LD_INT 2
31053: PUSH
31054: LD_INT 3
31056: PUSH
31057: LD_INT 4
31059: PUSH
31060: LD_INT 5
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: LIST
31067: LIST
31068: LIST
31069: ST_TO_ADDR
31070: GO 32073
31072: LD_INT 3
31074: DOUBLE
31075: EQUAL
31076: IFTRUE 31080
31078: GO 31110
31080: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
31081: LD_ADDR_VAR 0 3
31085: PUSH
31086: LD_INT 1
31088: PUSH
31089: LD_INT 2
31091: PUSH
31092: LD_INT 3
31094: PUSH
31095: LD_INT 4
31097: PUSH
31098: LD_INT 5
31100: PUSH
31101: EMPTY
31102: LIST
31103: LIST
31104: LIST
31105: LIST
31106: LIST
31107: ST_TO_ADDR
31108: GO 32073
31110: LD_INT 11
31112: DOUBLE
31113: EQUAL
31114: IFTRUE 31118
31116: GO 31148
31118: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
31119: LD_ADDR_VAR 0 3
31123: PUSH
31124: LD_INT 1
31126: PUSH
31127: LD_INT 2
31129: PUSH
31130: LD_INT 3
31132: PUSH
31133: LD_INT 4
31135: PUSH
31136: LD_INT 5
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: LIST
31143: LIST
31144: LIST
31145: ST_TO_ADDR
31146: GO 32073
31148: LD_INT 4
31150: DOUBLE
31151: EQUAL
31152: IFTRUE 31156
31154: GO 31182
31156: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
31157: LD_ADDR_VAR 0 3
31161: PUSH
31162: LD_INT 2
31164: PUSH
31165: LD_INT 3
31167: PUSH
31168: LD_INT 4
31170: PUSH
31171: LD_INT 5
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: LIST
31178: LIST
31179: ST_TO_ADDR
31180: GO 32073
31182: LD_INT 5
31184: DOUBLE
31185: EQUAL
31186: IFTRUE 31190
31188: GO 31216
31190: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
31191: LD_ADDR_VAR 0 3
31195: PUSH
31196: LD_INT 2
31198: PUSH
31199: LD_INT 3
31201: PUSH
31202: LD_INT 4
31204: PUSH
31205: LD_INT 5
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: LIST
31212: LIST
31213: ST_TO_ADDR
31214: GO 32073
31216: LD_INT 9
31218: DOUBLE
31219: EQUAL
31220: IFTRUE 31224
31222: GO 31250
31224: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
31225: LD_ADDR_VAR 0 3
31229: PUSH
31230: LD_INT 2
31232: PUSH
31233: LD_INT 3
31235: PUSH
31236: LD_INT 4
31238: PUSH
31239: LD_INT 5
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: LIST
31246: LIST
31247: ST_TO_ADDR
31248: GO 32073
31250: LD_INT 7
31252: DOUBLE
31253: EQUAL
31254: IFTRUE 31258
31256: GO 31284
31258: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
31259: LD_ADDR_VAR 0 3
31263: PUSH
31264: LD_INT 2
31266: PUSH
31267: LD_INT 3
31269: PUSH
31270: LD_INT 4
31272: PUSH
31273: LD_INT 5
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: LIST
31280: LIST
31281: ST_TO_ADDR
31282: GO 32073
31284: LD_INT 12
31286: DOUBLE
31287: EQUAL
31288: IFTRUE 31292
31290: GO 31318
31292: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
31293: LD_ADDR_VAR 0 3
31297: PUSH
31298: LD_INT 2
31300: PUSH
31301: LD_INT 3
31303: PUSH
31304: LD_INT 4
31306: PUSH
31307: LD_INT 5
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: LIST
31314: LIST
31315: ST_TO_ADDR
31316: GO 32073
31318: LD_INT 13
31320: DOUBLE
31321: EQUAL
31322: IFTRUE 31326
31324: GO 31352
31326: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
31327: LD_ADDR_VAR 0 3
31331: PUSH
31332: LD_INT 2
31334: PUSH
31335: LD_INT 3
31337: PUSH
31338: LD_INT 4
31340: PUSH
31341: LD_INT 5
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: LIST
31348: LIST
31349: ST_TO_ADDR
31350: GO 32073
31352: LD_INT 14
31354: DOUBLE
31355: EQUAL
31356: IFTRUE 31360
31358: GO 31378
31360: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
31361: LD_ADDR_VAR 0 3
31365: PUSH
31366: LD_INT 4
31368: PUSH
31369: LD_INT 5
31371: PUSH
31372: EMPTY
31373: LIST
31374: LIST
31375: ST_TO_ADDR
31376: GO 32073
31378: LD_INT 6
31380: DOUBLE
31381: EQUAL
31382: IFTRUE 31386
31384: GO 31404
31386: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
31387: LD_ADDR_VAR 0 3
31391: PUSH
31392: LD_INT 4
31394: PUSH
31395: LD_INT 5
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: ST_TO_ADDR
31402: GO 32073
31404: LD_INT 10
31406: DOUBLE
31407: EQUAL
31408: IFTRUE 31412
31410: GO 31430
31412: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
31413: LD_ADDR_VAR 0 3
31417: PUSH
31418: LD_INT 4
31420: PUSH
31421: LD_INT 5
31423: PUSH
31424: EMPTY
31425: LIST
31426: LIST
31427: ST_TO_ADDR
31428: GO 32073
31430: LD_INT 22
31432: DOUBLE
31433: EQUAL
31434: IFTRUE 31438
31436: GO 31464
31438: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
31439: LD_ADDR_VAR 0 3
31443: PUSH
31444: LD_INT 11
31446: PUSH
31447: LD_INT 12
31449: PUSH
31450: LD_INT 13
31452: PUSH
31453: LD_INT 14
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: LIST
31460: LIST
31461: ST_TO_ADDR
31462: GO 32073
31464: LD_INT 23
31466: DOUBLE
31467: EQUAL
31468: IFTRUE 31472
31470: GO 31498
31472: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
31473: LD_ADDR_VAR 0 3
31477: PUSH
31478: LD_INT 11
31480: PUSH
31481: LD_INT 12
31483: PUSH
31484: LD_INT 13
31486: PUSH
31487: LD_INT 14
31489: PUSH
31490: EMPTY
31491: LIST
31492: LIST
31493: LIST
31494: LIST
31495: ST_TO_ADDR
31496: GO 32073
31498: LD_INT 24
31500: DOUBLE
31501: EQUAL
31502: IFTRUE 31506
31504: GO 31532
31506: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
31507: LD_ADDR_VAR 0 3
31511: PUSH
31512: LD_INT 11
31514: PUSH
31515: LD_INT 12
31517: PUSH
31518: LD_INT 13
31520: PUSH
31521: LD_INT 14
31523: PUSH
31524: EMPTY
31525: LIST
31526: LIST
31527: LIST
31528: LIST
31529: ST_TO_ADDR
31530: GO 32073
31532: LD_INT 30
31534: DOUBLE
31535: EQUAL
31536: IFTRUE 31540
31538: GO 31566
31540: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
31541: LD_ADDR_VAR 0 3
31545: PUSH
31546: LD_INT 11
31548: PUSH
31549: LD_INT 12
31551: PUSH
31552: LD_INT 13
31554: PUSH
31555: LD_INT 14
31557: PUSH
31558: EMPTY
31559: LIST
31560: LIST
31561: LIST
31562: LIST
31563: ST_TO_ADDR
31564: GO 32073
31566: LD_INT 25
31568: DOUBLE
31569: EQUAL
31570: IFTRUE 31574
31572: GO 31592
31574: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
31575: LD_ADDR_VAR 0 3
31579: PUSH
31580: LD_INT 13
31582: PUSH
31583: LD_INT 14
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: ST_TO_ADDR
31590: GO 32073
31592: LD_INT 27
31594: DOUBLE
31595: EQUAL
31596: IFTRUE 31600
31598: GO 31618
31600: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
31601: LD_ADDR_VAR 0 3
31605: PUSH
31606: LD_INT 13
31608: PUSH
31609: LD_INT 14
31611: PUSH
31612: EMPTY
31613: LIST
31614: LIST
31615: ST_TO_ADDR
31616: GO 32073
31618: LD_INT 92
31620: DOUBLE
31621: EQUAL
31622: IFTRUE 31626
31624: GO 31652
31626: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
31627: LD_ADDR_VAR 0 3
31631: PUSH
31632: LD_INT 11
31634: PUSH
31635: LD_INT 12
31637: PUSH
31638: LD_INT 13
31640: PUSH
31641: LD_INT 14
31643: PUSH
31644: EMPTY
31645: LIST
31646: LIST
31647: LIST
31648: LIST
31649: ST_TO_ADDR
31650: GO 32073
31652: LD_INT 28
31654: DOUBLE
31655: EQUAL
31656: IFTRUE 31660
31658: GO 31678
31660: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31661: LD_ADDR_VAR 0 3
31665: PUSH
31666: LD_INT 13
31668: PUSH
31669: LD_INT 14
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: ST_TO_ADDR
31676: GO 32073
31678: LD_INT 29
31680: DOUBLE
31681: EQUAL
31682: IFTRUE 31686
31684: GO 31704
31686: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31687: LD_ADDR_VAR 0 3
31691: PUSH
31692: LD_INT 13
31694: PUSH
31695: LD_INT 14
31697: PUSH
31698: EMPTY
31699: LIST
31700: LIST
31701: ST_TO_ADDR
31702: GO 32073
31704: LD_INT 31
31706: DOUBLE
31707: EQUAL
31708: IFTRUE 31712
31710: GO 31730
31712: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31713: LD_ADDR_VAR 0 3
31717: PUSH
31718: LD_INT 13
31720: PUSH
31721: LD_INT 14
31723: PUSH
31724: EMPTY
31725: LIST
31726: LIST
31727: ST_TO_ADDR
31728: GO 32073
31730: LD_INT 26
31732: DOUBLE
31733: EQUAL
31734: IFTRUE 31738
31736: GO 31756
31738: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31739: LD_ADDR_VAR 0 3
31743: PUSH
31744: LD_INT 13
31746: PUSH
31747: LD_INT 14
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: ST_TO_ADDR
31754: GO 32073
31756: LD_INT 42
31758: DOUBLE
31759: EQUAL
31760: IFTRUE 31764
31762: GO 31790
31764: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31765: LD_ADDR_VAR 0 3
31769: PUSH
31770: LD_INT 21
31772: PUSH
31773: LD_INT 22
31775: PUSH
31776: LD_INT 23
31778: PUSH
31779: LD_INT 24
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: LIST
31786: LIST
31787: ST_TO_ADDR
31788: GO 32073
31790: LD_INT 43
31792: DOUBLE
31793: EQUAL
31794: IFTRUE 31798
31796: GO 31824
31798: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31799: LD_ADDR_VAR 0 3
31803: PUSH
31804: LD_INT 21
31806: PUSH
31807: LD_INT 22
31809: PUSH
31810: LD_INT 23
31812: PUSH
31813: LD_INT 24
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: ST_TO_ADDR
31822: GO 32073
31824: LD_INT 44
31826: DOUBLE
31827: EQUAL
31828: IFTRUE 31832
31830: GO 31858
31832: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31833: LD_ADDR_VAR 0 3
31837: PUSH
31838: LD_INT 21
31840: PUSH
31841: LD_INT 22
31843: PUSH
31844: LD_INT 23
31846: PUSH
31847: LD_INT 24
31849: PUSH
31850: EMPTY
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: ST_TO_ADDR
31856: GO 32073
31858: LD_INT 45
31860: DOUBLE
31861: EQUAL
31862: IFTRUE 31866
31864: GO 31892
31866: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31867: LD_ADDR_VAR 0 3
31871: PUSH
31872: LD_INT 21
31874: PUSH
31875: LD_INT 22
31877: PUSH
31878: LD_INT 23
31880: PUSH
31881: LD_INT 24
31883: PUSH
31884: EMPTY
31885: LIST
31886: LIST
31887: LIST
31888: LIST
31889: ST_TO_ADDR
31890: GO 32073
31892: LD_INT 49
31894: DOUBLE
31895: EQUAL
31896: IFTRUE 31900
31898: GO 31926
31900: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31901: LD_ADDR_VAR 0 3
31905: PUSH
31906: LD_INT 21
31908: PUSH
31909: LD_INT 22
31911: PUSH
31912: LD_INT 23
31914: PUSH
31915: LD_INT 24
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: LIST
31922: LIST
31923: ST_TO_ADDR
31924: GO 32073
31926: LD_INT 51
31928: DOUBLE
31929: EQUAL
31930: IFTRUE 31934
31932: GO 31960
31934: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31935: LD_ADDR_VAR 0 3
31939: PUSH
31940: LD_INT 21
31942: PUSH
31943: LD_INT 22
31945: PUSH
31946: LD_INT 23
31948: PUSH
31949: LD_INT 24
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: ST_TO_ADDR
31958: GO 32073
31960: LD_INT 52
31962: DOUBLE
31963: EQUAL
31964: IFTRUE 31968
31966: GO 31994
31968: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31969: LD_ADDR_VAR 0 3
31973: PUSH
31974: LD_INT 21
31976: PUSH
31977: LD_INT 22
31979: PUSH
31980: LD_INT 23
31982: PUSH
31983: LD_INT 24
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: LIST
31990: LIST
31991: ST_TO_ADDR
31992: GO 32073
31994: LD_INT 53
31996: DOUBLE
31997: EQUAL
31998: IFTRUE 32002
32000: GO 32020
32002: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
32003: LD_ADDR_VAR 0 3
32007: PUSH
32008: LD_INT 23
32010: PUSH
32011: LD_INT 24
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: ST_TO_ADDR
32018: GO 32073
32020: LD_INT 46
32022: DOUBLE
32023: EQUAL
32024: IFTRUE 32028
32026: GO 32046
32028: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
32029: LD_ADDR_VAR 0 3
32033: PUSH
32034: LD_INT 23
32036: PUSH
32037: LD_INT 24
32039: PUSH
32040: EMPTY
32041: LIST
32042: LIST
32043: ST_TO_ADDR
32044: GO 32073
32046: LD_INT 47
32048: DOUBLE
32049: EQUAL
32050: IFTRUE 32054
32052: GO 32072
32054: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32055: LD_ADDR_VAR 0 3
32059: PUSH
32060: LD_INT 23
32062: PUSH
32063: LD_INT 24
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: ST_TO_ADDR
32070: GO 32073
32072: POP
// result := ( chassis in result ) ;
32073: LD_ADDR_VAR 0 3
32077: PUSH
32078: LD_VAR 0 1
32082: PUSH
32083: LD_VAR 0 3
32087: IN
32088: ST_TO_ADDR
// end ;
32089: LD_VAR 0 3
32093: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
32094: LD_INT 0
32096: PPUSH
32097: PPUSH
32098: PPUSH
32099: PPUSH
32100: PPUSH
32101: PPUSH
32102: PPUSH
// result := array ;
32103: LD_ADDR_VAR 0 5
32107: PUSH
32108: LD_VAR 0 1
32112: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
32113: LD_VAR 0 1
32117: NOT
32118: PUSH
32119: LD_VAR 0 2
32123: NOT
32124: OR
32125: PUSH
32126: LD_VAR 0 3
32130: NOT
32131: OR
32132: PUSH
32133: LD_VAR 0 2
32137: PUSH
32138: LD_VAR 0 1
32142: GREATER
32143: OR
32144: PUSH
32145: LD_VAR 0 3
32149: PUSH
32150: LD_VAR 0 1
32154: GREATER
32155: OR
32156: IFFALSE 32160
// exit ;
32158: GO 32456
// if direction then
32160: LD_VAR 0 4
32164: IFFALSE 32228
// begin d := 1 ;
32166: LD_ADDR_VAR 0 9
32170: PUSH
32171: LD_INT 1
32173: ST_TO_ADDR
// if i_from > i_to then
32174: LD_VAR 0 2
32178: PUSH
32179: LD_VAR 0 3
32183: GREATER
32184: IFFALSE 32210
// length := ( array - i_from ) + i_to else
32186: LD_ADDR_VAR 0 11
32190: PUSH
32191: LD_VAR 0 1
32195: PUSH
32196: LD_VAR 0 2
32200: MINUS
32201: PUSH
32202: LD_VAR 0 3
32206: PLUS
32207: ST_TO_ADDR
32208: GO 32226
// length := i_to - i_from ;
32210: LD_ADDR_VAR 0 11
32214: PUSH
32215: LD_VAR 0 3
32219: PUSH
32220: LD_VAR 0 2
32224: MINUS
32225: ST_TO_ADDR
// end else
32226: GO 32289
// begin d := - 1 ;
32228: LD_ADDR_VAR 0 9
32232: PUSH
32233: LD_INT 1
32235: NEG
32236: ST_TO_ADDR
// if i_from > i_to then
32237: LD_VAR 0 2
32241: PUSH
32242: LD_VAR 0 3
32246: GREATER
32247: IFFALSE 32267
// length := i_from - i_to else
32249: LD_ADDR_VAR 0 11
32253: PUSH
32254: LD_VAR 0 2
32258: PUSH
32259: LD_VAR 0 3
32263: MINUS
32264: ST_TO_ADDR
32265: GO 32289
// length := ( array - i_to ) + i_from ;
32267: LD_ADDR_VAR 0 11
32271: PUSH
32272: LD_VAR 0 1
32276: PUSH
32277: LD_VAR 0 3
32281: MINUS
32282: PUSH
32283: LD_VAR 0 2
32287: PLUS
32288: ST_TO_ADDR
// end ; if not length then
32289: LD_VAR 0 11
32293: NOT
32294: IFFALSE 32298
// exit ;
32296: GO 32456
// tmp := array ;
32298: LD_ADDR_VAR 0 10
32302: PUSH
32303: LD_VAR 0 1
32307: ST_TO_ADDR
// for i = 1 to length do
32308: LD_ADDR_VAR 0 6
32312: PUSH
32313: DOUBLE
32314: LD_INT 1
32316: DEC
32317: ST_TO_ADDR
32318: LD_VAR 0 11
32322: PUSH
32323: FOR_TO
32324: IFFALSE 32444
// begin for j = 1 to array do
32326: LD_ADDR_VAR 0 7
32330: PUSH
32331: DOUBLE
32332: LD_INT 1
32334: DEC
32335: ST_TO_ADDR
32336: LD_VAR 0 1
32340: PUSH
32341: FOR_TO
32342: IFFALSE 32430
// begin k := j + d ;
32344: LD_ADDR_VAR 0 8
32348: PUSH
32349: LD_VAR 0 7
32353: PUSH
32354: LD_VAR 0 9
32358: PLUS
32359: ST_TO_ADDR
// if k > array then
32360: LD_VAR 0 8
32364: PUSH
32365: LD_VAR 0 1
32369: GREATER
32370: IFFALSE 32380
// k := 1 ;
32372: LD_ADDR_VAR 0 8
32376: PUSH
32377: LD_INT 1
32379: ST_TO_ADDR
// if not k then
32380: LD_VAR 0 8
32384: NOT
32385: IFFALSE 32397
// k := array ;
32387: LD_ADDR_VAR 0 8
32391: PUSH
32392: LD_VAR 0 1
32396: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
32397: LD_ADDR_VAR 0 10
32401: PUSH
32402: LD_VAR 0 10
32406: PPUSH
32407: LD_VAR 0 8
32411: PPUSH
32412: LD_VAR 0 1
32416: PUSH
32417: LD_VAR 0 7
32421: ARRAY
32422: PPUSH
32423: CALL_OW 1
32427: ST_TO_ADDR
// end ;
32428: GO 32341
32430: POP
32431: POP
// array := tmp ;
32432: LD_ADDR_VAR 0 1
32436: PUSH
32437: LD_VAR 0 10
32441: ST_TO_ADDR
// end ;
32442: GO 32323
32444: POP
32445: POP
// result := array ;
32446: LD_ADDR_VAR 0 5
32450: PUSH
32451: LD_VAR 0 1
32455: ST_TO_ADDR
// end ;
32456: LD_VAR 0 5
32460: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
32461: LD_INT 0
32463: PPUSH
32464: PPUSH
// result := 0 ;
32465: LD_ADDR_VAR 0 3
32469: PUSH
32470: LD_INT 0
32472: ST_TO_ADDR
// if not array or not value in array then
32473: LD_VAR 0 1
32477: NOT
32478: PUSH
32479: LD_VAR 0 2
32483: PUSH
32484: LD_VAR 0 1
32488: IN
32489: NOT
32490: OR
32491: IFFALSE 32495
// exit ;
32493: GO 32549
// for i = 1 to array do
32495: LD_ADDR_VAR 0 4
32499: PUSH
32500: DOUBLE
32501: LD_INT 1
32503: DEC
32504: ST_TO_ADDR
32505: LD_VAR 0 1
32509: PUSH
32510: FOR_TO
32511: IFFALSE 32547
// if value = array [ i ] then
32513: LD_VAR 0 2
32517: PUSH
32518: LD_VAR 0 1
32522: PUSH
32523: LD_VAR 0 4
32527: ARRAY
32528: EQUAL
32529: IFFALSE 32545
// begin result := i ;
32531: LD_ADDR_VAR 0 3
32535: PUSH
32536: LD_VAR 0 4
32540: ST_TO_ADDR
// exit ;
32541: POP
32542: POP
32543: GO 32549
// end ;
32545: GO 32510
32547: POP
32548: POP
// end ;
32549: LD_VAR 0 3
32553: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
32554: LD_INT 0
32556: PPUSH
// vc_chassis := chassis ;
32557: LD_ADDR_OWVAR 37
32561: PUSH
32562: LD_VAR 0 1
32566: ST_TO_ADDR
// vc_engine := engine ;
32567: LD_ADDR_OWVAR 39
32571: PUSH
32572: LD_VAR 0 2
32576: ST_TO_ADDR
// vc_control := control ;
32577: LD_ADDR_OWVAR 38
32581: PUSH
32582: LD_VAR 0 3
32586: ST_TO_ADDR
// vc_weapon := weapon ;
32587: LD_ADDR_OWVAR 40
32591: PUSH
32592: LD_VAR 0 4
32596: ST_TO_ADDR
// vc_fuel_battery := fuel ;
32597: LD_ADDR_OWVAR 41
32601: PUSH
32602: LD_VAR 0 5
32606: ST_TO_ADDR
// end ;
32607: LD_VAR 0 6
32611: RET
// export function WantPlant ( unit ) ; var task ; begin
32612: LD_INT 0
32614: PPUSH
32615: PPUSH
// result := false ;
32616: LD_ADDR_VAR 0 2
32620: PUSH
32621: LD_INT 0
32623: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32624: LD_ADDR_VAR 0 3
32628: PUSH
32629: LD_VAR 0 1
32633: PPUSH
32634: CALL_OW 437
32638: ST_TO_ADDR
// if task then
32639: LD_VAR 0 3
32643: IFFALSE 32671
// if task [ 1 ] [ 1 ] = p then
32645: LD_VAR 0 3
32649: PUSH
32650: LD_INT 1
32652: ARRAY
32653: PUSH
32654: LD_INT 1
32656: ARRAY
32657: PUSH
32658: LD_STRING p
32660: EQUAL
32661: IFFALSE 32671
// result := true ;
32663: LD_ADDR_VAR 0 2
32667: PUSH
32668: LD_INT 1
32670: ST_TO_ADDR
// end ;
32671: LD_VAR 0 2
32675: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32676: LD_INT 0
32678: PPUSH
32679: PPUSH
32680: PPUSH
32681: PPUSH
// if pos < 1 then
32682: LD_VAR 0 2
32686: PUSH
32687: LD_INT 1
32689: LESS
32690: IFFALSE 32694
// exit ;
32692: GO 32997
// if pos = 1 then
32694: LD_VAR 0 2
32698: PUSH
32699: LD_INT 1
32701: EQUAL
32702: IFFALSE 32735
// result := Replace ( arr , pos [ 1 ] , value ) else
32704: LD_ADDR_VAR 0 4
32708: PUSH
32709: LD_VAR 0 1
32713: PPUSH
32714: LD_VAR 0 2
32718: PUSH
32719: LD_INT 1
32721: ARRAY
32722: PPUSH
32723: LD_VAR 0 3
32727: PPUSH
32728: CALL_OW 1
32732: ST_TO_ADDR
32733: GO 32997
// begin tmp := arr ;
32735: LD_ADDR_VAR 0 6
32739: PUSH
32740: LD_VAR 0 1
32744: ST_TO_ADDR
// s_arr := [ tmp ] ;
32745: LD_ADDR_VAR 0 7
32749: PUSH
32750: LD_VAR 0 6
32754: PUSH
32755: EMPTY
32756: LIST
32757: ST_TO_ADDR
// for i = 1 to pos - 1 do
32758: LD_ADDR_VAR 0 5
32762: PUSH
32763: DOUBLE
32764: LD_INT 1
32766: DEC
32767: ST_TO_ADDR
32768: LD_VAR 0 2
32772: PUSH
32773: LD_INT 1
32775: MINUS
32776: PUSH
32777: FOR_TO
32778: IFFALSE 32823
// begin tmp := tmp [ pos [ i ] ] ;
32780: LD_ADDR_VAR 0 6
32784: PUSH
32785: LD_VAR 0 6
32789: PUSH
32790: LD_VAR 0 2
32794: PUSH
32795: LD_VAR 0 5
32799: ARRAY
32800: ARRAY
32801: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32802: LD_ADDR_VAR 0 7
32806: PUSH
32807: LD_VAR 0 7
32811: PUSH
32812: LD_VAR 0 6
32816: PUSH
32817: EMPTY
32818: LIST
32819: ADD
32820: ST_TO_ADDR
// end ;
32821: GO 32777
32823: POP
32824: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32825: LD_ADDR_VAR 0 6
32829: PUSH
32830: LD_VAR 0 6
32834: PPUSH
32835: LD_VAR 0 2
32839: PUSH
32840: LD_VAR 0 2
32844: ARRAY
32845: PPUSH
32846: LD_VAR 0 3
32850: PPUSH
32851: CALL_OW 1
32855: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32856: LD_ADDR_VAR 0 7
32860: PUSH
32861: LD_VAR 0 7
32865: PPUSH
32866: LD_VAR 0 7
32870: PPUSH
32871: LD_VAR 0 6
32875: PPUSH
32876: CALL_OW 1
32880: ST_TO_ADDR
// for i = s_arr downto 2 do
32881: LD_ADDR_VAR 0 5
32885: PUSH
32886: DOUBLE
32887: LD_VAR 0 7
32891: INC
32892: ST_TO_ADDR
32893: LD_INT 2
32895: PUSH
32896: FOR_DOWNTO
32897: IFFALSE 32981
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32899: LD_ADDR_VAR 0 6
32903: PUSH
32904: LD_VAR 0 7
32908: PUSH
32909: LD_VAR 0 5
32913: PUSH
32914: LD_INT 1
32916: MINUS
32917: ARRAY
32918: PPUSH
32919: LD_VAR 0 2
32923: PUSH
32924: LD_VAR 0 5
32928: PUSH
32929: LD_INT 1
32931: MINUS
32932: ARRAY
32933: PPUSH
32934: LD_VAR 0 7
32938: PUSH
32939: LD_VAR 0 5
32943: ARRAY
32944: PPUSH
32945: CALL_OW 1
32949: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32950: LD_ADDR_VAR 0 7
32954: PUSH
32955: LD_VAR 0 7
32959: PPUSH
32960: LD_VAR 0 5
32964: PUSH
32965: LD_INT 1
32967: MINUS
32968: PPUSH
32969: LD_VAR 0 6
32973: PPUSH
32974: CALL_OW 1
32978: ST_TO_ADDR
// end ;
32979: GO 32896
32981: POP
32982: POP
// result := s_arr [ 1 ] ;
32983: LD_ADDR_VAR 0 4
32987: PUSH
32988: LD_VAR 0 7
32992: PUSH
32993: LD_INT 1
32995: ARRAY
32996: ST_TO_ADDR
// end ; end ;
32997: LD_VAR 0 4
33001: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
33002: LD_INT 0
33004: PPUSH
33005: PPUSH
// if not list then
33006: LD_VAR 0 1
33010: NOT
33011: IFFALSE 33015
// exit ;
33013: GO 33106
// i := list [ pos1 ] ;
33015: LD_ADDR_VAR 0 5
33019: PUSH
33020: LD_VAR 0 1
33024: PUSH
33025: LD_VAR 0 2
33029: ARRAY
33030: ST_TO_ADDR
// if not i then
33031: LD_VAR 0 5
33035: NOT
33036: IFFALSE 33040
// exit ;
33038: GO 33106
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
33040: LD_ADDR_VAR 0 1
33044: PUSH
33045: LD_VAR 0 1
33049: PPUSH
33050: LD_VAR 0 2
33054: PPUSH
33055: LD_VAR 0 1
33059: PUSH
33060: LD_VAR 0 3
33064: ARRAY
33065: PPUSH
33066: CALL_OW 1
33070: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
33071: LD_ADDR_VAR 0 1
33075: PUSH
33076: LD_VAR 0 1
33080: PPUSH
33081: LD_VAR 0 3
33085: PPUSH
33086: LD_VAR 0 5
33090: PPUSH
33091: CALL_OW 1
33095: ST_TO_ADDR
// result := list ;
33096: LD_ADDR_VAR 0 4
33100: PUSH
33101: LD_VAR 0 1
33105: ST_TO_ADDR
// end ;
33106: LD_VAR 0 4
33110: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
33111: LD_INT 0
33113: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
33114: LD_ADDR_VAR 0 5
33118: PUSH
33119: LD_VAR 0 1
33123: PPUSH
33124: CALL_OW 250
33128: PPUSH
33129: LD_VAR 0 1
33133: PPUSH
33134: CALL_OW 251
33138: PPUSH
33139: LD_VAR 0 2
33143: PPUSH
33144: LD_VAR 0 3
33148: PPUSH
33149: LD_VAR 0 4
33153: PPUSH
33154: CALL 33532 0 5
33158: ST_TO_ADDR
// end ;
33159: LD_VAR 0 5
33163: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
33164: LD_INT 0
33166: PPUSH
33167: PPUSH
33168: PPUSH
33169: PPUSH
// if not list or not unit then
33170: LD_VAR 0 2
33174: NOT
33175: PUSH
33176: LD_VAR 0 1
33180: NOT
33181: OR
33182: IFFALSE 33186
// exit ;
33184: GO 33527
// result := [ ] ;
33186: LD_ADDR_VAR 0 5
33190: PUSH
33191: EMPTY
33192: ST_TO_ADDR
// for i in list do
33193: LD_ADDR_VAR 0 6
33197: PUSH
33198: LD_VAR 0 2
33202: PUSH
33203: FOR_IN
33204: IFFALSE 33422
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
33206: LD_ADDR_VAR 0 8
33210: PUSH
33211: LD_VAR 0 1
33215: PPUSH
33216: LD_VAR 0 6
33220: PUSH
33221: LD_INT 1
33223: ARRAY
33224: PPUSH
33225: LD_VAR 0 6
33229: PUSH
33230: LD_INT 2
33232: ARRAY
33233: PPUSH
33234: CALL_OW 297
33238: ST_TO_ADDR
// if not Count ( result ) then
33239: LD_VAR 0 5
33243: PPUSH
33244: CALL 29816 0 1
33248: NOT
33249: IFFALSE 33282
// begin result := Join ( result , [ i , tmp ] ) ;
33251: LD_ADDR_VAR 0 5
33255: PUSH
33256: LD_VAR 0 5
33260: PPUSH
33261: LD_VAR 0 6
33265: PUSH
33266: LD_VAR 0 8
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: PPUSH
33275: CALL 65416 0 2
33279: ST_TO_ADDR
// continue ;
33280: GO 33203
// end ; if result [ result ] [ 2 ] <= tmp then
33282: LD_VAR 0 5
33286: PUSH
33287: LD_VAR 0 5
33291: ARRAY
33292: PUSH
33293: LD_INT 2
33295: ARRAY
33296: PUSH
33297: LD_VAR 0 8
33301: LESSEQUAL
33302: IFFALSE 33335
// result := Join ( result , [ i , tmp ] ) else
33304: LD_ADDR_VAR 0 5
33308: PUSH
33309: LD_VAR 0 5
33313: PPUSH
33314: LD_VAR 0 6
33318: PUSH
33319: LD_VAR 0 8
33323: PUSH
33324: EMPTY
33325: LIST
33326: LIST
33327: PPUSH
33328: CALL 65416 0 2
33332: ST_TO_ADDR
33333: GO 33420
// begin for j := 1 to Count ( result ) do
33335: LD_ADDR_VAR 0 7
33339: PUSH
33340: DOUBLE
33341: LD_INT 1
33343: DEC
33344: ST_TO_ADDR
33345: LD_VAR 0 5
33349: PPUSH
33350: CALL 29816 0 1
33354: PUSH
33355: FOR_TO
33356: IFFALSE 33418
// begin if tmp < result [ j ] [ 2 ] then
33358: LD_VAR 0 8
33362: PUSH
33363: LD_VAR 0 5
33367: PUSH
33368: LD_VAR 0 7
33372: ARRAY
33373: PUSH
33374: LD_INT 2
33376: ARRAY
33377: LESS
33378: IFFALSE 33416
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33380: LD_ADDR_VAR 0 5
33384: PUSH
33385: LD_VAR 0 5
33389: PPUSH
33390: LD_VAR 0 7
33394: PPUSH
33395: LD_VAR 0 6
33399: PUSH
33400: LD_VAR 0 8
33404: PUSH
33405: EMPTY
33406: LIST
33407: LIST
33408: PPUSH
33409: CALL_OW 2
33413: ST_TO_ADDR
// break ;
33414: GO 33418
// end ; end ;
33416: GO 33355
33418: POP
33419: POP
// end ; end ;
33420: GO 33203
33422: POP
33423: POP
// if result and not asc then
33424: LD_VAR 0 5
33428: PUSH
33429: LD_VAR 0 3
33433: NOT
33434: AND
33435: IFFALSE 33452
// result := ReverseArray ( result ) ;
33437: LD_ADDR_VAR 0 5
33441: PUSH
33442: LD_VAR 0 5
33446: PPUSH
33447: CALL 60692 0 1
33451: ST_TO_ADDR
// tmp := [ ] ;
33452: LD_ADDR_VAR 0 8
33456: PUSH
33457: EMPTY
33458: ST_TO_ADDR
// if mode then
33459: LD_VAR 0 4
33463: IFFALSE 33527
// begin for i := 1 to result do
33465: LD_ADDR_VAR 0 6
33469: PUSH
33470: DOUBLE
33471: LD_INT 1
33473: DEC
33474: ST_TO_ADDR
33475: LD_VAR 0 5
33479: PUSH
33480: FOR_TO
33481: IFFALSE 33515
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
33483: LD_ADDR_VAR 0 8
33487: PUSH
33488: LD_VAR 0 8
33492: PPUSH
33493: LD_VAR 0 5
33497: PUSH
33498: LD_VAR 0 6
33502: ARRAY
33503: PUSH
33504: LD_INT 1
33506: ARRAY
33507: PPUSH
33508: CALL 65416 0 2
33512: ST_TO_ADDR
33513: GO 33480
33515: POP
33516: POP
// result := tmp ;
33517: LD_ADDR_VAR 0 5
33521: PUSH
33522: LD_VAR 0 8
33526: ST_TO_ADDR
// end ; end ;
33527: LD_VAR 0 5
33531: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
33532: LD_INT 0
33534: PPUSH
33535: PPUSH
33536: PPUSH
33537: PPUSH
// if not list then
33538: LD_VAR 0 3
33542: NOT
33543: IFFALSE 33547
// exit ;
33545: GO 33935
// result := [ ] ;
33547: LD_ADDR_VAR 0 6
33551: PUSH
33552: EMPTY
33553: ST_TO_ADDR
// for i in list do
33554: LD_ADDR_VAR 0 7
33558: PUSH
33559: LD_VAR 0 3
33563: PUSH
33564: FOR_IN
33565: IFFALSE 33767
// begin tmp := GetDistUnitXY ( i , x , y ) ;
33567: LD_ADDR_VAR 0 9
33571: PUSH
33572: LD_VAR 0 7
33576: PPUSH
33577: LD_VAR 0 1
33581: PPUSH
33582: LD_VAR 0 2
33586: PPUSH
33587: CALL_OW 297
33591: ST_TO_ADDR
// if not result then
33592: LD_VAR 0 6
33596: NOT
33597: IFFALSE 33623
// result := [ [ i , tmp ] ] else
33599: LD_ADDR_VAR 0 6
33603: PUSH
33604: LD_VAR 0 7
33608: PUSH
33609: LD_VAR 0 9
33613: PUSH
33614: EMPTY
33615: LIST
33616: LIST
33617: PUSH
33618: EMPTY
33619: LIST
33620: ST_TO_ADDR
33621: GO 33765
// begin if result [ result ] [ 2 ] < tmp then
33623: LD_VAR 0 6
33627: PUSH
33628: LD_VAR 0 6
33632: ARRAY
33633: PUSH
33634: LD_INT 2
33636: ARRAY
33637: PUSH
33638: LD_VAR 0 9
33642: LESS
33643: IFFALSE 33685
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
33645: LD_ADDR_VAR 0 6
33649: PUSH
33650: LD_VAR 0 6
33654: PPUSH
33655: LD_VAR 0 6
33659: PUSH
33660: LD_INT 1
33662: PLUS
33663: PPUSH
33664: LD_VAR 0 7
33668: PUSH
33669: LD_VAR 0 9
33673: PUSH
33674: EMPTY
33675: LIST
33676: LIST
33677: PPUSH
33678: CALL_OW 2
33682: ST_TO_ADDR
33683: GO 33765
// for j = 1 to result do
33685: LD_ADDR_VAR 0 8
33689: PUSH
33690: DOUBLE
33691: LD_INT 1
33693: DEC
33694: ST_TO_ADDR
33695: LD_VAR 0 6
33699: PUSH
33700: FOR_TO
33701: IFFALSE 33763
// begin if tmp < result [ j ] [ 2 ] then
33703: LD_VAR 0 9
33707: PUSH
33708: LD_VAR 0 6
33712: PUSH
33713: LD_VAR 0 8
33717: ARRAY
33718: PUSH
33719: LD_INT 2
33721: ARRAY
33722: LESS
33723: IFFALSE 33761
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33725: LD_ADDR_VAR 0 6
33729: PUSH
33730: LD_VAR 0 6
33734: PPUSH
33735: LD_VAR 0 8
33739: PPUSH
33740: LD_VAR 0 7
33744: PUSH
33745: LD_VAR 0 9
33749: PUSH
33750: EMPTY
33751: LIST
33752: LIST
33753: PPUSH
33754: CALL_OW 2
33758: ST_TO_ADDR
// break ;
33759: GO 33763
// end ; end ;
33761: GO 33700
33763: POP
33764: POP
// end ; end ;
33765: GO 33564
33767: POP
33768: POP
// if result and not asc then
33769: LD_VAR 0 6
33773: PUSH
33774: LD_VAR 0 4
33778: NOT
33779: AND
33780: IFFALSE 33855
// begin tmp := result ;
33782: LD_ADDR_VAR 0 9
33786: PUSH
33787: LD_VAR 0 6
33791: ST_TO_ADDR
// for i = tmp downto 1 do
33792: LD_ADDR_VAR 0 7
33796: PUSH
33797: DOUBLE
33798: LD_VAR 0 9
33802: INC
33803: ST_TO_ADDR
33804: LD_INT 1
33806: PUSH
33807: FOR_DOWNTO
33808: IFFALSE 33853
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33810: LD_ADDR_VAR 0 6
33814: PUSH
33815: LD_VAR 0 6
33819: PPUSH
33820: LD_VAR 0 9
33824: PUSH
33825: LD_VAR 0 7
33829: MINUS
33830: PUSH
33831: LD_INT 1
33833: PLUS
33834: PPUSH
33835: LD_VAR 0 9
33839: PUSH
33840: LD_VAR 0 7
33844: ARRAY
33845: PPUSH
33846: CALL_OW 1
33850: ST_TO_ADDR
33851: GO 33807
33853: POP
33854: POP
// end ; tmp := [ ] ;
33855: LD_ADDR_VAR 0 9
33859: PUSH
33860: EMPTY
33861: ST_TO_ADDR
// if mode then
33862: LD_VAR 0 5
33866: IFFALSE 33935
// begin for i = 1 to result do
33868: LD_ADDR_VAR 0 7
33872: PUSH
33873: DOUBLE
33874: LD_INT 1
33876: DEC
33877: ST_TO_ADDR
33878: LD_VAR 0 6
33882: PUSH
33883: FOR_TO
33884: IFFALSE 33923
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
33886: LD_ADDR_VAR 0 9
33890: PUSH
33891: LD_VAR 0 9
33895: PPUSH
33896: LD_VAR 0 7
33900: PPUSH
33901: LD_VAR 0 6
33905: PUSH
33906: LD_VAR 0 7
33910: ARRAY
33911: PUSH
33912: LD_INT 1
33914: ARRAY
33915: PPUSH
33916: CALL_OW 1
33920: ST_TO_ADDR
33921: GO 33883
33923: POP
33924: POP
// result := tmp ;
33925: LD_ADDR_VAR 0 6
33929: PUSH
33930: LD_VAR 0 9
33934: ST_TO_ADDR
// end ; end ;
33935: LD_VAR 0 6
33939: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33940: LD_INT 0
33942: PPUSH
33943: PPUSH
33944: PPUSH
33945: PPUSH
33946: PPUSH
33947: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
33948: LD_ADDR_VAR 0 5
33952: PUSH
33953: LD_INT 0
33955: PUSH
33956: LD_INT 0
33958: PUSH
33959: LD_INT 0
33961: PUSH
33962: EMPTY
33963: PUSH
33964: EMPTY
33965: LIST
33966: LIST
33967: LIST
33968: LIST
33969: ST_TO_ADDR
// if not x or not y then
33970: LD_VAR 0 2
33974: NOT
33975: PUSH
33976: LD_VAR 0 3
33980: NOT
33981: OR
33982: IFFALSE 33986
// exit ;
33984: GO 35636
// if not range then
33986: LD_VAR 0 4
33990: NOT
33991: IFFALSE 34001
// range := 10 ;
33993: LD_ADDR_VAR 0 4
33997: PUSH
33998: LD_INT 10
34000: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34001: LD_ADDR_VAR 0 8
34005: PUSH
34006: LD_INT 81
34008: PUSH
34009: LD_VAR 0 1
34013: PUSH
34014: EMPTY
34015: LIST
34016: LIST
34017: PUSH
34018: LD_INT 92
34020: PUSH
34021: LD_VAR 0 2
34025: PUSH
34026: LD_VAR 0 3
34030: PUSH
34031: LD_VAR 0 4
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: LIST
34040: LIST
34041: PUSH
34042: LD_INT 3
34044: PUSH
34045: LD_INT 21
34047: PUSH
34048: LD_INT 3
34050: PUSH
34051: EMPTY
34052: LIST
34053: LIST
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: LIST
34063: PPUSH
34064: CALL_OW 69
34068: ST_TO_ADDR
// if not tmp then
34069: LD_VAR 0 8
34073: NOT
34074: IFFALSE 34078
// exit ;
34076: GO 35636
// for i in tmp do
34078: LD_ADDR_VAR 0 6
34082: PUSH
34083: LD_VAR 0 8
34087: PUSH
34088: FOR_IN
34089: IFFALSE 35611
// begin points := [ 0 , 0 , 0 ] ;
34091: LD_ADDR_VAR 0 9
34095: PUSH
34096: LD_INT 0
34098: PUSH
34099: LD_INT 0
34101: PUSH
34102: LD_INT 0
34104: PUSH
34105: EMPTY
34106: LIST
34107: LIST
34108: LIST
34109: ST_TO_ADDR
// bpoints := 1 ;
34110: LD_ADDR_VAR 0 10
34114: PUSH
34115: LD_INT 1
34117: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34118: LD_VAR 0 6
34122: PPUSH
34123: CALL_OW 247
34127: PUSH
34128: LD_INT 1
34130: DOUBLE
34131: EQUAL
34132: IFTRUE 34136
34134: GO 34714
34136: POP
// begin if GetClass ( i ) = 1 then
34137: LD_VAR 0 6
34141: PPUSH
34142: CALL_OW 257
34146: PUSH
34147: LD_INT 1
34149: EQUAL
34150: IFFALSE 34171
// points := [ 10 , 5 , 3 ] ;
34152: LD_ADDR_VAR 0 9
34156: PUSH
34157: LD_INT 10
34159: PUSH
34160: LD_INT 5
34162: PUSH
34163: LD_INT 3
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: LIST
34170: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34171: LD_VAR 0 6
34175: PPUSH
34176: CALL_OW 257
34180: PUSH
34181: LD_INT 2
34183: PUSH
34184: LD_INT 3
34186: PUSH
34187: LD_INT 4
34189: PUSH
34190: EMPTY
34191: LIST
34192: LIST
34193: LIST
34194: IN
34195: IFFALSE 34216
// points := [ 3 , 2 , 1 ] ;
34197: LD_ADDR_VAR 0 9
34201: PUSH
34202: LD_INT 3
34204: PUSH
34205: LD_INT 2
34207: PUSH
34208: LD_INT 1
34210: PUSH
34211: EMPTY
34212: LIST
34213: LIST
34214: LIST
34215: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34216: LD_VAR 0 6
34220: PPUSH
34221: CALL_OW 257
34225: PUSH
34226: LD_INT 5
34228: EQUAL
34229: IFFALSE 34250
// points := [ 130 , 5 , 2 ] ;
34231: LD_ADDR_VAR 0 9
34235: PUSH
34236: LD_INT 130
34238: PUSH
34239: LD_INT 5
34241: PUSH
34242: LD_INT 2
34244: PUSH
34245: EMPTY
34246: LIST
34247: LIST
34248: LIST
34249: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34250: LD_VAR 0 6
34254: PPUSH
34255: CALL_OW 257
34259: PUSH
34260: LD_INT 8
34262: EQUAL
34263: IFFALSE 34284
// points := [ 35 , 35 , 30 ] ;
34265: LD_ADDR_VAR 0 9
34269: PUSH
34270: LD_INT 35
34272: PUSH
34273: LD_INT 35
34275: PUSH
34276: LD_INT 30
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: LIST
34283: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34284: LD_VAR 0 6
34288: PPUSH
34289: CALL_OW 257
34293: PUSH
34294: LD_INT 9
34296: EQUAL
34297: IFFALSE 34318
// points := [ 20 , 55 , 40 ] ;
34299: LD_ADDR_VAR 0 9
34303: PUSH
34304: LD_INT 20
34306: PUSH
34307: LD_INT 55
34309: PUSH
34310: LD_INT 40
34312: PUSH
34313: EMPTY
34314: LIST
34315: LIST
34316: LIST
34317: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34318: LD_VAR 0 6
34322: PPUSH
34323: CALL_OW 257
34327: PUSH
34328: LD_INT 12
34330: PUSH
34331: LD_INT 16
34333: PUSH
34334: EMPTY
34335: LIST
34336: LIST
34337: IN
34338: IFFALSE 34359
// points := [ 5 , 3 , 2 ] ;
34340: LD_ADDR_VAR 0 9
34344: PUSH
34345: LD_INT 5
34347: PUSH
34348: LD_INT 3
34350: PUSH
34351: LD_INT 2
34353: PUSH
34354: EMPTY
34355: LIST
34356: LIST
34357: LIST
34358: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34359: LD_VAR 0 6
34363: PPUSH
34364: CALL_OW 257
34368: PUSH
34369: LD_INT 17
34371: EQUAL
34372: IFFALSE 34393
// points := [ 100 , 50 , 75 ] ;
34374: LD_ADDR_VAR 0 9
34378: PUSH
34379: LD_INT 100
34381: PUSH
34382: LD_INT 50
34384: PUSH
34385: LD_INT 75
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: LIST
34392: ST_TO_ADDR
// if GetClass ( i ) = 15 then
34393: LD_VAR 0 6
34397: PPUSH
34398: CALL_OW 257
34402: PUSH
34403: LD_INT 15
34405: EQUAL
34406: IFFALSE 34427
// points := [ 10 , 5 , 3 ] ;
34408: LD_ADDR_VAR 0 9
34412: PUSH
34413: LD_INT 10
34415: PUSH
34416: LD_INT 5
34418: PUSH
34419: LD_INT 3
34421: PUSH
34422: EMPTY
34423: LIST
34424: LIST
34425: LIST
34426: ST_TO_ADDR
// if GetClass ( i ) = 14 then
34427: LD_VAR 0 6
34431: PPUSH
34432: CALL_OW 257
34436: PUSH
34437: LD_INT 14
34439: EQUAL
34440: IFFALSE 34461
// points := [ 10 , 0 , 0 ] ;
34442: LD_ADDR_VAR 0 9
34446: PUSH
34447: LD_INT 10
34449: PUSH
34450: LD_INT 0
34452: PUSH
34453: LD_INT 0
34455: PUSH
34456: EMPTY
34457: LIST
34458: LIST
34459: LIST
34460: ST_TO_ADDR
// if GetClass ( i ) = 11 then
34461: LD_VAR 0 6
34465: PPUSH
34466: CALL_OW 257
34470: PUSH
34471: LD_INT 11
34473: EQUAL
34474: IFFALSE 34495
// points := [ 30 , 10 , 5 ] ;
34476: LD_ADDR_VAR 0 9
34480: PUSH
34481: LD_INT 30
34483: PUSH
34484: LD_INT 10
34486: PUSH
34487: LD_INT 5
34489: PUSH
34490: EMPTY
34491: LIST
34492: LIST
34493: LIST
34494: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
34495: LD_VAR 0 1
34499: PPUSH
34500: LD_INT 5
34502: PPUSH
34503: CALL_OW 321
34507: PUSH
34508: LD_INT 2
34510: EQUAL
34511: IFFALSE 34528
// bpoints := bpoints * 1.8 ;
34513: LD_ADDR_VAR 0 10
34517: PUSH
34518: LD_VAR 0 10
34522: PUSH
34523: LD_REAL  1.80000000000000E+0000
34526: MUL
34527: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
34528: LD_VAR 0 6
34532: PPUSH
34533: CALL_OW 257
34537: PUSH
34538: LD_INT 1
34540: PUSH
34541: LD_INT 2
34543: PUSH
34544: LD_INT 3
34546: PUSH
34547: LD_INT 4
34549: PUSH
34550: EMPTY
34551: LIST
34552: LIST
34553: LIST
34554: LIST
34555: IN
34556: PUSH
34557: LD_VAR 0 1
34561: PPUSH
34562: LD_INT 51
34564: PPUSH
34565: CALL_OW 321
34569: PUSH
34570: LD_INT 2
34572: EQUAL
34573: AND
34574: IFFALSE 34591
// bpoints := bpoints * 1.2 ;
34576: LD_ADDR_VAR 0 10
34580: PUSH
34581: LD_VAR 0 10
34585: PUSH
34586: LD_REAL  1.20000000000000E+0000
34589: MUL
34590: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
34591: LD_VAR 0 6
34595: PPUSH
34596: CALL_OW 257
34600: PUSH
34601: LD_INT 5
34603: PUSH
34604: LD_INT 7
34606: PUSH
34607: LD_INT 9
34609: PUSH
34610: EMPTY
34611: LIST
34612: LIST
34613: LIST
34614: IN
34615: PUSH
34616: LD_VAR 0 1
34620: PPUSH
34621: LD_INT 52
34623: PPUSH
34624: CALL_OW 321
34628: PUSH
34629: LD_INT 2
34631: EQUAL
34632: AND
34633: IFFALSE 34650
// bpoints := bpoints * 1.5 ;
34635: LD_ADDR_VAR 0 10
34639: PUSH
34640: LD_VAR 0 10
34644: PUSH
34645: LD_REAL  1.50000000000000E+0000
34648: MUL
34649: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
34650: LD_VAR 0 1
34654: PPUSH
34655: LD_INT 66
34657: PPUSH
34658: CALL_OW 321
34662: PUSH
34663: LD_INT 2
34665: EQUAL
34666: IFFALSE 34683
// bpoints := bpoints * 1.1 ;
34668: LD_ADDR_VAR 0 10
34672: PUSH
34673: LD_VAR 0 10
34677: PUSH
34678: LD_REAL  1.10000000000000E+0000
34681: MUL
34682: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
34683: LD_ADDR_VAR 0 10
34687: PUSH
34688: LD_VAR 0 10
34692: PUSH
34693: LD_VAR 0 6
34697: PPUSH
34698: LD_INT 1
34700: PPUSH
34701: CALL_OW 259
34705: PUSH
34706: LD_REAL  1.15000000000000E+0000
34709: MUL
34710: MUL
34711: ST_TO_ADDR
// end ; unit_vehicle :
34712: GO 35540
34714: LD_INT 2
34716: DOUBLE
34717: EQUAL
34718: IFTRUE 34722
34720: GO 35528
34722: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
34723: LD_VAR 0 6
34727: PPUSH
34728: CALL_OW 264
34732: PUSH
34733: LD_INT 2
34735: PUSH
34736: LD_INT 42
34738: PUSH
34739: LD_INT 24
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: LIST
34746: IN
34747: IFFALSE 34768
// points := [ 25 , 5 , 3 ] ;
34749: LD_ADDR_VAR 0 9
34753: PUSH
34754: LD_INT 25
34756: PUSH
34757: LD_INT 5
34759: PUSH
34760: LD_INT 3
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: LIST
34767: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34768: LD_VAR 0 6
34772: PPUSH
34773: CALL_OW 264
34777: PUSH
34778: LD_INT 4
34780: PUSH
34781: LD_INT 43
34783: PUSH
34784: LD_INT 25
34786: PUSH
34787: EMPTY
34788: LIST
34789: LIST
34790: LIST
34791: IN
34792: IFFALSE 34813
// points := [ 40 , 15 , 5 ] ;
34794: LD_ADDR_VAR 0 9
34798: PUSH
34799: LD_INT 40
34801: PUSH
34802: LD_INT 15
34804: PUSH
34805: LD_INT 5
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: LIST
34812: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34813: LD_VAR 0 6
34817: PPUSH
34818: CALL_OW 264
34822: PUSH
34823: LD_INT 3
34825: PUSH
34826: LD_INT 23
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: IN
34833: IFFALSE 34854
// points := [ 7 , 25 , 8 ] ;
34835: LD_ADDR_VAR 0 9
34839: PUSH
34840: LD_INT 7
34842: PUSH
34843: LD_INT 25
34845: PUSH
34846: LD_INT 8
34848: PUSH
34849: EMPTY
34850: LIST
34851: LIST
34852: LIST
34853: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
34854: LD_VAR 0 6
34858: PPUSH
34859: CALL_OW 264
34863: PUSH
34864: LD_INT 5
34866: PUSH
34867: LD_INT 27
34869: PUSH
34870: LD_INT 44
34872: PUSH
34873: EMPTY
34874: LIST
34875: LIST
34876: LIST
34877: IN
34878: IFFALSE 34899
// points := [ 14 , 50 , 16 ] ;
34880: LD_ADDR_VAR 0 9
34884: PUSH
34885: LD_INT 14
34887: PUSH
34888: LD_INT 50
34890: PUSH
34891: LD_INT 16
34893: PUSH
34894: EMPTY
34895: LIST
34896: LIST
34897: LIST
34898: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
34899: LD_VAR 0 6
34903: PPUSH
34904: CALL_OW 264
34908: PUSH
34909: LD_INT 6
34911: PUSH
34912: LD_INT 46
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: IN
34919: IFFALSE 34940
// points := [ 32 , 120 , 70 ] ;
34921: LD_ADDR_VAR 0 9
34925: PUSH
34926: LD_INT 32
34928: PUSH
34929: LD_INT 120
34931: PUSH
34932: LD_INT 70
34934: PUSH
34935: EMPTY
34936: LIST
34937: LIST
34938: LIST
34939: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
34940: LD_VAR 0 6
34944: PPUSH
34945: CALL_OW 264
34949: PUSH
34950: LD_INT 7
34952: PUSH
34953: LD_INT 28
34955: PUSH
34956: LD_INT 45
34958: PUSH
34959: LD_INT 92
34961: PUSH
34962: EMPTY
34963: LIST
34964: LIST
34965: LIST
34966: LIST
34967: IN
34968: IFFALSE 34989
// points := [ 35 , 20 , 45 ] ;
34970: LD_ADDR_VAR 0 9
34974: PUSH
34975: LD_INT 35
34977: PUSH
34978: LD_INT 20
34980: PUSH
34981: LD_INT 45
34983: PUSH
34984: EMPTY
34985: LIST
34986: LIST
34987: LIST
34988: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
34989: LD_VAR 0 6
34993: PPUSH
34994: CALL_OW 264
34998: PUSH
34999: LD_INT 47
35001: PUSH
35002: EMPTY
35003: LIST
35004: IN
35005: IFFALSE 35026
// points := [ 67 , 45 , 75 ] ;
35007: LD_ADDR_VAR 0 9
35011: PUSH
35012: LD_INT 67
35014: PUSH
35015: LD_INT 45
35017: PUSH
35018: LD_INT 75
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: LIST
35025: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35026: LD_VAR 0 6
35030: PPUSH
35031: CALL_OW 264
35035: PUSH
35036: LD_INT 26
35038: PUSH
35039: EMPTY
35040: LIST
35041: IN
35042: IFFALSE 35063
// points := [ 120 , 30 , 80 ] ;
35044: LD_ADDR_VAR 0 9
35048: PUSH
35049: LD_INT 120
35051: PUSH
35052: LD_INT 30
35054: PUSH
35055: LD_INT 80
35057: PUSH
35058: EMPTY
35059: LIST
35060: LIST
35061: LIST
35062: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35063: LD_VAR 0 6
35067: PPUSH
35068: CALL_OW 264
35072: PUSH
35073: LD_INT 22
35075: PUSH
35076: EMPTY
35077: LIST
35078: IN
35079: IFFALSE 35100
// points := [ 40 , 1 , 1 ] ;
35081: LD_ADDR_VAR 0 9
35085: PUSH
35086: LD_INT 40
35088: PUSH
35089: LD_INT 1
35091: PUSH
35092: LD_INT 1
35094: PUSH
35095: EMPTY
35096: LIST
35097: LIST
35098: LIST
35099: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35100: LD_VAR 0 6
35104: PPUSH
35105: CALL_OW 264
35109: PUSH
35110: LD_INT 29
35112: PUSH
35113: EMPTY
35114: LIST
35115: IN
35116: IFFALSE 35137
// points := [ 70 , 200 , 400 ] ;
35118: LD_ADDR_VAR 0 9
35122: PUSH
35123: LD_INT 70
35125: PUSH
35126: LD_INT 200
35128: PUSH
35129: LD_INT 400
35131: PUSH
35132: EMPTY
35133: LIST
35134: LIST
35135: LIST
35136: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35137: LD_VAR 0 6
35141: PPUSH
35142: CALL_OW 264
35146: PUSH
35147: LD_INT 14
35149: PUSH
35150: LD_INT 53
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: IN
35157: IFFALSE 35178
// points := [ 40 , 10 , 20 ] ;
35159: LD_ADDR_VAR 0 9
35163: PUSH
35164: LD_INT 40
35166: PUSH
35167: LD_INT 10
35169: PUSH
35170: LD_INT 20
35172: PUSH
35173: EMPTY
35174: LIST
35175: LIST
35176: LIST
35177: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35178: LD_VAR 0 6
35182: PPUSH
35183: CALL_OW 264
35187: PUSH
35188: LD_INT 9
35190: PUSH
35191: EMPTY
35192: LIST
35193: IN
35194: IFFALSE 35215
// points := [ 5 , 70 , 20 ] ;
35196: LD_ADDR_VAR 0 9
35200: PUSH
35201: LD_INT 5
35203: PUSH
35204: LD_INT 70
35206: PUSH
35207: LD_INT 20
35209: PUSH
35210: EMPTY
35211: LIST
35212: LIST
35213: LIST
35214: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35215: LD_VAR 0 6
35219: PPUSH
35220: CALL_OW 264
35224: PUSH
35225: LD_INT 10
35227: PUSH
35228: EMPTY
35229: LIST
35230: IN
35231: IFFALSE 35252
// points := [ 35 , 110 , 70 ] ;
35233: LD_ADDR_VAR 0 9
35237: PUSH
35238: LD_INT 35
35240: PUSH
35241: LD_INT 110
35243: PUSH
35244: LD_INT 70
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: LIST
35251: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35252: LD_VAR 0 6
35256: PPUSH
35257: CALL_OW 265
35261: PUSH
35262: LD_INT 25
35264: EQUAL
35265: IFFALSE 35286
// points := [ 80 , 65 , 100 ] ;
35267: LD_ADDR_VAR 0 9
35271: PUSH
35272: LD_INT 80
35274: PUSH
35275: LD_INT 65
35277: PUSH
35278: LD_INT 100
35280: PUSH
35281: EMPTY
35282: LIST
35283: LIST
35284: LIST
35285: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
35286: LD_VAR 0 6
35290: PPUSH
35291: CALL_OW 263
35295: PUSH
35296: LD_INT 1
35298: EQUAL
35299: IFFALSE 35334
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
35301: LD_ADDR_VAR 0 10
35305: PUSH
35306: LD_VAR 0 10
35310: PUSH
35311: LD_VAR 0 6
35315: PPUSH
35316: CALL_OW 311
35320: PPUSH
35321: LD_INT 3
35323: PPUSH
35324: CALL_OW 259
35328: PUSH
35329: LD_INT 4
35331: MUL
35332: MUL
35333: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35334: LD_VAR 0 6
35338: PPUSH
35339: CALL_OW 263
35343: PUSH
35344: LD_INT 2
35346: EQUAL
35347: IFFALSE 35398
// begin j := IsControledBy ( i ) ;
35349: LD_ADDR_VAR 0 7
35353: PUSH
35354: LD_VAR 0 6
35358: PPUSH
35359: CALL_OW 312
35363: ST_TO_ADDR
// if j then
35364: LD_VAR 0 7
35368: IFFALSE 35398
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35370: LD_ADDR_VAR 0 10
35374: PUSH
35375: LD_VAR 0 10
35379: PUSH
35380: LD_VAR 0 7
35384: PPUSH
35385: LD_INT 3
35387: PPUSH
35388: CALL_OW 259
35392: PUSH
35393: LD_INT 3
35395: MUL
35396: MUL
35397: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
35398: LD_VAR 0 6
35402: PPUSH
35403: CALL_OW 264
35407: PUSH
35408: LD_INT 5
35410: PUSH
35411: LD_INT 6
35413: PUSH
35414: LD_INT 46
35416: PUSH
35417: LD_INT 44
35419: PUSH
35420: LD_INT 47
35422: PUSH
35423: LD_INT 45
35425: PUSH
35426: LD_INT 28
35428: PUSH
35429: LD_INT 7
35431: PUSH
35432: LD_INT 27
35434: PUSH
35435: LD_INT 29
35437: PUSH
35438: EMPTY
35439: LIST
35440: LIST
35441: LIST
35442: LIST
35443: LIST
35444: LIST
35445: LIST
35446: LIST
35447: LIST
35448: LIST
35449: IN
35450: PUSH
35451: LD_VAR 0 1
35455: PPUSH
35456: LD_INT 52
35458: PPUSH
35459: CALL_OW 321
35463: PUSH
35464: LD_INT 2
35466: EQUAL
35467: AND
35468: IFFALSE 35485
// bpoints := bpoints * 1.2 ;
35470: LD_ADDR_VAR 0 10
35474: PUSH
35475: LD_VAR 0 10
35479: PUSH
35480: LD_REAL  1.20000000000000E+0000
35483: MUL
35484: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
35485: LD_VAR 0 6
35489: PPUSH
35490: CALL_OW 264
35494: PUSH
35495: LD_INT 6
35497: PUSH
35498: LD_INT 46
35500: PUSH
35501: LD_INT 47
35503: PUSH
35504: EMPTY
35505: LIST
35506: LIST
35507: LIST
35508: IN
35509: IFFALSE 35526
// bpoints := bpoints * 1.2 ;
35511: LD_ADDR_VAR 0 10
35515: PUSH
35516: LD_VAR 0 10
35520: PUSH
35521: LD_REAL  1.20000000000000E+0000
35524: MUL
35525: ST_TO_ADDR
// end ; unit_building :
35526: GO 35540
35528: LD_INT 3
35530: DOUBLE
35531: EQUAL
35532: IFTRUE 35536
35534: GO 35539
35536: POP
// ; end ;
35537: GO 35540
35539: POP
// for j = 1 to 3 do
35540: LD_ADDR_VAR 0 7
35544: PUSH
35545: DOUBLE
35546: LD_INT 1
35548: DEC
35549: ST_TO_ADDR
35550: LD_INT 3
35552: PUSH
35553: FOR_TO
35554: IFFALSE 35607
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
35556: LD_ADDR_VAR 0 5
35560: PUSH
35561: LD_VAR 0 5
35565: PPUSH
35566: LD_VAR 0 7
35570: PPUSH
35571: LD_VAR 0 5
35575: PUSH
35576: LD_VAR 0 7
35580: ARRAY
35581: PUSH
35582: LD_VAR 0 9
35586: PUSH
35587: LD_VAR 0 7
35591: ARRAY
35592: PUSH
35593: LD_VAR 0 10
35597: MUL
35598: PLUS
35599: PPUSH
35600: CALL_OW 1
35604: ST_TO_ADDR
35605: GO 35553
35607: POP
35608: POP
// end ;
35609: GO 34088
35611: POP
35612: POP
// result := Replace ( result , 4 , tmp ) ;
35613: LD_ADDR_VAR 0 5
35617: PUSH
35618: LD_VAR 0 5
35622: PPUSH
35623: LD_INT 4
35625: PPUSH
35626: LD_VAR 0 8
35630: PPUSH
35631: CALL_OW 1
35635: ST_TO_ADDR
// end ;
35636: LD_VAR 0 5
35640: RET
// export function DangerAtRange ( unit , range ) ; begin
35641: LD_INT 0
35643: PPUSH
// if not unit then
35644: LD_VAR 0 1
35648: NOT
35649: IFFALSE 35653
// exit ;
35651: GO 35698
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
35653: LD_ADDR_VAR 0 3
35657: PUSH
35658: LD_VAR 0 1
35662: PPUSH
35663: CALL_OW 255
35667: PPUSH
35668: LD_VAR 0 1
35672: PPUSH
35673: CALL_OW 250
35677: PPUSH
35678: LD_VAR 0 1
35682: PPUSH
35683: CALL_OW 251
35687: PPUSH
35688: LD_VAR 0 2
35692: PPUSH
35693: CALL 33940 0 4
35697: ST_TO_ADDR
// end ;
35698: LD_VAR 0 3
35702: RET
// export function DangerInArea ( side , area ) ; begin
35703: LD_INT 0
35705: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
35706: LD_ADDR_VAR 0 3
35710: PUSH
35711: LD_VAR 0 2
35715: PPUSH
35716: LD_INT 81
35718: PUSH
35719: LD_VAR 0 1
35723: PUSH
35724: EMPTY
35725: LIST
35726: LIST
35727: PPUSH
35728: CALL_OW 70
35732: ST_TO_ADDR
// end ;
35733: LD_VAR 0 3
35737: RET
// export function IsExtension ( b ) ; begin
35738: LD_INT 0
35740: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
35741: LD_ADDR_VAR 0 2
35745: PUSH
35746: LD_VAR 0 1
35750: PUSH
35751: LD_INT 23
35753: PUSH
35754: LD_INT 20
35756: PUSH
35757: LD_INT 22
35759: PUSH
35760: LD_INT 17
35762: PUSH
35763: LD_INT 24
35765: PUSH
35766: LD_INT 21
35768: PUSH
35769: LD_INT 19
35771: PUSH
35772: LD_INT 16
35774: PUSH
35775: LD_INT 25
35777: PUSH
35778: LD_INT 18
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: LIST
35785: LIST
35786: LIST
35787: LIST
35788: LIST
35789: LIST
35790: LIST
35791: LIST
35792: IN
35793: ST_TO_ADDR
// end ;
35794: LD_VAR 0 2
35798: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
35799: LD_INT 0
35801: PPUSH
35802: PPUSH
35803: PPUSH
// result := [ ] ;
35804: LD_ADDR_VAR 0 4
35808: PUSH
35809: EMPTY
35810: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35811: LD_ADDR_VAR 0 5
35815: PUSH
35816: LD_VAR 0 2
35820: PPUSH
35821: LD_INT 21
35823: PUSH
35824: LD_INT 3
35826: PUSH
35827: EMPTY
35828: LIST
35829: LIST
35830: PPUSH
35831: CALL_OW 70
35835: ST_TO_ADDR
// if not tmp then
35836: LD_VAR 0 5
35840: NOT
35841: IFFALSE 35845
// exit ;
35843: GO 35909
// if checkLink then
35845: LD_VAR 0 3
35849: IFFALSE 35899
// begin for i in tmp do
35851: LD_ADDR_VAR 0 6
35855: PUSH
35856: LD_VAR 0 5
35860: PUSH
35861: FOR_IN
35862: IFFALSE 35897
// if GetBase ( i ) <> base then
35864: LD_VAR 0 6
35868: PPUSH
35869: CALL_OW 274
35873: PUSH
35874: LD_VAR 0 1
35878: NONEQUAL
35879: IFFALSE 35895
// ComLinkToBase ( base , i ) ;
35881: LD_VAR 0 1
35885: PPUSH
35886: LD_VAR 0 6
35890: PPUSH
35891: CALL_OW 169
35895: GO 35861
35897: POP
35898: POP
// end ; result := tmp ;
35899: LD_ADDR_VAR 0 4
35903: PUSH
35904: LD_VAR 0 5
35908: ST_TO_ADDR
// end ;
35909: LD_VAR 0 4
35913: RET
// export function ComComplete ( units , b ) ; var i ; begin
35914: LD_INT 0
35916: PPUSH
35917: PPUSH
// if not units then
35918: LD_VAR 0 1
35922: NOT
35923: IFFALSE 35927
// exit ;
35925: GO 36017
// for i in units do
35927: LD_ADDR_VAR 0 4
35931: PUSH
35932: LD_VAR 0 1
35936: PUSH
35937: FOR_IN
35938: IFFALSE 36015
// if BuildingStatus ( b ) = bs_build then
35940: LD_VAR 0 2
35944: PPUSH
35945: CALL_OW 461
35949: PUSH
35950: LD_INT 1
35952: EQUAL
35953: IFFALSE 36013
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
35955: LD_VAR 0 4
35959: PPUSH
35960: LD_STRING h
35962: PUSH
35963: LD_VAR 0 2
35967: PPUSH
35968: CALL_OW 250
35972: PUSH
35973: LD_VAR 0 2
35977: PPUSH
35978: CALL_OW 251
35982: PUSH
35983: LD_VAR 0 2
35987: PUSH
35988: LD_INT 0
35990: PUSH
35991: LD_INT 0
35993: PUSH
35994: LD_INT 0
35996: PUSH
35997: EMPTY
35998: LIST
35999: LIST
36000: LIST
36001: LIST
36002: LIST
36003: LIST
36004: LIST
36005: PUSH
36006: EMPTY
36007: LIST
36008: PPUSH
36009: CALL_OW 446
36013: GO 35937
36015: POP
36016: POP
// end ;
36017: LD_VAR 0 3
36021: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36022: LD_INT 0
36024: PPUSH
36025: PPUSH
36026: PPUSH
36027: PPUSH
36028: PPUSH
36029: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
36030: LD_VAR 0 1
36034: NOT
36035: PUSH
36036: LD_VAR 0 1
36040: PPUSH
36041: CALL_OW 263
36045: PUSH
36046: LD_INT 2
36048: NONEQUAL
36049: OR
36050: IFFALSE 36054
// exit ;
36052: GO 36370
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36054: LD_ADDR_VAR 0 6
36058: PUSH
36059: LD_INT 22
36061: PUSH
36062: LD_VAR 0 1
36066: PPUSH
36067: CALL_OW 255
36071: PUSH
36072: EMPTY
36073: LIST
36074: LIST
36075: PUSH
36076: LD_INT 2
36078: PUSH
36079: LD_INT 30
36081: PUSH
36082: LD_INT 36
36084: PUSH
36085: EMPTY
36086: LIST
36087: LIST
36088: PUSH
36089: LD_INT 34
36091: PUSH
36092: LD_INT 31
36094: PUSH
36095: EMPTY
36096: LIST
36097: LIST
36098: PUSH
36099: EMPTY
36100: LIST
36101: LIST
36102: LIST
36103: PUSH
36104: EMPTY
36105: LIST
36106: LIST
36107: PPUSH
36108: CALL_OW 69
36112: ST_TO_ADDR
// if not tmp then
36113: LD_VAR 0 6
36117: NOT
36118: IFFALSE 36122
// exit ;
36120: GO 36370
// result := [ ] ;
36122: LD_ADDR_VAR 0 2
36126: PUSH
36127: EMPTY
36128: ST_TO_ADDR
// for i in tmp do
36129: LD_ADDR_VAR 0 3
36133: PUSH
36134: LD_VAR 0 6
36138: PUSH
36139: FOR_IN
36140: IFFALSE 36211
// begin t := UnitsInside ( i ) ;
36142: LD_ADDR_VAR 0 4
36146: PUSH
36147: LD_VAR 0 3
36151: PPUSH
36152: CALL_OW 313
36156: ST_TO_ADDR
// if t then
36157: LD_VAR 0 4
36161: IFFALSE 36209
// for j in t do
36163: LD_ADDR_VAR 0 7
36167: PUSH
36168: LD_VAR 0 4
36172: PUSH
36173: FOR_IN
36174: IFFALSE 36207
// result := Replace ( result , result + 1 , j ) ;
36176: LD_ADDR_VAR 0 2
36180: PUSH
36181: LD_VAR 0 2
36185: PPUSH
36186: LD_VAR 0 2
36190: PUSH
36191: LD_INT 1
36193: PLUS
36194: PPUSH
36195: LD_VAR 0 7
36199: PPUSH
36200: CALL_OW 1
36204: ST_TO_ADDR
36205: GO 36173
36207: POP
36208: POP
// end ;
36209: GO 36139
36211: POP
36212: POP
// if not result then
36213: LD_VAR 0 2
36217: NOT
36218: IFFALSE 36222
// exit ;
36220: GO 36370
// mech := result [ 1 ] ;
36222: LD_ADDR_VAR 0 5
36226: PUSH
36227: LD_VAR 0 2
36231: PUSH
36232: LD_INT 1
36234: ARRAY
36235: ST_TO_ADDR
// if result > 1 then
36236: LD_VAR 0 2
36240: PUSH
36241: LD_INT 1
36243: GREATER
36244: IFFALSE 36356
// begin for i = 2 to result do
36246: LD_ADDR_VAR 0 3
36250: PUSH
36251: DOUBLE
36252: LD_INT 2
36254: DEC
36255: ST_TO_ADDR
36256: LD_VAR 0 2
36260: PUSH
36261: FOR_TO
36262: IFFALSE 36354
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36264: LD_ADDR_VAR 0 4
36268: PUSH
36269: LD_VAR 0 2
36273: PUSH
36274: LD_VAR 0 3
36278: ARRAY
36279: PPUSH
36280: LD_INT 3
36282: PPUSH
36283: CALL_OW 259
36287: PUSH
36288: LD_VAR 0 2
36292: PUSH
36293: LD_VAR 0 3
36297: ARRAY
36298: PPUSH
36299: CALL_OW 432
36303: MINUS
36304: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
36305: LD_VAR 0 4
36309: PUSH
36310: LD_VAR 0 5
36314: PPUSH
36315: LD_INT 3
36317: PPUSH
36318: CALL_OW 259
36322: PUSH
36323: LD_VAR 0 5
36327: PPUSH
36328: CALL_OW 432
36332: MINUS
36333: GREATEREQUAL
36334: IFFALSE 36352
// mech := result [ i ] ;
36336: LD_ADDR_VAR 0 5
36340: PUSH
36341: LD_VAR 0 2
36345: PUSH
36346: LD_VAR 0 3
36350: ARRAY
36351: ST_TO_ADDR
// end ;
36352: GO 36261
36354: POP
36355: POP
// end ; ComLinkTo ( vehicle , mech ) ;
36356: LD_VAR 0 1
36360: PPUSH
36361: LD_VAR 0 5
36365: PPUSH
36366: CALL_OW 135
// end ;
36370: LD_VAR 0 2
36374: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36375: LD_INT 0
36377: PPUSH
36378: PPUSH
36379: PPUSH
36380: PPUSH
36381: PPUSH
36382: PPUSH
36383: PPUSH
36384: PPUSH
36385: PPUSH
36386: PPUSH
36387: PPUSH
36388: PPUSH
36389: PPUSH
// result := [ ] ;
36390: LD_ADDR_VAR 0 7
36394: PUSH
36395: EMPTY
36396: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
36397: LD_VAR 0 1
36401: PPUSH
36402: CALL_OW 266
36406: PUSH
36407: LD_INT 0
36409: PUSH
36410: LD_INT 1
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: IN
36417: NOT
36418: IFFALSE 36422
// exit ;
36420: GO 38056
// if name then
36422: LD_VAR 0 3
36426: IFFALSE 36442
// SetBName ( base_dep , name ) ;
36428: LD_VAR 0 1
36432: PPUSH
36433: LD_VAR 0 3
36437: PPUSH
36438: CALL_OW 500
// base := GetBase ( base_dep ) ;
36442: LD_ADDR_VAR 0 15
36446: PUSH
36447: LD_VAR 0 1
36451: PPUSH
36452: CALL_OW 274
36456: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
36457: LD_ADDR_VAR 0 16
36461: PUSH
36462: LD_VAR 0 1
36466: PPUSH
36467: CALL_OW 255
36471: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
36472: LD_ADDR_VAR 0 17
36476: PUSH
36477: LD_VAR 0 1
36481: PPUSH
36482: CALL_OW 248
36486: ST_TO_ADDR
// if sources then
36487: LD_VAR 0 5
36491: IFFALSE 36538
// for i = 1 to 3 do
36493: LD_ADDR_VAR 0 8
36497: PUSH
36498: DOUBLE
36499: LD_INT 1
36501: DEC
36502: ST_TO_ADDR
36503: LD_INT 3
36505: PUSH
36506: FOR_TO
36507: IFFALSE 36536
// AddResourceType ( base , i , sources [ i ] ) ;
36509: LD_VAR 0 15
36513: PPUSH
36514: LD_VAR 0 8
36518: PPUSH
36519: LD_VAR 0 5
36523: PUSH
36524: LD_VAR 0 8
36528: ARRAY
36529: PPUSH
36530: CALL_OW 276
36534: GO 36506
36536: POP
36537: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
36538: LD_ADDR_VAR 0 18
36542: PUSH
36543: LD_VAR 0 15
36547: PPUSH
36548: LD_VAR 0 2
36552: PPUSH
36553: LD_INT 1
36555: PPUSH
36556: CALL 35799 0 3
36560: ST_TO_ADDR
// InitHc ;
36561: CALL_OW 19
// InitUc ;
36565: CALL_OW 18
// uc_side := side ;
36569: LD_ADDR_OWVAR 20
36573: PUSH
36574: LD_VAR 0 16
36578: ST_TO_ADDR
// uc_nation := nation ;
36579: LD_ADDR_OWVAR 21
36583: PUSH
36584: LD_VAR 0 17
36588: ST_TO_ADDR
// if buildings then
36589: LD_VAR 0 18
36593: IFFALSE 37915
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
36595: LD_ADDR_VAR 0 19
36599: PUSH
36600: LD_VAR 0 18
36604: PPUSH
36605: LD_INT 2
36607: PUSH
36608: LD_INT 30
36610: PUSH
36611: LD_INT 29
36613: PUSH
36614: EMPTY
36615: LIST
36616: LIST
36617: PUSH
36618: LD_INT 30
36620: PUSH
36621: LD_INT 30
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: LIST
36632: PPUSH
36633: CALL_OW 72
36637: ST_TO_ADDR
// if tmp then
36638: LD_VAR 0 19
36642: IFFALSE 36690
// for i in tmp do
36644: LD_ADDR_VAR 0 8
36648: PUSH
36649: LD_VAR 0 19
36653: PUSH
36654: FOR_IN
36655: IFFALSE 36688
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
36657: LD_VAR 0 8
36661: PPUSH
36662: CALL_OW 250
36666: PPUSH
36667: LD_VAR 0 8
36671: PPUSH
36672: CALL_OW 251
36676: PPUSH
36677: LD_VAR 0 16
36681: PPUSH
36682: CALL_OW 441
36686: GO 36654
36688: POP
36689: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
36690: LD_VAR 0 18
36694: PPUSH
36695: LD_INT 2
36697: PUSH
36698: LD_INT 30
36700: PUSH
36701: LD_INT 32
36703: PUSH
36704: EMPTY
36705: LIST
36706: LIST
36707: PUSH
36708: LD_INT 30
36710: PUSH
36711: LD_INT 33
36713: PUSH
36714: EMPTY
36715: LIST
36716: LIST
36717: PUSH
36718: EMPTY
36719: LIST
36720: LIST
36721: LIST
36722: PPUSH
36723: CALL_OW 72
36727: IFFALSE 36815
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
36729: LD_ADDR_VAR 0 8
36733: PUSH
36734: LD_VAR 0 18
36738: PPUSH
36739: LD_INT 2
36741: PUSH
36742: LD_INT 30
36744: PUSH
36745: LD_INT 32
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: PUSH
36752: LD_INT 30
36754: PUSH
36755: LD_INT 33
36757: PUSH
36758: EMPTY
36759: LIST
36760: LIST
36761: PUSH
36762: EMPTY
36763: LIST
36764: LIST
36765: LIST
36766: PPUSH
36767: CALL_OW 72
36771: PUSH
36772: FOR_IN
36773: IFFALSE 36813
// begin if not GetBWeapon ( i ) then
36775: LD_VAR 0 8
36779: PPUSH
36780: CALL_OW 269
36784: NOT
36785: IFFALSE 36811
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36787: LD_VAR 0 8
36791: PPUSH
36792: LD_VAR 0 8
36796: PPUSH
36797: LD_VAR 0 2
36801: PPUSH
36802: CALL 38061 0 2
36806: PPUSH
36807: CALL_OW 431
// end ;
36811: GO 36772
36813: POP
36814: POP
// end ; for i = 1 to personel do
36815: LD_ADDR_VAR 0 8
36819: PUSH
36820: DOUBLE
36821: LD_INT 1
36823: DEC
36824: ST_TO_ADDR
36825: LD_VAR 0 6
36829: PUSH
36830: FOR_TO
36831: IFFALSE 37895
// begin if i > 4 then
36833: LD_VAR 0 8
36837: PUSH
36838: LD_INT 4
36840: GREATER
36841: IFFALSE 36845
// break ;
36843: GO 37895
// case i of 1 :
36845: LD_VAR 0 8
36849: PUSH
36850: LD_INT 1
36852: DOUBLE
36853: EQUAL
36854: IFTRUE 36858
36856: GO 36938
36858: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36859: LD_ADDR_VAR 0 12
36863: PUSH
36864: LD_VAR 0 18
36868: PPUSH
36869: LD_INT 22
36871: PUSH
36872: LD_VAR 0 16
36876: PUSH
36877: EMPTY
36878: LIST
36879: LIST
36880: PUSH
36881: LD_INT 58
36883: PUSH
36884: EMPTY
36885: LIST
36886: PUSH
36887: LD_INT 2
36889: PUSH
36890: LD_INT 30
36892: PUSH
36893: LD_INT 32
36895: PUSH
36896: EMPTY
36897: LIST
36898: LIST
36899: PUSH
36900: LD_INT 30
36902: PUSH
36903: LD_INT 4
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: PUSH
36910: LD_INT 30
36912: PUSH
36913: LD_INT 5
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: LIST
36924: LIST
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: LIST
36930: PPUSH
36931: CALL_OW 72
36935: ST_TO_ADDR
36936: GO 37160
36938: LD_INT 2
36940: DOUBLE
36941: EQUAL
36942: IFTRUE 36946
36944: GO 37008
36946: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
36947: LD_ADDR_VAR 0 12
36951: PUSH
36952: LD_VAR 0 18
36956: PPUSH
36957: LD_INT 22
36959: PUSH
36960: LD_VAR 0 16
36964: PUSH
36965: EMPTY
36966: LIST
36967: LIST
36968: PUSH
36969: LD_INT 2
36971: PUSH
36972: LD_INT 30
36974: PUSH
36975: LD_INT 0
36977: PUSH
36978: EMPTY
36979: LIST
36980: LIST
36981: PUSH
36982: LD_INT 30
36984: PUSH
36985: LD_INT 1
36987: PUSH
36988: EMPTY
36989: LIST
36990: LIST
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: LIST
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: PPUSH
37001: CALL_OW 72
37005: ST_TO_ADDR
37006: GO 37160
37008: LD_INT 3
37010: DOUBLE
37011: EQUAL
37012: IFTRUE 37016
37014: GO 37078
37016: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37017: LD_ADDR_VAR 0 12
37021: PUSH
37022: LD_VAR 0 18
37026: PPUSH
37027: LD_INT 22
37029: PUSH
37030: LD_VAR 0 16
37034: PUSH
37035: EMPTY
37036: LIST
37037: LIST
37038: PUSH
37039: LD_INT 2
37041: PUSH
37042: LD_INT 30
37044: PUSH
37045: LD_INT 2
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: PUSH
37052: LD_INT 30
37054: PUSH
37055: LD_INT 3
37057: PUSH
37058: EMPTY
37059: LIST
37060: LIST
37061: PUSH
37062: EMPTY
37063: LIST
37064: LIST
37065: LIST
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: PPUSH
37071: CALL_OW 72
37075: ST_TO_ADDR
37076: GO 37160
37078: LD_INT 4
37080: DOUBLE
37081: EQUAL
37082: IFTRUE 37086
37084: GO 37159
37086: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37087: LD_ADDR_VAR 0 12
37091: PUSH
37092: LD_VAR 0 18
37096: PPUSH
37097: LD_INT 22
37099: PUSH
37100: LD_VAR 0 16
37104: PUSH
37105: EMPTY
37106: LIST
37107: LIST
37108: PUSH
37109: LD_INT 2
37111: PUSH
37112: LD_INT 30
37114: PUSH
37115: LD_INT 6
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: PUSH
37122: LD_INT 30
37124: PUSH
37125: LD_INT 7
37127: PUSH
37128: EMPTY
37129: LIST
37130: LIST
37131: PUSH
37132: LD_INT 30
37134: PUSH
37135: LD_INT 8
37137: PUSH
37138: EMPTY
37139: LIST
37140: LIST
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: LIST
37146: LIST
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PPUSH
37152: CALL_OW 72
37156: ST_TO_ADDR
37157: GO 37160
37159: POP
// if i = 1 then
37160: LD_VAR 0 8
37164: PUSH
37165: LD_INT 1
37167: EQUAL
37168: IFFALSE 37279
// begin tmp := [ ] ;
37170: LD_ADDR_VAR 0 19
37174: PUSH
37175: EMPTY
37176: ST_TO_ADDR
// for j in f do
37177: LD_ADDR_VAR 0 9
37181: PUSH
37182: LD_VAR 0 12
37186: PUSH
37187: FOR_IN
37188: IFFALSE 37261
// if GetBType ( j ) = b_bunker then
37190: LD_VAR 0 9
37194: PPUSH
37195: CALL_OW 266
37199: PUSH
37200: LD_INT 32
37202: EQUAL
37203: IFFALSE 37230
// tmp := Insert ( tmp , 1 , j ) else
37205: LD_ADDR_VAR 0 19
37209: PUSH
37210: LD_VAR 0 19
37214: PPUSH
37215: LD_INT 1
37217: PPUSH
37218: LD_VAR 0 9
37222: PPUSH
37223: CALL_OW 2
37227: ST_TO_ADDR
37228: GO 37259
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37230: LD_ADDR_VAR 0 19
37234: PUSH
37235: LD_VAR 0 19
37239: PPUSH
37240: LD_VAR 0 19
37244: PUSH
37245: LD_INT 1
37247: PLUS
37248: PPUSH
37249: LD_VAR 0 9
37253: PPUSH
37254: CALL_OW 2
37258: ST_TO_ADDR
37259: GO 37187
37261: POP
37262: POP
// if tmp then
37263: LD_VAR 0 19
37267: IFFALSE 37279
// f := tmp ;
37269: LD_ADDR_VAR 0 12
37273: PUSH
37274: LD_VAR 0 19
37278: ST_TO_ADDR
// end ; x := personel [ i ] ;
37279: LD_ADDR_VAR 0 13
37283: PUSH
37284: LD_VAR 0 6
37288: PUSH
37289: LD_VAR 0 8
37293: ARRAY
37294: ST_TO_ADDR
// if x = - 1 then
37295: LD_VAR 0 13
37299: PUSH
37300: LD_INT 1
37302: NEG
37303: EQUAL
37304: IFFALSE 37513
// begin for j in f do
37306: LD_ADDR_VAR 0 9
37310: PUSH
37311: LD_VAR 0 12
37315: PUSH
37316: FOR_IN
37317: IFFALSE 37509
// repeat InitHc ;
37319: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37323: LD_VAR 0 9
37327: PPUSH
37328: CALL_OW 266
37332: PUSH
37333: LD_INT 5
37335: EQUAL
37336: IFFALSE 37406
// begin if UnitsInside ( j ) < 3 then
37338: LD_VAR 0 9
37342: PPUSH
37343: CALL_OW 313
37347: PUSH
37348: LD_INT 3
37350: LESS
37351: IFFALSE 37387
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37353: LD_INT 0
37355: PPUSH
37356: LD_INT 5
37358: PUSH
37359: LD_INT 8
37361: PUSH
37362: LD_INT 9
37364: PUSH
37365: EMPTY
37366: LIST
37367: LIST
37368: LIST
37369: PUSH
37370: LD_VAR 0 17
37374: ARRAY
37375: PPUSH
37376: LD_VAR 0 4
37380: PPUSH
37381: CALL_OW 380
37385: GO 37404
// PrepareHuman ( false , i , skill ) ;
37387: LD_INT 0
37389: PPUSH
37390: LD_VAR 0 8
37394: PPUSH
37395: LD_VAR 0 4
37399: PPUSH
37400: CALL_OW 380
// end else
37404: GO 37423
// PrepareHuman ( false , i , skill ) ;
37406: LD_INT 0
37408: PPUSH
37409: LD_VAR 0 8
37413: PPUSH
37414: LD_VAR 0 4
37418: PPUSH
37419: CALL_OW 380
// un := CreateHuman ;
37423: LD_ADDR_VAR 0 14
37427: PUSH
37428: CALL_OW 44
37432: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37433: LD_ADDR_VAR 0 7
37437: PUSH
37438: LD_VAR 0 7
37442: PPUSH
37443: LD_INT 1
37445: PPUSH
37446: LD_VAR 0 14
37450: PPUSH
37451: CALL_OW 2
37455: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
37456: LD_VAR 0 14
37460: PPUSH
37461: LD_VAR 0 9
37465: PPUSH
37466: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
37470: LD_VAR 0 9
37474: PPUSH
37475: CALL_OW 313
37479: PUSH
37480: LD_INT 6
37482: EQUAL
37483: PUSH
37484: LD_VAR 0 9
37488: PPUSH
37489: CALL_OW 266
37493: PUSH
37494: LD_INT 32
37496: PUSH
37497: LD_INT 31
37499: PUSH
37500: EMPTY
37501: LIST
37502: LIST
37503: IN
37504: OR
37505: IFFALSE 37319
37507: GO 37316
37509: POP
37510: POP
// end else
37511: GO 37893
// for j = 1 to x do
37513: LD_ADDR_VAR 0 9
37517: PUSH
37518: DOUBLE
37519: LD_INT 1
37521: DEC
37522: ST_TO_ADDR
37523: LD_VAR 0 13
37527: PUSH
37528: FOR_TO
37529: IFFALSE 37891
// begin InitHc ;
37531: CALL_OW 19
// if not f then
37535: LD_VAR 0 12
37539: NOT
37540: IFFALSE 37629
// begin PrepareHuman ( false , i , skill ) ;
37542: LD_INT 0
37544: PPUSH
37545: LD_VAR 0 8
37549: PPUSH
37550: LD_VAR 0 4
37554: PPUSH
37555: CALL_OW 380
// un := CreateHuman ;
37559: LD_ADDR_VAR 0 14
37563: PUSH
37564: CALL_OW 44
37568: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37569: LD_ADDR_VAR 0 7
37573: PUSH
37574: LD_VAR 0 7
37578: PPUSH
37579: LD_INT 1
37581: PPUSH
37582: LD_VAR 0 14
37586: PPUSH
37587: CALL_OW 2
37591: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37592: LD_VAR 0 14
37596: PPUSH
37597: LD_VAR 0 1
37601: PPUSH
37602: CALL_OW 250
37606: PPUSH
37607: LD_VAR 0 1
37611: PPUSH
37612: CALL_OW 251
37616: PPUSH
37617: LD_INT 10
37619: PPUSH
37620: LD_INT 0
37622: PPUSH
37623: CALL_OW 50
// continue ;
37627: GO 37528
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
37629: LD_VAR 0 12
37633: PUSH
37634: LD_INT 1
37636: ARRAY
37637: PPUSH
37638: CALL_OW 313
37642: PUSH
37643: LD_VAR 0 12
37647: PUSH
37648: LD_INT 1
37650: ARRAY
37651: PPUSH
37652: CALL_OW 266
37656: PUSH
37657: LD_INT 32
37659: PUSH
37660: LD_INT 31
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: IN
37667: AND
37668: PUSH
37669: LD_VAR 0 12
37673: PUSH
37674: LD_INT 1
37676: ARRAY
37677: PPUSH
37678: CALL_OW 313
37682: PUSH
37683: LD_INT 6
37685: EQUAL
37686: OR
37687: IFFALSE 37707
// f := Delete ( f , 1 ) ;
37689: LD_ADDR_VAR 0 12
37693: PUSH
37694: LD_VAR 0 12
37698: PPUSH
37699: LD_INT 1
37701: PPUSH
37702: CALL_OW 3
37706: ST_TO_ADDR
// if not f then
37707: LD_VAR 0 12
37711: NOT
37712: IFFALSE 37730
// begin x := x + 2 ;
37714: LD_ADDR_VAR 0 13
37718: PUSH
37719: LD_VAR 0 13
37723: PUSH
37724: LD_INT 2
37726: PLUS
37727: ST_TO_ADDR
// continue ;
37728: GO 37528
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
37730: LD_VAR 0 12
37734: PUSH
37735: LD_INT 1
37737: ARRAY
37738: PPUSH
37739: CALL_OW 266
37743: PUSH
37744: LD_INT 5
37746: EQUAL
37747: IFFALSE 37821
// begin if UnitsInside ( f [ 1 ] ) < 3 then
37749: LD_VAR 0 12
37753: PUSH
37754: LD_INT 1
37756: ARRAY
37757: PPUSH
37758: CALL_OW 313
37762: PUSH
37763: LD_INT 3
37765: LESS
37766: IFFALSE 37802
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37768: LD_INT 0
37770: PPUSH
37771: LD_INT 5
37773: PUSH
37774: LD_INT 8
37776: PUSH
37777: LD_INT 9
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: LIST
37784: PUSH
37785: LD_VAR 0 17
37789: ARRAY
37790: PPUSH
37791: LD_VAR 0 4
37795: PPUSH
37796: CALL_OW 380
37800: GO 37819
// PrepareHuman ( false , i , skill ) ;
37802: LD_INT 0
37804: PPUSH
37805: LD_VAR 0 8
37809: PPUSH
37810: LD_VAR 0 4
37814: PPUSH
37815: CALL_OW 380
// end else
37819: GO 37838
// PrepareHuman ( false , i , skill ) ;
37821: LD_INT 0
37823: PPUSH
37824: LD_VAR 0 8
37828: PPUSH
37829: LD_VAR 0 4
37833: PPUSH
37834: CALL_OW 380
// un := CreateHuman ;
37838: LD_ADDR_VAR 0 14
37842: PUSH
37843: CALL_OW 44
37847: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37848: LD_ADDR_VAR 0 7
37852: PUSH
37853: LD_VAR 0 7
37857: PPUSH
37858: LD_INT 1
37860: PPUSH
37861: LD_VAR 0 14
37865: PPUSH
37866: CALL_OW 2
37870: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
37871: LD_VAR 0 14
37875: PPUSH
37876: LD_VAR 0 12
37880: PUSH
37881: LD_INT 1
37883: ARRAY
37884: PPUSH
37885: CALL_OW 52
// end ;
37889: GO 37528
37891: POP
37892: POP
// end ;
37893: GO 36830
37895: POP
37896: POP
// result := result ^ buildings ;
37897: LD_ADDR_VAR 0 7
37901: PUSH
37902: LD_VAR 0 7
37906: PUSH
37907: LD_VAR 0 18
37911: ADD
37912: ST_TO_ADDR
// end else
37913: GO 38056
// begin for i = 1 to personel do
37915: LD_ADDR_VAR 0 8
37919: PUSH
37920: DOUBLE
37921: LD_INT 1
37923: DEC
37924: ST_TO_ADDR
37925: LD_VAR 0 6
37929: PUSH
37930: FOR_TO
37931: IFFALSE 38054
// begin if i > 4 then
37933: LD_VAR 0 8
37937: PUSH
37938: LD_INT 4
37940: GREATER
37941: IFFALSE 37945
// break ;
37943: GO 38054
// x := personel [ i ] ;
37945: LD_ADDR_VAR 0 13
37949: PUSH
37950: LD_VAR 0 6
37954: PUSH
37955: LD_VAR 0 8
37959: ARRAY
37960: ST_TO_ADDR
// if x = - 1 then
37961: LD_VAR 0 13
37965: PUSH
37966: LD_INT 1
37968: NEG
37969: EQUAL
37970: IFFALSE 37974
// continue ;
37972: GO 37930
// PrepareHuman ( false , i , skill ) ;
37974: LD_INT 0
37976: PPUSH
37977: LD_VAR 0 8
37981: PPUSH
37982: LD_VAR 0 4
37986: PPUSH
37987: CALL_OW 380
// un := CreateHuman ;
37991: LD_ADDR_VAR 0 14
37995: PUSH
37996: CALL_OW 44
38000: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38001: LD_VAR 0 14
38005: PPUSH
38006: LD_VAR 0 1
38010: PPUSH
38011: CALL_OW 250
38015: PPUSH
38016: LD_VAR 0 1
38020: PPUSH
38021: CALL_OW 251
38025: PPUSH
38026: LD_INT 10
38028: PPUSH
38029: LD_INT 0
38031: PPUSH
38032: CALL_OW 50
// result := result ^ un ;
38036: LD_ADDR_VAR 0 7
38040: PUSH
38041: LD_VAR 0 7
38045: PUSH
38046: LD_VAR 0 14
38050: ADD
38051: ST_TO_ADDR
// end ;
38052: GO 37930
38054: POP
38055: POP
// end ; end ;
38056: LD_VAR 0 7
38060: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38061: LD_INT 0
38063: PPUSH
38064: PPUSH
38065: PPUSH
38066: PPUSH
38067: PPUSH
38068: PPUSH
38069: PPUSH
38070: PPUSH
38071: PPUSH
38072: PPUSH
38073: PPUSH
38074: PPUSH
38075: PPUSH
38076: PPUSH
38077: PPUSH
38078: PPUSH
// result := false ;
38079: LD_ADDR_VAR 0 3
38083: PUSH
38084: LD_INT 0
38086: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38087: LD_VAR 0 1
38091: NOT
38092: PUSH
38093: LD_VAR 0 1
38097: PPUSH
38098: CALL_OW 266
38102: PUSH
38103: LD_INT 32
38105: PUSH
38106: LD_INT 33
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: IN
38113: NOT
38114: OR
38115: IFFALSE 38119
// exit ;
38117: GO 39228
// nat := GetNation ( tower ) ;
38119: LD_ADDR_VAR 0 12
38123: PUSH
38124: LD_VAR 0 1
38128: PPUSH
38129: CALL_OW 248
38133: ST_TO_ADDR
// side := GetSide ( tower ) ;
38134: LD_ADDR_VAR 0 16
38138: PUSH
38139: LD_VAR 0 1
38143: PPUSH
38144: CALL_OW 255
38148: ST_TO_ADDR
// x := GetX ( tower ) ;
38149: LD_ADDR_VAR 0 10
38153: PUSH
38154: LD_VAR 0 1
38158: PPUSH
38159: CALL_OW 250
38163: ST_TO_ADDR
// y := GetY ( tower ) ;
38164: LD_ADDR_VAR 0 11
38168: PUSH
38169: LD_VAR 0 1
38173: PPUSH
38174: CALL_OW 251
38178: ST_TO_ADDR
// if not x or not y then
38179: LD_VAR 0 10
38183: NOT
38184: PUSH
38185: LD_VAR 0 11
38189: NOT
38190: OR
38191: IFFALSE 38195
// exit ;
38193: GO 39228
// weapon := 0 ;
38195: LD_ADDR_VAR 0 18
38199: PUSH
38200: LD_INT 0
38202: ST_TO_ADDR
// fac_list := [ ] ;
38203: LD_ADDR_VAR 0 17
38207: PUSH
38208: EMPTY
38209: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
38210: LD_ADDR_VAR 0 6
38214: PUSH
38215: LD_VAR 0 1
38219: PPUSH
38220: CALL_OW 274
38224: PPUSH
38225: LD_VAR 0 2
38229: PPUSH
38230: LD_INT 0
38232: PPUSH
38233: CALL 35799 0 3
38237: PPUSH
38238: LD_INT 30
38240: PUSH
38241: LD_INT 3
38243: PUSH
38244: EMPTY
38245: LIST
38246: LIST
38247: PPUSH
38248: CALL_OW 72
38252: ST_TO_ADDR
// if not factories then
38253: LD_VAR 0 6
38257: NOT
38258: IFFALSE 38262
// exit ;
38260: GO 39228
// for i in factories do
38262: LD_ADDR_VAR 0 8
38266: PUSH
38267: LD_VAR 0 6
38271: PUSH
38272: FOR_IN
38273: IFFALSE 38298
// fac_list := fac_list union AvailableWeaponList ( i ) ;
38275: LD_ADDR_VAR 0 17
38279: PUSH
38280: LD_VAR 0 17
38284: PUSH
38285: LD_VAR 0 8
38289: PPUSH
38290: CALL_OW 478
38294: UNION
38295: ST_TO_ADDR
38296: GO 38272
38298: POP
38299: POP
// if not fac_list then
38300: LD_VAR 0 17
38304: NOT
38305: IFFALSE 38309
// exit ;
38307: GO 39228
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
38309: LD_ADDR_VAR 0 5
38313: PUSH
38314: LD_INT 4
38316: PUSH
38317: LD_INT 5
38319: PUSH
38320: LD_INT 9
38322: PUSH
38323: LD_INT 10
38325: PUSH
38326: LD_INT 6
38328: PUSH
38329: LD_INT 7
38331: PUSH
38332: LD_INT 11
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: LIST
38339: LIST
38340: LIST
38341: LIST
38342: LIST
38343: PUSH
38344: LD_INT 27
38346: PUSH
38347: LD_INT 28
38349: PUSH
38350: LD_INT 26
38352: PUSH
38353: LD_INT 30
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: LIST
38360: LIST
38361: PUSH
38362: LD_INT 43
38364: PUSH
38365: LD_INT 44
38367: PUSH
38368: LD_INT 46
38370: PUSH
38371: LD_INT 45
38373: PUSH
38374: LD_INT 47
38376: PUSH
38377: LD_INT 49
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: LIST
38384: LIST
38385: LIST
38386: LIST
38387: PUSH
38388: EMPTY
38389: LIST
38390: LIST
38391: LIST
38392: PUSH
38393: LD_VAR 0 12
38397: ARRAY
38398: ST_TO_ADDR
// list := list isect fac_list ;
38399: LD_ADDR_VAR 0 5
38403: PUSH
38404: LD_VAR 0 5
38408: PUSH
38409: LD_VAR 0 17
38413: ISECT
38414: ST_TO_ADDR
// if not list then
38415: LD_VAR 0 5
38419: NOT
38420: IFFALSE 38424
// exit ;
38422: GO 39228
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
38424: LD_VAR 0 12
38428: PUSH
38429: LD_INT 3
38431: EQUAL
38432: PUSH
38433: LD_INT 49
38435: PUSH
38436: LD_VAR 0 5
38440: IN
38441: AND
38442: PUSH
38443: LD_INT 31
38445: PPUSH
38446: LD_VAR 0 16
38450: PPUSH
38451: CALL_OW 321
38455: PUSH
38456: LD_INT 2
38458: EQUAL
38459: AND
38460: IFFALSE 38520
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
38462: LD_INT 22
38464: PUSH
38465: LD_VAR 0 16
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: PUSH
38474: LD_INT 35
38476: PUSH
38477: LD_INT 49
38479: PUSH
38480: EMPTY
38481: LIST
38482: LIST
38483: PUSH
38484: LD_INT 91
38486: PUSH
38487: LD_VAR 0 1
38491: PUSH
38492: LD_INT 10
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: LIST
38499: PUSH
38500: EMPTY
38501: LIST
38502: LIST
38503: LIST
38504: PPUSH
38505: CALL_OW 69
38509: NOT
38510: IFFALSE 38520
// weapon := ru_time_lapser ;
38512: LD_ADDR_VAR 0 18
38516: PUSH
38517: LD_INT 49
38519: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
38520: LD_VAR 0 12
38524: PUSH
38525: LD_INT 1
38527: PUSH
38528: LD_INT 2
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: IN
38535: PUSH
38536: LD_INT 11
38538: PUSH
38539: LD_VAR 0 5
38543: IN
38544: PUSH
38545: LD_INT 30
38547: PUSH
38548: LD_VAR 0 5
38552: IN
38553: OR
38554: AND
38555: PUSH
38556: LD_INT 6
38558: PPUSH
38559: LD_VAR 0 16
38563: PPUSH
38564: CALL_OW 321
38568: PUSH
38569: LD_INT 2
38571: EQUAL
38572: AND
38573: IFFALSE 38738
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
38575: LD_INT 22
38577: PUSH
38578: LD_VAR 0 16
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: LD_INT 2
38589: PUSH
38590: LD_INT 35
38592: PUSH
38593: LD_INT 11
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: PUSH
38600: LD_INT 35
38602: PUSH
38603: LD_INT 30
38605: PUSH
38606: EMPTY
38607: LIST
38608: LIST
38609: PUSH
38610: EMPTY
38611: LIST
38612: LIST
38613: LIST
38614: PUSH
38615: LD_INT 91
38617: PUSH
38618: LD_VAR 0 1
38622: PUSH
38623: LD_INT 18
38625: PUSH
38626: EMPTY
38627: LIST
38628: LIST
38629: LIST
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: LIST
38635: PPUSH
38636: CALL_OW 69
38640: NOT
38641: PUSH
38642: LD_INT 22
38644: PUSH
38645: LD_VAR 0 16
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PUSH
38654: LD_INT 2
38656: PUSH
38657: LD_INT 30
38659: PUSH
38660: LD_INT 32
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: PUSH
38667: LD_INT 30
38669: PUSH
38670: LD_INT 33
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: PUSH
38677: EMPTY
38678: LIST
38679: LIST
38680: LIST
38681: PUSH
38682: LD_INT 91
38684: PUSH
38685: LD_VAR 0 1
38689: PUSH
38690: LD_INT 12
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: LIST
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: LIST
38702: PUSH
38703: EMPTY
38704: LIST
38705: PPUSH
38706: CALL_OW 69
38710: PUSH
38711: LD_INT 2
38713: GREATER
38714: AND
38715: IFFALSE 38738
// weapon := [ us_radar , ar_radar ] [ nat ] ;
38717: LD_ADDR_VAR 0 18
38721: PUSH
38722: LD_INT 11
38724: PUSH
38725: LD_INT 30
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: PUSH
38732: LD_VAR 0 12
38736: ARRAY
38737: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
38738: LD_VAR 0 18
38742: NOT
38743: PUSH
38744: LD_INT 40
38746: PPUSH
38747: LD_VAR 0 16
38751: PPUSH
38752: CALL_OW 321
38756: PUSH
38757: LD_INT 2
38759: EQUAL
38760: AND
38761: PUSH
38762: LD_INT 7
38764: PUSH
38765: LD_VAR 0 5
38769: IN
38770: PUSH
38771: LD_INT 28
38773: PUSH
38774: LD_VAR 0 5
38778: IN
38779: OR
38780: PUSH
38781: LD_INT 45
38783: PUSH
38784: LD_VAR 0 5
38788: IN
38789: OR
38790: AND
38791: IFFALSE 39045
// begin hex := GetHexInfo ( x , y ) ;
38793: LD_ADDR_VAR 0 4
38797: PUSH
38798: LD_VAR 0 10
38802: PPUSH
38803: LD_VAR 0 11
38807: PPUSH
38808: CALL_OW 546
38812: ST_TO_ADDR
// if hex [ 1 ] then
38813: LD_VAR 0 4
38817: PUSH
38818: LD_INT 1
38820: ARRAY
38821: IFFALSE 38825
// exit ;
38823: GO 39228
// height := hex [ 2 ] ;
38825: LD_ADDR_VAR 0 15
38829: PUSH
38830: LD_VAR 0 4
38834: PUSH
38835: LD_INT 2
38837: ARRAY
38838: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
38839: LD_ADDR_VAR 0 14
38843: PUSH
38844: LD_INT 0
38846: PUSH
38847: LD_INT 2
38849: PUSH
38850: LD_INT 3
38852: PUSH
38853: LD_INT 5
38855: PUSH
38856: EMPTY
38857: LIST
38858: LIST
38859: LIST
38860: LIST
38861: ST_TO_ADDR
// for i in tmp do
38862: LD_ADDR_VAR 0 8
38866: PUSH
38867: LD_VAR 0 14
38871: PUSH
38872: FOR_IN
38873: IFFALSE 39043
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
38875: LD_ADDR_VAR 0 9
38879: PUSH
38880: LD_VAR 0 10
38884: PPUSH
38885: LD_VAR 0 8
38889: PPUSH
38890: LD_INT 5
38892: PPUSH
38893: CALL_OW 272
38897: PUSH
38898: LD_VAR 0 11
38902: PPUSH
38903: LD_VAR 0 8
38907: PPUSH
38908: LD_INT 5
38910: PPUSH
38911: CALL_OW 273
38915: PUSH
38916: EMPTY
38917: LIST
38918: LIST
38919: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
38920: LD_VAR 0 9
38924: PUSH
38925: LD_INT 1
38927: ARRAY
38928: PPUSH
38929: LD_VAR 0 9
38933: PUSH
38934: LD_INT 2
38936: ARRAY
38937: PPUSH
38938: CALL_OW 488
38942: IFFALSE 39041
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38944: LD_ADDR_VAR 0 4
38948: PUSH
38949: LD_VAR 0 9
38953: PUSH
38954: LD_INT 1
38956: ARRAY
38957: PPUSH
38958: LD_VAR 0 9
38962: PUSH
38963: LD_INT 2
38965: ARRAY
38966: PPUSH
38967: CALL_OW 546
38971: ST_TO_ADDR
// if hex [ 1 ] then
38972: LD_VAR 0 4
38976: PUSH
38977: LD_INT 1
38979: ARRAY
38980: IFFALSE 38984
// continue ;
38982: GO 38872
// h := hex [ 2 ] ;
38984: LD_ADDR_VAR 0 13
38988: PUSH
38989: LD_VAR 0 4
38993: PUSH
38994: LD_INT 2
38996: ARRAY
38997: ST_TO_ADDR
// if h + 7 < height then
38998: LD_VAR 0 13
39002: PUSH
39003: LD_INT 7
39005: PLUS
39006: PUSH
39007: LD_VAR 0 15
39011: LESS
39012: IFFALSE 39041
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39014: LD_ADDR_VAR 0 18
39018: PUSH
39019: LD_INT 7
39021: PUSH
39022: LD_INT 28
39024: PUSH
39025: LD_INT 45
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: LIST
39032: PUSH
39033: LD_VAR 0 12
39037: ARRAY
39038: ST_TO_ADDR
// break ;
39039: GO 39043
// end ; end ; end ;
39041: GO 38872
39043: POP
39044: POP
// end ; if not weapon then
39045: LD_VAR 0 18
39049: NOT
39050: IFFALSE 39110
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39052: LD_ADDR_VAR 0 5
39056: PUSH
39057: LD_VAR 0 5
39061: PUSH
39062: LD_INT 11
39064: PUSH
39065: LD_INT 30
39067: PUSH
39068: LD_INT 49
39070: PUSH
39071: EMPTY
39072: LIST
39073: LIST
39074: LIST
39075: DIFF
39076: ST_TO_ADDR
// if not list then
39077: LD_VAR 0 5
39081: NOT
39082: IFFALSE 39086
// exit ;
39084: GO 39228
// weapon := list [ rand ( 1 , list ) ] ;
39086: LD_ADDR_VAR 0 18
39090: PUSH
39091: LD_VAR 0 5
39095: PUSH
39096: LD_INT 1
39098: PPUSH
39099: LD_VAR 0 5
39103: PPUSH
39104: CALL_OW 12
39108: ARRAY
39109: ST_TO_ADDR
// end ; if weapon then
39110: LD_VAR 0 18
39114: IFFALSE 39228
// begin tmp := CostOfWeapon ( weapon ) ;
39116: LD_ADDR_VAR 0 14
39120: PUSH
39121: LD_VAR 0 18
39125: PPUSH
39126: CALL_OW 451
39130: ST_TO_ADDR
// j := GetBase ( tower ) ;
39131: LD_ADDR_VAR 0 9
39135: PUSH
39136: LD_VAR 0 1
39140: PPUSH
39141: CALL_OW 274
39145: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39146: LD_VAR 0 9
39150: PPUSH
39151: LD_INT 1
39153: PPUSH
39154: CALL_OW 275
39158: PUSH
39159: LD_VAR 0 14
39163: PUSH
39164: LD_INT 1
39166: ARRAY
39167: GREATEREQUAL
39168: PUSH
39169: LD_VAR 0 9
39173: PPUSH
39174: LD_INT 2
39176: PPUSH
39177: CALL_OW 275
39181: PUSH
39182: LD_VAR 0 14
39186: PUSH
39187: LD_INT 2
39189: ARRAY
39190: GREATEREQUAL
39191: AND
39192: PUSH
39193: LD_VAR 0 9
39197: PPUSH
39198: LD_INT 3
39200: PPUSH
39201: CALL_OW 275
39205: PUSH
39206: LD_VAR 0 14
39210: PUSH
39211: LD_INT 3
39213: ARRAY
39214: GREATEREQUAL
39215: AND
39216: IFFALSE 39228
// result := weapon ;
39218: LD_ADDR_VAR 0 3
39222: PUSH
39223: LD_VAR 0 18
39227: ST_TO_ADDR
// end ; end ;
39228: LD_VAR 0 3
39232: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39233: LD_INT 0
39235: PPUSH
39236: PPUSH
// result := true ;
39237: LD_ADDR_VAR 0 3
39241: PUSH
39242: LD_INT 1
39244: ST_TO_ADDR
// if array1 = array2 then
39245: LD_VAR 0 1
39249: PUSH
39250: LD_VAR 0 2
39254: EQUAL
39255: IFFALSE 39315
// begin for i = 1 to array1 do
39257: LD_ADDR_VAR 0 4
39261: PUSH
39262: DOUBLE
39263: LD_INT 1
39265: DEC
39266: ST_TO_ADDR
39267: LD_VAR 0 1
39271: PUSH
39272: FOR_TO
39273: IFFALSE 39311
// if array1 [ i ] <> array2 [ i ] then
39275: LD_VAR 0 1
39279: PUSH
39280: LD_VAR 0 4
39284: ARRAY
39285: PUSH
39286: LD_VAR 0 2
39290: PUSH
39291: LD_VAR 0 4
39295: ARRAY
39296: NONEQUAL
39297: IFFALSE 39309
// begin result := false ;
39299: LD_ADDR_VAR 0 3
39303: PUSH
39304: LD_INT 0
39306: ST_TO_ADDR
// break ;
39307: GO 39311
// end ;
39309: GO 39272
39311: POP
39312: POP
// end else
39313: GO 39323
// result := false ;
39315: LD_ADDR_VAR 0 3
39319: PUSH
39320: LD_INT 0
39322: ST_TO_ADDR
// end ;
39323: LD_VAR 0 3
39327: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
39328: LD_INT 0
39330: PPUSH
39331: PPUSH
// if not array1 or not array2 then
39332: LD_VAR 0 1
39336: NOT
39337: PUSH
39338: LD_VAR 0 2
39342: NOT
39343: OR
39344: IFFALSE 39348
// exit ;
39346: GO 39412
// result := true ;
39348: LD_ADDR_VAR 0 3
39352: PUSH
39353: LD_INT 1
39355: ST_TO_ADDR
// for i = 1 to array1 do
39356: LD_ADDR_VAR 0 4
39360: PUSH
39361: DOUBLE
39362: LD_INT 1
39364: DEC
39365: ST_TO_ADDR
39366: LD_VAR 0 1
39370: PUSH
39371: FOR_TO
39372: IFFALSE 39410
// if array1 [ i ] <> array2 [ i ] then
39374: LD_VAR 0 1
39378: PUSH
39379: LD_VAR 0 4
39383: ARRAY
39384: PUSH
39385: LD_VAR 0 2
39389: PUSH
39390: LD_VAR 0 4
39394: ARRAY
39395: NONEQUAL
39396: IFFALSE 39408
// begin result := false ;
39398: LD_ADDR_VAR 0 3
39402: PUSH
39403: LD_INT 0
39405: ST_TO_ADDR
// break ;
39406: GO 39410
// end ;
39408: GO 39371
39410: POP
39411: POP
// end ;
39412: LD_VAR 0 3
39416: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
39417: LD_INT 0
39419: PPUSH
39420: PPUSH
39421: PPUSH
// pom := GetBase ( fac ) ;
39422: LD_ADDR_VAR 0 5
39426: PUSH
39427: LD_VAR 0 1
39431: PPUSH
39432: CALL_OW 274
39436: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
39437: LD_ADDR_VAR 0 4
39441: PUSH
39442: LD_VAR 0 2
39446: PUSH
39447: LD_INT 1
39449: ARRAY
39450: PPUSH
39451: LD_VAR 0 2
39455: PUSH
39456: LD_INT 2
39458: ARRAY
39459: PPUSH
39460: LD_VAR 0 2
39464: PUSH
39465: LD_INT 3
39467: ARRAY
39468: PPUSH
39469: LD_VAR 0 2
39473: PUSH
39474: LD_INT 4
39476: ARRAY
39477: PPUSH
39478: CALL_OW 449
39482: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39483: LD_ADDR_VAR 0 3
39487: PUSH
39488: LD_VAR 0 5
39492: PPUSH
39493: LD_INT 1
39495: PPUSH
39496: CALL_OW 275
39500: PUSH
39501: LD_VAR 0 4
39505: PUSH
39506: LD_INT 1
39508: ARRAY
39509: GREATEREQUAL
39510: PUSH
39511: LD_VAR 0 5
39515: PPUSH
39516: LD_INT 2
39518: PPUSH
39519: CALL_OW 275
39523: PUSH
39524: LD_VAR 0 4
39528: PUSH
39529: LD_INT 2
39531: ARRAY
39532: GREATEREQUAL
39533: AND
39534: PUSH
39535: LD_VAR 0 5
39539: PPUSH
39540: LD_INT 3
39542: PPUSH
39543: CALL_OW 275
39547: PUSH
39548: LD_VAR 0 4
39552: PUSH
39553: LD_INT 3
39555: ARRAY
39556: GREATEREQUAL
39557: AND
39558: ST_TO_ADDR
// end ;
39559: LD_VAR 0 3
39563: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
39564: LD_INT 0
39566: PPUSH
39567: PPUSH
39568: PPUSH
39569: PPUSH
// pom := GetBase ( building ) ;
39570: LD_ADDR_VAR 0 3
39574: PUSH
39575: LD_VAR 0 1
39579: PPUSH
39580: CALL_OW 274
39584: ST_TO_ADDR
// if not pom then
39585: LD_VAR 0 3
39589: NOT
39590: IFFALSE 39594
// exit ;
39592: GO 39764
// btype := GetBType ( building ) ;
39594: LD_ADDR_VAR 0 5
39598: PUSH
39599: LD_VAR 0 1
39603: PPUSH
39604: CALL_OW 266
39608: ST_TO_ADDR
// if btype = b_armoury then
39609: LD_VAR 0 5
39613: PUSH
39614: LD_INT 4
39616: EQUAL
39617: IFFALSE 39627
// btype := b_barracks ;
39619: LD_ADDR_VAR 0 5
39623: PUSH
39624: LD_INT 5
39626: ST_TO_ADDR
// if btype = b_depot then
39627: LD_VAR 0 5
39631: PUSH
39632: LD_INT 0
39634: EQUAL
39635: IFFALSE 39645
// btype := b_warehouse ;
39637: LD_ADDR_VAR 0 5
39641: PUSH
39642: LD_INT 1
39644: ST_TO_ADDR
// if btype = b_workshop then
39645: LD_VAR 0 5
39649: PUSH
39650: LD_INT 2
39652: EQUAL
39653: IFFALSE 39663
// btype := b_factory ;
39655: LD_ADDR_VAR 0 5
39659: PUSH
39660: LD_INT 3
39662: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39663: LD_ADDR_VAR 0 4
39667: PUSH
39668: LD_VAR 0 5
39672: PPUSH
39673: LD_VAR 0 1
39677: PPUSH
39678: CALL_OW 248
39682: PPUSH
39683: CALL_OW 450
39687: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39688: LD_ADDR_VAR 0 2
39692: PUSH
39693: LD_VAR 0 3
39697: PPUSH
39698: LD_INT 1
39700: PPUSH
39701: CALL_OW 275
39705: PUSH
39706: LD_VAR 0 4
39710: PUSH
39711: LD_INT 1
39713: ARRAY
39714: GREATEREQUAL
39715: PUSH
39716: LD_VAR 0 3
39720: PPUSH
39721: LD_INT 2
39723: PPUSH
39724: CALL_OW 275
39728: PUSH
39729: LD_VAR 0 4
39733: PUSH
39734: LD_INT 2
39736: ARRAY
39737: GREATEREQUAL
39738: AND
39739: PUSH
39740: LD_VAR 0 3
39744: PPUSH
39745: LD_INT 3
39747: PPUSH
39748: CALL_OW 275
39752: PUSH
39753: LD_VAR 0 4
39757: PUSH
39758: LD_INT 3
39760: ARRAY
39761: GREATEREQUAL
39762: AND
39763: ST_TO_ADDR
// end ;
39764: LD_VAR 0 2
39768: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39769: LD_INT 0
39771: PPUSH
39772: PPUSH
39773: PPUSH
// pom := GetBase ( building ) ;
39774: LD_ADDR_VAR 0 4
39778: PUSH
39779: LD_VAR 0 1
39783: PPUSH
39784: CALL_OW 274
39788: ST_TO_ADDR
// if not pom then
39789: LD_VAR 0 4
39793: NOT
39794: IFFALSE 39798
// exit ;
39796: GO 39899
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39798: LD_ADDR_VAR 0 5
39802: PUSH
39803: LD_VAR 0 2
39807: PPUSH
39808: LD_VAR 0 1
39812: PPUSH
39813: CALL_OW 248
39817: PPUSH
39818: CALL_OW 450
39822: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39823: LD_ADDR_VAR 0 3
39827: PUSH
39828: LD_VAR 0 4
39832: PPUSH
39833: LD_INT 1
39835: PPUSH
39836: CALL_OW 275
39840: PUSH
39841: LD_VAR 0 5
39845: PUSH
39846: LD_INT 1
39848: ARRAY
39849: GREATEREQUAL
39850: PUSH
39851: LD_VAR 0 4
39855: PPUSH
39856: LD_INT 2
39858: PPUSH
39859: CALL_OW 275
39863: PUSH
39864: LD_VAR 0 5
39868: PUSH
39869: LD_INT 2
39871: ARRAY
39872: GREATEREQUAL
39873: AND
39874: PUSH
39875: LD_VAR 0 4
39879: PPUSH
39880: LD_INT 3
39882: PPUSH
39883: CALL_OW 275
39887: PUSH
39888: LD_VAR 0 5
39892: PUSH
39893: LD_INT 3
39895: ARRAY
39896: GREATEREQUAL
39897: AND
39898: ST_TO_ADDR
// end ;
39899: LD_VAR 0 3
39903: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
39904: LD_INT 0
39906: PPUSH
39907: PPUSH
39908: PPUSH
39909: PPUSH
39910: PPUSH
39911: PPUSH
39912: PPUSH
39913: PPUSH
39914: PPUSH
39915: PPUSH
39916: PPUSH
// result := false ;
39917: LD_ADDR_VAR 0 8
39921: PUSH
39922: LD_INT 0
39924: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
39925: LD_VAR 0 5
39929: NOT
39930: PUSH
39931: LD_VAR 0 1
39935: NOT
39936: OR
39937: PUSH
39938: LD_VAR 0 2
39942: NOT
39943: OR
39944: PUSH
39945: LD_VAR 0 3
39949: NOT
39950: OR
39951: IFFALSE 39955
// exit ;
39953: GO 40769
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
39955: LD_ADDR_VAR 0 14
39959: PUSH
39960: LD_VAR 0 1
39964: PPUSH
39965: LD_VAR 0 2
39969: PPUSH
39970: LD_VAR 0 3
39974: PPUSH
39975: LD_VAR 0 4
39979: PPUSH
39980: LD_VAR 0 5
39984: PUSH
39985: LD_INT 1
39987: ARRAY
39988: PPUSH
39989: CALL_OW 248
39993: PPUSH
39994: LD_INT 0
39996: PPUSH
39997: CALL 42022 0 6
40001: ST_TO_ADDR
// if not hexes then
40002: LD_VAR 0 14
40006: NOT
40007: IFFALSE 40011
// exit ;
40009: GO 40769
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40011: LD_ADDR_VAR 0 17
40015: PUSH
40016: LD_VAR 0 5
40020: PPUSH
40021: LD_INT 22
40023: PUSH
40024: LD_VAR 0 13
40028: PPUSH
40029: CALL_OW 255
40033: PUSH
40034: EMPTY
40035: LIST
40036: LIST
40037: PUSH
40038: LD_INT 2
40040: PUSH
40041: LD_INT 30
40043: PUSH
40044: LD_INT 0
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: PUSH
40051: LD_INT 30
40053: PUSH
40054: LD_INT 1
40056: PUSH
40057: EMPTY
40058: LIST
40059: LIST
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: LIST
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PPUSH
40070: CALL_OW 72
40074: ST_TO_ADDR
// for i = 1 to hexes do
40075: LD_ADDR_VAR 0 9
40079: PUSH
40080: DOUBLE
40081: LD_INT 1
40083: DEC
40084: ST_TO_ADDR
40085: LD_VAR 0 14
40089: PUSH
40090: FOR_TO
40091: IFFALSE 40767
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40093: LD_ADDR_VAR 0 13
40097: PUSH
40098: LD_VAR 0 14
40102: PUSH
40103: LD_VAR 0 9
40107: ARRAY
40108: PUSH
40109: LD_INT 1
40111: ARRAY
40112: PPUSH
40113: LD_VAR 0 14
40117: PUSH
40118: LD_VAR 0 9
40122: ARRAY
40123: PUSH
40124: LD_INT 2
40126: ARRAY
40127: PPUSH
40128: CALL_OW 428
40132: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40133: LD_VAR 0 14
40137: PUSH
40138: LD_VAR 0 9
40142: ARRAY
40143: PUSH
40144: LD_INT 1
40146: ARRAY
40147: PPUSH
40148: LD_VAR 0 14
40152: PUSH
40153: LD_VAR 0 9
40157: ARRAY
40158: PUSH
40159: LD_INT 2
40161: ARRAY
40162: PPUSH
40163: CALL_OW 351
40167: PUSH
40168: LD_VAR 0 14
40172: PUSH
40173: LD_VAR 0 9
40177: ARRAY
40178: PUSH
40179: LD_INT 1
40181: ARRAY
40182: PPUSH
40183: LD_VAR 0 14
40187: PUSH
40188: LD_VAR 0 9
40192: ARRAY
40193: PUSH
40194: LD_INT 2
40196: ARRAY
40197: PPUSH
40198: CALL_OW 488
40202: NOT
40203: OR
40204: PUSH
40205: LD_VAR 0 13
40209: PPUSH
40210: CALL_OW 247
40214: PUSH
40215: LD_INT 3
40217: EQUAL
40218: OR
40219: IFFALSE 40225
// exit ;
40221: POP
40222: POP
40223: GO 40769
// if not tmp then
40225: LD_VAR 0 13
40229: NOT
40230: IFFALSE 40234
// continue ;
40232: GO 40090
// result := true ;
40234: LD_ADDR_VAR 0 8
40238: PUSH
40239: LD_INT 1
40241: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
40242: LD_VAR 0 6
40246: PUSH
40247: LD_VAR 0 13
40251: PPUSH
40252: CALL_OW 247
40256: PUSH
40257: LD_INT 2
40259: EQUAL
40260: AND
40261: PUSH
40262: LD_VAR 0 13
40266: PPUSH
40267: CALL_OW 263
40271: PUSH
40272: LD_INT 1
40274: EQUAL
40275: AND
40276: IFFALSE 40440
// begin if IsDrivenBy ( tmp ) then
40278: LD_VAR 0 13
40282: PPUSH
40283: CALL_OW 311
40287: IFFALSE 40291
// continue ;
40289: GO 40090
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
40291: LD_VAR 0 6
40295: PPUSH
40296: LD_INT 3
40298: PUSH
40299: LD_INT 60
40301: PUSH
40302: EMPTY
40303: LIST
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: PUSH
40309: LD_INT 3
40311: PUSH
40312: LD_INT 55
40314: PUSH
40315: EMPTY
40316: LIST
40317: PUSH
40318: EMPTY
40319: LIST
40320: LIST
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: PPUSH
40326: CALL_OW 72
40330: IFFALSE 40438
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
40332: LD_ADDR_VAR 0 18
40336: PUSH
40337: LD_VAR 0 6
40341: PPUSH
40342: LD_INT 3
40344: PUSH
40345: LD_INT 60
40347: PUSH
40348: EMPTY
40349: LIST
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: LD_INT 3
40357: PUSH
40358: LD_INT 55
40360: PUSH
40361: EMPTY
40362: LIST
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: PUSH
40368: EMPTY
40369: LIST
40370: LIST
40371: PPUSH
40372: CALL_OW 72
40376: PUSH
40377: LD_INT 1
40379: ARRAY
40380: ST_TO_ADDR
// if IsInUnit ( driver ) then
40381: LD_VAR 0 18
40385: PPUSH
40386: CALL_OW 310
40390: IFFALSE 40401
// ComExit ( driver ) ;
40392: LD_VAR 0 18
40396: PPUSH
40397: CALL 65814 0 1
// AddComEnterUnit ( driver , tmp ) ;
40401: LD_VAR 0 18
40405: PPUSH
40406: LD_VAR 0 13
40410: PPUSH
40411: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
40415: LD_VAR 0 18
40419: PPUSH
40420: LD_VAR 0 7
40424: PPUSH
40425: CALL_OW 173
// AddComExitVehicle ( driver ) ;
40429: LD_VAR 0 18
40433: PPUSH
40434: CALL_OW 181
// end ; continue ;
40438: GO 40090
// end ; if not cleaners or not tmp in cleaners then
40440: LD_VAR 0 6
40444: NOT
40445: PUSH
40446: LD_VAR 0 13
40450: PUSH
40451: LD_VAR 0 6
40455: IN
40456: NOT
40457: OR
40458: IFFALSE 40765
// begin if dep then
40460: LD_VAR 0 17
40464: IFFALSE 40600
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
40466: LD_ADDR_VAR 0 16
40470: PUSH
40471: LD_VAR 0 17
40475: PUSH
40476: LD_INT 1
40478: ARRAY
40479: PPUSH
40480: CALL_OW 250
40484: PPUSH
40485: LD_VAR 0 17
40489: PUSH
40490: LD_INT 1
40492: ARRAY
40493: PPUSH
40494: CALL_OW 254
40498: PPUSH
40499: LD_INT 5
40501: PPUSH
40502: CALL_OW 272
40506: PUSH
40507: LD_VAR 0 17
40511: PUSH
40512: LD_INT 1
40514: ARRAY
40515: PPUSH
40516: CALL_OW 251
40520: PPUSH
40521: LD_VAR 0 17
40525: PUSH
40526: LD_INT 1
40528: ARRAY
40529: PPUSH
40530: CALL_OW 254
40534: PPUSH
40535: LD_INT 5
40537: PPUSH
40538: CALL_OW 273
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
40547: LD_VAR 0 16
40551: PUSH
40552: LD_INT 1
40554: ARRAY
40555: PPUSH
40556: LD_VAR 0 16
40560: PUSH
40561: LD_INT 2
40563: ARRAY
40564: PPUSH
40565: CALL_OW 488
40569: IFFALSE 40600
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40571: LD_VAR 0 13
40575: PPUSH
40576: LD_VAR 0 16
40580: PUSH
40581: LD_INT 1
40583: ARRAY
40584: PPUSH
40585: LD_VAR 0 16
40589: PUSH
40590: LD_INT 2
40592: ARRAY
40593: PPUSH
40594: CALL_OW 111
// continue ;
40598: GO 40090
// end ; end ; r := GetDir ( tmp ) ;
40600: LD_ADDR_VAR 0 15
40604: PUSH
40605: LD_VAR 0 13
40609: PPUSH
40610: CALL_OW 254
40614: ST_TO_ADDR
// if r = 5 then
40615: LD_VAR 0 15
40619: PUSH
40620: LD_INT 5
40622: EQUAL
40623: IFFALSE 40633
// r := 0 ;
40625: LD_ADDR_VAR 0 15
40629: PUSH
40630: LD_INT 0
40632: ST_TO_ADDR
// for j = r to 5 do
40633: LD_ADDR_VAR 0 10
40637: PUSH
40638: DOUBLE
40639: LD_VAR 0 15
40643: DEC
40644: ST_TO_ADDR
40645: LD_INT 5
40647: PUSH
40648: FOR_TO
40649: IFFALSE 40763
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
40651: LD_ADDR_VAR 0 11
40655: PUSH
40656: LD_VAR 0 13
40660: PPUSH
40661: CALL_OW 250
40665: PPUSH
40666: LD_VAR 0 10
40670: PPUSH
40671: LD_INT 2
40673: PPUSH
40674: CALL_OW 272
40678: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
40679: LD_ADDR_VAR 0 12
40683: PUSH
40684: LD_VAR 0 13
40688: PPUSH
40689: CALL_OW 251
40693: PPUSH
40694: LD_VAR 0 10
40698: PPUSH
40699: LD_INT 2
40701: PPUSH
40702: CALL_OW 273
40706: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
40707: LD_VAR 0 11
40711: PPUSH
40712: LD_VAR 0 12
40716: PPUSH
40717: CALL_OW 488
40721: PUSH
40722: LD_VAR 0 11
40726: PPUSH
40727: LD_VAR 0 12
40731: PPUSH
40732: CALL_OW 428
40736: NOT
40737: AND
40738: IFFALSE 40761
// begin ComMoveXY ( tmp , _x , _y ) ;
40740: LD_VAR 0 13
40744: PPUSH
40745: LD_VAR 0 11
40749: PPUSH
40750: LD_VAR 0 12
40754: PPUSH
40755: CALL_OW 111
// break ;
40759: GO 40763
// end ; end ;
40761: GO 40648
40763: POP
40764: POP
// end ; end ;
40765: GO 40090
40767: POP
40768: POP
// end ;
40769: LD_VAR 0 8
40773: RET
// export function BuildingTechInvented ( side , btype ) ; begin
40774: LD_INT 0
40776: PPUSH
// result := true ;
40777: LD_ADDR_VAR 0 3
40781: PUSH
40782: LD_INT 1
40784: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
40785: LD_VAR 0 2
40789: PUSH
40790: LD_INT 24
40792: DOUBLE
40793: EQUAL
40794: IFTRUE 40804
40796: LD_INT 33
40798: DOUBLE
40799: EQUAL
40800: IFTRUE 40804
40802: GO 40829
40804: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
40805: LD_ADDR_VAR 0 3
40809: PUSH
40810: LD_INT 32
40812: PPUSH
40813: LD_VAR 0 1
40817: PPUSH
40818: CALL_OW 321
40822: PUSH
40823: LD_INT 2
40825: EQUAL
40826: ST_TO_ADDR
40827: GO 41145
40829: LD_INT 20
40831: DOUBLE
40832: EQUAL
40833: IFTRUE 40837
40835: GO 40862
40837: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
40838: LD_ADDR_VAR 0 3
40842: PUSH
40843: LD_INT 6
40845: PPUSH
40846: LD_VAR 0 1
40850: PPUSH
40851: CALL_OW 321
40855: PUSH
40856: LD_INT 2
40858: EQUAL
40859: ST_TO_ADDR
40860: GO 41145
40862: LD_INT 22
40864: DOUBLE
40865: EQUAL
40866: IFTRUE 40876
40868: LD_INT 36
40870: DOUBLE
40871: EQUAL
40872: IFTRUE 40876
40874: GO 40901
40876: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
40877: LD_ADDR_VAR 0 3
40881: PUSH
40882: LD_INT 15
40884: PPUSH
40885: LD_VAR 0 1
40889: PPUSH
40890: CALL_OW 321
40894: PUSH
40895: LD_INT 2
40897: EQUAL
40898: ST_TO_ADDR
40899: GO 41145
40901: LD_INT 30
40903: DOUBLE
40904: EQUAL
40905: IFTRUE 40909
40907: GO 40934
40909: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
40910: LD_ADDR_VAR 0 3
40914: PUSH
40915: LD_INT 20
40917: PPUSH
40918: LD_VAR 0 1
40922: PPUSH
40923: CALL_OW 321
40927: PUSH
40928: LD_INT 2
40930: EQUAL
40931: ST_TO_ADDR
40932: GO 41145
40934: LD_INT 28
40936: DOUBLE
40937: EQUAL
40938: IFTRUE 40948
40940: LD_INT 21
40942: DOUBLE
40943: EQUAL
40944: IFTRUE 40948
40946: GO 40973
40948: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
40949: LD_ADDR_VAR 0 3
40953: PUSH
40954: LD_INT 21
40956: PPUSH
40957: LD_VAR 0 1
40961: PPUSH
40962: CALL_OW 321
40966: PUSH
40967: LD_INT 2
40969: EQUAL
40970: ST_TO_ADDR
40971: GO 41145
40973: LD_INT 16
40975: DOUBLE
40976: EQUAL
40977: IFTRUE 40981
40979: GO 41006
40981: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
40982: LD_ADDR_VAR 0 3
40986: PUSH
40987: LD_INT 84
40989: PPUSH
40990: LD_VAR 0 1
40994: PPUSH
40995: CALL_OW 321
40999: PUSH
41000: LD_INT 2
41002: EQUAL
41003: ST_TO_ADDR
41004: GO 41145
41006: LD_INT 19
41008: DOUBLE
41009: EQUAL
41010: IFTRUE 41020
41012: LD_INT 23
41014: DOUBLE
41015: EQUAL
41016: IFTRUE 41020
41018: GO 41045
41020: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
41021: LD_ADDR_VAR 0 3
41025: PUSH
41026: LD_INT 83
41028: PPUSH
41029: LD_VAR 0 1
41033: PPUSH
41034: CALL_OW 321
41038: PUSH
41039: LD_INT 2
41041: EQUAL
41042: ST_TO_ADDR
41043: GO 41145
41045: LD_INT 17
41047: DOUBLE
41048: EQUAL
41049: IFTRUE 41053
41051: GO 41078
41053: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
41054: LD_ADDR_VAR 0 3
41058: PUSH
41059: LD_INT 39
41061: PPUSH
41062: LD_VAR 0 1
41066: PPUSH
41067: CALL_OW 321
41071: PUSH
41072: LD_INT 2
41074: EQUAL
41075: ST_TO_ADDR
41076: GO 41145
41078: LD_INT 18
41080: DOUBLE
41081: EQUAL
41082: IFTRUE 41086
41084: GO 41111
41086: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
41087: LD_ADDR_VAR 0 3
41091: PUSH
41092: LD_INT 40
41094: PPUSH
41095: LD_VAR 0 1
41099: PPUSH
41100: CALL_OW 321
41104: PUSH
41105: LD_INT 2
41107: EQUAL
41108: ST_TO_ADDR
41109: GO 41145
41111: LD_INT 27
41113: DOUBLE
41114: EQUAL
41115: IFTRUE 41119
41117: GO 41144
41119: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
41120: LD_ADDR_VAR 0 3
41124: PUSH
41125: LD_INT 35
41127: PPUSH
41128: LD_VAR 0 1
41132: PPUSH
41133: CALL_OW 321
41137: PUSH
41138: LD_INT 2
41140: EQUAL
41141: ST_TO_ADDR
41142: GO 41145
41144: POP
// end ;
41145: LD_VAR 0 3
41149: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
41150: LD_INT 0
41152: PPUSH
41153: PPUSH
41154: PPUSH
41155: PPUSH
41156: PPUSH
41157: PPUSH
41158: PPUSH
41159: PPUSH
41160: PPUSH
41161: PPUSH
41162: PPUSH
// result := false ;
41163: LD_ADDR_VAR 0 6
41167: PUSH
41168: LD_INT 0
41170: ST_TO_ADDR
// if btype = b_depot then
41171: LD_VAR 0 2
41175: PUSH
41176: LD_INT 0
41178: EQUAL
41179: IFFALSE 41191
// begin result := true ;
41181: LD_ADDR_VAR 0 6
41185: PUSH
41186: LD_INT 1
41188: ST_TO_ADDR
// exit ;
41189: GO 42017
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41191: LD_VAR 0 1
41195: NOT
41196: PUSH
41197: LD_VAR 0 1
41201: PPUSH
41202: CALL_OW 266
41206: PUSH
41207: LD_INT 0
41209: PUSH
41210: LD_INT 1
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: IN
41217: NOT
41218: OR
41219: PUSH
41220: LD_VAR 0 2
41224: NOT
41225: OR
41226: PUSH
41227: LD_VAR 0 5
41231: PUSH
41232: LD_INT 0
41234: PUSH
41235: LD_INT 1
41237: PUSH
41238: LD_INT 2
41240: PUSH
41241: LD_INT 3
41243: PUSH
41244: LD_INT 4
41246: PUSH
41247: LD_INT 5
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: LIST
41254: LIST
41255: LIST
41256: LIST
41257: IN
41258: NOT
41259: OR
41260: PUSH
41261: LD_VAR 0 3
41265: PPUSH
41266: LD_VAR 0 4
41270: PPUSH
41271: CALL_OW 488
41275: NOT
41276: OR
41277: IFFALSE 41281
// exit ;
41279: GO 42017
// side := GetSide ( depot ) ;
41281: LD_ADDR_VAR 0 9
41285: PUSH
41286: LD_VAR 0 1
41290: PPUSH
41291: CALL_OW 255
41295: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
41296: LD_VAR 0 9
41300: PPUSH
41301: LD_VAR 0 2
41305: PPUSH
41306: CALL 40774 0 2
41310: NOT
41311: IFFALSE 41315
// exit ;
41313: GO 42017
// pom := GetBase ( depot ) ;
41315: LD_ADDR_VAR 0 10
41319: PUSH
41320: LD_VAR 0 1
41324: PPUSH
41325: CALL_OW 274
41329: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
41330: LD_ADDR_VAR 0 11
41334: PUSH
41335: LD_VAR 0 2
41339: PPUSH
41340: LD_VAR 0 1
41344: PPUSH
41345: CALL_OW 248
41349: PPUSH
41350: CALL_OW 450
41354: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
41355: LD_VAR 0 10
41359: PPUSH
41360: LD_INT 1
41362: PPUSH
41363: CALL_OW 275
41367: PUSH
41368: LD_VAR 0 11
41372: PUSH
41373: LD_INT 1
41375: ARRAY
41376: GREATEREQUAL
41377: PUSH
41378: LD_VAR 0 10
41382: PPUSH
41383: LD_INT 2
41385: PPUSH
41386: CALL_OW 275
41390: PUSH
41391: LD_VAR 0 11
41395: PUSH
41396: LD_INT 2
41398: ARRAY
41399: GREATEREQUAL
41400: AND
41401: PUSH
41402: LD_VAR 0 10
41406: PPUSH
41407: LD_INT 3
41409: PPUSH
41410: CALL_OW 275
41414: PUSH
41415: LD_VAR 0 11
41419: PUSH
41420: LD_INT 3
41422: ARRAY
41423: GREATEREQUAL
41424: AND
41425: NOT
41426: IFFALSE 41430
// exit ;
41428: GO 42017
// if GetBType ( depot ) = b_depot then
41430: LD_VAR 0 1
41434: PPUSH
41435: CALL_OW 266
41439: PUSH
41440: LD_INT 0
41442: EQUAL
41443: IFFALSE 41455
// dist := 28 else
41445: LD_ADDR_VAR 0 14
41449: PUSH
41450: LD_INT 28
41452: ST_TO_ADDR
41453: GO 41463
// dist := 36 ;
41455: LD_ADDR_VAR 0 14
41459: PUSH
41460: LD_INT 36
41462: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
41463: LD_VAR 0 1
41467: PPUSH
41468: LD_VAR 0 3
41472: PPUSH
41473: LD_VAR 0 4
41477: PPUSH
41478: CALL_OW 297
41482: PUSH
41483: LD_VAR 0 14
41487: GREATER
41488: IFFALSE 41492
// exit ;
41490: GO 42017
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
41492: LD_ADDR_VAR 0 12
41496: PUSH
41497: LD_VAR 0 2
41501: PPUSH
41502: LD_VAR 0 3
41506: PPUSH
41507: LD_VAR 0 4
41511: PPUSH
41512: LD_VAR 0 5
41516: PPUSH
41517: LD_VAR 0 1
41521: PPUSH
41522: CALL_OW 248
41526: PPUSH
41527: LD_INT 0
41529: PPUSH
41530: CALL 42022 0 6
41534: ST_TO_ADDR
// if not hexes then
41535: LD_VAR 0 12
41539: NOT
41540: IFFALSE 41544
// exit ;
41542: GO 42017
// hex := GetHexInfo ( x , y ) ;
41544: LD_ADDR_VAR 0 15
41548: PUSH
41549: LD_VAR 0 3
41553: PPUSH
41554: LD_VAR 0 4
41558: PPUSH
41559: CALL_OW 546
41563: ST_TO_ADDR
// if hex [ 1 ] then
41564: LD_VAR 0 15
41568: PUSH
41569: LD_INT 1
41571: ARRAY
41572: IFFALSE 41576
// exit ;
41574: GO 42017
// height := hex [ 2 ] ;
41576: LD_ADDR_VAR 0 13
41580: PUSH
41581: LD_VAR 0 15
41585: PUSH
41586: LD_INT 2
41588: ARRAY
41589: ST_TO_ADDR
// for i = 1 to hexes do
41590: LD_ADDR_VAR 0 7
41594: PUSH
41595: DOUBLE
41596: LD_INT 1
41598: DEC
41599: ST_TO_ADDR
41600: LD_VAR 0 12
41604: PUSH
41605: FOR_TO
41606: IFFALSE 41936
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
41608: LD_VAR 0 12
41612: PUSH
41613: LD_VAR 0 7
41617: ARRAY
41618: PUSH
41619: LD_INT 1
41621: ARRAY
41622: PPUSH
41623: LD_VAR 0 12
41627: PUSH
41628: LD_VAR 0 7
41632: ARRAY
41633: PUSH
41634: LD_INT 2
41636: ARRAY
41637: PPUSH
41638: CALL_OW 488
41642: NOT
41643: PUSH
41644: LD_VAR 0 12
41648: PUSH
41649: LD_VAR 0 7
41653: ARRAY
41654: PUSH
41655: LD_INT 1
41657: ARRAY
41658: PPUSH
41659: LD_VAR 0 12
41663: PUSH
41664: LD_VAR 0 7
41668: ARRAY
41669: PUSH
41670: LD_INT 2
41672: ARRAY
41673: PPUSH
41674: CALL_OW 428
41678: PUSH
41679: LD_INT 0
41681: GREATER
41682: OR
41683: PUSH
41684: LD_VAR 0 12
41688: PUSH
41689: LD_VAR 0 7
41693: ARRAY
41694: PUSH
41695: LD_INT 1
41697: ARRAY
41698: PPUSH
41699: LD_VAR 0 12
41703: PUSH
41704: LD_VAR 0 7
41708: ARRAY
41709: PUSH
41710: LD_INT 2
41712: ARRAY
41713: PPUSH
41714: CALL_OW 351
41718: OR
41719: IFFALSE 41725
// exit ;
41721: POP
41722: POP
41723: GO 42017
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41725: LD_ADDR_VAR 0 8
41729: PUSH
41730: LD_VAR 0 12
41734: PUSH
41735: LD_VAR 0 7
41739: ARRAY
41740: PUSH
41741: LD_INT 1
41743: ARRAY
41744: PPUSH
41745: LD_VAR 0 12
41749: PUSH
41750: LD_VAR 0 7
41754: ARRAY
41755: PUSH
41756: LD_INT 2
41758: ARRAY
41759: PPUSH
41760: CALL_OW 546
41764: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41765: LD_VAR 0 8
41769: PUSH
41770: LD_INT 1
41772: ARRAY
41773: PUSH
41774: LD_VAR 0 8
41778: PUSH
41779: LD_INT 2
41781: ARRAY
41782: PUSH
41783: LD_VAR 0 13
41787: PUSH
41788: LD_INT 2
41790: PLUS
41791: GREATER
41792: OR
41793: PUSH
41794: LD_VAR 0 8
41798: PUSH
41799: LD_INT 2
41801: ARRAY
41802: PUSH
41803: LD_VAR 0 13
41807: PUSH
41808: LD_INT 2
41810: MINUS
41811: LESS
41812: OR
41813: PUSH
41814: LD_VAR 0 8
41818: PUSH
41819: LD_INT 3
41821: ARRAY
41822: PUSH
41823: LD_INT 0
41825: PUSH
41826: LD_INT 8
41828: PUSH
41829: LD_INT 9
41831: PUSH
41832: LD_INT 10
41834: PUSH
41835: LD_INT 11
41837: PUSH
41838: LD_INT 12
41840: PUSH
41841: LD_INT 13
41843: PUSH
41844: LD_INT 16
41846: PUSH
41847: LD_INT 17
41849: PUSH
41850: LD_INT 18
41852: PUSH
41853: LD_INT 19
41855: PUSH
41856: LD_INT 20
41858: PUSH
41859: LD_INT 21
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: IN
41877: NOT
41878: OR
41879: PUSH
41880: LD_VAR 0 8
41884: PUSH
41885: LD_INT 5
41887: ARRAY
41888: NOT
41889: OR
41890: PUSH
41891: LD_VAR 0 8
41895: PUSH
41896: LD_INT 6
41898: ARRAY
41899: PUSH
41900: LD_INT 1
41902: PUSH
41903: LD_INT 2
41905: PUSH
41906: LD_INT 7
41908: PUSH
41909: LD_INT 9
41911: PUSH
41912: LD_INT 10
41914: PUSH
41915: LD_INT 11
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: LIST
41922: LIST
41923: LIST
41924: LIST
41925: IN
41926: NOT
41927: OR
41928: IFFALSE 41934
// exit ;
41930: POP
41931: POP
41932: GO 42017
// end ;
41934: GO 41605
41936: POP
41937: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41938: LD_VAR 0 9
41942: PPUSH
41943: LD_VAR 0 3
41947: PPUSH
41948: LD_VAR 0 4
41952: PPUSH
41953: LD_INT 20
41955: PPUSH
41956: CALL 33940 0 4
41960: PUSH
41961: LD_INT 4
41963: ARRAY
41964: IFFALSE 41968
// exit ;
41966: GO 42017
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41968: LD_VAR 0 2
41972: PUSH
41973: LD_INT 29
41975: PUSH
41976: LD_INT 30
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: IN
41983: PUSH
41984: LD_VAR 0 3
41988: PPUSH
41989: LD_VAR 0 4
41993: PPUSH
41994: LD_VAR 0 9
41998: PPUSH
41999: CALL_OW 440
42003: NOT
42004: AND
42005: IFFALSE 42009
// exit ;
42007: GO 42017
// result := true ;
42009: LD_ADDR_VAR 0 6
42013: PUSH
42014: LD_INT 1
42016: ST_TO_ADDR
// end ;
42017: LD_VAR 0 6
42021: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
42022: LD_INT 0
42024: PPUSH
42025: PPUSH
42026: PPUSH
42027: PPUSH
42028: PPUSH
42029: PPUSH
42030: PPUSH
42031: PPUSH
42032: PPUSH
42033: PPUSH
42034: PPUSH
42035: PPUSH
42036: PPUSH
42037: PPUSH
42038: PPUSH
42039: PPUSH
42040: PPUSH
42041: PPUSH
42042: PPUSH
42043: PPUSH
42044: PPUSH
42045: PPUSH
42046: PPUSH
42047: PPUSH
42048: PPUSH
42049: PPUSH
42050: PPUSH
42051: PPUSH
42052: PPUSH
42053: PPUSH
42054: PPUSH
42055: PPUSH
42056: PPUSH
42057: PPUSH
42058: PPUSH
42059: PPUSH
42060: PPUSH
42061: PPUSH
42062: PPUSH
42063: PPUSH
42064: PPUSH
42065: PPUSH
42066: PPUSH
42067: PPUSH
42068: PPUSH
42069: PPUSH
42070: PPUSH
42071: PPUSH
42072: PPUSH
42073: PPUSH
42074: PPUSH
42075: PPUSH
42076: PPUSH
42077: PPUSH
42078: PPUSH
42079: PPUSH
42080: PPUSH
42081: PPUSH
// result = [ ] ;
42082: LD_ADDR_VAR 0 7
42086: PUSH
42087: EMPTY
42088: ST_TO_ADDR
// temp_list = [ ] ;
42089: LD_ADDR_VAR 0 9
42093: PUSH
42094: EMPTY
42095: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42096: LD_VAR 0 4
42100: PUSH
42101: LD_INT 0
42103: PUSH
42104: LD_INT 1
42106: PUSH
42107: LD_INT 2
42109: PUSH
42110: LD_INT 3
42112: PUSH
42113: LD_INT 4
42115: PUSH
42116: LD_INT 5
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: LIST
42126: IN
42127: NOT
42128: PUSH
42129: LD_VAR 0 1
42133: PUSH
42134: LD_INT 0
42136: PUSH
42137: LD_INT 1
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: IN
42144: PUSH
42145: LD_VAR 0 5
42149: PUSH
42150: LD_INT 1
42152: PUSH
42153: LD_INT 2
42155: PUSH
42156: LD_INT 3
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: LIST
42163: IN
42164: NOT
42165: AND
42166: OR
42167: IFFALSE 42171
// exit ;
42169: GO 60562
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42171: LD_VAR 0 1
42175: PUSH
42176: LD_INT 6
42178: PUSH
42179: LD_INT 7
42181: PUSH
42182: LD_INT 8
42184: PUSH
42185: LD_INT 13
42187: PUSH
42188: LD_INT 12
42190: PUSH
42191: LD_INT 15
42193: PUSH
42194: LD_INT 11
42196: PUSH
42197: LD_INT 14
42199: PUSH
42200: LD_INT 10
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: LIST
42207: LIST
42208: LIST
42209: LIST
42210: LIST
42211: LIST
42212: LIST
42213: IN
42214: IFFALSE 42224
// btype = b_lab ;
42216: LD_ADDR_VAR 0 1
42220: PUSH
42221: LD_INT 6
42223: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
42224: LD_VAR 0 6
42228: PUSH
42229: LD_INT 0
42231: PUSH
42232: LD_INT 1
42234: PUSH
42235: LD_INT 2
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: LIST
42242: IN
42243: NOT
42244: PUSH
42245: LD_VAR 0 1
42249: PUSH
42250: LD_INT 0
42252: PUSH
42253: LD_INT 1
42255: PUSH
42256: LD_INT 2
42258: PUSH
42259: LD_INT 3
42261: PUSH
42262: LD_INT 6
42264: PUSH
42265: LD_INT 36
42267: PUSH
42268: LD_INT 4
42270: PUSH
42271: LD_INT 5
42273: PUSH
42274: LD_INT 31
42276: PUSH
42277: LD_INT 32
42279: PUSH
42280: LD_INT 33
42282: PUSH
42283: EMPTY
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: LIST
42295: IN
42296: NOT
42297: PUSH
42298: LD_VAR 0 6
42302: PUSH
42303: LD_INT 1
42305: EQUAL
42306: AND
42307: OR
42308: PUSH
42309: LD_VAR 0 1
42313: PUSH
42314: LD_INT 2
42316: PUSH
42317: LD_INT 3
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: IN
42324: NOT
42325: PUSH
42326: LD_VAR 0 6
42330: PUSH
42331: LD_INT 2
42333: EQUAL
42334: AND
42335: OR
42336: IFFALSE 42346
// mode = 0 ;
42338: LD_ADDR_VAR 0 6
42342: PUSH
42343: LD_INT 0
42345: ST_TO_ADDR
// case mode of 0 :
42346: LD_VAR 0 6
42350: PUSH
42351: LD_INT 0
42353: DOUBLE
42354: EQUAL
42355: IFTRUE 42359
42357: GO 53812
42359: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42360: LD_ADDR_VAR 0 11
42364: PUSH
42365: LD_INT 0
42367: PUSH
42368: LD_INT 0
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: PUSH
42375: LD_INT 0
42377: PUSH
42378: LD_INT 1
42380: NEG
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: PUSH
42386: LD_INT 1
42388: PUSH
42389: LD_INT 0
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: PUSH
42396: LD_INT 1
42398: PUSH
42399: LD_INT 1
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: PUSH
42406: LD_INT 0
42408: PUSH
42409: LD_INT 1
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 1
42418: NEG
42419: PUSH
42420: LD_INT 0
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: LD_INT 1
42429: NEG
42430: PUSH
42431: LD_INT 1
42433: NEG
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PUSH
42439: LD_INT 1
42441: NEG
42442: PUSH
42443: LD_INT 2
42445: NEG
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: LD_INT 0
42453: PUSH
42454: LD_INT 2
42456: NEG
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: PUSH
42462: LD_INT 1
42464: PUSH
42465: LD_INT 1
42467: NEG
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: PUSH
42473: LD_INT 1
42475: PUSH
42476: LD_INT 2
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PUSH
42483: LD_INT 0
42485: PUSH
42486: LD_INT 2
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PUSH
42493: LD_INT 1
42495: NEG
42496: PUSH
42497: LD_INT 1
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: PUSH
42504: LD_INT 1
42506: PUSH
42507: LD_INT 3
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: PUSH
42514: LD_INT 0
42516: PUSH
42517: LD_INT 3
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: PUSH
42524: LD_INT 1
42526: NEG
42527: PUSH
42528: LD_INT 2
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42553: LD_ADDR_VAR 0 12
42557: PUSH
42558: LD_INT 0
42560: PUSH
42561: LD_INT 0
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: PUSH
42568: LD_INT 0
42570: PUSH
42571: LD_INT 1
42573: NEG
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: LD_INT 1
42581: PUSH
42582: LD_INT 0
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: PUSH
42589: LD_INT 1
42591: PUSH
42592: LD_INT 1
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: PUSH
42599: LD_INT 0
42601: PUSH
42602: LD_INT 1
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 1
42611: NEG
42612: PUSH
42613: LD_INT 0
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: PUSH
42620: LD_INT 1
42622: NEG
42623: PUSH
42624: LD_INT 1
42626: NEG
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: PUSH
42632: LD_INT 1
42634: PUSH
42635: LD_INT 1
42637: NEG
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: PUSH
42643: LD_INT 2
42645: PUSH
42646: LD_INT 0
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: PUSH
42653: LD_INT 2
42655: PUSH
42656: LD_INT 1
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: PUSH
42663: LD_INT 1
42665: NEG
42666: PUSH
42667: LD_INT 1
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: PUSH
42674: LD_INT 2
42676: NEG
42677: PUSH
42678: LD_INT 0
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: PUSH
42685: LD_INT 2
42687: NEG
42688: PUSH
42689: LD_INT 1
42691: NEG
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: PUSH
42697: LD_INT 2
42699: NEG
42700: PUSH
42701: LD_INT 1
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: PUSH
42708: LD_INT 3
42710: NEG
42711: PUSH
42712: LD_INT 0
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: LD_INT 3
42721: NEG
42722: PUSH
42723: LD_INT 1
42725: NEG
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: EMPTY
42732: LIST
42733: LIST
42734: LIST
42735: LIST
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: LIST
42743: LIST
42744: LIST
42745: LIST
42746: LIST
42747: LIST
42748: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42749: LD_ADDR_VAR 0 13
42753: PUSH
42754: LD_INT 0
42756: PUSH
42757: LD_INT 0
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: LD_INT 0
42766: PUSH
42767: LD_INT 1
42769: NEG
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: LD_INT 1
42777: PUSH
42778: LD_INT 0
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 1
42787: PUSH
42788: LD_INT 1
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 0
42797: PUSH
42798: LD_INT 1
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: PUSH
42805: LD_INT 1
42807: NEG
42808: PUSH
42809: LD_INT 0
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: PUSH
42816: LD_INT 1
42818: NEG
42819: PUSH
42820: LD_INT 1
42822: NEG
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: LD_INT 1
42830: NEG
42831: PUSH
42832: LD_INT 2
42834: NEG
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PUSH
42840: LD_INT 2
42842: PUSH
42843: LD_INT 1
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: PUSH
42850: LD_INT 2
42852: PUSH
42853: LD_INT 2
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: LD_INT 1
42862: PUSH
42863: LD_INT 2
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: PUSH
42870: LD_INT 2
42872: NEG
42873: PUSH
42874: LD_INT 1
42876: NEG
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: PUSH
42882: LD_INT 2
42884: NEG
42885: PUSH
42886: LD_INT 2
42888: NEG
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: PUSH
42894: LD_INT 2
42896: NEG
42897: PUSH
42898: LD_INT 3
42900: NEG
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: PUSH
42906: LD_INT 3
42908: NEG
42909: PUSH
42910: LD_INT 2
42912: NEG
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 3
42920: NEG
42921: PUSH
42922: LD_INT 3
42924: NEG
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: LIST
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: LIST
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42948: LD_ADDR_VAR 0 14
42952: PUSH
42953: LD_INT 0
42955: PUSH
42956: LD_INT 0
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PUSH
42963: LD_INT 0
42965: PUSH
42966: LD_INT 1
42968: NEG
42969: PUSH
42970: EMPTY
42971: LIST
42972: LIST
42973: PUSH
42974: LD_INT 1
42976: PUSH
42977: LD_INT 0
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: PUSH
42984: LD_INT 1
42986: PUSH
42987: LD_INT 1
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 0
42996: PUSH
42997: LD_INT 1
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: LD_INT 1
43006: NEG
43007: PUSH
43008: LD_INT 0
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: LD_INT 1
43017: NEG
43018: PUSH
43019: LD_INT 1
43021: NEG
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PUSH
43027: LD_INT 1
43029: NEG
43030: PUSH
43031: LD_INT 2
43033: NEG
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: PUSH
43039: LD_INT 0
43041: PUSH
43042: LD_INT 2
43044: NEG
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: PUSH
43050: LD_INT 1
43052: PUSH
43053: LD_INT 1
43055: NEG
43056: PUSH
43057: EMPTY
43058: LIST
43059: LIST
43060: PUSH
43061: LD_INT 1
43063: PUSH
43064: LD_INT 2
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: LD_INT 0
43073: PUSH
43074: LD_INT 2
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: PUSH
43081: LD_INT 1
43083: NEG
43084: PUSH
43085: LD_INT 1
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: PUSH
43092: LD_INT 1
43094: NEG
43095: PUSH
43096: LD_INT 3
43098: NEG
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: LD_INT 0
43106: PUSH
43107: LD_INT 3
43109: NEG
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: PUSH
43115: LD_INT 1
43117: PUSH
43118: LD_INT 2
43120: NEG
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: LIST
43130: LIST
43131: LIST
43132: LIST
43133: LIST
43134: LIST
43135: LIST
43136: LIST
43137: LIST
43138: LIST
43139: LIST
43140: LIST
43141: LIST
43142: LIST
43143: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43144: LD_ADDR_VAR 0 15
43148: PUSH
43149: LD_INT 0
43151: PUSH
43152: LD_INT 0
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PUSH
43159: LD_INT 0
43161: PUSH
43162: LD_INT 1
43164: NEG
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: LD_INT 1
43172: PUSH
43173: LD_INT 0
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: LD_INT 1
43182: PUSH
43183: LD_INT 1
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 0
43192: PUSH
43193: LD_INT 1
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PUSH
43200: LD_INT 1
43202: NEG
43203: PUSH
43204: LD_INT 0
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: PUSH
43211: LD_INT 1
43213: NEG
43214: PUSH
43215: LD_INT 1
43217: NEG
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: LD_INT 1
43225: PUSH
43226: LD_INT 1
43228: NEG
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 2
43236: PUSH
43237: LD_INT 0
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: PUSH
43244: LD_INT 2
43246: PUSH
43247: LD_INT 1
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 1
43256: NEG
43257: PUSH
43258: LD_INT 1
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: PUSH
43265: LD_INT 2
43267: NEG
43268: PUSH
43269: LD_INT 0
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: PUSH
43276: LD_INT 2
43278: NEG
43279: PUSH
43280: LD_INT 1
43282: NEG
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 2
43290: PUSH
43291: LD_INT 1
43293: NEG
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 3
43301: PUSH
43302: LD_INT 0
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 3
43311: PUSH
43312: LD_INT 1
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: LIST
43323: LIST
43324: LIST
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43337: LD_ADDR_VAR 0 16
43341: PUSH
43342: LD_INT 0
43344: PUSH
43345: LD_INT 0
43347: PUSH
43348: EMPTY
43349: LIST
43350: LIST
43351: PUSH
43352: LD_INT 0
43354: PUSH
43355: LD_INT 1
43357: NEG
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 1
43365: PUSH
43366: LD_INT 0
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: LD_INT 1
43375: PUSH
43376: LD_INT 1
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: PUSH
43383: LD_INT 0
43385: PUSH
43386: LD_INT 1
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: PUSH
43393: LD_INT 1
43395: NEG
43396: PUSH
43397: LD_INT 0
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: PUSH
43404: LD_INT 1
43406: NEG
43407: PUSH
43408: LD_INT 1
43410: NEG
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: PUSH
43416: LD_INT 1
43418: NEG
43419: PUSH
43420: LD_INT 2
43422: NEG
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PUSH
43428: LD_INT 2
43430: PUSH
43431: LD_INT 1
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: PUSH
43438: LD_INT 2
43440: PUSH
43441: LD_INT 2
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 1
43450: PUSH
43451: LD_INT 2
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 2
43460: NEG
43461: PUSH
43462: LD_INT 1
43464: NEG
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: PUSH
43470: LD_INT 2
43472: NEG
43473: PUSH
43474: LD_INT 2
43476: NEG
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PUSH
43482: LD_INT 3
43484: PUSH
43485: LD_INT 2
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: PUSH
43492: LD_INT 3
43494: PUSH
43495: LD_INT 3
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: PUSH
43502: LD_INT 2
43504: PUSH
43505: LD_INT 3
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: LIST
43516: LIST
43517: LIST
43518: LIST
43519: LIST
43520: LIST
43521: LIST
43522: LIST
43523: LIST
43524: LIST
43525: LIST
43526: LIST
43527: LIST
43528: LIST
43529: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43530: LD_ADDR_VAR 0 17
43534: PUSH
43535: LD_INT 0
43537: PUSH
43538: LD_INT 0
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 0
43547: PUSH
43548: LD_INT 1
43550: NEG
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: LD_INT 1
43558: PUSH
43559: LD_INT 0
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: LD_INT 1
43568: PUSH
43569: LD_INT 1
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: PUSH
43576: LD_INT 0
43578: PUSH
43579: LD_INT 1
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: LD_INT 1
43588: NEG
43589: PUSH
43590: LD_INT 0
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: PUSH
43597: LD_INT 1
43599: NEG
43600: PUSH
43601: LD_INT 1
43603: NEG
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: LD_INT 1
43611: NEG
43612: PUSH
43613: LD_INT 2
43615: NEG
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: PUSH
43621: LD_INT 0
43623: PUSH
43624: LD_INT 2
43626: NEG
43627: PUSH
43628: EMPTY
43629: LIST
43630: LIST
43631: PUSH
43632: LD_INT 1
43634: PUSH
43635: LD_INT 1
43637: NEG
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: PUSH
43643: LD_INT 2
43645: PUSH
43646: LD_INT 0
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: PUSH
43653: LD_INT 2
43655: PUSH
43656: LD_INT 1
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PUSH
43663: LD_INT 2
43665: PUSH
43666: LD_INT 2
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 1
43675: PUSH
43676: LD_INT 2
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: PUSH
43683: LD_INT 0
43685: PUSH
43686: LD_INT 2
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 1
43695: NEG
43696: PUSH
43697: LD_INT 1
43699: PUSH
43700: EMPTY
43701: LIST
43702: LIST
43703: PUSH
43704: LD_INT 2
43706: NEG
43707: PUSH
43708: LD_INT 0
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: LD_INT 2
43717: NEG
43718: PUSH
43719: LD_INT 1
43721: NEG
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: PUSH
43727: LD_INT 2
43729: NEG
43730: PUSH
43731: LD_INT 2
43733: NEG
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: LIST
43743: LIST
43744: LIST
43745: LIST
43746: LIST
43747: LIST
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: LIST
43754: LIST
43755: LIST
43756: LIST
43757: LIST
43758: LIST
43759: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43760: LD_ADDR_VAR 0 18
43764: PUSH
43765: LD_INT 0
43767: PUSH
43768: LD_INT 0
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: PUSH
43775: LD_INT 0
43777: PUSH
43778: LD_INT 1
43780: NEG
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 1
43788: PUSH
43789: LD_INT 0
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: PUSH
43796: LD_INT 1
43798: PUSH
43799: LD_INT 1
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: PUSH
43806: LD_INT 0
43808: PUSH
43809: LD_INT 1
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: PUSH
43816: LD_INT 1
43818: NEG
43819: PUSH
43820: LD_INT 0
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: PUSH
43827: LD_INT 1
43829: NEG
43830: PUSH
43831: LD_INT 1
43833: NEG
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: LD_INT 1
43841: NEG
43842: PUSH
43843: LD_INT 2
43845: NEG
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: PUSH
43851: LD_INT 0
43853: PUSH
43854: LD_INT 2
43856: NEG
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: LD_INT 1
43864: PUSH
43865: LD_INT 1
43867: NEG
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: LD_INT 2
43875: PUSH
43876: LD_INT 0
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: PUSH
43883: LD_INT 2
43885: PUSH
43886: LD_INT 1
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: PUSH
43893: LD_INT 2
43895: PUSH
43896: LD_INT 2
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 1
43905: PUSH
43906: LD_INT 2
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 0
43915: PUSH
43916: LD_INT 2
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 1
43925: NEG
43926: PUSH
43927: LD_INT 1
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 2
43936: NEG
43937: PUSH
43938: LD_INT 0
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PUSH
43945: LD_INT 2
43947: NEG
43948: PUSH
43949: LD_INT 1
43951: NEG
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 2
43959: NEG
43960: PUSH
43961: LD_INT 2
43963: NEG
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: LIST
43982: LIST
43983: LIST
43984: LIST
43985: LIST
43986: LIST
43987: LIST
43988: LIST
43989: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43990: LD_ADDR_VAR 0 19
43994: PUSH
43995: LD_INT 0
43997: PUSH
43998: LD_INT 0
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: PUSH
44005: LD_INT 0
44007: PUSH
44008: LD_INT 1
44010: NEG
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_INT 1
44018: PUSH
44019: LD_INT 0
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: PUSH
44026: LD_INT 1
44028: PUSH
44029: LD_INT 1
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: LD_INT 0
44038: PUSH
44039: LD_INT 1
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 1
44048: NEG
44049: PUSH
44050: LD_INT 0
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: PUSH
44057: LD_INT 1
44059: NEG
44060: PUSH
44061: LD_INT 1
44063: NEG
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 1
44071: NEG
44072: PUSH
44073: LD_INT 2
44075: NEG
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 0
44083: PUSH
44084: LD_INT 2
44086: NEG
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: LD_INT 1
44094: PUSH
44095: LD_INT 1
44097: NEG
44098: PUSH
44099: EMPTY
44100: LIST
44101: LIST
44102: PUSH
44103: LD_INT 2
44105: PUSH
44106: LD_INT 0
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PUSH
44113: LD_INT 2
44115: PUSH
44116: LD_INT 1
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: LD_INT 2
44125: PUSH
44126: LD_INT 2
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 1
44135: PUSH
44136: LD_INT 2
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 0
44145: PUSH
44146: LD_INT 2
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 1
44155: NEG
44156: PUSH
44157: LD_INT 1
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: LD_INT 2
44166: NEG
44167: PUSH
44168: LD_INT 0
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: PUSH
44175: LD_INT 2
44177: NEG
44178: PUSH
44179: LD_INT 1
44181: NEG
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: PUSH
44187: LD_INT 2
44189: NEG
44190: PUSH
44191: LD_INT 2
44193: NEG
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: LIST
44203: LIST
44204: LIST
44205: LIST
44206: LIST
44207: LIST
44208: LIST
44209: LIST
44210: LIST
44211: LIST
44212: LIST
44213: LIST
44214: LIST
44215: LIST
44216: LIST
44217: LIST
44218: LIST
44219: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44220: LD_ADDR_VAR 0 20
44224: PUSH
44225: LD_INT 0
44227: PUSH
44228: LD_INT 0
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: PUSH
44235: LD_INT 0
44237: PUSH
44238: LD_INT 1
44240: NEG
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: LD_INT 1
44248: PUSH
44249: LD_INT 0
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 1
44258: PUSH
44259: LD_INT 1
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 0
44268: PUSH
44269: LD_INT 1
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 1
44278: NEG
44279: PUSH
44280: LD_INT 0
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 1
44289: NEG
44290: PUSH
44291: LD_INT 1
44293: NEG
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: LD_INT 1
44301: NEG
44302: PUSH
44303: LD_INT 2
44305: NEG
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: PUSH
44311: LD_INT 0
44313: PUSH
44314: LD_INT 2
44316: NEG
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: PUSH
44322: LD_INT 1
44324: PUSH
44325: LD_INT 1
44327: NEG
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: LD_INT 2
44335: PUSH
44336: LD_INT 0
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 2
44345: PUSH
44346: LD_INT 1
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: LD_INT 2
44355: PUSH
44356: LD_INT 2
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: PUSH
44363: LD_INT 1
44365: PUSH
44366: LD_INT 2
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 0
44375: PUSH
44376: LD_INT 2
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: LD_INT 1
44385: NEG
44386: PUSH
44387: LD_INT 1
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: PUSH
44394: LD_INT 2
44396: NEG
44397: PUSH
44398: LD_INT 0
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: PUSH
44405: LD_INT 2
44407: NEG
44408: PUSH
44409: LD_INT 1
44411: NEG
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 2
44419: NEG
44420: PUSH
44421: LD_INT 2
44423: NEG
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: LIST
44433: LIST
44434: LIST
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: LIST
44449: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44450: LD_ADDR_VAR 0 21
44454: PUSH
44455: LD_INT 0
44457: PUSH
44458: LD_INT 0
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: PUSH
44465: LD_INT 0
44467: PUSH
44468: LD_INT 1
44470: NEG
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 1
44478: PUSH
44479: LD_INT 0
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 1
44488: PUSH
44489: LD_INT 1
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 0
44498: PUSH
44499: LD_INT 1
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 1
44508: NEG
44509: PUSH
44510: LD_INT 0
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: PUSH
44517: LD_INT 1
44519: NEG
44520: PUSH
44521: LD_INT 1
44523: NEG
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 1
44531: NEG
44532: PUSH
44533: LD_INT 2
44535: NEG
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: LD_INT 0
44543: PUSH
44544: LD_INT 2
44546: NEG
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: PUSH
44552: LD_INT 1
44554: PUSH
44555: LD_INT 1
44557: NEG
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: PUSH
44563: LD_INT 2
44565: PUSH
44566: LD_INT 0
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 2
44575: PUSH
44576: LD_INT 1
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 2
44585: PUSH
44586: LD_INT 2
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 1
44595: PUSH
44596: LD_INT 2
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 0
44605: PUSH
44606: LD_INT 2
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 1
44615: NEG
44616: PUSH
44617: LD_INT 1
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 2
44626: NEG
44627: PUSH
44628: LD_INT 0
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: LD_INT 2
44637: NEG
44638: PUSH
44639: LD_INT 1
44641: NEG
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 2
44649: NEG
44650: PUSH
44651: LD_INT 2
44653: NEG
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: LIST
44678: LIST
44679: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44680: LD_ADDR_VAR 0 22
44684: PUSH
44685: LD_INT 0
44687: PUSH
44688: LD_INT 0
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PUSH
44695: LD_INT 0
44697: PUSH
44698: LD_INT 1
44700: NEG
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: PUSH
44706: LD_INT 1
44708: PUSH
44709: LD_INT 0
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: PUSH
44716: LD_INT 1
44718: PUSH
44719: LD_INT 1
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: LD_INT 0
44728: PUSH
44729: LD_INT 1
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 1
44738: NEG
44739: PUSH
44740: LD_INT 0
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: LD_INT 1
44749: NEG
44750: PUSH
44751: LD_INT 1
44753: NEG
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: LD_INT 1
44761: NEG
44762: PUSH
44763: LD_INT 2
44765: NEG
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: LD_INT 0
44773: PUSH
44774: LD_INT 2
44776: NEG
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: LD_INT 1
44784: PUSH
44785: LD_INT 1
44787: NEG
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_INT 2
44795: PUSH
44796: LD_INT 0
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 2
44805: PUSH
44806: LD_INT 1
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: LD_INT 2
44815: PUSH
44816: LD_INT 2
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: LD_INT 1
44825: PUSH
44826: LD_INT 2
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: LD_INT 0
44835: PUSH
44836: LD_INT 2
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 1
44845: NEG
44846: PUSH
44847: LD_INT 1
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 2
44856: NEG
44857: PUSH
44858: LD_INT 0
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 2
44867: NEG
44868: PUSH
44869: LD_INT 1
44871: NEG
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 2
44879: NEG
44880: PUSH
44881: LD_INT 2
44883: NEG
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: LIST
44893: LIST
44894: LIST
44895: LIST
44896: LIST
44897: LIST
44898: LIST
44899: LIST
44900: LIST
44901: LIST
44902: LIST
44903: LIST
44904: LIST
44905: LIST
44906: LIST
44907: LIST
44908: LIST
44909: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44910: LD_ADDR_VAR 0 23
44914: PUSH
44915: LD_INT 0
44917: PUSH
44918: LD_INT 0
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: PUSH
44925: LD_INT 0
44927: PUSH
44928: LD_INT 1
44930: NEG
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 1
44938: PUSH
44939: LD_INT 0
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: LD_INT 1
44948: PUSH
44949: LD_INT 1
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 0
44958: PUSH
44959: LD_INT 1
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 1
44968: NEG
44969: PUSH
44970: LD_INT 0
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: LD_INT 1
44979: NEG
44980: PUSH
44981: LD_INT 1
44983: NEG
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 1
44991: NEG
44992: PUSH
44993: LD_INT 2
44995: NEG
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 0
45003: PUSH
45004: LD_INT 2
45006: NEG
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: PUSH
45012: LD_INT 1
45014: PUSH
45015: LD_INT 1
45017: NEG
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: LD_INT 2
45025: PUSH
45026: LD_INT 0
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 2
45035: PUSH
45036: LD_INT 1
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 2
45045: PUSH
45046: LD_INT 2
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 1
45055: PUSH
45056: LD_INT 2
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 0
45065: PUSH
45066: LD_INT 2
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 1
45075: NEG
45076: PUSH
45077: LD_INT 1
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 2
45086: NEG
45087: PUSH
45088: LD_INT 0
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 2
45097: NEG
45098: PUSH
45099: LD_INT 1
45101: NEG
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 2
45109: NEG
45110: PUSH
45111: LD_INT 2
45113: NEG
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 2
45121: NEG
45122: PUSH
45123: LD_INT 3
45125: NEG
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 1
45133: NEG
45134: PUSH
45135: LD_INT 3
45137: NEG
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 1
45145: PUSH
45146: LD_INT 2
45148: NEG
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 2
45156: PUSH
45157: LD_INT 1
45159: NEG
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: LIST
45169: LIST
45170: LIST
45171: LIST
45172: LIST
45173: LIST
45174: LIST
45175: LIST
45176: LIST
45177: LIST
45178: LIST
45179: LIST
45180: LIST
45181: LIST
45182: LIST
45183: LIST
45184: LIST
45185: LIST
45186: LIST
45187: LIST
45188: LIST
45189: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45190: LD_ADDR_VAR 0 24
45194: PUSH
45195: LD_INT 0
45197: PUSH
45198: LD_INT 0
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: LD_INT 0
45207: PUSH
45208: LD_INT 1
45210: NEG
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 1
45218: PUSH
45219: LD_INT 0
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: LD_INT 1
45228: PUSH
45229: LD_INT 1
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 0
45238: PUSH
45239: LD_INT 1
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 1
45248: NEG
45249: PUSH
45250: LD_INT 0
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 1
45259: NEG
45260: PUSH
45261: LD_INT 1
45263: NEG
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 1
45271: NEG
45272: PUSH
45273: LD_INT 2
45275: NEG
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 0
45283: PUSH
45284: LD_INT 2
45286: NEG
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 1
45294: PUSH
45295: LD_INT 1
45297: NEG
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: LD_INT 2
45305: PUSH
45306: LD_INT 0
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 2
45315: PUSH
45316: LD_INT 1
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 2
45325: PUSH
45326: LD_INT 2
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 1
45335: PUSH
45336: LD_INT 2
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 0
45345: PUSH
45346: LD_INT 2
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: LD_INT 1
45355: NEG
45356: PUSH
45357: LD_INT 1
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 2
45366: NEG
45367: PUSH
45368: LD_INT 0
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 2
45377: NEG
45378: PUSH
45379: LD_INT 1
45381: NEG
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 2
45389: NEG
45390: PUSH
45391: LD_INT 2
45393: NEG
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 1
45401: PUSH
45402: LD_INT 2
45404: NEG
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 2
45412: PUSH
45413: LD_INT 1
45415: NEG
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 3
45423: PUSH
45424: LD_INT 1
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 3
45433: PUSH
45434: LD_INT 2
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: LIST
45445: LIST
45446: LIST
45447: LIST
45448: LIST
45449: LIST
45450: LIST
45451: LIST
45452: LIST
45453: LIST
45454: LIST
45455: LIST
45456: LIST
45457: LIST
45458: LIST
45459: LIST
45460: LIST
45461: LIST
45462: LIST
45463: LIST
45464: LIST
45465: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
45466: LD_ADDR_VAR 0 25
45470: PUSH
45471: LD_INT 0
45473: PUSH
45474: LD_INT 0
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: PUSH
45481: LD_INT 0
45483: PUSH
45484: LD_INT 1
45486: NEG
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: LD_INT 1
45494: PUSH
45495: LD_INT 0
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PUSH
45502: LD_INT 1
45504: PUSH
45505: LD_INT 1
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 0
45514: PUSH
45515: LD_INT 1
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 1
45524: NEG
45525: PUSH
45526: LD_INT 0
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 1
45535: NEG
45536: PUSH
45537: LD_INT 1
45539: NEG
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 1
45547: NEG
45548: PUSH
45549: LD_INT 2
45551: NEG
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: LD_INT 0
45559: PUSH
45560: LD_INT 2
45562: NEG
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: PUSH
45568: LD_INT 1
45570: PUSH
45571: LD_INT 1
45573: NEG
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 2
45581: PUSH
45582: LD_INT 0
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 2
45591: PUSH
45592: LD_INT 1
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 2
45601: PUSH
45602: LD_INT 2
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 1
45611: PUSH
45612: LD_INT 2
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 0
45621: PUSH
45622: LD_INT 2
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 1
45631: NEG
45632: PUSH
45633: LD_INT 1
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 2
45642: NEG
45643: PUSH
45644: LD_INT 0
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 2
45653: NEG
45654: PUSH
45655: LD_INT 1
45657: NEG
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 2
45665: NEG
45666: PUSH
45667: LD_INT 2
45669: NEG
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 3
45677: PUSH
45678: LD_INT 1
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 3
45687: PUSH
45688: LD_INT 2
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 2
45697: PUSH
45698: LD_INT 3
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 1
45707: PUSH
45708: LD_INT 3
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45740: LD_ADDR_VAR 0 26
45744: PUSH
45745: LD_INT 0
45747: PUSH
45748: LD_INT 0
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 0
45757: PUSH
45758: LD_INT 1
45760: NEG
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: LD_INT 1
45768: PUSH
45769: LD_INT 0
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: LD_INT 1
45778: PUSH
45779: LD_INT 1
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 0
45788: PUSH
45789: LD_INT 1
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 1
45798: NEG
45799: PUSH
45800: LD_INT 0
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PUSH
45807: LD_INT 1
45809: NEG
45810: PUSH
45811: LD_INT 1
45813: NEG
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 1
45821: NEG
45822: PUSH
45823: LD_INT 2
45825: NEG
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 0
45833: PUSH
45834: LD_INT 2
45836: NEG
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 1
45844: PUSH
45845: LD_INT 1
45847: NEG
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 2
45855: PUSH
45856: LD_INT 0
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 2
45865: PUSH
45866: LD_INT 1
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 2
45875: PUSH
45876: LD_INT 2
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 1
45885: PUSH
45886: LD_INT 2
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 0
45895: PUSH
45896: LD_INT 2
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 1
45905: NEG
45906: PUSH
45907: LD_INT 1
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PUSH
45914: LD_INT 2
45916: NEG
45917: PUSH
45918: LD_INT 0
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 2
45927: NEG
45928: PUSH
45929: LD_INT 1
45931: NEG
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 2
45939: NEG
45940: PUSH
45941: LD_INT 2
45943: NEG
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 2
45951: PUSH
45952: LD_INT 3
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 1
45961: PUSH
45962: LD_INT 3
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 1
45971: NEG
45972: PUSH
45973: LD_INT 2
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 2
45982: NEG
45983: PUSH
45984: LD_INT 1
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: LIST
46006: LIST
46007: LIST
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46016: LD_ADDR_VAR 0 27
46020: PUSH
46021: LD_INT 0
46023: PUSH
46024: LD_INT 0
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 0
46033: PUSH
46034: LD_INT 1
46036: NEG
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 1
46044: PUSH
46045: LD_INT 0
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 1
46054: PUSH
46055: LD_INT 1
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 0
46064: PUSH
46065: LD_INT 1
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 1
46074: NEG
46075: PUSH
46076: LD_INT 0
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 1
46085: NEG
46086: PUSH
46087: LD_INT 1
46089: NEG
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 1
46097: NEG
46098: PUSH
46099: LD_INT 2
46101: NEG
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 0
46109: PUSH
46110: LD_INT 2
46112: NEG
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 1
46120: PUSH
46121: LD_INT 1
46123: NEG
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 2
46131: PUSH
46132: LD_INT 0
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 2
46141: PUSH
46142: LD_INT 1
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 2
46151: PUSH
46152: LD_INT 2
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 1
46161: PUSH
46162: LD_INT 2
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: LD_INT 0
46171: PUSH
46172: LD_INT 2
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: LD_INT 1
46181: NEG
46182: PUSH
46183: LD_INT 1
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PUSH
46190: LD_INT 2
46192: NEG
46193: PUSH
46194: LD_INT 0
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: PUSH
46201: LD_INT 2
46203: NEG
46204: PUSH
46205: LD_INT 1
46207: NEG
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 2
46215: NEG
46216: PUSH
46217: LD_INT 2
46219: NEG
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 1
46227: NEG
46228: PUSH
46229: LD_INT 2
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 2
46238: NEG
46239: PUSH
46240: LD_INT 1
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 3
46249: NEG
46250: PUSH
46251: LD_INT 1
46253: NEG
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 3
46261: NEG
46262: PUSH
46263: LD_INT 2
46265: NEG
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: LIST
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: LIST
46293: LIST
46294: LIST
46295: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46296: LD_ADDR_VAR 0 28
46300: PUSH
46301: LD_INT 0
46303: PUSH
46304: LD_INT 0
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 0
46313: PUSH
46314: LD_INT 1
46316: NEG
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 1
46324: PUSH
46325: LD_INT 0
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 1
46334: PUSH
46335: LD_INT 1
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 0
46344: PUSH
46345: LD_INT 1
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 1
46354: NEG
46355: PUSH
46356: LD_INT 0
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 1
46365: NEG
46366: PUSH
46367: LD_INT 1
46369: NEG
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 1
46377: NEG
46378: PUSH
46379: LD_INT 2
46381: NEG
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: LD_INT 0
46389: PUSH
46390: LD_INT 2
46392: NEG
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 1
46400: PUSH
46401: LD_INT 1
46403: NEG
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 2
46411: PUSH
46412: LD_INT 0
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 2
46421: PUSH
46422: LD_INT 1
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: LD_INT 2
46431: PUSH
46432: LD_INT 2
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 1
46441: PUSH
46442: LD_INT 2
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 0
46451: PUSH
46452: LD_INT 2
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 1
46461: NEG
46462: PUSH
46463: LD_INT 1
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 2
46472: NEG
46473: PUSH
46474: LD_INT 0
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 2
46483: NEG
46484: PUSH
46485: LD_INT 1
46487: NEG
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 2
46495: NEG
46496: PUSH
46497: LD_INT 2
46499: NEG
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 2
46507: NEG
46508: PUSH
46509: LD_INT 3
46511: NEG
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 1
46519: NEG
46520: PUSH
46521: LD_INT 3
46523: NEG
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 3
46531: NEG
46532: PUSH
46533: LD_INT 1
46535: NEG
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 3
46543: NEG
46544: PUSH
46545: LD_INT 2
46547: NEG
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46578: LD_ADDR_VAR 0 29
46582: PUSH
46583: LD_INT 0
46585: PUSH
46586: LD_INT 0
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: LD_INT 0
46595: PUSH
46596: LD_INT 1
46598: NEG
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 1
46606: PUSH
46607: LD_INT 0
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 1
46616: PUSH
46617: LD_INT 1
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: LD_INT 0
46626: PUSH
46627: LD_INT 1
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 1
46636: NEG
46637: PUSH
46638: LD_INT 0
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 1
46647: NEG
46648: PUSH
46649: LD_INT 1
46651: NEG
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 1
46659: NEG
46660: PUSH
46661: LD_INT 2
46663: NEG
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 0
46671: PUSH
46672: LD_INT 2
46674: NEG
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 1
46682: PUSH
46683: LD_INT 1
46685: NEG
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: PUSH
46691: LD_INT 2
46693: PUSH
46694: LD_INT 0
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: LD_INT 2
46703: PUSH
46704: LD_INT 1
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 1
46713: PUSH
46714: LD_INT 2
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 0
46723: PUSH
46724: LD_INT 2
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: LD_INT 1
46733: NEG
46734: PUSH
46735: LD_INT 1
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 2
46744: NEG
46745: PUSH
46746: LD_INT 1
46748: NEG
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 2
46756: NEG
46757: PUSH
46758: LD_INT 2
46760: NEG
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 2
46768: NEG
46769: PUSH
46770: LD_INT 3
46772: NEG
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: LD_INT 2
46780: PUSH
46781: LD_INT 1
46783: NEG
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PUSH
46789: LD_INT 3
46791: PUSH
46792: LD_INT 1
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 1
46801: PUSH
46802: LD_INT 3
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 1
46811: NEG
46812: PUSH
46813: LD_INT 2
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 3
46822: NEG
46823: PUSH
46824: LD_INT 2
46826: NEG
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: LIST
46853: LIST
46854: LIST
46855: LIST
46856: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46857: LD_ADDR_VAR 0 30
46861: PUSH
46862: LD_INT 0
46864: PUSH
46865: LD_INT 0
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 0
46874: PUSH
46875: LD_INT 1
46877: NEG
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 1
46885: PUSH
46886: LD_INT 0
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 1
46895: PUSH
46896: LD_INT 1
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 0
46905: PUSH
46906: LD_INT 1
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 1
46915: NEG
46916: PUSH
46917: LD_INT 0
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 1
46926: NEG
46927: PUSH
46928: LD_INT 1
46930: NEG
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 1
46938: NEG
46939: PUSH
46940: LD_INT 2
46942: NEG
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 0
46950: PUSH
46951: LD_INT 2
46953: NEG
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 1
46961: PUSH
46962: LD_INT 1
46964: NEG
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: PUSH
46970: LD_INT 2
46972: PUSH
46973: LD_INT 0
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: PUSH
46980: LD_INT 2
46982: PUSH
46983: LD_INT 1
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: PUSH
46990: LD_INT 2
46992: PUSH
46993: LD_INT 2
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 1
47002: PUSH
47003: LD_INT 2
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 1
47012: NEG
47013: PUSH
47014: LD_INT 1
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 2
47023: NEG
47024: PUSH
47025: LD_INT 0
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: LD_INT 2
47034: NEG
47035: PUSH
47036: LD_INT 1
47038: NEG
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 1
47046: NEG
47047: PUSH
47048: LD_INT 3
47050: NEG
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 1
47058: PUSH
47059: LD_INT 2
47061: NEG
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 3
47069: PUSH
47070: LD_INT 2
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 2
47079: PUSH
47080: LD_INT 3
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 2
47089: NEG
47090: PUSH
47091: LD_INT 1
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 3
47100: NEG
47101: PUSH
47102: LD_INT 1
47104: NEG
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: LIST
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: LIST
47127: LIST
47128: LIST
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47135: LD_ADDR_VAR 0 31
47139: PUSH
47140: LD_INT 0
47142: PUSH
47143: LD_INT 0
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 0
47152: PUSH
47153: LD_INT 1
47155: NEG
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 1
47163: PUSH
47164: LD_INT 0
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: LD_INT 1
47173: PUSH
47174: LD_INT 1
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 0
47183: PUSH
47184: LD_INT 1
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: LD_INT 1
47193: NEG
47194: PUSH
47195: LD_INT 0
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: PUSH
47202: LD_INT 1
47204: NEG
47205: PUSH
47206: LD_INT 1
47208: NEG
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 1
47216: NEG
47217: PUSH
47218: LD_INT 2
47220: NEG
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 1
47228: PUSH
47229: LD_INT 1
47231: NEG
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 2
47239: PUSH
47240: LD_INT 0
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 2
47249: PUSH
47250: LD_INT 1
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 2
47259: PUSH
47260: LD_INT 2
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 1
47269: PUSH
47270: LD_INT 2
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 0
47279: PUSH
47280: LD_INT 2
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 1
47289: NEG
47290: PUSH
47291: LD_INT 1
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 2
47300: NEG
47301: PUSH
47302: LD_INT 1
47304: NEG
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 2
47312: NEG
47313: PUSH
47314: LD_INT 2
47316: NEG
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 2
47324: NEG
47325: PUSH
47326: LD_INT 3
47328: NEG
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 2
47336: PUSH
47337: LD_INT 1
47339: NEG
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 3
47347: PUSH
47348: LD_INT 1
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 1
47357: PUSH
47358: LD_INT 3
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: LD_INT 1
47367: NEG
47368: PUSH
47369: LD_INT 2
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: LD_INT 3
47378: NEG
47379: PUSH
47380: LD_INT 2
47382: NEG
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47413: LD_ADDR_VAR 0 32
47417: PUSH
47418: LD_INT 0
47420: PUSH
47421: LD_INT 0
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 0
47430: PUSH
47431: LD_INT 1
47433: NEG
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 1
47441: PUSH
47442: LD_INT 0
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 1
47451: PUSH
47452: LD_INT 1
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 0
47461: PUSH
47462: LD_INT 1
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: LD_INT 1
47471: NEG
47472: PUSH
47473: LD_INT 0
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 1
47482: NEG
47483: PUSH
47484: LD_INT 1
47486: NEG
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 1
47494: NEG
47495: PUSH
47496: LD_INT 2
47498: NEG
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 0
47506: PUSH
47507: LD_INT 2
47509: NEG
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_INT 1
47517: PUSH
47518: LD_INT 1
47520: NEG
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 2
47528: PUSH
47529: LD_INT 1
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 2
47538: PUSH
47539: LD_INT 2
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 1
47548: PUSH
47549: LD_INT 2
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: PUSH
47556: LD_INT 0
47558: PUSH
47559: LD_INT 2
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: LD_INT 1
47568: NEG
47569: PUSH
47570: LD_INT 1
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 2
47579: NEG
47580: PUSH
47581: LD_INT 0
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 2
47590: NEG
47591: PUSH
47592: LD_INT 1
47594: NEG
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 1
47602: NEG
47603: PUSH
47604: LD_INT 3
47606: NEG
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 1
47614: PUSH
47615: LD_INT 2
47617: NEG
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 3
47625: PUSH
47626: LD_INT 2
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 2
47635: PUSH
47636: LD_INT 3
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 2
47645: NEG
47646: PUSH
47647: LD_INT 1
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 3
47656: NEG
47657: PUSH
47658: LD_INT 1
47660: NEG
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: LIST
47670: LIST
47671: LIST
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: LIST
47685: LIST
47686: LIST
47687: LIST
47688: LIST
47689: LIST
47690: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47691: LD_ADDR_VAR 0 33
47695: PUSH
47696: LD_INT 0
47698: PUSH
47699: LD_INT 0
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: LD_INT 0
47708: PUSH
47709: LD_INT 1
47711: NEG
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 1
47719: PUSH
47720: LD_INT 0
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: LD_INT 1
47729: PUSH
47730: LD_INT 1
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 0
47739: PUSH
47740: LD_INT 1
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: PUSH
47747: LD_INT 1
47749: NEG
47750: PUSH
47751: LD_INT 0
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 1
47760: NEG
47761: PUSH
47762: LD_INT 1
47764: NEG
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 1
47772: NEG
47773: PUSH
47774: LD_INT 2
47776: NEG
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 1
47784: PUSH
47785: LD_INT 1
47787: NEG
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 2
47795: PUSH
47796: LD_INT 0
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 2
47805: PUSH
47806: LD_INT 1
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 1
47815: PUSH
47816: LD_INT 2
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 0
47825: PUSH
47826: LD_INT 2
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 1
47835: NEG
47836: PUSH
47837: LD_INT 1
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: LD_INT 2
47846: NEG
47847: PUSH
47848: LD_INT 0
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 2
47857: NEG
47858: PUSH
47859: LD_INT 1
47861: NEG
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 2
47869: NEG
47870: PUSH
47871: LD_INT 2
47873: NEG
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 2
47881: NEG
47882: PUSH
47883: LD_INT 3
47885: NEG
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 2
47893: PUSH
47894: LD_INT 1
47896: NEG
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 3
47904: PUSH
47905: LD_INT 1
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 1
47914: PUSH
47915: LD_INT 3
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: LD_INT 1
47924: NEG
47925: PUSH
47926: LD_INT 2
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 3
47935: NEG
47936: PUSH
47937: LD_INT 2
47939: NEG
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: LIST
47949: LIST
47950: LIST
47951: LIST
47952: LIST
47953: LIST
47954: LIST
47955: LIST
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47970: LD_ADDR_VAR 0 34
47974: PUSH
47975: LD_INT 0
47977: PUSH
47978: LD_INT 0
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 0
47987: PUSH
47988: LD_INT 1
47990: NEG
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 1
47998: PUSH
47999: LD_INT 0
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 1
48008: PUSH
48009: LD_INT 1
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 0
48018: PUSH
48019: LD_INT 1
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 1
48028: NEG
48029: PUSH
48030: LD_INT 0
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 1
48039: NEG
48040: PUSH
48041: LD_INT 1
48043: NEG
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: LD_INT 1
48051: NEG
48052: PUSH
48053: LD_INT 2
48055: NEG
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 0
48063: PUSH
48064: LD_INT 2
48066: NEG
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 1
48074: PUSH
48075: LD_INT 1
48077: NEG
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 2
48085: PUSH
48086: LD_INT 1
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 2
48095: PUSH
48096: LD_INT 2
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 1
48105: PUSH
48106: LD_INT 2
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 1
48115: NEG
48116: PUSH
48117: LD_INT 1
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: LD_INT 2
48126: NEG
48127: PUSH
48128: LD_INT 0
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: PUSH
48135: LD_INT 2
48137: NEG
48138: PUSH
48139: LD_INT 1
48141: NEG
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: LD_INT 2
48149: NEG
48150: PUSH
48151: LD_INT 2
48153: NEG
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 1
48161: NEG
48162: PUSH
48163: LD_INT 3
48165: NEG
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 1
48173: PUSH
48174: LD_INT 2
48176: NEG
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 3
48184: PUSH
48185: LD_INT 2
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 2
48194: PUSH
48195: LD_INT 3
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 2
48204: NEG
48205: PUSH
48206: LD_INT 1
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 3
48215: NEG
48216: PUSH
48217: LD_INT 1
48219: NEG
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: LIST
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48250: LD_ADDR_VAR 0 35
48254: PUSH
48255: LD_INT 0
48257: PUSH
48258: LD_INT 0
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: LD_INT 0
48267: PUSH
48268: LD_INT 1
48270: NEG
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 1
48278: PUSH
48279: LD_INT 0
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: LD_INT 1
48288: PUSH
48289: LD_INT 1
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: LD_INT 0
48298: PUSH
48299: LD_INT 1
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 1
48308: NEG
48309: PUSH
48310: LD_INT 0
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 1
48319: NEG
48320: PUSH
48321: LD_INT 1
48323: NEG
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: LD_INT 2
48331: PUSH
48332: LD_INT 1
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 2
48341: NEG
48342: PUSH
48343: LD_INT 1
48345: NEG
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: LIST
48355: LIST
48356: LIST
48357: LIST
48358: LIST
48359: LIST
48360: LIST
48361: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48362: LD_ADDR_VAR 0 36
48366: PUSH
48367: LD_INT 0
48369: PUSH
48370: LD_INT 0
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 0
48379: PUSH
48380: LD_INT 1
48382: NEG
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 1
48390: PUSH
48391: LD_INT 0
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 1
48400: PUSH
48401: LD_INT 1
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 0
48410: PUSH
48411: LD_INT 1
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 1
48420: NEG
48421: PUSH
48422: LD_INT 0
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 1
48431: NEG
48432: PUSH
48433: LD_INT 1
48435: NEG
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 1
48443: NEG
48444: PUSH
48445: LD_INT 2
48447: NEG
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 1
48455: PUSH
48456: LD_INT 2
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48474: LD_ADDR_VAR 0 37
48478: PUSH
48479: LD_INT 0
48481: PUSH
48482: LD_INT 0
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 0
48491: PUSH
48492: LD_INT 1
48494: NEG
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 1
48502: PUSH
48503: LD_INT 0
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 1
48512: PUSH
48513: LD_INT 1
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 0
48522: PUSH
48523: LD_INT 1
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 1
48532: NEG
48533: PUSH
48534: LD_INT 0
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 1
48543: NEG
48544: PUSH
48545: LD_INT 1
48547: NEG
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 1
48555: PUSH
48556: LD_INT 1
48558: NEG
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 1
48566: NEG
48567: PUSH
48568: LD_INT 1
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48586: LD_ADDR_VAR 0 38
48590: PUSH
48591: LD_INT 0
48593: PUSH
48594: LD_INT 0
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 0
48603: PUSH
48604: LD_INT 1
48606: NEG
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 1
48614: PUSH
48615: LD_INT 0
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: LD_INT 1
48624: PUSH
48625: LD_INT 1
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PUSH
48632: LD_INT 0
48634: PUSH
48635: LD_INT 1
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: LD_INT 1
48644: NEG
48645: PUSH
48646: LD_INT 0
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: PUSH
48653: LD_INT 1
48655: NEG
48656: PUSH
48657: LD_INT 1
48659: NEG
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 2
48667: PUSH
48668: LD_INT 1
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 2
48677: NEG
48678: PUSH
48679: LD_INT 1
48681: NEG
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48698: LD_ADDR_VAR 0 39
48702: PUSH
48703: LD_INT 0
48705: PUSH
48706: LD_INT 0
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 0
48715: PUSH
48716: LD_INT 1
48718: NEG
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 1
48726: PUSH
48727: LD_INT 0
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 1
48736: PUSH
48737: LD_INT 1
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: LD_INT 0
48746: PUSH
48747: LD_INT 1
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 1
48756: NEG
48757: PUSH
48758: LD_INT 0
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 1
48767: NEG
48768: PUSH
48769: LD_INT 1
48771: NEG
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 1
48779: NEG
48780: PUSH
48781: LD_INT 2
48783: NEG
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 1
48791: PUSH
48792: LD_INT 2
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48810: LD_ADDR_VAR 0 40
48814: PUSH
48815: LD_INT 0
48817: PUSH
48818: LD_INT 0
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: LD_INT 0
48827: PUSH
48828: LD_INT 1
48830: NEG
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: LD_INT 1
48838: PUSH
48839: LD_INT 0
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 1
48848: PUSH
48849: LD_INT 1
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 0
48858: PUSH
48859: LD_INT 1
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 1
48868: NEG
48869: PUSH
48870: LD_INT 0
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 1
48879: NEG
48880: PUSH
48881: LD_INT 1
48883: NEG
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 1
48891: PUSH
48892: LD_INT 1
48894: NEG
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 1
48902: NEG
48903: PUSH
48904: LD_INT 1
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: LIST
48921: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48922: LD_ADDR_VAR 0 41
48926: PUSH
48927: LD_INT 0
48929: PUSH
48930: LD_INT 0
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 0
48939: PUSH
48940: LD_INT 1
48942: NEG
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 1
48950: PUSH
48951: LD_INT 0
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 1
48960: PUSH
48961: LD_INT 1
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: LD_INT 0
48970: PUSH
48971: LD_INT 1
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 1
48980: NEG
48981: PUSH
48982: LD_INT 0
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 1
48991: NEG
48992: PUSH
48993: LD_INT 1
48995: NEG
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 1
49003: NEG
49004: PUSH
49005: LD_INT 2
49007: NEG
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 1
49015: PUSH
49016: LD_INT 1
49018: NEG
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: PUSH
49024: LD_INT 2
49026: PUSH
49027: LD_INT 0
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 2
49036: PUSH
49037: LD_INT 1
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: LD_INT 2
49046: PUSH
49047: LD_INT 2
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 1
49056: PUSH
49057: LD_INT 2
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 1
49066: NEG
49067: PUSH
49068: LD_INT 1
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: LD_INT 2
49077: NEG
49078: PUSH
49079: LD_INT 0
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 2
49088: NEG
49089: PUSH
49090: LD_INT 1
49092: NEG
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 2
49100: NEG
49101: PUSH
49102: LD_INT 2
49104: NEG
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: PUSH
49110: LD_INT 2
49112: NEG
49113: PUSH
49114: LD_INT 3
49116: NEG
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 2
49124: PUSH
49125: LD_INT 1
49127: NEG
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 3
49135: PUSH
49136: LD_INT 0
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 3
49145: PUSH
49146: LD_INT 1
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: LD_INT 3
49155: PUSH
49156: LD_INT 2
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 3
49165: PUSH
49166: LD_INT 3
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 2
49175: PUSH
49176: LD_INT 3
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 2
49185: NEG
49186: PUSH
49187: LD_INT 1
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 3
49196: NEG
49197: PUSH
49198: LD_INT 0
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 3
49207: NEG
49208: PUSH
49209: LD_INT 1
49211: NEG
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 3
49219: NEG
49220: PUSH
49221: LD_INT 2
49223: NEG
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 3
49231: NEG
49232: PUSH
49233: LD_INT 3
49235: NEG
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49272: LD_ADDR_VAR 0 42
49276: PUSH
49277: LD_INT 0
49279: PUSH
49280: LD_INT 0
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: PUSH
49287: LD_INT 0
49289: PUSH
49290: LD_INT 1
49292: NEG
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 1
49300: PUSH
49301: LD_INT 0
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PUSH
49308: LD_INT 1
49310: PUSH
49311: LD_INT 1
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 0
49320: PUSH
49321: LD_INT 1
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 1
49330: NEG
49331: PUSH
49332: LD_INT 0
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 1
49341: NEG
49342: PUSH
49343: LD_INT 1
49345: NEG
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 1
49353: NEG
49354: PUSH
49355: LD_INT 2
49357: NEG
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: PUSH
49363: LD_INT 0
49365: PUSH
49366: LD_INT 2
49368: NEG
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: LD_INT 1
49376: PUSH
49377: LD_INT 1
49379: NEG
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: LD_INT 2
49387: PUSH
49388: LD_INT 1
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: LD_INT 2
49397: PUSH
49398: LD_INT 2
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: LD_INT 1
49407: PUSH
49408: LD_INT 2
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 0
49417: PUSH
49418: LD_INT 2
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: LD_INT 1
49427: NEG
49428: PUSH
49429: LD_INT 1
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 2
49438: NEG
49439: PUSH
49440: LD_INT 1
49442: NEG
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 2
49450: NEG
49451: PUSH
49452: LD_INT 2
49454: NEG
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 2
49462: NEG
49463: PUSH
49464: LD_INT 3
49466: NEG
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 1
49474: NEG
49475: PUSH
49476: LD_INT 3
49478: NEG
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: LD_INT 0
49486: PUSH
49487: LD_INT 3
49489: NEG
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 1
49497: PUSH
49498: LD_INT 2
49500: NEG
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 3
49508: PUSH
49509: LD_INT 2
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 3
49518: PUSH
49519: LD_INT 3
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 2
49528: PUSH
49529: LD_INT 3
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 1
49538: PUSH
49539: LD_INT 3
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 0
49548: PUSH
49549: LD_INT 3
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 1
49558: NEG
49559: PUSH
49560: LD_INT 2
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 3
49569: NEG
49570: PUSH
49571: LD_INT 2
49573: NEG
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 3
49581: NEG
49582: PUSH
49583: LD_INT 3
49585: NEG
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: LIST
49604: LIST
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: LIST
49611: LIST
49612: LIST
49613: LIST
49614: LIST
49615: LIST
49616: LIST
49617: LIST
49618: LIST
49619: LIST
49620: LIST
49621: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49622: LD_ADDR_VAR 0 43
49626: PUSH
49627: LD_INT 0
49629: PUSH
49630: LD_INT 0
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: PUSH
49637: LD_INT 0
49639: PUSH
49640: LD_INT 1
49642: NEG
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 1
49650: PUSH
49651: LD_INT 0
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 1
49660: PUSH
49661: LD_INT 1
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 0
49670: PUSH
49671: LD_INT 1
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: LD_INT 1
49680: NEG
49681: PUSH
49682: LD_INT 0
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: LD_INT 1
49691: NEG
49692: PUSH
49693: LD_INT 1
49695: NEG
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 1
49703: NEG
49704: PUSH
49705: LD_INT 2
49707: NEG
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 0
49715: PUSH
49716: LD_INT 2
49718: NEG
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: LD_INT 1
49726: PUSH
49727: LD_INT 1
49729: NEG
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PUSH
49735: LD_INT 2
49737: PUSH
49738: LD_INT 0
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 2
49747: PUSH
49748: LD_INT 1
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 1
49757: PUSH
49758: LD_INT 2
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 0
49767: PUSH
49768: LD_INT 2
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 1
49777: NEG
49778: PUSH
49779: LD_INT 1
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 2
49788: NEG
49789: PUSH
49790: LD_INT 0
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 2
49799: NEG
49800: PUSH
49801: LD_INT 1
49803: NEG
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: LD_INT 1
49811: NEG
49812: PUSH
49813: LD_INT 3
49815: NEG
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 0
49823: PUSH
49824: LD_INT 3
49826: NEG
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: LD_INT 1
49834: PUSH
49835: LD_INT 2
49837: NEG
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 2
49845: PUSH
49846: LD_INT 1
49848: NEG
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 3
49856: PUSH
49857: LD_INT 0
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 3
49866: PUSH
49867: LD_INT 1
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 1
49876: PUSH
49877: LD_INT 3
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 0
49886: PUSH
49887: LD_INT 3
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 1
49896: NEG
49897: PUSH
49898: LD_INT 2
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 2
49907: NEG
49908: PUSH
49909: LD_INT 1
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 3
49918: NEG
49919: PUSH
49920: LD_INT 0
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 3
49929: NEG
49930: PUSH
49931: LD_INT 1
49933: NEG
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49970: LD_ADDR_VAR 0 44
49974: PUSH
49975: LD_INT 0
49977: PUSH
49978: LD_INT 0
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: LD_INT 0
49987: PUSH
49988: LD_INT 1
49990: NEG
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 1
49998: PUSH
49999: LD_INT 0
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 1
50008: PUSH
50009: LD_INT 1
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 0
50018: PUSH
50019: LD_INT 1
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: LD_INT 1
50028: NEG
50029: PUSH
50030: LD_INT 0
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 1
50039: NEG
50040: PUSH
50041: LD_INT 1
50043: NEG
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 1
50051: NEG
50052: PUSH
50053: LD_INT 2
50055: NEG
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 1
50063: PUSH
50064: LD_INT 1
50066: NEG
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 2
50074: PUSH
50075: LD_INT 0
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 2
50084: PUSH
50085: LD_INT 1
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 2
50094: PUSH
50095: LD_INT 2
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 1
50104: PUSH
50105: LD_INT 2
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 1
50114: NEG
50115: PUSH
50116: LD_INT 1
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PUSH
50123: LD_INT 2
50125: NEG
50126: PUSH
50127: LD_INT 0
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 2
50136: NEG
50137: PUSH
50138: LD_INT 1
50140: NEG
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 2
50148: NEG
50149: PUSH
50150: LD_INT 2
50152: NEG
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 2
50160: NEG
50161: PUSH
50162: LD_INT 3
50164: NEG
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 2
50172: PUSH
50173: LD_INT 1
50175: NEG
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 3
50183: PUSH
50184: LD_INT 0
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 3
50193: PUSH
50194: LD_INT 1
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 3
50203: PUSH
50204: LD_INT 2
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 3
50213: PUSH
50214: LD_INT 3
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: LD_INT 2
50223: PUSH
50224: LD_INT 3
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 2
50233: NEG
50234: PUSH
50235: LD_INT 1
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 3
50244: NEG
50245: PUSH
50246: LD_INT 0
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 3
50255: NEG
50256: PUSH
50257: LD_INT 1
50259: NEG
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 3
50267: NEG
50268: PUSH
50269: LD_INT 2
50271: NEG
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 3
50279: NEG
50280: PUSH
50281: LD_INT 3
50283: NEG
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: LIST
50293: LIST
50294: LIST
50295: LIST
50296: LIST
50297: LIST
50298: LIST
50299: LIST
50300: LIST
50301: LIST
50302: LIST
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50320: LD_ADDR_VAR 0 45
50324: PUSH
50325: LD_INT 0
50327: PUSH
50328: LD_INT 0
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 0
50337: PUSH
50338: LD_INT 1
50340: NEG
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 1
50348: PUSH
50349: LD_INT 0
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: LD_INT 1
50358: PUSH
50359: LD_INT 1
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 0
50368: PUSH
50369: LD_INT 1
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 1
50378: NEG
50379: PUSH
50380: LD_INT 0
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 1
50389: NEG
50390: PUSH
50391: LD_INT 1
50393: NEG
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: LD_INT 1
50401: NEG
50402: PUSH
50403: LD_INT 2
50405: NEG
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 0
50413: PUSH
50414: LD_INT 2
50416: NEG
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 1
50424: PUSH
50425: LD_INT 1
50427: NEG
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 2
50435: PUSH
50436: LD_INT 1
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 2
50445: PUSH
50446: LD_INT 2
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 1
50455: PUSH
50456: LD_INT 2
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 0
50465: PUSH
50466: LD_INT 2
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 1
50475: NEG
50476: PUSH
50477: LD_INT 1
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 2
50486: NEG
50487: PUSH
50488: LD_INT 1
50490: NEG
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 2
50498: NEG
50499: PUSH
50500: LD_INT 2
50502: NEG
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 2
50510: NEG
50511: PUSH
50512: LD_INT 3
50514: NEG
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 1
50522: NEG
50523: PUSH
50524: LD_INT 3
50526: NEG
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 0
50534: PUSH
50535: LD_INT 3
50537: NEG
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 1
50545: PUSH
50546: LD_INT 2
50548: NEG
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 3
50556: PUSH
50557: LD_INT 2
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 3
50566: PUSH
50567: LD_INT 3
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 2
50576: PUSH
50577: LD_INT 3
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 1
50586: PUSH
50587: LD_INT 3
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 0
50596: PUSH
50597: LD_INT 3
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 1
50606: NEG
50607: PUSH
50608: LD_INT 2
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 3
50617: NEG
50618: PUSH
50619: LD_INT 2
50621: NEG
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 3
50629: NEG
50630: PUSH
50631: LD_INT 3
50633: NEG
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: LIST
50643: LIST
50644: LIST
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: LIST
50650: LIST
50651: LIST
50652: LIST
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50670: LD_ADDR_VAR 0 46
50674: PUSH
50675: LD_INT 0
50677: PUSH
50678: LD_INT 0
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 0
50687: PUSH
50688: LD_INT 1
50690: NEG
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 1
50698: PUSH
50699: LD_INT 0
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 1
50708: PUSH
50709: LD_INT 1
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 0
50718: PUSH
50719: LD_INT 1
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 1
50728: NEG
50729: PUSH
50730: LD_INT 0
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 1
50739: NEG
50740: PUSH
50741: LD_INT 1
50743: NEG
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PUSH
50749: LD_INT 1
50751: NEG
50752: PUSH
50753: LD_INT 2
50755: NEG
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: LD_INT 0
50763: PUSH
50764: LD_INT 2
50766: NEG
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: LD_INT 1
50774: PUSH
50775: LD_INT 1
50777: NEG
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 2
50785: PUSH
50786: LD_INT 0
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 2
50795: PUSH
50796: LD_INT 1
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 1
50805: PUSH
50806: LD_INT 2
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 0
50815: PUSH
50816: LD_INT 2
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 1
50825: NEG
50826: PUSH
50827: LD_INT 1
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 2
50836: NEG
50837: PUSH
50838: LD_INT 0
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 2
50847: NEG
50848: PUSH
50849: LD_INT 1
50851: NEG
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 1
50859: NEG
50860: PUSH
50861: LD_INT 3
50863: NEG
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 0
50871: PUSH
50872: LD_INT 3
50874: NEG
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 1
50882: PUSH
50883: LD_INT 2
50885: NEG
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 2
50893: PUSH
50894: LD_INT 1
50896: NEG
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 3
50904: PUSH
50905: LD_INT 0
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 3
50914: PUSH
50915: LD_INT 1
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 1
50924: PUSH
50925: LD_INT 3
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 0
50934: PUSH
50935: LD_INT 3
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 1
50944: NEG
50945: PUSH
50946: LD_INT 2
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 2
50955: NEG
50956: PUSH
50957: LD_INT 1
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 3
50966: NEG
50967: PUSH
50968: LD_INT 0
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 3
50977: NEG
50978: PUSH
50979: LD_INT 1
50981: NEG
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51018: LD_ADDR_VAR 0 47
51022: PUSH
51023: LD_INT 0
51025: PUSH
51026: LD_INT 0
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 0
51035: PUSH
51036: LD_INT 1
51038: NEG
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: PUSH
51044: LD_INT 1
51046: PUSH
51047: LD_INT 0
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 1
51056: PUSH
51057: LD_INT 1
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 0
51066: PUSH
51067: LD_INT 1
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 1
51076: NEG
51077: PUSH
51078: LD_INT 0
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 1
51087: NEG
51088: PUSH
51089: LD_INT 1
51091: NEG
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 1
51099: NEG
51100: PUSH
51101: LD_INT 2
51103: NEG
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 0
51111: PUSH
51112: LD_INT 2
51114: NEG
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 1
51122: PUSH
51123: LD_INT 1
51125: NEG
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 2
51133: NEG
51134: PUSH
51135: LD_INT 1
51137: NEG
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 2
51145: NEG
51146: PUSH
51147: LD_INT 2
51149: NEG
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51169: LD_ADDR_VAR 0 48
51173: PUSH
51174: LD_INT 0
51176: PUSH
51177: LD_INT 0
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 0
51186: PUSH
51187: LD_INT 1
51189: NEG
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 1
51197: PUSH
51198: LD_INT 0
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 1
51207: PUSH
51208: LD_INT 1
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 0
51217: PUSH
51218: LD_INT 1
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 1
51227: NEG
51228: PUSH
51229: LD_INT 0
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 1
51238: NEG
51239: PUSH
51240: LD_INT 1
51242: NEG
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_INT 1
51250: NEG
51251: PUSH
51252: LD_INT 2
51254: NEG
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 0
51262: PUSH
51263: LD_INT 2
51265: NEG
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 1
51273: PUSH
51274: LD_INT 1
51276: NEG
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 2
51284: PUSH
51285: LD_INT 0
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 2
51294: PUSH
51295: LD_INT 1
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51316: LD_ADDR_VAR 0 49
51320: PUSH
51321: LD_INT 0
51323: PUSH
51324: LD_INT 0
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 0
51333: PUSH
51334: LD_INT 1
51336: NEG
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 1
51344: PUSH
51345: LD_INT 0
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 1
51354: PUSH
51355: LD_INT 1
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 0
51364: PUSH
51365: LD_INT 1
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 1
51374: NEG
51375: PUSH
51376: LD_INT 0
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 1
51385: NEG
51386: PUSH
51387: LD_INT 1
51389: NEG
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: LD_INT 1
51397: PUSH
51398: LD_INT 1
51400: NEG
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 2
51408: PUSH
51409: LD_INT 0
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 2
51418: PUSH
51419: LD_INT 1
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 2
51428: PUSH
51429: LD_INT 2
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 1
51438: PUSH
51439: LD_INT 2
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51460: LD_ADDR_VAR 0 50
51464: PUSH
51465: LD_INT 0
51467: PUSH
51468: LD_INT 0
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 0
51477: PUSH
51478: LD_INT 1
51480: NEG
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 1
51488: PUSH
51489: LD_INT 0
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 1
51498: PUSH
51499: LD_INT 1
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 0
51508: PUSH
51509: LD_INT 1
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 1
51518: NEG
51519: PUSH
51520: LD_INT 0
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: PUSH
51527: LD_INT 1
51529: NEG
51530: PUSH
51531: LD_INT 1
51533: NEG
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: LD_INT 2
51541: PUSH
51542: LD_INT 1
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 2
51551: PUSH
51552: LD_INT 2
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 1
51561: PUSH
51562: LD_INT 2
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 0
51571: PUSH
51572: LD_INT 2
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 1
51581: NEG
51582: PUSH
51583: LD_INT 1
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51604: LD_ADDR_VAR 0 51
51608: PUSH
51609: LD_INT 0
51611: PUSH
51612: LD_INT 0
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: LD_INT 0
51621: PUSH
51622: LD_INT 1
51624: NEG
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 1
51632: PUSH
51633: LD_INT 0
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 1
51642: PUSH
51643: LD_INT 1
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 0
51652: PUSH
51653: LD_INT 1
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 1
51662: NEG
51663: PUSH
51664: LD_INT 0
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: LD_INT 1
51673: NEG
51674: PUSH
51675: LD_INT 1
51677: NEG
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 1
51685: PUSH
51686: LD_INT 2
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 0
51695: PUSH
51696: LD_INT 2
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 1
51705: NEG
51706: PUSH
51707: LD_INT 1
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 2
51716: NEG
51717: PUSH
51718: LD_INT 0
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 2
51727: NEG
51728: PUSH
51729: LD_INT 1
51731: NEG
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51751: LD_ADDR_VAR 0 52
51755: PUSH
51756: LD_INT 0
51758: PUSH
51759: LD_INT 0
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 0
51768: PUSH
51769: LD_INT 1
51771: NEG
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 1
51779: PUSH
51780: LD_INT 0
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 1
51789: PUSH
51790: LD_INT 1
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 0
51799: PUSH
51800: LD_INT 1
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 1
51809: NEG
51810: PUSH
51811: LD_INT 0
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 1
51820: NEG
51821: PUSH
51822: LD_INT 1
51824: NEG
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 1
51832: NEG
51833: PUSH
51834: LD_INT 2
51836: NEG
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 1
51844: NEG
51845: PUSH
51846: LD_INT 1
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 2
51855: NEG
51856: PUSH
51857: LD_INT 0
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 2
51866: NEG
51867: PUSH
51868: LD_INT 1
51870: NEG
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 2
51878: NEG
51879: PUSH
51880: LD_INT 2
51882: NEG
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51902: LD_ADDR_VAR 0 53
51906: PUSH
51907: LD_INT 0
51909: PUSH
51910: LD_INT 0
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 0
51919: PUSH
51920: LD_INT 1
51922: NEG
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 1
51930: PUSH
51931: LD_INT 0
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 1
51940: PUSH
51941: LD_INT 1
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 0
51950: PUSH
51951: LD_INT 1
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 1
51960: NEG
51961: PUSH
51962: LD_INT 0
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 1
51971: NEG
51972: PUSH
51973: LD_INT 1
51975: NEG
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 1
51983: NEG
51984: PUSH
51985: LD_INT 2
51987: NEG
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 0
51995: PUSH
51996: LD_INT 2
51998: NEG
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 1
52006: PUSH
52007: LD_INT 1
52009: NEG
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 2
52017: PUSH
52018: LD_INT 0
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 2
52027: PUSH
52028: LD_INT 1
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 2
52037: PUSH
52038: LD_INT 2
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 1
52047: PUSH
52048: LD_INT 2
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 0
52057: PUSH
52058: LD_INT 2
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 1
52067: NEG
52068: PUSH
52069: LD_INT 1
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 2
52078: NEG
52079: PUSH
52080: LD_INT 0
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 2
52089: NEG
52090: PUSH
52091: LD_INT 1
52093: NEG
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 2
52101: NEG
52102: PUSH
52103: LD_INT 2
52105: NEG
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52132: LD_ADDR_VAR 0 54
52136: PUSH
52137: LD_INT 0
52139: PUSH
52140: LD_INT 0
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 0
52149: PUSH
52150: LD_INT 1
52152: NEG
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 1
52160: PUSH
52161: LD_INT 0
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 1
52170: PUSH
52171: LD_INT 1
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 0
52180: PUSH
52181: LD_INT 1
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 1
52190: NEG
52191: PUSH
52192: LD_INT 0
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 1
52201: NEG
52202: PUSH
52203: LD_INT 1
52205: NEG
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 1
52213: NEG
52214: PUSH
52215: LD_INT 2
52217: NEG
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 0
52225: PUSH
52226: LD_INT 2
52228: NEG
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 1
52236: PUSH
52237: LD_INT 1
52239: NEG
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 2
52247: PUSH
52248: LD_INT 0
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 2
52257: PUSH
52258: LD_INT 1
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 2
52267: PUSH
52268: LD_INT 2
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 1
52277: PUSH
52278: LD_INT 2
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 0
52287: PUSH
52288: LD_INT 2
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 1
52297: NEG
52298: PUSH
52299: LD_INT 1
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 2
52308: NEG
52309: PUSH
52310: LD_INT 0
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 2
52319: NEG
52320: PUSH
52321: LD_INT 1
52323: NEG
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 2
52331: NEG
52332: PUSH
52333: LD_INT 2
52335: NEG
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52362: LD_ADDR_VAR 0 55
52366: PUSH
52367: LD_INT 0
52369: PUSH
52370: LD_INT 0
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 0
52379: PUSH
52380: LD_INT 1
52382: NEG
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 1
52390: PUSH
52391: LD_INT 0
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 1
52400: PUSH
52401: LD_INT 1
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 0
52410: PUSH
52411: LD_INT 1
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 1
52420: NEG
52421: PUSH
52422: LD_INT 0
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 1
52431: NEG
52432: PUSH
52433: LD_INT 1
52435: NEG
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: LD_INT 1
52443: NEG
52444: PUSH
52445: LD_INT 2
52447: NEG
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 0
52455: PUSH
52456: LD_INT 2
52458: NEG
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 1
52466: PUSH
52467: LD_INT 1
52469: NEG
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 2
52477: PUSH
52478: LD_INT 0
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 2
52487: PUSH
52488: LD_INT 1
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 2
52497: PUSH
52498: LD_INT 2
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 1
52507: PUSH
52508: LD_INT 2
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 0
52517: PUSH
52518: LD_INT 2
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 1
52527: NEG
52528: PUSH
52529: LD_INT 1
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 2
52538: NEG
52539: PUSH
52540: LD_INT 0
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 2
52549: NEG
52550: PUSH
52551: LD_INT 1
52553: NEG
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 2
52561: NEG
52562: PUSH
52563: LD_INT 2
52565: NEG
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: LIST
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52592: LD_ADDR_VAR 0 56
52596: PUSH
52597: LD_INT 0
52599: PUSH
52600: LD_INT 0
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: LD_INT 0
52609: PUSH
52610: LD_INT 1
52612: NEG
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 1
52620: PUSH
52621: LD_INT 0
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 1
52630: PUSH
52631: LD_INT 1
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 0
52640: PUSH
52641: LD_INT 1
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 1
52650: NEG
52651: PUSH
52652: LD_INT 0
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 1
52661: NEG
52662: PUSH
52663: LD_INT 1
52665: NEG
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 1
52673: NEG
52674: PUSH
52675: LD_INT 2
52677: NEG
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 0
52685: PUSH
52686: LD_INT 2
52688: NEG
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 1
52696: PUSH
52697: LD_INT 1
52699: NEG
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: LD_INT 2
52707: PUSH
52708: LD_INT 0
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 2
52717: PUSH
52718: LD_INT 1
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 2
52727: PUSH
52728: LD_INT 2
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 1
52737: PUSH
52738: LD_INT 2
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 0
52747: PUSH
52748: LD_INT 2
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 1
52757: NEG
52758: PUSH
52759: LD_INT 1
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 2
52768: NEG
52769: PUSH
52770: LD_INT 0
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 2
52779: NEG
52780: PUSH
52781: LD_INT 1
52783: NEG
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 2
52791: NEG
52792: PUSH
52793: LD_INT 2
52795: NEG
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: LIST
52810: LIST
52811: LIST
52812: LIST
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52822: LD_ADDR_VAR 0 57
52826: PUSH
52827: LD_INT 0
52829: PUSH
52830: LD_INT 0
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 0
52839: PUSH
52840: LD_INT 1
52842: NEG
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 1
52850: PUSH
52851: LD_INT 0
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 1
52860: PUSH
52861: LD_INT 1
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 0
52870: PUSH
52871: LD_INT 1
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 1
52880: NEG
52881: PUSH
52882: LD_INT 0
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PUSH
52889: LD_INT 1
52891: NEG
52892: PUSH
52893: LD_INT 1
52895: NEG
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: LD_INT 1
52903: NEG
52904: PUSH
52905: LD_INT 2
52907: NEG
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 0
52915: PUSH
52916: LD_INT 2
52918: NEG
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 1
52926: PUSH
52927: LD_INT 1
52929: NEG
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 2
52937: PUSH
52938: LD_INT 0
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 2
52947: PUSH
52948: LD_INT 1
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 2
52957: PUSH
52958: LD_INT 2
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 1
52967: PUSH
52968: LD_INT 2
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 0
52977: PUSH
52978: LD_INT 2
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 1
52987: NEG
52988: PUSH
52989: LD_INT 1
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 2
52998: NEG
52999: PUSH
53000: LD_INT 0
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 2
53009: NEG
53010: PUSH
53011: LD_INT 1
53013: NEG
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 2
53021: NEG
53022: PUSH
53023: LD_INT 2
53025: NEG
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53052: LD_ADDR_VAR 0 58
53056: PUSH
53057: LD_INT 0
53059: PUSH
53060: LD_INT 0
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 0
53069: PUSH
53070: LD_INT 1
53072: NEG
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 1
53080: PUSH
53081: LD_INT 0
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 1
53090: PUSH
53091: LD_INT 1
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 0
53100: PUSH
53101: LD_INT 1
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 1
53110: NEG
53111: PUSH
53112: LD_INT 0
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: PUSH
53119: LD_INT 1
53121: NEG
53122: PUSH
53123: LD_INT 1
53125: NEG
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 1
53133: NEG
53134: PUSH
53135: LD_INT 2
53137: NEG
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 0
53145: PUSH
53146: LD_INT 2
53148: NEG
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 1
53156: PUSH
53157: LD_INT 1
53159: NEG
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: PUSH
53165: LD_INT 2
53167: PUSH
53168: LD_INT 0
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: LD_INT 2
53177: PUSH
53178: LD_INT 1
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 2
53187: PUSH
53188: LD_INT 2
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 1
53197: PUSH
53198: LD_INT 2
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 0
53207: PUSH
53208: LD_INT 2
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 1
53217: NEG
53218: PUSH
53219: LD_INT 1
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 2
53228: NEG
53229: PUSH
53230: LD_INT 0
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 2
53239: NEG
53240: PUSH
53241: LD_INT 1
53243: NEG
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 2
53251: NEG
53252: PUSH
53253: LD_INT 2
53255: NEG
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53282: LD_ADDR_VAR 0 59
53286: PUSH
53287: LD_INT 0
53289: PUSH
53290: LD_INT 0
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 0
53299: PUSH
53300: LD_INT 1
53302: NEG
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 1
53310: PUSH
53311: LD_INT 0
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 1
53320: PUSH
53321: LD_INT 1
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 0
53330: PUSH
53331: LD_INT 1
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 1
53340: NEG
53341: PUSH
53342: LD_INT 0
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 1
53351: NEG
53352: PUSH
53353: LD_INT 1
53355: NEG
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53370: LD_ADDR_VAR 0 60
53374: PUSH
53375: LD_INT 0
53377: PUSH
53378: LD_INT 0
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: LD_INT 0
53387: PUSH
53388: LD_INT 1
53390: NEG
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 1
53398: PUSH
53399: LD_INT 0
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: LD_INT 1
53408: PUSH
53409: LD_INT 1
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 0
53418: PUSH
53419: LD_INT 1
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 1
53428: NEG
53429: PUSH
53430: LD_INT 0
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 1
53439: NEG
53440: PUSH
53441: LD_INT 1
53443: NEG
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53458: LD_ADDR_VAR 0 61
53462: PUSH
53463: LD_INT 0
53465: PUSH
53466: LD_INT 0
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 0
53475: PUSH
53476: LD_INT 1
53478: NEG
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 1
53486: PUSH
53487: LD_INT 0
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 1
53496: PUSH
53497: LD_INT 1
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 0
53506: PUSH
53507: LD_INT 1
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 1
53516: NEG
53517: PUSH
53518: LD_INT 0
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 1
53527: NEG
53528: PUSH
53529: LD_INT 1
53531: NEG
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53546: LD_ADDR_VAR 0 62
53550: PUSH
53551: LD_INT 0
53553: PUSH
53554: LD_INT 0
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 0
53563: PUSH
53564: LD_INT 1
53566: NEG
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 1
53574: PUSH
53575: LD_INT 0
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 1
53584: PUSH
53585: LD_INT 1
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 0
53594: PUSH
53595: LD_INT 1
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 1
53604: NEG
53605: PUSH
53606: LD_INT 0
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 1
53615: NEG
53616: PUSH
53617: LD_INT 1
53619: NEG
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53634: LD_ADDR_VAR 0 63
53638: PUSH
53639: LD_INT 0
53641: PUSH
53642: LD_INT 0
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 0
53651: PUSH
53652: LD_INT 1
53654: NEG
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 1
53662: PUSH
53663: LD_INT 0
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 1
53672: PUSH
53673: LD_INT 1
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 0
53682: PUSH
53683: LD_INT 1
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 1
53692: NEG
53693: PUSH
53694: LD_INT 0
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 1
53703: NEG
53704: PUSH
53705: LD_INT 1
53707: NEG
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53722: LD_ADDR_VAR 0 64
53726: PUSH
53727: LD_INT 0
53729: PUSH
53730: LD_INT 0
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 0
53739: PUSH
53740: LD_INT 1
53742: NEG
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 1
53750: PUSH
53751: LD_INT 0
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 1
53760: PUSH
53761: LD_INT 1
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 0
53770: PUSH
53771: LD_INT 1
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 1
53780: NEG
53781: PUSH
53782: LD_INT 0
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 1
53791: NEG
53792: PUSH
53793: LD_INT 1
53795: NEG
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: ST_TO_ADDR
// end ; 1 :
53810: GO 59707
53812: LD_INT 1
53814: DOUBLE
53815: EQUAL
53816: IFTRUE 53820
53818: GO 56443
53820: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53821: LD_ADDR_VAR 0 11
53825: PUSH
53826: LD_INT 1
53828: NEG
53829: PUSH
53830: LD_INT 3
53832: NEG
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 0
53840: PUSH
53841: LD_INT 3
53843: NEG
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 1
53851: PUSH
53852: LD_INT 2
53854: NEG
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: LIST
53864: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53865: LD_ADDR_VAR 0 12
53869: PUSH
53870: LD_INT 2
53872: PUSH
53873: LD_INT 1
53875: NEG
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 3
53883: PUSH
53884: LD_INT 0
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 3
53893: PUSH
53894: LD_INT 1
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: LIST
53905: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53906: LD_ADDR_VAR 0 13
53910: PUSH
53911: LD_INT 3
53913: PUSH
53914: LD_INT 2
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 3
53923: PUSH
53924: LD_INT 3
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 2
53933: PUSH
53934: LD_INT 3
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: LIST
53945: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53946: LD_ADDR_VAR 0 14
53950: PUSH
53951: LD_INT 1
53953: PUSH
53954: LD_INT 3
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 0
53963: PUSH
53964: LD_INT 3
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 1
53973: NEG
53974: PUSH
53975: LD_INT 2
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: LIST
53986: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53987: LD_ADDR_VAR 0 15
53991: PUSH
53992: LD_INT 2
53994: NEG
53995: PUSH
53996: LD_INT 1
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 3
54005: NEG
54006: PUSH
54007: LD_INT 0
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 3
54016: NEG
54017: PUSH
54018: LD_INT 1
54020: NEG
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: LIST
54030: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54031: LD_ADDR_VAR 0 16
54035: PUSH
54036: LD_INT 2
54038: NEG
54039: PUSH
54040: LD_INT 3
54042: NEG
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 3
54050: NEG
54051: PUSH
54052: LD_INT 2
54054: NEG
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 3
54062: NEG
54063: PUSH
54064: LD_INT 3
54066: NEG
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: LIST
54076: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54077: LD_ADDR_VAR 0 17
54081: PUSH
54082: LD_INT 1
54084: NEG
54085: PUSH
54086: LD_INT 3
54088: NEG
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 0
54096: PUSH
54097: LD_INT 3
54099: NEG
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: PUSH
54105: LD_INT 1
54107: PUSH
54108: LD_INT 2
54110: NEG
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: LIST
54120: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54121: LD_ADDR_VAR 0 18
54125: PUSH
54126: LD_INT 2
54128: PUSH
54129: LD_INT 1
54131: NEG
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 3
54139: PUSH
54140: LD_INT 0
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 3
54149: PUSH
54150: LD_INT 1
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: LIST
54161: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54162: LD_ADDR_VAR 0 19
54166: PUSH
54167: LD_INT 3
54169: PUSH
54170: LD_INT 2
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 3
54179: PUSH
54180: LD_INT 3
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 2
54189: PUSH
54190: LD_INT 3
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: LIST
54201: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54202: LD_ADDR_VAR 0 20
54206: PUSH
54207: LD_INT 1
54209: PUSH
54210: LD_INT 3
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: LD_INT 0
54219: PUSH
54220: LD_INT 3
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 1
54229: NEG
54230: PUSH
54231: LD_INT 2
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: LIST
54242: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54243: LD_ADDR_VAR 0 21
54247: PUSH
54248: LD_INT 2
54250: NEG
54251: PUSH
54252: LD_INT 1
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 3
54261: NEG
54262: PUSH
54263: LD_INT 0
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 3
54272: NEG
54273: PUSH
54274: LD_INT 1
54276: NEG
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: LIST
54286: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54287: LD_ADDR_VAR 0 22
54291: PUSH
54292: LD_INT 2
54294: NEG
54295: PUSH
54296: LD_INT 3
54298: NEG
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 3
54306: NEG
54307: PUSH
54308: LD_INT 2
54310: NEG
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 3
54318: NEG
54319: PUSH
54320: LD_INT 3
54322: NEG
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: LIST
54332: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
54333: LD_ADDR_VAR 0 23
54337: PUSH
54338: LD_INT 0
54340: PUSH
54341: LD_INT 3
54343: NEG
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 1
54351: NEG
54352: PUSH
54353: LD_INT 4
54355: NEG
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 1
54363: PUSH
54364: LD_INT 3
54366: NEG
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: LIST
54376: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
54377: LD_ADDR_VAR 0 24
54381: PUSH
54382: LD_INT 3
54384: PUSH
54385: LD_INT 0
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 3
54394: PUSH
54395: LD_INT 1
54397: NEG
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 4
54405: PUSH
54406: LD_INT 1
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: LIST
54417: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
54418: LD_ADDR_VAR 0 25
54422: PUSH
54423: LD_INT 3
54425: PUSH
54426: LD_INT 3
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 4
54435: PUSH
54436: LD_INT 3
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 3
54445: PUSH
54446: LD_INT 4
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: LIST
54457: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
54458: LD_ADDR_VAR 0 26
54462: PUSH
54463: LD_INT 0
54465: PUSH
54466: LD_INT 3
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 1
54475: PUSH
54476: LD_INT 4
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 1
54485: NEG
54486: PUSH
54487: LD_INT 3
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: LIST
54498: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
54499: LD_ADDR_VAR 0 27
54503: PUSH
54504: LD_INT 3
54506: NEG
54507: PUSH
54508: LD_INT 0
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 3
54517: NEG
54518: PUSH
54519: LD_INT 1
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 4
54528: NEG
54529: PUSH
54530: LD_INT 1
54532: NEG
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: LIST
54542: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
54543: LD_ADDR_VAR 0 28
54547: PUSH
54548: LD_INT 3
54550: NEG
54551: PUSH
54552: LD_INT 3
54554: NEG
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 3
54562: NEG
54563: PUSH
54564: LD_INT 4
54566: NEG
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 4
54574: NEG
54575: PUSH
54576: LD_INT 3
54578: NEG
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: LIST
54588: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
54589: LD_ADDR_VAR 0 29
54593: PUSH
54594: LD_INT 1
54596: NEG
54597: PUSH
54598: LD_INT 3
54600: NEG
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 0
54608: PUSH
54609: LD_INT 3
54611: NEG
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 1
54619: PUSH
54620: LD_INT 2
54622: NEG
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 1
54630: NEG
54631: PUSH
54632: LD_INT 4
54634: NEG
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 0
54642: PUSH
54643: LD_INT 4
54645: NEG
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 1
54653: PUSH
54654: LD_INT 3
54656: NEG
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 1
54664: NEG
54665: PUSH
54666: LD_INT 5
54668: NEG
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 0
54676: PUSH
54677: LD_INT 5
54679: NEG
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 1
54687: PUSH
54688: LD_INT 4
54690: NEG
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 1
54698: NEG
54699: PUSH
54700: LD_INT 6
54702: NEG
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 0
54710: PUSH
54711: LD_INT 6
54713: NEG
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 1
54721: PUSH
54722: LD_INT 5
54724: NEG
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54744: LD_ADDR_VAR 0 30
54748: PUSH
54749: LD_INT 2
54751: PUSH
54752: LD_INT 1
54754: NEG
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 3
54762: PUSH
54763: LD_INT 0
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 3
54772: PUSH
54773: LD_INT 1
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: LD_INT 3
54782: PUSH
54783: LD_INT 1
54785: NEG
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 4
54793: PUSH
54794: LD_INT 0
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 4
54803: PUSH
54804: LD_INT 1
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 4
54813: PUSH
54814: LD_INT 1
54816: NEG
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: PUSH
54822: LD_INT 5
54824: PUSH
54825: LD_INT 0
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 5
54834: PUSH
54835: LD_INT 1
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 5
54844: PUSH
54845: LD_INT 1
54847: NEG
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 6
54855: PUSH
54856: LD_INT 0
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 6
54865: PUSH
54866: LD_INT 1
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54887: LD_ADDR_VAR 0 31
54891: PUSH
54892: LD_INT 3
54894: PUSH
54895: LD_INT 2
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 3
54904: PUSH
54905: LD_INT 3
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 2
54914: PUSH
54915: LD_INT 3
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 4
54924: PUSH
54925: LD_INT 3
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 4
54934: PUSH
54935: LD_INT 4
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 3
54944: PUSH
54945: LD_INT 4
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 5
54954: PUSH
54955: LD_INT 4
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 5
54964: PUSH
54965: LD_INT 5
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 4
54974: PUSH
54975: LD_INT 5
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 6
54984: PUSH
54985: LD_INT 5
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 6
54994: PUSH
54995: LD_INT 6
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 5
55004: PUSH
55005: LD_INT 6
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55026: LD_ADDR_VAR 0 32
55030: PUSH
55031: LD_INT 1
55033: PUSH
55034: LD_INT 3
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 0
55043: PUSH
55044: LD_INT 3
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 1
55053: NEG
55054: PUSH
55055: LD_INT 2
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 1
55064: PUSH
55065: LD_INT 4
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 0
55074: PUSH
55075: LD_INT 4
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 1
55084: NEG
55085: PUSH
55086: LD_INT 3
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 1
55095: PUSH
55096: LD_INT 5
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 0
55105: PUSH
55106: LD_INT 5
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 1
55115: NEG
55116: PUSH
55117: LD_INT 4
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 1
55126: PUSH
55127: LD_INT 6
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 0
55136: PUSH
55137: LD_INT 6
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 1
55146: NEG
55147: PUSH
55148: LD_INT 5
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55169: LD_ADDR_VAR 0 33
55173: PUSH
55174: LD_INT 2
55176: NEG
55177: PUSH
55178: LD_INT 1
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 3
55187: NEG
55188: PUSH
55189: LD_INT 0
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 3
55198: NEG
55199: PUSH
55200: LD_INT 1
55202: NEG
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 3
55210: NEG
55211: PUSH
55212: LD_INT 1
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 4
55221: NEG
55222: PUSH
55223: LD_INT 0
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 4
55232: NEG
55233: PUSH
55234: LD_INT 1
55236: NEG
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 4
55244: NEG
55245: PUSH
55246: LD_INT 1
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 5
55255: NEG
55256: PUSH
55257: LD_INT 0
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 5
55266: NEG
55267: PUSH
55268: LD_INT 1
55270: NEG
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 5
55278: NEG
55279: PUSH
55280: LD_INT 1
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 6
55289: NEG
55290: PUSH
55291: LD_INT 0
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 6
55300: NEG
55301: PUSH
55302: LD_INT 1
55304: NEG
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: LIST
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
55324: LD_ADDR_VAR 0 34
55328: PUSH
55329: LD_INT 2
55331: NEG
55332: PUSH
55333: LD_INT 3
55335: NEG
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 3
55343: NEG
55344: PUSH
55345: LD_INT 2
55347: NEG
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 3
55355: NEG
55356: PUSH
55357: LD_INT 3
55359: NEG
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 3
55367: NEG
55368: PUSH
55369: LD_INT 4
55371: NEG
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 4
55379: NEG
55380: PUSH
55381: LD_INT 3
55383: NEG
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 4
55391: NEG
55392: PUSH
55393: LD_INT 4
55395: NEG
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 4
55403: NEG
55404: PUSH
55405: LD_INT 5
55407: NEG
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 5
55415: NEG
55416: PUSH
55417: LD_INT 4
55419: NEG
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 5
55427: NEG
55428: PUSH
55429: LD_INT 5
55431: NEG
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 5
55439: NEG
55440: PUSH
55441: LD_INT 6
55443: NEG
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 6
55451: NEG
55452: PUSH
55453: LD_INT 5
55455: NEG
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PUSH
55461: LD_INT 6
55463: NEG
55464: PUSH
55465: LD_INT 6
55467: NEG
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
55487: LD_ADDR_VAR 0 41
55491: PUSH
55492: LD_INT 0
55494: PUSH
55495: LD_INT 2
55497: NEG
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 1
55505: NEG
55506: PUSH
55507: LD_INT 3
55509: NEG
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 1
55517: PUSH
55518: LD_INT 2
55520: NEG
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: LIST
55530: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
55531: LD_ADDR_VAR 0 42
55535: PUSH
55536: LD_INT 2
55538: PUSH
55539: LD_INT 0
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 2
55548: PUSH
55549: LD_INT 1
55551: NEG
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 3
55559: PUSH
55560: LD_INT 1
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: LIST
55571: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
55572: LD_ADDR_VAR 0 43
55576: PUSH
55577: LD_INT 2
55579: PUSH
55580: LD_INT 2
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 3
55589: PUSH
55590: LD_INT 2
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 2
55599: PUSH
55600: LD_INT 3
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: LIST
55611: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55612: LD_ADDR_VAR 0 44
55616: PUSH
55617: LD_INT 0
55619: PUSH
55620: LD_INT 2
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 1
55629: PUSH
55630: LD_INT 3
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 1
55639: NEG
55640: PUSH
55641: LD_INT 2
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: LIST
55652: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55653: LD_ADDR_VAR 0 45
55657: PUSH
55658: LD_INT 2
55660: NEG
55661: PUSH
55662: LD_INT 0
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 2
55671: NEG
55672: PUSH
55673: LD_INT 1
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 3
55682: NEG
55683: PUSH
55684: LD_INT 1
55686: NEG
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: LIST
55696: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55697: LD_ADDR_VAR 0 46
55701: PUSH
55702: LD_INT 2
55704: NEG
55705: PUSH
55706: LD_INT 2
55708: NEG
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 2
55716: NEG
55717: PUSH
55718: LD_INT 3
55720: NEG
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 3
55728: NEG
55729: PUSH
55730: LD_INT 2
55732: NEG
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: LIST
55742: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55743: LD_ADDR_VAR 0 47
55747: PUSH
55748: LD_INT 2
55750: NEG
55751: PUSH
55752: LD_INT 3
55754: NEG
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 1
55762: NEG
55763: PUSH
55764: LD_INT 3
55766: NEG
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55776: LD_ADDR_VAR 0 48
55780: PUSH
55781: LD_INT 1
55783: PUSH
55784: LD_INT 2
55786: NEG
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 2
55794: PUSH
55795: LD_INT 1
55797: NEG
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55807: LD_ADDR_VAR 0 49
55811: PUSH
55812: LD_INT 3
55814: PUSH
55815: LD_INT 1
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 3
55824: PUSH
55825: LD_INT 2
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55836: LD_ADDR_VAR 0 50
55840: PUSH
55841: LD_INT 2
55843: PUSH
55844: LD_INT 3
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 1
55853: PUSH
55854: LD_INT 3
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55865: LD_ADDR_VAR 0 51
55869: PUSH
55870: LD_INT 1
55872: NEG
55873: PUSH
55874: LD_INT 2
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 2
55883: NEG
55884: PUSH
55885: LD_INT 1
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55896: LD_ADDR_VAR 0 52
55900: PUSH
55901: LD_INT 3
55903: NEG
55904: PUSH
55905: LD_INT 1
55907: NEG
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 3
55915: NEG
55916: PUSH
55917: LD_INT 2
55919: NEG
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55929: LD_ADDR_VAR 0 53
55933: PUSH
55934: LD_INT 1
55936: NEG
55937: PUSH
55938: LD_INT 3
55940: NEG
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 0
55948: PUSH
55949: LD_INT 3
55951: NEG
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 1
55959: PUSH
55960: LD_INT 2
55962: NEG
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: LIST
55972: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55973: LD_ADDR_VAR 0 54
55977: PUSH
55978: LD_INT 2
55980: PUSH
55981: LD_INT 1
55983: NEG
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 3
55991: PUSH
55992: LD_INT 0
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 3
56001: PUSH
56002: LD_INT 1
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: LIST
56013: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56014: LD_ADDR_VAR 0 55
56018: PUSH
56019: LD_INT 3
56021: PUSH
56022: LD_INT 2
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 3
56031: PUSH
56032: LD_INT 3
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 2
56041: PUSH
56042: LD_INT 3
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: LIST
56053: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56054: LD_ADDR_VAR 0 56
56058: PUSH
56059: LD_INT 1
56061: PUSH
56062: LD_INT 3
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 0
56071: PUSH
56072: LD_INT 3
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 1
56081: NEG
56082: PUSH
56083: LD_INT 2
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: LIST
56094: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56095: LD_ADDR_VAR 0 57
56099: PUSH
56100: LD_INT 2
56102: NEG
56103: PUSH
56104: LD_INT 1
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 3
56113: NEG
56114: PUSH
56115: LD_INT 0
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 3
56124: NEG
56125: PUSH
56126: LD_INT 1
56128: NEG
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: LIST
56138: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56139: LD_ADDR_VAR 0 58
56143: PUSH
56144: LD_INT 2
56146: NEG
56147: PUSH
56148: LD_INT 3
56150: NEG
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 3
56158: NEG
56159: PUSH
56160: LD_INT 2
56162: NEG
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 3
56170: NEG
56171: PUSH
56172: LD_INT 3
56174: NEG
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: LIST
56184: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56185: LD_ADDR_VAR 0 59
56189: PUSH
56190: LD_INT 1
56192: NEG
56193: PUSH
56194: LD_INT 2
56196: NEG
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 0
56204: PUSH
56205: LD_INT 2
56207: NEG
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 1
56215: PUSH
56216: LD_INT 1
56218: NEG
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: LIST
56228: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56229: LD_ADDR_VAR 0 60
56233: PUSH
56234: LD_INT 1
56236: PUSH
56237: LD_INT 1
56239: NEG
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_INT 2
56247: PUSH
56248: LD_INT 0
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 2
56257: PUSH
56258: LD_INT 1
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: LIST
56269: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56270: LD_ADDR_VAR 0 61
56274: PUSH
56275: LD_INT 2
56277: PUSH
56278: LD_INT 1
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 2
56287: PUSH
56288: LD_INT 2
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 1
56297: PUSH
56298: LD_INT 2
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: LIST
56309: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56310: LD_ADDR_VAR 0 62
56314: PUSH
56315: LD_INT 1
56317: PUSH
56318: LD_INT 2
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 0
56327: PUSH
56328: LD_INT 2
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 1
56337: NEG
56338: PUSH
56339: LD_INT 1
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: LIST
56350: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56351: LD_ADDR_VAR 0 63
56355: PUSH
56356: LD_INT 1
56358: NEG
56359: PUSH
56360: LD_INT 1
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 2
56369: NEG
56370: PUSH
56371: LD_INT 0
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 2
56380: NEG
56381: PUSH
56382: LD_INT 1
56384: NEG
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: LIST
56394: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56395: LD_ADDR_VAR 0 64
56399: PUSH
56400: LD_INT 1
56402: NEG
56403: PUSH
56404: LD_INT 2
56406: NEG
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 2
56414: NEG
56415: PUSH
56416: LD_INT 1
56418: NEG
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 2
56426: NEG
56427: PUSH
56428: LD_INT 2
56430: NEG
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: LIST
56440: ST_TO_ADDR
// end ; 2 :
56441: GO 59707
56443: LD_INT 2
56445: DOUBLE
56446: EQUAL
56447: IFTRUE 56451
56449: GO 59706
56451: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
56452: LD_ADDR_VAR 0 29
56456: PUSH
56457: LD_INT 4
56459: PUSH
56460: LD_INT 0
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 4
56469: PUSH
56470: LD_INT 1
56472: NEG
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 5
56480: PUSH
56481: LD_INT 0
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 5
56490: PUSH
56491: LD_INT 1
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 4
56500: PUSH
56501: LD_INT 1
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 3
56510: PUSH
56511: LD_INT 0
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 3
56520: PUSH
56521: LD_INT 1
56523: NEG
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 3
56531: PUSH
56532: LD_INT 2
56534: NEG
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: LD_INT 5
56542: PUSH
56543: LD_INT 2
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 3
56552: PUSH
56553: LD_INT 3
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 3
56562: PUSH
56563: LD_INT 2
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 4
56572: PUSH
56573: LD_INT 3
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 4
56582: PUSH
56583: LD_INT 4
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 3
56592: PUSH
56593: LD_INT 4
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 2
56602: PUSH
56603: LD_INT 3
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: LD_INT 2
56612: PUSH
56613: LD_INT 2
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 4
56622: PUSH
56623: LD_INT 2
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 2
56632: PUSH
56633: LD_INT 4
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 0
56642: PUSH
56643: LD_INT 4
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: LD_INT 0
56652: PUSH
56653: LD_INT 3
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 1
56662: PUSH
56663: LD_INT 4
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 1
56672: PUSH
56673: LD_INT 5
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 0
56682: PUSH
56683: LD_INT 5
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 1
56692: NEG
56693: PUSH
56694: LD_INT 4
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 1
56703: NEG
56704: PUSH
56705: LD_INT 3
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 2
56714: PUSH
56715: LD_INT 5
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 2
56724: NEG
56725: PUSH
56726: LD_INT 3
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: LD_INT 3
56735: NEG
56736: PUSH
56737: LD_INT 0
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 3
56746: NEG
56747: PUSH
56748: LD_INT 1
56750: NEG
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: LD_INT 2
56758: NEG
56759: PUSH
56760: LD_INT 0
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: PUSH
56767: LD_INT 2
56769: NEG
56770: PUSH
56771: LD_INT 1
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 3
56780: NEG
56781: PUSH
56782: LD_INT 1
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 4
56791: NEG
56792: PUSH
56793: LD_INT 0
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 4
56802: NEG
56803: PUSH
56804: LD_INT 1
56806: NEG
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: LD_INT 4
56814: NEG
56815: PUSH
56816: LD_INT 2
56818: NEG
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 2
56826: NEG
56827: PUSH
56828: LD_INT 2
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 4
56837: NEG
56838: PUSH
56839: LD_INT 4
56841: NEG
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 4
56849: NEG
56850: PUSH
56851: LD_INT 5
56853: NEG
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 3
56861: NEG
56862: PUSH
56863: LD_INT 4
56865: NEG
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 3
56873: NEG
56874: PUSH
56875: LD_INT 3
56877: NEG
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 4
56885: NEG
56886: PUSH
56887: LD_INT 3
56889: NEG
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 5
56897: NEG
56898: PUSH
56899: LD_INT 4
56901: NEG
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: PUSH
56907: LD_INT 5
56909: NEG
56910: PUSH
56911: LD_INT 5
56913: NEG
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 3
56921: NEG
56922: PUSH
56923: LD_INT 5
56925: NEG
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 5
56933: NEG
56934: PUSH
56935: LD_INT 3
56937: NEG
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: LIST
56966: LIST
56967: LIST
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56990: LD_ADDR_VAR 0 30
56994: PUSH
56995: LD_INT 4
56997: PUSH
56998: LD_INT 4
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 4
57007: PUSH
57008: LD_INT 3
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 5
57017: PUSH
57018: LD_INT 4
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 5
57027: PUSH
57028: LD_INT 5
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 4
57037: PUSH
57038: LD_INT 5
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: LD_INT 3
57047: PUSH
57048: LD_INT 4
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 3
57057: PUSH
57058: LD_INT 3
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 5
57067: PUSH
57068: LD_INT 3
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 3
57077: PUSH
57078: LD_INT 5
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 0
57087: PUSH
57088: LD_INT 3
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 0
57097: PUSH
57098: LD_INT 2
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 1
57107: PUSH
57108: LD_INT 3
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 1
57117: PUSH
57118: LD_INT 4
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: LD_INT 0
57127: PUSH
57128: LD_INT 4
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 1
57137: NEG
57138: PUSH
57139: LD_INT 3
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 1
57148: NEG
57149: PUSH
57150: LD_INT 2
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 2
57159: PUSH
57160: LD_INT 4
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 2
57169: NEG
57170: PUSH
57171: LD_INT 2
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 4
57180: NEG
57181: PUSH
57182: LD_INT 0
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 4
57191: NEG
57192: PUSH
57193: LD_INT 1
57195: NEG
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 3
57203: NEG
57204: PUSH
57205: LD_INT 0
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 3
57214: NEG
57215: PUSH
57216: LD_INT 1
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 4
57225: NEG
57226: PUSH
57227: LD_INT 1
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 5
57236: NEG
57237: PUSH
57238: LD_INT 0
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 5
57247: NEG
57248: PUSH
57249: LD_INT 1
57251: NEG
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: PUSH
57257: LD_INT 5
57259: NEG
57260: PUSH
57261: LD_INT 2
57263: NEG
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: PUSH
57269: LD_INT 3
57271: NEG
57272: PUSH
57273: LD_INT 2
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 3
57282: NEG
57283: PUSH
57284: LD_INT 3
57286: NEG
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 3
57294: NEG
57295: PUSH
57296: LD_INT 4
57298: NEG
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 2
57306: NEG
57307: PUSH
57308: LD_INT 3
57310: NEG
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 2
57318: NEG
57319: PUSH
57320: LD_INT 2
57322: NEG
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 3
57330: NEG
57331: PUSH
57332: LD_INT 2
57334: NEG
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 4
57342: NEG
57343: PUSH
57344: LD_INT 3
57346: NEG
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 4
57354: NEG
57355: PUSH
57356: LD_INT 4
57358: NEG
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 2
57366: NEG
57367: PUSH
57368: LD_INT 4
57370: NEG
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 4
57378: NEG
57379: PUSH
57380: LD_INT 2
57382: NEG
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: LD_INT 0
57390: PUSH
57391: LD_INT 4
57393: NEG
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 0
57401: PUSH
57402: LD_INT 5
57404: NEG
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 1
57412: PUSH
57413: LD_INT 4
57415: NEG
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 1
57423: PUSH
57424: LD_INT 3
57426: NEG
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 0
57434: PUSH
57435: LD_INT 3
57437: NEG
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 1
57445: NEG
57446: PUSH
57447: LD_INT 4
57449: NEG
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: LD_INT 1
57457: NEG
57458: PUSH
57459: LD_INT 5
57461: NEG
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: LD_INT 2
57469: PUSH
57470: LD_INT 3
57472: NEG
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 2
57480: NEG
57481: PUSH
57482: LD_INT 5
57484: NEG
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
57537: LD_ADDR_VAR 0 31
57541: PUSH
57542: LD_INT 0
57544: PUSH
57545: LD_INT 4
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: LD_INT 0
57554: PUSH
57555: LD_INT 3
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 1
57564: PUSH
57565: LD_INT 4
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 1
57574: PUSH
57575: LD_INT 5
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 0
57584: PUSH
57585: LD_INT 5
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: LD_INT 1
57594: NEG
57595: PUSH
57596: LD_INT 4
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 1
57605: NEG
57606: PUSH
57607: LD_INT 3
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 2
57616: PUSH
57617: LD_INT 5
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 2
57626: NEG
57627: PUSH
57628: LD_INT 3
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: LD_INT 3
57637: NEG
57638: PUSH
57639: LD_INT 0
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 3
57648: NEG
57649: PUSH
57650: LD_INT 1
57652: NEG
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 2
57660: NEG
57661: PUSH
57662: LD_INT 0
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 2
57671: NEG
57672: PUSH
57673: LD_INT 1
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 3
57682: NEG
57683: PUSH
57684: LD_INT 1
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 4
57693: NEG
57694: PUSH
57695: LD_INT 0
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: LD_INT 4
57704: NEG
57705: PUSH
57706: LD_INT 1
57708: NEG
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 4
57716: NEG
57717: PUSH
57718: LD_INT 2
57720: NEG
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 2
57728: NEG
57729: PUSH
57730: LD_INT 2
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_INT 4
57739: NEG
57740: PUSH
57741: LD_INT 4
57743: NEG
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 4
57751: NEG
57752: PUSH
57753: LD_INT 5
57755: NEG
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 3
57763: NEG
57764: PUSH
57765: LD_INT 4
57767: NEG
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 3
57775: NEG
57776: PUSH
57777: LD_INT 3
57779: NEG
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 4
57787: NEG
57788: PUSH
57789: LD_INT 3
57791: NEG
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: LD_INT 5
57799: NEG
57800: PUSH
57801: LD_INT 4
57803: NEG
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 5
57811: NEG
57812: PUSH
57813: LD_INT 5
57815: NEG
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: LD_INT 3
57823: NEG
57824: PUSH
57825: LD_INT 5
57827: NEG
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 5
57835: NEG
57836: PUSH
57837: LD_INT 3
57839: NEG
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 0
57847: PUSH
57848: LD_INT 3
57850: NEG
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 0
57858: PUSH
57859: LD_INT 4
57861: NEG
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 1
57869: PUSH
57870: LD_INT 3
57872: NEG
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: PUSH
57878: LD_INT 1
57880: PUSH
57881: LD_INT 2
57883: NEG
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 0
57891: PUSH
57892: LD_INT 2
57894: NEG
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 1
57902: NEG
57903: PUSH
57904: LD_INT 3
57906: NEG
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 1
57914: NEG
57915: PUSH
57916: LD_INT 4
57918: NEG
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 2
57926: PUSH
57927: LD_INT 2
57929: NEG
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: LD_INT 2
57937: NEG
57938: PUSH
57939: LD_INT 4
57941: NEG
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 4
57949: PUSH
57950: LD_INT 0
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 4
57959: PUSH
57960: LD_INT 1
57962: NEG
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 5
57970: PUSH
57971: LD_INT 0
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: LD_INT 5
57980: PUSH
57981: LD_INT 1
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 4
57990: PUSH
57991: LD_INT 1
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 3
58000: PUSH
58001: LD_INT 0
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 3
58010: PUSH
58011: LD_INT 1
58013: NEG
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 3
58021: PUSH
58022: LD_INT 2
58024: NEG
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 5
58032: PUSH
58033: LD_INT 2
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: LIST
58044: LIST
58045: LIST
58046: LIST
58047: LIST
58048: LIST
58049: LIST
58050: LIST
58051: LIST
58052: LIST
58053: LIST
58054: LIST
58055: LIST
58056: LIST
58057: LIST
58058: LIST
58059: LIST
58060: LIST
58061: LIST
58062: LIST
58063: LIST
58064: LIST
58065: LIST
58066: LIST
58067: LIST
58068: LIST
58069: LIST
58070: LIST
58071: LIST
58072: LIST
58073: LIST
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: LIST
58086: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58087: LD_ADDR_VAR 0 32
58091: PUSH
58092: LD_INT 4
58094: NEG
58095: PUSH
58096: LD_INT 0
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 4
58105: NEG
58106: PUSH
58107: LD_INT 1
58109: NEG
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: PUSH
58115: LD_INT 3
58117: NEG
58118: PUSH
58119: LD_INT 0
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: LD_INT 3
58128: NEG
58129: PUSH
58130: LD_INT 1
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 4
58139: NEG
58140: PUSH
58141: LD_INT 1
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 5
58150: NEG
58151: PUSH
58152: LD_INT 0
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 5
58161: NEG
58162: PUSH
58163: LD_INT 1
58165: NEG
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 5
58173: NEG
58174: PUSH
58175: LD_INT 2
58177: NEG
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: LD_INT 3
58185: NEG
58186: PUSH
58187: LD_INT 2
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 3
58196: NEG
58197: PUSH
58198: LD_INT 3
58200: NEG
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 3
58208: NEG
58209: PUSH
58210: LD_INT 4
58212: NEG
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 2
58220: NEG
58221: PUSH
58222: LD_INT 3
58224: NEG
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: PUSH
58230: LD_INT 2
58232: NEG
58233: PUSH
58234: LD_INT 2
58236: NEG
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: LD_INT 3
58244: NEG
58245: PUSH
58246: LD_INT 2
58248: NEG
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 4
58256: NEG
58257: PUSH
58258: LD_INT 3
58260: NEG
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 4
58268: NEG
58269: PUSH
58270: LD_INT 4
58272: NEG
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: LD_INT 2
58280: NEG
58281: PUSH
58282: LD_INT 4
58284: NEG
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: LD_INT 4
58292: NEG
58293: PUSH
58294: LD_INT 2
58296: NEG
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: PUSH
58302: LD_INT 0
58304: PUSH
58305: LD_INT 4
58307: NEG
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: LD_INT 0
58315: PUSH
58316: LD_INT 5
58318: NEG
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 1
58326: PUSH
58327: LD_INT 4
58329: NEG
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: LD_INT 1
58337: PUSH
58338: LD_INT 3
58340: NEG
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 0
58348: PUSH
58349: LD_INT 3
58351: NEG
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 1
58359: NEG
58360: PUSH
58361: LD_INT 4
58363: NEG
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PUSH
58369: LD_INT 1
58371: NEG
58372: PUSH
58373: LD_INT 5
58375: NEG
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 2
58383: PUSH
58384: LD_INT 3
58386: NEG
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 2
58394: NEG
58395: PUSH
58396: LD_INT 5
58398: NEG
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 3
58406: PUSH
58407: LD_INT 0
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: LD_INT 3
58416: PUSH
58417: LD_INT 1
58419: NEG
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PUSH
58425: LD_INT 4
58427: PUSH
58428: LD_INT 0
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 4
58437: PUSH
58438: LD_INT 1
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 3
58447: PUSH
58448: LD_INT 1
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 2
58457: PUSH
58458: LD_INT 0
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 2
58467: PUSH
58468: LD_INT 1
58470: NEG
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: LD_INT 2
58478: PUSH
58479: LD_INT 2
58481: NEG
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: LD_INT 4
58489: PUSH
58490: LD_INT 2
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: LD_INT 4
58499: PUSH
58500: LD_INT 4
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: LD_INT 4
58509: PUSH
58510: LD_INT 3
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: LD_INT 5
58519: PUSH
58520: LD_INT 4
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 5
58529: PUSH
58530: LD_INT 5
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 4
58539: PUSH
58540: LD_INT 5
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 3
58549: PUSH
58550: LD_INT 4
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PUSH
58557: LD_INT 3
58559: PUSH
58560: LD_INT 3
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 5
58569: PUSH
58570: LD_INT 3
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: LD_INT 3
58579: PUSH
58580: LD_INT 5
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: LIST
58597: LIST
58598: LIST
58599: LIST
58600: LIST
58601: LIST
58602: LIST
58603: LIST
58604: LIST
58605: LIST
58606: LIST
58607: LIST
58608: LIST
58609: LIST
58610: LIST
58611: LIST
58612: LIST
58613: LIST
58614: LIST
58615: LIST
58616: LIST
58617: LIST
58618: LIST
58619: LIST
58620: LIST
58621: LIST
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: LIST
58627: LIST
58628: LIST
58629: LIST
58630: LIST
58631: LIST
58632: LIST
58633: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
58634: LD_ADDR_VAR 0 33
58638: PUSH
58639: LD_INT 4
58641: NEG
58642: PUSH
58643: LD_INT 4
58645: NEG
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 4
58653: NEG
58654: PUSH
58655: LD_INT 5
58657: NEG
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 3
58665: NEG
58666: PUSH
58667: LD_INT 4
58669: NEG
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 3
58677: NEG
58678: PUSH
58679: LD_INT 3
58681: NEG
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: LD_INT 4
58689: NEG
58690: PUSH
58691: LD_INT 3
58693: NEG
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 5
58701: NEG
58702: PUSH
58703: LD_INT 4
58705: NEG
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 5
58713: NEG
58714: PUSH
58715: LD_INT 5
58717: NEG
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 3
58725: NEG
58726: PUSH
58727: LD_INT 5
58729: NEG
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 5
58737: NEG
58738: PUSH
58739: LD_INT 3
58741: NEG
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: PUSH
58747: LD_INT 0
58749: PUSH
58750: LD_INT 3
58752: NEG
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 0
58760: PUSH
58761: LD_INT 4
58763: NEG
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 1
58771: PUSH
58772: LD_INT 3
58774: NEG
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 1
58782: PUSH
58783: LD_INT 2
58785: NEG
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: PUSH
58791: LD_INT 0
58793: PUSH
58794: LD_INT 2
58796: NEG
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 1
58804: NEG
58805: PUSH
58806: LD_INT 3
58808: NEG
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 1
58816: NEG
58817: PUSH
58818: LD_INT 4
58820: NEG
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 2
58828: PUSH
58829: LD_INT 2
58831: NEG
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 2
58839: NEG
58840: PUSH
58841: LD_INT 4
58843: NEG
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 4
58851: PUSH
58852: LD_INT 0
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 4
58861: PUSH
58862: LD_INT 1
58864: NEG
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: PUSH
58870: LD_INT 5
58872: PUSH
58873: LD_INT 0
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: LD_INT 5
58882: PUSH
58883: LD_INT 1
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 4
58892: PUSH
58893: LD_INT 1
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: LD_INT 3
58902: PUSH
58903: LD_INT 0
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: PUSH
58910: LD_INT 3
58912: PUSH
58913: LD_INT 1
58915: NEG
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 3
58923: PUSH
58924: LD_INT 2
58926: NEG
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 5
58934: PUSH
58935: LD_INT 2
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 3
58944: PUSH
58945: LD_INT 3
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: LD_INT 3
58954: PUSH
58955: LD_INT 2
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_INT 4
58964: PUSH
58965: LD_INT 3
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: LD_INT 4
58974: PUSH
58975: LD_INT 4
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: PUSH
58982: LD_INT 3
58984: PUSH
58985: LD_INT 4
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: LD_INT 2
58994: PUSH
58995: LD_INT 3
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: PUSH
59002: LD_INT 2
59004: PUSH
59005: LD_INT 2
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: LD_INT 4
59014: PUSH
59015: LD_INT 2
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_INT 2
59024: PUSH
59025: LD_INT 4
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 0
59034: PUSH
59035: LD_INT 4
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 0
59044: PUSH
59045: LD_INT 3
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 1
59054: PUSH
59055: LD_INT 4
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 1
59064: PUSH
59065: LD_INT 5
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 0
59074: PUSH
59075: LD_INT 5
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 1
59084: NEG
59085: PUSH
59086: LD_INT 4
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 1
59095: NEG
59096: PUSH
59097: LD_INT 3
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 2
59106: PUSH
59107: LD_INT 5
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 2
59116: NEG
59117: PUSH
59118: LD_INT 3
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: LIST
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: LIST
59155: LIST
59156: LIST
59157: LIST
59158: LIST
59159: LIST
59160: LIST
59161: LIST
59162: LIST
59163: LIST
59164: LIST
59165: LIST
59166: LIST
59167: LIST
59168: LIST
59169: LIST
59170: LIST
59171: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59172: LD_ADDR_VAR 0 34
59176: PUSH
59177: LD_INT 0
59179: PUSH
59180: LD_INT 4
59182: NEG
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 0
59190: PUSH
59191: LD_INT 5
59193: NEG
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 1
59201: PUSH
59202: LD_INT 4
59204: NEG
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 1
59212: PUSH
59213: LD_INT 3
59215: NEG
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 0
59223: PUSH
59224: LD_INT 3
59226: NEG
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: LD_INT 1
59234: NEG
59235: PUSH
59236: LD_INT 4
59238: NEG
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: LD_INT 1
59246: NEG
59247: PUSH
59248: LD_INT 5
59250: NEG
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 2
59258: PUSH
59259: LD_INT 3
59261: NEG
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: LD_INT 2
59269: NEG
59270: PUSH
59271: LD_INT 5
59273: NEG
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: LD_INT 3
59281: PUSH
59282: LD_INT 0
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: PUSH
59289: LD_INT 3
59291: PUSH
59292: LD_INT 1
59294: NEG
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 4
59302: PUSH
59303: LD_INT 0
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 4
59312: PUSH
59313: LD_INT 1
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 3
59322: PUSH
59323: LD_INT 1
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: PUSH
59330: LD_INT 2
59332: PUSH
59333: LD_INT 0
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 2
59342: PUSH
59343: LD_INT 1
59345: NEG
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: LD_INT 2
59353: PUSH
59354: LD_INT 2
59356: NEG
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 4
59364: PUSH
59365: LD_INT 2
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PUSH
59372: LD_INT 4
59374: PUSH
59375: LD_INT 4
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: LD_INT 4
59384: PUSH
59385: LD_INT 3
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: LD_INT 5
59394: PUSH
59395: LD_INT 4
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: LD_INT 5
59404: PUSH
59405: LD_INT 5
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 4
59414: PUSH
59415: LD_INT 5
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 3
59424: PUSH
59425: LD_INT 4
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 3
59434: PUSH
59435: LD_INT 3
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_INT 5
59444: PUSH
59445: LD_INT 3
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: PUSH
59452: LD_INT 3
59454: PUSH
59455: LD_INT 5
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 0
59464: PUSH
59465: LD_INT 3
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: LD_INT 0
59474: PUSH
59475: LD_INT 2
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 1
59484: PUSH
59485: LD_INT 3
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 1
59494: PUSH
59495: LD_INT 4
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 0
59504: PUSH
59505: LD_INT 4
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: LD_INT 1
59514: NEG
59515: PUSH
59516: LD_INT 3
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: PUSH
59523: LD_INT 1
59525: NEG
59526: PUSH
59527: LD_INT 2
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PUSH
59534: LD_INT 2
59536: PUSH
59537: LD_INT 4
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: PUSH
59544: LD_INT 2
59546: NEG
59547: PUSH
59548: LD_INT 2
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: LD_INT 4
59557: NEG
59558: PUSH
59559: LD_INT 0
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 4
59568: NEG
59569: PUSH
59570: LD_INT 1
59572: NEG
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: LD_INT 3
59580: NEG
59581: PUSH
59582: LD_INT 0
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PUSH
59589: LD_INT 3
59591: NEG
59592: PUSH
59593: LD_INT 1
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: LD_INT 4
59602: NEG
59603: PUSH
59604: LD_INT 1
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 5
59613: NEG
59614: PUSH
59615: LD_INT 0
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PUSH
59622: LD_INT 5
59624: NEG
59625: PUSH
59626: LD_INT 1
59628: NEG
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 5
59636: NEG
59637: PUSH
59638: LD_INT 2
59640: NEG
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 3
59648: NEG
59649: PUSH
59650: LD_INT 2
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: LIST
59661: LIST
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: LIST
59667: LIST
59668: LIST
59669: LIST
59670: LIST
59671: LIST
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: LIST
59677: LIST
59678: LIST
59679: LIST
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: LIST
59693: LIST
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: LIST
59701: LIST
59702: LIST
59703: ST_TO_ADDR
// end ; end ;
59704: GO 59707
59706: POP
// case btype of b_depot , b_warehouse :
59707: LD_VAR 0 1
59711: PUSH
59712: LD_INT 0
59714: DOUBLE
59715: EQUAL
59716: IFTRUE 59726
59718: LD_INT 1
59720: DOUBLE
59721: EQUAL
59722: IFTRUE 59726
59724: GO 59927
59726: POP
// case nation of nation_american :
59727: LD_VAR 0 5
59731: PUSH
59732: LD_INT 1
59734: DOUBLE
59735: EQUAL
59736: IFTRUE 59740
59738: GO 59796
59740: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
59741: LD_ADDR_VAR 0 9
59745: PUSH
59746: LD_VAR 0 11
59750: PUSH
59751: LD_VAR 0 12
59755: PUSH
59756: LD_VAR 0 13
59760: PUSH
59761: LD_VAR 0 14
59765: PUSH
59766: LD_VAR 0 15
59770: PUSH
59771: LD_VAR 0 16
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: LIST
59780: LIST
59781: LIST
59782: LIST
59783: PUSH
59784: LD_VAR 0 4
59788: PUSH
59789: LD_INT 1
59791: PLUS
59792: ARRAY
59793: ST_TO_ADDR
59794: GO 59925
59796: LD_INT 2
59798: DOUBLE
59799: EQUAL
59800: IFTRUE 59804
59802: GO 59860
59804: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59805: LD_ADDR_VAR 0 9
59809: PUSH
59810: LD_VAR 0 17
59814: PUSH
59815: LD_VAR 0 18
59819: PUSH
59820: LD_VAR 0 19
59824: PUSH
59825: LD_VAR 0 20
59829: PUSH
59830: LD_VAR 0 21
59834: PUSH
59835: LD_VAR 0 22
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: PUSH
59848: LD_VAR 0 4
59852: PUSH
59853: LD_INT 1
59855: PLUS
59856: ARRAY
59857: ST_TO_ADDR
59858: GO 59925
59860: LD_INT 3
59862: DOUBLE
59863: EQUAL
59864: IFTRUE 59868
59866: GO 59924
59868: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59869: LD_ADDR_VAR 0 9
59873: PUSH
59874: LD_VAR 0 23
59878: PUSH
59879: LD_VAR 0 24
59883: PUSH
59884: LD_VAR 0 25
59888: PUSH
59889: LD_VAR 0 26
59893: PUSH
59894: LD_VAR 0 27
59898: PUSH
59899: LD_VAR 0 28
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: LIST
59908: LIST
59909: LIST
59910: LIST
59911: PUSH
59912: LD_VAR 0 4
59916: PUSH
59917: LD_INT 1
59919: PLUS
59920: ARRAY
59921: ST_TO_ADDR
59922: GO 59925
59924: POP
59925: GO 60480
59927: LD_INT 2
59929: DOUBLE
59930: EQUAL
59931: IFTRUE 59941
59933: LD_INT 3
59935: DOUBLE
59936: EQUAL
59937: IFTRUE 59941
59939: GO 59997
59941: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59942: LD_ADDR_VAR 0 9
59946: PUSH
59947: LD_VAR 0 29
59951: PUSH
59952: LD_VAR 0 30
59956: PUSH
59957: LD_VAR 0 31
59961: PUSH
59962: LD_VAR 0 32
59966: PUSH
59967: LD_VAR 0 33
59971: PUSH
59972: LD_VAR 0 34
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: LIST
59981: LIST
59982: LIST
59983: LIST
59984: PUSH
59985: LD_VAR 0 4
59989: PUSH
59990: LD_INT 1
59992: PLUS
59993: ARRAY
59994: ST_TO_ADDR
59995: GO 60480
59997: LD_INT 16
59999: DOUBLE
60000: EQUAL
60001: IFTRUE 60059
60003: LD_INT 17
60005: DOUBLE
60006: EQUAL
60007: IFTRUE 60059
60009: LD_INT 18
60011: DOUBLE
60012: EQUAL
60013: IFTRUE 60059
60015: LD_INT 19
60017: DOUBLE
60018: EQUAL
60019: IFTRUE 60059
60021: LD_INT 22
60023: DOUBLE
60024: EQUAL
60025: IFTRUE 60059
60027: LD_INT 20
60029: DOUBLE
60030: EQUAL
60031: IFTRUE 60059
60033: LD_INT 21
60035: DOUBLE
60036: EQUAL
60037: IFTRUE 60059
60039: LD_INT 23
60041: DOUBLE
60042: EQUAL
60043: IFTRUE 60059
60045: LD_INT 24
60047: DOUBLE
60048: EQUAL
60049: IFTRUE 60059
60051: LD_INT 25
60053: DOUBLE
60054: EQUAL
60055: IFTRUE 60059
60057: GO 60115
60059: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60060: LD_ADDR_VAR 0 9
60064: PUSH
60065: LD_VAR 0 35
60069: PUSH
60070: LD_VAR 0 36
60074: PUSH
60075: LD_VAR 0 37
60079: PUSH
60080: LD_VAR 0 38
60084: PUSH
60085: LD_VAR 0 39
60089: PUSH
60090: LD_VAR 0 40
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: PUSH
60103: LD_VAR 0 4
60107: PUSH
60108: LD_INT 1
60110: PLUS
60111: ARRAY
60112: ST_TO_ADDR
60113: GO 60480
60115: LD_INT 6
60117: DOUBLE
60118: EQUAL
60119: IFTRUE 60171
60121: LD_INT 7
60123: DOUBLE
60124: EQUAL
60125: IFTRUE 60171
60127: LD_INT 8
60129: DOUBLE
60130: EQUAL
60131: IFTRUE 60171
60133: LD_INT 13
60135: DOUBLE
60136: EQUAL
60137: IFTRUE 60171
60139: LD_INT 12
60141: DOUBLE
60142: EQUAL
60143: IFTRUE 60171
60145: LD_INT 15
60147: DOUBLE
60148: EQUAL
60149: IFTRUE 60171
60151: LD_INT 11
60153: DOUBLE
60154: EQUAL
60155: IFTRUE 60171
60157: LD_INT 14
60159: DOUBLE
60160: EQUAL
60161: IFTRUE 60171
60163: LD_INT 10
60165: DOUBLE
60166: EQUAL
60167: IFTRUE 60171
60169: GO 60227
60171: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
60172: LD_ADDR_VAR 0 9
60176: PUSH
60177: LD_VAR 0 41
60181: PUSH
60182: LD_VAR 0 42
60186: PUSH
60187: LD_VAR 0 43
60191: PUSH
60192: LD_VAR 0 44
60196: PUSH
60197: LD_VAR 0 45
60201: PUSH
60202: LD_VAR 0 46
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: LIST
60211: LIST
60212: LIST
60213: LIST
60214: PUSH
60215: LD_VAR 0 4
60219: PUSH
60220: LD_INT 1
60222: PLUS
60223: ARRAY
60224: ST_TO_ADDR
60225: GO 60480
60227: LD_INT 36
60229: DOUBLE
60230: EQUAL
60231: IFTRUE 60235
60233: GO 60291
60235: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
60236: LD_ADDR_VAR 0 9
60240: PUSH
60241: LD_VAR 0 47
60245: PUSH
60246: LD_VAR 0 48
60250: PUSH
60251: LD_VAR 0 49
60255: PUSH
60256: LD_VAR 0 50
60260: PUSH
60261: LD_VAR 0 51
60265: PUSH
60266: LD_VAR 0 52
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: LIST
60278: PUSH
60279: LD_VAR 0 4
60283: PUSH
60284: LD_INT 1
60286: PLUS
60287: ARRAY
60288: ST_TO_ADDR
60289: GO 60480
60291: LD_INT 4
60293: DOUBLE
60294: EQUAL
60295: IFTRUE 60317
60297: LD_INT 5
60299: DOUBLE
60300: EQUAL
60301: IFTRUE 60317
60303: LD_INT 34
60305: DOUBLE
60306: EQUAL
60307: IFTRUE 60317
60309: LD_INT 37
60311: DOUBLE
60312: EQUAL
60313: IFTRUE 60317
60315: GO 60373
60317: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
60318: LD_ADDR_VAR 0 9
60322: PUSH
60323: LD_VAR 0 53
60327: PUSH
60328: LD_VAR 0 54
60332: PUSH
60333: LD_VAR 0 55
60337: PUSH
60338: LD_VAR 0 56
60342: PUSH
60343: LD_VAR 0 57
60347: PUSH
60348: LD_VAR 0 58
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: LIST
60359: LIST
60360: PUSH
60361: LD_VAR 0 4
60365: PUSH
60366: LD_INT 1
60368: PLUS
60369: ARRAY
60370: ST_TO_ADDR
60371: GO 60480
60373: LD_INT 31
60375: DOUBLE
60376: EQUAL
60377: IFTRUE 60423
60379: LD_INT 32
60381: DOUBLE
60382: EQUAL
60383: IFTRUE 60423
60385: LD_INT 33
60387: DOUBLE
60388: EQUAL
60389: IFTRUE 60423
60391: LD_INT 27
60393: DOUBLE
60394: EQUAL
60395: IFTRUE 60423
60397: LD_INT 26
60399: DOUBLE
60400: EQUAL
60401: IFTRUE 60423
60403: LD_INT 28
60405: DOUBLE
60406: EQUAL
60407: IFTRUE 60423
60409: LD_INT 29
60411: DOUBLE
60412: EQUAL
60413: IFTRUE 60423
60415: LD_INT 30
60417: DOUBLE
60418: EQUAL
60419: IFTRUE 60423
60421: GO 60479
60423: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
60424: LD_ADDR_VAR 0 9
60428: PUSH
60429: LD_VAR 0 59
60433: PUSH
60434: LD_VAR 0 60
60438: PUSH
60439: LD_VAR 0 61
60443: PUSH
60444: LD_VAR 0 62
60448: PUSH
60449: LD_VAR 0 63
60453: PUSH
60454: LD_VAR 0 64
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: PUSH
60467: LD_VAR 0 4
60471: PUSH
60472: LD_INT 1
60474: PLUS
60475: ARRAY
60476: ST_TO_ADDR
60477: GO 60480
60479: POP
// temp_list2 = [ ] ;
60480: LD_ADDR_VAR 0 10
60484: PUSH
60485: EMPTY
60486: ST_TO_ADDR
// for i in temp_list do
60487: LD_ADDR_VAR 0 8
60491: PUSH
60492: LD_VAR 0 9
60496: PUSH
60497: FOR_IN
60498: IFFALSE 60550
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
60500: LD_ADDR_VAR 0 10
60504: PUSH
60505: LD_VAR 0 10
60509: PUSH
60510: LD_VAR 0 8
60514: PUSH
60515: LD_INT 1
60517: ARRAY
60518: PUSH
60519: LD_VAR 0 2
60523: PLUS
60524: PUSH
60525: LD_VAR 0 8
60529: PUSH
60530: LD_INT 2
60532: ARRAY
60533: PUSH
60534: LD_VAR 0 3
60538: PLUS
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: PUSH
60544: EMPTY
60545: LIST
60546: ADD
60547: ST_TO_ADDR
60548: GO 60497
60550: POP
60551: POP
// result = temp_list2 ;
60552: LD_ADDR_VAR 0 7
60556: PUSH
60557: LD_VAR 0 10
60561: ST_TO_ADDR
// end ;
60562: LD_VAR 0 7
60566: RET
// export function EnemyInRange ( unit , dist ) ; begin
60567: LD_INT 0
60569: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
60570: LD_ADDR_VAR 0 3
60574: PUSH
60575: LD_VAR 0 1
60579: PPUSH
60580: CALL_OW 255
60584: PPUSH
60585: LD_VAR 0 1
60589: PPUSH
60590: CALL_OW 250
60594: PPUSH
60595: LD_VAR 0 1
60599: PPUSH
60600: CALL_OW 251
60604: PPUSH
60605: LD_VAR 0 2
60609: PPUSH
60610: CALL 33940 0 4
60614: PUSH
60615: LD_INT 4
60617: ARRAY
60618: ST_TO_ADDR
// end ;
60619: LD_VAR 0 3
60623: RET
// export function PlayerSeeMe ( unit ) ; begin
60624: LD_INT 0
60626: PPUSH
// result := See ( your_side , unit ) ;
60627: LD_ADDR_VAR 0 2
60631: PUSH
60632: LD_OWVAR 2
60636: PPUSH
60637: LD_VAR 0 1
60641: PPUSH
60642: CALL_OW 292
60646: ST_TO_ADDR
// end ;
60647: LD_VAR 0 2
60651: RET
// export function ReverseDir ( unit ) ; begin
60652: LD_INT 0
60654: PPUSH
// if not unit then
60655: LD_VAR 0 1
60659: NOT
60660: IFFALSE 60664
// exit ;
60662: GO 60687
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
60664: LD_ADDR_VAR 0 2
60668: PUSH
60669: LD_VAR 0 1
60673: PPUSH
60674: CALL_OW 254
60678: PUSH
60679: LD_INT 3
60681: PLUS
60682: PUSH
60683: LD_INT 6
60685: MOD
60686: ST_TO_ADDR
// end ;
60687: LD_VAR 0 2
60691: RET
// export function ReverseArray ( array ) ; var i ; begin
60692: LD_INT 0
60694: PPUSH
60695: PPUSH
// if not array then
60696: LD_VAR 0 1
60700: NOT
60701: IFFALSE 60705
// exit ;
60703: GO 60760
// result := [ ] ;
60705: LD_ADDR_VAR 0 2
60709: PUSH
60710: EMPTY
60711: ST_TO_ADDR
// for i := array downto 1 do
60712: LD_ADDR_VAR 0 3
60716: PUSH
60717: DOUBLE
60718: LD_VAR 0 1
60722: INC
60723: ST_TO_ADDR
60724: LD_INT 1
60726: PUSH
60727: FOR_DOWNTO
60728: IFFALSE 60758
// result := Join ( result , array [ i ] ) ;
60730: LD_ADDR_VAR 0 2
60734: PUSH
60735: LD_VAR 0 2
60739: PPUSH
60740: LD_VAR 0 1
60744: PUSH
60745: LD_VAR 0 3
60749: ARRAY
60750: PPUSH
60751: CALL 65416 0 2
60755: ST_TO_ADDR
60756: GO 60727
60758: POP
60759: POP
// end ;
60760: LD_VAR 0 2
60764: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
60765: LD_INT 0
60767: PPUSH
60768: PPUSH
60769: PPUSH
60770: PPUSH
60771: PPUSH
60772: PPUSH
// if not unit or not hexes then
60773: LD_VAR 0 1
60777: NOT
60778: PUSH
60779: LD_VAR 0 2
60783: NOT
60784: OR
60785: IFFALSE 60789
// exit ;
60787: GO 60912
// dist := 9999 ;
60789: LD_ADDR_VAR 0 5
60793: PUSH
60794: LD_INT 9999
60796: ST_TO_ADDR
// for i = 1 to hexes do
60797: LD_ADDR_VAR 0 4
60801: PUSH
60802: DOUBLE
60803: LD_INT 1
60805: DEC
60806: ST_TO_ADDR
60807: LD_VAR 0 2
60811: PUSH
60812: FOR_TO
60813: IFFALSE 60900
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60815: LD_ADDR_VAR 0 6
60819: PUSH
60820: LD_VAR 0 1
60824: PPUSH
60825: LD_VAR 0 2
60829: PUSH
60830: LD_VAR 0 4
60834: ARRAY
60835: PUSH
60836: LD_INT 1
60838: ARRAY
60839: PPUSH
60840: LD_VAR 0 2
60844: PUSH
60845: LD_VAR 0 4
60849: ARRAY
60850: PUSH
60851: LD_INT 2
60853: ARRAY
60854: PPUSH
60855: CALL_OW 297
60859: ST_TO_ADDR
// if tdist < dist then
60860: LD_VAR 0 6
60864: PUSH
60865: LD_VAR 0 5
60869: LESS
60870: IFFALSE 60898
// begin hex := hexes [ i ] ;
60872: LD_ADDR_VAR 0 8
60876: PUSH
60877: LD_VAR 0 2
60881: PUSH
60882: LD_VAR 0 4
60886: ARRAY
60887: ST_TO_ADDR
// dist := tdist ;
60888: LD_ADDR_VAR 0 5
60892: PUSH
60893: LD_VAR 0 6
60897: ST_TO_ADDR
// end ; end ;
60898: GO 60812
60900: POP
60901: POP
// result := hex ;
60902: LD_ADDR_VAR 0 3
60906: PUSH
60907: LD_VAR 0 8
60911: ST_TO_ADDR
// end ;
60912: LD_VAR 0 3
60916: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60917: LD_INT 0
60919: PPUSH
60920: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60921: LD_VAR 0 1
60925: NOT
60926: PUSH
60927: LD_VAR 0 1
60931: PUSH
60932: LD_INT 21
60934: PUSH
60935: LD_INT 2
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: PUSH
60942: LD_INT 23
60944: PUSH
60945: LD_INT 2
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: PPUSH
60956: CALL_OW 69
60960: IN
60961: NOT
60962: OR
60963: IFFALSE 60967
// exit ;
60965: GO 61014
// for i = 1 to 3 do
60967: LD_ADDR_VAR 0 3
60971: PUSH
60972: DOUBLE
60973: LD_INT 1
60975: DEC
60976: ST_TO_ADDR
60977: LD_INT 3
60979: PUSH
60980: FOR_TO
60981: IFFALSE 61012
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60983: LD_VAR 0 1
60987: PPUSH
60988: CALL_OW 250
60992: PPUSH
60993: LD_VAR 0 1
60997: PPUSH
60998: CALL_OW 251
61002: PPUSH
61003: LD_INT 1
61005: PPUSH
61006: CALL_OW 453
61010: GO 60980
61012: POP
61013: POP
// end ;
61014: LD_VAR 0 2
61018: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61019: LD_INT 0
61021: PPUSH
61022: PPUSH
61023: PPUSH
61024: PPUSH
61025: PPUSH
61026: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
61027: LD_VAR 0 1
61031: NOT
61032: PUSH
61033: LD_VAR 0 2
61037: NOT
61038: OR
61039: PUSH
61040: LD_VAR 0 1
61044: PPUSH
61045: CALL_OW 314
61049: OR
61050: IFFALSE 61054
// exit ;
61052: GO 61521
// if GetLives ( i ) < 250 then
61054: LD_VAR 0 4
61058: PPUSH
61059: CALL_OW 256
61063: PUSH
61064: LD_INT 250
61066: LESS
61067: IFFALSE 61080
// begin ComAutodestruct ( i ) ;
61069: LD_VAR 0 4
61073: PPUSH
61074: CALL 60917 0 1
// exit ;
61078: GO 61521
// end ; x := GetX ( enemy_unit ) ;
61080: LD_ADDR_VAR 0 7
61084: PUSH
61085: LD_VAR 0 2
61089: PPUSH
61090: CALL_OW 250
61094: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61095: LD_ADDR_VAR 0 8
61099: PUSH
61100: LD_VAR 0 2
61104: PPUSH
61105: CALL_OW 251
61109: ST_TO_ADDR
// if not x or not y then
61110: LD_VAR 0 7
61114: NOT
61115: PUSH
61116: LD_VAR 0 8
61120: NOT
61121: OR
61122: IFFALSE 61126
// exit ;
61124: GO 61521
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
61126: LD_ADDR_VAR 0 6
61130: PUSH
61131: LD_VAR 0 7
61135: PPUSH
61136: LD_INT 0
61138: PPUSH
61139: LD_INT 4
61141: PPUSH
61142: CALL_OW 272
61146: PUSH
61147: LD_VAR 0 8
61151: PPUSH
61152: LD_INT 0
61154: PPUSH
61155: LD_INT 4
61157: PPUSH
61158: CALL_OW 273
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: LD_VAR 0 7
61171: PPUSH
61172: LD_INT 1
61174: PPUSH
61175: LD_INT 4
61177: PPUSH
61178: CALL_OW 272
61182: PUSH
61183: LD_VAR 0 8
61187: PPUSH
61188: LD_INT 1
61190: PPUSH
61191: LD_INT 4
61193: PPUSH
61194: CALL_OW 273
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: LD_VAR 0 7
61207: PPUSH
61208: LD_INT 2
61210: PPUSH
61211: LD_INT 4
61213: PPUSH
61214: CALL_OW 272
61218: PUSH
61219: LD_VAR 0 8
61223: PPUSH
61224: LD_INT 2
61226: PPUSH
61227: LD_INT 4
61229: PPUSH
61230: CALL_OW 273
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: PUSH
61239: LD_VAR 0 7
61243: PPUSH
61244: LD_INT 3
61246: PPUSH
61247: LD_INT 4
61249: PPUSH
61250: CALL_OW 272
61254: PUSH
61255: LD_VAR 0 8
61259: PPUSH
61260: LD_INT 3
61262: PPUSH
61263: LD_INT 4
61265: PPUSH
61266: CALL_OW 273
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PUSH
61275: LD_VAR 0 7
61279: PPUSH
61280: LD_INT 4
61282: PPUSH
61283: LD_INT 4
61285: PPUSH
61286: CALL_OW 272
61290: PUSH
61291: LD_VAR 0 8
61295: PPUSH
61296: LD_INT 4
61298: PPUSH
61299: LD_INT 4
61301: PPUSH
61302: CALL_OW 273
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_VAR 0 7
61315: PPUSH
61316: LD_INT 5
61318: PPUSH
61319: LD_INT 4
61321: PPUSH
61322: CALL_OW 272
61326: PUSH
61327: LD_VAR 0 8
61331: PPUSH
61332: LD_INT 5
61334: PPUSH
61335: LD_INT 4
61337: PPUSH
61338: CALL_OW 273
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: ST_TO_ADDR
// for i = tmp downto 1 do
61355: LD_ADDR_VAR 0 4
61359: PUSH
61360: DOUBLE
61361: LD_VAR 0 6
61365: INC
61366: ST_TO_ADDR
61367: LD_INT 1
61369: PUSH
61370: FOR_DOWNTO
61371: IFFALSE 61472
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
61373: LD_VAR 0 6
61377: PUSH
61378: LD_VAR 0 4
61382: ARRAY
61383: PUSH
61384: LD_INT 1
61386: ARRAY
61387: PPUSH
61388: LD_VAR 0 6
61392: PUSH
61393: LD_VAR 0 4
61397: ARRAY
61398: PUSH
61399: LD_INT 2
61401: ARRAY
61402: PPUSH
61403: CALL_OW 488
61407: NOT
61408: PUSH
61409: LD_VAR 0 6
61413: PUSH
61414: LD_VAR 0 4
61418: ARRAY
61419: PUSH
61420: LD_INT 1
61422: ARRAY
61423: PPUSH
61424: LD_VAR 0 6
61428: PUSH
61429: LD_VAR 0 4
61433: ARRAY
61434: PUSH
61435: LD_INT 2
61437: ARRAY
61438: PPUSH
61439: CALL_OW 428
61443: PUSH
61444: LD_INT 0
61446: NONEQUAL
61447: OR
61448: IFFALSE 61470
// tmp := Delete ( tmp , i ) ;
61450: LD_ADDR_VAR 0 6
61454: PUSH
61455: LD_VAR 0 6
61459: PPUSH
61460: LD_VAR 0 4
61464: PPUSH
61465: CALL_OW 3
61469: ST_TO_ADDR
61470: GO 61370
61472: POP
61473: POP
// j := GetClosestHex ( unit , tmp ) ;
61474: LD_ADDR_VAR 0 5
61478: PUSH
61479: LD_VAR 0 1
61483: PPUSH
61484: LD_VAR 0 6
61488: PPUSH
61489: CALL 60765 0 2
61493: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
61494: LD_VAR 0 1
61498: PPUSH
61499: LD_VAR 0 5
61503: PUSH
61504: LD_INT 1
61506: ARRAY
61507: PPUSH
61508: LD_VAR 0 5
61512: PUSH
61513: LD_INT 2
61515: ARRAY
61516: PPUSH
61517: CALL_OW 111
// end ;
61521: LD_VAR 0 3
61525: RET
// export function PrepareApemanSoldier ( ) ; begin
61526: LD_INT 0
61528: PPUSH
// uc_nation := 0 ;
61529: LD_ADDR_OWVAR 21
61533: PUSH
61534: LD_INT 0
61536: ST_TO_ADDR
// hc_sex := sex_male ;
61537: LD_ADDR_OWVAR 27
61541: PUSH
61542: LD_INT 1
61544: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
61545: LD_ADDR_OWVAR 28
61549: PUSH
61550: LD_INT 15
61552: ST_TO_ADDR
// hc_gallery :=  ;
61553: LD_ADDR_OWVAR 33
61557: PUSH
61558: LD_STRING 
61560: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61561: LD_ADDR_OWVAR 31
61565: PUSH
61566: LD_INT 0
61568: PPUSH
61569: LD_INT 3
61571: PPUSH
61572: CALL_OW 12
61576: PUSH
61577: LD_INT 0
61579: PPUSH
61580: LD_INT 3
61582: PPUSH
61583: CALL_OW 12
61587: PUSH
61588: LD_INT 0
61590: PUSH
61591: LD_INT 0
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: LIST
61598: LIST
61599: ST_TO_ADDR
// end ;
61600: LD_VAR 0 1
61604: RET
// export function PrepareApemanEngineer ( ) ; begin
61605: LD_INT 0
61607: PPUSH
// uc_nation := 0 ;
61608: LD_ADDR_OWVAR 21
61612: PUSH
61613: LD_INT 0
61615: ST_TO_ADDR
// hc_sex := sex_male ;
61616: LD_ADDR_OWVAR 27
61620: PUSH
61621: LD_INT 1
61623: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
61624: LD_ADDR_OWVAR 28
61628: PUSH
61629: LD_INT 16
61631: ST_TO_ADDR
// hc_gallery :=  ;
61632: LD_ADDR_OWVAR 33
61636: PUSH
61637: LD_STRING 
61639: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61640: LD_ADDR_OWVAR 31
61644: PUSH
61645: LD_INT 0
61647: PPUSH
61648: LD_INT 3
61650: PPUSH
61651: CALL_OW 12
61655: PUSH
61656: LD_INT 0
61658: PPUSH
61659: LD_INT 3
61661: PPUSH
61662: CALL_OW 12
61666: PUSH
61667: LD_INT 0
61669: PUSH
61670: LD_INT 0
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: LIST
61677: LIST
61678: ST_TO_ADDR
// end ;
61679: LD_VAR 0 1
61683: RET
// export function PrepareApeman ( agressivity ) ; begin
61684: LD_INT 0
61686: PPUSH
// uc_side := 0 ;
61687: LD_ADDR_OWVAR 20
61691: PUSH
61692: LD_INT 0
61694: ST_TO_ADDR
// uc_nation := 0 ;
61695: LD_ADDR_OWVAR 21
61699: PUSH
61700: LD_INT 0
61702: ST_TO_ADDR
// hc_sex := sex_male ;
61703: LD_ADDR_OWVAR 27
61707: PUSH
61708: LD_INT 1
61710: ST_TO_ADDR
// hc_class := class_apeman ;
61711: LD_ADDR_OWVAR 28
61715: PUSH
61716: LD_INT 12
61718: ST_TO_ADDR
// hc_gallery :=  ;
61719: LD_ADDR_OWVAR 33
61723: PUSH
61724: LD_STRING 
61726: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61727: LD_ADDR_OWVAR 35
61731: PUSH
61732: LD_VAR 0 1
61736: NEG
61737: PPUSH
61738: LD_VAR 0 1
61742: PPUSH
61743: CALL_OW 12
61747: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61748: LD_ADDR_OWVAR 31
61752: PUSH
61753: LD_INT 0
61755: PPUSH
61756: LD_INT 3
61758: PPUSH
61759: CALL_OW 12
61763: PUSH
61764: LD_INT 0
61766: PPUSH
61767: LD_INT 3
61769: PPUSH
61770: CALL_OW 12
61774: PUSH
61775: LD_INT 0
61777: PUSH
61778: LD_INT 0
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: ST_TO_ADDR
// end ;
61787: LD_VAR 0 2
61791: RET
// export function PrepareTiger ( agressivity ) ; begin
61792: LD_INT 0
61794: PPUSH
// uc_side := 0 ;
61795: LD_ADDR_OWVAR 20
61799: PUSH
61800: LD_INT 0
61802: ST_TO_ADDR
// uc_nation := 0 ;
61803: LD_ADDR_OWVAR 21
61807: PUSH
61808: LD_INT 0
61810: ST_TO_ADDR
// hc_class := class_tiger ;
61811: LD_ADDR_OWVAR 28
61815: PUSH
61816: LD_INT 14
61818: ST_TO_ADDR
// hc_gallery :=  ;
61819: LD_ADDR_OWVAR 33
61823: PUSH
61824: LD_STRING 
61826: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61827: LD_ADDR_OWVAR 35
61831: PUSH
61832: LD_VAR 0 1
61836: NEG
61837: PPUSH
61838: LD_VAR 0 1
61842: PPUSH
61843: CALL_OW 12
61847: ST_TO_ADDR
// end ;
61848: LD_VAR 0 2
61852: RET
// export function PrepareEnchidna ( ) ; begin
61853: LD_INT 0
61855: PPUSH
// uc_side := 0 ;
61856: LD_ADDR_OWVAR 20
61860: PUSH
61861: LD_INT 0
61863: ST_TO_ADDR
// uc_nation := 0 ;
61864: LD_ADDR_OWVAR 21
61868: PUSH
61869: LD_INT 0
61871: ST_TO_ADDR
// hc_class := class_baggie ;
61872: LD_ADDR_OWVAR 28
61876: PUSH
61877: LD_INT 13
61879: ST_TO_ADDR
// hc_gallery :=  ;
61880: LD_ADDR_OWVAR 33
61884: PUSH
61885: LD_STRING 
61887: ST_TO_ADDR
// end ;
61888: LD_VAR 0 1
61892: RET
// export function PrepareFrog ( ) ; begin
61893: LD_INT 0
61895: PPUSH
// uc_side := 0 ;
61896: LD_ADDR_OWVAR 20
61900: PUSH
61901: LD_INT 0
61903: ST_TO_ADDR
// uc_nation := 0 ;
61904: LD_ADDR_OWVAR 21
61908: PUSH
61909: LD_INT 0
61911: ST_TO_ADDR
// hc_class := class_frog ;
61912: LD_ADDR_OWVAR 28
61916: PUSH
61917: LD_INT 19
61919: ST_TO_ADDR
// hc_gallery :=  ;
61920: LD_ADDR_OWVAR 33
61924: PUSH
61925: LD_STRING 
61927: ST_TO_ADDR
// end ;
61928: LD_VAR 0 1
61932: RET
// export function PrepareFish ( ) ; begin
61933: LD_INT 0
61935: PPUSH
// uc_side := 0 ;
61936: LD_ADDR_OWVAR 20
61940: PUSH
61941: LD_INT 0
61943: ST_TO_ADDR
// uc_nation := 0 ;
61944: LD_ADDR_OWVAR 21
61948: PUSH
61949: LD_INT 0
61951: ST_TO_ADDR
// hc_class := class_fish ;
61952: LD_ADDR_OWVAR 28
61956: PUSH
61957: LD_INT 20
61959: ST_TO_ADDR
// hc_gallery :=  ;
61960: LD_ADDR_OWVAR 33
61964: PUSH
61965: LD_STRING 
61967: ST_TO_ADDR
// end ;
61968: LD_VAR 0 1
61972: RET
// export function PrepareBird ( ) ; begin
61973: LD_INT 0
61975: PPUSH
// uc_side := 0 ;
61976: LD_ADDR_OWVAR 20
61980: PUSH
61981: LD_INT 0
61983: ST_TO_ADDR
// uc_nation := 0 ;
61984: LD_ADDR_OWVAR 21
61988: PUSH
61989: LD_INT 0
61991: ST_TO_ADDR
// hc_class := class_phororhacos ;
61992: LD_ADDR_OWVAR 28
61996: PUSH
61997: LD_INT 18
61999: ST_TO_ADDR
// hc_gallery :=  ;
62000: LD_ADDR_OWVAR 33
62004: PUSH
62005: LD_STRING 
62007: ST_TO_ADDR
// end ;
62008: LD_VAR 0 1
62012: RET
// export function PrepareHorse ( ) ; begin
62013: LD_INT 0
62015: PPUSH
// uc_side := 0 ;
62016: LD_ADDR_OWVAR 20
62020: PUSH
62021: LD_INT 0
62023: ST_TO_ADDR
// uc_nation := 0 ;
62024: LD_ADDR_OWVAR 21
62028: PUSH
62029: LD_INT 0
62031: ST_TO_ADDR
// hc_class := class_horse ;
62032: LD_ADDR_OWVAR 28
62036: PUSH
62037: LD_INT 21
62039: ST_TO_ADDR
// hc_gallery :=  ;
62040: LD_ADDR_OWVAR 33
62044: PUSH
62045: LD_STRING 
62047: ST_TO_ADDR
// end ;
62048: LD_VAR 0 1
62052: RET
// export function PrepareMastodont ( ) ; begin
62053: LD_INT 0
62055: PPUSH
// uc_side := 0 ;
62056: LD_ADDR_OWVAR 20
62060: PUSH
62061: LD_INT 0
62063: ST_TO_ADDR
// uc_nation := 0 ;
62064: LD_ADDR_OWVAR 21
62068: PUSH
62069: LD_INT 0
62071: ST_TO_ADDR
// vc_chassis := class_mastodont ;
62072: LD_ADDR_OWVAR 37
62076: PUSH
62077: LD_INT 31
62079: ST_TO_ADDR
// vc_control := control_rider ;
62080: LD_ADDR_OWVAR 38
62084: PUSH
62085: LD_INT 4
62087: ST_TO_ADDR
// end ;
62088: LD_VAR 0 1
62092: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62093: LD_INT 0
62095: PPUSH
62096: PPUSH
62097: PPUSH
// uc_side = 0 ;
62098: LD_ADDR_OWVAR 20
62102: PUSH
62103: LD_INT 0
62105: ST_TO_ADDR
// uc_nation = 0 ;
62106: LD_ADDR_OWVAR 21
62110: PUSH
62111: LD_INT 0
62113: ST_TO_ADDR
// InitHc_All ( ) ;
62114: CALL_OW 584
// InitVc ;
62118: CALL_OW 20
// if mastodonts then
62122: LD_VAR 0 6
62126: IFFALSE 62193
// for i = 1 to mastodonts do
62128: LD_ADDR_VAR 0 11
62132: PUSH
62133: DOUBLE
62134: LD_INT 1
62136: DEC
62137: ST_TO_ADDR
62138: LD_VAR 0 6
62142: PUSH
62143: FOR_TO
62144: IFFALSE 62191
// begin vc_chassis := 31 ;
62146: LD_ADDR_OWVAR 37
62150: PUSH
62151: LD_INT 31
62153: ST_TO_ADDR
// vc_control := control_rider ;
62154: LD_ADDR_OWVAR 38
62158: PUSH
62159: LD_INT 4
62161: ST_TO_ADDR
// animal := CreateVehicle ;
62162: LD_ADDR_VAR 0 12
62166: PUSH
62167: CALL_OW 45
62171: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62172: LD_VAR 0 12
62176: PPUSH
62177: LD_VAR 0 8
62181: PPUSH
62182: LD_INT 0
62184: PPUSH
62185: CALL 64321 0 3
// end ;
62189: GO 62143
62191: POP
62192: POP
// if horses then
62193: LD_VAR 0 5
62197: IFFALSE 62264
// for i = 1 to horses do
62199: LD_ADDR_VAR 0 11
62203: PUSH
62204: DOUBLE
62205: LD_INT 1
62207: DEC
62208: ST_TO_ADDR
62209: LD_VAR 0 5
62213: PUSH
62214: FOR_TO
62215: IFFALSE 62262
// begin hc_class := 21 ;
62217: LD_ADDR_OWVAR 28
62221: PUSH
62222: LD_INT 21
62224: ST_TO_ADDR
// hc_gallery :=  ;
62225: LD_ADDR_OWVAR 33
62229: PUSH
62230: LD_STRING 
62232: ST_TO_ADDR
// animal := CreateHuman ;
62233: LD_ADDR_VAR 0 12
62237: PUSH
62238: CALL_OW 44
62242: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62243: LD_VAR 0 12
62247: PPUSH
62248: LD_VAR 0 8
62252: PPUSH
62253: LD_INT 0
62255: PPUSH
62256: CALL 64321 0 3
// end ;
62260: GO 62214
62262: POP
62263: POP
// if birds then
62264: LD_VAR 0 1
62268: IFFALSE 62335
// for i = 1 to birds do
62270: LD_ADDR_VAR 0 11
62274: PUSH
62275: DOUBLE
62276: LD_INT 1
62278: DEC
62279: ST_TO_ADDR
62280: LD_VAR 0 1
62284: PUSH
62285: FOR_TO
62286: IFFALSE 62333
// begin hc_class := 18 ;
62288: LD_ADDR_OWVAR 28
62292: PUSH
62293: LD_INT 18
62295: ST_TO_ADDR
// hc_gallery =  ;
62296: LD_ADDR_OWVAR 33
62300: PUSH
62301: LD_STRING 
62303: ST_TO_ADDR
// animal := CreateHuman ;
62304: LD_ADDR_VAR 0 12
62308: PUSH
62309: CALL_OW 44
62313: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62314: LD_VAR 0 12
62318: PPUSH
62319: LD_VAR 0 8
62323: PPUSH
62324: LD_INT 0
62326: PPUSH
62327: CALL 64321 0 3
// end ;
62331: GO 62285
62333: POP
62334: POP
// if tigers then
62335: LD_VAR 0 2
62339: IFFALSE 62423
// for i = 1 to tigers do
62341: LD_ADDR_VAR 0 11
62345: PUSH
62346: DOUBLE
62347: LD_INT 1
62349: DEC
62350: ST_TO_ADDR
62351: LD_VAR 0 2
62355: PUSH
62356: FOR_TO
62357: IFFALSE 62421
// begin hc_class = class_tiger ;
62359: LD_ADDR_OWVAR 28
62363: PUSH
62364: LD_INT 14
62366: ST_TO_ADDR
// hc_gallery =  ;
62367: LD_ADDR_OWVAR 33
62371: PUSH
62372: LD_STRING 
62374: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
62375: LD_ADDR_OWVAR 35
62379: PUSH
62380: LD_INT 7
62382: NEG
62383: PPUSH
62384: LD_INT 7
62386: PPUSH
62387: CALL_OW 12
62391: ST_TO_ADDR
// animal := CreateHuman ;
62392: LD_ADDR_VAR 0 12
62396: PUSH
62397: CALL_OW 44
62401: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62402: LD_VAR 0 12
62406: PPUSH
62407: LD_VAR 0 8
62411: PPUSH
62412: LD_INT 0
62414: PPUSH
62415: CALL 64321 0 3
// end ;
62419: GO 62356
62421: POP
62422: POP
// if apemans then
62423: LD_VAR 0 3
62427: IFFALSE 62550
// for i = 1 to apemans do
62429: LD_ADDR_VAR 0 11
62433: PUSH
62434: DOUBLE
62435: LD_INT 1
62437: DEC
62438: ST_TO_ADDR
62439: LD_VAR 0 3
62443: PUSH
62444: FOR_TO
62445: IFFALSE 62548
// begin hc_class = class_apeman ;
62447: LD_ADDR_OWVAR 28
62451: PUSH
62452: LD_INT 12
62454: ST_TO_ADDR
// hc_gallery =  ;
62455: LD_ADDR_OWVAR 33
62459: PUSH
62460: LD_STRING 
62462: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
62463: LD_ADDR_OWVAR 35
62467: PUSH
62468: LD_INT 2
62470: NEG
62471: PPUSH
62472: LD_INT 2
62474: PPUSH
62475: CALL_OW 12
62479: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
62480: LD_ADDR_OWVAR 31
62484: PUSH
62485: LD_INT 1
62487: PPUSH
62488: LD_INT 3
62490: PPUSH
62491: CALL_OW 12
62495: PUSH
62496: LD_INT 1
62498: PPUSH
62499: LD_INT 3
62501: PPUSH
62502: CALL_OW 12
62506: PUSH
62507: LD_INT 0
62509: PUSH
62510: LD_INT 0
62512: PUSH
62513: EMPTY
62514: LIST
62515: LIST
62516: LIST
62517: LIST
62518: ST_TO_ADDR
// animal := CreateHuman ;
62519: LD_ADDR_VAR 0 12
62523: PUSH
62524: CALL_OW 44
62528: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62529: LD_VAR 0 12
62533: PPUSH
62534: LD_VAR 0 8
62538: PPUSH
62539: LD_INT 0
62541: PPUSH
62542: CALL 64321 0 3
// end ;
62546: GO 62444
62548: POP
62549: POP
// if enchidnas then
62550: LD_VAR 0 4
62554: IFFALSE 62621
// for i = 1 to enchidnas do
62556: LD_ADDR_VAR 0 11
62560: PUSH
62561: DOUBLE
62562: LD_INT 1
62564: DEC
62565: ST_TO_ADDR
62566: LD_VAR 0 4
62570: PUSH
62571: FOR_TO
62572: IFFALSE 62619
// begin hc_class = 13 ;
62574: LD_ADDR_OWVAR 28
62578: PUSH
62579: LD_INT 13
62581: ST_TO_ADDR
// hc_gallery =  ;
62582: LD_ADDR_OWVAR 33
62586: PUSH
62587: LD_STRING 
62589: ST_TO_ADDR
// animal := CreateHuman ;
62590: LD_ADDR_VAR 0 12
62594: PUSH
62595: CALL_OW 44
62599: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62600: LD_VAR 0 12
62604: PPUSH
62605: LD_VAR 0 8
62609: PPUSH
62610: LD_INT 0
62612: PPUSH
62613: CALL 64321 0 3
// end ;
62617: GO 62571
62619: POP
62620: POP
// if fishes then
62621: LD_VAR 0 7
62625: IFFALSE 62692
// for i = 1 to fishes do
62627: LD_ADDR_VAR 0 11
62631: PUSH
62632: DOUBLE
62633: LD_INT 1
62635: DEC
62636: ST_TO_ADDR
62637: LD_VAR 0 7
62641: PUSH
62642: FOR_TO
62643: IFFALSE 62690
// begin hc_class = 20 ;
62645: LD_ADDR_OWVAR 28
62649: PUSH
62650: LD_INT 20
62652: ST_TO_ADDR
// hc_gallery =  ;
62653: LD_ADDR_OWVAR 33
62657: PUSH
62658: LD_STRING 
62660: ST_TO_ADDR
// animal := CreateHuman ;
62661: LD_ADDR_VAR 0 12
62665: PUSH
62666: CALL_OW 44
62670: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
62671: LD_VAR 0 12
62675: PPUSH
62676: LD_VAR 0 9
62680: PPUSH
62681: LD_INT 0
62683: PPUSH
62684: CALL 64321 0 3
// end ;
62688: GO 62642
62690: POP
62691: POP
// end ;
62692: LD_VAR 0 10
62696: RET
// export function WantHeal ( sci , unit ) ; begin
62697: LD_INT 0
62699: PPUSH
// if GetTaskList ( sci ) > 0 then
62700: LD_VAR 0 1
62704: PPUSH
62705: CALL_OW 437
62709: PUSH
62710: LD_INT 0
62712: GREATER
62713: IFFALSE 62783
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
62715: LD_VAR 0 1
62719: PPUSH
62720: CALL_OW 437
62724: PUSH
62725: LD_INT 1
62727: ARRAY
62728: PUSH
62729: LD_INT 1
62731: ARRAY
62732: PUSH
62733: LD_STRING l
62735: EQUAL
62736: PUSH
62737: LD_VAR 0 1
62741: PPUSH
62742: CALL_OW 437
62746: PUSH
62747: LD_INT 1
62749: ARRAY
62750: PUSH
62751: LD_INT 4
62753: ARRAY
62754: PUSH
62755: LD_VAR 0 2
62759: EQUAL
62760: AND
62761: IFFALSE 62773
// result := true else
62763: LD_ADDR_VAR 0 3
62767: PUSH
62768: LD_INT 1
62770: ST_TO_ADDR
62771: GO 62781
// result := false ;
62773: LD_ADDR_VAR 0 3
62777: PUSH
62778: LD_INT 0
62780: ST_TO_ADDR
// end else
62781: GO 62791
// result := false ;
62783: LD_ADDR_VAR 0 3
62787: PUSH
62788: LD_INT 0
62790: ST_TO_ADDR
// end ;
62791: LD_VAR 0 3
62795: RET
// export function HealTarget ( sci ) ; begin
62796: LD_INT 0
62798: PPUSH
// if not sci then
62799: LD_VAR 0 1
62803: NOT
62804: IFFALSE 62808
// exit ;
62806: GO 62873
// result := 0 ;
62808: LD_ADDR_VAR 0 2
62812: PUSH
62813: LD_INT 0
62815: ST_TO_ADDR
// if GetTaskList ( sci ) then
62816: LD_VAR 0 1
62820: PPUSH
62821: CALL_OW 437
62825: IFFALSE 62873
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62827: LD_VAR 0 1
62831: PPUSH
62832: CALL_OW 437
62836: PUSH
62837: LD_INT 1
62839: ARRAY
62840: PUSH
62841: LD_INT 1
62843: ARRAY
62844: PUSH
62845: LD_STRING l
62847: EQUAL
62848: IFFALSE 62873
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62850: LD_ADDR_VAR 0 2
62854: PUSH
62855: LD_VAR 0 1
62859: PPUSH
62860: CALL_OW 437
62864: PUSH
62865: LD_INT 1
62867: ARRAY
62868: PUSH
62869: LD_INT 4
62871: ARRAY
62872: ST_TO_ADDR
// end ;
62873: LD_VAR 0 2
62877: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62878: LD_INT 0
62880: PPUSH
62881: PPUSH
62882: PPUSH
62883: PPUSH
// if not base_units then
62884: LD_VAR 0 1
62888: NOT
62889: IFFALSE 62893
// exit ;
62891: GO 62980
// result := false ;
62893: LD_ADDR_VAR 0 2
62897: PUSH
62898: LD_INT 0
62900: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62901: LD_ADDR_VAR 0 5
62905: PUSH
62906: LD_VAR 0 1
62910: PPUSH
62911: LD_INT 21
62913: PUSH
62914: LD_INT 3
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: PPUSH
62921: CALL_OW 72
62925: ST_TO_ADDR
// if not tmp then
62926: LD_VAR 0 5
62930: NOT
62931: IFFALSE 62935
// exit ;
62933: GO 62980
// for i in tmp do
62935: LD_ADDR_VAR 0 3
62939: PUSH
62940: LD_VAR 0 5
62944: PUSH
62945: FOR_IN
62946: IFFALSE 62978
// begin result := EnemyInRange ( i , 22 ) ;
62948: LD_ADDR_VAR 0 2
62952: PUSH
62953: LD_VAR 0 3
62957: PPUSH
62958: LD_INT 22
62960: PPUSH
62961: CALL 60567 0 2
62965: ST_TO_ADDR
// if result then
62966: LD_VAR 0 2
62970: IFFALSE 62976
// exit ;
62972: POP
62973: POP
62974: GO 62980
// end ;
62976: GO 62945
62978: POP
62979: POP
// end ;
62980: LD_VAR 0 2
62984: RET
// export function FilterByTag ( units , tag ) ; begin
62985: LD_INT 0
62987: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
62988: LD_ADDR_VAR 0 3
62992: PUSH
62993: LD_VAR 0 1
62997: PPUSH
62998: LD_INT 120
63000: PUSH
63001: LD_VAR 0 2
63005: PUSH
63006: EMPTY
63007: LIST
63008: LIST
63009: PPUSH
63010: CALL_OW 72
63014: ST_TO_ADDR
// end ;
63015: LD_VAR 0 3
63019: RET
// export function IsDriver ( un ) ; begin
63020: LD_INT 0
63022: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63023: LD_ADDR_VAR 0 2
63027: PUSH
63028: LD_VAR 0 1
63032: PUSH
63033: LD_INT 55
63035: PUSH
63036: EMPTY
63037: LIST
63038: PPUSH
63039: CALL_OW 69
63043: IN
63044: ST_TO_ADDR
// end ;
63045: LD_VAR 0 2
63049: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63050: LD_INT 0
63052: PPUSH
63053: PPUSH
// list := [ ] ;
63054: LD_ADDR_VAR 0 5
63058: PUSH
63059: EMPTY
63060: ST_TO_ADDR
// case d of 0 :
63061: LD_VAR 0 3
63065: PUSH
63066: LD_INT 0
63068: DOUBLE
63069: EQUAL
63070: IFTRUE 63074
63072: GO 63207
63074: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63075: LD_ADDR_VAR 0 5
63079: PUSH
63080: LD_VAR 0 1
63084: PUSH
63085: LD_INT 4
63087: MINUS
63088: PUSH
63089: LD_VAR 0 2
63093: PUSH
63094: LD_INT 4
63096: MINUS
63097: PUSH
63098: LD_INT 2
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: LIST
63105: PUSH
63106: LD_VAR 0 1
63110: PUSH
63111: LD_INT 3
63113: MINUS
63114: PUSH
63115: LD_VAR 0 2
63119: PUSH
63120: LD_INT 1
63122: PUSH
63123: EMPTY
63124: LIST
63125: LIST
63126: LIST
63127: PUSH
63128: LD_VAR 0 1
63132: PUSH
63133: LD_INT 4
63135: PLUS
63136: PUSH
63137: LD_VAR 0 2
63141: PUSH
63142: LD_INT 4
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: LIST
63149: PUSH
63150: LD_VAR 0 1
63154: PUSH
63155: LD_INT 3
63157: PLUS
63158: PUSH
63159: LD_VAR 0 2
63163: PUSH
63164: LD_INT 3
63166: PLUS
63167: PUSH
63168: LD_INT 5
63170: PUSH
63171: EMPTY
63172: LIST
63173: LIST
63174: LIST
63175: PUSH
63176: LD_VAR 0 1
63180: PUSH
63181: LD_VAR 0 2
63185: PUSH
63186: LD_INT 4
63188: PLUS
63189: PUSH
63190: LD_INT 0
63192: PUSH
63193: EMPTY
63194: LIST
63195: LIST
63196: LIST
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: LIST
63202: LIST
63203: LIST
63204: ST_TO_ADDR
// end ; 1 :
63205: GO 63905
63207: LD_INT 1
63209: DOUBLE
63210: EQUAL
63211: IFTRUE 63215
63213: GO 63348
63215: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63216: LD_ADDR_VAR 0 5
63220: PUSH
63221: LD_VAR 0 1
63225: PUSH
63226: LD_VAR 0 2
63230: PUSH
63231: LD_INT 4
63233: MINUS
63234: PUSH
63235: LD_INT 3
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: LIST
63242: PUSH
63243: LD_VAR 0 1
63247: PUSH
63248: LD_INT 3
63250: MINUS
63251: PUSH
63252: LD_VAR 0 2
63256: PUSH
63257: LD_INT 3
63259: MINUS
63260: PUSH
63261: LD_INT 2
63263: PUSH
63264: EMPTY
63265: LIST
63266: LIST
63267: LIST
63268: PUSH
63269: LD_VAR 0 1
63273: PUSH
63274: LD_INT 4
63276: MINUS
63277: PUSH
63278: LD_VAR 0 2
63282: PUSH
63283: LD_INT 1
63285: PUSH
63286: EMPTY
63287: LIST
63288: LIST
63289: LIST
63290: PUSH
63291: LD_VAR 0 1
63295: PUSH
63296: LD_VAR 0 2
63300: PUSH
63301: LD_INT 3
63303: PLUS
63304: PUSH
63305: LD_INT 0
63307: PUSH
63308: EMPTY
63309: LIST
63310: LIST
63311: LIST
63312: PUSH
63313: LD_VAR 0 1
63317: PUSH
63318: LD_INT 4
63320: PLUS
63321: PUSH
63322: LD_VAR 0 2
63326: PUSH
63327: LD_INT 4
63329: PLUS
63330: PUSH
63331: LD_INT 5
63333: PUSH
63334: EMPTY
63335: LIST
63336: LIST
63337: LIST
63338: PUSH
63339: EMPTY
63340: LIST
63341: LIST
63342: LIST
63343: LIST
63344: LIST
63345: ST_TO_ADDR
// end ; 2 :
63346: GO 63905
63348: LD_INT 2
63350: DOUBLE
63351: EQUAL
63352: IFTRUE 63356
63354: GO 63485
63356: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
63357: LD_ADDR_VAR 0 5
63361: PUSH
63362: LD_VAR 0 1
63366: PUSH
63367: LD_VAR 0 2
63371: PUSH
63372: LD_INT 3
63374: MINUS
63375: PUSH
63376: LD_INT 3
63378: PUSH
63379: EMPTY
63380: LIST
63381: LIST
63382: LIST
63383: PUSH
63384: LD_VAR 0 1
63388: PUSH
63389: LD_INT 4
63391: PLUS
63392: PUSH
63393: LD_VAR 0 2
63397: PUSH
63398: LD_INT 4
63400: PUSH
63401: EMPTY
63402: LIST
63403: LIST
63404: LIST
63405: PUSH
63406: LD_VAR 0 1
63410: PUSH
63411: LD_VAR 0 2
63415: PUSH
63416: LD_INT 4
63418: PLUS
63419: PUSH
63420: LD_INT 0
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: LIST
63427: PUSH
63428: LD_VAR 0 1
63432: PUSH
63433: LD_INT 3
63435: MINUS
63436: PUSH
63437: LD_VAR 0 2
63441: PUSH
63442: LD_INT 1
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: LIST
63449: PUSH
63450: LD_VAR 0 1
63454: PUSH
63455: LD_INT 4
63457: MINUS
63458: PUSH
63459: LD_VAR 0 2
63463: PUSH
63464: LD_INT 4
63466: MINUS
63467: PUSH
63468: LD_INT 2
63470: PUSH
63471: EMPTY
63472: LIST
63473: LIST
63474: LIST
63475: PUSH
63476: EMPTY
63477: LIST
63478: LIST
63479: LIST
63480: LIST
63481: LIST
63482: ST_TO_ADDR
// end ; 3 :
63483: GO 63905
63485: LD_INT 3
63487: DOUBLE
63488: EQUAL
63489: IFTRUE 63493
63491: GO 63626
63493: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
63494: LD_ADDR_VAR 0 5
63498: PUSH
63499: LD_VAR 0 1
63503: PUSH
63504: LD_INT 3
63506: PLUS
63507: PUSH
63508: LD_VAR 0 2
63512: PUSH
63513: LD_INT 4
63515: PUSH
63516: EMPTY
63517: LIST
63518: LIST
63519: LIST
63520: PUSH
63521: LD_VAR 0 1
63525: PUSH
63526: LD_INT 4
63528: PLUS
63529: PUSH
63530: LD_VAR 0 2
63534: PUSH
63535: LD_INT 4
63537: PLUS
63538: PUSH
63539: LD_INT 5
63541: PUSH
63542: EMPTY
63543: LIST
63544: LIST
63545: LIST
63546: PUSH
63547: LD_VAR 0 1
63551: PUSH
63552: LD_INT 4
63554: MINUS
63555: PUSH
63556: LD_VAR 0 2
63560: PUSH
63561: LD_INT 1
63563: PUSH
63564: EMPTY
63565: LIST
63566: LIST
63567: LIST
63568: PUSH
63569: LD_VAR 0 1
63573: PUSH
63574: LD_VAR 0 2
63578: PUSH
63579: LD_INT 4
63581: MINUS
63582: PUSH
63583: LD_INT 3
63585: PUSH
63586: EMPTY
63587: LIST
63588: LIST
63589: LIST
63590: PUSH
63591: LD_VAR 0 1
63595: PUSH
63596: LD_INT 3
63598: MINUS
63599: PUSH
63600: LD_VAR 0 2
63604: PUSH
63605: LD_INT 3
63607: MINUS
63608: PUSH
63609: LD_INT 2
63611: PUSH
63612: EMPTY
63613: LIST
63614: LIST
63615: LIST
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: LIST
63621: LIST
63622: LIST
63623: ST_TO_ADDR
// end ; 4 :
63624: GO 63905
63626: LD_INT 4
63628: DOUBLE
63629: EQUAL
63630: IFTRUE 63634
63632: GO 63767
63634: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
63635: LD_ADDR_VAR 0 5
63639: PUSH
63640: LD_VAR 0 1
63644: PUSH
63645: LD_VAR 0 2
63649: PUSH
63650: LD_INT 4
63652: PLUS
63653: PUSH
63654: LD_INT 0
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: LIST
63661: PUSH
63662: LD_VAR 0 1
63666: PUSH
63667: LD_INT 3
63669: PLUS
63670: PUSH
63671: LD_VAR 0 2
63675: PUSH
63676: LD_INT 3
63678: PLUS
63679: PUSH
63680: LD_INT 5
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: LIST
63687: PUSH
63688: LD_VAR 0 1
63692: PUSH
63693: LD_INT 4
63695: PLUS
63696: PUSH
63697: LD_VAR 0 2
63701: PUSH
63702: LD_INT 4
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: LIST
63709: PUSH
63710: LD_VAR 0 1
63714: PUSH
63715: LD_VAR 0 2
63719: PUSH
63720: LD_INT 3
63722: MINUS
63723: PUSH
63724: LD_INT 3
63726: PUSH
63727: EMPTY
63728: LIST
63729: LIST
63730: LIST
63731: PUSH
63732: LD_VAR 0 1
63736: PUSH
63737: LD_INT 4
63739: MINUS
63740: PUSH
63741: LD_VAR 0 2
63745: PUSH
63746: LD_INT 4
63748: MINUS
63749: PUSH
63750: LD_INT 2
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: LIST
63757: PUSH
63758: EMPTY
63759: LIST
63760: LIST
63761: LIST
63762: LIST
63763: LIST
63764: ST_TO_ADDR
// end ; 5 :
63765: GO 63905
63767: LD_INT 5
63769: DOUBLE
63770: EQUAL
63771: IFTRUE 63775
63773: GO 63904
63775: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63776: LD_ADDR_VAR 0 5
63780: PUSH
63781: LD_VAR 0 1
63785: PUSH
63786: LD_INT 4
63788: MINUS
63789: PUSH
63790: LD_VAR 0 2
63794: PUSH
63795: LD_INT 1
63797: PUSH
63798: EMPTY
63799: LIST
63800: LIST
63801: LIST
63802: PUSH
63803: LD_VAR 0 1
63807: PUSH
63808: LD_VAR 0 2
63812: PUSH
63813: LD_INT 4
63815: MINUS
63816: PUSH
63817: LD_INT 3
63819: PUSH
63820: EMPTY
63821: LIST
63822: LIST
63823: LIST
63824: PUSH
63825: LD_VAR 0 1
63829: PUSH
63830: LD_INT 4
63832: PLUS
63833: PUSH
63834: LD_VAR 0 2
63838: PUSH
63839: LD_INT 4
63841: PLUS
63842: PUSH
63843: LD_INT 5
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: LIST
63850: PUSH
63851: LD_VAR 0 1
63855: PUSH
63856: LD_INT 3
63858: PLUS
63859: PUSH
63860: LD_VAR 0 2
63864: PUSH
63865: LD_INT 4
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: LIST
63872: PUSH
63873: LD_VAR 0 1
63877: PUSH
63878: LD_VAR 0 2
63882: PUSH
63883: LD_INT 3
63885: PLUS
63886: PUSH
63887: LD_INT 0
63889: PUSH
63890: EMPTY
63891: LIST
63892: LIST
63893: LIST
63894: PUSH
63895: EMPTY
63896: LIST
63897: LIST
63898: LIST
63899: LIST
63900: LIST
63901: ST_TO_ADDR
// end ; end ;
63902: GO 63905
63904: POP
// result := list ;
63905: LD_ADDR_VAR 0 4
63909: PUSH
63910: LD_VAR 0 5
63914: ST_TO_ADDR
// end ;
63915: LD_VAR 0 4
63919: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
63920: LD_INT 0
63922: PPUSH
63923: PPUSH
63924: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
63925: LD_VAR 0 1
63929: NOT
63930: PUSH
63931: LD_VAR 0 2
63935: PUSH
63936: LD_INT 1
63938: PUSH
63939: LD_INT 2
63941: PUSH
63942: LD_INT 3
63944: PUSH
63945: LD_INT 4
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: LIST
63952: LIST
63953: IN
63954: NOT
63955: OR
63956: IFFALSE 63960
// exit ;
63958: GO 64043
// tmp := [ ] ;
63960: LD_ADDR_VAR 0 5
63964: PUSH
63965: EMPTY
63966: ST_TO_ADDR
// for i in units do
63967: LD_ADDR_VAR 0 4
63971: PUSH
63972: LD_VAR 0 1
63976: PUSH
63977: FOR_IN
63978: IFFALSE 64012
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
63980: LD_ADDR_VAR 0 5
63984: PUSH
63985: LD_VAR 0 5
63989: PPUSH
63990: LD_VAR 0 4
63994: PPUSH
63995: LD_VAR 0 2
63999: PPUSH
64000: CALL_OW 259
64004: PPUSH
64005: CALL 65416 0 2
64009: ST_TO_ADDR
64010: GO 63977
64012: POP
64013: POP
// if not tmp then
64014: LD_VAR 0 5
64018: NOT
64019: IFFALSE 64023
// exit ;
64021: GO 64043
// result := SortListByListDesc ( units , tmp ) ;
64023: LD_ADDR_VAR 0 3
64027: PUSH
64028: LD_VAR 0 1
64032: PPUSH
64033: LD_VAR 0 5
64037: PPUSH
64038: CALL_OW 77
64042: ST_TO_ADDR
// end ;
64043: LD_VAR 0 3
64047: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64048: LD_INT 0
64050: PPUSH
64051: PPUSH
64052: PPUSH
// result := false ;
64053: LD_ADDR_VAR 0 3
64057: PUSH
64058: LD_INT 0
64060: ST_TO_ADDR
// if not building then
64061: LD_VAR 0 2
64065: NOT
64066: IFFALSE 64070
// exit ;
64068: GO 64208
// x := GetX ( building ) ;
64070: LD_ADDR_VAR 0 4
64074: PUSH
64075: LD_VAR 0 2
64079: PPUSH
64080: CALL_OW 250
64084: ST_TO_ADDR
// y := GetY ( building ) ;
64085: LD_ADDR_VAR 0 5
64089: PUSH
64090: LD_VAR 0 2
64094: PPUSH
64095: CALL_OW 251
64099: ST_TO_ADDR
// if not x or not y then
64100: LD_VAR 0 4
64104: NOT
64105: PUSH
64106: LD_VAR 0 5
64110: NOT
64111: OR
64112: IFFALSE 64116
// exit ;
64114: GO 64208
// if GetTaskList ( unit ) then
64116: LD_VAR 0 1
64120: PPUSH
64121: CALL_OW 437
64125: IFFALSE 64208
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64127: LD_STRING e
64129: PUSH
64130: LD_VAR 0 1
64134: PPUSH
64135: CALL_OW 437
64139: PUSH
64140: LD_INT 1
64142: ARRAY
64143: PUSH
64144: LD_INT 1
64146: ARRAY
64147: EQUAL
64148: PUSH
64149: LD_VAR 0 4
64153: PUSH
64154: LD_VAR 0 1
64158: PPUSH
64159: CALL_OW 437
64163: PUSH
64164: LD_INT 1
64166: ARRAY
64167: PUSH
64168: LD_INT 2
64170: ARRAY
64171: EQUAL
64172: AND
64173: PUSH
64174: LD_VAR 0 5
64178: PUSH
64179: LD_VAR 0 1
64183: PPUSH
64184: CALL_OW 437
64188: PUSH
64189: LD_INT 1
64191: ARRAY
64192: PUSH
64193: LD_INT 3
64195: ARRAY
64196: EQUAL
64197: AND
64198: IFFALSE 64208
// result := true end ;
64200: LD_ADDR_VAR 0 3
64204: PUSH
64205: LD_INT 1
64207: ST_TO_ADDR
// end ;
64208: LD_VAR 0 3
64212: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64213: LD_INT 0
64215: PPUSH
// result := false ;
64216: LD_ADDR_VAR 0 4
64220: PUSH
64221: LD_INT 0
64223: ST_TO_ADDR
// if GetTaskList ( unit ) then
64224: LD_VAR 0 1
64228: PPUSH
64229: CALL_OW 437
64233: IFFALSE 64316
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64235: LD_STRING M
64237: PUSH
64238: LD_VAR 0 1
64242: PPUSH
64243: CALL_OW 437
64247: PUSH
64248: LD_INT 1
64250: ARRAY
64251: PUSH
64252: LD_INT 1
64254: ARRAY
64255: EQUAL
64256: PUSH
64257: LD_VAR 0 2
64261: PUSH
64262: LD_VAR 0 1
64266: PPUSH
64267: CALL_OW 437
64271: PUSH
64272: LD_INT 1
64274: ARRAY
64275: PUSH
64276: LD_INT 2
64278: ARRAY
64279: EQUAL
64280: AND
64281: PUSH
64282: LD_VAR 0 3
64286: PUSH
64287: LD_VAR 0 1
64291: PPUSH
64292: CALL_OW 437
64296: PUSH
64297: LD_INT 1
64299: ARRAY
64300: PUSH
64301: LD_INT 3
64303: ARRAY
64304: EQUAL
64305: AND
64306: IFFALSE 64316
// result := true ;
64308: LD_ADDR_VAR 0 4
64312: PUSH
64313: LD_INT 1
64315: ST_TO_ADDR
// end ; end ;
64316: LD_VAR 0 4
64320: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
64321: LD_INT 0
64323: PPUSH
64324: PPUSH
64325: PPUSH
64326: PPUSH
// if not unit or not area then
64327: LD_VAR 0 1
64331: NOT
64332: PUSH
64333: LD_VAR 0 2
64337: NOT
64338: OR
64339: IFFALSE 64343
// exit ;
64341: GO 64519
// tmp := AreaToList ( area , i ) ;
64343: LD_ADDR_VAR 0 6
64347: PUSH
64348: LD_VAR 0 2
64352: PPUSH
64353: LD_VAR 0 5
64357: PPUSH
64358: CALL_OW 517
64362: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64363: LD_ADDR_VAR 0 5
64367: PUSH
64368: DOUBLE
64369: LD_INT 1
64371: DEC
64372: ST_TO_ADDR
64373: LD_VAR 0 6
64377: PUSH
64378: LD_INT 1
64380: ARRAY
64381: PUSH
64382: FOR_TO
64383: IFFALSE 64517
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64385: LD_ADDR_VAR 0 7
64389: PUSH
64390: LD_VAR 0 6
64394: PUSH
64395: LD_INT 1
64397: ARRAY
64398: PUSH
64399: LD_VAR 0 5
64403: ARRAY
64404: PUSH
64405: LD_VAR 0 6
64409: PUSH
64410: LD_INT 2
64412: ARRAY
64413: PUSH
64414: LD_VAR 0 5
64418: ARRAY
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
64424: LD_INT 92
64426: PUSH
64427: LD_VAR 0 7
64431: PUSH
64432: LD_INT 1
64434: ARRAY
64435: PUSH
64436: LD_VAR 0 7
64440: PUSH
64441: LD_INT 2
64443: ARRAY
64444: PUSH
64445: LD_INT 2
64447: PUSH
64448: EMPTY
64449: LIST
64450: LIST
64451: LIST
64452: LIST
64453: PPUSH
64454: CALL_OW 69
64458: PUSH
64459: LD_INT 0
64461: EQUAL
64462: IFFALSE 64515
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
64464: LD_VAR 0 1
64468: PPUSH
64469: LD_VAR 0 7
64473: PUSH
64474: LD_INT 1
64476: ARRAY
64477: PPUSH
64478: LD_VAR 0 7
64482: PUSH
64483: LD_INT 2
64485: ARRAY
64486: PPUSH
64487: LD_VAR 0 3
64491: PPUSH
64492: CALL_OW 48
// result := IsPlaced ( unit ) ;
64496: LD_ADDR_VAR 0 4
64500: PUSH
64501: LD_VAR 0 1
64505: PPUSH
64506: CALL_OW 305
64510: ST_TO_ADDR
// exit ;
64511: POP
64512: POP
64513: GO 64519
// end ; end ;
64515: GO 64382
64517: POP
64518: POP
// end ;
64519: LD_VAR 0 4
64523: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
64524: LD_INT 0
64526: PPUSH
64527: PPUSH
64528: PPUSH
// if not side or side > 8 then
64529: LD_VAR 0 1
64533: NOT
64534: PUSH
64535: LD_VAR 0 1
64539: PUSH
64540: LD_INT 8
64542: GREATER
64543: OR
64544: IFFALSE 64548
// exit ;
64546: GO 64735
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
64548: LD_ADDR_VAR 0 4
64552: PUSH
64553: LD_INT 22
64555: PUSH
64556: LD_VAR 0 1
64560: PUSH
64561: EMPTY
64562: LIST
64563: LIST
64564: PUSH
64565: LD_INT 21
64567: PUSH
64568: LD_INT 3
64570: PUSH
64571: EMPTY
64572: LIST
64573: LIST
64574: PUSH
64575: EMPTY
64576: LIST
64577: LIST
64578: PPUSH
64579: CALL_OW 69
64583: ST_TO_ADDR
// if not tmp then
64584: LD_VAR 0 4
64588: NOT
64589: IFFALSE 64593
// exit ;
64591: GO 64735
// enable_addtolog := true ;
64593: LD_ADDR_OWVAR 81
64597: PUSH
64598: LD_INT 1
64600: ST_TO_ADDR
// AddToLog ( [ ) ;
64601: LD_STRING [
64603: PPUSH
64604: CALL_OW 561
// for i in tmp do
64608: LD_ADDR_VAR 0 3
64612: PUSH
64613: LD_VAR 0 4
64617: PUSH
64618: FOR_IN
64619: IFFALSE 64726
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
64621: LD_STRING [
64623: PUSH
64624: LD_VAR 0 3
64628: PPUSH
64629: CALL_OW 266
64633: STR
64634: PUSH
64635: LD_STRING , 
64637: STR
64638: PUSH
64639: LD_VAR 0 3
64643: PPUSH
64644: CALL_OW 250
64648: STR
64649: PUSH
64650: LD_STRING , 
64652: STR
64653: PUSH
64654: LD_VAR 0 3
64658: PPUSH
64659: CALL_OW 251
64663: STR
64664: PUSH
64665: LD_STRING , 
64667: STR
64668: PUSH
64669: LD_VAR 0 3
64673: PPUSH
64674: CALL_OW 254
64678: STR
64679: PUSH
64680: LD_STRING , 
64682: STR
64683: PUSH
64684: LD_VAR 0 3
64688: PPUSH
64689: LD_INT 1
64691: PPUSH
64692: CALL_OW 268
64696: STR
64697: PUSH
64698: LD_STRING , 
64700: STR
64701: PUSH
64702: LD_VAR 0 3
64706: PPUSH
64707: LD_INT 2
64709: PPUSH
64710: CALL_OW 268
64714: STR
64715: PUSH
64716: LD_STRING ],
64718: STR
64719: PPUSH
64720: CALL_OW 561
// end ;
64724: GO 64618
64726: POP
64727: POP
// AddToLog ( ]; ) ;
64728: LD_STRING ];
64730: PPUSH
64731: CALL_OW 561
// end ;
64735: LD_VAR 0 2
64739: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
64740: LD_INT 0
64742: PPUSH
64743: PPUSH
64744: PPUSH
64745: PPUSH
64746: PPUSH
// if not area or not rate or not max then
64747: LD_VAR 0 1
64751: NOT
64752: PUSH
64753: LD_VAR 0 2
64757: NOT
64758: OR
64759: PUSH
64760: LD_VAR 0 4
64764: NOT
64765: OR
64766: IFFALSE 64770
// exit ;
64768: GO 64959
// while 1 do
64770: LD_INT 1
64772: IFFALSE 64959
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64774: LD_ADDR_VAR 0 9
64778: PUSH
64779: LD_VAR 0 1
64783: PPUSH
64784: LD_INT 1
64786: PPUSH
64787: CALL_OW 287
64791: PUSH
64792: LD_INT 10
64794: MUL
64795: ST_TO_ADDR
// r := rate / 10 ;
64796: LD_ADDR_VAR 0 7
64800: PUSH
64801: LD_VAR 0 2
64805: PUSH
64806: LD_INT 10
64808: DIVREAL
64809: ST_TO_ADDR
// time := 1 1$00 ;
64810: LD_ADDR_VAR 0 8
64814: PUSH
64815: LD_INT 2100
64817: ST_TO_ADDR
// if amount < min then
64818: LD_VAR 0 9
64822: PUSH
64823: LD_VAR 0 3
64827: LESS
64828: IFFALSE 64846
// r := r * 2 else
64830: LD_ADDR_VAR 0 7
64834: PUSH
64835: LD_VAR 0 7
64839: PUSH
64840: LD_INT 2
64842: MUL
64843: ST_TO_ADDR
64844: GO 64872
// if amount > max then
64846: LD_VAR 0 9
64850: PUSH
64851: LD_VAR 0 4
64855: GREATER
64856: IFFALSE 64872
// r := r / 2 ;
64858: LD_ADDR_VAR 0 7
64862: PUSH
64863: LD_VAR 0 7
64867: PUSH
64868: LD_INT 2
64870: DIVREAL
64871: ST_TO_ADDR
// time := time / r ;
64872: LD_ADDR_VAR 0 8
64876: PUSH
64877: LD_VAR 0 8
64881: PUSH
64882: LD_VAR 0 7
64886: DIVREAL
64887: ST_TO_ADDR
// if time < 0 then
64888: LD_VAR 0 8
64892: PUSH
64893: LD_INT 0
64895: LESS
64896: IFFALSE 64913
// time := time * - 1 ;
64898: LD_ADDR_VAR 0 8
64902: PUSH
64903: LD_VAR 0 8
64907: PUSH
64908: LD_INT 1
64910: NEG
64911: MUL
64912: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
64913: LD_VAR 0 8
64917: PUSH
64918: LD_INT 35
64920: PPUSH
64921: LD_INT 875
64923: PPUSH
64924: CALL_OW 12
64928: PLUS
64929: PPUSH
64930: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64934: LD_INT 1
64936: PPUSH
64937: LD_INT 5
64939: PPUSH
64940: CALL_OW 12
64944: PPUSH
64945: LD_VAR 0 1
64949: PPUSH
64950: LD_INT 1
64952: PPUSH
64953: CALL_OW 55
// end ;
64957: GO 64770
// end ;
64959: LD_VAR 0 5
64963: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64964: LD_INT 0
64966: PPUSH
64967: PPUSH
64968: PPUSH
64969: PPUSH
64970: PPUSH
64971: PPUSH
64972: PPUSH
64973: PPUSH
// if not turrets or not factories then
64974: LD_VAR 0 1
64978: NOT
64979: PUSH
64980: LD_VAR 0 2
64984: NOT
64985: OR
64986: IFFALSE 64990
// exit ;
64988: GO 65297
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64990: LD_ADDR_VAR 0 10
64994: PUSH
64995: LD_INT 5
64997: PUSH
64998: LD_INT 6
65000: PUSH
65001: EMPTY
65002: LIST
65003: LIST
65004: PUSH
65005: LD_INT 2
65007: PUSH
65008: LD_INT 4
65010: PUSH
65011: EMPTY
65012: LIST
65013: LIST
65014: PUSH
65015: LD_INT 3
65017: PUSH
65018: LD_INT 5
65020: PUSH
65021: EMPTY
65022: LIST
65023: LIST
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: LIST
65029: PUSH
65030: LD_INT 24
65032: PUSH
65033: LD_INT 25
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: PUSH
65040: LD_INT 23
65042: PUSH
65043: LD_INT 27
65045: PUSH
65046: EMPTY
65047: LIST
65048: LIST
65049: PUSH
65050: EMPTY
65051: LIST
65052: LIST
65053: PUSH
65054: LD_INT 42
65056: PUSH
65057: LD_INT 43
65059: PUSH
65060: EMPTY
65061: LIST
65062: LIST
65063: PUSH
65064: LD_INT 44
65066: PUSH
65067: LD_INT 46
65069: PUSH
65070: EMPTY
65071: LIST
65072: LIST
65073: PUSH
65074: LD_INT 45
65076: PUSH
65077: LD_INT 47
65079: PUSH
65080: EMPTY
65081: LIST
65082: LIST
65083: PUSH
65084: EMPTY
65085: LIST
65086: LIST
65087: LIST
65088: PUSH
65089: EMPTY
65090: LIST
65091: LIST
65092: LIST
65093: ST_TO_ADDR
// result := [ ] ;
65094: LD_ADDR_VAR 0 3
65098: PUSH
65099: EMPTY
65100: ST_TO_ADDR
// for i in turrets do
65101: LD_ADDR_VAR 0 4
65105: PUSH
65106: LD_VAR 0 1
65110: PUSH
65111: FOR_IN
65112: IFFALSE 65295
// begin nat := GetNation ( i ) ;
65114: LD_ADDR_VAR 0 7
65118: PUSH
65119: LD_VAR 0 4
65123: PPUSH
65124: CALL_OW 248
65128: ST_TO_ADDR
// weapon := 0 ;
65129: LD_ADDR_VAR 0 8
65133: PUSH
65134: LD_INT 0
65136: ST_TO_ADDR
// if not nat then
65137: LD_VAR 0 7
65141: NOT
65142: IFFALSE 65146
// continue ;
65144: GO 65111
// for j in list [ nat ] do
65146: LD_ADDR_VAR 0 5
65150: PUSH
65151: LD_VAR 0 10
65155: PUSH
65156: LD_VAR 0 7
65160: ARRAY
65161: PUSH
65162: FOR_IN
65163: IFFALSE 65204
// if GetBWeapon ( i ) = j [ 1 ] then
65165: LD_VAR 0 4
65169: PPUSH
65170: CALL_OW 269
65174: PUSH
65175: LD_VAR 0 5
65179: PUSH
65180: LD_INT 1
65182: ARRAY
65183: EQUAL
65184: IFFALSE 65202
// begin weapon := j [ 2 ] ;
65186: LD_ADDR_VAR 0 8
65190: PUSH
65191: LD_VAR 0 5
65195: PUSH
65196: LD_INT 2
65198: ARRAY
65199: ST_TO_ADDR
// break ;
65200: GO 65204
// end ;
65202: GO 65162
65204: POP
65205: POP
// if not weapon then
65206: LD_VAR 0 8
65210: NOT
65211: IFFALSE 65215
// continue ;
65213: GO 65111
// for k in factories do
65215: LD_ADDR_VAR 0 6
65219: PUSH
65220: LD_VAR 0 2
65224: PUSH
65225: FOR_IN
65226: IFFALSE 65291
// begin weapons := AvailableWeaponList ( k ) ;
65228: LD_ADDR_VAR 0 9
65232: PUSH
65233: LD_VAR 0 6
65237: PPUSH
65238: CALL_OW 478
65242: ST_TO_ADDR
// if not weapons then
65243: LD_VAR 0 9
65247: NOT
65248: IFFALSE 65252
// continue ;
65250: GO 65225
// if weapon in weapons then
65252: LD_VAR 0 8
65256: PUSH
65257: LD_VAR 0 9
65261: IN
65262: IFFALSE 65289
// begin result := [ i , weapon ] ;
65264: LD_ADDR_VAR 0 3
65268: PUSH
65269: LD_VAR 0 4
65273: PUSH
65274: LD_VAR 0 8
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: ST_TO_ADDR
// exit ;
65283: POP
65284: POP
65285: POP
65286: POP
65287: GO 65297
// end ; end ;
65289: GO 65225
65291: POP
65292: POP
// end ;
65293: GO 65111
65295: POP
65296: POP
// end ;
65297: LD_VAR 0 3
65301: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65302: LD_INT 0
65304: PPUSH
// if not side or side > 8 then
65305: LD_VAR 0 3
65309: NOT
65310: PUSH
65311: LD_VAR 0 3
65315: PUSH
65316: LD_INT 8
65318: GREATER
65319: OR
65320: IFFALSE 65324
// exit ;
65322: GO 65383
// if not range then
65324: LD_VAR 0 4
65328: NOT
65329: IFFALSE 65340
// range := - 12 ;
65331: LD_ADDR_VAR 0 4
65335: PUSH
65336: LD_INT 12
65338: NEG
65339: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
65340: LD_VAR 0 1
65344: PPUSH
65345: LD_VAR 0 2
65349: PPUSH
65350: LD_VAR 0 3
65354: PPUSH
65355: LD_VAR 0 4
65359: PPUSH
65360: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65364: LD_VAR 0 1
65368: PPUSH
65369: LD_VAR 0 2
65373: PPUSH
65374: LD_VAR 0 3
65378: PPUSH
65379: CALL_OW 331
// end ;
65383: LD_VAR 0 5
65387: RET
// export function Video ( mode ) ; begin
65388: LD_INT 0
65390: PPUSH
// ingame_video = mode ;
65391: LD_ADDR_OWVAR 52
65395: PUSH
65396: LD_VAR 0 1
65400: ST_TO_ADDR
// interface_hidden = mode ;
65401: LD_ADDR_OWVAR 54
65405: PUSH
65406: LD_VAR 0 1
65410: ST_TO_ADDR
// end ;
65411: LD_VAR 0 2
65415: RET
// export function Join ( array , element ) ; begin
65416: LD_INT 0
65418: PPUSH
// result := Replace ( array , array + 1 , element ) ;
65419: LD_ADDR_VAR 0 3
65423: PUSH
65424: LD_VAR 0 1
65428: PPUSH
65429: LD_VAR 0 1
65433: PUSH
65434: LD_INT 1
65436: PLUS
65437: PPUSH
65438: LD_VAR 0 2
65442: PPUSH
65443: CALL_OW 1
65447: ST_TO_ADDR
// end ;
65448: LD_VAR 0 3
65452: RET
// export function JoinUnion ( array , element ) ; begin
65453: LD_INT 0
65455: PPUSH
// result := array union element ;
65456: LD_ADDR_VAR 0 3
65460: PUSH
65461: LD_VAR 0 1
65465: PUSH
65466: LD_VAR 0 2
65470: UNION
65471: ST_TO_ADDR
// end ;
65472: LD_VAR 0 3
65476: RET
// export function GetBehemoths ( side ) ; begin
65477: LD_INT 0
65479: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
65480: LD_ADDR_VAR 0 2
65484: PUSH
65485: LD_INT 22
65487: PUSH
65488: LD_VAR 0 1
65492: PUSH
65493: EMPTY
65494: LIST
65495: LIST
65496: PUSH
65497: LD_INT 31
65499: PUSH
65500: LD_INT 25
65502: PUSH
65503: EMPTY
65504: LIST
65505: LIST
65506: PUSH
65507: EMPTY
65508: LIST
65509: LIST
65510: PPUSH
65511: CALL_OW 69
65515: ST_TO_ADDR
// end ;
65516: LD_VAR 0 2
65520: RET
// export function Shuffle ( array ) ; var i , index ; begin
65521: LD_INT 0
65523: PPUSH
65524: PPUSH
65525: PPUSH
// result := [ ] ;
65526: LD_ADDR_VAR 0 2
65530: PUSH
65531: EMPTY
65532: ST_TO_ADDR
// if not array then
65533: LD_VAR 0 1
65537: NOT
65538: IFFALSE 65542
// exit ;
65540: GO 65641
// Randomize ;
65542: CALL_OW 10
// for i = array downto 1 do
65546: LD_ADDR_VAR 0 3
65550: PUSH
65551: DOUBLE
65552: LD_VAR 0 1
65556: INC
65557: ST_TO_ADDR
65558: LD_INT 1
65560: PUSH
65561: FOR_DOWNTO
65562: IFFALSE 65639
// begin index := rand ( 1 , array ) ;
65564: LD_ADDR_VAR 0 4
65568: PUSH
65569: LD_INT 1
65571: PPUSH
65572: LD_VAR 0 1
65576: PPUSH
65577: CALL_OW 12
65581: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
65582: LD_ADDR_VAR 0 2
65586: PUSH
65587: LD_VAR 0 2
65591: PPUSH
65592: LD_VAR 0 2
65596: PUSH
65597: LD_INT 1
65599: PLUS
65600: PPUSH
65601: LD_VAR 0 1
65605: PUSH
65606: LD_VAR 0 4
65610: ARRAY
65611: PPUSH
65612: CALL_OW 2
65616: ST_TO_ADDR
// array := Delete ( array , index ) ;
65617: LD_ADDR_VAR 0 1
65621: PUSH
65622: LD_VAR 0 1
65626: PPUSH
65627: LD_VAR 0 4
65631: PPUSH
65632: CALL_OW 3
65636: ST_TO_ADDR
// end ;
65637: GO 65561
65639: POP
65640: POP
// end ;
65641: LD_VAR 0 2
65645: RET
// export function GetBaseMaterials ( base ) ; begin
65646: LD_INT 0
65648: PPUSH
// result := [ 0 , 0 , 0 ] ;
65649: LD_ADDR_VAR 0 2
65653: PUSH
65654: LD_INT 0
65656: PUSH
65657: LD_INT 0
65659: PUSH
65660: LD_INT 0
65662: PUSH
65663: EMPTY
65664: LIST
65665: LIST
65666: LIST
65667: ST_TO_ADDR
// if not base then
65668: LD_VAR 0 1
65672: NOT
65673: IFFALSE 65677
// exit ;
65675: GO 65726
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
65677: LD_ADDR_VAR 0 2
65681: PUSH
65682: LD_VAR 0 1
65686: PPUSH
65687: LD_INT 1
65689: PPUSH
65690: CALL_OW 275
65694: PUSH
65695: LD_VAR 0 1
65699: PPUSH
65700: LD_INT 2
65702: PPUSH
65703: CALL_OW 275
65707: PUSH
65708: LD_VAR 0 1
65712: PPUSH
65713: LD_INT 3
65715: PPUSH
65716: CALL_OW 275
65720: PUSH
65721: EMPTY
65722: LIST
65723: LIST
65724: LIST
65725: ST_TO_ADDR
// end ;
65726: LD_VAR 0 2
65730: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
65731: LD_INT 0
65733: PPUSH
65734: PPUSH
// result := array ;
65735: LD_ADDR_VAR 0 3
65739: PUSH
65740: LD_VAR 0 1
65744: ST_TO_ADDR
// if size >= result then
65745: LD_VAR 0 2
65749: PUSH
65750: LD_VAR 0 3
65754: GREATEREQUAL
65755: IFFALSE 65759
// exit ;
65757: GO 65809
// if size then
65759: LD_VAR 0 2
65763: IFFALSE 65809
// for i := array downto size do
65765: LD_ADDR_VAR 0 4
65769: PUSH
65770: DOUBLE
65771: LD_VAR 0 1
65775: INC
65776: ST_TO_ADDR
65777: LD_VAR 0 2
65781: PUSH
65782: FOR_DOWNTO
65783: IFFALSE 65807
// result := Delete ( result , result ) ;
65785: LD_ADDR_VAR 0 3
65789: PUSH
65790: LD_VAR 0 3
65794: PPUSH
65795: LD_VAR 0 3
65799: PPUSH
65800: CALL_OW 3
65804: ST_TO_ADDR
65805: GO 65782
65807: POP
65808: POP
// end ;
65809: LD_VAR 0 3
65813: RET
// export function ComExit ( unit ) ; var tmp ; begin
65814: LD_INT 0
65816: PPUSH
65817: PPUSH
// if not IsInUnit ( unit ) then
65818: LD_VAR 0 1
65822: PPUSH
65823: CALL_OW 310
65827: NOT
65828: IFFALSE 65832
// exit ;
65830: GO 65892
// tmp := IsInUnit ( unit ) ;
65832: LD_ADDR_VAR 0 3
65836: PUSH
65837: LD_VAR 0 1
65841: PPUSH
65842: CALL_OW 310
65846: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65847: LD_VAR 0 3
65851: PPUSH
65852: CALL_OW 247
65856: PUSH
65857: LD_INT 2
65859: EQUAL
65860: IFFALSE 65873
// ComExitVehicle ( unit ) else
65862: LD_VAR 0 1
65866: PPUSH
65867: CALL_OW 121
65871: GO 65882
// ComExitBuilding ( unit ) ;
65873: LD_VAR 0 1
65877: PPUSH
65878: CALL_OW 122
// result := tmp ;
65882: LD_ADDR_VAR 0 2
65886: PUSH
65887: LD_VAR 0 3
65891: ST_TO_ADDR
// end ;
65892: LD_VAR 0 2
65896: RET
// export function ComExitAll ( units ) ; var i ; begin
65897: LD_INT 0
65899: PPUSH
65900: PPUSH
// if not units then
65901: LD_VAR 0 1
65905: NOT
65906: IFFALSE 65910
// exit ;
65908: GO 65936
// for i in units do
65910: LD_ADDR_VAR 0 3
65914: PUSH
65915: LD_VAR 0 1
65919: PUSH
65920: FOR_IN
65921: IFFALSE 65934
// ComExit ( i ) ;
65923: LD_VAR 0 3
65927: PPUSH
65928: CALL 65814 0 1
65932: GO 65920
65934: POP
65935: POP
// end ;
65936: LD_VAR 0 2
65940: RET
// export function ResetHc ; begin
65941: LD_INT 0
65943: PPUSH
// InitHc ;
65944: CALL_OW 19
// hc_importance := 0 ;
65948: LD_ADDR_OWVAR 32
65952: PUSH
65953: LD_INT 0
65955: ST_TO_ADDR
// end ;
65956: LD_VAR 0 1
65960: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
65961: LD_INT 0
65963: PPUSH
65964: PPUSH
65965: PPUSH
// _x := ( x1 + x2 ) div 2 ;
65966: LD_ADDR_VAR 0 6
65970: PUSH
65971: LD_VAR 0 1
65975: PUSH
65976: LD_VAR 0 3
65980: PLUS
65981: PUSH
65982: LD_INT 2
65984: DIV
65985: ST_TO_ADDR
// if _x < 0 then
65986: LD_VAR 0 6
65990: PUSH
65991: LD_INT 0
65993: LESS
65994: IFFALSE 66011
// _x := _x * - 1 ;
65996: LD_ADDR_VAR 0 6
66000: PUSH
66001: LD_VAR 0 6
66005: PUSH
66006: LD_INT 1
66008: NEG
66009: MUL
66010: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66011: LD_ADDR_VAR 0 7
66015: PUSH
66016: LD_VAR 0 2
66020: PUSH
66021: LD_VAR 0 4
66025: PLUS
66026: PUSH
66027: LD_INT 2
66029: DIV
66030: ST_TO_ADDR
// if _y < 0 then
66031: LD_VAR 0 7
66035: PUSH
66036: LD_INT 0
66038: LESS
66039: IFFALSE 66056
// _y := _y * - 1 ;
66041: LD_ADDR_VAR 0 7
66045: PUSH
66046: LD_VAR 0 7
66050: PUSH
66051: LD_INT 1
66053: NEG
66054: MUL
66055: ST_TO_ADDR
// result := [ _x , _y ] ;
66056: LD_ADDR_VAR 0 5
66060: PUSH
66061: LD_VAR 0 6
66065: PUSH
66066: LD_VAR 0 7
66070: PUSH
66071: EMPTY
66072: LIST
66073: LIST
66074: ST_TO_ADDR
// end ;
66075: LD_VAR 0 5
66079: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66080: LD_INT 0
66082: PPUSH
66083: PPUSH
66084: PPUSH
66085: PPUSH
// task := GetTaskList ( unit ) ;
66086: LD_ADDR_VAR 0 7
66090: PUSH
66091: LD_VAR 0 1
66095: PPUSH
66096: CALL_OW 437
66100: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66101: LD_VAR 0 7
66105: NOT
66106: PUSH
66107: LD_VAR 0 1
66111: PPUSH
66112: LD_VAR 0 2
66116: PPUSH
66117: CALL_OW 308
66121: NOT
66122: AND
66123: IFFALSE 66127
// exit ;
66125: GO 66245
// if IsInArea ( unit , area ) then
66127: LD_VAR 0 1
66131: PPUSH
66132: LD_VAR 0 2
66136: PPUSH
66137: CALL_OW 308
66141: IFFALSE 66159
// begin ComMoveToArea ( unit , goAway ) ;
66143: LD_VAR 0 1
66147: PPUSH
66148: LD_VAR 0 3
66152: PPUSH
66153: CALL_OW 113
// exit ;
66157: GO 66245
// end ; if task [ 1 ] [ 1 ] <> M then
66159: LD_VAR 0 7
66163: PUSH
66164: LD_INT 1
66166: ARRAY
66167: PUSH
66168: LD_INT 1
66170: ARRAY
66171: PUSH
66172: LD_STRING M
66174: NONEQUAL
66175: IFFALSE 66179
// exit ;
66177: GO 66245
// x := task [ 1 ] [ 2 ] ;
66179: LD_ADDR_VAR 0 5
66183: PUSH
66184: LD_VAR 0 7
66188: PUSH
66189: LD_INT 1
66191: ARRAY
66192: PUSH
66193: LD_INT 2
66195: ARRAY
66196: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66197: LD_ADDR_VAR 0 6
66201: PUSH
66202: LD_VAR 0 7
66206: PUSH
66207: LD_INT 1
66209: ARRAY
66210: PUSH
66211: LD_INT 3
66213: ARRAY
66214: ST_TO_ADDR
// if InArea ( x , y , area ) then
66215: LD_VAR 0 5
66219: PPUSH
66220: LD_VAR 0 6
66224: PPUSH
66225: LD_VAR 0 2
66229: PPUSH
66230: CALL_OW 309
66234: IFFALSE 66245
// ComStop ( unit ) ;
66236: LD_VAR 0 1
66240: PPUSH
66241: CALL_OW 141
// end ;
66245: LD_VAR 0 4
66249: RET
// export function Abs ( value ) ; begin
66250: LD_INT 0
66252: PPUSH
// result := value ;
66253: LD_ADDR_VAR 0 2
66257: PUSH
66258: LD_VAR 0 1
66262: ST_TO_ADDR
// if value < 0 then
66263: LD_VAR 0 1
66267: PUSH
66268: LD_INT 0
66270: LESS
66271: IFFALSE 66288
// result := value * - 1 ;
66273: LD_ADDR_VAR 0 2
66277: PUSH
66278: LD_VAR 0 1
66282: PUSH
66283: LD_INT 1
66285: NEG
66286: MUL
66287: ST_TO_ADDR
// end ;
66288: LD_VAR 0 2
66292: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66293: LD_INT 0
66295: PPUSH
66296: PPUSH
66297: PPUSH
66298: PPUSH
66299: PPUSH
66300: PPUSH
66301: PPUSH
66302: PPUSH
// if not unit or not building then
66303: LD_VAR 0 1
66307: NOT
66308: PUSH
66309: LD_VAR 0 2
66313: NOT
66314: OR
66315: IFFALSE 66319
// exit ;
66317: GO 66545
// x := GetX ( building ) ;
66319: LD_ADDR_VAR 0 4
66323: PUSH
66324: LD_VAR 0 2
66328: PPUSH
66329: CALL_OW 250
66333: ST_TO_ADDR
// y := GetY ( building ) ;
66334: LD_ADDR_VAR 0 6
66338: PUSH
66339: LD_VAR 0 2
66343: PPUSH
66344: CALL_OW 251
66348: ST_TO_ADDR
// d := GetDir ( building ) ;
66349: LD_ADDR_VAR 0 8
66353: PUSH
66354: LD_VAR 0 2
66358: PPUSH
66359: CALL_OW 254
66363: ST_TO_ADDR
// r := 4 ;
66364: LD_ADDR_VAR 0 9
66368: PUSH
66369: LD_INT 4
66371: ST_TO_ADDR
// for i := 1 to 5 do
66372: LD_ADDR_VAR 0 10
66376: PUSH
66377: DOUBLE
66378: LD_INT 1
66380: DEC
66381: ST_TO_ADDR
66382: LD_INT 5
66384: PUSH
66385: FOR_TO
66386: IFFALSE 66543
// begin _x := ShiftX ( x , d , r + i ) ;
66388: LD_ADDR_VAR 0 5
66392: PUSH
66393: LD_VAR 0 4
66397: PPUSH
66398: LD_VAR 0 8
66402: PPUSH
66403: LD_VAR 0 9
66407: PUSH
66408: LD_VAR 0 10
66412: PLUS
66413: PPUSH
66414: CALL_OW 272
66418: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
66419: LD_ADDR_VAR 0 7
66423: PUSH
66424: LD_VAR 0 6
66428: PPUSH
66429: LD_VAR 0 8
66433: PPUSH
66434: LD_VAR 0 9
66438: PUSH
66439: LD_VAR 0 10
66443: PLUS
66444: PPUSH
66445: CALL_OW 273
66449: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
66450: LD_VAR 0 5
66454: PPUSH
66455: LD_VAR 0 7
66459: PPUSH
66460: CALL_OW 488
66464: PUSH
66465: LD_VAR 0 5
66469: PPUSH
66470: LD_VAR 0 7
66474: PPUSH
66475: CALL_OW 428
66479: PPUSH
66480: CALL_OW 247
66484: PUSH
66485: LD_INT 3
66487: PUSH
66488: LD_INT 2
66490: PUSH
66491: EMPTY
66492: LIST
66493: LIST
66494: IN
66495: NOT
66496: AND
66497: IFFALSE 66541
// begin ComMoveXY ( unit , _x , _y ) ;
66499: LD_VAR 0 1
66503: PPUSH
66504: LD_VAR 0 5
66508: PPUSH
66509: LD_VAR 0 7
66513: PPUSH
66514: CALL_OW 111
// result := [ _x , _y ] ;
66518: LD_ADDR_VAR 0 3
66522: PUSH
66523: LD_VAR 0 5
66527: PUSH
66528: LD_VAR 0 7
66532: PUSH
66533: EMPTY
66534: LIST
66535: LIST
66536: ST_TO_ADDR
// exit ;
66537: POP
66538: POP
66539: GO 66545
// end ; end ;
66541: GO 66385
66543: POP
66544: POP
// end ;
66545: LD_VAR 0 3
66549: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
66550: LD_INT 0
66552: PPUSH
66553: PPUSH
66554: PPUSH
// result := 0 ;
66555: LD_ADDR_VAR 0 3
66559: PUSH
66560: LD_INT 0
66562: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
66563: LD_VAR 0 1
66567: PUSH
66568: LD_INT 0
66570: LESS
66571: PUSH
66572: LD_VAR 0 1
66576: PUSH
66577: LD_INT 8
66579: GREATER
66580: OR
66581: PUSH
66582: LD_VAR 0 2
66586: PUSH
66587: LD_INT 0
66589: LESS
66590: OR
66591: PUSH
66592: LD_VAR 0 2
66596: PUSH
66597: LD_INT 8
66599: GREATER
66600: OR
66601: IFFALSE 66605
// exit ;
66603: GO 66680
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
66605: LD_ADDR_VAR 0 4
66609: PUSH
66610: LD_INT 22
66612: PUSH
66613: LD_VAR 0 2
66617: PUSH
66618: EMPTY
66619: LIST
66620: LIST
66621: PPUSH
66622: CALL_OW 69
66626: PUSH
66627: FOR_IN
66628: IFFALSE 66678
// begin un := UnitShoot ( i ) ;
66630: LD_ADDR_VAR 0 5
66634: PUSH
66635: LD_VAR 0 4
66639: PPUSH
66640: CALL_OW 504
66644: ST_TO_ADDR
// if GetSide ( un ) = side1 then
66645: LD_VAR 0 5
66649: PPUSH
66650: CALL_OW 255
66654: PUSH
66655: LD_VAR 0 1
66659: EQUAL
66660: IFFALSE 66676
// begin result := un ;
66662: LD_ADDR_VAR 0 3
66666: PUSH
66667: LD_VAR 0 5
66671: ST_TO_ADDR
// exit ;
66672: POP
66673: POP
66674: GO 66680
// end ; end ;
66676: GO 66627
66678: POP
66679: POP
// end ;
66680: LD_VAR 0 3
66684: RET
// export function GetCargoBay ( units ) ; begin
66685: LD_INT 0
66687: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
66688: LD_ADDR_VAR 0 2
66692: PUSH
66693: LD_VAR 0 1
66697: PPUSH
66698: LD_INT 2
66700: PUSH
66701: LD_INT 34
66703: PUSH
66704: LD_INT 12
66706: PUSH
66707: EMPTY
66708: LIST
66709: LIST
66710: PUSH
66711: LD_INT 34
66713: PUSH
66714: LD_INT 51
66716: PUSH
66717: EMPTY
66718: LIST
66719: LIST
66720: PUSH
66721: LD_INT 34
66723: PUSH
66724: LD_INT 32
66726: PUSH
66727: EMPTY
66728: LIST
66729: LIST
66730: PUSH
66731: LD_INT 34
66733: PUSH
66734: LD_INT 89
66736: PUSH
66737: EMPTY
66738: LIST
66739: LIST
66740: PUSH
66741: EMPTY
66742: LIST
66743: LIST
66744: LIST
66745: LIST
66746: LIST
66747: PPUSH
66748: CALL_OW 72
66752: ST_TO_ADDR
// end ;
66753: LD_VAR 0 2
66757: RET
// export function Negate ( value ) ; begin
66758: LD_INT 0
66760: PPUSH
// result := not value ;
66761: LD_ADDR_VAR 0 2
66765: PUSH
66766: LD_VAR 0 1
66770: NOT
66771: ST_TO_ADDR
// end ;
66772: LD_VAR 0 2
66776: RET
// export function Inc ( value ) ; begin
66777: LD_INT 0
66779: PPUSH
// result := value + 1 ;
66780: LD_ADDR_VAR 0 2
66784: PUSH
66785: LD_VAR 0 1
66789: PUSH
66790: LD_INT 1
66792: PLUS
66793: ST_TO_ADDR
// end ;
66794: LD_VAR 0 2
66798: RET
// export function Dec ( value ) ; begin
66799: LD_INT 0
66801: PPUSH
// result := value - 1 ;
66802: LD_ADDR_VAR 0 2
66806: PUSH
66807: LD_VAR 0 1
66811: PUSH
66812: LD_INT 1
66814: MINUS
66815: ST_TO_ADDR
// end ;
66816: LD_VAR 0 2
66820: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
66821: LD_INT 0
66823: PPUSH
66824: PPUSH
66825: PPUSH
66826: PPUSH
66827: PPUSH
66828: PPUSH
66829: PPUSH
66830: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
66831: LD_VAR 0 1
66835: PPUSH
66836: LD_VAR 0 2
66840: PPUSH
66841: CALL_OW 488
66845: NOT
66846: PUSH
66847: LD_VAR 0 3
66851: PPUSH
66852: LD_VAR 0 4
66856: PPUSH
66857: CALL_OW 488
66861: NOT
66862: OR
66863: IFFALSE 66876
// begin result := - 1 ;
66865: LD_ADDR_VAR 0 5
66869: PUSH
66870: LD_INT 1
66872: NEG
66873: ST_TO_ADDR
// exit ;
66874: GO 67111
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
66876: LD_ADDR_VAR 0 12
66880: PUSH
66881: LD_VAR 0 1
66885: PPUSH
66886: LD_VAR 0 2
66890: PPUSH
66891: LD_VAR 0 3
66895: PPUSH
66896: LD_VAR 0 4
66900: PPUSH
66901: CALL 65961 0 4
66905: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
66906: LD_ADDR_VAR 0 11
66910: PUSH
66911: LD_VAR 0 1
66915: PPUSH
66916: LD_VAR 0 2
66920: PPUSH
66921: LD_VAR 0 12
66925: PUSH
66926: LD_INT 1
66928: ARRAY
66929: PPUSH
66930: LD_VAR 0 12
66934: PUSH
66935: LD_INT 2
66937: ARRAY
66938: PPUSH
66939: CALL_OW 298
66943: ST_TO_ADDR
// distance := 9999 ;
66944: LD_ADDR_VAR 0 10
66948: PUSH
66949: LD_INT 9999
66951: ST_TO_ADDR
// for i := 0 to 5 do
66952: LD_ADDR_VAR 0 6
66956: PUSH
66957: DOUBLE
66958: LD_INT 0
66960: DEC
66961: ST_TO_ADDR
66962: LD_INT 5
66964: PUSH
66965: FOR_TO
66966: IFFALSE 67109
// begin _x := ShiftX ( x1 , i , centerDist ) ;
66968: LD_ADDR_VAR 0 7
66972: PUSH
66973: LD_VAR 0 1
66977: PPUSH
66978: LD_VAR 0 6
66982: PPUSH
66983: LD_VAR 0 11
66987: PPUSH
66988: CALL_OW 272
66992: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
66993: LD_ADDR_VAR 0 8
66997: PUSH
66998: LD_VAR 0 2
67002: PPUSH
67003: LD_VAR 0 6
67007: PPUSH
67008: LD_VAR 0 11
67012: PPUSH
67013: CALL_OW 273
67017: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
67018: LD_VAR 0 7
67022: PPUSH
67023: LD_VAR 0 8
67027: PPUSH
67028: CALL_OW 488
67032: NOT
67033: IFFALSE 67037
// continue ;
67035: GO 66965
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
67037: LD_ADDR_VAR 0 9
67041: PUSH
67042: LD_VAR 0 12
67046: PUSH
67047: LD_INT 1
67049: ARRAY
67050: PPUSH
67051: LD_VAR 0 12
67055: PUSH
67056: LD_INT 2
67058: ARRAY
67059: PPUSH
67060: LD_VAR 0 7
67064: PPUSH
67065: LD_VAR 0 8
67069: PPUSH
67070: CALL_OW 298
67074: ST_TO_ADDR
// if tmp < distance then
67075: LD_VAR 0 9
67079: PUSH
67080: LD_VAR 0 10
67084: LESS
67085: IFFALSE 67107
// begin result := i ;
67087: LD_ADDR_VAR 0 5
67091: PUSH
67092: LD_VAR 0 6
67096: ST_TO_ADDR
// distance := tmp ;
67097: LD_ADDR_VAR 0 10
67101: PUSH
67102: LD_VAR 0 9
67106: ST_TO_ADDR
// end ; end ;
67107: GO 66965
67109: POP
67110: POP
// end ;
67111: LD_VAR 0 5
67115: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67116: LD_INT 0
67118: PPUSH
67119: PPUSH
// if not driver or not IsInUnit ( driver ) then
67120: LD_VAR 0 1
67124: NOT
67125: PUSH
67126: LD_VAR 0 1
67130: PPUSH
67131: CALL_OW 310
67135: NOT
67136: OR
67137: IFFALSE 67141
// exit ;
67139: GO 67231
// vehicle := IsInUnit ( driver ) ;
67141: LD_ADDR_VAR 0 3
67145: PUSH
67146: LD_VAR 0 1
67150: PPUSH
67151: CALL_OW 310
67155: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67156: LD_VAR 0 1
67160: PPUSH
67161: LD_STRING \
67163: PUSH
67164: LD_INT 0
67166: PUSH
67167: LD_INT 0
67169: PUSH
67170: LD_INT 0
67172: PUSH
67173: LD_INT 0
67175: PUSH
67176: LD_INT 0
67178: PUSH
67179: LD_INT 0
67181: PUSH
67182: EMPTY
67183: LIST
67184: LIST
67185: LIST
67186: LIST
67187: LIST
67188: LIST
67189: LIST
67190: PUSH
67191: LD_STRING E
67193: PUSH
67194: LD_INT 0
67196: PUSH
67197: LD_INT 0
67199: PUSH
67200: LD_VAR 0 3
67204: PUSH
67205: LD_INT 0
67207: PUSH
67208: LD_INT 0
67210: PUSH
67211: LD_INT 0
67213: PUSH
67214: EMPTY
67215: LIST
67216: LIST
67217: LIST
67218: LIST
67219: LIST
67220: LIST
67221: LIST
67222: PUSH
67223: EMPTY
67224: LIST
67225: LIST
67226: PPUSH
67227: CALL_OW 446
// end ;
67231: LD_VAR 0 2
67235: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67236: LD_INT 0
67238: PPUSH
67239: PPUSH
// if not driver or not IsInUnit ( driver ) then
67240: LD_VAR 0 1
67244: NOT
67245: PUSH
67246: LD_VAR 0 1
67250: PPUSH
67251: CALL_OW 310
67255: NOT
67256: OR
67257: IFFALSE 67261
// exit ;
67259: GO 67351
// vehicle := IsInUnit ( driver ) ;
67261: LD_ADDR_VAR 0 3
67265: PUSH
67266: LD_VAR 0 1
67270: PPUSH
67271: CALL_OW 310
67275: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67276: LD_VAR 0 1
67280: PPUSH
67281: LD_STRING \
67283: PUSH
67284: LD_INT 0
67286: PUSH
67287: LD_INT 0
67289: PUSH
67290: LD_INT 0
67292: PUSH
67293: LD_INT 0
67295: PUSH
67296: LD_INT 0
67298: PUSH
67299: LD_INT 0
67301: PUSH
67302: EMPTY
67303: LIST
67304: LIST
67305: LIST
67306: LIST
67307: LIST
67308: LIST
67309: LIST
67310: PUSH
67311: LD_STRING E
67313: PUSH
67314: LD_INT 0
67316: PUSH
67317: LD_INT 0
67319: PUSH
67320: LD_VAR 0 3
67324: PUSH
67325: LD_INT 0
67327: PUSH
67328: LD_INT 0
67330: PUSH
67331: LD_INT 0
67333: PUSH
67334: EMPTY
67335: LIST
67336: LIST
67337: LIST
67338: LIST
67339: LIST
67340: LIST
67341: LIST
67342: PUSH
67343: EMPTY
67344: LIST
67345: LIST
67346: PPUSH
67347: CALL_OW 447
// end ;
67351: LD_VAR 0 2
67355: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
67356: LD_INT 0
67358: PPUSH
67359: PPUSH
67360: PPUSH
// tmp := [ ] ;
67361: LD_ADDR_VAR 0 5
67365: PUSH
67366: EMPTY
67367: ST_TO_ADDR
// for i in units do
67368: LD_ADDR_VAR 0 4
67372: PUSH
67373: LD_VAR 0 1
67377: PUSH
67378: FOR_IN
67379: IFFALSE 67417
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
67381: LD_ADDR_VAR 0 5
67385: PUSH
67386: LD_VAR 0 5
67390: PPUSH
67391: LD_VAR 0 5
67395: PUSH
67396: LD_INT 1
67398: PLUS
67399: PPUSH
67400: LD_VAR 0 4
67404: PPUSH
67405: CALL_OW 256
67409: PPUSH
67410: CALL_OW 2
67414: ST_TO_ADDR
67415: GO 67378
67417: POP
67418: POP
// if not tmp then
67419: LD_VAR 0 5
67423: NOT
67424: IFFALSE 67428
// exit ;
67426: GO 67476
// if asc then
67428: LD_VAR 0 2
67432: IFFALSE 67456
// result := SortListByListAsc ( units , tmp ) else
67434: LD_ADDR_VAR 0 3
67438: PUSH
67439: LD_VAR 0 1
67443: PPUSH
67444: LD_VAR 0 5
67448: PPUSH
67449: CALL_OW 76
67453: ST_TO_ADDR
67454: GO 67476
// result := SortListByListDesc ( units , tmp ) ;
67456: LD_ADDR_VAR 0 3
67460: PUSH
67461: LD_VAR 0 1
67465: PPUSH
67466: LD_VAR 0 5
67470: PPUSH
67471: CALL_OW 77
67475: ST_TO_ADDR
// end ;
67476: LD_VAR 0 3
67480: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
67481: LD_INT 0
67483: PPUSH
67484: PPUSH
// task := GetTaskList ( mech ) ;
67485: LD_ADDR_VAR 0 4
67489: PUSH
67490: LD_VAR 0 1
67494: PPUSH
67495: CALL_OW 437
67499: ST_TO_ADDR
// if not task then
67500: LD_VAR 0 4
67504: NOT
67505: IFFALSE 67509
// exit ;
67507: GO 67551
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
67509: LD_ADDR_VAR 0 3
67513: PUSH
67514: LD_VAR 0 4
67518: PUSH
67519: LD_INT 1
67521: ARRAY
67522: PUSH
67523: LD_INT 1
67525: ARRAY
67526: PUSH
67527: LD_STRING r
67529: EQUAL
67530: PUSH
67531: LD_VAR 0 4
67535: PUSH
67536: LD_INT 1
67538: ARRAY
67539: PUSH
67540: LD_INT 4
67542: ARRAY
67543: PUSH
67544: LD_VAR 0 2
67548: EQUAL
67549: AND
67550: ST_TO_ADDR
// end ;
67551: LD_VAR 0 3
67555: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
67556: LD_INT 0
67558: PPUSH
// SetDir ( unit , d ) ;
67559: LD_VAR 0 1
67563: PPUSH
67564: LD_VAR 0 4
67568: PPUSH
67569: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
67573: LD_VAR 0 1
67577: PPUSH
67578: LD_VAR 0 2
67582: PPUSH
67583: LD_VAR 0 3
67587: PPUSH
67588: LD_VAR 0 5
67592: PPUSH
67593: CALL_OW 48
// end ;
67597: LD_VAR 0 6
67601: RET
// export function ToNaturalNumber ( number ) ; begin
67602: LD_INT 0
67604: PPUSH
// result := number div 1 ;
67605: LD_ADDR_VAR 0 2
67609: PUSH
67610: LD_VAR 0 1
67614: PUSH
67615: LD_INT 1
67617: DIV
67618: ST_TO_ADDR
// if number < 0 then
67619: LD_VAR 0 1
67623: PUSH
67624: LD_INT 0
67626: LESS
67627: IFFALSE 67637
// result := 0 ;
67629: LD_ADDR_VAR 0 2
67633: PUSH
67634: LD_INT 0
67636: ST_TO_ADDR
// end ;
67637: LD_VAR 0 2
67641: RET
// export function SortByClass ( units , class ) ; var un ; begin
67642: LD_INT 0
67644: PPUSH
67645: PPUSH
// if not units or not class then
67646: LD_VAR 0 1
67650: NOT
67651: PUSH
67652: LD_VAR 0 2
67656: NOT
67657: OR
67658: IFFALSE 67662
// exit ;
67660: GO 67757
// result := [ ] ;
67662: LD_ADDR_VAR 0 3
67666: PUSH
67667: EMPTY
67668: ST_TO_ADDR
// for un in units do
67669: LD_ADDR_VAR 0 4
67673: PUSH
67674: LD_VAR 0 1
67678: PUSH
67679: FOR_IN
67680: IFFALSE 67755
// if GetClass ( un ) = class then
67682: LD_VAR 0 4
67686: PPUSH
67687: CALL_OW 257
67691: PUSH
67692: LD_VAR 0 2
67696: EQUAL
67697: IFFALSE 67724
// result := Insert ( result , 1 , un ) else
67699: LD_ADDR_VAR 0 3
67703: PUSH
67704: LD_VAR 0 3
67708: PPUSH
67709: LD_INT 1
67711: PPUSH
67712: LD_VAR 0 4
67716: PPUSH
67717: CALL_OW 2
67721: ST_TO_ADDR
67722: GO 67753
// result := Replace ( result , result + 1 , un ) ;
67724: LD_ADDR_VAR 0 3
67728: PUSH
67729: LD_VAR 0 3
67733: PPUSH
67734: LD_VAR 0 3
67738: PUSH
67739: LD_INT 1
67741: PLUS
67742: PPUSH
67743: LD_VAR 0 4
67747: PPUSH
67748: CALL_OW 1
67752: ST_TO_ADDR
67753: GO 67679
67755: POP
67756: POP
// end ;
67757: LD_VAR 0 3
67761: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
67762: LD_INT 0
67764: PPUSH
67765: PPUSH
67766: PPUSH
67767: PPUSH
67768: PPUSH
67769: PPUSH
67770: PPUSH
// result := [ ] ;
67771: LD_ADDR_VAR 0 4
67775: PUSH
67776: EMPTY
67777: ST_TO_ADDR
// if x - r < 0 then
67778: LD_VAR 0 1
67782: PUSH
67783: LD_VAR 0 3
67787: MINUS
67788: PUSH
67789: LD_INT 0
67791: LESS
67792: IFFALSE 67804
// min_x := 0 else
67794: LD_ADDR_VAR 0 8
67798: PUSH
67799: LD_INT 0
67801: ST_TO_ADDR
67802: GO 67820
// min_x := x - r ;
67804: LD_ADDR_VAR 0 8
67808: PUSH
67809: LD_VAR 0 1
67813: PUSH
67814: LD_VAR 0 3
67818: MINUS
67819: ST_TO_ADDR
// if y - r < 0 then
67820: LD_VAR 0 2
67824: PUSH
67825: LD_VAR 0 3
67829: MINUS
67830: PUSH
67831: LD_INT 0
67833: LESS
67834: IFFALSE 67846
// min_y := 0 else
67836: LD_ADDR_VAR 0 7
67840: PUSH
67841: LD_INT 0
67843: ST_TO_ADDR
67844: GO 67862
// min_y := y - r ;
67846: LD_ADDR_VAR 0 7
67850: PUSH
67851: LD_VAR 0 2
67855: PUSH
67856: LD_VAR 0 3
67860: MINUS
67861: ST_TO_ADDR
// max_x := x + r ;
67862: LD_ADDR_VAR 0 9
67866: PUSH
67867: LD_VAR 0 1
67871: PUSH
67872: LD_VAR 0 3
67876: PLUS
67877: ST_TO_ADDR
// max_y := y + r ;
67878: LD_ADDR_VAR 0 10
67882: PUSH
67883: LD_VAR 0 2
67887: PUSH
67888: LD_VAR 0 3
67892: PLUS
67893: ST_TO_ADDR
// for _x = min_x to max_x do
67894: LD_ADDR_VAR 0 5
67898: PUSH
67899: DOUBLE
67900: LD_VAR 0 8
67904: DEC
67905: ST_TO_ADDR
67906: LD_VAR 0 9
67910: PUSH
67911: FOR_TO
67912: IFFALSE 68013
// for _y = min_y to max_y do
67914: LD_ADDR_VAR 0 6
67918: PUSH
67919: DOUBLE
67920: LD_VAR 0 7
67924: DEC
67925: ST_TO_ADDR
67926: LD_VAR 0 10
67930: PUSH
67931: FOR_TO
67932: IFFALSE 68009
// begin if not ValidHex ( _x , _y ) then
67934: LD_VAR 0 5
67938: PPUSH
67939: LD_VAR 0 6
67943: PPUSH
67944: CALL_OW 488
67948: NOT
67949: IFFALSE 67953
// continue ;
67951: GO 67931
// if GetResourceTypeXY ( _x , _y ) then
67953: LD_VAR 0 5
67957: PPUSH
67958: LD_VAR 0 6
67962: PPUSH
67963: CALL_OW 283
67967: IFFALSE 68007
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
67969: LD_ADDR_VAR 0 4
67973: PUSH
67974: LD_VAR 0 4
67978: PPUSH
67979: LD_VAR 0 4
67983: PUSH
67984: LD_INT 1
67986: PLUS
67987: PPUSH
67988: LD_VAR 0 5
67992: PUSH
67993: LD_VAR 0 6
67997: PUSH
67998: EMPTY
67999: LIST
68000: LIST
68001: PPUSH
68002: CALL_OW 1
68006: ST_TO_ADDR
// end ;
68007: GO 67931
68009: POP
68010: POP
68011: GO 67911
68013: POP
68014: POP
// end ;
68015: LD_VAR 0 4
68019: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
68020: LD_INT 0
68022: PPUSH
68023: PPUSH
68024: PPUSH
68025: PPUSH
68026: PPUSH
68027: PPUSH
68028: PPUSH
68029: PPUSH
// if not units then
68030: LD_VAR 0 1
68034: NOT
68035: IFFALSE 68039
// exit ;
68037: GO 68563
// result := UnitFilter ( units , [ f_ok ] ) ;
68039: LD_ADDR_VAR 0 3
68043: PUSH
68044: LD_VAR 0 1
68048: PPUSH
68049: LD_INT 50
68051: PUSH
68052: EMPTY
68053: LIST
68054: PPUSH
68055: CALL_OW 72
68059: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
68060: LD_ADDR_VAR 0 8
68064: PUSH
68065: LD_VAR 0 1
68069: PUSH
68070: LD_INT 1
68072: ARRAY
68073: PPUSH
68074: CALL_OW 255
68078: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
68079: LD_ADDR_VAR 0 10
68083: PUSH
68084: LD_INT 29
68086: PUSH
68087: LD_INT 91
68089: PUSH
68090: LD_INT 49
68092: PUSH
68093: EMPTY
68094: LIST
68095: LIST
68096: LIST
68097: ST_TO_ADDR
// if not result then
68098: LD_VAR 0 3
68102: NOT
68103: IFFALSE 68107
// exit ;
68105: GO 68563
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
68107: LD_ADDR_VAR 0 5
68111: PUSH
68112: LD_INT 81
68114: PUSH
68115: LD_VAR 0 8
68119: PUSH
68120: EMPTY
68121: LIST
68122: LIST
68123: PPUSH
68124: CALL_OW 69
68128: ST_TO_ADDR
// for i in result do
68129: LD_ADDR_VAR 0 4
68133: PUSH
68134: LD_VAR 0 3
68138: PUSH
68139: FOR_IN
68140: IFFALSE 68561
// begin tag := GetTag ( i ) + 1 ;
68142: LD_ADDR_VAR 0 9
68146: PUSH
68147: LD_VAR 0 4
68151: PPUSH
68152: CALL_OW 110
68156: PUSH
68157: LD_INT 1
68159: PLUS
68160: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
68161: LD_ADDR_VAR 0 7
68165: PUSH
68166: LD_VAR 0 4
68170: PPUSH
68171: CALL_OW 250
68175: PPUSH
68176: LD_VAR 0 4
68180: PPUSH
68181: CALL_OW 251
68185: PPUSH
68186: LD_INT 6
68188: PPUSH
68189: CALL 67762 0 3
68193: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
68194: LD_VAR 0 4
68198: PPUSH
68199: CALL_OW 247
68203: PUSH
68204: LD_INT 2
68206: EQUAL
68207: PUSH
68208: LD_VAR 0 7
68212: AND
68213: PUSH
68214: LD_VAR 0 4
68218: PPUSH
68219: CALL_OW 264
68223: PUSH
68224: LD_VAR 0 10
68228: IN
68229: NOT
68230: AND
68231: IFFALSE 68270
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
68233: LD_VAR 0 4
68237: PPUSH
68238: LD_VAR 0 7
68242: PUSH
68243: LD_INT 1
68245: ARRAY
68246: PUSH
68247: LD_INT 1
68249: ARRAY
68250: PPUSH
68251: LD_VAR 0 7
68255: PUSH
68256: LD_INT 1
68258: ARRAY
68259: PUSH
68260: LD_INT 2
68262: ARRAY
68263: PPUSH
68264: CALL_OW 116
68268: GO 68559
// if path > tag then
68270: LD_VAR 0 2
68274: PUSH
68275: LD_VAR 0 9
68279: GREATER
68280: IFFALSE 68488
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
68282: LD_ADDR_VAR 0 6
68286: PUSH
68287: LD_VAR 0 5
68291: PPUSH
68292: LD_INT 91
68294: PUSH
68295: LD_VAR 0 4
68299: PUSH
68300: LD_INT 8
68302: PUSH
68303: EMPTY
68304: LIST
68305: LIST
68306: LIST
68307: PPUSH
68308: CALL_OW 72
68312: ST_TO_ADDR
// if nearEnemy then
68313: LD_VAR 0 6
68317: IFFALSE 68386
// begin if GetWeapon ( i ) = ru_time_lapser then
68319: LD_VAR 0 4
68323: PPUSH
68324: CALL_OW 264
68328: PUSH
68329: LD_INT 49
68331: EQUAL
68332: IFFALSE 68360
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
68334: LD_VAR 0 4
68338: PPUSH
68339: LD_VAR 0 6
68343: PPUSH
68344: LD_VAR 0 4
68348: PPUSH
68349: CALL_OW 74
68353: PPUSH
68354: CALL_OW 112
68358: GO 68384
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
68360: LD_VAR 0 4
68364: PPUSH
68365: LD_VAR 0 6
68369: PPUSH
68370: LD_VAR 0 4
68374: PPUSH
68375: CALL_OW 74
68379: PPUSH
68380: CALL 69488 0 2
// end else
68384: GO 68486
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
68386: LD_VAR 0 4
68390: PPUSH
68391: LD_VAR 0 2
68395: PUSH
68396: LD_VAR 0 9
68400: ARRAY
68401: PUSH
68402: LD_INT 1
68404: ARRAY
68405: PPUSH
68406: LD_VAR 0 2
68410: PUSH
68411: LD_VAR 0 9
68415: ARRAY
68416: PUSH
68417: LD_INT 2
68419: ARRAY
68420: PPUSH
68421: CALL_OW 297
68425: PUSH
68426: LD_INT 6
68428: GREATER
68429: IFFALSE 68472
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
68431: LD_VAR 0 4
68435: PPUSH
68436: LD_VAR 0 2
68440: PUSH
68441: LD_VAR 0 9
68445: ARRAY
68446: PUSH
68447: LD_INT 1
68449: ARRAY
68450: PPUSH
68451: LD_VAR 0 2
68455: PUSH
68456: LD_VAR 0 9
68460: ARRAY
68461: PUSH
68462: LD_INT 2
68464: ARRAY
68465: PPUSH
68466: CALL_OW 114
68470: GO 68486
// SetTag ( i , tag ) ;
68472: LD_VAR 0 4
68476: PPUSH
68477: LD_VAR 0 9
68481: PPUSH
68482: CALL_OW 109
// end else
68486: GO 68559
// if enemy then
68488: LD_VAR 0 5
68492: IFFALSE 68559
// begin if GetWeapon ( i ) = ru_time_lapser then
68494: LD_VAR 0 4
68498: PPUSH
68499: CALL_OW 264
68503: PUSH
68504: LD_INT 49
68506: EQUAL
68507: IFFALSE 68535
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
68509: LD_VAR 0 4
68513: PPUSH
68514: LD_VAR 0 5
68518: PPUSH
68519: LD_VAR 0 4
68523: PPUSH
68524: CALL_OW 74
68528: PPUSH
68529: CALL_OW 112
68533: GO 68559
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
68535: LD_VAR 0 4
68539: PPUSH
68540: LD_VAR 0 5
68544: PPUSH
68545: LD_VAR 0 4
68549: PPUSH
68550: CALL_OW 74
68554: PPUSH
68555: CALL 69488 0 2
// end ; end ;
68559: GO 68139
68561: POP
68562: POP
// end ;
68563: LD_VAR 0 3
68567: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
68568: LD_INT 0
68570: PPUSH
68571: PPUSH
68572: PPUSH
// if not unit or IsInUnit ( unit ) then
68573: LD_VAR 0 1
68577: NOT
68578: PUSH
68579: LD_VAR 0 1
68583: PPUSH
68584: CALL_OW 310
68588: OR
68589: IFFALSE 68593
// exit ;
68591: GO 68684
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
68593: LD_ADDR_VAR 0 4
68597: PUSH
68598: LD_VAR 0 1
68602: PPUSH
68603: CALL_OW 250
68607: PPUSH
68608: LD_VAR 0 2
68612: PPUSH
68613: LD_INT 1
68615: PPUSH
68616: CALL_OW 272
68620: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
68621: LD_ADDR_VAR 0 5
68625: PUSH
68626: LD_VAR 0 1
68630: PPUSH
68631: CALL_OW 251
68635: PPUSH
68636: LD_VAR 0 2
68640: PPUSH
68641: LD_INT 1
68643: PPUSH
68644: CALL_OW 273
68648: ST_TO_ADDR
// if ValidHex ( x , y ) then
68649: LD_VAR 0 4
68653: PPUSH
68654: LD_VAR 0 5
68658: PPUSH
68659: CALL_OW 488
68663: IFFALSE 68684
// ComTurnXY ( unit , x , y ) ;
68665: LD_VAR 0 1
68669: PPUSH
68670: LD_VAR 0 4
68674: PPUSH
68675: LD_VAR 0 5
68679: PPUSH
68680: CALL_OW 118
// end ;
68684: LD_VAR 0 3
68688: RET
// export function SeeUnits ( side , units ) ; var i ; begin
68689: LD_INT 0
68691: PPUSH
68692: PPUSH
// result := false ;
68693: LD_ADDR_VAR 0 3
68697: PUSH
68698: LD_INT 0
68700: ST_TO_ADDR
// if not units then
68701: LD_VAR 0 2
68705: NOT
68706: IFFALSE 68710
// exit ;
68708: GO 68755
// for i in units do
68710: LD_ADDR_VAR 0 4
68714: PUSH
68715: LD_VAR 0 2
68719: PUSH
68720: FOR_IN
68721: IFFALSE 68753
// if See ( side , i ) then
68723: LD_VAR 0 1
68727: PPUSH
68728: LD_VAR 0 4
68732: PPUSH
68733: CALL_OW 292
68737: IFFALSE 68751
// begin result := true ;
68739: LD_ADDR_VAR 0 3
68743: PUSH
68744: LD_INT 1
68746: ST_TO_ADDR
// exit ;
68747: POP
68748: POP
68749: GO 68755
// end ;
68751: GO 68720
68753: POP
68754: POP
// end ;
68755: LD_VAR 0 3
68759: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
68760: LD_INT 0
68762: PPUSH
68763: PPUSH
68764: PPUSH
68765: PPUSH
// if not unit or not points then
68766: LD_VAR 0 1
68770: NOT
68771: PUSH
68772: LD_VAR 0 2
68776: NOT
68777: OR
68778: IFFALSE 68782
// exit ;
68780: GO 68872
// dist := 99999 ;
68782: LD_ADDR_VAR 0 5
68786: PUSH
68787: LD_INT 99999
68789: ST_TO_ADDR
// for i in points do
68790: LD_ADDR_VAR 0 4
68794: PUSH
68795: LD_VAR 0 2
68799: PUSH
68800: FOR_IN
68801: IFFALSE 68870
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
68803: LD_ADDR_VAR 0 6
68807: PUSH
68808: LD_VAR 0 1
68812: PPUSH
68813: LD_VAR 0 4
68817: PUSH
68818: LD_INT 1
68820: ARRAY
68821: PPUSH
68822: LD_VAR 0 4
68826: PUSH
68827: LD_INT 2
68829: ARRAY
68830: PPUSH
68831: CALL_OW 297
68835: ST_TO_ADDR
// if tmpDist < dist then
68836: LD_VAR 0 6
68840: PUSH
68841: LD_VAR 0 5
68845: LESS
68846: IFFALSE 68868
// begin result := i ;
68848: LD_ADDR_VAR 0 3
68852: PUSH
68853: LD_VAR 0 4
68857: ST_TO_ADDR
// dist := tmpDist ;
68858: LD_ADDR_VAR 0 5
68862: PUSH
68863: LD_VAR 0 6
68867: ST_TO_ADDR
// end ; end ;
68868: GO 68800
68870: POP
68871: POP
// end ;
68872: LD_VAR 0 3
68876: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
68877: LD_INT 0
68879: PPUSH
// uc_side := side ;
68880: LD_ADDR_OWVAR 20
68884: PUSH
68885: LD_VAR 0 1
68889: ST_TO_ADDR
// uc_nation := 3 ;
68890: LD_ADDR_OWVAR 21
68894: PUSH
68895: LD_INT 3
68897: ST_TO_ADDR
// vc_chassis := 25 ;
68898: LD_ADDR_OWVAR 37
68902: PUSH
68903: LD_INT 25
68905: ST_TO_ADDR
// vc_engine := engine_siberite ;
68906: LD_ADDR_OWVAR 39
68910: PUSH
68911: LD_INT 3
68913: ST_TO_ADDR
// vc_control := control_computer ;
68914: LD_ADDR_OWVAR 38
68918: PUSH
68919: LD_INT 3
68921: ST_TO_ADDR
// vc_weapon := 59 ;
68922: LD_ADDR_OWVAR 40
68926: PUSH
68927: LD_INT 59
68929: ST_TO_ADDR
// result := CreateVehicle ;
68930: LD_ADDR_VAR 0 5
68934: PUSH
68935: CALL_OW 45
68939: ST_TO_ADDR
// SetDir ( result , d ) ;
68940: LD_VAR 0 5
68944: PPUSH
68945: LD_VAR 0 4
68949: PPUSH
68950: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
68954: LD_VAR 0 5
68958: PPUSH
68959: LD_VAR 0 2
68963: PPUSH
68964: LD_VAR 0 3
68968: PPUSH
68969: LD_INT 0
68971: PPUSH
68972: CALL_OW 48
// end ;
68976: LD_VAR 0 5
68980: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
68981: LD_INT 0
68983: PPUSH
68984: PPUSH
68985: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
68986: LD_ADDR_VAR 0 2
68990: PUSH
68991: LD_INT 0
68993: PUSH
68994: LD_INT 0
68996: PUSH
68997: LD_INT 0
68999: PUSH
69000: LD_INT 0
69002: PUSH
69003: EMPTY
69004: LIST
69005: LIST
69006: LIST
69007: LIST
69008: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
69009: LD_VAR 0 1
69013: NOT
69014: PUSH
69015: LD_VAR 0 1
69019: PPUSH
69020: CALL_OW 264
69024: PUSH
69025: LD_INT 12
69027: PUSH
69028: LD_INT 51
69030: PUSH
69031: LD_INT 32
69033: PUSH
69034: LD_INT 89
69036: PUSH
69037: EMPTY
69038: LIST
69039: LIST
69040: LIST
69041: LIST
69042: IN
69043: NOT
69044: OR
69045: IFFALSE 69049
// exit ;
69047: GO 69147
// for i := 1 to 3 do
69049: LD_ADDR_VAR 0 3
69053: PUSH
69054: DOUBLE
69055: LD_INT 1
69057: DEC
69058: ST_TO_ADDR
69059: LD_INT 3
69061: PUSH
69062: FOR_TO
69063: IFFALSE 69145
// begin tmp := GetCargo ( cargo , i ) ;
69065: LD_ADDR_VAR 0 4
69069: PUSH
69070: LD_VAR 0 1
69074: PPUSH
69075: LD_VAR 0 3
69079: PPUSH
69080: CALL_OW 289
69084: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
69085: LD_ADDR_VAR 0 2
69089: PUSH
69090: LD_VAR 0 2
69094: PPUSH
69095: LD_VAR 0 3
69099: PPUSH
69100: LD_VAR 0 4
69104: PPUSH
69105: CALL_OW 1
69109: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
69110: LD_ADDR_VAR 0 2
69114: PUSH
69115: LD_VAR 0 2
69119: PPUSH
69120: LD_INT 4
69122: PPUSH
69123: LD_VAR 0 2
69127: PUSH
69128: LD_INT 4
69130: ARRAY
69131: PUSH
69132: LD_VAR 0 4
69136: PLUS
69137: PPUSH
69138: CALL_OW 1
69142: ST_TO_ADDR
// end ;
69143: GO 69062
69145: POP
69146: POP
// end ;
69147: LD_VAR 0 2
69151: RET
// export function Length ( array ) ; begin
69152: LD_INT 0
69154: PPUSH
// result := array + 0 ;
69155: LD_ADDR_VAR 0 2
69159: PUSH
69160: LD_VAR 0 1
69164: PUSH
69165: LD_INT 0
69167: PLUS
69168: ST_TO_ADDR
// end ;
69169: LD_VAR 0 2
69173: RET
// export function PrepareArray ( array ) ; begin
69174: LD_INT 0
69176: PPUSH
// result := array diff 0 ;
69177: LD_ADDR_VAR 0 2
69181: PUSH
69182: LD_VAR 0 1
69186: PUSH
69187: LD_INT 0
69189: DIFF
69190: ST_TO_ADDR
// if not result [ 1 ] then
69191: LD_VAR 0 2
69195: PUSH
69196: LD_INT 1
69198: ARRAY
69199: NOT
69200: IFFALSE 69220
// result := Delete ( result , 1 ) ;
69202: LD_ADDR_VAR 0 2
69206: PUSH
69207: LD_VAR 0 2
69211: PPUSH
69212: LD_INT 1
69214: PPUSH
69215: CALL_OW 3
69219: ST_TO_ADDR
// end ;
69220: LD_VAR 0 2
69224: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
69225: LD_INT 0
69227: PPUSH
69228: PPUSH
69229: PPUSH
69230: PPUSH
// sibRocketRange := 25 ;
69231: LD_ADDR_VAR 0 6
69235: PUSH
69236: LD_INT 25
69238: ST_TO_ADDR
// result := false ;
69239: LD_ADDR_VAR 0 4
69243: PUSH
69244: LD_INT 0
69246: ST_TO_ADDR
// for i := 0 to 5 do
69247: LD_ADDR_VAR 0 5
69251: PUSH
69252: DOUBLE
69253: LD_INT 0
69255: DEC
69256: ST_TO_ADDR
69257: LD_INT 5
69259: PUSH
69260: FOR_TO
69261: IFFALSE 69328
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
69263: LD_VAR 0 1
69267: PPUSH
69268: LD_VAR 0 5
69272: PPUSH
69273: LD_VAR 0 6
69277: PPUSH
69278: CALL_OW 272
69282: PPUSH
69283: LD_VAR 0 2
69287: PPUSH
69288: LD_VAR 0 5
69292: PPUSH
69293: LD_VAR 0 6
69297: PPUSH
69298: CALL_OW 273
69302: PPUSH
69303: LD_VAR 0 3
69307: PPUSH
69308: CALL_OW 309
69312: IFFALSE 69326
// begin result := true ;
69314: LD_ADDR_VAR 0 4
69318: PUSH
69319: LD_INT 1
69321: ST_TO_ADDR
// exit ;
69322: POP
69323: POP
69324: GO 69330
// end ;
69326: GO 69260
69328: POP
69329: POP
// end ;
69330: LD_VAR 0 4
69334: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
69335: LD_INT 0
69337: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
69338: LD_VAR 0 1
69342: PPUSH
69343: LD_VAR 0 2
69347: PPUSH
69348: LD_INT 0
69350: PPUSH
69351: LD_INT 0
69353: PPUSH
69354: LD_INT 1
69356: PPUSH
69357: LD_INT 0
69359: PPUSH
69360: CALL_OW 587
// end ;
69364: LD_VAR 0 3
69368: RET
// export function CenterOnNow ( unit ) ; begin
69369: LD_INT 0
69371: PPUSH
// result := IsInUnit ( unit ) ;
69372: LD_ADDR_VAR 0 2
69376: PUSH
69377: LD_VAR 0 1
69381: PPUSH
69382: CALL_OW 310
69386: ST_TO_ADDR
// if not result then
69387: LD_VAR 0 2
69391: NOT
69392: IFFALSE 69404
// result := unit ;
69394: LD_ADDR_VAR 0 2
69398: PUSH
69399: LD_VAR 0 1
69403: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
69404: LD_VAR 0 1
69408: PPUSH
69409: CALL_OW 87
// end ;
69413: LD_VAR 0 2
69417: RET
// export function ComMoveHex ( unit , hex ) ; begin
69418: LD_INT 0
69420: PPUSH
// if not hex then
69421: LD_VAR 0 2
69425: NOT
69426: IFFALSE 69430
// exit ;
69428: GO 69483
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
69430: LD_VAR 0 2
69434: PUSH
69435: LD_INT 1
69437: ARRAY
69438: PPUSH
69439: LD_VAR 0 2
69443: PUSH
69444: LD_INT 2
69446: ARRAY
69447: PPUSH
69448: CALL_OW 428
69452: IFFALSE 69456
// exit ;
69454: GO 69483
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
69456: LD_VAR 0 1
69460: PPUSH
69461: LD_VAR 0 2
69465: PUSH
69466: LD_INT 1
69468: ARRAY
69469: PPUSH
69470: LD_VAR 0 2
69474: PUSH
69475: LD_INT 2
69477: ARRAY
69478: PPUSH
69479: CALL_OW 111
// end ;
69483: LD_VAR 0 3
69487: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
69488: LD_INT 0
69490: PPUSH
69491: PPUSH
69492: PPUSH
// if not unit or not enemy then
69493: LD_VAR 0 1
69497: NOT
69498: PUSH
69499: LD_VAR 0 2
69503: NOT
69504: OR
69505: IFFALSE 69509
// exit ;
69507: GO 69633
// x := GetX ( enemy ) ;
69509: LD_ADDR_VAR 0 4
69513: PUSH
69514: LD_VAR 0 2
69518: PPUSH
69519: CALL_OW 250
69523: ST_TO_ADDR
// y := GetY ( enemy ) ;
69524: LD_ADDR_VAR 0 5
69528: PUSH
69529: LD_VAR 0 2
69533: PPUSH
69534: CALL_OW 251
69538: ST_TO_ADDR
// if ValidHex ( x , y ) then
69539: LD_VAR 0 4
69543: PPUSH
69544: LD_VAR 0 5
69548: PPUSH
69549: CALL_OW 488
69553: IFFALSE 69633
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
69555: LD_VAR 0 2
69559: PPUSH
69560: CALL_OW 247
69564: PUSH
69565: LD_INT 3
69567: PUSH
69568: LD_INT 2
69570: PUSH
69571: EMPTY
69572: LIST
69573: LIST
69574: IN
69575: PUSH
69576: LD_VAR 0 1
69580: PPUSH
69581: CALL_OW 255
69585: PPUSH
69586: LD_VAR 0 2
69590: PPUSH
69591: CALL_OW 292
69595: AND
69596: IFFALSE 69614
// ComAttackUnit ( unit , enemy ) else
69598: LD_VAR 0 1
69602: PPUSH
69603: LD_VAR 0 2
69607: PPUSH
69608: CALL_OW 115
69612: GO 69633
// ComAgressiveMove ( unit , x , y ) ;
69614: LD_VAR 0 1
69618: PPUSH
69619: LD_VAR 0 4
69623: PPUSH
69624: LD_VAR 0 5
69628: PPUSH
69629: CALL_OW 114
// end ;
69633: LD_VAR 0 3
69637: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
69638: LD_INT 0
69640: PPUSH
69641: PPUSH
69642: PPUSH
// list := AreaToList ( area , 0 ) ;
69643: LD_ADDR_VAR 0 5
69647: PUSH
69648: LD_VAR 0 1
69652: PPUSH
69653: LD_INT 0
69655: PPUSH
69656: CALL_OW 517
69660: ST_TO_ADDR
// if not list then
69661: LD_VAR 0 5
69665: NOT
69666: IFFALSE 69670
// exit ;
69668: GO 69800
// if all then
69670: LD_VAR 0 2
69674: IFFALSE 69762
// begin for i := 1 to list [ 1 ] do
69676: LD_ADDR_VAR 0 4
69680: PUSH
69681: DOUBLE
69682: LD_INT 1
69684: DEC
69685: ST_TO_ADDR
69686: LD_VAR 0 5
69690: PUSH
69691: LD_INT 1
69693: ARRAY
69694: PUSH
69695: FOR_TO
69696: IFFALSE 69758
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
69698: LD_ADDR_VAR 0 3
69702: PUSH
69703: LD_VAR 0 3
69707: PPUSH
69708: LD_VAR 0 3
69712: PUSH
69713: LD_INT 1
69715: PLUS
69716: PPUSH
69717: LD_VAR 0 5
69721: PUSH
69722: LD_INT 1
69724: ARRAY
69725: PUSH
69726: LD_VAR 0 4
69730: ARRAY
69731: PUSH
69732: LD_VAR 0 5
69736: PUSH
69737: LD_INT 2
69739: ARRAY
69740: PUSH
69741: LD_VAR 0 4
69745: ARRAY
69746: PUSH
69747: EMPTY
69748: LIST
69749: LIST
69750: PPUSH
69751: CALL_OW 1
69755: ST_TO_ADDR
69756: GO 69695
69758: POP
69759: POP
// exit ;
69760: GO 69800
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
69762: LD_ADDR_VAR 0 3
69766: PUSH
69767: LD_VAR 0 5
69771: PUSH
69772: LD_INT 1
69774: ARRAY
69775: PUSH
69776: LD_INT 1
69778: ARRAY
69779: PUSH
69780: LD_VAR 0 5
69784: PUSH
69785: LD_INT 2
69787: ARRAY
69788: PUSH
69789: LD_INT 1
69791: ARRAY
69792: PUSH
69793: EMPTY
69794: LIST
69795: LIST
69796: PUSH
69797: EMPTY
69798: LIST
69799: ST_TO_ADDR
// end ;
69800: LD_VAR 0 3
69804: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
69805: LD_INT 0
69807: PPUSH
69808: PPUSH
// list := AreaToList ( area , 0 ) ;
69809: LD_ADDR_VAR 0 4
69813: PUSH
69814: LD_VAR 0 1
69818: PPUSH
69819: LD_INT 0
69821: PPUSH
69822: CALL_OW 517
69826: ST_TO_ADDR
// if not list then
69827: LD_VAR 0 4
69831: NOT
69832: IFFALSE 69836
// exit ;
69834: GO 69877
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
69836: LD_ADDR_VAR 0 3
69840: PUSH
69841: LD_VAR 0 4
69845: PUSH
69846: LD_INT 1
69848: ARRAY
69849: PUSH
69850: LD_INT 1
69852: ARRAY
69853: PUSH
69854: LD_VAR 0 4
69858: PUSH
69859: LD_INT 2
69861: ARRAY
69862: PUSH
69863: LD_INT 1
69865: ARRAY
69866: PUSH
69867: LD_VAR 0 2
69871: PUSH
69872: EMPTY
69873: LIST
69874: LIST
69875: LIST
69876: ST_TO_ADDR
// end ;
69877: LD_VAR 0 3
69881: RET
// export function First ( array ) ; begin
69882: LD_INT 0
69884: PPUSH
// if not array then
69885: LD_VAR 0 1
69889: NOT
69890: IFFALSE 69894
// exit ;
69892: GO 69908
// result := array [ 1 ] ;
69894: LD_ADDR_VAR 0 2
69898: PUSH
69899: LD_VAR 0 1
69903: PUSH
69904: LD_INT 1
69906: ARRAY
69907: ST_TO_ADDR
// end ;
69908: LD_VAR 0 2
69912: RET
// export function Last ( array ) ; begin
69913: LD_INT 0
69915: PPUSH
// if not array then
69916: LD_VAR 0 1
69920: NOT
69921: IFFALSE 69925
// exit ;
69923: GO 69941
// result := array [ array ] ;
69925: LD_ADDR_VAR 0 2
69929: PUSH
69930: LD_VAR 0 1
69934: PUSH
69935: LD_VAR 0 1
69939: ARRAY
69940: ST_TO_ADDR
// end ; end_of_file
69941: LD_VAR 0 2
69945: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
69946: LD_VAR 0 1
69950: PUSH
69951: LD_INT 200
69953: DOUBLE
69954: GREATEREQUAL
69955: IFFALSE 69963
69957: LD_INT 299
69959: DOUBLE
69960: LESSEQUAL
69961: IFTRUE 69965
69963: GO 69997
69965: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
69966: LD_VAR 0 1
69970: PPUSH
69971: LD_VAR 0 2
69975: PPUSH
69976: LD_VAR 0 3
69980: PPUSH
69981: LD_VAR 0 4
69985: PPUSH
69986: LD_VAR 0 5
69990: PPUSH
69991: CALL 23196 0 5
69995: GO 70074
69997: LD_INT 300
69999: DOUBLE
70000: GREATEREQUAL
70001: IFFALSE 70009
70003: LD_INT 399
70005: DOUBLE
70006: LESSEQUAL
70007: IFTRUE 70011
70009: GO 70073
70011: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
70012: LD_VAR 0 1
70016: PPUSH
70017: LD_VAR 0 2
70021: PPUSH
70022: LD_VAR 0 3
70026: PPUSH
70027: LD_VAR 0 4
70031: PPUSH
70032: LD_VAR 0 5
70036: PPUSH
70037: LD_VAR 0 6
70041: PPUSH
70042: LD_VAR 0 7
70046: PPUSH
70047: LD_VAR 0 8
70051: PPUSH
70052: LD_VAR 0 9
70056: PPUSH
70057: LD_VAR 0 10
70061: PPUSH
70062: LD_VAR 0 11
70066: PPUSH
70067: CALL 19521 0 11
70071: GO 70074
70073: POP
// end ;
70074: PPOPN 11
70076: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
70077: LD_VAR 0 1
70081: PPUSH
70082: LD_VAR 0 2
70086: PPUSH
70087: LD_VAR 0 3
70091: PPUSH
70092: LD_VAR 0 4
70096: PPUSH
70097: LD_VAR 0 5
70101: PPUSH
70102: CALL 22932 0 5
// end ; end_of_file
70106: PPOPN 5
70108: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
70109: LD_VAR 0 1
70113: PPUSH
70114: LD_VAR 0 2
70118: PPUSH
70119: LD_VAR 0 3
70123: PPUSH
70124: LD_VAR 0 4
70128: PPUSH
70129: LD_VAR 0 5
70133: PPUSH
70134: LD_VAR 0 6
70138: PPUSH
70139: CALL 7173 0 6
// end ;
70143: PPOPN 6
70145: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
70146: LD_INT 0
70148: PPUSH
// begin if not units then
70149: LD_VAR 0 1
70153: NOT
70154: IFFALSE 70158
// exit ;
70156: GO 70158
// end ;
70158: PPOPN 7
70160: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
70161: CALL 7077 0 0
// end ;
70165: PPOPN 1
70167: END
