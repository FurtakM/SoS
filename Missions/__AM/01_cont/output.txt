// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 32 0 0
// InitAmerican ;
  15: CALL 866 0 0
// InitRussian ;
  19: CALL 1137 0 0
// DebugMode ;
  23: CALL 160 0 0
// Action ;
  27: CALL 2700 0 0
// end ;
  31: END
// export debug ; export mission_prefix ; export active_russian_dialog , bobby_in_squad , powell_contact , macmilan_use_radio , cyrus_in_squad , active_road_patrol , macmilan_in_trap , meta_action , end_mission , bobby_saved , cyrus_saved , send_troops_to_forest , active_powell_dialog ; function Init ; begin
  32: LD_INT 0
  34: PPUSH
// mission_prefix := 01_ ;
  35: LD_ADDR_EXP 2
  39: PUSH
  40: LD_STRING 01_
  42: ST_TO_ADDR
// debug := false ;
  43: LD_ADDR_EXP 1
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// active_russian_dialog := false ;
  51: LD_ADDR_EXP 3
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// bobby_in_squad := false ;
  59: LD_ADDR_EXP 4
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// cyrus_in_squad := false ;
  67: LD_ADDR_EXP 7
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// powell_contact := false ;
  75: LD_ADDR_EXP 5
  79: PUSH
  80: LD_INT 0
  82: ST_TO_ADDR
// macmilan_use_radio := false ;
  83: LD_ADDR_EXP 6
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// active_road_patrol := false ;
  91: LD_ADDR_EXP 8
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// macmilan_in_trap := false ;
  99: LD_ADDR_EXP 9
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// meta_action := false ;
 107: LD_ADDR_EXP 10
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// end_mission := false ;
 115: LD_ADDR_EXP 11
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// bobby_saved := false ;
 123: LD_ADDR_EXP 12
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// cyrus_saved := false ;
 131: LD_ADDR_EXP 13
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// send_troops_to_forest := false ;
 139: LD_ADDR_EXP 14
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// active_powell_dialog := false ;
 147: LD_ADDR_EXP 15
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// end ;
 155: LD_VAR 0 1
 159: RET
// function DebugMode ; var i ; begin
 160: LD_INT 0
 162: PPUSH
 163: PPUSH
// if not debug then
 164: LD_EXP 1
 168: NOT
 169: IFFALSE 173
// exit ;
 171: GO 192
// Difficulty := 3 ;
 173: LD_ADDR_OWVAR 67
 177: PUSH
 178: LD_INT 3
 180: ST_TO_ADDR
// TurnFogOff ( ) ;
 181: CALL_OW 537
// FogOff ( 1 ) ;
 185: LD_INT 1
 187: PPUSH
 188: CALL_OW 344
// end ; end_of_file
 192: LD_VAR 0 1
 196: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 197: LD_INT 0
 199: PPUSH
 200: PPUSH
 201: PPUSH
// uc_side := GetSide ( b ) ;
 202: LD_ADDR_OWVAR 20
 206: PUSH
 207: LD_VAR 0 2
 211: PPUSH
 212: CALL_OW 255
 216: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 217: LD_ADDR_OWVAR 21
 221: PUSH
 222: LD_VAR 0 2
 226: PPUSH
 227: CALL_OW 248
 231: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 232: LD_INT 0
 234: PPUSH
 235: LD_INT 1
 237: PPUSH
 238: LD_VAR 0 1
 242: PPUSH
 243: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
 247: LD_ADDR_VAR 0 5
 251: PUSH
 252: LD_VAR 0 2
 256: PPUSH
 257: CALL_OW 254
 261: PUSH
 262: LD_INT 3
 264: MINUS
 265: ST_TO_ADDR
// if dir < 0 then
 266: LD_VAR 0 5
 270: PUSH
 271: LD_INT 0
 273: LESS
 274: IFFALSE 290
// dir := 6 + dir ;
 276: LD_ADDR_VAR 0 5
 280: PUSH
 281: LD_INT 6
 283: PUSH
 284: LD_VAR 0 5
 288: PLUS
 289: ST_TO_ADDR
// un := CreateHuman ;
 290: LD_ADDR_VAR 0 4
 294: PUSH
 295: CALL_OW 44
 299: ST_TO_ADDR
// SetDir ( un , dir ) ;
 300: LD_VAR 0 4
 304: PPUSH
 305: LD_VAR 0 5
 309: PPUSH
 310: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 314: LD_VAR 0 4
 318: PPUSH
 319: LD_VAR 0 2
 323: PPUSH
 324: CALL_OW 52
// end ;
 328: LD_VAR 0 3
 332: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 333: LD_INT 0
 335: PPUSH
// uc_side := side ;
 336: LD_ADDR_OWVAR 20
 340: PUSH
 341: LD_VAR 0 1
 345: ST_TO_ADDR
// uc_nation := nation ;
 346: LD_ADDR_OWVAR 21
 350: PUSH
 351: LD_VAR 0 2
 355: ST_TO_ADDR
// vc_chassis := chassis ;
 356: LD_ADDR_OWVAR 37
 360: PUSH
 361: LD_VAR 0 3
 365: ST_TO_ADDR
// vc_engine := engine ;
 366: LD_ADDR_OWVAR 39
 370: PUSH
 371: LD_VAR 0 4
 375: ST_TO_ADDR
// vc_control := control ;
 376: LD_ADDR_OWVAR 38
 380: PUSH
 381: LD_VAR 0 5
 385: ST_TO_ADDR
// vc_weapon := weapon ;
 386: LD_ADDR_OWVAR 40
 390: PUSH
 391: LD_VAR 0 6
 395: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 396: LD_ADDR_OWVAR 41
 400: PUSH
 401: LD_VAR 0 7
 405: ST_TO_ADDR
// result := CreateVehicle ;
 406: LD_ADDR_VAR 0 8
 410: PUSH
 411: CALL_OW 45
 415: ST_TO_ADDR
// end ;
 416: LD_VAR 0 8
 420: RET
// export function ComPatrol ( unit , mode , pause , coords ) ; var i ; begin
 421: LD_INT 0
 423: PPUSH
 424: PPUSH
// while ( active_road_patrol ) do
 425: LD_EXP 8
 429: IFFALSE 783
// begin Wait ( 0 0$01 ) ;
 431: LD_INT 35
 433: PPUSH
 434: CALL_OW 67
// if not unit then
 438: LD_VAR 0 1
 442: NOT
 443: IFFALSE 447
// exit ;
 445: GO 783
// if mode = road then
 447: LD_VAR 0 2
 451: PUSH
 452: LD_STRING road
 454: EQUAL
 455: IFFALSE 511
// if GetFuel ( unit ) < 50 and not See ( 1 , unit ) and not HasTask ( unit ) then
 457: LD_VAR 0 1
 461: PPUSH
 462: CALL_OW 261
 466: PUSH
 467: LD_INT 50
 469: LESS
 470: PUSH
 471: LD_INT 1
 473: PPUSH
 474: LD_VAR 0 1
 478: PPUSH
 479: CALL_OW 292
 483: NOT
 484: AND
 485: PUSH
 486: LD_VAR 0 1
 490: PPUSH
 491: CALL_OW 314
 495: NOT
 496: AND
 497: IFFALSE 511
// SetFuel ( unit , 100 ) ;
 499: LD_VAR 0 1
 503: PPUSH
 504: LD_INT 100
 506: PPUSH
 507: CALL_OW 240
// if mode = forest then
 511: LD_VAR 0 2
 515: PUSH
 516: LD_STRING forest
 518: EQUAL
 519: IFFALSE 599
// if GetLives ( unit ) < 600 then
 521: LD_VAR 0 1
 525: PPUSH
 526: CALL_OW 256
 530: PUSH
 531: LD_INT 600
 533: LESS
 534: IFFALSE 599
// begin ComMoveXY ( unit , 42 , 3 ) ;
 536: LD_VAR 0 1
 540: PPUSH
 541: LD_INT 42
 543: PPUSH
 544: LD_INT 3
 546: PPUSH
 547: CALL_OW 111
// SetRememberedX ( unit , GetX ( unit ) ) ;
 551: LD_VAR 0 1
 555: PPUSH
 556: LD_VAR 0 1
 560: PPUSH
 561: CALL_OW 250
 565: PPUSH
 566: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
 570: LD_VAR 0 1
 574: PPUSH
 575: LD_VAR 0 1
 579: PPUSH
 580: CALL_OW 251
 584: PPUSH
 585: CALL_OW 232
// send_troops_to_forest := true ;
 589: LD_ADDR_EXP 14
 593: PUSH
 594: LD_INT 1
 596: ST_TO_ADDR
// break ;
 597: GO 783
// end ; if not HasTask ( unit ) then
 599: LD_VAR 0 1
 603: PPUSH
 604: CALL_OW 314
 608: NOT
 609: IFFALSE 781
// begin for i = 1 to coords do
 611: LD_ADDR_VAR 0 6
 615: PUSH
 616: DOUBLE
 617: LD_INT 1
 619: DEC
 620: ST_TO_ADDR
 621: LD_VAR 0 4
 625: PUSH
 626: FOR_TO
 627: IFFALSE 694
// begin AddComAgressiveMove ( unit , coords [ i ] , coords [ i + 1 ] ) ;
 629: LD_VAR 0 1
 633: PPUSH
 634: LD_VAR 0 4
 638: PUSH
 639: LD_VAR 0 6
 643: ARRAY
 644: PPUSH
 645: LD_VAR 0 4
 649: PUSH
 650: LD_VAR 0 6
 654: PUSH
 655: LD_INT 1
 657: PLUS
 658: ARRAY
 659: PPUSH
 660: CALL_OW 174
// AddComWait ( unit , pause ) ;
 664: LD_VAR 0 1
 668: PPUSH
 669: LD_VAR 0 3
 673: PPUSH
 674: CALL_OW 202
// i := i + 1 ;
 678: LD_ADDR_VAR 0 6
 682: PUSH
 683: LD_VAR 0 6
 687: PUSH
 688: LD_INT 1
 690: PLUS
 691: ST_TO_ADDR
// end ;
 692: GO 626
 694: POP
 695: POP
// for i = coords downto 1 do
 696: LD_ADDR_VAR 0 6
 700: PUSH
 701: DOUBLE
 702: LD_VAR 0 4
 706: INC
 707: ST_TO_ADDR
 708: LD_INT 1
 710: PUSH
 711: FOR_DOWNTO
 712: IFFALSE 779
// begin AddComAgressiveMove ( unit , coords [ i - 1 ] , coords [ i ] ) ;
 714: LD_VAR 0 1
 718: PPUSH
 719: LD_VAR 0 4
 723: PUSH
 724: LD_VAR 0 6
 728: PUSH
 729: LD_INT 1
 731: MINUS
 732: ARRAY
 733: PPUSH
 734: LD_VAR 0 4
 738: PUSH
 739: LD_VAR 0 6
 743: ARRAY
 744: PPUSH
 745: CALL_OW 174
// AddComWait ( unit , pause ) ;
 749: LD_VAR 0 1
 753: PPUSH
 754: LD_VAR 0 3
 758: PPUSH
 759: CALL_OW 202
// i := i - 1 ;
 763: LD_ADDR_VAR 0 6
 767: PUSH
 768: LD_VAR 0 6
 772: PUSH
 773: LD_INT 1
 775: MINUS
 776: ST_TO_ADDR
// end ;
 777: GO 711
 779: POP
 780: POP
// end ; end ;
 781: GO 425
// end ;
 783: LD_VAR 0 5
 787: RET
// export function DebugSay ( dialog ) ; var speaker ; begin
 788: LD_INT 0
 790: PPUSH
 791: PPUSH
// uc_nation := 1 ;
 792: LD_ADDR_OWVAR 21
 796: PUSH
 797: LD_INT 1
 799: ST_TO_ADDR
// uc_side := 0 ;
 800: LD_ADDR_OWVAR 20
 804: PUSH
 805: LD_INT 0
 807: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
 808: LD_INT 0
 810: PPUSH
 811: LD_INT 1
 813: PPUSH
 814: LD_INT 0
 816: PPUSH
 817: CALL_OW 380
// hc_name := speaker ;
 821: LD_ADDR_OWVAR 26
 825: PUSH
 826: LD_STRING speaker
 828: ST_TO_ADDR
// hc_gallery :=  ;
 829: LD_ADDR_OWVAR 33
 833: PUSH
 834: LD_STRING 
 836: ST_TO_ADDR
// speaker := CreateHuman ;
 837: LD_ADDR_VAR 0 3
 841: PUSH
 842: CALL_OW 44
 846: ST_TO_ADDR
// Say ( speaker , dialog ) ;
 847: LD_VAR 0 3
 851: PPUSH
 852: LD_VAR 0 1
 856: PPUSH
 857: CALL_OW 88
// end ; end_of_file
 861: LD_VAR 0 2
 865: RET
// export JMM , Bobby , Cyrus , Powell , fakePokryshkin ; export function InitAmerican ; begin
 866: LD_INT 0
 868: PPUSH
// uc_nation := 1 ;
 869: LD_ADDR_OWVAR 21
 873: PUSH
 874: LD_INT 1
 876: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , false ,  ) ;
 877: LD_ADDR_EXP 16
 881: PUSH
 882: LD_STRING JMM
 884: PPUSH
 885: LD_INT 0
 887: PPUSH
 888: LD_STRING 
 890: PPUSH
 891: CALL 26421 0 3
 895: ST_TO_ADDR
// uc_side := 4 ;
 896: LD_ADDR_OWVAR 20
 900: PUSH
 901: LD_INT 4
 903: ST_TO_ADDR
// hc_gallery := us ;
 904: LD_ADDR_OWVAR 33
 908: PUSH
 909: LD_STRING us
 911: ST_TO_ADDR
// hc_face_number := 7 ;
 912: LD_ADDR_OWVAR 34
 916: PUSH
 917: LD_INT 7
 919: ST_TO_ADDR
// hc_sex := sex_male ;
 920: LD_ADDR_OWVAR 27
 924: PUSH
 925: LD_INT 1
 927: ST_TO_ADDR
// hc_name := . ;
 928: LD_ADDR_OWVAR 26
 932: PUSH
 933: LD_STRING .
 935: ST_TO_ADDR
// hc_class := 1 ;
 936: LD_ADDR_OWVAR 28
 940: PUSH
 941: LD_INT 1
 943: ST_TO_ADDR
// Powell := CreateHuman ;
 944: LD_ADDR_EXP 19
 948: PUSH
 949: CALL_OW 44
 953: ST_TO_ADDR
// hc_name := . ;
 954: LD_ADDR_OWVAR 26
 958: PUSH
 959: LD_STRING .
 961: ST_TO_ADDR
// hc_gallery := ru ;
 962: LD_ADDR_OWVAR 33
 966: PUSH
 967: LD_STRING ru
 969: ST_TO_ADDR
// hc_face_number := 4 ;
 970: LD_ADDR_OWVAR 34
 974: PUSH
 975: LD_INT 4
 977: ST_TO_ADDR
// hc_sex := sex_male ;
 978: LD_ADDR_OWVAR 27
 982: PUSH
 983: LD_INT 1
 985: ST_TO_ADDR
// fakePokryshkin := CreateHuman ;
 986: LD_ADDR_EXP 20
 990: PUSH
 991: CALL_OW 44
 995: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , false ,  ) ;
 996: LD_ADDR_EXP 17
1000: PUSH
1001: LD_STRING Bobby
1003: PPUSH
1004: LD_INT 0
1006: PPUSH
1007: LD_STRING 
1009: PPUSH
1010: CALL 26421 0 3
1014: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , false ,  ) ;
1015: LD_ADDR_EXP 18
1019: PUSH
1020: LD_STRING Cyrus
1022: PPUSH
1023: LD_INT 0
1025: PPUSH
1026: LD_STRING 
1028: PPUSH
1029: CALL 26421 0 3
1033: ST_TO_ADDR
// case Difficulty of 1 :
1034: LD_OWVAR 67
1038: PUSH
1039: LD_INT 1
1041: DOUBLE
1042: EQUAL
1043: IFTRUE 1047
1045: GO 1062
1047: POP
// SetLives ( Bobby , 500 ) ; 2 :
1048: LD_EXP 17
1052: PPUSH
1053: LD_INT 500
1055: PPUSH
1056: CALL_OW 234
1060: GO 1132
1062: LD_INT 2
1064: DOUBLE
1065: EQUAL
1066: IFTRUE 1070
1068: GO 1085
1070: POP
// SetLives ( Bobby , 460 ) ; 3 :
1071: LD_EXP 17
1075: PPUSH
1076: LD_INT 460
1078: PPUSH
1079: CALL_OW 234
1083: GO 1132
1085: LD_INT 3
1087: DOUBLE
1088: EQUAL
1089: IFTRUE 1093
1091: GO 1108
1093: POP
// SetLives ( Bobby , 420 ) ; 4 :
1094: LD_EXP 17
1098: PPUSH
1099: LD_INT 420
1101: PPUSH
1102: CALL_OW 234
1106: GO 1132
1108: LD_INT 4
1110: DOUBLE
1111: EQUAL
1112: IFTRUE 1116
1114: GO 1131
1116: POP
// SetLives ( Bobby , 400 ) ; end ;
1117: LD_EXP 17
1121: PPUSH
1122: LD_INT 400
1124: PPUSH
1125: CALL_OW 234
1129: GO 1132
1131: POP
// end ; end_of_file
1132: LD_VAR 0 1
1136: RET
// export russian_troops_1 , russian_troops_2 , russian_patrol_tanks , russian_meta_guards , russian_patrol_forest ; export Pokryshkin ; export function InitRussian ; var skill , i , un ; begin
1137: LD_INT 0
1139: PPUSH
1140: PPUSH
1141: PPUSH
1142: PPUSH
// skill := [ 1 , 2 , 3 , 3 ] [ Difficulty ] ;
1143: LD_ADDR_VAR 0 2
1147: PUSH
1148: LD_INT 1
1150: PUSH
1151: LD_INT 2
1153: PUSH
1154: LD_INT 3
1156: PUSH
1157: LD_INT 3
1159: PUSH
1160: EMPTY
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: PUSH
1166: LD_OWVAR 67
1170: ARRAY
1171: ST_TO_ADDR
// uc_side := 3 ;
1172: LD_ADDR_OWVAR 20
1176: PUSH
1177: LD_INT 3
1179: ST_TO_ADDR
// uc_nation := 3 ;
1180: LD_ADDR_OWVAR 21
1184: PUSH
1185: LD_INT 3
1187: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
1188: LD_ADDR_EXP 26
1192: PUSH
1193: LD_STRING Pokryshkin
1195: PPUSH
1196: LD_INT 0
1198: PPUSH
1199: LD_STRING 
1201: PPUSH
1202: CALL 26421 0 3
1206: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 44 , 5 , false ) ;
1207: LD_EXP 26
1211: PPUSH
1212: LD_INT 44
1214: PPUSH
1215: LD_INT 5
1217: PPUSH
1218: LD_INT 0
1220: PPUSH
1221: CALL_OW 48
// hc_importance := 0 ;
1225: LD_ADDR_OWVAR 32
1229: PUSH
1230: LD_INT 0
1232: ST_TO_ADDR
// hc_gallery :=  ;
1233: LD_ADDR_OWVAR 33
1237: PUSH
1238: LD_STRING 
1240: ST_TO_ADDR
// hc_name :=  ;
1241: LD_ADDR_OWVAR 26
1245: PUSH
1246: LD_STRING 
1248: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1249: LD_INT 1
1251: PPUSH
1252: LD_INT 1
1254: PPUSH
1255: LD_VAR 0 2
1259: PPUSH
1260: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1264: LD_ADDR_OWVAR 33
1268: PUSH
1269: LD_STRING SecondCharsGal
1271: ST_TO_ADDR
// hc_face_number := 69 ;
1272: LD_ADDR_OWVAR 34
1276: PUSH
1277: LD_INT 69
1279: ST_TO_ADDR
// hc_sex := sex_male ;
1280: LD_ADDR_OWVAR 27
1284: PUSH
1285: LD_INT 1
1287: ST_TO_ADDR
// hc_name := Ilja Ivanov ;
1288: LD_ADDR_OWVAR 26
1292: PUSH
1293: LD_STRING Ilja Ivanov
1295: ST_TO_ADDR
// un := CreateHuman ;
1296: LD_ADDR_VAR 0 4
1300: PUSH
1301: CALL_OW 44
1305: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 1 , un ) ;
1306: LD_ADDR_EXP 21
1310: PUSH
1311: LD_EXP 21
1315: PPUSH
1316: LD_INT 1
1318: PPUSH
1319: LD_VAR 0 4
1323: PPUSH
1324: CALL_OW 2
1328: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1329: LD_VAR 0 4
1333: PPUSH
1334: LD_INT 3
1336: PPUSH
1337: LD_INT 0
1339: PPUSH
1340: CALL_OW 49
// PrepareHuman ( sex_male , 1 , skill ) ;
1344: LD_INT 1
1346: PPUSH
1347: LD_INT 1
1349: PPUSH
1350: LD_VAR 0 2
1354: PPUSH
1355: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1359: LD_ADDR_OWVAR 33
1363: PUSH
1364: LD_STRING SecondCharsGal
1366: ST_TO_ADDR
// hc_face_number := 70 ;
1367: LD_ADDR_OWVAR 34
1371: PUSH
1372: LD_INT 70
1374: ST_TO_ADDR
// hc_name := Pavel Starczy ;
1375: LD_ADDR_OWVAR 26
1379: PUSH
1380: LD_STRING Pavel Starczy
1382: ST_TO_ADDR
// un := CreateHuman ;
1383: LD_ADDR_VAR 0 4
1387: PUSH
1388: CALL_OW 44
1392: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 2 , un ) ;
1393: LD_ADDR_EXP 21
1397: PUSH
1398: LD_EXP 21
1402: PPUSH
1403: LD_INT 2
1405: PPUSH
1406: LD_VAR 0 4
1410: PPUSH
1411: CALL_OW 2
1415: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1416: LD_VAR 0 4
1420: PPUSH
1421: LD_INT 3
1423: PPUSH
1424: LD_INT 0
1426: PPUSH
1427: CALL_OW 49
// InitHc ;
1431: CALL_OW 19
// for i = 1 to 7 do
1435: LD_ADDR_VAR 0 3
1439: PUSH
1440: DOUBLE
1441: LD_INT 1
1443: DEC
1444: ST_TO_ADDR
1445: LD_INT 7
1447: PUSH
1448: FOR_TO
1449: IFFALSE 1600
// begin PrepareHuman ( false , 1 , skill ) ;
1451: LD_INT 0
1453: PPUSH
1454: LD_INT 1
1456: PPUSH
1457: LD_VAR 0 2
1461: PPUSH
1462: CALL_OW 380
// un := CreateHuman ;
1466: LD_ADDR_VAR 0 4
1470: PUSH
1471: CALL_OW 44
1475: ST_TO_ADDR
// if i mod 2 = 0 then
1476: LD_VAR 0 3
1480: PUSH
1481: LD_INT 2
1483: MOD
1484: PUSH
1485: LD_INT 0
1487: EQUAL
1488: IFFALSE 1545
// begin russian_troops_1 := Insert ( russian_troops_1 , russian_troops_1 + 1 , un ) ;
1490: LD_ADDR_EXP 21
1494: PUSH
1495: LD_EXP 21
1499: PPUSH
1500: LD_EXP 21
1504: PUSH
1505: LD_INT 1
1507: PLUS
1508: PPUSH
1509: LD_VAR 0 4
1513: PPUSH
1514: CALL_OW 2
1518: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1519: LD_VAR 0 4
1523: PPUSH
1524: LD_INT 3
1526: PPUSH
1527: LD_INT 0
1529: PPUSH
1530: CALL_OW 49
// ComHold ( un ) ;
1534: LD_VAR 0 4
1538: PPUSH
1539: CALL_OW 140
// end else
1543: GO 1598
// begin russian_troops_2 := Insert ( russian_troops_2 , russian_troops_2 + 1 , un ) ;
1545: LD_ADDR_EXP 22
1549: PUSH
1550: LD_EXP 22
1554: PPUSH
1555: LD_EXP 22
1559: PUSH
1560: LD_INT 1
1562: PLUS
1563: PPUSH
1564: LD_VAR 0 4
1568: PPUSH
1569: CALL_OW 2
1573: ST_TO_ADDR
// PlaceUnitArea ( un , guard_south , false ) ;
1574: LD_VAR 0 4
1578: PPUSH
1579: LD_INT 4
1581: PPUSH
1582: LD_INT 0
1584: PPUSH
1585: CALL_OW 49
// ComHold ( un ) ;
1589: LD_VAR 0 4
1593: PPUSH
1594: CALL_OW 140
// end ; end ;
1598: GO 1448
1600: POP
1601: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) do
1602: LD_ADDR_VAR 0 3
1606: PUSH
1607: LD_INT 22
1609: PUSH
1610: LD_INT 3
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: PUSH
1617: LD_INT 30
1619: PUSH
1620: LD_INT 31
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: PUSH
1627: EMPTY
1628: LIST
1629: LIST
1630: PPUSH
1631: CALL_OW 69
1635: PUSH
1636: FOR_IN
1637: IFFALSE 1655
// PrepareSolBun ( skill , i ) ;
1639: LD_VAR 0 2
1643: PPUSH
1644: LD_VAR 0 3
1648: PPUSH
1649: CALL 197 0 2
1653: GO 1636
1655: POP
1656: POP
// for i = 1 to 2 do
1657: LD_ADDR_VAR 0 3
1661: PUSH
1662: DOUBLE
1663: LD_INT 1
1665: DEC
1666: ST_TO_ADDR
1667: LD_INT 2
1669: PUSH
1670: FOR_TO
1671: IFFALSE 1802
// begin un := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1673: LD_ADDR_VAR 0 4
1677: PUSH
1678: LD_INT 3
1680: PPUSH
1681: LD_INT 3
1683: PPUSH
1684: LD_INT 22
1686: PPUSH
1687: LD_INT 1
1689: PPUSH
1690: LD_INT 1
1692: PPUSH
1693: LD_INT 42
1695: PPUSH
1696: LD_INT 100
1698: PPUSH
1699: CALL 333 0 7
1703: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
1704: LD_INT 0
1706: PPUSH
1707: LD_INT 3
1709: PPUSH
1710: LD_VAR 0 2
1714: PPUSH
1715: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1719: CALL_OW 44
1723: PPUSH
1724: LD_VAR 0 4
1728: PPUSH
1729: CALL_OW 52
// PlaceUnitXY ( un , [ 23 , 131 ] [ i ] , [ 14 , 87 ] [ i ] , false ) ;
1733: LD_VAR 0 4
1737: PPUSH
1738: LD_INT 23
1740: PUSH
1741: LD_INT 131
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: PUSH
1748: LD_VAR 0 3
1752: ARRAY
1753: PPUSH
1754: LD_INT 14
1756: PUSH
1757: LD_INT 87
1759: PUSH
1760: EMPTY
1761: LIST
1762: LIST
1763: PUSH
1764: LD_VAR 0 3
1768: ARRAY
1769: PPUSH
1770: LD_INT 0
1772: PPUSH
1773: CALL_OW 48
// russian_patrol_tanks := Insert ( russian_patrol_tanks , 1 , un ) ;
1777: LD_ADDR_EXP 23
1781: PUSH
1782: LD_EXP 23
1786: PPUSH
1787: LD_INT 1
1789: PPUSH
1790: LD_VAR 0 4
1794: PPUSH
1795: CALL_OW 2
1799: ST_TO_ADDR
// end ;
1800: GO 1670
1802: POP
1803: POP
// for i = 1 to 2 do
1804: LD_ADDR_VAR 0 3
1808: PUSH
1809: DOUBLE
1810: LD_INT 1
1812: DEC
1813: ST_TO_ADDR
1814: LD_INT 2
1816: PUSH
1817: FOR_TO
1818: IFFALSE 1909
// begin PrepareHuman ( [ sex_female , sex_male , sex_male ] [ i ] , 1 , 1 ) ;
1820: LD_INT 2
1822: PUSH
1823: LD_INT 1
1825: PUSH
1826: LD_INT 1
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: LIST
1833: PUSH
1834: LD_VAR 0 3
1838: ARRAY
1839: PPUSH
1840: LD_INT 1
1842: PPUSH
1843: LD_INT 1
1845: PPUSH
1846: CALL_OW 380
// un := CreateHuman ;
1850: LD_ADDR_VAR 0 4
1854: PUSH
1855: CALL_OW 44
1859: ST_TO_ADDR
// russian_meta_guards := Insert ( russian_meta_guards , 1 , un ) ;
1860: LD_ADDR_EXP 24
1864: PUSH
1865: LD_EXP 24
1869: PPUSH
1870: LD_INT 1
1872: PPUSH
1873: LD_VAR 0 4
1877: PPUSH
1878: CALL_OW 2
1882: ST_TO_ADDR
// PlaceUnitArea ( un , exitArea , false ) ;
1883: LD_VAR 0 4
1887: PPUSH
1888: LD_INT 10
1890: PPUSH
1891: LD_INT 0
1893: PPUSH
1894: CALL_OW 49
// ComHold ( un ) ;
1898: LD_VAR 0 4
1902: PPUSH
1903: CALL_OW 140
// end ;
1907: GO 1817
1909: POP
1910: POP
// if Difficulty < 3 then
1911: LD_OWVAR 67
1915: PUSH
1916: LD_INT 3
1918: LESS
1919: IFFALSE 1923
// exit ;
1921: GO 1966
// PrepareHuman ( false , 1 , skill ) ;
1923: LD_INT 0
1925: PPUSH
1926: LD_INT 1
1928: PPUSH
1929: LD_VAR 0 2
1933: PPUSH
1934: CALL_OW 380
// russian_patrol_forest := CreateHuman ;
1938: LD_ADDR_EXP 25
1942: PUSH
1943: CALL_OW 44
1947: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_forest , 82 , 2 , false ) ;
1948: LD_EXP 25
1952: PPUSH
1953: LD_INT 82
1955: PPUSH
1956: LD_INT 2
1958: PPUSH
1959: LD_INT 0
1961: PPUSH
1962: CALL_OW 48
// end ;
1966: LD_VAR 0 1
1970: RET
// every 0 0$01 trigger active_road_patrol do
1971: LD_EXP 8
1975: IFFALSE 2041
1977: GO 1979
1979: DISABLE
// ComPatrol ( russian_patrol_tanks [ 1 ] , road , 0 0$02 , [ 131 , 87 , 107 , 75 , 107 , 66 , 114 , 61 , 107 , 34 ] ) ;
1980: LD_EXP 23
1984: PUSH
1985: LD_INT 1
1987: ARRAY
1988: PPUSH
1989: LD_STRING road
1991: PPUSH
1992: LD_INT 70
1994: PPUSH
1995: LD_INT 131
1997: PUSH
1998: LD_INT 87
2000: PUSH
2001: LD_INT 107
2003: PUSH
2004: LD_INT 75
2006: PUSH
2007: LD_INT 107
2009: PUSH
2010: LD_INT 66
2012: PUSH
2013: LD_INT 114
2015: PUSH
2016: LD_INT 61
2018: PUSH
2019: LD_INT 107
2021: PUSH
2022: LD_INT 34
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: LIST
2029: LIST
2030: LIST
2031: LIST
2032: LIST
2033: LIST
2034: LIST
2035: LIST
2036: PPUSH
2037: CALL 421 0 4
2041: END
// every 0 0$01 trigger active_road_patrol do
2042: LD_EXP 8
2046: IFFALSE 2104
2048: GO 2050
2050: DISABLE
// ComPatrol ( russian_patrol_tanks [ 2 ] , road , 0 0$02 , [ 21 , 12 , 37 , 30 , 65 , 62 , 107 , 76 ] ) ;
2051: LD_EXP 23
2055: PUSH
2056: LD_INT 2
2058: ARRAY
2059: PPUSH
2060: LD_STRING road
2062: PPUSH
2063: LD_INT 70
2065: PPUSH
2066: LD_INT 21
2068: PUSH
2069: LD_INT 12
2071: PUSH
2072: LD_INT 37
2074: PUSH
2075: LD_INT 30
2077: PUSH
2078: LD_INT 65
2080: PUSH
2081: LD_INT 62
2083: PUSH
2084: LD_INT 107
2086: PUSH
2087: LD_INT 76
2089: PUSH
2090: EMPTY
2091: LIST
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: LIST
2097: LIST
2098: LIST
2099: PPUSH
2100: CALL 421 0 4
2104: END
// every 0 0$01 trigger IsOk ( russian_patrol_forest ) do
2105: LD_EXP 25
2109: PPUSH
2110: CALL_OW 302
2114: IFFALSE 2176
2116: GO 2118
2118: DISABLE
// ComPatrol ( russian_patrol_forest , forest , 0 0$01 , [ 52 , 15 , 81 , 9 , 120 , 52 , 135 , 80 , 122 , 95 ] ) ;
2119: LD_EXP 25
2123: PPUSH
2124: LD_STRING forest
2126: PPUSH
2127: LD_INT 35
2129: PPUSH
2130: LD_INT 52
2132: PUSH
2133: LD_INT 15
2135: PUSH
2136: LD_INT 81
2138: PUSH
2139: LD_INT 9
2141: PUSH
2142: LD_INT 120
2144: PUSH
2145: LD_INT 52
2147: PUSH
2148: LD_INT 135
2150: PUSH
2151: LD_INT 80
2153: PUSH
2154: LD_INT 122
2156: PUSH
2157: LD_INT 95
2159: PUSH
2160: EMPTY
2161: LIST
2162: LIST
2163: LIST
2164: LIST
2165: LIST
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: PPUSH
2172: CALL 421 0 4
2176: END
// every 0 0$01 trigger macmilan_use_radio do
2177: LD_EXP 6
2181: IFFALSE 2242
2183: GO 2185
2185: DISABLE
// begin active_road_patrol := false ;
2186: LD_ADDR_EXP 8
2190: PUSH
2191: LD_INT 0
2193: ST_TO_ADDR
// ComStop ( russian_patrol_tanks ) ;
2194: LD_EXP 23
2198: PPUSH
2199: CALL_OW 141
// AddComAgressiveMove ( russian_patrol_tanks , 72 , 41 ) ;
2203: LD_EXP 23
2207: PPUSH
2208: LD_INT 72
2210: PPUSH
2211: LD_INT 41
2213: PPUSH
2214: CALL_OW 174
// ComExitBuilding ( russian_troops_2 ) ;
2218: LD_EXP 22
2222: PPUSH
2223: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , 72 , 41 ) ;
2227: LD_EXP 22
2231: PPUSH
2232: LD_INT 72
2234: PPUSH
2235: LD_INT 41
2237: PPUSH
2238: CALL_OW 174
// end ;
2242: END
// every 0 0$03 trigger FilterUnitsInArea ( def_south , [ f_side , 1 ] ) do var un ;
2243: LD_INT 9
2245: PPUSH
2246: LD_INT 22
2248: PUSH
2249: LD_INT 1
2251: PUSH
2252: EMPTY
2253: LIST
2254: LIST
2255: PPUSH
2256: CALL_OW 70
2260: IFFALSE 2334
2262: GO 2264
2264: DISABLE
2265: LD_INT 0
2267: PPUSH
// begin enable ;
2268: ENABLE
// un := FilterUnitsInArea ( def_south , [ f_side , 1 ] ) [ 1 ] ;
2269: LD_ADDR_VAR 0 1
2273: PUSH
2274: LD_INT 9
2276: PPUSH
2277: LD_INT 22
2279: PUSH
2280: LD_INT 1
2282: PUSH
2283: EMPTY
2284: LIST
2285: LIST
2286: PPUSH
2287: CALL_OW 70
2291: PUSH
2292: LD_INT 1
2294: ARRAY
2295: ST_TO_ADDR
// ComExitBuilding ( russian_troops_2 ) ;
2296: LD_EXP 22
2300: PPUSH
2301: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , GetX ( un ) , GetY ( un ) ) ;
2305: LD_EXP 22
2309: PPUSH
2310: LD_VAR 0 1
2314: PPUSH
2315: CALL_OW 250
2319: PPUSH
2320: LD_VAR 0 1
2324: PPUSH
2325: CALL_OW 251
2329: PPUSH
2330: CALL_OW 174
// end ;
2334: PPOPN 1
2336: END
// every 0 0$01 trigger ( GetLives ( russian_patrol_tanks [ 1 ] ) < 999 or GetLives ( russian_patrol_tanks [ 2 ] ) < 999 ) and See ( 3 , JMM ) do
2337: LD_EXP 23
2341: PUSH
2342: LD_INT 1
2344: ARRAY
2345: PPUSH
2346: CALL_OW 256
2350: PUSH
2351: LD_INT 999
2353: LESS
2354: PUSH
2355: LD_EXP 23
2359: PUSH
2360: LD_INT 2
2362: ARRAY
2363: PPUSH
2364: CALL_OW 256
2368: PUSH
2369: LD_INT 999
2371: LESS
2372: OR
2373: PUSH
2374: LD_INT 3
2376: PPUSH
2377: LD_EXP 16
2381: PPUSH
2382: CALL_OW 292
2386: AND
2387: IFFALSE 2414
2389: GO 2391
2391: DISABLE
// begin active_road_patrol := false ;
2392: LD_ADDR_EXP 8
2396: PUSH
2397: LD_INT 0
2399: ST_TO_ADDR
// ComAttackUnit ( russian_patrol_tanks , JMM ) ;
2400: LD_EXP 23
2404: PPUSH
2405: LD_EXP 16
2409: PPUSH
2410: CALL_OW 115
// end ;
2414: END
// every 0 0$01 trigger macmilan_in_trap do
2415: LD_EXP 9
2419: IFFALSE 2465
2421: GO 2423
2423: DISABLE
// begin ComExitBuilding ( russian_troops_2 ) ;
2424: LD_EXP 22
2428: PPUSH
2429: CALL_OW 122
// ComAttackUnit ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , JMM ) ;
2433: LD_EXP 21
2437: PUSH
2438: LD_EXP 22
2442: ADD
2443: PUSH
2444: LD_EXP 26
2448: ADD
2449: PUSH
2450: LD_EXP 23
2454: ADD
2455: PPUSH
2456: LD_EXP 16
2460: PPUSH
2461: CALL_OW 115
// end ;
2465: END
// every 0 0$01 trigger meta_action do
2466: LD_EXP 10
2470: IFFALSE 2516
2472: GO 2474
2474: DISABLE
// begin active_road_patrol := false ;
2475: LD_ADDR_EXP 8
2479: PUSH
2480: LD_INT 0
2482: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , 93 , 1 ) ;
2483: LD_EXP 21
2487: PUSH
2488: LD_EXP 22
2492: ADD
2493: PUSH
2494: LD_EXP 26
2498: ADD
2499: PUSH
2500: LD_EXP 23
2504: ADD
2505: PPUSH
2506: LD_INT 93
2508: PPUSH
2509: LD_INT 1
2511: PPUSH
2512: CALL_OW 114
// end ;
2516: END
// every 0 0$1 trigger GetLives ( Pokryshkin ) < 1000 do
2517: LD_EXP 26
2521: PPUSH
2522: CALL_OW 256
2526: PUSH
2527: LD_INT 1000
2529: LESS
2530: IFFALSE 2581
2532: GO 2534
2534: DISABLE
// begin enable ;
2535: ENABLE
// if HexInfo ( 18 , 1 ) = Pokryshkin then
2536: LD_INT 18
2538: PPUSH
2539: LD_INT 1
2541: PPUSH
2542: CALL_OW 428
2546: PUSH
2547: LD_EXP 26
2551: EQUAL
2552: IFFALSE 2566
// begin RemoveUnit ( Pokryshkin ) ;
2554: LD_EXP 26
2558: PPUSH
2559: CALL_OW 64
// disable ;
2563: DISABLE
// end else
2564: GO 2581
// ComMoveXY ( Pokryshkin , 18 , 1 ) ;
2566: LD_EXP 26
2570: PPUSH
2571: LD_INT 18
2573: PPUSH
2574: LD_INT 1
2576: PPUSH
2577: CALL_OW 111
// end ;
2581: END
// every 0 0$20 trigger send_troops_to_forest do
2582: LD_EXP 14
2586: IFFALSE 2640
2588: GO 2590
2590: DISABLE
// begin if not IsOk ( russian_patrol_forest ) then
2591: LD_EXP 25
2595: PPUSH
2596: CALL_OW 302
2600: NOT
2601: IFFALSE 2605
// exit ;
2603: GO 2640
// ComAgressiveMove ( russian_troops_1 ^ Pokryshkin , GetRememberedX ( russian_patrol_forest ) , GetRememberedY ( russian_patrol_forest ) ) ;
2605: LD_EXP 21
2609: PUSH
2610: LD_EXP 26
2614: ADD
2615: PPUSH
2616: LD_EXP 25
2620: PPUSH
2621: CALL_OW 252
2625: PPUSH
2626: LD_EXP 25
2630: PPUSH
2631: CALL_OW 253
2635: PPUSH
2636: CALL_OW 114
// end ;
2640: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) = 3 then
2641: LD_VAR 0 1
2645: PPUSH
2646: CALL_OW 255
2650: PUSH
2651: LD_INT 3
2653: EQUAL
2654: IFFALSE 2697
// begin wait ( 11 ) ;
2656: LD_INT 11
2658: PPUSH
2659: CALL_OW 67
// ComEnterUnit ( driver , NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_depot ] ) , driver ) ) ;
2663: LD_VAR 0 1
2667: PPUSH
2668: LD_INT 30
2670: PUSH
2671: LD_INT 0
2673: PUSH
2674: EMPTY
2675: LIST
2676: LIST
2677: PPUSH
2678: CALL_OW 69
2682: PPUSH
2683: LD_VAR 0 1
2687: PPUSH
2688: CALL_OW 74
2692: PPUSH
2693: CALL_OW 120
// end ; end ; end_of_file
2697: PPOPN 4
2699: END
// export function Action ; var i ; begin
2700: LD_INT 0
2702: PPUSH
2703: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
2704: LD_ADDR_VAR 0 2
2708: PUSH
2709: LD_INT 22
2711: PUSH
2712: LD_INT 3
2714: PUSH
2715: EMPTY
2716: LIST
2717: LIST
2718: PUSH
2719: LD_INT 25
2721: PUSH
2722: LD_INT 1
2724: PUSH
2725: EMPTY
2726: LIST
2727: LIST
2728: PUSH
2729: EMPTY
2730: LIST
2731: LIST
2732: PPUSH
2733: CALL_OW 69
2737: PUSH
2738: FOR_IN
2739: IFFALSE 2752
// ComHold ( i ) ;
2741: LD_VAR 0 2
2745: PPUSH
2746: CALL_OW 140
2750: GO 2738
2752: POP
2753: POP
// InGameOn ;
2754: CALL_OW 8
// CenterOnXY ( 79 , 76 ) ;
2758: LD_INT 79
2760: PPUSH
2761: LD_INT 76
2763: PPUSH
2764: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
2768: LD_INT 10
2770: PPUSH
2771: CALL_OW 67
// PlaceUnitXY ( JMM , 80 , 79 , true ) ;
2775: LD_EXP 16
2779: PPUSH
2780: LD_INT 80
2782: PPUSH
2783: LD_INT 79
2785: PPUSH
2786: LD_INT 1
2788: PPUSH
2789: CALL_OW 48
// Wait ( 0 0$03 ) ;
2793: LD_INT 105
2795: PPUSH
2796: CALL_OW 67
// ComMoveXY ( JMM , 80 , 76 ) ;
2800: LD_EXP 16
2804: PPUSH
2805: LD_INT 80
2807: PPUSH
2808: LD_INT 76
2810: PPUSH
2811: CALL_OW 111
// Say ( JMM , D1-JMM-1 ) ;
2815: LD_EXP 16
2819: PPUSH
2820: LD_STRING D1-JMM-1
2822: PPUSH
2823: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2827: LD_INT 10
2829: PPUSH
2830: CALL_OW 67
// ComMoveXY ( JMM , 76 , 76 ) ;
2834: LD_EXP 16
2838: PPUSH
2839: LD_INT 76
2841: PPUSH
2842: LD_INT 76
2844: PPUSH
2845: CALL_OW 111
// Say ( JMM , D1-JMM-1a ) ;
2849: LD_EXP 16
2853: PPUSH
2854: LD_STRING D1-JMM-1a
2856: PPUSH
2857: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2861: LD_INT 10
2863: PPUSH
2864: CALL_OW 67
// ComTurnXY ( JMM , 83 , 66 ) ;
2868: LD_EXP 16
2872: PPUSH
2873: LD_INT 83
2875: PPUSH
2876: LD_INT 66
2878: PPUSH
2879: CALL_OW 118
// Say ( JMM , D1-JMM-1b ) ;
2883: LD_EXP 16
2887: PPUSH
2888: LD_STRING D1-JMM-1b
2890: PPUSH
2891: CALL_OW 88
// Wait ( 0 0$0.5 ) ;
2895: LD_INT 18
2897: PPUSH
2898: CALL_OW 67
// Say ( JMM , D1-JMM-1c ) ;
2902: LD_EXP 16
2906: PPUSH
2907: LD_STRING D1-JMM-1c
2909: PPUSH
2910: CALL_OW 88
// Wait ( 0 0$0.2 ) ;
2914: LD_INT 7
2916: PPUSH
2917: CALL_OW 67
// SayRadioNoFace ( Powell , D1-Pow-1 ) ;
2921: LD_EXP 19
2925: PPUSH
2926: LD_STRING D1-Pow-1
2928: PPUSH
2929: CALL_OW 586
// Say ( JMM , D1-JMM-2 ) ;
2933: LD_EXP 16
2937: PPUSH
2938: LD_STRING D1-JMM-2
2940: PPUSH
2941: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-2 ) ;
2945: LD_EXP 19
2949: PPUSH
2950: LD_STRING D1-Pow-2
2952: PPUSH
2953: CALL_OW 586
// Say ( JMM , D1-JMM-3 ) ;
2957: LD_EXP 16
2961: PPUSH
2962: LD_STRING D1-JMM-3
2964: PPUSH
2965: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-3 ) ;
2969: LD_EXP 19
2973: PPUSH
2974: LD_STRING D1-Pow-3
2976: PPUSH
2977: CALL_OW 586
// Say ( JMM , D1-JMM-4 ) ;
2981: LD_EXP 16
2985: PPUSH
2986: LD_STRING D1-JMM-4
2988: PPUSH
2989: CALL_OW 88
// ComFree ( JMM ) ;
2993: LD_EXP 16
2997: PPUSH
2998: CALL_OW 139
// Wait ( 0 0$0.3 ) ;
3002: LD_INT 10
3004: PPUSH
3005: CALL_OW 67
// InGameOff ;
3009: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
3013: LD_STRING M1
3015: PPUSH
3016: CALL_OW 337
// SaveForQuickRestart ;
3020: CALL_OW 22
// active_russian_dialog := true ;
3024: LD_ADDR_EXP 3
3028: PUSH
3029: LD_INT 1
3031: ST_TO_ADDR
// active_road_patrol := true ;
3032: LD_ADDR_EXP 8
3036: PUSH
3037: LD_INT 1
3039: ST_TO_ADDR
// if Difficulty < 3 then
3040: LD_OWVAR 67
3044: PUSH
3045: LD_INT 3
3047: LESS
3048: IFFALSE 3079
// begin PlaceUnitXY ( Bobby , 41 , 71 , false ) ;
3050: LD_EXP 17
3054: PPUSH
3055: LD_INT 41
3057: PPUSH
3058: LD_INT 71
3060: PPUSH
3061: LD_INT 0
3063: PPUSH
3064: CALL_OW 48
// ComHold ( Bobby ) ;
3068: LD_EXP 17
3072: PPUSH
3073: CALL_OW 140
// end else
3077: GO 3127
// begin SetDir ( Bobby , 5 ) ;
3079: LD_EXP 17
3083: PPUSH
3084: LD_INT 5
3086: PPUSH
3087: CALL_OW 233
// PlaceUnitXY ( Bobby , 105 , 98 , false ) ;
3091: LD_EXP 17
3095: PPUSH
3096: LD_INT 105
3098: PPUSH
3099: LD_INT 98
3101: PPUSH
3102: LD_INT 0
3104: PPUSH
3105: CALL_OW 48
// ComCrawl ( Bobby ) ;
3109: LD_EXP 17
3113: PPUSH
3114: CALL_OW 137
// AddComHold ( Bobby ) ;
3118: LD_EXP 17
3122: PPUSH
3123: CALL_OW 200
// end ; PlaceUnitXY ( Cyrus , 90 , 42 , false ) ;
3127: LD_EXP 18
3131: PPUSH
3132: LD_INT 90
3134: PPUSH
3135: LD_INT 42
3137: PPUSH
3138: LD_INT 0
3140: PPUSH
3141: CALL_OW 48
// ComMoveXY ( Cyrus , 79 , 34 ) ;
3145: LD_EXP 18
3149: PPUSH
3150: LD_INT 79
3152: PPUSH
3153: LD_INT 34
3155: PPUSH
3156: CALL_OW 111
// AddComCrawl ( Cyrus ) ;
3160: LD_EXP 18
3164: PPUSH
3165: CALL_OW 197
// end ;
3169: LD_VAR 0 1
3173: RET
// every 0 0$01 trigger active_russian_dialog do var wait_points ;
3174: LD_EXP 3
3178: IFFALSE 3772
3180: GO 3182
3182: DISABLE
3183: LD_INT 0
3185: PPUSH
// begin wait_points := 0 ;
3186: LD_ADDR_VAR 0 1
3190: PUSH
3191: LD_INT 0
3193: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
3194: LD_INT 70
3196: PPUSH
3197: CALL_OW 67
// ComAgressiveMove ( russian_troops_1 , 79 , 83 ) ;
3201: LD_EXP 21
3205: PPUSH
3206: LD_INT 79
3208: PPUSH
3209: LD_INT 83
3211: PPUSH
3212: CALL_OW 114
// Say ( russian_troops_1 [ 2 ] , D1R-Rus1-1 ) ;
3216: LD_EXP 21
3220: PUSH
3221: LD_INT 2
3223: ARRAY
3224: PPUSH
3225: LD_STRING D1R-Rus1-1
3227: PPUSH
3228: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1R-Rus2-1 ) ;
3232: LD_EXP 21
3236: PUSH
3237: LD_INT 1
3239: ARRAY
3240: PPUSH
3241: LD_STRING D1R-Rus2-1
3243: PPUSH
3244: CALL_OW 88
// ComAgressiveMove ( russian_troops_2 , 91 , 80 ) ;
3248: LD_EXP 22
3252: PPUSH
3253: LD_INT 91
3255: PPUSH
3256: LD_INT 80
3258: PPUSH
3259: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
3263: LD_INT 35
3265: PPUSH
3266: CALL_OW 67
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 79 , 82 ) < 6 ;
3270: LD_EXP 21
3274: PUSH
3275: LD_INT 1
3277: ARRAY
3278: PPUSH
3279: LD_INT 79
3281: PPUSH
3282: LD_INT 82
3284: PPUSH
3285: CALL_OW 297
3289: PUSH
3290: LD_INT 6
3292: LESS
3293: IFFALSE 3263
// if not IsInArea ( JMM , jmm_spot ) then
3295: LD_EXP 16
3299: PPUSH
3300: LD_INT 5
3302: PPUSH
3303: CALL_OW 308
3307: NOT
3308: IFFALSE 3328
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1 ) else
3310: LD_EXP 21
3314: PUSH
3315: LD_INT 1
3317: ARRAY
3318: PPUSH
3319: LD_STRING D1Ra-Rus2-1
3321: PPUSH
3322: CALL_OW 88
3326: GO 3395
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3328: LD_EXP 21
3332: PUSH
3333: LD_INT 2
3335: ARRAY
3336: PPUSH
3337: LD_STRING D1Rb-Rus1-1
3339: PPUSH
3340: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Rb-Rus2-1 ) ;
3344: LD_EXP 21
3348: PUSH
3349: LD_INT 1
3351: ARRAY
3352: PPUSH
3353: LD_STRING D1Rb-Rus2-1
3355: PPUSH
3356: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 , GetX ( JMM ) , GetY ( JMM ) ) ;
3360: LD_EXP 21
3364: PUSH
3365: LD_EXP 22
3369: ADD
3370: PPUSH
3371: LD_EXP 16
3375: PPUSH
3376: CALL_OW 250
3380: PPUSH
3381: LD_EXP 16
3385: PPUSH
3386: CALL_OW 251
3390: PPUSH
3391: CALL_OW 114
// end ; wait_points := 10 ;
3395: LD_ADDR_VAR 0 1
3399: PUSH
3400: LD_INT 10
3402: ST_TO_ADDR
// if Difficulty > 1 then
3403: LD_OWVAR 67
3407: PUSH
3408: LD_INT 1
3410: GREATER
3411: IFFALSE 3493
// begin ComAgressiveMove ( russian_troops_1 , 78 , 95 ) ;
3413: LD_EXP 21
3417: PPUSH
3418: LD_INT 78
3420: PPUSH
3421: LD_INT 95
3423: PPUSH
3424: CALL_OW 114
// AddComWait ( russian_troops_1 , 0 0$05 ) ;
3428: LD_EXP 21
3432: PPUSH
3433: LD_INT 175
3435: PPUSH
3436: CALL_OW 202
// wait_points := wait_points + 15 ;
3440: LD_ADDR_VAR 0 1
3444: PUSH
3445: LD_VAR 0 1
3449: PUSH
3450: LD_INT 15
3452: PLUS
3453: ST_TO_ADDR
// if Difficulty > 2 then
3454: LD_OWVAR 67
3458: PUSH
3459: LD_INT 2
3461: GREATER
3462: IFFALSE 3493
// begin AddComAgressiveMove ( russian_troops_1 , 65 , 79 ) ;
3464: LD_EXP 21
3468: PPUSH
3469: LD_INT 65
3471: PPUSH
3472: LD_INT 79
3474: PPUSH
3475: CALL_OW 174
// wait_points := wait_points + 5 ;
3479: LD_ADDR_VAR 0 1
3483: PUSH
3484: LD_VAR 0 1
3488: PUSH
3489: LD_INT 5
3491: PLUS
3492: ST_TO_ADDR
// end ; end ; repeat wait ( 0 0$01 ) ;
3493: LD_INT 35
3495: PPUSH
3496: CALL_OW 67
// wait_points := wait_points - 1 ;
3500: LD_ADDR_VAR 0 1
3504: PUSH
3505: LD_VAR 0 1
3509: PUSH
3510: LD_INT 1
3512: MINUS
3513: ST_TO_ADDR
// if See ( 3 , JMM ) then
3514: LD_INT 3
3516: PPUSH
3517: LD_EXP 16
3521: PPUSH
3522: CALL_OW 292
3526: IFFALSE 3580
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3528: LD_EXP 21
3532: PUSH
3533: LD_INT 2
3535: ARRAY
3536: PPUSH
3537: LD_STRING D1Rb-Rus1-1
3539: PPUSH
3540: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3544: LD_EXP 21
3548: PPUSH
3549: LD_EXP 16
3553: PPUSH
3554: CALL_OW 250
3558: PPUSH
3559: LD_EXP 16
3563: PPUSH
3564: CALL_OW 251
3568: PPUSH
3569: CALL_OW 114
// Wait ( 0 0$03 ) ;
3573: LD_INT 105
3575: PPUSH
3576: CALL_OW 67
// end ; until wait_points = 0 ;
3580: LD_VAR 0 1
3584: PUSH
3585: LD_INT 0
3587: EQUAL
3588: IFFALSE 3493
// Say ( russian_troops_1 [ 2 ] , D1Rc-Rus1-1 ) ;
3590: LD_EXP 21
3594: PUSH
3595: LD_INT 2
3597: ARRAY
3598: PPUSH
3599: LD_STRING D1Rc-Rus1-1
3601: PPUSH
3602: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1a ) ;
3606: LD_EXP 21
3610: PUSH
3611: LD_INT 1
3613: ARRAY
3614: PPUSH
3615: LD_STRING D1Ra-Rus2-1a
3617: PPUSH
3618: CALL_OW 88
// active_powell_dialog := true ;
3622: LD_ADDR_EXP 15
3626: PUSH
3627: LD_INT 1
3629: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3630: LD_EXP 21
3634: PPUSH
3635: LD_INT 45
3637: PPUSH
3638: LD_INT 5
3640: PPUSH
3641: CALL_OW 114
// ComEnterUnit ( russian_troops_2 , rbar1 ) ;
3645: LD_EXP 22
3649: PPUSH
3650: LD_INT 26
3652: PPUSH
3653: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
3657: LD_INT 35
3659: PPUSH
3660: CALL_OW 67
// if See ( 3 , JMM ) then
3664: LD_INT 3
3666: PPUSH
3667: LD_EXP 16
3671: PPUSH
3672: CALL_OW 292
3676: IFFALSE 3732
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3678: LD_EXP 21
3682: PUSH
3683: LD_INT 2
3685: ARRAY
3686: PPUSH
3687: LD_STRING D1Rb-Rus1-1
3689: PPUSH
3690: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3694: LD_EXP 21
3698: PPUSH
3699: LD_EXP 16
3703: PPUSH
3704: CALL_OW 250
3708: PPUSH
3709: LD_EXP 16
3713: PPUSH
3714: CALL_OW 251
3718: PPUSH
3719: CALL_OW 114
// Wait ( 0 0$50 ) ;
3723: LD_INT 1750
3725: PPUSH
3726: CALL_OW 67
// end else
3730: GO 3747
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3732: LD_EXP 21
3736: PPUSH
3737: LD_INT 45
3739: PPUSH
3740: LD_INT 5
3742: PPUSH
3743: CALL_OW 114
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 45 , 5 ) < 10 ;
3747: LD_EXP 21
3751: PUSH
3752: LD_INT 1
3754: ARRAY
3755: PPUSH
3756: LD_INT 45
3758: PPUSH
3759: LD_INT 5
3761: PPUSH
3762: CALL_OW 297
3766: PUSH
3767: LD_INT 10
3769: LESS
3770: IFFALSE 3657
// end ;
3772: PPOPN 1
3774: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 6 ] ] ) and Difficulty = 1 do
3775: LD_INT 22
3777: PUSH
3778: LD_INT 3
3780: PUSH
3781: EMPTY
3782: LIST
3783: LIST
3784: PUSH
3785: LD_INT 92
3787: PUSH
3788: LD_INT 80
3790: PUSH
3791: LD_INT 83
3793: PUSH
3794: LD_INT 6
3796: PUSH
3797: EMPTY
3798: LIST
3799: LIST
3800: LIST
3801: LIST
3802: PUSH
3803: EMPTY
3804: LIST
3805: LIST
3806: PPUSH
3807: CALL_OW 69
3811: PUSH
3812: LD_OWVAR 67
3816: PUSH
3817: LD_INT 1
3819: EQUAL
3820: AND
3821: IFFALSE 3902
3823: GO 3825
3825: DISABLE
// begin PlaceSeeing ( 80 , 83 , 1 , - 7 ) ;
3826: LD_INT 80
3828: PPUSH
3829: LD_INT 83
3831: PPUSH
3832: LD_INT 1
3834: PPUSH
3835: LD_INT 7
3837: NEG
3838: PPUSH
3839: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
3843: LD_INT 35
3845: PPUSH
3846: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 10 ] ] ) ;
3850: LD_INT 22
3852: PUSH
3853: LD_INT 3
3855: PUSH
3856: EMPTY
3857: LIST
3858: LIST
3859: PUSH
3860: LD_INT 92
3862: PUSH
3863: LD_INT 80
3865: PUSH
3866: LD_INT 83
3868: PUSH
3869: LD_INT 10
3871: PUSH
3872: EMPTY
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: PUSH
3878: EMPTY
3879: LIST
3880: LIST
3881: PPUSH
3882: CALL_OW 69
3886: NOT
3887: IFFALSE 3843
// RemoveSeeing ( 80 , 83 , 1 ) ;
3889: LD_INT 80
3891: PPUSH
3892: LD_INT 83
3894: PPUSH
3895: LD_INT 1
3897: PPUSH
3898: CALL_OW 331
// end ;
3902: END
// every 0 0$02 trigger GetDistUnits ( JMM , Bobby ) < 6 and IsOk ( Bobby ) do
3903: LD_EXP 16
3907: PPUSH
3908: LD_EXP 17
3912: PPUSH
3913: CALL_OW 296
3917: PUSH
3918: LD_INT 6
3920: LESS
3921: PUSH
3922: LD_EXP 17
3926: PPUSH
3927: CALL_OW 302
3931: AND
3932: IFFALSE 4391
3934: GO 3936
3936: DISABLE
// begin ComWalk ( Bobby ) ;
3937: LD_EXP 17
3941: PPUSH
3942: CALL_OW 138
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
3946: LD_EXP 17
3950: PPUSH
3951: LD_EXP 16
3955: PPUSH
3956: CALL_OW 250
3960: PPUSH
3961: LD_EXP 16
3965: PPUSH
3966: CALL_OW 251
3970: PPUSH
3971: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
3975: LD_INT 35
3977: PPUSH
3978: CALL_OW 67
// until See ( 4 , JMM ) ;
3982: LD_INT 4
3984: PPUSH
3985: LD_EXP 16
3989: PPUSH
3990: CALL_OW 292
3994: IFFALSE 3975
// InGameOn ;
3996: CALL_OW 8
// ComTurnUnit ( JMM , Bobby ) ;
4000: LD_EXP 16
4004: PPUSH
4005: LD_EXP 17
4009: PPUSH
4010: CALL_OW 119
// if cyrus_in_squad and IsOk ( Cyrus ) and GetDistUnits ( JMM , Cyrus ) < 10 then
4014: LD_EXP 7
4018: PUSH
4019: LD_EXP 18
4023: PPUSH
4024: CALL_OW 302
4028: AND
4029: PUSH
4030: LD_EXP 16
4034: PPUSH
4035: LD_EXP 18
4039: PPUSH
4040: CALL_OW 296
4044: PUSH
4045: LD_INT 10
4047: LESS
4048: AND
4049: IFFALSE 4094
// begin ComMoveXY ( Cyrus , GetX ( JMM ) , GetY ( JMM ) ) ;
4051: LD_EXP 18
4055: PPUSH
4056: LD_EXP 16
4060: PPUSH
4061: CALL_OW 250
4065: PPUSH
4066: LD_EXP 16
4070: PPUSH
4071: CALL_OW 251
4075: PPUSH
4076: CALL_OW 111
// AddComTurnUnit ( Cyrus , Bobby ) ;
4080: LD_EXP 18
4084: PPUSH
4085: LD_EXP 17
4089: PPUSH
4090: CALL_OW 179
// end ; Say ( JMM , D2-JMM-1 ) ;
4094: LD_EXP 16
4098: PPUSH
4099: LD_STRING D2-JMM-1
4101: PPUSH
4102: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
4106: LD_INT 10
4108: PPUSH
4109: CALL_OW 67
// ComTurnUnit ( Bobby , JMM ) ;
4113: LD_EXP 17
4117: PPUSH
4118: LD_EXP 16
4122: PPUSH
4123: CALL_OW 119
// Say ( Bobby , D2-Bobby-1 ) ;
4127: LD_EXP 17
4131: PPUSH
4132: LD_STRING D2-Bobby-1
4134: PPUSH
4135: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
4139: LD_EXP 16
4143: PPUSH
4144: LD_STRING D2-JMM-2
4146: PPUSH
4147: CALL_OW 88
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4151: LD_EXP 17
4155: PPUSH
4156: LD_EXP 16
4160: PPUSH
4161: CALL_OW 250
4165: PPUSH
4166: LD_EXP 16
4170: PPUSH
4171: CALL_OW 251
4175: PPUSH
4176: CALL_OW 111
// Say ( Bobby , D2-Bobby-2 ) ;
4180: LD_EXP 17
4184: PPUSH
4185: LD_STRING D2-Bobby-2
4187: PPUSH
4188: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
4192: LD_EXP 16
4196: PPUSH
4197: LD_STRING D2-JMM-3
4199: PPUSH
4200: CALL_OW 88
// ComTurnUnit ( Bobby , JMM ) ;
4204: LD_EXP 17
4208: PPUSH
4209: LD_EXP 16
4213: PPUSH
4214: CALL_OW 119
// DialogueOn ;
4218: CALL_OW 6
// Say ( Bobby , D2-Bobby-3 ) ;
4222: LD_EXP 17
4226: PPUSH
4227: LD_STRING D2-Bobby-3
4229: PPUSH
4230: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
4234: LD_EXP 16
4238: PPUSH
4239: LD_STRING D2-JMM-4
4241: PPUSH
4242: CALL_OW 88
// Say ( Bobby , D2-Bobby-4 ) ;
4246: LD_EXP 17
4250: PPUSH
4251: LD_STRING D2-Bobby-4
4253: PPUSH
4254: CALL_OW 88
// Say ( JMM , D2-JMM-5 ) ;
4258: LD_EXP 16
4262: PPUSH
4263: LD_STRING D2-JMM-5
4265: PPUSH
4266: CALL_OW 88
// Say ( Bobby , D2-Bobby-5 ) ;
4270: LD_EXP 17
4274: PPUSH
4275: LD_STRING D2-Bobby-5
4277: PPUSH
4278: CALL_OW 88
// Say ( JMM , D2-JMM-6 ) ;
4282: LD_EXP 16
4286: PPUSH
4287: LD_STRING D2-JMM-6
4289: PPUSH
4290: CALL_OW 88
// if not powell_contact then
4294: LD_EXP 5
4298: NOT
4299: IFFALSE 4325
// begin Say ( Bobby , D2-Bobby-6 ) ;
4301: LD_EXP 17
4305: PPUSH
4306: LD_STRING D2-Bobby-6
4308: PPUSH
4309: CALL_OW 88
// Say ( JMM , D2-JMM-7 ) ;
4313: LD_EXP 16
4317: PPUSH
4318: LD_STRING D2-JMM-7
4320: PPUSH
4321: CALL_OW 88
// end ; DialogueOff ;
4325: CALL_OW 7
// InGameOff ;
4329: CALL_OW 9
// SetSide ( Bobby , 1 ) ;
4333: LD_EXP 17
4337: PPUSH
4338: LD_INT 1
4340: PPUSH
4341: CALL_OW 235
// ComFree ( [ JMM , Bobby ] ) ;
4345: LD_EXP 16
4349: PUSH
4350: LD_EXP 17
4354: PUSH
4355: EMPTY
4356: LIST
4357: LIST
4358: PPUSH
4359: CALL_OW 139
// bobby_in_squad := true ;
4363: LD_ADDR_EXP 4
4367: PUSH
4368: LD_INT 1
4370: ST_TO_ADDR
// if powell_contact and not cyrus_in_squad then
4371: LD_EXP 5
4375: PUSH
4376: LD_EXP 7
4380: NOT
4381: AND
4382: IFFALSE 4391
// ChangeMissionObjectives ( M2b ) ;
4384: LD_STRING M2b
4386: PPUSH
4387: CALL_OW 337
// end ;
4391: END
// every 0 0$10 trigger active_russian_dialog and Difficulty < 3 do
4392: LD_EXP 3
4396: PUSH
4397: LD_OWVAR 67
4401: PUSH
4402: LD_INT 3
4404: LESS
4405: AND
4406: IFFALSE 4440
4408: GO 4410
4410: DISABLE
// begin wait ( 1 1$00 ) ;
4411: LD_INT 2100
4413: PPUSH
4414: CALL_OW 67
// if not bobby_in_squad then
4418: LD_EXP 4
4422: NOT
4423: IFFALSE 4440
// ComMoveXY ( Bobby , 75 , 83 ) ;
4425: LD_EXP 17
4429: PPUSH
4430: LD_INT 75
4432: PPUSH
4433: LD_INT 83
4435: PPUSH
4436: CALL_OW 111
// end ;
4440: END
// every 0 0$10 trigger cyrus_in_squad and not bobby_in_squad do
4441: LD_EXP 7
4445: PUSH
4446: LD_EXP 4
4450: NOT
4451: AND
4452: IFFALSE 4481
4454: GO 4456
4456: DISABLE
// begin ComMoveXY ( Bobby , 105 , 97 ) ;
4457: LD_EXP 17
4461: PPUSH
4462: LD_INT 105
4464: PPUSH
4465: LD_INT 97
4467: PPUSH
4468: CALL_OW 111
// AddComCrawl ( Bobby ) ;
4472: LD_EXP 17
4476: PPUSH
4477: CALL_OW 197
// end ;
4481: END
// every 0 0$01 trigger IsInArea ( JMM , obstacle_area ) and GetDistUnits ( JMM , Bobby ) < 7 and bobby_in_squad do
4482: LD_EXP 16
4486: PPUSH
4487: LD_INT 6
4489: PPUSH
4490: CALL_OW 308
4494: PUSH
4495: LD_EXP 16
4499: PPUSH
4500: LD_EXP 17
4504: PPUSH
4505: CALL_OW 296
4509: PUSH
4510: LD_INT 7
4512: LESS
4513: AND
4514: PUSH
4515: LD_EXP 4
4519: AND
4520: IFFALSE 4567
4522: GO 4524
4524: DISABLE
// begin ComHold ( [ JMM , Bobby ] ) ;
4525: LD_EXP 16
4529: PUSH
4530: LD_EXP 17
4534: PUSH
4535: EMPTY
4536: LIST
4537: LIST
4538: PPUSH
4539: CALL_OW 140
// Say ( JMM , D2a-JMM-1 ) ;
4543: LD_EXP 16
4547: PPUSH
4548: LD_STRING D2a-JMM-1
4550: PPUSH
4551: CALL_OW 88
// Say ( Bobby , D2a-Bobby-1 ) ;
4555: LD_EXP 17
4559: PPUSH
4560: LD_STRING D2a-Bobby-1
4562: PPUSH
4563: CALL_OW 88
// end ;
4567: END
// every 0 0$50 trigger active_powell_dialog and not See ( 3 , JMM ) do
4568: LD_EXP 15
4572: PUSH
4573: LD_INT 3
4575: PPUSH
4576: LD_EXP 16
4580: PPUSH
4581: CALL_OW 292
4585: NOT
4586: AND
4587: IFFALSE 4758
4589: GO 4591
4591: DISABLE
// begin wait ( 0 0$5 ) ;
4592: LD_INT 175
4594: PPUSH
4595: CALL_OW 67
// InGameOn ;
4599: CALL_OW 8
// DialogueOn ;
4603: CALL_OW 6
// SayRadioNoFace ( Powell , D3-Pow-1 ) ;
4607: LD_EXP 19
4611: PPUSH
4612: LD_STRING D3-Pow-1
4614: PPUSH
4615: CALL_OW 586
// Say ( JMM , D3-JMM-1 ) ;
4619: LD_EXP 16
4623: PPUSH
4624: LD_STRING D3-JMM-1
4626: PPUSH
4627: CALL_OW 88
// SayRadioNoFace ( Powell , D3-Pow-2 ) ;
4631: LD_EXP 19
4635: PPUSH
4636: LD_STRING D3-Pow-2
4638: PPUSH
4639: CALL_OW 586
// Say ( JMM , D3-JMM-2 ) ;
4643: LD_EXP 16
4647: PPUSH
4648: LD_STRING D3-JMM-2
4650: PPUSH
4651: CALL_OW 88
// SayRadioNoFace ( Powell , D3-Pow-3 ) ;
4655: LD_EXP 19
4659: PPUSH
4660: LD_STRING D3-Pow-3
4662: PPUSH
4663: CALL_OW 586
// DialogueOff ;
4667: CALL_OW 7
// InGameOff ;
4671: CALL_OW 9
// powell_contact := true ;
4675: LD_ADDR_EXP 5
4679: PUSH
4680: LD_INT 1
4682: ST_TO_ADDR
// SetAreaMapShow ( exitArea , 1 ) ;
4683: LD_INT 10
4685: PPUSH
4686: LD_INT 1
4688: PPUSH
4689: CALL_OW 424
// uc_side := 4 ;
4693: LD_ADDR_OWVAR 20
4697: PUSH
4698: LD_INT 4
4700: ST_TO_ADDR
// uc_nation := 1 ;
4701: LD_ADDR_OWVAR 21
4705: PUSH
4706: LD_INT 1
4708: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
4709: LD_ADDR_EXP 19
4713: PUSH
4714: LD_STRING Powell
4716: PPUSH
4717: LD_INT 0
4719: PPUSH
4720: LD_STRING 
4722: PPUSH
4723: CALL 26421 0 3
4727: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
4728: LD_STRING M2
4730: PPUSH
4731: CALL_OW 337
// if not bobby_in_squad then
4735: LD_EXP 4
4739: NOT
4740: IFFALSE 4751
// ChangeMissionObjectives ( M2a ) else
4742: LD_STRING M2a
4744: PPUSH
4745: CALL_OW 337
4749: GO 4758
// ChangeMissionObjectives ( M2b ) ;
4751: LD_STRING M2b
4753: PPUSH
4754: CALL_OW 337
// end ;
4758: END
// every 0 0$01 trigger IsInArea ( JMM , fakeArea ) do
4759: LD_EXP 16
4763: PPUSH
4764: LD_INT 7
4766: PPUSH
4767: CALL_OW 308
4771: IFFALSE 4906
4773: GO 4775
4775: DISABLE
// begin DialogueOn ;
4776: CALL_OW 6
// SayRadioNoFace ( fakePokryshkin , D4-Rus3-1 ) ;
4780: LD_EXP 20
4784: PPUSH
4785: LD_STRING D4-Rus3-1
4787: PPUSH
4788: CALL_OW 586
// DialogueOff ;
4792: CALL_OW 7
// ChangeMissionObjectives ( M3a ) ;
4796: LD_STRING M3a
4798: PPUSH
4799: CALL_OW 337
// SetAreaMapShow ( fakeEnd , 1 ) ;
4803: LD_INT 11
4805: PPUSH
4806: LD_INT 1
4808: PPUSH
4809: CALL_OW 424
// Wait ( 0 0$02 ) ;
4813: LD_INT 70
4815: PPUSH
4816: CALL_OW 67
// DialogueOn ;
4820: CALL_OW 6
// SayRadioNoFace ( Powell , D4-Pow-1 ) ;
4824: LD_EXP 19
4828: PPUSH
4829: LD_STRING D4-Pow-1
4831: PPUSH
4832: CALL_OW 586
// DialogueOff ;
4836: CALL_OW 7
// ChangeMissionObjectives ( M3b ) ;
4840: LD_STRING M3b
4842: PPUSH
4843: CALL_OW 337
// case Query ( Q1 ) of 1 :
4847: LD_STRING Q1
4849: PPUSH
4850: CALL_OW 97
4854: PUSH
4855: LD_INT 1
4857: DOUBLE
4858: EQUAL
4859: IFTRUE 4863
4861: GO 4894
4863: POP
// begin macmilan_use_radio := true ;
4864: LD_ADDR_EXP 6
4868: PUSH
4869: LD_INT 1
4871: ST_TO_ADDR
// DialogueOn ;
4872: CALL_OW 6
// Say ( JMM , D4a-JMM-1 ) ;
4876: LD_EXP 16
4880: PPUSH
4881: LD_STRING D4a-JMM-1
4883: PPUSH
4884: CALL_OW 88
// DialogueOff ;
4888: CALL_OW 7
// end ; 2 :
4892: GO 4906
4894: LD_INT 2
4896: DOUBLE
4897: EQUAL
4898: IFTRUE 4902
4900: GO 4905
4902: POP
// ; end ;
4903: GO 4906
4905: POP
// end ;
4906: END
// every 0 0$02 trigger GetDistUnits ( JMM , Cyrus ) < 8 and IsOk ( Cyrus ) do
4907: LD_EXP 16
4911: PPUSH
4912: LD_EXP 18
4916: PPUSH
4917: CALL_OW 296
4921: PUSH
4922: LD_INT 8
4924: LESS
4925: PUSH
4926: LD_EXP 18
4930: PPUSH
4931: CALL_OW 302
4935: AND
4936: IFFALSE 5227
4938: GO 4940
4940: DISABLE
// begin InGameOn ;
4941: CALL_OW 8
// ComMoveXY ( JMM , GetX ( Cyrus ) , GetY ( Cyrus ) ) ;
4945: LD_EXP 16
4949: PPUSH
4950: LD_EXP 18
4954: PPUSH
4955: CALL_OW 250
4959: PPUSH
4960: LD_EXP 18
4964: PPUSH
4965: CALL_OW 251
4969: PPUSH
4970: CALL_OW 111
// if IsOk ( Bobby ) and bobby_in_squad then
4974: LD_EXP 17
4978: PPUSH
4979: CALL_OW 302
4983: PUSH
4984: LD_EXP 4
4988: AND
4989: IFFALSE 5020
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4991: LD_EXP 17
4995: PPUSH
4996: LD_EXP 16
5000: PPUSH
5001: CALL_OW 250
5005: PPUSH
5006: LD_EXP 16
5010: PPUSH
5011: CALL_OW 251
5015: PPUSH
5016: CALL_OW 111
// Say ( JMM , D5-JMM-1 ) ;
5020: LD_EXP 16
5024: PPUSH
5025: LD_STRING D5-JMM-1
5027: PPUSH
5028: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
5032: LD_INT 10
5034: PPUSH
5035: CALL_OW 67
// ComTurnUnit ( JMM , Cyrus ) ;
5039: LD_EXP 16
5043: PPUSH
5044: LD_EXP 18
5048: PPUSH
5049: CALL_OW 119
// ComWalk ( Cyrus ) ;
5053: LD_EXP 18
5057: PPUSH
5058: CALL_OW 138
// ComTurnUnit ( Cyrus , JMM ) ;
5062: LD_EXP 18
5066: PPUSH
5067: LD_EXP 16
5071: PPUSH
5072: CALL_OW 119
// Say ( Cyrus , D5-Cyrus-1 ) ;
5076: LD_EXP 18
5080: PPUSH
5081: LD_STRING D5-Cyrus-1
5083: PPUSH
5084: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5088: LD_EXP 17
5092: PPUSH
5093: CALL_OW 302
5097: PUSH
5098: LD_EXP 4
5102: AND
5103: IFFALSE 5143
// begin ComTurnUnit ( Bobby , Cyrus ) ;
5105: LD_EXP 17
5109: PPUSH
5110: LD_EXP 18
5114: PPUSH
5115: CALL_OW 119
// Say ( Bobby , D5-Bobby-1 ) ;
5119: LD_EXP 17
5123: PPUSH
5124: LD_STRING D5-Bobby-1
5126: PPUSH
5127: CALL_OW 88
// Say ( JMM , D5-JMM-2 ) ;
5131: LD_EXP 16
5135: PPUSH
5136: LD_STRING D5-JMM-2
5138: PPUSH
5139: CALL_OW 88
// end ; InGameOff ;
5143: CALL_OW 9
// cyrus_in_squad := true ;
5147: LD_ADDR_EXP 7
5151: PUSH
5152: LD_INT 1
5154: ST_TO_ADDR
// SetSide ( Cyrus , 1 ) ;
5155: LD_EXP 18
5159: PPUSH
5160: LD_INT 1
5162: PPUSH
5163: CALL_OW 235
// if powell_contact and not bobby_in_squad then
5167: LD_EXP 5
5171: PUSH
5172: LD_EXP 4
5176: NOT
5177: AND
5178: IFFALSE 5187
// ChangeMissionObjectives ( M2b ) ;
5180: LD_STRING M2b
5182: PPUSH
5183: CALL_OW 337
// if not bobby_in_squad and GetSide ( Bobby ) = 4 and IsOk ( Bobby ) then
5187: LD_EXP 4
5191: NOT
5192: PUSH
5193: LD_EXP 17
5197: PPUSH
5198: CALL_OW 255
5202: PUSH
5203: LD_INT 4
5205: EQUAL
5206: AND
5207: PUSH
5208: LD_EXP 17
5212: PPUSH
5213: CALL_OW 302
5217: AND
5218: IFFALSE 5227
// SetAchievement ( ACH_CYRUS ) ;
5220: LD_STRING ACH_CYRUS
5222: PPUSH
5223: CALL_OW 543
// end ;
5227: END
// every 0 0$01 trigger bobby_in_squad and cyrus_in_squad do
5228: LD_EXP 4
5232: PUSH
5233: LD_EXP 7
5237: AND
5238: IFFALSE 5250
5240: GO 5242
5242: DISABLE
// ChangeMissionObjectives ( M2c ) ;
5243: LD_STRING M2c
5245: PPUSH
5246: CALL_OW 337
5250: END
// every 0 0$01 trigger IsInArea ( JMM , trap ) do
5251: LD_EXP 16
5255: PPUSH
5256: LD_INT 8
5258: PPUSH
5259: CALL_OW 308
5263: IFFALSE 5315
5265: GO 5267
5267: DISABLE
// begin macmilan_in_trap := true ;
5268: LD_ADDR_EXP 9
5272: PUSH
5273: LD_INT 1
5275: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
5276: LD_INT 35
5278: PPUSH
5279: CALL_OW 67
// DialogueOn ;
5283: CALL_OW 6
// Say ( Pokryshkin , D5-Pok-1 ) ;
5287: LD_EXP 26
5291: PPUSH
5292: LD_STRING D5-Pok-1
5294: PPUSH
5295: CALL_OW 88
// DialogueOff ;
5299: CALL_OW 7
// Say ( JMM , D4b-JMM-1 ) ;
5303: LD_EXP 16
5307: PPUSH
5308: LD_STRING D4b-JMM-1
5310: PPUSH
5311: CALL_OW 88
// end ;
5315: END
// every 0 0$01 trigger GetDistUnits ( JMM , russian_meta_guards [ russian_meta_guards ] ) < 12 or UnitFilter ( russian_meta_guards , [ f_not , [ f_lives , 990 ] ] ) do var i , hp ;
5316: LD_EXP 16
5320: PPUSH
5321: LD_EXP 24
5325: PUSH
5326: LD_EXP 24
5330: ARRAY
5331: PPUSH
5332: CALL_OW 296
5336: PUSH
5337: LD_INT 12
5339: LESS
5340: PUSH
5341: LD_EXP 24
5345: PPUSH
5346: LD_INT 3
5348: PUSH
5349: LD_INT 24
5351: PUSH
5352: LD_INT 990
5354: PUSH
5355: EMPTY
5356: LIST
5357: LIST
5358: PUSH
5359: EMPTY
5360: LIST
5361: LIST
5362: PPUSH
5363: CALL_OW 72
5367: OR
5368: IFFALSE 5606
5370: GO 5372
5372: DISABLE
5373: LD_INT 0
5375: PPUSH
5376: PPUSH
// begin hp := [ 300 , 250 , 200 , 150 ] [ Difficulty ] ;
5377: LD_ADDR_VAR 0 2
5381: PUSH
5382: LD_INT 300
5384: PUSH
5385: LD_INT 250
5387: PUSH
5388: LD_INT 200
5390: PUSH
5391: LD_INT 150
5393: PUSH
5394: EMPTY
5395: LIST
5396: LIST
5397: LIST
5398: LIST
5399: PUSH
5400: LD_OWVAR 67
5404: ARRAY
5405: ST_TO_ADDR
// for i in russian_meta_guards do
5406: LD_ADDR_VAR 0 1
5410: PUSH
5411: LD_EXP 24
5415: PUSH
5416: FOR_IN
5417: IFFALSE 5457
// if IsOk ( i ) then
5419: LD_VAR 0 1
5423: PPUSH
5424: CALL_OW 302
5428: IFFALSE 5455
// SetLives ( i , GetLives ( i ) - hp ) ;
5430: LD_VAR 0 1
5434: PPUSH
5435: LD_VAR 0 1
5439: PPUSH
5440: CALL_OW 256
5444: PUSH
5445: LD_VAR 0 2
5449: MINUS
5450: PPUSH
5451: CALL_OW 234
5455: GO 5416
5457: POP
5458: POP
// DialogueOn ;
5459: CALL_OW 6
// Say ( russian_meta_guards [ russian_meta_guards ] , D6-FRus1-1 ) ;
5463: LD_EXP 24
5467: PUSH
5468: LD_EXP 24
5472: ARRAY
5473: PPUSH
5474: LD_STRING D6-FRus1-1
5476: PPUSH
5477: CALL_OW 88
// Say ( JMM , D6-JMM-1 ) ;
5481: LD_EXP 16
5485: PPUSH
5486: LD_STRING D6-JMM-1
5488: PPUSH
5489: CALL_OW 88
// if IsOk ( Cyrus ) and cyrus_in_squad then
5493: LD_EXP 18
5497: PPUSH
5498: CALL_OW 302
5502: PUSH
5503: LD_EXP 7
5507: AND
5508: IFFALSE 5522
// Say ( Cyrus , D6-Cyrus-1 ) ;
5510: LD_EXP 18
5514: PPUSH
5515: LD_STRING D6-Cyrus-1
5517: PPUSH
5518: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5522: LD_EXP 17
5526: PPUSH
5527: CALL_OW 302
5531: PUSH
5532: LD_EXP 4
5536: AND
5537: IFFALSE 5551
// Say ( Bobby , D6-Bobby-1 ) ;
5539: LD_EXP 17
5543: PPUSH
5544: LD_STRING D6-Bobby-1
5546: PPUSH
5547: CALL_OW 88
// DialogueOff ;
5551: CALL_OW 7
// Wait ( [ 0 0$04 , 0 0$03 , 0 0$02 , 0 0$02 ] [ Difficulty ] ) ;
5555: LD_INT 140
5557: PUSH
5558: LD_INT 105
5560: PUSH
5561: LD_INT 70
5563: PUSH
5564: LD_INT 70
5566: PUSH
5567: EMPTY
5568: LIST
5569: LIST
5570: LIST
5571: LIST
5572: PUSH
5573: LD_OWVAR 67
5577: ARRAY
5578: PPUSH
5579: CALL_OW 67
// meta_action := true ;
5583: LD_ADDR_EXP 10
5587: PUSH
5588: LD_INT 1
5590: ST_TO_ADDR
// ComAgressiveMove ( russian_meta_guards , 94 , 8 ) ;
5591: LD_EXP 24
5595: PPUSH
5596: LD_INT 94
5598: PPUSH
5599: LD_INT 8
5601: PPUSH
5602: CALL_OW 114
// end ;
5606: PPOPN 2
5608: END
// every 0 0$01 trigger GetDistUnitXY ( JMM , 93 , 1 ) < 5 and FilterAllUnits ( [ f_side , 1 ] ) > 1 do
5609: LD_EXP 16
5613: PPUSH
5614: LD_INT 93
5616: PPUSH
5617: LD_INT 1
5619: PPUSH
5620: CALL_OW 297
5624: PUSH
5625: LD_INT 5
5627: LESS
5628: PUSH
5629: LD_INT 22
5631: PUSH
5632: LD_INT 1
5634: PUSH
5635: EMPTY
5636: LIST
5637: LIST
5638: PPUSH
5639: CALL_OW 69
5643: PUSH
5644: LD_INT 1
5646: GREATER
5647: AND
5648: IFFALSE 5665
5650: GO 5652
5652: DISABLE
// Say ( JMM , D6a-JMM-1 ) ;
5653: LD_EXP 16
5657: PPUSH
5658: LD_STRING D6a-JMM-1
5660: PPUSH
5661: CALL_OW 88
5665: END
// every 0 0$01 trigger IsInArea ( Bobby , exitArea ) do
5666: LD_EXP 17
5670: PPUSH
5671: LD_INT 10
5673: PPUSH
5674: CALL_OW 308
5678: IFFALSE 5727
5680: GO 5682
5682: DISABLE
// begin bobby_saved := true ;
5683: LD_ADDR_EXP 12
5687: PUSH
5688: LD_INT 1
5690: ST_TO_ADDR
// SaveVariable ( GetLives ( Bobby ) , 01_BobbyLifePoints_1 ) ;
5691: LD_EXP 17
5695: PPUSH
5696: CALL_OW 256
5700: PPUSH
5701: LD_STRING 01_BobbyLifePoints_1
5703: PPUSH
5704: CALL_OW 39
// RemoveUnit ( Bobby ) ;
5708: LD_EXP 17
5712: PPUSH
5713: CALL_OW 64
// AddMedal ( Bobby , 1 ) ;
5717: LD_STRING Bobby
5719: PPUSH
5720: LD_INT 1
5722: PPUSH
5723: CALL_OW 101
// end ;
5727: END
// every 0 0$01 trigger IsInArea ( Cyrus , exitArea ) do
5728: LD_EXP 18
5732: PPUSH
5733: LD_INT 10
5735: PPUSH
5736: CALL_OW 308
5740: IFFALSE 5789
5742: GO 5744
5744: DISABLE
// begin cyrus_saved := true ;
5745: LD_ADDR_EXP 13
5749: PUSH
5750: LD_INT 1
5752: ST_TO_ADDR
// SaveVariable ( GetLives ( Cyrus ) , 01_CyrusLifePoints_1 ) ;
5753: LD_EXP 18
5757: PPUSH
5758: CALL_OW 256
5762: PPUSH
5763: LD_STRING 01_CyrusLifePoints_1
5765: PPUSH
5766: CALL_OW 39
// RemoveUnit ( Cyrus ) ;
5770: LD_EXP 18
5774: PPUSH
5775: CALL_OW 64
// AddMedal ( Cyrus , 1 ) ;
5779: LD_STRING Cyrus
5781: PPUSH
5782: LD_INT 1
5784: PPUSH
5785: CALL_OW 101
// end ;
5789: END
// every 0 0$01 trigger IsInArea ( JMM , exitArea ) do var i , to_reward , wait_for_them , m1 , m2 , m3 ;
5790: LD_EXP 16
5794: PPUSH
5795: LD_INT 10
5797: PPUSH
5798: CALL_OW 308
5802: IFFALSE 6410
5804: GO 5806
5806: DISABLE
5807: LD_INT 0
5809: PPUSH
5810: PPUSH
5811: PPUSH
5812: PPUSH
5813: PPUSH
5814: PPUSH
// begin if macmilan_use_radio then
5815: LD_EXP 6
5819: IFFALSE 5828
// SetAchievement ( ACH_RADIO ) ;
5821: LD_STRING ACH_RADIO
5823: PPUSH
5824: CALL_OW 543
// if ( not cyrus_saved and cyrus_in_squad and IsOk ( Cyrus ) ) or ( not bobby_saved and bobby_in_squad and IsOk ( Bobby ) ) then
5828: LD_EXP 13
5832: NOT
5833: PUSH
5834: LD_EXP 7
5838: AND
5839: PUSH
5840: LD_EXP 18
5844: PPUSH
5845: CALL_OW 302
5849: AND
5850: PUSH
5851: LD_EXP 12
5855: NOT
5856: PUSH
5857: LD_EXP 4
5861: AND
5862: PUSH
5863: LD_EXP 17
5867: PPUSH
5868: CALL_OW 302
5872: AND
5873: OR
5874: IFFALSE 5915
// case Query ( Q2 ) of 1 :
5876: LD_STRING Q2
5878: PPUSH
5879: CALL_OW 97
5883: PUSH
5884: LD_INT 1
5886: DOUBLE
5887: EQUAL
5888: IFTRUE 5892
5890: GO 5903
5892: POP
// wait_for_them := true ; 2 :
5893: LD_ADDR_VAR 0 3
5897: PUSH
5898: LD_INT 1
5900: ST_TO_ADDR
5901: GO 5915
5903: LD_INT 2
5905: DOUBLE
5906: EQUAL
5907: IFTRUE 5911
5909: GO 5914
5911: POP
// ; end ;
5912: GO 5915
5914: POP
// if wait_for_them then
5915: LD_VAR 0 3
5919: IFFALSE 6032
// repeat wait ( 0 0$01 ) ;
5921: LD_INT 35
5923: PPUSH
5924: CALL_OW 67
// until ( cyrus_saved and bobby_saved ) or ( cyrus_saved and ( not bobby_in_squad or IsDying ( Bobby ) or IsDead ( Bobby ) ) ) or ( bobby_saved and ( not cyrus_in_squad or IsDying ( Cyrus ) or IsDead ( Cyrus ) ) ) or ( IsDead ( Bobby ) and IsDead ( Cyrus ) ) ;
5928: LD_EXP 13
5932: PUSH
5933: LD_EXP 12
5937: AND
5938: PUSH
5939: LD_EXP 13
5943: PUSH
5944: LD_EXP 4
5948: NOT
5949: PUSH
5950: LD_EXP 17
5954: PPUSH
5955: CALL_OW 303
5959: OR
5960: PUSH
5961: LD_EXP 17
5965: PPUSH
5966: CALL_OW 301
5970: OR
5971: AND
5972: OR
5973: PUSH
5974: LD_EXP 12
5978: PUSH
5979: LD_EXP 7
5983: NOT
5984: PUSH
5985: LD_EXP 18
5989: PPUSH
5990: CALL_OW 303
5994: OR
5995: PUSH
5996: LD_EXP 18
6000: PPUSH
6001: CALL_OW 301
6005: OR
6006: AND
6007: OR
6008: PUSH
6009: LD_EXP 17
6013: PPUSH
6014: CALL_OW 301
6018: PUSH
6019: LD_EXP 18
6023: PPUSH
6024: CALL_OW 301
6028: AND
6029: OR
6030: IFFALSE 5921
// SaveVariable ( GetLives ( JMM ) , 01_JMMLifePoints_1 ) ;
6032: LD_EXP 16
6036: PPUSH
6037: CALL_OW 256
6041: PPUSH
6042: LD_STRING 01_JMMLifePoints_1
6044: PPUSH
6045: CALL_OW 39
// RemoveUnit ( JMM ) ;
6049: LD_EXP 16
6053: PPUSH
6054: CALL_OW 64
// to_reward := [ JMM ] ;
6058: LD_ADDR_VAR 0 2
6062: PUSH
6063: LD_EXP 16
6067: PUSH
6068: EMPTY
6069: LIST
6070: ST_TO_ADDR
// if bobby_saved then
6071: LD_EXP 12
6075: IFFALSE 6093
// to_reward := to_reward ^ Bobby ;
6077: LD_ADDR_VAR 0 2
6081: PUSH
6082: LD_VAR 0 2
6086: PUSH
6087: LD_EXP 17
6091: ADD
6092: ST_TO_ADDR
// if cyrus_saved then
6093: LD_EXP 13
6097: IFFALSE 6115
// to_reward := to_reward ^ Cyrus ;
6099: LD_ADDR_VAR 0 2
6103: PUSH
6104: LD_VAR 0 2
6108: PUSH
6109: LD_EXP 18
6113: ADD
6114: ST_TO_ADDR
// m1 := true ;
6115: LD_ADDR_VAR 0 4
6119: PUSH
6120: LD_INT 1
6122: ST_TO_ADDR
// m2 := bobby_saved ;
6123: LD_ADDR_VAR 0 5
6127: PUSH
6128: LD_EXP 12
6132: ST_TO_ADDR
// m3 := cyrus_saved ;
6133: LD_ADDR_VAR 0 6
6137: PUSH
6138: LD_EXP 13
6142: ST_TO_ADDR
// AddMedal ( JMM , 1 ) ;
6143: LD_STRING JMM
6145: PPUSH
6146: LD_INT 1
6148: PPUSH
6149: CALL_OW 101
// if not bobby_in_squad then
6153: LD_EXP 4
6157: NOT
6158: IFFALSE 6171
// AddMedal ( Bobby , - 1 ) ;
6160: LD_STRING Bobby
6162: PPUSH
6163: LD_INT 1
6165: NEG
6166: PPUSH
6167: CALL_OW 101
// if not bobby_saved and ( IsDying ( Bobby ) or IsDead ( Bobby ) ) then
6171: LD_EXP 12
6175: NOT
6176: PUSH
6177: LD_EXP 17
6181: PPUSH
6182: CALL_OW 303
6186: PUSH
6187: LD_EXP 17
6191: PPUSH
6192: CALL_OW 301
6196: OR
6197: AND
6198: IFFALSE 6211
// AddMedal ( Bobby , - 2 ) ;
6200: LD_STRING Bobby
6202: PPUSH
6203: LD_INT 2
6205: NEG
6206: PPUSH
6207: CALL_OW 101
// if not cyrus_in_squad then
6211: LD_EXP 7
6215: NOT
6216: IFFALSE 6229
// AddMedal ( Cyrus , - 1 ) ;
6218: LD_STRING Cyrus
6220: PPUSH
6221: LD_INT 1
6223: NEG
6224: PPUSH
6225: CALL_OW 101
// if not cyrus_saved and ( IsDying ( Cyrus ) or IsDead ( Cyrus ) ) then
6229: LD_EXP 13
6233: NOT
6234: PUSH
6235: LD_EXP 18
6239: PPUSH
6240: CALL_OW 303
6244: PUSH
6245: LD_EXP 18
6249: PPUSH
6250: CALL_OW 301
6254: OR
6255: AND
6256: IFFALSE 6269
// AddMedal ( Cyrus , - 2 ) ;
6258: LD_STRING Cyrus
6260: PPUSH
6261: LD_INT 2
6263: NEG
6264: PPUSH
6265: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 and m3 then
6269: LD_OWVAR 67
6273: PUSH
6274: LD_INT 3
6276: GREATEREQUAL
6277: PUSH
6278: LD_VAR 0 4
6282: AND
6283: PUSH
6284: LD_VAR 0 5
6288: AND
6289: PUSH
6290: LD_VAR 0 6
6294: AND
6295: IFFALSE 6307
// SetAchievementEX ( ACH_AMER , 1 ) ;
6297: LD_STRING ACH_AMER
6299: PPUSH
6300: LD_INT 1
6302: PPUSH
6303: CALL_OW 564
// GiveMedals ( MAIN ) ;
6307: LD_STRING MAIN
6309: PPUSH
6310: CALL_OW 102
// RewardPeople ( to_reward ) ;
6314: LD_VAR 0 2
6318: PPUSH
6319: CALL_OW 43
// if bobby_saved then
6323: LD_EXP 12
6327: IFFALSE 6347
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
6329: LD_EXP 17
6333: PPUSH
6334: LD_EXP 2
6338: PUSH
6339: LD_STRING Bobby
6341: STR
6342: PPUSH
6343: CALL_OW 38
// if cyrus_saved then
6347: LD_EXP 13
6351: IFFALSE 6371
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
6353: LD_EXP 18
6357: PPUSH
6358: LD_EXP 2
6362: PUSH
6363: LD_STRING Cyrus
6365: STR
6366: PPUSH
6367: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
6371: LD_EXP 16
6375: PPUSH
6376: LD_EXP 2
6380: PUSH
6381: LD_STRING JMM
6383: STR
6384: PPUSH
6385: CALL_OW 38
// if tick <= 3 3$00 then
6389: LD_OWVAR 1
6393: PUSH
6394: LD_INT 6300
6396: LESSEQUAL
6397: IFFALSE 6406
// SetAchievement ( ACH_ASPEED_1 ) ;
6399: LD_STRING ACH_ASPEED_1
6401: PPUSH
6402: CALL_OW 543
// YouWin ;
6406: CALL_OW 103
// end ; end_of_file
6410: PPOPN 6
6412: END
// on UnitGoesToRed ( un ) do begin if un = JMM then
6413: LD_VAR 0 1
6417: PUSH
6418: LD_EXP 16
6422: EQUAL
6423: IFFALSE 6432
// YouLost ( JMM ) ;
6425: LD_STRING JMM
6427: PPUSH
6428: CALL_OW 104
// end ;
6432: PPOPN 1
6434: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
6435: LD_VAR 0 1
6439: PPUSH
6440: LD_VAR 0 2
6444: PPUSH
6445: CALL 22252 0 2
// end ;
6449: PPOPN 2
6451: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
6452: LD_VAR 0 1
6456: PPUSH
6457: CALL 22132 0 1
// if un = JMM then
6461: LD_VAR 0 1
6465: PUSH
6466: LD_EXP 16
6470: EQUAL
6471: IFFALSE 6480
// YouLost ( JMM ) ;
6473: LD_STRING JMM
6475: PPUSH
6476: CALL_OW 104
// end ; end_of_file end_of_file
6480: PPOPN 1
6482: END
// every 0 0$1 do
6483: GO 6485
6485: DISABLE
// begin enable ;
6486: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
6487: LD_STRING updateTimer(
6489: PUSH
6490: LD_OWVAR 1
6494: STR
6495: PUSH
6496: LD_STRING );
6498: STR
6499: PPUSH
6500: CALL_OW 559
// end ;
6504: END
// export function SOS_MapStart ( ) ; begin
6505: LD_INT 0
6507: PPUSH
// if streamModeActive then
6508: LD_EXP 27
6512: IFFALSE 6521
// DefineStreamItems ( true ) ;
6514: LD_INT 1
6516: PPUSH
6517: CALL 8175 0 1
// UpdateFactoryWaypoints ( ) ;
6521: CALL 21036 0 0
// UpdateWarehouseGatheringPoints ( ) ;
6525: CALL 21293 0 0
// end ;
6529: LD_VAR 0 1
6533: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
6534: LD_INT 0
6536: PPUSH
// if p2 = 100 then
6537: LD_VAR 0 2
6541: PUSH
6542: LD_INT 100
6544: EQUAL
6545: IFFALSE 7548
// begin if not StreamModeActive then
6547: LD_EXP 27
6551: NOT
6552: IFFALSE 6562
// StreamModeActive := true ;
6554: LD_ADDR_EXP 27
6558: PUSH
6559: LD_INT 1
6561: ST_TO_ADDR
// if p3 = 0 then
6562: LD_VAR 0 3
6566: PUSH
6567: LD_INT 0
6569: EQUAL
6570: IFFALSE 6576
// InitStreamMode ;
6572: CALL 7711 0 0
// if p3 = 1 then
6576: LD_VAR 0 3
6580: PUSH
6581: LD_INT 1
6583: EQUAL
6584: IFFALSE 6594
// sRocket := true ;
6586: LD_ADDR_EXP 32
6590: PUSH
6591: LD_INT 1
6593: ST_TO_ADDR
// if p3 = 2 then
6594: LD_VAR 0 3
6598: PUSH
6599: LD_INT 2
6601: EQUAL
6602: IFFALSE 6612
// sSpeed := true ;
6604: LD_ADDR_EXP 31
6608: PUSH
6609: LD_INT 1
6611: ST_TO_ADDR
// if p3 = 3 then
6612: LD_VAR 0 3
6616: PUSH
6617: LD_INT 3
6619: EQUAL
6620: IFFALSE 6630
// sEngine := true ;
6622: LD_ADDR_EXP 33
6626: PUSH
6627: LD_INT 1
6629: ST_TO_ADDR
// if p3 = 4 then
6630: LD_VAR 0 3
6634: PUSH
6635: LD_INT 4
6637: EQUAL
6638: IFFALSE 6648
// sSpec := true ;
6640: LD_ADDR_EXP 30
6644: PUSH
6645: LD_INT 1
6647: ST_TO_ADDR
// if p3 = 5 then
6648: LD_VAR 0 3
6652: PUSH
6653: LD_INT 5
6655: EQUAL
6656: IFFALSE 6666
// sLevel := true ;
6658: LD_ADDR_EXP 34
6662: PUSH
6663: LD_INT 1
6665: ST_TO_ADDR
// if p3 = 6 then
6666: LD_VAR 0 3
6670: PUSH
6671: LD_INT 6
6673: EQUAL
6674: IFFALSE 6684
// sArmoury := true ;
6676: LD_ADDR_EXP 35
6680: PUSH
6681: LD_INT 1
6683: ST_TO_ADDR
// if p3 = 7 then
6684: LD_VAR 0 3
6688: PUSH
6689: LD_INT 7
6691: EQUAL
6692: IFFALSE 6702
// sRadar := true ;
6694: LD_ADDR_EXP 36
6698: PUSH
6699: LD_INT 1
6701: ST_TO_ADDR
// if p3 = 8 then
6702: LD_VAR 0 3
6706: PUSH
6707: LD_INT 8
6709: EQUAL
6710: IFFALSE 6720
// sBunker := true ;
6712: LD_ADDR_EXP 37
6716: PUSH
6717: LD_INT 1
6719: ST_TO_ADDR
// if p3 = 9 then
6720: LD_VAR 0 3
6724: PUSH
6725: LD_INT 9
6727: EQUAL
6728: IFFALSE 6738
// sHack := true ;
6730: LD_ADDR_EXP 38
6734: PUSH
6735: LD_INT 1
6737: ST_TO_ADDR
// if p3 = 10 then
6738: LD_VAR 0 3
6742: PUSH
6743: LD_INT 10
6745: EQUAL
6746: IFFALSE 6756
// sFire := true ;
6748: LD_ADDR_EXP 39
6752: PUSH
6753: LD_INT 1
6755: ST_TO_ADDR
// if p3 = 11 then
6756: LD_VAR 0 3
6760: PUSH
6761: LD_INT 11
6763: EQUAL
6764: IFFALSE 6774
// sRefresh := true ;
6766: LD_ADDR_EXP 40
6770: PUSH
6771: LD_INT 1
6773: ST_TO_ADDR
// if p3 = 12 then
6774: LD_VAR 0 3
6778: PUSH
6779: LD_INT 12
6781: EQUAL
6782: IFFALSE 6792
// sExp := true ;
6784: LD_ADDR_EXP 41
6788: PUSH
6789: LD_INT 1
6791: ST_TO_ADDR
// if p3 = 13 then
6792: LD_VAR 0 3
6796: PUSH
6797: LD_INT 13
6799: EQUAL
6800: IFFALSE 6810
// sDepot := true ;
6802: LD_ADDR_EXP 42
6806: PUSH
6807: LD_INT 1
6809: ST_TO_ADDR
// if p3 = 14 then
6810: LD_VAR 0 3
6814: PUSH
6815: LD_INT 14
6817: EQUAL
6818: IFFALSE 6828
// sFlag := true ;
6820: LD_ADDR_EXP 43
6824: PUSH
6825: LD_INT 1
6827: ST_TO_ADDR
// if p3 = 15 then
6828: LD_VAR 0 3
6832: PUSH
6833: LD_INT 15
6835: EQUAL
6836: IFFALSE 6846
// sKamikadze := true ;
6838: LD_ADDR_EXP 51
6842: PUSH
6843: LD_INT 1
6845: ST_TO_ADDR
// if p3 = 16 then
6846: LD_VAR 0 3
6850: PUSH
6851: LD_INT 16
6853: EQUAL
6854: IFFALSE 6864
// sTroll := true ;
6856: LD_ADDR_EXP 52
6860: PUSH
6861: LD_INT 1
6863: ST_TO_ADDR
// if p3 = 17 then
6864: LD_VAR 0 3
6868: PUSH
6869: LD_INT 17
6871: EQUAL
6872: IFFALSE 6882
// sSlow := true ;
6874: LD_ADDR_EXP 53
6878: PUSH
6879: LD_INT 1
6881: ST_TO_ADDR
// if p3 = 18 then
6882: LD_VAR 0 3
6886: PUSH
6887: LD_INT 18
6889: EQUAL
6890: IFFALSE 6900
// sLack := true ;
6892: LD_ADDR_EXP 54
6896: PUSH
6897: LD_INT 1
6899: ST_TO_ADDR
// if p3 = 19 then
6900: LD_VAR 0 3
6904: PUSH
6905: LD_INT 19
6907: EQUAL
6908: IFFALSE 6918
// sTank := true ;
6910: LD_ADDR_EXP 56
6914: PUSH
6915: LD_INT 1
6917: ST_TO_ADDR
// if p3 = 20 then
6918: LD_VAR 0 3
6922: PUSH
6923: LD_INT 20
6925: EQUAL
6926: IFFALSE 6936
// sRemote := true ;
6928: LD_ADDR_EXP 57
6932: PUSH
6933: LD_INT 1
6935: ST_TO_ADDR
// if p3 = 21 then
6936: LD_VAR 0 3
6940: PUSH
6941: LD_INT 21
6943: EQUAL
6944: IFFALSE 6954
// sPowell := true ;
6946: LD_ADDR_EXP 58
6950: PUSH
6951: LD_INT 1
6953: ST_TO_ADDR
// if p3 = 22 then
6954: LD_VAR 0 3
6958: PUSH
6959: LD_INT 22
6961: EQUAL
6962: IFFALSE 6972
// sTeleport := true ;
6964: LD_ADDR_EXP 61
6968: PUSH
6969: LD_INT 1
6971: ST_TO_ADDR
// if p3 = 23 then
6972: LD_VAR 0 3
6976: PUSH
6977: LD_INT 23
6979: EQUAL
6980: IFFALSE 6990
// sOilTower := true ;
6982: LD_ADDR_EXP 63
6986: PUSH
6987: LD_INT 1
6989: ST_TO_ADDR
// if p3 = 24 then
6990: LD_VAR 0 3
6994: PUSH
6995: LD_INT 24
6997: EQUAL
6998: IFFALSE 7008
// sShovel := true ;
7000: LD_ADDR_EXP 64
7004: PUSH
7005: LD_INT 1
7007: ST_TO_ADDR
// if p3 = 25 then
7008: LD_VAR 0 3
7012: PUSH
7013: LD_INT 25
7015: EQUAL
7016: IFFALSE 7026
// sSheik := true ;
7018: LD_ADDR_EXP 65
7022: PUSH
7023: LD_INT 1
7025: ST_TO_ADDR
// if p3 = 26 then
7026: LD_VAR 0 3
7030: PUSH
7031: LD_INT 26
7033: EQUAL
7034: IFFALSE 7044
// sEarthquake := true ;
7036: LD_ADDR_EXP 67
7040: PUSH
7041: LD_INT 1
7043: ST_TO_ADDR
// if p3 = 27 then
7044: LD_VAR 0 3
7048: PUSH
7049: LD_INT 27
7051: EQUAL
7052: IFFALSE 7062
// sAI := true ;
7054: LD_ADDR_EXP 68
7058: PUSH
7059: LD_INT 1
7061: ST_TO_ADDR
// if p3 = 28 then
7062: LD_VAR 0 3
7066: PUSH
7067: LD_INT 28
7069: EQUAL
7070: IFFALSE 7080
// sCargo := true ;
7072: LD_ADDR_EXP 71
7076: PUSH
7077: LD_INT 1
7079: ST_TO_ADDR
// if p3 = 29 then
7080: LD_VAR 0 3
7084: PUSH
7085: LD_INT 29
7087: EQUAL
7088: IFFALSE 7098
// sDLaser := true ;
7090: LD_ADDR_EXP 72
7094: PUSH
7095: LD_INT 1
7097: ST_TO_ADDR
// if p3 = 30 then
7098: LD_VAR 0 3
7102: PUSH
7103: LD_INT 30
7105: EQUAL
7106: IFFALSE 7116
// sExchange := true ;
7108: LD_ADDR_EXP 73
7112: PUSH
7113: LD_INT 1
7115: ST_TO_ADDR
// if p3 = 31 then
7116: LD_VAR 0 3
7120: PUSH
7121: LD_INT 31
7123: EQUAL
7124: IFFALSE 7134
// sFac := true ;
7126: LD_ADDR_EXP 74
7130: PUSH
7131: LD_INT 1
7133: ST_TO_ADDR
// if p3 = 32 then
7134: LD_VAR 0 3
7138: PUSH
7139: LD_INT 32
7141: EQUAL
7142: IFFALSE 7152
// sPower := true ;
7144: LD_ADDR_EXP 75
7148: PUSH
7149: LD_INT 1
7151: ST_TO_ADDR
// if p3 = 33 then
7152: LD_VAR 0 3
7156: PUSH
7157: LD_INT 33
7159: EQUAL
7160: IFFALSE 7170
// sRandom := true ;
7162: LD_ADDR_EXP 76
7166: PUSH
7167: LD_INT 1
7169: ST_TO_ADDR
// if p3 = 34 then
7170: LD_VAR 0 3
7174: PUSH
7175: LD_INT 34
7177: EQUAL
7178: IFFALSE 7188
// sShield := true ;
7180: LD_ADDR_EXP 77
7184: PUSH
7185: LD_INT 1
7187: ST_TO_ADDR
// if p3 = 35 then
7188: LD_VAR 0 3
7192: PUSH
7193: LD_INT 35
7195: EQUAL
7196: IFFALSE 7206
// sTime := true ;
7198: LD_ADDR_EXP 78
7202: PUSH
7203: LD_INT 1
7205: ST_TO_ADDR
// if p3 = 36 then
7206: LD_VAR 0 3
7210: PUSH
7211: LD_INT 36
7213: EQUAL
7214: IFFALSE 7224
// sTools := true ;
7216: LD_ADDR_EXP 79
7220: PUSH
7221: LD_INT 1
7223: ST_TO_ADDR
// if p3 = 101 then
7224: LD_VAR 0 3
7228: PUSH
7229: LD_INT 101
7231: EQUAL
7232: IFFALSE 7242
// sSold := true ;
7234: LD_ADDR_EXP 44
7238: PUSH
7239: LD_INT 1
7241: ST_TO_ADDR
// if p3 = 102 then
7242: LD_VAR 0 3
7246: PUSH
7247: LD_INT 102
7249: EQUAL
7250: IFFALSE 7260
// sDiff := true ;
7252: LD_ADDR_EXP 45
7256: PUSH
7257: LD_INT 1
7259: ST_TO_ADDR
// if p3 = 103 then
7260: LD_VAR 0 3
7264: PUSH
7265: LD_INT 103
7267: EQUAL
7268: IFFALSE 7278
// sFog := true ;
7270: LD_ADDR_EXP 48
7274: PUSH
7275: LD_INT 1
7277: ST_TO_ADDR
// if p3 = 104 then
7278: LD_VAR 0 3
7282: PUSH
7283: LD_INT 104
7285: EQUAL
7286: IFFALSE 7296
// sReset := true ;
7288: LD_ADDR_EXP 49
7292: PUSH
7293: LD_INT 1
7295: ST_TO_ADDR
// if p3 = 105 then
7296: LD_VAR 0 3
7300: PUSH
7301: LD_INT 105
7303: EQUAL
7304: IFFALSE 7314
// sSun := true ;
7306: LD_ADDR_EXP 50
7310: PUSH
7311: LD_INT 1
7313: ST_TO_ADDR
// if p3 = 106 then
7314: LD_VAR 0 3
7318: PUSH
7319: LD_INT 106
7321: EQUAL
7322: IFFALSE 7332
// sTiger := true ;
7324: LD_ADDR_EXP 46
7328: PUSH
7329: LD_INT 1
7331: ST_TO_ADDR
// if p3 = 107 then
7332: LD_VAR 0 3
7336: PUSH
7337: LD_INT 107
7339: EQUAL
7340: IFFALSE 7350
// sBomb := true ;
7342: LD_ADDR_EXP 47
7346: PUSH
7347: LD_INT 1
7349: ST_TO_ADDR
// if p3 = 108 then
7350: LD_VAR 0 3
7354: PUSH
7355: LD_INT 108
7357: EQUAL
7358: IFFALSE 7368
// sWound := true ;
7360: LD_ADDR_EXP 55
7364: PUSH
7365: LD_INT 1
7367: ST_TO_ADDR
// if p3 = 109 then
7368: LD_VAR 0 3
7372: PUSH
7373: LD_INT 109
7375: EQUAL
7376: IFFALSE 7386
// sBetray := true ;
7378: LD_ADDR_EXP 59
7382: PUSH
7383: LD_INT 1
7385: ST_TO_ADDR
// if p3 = 110 then
7386: LD_VAR 0 3
7390: PUSH
7391: LD_INT 110
7393: EQUAL
7394: IFFALSE 7404
// sContamin := true ;
7396: LD_ADDR_EXP 60
7400: PUSH
7401: LD_INT 1
7403: ST_TO_ADDR
// if p3 = 111 then
7404: LD_VAR 0 3
7408: PUSH
7409: LD_INT 111
7411: EQUAL
7412: IFFALSE 7422
// sOil := true ;
7414: LD_ADDR_EXP 62
7418: PUSH
7419: LD_INT 1
7421: ST_TO_ADDR
// if p3 = 112 then
7422: LD_VAR 0 3
7426: PUSH
7427: LD_INT 112
7429: EQUAL
7430: IFFALSE 7440
// sStu := true ;
7432: LD_ADDR_EXP 66
7436: PUSH
7437: LD_INT 1
7439: ST_TO_ADDR
// if p3 = 113 then
7440: LD_VAR 0 3
7444: PUSH
7445: LD_INT 113
7447: EQUAL
7448: IFFALSE 7458
// sBazooka := true ;
7450: LD_ADDR_EXP 69
7454: PUSH
7455: LD_INT 1
7457: ST_TO_ADDR
// if p3 = 114 then
7458: LD_VAR 0 3
7462: PUSH
7463: LD_INT 114
7465: EQUAL
7466: IFFALSE 7476
// sMortar := true ;
7468: LD_ADDR_EXP 70
7472: PUSH
7473: LD_INT 1
7475: ST_TO_ADDR
// if p3 = 115 then
7476: LD_VAR 0 3
7480: PUSH
7481: LD_INT 115
7483: EQUAL
7484: IFFALSE 7494
// sRanger := true ;
7486: LD_ADDR_EXP 80
7490: PUSH
7491: LD_INT 1
7493: ST_TO_ADDR
// if p3 = 116 then
7494: LD_VAR 0 3
7498: PUSH
7499: LD_INT 116
7501: EQUAL
7502: IFFALSE 7512
// sComputer := true ;
7504: LD_ADDR_EXP 81
7508: PUSH
7509: LD_INT 1
7511: ST_TO_ADDR
// if p3 = 117 then
7512: LD_VAR 0 3
7516: PUSH
7517: LD_INT 117
7519: EQUAL
7520: IFFALSE 7530
// s30 := true ;
7522: LD_ADDR_EXP 82
7526: PUSH
7527: LD_INT 1
7529: ST_TO_ADDR
// if p3 = 118 then
7530: LD_VAR 0 3
7534: PUSH
7535: LD_INT 118
7537: EQUAL
7538: IFFALSE 7548
// s60 := true ;
7540: LD_ADDR_EXP 83
7544: PUSH
7545: LD_INT 1
7547: ST_TO_ADDR
// end ; if p2 = 101 then
7548: LD_VAR 0 2
7552: PUSH
7553: LD_INT 101
7555: EQUAL
7556: IFFALSE 7684
// begin case p3 of 1 :
7558: LD_VAR 0 3
7562: PUSH
7563: LD_INT 1
7565: DOUBLE
7566: EQUAL
7567: IFTRUE 7571
7569: GO 7578
7571: POP
// hHackUnlimitedResources ; 2 :
7572: CALL 19782 0 0
7576: GO 7684
7578: LD_INT 2
7580: DOUBLE
7581: EQUAL
7582: IFTRUE 7586
7584: GO 7593
7586: POP
// hHackSetLevel10 ; 3 :
7587: CALL 19915 0 0
7591: GO 7684
7593: LD_INT 3
7595: DOUBLE
7596: EQUAL
7597: IFTRUE 7601
7599: GO 7608
7601: POP
// hHackSetLevel10YourUnits ; 4 :
7602: CALL 20000 0 0
7606: GO 7684
7608: LD_INT 4
7610: DOUBLE
7611: EQUAL
7612: IFTRUE 7616
7614: GO 7623
7616: POP
// hHackInvincible ; 5 :
7617: CALL 20448 0 0
7621: GO 7684
7623: LD_INT 5
7625: DOUBLE
7626: EQUAL
7627: IFTRUE 7631
7629: GO 7638
7631: POP
// hHackInvisible ; 6 :
7632: CALL 20559 0 0
7636: GO 7684
7638: LD_INT 6
7640: DOUBLE
7641: EQUAL
7642: IFTRUE 7646
7644: GO 7653
7646: POP
// hHackChangeYourSide ; 7 :
7647: CALL 20616 0 0
7651: GO 7684
7653: LD_INT 7
7655: DOUBLE
7656: EQUAL
7657: IFTRUE 7661
7659: GO 7668
7661: POP
// hHackChangeUnitSide ; 8 :
7662: CALL 20658 0 0
7666: GO 7684
7668: LD_INT 8
7670: DOUBLE
7671: EQUAL
7672: IFTRUE 7676
7674: GO 7683
7676: POP
// hHackFog ; end ;
7677: CALL 20759 0 0
7681: GO 7684
7683: POP
// end ; end ;
7684: LD_VAR 0 7
7688: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
7689: GO 7691
7691: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
7692: LD_STRING initStreamRollete();
7694: PPUSH
7695: CALL_OW 559
// InitStreamMode ;
7699: CALL 7711 0 0
// DefineStreamItems ( false ) ;
7703: LD_INT 0
7705: PPUSH
7706: CALL 8175 0 1
// end ;
7710: END
// function InitStreamMode ; begin
7711: LD_INT 0
7713: PPUSH
// streamModeActive := false ;
7714: LD_ADDR_EXP 27
7718: PUSH
7719: LD_INT 0
7721: ST_TO_ADDR
// normalCounter := 36 ;
7722: LD_ADDR_EXP 28
7726: PUSH
7727: LD_INT 36
7729: ST_TO_ADDR
// hardcoreCounter := 18 ;
7730: LD_ADDR_EXP 29
7734: PUSH
7735: LD_INT 18
7737: ST_TO_ADDR
// sRocket := false ;
7738: LD_ADDR_EXP 32
7742: PUSH
7743: LD_INT 0
7745: ST_TO_ADDR
// sSpeed := false ;
7746: LD_ADDR_EXP 31
7750: PUSH
7751: LD_INT 0
7753: ST_TO_ADDR
// sEngine := false ;
7754: LD_ADDR_EXP 33
7758: PUSH
7759: LD_INT 0
7761: ST_TO_ADDR
// sSpec := false ;
7762: LD_ADDR_EXP 30
7766: PUSH
7767: LD_INT 0
7769: ST_TO_ADDR
// sLevel := false ;
7770: LD_ADDR_EXP 34
7774: PUSH
7775: LD_INT 0
7777: ST_TO_ADDR
// sArmoury := false ;
7778: LD_ADDR_EXP 35
7782: PUSH
7783: LD_INT 0
7785: ST_TO_ADDR
// sRadar := false ;
7786: LD_ADDR_EXP 36
7790: PUSH
7791: LD_INT 0
7793: ST_TO_ADDR
// sBunker := false ;
7794: LD_ADDR_EXP 37
7798: PUSH
7799: LD_INT 0
7801: ST_TO_ADDR
// sHack := false ;
7802: LD_ADDR_EXP 38
7806: PUSH
7807: LD_INT 0
7809: ST_TO_ADDR
// sFire := false ;
7810: LD_ADDR_EXP 39
7814: PUSH
7815: LD_INT 0
7817: ST_TO_ADDR
// sRefresh := false ;
7818: LD_ADDR_EXP 40
7822: PUSH
7823: LD_INT 0
7825: ST_TO_ADDR
// sExp := false ;
7826: LD_ADDR_EXP 41
7830: PUSH
7831: LD_INT 0
7833: ST_TO_ADDR
// sDepot := false ;
7834: LD_ADDR_EXP 42
7838: PUSH
7839: LD_INT 0
7841: ST_TO_ADDR
// sFlag := false ;
7842: LD_ADDR_EXP 43
7846: PUSH
7847: LD_INT 0
7849: ST_TO_ADDR
// sKamikadze := false ;
7850: LD_ADDR_EXP 51
7854: PUSH
7855: LD_INT 0
7857: ST_TO_ADDR
// sTroll := false ;
7858: LD_ADDR_EXP 52
7862: PUSH
7863: LD_INT 0
7865: ST_TO_ADDR
// sSlow := false ;
7866: LD_ADDR_EXP 53
7870: PUSH
7871: LD_INT 0
7873: ST_TO_ADDR
// sLack := false ;
7874: LD_ADDR_EXP 54
7878: PUSH
7879: LD_INT 0
7881: ST_TO_ADDR
// sTank := false ;
7882: LD_ADDR_EXP 56
7886: PUSH
7887: LD_INT 0
7889: ST_TO_ADDR
// sRemote := false ;
7890: LD_ADDR_EXP 57
7894: PUSH
7895: LD_INT 0
7897: ST_TO_ADDR
// sPowell := false ;
7898: LD_ADDR_EXP 58
7902: PUSH
7903: LD_INT 0
7905: ST_TO_ADDR
// sTeleport := false ;
7906: LD_ADDR_EXP 61
7910: PUSH
7911: LD_INT 0
7913: ST_TO_ADDR
// sOilTower := false ;
7914: LD_ADDR_EXP 63
7918: PUSH
7919: LD_INT 0
7921: ST_TO_ADDR
// sShovel := false ;
7922: LD_ADDR_EXP 64
7926: PUSH
7927: LD_INT 0
7929: ST_TO_ADDR
// sSheik := false ;
7930: LD_ADDR_EXP 65
7934: PUSH
7935: LD_INT 0
7937: ST_TO_ADDR
// sEarthquake := false ;
7938: LD_ADDR_EXP 67
7942: PUSH
7943: LD_INT 0
7945: ST_TO_ADDR
// sAI := false ;
7946: LD_ADDR_EXP 68
7950: PUSH
7951: LD_INT 0
7953: ST_TO_ADDR
// sCargo := false ;
7954: LD_ADDR_EXP 71
7958: PUSH
7959: LD_INT 0
7961: ST_TO_ADDR
// sDLaser := false ;
7962: LD_ADDR_EXP 72
7966: PUSH
7967: LD_INT 0
7969: ST_TO_ADDR
// sExchange := false ;
7970: LD_ADDR_EXP 73
7974: PUSH
7975: LD_INT 0
7977: ST_TO_ADDR
// sFac := false ;
7978: LD_ADDR_EXP 74
7982: PUSH
7983: LD_INT 0
7985: ST_TO_ADDR
// sPower := false ;
7986: LD_ADDR_EXP 75
7990: PUSH
7991: LD_INT 0
7993: ST_TO_ADDR
// sRandom := false ;
7994: LD_ADDR_EXP 76
7998: PUSH
7999: LD_INT 0
8001: ST_TO_ADDR
// sShield := false ;
8002: LD_ADDR_EXP 77
8006: PUSH
8007: LD_INT 0
8009: ST_TO_ADDR
// sTime := false ;
8010: LD_ADDR_EXP 78
8014: PUSH
8015: LD_INT 0
8017: ST_TO_ADDR
// sTools := false ;
8018: LD_ADDR_EXP 79
8022: PUSH
8023: LD_INT 0
8025: ST_TO_ADDR
// sSold := false ;
8026: LD_ADDR_EXP 44
8030: PUSH
8031: LD_INT 0
8033: ST_TO_ADDR
// sDiff := false ;
8034: LD_ADDR_EXP 45
8038: PUSH
8039: LD_INT 0
8041: ST_TO_ADDR
// sFog := false ;
8042: LD_ADDR_EXP 48
8046: PUSH
8047: LD_INT 0
8049: ST_TO_ADDR
// sReset := false ;
8050: LD_ADDR_EXP 49
8054: PUSH
8055: LD_INT 0
8057: ST_TO_ADDR
// sSun := false ;
8058: LD_ADDR_EXP 50
8062: PUSH
8063: LD_INT 0
8065: ST_TO_ADDR
// sTiger := false ;
8066: LD_ADDR_EXP 46
8070: PUSH
8071: LD_INT 0
8073: ST_TO_ADDR
// sBomb := false ;
8074: LD_ADDR_EXP 47
8078: PUSH
8079: LD_INT 0
8081: ST_TO_ADDR
// sWound := false ;
8082: LD_ADDR_EXP 55
8086: PUSH
8087: LD_INT 0
8089: ST_TO_ADDR
// sBetray := false ;
8090: LD_ADDR_EXP 59
8094: PUSH
8095: LD_INT 0
8097: ST_TO_ADDR
// sContamin := false ;
8098: LD_ADDR_EXP 60
8102: PUSH
8103: LD_INT 0
8105: ST_TO_ADDR
// sOil := false ;
8106: LD_ADDR_EXP 62
8110: PUSH
8111: LD_INT 0
8113: ST_TO_ADDR
// sStu := false ;
8114: LD_ADDR_EXP 66
8118: PUSH
8119: LD_INT 0
8121: ST_TO_ADDR
// sBazooka := false ;
8122: LD_ADDR_EXP 69
8126: PUSH
8127: LD_INT 0
8129: ST_TO_ADDR
// sMortar := false ;
8130: LD_ADDR_EXP 70
8134: PUSH
8135: LD_INT 0
8137: ST_TO_ADDR
// sRanger := false ;
8138: LD_ADDR_EXP 80
8142: PUSH
8143: LD_INT 0
8145: ST_TO_ADDR
// sComputer := false ;
8146: LD_ADDR_EXP 81
8150: PUSH
8151: LD_INT 0
8153: ST_TO_ADDR
// s30 := false ;
8154: LD_ADDR_EXP 82
8158: PUSH
8159: LD_INT 0
8161: ST_TO_ADDR
// s60 := false ;
8162: LD_ADDR_EXP 83
8166: PUSH
8167: LD_INT 0
8169: ST_TO_ADDR
// end ;
8170: LD_VAR 0 1
8174: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
8175: LD_INT 0
8177: PPUSH
8178: PPUSH
8179: PPUSH
8180: PPUSH
8181: PPUSH
8182: PPUSH
8183: PPUSH
// result := [ ] ;
8184: LD_ADDR_VAR 0 2
8188: PUSH
8189: EMPTY
8190: ST_TO_ADDR
// if campaign_id = 1 then
8191: LD_OWVAR 69
8195: PUSH
8196: LD_INT 1
8198: EQUAL
8199: IFFALSE 11365
// begin case mission_number of 1 :
8201: LD_OWVAR 70
8205: PUSH
8206: LD_INT 1
8208: DOUBLE
8209: EQUAL
8210: IFTRUE 8214
8212: GO 8290
8214: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
8215: LD_ADDR_VAR 0 2
8219: PUSH
8220: LD_INT 2
8222: PUSH
8223: LD_INT 4
8225: PUSH
8226: LD_INT 11
8228: PUSH
8229: LD_INT 12
8231: PUSH
8232: LD_INT 15
8234: PUSH
8235: LD_INT 16
8237: PUSH
8238: LD_INT 22
8240: PUSH
8241: LD_INT 23
8243: PUSH
8244: LD_INT 26
8246: PUSH
8247: EMPTY
8248: LIST
8249: LIST
8250: LIST
8251: LIST
8252: LIST
8253: LIST
8254: LIST
8255: LIST
8256: LIST
8257: PUSH
8258: LD_INT 101
8260: PUSH
8261: LD_INT 102
8263: PUSH
8264: LD_INT 106
8266: PUSH
8267: LD_INT 116
8269: PUSH
8270: LD_INT 117
8272: PUSH
8273: LD_INT 118
8275: PUSH
8276: EMPTY
8277: LIST
8278: LIST
8279: LIST
8280: LIST
8281: LIST
8282: LIST
8283: PUSH
8284: EMPTY
8285: LIST
8286: LIST
8287: ST_TO_ADDR
8288: GO 11363
8290: LD_INT 2
8292: DOUBLE
8293: EQUAL
8294: IFTRUE 8298
8296: GO 8382
8298: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
8299: LD_ADDR_VAR 0 2
8303: PUSH
8304: LD_INT 2
8306: PUSH
8307: LD_INT 4
8309: PUSH
8310: LD_INT 11
8312: PUSH
8313: LD_INT 12
8315: PUSH
8316: LD_INT 15
8318: PUSH
8319: LD_INT 16
8321: PUSH
8322: LD_INT 22
8324: PUSH
8325: LD_INT 23
8327: PUSH
8328: LD_INT 26
8330: PUSH
8331: EMPTY
8332: LIST
8333: LIST
8334: LIST
8335: LIST
8336: LIST
8337: LIST
8338: LIST
8339: LIST
8340: LIST
8341: PUSH
8342: LD_INT 101
8344: PUSH
8345: LD_INT 102
8347: PUSH
8348: LD_INT 105
8350: PUSH
8351: LD_INT 106
8353: PUSH
8354: LD_INT 108
8356: PUSH
8357: LD_INT 116
8359: PUSH
8360: LD_INT 117
8362: PUSH
8363: LD_INT 118
8365: PUSH
8366: EMPTY
8367: LIST
8368: LIST
8369: LIST
8370: LIST
8371: LIST
8372: LIST
8373: LIST
8374: LIST
8375: PUSH
8376: EMPTY
8377: LIST
8378: LIST
8379: ST_TO_ADDR
8380: GO 11363
8382: LD_INT 3
8384: DOUBLE
8385: EQUAL
8386: IFTRUE 8390
8388: GO 8478
8390: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
8391: LD_ADDR_VAR 0 2
8395: PUSH
8396: LD_INT 2
8398: PUSH
8399: LD_INT 4
8401: PUSH
8402: LD_INT 5
8404: PUSH
8405: LD_INT 11
8407: PUSH
8408: LD_INT 12
8410: PUSH
8411: LD_INT 15
8413: PUSH
8414: LD_INT 16
8416: PUSH
8417: LD_INT 22
8419: PUSH
8420: LD_INT 26
8422: PUSH
8423: LD_INT 36
8425: PUSH
8426: EMPTY
8427: LIST
8428: LIST
8429: LIST
8430: LIST
8431: LIST
8432: LIST
8433: LIST
8434: LIST
8435: LIST
8436: LIST
8437: PUSH
8438: LD_INT 101
8440: PUSH
8441: LD_INT 102
8443: PUSH
8444: LD_INT 105
8446: PUSH
8447: LD_INT 106
8449: PUSH
8450: LD_INT 108
8452: PUSH
8453: LD_INT 116
8455: PUSH
8456: LD_INT 117
8458: PUSH
8459: LD_INT 118
8461: PUSH
8462: EMPTY
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: LIST
8468: LIST
8469: LIST
8470: LIST
8471: PUSH
8472: EMPTY
8473: LIST
8474: LIST
8475: ST_TO_ADDR
8476: GO 11363
8478: LD_INT 4
8480: DOUBLE
8481: EQUAL
8482: IFTRUE 8486
8484: GO 8582
8486: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
8487: LD_ADDR_VAR 0 2
8491: PUSH
8492: LD_INT 2
8494: PUSH
8495: LD_INT 4
8497: PUSH
8498: LD_INT 5
8500: PUSH
8501: LD_INT 8
8503: PUSH
8504: LD_INT 11
8506: PUSH
8507: LD_INT 12
8509: PUSH
8510: LD_INT 15
8512: PUSH
8513: LD_INT 16
8515: PUSH
8516: LD_INT 22
8518: PUSH
8519: LD_INT 23
8521: PUSH
8522: LD_INT 26
8524: PUSH
8525: LD_INT 36
8527: PUSH
8528: EMPTY
8529: LIST
8530: LIST
8531: LIST
8532: LIST
8533: LIST
8534: LIST
8535: LIST
8536: LIST
8537: LIST
8538: LIST
8539: LIST
8540: LIST
8541: PUSH
8542: LD_INT 101
8544: PUSH
8545: LD_INT 102
8547: PUSH
8548: LD_INT 105
8550: PUSH
8551: LD_INT 106
8553: PUSH
8554: LD_INT 108
8556: PUSH
8557: LD_INT 116
8559: PUSH
8560: LD_INT 117
8562: PUSH
8563: LD_INT 118
8565: PUSH
8566: EMPTY
8567: LIST
8568: LIST
8569: LIST
8570: LIST
8571: LIST
8572: LIST
8573: LIST
8574: LIST
8575: PUSH
8576: EMPTY
8577: LIST
8578: LIST
8579: ST_TO_ADDR
8580: GO 11363
8582: LD_INT 5
8584: DOUBLE
8585: EQUAL
8586: IFTRUE 8590
8588: GO 8702
8590: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
8591: LD_ADDR_VAR 0 2
8595: PUSH
8596: LD_INT 2
8598: PUSH
8599: LD_INT 4
8601: PUSH
8602: LD_INT 5
8604: PUSH
8605: LD_INT 6
8607: PUSH
8608: LD_INT 8
8610: PUSH
8611: LD_INT 11
8613: PUSH
8614: LD_INT 12
8616: PUSH
8617: LD_INT 15
8619: PUSH
8620: LD_INT 16
8622: PUSH
8623: LD_INT 22
8625: PUSH
8626: LD_INT 23
8628: PUSH
8629: LD_INT 25
8631: PUSH
8632: LD_INT 26
8634: PUSH
8635: LD_INT 36
8637: PUSH
8638: EMPTY
8639: LIST
8640: LIST
8641: LIST
8642: LIST
8643: LIST
8644: LIST
8645: LIST
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: LIST
8651: LIST
8652: LIST
8653: PUSH
8654: LD_INT 101
8656: PUSH
8657: LD_INT 102
8659: PUSH
8660: LD_INT 105
8662: PUSH
8663: LD_INT 106
8665: PUSH
8666: LD_INT 108
8668: PUSH
8669: LD_INT 109
8671: PUSH
8672: LD_INT 112
8674: PUSH
8675: LD_INT 116
8677: PUSH
8678: LD_INT 117
8680: PUSH
8681: LD_INT 118
8683: PUSH
8684: EMPTY
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: LIST
8695: PUSH
8696: EMPTY
8697: LIST
8698: LIST
8699: ST_TO_ADDR
8700: GO 11363
8702: LD_INT 6
8704: DOUBLE
8705: EQUAL
8706: IFTRUE 8710
8708: GO 8842
8710: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
8711: LD_ADDR_VAR 0 2
8715: PUSH
8716: LD_INT 2
8718: PUSH
8719: LD_INT 4
8721: PUSH
8722: LD_INT 5
8724: PUSH
8725: LD_INT 6
8727: PUSH
8728: LD_INT 8
8730: PUSH
8731: LD_INT 11
8733: PUSH
8734: LD_INT 12
8736: PUSH
8737: LD_INT 15
8739: PUSH
8740: LD_INT 16
8742: PUSH
8743: LD_INT 20
8745: PUSH
8746: LD_INT 21
8748: PUSH
8749: LD_INT 22
8751: PUSH
8752: LD_INT 23
8754: PUSH
8755: LD_INT 25
8757: PUSH
8758: LD_INT 26
8760: PUSH
8761: LD_INT 30
8763: PUSH
8764: LD_INT 31
8766: PUSH
8767: LD_INT 32
8769: PUSH
8770: LD_INT 36
8772: PUSH
8773: EMPTY
8774: LIST
8775: LIST
8776: LIST
8777: LIST
8778: LIST
8779: LIST
8780: LIST
8781: LIST
8782: LIST
8783: LIST
8784: LIST
8785: LIST
8786: LIST
8787: LIST
8788: LIST
8789: LIST
8790: LIST
8791: LIST
8792: LIST
8793: PUSH
8794: LD_INT 101
8796: PUSH
8797: LD_INT 102
8799: PUSH
8800: LD_INT 105
8802: PUSH
8803: LD_INT 106
8805: PUSH
8806: LD_INT 108
8808: PUSH
8809: LD_INT 109
8811: PUSH
8812: LD_INT 112
8814: PUSH
8815: LD_INT 116
8817: PUSH
8818: LD_INT 117
8820: PUSH
8821: LD_INT 118
8823: PUSH
8824: EMPTY
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: LIST
8831: LIST
8832: LIST
8833: LIST
8834: LIST
8835: PUSH
8836: EMPTY
8837: LIST
8838: LIST
8839: ST_TO_ADDR
8840: GO 11363
8842: LD_INT 7
8844: DOUBLE
8845: EQUAL
8846: IFTRUE 8850
8848: GO 8962
8850: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
8851: LD_ADDR_VAR 0 2
8855: PUSH
8856: LD_INT 2
8858: PUSH
8859: LD_INT 4
8861: PUSH
8862: LD_INT 5
8864: PUSH
8865: LD_INT 7
8867: PUSH
8868: LD_INT 11
8870: PUSH
8871: LD_INT 12
8873: PUSH
8874: LD_INT 15
8876: PUSH
8877: LD_INT 16
8879: PUSH
8880: LD_INT 20
8882: PUSH
8883: LD_INT 21
8885: PUSH
8886: LD_INT 22
8888: PUSH
8889: LD_INT 23
8891: PUSH
8892: LD_INT 25
8894: PUSH
8895: LD_INT 26
8897: PUSH
8898: EMPTY
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: PUSH
8914: LD_INT 101
8916: PUSH
8917: LD_INT 102
8919: PUSH
8920: LD_INT 103
8922: PUSH
8923: LD_INT 105
8925: PUSH
8926: LD_INT 106
8928: PUSH
8929: LD_INT 108
8931: PUSH
8932: LD_INT 112
8934: PUSH
8935: LD_INT 116
8937: PUSH
8938: LD_INT 117
8940: PUSH
8941: LD_INT 118
8943: PUSH
8944: EMPTY
8945: LIST
8946: LIST
8947: LIST
8948: LIST
8949: LIST
8950: LIST
8951: LIST
8952: LIST
8953: LIST
8954: LIST
8955: PUSH
8956: EMPTY
8957: LIST
8958: LIST
8959: ST_TO_ADDR
8960: GO 11363
8962: LD_INT 8
8964: DOUBLE
8965: EQUAL
8966: IFTRUE 8970
8968: GO 9110
8970: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
8971: LD_ADDR_VAR 0 2
8975: PUSH
8976: LD_INT 2
8978: PUSH
8979: LD_INT 4
8981: PUSH
8982: LD_INT 5
8984: PUSH
8985: LD_INT 6
8987: PUSH
8988: LD_INT 7
8990: PUSH
8991: LD_INT 8
8993: PUSH
8994: LD_INT 11
8996: PUSH
8997: LD_INT 12
8999: PUSH
9000: LD_INT 15
9002: PUSH
9003: LD_INT 16
9005: PUSH
9006: LD_INT 20
9008: PUSH
9009: LD_INT 21
9011: PUSH
9012: LD_INT 22
9014: PUSH
9015: LD_INT 23
9017: PUSH
9018: LD_INT 25
9020: PUSH
9021: LD_INT 26
9023: PUSH
9024: LD_INT 30
9026: PUSH
9027: LD_INT 31
9029: PUSH
9030: LD_INT 32
9032: PUSH
9033: LD_INT 36
9035: PUSH
9036: EMPTY
9037: LIST
9038: LIST
9039: LIST
9040: LIST
9041: LIST
9042: LIST
9043: LIST
9044: LIST
9045: LIST
9046: LIST
9047: LIST
9048: LIST
9049: LIST
9050: LIST
9051: LIST
9052: LIST
9053: LIST
9054: LIST
9055: LIST
9056: LIST
9057: PUSH
9058: LD_INT 101
9060: PUSH
9061: LD_INT 102
9063: PUSH
9064: LD_INT 103
9066: PUSH
9067: LD_INT 105
9069: PUSH
9070: LD_INT 106
9072: PUSH
9073: LD_INT 108
9075: PUSH
9076: LD_INT 109
9078: PUSH
9079: LD_INT 112
9081: PUSH
9082: LD_INT 116
9084: PUSH
9085: LD_INT 117
9087: PUSH
9088: LD_INT 118
9090: PUSH
9091: EMPTY
9092: LIST
9093: LIST
9094: LIST
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: LIST
9100: LIST
9101: LIST
9102: LIST
9103: PUSH
9104: EMPTY
9105: LIST
9106: LIST
9107: ST_TO_ADDR
9108: GO 11363
9110: LD_INT 9
9112: DOUBLE
9113: EQUAL
9114: IFTRUE 9118
9116: GO 9266
9118: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
9119: LD_ADDR_VAR 0 2
9123: PUSH
9124: LD_INT 2
9126: PUSH
9127: LD_INT 4
9129: PUSH
9130: LD_INT 5
9132: PUSH
9133: LD_INT 6
9135: PUSH
9136: LD_INT 7
9138: PUSH
9139: LD_INT 8
9141: PUSH
9142: LD_INT 11
9144: PUSH
9145: LD_INT 12
9147: PUSH
9148: LD_INT 15
9150: PUSH
9151: LD_INT 16
9153: PUSH
9154: LD_INT 20
9156: PUSH
9157: LD_INT 21
9159: PUSH
9160: LD_INT 22
9162: PUSH
9163: LD_INT 23
9165: PUSH
9166: LD_INT 25
9168: PUSH
9169: LD_INT 26
9171: PUSH
9172: LD_INT 28
9174: PUSH
9175: LD_INT 30
9177: PUSH
9178: LD_INT 31
9180: PUSH
9181: LD_INT 32
9183: PUSH
9184: LD_INT 36
9186: PUSH
9187: EMPTY
9188: LIST
9189: LIST
9190: LIST
9191: LIST
9192: LIST
9193: LIST
9194: LIST
9195: LIST
9196: LIST
9197: LIST
9198: LIST
9199: LIST
9200: LIST
9201: LIST
9202: LIST
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: LIST
9208: LIST
9209: PUSH
9210: LD_INT 101
9212: PUSH
9213: LD_INT 102
9215: PUSH
9216: LD_INT 103
9218: PUSH
9219: LD_INT 105
9221: PUSH
9222: LD_INT 106
9224: PUSH
9225: LD_INT 108
9227: PUSH
9228: LD_INT 109
9230: PUSH
9231: LD_INT 112
9233: PUSH
9234: LD_INT 114
9236: PUSH
9237: LD_INT 116
9239: PUSH
9240: LD_INT 117
9242: PUSH
9243: LD_INT 118
9245: PUSH
9246: EMPTY
9247: LIST
9248: LIST
9249: LIST
9250: LIST
9251: LIST
9252: LIST
9253: LIST
9254: LIST
9255: LIST
9256: LIST
9257: LIST
9258: LIST
9259: PUSH
9260: EMPTY
9261: LIST
9262: LIST
9263: ST_TO_ADDR
9264: GO 11363
9266: LD_INT 10
9268: DOUBLE
9269: EQUAL
9270: IFTRUE 9274
9272: GO 9470
9274: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
9275: LD_ADDR_VAR 0 2
9279: PUSH
9280: LD_INT 2
9282: PUSH
9283: LD_INT 4
9285: PUSH
9286: LD_INT 5
9288: PUSH
9289: LD_INT 6
9291: PUSH
9292: LD_INT 7
9294: PUSH
9295: LD_INT 8
9297: PUSH
9298: LD_INT 9
9300: PUSH
9301: LD_INT 10
9303: PUSH
9304: LD_INT 11
9306: PUSH
9307: LD_INT 12
9309: PUSH
9310: LD_INT 13
9312: PUSH
9313: LD_INT 14
9315: PUSH
9316: LD_INT 15
9318: PUSH
9319: LD_INT 16
9321: PUSH
9322: LD_INT 17
9324: PUSH
9325: LD_INT 18
9327: PUSH
9328: LD_INT 19
9330: PUSH
9331: LD_INT 20
9333: PUSH
9334: LD_INT 21
9336: PUSH
9337: LD_INT 22
9339: PUSH
9340: LD_INT 23
9342: PUSH
9343: LD_INT 24
9345: PUSH
9346: LD_INT 25
9348: PUSH
9349: LD_INT 26
9351: PUSH
9352: LD_INT 28
9354: PUSH
9355: LD_INT 30
9357: PUSH
9358: LD_INT 31
9360: PUSH
9361: LD_INT 32
9363: PUSH
9364: LD_INT 36
9366: PUSH
9367: EMPTY
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: LIST
9391: LIST
9392: LIST
9393: LIST
9394: LIST
9395: LIST
9396: LIST
9397: PUSH
9398: LD_INT 101
9400: PUSH
9401: LD_INT 102
9403: PUSH
9404: LD_INT 103
9406: PUSH
9407: LD_INT 104
9409: PUSH
9410: LD_INT 105
9412: PUSH
9413: LD_INT 106
9415: PUSH
9416: LD_INT 107
9418: PUSH
9419: LD_INT 108
9421: PUSH
9422: LD_INT 109
9424: PUSH
9425: LD_INT 110
9427: PUSH
9428: LD_INT 111
9430: PUSH
9431: LD_INT 112
9433: PUSH
9434: LD_INT 114
9436: PUSH
9437: LD_INT 116
9439: PUSH
9440: LD_INT 117
9442: PUSH
9443: LD_INT 118
9445: PUSH
9446: EMPTY
9447: LIST
9448: LIST
9449: LIST
9450: LIST
9451: LIST
9452: LIST
9453: LIST
9454: LIST
9455: LIST
9456: LIST
9457: LIST
9458: LIST
9459: LIST
9460: LIST
9461: LIST
9462: LIST
9463: PUSH
9464: EMPTY
9465: LIST
9466: LIST
9467: ST_TO_ADDR
9468: GO 11363
9470: LD_INT 11
9472: DOUBLE
9473: EQUAL
9474: IFTRUE 9478
9476: GO 9682
9478: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
9479: LD_ADDR_VAR 0 2
9483: PUSH
9484: LD_INT 2
9486: PUSH
9487: LD_INT 3
9489: PUSH
9490: LD_INT 4
9492: PUSH
9493: LD_INT 5
9495: PUSH
9496: LD_INT 6
9498: PUSH
9499: LD_INT 7
9501: PUSH
9502: LD_INT 8
9504: PUSH
9505: LD_INT 9
9507: PUSH
9508: LD_INT 10
9510: PUSH
9511: LD_INT 11
9513: PUSH
9514: LD_INT 12
9516: PUSH
9517: LD_INT 13
9519: PUSH
9520: LD_INT 14
9522: PUSH
9523: LD_INT 15
9525: PUSH
9526: LD_INT 16
9528: PUSH
9529: LD_INT 17
9531: PUSH
9532: LD_INT 18
9534: PUSH
9535: LD_INT 19
9537: PUSH
9538: LD_INT 20
9540: PUSH
9541: LD_INT 21
9543: PUSH
9544: LD_INT 22
9546: PUSH
9547: LD_INT 23
9549: PUSH
9550: LD_INT 24
9552: PUSH
9553: LD_INT 25
9555: PUSH
9556: LD_INT 26
9558: PUSH
9559: LD_INT 28
9561: PUSH
9562: LD_INT 30
9564: PUSH
9565: LD_INT 31
9567: PUSH
9568: LD_INT 32
9570: PUSH
9571: LD_INT 34
9573: PUSH
9574: LD_INT 36
9576: PUSH
9577: EMPTY
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: PUSH
9610: LD_INT 101
9612: PUSH
9613: LD_INT 102
9615: PUSH
9616: LD_INT 103
9618: PUSH
9619: LD_INT 104
9621: PUSH
9622: LD_INT 105
9624: PUSH
9625: LD_INT 106
9627: PUSH
9628: LD_INT 107
9630: PUSH
9631: LD_INT 108
9633: PUSH
9634: LD_INT 109
9636: PUSH
9637: LD_INT 110
9639: PUSH
9640: LD_INT 111
9642: PUSH
9643: LD_INT 112
9645: PUSH
9646: LD_INT 114
9648: PUSH
9649: LD_INT 116
9651: PUSH
9652: LD_INT 117
9654: PUSH
9655: LD_INT 118
9657: PUSH
9658: EMPTY
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: LIST
9675: PUSH
9676: EMPTY
9677: LIST
9678: LIST
9679: ST_TO_ADDR
9680: GO 11363
9682: LD_INT 12
9684: DOUBLE
9685: EQUAL
9686: IFTRUE 9690
9688: GO 9910
9690: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
9691: LD_ADDR_VAR 0 2
9695: PUSH
9696: LD_INT 1
9698: PUSH
9699: LD_INT 2
9701: PUSH
9702: LD_INT 3
9704: PUSH
9705: LD_INT 4
9707: PUSH
9708: LD_INT 5
9710: PUSH
9711: LD_INT 6
9713: PUSH
9714: LD_INT 7
9716: PUSH
9717: LD_INT 8
9719: PUSH
9720: LD_INT 9
9722: PUSH
9723: LD_INT 10
9725: PUSH
9726: LD_INT 11
9728: PUSH
9729: LD_INT 12
9731: PUSH
9732: LD_INT 13
9734: PUSH
9735: LD_INT 14
9737: PUSH
9738: LD_INT 15
9740: PUSH
9741: LD_INT 16
9743: PUSH
9744: LD_INT 17
9746: PUSH
9747: LD_INT 18
9749: PUSH
9750: LD_INT 19
9752: PUSH
9753: LD_INT 20
9755: PUSH
9756: LD_INT 21
9758: PUSH
9759: LD_INT 22
9761: PUSH
9762: LD_INT 23
9764: PUSH
9765: LD_INT 24
9767: PUSH
9768: LD_INT 25
9770: PUSH
9771: LD_INT 26
9773: PUSH
9774: LD_INT 27
9776: PUSH
9777: LD_INT 28
9779: PUSH
9780: LD_INT 30
9782: PUSH
9783: LD_INT 31
9785: PUSH
9786: LD_INT 32
9788: PUSH
9789: LD_INT 33
9791: PUSH
9792: LD_INT 34
9794: PUSH
9795: LD_INT 36
9797: PUSH
9798: EMPTY
9799: LIST
9800: LIST
9801: LIST
9802: LIST
9803: LIST
9804: LIST
9805: LIST
9806: LIST
9807: LIST
9808: LIST
9809: LIST
9810: LIST
9811: LIST
9812: LIST
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: LIST
9833: PUSH
9834: LD_INT 101
9836: PUSH
9837: LD_INT 102
9839: PUSH
9840: LD_INT 103
9842: PUSH
9843: LD_INT 104
9845: PUSH
9846: LD_INT 105
9848: PUSH
9849: LD_INT 106
9851: PUSH
9852: LD_INT 107
9854: PUSH
9855: LD_INT 108
9857: PUSH
9858: LD_INT 109
9860: PUSH
9861: LD_INT 110
9863: PUSH
9864: LD_INT 111
9866: PUSH
9867: LD_INT 112
9869: PUSH
9870: LD_INT 113
9872: PUSH
9873: LD_INT 114
9875: PUSH
9876: LD_INT 116
9878: PUSH
9879: LD_INT 117
9881: PUSH
9882: LD_INT 118
9884: PUSH
9885: EMPTY
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: LIST
9901: LIST
9902: LIST
9903: PUSH
9904: EMPTY
9905: LIST
9906: LIST
9907: ST_TO_ADDR
9908: GO 11363
9910: LD_INT 13
9912: DOUBLE
9913: EQUAL
9914: IFTRUE 9918
9916: GO 10126
9918: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
9919: LD_ADDR_VAR 0 2
9923: PUSH
9924: LD_INT 1
9926: PUSH
9927: LD_INT 2
9929: PUSH
9930: LD_INT 3
9932: PUSH
9933: LD_INT 4
9935: PUSH
9936: LD_INT 5
9938: PUSH
9939: LD_INT 8
9941: PUSH
9942: LD_INT 9
9944: PUSH
9945: LD_INT 10
9947: PUSH
9948: LD_INT 11
9950: PUSH
9951: LD_INT 12
9953: PUSH
9954: LD_INT 14
9956: PUSH
9957: LD_INT 15
9959: PUSH
9960: LD_INT 16
9962: PUSH
9963: LD_INT 17
9965: PUSH
9966: LD_INT 18
9968: PUSH
9969: LD_INT 19
9971: PUSH
9972: LD_INT 20
9974: PUSH
9975: LD_INT 21
9977: PUSH
9978: LD_INT 22
9980: PUSH
9981: LD_INT 23
9983: PUSH
9984: LD_INT 24
9986: PUSH
9987: LD_INT 25
9989: PUSH
9990: LD_INT 26
9992: PUSH
9993: LD_INT 27
9995: PUSH
9996: LD_INT 28
9998: PUSH
9999: LD_INT 30
10001: PUSH
10002: LD_INT 31
10004: PUSH
10005: LD_INT 32
10007: PUSH
10008: LD_INT 33
10010: PUSH
10011: LD_INT 34
10013: PUSH
10014: LD_INT 36
10016: PUSH
10017: EMPTY
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: LIST
10024: LIST
10025: LIST
10026: LIST
10027: LIST
10028: LIST
10029: LIST
10030: LIST
10031: LIST
10032: LIST
10033: LIST
10034: LIST
10035: LIST
10036: LIST
10037: LIST
10038: LIST
10039: LIST
10040: LIST
10041: LIST
10042: LIST
10043: LIST
10044: LIST
10045: LIST
10046: LIST
10047: LIST
10048: LIST
10049: PUSH
10050: LD_INT 101
10052: PUSH
10053: LD_INT 102
10055: PUSH
10056: LD_INT 103
10058: PUSH
10059: LD_INT 104
10061: PUSH
10062: LD_INT 105
10064: PUSH
10065: LD_INT 106
10067: PUSH
10068: LD_INT 107
10070: PUSH
10071: LD_INT 108
10073: PUSH
10074: LD_INT 109
10076: PUSH
10077: LD_INT 110
10079: PUSH
10080: LD_INT 111
10082: PUSH
10083: LD_INT 112
10085: PUSH
10086: LD_INT 113
10088: PUSH
10089: LD_INT 114
10091: PUSH
10092: LD_INT 116
10094: PUSH
10095: LD_INT 117
10097: PUSH
10098: LD_INT 118
10100: PUSH
10101: EMPTY
10102: LIST
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: PUSH
10120: EMPTY
10121: LIST
10122: LIST
10123: ST_TO_ADDR
10124: GO 11363
10126: LD_INT 14
10128: DOUBLE
10129: EQUAL
10130: IFTRUE 10134
10132: GO 10358
10134: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
10135: LD_ADDR_VAR 0 2
10139: PUSH
10140: LD_INT 1
10142: PUSH
10143: LD_INT 2
10145: PUSH
10146: LD_INT 3
10148: PUSH
10149: LD_INT 4
10151: PUSH
10152: LD_INT 5
10154: PUSH
10155: LD_INT 6
10157: PUSH
10158: LD_INT 7
10160: PUSH
10161: LD_INT 8
10163: PUSH
10164: LD_INT 9
10166: PUSH
10167: LD_INT 10
10169: PUSH
10170: LD_INT 11
10172: PUSH
10173: LD_INT 12
10175: PUSH
10176: LD_INT 13
10178: PUSH
10179: LD_INT 14
10181: PUSH
10182: LD_INT 15
10184: PUSH
10185: LD_INT 16
10187: PUSH
10188: LD_INT 17
10190: PUSH
10191: LD_INT 18
10193: PUSH
10194: LD_INT 19
10196: PUSH
10197: LD_INT 20
10199: PUSH
10200: LD_INT 21
10202: PUSH
10203: LD_INT 22
10205: PUSH
10206: LD_INT 23
10208: PUSH
10209: LD_INT 24
10211: PUSH
10212: LD_INT 25
10214: PUSH
10215: LD_INT 26
10217: PUSH
10218: LD_INT 27
10220: PUSH
10221: LD_INT 28
10223: PUSH
10224: LD_INT 29
10226: PUSH
10227: LD_INT 30
10229: PUSH
10230: LD_INT 31
10232: PUSH
10233: LD_INT 32
10235: PUSH
10236: LD_INT 33
10238: PUSH
10239: LD_INT 34
10241: PUSH
10242: LD_INT 36
10244: PUSH
10245: EMPTY
10246: LIST
10247: LIST
10248: LIST
10249: LIST
10250: LIST
10251: LIST
10252: LIST
10253: LIST
10254: LIST
10255: LIST
10256: LIST
10257: LIST
10258: LIST
10259: LIST
10260: LIST
10261: LIST
10262: LIST
10263: LIST
10264: LIST
10265: LIST
10266: LIST
10267: LIST
10268: LIST
10269: LIST
10270: LIST
10271: LIST
10272: LIST
10273: LIST
10274: LIST
10275: LIST
10276: LIST
10277: LIST
10278: LIST
10279: LIST
10280: LIST
10281: PUSH
10282: LD_INT 101
10284: PUSH
10285: LD_INT 102
10287: PUSH
10288: LD_INT 103
10290: PUSH
10291: LD_INT 104
10293: PUSH
10294: LD_INT 105
10296: PUSH
10297: LD_INT 106
10299: PUSH
10300: LD_INT 107
10302: PUSH
10303: LD_INT 108
10305: PUSH
10306: LD_INT 109
10308: PUSH
10309: LD_INT 110
10311: PUSH
10312: LD_INT 111
10314: PUSH
10315: LD_INT 112
10317: PUSH
10318: LD_INT 113
10320: PUSH
10321: LD_INT 114
10323: PUSH
10324: LD_INT 116
10326: PUSH
10327: LD_INT 117
10329: PUSH
10330: LD_INT 118
10332: PUSH
10333: EMPTY
10334: LIST
10335: LIST
10336: LIST
10337: LIST
10338: LIST
10339: LIST
10340: LIST
10341: LIST
10342: LIST
10343: LIST
10344: LIST
10345: LIST
10346: LIST
10347: LIST
10348: LIST
10349: LIST
10350: LIST
10351: PUSH
10352: EMPTY
10353: LIST
10354: LIST
10355: ST_TO_ADDR
10356: GO 11363
10358: LD_INT 15
10360: DOUBLE
10361: EQUAL
10362: IFTRUE 10366
10364: GO 10590
10366: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
10367: LD_ADDR_VAR 0 2
10371: PUSH
10372: LD_INT 1
10374: PUSH
10375: LD_INT 2
10377: PUSH
10378: LD_INT 3
10380: PUSH
10381: LD_INT 4
10383: PUSH
10384: LD_INT 5
10386: PUSH
10387: LD_INT 6
10389: PUSH
10390: LD_INT 7
10392: PUSH
10393: LD_INT 8
10395: PUSH
10396: LD_INT 9
10398: PUSH
10399: LD_INT 10
10401: PUSH
10402: LD_INT 11
10404: PUSH
10405: LD_INT 12
10407: PUSH
10408: LD_INT 13
10410: PUSH
10411: LD_INT 14
10413: PUSH
10414: LD_INT 15
10416: PUSH
10417: LD_INT 16
10419: PUSH
10420: LD_INT 17
10422: PUSH
10423: LD_INT 18
10425: PUSH
10426: LD_INT 19
10428: PUSH
10429: LD_INT 20
10431: PUSH
10432: LD_INT 21
10434: PUSH
10435: LD_INT 22
10437: PUSH
10438: LD_INT 23
10440: PUSH
10441: LD_INT 24
10443: PUSH
10444: LD_INT 25
10446: PUSH
10447: LD_INT 26
10449: PUSH
10450: LD_INT 27
10452: PUSH
10453: LD_INT 28
10455: PUSH
10456: LD_INT 29
10458: PUSH
10459: LD_INT 30
10461: PUSH
10462: LD_INT 31
10464: PUSH
10465: LD_INT 32
10467: PUSH
10468: LD_INT 33
10470: PUSH
10471: LD_INT 34
10473: PUSH
10474: LD_INT 36
10476: PUSH
10477: EMPTY
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: LIST
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: LIST
10492: LIST
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: LIST
10499: LIST
10500: LIST
10501: LIST
10502: LIST
10503: LIST
10504: LIST
10505: LIST
10506: LIST
10507: LIST
10508: LIST
10509: LIST
10510: LIST
10511: LIST
10512: LIST
10513: PUSH
10514: LD_INT 101
10516: PUSH
10517: LD_INT 102
10519: PUSH
10520: LD_INT 103
10522: PUSH
10523: LD_INT 104
10525: PUSH
10526: LD_INT 105
10528: PUSH
10529: LD_INT 106
10531: PUSH
10532: LD_INT 107
10534: PUSH
10535: LD_INT 108
10537: PUSH
10538: LD_INT 109
10540: PUSH
10541: LD_INT 110
10543: PUSH
10544: LD_INT 111
10546: PUSH
10547: LD_INT 112
10549: PUSH
10550: LD_INT 113
10552: PUSH
10553: LD_INT 114
10555: PUSH
10556: LD_INT 116
10558: PUSH
10559: LD_INT 117
10561: PUSH
10562: LD_INT 118
10564: PUSH
10565: EMPTY
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: LIST
10583: PUSH
10584: EMPTY
10585: LIST
10586: LIST
10587: ST_TO_ADDR
10588: GO 11363
10590: LD_INT 16
10592: DOUBLE
10593: EQUAL
10594: IFTRUE 10598
10596: GO 10734
10598: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
10599: LD_ADDR_VAR 0 2
10603: PUSH
10604: LD_INT 2
10606: PUSH
10607: LD_INT 4
10609: PUSH
10610: LD_INT 5
10612: PUSH
10613: LD_INT 7
10615: PUSH
10616: LD_INT 11
10618: PUSH
10619: LD_INT 12
10621: PUSH
10622: LD_INT 15
10624: PUSH
10625: LD_INT 16
10627: PUSH
10628: LD_INT 20
10630: PUSH
10631: LD_INT 21
10633: PUSH
10634: LD_INT 22
10636: PUSH
10637: LD_INT 23
10639: PUSH
10640: LD_INT 25
10642: PUSH
10643: LD_INT 26
10645: PUSH
10646: LD_INT 30
10648: PUSH
10649: LD_INT 31
10651: PUSH
10652: LD_INT 32
10654: PUSH
10655: LD_INT 33
10657: PUSH
10658: LD_INT 34
10660: PUSH
10661: EMPTY
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: LIST
10678: LIST
10679: LIST
10680: LIST
10681: PUSH
10682: LD_INT 101
10684: PUSH
10685: LD_INT 102
10687: PUSH
10688: LD_INT 103
10690: PUSH
10691: LD_INT 106
10693: PUSH
10694: LD_INT 108
10696: PUSH
10697: LD_INT 112
10699: PUSH
10700: LD_INT 113
10702: PUSH
10703: LD_INT 114
10705: PUSH
10706: LD_INT 116
10708: PUSH
10709: LD_INT 117
10711: PUSH
10712: LD_INT 118
10714: PUSH
10715: EMPTY
10716: LIST
10717: LIST
10718: LIST
10719: LIST
10720: LIST
10721: LIST
10722: LIST
10723: LIST
10724: LIST
10725: LIST
10726: LIST
10727: PUSH
10728: EMPTY
10729: LIST
10730: LIST
10731: ST_TO_ADDR
10732: GO 11363
10734: LD_INT 17
10736: DOUBLE
10737: EQUAL
10738: IFTRUE 10742
10740: GO 10966
10742: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
10743: LD_ADDR_VAR 0 2
10747: PUSH
10748: LD_INT 1
10750: PUSH
10751: LD_INT 2
10753: PUSH
10754: LD_INT 3
10756: PUSH
10757: LD_INT 4
10759: PUSH
10760: LD_INT 5
10762: PUSH
10763: LD_INT 6
10765: PUSH
10766: LD_INT 7
10768: PUSH
10769: LD_INT 8
10771: PUSH
10772: LD_INT 9
10774: PUSH
10775: LD_INT 10
10777: PUSH
10778: LD_INT 11
10780: PUSH
10781: LD_INT 12
10783: PUSH
10784: LD_INT 13
10786: PUSH
10787: LD_INT 14
10789: PUSH
10790: LD_INT 15
10792: PUSH
10793: LD_INT 16
10795: PUSH
10796: LD_INT 17
10798: PUSH
10799: LD_INT 18
10801: PUSH
10802: LD_INT 19
10804: PUSH
10805: LD_INT 20
10807: PUSH
10808: LD_INT 21
10810: PUSH
10811: LD_INT 22
10813: PUSH
10814: LD_INT 23
10816: PUSH
10817: LD_INT 24
10819: PUSH
10820: LD_INT 25
10822: PUSH
10823: LD_INT 26
10825: PUSH
10826: LD_INT 27
10828: PUSH
10829: LD_INT 28
10831: PUSH
10832: LD_INT 29
10834: PUSH
10835: LD_INT 30
10837: PUSH
10838: LD_INT 31
10840: PUSH
10841: LD_INT 32
10843: PUSH
10844: LD_INT 33
10846: PUSH
10847: LD_INT 34
10849: PUSH
10850: LD_INT 36
10852: PUSH
10853: EMPTY
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: LIST
10860: LIST
10861: LIST
10862: LIST
10863: LIST
10864: LIST
10865: LIST
10866: LIST
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: LIST
10873: LIST
10874: LIST
10875: LIST
10876: LIST
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: LIST
10882: LIST
10883: LIST
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: LIST
10889: PUSH
10890: LD_INT 101
10892: PUSH
10893: LD_INT 102
10895: PUSH
10896: LD_INT 103
10898: PUSH
10899: LD_INT 104
10901: PUSH
10902: LD_INT 105
10904: PUSH
10905: LD_INT 106
10907: PUSH
10908: LD_INT 107
10910: PUSH
10911: LD_INT 108
10913: PUSH
10914: LD_INT 109
10916: PUSH
10917: LD_INT 110
10919: PUSH
10920: LD_INT 111
10922: PUSH
10923: LD_INT 112
10925: PUSH
10926: LD_INT 113
10928: PUSH
10929: LD_INT 114
10931: PUSH
10932: LD_INT 116
10934: PUSH
10935: LD_INT 117
10937: PUSH
10938: LD_INT 118
10940: PUSH
10941: EMPTY
10942: LIST
10943: LIST
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: LIST
10953: LIST
10954: LIST
10955: LIST
10956: LIST
10957: LIST
10958: LIST
10959: PUSH
10960: EMPTY
10961: LIST
10962: LIST
10963: ST_TO_ADDR
10964: GO 11363
10966: LD_INT 18
10968: DOUBLE
10969: EQUAL
10970: IFTRUE 10974
10972: GO 11122
10974: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
10975: LD_ADDR_VAR 0 2
10979: PUSH
10980: LD_INT 2
10982: PUSH
10983: LD_INT 4
10985: PUSH
10986: LD_INT 5
10988: PUSH
10989: LD_INT 7
10991: PUSH
10992: LD_INT 11
10994: PUSH
10995: LD_INT 12
10997: PUSH
10998: LD_INT 15
11000: PUSH
11001: LD_INT 16
11003: PUSH
11004: LD_INT 20
11006: PUSH
11007: LD_INT 21
11009: PUSH
11010: LD_INT 22
11012: PUSH
11013: LD_INT 23
11015: PUSH
11016: LD_INT 25
11018: PUSH
11019: LD_INT 26
11021: PUSH
11022: LD_INT 30
11024: PUSH
11025: LD_INT 31
11027: PUSH
11028: LD_INT 32
11030: PUSH
11031: LD_INT 33
11033: PUSH
11034: LD_INT 34
11036: PUSH
11037: LD_INT 35
11039: PUSH
11040: LD_INT 36
11042: PUSH
11043: EMPTY
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: PUSH
11066: LD_INT 101
11068: PUSH
11069: LD_INT 102
11071: PUSH
11072: LD_INT 103
11074: PUSH
11075: LD_INT 106
11077: PUSH
11078: LD_INT 108
11080: PUSH
11081: LD_INT 112
11083: PUSH
11084: LD_INT 113
11086: PUSH
11087: LD_INT 114
11089: PUSH
11090: LD_INT 115
11092: PUSH
11093: LD_INT 116
11095: PUSH
11096: LD_INT 117
11098: PUSH
11099: LD_INT 118
11101: PUSH
11102: EMPTY
11103: LIST
11104: LIST
11105: LIST
11106: LIST
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: PUSH
11116: EMPTY
11117: LIST
11118: LIST
11119: ST_TO_ADDR
11120: GO 11363
11122: LD_INT 19
11124: DOUBLE
11125: EQUAL
11126: IFTRUE 11130
11128: GO 11362
11130: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
11131: LD_ADDR_VAR 0 2
11135: PUSH
11136: LD_INT 1
11138: PUSH
11139: LD_INT 2
11141: PUSH
11142: LD_INT 3
11144: PUSH
11145: LD_INT 4
11147: PUSH
11148: LD_INT 5
11150: PUSH
11151: LD_INT 6
11153: PUSH
11154: LD_INT 7
11156: PUSH
11157: LD_INT 8
11159: PUSH
11160: LD_INT 9
11162: PUSH
11163: LD_INT 10
11165: PUSH
11166: LD_INT 11
11168: PUSH
11169: LD_INT 12
11171: PUSH
11172: LD_INT 13
11174: PUSH
11175: LD_INT 14
11177: PUSH
11178: LD_INT 15
11180: PUSH
11181: LD_INT 16
11183: PUSH
11184: LD_INT 17
11186: PUSH
11187: LD_INT 18
11189: PUSH
11190: LD_INT 19
11192: PUSH
11193: LD_INT 20
11195: PUSH
11196: LD_INT 21
11198: PUSH
11199: LD_INT 22
11201: PUSH
11202: LD_INT 23
11204: PUSH
11205: LD_INT 24
11207: PUSH
11208: LD_INT 25
11210: PUSH
11211: LD_INT 26
11213: PUSH
11214: LD_INT 27
11216: PUSH
11217: LD_INT 28
11219: PUSH
11220: LD_INT 29
11222: PUSH
11223: LD_INT 30
11225: PUSH
11226: LD_INT 31
11228: PUSH
11229: LD_INT 32
11231: PUSH
11232: LD_INT 33
11234: PUSH
11235: LD_INT 34
11237: PUSH
11238: LD_INT 35
11240: PUSH
11241: LD_INT 36
11243: PUSH
11244: EMPTY
11245: LIST
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: LIST
11277: LIST
11278: LIST
11279: LIST
11280: LIST
11281: PUSH
11282: LD_INT 101
11284: PUSH
11285: LD_INT 102
11287: PUSH
11288: LD_INT 103
11290: PUSH
11291: LD_INT 104
11293: PUSH
11294: LD_INT 105
11296: PUSH
11297: LD_INT 106
11299: PUSH
11300: LD_INT 107
11302: PUSH
11303: LD_INT 108
11305: PUSH
11306: LD_INT 109
11308: PUSH
11309: LD_INT 110
11311: PUSH
11312: LD_INT 111
11314: PUSH
11315: LD_INT 112
11317: PUSH
11318: LD_INT 113
11320: PUSH
11321: LD_INT 114
11323: PUSH
11324: LD_INT 115
11326: PUSH
11327: LD_INT 116
11329: PUSH
11330: LD_INT 117
11332: PUSH
11333: LD_INT 118
11335: PUSH
11336: EMPTY
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: LIST
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: LIST
11349: LIST
11350: LIST
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: PUSH
11356: EMPTY
11357: LIST
11358: LIST
11359: ST_TO_ADDR
11360: GO 11363
11362: POP
// end else
11363: GO 11594
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
11365: LD_ADDR_VAR 0 2
11369: PUSH
11370: LD_INT 1
11372: PUSH
11373: LD_INT 2
11375: PUSH
11376: LD_INT 3
11378: PUSH
11379: LD_INT 4
11381: PUSH
11382: LD_INT 5
11384: PUSH
11385: LD_INT 6
11387: PUSH
11388: LD_INT 7
11390: PUSH
11391: LD_INT 8
11393: PUSH
11394: LD_INT 9
11396: PUSH
11397: LD_INT 10
11399: PUSH
11400: LD_INT 11
11402: PUSH
11403: LD_INT 12
11405: PUSH
11406: LD_INT 13
11408: PUSH
11409: LD_INT 14
11411: PUSH
11412: LD_INT 15
11414: PUSH
11415: LD_INT 16
11417: PUSH
11418: LD_INT 17
11420: PUSH
11421: LD_INT 18
11423: PUSH
11424: LD_INT 19
11426: PUSH
11427: LD_INT 20
11429: PUSH
11430: LD_INT 21
11432: PUSH
11433: LD_INT 22
11435: PUSH
11436: LD_INT 23
11438: PUSH
11439: LD_INT 24
11441: PUSH
11442: LD_INT 25
11444: PUSH
11445: LD_INT 26
11447: PUSH
11448: LD_INT 27
11450: PUSH
11451: LD_INT 28
11453: PUSH
11454: LD_INT 29
11456: PUSH
11457: LD_INT 30
11459: PUSH
11460: LD_INT 31
11462: PUSH
11463: LD_INT 32
11465: PUSH
11466: LD_INT 33
11468: PUSH
11469: LD_INT 34
11471: PUSH
11472: LD_INT 35
11474: PUSH
11475: LD_INT 36
11477: PUSH
11478: EMPTY
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: LIST
11507: LIST
11508: LIST
11509: LIST
11510: LIST
11511: LIST
11512: LIST
11513: LIST
11514: LIST
11515: PUSH
11516: LD_INT 101
11518: PUSH
11519: LD_INT 102
11521: PUSH
11522: LD_INT 103
11524: PUSH
11525: LD_INT 104
11527: PUSH
11528: LD_INT 105
11530: PUSH
11531: LD_INT 106
11533: PUSH
11534: LD_INT 107
11536: PUSH
11537: LD_INT 108
11539: PUSH
11540: LD_INT 109
11542: PUSH
11543: LD_INT 110
11545: PUSH
11546: LD_INT 111
11548: PUSH
11549: LD_INT 112
11551: PUSH
11552: LD_INT 113
11554: PUSH
11555: LD_INT 114
11557: PUSH
11558: LD_INT 115
11560: PUSH
11561: LD_INT 116
11563: PUSH
11564: LD_INT 117
11566: PUSH
11567: LD_INT 118
11569: PUSH
11570: EMPTY
11571: LIST
11572: LIST
11573: LIST
11574: LIST
11575: LIST
11576: LIST
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: LIST
11588: LIST
11589: PUSH
11590: EMPTY
11591: LIST
11592: LIST
11593: ST_TO_ADDR
// if result then
11594: LD_VAR 0 2
11598: IFFALSE 12384
// begin normal :=  ;
11600: LD_ADDR_VAR 0 5
11604: PUSH
11605: LD_STRING 
11607: ST_TO_ADDR
// hardcore :=  ;
11608: LD_ADDR_VAR 0 6
11612: PUSH
11613: LD_STRING 
11615: ST_TO_ADDR
// active :=  ;
11616: LD_ADDR_VAR 0 7
11620: PUSH
11621: LD_STRING 
11623: ST_TO_ADDR
// for i = 1 to normalCounter do
11624: LD_ADDR_VAR 0 8
11628: PUSH
11629: DOUBLE
11630: LD_INT 1
11632: DEC
11633: ST_TO_ADDR
11634: LD_EXP 28
11638: PUSH
11639: FOR_TO
11640: IFFALSE 11741
// begin tmp := 0 ;
11642: LD_ADDR_VAR 0 3
11646: PUSH
11647: LD_STRING 0
11649: ST_TO_ADDR
// if result [ 1 ] then
11650: LD_VAR 0 2
11654: PUSH
11655: LD_INT 1
11657: ARRAY
11658: IFFALSE 11723
// if result [ 1 ] [ 1 ] = i then
11660: LD_VAR 0 2
11664: PUSH
11665: LD_INT 1
11667: ARRAY
11668: PUSH
11669: LD_INT 1
11671: ARRAY
11672: PUSH
11673: LD_VAR 0 8
11677: EQUAL
11678: IFFALSE 11723
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
11680: LD_ADDR_VAR 0 2
11684: PUSH
11685: LD_VAR 0 2
11689: PPUSH
11690: LD_INT 1
11692: PPUSH
11693: LD_VAR 0 2
11697: PUSH
11698: LD_INT 1
11700: ARRAY
11701: PPUSH
11702: LD_INT 1
11704: PPUSH
11705: CALL_OW 3
11709: PPUSH
11710: CALL_OW 1
11714: ST_TO_ADDR
// tmp := 1 ;
11715: LD_ADDR_VAR 0 3
11719: PUSH
11720: LD_STRING 1
11722: ST_TO_ADDR
// end ; normal := normal & tmp ;
11723: LD_ADDR_VAR 0 5
11727: PUSH
11728: LD_VAR 0 5
11732: PUSH
11733: LD_VAR 0 3
11737: STR
11738: ST_TO_ADDR
// end ;
11739: GO 11639
11741: POP
11742: POP
// for i = 1 to hardcoreCounter do
11743: LD_ADDR_VAR 0 8
11747: PUSH
11748: DOUBLE
11749: LD_INT 1
11751: DEC
11752: ST_TO_ADDR
11753: LD_EXP 29
11757: PUSH
11758: FOR_TO
11759: IFFALSE 11864
// begin tmp := 0 ;
11761: LD_ADDR_VAR 0 3
11765: PUSH
11766: LD_STRING 0
11768: ST_TO_ADDR
// if result [ 2 ] then
11769: LD_VAR 0 2
11773: PUSH
11774: LD_INT 2
11776: ARRAY
11777: IFFALSE 11846
// if result [ 2 ] [ 1 ] = 100 + i then
11779: LD_VAR 0 2
11783: PUSH
11784: LD_INT 2
11786: ARRAY
11787: PUSH
11788: LD_INT 1
11790: ARRAY
11791: PUSH
11792: LD_INT 100
11794: PUSH
11795: LD_VAR 0 8
11799: PLUS
11800: EQUAL
11801: IFFALSE 11846
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
11803: LD_ADDR_VAR 0 2
11807: PUSH
11808: LD_VAR 0 2
11812: PPUSH
11813: LD_INT 2
11815: PPUSH
11816: LD_VAR 0 2
11820: PUSH
11821: LD_INT 2
11823: ARRAY
11824: PPUSH
11825: LD_INT 1
11827: PPUSH
11828: CALL_OW 3
11832: PPUSH
11833: CALL_OW 1
11837: ST_TO_ADDR
// tmp := 1 ;
11838: LD_ADDR_VAR 0 3
11842: PUSH
11843: LD_STRING 1
11845: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
11846: LD_ADDR_VAR 0 6
11850: PUSH
11851: LD_VAR 0 6
11855: PUSH
11856: LD_VAR 0 3
11860: STR
11861: ST_TO_ADDR
// end ;
11862: GO 11758
11864: POP
11865: POP
// if isGameLoad then
11866: LD_VAR 0 1
11870: IFFALSE 12345
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
11872: LD_ADDR_VAR 0 4
11876: PUSH
11877: LD_EXP 32
11881: PUSH
11882: LD_EXP 31
11886: PUSH
11887: LD_EXP 33
11891: PUSH
11892: LD_EXP 30
11896: PUSH
11897: LD_EXP 34
11901: PUSH
11902: LD_EXP 35
11906: PUSH
11907: LD_EXP 36
11911: PUSH
11912: LD_EXP 37
11916: PUSH
11917: LD_EXP 38
11921: PUSH
11922: LD_EXP 39
11926: PUSH
11927: LD_EXP 40
11931: PUSH
11932: LD_EXP 41
11936: PUSH
11937: LD_EXP 42
11941: PUSH
11942: LD_EXP 43
11946: PUSH
11947: LD_EXP 51
11951: PUSH
11952: LD_EXP 52
11956: PUSH
11957: LD_EXP 53
11961: PUSH
11962: LD_EXP 54
11966: PUSH
11967: LD_EXP 56
11971: PUSH
11972: LD_EXP 57
11976: PUSH
11977: LD_EXP 58
11981: PUSH
11982: LD_EXP 61
11986: PUSH
11987: LD_EXP 63
11991: PUSH
11992: LD_EXP 64
11996: PUSH
11997: LD_EXP 65
12001: PUSH
12002: LD_EXP 67
12006: PUSH
12007: LD_EXP 68
12011: PUSH
12012: LD_EXP 71
12016: PUSH
12017: LD_EXP 72
12021: PUSH
12022: LD_EXP 73
12026: PUSH
12027: LD_EXP 74
12031: PUSH
12032: LD_EXP 75
12036: PUSH
12037: LD_EXP 76
12041: PUSH
12042: LD_EXP 77
12046: PUSH
12047: LD_EXP 78
12051: PUSH
12052: LD_EXP 79
12056: PUSH
12057: LD_EXP 44
12061: PUSH
12062: LD_EXP 45
12066: PUSH
12067: LD_EXP 48
12071: PUSH
12072: LD_EXP 49
12076: PUSH
12077: LD_EXP 50
12081: PUSH
12082: LD_EXP 46
12086: PUSH
12087: LD_EXP 47
12091: PUSH
12092: LD_EXP 55
12096: PUSH
12097: LD_EXP 59
12101: PUSH
12102: LD_EXP 60
12106: PUSH
12107: LD_EXP 62
12111: PUSH
12112: LD_EXP 66
12116: PUSH
12117: LD_EXP 69
12121: PUSH
12122: LD_EXP 70
12126: PUSH
12127: LD_EXP 80
12131: PUSH
12132: LD_EXP 81
12136: PUSH
12137: LD_EXP 82
12141: PUSH
12142: LD_EXP 83
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: LIST
12156: LIST
12157: LIST
12158: LIST
12159: LIST
12160: LIST
12161: LIST
12162: LIST
12163: LIST
12164: LIST
12165: LIST
12166: LIST
12167: LIST
12168: LIST
12169: LIST
12170: LIST
12171: LIST
12172: LIST
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: LIST
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: LIST
12195: LIST
12196: LIST
12197: LIST
12198: LIST
12199: LIST
12200: LIST
12201: LIST
12202: ST_TO_ADDR
// tmp :=  ;
12203: LD_ADDR_VAR 0 3
12207: PUSH
12208: LD_STRING 
12210: ST_TO_ADDR
// for i = 1 to normalCounter do
12211: LD_ADDR_VAR 0 8
12215: PUSH
12216: DOUBLE
12217: LD_INT 1
12219: DEC
12220: ST_TO_ADDR
12221: LD_EXP 28
12225: PUSH
12226: FOR_TO
12227: IFFALSE 12263
// begin if flags [ i ] then
12229: LD_VAR 0 4
12233: PUSH
12234: LD_VAR 0 8
12238: ARRAY
12239: IFFALSE 12261
// tmp := tmp & i & ; ;
12241: LD_ADDR_VAR 0 3
12245: PUSH
12246: LD_VAR 0 3
12250: PUSH
12251: LD_VAR 0 8
12255: STR
12256: PUSH
12257: LD_STRING ;
12259: STR
12260: ST_TO_ADDR
// end ;
12261: GO 12226
12263: POP
12264: POP
// for i = 1 to hardcoreCounter do
12265: LD_ADDR_VAR 0 8
12269: PUSH
12270: DOUBLE
12271: LD_INT 1
12273: DEC
12274: ST_TO_ADDR
12275: LD_EXP 29
12279: PUSH
12280: FOR_TO
12281: IFFALSE 12327
// begin if flags [ normalCounter + i ] then
12283: LD_VAR 0 4
12287: PUSH
12288: LD_EXP 28
12292: PUSH
12293: LD_VAR 0 8
12297: PLUS
12298: ARRAY
12299: IFFALSE 12325
// tmp := tmp & ( 100 + i ) & ; ;
12301: LD_ADDR_VAR 0 3
12305: PUSH
12306: LD_VAR 0 3
12310: PUSH
12311: LD_INT 100
12313: PUSH
12314: LD_VAR 0 8
12318: PLUS
12319: STR
12320: PUSH
12321: LD_STRING ;
12323: STR
12324: ST_TO_ADDR
// end ;
12325: GO 12280
12327: POP
12328: POP
// if tmp then
12329: LD_VAR 0 3
12333: IFFALSE 12345
// active := tmp ;
12335: LD_ADDR_VAR 0 7
12339: PUSH
12340: LD_VAR 0 3
12344: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
12345: LD_STRING getStreamItemsFromMission("
12347: PUSH
12348: LD_VAR 0 5
12352: STR
12353: PUSH
12354: LD_STRING ","
12356: STR
12357: PUSH
12358: LD_VAR 0 6
12362: STR
12363: PUSH
12364: LD_STRING ","
12366: STR
12367: PUSH
12368: LD_VAR 0 7
12372: STR
12373: PUSH
12374: LD_STRING ")
12376: STR
12377: PPUSH
12378: CALL_OW 559
// end else
12382: GO 12391
// ToLua ( getStreamItemsFromMission("","","") ) ;
12384: LD_STRING getStreamItemsFromMission("","","")
12386: PPUSH
12387: CALL_OW 559
// end ;
12391: LD_VAR 0 2
12395: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
12396: LD_EXP 27
12400: PUSH
12401: LD_EXP 32
12405: AND
12406: IFFALSE 12530
12408: GO 12410
12410: DISABLE
12411: LD_INT 0
12413: PPUSH
12414: PPUSH
// begin enable ;
12415: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
12416: LD_ADDR_VAR 0 2
12420: PUSH
12421: LD_INT 22
12423: PUSH
12424: LD_OWVAR 2
12428: PUSH
12429: EMPTY
12430: LIST
12431: LIST
12432: PUSH
12433: LD_INT 2
12435: PUSH
12436: LD_INT 34
12438: PUSH
12439: LD_INT 7
12441: PUSH
12442: EMPTY
12443: LIST
12444: LIST
12445: PUSH
12446: LD_INT 34
12448: PUSH
12449: LD_INT 45
12451: PUSH
12452: EMPTY
12453: LIST
12454: LIST
12455: PUSH
12456: LD_INT 34
12458: PUSH
12459: LD_INT 28
12461: PUSH
12462: EMPTY
12463: LIST
12464: LIST
12465: PUSH
12466: LD_INT 34
12468: PUSH
12469: LD_INT 47
12471: PUSH
12472: EMPTY
12473: LIST
12474: LIST
12475: PUSH
12476: EMPTY
12477: LIST
12478: LIST
12479: LIST
12480: LIST
12481: LIST
12482: PUSH
12483: EMPTY
12484: LIST
12485: LIST
12486: PPUSH
12487: CALL_OW 69
12491: ST_TO_ADDR
// if not tmp then
12492: LD_VAR 0 2
12496: NOT
12497: IFFALSE 12501
// exit ;
12499: GO 12530
// for i in tmp do
12501: LD_ADDR_VAR 0 1
12505: PUSH
12506: LD_VAR 0 2
12510: PUSH
12511: FOR_IN
12512: IFFALSE 12528
// begin SetLives ( i , 0 ) ;
12514: LD_VAR 0 1
12518: PPUSH
12519: LD_INT 0
12521: PPUSH
12522: CALL_OW 234
// end ;
12526: GO 12511
12528: POP
12529: POP
// end ;
12530: PPOPN 2
12532: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
12533: LD_EXP 27
12537: PUSH
12538: LD_EXP 33
12542: AND
12543: IFFALSE 12627
12545: GO 12547
12547: DISABLE
12548: LD_INT 0
12550: PPUSH
12551: PPUSH
// begin enable ;
12552: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
12553: LD_ADDR_VAR 0 2
12557: PUSH
12558: LD_INT 22
12560: PUSH
12561: LD_OWVAR 2
12565: PUSH
12566: EMPTY
12567: LIST
12568: LIST
12569: PUSH
12570: LD_INT 32
12572: PUSH
12573: LD_INT 3
12575: PUSH
12576: EMPTY
12577: LIST
12578: LIST
12579: PUSH
12580: EMPTY
12581: LIST
12582: LIST
12583: PPUSH
12584: CALL_OW 69
12588: ST_TO_ADDR
// if not tmp then
12589: LD_VAR 0 2
12593: NOT
12594: IFFALSE 12598
// exit ;
12596: GO 12627
// for i in tmp do
12598: LD_ADDR_VAR 0 1
12602: PUSH
12603: LD_VAR 0 2
12607: PUSH
12608: FOR_IN
12609: IFFALSE 12625
// begin SetLives ( i , 0 ) ;
12611: LD_VAR 0 1
12615: PPUSH
12616: LD_INT 0
12618: PPUSH
12619: CALL_OW 234
// end ;
12623: GO 12608
12625: POP
12626: POP
// end ;
12627: PPOPN 2
12629: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
12630: LD_EXP 27
12634: PUSH
12635: LD_EXP 30
12639: AND
12640: IFFALSE 12733
12642: GO 12644
12644: DISABLE
12645: LD_INT 0
12647: PPUSH
// begin enable ;
12648: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
12649: LD_ADDR_VAR 0 1
12653: PUSH
12654: LD_INT 22
12656: PUSH
12657: LD_OWVAR 2
12661: PUSH
12662: EMPTY
12663: LIST
12664: LIST
12665: PUSH
12666: LD_INT 2
12668: PUSH
12669: LD_INT 25
12671: PUSH
12672: LD_INT 5
12674: PUSH
12675: EMPTY
12676: LIST
12677: LIST
12678: PUSH
12679: LD_INT 25
12681: PUSH
12682: LD_INT 9
12684: PUSH
12685: EMPTY
12686: LIST
12687: LIST
12688: PUSH
12689: LD_INT 25
12691: PUSH
12692: LD_INT 8
12694: PUSH
12695: EMPTY
12696: LIST
12697: LIST
12698: PUSH
12699: EMPTY
12700: LIST
12701: LIST
12702: LIST
12703: LIST
12704: PUSH
12705: EMPTY
12706: LIST
12707: LIST
12708: PPUSH
12709: CALL_OW 69
12713: PUSH
12714: FOR_IN
12715: IFFALSE 12731
// begin SetClass ( i , 1 ) ;
12717: LD_VAR 0 1
12721: PPUSH
12722: LD_INT 1
12724: PPUSH
12725: CALL_OW 336
// end ;
12729: GO 12714
12731: POP
12732: POP
// end ;
12733: PPOPN 1
12735: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
12736: LD_EXP 27
12740: PUSH
12741: LD_EXP 31
12745: AND
12746: PUSH
12747: LD_OWVAR 65
12751: PUSH
12752: LD_INT 7
12754: LESS
12755: AND
12756: IFFALSE 12770
12758: GO 12760
12760: DISABLE
// begin enable ;
12761: ENABLE
// game_speed := 7 ;
12762: LD_ADDR_OWVAR 65
12766: PUSH
12767: LD_INT 7
12769: ST_TO_ADDR
// end ;
12770: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
12771: LD_EXP 27
12775: PUSH
12776: LD_EXP 34
12780: AND
12781: IFFALSE 12983
12783: GO 12785
12785: DISABLE
12786: LD_INT 0
12788: PPUSH
12789: PPUSH
12790: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12791: LD_ADDR_VAR 0 3
12795: PUSH
12796: LD_INT 81
12798: PUSH
12799: LD_OWVAR 2
12803: PUSH
12804: EMPTY
12805: LIST
12806: LIST
12807: PUSH
12808: LD_INT 21
12810: PUSH
12811: LD_INT 1
12813: PUSH
12814: EMPTY
12815: LIST
12816: LIST
12817: PUSH
12818: EMPTY
12819: LIST
12820: LIST
12821: PPUSH
12822: CALL_OW 69
12826: ST_TO_ADDR
// if not tmp then
12827: LD_VAR 0 3
12831: NOT
12832: IFFALSE 12836
// exit ;
12834: GO 12983
// if tmp > 5 then
12836: LD_VAR 0 3
12840: PUSH
12841: LD_INT 5
12843: GREATER
12844: IFFALSE 12856
// k := 5 else
12846: LD_ADDR_VAR 0 2
12850: PUSH
12851: LD_INT 5
12853: ST_TO_ADDR
12854: GO 12866
// k := tmp ;
12856: LD_ADDR_VAR 0 2
12860: PUSH
12861: LD_VAR 0 3
12865: ST_TO_ADDR
// for i := 1 to k do
12866: LD_ADDR_VAR 0 1
12870: PUSH
12871: DOUBLE
12872: LD_INT 1
12874: DEC
12875: ST_TO_ADDR
12876: LD_VAR 0 2
12880: PUSH
12881: FOR_TO
12882: IFFALSE 12981
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
12884: LD_VAR 0 3
12888: PUSH
12889: LD_VAR 0 1
12893: ARRAY
12894: PPUSH
12895: LD_VAR 0 1
12899: PUSH
12900: LD_INT 4
12902: MOD
12903: PUSH
12904: LD_INT 1
12906: PLUS
12907: PPUSH
12908: CALL_OW 259
12912: PUSH
12913: LD_INT 10
12915: LESS
12916: IFFALSE 12979
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12918: LD_VAR 0 3
12922: PUSH
12923: LD_VAR 0 1
12927: ARRAY
12928: PPUSH
12929: LD_VAR 0 1
12933: PUSH
12934: LD_INT 4
12936: MOD
12937: PUSH
12938: LD_INT 1
12940: PLUS
12941: PPUSH
12942: LD_VAR 0 3
12946: PUSH
12947: LD_VAR 0 1
12951: ARRAY
12952: PPUSH
12953: LD_VAR 0 1
12957: PUSH
12958: LD_INT 4
12960: MOD
12961: PUSH
12962: LD_INT 1
12964: PLUS
12965: PPUSH
12966: CALL_OW 259
12970: PUSH
12971: LD_INT 1
12973: PLUS
12974: PPUSH
12975: CALL_OW 237
12979: GO 12881
12981: POP
12982: POP
// end ;
12983: PPOPN 3
12985: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12986: LD_EXP 27
12990: PUSH
12991: LD_EXP 35
12995: AND
12996: IFFALSE 13016
12998: GO 13000
13000: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13001: LD_INT 4
13003: PPUSH
13004: LD_OWVAR 2
13008: PPUSH
13009: LD_INT 0
13011: PPUSH
13012: CALL_OW 324
13016: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13017: LD_EXP 27
13021: PUSH
13022: LD_EXP 64
13026: AND
13027: IFFALSE 13047
13029: GO 13031
13031: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13032: LD_INT 19
13034: PPUSH
13035: LD_OWVAR 2
13039: PPUSH
13040: LD_INT 0
13042: PPUSH
13043: CALL_OW 324
13047: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13048: LD_EXP 27
13052: PUSH
13053: LD_EXP 36
13057: AND
13058: IFFALSE 13160
13060: GO 13062
13062: DISABLE
13063: LD_INT 0
13065: PPUSH
13066: PPUSH
// begin enable ;
13067: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13068: LD_ADDR_VAR 0 2
13072: PUSH
13073: LD_INT 22
13075: PUSH
13076: LD_OWVAR 2
13080: PUSH
13081: EMPTY
13082: LIST
13083: LIST
13084: PUSH
13085: LD_INT 2
13087: PUSH
13088: LD_INT 34
13090: PUSH
13091: LD_INT 11
13093: PUSH
13094: EMPTY
13095: LIST
13096: LIST
13097: PUSH
13098: LD_INT 34
13100: PUSH
13101: LD_INT 30
13103: PUSH
13104: EMPTY
13105: LIST
13106: LIST
13107: PUSH
13108: EMPTY
13109: LIST
13110: LIST
13111: LIST
13112: PUSH
13113: EMPTY
13114: LIST
13115: LIST
13116: PPUSH
13117: CALL_OW 69
13121: ST_TO_ADDR
// if not tmp then
13122: LD_VAR 0 2
13126: NOT
13127: IFFALSE 13131
// exit ;
13129: GO 13160
// for i in tmp do
13131: LD_ADDR_VAR 0 1
13135: PUSH
13136: LD_VAR 0 2
13140: PUSH
13141: FOR_IN
13142: IFFALSE 13158
// begin SetLives ( i , 0 ) ;
13144: LD_VAR 0 1
13148: PPUSH
13149: LD_INT 0
13151: PPUSH
13152: CALL_OW 234
// end ;
13156: GO 13141
13158: POP
13159: POP
// end ;
13160: PPOPN 2
13162: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13163: LD_EXP 27
13167: PUSH
13168: LD_EXP 37
13172: AND
13173: IFFALSE 13193
13175: GO 13177
13177: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13178: LD_INT 32
13180: PPUSH
13181: LD_OWVAR 2
13185: PPUSH
13186: LD_INT 0
13188: PPUSH
13189: CALL_OW 324
13193: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13194: LD_EXP 27
13198: PUSH
13199: LD_EXP 38
13203: AND
13204: IFFALSE 13385
13206: GO 13208
13208: DISABLE
13209: LD_INT 0
13211: PPUSH
13212: PPUSH
13213: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13214: LD_ADDR_VAR 0 2
13218: PUSH
13219: LD_INT 22
13221: PUSH
13222: LD_OWVAR 2
13226: PUSH
13227: EMPTY
13228: LIST
13229: LIST
13230: PUSH
13231: LD_INT 33
13233: PUSH
13234: LD_INT 3
13236: PUSH
13237: EMPTY
13238: LIST
13239: LIST
13240: PUSH
13241: EMPTY
13242: LIST
13243: LIST
13244: PPUSH
13245: CALL_OW 69
13249: ST_TO_ADDR
// if not tmp then
13250: LD_VAR 0 2
13254: NOT
13255: IFFALSE 13259
// exit ;
13257: GO 13385
// side := 0 ;
13259: LD_ADDR_VAR 0 3
13263: PUSH
13264: LD_INT 0
13266: ST_TO_ADDR
// for i := 1 to 8 do
13267: LD_ADDR_VAR 0 1
13271: PUSH
13272: DOUBLE
13273: LD_INT 1
13275: DEC
13276: ST_TO_ADDR
13277: LD_INT 8
13279: PUSH
13280: FOR_TO
13281: IFFALSE 13329
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
13283: LD_OWVAR 2
13287: PUSH
13288: LD_VAR 0 1
13292: NONEQUAL
13293: PUSH
13294: LD_OWVAR 2
13298: PPUSH
13299: LD_VAR 0 1
13303: PPUSH
13304: CALL_OW 81
13308: PUSH
13309: LD_INT 2
13311: EQUAL
13312: AND
13313: IFFALSE 13327
// begin side := i ;
13315: LD_ADDR_VAR 0 3
13319: PUSH
13320: LD_VAR 0 1
13324: ST_TO_ADDR
// break ;
13325: GO 13329
// end ;
13327: GO 13280
13329: POP
13330: POP
// if not side then
13331: LD_VAR 0 3
13335: NOT
13336: IFFALSE 13340
// exit ;
13338: GO 13385
// for i := 1 to tmp do
13340: LD_ADDR_VAR 0 1
13344: PUSH
13345: DOUBLE
13346: LD_INT 1
13348: DEC
13349: ST_TO_ADDR
13350: LD_VAR 0 2
13354: PUSH
13355: FOR_TO
13356: IFFALSE 13383
// if Prob ( 60 ) then
13358: LD_INT 60
13360: PPUSH
13361: CALL_OW 13
13365: IFFALSE 13381
// SetSide ( i , side ) ;
13367: LD_VAR 0 1
13371: PPUSH
13372: LD_VAR 0 3
13376: PPUSH
13377: CALL_OW 235
13381: GO 13355
13383: POP
13384: POP
// end ;
13385: PPOPN 3
13387: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
13388: LD_EXP 27
13392: PUSH
13393: LD_EXP 40
13397: AND
13398: IFFALSE 13517
13400: GO 13402
13402: DISABLE
13403: LD_INT 0
13405: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
13406: LD_ADDR_VAR 0 1
13410: PUSH
13411: LD_INT 22
13413: PUSH
13414: LD_OWVAR 2
13418: PUSH
13419: EMPTY
13420: LIST
13421: LIST
13422: PUSH
13423: LD_INT 21
13425: PUSH
13426: LD_INT 1
13428: PUSH
13429: EMPTY
13430: LIST
13431: LIST
13432: PUSH
13433: LD_INT 3
13435: PUSH
13436: LD_INT 23
13438: PUSH
13439: LD_INT 0
13441: PUSH
13442: EMPTY
13443: LIST
13444: LIST
13445: PUSH
13446: EMPTY
13447: LIST
13448: LIST
13449: PUSH
13450: EMPTY
13451: LIST
13452: LIST
13453: LIST
13454: PPUSH
13455: CALL_OW 69
13459: PUSH
13460: FOR_IN
13461: IFFALSE 13515
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
13463: LD_VAR 0 1
13467: PPUSH
13468: CALL_OW 257
13472: PUSH
13473: LD_INT 1
13475: PUSH
13476: LD_INT 2
13478: PUSH
13479: LD_INT 3
13481: PUSH
13482: LD_INT 4
13484: PUSH
13485: EMPTY
13486: LIST
13487: LIST
13488: LIST
13489: LIST
13490: IN
13491: IFFALSE 13513
// SetClass ( un , rand ( 1 , 4 ) ) ;
13493: LD_VAR 0 1
13497: PPUSH
13498: LD_INT 1
13500: PPUSH
13501: LD_INT 4
13503: PPUSH
13504: CALL_OW 12
13508: PPUSH
13509: CALL_OW 336
13513: GO 13460
13515: POP
13516: POP
// end ;
13517: PPOPN 1
13519: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
13520: LD_EXP 27
13524: PUSH
13525: LD_EXP 39
13529: AND
13530: IFFALSE 13609
13532: GO 13534
13534: DISABLE
13535: LD_INT 0
13537: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13538: LD_ADDR_VAR 0 1
13542: PUSH
13543: LD_INT 22
13545: PUSH
13546: LD_OWVAR 2
13550: PUSH
13551: EMPTY
13552: LIST
13553: LIST
13554: PUSH
13555: LD_INT 21
13557: PUSH
13558: LD_INT 3
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: PUSH
13565: EMPTY
13566: LIST
13567: LIST
13568: PPUSH
13569: CALL_OW 69
13573: ST_TO_ADDR
// if not tmp then
13574: LD_VAR 0 1
13578: NOT
13579: IFFALSE 13583
// exit ;
13581: GO 13609
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
13583: LD_VAR 0 1
13587: PUSH
13588: LD_INT 1
13590: PPUSH
13591: LD_VAR 0 1
13595: PPUSH
13596: CALL_OW 12
13600: ARRAY
13601: PPUSH
13602: LD_INT 100
13604: PPUSH
13605: CALL_OW 234
// end ;
13609: PPOPN 1
13611: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
13612: LD_EXP 27
13616: PUSH
13617: LD_EXP 41
13621: AND
13622: IFFALSE 13720
13624: GO 13626
13626: DISABLE
13627: LD_INT 0
13629: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13630: LD_ADDR_VAR 0 1
13634: PUSH
13635: LD_INT 22
13637: PUSH
13638: LD_OWVAR 2
13642: PUSH
13643: EMPTY
13644: LIST
13645: LIST
13646: PUSH
13647: LD_INT 21
13649: PUSH
13650: LD_INT 1
13652: PUSH
13653: EMPTY
13654: LIST
13655: LIST
13656: PUSH
13657: EMPTY
13658: LIST
13659: LIST
13660: PPUSH
13661: CALL_OW 69
13665: ST_TO_ADDR
// if not tmp then
13666: LD_VAR 0 1
13670: NOT
13671: IFFALSE 13675
// exit ;
13673: GO 13720
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
13675: LD_VAR 0 1
13679: PUSH
13680: LD_INT 1
13682: PPUSH
13683: LD_VAR 0 1
13687: PPUSH
13688: CALL_OW 12
13692: ARRAY
13693: PPUSH
13694: LD_INT 1
13696: PPUSH
13697: LD_INT 4
13699: PPUSH
13700: CALL_OW 12
13704: PPUSH
13705: LD_INT 3000
13707: PPUSH
13708: LD_INT 9000
13710: PPUSH
13711: CALL_OW 12
13715: PPUSH
13716: CALL_OW 492
// end ;
13720: PPOPN 1
13722: END
// every 0 0$1 trigger StreamModeActive and sDepot do
13723: LD_EXP 27
13727: PUSH
13728: LD_EXP 42
13732: AND
13733: IFFALSE 13753
13735: GO 13737
13737: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
13738: LD_INT 1
13740: PPUSH
13741: LD_OWVAR 2
13745: PPUSH
13746: LD_INT 0
13748: PPUSH
13749: CALL_OW 324
13753: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
13754: LD_EXP 27
13758: PUSH
13759: LD_EXP 43
13763: AND
13764: IFFALSE 13847
13766: GO 13768
13768: DISABLE
13769: LD_INT 0
13771: PPUSH
13772: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13773: LD_ADDR_VAR 0 2
13777: PUSH
13778: LD_INT 22
13780: PUSH
13781: LD_OWVAR 2
13785: PUSH
13786: EMPTY
13787: LIST
13788: LIST
13789: PUSH
13790: LD_INT 21
13792: PUSH
13793: LD_INT 3
13795: PUSH
13796: EMPTY
13797: LIST
13798: LIST
13799: PUSH
13800: EMPTY
13801: LIST
13802: LIST
13803: PPUSH
13804: CALL_OW 69
13808: ST_TO_ADDR
// if not tmp then
13809: LD_VAR 0 2
13813: NOT
13814: IFFALSE 13818
// exit ;
13816: GO 13847
// for i in tmp do
13818: LD_ADDR_VAR 0 1
13822: PUSH
13823: LD_VAR 0 2
13827: PUSH
13828: FOR_IN
13829: IFFALSE 13845
// SetBLevel ( i , 10 ) ;
13831: LD_VAR 0 1
13835: PPUSH
13836: LD_INT 10
13838: PPUSH
13839: CALL_OW 241
13843: GO 13828
13845: POP
13846: POP
// end ;
13847: PPOPN 2
13849: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
13850: LD_EXP 27
13854: PUSH
13855: LD_EXP 44
13859: AND
13860: IFFALSE 13971
13862: GO 13864
13864: DISABLE
13865: LD_INT 0
13867: PPUSH
13868: PPUSH
13869: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13870: LD_ADDR_VAR 0 3
13874: PUSH
13875: LD_INT 22
13877: PUSH
13878: LD_OWVAR 2
13882: PUSH
13883: EMPTY
13884: LIST
13885: LIST
13886: PUSH
13887: LD_INT 25
13889: PUSH
13890: LD_INT 1
13892: PUSH
13893: EMPTY
13894: LIST
13895: LIST
13896: PUSH
13897: EMPTY
13898: LIST
13899: LIST
13900: PPUSH
13901: CALL_OW 69
13905: ST_TO_ADDR
// if not tmp then
13906: LD_VAR 0 3
13910: NOT
13911: IFFALSE 13915
// exit ;
13913: GO 13971
// un := tmp [ rand ( 1 , tmp ) ] ;
13915: LD_ADDR_VAR 0 2
13919: PUSH
13920: LD_VAR 0 3
13924: PUSH
13925: LD_INT 1
13927: PPUSH
13928: LD_VAR 0 3
13932: PPUSH
13933: CALL_OW 12
13937: ARRAY
13938: ST_TO_ADDR
// if Crawls ( un ) then
13939: LD_VAR 0 2
13943: PPUSH
13944: CALL_OW 318
13948: IFFALSE 13959
// ComWalk ( un ) ;
13950: LD_VAR 0 2
13954: PPUSH
13955: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13959: LD_VAR 0 2
13963: PPUSH
13964: LD_INT 5
13966: PPUSH
13967: CALL_OW 336
// end ;
13971: PPOPN 3
13973: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
13974: LD_EXP 27
13978: PUSH
13979: LD_EXP 45
13983: AND
13984: PUSH
13985: LD_OWVAR 67
13989: PUSH
13990: LD_INT 4
13992: LESS
13993: AND
13994: IFFALSE 14013
13996: GO 13998
13998: DISABLE
// begin Difficulty := Difficulty + 1 ;
13999: LD_ADDR_OWVAR 67
14003: PUSH
14004: LD_OWVAR 67
14008: PUSH
14009: LD_INT 1
14011: PLUS
14012: ST_TO_ADDR
// end ;
14013: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14014: LD_EXP 27
14018: PUSH
14019: LD_EXP 46
14023: AND
14024: IFFALSE 14127
14026: GO 14028
14028: DISABLE
14029: LD_INT 0
14031: PPUSH
// begin for i := 1 to 5 do
14032: LD_ADDR_VAR 0 1
14036: PUSH
14037: DOUBLE
14038: LD_INT 1
14040: DEC
14041: ST_TO_ADDR
14042: LD_INT 5
14044: PUSH
14045: FOR_TO
14046: IFFALSE 14125
// begin uc_nation := nation_nature ;
14048: LD_ADDR_OWVAR 21
14052: PUSH
14053: LD_INT 0
14055: ST_TO_ADDR
// uc_side := 0 ;
14056: LD_ADDR_OWVAR 20
14060: PUSH
14061: LD_INT 0
14063: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14064: LD_ADDR_OWVAR 29
14068: PUSH
14069: LD_INT 12
14071: PUSH
14072: LD_INT 12
14074: PUSH
14075: EMPTY
14076: LIST
14077: LIST
14078: ST_TO_ADDR
// hc_agressivity := 20 ;
14079: LD_ADDR_OWVAR 35
14083: PUSH
14084: LD_INT 20
14086: ST_TO_ADDR
// hc_class := class_tiger ;
14087: LD_ADDR_OWVAR 28
14091: PUSH
14092: LD_INT 14
14094: ST_TO_ADDR
// hc_gallery :=  ;
14095: LD_ADDR_OWVAR 33
14099: PUSH
14100: LD_STRING 
14102: ST_TO_ADDR
// hc_name :=  ;
14103: LD_ADDR_OWVAR 26
14107: PUSH
14108: LD_STRING 
14110: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14111: CALL_OW 44
14115: PPUSH
14116: LD_INT 0
14118: PPUSH
14119: CALL_OW 51
// end ;
14123: GO 14045
14125: POP
14126: POP
// end ;
14127: PPOPN 1
14129: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14130: LD_EXP 27
14134: PUSH
14135: LD_EXP 47
14139: AND
14140: IFFALSE 14149
14142: GO 14144
14144: DISABLE
// StreamSibBomb ;
14145: CALL 14150 0 0
14149: END
// export function StreamSibBomb ; var i , x , y ; begin
14150: LD_INT 0
14152: PPUSH
14153: PPUSH
14154: PPUSH
14155: PPUSH
// result := false ;
14156: LD_ADDR_VAR 0 1
14160: PUSH
14161: LD_INT 0
14163: ST_TO_ADDR
// for i := 1 to 16 do
14164: LD_ADDR_VAR 0 2
14168: PUSH
14169: DOUBLE
14170: LD_INT 1
14172: DEC
14173: ST_TO_ADDR
14174: LD_INT 16
14176: PUSH
14177: FOR_TO
14178: IFFALSE 14377
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14180: LD_ADDR_VAR 0 3
14184: PUSH
14185: LD_INT 10
14187: PUSH
14188: LD_INT 20
14190: PUSH
14191: LD_INT 30
14193: PUSH
14194: LD_INT 40
14196: PUSH
14197: LD_INT 50
14199: PUSH
14200: LD_INT 60
14202: PUSH
14203: LD_INT 70
14205: PUSH
14206: LD_INT 80
14208: PUSH
14209: LD_INT 90
14211: PUSH
14212: LD_INT 100
14214: PUSH
14215: LD_INT 110
14217: PUSH
14218: LD_INT 120
14220: PUSH
14221: LD_INT 130
14223: PUSH
14224: LD_INT 140
14226: PUSH
14227: LD_INT 150
14229: PUSH
14230: EMPTY
14231: LIST
14232: LIST
14233: LIST
14234: LIST
14235: LIST
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: PUSH
14247: LD_INT 1
14249: PPUSH
14250: LD_INT 15
14252: PPUSH
14253: CALL_OW 12
14257: ARRAY
14258: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14259: LD_ADDR_VAR 0 4
14263: PUSH
14264: LD_INT 10
14266: PUSH
14267: LD_INT 20
14269: PUSH
14270: LD_INT 30
14272: PUSH
14273: LD_INT 40
14275: PUSH
14276: LD_INT 50
14278: PUSH
14279: LD_INT 60
14281: PUSH
14282: LD_INT 70
14284: PUSH
14285: LD_INT 80
14287: PUSH
14288: LD_INT 90
14290: PUSH
14291: LD_INT 100
14293: PUSH
14294: LD_INT 110
14296: PUSH
14297: LD_INT 120
14299: PUSH
14300: LD_INT 130
14302: PUSH
14303: LD_INT 140
14305: PUSH
14306: LD_INT 150
14308: PUSH
14309: EMPTY
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: PUSH
14326: LD_INT 1
14328: PPUSH
14329: LD_INT 15
14331: PPUSH
14332: CALL_OW 12
14336: ARRAY
14337: ST_TO_ADDR
// if ValidHex ( x , y ) then
14338: LD_VAR 0 3
14342: PPUSH
14343: LD_VAR 0 4
14347: PPUSH
14348: CALL_OW 488
14352: IFFALSE 14375
// begin result := [ x , y ] ;
14354: LD_ADDR_VAR 0 1
14358: PUSH
14359: LD_VAR 0 3
14363: PUSH
14364: LD_VAR 0 4
14368: PUSH
14369: EMPTY
14370: LIST
14371: LIST
14372: ST_TO_ADDR
// break ;
14373: GO 14377
// end ; end ;
14375: GO 14177
14377: POP
14378: POP
// if result then
14379: LD_VAR 0 1
14383: IFFALSE 14443
// begin ToLua ( playSibBomb() ) ;
14385: LD_STRING playSibBomb()
14387: PPUSH
14388: CALL_OW 559
// wait ( 0 0$14 ) ;
14392: LD_INT 490
14394: PPUSH
14395: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
14399: LD_VAR 0 1
14403: PUSH
14404: LD_INT 1
14406: ARRAY
14407: PPUSH
14408: LD_VAR 0 1
14412: PUSH
14413: LD_INT 2
14415: ARRAY
14416: PPUSH
14417: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
14421: LD_VAR 0 1
14425: PUSH
14426: LD_INT 1
14428: ARRAY
14429: PPUSH
14430: LD_VAR 0 1
14434: PUSH
14435: LD_INT 2
14437: ARRAY
14438: PPUSH
14439: CALL_OW 429
// end ; end ;
14443: LD_VAR 0 1
14447: RET
// every 0 0$1 trigger StreamModeActive and sReset do
14448: LD_EXP 27
14452: PUSH
14453: LD_EXP 49
14457: AND
14458: IFFALSE 14470
14460: GO 14462
14462: DISABLE
// YouLost (  ) ;
14463: LD_STRING 
14465: PPUSH
14466: CALL_OW 104
14470: END
// every 0 0$1 trigger StreamModeActive and sFog do
14471: LD_EXP 27
14475: PUSH
14476: LD_EXP 48
14480: AND
14481: IFFALSE 14495
14483: GO 14485
14485: DISABLE
// FogOff ( your_side ) ;
14486: LD_OWVAR 2
14490: PPUSH
14491: CALL_OW 344
14495: END
// every 0 0$1 trigger StreamModeActive and sSun do
14496: LD_EXP 27
14500: PUSH
14501: LD_EXP 50
14505: AND
14506: IFFALSE 14534
14508: GO 14510
14510: DISABLE
// begin solar_recharge_percent := 0 ;
14511: LD_ADDR_OWVAR 79
14515: PUSH
14516: LD_INT 0
14518: ST_TO_ADDR
// wait ( 5 5$00 ) ;
14519: LD_INT 10500
14521: PPUSH
14522: CALL_OW 67
// solar_recharge_percent := 100 ;
14526: LD_ADDR_OWVAR 79
14530: PUSH
14531: LD_INT 100
14533: ST_TO_ADDR
// end ;
14534: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
14535: LD_EXP 27
14539: PUSH
14540: LD_EXP 51
14544: AND
14545: IFFALSE 14784
14547: GO 14549
14549: DISABLE
14550: LD_INT 0
14552: PPUSH
14553: PPUSH
14554: PPUSH
// begin tmp := [ ] ;
14555: LD_ADDR_VAR 0 3
14559: PUSH
14560: EMPTY
14561: ST_TO_ADDR
// for i := 1 to 6 do
14562: LD_ADDR_VAR 0 1
14566: PUSH
14567: DOUBLE
14568: LD_INT 1
14570: DEC
14571: ST_TO_ADDR
14572: LD_INT 6
14574: PUSH
14575: FOR_TO
14576: IFFALSE 14681
// begin uc_nation := nation_nature ;
14578: LD_ADDR_OWVAR 21
14582: PUSH
14583: LD_INT 0
14585: ST_TO_ADDR
// uc_side := 0 ;
14586: LD_ADDR_OWVAR 20
14590: PUSH
14591: LD_INT 0
14593: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14594: LD_ADDR_OWVAR 29
14598: PUSH
14599: LD_INT 12
14601: PUSH
14602: LD_INT 12
14604: PUSH
14605: EMPTY
14606: LIST
14607: LIST
14608: ST_TO_ADDR
// hc_agressivity := 20 ;
14609: LD_ADDR_OWVAR 35
14613: PUSH
14614: LD_INT 20
14616: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
14617: LD_ADDR_OWVAR 28
14621: PUSH
14622: LD_INT 17
14624: ST_TO_ADDR
// hc_gallery :=  ;
14625: LD_ADDR_OWVAR 33
14629: PUSH
14630: LD_STRING 
14632: ST_TO_ADDR
// hc_name :=  ;
14633: LD_ADDR_OWVAR 26
14637: PUSH
14638: LD_STRING 
14640: ST_TO_ADDR
// un := CreateHuman ;
14641: LD_ADDR_VAR 0 2
14645: PUSH
14646: CALL_OW 44
14650: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
14651: LD_VAR 0 2
14655: PPUSH
14656: LD_INT 1
14658: PPUSH
14659: CALL_OW 51
// tmp := tmp ^ un ;
14663: LD_ADDR_VAR 0 3
14667: PUSH
14668: LD_VAR 0 3
14672: PUSH
14673: LD_VAR 0 2
14677: ADD
14678: ST_TO_ADDR
// end ;
14679: GO 14575
14681: POP
14682: POP
// repeat wait ( 0 0$1 ) ;
14683: LD_INT 35
14685: PPUSH
14686: CALL_OW 67
// for un in tmp do
14690: LD_ADDR_VAR 0 2
14694: PUSH
14695: LD_VAR 0 3
14699: PUSH
14700: FOR_IN
14701: IFFALSE 14775
// begin if IsDead ( un ) then
14703: LD_VAR 0 2
14707: PPUSH
14708: CALL_OW 301
14712: IFFALSE 14732
// begin tmp := tmp diff un ;
14714: LD_ADDR_VAR 0 3
14718: PUSH
14719: LD_VAR 0 3
14723: PUSH
14724: LD_VAR 0 2
14728: DIFF
14729: ST_TO_ADDR
// continue ;
14730: GO 14700
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
14732: LD_VAR 0 2
14736: PPUSH
14737: LD_INT 3
14739: PUSH
14740: LD_INT 22
14742: PUSH
14743: LD_INT 0
14745: PUSH
14746: EMPTY
14747: LIST
14748: LIST
14749: PUSH
14750: EMPTY
14751: LIST
14752: LIST
14753: PPUSH
14754: CALL_OW 69
14758: PPUSH
14759: LD_VAR 0 2
14763: PPUSH
14764: CALL_OW 74
14768: PPUSH
14769: CALL_OW 115
// end ;
14773: GO 14700
14775: POP
14776: POP
// until not tmp ;
14777: LD_VAR 0 3
14781: NOT
14782: IFFALSE 14683
// end ;
14784: PPOPN 3
14786: END
// every 0 0$1 trigger StreamModeActive and sTroll do
14787: LD_EXP 27
14791: PUSH
14792: LD_EXP 52
14796: AND
14797: IFFALSE 14851
14799: GO 14801
14801: DISABLE
// begin ToLua ( displayTroll(); ) ;
14802: LD_STRING displayTroll();
14804: PPUSH
14805: CALL_OW 559
// wait ( 3 3$00 ) ;
14809: LD_INT 6300
14811: PPUSH
14812: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14816: LD_STRING hideTroll();
14818: PPUSH
14819: CALL_OW 559
// wait ( 1 1$00 ) ;
14823: LD_INT 2100
14825: PPUSH
14826: CALL_OW 67
// ToLua ( displayTroll(); ) ;
14830: LD_STRING displayTroll();
14832: PPUSH
14833: CALL_OW 559
// wait ( 1 1$00 ) ;
14837: LD_INT 2100
14839: PPUSH
14840: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14844: LD_STRING hideTroll();
14846: PPUSH
14847: CALL_OW 559
// end ;
14851: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
14852: LD_EXP 27
14856: PUSH
14857: LD_EXP 53
14861: AND
14862: IFFALSE 14925
14864: GO 14866
14866: DISABLE
14867: LD_INT 0
14869: PPUSH
// begin p := 0 ;
14870: LD_ADDR_VAR 0 1
14874: PUSH
14875: LD_INT 0
14877: ST_TO_ADDR
// repeat game_speed := 1 ;
14878: LD_ADDR_OWVAR 65
14882: PUSH
14883: LD_INT 1
14885: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14886: LD_INT 35
14888: PPUSH
14889: CALL_OW 67
// p := p + 1 ;
14893: LD_ADDR_VAR 0 1
14897: PUSH
14898: LD_VAR 0 1
14902: PUSH
14903: LD_INT 1
14905: PLUS
14906: ST_TO_ADDR
// until p >= 60 ;
14907: LD_VAR 0 1
14911: PUSH
14912: LD_INT 60
14914: GREATEREQUAL
14915: IFFALSE 14878
// game_speed := 4 ;
14917: LD_ADDR_OWVAR 65
14921: PUSH
14922: LD_INT 4
14924: ST_TO_ADDR
// end ;
14925: PPOPN 1
14927: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14928: LD_EXP 27
14932: PUSH
14933: LD_EXP 54
14937: AND
14938: IFFALSE 15084
14940: GO 14942
14942: DISABLE
14943: LD_INT 0
14945: PPUSH
14946: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14947: LD_ADDR_VAR 0 1
14951: PUSH
14952: LD_INT 22
14954: PUSH
14955: LD_OWVAR 2
14959: PUSH
14960: EMPTY
14961: LIST
14962: LIST
14963: PUSH
14964: LD_INT 2
14966: PUSH
14967: LD_INT 30
14969: PUSH
14970: LD_INT 0
14972: PUSH
14973: EMPTY
14974: LIST
14975: LIST
14976: PUSH
14977: LD_INT 30
14979: PUSH
14980: LD_INT 1
14982: PUSH
14983: EMPTY
14984: LIST
14985: LIST
14986: PUSH
14987: EMPTY
14988: LIST
14989: LIST
14990: LIST
14991: PUSH
14992: EMPTY
14993: LIST
14994: LIST
14995: PPUSH
14996: CALL_OW 69
15000: ST_TO_ADDR
// if not depot then
15001: LD_VAR 0 1
15005: NOT
15006: IFFALSE 15010
// exit ;
15008: GO 15084
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15010: LD_ADDR_VAR 0 2
15014: PUSH
15015: LD_VAR 0 1
15019: PUSH
15020: LD_INT 1
15022: PPUSH
15023: LD_VAR 0 1
15027: PPUSH
15028: CALL_OW 12
15032: ARRAY
15033: PPUSH
15034: CALL_OW 274
15038: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15039: LD_VAR 0 2
15043: PPUSH
15044: LD_INT 1
15046: PPUSH
15047: LD_INT 0
15049: PPUSH
15050: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15054: LD_VAR 0 2
15058: PPUSH
15059: LD_INT 2
15061: PPUSH
15062: LD_INT 0
15064: PPUSH
15065: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15069: LD_VAR 0 2
15073: PPUSH
15074: LD_INT 3
15076: PPUSH
15077: LD_INT 0
15079: PPUSH
15080: CALL_OW 277
// end ;
15084: PPOPN 2
15086: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15087: LD_EXP 27
15091: PUSH
15092: LD_EXP 55
15096: AND
15097: IFFALSE 15194
15099: GO 15101
15101: DISABLE
15102: LD_INT 0
15104: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15105: LD_ADDR_VAR 0 1
15109: PUSH
15110: LD_INT 22
15112: PUSH
15113: LD_OWVAR 2
15117: PUSH
15118: EMPTY
15119: LIST
15120: LIST
15121: PUSH
15122: LD_INT 21
15124: PUSH
15125: LD_INT 1
15127: PUSH
15128: EMPTY
15129: LIST
15130: LIST
15131: PUSH
15132: LD_INT 3
15134: PUSH
15135: LD_INT 23
15137: PUSH
15138: LD_INT 0
15140: PUSH
15141: EMPTY
15142: LIST
15143: LIST
15144: PUSH
15145: EMPTY
15146: LIST
15147: LIST
15148: PUSH
15149: EMPTY
15150: LIST
15151: LIST
15152: LIST
15153: PPUSH
15154: CALL_OW 69
15158: ST_TO_ADDR
// if not tmp then
15159: LD_VAR 0 1
15163: NOT
15164: IFFALSE 15168
// exit ;
15166: GO 15194
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15168: LD_VAR 0 1
15172: PUSH
15173: LD_INT 1
15175: PPUSH
15176: LD_VAR 0 1
15180: PPUSH
15181: CALL_OW 12
15185: ARRAY
15186: PPUSH
15187: LD_INT 200
15189: PPUSH
15190: CALL_OW 234
// end ;
15194: PPOPN 1
15196: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15197: LD_EXP 27
15201: PUSH
15202: LD_EXP 56
15206: AND
15207: IFFALSE 15286
15209: GO 15211
15211: DISABLE
15212: LD_INT 0
15214: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15215: LD_ADDR_VAR 0 1
15219: PUSH
15220: LD_INT 22
15222: PUSH
15223: LD_OWVAR 2
15227: PUSH
15228: EMPTY
15229: LIST
15230: LIST
15231: PUSH
15232: LD_INT 21
15234: PUSH
15235: LD_INT 2
15237: PUSH
15238: EMPTY
15239: LIST
15240: LIST
15241: PUSH
15242: EMPTY
15243: LIST
15244: LIST
15245: PPUSH
15246: CALL_OW 69
15250: ST_TO_ADDR
// if not tmp then
15251: LD_VAR 0 1
15255: NOT
15256: IFFALSE 15260
// exit ;
15258: GO 15286
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15260: LD_VAR 0 1
15264: PUSH
15265: LD_INT 1
15267: PPUSH
15268: LD_VAR 0 1
15272: PPUSH
15273: CALL_OW 12
15277: ARRAY
15278: PPUSH
15279: LD_INT 60
15281: PPUSH
15282: CALL_OW 234
// end ;
15286: PPOPN 1
15288: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
15289: LD_EXP 27
15293: PUSH
15294: LD_EXP 57
15298: AND
15299: IFFALSE 15398
15301: GO 15303
15303: DISABLE
15304: LD_INT 0
15306: PPUSH
15307: PPUSH
// begin enable ;
15308: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
15309: LD_ADDR_VAR 0 1
15313: PUSH
15314: LD_INT 22
15316: PUSH
15317: LD_OWVAR 2
15321: PUSH
15322: EMPTY
15323: LIST
15324: LIST
15325: PUSH
15326: LD_INT 61
15328: PUSH
15329: EMPTY
15330: LIST
15331: PUSH
15332: LD_INT 33
15334: PUSH
15335: LD_INT 2
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: PUSH
15342: EMPTY
15343: LIST
15344: LIST
15345: LIST
15346: PPUSH
15347: CALL_OW 69
15351: ST_TO_ADDR
// if not tmp then
15352: LD_VAR 0 1
15356: NOT
15357: IFFALSE 15361
// exit ;
15359: GO 15398
// for i in tmp do
15361: LD_ADDR_VAR 0 2
15365: PUSH
15366: LD_VAR 0 1
15370: PUSH
15371: FOR_IN
15372: IFFALSE 15396
// if IsControledBy ( i ) then
15374: LD_VAR 0 2
15378: PPUSH
15379: CALL_OW 312
15383: IFFALSE 15394
// ComUnlink ( i ) ;
15385: LD_VAR 0 2
15389: PPUSH
15390: CALL_OW 136
15394: GO 15371
15396: POP
15397: POP
// end ;
15398: PPOPN 2
15400: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
15401: LD_EXP 27
15405: PUSH
15406: LD_EXP 58
15410: AND
15411: IFFALSE 15551
15413: GO 15415
15415: DISABLE
15416: LD_INT 0
15418: PPUSH
15419: PPUSH
// begin ToLua ( displayPowell(); ) ;
15420: LD_STRING displayPowell();
15422: PPUSH
15423: CALL_OW 559
// uc_side := 0 ;
15427: LD_ADDR_OWVAR 20
15431: PUSH
15432: LD_INT 0
15434: ST_TO_ADDR
// uc_nation := 2 ;
15435: LD_ADDR_OWVAR 21
15439: PUSH
15440: LD_INT 2
15442: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
15443: LD_ADDR_OWVAR 37
15447: PUSH
15448: LD_INT 14
15450: ST_TO_ADDR
// vc_engine := engine_siberite ;
15451: LD_ADDR_OWVAR 39
15455: PUSH
15456: LD_INT 3
15458: ST_TO_ADDR
// vc_control := control_apeman ;
15459: LD_ADDR_OWVAR 38
15463: PUSH
15464: LD_INT 5
15466: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
15467: LD_ADDR_OWVAR 40
15471: PUSH
15472: LD_INT 29
15474: ST_TO_ADDR
// un := CreateVehicle ;
15475: LD_ADDR_VAR 0 2
15479: PUSH
15480: CALL_OW 45
15484: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15485: LD_VAR 0 2
15489: PPUSH
15490: LD_INT 1
15492: PPUSH
15493: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15497: LD_INT 35
15499: PPUSH
15500: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15504: LD_VAR 0 2
15508: PPUSH
15509: LD_INT 22
15511: PUSH
15512: LD_OWVAR 2
15516: PUSH
15517: EMPTY
15518: LIST
15519: LIST
15520: PPUSH
15521: CALL_OW 69
15525: PPUSH
15526: LD_VAR 0 2
15530: PPUSH
15531: CALL_OW 74
15535: PPUSH
15536: CALL_OW 115
// until IsDead ( un ) ;
15540: LD_VAR 0 2
15544: PPUSH
15545: CALL_OW 301
15549: IFFALSE 15497
// end ;
15551: PPOPN 2
15553: END
// every 0 0$1 trigger StreamModeActive and sStu do
15554: LD_EXP 27
15558: PUSH
15559: LD_EXP 66
15563: AND
15564: IFFALSE 15580
15566: GO 15568
15568: DISABLE
// begin ToLua ( displayStucuk(); ) ;
15569: LD_STRING displayStucuk();
15571: PPUSH
15572: CALL_OW 559
// ResetFog ;
15576: CALL_OW 335
// end ;
15580: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
15581: LD_EXP 27
15585: PUSH
15586: LD_EXP 59
15590: AND
15591: IFFALSE 15732
15593: GO 15595
15595: DISABLE
15596: LD_INT 0
15598: PPUSH
15599: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15600: LD_ADDR_VAR 0 2
15604: PUSH
15605: LD_INT 22
15607: PUSH
15608: LD_OWVAR 2
15612: PUSH
15613: EMPTY
15614: LIST
15615: LIST
15616: PUSH
15617: LD_INT 21
15619: PUSH
15620: LD_INT 1
15622: PUSH
15623: EMPTY
15624: LIST
15625: LIST
15626: PUSH
15627: EMPTY
15628: LIST
15629: LIST
15630: PPUSH
15631: CALL_OW 69
15635: ST_TO_ADDR
// if not tmp then
15636: LD_VAR 0 2
15640: NOT
15641: IFFALSE 15645
// exit ;
15643: GO 15732
// un := tmp [ rand ( 1 , tmp ) ] ;
15645: LD_ADDR_VAR 0 1
15649: PUSH
15650: LD_VAR 0 2
15654: PUSH
15655: LD_INT 1
15657: PPUSH
15658: LD_VAR 0 2
15662: PPUSH
15663: CALL_OW 12
15667: ARRAY
15668: ST_TO_ADDR
// SetSide ( un , 0 ) ;
15669: LD_VAR 0 1
15673: PPUSH
15674: LD_INT 0
15676: PPUSH
15677: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
15681: LD_VAR 0 1
15685: PPUSH
15686: LD_OWVAR 3
15690: PUSH
15691: LD_VAR 0 1
15695: DIFF
15696: PPUSH
15697: LD_VAR 0 1
15701: PPUSH
15702: CALL_OW 74
15706: PPUSH
15707: CALL_OW 115
// wait ( 0 0$20 ) ;
15711: LD_INT 700
15713: PPUSH
15714: CALL_OW 67
// SetSide ( un , your_side ) ;
15718: LD_VAR 0 1
15722: PPUSH
15723: LD_OWVAR 2
15727: PPUSH
15728: CALL_OW 235
// end ;
15732: PPOPN 2
15734: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
15735: LD_EXP 27
15739: PUSH
15740: LD_EXP 60
15744: AND
15745: IFFALSE 15851
15747: GO 15749
15749: DISABLE
15750: LD_INT 0
15752: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15753: LD_ADDR_VAR 0 1
15757: PUSH
15758: LD_INT 22
15760: PUSH
15761: LD_OWVAR 2
15765: PUSH
15766: EMPTY
15767: LIST
15768: LIST
15769: PUSH
15770: LD_INT 2
15772: PUSH
15773: LD_INT 30
15775: PUSH
15776: LD_INT 0
15778: PUSH
15779: EMPTY
15780: LIST
15781: LIST
15782: PUSH
15783: LD_INT 30
15785: PUSH
15786: LD_INT 1
15788: PUSH
15789: EMPTY
15790: LIST
15791: LIST
15792: PUSH
15793: EMPTY
15794: LIST
15795: LIST
15796: LIST
15797: PUSH
15798: EMPTY
15799: LIST
15800: LIST
15801: PPUSH
15802: CALL_OW 69
15806: ST_TO_ADDR
// if not depot then
15807: LD_VAR 0 1
15811: NOT
15812: IFFALSE 15816
// exit ;
15814: GO 15851
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
15816: LD_VAR 0 1
15820: PUSH
15821: LD_INT 1
15823: ARRAY
15824: PPUSH
15825: CALL_OW 250
15829: PPUSH
15830: LD_VAR 0 1
15834: PUSH
15835: LD_INT 1
15837: ARRAY
15838: PPUSH
15839: CALL_OW 251
15843: PPUSH
15844: LD_INT 70
15846: PPUSH
15847: CALL_OW 495
// end ;
15851: PPOPN 1
15853: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
15854: LD_EXP 27
15858: PUSH
15859: LD_EXP 61
15863: AND
15864: IFFALSE 16075
15866: GO 15868
15868: DISABLE
15869: LD_INT 0
15871: PPUSH
15872: PPUSH
15873: PPUSH
15874: PPUSH
15875: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15876: LD_ADDR_VAR 0 5
15880: PUSH
15881: LD_INT 22
15883: PUSH
15884: LD_OWVAR 2
15888: PUSH
15889: EMPTY
15890: LIST
15891: LIST
15892: PUSH
15893: LD_INT 21
15895: PUSH
15896: LD_INT 1
15898: PUSH
15899: EMPTY
15900: LIST
15901: LIST
15902: PUSH
15903: EMPTY
15904: LIST
15905: LIST
15906: PPUSH
15907: CALL_OW 69
15911: ST_TO_ADDR
// if not tmp then
15912: LD_VAR 0 5
15916: NOT
15917: IFFALSE 15921
// exit ;
15919: GO 16075
// for i in tmp do
15921: LD_ADDR_VAR 0 1
15925: PUSH
15926: LD_VAR 0 5
15930: PUSH
15931: FOR_IN
15932: IFFALSE 16073
// begin d := rand ( 0 , 5 ) ;
15934: LD_ADDR_VAR 0 4
15938: PUSH
15939: LD_INT 0
15941: PPUSH
15942: LD_INT 5
15944: PPUSH
15945: CALL_OW 12
15949: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15950: LD_ADDR_VAR 0 2
15954: PUSH
15955: LD_VAR 0 1
15959: PPUSH
15960: CALL_OW 250
15964: PPUSH
15965: LD_VAR 0 4
15969: PPUSH
15970: LD_INT 3
15972: PPUSH
15973: LD_INT 12
15975: PPUSH
15976: CALL_OW 12
15980: PPUSH
15981: CALL_OW 272
15985: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15986: LD_ADDR_VAR 0 3
15990: PUSH
15991: LD_VAR 0 1
15995: PPUSH
15996: CALL_OW 251
16000: PPUSH
16001: LD_VAR 0 4
16005: PPUSH
16006: LD_INT 3
16008: PPUSH
16009: LD_INT 12
16011: PPUSH
16012: CALL_OW 12
16016: PPUSH
16017: CALL_OW 273
16021: ST_TO_ADDR
// if ValidHex ( x , y ) then
16022: LD_VAR 0 2
16026: PPUSH
16027: LD_VAR 0 3
16031: PPUSH
16032: CALL_OW 488
16036: IFFALSE 16071
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16038: LD_VAR 0 1
16042: PPUSH
16043: LD_VAR 0 2
16047: PPUSH
16048: LD_VAR 0 3
16052: PPUSH
16053: LD_INT 3
16055: PPUSH
16056: LD_INT 6
16058: PPUSH
16059: CALL_OW 12
16063: PPUSH
16064: LD_INT 1
16066: PPUSH
16067: CALL_OW 483
// end ;
16071: GO 15931
16073: POP
16074: POP
// end ;
16075: PPOPN 5
16077: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16078: LD_EXP 27
16082: PUSH
16083: LD_EXP 62
16087: AND
16088: IFFALSE 16182
16090: GO 16092
16092: DISABLE
16093: LD_INT 0
16095: PPUSH
16096: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16097: LD_ADDR_VAR 0 2
16101: PUSH
16102: LD_INT 22
16104: PUSH
16105: LD_OWVAR 2
16109: PUSH
16110: EMPTY
16111: LIST
16112: LIST
16113: PUSH
16114: LD_INT 32
16116: PUSH
16117: LD_INT 1
16119: PUSH
16120: EMPTY
16121: LIST
16122: LIST
16123: PUSH
16124: LD_INT 21
16126: PUSH
16127: LD_INT 2
16129: PUSH
16130: EMPTY
16131: LIST
16132: LIST
16133: PUSH
16134: EMPTY
16135: LIST
16136: LIST
16137: LIST
16138: PPUSH
16139: CALL_OW 69
16143: ST_TO_ADDR
// if not tmp then
16144: LD_VAR 0 2
16148: NOT
16149: IFFALSE 16153
// exit ;
16151: GO 16182
// for i in tmp do
16153: LD_ADDR_VAR 0 1
16157: PUSH
16158: LD_VAR 0 2
16162: PUSH
16163: FOR_IN
16164: IFFALSE 16180
// SetFuel ( i , 0 ) ;
16166: LD_VAR 0 1
16170: PPUSH
16171: LD_INT 0
16173: PPUSH
16174: CALL_OW 240
16178: GO 16163
16180: POP
16181: POP
// end ;
16182: PPOPN 2
16184: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16185: LD_EXP 27
16189: PUSH
16190: LD_EXP 63
16194: AND
16195: IFFALSE 16261
16197: GO 16199
16199: DISABLE
16200: LD_INT 0
16202: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16203: LD_ADDR_VAR 0 1
16207: PUSH
16208: LD_INT 22
16210: PUSH
16211: LD_OWVAR 2
16215: PUSH
16216: EMPTY
16217: LIST
16218: LIST
16219: PUSH
16220: LD_INT 30
16222: PUSH
16223: LD_INT 29
16225: PUSH
16226: EMPTY
16227: LIST
16228: LIST
16229: PUSH
16230: EMPTY
16231: LIST
16232: LIST
16233: PPUSH
16234: CALL_OW 69
16238: ST_TO_ADDR
// if not tmp then
16239: LD_VAR 0 1
16243: NOT
16244: IFFALSE 16248
// exit ;
16246: GO 16261
// DestroyUnit ( tmp [ 1 ] ) ;
16248: LD_VAR 0 1
16252: PUSH
16253: LD_INT 1
16255: ARRAY
16256: PPUSH
16257: CALL_OW 65
// end ;
16261: PPOPN 1
16263: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16264: LD_EXP 27
16268: PUSH
16269: LD_EXP 65
16273: AND
16274: IFFALSE 16403
16276: GO 16278
16278: DISABLE
16279: LD_INT 0
16281: PPUSH
// begin uc_side := 0 ;
16282: LD_ADDR_OWVAR 20
16286: PUSH
16287: LD_INT 0
16289: ST_TO_ADDR
// uc_nation := nation_arabian ;
16290: LD_ADDR_OWVAR 21
16294: PUSH
16295: LD_INT 2
16297: ST_TO_ADDR
// hc_gallery :=  ;
16298: LD_ADDR_OWVAR 33
16302: PUSH
16303: LD_STRING 
16305: ST_TO_ADDR
// hc_name :=  ;
16306: LD_ADDR_OWVAR 26
16310: PUSH
16311: LD_STRING 
16313: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
16314: LD_INT 1
16316: PPUSH
16317: LD_INT 11
16319: PPUSH
16320: LD_INT 10
16322: PPUSH
16323: CALL_OW 380
// un := CreateHuman ;
16327: LD_ADDR_VAR 0 1
16331: PUSH
16332: CALL_OW 44
16336: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16337: LD_VAR 0 1
16341: PPUSH
16342: LD_INT 1
16344: PPUSH
16345: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16349: LD_INT 35
16351: PPUSH
16352: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16356: LD_VAR 0 1
16360: PPUSH
16361: LD_INT 22
16363: PUSH
16364: LD_OWVAR 2
16368: PUSH
16369: EMPTY
16370: LIST
16371: LIST
16372: PPUSH
16373: CALL_OW 69
16377: PPUSH
16378: LD_VAR 0 1
16382: PPUSH
16383: CALL_OW 74
16387: PPUSH
16388: CALL_OW 115
// until IsDead ( un ) ;
16392: LD_VAR 0 1
16396: PPUSH
16397: CALL_OW 301
16401: IFFALSE 16349
// end ;
16403: PPOPN 1
16405: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
16406: LD_EXP 27
16410: PUSH
16411: LD_EXP 67
16415: AND
16416: IFFALSE 16428
16418: GO 16420
16420: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
16421: LD_STRING earthquake(getX(game), 0, 32)
16423: PPUSH
16424: CALL_OW 559
16428: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
16429: LD_EXP 27
16433: PUSH
16434: LD_EXP 68
16438: AND
16439: IFFALSE 16530
16441: GO 16443
16443: DISABLE
16444: LD_INT 0
16446: PPUSH
// begin enable ;
16447: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
16448: LD_ADDR_VAR 0 1
16452: PUSH
16453: LD_INT 22
16455: PUSH
16456: LD_OWVAR 2
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: PUSH
16465: LD_INT 21
16467: PUSH
16468: LD_INT 2
16470: PUSH
16471: EMPTY
16472: LIST
16473: LIST
16474: PUSH
16475: LD_INT 33
16477: PUSH
16478: LD_INT 3
16480: PUSH
16481: EMPTY
16482: LIST
16483: LIST
16484: PUSH
16485: EMPTY
16486: LIST
16487: LIST
16488: LIST
16489: PPUSH
16490: CALL_OW 69
16494: ST_TO_ADDR
// if not tmp then
16495: LD_VAR 0 1
16499: NOT
16500: IFFALSE 16504
// exit ;
16502: GO 16530
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16504: LD_VAR 0 1
16508: PUSH
16509: LD_INT 1
16511: PPUSH
16512: LD_VAR 0 1
16516: PPUSH
16517: CALL_OW 12
16521: ARRAY
16522: PPUSH
16523: LD_INT 1
16525: PPUSH
16526: CALL_OW 234
// end ;
16530: PPOPN 1
16532: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
16533: LD_EXP 27
16537: PUSH
16538: LD_EXP 69
16542: AND
16543: IFFALSE 16684
16545: GO 16547
16547: DISABLE
16548: LD_INT 0
16550: PPUSH
16551: PPUSH
16552: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16553: LD_ADDR_VAR 0 3
16557: PUSH
16558: LD_INT 22
16560: PUSH
16561: LD_OWVAR 2
16565: PUSH
16566: EMPTY
16567: LIST
16568: LIST
16569: PUSH
16570: LD_INT 25
16572: PUSH
16573: LD_INT 1
16575: PUSH
16576: EMPTY
16577: LIST
16578: LIST
16579: PUSH
16580: EMPTY
16581: LIST
16582: LIST
16583: PPUSH
16584: CALL_OW 69
16588: ST_TO_ADDR
// if not tmp then
16589: LD_VAR 0 3
16593: NOT
16594: IFFALSE 16598
// exit ;
16596: GO 16684
// un := tmp [ rand ( 1 , tmp ) ] ;
16598: LD_ADDR_VAR 0 2
16602: PUSH
16603: LD_VAR 0 3
16607: PUSH
16608: LD_INT 1
16610: PPUSH
16611: LD_VAR 0 3
16615: PPUSH
16616: CALL_OW 12
16620: ARRAY
16621: ST_TO_ADDR
// if Crawls ( un ) then
16622: LD_VAR 0 2
16626: PPUSH
16627: CALL_OW 318
16631: IFFALSE 16642
// ComWalk ( un ) ;
16633: LD_VAR 0 2
16637: PPUSH
16638: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
16642: LD_VAR 0 2
16646: PPUSH
16647: LD_INT 9
16649: PPUSH
16650: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
16654: LD_INT 28
16656: PPUSH
16657: LD_OWVAR 2
16661: PPUSH
16662: LD_INT 2
16664: PPUSH
16665: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
16669: LD_INT 29
16671: PPUSH
16672: LD_OWVAR 2
16676: PPUSH
16677: LD_INT 2
16679: PPUSH
16680: CALL_OW 322
// end ;
16684: PPOPN 3
16686: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
16687: LD_EXP 27
16691: PUSH
16692: LD_EXP 70
16696: AND
16697: IFFALSE 16808
16699: GO 16701
16701: DISABLE
16702: LD_INT 0
16704: PPUSH
16705: PPUSH
16706: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16707: LD_ADDR_VAR 0 3
16711: PUSH
16712: LD_INT 22
16714: PUSH
16715: LD_OWVAR 2
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: PUSH
16724: LD_INT 25
16726: PUSH
16727: LD_INT 1
16729: PUSH
16730: EMPTY
16731: LIST
16732: LIST
16733: PUSH
16734: EMPTY
16735: LIST
16736: LIST
16737: PPUSH
16738: CALL_OW 69
16742: ST_TO_ADDR
// if not tmp then
16743: LD_VAR 0 3
16747: NOT
16748: IFFALSE 16752
// exit ;
16750: GO 16808
// un := tmp [ rand ( 1 , tmp ) ] ;
16752: LD_ADDR_VAR 0 2
16756: PUSH
16757: LD_VAR 0 3
16761: PUSH
16762: LD_INT 1
16764: PPUSH
16765: LD_VAR 0 3
16769: PPUSH
16770: CALL_OW 12
16774: ARRAY
16775: ST_TO_ADDR
// if Crawls ( un ) then
16776: LD_VAR 0 2
16780: PPUSH
16781: CALL_OW 318
16785: IFFALSE 16796
// ComWalk ( un ) ;
16787: LD_VAR 0 2
16791: PPUSH
16792: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16796: LD_VAR 0 2
16800: PPUSH
16801: LD_INT 8
16803: PPUSH
16804: CALL_OW 336
// end ;
16808: PPOPN 3
16810: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
16811: LD_EXP 27
16815: PUSH
16816: LD_EXP 71
16820: AND
16821: IFFALSE 16965
16823: GO 16825
16825: DISABLE
16826: LD_INT 0
16828: PPUSH
16829: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
16830: LD_ADDR_VAR 0 2
16834: PUSH
16835: LD_INT 22
16837: PUSH
16838: LD_OWVAR 2
16842: PUSH
16843: EMPTY
16844: LIST
16845: LIST
16846: PUSH
16847: LD_INT 21
16849: PUSH
16850: LD_INT 2
16852: PUSH
16853: EMPTY
16854: LIST
16855: LIST
16856: PUSH
16857: LD_INT 2
16859: PUSH
16860: LD_INT 34
16862: PUSH
16863: LD_INT 12
16865: PUSH
16866: EMPTY
16867: LIST
16868: LIST
16869: PUSH
16870: LD_INT 34
16872: PUSH
16873: LD_INT 51
16875: PUSH
16876: EMPTY
16877: LIST
16878: LIST
16879: PUSH
16880: LD_INT 34
16882: PUSH
16883: LD_INT 32
16885: PUSH
16886: EMPTY
16887: LIST
16888: LIST
16889: PUSH
16890: EMPTY
16891: LIST
16892: LIST
16893: LIST
16894: LIST
16895: PUSH
16896: EMPTY
16897: LIST
16898: LIST
16899: LIST
16900: PPUSH
16901: CALL_OW 69
16905: ST_TO_ADDR
// if not tmp then
16906: LD_VAR 0 2
16910: NOT
16911: IFFALSE 16915
// exit ;
16913: GO 16965
// for i in tmp do
16915: LD_ADDR_VAR 0 1
16919: PUSH
16920: LD_VAR 0 2
16924: PUSH
16925: FOR_IN
16926: IFFALSE 16963
// if GetCargo ( i , mat_artifact ) = 0 then
16928: LD_VAR 0 1
16932: PPUSH
16933: LD_INT 4
16935: PPUSH
16936: CALL_OW 289
16940: PUSH
16941: LD_INT 0
16943: EQUAL
16944: IFFALSE 16961
// SetCargo ( i , mat_siberit , 100 ) ;
16946: LD_VAR 0 1
16950: PPUSH
16951: LD_INT 3
16953: PPUSH
16954: LD_INT 100
16956: PPUSH
16957: CALL_OW 290
16961: GO 16925
16963: POP
16964: POP
// end ;
16965: PPOPN 2
16967: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16968: LD_EXP 27
16972: PUSH
16973: LD_EXP 72
16977: AND
16978: IFFALSE 17161
16980: GO 16982
16982: DISABLE
16983: LD_INT 0
16985: PPUSH
16986: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16987: LD_ADDR_VAR 0 2
16991: PUSH
16992: LD_INT 22
16994: PUSH
16995: LD_OWVAR 2
16999: PUSH
17000: EMPTY
17001: LIST
17002: LIST
17003: PPUSH
17004: CALL_OW 69
17008: ST_TO_ADDR
// if not tmp then
17009: LD_VAR 0 2
17013: NOT
17014: IFFALSE 17018
// exit ;
17016: GO 17161
// for i := 1 to 2 do
17018: LD_ADDR_VAR 0 1
17022: PUSH
17023: DOUBLE
17024: LD_INT 1
17026: DEC
17027: ST_TO_ADDR
17028: LD_INT 2
17030: PUSH
17031: FOR_TO
17032: IFFALSE 17159
// begin uc_side := your_side ;
17034: LD_ADDR_OWVAR 20
17038: PUSH
17039: LD_OWVAR 2
17043: ST_TO_ADDR
// uc_nation := nation_american ;
17044: LD_ADDR_OWVAR 21
17048: PUSH
17049: LD_INT 1
17051: ST_TO_ADDR
// vc_chassis := us_morphling ;
17052: LD_ADDR_OWVAR 37
17056: PUSH
17057: LD_INT 5
17059: ST_TO_ADDR
// vc_engine := engine_siberite ;
17060: LD_ADDR_OWVAR 39
17064: PUSH
17065: LD_INT 3
17067: ST_TO_ADDR
// vc_control := control_computer ;
17068: LD_ADDR_OWVAR 38
17072: PUSH
17073: LD_INT 3
17075: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17076: LD_ADDR_OWVAR 40
17080: PUSH
17081: LD_INT 10
17083: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17084: LD_VAR 0 2
17088: PUSH
17089: LD_INT 1
17091: ARRAY
17092: PPUSH
17093: CALL_OW 310
17097: NOT
17098: IFFALSE 17145
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17100: CALL_OW 45
17104: PPUSH
17105: LD_VAR 0 2
17109: PUSH
17110: LD_INT 1
17112: ARRAY
17113: PPUSH
17114: CALL_OW 250
17118: PPUSH
17119: LD_VAR 0 2
17123: PUSH
17124: LD_INT 1
17126: ARRAY
17127: PPUSH
17128: CALL_OW 251
17132: PPUSH
17133: LD_INT 12
17135: PPUSH
17136: LD_INT 1
17138: PPUSH
17139: CALL_OW 50
17143: GO 17157
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17145: CALL_OW 45
17149: PPUSH
17150: LD_INT 1
17152: PPUSH
17153: CALL_OW 51
// end ;
17157: GO 17031
17159: POP
17160: POP
// end ;
17161: PPOPN 2
17163: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17164: LD_EXP 27
17168: PUSH
17169: LD_EXP 73
17173: AND
17174: IFFALSE 17396
17176: GO 17178
17178: DISABLE
17179: LD_INT 0
17181: PPUSH
17182: PPUSH
17183: PPUSH
17184: PPUSH
17185: PPUSH
17186: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17187: LD_ADDR_VAR 0 6
17191: PUSH
17192: LD_INT 22
17194: PUSH
17195: LD_OWVAR 2
17199: PUSH
17200: EMPTY
17201: LIST
17202: LIST
17203: PUSH
17204: LD_INT 21
17206: PUSH
17207: LD_INT 1
17209: PUSH
17210: EMPTY
17211: LIST
17212: LIST
17213: PUSH
17214: LD_INT 3
17216: PUSH
17217: LD_INT 23
17219: PUSH
17220: LD_INT 0
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: PUSH
17227: EMPTY
17228: LIST
17229: LIST
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: LIST
17235: PPUSH
17236: CALL_OW 69
17240: ST_TO_ADDR
// if not tmp then
17241: LD_VAR 0 6
17245: NOT
17246: IFFALSE 17250
// exit ;
17248: GO 17396
// s1 := rand ( 1 , 4 ) ;
17250: LD_ADDR_VAR 0 2
17254: PUSH
17255: LD_INT 1
17257: PPUSH
17258: LD_INT 4
17260: PPUSH
17261: CALL_OW 12
17265: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17266: LD_ADDR_VAR 0 4
17270: PUSH
17271: LD_VAR 0 6
17275: PUSH
17276: LD_INT 1
17278: ARRAY
17279: PPUSH
17280: LD_VAR 0 2
17284: PPUSH
17285: CALL_OW 259
17289: ST_TO_ADDR
// if s1 = 1 then
17290: LD_VAR 0 2
17294: PUSH
17295: LD_INT 1
17297: EQUAL
17298: IFFALSE 17318
// s2 := rand ( 2 , 4 ) else
17300: LD_ADDR_VAR 0 3
17304: PUSH
17305: LD_INT 2
17307: PPUSH
17308: LD_INT 4
17310: PPUSH
17311: CALL_OW 12
17315: ST_TO_ADDR
17316: GO 17326
// s2 := 1 ;
17318: LD_ADDR_VAR 0 3
17322: PUSH
17323: LD_INT 1
17325: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
17326: LD_ADDR_VAR 0 5
17330: PUSH
17331: LD_VAR 0 6
17335: PUSH
17336: LD_INT 1
17338: ARRAY
17339: PPUSH
17340: LD_VAR 0 3
17344: PPUSH
17345: CALL_OW 259
17349: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
17350: LD_VAR 0 6
17354: PUSH
17355: LD_INT 1
17357: ARRAY
17358: PPUSH
17359: LD_VAR 0 2
17363: PPUSH
17364: LD_VAR 0 5
17368: PPUSH
17369: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
17373: LD_VAR 0 6
17377: PUSH
17378: LD_INT 1
17380: ARRAY
17381: PPUSH
17382: LD_VAR 0 3
17386: PPUSH
17387: LD_VAR 0 4
17391: PPUSH
17392: CALL_OW 237
// end ;
17396: PPOPN 6
17398: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
17399: LD_EXP 27
17403: PUSH
17404: LD_EXP 74
17408: AND
17409: IFFALSE 17488
17411: GO 17413
17413: DISABLE
17414: LD_INT 0
17416: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
17417: LD_ADDR_VAR 0 1
17421: PUSH
17422: LD_INT 22
17424: PUSH
17425: LD_OWVAR 2
17429: PUSH
17430: EMPTY
17431: LIST
17432: LIST
17433: PUSH
17434: LD_INT 30
17436: PUSH
17437: LD_INT 3
17439: PUSH
17440: EMPTY
17441: LIST
17442: LIST
17443: PUSH
17444: EMPTY
17445: LIST
17446: LIST
17447: PPUSH
17448: CALL_OW 69
17452: ST_TO_ADDR
// if not tmp then
17453: LD_VAR 0 1
17457: NOT
17458: IFFALSE 17462
// exit ;
17460: GO 17488
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17462: LD_VAR 0 1
17466: PUSH
17467: LD_INT 1
17469: PPUSH
17470: LD_VAR 0 1
17474: PPUSH
17475: CALL_OW 12
17479: ARRAY
17480: PPUSH
17481: LD_INT 1
17483: PPUSH
17484: CALL_OW 234
// end ;
17488: PPOPN 1
17490: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
17491: LD_EXP 27
17495: PUSH
17496: LD_EXP 75
17500: AND
17501: IFFALSE 17613
17503: GO 17505
17505: DISABLE
17506: LD_INT 0
17508: PPUSH
17509: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
17510: LD_ADDR_VAR 0 2
17514: PUSH
17515: LD_INT 22
17517: PUSH
17518: LD_OWVAR 2
17522: PUSH
17523: EMPTY
17524: LIST
17525: LIST
17526: PUSH
17527: LD_INT 2
17529: PUSH
17530: LD_INT 30
17532: PUSH
17533: LD_INT 27
17535: PUSH
17536: EMPTY
17537: LIST
17538: LIST
17539: PUSH
17540: LD_INT 30
17542: PUSH
17543: LD_INT 26
17545: PUSH
17546: EMPTY
17547: LIST
17548: LIST
17549: PUSH
17550: LD_INT 30
17552: PUSH
17553: LD_INT 28
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PPUSH
17570: CALL_OW 69
17574: ST_TO_ADDR
// if not tmp then
17575: LD_VAR 0 2
17579: NOT
17580: IFFALSE 17584
// exit ;
17582: GO 17613
// for i in tmp do
17584: LD_ADDR_VAR 0 1
17588: PUSH
17589: LD_VAR 0 2
17593: PUSH
17594: FOR_IN
17595: IFFALSE 17611
// SetLives ( i , 1 ) ;
17597: LD_VAR 0 1
17601: PPUSH
17602: LD_INT 1
17604: PPUSH
17605: CALL_OW 234
17609: GO 17594
17611: POP
17612: POP
// end ;
17613: PPOPN 2
17615: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
17616: LD_EXP 27
17620: PUSH
17621: LD_EXP 76
17625: AND
17626: IFFALSE 17913
17628: GO 17630
17630: DISABLE
17631: LD_INT 0
17633: PPUSH
17634: PPUSH
17635: PPUSH
// begin i := rand ( 1 , 7 ) ;
17636: LD_ADDR_VAR 0 1
17640: PUSH
17641: LD_INT 1
17643: PPUSH
17644: LD_INT 7
17646: PPUSH
17647: CALL_OW 12
17651: ST_TO_ADDR
// case i of 1 :
17652: LD_VAR 0 1
17656: PUSH
17657: LD_INT 1
17659: DOUBLE
17660: EQUAL
17661: IFTRUE 17665
17663: GO 17675
17665: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
17666: LD_STRING earthquake(getX(game), 0, 32)
17668: PPUSH
17669: CALL_OW 559
17673: GO 17913
17675: LD_INT 2
17677: DOUBLE
17678: EQUAL
17679: IFTRUE 17683
17681: GO 17697
17683: POP
// begin ToLua ( displayStucuk(); ) ;
17684: LD_STRING displayStucuk();
17686: PPUSH
17687: CALL_OW 559
// ResetFog ;
17691: CALL_OW 335
// end ; 3 :
17695: GO 17913
17697: LD_INT 3
17699: DOUBLE
17700: EQUAL
17701: IFTRUE 17705
17703: GO 17809
17705: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17706: LD_ADDR_VAR 0 2
17710: PUSH
17711: LD_INT 22
17713: PUSH
17714: LD_OWVAR 2
17718: PUSH
17719: EMPTY
17720: LIST
17721: LIST
17722: PUSH
17723: LD_INT 25
17725: PUSH
17726: LD_INT 1
17728: PUSH
17729: EMPTY
17730: LIST
17731: LIST
17732: PUSH
17733: EMPTY
17734: LIST
17735: LIST
17736: PPUSH
17737: CALL_OW 69
17741: ST_TO_ADDR
// if not tmp then
17742: LD_VAR 0 2
17746: NOT
17747: IFFALSE 17751
// exit ;
17749: GO 17913
// un := tmp [ rand ( 1 , tmp ) ] ;
17751: LD_ADDR_VAR 0 3
17755: PUSH
17756: LD_VAR 0 2
17760: PUSH
17761: LD_INT 1
17763: PPUSH
17764: LD_VAR 0 2
17768: PPUSH
17769: CALL_OW 12
17773: ARRAY
17774: ST_TO_ADDR
// if Crawls ( un ) then
17775: LD_VAR 0 3
17779: PPUSH
17780: CALL_OW 318
17784: IFFALSE 17795
// ComWalk ( un ) ;
17786: LD_VAR 0 3
17790: PPUSH
17791: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17795: LD_VAR 0 3
17799: PPUSH
17800: LD_INT 8
17802: PPUSH
17803: CALL_OW 336
// end ; 4 :
17807: GO 17913
17809: LD_INT 4
17811: DOUBLE
17812: EQUAL
17813: IFTRUE 17817
17815: GO 17891
17817: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17818: LD_ADDR_VAR 0 2
17822: PUSH
17823: LD_INT 22
17825: PUSH
17826: LD_OWVAR 2
17830: PUSH
17831: EMPTY
17832: LIST
17833: LIST
17834: PUSH
17835: LD_INT 30
17837: PUSH
17838: LD_INT 29
17840: PUSH
17841: EMPTY
17842: LIST
17843: LIST
17844: PUSH
17845: EMPTY
17846: LIST
17847: LIST
17848: PPUSH
17849: CALL_OW 69
17853: ST_TO_ADDR
// if not tmp then
17854: LD_VAR 0 2
17858: NOT
17859: IFFALSE 17863
// exit ;
17861: GO 17913
// CenterNowOnUnits ( tmp [ 1 ] ) ;
17863: LD_VAR 0 2
17867: PUSH
17868: LD_INT 1
17870: ARRAY
17871: PPUSH
17872: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
17876: LD_VAR 0 2
17880: PUSH
17881: LD_INT 1
17883: ARRAY
17884: PPUSH
17885: CALL_OW 65
// end ; 5 .. 7 :
17889: GO 17913
17891: LD_INT 5
17893: DOUBLE
17894: GREATEREQUAL
17895: IFFALSE 17903
17897: LD_INT 7
17899: DOUBLE
17900: LESSEQUAL
17901: IFTRUE 17905
17903: GO 17912
17905: POP
// StreamSibBomb ; end ;
17906: CALL 14150 0 0
17910: GO 17913
17912: POP
// end ;
17913: PPOPN 3
17915: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17916: LD_EXP 27
17920: PUSH
17921: LD_EXP 77
17925: AND
17926: IFFALSE 18082
17928: GO 17930
17930: DISABLE
17931: LD_INT 0
17933: PPUSH
17934: PPUSH
17935: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17936: LD_ADDR_VAR 0 2
17940: PUSH
17941: LD_INT 81
17943: PUSH
17944: LD_OWVAR 2
17948: PUSH
17949: EMPTY
17950: LIST
17951: LIST
17952: PUSH
17953: LD_INT 2
17955: PUSH
17956: LD_INT 21
17958: PUSH
17959: LD_INT 1
17961: PUSH
17962: EMPTY
17963: LIST
17964: LIST
17965: PUSH
17966: LD_INT 21
17968: PUSH
17969: LD_INT 2
17971: PUSH
17972: EMPTY
17973: LIST
17974: LIST
17975: PUSH
17976: EMPTY
17977: LIST
17978: LIST
17979: LIST
17980: PUSH
17981: EMPTY
17982: LIST
17983: LIST
17984: PPUSH
17985: CALL_OW 69
17989: ST_TO_ADDR
// if not tmp then
17990: LD_VAR 0 2
17994: NOT
17995: IFFALSE 17999
// exit ;
17997: GO 18082
// p := 0 ;
17999: LD_ADDR_VAR 0 3
18003: PUSH
18004: LD_INT 0
18006: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18007: LD_INT 35
18009: PPUSH
18010: CALL_OW 67
// p := p + 1 ;
18014: LD_ADDR_VAR 0 3
18018: PUSH
18019: LD_VAR 0 3
18023: PUSH
18024: LD_INT 1
18026: PLUS
18027: ST_TO_ADDR
// for i in tmp do
18028: LD_ADDR_VAR 0 1
18032: PUSH
18033: LD_VAR 0 2
18037: PUSH
18038: FOR_IN
18039: IFFALSE 18070
// if GetLives ( i ) < 1000 then
18041: LD_VAR 0 1
18045: PPUSH
18046: CALL_OW 256
18050: PUSH
18051: LD_INT 1000
18053: LESS
18054: IFFALSE 18068
// SetLives ( i , 1000 ) ;
18056: LD_VAR 0 1
18060: PPUSH
18061: LD_INT 1000
18063: PPUSH
18064: CALL_OW 234
18068: GO 18038
18070: POP
18071: POP
// until p > 20 ;
18072: LD_VAR 0 3
18076: PUSH
18077: LD_INT 20
18079: GREATER
18080: IFFALSE 18007
// end ;
18082: PPOPN 3
18084: END
// every 0 0$1 trigger StreamModeActive and sTime do
18085: LD_EXP 27
18089: PUSH
18090: LD_EXP 78
18094: AND
18095: IFFALSE 18130
18097: GO 18099
18099: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18100: LD_INT 28
18102: PPUSH
18103: LD_OWVAR 2
18107: PPUSH
18108: LD_INT 2
18110: PPUSH
18111: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18115: LD_INT 30
18117: PPUSH
18118: LD_OWVAR 2
18122: PPUSH
18123: LD_INT 2
18125: PPUSH
18126: CALL_OW 322
// end ;
18130: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18131: LD_EXP 27
18135: PUSH
18136: LD_EXP 79
18140: AND
18141: IFFALSE 18262
18143: GO 18145
18145: DISABLE
18146: LD_INT 0
18148: PPUSH
18149: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18150: LD_ADDR_VAR 0 2
18154: PUSH
18155: LD_INT 22
18157: PUSH
18158: LD_OWVAR 2
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: PUSH
18167: LD_INT 21
18169: PUSH
18170: LD_INT 1
18172: PUSH
18173: EMPTY
18174: LIST
18175: LIST
18176: PUSH
18177: LD_INT 3
18179: PUSH
18180: LD_INT 23
18182: PUSH
18183: LD_INT 0
18185: PUSH
18186: EMPTY
18187: LIST
18188: LIST
18189: PUSH
18190: EMPTY
18191: LIST
18192: LIST
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: LIST
18198: PPUSH
18199: CALL_OW 69
18203: ST_TO_ADDR
// if not tmp then
18204: LD_VAR 0 2
18208: NOT
18209: IFFALSE 18213
// exit ;
18211: GO 18262
// for i in tmp do
18213: LD_ADDR_VAR 0 1
18217: PUSH
18218: LD_VAR 0 2
18222: PUSH
18223: FOR_IN
18224: IFFALSE 18260
// begin if Crawls ( i ) then
18226: LD_VAR 0 1
18230: PPUSH
18231: CALL_OW 318
18235: IFFALSE 18246
// ComWalk ( i ) ;
18237: LD_VAR 0 1
18241: PPUSH
18242: CALL_OW 138
// SetClass ( i , 2 ) ;
18246: LD_VAR 0 1
18250: PPUSH
18251: LD_INT 2
18253: PPUSH
18254: CALL_OW 336
// end ;
18258: GO 18223
18260: POP
18261: POP
// end ;
18262: PPOPN 2
18264: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18265: LD_EXP 27
18269: PUSH
18270: LD_EXP 80
18274: AND
18275: IFFALSE 18563
18277: GO 18279
18279: DISABLE
18280: LD_INT 0
18282: PPUSH
18283: PPUSH
18284: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
18285: LD_OWVAR 2
18289: PPUSH
18290: LD_INT 9
18292: PPUSH
18293: LD_INT 1
18295: PPUSH
18296: LD_INT 1
18298: PPUSH
18299: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
18303: LD_INT 9
18305: PPUSH
18306: LD_OWVAR 2
18310: PPUSH
18311: CALL_OW 343
// uc_side := 9 ;
18315: LD_ADDR_OWVAR 20
18319: PUSH
18320: LD_INT 9
18322: ST_TO_ADDR
// uc_nation := 2 ;
18323: LD_ADDR_OWVAR 21
18327: PUSH
18328: LD_INT 2
18330: ST_TO_ADDR
// hc_name := Dark Warrior ;
18331: LD_ADDR_OWVAR 26
18335: PUSH
18336: LD_STRING Dark Warrior
18338: ST_TO_ADDR
// hc_gallery :=  ;
18339: LD_ADDR_OWVAR 33
18343: PUSH
18344: LD_STRING 
18346: ST_TO_ADDR
// hc_noskilllimit := true ;
18347: LD_ADDR_OWVAR 76
18351: PUSH
18352: LD_INT 1
18354: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
18355: LD_ADDR_OWVAR 31
18359: PUSH
18360: LD_INT 30
18362: PUSH
18363: LD_INT 30
18365: PUSH
18366: LD_INT 30
18368: PUSH
18369: LD_INT 30
18371: PUSH
18372: EMPTY
18373: LIST
18374: LIST
18375: LIST
18376: LIST
18377: ST_TO_ADDR
// un := CreateHuman ;
18378: LD_ADDR_VAR 0 3
18382: PUSH
18383: CALL_OW 44
18387: ST_TO_ADDR
// hc_noskilllimit := false ;
18388: LD_ADDR_OWVAR 76
18392: PUSH
18393: LD_INT 0
18395: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18396: LD_VAR 0 3
18400: PPUSH
18401: LD_INT 1
18403: PPUSH
18404: CALL_OW 51
// ToLua ( playRanger() ) ;
18408: LD_STRING playRanger()
18410: PPUSH
18411: CALL_OW 559
// p := 0 ;
18415: LD_ADDR_VAR 0 2
18419: PUSH
18420: LD_INT 0
18422: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18423: LD_INT 35
18425: PPUSH
18426: CALL_OW 67
// p := p + 1 ;
18430: LD_ADDR_VAR 0 2
18434: PUSH
18435: LD_VAR 0 2
18439: PUSH
18440: LD_INT 1
18442: PLUS
18443: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
18444: LD_VAR 0 3
18448: PPUSH
18449: CALL_OW 256
18453: PUSH
18454: LD_INT 1000
18456: LESS
18457: IFFALSE 18471
// SetLives ( un , 1000 ) ;
18459: LD_VAR 0 3
18463: PPUSH
18464: LD_INT 1000
18466: PPUSH
18467: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
18471: LD_VAR 0 3
18475: PPUSH
18476: LD_INT 81
18478: PUSH
18479: LD_OWVAR 2
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: PUSH
18488: LD_INT 91
18490: PUSH
18491: LD_VAR 0 3
18495: PUSH
18496: LD_INT 30
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: LIST
18503: PUSH
18504: EMPTY
18505: LIST
18506: LIST
18507: PPUSH
18508: CALL_OW 69
18512: PPUSH
18513: LD_VAR 0 3
18517: PPUSH
18518: CALL_OW 74
18522: PPUSH
18523: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
18527: LD_VAR 0 2
18531: PUSH
18532: LD_INT 80
18534: GREATER
18535: PUSH
18536: LD_VAR 0 3
18540: PPUSH
18541: CALL_OW 301
18545: OR
18546: IFFALSE 18423
// if un then
18548: LD_VAR 0 3
18552: IFFALSE 18563
// RemoveUnit ( un ) ;
18554: LD_VAR 0 3
18558: PPUSH
18559: CALL_OW 64
// end ;
18563: PPOPN 3
18565: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
18566: LD_EXP 81
18570: IFFALSE 18686
18572: GO 18574
18574: DISABLE
18575: LD_INT 0
18577: PPUSH
18578: PPUSH
18579: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18580: LD_ADDR_VAR 0 2
18584: PUSH
18585: LD_INT 81
18587: PUSH
18588: LD_OWVAR 2
18592: PUSH
18593: EMPTY
18594: LIST
18595: LIST
18596: PUSH
18597: LD_INT 21
18599: PUSH
18600: LD_INT 1
18602: PUSH
18603: EMPTY
18604: LIST
18605: LIST
18606: PUSH
18607: EMPTY
18608: LIST
18609: LIST
18610: PPUSH
18611: CALL_OW 69
18615: ST_TO_ADDR
// ToLua ( playComputer() ) ;
18616: LD_STRING playComputer()
18618: PPUSH
18619: CALL_OW 559
// if not tmp then
18623: LD_VAR 0 2
18627: NOT
18628: IFFALSE 18632
// exit ;
18630: GO 18686
// for i in tmp do
18632: LD_ADDR_VAR 0 1
18636: PUSH
18637: LD_VAR 0 2
18641: PUSH
18642: FOR_IN
18643: IFFALSE 18684
// for j := 1 to 4 do
18645: LD_ADDR_VAR 0 3
18649: PUSH
18650: DOUBLE
18651: LD_INT 1
18653: DEC
18654: ST_TO_ADDR
18655: LD_INT 4
18657: PUSH
18658: FOR_TO
18659: IFFALSE 18680
// SetSkill ( i , j , 10 ) ;
18661: LD_VAR 0 1
18665: PPUSH
18666: LD_VAR 0 3
18670: PPUSH
18671: LD_INT 10
18673: PPUSH
18674: CALL_OW 237
18678: GO 18658
18680: POP
18681: POP
18682: GO 18642
18684: POP
18685: POP
// end ;
18686: PPOPN 3
18688: END
// every 0 0$1 trigger s30 do var i , tmp ;
18689: LD_EXP 82
18693: IFFALSE 18762
18695: GO 18697
18697: DISABLE
18698: LD_INT 0
18700: PPUSH
18701: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18702: LD_ADDR_VAR 0 2
18706: PUSH
18707: LD_INT 22
18709: PUSH
18710: LD_OWVAR 2
18714: PUSH
18715: EMPTY
18716: LIST
18717: LIST
18718: PPUSH
18719: CALL_OW 69
18723: ST_TO_ADDR
// if not tmp then
18724: LD_VAR 0 2
18728: NOT
18729: IFFALSE 18733
// exit ;
18731: GO 18762
// for i in tmp do
18733: LD_ADDR_VAR 0 1
18737: PUSH
18738: LD_VAR 0 2
18742: PUSH
18743: FOR_IN
18744: IFFALSE 18760
// SetLives ( i , 300 ) ;
18746: LD_VAR 0 1
18750: PPUSH
18751: LD_INT 300
18753: PPUSH
18754: CALL_OW 234
18758: GO 18743
18760: POP
18761: POP
// end ;
18762: PPOPN 2
18764: END
// every 0 0$1 trigger s60 do var i , tmp ;
18765: LD_EXP 83
18769: IFFALSE 18838
18771: GO 18773
18773: DISABLE
18774: LD_INT 0
18776: PPUSH
18777: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18778: LD_ADDR_VAR 0 2
18782: PUSH
18783: LD_INT 22
18785: PUSH
18786: LD_OWVAR 2
18790: PUSH
18791: EMPTY
18792: LIST
18793: LIST
18794: PPUSH
18795: CALL_OW 69
18799: ST_TO_ADDR
// if not tmp then
18800: LD_VAR 0 2
18804: NOT
18805: IFFALSE 18809
// exit ;
18807: GO 18838
// for i in tmp do
18809: LD_ADDR_VAR 0 1
18813: PUSH
18814: LD_VAR 0 2
18818: PUSH
18819: FOR_IN
18820: IFFALSE 18836
// SetLives ( i , 600 ) ;
18822: LD_VAR 0 1
18826: PPUSH
18827: LD_INT 600
18829: PPUSH
18830: CALL_OW 234
18834: GO 18819
18836: POP
18837: POP
// end ;
18838: PPOPN 2
18840: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18841: LD_INT 0
18843: PPUSH
// case cmd of 301 :
18844: LD_VAR 0 1
18848: PUSH
18849: LD_INT 301
18851: DOUBLE
18852: EQUAL
18853: IFTRUE 18857
18855: GO 18889
18857: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
18858: LD_VAR 0 6
18862: PPUSH
18863: LD_VAR 0 7
18867: PPUSH
18868: LD_VAR 0 8
18872: PPUSH
18873: LD_VAR 0 4
18877: PPUSH
18878: LD_VAR 0 5
18882: PPUSH
18883: CALL 20090 0 5
18887: GO 19010
18889: LD_INT 302
18891: DOUBLE
18892: EQUAL
18893: IFTRUE 18897
18895: GO 18934
18897: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
18898: LD_VAR 0 6
18902: PPUSH
18903: LD_VAR 0 7
18907: PPUSH
18908: LD_VAR 0 8
18912: PPUSH
18913: LD_VAR 0 9
18917: PPUSH
18918: LD_VAR 0 4
18922: PPUSH
18923: LD_VAR 0 5
18927: PPUSH
18928: CALL 20181 0 6
18932: GO 19010
18934: LD_INT 303
18936: DOUBLE
18937: EQUAL
18938: IFTRUE 18942
18940: GO 18979
18942: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
18943: LD_VAR 0 6
18947: PPUSH
18948: LD_VAR 0 7
18952: PPUSH
18953: LD_VAR 0 8
18957: PPUSH
18958: LD_VAR 0 9
18962: PPUSH
18963: LD_VAR 0 4
18967: PPUSH
18968: LD_VAR 0 5
18972: PPUSH
18973: CALL 19015 0 6
18977: GO 19010
18979: LD_INT 304
18981: DOUBLE
18982: EQUAL
18983: IFTRUE 18987
18985: GO 19009
18987: POP
// hHackTeleport ( unit , x , y ) ; end ;
18988: LD_VAR 0 2
18992: PPUSH
18993: LD_VAR 0 4
18997: PPUSH
18998: LD_VAR 0 5
19002: PPUSH
19003: CALL 20774 0 3
19007: GO 19010
19009: POP
// end ;
19010: LD_VAR 0 12
19014: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
19015: LD_INT 0
19017: PPUSH
19018: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
19019: LD_VAR 0 1
19023: PUSH
19024: LD_INT 1
19026: LESS
19027: PUSH
19028: LD_VAR 0 1
19032: PUSH
19033: LD_INT 3
19035: GREATER
19036: OR
19037: PUSH
19038: LD_VAR 0 5
19042: PPUSH
19043: LD_VAR 0 6
19047: PPUSH
19048: CALL_OW 428
19052: OR
19053: IFFALSE 19057
// exit ;
19055: GO 19777
// uc_side := your_side ;
19057: LD_ADDR_OWVAR 20
19061: PUSH
19062: LD_OWVAR 2
19066: ST_TO_ADDR
// uc_nation := nation ;
19067: LD_ADDR_OWVAR 21
19071: PUSH
19072: LD_VAR 0 1
19076: ST_TO_ADDR
// bc_level = 1 ;
19077: LD_ADDR_OWVAR 43
19081: PUSH
19082: LD_INT 1
19084: ST_TO_ADDR
// case btype of 1 :
19085: LD_VAR 0 2
19089: PUSH
19090: LD_INT 1
19092: DOUBLE
19093: EQUAL
19094: IFTRUE 19098
19096: GO 19109
19098: POP
// bc_type := b_depot ; 2 :
19099: LD_ADDR_OWVAR 42
19103: PUSH
19104: LD_INT 0
19106: ST_TO_ADDR
19107: GO 19721
19109: LD_INT 2
19111: DOUBLE
19112: EQUAL
19113: IFTRUE 19117
19115: GO 19128
19117: POP
// bc_type := b_warehouse ; 3 :
19118: LD_ADDR_OWVAR 42
19122: PUSH
19123: LD_INT 1
19125: ST_TO_ADDR
19126: GO 19721
19128: LD_INT 3
19130: DOUBLE
19131: EQUAL
19132: IFTRUE 19136
19134: GO 19147
19136: POP
// bc_type := b_lab ; 4 .. 9 :
19137: LD_ADDR_OWVAR 42
19141: PUSH
19142: LD_INT 6
19144: ST_TO_ADDR
19145: GO 19721
19147: LD_INT 4
19149: DOUBLE
19150: GREATEREQUAL
19151: IFFALSE 19159
19153: LD_INT 9
19155: DOUBLE
19156: LESSEQUAL
19157: IFTRUE 19161
19159: GO 19213
19161: POP
// begin bc_type := b_lab_half ;
19162: LD_ADDR_OWVAR 42
19166: PUSH
19167: LD_INT 7
19169: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
19170: LD_ADDR_OWVAR 44
19174: PUSH
19175: LD_INT 10
19177: PUSH
19178: LD_INT 11
19180: PUSH
19181: LD_INT 12
19183: PUSH
19184: LD_INT 15
19186: PUSH
19187: LD_INT 14
19189: PUSH
19190: LD_INT 13
19192: PUSH
19193: EMPTY
19194: LIST
19195: LIST
19196: LIST
19197: LIST
19198: LIST
19199: LIST
19200: PUSH
19201: LD_VAR 0 2
19205: PUSH
19206: LD_INT 3
19208: MINUS
19209: ARRAY
19210: ST_TO_ADDR
// end ; 10 .. 13 :
19211: GO 19721
19213: LD_INT 10
19215: DOUBLE
19216: GREATEREQUAL
19217: IFFALSE 19225
19219: LD_INT 13
19221: DOUBLE
19222: LESSEQUAL
19223: IFTRUE 19227
19225: GO 19304
19227: POP
// begin bc_type := b_lab_full ;
19228: LD_ADDR_OWVAR 42
19232: PUSH
19233: LD_INT 8
19235: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
19236: LD_ADDR_OWVAR 44
19240: PUSH
19241: LD_INT 10
19243: PUSH
19244: LD_INT 12
19246: PUSH
19247: LD_INT 14
19249: PUSH
19250: LD_INT 13
19252: PUSH
19253: EMPTY
19254: LIST
19255: LIST
19256: LIST
19257: LIST
19258: PUSH
19259: LD_VAR 0 2
19263: PUSH
19264: LD_INT 9
19266: MINUS
19267: ARRAY
19268: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
19269: LD_ADDR_OWVAR 45
19273: PUSH
19274: LD_INT 11
19276: PUSH
19277: LD_INT 15
19279: PUSH
19280: LD_INT 12
19282: PUSH
19283: LD_INT 15
19285: PUSH
19286: EMPTY
19287: LIST
19288: LIST
19289: LIST
19290: LIST
19291: PUSH
19292: LD_VAR 0 2
19296: PUSH
19297: LD_INT 9
19299: MINUS
19300: ARRAY
19301: ST_TO_ADDR
// end ; 14 :
19302: GO 19721
19304: LD_INT 14
19306: DOUBLE
19307: EQUAL
19308: IFTRUE 19312
19310: GO 19323
19312: POP
// bc_type := b_workshop ; 15 :
19313: LD_ADDR_OWVAR 42
19317: PUSH
19318: LD_INT 2
19320: ST_TO_ADDR
19321: GO 19721
19323: LD_INT 15
19325: DOUBLE
19326: EQUAL
19327: IFTRUE 19331
19329: GO 19342
19331: POP
// bc_type := b_factory ; 16 :
19332: LD_ADDR_OWVAR 42
19336: PUSH
19337: LD_INT 3
19339: ST_TO_ADDR
19340: GO 19721
19342: LD_INT 16
19344: DOUBLE
19345: EQUAL
19346: IFTRUE 19350
19348: GO 19361
19350: POP
// bc_type := b_ext_gun ; 17 :
19351: LD_ADDR_OWVAR 42
19355: PUSH
19356: LD_INT 17
19358: ST_TO_ADDR
19359: GO 19721
19361: LD_INT 17
19363: DOUBLE
19364: EQUAL
19365: IFTRUE 19369
19367: GO 19397
19369: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
19370: LD_ADDR_OWVAR 42
19374: PUSH
19375: LD_INT 19
19377: PUSH
19378: LD_INT 23
19380: PUSH
19381: LD_INT 19
19383: PUSH
19384: EMPTY
19385: LIST
19386: LIST
19387: LIST
19388: PUSH
19389: LD_VAR 0 1
19393: ARRAY
19394: ST_TO_ADDR
19395: GO 19721
19397: LD_INT 18
19399: DOUBLE
19400: EQUAL
19401: IFTRUE 19405
19403: GO 19416
19405: POP
// bc_type := b_ext_radar ; 19 :
19406: LD_ADDR_OWVAR 42
19410: PUSH
19411: LD_INT 20
19413: ST_TO_ADDR
19414: GO 19721
19416: LD_INT 19
19418: DOUBLE
19419: EQUAL
19420: IFTRUE 19424
19422: GO 19435
19424: POP
// bc_type := b_ext_radio ; 20 :
19425: LD_ADDR_OWVAR 42
19429: PUSH
19430: LD_INT 22
19432: ST_TO_ADDR
19433: GO 19721
19435: LD_INT 20
19437: DOUBLE
19438: EQUAL
19439: IFTRUE 19443
19441: GO 19454
19443: POP
// bc_type := b_ext_siberium ; 21 :
19444: LD_ADDR_OWVAR 42
19448: PUSH
19449: LD_INT 21
19451: ST_TO_ADDR
19452: GO 19721
19454: LD_INT 21
19456: DOUBLE
19457: EQUAL
19458: IFTRUE 19462
19460: GO 19473
19462: POP
// bc_type := b_ext_computer ; 22 :
19463: LD_ADDR_OWVAR 42
19467: PUSH
19468: LD_INT 24
19470: ST_TO_ADDR
19471: GO 19721
19473: LD_INT 22
19475: DOUBLE
19476: EQUAL
19477: IFTRUE 19481
19479: GO 19492
19481: POP
// bc_type := b_ext_track ; 23 :
19482: LD_ADDR_OWVAR 42
19486: PUSH
19487: LD_INT 16
19489: ST_TO_ADDR
19490: GO 19721
19492: LD_INT 23
19494: DOUBLE
19495: EQUAL
19496: IFTRUE 19500
19498: GO 19511
19500: POP
// bc_type := b_ext_laser ; 24 :
19501: LD_ADDR_OWVAR 42
19505: PUSH
19506: LD_INT 25
19508: ST_TO_ADDR
19509: GO 19721
19511: LD_INT 24
19513: DOUBLE
19514: EQUAL
19515: IFTRUE 19519
19517: GO 19530
19519: POP
// bc_type := b_control_tower ; 25 :
19520: LD_ADDR_OWVAR 42
19524: PUSH
19525: LD_INT 36
19527: ST_TO_ADDR
19528: GO 19721
19530: LD_INT 25
19532: DOUBLE
19533: EQUAL
19534: IFTRUE 19538
19536: GO 19549
19538: POP
// bc_type := b_breastwork ; 26 :
19539: LD_ADDR_OWVAR 42
19543: PUSH
19544: LD_INT 31
19546: ST_TO_ADDR
19547: GO 19721
19549: LD_INT 26
19551: DOUBLE
19552: EQUAL
19553: IFTRUE 19557
19555: GO 19568
19557: POP
// bc_type := b_bunker ; 27 :
19558: LD_ADDR_OWVAR 42
19562: PUSH
19563: LD_INT 32
19565: ST_TO_ADDR
19566: GO 19721
19568: LD_INT 27
19570: DOUBLE
19571: EQUAL
19572: IFTRUE 19576
19574: GO 19587
19576: POP
// bc_type := b_turret ; 28 :
19577: LD_ADDR_OWVAR 42
19581: PUSH
19582: LD_INT 33
19584: ST_TO_ADDR
19585: GO 19721
19587: LD_INT 28
19589: DOUBLE
19590: EQUAL
19591: IFTRUE 19595
19593: GO 19606
19595: POP
// bc_type := b_armoury ; 29 :
19596: LD_ADDR_OWVAR 42
19600: PUSH
19601: LD_INT 4
19603: ST_TO_ADDR
19604: GO 19721
19606: LD_INT 29
19608: DOUBLE
19609: EQUAL
19610: IFTRUE 19614
19612: GO 19625
19614: POP
// bc_type := b_barracks ; 30 :
19615: LD_ADDR_OWVAR 42
19619: PUSH
19620: LD_INT 5
19622: ST_TO_ADDR
19623: GO 19721
19625: LD_INT 30
19627: DOUBLE
19628: EQUAL
19629: IFTRUE 19633
19631: GO 19644
19633: POP
// bc_type := b_solar_power ; 31 :
19634: LD_ADDR_OWVAR 42
19638: PUSH
19639: LD_INT 27
19641: ST_TO_ADDR
19642: GO 19721
19644: LD_INT 31
19646: DOUBLE
19647: EQUAL
19648: IFTRUE 19652
19650: GO 19663
19652: POP
// bc_type := b_oil_power ; 32 :
19653: LD_ADDR_OWVAR 42
19657: PUSH
19658: LD_INT 26
19660: ST_TO_ADDR
19661: GO 19721
19663: LD_INT 32
19665: DOUBLE
19666: EQUAL
19667: IFTRUE 19671
19669: GO 19682
19671: POP
// bc_type := b_siberite_power ; 33 :
19672: LD_ADDR_OWVAR 42
19676: PUSH
19677: LD_INT 28
19679: ST_TO_ADDR
19680: GO 19721
19682: LD_INT 33
19684: DOUBLE
19685: EQUAL
19686: IFTRUE 19690
19688: GO 19701
19690: POP
// bc_type := b_oil_mine ; 34 :
19691: LD_ADDR_OWVAR 42
19695: PUSH
19696: LD_INT 29
19698: ST_TO_ADDR
19699: GO 19721
19701: LD_INT 34
19703: DOUBLE
19704: EQUAL
19705: IFTRUE 19709
19707: GO 19720
19709: POP
// bc_type := b_siberite_mine ; end ;
19710: LD_ADDR_OWVAR 42
19714: PUSH
19715: LD_INT 30
19717: ST_TO_ADDR
19718: GO 19721
19720: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
19721: LD_ADDR_VAR 0 8
19725: PUSH
19726: LD_VAR 0 5
19730: PPUSH
19731: LD_VAR 0 6
19735: PPUSH
19736: LD_VAR 0 3
19740: PPUSH
19741: CALL_OW 47
19745: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
19746: LD_OWVAR 42
19750: PUSH
19751: LD_INT 32
19753: PUSH
19754: LD_INT 33
19756: PUSH
19757: EMPTY
19758: LIST
19759: LIST
19760: IN
19761: IFFALSE 19777
// PlaceWeaponTurret ( b , weapon ) ;
19763: LD_VAR 0 8
19767: PPUSH
19768: LD_VAR 0 4
19772: PPUSH
19773: CALL_OW 431
// end ;
19777: LD_VAR 0 7
19781: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
19782: LD_INT 0
19784: PPUSH
19785: PPUSH
19786: PPUSH
19787: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19788: LD_ADDR_VAR 0 4
19792: PUSH
19793: LD_INT 22
19795: PUSH
19796: LD_OWVAR 2
19800: PUSH
19801: EMPTY
19802: LIST
19803: LIST
19804: PUSH
19805: LD_INT 2
19807: PUSH
19808: LD_INT 30
19810: PUSH
19811: LD_INT 0
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: PUSH
19818: LD_INT 30
19820: PUSH
19821: LD_INT 1
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: PUSH
19828: EMPTY
19829: LIST
19830: LIST
19831: LIST
19832: PUSH
19833: EMPTY
19834: LIST
19835: LIST
19836: PPUSH
19837: CALL_OW 69
19841: ST_TO_ADDR
// if not tmp then
19842: LD_VAR 0 4
19846: NOT
19847: IFFALSE 19851
// exit ;
19849: GO 19910
// for i in tmp do
19851: LD_ADDR_VAR 0 2
19855: PUSH
19856: LD_VAR 0 4
19860: PUSH
19861: FOR_IN
19862: IFFALSE 19908
// for j = 1 to 3 do
19864: LD_ADDR_VAR 0 3
19868: PUSH
19869: DOUBLE
19870: LD_INT 1
19872: DEC
19873: ST_TO_ADDR
19874: LD_INT 3
19876: PUSH
19877: FOR_TO
19878: IFFALSE 19904
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
19880: LD_VAR 0 2
19884: PPUSH
19885: CALL_OW 274
19889: PPUSH
19890: LD_VAR 0 3
19894: PPUSH
19895: LD_INT 99999
19897: PPUSH
19898: CALL_OW 277
19902: GO 19877
19904: POP
19905: POP
19906: GO 19861
19908: POP
19909: POP
// end ;
19910: LD_VAR 0 1
19914: RET
// export function hHackSetLevel10 ; var i , j ; begin
19915: LD_INT 0
19917: PPUSH
19918: PPUSH
19919: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19920: LD_ADDR_VAR 0 2
19924: PUSH
19925: LD_INT 21
19927: PUSH
19928: LD_INT 1
19930: PUSH
19931: EMPTY
19932: LIST
19933: LIST
19934: PPUSH
19935: CALL_OW 69
19939: PUSH
19940: FOR_IN
19941: IFFALSE 19993
// if IsSelected ( i ) then
19943: LD_VAR 0 2
19947: PPUSH
19948: CALL_OW 306
19952: IFFALSE 19991
// begin for j := 1 to 4 do
19954: LD_ADDR_VAR 0 3
19958: PUSH
19959: DOUBLE
19960: LD_INT 1
19962: DEC
19963: ST_TO_ADDR
19964: LD_INT 4
19966: PUSH
19967: FOR_TO
19968: IFFALSE 19989
// SetSkill ( i , j , 10 ) ;
19970: LD_VAR 0 2
19974: PPUSH
19975: LD_VAR 0 3
19979: PPUSH
19980: LD_INT 10
19982: PPUSH
19983: CALL_OW 237
19987: GO 19967
19989: POP
19990: POP
// end ;
19991: GO 19940
19993: POP
19994: POP
// end ;
19995: LD_VAR 0 1
19999: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
20000: LD_INT 0
20002: PPUSH
20003: PPUSH
20004: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
20005: LD_ADDR_VAR 0 2
20009: PUSH
20010: LD_INT 22
20012: PUSH
20013: LD_OWVAR 2
20017: PUSH
20018: EMPTY
20019: LIST
20020: LIST
20021: PUSH
20022: LD_INT 21
20024: PUSH
20025: LD_INT 1
20027: PUSH
20028: EMPTY
20029: LIST
20030: LIST
20031: PUSH
20032: EMPTY
20033: LIST
20034: LIST
20035: PPUSH
20036: CALL_OW 69
20040: PUSH
20041: FOR_IN
20042: IFFALSE 20083
// begin for j := 1 to 4 do
20044: LD_ADDR_VAR 0 3
20048: PUSH
20049: DOUBLE
20050: LD_INT 1
20052: DEC
20053: ST_TO_ADDR
20054: LD_INT 4
20056: PUSH
20057: FOR_TO
20058: IFFALSE 20079
// SetSkill ( i , j , 10 ) ;
20060: LD_VAR 0 2
20064: PPUSH
20065: LD_VAR 0 3
20069: PPUSH
20070: LD_INT 10
20072: PPUSH
20073: CALL_OW 237
20077: GO 20057
20079: POP
20080: POP
// end ;
20081: GO 20041
20083: POP
20084: POP
// end ;
20085: LD_VAR 0 1
20089: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
20090: LD_INT 0
20092: PPUSH
// uc_side := your_side ;
20093: LD_ADDR_OWVAR 20
20097: PUSH
20098: LD_OWVAR 2
20102: ST_TO_ADDR
// uc_nation := nation ;
20103: LD_ADDR_OWVAR 21
20107: PUSH
20108: LD_VAR 0 1
20112: ST_TO_ADDR
// InitHc ;
20113: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
20117: LD_INT 0
20119: PPUSH
20120: LD_VAR 0 2
20124: PPUSH
20125: LD_VAR 0 3
20129: PPUSH
20130: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
20134: LD_VAR 0 4
20138: PPUSH
20139: LD_VAR 0 5
20143: PPUSH
20144: CALL_OW 428
20148: PUSH
20149: LD_INT 0
20151: EQUAL
20152: IFFALSE 20176
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
20154: CALL_OW 44
20158: PPUSH
20159: LD_VAR 0 4
20163: PPUSH
20164: LD_VAR 0 5
20168: PPUSH
20169: LD_INT 1
20171: PPUSH
20172: CALL_OW 48
// end ;
20176: LD_VAR 0 6
20180: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
20181: LD_INT 0
20183: PPUSH
20184: PPUSH
// uc_side := your_side ;
20185: LD_ADDR_OWVAR 20
20189: PUSH
20190: LD_OWVAR 2
20194: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
20195: LD_VAR 0 1
20199: PUSH
20200: LD_INT 1
20202: PUSH
20203: LD_INT 2
20205: PUSH
20206: LD_INT 3
20208: PUSH
20209: LD_INT 4
20211: PUSH
20212: LD_INT 5
20214: PUSH
20215: EMPTY
20216: LIST
20217: LIST
20218: LIST
20219: LIST
20220: LIST
20221: IN
20222: IFFALSE 20234
// uc_nation := nation_american else
20224: LD_ADDR_OWVAR 21
20228: PUSH
20229: LD_INT 1
20231: ST_TO_ADDR
20232: GO 20277
// if chassis in [ 11 , 12 , 13 , 14 ] then
20234: LD_VAR 0 1
20238: PUSH
20239: LD_INT 11
20241: PUSH
20242: LD_INT 12
20244: PUSH
20245: LD_INT 13
20247: PUSH
20248: LD_INT 14
20250: PUSH
20251: EMPTY
20252: LIST
20253: LIST
20254: LIST
20255: LIST
20256: IN
20257: IFFALSE 20269
// uc_nation := nation_arabian else
20259: LD_ADDR_OWVAR 21
20263: PUSH
20264: LD_INT 2
20266: ST_TO_ADDR
20267: GO 20277
// uc_nation := nation_russian ;
20269: LD_ADDR_OWVAR 21
20273: PUSH
20274: LD_INT 3
20276: ST_TO_ADDR
// vc_chassis := chassis ;
20277: LD_ADDR_OWVAR 37
20281: PUSH
20282: LD_VAR 0 1
20286: ST_TO_ADDR
// vc_engine := engine ;
20287: LD_ADDR_OWVAR 39
20291: PUSH
20292: LD_VAR 0 2
20296: ST_TO_ADDR
// vc_control := control ;
20297: LD_ADDR_OWVAR 38
20301: PUSH
20302: LD_VAR 0 3
20306: ST_TO_ADDR
// vc_weapon := weapon ;
20307: LD_ADDR_OWVAR 40
20311: PUSH
20312: LD_VAR 0 4
20316: ST_TO_ADDR
// un := CreateVehicle ;
20317: LD_ADDR_VAR 0 8
20321: PUSH
20322: CALL_OW 45
20326: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
20327: LD_VAR 0 8
20331: PPUSH
20332: LD_INT 0
20334: PPUSH
20335: LD_INT 5
20337: PPUSH
20338: CALL_OW 12
20342: PPUSH
20343: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
20347: LD_VAR 0 8
20351: PPUSH
20352: LD_VAR 0 5
20356: PPUSH
20357: LD_VAR 0 6
20361: PPUSH
20362: LD_INT 1
20364: PPUSH
20365: CALL_OW 48
// end ;
20369: LD_VAR 0 7
20373: RET
// export hInvincible ; every 1 do
20374: GO 20376
20376: DISABLE
// hInvincible := [ ] ;
20377: LD_ADDR_EXP 84
20381: PUSH
20382: EMPTY
20383: ST_TO_ADDR
20384: END
// every 10 do var i ;
20385: GO 20387
20387: DISABLE
20388: LD_INT 0
20390: PPUSH
// begin enable ;
20391: ENABLE
// if not hInvincible then
20392: LD_EXP 84
20396: NOT
20397: IFFALSE 20401
// exit ;
20399: GO 20445
// for i in hInvincible do
20401: LD_ADDR_VAR 0 1
20405: PUSH
20406: LD_EXP 84
20410: PUSH
20411: FOR_IN
20412: IFFALSE 20443
// if GetLives ( i ) < 1000 then
20414: LD_VAR 0 1
20418: PPUSH
20419: CALL_OW 256
20423: PUSH
20424: LD_INT 1000
20426: LESS
20427: IFFALSE 20441
// SetLives ( i , 1000 ) ;
20429: LD_VAR 0 1
20433: PPUSH
20434: LD_INT 1000
20436: PPUSH
20437: CALL_OW 234
20441: GO 20411
20443: POP
20444: POP
// end ;
20445: PPOPN 1
20447: END
// export function hHackInvincible ; var i ; begin
20448: LD_INT 0
20450: PPUSH
20451: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
20452: LD_ADDR_VAR 0 2
20456: PUSH
20457: LD_INT 2
20459: PUSH
20460: LD_INT 21
20462: PUSH
20463: LD_INT 1
20465: PUSH
20466: EMPTY
20467: LIST
20468: LIST
20469: PUSH
20470: LD_INT 21
20472: PUSH
20473: LD_INT 2
20475: PUSH
20476: EMPTY
20477: LIST
20478: LIST
20479: PUSH
20480: EMPTY
20481: LIST
20482: LIST
20483: LIST
20484: PPUSH
20485: CALL_OW 69
20489: PUSH
20490: FOR_IN
20491: IFFALSE 20552
// if IsSelected ( i ) then
20493: LD_VAR 0 2
20497: PPUSH
20498: CALL_OW 306
20502: IFFALSE 20550
// begin if i in hInvincible then
20504: LD_VAR 0 2
20508: PUSH
20509: LD_EXP 84
20513: IN
20514: IFFALSE 20534
// hInvincible := hInvincible diff i else
20516: LD_ADDR_EXP 84
20520: PUSH
20521: LD_EXP 84
20525: PUSH
20526: LD_VAR 0 2
20530: DIFF
20531: ST_TO_ADDR
20532: GO 20550
// hInvincible := hInvincible union i ;
20534: LD_ADDR_EXP 84
20538: PUSH
20539: LD_EXP 84
20543: PUSH
20544: LD_VAR 0 2
20548: UNION
20549: ST_TO_ADDR
// end ;
20550: GO 20490
20552: POP
20553: POP
// end ;
20554: LD_VAR 0 1
20558: RET
// export function hHackInvisible ; var i , j ; begin
20559: LD_INT 0
20561: PPUSH
20562: PPUSH
20563: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20564: LD_ADDR_VAR 0 2
20568: PUSH
20569: LD_INT 21
20571: PUSH
20572: LD_INT 1
20574: PUSH
20575: EMPTY
20576: LIST
20577: LIST
20578: PPUSH
20579: CALL_OW 69
20583: PUSH
20584: FOR_IN
20585: IFFALSE 20609
// if IsSelected ( i ) then
20587: LD_VAR 0 2
20591: PPUSH
20592: CALL_OW 306
20596: IFFALSE 20607
// ComForceInvisible ( i ) ;
20598: LD_VAR 0 2
20602: PPUSH
20603: CALL_OW 496
20607: GO 20584
20609: POP
20610: POP
// end ;
20611: LD_VAR 0 1
20615: RET
// export function hHackChangeYourSide ; begin
20616: LD_INT 0
20618: PPUSH
// if your_side = 8 then
20619: LD_OWVAR 2
20623: PUSH
20624: LD_INT 8
20626: EQUAL
20627: IFFALSE 20639
// your_side := 0 else
20629: LD_ADDR_OWVAR 2
20633: PUSH
20634: LD_INT 0
20636: ST_TO_ADDR
20637: GO 20653
// your_side := your_side + 1 ;
20639: LD_ADDR_OWVAR 2
20643: PUSH
20644: LD_OWVAR 2
20648: PUSH
20649: LD_INT 1
20651: PLUS
20652: ST_TO_ADDR
// end ;
20653: LD_VAR 0 1
20657: RET
// export function hHackChangeUnitSide ; var i , j ; begin
20658: LD_INT 0
20660: PPUSH
20661: PPUSH
20662: PPUSH
// for i in all_units do
20663: LD_ADDR_VAR 0 2
20667: PUSH
20668: LD_OWVAR 3
20672: PUSH
20673: FOR_IN
20674: IFFALSE 20752
// if IsSelected ( i ) then
20676: LD_VAR 0 2
20680: PPUSH
20681: CALL_OW 306
20685: IFFALSE 20750
// begin j := GetSide ( i ) ;
20687: LD_ADDR_VAR 0 3
20691: PUSH
20692: LD_VAR 0 2
20696: PPUSH
20697: CALL_OW 255
20701: ST_TO_ADDR
// if j = 8 then
20702: LD_VAR 0 3
20706: PUSH
20707: LD_INT 8
20709: EQUAL
20710: IFFALSE 20722
// j := 0 else
20712: LD_ADDR_VAR 0 3
20716: PUSH
20717: LD_INT 0
20719: ST_TO_ADDR
20720: GO 20736
// j := j + 1 ;
20722: LD_ADDR_VAR 0 3
20726: PUSH
20727: LD_VAR 0 3
20731: PUSH
20732: LD_INT 1
20734: PLUS
20735: ST_TO_ADDR
// SetSide ( i , j ) ;
20736: LD_VAR 0 2
20740: PPUSH
20741: LD_VAR 0 3
20745: PPUSH
20746: CALL_OW 235
// end ;
20750: GO 20673
20752: POP
20753: POP
// end ;
20754: LD_VAR 0 1
20758: RET
// export function hHackFog ; begin
20759: LD_INT 0
20761: PPUSH
// FogOff ( true ) ;
20762: LD_INT 1
20764: PPUSH
20765: CALL_OW 344
// end ;
20769: LD_VAR 0 1
20773: RET
// export function hHackTeleport ( unit , x , y ) ; begin
20774: LD_INT 0
20776: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
20777: LD_VAR 0 1
20781: PPUSH
20782: LD_VAR 0 2
20786: PPUSH
20787: LD_VAR 0 3
20791: PPUSH
20792: LD_INT 1
20794: PPUSH
20795: LD_INT 1
20797: PPUSH
20798: CALL_OW 483
// CenterOnXY ( x , y ) ;
20802: LD_VAR 0 2
20806: PPUSH
20807: LD_VAR 0 3
20811: PPUSH
20812: CALL_OW 84
// end ;
20816: LD_VAR 0 4
20820: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
20821: LD_INT 0
20823: PPUSH
20824: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
20825: LD_VAR 0 1
20829: NOT
20830: PUSH
20831: LD_VAR 0 2
20835: PPUSH
20836: LD_VAR 0 3
20840: PPUSH
20841: CALL_OW 488
20845: NOT
20846: OR
20847: PUSH
20848: LD_VAR 0 1
20852: PPUSH
20853: CALL_OW 266
20857: PUSH
20858: LD_INT 3
20860: NONEQUAL
20861: PUSH
20862: LD_VAR 0 1
20866: PPUSH
20867: CALL_OW 247
20871: PUSH
20872: LD_INT 1
20874: EQUAL
20875: NOT
20876: AND
20877: OR
20878: IFFALSE 20882
// exit ;
20880: GO 21031
// if GetType ( factory ) = unit_human then
20882: LD_VAR 0 1
20886: PPUSH
20887: CALL_OW 247
20891: PUSH
20892: LD_INT 1
20894: EQUAL
20895: IFFALSE 20912
// factory := IsInUnit ( factory ) ;
20897: LD_ADDR_VAR 0 1
20901: PUSH
20902: LD_VAR 0 1
20906: PPUSH
20907: CALL_OW 310
20911: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
20912: LD_VAR 0 1
20916: PPUSH
20917: CALL_OW 266
20921: PUSH
20922: LD_INT 3
20924: NONEQUAL
20925: IFFALSE 20929
// exit ;
20927: GO 21031
// if HexInfo ( x , y ) = factory then
20929: LD_VAR 0 2
20933: PPUSH
20934: LD_VAR 0 3
20938: PPUSH
20939: CALL_OW 428
20943: PUSH
20944: LD_VAR 0 1
20948: EQUAL
20949: IFFALSE 20976
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
20951: LD_ADDR_EXP 85
20955: PUSH
20956: LD_EXP 85
20960: PPUSH
20961: LD_VAR 0 1
20965: PPUSH
20966: LD_INT 0
20968: PPUSH
20969: CALL_OW 1
20973: ST_TO_ADDR
20974: GO 21027
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
20976: LD_ADDR_EXP 85
20980: PUSH
20981: LD_EXP 85
20985: PPUSH
20986: LD_VAR 0 1
20990: PPUSH
20991: LD_VAR 0 1
20995: PPUSH
20996: CALL_OW 255
21000: PUSH
21001: LD_VAR 0 1
21005: PUSH
21006: LD_VAR 0 2
21010: PUSH
21011: LD_VAR 0 3
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: PPUSH
21022: CALL_OW 1
21026: ST_TO_ADDR
// UpdateFactoryWaypoints ;
21027: CALL 21036 0 0
// end ;
21031: LD_VAR 0 4
21035: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
21036: LD_INT 0
21038: PPUSH
21039: PPUSH
21040: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
21041: LD_STRING resetFactoryWaypoint();
21043: PPUSH
21044: CALL_OW 559
// if factoryWaypoints then
21048: LD_EXP 85
21052: IFFALSE 21178
// begin list := PrepareArray ( factoryWaypoints ) ;
21054: LD_ADDR_VAR 0 3
21058: PUSH
21059: LD_EXP 85
21063: PPUSH
21064: CALL 67555 0 1
21068: ST_TO_ADDR
// for i := 1 to list do
21069: LD_ADDR_VAR 0 2
21073: PUSH
21074: DOUBLE
21075: LD_INT 1
21077: DEC
21078: ST_TO_ADDR
21079: LD_VAR 0 3
21083: PUSH
21084: FOR_TO
21085: IFFALSE 21176
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
21087: LD_STRING setFactoryWaypointXY(
21089: PUSH
21090: LD_VAR 0 3
21094: PUSH
21095: LD_VAR 0 2
21099: ARRAY
21100: PUSH
21101: LD_INT 1
21103: ARRAY
21104: STR
21105: PUSH
21106: LD_STRING ,
21108: STR
21109: PUSH
21110: LD_VAR 0 3
21114: PUSH
21115: LD_VAR 0 2
21119: ARRAY
21120: PUSH
21121: LD_INT 2
21123: ARRAY
21124: STR
21125: PUSH
21126: LD_STRING ,
21128: STR
21129: PUSH
21130: LD_VAR 0 3
21134: PUSH
21135: LD_VAR 0 2
21139: ARRAY
21140: PUSH
21141: LD_INT 3
21143: ARRAY
21144: STR
21145: PUSH
21146: LD_STRING ,
21148: STR
21149: PUSH
21150: LD_VAR 0 3
21154: PUSH
21155: LD_VAR 0 2
21159: ARRAY
21160: PUSH
21161: LD_INT 4
21163: ARRAY
21164: STR
21165: PUSH
21166: LD_STRING )
21168: STR
21169: PPUSH
21170: CALL_OW 559
21174: GO 21084
21176: POP
21177: POP
// end ; end ;
21178: LD_VAR 0 1
21182: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
21183: LD_INT 0
21185: PPUSH
// if HexInfo ( x , y ) = warehouse then
21186: LD_VAR 0 2
21190: PPUSH
21191: LD_VAR 0 3
21195: PPUSH
21196: CALL_OW 428
21200: PUSH
21201: LD_VAR 0 1
21205: EQUAL
21206: IFFALSE 21233
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
21208: LD_ADDR_EXP 86
21212: PUSH
21213: LD_EXP 86
21217: PPUSH
21218: LD_VAR 0 1
21222: PPUSH
21223: LD_INT 0
21225: PPUSH
21226: CALL_OW 1
21230: ST_TO_ADDR
21231: GO 21284
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
21233: LD_ADDR_EXP 86
21237: PUSH
21238: LD_EXP 86
21242: PPUSH
21243: LD_VAR 0 1
21247: PPUSH
21248: LD_VAR 0 1
21252: PPUSH
21253: CALL_OW 255
21257: PUSH
21258: LD_VAR 0 1
21262: PUSH
21263: LD_VAR 0 2
21267: PUSH
21268: LD_VAR 0 3
21272: PUSH
21273: EMPTY
21274: LIST
21275: LIST
21276: LIST
21277: LIST
21278: PPUSH
21279: CALL_OW 1
21283: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
21284: CALL 21293 0 0
// end ;
21288: LD_VAR 0 4
21292: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
21293: LD_INT 0
21295: PPUSH
21296: PPUSH
21297: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
21298: LD_STRING resetWarehouseGatheringPoints();
21300: PPUSH
21301: CALL_OW 559
// if warehouseGatheringPoints then
21305: LD_EXP 86
21309: IFFALSE 21435
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
21311: LD_ADDR_VAR 0 3
21315: PUSH
21316: LD_EXP 86
21320: PPUSH
21321: CALL 67555 0 1
21325: ST_TO_ADDR
// for i := 1 to list do
21326: LD_ADDR_VAR 0 2
21330: PUSH
21331: DOUBLE
21332: LD_INT 1
21334: DEC
21335: ST_TO_ADDR
21336: LD_VAR 0 3
21340: PUSH
21341: FOR_TO
21342: IFFALSE 21433
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
21344: LD_STRING setWarehouseGatheringPointXY(
21346: PUSH
21347: LD_VAR 0 3
21351: PUSH
21352: LD_VAR 0 2
21356: ARRAY
21357: PUSH
21358: LD_INT 1
21360: ARRAY
21361: STR
21362: PUSH
21363: LD_STRING ,
21365: STR
21366: PUSH
21367: LD_VAR 0 3
21371: PUSH
21372: LD_VAR 0 2
21376: ARRAY
21377: PUSH
21378: LD_INT 2
21380: ARRAY
21381: STR
21382: PUSH
21383: LD_STRING ,
21385: STR
21386: PUSH
21387: LD_VAR 0 3
21391: PUSH
21392: LD_VAR 0 2
21396: ARRAY
21397: PUSH
21398: LD_INT 3
21400: ARRAY
21401: STR
21402: PUSH
21403: LD_STRING ,
21405: STR
21406: PUSH
21407: LD_VAR 0 3
21411: PUSH
21412: LD_VAR 0 2
21416: ARRAY
21417: PUSH
21418: LD_INT 4
21420: ARRAY
21421: STR
21422: PUSH
21423: LD_STRING )
21425: STR
21426: PPUSH
21427: CALL_OW 559
21431: GO 21341
21433: POP
21434: POP
// end ; end ;
21435: LD_VAR 0 1
21439: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
21440: LD_EXP 86
21444: IFFALSE 22129
21446: GO 21448
21448: DISABLE
21449: LD_INT 0
21451: PPUSH
21452: PPUSH
21453: PPUSH
21454: PPUSH
21455: PPUSH
21456: PPUSH
21457: PPUSH
21458: PPUSH
21459: PPUSH
// begin enable ;
21460: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
21461: LD_ADDR_VAR 0 3
21465: PUSH
21466: LD_EXP 86
21470: PPUSH
21471: CALL 67555 0 1
21475: ST_TO_ADDR
// if not list then
21476: LD_VAR 0 3
21480: NOT
21481: IFFALSE 21485
// exit ;
21483: GO 22129
// for i := 1 to list do
21485: LD_ADDR_VAR 0 1
21489: PUSH
21490: DOUBLE
21491: LD_INT 1
21493: DEC
21494: ST_TO_ADDR
21495: LD_VAR 0 3
21499: PUSH
21500: FOR_TO
21501: IFFALSE 22127
// begin depot := list [ i ] [ 2 ] ;
21503: LD_ADDR_VAR 0 8
21507: PUSH
21508: LD_VAR 0 3
21512: PUSH
21513: LD_VAR 0 1
21517: ARRAY
21518: PUSH
21519: LD_INT 2
21521: ARRAY
21522: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
21523: LD_ADDR_VAR 0 5
21527: PUSH
21528: LD_VAR 0 3
21532: PUSH
21533: LD_VAR 0 1
21537: ARRAY
21538: PUSH
21539: LD_INT 1
21541: ARRAY
21542: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
21543: LD_VAR 0 8
21547: PPUSH
21548: CALL_OW 301
21552: PUSH
21553: LD_VAR 0 5
21557: PUSH
21558: LD_VAR 0 8
21562: PPUSH
21563: CALL_OW 255
21567: NONEQUAL
21568: OR
21569: IFFALSE 21598
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
21571: LD_ADDR_EXP 86
21575: PUSH
21576: LD_EXP 86
21580: PPUSH
21581: LD_VAR 0 8
21585: PPUSH
21586: LD_INT 0
21588: PPUSH
21589: CALL_OW 1
21593: ST_TO_ADDR
// exit ;
21594: POP
21595: POP
21596: GO 22129
// end ; x := list [ i ] [ 3 ] ;
21598: LD_ADDR_VAR 0 6
21602: PUSH
21603: LD_VAR 0 3
21607: PUSH
21608: LD_VAR 0 1
21612: ARRAY
21613: PUSH
21614: LD_INT 3
21616: ARRAY
21617: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
21618: LD_ADDR_VAR 0 7
21622: PUSH
21623: LD_VAR 0 3
21627: PUSH
21628: LD_VAR 0 1
21632: ARRAY
21633: PUSH
21634: LD_INT 4
21636: ARRAY
21637: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
21638: LD_ADDR_VAR 0 9
21642: PUSH
21643: LD_VAR 0 6
21647: PPUSH
21648: LD_VAR 0 7
21652: PPUSH
21653: LD_INT 16
21655: PPUSH
21656: CALL 66143 0 3
21660: ST_TO_ADDR
// if not cratesNearbyPoint then
21661: LD_VAR 0 9
21665: NOT
21666: IFFALSE 21672
// exit ;
21668: POP
21669: POP
21670: GO 22129
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
21672: LD_ADDR_VAR 0 4
21676: PUSH
21677: LD_INT 22
21679: PUSH
21680: LD_VAR 0 5
21684: PUSH
21685: EMPTY
21686: LIST
21687: LIST
21688: PUSH
21689: LD_INT 3
21691: PUSH
21692: LD_INT 60
21694: PUSH
21695: EMPTY
21696: LIST
21697: PUSH
21698: EMPTY
21699: LIST
21700: LIST
21701: PUSH
21702: LD_INT 91
21704: PUSH
21705: LD_VAR 0 8
21709: PUSH
21710: LD_INT 6
21712: PUSH
21713: EMPTY
21714: LIST
21715: LIST
21716: LIST
21717: PUSH
21718: LD_INT 2
21720: PUSH
21721: LD_INT 25
21723: PUSH
21724: LD_INT 2
21726: PUSH
21727: EMPTY
21728: LIST
21729: LIST
21730: PUSH
21731: LD_INT 25
21733: PUSH
21734: LD_INT 16
21736: PUSH
21737: EMPTY
21738: LIST
21739: LIST
21740: PUSH
21741: EMPTY
21742: LIST
21743: LIST
21744: LIST
21745: PUSH
21746: EMPTY
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: PPUSH
21752: CALL_OW 69
21756: PUSH
21757: LD_VAR 0 8
21761: PPUSH
21762: CALL_OW 313
21766: PPUSH
21767: LD_INT 3
21769: PUSH
21770: LD_INT 60
21772: PUSH
21773: EMPTY
21774: LIST
21775: PUSH
21776: EMPTY
21777: LIST
21778: LIST
21779: PUSH
21780: LD_INT 2
21782: PUSH
21783: LD_INT 25
21785: PUSH
21786: LD_INT 2
21788: PUSH
21789: EMPTY
21790: LIST
21791: LIST
21792: PUSH
21793: LD_INT 25
21795: PUSH
21796: LD_INT 16
21798: PUSH
21799: EMPTY
21800: LIST
21801: LIST
21802: PUSH
21803: EMPTY
21804: LIST
21805: LIST
21806: LIST
21807: PUSH
21808: EMPTY
21809: LIST
21810: LIST
21811: PPUSH
21812: CALL_OW 72
21816: UNION
21817: ST_TO_ADDR
// if tmp then
21818: LD_VAR 0 4
21822: IFFALSE 21902
// begin tmp := ShrinkArray ( tmp , 3 ) ;
21824: LD_ADDR_VAR 0 4
21828: PUSH
21829: LD_VAR 0 4
21833: PPUSH
21834: LD_INT 3
21836: PPUSH
21837: CALL 64112 0 2
21841: ST_TO_ADDR
// for j in tmp do
21842: LD_ADDR_VAR 0 2
21846: PUSH
21847: LD_VAR 0 4
21851: PUSH
21852: FOR_IN
21853: IFFALSE 21896
// begin if IsInUnit ( j ) then
21855: LD_VAR 0 2
21859: PPUSH
21860: CALL_OW 310
21864: IFFALSE 21875
// ComExit ( j ) ;
21866: LD_VAR 0 2
21870: PPUSH
21871: CALL 64195 0 1
// AddComCollect ( j , x , y ) ;
21875: LD_VAR 0 2
21879: PPUSH
21880: LD_VAR 0 6
21884: PPUSH
21885: LD_VAR 0 7
21889: PPUSH
21890: CALL_OW 177
// end ;
21894: GO 21852
21896: POP
21897: POP
// exit ;
21898: POP
21899: POP
21900: GO 22129
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
21902: LD_ADDR_VAR 0 4
21906: PUSH
21907: LD_INT 22
21909: PUSH
21910: LD_VAR 0 5
21914: PUSH
21915: EMPTY
21916: LIST
21917: LIST
21918: PUSH
21919: LD_INT 91
21921: PUSH
21922: LD_VAR 0 8
21926: PUSH
21927: LD_INT 8
21929: PUSH
21930: EMPTY
21931: LIST
21932: LIST
21933: LIST
21934: PUSH
21935: LD_INT 2
21937: PUSH
21938: LD_INT 34
21940: PUSH
21941: LD_INT 12
21943: PUSH
21944: EMPTY
21945: LIST
21946: LIST
21947: PUSH
21948: LD_INT 34
21950: PUSH
21951: LD_INT 51
21953: PUSH
21954: EMPTY
21955: LIST
21956: LIST
21957: PUSH
21958: LD_INT 34
21960: PUSH
21961: LD_INT 32
21963: PUSH
21964: EMPTY
21965: LIST
21966: LIST
21967: PUSH
21968: LD_INT 34
21970: PUSH
21971: LD_INT 89
21973: PUSH
21974: EMPTY
21975: LIST
21976: LIST
21977: PUSH
21978: EMPTY
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: PUSH
21985: EMPTY
21986: LIST
21987: LIST
21988: LIST
21989: PPUSH
21990: CALL_OW 69
21994: ST_TO_ADDR
// if tmp then
21995: LD_VAR 0 4
21999: IFFALSE 22125
// begin for j in tmp do
22001: LD_ADDR_VAR 0 2
22005: PUSH
22006: LD_VAR 0 4
22010: PUSH
22011: FOR_IN
22012: IFFALSE 22123
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
22014: LD_VAR 0 2
22018: PPUSH
22019: CALL_OW 262
22023: PUSH
22024: LD_INT 3
22026: EQUAL
22027: PUSH
22028: LD_VAR 0 2
22032: PPUSH
22033: CALL_OW 261
22037: PUSH
22038: LD_INT 20
22040: GREATER
22041: OR
22042: PUSH
22043: LD_VAR 0 2
22047: PPUSH
22048: CALL_OW 314
22052: NOT
22053: AND
22054: PUSH
22055: LD_VAR 0 2
22059: PPUSH
22060: CALL_OW 263
22064: PUSH
22065: LD_INT 1
22067: NONEQUAL
22068: PUSH
22069: LD_VAR 0 2
22073: PPUSH
22074: CALL_OW 311
22078: OR
22079: AND
22080: IFFALSE 22121
// begin ComCollect ( j , x , y ) ;
22082: LD_VAR 0 2
22086: PPUSH
22087: LD_VAR 0 6
22091: PPUSH
22092: LD_VAR 0 7
22096: PPUSH
22097: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
22101: LD_VAR 0 2
22105: PPUSH
22106: LD_VAR 0 8
22110: PPUSH
22111: CALL_OW 172
// exit ;
22115: POP
22116: POP
22117: POP
22118: POP
22119: GO 22129
// end ;
22121: GO 22011
22123: POP
22124: POP
// end ; end ;
22125: GO 21500
22127: POP
22128: POP
// end ; end_of_file
22129: PPOPN 9
22131: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
22132: LD_INT 0
22134: PPUSH
22135: PPUSH
22136: PPUSH
22137: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
22138: LD_VAR 0 1
22142: PPUSH
22143: CALL_OW 264
22147: PUSH
22148: LD_INT 91
22150: EQUAL
22151: IFFALSE 22223
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
22153: LD_INT 68
22155: PPUSH
22156: LD_VAR 0 1
22160: PPUSH
22161: CALL_OW 255
22165: PPUSH
22166: CALL_OW 321
22170: PUSH
22171: LD_INT 2
22173: EQUAL
22174: IFFALSE 22186
// eff := 70 else
22176: LD_ADDR_VAR 0 4
22180: PUSH
22181: LD_INT 70
22183: ST_TO_ADDR
22184: GO 22194
// eff := 30 ;
22186: LD_ADDR_VAR 0 4
22190: PUSH
22191: LD_INT 30
22193: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
22194: LD_VAR 0 1
22198: PPUSH
22199: CALL_OW 250
22203: PPUSH
22204: LD_VAR 0 1
22208: PPUSH
22209: CALL_OW 251
22213: PPUSH
22214: LD_VAR 0 4
22218: PPUSH
22219: CALL_OW 495
// end ; end ;
22223: LD_VAR 0 2
22227: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
22228: LD_INT 0
22230: PPUSH
// end ;
22231: LD_VAR 0 4
22235: RET
// export function SOS_Command ( cmd ) ; begin
22236: LD_INT 0
22238: PPUSH
// end ;
22239: LD_VAR 0 2
22243: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
22244: LD_INT 0
22246: PPUSH
// end ;
22247: LD_VAR 0 6
22251: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
22252: LD_INT 0
22254: PPUSH
22255: PPUSH
// if not vehicle or not factory then
22256: LD_VAR 0 1
22260: NOT
22261: PUSH
22262: LD_VAR 0 2
22266: NOT
22267: OR
22268: IFFALSE 22272
// exit ;
22270: GO 22503
// if factoryWaypoints >= factory then
22272: LD_EXP 85
22276: PUSH
22277: LD_VAR 0 2
22281: GREATEREQUAL
22282: IFFALSE 22503
// if factoryWaypoints [ factory ] then
22284: LD_EXP 85
22288: PUSH
22289: LD_VAR 0 2
22293: ARRAY
22294: IFFALSE 22503
// begin if GetControl ( vehicle ) = control_manual then
22296: LD_VAR 0 1
22300: PPUSH
22301: CALL_OW 263
22305: PUSH
22306: LD_INT 1
22308: EQUAL
22309: IFFALSE 22390
// begin driver := IsDrivenBy ( vehicle ) ;
22311: LD_ADDR_VAR 0 4
22315: PUSH
22316: LD_VAR 0 1
22320: PPUSH
22321: CALL_OW 311
22325: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
22326: LD_VAR 0 4
22330: PPUSH
22331: LD_EXP 85
22335: PUSH
22336: LD_VAR 0 2
22340: ARRAY
22341: PUSH
22342: LD_INT 3
22344: ARRAY
22345: PPUSH
22346: LD_EXP 85
22350: PUSH
22351: LD_VAR 0 2
22355: ARRAY
22356: PUSH
22357: LD_INT 4
22359: ARRAY
22360: PPUSH
22361: CALL_OW 171
// AddComExitVehicle ( driver ) ;
22365: LD_VAR 0 4
22369: PPUSH
22370: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
22374: LD_VAR 0 4
22378: PPUSH
22379: LD_VAR 0 2
22383: PPUSH
22384: CALL_OW 180
// end else
22388: GO 22503
// if GetControl ( vehicle ) = control_remote then
22390: LD_VAR 0 1
22394: PPUSH
22395: CALL_OW 263
22399: PUSH
22400: LD_INT 2
22402: EQUAL
22403: IFFALSE 22464
// begin wait ( 0 0$2 ) ;
22405: LD_INT 70
22407: PPUSH
22408: CALL_OW 67
// if Connect ( vehicle ) then
22412: LD_VAR 0 1
22416: PPUSH
22417: CALL 34527 0 1
22421: IFFALSE 22462
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
22423: LD_VAR 0 1
22427: PPUSH
22428: LD_EXP 85
22432: PUSH
22433: LD_VAR 0 2
22437: ARRAY
22438: PUSH
22439: LD_INT 3
22441: ARRAY
22442: PPUSH
22443: LD_EXP 85
22447: PUSH
22448: LD_VAR 0 2
22452: ARRAY
22453: PUSH
22454: LD_INT 4
22456: ARRAY
22457: PPUSH
22458: CALL_OW 171
// end else
22462: GO 22503
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
22464: LD_VAR 0 1
22468: PPUSH
22469: LD_EXP 85
22473: PUSH
22474: LD_VAR 0 2
22478: ARRAY
22479: PUSH
22480: LD_INT 3
22482: ARRAY
22483: PPUSH
22484: LD_EXP 85
22488: PUSH
22489: LD_VAR 0 2
22493: ARRAY
22494: PUSH
22495: LD_INT 4
22497: ARRAY
22498: PPUSH
22499: CALL_OW 171
// end ; end ;
22503: LD_VAR 0 3
22507: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
22508: LD_INT 0
22510: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
22511: LD_VAR 0 1
22515: PUSH
22516: LD_INT 250
22518: EQUAL
22519: PUSH
22520: LD_VAR 0 2
22524: PPUSH
22525: CALL_OW 264
22529: PUSH
22530: LD_INT 81
22532: EQUAL
22533: AND
22534: IFFALSE 22555
// MinerPlaceMine ( unit , x , y ) ;
22536: LD_VAR 0 2
22540: PPUSH
22541: LD_VAR 0 4
22545: PPUSH
22546: LD_VAR 0 5
22550: PPUSH
22551: CALL 24940 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
22555: LD_VAR 0 1
22559: PUSH
22560: LD_INT 251
22562: EQUAL
22563: PUSH
22564: LD_VAR 0 2
22568: PPUSH
22569: CALL_OW 264
22573: PUSH
22574: LD_INT 81
22576: EQUAL
22577: AND
22578: IFFALSE 22599
// MinerDetonateMine ( unit , x , y ) ;
22580: LD_VAR 0 2
22584: PPUSH
22585: LD_VAR 0 4
22589: PPUSH
22590: LD_VAR 0 5
22594: PPUSH
22595: CALL 25215 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
22599: LD_VAR 0 1
22603: PUSH
22604: LD_INT 252
22606: EQUAL
22607: PUSH
22608: LD_VAR 0 2
22612: PPUSH
22613: CALL_OW 264
22617: PUSH
22618: LD_INT 81
22620: EQUAL
22621: AND
22622: IFFALSE 22643
// MinerCreateMinefield ( unit , x , y ) ;
22624: LD_VAR 0 2
22628: PPUSH
22629: LD_VAR 0 4
22633: PPUSH
22634: LD_VAR 0 5
22638: PPUSH
22639: CALL 25632 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
22643: LD_VAR 0 1
22647: PUSH
22648: LD_INT 253
22650: EQUAL
22651: PUSH
22652: LD_VAR 0 2
22656: PPUSH
22657: CALL_OW 257
22661: PUSH
22662: LD_INT 5
22664: EQUAL
22665: AND
22666: IFFALSE 22687
// ComBinocular ( unit , x , y ) ;
22668: LD_VAR 0 2
22672: PPUSH
22673: LD_VAR 0 4
22677: PPUSH
22678: LD_VAR 0 5
22682: PPUSH
22683: CALL 26001 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
22687: LD_VAR 0 1
22691: PUSH
22692: LD_INT 254
22694: EQUAL
22695: PUSH
22696: LD_VAR 0 2
22700: PPUSH
22701: CALL_OW 264
22705: PUSH
22706: LD_INT 99
22708: EQUAL
22709: AND
22710: PUSH
22711: LD_VAR 0 3
22715: PPUSH
22716: CALL_OW 263
22720: PUSH
22721: LD_INT 3
22723: EQUAL
22724: AND
22725: IFFALSE 22741
// HackDestroyVehicle ( unit , selectedUnit ) ;
22727: LD_VAR 0 2
22731: PPUSH
22732: LD_VAR 0 3
22736: PPUSH
22737: CALL 24304 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
22741: LD_VAR 0 1
22745: PUSH
22746: LD_INT 255
22748: EQUAL
22749: PUSH
22750: LD_VAR 0 2
22754: PPUSH
22755: CALL_OW 264
22759: PUSH
22760: LD_INT 14
22762: PUSH
22763: LD_INT 53
22765: PUSH
22766: EMPTY
22767: LIST
22768: LIST
22769: IN
22770: AND
22771: PUSH
22772: LD_VAR 0 4
22776: PPUSH
22777: LD_VAR 0 5
22781: PPUSH
22782: CALL_OW 488
22786: AND
22787: IFFALSE 22811
// CutTreeXYR ( unit , x , y , 12 ) ;
22789: LD_VAR 0 2
22793: PPUSH
22794: LD_VAR 0 4
22798: PPUSH
22799: LD_VAR 0 5
22803: PPUSH
22804: LD_INT 12
22806: PPUSH
22807: CALL 22874 0 4
// if cmd = 256 then
22811: LD_VAR 0 1
22815: PUSH
22816: LD_INT 256
22818: EQUAL
22819: IFFALSE 22840
// SetFactoryWaypoint ( unit , x , y ) ;
22821: LD_VAR 0 2
22825: PPUSH
22826: LD_VAR 0 4
22830: PPUSH
22831: LD_VAR 0 5
22835: PPUSH
22836: CALL 20821 0 3
// if cmd = 257 then
22840: LD_VAR 0 1
22844: PUSH
22845: LD_INT 257
22847: EQUAL
22848: IFFALSE 22869
// SetWarehouseGatheringPoint ( unit , x , y ) ;
22850: LD_VAR 0 2
22854: PPUSH
22855: LD_VAR 0 4
22859: PPUSH
22860: LD_VAR 0 5
22864: PPUSH
22865: CALL 21183 0 3
// end ;
22869: LD_VAR 0 6
22873: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
22874: LD_INT 0
22876: PPUSH
22877: PPUSH
22878: PPUSH
22879: PPUSH
22880: PPUSH
22881: PPUSH
22882: PPUSH
22883: PPUSH
22884: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
22885: LD_VAR 0 1
22889: NOT
22890: PUSH
22891: LD_VAR 0 2
22895: PPUSH
22896: LD_VAR 0 3
22900: PPUSH
22901: CALL_OW 488
22905: NOT
22906: OR
22907: PUSH
22908: LD_VAR 0 4
22912: NOT
22913: OR
22914: IFFALSE 22918
// exit ;
22916: GO 23258
// list := [ ] ;
22918: LD_ADDR_VAR 0 13
22922: PUSH
22923: EMPTY
22924: ST_TO_ADDR
// if x - r < 0 then
22925: LD_VAR 0 2
22929: PUSH
22930: LD_VAR 0 4
22934: MINUS
22935: PUSH
22936: LD_INT 0
22938: LESS
22939: IFFALSE 22951
// min_x := 0 else
22941: LD_ADDR_VAR 0 7
22945: PUSH
22946: LD_INT 0
22948: ST_TO_ADDR
22949: GO 22967
// min_x := x - r ;
22951: LD_ADDR_VAR 0 7
22955: PUSH
22956: LD_VAR 0 2
22960: PUSH
22961: LD_VAR 0 4
22965: MINUS
22966: ST_TO_ADDR
// if y - r < 0 then
22967: LD_VAR 0 3
22971: PUSH
22972: LD_VAR 0 4
22976: MINUS
22977: PUSH
22978: LD_INT 0
22980: LESS
22981: IFFALSE 22993
// min_y := 0 else
22983: LD_ADDR_VAR 0 8
22987: PUSH
22988: LD_INT 0
22990: ST_TO_ADDR
22991: GO 23009
// min_y := y - r ;
22993: LD_ADDR_VAR 0 8
22997: PUSH
22998: LD_VAR 0 3
23002: PUSH
23003: LD_VAR 0 4
23007: MINUS
23008: ST_TO_ADDR
// max_x := x + r ;
23009: LD_ADDR_VAR 0 9
23013: PUSH
23014: LD_VAR 0 2
23018: PUSH
23019: LD_VAR 0 4
23023: PLUS
23024: ST_TO_ADDR
// max_y := y + r ;
23025: LD_ADDR_VAR 0 10
23029: PUSH
23030: LD_VAR 0 3
23034: PUSH
23035: LD_VAR 0 4
23039: PLUS
23040: ST_TO_ADDR
// for _x = min_x to max_x do
23041: LD_ADDR_VAR 0 11
23045: PUSH
23046: DOUBLE
23047: LD_VAR 0 7
23051: DEC
23052: ST_TO_ADDR
23053: LD_VAR 0 9
23057: PUSH
23058: FOR_TO
23059: IFFALSE 23176
// for _y = min_y to max_y do
23061: LD_ADDR_VAR 0 12
23065: PUSH
23066: DOUBLE
23067: LD_VAR 0 8
23071: DEC
23072: ST_TO_ADDR
23073: LD_VAR 0 10
23077: PUSH
23078: FOR_TO
23079: IFFALSE 23172
// begin if not ValidHex ( _x , _y ) then
23081: LD_VAR 0 11
23085: PPUSH
23086: LD_VAR 0 12
23090: PPUSH
23091: CALL_OW 488
23095: NOT
23096: IFFALSE 23100
// continue ;
23098: GO 23078
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23100: LD_VAR 0 11
23104: PPUSH
23105: LD_VAR 0 12
23109: PPUSH
23110: CALL_OW 351
23114: PUSH
23115: LD_VAR 0 11
23119: PPUSH
23120: LD_VAR 0 12
23124: PPUSH
23125: CALL_OW 554
23129: AND
23130: IFFALSE 23170
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23132: LD_ADDR_VAR 0 13
23136: PUSH
23137: LD_VAR 0 13
23141: PPUSH
23142: LD_VAR 0 13
23146: PUSH
23147: LD_INT 1
23149: PLUS
23150: PPUSH
23151: LD_VAR 0 11
23155: PUSH
23156: LD_VAR 0 12
23160: PUSH
23161: EMPTY
23162: LIST
23163: LIST
23164: PPUSH
23165: CALL_OW 2
23169: ST_TO_ADDR
// end ;
23170: GO 23078
23172: POP
23173: POP
23174: GO 23058
23176: POP
23177: POP
// if not list then
23178: LD_VAR 0 13
23182: NOT
23183: IFFALSE 23187
// exit ;
23185: GO 23258
// for i in list do
23187: LD_ADDR_VAR 0 6
23191: PUSH
23192: LD_VAR 0 13
23196: PUSH
23197: FOR_IN
23198: IFFALSE 23256
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23200: LD_VAR 0 1
23204: PPUSH
23205: LD_STRING M
23207: PUSH
23208: LD_VAR 0 6
23212: PUSH
23213: LD_INT 1
23215: ARRAY
23216: PUSH
23217: LD_VAR 0 6
23221: PUSH
23222: LD_INT 2
23224: ARRAY
23225: PUSH
23226: LD_INT 0
23228: PUSH
23229: LD_INT 0
23231: PUSH
23232: LD_INT 0
23234: PUSH
23235: LD_INT 0
23237: PUSH
23238: EMPTY
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: PUSH
23247: EMPTY
23248: LIST
23249: PPUSH
23250: CALL_OW 447
23254: GO 23197
23256: POP
23257: POP
// end ;
23258: LD_VAR 0 5
23262: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
23263: LD_EXP 88
23267: NOT
23268: IFFALSE 23318
23270: GO 23272
23272: DISABLE
// begin initHack := true ;
23273: LD_ADDR_EXP 88
23277: PUSH
23278: LD_INT 1
23280: ST_TO_ADDR
// hackTanks := [ ] ;
23281: LD_ADDR_EXP 89
23285: PUSH
23286: EMPTY
23287: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
23288: LD_ADDR_EXP 90
23292: PUSH
23293: EMPTY
23294: ST_TO_ADDR
// hackLimit := 3 ;
23295: LD_ADDR_EXP 91
23299: PUSH
23300: LD_INT 3
23302: ST_TO_ADDR
// hackDist := 12 ;
23303: LD_ADDR_EXP 92
23307: PUSH
23308: LD_INT 12
23310: ST_TO_ADDR
// hackCounter := [ ] ;
23311: LD_ADDR_EXP 93
23315: PUSH
23316: EMPTY
23317: ST_TO_ADDR
// end ;
23318: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
23319: LD_EXP 88
23323: PUSH
23324: LD_INT 34
23326: PUSH
23327: LD_INT 99
23329: PUSH
23330: EMPTY
23331: LIST
23332: LIST
23333: PPUSH
23334: CALL_OW 69
23338: AND
23339: IFFALSE 23592
23341: GO 23343
23343: DISABLE
23344: LD_INT 0
23346: PPUSH
23347: PPUSH
// begin enable ;
23348: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
23349: LD_ADDR_VAR 0 1
23353: PUSH
23354: LD_INT 34
23356: PUSH
23357: LD_INT 99
23359: PUSH
23360: EMPTY
23361: LIST
23362: LIST
23363: PPUSH
23364: CALL_OW 69
23368: PUSH
23369: FOR_IN
23370: IFFALSE 23590
// begin if not i in hackTanks then
23372: LD_VAR 0 1
23376: PUSH
23377: LD_EXP 89
23381: IN
23382: NOT
23383: IFFALSE 23466
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
23385: LD_ADDR_EXP 89
23389: PUSH
23390: LD_EXP 89
23394: PPUSH
23395: LD_EXP 89
23399: PUSH
23400: LD_INT 1
23402: PLUS
23403: PPUSH
23404: LD_VAR 0 1
23408: PPUSH
23409: CALL_OW 1
23413: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
23414: LD_ADDR_EXP 90
23418: PUSH
23419: LD_EXP 90
23423: PPUSH
23424: LD_EXP 90
23428: PUSH
23429: LD_INT 1
23431: PLUS
23432: PPUSH
23433: EMPTY
23434: PPUSH
23435: CALL_OW 1
23439: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
23440: LD_ADDR_EXP 93
23444: PUSH
23445: LD_EXP 93
23449: PPUSH
23450: LD_EXP 93
23454: PUSH
23455: LD_INT 1
23457: PLUS
23458: PPUSH
23459: EMPTY
23460: PPUSH
23461: CALL_OW 1
23465: ST_TO_ADDR
// end ; if not IsOk ( i ) then
23466: LD_VAR 0 1
23470: PPUSH
23471: CALL_OW 302
23475: NOT
23476: IFFALSE 23489
// begin HackUnlinkAll ( i ) ;
23478: LD_VAR 0 1
23482: PPUSH
23483: CALL 23595 0 1
// continue ;
23487: GO 23369
// end ; HackCheckCapturedStatus ( i ) ;
23489: LD_VAR 0 1
23493: PPUSH
23494: CALL 24038 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
23498: LD_ADDR_VAR 0 2
23502: PUSH
23503: LD_INT 81
23505: PUSH
23506: LD_VAR 0 1
23510: PPUSH
23511: CALL_OW 255
23515: PUSH
23516: EMPTY
23517: LIST
23518: LIST
23519: PUSH
23520: LD_INT 33
23522: PUSH
23523: LD_INT 3
23525: PUSH
23526: EMPTY
23527: LIST
23528: LIST
23529: PUSH
23530: LD_INT 91
23532: PUSH
23533: LD_VAR 0 1
23537: PUSH
23538: LD_EXP 92
23542: PUSH
23543: EMPTY
23544: LIST
23545: LIST
23546: LIST
23547: PUSH
23548: LD_INT 50
23550: PUSH
23551: EMPTY
23552: LIST
23553: PUSH
23554: EMPTY
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: PPUSH
23560: CALL_OW 69
23564: ST_TO_ADDR
// if not tmp then
23565: LD_VAR 0 2
23569: NOT
23570: IFFALSE 23574
// continue ;
23572: GO 23369
// HackLink ( i , tmp ) ;
23574: LD_VAR 0 1
23578: PPUSH
23579: LD_VAR 0 2
23583: PPUSH
23584: CALL 23731 0 2
// end ;
23588: GO 23369
23590: POP
23591: POP
// end ;
23592: PPOPN 2
23594: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
23595: LD_INT 0
23597: PPUSH
23598: PPUSH
23599: PPUSH
// if not hack in hackTanks then
23600: LD_VAR 0 1
23604: PUSH
23605: LD_EXP 89
23609: IN
23610: NOT
23611: IFFALSE 23615
// exit ;
23613: GO 23726
// index := GetElementIndex ( hackTanks , hack ) ;
23615: LD_ADDR_VAR 0 4
23619: PUSH
23620: LD_EXP 89
23624: PPUSH
23625: LD_VAR 0 1
23629: PPUSH
23630: CALL 31343 0 2
23634: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
23635: LD_EXP 90
23639: PUSH
23640: LD_VAR 0 4
23644: ARRAY
23645: IFFALSE 23726
// begin for i in hackTanksCaptured [ index ] do
23647: LD_ADDR_VAR 0 3
23651: PUSH
23652: LD_EXP 90
23656: PUSH
23657: LD_VAR 0 4
23661: ARRAY
23662: PUSH
23663: FOR_IN
23664: IFFALSE 23690
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
23666: LD_VAR 0 3
23670: PUSH
23671: LD_INT 1
23673: ARRAY
23674: PPUSH
23675: LD_VAR 0 3
23679: PUSH
23680: LD_INT 2
23682: ARRAY
23683: PPUSH
23684: CALL_OW 235
23688: GO 23663
23690: POP
23691: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
23692: LD_ADDR_EXP 90
23696: PUSH
23697: LD_EXP 90
23701: PPUSH
23702: LD_VAR 0 4
23706: PPUSH
23707: EMPTY
23708: PPUSH
23709: CALL_OW 1
23713: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
23714: LD_VAR 0 1
23718: PPUSH
23719: LD_INT 0
23721: PPUSH
23722: CALL_OW 505
// end ; end ;
23726: LD_VAR 0 2
23730: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
23731: LD_INT 0
23733: PPUSH
23734: PPUSH
23735: PPUSH
// if not hack in hackTanks or not vehicles then
23736: LD_VAR 0 1
23740: PUSH
23741: LD_EXP 89
23745: IN
23746: NOT
23747: PUSH
23748: LD_VAR 0 2
23752: NOT
23753: OR
23754: IFFALSE 23758
// exit ;
23756: GO 24033
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
23758: LD_ADDR_VAR 0 2
23762: PUSH
23763: LD_VAR 0 1
23767: PPUSH
23768: LD_VAR 0 2
23772: PPUSH
23773: LD_INT 1
23775: PPUSH
23776: LD_INT 1
23778: PPUSH
23779: CALL 31993 0 4
23783: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
23784: LD_ADDR_VAR 0 5
23788: PUSH
23789: LD_EXP 89
23793: PPUSH
23794: LD_VAR 0 1
23798: PPUSH
23799: CALL 31343 0 2
23803: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
23804: LD_EXP 90
23808: PUSH
23809: LD_VAR 0 5
23813: ARRAY
23814: PUSH
23815: LD_EXP 91
23819: LESS
23820: IFFALSE 24009
// begin for i := 1 to vehicles do
23822: LD_ADDR_VAR 0 4
23826: PUSH
23827: DOUBLE
23828: LD_INT 1
23830: DEC
23831: ST_TO_ADDR
23832: LD_VAR 0 2
23836: PUSH
23837: FOR_TO
23838: IFFALSE 24007
// begin if hackTanksCaptured [ index ] = hackLimit then
23840: LD_EXP 90
23844: PUSH
23845: LD_VAR 0 5
23849: ARRAY
23850: PUSH
23851: LD_EXP 91
23855: EQUAL
23856: IFFALSE 23860
// break ;
23858: GO 24007
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
23860: LD_ADDR_EXP 93
23864: PUSH
23865: LD_EXP 93
23869: PPUSH
23870: LD_VAR 0 5
23874: PPUSH
23875: LD_EXP 93
23879: PUSH
23880: LD_VAR 0 5
23884: ARRAY
23885: PUSH
23886: LD_INT 1
23888: PLUS
23889: PPUSH
23890: CALL_OW 1
23894: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
23895: LD_ADDR_EXP 90
23899: PUSH
23900: LD_EXP 90
23904: PPUSH
23905: LD_VAR 0 5
23909: PUSH
23910: LD_EXP 90
23914: PUSH
23915: LD_VAR 0 5
23919: ARRAY
23920: PUSH
23921: LD_INT 1
23923: PLUS
23924: PUSH
23925: EMPTY
23926: LIST
23927: LIST
23928: PPUSH
23929: LD_VAR 0 2
23933: PUSH
23934: LD_VAR 0 4
23938: ARRAY
23939: PUSH
23940: LD_VAR 0 2
23944: PUSH
23945: LD_VAR 0 4
23949: ARRAY
23950: PPUSH
23951: CALL_OW 255
23955: PUSH
23956: EMPTY
23957: LIST
23958: LIST
23959: PPUSH
23960: CALL 31558 0 3
23964: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
23965: LD_VAR 0 2
23969: PUSH
23970: LD_VAR 0 4
23974: ARRAY
23975: PPUSH
23976: LD_VAR 0 1
23980: PPUSH
23981: CALL_OW 255
23985: PPUSH
23986: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
23990: LD_VAR 0 2
23994: PUSH
23995: LD_VAR 0 4
23999: ARRAY
24000: PPUSH
24001: CALL_OW 141
// end ;
24005: GO 23837
24007: POP
24008: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24009: LD_VAR 0 1
24013: PPUSH
24014: LD_EXP 90
24018: PUSH
24019: LD_VAR 0 5
24023: ARRAY
24024: PUSH
24025: LD_INT 0
24027: PLUS
24028: PPUSH
24029: CALL_OW 505
// end ;
24033: LD_VAR 0 3
24037: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
24038: LD_INT 0
24040: PPUSH
24041: PPUSH
24042: PPUSH
24043: PPUSH
// if not hack in hackTanks then
24044: LD_VAR 0 1
24048: PUSH
24049: LD_EXP 89
24053: IN
24054: NOT
24055: IFFALSE 24059
// exit ;
24057: GO 24299
// index := GetElementIndex ( hackTanks , hack ) ;
24059: LD_ADDR_VAR 0 4
24063: PUSH
24064: LD_EXP 89
24068: PPUSH
24069: LD_VAR 0 1
24073: PPUSH
24074: CALL 31343 0 2
24078: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
24079: LD_ADDR_VAR 0 3
24083: PUSH
24084: DOUBLE
24085: LD_EXP 90
24089: PUSH
24090: LD_VAR 0 4
24094: ARRAY
24095: INC
24096: ST_TO_ADDR
24097: LD_INT 1
24099: PUSH
24100: FOR_DOWNTO
24101: IFFALSE 24273
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
24103: LD_ADDR_VAR 0 5
24107: PUSH
24108: LD_EXP 90
24112: PUSH
24113: LD_VAR 0 4
24117: ARRAY
24118: PUSH
24119: LD_VAR 0 3
24123: ARRAY
24124: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
24125: LD_VAR 0 5
24129: PUSH
24130: LD_INT 1
24132: ARRAY
24133: PPUSH
24134: CALL_OW 302
24138: NOT
24139: PUSH
24140: LD_VAR 0 5
24144: PUSH
24145: LD_INT 1
24147: ARRAY
24148: PPUSH
24149: CALL_OW 255
24153: PUSH
24154: LD_VAR 0 1
24158: PPUSH
24159: CALL_OW 255
24163: NONEQUAL
24164: OR
24165: IFFALSE 24271
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
24167: LD_VAR 0 5
24171: PUSH
24172: LD_INT 1
24174: ARRAY
24175: PPUSH
24176: CALL_OW 305
24180: PUSH
24181: LD_VAR 0 5
24185: PUSH
24186: LD_INT 1
24188: ARRAY
24189: PPUSH
24190: CALL_OW 255
24194: PUSH
24195: LD_VAR 0 1
24199: PPUSH
24200: CALL_OW 255
24204: EQUAL
24205: AND
24206: IFFALSE 24230
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
24208: LD_VAR 0 5
24212: PUSH
24213: LD_INT 1
24215: ARRAY
24216: PPUSH
24217: LD_VAR 0 5
24221: PUSH
24222: LD_INT 2
24224: ARRAY
24225: PPUSH
24226: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
24230: LD_ADDR_EXP 90
24234: PUSH
24235: LD_EXP 90
24239: PPUSH
24240: LD_VAR 0 4
24244: PPUSH
24245: LD_EXP 90
24249: PUSH
24250: LD_VAR 0 4
24254: ARRAY
24255: PPUSH
24256: LD_VAR 0 3
24260: PPUSH
24261: CALL_OW 3
24265: PPUSH
24266: CALL_OW 1
24270: ST_TO_ADDR
// end ; end ;
24271: GO 24100
24273: POP
24274: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24275: LD_VAR 0 1
24279: PPUSH
24280: LD_EXP 90
24284: PUSH
24285: LD_VAR 0 4
24289: ARRAY
24290: PUSH
24291: LD_INT 0
24293: PLUS
24294: PPUSH
24295: CALL_OW 505
// end ;
24299: LD_VAR 0 2
24303: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
24304: LD_INT 0
24306: PPUSH
24307: PPUSH
24308: PPUSH
24309: PPUSH
// if not hack in hackTanks then
24310: LD_VAR 0 1
24314: PUSH
24315: LD_EXP 89
24319: IN
24320: NOT
24321: IFFALSE 24325
// exit ;
24323: GO 24410
// index := GetElementIndex ( hackTanks , hack ) ;
24325: LD_ADDR_VAR 0 5
24329: PUSH
24330: LD_EXP 89
24334: PPUSH
24335: LD_VAR 0 1
24339: PPUSH
24340: CALL 31343 0 2
24344: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
24345: LD_ADDR_VAR 0 4
24349: PUSH
24350: DOUBLE
24351: LD_INT 1
24353: DEC
24354: ST_TO_ADDR
24355: LD_EXP 90
24359: PUSH
24360: LD_VAR 0 5
24364: ARRAY
24365: PUSH
24366: FOR_TO
24367: IFFALSE 24408
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
24369: LD_EXP 90
24373: PUSH
24374: LD_VAR 0 5
24378: ARRAY
24379: PUSH
24380: LD_VAR 0 4
24384: ARRAY
24385: PUSH
24386: LD_INT 1
24388: ARRAY
24389: PUSH
24390: LD_VAR 0 2
24394: EQUAL
24395: IFFALSE 24406
// KillUnit ( vehicle ) ;
24397: LD_VAR 0 2
24401: PPUSH
24402: CALL_OW 66
24406: GO 24366
24408: POP
24409: POP
// end ;
24410: LD_VAR 0 3
24414: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
24415: LD_EXP 94
24419: NOT
24420: IFFALSE 24455
24422: GO 24424
24424: DISABLE
// begin initMiner := true ;
24425: LD_ADDR_EXP 94
24429: PUSH
24430: LD_INT 1
24432: ST_TO_ADDR
// minersList := [ ] ;
24433: LD_ADDR_EXP 95
24437: PUSH
24438: EMPTY
24439: ST_TO_ADDR
// minerMinesList := [ ] ;
24440: LD_ADDR_EXP 96
24444: PUSH
24445: EMPTY
24446: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
24447: LD_ADDR_EXP 97
24451: PUSH
24452: LD_INT 5
24454: ST_TO_ADDR
// end ;
24455: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
24456: LD_EXP 94
24460: PUSH
24461: LD_INT 34
24463: PUSH
24464: LD_INT 81
24466: PUSH
24467: EMPTY
24468: LIST
24469: LIST
24470: PPUSH
24471: CALL_OW 69
24475: AND
24476: IFFALSE 24937
24478: GO 24480
24480: DISABLE
24481: LD_INT 0
24483: PPUSH
24484: PPUSH
24485: PPUSH
24486: PPUSH
// begin enable ;
24487: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
24488: LD_ADDR_VAR 0 1
24492: PUSH
24493: LD_INT 34
24495: PUSH
24496: LD_INT 81
24498: PUSH
24499: EMPTY
24500: LIST
24501: LIST
24502: PPUSH
24503: CALL_OW 69
24507: PUSH
24508: FOR_IN
24509: IFFALSE 24581
// begin if not i in minersList then
24511: LD_VAR 0 1
24515: PUSH
24516: LD_EXP 95
24520: IN
24521: NOT
24522: IFFALSE 24579
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
24524: LD_ADDR_EXP 95
24528: PUSH
24529: LD_EXP 95
24533: PPUSH
24534: LD_EXP 95
24538: PUSH
24539: LD_INT 1
24541: PLUS
24542: PPUSH
24543: LD_VAR 0 1
24547: PPUSH
24548: CALL_OW 1
24552: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
24553: LD_ADDR_EXP 96
24557: PUSH
24558: LD_EXP 96
24562: PPUSH
24563: LD_EXP 96
24567: PUSH
24568: LD_INT 1
24570: PLUS
24571: PPUSH
24572: EMPTY
24573: PPUSH
24574: CALL_OW 1
24578: ST_TO_ADDR
// end end ;
24579: GO 24508
24581: POP
24582: POP
// for i := minerMinesList downto 1 do
24583: LD_ADDR_VAR 0 1
24587: PUSH
24588: DOUBLE
24589: LD_EXP 96
24593: INC
24594: ST_TO_ADDR
24595: LD_INT 1
24597: PUSH
24598: FOR_DOWNTO
24599: IFFALSE 24935
// begin if IsLive ( minersList [ i ] ) then
24601: LD_EXP 95
24605: PUSH
24606: LD_VAR 0 1
24610: ARRAY
24611: PPUSH
24612: CALL_OW 300
24616: IFFALSE 24644
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
24618: LD_EXP 95
24622: PUSH
24623: LD_VAR 0 1
24627: ARRAY
24628: PPUSH
24629: LD_EXP 96
24633: PUSH
24634: LD_VAR 0 1
24638: ARRAY
24639: PPUSH
24640: CALL_OW 505
// if not minerMinesList [ i ] then
24644: LD_EXP 96
24648: PUSH
24649: LD_VAR 0 1
24653: ARRAY
24654: NOT
24655: IFFALSE 24659
// continue ;
24657: GO 24598
// for j := minerMinesList [ i ] downto 1 do
24659: LD_ADDR_VAR 0 2
24663: PUSH
24664: DOUBLE
24665: LD_EXP 96
24669: PUSH
24670: LD_VAR 0 1
24674: ARRAY
24675: INC
24676: ST_TO_ADDR
24677: LD_INT 1
24679: PUSH
24680: FOR_DOWNTO
24681: IFFALSE 24931
// begin side := GetSide ( minersList [ i ] ) ;
24683: LD_ADDR_VAR 0 3
24687: PUSH
24688: LD_EXP 95
24692: PUSH
24693: LD_VAR 0 1
24697: ARRAY
24698: PPUSH
24699: CALL_OW 255
24703: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
24704: LD_ADDR_VAR 0 4
24708: PUSH
24709: LD_EXP 96
24713: PUSH
24714: LD_VAR 0 1
24718: ARRAY
24719: PUSH
24720: LD_VAR 0 2
24724: ARRAY
24725: PUSH
24726: LD_INT 1
24728: ARRAY
24729: PPUSH
24730: LD_EXP 96
24734: PUSH
24735: LD_VAR 0 1
24739: ARRAY
24740: PUSH
24741: LD_VAR 0 2
24745: ARRAY
24746: PUSH
24747: LD_INT 2
24749: ARRAY
24750: PPUSH
24751: CALL_OW 428
24755: ST_TO_ADDR
// if not tmp then
24756: LD_VAR 0 4
24760: NOT
24761: IFFALSE 24765
// continue ;
24763: GO 24680
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
24765: LD_VAR 0 4
24769: PUSH
24770: LD_INT 81
24772: PUSH
24773: LD_VAR 0 3
24777: PUSH
24778: EMPTY
24779: LIST
24780: LIST
24781: PPUSH
24782: CALL_OW 69
24786: IN
24787: PUSH
24788: LD_EXP 96
24792: PUSH
24793: LD_VAR 0 1
24797: ARRAY
24798: PUSH
24799: LD_VAR 0 2
24803: ARRAY
24804: PUSH
24805: LD_INT 1
24807: ARRAY
24808: PPUSH
24809: LD_EXP 96
24813: PUSH
24814: LD_VAR 0 1
24818: ARRAY
24819: PUSH
24820: LD_VAR 0 2
24824: ARRAY
24825: PUSH
24826: LD_INT 2
24828: ARRAY
24829: PPUSH
24830: CALL_OW 458
24834: AND
24835: IFFALSE 24929
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
24837: LD_EXP 96
24841: PUSH
24842: LD_VAR 0 1
24846: ARRAY
24847: PUSH
24848: LD_VAR 0 2
24852: ARRAY
24853: PUSH
24854: LD_INT 1
24856: ARRAY
24857: PPUSH
24858: LD_EXP 96
24862: PUSH
24863: LD_VAR 0 1
24867: ARRAY
24868: PUSH
24869: LD_VAR 0 2
24873: ARRAY
24874: PUSH
24875: LD_INT 2
24877: ARRAY
24878: PPUSH
24879: LD_VAR 0 3
24883: PPUSH
24884: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
24888: LD_ADDR_EXP 96
24892: PUSH
24893: LD_EXP 96
24897: PPUSH
24898: LD_VAR 0 1
24902: PPUSH
24903: LD_EXP 96
24907: PUSH
24908: LD_VAR 0 1
24912: ARRAY
24913: PPUSH
24914: LD_VAR 0 2
24918: PPUSH
24919: CALL_OW 3
24923: PPUSH
24924: CALL_OW 1
24928: ST_TO_ADDR
// end ; end ;
24929: GO 24680
24931: POP
24932: POP
// end ;
24933: GO 24598
24935: POP
24936: POP
// end ;
24937: PPOPN 4
24939: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
24940: LD_INT 0
24942: PPUSH
24943: PPUSH
// result := false ;
24944: LD_ADDR_VAR 0 4
24948: PUSH
24949: LD_INT 0
24951: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
24952: LD_VAR 0 1
24956: PPUSH
24957: CALL_OW 264
24961: PUSH
24962: LD_INT 81
24964: EQUAL
24965: NOT
24966: IFFALSE 24970
// exit ;
24968: GO 25210
// index := GetElementIndex ( minersList , unit ) ;
24970: LD_ADDR_VAR 0 5
24974: PUSH
24975: LD_EXP 95
24979: PPUSH
24980: LD_VAR 0 1
24984: PPUSH
24985: CALL 31343 0 2
24989: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
24990: LD_EXP 96
24994: PUSH
24995: LD_VAR 0 5
24999: ARRAY
25000: PUSH
25001: LD_EXP 97
25005: GREATEREQUAL
25006: IFFALSE 25010
// exit ;
25008: GO 25210
// ComMoveXY ( unit , x , y ) ;
25010: LD_VAR 0 1
25014: PPUSH
25015: LD_VAR 0 2
25019: PPUSH
25020: LD_VAR 0 3
25024: PPUSH
25025: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25029: LD_INT 35
25031: PPUSH
25032: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
25036: LD_VAR 0 1
25040: PPUSH
25041: LD_VAR 0 2
25045: PPUSH
25046: LD_VAR 0 3
25050: PPUSH
25051: CALL 62606 0 3
25055: NOT
25056: PUSH
25057: LD_VAR 0 1
25061: PPUSH
25062: CALL_OW 314
25066: AND
25067: IFFALSE 25071
// exit ;
25069: GO 25210
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
25071: LD_VAR 0 2
25075: PPUSH
25076: LD_VAR 0 3
25080: PPUSH
25081: CALL_OW 428
25085: PUSH
25086: LD_VAR 0 1
25090: EQUAL
25091: PUSH
25092: LD_VAR 0 1
25096: PPUSH
25097: CALL_OW 314
25101: NOT
25102: AND
25103: IFFALSE 25029
// PlaySoundXY ( x , y , PlantMine ) ;
25105: LD_VAR 0 2
25109: PPUSH
25110: LD_VAR 0 3
25114: PPUSH
25115: LD_STRING PlantMine
25117: PPUSH
25118: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
25122: LD_VAR 0 2
25126: PPUSH
25127: LD_VAR 0 3
25131: PPUSH
25132: LD_VAR 0 1
25136: PPUSH
25137: CALL_OW 255
25141: PPUSH
25142: LD_INT 0
25144: PPUSH
25145: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
25149: LD_ADDR_EXP 96
25153: PUSH
25154: LD_EXP 96
25158: PPUSH
25159: LD_VAR 0 5
25163: PUSH
25164: LD_EXP 96
25168: PUSH
25169: LD_VAR 0 5
25173: ARRAY
25174: PUSH
25175: LD_INT 1
25177: PLUS
25178: PUSH
25179: EMPTY
25180: LIST
25181: LIST
25182: PPUSH
25183: LD_VAR 0 2
25187: PUSH
25188: LD_VAR 0 3
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: PPUSH
25197: CALL 31558 0 3
25201: ST_TO_ADDR
// result := true ;
25202: LD_ADDR_VAR 0 4
25206: PUSH
25207: LD_INT 1
25209: ST_TO_ADDR
// end ;
25210: LD_VAR 0 4
25214: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
25215: LD_INT 0
25217: PPUSH
25218: PPUSH
25219: PPUSH
// if not unit in minersList then
25220: LD_VAR 0 1
25224: PUSH
25225: LD_EXP 95
25229: IN
25230: NOT
25231: IFFALSE 25235
// exit ;
25233: GO 25627
// index := GetElementIndex ( minersList , unit ) ;
25235: LD_ADDR_VAR 0 6
25239: PUSH
25240: LD_EXP 95
25244: PPUSH
25245: LD_VAR 0 1
25249: PPUSH
25250: CALL 31343 0 2
25254: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
25255: LD_ADDR_VAR 0 5
25259: PUSH
25260: DOUBLE
25261: LD_EXP 96
25265: PUSH
25266: LD_VAR 0 6
25270: ARRAY
25271: INC
25272: ST_TO_ADDR
25273: LD_INT 1
25275: PUSH
25276: FOR_DOWNTO
25277: IFFALSE 25438
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
25279: LD_EXP 96
25283: PUSH
25284: LD_VAR 0 6
25288: ARRAY
25289: PUSH
25290: LD_VAR 0 5
25294: ARRAY
25295: PUSH
25296: LD_INT 1
25298: ARRAY
25299: PUSH
25300: LD_VAR 0 2
25304: EQUAL
25305: PUSH
25306: LD_EXP 96
25310: PUSH
25311: LD_VAR 0 6
25315: ARRAY
25316: PUSH
25317: LD_VAR 0 5
25321: ARRAY
25322: PUSH
25323: LD_INT 2
25325: ARRAY
25326: PUSH
25327: LD_VAR 0 3
25331: EQUAL
25332: AND
25333: IFFALSE 25436
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25335: LD_EXP 96
25339: PUSH
25340: LD_VAR 0 6
25344: ARRAY
25345: PUSH
25346: LD_VAR 0 5
25350: ARRAY
25351: PUSH
25352: LD_INT 1
25354: ARRAY
25355: PPUSH
25356: LD_EXP 96
25360: PUSH
25361: LD_VAR 0 6
25365: ARRAY
25366: PUSH
25367: LD_VAR 0 5
25371: ARRAY
25372: PUSH
25373: LD_INT 2
25375: ARRAY
25376: PPUSH
25377: LD_VAR 0 1
25381: PPUSH
25382: CALL_OW 255
25386: PPUSH
25387: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25391: LD_ADDR_EXP 96
25395: PUSH
25396: LD_EXP 96
25400: PPUSH
25401: LD_VAR 0 6
25405: PPUSH
25406: LD_EXP 96
25410: PUSH
25411: LD_VAR 0 6
25415: ARRAY
25416: PPUSH
25417: LD_VAR 0 5
25421: PPUSH
25422: CALL_OW 3
25426: PPUSH
25427: CALL_OW 1
25431: ST_TO_ADDR
// exit ;
25432: POP
25433: POP
25434: GO 25627
// end ; end ;
25436: GO 25276
25438: POP
25439: POP
// for i := minerMinesList [ index ] downto 1 do
25440: LD_ADDR_VAR 0 5
25444: PUSH
25445: DOUBLE
25446: LD_EXP 96
25450: PUSH
25451: LD_VAR 0 6
25455: ARRAY
25456: INC
25457: ST_TO_ADDR
25458: LD_INT 1
25460: PUSH
25461: FOR_DOWNTO
25462: IFFALSE 25625
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
25464: LD_EXP 96
25468: PUSH
25469: LD_VAR 0 6
25473: ARRAY
25474: PUSH
25475: LD_VAR 0 5
25479: ARRAY
25480: PUSH
25481: LD_INT 1
25483: ARRAY
25484: PPUSH
25485: LD_EXP 96
25489: PUSH
25490: LD_VAR 0 6
25494: ARRAY
25495: PUSH
25496: LD_VAR 0 5
25500: ARRAY
25501: PUSH
25502: LD_INT 2
25504: ARRAY
25505: PPUSH
25506: LD_VAR 0 2
25510: PPUSH
25511: LD_VAR 0 3
25515: PPUSH
25516: CALL_OW 298
25520: PUSH
25521: LD_INT 6
25523: LESS
25524: IFFALSE 25623
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25526: LD_EXP 96
25530: PUSH
25531: LD_VAR 0 6
25535: ARRAY
25536: PUSH
25537: LD_VAR 0 5
25541: ARRAY
25542: PUSH
25543: LD_INT 1
25545: ARRAY
25546: PPUSH
25547: LD_EXP 96
25551: PUSH
25552: LD_VAR 0 6
25556: ARRAY
25557: PUSH
25558: LD_VAR 0 5
25562: ARRAY
25563: PUSH
25564: LD_INT 2
25566: ARRAY
25567: PPUSH
25568: LD_VAR 0 1
25572: PPUSH
25573: CALL_OW 255
25577: PPUSH
25578: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25582: LD_ADDR_EXP 96
25586: PUSH
25587: LD_EXP 96
25591: PPUSH
25592: LD_VAR 0 6
25596: PPUSH
25597: LD_EXP 96
25601: PUSH
25602: LD_VAR 0 6
25606: ARRAY
25607: PPUSH
25608: LD_VAR 0 5
25612: PPUSH
25613: CALL_OW 3
25617: PPUSH
25618: CALL_OW 1
25622: ST_TO_ADDR
// end ; end ;
25623: GO 25461
25625: POP
25626: POP
// end ;
25627: LD_VAR 0 4
25631: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
25632: LD_INT 0
25634: PPUSH
25635: PPUSH
25636: PPUSH
25637: PPUSH
25638: PPUSH
25639: PPUSH
25640: PPUSH
25641: PPUSH
25642: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
25643: LD_VAR 0 1
25647: PPUSH
25648: CALL_OW 264
25652: PUSH
25653: LD_INT 81
25655: EQUAL
25656: NOT
25657: PUSH
25658: LD_VAR 0 1
25662: PUSH
25663: LD_EXP 95
25667: IN
25668: NOT
25669: OR
25670: IFFALSE 25674
// exit ;
25672: GO 25996
// index := GetElementIndex ( minersList , unit ) ;
25674: LD_ADDR_VAR 0 6
25678: PUSH
25679: LD_EXP 95
25683: PPUSH
25684: LD_VAR 0 1
25688: PPUSH
25689: CALL 31343 0 2
25693: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
25694: LD_ADDR_VAR 0 8
25698: PUSH
25699: LD_EXP 97
25703: PUSH
25704: LD_EXP 96
25708: PUSH
25709: LD_VAR 0 6
25713: ARRAY
25714: MINUS
25715: ST_TO_ADDR
// if not minesFreeAmount then
25716: LD_VAR 0 8
25720: NOT
25721: IFFALSE 25725
// exit ;
25723: GO 25996
// tmp := [ ] ;
25725: LD_ADDR_VAR 0 7
25729: PUSH
25730: EMPTY
25731: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
25732: LD_ADDR_VAR 0 5
25736: PUSH
25737: DOUBLE
25738: LD_INT 1
25740: DEC
25741: ST_TO_ADDR
25742: LD_VAR 0 8
25746: PUSH
25747: FOR_TO
25748: IFFALSE 25943
// begin _d := rand ( 0 , 5 ) ;
25750: LD_ADDR_VAR 0 11
25754: PUSH
25755: LD_INT 0
25757: PPUSH
25758: LD_INT 5
25760: PPUSH
25761: CALL_OW 12
25765: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
25766: LD_ADDR_VAR 0 12
25770: PUSH
25771: LD_INT 2
25773: PPUSH
25774: LD_INT 6
25776: PPUSH
25777: CALL_OW 12
25781: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
25782: LD_ADDR_VAR 0 9
25786: PUSH
25787: LD_VAR 0 2
25791: PPUSH
25792: LD_VAR 0 11
25796: PPUSH
25797: LD_VAR 0 12
25801: PPUSH
25802: CALL_OW 272
25806: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
25807: LD_ADDR_VAR 0 10
25811: PUSH
25812: LD_VAR 0 3
25816: PPUSH
25817: LD_VAR 0 11
25821: PPUSH
25822: LD_VAR 0 12
25826: PPUSH
25827: CALL_OW 273
25831: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
25832: LD_VAR 0 9
25836: PPUSH
25837: LD_VAR 0 10
25841: PPUSH
25842: CALL_OW 488
25846: PUSH
25847: LD_VAR 0 9
25851: PUSH
25852: LD_VAR 0 10
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: PUSH
25861: LD_VAR 0 7
25865: IN
25866: NOT
25867: AND
25868: PUSH
25869: LD_VAR 0 9
25873: PPUSH
25874: LD_VAR 0 10
25878: PPUSH
25879: CALL_OW 458
25883: NOT
25884: AND
25885: IFFALSE 25927
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
25887: LD_ADDR_VAR 0 7
25891: PUSH
25892: LD_VAR 0 7
25896: PPUSH
25897: LD_VAR 0 7
25901: PUSH
25902: LD_INT 1
25904: PLUS
25905: PPUSH
25906: LD_VAR 0 9
25910: PUSH
25911: LD_VAR 0 10
25915: PUSH
25916: EMPTY
25917: LIST
25918: LIST
25919: PPUSH
25920: CALL_OW 1
25924: ST_TO_ADDR
25925: GO 25941
// i := i - 1 ;
25927: LD_ADDR_VAR 0 5
25931: PUSH
25932: LD_VAR 0 5
25936: PUSH
25937: LD_INT 1
25939: MINUS
25940: ST_TO_ADDR
// end ;
25941: GO 25747
25943: POP
25944: POP
// for i in tmp do
25945: LD_ADDR_VAR 0 5
25949: PUSH
25950: LD_VAR 0 7
25954: PUSH
25955: FOR_IN
25956: IFFALSE 25994
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
25958: LD_VAR 0 1
25962: PPUSH
25963: LD_VAR 0 5
25967: PUSH
25968: LD_INT 1
25970: ARRAY
25971: PPUSH
25972: LD_VAR 0 5
25976: PUSH
25977: LD_INT 2
25979: ARRAY
25980: PPUSH
25981: CALL 24940 0 3
25985: NOT
25986: IFFALSE 25992
// exit ;
25988: POP
25989: POP
25990: GO 25996
25992: GO 25955
25994: POP
25995: POP
// end ;
25996: LD_VAR 0 4
26000: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
26001: LD_INT 0
26003: PPUSH
26004: PPUSH
26005: PPUSH
26006: PPUSH
26007: PPUSH
26008: PPUSH
26009: PPUSH
// if not GetClass ( unit ) = class_sniper then
26010: LD_VAR 0 1
26014: PPUSH
26015: CALL_OW 257
26019: PUSH
26020: LD_INT 5
26022: EQUAL
26023: NOT
26024: IFFALSE 26028
// exit ;
26026: GO 26416
// dist := 8 ;
26028: LD_ADDR_VAR 0 5
26032: PUSH
26033: LD_INT 8
26035: ST_TO_ADDR
// viewRange := 12 ;
26036: LD_ADDR_VAR 0 7
26040: PUSH
26041: LD_INT 12
26043: ST_TO_ADDR
// side := GetSide ( unit ) ;
26044: LD_ADDR_VAR 0 6
26048: PUSH
26049: LD_VAR 0 1
26053: PPUSH
26054: CALL_OW 255
26058: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
26059: LD_INT 61
26061: PPUSH
26062: LD_VAR 0 6
26066: PPUSH
26067: CALL_OW 321
26071: PUSH
26072: LD_INT 2
26074: EQUAL
26075: IFFALSE 26085
// viewRange := 16 ;
26077: LD_ADDR_VAR 0 7
26081: PUSH
26082: LD_INT 16
26084: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
26085: LD_VAR 0 1
26089: PPUSH
26090: LD_VAR 0 2
26094: PPUSH
26095: LD_VAR 0 3
26099: PPUSH
26100: CALL_OW 297
26104: PUSH
26105: LD_VAR 0 5
26109: GREATER
26110: IFFALSE 26189
// begin ComMoveXY ( unit , x , y ) ;
26112: LD_VAR 0 1
26116: PPUSH
26117: LD_VAR 0 2
26121: PPUSH
26122: LD_VAR 0 3
26126: PPUSH
26127: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26131: LD_INT 35
26133: PPUSH
26134: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
26138: LD_VAR 0 1
26142: PPUSH
26143: LD_VAR 0 2
26147: PPUSH
26148: LD_VAR 0 3
26152: PPUSH
26153: CALL 62606 0 3
26157: NOT
26158: IFFALSE 26162
// exit ;
26160: GO 26416
// until GetDistUnitXY ( unit , x , y ) < dist ;
26162: LD_VAR 0 1
26166: PPUSH
26167: LD_VAR 0 2
26171: PPUSH
26172: LD_VAR 0 3
26176: PPUSH
26177: CALL_OW 297
26181: PUSH
26182: LD_VAR 0 5
26186: LESS
26187: IFFALSE 26131
// end ; ComTurnXY ( unit , x , y ) ;
26189: LD_VAR 0 1
26193: PPUSH
26194: LD_VAR 0 2
26198: PPUSH
26199: LD_VAR 0 3
26203: PPUSH
26204: CALL_OW 118
// wait ( 5 ) ;
26208: LD_INT 5
26210: PPUSH
26211: CALL_OW 67
// _d := GetDir ( unit ) ;
26215: LD_ADDR_VAR 0 10
26219: PUSH
26220: LD_VAR 0 1
26224: PPUSH
26225: CALL_OW 254
26229: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
26230: LD_ADDR_VAR 0 8
26234: PUSH
26235: LD_VAR 0 1
26239: PPUSH
26240: CALL_OW 250
26244: PPUSH
26245: LD_VAR 0 10
26249: PPUSH
26250: LD_VAR 0 5
26254: PPUSH
26255: CALL_OW 272
26259: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
26260: LD_ADDR_VAR 0 9
26264: PUSH
26265: LD_VAR 0 1
26269: PPUSH
26270: CALL_OW 251
26274: PPUSH
26275: LD_VAR 0 10
26279: PPUSH
26280: LD_VAR 0 5
26284: PPUSH
26285: CALL_OW 273
26289: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26290: LD_VAR 0 8
26294: PPUSH
26295: LD_VAR 0 9
26299: PPUSH
26300: CALL_OW 488
26304: NOT
26305: IFFALSE 26309
// exit ;
26307: GO 26416
// ComAnimCustom ( unit , 1 ) ;
26309: LD_VAR 0 1
26313: PPUSH
26314: LD_INT 1
26316: PPUSH
26317: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
26321: LD_VAR 0 8
26325: PPUSH
26326: LD_VAR 0 9
26330: PPUSH
26331: LD_VAR 0 6
26335: PPUSH
26336: LD_VAR 0 7
26340: PPUSH
26341: CALL_OW 330
// repeat wait ( 1 ) ;
26345: LD_INT 1
26347: PPUSH
26348: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
26352: LD_VAR 0 1
26356: PPUSH
26357: CALL_OW 316
26361: PUSH
26362: LD_VAR 0 1
26366: PPUSH
26367: CALL_OW 314
26371: OR
26372: PUSH
26373: LD_VAR 0 1
26377: PPUSH
26378: CALL_OW 302
26382: NOT
26383: OR
26384: PUSH
26385: LD_VAR 0 1
26389: PPUSH
26390: CALL_OW 301
26394: OR
26395: IFFALSE 26345
// RemoveSeeing ( _x , _y , side ) ;
26397: LD_VAR 0 8
26401: PPUSH
26402: LD_VAR 0 9
26406: PPUSH
26407: LD_VAR 0 6
26411: PPUSH
26412: CALL_OW 331
// end ; end_of_file
26416: LD_VAR 0 4
26420: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
26421: LD_INT 0
26423: PPUSH
26424: PPUSH
// if exist_mode then
26425: LD_VAR 0 2
26429: IFFALSE 26454
// unit := CreateCharacter ( prefix & ident ) else
26431: LD_ADDR_VAR 0 5
26435: PUSH
26436: LD_VAR 0 3
26440: PUSH
26441: LD_VAR 0 1
26445: STR
26446: PPUSH
26447: CALL_OW 34
26451: ST_TO_ADDR
26452: GO 26469
// unit := NewCharacter ( ident ) ;
26454: LD_ADDR_VAR 0 5
26458: PUSH
26459: LD_VAR 0 1
26463: PPUSH
26464: CALL_OW 25
26468: ST_TO_ADDR
// result := unit ;
26469: LD_ADDR_VAR 0 4
26473: PUSH
26474: LD_VAR 0 5
26478: ST_TO_ADDR
// end ;
26479: LD_VAR 0 4
26483: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
26484: LD_INT 0
26486: PPUSH
26487: PPUSH
// if not side or not nation then
26488: LD_VAR 0 1
26492: NOT
26493: PUSH
26494: LD_VAR 0 2
26498: NOT
26499: OR
26500: IFFALSE 26504
// exit ;
26502: GO 27272
// case nation of nation_american :
26504: LD_VAR 0 2
26508: PUSH
26509: LD_INT 1
26511: DOUBLE
26512: EQUAL
26513: IFTRUE 26517
26515: GO 26731
26517: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
26518: LD_ADDR_VAR 0 4
26522: PUSH
26523: LD_INT 35
26525: PUSH
26526: LD_INT 45
26528: PUSH
26529: LD_INT 46
26531: PUSH
26532: LD_INT 47
26534: PUSH
26535: LD_INT 82
26537: PUSH
26538: LD_INT 83
26540: PUSH
26541: LD_INT 84
26543: PUSH
26544: LD_INT 85
26546: PUSH
26547: LD_INT 86
26549: PUSH
26550: LD_INT 1
26552: PUSH
26553: LD_INT 2
26555: PUSH
26556: LD_INT 6
26558: PUSH
26559: LD_INT 15
26561: PUSH
26562: LD_INT 16
26564: PUSH
26565: LD_INT 7
26567: PUSH
26568: LD_INT 12
26570: PUSH
26571: LD_INT 13
26573: PUSH
26574: LD_INT 10
26576: PUSH
26577: LD_INT 14
26579: PUSH
26580: LD_INT 20
26582: PUSH
26583: LD_INT 21
26585: PUSH
26586: LD_INT 22
26588: PUSH
26589: LD_INT 25
26591: PUSH
26592: LD_INT 32
26594: PUSH
26595: LD_INT 27
26597: PUSH
26598: LD_INT 36
26600: PUSH
26601: LD_INT 69
26603: PUSH
26604: LD_INT 39
26606: PUSH
26607: LD_INT 34
26609: PUSH
26610: LD_INT 40
26612: PUSH
26613: LD_INT 48
26615: PUSH
26616: LD_INT 49
26618: PUSH
26619: LD_INT 50
26621: PUSH
26622: LD_INT 51
26624: PUSH
26625: LD_INT 52
26627: PUSH
26628: LD_INT 53
26630: PUSH
26631: LD_INT 54
26633: PUSH
26634: LD_INT 55
26636: PUSH
26637: LD_INT 56
26639: PUSH
26640: LD_INT 57
26642: PUSH
26643: LD_INT 58
26645: PUSH
26646: LD_INT 59
26648: PUSH
26649: LD_INT 60
26651: PUSH
26652: LD_INT 61
26654: PUSH
26655: LD_INT 62
26657: PUSH
26658: LD_INT 80
26660: PUSH
26661: LD_INT 82
26663: PUSH
26664: LD_INT 83
26666: PUSH
26667: LD_INT 84
26669: PUSH
26670: LD_INT 85
26672: PUSH
26673: LD_INT 86
26675: PUSH
26676: EMPTY
26677: LIST
26678: LIST
26679: LIST
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: LIST
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: LIST
26696: LIST
26697: LIST
26698: LIST
26699: LIST
26700: LIST
26701: LIST
26702: LIST
26703: LIST
26704: LIST
26705: LIST
26706: LIST
26707: LIST
26708: LIST
26709: LIST
26710: LIST
26711: LIST
26712: LIST
26713: LIST
26714: LIST
26715: LIST
26716: LIST
26717: LIST
26718: LIST
26719: LIST
26720: LIST
26721: LIST
26722: LIST
26723: LIST
26724: LIST
26725: LIST
26726: LIST
26727: LIST
26728: ST_TO_ADDR
26729: GO 27196
26731: LD_INT 2
26733: DOUBLE
26734: EQUAL
26735: IFTRUE 26739
26737: GO 26965
26739: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
26740: LD_ADDR_VAR 0 4
26744: PUSH
26745: LD_INT 35
26747: PUSH
26748: LD_INT 45
26750: PUSH
26751: LD_INT 46
26753: PUSH
26754: LD_INT 47
26756: PUSH
26757: LD_INT 82
26759: PUSH
26760: LD_INT 83
26762: PUSH
26763: LD_INT 84
26765: PUSH
26766: LD_INT 85
26768: PUSH
26769: LD_INT 87
26771: PUSH
26772: LD_INT 70
26774: PUSH
26775: LD_INT 1
26777: PUSH
26778: LD_INT 11
26780: PUSH
26781: LD_INT 3
26783: PUSH
26784: LD_INT 4
26786: PUSH
26787: LD_INT 5
26789: PUSH
26790: LD_INT 6
26792: PUSH
26793: LD_INT 15
26795: PUSH
26796: LD_INT 18
26798: PUSH
26799: LD_INT 7
26801: PUSH
26802: LD_INT 17
26804: PUSH
26805: LD_INT 8
26807: PUSH
26808: LD_INT 20
26810: PUSH
26811: LD_INT 21
26813: PUSH
26814: LD_INT 22
26816: PUSH
26817: LD_INT 72
26819: PUSH
26820: LD_INT 26
26822: PUSH
26823: LD_INT 69
26825: PUSH
26826: LD_INT 39
26828: PUSH
26829: LD_INT 40
26831: PUSH
26832: LD_INT 41
26834: PUSH
26835: LD_INT 42
26837: PUSH
26838: LD_INT 43
26840: PUSH
26841: LD_INT 48
26843: PUSH
26844: LD_INT 49
26846: PUSH
26847: LD_INT 50
26849: PUSH
26850: LD_INT 51
26852: PUSH
26853: LD_INT 52
26855: PUSH
26856: LD_INT 53
26858: PUSH
26859: LD_INT 54
26861: PUSH
26862: LD_INT 55
26864: PUSH
26865: LD_INT 56
26867: PUSH
26868: LD_INT 60
26870: PUSH
26871: LD_INT 61
26873: PUSH
26874: LD_INT 62
26876: PUSH
26877: LD_INT 66
26879: PUSH
26880: LD_INT 67
26882: PUSH
26883: LD_INT 68
26885: PUSH
26886: LD_INT 81
26888: PUSH
26889: LD_INT 82
26891: PUSH
26892: LD_INT 83
26894: PUSH
26895: LD_INT 84
26897: PUSH
26898: LD_INT 85
26900: PUSH
26901: LD_INT 87
26903: PUSH
26904: LD_INT 88
26906: PUSH
26907: EMPTY
26908: LIST
26909: LIST
26910: LIST
26911: LIST
26912: LIST
26913: LIST
26914: LIST
26915: LIST
26916: LIST
26917: LIST
26918: LIST
26919: LIST
26920: LIST
26921: LIST
26922: LIST
26923: LIST
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: LIST
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: LIST
26961: LIST
26962: ST_TO_ADDR
26963: GO 27196
26965: LD_INT 3
26967: DOUBLE
26968: EQUAL
26969: IFTRUE 26973
26971: GO 27195
26973: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
26974: LD_ADDR_VAR 0 4
26978: PUSH
26979: LD_INT 46
26981: PUSH
26982: LD_INT 47
26984: PUSH
26985: LD_INT 1
26987: PUSH
26988: LD_INT 2
26990: PUSH
26991: LD_INT 82
26993: PUSH
26994: LD_INT 83
26996: PUSH
26997: LD_INT 84
26999: PUSH
27000: LD_INT 85
27002: PUSH
27003: LD_INT 86
27005: PUSH
27006: LD_INT 11
27008: PUSH
27009: LD_INT 9
27011: PUSH
27012: LD_INT 20
27014: PUSH
27015: LD_INT 19
27017: PUSH
27018: LD_INT 21
27020: PUSH
27021: LD_INT 24
27023: PUSH
27024: LD_INT 22
27026: PUSH
27027: LD_INT 25
27029: PUSH
27030: LD_INT 28
27032: PUSH
27033: LD_INT 29
27035: PUSH
27036: LD_INT 30
27038: PUSH
27039: LD_INT 31
27041: PUSH
27042: LD_INT 37
27044: PUSH
27045: LD_INT 38
27047: PUSH
27048: LD_INT 32
27050: PUSH
27051: LD_INT 27
27053: PUSH
27054: LD_INT 33
27056: PUSH
27057: LD_INT 69
27059: PUSH
27060: LD_INT 39
27062: PUSH
27063: LD_INT 34
27065: PUSH
27066: LD_INT 40
27068: PUSH
27069: LD_INT 71
27071: PUSH
27072: LD_INT 23
27074: PUSH
27075: LD_INT 44
27077: PUSH
27078: LD_INT 48
27080: PUSH
27081: LD_INT 49
27083: PUSH
27084: LD_INT 50
27086: PUSH
27087: LD_INT 51
27089: PUSH
27090: LD_INT 52
27092: PUSH
27093: LD_INT 53
27095: PUSH
27096: LD_INT 54
27098: PUSH
27099: LD_INT 55
27101: PUSH
27102: LD_INT 56
27104: PUSH
27105: LD_INT 57
27107: PUSH
27108: LD_INT 58
27110: PUSH
27111: LD_INT 59
27113: PUSH
27114: LD_INT 63
27116: PUSH
27117: LD_INT 64
27119: PUSH
27120: LD_INT 65
27122: PUSH
27123: LD_INT 82
27125: PUSH
27126: LD_INT 83
27128: PUSH
27129: LD_INT 84
27131: PUSH
27132: LD_INT 85
27134: PUSH
27135: LD_INT 86
27137: PUSH
27138: EMPTY
27139: LIST
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: LIST
27152: LIST
27153: LIST
27154: LIST
27155: LIST
27156: LIST
27157: LIST
27158: LIST
27159: LIST
27160: LIST
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: LIST
27171: LIST
27172: LIST
27173: LIST
27174: LIST
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: LIST
27189: LIST
27190: LIST
27191: LIST
27192: ST_TO_ADDR
27193: GO 27196
27195: POP
// if state > - 1 and state < 3 then
27196: LD_VAR 0 3
27200: PUSH
27201: LD_INT 1
27203: NEG
27204: GREATER
27205: PUSH
27206: LD_VAR 0 3
27210: PUSH
27211: LD_INT 3
27213: LESS
27214: AND
27215: IFFALSE 27272
// for i in result do
27217: LD_ADDR_VAR 0 5
27221: PUSH
27222: LD_VAR 0 4
27226: PUSH
27227: FOR_IN
27228: IFFALSE 27270
// if GetTech ( i , side ) <> state then
27230: LD_VAR 0 5
27234: PPUSH
27235: LD_VAR 0 1
27239: PPUSH
27240: CALL_OW 321
27244: PUSH
27245: LD_VAR 0 3
27249: NONEQUAL
27250: IFFALSE 27268
// result := result diff i ;
27252: LD_ADDR_VAR 0 4
27256: PUSH
27257: LD_VAR 0 4
27261: PUSH
27262: LD_VAR 0 5
27266: DIFF
27267: ST_TO_ADDR
27268: GO 27227
27270: POP
27271: POP
// end ;
27272: LD_VAR 0 4
27276: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
27277: LD_INT 0
27279: PPUSH
27280: PPUSH
27281: PPUSH
// result := true ;
27282: LD_ADDR_VAR 0 3
27286: PUSH
27287: LD_INT 1
27289: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
27290: LD_ADDR_VAR 0 5
27294: PUSH
27295: LD_VAR 0 2
27299: PPUSH
27300: CALL_OW 480
27304: ST_TO_ADDR
// if not tmp then
27305: LD_VAR 0 5
27309: NOT
27310: IFFALSE 27314
// exit ;
27312: GO 27363
// for i in tmp do
27314: LD_ADDR_VAR 0 4
27318: PUSH
27319: LD_VAR 0 5
27323: PUSH
27324: FOR_IN
27325: IFFALSE 27361
// if GetTech ( i , side ) <> state_researched then
27327: LD_VAR 0 4
27331: PPUSH
27332: LD_VAR 0 1
27336: PPUSH
27337: CALL_OW 321
27341: PUSH
27342: LD_INT 2
27344: NONEQUAL
27345: IFFALSE 27359
// begin result := false ;
27347: LD_ADDR_VAR 0 3
27351: PUSH
27352: LD_INT 0
27354: ST_TO_ADDR
// exit ;
27355: POP
27356: POP
27357: GO 27363
// end ;
27359: GO 27324
27361: POP
27362: POP
// end ;
27363: LD_VAR 0 3
27367: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
27368: LD_INT 0
27370: PPUSH
27371: PPUSH
27372: PPUSH
27373: PPUSH
27374: PPUSH
27375: PPUSH
27376: PPUSH
27377: PPUSH
27378: PPUSH
27379: PPUSH
27380: PPUSH
27381: PPUSH
27382: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
27383: LD_VAR 0 1
27387: NOT
27388: PUSH
27389: LD_VAR 0 1
27393: PPUSH
27394: CALL_OW 257
27398: PUSH
27399: LD_INT 9
27401: NONEQUAL
27402: OR
27403: IFFALSE 27407
// exit ;
27405: GO 27980
// side := GetSide ( unit ) ;
27407: LD_ADDR_VAR 0 9
27411: PUSH
27412: LD_VAR 0 1
27416: PPUSH
27417: CALL_OW 255
27421: ST_TO_ADDR
// tech_space := tech_spacanom ;
27422: LD_ADDR_VAR 0 12
27426: PUSH
27427: LD_INT 29
27429: ST_TO_ADDR
// tech_time := tech_taurad ;
27430: LD_ADDR_VAR 0 13
27434: PUSH
27435: LD_INT 28
27437: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
27438: LD_ADDR_VAR 0 11
27442: PUSH
27443: LD_VAR 0 1
27447: PPUSH
27448: CALL_OW 310
27452: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
27453: LD_VAR 0 11
27457: PPUSH
27458: CALL_OW 247
27462: PUSH
27463: LD_INT 2
27465: EQUAL
27466: IFFALSE 27470
// exit ;
27468: GO 27980
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27470: LD_ADDR_VAR 0 8
27474: PUSH
27475: LD_INT 81
27477: PUSH
27478: LD_VAR 0 9
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: PUSH
27487: LD_INT 3
27489: PUSH
27490: LD_INT 21
27492: PUSH
27493: LD_INT 3
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: PUSH
27504: EMPTY
27505: LIST
27506: LIST
27507: PPUSH
27508: CALL_OW 69
27512: ST_TO_ADDR
// if not tmp then
27513: LD_VAR 0 8
27517: NOT
27518: IFFALSE 27522
// exit ;
27520: GO 27980
// if in_unit then
27522: LD_VAR 0 11
27526: IFFALSE 27550
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
27528: LD_ADDR_VAR 0 10
27532: PUSH
27533: LD_VAR 0 8
27537: PPUSH
27538: LD_VAR 0 11
27542: PPUSH
27543: CALL_OW 74
27547: ST_TO_ADDR
27548: GO 27570
// enemy := NearestUnitToUnit ( tmp , unit ) ;
27550: LD_ADDR_VAR 0 10
27554: PUSH
27555: LD_VAR 0 8
27559: PPUSH
27560: LD_VAR 0 1
27564: PPUSH
27565: CALL_OW 74
27569: ST_TO_ADDR
// if not enemy then
27570: LD_VAR 0 10
27574: NOT
27575: IFFALSE 27579
// exit ;
27577: GO 27980
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
27579: LD_VAR 0 11
27583: PUSH
27584: LD_VAR 0 11
27588: PPUSH
27589: LD_VAR 0 10
27593: PPUSH
27594: CALL_OW 296
27598: PUSH
27599: LD_INT 13
27601: GREATER
27602: AND
27603: PUSH
27604: LD_VAR 0 1
27608: PPUSH
27609: LD_VAR 0 10
27613: PPUSH
27614: CALL_OW 296
27618: PUSH
27619: LD_INT 12
27621: GREATER
27622: OR
27623: IFFALSE 27627
// exit ;
27625: GO 27980
// missile := [ 1 ] ;
27627: LD_ADDR_VAR 0 14
27631: PUSH
27632: LD_INT 1
27634: PUSH
27635: EMPTY
27636: LIST
27637: ST_TO_ADDR
// if Researched ( side , tech_space ) then
27638: LD_VAR 0 9
27642: PPUSH
27643: LD_VAR 0 12
27647: PPUSH
27648: CALL_OW 325
27652: IFFALSE 27681
// missile := Replace ( missile , missile + 1 , 2 ) ;
27654: LD_ADDR_VAR 0 14
27658: PUSH
27659: LD_VAR 0 14
27663: PPUSH
27664: LD_VAR 0 14
27668: PUSH
27669: LD_INT 1
27671: PLUS
27672: PPUSH
27673: LD_INT 2
27675: PPUSH
27676: CALL_OW 1
27680: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
27681: LD_VAR 0 9
27685: PPUSH
27686: LD_VAR 0 13
27690: PPUSH
27691: CALL_OW 325
27695: PUSH
27696: LD_VAR 0 10
27700: PPUSH
27701: CALL_OW 255
27705: PPUSH
27706: LD_VAR 0 13
27710: PPUSH
27711: CALL_OW 325
27715: NOT
27716: AND
27717: IFFALSE 27746
// missile := Replace ( missile , missile + 1 , 3 ) ;
27719: LD_ADDR_VAR 0 14
27723: PUSH
27724: LD_VAR 0 14
27728: PPUSH
27729: LD_VAR 0 14
27733: PUSH
27734: LD_INT 1
27736: PLUS
27737: PPUSH
27738: LD_INT 3
27740: PPUSH
27741: CALL_OW 1
27745: ST_TO_ADDR
// if missile < 2 then
27746: LD_VAR 0 14
27750: PUSH
27751: LD_INT 2
27753: LESS
27754: IFFALSE 27758
// exit ;
27756: GO 27980
// x := GetX ( enemy ) ;
27758: LD_ADDR_VAR 0 4
27762: PUSH
27763: LD_VAR 0 10
27767: PPUSH
27768: CALL_OW 250
27772: ST_TO_ADDR
// y := GetY ( enemy ) ;
27773: LD_ADDR_VAR 0 5
27777: PUSH
27778: LD_VAR 0 10
27782: PPUSH
27783: CALL_OW 251
27787: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
27788: LD_ADDR_VAR 0 6
27792: PUSH
27793: LD_VAR 0 4
27797: PUSH
27798: LD_INT 1
27800: NEG
27801: PPUSH
27802: LD_INT 1
27804: PPUSH
27805: CALL_OW 12
27809: PLUS
27810: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
27811: LD_ADDR_VAR 0 7
27815: PUSH
27816: LD_VAR 0 5
27820: PUSH
27821: LD_INT 1
27823: NEG
27824: PPUSH
27825: LD_INT 1
27827: PPUSH
27828: CALL_OW 12
27832: PLUS
27833: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27834: LD_VAR 0 6
27838: PPUSH
27839: LD_VAR 0 7
27843: PPUSH
27844: CALL_OW 488
27848: NOT
27849: IFFALSE 27871
// begin _x := x ;
27851: LD_ADDR_VAR 0 6
27855: PUSH
27856: LD_VAR 0 4
27860: ST_TO_ADDR
// _y := y ;
27861: LD_ADDR_VAR 0 7
27865: PUSH
27866: LD_VAR 0 5
27870: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
27871: LD_ADDR_VAR 0 3
27875: PUSH
27876: LD_INT 1
27878: PPUSH
27879: LD_VAR 0 14
27883: PPUSH
27884: CALL_OW 12
27888: ST_TO_ADDR
// case i of 1 :
27889: LD_VAR 0 3
27893: PUSH
27894: LD_INT 1
27896: DOUBLE
27897: EQUAL
27898: IFTRUE 27902
27900: GO 27919
27902: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
27903: LD_VAR 0 1
27907: PPUSH
27908: LD_VAR 0 10
27912: PPUSH
27913: CALL_OW 115
27917: GO 27980
27919: LD_INT 2
27921: DOUBLE
27922: EQUAL
27923: IFTRUE 27927
27925: GO 27949
27927: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
27928: LD_VAR 0 1
27932: PPUSH
27933: LD_VAR 0 6
27937: PPUSH
27938: LD_VAR 0 7
27942: PPUSH
27943: CALL_OW 153
27947: GO 27980
27949: LD_INT 3
27951: DOUBLE
27952: EQUAL
27953: IFTRUE 27957
27955: GO 27979
27957: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
27958: LD_VAR 0 1
27962: PPUSH
27963: LD_VAR 0 6
27967: PPUSH
27968: LD_VAR 0 7
27972: PPUSH
27973: CALL_OW 154
27977: GO 27980
27979: POP
// end ;
27980: LD_VAR 0 2
27984: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
27985: LD_INT 0
27987: PPUSH
27988: PPUSH
27989: PPUSH
27990: PPUSH
27991: PPUSH
27992: PPUSH
// if not unit or not building then
27993: LD_VAR 0 1
27997: NOT
27998: PUSH
27999: LD_VAR 0 2
28003: NOT
28004: OR
28005: IFFALSE 28009
// exit ;
28007: GO 28167
// x := GetX ( building ) ;
28009: LD_ADDR_VAR 0 5
28013: PUSH
28014: LD_VAR 0 2
28018: PPUSH
28019: CALL_OW 250
28023: ST_TO_ADDR
// y := GetY ( building ) ;
28024: LD_ADDR_VAR 0 6
28028: PUSH
28029: LD_VAR 0 2
28033: PPUSH
28034: CALL_OW 251
28038: ST_TO_ADDR
// for i = 0 to 5 do
28039: LD_ADDR_VAR 0 4
28043: PUSH
28044: DOUBLE
28045: LD_INT 0
28047: DEC
28048: ST_TO_ADDR
28049: LD_INT 5
28051: PUSH
28052: FOR_TO
28053: IFFALSE 28165
// begin _x := ShiftX ( x , i , 3 ) ;
28055: LD_ADDR_VAR 0 7
28059: PUSH
28060: LD_VAR 0 5
28064: PPUSH
28065: LD_VAR 0 4
28069: PPUSH
28070: LD_INT 3
28072: PPUSH
28073: CALL_OW 272
28077: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28078: LD_ADDR_VAR 0 8
28082: PUSH
28083: LD_VAR 0 6
28087: PPUSH
28088: LD_VAR 0 4
28092: PPUSH
28093: LD_INT 3
28095: PPUSH
28096: CALL_OW 273
28100: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28101: LD_VAR 0 7
28105: PPUSH
28106: LD_VAR 0 8
28110: PPUSH
28111: CALL_OW 488
28115: NOT
28116: IFFALSE 28120
// continue ;
28118: GO 28052
// if HexInfo ( _x , _y ) = 0 then
28120: LD_VAR 0 7
28124: PPUSH
28125: LD_VAR 0 8
28129: PPUSH
28130: CALL_OW 428
28134: PUSH
28135: LD_INT 0
28137: EQUAL
28138: IFFALSE 28163
// begin ComMoveXY ( unit , _x , _y ) ;
28140: LD_VAR 0 1
28144: PPUSH
28145: LD_VAR 0 7
28149: PPUSH
28150: LD_VAR 0 8
28154: PPUSH
28155: CALL_OW 111
// exit ;
28159: POP
28160: POP
28161: GO 28167
// end ; end ;
28163: GO 28052
28165: POP
28166: POP
// end ;
28167: LD_VAR 0 3
28171: RET
// export function ScanBase ( side , base_area ) ; begin
28172: LD_INT 0
28174: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28175: LD_ADDR_VAR 0 3
28179: PUSH
28180: LD_VAR 0 2
28184: PPUSH
28185: LD_INT 81
28187: PUSH
28188: LD_VAR 0 1
28192: PUSH
28193: EMPTY
28194: LIST
28195: LIST
28196: PPUSH
28197: CALL_OW 70
28201: ST_TO_ADDR
// end ;
28202: LD_VAR 0 3
28206: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28207: LD_INT 0
28209: PPUSH
28210: PPUSH
28211: PPUSH
28212: PPUSH
// result := false ;
28213: LD_ADDR_VAR 0 2
28217: PUSH
28218: LD_INT 0
28220: ST_TO_ADDR
// side := GetSide ( unit ) ;
28221: LD_ADDR_VAR 0 3
28225: PUSH
28226: LD_VAR 0 1
28230: PPUSH
28231: CALL_OW 255
28235: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28236: LD_ADDR_VAR 0 4
28240: PUSH
28241: LD_VAR 0 1
28245: PPUSH
28246: CALL_OW 248
28250: ST_TO_ADDR
// case nat of 1 :
28251: LD_VAR 0 4
28255: PUSH
28256: LD_INT 1
28258: DOUBLE
28259: EQUAL
28260: IFTRUE 28264
28262: GO 28275
28264: POP
// tech := tech_lassight ; 2 :
28265: LD_ADDR_VAR 0 5
28269: PUSH
28270: LD_INT 12
28272: ST_TO_ADDR
28273: GO 28314
28275: LD_INT 2
28277: DOUBLE
28278: EQUAL
28279: IFTRUE 28283
28281: GO 28294
28283: POP
// tech := tech_mortar ; 3 :
28284: LD_ADDR_VAR 0 5
28288: PUSH
28289: LD_INT 41
28291: ST_TO_ADDR
28292: GO 28314
28294: LD_INT 3
28296: DOUBLE
28297: EQUAL
28298: IFTRUE 28302
28300: GO 28313
28302: POP
// tech := tech_bazooka ; end ;
28303: LD_ADDR_VAR 0 5
28307: PUSH
28308: LD_INT 44
28310: ST_TO_ADDR
28311: GO 28314
28313: POP
// if Researched ( side , tech ) then
28314: LD_VAR 0 3
28318: PPUSH
28319: LD_VAR 0 5
28323: PPUSH
28324: CALL_OW 325
28328: IFFALSE 28355
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
28330: LD_ADDR_VAR 0 2
28334: PUSH
28335: LD_INT 5
28337: PUSH
28338: LD_INT 8
28340: PUSH
28341: LD_INT 9
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: LIST
28348: PUSH
28349: LD_VAR 0 4
28353: ARRAY
28354: ST_TO_ADDR
// end ;
28355: LD_VAR 0 2
28359: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
28360: LD_INT 0
28362: PPUSH
28363: PPUSH
28364: PPUSH
// if not mines then
28365: LD_VAR 0 2
28369: NOT
28370: IFFALSE 28374
// exit ;
28372: GO 28518
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28374: LD_ADDR_VAR 0 5
28378: PUSH
28379: LD_INT 81
28381: PUSH
28382: LD_VAR 0 1
28386: PUSH
28387: EMPTY
28388: LIST
28389: LIST
28390: PUSH
28391: LD_INT 3
28393: PUSH
28394: LD_INT 21
28396: PUSH
28397: LD_INT 3
28399: PUSH
28400: EMPTY
28401: LIST
28402: LIST
28403: PUSH
28404: EMPTY
28405: LIST
28406: LIST
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: PPUSH
28412: CALL_OW 69
28416: ST_TO_ADDR
// for i in mines do
28417: LD_ADDR_VAR 0 4
28421: PUSH
28422: LD_VAR 0 2
28426: PUSH
28427: FOR_IN
28428: IFFALSE 28516
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
28430: LD_VAR 0 4
28434: PUSH
28435: LD_INT 1
28437: ARRAY
28438: PPUSH
28439: LD_VAR 0 4
28443: PUSH
28444: LD_INT 2
28446: ARRAY
28447: PPUSH
28448: CALL_OW 458
28452: NOT
28453: IFFALSE 28457
// continue ;
28455: GO 28427
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
28457: LD_VAR 0 4
28461: PUSH
28462: LD_INT 1
28464: ARRAY
28465: PPUSH
28466: LD_VAR 0 4
28470: PUSH
28471: LD_INT 2
28473: ARRAY
28474: PPUSH
28475: CALL_OW 428
28479: PUSH
28480: LD_VAR 0 5
28484: IN
28485: IFFALSE 28514
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
28487: LD_VAR 0 4
28491: PUSH
28492: LD_INT 1
28494: ARRAY
28495: PPUSH
28496: LD_VAR 0 4
28500: PUSH
28501: LD_INT 2
28503: ARRAY
28504: PPUSH
28505: LD_VAR 0 1
28509: PPUSH
28510: CALL_OW 456
// end ;
28514: GO 28427
28516: POP
28517: POP
// end ;
28518: LD_VAR 0 3
28522: RET
// export function Count ( array ) ; var i ; begin
28523: LD_INT 0
28525: PPUSH
28526: PPUSH
// result := 0 ;
28527: LD_ADDR_VAR 0 2
28531: PUSH
28532: LD_INT 0
28534: ST_TO_ADDR
// for i in array do
28535: LD_ADDR_VAR 0 3
28539: PUSH
28540: LD_VAR 0 1
28544: PUSH
28545: FOR_IN
28546: IFFALSE 28570
// if i then
28548: LD_VAR 0 3
28552: IFFALSE 28568
// result := result + 1 ;
28554: LD_ADDR_VAR 0 2
28558: PUSH
28559: LD_VAR 0 2
28563: PUSH
28564: LD_INT 1
28566: PLUS
28567: ST_TO_ADDR
28568: GO 28545
28570: POP
28571: POP
// end ;
28572: LD_VAR 0 2
28576: RET
// export function IsEmpty ( building ) ; begin
28577: LD_INT 0
28579: PPUSH
// if not building then
28580: LD_VAR 0 1
28584: NOT
28585: IFFALSE 28589
// exit ;
28587: GO 28632
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
28589: LD_ADDR_VAR 0 2
28593: PUSH
28594: LD_VAR 0 1
28598: PUSH
28599: LD_INT 22
28601: PUSH
28602: LD_VAR 0 1
28606: PPUSH
28607: CALL_OW 255
28611: PUSH
28612: EMPTY
28613: LIST
28614: LIST
28615: PUSH
28616: LD_INT 58
28618: PUSH
28619: EMPTY
28620: LIST
28621: PUSH
28622: EMPTY
28623: LIST
28624: LIST
28625: PPUSH
28626: CALL_OW 69
28630: IN
28631: ST_TO_ADDR
// end ;
28632: LD_VAR 0 2
28636: RET
// export function IsNotFull ( building ) ; var places ; begin
28637: LD_INT 0
28639: PPUSH
28640: PPUSH
// if not building then
28641: LD_VAR 0 1
28645: NOT
28646: IFFALSE 28650
// exit ;
28648: GO 28821
// result := false ;
28650: LD_ADDR_VAR 0 2
28654: PUSH
28655: LD_INT 0
28657: ST_TO_ADDR
// places := 0 ;
28658: LD_ADDR_VAR 0 3
28662: PUSH
28663: LD_INT 0
28665: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
28666: LD_VAR 0 1
28670: PPUSH
28671: CALL_OW 266
28675: PUSH
28676: LD_INT 0
28678: DOUBLE
28679: EQUAL
28680: IFTRUE 28738
28682: LD_INT 1
28684: DOUBLE
28685: EQUAL
28686: IFTRUE 28738
28688: LD_INT 6
28690: DOUBLE
28691: EQUAL
28692: IFTRUE 28738
28694: LD_INT 7
28696: DOUBLE
28697: EQUAL
28698: IFTRUE 28738
28700: LD_INT 8
28702: DOUBLE
28703: EQUAL
28704: IFTRUE 28738
28706: LD_INT 4
28708: DOUBLE
28709: EQUAL
28710: IFTRUE 28738
28712: LD_INT 5
28714: DOUBLE
28715: EQUAL
28716: IFTRUE 28738
28718: LD_INT 2
28720: DOUBLE
28721: EQUAL
28722: IFTRUE 28738
28724: LD_INT 3
28726: DOUBLE
28727: EQUAL
28728: IFTRUE 28738
28730: LD_INT 35
28732: DOUBLE
28733: EQUAL
28734: IFTRUE 28738
28736: GO 28749
28738: POP
// places := 6 ; b_bunker , b_breastwork :
28739: LD_ADDR_VAR 0 3
28743: PUSH
28744: LD_INT 6
28746: ST_TO_ADDR
28747: GO 28794
28749: LD_INT 32
28751: DOUBLE
28752: EQUAL
28753: IFTRUE 28763
28755: LD_INT 31
28757: DOUBLE
28758: EQUAL
28759: IFTRUE 28763
28761: GO 28774
28763: POP
// places := 1 ; b_control_tower :
28764: LD_ADDR_VAR 0 3
28768: PUSH
28769: LD_INT 1
28771: ST_TO_ADDR
28772: GO 28794
28774: LD_INT 36
28776: DOUBLE
28777: EQUAL
28778: IFTRUE 28782
28780: GO 28793
28782: POP
// places := 3 ; end ;
28783: LD_ADDR_VAR 0 3
28787: PUSH
28788: LD_INT 3
28790: ST_TO_ADDR
28791: GO 28794
28793: POP
// if places then
28794: LD_VAR 0 3
28798: IFFALSE 28821
// result := UnitsInside ( building ) < places ;
28800: LD_ADDR_VAR 0 2
28804: PUSH
28805: LD_VAR 0 1
28809: PPUSH
28810: CALL_OW 313
28814: PUSH
28815: LD_VAR 0 3
28819: LESS
28820: ST_TO_ADDR
// end ;
28821: LD_VAR 0 2
28825: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
28826: LD_INT 0
28828: PPUSH
28829: PPUSH
28830: PPUSH
28831: PPUSH
// tmp := [ ] ;
28832: LD_ADDR_VAR 0 3
28836: PUSH
28837: EMPTY
28838: ST_TO_ADDR
// list := [ ] ;
28839: LD_ADDR_VAR 0 5
28843: PUSH
28844: EMPTY
28845: ST_TO_ADDR
// for i = 16 to 25 do
28846: LD_ADDR_VAR 0 4
28850: PUSH
28851: DOUBLE
28852: LD_INT 16
28854: DEC
28855: ST_TO_ADDR
28856: LD_INT 25
28858: PUSH
28859: FOR_TO
28860: IFFALSE 28933
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
28862: LD_ADDR_VAR 0 3
28866: PUSH
28867: LD_VAR 0 3
28871: PUSH
28872: LD_INT 22
28874: PUSH
28875: LD_VAR 0 1
28879: PPUSH
28880: CALL_OW 255
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: PUSH
28889: LD_INT 91
28891: PUSH
28892: LD_VAR 0 1
28896: PUSH
28897: LD_INT 6
28899: PUSH
28900: EMPTY
28901: LIST
28902: LIST
28903: LIST
28904: PUSH
28905: LD_INT 30
28907: PUSH
28908: LD_VAR 0 4
28912: PUSH
28913: EMPTY
28914: LIST
28915: LIST
28916: PUSH
28917: EMPTY
28918: LIST
28919: LIST
28920: LIST
28921: PUSH
28922: EMPTY
28923: LIST
28924: PPUSH
28925: CALL_OW 69
28929: ADD
28930: ST_TO_ADDR
28931: GO 28859
28933: POP
28934: POP
// for i = 1 to tmp do
28935: LD_ADDR_VAR 0 4
28939: PUSH
28940: DOUBLE
28941: LD_INT 1
28943: DEC
28944: ST_TO_ADDR
28945: LD_VAR 0 3
28949: PUSH
28950: FOR_TO
28951: IFFALSE 29039
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
28953: LD_ADDR_VAR 0 5
28957: PUSH
28958: LD_VAR 0 5
28962: PUSH
28963: LD_VAR 0 3
28967: PUSH
28968: LD_VAR 0 4
28972: ARRAY
28973: PPUSH
28974: CALL_OW 266
28978: PUSH
28979: LD_VAR 0 3
28983: PUSH
28984: LD_VAR 0 4
28988: ARRAY
28989: PPUSH
28990: CALL_OW 250
28994: PUSH
28995: LD_VAR 0 3
28999: PUSH
29000: LD_VAR 0 4
29004: ARRAY
29005: PPUSH
29006: CALL_OW 251
29010: PUSH
29011: LD_VAR 0 3
29015: PUSH
29016: LD_VAR 0 4
29020: ARRAY
29021: PPUSH
29022: CALL_OW 254
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: LIST
29031: LIST
29032: PUSH
29033: EMPTY
29034: LIST
29035: ADD
29036: ST_TO_ADDR
29037: GO 28950
29039: POP
29040: POP
// result := list ;
29041: LD_ADDR_VAR 0 2
29045: PUSH
29046: LD_VAR 0 5
29050: ST_TO_ADDR
// end ;
29051: LD_VAR 0 2
29055: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29056: LD_INT 0
29058: PPUSH
29059: PPUSH
29060: PPUSH
29061: PPUSH
29062: PPUSH
29063: PPUSH
29064: PPUSH
// if not factory then
29065: LD_VAR 0 1
29069: NOT
29070: IFFALSE 29074
// exit ;
29072: GO 29667
// if control = control_apeman then
29074: LD_VAR 0 4
29078: PUSH
29079: LD_INT 5
29081: EQUAL
29082: IFFALSE 29191
// begin tmp := UnitsInside ( factory ) ;
29084: LD_ADDR_VAR 0 8
29088: PUSH
29089: LD_VAR 0 1
29093: PPUSH
29094: CALL_OW 313
29098: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29099: LD_VAR 0 8
29103: PPUSH
29104: LD_INT 25
29106: PUSH
29107: LD_INT 12
29109: PUSH
29110: EMPTY
29111: LIST
29112: LIST
29113: PPUSH
29114: CALL_OW 72
29118: NOT
29119: IFFALSE 29129
// control := control_manual ;
29121: LD_ADDR_VAR 0 4
29125: PUSH
29126: LD_INT 1
29128: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29129: LD_ADDR_VAR 0 8
29133: PUSH
29134: LD_VAR 0 1
29138: PPUSH
29139: CALL 28826 0 1
29143: ST_TO_ADDR
// if tmp then
29144: LD_VAR 0 8
29148: IFFALSE 29191
// begin for i in tmp do
29150: LD_ADDR_VAR 0 7
29154: PUSH
29155: LD_VAR 0 8
29159: PUSH
29160: FOR_IN
29161: IFFALSE 29189
// if i [ 1 ] = b_ext_radio then
29163: LD_VAR 0 7
29167: PUSH
29168: LD_INT 1
29170: ARRAY
29171: PUSH
29172: LD_INT 22
29174: EQUAL
29175: IFFALSE 29187
// begin control := control_remote ;
29177: LD_ADDR_VAR 0 4
29181: PUSH
29182: LD_INT 2
29184: ST_TO_ADDR
// break ;
29185: GO 29189
// end ;
29187: GO 29160
29189: POP
29190: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29191: LD_VAR 0 1
29195: PPUSH
29196: LD_VAR 0 2
29200: PPUSH
29201: LD_VAR 0 3
29205: PPUSH
29206: LD_VAR 0 4
29210: PPUSH
29211: LD_VAR 0 5
29215: PPUSH
29216: CALL_OW 448
29220: IFFALSE 29255
// begin result := [ chassis , engine , control , weapon ] ;
29222: LD_ADDR_VAR 0 6
29226: PUSH
29227: LD_VAR 0 2
29231: PUSH
29232: LD_VAR 0 3
29236: PUSH
29237: LD_VAR 0 4
29241: PUSH
29242: LD_VAR 0 5
29246: PUSH
29247: EMPTY
29248: LIST
29249: LIST
29250: LIST
29251: LIST
29252: ST_TO_ADDR
// exit ;
29253: GO 29667
// end ; _chassis := AvailableChassisList ( factory ) ;
29255: LD_ADDR_VAR 0 9
29259: PUSH
29260: LD_VAR 0 1
29264: PPUSH
29265: CALL_OW 475
29269: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29270: LD_ADDR_VAR 0 11
29274: PUSH
29275: LD_VAR 0 1
29279: PPUSH
29280: CALL_OW 476
29284: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29285: LD_ADDR_VAR 0 12
29289: PUSH
29290: LD_VAR 0 1
29294: PPUSH
29295: CALL_OW 477
29299: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29300: LD_ADDR_VAR 0 10
29304: PUSH
29305: LD_VAR 0 1
29309: PPUSH
29310: CALL_OW 478
29314: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29315: LD_VAR 0 9
29319: NOT
29320: PUSH
29321: LD_VAR 0 11
29325: NOT
29326: OR
29327: PUSH
29328: LD_VAR 0 12
29332: NOT
29333: OR
29334: PUSH
29335: LD_VAR 0 10
29339: NOT
29340: OR
29341: IFFALSE 29376
// begin result := [ chassis , engine , control , weapon ] ;
29343: LD_ADDR_VAR 0 6
29347: PUSH
29348: LD_VAR 0 2
29352: PUSH
29353: LD_VAR 0 3
29357: PUSH
29358: LD_VAR 0 4
29362: PUSH
29363: LD_VAR 0 5
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: LIST
29372: LIST
29373: ST_TO_ADDR
// exit ;
29374: GO 29667
// end ; if not chassis in _chassis then
29376: LD_VAR 0 2
29380: PUSH
29381: LD_VAR 0 9
29385: IN
29386: NOT
29387: IFFALSE 29413
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29389: LD_ADDR_VAR 0 2
29393: PUSH
29394: LD_VAR 0 9
29398: PUSH
29399: LD_INT 1
29401: PPUSH
29402: LD_VAR 0 9
29406: PPUSH
29407: CALL_OW 12
29411: ARRAY
29412: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29413: LD_VAR 0 2
29417: PPUSH
29418: LD_VAR 0 3
29422: PPUSH
29423: CALL 29672 0 2
29427: NOT
29428: IFFALSE 29487
// repeat engine := _engine [ 1 ] ;
29430: LD_ADDR_VAR 0 3
29434: PUSH
29435: LD_VAR 0 11
29439: PUSH
29440: LD_INT 1
29442: ARRAY
29443: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
29444: LD_ADDR_VAR 0 11
29448: PUSH
29449: LD_VAR 0 11
29453: PPUSH
29454: LD_INT 1
29456: PPUSH
29457: CALL_OW 3
29461: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
29462: LD_VAR 0 2
29466: PPUSH
29467: LD_VAR 0 3
29471: PPUSH
29472: CALL 29672 0 2
29476: PUSH
29477: LD_VAR 0 11
29481: PUSH
29482: EMPTY
29483: EQUAL
29484: OR
29485: IFFALSE 29430
// if not control in _control then
29487: LD_VAR 0 4
29491: PUSH
29492: LD_VAR 0 12
29496: IN
29497: NOT
29498: IFFALSE 29524
// control := _control [ rand ( 1 , _control ) ] ;
29500: LD_ADDR_VAR 0 4
29504: PUSH
29505: LD_VAR 0 12
29509: PUSH
29510: LD_INT 1
29512: PPUSH
29513: LD_VAR 0 12
29517: PPUSH
29518: CALL_OW 12
29522: ARRAY
29523: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
29524: LD_VAR 0 2
29528: PPUSH
29529: LD_VAR 0 5
29533: PPUSH
29534: CALL 29892 0 2
29538: NOT
29539: IFFALSE 29598
// repeat weapon := _weapon [ 1 ] ;
29541: LD_ADDR_VAR 0 5
29545: PUSH
29546: LD_VAR 0 10
29550: PUSH
29551: LD_INT 1
29553: ARRAY
29554: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
29555: LD_ADDR_VAR 0 10
29559: PUSH
29560: LD_VAR 0 10
29564: PPUSH
29565: LD_INT 1
29567: PPUSH
29568: CALL_OW 3
29572: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
29573: LD_VAR 0 2
29577: PPUSH
29578: LD_VAR 0 5
29582: PPUSH
29583: CALL 29892 0 2
29587: PUSH
29588: LD_VAR 0 10
29592: PUSH
29593: EMPTY
29594: EQUAL
29595: OR
29596: IFFALSE 29541
// result := [ ] ;
29598: LD_ADDR_VAR 0 6
29602: PUSH
29603: EMPTY
29604: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29605: LD_VAR 0 1
29609: PPUSH
29610: LD_VAR 0 2
29614: PPUSH
29615: LD_VAR 0 3
29619: PPUSH
29620: LD_VAR 0 4
29624: PPUSH
29625: LD_VAR 0 5
29629: PPUSH
29630: CALL_OW 448
29634: IFFALSE 29667
// result := [ chassis , engine , control , weapon ] ;
29636: LD_ADDR_VAR 0 6
29640: PUSH
29641: LD_VAR 0 2
29645: PUSH
29646: LD_VAR 0 3
29650: PUSH
29651: LD_VAR 0 4
29655: PUSH
29656: LD_VAR 0 5
29660: PUSH
29661: EMPTY
29662: LIST
29663: LIST
29664: LIST
29665: LIST
29666: ST_TO_ADDR
// end ;
29667: LD_VAR 0 6
29671: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
29672: LD_INT 0
29674: PPUSH
// if not chassis or not engine then
29675: LD_VAR 0 1
29679: NOT
29680: PUSH
29681: LD_VAR 0 2
29685: NOT
29686: OR
29687: IFFALSE 29691
// exit ;
29689: GO 29887
// case engine of engine_solar :
29691: LD_VAR 0 2
29695: PUSH
29696: LD_INT 2
29698: DOUBLE
29699: EQUAL
29700: IFTRUE 29704
29702: GO 29742
29704: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
29705: LD_ADDR_VAR 0 3
29709: PUSH
29710: LD_INT 11
29712: PUSH
29713: LD_INT 12
29715: PUSH
29716: LD_INT 13
29718: PUSH
29719: LD_INT 14
29721: PUSH
29722: LD_INT 1
29724: PUSH
29725: LD_INT 2
29727: PUSH
29728: LD_INT 3
29730: PUSH
29731: EMPTY
29732: LIST
29733: LIST
29734: LIST
29735: LIST
29736: LIST
29737: LIST
29738: LIST
29739: ST_TO_ADDR
29740: GO 29871
29742: LD_INT 1
29744: DOUBLE
29745: EQUAL
29746: IFTRUE 29750
29748: GO 29812
29750: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
29751: LD_ADDR_VAR 0 3
29755: PUSH
29756: LD_INT 11
29758: PUSH
29759: LD_INT 12
29761: PUSH
29762: LD_INT 13
29764: PUSH
29765: LD_INT 14
29767: PUSH
29768: LD_INT 1
29770: PUSH
29771: LD_INT 2
29773: PUSH
29774: LD_INT 3
29776: PUSH
29777: LD_INT 4
29779: PUSH
29780: LD_INT 5
29782: PUSH
29783: LD_INT 21
29785: PUSH
29786: LD_INT 23
29788: PUSH
29789: LD_INT 22
29791: PUSH
29792: LD_INT 24
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: LIST
29799: LIST
29800: LIST
29801: LIST
29802: LIST
29803: LIST
29804: LIST
29805: LIST
29806: LIST
29807: LIST
29808: LIST
29809: ST_TO_ADDR
29810: GO 29871
29812: LD_INT 3
29814: DOUBLE
29815: EQUAL
29816: IFTRUE 29820
29818: GO 29870
29820: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29821: LD_ADDR_VAR 0 3
29825: PUSH
29826: LD_INT 13
29828: PUSH
29829: LD_INT 14
29831: PUSH
29832: LD_INT 2
29834: PUSH
29835: LD_INT 3
29837: PUSH
29838: LD_INT 4
29840: PUSH
29841: LD_INT 5
29843: PUSH
29844: LD_INT 21
29846: PUSH
29847: LD_INT 22
29849: PUSH
29850: LD_INT 23
29852: PUSH
29853: LD_INT 24
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: LIST
29860: LIST
29861: LIST
29862: LIST
29863: LIST
29864: LIST
29865: LIST
29866: LIST
29867: ST_TO_ADDR
29868: GO 29871
29870: POP
// result := ( chassis in result ) ;
29871: LD_ADDR_VAR 0 3
29875: PUSH
29876: LD_VAR 0 1
29880: PUSH
29881: LD_VAR 0 3
29885: IN
29886: ST_TO_ADDR
// end ;
29887: LD_VAR 0 3
29891: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
29892: LD_INT 0
29894: PPUSH
// if not chassis or not weapon then
29895: LD_VAR 0 1
29899: NOT
29900: PUSH
29901: LD_VAR 0 2
29905: NOT
29906: OR
29907: IFFALSE 29911
// exit ;
29909: GO 30971
// case weapon of us_machine_gun :
29911: LD_VAR 0 2
29915: PUSH
29916: LD_INT 2
29918: DOUBLE
29919: EQUAL
29920: IFTRUE 29924
29922: GO 29954
29924: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
29925: LD_ADDR_VAR 0 3
29929: PUSH
29930: LD_INT 1
29932: PUSH
29933: LD_INT 2
29935: PUSH
29936: LD_INT 3
29938: PUSH
29939: LD_INT 4
29941: PUSH
29942: LD_INT 5
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: LIST
29949: LIST
29950: LIST
29951: ST_TO_ADDR
29952: GO 30955
29954: LD_INT 3
29956: DOUBLE
29957: EQUAL
29958: IFTRUE 29962
29960: GO 29992
29962: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
29963: LD_ADDR_VAR 0 3
29967: PUSH
29968: LD_INT 1
29970: PUSH
29971: LD_INT 2
29973: PUSH
29974: LD_INT 3
29976: PUSH
29977: LD_INT 4
29979: PUSH
29980: LD_INT 5
29982: PUSH
29983: EMPTY
29984: LIST
29985: LIST
29986: LIST
29987: LIST
29988: LIST
29989: ST_TO_ADDR
29990: GO 30955
29992: LD_INT 11
29994: DOUBLE
29995: EQUAL
29996: IFTRUE 30000
29998: GO 30030
30000: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30001: LD_ADDR_VAR 0 3
30005: PUSH
30006: LD_INT 1
30008: PUSH
30009: LD_INT 2
30011: PUSH
30012: LD_INT 3
30014: PUSH
30015: LD_INT 4
30017: PUSH
30018: LD_INT 5
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: LIST
30025: LIST
30026: LIST
30027: ST_TO_ADDR
30028: GO 30955
30030: LD_INT 4
30032: DOUBLE
30033: EQUAL
30034: IFTRUE 30038
30036: GO 30064
30038: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30039: LD_ADDR_VAR 0 3
30043: PUSH
30044: LD_INT 2
30046: PUSH
30047: LD_INT 3
30049: PUSH
30050: LD_INT 4
30052: PUSH
30053: LD_INT 5
30055: PUSH
30056: EMPTY
30057: LIST
30058: LIST
30059: LIST
30060: LIST
30061: ST_TO_ADDR
30062: GO 30955
30064: LD_INT 5
30066: DOUBLE
30067: EQUAL
30068: IFTRUE 30072
30070: GO 30098
30072: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30073: LD_ADDR_VAR 0 3
30077: PUSH
30078: LD_INT 2
30080: PUSH
30081: LD_INT 3
30083: PUSH
30084: LD_INT 4
30086: PUSH
30087: LD_INT 5
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: LIST
30094: LIST
30095: ST_TO_ADDR
30096: GO 30955
30098: LD_INT 9
30100: DOUBLE
30101: EQUAL
30102: IFTRUE 30106
30104: GO 30132
30106: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30107: LD_ADDR_VAR 0 3
30111: PUSH
30112: LD_INT 2
30114: PUSH
30115: LD_INT 3
30117: PUSH
30118: LD_INT 4
30120: PUSH
30121: LD_INT 5
30123: PUSH
30124: EMPTY
30125: LIST
30126: LIST
30127: LIST
30128: LIST
30129: ST_TO_ADDR
30130: GO 30955
30132: LD_INT 7
30134: DOUBLE
30135: EQUAL
30136: IFTRUE 30140
30138: GO 30166
30140: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30141: LD_ADDR_VAR 0 3
30145: PUSH
30146: LD_INT 2
30148: PUSH
30149: LD_INT 3
30151: PUSH
30152: LD_INT 4
30154: PUSH
30155: LD_INT 5
30157: PUSH
30158: EMPTY
30159: LIST
30160: LIST
30161: LIST
30162: LIST
30163: ST_TO_ADDR
30164: GO 30955
30166: LD_INT 12
30168: DOUBLE
30169: EQUAL
30170: IFTRUE 30174
30172: GO 30200
30174: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30175: LD_ADDR_VAR 0 3
30179: PUSH
30180: LD_INT 2
30182: PUSH
30183: LD_INT 3
30185: PUSH
30186: LD_INT 4
30188: PUSH
30189: LD_INT 5
30191: PUSH
30192: EMPTY
30193: LIST
30194: LIST
30195: LIST
30196: LIST
30197: ST_TO_ADDR
30198: GO 30955
30200: LD_INT 13
30202: DOUBLE
30203: EQUAL
30204: IFTRUE 30208
30206: GO 30234
30208: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30209: LD_ADDR_VAR 0 3
30213: PUSH
30214: LD_INT 2
30216: PUSH
30217: LD_INT 3
30219: PUSH
30220: LD_INT 4
30222: PUSH
30223: LD_INT 5
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: ST_TO_ADDR
30232: GO 30955
30234: LD_INT 14
30236: DOUBLE
30237: EQUAL
30238: IFTRUE 30242
30240: GO 30260
30242: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30243: LD_ADDR_VAR 0 3
30247: PUSH
30248: LD_INT 4
30250: PUSH
30251: LD_INT 5
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: ST_TO_ADDR
30258: GO 30955
30260: LD_INT 6
30262: DOUBLE
30263: EQUAL
30264: IFTRUE 30268
30266: GO 30286
30268: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30269: LD_ADDR_VAR 0 3
30273: PUSH
30274: LD_INT 4
30276: PUSH
30277: LD_INT 5
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: ST_TO_ADDR
30284: GO 30955
30286: LD_INT 10
30288: DOUBLE
30289: EQUAL
30290: IFTRUE 30294
30292: GO 30312
30294: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30295: LD_ADDR_VAR 0 3
30299: PUSH
30300: LD_INT 4
30302: PUSH
30303: LD_INT 5
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: ST_TO_ADDR
30310: GO 30955
30312: LD_INT 22
30314: DOUBLE
30315: EQUAL
30316: IFTRUE 30320
30318: GO 30346
30320: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30321: LD_ADDR_VAR 0 3
30325: PUSH
30326: LD_INT 11
30328: PUSH
30329: LD_INT 12
30331: PUSH
30332: LD_INT 13
30334: PUSH
30335: LD_INT 14
30337: PUSH
30338: EMPTY
30339: LIST
30340: LIST
30341: LIST
30342: LIST
30343: ST_TO_ADDR
30344: GO 30955
30346: LD_INT 23
30348: DOUBLE
30349: EQUAL
30350: IFTRUE 30354
30352: GO 30380
30354: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
30355: LD_ADDR_VAR 0 3
30359: PUSH
30360: LD_INT 11
30362: PUSH
30363: LD_INT 12
30365: PUSH
30366: LD_INT 13
30368: PUSH
30369: LD_INT 14
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: LIST
30376: LIST
30377: ST_TO_ADDR
30378: GO 30955
30380: LD_INT 24
30382: DOUBLE
30383: EQUAL
30384: IFTRUE 30388
30386: GO 30414
30388: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30389: LD_ADDR_VAR 0 3
30393: PUSH
30394: LD_INT 11
30396: PUSH
30397: LD_INT 12
30399: PUSH
30400: LD_INT 13
30402: PUSH
30403: LD_INT 14
30405: PUSH
30406: EMPTY
30407: LIST
30408: LIST
30409: LIST
30410: LIST
30411: ST_TO_ADDR
30412: GO 30955
30414: LD_INT 30
30416: DOUBLE
30417: EQUAL
30418: IFTRUE 30422
30420: GO 30448
30422: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30423: LD_ADDR_VAR 0 3
30427: PUSH
30428: LD_INT 11
30430: PUSH
30431: LD_INT 12
30433: PUSH
30434: LD_INT 13
30436: PUSH
30437: LD_INT 14
30439: PUSH
30440: EMPTY
30441: LIST
30442: LIST
30443: LIST
30444: LIST
30445: ST_TO_ADDR
30446: GO 30955
30448: LD_INT 25
30450: DOUBLE
30451: EQUAL
30452: IFTRUE 30456
30454: GO 30474
30456: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
30457: LD_ADDR_VAR 0 3
30461: PUSH
30462: LD_INT 13
30464: PUSH
30465: LD_INT 14
30467: PUSH
30468: EMPTY
30469: LIST
30470: LIST
30471: ST_TO_ADDR
30472: GO 30955
30474: LD_INT 27
30476: DOUBLE
30477: EQUAL
30478: IFTRUE 30482
30480: GO 30500
30482: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
30483: LD_ADDR_VAR 0 3
30487: PUSH
30488: LD_INT 13
30490: PUSH
30491: LD_INT 14
30493: PUSH
30494: EMPTY
30495: LIST
30496: LIST
30497: ST_TO_ADDR
30498: GO 30955
30500: LD_INT 92
30502: DOUBLE
30503: EQUAL
30504: IFTRUE 30508
30506: GO 30534
30508: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
30509: LD_ADDR_VAR 0 3
30513: PUSH
30514: LD_INT 11
30516: PUSH
30517: LD_INT 12
30519: PUSH
30520: LD_INT 13
30522: PUSH
30523: LD_INT 14
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: LIST
30530: LIST
30531: ST_TO_ADDR
30532: GO 30955
30534: LD_INT 28
30536: DOUBLE
30537: EQUAL
30538: IFTRUE 30542
30540: GO 30560
30542: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
30543: LD_ADDR_VAR 0 3
30547: PUSH
30548: LD_INT 13
30550: PUSH
30551: LD_INT 14
30553: PUSH
30554: EMPTY
30555: LIST
30556: LIST
30557: ST_TO_ADDR
30558: GO 30955
30560: LD_INT 29
30562: DOUBLE
30563: EQUAL
30564: IFTRUE 30568
30566: GO 30586
30568: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
30569: LD_ADDR_VAR 0 3
30573: PUSH
30574: LD_INT 13
30576: PUSH
30577: LD_INT 14
30579: PUSH
30580: EMPTY
30581: LIST
30582: LIST
30583: ST_TO_ADDR
30584: GO 30955
30586: LD_INT 31
30588: DOUBLE
30589: EQUAL
30590: IFTRUE 30594
30592: GO 30612
30594: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
30595: LD_ADDR_VAR 0 3
30599: PUSH
30600: LD_INT 13
30602: PUSH
30603: LD_INT 14
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: ST_TO_ADDR
30610: GO 30955
30612: LD_INT 26
30614: DOUBLE
30615: EQUAL
30616: IFTRUE 30620
30618: GO 30638
30620: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
30621: LD_ADDR_VAR 0 3
30625: PUSH
30626: LD_INT 13
30628: PUSH
30629: LD_INT 14
30631: PUSH
30632: EMPTY
30633: LIST
30634: LIST
30635: ST_TO_ADDR
30636: GO 30955
30638: LD_INT 42
30640: DOUBLE
30641: EQUAL
30642: IFTRUE 30646
30644: GO 30672
30646: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
30647: LD_ADDR_VAR 0 3
30651: PUSH
30652: LD_INT 21
30654: PUSH
30655: LD_INT 22
30657: PUSH
30658: LD_INT 23
30660: PUSH
30661: LD_INT 24
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: LIST
30668: LIST
30669: ST_TO_ADDR
30670: GO 30955
30672: LD_INT 43
30674: DOUBLE
30675: EQUAL
30676: IFTRUE 30680
30678: GO 30706
30680: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
30681: LD_ADDR_VAR 0 3
30685: PUSH
30686: LD_INT 21
30688: PUSH
30689: LD_INT 22
30691: PUSH
30692: LD_INT 23
30694: PUSH
30695: LD_INT 24
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: LIST
30702: LIST
30703: ST_TO_ADDR
30704: GO 30955
30706: LD_INT 44
30708: DOUBLE
30709: EQUAL
30710: IFTRUE 30714
30712: GO 30740
30714: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
30715: LD_ADDR_VAR 0 3
30719: PUSH
30720: LD_INT 21
30722: PUSH
30723: LD_INT 22
30725: PUSH
30726: LD_INT 23
30728: PUSH
30729: LD_INT 24
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: LIST
30736: LIST
30737: ST_TO_ADDR
30738: GO 30955
30740: LD_INT 45
30742: DOUBLE
30743: EQUAL
30744: IFTRUE 30748
30746: GO 30774
30748: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
30749: LD_ADDR_VAR 0 3
30753: PUSH
30754: LD_INT 21
30756: PUSH
30757: LD_INT 22
30759: PUSH
30760: LD_INT 23
30762: PUSH
30763: LD_INT 24
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: ST_TO_ADDR
30772: GO 30955
30774: LD_INT 49
30776: DOUBLE
30777: EQUAL
30778: IFTRUE 30782
30780: GO 30808
30782: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
30783: LD_ADDR_VAR 0 3
30787: PUSH
30788: LD_INT 21
30790: PUSH
30791: LD_INT 22
30793: PUSH
30794: LD_INT 23
30796: PUSH
30797: LD_INT 24
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: LIST
30804: LIST
30805: ST_TO_ADDR
30806: GO 30955
30808: LD_INT 51
30810: DOUBLE
30811: EQUAL
30812: IFTRUE 30816
30814: GO 30842
30816: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
30817: LD_ADDR_VAR 0 3
30821: PUSH
30822: LD_INT 21
30824: PUSH
30825: LD_INT 22
30827: PUSH
30828: LD_INT 23
30830: PUSH
30831: LD_INT 24
30833: PUSH
30834: EMPTY
30835: LIST
30836: LIST
30837: LIST
30838: LIST
30839: ST_TO_ADDR
30840: GO 30955
30842: LD_INT 52
30844: DOUBLE
30845: EQUAL
30846: IFTRUE 30850
30848: GO 30876
30850: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
30851: LD_ADDR_VAR 0 3
30855: PUSH
30856: LD_INT 21
30858: PUSH
30859: LD_INT 22
30861: PUSH
30862: LD_INT 23
30864: PUSH
30865: LD_INT 24
30867: PUSH
30868: EMPTY
30869: LIST
30870: LIST
30871: LIST
30872: LIST
30873: ST_TO_ADDR
30874: GO 30955
30876: LD_INT 53
30878: DOUBLE
30879: EQUAL
30880: IFTRUE 30884
30882: GO 30902
30884: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
30885: LD_ADDR_VAR 0 3
30889: PUSH
30890: LD_INT 23
30892: PUSH
30893: LD_INT 24
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: ST_TO_ADDR
30900: GO 30955
30902: LD_INT 46
30904: DOUBLE
30905: EQUAL
30906: IFTRUE 30910
30908: GO 30928
30910: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
30911: LD_ADDR_VAR 0 3
30915: PUSH
30916: LD_INT 23
30918: PUSH
30919: LD_INT 24
30921: PUSH
30922: EMPTY
30923: LIST
30924: LIST
30925: ST_TO_ADDR
30926: GO 30955
30928: LD_INT 47
30930: DOUBLE
30931: EQUAL
30932: IFTRUE 30936
30934: GO 30954
30936: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30937: LD_ADDR_VAR 0 3
30941: PUSH
30942: LD_INT 23
30944: PUSH
30945: LD_INT 24
30947: PUSH
30948: EMPTY
30949: LIST
30950: LIST
30951: ST_TO_ADDR
30952: GO 30955
30954: POP
// result := ( chassis in result ) ;
30955: LD_ADDR_VAR 0 3
30959: PUSH
30960: LD_VAR 0 1
30964: PUSH
30965: LD_VAR 0 3
30969: IN
30970: ST_TO_ADDR
// end ;
30971: LD_VAR 0 3
30975: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
30976: LD_INT 0
30978: PPUSH
30979: PPUSH
30980: PPUSH
30981: PPUSH
30982: PPUSH
30983: PPUSH
30984: PPUSH
// result := array ;
30985: LD_ADDR_VAR 0 5
30989: PUSH
30990: LD_VAR 0 1
30994: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
30995: LD_VAR 0 1
30999: NOT
31000: PUSH
31001: LD_VAR 0 2
31005: NOT
31006: OR
31007: PUSH
31008: LD_VAR 0 3
31012: NOT
31013: OR
31014: PUSH
31015: LD_VAR 0 2
31019: PUSH
31020: LD_VAR 0 1
31024: GREATER
31025: OR
31026: PUSH
31027: LD_VAR 0 3
31031: PUSH
31032: LD_VAR 0 1
31036: GREATER
31037: OR
31038: IFFALSE 31042
// exit ;
31040: GO 31338
// if direction then
31042: LD_VAR 0 4
31046: IFFALSE 31110
// begin d := 1 ;
31048: LD_ADDR_VAR 0 9
31052: PUSH
31053: LD_INT 1
31055: ST_TO_ADDR
// if i_from > i_to then
31056: LD_VAR 0 2
31060: PUSH
31061: LD_VAR 0 3
31065: GREATER
31066: IFFALSE 31092
// length := ( array - i_from ) + i_to else
31068: LD_ADDR_VAR 0 11
31072: PUSH
31073: LD_VAR 0 1
31077: PUSH
31078: LD_VAR 0 2
31082: MINUS
31083: PUSH
31084: LD_VAR 0 3
31088: PLUS
31089: ST_TO_ADDR
31090: GO 31108
// length := i_to - i_from ;
31092: LD_ADDR_VAR 0 11
31096: PUSH
31097: LD_VAR 0 3
31101: PUSH
31102: LD_VAR 0 2
31106: MINUS
31107: ST_TO_ADDR
// end else
31108: GO 31171
// begin d := - 1 ;
31110: LD_ADDR_VAR 0 9
31114: PUSH
31115: LD_INT 1
31117: NEG
31118: ST_TO_ADDR
// if i_from > i_to then
31119: LD_VAR 0 2
31123: PUSH
31124: LD_VAR 0 3
31128: GREATER
31129: IFFALSE 31149
// length := i_from - i_to else
31131: LD_ADDR_VAR 0 11
31135: PUSH
31136: LD_VAR 0 2
31140: PUSH
31141: LD_VAR 0 3
31145: MINUS
31146: ST_TO_ADDR
31147: GO 31171
// length := ( array - i_to ) + i_from ;
31149: LD_ADDR_VAR 0 11
31153: PUSH
31154: LD_VAR 0 1
31158: PUSH
31159: LD_VAR 0 3
31163: MINUS
31164: PUSH
31165: LD_VAR 0 2
31169: PLUS
31170: ST_TO_ADDR
// end ; if not length then
31171: LD_VAR 0 11
31175: NOT
31176: IFFALSE 31180
// exit ;
31178: GO 31338
// tmp := array ;
31180: LD_ADDR_VAR 0 10
31184: PUSH
31185: LD_VAR 0 1
31189: ST_TO_ADDR
// for i = 1 to length do
31190: LD_ADDR_VAR 0 6
31194: PUSH
31195: DOUBLE
31196: LD_INT 1
31198: DEC
31199: ST_TO_ADDR
31200: LD_VAR 0 11
31204: PUSH
31205: FOR_TO
31206: IFFALSE 31326
// begin for j = 1 to array do
31208: LD_ADDR_VAR 0 7
31212: PUSH
31213: DOUBLE
31214: LD_INT 1
31216: DEC
31217: ST_TO_ADDR
31218: LD_VAR 0 1
31222: PUSH
31223: FOR_TO
31224: IFFALSE 31312
// begin k := j + d ;
31226: LD_ADDR_VAR 0 8
31230: PUSH
31231: LD_VAR 0 7
31235: PUSH
31236: LD_VAR 0 9
31240: PLUS
31241: ST_TO_ADDR
// if k > array then
31242: LD_VAR 0 8
31246: PUSH
31247: LD_VAR 0 1
31251: GREATER
31252: IFFALSE 31262
// k := 1 ;
31254: LD_ADDR_VAR 0 8
31258: PUSH
31259: LD_INT 1
31261: ST_TO_ADDR
// if not k then
31262: LD_VAR 0 8
31266: NOT
31267: IFFALSE 31279
// k := array ;
31269: LD_ADDR_VAR 0 8
31273: PUSH
31274: LD_VAR 0 1
31278: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31279: LD_ADDR_VAR 0 10
31283: PUSH
31284: LD_VAR 0 10
31288: PPUSH
31289: LD_VAR 0 8
31293: PPUSH
31294: LD_VAR 0 1
31298: PUSH
31299: LD_VAR 0 7
31303: ARRAY
31304: PPUSH
31305: CALL_OW 1
31309: ST_TO_ADDR
// end ;
31310: GO 31223
31312: POP
31313: POP
// array := tmp ;
31314: LD_ADDR_VAR 0 1
31318: PUSH
31319: LD_VAR 0 10
31323: ST_TO_ADDR
// end ;
31324: GO 31205
31326: POP
31327: POP
// result := array ;
31328: LD_ADDR_VAR 0 5
31332: PUSH
31333: LD_VAR 0 1
31337: ST_TO_ADDR
// end ;
31338: LD_VAR 0 5
31342: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31343: LD_INT 0
31345: PPUSH
31346: PPUSH
// result := 0 ;
31347: LD_ADDR_VAR 0 3
31351: PUSH
31352: LD_INT 0
31354: ST_TO_ADDR
// if not array or not value in array then
31355: LD_VAR 0 1
31359: NOT
31360: PUSH
31361: LD_VAR 0 2
31365: PUSH
31366: LD_VAR 0 1
31370: IN
31371: NOT
31372: OR
31373: IFFALSE 31377
// exit ;
31375: GO 31431
// for i = 1 to array do
31377: LD_ADDR_VAR 0 4
31381: PUSH
31382: DOUBLE
31383: LD_INT 1
31385: DEC
31386: ST_TO_ADDR
31387: LD_VAR 0 1
31391: PUSH
31392: FOR_TO
31393: IFFALSE 31429
// if value = array [ i ] then
31395: LD_VAR 0 2
31399: PUSH
31400: LD_VAR 0 1
31404: PUSH
31405: LD_VAR 0 4
31409: ARRAY
31410: EQUAL
31411: IFFALSE 31427
// begin result := i ;
31413: LD_ADDR_VAR 0 3
31417: PUSH
31418: LD_VAR 0 4
31422: ST_TO_ADDR
// exit ;
31423: POP
31424: POP
31425: GO 31431
// end ;
31427: GO 31392
31429: POP
31430: POP
// end ;
31431: LD_VAR 0 3
31435: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
31436: LD_INT 0
31438: PPUSH
// vc_chassis := chassis ;
31439: LD_ADDR_OWVAR 37
31443: PUSH
31444: LD_VAR 0 1
31448: ST_TO_ADDR
// vc_engine := engine ;
31449: LD_ADDR_OWVAR 39
31453: PUSH
31454: LD_VAR 0 2
31458: ST_TO_ADDR
// vc_control := control ;
31459: LD_ADDR_OWVAR 38
31463: PUSH
31464: LD_VAR 0 3
31468: ST_TO_ADDR
// vc_weapon := weapon ;
31469: LD_ADDR_OWVAR 40
31473: PUSH
31474: LD_VAR 0 4
31478: ST_TO_ADDR
// vc_fuel_battery := fuel ;
31479: LD_ADDR_OWVAR 41
31483: PUSH
31484: LD_VAR 0 5
31488: ST_TO_ADDR
// end ;
31489: LD_VAR 0 6
31493: RET
// export function WantPlant ( unit ) ; var task ; begin
31494: LD_INT 0
31496: PPUSH
31497: PPUSH
// result := false ;
31498: LD_ADDR_VAR 0 2
31502: PUSH
31503: LD_INT 0
31505: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
31506: LD_ADDR_VAR 0 3
31510: PUSH
31511: LD_VAR 0 1
31515: PPUSH
31516: CALL_OW 437
31520: ST_TO_ADDR
// if task then
31521: LD_VAR 0 3
31525: IFFALSE 31553
// if task [ 1 ] [ 1 ] = p then
31527: LD_VAR 0 3
31531: PUSH
31532: LD_INT 1
31534: ARRAY
31535: PUSH
31536: LD_INT 1
31538: ARRAY
31539: PUSH
31540: LD_STRING p
31542: EQUAL
31543: IFFALSE 31553
// result := true ;
31545: LD_ADDR_VAR 0 2
31549: PUSH
31550: LD_INT 1
31552: ST_TO_ADDR
// end ;
31553: LD_VAR 0 2
31557: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
31558: LD_INT 0
31560: PPUSH
31561: PPUSH
31562: PPUSH
31563: PPUSH
// if pos < 1 then
31564: LD_VAR 0 2
31568: PUSH
31569: LD_INT 1
31571: LESS
31572: IFFALSE 31576
// exit ;
31574: GO 31879
// if pos = 1 then
31576: LD_VAR 0 2
31580: PUSH
31581: LD_INT 1
31583: EQUAL
31584: IFFALSE 31617
// result := Replace ( arr , pos [ 1 ] , value ) else
31586: LD_ADDR_VAR 0 4
31590: PUSH
31591: LD_VAR 0 1
31595: PPUSH
31596: LD_VAR 0 2
31600: PUSH
31601: LD_INT 1
31603: ARRAY
31604: PPUSH
31605: LD_VAR 0 3
31609: PPUSH
31610: CALL_OW 1
31614: ST_TO_ADDR
31615: GO 31879
// begin tmp := arr ;
31617: LD_ADDR_VAR 0 6
31621: PUSH
31622: LD_VAR 0 1
31626: ST_TO_ADDR
// s_arr := [ tmp ] ;
31627: LD_ADDR_VAR 0 7
31631: PUSH
31632: LD_VAR 0 6
31636: PUSH
31637: EMPTY
31638: LIST
31639: ST_TO_ADDR
// for i = 1 to pos - 1 do
31640: LD_ADDR_VAR 0 5
31644: PUSH
31645: DOUBLE
31646: LD_INT 1
31648: DEC
31649: ST_TO_ADDR
31650: LD_VAR 0 2
31654: PUSH
31655: LD_INT 1
31657: MINUS
31658: PUSH
31659: FOR_TO
31660: IFFALSE 31705
// begin tmp := tmp [ pos [ i ] ] ;
31662: LD_ADDR_VAR 0 6
31666: PUSH
31667: LD_VAR 0 6
31671: PUSH
31672: LD_VAR 0 2
31676: PUSH
31677: LD_VAR 0 5
31681: ARRAY
31682: ARRAY
31683: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
31684: LD_ADDR_VAR 0 7
31688: PUSH
31689: LD_VAR 0 7
31693: PUSH
31694: LD_VAR 0 6
31698: PUSH
31699: EMPTY
31700: LIST
31701: ADD
31702: ST_TO_ADDR
// end ;
31703: GO 31659
31705: POP
31706: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
31707: LD_ADDR_VAR 0 6
31711: PUSH
31712: LD_VAR 0 6
31716: PPUSH
31717: LD_VAR 0 2
31721: PUSH
31722: LD_VAR 0 2
31726: ARRAY
31727: PPUSH
31728: LD_VAR 0 3
31732: PPUSH
31733: CALL_OW 1
31737: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
31738: LD_ADDR_VAR 0 7
31742: PUSH
31743: LD_VAR 0 7
31747: PPUSH
31748: LD_VAR 0 7
31752: PPUSH
31753: LD_VAR 0 6
31757: PPUSH
31758: CALL_OW 1
31762: ST_TO_ADDR
// for i = s_arr downto 2 do
31763: LD_ADDR_VAR 0 5
31767: PUSH
31768: DOUBLE
31769: LD_VAR 0 7
31773: INC
31774: ST_TO_ADDR
31775: LD_INT 2
31777: PUSH
31778: FOR_DOWNTO
31779: IFFALSE 31863
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
31781: LD_ADDR_VAR 0 6
31785: PUSH
31786: LD_VAR 0 7
31790: PUSH
31791: LD_VAR 0 5
31795: PUSH
31796: LD_INT 1
31798: MINUS
31799: ARRAY
31800: PPUSH
31801: LD_VAR 0 2
31805: PUSH
31806: LD_VAR 0 5
31810: PUSH
31811: LD_INT 1
31813: MINUS
31814: ARRAY
31815: PPUSH
31816: LD_VAR 0 7
31820: PUSH
31821: LD_VAR 0 5
31825: ARRAY
31826: PPUSH
31827: CALL_OW 1
31831: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
31832: LD_ADDR_VAR 0 7
31836: PUSH
31837: LD_VAR 0 7
31841: PPUSH
31842: LD_VAR 0 5
31846: PUSH
31847: LD_INT 1
31849: MINUS
31850: PPUSH
31851: LD_VAR 0 6
31855: PPUSH
31856: CALL_OW 1
31860: ST_TO_ADDR
// end ;
31861: GO 31778
31863: POP
31864: POP
// result := s_arr [ 1 ] ;
31865: LD_ADDR_VAR 0 4
31869: PUSH
31870: LD_VAR 0 7
31874: PUSH
31875: LD_INT 1
31877: ARRAY
31878: ST_TO_ADDR
// end ; end ;
31879: LD_VAR 0 4
31883: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
31884: LD_INT 0
31886: PPUSH
31887: PPUSH
// if not list then
31888: LD_VAR 0 1
31892: NOT
31893: IFFALSE 31897
// exit ;
31895: GO 31988
// i := list [ pos1 ] ;
31897: LD_ADDR_VAR 0 5
31901: PUSH
31902: LD_VAR 0 1
31906: PUSH
31907: LD_VAR 0 2
31911: ARRAY
31912: ST_TO_ADDR
// if not i then
31913: LD_VAR 0 5
31917: NOT
31918: IFFALSE 31922
// exit ;
31920: GO 31988
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
31922: LD_ADDR_VAR 0 1
31926: PUSH
31927: LD_VAR 0 1
31931: PPUSH
31932: LD_VAR 0 2
31936: PPUSH
31937: LD_VAR 0 1
31941: PUSH
31942: LD_VAR 0 3
31946: ARRAY
31947: PPUSH
31948: CALL_OW 1
31952: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
31953: LD_ADDR_VAR 0 1
31957: PUSH
31958: LD_VAR 0 1
31962: PPUSH
31963: LD_VAR 0 3
31967: PPUSH
31968: LD_VAR 0 5
31972: PPUSH
31973: CALL_OW 1
31977: ST_TO_ADDR
// result := list ;
31978: LD_ADDR_VAR 0 4
31982: PUSH
31983: LD_VAR 0 1
31987: ST_TO_ADDR
// end ;
31988: LD_VAR 0 4
31992: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
31993: LD_INT 0
31995: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
31996: LD_ADDR_VAR 0 5
32000: PUSH
32001: LD_VAR 0 1
32005: PPUSH
32006: CALL_OW 250
32010: PPUSH
32011: LD_VAR 0 1
32015: PPUSH
32016: CALL_OW 251
32020: PPUSH
32021: LD_VAR 0 2
32025: PPUSH
32026: LD_VAR 0 3
32030: PPUSH
32031: LD_VAR 0 4
32035: PPUSH
32036: CALL 32046 0 5
32040: ST_TO_ADDR
// end ;
32041: LD_VAR 0 5
32045: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32046: LD_INT 0
32048: PPUSH
32049: PPUSH
32050: PPUSH
32051: PPUSH
// if not list then
32052: LD_VAR 0 3
32056: NOT
32057: IFFALSE 32061
// exit ;
32059: GO 32449
// result := [ ] ;
32061: LD_ADDR_VAR 0 6
32065: PUSH
32066: EMPTY
32067: ST_TO_ADDR
// for i in list do
32068: LD_ADDR_VAR 0 7
32072: PUSH
32073: LD_VAR 0 3
32077: PUSH
32078: FOR_IN
32079: IFFALSE 32281
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32081: LD_ADDR_VAR 0 9
32085: PUSH
32086: LD_VAR 0 7
32090: PPUSH
32091: LD_VAR 0 1
32095: PPUSH
32096: LD_VAR 0 2
32100: PPUSH
32101: CALL_OW 297
32105: ST_TO_ADDR
// if not result then
32106: LD_VAR 0 6
32110: NOT
32111: IFFALSE 32137
// result := [ [ i , tmp ] ] else
32113: LD_ADDR_VAR 0 6
32117: PUSH
32118: LD_VAR 0 7
32122: PUSH
32123: LD_VAR 0 9
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: PUSH
32132: EMPTY
32133: LIST
32134: ST_TO_ADDR
32135: GO 32279
// begin if result [ result ] [ 2 ] < tmp then
32137: LD_VAR 0 6
32141: PUSH
32142: LD_VAR 0 6
32146: ARRAY
32147: PUSH
32148: LD_INT 2
32150: ARRAY
32151: PUSH
32152: LD_VAR 0 9
32156: LESS
32157: IFFALSE 32199
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32159: LD_ADDR_VAR 0 6
32163: PUSH
32164: LD_VAR 0 6
32168: PPUSH
32169: LD_VAR 0 6
32173: PUSH
32174: LD_INT 1
32176: PLUS
32177: PPUSH
32178: LD_VAR 0 7
32182: PUSH
32183: LD_VAR 0 9
32187: PUSH
32188: EMPTY
32189: LIST
32190: LIST
32191: PPUSH
32192: CALL_OW 2
32196: ST_TO_ADDR
32197: GO 32279
// for j = 1 to result do
32199: LD_ADDR_VAR 0 8
32203: PUSH
32204: DOUBLE
32205: LD_INT 1
32207: DEC
32208: ST_TO_ADDR
32209: LD_VAR 0 6
32213: PUSH
32214: FOR_TO
32215: IFFALSE 32277
// begin if tmp < result [ j ] [ 2 ] then
32217: LD_VAR 0 9
32221: PUSH
32222: LD_VAR 0 6
32226: PUSH
32227: LD_VAR 0 8
32231: ARRAY
32232: PUSH
32233: LD_INT 2
32235: ARRAY
32236: LESS
32237: IFFALSE 32275
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32239: LD_ADDR_VAR 0 6
32243: PUSH
32244: LD_VAR 0 6
32248: PPUSH
32249: LD_VAR 0 8
32253: PPUSH
32254: LD_VAR 0 7
32258: PUSH
32259: LD_VAR 0 9
32263: PUSH
32264: EMPTY
32265: LIST
32266: LIST
32267: PPUSH
32268: CALL_OW 2
32272: ST_TO_ADDR
// break ;
32273: GO 32277
// end ; end ;
32275: GO 32214
32277: POP
32278: POP
// end ; end ;
32279: GO 32078
32281: POP
32282: POP
// if result and not asc then
32283: LD_VAR 0 6
32287: PUSH
32288: LD_VAR 0 4
32292: NOT
32293: AND
32294: IFFALSE 32369
// begin tmp := result ;
32296: LD_ADDR_VAR 0 9
32300: PUSH
32301: LD_VAR 0 6
32305: ST_TO_ADDR
// for i = tmp downto 1 do
32306: LD_ADDR_VAR 0 7
32310: PUSH
32311: DOUBLE
32312: LD_VAR 0 9
32316: INC
32317: ST_TO_ADDR
32318: LD_INT 1
32320: PUSH
32321: FOR_DOWNTO
32322: IFFALSE 32367
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
32324: LD_ADDR_VAR 0 6
32328: PUSH
32329: LD_VAR 0 6
32333: PPUSH
32334: LD_VAR 0 9
32338: PUSH
32339: LD_VAR 0 7
32343: MINUS
32344: PUSH
32345: LD_INT 1
32347: PLUS
32348: PPUSH
32349: LD_VAR 0 9
32353: PUSH
32354: LD_VAR 0 7
32358: ARRAY
32359: PPUSH
32360: CALL_OW 1
32364: ST_TO_ADDR
32365: GO 32321
32367: POP
32368: POP
// end ; tmp := [ ] ;
32369: LD_ADDR_VAR 0 9
32373: PUSH
32374: EMPTY
32375: ST_TO_ADDR
// if mode then
32376: LD_VAR 0 5
32380: IFFALSE 32449
// begin for i = 1 to result do
32382: LD_ADDR_VAR 0 7
32386: PUSH
32387: DOUBLE
32388: LD_INT 1
32390: DEC
32391: ST_TO_ADDR
32392: LD_VAR 0 6
32396: PUSH
32397: FOR_TO
32398: IFFALSE 32437
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
32400: LD_ADDR_VAR 0 9
32404: PUSH
32405: LD_VAR 0 9
32409: PPUSH
32410: LD_VAR 0 7
32414: PPUSH
32415: LD_VAR 0 6
32419: PUSH
32420: LD_VAR 0 7
32424: ARRAY
32425: PUSH
32426: LD_INT 1
32428: ARRAY
32429: PPUSH
32430: CALL_OW 1
32434: ST_TO_ADDR
32435: GO 32397
32437: POP
32438: POP
// result := tmp ;
32439: LD_ADDR_VAR 0 6
32443: PUSH
32444: LD_VAR 0 9
32448: ST_TO_ADDR
// end ; end ;
32449: LD_VAR 0 6
32453: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
32454: LD_INT 0
32456: PPUSH
32457: PPUSH
32458: PPUSH
32459: PPUSH
32460: PPUSH
32461: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
32462: LD_ADDR_VAR 0 5
32466: PUSH
32467: LD_INT 0
32469: PUSH
32470: LD_INT 0
32472: PUSH
32473: LD_INT 0
32475: PUSH
32476: EMPTY
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: LIST
32482: LIST
32483: ST_TO_ADDR
// if not x or not y then
32484: LD_VAR 0 2
32488: NOT
32489: PUSH
32490: LD_VAR 0 3
32494: NOT
32495: OR
32496: IFFALSE 32500
// exit ;
32498: GO 34150
// if not range then
32500: LD_VAR 0 4
32504: NOT
32505: IFFALSE 32515
// range := 10 ;
32507: LD_ADDR_VAR 0 4
32511: PUSH
32512: LD_INT 10
32514: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32515: LD_ADDR_VAR 0 8
32519: PUSH
32520: LD_INT 81
32522: PUSH
32523: LD_VAR 0 1
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: PUSH
32532: LD_INT 92
32534: PUSH
32535: LD_VAR 0 2
32539: PUSH
32540: LD_VAR 0 3
32544: PUSH
32545: LD_VAR 0 4
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: LIST
32554: LIST
32555: PUSH
32556: LD_INT 3
32558: PUSH
32559: LD_INT 21
32561: PUSH
32562: LD_INT 3
32564: PUSH
32565: EMPTY
32566: LIST
32567: LIST
32568: PUSH
32569: EMPTY
32570: LIST
32571: LIST
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: LIST
32577: PPUSH
32578: CALL_OW 69
32582: ST_TO_ADDR
// if not tmp then
32583: LD_VAR 0 8
32587: NOT
32588: IFFALSE 32592
// exit ;
32590: GO 34150
// for i in tmp do
32592: LD_ADDR_VAR 0 6
32596: PUSH
32597: LD_VAR 0 8
32601: PUSH
32602: FOR_IN
32603: IFFALSE 34125
// begin points := [ 0 , 0 , 0 ] ;
32605: LD_ADDR_VAR 0 9
32609: PUSH
32610: LD_INT 0
32612: PUSH
32613: LD_INT 0
32615: PUSH
32616: LD_INT 0
32618: PUSH
32619: EMPTY
32620: LIST
32621: LIST
32622: LIST
32623: ST_TO_ADDR
// bpoints := 1 ;
32624: LD_ADDR_VAR 0 10
32628: PUSH
32629: LD_INT 1
32631: ST_TO_ADDR
// case GetType ( i ) of unit_human :
32632: LD_VAR 0 6
32636: PPUSH
32637: CALL_OW 247
32641: PUSH
32642: LD_INT 1
32644: DOUBLE
32645: EQUAL
32646: IFTRUE 32650
32648: GO 33228
32650: POP
// begin if GetClass ( i ) = 1 then
32651: LD_VAR 0 6
32655: PPUSH
32656: CALL_OW 257
32660: PUSH
32661: LD_INT 1
32663: EQUAL
32664: IFFALSE 32685
// points := [ 10 , 5 , 3 ] ;
32666: LD_ADDR_VAR 0 9
32670: PUSH
32671: LD_INT 10
32673: PUSH
32674: LD_INT 5
32676: PUSH
32677: LD_INT 3
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: LIST
32684: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
32685: LD_VAR 0 6
32689: PPUSH
32690: CALL_OW 257
32694: PUSH
32695: LD_INT 2
32697: PUSH
32698: LD_INT 3
32700: PUSH
32701: LD_INT 4
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: LIST
32708: IN
32709: IFFALSE 32730
// points := [ 3 , 2 , 1 ] ;
32711: LD_ADDR_VAR 0 9
32715: PUSH
32716: LD_INT 3
32718: PUSH
32719: LD_INT 2
32721: PUSH
32722: LD_INT 1
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: LIST
32729: ST_TO_ADDR
// if GetClass ( i ) = 5 then
32730: LD_VAR 0 6
32734: PPUSH
32735: CALL_OW 257
32739: PUSH
32740: LD_INT 5
32742: EQUAL
32743: IFFALSE 32764
// points := [ 130 , 5 , 2 ] ;
32745: LD_ADDR_VAR 0 9
32749: PUSH
32750: LD_INT 130
32752: PUSH
32753: LD_INT 5
32755: PUSH
32756: LD_INT 2
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: LIST
32763: ST_TO_ADDR
// if GetClass ( i ) = 8 then
32764: LD_VAR 0 6
32768: PPUSH
32769: CALL_OW 257
32773: PUSH
32774: LD_INT 8
32776: EQUAL
32777: IFFALSE 32798
// points := [ 35 , 35 , 30 ] ;
32779: LD_ADDR_VAR 0 9
32783: PUSH
32784: LD_INT 35
32786: PUSH
32787: LD_INT 35
32789: PUSH
32790: LD_INT 30
32792: PUSH
32793: EMPTY
32794: LIST
32795: LIST
32796: LIST
32797: ST_TO_ADDR
// if GetClass ( i ) = 9 then
32798: LD_VAR 0 6
32802: PPUSH
32803: CALL_OW 257
32807: PUSH
32808: LD_INT 9
32810: EQUAL
32811: IFFALSE 32832
// points := [ 20 , 55 , 40 ] ;
32813: LD_ADDR_VAR 0 9
32817: PUSH
32818: LD_INT 20
32820: PUSH
32821: LD_INT 55
32823: PUSH
32824: LD_INT 40
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: LIST
32831: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
32832: LD_VAR 0 6
32836: PPUSH
32837: CALL_OW 257
32841: PUSH
32842: LD_INT 12
32844: PUSH
32845: LD_INT 16
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: IN
32852: IFFALSE 32873
// points := [ 5 , 3 , 2 ] ;
32854: LD_ADDR_VAR 0 9
32858: PUSH
32859: LD_INT 5
32861: PUSH
32862: LD_INT 3
32864: PUSH
32865: LD_INT 2
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: LIST
32872: ST_TO_ADDR
// if GetClass ( i ) = 17 then
32873: LD_VAR 0 6
32877: PPUSH
32878: CALL_OW 257
32882: PUSH
32883: LD_INT 17
32885: EQUAL
32886: IFFALSE 32907
// points := [ 100 , 50 , 75 ] ;
32888: LD_ADDR_VAR 0 9
32892: PUSH
32893: LD_INT 100
32895: PUSH
32896: LD_INT 50
32898: PUSH
32899: LD_INT 75
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: LIST
32906: ST_TO_ADDR
// if GetClass ( i ) = 15 then
32907: LD_VAR 0 6
32911: PPUSH
32912: CALL_OW 257
32916: PUSH
32917: LD_INT 15
32919: EQUAL
32920: IFFALSE 32941
// points := [ 10 , 5 , 3 ] ;
32922: LD_ADDR_VAR 0 9
32926: PUSH
32927: LD_INT 10
32929: PUSH
32930: LD_INT 5
32932: PUSH
32933: LD_INT 3
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: LIST
32940: ST_TO_ADDR
// if GetClass ( i ) = 14 then
32941: LD_VAR 0 6
32945: PPUSH
32946: CALL_OW 257
32950: PUSH
32951: LD_INT 14
32953: EQUAL
32954: IFFALSE 32975
// points := [ 10 , 0 , 0 ] ;
32956: LD_ADDR_VAR 0 9
32960: PUSH
32961: LD_INT 10
32963: PUSH
32964: LD_INT 0
32966: PUSH
32967: LD_INT 0
32969: PUSH
32970: EMPTY
32971: LIST
32972: LIST
32973: LIST
32974: ST_TO_ADDR
// if GetClass ( i ) = 11 then
32975: LD_VAR 0 6
32979: PPUSH
32980: CALL_OW 257
32984: PUSH
32985: LD_INT 11
32987: EQUAL
32988: IFFALSE 33009
// points := [ 30 , 10 , 5 ] ;
32990: LD_ADDR_VAR 0 9
32994: PUSH
32995: LD_INT 30
32997: PUSH
32998: LD_INT 10
33000: PUSH
33001: LD_INT 5
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: LIST
33008: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33009: LD_VAR 0 1
33013: PPUSH
33014: LD_INT 5
33016: PPUSH
33017: CALL_OW 321
33021: PUSH
33022: LD_INT 2
33024: EQUAL
33025: IFFALSE 33042
// bpoints := bpoints * 1.8 ;
33027: LD_ADDR_VAR 0 10
33031: PUSH
33032: LD_VAR 0 10
33036: PUSH
33037: LD_REAL  1.80000000000000E+0000
33040: MUL
33041: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33042: LD_VAR 0 6
33046: PPUSH
33047: CALL_OW 257
33051: PUSH
33052: LD_INT 1
33054: PUSH
33055: LD_INT 2
33057: PUSH
33058: LD_INT 3
33060: PUSH
33061: LD_INT 4
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: LIST
33068: LIST
33069: IN
33070: PUSH
33071: LD_VAR 0 1
33075: PPUSH
33076: LD_INT 51
33078: PPUSH
33079: CALL_OW 321
33083: PUSH
33084: LD_INT 2
33086: EQUAL
33087: AND
33088: IFFALSE 33105
// bpoints := bpoints * 1.2 ;
33090: LD_ADDR_VAR 0 10
33094: PUSH
33095: LD_VAR 0 10
33099: PUSH
33100: LD_REAL  1.20000000000000E+0000
33103: MUL
33104: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33105: LD_VAR 0 6
33109: PPUSH
33110: CALL_OW 257
33114: PUSH
33115: LD_INT 5
33117: PUSH
33118: LD_INT 7
33120: PUSH
33121: LD_INT 9
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: LIST
33128: IN
33129: PUSH
33130: LD_VAR 0 1
33134: PPUSH
33135: LD_INT 52
33137: PPUSH
33138: CALL_OW 321
33142: PUSH
33143: LD_INT 2
33145: EQUAL
33146: AND
33147: IFFALSE 33164
// bpoints := bpoints * 1.5 ;
33149: LD_ADDR_VAR 0 10
33153: PUSH
33154: LD_VAR 0 10
33158: PUSH
33159: LD_REAL  1.50000000000000E+0000
33162: MUL
33163: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33164: LD_VAR 0 1
33168: PPUSH
33169: LD_INT 66
33171: PPUSH
33172: CALL_OW 321
33176: PUSH
33177: LD_INT 2
33179: EQUAL
33180: IFFALSE 33197
// bpoints := bpoints * 1.1 ;
33182: LD_ADDR_VAR 0 10
33186: PUSH
33187: LD_VAR 0 10
33191: PUSH
33192: LD_REAL  1.10000000000000E+0000
33195: MUL
33196: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33197: LD_ADDR_VAR 0 10
33201: PUSH
33202: LD_VAR 0 10
33206: PUSH
33207: LD_VAR 0 6
33211: PPUSH
33212: LD_INT 1
33214: PPUSH
33215: CALL_OW 259
33219: PUSH
33220: LD_REAL  1.15000000000000E+0000
33223: MUL
33224: MUL
33225: ST_TO_ADDR
// end ; unit_vehicle :
33226: GO 34054
33228: LD_INT 2
33230: DOUBLE
33231: EQUAL
33232: IFTRUE 33236
33234: GO 34042
33236: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33237: LD_VAR 0 6
33241: PPUSH
33242: CALL_OW 264
33246: PUSH
33247: LD_INT 2
33249: PUSH
33250: LD_INT 42
33252: PUSH
33253: LD_INT 24
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: LIST
33260: IN
33261: IFFALSE 33282
// points := [ 25 , 5 , 3 ] ;
33263: LD_ADDR_VAR 0 9
33267: PUSH
33268: LD_INT 25
33270: PUSH
33271: LD_INT 5
33273: PUSH
33274: LD_INT 3
33276: PUSH
33277: EMPTY
33278: LIST
33279: LIST
33280: LIST
33281: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33282: LD_VAR 0 6
33286: PPUSH
33287: CALL_OW 264
33291: PUSH
33292: LD_INT 4
33294: PUSH
33295: LD_INT 43
33297: PUSH
33298: LD_INT 25
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: LIST
33305: IN
33306: IFFALSE 33327
// points := [ 40 , 15 , 5 ] ;
33308: LD_ADDR_VAR 0 9
33312: PUSH
33313: LD_INT 40
33315: PUSH
33316: LD_INT 15
33318: PUSH
33319: LD_INT 5
33321: PUSH
33322: EMPTY
33323: LIST
33324: LIST
33325: LIST
33326: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
33327: LD_VAR 0 6
33331: PPUSH
33332: CALL_OW 264
33336: PUSH
33337: LD_INT 3
33339: PUSH
33340: LD_INT 23
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: IN
33347: IFFALSE 33368
// points := [ 7 , 25 , 8 ] ;
33349: LD_ADDR_VAR 0 9
33353: PUSH
33354: LD_INT 7
33356: PUSH
33357: LD_INT 25
33359: PUSH
33360: LD_INT 8
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: LIST
33367: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
33368: LD_VAR 0 6
33372: PPUSH
33373: CALL_OW 264
33377: PUSH
33378: LD_INT 5
33380: PUSH
33381: LD_INT 27
33383: PUSH
33384: LD_INT 44
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: LIST
33391: IN
33392: IFFALSE 33413
// points := [ 14 , 50 , 16 ] ;
33394: LD_ADDR_VAR 0 9
33398: PUSH
33399: LD_INT 14
33401: PUSH
33402: LD_INT 50
33404: PUSH
33405: LD_INT 16
33407: PUSH
33408: EMPTY
33409: LIST
33410: LIST
33411: LIST
33412: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
33413: LD_VAR 0 6
33417: PPUSH
33418: CALL_OW 264
33422: PUSH
33423: LD_INT 6
33425: PUSH
33426: LD_INT 46
33428: PUSH
33429: EMPTY
33430: LIST
33431: LIST
33432: IN
33433: IFFALSE 33454
// points := [ 32 , 120 , 70 ] ;
33435: LD_ADDR_VAR 0 9
33439: PUSH
33440: LD_INT 32
33442: PUSH
33443: LD_INT 120
33445: PUSH
33446: LD_INT 70
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: LIST
33453: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
33454: LD_VAR 0 6
33458: PPUSH
33459: CALL_OW 264
33463: PUSH
33464: LD_INT 7
33466: PUSH
33467: LD_INT 28
33469: PUSH
33470: LD_INT 45
33472: PUSH
33473: LD_INT 92
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: IN
33482: IFFALSE 33503
// points := [ 35 , 20 , 45 ] ;
33484: LD_ADDR_VAR 0 9
33488: PUSH
33489: LD_INT 35
33491: PUSH
33492: LD_INT 20
33494: PUSH
33495: LD_INT 45
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: LIST
33502: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
33503: LD_VAR 0 6
33507: PPUSH
33508: CALL_OW 264
33512: PUSH
33513: LD_INT 47
33515: PUSH
33516: EMPTY
33517: LIST
33518: IN
33519: IFFALSE 33540
// points := [ 67 , 45 , 75 ] ;
33521: LD_ADDR_VAR 0 9
33525: PUSH
33526: LD_INT 67
33528: PUSH
33529: LD_INT 45
33531: PUSH
33532: LD_INT 75
33534: PUSH
33535: EMPTY
33536: LIST
33537: LIST
33538: LIST
33539: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
33540: LD_VAR 0 6
33544: PPUSH
33545: CALL_OW 264
33549: PUSH
33550: LD_INT 26
33552: PUSH
33553: EMPTY
33554: LIST
33555: IN
33556: IFFALSE 33577
// points := [ 120 , 30 , 80 ] ;
33558: LD_ADDR_VAR 0 9
33562: PUSH
33563: LD_INT 120
33565: PUSH
33566: LD_INT 30
33568: PUSH
33569: LD_INT 80
33571: PUSH
33572: EMPTY
33573: LIST
33574: LIST
33575: LIST
33576: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
33577: LD_VAR 0 6
33581: PPUSH
33582: CALL_OW 264
33586: PUSH
33587: LD_INT 22
33589: PUSH
33590: EMPTY
33591: LIST
33592: IN
33593: IFFALSE 33614
// points := [ 40 , 1 , 1 ] ;
33595: LD_ADDR_VAR 0 9
33599: PUSH
33600: LD_INT 40
33602: PUSH
33603: LD_INT 1
33605: PUSH
33606: LD_INT 1
33608: PUSH
33609: EMPTY
33610: LIST
33611: LIST
33612: LIST
33613: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
33614: LD_VAR 0 6
33618: PPUSH
33619: CALL_OW 264
33623: PUSH
33624: LD_INT 29
33626: PUSH
33627: EMPTY
33628: LIST
33629: IN
33630: IFFALSE 33651
// points := [ 70 , 200 , 400 ] ;
33632: LD_ADDR_VAR 0 9
33636: PUSH
33637: LD_INT 70
33639: PUSH
33640: LD_INT 200
33642: PUSH
33643: LD_INT 400
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: LIST
33650: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
33651: LD_VAR 0 6
33655: PPUSH
33656: CALL_OW 264
33660: PUSH
33661: LD_INT 14
33663: PUSH
33664: LD_INT 53
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: IN
33671: IFFALSE 33692
// points := [ 40 , 10 , 20 ] ;
33673: LD_ADDR_VAR 0 9
33677: PUSH
33678: LD_INT 40
33680: PUSH
33681: LD_INT 10
33683: PUSH
33684: LD_INT 20
33686: PUSH
33687: EMPTY
33688: LIST
33689: LIST
33690: LIST
33691: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
33692: LD_VAR 0 6
33696: PPUSH
33697: CALL_OW 264
33701: PUSH
33702: LD_INT 9
33704: PUSH
33705: EMPTY
33706: LIST
33707: IN
33708: IFFALSE 33729
// points := [ 5 , 70 , 20 ] ;
33710: LD_ADDR_VAR 0 9
33714: PUSH
33715: LD_INT 5
33717: PUSH
33718: LD_INT 70
33720: PUSH
33721: LD_INT 20
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: LIST
33728: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
33729: LD_VAR 0 6
33733: PPUSH
33734: CALL_OW 264
33738: PUSH
33739: LD_INT 10
33741: PUSH
33742: EMPTY
33743: LIST
33744: IN
33745: IFFALSE 33766
// points := [ 35 , 110 , 70 ] ;
33747: LD_ADDR_VAR 0 9
33751: PUSH
33752: LD_INT 35
33754: PUSH
33755: LD_INT 110
33757: PUSH
33758: LD_INT 70
33760: PUSH
33761: EMPTY
33762: LIST
33763: LIST
33764: LIST
33765: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
33766: LD_VAR 0 6
33770: PPUSH
33771: CALL_OW 265
33775: PUSH
33776: LD_INT 25
33778: EQUAL
33779: IFFALSE 33800
// points := [ 80 , 65 , 100 ] ;
33781: LD_ADDR_VAR 0 9
33785: PUSH
33786: LD_INT 80
33788: PUSH
33789: LD_INT 65
33791: PUSH
33792: LD_INT 100
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: LIST
33799: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
33800: LD_VAR 0 6
33804: PPUSH
33805: CALL_OW 263
33809: PUSH
33810: LD_INT 1
33812: EQUAL
33813: IFFALSE 33848
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
33815: LD_ADDR_VAR 0 10
33819: PUSH
33820: LD_VAR 0 10
33824: PUSH
33825: LD_VAR 0 6
33829: PPUSH
33830: CALL_OW 311
33834: PPUSH
33835: LD_INT 3
33837: PPUSH
33838: CALL_OW 259
33842: PUSH
33843: LD_INT 4
33845: MUL
33846: MUL
33847: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
33848: LD_VAR 0 6
33852: PPUSH
33853: CALL_OW 263
33857: PUSH
33858: LD_INT 2
33860: EQUAL
33861: IFFALSE 33912
// begin j := IsControledBy ( i ) ;
33863: LD_ADDR_VAR 0 7
33867: PUSH
33868: LD_VAR 0 6
33872: PPUSH
33873: CALL_OW 312
33877: ST_TO_ADDR
// if j then
33878: LD_VAR 0 7
33882: IFFALSE 33912
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
33884: LD_ADDR_VAR 0 10
33888: PUSH
33889: LD_VAR 0 10
33893: PUSH
33894: LD_VAR 0 7
33898: PPUSH
33899: LD_INT 3
33901: PPUSH
33902: CALL_OW 259
33906: PUSH
33907: LD_INT 3
33909: MUL
33910: MUL
33911: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
33912: LD_VAR 0 6
33916: PPUSH
33917: CALL_OW 264
33921: PUSH
33922: LD_INT 5
33924: PUSH
33925: LD_INT 6
33927: PUSH
33928: LD_INT 46
33930: PUSH
33931: LD_INT 44
33933: PUSH
33934: LD_INT 47
33936: PUSH
33937: LD_INT 45
33939: PUSH
33940: LD_INT 28
33942: PUSH
33943: LD_INT 7
33945: PUSH
33946: LD_INT 27
33948: PUSH
33949: LD_INT 29
33951: PUSH
33952: EMPTY
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: LIST
33963: IN
33964: PUSH
33965: LD_VAR 0 1
33969: PPUSH
33970: LD_INT 52
33972: PPUSH
33973: CALL_OW 321
33977: PUSH
33978: LD_INT 2
33980: EQUAL
33981: AND
33982: IFFALSE 33999
// bpoints := bpoints * 1.2 ;
33984: LD_ADDR_VAR 0 10
33988: PUSH
33989: LD_VAR 0 10
33993: PUSH
33994: LD_REAL  1.20000000000000E+0000
33997: MUL
33998: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
33999: LD_VAR 0 6
34003: PPUSH
34004: CALL_OW 264
34008: PUSH
34009: LD_INT 6
34011: PUSH
34012: LD_INT 46
34014: PUSH
34015: LD_INT 47
34017: PUSH
34018: EMPTY
34019: LIST
34020: LIST
34021: LIST
34022: IN
34023: IFFALSE 34040
// bpoints := bpoints * 1.2 ;
34025: LD_ADDR_VAR 0 10
34029: PUSH
34030: LD_VAR 0 10
34034: PUSH
34035: LD_REAL  1.20000000000000E+0000
34038: MUL
34039: ST_TO_ADDR
// end ; unit_building :
34040: GO 34054
34042: LD_INT 3
34044: DOUBLE
34045: EQUAL
34046: IFTRUE 34050
34048: GO 34053
34050: POP
// ; end ;
34051: GO 34054
34053: POP
// for j = 1 to 3 do
34054: LD_ADDR_VAR 0 7
34058: PUSH
34059: DOUBLE
34060: LD_INT 1
34062: DEC
34063: ST_TO_ADDR
34064: LD_INT 3
34066: PUSH
34067: FOR_TO
34068: IFFALSE 34121
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34070: LD_ADDR_VAR 0 5
34074: PUSH
34075: LD_VAR 0 5
34079: PPUSH
34080: LD_VAR 0 7
34084: PPUSH
34085: LD_VAR 0 5
34089: PUSH
34090: LD_VAR 0 7
34094: ARRAY
34095: PUSH
34096: LD_VAR 0 9
34100: PUSH
34101: LD_VAR 0 7
34105: ARRAY
34106: PUSH
34107: LD_VAR 0 10
34111: MUL
34112: PLUS
34113: PPUSH
34114: CALL_OW 1
34118: ST_TO_ADDR
34119: GO 34067
34121: POP
34122: POP
// end ;
34123: GO 32602
34125: POP
34126: POP
// result := Replace ( result , 4 , tmp ) ;
34127: LD_ADDR_VAR 0 5
34131: PUSH
34132: LD_VAR 0 5
34136: PPUSH
34137: LD_INT 4
34139: PPUSH
34140: LD_VAR 0 8
34144: PPUSH
34145: CALL_OW 1
34149: ST_TO_ADDR
// end ;
34150: LD_VAR 0 5
34154: RET
// export function DangerAtRange ( unit , range ) ; begin
34155: LD_INT 0
34157: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34158: LD_ADDR_VAR 0 3
34162: PUSH
34163: LD_VAR 0 1
34167: PPUSH
34168: CALL_OW 255
34172: PPUSH
34173: LD_VAR 0 1
34177: PPUSH
34178: CALL_OW 250
34182: PPUSH
34183: LD_VAR 0 1
34187: PPUSH
34188: CALL_OW 251
34192: PPUSH
34193: LD_VAR 0 2
34197: PPUSH
34198: CALL 32454 0 4
34202: ST_TO_ADDR
// end ;
34203: LD_VAR 0 3
34207: RET
// export function DangerInArea ( side , area ) ; begin
34208: LD_INT 0
34210: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34211: LD_ADDR_VAR 0 3
34215: PUSH
34216: LD_VAR 0 2
34220: PPUSH
34221: LD_INT 81
34223: PUSH
34224: LD_VAR 0 1
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PPUSH
34233: CALL_OW 70
34237: ST_TO_ADDR
// end ;
34238: LD_VAR 0 3
34242: RET
// export function IsExtension ( b ) ; begin
34243: LD_INT 0
34245: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34246: LD_ADDR_VAR 0 2
34250: PUSH
34251: LD_VAR 0 1
34255: PUSH
34256: LD_INT 23
34258: PUSH
34259: LD_INT 20
34261: PUSH
34262: LD_INT 22
34264: PUSH
34265: LD_INT 17
34267: PUSH
34268: LD_INT 24
34270: PUSH
34271: LD_INT 21
34273: PUSH
34274: LD_INT 19
34276: PUSH
34277: LD_INT 16
34279: PUSH
34280: LD_INT 25
34282: PUSH
34283: LD_INT 18
34285: PUSH
34286: EMPTY
34287: LIST
34288: LIST
34289: LIST
34290: LIST
34291: LIST
34292: LIST
34293: LIST
34294: LIST
34295: LIST
34296: LIST
34297: IN
34298: ST_TO_ADDR
// end ;
34299: LD_VAR 0 2
34303: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
34304: LD_INT 0
34306: PPUSH
34307: PPUSH
34308: PPUSH
// result := [ ] ;
34309: LD_ADDR_VAR 0 4
34313: PUSH
34314: EMPTY
34315: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
34316: LD_ADDR_VAR 0 5
34320: PUSH
34321: LD_VAR 0 2
34325: PPUSH
34326: LD_INT 21
34328: PUSH
34329: LD_INT 3
34331: PUSH
34332: EMPTY
34333: LIST
34334: LIST
34335: PPUSH
34336: CALL_OW 70
34340: ST_TO_ADDR
// if not tmp then
34341: LD_VAR 0 5
34345: NOT
34346: IFFALSE 34350
// exit ;
34348: GO 34414
// if checkLink then
34350: LD_VAR 0 3
34354: IFFALSE 34404
// begin for i in tmp do
34356: LD_ADDR_VAR 0 6
34360: PUSH
34361: LD_VAR 0 5
34365: PUSH
34366: FOR_IN
34367: IFFALSE 34402
// if GetBase ( i ) <> base then
34369: LD_VAR 0 6
34373: PPUSH
34374: CALL_OW 274
34378: PUSH
34379: LD_VAR 0 1
34383: NONEQUAL
34384: IFFALSE 34400
// ComLinkToBase ( base , i ) ;
34386: LD_VAR 0 1
34390: PPUSH
34391: LD_VAR 0 6
34395: PPUSH
34396: CALL_OW 169
34400: GO 34366
34402: POP
34403: POP
// end ; result := tmp ;
34404: LD_ADDR_VAR 0 4
34408: PUSH
34409: LD_VAR 0 5
34413: ST_TO_ADDR
// end ;
34414: LD_VAR 0 4
34418: RET
// export function ComComplete ( units , b ) ; var i ; begin
34419: LD_INT 0
34421: PPUSH
34422: PPUSH
// if not units then
34423: LD_VAR 0 1
34427: NOT
34428: IFFALSE 34432
// exit ;
34430: GO 34522
// for i in units do
34432: LD_ADDR_VAR 0 4
34436: PUSH
34437: LD_VAR 0 1
34441: PUSH
34442: FOR_IN
34443: IFFALSE 34520
// if BuildingStatus ( b ) = bs_build then
34445: LD_VAR 0 2
34449: PPUSH
34450: CALL_OW 461
34454: PUSH
34455: LD_INT 1
34457: EQUAL
34458: IFFALSE 34518
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
34460: LD_VAR 0 4
34464: PPUSH
34465: LD_STRING h
34467: PUSH
34468: LD_VAR 0 2
34472: PPUSH
34473: CALL_OW 250
34477: PUSH
34478: LD_VAR 0 2
34482: PPUSH
34483: CALL_OW 251
34487: PUSH
34488: LD_VAR 0 2
34492: PUSH
34493: LD_INT 0
34495: PUSH
34496: LD_INT 0
34498: PUSH
34499: LD_INT 0
34501: PUSH
34502: EMPTY
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: LIST
34509: LIST
34510: PUSH
34511: EMPTY
34512: LIST
34513: PPUSH
34514: CALL_OW 446
34518: GO 34442
34520: POP
34521: POP
// end ;
34522: LD_VAR 0 3
34526: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
34527: LD_INT 0
34529: PPUSH
34530: PPUSH
34531: PPUSH
34532: PPUSH
34533: PPUSH
34534: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
34535: LD_VAR 0 1
34539: NOT
34540: PUSH
34541: LD_VAR 0 1
34545: PPUSH
34546: CALL_OW 263
34550: PUSH
34551: LD_INT 2
34553: NONEQUAL
34554: OR
34555: IFFALSE 34559
// exit ;
34557: GO 34875
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
34559: LD_ADDR_VAR 0 6
34563: PUSH
34564: LD_INT 22
34566: PUSH
34567: LD_VAR 0 1
34571: PPUSH
34572: CALL_OW 255
34576: PUSH
34577: EMPTY
34578: LIST
34579: LIST
34580: PUSH
34581: LD_INT 2
34583: PUSH
34584: LD_INT 30
34586: PUSH
34587: LD_INT 36
34589: PUSH
34590: EMPTY
34591: LIST
34592: LIST
34593: PUSH
34594: LD_INT 34
34596: PUSH
34597: LD_INT 31
34599: PUSH
34600: EMPTY
34601: LIST
34602: LIST
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: LIST
34608: PUSH
34609: EMPTY
34610: LIST
34611: LIST
34612: PPUSH
34613: CALL_OW 69
34617: ST_TO_ADDR
// if not tmp then
34618: LD_VAR 0 6
34622: NOT
34623: IFFALSE 34627
// exit ;
34625: GO 34875
// result := [ ] ;
34627: LD_ADDR_VAR 0 2
34631: PUSH
34632: EMPTY
34633: ST_TO_ADDR
// for i in tmp do
34634: LD_ADDR_VAR 0 3
34638: PUSH
34639: LD_VAR 0 6
34643: PUSH
34644: FOR_IN
34645: IFFALSE 34716
// begin t := UnitsInside ( i ) ;
34647: LD_ADDR_VAR 0 4
34651: PUSH
34652: LD_VAR 0 3
34656: PPUSH
34657: CALL_OW 313
34661: ST_TO_ADDR
// if t then
34662: LD_VAR 0 4
34666: IFFALSE 34714
// for j in t do
34668: LD_ADDR_VAR 0 7
34672: PUSH
34673: LD_VAR 0 4
34677: PUSH
34678: FOR_IN
34679: IFFALSE 34712
// result := Replace ( result , result + 1 , j ) ;
34681: LD_ADDR_VAR 0 2
34685: PUSH
34686: LD_VAR 0 2
34690: PPUSH
34691: LD_VAR 0 2
34695: PUSH
34696: LD_INT 1
34698: PLUS
34699: PPUSH
34700: LD_VAR 0 7
34704: PPUSH
34705: CALL_OW 1
34709: ST_TO_ADDR
34710: GO 34678
34712: POP
34713: POP
// end ;
34714: GO 34644
34716: POP
34717: POP
// if not result then
34718: LD_VAR 0 2
34722: NOT
34723: IFFALSE 34727
// exit ;
34725: GO 34875
// mech := result [ 1 ] ;
34727: LD_ADDR_VAR 0 5
34731: PUSH
34732: LD_VAR 0 2
34736: PUSH
34737: LD_INT 1
34739: ARRAY
34740: ST_TO_ADDR
// if result > 1 then
34741: LD_VAR 0 2
34745: PUSH
34746: LD_INT 1
34748: GREATER
34749: IFFALSE 34861
// begin for i = 2 to result do
34751: LD_ADDR_VAR 0 3
34755: PUSH
34756: DOUBLE
34757: LD_INT 2
34759: DEC
34760: ST_TO_ADDR
34761: LD_VAR 0 2
34765: PUSH
34766: FOR_TO
34767: IFFALSE 34859
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
34769: LD_ADDR_VAR 0 4
34773: PUSH
34774: LD_VAR 0 2
34778: PUSH
34779: LD_VAR 0 3
34783: ARRAY
34784: PPUSH
34785: LD_INT 3
34787: PPUSH
34788: CALL_OW 259
34792: PUSH
34793: LD_VAR 0 2
34797: PUSH
34798: LD_VAR 0 3
34802: ARRAY
34803: PPUSH
34804: CALL_OW 432
34808: MINUS
34809: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
34810: LD_VAR 0 4
34814: PUSH
34815: LD_VAR 0 5
34819: PPUSH
34820: LD_INT 3
34822: PPUSH
34823: CALL_OW 259
34827: PUSH
34828: LD_VAR 0 5
34832: PPUSH
34833: CALL_OW 432
34837: MINUS
34838: GREATEREQUAL
34839: IFFALSE 34857
// mech := result [ i ] ;
34841: LD_ADDR_VAR 0 5
34845: PUSH
34846: LD_VAR 0 2
34850: PUSH
34851: LD_VAR 0 3
34855: ARRAY
34856: ST_TO_ADDR
// end ;
34857: GO 34766
34859: POP
34860: POP
// end ; ComLinkTo ( vehicle , mech ) ;
34861: LD_VAR 0 1
34865: PPUSH
34866: LD_VAR 0 5
34870: PPUSH
34871: CALL_OW 135
// end ;
34875: LD_VAR 0 2
34879: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
34880: LD_INT 0
34882: PPUSH
34883: PPUSH
34884: PPUSH
34885: PPUSH
34886: PPUSH
34887: PPUSH
34888: PPUSH
34889: PPUSH
34890: PPUSH
34891: PPUSH
34892: PPUSH
34893: PPUSH
34894: PPUSH
// result := [ ] ;
34895: LD_ADDR_VAR 0 7
34899: PUSH
34900: EMPTY
34901: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
34902: LD_VAR 0 1
34906: PPUSH
34907: CALL_OW 266
34911: PUSH
34912: LD_INT 0
34914: PUSH
34915: LD_INT 1
34917: PUSH
34918: EMPTY
34919: LIST
34920: LIST
34921: IN
34922: NOT
34923: IFFALSE 34927
// exit ;
34925: GO 36561
// if name then
34927: LD_VAR 0 3
34931: IFFALSE 34947
// SetBName ( base_dep , name ) ;
34933: LD_VAR 0 1
34937: PPUSH
34938: LD_VAR 0 3
34942: PPUSH
34943: CALL_OW 500
// base := GetBase ( base_dep ) ;
34947: LD_ADDR_VAR 0 15
34951: PUSH
34952: LD_VAR 0 1
34956: PPUSH
34957: CALL_OW 274
34961: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
34962: LD_ADDR_VAR 0 16
34966: PUSH
34967: LD_VAR 0 1
34971: PPUSH
34972: CALL_OW 255
34976: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
34977: LD_ADDR_VAR 0 17
34981: PUSH
34982: LD_VAR 0 1
34986: PPUSH
34987: CALL_OW 248
34991: ST_TO_ADDR
// if sources then
34992: LD_VAR 0 5
34996: IFFALSE 35043
// for i = 1 to 3 do
34998: LD_ADDR_VAR 0 8
35002: PUSH
35003: DOUBLE
35004: LD_INT 1
35006: DEC
35007: ST_TO_ADDR
35008: LD_INT 3
35010: PUSH
35011: FOR_TO
35012: IFFALSE 35041
// AddResourceType ( base , i , sources [ i ] ) ;
35014: LD_VAR 0 15
35018: PPUSH
35019: LD_VAR 0 8
35023: PPUSH
35024: LD_VAR 0 5
35028: PUSH
35029: LD_VAR 0 8
35033: ARRAY
35034: PPUSH
35035: CALL_OW 276
35039: GO 35011
35041: POP
35042: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35043: LD_ADDR_VAR 0 18
35047: PUSH
35048: LD_VAR 0 15
35052: PPUSH
35053: LD_VAR 0 2
35057: PPUSH
35058: LD_INT 1
35060: PPUSH
35061: CALL 34304 0 3
35065: ST_TO_ADDR
// InitHc ;
35066: CALL_OW 19
// InitUc ;
35070: CALL_OW 18
// uc_side := side ;
35074: LD_ADDR_OWVAR 20
35078: PUSH
35079: LD_VAR 0 16
35083: ST_TO_ADDR
// uc_nation := nation ;
35084: LD_ADDR_OWVAR 21
35088: PUSH
35089: LD_VAR 0 17
35093: ST_TO_ADDR
// if buildings then
35094: LD_VAR 0 18
35098: IFFALSE 36420
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35100: LD_ADDR_VAR 0 19
35104: PUSH
35105: LD_VAR 0 18
35109: PPUSH
35110: LD_INT 2
35112: PUSH
35113: LD_INT 30
35115: PUSH
35116: LD_INT 29
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: PUSH
35123: LD_INT 30
35125: PUSH
35126: LD_INT 30
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: PUSH
35133: EMPTY
35134: LIST
35135: LIST
35136: LIST
35137: PPUSH
35138: CALL_OW 72
35142: ST_TO_ADDR
// if tmp then
35143: LD_VAR 0 19
35147: IFFALSE 35195
// for i in tmp do
35149: LD_ADDR_VAR 0 8
35153: PUSH
35154: LD_VAR 0 19
35158: PUSH
35159: FOR_IN
35160: IFFALSE 35193
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35162: LD_VAR 0 8
35166: PPUSH
35167: CALL_OW 250
35171: PPUSH
35172: LD_VAR 0 8
35176: PPUSH
35177: CALL_OW 251
35181: PPUSH
35182: LD_VAR 0 16
35186: PPUSH
35187: CALL_OW 441
35191: GO 35159
35193: POP
35194: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35195: LD_VAR 0 18
35199: PPUSH
35200: LD_INT 2
35202: PUSH
35203: LD_INT 30
35205: PUSH
35206: LD_INT 32
35208: PUSH
35209: EMPTY
35210: LIST
35211: LIST
35212: PUSH
35213: LD_INT 30
35215: PUSH
35216: LD_INT 33
35218: PUSH
35219: EMPTY
35220: LIST
35221: LIST
35222: PUSH
35223: EMPTY
35224: LIST
35225: LIST
35226: LIST
35227: PPUSH
35228: CALL_OW 72
35232: IFFALSE 35320
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35234: LD_ADDR_VAR 0 8
35238: PUSH
35239: LD_VAR 0 18
35243: PPUSH
35244: LD_INT 2
35246: PUSH
35247: LD_INT 30
35249: PUSH
35250: LD_INT 32
35252: PUSH
35253: EMPTY
35254: LIST
35255: LIST
35256: PUSH
35257: LD_INT 30
35259: PUSH
35260: LD_INT 33
35262: PUSH
35263: EMPTY
35264: LIST
35265: LIST
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: LIST
35271: PPUSH
35272: CALL_OW 72
35276: PUSH
35277: FOR_IN
35278: IFFALSE 35318
// begin if not GetBWeapon ( i ) then
35280: LD_VAR 0 8
35284: PPUSH
35285: CALL_OW 269
35289: NOT
35290: IFFALSE 35316
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35292: LD_VAR 0 8
35296: PPUSH
35297: LD_VAR 0 8
35301: PPUSH
35302: LD_VAR 0 2
35306: PPUSH
35307: CALL 36566 0 2
35311: PPUSH
35312: CALL_OW 431
// end ;
35316: GO 35277
35318: POP
35319: POP
// end ; for i = 1 to personel do
35320: LD_ADDR_VAR 0 8
35324: PUSH
35325: DOUBLE
35326: LD_INT 1
35328: DEC
35329: ST_TO_ADDR
35330: LD_VAR 0 6
35334: PUSH
35335: FOR_TO
35336: IFFALSE 36400
// begin if i > 4 then
35338: LD_VAR 0 8
35342: PUSH
35343: LD_INT 4
35345: GREATER
35346: IFFALSE 35350
// break ;
35348: GO 36400
// case i of 1 :
35350: LD_VAR 0 8
35354: PUSH
35355: LD_INT 1
35357: DOUBLE
35358: EQUAL
35359: IFTRUE 35363
35361: GO 35443
35363: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
35364: LD_ADDR_VAR 0 12
35368: PUSH
35369: LD_VAR 0 18
35373: PPUSH
35374: LD_INT 22
35376: PUSH
35377: LD_VAR 0 16
35381: PUSH
35382: EMPTY
35383: LIST
35384: LIST
35385: PUSH
35386: LD_INT 58
35388: PUSH
35389: EMPTY
35390: LIST
35391: PUSH
35392: LD_INT 2
35394: PUSH
35395: LD_INT 30
35397: PUSH
35398: LD_INT 32
35400: PUSH
35401: EMPTY
35402: LIST
35403: LIST
35404: PUSH
35405: LD_INT 30
35407: PUSH
35408: LD_INT 4
35410: PUSH
35411: EMPTY
35412: LIST
35413: LIST
35414: PUSH
35415: LD_INT 30
35417: PUSH
35418: LD_INT 5
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: PUSH
35425: EMPTY
35426: LIST
35427: LIST
35428: LIST
35429: LIST
35430: PUSH
35431: EMPTY
35432: LIST
35433: LIST
35434: LIST
35435: PPUSH
35436: CALL_OW 72
35440: ST_TO_ADDR
35441: GO 35665
35443: LD_INT 2
35445: DOUBLE
35446: EQUAL
35447: IFTRUE 35451
35449: GO 35513
35451: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
35452: LD_ADDR_VAR 0 12
35456: PUSH
35457: LD_VAR 0 18
35461: PPUSH
35462: LD_INT 22
35464: PUSH
35465: LD_VAR 0 16
35469: PUSH
35470: EMPTY
35471: LIST
35472: LIST
35473: PUSH
35474: LD_INT 2
35476: PUSH
35477: LD_INT 30
35479: PUSH
35480: LD_INT 0
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: PUSH
35487: LD_INT 30
35489: PUSH
35490: LD_INT 1
35492: PUSH
35493: EMPTY
35494: LIST
35495: LIST
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: LIST
35501: PUSH
35502: EMPTY
35503: LIST
35504: LIST
35505: PPUSH
35506: CALL_OW 72
35510: ST_TO_ADDR
35511: GO 35665
35513: LD_INT 3
35515: DOUBLE
35516: EQUAL
35517: IFTRUE 35521
35519: GO 35583
35521: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
35522: LD_ADDR_VAR 0 12
35526: PUSH
35527: LD_VAR 0 18
35531: PPUSH
35532: LD_INT 22
35534: PUSH
35535: LD_VAR 0 16
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: PUSH
35544: LD_INT 2
35546: PUSH
35547: LD_INT 30
35549: PUSH
35550: LD_INT 2
35552: PUSH
35553: EMPTY
35554: LIST
35555: LIST
35556: PUSH
35557: LD_INT 30
35559: PUSH
35560: LD_INT 3
35562: PUSH
35563: EMPTY
35564: LIST
35565: LIST
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: LIST
35571: PUSH
35572: EMPTY
35573: LIST
35574: LIST
35575: PPUSH
35576: CALL_OW 72
35580: ST_TO_ADDR
35581: GO 35665
35583: LD_INT 4
35585: DOUBLE
35586: EQUAL
35587: IFTRUE 35591
35589: GO 35664
35591: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
35592: LD_ADDR_VAR 0 12
35596: PUSH
35597: LD_VAR 0 18
35601: PPUSH
35602: LD_INT 22
35604: PUSH
35605: LD_VAR 0 16
35609: PUSH
35610: EMPTY
35611: LIST
35612: LIST
35613: PUSH
35614: LD_INT 2
35616: PUSH
35617: LD_INT 30
35619: PUSH
35620: LD_INT 6
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: PUSH
35627: LD_INT 30
35629: PUSH
35630: LD_INT 7
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: PUSH
35637: LD_INT 30
35639: PUSH
35640: LD_INT 8
35642: PUSH
35643: EMPTY
35644: LIST
35645: LIST
35646: PUSH
35647: EMPTY
35648: LIST
35649: LIST
35650: LIST
35651: LIST
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: PPUSH
35657: CALL_OW 72
35661: ST_TO_ADDR
35662: GO 35665
35664: POP
// if i = 1 then
35665: LD_VAR 0 8
35669: PUSH
35670: LD_INT 1
35672: EQUAL
35673: IFFALSE 35784
// begin tmp := [ ] ;
35675: LD_ADDR_VAR 0 19
35679: PUSH
35680: EMPTY
35681: ST_TO_ADDR
// for j in f do
35682: LD_ADDR_VAR 0 9
35686: PUSH
35687: LD_VAR 0 12
35691: PUSH
35692: FOR_IN
35693: IFFALSE 35766
// if GetBType ( j ) = b_bunker then
35695: LD_VAR 0 9
35699: PPUSH
35700: CALL_OW 266
35704: PUSH
35705: LD_INT 32
35707: EQUAL
35708: IFFALSE 35735
// tmp := Insert ( tmp , 1 , j ) else
35710: LD_ADDR_VAR 0 19
35714: PUSH
35715: LD_VAR 0 19
35719: PPUSH
35720: LD_INT 1
35722: PPUSH
35723: LD_VAR 0 9
35727: PPUSH
35728: CALL_OW 2
35732: ST_TO_ADDR
35733: GO 35764
// tmp := Insert ( tmp , tmp + 1 , j ) ;
35735: LD_ADDR_VAR 0 19
35739: PUSH
35740: LD_VAR 0 19
35744: PPUSH
35745: LD_VAR 0 19
35749: PUSH
35750: LD_INT 1
35752: PLUS
35753: PPUSH
35754: LD_VAR 0 9
35758: PPUSH
35759: CALL_OW 2
35763: ST_TO_ADDR
35764: GO 35692
35766: POP
35767: POP
// if tmp then
35768: LD_VAR 0 19
35772: IFFALSE 35784
// f := tmp ;
35774: LD_ADDR_VAR 0 12
35778: PUSH
35779: LD_VAR 0 19
35783: ST_TO_ADDR
// end ; x := personel [ i ] ;
35784: LD_ADDR_VAR 0 13
35788: PUSH
35789: LD_VAR 0 6
35793: PUSH
35794: LD_VAR 0 8
35798: ARRAY
35799: ST_TO_ADDR
// if x = - 1 then
35800: LD_VAR 0 13
35804: PUSH
35805: LD_INT 1
35807: NEG
35808: EQUAL
35809: IFFALSE 36018
// begin for j in f do
35811: LD_ADDR_VAR 0 9
35815: PUSH
35816: LD_VAR 0 12
35820: PUSH
35821: FOR_IN
35822: IFFALSE 36014
// repeat InitHc ;
35824: CALL_OW 19
// if GetBType ( j ) = b_barracks then
35828: LD_VAR 0 9
35832: PPUSH
35833: CALL_OW 266
35837: PUSH
35838: LD_INT 5
35840: EQUAL
35841: IFFALSE 35911
// begin if UnitsInside ( j ) < 3 then
35843: LD_VAR 0 9
35847: PPUSH
35848: CALL_OW 313
35852: PUSH
35853: LD_INT 3
35855: LESS
35856: IFFALSE 35892
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35858: LD_INT 0
35860: PPUSH
35861: LD_INT 5
35863: PUSH
35864: LD_INT 8
35866: PUSH
35867: LD_INT 9
35869: PUSH
35870: EMPTY
35871: LIST
35872: LIST
35873: LIST
35874: PUSH
35875: LD_VAR 0 17
35879: ARRAY
35880: PPUSH
35881: LD_VAR 0 4
35885: PPUSH
35886: CALL_OW 380
35890: GO 35909
// PrepareHuman ( false , i , skill ) ;
35892: LD_INT 0
35894: PPUSH
35895: LD_VAR 0 8
35899: PPUSH
35900: LD_VAR 0 4
35904: PPUSH
35905: CALL_OW 380
// end else
35909: GO 35928
// PrepareHuman ( false , i , skill ) ;
35911: LD_INT 0
35913: PPUSH
35914: LD_VAR 0 8
35918: PPUSH
35919: LD_VAR 0 4
35923: PPUSH
35924: CALL_OW 380
// un := CreateHuman ;
35928: LD_ADDR_VAR 0 14
35932: PUSH
35933: CALL_OW 44
35937: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35938: LD_ADDR_VAR 0 7
35942: PUSH
35943: LD_VAR 0 7
35947: PPUSH
35948: LD_INT 1
35950: PPUSH
35951: LD_VAR 0 14
35955: PPUSH
35956: CALL_OW 2
35960: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
35961: LD_VAR 0 14
35965: PPUSH
35966: LD_VAR 0 9
35970: PPUSH
35971: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
35975: LD_VAR 0 9
35979: PPUSH
35980: CALL_OW 313
35984: PUSH
35985: LD_INT 6
35987: EQUAL
35988: PUSH
35989: LD_VAR 0 9
35993: PPUSH
35994: CALL_OW 266
35998: PUSH
35999: LD_INT 32
36001: PUSH
36002: LD_INT 31
36004: PUSH
36005: EMPTY
36006: LIST
36007: LIST
36008: IN
36009: OR
36010: IFFALSE 35824
36012: GO 35821
36014: POP
36015: POP
// end else
36016: GO 36398
// for j = 1 to x do
36018: LD_ADDR_VAR 0 9
36022: PUSH
36023: DOUBLE
36024: LD_INT 1
36026: DEC
36027: ST_TO_ADDR
36028: LD_VAR 0 13
36032: PUSH
36033: FOR_TO
36034: IFFALSE 36396
// begin InitHc ;
36036: CALL_OW 19
// if not f then
36040: LD_VAR 0 12
36044: NOT
36045: IFFALSE 36134
// begin PrepareHuman ( false , i , skill ) ;
36047: LD_INT 0
36049: PPUSH
36050: LD_VAR 0 8
36054: PPUSH
36055: LD_VAR 0 4
36059: PPUSH
36060: CALL_OW 380
// un := CreateHuman ;
36064: LD_ADDR_VAR 0 14
36068: PUSH
36069: CALL_OW 44
36073: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36074: LD_ADDR_VAR 0 7
36078: PUSH
36079: LD_VAR 0 7
36083: PPUSH
36084: LD_INT 1
36086: PPUSH
36087: LD_VAR 0 14
36091: PPUSH
36092: CALL_OW 2
36096: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36097: LD_VAR 0 14
36101: PPUSH
36102: LD_VAR 0 1
36106: PPUSH
36107: CALL_OW 250
36111: PPUSH
36112: LD_VAR 0 1
36116: PPUSH
36117: CALL_OW 251
36121: PPUSH
36122: LD_INT 10
36124: PPUSH
36125: LD_INT 0
36127: PPUSH
36128: CALL_OW 50
// continue ;
36132: GO 36033
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36134: LD_VAR 0 12
36138: PUSH
36139: LD_INT 1
36141: ARRAY
36142: PPUSH
36143: CALL_OW 313
36147: PUSH
36148: LD_VAR 0 12
36152: PUSH
36153: LD_INT 1
36155: ARRAY
36156: PPUSH
36157: CALL_OW 266
36161: PUSH
36162: LD_INT 32
36164: PUSH
36165: LD_INT 31
36167: PUSH
36168: EMPTY
36169: LIST
36170: LIST
36171: IN
36172: AND
36173: PUSH
36174: LD_VAR 0 12
36178: PUSH
36179: LD_INT 1
36181: ARRAY
36182: PPUSH
36183: CALL_OW 313
36187: PUSH
36188: LD_INT 6
36190: EQUAL
36191: OR
36192: IFFALSE 36212
// f := Delete ( f , 1 ) ;
36194: LD_ADDR_VAR 0 12
36198: PUSH
36199: LD_VAR 0 12
36203: PPUSH
36204: LD_INT 1
36206: PPUSH
36207: CALL_OW 3
36211: ST_TO_ADDR
// if not f then
36212: LD_VAR 0 12
36216: NOT
36217: IFFALSE 36235
// begin x := x + 2 ;
36219: LD_ADDR_VAR 0 13
36223: PUSH
36224: LD_VAR 0 13
36228: PUSH
36229: LD_INT 2
36231: PLUS
36232: ST_TO_ADDR
// continue ;
36233: GO 36033
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36235: LD_VAR 0 12
36239: PUSH
36240: LD_INT 1
36242: ARRAY
36243: PPUSH
36244: CALL_OW 266
36248: PUSH
36249: LD_INT 5
36251: EQUAL
36252: IFFALSE 36326
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36254: LD_VAR 0 12
36258: PUSH
36259: LD_INT 1
36261: ARRAY
36262: PPUSH
36263: CALL_OW 313
36267: PUSH
36268: LD_INT 3
36270: LESS
36271: IFFALSE 36307
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36273: LD_INT 0
36275: PPUSH
36276: LD_INT 5
36278: PUSH
36279: LD_INT 8
36281: PUSH
36282: LD_INT 9
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: LIST
36289: PUSH
36290: LD_VAR 0 17
36294: ARRAY
36295: PPUSH
36296: LD_VAR 0 4
36300: PPUSH
36301: CALL_OW 380
36305: GO 36324
// PrepareHuman ( false , i , skill ) ;
36307: LD_INT 0
36309: PPUSH
36310: LD_VAR 0 8
36314: PPUSH
36315: LD_VAR 0 4
36319: PPUSH
36320: CALL_OW 380
// end else
36324: GO 36343
// PrepareHuman ( false , i , skill ) ;
36326: LD_INT 0
36328: PPUSH
36329: LD_VAR 0 8
36333: PPUSH
36334: LD_VAR 0 4
36338: PPUSH
36339: CALL_OW 380
// un := CreateHuman ;
36343: LD_ADDR_VAR 0 14
36347: PUSH
36348: CALL_OW 44
36352: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36353: LD_ADDR_VAR 0 7
36357: PUSH
36358: LD_VAR 0 7
36362: PPUSH
36363: LD_INT 1
36365: PPUSH
36366: LD_VAR 0 14
36370: PPUSH
36371: CALL_OW 2
36375: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
36376: LD_VAR 0 14
36380: PPUSH
36381: LD_VAR 0 12
36385: PUSH
36386: LD_INT 1
36388: ARRAY
36389: PPUSH
36390: CALL_OW 52
// end ;
36394: GO 36033
36396: POP
36397: POP
// end ;
36398: GO 35335
36400: POP
36401: POP
// result := result ^ buildings ;
36402: LD_ADDR_VAR 0 7
36406: PUSH
36407: LD_VAR 0 7
36411: PUSH
36412: LD_VAR 0 18
36416: ADD
36417: ST_TO_ADDR
// end else
36418: GO 36561
// begin for i = 1 to personel do
36420: LD_ADDR_VAR 0 8
36424: PUSH
36425: DOUBLE
36426: LD_INT 1
36428: DEC
36429: ST_TO_ADDR
36430: LD_VAR 0 6
36434: PUSH
36435: FOR_TO
36436: IFFALSE 36559
// begin if i > 4 then
36438: LD_VAR 0 8
36442: PUSH
36443: LD_INT 4
36445: GREATER
36446: IFFALSE 36450
// break ;
36448: GO 36559
// x := personel [ i ] ;
36450: LD_ADDR_VAR 0 13
36454: PUSH
36455: LD_VAR 0 6
36459: PUSH
36460: LD_VAR 0 8
36464: ARRAY
36465: ST_TO_ADDR
// if x = - 1 then
36466: LD_VAR 0 13
36470: PUSH
36471: LD_INT 1
36473: NEG
36474: EQUAL
36475: IFFALSE 36479
// continue ;
36477: GO 36435
// PrepareHuman ( false , i , skill ) ;
36479: LD_INT 0
36481: PPUSH
36482: LD_VAR 0 8
36486: PPUSH
36487: LD_VAR 0 4
36491: PPUSH
36492: CALL_OW 380
// un := CreateHuman ;
36496: LD_ADDR_VAR 0 14
36500: PUSH
36501: CALL_OW 44
36505: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36506: LD_VAR 0 14
36510: PPUSH
36511: LD_VAR 0 1
36515: PPUSH
36516: CALL_OW 250
36520: PPUSH
36521: LD_VAR 0 1
36525: PPUSH
36526: CALL_OW 251
36530: PPUSH
36531: LD_INT 10
36533: PPUSH
36534: LD_INT 0
36536: PPUSH
36537: CALL_OW 50
// result := result ^ un ;
36541: LD_ADDR_VAR 0 7
36545: PUSH
36546: LD_VAR 0 7
36550: PUSH
36551: LD_VAR 0 14
36555: ADD
36556: ST_TO_ADDR
// end ;
36557: GO 36435
36559: POP
36560: POP
// end ; end ;
36561: LD_VAR 0 7
36565: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
36566: LD_INT 0
36568: PPUSH
36569: PPUSH
36570: PPUSH
36571: PPUSH
36572: PPUSH
36573: PPUSH
36574: PPUSH
36575: PPUSH
36576: PPUSH
36577: PPUSH
36578: PPUSH
36579: PPUSH
36580: PPUSH
36581: PPUSH
36582: PPUSH
36583: PPUSH
// result := false ;
36584: LD_ADDR_VAR 0 3
36588: PUSH
36589: LD_INT 0
36591: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
36592: LD_VAR 0 1
36596: NOT
36597: PUSH
36598: LD_VAR 0 1
36602: PPUSH
36603: CALL_OW 266
36607: PUSH
36608: LD_INT 32
36610: PUSH
36611: LD_INT 33
36613: PUSH
36614: EMPTY
36615: LIST
36616: LIST
36617: IN
36618: NOT
36619: OR
36620: IFFALSE 36624
// exit ;
36622: GO 37733
// nat := GetNation ( tower ) ;
36624: LD_ADDR_VAR 0 12
36628: PUSH
36629: LD_VAR 0 1
36633: PPUSH
36634: CALL_OW 248
36638: ST_TO_ADDR
// side := GetSide ( tower ) ;
36639: LD_ADDR_VAR 0 16
36643: PUSH
36644: LD_VAR 0 1
36648: PPUSH
36649: CALL_OW 255
36653: ST_TO_ADDR
// x := GetX ( tower ) ;
36654: LD_ADDR_VAR 0 10
36658: PUSH
36659: LD_VAR 0 1
36663: PPUSH
36664: CALL_OW 250
36668: ST_TO_ADDR
// y := GetY ( tower ) ;
36669: LD_ADDR_VAR 0 11
36673: PUSH
36674: LD_VAR 0 1
36678: PPUSH
36679: CALL_OW 251
36683: ST_TO_ADDR
// if not x or not y then
36684: LD_VAR 0 10
36688: NOT
36689: PUSH
36690: LD_VAR 0 11
36694: NOT
36695: OR
36696: IFFALSE 36700
// exit ;
36698: GO 37733
// weapon := 0 ;
36700: LD_ADDR_VAR 0 18
36704: PUSH
36705: LD_INT 0
36707: ST_TO_ADDR
// fac_list := [ ] ;
36708: LD_ADDR_VAR 0 17
36712: PUSH
36713: EMPTY
36714: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
36715: LD_ADDR_VAR 0 6
36719: PUSH
36720: LD_VAR 0 1
36724: PPUSH
36725: CALL_OW 274
36729: PPUSH
36730: LD_VAR 0 2
36734: PPUSH
36735: LD_INT 0
36737: PPUSH
36738: CALL 34304 0 3
36742: PPUSH
36743: LD_INT 30
36745: PUSH
36746: LD_INT 3
36748: PUSH
36749: EMPTY
36750: LIST
36751: LIST
36752: PPUSH
36753: CALL_OW 72
36757: ST_TO_ADDR
// if not factories then
36758: LD_VAR 0 6
36762: NOT
36763: IFFALSE 36767
// exit ;
36765: GO 37733
// for i in factories do
36767: LD_ADDR_VAR 0 8
36771: PUSH
36772: LD_VAR 0 6
36776: PUSH
36777: FOR_IN
36778: IFFALSE 36803
// fac_list := fac_list union AvailableWeaponList ( i ) ;
36780: LD_ADDR_VAR 0 17
36784: PUSH
36785: LD_VAR 0 17
36789: PUSH
36790: LD_VAR 0 8
36794: PPUSH
36795: CALL_OW 478
36799: UNION
36800: ST_TO_ADDR
36801: GO 36777
36803: POP
36804: POP
// if not fac_list then
36805: LD_VAR 0 17
36809: NOT
36810: IFFALSE 36814
// exit ;
36812: GO 37733
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
36814: LD_ADDR_VAR 0 5
36818: PUSH
36819: LD_INT 4
36821: PUSH
36822: LD_INT 5
36824: PUSH
36825: LD_INT 9
36827: PUSH
36828: LD_INT 10
36830: PUSH
36831: LD_INT 6
36833: PUSH
36834: LD_INT 7
36836: PUSH
36837: LD_INT 11
36839: PUSH
36840: EMPTY
36841: LIST
36842: LIST
36843: LIST
36844: LIST
36845: LIST
36846: LIST
36847: LIST
36848: PUSH
36849: LD_INT 27
36851: PUSH
36852: LD_INT 28
36854: PUSH
36855: LD_INT 26
36857: PUSH
36858: LD_INT 30
36860: PUSH
36861: EMPTY
36862: LIST
36863: LIST
36864: LIST
36865: LIST
36866: PUSH
36867: LD_INT 43
36869: PUSH
36870: LD_INT 44
36872: PUSH
36873: LD_INT 46
36875: PUSH
36876: LD_INT 45
36878: PUSH
36879: LD_INT 47
36881: PUSH
36882: LD_INT 49
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: LIST
36889: LIST
36890: LIST
36891: LIST
36892: PUSH
36893: EMPTY
36894: LIST
36895: LIST
36896: LIST
36897: PUSH
36898: LD_VAR 0 12
36902: ARRAY
36903: ST_TO_ADDR
// list := list isect fac_list ;
36904: LD_ADDR_VAR 0 5
36908: PUSH
36909: LD_VAR 0 5
36913: PUSH
36914: LD_VAR 0 17
36918: ISECT
36919: ST_TO_ADDR
// if not list then
36920: LD_VAR 0 5
36924: NOT
36925: IFFALSE 36929
// exit ;
36927: GO 37733
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
36929: LD_VAR 0 12
36933: PUSH
36934: LD_INT 3
36936: EQUAL
36937: PUSH
36938: LD_INT 49
36940: PUSH
36941: LD_VAR 0 5
36945: IN
36946: AND
36947: PUSH
36948: LD_INT 31
36950: PPUSH
36951: LD_VAR 0 16
36955: PPUSH
36956: CALL_OW 321
36960: PUSH
36961: LD_INT 2
36963: EQUAL
36964: AND
36965: IFFALSE 37025
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
36967: LD_INT 22
36969: PUSH
36970: LD_VAR 0 16
36974: PUSH
36975: EMPTY
36976: LIST
36977: LIST
36978: PUSH
36979: LD_INT 35
36981: PUSH
36982: LD_INT 49
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: PUSH
36989: LD_INT 91
36991: PUSH
36992: LD_VAR 0 1
36996: PUSH
36997: LD_INT 10
36999: PUSH
37000: EMPTY
37001: LIST
37002: LIST
37003: LIST
37004: PUSH
37005: EMPTY
37006: LIST
37007: LIST
37008: LIST
37009: PPUSH
37010: CALL_OW 69
37014: NOT
37015: IFFALSE 37025
// weapon := ru_time_lapser ;
37017: LD_ADDR_VAR 0 18
37021: PUSH
37022: LD_INT 49
37024: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37025: LD_VAR 0 12
37029: PUSH
37030: LD_INT 1
37032: PUSH
37033: LD_INT 2
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: IN
37040: PUSH
37041: LD_INT 11
37043: PUSH
37044: LD_VAR 0 5
37048: IN
37049: PUSH
37050: LD_INT 30
37052: PUSH
37053: LD_VAR 0 5
37057: IN
37058: OR
37059: AND
37060: PUSH
37061: LD_INT 6
37063: PPUSH
37064: LD_VAR 0 16
37068: PPUSH
37069: CALL_OW 321
37073: PUSH
37074: LD_INT 2
37076: EQUAL
37077: AND
37078: IFFALSE 37243
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37080: LD_INT 22
37082: PUSH
37083: LD_VAR 0 16
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: PUSH
37092: LD_INT 2
37094: PUSH
37095: LD_INT 35
37097: PUSH
37098: LD_INT 11
37100: PUSH
37101: EMPTY
37102: LIST
37103: LIST
37104: PUSH
37105: LD_INT 35
37107: PUSH
37108: LD_INT 30
37110: PUSH
37111: EMPTY
37112: LIST
37113: LIST
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: LIST
37119: PUSH
37120: LD_INT 91
37122: PUSH
37123: LD_VAR 0 1
37127: PUSH
37128: LD_INT 18
37130: PUSH
37131: EMPTY
37132: LIST
37133: LIST
37134: LIST
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: LIST
37140: PPUSH
37141: CALL_OW 69
37145: NOT
37146: PUSH
37147: LD_INT 22
37149: PUSH
37150: LD_VAR 0 16
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: PUSH
37159: LD_INT 2
37161: PUSH
37162: LD_INT 30
37164: PUSH
37165: LD_INT 32
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: PUSH
37172: LD_INT 30
37174: PUSH
37175: LD_INT 33
37177: PUSH
37178: EMPTY
37179: LIST
37180: LIST
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: LIST
37186: PUSH
37187: LD_INT 91
37189: PUSH
37190: LD_VAR 0 1
37194: PUSH
37195: LD_INT 12
37197: PUSH
37198: EMPTY
37199: LIST
37200: LIST
37201: LIST
37202: PUSH
37203: EMPTY
37204: LIST
37205: LIST
37206: LIST
37207: PUSH
37208: EMPTY
37209: LIST
37210: PPUSH
37211: CALL_OW 69
37215: PUSH
37216: LD_INT 2
37218: GREATER
37219: AND
37220: IFFALSE 37243
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37222: LD_ADDR_VAR 0 18
37226: PUSH
37227: LD_INT 11
37229: PUSH
37230: LD_INT 30
37232: PUSH
37233: EMPTY
37234: LIST
37235: LIST
37236: PUSH
37237: LD_VAR 0 12
37241: ARRAY
37242: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37243: LD_VAR 0 18
37247: NOT
37248: PUSH
37249: LD_INT 40
37251: PPUSH
37252: LD_VAR 0 16
37256: PPUSH
37257: CALL_OW 321
37261: PUSH
37262: LD_INT 2
37264: EQUAL
37265: AND
37266: PUSH
37267: LD_INT 7
37269: PUSH
37270: LD_VAR 0 5
37274: IN
37275: PUSH
37276: LD_INT 28
37278: PUSH
37279: LD_VAR 0 5
37283: IN
37284: OR
37285: PUSH
37286: LD_INT 45
37288: PUSH
37289: LD_VAR 0 5
37293: IN
37294: OR
37295: AND
37296: IFFALSE 37550
// begin hex := GetHexInfo ( x , y ) ;
37298: LD_ADDR_VAR 0 4
37302: PUSH
37303: LD_VAR 0 10
37307: PPUSH
37308: LD_VAR 0 11
37312: PPUSH
37313: CALL_OW 546
37317: ST_TO_ADDR
// if hex [ 1 ] then
37318: LD_VAR 0 4
37322: PUSH
37323: LD_INT 1
37325: ARRAY
37326: IFFALSE 37330
// exit ;
37328: GO 37733
// height := hex [ 2 ] ;
37330: LD_ADDR_VAR 0 15
37334: PUSH
37335: LD_VAR 0 4
37339: PUSH
37340: LD_INT 2
37342: ARRAY
37343: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
37344: LD_ADDR_VAR 0 14
37348: PUSH
37349: LD_INT 0
37351: PUSH
37352: LD_INT 2
37354: PUSH
37355: LD_INT 3
37357: PUSH
37358: LD_INT 5
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: LIST
37365: LIST
37366: ST_TO_ADDR
// for i in tmp do
37367: LD_ADDR_VAR 0 8
37371: PUSH
37372: LD_VAR 0 14
37376: PUSH
37377: FOR_IN
37378: IFFALSE 37548
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
37380: LD_ADDR_VAR 0 9
37384: PUSH
37385: LD_VAR 0 10
37389: PPUSH
37390: LD_VAR 0 8
37394: PPUSH
37395: LD_INT 5
37397: PPUSH
37398: CALL_OW 272
37402: PUSH
37403: LD_VAR 0 11
37407: PPUSH
37408: LD_VAR 0 8
37412: PPUSH
37413: LD_INT 5
37415: PPUSH
37416: CALL_OW 273
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
37425: LD_VAR 0 9
37429: PUSH
37430: LD_INT 1
37432: ARRAY
37433: PPUSH
37434: LD_VAR 0 9
37438: PUSH
37439: LD_INT 2
37441: ARRAY
37442: PPUSH
37443: CALL_OW 488
37447: IFFALSE 37546
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
37449: LD_ADDR_VAR 0 4
37453: PUSH
37454: LD_VAR 0 9
37458: PUSH
37459: LD_INT 1
37461: ARRAY
37462: PPUSH
37463: LD_VAR 0 9
37467: PUSH
37468: LD_INT 2
37470: ARRAY
37471: PPUSH
37472: CALL_OW 546
37476: ST_TO_ADDR
// if hex [ 1 ] then
37477: LD_VAR 0 4
37481: PUSH
37482: LD_INT 1
37484: ARRAY
37485: IFFALSE 37489
// continue ;
37487: GO 37377
// h := hex [ 2 ] ;
37489: LD_ADDR_VAR 0 13
37493: PUSH
37494: LD_VAR 0 4
37498: PUSH
37499: LD_INT 2
37501: ARRAY
37502: ST_TO_ADDR
// if h + 7 < height then
37503: LD_VAR 0 13
37507: PUSH
37508: LD_INT 7
37510: PLUS
37511: PUSH
37512: LD_VAR 0 15
37516: LESS
37517: IFFALSE 37546
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
37519: LD_ADDR_VAR 0 18
37523: PUSH
37524: LD_INT 7
37526: PUSH
37527: LD_INT 28
37529: PUSH
37530: LD_INT 45
37532: PUSH
37533: EMPTY
37534: LIST
37535: LIST
37536: LIST
37537: PUSH
37538: LD_VAR 0 12
37542: ARRAY
37543: ST_TO_ADDR
// break ;
37544: GO 37548
// end ; end ; end ;
37546: GO 37377
37548: POP
37549: POP
// end ; if not weapon then
37550: LD_VAR 0 18
37554: NOT
37555: IFFALSE 37615
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
37557: LD_ADDR_VAR 0 5
37561: PUSH
37562: LD_VAR 0 5
37566: PUSH
37567: LD_INT 11
37569: PUSH
37570: LD_INT 30
37572: PUSH
37573: LD_INT 49
37575: PUSH
37576: EMPTY
37577: LIST
37578: LIST
37579: LIST
37580: DIFF
37581: ST_TO_ADDR
// if not list then
37582: LD_VAR 0 5
37586: NOT
37587: IFFALSE 37591
// exit ;
37589: GO 37733
// weapon := list [ rand ( 1 , list ) ] ;
37591: LD_ADDR_VAR 0 18
37595: PUSH
37596: LD_VAR 0 5
37600: PUSH
37601: LD_INT 1
37603: PPUSH
37604: LD_VAR 0 5
37608: PPUSH
37609: CALL_OW 12
37613: ARRAY
37614: ST_TO_ADDR
// end ; if weapon then
37615: LD_VAR 0 18
37619: IFFALSE 37733
// begin tmp := CostOfWeapon ( weapon ) ;
37621: LD_ADDR_VAR 0 14
37625: PUSH
37626: LD_VAR 0 18
37630: PPUSH
37631: CALL_OW 451
37635: ST_TO_ADDR
// j := GetBase ( tower ) ;
37636: LD_ADDR_VAR 0 9
37640: PUSH
37641: LD_VAR 0 1
37645: PPUSH
37646: CALL_OW 274
37650: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
37651: LD_VAR 0 9
37655: PPUSH
37656: LD_INT 1
37658: PPUSH
37659: CALL_OW 275
37663: PUSH
37664: LD_VAR 0 14
37668: PUSH
37669: LD_INT 1
37671: ARRAY
37672: GREATEREQUAL
37673: PUSH
37674: LD_VAR 0 9
37678: PPUSH
37679: LD_INT 2
37681: PPUSH
37682: CALL_OW 275
37686: PUSH
37687: LD_VAR 0 14
37691: PUSH
37692: LD_INT 2
37694: ARRAY
37695: GREATEREQUAL
37696: AND
37697: PUSH
37698: LD_VAR 0 9
37702: PPUSH
37703: LD_INT 3
37705: PPUSH
37706: CALL_OW 275
37710: PUSH
37711: LD_VAR 0 14
37715: PUSH
37716: LD_INT 3
37718: ARRAY
37719: GREATEREQUAL
37720: AND
37721: IFFALSE 37733
// result := weapon ;
37723: LD_ADDR_VAR 0 3
37727: PUSH
37728: LD_VAR 0 18
37732: ST_TO_ADDR
// end ; end ;
37733: LD_VAR 0 3
37737: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
37738: LD_INT 0
37740: PPUSH
37741: PPUSH
// result := true ;
37742: LD_ADDR_VAR 0 3
37746: PUSH
37747: LD_INT 1
37749: ST_TO_ADDR
// if array1 = array2 then
37750: LD_VAR 0 1
37754: PUSH
37755: LD_VAR 0 2
37759: EQUAL
37760: IFFALSE 37820
// begin for i = 1 to array1 do
37762: LD_ADDR_VAR 0 4
37766: PUSH
37767: DOUBLE
37768: LD_INT 1
37770: DEC
37771: ST_TO_ADDR
37772: LD_VAR 0 1
37776: PUSH
37777: FOR_TO
37778: IFFALSE 37816
// if array1 [ i ] <> array2 [ i ] then
37780: LD_VAR 0 1
37784: PUSH
37785: LD_VAR 0 4
37789: ARRAY
37790: PUSH
37791: LD_VAR 0 2
37795: PUSH
37796: LD_VAR 0 4
37800: ARRAY
37801: NONEQUAL
37802: IFFALSE 37814
// begin result := false ;
37804: LD_ADDR_VAR 0 3
37808: PUSH
37809: LD_INT 0
37811: ST_TO_ADDR
// break ;
37812: GO 37816
// end ;
37814: GO 37777
37816: POP
37817: POP
// end else
37818: GO 37828
// result := false ;
37820: LD_ADDR_VAR 0 3
37824: PUSH
37825: LD_INT 0
37827: ST_TO_ADDR
// end ;
37828: LD_VAR 0 3
37832: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
37833: LD_INT 0
37835: PPUSH
37836: PPUSH
// if not array1 or not array2 then
37837: LD_VAR 0 1
37841: NOT
37842: PUSH
37843: LD_VAR 0 2
37847: NOT
37848: OR
37849: IFFALSE 37853
// exit ;
37851: GO 37917
// result := true ;
37853: LD_ADDR_VAR 0 3
37857: PUSH
37858: LD_INT 1
37860: ST_TO_ADDR
// for i = 1 to array1 do
37861: LD_ADDR_VAR 0 4
37865: PUSH
37866: DOUBLE
37867: LD_INT 1
37869: DEC
37870: ST_TO_ADDR
37871: LD_VAR 0 1
37875: PUSH
37876: FOR_TO
37877: IFFALSE 37915
// if array1 [ i ] <> array2 [ i ] then
37879: LD_VAR 0 1
37883: PUSH
37884: LD_VAR 0 4
37888: ARRAY
37889: PUSH
37890: LD_VAR 0 2
37894: PUSH
37895: LD_VAR 0 4
37899: ARRAY
37900: NONEQUAL
37901: IFFALSE 37913
// begin result := false ;
37903: LD_ADDR_VAR 0 3
37907: PUSH
37908: LD_INT 0
37910: ST_TO_ADDR
// break ;
37911: GO 37915
// end ;
37913: GO 37876
37915: POP
37916: POP
// end ;
37917: LD_VAR 0 3
37921: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
37922: LD_INT 0
37924: PPUSH
37925: PPUSH
37926: PPUSH
// pom := GetBase ( fac ) ;
37927: LD_ADDR_VAR 0 5
37931: PUSH
37932: LD_VAR 0 1
37936: PPUSH
37937: CALL_OW 274
37941: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
37942: LD_ADDR_VAR 0 4
37946: PUSH
37947: LD_VAR 0 2
37951: PUSH
37952: LD_INT 1
37954: ARRAY
37955: PPUSH
37956: LD_VAR 0 2
37960: PUSH
37961: LD_INT 2
37963: ARRAY
37964: PPUSH
37965: LD_VAR 0 2
37969: PUSH
37970: LD_INT 3
37972: ARRAY
37973: PPUSH
37974: LD_VAR 0 2
37978: PUSH
37979: LD_INT 4
37981: ARRAY
37982: PPUSH
37983: CALL_OW 449
37987: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37988: LD_ADDR_VAR 0 3
37992: PUSH
37993: LD_VAR 0 5
37997: PPUSH
37998: LD_INT 1
38000: PPUSH
38001: CALL_OW 275
38005: PUSH
38006: LD_VAR 0 4
38010: PUSH
38011: LD_INT 1
38013: ARRAY
38014: GREATEREQUAL
38015: PUSH
38016: LD_VAR 0 5
38020: PPUSH
38021: LD_INT 2
38023: PPUSH
38024: CALL_OW 275
38028: PUSH
38029: LD_VAR 0 4
38033: PUSH
38034: LD_INT 2
38036: ARRAY
38037: GREATEREQUAL
38038: AND
38039: PUSH
38040: LD_VAR 0 5
38044: PPUSH
38045: LD_INT 3
38047: PPUSH
38048: CALL_OW 275
38052: PUSH
38053: LD_VAR 0 4
38057: PUSH
38058: LD_INT 3
38060: ARRAY
38061: GREATEREQUAL
38062: AND
38063: ST_TO_ADDR
// end ;
38064: LD_VAR 0 3
38068: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38069: LD_INT 0
38071: PPUSH
38072: PPUSH
38073: PPUSH
38074: PPUSH
// pom := GetBase ( building ) ;
38075: LD_ADDR_VAR 0 3
38079: PUSH
38080: LD_VAR 0 1
38084: PPUSH
38085: CALL_OW 274
38089: ST_TO_ADDR
// if not pom then
38090: LD_VAR 0 3
38094: NOT
38095: IFFALSE 38099
// exit ;
38097: GO 38269
// btype := GetBType ( building ) ;
38099: LD_ADDR_VAR 0 5
38103: PUSH
38104: LD_VAR 0 1
38108: PPUSH
38109: CALL_OW 266
38113: ST_TO_ADDR
// if btype = b_armoury then
38114: LD_VAR 0 5
38118: PUSH
38119: LD_INT 4
38121: EQUAL
38122: IFFALSE 38132
// btype := b_barracks ;
38124: LD_ADDR_VAR 0 5
38128: PUSH
38129: LD_INT 5
38131: ST_TO_ADDR
// if btype = b_depot then
38132: LD_VAR 0 5
38136: PUSH
38137: LD_INT 0
38139: EQUAL
38140: IFFALSE 38150
// btype := b_warehouse ;
38142: LD_ADDR_VAR 0 5
38146: PUSH
38147: LD_INT 1
38149: ST_TO_ADDR
// if btype = b_workshop then
38150: LD_VAR 0 5
38154: PUSH
38155: LD_INT 2
38157: EQUAL
38158: IFFALSE 38168
// btype := b_factory ;
38160: LD_ADDR_VAR 0 5
38164: PUSH
38165: LD_INT 3
38167: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38168: LD_ADDR_VAR 0 4
38172: PUSH
38173: LD_VAR 0 5
38177: PPUSH
38178: LD_VAR 0 1
38182: PPUSH
38183: CALL_OW 248
38187: PPUSH
38188: CALL_OW 450
38192: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38193: LD_ADDR_VAR 0 2
38197: PUSH
38198: LD_VAR 0 3
38202: PPUSH
38203: LD_INT 1
38205: PPUSH
38206: CALL_OW 275
38210: PUSH
38211: LD_VAR 0 4
38215: PUSH
38216: LD_INT 1
38218: ARRAY
38219: GREATEREQUAL
38220: PUSH
38221: LD_VAR 0 3
38225: PPUSH
38226: LD_INT 2
38228: PPUSH
38229: CALL_OW 275
38233: PUSH
38234: LD_VAR 0 4
38238: PUSH
38239: LD_INT 2
38241: ARRAY
38242: GREATEREQUAL
38243: AND
38244: PUSH
38245: LD_VAR 0 3
38249: PPUSH
38250: LD_INT 3
38252: PPUSH
38253: CALL_OW 275
38257: PUSH
38258: LD_VAR 0 4
38262: PUSH
38263: LD_INT 3
38265: ARRAY
38266: GREATEREQUAL
38267: AND
38268: ST_TO_ADDR
// end ;
38269: LD_VAR 0 2
38273: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38274: LD_INT 0
38276: PPUSH
38277: PPUSH
38278: PPUSH
// pom := GetBase ( building ) ;
38279: LD_ADDR_VAR 0 4
38283: PUSH
38284: LD_VAR 0 1
38288: PPUSH
38289: CALL_OW 274
38293: ST_TO_ADDR
// if not pom then
38294: LD_VAR 0 4
38298: NOT
38299: IFFALSE 38303
// exit ;
38301: GO 38404
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38303: LD_ADDR_VAR 0 5
38307: PUSH
38308: LD_VAR 0 2
38312: PPUSH
38313: LD_VAR 0 1
38317: PPUSH
38318: CALL_OW 248
38322: PPUSH
38323: CALL_OW 450
38327: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38328: LD_ADDR_VAR 0 3
38332: PUSH
38333: LD_VAR 0 4
38337: PPUSH
38338: LD_INT 1
38340: PPUSH
38341: CALL_OW 275
38345: PUSH
38346: LD_VAR 0 5
38350: PUSH
38351: LD_INT 1
38353: ARRAY
38354: GREATEREQUAL
38355: PUSH
38356: LD_VAR 0 4
38360: PPUSH
38361: LD_INT 2
38363: PPUSH
38364: CALL_OW 275
38368: PUSH
38369: LD_VAR 0 5
38373: PUSH
38374: LD_INT 2
38376: ARRAY
38377: GREATEREQUAL
38378: AND
38379: PUSH
38380: LD_VAR 0 4
38384: PPUSH
38385: LD_INT 3
38387: PPUSH
38388: CALL_OW 275
38392: PUSH
38393: LD_VAR 0 5
38397: PUSH
38398: LD_INT 3
38400: ARRAY
38401: GREATEREQUAL
38402: AND
38403: ST_TO_ADDR
// end ;
38404: LD_VAR 0 3
38408: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
38409: LD_INT 0
38411: PPUSH
38412: PPUSH
38413: PPUSH
38414: PPUSH
38415: PPUSH
38416: PPUSH
38417: PPUSH
38418: PPUSH
38419: PPUSH
38420: PPUSH
38421: PPUSH
// result := false ;
38422: LD_ADDR_VAR 0 8
38426: PUSH
38427: LD_INT 0
38429: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
38430: LD_VAR 0 5
38434: NOT
38435: PUSH
38436: LD_VAR 0 1
38440: NOT
38441: OR
38442: PUSH
38443: LD_VAR 0 2
38447: NOT
38448: OR
38449: PUSH
38450: LD_VAR 0 3
38454: NOT
38455: OR
38456: IFFALSE 38460
// exit ;
38458: GO 39274
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
38460: LD_ADDR_VAR 0 14
38464: PUSH
38465: LD_VAR 0 1
38469: PPUSH
38470: LD_VAR 0 2
38474: PPUSH
38475: LD_VAR 0 3
38479: PPUSH
38480: LD_VAR 0 4
38484: PPUSH
38485: LD_VAR 0 5
38489: PUSH
38490: LD_INT 1
38492: ARRAY
38493: PPUSH
38494: CALL_OW 248
38498: PPUSH
38499: LD_INT 0
38501: PPUSH
38502: CALL 40507 0 6
38506: ST_TO_ADDR
// if not hexes then
38507: LD_VAR 0 14
38511: NOT
38512: IFFALSE 38516
// exit ;
38514: GO 39274
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38516: LD_ADDR_VAR 0 17
38520: PUSH
38521: LD_VAR 0 5
38525: PPUSH
38526: LD_INT 22
38528: PUSH
38529: LD_VAR 0 13
38533: PPUSH
38534: CALL_OW 255
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: PUSH
38543: LD_INT 2
38545: PUSH
38546: LD_INT 30
38548: PUSH
38549: LD_INT 0
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: PUSH
38556: LD_INT 30
38558: PUSH
38559: LD_INT 1
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: LIST
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: PPUSH
38575: CALL_OW 72
38579: ST_TO_ADDR
// for i = 1 to hexes do
38580: LD_ADDR_VAR 0 9
38584: PUSH
38585: DOUBLE
38586: LD_INT 1
38588: DEC
38589: ST_TO_ADDR
38590: LD_VAR 0 14
38594: PUSH
38595: FOR_TO
38596: IFFALSE 39272
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38598: LD_ADDR_VAR 0 13
38602: PUSH
38603: LD_VAR 0 14
38607: PUSH
38608: LD_VAR 0 9
38612: ARRAY
38613: PUSH
38614: LD_INT 1
38616: ARRAY
38617: PPUSH
38618: LD_VAR 0 14
38622: PUSH
38623: LD_VAR 0 9
38627: ARRAY
38628: PUSH
38629: LD_INT 2
38631: ARRAY
38632: PPUSH
38633: CALL_OW 428
38637: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
38638: LD_VAR 0 14
38642: PUSH
38643: LD_VAR 0 9
38647: ARRAY
38648: PUSH
38649: LD_INT 1
38651: ARRAY
38652: PPUSH
38653: LD_VAR 0 14
38657: PUSH
38658: LD_VAR 0 9
38662: ARRAY
38663: PUSH
38664: LD_INT 2
38666: ARRAY
38667: PPUSH
38668: CALL_OW 351
38672: PUSH
38673: LD_VAR 0 14
38677: PUSH
38678: LD_VAR 0 9
38682: ARRAY
38683: PUSH
38684: LD_INT 1
38686: ARRAY
38687: PPUSH
38688: LD_VAR 0 14
38692: PUSH
38693: LD_VAR 0 9
38697: ARRAY
38698: PUSH
38699: LD_INT 2
38701: ARRAY
38702: PPUSH
38703: CALL_OW 488
38707: NOT
38708: OR
38709: PUSH
38710: LD_VAR 0 13
38714: PPUSH
38715: CALL_OW 247
38719: PUSH
38720: LD_INT 3
38722: EQUAL
38723: OR
38724: IFFALSE 38730
// exit ;
38726: POP
38727: POP
38728: GO 39274
// if not tmp then
38730: LD_VAR 0 13
38734: NOT
38735: IFFALSE 38739
// continue ;
38737: GO 38595
// result := true ;
38739: LD_ADDR_VAR 0 8
38743: PUSH
38744: LD_INT 1
38746: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
38747: LD_VAR 0 6
38751: PUSH
38752: LD_VAR 0 13
38756: PPUSH
38757: CALL_OW 247
38761: PUSH
38762: LD_INT 2
38764: EQUAL
38765: AND
38766: PUSH
38767: LD_VAR 0 13
38771: PPUSH
38772: CALL_OW 263
38776: PUSH
38777: LD_INT 1
38779: EQUAL
38780: AND
38781: IFFALSE 38945
// begin if IsDrivenBy ( tmp ) then
38783: LD_VAR 0 13
38787: PPUSH
38788: CALL_OW 311
38792: IFFALSE 38796
// continue ;
38794: GO 38595
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
38796: LD_VAR 0 6
38800: PPUSH
38801: LD_INT 3
38803: PUSH
38804: LD_INT 60
38806: PUSH
38807: EMPTY
38808: LIST
38809: PUSH
38810: EMPTY
38811: LIST
38812: LIST
38813: PUSH
38814: LD_INT 3
38816: PUSH
38817: LD_INT 55
38819: PUSH
38820: EMPTY
38821: LIST
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: PPUSH
38831: CALL_OW 72
38835: IFFALSE 38943
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
38837: LD_ADDR_VAR 0 18
38841: PUSH
38842: LD_VAR 0 6
38846: PPUSH
38847: LD_INT 3
38849: PUSH
38850: LD_INT 60
38852: PUSH
38853: EMPTY
38854: LIST
38855: PUSH
38856: EMPTY
38857: LIST
38858: LIST
38859: PUSH
38860: LD_INT 3
38862: PUSH
38863: LD_INT 55
38865: PUSH
38866: EMPTY
38867: LIST
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: PPUSH
38877: CALL_OW 72
38881: PUSH
38882: LD_INT 1
38884: ARRAY
38885: ST_TO_ADDR
// if IsInUnit ( driver ) then
38886: LD_VAR 0 18
38890: PPUSH
38891: CALL_OW 310
38895: IFFALSE 38906
// ComExit ( driver ) ;
38897: LD_VAR 0 18
38901: PPUSH
38902: CALL 64195 0 1
// AddComEnterUnit ( driver , tmp ) ;
38906: LD_VAR 0 18
38910: PPUSH
38911: LD_VAR 0 13
38915: PPUSH
38916: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
38920: LD_VAR 0 18
38924: PPUSH
38925: LD_VAR 0 7
38929: PPUSH
38930: CALL_OW 173
// AddComExitVehicle ( driver ) ;
38934: LD_VAR 0 18
38938: PPUSH
38939: CALL_OW 181
// end ; continue ;
38943: GO 38595
// end ; if not cleaners or not tmp in cleaners then
38945: LD_VAR 0 6
38949: NOT
38950: PUSH
38951: LD_VAR 0 13
38955: PUSH
38956: LD_VAR 0 6
38960: IN
38961: NOT
38962: OR
38963: IFFALSE 39270
// begin if dep then
38965: LD_VAR 0 17
38969: IFFALSE 39105
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
38971: LD_ADDR_VAR 0 16
38975: PUSH
38976: LD_VAR 0 17
38980: PUSH
38981: LD_INT 1
38983: ARRAY
38984: PPUSH
38985: CALL_OW 250
38989: PPUSH
38990: LD_VAR 0 17
38994: PUSH
38995: LD_INT 1
38997: ARRAY
38998: PPUSH
38999: CALL_OW 254
39003: PPUSH
39004: LD_INT 5
39006: PPUSH
39007: CALL_OW 272
39011: PUSH
39012: LD_VAR 0 17
39016: PUSH
39017: LD_INT 1
39019: ARRAY
39020: PPUSH
39021: CALL_OW 251
39025: PPUSH
39026: LD_VAR 0 17
39030: PUSH
39031: LD_INT 1
39033: ARRAY
39034: PPUSH
39035: CALL_OW 254
39039: PPUSH
39040: LD_INT 5
39042: PPUSH
39043: CALL_OW 273
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39052: LD_VAR 0 16
39056: PUSH
39057: LD_INT 1
39059: ARRAY
39060: PPUSH
39061: LD_VAR 0 16
39065: PUSH
39066: LD_INT 2
39068: ARRAY
39069: PPUSH
39070: CALL_OW 488
39074: IFFALSE 39105
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39076: LD_VAR 0 13
39080: PPUSH
39081: LD_VAR 0 16
39085: PUSH
39086: LD_INT 1
39088: ARRAY
39089: PPUSH
39090: LD_VAR 0 16
39094: PUSH
39095: LD_INT 2
39097: ARRAY
39098: PPUSH
39099: CALL_OW 111
// continue ;
39103: GO 38595
// end ; end ; r := GetDir ( tmp ) ;
39105: LD_ADDR_VAR 0 15
39109: PUSH
39110: LD_VAR 0 13
39114: PPUSH
39115: CALL_OW 254
39119: ST_TO_ADDR
// if r = 5 then
39120: LD_VAR 0 15
39124: PUSH
39125: LD_INT 5
39127: EQUAL
39128: IFFALSE 39138
// r := 0 ;
39130: LD_ADDR_VAR 0 15
39134: PUSH
39135: LD_INT 0
39137: ST_TO_ADDR
// for j = r to 5 do
39138: LD_ADDR_VAR 0 10
39142: PUSH
39143: DOUBLE
39144: LD_VAR 0 15
39148: DEC
39149: ST_TO_ADDR
39150: LD_INT 5
39152: PUSH
39153: FOR_TO
39154: IFFALSE 39268
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39156: LD_ADDR_VAR 0 11
39160: PUSH
39161: LD_VAR 0 13
39165: PPUSH
39166: CALL_OW 250
39170: PPUSH
39171: LD_VAR 0 10
39175: PPUSH
39176: LD_INT 2
39178: PPUSH
39179: CALL_OW 272
39183: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39184: LD_ADDR_VAR 0 12
39188: PUSH
39189: LD_VAR 0 13
39193: PPUSH
39194: CALL_OW 251
39198: PPUSH
39199: LD_VAR 0 10
39203: PPUSH
39204: LD_INT 2
39206: PPUSH
39207: CALL_OW 273
39211: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39212: LD_VAR 0 11
39216: PPUSH
39217: LD_VAR 0 12
39221: PPUSH
39222: CALL_OW 488
39226: PUSH
39227: LD_VAR 0 11
39231: PPUSH
39232: LD_VAR 0 12
39236: PPUSH
39237: CALL_OW 428
39241: NOT
39242: AND
39243: IFFALSE 39266
// begin ComMoveXY ( tmp , _x , _y ) ;
39245: LD_VAR 0 13
39249: PPUSH
39250: LD_VAR 0 11
39254: PPUSH
39255: LD_VAR 0 12
39259: PPUSH
39260: CALL_OW 111
// break ;
39264: GO 39268
// end ; end ;
39266: GO 39153
39268: POP
39269: POP
// end ; end ;
39270: GO 38595
39272: POP
39273: POP
// end ;
39274: LD_VAR 0 8
39278: RET
// export function BuildingTechInvented ( side , btype ) ; begin
39279: LD_INT 0
39281: PPUSH
// result := true ;
39282: LD_ADDR_VAR 0 3
39286: PUSH
39287: LD_INT 1
39289: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
39290: LD_VAR 0 2
39294: PUSH
39295: LD_INT 24
39297: DOUBLE
39298: EQUAL
39299: IFTRUE 39309
39301: LD_INT 33
39303: DOUBLE
39304: EQUAL
39305: IFTRUE 39309
39307: GO 39334
39309: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
39310: LD_ADDR_VAR 0 3
39314: PUSH
39315: LD_INT 32
39317: PPUSH
39318: LD_VAR 0 1
39322: PPUSH
39323: CALL_OW 321
39327: PUSH
39328: LD_INT 2
39330: EQUAL
39331: ST_TO_ADDR
39332: GO 39650
39334: LD_INT 20
39336: DOUBLE
39337: EQUAL
39338: IFTRUE 39342
39340: GO 39367
39342: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
39343: LD_ADDR_VAR 0 3
39347: PUSH
39348: LD_INT 6
39350: PPUSH
39351: LD_VAR 0 1
39355: PPUSH
39356: CALL_OW 321
39360: PUSH
39361: LD_INT 2
39363: EQUAL
39364: ST_TO_ADDR
39365: GO 39650
39367: LD_INT 22
39369: DOUBLE
39370: EQUAL
39371: IFTRUE 39381
39373: LD_INT 36
39375: DOUBLE
39376: EQUAL
39377: IFTRUE 39381
39379: GO 39406
39381: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
39382: LD_ADDR_VAR 0 3
39386: PUSH
39387: LD_INT 15
39389: PPUSH
39390: LD_VAR 0 1
39394: PPUSH
39395: CALL_OW 321
39399: PUSH
39400: LD_INT 2
39402: EQUAL
39403: ST_TO_ADDR
39404: GO 39650
39406: LD_INT 30
39408: DOUBLE
39409: EQUAL
39410: IFTRUE 39414
39412: GO 39439
39414: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
39415: LD_ADDR_VAR 0 3
39419: PUSH
39420: LD_INT 20
39422: PPUSH
39423: LD_VAR 0 1
39427: PPUSH
39428: CALL_OW 321
39432: PUSH
39433: LD_INT 2
39435: EQUAL
39436: ST_TO_ADDR
39437: GO 39650
39439: LD_INT 28
39441: DOUBLE
39442: EQUAL
39443: IFTRUE 39453
39445: LD_INT 21
39447: DOUBLE
39448: EQUAL
39449: IFTRUE 39453
39451: GO 39478
39453: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
39454: LD_ADDR_VAR 0 3
39458: PUSH
39459: LD_INT 21
39461: PPUSH
39462: LD_VAR 0 1
39466: PPUSH
39467: CALL_OW 321
39471: PUSH
39472: LD_INT 2
39474: EQUAL
39475: ST_TO_ADDR
39476: GO 39650
39478: LD_INT 16
39480: DOUBLE
39481: EQUAL
39482: IFTRUE 39486
39484: GO 39511
39486: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
39487: LD_ADDR_VAR 0 3
39491: PUSH
39492: LD_INT 84
39494: PPUSH
39495: LD_VAR 0 1
39499: PPUSH
39500: CALL_OW 321
39504: PUSH
39505: LD_INT 2
39507: EQUAL
39508: ST_TO_ADDR
39509: GO 39650
39511: LD_INT 19
39513: DOUBLE
39514: EQUAL
39515: IFTRUE 39525
39517: LD_INT 23
39519: DOUBLE
39520: EQUAL
39521: IFTRUE 39525
39523: GO 39550
39525: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
39526: LD_ADDR_VAR 0 3
39530: PUSH
39531: LD_INT 83
39533: PPUSH
39534: LD_VAR 0 1
39538: PPUSH
39539: CALL_OW 321
39543: PUSH
39544: LD_INT 2
39546: EQUAL
39547: ST_TO_ADDR
39548: GO 39650
39550: LD_INT 17
39552: DOUBLE
39553: EQUAL
39554: IFTRUE 39558
39556: GO 39583
39558: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
39559: LD_ADDR_VAR 0 3
39563: PUSH
39564: LD_INT 39
39566: PPUSH
39567: LD_VAR 0 1
39571: PPUSH
39572: CALL_OW 321
39576: PUSH
39577: LD_INT 2
39579: EQUAL
39580: ST_TO_ADDR
39581: GO 39650
39583: LD_INT 18
39585: DOUBLE
39586: EQUAL
39587: IFTRUE 39591
39589: GO 39616
39591: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
39592: LD_ADDR_VAR 0 3
39596: PUSH
39597: LD_INT 40
39599: PPUSH
39600: LD_VAR 0 1
39604: PPUSH
39605: CALL_OW 321
39609: PUSH
39610: LD_INT 2
39612: EQUAL
39613: ST_TO_ADDR
39614: GO 39650
39616: LD_INT 27
39618: DOUBLE
39619: EQUAL
39620: IFTRUE 39624
39622: GO 39649
39624: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
39625: LD_ADDR_VAR 0 3
39629: PUSH
39630: LD_INT 35
39632: PPUSH
39633: LD_VAR 0 1
39637: PPUSH
39638: CALL_OW 321
39642: PUSH
39643: LD_INT 2
39645: EQUAL
39646: ST_TO_ADDR
39647: GO 39650
39649: POP
// end ;
39650: LD_VAR 0 3
39654: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
39655: LD_INT 0
39657: PPUSH
39658: PPUSH
39659: PPUSH
39660: PPUSH
39661: PPUSH
39662: PPUSH
39663: PPUSH
39664: PPUSH
39665: PPUSH
39666: PPUSH
39667: PPUSH
// result := false ;
39668: LD_ADDR_VAR 0 6
39672: PUSH
39673: LD_INT 0
39675: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
39676: LD_VAR 0 1
39680: NOT
39681: PUSH
39682: LD_VAR 0 1
39686: PPUSH
39687: CALL_OW 266
39691: PUSH
39692: LD_INT 0
39694: PUSH
39695: LD_INT 1
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: IN
39702: NOT
39703: OR
39704: PUSH
39705: LD_VAR 0 2
39709: NOT
39710: OR
39711: PUSH
39712: LD_VAR 0 5
39716: PUSH
39717: LD_INT 0
39719: PUSH
39720: LD_INT 1
39722: PUSH
39723: LD_INT 2
39725: PUSH
39726: LD_INT 3
39728: PUSH
39729: LD_INT 4
39731: PUSH
39732: LD_INT 5
39734: PUSH
39735: EMPTY
39736: LIST
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: IN
39743: NOT
39744: OR
39745: PUSH
39746: LD_VAR 0 3
39750: PPUSH
39751: LD_VAR 0 4
39755: PPUSH
39756: CALL_OW 488
39760: NOT
39761: OR
39762: IFFALSE 39766
// exit ;
39764: GO 40502
// side := GetSide ( depot ) ;
39766: LD_ADDR_VAR 0 9
39770: PUSH
39771: LD_VAR 0 1
39775: PPUSH
39776: CALL_OW 255
39780: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
39781: LD_VAR 0 9
39785: PPUSH
39786: LD_VAR 0 2
39790: PPUSH
39791: CALL 39279 0 2
39795: NOT
39796: IFFALSE 39800
// exit ;
39798: GO 40502
// pom := GetBase ( depot ) ;
39800: LD_ADDR_VAR 0 10
39804: PUSH
39805: LD_VAR 0 1
39809: PPUSH
39810: CALL_OW 274
39814: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
39815: LD_ADDR_VAR 0 11
39819: PUSH
39820: LD_VAR 0 2
39824: PPUSH
39825: LD_VAR 0 1
39829: PPUSH
39830: CALL_OW 248
39834: PPUSH
39835: CALL_OW 450
39839: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
39840: LD_VAR 0 10
39844: PPUSH
39845: LD_INT 1
39847: PPUSH
39848: CALL_OW 275
39852: PUSH
39853: LD_VAR 0 11
39857: PUSH
39858: LD_INT 1
39860: ARRAY
39861: GREATEREQUAL
39862: PUSH
39863: LD_VAR 0 10
39867: PPUSH
39868: LD_INT 2
39870: PPUSH
39871: CALL_OW 275
39875: PUSH
39876: LD_VAR 0 11
39880: PUSH
39881: LD_INT 2
39883: ARRAY
39884: GREATEREQUAL
39885: AND
39886: PUSH
39887: LD_VAR 0 10
39891: PPUSH
39892: LD_INT 3
39894: PPUSH
39895: CALL_OW 275
39899: PUSH
39900: LD_VAR 0 11
39904: PUSH
39905: LD_INT 3
39907: ARRAY
39908: GREATEREQUAL
39909: AND
39910: NOT
39911: IFFALSE 39915
// exit ;
39913: GO 40502
// if GetBType ( depot ) = b_depot then
39915: LD_VAR 0 1
39919: PPUSH
39920: CALL_OW 266
39924: PUSH
39925: LD_INT 0
39927: EQUAL
39928: IFFALSE 39940
// dist := 28 else
39930: LD_ADDR_VAR 0 14
39934: PUSH
39935: LD_INT 28
39937: ST_TO_ADDR
39938: GO 39948
// dist := 36 ;
39940: LD_ADDR_VAR 0 14
39944: PUSH
39945: LD_INT 36
39947: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
39948: LD_VAR 0 1
39952: PPUSH
39953: LD_VAR 0 3
39957: PPUSH
39958: LD_VAR 0 4
39962: PPUSH
39963: CALL_OW 297
39967: PUSH
39968: LD_VAR 0 14
39972: GREATER
39973: IFFALSE 39977
// exit ;
39975: GO 40502
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
39977: LD_ADDR_VAR 0 12
39981: PUSH
39982: LD_VAR 0 2
39986: PPUSH
39987: LD_VAR 0 3
39991: PPUSH
39992: LD_VAR 0 4
39996: PPUSH
39997: LD_VAR 0 5
40001: PPUSH
40002: LD_VAR 0 1
40006: PPUSH
40007: CALL_OW 248
40011: PPUSH
40012: LD_INT 0
40014: PPUSH
40015: CALL 40507 0 6
40019: ST_TO_ADDR
// if not hexes then
40020: LD_VAR 0 12
40024: NOT
40025: IFFALSE 40029
// exit ;
40027: GO 40502
// hex := GetHexInfo ( x , y ) ;
40029: LD_ADDR_VAR 0 15
40033: PUSH
40034: LD_VAR 0 3
40038: PPUSH
40039: LD_VAR 0 4
40043: PPUSH
40044: CALL_OW 546
40048: ST_TO_ADDR
// if hex [ 1 ] then
40049: LD_VAR 0 15
40053: PUSH
40054: LD_INT 1
40056: ARRAY
40057: IFFALSE 40061
// exit ;
40059: GO 40502
// height := hex [ 2 ] ;
40061: LD_ADDR_VAR 0 13
40065: PUSH
40066: LD_VAR 0 15
40070: PUSH
40071: LD_INT 2
40073: ARRAY
40074: ST_TO_ADDR
// for i = 1 to hexes do
40075: LD_ADDR_VAR 0 7
40079: PUSH
40080: DOUBLE
40081: LD_INT 1
40083: DEC
40084: ST_TO_ADDR
40085: LD_VAR 0 12
40089: PUSH
40090: FOR_TO
40091: IFFALSE 40421
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40093: LD_VAR 0 12
40097: PUSH
40098: LD_VAR 0 7
40102: ARRAY
40103: PUSH
40104: LD_INT 1
40106: ARRAY
40107: PPUSH
40108: LD_VAR 0 12
40112: PUSH
40113: LD_VAR 0 7
40117: ARRAY
40118: PUSH
40119: LD_INT 2
40121: ARRAY
40122: PPUSH
40123: CALL_OW 488
40127: NOT
40128: PUSH
40129: LD_VAR 0 12
40133: PUSH
40134: LD_VAR 0 7
40138: ARRAY
40139: PUSH
40140: LD_INT 1
40142: ARRAY
40143: PPUSH
40144: LD_VAR 0 12
40148: PUSH
40149: LD_VAR 0 7
40153: ARRAY
40154: PUSH
40155: LD_INT 2
40157: ARRAY
40158: PPUSH
40159: CALL_OW 428
40163: PUSH
40164: LD_INT 0
40166: GREATER
40167: OR
40168: PUSH
40169: LD_VAR 0 12
40173: PUSH
40174: LD_VAR 0 7
40178: ARRAY
40179: PUSH
40180: LD_INT 1
40182: ARRAY
40183: PPUSH
40184: LD_VAR 0 12
40188: PUSH
40189: LD_VAR 0 7
40193: ARRAY
40194: PUSH
40195: LD_INT 2
40197: ARRAY
40198: PPUSH
40199: CALL_OW 351
40203: OR
40204: IFFALSE 40210
// exit ;
40206: POP
40207: POP
40208: GO 40502
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40210: LD_ADDR_VAR 0 8
40214: PUSH
40215: LD_VAR 0 12
40219: PUSH
40220: LD_VAR 0 7
40224: ARRAY
40225: PUSH
40226: LD_INT 1
40228: ARRAY
40229: PPUSH
40230: LD_VAR 0 12
40234: PUSH
40235: LD_VAR 0 7
40239: ARRAY
40240: PUSH
40241: LD_INT 2
40243: ARRAY
40244: PPUSH
40245: CALL_OW 546
40249: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
40250: LD_VAR 0 8
40254: PUSH
40255: LD_INT 1
40257: ARRAY
40258: PUSH
40259: LD_VAR 0 8
40263: PUSH
40264: LD_INT 2
40266: ARRAY
40267: PUSH
40268: LD_VAR 0 13
40272: PUSH
40273: LD_INT 2
40275: PLUS
40276: GREATER
40277: OR
40278: PUSH
40279: LD_VAR 0 8
40283: PUSH
40284: LD_INT 2
40286: ARRAY
40287: PUSH
40288: LD_VAR 0 13
40292: PUSH
40293: LD_INT 2
40295: MINUS
40296: LESS
40297: OR
40298: PUSH
40299: LD_VAR 0 8
40303: PUSH
40304: LD_INT 3
40306: ARRAY
40307: PUSH
40308: LD_INT 0
40310: PUSH
40311: LD_INT 8
40313: PUSH
40314: LD_INT 9
40316: PUSH
40317: LD_INT 10
40319: PUSH
40320: LD_INT 11
40322: PUSH
40323: LD_INT 12
40325: PUSH
40326: LD_INT 13
40328: PUSH
40329: LD_INT 16
40331: PUSH
40332: LD_INT 17
40334: PUSH
40335: LD_INT 18
40337: PUSH
40338: LD_INT 19
40340: PUSH
40341: LD_INT 20
40343: PUSH
40344: LD_INT 21
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: LIST
40351: LIST
40352: LIST
40353: LIST
40354: LIST
40355: LIST
40356: LIST
40357: LIST
40358: LIST
40359: LIST
40360: LIST
40361: IN
40362: NOT
40363: OR
40364: PUSH
40365: LD_VAR 0 8
40369: PUSH
40370: LD_INT 5
40372: ARRAY
40373: NOT
40374: OR
40375: PUSH
40376: LD_VAR 0 8
40380: PUSH
40381: LD_INT 6
40383: ARRAY
40384: PUSH
40385: LD_INT 1
40387: PUSH
40388: LD_INT 2
40390: PUSH
40391: LD_INT 7
40393: PUSH
40394: LD_INT 9
40396: PUSH
40397: LD_INT 10
40399: PUSH
40400: LD_INT 11
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: LIST
40407: LIST
40408: LIST
40409: LIST
40410: IN
40411: NOT
40412: OR
40413: IFFALSE 40419
// exit ;
40415: POP
40416: POP
40417: GO 40502
// end ;
40419: GO 40090
40421: POP
40422: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
40423: LD_VAR 0 9
40427: PPUSH
40428: LD_VAR 0 3
40432: PPUSH
40433: LD_VAR 0 4
40437: PPUSH
40438: LD_INT 20
40440: PPUSH
40441: CALL 32454 0 4
40445: PUSH
40446: LD_INT 4
40448: ARRAY
40449: IFFALSE 40453
// exit ;
40451: GO 40502
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
40453: LD_VAR 0 2
40457: PUSH
40458: LD_INT 29
40460: PUSH
40461: LD_INT 30
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: IN
40468: PUSH
40469: LD_VAR 0 3
40473: PPUSH
40474: LD_VAR 0 4
40478: PPUSH
40479: LD_VAR 0 9
40483: PPUSH
40484: CALL_OW 440
40488: NOT
40489: AND
40490: IFFALSE 40494
// exit ;
40492: GO 40502
// result := true ;
40494: LD_ADDR_VAR 0 6
40498: PUSH
40499: LD_INT 1
40501: ST_TO_ADDR
// end ;
40502: LD_VAR 0 6
40506: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
40507: LD_INT 0
40509: PPUSH
40510: PPUSH
40511: PPUSH
40512: PPUSH
40513: PPUSH
40514: PPUSH
40515: PPUSH
40516: PPUSH
40517: PPUSH
40518: PPUSH
40519: PPUSH
40520: PPUSH
40521: PPUSH
40522: PPUSH
40523: PPUSH
40524: PPUSH
40525: PPUSH
40526: PPUSH
40527: PPUSH
40528: PPUSH
40529: PPUSH
40530: PPUSH
40531: PPUSH
40532: PPUSH
40533: PPUSH
40534: PPUSH
40535: PPUSH
40536: PPUSH
40537: PPUSH
40538: PPUSH
40539: PPUSH
40540: PPUSH
40541: PPUSH
40542: PPUSH
40543: PPUSH
40544: PPUSH
40545: PPUSH
40546: PPUSH
40547: PPUSH
40548: PPUSH
40549: PPUSH
40550: PPUSH
40551: PPUSH
40552: PPUSH
40553: PPUSH
40554: PPUSH
40555: PPUSH
40556: PPUSH
40557: PPUSH
40558: PPUSH
40559: PPUSH
40560: PPUSH
40561: PPUSH
40562: PPUSH
40563: PPUSH
40564: PPUSH
40565: PPUSH
40566: PPUSH
// result = [ ] ;
40567: LD_ADDR_VAR 0 7
40571: PUSH
40572: EMPTY
40573: ST_TO_ADDR
// temp_list = [ ] ;
40574: LD_ADDR_VAR 0 9
40578: PUSH
40579: EMPTY
40580: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
40581: LD_VAR 0 4
40585: PUSH
40586: LD_INT 0
40588: PUSH
40589: LD_INT 1
40591: PUSH
40592: LD_INT 2
40594: PUSH
40595: LD_INT 3
40597: PUSH
40598: LD_INT 4
40600: PUSH
40601: LD_INT 5
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: IN
40612: NOT
40613: PUSH
40614: LD_VAR 0 1
40618: PUSH
40619: LD_INT 0
40621: PUSH
40622: LD_INT 1
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: IN
40629: PUSH
40630: LD_VAR 0 5
40634: PUSH
40635: LD_INT 1
40637: PUSH
40638: LD_INT 2
40640: PUSH
40641: LD_INT 3
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: LIST
40648: IN
40649: NOT
40650: AND
40651: OR
40652: IFFALSE 40656
// exit ;
40654: GO 59047
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
40656: LD_VAR 0 1
40660: PUSH
40661: LD_INT 6
40663: PUSH
40664: LD_INT 7
40666: PUSH
40667: LD_INT 8
40669: PUSH
40670: LD_INT 13
40672: PUSH
40673: LD_INT 12
40675: PUSH
40676: LD_INT 15
40678: PUSH
40679: LD_INT 11
40681: PUSH
40682: LD_INT 14
40684: PUSH
40685: LD_INT 10
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: LIST
40692: LIST
40693: LIST
40694: LIST
40695: LIST
40696: LIST
40697: LIST
40698: IN
40699: IFFALSE 40709
// btype = b_lab ;
40701: LD_ADDR_VAR 0 1
40705: PUSH
40706: LD_INT 6
40708: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
40709: LD_VAR 0 6
40713: PUSH
40714: LD_INT 0
40716: PUSH
40717: LD_INT 1
40719: PUSH
40720: LD_INT 2
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: LIST
40727: IN
40728: NOT
40729: PUSH
40730: LD_VAR 0 1
40734: PUSH
40735: LD_INT 0
40737: PUSH
40738: LD_INT 1
40740: PUSH
40741: LD_INT 2
40743: PUSH
40744: LD_INT 3
40746: PUSH
40747: LD_INT 6
40749: PUSH
40750: LD_INT 36
40752: PUSH
40753: LD_INT 4
40755: PUSH
40756: LD_INT 5
40758: PUSH
40759: LD_INT 31
40761: PUSH
40762: LD_INT 32
40764: PUSH
40765: LD_INT 33
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: LIST
40772: LIST
40773: LIST
40774: LIST
40775: LIST
40776: LIST
40777: LIST
40778: LIST
40779: LIST
40780: IN
40781: NOT
40782: PUSH
40783: LD_VAR 0 6
40787: PUSH
40788: LD_INT 1
40790: EQUAL
40791: AND
40792: OR
40793: PUSH
40794: LD_VAR 0 1
40798: PUSH
40799: LD_INT 2
40801: PUSH
40802: LD_INT 3
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: IN
40809: NOT
40810: PUSH
40811: LD_VAR 0 6
40815: PUSH
40816: LD_INT 2
40818: EQUAL
40819: AND
40820: OR
40821: IFFALSE 40831
// mode = 0 ;
40823: LD_ADDR_VAR 0 6
40827: PUSH
40828: LD_INT 0
40830: ST_TO_ADDR
// case mode of 0 :
40831: LD_VAR 0 6
40835: PUSH
40836: LD_INT 0
40838: DOUBLE
40839: EQUAL
40840: IFTRUE 40844
40842: GO 52297
40844: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40845: LD_ADDR_VAR 0 11
40849: PUSH
40850: LD_INT 0
40852: PUSH
40853: LD_INT 0
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: LD_INT 0
40862: PUSH
40863: LD_INT 1
40865: NEG
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 1
40873: PUSH
40874: LD_INT 0
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: LD_INT 1
40883: PUSH
40884: LD_INT 1
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 0
40893: PUSH
40894: LD_INT 1
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: LD_INT 1
40903: NEG
40904: PUSH
40905: LD_INT 0
40907: PUSH
40908: EMPTY
40909: LIST
40910: LIST
40911: PUSH
40912: LD_INT 1
40914: NEG
40915: PUSH
40916: LD_INT 1
40918: NEG
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: PUSH
40924: LD_INT 1
40926: NEG
40927: PUSH
40928: LD_INT 2
40930: NEG
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: PUSH
40936: LD_INT 0
40938: PUSH
40939: LD_INT 2
40941: NEG
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PUSH
40947: LD_INT 1
40949: PUSH
40950: LD_INT 1
40952: NEG
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 1
40960: PUSH
40961: LD_INT 2
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: LD_INT 0
40970: PUSH
40971: LD_INT 2
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: PUSH
40978: LD_INT 1
40980: NEG
40981: PUSH
40982: LD_INT 1
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: PUSH
40989: LD_INT 1
40991: PUSH
40992: LD_INT 3
40994: PUSH
40995: EMPTY
40996: LIST
40997: LIST
40998: PUSH
40999: LD_INT 0
41001: PUSH
41002: LD_INT 3
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: PUSH
41009: LD_INT 1
41011: NEG
41012: PUSH
41013: LD_INT 2
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: LIST
41024: LIST
41025: LIST
41026: LIST
41027: LIST
41028: LIST
41029: LIST
41030: LIST
41031: LIST
41032: LIST
41033: LIST
41034: LIST
41035: LIST
41036: LIST
41037: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41038: LD_ADDR_VAR 0 12
41042: PUSH
41043: LD_INT 0
41045: PUSH
41046: LD_INT 0
41048: PUSH
41049: EMPTY
41050: LIST
41051: LIST
41052: PUSH
41053: LD_INT 0
41055: PUSH
41056: LD_INT 1
41058: NEG
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: PUSH
41064: LD_INT 1
41066: PUSH
41067: LD_INT 0
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: PUSH
41074: LD_INT 1
41076: PUSH
41077: LD_INT 1
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: PUSH
41084: LD_INT 0
41086: PUSH
41087: LD_INT 1
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: PUSH
41094: LD_INT 1
41096: NEG
41097: PUSH
41098: LD_INT 0
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: PUSH
41105: LD_INT 1
41107: NEG
41108: PUSH
41109: LD_INT 1
41111: NEG
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: PUSH
41117: LD_INT 1
41119: PUSH
41120: LD_INT 1
41122: NEG
41123: PUSH
41124: EMPTY
41125: LIST
41126: LIST
41127: PUSH
41128: LD_INT 2
41130: PUSH
41131: LD_INT 0
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: PUSH
41138: LD_INT 2
41140: PUSH
41141: LD_INT 1
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: PUSH
41148: LD_INT 1
41150: NEG
41151: PUSH
41152: LD_INT 1
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: LD_INT 2
41161: NEG
41162: PUSH
41163: LD_INT 0
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: PUSH
41170: LD_INT 2
41172: NEG
41173: PUSH
41174: LD_INT 1
41176: NEG
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: PUSH
41182: LD_INT 2
41184: NEG
41185: PUSH
41186: LD_INT 1
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: PUSH
41193: LD_INT 3
41195: NEG
41196: PUSH
41197: LD_INT 0
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: LD_INT 3
41206: NEG
41207: PUSH
41208: LD_INT 1
41210: NEG
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: LIST
41220: LIST
41221: LIST
41222: LIST
41223: LIST
41224: LIST
41225: LIST
41226: LIST
41227: LIST
41228: LIST
41229: LIST
41230: LIST
41231: LIST
41232: LIST
41233: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41234: LD_ADDR_VAR 0 13
41238: PUSH
41239: LD_INT 0
41241: PUSH
41242: LD_INT 0
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: LD_INT 0
41251: PUSH
41252: LD_INT 1
41254: NEG
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: LD_INT 1
41262: PUSH
41263: LD_INT 0
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: PUSH
41270: LD_INT 1
41272: PUSH
41273: LD_INT 1
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PUSH
41280: LD_INT 0
41282: PUSH
41283: LD_INT 1
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 1
41292: NEG
41293: PUSH
41294: LD_INT 0
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 1
41303: NEG
41304: PUSH
41305: LD_INT 1
41307: NEG
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: PUSH
41313: LD_INT 1
41315: NEG
41316: PUSH
41317: LD_INT 2
41319: NEG
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PUSH
41325: LD_INT 2
41327: PUSH
41328: LD_INT 1
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: LD_INT 2
41337: PUSH
41338: LD_INT 2
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: PUSH
41345: LD_INT 1
41347: PUSH
41348: LD_INT 2
41350: PUSH
41351: EMPTY
41352: LIST
41353: LIST
41354: PUSH
41355: LD_INT 2
41357: NEG
41358: PUSH
41359: LD_INT 1
41361: NEG
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: LD_INT 2
41369: NEG
41370: PUSH
41371: LD_INT 2
41373: NEG
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: PUSH
41379: LD_INT 2
41381: NEG
41382: PUSH
41383: LD_INT 3
41385: NEG
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: PUSH
41391: LD_INT 3
41393: NEG
41394: PUSH
41395: LD_INT 2
41397: NEG
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: PUSH
41403: LD_INT 3
41405: NEG
41406: PUSH
41407: LD_INT 3
41409: NEG
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: LIST
41430: LIST
41431: LIST
41432: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41433: LD_ADDR_VAR 0 14
41437: PUSH
41438: LD_INT 0
41440: PUSH
41441: LD_INT 0
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PUSH
41448: LD_INT 0
41450: PUSH
41451: LD_INT 1
41453: NEG
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: PUSH
41459: LD_INT 1
41461: PUSH
41462: LD_INT 0
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PUSH
41469: LD_INT 1
41471: PUSH
41472: LD_INT 1
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: LD_INT 0
41481: PUSH
41482: LD_INT 1
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: PUSH
41489: LD_INT 1
41491: NEG
41492: PUSH
41493: LD_INT 0
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 1
41502: NEG
41503: PUSH
41504: LD_INT 1
41506: NEG
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: LD_INT 1
41514: NEG
41515: PUSH
41516: LD_INT 2
41518: NEG
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PUSH
41524: LD_INT 0
41526: PUSH
41527: LD_INT 2
41529: NEG
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: PUSH
41535: LD_INT 1
41537: PUSH
41538: LD_INT 1
41540: NEG
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: LD_INT 1
41548: PUSH
41549: LD_INT 2
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: PUSH
41556: LD_INT 0
41558: PUSH
41559: LD_INT 2
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: LD_INT 1
41568: NEG
41569: PUSH
41570: LD_INT 1
41572: PUSH
41573: EMPTY
41574: LIST
41575: LIST
41576: PUSH
41577: LD_INT 1
41579: NEG
41580: PUSH
41581: LD_INT 3
41583: NEG
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: PUSH
41589: LD_INT 0
41591: PUSH
41592: LD_INT 3
41594: NEG
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 1
41602: PUSH
41603: LD_INT 2
41605: NEG
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: LIST
41615: LIST
41616: LIST
41617: LIST
41618: LIST
41619: LIST
41620: LIST
41621: LIST
41622: LIST
41623: LIST
41624: LIST
41625: LIST
41626: LIST
41627: LIST
41628: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41629: LD_ADDR_VAR 0 15
41633: PUSH
41634: LD_INT 0
41636: PUSH
41637: LD_INT 0
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: PUSH
41644: LD_INT 0
41646: PUSH
41647: LD_INT 1
41649: NEG
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: PUSH
41655: LD_INT 1
41657: PUSH
41658: LD_INT 0
41660: PUSH
41661: EMPTY
41662: LIST
41663: LIST
41664: PUSH
41665: LD_INT 1
41667: PUSH
41668: LD_INT 1
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: PUSH
41675: LD_INT 0
41677: PUSH
41678: LD_INT 1
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: PUSH
41685: LD_INT 1
41687: NEG
41688: PUSH
41689: LD_INT 0
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: PUSH
41696: LD_INT 1
41698: NEG
41699: PUSH
41700: LD_INT 1
41702: NEG
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: PUSH
41708: LD_INT 1
41710: PUSH
41711: LD_INT 1
41713: NEG
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: PUSH
41719: LD_INT 2
41721: PUSH
41722: LD_INT 0
41724: PUSH
41725: EMPTY
41726: LIST
41727: LIST
41728: PUSH
41729: LD_INT 2
41731: PUSH
41732: LD_INT 1
41734: PUSH
41735: EMPTY
41736: LIST
41737: LIST
41738: PUSH
41739: LD_INT 1
41741: NEG
41742: PUSH
41743: LD_INT 1
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: PUSH
41750: LD_INT 2
41752: NEG
41753: PUSH
41754: LD_INT 0
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: PUSH
41761: LD_INT 2
41763: NEG
41764: PUSH
41765: LD_INT 1
41767: NEG
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: PUSH
41773: LD_INT 2
41775: PUSH
41776: LD_INT 1
41778: NEG
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: PUSH
41784: LD_INT 3
41786: PUSH
41787: LD_INT 0
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: PUSH
41794: LD_INT 3
41796: PUSH
41797: LD_INT 1
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41822: LD_ADDR_VAR 0 16
41826: PUSH
41827: LD_INT 0
41829: PUSH
41830: LD_INT 0
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: PUSH
41837: LD_INT 0
41839: PUSH
41840: LD_INT 1
41842: NEG
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: PUSH
41848: LD_INT 1
41850: PUSH
41851: LD_INT 0
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: PUSH
41858: LD_INT 1
41860: PUSH
41861: LD_INT 1
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: PUSH
41868: LD_INT 0
41870: PUSH
41871: LD_INT 1
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: PUSH
41878: LD_INT 1
41880: NEG
41881: PUSH
41882: LD_INT 0
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: PUSH
41889: LD_INT 1
41891: NEG
41892: PUSH
41893: LD_INT 1
41895: NEG
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: PUSH
41901: LD_INT 1
41903: NEG
41904: PUSH
41905: LD_INT 2
41907: NEG
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: PUSH
41913: LD_INT 2
41915: PUSH
41916: LD_INT 1
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: PUSH
41923: LD_INT 2
41925: PUSH
41926: LD_INT 2
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: LD_INT 1
41935: PUSH
41936: LD_INT 2
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: LD_INT 2
41945: NEG
41946: PUSH
41947: LD_INT 1
41949: NEG
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: PUSH
41955: LD_INT 2
41957: NEG
41958: PUSH
41959: LD_INT 2
41961: NEG
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: PUSH
41967: LD_INT 3
41969: PUSH
41970: LD_INT 2
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PUSH
41977: LD_INT 3
41979: PUSH
41980: LD_INT 3
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: LD_INT 2
41989: PUSH
41990: LD_INT 3
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42015: LD_ADDR_VAR 0 17
42019: PUSH
42020: LD_INT 0
42022: PUSH
42023: LD_INT 0
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 0
42032: PUSH
42033: LD_INT 1
42035: NEG
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: PUSH
42041: LD_INT 1
42043: PUSH
42044: LD_INT 0
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 1
42053: PUSH
42054: LD_INT 1
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: LD_INT 0
42063: PUSH
42064: LD_INT 1
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: LD_INT 1
42073: NEG
42074: PUSH
42075: LD_INT 0
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: LD_INT 1
42084: NEG
42085: PUSH
42086: LD_INT 1
42088: NEG
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 1
42096: NEG
42097: PUSH
42098: LD_INT 2
42100: NEG
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PUSH
42106: LD_INT 0
42108: PUSH
42109: LD_INT 2
42111: NEG
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: LD_INT 1
42119: PUSH
42120: LD_INT 1
42122: NEG
42123: PUSH
42124: EMPTY
42125: LIST
42126: LIST
42127: PUSH
42128: LD_INT 2
42130: PUSH
42131: LD_INT 0
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: PUSH
42138: LD_INT 2
42140: PUSH
42141: LD_INT 1
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: PUSH
42148: LD_INT 2
42150: PUSH
42151: LD_INT 2
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PUSH
42158: LD_INT 1
42160: PUSH
42161: LD_INT 2
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 0
42170: PUSH
42171: LD_INT 2
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 1
42180: NEG
42181: PUSH
42182: LD_INT 1
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: LD_INT 2
42191: NEG
42192: PUSH
42193: LD_INT 0
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: PUSH
42200: LD_INT 2
42202: NEG
42203: PUSH
42204: LD_INT 1
42206: NEG
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_INT 2
42214: NEG
42215: PUSH
42216: LD_INT 2
42218: NEG
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: LIST
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42245: LD_ADDR_VAR 0 18
42249: PUSH
42250: LD_INT 0
42252: PUSH
42253: LD_INT 0
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 0
42262: PUSH
42263: LD_INT 1
42265: NEG
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: PUSH
42271: LD_INT 1
42273: PUSH
42274: LD_INT 0
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: PUSH
42281: LD_INT 1
42283: PUSH
42284: LD_INT 1
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PUSH
42291: LD_INT 0
42293: PUSH
42294: LD_INT 1
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: LD_INT 1
42303: NEG
42304: PUSH
42305: LD_INT 0
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 1
42314: NEG
42315: PUSH
42316: LD_INT 1
42318: NEG
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PUSH
42324: LD_INT 1
42326: NEG
42327: PUSH
42328: LD_INT 2
42330: NEG
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: LD_INT 0
42338: PUSH
42339: LD_INT 2
42341: NEG
42342: PUSH
42343: EMPTY
42344: LIST
42345: LIST
42346: PUSH
42347: LD_INT 1
42349: PUSH
42350: LD_INT 1
42352: NEG
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: LD_INT 2
42360: PUSH
42361: LD_INT 0
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: LD_INT 2
42370: PUSH
42371: LD_INT 1
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: PUSH
42378: LD_INT 2
42380: PUSH
42381: LD_INT 2
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 1
42390: PUSH
42391: LD_INT 2
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PUSH
42398: LD_INT 0
42400: PUSH
42401: LD_INT 2
42403: PUSH
42404: EMPTY
42405: LIST
42406: LIST
42407: PUSH
42408: LD_INT 1
42410: NEG
42411: PUSH
42412: LD_INT 1
42414: PUSH
42415: EMPTY
42416: LIST
42417: LIST
42418: PUSH
42419: LD_INT 2
42421: NEG
42422: PUSH
42423: LD_INT 0
42425: PUSH
42426: EMPTY
42427: LIST
42428: LIST
42429: PUSH
42430: LD_INT 2
42432: NEG
42433: PUSH
42434: LD_INT 1
42436: NEG
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PUSH
42442: LD_INT 2
42444: NEG
42445: PUSH
42446: LD_INT 2
42448: NEG
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: LIST
42474: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42475: LD_ADDR_VAR 0 19
42479: PUSH
42480: LD_INT 0
42482: PUSH
42483: LD_INT 0
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 0
42492: PUSH
42493: LD_INT 1
42495: NEG
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: PUSH
42501: LD_INT 1
42503: PUSH
42504: LD_INT 0
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: LD_INT 1
42513: PUSH
42514: LD_INT 1
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 0
42523: PUSH
42524: LD_INT 1
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: LD_INT 1
42533: NEG
42534: PUSH
42535: LD_INT 0
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: LD_INT 1
42544: NEG
42545: PUSH
42546: LD_INT 1
42548: NEG
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: LD_INT 1
42556: NEG
42557: PUSH
42558: LD_INT 2
42560: NEG
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: PUSH
42566: LD_INT 0
42568: PUSH
42569: LD_INT 2
42571: NEG
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: LD_INT 1
42579: PUSH
42580: LD_INT 1
42582: NEG
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: PUSH
42588: LD_INT 2
42590: PUSH
42591: LD_INT 0
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 2
42600: PUSH
42601: LD_INT 1
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: PUSH
42608: LD_INT 2
42610: PUSH
42611: LD_INT 2
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 1
42620: PUSH
42621: LD_INT 2
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: PUSH
42628: LD_INT 0
42630: PUSH
42631: LD_INT 2
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: LD_INT 1
42640: NEG
42641: PUSH
42642: LD_INT 1
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: PUSH
42649: LD_INT 2
42651: NEG
42652: PUSH
42653: LD_INT 0
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: LD_INT 2
42662: NEG
42663: PUSH
42664: LD_INT 1
42666: NEG
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PUSH
42672: LD_INT 2
42674: NEG
42675: PUSH
42676: LD_INT 2
42678: NEG
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: LIST
42694: LIST
42695: LIST
42696: LIST
42697: LIST
42698: LIST
42699: LIST
42700: LIST
42701: LIST
42702: LIST
42703: LIST
42704: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42705: LD_ADDR_VAR 0 20
42709: PUSH
42710: LD_INT 0
42712: PUSH
42713: LD_INT 0
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: PUSH
42720: LD_INT 0
42722: PUSH
42723: LD_INT 1
42725: NEG
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 1
42733: PUSH
42734: LD_INT 0
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 1
42743: PUSH
42744: LD_INT 1
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: LD_INT 0
42753: PUSH
42754: LD_INT 1
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: LD_INT 1
42763: NEG
42764: PUSH
42765: LD_INT 0
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: PUSH
42772: LD_INT 1
42774: NEG
42775: PUSH
42776: LD_INT 1
42778: NEG
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: PUSH
42784: LD_INT 1
42786: NEG
42787: PUSH
42788: LD_INT 2
42790: NEG
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: PUSH
42796: LD_INT 0
42798: PUSH
42799: LD_INT 2
42801: NEG
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: LD_INT 1
42809: PUSH
42810: LD_INT 1
42812: NEG
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: LD_INT 2
42820: PUSH
42821: LD_INT 0
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: LD_INT 2
42830: PUSH
42831: LD_INT 1
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: LD_INT 2
42840: PUSH
42841: LD_INT 2
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: PUSH
42848: LD_INT 1
42850: PUSH
42851: LD_INT 2
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: PUSH
42858: LD_INT 0
42860: PUSH
42861: LD_INT 2
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PUSH
42868: LD_INT 1
42870: NEG
42871: PUSH
42872: LD_INT 1
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PUSH
42879: LD_INT 2
42881: NEG
42882: PUSH
42883: LD_INT 0
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 2
42892: NEG
42893: PUSH
42894: LD_INT 1
42896: NEG
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: LD_INT 2
42904: NEG
42905: PUSH
42906: LD_INT 2
42908: NEG
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: LIST
42927: LIST
42928: LIST
42929: LIST
42930: LIST
42931: LIST
42932: LIST
42933: LIST
42934: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42935: LD_ADDR_VAR 0 21
42939: PUSH
42940: LD_INT 0
42942: PUSH
42943: LD_INT 0
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: PUSH
42950: LD_INT 0
42952: PUSH
42953: LD_INT 1
42955: NEG
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: PUSH
42961: LD_INT 1
42963: PUSH
42964: LD_INT 0
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: LD_INT 1
42973: PUSH
42974: LD_INT 1
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: PUSH
42981: LD_INT 0
42983: PUSH
42984: LD_INT 1
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: PUSH
42991: LD_INT 1
42993: NEG
42994: PUSH
42995: LD_INT 0
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 1
43004: NEG
43005: PUSH
43006: LD_INT 1
43008: NEG
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 1
43016: NEG
43017: PUSH
43018: LD_INT 2
43020: NEG
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: PUSH
43026: LD_INT 0
43028: PUSH
43029: LD_INT 2
43031: NEG
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: LD_INT 1
43039: PUSH
43040: LD_INT 1
43042: NEG
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: LD_INT 2
43050: PUSH
43051: LD_INT 0
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: PUSH
43058: LD_INT 2
43060: PUSH
43061: LD_INT 1
43063: PUSH
43064: EMPTY
43065: LIST
43066: LIST
43067: PUSH
43068: LD_INT 2
43070: PUSH
43071: LD_INT 2
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: LD_INT 1
43080: PUSH
43081: LD_INT 2
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: LD_INT 0
43090: PUSH
43091: LD_INT 2
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: LD_INT 1
43100: NEG
43101: PUSH
43102: LD_INT 1
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: LD_INT 2
43111: NEG
43112: PUSH
43113: LD_INT 0
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: LD_INT 2
43122: NEG
43123: PUSH
43124: LD_INT 1
43126: NEG
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: PUSH
43132: LD_INT 2
43134: NEG
43135: PUSH
43136: LD_INT 2
43138: NEG
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: LIST
43148: LIST
43149: LIST
43150: LIST
43151: LIST
43152: LIST
43153: LIST
43154: LIST
43155: LIST
43156: LIST
43157: LIST
43158: LIST
43159: LIST
43160: LIST
43161: LIST
43162: LIST
43163: LIST
43164: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43165: LD_ADDR_VAR 0 22
43169: PUSH
43170: LD_INT 0
43172: PUSH
43173: LD_INT 0
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: LD_INT 0
43182: PUSH
43183: LD_INT 1
43185: NEG
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: PUSH
43191: LD_INT 1
43193: PUSH
43194: LD_INT 0
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: PUSH
43201: LD_INT 1
43203: PUSH
43204: LD_INT 1
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: PUSH
43211: LD_INT 0
43213: PUSH
43214: LD_INT 1
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: PUSH
43221: LD_INT 1
43223: NEG
43224: PUSH
43225: LD_INT 0
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: PUSH
43232: LD_INT 1
43234: NEG
43235: PUSH
43236: LD_INT 1
43238: NEG
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: PUSH
43244: LD_INT 1
43246: NEG
43247: PUSH
43248: LD_INT 2
43250: NEG
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PUSH
43256: LD_INT 0
43258: PUSH
43259: LD_INT 2
43261: NEG
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: PUSH
43267: LD_INT 1
43269: PUSH
43270: LD_INT 1
43272: NEG
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 2
43280: PUSH
43281: LD_INT 0
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 2
43290: PUSH
43291: LD_INT 1
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: PUSH
43298: LD_INT 2
43300: PUSH
43301: LD_INT 2
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 1
43310: PUSH
43311: LD_INT 2
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 0
43320: PUSH
43321: LD_INT 2
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 1
43330: NEG
43331: PUSH
43332: LD_INT 1
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PUSH
43339: LD_INT 2
43341: NEG
43342: PUSH
43343: LD_INT 0
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: PUSH
43350: LD_INT 2
43352: NEG
43353: PUSH
43354: LD_INT 1
43356: NEG
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: PUSH
43362: LD_INT 2
43364: NEG
43365: PUSH
43366: LD_INT 2
43368: NEG
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: LIST
43380: LIST
43381: LIST
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43395: LD_ADDR_VAR 0 23
43399: PUSH
43400: LD_INT 0
43402: PUSH
43403: LD_INT 0
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: PUSH
43410: LD_INT 0
43412: PUSH
43413: LD_INT 1
43415: NEG
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: LD_INT 1
43423: PUSH
43424: LD_INT 0
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_INT 1
43433: PUSH
43434: LD_INT 1
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 0
43443: PUSH
43444: LD_INT 1
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: LD_INT 1
43453: NEG
43454: PUSH
43455: LD_INT 0
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PUSH
43462: LD_INT 1
43464: NEG
43465: PUSH
43466: LD_INT 1
43468: NEG
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 1
43476: NEG
43477: PUSH
43478: LD_INT 2
43480: NEG
43481: PUSH
43482: EMPTY
43483: LIST
43484: LIST
43485: PUSH
43486: LD_INT 0
43488: PUSH
43489: LD_INT 2
43491: NEG
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: PUSH
43497: LD_INT 1
43499: PUSH
43500: LD_INT 1
43502: NEG
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: PUSH
43508: LD_INT 2
43510: PUSH
43511: LD_INT 0
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: PUSH
43518: LD_INT 2
43520: PUSH
43521: LD_INT 1
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: LD_INT 2
43530: PUSH
43531: LD_INT 2
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 1
43540: PUSH
43541: LD_INT 2
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: LD_INT 0
43550: PUSH
43551: LD_INT 2
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: PUSH
43558: LD_INT 1
43560: NEG
43561: PUSH
43562: LD_INT 1
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PUSH
43569: LD_INT 2
43571: NEG
43572: PUSH
43573: LD_INT 0
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: LD_INT 2
43582: NEG
43583: PUSH
43584: LD_INT 1
43586: NEG
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: PUSH
43592: LD_INT 2
43594: NEG
43595: PUSH
43596: LD_INT 2
43598: NEG
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PUSH
43604: LD_INT 2
43606: NEG
43607: PUSH
43608: LD_INT 3
43610: NEG
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PUSH
43616: LD_INT 1
43618: NEG
43619: PUSH
43620: LD_INT 3
43622: NEG
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PUSH
43628: LD_INT 1
43630: PUSH
43631: LD_INT 2
43633: NEG
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 2
43641: PUSH
43642: LD_INT 1
43644: NEG
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: PUSH
43650: EMPTY
43651: LIST
43652: LIST
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: LIST
43661: LIST
43662: LIST
43663: LIST
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: LIST
43672: LIST
43673: LIST
43674: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
43675: LD_ADDR_VAR 0 24
43679: PUSH
43680: LD_INT 0
43682: PUSH
43683: LD_INT 0
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: LD_INT 0
43692: PUSH
43693: LD_INT 1
43695: NEG
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: LD_INT 1
43703: PUSH
43704: LD_INT 0
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 1
43713: PUSH
43714: LD_INT 1
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 0
43723: PUSH
43724: LD_INT 1
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: PUSH
43731: LD_INT 1
43733: NEG
43734: PUSH
43735: LD_INT 0
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: LD_INT 1
43744: NEG
43745: PUSH
43746: LD_INT 1
43748: NEG
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: PUSH
43754: LD_INT 1
43756: NEG
43757: PUSH
43758: LD_INT 2
43760: NEG
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PUSH
43766: LD_INT 0
43768: PUSH
43769: LD_INT 2
43771: NEG
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PUSH
43777: LD_INT 1
43779: PUSH
43780: LD_INT 1
43782: NEG
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: PUSH
43788: LD_INT 2
43790: PUSH
43791: LD_INT 0
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: LD_INT 2
43800: PUSH
43801: LD_INT 1
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 2
43810: PUSH
43811: LD_INT 2
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 1
43820: PUSH
43821: LD_INT 2
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 0
43830: PUSH
43831: LD_INT 2
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 1
43840: NEG
43841: PUSH
43842: LD_INT 1
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: LD_INT 2
43851: NEG
43852: PUSH
43853: LD_INT 0
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: LD_INT 2
43862: NEG
43863: PUSH
43864: LD_INT 1
43866: NEG
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PUSH
43872: LD_INT 2
43874: NEG
43875: PUSH
43876: LD_INT 2
43878: NEG
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 1
43886: PUSH
43887: LD_INT 2
43889: NEG
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 2
43897: PUSH
43898: LD_INT 1
43900: NEG
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 3
43908: PUSH
43909: LD_INT 1
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: LD_INT 3
43918: PUSH
43919: LD_INT 2
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: LIST
43935: LIST
43936: LIST
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
43951: LD_ADDR_VAR 0 25
43955: PUSH
43956: LD_INT 0
43958: PUSH
43959: LD_INT 0
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: PUSH
43966: LD_INT 0
43968: PUSH
43969: LD_INT 1
43971: NEG
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: LD_INT 1
43979: PUSH
43980: LD_INT 0
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 1
43989: PUSH
43990: LD_INT 1
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 0
43999: PUSH
44000: LD_INT 1
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: LD_INT 1
44009: NEG
44010: PUSH
44011: LD_INT 0
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 1
44020: NEG
44021: PUSH
44022: LD_INT 1
44024: NEG
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 1
44032: NEG
44033: PUSH
44034: LD_INT 2
44036: NEG
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: PUSH
44042: LD_INT 0
44044: PUSH
44045: LD_INT 2
44047: NEG
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 1
44055: PUSH
44056: LD_INT 1
44058: NEG
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: PUSH
44064: LD_INT 2
44066: PUSH
44067: LD_INT 0
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: PUSH
44074: LD_INT 2
44076: PUSH
44077: LD_INT 1
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: PUSH
44084: LD_INT 2
44086: PUSH
44087: LD_INT 2
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: LD_INT 1
44096: PUSH
44097: LD_INT 2
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: PUSH
44104: LD_INT 0
44106: PUSH
44107: LD_INT 2
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: PUSH
44114: LD_INT 1
44116: NEG
44117: PUSH
44118: LD_INT 1
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: PUSH
44125: LD_INT 2
44127: NEG
44128: PUSH
44129: LD_INT 0
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: LD_INT 2
44138: NEG
44139: PUSH
44140: LD_INT 1
44142: NEG
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 2
44150: NEG
44151: PUSH
44152: LD_INT 2
44154: NEG
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 3
44162: PUSH
44163: LD_INT 1
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 3
44172: PUSH
44173: LD_INT 2
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 2
44182: PUSH
44183: LD_INT 3
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: PUSH
44190: LD_INT 1
44192: PUSH
44193: LD_INT 3
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: LIST
44204: LIST
44205: LIST
44206: LIST
44207: LIST
44208: LIST
44209: LIST
44210: LIST
44211: LIST
44212: LIST
44213: LIST
44214: LIST
44215: LIST
44216: LIST
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: LIST
44222: LIST
44223: LIST
44224: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44225: LD_ADDR_VAR 0 26
44229: PUSH
44230: LD_INT 0
44232: PUSH
44233: LD_INT 0
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 0
44242: PUSH
44243: LD_INT 1
44245: NEG
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 1
44253: PUSH
44254: LD_INT 0
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: PUSH
44261: LD_INT 1
44263: PUSH
44264: LD_INT 1
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PUSH
44271: LD_INT 0
44273: PUSH
44274: LD_INT 1
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: LD_INT 1
44283: NEG
44284: PUSH
44285: LD_INT 0
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: PUSH
44292: LD_INT 1
44294: NEG
44295: PUSH
44296: LD_INT 1
44298: NEG
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: LD_INT 1
44306: NEG
44307: PUSH
44308: LD_INT 2
44310: NEG
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: PUSH
44316: LD_INT 0
44318: PUSH
44319: LD_INT 2
44321: NEG
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 1
44329: PUSH
44330: LD_INT 1
44332: NEG
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: LD_INT 2
44340: PUSH
44341: LD_INT 0
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: PUSH
44348: LD_INT 2
44350: PUSH
44351: LD_INT 1
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: LD_INT 2
44360: PUSH
44361: LD_INT 2
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 1
44370: PUSH
44371: LD_INT 2
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: PUSH
44378: LD_INT 0
44380: PUSH
44381: LD_INT 2
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: PUSH
44388: LD_INT 1
44390: NEG
44391: PUSH
44392: LD_INT 1
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: PUSH
44399: LD_INT 2
44401: NEG
44402: PUSH
44403: LD_INT 0
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 2
44412: NEG
44413: PUSH
44414: LD_INT 1
44416: NEG
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: LD_INT 2
44424: NEG
44425: PUSH
44426: LD_INT 2
44428: NEG
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: LD_INT 2
44436: PUSH
44437: LD_INT 3
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: PUSH
44444: LD_INT 1
44446: PUSH
44447: LD_INT 3
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 1
44456: NEG
44457: PUSH
44458: LD_INT 2
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: PUSH
44465: LD_INT 2
44467: NEG
44468: PUSH
44469: LD_INT 1
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44501: LD_ADDR_VAR 0 27
44505: PUSH
44506: LD_INT 0
44508: PUSH
44509: LD_INT 0
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 0
44518: PUSH
44519: LD_INT 1
44521: NEG
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 1
44529: PUSH
44530: LD_INT 0
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 1
44539: PUSH
44540: LD_INT 1
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PUSH
44547: LD_INT 0
44549: PUSH
44550: LD_INT 1
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: LD_INT 1
44559: NEG
44560: PUSH
44561: LD_INT 0
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: LD_INT 1
44570: NEG
44571: PUSH
44572: LD_INT 1
44574: NEG
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: LD_INT 1
44582: NEG
44583: PUSH
44584: LD_INT 2
44586: NEG
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: LD_INT 0
44594: PUSH
44595: LD_INT 2
44597: NEG
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 1
44605: PUSH
44606: LD_INT 1
44608: NEG
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: LD_INT 2
44616: PUSH
44617: LD_INT 0
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 2
44626: PUSH
44627: LD_INT 1
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: LD_INT 2
44636: PUSH
44637: LD_INT 2
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: LD_INT 1
44646: PUSH
44647: LD_INT 2
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: LD_INT 0
44656: PUSH
44657: LD_INT 2
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: PUSH
44664: LD_INT 1
44666: NEG
44667: PUSH
44668: LD_INT 1
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: LD_INT 2
44677: NEG
44678: PUSH
44679: LD_INT 0
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: PUSH
44686: LD_INT 2
44688: NEG
44689: PUSH
44690: LD_INT 1
44692: NEG
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: PUSH
44698: LD_INT 2
44700: NEG
44701: PUSH
44702: LD_INT 2
44704: NEG
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 1
44712: NEG
44713: PUSH
44714: LD_INT 2
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: PUSH
44721: LD_INT 2
44723: NEG
44724: PUSH
44725: LD_INT 1
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 3
44734: NEG
44735: PUSH
44736: LD_INT 1
44738: NEG
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PUSH
44744: LD_INT 3
44746: NEG
44747: PUSH
44748: LD_INT 2
44750: NEG
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44781: LD_ADDR_VAR 0 28
44785: PUSH
44786: LD_INT 0
44788: PUSH
44789: LD_INT 0
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 0
44798: PUSH
44799: LD_INT 1
44801: NEG
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: LD_INT 1
44809: PUSH
44810: LD_INT 0
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: LD_INT 1
44819: PUSH
44820: LD_INT 1
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: LD_INT 0
44829: PUSH
44830: LD_INT 1
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: PUSH
44837: LD_INT 1
44839: NEG
44840: PUSH
44841: LD_INT 0
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 1
44850: NEG
44851: PUSH
44852: LD_INT 1
44854: NEG
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 1
44862: NEG
44863: PUSH
44864: LD_INT 2
44866: NEG
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 0
44874: PUSH
44875: LD_INT 2
44877: NEG
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 1
44885: PUSH
44886: LD_INT 1
44888: NEG
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: LD_INT 2
44896: PUSH
44897: LD_INT 0
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 2
44906: PUSH
44907: LD_INT 1
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 2
44916: PUSH
44917: LD_INT 2
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 1
44926: PUSH
44927: LD_INT 2
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: LD_INT 0
44936: PUSH
44937: LD_INT 2
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: LD_INT 1
44946: NEG
44947: PUSH
44948: LD_INT 1
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 2
44957: NEG
44958: PUSH
44959: LD_INT 0
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 2
44968: NEG
44969: PUSH
44970: LD_INT 1
44972: NEG
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 2
44980: NEG
44981: PUSH
44982: LD_INT 2
44984: NEG
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: PUSH
44990: LD_INT 2
44992: NEG
44993: PUSH
44994: LD_INT 3
44996: NEG
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 1
45004: NEG
45005: PUSH
45006: LD_INT 3
45008: NEG
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: LD_INT 3
45016: NEG
45017: PUSH
45018: LD_INT 1
45020: NEG
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 3
45028: NEG
45029: PUSH
45030: LD_INT 2
45032: NEG
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45063: LD_ADDR_VAR 0 29
45067: PUSH
45068: LD_INT 0
45070: PUSH
45071: LD_INT 0
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 0
45080: PUSH
45081: LD_INT 1
45083: NEG
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 1
45091: PUSH
45092: LD_INT 0
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 1
45101: PUSH
45102: LD_INT 1
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: LD_INT 0
45111: PUSH
45112: LD_INT 1
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 1
45121: NEG
45122: PUSH
45123: LD_INT 0
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 1
45132: NEG
45133: PUSH
45134: LD_INT 1
45136: NEG
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 1
45144: NEG
45145: PUSH
45146: LD_INT 2
45148: NEG
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 0
45156: PUSH
45157: LD_INT 2
45159: NEG
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: PUSH
45165: LD_INT 1
45167: PUSH
45168: LD_INT 1
45170: NEG
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 2
45178: PUSH
45179: LD_INT 0
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: LD_INT 2
45188: PUSH
45189: LD_INT 1
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 1
45198: PUSH
45199: LD_INT 2
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 0
45208: PUSH
45209: LD_INT 2
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 1
45218: NEG
45219: PUSH
45220: LD_INT 1
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 2
45229: NEG
45230: PUSH
45231: LD_INT 1
45233: NEG
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: LD_INT 2
45241: NEG
45242: PUSH
45243: LD_INT 2
45245: NEG
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: PUSH
45251: LD_INT 2
45253: NEG
45254: PUSH
45255: LD_INT 3
45257: NEG
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 2
45265: PUSH
45266: LD_INT 1
45268: NEG
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: PUSH
45274: LD_INT 3
45276: PUSH
45277: LD_INT 1
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: LD_INT 1
45286: PUSH
45287: LD_INT 3
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: LD_INT 1
45296: NEG
45297: PUSH
45298: LD_INT 2
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: LD_INT 3
45307: NEG
45308: PUSH
45309: LD_INT 2
45311: NEG
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45342: LD_ADDR_VAR 0 30
45346: PUSH
45347: LD_INT 0
45349: PUSH
45350: LD_INT 0
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: LD_INT 0
45359: PUSH
45360: LD_INT 1
45362: NEG
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 1
45370: PUSH
45371: LD_INT 0
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 1
45380: PUSH
45381: LD_INT 1
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 0
45390: PUSH
45391: LD_INT 1
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 1
45400: NEG
45401: PUSH
45402: LD_INT 0
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 1
45411: NEG
45412: PUSH
45413: LD_INT 1
45415: NEG
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 1
45423: NEG
45424: PUSH
45425: LD_INT 2
45427: NEG
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PUSH
45433: LD_INT 0
45435: PUSH
45436: LD_INT 2
45438: NEG
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: LD_INT 1
45446: PUSH
45447: LD_INT 1
45449: NEG
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 2
45457: PUSH
45458: LD_INT 0
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 2
45467: PUSH
45468: LD_INT 1
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 2
45477: PUSH
45478: LD_INT 2
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 1
45487: PUSH
45488: LD_INT 2
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 1
45497: NEG
45498: PUSH
45499: LD_INT 1
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 2
45508: NEG
45509: PUSH
45510: LD_INT 0
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 2
45519: NEG
45520: PUSH
45521: LD_INT 1
45523: NEG
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 1
45531: NEG
45532: PUSH
45533: LD_INT 3
45535: NEG
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: PUSH
45541: LD_INT 1
45543: PUSH
45544: LD_INT 2
45546: NEG
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: LD_INT 3
45554: PUSH
45555: LD_INT 2
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 2
45564: PUSH
45565: LD_INT 3
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 2
45574: NEG
45575: PUSH
45576: LD_INT 1
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PUSH
45583: LD_INT 3
45585: NEG
45586: PUSH
45587: LD_INT 1
45589: NEG
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45620: LD_ADDR_VAR 0 31
45624: PUSH
45625: LD_INT 0
45627: PUSH
45628: LD_INT 0
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: LD_INT 0
45637: PUSH
45638: LD_INT 1
45640: NEG
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 1
45648: PUSH
45649: LD_INT 0
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 1
45658: PUSH
45659: LD_INT 1
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 0
45668: PUSH
45669: LD_INT 1
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 1
45678: NEG
45679: PUSH
45680: LD_INT 0
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: LD_INT 1
45689: NEG
45690: PUSH
45691: LD_INT 1
45693: NEG
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: LD_INT 1
45701: NEG
45702: PUSH
45703: LD_INT 2
45705: NEG
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PUSH
45711: LD_INT 1
45713: PUSH
45714: LD_INT 1
45716: NEG
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: LD_INT 2
45724: PUSH
45725: LD_INT 0
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 2
45734: PUSH
45735: LD_INT 1
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: LD_INT 2
45744: PUSH
45745: LD_INT 2
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 1
45754: PUSH
45755: LD_INT 2
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 0
45764: PUSH
45765: LD_INT 2
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 1
45774: NEG
45775: PUSH
45776: LD_INT 1
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 2
45785: NEG
45786: PUSH
45787: LD_INT 1
45789: NEG
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 2
45797: NEG
45798: PUSH
45799: LD_INT 2
45801: NEG
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PUSH
45807: LD_INT 2
45809: NEG
45810: PUSH
45811: LD_INT 3
45813: NEG
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 2
45821: PUSH
45822: LD_INT 1
45824: NEG
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 3
45832: PUSH
45833: LD_INT 1
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 1
45842: PUSH
45843: LD_INT 3
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 1
45852: NEG
45853: PUSH
45854: LD_INT 2
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_INT 3
45863: NEG
45864: PUSH
45865: LD_INT 2
45867: NEG
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: LIST
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45898: LD_ADDR_VAR 0 32
45902: PUSH
45903: LD_INT 0
45905: PUSH
45906: LD_INT 0
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 0
45915: PUSH
45916: LD_INT 1
45918: NEG
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 1
45926: PUSH
45927: LD_INT 0
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 1
45936: PUSH
45937: LD_INT 1
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 0
45946: PUSH
45947: LD_INT 1
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: LD_INT 1
45956: NEG
45957: PUSH
45958: LD_INT 0
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 1
45967: NEG
45968: PUSH
45969: LD_INT 1
45971: NEG
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 1
45979: NEG
45980: PUSH
45981: LD_INT 2
45983: NEG
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 0
45991: PUSH
45992: LD_INT 2
45994: NEG
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 1
46002: PUSH
46003: LD_INT 1
46005: NEG
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: LD_INT 2
46013: PUSH
46014: LD_INT 1
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 2
46023: PUSH
46024: LD_INT 2
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 1
46033: PUSH
46034: LD_INT 2
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 0
46043: PUSH
46044: LD_INT 2
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 1
46053: NEG
46054: PUSH
46055: LD_INT 1
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 2
46064: NEG
46065: PUSH
46066: LD_INT 0
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 2
46075: NEG
46076: PUSH
46077: LD_INT 1
46079: NEG
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 1
46087: NEG
46088: PUSH
46089: LD_INT 3
46091: NEG
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 1
46099: PUSH
46100: LD_INT 2
46102: NEG
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 3
46110: PUSH
46111: LD_INT 2
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 2
46120: PUSH
46121: LD_INT 3
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: LD_INT 2
46130: NEG
46131: PUSH
46132: LD_INT 1
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 3
46141: NEG
46142: PUSH
46143: LD_INT 1
46145: NEG
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46176: LD_ADDR_VAR 0 33
46180: PUSH
46181: LD_INT 0
46183: PUSH
46184: LD_INT 0
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 0
46193: PUSH
46194: LD_INT 1
46196: NEG
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 1
46204: PUSH
46205: LD_INT 0
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 1
46214: PUSH
46215: LD_INT 1
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 0
46224: PUSH
46225: LD_INT 1
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: LD_INT 1
46234: NEG
46235: PUSH
46236: LD_INT 0
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 1
46245: NEG
46246: PUSH
46247: LD_INT 1
46249: NEG
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 1
46257: NEG
46258: PUSH
46259: LD_INT 2
46261: NEG
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 1
46269: PUSH
46270: LD_INT 1
46272: NEG
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 2
46280: PUSH
46281: LD_INT 0
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 2
46290: PUSH
46291: LD_INT 1
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 1
46300: PUSH
46301: LD_INT 2
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 0
46310: PUSH
46311: LD_INT 2
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 1
46320: NEG
46321: PUSH
46322: LD_INT 1
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 2
46331: NEG
46332: PUSH
46333: LD_INT 0
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 2
46342: NEG
46343: PUSH
46344: LD_INT 1
46346: NEG
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 2
46354: NEG
46355: PUSH
46356: LD_INT 2
46358: NEG
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: LD_INT 2
46366: NEG
46367: PUSH
46368: LD_INT 3
46370: NEG
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: LD_INT 2
46378: PUSH
46379: LD_INT 1
46381: NEG
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: LD_INT 3
46389: PUSH
46390: LD_INT 1
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PUSH
46397: LD_INT 1
46399: PUSH
46400: LD_INT 3
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 1
46409: NEG
46410: PUSH
46411: LD_INT 2
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: LD_INT 3
46420: NEG
46421: PUSH
46422: LD_INT 2
46424: NEG
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46455: LD_ADDR_VAR 0 34
46459: PUSH
46460: LD_INT 0
46462: PUSH
46463: LD_INT 0
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 0
46472: PUSH
46473: LD_INT 1
46475: NEG
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 1
46483: PUSH
46484: LD_INT 0
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 1
46493: PUSH
46494: LD_INT 1
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 0
46503: PUSH
46504: LD_INT 1
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 1
46513: NEG
46514: PUSH
46515: LD_INT 0
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 1
46524: NEG
46525: PUSH
46526: LD_INT 1
46528: NEG
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 1
46536: NEG
46537: PUSH
46538: LD_INT 2
46540: NEG
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 0
46548: PUSH
46549: LD_INT 2
46551: NEG
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: LD_INT 1
46559: PUSH
46560: LD_INT 1
46562: NEG
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 2
46570: PUSH
46571: LD_INT 1
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 2
46580: PUSH
46581: LD_INT 2
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 1
46590: PUSH
46591: LD_INT 2
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 1
46600: NEG
46601: PUSH
46602: LD_INT 1
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 2
46611: NEG
46612: PUSH
46613: LD_INT 0
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 2
46622: NEG
46623: PUSH
46624: LD_INT 1
46626: NEG
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 2
46634: NEG
46635: PUSH
46636: LD_INT 2
46638: NEG
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 1
46646: NEG
46647: PUSH
46648: LD_INT 3
46650: NEG
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 1
46658: PUSH
46659: LD_INT 2
46661: NEG
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 3
46669: PUSH
46670: LD_INT 2
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 2
46679: PUSH
46680: LD_INT 3
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 2
46689: NEG
46690: PUSH
46691: LD_INT 1
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 3
46700: NEG
46701: PUSH
46702: LD_INT 1
46704: NEG
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46735: LD_ADDR_VAR 0 35
46739: PUSH
46740: LD_INT 0
46742: PUSH
46743: LD_INT 0
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: LD_INT 0
46752: PUSH
46753: LD_INT 1
46755: NEG
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: LD_INT 1
46763: PUSH
46764: LD_INT 0
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 1
46773: PUSH
46774: LD_INT 1
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 0
46783: PUSH
46784: LD_INT 1
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 1
46793: NEG
46794: PUSH
46795: LD_INT 0
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 1
46804: NEG
46805: PUSH
46806: LD_INT 1
46808: NEG
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 2
46816: PUSH
46817: LD_INT 1
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 2
46826: NEG
46827: PUSH
46828: LD_INT 1
46830: NEG
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46847: LD_ADDR_VAR 0 36
46851: PUSH
46852: LD_INT 0
46854: PUSH
46855: LD_INT 0
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 0
46864: PUSH
46865: LD_INT 1
46867: NEG
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 1
46875: PUSH
46876: LD_INT 0
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 1
46885: PUSH
46886: LD_INT 1
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 0
46895: PUSH
46896: LD_INT 1
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 1
46905: NEG
46906: PUSH
46907: LD_INT 0
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 1
46916: NEG
46917: PUSH
46918: LD_INT 1
46920: NEG
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: LD_INT 1
46928: NEG
46929: PUSH
46930: LD_INT 2
46932: NEG
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 1
46940: PUSH
46941: LD_INT 2
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46959: LD_ADDR_VAR 0 37
46963: PUSH
46964: LD_INT 0
46966: PUSH
46967: LD_INT 0
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 0
46976: PUSH
46977: LD_INT 1
46979: NEG
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 1
46987: PUSH
46988: LD_INT 0
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 1
46997: PUSH
46998: LD_INT 1
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 0
47007: PUSH
47008: LD_INT 1
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 1
47017: NEG
47018: PUSH
47019: LD_INT 0
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 1
47028: NEG
47029: PUSH
47030: LD_INT 1
47032: NEG
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 1
47040: PUSH
47041: LD_INT 1
47043: NEG
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 1
47051: NEG
47052: PUSH
47053: LD_INT 1
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47071: LD_ADDR_VAR 0 38
47075: PUSH
47076: LD_INT 0
47078: PUSH
47079: LD_INT 0
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 0
47088: PUSH
47089: LD_INT 1
47091: NEG
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: LD_INT 1
47099: PUSH
47100: LD_INT 0
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: LD_INT 1
47109: PUSH
47110: LD_INT 1
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 0
47119: PUSH
47120: LD_INT 1
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 1
47129: NEG
47130: PUSH
47131: LD_INT 0
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 1
47140: NEG
47141: PUSH
47142: LD_INT 1
47144: NEG
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 2
47152: PUSH
47153: LD_INT 1
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: LD_INT 2
47162: NEG
47163: PUSH
47164: LD_INT 1
47166: NEG
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47183: LD_ADDR_VAR 0 39
47187: PUSH
47188: LD_INT 0
47190: PUSH
47191: LD_INT 0
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 0
47200: PUSH
47201: LD_INT 1
47203: NEG
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 1
47211: PUSH
47212: LD_INT 0
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 1
47221: PUSH
47222: LD_INT 1
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 0
47231: PUSH
47232: LD_INT 1
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: LD_INT 1
47241: NEG
47242: PUSH
47243: LD_INT 0
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: LD_INT 1
47252: NEG
47253: PUSH
47254: LD_INT 1
47256: NEG
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 1
47264: NEG
47265: PUSH
47266: LD_INT 2
47268: NEG
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 1
47276: PUSH
47277: LD_INT 2
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47295: LD_ADDR_VAR 0 40
47299: PUSH
47300: LD_INT 0
47302: PUSH
47303: LD_INT 0
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 0
47312: PUSH
47313: LD_INT 1
47315: NEG
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: LD_INT 1
47323: PUSH
47324: LD_INT 0
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: LD_INT 1
47333: PUSH
47334: LD_INT 1
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: PUSH
47341: LD_INT 0
47343: PUSH
47344: LD_INT 1
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: LD_INT 1
47353: NEG
47354: PUSH
47355: LD_INT 0
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 1
47364: NEG
47365: PUSH
47366: LD_INT 1
47368: NEG
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 1
47376: PUSH
47377: LD_INT 1
47379: NEG
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 1
47387: NEG
47388: PUSH
47389: LD_INT 1
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47407: LD_ADDR_VAR 0 41
47411: PUSH
47412: LD_INT 0
47414: PUSH
47415: LD_INT 0
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 0
47424: PUSH
47425: LD_INT 1
47427: NEG
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 1
47435: PUSH
47436: LD_INT 0
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 1
47445: PUSH
47446: LD_INT 1
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 0
47455: PUSH
47456: LD_INT 1
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 1
47465: NEG
47466: PUSH
47467: LD_INT 0
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 1
47476: NEG
47477: PUSH
47478: LD_INT 1
47480: NEG
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 1
47488: NEG
47489: PUSH
47490: LD_INT 2
47492: NEG
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 1
47500: PUSH
47501: LD_INT 1
47503: NEG
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 2
47511: PUSH
47512: LD_INT 0
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 2
47521: PUSH
47522: LD_INT 1
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 2
47531: PUSH
47532: LD_INT 2
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 1
47541: PUSH
47542: LD_INT 2
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 1
47551: NEG
47552: PUSH
47553: LD_INT 1
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 2
47562: NEG
47563: PUSH
47564: LD_INT 0
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 2
47573: NEG
47574: PUSH
47575: LD_INT 1
47577: NEG
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 2
47585: NEG
47586: PUSH
47587: LD_INT 2
47589: NEG
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 2
47597: NEG
47598: PUSH
47599: LD_INT 3
47601: NEG
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 2
47609: PUSH
47610: LD_INT 1
47612: NEG
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 3
47620: PUSH
47621: LD_INT 0
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 3
47630: PUSH
47631: LD_INT 1
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: LD_INT 3
47640: PUSH
47641: LD_INT 2
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 3
47650: PUSH
47651: LD_INT 3
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 2
47660: PUSH
47661: LD_INT 3
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 2
47670: NEG
47671: PUSH
47672: LD_INT 1
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 3
47681: NEG
47682: PUSH
47683: LD_INT 0
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 3
47692: NEG
47693: PUSH
47694: LD_INT 1
47696: NEG
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 3
47704: NEG
47705: PUSH
47706: LD_INT 2
47708: NEG
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 3
47716: NEG
47717: PUSH
47718: LD_INT 3
47720: NEG
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47757: LD_ADDR_VAR 0 42
47761: PUSH
47762: LD_INT 0
47764: PUSH
47765: LD_INT 0
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 0
47774: PUSH
47775: LD_INT 1
47777: NEG
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 1
47785: PUSH
47786: LD_INT 0
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 1
47795: PUSH
47796: LD_INT 1
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 0
47805: PUSH
47806: LD_INT 1
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 1
47815: NEG
47816: PUSH
47817: LD_INT 0
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 1
47826: NEG
47827: PUSH
47828: LD_INT 1
47830: NEG
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 1
47838: NEG
47839: PUSH
47840: LD_INT 2
47842: NEG
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 0
47850: PUSH
47851: LD_INT 2
47853: NEG
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 1
47861: PUSH
47862: LD_INT 1
47864: NEG
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 2
47872: PUSH
47873: LD_INT 1
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 2
47882: PUSH
47883: LD_INT 2
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 1
47892: PUSH
47893: LD_INT 2
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 0
47902: PUSH
47903: LD_INT 2
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 1
47912: NEG
47913: PUSH
47914: LD_INT 1
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 2
47923: NEG
47924: PUSH
47925: LD_INT 1
47927: NEG
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 2
47935: NEG
47936: PUSH
47937: LD_INT 2
47939: NEG
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 2
47947: NEG
47948: PUSH
47949: LD_INT 3
47951: NEG
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 1
47959: NEG
47960: PUSH
47961: LD_INT 3
47963: NEG
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 0
47971: PUSH
47972: LD_INT 3
47974: NEG
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: LD_INT 1
47982: PUSH
47983: LD_INT 2
47985: NEG
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 3
47993: PUSH
47994: LD_INT 2
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 3
48003: PUSH
48004: LD_INT 3
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: PUSH
48011: LD_INT 2
48013: PUSH
48014: LD_INT 3
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 1
48023: PUSH
48024: LD_INT 3
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: LD_INT 0
48033: PUSH
48034: LD_INT 3
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: LD_INT 1
48043: NEG
48044: PUSH
48045: LD_INT 2
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: LD_INT 3
48054: NEG
48055: PUSH
48056: LD_INT 2
48058: NEG
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 3
48066: NEG
48067: PUSH
48068: LD_INT 3
48070: NEG
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: LIST
48093: LIST
48094: LIST
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48107: LD_ADDR_VAR 0 43
48111: PUSH
48112: LD_INT 0
48114: PUSH
48115: LD_INT 0
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 0
48124: PUSH
48125: LD_INT 1
48127: NEG
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 1
48135: PUSH
48136: LD_INT 0
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 1
48145: PUSH
48146: LD_INT 1
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 0
48155: PUSH
48156: LD_INT 1
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 1
48165: NEG
48166: PUSH
48167: LD_INT 0
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 1
48176: NEG
48177: PUSH
48178: LD_INT 1
48180: NEG
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 1
48188: NEG
48189: PUSH
48190: LD_INT 2
48192: NEG
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 0
48200: PUSH
48201: LD_INT 2
48203: NEG
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 1
48211: PUSH
48212: LD_INT 1
48214: NEG
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 2
48222: PUSH
48223: LD_INT 0
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: LD_INT 2
48232: PUSH
48233: LD_INT 1
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 1
48242: PUSH
48243: LD_INT 2
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 0
48252: PUSH
48253: LD_INT 2
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 1
48262: NEG
48263: PUSH
48264: LD_INT 1
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 2
48273: NEG
48274: PUSH
48275: LD_INT 0
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 2
48284: NEG
48285: PUSH
48286: LD_INT 1
48288: NEG
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PUSH
48294: LD_INT 1
48296: NEG
48297: PUSH
48298: LD_INT 3
48300: NEG
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 0
48308: PUSH
48309: LD_INT 3
48311: NEG
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 1
48319: PUSH
48320: LD_INT 2
48322: NEG
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 2
48330: PUSH
48331: LD_INT 1
48333: NEG
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 3
48341: PUSH
48342: LD_INT 0
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PUSH
48349: LD_INT 3
48351: PUSH
48352: LD_INT 1
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 1
48361: PUSH
48362: LD_INT 3
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 0
48371: PUSH
48372: LD_INT 3
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 1
48381: NEG
48382: PUSH
48383: LD_INT 2
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 2
48392: NEG
48393: PUSH
48394: LD_INT 1
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 3
48403: NEG
48404: PUSH
48405: LD_INT 0
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 3
48414: NEG
48415: PUSH
48416: LD_INT 1
48418: NEG
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: LIST
48428: LIST
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48455: LD_ADDR_VAR 0 44
48459: PUSH
48460: LD_INT 0
48462: PUSH
48463: LD_INT 0
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 0
48472: PUSH
48473: LD_INT 1
48475: NEG
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 1
48483: PUSH
48484: LD_INT 0
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: PUSH
48491: LD_INT 1
48493: PUSH
48494: LD_INT 1
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 0
48503: PUSH
48504: LD_INT 1
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 1
48513: NEG
48514: PUSH
48515: LD_INT 0
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 1
48524: NEG
48525: PUSH
48526: LD_INT 1
48528: NEG
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 1
48536: NEG
48537: PUSH
48538: LD_INT 2
48540: NEG
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: LD_INT 1
48548: PUSH
48549: LD_INT 1
48551: NEG
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 2
48559: PUSH
48560: LD_INT 0
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: PUSH
48567: LD_INT 2
48569: PUSH
48570: LD_INT 1
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PUSH
48577: LD_INT 2
48579: PUSH
48580: LD_INT 2
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: LD_INT 1
48589: PUSH
48590: LD_INT 2
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: LD_INT 1
48599: NEG
48600: PUSH
48601: LD_INT 1
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: LD_INT 2
48610: NEG
48611: PUSH
48612: LD_INT 0
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 2
48621: NEG
48622: PUSH
48623: LD_INT 1
48625: NEG
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 2
48633: NEG
48634: PUSH
48635: LD_INT 2
48637: NEG
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: LD_INT 2
48645: NEG
48646: PUSH
48647: LD_INT 3
48649: NEG
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 2
48657: PUSH
48658: LD_INT 1
48660: NEG
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: LD_INT 3
48668: PUSH
48669: LD_INT 0
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 3
48678: PUSH
48679: LD_INT 1
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: LD_INT 3
48688: PUSH
48689: LD_INT 2
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 3
48698: PUSH
48699: LD_INT 3
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 2
48708: PUSH
48709: LD_INT 3
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 2
48718: NEG
48719: PUSH
48720: LD_INT 1
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 3
48729: NEG
48730: PUSH
48731: LD_INT 0
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 3
48740: NEG
48741: PUSH
48742: LD_INT 1
48744: NEG
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: LD_INT 3
48752: NEG
48753: PUSH
48754: LD_INT 2
48756: NEG
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 3
48764: NEG
48765: PUSH
48766: LD_INT 3
48768: NEG
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: LIST
48786: LIST
48787: LIST
48788: LIST
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48805: LD_ADDR_VAR 0 45
48809: PUSH
48810: LD_INT 0
48812: PUSH
48813: LD_INT 0
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 0
48822: PUSH
48823: LD_INT 1
48825: NEG
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 1
48833: PUSH
48834: LD_INT 0
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 1
48843: PUSH
48844: LD_INT 1
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 0
48853: PUSH
48854: LD_INT 1
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 1
48863: NEG
48864: PUSH
48865: LD_INT 0
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 1
48874: NEG
48875: PUSH
48876: LD_INT 1
48878: NEG
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 1
48886: NEG
48887: PUSH
48888: LD_INT 2
48890: NEG
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 0
48898: PUSH
48899: LD_INT 2
48901: NEG
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 1
48909: PUSH
48910: LD_INT 1
48912: NEG
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 2
48920: PUSH
48921: LD_INT 1
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 2
48930: PUSH
48931: LD_INT 2
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 1
48940: PUSH
48941: LD_INT 2
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 0
48950: PUSH
48951: LD_INT 2
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 1
48960: NEG
48961: PUSH
48962: LD_INT 1
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 2
48971: NEG
48972: PUSH
48973: LD_INT 1
48975: NEG
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 2
48983: NEG
48984: PUSH
48985: LD_INT 2
48987: NEG
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 2
48995: NEG
48996: PUSH
48997: LD_INT 3
48999: NEG
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 1
49007: NEG
49008: PUSH
49009: LD_INT 3
49011: NEG
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 0
49019: PUSH
49020: LD_INT 3
49022: NEG
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 1
49030: PUSH
49031: LD_INT 2
49033: NEG
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 3
49041: PUSH
49042: LD_INT 2
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 3
49051: PUSH
49052: LD_INT 3
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 2
49061: PUSH
49062: LD_INT 3
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 1
49071: PUSH
49072: LD_INT 3
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 0
49081: PUSH
49082: LD_INT 3
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: LD_INT 1
49091: NEG
49092: PUSH
49093: LD_INT 2
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 3
49102: NEG
49103: PUSH
49104: LD_INT 2
49106: NEG
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 3
49114: NEG
49115: PUSH
49116: LD_INT 3
49118: NEG
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49155: LD_ADDR_VAR 0 46
49159: PUSH
49160: LD_INT 0
49162: PUSH
49163: LD_INT 0
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 0
49172: PUSH
49173: LD_INT 1
49175: NEG
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 1
49183: PUSH
49184: LD_INT 0
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 1
49193: PUSH
49194: LD_INT 1
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: LD_INT 0
49203: PUSH
49204: LD_INT 1
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 1
49213: NEG
49214: PUSH
49215: LD_INT 0
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 1
49224: NEG
49225: PUSH
49226: LD_INT 1
49228: NEG
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 1
49236: NEG
49237: PUSH
49238: LD_INT 2
49240: NEG
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: LD_INT 0
49248: PUSH
49249: LD_INT 2
49251: NEG
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 1
49259: PUSH
49260: LD_INT 1
49262: NEG
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 2
49270: PUSH
49271: LD_INT 0
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 2
49280: PUSH
49281: LD_INT 1
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 1
49290: PUSH
49291: LD_INT 2
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 0
49300: PUSH
49301: LD_INT 2
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PUSH
49308: LD_INT 1
49310: NEG
49311: PUSH
49312: LD_INT 1
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: PUSH
49319: LD_INT 2
49321: NEG
49322: PUSH
49323: LD_INT 0
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 2
49332: NEG
49333: PUSH
49334: LD_INT 1
49336: NEG
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: LD_INT 1
49344: NEG
49345: PUSH
49346: LD_INT 3
49348: NEG
49349: PUSH
49350: EMPTY
49351: LIST
49352: LIST
49353: PUSH
49354: LD_INT 0
49356: PUSH
49357: LD_INT 3
49359: NEG
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 1
49367: PUSH
49368: LD_INT 2
49370: NEG
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 2
49378: PUSH
49379: LD_INT 1
49381: NEG
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: LD_INT 3
49389: PUSH
49390: LD_INT 0
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 3
49399: PUSH
49400: LD_INT 1
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 1
49409: PUSH
49410: LD_INT 3
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 0
49419: PUSH
49420: LD_INT 3
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 1
49429: NEG
49430: PUSH
49431: LD_INT 2
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 2
49440: NEG
49441: PUSH
49442: LD_INT 1
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 3
49451: NEG
49452: PUSH
49453: LD_INT 0
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 3
49462: NEG
49463: PUSH
49464: LD_INT 1
49466: NEG
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: LIST
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49503: LD_ADDR_VAR 0 47
49507: PUSH
49508: LD_INT 0
49510: PUSH
49511: LD_INT 0
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 0
49520: PUSH
49521: LD_INT 1
49523: NEG
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 1
49531: PUSH
49532: LD_INT 0
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 1
49541: PUSH
49542: LD_INT 1
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 0
49551: PUSH
49552: LD_INT 1
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 1
49561: NEG
49562: PUSH
49563: LD_INT 0
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 1
49572: NEG
49573: PUSH
49574: LD_INT 1
49576: NEG
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 1
49584: NEG
49585: PUSH
49586: LD_INT 2
49588: NEG
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 0
49596: PUSH
49597: LD_INT 2
49599: NEG
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 1
49607: PUSH
49608: LD_INT 1
49610: NEG
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 2
49618: NEG
49619: PUSH
49620: LD_INT 1
49622: NEG
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 2
49630: NEG
49631: PUSH
49632: LD_INT 2
49634: NEG
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: LIST
49653: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49654: LD_ADDR_VAR 0 48
49658: PUSH
49659: LD_INT 0
49661: PUSH
49662: LD_INT 0
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 0
49671: PUSH
49672: LD_INT 1
49674: NEG
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 1
49682: PUSH
49683: LD_INT 0
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 1
49692: PUSH
49693: LD_INT 1
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 0
49702: PUSH
49703: LD_INT 1
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 1
49712: NEG
49713: PUSH
49714: LD_INT 0
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 1
49723: NEG
49724: PUSH
49725: LD_INT 1
49727: NEG
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 1
49735: NEG
49736: PUSH
49737: LD_INT 2
49739: NEG
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 0
49747: PUSH
49748: LD_INT 2
49750: NEG
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 1
49758: PUSH
49759: LD_INT 1
49761: NEG
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 2
49769: PUSH
49770: LD_INT 0
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 2
49779: PUSH
49780: LD_INT 1
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49801: LD_ADDR_VAR 0 49
49805: PUSH
49806: LD_INT 0
49808: PUSH
49809: LD_INT 0
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 0
49818: PUSH
49819: LD_INT 1
49821: NEG
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 1
49829: PUSH
49830: LD_INT 0
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 1
49839: PUSH
49840: LD_INT 1
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 0
49849: PUSH
49850: LD_INT 1
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 1
49859: NEG
49860: PUSH
49861: LD_INT 0
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 1
49870: NEG
49871: PUSH
49872: LD_INT 1
49874: NEG
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 1
49882: PUSH
49883: LD_INT 1
49885: NEG
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 2
49893: PUSH
49894: LD_INT 0
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 2
49903: PUSH
49904: LD_INT 1
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 2
49913: PUSH
49914: LD_INT 2
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 1
49923: PUSH
49924: LD_INT 2
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49945: LD_ADDR_VAR 0 50
49949: PUSH
49950: LD_INT 0
49952: PUSH
49953: LD_INT 0
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 0
49962: PUSH
49963: LD_INT 1
49965: NEG
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 1
49973: PUSH
49974: LD_INT 0
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 1
49983: PUSH
49984: LD_INT 1
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 0
49993: PUSH
49994: LD_INT 1
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 1
50003: NEG
50004: PUSH
50005: LD_INT 0
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 1
50014: NEG
50015: PUSH
50016: LD_INT 1
50018: NEG
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 2
50026: PUSH
50027: LD_INT 1
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: LD_INT 2
50036: PUSH
50037: LD_INT 2
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 1
50046: PUSH
50047: LD_INT 2
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 0
50056: PUSH
50057: LD_INT 2
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 1
50066: NEG
50067: PUSH
50068: LD_INT 1
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50089: LD_ADDR_VAR 0 51
50093: PUSH
50094: LD_INT 0
50096: PUSH
50097: LD_INT 0
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 0
50106: PUSH
50107: LD_INT 1
50109: NEG
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 1
50117: PUSH
50118: LD_INT 0
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 1
50127: PUSH
50128: LD_INT 1
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 0
50137: PUSH
50138: LD_INT 1
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 1
50147: NEG
50148: PUSH
50149: LD_INT 0
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 1
50158: NEG
50159: PUSH
50160: LD_INT 1
50162: NEG
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: LD_INT 1
50170: PUSH
50171: LD_INT 2
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 0
50180: PUSH
50181: LD_INT 2
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 1
50190: NEG
50191: PUSH
50192: LD_INT 1
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 2
50201: NEG
50202: PUSH
50203: LD_INT 0
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 2
50212: NEG
50213: PUSH
50214: LD_INT 1
50216: NEG
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50236: LD_ADDR_VAR 0 52
50240: PUSH
50241: LD_INT 0
50243: PUSH
50244: LD_INT 0
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 0
50253: PUSH
50254: LD_INT 1
50256: NEG
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: LD_INT 1
50264: PUSH
50265: LD_INT 0
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 1
50274: PUSH
50275: LD_INT 1
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 0
50284: PUSH
50285: LD_INT 1
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 1
50294: NEG
50295: PUSH
50296: LD_INT 0
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 1
50305: NEG
50306: PUSH
50307: LD_INT 1
50309: NEG
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 1
50317: NEG
50318: PUSH
50319: LD_INT 2
50321: NEG
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 1
50329: NEG
50330: PUSH
50331: LD_INT 1
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 2
50340: NEG
50341: PUSH
50342: LD_INT 0
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: LD_INT 2
50351: NEG
50352: PUSH
50353: LD_INT 1
50355: NEG
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 2
50363: NEG
50364: PUSH
50365: LD_INT 2
50367: NEG
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: LIST
50377: LIST
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50387: LD_ADDR_VAR 0 53
50391: PUSH
50392: LD_INT 0
50394: PUSH
50395: LD_INT 0
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 0
50404: PUSH
50405: LD_INT 1
50407: NEG
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: LD_INT 1
50415: PUSH
50416: LD_INT 0
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 1
50425: PUSH
50426: LD_INT 1
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 0
50435: PUSH
50436: LD_INT 1
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 1
50445: NEG
50446: PUSH
50447: LD_INT 0
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 1
50456: NEG
50457: PUSH
50458: LD_INT 1
50460: NEG
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 1
50468: NEG
50469: PUSH
50470: LD_INT 2
50472: NEG
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 0
50480: PUSH
50481: LD_INT 2
50483: NEG
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 1
50491: PUSH
50492: LD_INT 1
50494: NEG
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 2
50502: PUSH
50503: LD_INT 0
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 2
50512: PUSH
50513: LD_INT 1
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 2
50522: PUSH
50523: LD_INT 2
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 1
50532: PUSH
50533: LD_INT 2
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 0
50542: PUSH
50543: LD_INT 2
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 1
50552: NEG
50553: PUSH
50554: LD_INT 1
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 2
50563: NEG
50564: PUSH
50565: LD_INT 0
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 2
50574: NEG
50575: PUSH
50576: LD_INT 1
50578: NEG
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 2
50586: NEG
50587: PUSH
50588: LD_INT 2
50590: NEG
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50617: LD_ADDR_VAR 0 54
50621: PUSH
50622: LD_INT 0
50624: PUSH
50625: LD_INT 0
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 0
50634: PUSH
50635: LD_INT 1
50637: NEG
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 1
50645: PUSH
50646: LD_INT 0
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 1
50655: PUSH
50656: LD_INT 1
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 0
50665: PUSH
50666: LD_INT 1
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: LD_INT 1
50675: NEG
50676: PUSH
50677: LD_INT 0
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 1
50686: NEG
50687: PUSH
50688: LD_INT 1
50690: NEG
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 1
50698: NEG
50699: PUSH
50700: LD_INT 2
50702: NEG
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 0
50710: PUSH
50711: LD_INT 2
50713: NEG
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 1
50721: PUSH
50722: LD_INT 1
50724: NEG
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 2
50732: PUSH
50733: LD_INT 0
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 2
50742: PUSH
50743: LD_INT 1
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 2
50752: PUSH
50753: LD_INT 2
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: LD_INT 1
50762: PUSH
50763: LD_INT 2
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 0
50772: PUSH
50773: LD_INT 2
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 1
50782: NEG
50783: PUSH
50784: LD_INT 1
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 2
50793: NEG
50794: PUSH
50795: LD_INT 0
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: LD_INT 2
50804: NEG
50805: PUSH
50806: LD_INT 1
50808: NEG
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 2
50816: NEG
50817: PUSH
50818: LD_INT 2
50820: NEG
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50847: LD_ADDR_VAR 0 55
50851: PUSH
50852: LD_INT 0
50854: PUSH
50855: LD_INT 0
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 0
50864: PUSH
50865: LD_INT 1
50867: NEG
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 1
50875: PUSH
50876: LD_INT 0
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 1
50885: PUSH
50886: LD_INT 1
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 0
50895: PUSH
50896: LD_INT 1
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 1
50905: NEG
50906: PUSH
50907: LD_INT 0
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 1
50916: NEG
50917: PUSH
50918: LD_INT 1
50920: NEG
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 1
50928: NEG
50929: PUSH
50930: LD_INT 2
50932: NEG
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 0
50940: PUSH
50941: LD_INT 2
50943: NEG
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 1
50951: PUSH
50952: LD_INT 1
50954: NEG
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 2
50962: PUSH
50963: LD_INT 0
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 2
50972: PUSH
50973: LD_INT 1
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 2
50982: PUSH
50983: LD_INT 2
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 1
50992: PUSH
50993: LD_INT 2
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 0
51002: PUSH
51003: LD_INT 2
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 1
51012: NEG
51013: PUSH
51014: LD_INT 1
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 2
51023: NEG
51024: PUSH
51025: LD_INT 0
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 2
51034: NEG
51035: PUSH
51036: LD_INT 1
51038: NEG
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: PUSH
51044: LD_INT 2
51046: NEG
51047: PUSH
51048: LD_INT 2
51050: NEG
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51077: LD_ADDR_VAR 0 56
51081: PUSH
51082: LD_INT 0
51084: PUSH
51085: LD_INT 0
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 0
51094: PUSH
51095: LD_INT 1
51097: NEG
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 1
51105: PUSH
51106: LD_INT 0
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 1
51115: PUSH
51116: LD_INT 1
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: LD_INT 0
51125: PUSH
51126: LD_INT 1
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 1
51135: NEG
51136: PUSH
51137: LD_INT 0
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 1
51146: NEG
51147: PUSH
51148: LD_INT 1
51150: NEG
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 1
51158: NEG
51159: PUSH
51160: LD_INT 2
51162: NEG
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 0
51170: PUSH
51171: LD_INT 2
51173: NEG
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 1
51181: PUSH
51182: LD_INT 1
51184: NEG
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 2
51192: PUSH
51193: LD_INT 0
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 2
51202: PUSH
51203: LD_INT 1
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: LD_INT 2
51212: PUSH
51213: LD_INT 2
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 1
51222: PUSH
51223: LD_INT 2
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 0
51232: PUSH
51233: LD_INT 2
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 1
51242: NEG
51243: PUSH
51244: LD_INT 1
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 2
51253: NEG
51254: PUSH
51255: LD_INT 0
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 2
51264: NEG
51265: PUSH
51266: LD_INT 1
51268: NEG
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 2
51276: NEG
51277: PUSH
51278: LD_INT 2
51280: NEG
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51307: LD_ADDR_VAR 0 57
51311: PUSH
51312: LD_INT 0
51314: PUSH
51315: LD_INT 0
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 0
51324: PUSH
51325: LD_INT 1
51327: NEG
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 1
51335: PUSH
51336: LD_INT 0
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 1
51345: PUSH
51346: LD_INT 1
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 0
51355: PUSH
51356: LD_INT 1
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 1
51365: NEG
51366: PUSH
51367: LD_INT 0
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 1
51376: NEG
51377: PUSH
51378: LD_INT 1
51380: NEG
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 1
51388: NEG
51389: PUSH
51390: LD_INT 2
51392: NEG
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 0
51400: PUSH
51401: LD_INT 2
51403: NEG
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 1
51411: PUSH
51412: LD_INT 1
51414: NEG
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: LD_INT 2
51422: PUSH
51423: LD_INT 0
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 2
51432: PUSH
51433: LD_INT 1
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: LD_INT 2
51442: PUSH
51443: LD_INT 2
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 1
51452: PUSH
51453: LD_INT 2
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 0
51462: PUSH
51463: LD_INT 2
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 1
51472: NEG
51473: PUSH
51474: LD_INT 1
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 2
51483: NEG
51484: PUSH
51485: LD_INT 0
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: LD_INT 2
51494: NEG
51495: PUSH
51496: LD_INT 1
51498: NEG
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: PUSH
51504: LD_INT 2
51506: NEG
51507: PUSH
51508: LD_INT 2
51510: NEG
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51537: LD_ADDR_VAR 0 58
51541: PUSH
51542: LD_INT 0
51544: PUSH
51545: LD_INT 0
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 0
51554: PUSH
51555: LD_INT 1
51557: NEG
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 1
51565: PUSH
51566: LD_INT 0
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 1
51575: PUSH
51576: LD_INT 1
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 0
51585: PUSH
51586: LD_INT 1
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 1
51595: NEG
51596: PUSH
51597: LD_INT 0
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 1
51606: NEG
51607: PUSH
51608: LD_INT 1
51610: NEG
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 1
51618: NEG
51619: PUSH
51620: LD_INT 2
51622: NEG
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 0
51630: PUSH
51631: LD_INT 2
51633: NEG
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 1
51641: PUSH
51642: LD_INT 1
51644: NEG
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 2
51652: PUSH
51653: LD_INT 0
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 2
51662: PUSH
51663: LD_INT 1
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 2
51672: PUSH
51673: LD_INT 2
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PUSH
51680: LD_INT 1
51682: PUSH
51683: LD_INT 2
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 0
51692: PUSH
51693: LD_INT 2
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 1
51702: NEG
51703: PUSH
51704: LD_INT 1
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: LD_INT 2
51713: NEG
51714: PUSH
51715: LD_INT 0
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 2
51724: NEG
51725: PUSH
51726: LD_INT 1
51728: NEG
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 2
51736: NEG
51737: PUSH
51738: LD_INT 2
51740: NEG
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51767: LD_ADDR_VAR 0 59
51771: PUSH
51772: LD_INT 0
51774: PUSH
51775: LD_INT 0
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 0
51784: PUSH
51785: LD_INT 1
51787: NEG
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 1
51795: PUSH
51796: LD_INT 0
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 1
51805: PUSH
51806: LD_INT 1
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 0
51815: PUSH
51816: LD_INT 1
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 1
51825: NEG
51826: PUSH
51827: LD_INT 0
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 1
51836: NEG
51837: PUSH
51838: LD_INT 1
51840: NEG
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51855: LD_ADDR_VAR 0 60
51859: PUSH
51860: LD_INT 0
51862: PUSH
51863: LD_INT 0
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 0
51872: PUSH
51873: LD_INT 1
51875: NEG
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 1
51883: PUSH
51884: LD_INT 0
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 1
51893: PUSH
51894: LD_INT 1
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 0
51903: PUSH
51904: LD_INT 1
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 1
51913: NEG
51914: PUSH
51915: LD_INT 0
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 1
51924: NEG
51925: PUSH
51926: LD_INT 1
51928: NEG
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: LIST
51940: LIST
51941: LIST
51942: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51943: LD_ADDR_VAR 0 61
51947: PUSH
51948: LD_INT 0
51950: PUSH
51951: LD_INT 0
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 0
51960: PUSH
51961: LD_INT 1
51963: NEG
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 1
51971: PUSH
51972: LD_INT 0
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 1
51981: PUSH
51982: LD_INT 1
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 0
51991: PUSH
51992: LD_INT 1
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 1
52001: NEG
52002: PUSH
52003: LD_INT 0
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 1
52012: NEG
52013: PUSH
52014: LD_INT 1
52016: NEG
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52031: LD_ADDR_VAR 0 62
52035: PUSH
52036: LD_INT 0
52038: PUSH
52039: LD_INT 0
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 0
52048: PUSH
52049: LD_INT 1
52051: NEG
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 1
52059: PUSH
52060: LD_INT 0
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: LD_INT 1
52069: PUSH
52070: LD_INT 1
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 0
52079: PUSH
52080: LD_INT 1
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 1
52089: NEG
52090: PUSH
52091: LD_INT 0
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 1
52100: NEG
52101: PUSH
52102: LD_INT 1
52104: NEG
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52119: LD_ADDR_VAR 0 63
52123: PUSH
52124: LD_INT 0
52126: PUSH
52127: LD_INT 0
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 0
52136: PUSH
52137: LD_INT 1
52139: NEG
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 1
52147: PUSH
52148: LD_INT 0
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 1
52157: PUSH
52158: LD_INT 1
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 0
52167: PUSH
52168: LD_INT 1
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 1
52177: NEG
52178: PUSH
52179: LD_INT 0
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 1
52188: NEG
52189: PUSH
52190: LD_INT 1
52192: NEG
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52207: LD_ADDR_VAR 0 64
52211: PUSH
52212: LD_INT 0
52214: PUSH
52215: LD_INT 0
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 0
52224: PUSH
52225: LD_INT 1
52227: NEG
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 1
52235: PUSH
52236: LD_INT 0
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 1
52245: PUSH
52246: LD_INT 1
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 0
52255: PUSH
52256: LD_INT 1
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 1
52265: NEG
52266: PUSH
52267: LD_INT 0
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 1
52276: NEG
52277: PUSH
52278: LD_INT 1
52280: NEG
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: ST_TO_ADDR
// end ; 1 :
52295: GO 58192
52297: LD_INT 1
52299: DOUBLE
52300: EQUAL
52301: IFTRUE 52305
52303: GO 54928
52305: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52306: LD_ADDR_VAR 0 11
52310: PUSH
52311: LD_INT 1
52313: NEG
52314: PUSH
52315: LD_INT 3
52317: NEG
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 0
52325: PUSH
52326: LD_INT 3
52328: NEG
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 1
52336: PUSH
52337: LD_INT 2
52339: NEG
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: LIST
52349: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52350: LD_ADDR_VAR 0 12
52354: PUSH
52355: LD_INT 2
52357: PUSH
52358: LD_INT 1
52360: NEG
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 3
52368: PUSH
52369: LD_INT 0
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 3
52378: PUSH
52379: LD_INT 1
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: LIST
52390: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52391: LD_ADDR_VAR 0 13
52395: PUSH
52396: LD_INT 3
52398: PUSH
52399: LD_INT 2
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: LD_INT 3
52408: PUSH
52409: LD_INT 3
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 2
52418: PUSH
52419: LD_INT 3
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: LIST
52430: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52431: LD_ADDR_VAR 0 14
52435: PUSH
52436: LD_INT 1
52438: PUSH
52439: LD_INT 3
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 0
52448: PUSH
52449: LD_INT 3
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 1
52458: NEG
52459: PUSH
52460: LD_INT 2
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: LIST
52471: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52472: LD_ADDR_VAR 0 15
52476: PUSH
52477: LD_INT 2
52479: NEG
52480: PUSH
52481: LD_INT 1
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 3
52490: NEG
52491: PUSH
52492: LD_INT 0
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 3
52501: NEG
52502: PUSH
52503: LD_INT 1
52505: NEG
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: LIST
52515: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52516: LD_ADDR_VAR 0 16
52520: PUSH
52521: LD_INT 2
52523: NEG
52524: PUSH
52525: LD_INT 3
52527: NEG
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 3
52535: NEG
52536: PUSH
52537: LD_INT 2
52539: NEG
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 3
52547: NEG
52548: PUSH
52549: LD_INT 3
52551: NEG
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: LIST
52561: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52562: LD_ADDR_VAR 0 17
52566: PUSH
52567: LD_INT 1
52569: NEG
52570: PUSH
52571: LD_INT 3
52573: NEG
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 0
52581: PUSH
52582: LD_INT 3
52584: NEG
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 1
52592: PUSH
52593: LD_INT 2
52595: NEG
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: LIST
52605: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52606: LD_ADDR_VAR 0 18
52610: PUSH
52611: LD_INT 2
52613: PUSH
52614: LD_INT 1
52616: NEG
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 3
52624: PUSH
52625: LD_INT 0
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 3
52634: PUSH
52635: LD_INT 1
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: LIST
52646: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52647: LD_ADDR_VAR 0 19
52651: PUSH
52652: LD_INT 3
52654: PUSH
52655: LD_INT 2
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 3
52664: PUSH
52665: LD_INT 3
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 2
52674: PUSH
52675: LD_INT 3
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: LIST
52686: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52687: LD_ADDR_VAR 0 20
52691: PUSH
52692: LD_INT 1
52694: PUSH
52695: LD_INT 3
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 0
52704: PUSH
52705: LD_INT 3
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 1
52714: NEG
52715: PUSH
52716: LD_INT 2
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: LIST
52727: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52728: LD_ADDR_VAR 0 21
52732: PUSH
52733: LD_INT 2
52735: NEG
52736: PUSH
52737: LD_INT 1
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: LD_INT 3
52746: NEG
52747: PUSH
52748: LD_INT 0
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 3
52757: NEG
52758: PUSH
52759: LD_INT 1
52761: NEG
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: LIST
52771: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52772: LD_ADDR_VAR 0 22
52776: PUSH
52777: LD_INT 2
52779: NEG
52780: PUSH
52781: LD_INT 3
52783: NEG
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 3
52791: NEG
52792: PUSH
52793: LD_INT 2
52795: NEG
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 3
52803: NEG
52804: PUSH
52805: LD_INT 3
52807: NEG
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: LIST
52817: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
52818: LD_ADDR_VAR 0 23
52822: PUSH
52823: LD_INT 0
52825: PUSH
52826: LD_INT 3
52828: NEG
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 1
52836: NEG
52837: PUSH
52838: LD_INT 4
52840: NEG
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 1
52848: PUSH
52849: LD_INT 3
52851: NEG
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: LIST
52861: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
52862: LD_ADDR_VAR 0 24
52866: PUSH
52867: LD_INT 3
52869: PUSH
52870: LD_INT 0
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 3
52879: PUSH
52880: LD_INT 1
52882: NEG
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 4
52890: PUSH
52891: LD_INT 1
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: LIST
52902: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
52903: LD_ADDR_VAR 0 25
52907: PUSH
52908: LD_INT 3
52910: PUSH
52911: LD_INT 3
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 4
52920: PUSH
52921: LD_INT 3
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 3
52930: PUSH
52931: LD_INT 4
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: LIST
52942: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
52943: LD_ADDR_VAR 0 26
52947: PUSH
52948: LD_INT 0
52950: PUSH
52951: LD_INT 3
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: LD_INT 1
52960: PUSH
52961: LD_INT 4
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 1
52970: NEG
52971: PUSH
52972: LD_INT 3
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: LIST
52983: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
52984: LD_ADDR_VAR 0 27
52988: PUSH
52989: LD_INT 3
52991: NEG
52992: PUSH
52993: LD_INT 0
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 3
53002: NEG
53003: PUSH
53004: LD_INT 1
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 4
53013: NEG
53014: PUSH
53015: LD_INT 1
53017: NEG
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: LIST
53027: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53028: LD_ADDR_VAR 0 28
53032: PUSH
53033: LD_INT 3
53035: NEG
53036: PUSH
53037: LD_INT 3
53039: NEG
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 3
53047: NEG
53048: PUSH
53049: LD_INT 4
53051: NEG
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 4
53059: NEG
53060: PUSH
53061: LD_INT 3
53063: NEG
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: LIST
53073: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53074: LD_ADDR_VAR 0 29
53078: PUSH
53079: LD_INT 1
53081: NEG
53082: PUSH
53083: LD_INT 3
53085: NEG
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 0
53093: PUSH
53094: LD_INT 3
53096: NEG
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 1
53104: PUSH
53105: LD_INT 2
53107: NEG
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 1
53115: NEG
53116: PUSH
53117: LD_INT 4
53119: NEG
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 0
53127: PUSH
53128: LD_INT 4
53130: NEG
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 1
53138: PUSH
53139: LD_INT 3
53141: NEG
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: LD_INT 1
53149: NEG
53150: PUSH
53151: LD_INT 5
53153: NEG
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 0
53161: PUSH
53162: LD_INT 5
53164: NEG
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 1
53172: PUSH
53173: LD_INT 4
53175: NEG
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: LD_INT 1
53183: NEG
53184: PUSH
53185: LD_INT 6
53187: NEG
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 0
53195: PUSH
53196: LD_INT 6
53198: NEG
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 1
53206: PUSH
53207: LD_INT 5
53209: NEG
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53229: LD_ADDR_VAR 0 30
53233: PUSH
53234: LD_INT 2
53236: PUSH
53237: LD_INT 1
53239: NEG
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 3
53247: PUSH
53248: LD_INT 0
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 3
53257: PUSH
53258: LD_INT 1
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 3
53267: PUSH
53268: LD_INT 1
53270: NEG
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: LD_INT 4
53278: PUSH
53279: LD_INT 0
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: LD_INT 4
53288: PUSH
53289: LD_INT 1
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 4
53298: PUSH
53299: LD_INT 1
53301: NEG
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 5
53309: PUSH
53310: LD_INT 0
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 5
53319: PUSH
53320: LD_INT 1
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 5
53329: PUSH
53330: LD_INT 1
53332: NEG
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 6
53340: PUSH
53341: LD_INT 0
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 6
53350: PUSH
53351: LD_INT 1
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
53372: LD_ADDR_VAR 0 31
53376: PUSH
53377: LD_INT 3
53379: PUSH
53380: LD_INT 2
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 3
53389: PUSH
53390: LD_INT 3
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 2
53399: PUSH
53400: LD_INT 3
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 4
53409: PUSH
53410: LD_INT 3
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 4
53419: PUSH
53420: LD_INT 4
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 3
53429: PUSH
53430: LD_INT 4
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 5
53439: PUSH
53440: LD_INT 4
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 5
53449: PUSH
53450: LD_INT 5
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 4
53459: PUSH
53460: LD_INT 5
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 6
53469: PUSH
53470: LD_INT 5
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: LD_INT 6
53479: PUSH
53480: LD_INT 6
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: LD_INT 5
53489: PUSH
53490: LD_INT 6
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
53511: LD_ADDR_VAR 0 32
53515: PUSH
53516: LD_INT 1
53518: PUSH
53519: LD_INT 3
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 0
53528: PUSH
53529: LD_INT 3
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 1
53538: NEG
53539: PUSH
53540: LD_INT 2
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 1
53549: PUSH
53550: LD_INT 4
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 0
53559: PUSH
53560: LD_INT 4
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 1
53569: NEG
53570: PUSH
53571: LD_INT 3
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 1
53580: PUSH
53581: LD_INT 5
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 0
53590: PUSH
53591: LD_INT 5
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 1
53600: NEG
53601: PUSH
53602: LD_INT 4
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: LD_INT 1
53611: PUSH
53612: LD_INT 6
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 0
53621: PUSH
53622: LD_INT 6
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 1
53631: NEG
53632: PUSH
53633: LD_INT 5
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
53654: LD_ADDR_VAR 0 33
53658: PUSH
53659: LD_INT 2
53661: NEG
53662: PUSH
53663: LD_INT 1
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 3
53672: NEG
53673: PUSH
53674: LD_INT 0
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 3
53683: NEG
53684: PUSH
53685: LD_INT 1
53687: NEG
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 3
53695: NEG
53696: PUSH
53697: LD_INT 1
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 4
53706: NEG
53707: PUSH
53708: LD_INT 0
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 4
53717: NEG
53718: PUSH
53719: LD_INT 1
53721: NEG
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 4
53729: NEG
53730: PUSH
53731: LD_INT 1
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 5
53740: NEG
53741: PUSH
53742: LD_INT 0
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 5
53751: NEG
53752: PUSH
53753: LD_INT 1
53755: NEG
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 5
53763: NEG
53764: PUSH
53765: LD_INT 1
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 6
53774: NEG
53775: PUSH
53776: LD_INT 0
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: LD_INT 6
53785: NEG
53786: PUSH
53787: LD_INT 1
53789: NEG
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
53809: LD_ADDR_VAR 0 34
53813: PUSH
53814: LD_INT 2
53816: NEG
53817: PUSH
53818: LD_INT 3
53820: NEG
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PUSH
53826: LD_INT 3
53828: NEG
53829: PUSH
53830: LD_INT 2
53832: NEG
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 3
53840: NEG
53841: PUSH
53842: LD_INT 3
53844: NEG
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 3
53852: NEG
53853: PUSH
53854: LD_INT 4
53856: NEG
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 4
53864: NEG
53865: PUSH
53866: LD_INT 3
53868: NEG
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 4
53876: NEG
53877: PUSH
53878: LD_INT 4
53880: NEG
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 4
53888: NEG
53889: PUSH
53890: LD_INT 5
53892: NEG
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: LD_INT 5
53900: NEG
53901: PUSH
53902: LD_INT 4
53904: NEG
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 5
53912: NEG
53913: PUSH
53914: LD_INT 5
53916: NEG
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 5
53924: NEG
53925: PUSH
53926: LD_INT 6
53928: NEG
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 6
53936: NEG
53937: PUSH
53938: LD_INT 5
53940: NEG
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 6
53948: NEG
53949: PUSH
53950: LD_INT 6
53952: NEG
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: LIST
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
53972: LD_ADDR_VAR 0 41
53976: PUSH
53977: LD_INT 0
53979: PUSH
53980: LD_INT 2
53982: NEG
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: LD_INT 1
53990: NEG
53991: PUSH
53992: LD_INT 3
53994: NEG
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 1
54002: PUSH
54003: LD_INT 2
54005: NEG
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: LIST
54015: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54016: LD_ADDR_VAR 0 42
54020: PUSH
54021: LD_INT 2
54023: PUSH
54024: LD_INT 0
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 2
54033: PUSH
54034: LD_INT 1
54036: NEG
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 3
54044: PUSH
54045: LD_INT 1
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: LIST
54056: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54057: LD_ADDR_VAR 0 43
54061: PUSH
54062: LD_INT 2
54064: PUSH
54065: LD_INT 2
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 3
54074: PUSH
54075: LD_INT 2
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 2
54084: PUSH
54085: LD_INT 3
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: LIST
54096: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54097: LD_ADDR_VAR 0 44
54101: PUSH
54102: LD_INT 0
54104: PUSH
54105: LD_INT 2
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: LD_INT 1
54114: PUSH
54115: LD_INT 3
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: LD_INT 1
54124: NEG
54125: PUSH
54126: LD_INT 2
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: LIST
54137: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54138: LD_ADDR_VAR 0 45
54142: PUSH
54143: LD_INT 2
54145: NEG
54146: PUSH
54147: LD_INT 0
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 2
54156: NEG
54157: PUSH
54158: LD_INT 1
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 3
54167: NEG
54168: PUSH
54169: LD_INT 1
54171: NEG
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: LIST
54181: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54182: LD_ADDR_VAR 0 46
54186: PUSH
54187: LD_INT 2
54189: NEG
54190: PUSH
54191: LD_INT 2
54193: NEG
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 2
54201: NEG
54202: PUSH
54203: LD_INT 3
54205: NEG
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 3
54213: NEG
54214: PUSH
54215: LD_INT 2
54217: NEG
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: LIST
54227: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
54228: LD_ADDR_VAR 0 47
54232: PUSH
54233: LD_INT 2
54235: NEG
54236: PUSH
54237: LD_INT 3
54239: NEG
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 1
54247: NEG
54248: PUSH
54249: LD_INT 3
54251: NEG
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54261: LD_ADDR_VAR 0 48
54265: PUSH
54266: LD_INT 1
54268: PUSH
54269: LD_INT 2
54271: NEG
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: LD_INT 2
54279: PUSH
54280: LD_INT 1
54282: NEG
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
54292: LD_ADDR_VAR 0 49
54296: PUSH
54297: LD_INT 3
54299: PUSH
54300: LD_INT 1
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: LD_INT 3
54309: PUSH
54310: LD_INT 2
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
54321: LD_ADDR_VAR 0 50
54325: PUSH
54326: LD_INT 2
54328: PUSH
54329: LD_INT 3
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 1
54338: PUSH
54339: LD_INT 3
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54350: LD_ADDR_VAR 0 51
54354: PUSH
54355: LD_INT 1
54357: NEG
54358: PUSH
54359: LD_INT 2
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 2
54368: NEG
54369: PUSH
54370: LD_INT 1
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54381: LD_ADDR_VAR 0 52
54385: PUSH
54386: LD_INT 3
54388: NEG
54389: PUSH
54390: LD_INT 1
54392: NEG
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 3
54400: NEG
54401: PUSH
54402: LD_INT 2
54404: NEG
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54414: LD_ADDR_VAR 0 53
54418: PUSH
54419: LD_INT 1
54421: NEG
54422: PUSH
54423: LD_INT 3
54425: NEG
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 0
54433: PUSH
54434: LD_INT 3
54436: NEG
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 1
54444: PUSH
54445: LD_INT 2
54447: NEG
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: LIST
54457: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54458: LD_ADDR_VAR 0 54
54462: PUSH
54463: LD_INT 2
54465: PUSH
54466: LD_INT 1
54468: NEG
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 3
54476: PUSH
54477: LD_INT 0
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 3
54486: PUSH
54487: LD_INT 1
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: LIST
54498: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54499: LD_ADDR_VAR 0 55
54503: PUSH
54504: LD_INT 3
54506: PUSH
54507: LD_INT 2
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: LD_INT 3
54516: PUSH
54517: LD_INT 3
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 2
54526: PUSH
54527: LD_INT 3
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: LIST
54538: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54539: LD_ADDR_VAR 0 56
54543: PUSH
54544: LD_INT 1
54546: PUSH
54547: LD_INT 3
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 0
54556: PUSH
54557: LD_INT 3
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 1
54566: NEG
54567: PUSH
54568: LD_INT 2
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: LIST
54579: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54580: LD_ADDR_VAR 0 57
54584: PUSH
54585: LD_INT 2
54587: NEG
54588: PUSH
54589: LD_INT 1
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 3
54598: NEG
54599: PUSH
54600: LD_INT 0
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 3
54609: NEG
54610: PUSH
54611: LD_INT 1
54613: NEG
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: LIST
54623: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54624: LD_ADDR_VAR 0 58
54628: PUSH
54629: LD_INT 2
54631: NEG
54632: PUSH
54633: LD_INT 3
54635: NEG
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 3
54643: NEG
54644: PUSH
54645: LD_INT 2
54647: NEG
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 3
54655: NEG
54656: PUSH
54657: LD_INT 3
54659: NEG
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: LIST
54669: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
54670: LD_ADDR_VAR 0 59
54674: PUSH
54675: LD_INT 1
54677: NEG
54678: PUSH
54679: LD_INT 2
54681: NEG
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 0
54689: PUSH
54690: LD_INT 2
54692: NEG
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 1
54700: PUSH
54701: LD_INT 1
54703: NEG
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: LIST
54713: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54714: LD_ADDR_VAR 0 60
54718: PUSH
54719: LD_INT 1
54721: PUSH
54722: LD_INT 1
54724: NEG
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 2
54732: PUSH
54733: LD_INT 0
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 2
54742: PUSH
54743: LD_INT 1
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: LIST
54754: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54755: LD_ADDR_VAR 0 61
54759: PUSH
54760: LD_INT 2
54762: PUSH
54763: LD_INT 1
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 2
54772: PUSH
54773: LD_INT 2
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: LD_INT 1
54782: PUSH
54783: LD_INT 2
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: LIST
54794: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54795: LD_ADDR_VAR 0 62
54799: PUSH
54800: LD_INT 1
54802: PUSH
54803: LD_INT 2
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 0
54812: PUSH
54813: LD_INT 2
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 1
54822: NEG
54823: PUSH
54824: LD_INT 1
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: LIST
54835: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54836: LD_ADDR_VAR 0 63
54840: PUSH
54841: LD_INT 1
54843: NEG
54844: PUSH
54845: LD_INT 1
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 2
54854: NEG
54855: PUSH
54856: LD_INT 0
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 2
54865: NEG
54866: PUSH
54867: LD_INT 1
54869: NEG
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: LIST
54879: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54880: LD_ADDR_VAR 0 64
54884: PUSH
54885: LD_INT 1
54887: NEG
54888: PUSH
54889: LD_INT 2
54891: NEG
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 2
54899: NEG
54900: PUSH
54901: LD_INT 1
54903: NEG
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 2
54911: NEG
54912: PUSH
54913: LD_INT 2
54915: NEG
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: LIST
54925: ST_TO_ADDR
// end ; 2 :
54926: GO 58192
54928: LD_INT 2
54930: DOUBLE
54931: EQUAL
54932: IFTRUE 54936
54934: GO 58191
54936: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
54937: LD_ADDR_VAR 0 29
54941: PUSH
54942: LD_INT 4
54944: PUSH
54945: LD_INT 0
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 4
54954: PUSH
54955: LD_INT 1
54957: NEG
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 5
54965: PUSH
54966: LD_INT 0
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 5
54975: PUSH
54976: LD_INT 1
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 4
54985: PUSH
54986: LD_INT 1
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 3
54995: PUSH
54996: LD_INT 0
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 3
55005: PUSH
55006: LD_INT 1
55008: NEG
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 3
55016: PUSH
55017: LD_INT 2
55019: NEG
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: LD_INT 5
55027: PUSH
55028: LD_INT 2
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 3
55037: PUSH
55038: LD_INT 3
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 3
55047: PUSH
55048: LD_INT 2
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 4
55057: PUSH
55058: LD_INT 3
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 4
55067: PUSH
55068: LD_INT 4
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 3
55077: PUSH
55078: LD_INT 4
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 2
55087: PUSH
55088: LD_INT 3
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: LD_INT 2
55097: PUSH
55098: LD_INT 2
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 4
55107: PUSH
55108: LD_INT 2
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 2
55117: PUSH
55118: LD_INT 4
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 0
55127: PUSH
55128: LD_INT 4
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: LD_INT 0
55137: PUSH
55138: LD_INT 3
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 1
55147: PUSH
55148: LD_INT 4
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 1
55157: PUSH
55158: LD_INT 5
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 0
55167: PUSH
55168: LD_INT 5
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 1
55177: NEG
55178: PUSH
55179: LD_INT 4
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 1
55188: NEG
55189: PUSH
55190: LD_INT 3
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 2
55199: PUSH
55200: LD_INT 5
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 2
55209: NEG
55210: PUSH
55211: LD_INT 3
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 3
55220: NEG
55221: PUSH
55222: LD_INT 0
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 3
55231: NEG
55232: PUSH
55233: LD_INT 1
55235: NEG
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 2
55243: NEG
55244: PUSH
55245: LD_INT 0
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 2
55254: NEG
55255: PUSH
55256: LD_INT 1
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 3
55265: NEG
55266: PUSH
55267: LD_INT 1
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 4
55276: NEG
55277: PUSH
55278: LD_INT 0
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 4
55287: NEG
55288: PUSH
55289: LD_INT 1
55291: NEG
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 4
55299: NEG
55300: PUSH
55301: LD_INT 2
55303: NEG
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 2
55311: NEG
55312: PUSH
55313: LD_INT 2
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 4
55322: NEG
55323: PUSH
55324: LD_INT 4
55326: NEG
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: LD_INT 4
55334: NEG
55335: PUSH
55336: LD_INT 5
55338: NEG
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: LD_INT 3
55346: NEG
55347: PUSH
55348: LD_INT 4
55350: NEG
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 3
55358: NEG
55359: PUSH
55360: LD_INT 3
55362: NEG
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 4
55370: NEG
55371: PUSH
55372: LD_INT 3
55374: NEG
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 5
55382: NEG
55383: PUSH
55384: LD_INT 4
55386: NEG
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 5
55394: NEG
55395: PUSH
55396: LD_INT 5
55398: NEG
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 3
55406: NEG
55407: PUSH
55408: LD_INT 5
55410: NEG
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: LD_INT 5
55418: NEG
55419: PUSH
55420: LD_INT 3
55422: NEG
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
55475: LD_ADDR_VAR 0 30
55479: PUSH
55480: LD_INT 4
55482: PUSH
55483: LD_INT 4
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 4
55492: PUSH
55493: LD_INT 3
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 5
55502: PUSH
55503: LD_INT 4
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 5
55512: PUSH
55513: LD_INT 5
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 4
55522: PUSH
55523: LD_INT 5
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 3
55532: PUSH
55533: LD_INT 4
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 3
55542: PUSH
55543: LD_INT 3
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 5
55552: PUSH
55553: LD_INT 3
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 3
55562: PUSH
55563: LD_INT 5
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 0
55572: PUSH
55573: LD_INT 3
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 0
55582: PUSH
55583: LD_INT 2
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 1
55592: PUSH
55593: LD_INT 3
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 1
55602: PUSH
55603: LD_INT 4
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 0
55612: PUSH
55613: LD_INT 4
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 1
55622: NEG
55623: PUSH
55624: LD_INT 3
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: LD_INT 1
55633: NEG
55634: PUSH
55635: LD_INT 2
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 2
55644: PUSH
55645: LD_INT 4
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 2
55654: NEG
55655: PUSH
55656: LD_INT 2
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 4
55665: NEG
55666: PUSH
55667: LD_INT 0
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 4
55676: NEG
55677: PUSH
55678: LD_INT 1
55680: NEG
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 3
55688: NEG
55689: PUSH
55690: LD_INT 0
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 3
55699: NEG
55700: PUSH
55701: LD_INT 1
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: LD_INT 4
55710: NEG
55711: PUSH
55712: LD_INT 1
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 5
55721: NEG
55722: PUSH
55723: LD_INT 0
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 5
55732: NEG
55733: PUSH
55734: LD_INT 1
55736: NEG
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 5
55744: NEG
55745: PUSH
55746: LD_INT 2
55748: NEG
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 3
55756: NEG
55757: PUSH
55758: LD_INT 2
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 3
55767: NEG
55768: PUSH
55769: LD_INT 3
55771: NEG
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 3
55779: NEG
55780: PUSH
55781: LD_INT 4
55783: NEG
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 2
55791: NEG
55792: PUSH
55793: LD_INT 3
55795: NEG
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 2
55803: NEG
55804: PUSH
55805: LD_INT 2
55807: NEG
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 3
55815: NEG
55816: PUSH
55817: LD_INT 2
55819: NEG
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 4
55827: NEG
55828: PUSH
55829: LD_INT 3
55831: NEG
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 4
55839: NEG
55840: PUSH
55841: LD_INT 4
55843: NEG
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 2
55851: NEG
55852: PUSH
55853: LD_INT 4
55855: NEG
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 4
55863: NEG
55864: PUSH
55865: LD_INT 2
55867: NEG
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 0
55875: PUSH
55876: LD_INT 4
55878: NEG
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 0
55886: PUSH
55887: LD_INT 5
55889: NEG
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 1
55897: PUSH
55898: LD_INT 4
55900: NEG
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 1
55908: PUSH
55909: LD_INT 3
55911: NEG
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 0
55919: PUSH
55920: LD_INT 3
55922: NEG
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 1
55930: NEG
55931: PUSH
55932: LD_INT 4
55934: NEG
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 1
55942: NEG
55943: PUSH
55944: LD_INT 5
55946: NEG
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 2
55954: PUSH
55955: LD_INT 3
55957: NEG
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 2
55965: NEG
55966: PUSH
55967: LD_INT 5
55969: NEG
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56022: LD_ADDR_VAR 0 31
56026: PUSH
56027: LD_INT 0
56029: PUSH
56030: LD_INT 4
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 0
56039: PUSH
56040: LD_INT 3
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 1
56049: PUSH
56050: LD_INT 4
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 1
56059: PUSH
56060: LD_INT 5
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 0
56069: PUSH
56070: LD_INT 5
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 1
56079: NEG
56080: PUSH
56081: LD_INT 4
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 1
56090: NEG
56091: PUSH
56092: LD_INT 3
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 2
56101: PUSH
56102: LD_INT 5
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 2
56111: NEG
56112: PUSH
56113: LD_INT 3
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 3
56122: NEG
56123: PUSH
56124: LD_INT 0
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 3
56133: NEG
56134: PUSH
56135: LD_INT 1
56137: NEG
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 2
56145: NEG
56146: PUSH
56147: LD_INT 0
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 2
56156: NEG
56157: PUSH
56158: LD_INT 1
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 3
56167: NEG
56168: PUSH
56169: LD_INT 1
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 4
56178: NEG
56179: PUSH
56180: LD_INT 0
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 4
56189: NEG
56190: PUSH
56191: LD_INT 1
56193: NEG
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 4
56201: NEG
56202: PUSH
56203: LD_INT 2
56205: NEG
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 2
56213: NEG
56214: PUSH
56215: LD_INT 2
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 4
56224: NEG
56225: PUSH
56226: LD_INT 4
56228: NEG
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 4
56236: NEG
56237: PUSH
56238: LD_INT 5
56240: NEG
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 3
56248: NEG
56249: PUSH
56250: LD_INT 4
56252: NEG
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: LD_INT 3
56260: NEG
56261: PUSH
56262: LD_INT 3
56264: NEG
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 4
56272: NEG
56273: PUSH
56274: LD_INT 3
56276: NEG
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 5
56284: NEG
56285: PUSH
56286: LD_INT 4
56288: NEG
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 5
56296: NEG
56297: PUSH
56298: LD_INT 5
56300: NEG
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: LD_INT 3
56308: NEG
56309: PUSH
56310: LD_INT 5
56312: NEG
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 5
56320: NEG
56321: PUSH
56322: LD_INT 3
56324: NEG
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 0
56332: PUSH
56333: LD_INT 3
56335: NEG
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 0
56343: PUSH
56344: LD_INT 4
56346: NEG
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 1
56354: PUSH
56355: LD_INT 3
56357: NEG
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: LD_INT 1
56365: PUSH
56366: LD_INT 2
56368: NEG
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 0
56376: PUSH
56377: LD_INT 2
56379: NEG
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 1
56387: NEG
56388: PUSH
56389: LD_INT 3
56391: NEG
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 1
56399: NEG
56400: PUSH
56401: LD_INT 4
56403: NEG
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 2
56411: PUSH
56412: LD_INT 2
56414: NEG
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 2
56422: NEG
56423: PUSH
56424: LD_INT 4
56426: NEG
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 4
56434: PUSH
56435: LD_INT 0
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 4
56444: PUSH
56445: LD_INT 1
56447: NEG
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 5
56455: PUSH
56456: LD_INT 0
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 5
56465: PUSH
56466: LD_INT 1
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 4
56475: PUSH
56476: LD_INT 1
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: LD_INT 3
56485: PUSH
56486: LD_INT 0
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 3
56495: PUSH
56496: LD_INT 1
56498: NEG
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 3
56506: PUSH
56507: LD_INT 2
56509: NEG
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 5
56517: PUSH
56518: LD_INT 2
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
56572: LD_ADDR_VAR 0 32
56576: PUSH
56577: LD_INT 4
56579: NEG
56580: PUSH
56581: LD_INT 0
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 4
56590: NEG
56591: PUSH
56592: LD_INT 1
56594: NEG
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 3
56602: NEG
56603: PUSH
56604: LD_INT 0
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 3
56613: NEG
56614: PUSH
56615: LD_INT 1
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 4
56624: NEG
56625: PUSH
56626: LD_INT 1
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: LD_INT 5
56635: NEG
56636: PUSH
56637: LD_INT 0
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: LD_INT 5
56646: NEG
56647: PUSH
56648: LD_INT 1
56650: NEG
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 5
56658: NEG
56659: PUSH
56660: LD_INT 2
56662: NEG
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 3
56670: NEG
56671: PUSH
56672: LD_INT 2
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 3
56681: NEG
56682: PUSH
56683: LD_INT 3
56685: NEG
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 3
56693: NEG
56694: PUSH
56695: LD_INT 4
56697: NEG
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 2
56705: NEG
56706: PUSH
56707: LD_INT 3
56709: NEG
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 2
56717: NEG
56718: PUSH
56719: LD_INT 2
56721: NEG
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: LD_INT 3
56729: NEG
56730: PUSH
56731: LD_INT 2
56733: NEG
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 4
56741: NEG
56742: PUSH
56743: LD_INT 3
56745: NEG
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: LD_INT 4
56753: NEG
56754: PUSH
56755: LD_INT 4
56757: NEG
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 2
56765: NEG
56766: PUSH
56767: LD_INT 4
56769: NEG
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 4
56777: NEG
56778: PUSH
56779: LD_INT 2
56781: NEG
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 0
56789: PUSH
56790: LD_INT 4
56792: NEG
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 0
56800: PUSH
56801: LD_INT 5
56803: NEG
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: LD_INT 1
56811: PUSH
56812: LD_INT 4
56814: NEG
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: LD_INT 1
56822: PUSH
56823: LD_INT 3
56825: NEG
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 0
56833: PUSH
56834: LD_INT 3
56836: NEG
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: LD_INT 1
56844: NEG
56845: PUSH
56846: LD_INT 4
56848: NEG
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 1
56856: NEG
56857: PUSH
56858: LD_INT 5
56860: NEG
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: LD_INT 2
56868: PUSH
56869: LD_INT 3
56871: NEG
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 2
56879: NEG
56880: PUSH
56881: LD_INT 5
56883: NEG
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: LD_INT 3
56891: PUSH
56892: LD_INT 0
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: PUSH
56899: LD_INT 3
56901: PUSH
56902: LD_INT 1
56904: NEG
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 4
56912: PUSH
56913: LD_INT 0
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: LD_INT 4
56922: PUSH
56923: LD_INT 1
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: LD_INT 3
56932: PUSH
56933: LD_INT 1
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: LD_INT 2
56942: PUSH
56943: LD_INT 0
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 2
56952: PUSH
56953: LD_INT 1
56955: NEG
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 2
56963: PUSH
56964: LD_INT 2
56966: NEG
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 4
56974: PUSH
56975: LD_INT 2
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 4
56984: PUSH
56985: LD_INT 4
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 4
56994: PUSH
56995: LD_INT 3
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 5
57004: PUSH
57005: LD_INT 4
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 5
57014: PUSH
57015: LD_INT 5
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 4
57024: PUSH
57025: LD_INT 5
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 3
57034: PUSH
57035: LD_INT 4
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 3
57044: PUSH
57045: LD_INT 3
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 5
57054: PUSH
57055: LD_INT 3
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 3
57064: PUSH
57065: LD_INT 5
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: LIST
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57119: LD_ADDR_VAR 0 33
57123: PUSH
57124: LD_INT 4
57126: NEG
57127: PUSH
57128: LD_INT 4
57130: NEG
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 4
57138: NEG
57139: PUSH
57140: LD_INT 5
57142: NEG
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: LD_INT 3
57150: NEG
57151: PUSH
57152: LD_INT 4
57154: NEG
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 3
57162: NEG
57163: PUSH
57164: LD_INT 3
57166: NEG
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 4
57174: NEG
57175: PUSH
57176: LD_INT 3
57178: NEG
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 5
57186: NEG
57187: PUSH
57188: LD_INT 4
57190: NEG
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 5
57198: NEG
57199: PUSH
57200: LD_INT 5
57202: NEG
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 3
57210: NEG
57211: PUSH
57212: LD_INT 5
57214: NEG
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 5
57222: NEG
57223: PUSH
57224: LD_INT 3
57226: NEG
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 0
57234: PUSH
57235: LD_INT 3
57237: NEG
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 0
57245: PUSH
57246: LD_INT 4
57248: NEG
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: PUSH
57254: LD_INT 1
57256: PUSH
57257: LD_INT 3
57259: NEG
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 1
57267: PUSH
57268: LD_INT 2
57270: NEG
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 0
57278: PUSH
57279: LD_INT 2
57281: NEG
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 1
57289: NEG
57290: PUSH
57291: LD_INT 3
57293: NEG
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 1
57301: NEG
57302: PUSH
57303: LD_INT 4
57305: NEG
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 2
57313: PUSH
57314: LD_INT 2
57316: NEG
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 2
57324: NEG
57325: PUSH
57326: LD_INT 4
57328: NEG
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 4
57336: PUSH
57337: LD_INT 0
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 4
57346: PUSH
57347: LD_INT 1
57349: NEG
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 5
57357: PUSH
57358: LD_INT 0
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 5
57367: PUSH
57368: LD_INT 1
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 4
57377: PUSH
57378: LD_INT 1
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 3
57387: PUSH
57388: LD_INT 0
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: LD_INT 3
57397: PUSH
57398: LD_INT 1
57400: NEG
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 3
57408: PUSH
57409: LD_INT 2
57411: NEG
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 5
57419: PUSH
57420: LD_INT 2
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: LD_INT 3
57429: PUSH
57430: LD_INT 3
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 3
57439: PUSH
57440: LD_INT 2
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 4
57449: PUSH
57450: LD_INT 3
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 4
57459: PUSH
57460: LD_INT 4
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: LD_INT 3
57469: PUSH
57470: LD_INT 4
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 2
57479: PUSH
57480: LD_INT 3
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: LD_INT 2
57489: PUSH
57490: LD_INT 2
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 4
57499: PUSH
57500: LD_INT 2
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_INT 2
57509: PUSH
57510: LD_INT 4
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 0
57519: PUSH
57520: LD_INT 4
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: LD_INT 0
57529: PUSH
57530: LD_INT 3
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 1
57539: PUSH
57540: LD_INT 4
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 1
57549: PUSH
57550: LD_INT 5
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 0
57559: PUSH
57560: LD_INT 5
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 1
57569: NEG
57570: PUSH
57571: LD_INT 4
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 1
57580: NEG
57581: PUSH
57582: LD_INT 3
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 2
57591: PUSH
57592: LD_INT 5
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 2
57601: NEG
57602: PUSH
57603: LD_INT 3
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: LIST
57614: LIST
57615: LIST
57616: LIST
57617: LIST
57618: LIST
57619: LIST
57620: LIST
57621: LIST
57622: LIST
57623: LIST
57624: LIST
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
57657: LD_ADDR_VAR 0 34
57661: PUSH
57662: LD_INT 0
57664: PUSH
57665: LD_INT 4
57667: NEG
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: LD_INT 0
57675: PUSH
57676: LD_INT 5
57678: NEG
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: LD_INT 1
57686: PUSH
57687: LD_INT 4
57689: NEG
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 1
57697: PUSH
57698: LD_INT 3
57700: NEG
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 0
57708: PUSH
57709: LD_INT 3
57711: NEG
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 1
57719: NEG
57720: PUSH
57721: LD_INT 4
57723: NEG
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 1
57731: NEG
57732: PUSH
57733: LD_INT 5
57735: NEG
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 2
57743: PUSH
57744: LD_INT 3
57746: NEG
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 2
57754: NEG
57755: PUSH
57756: LD_INT 5
57758: NEG
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 3
57766: PUSH
57767: LD_INT 0
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 3
57776: PUSH
57777: LD_INT 1
57779: NEG
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 4
57787: PUSH
57788: LD_INT 0
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 4
57797: PUSH
57798: LD_INT 1
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 3
57807: PUSH
57808: LD_INT 1
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 2
57817: PUSH
57818: LD_INT 0
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 2
57827: PUSH
57828: LD_INT 1
57830: NEG
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 2
57838: PUSH
57839: LD_INT 2
57841: NEG
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: LD_INT 4
57849: PUSH
57850: LD_INT 2
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 4
57859: PUSH
57860: LD_INT 4
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 4
57869: PUSH
57870: LD_INT 3
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: LD_INT 5
57879: PUSH
57880: LD_INT 4
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: LD_INT 5
57889: PUSH
57890: LD_INT 5
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 4
57899: PUSH
57900: LD_INT 5
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 3
57909: PUSH
57910: LD_INT 4
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 3
57919: PUSH
57920: LD_INT 3
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 5
57929: PUSH
57930: LD_INT 3
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 3
57939: PUSH
57940: LD_INT 5
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 0
57949: PUSH
57950: LD_INT 3
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 0
57959: PUSH
57960: LD_INT 2
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: PUSH
57967: LD_INT 1
57969: PUSH
57970: LD_INT 3
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 1
57979: PUSH
57980: LD_INT 4
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 0
57989: PUSH
57990: LD_INT 4
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 1
57999: NEG
58000: PUSH
58001: LD_INT 3
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 1
58010: NEG
58011: PUSH
58012: LD_INT 2
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 2
58021: PUSH
58022: LD_INT 4
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: LD_INT 2
58031: NEG
58032: PUSH
58033: LD_INT 2
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 4
58042: NEG
58043: PUSH
58044: LD_INT 0
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: LD_INT 4
58053: NEG
58054: PUSH
58055: LD_INT 1
58057: NEG
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PUSH
58063: LD_INT 3
58065: NEG
58066: PUSH
58067: LD_INT 0
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 3
58076: NEG
58077: PUSH
58078: LD_INT 1
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 4
58087: NEG
58088: PUSH
58089: LD_INT 1
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 5
58098: NEG
58099: PUSH
58100: LD_INT 0
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 5
58109: NEG
58110: PUSH
58111: LD_INT 1
58113: NEG
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: LD_INT 5
58121: NEG
58122: PUSH
58123: LD_INT 2
58125: NEG
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 3
58133: NEG
58134: PUSH
58135: LD_INT 2
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: LIST
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: LIST
58155: LIST
58156: LIST
58157: LIST
58158: LIST
58159: LIST
58160: LIST
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: LIST
58166: LIST
58167: LIST
58168: LIST
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: LIST
58188: ST_TO_ADDR
// end ; end ;
58189: GO 58192
58191: POP
// case btype of b_depot , b_warehouse :
58192: LD_VAR 0 1
58196: PUSH
58197: LD_INT 0
58199: DOUBLE
58200: EQUAL
58201: IFTRUE 58211
58203: LD_INT 1
58205: DOUBLE
58206: EQUAL
58207: IFTRUE 58211
58209: GO 58412
58211: POP
// case nation of nation_american :
58212: LD_VAR 0 5
58216: PUSH
58217: LD_INT 1
58219: DOUBLE
58220: EQUAL
58221: IFTRUE 58225
58223: GO 58281
58225: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
58226: LD_ADDR_VAR 0 9
58230: PUSH
58231: LD_VAR 0 11
58235: PUSH
58236: LD_VAR 0 12
58240: PUSH
58241: LD_VAR 0 13
58245: PUSH
58246: LD_VAR 0 14
58250: PUSH
58251: LD_VAR 0 15
58255: PUSH
58256: LD_VAR 0 16
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: LIST
58265: LIST
58266: LIST
58267: LIST
58268: PUSH
58269: LD_VAR 0 4
58273: PUSH
58274: LD_INT 1
58276: PLUS
58277: ARRAY
58278: ST_TO_ADDR
58279: GO 58410
58281: LD_INT 2
58283: DOUBLE
58284: EQUAL
58285: IFTRUE 58289
58287: GO 58345
58289: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
58290: LD_ADDR_VAR 0 9
58294: PUSH
58295: LD_VAR 0 17
58299: PUSH
58300: LD_VAR 0 18
58304: PUSH
58305: LD_VAR 0 19
58309: PUSH
58310: LD_VAR 0 20
58314: PUSH
58315: LD_VAR 0 21
58319: PUSH
58320: LD_VAR 0 22
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: LIST
58329: LIST
58330: LIST
58331: LIST
58332: PUSH
58333: LD_VAR 0 4
58337: PUSH
58338: LD_INT 1
58340: PLUS
58341: ARRAY
58342: ST_TO_ADDR
58343: GO 58410
58345: LD_INT 3
58347: DOUBLE
58348: EQUAL
58349: IFTRUE 58353
58351: GO 58409
58353: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
58354: LD_ADDR_VAR 0 9
58358: PUSH
58359: LD_VAR 0 23
58363: PUSH
58364: LD_VAR 0 24
58368: PUSH
58369: LD_VAR 0 25
58373: PUSH
58374: LD_VAR 0 26
58378: PUSH
58379: LD_VAR 0 27
58383: PUSH
58384: LD_VAR 0 28
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: LIST
58396: PUSH
58397: LD_VAR 0 4
58401: PUSH
58402: LD_INT 1
58404: PLUS
58405: ARRAY
58406: ST_TO_ADDR
58407: GO 58410
58409: POP
58410: GO 58965
58412: LD_INT 2
58414: DOUBLE
58415: EQUAL
58416: IFTRUE 58426
58418: LD_INT 3
58420: DOUBLE
58421: EQUAL
58422: IFTRUE 58426
58424: GO 58482
58426: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
58427: LD_ADDR_VAR 0 9
58431: PUSH
58432: LD_VAR 0 29
58436: PUSH
58437: LD_VAR 0 30
58441: PUSH
58442: LD_VAR 0 31
58446: PUSH
58447: LD_VAR 0 32
58451: PUSH
58452: LD_VAR 0 33
58456: PUSH
58457: LD_VAR 0 34
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: LIST
58469: PUSH
58470: LD_VAR 0 4
58474: PUSH
58475: LD_INT 1
58477: PLUS
58478: ARRAY
58479: ST_TO_ADDR
58480: GO 58965
58482: LD_INT 16
58484: DOUBLE
58485: EQUAL
58486: IFTRUE 58544
58488: LD_INT 17
58490: DOUBLE
58491: EQUAL
58492: IFTRUE 58544
58494: LD_INT 18
58496: DOUBLE
58497: EQUAL
58498: IFTRUE 58544
58500: LD_INT 19
58502: DOUBLE
58503: EQUAL
58504: IFTRUE 58544
58506: LD_INT 22
58508: DOUBLE
58509: EQUAL
58510: IFTRUE 58544
58512: LD_INT 20
58514: DOUBLE
58515: EQUAL
58516: IFTRUE 58544
58518: LD_INT 21
58520: DOUBLE
58521: EQUAL
58522: IFTRUE 58544
58524: LD_INT 23
58526: DOUBLE
58527: EQUAL
58528: IFTRUE 58544
58530: LD_INT 24
58532: DOUBLE
58533: EQUAL
58534: IFTRUE 58544
58536: LD_INT 25
58538: DOUBLE
58539: EQUAL
58540: IFTRUE 58544
58542: GO 58600
58544: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
58545: LD_ADDR_VAR 0 9
58549: PUSH
58550: LD_VAR 0 35
58554: PUSH
58555: LD_VAR 0 36
58559: PUSH
58560: LD_VAR 0 37
58564: PUSH
58565: LD_VAR 0 38
58569: PUSH
58570: LD_VAR 0 39
58574: PUSH
58575: LD_VAR 0 40
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: PUSH
58588: LD_VAR 0 4
58592: PUSH
58593: LD_INT 1
58595: PLUS
58596: ARRAY
58597: ST_TO_ADDR
58598: GO 58965
58600: LD_INT 6
58602: DOUBLE
58603: EQUAL
58604: IFTRUE 58656
58606: LD_INT 7
58608: DOUBLE
58609: EQUAL
58610: IFTRUE 58656
58612: LD_INT 8
58614: DOUBLE
58615: EQUAL
58616: IFTRUE 58656
58618: LD_INT 13
58620: DOUBLE
58621: EQUAL
58622: IFTRUE 58656
58624: LD_INT 12
58626: DOUBLE
58627: EQUAL
58628: IFTRUE 58656
58630: LD_INT 15
58632: DOUBLE
58633: EQUAL
58634: IFTRUE 58656
58636: LD_INT 11
58638: DOUBLE
58639: EQUAL
58640: IFTRUE 58656
58642: LD_INT 14
58644: DOUBLE
58645: EQUAL
58646: IFTRUE 58656
58648: LD_INT 10
58650: DOUBLE
58651: EQUAL
58652: IFTRUE 58656
58654: GO 58712
58656: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
58657: LD_ADDR_VAR 0 9
58661: PUSH
58662: LD_VAR 0 41
58666: PUSH
58667: LD_VAR 0 42
58671: PUSH
58672: LD_VAR 0 43
58676: PUSH
58677: LD_VAR 0 44
58681: PUSH
58682: LD_VAR 0 45
58686: PUSH
58687: LD_VAR 0 46
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: PUSH
58700: LD_VAR 0 4
58704: PUSH
58705: LD_INT 1
58707: PLUS
58708: ARRAY
58709: ST_TO_ADDR
58710: GO 58965
58712: LD_INT 36
58714: DOUBLE
58715: EQUAL
58716: IFTRUE 58720
58718: GO 58776
58720: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
58721: LD_ADDR_VAR 0 9
58725: PUSH
58726: LD_VAR 0 47
58730: PUSH
58731: LD_VAR 0 48
58735: PUSH
58736: LD_VAR 0 49
58740: PUSH
58741: LD_VAR 0 50
58745: PUSH
58746: LD_VAR 0 51
58750: PUSH
58751: LD_VAR 0 52
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: LIST
58760: LIST
58761: LIST
58762: LIST
58763: PUSH
58764: LD_VAR 0 4
58768: PUSH
58769: LD_INT 1
58771: PLUS
58772: ARRAY
58773: ST_TO_ADDR
58774: GO 58965
58776: LD_INT 4
58778: DOUBLE
58779: EQUAL
58780: IFTRUE 58802
58782: LD_INT 5
58784: DOUBLE
58785: EQUAL
58786: IFTRUE 58802
58788: LD_INT 34
58790: DOUBLE
58791: EQUAL
58792: IFTRUE 58802
58794: LD_INT 37
58796: DOUBLE
58797: EQUAL
58798: IFTRUE 58802
58800: GO 58858
58802: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
58803: LD_ADDR_VAR 0 9
58807: PUSH
58808: LD_VAR 0 53
58812: PUSH
58813: LD_VAR 0 54
58817: PUSH
58818: LD_VAR 0 55
58822: PUSH
58823: LD_VAR 0 56
58827: PUSH
58828: LD_VAR 0 57
58832: PUSH
58833: LD_VAR 0 58
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: PUSH
58846: LD_VAR 0 4
58850: PUSH
58851: LD_INT 1
58853: PLUS
58854: ARRAY
58855: ST_TO_ADDR
58856: GO 58965
58858: LD_INT 31
58860: DOUBLE
58861: EQUAL
58862: IFTRUE 58908
58864: LD_INT 32
58866: DOUBLE
58867: EQUAL
58868: IFTRUE 58908
58870: LD_INT 33
58872: DOUBLE
58873: EQUAL
58874: IFTRUE 58908
58876: LD_INT 27
58878: DOUBLE
58879: EQUAL
58880: IFTRUE 58908
58882: LD_INT 26
58884: DOUBLE
58885: EQUAL
58886: IFTRUE 58908
58888: LD_INT 28
58890: DOUBLE
58891: EQUAL
58892: IFTRUE 58908
58894: LD_INT 29
58896: DOUBLE
58897: EQUAL
58898: IFTRUE 58908
58900: LD_INT 30
58902: DOUBLE
58903: EQUAL
58904: IFTRUE 58908
58906: GO 58964
58908: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
58909: LD_ADDR_VAR 0 9
58913: PUSH
58914: LD_VAR 0 59
58918: PUSH
58919: LD_VAR 0 60
58923: PUSH
58924: LD_VAR 0 61
58928: PUSH
58929: LD_VAR 0 62
58933: PUSH
58934: LD_VAR 0 63
58938: PUSH
58939: LD_VAR 0 64
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: PUSH
58952: LD_VAR 0 4
58956: PUSH
58957: LD_INT 1
58959: PLUS
58960: ARRAY
58961: ST_TO_ADDR
58962: GO 58965
58964: POP
// temp_list2 = [ ] ;
58965: LD_ADDR_VAR 0 10
58969: PUSH
58970: EMPTY
58971: ST_TO_ADDR
// for i in temp_list do
58972: LD_ADDR_VAR 0 8
58976: PUSH
58977: LD_VAR 0 9
58981: PUSH
58982: FOR_IN
58983: IFFALSE 59035
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
58985: LD_ADDR_VAR 0 10
58989: PUSH
58990: LD_VAR 0 10
58994: PUSH
58995: LD_VAR 0 8
58999: PUSH
59000: LD_INT 1
59002: ARRAY
59003: PUSH
59004: LD_VAR 0 2
59008: PLUS
59009: PUSH
59010: LD_VAR 0 8
59014: PUSH
59015: LD_INT 2
59017: ARRAY
59018: PUSH
59019: LD_VAR 0 3
59023: PLUS
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: PUSH
59029: EMPTY
59030: LIST
59031: ADD
59032: ST_TO_ADDR
59033: GO 58982
59035: POP
59036: POP
// result = temp_list2 ;
59037: LD_ADDR_VAR 0 7
59041: PUSH
59042: LD_VAR 0 10
59046: ST_TO_ADDR
// end ;
59047: LD_VAR 0 7
59051: RET
// export function EnemyInRange ( unit , dist ) ; begin
59052: LD_INT 0
59054: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59055: LD_ADDR_VAR 0 3
59059: PUSH
59060: LD_VAR 0 1
59064: PPUSH
59065: CALL_OW 255
59069: PPUSH
59070: LD_VAR 0 1
59074: PPUSH
59075: CALL_OW 250
59079: PPUSH
59080: LD_VAR 0 1
59084: PPUSH
59085: CALL_OW 251
59089: PPUSH
59090: LD_VAR 0 2
59094: PPUSH
59095: CALL 32454 0 4
59099: PUSH
59100: LD_INT 4
59102: ARRAY
59103: ST_TO_ADDR
// end ;
59104: LD_VAR 0 3
59108: RET
// export function PlayerSeeMe ( unit ) ; begin
59109: LD_INT 0
59111: PPUSH
// result := See ( your_side , unit ) ;
59112: LD_ADDR_VAR 0 2
59116: PUSH
59117: LD_OWVAR 2
59121: PPUSH
59122: LD_VAR 0 1
59126: PPUSH
59127: CALL_OW 292
59131: ST_TO_ADDR
// end ;
59132: LD_VAR 0 2
59136: RET
// export function ReverseDir ( unit ) ; begin
59137: LD_INT 0
59139: PPUSH
// if not unit then
59140: LD_VAR 0 1
59144: NOT
59145: IFFALSE 59149
// exit ;
59147: GO 59172
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59149: LD_ADDR_VAR 0 2
59153: PUSH
59154: LD_VAR 0 1
59158: PPUSH
59159: CALL_OW 254
59163: PUSH
59164: LD_INT 3
59166: PLUS
59167: PUSH
59168: LD_INT 6
59170: MOD
59171: ST_TO_ADDR
// end ;
59172: LD_VAR 0 2
59176: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
59177: LD_INT 0
59179: PPUSH
59180: PPUSH
59181: PPUSH
59182: PPUSH
59183: PPUSH
59184: PPUSH
// if not unit or not hexes then
59185: LD_VAR 0 1
59189: NOT
59190: PUSH
59191: LD_VAR 0 2
59195: NOT
59196: OR
59197: IFFALSE 59201
// exit ;
59199: GO 59324
// dist := 9999 ;
59201: LD_ADDR_VAR 0 5
59205: PUSH
59206: LD_INT 9999
59208: ST_TO_ADDR
// for i = 1 to hexes do
59209: LD_ADDR_VAR 0 4
59213: PUSH
59214: DOUBLE
59215: LD_INT 1
59217: DEC
59218: ST_TO_ADDR
59219: LD_VAR 0 2
59223: PUSH
59224: FOR_TO
59225: IFFALSE 59312
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59227: LD_ADDR_VAR 0 6
59231: PUSH
59232: LD_VAR 0 1
59236: PPUSH
59237: LD_VAR 0 2
59241: PUSH
59242: LD_VAR 0 4
59246: ARRAY
59247: PUSH
59248: LD_INT 1
59250: ARRAY
59251: PPUSH
59252: LD_VAR 0 2
59256: PUSH
59257: LD_VAR 0 4
59261: ARRAY
59262: PUSH
59263: LD_INT 2
59265: ARRAY
59266: PPUSH
59267: CALL_OW 297
59271: ST_TO_ADDR
// if tdist < dist then
59272: LD_VAR 0 6
59276: PUSH
59277: LD_VAR 0 5
59281: LESS
59282: IFFALSE 59310
// begin hex := hexes [ i ] ;
59284: LD_ADDR_VAR 0 8
59288: PUSH
59289: LD_VAR 0 2
59293: PUSH
59294: LD_VAR 0 4
59298: ARRAY
59299: ST_TO_ADDR
// dist := tdist ;
59300: LD_ADDR_VAR 0 5
59304: PUSH
59305: LD_VAR 0 6
59309: ST_TO_ADDR
// end ; end ;
59310: GO 59224
59312: POP
59313: POP
// result := hex ;
59314: LD_ADDR_VAR 0 3
59318: PUSH
59319: LD_VAR 0 8
59323: ST_TO_ADDR
// end ;
59324: LD_VAR 0 3
59328: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
59329: LD_INT 0
59331: PPUSH
59332: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
59333: LD_VAR 0 1
59337: NOT
59338: PUSH
59339: LD_VAR 0 1
59343: PUSH
59344: LD_INT 21
59346: PUSH
59347: LD_INT 2
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 23
59356: PUSH
59357: LD_INT 2
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: PPUSH
59368: CALL_OW 69
59372: IN
59373: NOT
59374: OR
59375: IFFALSE 59379
// exit ;
59377: GO 59426
// for i = 1 to 3 do
59379: LD_ADDR_VAR 0 3
59383: PUSH
59384: DOUBLE
59385: LD_INT 1
59387: DEC
59388: ST_TO_ADDR
59389: LD_INT 3
59391: PUSH
59392: FOR_TO
59393: IFFALSE 59424
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
59395: LD_VAR 0 1
59399: PPUSH
59400: CALL_OW 250
59404: PPUSH
59405: LD_VAR 0 1
59409: PPUSH
59410: CALL_OW 251
59414: PPUSH
59415: LD_INT 1
59417: PPUSH
59418: CALL_OW 453
59422: GO 59392
59424: POP
59425: POP
// end ;
59426: LD_VAR 0 2
59430: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
59431: LD_INT 0
59433: PPUSH
59434: PPUSH
59435: PPUSH
59436: PPUSH
59437: PPUSH
59438: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
59439: LD_VAR 0 1
59443: NOT
59444: PUSH
59445: LD_VAR 0 2
59449: NOT
59450: OR
59451: PUSH
59452: LD_VAR 0 1
59456: PPUSH
59457: CALL_OW 314
59461: OR
59462: IFFALSE 59466
// exit ;
59464: GO 59907
// x := GetX ( enemy_unit ) ;
59466: LD_ADDR_VAR 0 7
59470: PUSH
59471: LD_VAR 0 2
59475: PPUSH
59476: CALL_OW 250
59480: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
59481: LD_ADDR_VAR 0 8
59485: PUSH
59486: LD_VAR 0 2
59490: PPUSH
59491: CALL_OW 251
59495: ST_TO_ADDR
// if not x or not y then
59496: LD_VAR 0 7
59500: NOT
59501: PUSH
59502: LD_VAR 0 8
59506: NOT
59507: OR
59508: IFFALSE 59512
// exit ;
59510: GO 59907
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
59512: LD_ADDR_VAR 0 6
59516: PUSH
59517: LD_VAR 0 7
59521: PPUSH
59522: LD_INT 0
59524: PPUSH
59525: LD_INT 4
59527: PPUSH
59528: CALL_OW 272
59532: PUSH
59533: LD_VAR 0 8
59537: PPUSH
59538: LD_INT 0
59540: PPUSH
59541: LD_INT 4
59543: PPUSH
59544: CALL_OW 273
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_VAR 0 7
59557: PPUSH
59558: LD_INT 1
59560: PPUSH
59561: LD_INT 4
59563: PPUSH
59564: CALL_OW 272
59568: PUSH
59569: LD_VAR 0 8
59573: PPUSH
59574: LD_INT 1
59576: PPUSH
59577: LD_INT 4
59579: PPUSH
59580: CALL_OW 273
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PUSH
59589: LD_VAR 0 7
59593: PPUSH
59594: LD_INT 2
59596: PPUSH
59597: LD_INT 4
59599: PPUSH
59600: CALL_OW 272
59604: PUSH
59605: LD_VAR 0 8
59609: PPUSH
59610: LD_INT 2
59612: PPUSH
59613: LD_INT 4
59615: PPUSH
59616: CALL_OW 273
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: LD_VAR 0 7
59629: PPUSH
59630: LD_INT 3
59632: PPUSH
59633: LD_INT 4
59635: PPUSH
59636: CALL_OW 272
59640: PUSH
59641: LD_VAR 0 8
59645: PPUSH
59646: LD_INT 3
59648: PPUSH
59649: LD_INT 4
59651: PPUSH
59652: CALL_OW 273
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_VAR 0 7
59665: PPUSH
59666: LD_INT 4
59668: PPUSH
59669: LD_INT 4
59671: PPUSH
59672: CALL_OW 272
59676: PUSH
59677: LD_VAR 0 8
59681: PPUSH
59682: LD_INT 4
59684: PPUSH
59685: LD_INT 4
59687: PPUSH
59688: CALL_OW 273
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_VAR 0 7
59701: PPUSH
59702: LD_INT 5
59704: PPUSH
59705: LD_INT 4
59707: PPUSH
59708: CALL_OW 272
59712: PUSH
59713: LD_VAR 0 8
59717: PPUSH
59718: LD_INT 5
59720: PPUSH
59721: LD_INT 4
59723: PPUSH
59724: CALL_OW 273
59728: PUSH
59729: EMPTY
59730: LIST
59731: LIST
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: ST_TO_ADDR
// for i = tmp downto 1 do
59741: LD_ADDR_VAR 0 4
59745: PUSH
59746: DOUBLE
59747: LD_VAR 0 6
59751: INC
59752: ST_TO_ADDR
59753: LD_INT 1
59755: PUSH
59756: FOR_DOWNTO
59757: IFFALSE 59858
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
59759: LD_VAR 0 6
59763: PUSH
59764: LD_VAR 0 4
59768: ARRAY
59769: PUSH
59770: LD_INT 1
59772: ARRAY
59773: PPUSH
59774: LD_VAR 0 6
59778: PUSH
59779: LD_VAR 0 4
59783: ARRAY
59784: PUSH
59785: LD_INT 2
59787: ARRAY
59788: PPUSH
59789: CALL_OW 488
59793: NOT
59794: PUSH
59795: LD_VAR 0 6
59799: PUSH
59800: LD_VAR 0 4
59804: ARRAY
59805: PUSH
59806: LD_INT 1
59808: ARRAY
59809: PPUSH
59810: LD_VAR 0 6
59814: PUSH
59815: LD_VAR 0 4
59819: ARRAY
59820: PUSH
59821: LD_INT 2
59823: ARRAY
59824: PPUSH
59825: CALL_OW 428
59829: PUSH
59830: LD_INT 0
59832: NONEQUAL
59833: OR
59834: IFFALSE 59856
// tmp := Delete ( tmp , i ) ;
59836: LD_ADDR_VAR 0 6
59840: PUSH
59841: LD_VAR 0 6
59845: PPUSH
59846: LD_VAR 0 4
59850: PPUSH
59851: CALL_OW 3
59855: ST_TO_ADDR
59856: GO 59756
59858: POP
59859: POP
// j := GetClosestHex ( unit , tmp ) ;
59860: LD_ADDR_VAR 0 5
59864: PUSH
59865: LD_VAR 0 1
59869: PPUSH
59870: LD_VAR 0 6
59874: PPUSH
59875: CALL 59177 0 2
59879: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
59880: LD_VAR 0 1
59884: PPUSH
59885: LD_VAR 0 5
59889: PUSH
59890: LD_INT 1
59892: ARRAY
59893: PPUSH
59894: LD_VAR 0 5
59898: PUSH
59899: LD_INT 2
59901: ARRAY
59902: PPUSH
59903: CALL_OW 111
// end ;
59907: LD_VAR 0 3
59911: RET
// export function PrepareApemanSoldier ( ) ; begin
59912: LD_INT 0
59914: PPUSH
// uc_nation := 0 ;
59915: LD_ADDR_OWVAR 21
59919: PUSH
59920: LD_INT 0
59922: ST_TO_ADDR
// hc_sex := sex_male ;
59923: LD_ADDR_OWVAR 27
59927: PUSH
59928: LD_INT 1
59930: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
59931: LD_ADDR_OWVAR 28
59935: PUSH
59936: LD_INT 15
59938: ST_TO_ADDR
// hc_gallery :=  ;
59939: LD_ADDR_OWVAR 33
59943: PUSH
59944: LD_STRING 
59946: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59947: LD_ADDR_OWVAR 31
59951: PUSH
59952: LD_INT 0
59954: PPUSH
59955: LD_INT 3
59957: PPUSH
59958: CALL_OW 12
59962: PUSH
59963: LD_INT 0
59965: PPUSH
59966: LD_INT 3
59968: PPUSH
59969: CALL_OW 12
59973: PUSH
59974: LD_INT 0
59976: PUSH
59977: LD_INT 0
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: ST_TO_ADDR
// end ;
59986: LD_VAR 0 1
59990: RET
// export function PrepareApemanEngineer ( ) ; begin
59991: LD_INT 0
59993: PPUSH
// uc_nation := 0 ;
59994: LD_ADDR_OWVAR 21
59998: PUSH
59999: LD_INT 0
60001: ST_TO_ADDR
// hc_sex := sex_male ;
60002: LD_ADDR_OWVAR 27
60006: PUSH
60007: LD_INT 1
60009: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
60010: LD_ADDR_OWVAR 28
60014: PUSH
60015: LD_INT 16
60017: ST_TO_ADDR
// hc_gallery :=  ;
60018: LD_ADDR_OWVAR 33
60022: PUSH
60023: LD_STRING 
60025: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60026: LD_ADDR_OWVAR 31
60030: PUSH
60031: LD_INT 0
60033: PPUSH
60034: LD_INT 3
60036: PPUSH
60037: CALL_OW 12
60041: PUSH
60042: LD_INT 0
60044: PPUSH
60045: LD_INT 3
60047: PPUSH
60048: CALL_OW 12
60052: PUSH
60053: LD_INT 0
60055: PUSH
60056: LD_INT 0
60058: PUSH
60059: EMPTY
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: ST_TO_ADDR
// end ;
60065: LD_VAR 0 1
60069: RET
// export function PrepareApeman ( agressivity ) ; begin
60070: LD_INT 0
60072: PPUSH
// uc_side := 0 ;
60073: LD_ADDR_OWVAR 20
60077: PUSH
60078: LD_INT 0
60080: ST_TO_ADDR
// uc_nation := 0 ;
60081: LD_ADDR_OWVAR 21
60085: PUSH
60086: LD_INT 0
60088: ST_TO_ADDR
// hc_sex := sex_male ;
60089: LD_ADDR_OWVAR 27
60093: PUSH
60094: LD_INT 1
60096: ST_TO_ADDR
// hc_class := class_apeman ;
60097: LD_ADDR_OWVAR 28
60101: PUSH
60102: LD_INT 12
60104: ST_TO_ADDR
// hc_gallery :=  ;
60105: LD_ADDR_OWVAR 33
60109: PUSH
60110: LD_STRING 
60112: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60113: LD_ADDR_OWVAR 35
60117: PUSH
60118: LD_VAR 0 1
60122: NEG
60123: PPUSH
60124: LD_VAR 0 1
60128: PPUSH
60129: CALL_OW 12
60133: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60134: LD_ADDR_OWVAR 31
60138: PUSH
60139: LD_INT 0
60141: PPUSH
60142: LD_INT 3
60144: PPUSH
60145: CALL_OW 12
60149: PUSH
60150: LD_INT 0
60152: PPUSH
60153: LD_INT 3
60155: PPUSH
60156: CALL_OW 12
60160: PUSH
60161: LD_INT 0
60163: PUSH
60164: LD_INT 0
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: LIST
60171: LIST
60172: ST_TO_ADDR
// end ;
60173: LD_VAR 0 2
60177: RET
// export function PrepareTiger ( agressivity ) ; begin
60178: LD_INT 0
60180: PPUSH
// uc_side := 0 ;
60181: LD_ADDR_OWVAR 20
60185: PUSH
60186: LD_INT 0
60188: ST_TO_ADDR
// uc_nation := 0 ;
60189: LD_ADDR_OWVAR 21
60193: PUSH
60194: LD_INT 0
60196: ST_TO_ADDR
// hc_class := class_tiger ;
60197: LD_ADDR_OWVAR 28
60201: PUSH
60202: LD_INT 14
60204: ST_TO_ADDR
// hc_gallery :=  ;
60205: LD_ADDR_OWVAR 33
60209: PUSH
60210: LD_STRING 
60212: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60213: LD_ADDR_OWVAR 35
60217: PUSH
60218: LD_VAR 0 1
60222: NEG
60223: PPUSH
60224: LD_VAR 0 1
60228: PPUSH
60229: CALL_OW 12
60233: ST_TO_ADDR
// end ;
60234: LD_VAR 0 2
60238: RET
// export function PrepareEnchidna ( ) ; begin
60239: LD_INT 0
60241: PPUSH
// uc_side := 0 ;
60242: LD_ADDR_OWVAR 20
60246: PUSH
60247: LD_INT 0
60249: ST_TO_ADDR
// uc_nation := 0 ;
60250: LD_ADDR_OWVAR 21
60254: PUSH
60255: LD_INT 0
60257: ST_TO_ADDR
// hc_class := class_baggie ;
60258: LD_ADDR_OWVAR 28
60262: PUSH
60263: LD_INT 13
60265: ST_TO_ADDR
// hc_gallery :=  ;
60266: LD_ADDR_OWVAR 33
60270: PUSH
60271: LD_STRING 
60273: ST_TO_ADDR
// end ;
60274: LD_VAR 0 1
60278: RET
// export function PrepareFrog ( ) ; begin
60279: LD_INT 0
60281: PPUSH
// uc_side := 0 ;
60282: LD_ADDR_OWVAR 20
60286: PUSH
60287: LD_INT 0
60289: ST_TO_ADDR
// uc_nation := 0 ;
60290: LD_ADDR_OWVAR 21
60294: PUSH
60295: LD_INT 0
60297: ST_TO_ADDR
// hc_class := class_frog ;
60298: LD_ADDR_OWVAR 28
60302: PUSH
60303: LD_INT 19
60305: ST_TO_ADDR
// hc_gallery :=  ;
60306: LD_ADDR_OWVAR 33
60310: PUSH
60311: LD_STRING 
60313: ST_TO_ADDR
// end ;
60314: LD_VAR 0 1
60318: RET
// export function PrepareFish ( ) ; begin
60319: LD_INT 0
60321: PPUSH
// uc_side := 0 ;
60322: LD_ADDR_OWVAR 20
60326: PUSH
60327: LD_INT 0
60329: ST_TO_ADDR
// uc_nation := 0 ;
60330: LD_ADDR_OWVAR 21
60334: PUSH
60335: LD_INT 0
60337: ST_TO_ADDR
// hc_class := class_fish ;
60338: LD_ADDR_OWVAR 28
60342: PUSH
60343: LD_INT 20
60345: ST_TO_ADDR
// hc_gallery :=  ;
60346: LD_ADDR_OWVAR 33
60350: PUSH
60351: LD_STRING 
60353: ST_TO_ADDR
// end ;
60354: LD_VAR 0 1
60358: RET
// export function PrepareBird ( ) ; begin
60359: LD_INT 0
60361: PPUSH
// uc_side := 0 ;
60362: LD_ADDR_OWVAR 20
60366: PUSH
60367: LD_INT 0
60369: ST_TO_ADDR
// uc_nation := 0 ;
60370: LD_ADDR_OWVAR 21
60374: PUSH
60375: LD_INT 0
60377: ST_TO_ADDR
// hc_class := class_phororhacos ;
60378: LD_ADDR_OWVAR 28
60382: PUSH
60383: LD_INT 18
60385: ST_TO_ADDR
// hc_gallery :=  ;
60386: LD_ADDR_OWVAR 33
60390: PUSH
60391: LD_STRING 
60393: ST_TO_ADDR
// end ;
60394: LD_VAR 0 1
60398: RET
// export function PrepareHorse ( ) ; begin
60399: LD_INT 0
60401: PPUSH
// uc_side := 0 ;
60402: LD_ADDR_OWVAR 20
60406: PUSH
60407: LD_INT 0
60409: ST_TO_ADDR
// uc_nation := 0 ;
60410: LD_ADDR_OWVAR 21
60414: PUSH
60415: LD_INT 0
60417: ST_TO_ADDR
// hc_class := class_horse ;
60418: LD_ADDR_OWVAR 28
60422: PUSH
60423: LD_INT 21
60425: ST_TO_ADDR
// hc_gallery :=  ;
60426: LD_ADDR_OWVAR 33
60430: PUSH
60431: LD_STRING 
60433: ST_TO_ADDR
// end ;
60434: LD_VAR 0 1
60438: RET
// export function PrepareMastodont ( ) ; begin
60439: LD_INT 0
60441: PPUSH
// uc_side := 0 ;
60442: LD_ADDR_OWVAR 20
60446: PUSH
60447: LD_INT 0
60449: ST_TO_ADDR
// uc_nation := 0 ;
60450: LD_ADDR_OWVAR 21
60454: PUSH
60455: LD_INT 0
60457: ST_TO_ADDR
// vc_chassis := class_mastodont ;
60458: LD_ADDR_OWVAR 37
60462: PUSH
60463: LD_INT 31
60465: ST_TO_ADDR
// vc_control := control_rider ;
60466: LD_ADDR_OWVAR 38
60470: PUSH
60471: LD_INT 4
60473: ST_TO_ADDR
// end ;
60474: LD_VAR 0 1
60478: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
60479: LD_INT 0
60481: PPUSH
60482: PPUSH
60483: PPUSH
// uc_side = 0 ;
60484: LD_ADDR_OWVAR 20
60488: PUSH
60489: LD_INT 0
60491: ST_TO_ADDR
// uc_nation = 0 ;
60492: LD_ADDR_OWVAR 21
60496: PUSH
60497: LD_INT 0
60499: ST_TO_ADDR
// InitHc_All ( ) ;
60500: CALL_OW 584
// InitVc ;
60504: CALL_OW 20
// if mastodonts then
60508: LD_VAR 0 6
60512: IFFALSE 60579
// for i = 1 to mastodonts do
60514: LD_ADDR_VAR 0 11
60518: PUSH
60519: DOUBLE
60520: LD_INT 1
60522: DEC
60523: ST_TO_ADDR
60524: LD_VAR 0 6
60528: PUSH
60529: FOR_TO
60530: IFFALSE 60577
// begin vc_chassis := 31 ;
60532: LD_ADDR_OWVAR 37
60536: PUSH
60537: LD_INT 31
60539: ST_TO_ADDR
// vc_control := control_rider ;
60540: LD_ADDR_OWVAR 38
60544: PUSH
60545: LD_INT 4
60547: ST_TO_ADDR
// animal := CreateVehicle ;
60548: LD_ADDR_VAR 0 12
60552: PUSH
60553: CALL_OW 45
60557: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60558: LD_VAR 0 12
60562: PPUSH
60563: LD_VAR 0 8
60567: PPUSH
60568: LD_INT 0
60570: PPUSH
60571: CALL 62714 0 3
// end ;
60575: GO 60529
60577: POP
60578: POP
// if horses then
60579: LD_VAR 0 5
60583: IFFALSE 60650
// for i = 1 to horses do
60585: LD_ADDR_VAR 0 11
60589: PUSH
60590: DOUBLE
60591: LD_INT 1
60593: DEC
60594: ST_TO_ADDR
60595: LD_VAR 0 5
60599: PUSH
60600: FOR_TO
60601: IFFALSE 60648
// begin hc_class := 21 ;
60603: LD_ADDR_OWVAR 28
60607: PUSH
60608: LD_INT 21
60610: ST_TO_ADDR
// hc_gallery :=  ;
60611: LD_ADDR_OWVAR 33
60615: PUSH
60616: LD_STRING 
60618: ST_TO_ADDR
// animal := CreateHuman ;
60619: LD_ADDR_VAR 0 12
60623: PUSH
60624: CALL_OW 44
60628: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60629: LD_VAR 0 12
60633: PPUSH
60634: LD_VAR 0 8
60638: PPUSH
60639: LD_INT 0
60641: PPUSH
60642: CALL 62714 0 3
// end ;
60646: GO 60600
60648: POP
60649: POP
// if birds then
60650: LD_VAR 0 1
60654: IFFALSE 60721
// for i = 1 to birds do
60656: LD_ADDR_VAR 0 11
60660: PUSH
60661: DOUBLE
60662: LD_INT 1
60664: DEC
60665: ST_TO_ADDR
60666: LD_VAR 0 1
60670: PUSH
60671: FOR_TO
60672: IFFALSE 60719
// begin hc_class = 18 ;
60674: LD_ADDR_OWVAR 28
60678: PUSH
60679: LD_INT 18
60681: ST_TO_ADDR
// hc_gallery =  ;
60682: LD_ADDR_OWVAR 33
60686: PUSH
60687: LD_STRING 
60689: ST_TO_ADDR
// animal := CreateHuman ;
60690: LD_ADDR_VAR 0 12
60694: PUSH
60695: CALL_OW 44
60699: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60700: LD_VAR 0 12
60704: PPUSH
60705: LD_VAR 0 8
60709: PPUSH
60710: LD_INT 0
60712: PPUSH
60713: CALL 62714 0 3
// end ;
60717: GO 60671
60719: POP
60720: POP
// if tigers then
60721: LD_VAR 0 2
60725: IFFALSE 60809
// for i = 1 to tigers do
60727: LD_ADDR_VAR 0 11
60731: PUSH
60732: DOUBLE
60733: LD_INT 1
60735: DEC
60736: ST_TO_ADDR
60737: LD_VAR 0 2
60741: PUSH
60742: FOR_TO
60743: IFFALSE 60807
// begin hc_class = class_tiger ;
60745: LD_ADDR_OWVAR 28
60749: PUSH
60750: LD_INT 14
60752: ST_TO_ADDR
// hc_gallery =  ;
60753: LD_ADDR_OWVAR 33
60757: PUSH
60758: LD_STRING 
60760: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
60761: LD_ADDR_OWVAR 35
60765: PUSH
60766: LD_INT 7
60768: NEG
60769: PPUSH
60770: LD_INT 7
60772: PPUSH
60773: CALL_OW 12
60777: ST_TO_ADDR
// animal := CreateHuman ;
60778: LD_ADDR_VAR 0 12
60782: PUSH
60783: CALL_OW 44
60787: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60788: LD_VAR 0 12
60792: PPUSH
60793: LD_VAR 0 8
60797: PPUSH
60798: LD_INT 0
60800: PPUSH
60801: CALL 62714 0 3
// end ;
60805: GO 60742
60807: POP
60808: POP
// if apemans then
60809: LD_VAR 0 3
60813: IFFALSE 60936
// for i = 1 to apemans do
60815: LD_ADDR_VAR 0 11
60819: PUSH
60820: DOUBLE
60821: LD_INT 1
60823: DEC
60824: ST_TO_ADDR
60825: LD_VAR 0 3
60829: PUSH
60830: FOR_TO
60831: IFFALSE 60934
// begin hc_class = class_apeman ;
60833: LD_ADDR_OWVAR 28
60837: PUSH
60838: LD_INT 12
60840: ST_TO_ADDR
// hc_gallery =  ;
60841: LD_ADDR_OWVAR 33
60845: PUSH
60846: LD_STRING 
60848: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
60849: LD_ADDR_OWVAR 35
60853: PUSH
60854: LD_INT 2
60856: NEG
60857: PPUSH
60858: LD_INT 2
60860: PPUSH
60861: CALL_OW 12
60865: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
60866: LD_ADDR_OWVAR 31
60870: PUSH
60871: LD_INT 1
60873: PPUSH
60874: LD_INT 3
60876: PPUSH
60877: CALL_OW 12
60881: PUSH
60882: LD_INT 1
60884: PPUSH
60885: LD_INT 3
60887: PPUSH
60888: CALL_OW 12
60892: PUSH
60893: LD_INT 0
60895: PUSH
60896: LD_INT 0
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: ST_TO_ADDR
// animal := CreateHuman ;
60905: LD_ADDR_VAR 0 12
60909: PUSH
60910: CALL_OW 44
60914: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60915: LD_VAR 0 12
60919: PPUSH
60920: LD_VAR 0 8
60924: PPUSH
60925: LD_INT 0
60927: PPUSH
60928: CALL 62714 0 3
// end ;
60932: GO 60830
60934: POP
60935: POP
// if enchidnas then
60936: LD_VAR 0 4
60940: IFFALSE 61007
// for i = 1 to enchidnas do
60942: LD_ADDR_VAR 0 11
60946: PUSH
60947: DOUBLE
60948: LD_INT 1
60950: DEC
60951: ST_TO_ADDR
60952: LD_VAR 0 4
60956: PUSH
60957: FOR_TO
60958: IFFALSE 61005
// begin hc_class = 13 ;
60960: LD_ADDR_OWVAR 28
60964: PUSH
60965: LD_INT 13
60967: ST_TO_ADDR
// hc_gallery =  ;
60968: LD_ADDR_OWVAR 33
60972: PUSH
60973: LD_STRING 
60975: ST_TO_ADDR
// animal := CreateHuman ;
60976: LD_ADDR_VAR 0 12
60980: PUSH
60981: CALL_OW 44
60985: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60986: LD_VAR 0 12
60990: PPUSH
60991: LD_VAR 0 8
60995: PPUSH
60996: LD_INT 0
60998: PPUSH
60999: CALL 62714 0 3
// end ;
61003: GO 60957
61005: POP
61006: POP
// if fishes then
61007: LD_VAR 0 7
61011: IFFALSE 61078
// for i = 1 to fishes do
61013: LD_ADDR_VAR 0 11
61017: PUSH
61018: DOUBLE
61019: LD_INT 1
61021: DEC
61022: ST_TO_ADDR
61023: LD_VAR 0 7
61027: PUSH
61028: FOR_TO
61029: IFFALSE 61076
// begin hc_class = 20 ;
61031: LD_ADDR_OWVAR 28
61035: PUSH
61036: LD_INT 20
61038: ST_TO_ADDR
// hc_gallery =  ;
61039: LD_ADDR_OWVAR 33
61043: PUSH
61044: LD_STRING 
61046: ST_TO_ADDR
// animal := CreateHuman ;
61047: LD_ADDR_VAR 0 12
61051: PUSH
61052: CALL_OW 44
61056: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61057: LD_VAR 0 12
61061: PPUSH
61062: LD_VAR 0 9
61066: PPUSH
61067: LD_INT 0
61069: PPUSH
61070: CALL 62714 0 3
// end ;
61074: GO 61028
61076: POP
61077: POP
// end ;
61078: LD_VAR 0 10
61082: RET
// export function WantHeal ( sci , unit ) ; begin
61083: LD_INT 0
61085: PPUSH
// if GetTaskList ( sci ) > 0 then
61086: LD_VAR 0 1
61090: PPUSH
61091: CALL_OW 437
61095: PUSH
61096: LD_INT 0
61098: GREATER
61099: IFFALSE 61169
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61101: LD_VAR 0 1
61105: PPUSH
61106: CALL_OW 437
61110: PUSH
61111: LD_INT 1
61113: ARRAY
61114: PUSH
61115: LD_INT 1
61117: ARRAY
61118: PUSH
61119: LD_STRING l
61121: EQUAL
61122: PUSH
61123: LD_VAR 0 1
61127: PPUSH
61128: CALL_OW 437
61132: PUSH
61133: LD_INT 1
61135: ARRAY
61136: PUSH
61137: LD_INT 4
61139: ARRAY
61140: PUSH
61141: LD_VAR 0 2
61145: EQUAL
61146: AND
61147: IFFALSE 61159
// result := true else
61149: LD_ADDR_VAR 0 3
61153: PUSH
61154: LD_INT 1
61156: ST_TO_ADDR
61157: GO 61167
// result := false ;
61159: LD_ADDR_VAR 0 3
61163: PUSH
61164: LD_INT 0
61166: ST_TO_ADDR
// end else
61167: GO 61177
// result := false ;
61169: LD_ADDR_VAR 0 3
61173: PUSH
61174: LD_INT 0
61176: ST_TO_ADDR
// end ;
61177: LD_VAR 0 3
61181: RET
// export function HealTarget ( sci ) ; begin
61182: LD_INT 0
61184: PPUSH
// if not sci then
61185: LD_VAR 0 1
61189: NOT
61190: IFFALSE 61194
// exit ;
61192: GO 61259
// result := 0 ;
61194: LD_ADDR_VAR 0 2
61198: PUSH
61199: LD_INT 0
61201: ST_TO_ADDR
// if GetTaskList ( sci ) then
61202: LD_VAR 0 1
61206: PPUSH
61207: CALL_OW 437
61211: IFFALSE 61259
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61213: LD_VAR 0 1
61217: PPUSH
61218: CALL_OW 437
61222: PUSH
61223: LD_INT 1
61225: ARRAY
61226: PUSH
61227: LD_INT 1
61229: ARRAY
61230: PUSH
61231: LD_STRING l
61233: EQUAL
61234: IFFALSE 61259
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
61236: LD_ADDR_VAR 0 2
61240: PUSH
61241: LD_VAR 0 1
61245: PPUSH
61246: CALL_OW 437
61250: PUSH
61251: LD_INT 1
61253: ARRAY
61254: PUSH
61255: LD_INT 4
61257: ARRAY
61258: ST_TO_ADDR
// end ;
61259: LD_VAR 0 2
61263: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
61264: LD_INT 0
61266: PPUSH
61267: PPUSH
61268: PPUSH
61269: PPUSH
// if not base_units then
61270: LD_VAR 0 1
61274: NOT
61275: IFFALSE 61279
// exit ;
61277: GO 61366
// result := false ;
61279: LD_ADDR_VAR 0 2
61283: PUSH
61284: LD_INT 0
61286: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
61287: LD_ADDR_VAR 0 5
61291: PUSH
61292: LD_VAR 0 1
61296: PPUSH
61297: LD_INT 21
61299: PUSH
61300: LD_INT 3
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PPUSH
61307: CALL_OW 72
61311: ST_TO_ADDR
// if not tmp then
61312: LD_VAR 0 5
61316: NOT
61317: IFFALSE 61321
// exit ;
61319: GO 61366
// for i in tmp do
61321: LD_ADDR_VAR 0 3
61325: PUSH
61326: LD_VAR 0 5
61330: PUSH
61331: FOR_IN
61332: IFFALSE 61364
// begin result := EnemyInRange ( i , 22 ) ;
61334: LD_ADDR_VAR 0 2
61338: PUSH
61339: LD_VAR 0 3
61343: PPUSH
61344: LD_INT 22
61346: PPUSH
61347: CALL 59052 0 2
61351: ST_TO_ADDR
// if result then
61352: LD_VAR 0 2
61356: IFFALSE 61362
// exit ;
61358: POP
61359: POP
61360: GO 61366
// end ;
61362: GO 61331
61364: POP
61365: POP
// end ;
61366: LD_VAR 0 2
61370: RET
// export function FilterByTag ( units , tag ) ; begin
61371: LD_INT 0
61373: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
61374: LD_ADDR_VAR 0 3
61378: PUSH
61379: LD_VAR 0 1
61383: PPUSH
61384: LD_INT 120
61386: PUSH
61387: LD_VAR 0 2
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PPUSH
61396: CALL_OW 72
61400: ST_TO_ADDR
// end ;
61401: LD_VAR 0 3
61405: RET
// export function IsDriver ( un ) ; begin
61406: LD_INT 0
61408: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
61409: LD_ADDR_VAR 0 2
61413: PUSH
61414: LD_VAR 0 1
61418: PUSH
61419: LD_INT 55
61421: PUSH
61422: EMPTY
61423: LIST
61424: PPUSH
61425: CALL_OW 69
61429: IN
61430: ST_TO_ADDR
// end ;
61431: LD_VAR 0 2
61435: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
61436: LD_INT 0
61438: PPUSH
61439: PPUSH
// list := [ ] ;
61440: LD_ADDR_VAR 0 5
61444: PUSH
61445: EMPTY
61446: ST_TO_ADDR
// case d of 0 :
61447: LD_VAR 0 3
61451: PUSH
61452: LD_INT 0
61454: DOUBLE
61455: EQUAL
61456: IFTRUE 61460
61458: GO 61593
61460: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
61461: LD_ADDR_VAR 0 5
61465: PUSH
61466: LD_VAR 0 1
61470: PUSH
61471: LD_INT 4
61473: MINUS
61474: PUSH
61475: LD_VAR 0 2
61479: PUSH
61480: LD_INT 4
61482: MINUS
61483: PUSH
61484: LD_INT 2
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: LIST
61491: PUSH
61492: LD_VAR 0 1
61496: PUSH
61497: LD_INT 3
61499: MINUS
61500: PUSH
61501: LD_VAR 0 2
61505: PUSH
61506: LD_INT 1
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: LIST
61513: PUSH
61514: LD_VAR 0 1
61518: PUSH
61519: LD_INT 4
61521: PLUS
61522: PUSH
61523: LD_VAR 0 2
61527: PUSH
61528: LD_INT 4
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: LIST
61535: PUSH
61536: LD_VAR 0 1
61540: PUSH
61541: LD_INT 3
61543: PLUS
61544: PUSH
61545: LD_VAR 0 2
61549: PUSH
61550: LD_INT 3
61552: PLUS
61553: PUSH
61554: LD_INT 5
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: LIST
61561: PUSH
61562: LD_VAR 0 1
61566: PUSH
61567: LD_VAR 0 2
61571: PUSH
61572: LD_INT 4
61574: PLUS
61575: PUSH
61576: LD_INT 0
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: LIST
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: LIST
61588: LIST
61589: LIST
61590: ST_TO_ADDR
// end ; 1 :
61591: GO 62291
61593: LD_INT 1
61595: DOUBLE
61596: EQUAL
61597: IFTRUE 61601
61599: GO 61734
61601: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
61602: LD_ADDR_VAR 0 5
61606: PUSH
61607: LD_VAR 0 1
61611: PUSH
61612: LD_VAR 0 2
61616: PUSH
61617: LD_INT 4
61619: MINUS
61620: PUSH
61621: LD_INT 3
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: LIST
61628: PUSH
61629: LD_VAR 0 1
61633: PUSH
61634: LD_INT 3
61636: MINUS
61637: PUSH
61638: LD_VAR 0 2
61642: PUSH
61643: LD_INT 3
61645: MINUS
61646: PUSH
61647: LD_INT 2
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: LIST
61654: PUSH
61655: LD_VAR 0 1
61659: PUSH
61660: LD_INT 4
61662: MINUS
61663: PUSH
61664: LD_VAR 0 2
61668: PUSH
61669: LD_INT 1
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: LIST
61676: PUSH
61677: LD_VAR 0 1
61681: PUSH
61682: LD_VAR 0 2
61686: PUSH
61687: LD_INT 3
61689: PLUS
61690: PUSH
61691: LD_INT 0
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: LIST
61698: PUSH
61699: LD_VAR 0 1
61703: PUSH
61704: LD_INT 4
61706: PLUS
61707: PUSH
61708: LD_VAR 0 2
61712: PUSH
61713: LD_INT 4
61715: PLUS
61716: PUSH
61717: LD_INT 5
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: LIST
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: LIST
61729: LIST
61730: LIST
61731: ST_TO_ADDR
// end ; 2 :
61732: GO 62291
61734: LD_INT 2
61736: DOUBLE
61737: EQUAL
61738: IFTRUE 61742
61740: GO 61871
61742: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
61743: LD_ADDR_VAR 0 5
61747: PUSH
61748: LD_VAR 0 1
61752: PUSH
61753: LD_VAR 0 2
61757: PUSH
61758: LD_INT 3
61760: MINUS
61761: PUSH
61762: LD_INT 3
61764: PUSH
61765: EMPTY
61766: LIST
61767: LIST
61768: LIST
61769: PUSH
61770: LD_VAR 0 1
61774: PUSH
61775: LD_INT 4
61777: PLUS
61778: PUSH
61779: LD_VAR 0 2
61783: PUSH
61784: LD_INT 4
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: LIST
61791: PUSH
61792: LD_VAR 0 1
61796: PUSH
61797: LD_VAR 0 2
61801: PUSH
61802: LD_INT 4
61804: PLUS
61805: PUSH
61806: LD_INT 0
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: LIST
61813: PUSH
61814: LD_VAR 0 1
61818: PUSH
61819: LD_INT 3
61821: MINUS
61822: PUSH
61823: LD_VAR 0 2
61827: PUSH
61828: LD_INT 1
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: LIST
61835: PUSH
61836: LD_VAR 0 1
61840: PUSH
61841: LD_INT 4
61843: MINUS
61844: PUSH
61845: LD_VAR 0 2
61849: PUSH
61850: LD_INT 4
61852: MINUS
61853: PUSH
61854: LD_INT 2
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: LIST
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: ST_TO_ADDR
// end ; 3 :
61869: GO 62291
61871: LD_INT 3
61873: DOUBLE
61874: EQUAL
61875: IFTRUE 61879
61877: GO 62012
61879: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
61880: LD_ADDR_VAR 0 5
61884: PUSH
61885: LD_VAR 0 1
61889: PUSH
61890: LD_INT 3
61892: PLUS
61893: PUSH
61894: LD_VAR 0 2
61898: PUSH
61899: LD_INT 4
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: LIST
61906: PUSH
61907: LD_VAR 0 1
61911: PUSH
61912: LD_INT 4
61914: PLUS
61915: PUSH
61916: LD_VAR 0 2
61920: PUSH
61921: LD_INT 4
61923: PLUS
61924: PUSH
61925: LD_INT 5
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: LIST
61932: PUSH
61933: LD_VAR 0 1
61937: PUSH
61938: LD_INT 4
61940: MINUS
61941: PUSH
61942: LD_VAR 0 2
61946: PUSH
61947: LD_INT 1
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: LIST
61954: PUSH
61955: LD_VAR 0 1
61959: PUSH
61960: LD_VAR 0 2
61964: PUSH
61965: LD_INT 4
61967: MINUS
61968: PUSH
61969: LD_INT 3
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: LIST
61976: PUSH
61977: LD_VAR 0 1
61981: PUSH
61982: LD_INT 3
61984: MINUS
61985: PUSH
61986: LD_VAR 0 2
61990: PUSH
61991: LD_INT 3
61993: MINUS
61994: PUSH
61995: LD_INT 2
61997: PUSH
61998: EMPTY
61999: LIST
62000: LIST
62001: LIST
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: ST_TO_ADDR
// end ; 4 :
62010: GO 62291
62012: LD_INT 4
62014: DOUBLE
62015: EQUAL
62016: IFTRUE 62020
62018: GO 62153
62020: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62021: LD_ADDR_VAR 0 5
62025: PUSH
62026: LD_VAR 0 1
62030: PUSH
62031: LD_VAR 0 2
62035: PUSH
62036: LD_INT 4
62038: PLUS
62039: PUSH
62040: LD_INT 0
62042: PUSH
62043: EMPTY
62044: LIST
62045: LIST
62046: LIST
62047: PUSH
62048: LD_VAR 0 1
62052: PUSH
62053: LD_INT 3
62055: PLUS
62056: PUSH
62057: LD_VAR 0 2
62061: PUSH
62062: LD_INT 3
62064: PLUS
62065: PUSH
62066: LD_INT 5
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: LIST
62073: PUSH
62074: LD_VAR 0 1
62078: PUSH
62079: LD_INT 4
62081: PLUS
62082: PUSH
62083: LD_VAR 0 2
62087: PUSH
62088: LD_INT 4
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: LIST
62095: PUSH
62096: LD_VAR 0 1
62100: PUSH
62101: LD_VAR 0 2
62105: PUSH
62106: LD_INT 3
62108: MINUS
62109: PUSH
62110: LD_INT 3
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: LIST
62117: PUSH
62118: LD_VAR 0 1
62122: PUSH
62123: LD_INT 4
62125: MINUS
62126: PUSH
62127: LD_VAR 0 2
62131: PUSH
62132: LD_INT 4
62134: MINUS
62135: PUSH
62136: LD_INT 2
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: LIST
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: LIST
62148: LIST
62149: LIST
62150: ST_TO_ADDR
// end ; 5 :
62151: GO 62291
62153: LD_INT 5
62155: DOUBLE
62156: EQUAL
62157: IFTRUE 62161
62159: GO 62290
62161: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62162: LD_ADDR_VAR 0 5
62166: PUSH
62167: LD_VAR 0 1
62171: PUSH
62172: LD_INT 4
62174: MINUS
62175: PUSH
62176: LD_VAR 0 2
62180: PUSH
62181: LD_INT 1
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: LIST
62188: PUSH
62189: LD_VAR 0 1
62193: PUSH
62194: LD_VAR 0 2
62198: PUSH
62199: LD_INT 4
62201: MINUS
62202: PUSH
62203: LD_INT 3
62205: PUSH
62206: EMPTY
62207: LIST
62208: LIST
62209: LIST
62210: PUSH
62211: LD_VAR 0 1
62215: PUSH
62216: LD_INT 4
62218: PLUS
62219: PUSH
62220: LD_VAR 0 2
62224: PUSH
62225: LD_INT 4
62227: PLUS
62228: PUSH
62229: LD_INT 5
62231: PUSH
62232: EMPTY
62233: LIST
62234: LIST
62235: LIST
62236: PUSH
62237: LD_VAR 0 1
62241: PUSH
62242: LD_INT 3
62244: PLUS
62245: PUSH
62246: LD_VAR 0 2
62250: PUSH
62251: LD_INT 4
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: LIST
62258: PUSH
62259: LD_VAR 0 1
62263: PUSH
62264: LD_VAR 0 2
62268: PUSH
62269: LD_INT 3
62271: PLUS
62272: PUSH
62273: LD_INT 0
62275: PUSH
62276: EMPTY
62277: LIST
62278: LIST
62279: LIST
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: LIST
62285: LIST
62286: LIST
62287: ST_TO_ADDR
// end ; end ;
62288: GO 62291
62290: POP
// result := list ;
62291: LD_ADDR_VAR 0 4
62295: PUSH
62296: LD_VAR 0 5
62300: ST_TO_ADDR
// end ;
62301: LD_VAR 0 4
62305: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
62306: LD_INT 0
62308: PPUSH
62309: PPUSH
62310: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
62311: LD_VAR 0 1
62315: NOT
62316: PUSH
62317: LD_VAR 0 2
62321: PUSH
62322: LD_INT 1
62324: PUSH
62325: LD_INT 2
62327: PUSH
62328: LD_INT 3
62330: PUSH
62331: LD_INT 4
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: LIST
62338: LIST
62339: IN
62340: NOT
62341: OR
62342: IFFALSE 62346
// exit ;
62344: GO 62438
// tmp := [ ] ;
62346: LD_ADDR_VAR 0 5
62350: PUSH
62351: EMPTY
62352: ST_TO_ADDR
// for i in units do
62353: LD_ADDR_VAR 0 4
62357: PUSH
62358: LD_VAR 0 1
62362: PUSH
62363: FOR_IN
62364: IFFALSE 62407
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
62366: LD_ADDR_VAR 0 5
62370: PUSH
62371: LD_VAR 0 5
62375: PPUSH
62376: LD_VAR 0 5
62380: PUSH
62381: LD_INT 1
62383: PLUS
62384: PPUSH
62385: LD_VAR 0 4
62389: PPUSH
62390: LD_VAR 0 2
62394: PPUSH
62395: CALL_OW 259
62399: PPUSH
62400: CALL_OW 2
62404: ST_TO_ADDR
62405: GO 62363
62407: POP
62408: POP
// if not tmp then
62409: LD_VAR 0 5
62413: NOT
62414: IFFALSE 62418
// exit ;
62416: GO 62438
// result := SortListByListDesc ( units , tmp ) ;
62418: LD_ADDR_VAR 0 3
62422: PUSH
62423: LD_VAR 0 1
62427: PPUSH
62428: LD_VAR 0 5
62432: PPUSH
62433: CALL_OW 77
62437: ST_TO_ADDR
// end ;
62438: LD_VAR 0 3
62442: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
62443: LD_INT 0
62445: PPUSH
62446: PPUSH
62447: PPUSH
// result := false ;
62448: LD_ADDR_VAR 0 3
62452: PUSH
62453: LD_INT 0
62455: ST_TO_ADDR
// x := GetX ( building ) ;
62456: LD_ADDR_VAR 0 4
62460: PUSH
62461: LD_VAR 0 2
62465: PPUSH
62466: CALL_OW 250
62470: ST_TO_ADDR
// y := GetY ( building ) ;
62471: LD_ADDR_VAR 0 5
62475: PUSH
62476: LD_VAR 0 2
62480: PPUSH
62481: CALL_OW 251
62485: ST_TO_ADDR
// if not building or not x or not y then
62486: LD_VAR 0 2
62490: NOT
62491: PUSH
62492: LD_VAR 0 4
62496: NOT
62497: OR
62498: PUSH
62499: LD_VAR 0 5
62503: NOT
62504: OR
62505: IFFALSE 62509
// exit ;
62507: GO 62601
// if GetTaskList ( unit ) then
62509: LD_VAR 0 1
62513: PPUSH
62514: CALL_OW 437
62518: IFFALSE 62601
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62520: LD_STRING e
62522: PUSH
62523: LD_VAR 0 1
62527: PPUSH
62528: CALL_OW 437
62532: PUSH
62533: LD_INT 1
62535: ARRAY
62536: PUSH
62537: LD_INT 1
62539: ARRAY
62540: EQUAL
62541: PUSH
62542: LD_VAR 0 4
62546: PUSH
62547: LD_VAR 0 1
62551: PPUSH
62552: CALL_OW 437
62556: PUSH
62557: LD_INT 1
62559: ARRAY
62560: PUSH
62561: LD_INT 2
62563: ARRAY
62564: EQUAL
62565: AND
62566: PUSH
62567: LD_VAR 0 5
62571: PUSH
62572: LD_VAR 0 1
62576: PPUSH
62577: CALL_OW 437
62581: PUSH
62582: LD_INT 1
62584: ARRAY
62585: PUSH
62586: LD_INT 3
62588: ARRAY
62589: EQUAL
62590: AND
62591: IFFALSE 62601
// result := true end ;
62593: LD_ADDR_VAR 0 3
62597: PUSH
62598: LD_INT 1
62600: ST_TO_ADDR
// end ;
62601: LD_VAR 0 3
62605: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
62606: LD_INT 0
62608: PPUSH
// result := false ;
62609: LD_ADDR_VAR 0 4
62613: PUSH
62614: LD_INT 0
62616: ST_TO_ADDR
// if GetTaskList ( unit ) then
62617: LD_VAR 0 1
62621: PPUSH
62622: CALL_OW 437
62626: IFFALSE 62709
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62628: LD_STRING M
62630: PUSH
62631: LD_VAR 0 1
62635: PPUSH
62636: CALL_OW 437
62640: PUSH
62641: LD_INT 1
62643: ARRAY
62644: PUSH
62645: LD_INT 1
62647: ARRAY
62648: EQUAL
62649: PUSH
62650: LD_VAR 0 2
62654: PUSH
62655: LD_VAR 0 1
62659: PPUSH
62660: CALL_OW 437
62664: PUSH
62665: LD_INT 1
62667: ARRAY
62668: PUSH
62669: LD_INT 2
62671: ARRAY
62672: EQUAL
62673: AND
62674: PUSH
62675: LD_VAR 0 3
62679: PUSH
62680: LD_VAR 0 1
62684: PPUSH
62685: CALL_OW 437
62689: PUSH
62690: LD_INT 1
62692: ARRAY
62693: PUSH
62694: LD_INT 3
62696: ARRAY
62697: EQUAL
62698: AND
62699: IFFALSE 62709
// result := true ;
62701: LD_ADDR_VAR 0 4
62705: PUSH
62706: LD_INT 1
62708: ST_TO_ADDR
// end ; end ;
62709: LD_VAR 0 4
62713: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
62714: LD_INT 0
62716: PPUSH
62717: PPUSH
62718: PPUSH
62719: PPUSH
// if not unit or not area then
62720: LD_VAR 0 1
62724: NOT
62725: PUSH
62726: LD_VAR 0 2
62730: NOT
62731: OR
62732: IFFALSE 62736
// exit ;
62734: GO 62900
// tmp := AreaToList ( area , i ) ;
62736: LD_ADDR_VAR 0 6
62740: PUSH
62741: LD_VAR 0 2
62745: PPUSH
62746: LD_VAR 0 5
62750: PPUSH
62751: CALL_OW 517
62755: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
62756: LD_ADDR_VAR 0 5
62760: PUSH
62761: DOUBLE
62762: LD_INT 1
62764: DEC
62765: ST_TO_ADDR
62766: LD_VAR 0 6
62770: PUSH
62771: LD_INT 1
62773: ARRAY
62774: PUSH
62775: FOR_TO
62776: IFFALSE 62898
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
62778: LD_ADDR_VAR 0 7
62782: PUSH
62783: LD_VAR 0 6
62787: PUSH
62788: LD_INT 1
62790: ARRAY
62791: PUSH
62792: LD_VAR 0 5
62796: ARRAY
62797: PUSH
62798: LD_VAR 0 6
62802: PUSH
62803: LD_INT 2
62805: ARRAY
62806: PUSH
62807: LD_VAR 0 5
62811: ARRAY
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
62817: LD_VAR 0 7
62821: PUSH
62822: LD_INT 1
62824: ARRAY
62825: PPUSH
62826: LD_VAR 0 7
62830: PUSH
62831: LD_INT 2
62833: ARRAY
62834: PPUSH
62835: CALL_OW 428
62839: PUSH
62840: LD_INT 0
62842: EQUAL
62843: IFFALSE 62896
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
62845: LD_VAR 0 1
62849: PPUSH
62850: LD_VAR 0 7
62854: PUSH
62855: LD_INT 1
62857: ARRAY
62858: PPUSH
62859: LD_VAR 0 7
62863: PUSH
62864: LD_INT 2
62866: ARRAY
62867: PPUSH
62868: LD_VAR 0 3
62872: PPUSH
62873: CALL_OW 48
// result := IsPlaced ( unit ) ;
62877: LD_ADDR_VAR 0 4
62881: PUSH
62882: LD_VAR 0 1
62886: PPUSH
62887: CALL_OW 305
62891: ST_TO_ADDR
// exit ;
62892: POP
62893: POP
62894: GO 62900
// end ; end ;
62896: GO 62775
62898: POP
62899: POP
// end ;
62900: LD_VAR 0 4
62904: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
62905: LD_INT 0
62907: PPUSH
62908: PPUSH
62909: PPUSH
// if not side or side > 8 then
62910: LD_VAR 0 1
62914: NOT
62915: PUSH
62916: LD_VAR 0 1
62920: PUSH
62921: LD_INT 8
62923: GREATER
62924: OR
62925: IFFALSE 62929
// exit ;
62927: GO 63116
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
62929: LD_ADDR_VAR 0 4
62933: PUSH
62934: LD_INT 22
62936: PUSH
62937: LD_VAR 0 1
62941: PUSH
62942: EMPTY
62943: LIST
62944: LIST
62945: PUSH
62946: LD_INT 21
62948: PUSH
62949: LD_INT 3
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: PUSH
62956: EMPTY
62957: LIST
62958: LIST
62959: PPUSH
62960: CALL_OW 69
62964: ST_TO_ADDR
// if not tmp then
62965: LD_VAR 0 4
62969: NOT
62970: IFFALSE 62974
// exit ;
62972: GO 63116
// enable_addtolog := true ;
62974: LD_ADDR_OWVAR 81
62978: PUSH
62979: LD_INT 1
62981: ST_TO_ADDR
// AddToLog ( [ ) ;
62982: LD_STRING [
62984: PPUSH
62985: CALL_OW 561
// for i in tmp do
62989: LD_ADDR_VAR 0 3
62993: PUSH
62994: LD_VAR 0 4
62998: PUSH
62999: FOR_IN
63000: IFFALSE 63107
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63002: LD_STRING [
63004: PUSH
63005: LD_VAR 0 3
63009: PPUSH
63010: CALL_OW 266
63014: STR
63015: PUSH
63016: LD_STRING , 
63018: STR
63019: PUSH
63020: LD_VAR 0 3
63024: PPUSH
63025: CALL_OW 250
63029: STR
63030: PUSH
63031: LD_STRING , 
63033: STR
63034: PUSH
63035: LD_VAR 0 3
63039: PPUSH
63040: CALL_OW 251
63044: STR
63045: PUSH
63046: LD_STRING , 
63048: STR
63049: PUSH
63050: LD_VAR 0 3
63054: PPUSH
63055: CALL_OW 254
63059: STR
63060: PUSH
63061: LD_STRING , 
63063: STR
63064: PUSH
63065: LD_VAR 0 3
63069: PPUSH
63070: LD_INT 1
63072: PPUSH
63073: CALL_OW 268
63077: STR
63078: PUSH
63079: LD_STRING , 
63081: STR
63082: PUSH
63083: LD_VAR 0 3
63087: PPUSH
63088: LD_INT 2
63090: PPUSH
63091: CALL_OW 268
63095: STR
63096: PUSH
63097: LD_STRING ],
63099: STR
63100: PPUSH
63101: CALL_OW 561
// end ;
63105: GO 62999
63107: POP
63108: POP
// AddToLog ( ]; ) ;
63109: LD_STRING ];
63111: PPUSH
63112: CALL_OW 561
// end ;
63116: LD_VAR 0 2
63120: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63121: LD_INT 0
63123: PPUSH
63124: PPUSH
63125: PPUSH
63126: PPUSH
63127: PPUSH
// if not area or not rate or not max then
63128: LD_VAR 0 1
63132: NOT
63133: PUSH
63134: LD_VAR 0 2
63138: NOT
63139: OR
63140: PUSH
63141: LD_VAR 0 4
63145: NOT
63146: OR
63147: IFFALSE 63151
// exit ;
63149: GO 63340
// while 1 do
63151: LD_INT 1
63153: IFFALSE 63340
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63155: LD_ADDR_VAR 0 9
63159: PUSH
63160: LD_VAR 0 1
63164: PPUSH
63165: LD_INT 1
63167: PPUSH
63168: CALL_OW 287
63172: PUSH
63173: LD_INT 10
63175: MUL
63176: ST_TO_ADDR
// r := rate / 10 ;
63177: LD_ADDR_VAR 0 7
63181: PUSH
63182: LD_VAR 0 2
63186: PUSH
63187: LD_INT 10
63189: DIVREAL
63190: ST_TO_ADDR
// time := 1 1$00 ;
63191: LD_ADDR_VAR 0 8
63195: PUSH
63196: LD_INT 2100
63198: ST_TO_ADDR
// if amount < min then
63199: LD_VAR 0 9
63203: PUSH
63204: LD_VAR 0 3
63208: LESS
63209: IFFALSE 63227
// r := r * 2 else
63211: LD_ADDR_VAR 0 7
63215: PUSH
63216: LD_VAR 0 7
63220: PUSH
63221: LD_INT 2
63223: MUL
63224: ST_TO_ADDR
63225: GO 63253
// if amount > max then
63227: LD_VAR 0 9
63231: PUSH
63232: LD_VAR 0 4
63236: GREATER
63237: IFFALSE 63253
// r := r / 2 ;
63239: LD_ADDR_VAR 0 7
63243: PUSH
63244: LD_VAR 0 7
63248: PUSH
63249: LD_INT 2
63251: DIVREAL
63252: ST_TO_ADDR
// time := time / r ;
63253: LD_ADDR_VAR 0 8
63257: PUSH
63258: LD_VAR 0 8
63262: PUSH
63263: LD_VAR 0 7
63267: DIVREAL
63268: ST_TO_ADDR
// if time < 0 then
63269: LD_VAR 0 8
63273: PUSH
63274: LD_INT 0
63276: LESS
63277: IFFALSE 63294
// time := time * - 1 ;
63279: LD_ADDR_VAR 0 8
63283: PUSH
63284: LD_VAR 0 8
63288: PUSH
63289: LD_INT 1
63291: NEG
63292: MUL
63293: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
63294: LD_VAR 0 8
63298: PUSH
63299: LD_INT 35
63301: PPUSH
63302: LD_INT 875
63304: PPUSH
63305: CALL_OW 12
63309: PLUS
63310: PPUSH
63311: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
63315: LD_INT 1
63317: PPUSH
63318: LD_INT 5
63320: PPUSH
63321: CALL_OW 12
63325: PPUSH
63326: LD_VAR 0 1
63330: PPUSH
63331: LD_INT 1
63333: PPUSH
63334: CALL_OW 55
// end ;
63338: GO 63151
// end ;
63340: LD_VAR 0 5
63344: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
63345: LD_INT 0
63347: PPUSH
63348: PPUSH
63349: PPUSH
63350: PPUSH
63351: PPUSH
63352: PPUSH
63353: PPUSH
63354: PPUSH
// if not turrets or not factories then
63355: LD_VAR 0 1
63359: NOT
63360: PUSH
63361: LD_VAR 0 2
63365: NOT
63366: OR
63367: IFFALSE 63371
// exit ;
63369: GO 63678
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
63371: LD_ADDR_VAR 0 10
63375: PUSH
63376: LD_INT 5
63378: PUSH
63379: LD_INT 6
63381: PUSH
63382: EMPTY
63383: LIST
63384: LIST
63385: PUSH
63386: LD_INT 2
63388: PUSH
63389: LD_INT 4
63391: PUSH
63392: EMPTY
63393: LIST
63394: LIST
63395: PUSH
63396: LD_INT 3
63398: PUSH
63399: LD_INT 5
63401: PUSH
63402: EMPTY
63403: LIST
63404: LIST
63405: PUSH
63406: EMPTY
63407: LIST
63408: LIST
63409: LIST
63410: PUSH
63411: LD_INT 24
63413: PUSH
63414: LD_INT 25
63416: PUSH
63417: EMPTY
63418: LIST
63419: LIST
63420: PUSH
63421: LD_INT 23
63423: PUSH
63424: LD_INT 27
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: PUSH
63431: EMPTY
63432: LIST
63433: LIST
63434: PUSH
63435: LD_INT 42
63437: PUSH
63438: LD_INT 43
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: PUSH
63445: LD_INT 44
63447: PUSH
63448: LD_INT 46
63450: PUSH
63451: EMPTY
63452: LIST
63453: LIST
63454: PUSH
63455: LD_INT 45
63457: PUSH
63458: LD_INT 47
63460: PUSH
63461: EMPTY
63462: LIST
63463: LIST
63464: PUSH
63465: EMPTY
63466: LIST
63467: LIST
63468: LIST
63469: PUSH
63470: EMPTY
63471: LIST
63472: LIST
63473: LIST
63474: ST_TO_ADDR
// result := [ ] ;
63475: LD_ADDR_VAR 0 3
63479: PUSH
63480: EMPTY
63481: ST_TO_ADDR
// for i in turrets do
63482: LD_ADDR_VAR 0 4
63486: PUSH
63487: LD_VAR 0 1
63491: PUSH
63492: FOR_IN
63493: IFFALSE 63676
// begin nat := GetNation ( i ) ;
63495: LD_ADDR_VAR 0 7
63499: PUSH
63500: LD_VAR 0 4
63504: PPUSH
63505: CALL_OW 248
63509: ST_TO_ADDR
// weapon := 0 ;
63510: LD_ADDR_VAR 0 8
63514: PUSH
63515: LD_INT 0
63517: ST_TO_ADDR
// if not nat then
63518: LD_VAR 0 7
63522: NOT
63523: IFFALSE 63527
// continue ;
63525: GO 63492
// for j in list [ nat ] do
63527: LD_ADDR_VAR 0 5
63531: PUSH
63532: LD_VAR 0 10
63536: PUSH
63537: LD_VAR 0 7
63541: ARRAY
63542: PUSH
63543: FOR_IN
63544: IFFALSE 63585
// if GetBWeapon ( i ) = j [ 1 ] then
63546: LD_VAR 0 4
63550: PPUSH
63551: CALL_OW 269
63555: PUSH
63556: LD_VAR 0 5
63560: PUSH
63561: LD_INT 1
63563: ARRAY
63564: EQUAL
63565: IFFALSE 63583
// begin weapon := j [ 2 ] ;
63567: LD_ADDR_VAR 0 8
63571: PUSH
63572: LD_VAR 0 5
63576: PUSH
63577: LD_INT 2
63579: ARRAY
63580: ST_TO_ADDR
// break ;
63581: GO 63585
// end ;
63583: GO 63543
63585: POP
63586: POP
// if not weapon then
63587: LD_VAR 0 8
63591: NOT
63592: IFFALSE 63596
// continue ;
63594: GO 63492
// for k in factories do
63596: LD_ADDR_VAR 0 6
63600: PUSH
63601: LD_VAR 0 2
63605: PUSH
63606: FOR_IN
63607: IFFALSE 63672
// begin weapons := AvailableWeaponList ( k ) ;
63609: LD_ADDR_VAR 0 9
63613: PUSH
63614: LD_VAR 0 6
63618: PPUSH
63619: CALL_OW 478
63623: ST_TO_ADDR
// if not weapons then
63624: LD_VAR 0 9
63628: NOT
63629: IFFALSE 63633
// continue ;
63631: GO 63606
// if weapon in weapons then
63633: LD_VAR 0 8
63637: PUSH
63638: LD_VAR 0 9
63642: IN
63643: IFFALSE 63670
// begin result := [ i , weapon ] ;
63645: LD_ADDR_VAR 0 3
63649: PUSH
63650: LD_VAR 0 4
63654: PUSH
63655: LD_VAR 0 8
63659: PUSH
63660: EMPTY
63661: LIST
63662: LIST
63663: ST_TO_ADDR
// exit ;
63664: POP
63665: POP
63666: POP
63667: POP
63668: GO 63678
// end ; end ;
63670: GO 63606
63672: POP
63673: POP
// end ;
63674: GO 63492
63676: POP
63677: POP
// end ;
63678: LD_VAR 0 3
63682: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
63683: LD_INT 0
63685: PPUSH
// if not side or side > 8 then
63686: LD_VAR 0 3
63690: NOT
63691: PUSH
63692: LD_VAR 0 3
63696: PUSH
63697: LD_INT 8
63699: GREATER
63700: OR
63701: IFFALSE 63705
// exit ;
63703: GO 63764
// if not range then
63705: LD_VAR 0 4
63709: NOT
63710: IFFALSE 63721
// range := - 12 ;
63712: LD_ADDR_VAR 0 4
63716: PUSH
63717: LD_INT 12
63719: NEG
63720: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
63721: LD_VAR 0 1
63725: PPUSH
63726: LD_VAR 0 2
63730: PPUSH
63731: LD_VAR 0 3
63735: PPUSH
63736: LD_VAR 0 4
63740: PPUSH
63741: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
63745: LD_VAR 0 1
63749: PPUSH
63750: LD_VAR 0 2
63754: PPUSH
63755: LD_VAR 0 3
63759: PPUSH
63760: CALL_OW 331
// end ;
63764: LD_VAR 0 5
63768: RET
// export function Video ( mode ) ; begin
63769: LD_INT 0
63771: PPUSH
// ingame_video = mode ;
63772: LD_ADDR_OWVAR 52
63776: PUSH
63777: LD_VAR 0 1
63781: ST_TO_ADDR
// interface_hidden = mode ;
63782: LD_ADDR_OWVAR 54
63786: PUSH
63787: LD_VAR 0 1
63791: ST_TO_ADDR
// end ;
63792: LD_VAR 0 2
63796: RET
// export function Join ( array , element ) ; begin
63797: LD_INT 0
63799: PPUSH
// result := Replace ( array , array + 1 , element ) ;
63800: LD_ADDR_VAR 0 3
63804: PUSH
63805: LD_VAR 0 1
63809: PPUSH
63810: LD_VAR 0 1
63814: PUSH
63815: LD_INT 1
63817: PLUS
63818: PPUSH
63819: LD_VAR 0 2
63823: PPUSH
63824: CALL_OW 1
63828: ST_TO_ADDR
// end ;
63829: LD_VAR 0 3
63833: RET
// export function JoinUnion ( array , element ) ; begin
63834: LD_INT 0
63836: PPUSH
// result := array union element ;
63837: LD_ADDR_VAR 0 3
63841: PUSH
63842: LD_VAR 0 1
63846: PUSH
63847: LD_VAR 0 2
63851: UNION
63852: ST_TO_ADDR
// end ;
63853: LD_VAR 0 3
63857: RET
// export function GetBehemoths ( side ) ; begin
63858: LD_INT 0
63860: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
63861: LD_ADDR_VAR 0 2
63865: PUSH
63866: LD_INT 22
63868: PUSH
63869: LD_VAR 0 1
63873: PUSH
63874: EMPTY
63875: LIST
63876: LIST
63877: PUSH
63878: LD_INT 31
63880: PUSH
63881: LD_INT 25
63883: PUSH
63884: EMPTY
63885: LIST
63886: LIST
63887: PUSH
63888: EMPTY
63889: LIST
63890: LIST
63891: PPUSH
63892: CALL_OW 69
63896: ST_TO_ADDR
// end ;
63897: LD_VAR 0 2
63901: RET
// export function Shuffle ( array ) ; var i , index ; begin
63902: LD_INT 0
63904: PPUSH
63905: PPUSH
63906: PPUSH
// result := [ ] ;
63907: LD_ADDR_VAR 0 2
63911: PUSH
63912: EMPTY
63913: ST_TO_ADDR
// if not array then
63914: LD_VAR 0 1
63918: NOT
63919: IFFALSE 63923
// exit ;
63921: GO 64022
// Randomize ;
63923: CALL_OW 10
// for i = array downto 1 do
63927: LD_ADDR_VAR 0 3
63931: PUSH
63932: DOUBLE
63933: LD_VAR 0 1
63937: INC
63938: ST_TO_ADDR
63939: LD_INT 1
63941: PUSH
63942: FOR_DOWNTO
63943: IFFALSE 64020
// begin index := rand ( 1 , array ) ;
63945: LD_ADDR_VAR 0 4
63949: PUSH
63950: LD_INT 1
63952: PPUSH
63953: LD_VAR 0 1
63957: PPUSH
63958: CALL_OW 12
63962: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
63963: LD_ADDR_VAR 0 2
63967: PUSH
63968: LD_VAR 0 2
63972: PPUSH
63973: LD_VAR 0 2
63977: PUSH
63978: LD_INT 1
63980: PLUS
63981: PPUSH
63982: LD_VAR 0 1
63986: PUSH
63987: LD_VAR 0 4
63991: ARRAY
63992: PPUSH
63993: CALL_OW 2
63997: ST_TO_ADDR
// array := Delete ( array , index ) ;
63998: LD_ADDR_VAR 0 1
64002: PUSH
64003: LD_VAR 0 1
64007: PPUSH
64008: LD_VAR 0 4
64012: PPUSH
64013: CALL_OW 3
64017: ST_TO_ADDR
// end ;
64018: GO 63942
64020: POP
64021: POP
// end ;
64022: LD_VAR 0 2
64026: RET
// export function GetBaseMaterials ( base ) ; begin
64027: LD_INT 0
64029: PPUSH
// result := [ 0 , 0 , 0 ] ;
64030: LD_ADDR_VAR 0 2
64034: PUSH
64035: LD_INT 0
64037: PUSH
64038: LD_INT 0
64040: PUSH
64041: LD_INT 0
64043: PUSH
64044: EMPTY
64045: LIST
64046: LIST
64047: LIST
64048: ST_TO_ADDR
// if not base then
64049: LD_VAR 0 1
64053: NOT
64054: IFFALSE 64058
// exit ;
64056: GO 64107
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64058: LD_ADDR_VAR 0 2
64062: PUSH
64063: LD_VAR 0 1
64067: PPUSH
64068: LD_INT 1
64070: PPUSH
64071: CALL_OW 275
64075: PUSH
64076: LD_VAR 0 1
64080: PPUSH
64081: LD_INT 2
64083: PPUSH
64084: CALL_OW 275
64088: PUSH
64089: LD_VAR 0 1
64093: PPUSH
64094: LD_INT 3
64096: PPUSH
64097: CALL_OW 275
64101: PUSH
64102: EMPTY
64103: LIST
64104: LIST
64105: LIST
64106: ST_TO_ADDR
// end ;
64107: LD_VAR 0 2
64111: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64112: LD_INT 0
64114: PPUSH
64115: PPUSH
// result := array ;
64116: LD_ADDR_VAR 0 3
64120: PUSH
64121: LD_VAR 0 1
64125: ST_TO_ADDR
// if size >= result then
64126: LD_VAR 0 2
64130: PUSH
64131: LD_VAR 0 3
64135: GREATEREQUAL
64136: IFFALSE 64140
// exit ;
64138: GO 64190
// if size then
64140: LD_VAR 0 2
64144: IFFALSE 64190
// for i := array downto size do
64146: LD_ADDR_VAR 0 4
64150: PUSH
64151: DOUBLE
64152: LD_VAR 0 1
64156: INC
64157: ST_TO_ADDR
64158: LD_VAR 0 2
64162: PUSH
64163: FOR_DOWNTO
64164: IFFALSE 64188
// result := Delete ( result , result ) ;
64166: LD_ADDR_VAR 0 3
64170: PUSH
64171: LD_VAR 0 3
64175: PPUSH
64176: LD_VAR 0 3
64180: PPUSH
64181: CALL_OW 3
64185: ST_TO_ADDR
64186: GO 64163
64188: POP
64189: POP
// end ;
64190: LD_VAR 0 3
64194: RET
// export function ComExit ( unit ) ; var tmp ; begin
64195: LD_INT 0
64197: PPUSH
64198: PPUSH
// if not IsInUnit ( unit ) then
64199: LD_VAR 0 1
64203: PPUSH
64204: CALL_OW 310
64208: NOT
64209: IFFALSE 64213
// exit ;
64211: GO 64273
// tmp := IsInUnit ( unit ) ;
64213: LD_ADDR_VAR 0 3
64217: PUSH
64218: LD_VAR 0 1
64222: PPUSH
64223: CALL_OW 310
64227: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
64228: LD_VAR 0 3
64232: PPUSH
64233: CALL_OW 247
64237: PUSH
64238: LD_INT 2
64240: EQUAL
64241: IFFALSE 64254
// ComExitVehicle ( unit ) else
64243: LD_VAR 0 1
64247: PPUSH
64248: CALL_OW 121
64252: GO 64263
// ComExitBuilding ( unit ) ;
64254: LD_VAR 0 1
64258: PPUSH
64259: CALL_OW 122
// result := tmp ;
64263: LD_ADDR_VAR 0 2
64267: PUSH
64268: LD_VAR 0 3
64272: ST_TO_ADDR
// end ;
64273: LD_VAR 0 2
64277: RET
// export function ComExitAll ( units ) ; var i ; begin
64278: LD_INT 0
64280: PPUSH
64281: PPUSH
// if not units then
64282: LD_VAR 0 1
64286: NOT
64287: IFFALSE 64291
// exit ;
64289: GO 64317
// for i in units do
64291: LD_ADDR_VAR 0 3
64295: PUSH
64296: LD_VAR 0 1
64300: PUSH
64301: FOR_IN
64302: IFFALSE 64315
// ComExit ( i ) ;
64304: LD_VAR 0 3
64308: PPUSH
64309: CALL 64195 0 1
64313: GO 64301
64315: POP
64316: POP
// end ;
64317: LD_VAR 0 2
64321: RET
// export function ResetHc ; begin
64322: LD_INT 0
64324: PPUSH
// InitHc ;
64325: CALL_OW 19
// hc_importance := 0 ;
64329: LD_ADDR_OWVAR 32
64333: PUSH
64334: LD_INT 0
64336: ST_TO_ADDR
// end ;
64337: LD_VAR 0 1
64341: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
64342: LD_INT 0
64344: PPUSH
64345: PPUSH
64346: PPUSH
// _x := ( x1 + x2 ) div 2 ;
64347: LD_ADDR_VAR 0 6
64351: PUSH
64352: LD_VAR 0 1
64356: PUSH
64357: LD_VAR 0 3
64361: PLUS
64362: PUSH
64363: LD_INT 2
64365: DIV
64366: ST_TO_ADDR
// if _x < 0 then
64367: LD_VAR 0 6
64371: PUSH
64372: LD_INT 0
64374: LESS
64375: IFFALSE 64392
// _x := _x * - 1 ;
64377: LD_ADDR_VAR 0 6
64381: PUSH
64382: LD_VAR 0 6
64386: PUSH
64387: LD_INT 1
64389: NEG
64390: MUL
64391: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
64392: LD_ADDR_VAR 0 7
64396: PUSH
64397: LD_VAR 0 2
64401: PUSH
64402: LD_VAR 0 4
64406: PLUS
64407: PUSH
64408: LD_INT 2
64410: DIV
64411: ST_TO_ADDR
// if _y < 0 then
64412: LD_VAR 0 7
64416: PUSH
64417: LD_INT 0
64419: LESS
64420: IFFALSE 64437
// _y := _y * - 1 ;
64422: LD_ADDR_VAR 0 7
64426: PUSH
64427: LD_VAR 0 7
64431: PUSH
64432: LD_INT 1
64434: NEG
64435: MUL
64436: ST_TO_ADDR
// result := [ _x , _y ] ;
64437: LD_ADDR_VAR 0 5
64441: PUSH
64442: LD_VAR 0 6
64446: PUSH
64447: LD_VAR 0 7
64451: PUSH
64452: EMPTY
64453: LIST
64454: LIST
64455: ST_TO_ADDR
// end ;
64456: LD_VAR 0 5
64460: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
64461: LD_INT 0
64463: PPUSH
64464: PPUSH
64465: PPUSH
64466: PPUSH
// task := GetTaskList ( unit ) ;
64467: LD_ADDR_VAR 0 7
64471: PUSH
64472: LD_VAR 0 1
64476: PPUSH
64477: CALL_OW 437
64481: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
64482: LD_VAR 0 7
64486: NOT
64487: PUSH
64488: LD_VAR 0 1
64492: PPUSH
64493: LD_VAR 0 2
64497: PPUSH
64498: CALL_OW 308
64502: NOT
64503: AND
64504: IFFALSE 64508
// exit ;
64506: GO 64626
// if IsInArea ( unit , area ) then
64508: LD_VAR 0 1
64512: PPUSH
64513: LD_VAR 0 2
64517: PPUSH
64518: CALL_OW 308
64522: IFFALSE 64540
// begin ComMoveToArea ( unit , goAway ) ;
64524: LD_VAR 0 1
64528: PPUSH
64529: LD_VAR 0 3
64533: PPUSH
64534: CALL_OW 113
// exit ;
64538: GO 64626
// end ; if task [ 1 ] [ 1 ] <> M then
64540: LD_VAR 0 7
64544: PUSH
64545: LD_INT 1
64547: ARRAY
64548: PUSH
64549: LD_INT 1
64551: ARRAY
64552: PUSH
64553: LD_STRING M
64555: NONEQUAL
64556: IFFALSE 64560
// exit ;
64558: GO 64626
// x := task [ 1 ] [ 2 ] ;
64560: LD_ADDR_VAR 0 5
64564: PUSH
64565: LD_VAR 0 7
64569: PUSH
64570: LD_INT 1
64572: ARRAY
64573: PUSH
64574: LD_INT 2
64576: ARRAY
64577: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
64578: LD_ADDR_VAR 0 6
64582: PUSH
64583: LD_VAR 0 7
64587: PUSH
64588: LD_INT 1
64590: ARRAY
64591: PUSH
64592: LD_INT 3
64594: ARRAY
64595: ST_TO_ADDR
// if InArea ( x , y , area ) then
64596: LD_VAR 0 5
64600: PPUSH
64601: LD_VAR 0 6
64605: PPUSH
64606: LD_VAR 0 2
64610: PPUSH
64611: CALL_OW 309
64615: IFFALSE 64626
// ComStop ( unit ) ;
64617: LD_VAR 0 1
64621: PPUSH
64622: CALL_OW 141
// end ;
64626: LD_VAR 0 4
64630: RET
// export function Abs ( value ) ; begin
64631: LD_INT 0
64633: PPUSH
// result := value ;
64634: LD_ADDR_VAR 0 2
64638: PUSH
64639: LD_VAR 0 1
64643: ST_TO_ADDR
// if value < 0 then
64644: LD_VAR 0 1
64648: PUSH
64649: LD_INT 0
64651: LESS
64652: IFFALSE 64669
// result := value * - 1 ;
64654: LD_ADDR_VAR 0 2
64658: PUSH
64659: LD_VAR 0 1
64663: PUSH
64664: LD_INT 1
64666: NEG
64667: MUL
64668: ST_TO_ADDR
// end ;
64669: LD_VAR 0 2
64673: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
64674: LD_INT 0
64676: PPUSH
64677: PPUSH
64678: PPUSH
64679: PPUSH
64680: PPUSH
64681: PPUSH
64682: PPUSH
64683: PPUSH
// if not unit or not building then
64684: LD_VAR 0 1
64688: NOT
64689: PUSH
64690: LD_VAR 0 2
64694: NOT
64695: OR
64696: IFFALSE 64700
// exit ;
64698: GO 64926
// x := GetX ( building ) ;
64700: LD_ADDR_VAR 0 4
64704: PUSH
64705: LD_VAR 0 2
64709: PPUSH
64710: CALL_OW 250
64714: ST_TO_ADDR
// y := GetY ( building ) ;
64715: LD_ADDR_VAR 0 6
64719: PUSH
64720: LD_VAR 0 2
64724: PPUSH
64725: CALL_OW 251
64729: ST_TO_ADDR
// d := GetDir ( building ) ;
64730: LD_ADDR_VAR 0 8
64734: PUSH
64735: LD_VAR 0 2
64739: PPUSH
64740: CALL_OW 254
64744: ST_TO_ADDR
// r := 4 ;
64745: LD_ADDR_VAR 0 9
64749: PUSH
64750: LD_INT 4
64752: ST_TO_ADDR
// for i := 1 to 5 do
64753: LD_ADDR_VAR 0 10
64757: PUSH
64758: DOUBLE
64759: LD_INT 1
64761: DEC
64762: ST_TO_ADDR
64763: LD_INT 5
64765: PUSH
64766: FOR_TO
64767: IFFALSE 64924
// begin _x := ShiftX ( x , d , r + i ) ;
64769: LD_ADDR_VAR 0 5
64773: PUSH
64774: LD_VAR 0 4
64778: PPUSH
64779: LD_VAR 0 8
64783: PPUSH
64784: LD_VAR 0 9
64788: PUSH
64789: LD_VAR 0 10
64793: PLUS
64794: PPUSH
64795: CALL_OW 272
64799: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
64800: LD_ADDR_VAR 0 7
64804: PUSH
64805: LD_VAR 0 6
64809: PPUSH
64810: LD_VAR 0 8
64814: PPUSH
64815: LD_VAR 0 9
64819: PUSH
64820: LD_VAR 0 10
64824: PLUS
64825: PPUSH
64826: CALL_OW 273
64830: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
64831: LD_VAR 0 5
64835: PPUSH
64836: LD_VAR 0 7
64840: PPUSH
64841: CALL_OW 488
64845: PUSH
64846: LD_VAR 0 5
64850: PPUSH
64851: LD_VAR 0 7
64855: PPUSH
64856: CALL_OW 428
64860: PPUSH
64861: CALL_OW 247
64865: PUSH
64866: LD_INT 3
64868: PUSH
64869: LD_INT 2
64871: PUSH
64872: EMPTY
64873: LIST
64874: LIST
64875: IN
64876: NOT
64877: AND
64878: IFFALSE 64922
// begin ComMoveXY ( unit , _x , _y ) ;
64880: LD_VAR 0 1
64884: PPUSH
64885: LD_VAR 0 5
64889: PPUSH
64890: LD_VAR 0 7
64894: PPUSH
64895: CALL_OW 111
// result := [ _x , _y ] ;
64899: LD_ADDR_VAR 0 3
64903: PUSH
64904: LD_VAR 0 5
64908: PUSH
64909: LD_VAR 0 7
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: ST_TO_ADDR
// exit ;
64918: POP
64919: POP
64920: GO 64926
// end ; end ;
64922: GO 64766
64924: POP
64925: POP
// end ;
64926: LD_VAR 0 3
64930: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
64931: LD_INT 0
64933: PPUSH
64934: PPUSH
64935: PPUSH
// result := 0 ;
64936: LD_ADDR_VAR 0 3
64940: PUSH
64941: LD_INT 0
64943: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
64944: LD_VAR 0 1
64948: PUSH
64949: LD_INT 0
64951: LESS
64952: PUSH
64953: LD_VAR 0 1
64957: PUSH
64958: LD_INT 8
64960: GREATER
64961: OR
64962: PUSH
64963: LD_VAR 0 2
64967: PUSH
64968: LD_INT 0
64970: LESS
64971: OR
64972: PUSH
64973: LD_VAR 0 2
64977: PUSH
64978: LD_INT 8
64980: GREATER
64981: OR
64982: IFFALSE 64986
// exit ;
64984: GO 65061
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
64986: LD_ADDR_VAR 0 4
64990: PUSH
64991: LD_INT 22
64993: PUSH
64994: LD_VAR 0 2
64998: PUSH
64999: EMPTY
65000: LIST
65001: LIST
65002: PPUSH
65003: CALL_OW 69
65007: PUSH
65008: FOR_IN
65009: IFFALSE 65059
// begin un := UnitShoot ( i ) ;
65011: LD_ADDR_VAR 0 5
65015: PUSH
65016: LD_VAR 0 4
65020: PPUSH
65021: CALL_OW 504
65025: ST_TO_ADDR
// if GetSide ( un ) = side1 then
65026: LD_VAR 0 5
65030: PPUSH
65031: CALL_OW 255
65035: PUSH
65036: LD_VAR 0 1
65040: EQUAL
65041: IFFALSE 65057
// begin result := un ;
65043: LD_ADDR_VAR 0 3
65047: PUSH
65048: LD_VAR 0 5
65052: ST_TO_ADDR
// exit ;
65053: POP
65054: POP
65055: GO 65061
// end ; end ;
65057: GO 65008
65059: POP
65060: POP
// end ;
65061: LD_VAR 0 3
65065: RET
// export function GetCargoBay ( units ) ; begin
65066: LD_INT 0
65068: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
65069: LD_ADDR_VAR 0 2
65073: PUSH
65074: LD_VAR 0 1
65078: PPUSH
65079: LD_INT 2
65081: PUSH
65082: LD_INT 34
65084: PUSH
65085: LD_INT 12
65087: PUSH
65088: EMPTY
65089: LIST
65090: LIST
65091: PUSH
65092: LD_INT 34
65094: PUSH
65095: LD_INT 51
65097: PUSH
65098: EMPTY
65099: LIST
65100: LIST
65101: PUSH
65102: LD_INT 34
65104: PUSH
65105: LD_INT 32
65107: PUSH
65108: EMPTY
65109: LIST
65110: LIST
65111: PUSH
65112: LD_INT 34
65114: PUSH
65115: LD_INT 89
65117: PUSH
65118: EMPTY
65119: LIST
65120: LIST
65121: PUSH
65122: EMPTY
65123: LIST
65124: LIST
65125: LIST
65126: LIST
65127: LIST
65128: PPUSH
65129: CALL_OW 72
65133: ST_TO_ADDR
// end ;
65134: LD_VAR 0 2
65138: RET
// export function Negate ( value ) ; begin
65139: LD_INT 0
65141: PPUSH
// result := not value ;
65142: LD_ADDR_VAR 0 2
65146: PUSH
65147: LD_VAR 0 1
65151: NOT
65152: ST_TO_ADDR
// end ;
65153: LD_VAR 0 2
65157: RET
// export function Inc ( value ) ; begin
65158: LD_INT 0
65160: PPUSH
// result := value + 1 ;
65161: LD_ADDR_VAR 0 2
65165: PUSH
65166: LD_VAR 0 1
65170: PUSH
65171: LD_INT 1
65173: PLUS
65174: ST_TO_ADDR
// end ;
65175: LD_VAR 0 2
65179: RET
// export function Dec ( value ) ; begin
65180: LD_INT 0
65182: PPUSH
// result := value - 1 ;
65183: LD_ADDR_VAR 0 2
65187: PUSH
65188: LD_VAR 0 1
65192: PUSH
65193: LD_INT 1
65195: MINUS
65196: ST_TO_ADDR
// end ;
65197: LD_VAR 0 2
65201: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
65202: LD_INT 0
65204: PPUSH
65205: PPUSH
65206: PPUSH
65207: PPUSH
65208: PPUSH
65209: PPUSH
65210: PPUSH
65211: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
65212: LD_VAR 0 1
65216: PPUSH
65217: LD_VAR 0 2
65221: PPUSH
65222: CALL_OW 488
65226: NOT
65227: PUSH
65228: LD_VAR 0 3
65232: PPUSH
65233: LD_VAR 0 4
65237: PPUSH
65238: CALL_OW 488
65242: NOT
65243: OR
65244: IFFALSE 65257
// begin result := - 1 ;
65246: LD_ADDR_VAR 0 5
65250: PUSH
65251: LD_INT 1
65253: NEG
65254: ST_TO_ADDR
// exit ;
65255: GO 65492
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
65257: LD_ADDR_VAR 0 12
65261: PUSH
65262: LD_VAR 0 1
65266: PPUSH
65267: LD_VAR 0 2
65271: PPUSH
65272: LD_VAR 0 3
65276: PPUSH
65277: LD_VAR 0 4
65281: PPUSH
65282: CALL 64342 0 4
65286: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
65287: LD_ADDR_VAR 0 11
65291: PUSH
65292: LD_VAR 0 1
65296: PPUSH
65297: LD_VAR 0 2
65301: PPUSH
65302: LD_VAR 0 12
65306: PUSH
65307: LD_INT 1
65309: ARRAY
65310: PPUSH
65311: LD_VAR 0 12
65315: PUSH
65316: LD_INT 2
65318: ARRAY
65319: PPUSH
65320: CALL_OW 298
65324: ST_TO_ADDR
// distance := 9999 ;
65325: LD_ADDR_VAR 0 10
65329: PUSH
65330: LD_INT 9999
65332: ST_TO_ADDR
// for i := 0 to 5 do
65333: LD_ADDR_VAR 0 6
65337: PUSH
65338: DOUBLE
65339: LD_INT 0
65341: DEC
65342: ST_TO_ADDR
65343: LD_INT 5
65345: PUSH
65346: FOR_TO
65347: IFFALSE 65490
// begin _x := ShiftX ( x1 , i , centerDist ) ;
65349: LD_ADDR_VAR 0 7
65353: PUSH
65354: LD_VAR 0 1
65358: PPUSH
65359: LD_VAR 0 6
65363: PPUSH
65364: LD_VAR 0 11
65368: PPUSH
65369: CALL_OW 272
65373: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
65374: LD_ADDR_VAR 0 8
65378: PUSH
65379: LD_VAR 0 2
65383: PPUSH
65384: LD_VAR 0 6
65388: PPUSH
65389: LD_VAR 0 11
65393: PPUSH
65394: CALL_OW 273
65398: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
65399: LD_VAR 0 7
65403: PPUSH
65404: LD_VAR 0 8
65408: PPUSH
65409: CALL_OW 488
65413: NOT
65414: IFFALSE 65418
// continue ;
65416: GO 65346
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
65418: LD_ADDR_VAR 0 9
65422: PUSH
65423: LD_VAR 0 12
65427: PUSH
65428: LD_INT 1
65430: ARRAY
65431: PPUSH
65432: LD_VAR 0 12
65436: PUSH
65437: LD_INT 2
65439: ARRAY
65440: PPUSH
65441: LD_VAR 0 7
65445: PPUSH
65446: LD_VAR 0 8
65450: PPUSH
65451: CALL_OW 298
65455: ST_TO_ADDR
// if tmp < distance then
65456: LD_VAR 0 9
65460: PUSH
65461: LD_VAR 0 10
65465: LESS
65466: IFFALSE 65488
// begin result := i ;
65468: LD_ADDR_VAR 0 5
65472: PUSH
65473: LD_VAR 0 6
65477: ST_TO_ADDR
// distance := tmp ;
65478: LD_ADDR_VAR 0 10
65482: PUSH
65483: LD_VAR 0 9
65487: ST_TO_ADDR
// end ; end ;
65488: GO 65346
65490: POP
65491: POP
// end ;
65492: LD_VAR 0 5
65496: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65497: LD_INT 0
65499: PPUSH
65500: PPUSH
// if not driver or not IsInUnit ( driver ) then
65501: LD_VAR 0 1
65505: NOT
65506: PUSH
65507: LD_VAR 0 1
65511: PPUSH
65512: CALL_OW 310
65516: NOT
65517: OR
65518: IFFALSE 65522
// exit ;
65520: GO 65612
// vehicle := IsInUnit ( driver ) ;
65522: LD_ADDR_VAR 0 3
65526: PUSH
65527: LD_VAR 0 1
65531: PPUSH
65532: CALL_OW 310
65536: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65537: LD_VAR 0 1
65541: PPUSH
65542: LD_STRING \
65544: PUSH
65545: LD_INT 0
65547: PUSH
65548: LD_INT 0
65550: PUSH
65551: LD_INT 0
65553: PUSH
65554: LD_INT 0
65556: PUSH
65557: LD_INT 0
65559: PUSH
65560: LD_INT 0
65562: PUSH
65563: EMPTY
65564: LIST
65565: LIST
65566: LIST
65567: LIST
65568: LIST
65569: LIST
65570: LIST
65571: PUSH
65572: LD_STRING E
65574: PUSH
65575: LD_INT 0
65577: PUSH
65578: LD_INT 0
65580: PUSH
65581: LD_VAR 0 3
65585: PUSH
65586: LD_INT 0
65588: PUSH
65589: LD_INT 0
65591: PUSH
65592: LD_INT 0
65594: PUSH
65595: EMPTY
65596: LIST
65597: LIST
65598: LIST
65599: LIST
65600: LIST
65601: LIST
65602: LIST
65603: PUSH
65604: EMPTY
65605: LIST
65606: LIST
65607: PPUSH
65608: CALL_OW 446
// end ;
65612: LD_VAR 0 2
65616: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65617: LD_INT 0
65619: PPUSH
65620: PPUSH
// if not driver or not IsInUnit ( driver ) then
65621: LD_VAR 0 1
65625: NOT
65626: PUSH
65627: LD_VAR 0 1
65631: PPUSH
65632: CALL_OW 310
65636: NOT
65637: OR
65638: IFFALSE 65642
// exit ;
65640: GO 65732
// vehicle := IsInUnit ( driver ) ;
65642: LD_ADDR_VAR 0 3
65646: PUSH
65647: LD_VAR 0 1
65651: PPUSH
65652: CALL_OW 310
65656: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65657: LD_VAR 0 1
65661: PPUSH
65662: LD_STRING \
65664: PUSH
65665: LD_INT 0
65667: PUSH
65668: LD_INT 0
65670: PUSH
65671: LD_INT 0
65673: PUSH
65674: LD_INT 0
65676: PUSH
65677: LD_INT 0
65679: PUSH
65680: LD_INT 0
65682: PUSH
65683: EMPTY
65684: LIST
65685: LIST
65686: LIST
65687: LIST
65688: LIST
65689: LIST
65690: LIST
65691: PUSH
65692: LD_STRING E
65694: PUSH
65695: LD_INT 0
65697: PUSH
65698: LD_INT 0
65700: PUSH
65701: LD_VAR 0 3
65705: PUSH
65706: LD_INT 0
65708: PUSH
65709: LD_INT 0
65711: PUSH
65712: LD_INT 0
65714: PUSH
65715: EMPTY
65716: LIST
65717: LIST
65718: LIST
65719: LIST
65720: LIST
65721: LIST
65722: LIST
65723: PUSH
65724: EMPTY
65725: LIST
65726: LIST
65727: PPUSH
65728: CALL_OW 447
// end ;
65732: LD_VAR 0 2
65736: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
65737: LD_INT 0
65739: PPUSH
65740: PPUSH
65741: PPUSH
// tmp := [ ] ;
65742: LD_ADDR_VAR 0 5
65746: PUSH
65747: EMPTY
65748: ST_TO_ADDR
// for i in units do
65749: LD_ADDR_VAR 0 4
65753: PUSH
65754: LD_VAR 0 1
65758: PUSH
65759: FOR_IN
65760: IFFALSE 65798
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
65762: LD_ADDR_VAR 0 5
65766: PUSH
65767: LD_VAR 0 5
65771: PPUSH
65772: LD_VAR 0 5
65776: PUSH
65777: LD_INT 1
65779: PLUS
65780: PPUSH
65781: LD_VAR 0 4
65785: PPUSH
65786: CALL_OW 256
65790: PPUSH
65791: CALL_OW 2
65795: ST_TO_ADDR
65796: GO 65759
65798: POP
65799: POP
// if not tmp then
65800: LD_VAR 0 5
65804: NOT
65805: IFFALSE 65809
// exit ;
65807: GO 65857
// if asc then
65809: LD_VAR 0 2
65813: IFFALSE 65837
// result := SortListByListAsc ( units , tmp ) else
65815: LD_ADDR_VAR 0 3
65819: PUSH
65820: LD_VAR 0 1
65824: PPUSH
65825: LD_VAR 0 5
65829: PPUSH
65830: CALL_OW 76
65834: ST_TO_ADDR
65835: GO 65857
// result := SortListByListDesc ( units , tmp ) ;
65837: LD_ADDR_VAR 0 3
65841: PUSH
65842: LD_VAR 0 1
65846: PPUSH
65847: LD_VAR 0 5
65851: PPUSH
65852: CALL_OW 77
65856: ST_TO_ADDR
// end ;
65857: LD_VAR 0 3
65861: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
65862: LD_INT 0
65864: PPUSH
65865: PPUSH
// task := GetTaskList ( mech ) ;
65866: LD_ADDR_VAR 0 4
65870: PUSH
65871: LD_VAR 0 1
65875: PPUSH
65876: CALL_OW 437
65880: ST_TO_ADDR
// if not task then
65881: LD_VAR 0 4
65885: NOT
65886: IFFALSE 65890
// exit ;
65888: GO 65932
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
65890: LD_ADDR_VAR 0 3
65894: PUSH
65895: LD_VAR 0 4
65899: PUSH
65900: LD_INT 1
65902: ARRAY
65903: PUSH
65904: LD_INT 1
65906: ARRAY
65907: PUSH
65908: LD_STRING r
65910: EQUAL
65911: PUSH
65912: LD_VAR 0 4
65916: PUSH
65917: LD_INT 1
65919: ARRAY
65920: PUSH
65921: LD_INT 4
65923: ARRAY
65924: PUSH
65925: LD_VAR 0 2
65929: EQUAL
65930: AND
65931: ST_TO_ADDR
// end ;
65932: LD_VAR 0 3
65936: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
65937: LD_INT 0
65939: PPUSH
// SetDir ( unit , d ) ;
65940: LD_VAR 0 1
65944: PPUSH
65945: LD_VAR 0 4
65949: PPUSH
65950: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
65954: LD_VAR 0 1
65958: PPUSH
65959: LD_VAR 0 2
65963: PPUSH
65964: LD_VAR 0 3
65968: PPUSH
65969: LD_VAR 0 5
65973: PPUSH
65974: CALL_OW 48
// end ;
65978: LD_VAR 0 6
65982: RET
// export function ToNaturalNumber ( number ) ; begin
65983: LD_INT 0
65985: PPUSH
// result := number div 1 ;
65986: LD_ADDR_VAR 0 2
65990: PUSH
65991: LD_VAR 0 1
65995: PUSH
65996: LD_INT 1
65998: DIV
65999: ST_TO_ADDR
// if number < 0 then
66000: LD_VAR 0 1
66004: PUSH
66005: LD_INT 0
66007: LESS
66008: IFFALSE 66018
// result := 0 ;
66010: LD_ADDR_VAR 0 2
66014: PUSH
66015: LD_INT 0
66017: ST_TO_ADDR
// end ;
66018: LD_VAR 0 2
66022: RET
// export function SortByClass ( units , class ) ; var un ; begin
66023: LD_INT 0
66025: PPUSH
66026: PPUSH
// if not units or not class then
66027: LD_VAR 0 1
66031: NOT
66032: PUSH
66033: LD_VAR 0 2
66037: NOT
66038: OR
66039: IFFALSE 66043
// exit ;
66041: GO 66138
// result := [ ] ;
66043: LD_ADDR_VAR 0 3
66047: PUSH
66048: EMPTY
66049: ST_TO_ADDR
// for un in units do
66050: LD_ADDR_VAR 0 4
66054: PUSH
66055: LD_VAR 0 1
66059: PUSH
66060: FOR_IN
66061: IFFALSE 66136
// if GetClass ( un ) = class then
66063: LD_VAR 0 4
66067: PPUSH
66068: CALL_OW 257
66072: PUSH
66073: LD_VAR 0 2
66077: EQUAL
66078: IFFALSE 66105
// result := Insert ( result , 1 , un ) else
66080: LD_ADDR_VAR 0 3
66084: PUSH
66085: LD_VAR 0 3
66089: PPUSH
66090: LD_INT 1
66092: PPUSH
66093: LD_VAR 0 4
66097: PPUSH
66098: CALL_OW 2
66102: ST_TO_ADDR
66103: GO 66134
// result := Replace ( result , result + 1 , un ) ;
66105: LD_ADDR_VAR 0 3
66109: PUSH
66110: LD_VAR 0 3
66114: PPUSH
66115: LD_VAR 0 3
66119: PUSH
66120: LD_INT 1
66122: PLUS
66123: PPUSH
66124: LD_VAR 0 4
66128: PPUSH
66129: CALL_OW 1
66133: ST_TO_ADDR
66134: GO 66060
66136: POP
66137: POP
// end ;
66138: LD_VAR 0 3
66142: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
66143: LD_INT 0
66145: PPUSH
66146: PPUSH
66147: PPUSH
66148: PPUSH
66149: PPUSH
66150: PPUSH
66151: PPUSH
// result := [ ] ;
66152: LD_ADDR_VAR 0 4
66156: PUSH
66157: EMPTY
66158: ST_TO_ADDR
// if x - r < 0 then
66159: LD_VAR 0 1
66163: PUSH
66164: LD_VAR 0 3
66168: MINUS
66169: PUSH
66170: LD_INT 0
66172: LESS
66173: IFFALSE 66185
// min_x := 0 else
66175: LD_ADDR_VAR 0 8
66179: PUSH
66180: LD_INT 0
66182: ST_TO_ADDR
66183: GO 66201
// min_x := x - r ;
66185: LD_ADDR_VAR 0 8
66189: PUSH
66190: LD_VAR 0 1
66194: PUSH
66195: LD_VAR 0 3
66199: MINUS
66200: ST_TO_ADDR
// if y - r < 0 then
66201: LD_VAR 0 2
66205: PUSH
66206: LD_VAR 0 3
66210: MINUS
66211: PUSH
66212: LD_INT 0
66214: LESS
66215: IFFALSE 66227
// min_y := 0 else
66217: LD_ADDR_VAR 0 7
66221: PUSH
66222: LD_INT 0
66224: ST_TO_ADDR
66225: GO 66243
// min_y := y - r ;
66227: LD_ADDR_VAR 0 7
66231: PUSH
66232: LD_VAR 0 2
66236: PUSH
66237: LD_VAR 0 3
66241: MINUS
66242: ST_TO_ADDR
// max_x := x + r ;
66243: LD_ADDR_VAR 0 9
66247: PUSH
66248: LD_VAR 0 1
66252: PUSH
66253: LD_VAR 0 3
66257: PLUS
66258: ST_TO_ADDR
// max_y := y + r ;
66259: LD_ADDR_VAR 0 10
66263: PUSH
66264: LD_VAR 0 2
66268: PUSH
66269: LD_VAR 0 3
66273: PLUS
66274: ST_TO_ADDR
// for _x = min_x to max_x do
66275: LD_ADDR_VAR 0 5
66279: PUSH
66280: DOUBLE
66281: LD_VAR 0 8
66285: DEC
66286: ST_TO_ADDR
66287: LD_VAR 0 9
66291: PUSH
66292: FOR_TO
66293: IFFALSE 66394
// for _y = min_y to max_y do
66295: LD_ADDR_VAR 0 6
66299: PUSH
66300: DOUBLE
66301: LD_VAR 0 7
66305: DEC
66306: ST_TO_ADDR
66307: LD_VAR 0 10
66311: PUSH
66312: FOR_TO
66313: IFFALSE 66390
// begin if not ValidHex ( _x , _y ) then
66315: LD_VAR 0 5
66319: PPUSH
66320: LD_VAR 0 6
66324: PPUSH
66325: CALL_OW 488
66329: NOT
66330: IFFALSE 66334
// continue ;
66332: GO 66312
// if GetResourceTypeXY ( _x , _y ) then
66334: LD_VAR 0 5
66338: PPUSH
66339: LD_VAR 0 6
66343: PPUSH
66344: CALL_OW 283
66348: IFFALSE 66388
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
66350: LD_ADDR_VAR 0 4
66354: PUSH
66355: LD_VAR 0 4
66359: PPUSH
66360: LD_VAR 0 4
66364: PUSH
66365: LD_INT 1
66367: PLUS
66368: PPUSH
66369: LD_VAR 0 5
66373: PUSH
66374: LD_VAR 0 6
66378: PUSH
66379: EMPTY
66380: LIST
66381: LIST
66382: PPUSH
66383: CALL_OW 1
66387: ST_TO_ADDR
// end ;
66388: GO 66312
66390: POP
66391: POP
66392: GO 66292
66394: POP
66395: POP
// end ;
66396: LD_VAR 0 4
66400: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
66401: LD_INT 0
66403: PPUSH
66404: PPUSH
66405: PPUSH
66406: PPUSH
66407: PPUSH
66408: PPUSH
66409: PPUSH
66410: PPUSH
// if not units then
66411: LD_VAR 0 1
66415: NOT
66416: IFFALSE 66420
// exit ;
66418: GO 66944
// result := UnitFilter ( units , [ f_ok ] ) ;
66420: LD_ADDR_VAR 0 3
66424: PUSH
66425: LD_VAR 0 1
66429: PPUSH
66430: LD_INT 50
66432: PUSH
66433: EMPTY
66434: LIST
66435: PPUSH
66436: CALL_OW 72
66440: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
66441: LD_ADDR_VAR 0 8
66445: PUSH
66446: LD_VAR 0 1
66450: PUSH
66451: LD_INT 1
66453: ARRAY
66454: PPUSH
66455: CALL_OW 255
66459: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
66460: LD_ADDR_VAR 0 10
66464: PUSH
66465: LD_INT 29
66467: PUSH
66468: LD_INT 91
66470: PUSH
66471: LD_INT 49
66473: PUSH
66474: EMPTY
66475: LIST
66476: LIST
66477: LIST
66478: ST_TO_ADDR
// if not result then
66479: LD_VAR 0 3
66483: NOT
66484: IFFALSE 66488
// exit ;
66486: GO 66944
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
66488: LD_ADDR_VAR 0 5
66492: PUSH
66493: LD_INT 81
66495: PUSH
66496: LD_VAR 0 8
66500: PUSH
66501: EMPTY
66502: LIST
66503: LIST
66504: PPUSH
66505: CALL_OW 69
66509: ST_TO_ADDR
// for i in result do
66510: LD_ADDR_VAR 0 4
66514: PUSH
66515: LD_VAR 0 3
66519: PUSH
66520: FOR_IN
66521: IFFALSE 66942
// begin tag := GetTag ( i ) + 1 ;
66523: LD_ADDR_VAR 0 9
66527: PUSH
66528: LD_VAR 0 4
66532: PPUSH
66533: CALL_OW 110
66537: PUSH
66538: LD_INT 1
66540: PLUS
66541: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
66542: LD_ADDR_VAR 0 7
66546: PUSH
66547: LD_VAR 0 4
66551: PPUSH
66552: CALL_OW 250
66556: PPUSH
66557: LD_VAR 0 4
66561: PPUSH
66562: CALL_OW 251
66566: PPUSH
66567: LD_INT 6
66569: PPUSH
66570: CALL 66143 0 3
66574: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
66575: LD_VAR 0 4
66579: PPUSH
66580: CALL_OW 247
66584: PUSH
66585: LD_INT 2
66587: EQUAL
66588: PUSH
66589: LD_VAR 0 7
66593: AND
66594: PUSH
66595: LD_VAR 0 4
66599: PPUSH
66600: CALL_OW 264
66604: PUSH
66605: LD_VAR 0 10
66609: IN
66610: NOT
66611: AND
66612: IFFALSE 66651
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
66614: LD_VAR 0 4
66618: PPUSH
66619: LD_VAR 0 7
66623: PUSH
66624: LD_INT 1
66626: ARRAY
66627: PUSH
66628: LD_INT 1
66630: ARRAY
66631: PPUSH
66632: LD_VAR 0 7
66636: PUSH
66637: LD_INT 1
66639: ARRAY
66640: PUSH
66641: LD_INT 2
66643: ARRAY
66644: PPUSH
66645: CALL_OW 116
66649: GO 66940
// if path > tag then
66651: LD_VAR 0 2
66655: PUSH
66656: LD_VAR 0 9
66660: GREATER
66661: IFFALSE 66869
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
66663: LD_ADDR_VAR 0 6
66667: PUSH
66668: LD_VAR 0 5
66672: PPUSH
66673: LD_INT 91
66675: PUSH
66676: LD_VAR 0 4
66680: PUSH
66681: LD_INT 8
66683: PUSH
66684: EMPTY
66685: LIST
66686: LIST
66687: LIST
66688: PPUSH
66689: CALL_OW 72
66693: ST_TO_ADDR
// if nearEnemy then
66694: LD_VAR 0 6
66698: IFFALSE 66767
// begin if GetWeapon ( i ) = ru_time_lapser then
66700: LD_VAR 0 4
66704: PPUSH
66705: CALL_OW 264
66709: PUSH
66710: LD_INT 49
66712: EQUAL
66713: IFFALSE 66741
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
66715: LD_VAR 0 4
66719: PPUSH
66720: LD_VAR 0 6
66724: PPUSH
66725: LD_VAR 0 4
66729: PPUSH
66730: CALL_OW 74
66734: PPUSH
66735: CALL_OW 112
66739: GO 66765
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
66741: LD_VAR 0 4
66745: PPUSH
66746: LD_VAR 0 6
66750: PPUSH
66751: LD_VAR 0 4
66755: PPUSH
66756: CALL_OW 74
66760: PPUSH
66761: CALL_OW 115
// end else
66765: GO 66867
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
66767: LD_VAR 0 4
66771: PPUSH
66772: LD_VAR 0 2
66776: PUSH
66777: LD_VAR 0 9
66781: ARRAY
66782: PUSH
66783: LD_INT 1
66785: ARRAY
66786: PPUSH
66787: LD_VAR 0 2
66791: PUSH
66792: LD_VAR 0 9
66796: ARRAY
66797: PUSH
66798: LD_INT 2
66800: ARRAY
66801: PPUSH
66802: CALL_OW 297
66806: PUSH
66807: LD_INT 6
66809: GREATER
66810: IFFALSE 66853
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
66812: LD_VAR 0 4
66816: PPUSH
66817: LD_VAR 0 2
66821: PUSH
66822: LD_VAR 0 9
66826: ARRAY
66827: PUSH
66828: LD_INT 1
66830: ARRAY
66831: PPUSH
66832: LD_VAR 0 2
66836: PUSH
66837: LD_VAR 0 9
66841: ARRAY
66842: PUSH
66843: LD_INT 2
66845: ARRAY
66846: PPUSH
66847: CALL_OW 114
66851: GO 66867
// SetTag ( i , tag ) ;
66853: LD_VAR 0 4
66857: PPUSH
66858: LD_VAR 0 9
66862: PPUSH
66863: CALL_OW 109
// end else
66867: GO 66940
// if enemy then
66869: LD_VAR 0 5
66873: IFFALSE 66940
// begin if GetWeapon ( i ) = ru_time_lapser then
66875: LD_VAR 0 4
66879: PPUSH
66880: CALL_OW 264
66884: PUSH
66885: LD_INT 49
66887: EQUAL
66888: IFFALSE 66916
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
66890: LD_VAR 0 4
66894: PPUSH
66895: LD_VAR 0 5
66899: PPUSH
66900: LD_VAR 0 4
66904: PPUSH
66905: CALL_OW 74
66909: PPUSH
66910: CALL_OW 112
66914: GO 66940
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
66916: LD_VAR 0 4
66920: PPUSH
66921: LD_VAR 0 5
66925: PPUSH
66926: LD_VAR 0 4
66930: PPUSH
66931: CALL_OW 74
66935: PPUSH
66936: CALL_OW 115
// end ; end ;
66940: GO 66520
66942: POP
66943: POP
// end ;
66944: LD_VAR 0 3
66948: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
66949: LD_INT 0
66951: PPUSH
66952: PPUSH
66953: PPUSH
// if not unit or IsInUnit ( unit ) then
66954: LD_VAR 0 1
66958: NOT
66959: PUSH
66960: LD_VAR 0 1
66964: PPUSH
66965: CALL_OW 310
66969: OR
66970: IFFALSE 66974
// exit ;
66972: GO 67065
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
66974: LD_ADDR_VAR 0 4
66978: PUSH
66979: LD_VAR 0 1
66983: PPUSH
66984: CALL_OW 250
66988: PPUSH
66989: LD_VAR 0 2
66993: PPUSH
66994: LD_INT 1
66996: PPUSH
66997: CALL_OW 272
67001: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
67002: LD_ADDR_VAR 0 5
67006: PUSH
67007: LD_VAR 0 1
67011: PPUSH
67012: CALL_OW 251
67016: PPUSH
67017: LD_VAR 0 2
67021: PPUSH
67022: LD_INT 1
67024: PPUSH
67025: CALL_OW 273
67029: ST_TO_ADDR
// if ValidHex ( x , y ) then
67030: LD_VAR 0 4
67034: PPUSH
67035: LD_VAR 0 5
67039: PPUSH
67040: CALL_OW 488
67044: IFFALSE 67065
// ComTurnXY ( unit , x , y ) ;
67046: LD_VAR 0 1
67050: PPUSH
67051: LD_VAR 0 4
67055: PPUSH
67056: LD_VAR 0 5
67060: PPUSH
67061: CALL_OW 118
// end ;
67065: LD_VAR 0 3
67069: RET
// export function SeeUnits ( side , units ) ; var i ; begin
67070: LD_INT 0
67072: PPUSH
67073: PPUSH
// result := false ;
67074: LD_ADDR_VAR 0 3
67078: PUSH
67079: LD_INT 0
67081: ST_TO_ADDR
// if not units then
67082: LD_VAR 0 2
67086: NOT
67087: IFFALSE 67091
// exit ;
67089: GO 67136
// for i in units do
67091: LD_ADDR_VAR 0 4
67095: PUSH
67096: LD_VAR 0 2
67100: PUSH
67101: FOR_IN
67102: IFFALSE 67134
// if See ( side , i ) then
67104: LD_VAR 0 1
67108: PPUSH
67109: LD_VAR 0 4
67113: PPUSH
67114: CALL_OW 292
67118: IFFALSE 67132
// begin result := true ;
67120: LD_ADDR_VAR 0 3
67124: PUSH
67125: LD_INT 1
67127: ST_TO_ADDR
// exit ;
67128: POP
67129: POP
67130: GO 67136
// end ;
67132: GO 67101
67134: POP
67135: POP
// end ;
67136: LD_VAR 0 3
67140: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
67141: LD_INT 0
67143: PPUSH
67144: PPUSH
67145: PPUSH
67146: PPUSH
// if not unit or not points then
67147: LD_VAR 0 1
67151: NOT
67152: PUSH
67153: LD_VAR 0 2
67157: NOT
67158: OR
67159: IFFALSE 67163
// exit ;
67161: GO 67253
// dist := 99999 ;
67163: LD_ADDR_VAR 0 5
67167: PUSH
67168: LD_INT 99999
67170: ST_TO_ADDR
// for i in points do
67171: LD_ADDR_VAR 0 4
67175: PUSH
67176: LD_VAR 0 2
67180: PUSH
67181: FOR_IN
67182: IFFALSE 67251
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
67184: LD_ADDR_VAR 0 6
67188: PUSH
67189: LD_VAR 0 1
67193: PPUSH
67194: LD_VAR 0 4
67198: PUSH
67199: LD_INT 1
67201: ARRAY
67202: PPUSH
67203: LD_VAR 0 4
67207: PUSH
67208: LD_INT 2
67210: ARRAY
67211: PPUSH
67212: CALL_OW 297
67216: ST_TO_ADDR
// if tmpDist < dist then
67217: LD_VAR 0 6
67221: PUSH
67222: LD_VAR 0 5
67226: LESS
67227: IFFALSE 67249
// begin result := i ;
67229: LD_ADDR_VAR 0 3
67233: PUSH
67234: LD_VAR 0 4
67238: ST_TO_ADDR
// dist := tmpDist ;
67239: LD_ADDR_VAR 0 5
67243: PUSH
67244: LD_VAR 0 6
67248: ST_TO_ADDR
// end ; end ;
67249: GO 67181
67251: POP
67252: POP
// end ;
67253: LD_VAR 0 3
67257: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
67258: LD_INT 0
67260: PPUSH
// uc_side := side ;
67261: LD_ADDR_OWVAR 20
67265: PUSH
67266: LD_VAR 0 1
67270: ST_TO_ADDR
// uc_nation := 3 ;
67271: LD_ADDR_OWVAR 21
67275: PUSH
67276: LD_INT 3
67278: ST_TO_ADDR
// vc_chassis := 25 ;
67279: LD_ADDR_OWVAR 37
67283: PUSH
67284: LD_INT 25
67286: ST_TO_ADDR
// vc_engine := engine_siberite ;
67287: LD_ADDR_OWVAR 39
67291: PUSH
67292: LD_INT 3
67294: ST_TO_ADDR
// vc_control := control_computer ;
67295: LD_ADDR_OWVAR 38
67299: PUSH
67300: LD_INT 3
67302: ST_TO_ADDR
// vc_weapon := 59 ;
67303: LD_ADDR_OWVAR 40
67307: PUSH
67308: LD_INT 59
67310: ST_TO_ADDR
// result := CreateVehicle ;
67311: LD_ADDR_VAR 0 5
67315: PUSH
67316: CALL_OW 45
67320: ST_TO_ADDR
// SetDir ( result , d ) ;
67321: LD_VAR 0 5
67325: PPUSH
67326: LD_VAR 0 4
67330: PPUSH
67331: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
67335: LD_VAR 0 5
67339: PPUSH
67340: LD_VAR 0 2
67344: PPUSH
67345: LD_VAR 0 3
67349: PPUSH
67350: LD_INT 0
67352: PPUSH
67353: CALL_OW 48
// end ;
67357: LD_VAR 0 5
67361: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
67362: LD_INT 0
67364: PPUSH
67365: PPUSH
67366: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
67367: LD_ADDR_VAR 0 2
67371: PUSH
67372: LD_INT 0
67374: PUSH
67375: LD_INT 0
67377: PUSH
67378: LD_INT 0
67380: PUSH
67381: LD_INT 0
67383: PUSH
67384: EMPTY
67385: LIST
67386: LIST
67387: LIST
67388: LIST
67389: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
67390: LD_VAR 0 1
67394: NOT
67395: PUSH
67396: LD_VAR 0 1
67400: PPUSH
67401: CALL_OW 264
67405: PUSH
67406: LD_INT 12
67408: PUSH
67409: LD_INT 51
67411: PUSH
67412: LD_INT 32
67414: PUSH
67415: LD_INT 89
67417: PUSH
67418: EMPTY
67419: LIST
67420: LIST
67421: LIST
67422: LIST
67423: IN
67424: NOT
67425: OR
67426: IFFALSE 67430
// exit ;
67428: GO 67528
// for i := 1 to 3 do
67430: LD_ADDR_VAR 0 3
67434: PUSH
67435: DOUBLE
67436: LD_INT 1
67438: DEC
67439: ST_TO_ADDR
67440: LD_INT 3
67442: PUSH
67443: FOR_TO
67444: IFFALSE 67526
// begin tmp := GetCargo ( cargo , i ) ;
67446: LD_ADDR_VAR 0 4
67450: PUSH
67451: LD_VAR 0 1
67455: PPUSH
67456: LD_VAR 0 3
67460: PPUSH
67461: CALL_OW 289
67465: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
67466: LD_ADDR_VAR 0 2
67470: PUSH
67471: LD_VAR 0 2
67475: PPUSH
67476: LD_VAR 0 3
67480: PPUSH
67481: LD_VAR 0 4
67485: PPUSH
67486: CALL_OW 1
67490: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
67491: LD_ADDR_VAR 0 2
67495: PUSH
67496: LD_VAR 0 2
67500: PPUSH
67501: LD_INT 4
67503: PPUSH
67504: LD_VAR 0 2
67508: PUSH
67509: LD_INT 4
67511: ARRAY
67512: PUSH
67513: LD_VAR 0 4
67517: PLUS
67518: PPUSH
67519: CALL_OW 1
67523: ST_TO_ADDR
// end ;
67524: GO 67443
67526: POP
67527: POP
// end ;
67528: LD_VAR 0 2
67532: RET
// export function Length ( array ) ; begin
67533: LD_INT 0
67535: PPUSH
// result := array + 0 ;
67536: LD_ADDR_VAR 0 2
67540: PUSH
67541: LD_VAR 0 1
67545: PUSH
67546: LD_INT 0
67548: PLUS
67549: ST_TO_ADDR
// end ;
67550: LD_VAR 0 2
67554: RET
// export function PrepareArray ( array ) ; begin
67555: LD_INT 0
67557: PPUSH
// result := array diff 0 ;
67558: LD_ADDR_VAR 0 2
67562: PUSH
67563: LD_VAR 0 1
67567: PUSH
67568: LD_INT 0
67570: DIFF
67571: ST_TO_ADDR
// if not result [ 1 ] then
67572: LD_VAR 0 2
67576: PUSH
67577: LD_INT 1
67579: ARRAY
67580: NOT
67581: IFFALSE 67601
// result := Delete ( result , 1 ) ;
67583: LD_ADDR_VAR 0 2
67587: PUSH
67588: LD_VAR 0 2
67592: PPUSH
67593: LD_INT 1
67595: PPUSH
67596: CALL_OW 3
67600: ST_TO_ADDR
// end ; end_of_file
67601: LD_VAR 0 2
67605: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
67606: LD_VAR 0 1
67610: PUSH
67611: LD_INT 200
67613: DOUBLE
67614: GREATEREQUAL
67615: IFFALSE 67623
67617: LD_INT 299
67619: DOUBLE
67620: LESSEQUAL
67621: IFTRUE 67625
67623: GO 67657
67625: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
67626: LD_VAR 0 1
67630: PPUSH
67631: LD_VAR 0 2
67635: PPUSH
67636: LD_VAR 0 3
67640: PPUSH
67641: LD_VAR 0 4
67645: PPUSH
67646: LD_VAR 0 5
67650: PPUSH
67651: CALL 22508 0 5
67655: GO 67734
67657: LD_INT 300
67659: DOUBLE
67660: GREATEREQUAL
67661: IFFALSE 67669
67663: LD_INT 399
67665: DOUBLE
67666: LESSEQUAL
67667: IFTRUE 67671
67669: GO 67733
67671: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
67672: LD_VAR 0 1
67676: PPUSH
67677: LD_VAR 0 2
67681: PPUSH
67682: LD_VAR 0 3
67686: PPUSH
67687: LD_VAR 0 4
67691: PPUSH
67692: LD_VAR 0 5
67696: PPUSH
67697: LD_VAR 0 6
67701: PPUSH
67702: LD_VAR 0 7
67706: PPUSH
67707: LD_VAR 0 8
67711: PPUSH
67712: LD_VAR 0 9
67716: PPUSH
67717: LD_VAR 0 10
67721: PPUSH
67722: LD_VAR 0 11
67726: PPUSH
67727: CALL 18841 0 11
67731: GO 67734
67733: POP
// end ;
67734: PPOPN 11
67736: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
67737: LD_VAR 0 1
67741: PPUSH
67742: LD_VAR 0 2
67746: PPUSH
67747: LD_VAR 0 3
67751: PPUSH
67752: LD_VAR 0 4
67756: PPUSH
67757: LD_VAR 0 5
67761: PPUSH
67762: CALL 22244 0 5
// end ; end_of_file
67766: PPOPN 5
67768: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
67769: LD_VAR 0 1
67773: PPUSH
67774: LD_VAR 0 2
67778: PPUSH
67779: LD_VAR 0 3
67783: PPUSH
67784: LD_VAR 0 4
67788: PPUSH
67789: LD_VAR 0 5
67793: PPUSH
67794: LD_VAR 0 6
67798: PPUSH
67799: CALL 6534 0 6
// end ;
67803: PPOPN 6
67805: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
67806: LD_INT 0
67808: PPUSH
// begin if not units then
67809: LD_VAR 0 1
67813: NOT
67814: IFFALSE 67818
// exit ;
67816: GO 67818
// end ;
67818: PPOPN 7
67820: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
67821: CALL 6505 0 0
// end ;
67825: PPOPN 1
67827: END
