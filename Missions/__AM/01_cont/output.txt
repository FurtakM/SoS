// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 32 0 0
// InitAmerican ;
  15: CALL 866 0 0
// InitRussian ;
  19: CALL 1114 0 0
// DebugMode ;
  23: CALL 160 0 0
// Action ;
  27: CALL 2673 0 0
// end ;
  31: END
// export debug ; export mission_prefix ; export active_russian_dialog , bobby_in_squad , powell_contact , macmilan_use_radio , cyrus_in_squad , active_road_patrol , macmilan_in_trap , meta_action , end_mission , bobby_saved , cyrus_saved , send_troops_to_forest , active_powell_dialog ; function Init ; begin
  32: LD_INT 0
  34: PPUSH
// mission_prefix := 01_ ;
  35: LD_ADDR_EXP 2
  39: PUSH
  40: LD_STRING 01_
  42: ST_TO_ADDR
// debug := 0 ;
  43: LD_ADDR_EXP 1
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// active_russian_dialog := false ;
  51: LD_ADDR_EXP 3
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// bobby_in_squad := false ;
  59: LD_ADDR_EXP 4
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// cyrus_in_squad := false ;
  67: LD_ADDR_EXP 7
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// powell_contact := false ;
  75: LD_ADDR_EXP 5
  79: PUSH
  80: LD_INT 0
  82: ST_TO_ADDR
// macmilan_use_radio := false ;
  83: LD_ADDR_EXP 6
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// active_road_patrol := false ;
  91: LD_ADDR_EXP 8
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// macmilan_in_trap := false ;
  99: LD_ADDR_EXP 9
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// meta_action := false ;
 107: LD_ADDR_EXP 10
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// end_mission := false ;
 115: LD_ADDR_EXP 11
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// bobby_saved := false ;
 123: LD_ADDR_EXP 12
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// cyrus_saved := false ;
 131: LD_ADDR_EXP 13
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// send_troops_to_forest := false ;
 139: LD_ADDR_EXP 14
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// active_powell_dialog := false ;
 147: LD_ADDR_EXP 15
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// end ;
 155: LD_VAR 0 1
 159: RET
// function DebugMode ; var i ; begin
 160: LD_INT 0
 162: PPUSH
 163: PPUSH
// if not debug then
 164: LD_EXP 1
 168: NOT
 169: IFFALSE 173
// exit ;
 171: GO 192
// Difficulty := 3 ;
 173: LD_ADDR_OWVAR 67
 177: PUSH
 178: LD_INT 3
 180: ST_TO_ADDR
// TurnFogOff ( ) ;
 181: CALL_OW 537
// FogOff ( 1 ) ;
 185: LD_INT 1
 187: PPUSH
 188: CALL_OW 344
// end ; end_of_file
 192: LD_VAR 0 1
 196: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 197: LD_INT 0
 199: PPUSH
 200: PPUSH
 201: PPUSH
// uc_side := GetSide ( b ) ;
 202: LD_ADDR_OWVAR 20
 206: PUSH
 207: LD_VAR 0 2
 211: PPUSH
 212: CALL_OW 255
 216: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 217: LD_ADDR_OWVAR 21
 221: PUSH
 222: LD_VAR 0 2
 226: PPUSH
 227: CALL_OW 248
 231: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 232: LD_INT 0
 234: PPUSH
 235: LD_INT 1
 237: PPUSH
 238: LD_VAR 0 1
 242: PPUSH
 243: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
 247: LD_ADDR_VAR 0 5
 251: PUSH
 252: LD_VAR 0 2
 256: PPUSH
 257: CALL_OW 254
 261: PUSH
 262: LD_INT 3
 264: MINUS
 265: ST_TO_ADDR
// if dir < 0 then
 266: LD_VAR 0 5
 270: PUSH
 271: LD_INT 0
 273: LESS
 274: IFFALSE 290
// dir := 6 + dir ;
 276: LD_ADDR_VAR 0 5
 280: PUSH
 281: LD_INT 6
 283: PUSH
 284: LD_VAR 0 5
 288: PLUS
 289: ST_TO_ADDR
// un := CreateHuman ;
 290: LD_ADDR_VAR 0 4
 294: PUSH
 295: CALL_OW 44
 299: ST_TO_ADDR
// SetDir ( un , dir ) ;
 300: LD_VAR 0 4
 304: PPUSH
 305: LD_VAR 0 5
 309: PPUSH
 310: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 314: LD_VAR 0 4
 318: PPUSH
 319: LD_VAR 0 2
 323: PPUSH
 324: CALL_OW 52
// end ;
 328: LD_VAR 0 3
 332: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 333: LD_INT 0
 335: PPUSH
// uc_side := side ;
 336: LD_ADDR_OWVAR 20
 340: PUSH
 341: LD_VAR 0 1
 345: ST_TO_ADDR
// uc_nation := nation ;
 346: LD_ADDR_OWVAR 21
 350: PUSH
 351: LD_VAR 0 2
 355: ST_TO_ADDR
// vc_chassis := chassis ;
 356: LD_ADDR_OWVAR 37
 360: PUSH
 361: LD_VAR 0 3
 365: ST_TO_ADDR
// vc_engine := engine ;
 366: LD_ADDR_OWVAR 39
 370: PUSH
 371: LD_VAR 0 4
 375: ST_TO_ADDR
// vc_control := control ;
 376: LD_ADDR_OWVAR 38
 380: PUSH
 381: LD_VAR 0 5
 385: ST_TO_ADDR
// vc_weapon := weapon ;
 386: LD_ADDR_OWVAR 40
 390: PUSH
 391: LD_VAR 0 6
 395: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 396: LD_ADDR_OWVAR 41
 400: PUSH
 401: LD_VAR 0 7
 405: ST_TO_ADDR
// result := CreateVehicle ;
 406: LD_ADDR_VAR 0 8
 410: PUSH
 411: CALL_OW 45
 415: ST_TO_ADDR
// end ;
 416: LD_VAR 0 8
 420: RET
// export function ComPatrol ( unit , mode , pause , coords ) ; var i ; begin
 421: LD_INT 0
 423: PPUSH
 424: PPUSH
// while ( active_road_patrol ) do
 425: LD_EXP 8
 429: IFFALSE 783
// begin Wait ( 0 0$01 ) ;
 431: LD_INT 35
 433: PPUSH
 434: CALL_OW 67
// if not unit then
 438: LD_VAR 0 1
 442: NOT
 443: IFFALSE 447
// exit ;
 445: GO 783
// if mode = road then
 447: LD_VAR 0 2
 451: PUSH
 452: LD_STRING road
 454: EQUAL
 455: IFFALSE 511
// if GetFuel ( unit ) < 50 and not See ( 1 , unit ) and not HasTask ( unit ) then
 457: LD_VAR 0 1
 461: PPUSH
 462: CALL_OW 261
 466: PUSH
 467: LD_INT 50
 469: LESS
 470: PUSH
 471: LD_INT 1
 473: PPUSH
 474: LD_VAR 0 1
 478: PPUSH
 479: CALL_OW 292
 483: NOT
 484: AND
 485: PUSH
 486: LD_VAR 0 1
 490: PPUSH
 491: CALL_OW 314
 495: NOT
 496: AND
 497: IFFALSE 511
// SetFuel ( unit , 100 ) ;
 499: LD_VAR 0 1
 503: PPUSH
 504: LD_INT 100
 506: PPUSH
 507: CALL_OW 240
// if mode = forest then
 511: LD_VAR 0 2
 515: PUSH
 516: LD_STRING forest
 518: EQUAL
 519: IFFALSE 599
// if GetLives ( unit ) < 600 then
 521: LD_VAR 0 1
 525: PPUSH
 526: CALL_OW 256
 530: PUSH
 531: LD_INT 600
 533: LESS
 534: IFFALSE 599
// begin ComMoveXY ( unit , 42 , 3 ) ;
 536: LD_VAR 0 1
 540: PPUSH
 541: LD_INT 42
 543: PPUSH
 544: LD_INT 3
 546: PPUSH
 547: CALL_OW 111
// SetRememberedX ( unit , GetX ( unit ) ) ;
 551: LD_VAR 0 1
 555: PPUSH
 556: LD_VAR 0 1
 560: PPUSH
 561: CALL_OW 250
 565: PPUSH
 566: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
 570: LD_VAR 0 1
 574: PPUSH
 575: LD_VAR 0 1
 579: PPUSH
 580: CALL_OW 251
 584: PPUSH
 585: CALL_OW 232
// send_troops_to_forest := true ;
 589: LD_ADDR_EXP 14
 593: PUSH
 594: LD_INT 1
 596: ST_TO_ADDR
// break ;
 597: GO 783
// end ; if not HasTask ( unit ) then
 599: LD_VAR 0 1
 603: PPUSH
 604: CALL_OW 314
 608: NOT
 609: IFFALSE 781
// begin for i = 1 to coords do
 611: LD_ADDR_VAR 0 6
 615: PUSH
 616: DOUBLE
 617: LD_INT 1
 619: DEC
 620: ST_TO_ADDR
 621: LD_VAR 0 4
 625: PUSH
 626: FOR_TO
 627: IFFALSE 694
// begin AddComAgressiveMove ( unit , coords [ i ] , coords [ i + 1 ] ) ;
 629: LD_VAR 0 1
 633: PPUSH
 634: LD_VAR 0 4
 638: PUSH
 639: LD_VAR 0 6
 643: ARRAY
 644: PPUSH
 645: LD_VAR 0 4
 649: PUSH
 650: LD_VAR 0 6
 654: PUSH
 655: LD_INT 1
 657: PLUS
 658: ARRAY
 659: PPUSH
 660: CALL_OW 174
// AddComWait ( unit , pause ) ;
 664: LD_VAR 0 1
 668: PPUSH
 669: LD_VAR 0 3
 673: PPUSH
 674: CALL_OW 202
// i := i + 1 ;
 678: LD_ADDR_VAR 0 6
 682: PUSH
 683: LD_VAR 0 6
 687: PUSH
 688: LD_INT 1
 690: PLUS
 691: ST_TO_ADDR
// end ;
 692: GO 626
 694: POP
 695: POP
// for i = coords downto 1 do
 696: LD_ADDR_VAR 0 6
 700: PUSH
 701: DOUBLE
 702: LD_VAR 0 4
 706: INC
 707: ST_TO_ADDR
 708: LD_INT 1
 710: PUSH
 711: FOR_DOWNTO
 712: IFFALSE 779
// begin AddComAgressiveMove ( unit , coords [ i - 1 ] , coords [ i ] ) ;
 714: LD_VAR 0 1
 718: PPUSH
 719: LD_VAR 0 4
 723: PUSH
 724: LD_VAR 0 6
 728: PUSH
 729: LD_INT 1
 731: MINUS
 732: ARRAY
 733: PPUSH
 734: LD_VAR 0 4
 738: PUSH
 739: LD_VAR 0 6
 743: ARRAY
 744: PPUSH
 745: CALL_OW 174
// AddComWait ( unit , pause ) ;
 749: LD_VAR 0 1
 753: PPUSH
 754: LD_VAR 0 3
 758: PPUSH
 759: CALL_OW 202
// i := i - 1 ;
 763: LD_ADDR_VAR 0 6
 767: PUSH
 768: LD_VAR 0 6
 772: PUSH
 773: LD_INT 1
 775: MINUS
 776: ST_TO_ADDR
// end ;
 777: GO 711
 779: POP
 780: POP
// end ; end ;
 781: GO 425
// end ;
 783: LD_VAR 0 5
 787: RET
// export function DebugSay ( dialog ) ; var speaker ; begin
 788: LD_INT 0
 790: PPUSH
 791: PPUSH
// uc_nation := 1 ;
 792: LD_ADDR_OWVAR 21
 796: PUSH
 797: LD_INT 1
 799: ST_TO_ADDR
// uc_side := 0 ;
 800: LD_ADDR_OWVAR 20
 804: PUSH
 805: LD_INT 0
 807: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
 808: LD_INT 0
 810: PPUSH
 811: LD_INT 1
 813: PPUSH
 814: LD_INT 0
 816: PPUSH
 817: CALL_OW 380
// hc_name := speaker ;
 821: LD_ADDR_OWVAR 26
 825: PUSH
 826: LD_STRING speaker
 828: ST_TO_ADDR
// hc_gallery :=  ;
 829: LD_ADDR_OWVAR 33
 833: PUSH
 834: LD_STRING 
 836: ST_TO_ADDR
// speaker := CreateHuman ;
 837: LD_ADDR_VAR 0 3
 841: PUSH
 842: CALL_OW 44
 846: ST_TO_ADDR
// Say ( speaker , dialog ) ;
 847: LD_VAR 0 3
 851: PPUSH
 852: LD_VAR 0 1
 856: PPUSH
 857: CALL_OW 88
// end ; end_of_file
 861: LD_VAR 0 2
 865: RET
// export JMM , Bobby , Cyrus , Powell , fakePokryshkin ; export function InitAmerican ; begin
 866: LD_INT 0
 868: PPUSH
// uc_nation := 1 ;
 869: LD_ADDR_OWVAR 21
 873: PUSH
 874: LD_INT 1
 876: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , false ,  ) ;
 877: LD_ADDR_EXP 16
 881: PUSH
 882: LD_STRING JMM
 884: PPUSH
 885: LD_INT 0
 887: PPUSH
 888: LD_STRING 
 890: PPUSH
 891: CALL 23722 0 3
 895: ST_TO_ADDR
// uc_side := 4 ;
 896: LD_ADDR_OWVAR 20
 900: PUSH
 901: LD_INT 4
 903: ST_TO_ADDR
// hc_gallery := us ;
 904: LD_ADDR_OWVAR 33
 908: PUSH
 909: LD_STRING us
 911: ST_TO_ADDR
// hc_face_number := 7 ;
 912: LD_ADDR_OWVAR 34
 916: PUSH
 917: LD_INT 7
 919: ST_TO_ADDR
// hc_sex := sex_male ;
 920: LD_ADDR_OWVAR 27
 924: PUSH
 925: LD_INT 1
 927: ST_TO_ADDR
// hc_name := . ;
 928: LD_ADDR_OWVAR 26
 932: PUSH
 933: LD_STRING .
 935: ST_TO_ADDR
// hc_class := 1 ;
 936: LD_ADDR_OWVAR 28
 940: PUSH
 941: LD_INT 1
 943: ST_TO_ADDR
// Powell := CreateHuman ;
 944: LD_ADDR_EXP 19
 948: PUSH
 949: CALL_OW 44
 953: ST_TO_ADDR
// hc_name := . ;
 954: LD_ADDR_OWVAR 26
 958: PUSH
 959: LD_STRING .
 961: ST_TO_ADDR
// hc_gallery := ru ;
 962: LD_ADDR_OWVAR 33
 966: PUSH
 967: LD_STRING ru
 969: ST_TO_ADDR
// hc_face_number := 4 ;
 970: LD_ADDR_OWVAR 34
 974: PUSH
 975: LD_INT 4
 977: ST_TO_ADDR
// hc_sex := sex_male ;
 978: LD_ADDR_OWVAR 27
 982: PUSH
 983: LD_INT 1
 985: ST_TO_ADDR
// fakePokryshkin := CreateHuman ;
 986: LD_ADDR_EXP 20
 990: PUSH
 991: CALL_OW 44
 995: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , false ,  ) ;
 996: LD_ADDR_EXP 17
1000: PUSH
1001: LD_STRING Bobby
1003: PPUSH
1004: LD_INT 0
1006: PPUSH
1007: LD_STRING 
1009: PPUSH
1010: CALL 23722 0 3
1014: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , false ,  ) ;
1015: LD_ADDR_EXP 18
1019: PUSH
1020: LD_STRING Cyrus
1022: PPUSH
1023: LD_INT 0
1025: PPUSH
1026: LD_STRING 
1028: PPUSH
1029: CALL 23722 0 3
1033: ST_TO_ADDR
// case Difficulty of 1 :
1034: LD_OWVAR 67
1038: PUSH
1039: LD_INT 1
1041: DOUBLE
1042: EQUAL
1043: IFTRUE 1047
1045: GO 1062
1047: POP
// SetLives ( Bobby , 500 ) ; 2 :
1048: LD_EXP 17
1052: PPUSH
1053: LD_INT 500
1055: PPUSH
1056: CALL_OW 234
1060: GO 1109
1062: LD_INT 2
1064: DOUBLE
1065: EQUAL
1066: IFTRUE 1070
1068: GO 1085
1070: POP
// SetLives ( Bobby , 460 ) ; 3 :
1071: LD_EXP 17
1075: PPUSH
1076: LD_INT 460
1078: PPUSH
1079: CALL_OW 234
1083: GO 1109
1085: LD_INT 3
1087: DOUBLE
1088: EQUAL
1089: IFTRUE 1093
1091: GO 1108
1093: POP
// SetLives ( Bobby , 420 ) ; end ;
1094: LD_EXP 17
1098: PPUSH
1099: LD_INT 420
1101: PPUSH
1102: CALL_OW 234
1106: GO 1109
1108: POP
// end ; end_of_file
1109: LD_VAR 0 1
1113: RET
// export russian_troops_1 , russian_troops_2 , russian_patrol_tanks , russian_meta_guards , russian_patrol_forest ; export Pokryshkin ; export function InitRussian ; var skill , i , un ; begin
1114: LD_INT 0
1116: PPUSH
1117: PPUSH
1118: PPUSH
1119: PPUSH
// skill := [ 1 , 2 , 3 ] [ Difficulty ] ;
1120: LD_ADDR_VAR 0 2
1124: PUSH
1125: LD_INT 1
1127: PUSH
1128: LD_INT 2
1130: PUSH
1131: LD_INT 3
1133: PUSH
1134: EMPTY
1135: LIST
1136: LIST
1137: LIST
1138: PUSH
1139: LD_OWVAR 67
1143: ARRAY
1144: ST_TO_ADDR
// uc_side := 3 ;
1145: LD_ADDR_OWVAR 20
1149: PUSH
1150: LD_INT 3
1152: ST_TO_ADDR
// uc_nation := 3 ;
1153: LD_ADDR_OWVAR 21
1157: PUSH
1158: LD_INT 3
1160: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
1161: LD_ADDR_EXP 26
1165: PUSH
1166: LD_STRING Pokryshkin
1168: PPUSH
1169: LD_INT 0
1171: PPUSH
1172: LD_STRING 
1174: PPUSH
1175: CALL 23722 0 3
1179: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 44 , 5 , false ) ;
1180: LD_EXP 26
1184: PPUSH
1185: LD_INT 44
1187: PPUSH
1188: LD_INT 5
1190: PPUSH
1191: LD_INT 0
1193: PPUSH
1194: CALL_OW 48
// hc_importance := 0 ;
1198: LD_ADDR_OWVAR 32
1202: PUSH
1203: LD_INT 0
1205: ST_TO_ADDR
// hc_gallery :=  ;
1206: LD_ADDR_OWVAR 33
1210: PUSH
1211: LD_STRING 
1213: ST_TO_ADDR
// hc_name :=  ;
1214: LD_ADDR_OWVAR 26
1218: PUSH
1219: LD_STRING 
1221: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1222: LD_INT 1
1224: PPUSH
1225: LD_INT 1
1227: PPUSH
1228: LD_VAR 0 2
1232: PPUSH
1233: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1237: LD_ADDR_OWVAR 33
1241: PUSH
1242: LD_STRING SecondCharsGal
1244: ST_TO_ADDR
// hc_face_number := 69 ;
1245: LD_ADDR_OWVAR 34
1249: PUSH
1250: LD_INT 69
1252: ST_TO_ADDR
// hc_sex := sex_male ;
1253: LD_ADDR_OWVAR 27
1257: PUSH
1258: LD_INT 1
1260: ST_TO_ADDR
// hc_name := Ilja Ivanov ;
1261: LD_ADDR_OWVAR 26
1265: PUSH
1266: LD_STRING Ilja Ivanov
1268: ST_TO_ADDR
// un := CreateHuman ;
1269: LD_ADDR_VAR 0 4
1273: PUSH
1274: CALL_OW 44
1278: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 1 , un ) ;
1279: LD_ADDR_EXP 21
1283: PUSH
1284: LD_EXP 21
1288: PPUSH
1289: LD_INT 1
1291: PPUSH
1292: LD_VAR 0 4
1296: PPUSH
1297: CALL_OW 2
1301: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1302: LD_VAR 0 4
1306: PPUSH
1307: LD_INT 3
1309: PPUSH
1310: LD_INT 0
1312: PPUSH
1313: CALL_OW 49
// PrepareHuman ( sex_male , 1 , skill ) ;
1317: LD_INT 1
1319: PPUSH
1320: LD_INT 1
1322: PPUSH
1323: LD_VAR 0 2
1327: PPUSH
1328: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1332: LD_ADDR_OWVAR 33
1336: PUSH
1337: LD_STRING SecondCharsGal
1339: ST_TO_ADDR
// hc_face_number := 70 ;
1340: LD_ADDR_OWVAR 34
1344: PUSH
1345: LD_INT 70
1347: ST_TO_ADDR
// hc_name := Pavel Starczy ;
1348: LD_ADDR_OWVAR 26
1352: PUSH
1353: LD_STRING Pavel Starczy
1355: ST_TO_ADDR
// un := CreateHuman ;
1356: LD_ADDR_VAR 0 4
1360: PUSH
1361: CALL_OW 44
1365: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 2 , un ) ;
1366: LD_ADDR_EXP 21
1370: PUSH
1371: LD_EXP 21
1375: PPUSH
1376: LD_INT 2
1378: PPUSH
1379: LD_VAR 0 4
1383: PPUSH
1384: CALL_OW 2
1388: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1389: LD_VAR 0 4
1393: PPUSH
1394: LD_INT 3
1396: PPUSH
1397: LD_INT 0
1399: PPUSH
1400: CALL_OW 49
// InitHc ;
1404: CALL_OW 19
// for i = 1 to 7 do
1408: LD_ADDR_VAR 0 3
1412: PUSH
1413: DOUBLE
1414: LD_INT 1
1416: DEC
1417: ST_TO_ADDR
1418: LD_INT 7
1420: PUSH
1421: FOR_TO
1422: IFFALSE 1573
// begin PrepareHuman ( false , 1 , skill ) ;
1424: LD_INT 0
1426: PPUSH
1427: LD_INT 1
1429: PPUSH
1430: LD_VAR 0 2
1434: PPUSH
1435: CALL_OW 380
// un := CreateHuman ;
1439: LD_ADDR_VAR 0 4
1443: PUSH
1444: CALL_OW 44
1448: ST_TO_ADDR
// if i mod 2 = 0 then
1449: LD_VAR 0 3
1453: PUSH
1454: LD_INT 2
1456: MOD
1457: PUSH
1458: LD_INT 0
1460: EQUAL
1461: IFFALSE 1518
// begin russian_troops_1 := Insert ( russian_troops_1 , russian_troops_1 + 1 , un ) ;
1463: LD_ADDR_EXP 21
1467: PUSH
1468: LD_EXP 21
1472: PPUSH
1473: LD_EXP 21
1477: PUSH
1478: LD_INT 1
1480: PLUS
1481: PPUSH
1482: LD_VAR 0 4
1486: PPUSH
1487: CALL_OW 2
1491: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1492: LD_VAR 0 4
1496: PPUSH
1497: LD_INT 3
1499: PPUSH
1500: LD_INT 0
1502: PPUSH
1503: CALL_OW 49
// ComHold ( un ) ;
1507: LD_VAR 0 4
1511: PPUSH
1512: CALL_OW 140
// end else
1516: GO 1571
// begin russian_troops_2 := Insert ( russian_troops_2 , russian_troops_2 + 1 , un ) ;
1518: LD_ADDR_EXP 22
1522: PUSH
1523: LD_EXP 22
1527: PPUSH
1528: LD_EXP 22
1532: PUSH
1533: LD_INT 1
1535: PLUS
1536: PPUSH
1537: LD_VAR 0 4
1541: PPUSH
1542: CALL_OW 2
1546: ST_TO_ADDR
// PlaceUnitArea ( un , guard_south , false ) ;
1547: LD_VAR 0 4
1551: PPUSH
1552: LD_INT 4
1554: PPUSH
1555: LD_INT 0
1557: PPUSH
1558: CALL_OW 49
// ComHold ( un ) ;
1562: LD_VAR 0 4
1566: PPUSH
1567: CALL_OW 140
// end ; end ;
1571: GO 1421
1573: POP
1574: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) do
1575: LD_ADDR_VAR 0 3
1579: PUSH
1580: LD_INT 22
1582: PUSH
1583: LD_INT 3
1585: PUSH
1586: EMPTY
1587: LIST
1588: LIST
1589: PUSH
1590: LD_INT 30
1592: PUSH
1593: LD_INT 31
1595: PUSH
1596: EMPTY
1597: LIST
1598: LIST
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: PPUSH
1604: CALL_OW 69
1608: PUSH
1609: FOR_IN
1610: IFFALSE 1628
// PrepareSolBun ( skill , i ) ;
1612: LD_VAR 0 2
1616: PPUSH
1617: LD_VAR 0 3
1621: PPUSH
1622: CALL 197 0 2
1626: GO 1609
1628: POP
1629: POP
// for i = 1 to 2 do
1630: LD_ADDR_VAR 0 3
1634: PUSH
1635: DOUBLE
1636: LD_INT 1
1638: DEC
1639: ST_TO_ADDR
1640: LD_INT 2
1642: PUSH
1643: FOR_TO
1644: IFFALSE 1775
// begin un := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1646: LD_ADDR_VAR 0 4
1650: PUSH
1651: LD_INT 3
1653: PPUSH
1654: LD_INT 3
1656: PPUSH
1657: LD_INT 22
1659: PPUSH
1660: LD_INT 1
1662: PPUSH
1663: LD_INT 1
1665: PPUSH
1666: LD_INT 42
1668: PPUSH
1669: LD_INT 100
1671: PPUSH
1672: CALL 333 0 7
1676: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
1677: LD_INT 0
1679: PPUSH
1680: LD_INT 3
1682: PPUSH
1683: LD_VAR 0 2
1687: PPUSH
1688: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1692: CALL_OW 44
1696: PPUSH
1697: LD_VAR 0 4
1701: PPUSH
1702: CALL_OW 52
// PlaceUnitXY ( un , [ 23 , 131 ] [ i ] , [ 14 , 87 ] [ i ] , false ) ;
1706: LD_VAR 0 4
1710: PPUSH
1711: LD_INT 23
1713: PUSH
1714: LD_INT 131
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: PUSH
1721: LD_VAR 0 3
1725: ARRAY
1726: PPUSH
1727: LD_INT 14
1729: PUSH
1730: LD_INT 87
1732: PUSH
1733: EMPTY
1734: LIST
1735: LIST
1736: PUSH
1737: LD_VAR 0 3
1741: ARRAY
1742: PPUSH
1743: LD_INT 0
1745: PPUSH
1746: CALL_OW 48
// russian_patrol_tanks := Insert ( russian_patrol_tanks , 1 , un ) ;
1750: LD_ADDR_EXP 23
1754: PUSH
1755: LD_EXP 23
1759: PPUSH
1760: LD_INT 1
1762: PPUSH
1763: LD_VAR 0 4
1767: PPUSH
1768: CALL_OW 2
1772: ST_TO_ADDR
// end ;
1773: GO 1643
1775: POP
1776: POP
// for i = 1 to 2 do
1777: LD_ADDR_VAR 0 3
1781: PUSH
1782: DOUBLE
1783: LD_INT 1
1785: DEC
1786: ST_TO_ADDR
1787: LD_INT 2
1789: PUSH
1790: FOR_TO
1791: IFFALSE 1882
// begin PrepareHuman ( [ sex_female , sex_male , sex_male ] [ i ] , 1 , 1 ) ;
1793: LD_INT 2
1795: PUSH
1796: LD_INT 1
1798: PUSH
1799: LD_INT 1
1801: PUSH
1802: EMPTY
1803: LIST
1804: LIST
1805: LIST
1806: PUSH
1807: LD_VAR 0 3
1811: ARRAY
1812: PPUSH
1813: LD_INT 1
1815: PPUSH
1816: LD_INT 1
1818: PPUSH
1819: CALL_OW 380
// un := CreateHuman ;
1823: LD_ADDR_VAR 0 4
1827: PUSH
1828: CALL_OW 44
1832: ST_TO_ADDR
// russian_meta_guards := Insert ( russian_meta_guards , 1 , un ) ;
1833: LD_ADDR_EXP 24
1837: PUSH
1838: LD_EXP 24
1842: PPUSH
1843: LD_INT 1
1845: PPUSH
1846: LD_VAR 0 4
1850: PPUSH
1851: CALL_OW 2
1855: ST_TO_ADDR
// PlaceUnitArea ( un , exitArea , false ) ;
1856: LD_VAR 0 4
1860: PPUSH
1861: LD_INT 10
1863: PPUSH
1864: LD_INT 0
1866: PPUSH
1867: CALL_OW 49
// ComHold ( un ) ;
1871: LD_VAR 0 4
1875: PPUSH
1876: CALL_OW 140
// end ;
1880: GO 1790
1882: POP
1883: POP
// if Difficulty < 3 then
1884: LD_OWVAR 67
1888: PUSH
1889: LD_INT 3
1891: LESS
1892: IFFALSE 1896
// exit ;
1894: GO 1939
// PrepareHuman ( false , 1 , skill ) ;
1896: LD_INT 0
1898: PPUSH
1899: LD_INT 1
1901: PPUSH
1902: LD_VAR 0 2
1906: PPUSH
1907: CALL_OW 380
// russian_patrol_forest := CreateHuman ;
1911: LD_ADDR_EXP 25
1915: PUSH
1916: CALL_OW 44
1920: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_forest , 82 , 2 , false ) ;
1921: LD_EXP 25
1925: PPUSH
1926: LD_INT 82
1928: PPUSH
1929: LD_INT 2
1931: PPUSH
1932: LD_INT 0
1934: PPUSH
1935: CALL_OW 48
// end ;
1939: LD_VAR 0 1
1943: RET
// every 0 0$01 trigger active_road_patrol do
1944: LD_EXP 8
1948: IFFALSE 2014
1950: GO 1952
1952: DISABLE
// ComPatrol ( russian_patrol_tanks [ 1 ] , road , 0 0$02 , [ 131 , 87 , 107 , 75 , 107 , 66 , 114 , 61 , 107 , 34 ] ) ;
1953: LD_EXP 23
1957: PUSH
1958: LD_INT 1
1960: ARRAY
1961: PPUSH
1962: LD_STRING road
1964: PPUSH
1965: LD_INT 70
1967: PPUSH
1968: LD_INT 131
1970: PUSH
1971: LD_INT 87
1973: PUSH
1974: LD_INT 107
1976: PUSH
1977: LD_INT 75
1979: PUSH
1980: LD_INT 107
1982: PUSH
1983: LD_INT 66
1985: PUSH
1986: LD_INT 114
1988: PUSH
1989: LD_INT 61
1991: PUSH
1992: LD_INT 107
1994: PUSH
1995: LD_INT 34
1997: PUSH
1998: EMPTY
1999: LIST
2000: LIST
2001: LIST
2002: LIST
2003: LIST
2004: LIST
2005: LIST
2006: LIST
2007: LIST
2008: LIST
2009: PPUSH
2010: CALL 421 0 4
2014: END
// every 0 0$01 trigger active_road_patrol do
2015: LD_EXP 8
2019: IFFALSE 2077
2021: GO 2023
2023: DISABLE
// ComPatrol ( russian_patrol_tanks [ 2 ] , road , 0 0$02 , [ 21 , 12 , 37 , 30 , 65 , 62 , 107 , 76 ] ) ;
2024: LD_EXP 23
2028: PUSH
2029: LD_INT 2
2031: ARRAY
2032: PPUSH
2033: LD_STRING road
2035: PPUSH
2036: LD_INT 70
2038: PPUSH
2039: LD_INT 21
2041: PUSH
2042: LD_INT 12
2044: PUSH
2045: LD_INT 37
2047: PUSH
2048: LD_INT 30
2050: PUSH
2051: LD_INT 65
2053: PUSH
2054: LD_INT 62
2056: PUSH
2057: LD_INT 107
2059: PUSH
2060: LD_INT 76
2062: PUSH
2063: EMPTY
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: LIST
2070: LIST
2071: LIST
2072: PPUSH
2073: CALL 421 0 4
2077: END
// every 0 0$01 trigger IsOk ( russian_patrol_forest ) do
2078: LD_EXP 25
2082: PPUSH
2083: CALL_OW 302
2087: IFFALSE 2149
2089: GO 2091
2091: DISABLE
// ComPatrol ( russian_patrol_forest , forest , 0 0$01 , [ 52 , 15 , 81 , 9 , 120 , 52 , 135 , 80 , 122 , 95 ] ) ;
2092: LD_EXP 25
2096: PPUSH
2097: LD_STRING forest
2099: PPUSH
2100: LD_INT 35
2102: PPUSH
2103: LD_INT 52
2105: PUSH
2106: LD_INT 15
2108: PUSH
2109: LD_INT 81
2111: PUSH
2112: LD_INT 9
2114: PUSH
2115: LD_INT 120
2117: PUSH
2118: LD_INT 52
2120: PUSH
2121: LD_INT 135
2123: PUSH
2124: LD_INT 80
2126: PUSH
2127: LD_INT 122
2129: PUSH
2130: LD_INT 95
2132: PUSH
2133: EMPTY
2134: LIST
2135: LIST
2136: LIST
2137: LIST
2138: LIST
2139: LIST
2140: LIST
2141: LIST
2142: LIST
2143: LIST
2144: PPUSH
2145: CALL 421 0 4
2149: END
// every 0 0$01 trigger macmilan_use_radio do
2150: LD_EXP 6
2154: IFFALSE 2215
2156: GO 2158
2158: DISABLE
// begin active_road_patrol := false ;
2159: LD_ADDR_EXP 8
2163: PUSH
2164: LD_INT 0
2166: ST_TO_ADDR
// ComStop ( russian_patrol_tanks ) ;
2167: LD_EXP 23
2171: PPUSH
2172: CALL_OW 141
// AddComAgressiveMove ( russian_patrol_tanks , 72 , 41 ) ;
2176: LD_EXP 23
2180: PPUSH
2181: LD_INT 72
2183: PPUSH
2184: LD_INT 41
2186: PPUSH
2187: CALL_OW 174
// ComExitBuilding ( russian_troops_2 ) ;
2191: LD_EXP 22
2195: PPUSH
2196: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , 72 , 41 ) ;
2200: LD_EXP 22
2204: PPUSH
2205: LD_INT 72
2207: PPUSH
2208: LD_INT 41
2210: PPUSH
2211: CALL_OW 174
// end ;
2215: END
// every 0 0$03 trigger FilterUnitsInArea ( def_south , [ f_side , 1 ] ) do var un ;
2216: LD_INT 9
2218: PPUSH
2219: LD_INT 22
2221: PUSH
2222: LD_INT 1
2224: PUSH
2225: EMPTY
2226: LIST
2227: LIST
2228: PPUSH
2229: CALL_OW 70
2233: IFFALSE 2307
2235: GO 2237
2237: DISABLE
2238: LD_INT 0
2240: PPUSH
// begin enable ;
2241: ENABLE
// un := FilterUnitsInArea ( def_south , [ f_side , 1 ] ) [ 1 ] ;
2242: LD_ADDR_VAR 0 1
2246: PUSH
2247: LD_INT 9
2249: PPUSH
2250: LD_INT 22
2252: PUSH
2253: LD_INT 1
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: PPUSH
2260: CALL_OW 70
2264: PUSH
2265: LD_INT 1
2267: ARRAY
2268: ST_TO_ADDR
// ComExitBuilding ( russian_troops_2 ) ;
2269: LD_EXP 22
2273: PPUSH
2274: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , GetX ( un ) , GetY ( un ) ) ;
2278: LD_EXP 22
2282: PPUSH
2283: LD_VAR 0 1
2287: PPUSH
2288: CALL_OW 250
2292: PPUSH
2293: LD_VAR 0 1
2297: PPUSH
2298: CALL_OW 251
2302: PPUSH
2303: CALL_OW 174
// end ;
2307: PPOPN 1
2309: END
// every 0 0$01 trigger ( GetLives ( russian_patrol_tanks [ 1 ] ) < 999 or GetLives ( russian_patrol_tanks [ 2 ] ) < 999 ) and See ( 3 , JMM ) do
2310: LD_EXP 23
2314: PUSH
2315: LD_INT 1
2317: ARRAY
2318: PPUSH
2319: CALL_OW 256
2323: PUSH
2324: LD_INT 999
2326: LESS
2327: PUSH
2328: LD_EXP 23
2332: PUSH
2333: LD_INT 2
2335: ARRAY
2336: PPUSH
2337: CALL_OW 256
2341: PUSH
2342: LD_INT 999
2344: LESS
2345: OR
2346: PUSH
2347: LD_INT 3
2349: PPUSH
2350: LD_EXP 16
2354: PPUSH
2355: CALL_OW 292
2359: AND
2360: IFFALSE 2387
2362: GO 2364
2364: DISABLE
// begin active_road_patrol := false ;
2365: LD_ADDR_EXP 8
2369: PUSH
2370: LD_INT 0
2372: ST_TO_ADDR
// ComAttackUnit ( russian_patrol_tanks , JMM ) ;
2373: LD_EXP 23
2377: PPUSH
2378: LD_EXP 16
2382: PPUSH
2383: CALL_OW 115
// end ;
2387: END
// every 0 0$01 trigger macmilan_in_trap do
2388: LD_EXP 9
2392: IFFALSE 2438
2394: GO 2396
2396: DISABLE
// begin ComExitBuilding ( russian_troops_2 ) ;
2397: LD_EXP 22
2401: PPUSH
2402: CALL_OW 122
// ComAttackUnit ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , JMM ) ;
2406: LD_EXP 21
2410: PUSH
2411: LD_EXP 22
2415: ADD
2416: PUSH
2417: LD_EXP 26
2421: ADD
2422: PUSH
2423: LD_EXP 23
2427: ADD
2428: PPUSH
2429: LD_EXP 16
2433: PPUSH
2434: CALL_OW 115
// end ;
2438: END
// every 0 0$01 trigger meta_action do
2439: LD_EXP 10
2443: IFFALSE 2489
2445: GO 2447
2447: DISABLE
// begin active_road_patrol := false ;
2448: LD_ADDR_EXP 8
2452: PUSH
2453: LD_INT 0
2455: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , 93 , 1 ) ;
2456: LD_EXP 21
2460: PUSH
2461: LD_EXP 22
2465: ADD
2466: PUSH
2467: LD_EXP 26
2471: ADD
2472: PUSH
2473: LD_EXP 23
2477: ADD
2478: PPUSH
2479: LD_INT 93
2481: PPUSH
2482: LD_INT 1
2484: PPUSH
2485: CALL_OW 114
// end ;
2489: END
// every 0 0$1 trigger GetLives ( Pokryshkin ) < 1000 do
2490: LD_EXP 26
2494: PPUSH
2495: CALL_OW 256
2499: PUSH
2500: LD_INT 1000
2502: LESS
2503: IFFALSE 2554
2505: GO 2507
2507: DISABLE
// begin enable ;
2508: ENABLE
// if HexInfo ( 18 , 1 ) = Pokryshkin then
2509: LD_INT 18
2511: PPUSH
2512: LD_INT 1
2514: PPUSH
2515: CALL_OW 428
2519: PUSH
2520: LD_EXP 26
2524: EQUAL
2525: IFFALSE 2539
// begin RemoveUnit ( Pokryshkin ) ;
2527: LD_EXP 26
2531: PPUSH
2532: CALL_OW 64
// disable ;
2536: DISABLE
// end else
2537: GO 2554
// ComMoveXY ( Pokryshkin , 18 , 1 ) ;
2539: LD_EXP 26
2543: PPUSH
2544: LD_INT 18
2546: PPUSH
2547: LD_INT 1
2549: PPUSH
2550: CALL_OW 111
// end ;
2554: END
// every 0 0$20 trigger send_troops_to_forest do
2555: LD_EXP 14
2559: IFFALSE 2613
2561: GO 2563
2563: DISABLE
// begin if not IsOk ( russian_patrol_forest ) then
2564: LD_EXP 25
2568: PPUSH
2569: CALL_OW 302
2573: NOT
2574: IFFALSE 2578
// exit ;
2576: GO 2613
// ComAgressiveMove ( russian_troops_1 ^ Pokryshkin , GetRememberedX ( russian_patrol_forest ) , GetRememberedY ( russian_patrol_forest ) ) ;
2578: LD_EXP 21
2582: PUSH
2583: LD_EXP 26
2587: ADD
2588: PPUSH
2589: LD_EXP 25
2593: PPUSH
2594: CALL_OW 252
2598: PPUSH
2599: LD_EXP 25
2603: PPUSH
2604: CALL_OW 253
2608: PPUSH
2609: CALL_OW 114
// end ;
2613: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) = 3 then
2614: LD_VAR 0 1
2618: PPUSH
2619: CALL_OW 255
2623: PUSH
2624: LD_INT 3
2626: EQUAL
2627: IFFALSE 2670
// begin wait ( 11 ) ;
2629: LD_INT 11
2631: PPUSH
2632: CALL_OW 67
// ComEnterUnit ( driver , NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_depot ] ) , driver ) ) ;
2636: LD_VAR 0 1
2640: PPUSH
2641: LD_INT 30
2643: PUSH
2644: LD_INT 0
2646: PUSH
2647: EMPTY
2648: LIST
2649: LIST
2650: PPUSH
2651: CALL_OW 69
2655: PPUSH
2656: LD_VAR 0 1
2660: PPUSH
2661: CALL_OW 74
2665: PPUSH
2666: CALL_OW 120
// end ; end ; end_of_file
2670: PPOPN 4
2672: END
// export function Action ; var i ; begin
2673: LD_INT 0
2675: PPUSH
2676: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
2677: LD_ADDR_VAR 0 2
2681: PUSH
2682: LD_INT 22
2684: PUSH
2685: LD_INT 3
2687: PUSH
2688: EMPTY
2689: LIST
2690: LIST
2691: PUSH
2692: LD_INT 25
2694: PUSH
2695: LD_INT 1
2697: PUSH
2698: EMPTY
2699: LIST
2700: LIST
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: PPUSH
2706: CALL_OW 69
2710: PUSH
2711: FOR_IN
2712: IFFALSE 2725
// ComHold ( i ) ;
2714: LD_VAR 0 2
2718: PPUSH
2719: CALL_OW 140
2723: GO 2711
2725: POP
2726: POP
// InGameOn ;
2727: CALL_OW 8
// CenterOnXY ( 79 , 76 ) ;
2731: LD_INT 79
2733: PPUSH
2734: LD_INT 76
2736: PPUSH
2737: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
2741: LD_INT 10
2743: PPUSH
2744: CALL_OW 67
// PlaceUnitXY ( JMM , 80 , 79 , true ) ;
2748: LD_EXP 16
2752: PPUSH
2753: LD_INT 80
2755: PPUSH
2756: LD_INT 79
2758: PPUSH
2759: LD_INT 1
2761: PPUSH
2762: CALL_OW 48
// Wait ( 0 0$03 ) ;
2766: LD_INT 105
2768: PPUSH
2769: CALL_OW 67
// ComMoveXY ( JMM , 80 , 76 ) ;
2773: LD_EXP 16
2777: PPUSH
2778: LD_INT 80
2780: PPUSH
2781: LD_INT 76
2783: PPUSH
2784: CALL_OW 111
// Say ( JMM , D1-JMM-1 ) ;
2788: LD_EXP 16
2792: PPUSH
2793: LD_STRING D1-JMM-1
2795: PPUSH
2796: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2800: LD_INT 10
2802: PPUSH
2803: CALL_OW 67
// ComMoveXY ( JMM , 76 , 76 ) ;
2807: LD_EXP 16
2811: PPUSH
2812: LD_INT 76
2814: PPUSH
2815: LD_INT 76
2817: PPUSH
2818: CALL_OW 111
// Say ( JMM , D1-JMM-1a ) ;
2822: LD_EXP 16
2826: PPUSH
2827: LD_STRING D1-JMM-1a
2829: PPUSH
2830: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2834: LD_INT 10
2836: PPUSH
2837: CALL_OW 67
// ComTurnXY ( JMM , 83 , 66 ) ;
2841: LD_EXP 16
2845: PPUSH
2846: LD_INT 83
2848: PPUSH
2849: LD_INT 66
2851: PPUSH
2852: CALL_OW 118
// Say ( JMM , D1-JMM-1b ) ;
2856: LD_EXP 16
2860: PPUSH
2861: LD_STRING D1-JMM-1b
2863: PPUSH
2864: CALL_OW 88
// Wait ( 0 0$0.5 ) ;
2868: LD_INT 18
2870: PPUSH
2871: CALL_OW 67
// Say ( JMM , D1-JMM-1c ) ;
2875: LD_EXP 16
2879: PPUSH
2880: LD_STRING D1-JMM-1c
2882: PPUSH
2883: CALL_OW 88
// Wait ( 0 0$0.2 ) ;
2887: LD_INT 7
2889: PPUSH
2890: CALL_OW 67
// SayRadioNoFace ( Powell , D1-Pow-1 ) ;
2894: LD_EXP 19
2898: PPUSH
2899: LD_STRING D1-Pow-1
2901: PPUSH
2902: CALL_OW 586
// Say ( JMM , D1-JMM-2 ) ;
2906: LD_EXP 16
2910: PPUSH
2911: LD_STRING D1-JMM-2
2913: PPUSH
2914: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-2 ) ;
2918: LD_EXP 19
2922: PPUSH
2923: LD_STRING D1-Pow-2
2925: PPUSH
2926: CALL_OW 586
// Say ( JMM , D1-JMM-3 ) ;
2930: LD_EXP 16
2934: PPUSH
2935: LD_STRING D1-JMM-3
2937: PPUSH
2938: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-3 ) ;
2942: LD_EXP 19
2946: PPUSH
2947: LD_STRING D1-Pow-3
2949: PPUSH
2950: CALL_OW 586
// Say ( JMM , D1-JMM-4 ) ;
2954: LD_EXP 16
2958: PPUSH
2959: LD_STRING D1-JMM-4
2961: PPUSH
2962: CALL_OW 88
// ComFree ( JMM ) ;
2966: LD_EXP 16
2970: PPUSH
2971: CALL_OW 139
// Wait ( 0 0$0.3 ) ;
2975: LD_INT 10
2977: PPUSH
2978: CALL_OW 67
// InGameOff ;
2982: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
2986: LD_STRING M1
2988: PPUSH
2989: CALL_OW 337
// SaveForQuickRestart ;
2993: CALL_OW 22
// active_russian_dialog := true ;
2997: LD_ADDR_EXP 3
3001: PUSH
3002: LD_INT 1
3004: ST_TO_ADDR
// active_road_patrol := true ;
3005: LD_ADDR_EXP 8
3009: PUSH
3010: LD_INT 1
3012: ST_TO_ADDR
// if Difficulty < 3 then
3013: LD_OWVAR 67
3017: PUSH
3018: LD_INT 3
3020: LESS
3021: IFFALSE 3052
// begin PlaceUnitXY ( Bobby , 41 , 71 , false ) ;
3023: LD_EXP 17
3027: PPUSH
3028: LD_INT 41
3030: PPUSH
3031: LD_INT 71
3033: PPUSH
3034: LD_INT 0
3036: PPUSH
3037: CALL_OW 48
// ComHold ( Bobby ) ;
3041: LD_EXP 17
3045: PPUSH
3046: CALL_OW 140
// end else
3050: GO 3100
// begin SetDir ( Bobby , 5 ) ;
3052: LD_EXP 17
3056: PPUSH
3057: LD_INT 5
3059: PPUSH
3060: CALL_OW 233
// PlaceUnitXY ( Bobby , 105 , 98 , false ) ;
3064: LD_EXP 17
3068: PPUSH
3069: LD_INT 105
3071: PPUSH
3072: LD_INT 98
3074: PPUSH
3075: LD_INT 0
3077: PPUSH
3078: CALL_OW 48
// ComCrawl ( Bobby ) ;
3082: LD_EXP 17
3086: PPUSH
3087: CALL_OW 137
// AddComHold ( Bobby ) ;
3091: LD_EXP 17
3095: PPUSH
3096: CALL_OW 200
// end ; PlaceUnitXY ( Cyrus , 90 , 42 , false ) ;
3100: LD_EXP 18
3104: PPUSH
3105: LD_INT 90
3107: PPUSH
3108: LD_INT 42
3110: PPUSH
3111: LD_INT 0
3113: PPUSH
3114: CALL_OW 48
// ComMoveXY ( Cyrus , 79 , 34 ) ;
3118: LD_EXP 18
3122: PPUSH
3123: LD_INT 79
3125: PPUSH
3126: LD_INT 34
3128: PPUSH
3129: CALL_OW 111
// AddComCrawl ( Cyrus ) ;
3133: LD_EXP 18
3137: PPUSH
3138: CALL_OW 197
// end ;
3142: LD_VAR 0 1
3146: RET
// every 0 0$01 trigger active_russian_dialog do var wait_points ;
3147: LD_EXP 3
3151: IFFALSE 3745
3153: GO 3155
3155: DISABLE
3156: LD_INT 0
3158: PPUSH
// begin wait_points := 0 ;
3159: LD_ADDR_VAR 0 1
3163: PUSH
3164: LD_INT 0
3166: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
3167: LD_INT 70
3169: PPUSH
3170: CALL_OW 67
// ComAgressiveMove ( russian_troops_1 , 79 , 83 ) ;
3174: LD_EXP 21
3178: PPUSH
3179: LD_INT 79
3181: PPUSH
3182: LD_INT 83
3184: PPUSH
3185: CALL_OW 114
// Say ( russian_troops_1 [ 2 ] , D1R-Rus1-1 ) ;
3189: LD_EXP 21
3193: PUSH
3194: LD_INT 2
3196: ARRAY
3197: PPUSH
3198: LD_STRING D1R-Rus1-1
3200: PPUSH
3201: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1R-Rus2-1 ) ;
3205: LD_EXP 21
3209: PUSH
3210: LD_INT 1
3212: ARRAY
3213: PPUSH
3214: LD_STRING D1R-Rus2-1
3216: PPUSH
3217: CALL_OW 88
// ComAgressiveMove ( russian_troops_2 , 91 , 80 ) ;
3221: LD_EXP 22
3225: PPUSH
3226: LD_INT 91
3228: PPUSH
3229: LD_INT 80
3231: PPUSH
3232: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
3236: LD_INT 35
3238: PPUSH
3239: CALL_OW 67
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 79 , 82 ) < 6 ;
3243: LD_EXP 21
3247: PUSH
3248: LD_INT 1
3250: ARRAY
3251: PPUSH
3252: LD_INT 79
3254: PPUSH
3255: LD_INT 82
3257: PPUSH
3258: CALL_OW 297
3262: PUSH
3263: LD_INT 6
3265: LESS
3266: IFFALSE 3236
// if not IsInArea ( JMM , jmm_spot ) then
3268: LD_EXP 16
3272: PPUSH
3273: LD_INT 5
3275: PPUSH
3276: CALL_OW 308
3280: NOT
3281: IFFALSE 3301
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1 ) else
3283: LD_EXP 21
3287: PUSH
3288: LD_INT 1
3290: ARRAY
3291: PPUSH
3292: LD_STRING D1Ra-Rus2-1
3294: PPUSH
3295: CALL_OW 88
3299: GO 3368
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3301: LD_EXP 21
3305: PUSH
3306: LD_INT 2
3308: ARRAY
3309: PPUSH
3310: LD_STRING D1Rb-Rus1-1
3312: PPUSH
3313: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Rb-Rus2-1 ) ;
3317: LD_EXP 21
3321: PUSH
3322: LD_INT 1
3324: ARRAY
3325: PPUSH
3326: LD_STRING D1Rb-Rus2-1
3328: PPUSH
3329: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 , GetX ( JMM ) , GetY ( JMM ) ) ;
3333: LD_EXP 21
3337: PUSH
3338: LD_EXP 22
3342: ADD
3343: PPUSH
3344: LD_EXP 16
3348: PPUSH
3349: CALL_OW 250
3353: PPUSH
3354: LD_EXP 16
3358: PPUSH
3359: CALL_OW 251
3363: PPUSH
3364: CALL_OW 114
// end ; wait_points := 10 ;
3368: LD_ADDR_VAR 0 1
3372: PUSH
3373: LD_INT 10
3375: ST_TO_ADDR
// if Difficulty > 1 then
3376: LD_OWVAR 67
3380: PUSH
3381: LD_INT 1
3383: GREATER
3384: IFFALSE 3466
// begin ComAgressiveMove ( russian_troops_1 , 78 , 95 ) ;
3386: LD_EXP 21
3390: PPUSH
3391: LD_INT 78
3393: PPUSH
3394: LD_INT 95
3396: PPUSH
3397: CALL_OW 114
// AddComWait ( russian_troops_1 , 0 0$05 ) ;
3401: LD_EXP 21
3405: PPUSH
3406: LD_INT 175
3408: PPUSH
3409: CALL_OW 202
// wait_points := wait_points + 15 ;
3413: LD_ADDR_VAR 0 1
3417: PUSH
3418: LD_VAR 0 1
3422: PUSH
3423: LD_INT 15
3425: PLUS
3426: ST_TO_ADDR
// if Difficulty > 2 then
3427: LD_OWVAR 67
3431: PUSH
3432: LD_INT 2
3434: GREATER
3435: IFFALSE 3466
// begin AddComAgressiveMove ( russian_troops_1 , 65 , 79 ) ;
3437: LD_EXP 21
3441: PPUSH
3442: LD_INT 65
3444: PPUSH
3445: LD_INT 79
3447: PPUSH
3448: CALL_OW 174
// wait_points := wait_points + 5 ;
3452: LD_ADDR_VAR 0 1
3456: PUSH
3457: LD_VAR 0 1
3461: PUSH
3462: LD_INT 5
3464: PLUS
3465: ST_TO_ADDR
// end ; end ; repeat wait ( 0 0$01 ) ;
3466: LD_INT 35
3468: PPUSH
3469: CALL_OW 67
// wait_points := wait_points - 1 ;
3473: LD_ADDR_VAR 0 1
3477: PUSH
3478: LD_VAR 0 1
3482: PUSH
3483: LD_INT 1
3485: MINUS
3486: ST_TO_ADDR
// if See ( 3 , JMM ) then
3487: LD_INT 3
3489: PPUSH
3490: LD_EXP 16
3494: PPUSH
3495: CALL_OW 292
3499: IFFALSE 3553
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3501: LD_EXP 21
3505: PUSH
3506: LD_INT 2
3508: ARRAY
3509: PPUSH
3510: LD_STRING D1Rb-Rus1-1
3512: PPUSH
3513: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3517: LD_EXP 21
3521: PPUSH
3522: LD_EXP 16
3526: PPUSH
3527: CALL_OW 250
3531: PPUSH
3532: LD_EXP 16
3536: PPUSH
3537: CALL_OW 251
3541: PPUSH
3542: CALL_OW 114
// Wait ( 0 0$03 ) ;
3546: LD_INT 105
3548: PPUSH
3549: CALL_OW 67
// end ; until wait_points = 0 ;
3553: LD_VAR 0 1
3557: PUSH
3558: LD_INT 0
3560: EQUAL
3561: IFFALSE 3466
// Say ( russian_troops_1 [ 2 ] , D1Rc-Rus1-1 ) ;
3563: LD_EXP 21
3567: PUSH
3568: LD_INT 2
3570: ARRAY
3571: PPUSH
3572: LD_STRING D1Rc-Rus1-1
3574: PPUSH
3575: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1a ) ;
3579: LD_EXP 21
3583: PUSH
3584: LD_INT 1
3586: ARRAY
3587: PPUSH
3588: LD_STRING D1Ra-Rus2-1a
3590: PPUSH
3591: CALL_OW 88
// active_powell_dialog := true ;
3595: LD_ADDR_EXP 15
3599: PUSH
3600: LD_INT 1
3602: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3603: LD_EXP 21
3607: PPUSH
3608: LD_INT 45
3610: PPUSH
3611: LD_INT 5
3613: PPUSH
3614: CALL_OW 114
// ComEnterUnit ( russian_troops_2 , rbar1 ) ;
3618: LD_EXP 22
3622: PPUSH
3623: LD_INT 26
3625: PPUSH
3626: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
3630: LD_INT 35
3632: PPUSH
3633: CALL_OW 67
// if See ( 3 , JMM ) then
3637: LD_INT 3
3639: PPUSH
3640: LD_EXP 16
3644: PPUSH
3645: CALL_OW 292
3649: IFFALSE 3705
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3651: LD_EXP 21
3655: PUSH
3656: LD_INT 2
3658: ARRAY
3659: PPUSH
3660: LD_STRING D1Rb-Rus1-1
3662: PPUSH
3663: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3667: LD_EXP 21
3671: PPUSH
3672: LD_EXP 16
3676: PPUSH
3677: CALL_OW 250
3681: PPUSH
3682: LD_EXP 16
3686: PPUSH
3687: CALL_OW 251
3691: PPUSH
3692: CALL_OW 114
// Wait ( 0 0$50 ) ;
3696: LD_INT 1750
3698: PPUSH
3699: CALL_OW 67
// end else
3703: GO 3720
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3705: LD_EXP 21
3709: PPUSH
3710: LD_INT 45
3712: PPUSH
3713: LD_INT 5
3715: PPUSH
3716: CALL_OW 114
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 45 , 5 ) < 10 ;
3720: LD_EXP 21
3724: PUSH
3725: LD_INT 1
3727: ARRAY
3728: PPUSH
3729: LD_INT 45
3731: PPUSH
3732: LD_INT 5
3734: PPUSH
3735: CALL_OW 297
3739: PUSH
3740: LD_INT 10
3742: LESS
3743: IFFALSE 3630
// end ;
3745: PPOPN 1
3747: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 6 ] ] ) and Difficulty = 1 do
3748: LD_INT 22
3750: PUSH
3751: LD_INT 3
3753: PUSH
3754: EMPTY
3755: LIST
3756: LIST
3757: PUSH
3758: LD_INT 92
3760: PUSH
3761: LD_INT 80
3763: PUSH
3764: LD_INT 83
3766: PUSH
3767: LD_INT 6
3769: PUSH
3770: EMPTY
3771: LIST
3772: LIST
3773: LIST
3774: LIST
3775: PUSH
3776: EMPTY
3777: LIST
3778: LIST
3779: PPUSH
3780: CALL_OW 69
3784: PUSH
3785: LD_OWVAR 67
3789: PUSH
3790: LD_INT 1
3792: EQUAL
3793: AND
3794: IFFALSE 3875
3796: GO 3798
3798: DISABLE
// begin PlaceSeeing ( 80 , 83 , 1 , - 7 ) ;
3799: LD_INT 80
3801: PPUSH
3802: LD_INT 83
3804: PPUSH
3805: LD_INT 1
3807: PPUSH
3808: LD_INT 7
3810: NEG
3811: PPUSH
3812: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
3816: LD_INT 35
3818: PPUSH
3819: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 10 ] ] ) ;
3823: LD_INT 22
3825: PUSH
3826: LD_INT 3
3828: PUSH
3829: EMPTY
3830: LIST
3831: LIST
3832: PUSH
3833: LD_INT 92
3835: PUSH
3836: LD_INT 80
3838: PUSH
3839: LD_INT 83
3841: PUSH
3842: LD_INT 10
3844: PUSH
3845: EMPTY
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: PUSH
3851: EMPTY
3852: LIST
3853: LIST
3854: PPUSH
3855: CALL_OW 69
3859: NOT
3860: IFFALSE 3816
// RemoveSeeing ( 80 , 83 , 1 ) ;
3862: LD_INT 80
3864: PPUSH
3865: LD_INT 83
3867: PPUSH
3868: LD_INT 1
3870: PPUSH
3871: CALL_OW 331
// end ;
3875: END
// every 0 0$02 trigger GetDistUnits ( JMM , Bobby ) < 6 and IsOk ( Bobby ) do
3876: LD_EXP 16
3880: PPUSH
3881: LD_EXP 17
3885: PPUSH
3886: CALL_OW 296
3890: PUSH
3891: LD_INT 6
3893: LESS
3894: PUSH
3895: LD_EXP 17
3899: PPUSH
3900: CALL_OW 302
3904: AND
3905: IFFALSE 4364
3907: GO 3909
3909: DISABLE
// begin ComWalk ( Bobby ) ;
3910: LD_EXP 17
3914: PPUSH
3915: CALL_OW 138
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
3919: LD_EXP 17
3923: PPUSH
3924: LD_EXP 16
3928: PPUSH
3929: CALL_OW 250
3933: PPUSH
3934: LD_EXP 16
3938: PPUSH
3939: CALL_OW 251
3943: PPUSH
3944: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
3948: LD_INT 35
3950: PPUSH
3951: CALL_OW 67
// until See ( 4 , JMM ) ;
3955: LD_INT 4
3957: PPUSH
3958: LD_EXP 16
3962: PPUSH
3963: CALL_OW 292
3967: IFFALSE 3948
// InGameOn ;
3969: CALL_OW 8
// ComTurnUnit ( JMM , Bobby ) ;
3973: LD_EXP 16
3977: PPUSH
3978: LD_EXP 17
3982: PPUSH
3983: CALL_OW 119
// if cyrus_in_squad and IsOk ( Cyrus ) and GetDistUnits ( JMM , Cyrus ) < 10 then
3987: LD_EXP 7
3991: PUSH
3992: LD_EXP 18
3996: PPUSH
3997: CALL_OW 302
4001: AND
4002: PUSH
4003: LD_EXP 16
4007: PPUSH
4008: LD_EXP 18
4012: PPUSH
4013: CALL_OW 296
4017: PUSH
4018: LD_INT 10
4020: LESS
4021: AND
4022: IFFALSE 4067
// begin ComMoveXY ( Cyrus , GetX ( JMM ) , GetY ( JMM ) ) ;
4024: LD_EXP 18
4028: PPUSH
4029: LD_EXP 16
4033: PPUSH
4034: CALL_OW 250
4038: PPUSH
4039: LD_EXP 16
4043: PPUSH
4044: CALL_OW 251
4048: PPUSH
4049: CALL_OW 111
// AddComTurnUnit ( Cyrus , Bobby ) ;
4053: LD_EXP 18
4057: PPUSH
4058: LD_EXP 17
4062: PPUSH
4063: CALL_OW 179
// end ; Say ( JMM , D2-JMM-1 ) ;
4067: LD_EXP 16
4071: PPUSH
4072: LD_STRING D2-JMM-1
4074: PPUSH
4075: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
4079: LD_INT 10
4081: PPUSH
4082: CALL_OW 67
// ComTurnUnit ( Bobby , JMM ) ;
4086: LD_EXP 17
4090: PPUSH
4091: LD_EXP 16
4095: PPUSH
4096: CALL_OW 119
// Say ( Bobby , D2-Bobby-1 ) ;
4100: LD_EXP 17
4104: PPUSH
4105: LD_STRING D2-Bobby-1
4107: PPUSH
4108: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
4112: LD_EXP 16
4116: PPUSH
4117: LD_STRING D2-JMM-2
4119: PPUSH
4120: CALL_OW 88
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4124: LD_EXP 17
4128: PPUSH
4129: LD_EXP 16
4133: PPUSH
4134: CALL_OW 250
4138: PPUSH
4139: LD_EXP 16
4143: PPUSH
4144: CALL_OW 251
4148: PPUSH
4149: CALL_OW 111
// Say ( Bobby , D2-Bobby-2 ) ;
4153: LD_EXP 17
4157: PPUSH
4158: LD_STRING D2-Bobby-2
4160: PPUSH
4161: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
4165: LD_EXP 16
4169: PPUSH
4170: LD_STRING D2-JMM-3
4172: PPUSH
4173: CALL_OW 88
// ComTurnUnit ( Bobby , JMM ) ;
4177: LD_EXP 17
4181: PPUSH
4182: LD_EXP 16
4186: PPUSH
4187: CALL_OW 119
// DialogueOn ;
4191: CALL_OW 6
// Say ( Bobby , D2-Bobby-3 ) ;
4195: LD_EXP 17
4199: PPUSH
4200: LD_STRING D2-Bobby-3
4202: PPUSH
4203: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
4207: LD_EXP 16
4211: PPUSH
4212: LD_STRING D2-JMM-4
4214: PPUSH
4215: CALL_OW 88
// Say ( Bobby , D2-Bobby-4 ) ;
4219: LD_EXP 17
4223: PPUSH
4224: LD_STRING D2-Bobby-4
4226: PPUSH
4227: CALL_OW 88
// Say ( JMM , D2-JMM-5 ) ;
4231: LD_EXP 16
4235: PPUSH
4236: LD_STRING D2-JMM-5
4238: PPUSH
4239: CALL_OW 88
// Say ( Bobby , D2-Bobby-5 ) ;
4243: LD_EXP 17
4247: PPUSH
4248: LD_STRING D2-Bobby-5
4250: PPUSH
4251: CALL_OW 88
// Say ( JMM , D2-JMM-6 ) ;
4255: LD_EXP 16
4259: PPUSH
4260: LD_STRING D2-JMM-6
4262: PPUSH
4263: CALL_OW 88
// if not powell_contact then
4267: LD_EXP 5
4271: NOT
4272: IFFALSE 4298
// begin Say ( Bobby , D2-Bobby-6 ) ;
4274: LD_EXP 17
4278: PPUSH
4279: LD_STRING D2-Bobby-6
4281: PPUSH
4282: CALL_OW 88
// Say ( JMM , D2-JMM-7 ) ;
4286: LD_EXP 16
4290: PPUSH
4291: LD_STRING D2-JMM-7
4293: PPUSH
4294: CALL_OW 88
// end ; DialogueOff ;
4298: CALL_OW 7
// InGameOff ;
4302: CALL_OW 9
// SetSide ( Bobby , 1 ) ;
4306: LD_EXP 17
4310: PPUSH
4311: LD_INT 1
4313: PPUSH
4314: CALL_OW 235
// ComFree ( [ JMM , Bobby ] ) ;
4318: LD_EXP 16
4322: PUSH
4323: LD_EXP 17
4327: PUSH
4328: EMPTY
4329: LIST
4330: LIST
4331: PPUSH
4332: CALL_OW 139
// bobby_in_squad := true ;
4336: LD_ADDR_EXP 4
4340: PUSH
4341: LD_INT 1
4343: ST_TO_ADDR
// if powell_contact and not cyrus_in_squad then
4344: LD_EXP 5
4348: PUSH
4349: LD_EXP 7
4353: NOT
4354: AND
4355: IFFALSE 4364
// ChangeMissionObjectives ( M2b ) ;
4357: LD_STRING M2b
4359: PPUSH
4360: CALL_OW 337
// end ;
4364: END
// every 0 0$10 trigger active_russian_dialog and Difficulty < 3 do
4365: LD_EXP 3
4369: PUSH
4370: LD_OWVAR 67
4374: PUSH
4375: LD_INT 3
4377: LESS
4378: AND
4379: IFFALSE 4413
4381: GO 4383
4383: DISABLE
// begin wait ( 1 1$00 ) ;
4384: LD_INT 2100
4386: PPUSH
4387: CALL_OW 67
// if not bobby_in_squad then
4391: LD_EXP 4
4395: NOT
4396: IFFALSE 4413
// ComMoveXY ( Bobby , 75 , 83 ) ;
4398: LD_EXP 17
4402: PPUSH
4403: LD_INT 75
4405: PPUSH
4406: LD_INT 83
4408: PPUSH
4409: CALL_OW 111
// end ;
4413: END
// every 0 0$10 trigger cyrus_in_squad and not bobby_in_squad do
4414: LD_EXP 7
4418: PUSH
4419: LD_EXP 4
4423: NOT
4424: AND
4425: IFFALSE 4454
4427: GO 4429
4429: DISABLE
// begin ComMoveXY ( Bobby , 105 , 97 ) ;
4430: LD_EXP 17
4434: PPUSH
4435: LD_INT 105
4437: PPUSH
4438: LD_INT 97
4440: PPUSH
4441: CALL_OW 111
// AddComCrawl ( Bobby ) ;
4445: LD_EXP 17
4449: PPUSH
4450: CALL_OW 197
// end ;
4454: END
// every 0 0$01 trigger IsInArea ( JMM , obstacle_area ) and GetDistUnits ( JMM , Bobby ) < 7 and bobby_in_squad do
4455: LD_EXP 16
4459: PPUSH
4460: LD_INT 6
4462: PPUSH
4463: CALL_OW 308
4467: PUSH
4468: LD_EXP 16
4472: PPUSH
4473: LD_EXP 17
4477: PPUSH
4478: CALL_OW 296
4482: PUSH
4483: LD_INT 7
4485: LESS
4486: AND
4487: PUSH
4488: LD_EXP 4
4492: AND
4493: IFFALSE 4540
4495: GO 4497
4497: DISABLE
// begin ComHold ( [ JMM , Bobby ] ) ;
4498: LD_EXP 16
4502: PUSH
4503: LD_EXP 17
4507: PUSH
4508: EMPTY
4509: LIST
4510: LIST
4511: PPUSH
4512: CALL_OW 140
// Say ( JMM , D2a-JMM-1 ) ;
4516: LD_EXP 16
4520: PPUSH
4521: LD_STRING D2a-JMM-1
4523: PPUSH
4524: CALL_OW 88
// Say ( Bobby , D2a-Bobby-1 ) ;
4528: LD_EXP 17
4532: PPUSH
4533: LD_STRING D2a-Bobby-1
4535: PPUSH
4536: CALL_OW 88
// end ;
4540: END
// every 0 0$50 trigger active_powell_dialog and not See ( 3 , JMM ) do
4541: LD_EXP 15
4545: PUSH
4546: LD_INT 3
4548: PPUSH
4549: LD_EXP 16
4553: PPUSH
4554: CALL_OW 292
4558: NOT
4559: AND
4560: IFFALSE 4731
4562: GO 4564
4564: DISABLE
// begin wait ( 0 0$5 ) ;
4565: LD_INT 175
4567: PPUSH
4568: CALL_OW 67
// InGameOn ;
4572: CALL_OW 8
// DialogueOn ;
4576: CALL_OW 6
// SayRadioNoFace ( Powell , D3-Pow-1 ) ;
4580: LD_EXP 19
4584: PPUSH
4585: LD_STRING D3-Pow-1
4587: PPUSH
4588: CALL_OW 586
// Say ( JMM , D3-JMM-1 ) ;
4592: LD_EXP 16
4596: PPUSH
4597: LD_STRING D3-JMM-1
4599: PPUSH
4600: CALL_OW 88
// SayRadioNoFace ( Powell , D3-Pow-2 ) ;
4604: LD_EXP 19
4608: PPUSH
4609: LD_STRING D3-Pow-2
4611: PPUSH
4612: CALL_OW 586
// Say ( JMM , D3-JMM-2 ) ;
4616: LD_EXP 16
4620: PPUSH
4621: LD_STRING D3-JMM-2
4623: PPUSH
4624: CALL_OW 88
// SayRadioNoFace ( Powell , D3-Pow-3 ) ;
4628: LD_EXP 19
4632: PPUSH
4633: LD_STRING D3-Pow-3
4635: PPUSH
4636: CALL_OW 586
// DialogueOff ;
4640: CALL_OW 7
// InGameOff ;
4644: CALL_OW 9
// powell_contact := true ;
4648: LD_ADDR_EXP 5
4652: PUSH
4653: LD_INT 1
4655: ST_TO_ADDR
// SetAreaMapShow ( exitArea , 1 ) ;
4656: LD_INT 10
4658: PPUSH
4659: LD_INT 1
4661: PPUSH
4662: CALL_OW 424
// uc_side := 4 ;
4666: LD_ADDR_OWVAR 20
4670: PUSH
4671: LD_INT 4
4673: ST_TO_ADDR
// uc_nation := 1 ;
4674: LD_ADDR_OWVAR 21
4678: PUSH
4679: LD_INT 1
4681: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
4682: LD_ADDR_EXP 19
4686: PUSH
4687: LD_STRING Powell
4689: PPUSH
4690: LD_INT 0
4692: PPUSH
4693: LD_STRING 
4695: PPUSH
4696: CALL 23722 0 3
4700: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
4701: LD_STRING M2
4703: PPUSH
4704: CALL_OW 337
// if not bobby_in_squad then
4708: LD_EXP 4
4712: NOT
4713: IFFALSE 4724
// ChangeMissionObjectives ( M2a ) else
4715: LD_STRING M2a
4717: PPUSH
4718: CALL_OW 337
4722: GO 4731
// ChangeMissionObjectives ( M2b ) ;
4724: LD_STRING M2b
4726: PPUSH
4727: CALL_OW 337
// end ;
4731: END
// every 0 0$01 trigger IsInArea ( JMM , fakeArea ) do
4732: LD_EXP 16
4736: PPUSH
4737: LD_INT 7
4739: PPUSH
4740: CALL_OW 308
4744: IFFALSE 4879
4746: GO 4748
4748: DISABLE
// begin DialogueOn ;
4749: CALL_OW 6
// SayRadioNoFace ( fakePokryshkin , D4-Rus3-1 ) ;
4753: LD_EXP 20
4757: PPUSH
4758: LD_STRING D4-Rus3-1
4760: PPUSH
4761: CALL_OW 586
// DialogueOff ;
4765: CALL_OW 7
// ChangeMissionObjectives ( M3a ) ;
4769: LD_STRING M3a
4771: PPUSH
4772: CALL_OW 337
// SetAreaMapShow ( fakeEnd , 1 ) ;
4776: LD_INT 11
4778: PPUSH
4779: LD_INT 1
4781: PPUSH
4782: CALL_OW 424
// Wait ( 0 0$02 ) ;
4786: LD_INT 70
4788: PPUSH
4789: CALL_OW 67
// DialogueOn ;
4793: CALL_OW 6
// SayRadioNoFace ( Powell , D4-Pow-1 ) ;
4797: LD_EXP 19
4801: PPUSH
4802: LD_STRING D4-Pow-1
4804: PPUSH
4805: CALL_OW 586
// DialogueOff ;
4809: CALL_OW 7
// ChangeMissionObjectives ( M3b ) ;
4813: LD_STRING M3b
4815: PPUSH
4816: CALL_OW 337
// case Query ( Q1 ) of 1 :
4820: LD_STRING Q1
4822: PPUSH
4823: CALL_OW 97
4827: PUSH
4828: LD_INT 1
4830: DOUBLE
4831: EQUAL
4832: IFTRUE 4836
4834: GO 4867
4836: POP
// begin macmilan_use_radio := true ;
4837: LD_ADDR_EXP 6
4841: PUSH
4842: LD_INT 1
4844: ST_TO_ADDR
// DialogueOn ;
4845: CALL_OW 6
// Say ( JMM , D4a-JMM-1 ) ;
4849: LD_EXP 16
4853: PPUSH
4854: LD_STRING D4a-JMM-1
4856: PPUSH
4857: CALL_OW 88
// DialogueOff ;
4861: CALL_OW 7
// end ; 2 :
4865: GO 4879
4867: LD_INT 2
4869: DOUBLE
4870: EQUAL
4871: IFTRUE 4875
4873: GO 4878
4875: POP
// ; end ;
4876: GO 4879
4878: POP
// end ;
4879: END
// every 0 0$02 trigger GetDistUnits ( JMM , Cyrus ) < 8 and IsOk ( Cyrus ) do
4880: LD_EXP 16
4884: PPUSH
4885: LD_EXP 18
4889: PPUSH
4890: CALL_OW 296
4894: PUSH
4895: LD_INT 8
4897: LESS
4898: PUSH
4899: LD_EXP 18
4903: PPUSH
4904: CALL_OW 302
4908: AND
4909: IFFALSE 5200
4911: GO 4913
4913: DISABLE
// begin InGameOn ;
4914: CALL_OW 8
// ComMoveXY ( JMM , GetX ( Cyrus ) , GetY ( Cyrus ) ) ;
4918: LD_EXP 16
4922: PPUSH
4923: LD_EXP 18
4927: PPUSH
4928: CALL_OW 250
4932: PPUSH
4933: LD_EXP 18
4937: PPUSH
4938: CALL_OW 251
4942: PPUSH
4943: CALL_OW 111
// if IsOk ( Bobby ) and bobby_in_squad then
4947: LD_EXP 17
4951: PPUSH
4952: CALL_OW 302
4956: PUSH
4957: LD_EXP 4
4961: AND
4962: IFFALSE 4993
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4964: LD_EXP 17
4968: PPUSH
4969: LD_EXP 16
4973: PPUSH
4974: CALL_OW 250
4978: PPUSH
4979: LD_EXP 16
4983: PPUSH
4984: CALL_OW 251
4988: PPUSH
4989: CALL_OW 111
// Say ( JMM , D5-JMM-1 ) ;
4993: LD_EXP 16
4997: PPUSH
4998: LD_STRING D5-JMM-1
5000: PPUSH
5001: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
5005: LD_INT 10
5007: PPUSH
5008: CALL_OW 67
// ComTurnUnit ( JMM , Cyrus ) ;
5012: LD_EXP 16
5016: PPUSH
5017: LD_EXP 18
5021: PPUSH
5022: CALL_OW 119
// ComWalk ( Cyrus ) ;
5026: LD_EXP 18
5030: PPUSH
5031: CALL_OW 138
// ComTurnUnit ( Cyrus , JMM ) ;
5035: LD_EXP 18
5039: PPUSH
5040: LD_EXP 16
5044: PPUSH
5045: CALL_OW 119
// Say ( Cyrus , D5-Cyrus-1 ) ;
5049: LD_EXP 18
5053: PPUSH
5054: LD_STRING D5-Cyrus-1
5056: PPUSH
5057: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5061: LD_EXP 17
5065: PPUSH
5066: CALL_OW 302
5070: PUSH
5071: LD_EXP 4
5075: AND
5076: IFFALSE 5116
// begin ComTurnUnit ( Bobby , Cyrus ) ;
5078: LD_EXP 17
5082: PPUSH
5083: LD_EXP 18
5087: PPUSH
5088: CALL_OW 119
// Say ( Bobby , D5-Bobby-1 ) ;
5092: LD_EXP 17
5096: PPUSH
5097: LD_STRING D5-Bobby-1
5099: PPUSH
5100: CALL_OW 88
// Say ( JMM , D5-JMM-2 ) ;
5104: LD_EXP 16
5108: PPUSH
5109: LD_STRING D5-JMM-2
5111: PPUSH
5112: CALL_OW 88
// end ; InGameOff ;
5116: CALL_OW 9
// cyrus_in_squad := true ;
5120: LD_ADDR_EXP 7
5124: PUSH
5125: LD_INT 1
5127: ST_TO_ADDR
// SetSide ( Cyrus , 1 ) ;
5128: LD_EXP 18
5132: PPUSH
5133: LD_INT 1
5135: PPUSH
5136: CALL_OW 235
// if powell_contact and not bobby_in_squad then
5140: LD_EXP 5
5144: PUSH
5145: LD_EXP 4
5149: NOT
5150: AND
5151: IFFALSE 5160
// ChangeMissionObjectives ( M2b ) ;
5153: LD_STRING M2b
5155: PPUSH
5156: CALL_OW 337
// if not bobby_in_squad and GetSide ( Bobby ) = 4 and IsOk ( Bobby ) then
5160: LD_EXP 4
5164: NOT
5165: PUSH
5166: LD_EXP 17
5170: PPUSH
5171: CALL_OW 255
5175: PUSH
5176: LD_INT 4
5178: EQUAL
5179: AND
5180: PUSH
5181: LD_EXP 17
5185: PPUSH
5186: CALL_OW 302
5190: AND
5191: IFFALSE 5200
// SetAchievement ( ACH_CYRUS ) ;
5193: LD_STRING ACH_CYRUS
5195: PPUSH
5196: CALL_OW 543
// end ;
5200: END
// every 0 0$01 trigger bobby_in_squad and cyrus_in_squad do
5201: LD_EXP 4
5205: PUSH
5206: LD_EXP 7
5210: AND
5211: IFFALSE 5223
5213: GO 5215
5215: DISABLE
// ChangeMissionObjectives ( M2c ) ;
5216: LD_STRING M2c
5218: PPUSH
5219: CALL_OW 337
5223: END
// every 0 0$01 trigger IsInArea ( JMM , trap ) do
5224: LD_EXP 16
5228: PPUSH
5229: LD_INT 8
5231: PPUSH
5232: CALL_OW 308
5236: IFFALSE 5288
5238: GO 5240
5240: DISABLE
// begin macmilan_in_trap := true ;
5241: LD_ADDR_EXP 9
5245: PUSH
5246: LD_INT 1
5248: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
5249: LD_INT 35
5251: PPUSH
5252: CALL_OW 67
// DialogueOn ;
5256: CALL_OW 6
// Say ( Pokryshkin , D5-Pok-1 ) ;
5260: LD_EXP 26
5264: PPUSH
5265: LD_STRING D5-Pok-1
5267: PPUSH
5268: CALL_OW 88
// DialogueOff ;
5272: CALL_OW 7
// Say ( JMM , D4b-JMM-1 ) ;
5276: LD_EXP 16
5280: PPUSH
5281: LD_STRING D4b-JMM-1
5283: PPUSH
5284: CALL_OW 88
// end ;
5288: END
// every 0 0$01 trigger GetDistUnits ( JMM , russian_meta_guards [ russian_meta_guards ] ) < 12 or UnitFilter ( russian_meta_guards , [ f_not , [ f_lives , 990 ] ] ) do var i , hp ;
5289: LD_EXP 16
5293: PPUSH
5294: LD_EXP 24
5298: PUSH
5299: LD_EXP 24
5303: ARRAY
5304: PPUSH
5305: CALL_OW 296
5309: PUSH
5310: LD_INT 12
5312: LESS
5313: PUSH
5314: LD_EXP 24
5318: PPUSH
5319: LD_INT 3
5321: PUSH
5322: LD_INT 24
5324: PUSH
5325: LD_INT 990
5327: PUSH
5328: EMPTY
5329: LIST
5330: LIST
5331: PUSH
5332: EMPTY
5333: LIST
5334: LIST
5335: PPUSH
5336: CALL_OW 72
5340: OR
5341: IFFALSE 5571
5343: GO 5345
5345: DISABLE
5346: LD_INT 0
5348: PPUSH
5349: PPUSH
// begin hp := [ 300 , 250 , 200 ] [ Difficulty ] ;
5350: LD_ADDR_VAR 0 2
5354: PUSH
5355: LD_INT 300
5357: PUSH
5358: LD_INT 250
5360: PUSH
5361: LD_INT 200
5363: PUSH
5364: EMPTY
5365: LIST
5366: LIST
5367: LIST
5368: PUSH
5369: LD_OWVAR 67
5373: ARRAY
5374: ST_TO_ADDR
// for i in russian_meta_guards do
5375: LD_ADDR_VAR 0 1
5379: PUSH
5380: LD_EXP 24
5384: PUSH
5385: FOR_IN
5386: IFFALSE 5426
// if IsOk ( i ) then
5388: LD_VAR 0 1
5392: PPUSH
5393: CALL_OW 302
5397: IFFALSE 5424
// SetLives ( i , GetLives ( i ) - hp ) ;
5399: LD_VAR 0 1
5403: PPUSH
5404: LD_VAR 0 1
5408: PPUSH
5409: CALL_OW 256
5413: PUSH
5414: LD_VAR 0 2
5418: MINUS
5419: PPUSH
5420: CALL_OW 234
5424: GO 5385
5426: POP
5427: POP
// DialogueOn ;
5428: CALL_OW 6
// Say ( russian_meta_guards [ russian_meta_guards ] , D6-FRus1-1 ) ;
5432: LD_EXP 24
5436: PUSH
5437: LD_EXP 24
5441: ARRAY
5442: PPUSH
5443: LD_STRING D6-FRus1-1
5445: PPUSH
5446: CALL_OW 88
// Say ( JMM , D6-JMM-1 ) ;
5450: LD_EXP 16
5454: PPUSH
5455: LD_STRING D6-JMM-1
5457: PPUSH
5458: CALL_OW 88
// if IsOk ( Cyrus ) and cyrus_in_squad then
5462: LD_EXP 18
5466: PPUSH
5467: CALL_OW 302
5471: PUSH
5472: LD_EXP 7
5476: AND
5477: IFFALSE 5491
// Say ( Cyrus , D6-Cyrus-1 ) ;
5479: LD_EXP 18
5483: PPUSH
5484: LD_STRING D6-Cyrus-1
5486: PPUSH
5487: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5491: LD_EXP 17
5495: PPUSH
5496: CALL_OW 302
5500: PUSH
5501: LD_EXP 4
5505: AND
5506: IFFALSE 5520
// Say ( Bobby , D6-Bobby-1 ) ;
5508: LD_EXP 17
5512: PPUSH
5513: LD_STRING D6-Bobby-1
5515: PPUSH
5516: CALL_OW 88
// DialogueOff ;
5520: CALL_OW 7
// Wait ( [ 0 0$04 , 0 0$03 , 0 0$02 ] [ Difficulty ] ) ;
5524: LD_INT 140
5526: PUSH
5527: LD_INT 105
5529: PUSH
5530: LD_INT 70
5532: PUSH
5533: EMPTY
5534: LIST
5535: LIST
5536: LIST
5537: PUSH
5538: LD_OWVAR 67
5542: ARRAY
5543: PPUSH
5544: CALL_OW 67
// meta_action := true ;
5548: LD_ADDR_EXP 10
5552: PUSH
5553: LD_INT 1
5555: ST_TO_ADDR
// ComAgressiveMove ( russian_meta_guards , 94 , 8 ) ;
5556: LD_EXP 24
5560: PPUSH
5561: LD_INT 94
5563: PPUSH
5564: LD_INT 8
5566: PPUSH
5567: CALL_OW 114
// end ;
5571: PPOPN 2
5573: END
// every 0 0$01 trigger GetDistUnitXY ( JMM , 93 , 1 ) < 5 and FilterAllUnits ( [ f_side , 1 ] ) > 1 do
5574: LD_EXP 16
5578: PPUSH
5579: LD_INT 93
5581: PPUSH
5582: LD_INT 1
5584: PPUSH
5585: CALL_OW 297
5589: PUSH
5590: LD_INT 5
5592: LESS
5593: PUSH
5594: LD_INT 22
5596: PUSH
5597: LD_INT 1
5599: PUSH
5600: EMPTY
5601: LIST
5602: LIST
5603: PPUSH
5604: CALL_OW 69
5608: PUSH
5609: LD_INT 1
5611: GREATER
5612: AND
5613: IFFALSE 5630
5615: GO 5617
5617: DISABLE
// Say ( JMM , D6a-JMM-1 ) ;
5618: LD_EXP 16
5622: PPUSH
5623: LD_STRING D6a-JMM-1
5625: PPUSH
5626: CALL_OW 88
5630: END
// on UnitGoesToRed ( un ) do begin if un = JMM then
5631: LD_VAR 0 1
5635: PUSH
5636: LD_EXP 16
5640: EQUAL
5641: IFFALSE 5650
// YouLost ( JMM ) ;
5643: LD_STRING JMM
5645: PPUSH
5646: CALL_OW 104
// end ;
5650: PPOPN 1
5652: END
// on UnitDestroyed ( un ) do begin if un = JMM then
5653: LD_VAR 0 1
5657: PUSH
5658: LD_EXP 16
5662: EQUAL
5663: IFFALSE 5672
// YouLost ( JMM ) ;
5665: LD_STRING JMM
5667: PPUSH
5668: CALL_OW 104
// end ;
5672: PPOPN 1
5674: END
// every 0 0$01 trigger IsInArea ( Bobby , exitArea ) do
5675: LD_EXP 17
5679: PPUSH
5680: LD_INT 10
5682: PPUSH
5683: CALL_OW 308
5687: IFFALSE 5736
5689: GO 5691
5691: DISABLE
// begin bobby_saved := true ;
5692: LD_ADDR_EXP 12
5696: PUSH
5697: LD_INT 1
5699: ST_TO_ADDR
// SaveVariable ( GetLives ( Bobby ) , 01_BobbyLifePoints_1 ) ;
5700: LD_EXP 17
5704: PPUSH
5705: CALL_OW 256
5709: PPUSH
5710: LD_STRING 01_BobbyLifePoints_1
5712: PPUSH
5713: CALL_OW 39
// RemoveUnit ( Bobby ) ;
5717: LD_EXP 17
5721: PPUSH
5722: CALL_OW 64
// AddMedal ( Bobby , 1 ) ;
5726: LD_STRING Bobby
5728: PPUSH
5729: LD_INT 1
5731: PPUSH
5732: CALL_OW 101
// end ;
5736: END
// every 0 0$01 trigger IsInArea ( Cyrus , exitArea ) do
5737: LD_EXP 18
5741: PPUSH
5742: LD_INT 10
5744: PPUSH
5745: CALL_OW 308
5749: IFFALSE 5798
5751: GO 5753
5753: DISABLE
// begin cyrus_saved := true ;
5754: LD_ADDR_EXP 13
5758: PUSH
5759: LD_INT 1
5761: ST_TO_ADDR
// SaveVariable ( GetLives ( Cyrus ) , 01_CyrusLifePoints_1 ) ;
5762: LD_EXP 18
5766: PPUSH
5767: CALL_OW 256
5771: PPUSH
5772: LD_STRING 01_CyrusLifePoints_1
5774: PPUSH
5775: CALL_OW 39
// RemoveUnit ( Cyrus ) ;
5779: LD_EXP 18
5783: PPUSH
5784: CALL_OW 64
// AddMedal ( Cyrus , 1 ) ;
5788: LD_STRING Cyrus
5790: PPUSH
5791: LD_INT 1
5793: PPUSH
5794: CALL_OW 101
// end ;
5798: END
// every 0 0$01 trigger IsInArea ( JMM , exitArea ) do var i , to_reward , wait_for_them , m1 , m2 , m3 ;
5799: LD_EXP 16
5803: PPUSH
5804: LD_INT 10
5806: PPUSH
5807: CALL_OW 308
5811: IFFALSE 6419
5813: GO 5815
5815: DISABLE
5816: LD_INT 0
5818: PPUSH
5819: PPUSH
5820: PPUSH
5821: PPUSH
5822: PPUSH
5823: PPUSH
// begin if macmilan_use_radio then
5824: LD_EXP 6
5828: IFFALSE 5837
// SetAchievement ( ACH_RADIO ) ;
5830: LD_STRING ACH_RADIO
5832: PPUSH
5833: CALL_OW 543
// if ( not cyrus_saved and cyrus_in_squad and IsOk ( Cyrus ) ) or ( not bobby_saved and bobby_in_squad and IsOk ( Bobby ) ) then
5837: LD_EXP 13
5841: NOT
5842: PUSH
5843: LD_EXP 7
5847: AND
5848: PUSH
5849: LD_EXP 18
5853: PPUSH
5854: CALL_OW 302
5858: AND
5859: PUSH
5860: LD_EXP 12
5864: NOT
5865: PUSH
5866: LD_EXP 4
5870: AND
5871: PUSH
5872: LD_EXP 17
5876: PPUSH
5877: CALL_OW 302
5881: AND
5882: OR
5883: IFFALSE 5924
// case Query ( Q2 ) of 1 :
5885: LD_STRING Q2
5887: PPUSH
5888: CALL_OW 97
5892: PUSH
5893: LD_INT 1
5895: DOUBLE
5896: EQUAL
5897: IFTRUE 5901
5899: GO 5912
5901: POP
// wait_for_them := true ; 2 :
5902: LD_ADDR_VAR 0 3
5906: PUSH
5907: LD_INT 1
5909: ST_TO_ADDR
5910: GO 5924
5912: LD_INT 2
5914: DOUBLE
5915: EQUAL
5916: IFTRUE 5920
5918: GO 5923
5920: POP
// ; end ;
5921: GO 5924
5923: POP
// if wait_for_them then
5924: LD_VAR 0 3
5928: IFFALSE 6041
// repeat wait ( 0 0$01 ) ;
5930: LD_INT 35
5932: PPUSH
5933: CALL_OW 67
// until ( cyrus_saved and bobby_saved ) or ( cyrus_saved and ( not bobby_in_squad or IsDying ( Bobby ) or IsDead ( Bobby ) ) ) or ( bobby_saved and ( not cyrus_in_squad or IsDying ( Cyrus ) or IsDead ( Cyrus ) ) ) or ( IsDead ( Bobby ) and IsDead ( Cyrus ) ) ;
5937: LD_EXP 13
5941: PUSH
5942: LD_EXP 12
5946: AND
5947: PUSH
5948: LD_EXP 13
5952: PUSH
5953: LD_EXP 4
5957: NOT
5958: PUSH
5959: LD_EXP 17
5963: PPUSH
5964: CALL_OW 303
5968: OR
5969: PUSH
5970: LD_EXP 17
5974: PPUSH
5975: CALL_OW 301
5979: OR
5980: AND
5981: OR
5982: PUSH
5983: LD_EXP 12
5987: PUSH
5988: LD_EXP 7
5992: NOT
5993: PUSH
5994: LD_EXP 18
5998: PPUSH
5999: CALL_OW 303
6003: OR
6004: PUSH
6005: LD_EXP 18
6009: PPUSH
6010: CALL_OW 301
6014: OR
6015: AND
6016: OR
6017: PUSH
6018: LD_EXP 17
6022: PPUSH
6023: CALL_OW 301
6027: PUSH
6028: LD_EXP 18
6032: PPUSH
6033: CALL_OW 301
6037: AND
6038: OR
6039: IFFALSE 5930
// SaveVariable ( GetLives ( JMM ) , 01_JMMLifePoints_1 ) ;
6041: LD_EXP 16
6045: PPUSH
6046: CALL_OW 256
6050: PPUSH
6051: LD_STRING 01_JMMLifePoints_1
6053: PPUSH
6054: CALL_OW 39
// RemoveUnit ( JMM ) ;
6058: LD_EXP 16
6062: PPUSH
6063: CALL_OW 64
// to_reward := [ JMM ] ;
6067: LD_ADDR_VAR 0 2
6071: PUSH
6072: LD_EXP 16
6076: PUSH
6077: EMPTY
6078: LIST
6079: ST_TO_ADDR
// if bobby_saved then
6080: LD_EXP 12
6084: IFFALSE 6102
// to_reward := to_reward ^ Bobby ;
6086: LD_ADDR_VAR 0 2
6090: PUSH
6091: LD_VAR 0 2
6095: PUSH
6096: LD_EXP 17
6100: ADD
6101: ST_TO_ADDR
// if cyrus_saved then
6102: LD_EXP 13
6106: IFFALSE 6124
// to_reward := to_reward ^ Cyrus ;
6108: LD_ADDR_VAR 0 2
6112: PUSH
6113: LD_VAR 0 2
6117: PUSH
6118: LD_EXP 18
6122: ADD
6123: ST_TO_ADDR
// m1 := true ;
6124: LD_ADDR_VAR 0 4
6128: PUSH
6129: LD_INT 1
6131: ST_TO_ADDR
// m2 := bobby_saved ;
6132: LD_ADDR_VAR 0 5
6136: PUSH
6137: LD_EXP 12
6141: ST_TO_ADDR
// m3 := cyrus_saved ;
6142: LD_ADDR_VAR 0 6
6146: PUSH
6147: LD_EXP 13
6151: ST_TO_ADDR
// AddMedal ( JMM , 1 ) ;
6152: LD_STRING JMM
6154: PPUSH
6155: LD_INT 1
6157: PPUSH
6158: CALL_OW 101
// if not bobby_in_squad then
6162: LD_EXP 4
6166: NOT
6167: IFFALSE 6180
// AddMedal ( Bobby , - 1 ) ;
6169: LD_STRING Bobby
6171: PPUSH
6172: LD_INT 1
6174: NEG
6175: PPUSH
6176: CALL_OW 101
// if not bobby_saved and ( IsDying ( Bobby ) or IsDead ( Bobby ) ) then
6180: LD_EXP 12
6184: NOT
6185: PUSH
6186: LD_EXP 17
6190: PPUSH
6191: CALL_OW 303
6195: PUSH
6196: LD_EXP 17
6200: PPUSH
6201: CALL_OW 301
6205: OR
6206: AND
6207: IFFALSE 6220
// AddMedal ( Bobby , - 2 ) ;
6209: LD_STRING Bobby
6211: PPUSH
6212: LD_INT 2
6214: NEG
6215: PPUSH
6216: CALL_OW 101
// if not cyrus_in_squad then
6220: LD_EXP 7
6224: NOT
6225: IFFALSE 6238
// AddMedal ( Cyrus , - 1 ) ;
6227: LD_STRING Cyrus
6229: PPUSH
6230: LD_INT 1
6232: NEG
6233: PPUSH
6234: CALL_OW 101
// if not cyrus_saved and ( IsDying ( Cyrus ) or IsDead ( Cyrus ) ) then
6238: LD_EXP 13
6242: NOT
6243: PUSH
6244: LD_EXP 18
6248: PPUSH
6249: CALL_OW 303
6253: PUSH
6254: LD_EXP 18
6258: PPUSH
6259: CALL_OW 301
6263: OR
6264: AND
6265: IFFALSE 6278
// AddMedal ( Cyrus , - 2 ) ;
6267: LD_STRING Cyrus
6269: PPUSH
6270: LD_INT 2
6272: NEG
6273: PPUSH
6274: CALL_OW 101
// if Difficulty = 3 and m1 and m2 and m3 then
6278: LD_OWVAR 67
6282: PUSH
6283: LD_INT 3
6285: EQUAL
6286: PUSH
6287: LD_VAR 0 4
6291: AND
6292: PUSH
6293: LD_VAR 0 5
6297: AND
6298: PUSH
6299: LD_VAR 0 6
6303: AND
6304: IFFALSE 6316
// SetAchievementEX ( ACH_AMER , 1 ) ;
6306: LD_STRING ACH_AMER
6308: PPUSH
6309: LD_INT 1
6311: PPUSH
6312: CALL_OW 564
// GiveMedals ( MAIN ) ;
6316: LD_STRING MAIN
6318: PPUSH
6319: CALL_OW 102
// RewardPeople ( to_reward ) ;
6323: LD_VAR 0 2
6327: PPUSH
6328: CALL_OW 43
// if bobby_saved then
6332: LD_EXP 12
6336: IFFALSE 6356
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
6338: LD_EXP 17
6342: PPUSH
6343: LD_EXP 2
6347: PUSH
6348: LD_STRING Bobby
6350: STR
6351: PPUSH
6352: CALL_OW 38
// if cyrus_saved then
6356: LD_EXP 13
6360: IFFALSE 6380
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
6362: LD_EXP 18
6366: PPUSH
6367: LD_EXP 2
6371: PUSH
6372: LD_STRING Cyrus
6374: STR
6375: PPUSH
6376: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
6380: LD_EXP 16
6384: PPUSH
6385: LD_EXP 2
6389: PUSH
6390: LD_STRING JMM
6392: STR
6393: PPUSH
6394: CALL_OW 38
// if tick <= 3 3$00 then
6398: LD_OWVAR 1
6402: PUSH
6403: LD_INT 6300
6405: LESSEQUAL
6406: IFFALSE 6415
// SetAchievement ( ACH_ASPEED_1 ) ;
6408: LD_STRING ACH_ASPEED_1
6410: PPUSH
6411: CALL_OW 543
// YouWin ;
6415: CALL_OW 103
// end ; end_of_file end_of_file
6419: PPOPN 6
6421: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
6422: LD_VAR 0 2
6426: PUSH
6427: LD_INT 100
6429: EQUAL
6430: IFFALSE 7379
// begin if not StreamModeActive then
6432: LD_EXP 27
6436: NOT
6437: IFFALSE 6447
// StreamModeActive := true ;
6439: LD_ADDR_EXP 27
6443: PUSH
6444: LD_INT 1
6446: ST_TO_ADDR
// if p3 = 0 then
6447: LD_VAR 0 3
6451: PUSH
6452: LD_INT 0
6454: EQUAL
6455: IFFALSE 6461
// InitStreamMode ;
6457: CALL 7537 0 0
// if p3 = 1 then
6461: LD_VAR 0 3
6465: PUSH
6466: LD_INT 1
6468: EQUAL
6469: IFFALSE 6479
// sRocket := true ;
6471: LD_ADDR_EXP 32
6475: PUSH
6476: LD_INT 1
6478: ST_TO_ADDR
// if p3 = 2 then
6479: LD_VAR 0 3
6483: PUSH
6484: LD_INT 2
6486: EQUAL
6487: IFFALSE 6497
// sSpeed := true ;
6489: LD_ADDR_EXP 31
6493: PUSH
6494: LD_INT 1
6496: ST_TO_ADDR
// if p3 = 3 then
6497: LD_VAR 0 3
6501: PUSH
6502: LD_INT 3
6504: EQUAL
6505: IFFALSE 6515
// sEngine := true ;
6507: LD_ADDR_EXP 33
6511: PUSH
6512: LD_INT 1
6514: ST_TO_ADDR
// if p3 = 4 then
6515: LD_VAR 0 3
6519: PUSH
6520: LD_INT 4
6522: EQUAL
6523: IFFALSE 6533
// sSpec := true ;
6525: LD_ADDR_EXP 30
6529: PUSH
6530: LD_INT 1
6532: ST_TO_ADDR
// if p3 = 5 then
6533: LD_VAR 0 3
6537: PUSH
6538: LD_INT 5
6540: EQUAL
6541: IFFALSE 6551
// sLevel := true ;
6543: LD_ADDR_EXP 34
6547: PUSH
6548: LD_INT 1
6550: ST_TO_ADDR
// if p3 = 6 then
6551: LD_VAR 0 3
6555: PUSH
6556: LD_INT 6
6558: EQUAL
6559: IFFALSE 6569
// sArmoury := true ;
6561: LD_ADDR_EXP 35
6565: PUSH
6566: LD_INT 1
6568: ST_TO_ADDR
// if p3 = 7 then
6569: LD_VAR 0 3
6573: PUSH
6574: LD_INT 7
6576: EQUAL
6577: IFFALSE 6587
// sRadar := true ;
6579: LD_ADDR_EXP 36
6583: PUSH
6584: LD_INT 1
6586: ST_TO_ADDR
// if p3 = 8 then
6587: LD_VAR 0 3
6591: PUSH
6592: LD_INT 8
6594: EQUAL
6595: IFFALSE 6605
// sBunker := true ;
6597: LD_ADDR_EXP 37
6601: PUSH
6602: LD_INT 1
6604: ST_TO_ADDR
// if p3 = 9 then
6605: LD_VAR 0 3
6609: PUSH
6610: LD_INT 9
6612: EQUAL
6613: IFFALSE 6623
// sHack := true ;
6615: LD_ADDR_EXP 38
6619: PUSH
6620: LD_INT 1
6622: ST_TO_ADDR
// if p3 = 10 then
6623: LD_VAR 0 3
6627: PUSH
6628: LD_INT 10
6630: EQUAL
6631: IFFALSE 6641
// sFire := true ;
6633: LD_ADDR_EXP 39
6637: PUSH
6638: LD_INT 1
6640: ST_TO_ADDR
// if p3 = 11 then
6641: LD_VAR 0 3
6645: PUSH
6646: LD_INT 11
6648: EQUAL
6649: IFFALSE 6659
// sRefresh := true ;
6651: LD_ADDR_EXP 40
6655: PUSH
6656: LD_INT 1
6658: ST_TO_ADDR
// if p3 = 12 then
6659: LD_VAR 0 3
6663: PUSH
6664: LD_INT 12
6666: EQUAL
6667: IFFALSE 6677
// sExp := true ;
6669: LD_ADDR_EXP 41
6673: PUSH
6674: LD_INT 1
6676: ST_TO_ADDR
// if p3 = 13 then
6677: LD_VAR 0 3
6681: PUSH
6682: LD_INT 13
6684: EQUAL
6685: IFFALSE 6695
// sDepot := true ;
6687: LD_ADDR_EXP 42
6691: PUSH
6692: LD_INT 1
6694: ST_TO_ADDR
// if p3 = 14 then
6695: LD_VAR 0 3
6699: PUSH
6700: LD_INT 14
6702: EQUAL
6703: IFFALSE 6713
// sFlag := true ;
6705: LD_ADDR_EXP 43
6709: PUSH
6710: LD_INT 1
6712: ST_TO_ADDR
// if p3 = 15 then
6713: LD_VAR 0 3
6717: PUSH
6718: LD_INT 15
6720: EQUAL
6721: IFFALSE 6731
// sKamikadze := true ;
6723: LD_ADDR_EXP 51
6727: PUSH
6728: LD_INT 1
6730: ST_TO_ADDR
// if p3 = 16 then
6731: LD_VAR 0 3
6735: PUSH
6736: LD_INT 16
6738: EQUAL
6739: IFFALSE 6749
// sTroll := true ;
6741: LD_ADDR_EXP 52
6745: PUSH
6746: LD_INT 1
6748: ST_TO_ADDR
// if p3 = 17 then
6749: LD_VAR 0 3
6753: PUSH
6754: LD_INT 17
6756: EQUAL
6757: IFFALSE 6767
// sSlow := true ;
6759: LD_ADDR_EXP 53
6763: PUSH
6764: LD_INT 1
6766: ST_TO_ADDR
// if p3 = 18 then
6767: LD_VAR 0 3
6771: PUSH
6772: LD_INT 18
6774: EQUAL
6775: IFFALSE 6785
// sLack := true ;
6777: LD_ADDR_EXP 54
6781: PUSH
6782: LD_INT 1
6784: ST_TO_ADDR
// if p3 = 19 then
6785: LD_VAR 0 3
6789: PUSH
6790: LD_INT 19
6792: EQUAL
6793: IFFALSE 6803
// sTank := true ;
6795: LD_ADDR_EXP 56
6799: PUSH
6800: LD_INT 1
6802: ST_TO_ADDR
// if p3 = 20 then
6803: LD_VAR 0 3
6807: PUSH
6808: LD_INT 20
6810: EQUAL
6811: IFFALSE 6821
// sRemote := true ;
6813: LD_ADDR_EXP 57
6817: PUSH
6818: LD_INT 1
6820: ST_TO_ADDR
// if p3 = 21 then
6821: LD_VAR 0 3
6825: PUSH
6826: LD_INT 21
6828: EQUAL
6829: IFFALSE 6839
// sPowell := true ;
6831: LD_ADDR_EXP 58
6835: PUSH
6836: LD_INT 1
6838: ST_TO_ADDR
// if p3 = 22 then
6839: LD_VAR 0 3
6843: PUSH
6844: LD_INT 22
6846: EQUAL
6847: IFFALSE 6857
// sTeleport := true ;
6849: LD_ADDR_EXP 61
6853: PUSH
6854: LD_INT 1
6856: ST_TO_ADDR
// if p3 = 23 then
6857: LD_VAR 0 3
6861: PUSH
6862: LD_INT 23
6864: EQUAL
6865: IFFALSE 6875
// sOilTower := true ;
6867: LD_ADDR_EXP 63
6871: PUSH
6872: LD_INT 1
6874: ST_TO_ADDR
// if p3 = 24 then
6875: LD_VAR 0 3
6879: PUSH
6880: LD_INT 24
6882: EQUAL
6883: IFFALSE 6893
// sShovel := true ;
6885: LD_ADDR_EXP 64
6889: PUSH
6890: LD_INT 1
6892: ST_TO_ADDR
// if p3 = 25 then
6893: LD_VAR 0 3
6897: PUSH
6898: LD_INT 25
6900: EQUAL
6901: IFFALSE 6911
// sSheik := true ;
6903: LD_ADDR_EXP 65
6907: PUSH
6908: LD_INT 1
6910: ST_TO_ADDR
// if p3 = 26 then
6911: LD_VAR 0 3
6915: PUSH
6916: LD_INT 26
6918: EQUAL
6919: IFFALSE 6929
// sEarthquake := true ;
6921: LD_ADDR_EXP 67
6925: PUSH
6926: LD_INT 1
6928: ST_TO_ADDR
// if p3 = 27 then
6929: LD_VAR 0 3
6933: PUSH
6934: LD_INT 27
6936: EQUAL
6937: IFFALSE 6947
// sAI := true ;
6939: LD_ADDR_EXP 68
6943: PUSH
6944: LD_INT 1
6946: ST_TO_ADDR
// if p3 = 28 then
6947: LD_VAR 0 3
6951: PUSH
6952: LD_INT 28
6954: EQUAL
6955: IFFALSE 6965
// sCargo := true ;
6957: LD_ADDR_EXP 71
6961: PUSH
6962: LD_INT 1
6964: ST_TO_ADDR
// if p3 = 29 then
6965: LD_VAR 0 3
6969: PUSH
6970: LD_INT 29
6972: EQUAL
6973: IFFALSE 6983
// sDLaser := true ;
6975: LD_ADDR_EXP 72
6979: PUSH
6980: LD_INT 1
6982: ST_TO_ADDR
// if p3 = 30 then
6983: LD_VAR 0 3
6987: PUSH
6988: LD_INT 30
6990: EQUAL
6991: IFFALSE 7001
// sExchange := true ;
6993: LD_ADDR_EXP 73
6997: PUSH
6998: LD_INT 1
7000: ST_TO_ADDR
// if p3 = 31 then
7001: LD_VAR 0 3
7005: PUSH
7006: LD_INT 31
7008: EQUAL
7009: IFFALSE 7019
// sFac := true ;
7011: LD_ADDR_EXP 74
7015: PUSH
7016: LD_INT 1
7018: ST_TO_ADDR
// if p3 = 32 then
7019: LD_VAR 0 3
7023: PUSH
7024: LD_INT 32
7026: EQUAL
7027: IFFALSE 7037
// sPower := true ;
7029: LD_ADDR_EXP 75
7033: PUSH
7034: LD_INT 1
7036: ST_TO_ADDR
// if p3 = 33 then
7037: LD_VAR 0 3
7041: PUSH
7042: LD_INT 33
7044: EQUAL
7045: IFFALSE 7055
// sRandom := true ;
7047: LD_ADDR_EXP 76
7051: PUSH
7052: LD_INT 1
7054: ST_TO_ADDR
// if p3 = 34 then
7055: LD_VAR 0 3
7059: PUSH
7060: LD_INT 34
7062: EQUAL
7063: IFFALSE 7073
// sShield := true ;
7065: LD_ADDR_EXP 77
7069: PUSH
7070: LD_INT 1
7072: ST_TO_ADDR
// if p3 = 35 then
7073: LD_VAR 0 3
7077: PUSH
7078: LD_INT 35
7080: EQUAL
7081: IFFALSE 7091
// sTime := true ;
7083: LD_ADDR_EXP 78
7087: PUSH
7088: LD_INT 1
7090: ST_TO_ADDR
// if p3 = 36 then
7091: LD_VAR 0 3
7095: PUSH
7096: LD_INT 36
7098: EQUAL
7099: IFFALSE 7109
// sTools := true ;
7101: LD_ADDR_EXP 79
7105: PUSH
7106: LD_INT 1
7108: ST_TO_ADDR
// if p3 = 101 then
7109: LD_VAR 0 3
7113: PUSH
7114: LD_INT 101
7116: EQUAL
7117: IFFALSE 7127
// sSold := true ;
7119: LD_ADDR_EXP 44
7123: PUSH
7124: LD_INT 1
7126: ST_TO_ADDR
// if p3 = 102 then
7127: LD_VAR 0 3
7131: PUSH
7132: LD_INT 102
7134: EQUAL
7135: IFFALSE 7145
// sDiff := true ;
7137: LD_ADDR_EXP 45
7141: PUSH
7142: LD_INT 1
7144: ST_TO_ADDR
// if p3 = 103 then
7145: LD_VAR 0 3
7149: PUSH
7150: LD_INT 103
7152: EQUAL
7153: IFFALSE 7163
// sFog := true ;
7155: LD_ADDR_EXP 48
7159: PUSH
7160: LD_INT 1
7162: ST_TO_ADDR
// if p3 = 104 then
7163: LD_VAR 0 3
7167: PUSH
7168: LD_INT 104
7170: EQUAL
7171: IFFALSE 7181
// sReset := true ;
7173: LD_ADDR_EXP 49
7177: PUSH
7178: LD_INT 1
7180: ST_TO_ADDR
// if p3 = 105 then
7181: LD_VAR 0 3
7185: PUSH
7186: LD_INT 105
7188: EQUAL
7189: IFFALSE 7199
// sSun := true ;
7191: LD_ADDR_EXP 50
7195: PUSH
7196: LD_INT 1
7198: ST_TO_ADDR
// if p3 = 106 then
7199: LD_VAR 0 3
7203: PUSH
7204: LD_INT 106
7206: EQUAL
7207: IFFALSE 7217
// sTiger := true ;
7209: LD_ADDR_EXP 46
7213: PUSH
7214: LD_INT 1
7216: ST_TO_ADDR
// if p3 = 107 then
7217: LD_VAR 0 3
7221: PUSH
7222: LD_INT 107
7224: EQUAL
7225: IFFALSE 7235
// sBomb := true ;
7227: LD_ADDR_EXP 47
7231: PUSH
7232: LD_INT 1
7234: ST_TO_ADDR
// if p3 = 108 then
7235: LD_VAR 0 3
7239: PUSH
7240: LD_INT 108
7242: EQUAL
7243: IFFALSE 7253
// sWound := true ;
7245: LD_ADDR_EXP 55
7249: PUSH
7250: LD_INT 1
7252: ST_TO_ADDR
// if p3 = 109 then
7253: LD_VAR 0 3
7257: PUSH
7258: LD_INT 109
7260: EQUAL
7261: IFFALSE 7271
// sBetray := true ;
7263: LD_ADDR_EXP 59
7267: PUSH
7268: LD_INT 1
7270: ST_TO_ADDR
// if p3 = 110 then
7271: LD_VAR 0 3
7275: PUSH
7276: LD_INT 110
7278: EQUAL
7279: IFFALSE 7289
// sContamin := true ;
7281: LD_ADDR_EXP 60
7285: PUSH
7286: LD_INT 1
7288: ST_TO_ADDR
// if p3 = 111 then
7289: LD_VAR 0 3
7293: PUSH
7294: LD_INT 111
7296: EQUAL
7297: IFFALSE 7307
// sOil := true ;
7299: LD_ADDR_EXP 62
7303: PUSH
7304: LD_INT 1
7306: ST_TO_ADDR
// if p3 = 112 then
7307: LD_VAR 0 3
7311: PUSH
7312: LD_INT 112
7314: EQUAL
7315: IFFALSE 7325
// sStu := true ;
7317: LD_ADDR_EXP 66
7321: PUSH
7322: LD_INT 1
7324: ST_TO_ADDR
// if p3 = 113 then
7325: LD_VAR 0 3
7329: PUSH
7330: LD_INT 113
7332: EQUAL
7333: IFFALSE 7343
// sBazooka := true ;
7335: LD_ADDR_EXP 69
7339: PUSH
7340: LD_INT 1
7342: ST_TO_ADDR
// if p3 = 114 then
7343: LD_VAR 0 3
7347: PUSH
7348: LD_INT 114
7350: EQUAL
7351: IFFALSE 7361
// sMortar := true ;
7353: LD_ADDR_EXP 70
7357: PUSH
7358: LD_INT 1
7360: ST_TO_ADDR
// if p3 = 115 then
7361: LD_VAR 0 3
7365: PUSH
7366: LD_INT 115
7368: EQUAL
7369: IFFALSE 7379
// sRanger := true ;
7371: LD_ADDR_EXP 80
7375: PUSH
7376: LD_INT 1
7378: ST_TO_ADDR
// end ; if p2 = 101 then
7379: LD_VAR 0 2
7383: PUSH
7384: LD_INT 101
7386: EQUAL
7387: IFFALSE 7515
// begin case p3 of 1 :
7389: LD_VAR 0 3
7393: PUSH
7394: LD_INT 1
7396: DOUBLE
7397: EQUAL
7398: IFTRUE 7402
7400: GO 7409
7402: POP
// hHackUnlimitedResources ; 2 :
7403: CALL 18550 0 0
7407: GO 7515
7409: LD_INT 2
7411: DOUBLE
7412: EQUAL
7413: IFTRUE 7417
7415: GO 7424
7417: POP
// hHackSetLevel10 ; 3 :
7418: CALL 18683 0 0
7422: GO 7515
7424: LD_INT 3
7426: DOUBLE
7427: EQUAL
7428: IFTRUE 7432
7430: GO 7439
7432: POP
// hHackSetLevel10YourUnits ; 4 :
7433: CALL 18768 0 0
7437: GO 7515
7439: LD_INT 4
7441: DOUBLE
7442: EQUAL
7443: IFTRUE 7447
7445: GO 7454
7447: POP
// hHackInvincible ; 5 :
7448: CALL 19216 0 0
7452: GO 7515
7454: LD_INT 5
7456: DOUBLE
7457: EQUAL
7458: IFTRUE 7462
7460: GO 7469
7462: POP
// hHackInvisible ; 6 :
7463: CALL 19327 0 0
7467: GO 7515
7469: LD_INT 6
7471: DOUBLE
7472: EQUAL
7473: IFTRUE 7477
7475: GO 7484
7477: POP
// hHackChangeYourSide ; 7 :
7478: CALL 19384 0 0
7482: GO 7515
7484: LD_INT 7
7486: DOUBLE
7487: EQUAL
7488: IFTRUE 7492
7490: GO 7499
7492: POP
// hHackChangeUnitSide ; 8 :
7493: CALL 19426 0 0
7497: GO 7515
7499: LD_INT 8
7501: DOUBLE
7502: EQUAL
7503: IFTRUE 7507
7505: GO 7514
7507: POP
// hHackFog ; end ;
7508: CALL 19527 0 0
7512: GO 7515
7514: POP
// end ; end ;
7515: PPOPN 6
7517: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
7518: GO 7520
7520: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
7521: LD_STRING initStreamRollete();
7523: PPUSH
7524: CALL_OW 559
// InitStreamMode ;
7528: CALL 7537 0 0
// DefineStreamItems ( ) ;
7532: CALL 7977 0 0
// end ;
7536: END
// function InitStreamMode ; begin
7537: LD_INT 0
7539: PPUSH
// streamModeActive := false ;
7540: LD_ADDR_EXP 27
7544: PUSH
7545: LD_INT 0
7547: ST_TO_ADDR
// normalCounter := 36 ;
7548: LD_ADDR_EXP 28
7552: PUSH
7553: LD_INT 36
7555: ST_TO_ADDR
// hardcoreCounter := 16 ;
7556: LD_ADDR_EXP 29
7560: PUSH
7561: LD_INT 16
7563: ST_TO_ADDR
// sRocket := false ;
7564: LD_ADDR_EXP 32
7568: PUSH
7569: LD_INT 0
7571: ST_TO_ADDR
// sSpeed := false ;
7572: LD_ADDR_EXP 31
7576: PUSH
7577: LD_INT 0
7579: ST_TO_ADDR
// sEngine := false ;
7580: LD_ADDR_EXP 33
7584: PUSH
7585: LD_INT 0
7587: ST_TO_ADDR
// sSpec := false ;
7588: LD_ADDR_EXP 30
7592: PUSH
7593: LD_INT 0
7595: ST_TO_ADDR
// sLevel := false ;
7596: LD_ADDR_EXP 34
7600: PUSH
7601: LD_INT 0
7603: ST_TO_ADDR
// sArmoury := false ;
7604: LD_ADDR_EXP 35
7608: PUSH
7609: LD_INT 0
7611: ST_TO_ADDR
// sRadar := false ;
7612: LD_ADDR_EXP 36
7616: PUSH
7617: LD_INT 0
7619: ST_TO_ADDR
// sBunker := false ;
7620: LD_ADDR_EXP 37
7624: PUSH
7625: LD_INT 0
7627: ST_TO_ADDR
// sHack := false ;
7628: LD_ADDR_EXP 38
7632: PUSH
7633: LD_INT 0
7635: ST_TO_ADDR
// sFire := false ;
7636: LD_ADDR_EXP 39
7640: PUSH
7641: LD_INT 0
7643: ST_TO_ADDR
// sRefresh := false ;
7644: LD_ADDR_EXP 40
7648: PUSH
7649: LD_INT 0
7651: ST_TO_ADDR
// sExp := false ;
7652: LD_ADDR_EXP 41
7656: PUSH
7657: LD_INT 0
7659: ST_TO_ADDR
// sDepot := false ;
7660: LD_ADDR_EXP 42
7664: PUSH
7665: LD_INT 0
7667: ST_TO_ADDR
// sFlag := false ;
7668: LD_ADDR_EXP 43
7672: PUSH
7673: LD_INT 0
7675: ST_TO_ADDR
// sKamikadze := false ;
7676: LD_ADDR_EXP 51
7680: PUSH
7681: LD_INT 0
7683: ST_TO_ADDR
// sTroll := false ;
7684: LD_ADDR_EXP 52
7688: PUSH
7689: LD_INT 0
7691: ST_TO_ADDR
// sSlow := false ;
7692: LD_ADDR_EXP 53
7696: PUSH
7697: LD_INT 0
7699: ST_TO_ADDR
// sLack := false ;
7700: LD_ADDR_EXP 54
7704: PUSH
7705: LD_INT 0
7707: ST_TO_ADDR
// sTank := false ;
7708: LD_ADDR_EXP 56
7712: PUSH
7713: LD_INT 0
7715: ST_TO_ADDR
// sRemote := false ;
7716: LD_ADDR_EXP 57
7720: PUSH
7721: LD_INT 0
7723: ST_TO_ADDR
// sPowell := false ;
7724: LD_ADDR_EXP 58
7728: PUSH
7729: LD_INT 0
7731: ST_TO_ADDR
// sTeleport := false ;
7732: LD_ADDR_EXP 61
7736: PUSH
7737: LD_INT 0
7739: ST_TO_ADDR
// sOilTower := false ;
7740: LD_ADDR_EXP 63
7744: PUSH
7745: LD_INT 0
7747: ST_TO_ADDR
// sShovel := false ;
7748: LD_ADDR_EXP 64
7752: PUSH
7753: LD_INT 0
7755: ST_TO_ADDR
// sSheik := false ;
7756: LD_ADDR_EXP 65
7760: PUSH
7761: LD_INT 0
7763: ST_TO_ADDR
// sEarthquake := false ;
7764: LD_ADDR_EXP 67
7768: PUSH
7769: LD_INT 0
7771: ST_TO_ADDR
// sAI := false ;
7772: LD_ADDR_EXP 68
7776: PUSH
7777: LD_INT 0
7779: ST_TO_ADDR
// sCargo := false ;
7780: LD_ADDR_EXP 71
7784: PUSH
7785: LD_INT 0
7787: ST_TO_ADDR
// sDLaser := false ;
7788: LD_ADDR_EXP 72
7792: PUSH
7793: LD_INT 0
7795: ST_TO_ADDR
// sExchange := false ;
7796: LD_ADDR_EXP 73
7800: PUSH
7801: LD_INT 0
7803: ST_TO_ADDR
// sFac := false ;
7804: LD_ADDR_EXP 74
7808: PUSH
7809: LD_INT 0
7811: ST_TO_ADDR
// sPower := false ;
7812: LD_ADDR_EXP 75
7816: PUSH
7817: LD_INT 0
7819: ST_TO_ADDR
// sRandom := false ;
7820: LD_ADDR_EXP 76
7824: PUSH
7825: LD_INT 0
7827: ST_TO_ADDR
// sShield := false ;
7828: LD_ADDR_EXP 77
7832: PUSH
7833: LD_INT 0
7835: ST_TO_ADDR
// sTime := false ;
7836: LD_ADDR_EXP 78
7840: PUSH
7841: LD_INT 0
7843: ST_TO_ADDR
// sTools := false ;
7844: LD_ADDR_EXP 79
7848: PUSH
7849: LD_INT 0
7851: ST_TO_ADDR
// sSold := false ;
7852: LD_ADDR_EXP 44
7856: PUSH
7857: LD_INT 0
7859: ST_TO_ADDR
// sDiff := false ;
7860: LD_ADDR_EXP 45
7864: PUSH
7865: LD_INT 0
7867: ST_TO_ADDR
// sFog := false ;
7868: LD_ADDR_EXP 48
7872: PUSH
7873: LD_INT 0
7875: ST_TO_ADDR
// sReset := false ;
7876: LD_ADDR_EXP 49
7880: PUSH
7881: LD_INT 0
7883: ST_TO_ADDR
// sSun := false ;
7884: LD_ADDR_EXP 50
7888: PUSH
7889: LD_INT 0
7891: ST_TO_ADDR
// sTiger := false ;
7892: LD_ADDR_EXP 46
7896: PUSH
7897: LD_INT 0
7899: ST_TO_ADDR
// sBomb := false ;
7900: LD_ADDR_EXP 47
7904: PUSH
7905: LD_INT 0
7907: ST_TO_ADDR
// sWound := false ;
7908: LD_ADDR_EXP 55
7912: PUSH
7913: LD_INT 0
7915: ST_TO_ADDR
// sBetray := false ;
7916: LD_ADDR_EXP 59
7920: PUSH
7921: LD_INT 0
7923: ST_TO_ADDR
// sContamin := false ;
7924: LD_ADDR_EXP 60
7928: PUSH
7929: LD_INT 0
7931: ST_TO_ADDR
// sOil := false ;
7932: LD_ADDR_EXP 62
7936: PUSH
7937: LD_INT 0
7939: ST_TO_ADDR
// sStu := false ;
7940: LD_ADDR_EXP 66
7944: PUSH
7945: LD_INT 0
7947: ST_TO_ADDR
// sBazooka := false ;
7948: LD_ADDR_EXP 69
7952: PUSH
7953: LD_INT 0
7955: ST_TO_ADDR
// sMortar := false ;
7956: LD_ADDR_EXP 70
7960: PUSH
7961: LD_INT 0
7963: ST_TO_ADDR
// sRanger := false ;
7964: LD_ADDR_EXP 80
7968: PUSH
7969: LD_INT 0
7971: ST_TO_ADDR
// end ;
7972: LD_VAR 0 1
7976: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
7977: LD_INT 0
7979: PPUSH
7980: PPUSH
7981: PPUSH
7982: PPUSH
7983: PPUSH
// result := [ ] ;
7984: LD_ADDR_VAR 0 1
7988: PUSH
7989: EMPTY
7990: ST_TO_ADDR
// if campaign_id = 1 then
7991: LD_OWVAR 69
7995: PUSH
7996: LD_INT 1
7998: EQUAL
7999: IFFALSE 10937
// begin case mission_number of 1 :
8001: LD_OWVAR 70
8005: PUSH
8006: LD_INT 1
8008: DOUBLE
8009: EQUAL
8010: IFTRUE 8014
8012: GO 8078
8014: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
8015: LD_ADDR_VAR 0 1
8019: PUSH
8020: LD_INT 2
8022: PUSH
8023: LD_INT 4
8025: PUSH
8026: LD_INT 11
8028: PUSH
8029: LD_INT 12
8031: PUSH
8032: LD_INT 15
8034: PUSH
8035: LD_INT 16
8037: PUSH
8038: LD_INT 22
8040: PUSH
8041: LD_INT 23
8043: PUSH
8044: LD_INT 26
8046: PUSH
8047: EMPTY
8048: LIST
8049: LIST
8050: LIST
8051: LIST
8052: LIST
8053: LIST
8054: LIST
8055: LIST
8056: LIST
8057: PUSH
8058: LD_INT 101
8060: PUSH
8061: LD_INT 102
8063: PUSH
8064: LD_INT 106
8066: PUSH
8067: EMPTY
8068: LIST
8069: LIST
8070: LIST
8071: PUSH
8072: EMPTY
8073: LIST
8074: LIST
8075: ST_TO_ADDR
8076: GO 10935
8078: LD_INT 2
8080: DOUBLE
8081: EQUAL
8082: IFTRUE 8086
8084: GO 8158
8086: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
8087: LD_ADDR_VAR 0 1
8091: PUSH
8092: LD_INT 2
8094: PUSH
8095: LD_INT 4
8097: PUSH
8098: LD_INT 11
8100: PUSH
8101: LD_INT 12
8103: PUSH
8104: LD_INT 15
8106: PUSH
8107: LD_INT 16
8109: PUSH
8110: LD_INT 22
8112: PUSH
8113: LD_INT 23
8115: PUSH
8116: LD_INT 26
8118: PUSH
8119: EMPTY
8120: LIST
8121: LIST
8122: LIST
8123: LIST
8124: LIST
8125: LIST
8126: LIST
8127: LIST
8128: LIST
8129: PUSH
8130: LD_INT 101
8132: PUSH
8133: LD_INT 102
8135: PUSH
8136: LD_INT 105
8138: PUSH
8139: LD_INT 106
8141: PUSH
8142: LD_INT 108
8144: PUSH
8145: EMPTY
8146: LIST
8147: LIST
8148: LIST
8149: LIST
8150: LIST
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: ST_TO_ADDR
8156: GO 10935
8158: LD_INT 3
8160: DOUBLE
8161: EQUAL
8162: IFTRUE 8166
8164: GO 8242
8166: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
8167: LD_ADDR_VAR 0 1
8171: PUSH
8172: LD_INT 2
8174: PUSH
8175: LD_INT 4
8177: PUSH
8178: LD_INT 5
8180: PUSH
8181: LD_INT 11
8183: PUSH
8184: LD_INT 12
8186: PUSH
8187: LD_INT 15
8189: PUSH
8190: LD_INT 16
8192: PUSH
8193: LD_INT 22
8195: PUSH
8196: LD_INT 26
8198: PUSH
8199: LD_INT 36
8201: PUSH
8202: EMPTY
8203: LIST
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: LIST
8209: LIST
8210: LIST
8211: LIST
8212: LIST
8213: PUSH
8214: LD_INT 101
8216: PUSH
8217: LD_INT 102
8219: PUSH
8220: LD_INT 105
8222: PUSH
8223: LD_INT 106
8225: PUSH
8226: LD_INT 108
8228: PUSH
8229: EMPTY
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: LIST
8235: PUSH
8236: EMPTY
8237: LIST
8238: LIST
8239: ST_TO_ADDR
8240: GO 10935
8242: LD_INT 4
8244: DOUBLE
8245: EQUAL
8246: IFTRUE 8250
8248: GO 8334
8250: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
8251: LD_ADDR_VAR 0 1
8255: PUSH
8256: LD_INT 2
8258: PUSH
8259: LD_INT 4
8261: PUSH
8262: LD_INT 5
8264: PUSH
8265: LD_INT 8
8267: PUSH
8268: LD_INT 11
8270: PUSH
8271: LD_INT 12
8273: PUSH
8274: LD_INT 15
8276: PUSH
8277: LD_INT 16
8279: PUSH
8280: LD_INT 22
8282: PUSH
8283: LD_INT 23
8285: PUSH
8286: LD_INT 26
8288: PUSH
8289: LD_INT 36
8291: PUSH
8292: EMPTY
8293: LIST
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: PUSH
8306: LD_INT 101
8308: PUSH
8309: LD_INT 102
8311: PUSH
8312: LD_INT 105
8314: PUSH
8315: LD_INT 106
8317: PUSH
8318: LD_INT 108
8320: PUSH
8321: EMPTY
8322: LIST
8323: LIST
8324: LIST
8325: LIST
8326: LIST
8327: PUSH
8328: EMPTY
8329: LIST
8330: LIST
8331: ST_TO_ADDR
8332: GO 10935
8334: LD_INT 5
8336: DOUBLE
8337: EQUAL
8338: IFTRUE 8342
8340: GO 8442
8342: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
8343: LD_ADDR_VAR 0 1
8347: PUSH
8348: LD_INT 2
8350: PUSH
8351: LD_INT 4
8353: PUSH
8354: LD_INT 5
8356: PUSH
8357: LD_INT 6
8359: PUSH
8360: LD_INT 8
8362: PUSH
8363: LD_INT 11
8365: PUSH
8366: LD_INT 12
8368: PUSH
8369: LD_INT 15
8371: PUSH
8372: LD_INT 16
8374: PUSH
8375: LD_INT 22
8377: PUSH
8378: LD_INT 23
8380: PUSH
8381: LD_INT 25
8383: PUSH
8384: LD_INT 26
8386: PUSH
8387: LD_INT 36
8389: PUSH
8390: EMPTY
8391: LIST
8392: LIST
8393: LIST
8394: LIST
8395: LIST
8396: LIST
8397: LIST
8398: LIST
8399: LIST
8400: LIST
8401: LIST
8402: LIST
8403: LIST
8404: LIST
8405: PUSH
8406: LD_INT 101
8408: PUSH
8409: LD_INT 102
8411: PUSH
8412: LD_INT 105
8414: PUSH
8415: LD_INT 106
8417: PUSH
8418: LD_INT 108
8420: PUSH
8421: LD_INT 109
8423: PUSH
8424: LD_INT 112
8426: PUSH
8427: EMPTY
8428: LIST
8429: LIST
8430: LIST
8431: LIST
8432: LIST
8433: LIST
8434: LIST
8435: PUSH
8436: EMPTY
8437: LIST
8438: LIST
8439: ST_TO_ADDR
8440: GO 10935
8442: LD_INT 6
8444: DOUBLE
8445: EQUAL
8446: IFTRUE 8450
8448: GO 8570
8450: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
8451: LD_ADDR_VAR 0 1
8455: PUSH
8456: LD_INT 2
8458: PUSH
8459: LD_INT 4
8461: PUSH
8462: LD_INT 5
8464: PUSH
8465: LD_INT 6
8467: PUSH
8468: LD_INT 8
8470: PUSH
8471: LD_INT 11
8473: PUSH
8474: LD_INT 12
8476: PUSH
8477: LD_INT 15
8479: PUSH
8480: LD_INT 16
8482: PUSH
8483: LD_INT 20
8485: PUSH
8486: LD_INT 21
8488: PUSH
8489: LD_INT 22
8491: PUSH
8492: LD_INT 23
8494: PUSH
8495: LD_INT 25
8497: PUSH
8498: LD_INT 26
8500: PUSH
8501: LD_INT 30
8503: PUSH
8504: LD_INT 31
8506: PUSH
8507: LD_INT 32
8509: PUSH
8510: LD_INT 36
8512: PUSH
8513: EMPTY
8514: LIST
8515: LIST
8516: LIST
8517: LIST
8518: LIST
8519: LIST
8520: LIST
8521: LIST
8522: LIST
8523: LIST
8524: LIST
8525: LIST
8526: LIST
8527: LIST
8528: LIST
8529: LIST
8530: LIST
8531: LIST
8532: LIST
8533: PUSH
8534: LD_INT 101
8536: PUSH
8537: LD_INT 102
8539: PUSH
8540: LD_INT 105
8542: PUSH
8543: LD_INT 106
8545: PUSH
8546: LD_INT 108
8548: PUSH
8549: LD_INT 109
8551: PUSH
8552: LD_INT 112
8554: PUSH
8555: EMPTY
8556: LIST
8557: LIST
8558: LIST
8559: LIST
8560: LIST
8561: LIST
8562: LIST
8563: PUSH
8564: EMPTY
8565: LIST
8566: LIST
8567: ST_TO_ADDR
8568: GO 10935
8570: LD_INT 7
8572: DOUBLE
8573: EQUAL
8574: IFTRUE 8578
8576: GO 8678
8578: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
8579: LD_ADDR_VAR 0 1
8583: PUSH
8584: LD_INT 2
8586: PUSH
8587: LD_INT 4
8589: PUSH
8590: LD_INT 5
8592: PUSH
8593: LD_INT 7
8595: PUSH
8596: LD_INT 11
8598: PUSH
8599: LD_INT 12
8601: PUSH
8602: LD_INT 15
8604: PUSH
8605: LD_INT 16
8607: PUSH
8608: LD_INT 20
8610: PUSH
8611: LD_INT 21
8613: PUSH
8614: LD_INT 22
8616: PUSH
8617: LD_INT 23
8619: PUSH
8620: LD_INT 25
8622: PUSH
8623: LD_INT 26
8625: PUSH
8626: EMPTY
8627: LIST
8628: LIST
8629: LIST
8630: LIST
8631: LIST
8632: LIST
8633: LIST
8634: LIST
8635: LIST
8636: LIST
8637: LIST
8638: LIST
8639: LIST
8640: LIST
8641: PUSH
8642: LD_INT 101
8644: PUSH
8645: LD_INT 102
8647: PUSH
8648: LD_INT 103
8650: PUSH
8651: LD_INT 105
8653: PUSH
8654: LD_INT 106
8656: PUSH
8657: LD_INT 108
8659: PUSH
8660: LD_INT 112
8662: PUSH
8663: EMPTY
8664: LIST
8665: LIST
8666: LIST
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: PUSH
8672: EMPTY
8673: LIST
8674: LIST
8675: ST_TO_ADDR
8676: GO 10935
8678: LD_INT 8
8680: DOUBLE
8681: EQUAL
8682: IFTRUE 8686
8684: GO 8814
8686: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
8687: LD_ADDR_VAR 0 1
8691: PUSH
8692: LD_INT 2
8694: PUSH
8695: LD_INT 4
8697: PUSH
8698: LD_INT 5
8700: PUSH
8701: LD_INT 6
8703: PUSH
8704: LD_INT 7
8706: PUSH
8707: LD_INT 8
8709: PUSH
8710: LD_INT 11
8712: PUSH
8713: LD_INT 12
8715: PUSH
8716: LD_INT 15
8718: PUSH
8719: LD_INT 16
8721: PUSH
8722: LD_INT 20
8724: PUSH
8725: LD_INT 21
8727: PUSH
8728: LD_INT 22
8730: PUSH
8731: LD_INT 23
8733: PUSH
8734: LD_INT 25
8736: PUSH
8737: LD_INT 26
8739: PUSH
8740: LD_INT 30
8742: PUSH
8743: LD_INT 31
8745: PUSH
8746: LD_INT 32
8748: PUSH
8749: LD_INT 36
8751: PUSH
8752: EMPTY
8753: LIST
8754: LIST
8755: LIST
8756: LIST
8757: LIST
8758: LIST
8759: LIST
8760: LIST
8761: LIST
8762: LIST
8763: LIST
8764: LIST
8765: LIST
8766: LIST
8767: LIST
8768: LIST
8769: LIST
8770: LIST
8771: LIST
8772: LIST
8773: PUSH
8774: LD_INT 101
8776: PUSH
8777: LD_INT 102
8779: PUSH
8780: LD_INT 103
8782: PUSH
8783: LD_INT 105
8785: PUSH
8786: LD_INT 106
8788: PUSH
8789: LD_INT 108
8791: PUSH
8792: LD_INT 109
8794: PUSH
8795: LD_INT 112
8797: PUSH
8798: EMPTY
8799: LIST
8800: LIST
8801: LIST
8802: LIST
8803: LIST
8804: LIST
8805: LIST
8806: LIST
8807: PUSH
8808: EMPTY
8809: LIST
8810: LIST
8811: ST_TO_ADDR
8812: GO 10935
8814: LD_INT 9
8816: DOUBLE
8817: EQUAL
8818: IFTRUE 8822
8820: GO 8958
8822: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
8823: LD_ADDR_VAR 0 1
8827: PUSH
8828: LD_INT 2
8830: PUSH
8831: LD_INT 4
8833: PUSH
8834: LD_INT 5
8836: PUSH
8837: LD_INT 6
8839: PUSH
8840: LD_INT 7
8842: PUSH
8843: LD_INT 8
8845: PUSH
8846: LD_INT 11
8848: PUSH
8849: LD_INT 12
8851: PUSH
8852: LD_INT 15
8854: PUSH
8855: LD_INT 16
8857: PUSH
8858: LD_INT 20
8860: PUSH
8861: LD_INT 21
8863: PUSH
8864: LD_INT 22
8866: PUSH
8867: LD_INT 23
8869: PUSH
8870: LD_INT 25
8872: PUSH
8873: LD_INT 26
8875: PUSH
8876: LD_INT 28
8878: PUSH
8879: LD_INT 30
8881: PUSH
8882: LD_INT 31
8884: PUSH
8885: LD_INT 32
8887: PUSH
8888: LD_INT 36
8890: PUSH
8891: EMPTY
8892: LIST
8893: LIST
8894: LIST
8895: LIST
8896: LIST
8897: LIST
8898: LIST
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: PUSH
8914: LD_INT 101
8916: PUSH
8917: LD_INT 102
8919: PUSH
8920: LD_INT 103
8922: PUSH
8923: LD_INT 105
8925: PUSH
8926: LD_INT 106
8928: PUSH
8929: LD_INT 108
8931: PUSH
8932: LD_INT 109
8934: PUSH
8935: LD_INT 112
8937: PUSH
8938: LD_INT 114
8940: PUSH
8941: EMPTY
8942: LIST
8943: LIST
8944: LIST
8945: LIST
8946: LIST
8947: LIST
8948: LIST
8949: LIST
8950: LIST
8951: PUSH
8952: EMPTY
8953: LIST
8954: LIST
8955: ST_TO_ADDR
8956: GO 10935
8958: LD_INT 10
8960: DOUBLE
8961: EQUAL
8962: IFTRUE 8966
8964: GO 9150
8966: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
8967: LD_ADDR_VAR 0 1
8971: PUSH
8972: LD_INT 2
8974: PUSH
8975: LD_INT 4
8977: PUSH
8978: LD_INT 5
8980: PUSH
8981: LD_INT 6
8983: PUSH
8984: LD_INT 7
8986: PUSH
8987: LD_INT 8
8989: PUSH
8990: LD_INT 9
8992: PUSH
8993: LD_INT 10
8995: PUSH
8996: LD_INT 11
8998: PUSH
8999: LD_INT 12
9001: PUSH
9002: LD_INT 13
9004: PUSH
9005: LD_INT 14
9007: PUSH
9008: LD_INT 15
9010: PUSH
9011: LD_INT 16
9013: PUSH
9014: LD_INT 17
9016: PUSH
9017: LD_INT 18
9019: PUSH
9020: LD_INT 19
9022: PUSH
9023: LD_INT 20
9025: PUSH
9026: LD_INT 21
9028: PUSH
9029: LD_INT 22
9031: PUSH
9032: LD_INT 23
9034: PUSH
9035: LD_INT 24
9037: PUSH
9038: LD_INT 25
9040: PUSH
9041: LD_INT 26
9043: PUSH
9044: LD_INT 28
9046: PUSH
9047: LD_INT 30
9049: PUSH
9050: LD_INT 31
9052: PUSH
9053: LD_INT 32
9055: PUSH
9056: LD_INT 36
9058: PUSH
9059: EMPTY
9060: LIST
9061: LIST
9062: LIST
9063: LIST
9064: LIST
9065: LIST
9066: LIST
9067: LIST
9068: LIST
9069: LIST
9070: LIST
9071: LIST
9072: LIST
9073: LIST
9074: LIST
9075: LIST
9076: LIST
9077: LIST
9078: LIST
9079: LIST
9080: LIST
9081: LIST
9082: LIST
9083: LIST
9084: LIST
9085: LIST
9086: LIST
9087: LIST
9088: LIST
9089: PUSH
9090: LD_INT 101
9092: PUSH
9093: LD_INT 102
9095: PUSH
9096: LD_INT 103
9098: PUSH
9099: LD_INT 104
9101: PUSH
9102: LD_INT 105
9104: PUSH
9105: LD_INT 106
9107: PUSH
9108: LD_INT 107
9110: PUSH
9111: LD_INT 108
9113: PUSH
9114: LD_INT 109
9116: PUSH
9117: LD_INT 110
9119: PUSH
9120: LD_INT 111
9122: PUSH
9123: LD_INT 112
9125: PUSH
9126: LD_INT 114
9128: PUSH
9129: EMPTY
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: PUSH
9144: EMPTY
9145: LIST
9146: LIST
9147: ST_TO_ADDR
9148: GO 10935
9150: LD_INT 11
9152: DOUBLE
9153: EQUAL
9154: IFTRUE 9158
9156: GO 9350
9158: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
9159: LD_ADDR_VAR 0 1
9163: PUSH
9164: LD_INT 2
9166: PUSH
9167: LD_INT 3
9169: PUSH
9170: LD_INT 4
9172: PUSH
9173: LD_INT 5
9175: PUSH
9176: LD_INT 6
9178: PUSH
9179: LD_INT 7
9181: PUSH
9182: LD_INT 8
9184: PUSH
9185: LD_INT 9
9187: PUSH
9188: LD_INT 10
9190: PUSH
9191: LD_INT 11
9193: PUSH
9194: LD_INT 12
9196: PUSH
9197: LD_INT 13
9199: PUSH
9200: LD_INT 14
9202: PUSH
9203: LD_INT 15
9205: PUSH
9206: LD_INT 16
9208: PUSH
9209: LD_INT 17
9211: PUSH
9212: LD_INT 18
9214: PUSH
9215: LD_INT 19
9217: PUSH
9218: LD_INT 20
9220: PUSH
9221: LD_INT 21
9223: PUSH
9224: LD_INT 22
9226: PUSH
9227: LD_INT 23
9229: PUSH
9230: LD_INT 24
9232: PUSH
9233: LD_INT 25
9235: PUSH
9236: LD_INT 26
9238: PUSH
9239: LD_INT 28
9241: PUSH
9242: LD_INT 30
9244: PUSH
9245: LD_INT 31
9247: PUSH
9248: LD_INT 32
9250: PUSH
9251: LD_INT 34
9253: PUSH
9254: LD_INT 36
9256: PUSH
9257: EMPTY
9258: LIST
9259: LIST
9260: LIST
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: LIST
9274: LIST
9275: LIST
9276: LIST
9277: LIST
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: LIST
9283: LIST
9284: LIST
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: PUSH
9290: LD_INT 101
9292: PUSH
9293: LD_INT 102
9295: PUSH
9296: LD_INT 103
9298: PUSH
9299: LD_INT 104
9301: PUSH
9302: LD_INT 105
9304: PUSH
9305: LD_INT 106
9307: PUSH
9308: LD_INT 107
9310: PUSH
9311: LD_INT 108
9313: PUSH
9314: LD_INT 109
9316: PUSH
9317: LD_INT 110
9319: PUSH
9320: LD_INT 111
9322: PUSH
9323: LD_INT 112
9325: PUSH
9326: LD_INT 114
9328: PUSH
9329: EMPTY
9330: LIST
9331: LIST
9332: LIST
9333: LIST
9334: LIST
9335: LIST
9336: LIST
9337: LIST
9338: LIST
9339: LIST
9340: LIST
9341: LIST
9342: LIST
9343: PUSH
9344: EMPTY
9345: LIST
9346: LIST
9347: ST_TO_ADDR
9348: GO 10935
9350: LD_INT 12
9352: DOUBLE
9353: EQUAL
9354: IFTRUE 9358
9356: GO 9566
9358: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
9359: LD_ADDR_VAR 0 1
9363: PUSH
9364: LD_INT 1
9366: PUSH
9367: LD_INT 2
9369: PUSH
9370: LD_INT 3
9372: PUSH
9373: LD_INT 4
9375: PUSH
9376: LD_INT 5
9378: PUSH
9379: LD_INT 6
9381: PUSH
9382: LD_INT 7
9384: PUSH
9385: LD_INT 8
9387: PUSH
9388: LD_INT 9
9390: PUSH
9391: LD_INT 10
9393: PUSH
9394: LD_INT 11
9396: PUSH
9397: LD_INT 12
9399: PUSH
9400: LD_INT 13
9402: PUSH
9403: LD_INT 14
9405: PUSH
9406: LD_INT 15
9408: PUSH
9409: LD_INT 16
9411: PUSH
9412: LD_INT 17
9414: PUSH
9415: LD_INT 18
9417: PUSH
9418: LD_INT 19
9420: PUSH
9421: LD_INT 20
9423: PUSH
9424: LD_INT 21
9426: PUSH
9427: LD_INT 22
9429: PUSH
9430: LD_INT 23
9432: PUSH
9433: LD_INT 24
9435: PUSH
9436: LD_INT 25
9438: PUSH
9439: LD_INT 26
9441: PUSH
9442: LD_INT 27
9444: PUSH
9445: LD_INT 28
9447: PUSH
9448: LD_INT 30
9450: PUSH
9451: LD_INT 31
9453: PUSH
9454: LD_INT 32
9456: PUSH
9457: LD_INT 33
9459: PUSH
9460: LD_INT 34
9462: PUSH
9463: LD_INT 36
9465: PUSH
9466: EMPTY
9467: LIST
9468: LIST
9469: LIST
9470: LIST
9471: LIST
9472: LIST
9473: LIST
9474: LIST
9475: LIST
9476: LIST
9477: LIST
9478: LIST
9479: LIST
9480: LIST
9481: LIST
9482: LIST
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: LIST
9488: LIST
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: LIST
9499: LIST
9500: LIST
9501: PUSH
9502: LD_INT 101
9504: PUSH
9505: LD_INT 102
9507: PUSH
9508: LD_INT 103
9510: PUSH
9511: LD_INT 104
9513: PUSH
9514: LD_INT 105
9516: PUSH
9517: LD_INT 106
9519: PUSH
9520: LD_INT 107
9522: PUSH
9523: LD_INT 108
9525: PUSH
9526: LD_INT 109
9528: PUSH
9529: LD_INT 110
9531: PUSH
9532: LD_INT 111
9534: PUSH
9535: LD_INT 112
9537: PUSH
9538: LD_INT 113
9540: PUSH
9541: LD_INT 114
9543: PUSH
9544: EMPTY
9545: LIST
9546: LIST
9547: LIST
9548: LIST
9549: LIST
9550: LIST
9551: LIST
9552: LIST
9553: LIST
9554: LIST
9555: LIST
9556: LIST
9557: LIST
9558: LIST
9559: PUSH
9560: EMPTY
9561: LIST
9562: LIST
9563: ST_TO_ADDR
9564: GO 10935
9566: LD_INT 13
9568: DOUBLE
9569: EQUAL
9570: IFTRUE 9574
9572: GO 9770
9574: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
9575: LD_ADDR_VAR 0 1
9579: PUSH
9580: LD_INT 1
9582: PUSH
9583: LD_INT 2
9585: PUSH
9586: LD_INT 3
9588: PUSH
9589: LD_INT 4
9591: PUSH
9592: LD_INT 5
9594: PUSH
9595: LD_INT 8
9597: PUSH
9598: LD_INT 9
9600: PUSH
9601: LD_INT 10
9603: PUSH
9604: LD_INT 11
9606: PUSH
9607: LD_INT 12
9609: PUSH
9610: LD_INT 14
9612: PUSH
9613: LD_INT 15
9615: PUSH
9616: LD_INT 16
9618: PUSH
9619: LD_INT 17
9621: PUSH
9622: LD_INT 18
9624: PUSH
9625: LD_INT 19
9627: PUSH
9628: LD_INT 20
9630: PUSH
9631: LD_INT 21
9633: PUSH
9634: LD_INT 22
9636: PUSH
9637: LD_INT 23
9639: PUSH
9640: LD_INT 24
9642: PUSH
9643: LD_INT 25
9645: PUSH
9646: LD_INT 26
9648: PUSH
9649: LD_INT 27
9651: PUSH
9652: LD_INT 28
9654: PUSH
9655: LD_INT 30
9657: PUSH
9658: LD_INT 31
9660: PUSH
9661: LD_INT 32
9663: PUSH
9664: LD_INT 33
9666: PUSH
9667: LD_INT 34
9669: PUSH
9670: LD_INT 36
9672: PUSH
9673: EMPTY
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: LIST
9699: LIST
9700: LIST
9701: LIST
9702: LIST
9703: LIST
9704: LIST
9705: PUSH
9706: LD_INT 101
9708: PUSH
9709: LD_INT 102
9711: PUSH
9712: LD_INT 103
9714: PUSH
9715: LD_INT 104
9717: PUSH
9718: LD_INT 105
9720: PUSH
9721: LD_INT 106
9723: PUSH
9724: LD_INT 107
9726: PUSH
9727: LD_INT 108
9729: PUSH
9730: LD_INT 109
9732: PUSH
9733: LD_INT 110
9735: PUSH
9736: LD_INT 111
9738: PUSH
9739: LD_INT 112
9741: PUSH
9742: LD_INT 113
9744: PUSH
9745: LD_INT 114
9747: PUSH
9748: EMPTY
9749: LIST
9750: LIST
9751: LIST
9752: LIST
9753: LIST
9754: LIST
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: PUSH
9764: EMPTY
9765: LIST
9766: LIST
9767: ST_TO_ADDR
9768: GO 10935
9770: LD_INT 14
9772: DOUBLE
9773: EQUAL
9774: IFTRUE 9778
9776: GO 9990
9778: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
9779: LD_ADDR_VAR 0 1
9783: PUSH
9784: LD_INT 1
9786: PUSH
9787: LD_INT 2
9789: PUSH
9790: LD_INT 3
9792: PUSH
9793: LD_INT 4
9795: PUSH
9796: LD_INT 5
9798: PUSH
9799: LD_INT 6
9801: PUSH
9802: LD_INT 7
9804: PUSH
9805: LD_INT 8
9807: PUSH
9808: LD_INT 9
9810: PUSH
9811: LD_INT 10
9813: PUSH
9814: LD_INT 11
9816: PUSH
9817: LD_INT 12
9819: PUSH
9820: LD_INT 13
9822: PUSH
9823: LD_INT 14
9825: PUSH
9826: LD_INT 15
9828: PUSH
9829: LD_INT 16
9831: PUSH
9832: LD_INT 17
9834: PUSH
9835: LD_INT 18
9837: PUSH
9838: LD_INT 19
9840: PUSH
9841: LD_INT 20
9843: PUSH
9844: LD_INT 21
9846: PUSH
9847: LD_INT 22
9849: PUSH
9850: LD_INT 23
9852: PUSH
9853: LD_INT 24
9855: PUSH
9856: LD_INT 25
9858: PUSH
9859: LD_INT 26
9861: PUSH
9862: LD_INT 27
9864: PUSH
9865: LD_INT 28
9867: PUSH
9868: LD_INT 29
9870: PUSH
9871: LD_INT 30
9873: PUSH
9874: LD_INT 31
9876: PUSH
9877: LD_INT 32
9879: PUSH
9880: LD_INT 33
9882: PUSH
9883: LD_INT 34
9885: PUSH
9886: LD_INT 36
9888: PUSH
9889: EMPTY
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: LIST
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: LIST
9906: LIST
9907: LIST
9908: LIST
9909: LIST
9910: LIST
9911: LIST
9912: LIST
9913: LIST
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: LIST
9919: LIST
9920: LIST
9921: LIST
9922: LIST
9923: LIST
9924: LIST
9925: PUSH
9926: LD_INT 101
9928: PUSH
9929: LD_INT 102
9931: PUSH
9932: LD_INT 103
9934: PUSH
9935: LD_INT 104
9937: PUSH
9938: LD_INT 105
9940: PUSH
9941: LD_INT 106
9943: PUSH
9944: LD_INT 107
9946: PUSH
9947: LD_INT 108
9949: PUSH
9950: LD_INT 109
9952: PUSH
9953: LD_INT 110
9955: PUSH
9956: LD_INT 111
9958: PUSH
9959: LD_INT 112
9961: PUSH
9962: LD_INT 113
9964: PUSH
9965: LD_INT 114
9967: PUSH
9968: EMPTY
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: LIST
9982: LIST
9983: PUSH
9984: EMPTY
9985: LIST
9986: LIST
9987: ST_TO_ADDR
9988: GO 10935
9990: LD_INT 15
9992: DOUBLE
9993: EQUAL
9994: IFTRUE 9998
9996: GO 10210
9998: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
9999: LD_ADDR_VAR 0 1
10003: PUSH
10004: LD_INT 1
10006: PUSH
10007: LD_INT 2
10009: PUSH
10010: LD_INT 3
10012: PUSH
10013: LD_INT 4
10015: PUSH
10016: LD_INT 5
10018: PUSH
10019: LD_INT 6
10021: PUSH
10022: LD_INT 7
10024: PUSH
10025: LD_INT 8
10027: PUSH
10028: LD_INT 9
10030: PUSH
10031: LD_INT 10
10033: PUSH
10034: LD_INT 11
10036: PUSH
10037: LD_INT 12
10039: PUSH
10040: LD_INT 13
10042: PUSH
10043: LD_INT 14
10045: PUSH
10046: LD_INT 15
10048: PUSH
10049: LD_INT 16
10051: PUSH
10052: LD_INT 17
10054: PUSH
10055: LD_INT 18
10057: PUSH
10058: LD_INT 19
10060: PUSH
10061: LD_INT 20
10063: PUSH
10064: LD_INT 21
10066: PUSH
10067: LD_INT 22
10069: PUSH
10070: LD_INT 23
10072: PUSH
10073: LD_INT 24
10075: PUSH
10076: LD_INT 25
10078: PUSH
10079: LD_INT 26
10081: PUSH
10082: LD_INT 27
10084: PUSH
10085: LD_INT 28
10087: PUSH
10088: LD_INT 29
10090: PUSH
10091: LD_INT 30
10093: PUSH
10094: LD_INT 31
10096: PUSH
10097: LD_INT 32
10099: PUSH
10100: LD_INT 33
10102: PUSH
10103: LD_INT 34
10105: PUSH
10106: LD_INT 36
10108: PUSH
10109: EMPTY
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: LIST
10120: LIST
10121: LIST
10122: LIST
10123: LIST
10124: LIST
10125: LIST
10126: LIST
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: LIST
10132: LIST
10133: LIST
10134: LIST
10135: LIST
10136: LIST
10137: LIST
10138: LIST
10139: LIST
10140: LIST
10141: LIST
10142: LIST
10143: LIST
10144: LIST
10145: PUSH
10146: LD_INT 101
10148: PUSH
10149: LD_INT 102
10151: PUSH
10152: LD_INT 103
10154: PUSH
10155: LD_INT 104
10157: PUSH
10158: LD_INT 105
10160: PUSH
10161: LD_INT 106
10163: PUSH
10164: LD_INT 107
10166: PUSH
10167: LD_INT 108
10169: PUSH
10170: LD_INT 109
10172: PUSH
10173: LD_INT 110
10175: PUSH
10176: LD_INT 111
10178: PUSH
10179: LD_INT 112
10181: PUSH
10182: LD_INT 113
10184: PUSH
10185: LD_INT 114
10187: PUSH
10188: EMPTY
10189: LIST
10190: LIST
10191: LIST
10192: LIST
10193: LIST
10194: LIST
10195: LIST
10196: LIST
10197: LIST
10198: LIST
10199: LIST
10200: LIST
10201: LIST
10202: LIST
10203: PUSH
10204: EMPTY
10205: LIST
10206: LIST
10207: ST_TO_ADDR
10208: GO 10935
10210: LD_INT 16
10212: DOUBLE
10213: EQUAL
10214: IFTRUE 10218
10216: GO 10342
10218: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
10219: LD_ADDR_VAR 0 1
10223: PUSH
10224: LD_INT 2
10226: PUSH
10227: LD_INT 4
10229: PUSH
10230: LD_INT 5
10232: PUSH
10233: LD_INT 7
10235: PUSH
10236: LD_INT 11
10238: PUSH
10239: LD_INT 12
10241: PUSH
10242: LD_INT 15
10244: PUSH
10245: LD_INT 16
10247: PUSH
10248: LD_INT 20
10250: PUSH
10251: LD_INT 21
10253: PUSH
10254: LD_INT 22
10256: PUSH
10257: LD_INT 23
10259: PUSH
10260: LD_INT 25
10262: PUSH
10263: LD_INT 26
10265: PUSH
10266: LD_INT 30
10268: PUSH
10269: LD_INT 31
10271: PUSH
10272: LD_INT 32
10274: PUSH
10275: LD_INT 33
10277: PUSH
10278: LD_INT 34
10280: PUSH
10281: EMPTY
10282: LIST
10283: LIST
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: LIST
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: PUSH
10302: LD_INT 101
10304: PUSH
10305: LD_INT 102
10307: PUSH
10308: LD_INT 103
10310: PUSH
10311: LD_INT 106
10313: PUSH
10314: LD_INT 108
10316: PUSH
10317: LD_INT 112
10319: PUSH
10320: LD_INT 113
10322: PUSH
10323: LD_INT 114
10325: PUSH
10326: EMPTY
10327: LIST
10328: LIST
10329: LIST
10330: LIST
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: PUSH
10336: EMPTY
10337: LIST
10338: LIST
10339: ST_TO_ADDR
10340: GO 10935
10342: LD_INT 17
10344: DOUBLE
10345: EQUAL
10346: IFTRUE 10350
10348: GO 10562
10350: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
10351: LD_ADDR_VAR 0 1
10355: PUSH
10356: LD_INT 1
10358: PUSH
10359: LD_INT 2
10361: PUSH
10362: LD_INT 3
10364: PUSH
10365: LD_INT 4
10367: PUSH
10368: LD_INT 5
10370: PUSH
10371: LD_INT 6
10373: PUSH
10374: LD_INT 7
10376: PUSH
10377: LD_INT 8
10379: PUSH
10380: LD_INT 9
10382: PUSH
10383: LD_INT 10
10385: PUSH
10386: LD_INT 11
10388: PUSH
10389: LD_INT 12
10391: PUSH
10392: LD_INT 13
10394: PUSH
10395: LD_INT 14
10397: PUSH
10398: LD_INT 15
10400: PUSH
10401: LD_INT 16
10403: PUSH
10404: LD_INT 17
10406: PUSH
10407: LD_INT 18
10409: PUSH
10410: LD_INT 19
10412: PUSH
10413: LD_INT 20
10415: PUSH
10416: LD_INT 21
10418: PUSH
10419: LD_INT 22
10421: PUSH
10422: LD_INT 23
10424: PUSH
10425: LD_INT 24
10427: PUSH
10428: LD_INT 25
10430: PUSH
10431: LD_INT 26
10433: PUSH
10434: LD_INT 27
10436: PUSH
10437: LD_INT 28
10439: PUSH
10440: LD_INT 29
10442: PUSH
10443: LD_INT 30
10445: PUSH
10446: LD_INT 31
10448: PUSH
10449: LD_INT 32
10451: PUSH
10452: LD_INT 33
10454: PUSH
10455: LD_INT 34
10457: PUSH
10458: LD_INT 36
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: LIST
10465: LIST
10466: LIST
10467: LIST
10468: LIST
10469: LIST
10470: LIST
10471: LIST
10472: LIST
10473: LIST
10474: LIST
10475: LIST
10476: LIST
10477: LIST
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: LIST
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: LIST
10492: LIST
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: PUSH
10498: LD_INT 101
10500: PUSH
10501: LD_INT 102
10503: PUSH
10504: LD_INT 103
10506: PUSH
10507: LD_INT 104
10509: PUSH
10510: LD_INT 105
10512: PUSH
10513: LD_INT 106
10515: PUSH
10516: LD_INT 107
10518: PUSH
10519: LD_INT 108
10521: PUSH
10522: LD_INT 109
10524: PUSH
10525: LD_INT 110
10527: PUSH
10528: LD_INT 111
10530: PUSH
10531: LD_INT 112
10533: PUSH
10534: LD_INT 113
10536: PUSH
10537: LD_INT 114
10539: PUSH
10540: EMPTY
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: LIST
10546: LIST
10547: LIST
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: LIST
10553: LIST
10554: LIST
10555: PUSH
10556: EMPTY
10557: LIST
10558: LIST
10559: ST_TO_ADDR
10560: GO 10935
10562: LD_INT 18
10564: DOUBLE
10565: EQUAL
10566: IFTRUE 10570
10568: GO 10706
10570: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
10571: LD_ADDR_VAR 0 1
10575: PUSH
10576: LD_INT 2
10578: PUSH
10579: LD_INT 4
10581: PUSH
10582: LD_INT 5
10584: PUSH
10585: LD_INT 7
10587: PUSH
10588: LD_INT 11
10590: PUSH
10591: LD_INT 12
10593: PUSH
10594: LD_INT 15
10596: PUSH
10597: LD_INT 16
10599: PUSH
10600: LD_INT 20
10602: PUSH
10603: LD_INT 21
10605: PUSH
10606: LD_INT 22
10608: PUSH
10609: LD_INT 23
10611: PUSH
10612: LD_INT 25
10614: PUSH
10615: LD_INT 26
10617: PUSH
10618: LD_INT 30
10620: PUSH
10621: LD_INT 31
10623: PUSH
10624: LD_INT 32
10626: PUSH
10627: LD_INT 33
10629: PUSH
10630: LD_INT 34
10632: PUSH
10633: LD_INT 35
10635: PUSH
10636: LD_INT 36
10638: PUSH
10639: EMPTY
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: PUSH
10662: LD_INT 101
10664: PUSH
10665: LD_INT 102
10667: PUSH
10668: LD_INT 103
10670: PUSH
10671: LD_INT 106
10673: PUSH
10674: LD_INT 108
10676: PUSH
10677: LD_INT 112
10679: PUSH
10680: LD_INT 113
10682: PUSH
10683: LD_INT 114
10685: PUSH
10686: LD_INT 115
10688: PUSH
10689: EMPTY
10690: LIST
10691: LIST
10692: LIST
10693: LIST
10694: LIST
10695: LIST
10696: LIST
10697: LIST
10698: LIST
10699: PUSH
10700: EMPTY
10701: LIST
10702: LIST
10703: ST_TO_ADDR
10704: GO 10935
10706: LD_INT 19
10708: DOUBLE
10709: EQUAL
10710: IFTRUE 10714
10712: GO 10934
10714: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
10715: LD_ADDR_VAR 0 1
10719: PUSH
10720: LD_INT 1
10722: PUSH
10723: LD_INT 2
10725: PUSH
10726: LD_INT 3
10728: PUSH
10729: LD_INT 4
10731: PUSH
10732: LD_INT 5
10734: PUSH
10735: LD_INT 6
10737: PUSH
10738: LD_INT 7
10740: PUSH
10741: LD_INT 8
10743: PUSH
10744: LD_INT 9
10746: PUSH
10747: LD_INT 10
10749: PUSH
10750: LD_INT 11
10752: PUSH
10753: LD_INT 12
10755: PUSH
10756: LD_INT 13
10758: PUSH
10759: LD_INT 14
10761: PUSH
10762: LD_INT 15
10764: PUSH
10765: LD_INT 16
10767: PUSH
10768: LD_INT 17
10770: PUSH
10771: LD_INT 18
10773: PUSH
10774: LD_INT 19
10776: PUSH
10777: LD_INT 20
10779: PUSH
10780: LD_INT 21
10782: PUSH
10783: LD_INT 22
10785: PUSH
10786: LD_INT 23
10788: PUSH
10789: LD_INT 24
10791: PUSH
10792: LD_INT 25
10794: PUSH
10795: LD_INT 26
10797: PUSH
10798: LD_INT 27
10800: PUSH
10801: LD_INT 28
10803: PUSH
10804: LD_INT 29
10806: PUSH
10807: LD_INT 30
10809: PUSH
10810: LD_INT 31
10812: PUSH
10813: LD_INT 32
10815: PUSH
10816: LD_INT 33
10818: PUSH
10819: LD_INT 34
10821: PUSH
10822: LD_INT 35
10824: PUSH
10825: LD_INT 36
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: LIST
10860: LIST
10861: LIST
10862: LIST
10863: LIST
10864: LIST
10865: PUSH
10866: LD_INT 101
10868: PUSH
10869: LD_INT 102
10871: PUSH
10872: LD_INT 103
10874: PUSH
10875: LD_INT 104
10877: PUSH
10878: LD_INT 105
10880: PUSH
10881: LD_INT 106
10883: PUSH
10884: LD_INT 107
10886: PUSH
10887: LD_INT 108
10889: PUSH
10890: LD_INT 109
10892: PUSH
10893: LD_INT 110
10895: PUSH
10896: LD_INT 111
10898: PUSH
10899: LD_INT 112
10901: PUSH
10902: LD_INT 113
10904: PUSH
10905: LD_INT 114
10907: PUSH
10908: LD_INT 115
10910: PUSH
10911: EMPTY
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: PUSH
10928: EMPTY
10929: LIST
10930: LIST
10931: ST_TO_ADDR
10932: GO 10935
10934: POP
// end else
10935: GO 11154
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
10937: LD_ADDR_VAR 0 1
10941: PUSH
10942: LD_INT 1
10944: PUSH
10945: LD_INT 2
10947: PUSH
10948: LD_INT 3
10950: PUSH
10951: LD_INT 4
10953: PUSH
10954: LD_INT 5
10956: PUSH
10957: LD_INT 6
10959: PUSH
10960: LD_INT 7
10962: PUSH
10963: LD_INT 8
10965: PUSH
10966: LD_INT 9
10968: PUSH
10969: LD_INT 10
10971: PUSH
10972: LD_INT 11
10974: PUSH
10975: LD_INT 12
10977: PUSH
10978: LD_INT 13
10980: PUSH
10981: LD_INT 14
10983: PUSH
10984: LD_INT 15
10986: PUSH
10987: LD_INT 16
10989: PUSH
10990: LD_INT 17
10992: PUSH
10993: LD_INT 18
10995: PUSH
10996: LD_INT 19
10998: PUSH
10999: LD_INT 20
11001: PUSH
11002: LD_INT 21
11004: PUSH
11005: LD_INT 22
11007: PUSH
11008: LD_INT 23
11010: PUSH
11011: LD_INT 24
11013: PUSH
11014: LD_INT 25
11016: PUSH
11017: LD_INT 26
11019: PUSH
11020: LD_INT 27
11022: PUSH
11023: LD_INT 28
11025: PUSH
11026: LD_INT 29
11028: PUSH
11029: LD_INT 30
11031: PUSH
11032: LD_INT 31
11034: PUSH
11035: LD_INT 32
11037: PUSH
11038: LD_INT 33
11040: PUSH
11041: LD_INT 34
11043: PUSH
11044: LD_INT 35
11046: PUSH
11047: LD_INT 36
11049: PUSH
11050: EMPTY
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: LIST
11071: LIST
11072: LIST
11073: LIST
11074: LIST
11075: LIST
11076: LIST
11077: LIST
11078: LIST
11079: LIST
11080: LIST
11081: LIST
11082: LIST
11083: LIST
11084: LIST
11085: LIST
11086: LIST
11087: PUSH
11088: LD_INT 101
11090: PUSH
11091: LD_INT 102
11093: PUSH
11094: LD_INT 103
11096: PUSH
11097: LD_INT 104
11099: PUSH
11100: LD_INT 105
11102: PUSH
11103: LD_INT 106
11105: PUSH
11106: LD_INT 107
11108: PUSH
11109: LD_INT 108
11111: PUSH
11112: LD_INT 109
11114: PUSH
11115: LD_INT 110
11117: PUSH
11118: LD_INT 111
11120: PUSH
11121: LD_INT 112
11123: PUSH
11124: LD_INT 113
11126: PUSH
11127: LD_INT 114
11129: PUSH
11130: LD_INT 115
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: PUSH
11150: EMPTY
11151: LIST
11152: LIST
11153: ST_TO_ADDR
// if result then
11154: LD_VAR 0 1
11158: IFFALSE 11447
// begin normal :=  ;
11160: LD_ADDR_VAR 0 3
11164: PUSH
11165: LD_STRING 
11167: ST_TO_ADDR
// hardcore :=  ;
11168: LD_ADDR_VAR 0 4
11172: PUSH
11173: LD_STRING 
11175: ST_TO_ADDR
// for i = 1 to normalCounter do
11176: LD_ADDR_VAR 0 5
11180: PUSH
11181: DOUBLE
11182: LD_INT 1
11184: DEC
11185: ST_TO_ADDR
11186: LD_EXP 28
11190: PUSH
11191: FOR_TO
11192: IFFALSE 11293
// begin tmp := 0 ;
11194: LD_ADDR_VAR 0 2
11198: PUSH
11199: LD_STRING 0
11201: ST_TO_ADDR
// if result [ 1 ] then
11202: LD_VAR 0 1
11206: PUSH
11207: LD_INT 1
11209: ARRAY
11210: IFFALSE 11275
// if result [ 1 ] [ 1 ] = i then
11212: LD_VAR 0 1
11216: PUSH
11217: LD_INT 1
11219: ARRAY
11220: PUSH
11221: LD_INT 1
11223: ARRAY
11224: PUSH
11225: LD_VAR 0 5
11229: EQUAL
11230: IFFALSE 11275
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
11232: LD_ADDR_VAR 0 1
11236: PUSH
11237: LD_VAR 0 1
11241: PPUSH
11242: LD_INT 1
11244: PPUSH
11245: LD_VAR 0 1
11249: PUSH
11250: LD_INT 1
11252: ARRAY
11253: PPUSH
11254: LD_INT 1
11256: PPUSH
11257: CALL_OW 3
11261: PPUSH
11262: CALL_OW 1
11266: ST_TO_ADDR
// tmp := 1 ;
11267: LD_ADDR_VAR 0 2
11271: PUSH
11272: LD_STRING 1
11274: ST_TO_ADDR
// end ; normal := normal & tmp ;
11275: LD_ADDR_VAR 0 3
11279: PUSH
11280: LD_VAR 0 3
11284: PUSH
11285: LD_VAR 0 2
11289: STR
11290: ST_TO_ADDR
// end ;
11291: GO 11191
11293: POP
11294: POP
// for i = 1 to hardcoreCounter do
11295: LD_ADDR_VAR 0 5
11299: PUSH
11300: DOUBLE
11301: LD_INT 1
11303: DEC
11304: ST_TO_ADDR
11305: LD_EXP 29
11309: PUSH
11310: FOR_TO
11311: IFFALSE 11416
// begin tmp := 0 ;
11313: LD_ADDR_VAR 0 2
11317: PUSH
11318: LD_STRING 0
11320: ST_TO_ADDR
// if result [ 2 ] then
11321: LD_VAR 0 1
11325: PUSH
11326: LD_INT 2
11328: ARRAY
11329: IFFALSE 11398
// if result [ 2 ] [ 1 ] = 100 + i then
11331: LD_VAR 0 1
11335: PUSH
11336: LD_INT 2
11338: ARRAY
11339: PUSH
11340: LD_INT 1
11342: ARRAY
11343: PUSH
11344: LD_INT 100
11346: PUSH
11347: LD_VAR 0 5
11351: PLUS
11352: EQUAL
11353: IFFALSE 11398
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
11355: LD_ADDR_VAR 0 1
11359: PUSH
11360: LD_VAR 0 1
11364: PPUSH
11365: LD_INT 2
11367: PPUSH
11368: LD_VAR 0 1
11372: PUSH
11373: LD_INT 2
11375: ARRAY
11376: PPUSH
11377: LD_INT 1
11379: PPUSH
11380: CALL_OW 3
11384: PPUSH
11385: CALL_OW 1
11389: ST_TO_ADDR
// tmp := 1 ;
11390: LD_ADDR_VAR 0 2
11394: PUSH
11395: LD_STRING 1
11397: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
11398: LD_ADDR_VAR 0 4
11402: PUSH
11403: LD_VAR 0 4
11407: PUSH
11408: LD_VAR 0 2
11412: STR
11413: ST_TO_ADDR
// end ;
11414: GO 11310
11416: POP
11417: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
11418: LD_STRING getStreamItemsFromMission("
11420: PUSH
11421: LD_VAR 0 3
11425: STR
11426: PUSH
11427: LD_STRING ","
11429: STR
11430: PUSH
11431: LD_VAR 0 4
11435: STR
11436: PUSH
11437: LD_STRING ")
11439: STR
11440: PPUSH
11441: CALL_OW 559
// end else
11445: GO 11454
// ToLua ( getStreamItemsFromMission("","") ) ;
11447: LD_STRING getStreamItemsFromMission("","")
11449: PPUSH
11450: CALL_OW 559
// end ;
11454: LD_VAR 0 1
11458: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11459: LD_EXP 27
11463: PUSH
11464: LD_EXP 32
11468: AND
11469: IFFALSE 11593
11471: GO 11473
11473: DISABLE
11474: LD_INT 0
11476: PPUSH
11477: PPUSH
// begin enable ;
11478: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11479: LD_ADDR_VAR 0 2
11483: PUSH
11484: LD_INT 22
11486: PUSH
11487: LD_OWVAR 2
11491: PUSH
11492: EMPTY
11493: LIST
11494: LIST
11495: PUSH
11496: LD_INT 2
11498: PUSH
11499: LD_INT 34
11501: PUSH
11502: LD_INT 7
11504: PUSH
11505: EMPTY
11506: LIST
11507: LIST
11508: PUSH
11509: LD_INT 34
11511: PUSH
11512: LD_INT 45
11514: PUSH
11515: EMPTY
11516: LIST
11517: LIST
11518: PUSH
11519: LD_INT 34
11521: PUSH
11522: LD_INT 28
11524: PUSH
11525: EMPTY
11526: LIST
11527: LIST
11528: PUSH
11529: LD_INT 34
11531: PUSH
11532: LD_INT 47
11534: PUSH
11535: EMPTY
11536: LIST
11537: LIST
11538: PUSH
11539: EMPTY
11540: LIST
11541: LIST
11542: LIST
11543: LIST
11544: LIST
11545: PUSH
11546: EMPTY
11547: LIST
11548: LIST
11549: PPUSH
11550: CALL_OW 69
11554: ST_TO_ADDR
// if not tmp then
11555: LD_VAR 0 2
11559: NOT
11560: IFFALSE 11564
// exit ;
11562: GO 11593
// for i in tmp do
11564: LD_ADDR_VAR 0 1
11568: PUSH
11569: LD_VAR 0 2
11573: PUSH
11574: FOR_IN
11575: IFFALSE 11591
// begin SetLives ( i , 0 ) ;
11577: LD_VAR 0 1
11581: PPUSH
11582: LD_INT 0
11584: PPUSH
11585: CALL_OW 234
// end ;
11589: GO 11574
11591: POP
11592: POP
// end ;
11593: PPOPN 2
11595: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11596: LD_EXP 27
11600: PUSH
11601: LD_EXP 33
11605: AND
11606: IFFALSE 11690
11608: GO 11610
11610: DISABLE
11611: LD_INT 0
11613: PPUSH
11614: PPUSH
// begin enable ;
11615: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11616: LD_ADDR_VAR 0 2
11620: PUSH
11621: LD_INT 22
11623: PUSH
11624: LD_OWVAR 2
11628: PUSH
11629: EMPTY
11630: LIST
11631: LIST
11632: PUSH
11633: LD_INT 32
11635: PUSH
11636: LD_INT 3
11638: PUSH
11639: EMPTY
11640: LIST
11641: LIST
11642: PUSH
11643: EMPTY
11644: LIST
11645: LIST
11646: PPUSH
11647: CALL_OW 69
11651: ST_TO_ADDR
// if not tmp then
11652: LD_VAR 0 2
11656: NOT
11657: IFFALSE 11661
// exit ;
11659: GO 11690
// for i in tmp do
11661: LD_ADDR_VAR 0 1
11665: PUSH
11666: LD_VAR 0 2
11670: PUSH
11671: FOR_IN
11672: IFFALSE 11688
// begin SetLives ( i , 0 ) ;
11674: LD_VAR 0 1
11678: PPUSH
11679: LD_INT 0
11681: PPUSH
11682: CALL_OW 234
// end ;
11686: GO 11671
11688: POP
11689: POP
// end ;
11690: PPOPN 2
11692: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11693: LD_EXP 27
11697: PUSH
11698: LD_EXP 30
11702: AND
11703: IFFALSE 11796
11705: GO 11707
11707: DISABLE
11708: LD_INT 0
11710: PPUSH
// begin enable ;
11711: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11712: LD_ADDR_VAR 0 1
11716: PUSH
11717: LD_INT 22
11719: PUSH
11720: LD_OWVAR 2
11724: PUSH
11725: EMPTY
11726: LIST
11727: LIST
11728: PUSH
11729: LD_INT 2
11731: PUSH
11732: LD_INT 25
11734: PUSH
11735: LD_INT 5
11737: PUSH
11738: EMPTY
11739: LIST
11740: LIST
11741: PUSH
11742: LD_INT 25
11744: PUSH
11745: LD_INT 9
11747: PUSH
11748: EMPTY
11749: LIST
11750: LIST
11751: PUSH
11752: LD_INT 25
11754: PUSH
11755: LD_INT 8
11757: PUSH
11758: EMPTY
11759: LIST
11760: LIST
11761: PUSH
11762: EMPTY
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: PUSH
11768: EMPTY
11769: LIST
11770: LIST
11771: PPUSH
11772: CALL_OW 69
11776: PUSH
11777: FOR_IN
11778: IFFALSE 11794
// begin SetClass ( i , 1 ) ;
11780: LD_VAR 0 1
11784: PPUSH
11785: LD_INT 1
11787: PPUSH
11788: CALL_OW 336
// end ;
11792: GO 11777
11794: POP
11795: POP
// end ;
11796: PPOPN 1
11798: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
11799: LD_EXP 27
11803: PUSH
11804: LD_EXP 31
11808: AND
11809: PUSH
11810: LD_OWVAR 65
11814: PUSH
11815: LD_INT 7
11817: LESS
11818: AND
11819: IFFALSE 11833
11821: GO 11823
11823: DISABLE
// begin enable ;
11824: ENABLE
// game_speed := 7 ;
11825: LD_ADDR_OWVAR 65
11829: PUSH
11830: LD_INT 7
11832: ST_TO_ADDR
// end ;
11833: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11834: LD_EXP 27
11838: PUSH
11839: LD_EXP 34
11843: AND
11844: IFFALSE 12046
11846: GO 11848
11848: DISABLE
11849: LD_INT 0
11851: PPUSH
11852: PPUSH
11853: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11854: LD_ADDR_VAR 0 3
11858: PUSH
11859: LD_INT 81
11861: PUSH
11862: LD_OWVAR 2
11866: PUSH
11867: EMPTY
11868: LIST
11869: LIST
11870: PUSH
11871: LD_INT 21
11873: PUSH
11874: LD_INT 1
11876: PUSH
11877: EMPTY
11878: LIST
11879: LIST
11880: PUSH
11881: EMPTY
11882: LIST
11883: LIST
11884: PPUSH
11885: CALL_OW 69
11889: ST_TO_ADDR
// if not tmp then
11890: LD_VAR 0 3
11894: NOT
11895: IFFALSE 11899
// exit ;
11897: GO 12046
// if tmp > 5 then
11899: LD_VAR 0 3
11903: PUSH
11904: LD_INT 5
11906: GREATER
11907: IFFALSE 11919
// k := 5 else
11909: LD_ADDR_VAR 0 2
11913: PUSH
11914: LD_INT 5
11916: ST_TO_ADDR
11917: GO 11929
// k := tmp ;
11919: LD_ADDR_VAR 0 2
11923: PUSH
11924: LD_VAR 0 3
11928: ST_TO_ADDR
// for i := 1 to k do
11929: LD_ADDR_VAR 0 1
11933: PUSH
11934: DOUBLE
11935: LD_INT 1
11937: DEC
11938: ST_TO_ADDR
11939: LD_VAR 0 2
11943: PUSH
11944: FOR_TO
11945: IFFALSE 12044
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11947: LD_VAR 0 3
11951: PUSH
11952: LD_VAR 0 1
11956: ARRAY
11957: PPUSH
11958: LD_VAR 0 1
11962: PUSH
11963: LD_INT 4
11965: MOD
11966: PUSH
11967: LD_INT 1
11969: PLUS
11970: PPUSH
11971: CALL_OW 259
11975: PUSH
11976: LD_INT 10
11978: LESS
11979: IFFALSE 12042
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
11981: LD_VAR 0 3
11985: PUSH
11986: LD_VAR 0 1
11990: ARRAY
11991: PPUSH
11992: LD_VAR 0 1
11996: PUSH
11997: LD_INT 4
11999: MOD
12000: PUSH
12001: LD_INT 1
12003: PLUS
12004: PPUSH
12005: LD_VAR 0 3
12009: PUSH
12010: LD_VAR 0 1
12014: ARRAY
12015: PPUSH
12016: LD_VAR 0 1
12020: PUSH
12021: LD_INT 4
12023: MOD
12024: PUSH
12025: LD_INT 1
12027: PLUS
12028: PPUSH
12029: CALL_OW 259
12033: PUSH
12034: LD_INT 1
12036: PLUS
12037: PPUSH
12038: CALL_OW 237
12042: GO 11944
12044: POP
12045: POP
// end ;
12046: PPOPN 3
12048: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12049: LD_EXP 27
12053: PUSH
12054: LD_EXP 35
12058: AND
12059: IFFALSE 12079
12061: GO 12063
12063: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12064: LD_INT 4
12066: PPUSH
12067: LD_OWVAR 2
12071: PPUSH
12072: LD_INT 0
12074: PPUSH
12075: CALL_OW 324
12079: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12080: LD_EXP 27
12084: PUSH
12085: LD_EXP 64
12089: AND
12090: IFFALSE 12110
12092: GO 12094
12094: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
12095: LD_INT 19
12097: PPUSH
12098: LD_OWVAR 2
12102: PPUSH
12103: LD_INT 0
12105: PPUSH
12106: CALL_OW 324
12110: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
12111: LD_EXP 27
12115: PUSH
12116: LD_EXP 36
12120: AND
12121: IFFALSE 12223
12123: GO 12125
12125: DISABLE
12126: LD_INT 0
12128: PPUSH
12129: PPUSH
// begin enable ;
12130: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
12131: LD_ADDR_VAR 0 2
12135: PUSH
12136: LD_INT 22
12138: PUSH
12139: LD_OWVAR 2
12143: PUSH
12144: EMPTY
12145: LIST
12146: LIST
12147: PUSH
12148: LD_INT 2
12150: PUSH
12151: LD_INT 34
12153: PUSH
12154: LD_INT 11
12156: PUSH
12157: EMPTY
12158: LIST
12159: LIST
12160: PUSH
12161: LD_INT 34
12163: PUSH
12164: LD_INT 30
12166: PUSH
12167: EMPTY
12168: LIST
12169: LIST
12170: PUSH
12171: EMPTY
12172: LIST
12173: LIST
12174: LIST
12175: PUSH
12176: EMPTY
12177: LIST
12178: LIST
12179: PPUSH
12180: CALL_OW 69
12184: ST_TO_ADDR
// if not tmp then
12185: LD_VAR 0 2
12189: NOT
12190: IFFALSE 12194
// exit ;
12192: GO 12223
// for i in tmp do
12194: LD_ADDR_VAR 0 1
12198: PUSH
12199: LD_VAR 0 2
12203: PUSH
12204: FOR_IN
12205: IFFALSE 12221
// begin SetLives ( i , 0 ) ;
12207: LD_VAR 0 1
12211: PPUSH
12212: LD_INT 0
12214: PPUSH
12215: CALL_OW 234
// end ;
12219: GO 12204
12221: POP
12222: POP
// end ;
12223: PPOPN 2
12225: END
// every 0 0$1 trigger StreamModeActive and sBunker do
12226: LD_EXP 27
12230: PUSH
12231: LD_EXP 37
12235: AND
12236: IFFALSE 12256
12238: GO 12240
12240: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
12241: LD_INT 32
12243: PPUSH
12244: LD_OWVAR 2
12248: PPUSH
12249: LD_INT 0
12251: PPUSH
12252: CALL_OW 324
12256: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12257: LD_EXP 27
12261: PUSH
12262: LD_EXP 38
12266: AND
12267: IFFALSE 12448
12269: GO 12271
12271: DISABLE
12272: LD_INT 0
12274: PPUSH
12275: PPUSH
12276: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12277: LD_ADDR_VAR 0 2
12281: PUSH
12282: LD_INT 22
12284: PUSH
12285: LD_OWVAR 2
12289: PUSH
12290: EMPTY
12291: LIST
12292: LIST
12293: PUSH
12294: LD_INT 33
12296: PUSH
12297: LD_INT 3
12299: PUSH
12300: EMPTY
12301: LIST
12302: LIST
12303: PUSH
12304: EMPTY
12305: LIST
12306: LIST
12307: PPUSH
12308: CALL_OW 69
12312: ST_TO_ADDR
// if not tmp then
12313: LD_VAR 0 2
12317: NOT
12318: IFFALSE 12322
// exit ;
12320: GO 12448
// side := 0 ;
12322: LD_ADDR_VAR 0 3
12326: PUSH
12327: LD_INT 0
12329: ST_TO_ADDR
// for i := 1 to 8 do
12330: LD_ADDR_VAR 0 1
12334: PUSH
12335: DOUBLE
12336: LD_INT 1
12338: DEC
12339: ST_TO_ADDR
12340: LD_INT 8
12342: PUSH
12343: FOR_TO
12344: IFFALSE 12392
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12346: LD_OWVAR 2
12350: PUSH
12351: LD_VAR 0 1
12355: NONEQUAL
12356: PUSH
12357: LD_OWVAR 2
12361: PPUSH
12362: LD_VAR 0 1
12366: PPUSH
12367: CALL_OW 81
12371: PUSH
12372: LD_INT 2
12374: EQUAL
12375: AND
12376: IFFALSE 12390
// begin side := i ;
12378: LD_ADDR_VAR 0 3
12382: PUSH
12383: LD_VAR 0 1
12387: ST_TO_ADDR
// break ;
12388: GO 12392
// end ;
12390: GO 12343
12392: POP
12393: POP
// if not side then
12394: LD_VAR 0 3
12398: NOT
12399: IFFALSE 12403
// exit ;
12401: GO 12448
// for i := 1 to tmp do
12403: LD_ADDR_VAR 0 1
12407: PUSH
12408: DOUBLE
12409: LD_INT 1
12411: DEC
12412: ST_TO_ADDR
12413: LD_VAR 0 2
12417: PUSH
12418: FOR_TO
12419: IFFALSE 12446
// if Prob ( 60 ) then
12421: LD_INT 60
12423: PPUSH
12424: CALL_OW 13
12428: IFFALSE 12444
// SetSide ( i , side ) ;
12430: LD_VAR 0 1
12434: PPUSH
12435: LD_VAR 0 3
12439: PPUSH
12440: CALL_OW 235
12444: GO 12418
12446: POP
12447: POP
// end ;
12448: PPOPN 3
12450: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12451: LD_EXP 27
12455: PUSH
12456: LD_EXP 40
12460: AND
12461: IFFALSE 12580
12463: GO 12465
12465: DISABLE
12466: LD_INT 0
12468: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12469: LD_ADDR_VAR 0 1
12473: PUSH
12474: LD_INT 22
12476: PUSH
12477: LD_OWVAR 2
12481: PUSH
12482: EMPTY
12483: LIST
12484: LIST
12485: PUSH
12486: LD_INT 21
12488: PUSH
12489: LD_INT 1
12491: PUSH
12492: EMPTY
12493: LIST
12494: LIST
12495: PUSH
12496: LD_INT 3
12498: PUSH
12499: LD_INT 23
12501: PUSH
12502: LD_INT 0
12504: PUSH
12505: EMPTY
12506: LIST
12507: LIST
12508: PUSH
12509: EMPTY
12510: LIST
12511: LIST
12512: PUSH
12513: EMPTY
12514: LIST
12515: LIST
12516: LIST
12517: PPUSH
12518: CALL_OW 69
12522: PUSH
12523: FOR_IN
12524: IFFALSE 12578
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12526: LD_VAR 0 1
12530: PPUSH
12531: CALL_OW 257
12535: PUSH
12536: LD_INT 1
12538: PUSH
12539: LD_INT 2
12541: PUSH
12542: LD_INT 3
12544: PUSH
12545: LD_INT 4
12547: PUSH
12548: EMPTY
12549: LIST
12550: LIST
12551: LIST
12552: LIST
12553: IN
12554: IFFALSE 12576
// SetClass ( un , rand ( 1 , 4 ) ) ;
12556: LD_VAR 0 1
12560: PPUSH
12561: LD_INT 1
12563: PPUSH
12564: LD_INT 4
12566: PPUSH
12567: CALL_OW 12
12571: PPUSH
12572: CALL_OW 336
12576: GO 12523
12578: POP
12579: POP
// end ;
12580: PPOPN 1
12582: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12583: LD_EXP 27
12587: PUSH
12588: LD_EXP 39
12592: AND
12593: IFFALSE 12672
12595: GO 12597
12597: DISABLE
12598: LD_INT 0
12600: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12601: LD_ADDR_VAR 0 1
12605: PUSH
12606: LD_INT 22
12608: PUSH
12609: LD_OWVAR 2
12613: PUSH
12614: EMPTY
12615: LIST
12616: LIST
12617: PUSH
12618: LD_INT 21
12620: PUSH
12621: LD_INT 3
12623: PUSH
12624: EMPTY
12625: LIST
12626: LIST
12627: PUSH
12628: EMPTY
12629: LIST
12630: LIST
12631: PPUSH
12632: CALL_OW 69
12636: ST_TO_ADDR
// if not tmp then
12637: LD_VAR 0 1
12641: NOT
12642: IFFALSE 12646
// exit ;
12644: GO 12672
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12646: LD_VAR 0 1
12650: PUSH
12651: LD_INT 1
12653: PPUSH
12654: LD_VAR 0 1
12658: PPUSH
12659: CALL_OW 12
12663: ARRAY
12664: PPUSH
12665: LD_INT 100
12667: PPUSH
12668: CALL_OW 234
// end ;
12672: PPOPN 1
12674: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12675: LD_EXP 27
12679: PUSH
12680: LD_EXP 41
12684: AND
12685: IFFALSE 12783
12687: GO 12689
12689: DISABLE
12690: LD_INT 0
12692: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12693: LD_ADDR_VAR 0 1
12697: PUSH
12698: LD_INT 22
12700: PUSH
12701: LD_OWVAR 2
12705: PUSH
12706: EMPTY
12707: LIST
12708: LIST
12709: PUSH
12710: LD_INT 21
12712: PUSH
12713: LD_INT 1
12715: PUSH
12716: EMPTY
12717: LIST
12718: LIST
12719: PUSH
12720: EMPTY
12721: LIST
12722: LIST
12723: PPUSH
12724: CALL_OW 69
12728: ST_TO_ADDR
// if not tmp then
12729: LD_VAR 0 1
12733: NOT
12734: IFFALSE 12738
// exit ;
12736: GO 12783
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12738: LD_VAR 0 1
12742: PUSH
12743: LD_INT 1
12745: PPUSH
12746: LD_VAR 0 1
12750: PPUSH
12751: CALL_OW 12
12755: ARRAY
12756: PPUSH
12757: LD_INT 1
12759: PPUSH
12760: LD_INT 4
12762: PPUSH
12763: CALL_OW 12
12767: PPUSH
12768: LD_INT 3000
12770: PPUSH
12771: LD_INT 9000
12773: PPUSH
12774: CALL_OW 12
12778: PPUSH
12779: CALL_OW 492
// end ;
12783: PPOPN 1
12785: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12786: LD_EXP 27
12790: PUSH
12791: LD_EXP 42
12795: AND
12796: IFFALSE 12816
12798: GO 12800
12800: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
12801: LD_INT 1
12803: PPUSH
12804: LD_OWVAR 2
12808: PPUSH
12809: LD_INT 0
12811: PPUSH
12812: CALL_OW 324
12816: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
12817: LD_EXP 27
12821: PUSH
12822: LD_EXP 43
12826: AND
12827: IFFALSE 12910
12829: GO 12831
12831: DISABLE
12832: LD_INT 0
12834: PPUSH
12835: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12836: LD_ADDR_VAR 0 2
12840: PUSH
12841: LD_INT 22
12843: PUSH
12844: LD_OWVAR 2
12848: PUSH
12849: EMPTY
12850: LIST
12851: LIST
12852: PUSH
12853: LD_INT 21
12855: PUSH
12856: LD_INT 3
12858: PUSH
12859: EMPTY
12860: LIST
12861: LIST
12862: PUSH
12863: EMPTY
12864: LIST
12865: LIST
12866: PPUSH
12867: CALL_OW 69
12871: ST_TO_ADDR
// if not tmp then
12872: LD_VAR 0 2
12876: NOT
12877: IFFALSE 12881
// exit ;
12879: GO 12910
// for i in tmp do
12881: LD_ADDR_VAR 0 1
12885: PUSH
12886: LD_VAR 0 2
12890: PUSH
12891: FOR_IN
12892: IFFALSE 12908
// SetBLevel ( i , 10 ) ;
12894: LD_VAR 0 1
12898: PPUSH
12899: LD_INT 10
12901: PPUSH
12902: CALL_OW 241
12906: GO 12891
12908: POP
12909: POP
// end ;
12910: PPOPN 2
12912: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12913: LD_EXP 27
12917: PUSH
12918: LD_EXP 44
12922: AND
12923: IFFALSE 13034
12925: GO 12927
12927: DISABLE
12928: LD_INT 0
12930: PPUSH
12931: PPUSH
12932: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12933: LD_ADDR_VAR 0 3
12937: PUSH
12938: LD_INT 22
12940: PUSH
12941: LD_OWVAR 2
12945: PUSH
12946: EMPTY
12947: LIST
12948: LIST
12949: PUSH
12950: LD_INT 25
12952: PUSH
12953: LD_INT 1
12955: PUSH
12956: EMPTY
12957: LIST
12958: LIST
12959: PUSH
12960: EMPTY
12961: LIST
12962: LIST
12963: PPUSH
12964: CALL_OW 69
12968: ST_TO_ADDR
// if not tmp then
12969: LD_VAR 0 3
12973: NOT
12974: IFFALSE 12978
// exit ;
12976: GO 13034
// un := tmp [ rand ( 1 , tmp ) ] ;
12978: LD_ADDR_VAR 0 2
12982: PUSH
12983: LD_VAR 0 3
12987: PUSH
12988: LD_INT 1
12990: PPUSH
12991: LD_VAR 0 3
12995: PPUSH
12996: CALL_OW 12
13000: ARRAY
13001: ST_TO_ADDR
// if Crawls ( un ) then
13002: LD_VAR 0 2
13006: PPUSH
13007: CALL_OW 318
13011: IFFALSE 13022
// ComWalk ( un ) ;
13013: LD_VAR 0 2
13017: PPUSH
13018: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13022: LD_VAR 0 2
13026: PPUSH
13027: LD_INT 5
13029: PPUSH
13030: CALL_OW 336
// end ;
13034: PPOPN 3
13036: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
13037: LD_EXP 27
13041: PUSH
13042: LD_EXP 45
13046: AND
13047: PUSH
13048: LD_OWVAR 67
13052: PUSH
13053: LD_INT 3
13055: LESS
13056: AND
13057: IFFALSE 13076
13059: GO 13061
13061: DISABLE
// Difficulty := Difficulty + 1 ;
13062: LD_ADDR_OWVAR 67
13066: PUSH
13067: LD_OWVAR 67
13071: PUSH
13072: LD_INT 1
13074: PLUS
13075: ST_TO_ADDR
13076: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
13077: LD_EXP 27
13081: PUSH
13082: LD_EXP 46
13086: AND
13087: IFFALSE 13190
13089: GO 13091
13091: DISABLE
13092: LD_INT 0
13094: PPUSH
// begin for i := 1 to 5 do
13095: LD_ADDR_VAR 0 1
13099: PUSH
13100: DOUBLE
13101: LD_INT 1
13103: DEC
13104: ST_TO_ADDR
13105: LD_INT 5
13107: PUSH
13108: FOR_TO
13109: IFFALSE 13188
// begin uc_nation := nation_nature ;
13111: LD_ADDR_OWVAR 21
13115: PUSH
13116: LD_INT 0
13118: ST_TO_ADDR
// uc_side := 0 ;
13119: LD_ADDR_OWVAR 20
13123: PUSH
13124: LD_INT 0
13126: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13127: LD_ADDR_OWVAR 29
13131: PUSH
13132: LD_INT 12
13134: PUSH
13135: LD_INT 12
13137: PUSH
13138: EMPTY
13139: LIST
13140: LIST
13141: ST_TO_ADDR
// hc_agressivity := 20 ;
13142: LD_ADDR_OWVAR 35
13146: PUSH
13147: LD_INT 20
13149: ST_TO_ADDR
// hc_class := class_tiger ;
13150: LD_ADDR_OWVAR 28
13154: PUSH
13155: LD_INT 14
13157: ST_TO_ADDR
// hc_gallery :=  ;
13158: LD_ADDR_OWVAR 33
13162: PUSH
13163: LD_STRING 
13165: ST_TO_ADDR
// hc_name :=  ;
13166: LD_ADDR_OWVAR 26
13170: PUSH
13171: LD_STRING 
13173: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
13174: CALL_OW 44
13178: PPUSH
13179: LD_INT 0
13181: PPUSH
13182: CALL_OW 51
// end ;
13186: GO 13108
13188: POP
13189: POP
// end ;
13190: PPOPN 1
13192: END
// every 0 0$1 trigger StreamModeActive and sBomb do
13193: LD_EXP 27
13197: PUSH
13198: LD_EXP 47
13202: AND
13203: IFFALSE 13212
13205: GO 13207
13207: DISABLE
// StreamSibBomb ;
13208: CALL 13213 0 0
13212: END
// export function StreamSibBomb ; var i , x , y ; begin
13213: LD_INT 0
13215: PPUSH
13216: PPUSH
13217: PPUSH
13218: PPUSH
// result := false ;
13219: LD_ADDR_VAR 0 1
13223: PUSH
13224: LD_INT 0
13226: ST_TO_ADDR
// for i := 1 to 16 do
13227: LD_ADDR_VAR 0 2
13231: PUSH
13232: DOUBLE
13233: LD_INT 1
13235: DEC
13236: ST_TO_ADDR
13237: LD_INT 16
13239: PUSH
13240: FOR_TO
13241: IFFALSE 13440
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13243: LD_ADDR_VAR 0 3
13247: PUSH
13248: LD_INT 10
13250: PUSH
13251: LD_INT 20
13253: PUSH
13254: LD_INT 30
13256: PUSH
13257: LD_INT 40
13259: PUSH
13260: LD_INT 50
13262: PUSH
13263: LD_INT 60
13265: PUSH
13266: LD_INT 70
13268: PUSH
13269: LD_INT 80
13271: PUSH
13272: LD_INT 90
13274: PUSH
13275: LD_INT 100
13277: PUSH
13278: LD_INT 110
13280: PUSH
13281: LD_INT 120
13283: PUSH
13284: LD_INT 130
13286: PUSH
13287: LD_INT 140
13289: PUSH
13290: LD_INT 150
13292: PUSH
13293: EMPTY
13294: LIST
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: PUSH
13310: LD_INT 1
13312: PPUSH
13313: LD_INT 15
13315: PPUSH
13316: CALL_OW 12
13320: ARRAY
13321: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13322: LD_ADDR_VAR 0 4
13326: PUSH
13327: LD_INT 10
13329: PUSH
13330: LD_INT 20
13332: PUSH
13333: LD_INT 30
13335: PUSH
13336: LD_INT 40
13338: PUSH
13339: LD_INT 50
13341: PUSH
13342: LD_INT 60
13344: PUSH
13345: LD_INT 70
13347: PUSH
13348: LD_INT 80
13350: PUSH
13351: LD_INT 90
13353: PUSH
13354: LD_INT 100
13356: PUSH
13357: LD_INT 110
13359: PUSH
13360: LD_INT 120
13362: PUSH
13363: LD_INT 130
13365: PUSH
13366: LD_INT 140
13368: PUSH
13369: LD_INT 150
13371: PUSH
13372: EMPTY
13373: LIST
13374: LIST
13375: LIST
13376: LIST
13377: LIST
13378: LIST
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: LIST
13384: LIST
13385: LIST
13386: LIST
13387: LIST
13388: PUSH
13389: LD_INT 1
13391: PPUSH
13392: LD_INT 15
13394: PPUSH
13395: CALL_OW 12
13399: ARRAY
13400: ST_TO_ADDR
// if ValidHex ( x , y ) then
13401: LD_VAR 0 3
13405: PPUSH
13406: LD_VAR 0 4
13410: PPUSH
13411: CALL_OW 488
13415: IFFALSE 13438
// begin result := [ x , y ] ;
13417: LD_ADDR_VAR 0 1
13421: PUSH
13422: LD_VAR 0 3
13426: PUSH
13427: LD_VAR 0 4
13431: PUSH
13432: EMPTY
13433: LIST
13434: LIST
13435: ST_TO_ADDR
// break ;
13436: GO 13440
// end ; end ;
13438: GO 13240
13440: POP
13441: POP
// if result then
13442: LD_VAR 0 1
13446: IFFALSE 13506
// begin ToLua ( playSibBomb() ) ;
13448: LD_STRING playSibBomb()
13450: PPUSH
13451: CALL_OW 559
// wait ( 0 0$14 ) ;
13455: LD_INT 490
13457: PPUSH
13458: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13462: LD_VAR 0 1
13466: PUSH
13467: LD_INT 1
13469: ARRAY
13470: PPUSH
13471: LD_VAR 0 1
13475: PUSH
13476: LD_INT 2
13478: ARRAY
13479: PPUSH
13480: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13484: LD_VAR 0 1
13488: PUSH
13489: LD_INT 1
13491: ARRAY
13492: PPUSH
13493: LD_VAR 0 1
13497: PUSH
13498: LD_INT 2
13500: ARRAY
13501: PPUSH
13502: CALL_OW 429
// end ; end ;
13506: LD_VAR 0 1
13510: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13511: LD_EXP 27
13515: PUSH
13516: LD_EXP 49
13520: AND
13521: IFFALSE 13533
13523: GO 13525
13525: DISABLE
// YouLost (  ) ;
13526: LD_STRING 
13528: PPUSH
13529: CALL_OW 104
13533: END
// every 0 0$1 trigger StreamModeActive and sFog do
13534: LD_EXP 27
13538: PUSH
13539: LD_EXP 48
13543: AND
13544: IFFALSE 13558
13546: GO 13548
13548: DISABLE
// FogOff ( your_side ) ;
13549: LD_OWVAR 2
13553: PPUSH
13554: CALL_OW 344
13558: END
// every 0 0$1 trigger StreamModeActive and sSun do
13559: LD_EXP 27
13563: PUSH
13564: LD_EXP 50
13568: AND
13569: IFFALSE 13597
13571: GO 13573
13573: DISABLE
// begin solar_recharge_percent := 0 ;
13574: LD_ADDR_OWVAR 79
13578: PUSH
13579: LD_INT 0
13581: ST_TO_ADDR
// wait ( 5 5$00 ) ;
13582: LD_INT 10500
13584: PPUSH
13585: CALL_OW 67
// solar_recharge_percent := 100 ;
13589: LD_ADDR_OWVAR 79
13593: PUSH
13594: LD_INT 100
13596: ST_TO_ADDR
// end ;
13597: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13598: LD_EXP 27
13602: PUSH
13603: LD_EXP 51
13607: AND
13608: IFFALSE 13847
13610: GO 13612
13612: DISABLE
13613: LD_INT 0
13615: PPUSH
13616: PPUSH
13617: PPUSH
// begin tmp := [ ] ;
13618: LD_ADDR_VAR 0 3
13622: PUSH
13623: EMPTY
13624: ST_TO_ADDR
// for i := 1 to 6 do
13625: LD_ADDR_VAR 0 1
13629: PUSH
13630: DOUBLE
13631: LD_INT 1
13633: DEC
13634: ST_TO_ADDR
13635: LD_INT 6
13637: PUSH
13638: FOR_TO
13639: IFFALSE 13744
// begin uc_nation := nation_nature ;
13641: LD_ADDR_OWVAR 21
13645: PUSH
13646: LD_INT 0
13648: ST_TO_ADDR
// uc_side := 0 ;
13649: LD_ADDR_OWVAR 20
13653: PUSH
13654: LD_INT 0
13656: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13657: LD_ADDR_OWVAR 29
13661: PUSH
13662: LD_INT 12
13664: PUSH
13665: LD_INT 12
13667: PUSH
13668: EMPTY
13669: LIST
13670: LIST
13671: ST_TO_ADDR
// hc_agressivity := 20 ;
13672: LD_ADDR_OWVAR 35
13676: PUSH
13677: LD_INT 20
13679: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13680: LD_ADDR_OWVAR 28
13684: PUSH
13685: LD_INT 17
13687: ST_TO_ADDR
// hc_gallery :=  ;
13688: LD_ADDR_OWVAR 33
13692: PUSH
13693: LD_STRING 
13695: ST_TO_ADDR
// hc_name :=  ;
13696: LD_ADDR_OWVAR 26
13700: PUSH
13701: LD_STRING 
13703: ST_TO_ADDR
// un := CreateHuman ;
13704: LD_ADDR_VAR 0 2
13708: PUSH
13709: CALL_OW 44
13713: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13714: LD_VAR 0 2
13718: PPUSH
13719: LD_INT 1
13721: PPUSH
13722: CALL_OW 51
// tmp := tmp ^ un ;
13726: LD_ADDR_VAR 0 3
13730: PUSH
13731: LD_VAR 0 3
13735: PUSH
13736: LD_VAR 0 2
13740: ADD
13741: ST_TO_ADDR
// end ;
13742: GO 13638
13744: POP
13745: POP
// repeat wait ( 0 0$1 ) ;
13746: LD_INT 35
13748: PPUSH
13749: CALL_OW 67
// for un in tmp do
13753: LD_ADDR_VAR 0 2
13757: PUSH
13758: LD_VAR 0 3
13762: PUSH
13763: FOR_IN
13764: IFFALSE 13838
// begin if IsDead ( un ) then
13766: LD_VAR 0 2
13770: PPUSH
13771: CALL_OW 301
13775: IFFALSE 13795
// begin tmp := tmp diff un ;
13777: LD_ADDR_VAR 0 3
13781: PUSH
13782: LD_VAR 0 3
13786: PUSH
13787: LD_VAR 0 2
13791: DIFF
13792: ST_TO_ADDR
// continue ;
13793: GO 13763
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13795: LD_VAR 0 2
13799: PPUSH
13800: LD_INT 3
13802: PUSH
13803: LD_INT 22
13805: PUSH
13806: LD_INT 0
13808: PUSH
13809: EMPTY
13810: LIST
13811: LIST
13812: PUSH
13813: EMPTY
13814: LIST
13815: LIST
13816: PPUSH
13817: CALL_OW 69
13821: PPUSH
13822: LD_VAR 0 2
13826: PPUSH
13827: CALL_OW 74
13831: PPUSH
13832: CALL_OW 115
// end ;
13836: GO 13763
13838: POP
13839: POP
// until not tmp ;
13840: LD_VAR 0 3
13844: NOT
13845: IFFALSE 13746
// end ;
13847: PPOPN 3
13849: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13850: LD_EXP 27
13854: PUSH
13855: LD_EXP 52
13859: AND
13860: IFFALSE 13914
13862: GO 13864
13864: DISABLE
// begin ToLua ( displayTroll(); ) ;
13865: LD_STRING displayTroll();
13867: PPUSH
13868: CALL_OW 559
// wait ( 3 3$00 ) ;
13872: LD_INT 6300
13874: PPUSH
13875: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13879: LD_STRING hideTroll();
13881: PPUSH
13882: CALL_OW 559
// wait ( 1 1$00 ) ;
13886: LD_INT 2100
13888: PPUSH
13889: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13893: LD_STRING displayTroll();
13895: PPUSH
13896: CALL_OW 559
// wait ( 1 1$00 ) ;
13900: LD_INT 2100
13902: PPUSH
13903: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13907: LD_STRING hideTroll();
13909: PPUSH
13910: CALL_OW 559
// end ;
13914: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13915: LD_EXP 27
13919: PUSH
13920: LD_EXP 53
13924: AND
13925: IFFALSE 13988
13927: GO 13929
13929: DISABLE
13930: LD_INT 0
13932: PPUSH
// begin p := 0 ;
13933: LD_ADDR_VAR 0 1
13937: PUSH
13938: LD_INT 0
13940: ST_TO_ADDR
// repeat game_speed := 1 ;
13941: LD_ADDR_OWVAR 65
13945: PUSH
13946: LD_INT 1
13948: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13949: LD_INT 35
13951: PPUSH
13952: CALL_OW 67
// p := p + 1 ;
13956: LD_ADDR_VAR 0 1
13960: PUSH
13961: LD_VAR 0 1
13965: PUSH
13966: LD_INT 1
13968: PLUS
13969: ST_TO_ADDR
// until p >= 60 ;
13970: LD_VAR 0 1
13974: PUSH
13975: LD_INT 60
13977: GREATEREQUAL
13978: IFFALSE 13941
// game_speed := 4 ;
13980: LD_ADDR_OWVAR 65
13984: PUSH
13985: LD_INT 4
13987: ST_TO_ADDR
// end ;
13988: PPOPN 1
13990: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
13991: LD_EXP 27
13995: PUSH
13996: LD_EXP 54
14000: AND
14001: IFFALSE 14147
14003: GO 14005
14005: DISABLE
14006: LD_INT 0
14008: PPUSH
14009: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14010: LD_ADDR_VAR 0 1
14014: PUSH
14015: LD_INT 22
14017: PUSH
14018: LD_OWVAR 2
14022: PUSH
14023: EMPTY
14024: LIST
14025: LIST
14026: PUSH
14027: LD_INT 2
14029: PUSH
14030: LD_INT 30
14032: PUSH
14033: LD_INT 0
14035: PUSH
14036: EMPTY
14037: LIST
14038: LIST
14039: PUSH
14040: LD_INT 30
14042: PUSH
14043: LD_INT 1
14045: PUSH
14046: EMPTY
14047: LIST
14048: LIST
14049: PUSH
14050: EMPTY
14051: LIST
14052: LIST
14053: LIST
14054: PUSH
14055: EMPTY
14056: LIST
14057: LIST
14058: PPUSH
14059: CALL_OW 69
14063: ST_TO_ADDR
// if not depot then
14064: LD_VAR 0 1
14068: NOT
14069: IFFALSE 14073
// exit ;
14071: GO 14147
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
14073: LD_ADDR_VAR 0 2
14077: PUSH
14078: LD_VAR 0 1
14082: PUSH
14083: LD_INT 1
14085: PPUSH
14086: LD_VAR 0 1
14090: PPUSH
14091: CALL_OW 12
14095: ARRAY
14096: PPUSH
14097: CALL_OW 274
14101: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
14102: LD_VAR 0 2
14106: PPUSH
14107: LD_INT 1
14109: PPUSH
14110: LD_INT 0
14112: PPUSH
14113: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
14117: LD_VAR 0 2
14121: PPUSH
14122: LD_INT 2
14124: PPUSH
14125: LD_INT 0
14127: PPUSH
14128: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
14132: LD_VAR 0 2
14136: PPUSH
14137: LD_INT 3
14139: PPUSH
14140: LD_INT 0
14142: PPUSH
14143: CALL_OW 277
// end ;
14147: PPOPN 2
14149: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
14150: LD_EXP 27
14154: PUSH
14155: LD_EXP 55
14159: AND
14160: IFFALSE 14257
14162: GO 14164
14164: DISABLE
14165: LD_INT 0
14167: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14168: LD_ADDR_VAR 0 1
14172: PUSH
14173: LD_INT 22
14175: PUSH
14176: LD_OWVAR 2
14180: PUSH
14181: EMPTY
14182: LIST
14183: LIST
14184: PUSH
14185: LD_INT 21
14187: PUSH
14188: LD_INT 1
14190: PUSH
14191: EMPTY
14192: LIST
14193: LIST
14194: PUSH
14195: LD_INT 3
14197: PUSH
14198: LD_INT 23
14200: PUSH
14201: LD_INT 0
14203: PUSH
14204: EMPTY
14205: LIST
14206: LIST
14207: PUSH
14208: EMPTY
14209: LIST
14210: LIST
14211: PUSH
14212: EMPTY
14213: LIST
14214: LIST
14215: LIST
14216: PPUSH
14217: CALL_OW 69
14221: ST_TO_ADDR
// if not tmp then
14222: LD_VAR 0 1
14226: NOT
14227: IFFALSE 14231
// exit ;
14229: GO 14257
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
14231: LD_VAR 0 1
14235: PUSH
14236: LD_INT 1
14238: PPUSH
14239: LD_VAR 0 1
14243: PPUSH
14244: CALL_OW 12
14248: ARRAY
14249: PPUSH
14250: LD_INT 200
14252: PPUSH
14253: CALL_OW 234
// end ;
14257: PPOPN 1
14259: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14260: LD_EXP 27
14264: PUSH
14265: LD_EXP 56
14269: AND
14270: IFFALSE 14349
14272: GO 14274
14274: DISABLE
14275: LD_INT 0
14277: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14278: LD_ADDR_VAR 0 1
14282: PUSH
14283: LD_INT 22
14285: PUSH
14286: LD_OWVAR 2
14290: PUSH
14291: EMPTY
14292: LIST
14293: LIST
14294: PUSH
14295: LD_INT 21
14297: PUSH
14298: LD_INT 2
14300: PUSH
14301: EMPTY
14302: LIST
14303: LIST
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: PPUSH
14309: CALL_OW 69
14313: ST_TO_ADDR
// if not tmp then
14314: LD_VAR 0 1
14318: NOT
14319: IFFALSE 14323
// exit ;
14321: GO 14349
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14323: LD_VAR 0 1
14327: PUSH
14328: LD_INT 1
14330: PPUSH
14331: LD_VAR 0 1
14335: PPUSH
14336: CALL_OW 12
14340: ARRAY
14341: PPUSH
14342: LD_INT 60
14344: PPUSH
14345: CALL_OW 234
// end ;
14349: PPOPN 1
14351: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14352: LD_EXP 27
14356: PUSH
14357: LD_EXP 57
14361: AND
14362: IFFALSE 14461
14364: GO 14366
14366: DISABLE
14367: LD_INT 0
14369: PPUSH
14370: PPUSH
// begin enable ;
14371: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14372: LD_ADDR_VAR 0 1
14376: PUSH
14377: LD_INT 22
14379: PUSH
14380: LD_OWVAR 2
14384: PUSH
14385: EMPTY
14386: LIST
14387: LIST
14388: PUSH
14389: LD_INT 61
14391: PUSH
14392: EMPTY
14393: LIST
14394: PUSH
14395: LD_INT 33
14397: PUSH
14398: LD_INT 2
14400: PUSH
14401: EMPTY
14402: LIST
14403: LIST
14404: PUSH
14405: EMPTY
14406: LIST
14407: LIST
14408: LIST
14409: PPUSH
14410: CALL_OW 69
14414: ST_TO_ADDR
// if not tmp then
14415: LD_VAR 0 1
14419: NOT
14420: IFFALSE 14424
// exit ;
14422: GO 14461
// for i in tmp do
14424: LD_ADDR_VAR 0 2
14428: PUSH
14429: LD_VAR 0 1
14433: PUSH
14434: FOR_IN
14435: IFFALSE 14459
// if IsControledBy ( i ) then
14437: LD_VAR 0 2
14441: PPUSH
14442: CALL_OW 312
14446: IFFALSE 14457
// ComUnlink ( i ) ;
14448: LD_VAR 0 2
14452: PPUSH
14453: CALL_OW 136
14457: GO 14434
14459: POP
14460: POP
// end ;
14461: PPOPN 2
14463: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14464: LD_EXP 27
14468: PUSH
14469: LD_EXP 58
14473: AND
14474: IFFALSE 14614
14476: GO 14478
14478: DISABLE
14479: LD_INT 0
14481: PPUSH
14482: PPUSH
// begin ToLua ( displayPowell(); ) ;
14483: LD_STRING displayPowell();
14485: PPUSH
14486: CALL_OW 559
// uc_side := 0 ;
14490: LD_ADDR_OWVAR 20
14494: PUSH
14495: LD_INT 0
14497: ST_TO_ADDR
// uc_nation := 2 ;
14498: LD_ADDR_OWVAR 21
14502: PUSH
14503: LD_INT 2
14505: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14506: LD_ADDR_OWVAR 37
14510: PUSH
14511: LD_INT 14
14513: ST_TO_ADDR
// vc_engine := engine_siberite ;
14514: LD_ADDR_OWVAR 39
14518: PUSH
14519: LD_INT 3
14521: ST_TO_ADDR
// vc_control := control_apeman ;
14522: LD_ADDR_OWVAR 38
14526: PUSH
14527: LD_INT 5
14529: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
14530: LD_ADDR_OWVAR 40
14534: PUSH
14535: LD_INT 29
14537: ST_TO_ADDR
// un := CreateVehicle ;
14538: LD_ADDR_VAR 0 2
14542: PUSH
14543: CALL_OW 45
14547: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14548: LD_VAR 0 2
14552: PPUSH
14553: LD_INT 1
14555: PPUSH
14556: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14560: LD_INT 35
14562: PPUSH
14563: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14567: LD_VAR 0 2
14571: PPUSH
14572: LD_INT 22
14574: PUSH
14575: LD_OWVAR 2
14579: PUSH
14580: EMPTY
14581: LIST
14582: LIST
14583: PPUSH
14584: CALL_OW 69
14588: PPUSH
14589: LD_VAR 0 2
14593: PPUSH
14594: CALL_OW 74
14598: PPUSH
14599: CALL_OW 115
// until IsDead ( un ) ;
14603: LD_VAR 0 2
14607: PPUSH
14608: CALL_OW 301
14612: IFFALSE 14560
// end ;
14614: PPOPN 2
14616: END
// every 0 0$1 trigger StreamModeActive and sStu do
14617: LD_EXP 27
14621: PUSH
14622: LD_EXP 66
14626: AND
14627: IFFALSE 14643
14629: GO 14631
14631: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14632: LD_STRING displayStucuk();
14634: PPUSH
14635: CALL_OW 559
// ResetFog ;
14639: CALL_OW 335
// end ;
14643: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14644: LD_EXP 27
14648: PUSH
14649: LD_EXP 59
14653: AND
14654: IFFALSE 14795
14656: GO 14658
14658: DISABLE
14659: LD_INT 0
14661: PPUSH
14662: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14663: LD_ADDR_VAR 0 2
14667: PUSH
14668: LD_INT 22
14670: PUSH
14671: LD_OWVAR 2
14675: PUSH
14676: EMPTY
14677: LIST
14678: LIST
14679: PUSH
14680: LD_INT 21
14682: PUSH
14683: LD_INT 1
14685: PUSH
14686: EMPTY
14687: LIST
14688: LIST
14689: PUSH
14690: EMPTY
14691: LIST
14692: LIST
14693: PPUSH
14694: CALL_OW 69
14698: ST_TO_ADDR
// if not tmp then
14699: LD_VAR 0 2
14703: NOT
14704: IFFALSE 14708
// exit ;
14706: GO 14795
// un := tmp [ rand ( 1 , tmp ) ] ;
14708: LD_ADDR_VAR 0 1
14712: PUSH
14713: LD_VAR 0 2
14717: PUSH
14718: LD_INT 1
14720: PPUSH
14721: LD_VAR 0 2
14725: PPUSH
14726: CALL_OW 12
14730: ARRAY
14731: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14732: LD_VAR 0 1
14736: PPUSH
14737: LD_INT 0
14739: PPUSH
14740: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14744: LD_VAR 0 1
14748: PPUSH
14749: LD_OWVAR 3
14753: PUSH
14754: LD_VAR 0 1
14758: DIFF
14759: PPUSH
14760: LD_VAR 0 1
14764: PPUSH
14765: CALL_OW 74
14769: PPUSH
14770: CALL_OW 115
// wait ( 0 0$20 ) ;
14774: LD_INT 700
14776: PPUSH
14777: CALL_OW 67
// SetSide ( un , your_side ) ;
14781: LD_VAR 0 1
14785: PPUSH
14786: LD_OWVAR 2
14790: PPUSH
14791: CALL_OW 235
// end ;
14795: PPOPN 2
14797: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
14798: LD_EXP 27
14802: PUSH
14803: LD_EXP 60
14807: AND
14808: IFFALSE 14914
14810: GO 14812
14812: DISABLE
14813: LD_INT 0
14815: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14816: LD_ADDR_VAR 0 1
14820: PUSH
14821: LD_INT 22
14823: PUSH
14824: LD_OWVAR 2
14828: PUSH
14829: EMPTY
14830: LIST
14831: LIST
14832: PUSH
14833: LD_INT 2
14835: PUSH
14836: LD_INT 30
14838: PUSH
14839: LD_INT 0
14841: PUSH
14842: EMPTY
14843: LIST
14844: LIST
14845: PUSH
14846: LD_INT 30
14848: PUSH
14849: LD_INT 1
14851: PUSH
14852: EMPTY
14853: LIST
14854: LIST
14855: PUSH
14856: EMPTY
14857: LIST
14858: LIST
14859: LIST
14860: PUSH
14861: EMPTY
14862: LIST
14863: LIST
14864: PPUSH
14865: CALL_OW 69
14869: ST_TO_ADDR
// if not depot then
14870: LD_VAR 0 1
14874: NOT
14875: IFFALSE 14879
// exit ;
14877: GO 14914
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14879: LD_VAR 0 1
14883: PUSH
14884: LD_INT 1
14886: ARRAY
14887: PPUSH
14888: CALL_OW 250
14892: PPUSH
14893: LD_VAR 0 1
14897: PUSH
14898: LD_INT 1
14900: ARRAY
14901: PPUSH
14902: CALL_OW 251
14906: PPUSH
14907: LD_INT 70
14909: PPUSH
14910: CALL_OW 495
// end ;
14914: PPOPN 1
14916: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14917: LD_EXP 27
14921: PUSH
14922: LD_EXP 61
14926: AND
14927: IFFALSE 15138
14929: GO 14931
14931: DISABLE
14932: LD_INT 0
14934: PPUSH
14935: PPUSH
14936: PPUSH
14937: PPUSH
14938: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14939: LD_ADDR_VAR 0 5
14943: PUSH
14944: LD_INT 22
14946: PUSH
14947: LD_OWVAR 2
14951: PUSH
14952: EMPTY
14953: LIST
14954: LIST
14955: PUSH
14956: LD_INT 21
14958: PUSH
14959: LD_INT 1
14961: PUSH
14962: EMPTY
14963: LIST
14964: LIST
14965: PUSH
14966: EMPTY
14967: LIST
14968: LIST
14969: PPUSH
14970: CALL_OW 69
14974: ST_TO_ADDR
// if not tmp then
14975: LD_VAR 0 5
14979: NOT
14980: IFFALSE 14984
// exit ;
14982: GO 15138
// for i in tmp do
14984: LD_ADDR_VAR 0 1
14988: PUSH
14989: LD_VAR 0 5
14993: PUSH
14994: FOR_IN
14995: IFFALSE 15136
// begin d := rand ( 0 , 5 ) ;
14997: LD_ADDR_VAR 0 4
15001: PUSH
15002: LD_INT 0
15004: PPUSH
15005: LD_INT 5
15007: PPUSH
15008: CALL_OW 12
15012: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15013: LD_ADDR_VAR 0 2
15017: PUSH
15018: LD_VAR 0 1
15022: PPUSH
15023: CALL_OW 250
15027: PPUSH
15028: LD_VAR 0 4
15032: PPUSH
15033: LD_INT 3
15035: PPUSH
15036: LD_INT 12
15038: PPUSH
15039: CALL_OW 12
15043: PPUSH
15044: CALL_OW 272
15048: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15049: LD_ADDR_VAR 0 3
15053: PUSH
15054: LD_VAR 0 1
15058: PPUSH
15059: CALL_OW 251
15063: PPUSH
15064: LD_VAR 0 4
15068: PPUSH
15069: LD_INT 3
15071: PPUSH
15072: LD_INT 12
15074: PPUSH
15075: CALL_OW 12
15079: PPUSH
15080: CALL_OW 273
15084: ST_TO_ADDR
// if ValidHex ( x , y ) then
15085: LD_VAR 0 2
15089: PPUSH
15090: LD_VAR 0 3
15094: PPUSH
15095: CALL_OW 488
15099: IFFALSE 15134
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
15101: LD_VAR 0 1
15105: PPUSH
15106: LD_VAR 0 2
15110: PPUSH
15111: LD_VAR 0 3
15115: PPUSH
15116: LD_INT 3
15118: PPUSH
15119: LD_INT 6
15121: PPUSH
15122: CALL_OW 12
15126: PPUSH
15127: LD_INT 1
15129: PPUSH
15130: CALL_OW 483
// end ;
15134: GO 14994
15136: POP
15137: POP
// end ;
15138: PPOPN 5
15140: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
15141: LD_EXP 27
15145: PUSH
15146: LD_EXP 62
15150: AND
15151: IFFALSE 15245
15153: GO 15155
15155: DISABLE
15156: LD_INT 0
15158: PPUSH
15159: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
15160: LD_ADDR_VAR 0 2
15164: PUSH
15165: LD_INT 22
15167: PUSH
15168: LD_OWVAR 2
15172: PUSH
15173: EMPTY
15174: LIST
15175: LIST
15176: PUSH
15177: LD_INT 32
15179: PUSH
15180: LD_INT 1
15182: PUSH
15183: EMPTY
15184: LIST
15185: LIST
15186: PUSH
15187: LD_INT 21
15189: PUSH
15190: LD_INT 2
15192: PUSH
15193: EMPTY
15194: LIST
15195: LIST
15196: PUSH
15197: EMPTY
15198: LIST
15199: LIST
15200: LIST
15201: PPUSH
15202: CALL_OW 69
15206: ST_TO_ADDR
// if not tmp then
15207: LD_VAR 0 2
15211: NOT
15212: IFFALSE 15216
// exit ;
15214: GO 15245
// for i in tmp do
15216: LD_ADDR_VAR 0 1
15220: PUSH
15221: LD_VAR 0 2
15225: PUSH
15226: FOR_IN
15227: IFFALSE 15243
// SetFuel ( i , 0 ) ;
15229: LD_VAR 0 1
15233: PPUSH
15234: LD_INT 0
15236: PPUSH
15237: CALL_OW 240
15241: GO 15226
15243: POP
15244: POP
// end ;
15245: PPOPN 2
15247: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
15248: LD_EXP 27
15252: PUSH
15253: LD_EXP 63
15257: AND
15258: IFFALSE 15324
15260: GO 15262
15262: DISABLE
15263: LD_INT 0
15265: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15266: LD_ADDR_VAR 0 1
15270: PUSH
15271: LD_INT 22
15273: PUSH
15274: LD_OWVAR 2
15278: PUSH
15279: EMPTY
15280: LIST
15281: LIST
15282: PUSH
15283: LD_INT 30
15285: PUSH
15286: LD_INT 29
15288: PUSH
15289: EMPTY
15290: LIST
15291: LIST
15292: PUSH
15293: EMPTY
15294: LIST
15295: LIST
15296: PPUSH
15297: CALL_OW 69
15301: ST_TO_ADDR
// if not tmp then
15302: LD_VAR 0 1
15306: NOT
15307: IFFALSE 15311
// exit ;
15309: GO 15324
// DestroyUnit ( tmp [ 1 ] ) ;
15311: LD_VAR 0 1
15315: PUSH
15316: LD_INT 1
15318: ARRAY
15319: PPUSH
15320: CALL_OW 65
// end ;
15324: PPOPN 1
15326: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
15327: LD_EXP 27
15331: PUSH
15332: LD_EXP 65
15336: AND
15337: IFFALSE 15466
15339: GO 15341
15341: DISABLE
15342: LD_INT 0
15344: PPUSH
// begin uc_side := 0 ;
15345: LD_ADDR_OWVAR 20
15349: PUSH
15350: LD_INT 0
15352: ST_TO_ADDR
// uc_nation := nation_arabian ;
15353: LD_ADDR_OWVAR 21
15357: PUSH
15358: LD_INT 2
15360: ST_TO_ADDR
// hc_gallery :=  ;
15361: LD_ADDR_OWVAR 33
15365: PUSH
15366: LD_STRING 
15368: ST_TO_ADDR
// hc_name :=  ;
15369: LD_ADDR_OWVAR 26
15373: PUSH
15374: LD_STRING 
15376: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
15377: LD_INT 1
15379: PPUSH
15380: LD_INT 11
15382: PPUSH
15383: LD_INT 10
15385: PPUSH
15386: CALL_OW 380
// un := CreateHuman ;
15390: LD_ADDR_VAR 0 1
15394: PUSH
15395: CALL_OW 44
15399: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15400: LD_VAR 0 1
15404: PPUSH
15405: LD_INT 1
15407: PPUSH
15408: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15412: LD_INT 35
15414: PPUSH
15415: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15419: LD_VAR 0 1
15423: PPUSH
15424: LD_INT 22
15426: PUSH
15427: LD_OWVAR 2
15431: PUSH
15432: EMPTY
15433: LIST
15434: LIST
15435: PPUSH
15436: CALL_OW 69
15440: PPUSH
15441: LD_VAR 0 1
15445: PPUSH
15446: CALL_OW 74
15450: PPUSH
15451: CALL_OW 115
// until IsDead ( un ) ;
15455: LD_VAR 0 1
15459: PPUSH
15460: CALL_OW 301
15464: IFFALSE 15412
// end ;
15466: PPOPN 1
15468: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15469: LD_EXP 27
15473: PUSH
15474: LD_EXP 67
15478: AND
15479: IFFALSE 15491
15481: GO 15483
15483: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15484: LD_STRING earthquake(getX(game), 0, 32)
15486: PPUSH
15487: CALL_OW 559
15491: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15492: LD_EXP 27
15496: PUSH
15497: LD_EXP 68
15501: AND
15502: IFFALSE 15593
15504: GO 15506
15506: DISABLE
15507: LD_INT 0
15509: PPUSH
// begin enable ;
15510: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15511: LD_ADDR_VAR 0 1
15515: PUSH
15516: LD_INT 22
15518: PUSH
15519: LD_OWVAR 2
15523: PUSH
15524: EMPTY
15525: LIST
15526: LIST
15527: PUSH
15528: LD_INT 21
15530: PUSH
15531: LD_INT 2
15533: PUSH
15534: EMPTY
15535: LIST
15536: LIST
15537: PUSH
15538: LD_INT 33
15540: PUSH
15541: LD_INT 3
15543: PUSH
15544: EMPTY
15545: LIST
15546: LIST
15547: PUSH
15548: EMPTY
15549: LIST
15550: LIST
15551: LIST
15552: PPUSH
15553: CALL_OW 69
15557: ST_TO_ADDR
// if not tmp then
15558: LD_VAR 0 1
15562: NOT
15563: IFFALSE 15567
// exit ;
15565: GO 15593
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15567: LD_VAR 0 1
15571: PUSH
15572: LD_INT 1
15574: PPUSH
15575: LD_VAR 0 1
15579: PPUSH
15580: CALL_OW 12
15584: ARRAY
15585: PPUSH
15586: LD_INT 1
15588: PPUSH
15589: CALL_OW 234
// end ;
15593: PPOPN 1
15595: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15596: LD_EXP 27
15600: PUSH
15601: LD_EXP 69
15605: AND
15606: IFFALSE 15747
15608: GO 15610
15610: DISABLE
15611: LD_INT 0
15613: PPUSH
15614: PPUSH
15615: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15616: LD_ADDR_VAR 0 3
15620: PUSH
15621: LD_INT 22
15623: PUSH
15624: LD_OWVAR 2
15628: PUSH
15629: EMPTY
15630: LIST
15631: LIST
15632: PUSH
15633: LD_INT 25
15635: PUSH
15636: LD_INT 1
15638: PUSH
15639: EMPTY
15640: LIST
15641: LIST
15642: PUSH
15643: EMPTY
15644: LIST
15645: LIST
15646: PPUSH
15647: CALL_OW 69
15651: ST_TO_ADDR
// if not tmp then
15652: LD_VAR 0 3
15656: NOT
15657: IFFALSE 15661
// exit ;
15659: GO 15747
// un := tmp [ rand ( 1 , tmp ) ] ;
15661: LD_ADDR_VAR 0 2
15665: PUSH
15666: LD_VAR 0 3
15670: PUSH
15671: LD_INT 1
15673: PPUSH
15674: LD_VAR 0 3
15678: PPUSH
15679: CALL_OW 12
15683: ARRAY
15684: ST_TO_ADDR
// if Crawls ( un ) then
15685: LD_VAR 0 2
15689: PPUSH
15690: CALL_OW 318
15694: IFFALSE 15705
// ComWalk ( un ) ;
15696: LD_VAR 0 2
15700: PPUSH
15701: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15705: LD_VAR 0 2
15709: PPUSH
15710: LD_INT 9
15712: PPUSH
15713: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15717: LD_INT 28
15719: PPUSH
15720: LD_OWVAR 2
15724: PPUSH
15725: LD_INT 2
15727: PPUSH
15728: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15732: LD_INT 29
15734: PPUSH
15735: LD_OWVAR 2
15739: PPUSH
15740: LD_INT 2
15742: PPUSH
15743: CALL_OW 322
// end ;
15747: PPOPN 3
15749: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15750: LD_EXP 27
15754: PUSH
15755: LD_EXP 70
15759: AND
15760: IFFALSE 15871
15762: GO 15764
15764: DISABLE
15765: LD_INT 0
15767: PPUSH
15768: PPUSH
15769: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15770: LD_ADDR_VAR 0 3
15774: PUSH
15775: LD_INT 22
15777: PUSH
15778: LD_OWVAR 2
15782: PUSH
15783: EMPTY
15784: LIST
15785: LIST
15786: PUSH
15787: LD_INT 25
15789: PUSH
15790: LD_INT 1
15792: PUSH
15793: EMPTY
15794: LIST
15795: LIST
15796: PUSH
15797: EMPTY
15798: LIST
15799: LIST
15800: PPUSH
15801: CALL_OW 69
15805: ST_TO_ADDR
// if not tmp then
15806: LD_VAR 0 3
15810: NOT
15811: IFFALSE 15815
// exit ;
15813: GO 15871
// un := tmp [ rand ( 1 , tmp ) ] ;
15815: LD_ADDR_VAR 0 2
15819: PUSH
15820: LD_VAR 0 3
15824: PUSH
15825: LD_INT 1
15827: PPUSH
15828: LD_VAR 0 3
15832: PPUSH
15833: CALL_OW 12
15837: ARRAY
15838: ST_TO_ADDR
// if Crawls ( un ) then
15839: LD_VAR 0 2
15843: PPUSH
15844: CALL_OW 318
15848: IFFALSE 15859
// ComWalk ( un ) ;
15850: LD_VAR 0 2
15854: PPUSH
15855: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15859: LD_VAR 0 2
15863: PPUSH
15864: LD_INT 8
15866: PPUSH
15867: CALL_OW 336
// end ;
15871: PPOPN 3
15873: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15874: LD_EXP 27
15878: PUSH
15879: LD_EXP 71
15883: AND
15884: IFFALSE 16028
15886: GO 15888
15888: DISABLE
15889: LD_INT 0
15891: PPUSH
15892: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15893: LD_ADDR_VAR 0 2
15897: PUSH
15898: LD_INT 22
15900: PUSH
15901: LD_OWVAR 2
15905: PUSH
15906: EMPTY
15907: LIST
15908: LIST
15909: PUSH
15910: LD_INT 21
15912: PUSH
15913: LD_INT 2
15915: PUSH
15916: EMPTY
15917: LIST
15918: LIST
15919: PUSH
15920: LD_INT 2
15922: PUSH
15923: LD_INT 34
15925: PUSH
15926: LD_INT 12
15928: PUSH
15929: EMPTY
15930: LIST
15931: LIST
15932: PUSH
15933: LD_INT 34
15935: PUSH
15936: LD_INT 51
15938: PUSH
15939: EMPTY
15940: LIST
15941: LIST
15942: PUSH
15943: LD_INT 34
15945: PUSH
15946: LD_INT 32
15948: PUSH
15949: EMPTY
15950: LIST
15951: LIST
15952: PUSH
15953: EMPTY
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: PUSH
15959: EMPTY
15960: LIST
15961: LIST
15962: LIST
15963: PPUSH
15964: CALL_OW 69
15968: ST_TO_ADDR
// if not tmp then
15969: LD_VAR 0 2
15973: NOT
15974: IFFALSE 15978
// exit ;
15976: GO 16028
// for i in tmp do
15978: LD_ADDR_VAR 0 1
15982: PUSH
15983: LD_VAR 0 2
15987: PUSH
15988: FOR_IN
15989: IFFALSE 16026
// if GetCargo ( i , mat_artifact ) = 0 then
15991: LD_VAR 0 1
15995: PPUSH
15996: LD_INT 4
15998: PPUSH
15999: CALL_OW 289
16003: PUSH
16004: LD_INT 0
16006: EQUAL
16007: IFFALSE 16024
// SetCargo ( i , mat_siberit , 100 ) ;
16009: LD_VAR 0 1
16013: PPUSH
16014: LD_INT 3
16016: PPUSH
16017: LD_INT 100
16019: PPUSH
16020: CALL_OW 290
16024: GO 15988
16026: POP
16027: POP
// end ;
16028: PPOPN 2
16030: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16031: LD_EXP 27
16035: PUSH
16036: LD_EXP 72
16040: AND
16041: IFFALSE 16224
16043: GO 16045
16045: DISABLE
16046: LD_INT 0
16048: PPUSH
16049: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16050: LD_ADDR_VAR 0 2
16054: PUSH
16055: LD_INT 22
16057: PUSH
16058: LD_OWVAR 2
16062: PUSH
16063: EMPTY
16064: LIST
16065: LIST
16066: PPUSH
16067: CALL_OW 69
16071: ST_TO_ADDR
// if not tmp then
16072: LD_VAR 0 2
16076: NOT
16077: IFFALSE 16081
// exit ;
16079: GO 16224
// for i := 1 to 2 do
16081: LD_ADDR_VAR 0 1
16085: PUSH
16086: DOUBLE
16087: LD_INT 1
16089: DEC
16090: ST_TO_ADDR
16091: LD_INT 2
16093: PUSH
16094: FOR_TO
16095: IFFALSE 16222
// begin uc_side := your_side ;
16097: LD_ADDR_OWVAR 20
16101: PUSH
16102: LD_OWVAR 2
16106: ST_TO_ADDR
// uc_nation := nation_american ;
16107: LD_ADDR_OWVAR 21
16111: PUSH
16112: LD_INT 1
16114: ST_TO_ADDR
// vc_chassis := us_morphling ;
16115: LD_ADDR_OWVAR 37
16119: PUSH
16120: LD_INT 5
16122: ST_TO_ADDR
// vc_engine := engine_siberite ;
16123: LD_ADDR_OWVAR 39
16127: PUSH
16128: LD_INT 3
16130: ST_TO_ADDR
// vc_control := control_computer ;
16131: LD_ADDR_OWVAR 38
16135: PUSH
16136: LD_INT 3
16138: ST_TO_ADDR
// vc_weapon := us_double_laser ;
16139: LD_ADDR_OWVAR 40
16143: PUSH
16144: LD_INT 10
16146: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
16147: LD_VAR 0 2
16151: PUSH
16152: LD_INT 1
16154: ARRAY
16155: PPUSH
16156: CALL_OW 310
16160: NOT
16161: IFFALSE 16208
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
16163: CALL_OW 45
16167: PPUSH
16168: LD_VAR 0 2
16172: PUSH
16173: LD_INT 1
16175: ARRAY
16176: PPUSH
16177: CALL_OW 250
16181: PPUSH
16182: LD_VAR 0 2
16186: PUSH
16187: LD_INT 1
16189: ARRAY
16190: PPUSH
16191: CALL_OW 251
16195: PPUSH
16196: LD_INT 12
16198: PPUSH
16199: LD_INT 1
16201: PPUSH
16202: CALL_OW 50
16206: GO 16220
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16208: CALL_OW 45
16212: PPUSH
16213: LD_INT 1
16215: PPUSH
16216: CALL_OW 51
// end ;
16220: GO 16094
16222: POP
16223: POP
// end ;
16224: PPOPN 2
16226: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
16227: LD_EXP 27
16231: PUSH
16232: LD_EXP 73
16236: AND
16237: IFFALSE 16459
16239: GO 16241
16241: DISABLE
16242: LD_INT 0
16244: PPUSH
16245: PPUSH
16246: PPUSH
16247: PPUSH
16248: PPUSH
16249: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16250: LD_ADDR_VAR 0 6
16254: PUSH
16255: LD_INT 22
16257: PUSH
16258: LD_OWVAR 2
16262: PUSH
16263: EMPTY
16264: LIST
16265: LIST
16266: PUSH
16267: LD_INT 21
16269: PUSH
16270: LD_INT 1
16272: PUSH
16273: EMPTY
16274: LIST
16275: LIST
16276: PUSH
16277: LD_INT 3
16279: PUSH
16280: LD_INT 23
16282: PUSH
16283: LD_INT 0
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: PUSH
16290: EMPTY
16291: LIST
16292: LIST
16293: PUSH
16294: EMPTY
16295: LIST
16296: LIST
16297: LIST
16298: PPUSH
16299: CALL_OW 69
16303: ST_TO_ADDR
// if not tmp then
16304: LD_VAR 0 6
16308: NOT
16309: IFFALSE 16313
// exit ;
16311: GO 16459
// s1 := rand ( 1 , 4 ) ;
16313: LD_ADDR_VAR 0 2
16317: PUSH
16318: LD_INT 1
16320: PPUSH
16321: LD_INT 4
16323: PPUSH
16324: CALL_OW 12
16328: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
16329: LD_ADDR_VAR 0 4
16333: PUSH
16334: LD_VAR 0 6
16338: PUSH
16339: LD_INT 1
16341: ARRAY
16342: PPUSH
16343: LD_VAR 0 2
16347: PPUSH
16348: CALL_OW 259
16352: ST_TO_ADDR
// if s1 = 1 then
16353: LD_VAR 0 2
16357: PUSH
16358: LD_INT 1
16360: EQUAL
16361: IFFALSE 16381
// s2 := rand ( 2 , 4 ) else
16363: LD_ADDR_VAR 0 3
16367: PUSH
16368: LD_INT 2
16370: PPUSH
16371: LD_INT 4
16373: PPUSH
16374: CALL_OW 12
16378: ST_TO_ADDR
16379: GO 16389
// s2 := 1 ;
16381: LD_ADDR_VAR 0 3
16385: PUSH
16386: LD_INT 1
16388: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
16389: LD_ADDR_VAR 0 5
16393: PUSH
16394: LD_VAR 0 6
16398: PUSH
16399: LD_INT 1
16401: ARRAY
16402: PPUSH
16403: LD_VAR 0 3
16407: PPUSH
16408: CALL_OW 259
16412: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
16413: LD_VAR 0 6
16417: PUSH
16418: LD_INT 1
16420: ARRAY
16421: PPUSH
16422: LD_VAR 0 2
16426: PPUSH
16427: LD_VAR 0 5
16431: PPUSH
16432: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16436: LD_VAR 0 6
16440: PUSH
16441: LD_INT 1
16443: ARRAY
16444: PPUSH
16445: LD_VAR 0 3
16449: PPUSH
16450: LD_VAR 0 4
16454: PPUSH
16455: CALL_OW 237
// end ;
16459: PPOPN 6
16461: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16462: LD_EXP 27
16466: PUSH
16467: LD_EXP 74
16471: AND
16472: IFFALSE 16551
16474: GO 16476
16476: DISABLE
16477: LD_INT 0
16479: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16480: LD_ADDR_VAR 0 1
16484: PUSH
16485: LD_INT 22
16487: PUSH
16488: LD_OWVAR 2
16492: PUSH
16493: EMPTY
16494: LIST
16495: LIST
16496: PUSH
16497: LD_INT 30
16499: PUSH
16500: LD_INT 3
16502: PUSH
16503: EMPTY
16504: LIST
16505: LIST
16506: PUSH
16507: EMPTY
16508: LIST
16509: LIST
16510: PPUSH
16511: CALL_OW 69
16515: ST_TO_ADDR
// if not tmp then
16516: LD_VAR 0 1
16520: NOT
16521: IFFALSE 16525
// exit ;
16523: GO 16551
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16525: LD_VAR 0 1
16529: PUSH
16530: LD_INT 1
16532: PPUSH
16533: LD_VAR 0 1
16537: PPUSH
16538: CALL_OW 12
16542: ARRAY
16543: PPUSH
16544: LD_INT 1
16546: PPUSH
16547: CALL_OW 234
// end ;
16551: PPOPN 1
16553: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
16554: LD_EXP 27
16558: PUSH
16559: LD_EXP 75
16563: AND
16564: IFFALSE 16676
16566: GO 16568
16568: DISABLE
16569: LD_INT 0
16571: PPUSH
16572: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
16573: LD_ADDR_VAR 0 2
16577: PUSH
16578: LD_INT 22
16580: PUSH
16581: LD_OWVAR 2
16585: PUSH
16586: EMPTY
16587: LIST
16588: LIST
16589: PUSH
16590: LD_INT 2
16592: PUSH
16593: LD_INT 30
16595: PUSH
16596: LD_INT 27
16598: PUSH
16599: EMPTY
16600: LIST
16601: LIST
16602: PUSH
16603: LD_INT 30
16605: PUSH
16606: LD_INT 26
16608: PUSH
16609: EMPTY
16610: LIST
16611: LIST
16612: PUSH
16613: LD_INT 30
16615: PUSH
16616: LD_INT 28
16618: PUSH
16619: EMPTY
16620: LIST
16621: LIST
16622: PUSH
16623: EMPTY
16624: LIST
16625: LIST
16626: LIST
16627: LIST
16628: PUSH
16629: EMPTY
16630: LIST
16631: LIST
16632: PPUSH
16633: CALL_OW 69
16637: ST_TO_ADDR
// if not tmp then
16638: LD_VAR 0 2
16642: NOT
16643: IFFALSE 16647
// exit ;
16645: GO 16676
// for i in tmp do
16647: LD_ADDR_VAR 0 1
16651: PUSH
16652: LD_VAR 0 2
16656: PUSH
16657: FOR_IN
16658: IFFALSE 16674
// SetLives ( i , 1 ) ;
16660: LD_VAR 0 1
16664: PPUSH
16665: LD_INT 1
16667: PPUSH
16668: CALL_OW 234
16672: GO 16657
16674: POP
16675: POP
// end ;
16676: PPOPN 2
16678: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16679: LD_EXP 27
16683: PUSH
16684: LD_EXP 76
16688: AND
16689: IFFALSE 16963
16691: GO 16693
16693: DISABLE
16694: LD_INT 0
16696: PPUSH
16697: PPUSH
16698: PPUSH
// begin i := rand ( 1 , 7 ) ;
16699: LD_ADDR_VAR 0 1
16703: PUSH
16704: LD_INT 1
16706: PPUSH
16707: LD_INT 7
16709: PPUSH
16710: CALL_OW 12
16714: ST_TO_ADDR
// case i of 1 :
16715: LD_VAR 0 1
16719: PUSH
16720: LD_INT 1
16722: DOUBLE
16723: EQUAL
16724: IFTRUE 16728
16726: GO 16738
16728: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16729: LD_STRING earthquake(getX(game), 0, 32)
16731: PPUSH
16732: CALL_OW 559
16736: GO 16963
16738: LD_INT 2
16740: DOUBLE
16741: EQUAL
16742: IFTRUE 16746
16744: GO 16760
16746: POP
// begin ToLua ( displayStucuk(); ) ;
16747: LD_STRING displayStucuk();
16749: PPUSH
16750: CALL_OW 559
// ResetFog ;
16754: CALL_OW 335
// end ; 3 :
16758: GO 16963
16760: LD_INT 3
16762: DOUBLE
16763: EQUAL
16764: IFTRUE 16768
16766: GO 16872
16768: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16769: LD_ADDR_VAR 0 2
16773: PUSH
16774: LD_INT 22
16776: PUSH
16777: LD_OWVAR 2
16781: PUSH
16782: EMPTY
16783: LIST
16784: LIST
16785: PUSH
16786: LD_INT 25
16788: PUSH
16789: LD_INT 1
16791: PUSH
16792: EMPTY
16793: LIST
16794: LIST
16795: PUSH
16796: EMPTY
16797: LIST
16798: LIST
16799: PPUSH
16800: CALL_OW 69
16804: ST_TO_ADDR
// if not tmp then
16805: LD_VAR 0 2
16809: NOT
16810: IFFALSE 16814
// exit ;
16812: GO 16963
// un := tmp [ rand ( 1 , tmp ) ] ;
16814: LD_ADDR_VAR 0 3
16818: PUSH
16819: LD_VAR 0 2
16823: PUSH
16824: LD_INT 1
16826: PPUSH
16827: LD_VAR 0 2
16831: PPUSH
16832: CALL_OW 12
16836: ARRAY
16837: ST_TO_ADDR
// if Crawls ( un ) then
16838: LD_VAR 0 3
16842: PPUSH
16843: CALL_OW 318
16847: IFFALSE 16858
// ComWalk ( un ) ;
16849: LD_VAR 0 3
16853: PPUSH
16854: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16858: LD_VAR 0 3
16862: PPUSH
16863: LD_INT 8
16865: PPUSH
16866: CALL_OW 336
// end ; 4 :
16870: GO 16963
16872: LD_INT 4
16874: DOUBLE
16875: EQUAL
16876: IFTRUE 16880
16878: GO 16941
16880: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16881: LD_ADDR_VAR 0 2
16885: PUSH
16886: LD_INT 22
16888: PUSH
16889: LD_OWVAR 2
16893: PUSH
16894: EMPTY
16895: LIST
16896: LIST
16897: PUSH
16898: LD_INT 30
16900: PUSH
16901: LD_INT 29
16903: PUSH
16904: EMPTY
16905: LIST
16906: LIST
16907: PUSH
16908: EMPTY
16909: LIST
16910: LIST
16911: PPUSH
16912: CALL_OW 69
16916: ST_TO_ADDR
// if not tmp then
16917: LD_VAR 0 2
16921: NOT
16922: IFFALSE 16926
// exit ;
16924: GO 16963
// DestroyUnit ( tmp [ 1 ] ) ;
16926: LD_VAR 0 2
16930: PUSH
16931: LD_INT 1
16933: ARRAY
16934: PPUSH
16935: CALL_OW 65
// end ; 5 .. 7 :
16939: GO 16963
16941: LD_INT 5
16943: DOUBLE
16944: GREATEREQUAL
16945: IFFALSE 16953
16947: LD_INT 7
16949: DOUBLE
16950: LESSEQUAL
16951: IFTRUE 16955
16953: GO 16962
16955: POP
// StreamSibBomb ; end ;
16956: CALL 13213 0 0
16960: GO 16963
16962: POP
// end ;
16963: PPOPN 3
16965: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
16966: LD_EXP 27
16970: PUSH
16971: LD_EXP 77
16975: AND
16976: IFFALSE 17132
16978: GO 16980
16980: DISABLE
16981: LD_INT 0
16983: PPUSH
16984: PPUSH
16985: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
16986: LD_ADDR_VAR 0 2
16990: PUSH
16991: LD_INT 81
16993: PUSH
16994: LD_OWVAR 2
16998: PUSH
16999: EMPTY
17000: LIST
17001: LIST
17002: PUSH
17003: LD_INT 2
17005: PUSH
17006: LD_INT 21
17008: PUSH
17009: LD_INT 1
17011: PUSH
17012: EMPTY
17013: LIST
17014: LIST
17015: PUSH
17016: LD_INT 21
17018: PUSH
17019: LD_INT 2
17021: PUSH
17022: EMPTY
17023: LIST
17024: LIST
17025: PUSH
17026: EMPTY
17027: LIST
17028: LIST
17029: LIST
17030: PUSH
17031: EMPTY
17032: LIST
17033: LIST
17034: PPUSH
17035: CALL_OW 69
17039: ST_TO_ADDR
// if not tmp then
17040: LD_VAR 0 2
17044: NOT
17045: IFFALSE 17049
// exit ;
17047: GO 17132
// p := 0 ;
17049: LD_ADDR_VAR 0 3
17053: PUSH
17054: LD_INT 0
17056: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17057: LD_INT 35
17059: PPUSH
17060: CALL_OW 67
// p := p + 1 ;
17064: LD_ADDR_VAR 0 3
17068: PUSH
17069: LD_VAR 0 3
17073: PUSH
17074: LD_INT 1
17076: PLUS
17077: ST_TO_ADDR
// for i in tmp do
17078: LD_ADDR_VAR 0 1
17082: PUSH
17083: LD_VAR 0 2
17087: PUSH
17088: FOR_IN
17089: IFFALSE 17120
// if GetLives ( i ) < 1000 then
17091: LD_VAR 0 1
17095: PPUSH
17096: CALL_OW 256
17100: PUSH
17101: LD_INT 1000
17103: LESS
17104: IFFALSE 17118
// SetLives ( i , 1000 ) ;
17106: LD_VAR 0 1
17110: PPUSH
17111: LD_INT 1000
17113: PPUSH
17114: CALL_OW 234
17118: GO 17088
17120: POP
17121: POP
// until p > 20 ;
17122: LD_VAR 0 3
17126: PUSH
17127: LD_INT 20
17129: GREATER
17130: IFFALSE 17057
// end ;
17132: PPOPN 3
17134: END
// every 0 0$1 trigger StreamModeActive and sTime do
17135: LD_EXP 27
17139: PUSH
17140: LD_EXP 78
17144: AND
17145: IFFALSE 17180
17147: GO 17149
17149: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
17150: LD_INT 28
17152: PPUSH
17153: LD_OWVAR 2
17157: PPUSH
17158: LD_INT 2
17160: PPUSH
17161: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
17165: LD_INT 30
17167: PPUSH
17168: LD_OWVAR 2
17172: PPUSH
17173: LD_INT 2
17175: PPUSH
17176: CALL_OW 322
// end ;
17180: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
17181: LD_EXP 27
17185: PUSH
17186: LD_EXP 79
17190: AND
17191: IFFALSE 17312
17193: GO 17195
17195: DISABLE
17196: LD_INT 0
17198: PPUSH
17199: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17200: LD_ADDR_VAR 0 2
17204: PUSH
17205: LD_INT 22
17207: PUSH
17208: LD_OWVAR 2
17212: PUSH
17213: EMPTY
17214: LIST
17215: LIST
17216: PUSH
17217: LD_INT 21
17219: PUSH
17220: LD_INT 1
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: PUSH
17227: LD_INT 3
17229: PUSH
17230: LD_INT 23
17232: PUSH
17233: LD_INT 0
17235: PUSH
17236: EMPTY
17237: LIST
17238: LIST
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: PUSH
17244: EMPTY
17245: LIST
17246: LIST
17247: LIST
17248: PPUSH
17249: CALL_OW 69
17253: ST_TO_ADDR
// if not tmp then
17254: LD_VAR 0 2
17258: NOT
17259: IFFALSE 17263
// exit ;
17261: GO 17312
// for i in tmp do
17263: LD_ADDR_VAR 0 1
17267: PUSH
17268: LD_VAR 0 2
17272: PUSH
17273: FOR_IN
17274: IFFALSE 17310
// begin if Crawls ( i ) then
17276: LD_VAR 0 1
17280: PPUSH
17281: CALL_OW 318
17285: IFFALSE 17296
// ComWalk ( i ) ;
17287: LD_VAR 0 1
17291: PPUSH
17292: CALL_OW 138
// SetClass ( i , 2 ) ;
17296: LD_VAR 0 1
17300: PPUSH
17301: LD_INT 2
17303: PPUSH
17304: CALL_OW 336
// end ;
17308: GO 17273
17310: POP
17311: POP
// end ;
17312: PPOPN 2
17314: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
17315: LD_EXP 27
17319: PUSH
17320: LD_EXP 80
17324: AND
17325: IFFALSE 17606
17327: GO 17329
17329: DISABLE
17330: LD_INT 0
17332: PPUSH
17333: PPUSH
17334: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
17335: LD_OWVAR 2
17339: PPUSH
17340: LD_INT 9
17342: PPUSH
17343: LD_INT 1
17345: PPUSH
17346: LD_INT 1
17348: PPUSH
17349: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
17353: LD_INT 9
17355: PPUSH
17356: LD_OWVAR 2
17360: PPUSH
17361: CALL_OW 343
// uc_side := 9 ;
17365: LD_ADDR_OWVAR 20
17369: PUSH
17370: LD_INT 9
17372: ST_TO_ADDR
// uc_nation := 2 ;
17373: LD_ADDR_OWVAR 21
17377: PUSH
17378: LD_INT 2
17380: ST_TO_ADDR
// hc_name := Dark Warrior ;
17381: LD_ADDR_OWVAR 26
17385: PUSH
17386: LD_STRING Dark Warrior
17388: ST_TO_ADDR
// hc_gallery :=  ;
17389: LD_ADDR_OWVAR 33
17393: PUSH
17394: LD_STRING 
17396: ST_TO_ADDR
// hc_noskilllimit := true ;
17397: LD_ADDR_OWVAR 76
17401: PUSH
17402: LD_INT 1
17404: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
17405: LD_ADDR_OWVAR 31
17409: PUSH
17410: LD_INT 30
17412: PUSH
17413: LD_INT 30
17415: PUSH
17416: LD_INT 30
17418: PUSH
17419: LD_INT 30
17421: PUSH
17422: EMPTY
17423: LIST
17424: LIST
17425: LIST
17426: LIST
17427: ST_TO_ADDR
// un := CreateHuman ;
17428: LD_ADDR_VAR 0 3
17432: PUSH
17433: CALL_OW 44
17437: ST_TO_ADDR
// hc_noskilllimit := false ;
17438: LD_ADDR_OWVAR 76
17442: PUSH
17443: LD_INT 0
17445: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17446: LD_VAR 0 3
17450: PPUSH
17451: LD_INT 1
17453: PPUSH
17454: CALL_OW 51
// p := 0 ;
17458: LD_ADDR_VAR 0 2
17462: PUSH
17463: LD_INT 0
17465: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17466: LD_INT 35
17468: PPUSH
17469: CALL_OW 67
// p := p + 1 ;
17473: LD_ADDR_VAR 0 2
17477: PUSH
17478: LD_VAR 0 2
17482: PUSH
17483: LD_INT 1
17485: PLUS
17486: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17487: LD_VAR 0 3
17491: PPUSH
17492: CALL_OW 256
17496: PUSH
17497: LD_INT 1000
17499: LESS
17500: IFFALSE 17514
// SetLives ( un , 1000 ) ;
17502: LD_VAR 0 3
17506: PPUSH
17507: LD_INT 1000
17509: PPUSH
17510: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
17514: LD_VAR 0 3
17518: PPUSH
17519: LD_INT 81
17521: PUSH
17522: LD_OWVAR 2
17526: PUSH
17527: EMPTY
17528: LIST
17529: LIST
17530: PUSH
17531: LD_INT 91
17533: PUSH
17534: LD_VAR 0 3
17538: PUSH
17539: LD_INT 30
17541: PUSH
17542: EMPTY
17543: LIST
17544: LIST
17545: LIST
17546: PUSH
17547: EMPTY
17548: LIST
17549: LIST
17550: PPUSH
17551: CALL_OW 69
17555: PPUSH
17556: LD_VAR 0 3
17560: PPUSH
17561: CALL_OW 74
17565: PPUSH
17566: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
17570: LD_VAR 0 2
17574: PUSH
17575: LD_INT 60
17577: GREATER
17578: PUSH
17579: LD_VAR 0 3
17583: PPUSH
17584: CALL_OW 301
17588: OR
17589: IFFALSE 17466
// if un then
17591: LD_VAR 0 3
17595: IFFALSE 17606
// RemoveUnit ( un ) ;
17597: LD_VAR 0 3
17601: PPUSH
17602: CALL_OW 64
// end ;
17606: PPOPN 3
17608: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17609: LD_INT 0
17611: PPUSH
// case cmd of 301 :
17612: LD_VAR 0 1
17616: PUSH
17617: LD_INT 301
17619: DOUBLE
17620: EQUAL
17621: IFTRUE 17625
17623: GO 17657
17625: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
17626: LD_VAR 0 6
17630: PPUSH
17631: LD_VAR 0 7
17635: PPUSH
17636: LD_VAR 0 8
17640: PPUSH
17641: LD_VAR 0 4
17645: PPUSH
17646: LD_VAR 0 5
17650: PPUSH
17651: CALL 18858 0 5
17655: GO 17778
17657: LD_INT 302
17659: DOUBLE
17660: EQUAL
17661: IFTRUE 17665
17663: GO 17702
17665: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
17666: LD_VAR 0 6
17670: PPUSH
17671: LD_VAR 0 7
17675: PPUSH
17676: LD_VAR 0 8
17680: PPUSH
17681: LD_VAR 0 9
17685: PPUSH
17686: LD_VAR 0 4
17690: PPUSH
17691: LD_VAR 0 5
17695: PPUSH
17696: CALL 18949 0 6
17700: GO 17778
17702: LD_INT 303
17704: DOUBLE
17705: EQUAL
17706: IFTRUE 17710
17708: GO 17747
17710: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
17711: LD_VAR 0 6
17715: PPUSH
17716: LD_VAR 0 7
17720: PPUSH
17721: LD_VAR 0 8
17725: PPUSH
17726: LD_VAR 0 9
17730: PPUSH
17731: LD_VAR 0 4
17735: PPUSH
17736: LD_VAR 0 5
17740: PPUSH
17741: CALL 17783 0 6
17745: GO 17778
17747: LD_INT 304
17749: DOUBLE
17750: EQUAL
17751: IFTRUE 17755
17753: GO 17777
17755: POP
// hHackTeleport ( unit , x , y ) ; end ;
17756: LD_VAR 0 2
17760: PPUSH
17761: LD_VAR 0 4
17765: PPUSH
17766: LD_VAR 0 5
17770: PPUSH
17771: CALL 19542 0 3
17775: GO 17778
17777: POP
// end ;
17778: LD_VAR 0 12
17782: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
17783: LD_INT 0
17785: PPUSH
17786: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
17787: LD_VAR 0 1
17791: PUSH
17792: LD_INT 1
17794: LESS
17795: PUSH
17796: LD_VAR 0 1
17800: PUSH
17801: LD_INT 3
17803: GREATER
17804: OR
17805: PUSH
17806: LD_VAR 0 5
17810: PPUSH
17811: LD_VAR 0 6
17815: PPUSH
17816: CALL_OW 428
17820: OR
17821: IFFALSE 17825
// exit ;
17823: GO 18545
// uc_side := your_side ;
17825: LD_ADDR_OWVAR 20
17829: PUSH
17830: LD_OWVAR 2
17834: ST_TO_ADDR
// uc_nation := nation ;
17835: LD_ADDR_OWVAR 21
17839: PUSH
17840: LD_VAR 0 1
17844: ST_TO_ADDR
// bc_level = 1 ;
17845: LD_ADDR_OWVAR 43
17849: PUSH
17850: LD_INT 1
17852: ST_TO_ADDR
// case btype of 1 :
17853: LD_VAR 0 2
17857: PUSH
17858: LD_INT 1
17860: DOUBLE
17861: EQUAL
17862: IFTRUE 17866
17864: GO 17877
17866: POP
// bc_type := b_depot ; 2 :
17867: LD_ADDR_OWVAR 42
17871: PUSH
17872: LD_INT 0
17874: ST_TO_ADDR
17875: GO 18489
17877: LD_INT 2
17879: DOUBLE
17880: EQUAL
17881: IFTRUE 17885
17883: GO 17896
17885: POP
// bc_type := b_warehouse ; 3 :
17886: LD_ADDR_OWVAR 42
17890: PUSH
17891: LD_INT 1
17893: ST_TO_ADDR
17894: GO 18489
17896: LD_INT 3
17898: DOUBLE
17899: EQUAL
17900: IFTRUE 17904
17902: GO 17915
17904: POP
// bc_type := b_lab ; 4 .. 9 :
17905: LD_ADDR_OWVAR 42
17909: PUSH
17910: LD_INT 6
17912: ST_TO_ADDR
17913: GO 18489
17915: LD_INT 4
17917: DOUBLE
17918: GREATEREQUAL
17919: IFFALSE 17927
17921: LD_INT 9
17923: DOUBLE
17924: LESSEQUAL
17925: IFTRUE 17929
17927: GO 17981
17929: POP
// begin bc_type := b_lab_half ;
17930: LD_ADDR_OWVAR 42
17934: PUSH
17935: LD_INT 7
17937: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
17938: LD_ADDR_OWVAR 44
17942: PUSH
17943: LD_INT 10
17945: PUSH
17946: LD_INT 11
17948: PUSH
17949: LD_INT 12
17951: PUSH
17952: LD_INT 15
17954: PUSH
17955: LD_INT 14
17957: PUSH
17958: LD_INT 13
17960: PUSH
17961: EMPTY
17962: LIST
17963: LIST
17964: LIST
17965: LIST
17966: LIST
17967: LIST
17968: PUSH
17969: LD_VAR 0 2
17973: PUSH
17974: LD_INT 3
17976: MINUS
17977: ARRAY
17978: ST_TO_ADDR
// end ; 10 .. 13 :
17979: GO 18489
17981: LD_INT 10
17983: DOUBLE
17984: GREATEREQUAL
17985: IFFALSE 17993
17987: LD_INT 13
17989: DOUBLE
17990: LESSEQUAL
17991: IFTRUE 17995
17993: GO 18072
17995: POP
// begin bc_type := b_lab_full ;
17996: LD_ADDR_OWVAR 42
18000: PUSH
18001: LD_INT 8
18003: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
18004: LD_ADDR_OWVAR 44
18008: PUSH
18009: LD_INT 10
18011: PUSH
18012: LD_INT 12
18014: PUSH
18015: LD_INT 14
18017: PUSH
18018: LD_INT 13
18020: PUSH
18021: EMPTY
18022: LIST
18023: LIST
18024: LIST
18025: LIST
18026: PUSH
18027: LD_VAR 0 2
18031: PUSH
18032: LD_INT 9
18034: MINUS
18035: ARRAY
18036: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
18037: LD_ADDR_OWVAR 45
18041: PUSH
18042: LD_INT 11
18044: PUSH
18045: LD_INT 15
18047: PUSH
18048: LD_INT 12
18050: PUSH
18051: LD_INT 15
18053: PUSH
18054: EMPTY
18055: LIST
18056: LIST
18057: LIST
18058: LIST
18059: PUSH
18060: LD_VAR 0 2
18064: PUSH
18065: LD_INT 9
18067: MINUS
18068: ARRAY
18069: ST_TO_ADDR
// end ; 14 :
18070: GO 18489
18072: LD_INT 14
18074: DOUBLE
18075: EQUAL
18076: IFTRUE 18080
18078: GO 18091
18080: POP
// bc_type := b_workshop ; 15 :
18081: LD_ADDR_OWVAR 42
18085: PUSH
18086: LD_INT 2
18088: ST_TO_ADDR
18089: GO 18489
18091: LD_INT 15
18093: DOUBLE
18094: EQUAL
18095: IFTRUE 18099
18097: GO 18110
18099: POP
// bc_type := b_factory ; 16 :
18100: LD_ADDR_OWVAR 42
18104: PUSH
18105: LD_INT 3
18107: ST_TO_ADDR
18108: GO 18489
18110: LD_INT 16
18112: DOUBLE
18113: EQUAL
18114: IFTRUE 18118
18116: GO 18129
18118: POP
// bc_type := b_ext_gun ; 17 :
18119: LD_ADDR_OWVAR 42
18123: PUSH
18124: LD_INT 17
18126: ST_TO_ADDR
18127: GO 18489
18129: LD_INT 17
18131: DOUBLE
18132: EQUAL
18133: IFTRUE 18137
18135: GO 18165
18137: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
18138: LD_ADDR_OWVAR 42
18142: PUSH
18143: LD_INT 19
18145: PUSH
18146: LD_INT 23
18148: PUSH
18149: LD_INT 19
18151: PUSH
18152: EMPTY
18153: LIST
18154: LIST
18155: LIST
18156: PUSH
18157: LD_VAR 0 1
18161: ARRAY
18162: ST_TO_ADDR
18163: GO 18489
18165: LD_INT 18
18167: DOUBLE
18168: EQUAL
18169: IFTRUE 18173
18171: GO 18184
18173: POP
// bc_type := b_ext_radar ; 19 :
18174: LD_ADDR_OWVAR 42
18178: PUSH
18179: LD_INT 20
18181: ST_TO_ADDR
18182: GO 18489
18184: LD_INT 19
18186: DOUBLE
18187: EQUAL
18188: IFTRUE 18192
18190: GO 18203
18192: POP
// bc_type := b_ext_radio ; 20 :
18193: LD_ADDR_OWVAR 42
18197: PUSH
18198: LD_INT 22
18200: ST_TO_ADDR
18201: GO 18489
18203: LD_INT 20
18205: DOUBLE
18206: EQUAL
18207: IFTRUE 18211
18209: GO 18222
18211: POP
// bc_type := b_ext_siberium ; 21 :
18212: LD_ADDR_OWVAR 42
18216: PUSH
18217: LD_INT 21
18219: ST_TO_ADDR
18220: GO 18489
18222: LD_INT 21
18224: DOUBLE
18225: EQUAL
18226: IFTRUE 18230
18228: GO 18241
18230: POP
// bc_type := b_ext_computer ; 22 :
18231: LD_ADDR_OWVAR 42
18235: PUSH
18236: LD_INT 24
18238: ST_TO_ADDR
18239: GO 18489
18241: LD_INT 22
18243: DOUBLE
18244: EQUAL
18245: IFTRUE 18249
18247: GO 18260
18249: POP
// bc_type := b_ext_track ; 23 :
18250: LD_ADDR_OWVAR 42
18254: PUSH
18255: LD_INT 16
18257: ST_TO_ADDR
18258: GO 18489
18260: LD_INT 23
18262: DOUBLE
18263: EQUAL
18264: IFTRUE 18268
18266: GO 18279
18268: POP
// bc_type := b_ext_laser ; 24 :
18269: LD_ADDR_OWVAR 42
18273: PUSH
18274: LD_INT 25
18276: ST_TO_ADDR
18277: GO 18489
18279: LD_INT 24
18281: DOUBLE
18282: EQUAL
18283: IFTRUE 18287
18285: GO 18298
18287: POP
// bc_type := b_control_tower ; 25 :
18288: LD_ADDR_OWVAR 42
18292: PUSH
18293: LD_INT 36
18295: ST_TO_ADDR
18296: GO 18489
18298: LD_INT 25
18300: DOUBLE
18301: EQUAL
18302: IFTRUE 18306
18304: GO 18317
18306: POP
// bc_type := b_breastwork ; 26 :
18307: LD_ADDR_OWVAR 42
18311: PUSH
18312: LD_INT 31
18314: ST_TO_ADDR
18315: GO 18489
18317: LD_INT 26
18319: DOUBLE
18320: EQUAL
18321: IFTRUE 18325
18323: GO 18336
18325: POP
// bc_type := b_bunker ; 27 :
18326: LD_ADDR_OWVAR 42
18330: PUSH
18331: LD_INT 32
18333: ST_TO_ADDR
18334: GO 18489
18336: LD_INT 27
18338: DOUBLE
18339: EQUAL
18340: IFTRUE 18344
18342: GO 18355
18344: POP
// bc_type := b_turret ; 28 :
18345: LD_ADDR_OWVAR 42
18349: PUSH
18350: LD_INT 33
18352: ST_TO_ADDR
18353: GO 18489
18355: LD_INT 28
18357: DOUBLE
18358: EQUAL
18359: IFTRUE 18363
18361: GO 18374
18363: POP
// bc_type := b_armoury ; 29 :
18364: LD_ADDR_OWVAR 42
18368: PUSH
18369: LD_INT 4
18371: ST_TO_ADDR
18372: GO 18489
18374: LD_INT 29
18376: DOUBLE
18377: EQUAL
18378: IFTRUE 18382
18380: GO 18393
18382: POP
// bc_type := b_barracks ; 30 :
18383: LD_ADDR_OWVAR 42
18387: PUSH
18388: LD_INT 5
18390: ST_TO_ADDR
18391: GO 18489
18393: LD_INT 30
18395: DOUBLE
18396: EQUAL
18397: IFTRUE 18401
18399: GO 18412
18401: POP
// bc_type := b_solar_power ; 31 :
18402: LD_ADDR_OWVAR 42
18406: PUSH
18407: LD_INT 27
18409: ST_TO_ADDR
18410: GO 18489
18412: LD_INT 31
18414: DOUBLE
18415: EQUAL
18416: IFTRUE 18420
18418: GO 18431
18420: POP
// bc_type := b_oil_power ; 32 :
18421: LD_ADDR_OWVAR 42
18425: PUSH
18426: LD_INT 26
18428: ST_TO_ADDR
18429: GO 18489
18431: LD_INT 32
18433: DOUBLE
18434: EQUAL
18435: IFTRUE 18439
18437: GO 18450
18439: POP
// bc_type := b_siberite_power ; 33 :
18440: LD_ADDR_OWVAR 42
18444: PUSH
18445: LD_INT 28
18447: ST_TO_ADDR
18448: GO 18489
18450: LD_INT 33
18452: DOUBLE
18453: EQUAL
18454: IFTRUE 18458
18456: GO 18469
18458: POP
// bc_type := b_oil_mine ; 34 :
18459: LD_ADDR_OWVAR 42
18463: PUSH
18464: LD_INT 29
18466: ST_TO_ADDR
18467: GO 18489
18469: LD_INT 34
18471: DOUBLE
18472: EQUAL
18473: IFTRUE 18477
18475: GO 18488
18477: POP
// bc_type := b_siberite_mine ; end ;
18478: LD_ADDR_OWVAR 42
18482: PUSH
18483: LD_INT 30
18485: ST_TO_ADDR
18486: GO 18489
18488: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
18489: LD_ADDR_VAR 0 8
18493: PUSH
18494: LD_VAR 0 5
18498: PPUSH
18499: LD_VAR 0 6
18503: PPUSH
18504: LD_VAR 0 3
18508: PPUSH
18509: CALL_OW 47
18513: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
18514: LD_OWVAR 42
18518: PUSH
18519: LD_INT 32
18521: PUSH
18522: LD_INT 33
18524: PUSH
18525: EMPTY
18526: LIST
18527: LIST
18528: IN
18529: IFFALSE 18545
// PlaceWeaponTurret ( b , weapon ) ;
18531: LD_VAR 0 8
18535: PPUSH
18536: LD_VAR 0 4
18540: PPUSH
18541: CALL_OW 431
// end ;
18545: LD_VAR 0 7
18549: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
18550: LD_INT 0
18552: PPUSH
18553: PPUSH
18554: PPUSH
18555: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18556: LD_ADDR_VAR 0 4
18560: PUSH
18561: LD_INT 22
18563: PUSH
18564: LD_OWVAR 2
18568: PUSH
18569: EMPTY
18570: LIST
18571: LIST
18572: PUSH
18573: LD_INT 2
18575: PUSH
18576: LD_INT 30
18578: PUSH
18579: LD_INT 0
18581: PUSH
18582: EMPTY
18583: LIST
18584: LIST
18585: PUSH
18586: LD_INT 30
18588: PUSH
18589: LD_INT 1
18591: PUSH
18592: EMPTY
18593: LIST
18594: LIST
18595: PUSH
18596: EMPTY
18597: LIST
18598: LIST
18599: LIST
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: PPUSH
18605: CALL_OW 69
18609: ST_TO_ADDR
// if not tmp then
18610: LD_VAR 0 4
18614: NOT
18615: IFFALSE 18619
// exit ;
18617: GO 18678
// for i in tmp do
18619: LD_ADDR_VAR 0 2
18623: PUSH
18624: LD_VAR 0 4
18628: PUSH
18629: FOR_IN
18630: IFFALSE 18676
// for j = 1 to 3 do
18632: LD_ADDR_VAR 0 3
18636: PUSH
18637: DOUBLE
18638: LD_INT 1
18640: DEC
18641: ST_TO_ADDR
18642: LD_INT 3
18644: PUSH
18645: FOR_TO
18646: IFFALSE 18672
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
18648: LD_VAR 0 2
18652: PPUSH
18653: CALL_OW 274
18657: PPUSH
18658: LD_VAR 0 3
18662: PPUSH
18663: LD_INT 99999
18665: PPUSH
18666: CALL_OW 277
18670: GO 18645
18672: POP
18673: POP
18674: GO 18629
18676: POP
18677: POP
// end ;
18678: LD_VAR 0 1
18682: RET
// export function hHackSetLevel10 ; var i , j ; begin
18683: LD_INT 0
18685: PPUSH
18686: PPUSH
18687: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18688: LD_ADDR_VAR 0 2
18692: PUSH
18693: LD_INT 21
18695: PUSH
18696: LD_INT 1
18698: PUSH
18699: EMPTY
18700: LIST
18701: LIST
18702: PPUSH
18703: CALL_OW 69
18707: PUSH
18708: FOR_IN
18709: IFFALSE 18761
// if IsSelected ( i ) then
18711: LD_VAR 0 2
18715: PPUSH
18716: CALL_OW 306
18720: IFFALSE 18759
// begin for j := 1 to 4 do
18722: LD_ADDR_VAR 0 3
18726: PUSH
18727: DOUBLE
18728: LD_INT 1
18730: DEC
18731: ST_TO_ADDR
18732: LD_INT 4
18734: PUSH
18735: FOR_TO
18736: IFFALSE 18757
// SetSkill ( i , j , 10 ) ;
18738: LD_VAR 0 2
18742: PPUSH
18743: LD_VAR 0 3
18747: PPUSH
18748: LD_INT 10
18750: PPUSH
18751: CALL_OW 237
18755: GO 18735
18757: POP
18758: POP
// end ;
18759: GO 18708
18761: POP
18762: POP
// end ;
18763: LD_VAR 0 1
18767: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
18768: LD_INT 0
18770: PPUSH
18771: PPUSH
18772: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
18773: LD_ADDR_VAR 0 2
18777: PUSH
18778: LD_INT 22
18780: PUSH
18781: LD_OWVAR 2
18785: PUSH
18786: EMPTY
18787: LIST
18788: LIST
18789: PUSH
18790: LD_INT 21
18792: PUSH
18793: LD_INT 1
18795: PUSH
18796: EMPTY
18797: LIST
18798: LIST
18799: PUSH
18800: EMPTY
18801: LIST
18802: LIST
18803: PPUSH
18804: CALL_OW 69
18808: PUSH
18809: FOR_IN
18810: IFFALSE 18851
// begin for j := 1 to 4 do
18812: LD_ADDR_VAR 0 3
18816: PUSH
18817: DOUBLE
18818: LD_INT 1
18820: DEC
18821: ST_TO_ADDR
18822: LD_INT 4
18824: PUSH
18825: FOR_TO
18826: IFFALSE 18847
// SetSkill ( i , j , 10 ) ;
18828: LD_VAR 0 2
18832: PPUSH
18833: LD_VAR 0 3
18837: PPUSH
18838: LD_INT 10
18840: PPUSH
18841: CALL_OW 237
18845: GO 18825
18847: POP
18848: POP
// end ;
18849: GO 18809
18851: POP
18852: POP
// end ;
18853: LD_VAR 0 1
18857: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
18858: LD_INT 0
18860: PPUSH
// uc_side := your_side ;
18861: LD_ADDR_OWVAR 20
18865: PUSH
18866: LD_OWVAR 2
18870: ST_TO_ADDR
// uc_nation := nation ;
18871: LD_ADDR_OWVAR 21
18875: PUSH
18876: LD_VAR 0 1
18880: ST_TO_ADDR
// InitHc ;
18881: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
18885: LD_INT 0
18887: PPUSH
18888: LD_VAR 0 2
18892: PPUSH
18893: LD_VAR 0 3
18897: PPUSH
18898: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
18902: LD_VAR 0 4
18906: PPUSH
18907: LD_VAR 0 5
18911: PPUSH
18912: CALL_OW 428
18916: PUSH
18917: LD_INT 0
18919: EQUAL
18920: IFFALSE 18944
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
18922: CALL_OW 44
18926: PPUSH
18927: LD_VAR 0 4
18931: PPUSH
18932: LD_VAR 0 5
18936: PPUSH
18937: LD_INT 1
18939: PPUSH
18940: CALL_OW 48
// end ;
18944: LD_VAR 0 6
18948: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
18949: LD_INT 0
18951: PPUSH
18952: PPUSH
// uc_side := your_side ;
18953: LD_ADDR_OWVAR 20
18957: PUSH
18958: LD_OWVAR 2
18962: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
18963: LD_VAR 0 1
18967: PUSH
18968: LD_INT 1
18970: PUSH
18971: LD_INT 2
18973: PUSH
18974: LD_INT 3
18976: PUSH
18977: LD_INT 4
18979: PUSH
18980: LD_INT 5
18982: PUSH
18983: EMPTY
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: IN
18990: IFFALSE 19002
// uc_nation := nation_american else
18992: LD_ADDR_OWVAR 21
18996: PUSH
18997: LD_INT 1
18999: ST_TO_ADDR
19000: GO 19045
// if chassis in [ 11 , 12 , 13 , 14 ] then
19002: LD_VAR 0 1
19006: PUSH
19007: LD_INT 11
19009: PUSH
19010: LD_INT 12
19012: PUSH
19013: LD_INT 13
19015: PUSH
19016: LD_INT 14
19018: PUSH
19019: EMPTY
19020: LIST
19021: LIST
19022: LIST
19023: LIST
19024: IN
19025: IFFALSE 19037
// uc_nation := nation_arabian else
19027: LD_ADDR_OWVAR 21
19031: PUSH
19032: LD_INT 2
19034: ST_TO_ADDR
19035: GO 19045
// uc_nation := nation_russian ;
19037: LD_ADDR_OWVAR 21
19041: PUSH
19042: LD_INT 3
19044: ST_TO_ADDR
// vc_chassis := chassis ;
19045: LD_ADDR_OWVAR 37
19049: PUSH
19050: LD_VAR 0 1
19054: ST_TO_ADDR
// vc_engine := engine ;
19055: LD_ADDR_OWVAR 39
19059: PUSH
19060: LD_VAR 0 2
19064: ST_TO_ADDR
// vc_control := control ;
19065: LD_ADDR_OWVAR 38
19069: PUSH
19070: LD_VAR 0 3
19074: ST_TO_ADDR
// vc_weapon := weapon ;
19075: LD_ADDR_OWVAR 40
19079: PUSH
19080: LD_VAR 0 4
19084: ST_TO_ADDR
// un := CreateVehicle ;
19085: LD_ADDR_VAR 0 8
19089: PUSH
19090: CALL_OW 45
19094: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
19095: LD_VAR 0 8
19099: PPUSH
19100: LD_INT 0
19102: PPUSH
19103: LD_INT 5
19105: PPUSH
19106: CALL_OW 12
19110: PPUSH
19111: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
19115: LD_VAR 0 8
19119: PPUSH
19120: LD_VAR 0 5
19124: PPUSH
19125: LD_VAR 0 6
19129: PPUSH
19130: LD_INT 1
19132: PPUSH
19133: CALL_OW 48
// end ;
19137: LD_VAR 0 7
19141: RET
// export hInvincible ; every 1 do
19142: GO 19144
19144: DISABLE
// hInvincible := [ ] ;
19145: LD_ADDR_EXP 81
19149: PUSH
19150: EMPTY
19151: ST_TO_ADDR
19152: END
// every 10 do var i ;
19153: GO 19155
19155: DISABLE
19156: LD_INT 0
19158: PPUSH
// begin enable ;
19159: ENABLE
// if not hInvincible then
19160: LD_EXP 81
19164: NOT
19165: IFFALSE 19169
// exit ;
19167: GO 19213
// for i in hInvincible do
19169: LD_ADDR_VAR 0 1
19173: PUSH
19174: LD_EXP 81
19178: PUSH
19179: FOR_IN
19180: IFFALSE 19211
// if GetLives ( i ) < 1000 then
19182: LD_VAR 0 1
19186: PPUSH
19187: CALL_OW 256
19191: PUSH
19192: LD_INT 1000
19194: LESS
19195: IFFALSE 19209
// SetLives ( i , 1000 ) ;
19197: LD_VAR 0 1
19201: PPUSH
19202: LD_INT 1000
19204: PPUSH
19205: CALL_OW 234
19209: GO 19179
19211: POP
19212: POP
// end ;
19213: PPOPN 1
19215: END
// export function hHackInvincible ; var i ; begin
19216: LD_INT 0
19218: PPUSH
19219: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
19220: LD_ADDR_VAR 0 2
19224: PUSH
19225: LD_INT 2
19227: PUSH
19228: LD_INT 21
19230: PUSH
19231: LD_INT 1
19233: PUSH
19234: EMPTY
19235: LIST
19236: LIST
19237: PUSH
19238: LD_INT 21
19240: PUSH
19241: LD_INT 2
19243: PUSH
19244: EMPTY
19245: LIST
19246: LIST
19247: PUSH
19248: EMPTY
19249: LIST
19250: LIST
19251: LIST
19252: PPUSH
19253: CALL_OW 69
19257: PUSH
19258: FOR_IN
19259: IFFALSE 19320
// if IsSelected ( i ) then
19261: LD_VAR 0 2
19265: PPUSH
19266: CALL_OW 306
19270: IFFALSE 19318
// begin if i in hInvincible then
19272: LD_VAR 0 2
19276: PUSH
19277: LD_EXP 81
19281: IN
19282: IFFALSE 19302
// hInvincible := hInvincible diff i else
19284: LD_ADDR_EXP 81
19288: PUSH
19289: LD_EXP 81
19293: PUSH
19294: LD_VAR 0 2
19298: DIFF
19299: ST_TO_ADDR
19300: GO 19318
// hInvincible := hInvincible union i ;
19302: LD_ADDR_EXP 81
19306: PUSH
19307: LD_EXP 81
19311: PUSH
19312: LD_VAR 0 2
19316: UNION
19317: ST_TO_ADDR
// end ;
19318: GO 19258
19320: POP
19321: POP
// end ;
19322: LD_VAR 0 1
19326: RET
// export function hHackInvisible ; var i , j ; begin
19327: LD_INT 0
19329: PPUSH
19330: PPUSH
19331: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19332: LD_ADDR_VAR 0 2
19336: PUSH
19337: LD_INT 21
19339: PUSH
19340: LD_INT 1
19342: PUSH
19343: EMPTY
19344: LIST
19345: LIST
19346: PPUSH
19347: CALL_OW 69
19351: PUSH
19352: FOR_IN
19353: IFFALSE 19377
// if IsSelected ( i ) then
19355: LD_VAR 0 2
19359: PPUSH
19360: CALL_OW 306
19364: IFFALSE 19375
// ComForceInvisible ( i ) ;
19366: LD_VAR 0 2
19370: PPUSH
19371: CALL_OW 496
19375: GO 19352
19377: POP
19378: POP
// end ;
19379: LD_VAR 0 1
19383: RET
// export function hHackChangeYourSide ; begin
19384: LD_INT 0
19386: PPUSH
// if your_side = 8 then
19387: LD_OWVAR 2
19391: PUSH
19392: LD_INT 8
19394: EQUAL
19395: IFFALSE 19407
// your_side := 0 else
19397: LD_ADDR_OWVAR 2
19401: PUSH
19402: LD_INT 0
19404: ST_TO_ADDR
19405: GO 19421
// your_side := your_side + 1 ;
19407: LD_ADDR_OWVAR 2
19411: PUSH
19412: LD_OWVAR 2
19416: PUSH
19417: LD_INT 1
19419: PLUS
19420: ST_TO_ADDR
// end ;
19421: LD_VAR 0 1
19425: RET
// export function hHackChangeUnitSide ; var i , j ; begin
19426: LD_INT 0
19428: PPUSH
19429: PPUSH
19430: PPUSH
// for i in all_units do
19431: LD_ADDR_VAR 0 2
19435: PUSH
19436: LD_OWVAR 3
19440: PUSH
19441: FOR_IN
19442: IFFALSE 19520
// if IsSelected ( i ) then
19444: LD_VAR 0 2
19448: PPUSH
19449: CALL_OW 306
19453: IFFALSE 19518
// begin j := GetSide ( i ) ;
19455: LD_ADDR_VAR 0 3
19459: PUSH
19460: LD_VAR 0 2
19464: PPUSH
19465: CALL_OW 255
19469: ST_TO_ADDR
// if j = 8 then
19470: LD_VAR 0 3
19474: PUSH
19475: LD_INT 8
19477: EQUAL
19478: IFFALSE 19490
// j := 0 else
19480: LD_ADDR_VAR 0 3
19484: PUSH
19485: LD_INT 0
19487: ST_TO_ADDR
19488: GO 19504
// j := j + 1 ;
19490: LD_ADDR_VAR 0 3
19494: PUSH
19495: LD_VAR 0 3
19499: PUSH
19500: LD_INT 1
19502: PLUS
19503: ST_TO_ADDR
// SetSide ( i , j ) ;
19504: LD_VAR 0 2
19508: PPUSH
19509: LD_VAR 0 3
19513: PPUSH
19514: CALL_OW 235
// end ;
19518: GO 19441
19520: POP
19521: POP
// end ;
19522: LD_VAR 0 1
19526: RET
// export function hHackFog ; begin
19527: LD_INT 0
19529: PPUSH
// FogOff ( true ) ;
19530: LD_INT 1
19532: PPUSH
19533: CALL_OW 344
// end ;
19537: LD_VAR 0 1
19541: RET
// export function hHackTeleport ( unit , x , y ) ; begin
19542: LD_INT 0
19544: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
19545: LD_VAR 0 1
19549: PPUSH
19550: LD_VAR 0 2
19554: PPUSH
19555: LD_VAR 0 3
19559: PPUSH
19560: LD_INT 1
19562: PPUSH
19563: LD_INT 1
19565: PPUSH
19566: CALL_OW 483
// CenterOnXY ( x , y ) ;
19570: LD_VAR 0 2
19574: PPUSH
19575: LD_VAR 0 3
19579: PPUSH
19580: CALL_OW 84
// end ; end_of_file
19584: LD_VAR 0 4
19588: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
19589: LD_INT 0
19591: PPUSH
19592: PPUSH
19593: PPUSH
19594: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
19595: LD_VAR 0 1
19599: PPUSH
19600: CALL_OW 264
19604: PUSH
19605: LD_EXP 96
19609: EQUAL
19610: IFFALSE 19682
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
19612: LD_INT 68
19614: PPUSH
19615: LD_VAR 0 1
19619: PPUSH
19620: CALL_OW 255
19624: PPUSH
19625: CALL_OW 321
19629: PUSH
19630: LD_INT 2
19632: EQUAL
19633: IFFALSE 19645
// eff := 70 else
19635: LD_ADDR_VAR 0 4
19639: PUSH
19640: LD_INT 70
19642: ST_TO_ADDR
19643: GO 19653
// eff := 30 ;
19645: LD_ADDR_VAR 0 4
19649: PUSH
19650: LD_INT 30
19652: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
19653: LD_VAR 0 1
19657: PPUSH
19658: CALL_OW 250
19662: PPUSH
19663: LD_VAR 0 1
19667: PPUSH
19668: CALL_OW 251
19672: PPUSH
19673: LD_VAR 0 4
19677: PPUSH
19678: CALL_OW 495
// end ; end ;
19682: LD_VAR 0 2
19686: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
19687: LD_INT 0
19689: PPUSH
// end ;
19690: LD_VAR 0 4
19694: RET
// export function SOS_Command ( cmd ) ; begin
19695: LD_INT 0
19697: PPUSH
// end ;
19698: LD_VAR 0 2
19702: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
19703: LD_INT 0
19705: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
19706: LD_VAR 0 1
19710: PUSH
19711: LD_INT 250
19713: EQUAL
19714: PUSH
19715: LD_VAR 0 2
19719: PPUSH
19720: CALL_OW 264
19724: PUSH
19725: LD_EXP 99
19729: EQUAL
19730: AND
19731: IFFALSE 19752
// MinerPlaceMine ( unit , x , y ) ;
19733: LD_VAR 0 2
19737: PPUSH
19738: LD_VAR 0 4
19742: PPUSH
19743: LD_VAR 0 5
19747: PPUSH
19748: CALL 22093 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
19752: LD_VAR 0 1
19756: PUSH
19757: LD_INT 251
19759: EQUAL
19760: PUSH
19761: LD_VAR 0 2
19765: PPUSH
19766: CALL_OW 264
19770: PUSH
19771: LD_EXP 99
19775: EQUAL
19776: AND
19777: IFFALSE 19798
// MinerDetonateMine ( unit , x , y ) ;
19779: LD_VAR 0 2
19783: PPUSH
19784: LD_VAR 0 4
19788: PPUSH
19789: LD_VAR 0 5
19793: PPUSH
19794: CALL 22370 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
19798: LD_VAR 0 1
19802: PUSH
19803: LD_INT 252
19805: EQUAL
19806: PUSH
19807: LD_VAR 0 2
19811: PPUSH
19812: CALL_OW 264
19816: PUSH
19817: LD_EXP 99
19821: EQUAL
19822: AND
19823: IFFALSE 19844
// MinerCreateMinefield ( unit , x , y ) ;
19825: LD_VAR 0 2
19829: PPUSH
19830: LD_VAR 0 4
19834: PPUSH
19835: LD_VAR 0 5
19839: PPUSH
19840: CALL 22787 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
19844: LD_VAR 0 1
19848: PUSH
19849: LD_INT 253
19851: EQUAL
19852: PUSH
19853: LD_VAR 0 2
19857: PPUSH
19858: CALL_OW 257
19862: PUSH
19863: LD_INT 5
19865: EQUAL
19866: AND
19867: IFFALSE 19888
// ComBinocular ( unit , x , y ) ;
19869: LD_VAR 0 2
19873: PPUSH
19874: LD_VAR 0 4
19878: PPUSH
19879: LD_VAR 0 5
19883: PPUSH
19884: CALL 23158 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
19888: LD_VAR 0 1
19892: PUSH
19893: LD_INT 254
19895: EQUAL
19896: PUSH
19897: LD_VAR 0 2
19901: PPUSH
19902: CALL_OW 264
19906: PUSH
19907: LD_EXP 94
19911: EQUAL
19912: AND
19913: PUSH
19914: LD_VAR 0 3
19918: PPUSH
19919: CALL_OW 263
19923: PUSH
19924: LD_INT 3
19926: EQUAL
19927: AND
19928: IFFALSE 19944
// HackDestroyVehicle ( unit , selectedUnit ) ;
19930: LD_VAR 0 2
19934: PPUSH
19935: LD_VAR 0 3
19939: PPUSH
19940: CALL 21453 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
19944: LD_VAR 0 1
19948: PUSH
19949: LD_INT 255
19951: EQUAL
19952: PUSH
19953: LD_VAR 0 2
19957: PPUSH
19958: CALL_OW 264
19962: PUSH
19963: LD_INT 14
19965: PUSH
19966: LD_INT 53
19968: PUSH
19969: EMPTY
19970: LIST
19971: LIST
19972: IN
19973: AND
19974: PUSH
19975: LD_VAR 0 4
19979: PPUSH
19980: LD_VAR 0 5
19984: PPUSH
19985: CALL_OW 488
19989: AND
19990: IFFALSE 20014
// CutTreeXYR ( unit , x , y , 12 ) ;
19992: LD_VAR 0 2
19996: PPUSH
19997: LD_VAR 0 4
20001: PPUSH
20002: LD_VAR 0 5
20006: PPUSH
20007: LD_INT 12
20009: PPUSH
20010: CALL 20019 0 4
// end ;
20014: LD_VAR 0 6
20018: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
20019: LD_INT 0
20021: PPUSH
20022: PPUSH
20023: PPUSH
20024: PPUSH
20025: PPUSH
20026: PPUSH
20027: PPUSH
20028: PPUSH
20029: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
20030: LD_VAR 0 1
20034: NOT
20035: PUSH
20036: LD_VAR 0 2
20040: PPUSH
20041: LD_VAR 0 3
20045: PPUSH
20046: CALL_OW 488
20050: NOT
20051: OR
20052: PUSH
20053: LD_VAR 0 4
20057: NOT
20058: OR
20059: IFFALSE 20063
// exit ;
20061: GO 20403
// list := [ ] ;
20063: LD_ADDR_VAR 0 13
20067: PUSH
20068: EMPTY
20069: ST_TO_ADDR
// if x - r < 0 then
20070: LD_VAR 0 2
20074: PUSH
20075: LD_VAR 0 4
20079: MINUS
20080: PUSH
20081: LD_INT 0
20083: LESS
20084: IFFALSE 20096
// min_x := 0 else
20086: LD_ADDR_VAR 0 7
20090: PUSH
20091: LD_INT 0
20093: ST_TO_ADDR
20094: GO 20112
// min_x := x - r ;
20096: LD_ADDR_VAR 0 7
20100: PUSH
20101: LD_VAR 0 2
20105: PUSH
20106: LD_VAR 0 4
20110: MINUS
20111: ST_TO_ADDR
// if y - r < 0 then
20112: LD_VAR 0 3
20116: PUSH
20117: LD_VAR 0 4
20121: MINUS
20122: PUSH
20123: LD_INT 0
20125: LESS
20126: IFFALSE 20138
// min_y := 0 else
20128: LD_ADDR_VAR 0 8
20132: PUSH
20133: LD_INT 0
20135: ST_TO_ADDR
20136: GO 20154
// min_y := y - r ;
20138: LD_ADDR_VAR 0 8
20142: PUSH
20143: LD_VAR 0 3
20147: PUSH
20148: LD_VAR 0 4
20152: MINUS
20153: ST_TO_ADDR
// max_x := x + r ;
20154: LD_ADDR_VAR 0 9
20158: PUSH
20159: LD_VAR 0 2
20163: PUSH
20164: LD_VAR 0 4
20168: PLUS
20169: ST_TO_ADDR
// max_y := y + r ;
20170: LD_ADDR_VAR 0 10
20174: PUSH
20175: LD_VAR 0 3
20179: PUSH
20180: LD_VAR 0 4
20184: PLUS
20185: ST_TO_ADDR
// for _x = min_x to max_x do
20186: LD_ADDR_VAR 0 11
20190: PUSH
20191: DOUBLE
20192: LD_VAR 0 7
20196: DEC
20197: ST_TO_ADDR
20198: LD_VAR 0 9
20202: PUSH
20203: FOR_TO
20204: IFFALSE 20321
// for _y = min_y to max_y do
20206: LD_ADDR_VAR 0 12
20210: PUSH
20211: DOUBLE
20212: LD_VAR 0 8
20216: DEC
20217: ST_TO_ADDR
20218: LD_VAR 0 10
20222: PUSH
20223: FOR_TO
20224: IFFALSE 20317
// begin if not ValidHex ( _x , _y ) then
20226: LD_VAR 0 11
20230: PPUSH
20231: LD_VAR 0 12
20235: PPUSH
20236: CALL_OW 488
20240: NOT
20241: IFFALSE 20245
// continue ;
20243: GO 20223
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
20245: LD_VAR 0 11
20249: PPUSH
20250: LD_VAR 0 12
20254: PPUSH
20255: CALL_OW 351
20259: PUSH
20260: LD_VAR 0 11
20264: PPUSH
20265: LD_VAR 0 12
20269: PPUSH
20270: CALL_OW 554
20274: AND
20275: IFFALSE 20315
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
20277: LD_ADDR_VAR 0 13
20281: PUSH
20282: LD_VAR 0 13
20286: PPUSH
20287: LD_VAR 0 13
20291: PUSH
20292: LD_INT 1
20294: PLUS
20295: PPUSH
20296: LD_VAR 0 11
20300: PUSH
20301: LD_VAR 0 12
20305: PUSH
20306: EMPTY
20307: LIST
20308: LIST
20309: PPUSH
20310: CALL_OW 2
20314: ST_TO_ADDR
// end ;
20315: GO 20223
20317: POP
20318: POP
20319: GO 20203
20321: POP
20322: POP
// if not list then
20323: LD_VAR 0 13
20327: NOT
20328: IFFALSE 20332
// exit ;
20330: GO 20403
// for i in list do
20332: LD_ADDR_VAR 0 6
20336: PUSH
20337: LD_VAR 0 13
20341: PUSH
20342: FOR_IN
20343: IFFALSE 20401
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
20345: LD_VAR 0 1
20349: PPUSH
20350: LD_STRING M
20352: PUSH
20353: LD_VAR 0 6
20357: PUSH
20358: LD_INT 1
20360: ARRAY
20361: PUSH
20362: LD_VAR 0 6
20366: PUSH
20367: LD_INT 2
20369: ARRAY
20370: PUSH
20371: LD_INT 0
20373: PUSH
20374: LD_INT 0
20376: PUSH
20377: LD_INT 0
20379: PUSH
20380: LD_INT 0
20382: PUSH
20383: EMPTY
20384: LIST
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: PUSH
20392: EMPTY
20393: LIST
20394: PPUSH
20395: CALL_OW 447
20399: GO 20342
20401: POP
20402: POP
// end ;
20403: LD_VAR 0 5
20407: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
20408: LD_EXP 82
20412: NOT
20413: IFFALSE 20463
20415: GO 20417
20417: DISABLE
// begin initHack := true ;
20418: LD_ADDR_EXP 82
20422: PUSH
20423: LD_INT 1
20425: ST_TO_ADDR
// hackTanks := [ ] ;
20426: LD_ADDR_EXP 83
20430: PUSH
20431: EMPTY
20432: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
20433: LD_ADDR_EXP 84
20437: PUSH
20438: EMPTY
20439: ST_TO_ADDR
// hackLimit := 3 ;
20440: LD_ADDR_EXP 85
20444: PUSH
20445: LD_INT 3
20447: ST_TO_ADDR
// hackDist := 12 ;
20448: LD_ADDR_EXP 86
20452: PUSH
20453: LD_INT 12
20455: ST_TO_ADDR
// hackCounter := [ ] ;
20456: LD_ADDR_EXP 87
20460: PUSH
20461: EMPTY
20462: ST_TO_ADDR
// end ;
20463: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
20464: LD_EXP 82
20468: PUSH
20469: LD_INT 34
20471: PUSH
20472: LD_EXP 94
20476: PUSH
20477: EMPTY
20478: LIST
20479: LIST
20480: PPUSH
20481: CALL_OW 69
20485: AND
20486: IFFALSE 20741
20488: GO 20490
20490: DISABLE
20491: LD_INT 0
20493: PPUSH
20494: PPUSH
// begin enable ;
20495: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
20496: LD_ADDR_VAR 0 1
20500: PUSH
20501: LD_INT 34
20503: PUSH
20504: LD_EXP 94
20508: PUSH
20509: EMPTY
20510: LIST
20511: LIST
20512: PPUSH
20513: CALL_OW 69
20517: PUSH
20518: FOR_IN
20519: IFFALSE 20739
// begin if not i in hackTanks then
20521: LD_VAR 0 1
20525: PUSH
20526: LD_EXP 83
20530: IN
20531: NOT
20532: IFFALSE 20615
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
20534: LD_ADDR_EXP 83
20538: PUSH
20539: LD_EXP 83
20543: PPUSH
20544: LD_EXP 83
20548: PUSH
20549: LD_INT 1
20551: PLUS
20552: PPUSH
20553: LD_VAR 0 1
20557: PPUSH
20558: CALL_OW 1
20562: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
20563: LD_ADDR_EXP 84
20567: PUSH
20568: LD_EXP 84
20572: PPUSH
20573: LD_EXP 84
20577: PUSH
20578: LD_INT 1
20580: PLUS
20581: PPUSH
20582: EMPTY
20583: PPUSH
20584: CALL_OW 1
20588: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
20589: LD_ADDR_EXP 87
20593: PUSH
20594: LD_EXP 87
20598: PPUSH
20599: LD_EXP 87
20603: PUSH
20604: LD_INT 1
20606: PLUS
20607: PPUSH
20608: EMPTY
20609: PPUSH
20610: CALL_OW 1
20614: ST_TO_ADDR
// end ; if not IsOk ( i ) then
20615: LD_VAR 0 1
20619: PPUSH
20620: CALL_OW 302
20624: NOT
20625: IFFALSE 20638
// begin HackUnlinkAll ( i ) ;
20627: LD_VAR 0 1
20631: PPUSH
20632: CALL 20744 0 1
// continue ;
20636: GO 20518
// end ; HackCheckCapturedStatus ( i ) ;
20638: LD_VAR 0 1
20642: PPUSH
20643: CALL 21187 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
20647: LD_ADDR_VAR 0 2
20651: PUSH
20652: LD_INT 81
20654: PUSH
20655: LD_VAR 0 1
20659: PPUSH
20660: CALL_OW 255
20664: PUSH
20665: EMPTY
20666: LIST
20667: LIST
20668: PUSH
20669: LD_INT 33
20671: PUSH
20672: LD_INT 3
20674: PUSH
20675: EMPTY
20676: LIST
20677: LIST
20678: PUSH
20679: LD_INT 91
20681: PUSH
20682: LD_VAR 0 1
20686: PUSH
20687: LD_EXP 86
20691: PUSH
20692: EMPTY
20693: LIST
20694: LIST
20695: LIST
20696: PUSH
20697: LD_INT 50
20699: PUSH
20700: EMPTY
20701: LIST
20702: PUSH
20703: EMPTY
20704: LIST
20705: LIST
20706: LIST
20707: LIST
20708: PPUSH
20709: CALL_OW 69
20713: ST_TO_ADDR
// if not tmp then
20714: LD_VAR 0 2
20718: NOT
20719: IFFALSE 20723
// continue ;
20721: GO 20518
// HackLink ( i , tmp ) ;
20723: LD_VAR 0 1
20727: PPUSH
20728: LD_VAR 0 2
20732: PPUSH
20733: CALL 20880 0 2
// end ;
20737: GO 20518
20739: POP
20740: POP
// end ;
20741: PPOPN 2
20743: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
20744: LD_INT 0
20746: PPUSH
20747: PPUSH
20748: PPUSH
// if not hack in hackTanks then
20749: LD_VAR 0 1
20753: PUSH
20754: LD_EXP 83
20758: IN
20759: NOT
20760: IFFALSE 20764
// exit ;
20762: GO 20875
// index := GetElementIndex ( hackTanks , hack ) ;
20764: LD_ADDR_VAR 0 4
20768: PUSH
20769: LD_EXP 83
20773: PPUSH
20774: LD_VAR 0 1
20778: PPUSH
20779: CALL 28453 0 2
20783: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
20784: LD_EXP 84
20788: PUSH
20789: LD_VAR 0 4
20793: ARRAY
20794: IFFALSE 20875
// begin for i in hackTanksCaptured [ index ] do
20796: LD_ADDR_VAR 0 3
20800: PUSH
20801: LD_EXP 84
20805: PUSH
20806: LD_VAR 0 4
20810: ARRAY
20811: PUSH
20812: FOR_IN
20813: IFFALSE 20839
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
20815: LD_VAR 0 3
20819: PUSH
20820: LD_INT 1
20822: ARRAY
20823: PPUSH
20824: LD_VAR 0 3
20828: PUSH
20829: LD_INT 2
20831: ARRAY
20832: PPUSH
20833: CALL_OW 235
20837: GO 20812
20839: POP
20840: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
20841: LD_ADDR_EXP 84
20845: PUSH
20846: LD_EXP 84
20850: PPUSH
20851: LD_VAR 0 4
20855: PPUSH
20856: EMPTY
20857: PPUSH
20858: CALL_OW 1
20862: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
20863: LD_VAR 0 1
20867: PPUSH
20868: LD_INT 0
20870: PPUSH
20871: CALL_OW 505
// end ; end ;
20875: LD_VAR 0 2
20879: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
20880: LD_INT 0
20882: PPUSH
20883: PPUSH
20884: PPUSH
// if not hack in hackTanks or not vehicles then
20885: LD_VAR 0 1
20889: PUSH
20890: LD_EXP 83
20894: IN
20895: NOT
20896: PUSH
20897: LD_VAR 0 2
20901: NOT
20902: OR
20903: IFFALSE 20907
// exit ;
20905: GO 21182
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
20907: LD_ADDR_VAR 0 2
20911: PUSH
20912: LD_VAR 0 1
20916: PPUSH
20917: LD_VAR 0 2
20921: PPUSH
20922: LD_INT 1
20924: PPUSH
20925: LD_INT 1
20927: PPUSH
20928: CALL 29103 0 4
20932: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
20933: LD_ADDR_VAR 0 5
20937: PUSH
20938: LD_EXP 83
20942: PPUSH
20943: LD_VAR 0 1
20947: PPUSH
20948: CALL 28453 0 2
20952: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
20953: LD_EXP 84
20957: PUSH
20958: LD_VAR 0 5
20962: ARRAY
20963: PUSH
20964: LD_EXP 85
20968: LESS
20969: IFFALSE 21158
// begin for i := 1 to vehicles do
20971: LD_ADDR_VAR 0 4
20975: PUSH
20976: DOUBLE
20977: LD_INT 1
20979: DEC
20980: ST_TO_ADDR
20981: LD_VAR 0 2
20985: PUSH
20986: FOR_TO
20987: IFFALSE 21156
// begin if hackTanksCaptured [ index ] = hackLimit then
20989: LD_EXP 84
20993: PUSH
20994: LD_VAR 0 5
20998: ARRAY
20999: PUSH
21000: LD_EXP 85
21004: EQUAL
21005: IFFALSE 21009
// break ;
21007: GO 21156
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
21009: LD_ADDR_EXP 87
21013: PUSH
21014: LD_EXP 87
21018: PPUSH
21019: LD_VAR 0 5
21023: PPUSH
21024: LD_EXP 87
21028: PUSH
21029: LD_VAR 0 5
21033: ARRAY
21034: PUSH
21035: LD_INT 1
21037: PLUS
21038: PPUSH
21039: CALL_OW 1
21043: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
21044: LD_ADDR_EXP 84
21048: PUSH
21049: LD_EXP 84
21053: PPUSH
21054: LD_VAR 0 5
21058: PUSH
21059: LD_EXP 84
21063: PUSH
21064: LD_VAR 0 5
21068: ARRAY
21069: PUSH
21070: LD_INT 1
21072: PLUS
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: PPUSH
21078: LD_VAR 0 2
21082: PUSH
21083: LD_VAR 0 4
21087: ARRAY
21088: PUSH
21089: LD_VAR 0 2
21093: PUSH
21094: LD_VAR 0 4
21098: ARRAY
21099: PPUSH
21100: CALL_OW 255
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: PPUSH
21109: CALL 28668 0 3
21113: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
21114: LD_VAR 0 2
21118: PUSH
21119: LD_VAR 0 4
21123: ARRAY
21124: PPUSH
21125: LD_VAR 0 1
21129: PPUSH
21130: CALL_OW 255
21134: PPUSH
21135: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
21139: LD_VAR 0 2
21143: PUSH
21144: LD_VAR 0 4
21148: ARRAY
21149: PPUSH
21150: CALL_OW 141
// end ;
21154: GO 20986
21156: POP
21157: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21158: LD_VAR 0 1
21162: PPUSH
21163: LD_EXP 84
21167: PUSH
21168: LD_VAR 0 5
21172: ARRAY
21173: PUSH
21174: LD_INT 0
21176: PLUS
21177: PPUSH
21178: CALL_OW 505
// end ;
21182: LD_VAR 0 3
21186: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
21187: LD_INT 0
21189: PPUSH
21190: PPUSH
21191: PPUSH
21192: PPUSH
// if not hack in hackTanks then
21193: LD_VAR 0 1
21197: PUSH
21198: LD_EXP 83
21202: IN
21203: NOT
21204: IFFALSE 21208
// exit ;
21206: GO 21448
// index := GetElementIndex ( hackTanks , hack ) ;
21208: LD_ADDR_VAR 0 4
21212: PUSH
21213: LD_EXP 83
21217: PPUSH
21218: LD_VAR 0 1
21222: PPUSH
21223: CALL 28453 0 2
21227: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
21228: LD_ADDR_VAR 0 3
21232: PUSH
21233: DOUBLE
21234: LD_EXP 84
21238: PUSH
21239: LD_VAR 0 4
21243: ARRAY
21244: INC
21245: ST_TO_ADDR
21246: LD_INT 1
21248: PUSH
21249: FOR_DOWNTO
21250: IFFALSE 21422
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
21252: LD_ADDR_VAR 0 5
21256: PUSH
21257: LD_EXP 84
21261: PUSH
21262: LD_VAR 0 4
21266: ARRAY
21267: PUSH
21268: LD_VAR 0 3
21272: ARRAY
21273: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
21274: LD_VAR 0 5
21278: PUSH
21279: LD_INT 1
21281: ARRAY
21282: PPUSH
21283: CALL_OW 302
21287: NOT
21288: PUSH
21289: LD_VAR 0 5
21293: PUSH
21294: LD_INT 1
21296: ARRAY
21297: PPUSH
21298: CALL_OW 255
21302: PUSH
21303: LD_VAR 0 1
21307: PPUSH
21308: CALL_OW 255
21312: NONEQUAL
21313: OR
21314: IFFALSE 21420
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
21316: LD_VAR 0 5
21320: PUSH
21321: LD_INT 1
21323: ARRAY
21324: PPUSH
21325: CALL_OW 305
21329: PUSH
21330: LD_VAR 0 5
21334: PUSH
21335: LD_INT 1
21337: ARRAY
21338: PPUSH
21339: CALL_OW 255
21343: PUSH
21344: LD_VAR 0 1
21348: PPUSH
21349: CALL_OW 255
21353: EQUAL
21354: AND
21355: IFFALSE 21379
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
21357: LD_VAR 0 5
21361: PUSH
21362: LD_INT 1
21364: ARRAY
21365: PPUSH
21366: LD_VAR 0 5
21370: PUSH
21371: LD_INT 2
21373: ARRAY
21374: PPUSH
21375: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
21379: LD_ADDR_EXP 84
21383: PUSH
21384: LD_EXP 84
21388: PPUSH
21389: LD_VAR 0 4
21393: PPUSH
21394: LD_EXP 84
21398: PUSH
21399: LD_VAR 0 4
21403: ARRAY
21404: PPUSH
21405: LD_VAR 0 3
21409: PPUSH
21410: CALL_OW 3
21414: PPUSH
21415: CALL_OW 1
21419: ST_TO_ADDR
// end ; end ;
21420: GO 21249
21422: POP
21423: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21424: LD_VAR 0 1
21428: PPUSH
21429: LD_EXP 84
21433: PUSH
21434: LD_VAR 0 4
21438: ARRAY
21439: PUSH
21440: LD_INT 0
21442: PLUS
21443: PPUSH
21444: CALL_OW 505
// end ;
21448: LD_VAR 0 2
21452: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
21453: LD_INT 0
21455: PPUSH
21456: PPUSH
21457: PPUSH
21458: PPUSH
// if not hack in hackTanks then
21459: LD_VAR 0 1
21463: PUSH
21464: LD_EXP 83
21468: IN
21469: NOT
21470: IFFALSE 21474
// exit ;
21472: GO 21559
// index := GetElementIndex ( hackTanks , hack ) ;
21474: LD_ADDR_VAR 0 5
21478: PUSH
21479: LD_EXP 83
21483: PPUSH
21484: LD_VAR 0 1
21488: PPUSH
21489: CALL 28453 0 2
21493: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
21494: LD_ADDR_VAR 0 4
21498: PUSH
21499: DOUBLE
21500: LD_INT 1
21502: DEC
21503: ST_TO_ADDR
21504: LD_EXP 84
21508: PUSH
21509: LD_VAR 0 5
21513: ARRAY
21514: PUSH
21515: FOR_TO
21516: IFFALSE 21557
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
21518: LD_EXP 84
21522: PUSH
21523: LD_VAR 0 5
21527: ARRAY
21528: PUSH
21529: LD_VAR 0 4
21533: ARRAY
21534: PUSH
21535: LD_INT 1
21537: ARRAY
21538: PUSH
21539: LD_VAR 0 2
21543: EQUAL
21544: IFFALSE 21555
// KillUnit ( vehicle ) ;
21546: LD_VAR 0 2
21550: PPUSH
21551: CALL_OW 66
21555: GO 21515
21557: POP
21558: POP
// end ;
21559: LD_VAR 0 3
21563: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
21564: LD_EXP 88
21568: NOT
21569: IFFALSE 21604
21571: GO 21573
21573: DISABLE
// begin initMiner := true ;
21574: LD_ADDR_EXP 88
21578: PUSH
21579: LD_INT 1
21581: ST_TO_ADDR
// minersList := [ ] ;
21582: LD_ADDR_EXP 89
21586: PUSH
21587: EMPTY
21588: ST_TO_ADDR
// minerMinesList := [ ] ;
21589: LD_ADDR_EXP 90
21593: PUSH
21594: EMPTY
21595: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
21596: LD_ADDR_EXP 91
21600: PUSH
21601: LD_INT 5
21603: ST_TO_ADDR
// end ;
21604: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
21605: LD_EXP 88
21609: PUSH
21610: LD_INT 34
21612: PUSH
21613: LD_EXP 99
21617: PUSH
21618: EMPTY
21619: LIST
21620: LIST
21621: PPUSH
21622: CALL_OW 69
21626: AND
21627: IFFALSE 22090
21629: GO 21631
21631: DISABLE
21632: LD_INT 0
21634: PPUSH
21635: PPUSH
21636: PPUSH
21637: PPUSH
// begin enable ;
21638: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
21639: LD_ADDR_VAR 0 1
21643: PUSH
21644: LD_INT 34
21646: PUSH
21647: LD_EXP 99
21651: PUSH
21652: EMPTY
21653: LIST
21654: LIST
21655: PPUSH
21656: CALL_OW 69
21660: PUSH
21661: FOR_IN
21662: IFFALSE 21734
// begin if not i in minersList then
21664: LD_VAR 0 1
21668: PUSH
21669: LD_EXP 89
21673: IN
21674: NOT
21675: IFFALSE 21732
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
21677: LD_ADDR_EXP 89
21681: PUSH
21682: LD_EXP 89
21686: PPUSH
21687: LD_EXP 89
21691: PUSH
21692: LD_INT 1
21694: PLUS
21695: PPUSH
21696: LD_VAR 0 1
21700: PPUSH
21701: CALL_OW 1
21705: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
21706: LD_ADDR_EXP 90
21710: PUSH
21711: LD_EXP 90
21715: PPUSH
21716: LD_EXP 90
21720: PUSH
21721: LD_INT 1
21723: PLUS
21724: PPUSH
21725: EMPTY
21726: PPUSH
21727: CALL_OW 1
21731: ST_TO_ADDR
// end end ;
21732: GO 21661
21734: POP
21735: POP
// for i := minerMinesList downto 1 do
21736: LD_ADDR_VAR 0 1
21740: PUSH
21741: DOUBLE
21742: LD_EXP 90
21746: INC
21747: ST_TO_ADDR
21748: LD_INT 1
21750: PUSH
21751: FOR_DOWNTO
21752: IFFALSE 22088
// begin if IsLive ( minersList [ i ] ) then
21754: LD_EXP 89
21758: PUSH
21759: LD_VAR 0 1
21763: ARRAY
21764: PPUSH
21765: CALL_OW 300
21769: IFFALSE 21797
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
21771: LD_EXP 89
21775: PUSH
21776: LD_VAR 0 1
21780: ARRAY
21781: PPUSH
21782: LD_EXP 90
21786: PUSH
21787: LD_VAR 0 1
21791: ARRAY
21792: PPUSH
21793: CALL_OW 505
// if not minerMinesList [ i ] then
21797: LD_EXP 90
21801: PUSH
21802: LD_VAR 0 1
21806: ARRAY
21807: NOT
21808: IFFALSE 21812
// continue ;
21810: GO 21751
// for j := minerMinesList [ i ] downto 1 do
21812: LD_ADDR_VAR 0 2
21816: PUSH
21817: DOUBLE
21818: LD_EXP 90
21822: PUSH
21823: LD_VAR 0 1
21827: ARRAY
21828: INC
21829: ST_TO_ADDR
21830: LD_INT 1
21832: PUSH
21833: FOR_DOWNTO
21834: IFFALSE 22084
// begin side := GetSide ( minersList [ i ] ) ;
21836: LD_ADDR_VAR 0 3
21840: PUSH
21841: LD_EXP 89
21845: PUSH
21846: LD_VAR 0 1
21850: ARRAY
21851: PPUSH
21852: CALL_OW 255
21856: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
21857: LD_ADDR_VAR 0 4
21861: PUSH
21862: LD_EXP 90
21866: PUSH
21867: LD_VAR 0 1
21871: ARRAY
21872: PUSH
21873: LD_VAR 0 2
21877: ARRAY
21878: PUSH
21879: LD_INT 1
21881: ARRAY
21882: PPUSH
21883: LD_EXP 90
21887: PUSH
21888: LD_VAR 0 1
21892: ARRAY
21893: PUSH
21894: LD_VAR 0 2
21898: ARRAY
21899: PUSH
21900: LD_INT 2
21902: ARRAY
21903: PPUSH
21904: CALL_OW 428
21908: ST_TO_ADDR
// if not tmp then
21909: LD_VAR 0 4
21913: NOT
21914: IFFALSE 21918
// continue ;
21916: GO 21833
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
21918: LD_VAR 0 4
21922: PUSH
21923: LD_INT 81
21925: PUSH
21926: LD_VAR 0 3
21930: PUSH
21931: EMPTY
21932: LIST
21933: LIST
21934: PPUSH
21935: CALL_OW 69
21939: IN
21940: PUSH
21941: LD_EXP 90
21945: PUSH
21946: LD_VAR 0 1
21950: ARRAY
21951: PUSH
21952: LD_VAR 0 2
21956: ARRAY
21957: PUSH
21958: LD_INT 1
21960: ARRAY
21961: PPUSH
21962: LD_EXP 90
21966: PUSH
21967: LD_VAR 0 1
21971: ARRAY
21972: PUSH
21973: LD_VAR 0 2
21977: ARRAY
21978: PUSH
21979: LD_INT 2
21981: ARRAY
21982: PPUSH
21983: CALL_OW 458
21987: AND
21988: IFFALSE 22082
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
21990: LD_EXP 90
21994: PUSH
21995: LD_VAR 0 1
21999: ARRAY
22000: PUSH
22001: LD_VAR 0 2
22005: ARRAY
22006: PUSH
22007: LD_INT 1
22009: ARRAY
22010: PPUSH
22011: LD_EXP 90
22015: PUSH
22016: LD_VAR 0 1
22020: ARRAY
22021: PUSH
22022: LD_VAR 0 2
22026: ARRAY
22027: PUSH
22028: LD_INT 2
22030: ARRAY
22031: PPUSH
22032: LD_VAR 0 3
22036: PPUSH
22037: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
22041: LD_ADDR_EXP 90
22045: PUSH
22046: LD_EXP 90
22050: PPUSH
22051: LD_VAR 0 1
22055: PPUSH
22056: LD_EXP 90
22060: PUSH
22061: LD_VAR 0 1
22065: ARRAY
22066: PPUSH
22067: LD_VAR 0 2
22071: PPUSH
22072: CALL_OW 3
22076: PPUSH
22077: CALL_OW 1
22081: ST_TO_ADDR
// end ; end ;
22082: GO 21833
22084: POP
22085: POP
// end ;
22086: GO 21751
22088: POP
22089: POP
// end ;
22090: PPOPN 4
22092: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
22093: LD_INT 0
22095: PPUSH
22096: PPUSH
// result := false ;
22097: LD_ADDR_VAR 0 4
22101: PUSH
22102: LD_INT 0
22104: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
22105: LD_VAR 0 1
22109: PPUSH
22110: CALL_OW 264
22114: PUSH
22115: LD_EXP 99
22119: EQUAL
22120: NOT
22121: IFFALSE 22125
// exit ;
22123: GO 22365
// index := GetElementIndex ( minersList , unit ) ;
22125: LD_ADDR_VAR 0 5
22129: PUSH
22130: LD_EXP 89
22134: PPUSH
22135: LD_VAR 0 1
22139: PPUSH
22140: CALL 28453 0 2
22144: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
22145: LD_EXP 90
22149: PUSH
22150: LD_VAR 0 5
22154: ARRAY
22155: PUSH
22156: LD_EXP 91
22160: GREATEREQUAL
22161: IFFALSE 22165
// exit ;
22163: GO 22365
// ComMoveXY ( unit , x , y ) ;
22165: LD_VAR 0 1
22169: PPUSH
22170: LD_VAR 0 2
22174: PPUSH
22175: LD_VAR 0 3
22179: PPUSH
22180: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
22184: LD_INT 35
22186: PPUSH
22187: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
22191: LD_VAR 0 1
22195: PPUSH
22196: LD_VAR 0 2
22200: PPUSH
22201: LD_VAR 0 3
22205: PPUSH
22206: CALL 58517 0 3
22210: NOT
22211: PUSH
22212: LD_VAR 0 1
22216: PPUSH
22217: CALL_OW 314
22221: AND
22222: IFFALSE 22226
// exit ;
22224: GO 22365
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
22226: LD_VAR 0 2
22230: PPUSH
22231: LD_VAR 0 3
22235: PPUSH
22236: CALL_OW 428
22240: PUSH
22241: LD_VAR 0 1
22245: EQUAL
22246: PUSH
22247: LD_VAR 0 1
22251: PPUSH
22252: CALL_OW 314
22256: NOT
22257: AND
22258: IFFALSE 22184
// PlaySoundXY ( x , y , PlantMine ) ;
22260: LD_VAR 0 2
22264: PPUSH
22265: LD_VAR 0 3
22269: PPUSH
22270: LD_STRING PlantMine
22272: PPUSH
22273: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
22277: LD_VAR 0 2
22281: PPUSH
22282: LD_VAR 0 3
22286: PPUSH
22287: LD_VAR 0 1
22291: PPUSH
22292: CALL_OW 255
22296: PPUSH
22297: LD_INT 0
22299: PPUSH
22300: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
22304: LD_ADDR_EXP 90
22308: PUSH
22309: LD_EXP 90
22313: PPUSH
22314: LD_VAR 0 5
22318: PUSH
22319: LD_EXP 90
22323: PUSH
22324: LD_VAR 0 5
22328: ARRAY
22329: PUSH
22330: LD_INT 1
22332: PLUS
22333: PUSH
22334: EMPTY
22335: LIST
22336: LIST
22337: PPUSH
22338: LD_VAR 0 2
22342: PUSH
22343: LD_VAR 0 3
22347: PUSH
22348: EMPTY
22349: LIST
22350: LIST
22351: PPUSH
22352: CALL 28668 0 3
22356: ST_TO_ADDR
// result := true ;
22357: LD_ADDR_VAR 0 4
22361: PUSH
22362: LD_INT 1
22364: ST_TO_ADDR
// end ;
22365: LD_VAR 0 4
22369: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
22370: LD_INT 0
22372: PPUSH
22373: PPUSH
22374: PPUSH
// if not unit in minersList then
22375: LD_VAR 0 1
22379: PUSH
22380: LD_EXP 89
22384: IN
22385: NOT
22386: IFFALSE 22390
// exit ;
22388: GO 22782
// index := GetElementIndex ( minersList , unit ) ;
22390: LD_ADDR_VAR 0 6
22394: PUSH
22395: LD_EXP 89
22399: PPUSH
22400: LD_VAR 0 1
22404: PPUSH
22405: CALL 28453 0 2
22409: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
22410: LD_ADDR_VAR 0 5
22414: PUSH
22415: DOUBLE
22416: LD_EXP 90
22420: PUSH
22421: LD_VAR 0 6
22425: ARRAY
22426: INC
22427: ST_TO_ADDR
22428: LD_INT 1
22430: PUSH
22431: FOR_DOWNTO
22432: IFFALSE 22593
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
22434: LD_EXP 90
22438: PUSH
22439: LD_VAR 0 6
22443: ARRAY
22444: PUSH
22445: LD_VAR 0 5
22449: ARRAY
22450: PUSH
22451: LD_INT 1
22453: ARRAY
22454: PUSH
22455: LD_VAR 0 2
22459: EQUAL
22460: PUSH
22461: LD_EXP 90
22465: PUSH
22466: LD_VAR 0 6
22470: ARRAY
22471: PUSH
22472: LD_VAR 0 5
22476: ARRAY
22477: PUSH
22478: LD_INT 2
22480: ARRAY
22481: PUSH
22482: LD_VAR 0 3
22486: EQUAL
22487: AND
22488: IFFALSE 22591
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
22490: LD_EXP 90
22494: PUSH
22495: LD_VAR 0 6
22499: ARRAY
22500: PUSH
22501: LD_VAR 0 5
22505: ARRAY
22506: PUSH
22507: LD_INT 1
22509: ARRAY
22510: PPUSH
22511: LD_EXP 90
22515: PUSH
22516: LD_VAR 0 6
22520: ARRAY
22521: PUSH
22522: LD_VAR 0 5
22526: ARRAY
22527: PUSH
22528: LD_INT 2
22530: ARRAY
22531: PPUSH
22532: LD_VAR 0 1
22536: PPUSH
22537: CALL_OW 255
22541: PPUSH
22542: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
22546: LD_ADDR_EXP 90
22550: PUSH
22551: LD_EXP 90
22555: PPUSH
22556: LD_VAR 0 6
22560: PPUSH
22561: LD_EXP 90
22565: PUSH
22566: LD_VAR 0 6
22570: ARRAY
22571: PPUSH
22572: LD_VAR 0 5
22576: PPUSH
22577: CALL_OW 3
22581: PPUSH
22582: CALL_OW 1
22586: ST_TO_ADDR
// exit ;
22587: POP
22588: POP
22589: GO 22782
// end ; end ;
22591: GO 22431
22593: POP
22594: POP
// for i := minerMinesList [ index ] downto 1 do
22595: LD_ADDR_VAR 0 5
22599: PUSH
22600: DOUBLE
22601: LD_EXP 90
22605: PUSH
22606: LD_VAR 0 6
22610: ARRAY
22611: INC
22612: ST_TO_ADDR
22613: LD_INT 1
22615: PUSH
22616: FOR_DOWNTO
22617: IFFALSE 22780
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
22619: LD_EXP 90
22623: PUSH
22624: LD_VAR 0 6
22628: ARRAY
22629: PUSH
22630: LD_VAR 0 5
22634: ARRAY
22635: PUSH
22636: LD_INT 1
22638: ARRAY
22639: PPUSH
22640: LD_EXP 90
22644: PUSH
22645: LD_VAR 0 6
22649: ARRAY
22650: PUSH
22651: LD_VAR 0 5
22655: ARRAY
22656: PUSH
22657: LD_INT 2
22659: ARRAY
22660: PPUSH
22661: LD_VAR 0 2
22665: PPUSH
22666: LD_VAR 0 3
22670: PPUSH
22671: CALL_OW 298
22675: PUSH
22676: LD_INT 6
22678: LESS
22679: IFFALSE 22778
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
22681: LD_EXP 90
22685: PUSH
22686: LD_VAR 0 6
22690: ARRAY
22691: PUSH
22692: LD_VAR 0 5
22696: ARRAY
22697: PUSH
22698: LD_INT 1
22700: ARRAY
22701: PPUSH
22702: LD_EXP 90
22706: PUSH
22707: LD_VAR 0 6
22711: ARRAY
22712: PUSH
22713: LD_VAR 0 5
22717: ARRAY
22718: PUSH
22719: LD_INT 2
22721: ARRAY
22722: PPUSH
22723: LD_VAR 0 1
22727: PPUSH
22728: CALL_OW 255
22732: PPUSH
22733: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
22737: LD_ADDR_EXP 90
22741: PUSH
22742: LD_EXP 90
22746: PPUSH
22747: LD_VAR 0 6
22751: PPUSH
22752: LD_EXP 90
22756: PUSH
22757: LD_VAR 0 6
22761: ARRAY
22762: PPUSH
22763: LD_VAR 0 5
22767: PPUSH
22768: CALL_OW 3
22772: PPUSH
22773: CALL_OW 1
22777: ST_TO_ADDR
// end ; end ;
22778: GO 22616
22780: POP
22781: POP
// end ;
22782: LD_VAR 0 4
22786: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
22787: LD_INT 0
22789: PPUSH
22790: PPUSH
22791: PPUSH
22792: PPUSH
22793: PPUSH
22794: PPUSH
22795: PPUSH
22796: PPUSH
22797: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
22798: LD_VAR 0 1
22802: PPUSH
22803: CALL_OW 264
22807: PUSH
22808: LD_EXP 99
22812: EQUAL
22813: NOT
22814: PUSH
22815: LD_VAR 0 1
22819: PUSH
22820: LD_EXP 89
22824: IN
22825: NOT
22826: OR
22827: IFFALSE 22831
// exit ;
22829: GO 23153
// index := GetElementIndex ( minersList , unit ) ;
22831: LD_ADDR_VAR 0 6
22835: PUSH
22836: LD_EXP 89
22840: PPUSH
22841: LD_VAR 0 1
22845: PPUSH
22846: CALL 28453 0 2
22850: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
22851: LD_ADDR_VAR 0 8
22855: PUSH
22856: LD_EXP 91
22860: PUSH
22861: LD_EXP 90
22865: PUSH
22866: LD_VAR 0 6
22870: ARRAY
22871: MINUS
22872: ST_TO_ADDR
// if not minesFreeAmount then
22873: LD_VAR 0 8
22877: NOT
22878: IFFALSE 22882
// exit ;
22880: GO 23153
// tmp := [ ] ;
22882: LD_ADDR_VAR 0 7
22886: PUSH
22887: EMPTY
22888: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
22889: LD_ADDR_VAR 0 5
22893: PUSH
22894: DOUBLE
22895: LD_INT 1
22897: DEC
22898: ST_TO_ADDR
22899: LD_VAR 0 8
22903: PUSH
22904: FOR_TO
22905: IFFALSE 23100
// begin _d := rand ( 0 , 5 ) ;
22907: LD_ADDR_VAR 0 11
22911: PUSH
22912: LD_INT 0
22914: PPUSH
22915: LD_INT 5
22917: PPUSH
22918: CALL_OW 12
22922: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
22923: LD_ADDR_VAR 0 12
22927: PUSH
22928: LD_INT 2
22930: PPUSH
22931: LD_INT 6
22933: PPUSH
22934: CALL_OW 12
22938: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
22939: LD_ADDR_VAR 0 9
22943: PUSH
22944: LD_VAR 0 2
22948: PPUSH
22949: LD_VAR 0 11
22953: PPUSH
22954: LD_VAR 0 12
22958: PPUSH
22959: CALL_OW 272
22963: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
22964: LD_ADDR_VAR 0 10
22968: PUSH
22969: LD_VAR 0 3
22973: PPUSH
22974: LD_VAR 0 11
22978: PPUSH
22979: LD_VAR 0 12
22983: PPUSH
22984: CALL_OW 273
22988: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
22989: LD_VAR 0 9
22993: PPUSH
22994: LD_VAR 0 10
22998: PPUSH
22999: CALL_OW 488
23003: PUSH
23004: LD_VAR 0 9
23008: PUSH
23009: LD_VAR 0 10
23013: PUSH
23014: EMPTY
23015: LIST
23016: LIST
23017: PUSH
23018: LD_VAR 0 7
23022: IN
23023: NOT
23024: AND
23025: PUSH
23026: LD_VAR 0 9
23030: PPUSH
23031: LD_VAR 0 10
23035: PPUSH
23036: CALL_OW 458
23040: NOT
23041: AND
23042: IFFALSE 23084
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
23044: LD_ADDR_VAR 0 7
23048: PUSH
23049: LD_VAR 0 7
23053: PPUSH
23054: LD_VAR 0 7
23058: PUSH
23059: LD_INT 1
23061: PLUS
23062: PPUSH
23063: LD_VAR 0 9
23067: PUSH
23068: LD_VAR 0 10
23072: PUSH
23073: EMPTY
23074: LIST
23075: LIST
23076: PPUSH
23077: CALL_OW 1
23081: ST_TO_ADDR
23082: GO 23098
// i := i - 1 ;
23084: LD_ADDR_VAR 0 5
23088: PUSH
23089: LD_VAR 0 5
23093: PUSH
23094: LD_INT 1
23096: MINUS
23097: ST_TO_ADDR
// end ;
23098: GO 22904
23100: POP
23101: POP
// for i in tmp do
23102: LD_ADDR_VAR 0 5
23106: PUSH
23107: LD_VAR 0 7
23111: PUSH
23112: FOR_IN
23113: IFFALSE 23151
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
23115: LD_VAR 0 1
23119: PPUSH
23120: LD_VAR 0 5
23124: PUSH
23125: LD_INT 1
23127: ARRAY
23128: PPUSH
23129: LD_VAR 0 5
23133: PUSH
23134: LD_INT 2
23136: ARRAY
23137: PPUSH
23138: CALL 22093 0 3
23142: NOT
23143: IFFALSE 23149
// exit ;
23145: POP
23146: POP
23147: GO 23153
23149: GO 23112
23151: POP
23152: POP
// end ;
23153: LD_VAR 0 4
23157: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
23158: LD_INT 0
23160: PPUSH
23161: PPUSH
23162: PPUSH
23163: PPUSH
23164: PPUSH
23165: PPUSH
23166: PPUSH
// if not GetClass ( unit ) = class_sniper then
23167: LD_VAR 0 1
23171: PPUSH
23172: CALL_OW 257
23176: PUSH
23177: LD_INT 5
23179: EQUAL
23180: NOT
23181: IFFALSE 23185
// exit ;
23183: GO 23573
// dist := 8 ;
23185: LD_ADDR_VAR 0 5
23189: PUSH
23190: LD_INT 8
23192: ST_TO_ADDR
// viewRange := 12 ;
23193: LD_ADDR_VAR 0 7
23197: PUSH
23198: LD_INT 12
23200: ST_TO_ADDR
// side := GetSide ( unit ) ;
23201: LD_ADDR_VAR 0 6
23205: PUSH
23206: LD_VAR 0 1
23210: PPUSH
23211: CALL_OW 255
23215: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
23216: LD_INT 61
23218: PPUSH
23219: LD_VAR 0 6
23223: PPUSH
23224: CALL_OW 321
23228: PUSH
23229: LD_INT 2
23231: EQUAL
23232: IFFALSE 23242
// viewRange := 16 ;
23234: LD_ADDR_VAR 0 7
23238: PUSH
23239: LD_INT 16
23241: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
23242: LD_VAR 0 1
23246: PPUSH
23247: LD_VAR 0 2
23251: PPUSH
23252: LD_VAR 0 3
23256: PPUSH
23257: CALL_OW 297
23261: PUSH
23262: LD_VAR 0 5
23266: GREATER
23267: IFFALSE 23346
// begin ComMoveXY ( unit , x , y ) ;
23269: LD_VAR 0 1
23273: PPUSH
23274: LD_VAR 0 2
23278: PPUSH
23279: LD_VAR 0 3
23283: PPUSH
23284: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23288: LD_INT 35
23290: PPUSH
23291: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
23295: LD_VAR 0 1
23299: PPUSH
23300: LD_VAR 0 2
23304: PPUSH
23305: LD_VAR 0 3
23309: PPUSH
23310: CALL 58517 0 3
23314: NOT
23315: IFFALSE 23319
// exit ;
23317: GO 23573
// until GetDistUnitXY ( unit , x , y ) < dist ;
23319: LD_VAR 0 1
23323: PPUSH
23324: LD_VAR 0 2
23328: PPUSH
23329: LD_VAR 0 3
23333: PPUSH
23334: CALL_OW 297
23338: PUSH
23339: LD_VAR 0 5
23343: LESS
23344: IFFALSE 23288
// end ; ComTurnXY ( unit , x , y ) ;
23346: LD_VAR 0 1
23350: PPUSH
23351: LD_VAR 0 2
23355: PPUSH
23356: LD_VAR 0 3
23360: PPUSH
23361: CALL_OW 118
// wait ( 5 ) ;
23365: LD_INT 5
23367: PPUSH
23368: CALL_OW 67
// _d := GetDir ( unit ) ;
23372: LD_ADDR_VAR 0 10
23376: PUSH
23377: LD_VAR 0 1
23381: PPUSH
23382: CALL_OW 254
23386: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
23387: LD_ADDR_VAR 0 8
23391: PUSH
23392: LD_VAR 0 1
23396: PPUSH
23397: CALL_OW 250
23401: PPUSH
23402: LD_VAR 0 10
23406: PPUSH
23407: LD_VAR 0 5
23411: PPUSH
23412: CALL_OW 272
23416: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
23417: LD_ADDR_VAR 0 9
23421: PUSH
23422: LD_VAR 0 1
23426: PPUSH
23427: CALL_OW 251
23431: PPUSH
23432: LD_VAR 0 10
23436: PPUSH
23437: LD_VAR 0 5
23441: PPUSH
23442: CALL_OW 273
23446: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23447: LD_VAR 0 8
23451: PPUSH
23452: LD_VAR 0 9
23456: PPUSH
23457: CALL_OW 488
23461: NOT
23462: IFFALSE 23466
// exit ;
23464: GO 23573
// ComAnimCustom ( unit , 1 ) ;
23466: LD_VAR 0 1
23470: PPUSH
23471: LD_INT 1
23473: PPUSH
23474: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
23478: LD_VAR 0 8
23482: PPUSH
23483: LD_VAR 0 9
23487: PPUSH
23488: LD_VAR 0 6
23492: PPUSH
23493: LD_VAR 0 7
23497: PPUSH
23498: CALL_OW 330
// repeat wait ( 1 ) ;
23502: LD_INT 1
23504: PPUSH
23505: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
23509: LD_VAR 0 1
23513: PPUSH
23514: CALL_OW 316
23518: PUSH
23519: LD_VAR 0 1
23523: PPUSH
23524: CALL_OW 314
23528: OR
23529: PUSH
23530: LD_VAR 0 1
23534: PPUSH
23535: CALL_OW 302
23539: NOT
23540: OR
23541: PUSH
23542: LD_VAR 0 1
23546: PPUSH
23547: CALL_OW 301
23551: OR
23552: IFFALSE 23502
// RemoveSeeing ( _x , _y , side ) ;
23554: LD_VAR 0 8
23558: PPUSH
23559: LD_VAR 0 9
23563: PPUSH
23564: LD_VAR 0 6
23568: PPUSH
23569: CALL_OW 331
// end ; end_of_file
23573: LD_VAR 0 4
23577: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
23578: LD_INT 0
23580: PPUSH
// ar_miner := 81 ;
23581: LD_ADDR_EXP 99
23585: PUSH
23586: LD_INT 81
23588: ST_TO_ADDR
// ar_crane := 88 ;
23589: LD_ADDR_EXP 98
23593: PUSH
23594: LD_INT 88
23596: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
23597: LD_ADDR_EXP 93
23601: PUSH
23602: LD_INT 89
23604: ST_TO_ADDR
// us_hack := 99 ;
23605: LD_ADDR_EXP 94
23609: PUSH
23610: LD_INT 99
23612: ST_TO_ADDR
// us_artillery := 97 ;
23613: LD_ADDR_EXP 95
23617: PUSH
23618: LD_INT 97
23620: ST_TO_ADDR
// ar_bio_bomb := 91 ;
23621: LD_ADDR_EXP 96
23625: PUSH
23626: LD_INT 91
23628: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
23629: LD_ADDR_EXP 97
23633: PUSH
23634: LD_INT 92
23636: ST_TO_ADDR
// ru_radar := 98 ;
23637: LD_ADDR_EXP 92
23641: PUSH
23642: LD_INT 98
23644: ST_TO_ADDR
// tech_Artillery := 80 ;
23645: LD_ADDR_EXP 100
23649: PUSH
23650: LD_INT 80
23652: ST_TO_ADDR
// tech_RadMat := 81 ;
23653: LD_ADDR_EXP 101
23657: PUSH
23658: LD_INT 81
23660: ST_TO_ADDR
// tech_BasicTools := 82 ;
23661: LD_ADDR_EXP 102
23665: PUSH
23666: LD_INT 82
23668: ST_TO_ADDR
// tech_Cargo := 83 ;
23669: LD_ADDR_EXP 103
23673: PUSH
23674: LD_INT 83
23676: ST_TO_ADDR
// tech_Track := 84 ;
23677: LD_ADDR_EXP 104
23681: PUSH
23682: LD_INT 84
23684: ST_TO_ADDR
// tech_Crane := 85 ;
23685: LD_ADDR_EXP 105
23689: PUSH
23690: LD_INT 85
23692: ST_TO_ADDR
// tech_Bulldozer := 86 ;
23693: LD_ADDR_EXP 106
23697: PUSH
23698: LD_INT 86
23700: ST_TO_ADDR
// tech_Hovercraft := 87 ;
23701: LD_ADDR_EXP 107
23705: PUSH
23706: LD_INT 87
23708: ST_TO_ADDR
// end ;
23709: LD_VAR 0 1
23713: RET
// every 1 do
23714: GO 23716
23716: DISABLE
// InitGlobalVariables ; end_of_file
23717: CALL 23578 0 0
23721: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
23722: LD_INT 0
23724: PPUSH
23725: PPUSH
// if exist_mode then
23726: LD_VAR 0 2
23730: IFFALSE 23755
// unit := CreateCharacter ( prefix & ident ) else
23732: LD_ADDR_VAR 0 5
23736: PUSH
23737: LD_VAR 0 3
23741: PUSH
23742: LD_VAR 0 1
23746: STR
23747: PPUSH
23748: CALL_OW 34
23752: ST_TO_ADDR
23753: GO 23770
// unit := NewCharacter ( ident ) ;
23755: LD_ADDR_VAR 0 5
23759: PUSH
23760: LD_VAR 0 1
23764: PPUSH
23765: CALL_OW 25
23769: ST_TO_ADDR
// result := unit ;
23770: LD_ADDR_VAR 0 4
23774: PUSH
23775: LD_VAR 0 5
23779: ST_TO_ADDR
// end ;
23780: LD_VAR 0 4
23784: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
23785: LD_INT 0
23787: PPUSH
23788: PPUSH
// if not side or not nation then
23789: LD_VAR 0 1
23793: NOT
23794: PUSH
23795: LD_VAR 0 2
23799: NOT
23800: OR
23801: IFFALSE 23805
// exit ;
23803: GO 24569
// case nation of nation_american :
23805: LD_VAR 0 2
23809: PUSH
23810: LD_INT 1
23812: DOUBLE
23813: EQUAL
23814: IFTRUE 23818
23816: GO 24032
23818: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
23819: LD_ADDR_VAR 0 4
23823: PUSH
23824: LD_INT 35
23826: PUSH
23827: LD_INT 45
23829: PUSH
23830: LD_INT 46
23832: PUSH
23833: LD_INT 47
23835: PUSH
23836: LD_INT 82
23838: PUSH
23839: LD_INT 83
23841: PUSH
23842: LD_INT 84
23844: PUSH
23845: LD_INT 85
23847: PUSH
23848: LD_INT 86
23850: PUSH
23851: LD_INT 1
23853: PUSH
23854: LD_INT 2
23856: PUSH
23857: LD_INT 6
23859: PUSH
23860: LD_INT 15
23862: PUSH
23863: LD_INT 16
23865: PUSH
23866: LD_INT 7
23868: PUSH
23869: LD_INT 12
23871: PUSH
23872: LD_INT 13
23874: PUSH
23875: LD_INT 10
23877: PUSH
23878: LD_INT 14
23880: PUSH
23881: LD_INT 20
23883: PUSH
23884: LD_INT 21
23886: PUSH
23887: LD_INT 22
23889: PUSH
23890: LD_INT 25
23892: PUSH
23893: LD_INT 32
23895: PUSH
23896: LD_INT 27
23898: PUSH
23899: LD_INT 36
23901: PUSH
23902: LD_INT 69
23904: PUSH
23905: LD_INT 39
23907: PUSH
23908: LD_INT 34
23910: PUSH
23911: LD_INT 40
23913: PUSH
23914: LD_INT 48
23916: PUSH
23917: LD_INT 49
23919: PUSH
23920: LD_INT 50
23922: PUSH
23923: LD_INT 51
23925: PUSH
23926: LD_INT 52
23928: PUSH
23929: LD_INT 53
23931: PUSH
23932: LD_INT 54
23934: PUSH
23935: LD_INT 55
23937: PUSH
23938: LD_INT 56
23940: PUSH
23941: LD_INT 57
23943: PUSH
23944: LD_INT 58
23946: PUSH
23947: LD_INT 59
23949: PUSH
23950: LD_INT 60
23952: PUSH
23953: LD_INT 61
23955: PUSH
23956: LD_INT 62
23958: PUSH
23959: LD_INT 80
23961: PUSH
23962: LD_INT 82
23964: PUSH
23965: LD_INT 83
23967: PUSH
23968: LD_INT 84
23970: PUSH
23971: LD_INT 85
23973: PUSH
23974: LD_INT 86
23976: PUSH
23977: EMPTY
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: ST_TO_ADDR
24030: GO 24493
24032: LD_INT 2
24034: DOUBLE
24035: EQUAL
24036: IFTRUE 24040
24038: GO 24262
24040: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
24041: LD_ADDR_VAR 0 4
24045: PUSH
24046: LD_INT 35
24048: PUSH
24049: LD_INT 45
24051: PUSH
24052: LD_INT 46
24054: PUSH
24055: LD_INT 47
24057: PUSH
24058: LD_INT 82
24060: PUSH
24061: LD_INT 83
24063: PUSH
24064: LD_INT 84
24066: PUSH
24067: LD_INT 85
24069: PUSH
24070: LD_INT 87
24072: PUSH
24073: LD_INT 70
24075: PUSH
24076: LD_INT 1
24078: PUSH
24079: LD_INT 11
24081: PUSH
24082: LD_INT 3
24084: PUSH
24085: LD_INT 4
24087: PUSH
24088: LD_INT 5
24090: PUSH
24091: LD_INT 6
24093: PUSH
24094: LD_INT 15
24096: PUSH
24097: LD_INT 18
24099: PUSH
24100: LD_INT 7
24102: PUSH
24103: LD_INT 17
24105: PUSH
24106: LD_INT 8
24108: PUSH
24109: LD_INT 20
24111: PUSH
24112: LD_INT 21
24114: PUSH
24115: LD_INT 22
24117: PUSH
24118: LD_INT 72
24120: PUSH
24121: LD_INT 26
24123: PUSH
24124: LD_INT 69
24126: PUSH
24127: LD_INT 39
24129: PUSH
24130: LD_INT 40
24132: PUSH
24133: LD_INT 41
24135: PUSH
24136: LD_INT 42
24138: PUSH
24139: LD_INT 43
24141: PUSH
24142: LD_INT 48
24144: PUSH
24145: LD_INT 49
24147: PUSH
24148: LD_INT 50
24150: PUSH
24151: LD_INT 51
24153: PUSH
24154: LD_INT 52
24156: PUSH
24157: LD_INT 53
24159: PUSH
24160: LD_INT 54
24162: PUSH
24163: LD_INT 55
24165: PUSH
24166: LD_INT 56
24168: PUSH
24169: LD_INT 60
24171: PUSH
24172: LD_INT 61
24174: PUSH
24175: LD_INT 62
24177: PUSH
24178: LD_INT 66
24180: PUSH
24181: LD_INT 67
24183: PUSH
24184: LD_INT 68
24186: PUSH
24187: LD_INT 81
24189: PUSH
24190: LD_INT 82
24192: PUSH
24193: LD_INT 83
24195: PUSH
24196: LD_INT 84
24198: PUSH
24199: LD_INT 85
24201: PUSH
24202: LD_INT 87
24204: PUSH
24205: EMPTY
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: ST_TO_ADDR
24260: GO 24493
24262: LD_INT 3
24264: DOUBLE
24265: EQUAL
24266: IFTRUE 24270
24268: GO 24492
24270: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
24271: LD_ADDR_VAR 0 4
24275: PUSH
24276: LD_INT 46
24278: PUSH
24279: LD_INT 47
24281: PUSH
24282: LD_INT 1
24284: PUSH
24285: LD_INT 2
24287: PUSH
24288: LD_INT 82
24290: PUSH
24291: LD_INT 83
24293: PUSH
24294: LD_INT 84
24296: PUSH
24297: LD_INT 85
24299: PUSH
24300: LD_INT 86
24302: PUSH
24303: LD_INT 11
24305: PUSH
24306: LD_INT 9
24308: PUSH
24309: LD_INT 20
24311: PUSH
24312: LD_INT 19
24314: PUSH
24315: LD_INT 21
24317: PUSH
24318: LD_INT 24
24320: PUSH
24321: LD_INT 22
24323: PUSH
24324: LD_INT 25
24326: PUSH
24327: LD_INT 28
24329: PUSH
24330: LD_INT 29
24332: PUSH
24333: LD_INT 30
24335: PUSH
24336: LD_INT 31
24338: PUSH
24339: LD_INT 37
24341: PUSH
24342: LD_INT 38
24344: PUSH
24345: LD_INT 32
24347: PUSH
24348: LD_INT 27
24350: PUSH
24351: LD_INT 33
24353: PUSH
24354: LD_INT 69
24356: PUSH
24357: LD_INT 39
24359: PUSH
24360: LD_INT 34
24362: PUSH
24363: LD_INT 40
24365: PUSH
24366: LD_INT 71
24368: PUSH
24369: LD_INT 23
24371: PUSH
24372: LD_INT 44
24374: PUSH
24375: LD_INT 48
24377: PUSH
24378: LD_INT 49
24380: PUSH
24381: LD_INT 50
24383: PUSH
24384: LD_INT 51
24386: PUSH
24387: LD_INT 52
24389: PUSH
24390: LD_INT 53
24392: PUSH
24393: LD_INT 54
24395: PUSH
24396: LD_INT 55
24398: PUSH
24399: LD_INT 56
24401: PUSH
24402: LD_INT 57
24404: PUSH
24405: LD_INT 58
24407: PUSH
24408: LD_INT 59
24410: PUSH
24411: LD_INT 63
24413: PUSH
24414: LD_INT 64
24416: PUSH
24417: LD_INT 65
24419: PUSH
24420: LD_INT 82
24422: PUSH
24423: LD_INT 83
24425: PUSH
24426: LD_INT 84
24428: PUSH
24429: LD_INT 85
24431: PUSH
24432: LD_INT 86
24434: PUSH
24435: EMPTY
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: ST_TO_ADDR
24490: GO 24493
24492: POP
// if state > - 1 and state < 3 then
24493: LD_VAR 0 3
24497: PUSH
24498: LD_INT 1
24500: NEG
24501: GREATER
24502: PUSH
24503: LD_VAR 0 3
24507: PUSH
24508: LD_INT 3
24510: LESS
24511: AND
24512: IFFALSE 24569
// for i in result do
24514: LD_ADDR_VAR 0 5
24518: PUSH
24519: LD_VAR 0 4
24523: PUSH
24524: FOR_IN
24525: IFFALSE 24567
// if GetTech ( i , side ) <> state then
24527: LD_VAR 0 5
24531: PPUSH
24532: LD_VAR 0 1
24536: PPUSH
24537: CALL_OW 321
24541: PUSH
24542: LD_VAR 0 3
24546: NONEQUAL
24547: IFFALSE 24565
// result := result diff i ;
24549: LD_ADDR_VAR 0 4
24553: PUSH
24554: LD_VAR 0 4
24558: PUSH
24559: LD_VAR 0 5
24563: DIFF
24564: ST_TO_ADDR
24565: GO 24524
24567: POP
24568: POP
// end ;
24569: LD_VAR 0 4
24573: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
24574: LD_INT 0
24576: PPUSH
24577: PPUSH
24578: PPUSH
// result := true ;
24579: LD_ADDR_VAR 0 3
24583: PUSH
24584: LD_INT 1
24586: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
24587: LD_ADDR_VAR 0 5
24591: PUSH
24592: LD_VAR 0 2
24596: PPUSH
24597: CALL_OW 480
24601: ST_TO_ADDR
// if not tmp then
24602: LD_VAR 0 5
24606: NOT
24607: IFFALSE 24611
// exit ;
24609: GO 24660
// for i in tmp do
24611: LD_ADDR_VAR 0 4
24615: PUSH
24616: LD_VAR 0 5
24620: PUSH
24621: FOR_IN
24622: IFFALSE 24658
// if GetTech ( i , side ) <> state_researched then
24624: LD_VAR 0 4
24628: PPUSH
24629: LD_VAR 0 1
24633: PPUSH
24634: CALL_OW 321
24638: PUSH
24639: LD_INT 2
24641: NONEQUAL
24642: IFFALSE 24656
// begin result := false ;
24644: LD_ADDR_VAR 0 3
24648: PUSH
24649: LD_INT 0
24651: ST_TO_ADDR
// exit ;
24652: POP
24653: POP
24654: GO 24660
// end ;
24656: GO 24621
24658: POP
24659: POP
// end ;
24660: LD_VAR 0 3
24664: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
24665: LD_INT 0
24667: PPUSH
24668: PPUSH
24669: PPUSH
24670: PPUSH
24671: PPUSH
24672: PPUSH
24673: PPUSH
24674: PPUSH
24675: PPUSH
24676: PPUSH
24677: PPUSH
24678: PPUSH
24679: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
24680: LD_VAR 0 1
24684: NOT
24685: PUSH
24686: LD_VAR 0 1
24690: PPUSH
24691: CALL_OW 257
24695: PUSH
24696: LD_INT 9
24698: NONEQUAL
24699: OR
24700: IFFALSE 24704
// exit ;
24702: GO 25277
// side := GetSide ( unit ) ;
24704: LD_ADDR_VAR 0 9
24708: PUSH
24709: LD_VAR 0 1
24713: PPUSH
24714: CALL_OW 255
24718: ST_TO_ADDR
// tech_space := tech_spacanom ;
24719: LD_ADDR_VAR 0 12
24723: PUSH
24724: LD_INT 29
24726: ST_TO_ADDR
// tech_time := tech_taurad ;
24727: LD_ADDR_VAR 0 13
24731: PUSH
24732: LD_INT 28
24734: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
24735: LD_ADDR_VAR 0 11
24739: PUSH
24740: LD_VAR 0 1
24744: PPUSH
24745: CALL_OW 310
24749: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
24750: LD_VAR 0 11
24754: PPUSH
24755: CALL_OW 247
24759: PUSH
24760: LD_INT 2
24762: EQUAL
24763: IFFALSE 24767
// exit ;
24765: GO 25277
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24767: LD_ADDR_VAR 0 8
24771: PUSH
24772: LD_INT 81
24774: PUSH
24775: LD_VAR 0 9
24779: PUSH
24780: EMPTY
24781: LIST
24782: LIST
24783: PUSH
24784: LD_INT 3
24786: PUSH
24787: LD_INT 21
24789: PUSH
24790: LD_INT 3
24792: PUSH
24793: EMPTY
24794: LIST
24795: LIST
24796: PUSH
24797: EMPTY
24798: LIST
24799: LIST
24800: PUSH
24801: EMPTY
24802: LIST
24803: LIST
24804: PPUSH
24805: CALL_OW 69
24809: ST_TO_ADDR
// if not tmp then
24810: LD_VAR 0 8
24814: NOT
24815: IFFALSE 24819
// exit ;
24817: GO 25277
// if in_unit then
24819: LD_VAR 0 11
24823: IFFALSE 24847
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
24825: LD_ADDR_VAR 0 10
24829: PUSH
24830: LD_VAR 0 8
24834: PPUSH
24835: LD_VAR 0 11
24839: PPUSH
24840: CALL_OW 74
24844: ST_TO_ADDR
24845: GO 24867
// enemy := NearestUnitToUnit ( tmp , unit ) ;
24847: LD_ADDR_VAR 0 10
24851: PUSH
24852: LD_VAR 0 8
24856: PPUSH
24857: LD_VAR 0 1
24861: PPUSH
24862: CALL_OW 74
24866: ST_TO_ADDR
// if not enemy then
24867: LD_VAR 0 10
24871: NOT
24872: IFFALSE 24876
// exit ;
24874: GO 25277
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
24876: LD_VAR 0 11
24880: PUSH
24881: LD_VAR 0 11
24885: PPUSH
24886: LD_VAR 0 10
24890: PPUSH
24891: CALL_OW 296
24895: PUSH
24896: LD_INT 13
24898: GREATER
24899: AND
24900: PUSH
24901: LD_VAR 0 1
24905: PPUSH
24906: LD_VAR 0 10
24910: PPUSH
24911: CALL_OW 296
24915: PUSH
24916: LD_INT 12
24918: GREATER
24919: OR
24920: IFFALSE 24924
// exit ;
24922: GO 25277
// missile := [ 1 ] ;
24924: LD_ADDR_VAR 0 14
24928: PUSH
24929: LD_INT 1
24931: PUSH
24932: EMPTY
24933: LIST
24934: ST_TO_ADDR
// if Researched ( side , tech_space ) then
24935: LD_VAR 0 9
24939: PPUSH
24940: LD_VAR 0 12
24944: PPUSH
24945: CALL_OW 325
24949: IFFALSE 24978
// missile := Insert ( missile , missile + 1 , 2 ) ;
24951: LD_ADDR_VAR 0 14
24955: PUSH
24956: LD_VAR 0 14
24960: PPUSH
24961: LD_VAR 0 14
24965: PUSH
24966: LD_INT 1
24968: PLUS
24969: PPUSH
24970: LD_INT 2
24972: PPUSH
24973: CALL_OW 2
24977: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
24978: LD_VAR 0 9
24982: PPUSH
24983: LD_VAR 0 13
24987: PPUSH
24988: CALL_OW 325
24992: PUSH
24993: LD_VAR 0 10
24997: PPUSH
24998: CALL_OW 255
25002: PPUSH
25003: LD_VAR 0 13
25007: PPUSH
25008: CALL_OW 325
25012: NOT
25013: AND
25014: IFFALSE 25043
// missile := Insert ( missile , missile + 1 , 3 ) ;
25016: LD_ADDR_VAR 0 14
25020: PUSH
25021: LD_VAR 0 14
25025: PPUSH
25026: LD_VAR 0 14
25030: PUSH
25031: LD_INT 1
25033: PLUS
25034: PPUSH
25035: LD_INT 3
25037: PPUSH
25038: CALL_OW 2
25042: ST_TO_ADDR
// if missile < 2 then
25043: LD_VAR 0 14
25047: PUSH
25048: LD_INT 2
25050: LESS
25051: IFFALSE 25055
// exit ;
25053: GO 25277
// x := GetX ( enemy ) ;
25055: LD_ADDR_VAR 0 4
25059: PUSH
25060: LD_VAR 0 10
25064: PPUSH
25065: CALL_OW 250
25069: ST_TO_ADDR
// y := GetY ( enemy ) ;
25070: LD_ADDR_VAR 0 5
25074: PUSH
25075: LD_VAR 0 10
25079: PPUSH
25080: CALL_OW 251
25084: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
25085: LD_ADDR_VAR 0 6
25089: PUSH
25090: LD_VAR 0 4
25094: PUSH
25095: LD_INT 1
25097: NEG
25098: PPUSH
25099: LD_INT 1
25101: PPUSH
25102: CALL_OW 12
25106: PLUS
25107: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
25108: LD_ADDR_VAR 0 7
25112: PUSH
25113: LD_VAR 0 5
25117: PUSH
25118: LD_INT 1
25120: NEG
25121: PPUSH
25122: LD_INT 1
25124: PPUSH
25125: CALL_OW 12
25129: PLUS
25130: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25131: LD_VAR 0 6
25135: PPUSH
25136: LD_VAR 0 7
25140: PPUSH
25141: CALL_OW 488
25145: NOT
25146: IFFALSE 25168
// begin _x := x ;
25148: LD_ADDR_VAR 0 6
25152: PUSH
25153: LD_VAR 0 4
25157: ST_TO_ADDR
// _y := y ;
25158: LD_ADDR_VAR 0 7
25162: PUSH
25163: LD_VAR 0 5
25167: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
25168: LD_ADDR_VAR 0 3
25172: PUSH
25173: LD_INT 1
25175: PPUSH
25176: LD_VAR 0 14
25180: PPUSH
25181: CALL_OW 12
25185: ST_TO_ADDR
// case i of 1 :
25186: LD_VAR 0 3
25190: PUSH
25191: LD_INT 1
25193: DOUBLE
25194: EQUAL
25195: IFTRUE 25199
25197: GO 25216
25199: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
25200: LD_VAR 0 1
25204: PPUSH
25205: LD_VAR 0 10
25209: PPUSH
25210: CALL_OW 115
25214: GO 25277
25216: LD_INT 2
25218: DOUBLE
25219: EQUAL
25220: IFTRUE 25224
25222: GO 25246
25224: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
25225: LD_VAR 0 1
25229: PPUSH
25230: LD_VAR 0 6
25234: PPUSH
25235: LD_VAR 0 7
25239: PPUSH
25240: CALL_OW 153
25244: GO 25277
25246: LD_INT 3
25248: DOUBLE
25249: EQUAL
25250: IFTRUE 25254
25252: GO 25276
25254: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
25255: LD_VAR 0 1
25259: PPUSH
25260: LD_VAR 0 6
25264: PPUSH
25265: LD_VAR 0 7
25269: PPUSH
25270: CALL_OW 154
25274: GO 25277
25276: POP
// end ;
25277: LD_VAR 0 2
25281: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
25282: LD_INT 0
25284: PPUSH
25285: PPUSH
25286: PPUSH
25287: PPUSH
25288: PPUSH
25289: PPUSH
// if not unit or not building then
25290: LD_VAR 0 1
25294: NOT
25295: PUSH
25296: LD_VAR 0 2
25300: NOT
25301: OR
25302: IFFALSE 25306
// exit ;
25304: GO 25464
// x := GetX ( building ) ;
25306: LD_ADDR_VAR 0 5
25310: PUSH
25311: LD_VAR 0 2
25315: PPUSH
25316: CALL_OW 250
25320: ST_TO_ADDR
// y := GetY ( building ) ;
25321: LD_ADDR_VAR 0 6
25325: PUSH
25326: LD_VAR 0 2
25330: PPUSH
25331: CALL_OW 251
25335: ST_TO_ADDR
// for i = 0 to 5 do
25336: LD_ADDR_VAR 0 4
25340: PUSH
25341: DOUBLE
25342: LD_INT 0
25344: DEC
25345: ST_TO_ADDR
25346: LD_INT 5
25348: PUSH
25349: FOR_TO
25350: IFFALSE 25462
// begin _x := ShiftX ( x , i , 3 ) ;
25352: LD_ADDR_VAR 0 7
25356: PUSH
25357: LD_VAR 0 5
25361: PPUSH
25362: LD_VAR 0 4
25366: PPUSH
25367: LD_INT 3
25369: PPUSH
25370: CALL_OW 272
25374: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
25375: LD_ADDR_VAR 0 8
25379: PUSH
25380: LD_VAR 0 6
25384: PPUSH
25385: LD_VAR 0 4
25389: PPUSH
25390: LD_INT 3
25392: PPUSH
25393: CALL_OW 273
25397: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25398: LD_VAR 0 7
25402: PPUSH
25403: LD_VAR 0 8
25407: PPUSH
25408: CALL_OW 488
25412: NOT
25413: IFFALSE 25417
// continue ;
25415: GO 25349
// if HexInfo ( _x , _y ) = 0 then
25417: LD_VAR 0 7
25421: PPUSH
25422: LD_VAR 0 8
25426: PPUSH
25427: CALL_OW 428
25431: PUSH
25432: LD_INT 0
25434: EQUAL
25435: IFFALSE 25460
// begin ComMoveXY ( unit , _x , _y ) ;
25437: LD_VAR 0 1
25441: PPUSH
25442: LD_VAR 0 7
25446: PPUSH
25447: LD_VAR 0 8
25451: PPUSH
25452: CALL_OW 111
// exit ;
25456: POP
25457: POP
25458: GO 25464
// end ; end ;
25460: GO 25349
25462: POP
25463: POP
// end ;
25464: LD_VAR 0 3
25468: RET
// export function ScanBase ( side , base_area ) ; begin
25469: LD_INT 0
25471: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
25472: LD_ADDR_VAR 0 3
25476: PUSH
25477: LD_VAR 0 2
25481: PPUSH
25482: LD_INT 81
25484: PUSH
25485: LD_VAR 0 1
25489: PUSH
25490: EMPTY
25491: LIST
25492: LIST
25493: PPUSH
25494: CALL_OW 70
25498: ST_TO_ADDR
// end ;
25499: LD_VAR 0 3
25503: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
25504: LD_INT 0
25506: PPUSH
25507: PPUSH
25508: PPUSH
25509: PPUSH
// result := false ;
25510: LD_ADDR_VAR 0 2
25514: PUSH
25515: LD_INT 0
25517: ST_TO_ADDR
// side := GetSide ( unit ) ;
25518: LD_ADDR_VAR 0 3
25522: PUSH
25523: LD_VAR 0 1
25527: PPUSH
25528: CALL_OW 255
25532: ST_TO_ADDR
// nat := GetNation ( unit ) ;
25533: LD_ADDR_VAR 0 4
25537: PUSH
25538: LD_VAR 0 1
25542: PPUSH
25543: CALL_OW 248
25547: ST_TO_ADDR
// case nat of 1 :
25548: LD_VAR 0 4
25552: PUSH
25553: LD_INT 1
25555: DOUBLE
25556: EQUAL
25557: IFTRUE 25561
25559: GO 25572
25561: POP
// tech := tech_lassight ; 2 :
25562: LD_ADDR_VAR 0 5
25566: PUSH
25567: LD_INT 12
25569: ST_TO_ADDR
25570: GO 25611
25572: LD_INT 2
25574: DOUBLE
25575: EQUAL
25576: IFTRUE 25580
25578: GO 25591
25580: POP
// tech := tech_mortar ; 3 :
25581: LD_ADDR_VAR 0 5
25585: PUSH
25586: LD_INT 41
25588: ST_TO_ADDR
25589: GO 25611
25591: LD_INT 3
25593: DOUBLE
25594: EQUAL
25595: IFTRUE 25599
25597: GO 25610
25599: POP
// tech := tech_bazooka ; end ;
25600: LD_ADDR_VAR 0 5
25604: PUSH
25605: LD_INT 44
25607: ST_TO_ADDR
25608: GO 25611
25610: POP
// if Researched ( side , tech ) then
25611: LD_VAR 0 3
25615: PPUSH
25616: LD_VAR 0 5
25620: PPUSH
25621: CALL_OW 325
25625: IFFALSE 25652
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
25627: LD_ADDR_VAR 0 2
25631: PUSH
25632: LD_INT 5
25634: PUSH
25635: LD_INT 8
25637: PUSH
25638: LD_INT 9
25640: PUSH
25641: EMPTY
25642: LIST
25643: LIST
25644: LIST
25645: PUSH
25646: LD_VAR 0 4
25650: ARRAY
25651: ST_TO_ADDR
// end ;
25652: LD_VAR 0 2
25656: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
25657: LD_INT 0
25659: PPUSH
25660: PPUSH
25661: PPUSH
// if not mines then
25662: LD_VAR 0 2
25666: NOT
25667: IFFALSE 25671
// exit ;
25669: GO 25815
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25671: LD_ADDR_VAR 0 5
25675: PUSH
25676: LD_INT 81
25678: PUSH
25679: LD_VAR 0 1
25683: PUSH
25684: EMPTY
25685: LIST
25686: LIST
25687: PUSH
25688: LD_INT 3
25690: PUSH
25691: LD_INT 21
25693: PUSH
25694: LD_INT 3
25696: PUSH
25697: EMPTY
25698: LIST
25699: LIST
25700: PUSH
25701: EMPTY
25702: LIST
25703: LIST
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: PPUSH
25709: CALL_OW 69
25713: ST_TO_ADDR
// for i in mines do
25714: LD_ADDR_VAR 0 4
25718: PUSH
25719: LD_VAR 0 2
25723: PUSH
25724: FOR_IN
25725: IFFALSE 25813
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
25727: LD_VAR 0 4
25731: PUSH
25732: LD_INT 1
25734: ARRAY
25735: PPUSH
25736: LD_VAR 0 4
25740: PUSH
25741: LD_INT 2
25743: ARRAY
25744: PPUSH
25745: CALL_OW 458
25749: NOT
25750: IFFALSE 25754
// continue ;
25752: GO 25724
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
25754: LD_VAR 0 4
25758: PUSH
25759: LD_INT 1
25761: ARRAY
25762: PPUSH
25763: LD_VAR 0 4
25767: PUSH
25768: LD_INT 2
25770: ARRAY
25771: PPUSH
25772: CALL_OW 428
25776: PUSH
25777: LD_VAR 0 5
25781: IN
25782: IFFALSE 25811
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
25784: LD_VAR 0 4
25788: PUSH
25789: LD_INT 1
25791: ARRAY
25792: PPUSH
25793: LD_VAR 0 4
25797: PUSH
25798: LD_INT 2
25800: ARRAY
25801: PPUSH
25802: LD_VAR 0 1
25806: PPUSH
25807: CALL_OW 456
// end ;
25811: GO 25724
25813: POP
25814: POP
// end ;
25815: LD_VAR 0 3
25819: RET
// export function Count ( array ) ; var i ; begin
25820: LD_INT 0
25822: PPUSH
25823: PPUSH
// result := 0 ;
25824: LD_ADDR_VAR 0 2
25828: PUSH
25829: LD_INT 0
25831: ST_TO_ADDR
// for i in array do
25832: LD_ADDR_VAR 0 3
25836: PUSH
25837: LD_VAR 0 1
25841: PUSH
25842: FOR_IN
25843: IFFALSE 25867
// if i then
25845: LD_VAR 0 3
25849: IFFALSE 25865
// result := result + 1 ;
25851: LD_ADDR_VAR 0 2
25855: PUSH
25856: LD_VAR 0 2
25860: PUSH
25861: LD_INT 1
25863: PLUS
25864: ST_TO_ADDR
25865: GO 25842
25867: POP
25868: POP
// end ;
25869: LD_VAR 0 2
25873: RET
// export function IsEmpty ( building ) ; begin
25874: LD_INT 0
25876: PPUSH
// if not building then
25877: LD_VAR 0 1
25881: NOT
25882: IFFALSE 25886
// exit ;
25884: GO 25929
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
25886: LD_ADDR_VAR 0 2
25890: PUSH
25891: LD_VAR 0 1
25895: PUSH
25896: LD_INT 22
25898: PUSH
25899: LD_VAR 0 1
25903: PPUSH
25904: CALL_OW 255
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: PUSH
25913: LD_INT 58
25915: PUSH
25916: EMPTY
25917: LIST
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: PPUSH
25923: CALL_OW 69
25927: IN
25928: ST_TO_ADDR
// end ;
25929: LD_VAR 0 2
25933: RET
// export function IsNotFull ( building ) ; begin
25934: LD_INT 0
25936: PPUSH
// if not building then
25937: LD_VAR 0 1
25941: NOT
25942: IFFALSE 25946
// exit ;
25944: GO 25965
// result := UnitsInside ( building ) < 6 ;
25946: LD_ADDR_VAR 0 2
25950: PUSH
25951: LD_VAR 0 1
25955: PPUSH
25956: CALL_OW 313
25960: PUSH
25961: LD_INT 6
25963: LESS
25964: ST_TO_ADDR
// end ;
25965: LD_VAR 0 2
25969: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
25970: LD_INT 0
25972: PPUSH
25973: PPUSH
25974: PPUSH
25975: PPUSH
// tmp := [ ] ;
25976: LD_ADDR_VAR 0 3
25980: PUSH
25981: EMPTY
25982: ST_TO_ADDR
// list := [ ] ;
25983: LD_ADDR_VAR 0 5
25987: PUSH
25988: EMPTY
25989: ST_TO_ADDR
// for i = 16 to 25 do
25990: LD_ADDR_VAR 0 4
25994: PUSH
25995: DOUBLE
25996: LD_INT 16
25998: DEC
25999: ST_TO_ADDR
26000: LD_INT 25
26002: PUSH
26003: FOR_TO
26004: IFFALSE 26077
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
26006: LD_ADDR_VAR 0 3
26010: PUSH
26011: LD_VAR 0 3
26015: PUSH
26016: LD_INT 22
26018: PUSH
26019: LD_VAR 0 1
26023: PPUSH
26024: CALL_OW 255
26028: PUSH
26029: EMPTY
26030: LIST
26031: LIST
26032: PUSH
26033: LD_INT 91
26035: PUSH
26036: LD_VAR 0 1
26040: PUSH
26041: LD_INT 6
26043: PUSH
26044: EMPTY
26045: LIST
26046: LIST
26047: LIST
26048: PUSH
26049: LD_INT 30
26051: PUSH
26052: LD_VAR 0 4
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: PUSH
26061: EMPTY
26062: LIST
26063: LIST
26064: LIST
26065: PUSH
26066: EMPTY
26067: LIST
26068: PPUSH
26069: CALL_OW 69
26073: ADD
26074: ST_TO_ADDR
26075: GO 26003
26077: POP
26078: POP
// for i = 1 to tmp do
26079: LD_ADDR_VAR 0 4
26083: PUSH
26084: DOUBLE
26085: LD_INT 1
26087: DEC
26088: ST_TO_ADDR
26089: LD_VAR 0 3
26093: PUSH
26094: FOR_TO
26095: IFFALSE 26183
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
26097: LD_ADDR_VAR 0 5
26101: PUSH
26102: LD_VAR 0 5
26106: PUSH
26107: LD_VAR 0 3
26111: PUSH
26112: LD_VAR 0 4
26116: ARRAY
26117: PPUSH
26118: CALL_OW 266
26122: PUSH
26123: LD_VAR 0 3
26127: PUSH
26128: LD_VAR 0 4
26132: ARRAY
26133: PPUSH
26134: CALL_OW 250
26138: PUSH
26139: LD_VAR 0 3
26143: PUSH
26144: LD_VAR 0 4
26148: ARRAY
26149: PPUSH
26150: CALL_OW 251
26154: PUSH
26155: LD_VAR 0 3
26159: PUSH
26160: LD_VAR 0 4
26164: ARRAY
26165: PPUSH
26166: CALL_OW 254
26170: PUSH
26171: EMPTY
26172: LIST
26173: LIST
26174: LIST
26175: LIST
26176: PUSH
26177: EMPTY
26178: LIST
26179: ADD
26180: ST_TO_ADDR
26181: GO 26094
26183: POP
26184: POP
// result := list ;
26185: LD_ADDR_VAR 0 2
26189: PUSH
26190: LD_VAR 0 5
26194: ST_TO_ADDR
// end ;
26195: LD_VAR 0 2
26199: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
26200: LD_INT 0
26202: PPUSH
26203: PPUSH
26204: PPUSH
26205: PPUSH
26206: PPUSH
26207: PPUSH
26208: PPUSH
// if not factory then
26209: LD_VAR 0 1
26213: NOT
26214: IFFALSE 26218
// exit ;
26216: GO 26811
// if control = control_apeman then
26218: LD_VAR 0 4
26222: PUSH
26223: LD_INT 5
26225: EQUAL
26226: IFFALSE 26335
// begin tmp := UnitsInside ( factory ) ;
26228: LD_ADDR_VAR 0 8
26232: PUSH
26233: LD_VAR 0 1
26237: PPUSH
26238: CALL_OW 313
26242: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
26243: LD_VAR 0 8
26247: PPUSH
26248: LD_INT 25
26250: PUSH
26251: LD_INT 12
26253: PUSH
26254: EMPTY
26255: LIST
26256: LIST
26257: PPUSH
26258: CALL_OW 72
26262: NOT
26263: IFFALSE 26273
// control := control_manual ;
26265: LD_ADDR_VAR 0 4
26269: PUSH
26270: LD_INT 1
26272: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
26273: LD_ADDR_VAR 0 8
26277: PUSH
26278: LD_VAR 0 1
26282: PPUSH
26283: CALL 25970 0 1
26287: ST_TO_ADDR
// if tmp then
26288: LD_VAR 0 8
26292: IFFALSE 26335
// begin for i in tmp do
26294: LD_ADDR_VAR 0 7
26298: PUSH
26299: LD_VAR 0 8
26303: PUSH
26304: FOR_IN
26305: IFFALSE 26333
// if i [ 1 ] = b_ext_radio then
26307: LD_VAR 0 7
26311: PUSH
26312: LD_INT 1
26314: ARRAY
26315: PUSH
26316: LD_INT 22
26318: EQUAL
26319: IFFALSE 26331
// begin control := control_remote ;
26321: LD_ADDR_VAR 0 4
26325: PUSH
26326: LD_INT 2
26328: ST_TO_ADDR
// break ;
26329: GO 26333
// end ;
26331: GO 26304
26333: POP
26334: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26335: LD_VAR 0 1
26339: PPUSH
26340: LD_VAR 0 2
26344: PPUSH
26345: LD_VAR 0 3
26349: PPUSH
26350: LD_VAR 0 4
26354: PPUSH
26355: LD_VAR 0 5
26359: PPUSH
26360: CALL_OW 448
26364: IFFALSE 26399
// begin result := [ chassis , engine , control , weapon ] ;
26366: LD_ADDR_VAR 0 6
26370: PUSH
26371: LD_VAR 0 2
26375: PUSH
26376: LD_VAR 0 3
26380: PUSH
26381: LD_VAR 0 4
26385: PUSH
26386: LD_VAR 0 5
26390: PUSH
26391: EMPTY
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: ST_TO_ADDR
// exit ;
26397: GO 26811
// end ; _chassis := AvailableChassisList ( factory ) ;
26399: LD_ADDR_VAR 0 9
26403: PUSH
26404: LD_VAR 0 1
26408: PPUSH
26409: CALL_OW 475
26413: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
26414: LD_ADDR_VAR 0 11
26418: PUSH
26419: LD_VAR 0 1
26423: PPUSH
26424: CALL_OW 476
26428: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
26429: LD_ADDR_VAR 0 12
26433: PUSH
26434: LD_VAR 0 1
26438: PPUSH
26439: CALL_OW 477
26443: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
26444: LD_ADDR_VAR 0 10
26448: PUSH
26449: LD_VAR 0 1
26453: PPUSH
26454: CALL_OW 478
26458: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
26459: LD_VAR 0 9
26463: NOT
26464: PUSH
26465: LD_VAR 0 11
26469: NOT
26470: OR
26471: PUSH
26472: LD_VAR 0 12
26476: NOT
26477: OR
26478: PUSH
26479: LD_VAR 0 10
26483: NOT
26484: OR
26485: IFFALSE 26520
// begin result := [ chassis , engine , control , weapon ] ;
26487: LD_ADDR_VAR 0 6
26491: PUSH
26492: LD_VAR 0 2
26496: PUSH
26497: LD_VAR 0 3
26501: PUSH
26502: LD_VAR 0 4
26506: PUSH
26507: LD_VAR 0 5
26511: PUSH
26512: EMPTY
26513: LIST
26514: LIST
26515: LIST
26516: LIST
26517: ST_TO_ADDR
// exit ;
26518: GO 26811
// end ; if not chassis in _chassis then
26520: LD_VAR 0 2
26524: PUSH
26525: LD_VAR 0 9
26529: IN
26530: NOT
26531: IFFALSE 26557
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
26533: LD_ADDR_VAR 0 2
26537: PUSH
26538: LD_VAR 0 9
26542: PUSH
26543: LD_INT 1
26545: PPUSH
26546: LD_VAR 0 9
26550: PPUSH
26551: CALL_OW 12
26555: ARRAY
26556: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
26557: LD_VAR 0 2
26561: PPUSH
26562: LD_VAR 0 3
26566: PPUSH
26567: CALL 26816 0 2
26571: NOT
26572: IFFALSE 26631
// repeat engine := _engine [ 1 ] ;
26574: LD_ADDR_VAR 0 3
26578: PUSH
26579: LD_VAR 0 11
26583: PUSH
26584: LD_INT 1
26586: ARRAY
26587: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
26588: LD_ADDR_VAR 0 11
26592: PUSH
26593: LD_VAR 0 11
26597: PPUSH
26598: LD_INT 1
26600: PPUSH
26601: CALL_OW 3
26605: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
26606: LD_VAR 0 2
26610: PPUSH
26611: LD_VAR 0 3
26615: PPUSH
26616: CALL 26816 0 2
26620: PUSH
26621: LD_VAR 0 11
26625: PUSH
26626: EMPTY
26627: EQUAL
26628: OR
26629: IFFALSE 26574
// if not control in _control then
26631: LD_VAR 0 4
26635: PUSH
26636: LD_VAR 0 12
26640: IN
26641: NOT
26642: IFFALSE 26668
// control := _control [ rand ( 1 , _control ) ] ;
26644: LD_ADDR_VAR 0 4
26648: PUSH
26649: LD_VAR 0 12
26653: PUSH
26654: LD_INT 1
26656: PPUSH
26657: LD_VAR 0 12
26661: PPUSH
26662: CALL_OW 12
26666: ARRAY
26667: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
26668: LD_VAR 0 2
26672: PPUSH
26673: LD_VAR 0 5
26677: PPUSH
26678: CALL 27036 0 2
26682: NOT
26683: IFFALSE 26742
// repeat weapon := _weapon [ 1 ] ;
26685: LD_ADDR_VAR 0 5
26689: PUSH
26690: LD_VAR 0 10
26694: PUSH
26695: LD_INT 1
26697: ARRAY
26698: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
26699: LD_ADDR_VAR 0 10
26703: PUSH
26704: LD_VAR 0 10
26708: PPUSH
26709: LD_INT 1
26711: PPUSH
26712: CALL_OW 3
26716: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
26717: LD_VAR 0 2
26721: PPUSH
26722: LD_VAR 0 5
26726: PPUSH
26727: CALL 27036 0 2
26731: PUSH
26732: LD_VAR 0 10
26736: PUSH
26737: EMPTY
26738: EQUAL
26739: OR
26740: IFFALSE 26685
// result := [ ] ;
26742: LD_ADDR_VAR 0 6
26746: PUSH
26747: EMPTY
26748: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26749: LD_VAR 0 1
26753: PPUSH
26754: LD_VAR 0 2
26758: PPUSH
26759: LD_VAR 0 3
26763: PPUSH
26764: LD_VAR 0 4
26768: PPUSH
26769: LD_VAR 0 5
26773: PPUSH
26774: CALL_OW 448
26778: IFFALSE 26811
// result := [ chassis , engine , control , weapon ] ;
26780: LD_ADDR_VAR 0 6
26784: PUSH
26785: LD_VAR 0 2
26789: PUSH
26790: LD_VAR 0 3
26794: PUSH
26795: LD_VAR 0 4
26799: PUSH
26800: LD_VAR 0 5
26804: PUSH
26805: EMPTY
26806: LIST
26807: LIST
26808: LIST
26809: LIST
26810: ST_TO_ADDR
// end ;
26811: LD_VAR 0 6
26815: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
26816: LD_INT 0
26818: PPUSH
// if not chassis or not engine then
26819: LD_VAR 0 1
26823: NOT
26824: PUSH
26825: LD_VAR 0 2
26829: NOT
26830: OR
26831: IFFALSE 26835
// exit ;
26833: GO 27031
// case engine of engine_solar :
26835: LD_VAR 0 2
26839: PUSH
26840: LD_INT 2
26842: DOUBLE
26843: EQUAL
26844: IFTRUE 26848
26846: GO 26886
26848: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
26849: LD_ADDR_VAR 0 3
26853: PUSH
26854: LD_INT 11
26856: PUSH
26857: LD_INT 12
26859: PUSH
26860: LD_INT 13
26862: PUSH
26863: LD_INT 14
26865: PUSH
26866: LD_INT 1
26868: PUSH
26869: LD_INT 2
26871: PUSH
26872: LD_INT 3
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: LIST
26882: LIST
26883: ST_TO_ADDR
26884: GO 27015
26886: LD_INT 1
26888: DOUBLE
26889: EQUAL
26890: IFTRUE 26894
26892: GO 26956
26894: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
26895: LD_ADDR_VAR 0 3
26899: PUSH
26900: LD_INT 11
26902: PUSH
26903: LD_INT 12
26905: PUSH
26906: LD_INT 13
26908: PUSH
26909: LD_INT 14
26911: PUSH
26912: LD_INT 1
26914: PUSH
26915: LD_INT 2
26917: PUSH
26918: LD_INT 3
26920: PUSH
26921: LD_INT 4
26923: PUSH
26924: LD_INT 5
26926: PUSH
26927: LD_INT 21
26929: PUSH
26930: LD_INT 23
26932: PUSH
26933: LD_INT 22
26935: PUSH
26936: LD_INT 24
26938: PUSH
26939: EMPTY
26940: LIST
26941: LIST
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: LIST
26953: ST_TO_ADDR
26954: GO 27015
26956: LD_INT 3
26958: DOUBLE
26959: EQUAL
26960: IFTRUE 26964
26962: GO 27014
26964: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26965: LD_ADDR_VAR 0 3
26969: PUSH
26970: LD_INT 13
26972: PUSH
26973: LD_INT 14
26975: PUSH
26976: LD_INT 2
26978: PUSH
26979: LD_INT 3
26981: PUSH
26982: LD_INT 4
26984: PUSH
26985: LD_INT 5
26987: PUSH
26988: LD_INT 21
26990: PUSH
26991: LD_INT 22
26993: PUSH
26994: LD_INT 23
26996: PUSH
26997: LD_INT 24
26999: PUSH
27000: EMPTY
27001: LIST
27002: LIST
27003: LIST
27004: LIST
27005: LIST
27006: LIST
27007: LIST
27008: LIST
27009: LIST
27010: LIST
27011: ST_TO_ADDR
27012: GO 27015
27014: POP
// result := ( chassis in result ) ;
27015: LD_ADDR_VAR 0 3
27019: PUSH
27020: LD_VAR 0 1
27024: PUSH
27025: LD_VAR 0 3
27029: IN
27030: ST_TO_ADDR
// end ;
27031: LD_VAR 0 3
27035: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
27036: LD_INT 0
27038: PPUSH
// if not chassis or not weapon then
27039: LD_VAR 0 1
27043: NOT
27044: PUSH
27045: LD_VAR 0 2
27049: NOT
27050: OR
27051: IFFALSE 27055
// exit ;
27053: GO 28081
// case weapon of us_machine_gun :
27055: LD_VAR 0 2
27059: PUSH
27060: LD_INT 2
27062: DOUBLE
27063: EQUAL
27064: IFTRUE 27068
27066: GO 27098
27068: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
27069: LD_ADDR_VAR 0 3
27073: PUSH
27074: LD_INT 1
27076: PUSH
27077: LD_INT 2
27079: PUSH
27080: LD_INT 3
27082: PUSH
27083: LD_INT 4
27085: PUSH
27086: LD_INT 5
27088: PUSH
27089: EMPTY
27090: LIST
27091: LIST
27092: LIST
27093: LIST
27094: LIST
27095: ST_TO_ADDR
27096: GO 28065
27098: LD_INT 3
27100: DOUBLE
27101: EQUAL
27102: IFTRUE 27106
27104: GO 27136
27106: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
27107: LD_ADDR_VAR 0 3
27111: PUSH
27112: LD_INT 1
27114: PUSH
27115: LD_INT 2
27117: PUSH
27118: LD_INT 3
27120: PUSH
27121: LD_INT 4
27123: PUSH
27124: LD_INT 5
27126: PUSH
27127: EMPTY
27128: LIST
27129: LIST
27130: LIST
27131: LIST
27132: LIST
27133: ST_TO_ADDR
27134: GO 28065
27136: LD_INT 11
27138: DOUBLE
27139: EQUAL
27140: IFTRUE 27144
27142: GO 27174
27144: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
27145: LD_ADDR_VAR 0 3
27149: PUSH
27150: LD_INT 1
27152: PUSH
27153: LD_INT 2
27155: PUSH
27156: LD_INT 3
27158: PUSH
27159: LD_INT 4
27161: PUSH
27162: LD_INT 5
27164: PUSH
27165: EMPTY
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: LIST
27171: ST_TO_ADDR
27172: GO 28065
27174: LD_INT 4
27176: DOUBLE
27177: EQUAL
27178: IFTRUE 27182
27180: GO 27208
27182: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
27183: LD_ADDR_VAR 0 3
27187: PUSH
27188: LD_INT 2
27190: PUSH
27191: LD_INT 3
27193: PUSH
27194: LD_INT 4
27196: PUSH
27197: LD_INT 5
27199: PUSH
27200: EMPTY
27201: LIST
27202: LIST
27203: LIST
27204: LIST
27205: ST_TO_ADDR
27206: GO 28065
27208: LD_INT 5
27210: DOUBLE
27211: EQUAL
27212: IFTRUE 27216
27214: GO 27242
27216: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
27217: LD_ADDR_VAR 0 3
27221: PUSH
27222: LD_INT 2
27224: PUSH
27225: LD_INT 3
27227: PUSH
27228: LD_INT 4
27230: PUSH
27231: LD_INT 5
27233: PUSH
27234: EMPTY
27235: LIST
27236: LIST
27237: LIST
27238: LIST
27239: ST_TO_ADDR
27240: GO 28065
27242: LD_INT 9
27244: DOUBLE
27245: EQUAL
27246: IFTRUE 27250
27248: GO 27276
27250: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
27251: LD_ADDR_VAR 0 3
27255: PUSH
27256: LD_INT 2
27258: PUSH
27259: LD_INT 3
27261: PUSH
27262: LD_INT 4
27264: PUSH
27265: LD_INT 5
27267: PUSH
27268: EMPTY
27269: LIST
27270: LIST
27271: LIST
27272: LIST
27273: ST_TO_ADDR
27274: GO 28065
27276: LD_INT 7
27278: DOUBLE
27279: EQUAL
27280: IFTRUE 27284
27282: GO 27310
27284: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
27285: LD_ADDR_VAR 0 3
27289: PUSH
27290: LD_INT 2
27292: PUSH
27293: LD_INT 3
27295: PUSH
27296: LD_INT 4
27298: PUSH
27299: LD_INT 5
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: LIST
27306: LIST
27307: ST_TO_ADDR
27308: GO 28065
27310: LD_INT 12
27312: DOUBLE
27313: EQUAL
27314: IFTRUE 27318
27316: GO 27344
27318: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
27319: LD_ADDR_VAR 0 3
27323: PUSH
27324: LD_INT 2
27326: PUSH
27327: LD_INT 3
27329: PUSH
27330: LD_INT 4
27332: PUSH
27333: LD_INT 5
27335: PUSH
27336: EMPTY
27337: LIST
27338: LIST
27339: LIST
27340: LIST
27341: ST_TO_ADDR
27342: GO 28065
27344: LD_INT 13
27346: DOUBLE
27347: EQUAL
27348: IFTRUE 27352
27350: GO 27378
27352: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
27353: LD_ADDR_VAR 0 3
27357: PUSH
27358: LD_INT 2
27360: PUSH
27361: LD_INT 3
27363: PUSH
27364: LD_INT 4
27366: PUSH
27367: LD_INT 5
27369: PUSH
27370: EMPTY
27371: LIST
27372: LIST
27373: LIST
27374: LIST
27375: ST_TO_ADDR
27376: GO 28065
27378: LD_INT 14
27380: DOUBLE
27381: EQUAL
27382: IFTRUE 27386
27384: GO 27404
27386: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
27387: LD_ADDR_VAR 0 3
27391: PUSH
27392: LD_INT 4
27394: PUSH
27395: LD_INT 5
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: ST_TO_ADDR
27402: GO 28065
27404: LD_INT 6
27406: DOUBLE
27407: EQUAL
27408: IFTRUE 27412
27410: GO 27430
27412: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
27413: LD_ADDR_VAR 0 3
27417: PUSH
27418: LD_INT 4
27420: PUSH
27421: LD_INT 5
27423: PUSH
27424: EMPTY
27425: LIST
27426: LIST
27427: ST_TO_ADDR
27428: GO 28065
27430: LD_INT 10
27432: DOUBLE
27433: EQUAL
27434: IFTRUE 27438
27436: GO 27456
27438: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
27439: LD_ADDR_VAR 0 3
27443: PUSH
27444: LD_INT 4
27446: PUSH
27447: LD_INT 5
27449: PUSH
27450: EMPTY
27451: LIST
27452: LIST
27453: ST_TO_ADDR
27454: GO 28065
27456: LD_INT 22
27458: DOUBLE
27459: EQUAL
27460: IFTRUE 27464
27462: GO 27490
27464: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
27465: LD_ADDR_VAR 0 3
27469: PUSH
27470: LD_INT 11
27472: PUSH
27473: LD_INT 12
27475: PUSH
27476: LD_INT 13
27478: PUSH
27479: LD_INT 14
27481: PUSH
27482: EMPTY
27483: LIST
27484: LIST
27485: LIST
27486: LIST
27487: ST_TO_ADDR
27488: GO 28065
27490: LD_INT 23
27492: DOUBLE
27493: EQUAL
27494: IFTRUE 27498
27496: GO 27524
27498: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
27499: LD_ADDR_VAR 0 3
27503: PUSH
27504: LD_INT 11
27506: PUSH
27507: LD_INT 12
27509: PUSH
27510: LD_INT 13
27512: PUSH
27513: LD_INT 14
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: LIST
27520: LIST
27521: ST_TO_ADDR
27522: GO 28065
27524: LD_INT 24
27526: DOUBLE
27527: EQUAL
27528: IFTRUE 27532
27530: GO 27558
27532: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
27533: LD_ADDR_VAR 0 3
27537: PUSH
27538: LD_INT 11
27540: PUSH
27541: LD_INT 12
27543: PUSH
27544: LD_INT 13
27546: PUSH
27547: LD_INT 14
27549: PUSH
27550: EMPTY
27551: LIST
27552: LIST
27553: LIST
27554: LIST
27555: ST_TO_ADDR
27556: GO 28065
27558: LD_INT 30
27560: DOUBLE
27561: EQUAL
27562: IFTRUE 27566
27564: GO 27592
27566: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
27567: LD_ADDR_VAR 0 3
27571: PUSH
27572: LD_INT 11
27574: PUSH
27575: LD_INT 12
27577: PUSH
27578: LD_INT 13
27580: PUSH
27581: LD_INT 14
27583: PUSH
27584: EMPTY
27585: LIST
27586: LIST
27587: LIST
27588: LIST
27589: ST_TO_ADDR
27590: GO 28065
27592: LD_INT 25
27594: DOUBLE
27595: EQUAL
27596: IFTRUE 27600
27598: GO 27618
27600: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
27601: LD_ADDR_VAR 0 3
27605: PUSH
27606: LD_INT 13
27608: PUSH
27609: LD_INT 14
27611: PUSH
27612: EMPTY
27613: LIST
27614: LIST
27615: ST_TO_ADDR
27616: GO 28065
27618: LD_INT 27
27620: DOUBLE
27621: EQUAL
27622: IFTRUE 27626
27624: GO 27644
27626: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
27627: LD_ADDR_VAR 0 3
27631: PUSH
27632: LD_INT 13
27634: PUSH
27635: LD_INT 14
27637: PUSH
27638: EMPTY
27639: LIST
27640: LIST
27641: ST_TO_ADDR
27642: GO 28065
27644: LD_INT 28
27646: DOUBLE
27647: EQUAL
27648: IFTRUE 27652
27650: GO 27670
27652: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
27653: LD_ADDR_VAR 0 3
27657: PUSH
27658: LD_INT 13
27660: PUSH
27661: LD_INT 14
27663: PUSH
27664: EMPTY
27665: LIST
27666: LIST
27667: ST_TO_ADDR
27668: GO 28065
27670: LD_INT 29
27672: DOUBLE
27673: EQUAL
27674: IFTRUE 27678
27676: GO 27696
27678: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
27679: LD_ADDR_VAR 0 3
27683: PUSH
27684: LD_INT 13
27686: PUSH
27687: LD_INT 14
27689: PUSH
27690: EMPTY
27691: LIST
27692: LIST
27693: ST_TO_ADDR
27694: GO 28065
27696: LD_INT 31
27698: DOUBLE
27699: EQUAL
27700: IFTRUE 27704
27702: GO 27722
27704: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
27705: LD_ADDR_VAR 0 3
27709: PUSH
27710: LD_INT 13
27712: PUSH
27713: LD_INT 14
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: ST_TO_ADDR
27720: GO 28065
27722: LD_INT 26
27724: DOUBLE
27725: EQUAL
27726: IFTRUE 27730
27728: GO 27748
27730: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
27731: LD_ADDR_VAR 0 3
27735: PUSH
27736: LD_INT 13
27738: PUSH
27739: LD_INT 14
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: ST_TO_ADDR
27746: GO 28065
27748: LD_INT 42
27750: DOUBLE
27751: EQUAL
27752: IFTRUE 27756
27754: GO 27782
27756: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
27757: LD_ADDR_VAR 0 3
27761: PUSH
27762: LD_INT 21
27764: PUSH
27765: LD_INT 22
27767: PUSH
27768: LD_INT 23
27770: PUSH
27771: LD_INT 24
27773: PUSH
27774: EMPTY
27775: LIST
27776: LIST
27777: LIST
27778: LIST
27779: ST_TO_ADDR
27780: GO 28065
27782: LD_INT 43
27784: DOUBLE
27785: EQUAL
27786: IFTRUE 27790
27788: GO 27816
27790: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
27791: LD_ADDR_VAR 0 3
27795: PUSH
27796: LD_INT 21
27798: PUSH
27799: LD_INT 22
27801: PUSH
27802: LD_INT 23
27804: PUSH
27805: LD_INT 24
27807: PUSH
27808: EMPTY
27809: LIST
27810: LIST
27811: LIST
27812: LIST
27813: ST_TO_ADDR
27814: GO 28065
27816: LD_INT 44
27818: DOUBLE
27819: EQUAL
27820: IFTRUE 27824
27822: GO 27850
27824: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
27825: LD_ADDR_VAR 0 3
27829: PUSH
27830: LD_INT 21
27832: PUSH
27833: LD_INT 22
27835: PUSH
27836: LD_INT 23
27838: PUSH
27839: LD_INT 24
27841: PUSH
27842: EMPTY
27843: LIST
27844: LIST
27845: LIST
27846: LIST
27847: ST_TO_ADDR
27848: GO 28065
27850: LD_INT 45
27852: DOUBLE
27853: EQUAL
27854: IFTRUE 27858
27856: GO 27884
27858: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
27859: LD_ADDR_VAR 0 3
27863: PUSH
27864: LD_INT 21
27866: PUSH
27867: LD_INT 22
27869: PUSH
27870: LD_INT 23
27872: PUSH
27873: LD_INT 24
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: LIST
27880: LIST
27881: ST_TO_ADDR
27882: GO 28065
27884: LD_INT 49
27886: DOUBLE
27887: EQUAL
27888: IFTRUE 27892
27890: GO 27918
27892: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
27893: LD_ADDR_VAR 0 3
27897: PUSH
27898: LD_INT 21
27900: PUSH
27901: LD_INT 22
27903: PUSH
27904: LD_INT 23
27906: PUSH
27907: LD_INT 24
27909: PUSH
27910: EMPTY
27911: LIST
27912: LIST
27913: LIST
27914: LIST
27915: ST_TO_ADDR
27916: GO 28065
27918: LD_INT 51
27920: DOUBLE
27921: EQUAL
27922: IFTRUE 27926
27924: GO 27952
27926: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
27927: LD_ADDR_VAR 0 3
27931: PUSH
27932: LD_INT 21
27934: PUSH
27935: LD_INT 22
27937: PUSH
27938: LD_INT 23
27940: PUSH
27941: LD_INT 24
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: LIST
27948: LIST
27949: ST_TO_ADDR
27950: GO 28065
27952: LD_INT 52
27954: DOUBLE
27955: EQUAL
27956: IFTRUE 27960
27958: GO 27986
27960: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
27961: LD_ADDR_VAR 0 3
27965: PUSH
27966: LD_INT 21
27968: PUSH
27969: LD_INT 22
27971: PUSH
27972: LD_INT 23
27974: PUSH
27975: LD_INT 24
27977: PUSH
27978: EMPTY
27979: LIST
27980: LIST
27981: LIST
27982: LIST
27983: ST_TO_ADDR
27984: GO 28065
27986: LD_INT 53
27988: DOUBLE
27989: EQUAL
27990: IFTRUE 27994
27992: GO 28012
27994: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
27995: LD_ADDR_VAR 0 3
27999: PUSH
28000: LD_INT 23
28002: PUSH
28003: LD_INT 24
28005: PUSH
28006: EMPTY
28007: LIST
28008: LIST
28009: ST_TO_ADDR
28010: GO 28065
28012: LD_INT 46
28014: DOUBLE
28015: EQUAL
28016: IFTRUE 28020
28018: GO 28038
28020: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
28021: LD_ADDR_VAR 0 3
28025: PUSH
28026: LD_INT 23
28028: PUSH
28029: LD_INT 24
28031: PUSH
28032: EMPTY
28033: LIST
28034: LIST
28035: ST_TO_ADDR
28036: GO 28065
28038: LD_INT 47
28040: DOUBLE
28041: EQUAL
28042: IFTRUE 28046
28044: GO 28064
28046: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28047: LD_ADDR_VAR 0 3
28051: PUSH
28052: LD_INT 23
28054: PUSH
28055: LD_INT 24
28057: PUSH
28058: EMPTY
28059: LIST
28060: LIST
28061: ST_TO_ADDR
28062: GO 28065
28064: POP
// result := ( chassis in result ) ;
28065: LD_ADDR_VAR 0 3
28069: PUSH
28070: LD_VAR 0 1
28074: PUSH
28075: LD_VAR 0 3
28079: IN
28080: ST_TO_ADDR
// end ;
28081: LD_VAR 0 3
28085: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
28086: LD_INT 0
28088: PPUSH
28089: PPUSH
28090: PPUSH
28091: PPUSH
28092: PPUSH
28093: PPUSH
28094: PPUSH
// result := array ;
28095: LD_ADDR_VAR 0 5
28099: PUSH
28100: LD_VAR 0 1
28104: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
28105: LD_VAR 0 1
28109: NOT
28110: PUSH
28111: LD_VAR 0 2
28115: NOT
28116: OR
28117: PUSH
28118: LD_VAR 0 3
28122: NOT
28123: OR
28124: PUSH
28125: LD_VAR 0 2
28129: PUSH
28130: LD_VAR 0 1
28134: GREATER
28135: OR
28136: PUSH
28137: LD_VAR 0 3
28141: PUSH
28142: LD_VAR 0 1
28146: GREATER
28147: OR
28148: IFFALSE 28152
// exit ;
28150: GO 28448
// if direction then
28152: LD_VAR 0 4
28156: IFFALSE 28220
// begin d := 1 ;
28158: LD_ADDR_VAR 0 9
28162: PUSH
28163: LD_INT 1
28165: ST_TO_ADDR
// if i_from > i_to then
28166: LD_VAR 0 2
28170: PUSH
28171: LD_VAR 0 3
28175: GREATER
28176: IFFALSE 28202
// length := ( array - i_from ) + i_to else
28178: LD_ADDR_VAR 0 11
28182: PUSH
28183: LD_VAR 0 1
28187: PUSH
28188: LD_VAR 0 2
28192: MINUS
28193: PUSH
28194: LD_VAR 0 3
28198: PLUS
28199: ST_TO_ADDR
28200: GO 28218
// length := i_to - i_from ;
28202: LD_ADDR_VAR 0 11
28206: PUSH
28207: LD_VAR 0 3
28211: PUSH
28212: LD_VAR 0 2
28216: MINUS
28217: ST_TO_ADDR
// end else
28218: GO 28281
// begin d := - 1 ;
28220: LD_ADDR_VAR 0 9
28224: PUSH
28225: LD_INT 1
28227: NEG
28228: ST_TO_ADDR
// if i_from > i_to then
28229: LD_VAR 0 2
28233: PUSH
28234: LD_VAR 0 3
28238: GREATER
28239: IFFALSE 28259
// length := i_from - i_to else
28241: LD_ADDR_VAR 0 11
28245: PUSH
28246: LD_VAR 0 2
28250: PUSH
28251: LD_VAR 0 3
28255: MINUS
28256: ST_TO_ADDR
28257: GO 28281
// length := ( array - i_to ) + i_from ;
28259: LD_ADDR_VAR 0 11
28263: PUSH
28264: LD_VAR 0 1
28268: PUSH
28269: LD_VAR 0 3
28273: MINUS
28274: PUSH
28275: LD_VAR 0 2
28279: PLUS
28280: ST_TO_ADDR
// end ; if not length then
28281: LD_VAR 0 11
28285: NOT
28286: IFFALSE 28290
// exit ;
28288: GO 28448
// tmp := array ;
28290: LD_ADDR_VAR 0 10
28294: PUSH
28295: LD_VAR 0 1
28299: ST_TO_ADDR
// for i = 1 to length do
28300: LD_ADDR_VAR 0 6
28304: PUSH
28305: DOUBLE
28306: LD_INT 1
28308: DEC
28309: ST_TO_ADDR
28310: LD_VAR 0 11
28314: PUSH
28315: FOR_TO
28316: IFFALSE 28436
// begin for j = 1 to array do
28318: LD_ADDR_VAR 0 7
28322: PUSH
28323: DOUBLE
28324: LD_INT 1
28326: DEC
28327: ST_TO_ADDR
28328: LD_VAR 0 1
28332: PUSH
28333: FOR_TO
28334: IFFALSE 28422
// begin k := j + d ;
28336: LD_ADDR_VAR 0 8
28340: PUSH
28341: LD_VAR 0 7
28345: PUSH
28346: LD_VAR 0 9
28350: PLUS
28351: ST_TO_ADDR
// if k > array then
28352: LD_VAR 0 8
28356: PUSH
28357: LD_VAR 0 1
28361: GREATER
28362: IFFALSE 28372
// k := 1 ;
28364: LD_ADDR_VAR 0 8
28368: PUSH
28369: LD_INT 1
28371: ST_TO_ADDR
// if not k then
28372: LD_VAR 0 8
28376: NOT
28377: IFFALSE 28389
// k := array ;
28379: LD_ADDR_VAR 0 8
28383: PUSH
28384: LD_VAR 0 1
28388: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
28389: LD_ADDR_VAR 0 10
28393: PUSH
28394: LD_VAR 0 10
28398: PPUSH
28399: LD_VAR 0 8
28403: PPUSH
28404: LD_VAR 0 1
28408: PUSH
28409: LD_VAR 0 7
28413: ARRAY
28414: PPUSH
28415: CALL_OW 1
28419: ST_TO_ADDR
// end ;
28420: GO 28333
28422: POP
28423: POP
// array := tmp ;
28424: LD_ADDR_VAR 0 1
28428: PUSH
28429: LD_VAR 0 10
28433: ST_TO_ADDR
// end ;
28434: GO 28315
28436: POP
28437: POP
// result := array ;
28438: LD_ADDR_VAR 0 5
28442: PUSH
28443: LD_VAR 0 1
28447: ST_TO_ADDR
// end ;
28448: LD_VAR 0 5
28452: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
28453: LD_INT 0
28455: PPUSH
28456: PPUSH
// result := 0 ;
28457: LD_ADDR_VAR 0 3
28461: PUSH
28462: LD_INT 0
28464: ST_TO_ADDR
// if not array or not value in array then
28465: LD_VAR 0 1
28469: NOT
28470: PUSH
28471: LD_VAR 0 2
28475: PUSH
28476: LD_VAR 0 1
28480: IN
28481: NOT
28482: OR
28483: IFFALSE 28487
// exit ;
28485: GO 28541
// for i = 1 to array do
28487: LD_ADDR_VAR 0 4
28491: PUSH
28492: DOUBLE
28493: LD_INT 1
28495: DEC
28496: ST_TO_ADDR
28497: LD_VAR 0 1
28501: PUSH
28502: FOR_TO
28503: IFFALSE 28539
// if value = array [ i ] then
28505: LD_VAR 0 2
28509: PUSH
28510: LD_VAR 0 1
28514: PUSH
28515: LD_VAR 0 4
28519: ARRAY
28520: EQUAL
28521: IFFALSE 28537
// begin result := i ;
28523: LD_ADDR_VAR 0 3
28527: PUSH
28528: LD_VAR 0 4
28532: ST_TO_ADDR
// exit ;
28533: POP
28534: POP
28535: GO 28541
// end ;
28537: GO 28502
28539: POP
28540: POP
// end ;
28541: LD_VAR 0 3
28545: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
28546: LD_INT 0
28548: PPUSH
// vc_chassis := chassis ;
28549: LD_ADDR_OWVAR 37
28553: PUSH
28554: LD_VAR 0 1
28558: ST_TO_ADDR
// vc_engine := engine ;
28559: LD_ADDR_OWVAR 39
28563: PUSH
28564: LD_VAR 0 2
28568: ST_TO_ADDR
// vc_control := control ;
28569: LD_ADDR_OWVAR 38
28573: PUSH
28574: LD_VAR 0 3
28578: ST_TO_ADDR
// vc_weapon := weapon ;
28579: LD_ADDR_OWVAR 40
28583: PUSH
28584: LD_VAR 0 4
28588: ST_TO_ADDR
// vc_fuel_battery := fuel ;
28589: LD_ADDR_OWVAR 41
28593: PUSH
28594: LD_VAR 0 5
28598: ST_TO_ADDR
// end ;
28599: LD_VAR 0 6
28603: RET
// export function WantPlant ( unit ) ; var task ; begin
28604: LD_INT 0
28606: PPUSH
28607: PPUSH
// result := false ;
28608: LD_ADDR_VAR 0 2
28612: PUSH
28613: LD_INT 0
28615: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
28616: LD_ADDR_VAR 0 3
28620: PUSH
28621: LD_VAR 0 1
28625: PPUSH
28626: CALL_OW 437
28630: ST_TO_ADDR
// if task then
28631: LD_VAR 0 3
28635: IFFALSE 28663
// if task [ 1 ] [ 1 ] = p then
28637: LD_VAR 0 3
28641: PUSH
28642: LD_INT 1
28644: ARRAY
28645: PUSH
28646: LD_INT 1
28648: ARRAY
28649: PUSH
28650: LD_STRING p
28652: EQUAL
28653: IFFALSE 28663
// result := true ;
28655: LD_ADDR_VAR 0 2
28659: PUSH
28660: LD_INT 1
28662: ST_TO_ADDR
// end ;
28663: LD_VAR 0 2
28667: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
28668: LD_INT 0
28670: PPUSH
28671: PPUSH
28672: PPUSH
28673: PPUSH
// if pos < 1 then
28674: LD_VAR 0 2
28678: PUSH
28679: LD_INT 1
28681: LESS
28682: IFFALSE 28686
// exit ;
28684: GO 28989
// if pos = 1 then
28686: LD_VAR 0 2
28690: PUSH
28691: LD_INT 1
28693: EQUAL
28694: IFFALSE 28727
// result := Replace ( arr , pos [ 1 ] , value ) else
28696: LD_ADDR_VAR 0 4
28700: PUSH
28701: LD_VAR 0 1
28705: PPUSH
28706: LD_VAR 0 2
28710: PUSH
28711: LD_INT 1
28713: ARRAY
28714: PPUSH
28715: LD_VAR 0 3
28719: PPUSH
28720: CALL_OW 1
28724: ST_TO_ADDR
28725: GO 28989
// begin tmp := arr ;
28727: LD_ADDR_VAR 0 6
28731: PUSH
28732: LD_VAR 0 1
28736: ST_TO_ADDR
// s_arr := [ tmp ] ;
28737: LD_ADDR_VAR 0 7
28741: PUSH
28742: LD_VAR 0 6
28746: PUSH
28747: EMPTY
28748: LIST
28749: ST_TO_ADDR
// for i = 1 to pos - 1 do
28750: LD_ADDR_VAR 0 5
28754: PUSH
28755: DOUBLE
28756: LD_INT 1
28758: DEC
28759: ST_TO_ADDR
28760: LD_VAR 0 2
28764: PUSH
28765: LD_INT 1
28767: MINUS
28768: PUSH
28769: FOR_TO
28770: IFFALSE 28815
// begin tmp := tmp [ pos [ i ] ] ;
28772: LD_ADDR_VAR 0 6
28776: PUSH
28777: LD_VAR 0 6
28781: PUSH
28782: LD_VAR 0 2
28786: PUSH
28787: LD_VAR 0 5
28791: ARRAY
28792: ARRAY
28793: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
28794: LD_ADDR_VAR 0 7
28798: PUSH
28799: LD_VAR 0 7
28803: PUSH
28804: LD_VAR 0 6
28808: PUSH
28809: EMPTY
28810: LIST
28811: ADD
28812: ST_TO_ADDR
// end ;
28813: GO 28769
28815: POP
28816: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
28817: LD_ADDR_VAR 0 6
28821: PUSH
28822: LD_VAR 0 6
28826: PPUSH
28827: LD_VAR 0 2
28831: PUSH
28832: LD_VAR 0 2
28836: ARRAY
28837: PPUSH
28838: LD_VAR 0 3
28842: PPUSH
28843: CALL_OW 1
28847: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
28848: LD_ADDR_VAR 0 7
28852: PUSH
28853: LD_VAR 0 7
28857: PPUSH
28858: LD_VAR 0 7
28862: PPUSH
28863: LD_VAR 0 6
28867: PPUSH
28868: CALL_OW 1
28872: ST_TO_ADDR
// for i = s_arr downto 2 do
28873: LD_ADDR_VAR 0 5
28877: PUSH
28878: DOUBLE
28879: LD_VAR 0 7
28883: INC
28884: ST_TO_ADDR
28885: LD_INT 2
28887: PUSH
28888: FOR_DOWNTO
28889: IFFALSE 28973
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
28891: LD_ADDR_VAR 0 6
28895: PUSH
28896: LD_VAR 0 7
28900: PUSH
28901: LD_VAR 0 5
28905: PUSH
28906: LD_INT 1
28908: MINUS
28909: ARRAY
28910: PPUSH
28911: LD_VAR 0 2
28915: PUSH
28916: LD_VAR 0 5
28920: PUSH
28921: LD_INT 1
28923: MINUS
28924: ARRAY
28925: PPUSH
28926: LD_VAR 0 7
28930: PUSH
28931: LD_VAR 0 5
28935: ARRAY
28936: PPUSH
28937: CALL_OW 1
28941: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
28942: LD_ADDR_VAR 0 7
28946: PUSH
28947: LD_VAR 0 7
28951: PPUSH
28952: LD_VAR 0 5
28956: PUSH
28957: LD_INT 1
28959: MINUS
28960: PPUSH
28961: LD_VAR 0 6
28965: PPUSH
28966: CALL_OW 1
28970: ST_TO_ADDR
// end ;
28971: GO 28888
28973: POP
28974: POP
// result := s_arr [ 1 ] ;
28975: LD_ADDR_VAR 0 4
28979: PUSH
28980: LD_VAR 0 7
28984: PUSH
28985: LD_INT 1
28987: ARRAY
28988: ST_TO_ADDR
// end ; end ;
28989: LD_VAR 0 4
28993: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
28994: LD_INT 0
28996: PPUSH
28997: PPUSH
// if not list then
28998: LD_VAR 0 1
29002: NOT
29003: IFFALSE 29007
// exit ;
29005: GO 29098
// i := list [ pos1 ] ;
29007: LD_ADDR_VAR 0 5
29011: PUSH
29012: LD_VAR 0 1
29016: PUSH
29017: LD_VAR 0 2
29021: ARRAY
29022: ST_TO_ADDR
// if not i then
29023: LD_VAR 0 5
29027: NOT
29028: IFFALSE 29032
// exit ;
29030: GO 29098
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
29032: LD_ADDR_VAR 0 1
29036: PUSH
29037: LD_VAR 0 1
29041: PPUSH
29042: LD_VAR 0 2
29046: PPUSH
29047: LD_VAR 0 1
29051: PUSH
29052: LD_VAR 0 3
29056: ARRAY
29057: PPUSH
29058: CALL_OW 1
29062: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
29063: LD_ADDR_VAR 0 1
29067: PUSH
29068: LD_VAR 0 1
29072: PPUSH
29073: LD_VAR 0 3
29077: PPUSH
29078: LD_VAR 0 5
29082: PPUSH
29083: CALL_OW 1
29087: ST_TO_ADDR
// result := list ;
29088: LD_ADDR_VAR 0 4
29092: PUSH
29093: LD_VAR 0 1
29097: ST_TO_ADDR
// end ;
29098: LD_VAR 0 4
29102: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
29103: LD_INT 0
29105: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
29106: LD_ADDR_VAR 0 5
29110: PUSH
29111: LD_VAR 0 1
29115: PPUSH
29116: CALL_OW 250
29120: PPUSH
29121: LD_VAR 0 1
29125: PPUSH
29126: CALL_OW 251
29130: PPUSH
29131: LD_VAR 0 2
29135: PPUSH
29136: LD_VAR 0 3
29140: PPUSH
29141: LD_VAR 0 4
29145: PPUSH
29146: CALL 29156 0 5
29150: ST_TO_ADDR
// end ;
29151: LD_VAR 0 5
29155: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
29156: LD_INT 0
29158: PPUSH
29159: PPUSH
29160: PPUSH
29161: PPUSH
// if not list then
29162: LD_VAR 0 3
29166: NOT
29167: IFFALSE 29171
// exit ;
29169: GO 29559
// result := [ ] ;
29171: LD_ADDR_VAR 0 6
29175: PUSH
29176: EMPTY
29177: ST_TO_ADDR
// for i in list do
29178: LD_ADDR_VAR 0 7
29182: PUSH
29183: LD_VAR 0 3
29187: PUSH
29188: FOR_IN
29189: IFFALSE 29391
// begin tmp := GetDistUnitXY ( i , x , y ) ;
29191: LD_ADDR_VAR 0 9
29195: PUSH
29196: LD_VAR 0 7
29200: PPUSH
29201: LD_VAR 0 1
29205: PPUSH
29206: LD_VAR 0 2
29210: PPUSH
29211: CALL_OW 297
29215: ST_TO_ADDR
// if not result then
29216: LD_VAR 0 6
29220: NOT
29221: IFFALSE 29247
// result := [ [ i , tmp ] ] else
29223: LD_ADDR_VAR 0 6
29227: PUSH
29228: LD_VAR 0 7
29232: PUSH
29233: LD_VAR 0 9
29237: PUSH
29238: EMPTY
29239: LIST
29240: LIST
29241: PUSH
29242: EMPTY
29243: LIST
29244: ST_TO_ADDR
29245: GO 29389
// begin if result [ result ] [ 2 ] < tmp then
29247: LD_VAR 0 6
29251: PUSH
29252: LD_VAR 0 6
29256: ARRAY
29257: PUSH
29258: LD_INT 2
29260: ARRAY
29261: PUSH
29262: LD_VAR 0 9
29266: LESS
29267: IFFALSE 29309
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
29269: LD_ADDR_VAR 0 6
29273: PUSH
29274: LD_VAR 0 6
29278: PPUSH
29279: LD_VAR 0 6
29283: PUSH
29284: LD_INT 1
29286: PLUS
29287: PPUSH
29288: LD_VAR 0 7
29292: PUSH
29293: LD_VAR 0 9
29297: PUSH
29298: EMPTY
29299: LIST
29300: LIST
29301: PPUSH
29302: CALL_OW 2
29306: ST_TO_ADDR
29307: GO 29389
// for j = 1 to result do
29309: LD_ADDR_VAR 0 8
29313: PUSH
29314: DOUBLE
29315: LD_INT 1
29317: DEC
29318: ST_TO_ADDR
29319: LD_VAR 0 6
29323: PUSH
29324: FOR_TO
29325: IFFALSE 29387
// begin if tmp < result [ j ] [ 2 ] then
29327: LD_VAR 0 9
29331: PUSH
29332: LD_VAR 0 6
29336: PUSH
29337: LD_VAR 0 8
29341: ARRAY
29342: PUSH
29343: LD_INT 2
29345: ARRAY
29346: LESS
29347: IFFALSE 29385
// begin result := Insert ( result , j , [ i , tmp ] ) ;
29349: LD_ADDR_VAR 0 6
29353: PUSH
29354: LD_VAR 0 6
29358: PPUSH
29359: LD_VAR 0 8
29363: PPUSH
29364: LD_VAR 0 7
29368: PUSH
29369: LD_VAR 0 9
29373: PUSH
29374: EMPTY
29375: LIST
29376: LIST
29377: PPUSH
29378: CALL_OW 2
29382: ST_TO_ADDR
// break ;
29383: GO 29387
// end ; end ;
29385: GO 29324
29387: POP
29388: POP
// end ; end ;
29389: GO 29188
29391: POP
29392: POP
// if result and not asc then
29393: LD_VAR 0 6
29397: PUSH
29398: LD_VAR 0 4
29402: NOT
29403: AND
29404: IFFALSE 29479
// begin tmp := result ;
29406: LD_ADDR_VAR 0 9
29410: PUSH
29411: LD_VAR 0 6
29415: ST_TO_ADDR
// for i = tmp downto 1 do
29416: LD_ADDR_VAR 0 7
29420: PUSH
29421: DOUBLE
29422: LD_VAR 0 9
29426: INC
29427: ST_TO_ADDR
29428: LD_INT 1
29430: PUSH
29431: FOR_DOWNTO
29432: IFFALSE 29477
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
29434: LD_ADDR_VAR 0 6
29438: PUSH
29439: LD_VAR 0 6
29443: PPUSH
29444: LD_VAR 0 9
29448: PUSH
29449: LD_VAR 0 7
29453: MINUS
29454: PUSH
29455: LD_INT 1
29457: PLUS
29458: PPUSH
29459: LD_VAR 0 9
29463: PUSH
29464: LD_VAR 0 7
29468: ARRAY
29469: PPUSH
29470: CALL_OW 1
29474: ST_TO_ADDR
29475: GO 29431
29477: POP
29478: POP
// end ; tmp := [ ] ;
29479: LD_ADDR_VAR 0 9
29483: PUSH
29484: EMPTY
29485: ST_TO_ADDR
// if mode then
29486: LD_VAR 0 5
29490: IFFALSE 29559
// begin for i = 1 to result do
29492: LD_ADDR_VAR 0 7
29496: PUSH
29497: DOUBLE
29498: LD_INT 1
29500: DEC
29501: ST_TO_ADDR
29502: LD_VAR 0 6
29506: PUSH
29507: FOR_TO
29508: IFFALSE 29547
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
29510: LD_ADDR_VAR 0 9
29514: PUSH
29515: LD_VAR 0 9
29519: PPUSH
29520: LD_VAR 0 7
29524: PPUSH
29525: LD_VAR 0 6
29529: PUSH
29530: LD_VAR 0 7
29534: ARRAY
29535: PUSH
29536: LD_INT 1
29538: ARRAY
29539: PPUSH
29540: CALL_OW 1
29544: ST_TO_ADDR
29545: GO 29507
29547: POP
29548: POP
// result := tmp ;
29549: LD_ADDR_VAR 0 6
29553: PUSH
29554: LD_VAR 0 9
29558: ST_TO_ADDR
// end ; end ;
29559: LD_VAR 0 6
29563: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
29564: LD_INT 0
29566: PPUSH
29567: PPUSH
29568: PPUSH
29569: PPUSH
29570: PPUSH
29571: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
29572: LD_ADDR_VAR 0 5
29576: PUSH
29577: LD_INT 0
29579: PUSH
29580: LD_INT 0
29582: PUSH
29583: LD_INT 0
29585: PUSH
29586: EMPTY
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: LIST
29592: LIST
29593: ST_TO_ADDR
// if not x or not y then
29594: LD_VAR 0 2
29598: NOT
29599: PUSH
29600: LD_VAR 0 3
29604: NOT
29605: OR
29606: IFFALSE 29610
// exit ;
29608: GO 31256
// if not range then
29610: LD_VAR 0 4
29614: NOT
29615: IFFALSE 29625
// range := 10 ;
29617: LD_ADDR_VAR 0 4
29621: PUSH
29622: LD_INT 10
29624: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29625: LD_ADDR_VAR 0 8
29629: PUSH
29630: LD_INT 81
29632: PUSH
29633: LD_VAR 0 1
29637: PUSH
29638: EMPTY
29639: LIST
29640: LIST
29641: PUSH
29642: LD_INT 92
29644: PUSH
29645: LD_VAR 0 2
29649: PUSH
29650: LD_VAR 0 3
29654: PUSH
29655: LD_VAR 0 4
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: LIST
29664: LIST
29665: PUSH
29666: LD_INT 3
29668: PUSH
29669: LD_INT 21
29671: PUSH
29672: LD_INT 3
29674: PUSH
29675: EMPTY
29676: LIST
29677: LIST
29678: PUSH
29679: EMPTY
29680: LIST
29681: LIST
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: LIST
29687: PPUSH
29688: CALL_OW 69
29692: ST_TO_ADDR
// if not tmp then
29693: LD_VAR 0 8
29697: NOT
29698: IFFALSE 29702
// exit ;
29700: GO 31256
// for i in tmp do
29702: LD_ADDR_VAR 0 6
29706: PUSH
29707: LD_VAR 0 8
29711: PUSH
29712: FOR_IN
29713: IFFALSE 31231
// begin points := [ 0 , 0 , 0 ] ;
29715: LD_ADDR_VAR 0 9
29719: PUSH
29720: LD_INT 0
29722: PUSH
29723: LD_INT 0
29725: PUSH
29726: LD_INT 0
29728: PUSH
29729: EMPTY
29730: LIST
29731: LIST
29732: LIST
29733: ST_TO_ADDR
// bpoints := 1 ;
29734: LD_ADDR_VAR 0 10
29738: PUSH
29739: LD_INT 1
29741: ST_TO_ADDR
// case GetType ( i ) of unit_human :
29742: LD_VAR 0 6
29746: PPUSH
29747: CALL_OW 247
29751: PUSH
29752: LD_INT 1
29754: DOUBLE
29755: EQUAL
29756: IFTRUE 29760
29758: GO 30338
29760: POP
// begin if GetClass ( i ) = 1 then
29761: LD_VAR 0 6
29765: PPUSH
29766: CALL_OW 257
29770: PUSH
29771: LD_INT 1
29773: EQUAL
29774: IFFALSE 29795
// points := [ 10 , 5 , 3 ] ;
29776: LD_ADDR_VAR 0 9
29780: PUSH
29781: LD_INT 10
29783: PUSH
29784: LD_INT 5
29786: PUSH
29787: LD_INT 3
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: LIST
29794: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
29795: LD_VAR 0 6
29799: PPUSH
29800: CALL_OW 257
29804: PUSH
29805: LD_INT 2
29807: PUSH
29808: LD_INT 3
29810: PUSH
29811: LD_INT 4
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: LIST
29818: IN
29819: IFFALSE 29840
// points := [ 3 , 2 , 1 ] ;
29821: LD_ADDR_VAR 0 9
29825: PUSH
29826: LD_INT 3
29828: PUSH
29829: LD_INT 2
29831: PUSH
29832: LD_INT 1
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: LIST
29839: ST_TO_ADDR
// if GetClass ( i ) = 5 then
29840: LD_VAR 0 6
29844: PPUSH
29845: CALL_OW 257
29849: PUSH
29850: LD_INT 5
29852: EQUAL
29853: IFFALSE 29874
// points := [ 130 , 5 , 2 ] ;
29855: LD_ADDR_VAR 0 9
29859: PUSH
29860: LD_INT 130
29862: PUSH
29863: LD_INT 5
29865: PUSH
29866: LD_INT 2
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: LIST
29873: ST_TO_ADDR
// if GetClass ( i ) = 8 then
29874: LD_VAR 0 6
29878: PPUSH
29879: CALL_OW 257
29883: PUSH
29884: LD_INT 8
29886: EQUAL
29887: IFFALSE 29908
// points := [ 35 , 35 , 30 ] ;
29889: LD_ADDR_VAR 0 9
29893: PUSH
29894: LD_INT 35
29896: PUSH
29897: LD_INT 35
29899: PUSH
29900: LD_INT 30
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: LIST
29907: ST_TO_ADDR
// if GetClass ( i ) = 9 then
29908: LD_VAR 0 6
29912: PPUSH
29913: CALL_OW 257
29917: PUSH
29918: LD_INT 9
29920: EQUAL
29921: IFFALSE 29942
// points := [ 20 , 55 , 40 ] ;
29923: LD_ADDR_VAR 0 9
29927: PUSH
29928: LD_INT 20
29930: PUSH
29931: LD_INT 55
29933: PUSH
29934: LD_INT 40
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: LIST
29941: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
29942: LD_VAR 0 6
29946: PPUSH
29947: CALL_OW 257
29951: PUSH
29952: LD_INT 12
29954: PUSH
29955: LD_INT 16
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: IN
29962: IFFALSE 29983
// points := [ 5 , 3 , 2 ] ;
29964: LD_ADDR_VAR 0 9
29968: PUSH
29969: LD_INT 5
29971: PUSH
29972: LD_INT 3
29974: PUSH
29975: LD_INT 2
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: LIST
29982: ST_TO_ADDR
// if GetClass ( i ) = 17 then
29983: LD_VAR 0 6
29987: PPUSH
29988: CALL_OW 257
29992: PUSH
29993: LD_INT 17
29995: EQUAL
29996: IFFALSE 30017
// points := [ 100 , 50 , 75 ] ;
29998: LD_ADDR_VAR 0 9
30002: PUSH
30003: LD_INT 100
30005: PUSH
30006: LD_INT 50
30008: PUSH
30009: LD_INT 75
30011: PUSH
30012: EMPTY
30013: LIST
30014: LIST
30015: LIST
30016: ST_TO_ADDR
// if GetClass ( i ) = 15 then
30017: LD_VAR 0 6
30021: PPUSH
30022: CALL_OW 257
30026: PUSH
30027: LD_INT 15
30029: EQUAL
30030: IFFALSE 30051
// points := [ 10 , 5 , 3 ] ;
30032: LD_ADDR_VAR 0 9
30036: PUSH
30037: LD_INT 10
30039: PUSH
30040: LD_INT 5
30042: PUSH
30043: LD_INT 3
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: LIST
30050: ST_TO_ADDR
// if GetClass ( i ) = 14 then
30051: LD_VAR 0 6
30055: PPUSH
30056: CALL_OW 257
30060: PUSH
30061: LD_INT 14
30063: EQUAL
30064: IFFALSE 30085
// points := [ 10 , 0 , 0 ] ;
30066: LD_ADDR_VAR 0 9
30070: PUSH
30071: LD_INT 10
30073: PUSH
30074: LD_INT 0
30076: PUSH
30077: LD_INT 0
30079: PUSH
30080: EMPTY
30081: LIST
30082: LIST
30083: LIST
30084: ST_TO_ADDR
// if GetClass ( i ) = 11 then
30085: LD_VAR 0 6
30089: PPUSH
30090: CALL_OW 257
30094: PUSH
30095: LD_INT 11
30097: EQUAL
30098: IFFALSE 30119
// points := [ 30 , 10 , 5 ] ;
30100: LD_ADDR_VAR 0 9
30104: PUSH
30105: LD_INT 30
30107: PUSH
30108: LD_INT 10
30110: PUSH
30111: LD_INT 5
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: LIST
30118: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
30119: LD_VAR 0 1
30123: PPUSH
30124: LD_INT 5
30126: PPUSH
30127: CALL_OW 321
30131: PUSH
30132: LD_INT 2
30134: EQUAL
30135: IFFALSE 30152
// bpoints := bpoints * 1.8 ;
30137: LD_ADDR_VAR 0 10
30141: PUSH
30142: LD_VAR 0 10
30146: PUSH
30147: LD_REAL  1.80000000000000E+0000
30150: MUL
30151: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
30152: LD_VAR 0 6
30156: PPUSH
30157: CALL_OW 257
30161: PUSH
30162: LD_INT 1
30164: PUSH
30165: LD_INT 2
30167: PUSH
30168: LD_INT 3
30170: PUSH
30171: LD_INT 4
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: LIST
30178: LIST
30179: IN
30180: PUSH
30181: LD_VAR 0 1
30185: PPUSH
30186: LD_INT 51
30188: PPUSH
30189: CALL_OW 321
30193: PUSH
30194: LD_INT 2
30196: EQUAL
30197: AND
30198: IFFALSE 30215
// bpoints := bpoints * 1.2 ;
30200: LD_ADDR_VAR 0 10
30204: PUSH
30205: LD_VAR 0 10
30209: PUSH
30210: LD_REAL  1.20000000000000E+0000
30213: MUL
30214: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
30215: LD_VAR 0 6
30219: PPUSH
30220: CALL_OW 257
30224: PUSH
30225: LD_INT 5
30227: PUSH
30228: LD_INT 7
30230: PUSH
30231: LD_INT 9
30233: PUSH
30234: EMPTY
30235: LIST
30236: LIST
30237: LIST
30238: IN
30239: PUSH
30240: LD_VAR 0 1
30244: PPUSH
30245: LD_INT 52
30247: PPUSH
30248: CALL_OW 321
30252: PUSH
30253: LD_INT 2
30255: EQUAL
30256: AND
30257: IFFALSE 30274
// bpoints := bpoints * 1.5 ;
30259: LD_ADDR_VAR 0 10
30263: PUSH
30264: LD_VAR 0 10
30268: PUSH
30269: LD_REAL  1.50000000000000E+0000
30272: MUL
30273: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
30274: LD_VAR 0 1
30278: PPUSH
30279: LD_INT 66
30281: PPUSH
30282: CALL_OW 321
30286: PUSH
30287: LD_INT 2
30289: EQUAL
30290: IFFALSE 30307
// bpoints := bpoints * 1.1 ;
30292: LD_ADDR_VAR 0 10
30296: PUSH
30297: LD_VAR 0 10
30301: PUSH
30302: LD_REAL  1.10000000000000E+0000
30305: MUL
30306: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
30307: LD_ADDR_VAR 0 10
30311: PUSH
30312: LD_VAR 0 10
30316: PUSH
30317: LD_VAR 0 6
30321: PPUSH
30322: LD_INT 1
30324: PPUSH
30325: CALL_OW 259
30329: PUSH
30330: LD_REAL  1.15000000000000E+0000
30333: MUL
30334: MUL
30335: ST_TO_ADDR
// end ; unit_vehicle :
30336: GO 31160
30338: LD_INT 2
30340: DOUBLE
30341: EQUAL
30342: IFTRUE 30346
30344: GO 31148
30346: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
30347: LD_VAR 0 6
30351: PPUSH
30352: CALL_OW 264
30356: PUSH
30357: LD_INT 2
30359: PUSH
30360: LD_INT 42
30362: PUSH
30363: LD_INT 24
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: LIST
30370: IN
30371: IFFALSE 30392
// points := [ 25 , 5 , 3 ] ;
30373: LD_ADDR_VAR 0 9
30377: PUSH
30378: LD_INT 25
30380: PUSH
30381: LD_INT 5
30383: PUSH
30384: LD_INT 3
30386: PUSH
30387: EMPTY
30388: LIST
30389: LIST
30390: LIST
30391: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
30392: LD_VAR 0 6
30396: PPUSH
30397: CALL_OW 264
30401: PUSH
30402: LD_INT 4
30404: PUSH
30405: LD_INT 43
30407: PUSH
30408: LD_INT 25
30410: PUSH
30411: EMPTY
30412: LIST
30413: LIST
30414: LIST
30415: IN
30416: IFFALSE 30437
// points := [ 40 , 15 , 5 ] ;
30418: LD_ADDR_VAR 0 9
30422: PUSH
30423: LD_INT 40
30425: PUSH
30426: LD_INT 15
30428: PUSH
30429: LD_INT 5
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: LIST
30436: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
30437: LD_VAR 0 6
30441: PPUSH
30442: CALL_OW 264
30446: PUSH
30447: LD_INT 3
30449: PUSH
30450: LD_INT 23
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: IN
30457: IFFALSE 30478
// points := [ 7 , 25 , 8 ] ;
30459: LD_ADDR_VAR 0 9
30463: PUSH
30464: LD_INT 7
30466: PUSH
30467: LD_INT 25
30469: PUSH
30470: LD_INT 8
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: LIST
30477: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
30478: LD_VAR 0 6
30482: PPUSH
30483: CALL_OW 264
30487: PUSH
30488: LD_INT 5
30490: PUSH
30491: LD_INT 27
30493: PUSH
30494: LD_INT 44
30496: PUSH
30497: EMPTY
30498: LIST
30499: LIST
30500: LIST
30501: IN
30502: IFFALSE 30523
// points := [ 14 , 50 , 16 ] ;
30504: LD_ADDR_VAR 0 9
30508: PUSH
30509: LD_INT 14
30511: PUSH
30512: LD_INT 50
30514: PUSH
30515: LD_INT 16
30517: PUSH
30518: EMPTY
30519: LIST
30520: LIST
30521: LIST
30522: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
30523: LD_VAR 0 6
30527: PPUSH
30528: CALL_OW 264
30532: PUSH
30533: LD_INT 6
30535: PUSH
30536: LD_INT 46
30538: PUSH
30539: EMPTY
30540: LIST
30541: LIST
30542: IN
30543: IFFALSE 30564
// points := [ 32 , 120 , 70 ] ;
30545: LD_ADDR_VAR 0 9
30549: PUSH
30550: LD_INT 32
30552: PUSH
30553: LD_INT 120
30555: PUSH
30556: LD_INT 70
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: LIST
30563: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
30564: LD_VAR 0 6
30568: PPUSH
30569: CALL_OW 264
30573: PUSH
30574: LD_INT 7
30576: PUSH
30577: LD_INT 28
30579: PUSH
30580: LD_INT 45
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: LIST
30587: IN
30588: IFFALSE 30609
// points := [ 35 , 20 , 45 ] ;
30590: LD_ADDR_VAR 0 9
30594: PUSH
30595: LD_INT 35
30597: PUSH
30598: LD_INT 20
30600: PUSH
30601: LD_INT 45
30603: PUSH
30604: EMPTY
30605: LIST
30606: LIST
30607: LIST
30608: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
30609: LD_VAR 0 6
30613: PPUSH
30614: CALL_OW 264
30618: PUSH
30619: LD_INT 47
30621: PUSH
30622: EMPTY
30623: LIST
30624: IN
30625: IFFALSE 30646
// points := [ 67 , 45 , 75 ] ;
30627: LD_ADDR_VAR 0 9
30631: PUSH
30632: LD_INT 67
30634: PUSH
30635: LD_INT 45
30637: PUSH
30638: LD_INT 75
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: LIST
30645: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
30646: LD_VAR 0 6
30650: PPUSH
30651: CALL_OW 264
30655: PUSH
30656: LD_INT 26
30658: PUSH
30659: EMPTY
30660: LIST
30661: IN
30662: IFFALSE 30683
// points := [ 120 , 30 , 80 ] ;
30664: LD_ADDR_VAR 0 9
30668: PUSH
30669: LD_INT 120
30671: PUSH
30672: LD_INT 30
30674: PUSH
30675: LD_INT 80
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: LIST
30682: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
30683: LD_VAR 0 6
30687: PPUSH
30688: CALL_OW 264
30692: PUSH
30693: LD_INT 22
30695: PUSH
30696: EMPTY
30697: LIST
30698: IN
30699: IFFALSE 30720
// points := [ 40 , 1 , 1 ] ;
30701: LD_ADDR_VAR 0 9
30705: PUSH
30706: LD_INT 40
30708: PUSH
30709: LD_INT 1
30711: PUSH
30712: LD_INT 1
30714: PUSH
30715: EMPTY
30716: LIST
30717: LIST
30718: LIST
30719: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
30720: LD_VAR 0 6
30724: PPUSH
30725: CALL_OW 264
30729: PUSH
30730: LD_INT 29
30732: PUSH
30733: EMPTY
30734: LIST
30735: IN
30736: IFFALSE 30757
// points := [ 70 , 200 , 400 ] ;
30738: LD_ADDR_VAR 0 9
30742: PUSH
30743: LD_INT 70
30745: PUSH
30746: LD_INT 200
30748: PUSH
30749: LD_INT 400
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: LIST
30756: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
30757: LD_VAR 0 6
30761: PPUSH
30762: CALL_OW 264
30766: PUSH
30767: LD_INT 14
30769: PUSH
30770: LD_INT 53
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: IN
30777: IFFALSE 30798
// points := [ 40 , 10 , 20 ] ;
30779: LD_ADDR_VAR 0 9
30783: PUSH
30784: LD_INT 40
30786: PUSH
30787: LD_INT 10
30789: PUSH
30790: LD_INT 20
30792: PUSH
30793: EMPTY
30794: LIST
30795: LIST
30796: LIST
30797: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
30798: LD_VAR 0 6
30802: PPUSH
30803: CALL_OW 264
30807: PUSH
30808: LD_INT 9
30810: PUSH
30811: EMPTY
30812: LIST
30813: IN
30814: IFFALSE 30835
// points := [ 5 , 70 , 20 ] ;
30816: LD_ADDR_VAR 0 9
30820: PUSH
30821: LD_INT 5
30823: PUSH
30824: LD_INT 70
30826: PUSH
30827: LD_INT 20
30829: PUSH
30830: EMPTY
30831: LIST
30832: LIST
30833: LIST
30834: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
30835: LD_VAR 0 6
30839: PPUSH
30840: CALL_OW 264
30844: PUSH
30845: LD_INT 10
30847: PUSH
30848: EMPTY
30849: LIST
30850: IN
30851: IFFALSE 30872
// points := [ 35 , 110 , 70 ] ;
30853: LD_ADDR_VAR 0 9
30857: PUSH
30858: LD_INT 35
30860: PUSH
30861: LD_INT 110
30863: PUSH
30864: LD_INT 70
30866: PUSH
30867: EMPTY
30868: LIST
30869: LIST
30870: LIST
30871: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
30872: LD_VAR 0 6
30876: PPUSH
30877: CALL_OW 265
30881: PUSH
30882: LD_INT 25
30884: EQUAL
30885: IFFALSE 30906
// points := [ 80 , 65 , 100 ] ;
30887: LD_ADDR_VAR 0 9
30891: PUSH
30892: LD_INT 80
30894: PUSH
30895: LD_INT 65
30897: PUSH
30898: LD_INT 100
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: LIST
30905: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
30906: LD_VAR 0 6
30910: PPUSH
30911: CALL_OW 263
30915: PUSH
30916: LD_INT 1
30918: EQUAL
30919: IFFALSE 30954
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
30921: LD_ADDR_VAR 0 10
30925: PUSH
30926: LD_VAR 0 10
30930: PUSH
30931: LD_VAR 0 6
30935: PPUSH
30936: CALL_OW 311
30940: PPUSH
30941: LD_INT 3
30943: PPUSH
30944: CALL_OW 259
30948: PUSH
30949: LD_INT 4
30951: MUL
30952: MUL
30953: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
30954: LD_VAR 0 6
30958: PPUSH
30959: CALL_OW 263
30963: PUSH
30964: LD_INT 2
30966: EQUAL
30967: IFFALSE 31018
// begin j := IsControledBy ( i ) ;
30969: LD_ADDR_VAR 0 7
30973: PUSH
30974: LD_VAR 0 6
30978: PPUSH
30979: CALL_OW 312
30983: ST_TO_ADDR
// if j then
30984: LD_VAR 0 7
30988: IFFALSE 31018
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
30990: LD_ADDR_VAR 0 10
30994: PUSH
30995: LD_VAR 0 10
30999: PUSH
31000: LD_VAR 0 7
31004: PPUSH
31005: LD_INT 3
31007: PPUSH
31008: CALL_OW 259
31012: PUSH
31013: LD_INT 3
31015: MUL
31016: MUL
31017: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
31018: LD_VAR 0 6
31022: PPUSH
31023: CALL_OW 264
31027: PUSH
31028: LD_INT 5
31030: PUSH
31031: LD_INT 6
31033: PUSH
31034: LD_INT 46
31036: PUSH
31037: LD_INT 44
31039: PUSH
31040: LD_INT 47
31042: PUSH
31043: LD_INT 45
31045: PUSH
31046: LD_INT 28
31048: PUSH
31049: LD_INT 7
31051: PUSH
31052: LD_INT 27
31054: PUSH
31055: LD_INT 29
31057: PUSH
31058: EMPTY
31059: LIST
31060: LIST
31061: LIST
31062: LIST
31063: LIST
31064: LIST
31065: LIST
31066: LIST
31067: LIST
31068: LIST
31069: IN
31070: PUSH
31071: LD_VAR 0 1
31075: PPUSH
31076: LD_INT 52
31078: PPUSH
31079: CALL_OW 321
31083: PUSH
31084: LD_INT 2
31086: EQUAL
31087: AND
31088: IFFALSE 31105
// bpoints := bpoints * 1.2 ;
31090: LD_ADDR_VAR 0 10
31094: PUSH
31095: LD_VAR 0 10
31099: PUSH
31100: LD_REAL  1.20000000000000E+0000
31103: MUL
31104: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
31105: LD_VAR 0 6
31109: PPUSH
31110: CALL_OW 264
31114: PUSH
31115: LD_INT 6
31117: PUSH
31118: LD_INT 46
31120: PUSH
31121: LD_INT 47
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: LIST
31128: IN
31129: IFFALSE 31146
// bpoints := bpoints * 1.2 ;
31131: LD_ADDR_VAR 0 10
31135: PUSH
31136: LD_VAR 0 10
31140: PUSH
31141: LD_REAL  1.20000000000000E+0000
31144: MUL
31145: ST_TO_ADDR
// end ; unit_building :
31146: GO 31160
31148: LD_INT 3
31150: DOUBLE
31151: EQUAL
31152: IFTRUE 31156
31154: GO 31159
31156: POP
// ; end ;
31157: GO 31160
31159: POP
// for j = 1 to 3 do
31160: LD_ADDR_VAR 0 7
31164: PUSH
31165: DOUBLE
31166: LD_INT 1
31168: DEC
31169: ST_TO_ADDR
31170: LD_INT 3
31172: PUSH
31173: FOR_TO
31174: IFFALSE 31227
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
31176: LD_ADDR_VAR 0 5
31180: PUSH
31181: LD_VAR 0 5
31185: PPUSH
31186: LD_VAR 0 7
31190: PPUSH
31191: LD_VAR 0 5
31195: PUSH
31196: LD_VAR 0 7
31200: ARRAY
31201: PUSH
31202: LD_VAR 0 9
31206: PUSH
31207: LD_VAR 0 7
31211: ARRAY
31212: PUSH
31213: LD_VAR 0 10
31217: MUL
31218: PLUS
31219: PPUSH
31220: CALL_OW 1
31224: ST_TO_ADDR
31225: GO 31173
31227: POP
31228: POP
// end ;
31229: GO 29712
31231: POP
31232: POP
// result := Replace ( result , 4 , tmp ) ;
31233: LD_ADDR_VAR 0 5
31237: PUSH
31238: LD_VAR 0 5
31242: PPUSH
31243: LD_INT 4
31245: PPUSH
31246: LD_VAR 0 8
31250: PPUSH
31251: CALL_OW 1
31255: ST_TO_ADDR
// end ;
31256: LD_VAR 0 5
31260: RET
// export function DangerAtRange ( unit , range ) ; begin
31261: LD_INT 0
31263: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
31264: LD_ADDR_VAR 0 3
31268: PUSH
31269: LD_VAR 0 1
31273: PPUSH
31274: CALL_OW 255
31278: PPUSH
31279: LD_VAR 0 1
31283: PPUSH
31284: CALL_OW 250
31288: PPUSH
31289: LD_VAR 0 1
31293: PPUSH
31294: CALL_OW 251
31298: PPUSH
31299: LD_VAR 0 2
31303: PPUSH
31304: CALL 29564 0 4
31308: ST_TO_ADDR
// end ;
31309: LD_VAR 0 3
31313: RET
// export function DangerInArea ( side , area ) ; begin
31314: LD_INT 0
31316: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
31317: LD_ADDR_VAR 0 3
31321: PUSH
31322: LD_VAR 0 2
31326: PPUSH
31327: LD_INT 81
31329: PUSH
31330: LD_VAR 0 1
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: PPUSH
31339: CALL_OW 70
31343: ST_TO_ADDR
// end ;
31344: LD_VAR 0 3
31348: RET
// export function IsExtension ( b ) ; begin
31349: LD_INT 0
31351: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
31352: LD_ADDR_VAR 0 2
31356: PUSH
31357: LD_VAR 0 1
31361: PUSH
31362: LD_INT 23
31364: PUSH
31365: LD_INT 20
31367: PUSH
31368: LD_INT 22
31370: PUSH
31371: LD_INT 17
31373: PUSH
31374: LD_INT 24
31376: PUSH
31377: LD_INT 21
31379: PUSH
31380: LD_INT 19
31382: PUSH
31383: LD_INT 16
31385: PUSH
31386: LD_INT 25
31388: PUSH
31389: LD_INT 18
31391: PUSH
31392: EMPTY
31393: LIST
31394: LIST
31395: LIST
31396: LIST
31397: LIST
31398: LIST
31399: LIST
31400: LIST
31401: LIST
31402: LIST
31403: IN
31404: ST_TO_ADDR
// end ;
31405: LD_VAR 0 2
31409: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
31410: LD_INT 0
31412: PPUSH
31413: PPUSH
31414: PPUSH
// result := [ ] ;
31415: LD_ADDR_VAR 0 3
31419: PUSH
31420: EMPTY
31421: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
31422: LD_ADDR_VAR 0 4
31426: PUSH
31427: LD_VAR 0 2
31431: PPUSH
31432: LD_INT 21
31434: PUSH
31435: LD_INT 3
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: PPUSH
31442: CALL_OW 70
31446: ST_TO_ADDR
// if not tmp then
31447: LD_VAR 0 4
31451: NOT
31452: IFFALSE 31456
// exit ;
31454: GO 31514
// for i in tmp do
31456: LD_ADDR_VAR 0 5
31460: PUSH
31461: LD_VAR 0 4
31465: PUSH
31466: FOR_IN
31467: IFFALSE 31502
// if GetBase ( i ) <> base then
31469: LD_VAR 0 5
31473: PPUSH
31474: CALL_OW 274
31478: PUSH
31479: LD_VAR 0 1
31483: NONEQUAL
31484: IFFALSE 31500
// ComLinkToBase ( base , i ) ;
31486: LD_VAR 0 1
31490: PPUSH
31491: LD_VAR 0 5
31495: PPUSH
31496: CALL_OW 169
31500: GO 31466
31502: POP
31503: POP
// result := tmp ;
31504: LD_ADDR_VAR 0 3
31508: PUSH
31509: LD_VAR 0 4
31513: ST_TO_ADDR
// end ;
31514: LD_VAR 0 3
31518: RET
// export function ComComplete ( unit , b ) ; var i ; begin
31519: LD_INT 0
31521: PPUSH
31522: PPUSH
// if BuildingStatus ( b ) = bs_build then
31523: LD_VAR 0 2
31527: PPUSH
31528: CALL_OW 461
31532: PUSH
31533: LD_INT 1
31535: EQUAL
31536: IFFALSE 31596
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
31538: LD_VAR 0 1
31542: PPUSH
31543: LD_STRING h
31545: PUSH
31546: LD_VAR 0 2
31550: PPUSH
31551: CALL_OW 250
31555: PUSH
31556: LD_VAR 0 2
31560: PPUSH
31561: CALL_OW 251
31565: PUSH
31566: LD_VAR 0 2
31570: PUSH
31571: LD_INT 0
31573: PUSH
31574: LD_INT 0
31576: PUSH
31577: LD_INT 0
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: LIST
31587: LIST
31588: PUSH
31589: EMPTY
31590: LIST
31591: PPUSH
31592: CALL_OW 446
// end ;
31596: LD_VAR 0 3
31600: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
31601: LD_INT 0
31603: PPUSH
31604: PPUSH
31605: PPUSH
31606: PPUSH
31607: PPUSH
31608: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
31609: LD_VAR 0 1
31613: NOT
31614: PUSH
31615: LD_VAR 0 1
31619: PPUSH
31620: CALL_OW 263
31624: PUSH
31625: LD_INT 2
31627: EQUAL
31628: NOT
31629: OR
31630: IFFALSE 31634
// exit ;
31632: GO 31950
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
31634: LD_ADDR_VAR 0 6
31638: PUSH
31639: LD_INT 22
31641: PUSH
31642: LD_VAR 0 1
31646: PPUSH
31647: CALL_OW 255
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: PUSH
31656: LD_INT 2
31658: PUSH
31659: LD_INT 30
31661: PUSH
31662: LD_INT 36
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: PUSH
31669: LD_INT 34
31671: PUSH
31672: LD_INT 31
31674: PUSH
31675: EMPTY
31676: LIST
31677: LIST
31678: PUSH
31679: EMPTY
31680: LIST
31681: LIST
31682: LIST
31683: PUSH
31684: EMPTY
31685: LIST
31686: LIST
31687: PPUSH
31688: CALL_OW 69
31692: ST_TO_ADDR
// if not tmp then
31693: LD_VAR 0 6
31697: NOT
31698: IFFALSE 31702
// exit ;
31700: GO 31950
// result := [ ] ;
31702: LD_ADDR_VAR 0 2
31706: PUSH
31707: EMPTY
31708: ST_TO_ADDR
// for i in tmp do
31709: LD_ADDR_VAR 0 3
31713: PUSH
31714: LD_VAR 0 6
31718: PUSH
31719: FOR_IN
31720: IFFALSE 31791
// begin t := UnitsInside ( i ) ;
31722: LD_ADDR_VAR 0 4
31726: PUSH
31727: LD_VAR 0 3
31731: PPUSH
31732: CALL_OW 313
31736: ST_TO_ADDR
// if t then
31737: LD_VAR 0 4
31741: IFFALSE 31789
// for j in t do
31743: LD_ADDR_VAR 0 7
31747: PUSH
31748: LD_VAR 0 4
31752: PUSH
31753: FOR_IN
31754: IFFALSE 31787
// result := Insert ( result , result + 1 , j ) ;
31756: LD_ADDR_VAR 0 2
31760: PUSH
31761: LD_VAR 0 2
31765: PPUSH
31766: LD_VAR 0 2
31770: PUSH
31771: LD_INT 1
31773: PLUS
31774: PPUSH
31775: LD_VAR 0 7
31779: PPUSH
31780: CALL_OW 2
31784: ST_TO_ADDR
31785: GO 31753
31787: POP
31788: POP
// end ;
31789: GO 31719
31791: POP
31792: POP
// if not result then
31793: LD_VAR 0 2
31797: NOT
31798: IFFALSE 31802
// exit ;
31800: GO 31950
// mech := result [ 1 ] ;
31802: LD_ADDR_VAR 0 5
31806: PUSH
31807: LD_VAR 0 2
31811: PUSH
31812: LD_INT 1
31814: ARRAY
31815: ST_TO_ADDR
// if result > 1 then
31816: LD_VAR 0 2
31820: PUSH
31821: LD_INT 1
31823: GREATER
31824: IFFALSE 31936
// for i = 2 to result do
31826: LD_ADDR_VAR 0 3
31830: PUSH
31831: DOUBLE
31832: LD_INT 2
31834: DEC
31835: ST_TO_ADDR
31836: LD_VAR 0 2
31840: PUSH
31841: FOR_TO
31842: IFFALSE 31934
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
31844: LD_ADDR_VAR 0 4
31848: PUSH
31849: LD_VAR 0 2
31853: PUSH
31854: LD_VAR 0 3
31858: ARRAY
31859: PPUSH
31860: LD_INT 3
31862: PPUSH
31863: CALL_OW 259
31867: PUSH
31868: LD_VAR 0 2
31872: PUSH
31873: LD_VAR 0 3
31877: ARRAY
31878: PPUSH
31879: CALL_OW 432
31883: MINUS
31884: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
31885: LD_VAR 0 4
31889: PUSH
31890: LD_VAR 0 5
31894: PPUSH
31895: LD_INT 3
31897: PPUSH
31898: CALL_OW 259
31902: PUSH
31903: LD_VAR 0 5
31907: PPUSH
31908: CALL_OW 432
31912: MINUS
31913: GREATEREQUAL
31914: IFFALSE 31932
// mech := result [ i ] ;
31916: LD_ADDR_VAR 0 5
31920: PUSH
31921: LD_VAR 0 2
31925: PUSH
31926: LD_VAR 0 3
31930: ARRAY
31931: ST_TO_ADDR
// end ;
31932: GO 31841
31934: POP
31935: POP
// ComLinkTo ( vehicle , mech ) ;
31936: LD_VAR 0 1
31940: PPUSH
31941: LD_VAR 0 5
31945: PPUSH
31946: CALL_OW 135
// end ;
31950: LD_VAR 0 2
31954: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
31955: LD_INT 0
31957: PPUSH
31958: PPUSH
31959: PPUSH
31960: PPUSH
31961: PPUSH
31962: PPUSH
31963: PPUSH
31964: PPUSH
31965: PPUSH
31966: PPUSH
31967: PPUSH
31968: PPUSH
31969: PPUSH
// result := [ ] ;
31970: LD_ADDR_VAR 0 7
31974: PUSH
31975: EMPTY
31976: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
31977: LD_VAR 0 1
31981: PPUSH
31982: CALL_OW 266
31986: PUSH
31987: LD_INT 0
31989: PUSH
31990: LD_INT 1
31992: PUSH
31993: EMPTY
31994: LIST
31995: LIST
31996: IN
31997: NOT
31998: IFFALSE 32002
// exit ;
32000: GO 33633
// if name then
32002: LD_VAR 0 3
32006: IFFALSE 32022
// SetBName ( base_dep , name ) ;
32008: LD_VAR 0 1
32012: PPUSH
32013: LD_VAR 0 3
32017: PPUSH
32018: CALL_OW 500
// base := GetBase ( base_dep ) ;
32022: LD_ADDR_VAR 0 15
32026: PUSH
32027: LD_VAR 0 1
32031: PPUSH
32032: CALL_OW 274
32036: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
32037: LD_ADDR_VAR 0 16
32041: PUSH
32042: LD_VAR 0 1
32046: PPUSH
32047: CALL_OW 255
32051: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
32052: LD_ADDR_VAR 0 17
32056: PUSH
32057: LD_VAR 0 1
32061: PPUSH
32062: CALL_OW 248
32066: ST_TO_ADDR
// if sources then
32067: LD_VAR 0 5
32071: IFFALSE 32118
// for i = 1 to 3 do
32073: LD_ADDR_VAR 0 8
32077: PUSH
32078: DOUBLE
32079: LD_INT 1
32081: DEC
32082: ST_TO_ADDR
32083: LD_INT 3
32085: PUSH
32086: FOR_TO
32087: IFFALSE 32116
// AddResourceType ( base , i , sources [ i ] ) ;
32089: LD_VAR 0 15
32093: PPUSH
32094: LD_VAR 0 8
32098: PPUSH
32099: LD_VAR 0 5
32103: PUSH
32104: LD_VAR 0 8
32108: ARRAY
32109: PPUSH
32110: CALL_OW 276
32114: GO 32086
32116: POP
32117: POP
// buildings := GetBaseBuildings ( base , area ) ;
32118: LD_ADDR_VAR 0 18
32122: PUSH
32123: LD_VAR 0 15
32127: PPUSH
32128: LD_VAR 0 2
32132: PPUSH
32133: CALL 31410 0 2
32137: ST_TO_ADDR
// InitHc ;
32138: CALL_OW 19
// InitUc ;
32142: CALL_OW 18
// uc_side := side ;
32146: LD_ADDR_OWVAR 20
32150: PUSH
32151: LD_VAR 0 16
32155: ST_TO_ADDR
// uc_nation := nation ;
32156: LD_ADDR_OWVAR 21
32160: PUSH
32161: LD_VAR 0 17
32165: ST_TO_ADDR
// if buildings then
32166: LD_VAR 0 18
32170: IFFALSE 33492
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
32172: LD_ADDR_VAR 0 19
32176: PUSH
32177: LD_VAR 0 18
32181: PPUSH
32182: LD_INT 2
32184: PUSH
32185: LD_INT 30
32187: PUSH
32188: LD_INT 29
32190: PUSH
32191: EMPTY
32192: LIST
32193: LIST
32194: PUSH
32195: LD_INT 30
32197: PUSH
32198: LD_INT 30
32200: PUSH
32201: EMPTY
32202: LIST
32203: LIST
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: LIST
32209: PPUSH
32210: CALL_OW 72
32214: ST_TO_ADDR
// if tmp then
32215: LD_VAR 0 19
32219: IFFALSE 32267
// for i in tmp do
32221: LD_ADDR_VAR 0 8
32225: PUSH
32226: LD_VAR 0 19
32230: PUSH
32231: FOR_IN
32232: IFFALSE 32265
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
32234: LD_VAR 0 8
32238: PPUSH
32239: CALL_OW 250
32243: PPUSH
32244: LD_VAR 0 8
32248: PPUSH
32249: CALL_OW 251
32253: PPUSH
32254: LD_VAR 0 16
32258: PPUSH
32259: CALL_OW 441
32263: GO 32231
32265: POP
32266: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
32267: LD_VAR 0 18
32271: PPUSH
32272: LD_INT 2
32274: PUSH
32275: LD_INT 30
32277: PUSH
32278: LD_INT 32
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: PUSH
32285: LD_INT 30
32287: PUSH
32288: LD_INT 33
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: LIST
32299: PPUSH
32300: CALL_OW 72
32304: IFFALSE 32392
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
32306: LD_ADDR_VAR 0 8
32310: PUSH
32311: LD_VAR 0 18
32315: PPUSH
32316: LD_INT 2
32318: PUSH
32319: LD_INT 30
32321: PUSH
32322: LD_INT 32
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: PUSH
32329: LD_INT 30
32331: PUSH
32332: LD_INT 33
32334: PUSH
32335: EMPTY
32336: LIST
32337: LIST
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: LIST
32343: PPUSH
32344: CALL_OW 72
32348: PUSH
32349: FOR_IN
32350: IFFALSE 32390
// begin if not GetBWeapon ( i ) then
32352: LD_VAR 0 8
32356: PPUSH
32357: CALL_OW 269
32361: NOT
32362: IFFALSE 32388
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
32364: LD_VAR 0 8
32368: PPUSH
32369: LD_VAR 0 8
32373: PPUSH
32374: LD_VAR 0 2
32378: PPUSH
32379: CALL 33638 0 2
32383: PPUSH
32384: CALL_OW 431
// end ;
32388: GO 32349
32390: POP
32391: POP
// end ; for i = 1 to personel do
32392: LD_ADDR_VAR 0 8
32396: PUSH
32397: DOUBLE
32398: LD_INT 1
32400: DEC
32401: ST_TO_ADDR
32402: LD_VAR 0 6
32406: PUSH
32407: FOR_TO
32408: IFFALSE 33472
// begin if i > 4 then
32410: LD_VAR 0 8
32414: PUSH
32415: LD_INT 4
32417: GREATER
32418: IFFALSE 32422
// break ;
32420: GO 33472
// case i of 1 :
32422: LD_VAR 0 8
32426: PUSH
32427: LD_INT 1
32429: DOUBLE
32430: EQUAL
32431: IFTRUE 32435
32433: GO 32515
32435: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
32436: LD_ADDR_VAR 0 12
32440: PUSH
32441: LD_VAR 0 18
32445: PPUSH
32446: LD_INT 22
32448: PUSH
32449: LD_VAR 0 16
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PUSH
32458: LD_INT 58
32460: PUSH
32461: EMPTY
32462: LIST
32463: PUSH
32464: LD_INT 2
32466: PUSH
32467: LD_INT 30
32469: PUSH
32470: LD_INT 32
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: PUSH
32477: LD_INT 30
32479: PUSH
32480: LD_INT 4
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 30
32489: PUSH
32490: LD_INT 5
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: PUSH
32497: EMPTY
32498: LIST
32499: LIST
32500: LIST
32501: LIST
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: LIST
32507: PPUSH
32508: CALL_OW 72
32512: ST_TO_ADDR
32513: GO 32737
32515: LD_INT 2
32517: DOUBLE
32518: EQUAL
32519: IFTRUE 32523
32521: GO 32585
32523: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
32524: LD_ADDR_VAR 0 12
32528: PUSH
32529: LD_VAR 0 18
32533: PPUSH
32534: LD_INT 22
32536: PUSH
32537: LD_VAR 0 16
32541: PUSH
32542: EMPTY
32543: LIST
32544: LIST
32545: PUSH
32546: LD_INT 2
32548: PUSH
32549: LD_INT 30
32551: PUSH
32552: LD_INT 0
32554: PUSH
32555: EMPTY
32556: LIST
32557: LIST
32558: PUSH
32559: LD_INT 30
32561: PUSH
32562: LD_INT 1
32564: PUSH
32565: EMPTY
32566: LIST
32567: LIST
32568: PUSH
32569: EMPTY
32570: LIST
32571: LIST
32572: LIST
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PPUSH
32578: CALL_OW 72
32582: ST_TO_ADDR
32583: GO 32737
32585: LD_INT 3
32587: DOUBLE
32588: EQUAL
32589: IFTRUE 32593
32591: GO 32655
32593: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
32594: LD_ADDR_VAR 0 12
32598: PUSH
32599: LD_VAR 0 18
32603: PPUSH
32604: LD_INT 22
32606: PUSH
32607: LD_VAR 0 16
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: PUSH
32616: LD_INT 2
32618: PUSH
32619: LD_INT 30
32621: PUSH
32622: LD_INT 2
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: PUSH
32629: LD_INT 30
32631: PUSH
32632: LD_INT 3
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: PUSH
32639: EMPTY
32640: LIST
32641: LIST
32642: LIST
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: PPUSH
32648: CALL_OW 72
32652: ST_TO_ADDR
32653: GO 32737
32655: LD_INT 4
32657: DOUBLE
32658: EQUAL
32659: IFTRUE 32663
32661: GO 32736
32663: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
32664: LD_ADDR_VAR 0 12
32668: PUSH
32669: LD_VAR 0 18
32673: PPUSH
32674: LD_INT 22
32676: PUSH
32677: LD_VAR 0 16
32681: PUSH
32682: EMPTY
32683: LIST
32684: LIST
32685: PUSH
32686: LD_INT 2
32688: PUSH
32689: LD_INT 30
32691: PUSH
32692: LD_INT 6
32694: PUSH
32695: EMPTY
32696: LIST
32697: LIST
32698: PUSH
32699: LD_INT 30
32701: PUSH
32702: LD_INT 7
32704: PUSH
32705: EMPTY
32706: LIST
32707: LIST
32708: PUSH
32709: LD_INT 30
32711: PUSH
32712: LD_INT 8
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: PUSH
32719: EMPTY
32720: LIST
32721: LIST
32722: LIST
32723: LIST
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: PPUSH
32729: CALL_OW 72
32733: ST_TO_ADDR
32734: GO 32737
32736: POP
// if i = 1 then
32737: LD_VAR 0 8
32741: PUSH
32742: LD_INT 1
32744: EQUAL
32745: IFFALSE 32856
// begin tmp := [ ] ;
32747: LD_ADDR_VAR 0 19
32751: PUSH
32752: EMPTY
32753: ST_TO_ADDR
// for j in f do
32754: LD_ADDR_VAR 0 9
32758: PUSH
32759: LD_VAR 0 12
32763: PUSH
32764: FOR_IN
32765: IFFALSE 32838
// if GetBType ( j ) = b_bunker then
32767: LD_VAR 0 9
32771: PPUSH
32772: CALL_OW 266
32776: PUSH
32777: LD_INT 32
32779: EQUAL
32780: IFFALSE 32807
// tmp := Insert ( tmp , 1 , j ) else
32782: LD_ADDR_VAR 0 19
32786: PUSH
32787: LD_VAR 0 19
32791: PPUSH
32792: LD_INT 1
32794: PPUSH
32795: LD_VAR 0 9
32799: PPUSH
32800: CALL_OW 2
32804: ST_TO_ADDR
32805: GO 32836
// tmp := Insert ( tmp , tmp + 1 , j ) ;
32807: LD_ADDR_VAR 0 19
32811: PUSH
32812: LD_VAR 0 19
32816: PPUSH
32817: LD_VAR 0 19
32821: PUSH
32822: LD_INT 1
32824: PLUS
32825: PPUSH
32826: LD_VAR 0 9
32830: PPUSH
32831: CALL_OW 2
32835: ST_TO_ADDR
32836: GO 32764
32838: POP
32839: POP
// if tmp then
32840: LD_VAR 0 19
32844: IFFALSE 32856
// f := tmp ;
32846: LD_ADDR_VAR 0 12
32850: PUSH
32851: LD_VAR 0 19
32855: ST_TO_ADDR
// end ; x := personel [ i ] ;
32856: LD_ADDR_VAR 0 13
32860: PUSH
32861: LD_VAR 0 6
32865: PUSH
32866: LD_VAR 0 8
32870: ARRAY
32871: ST_TO_ADDR
// if x = - 1 then
32872: LD_VAR 0 13
32876: PUSH
32877: LD_INT 1
32879: NEG
32880: EQUAL
32881: IFFALSE 33090
// begin for j in f do
32883: LD_ADDR_VAR 0 9
32887: PUSH
32888: LD_VAR 0 12
32892: PUSH
32893: FOR_IN
32894: IFFALSE 33086
// repeat InitHc ;
32896: CALL_OW 19
// if GetBType ( j ) = b_barracks then
32900: LD_VAR 0 9
32904: PPUSH
32905: CALL_OW 266
32909: PUSH
32910: LD_INT 5
32912: EQUAL
32913: IFFALSE 32983
// begin if UnitsInside ( j ) < 3 then
32915: LD_VAR 0 9
32919: PPUSH
32920: CALL_OW 313
32924: PUSH
32925: LD_INT 3
32927: LESS
32928: IFFALSE 32964
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32930: LD_INT 0
32932: PPUSH
32933: LD_INT 5
32935: PUSH
32936: LD_INT 8
32938: PUSH
32939: LD_INT 9
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: LIST
32946: PUSH
32947: LD_VAR 0 17
32951: ARRAY
32952: PPUSH
32953: LD_VAR 0 4
32957: PPUSH
32958: CALL_OW 380
32962: GO 32981
// PrepareHuman ( false , i , skill ) ;
32964: LD_INT 0
32966: PPUSH
32967: LD_VAR 0 8
32971: PPUSH
32972: LD_VAR 0 4
32976: PPUSH
32977: CALL_OW 380
// end else
32981: GO 33000
// PrepareHuman ( false , i , skill ) ;
32983: LD_INT 0
32985: PPUSH
32986: LD_VAR 0 8
32990: PPUSH
32991: LD_VAR 0 4
32995: PPUSH
32996: CALL_OW 380
// un := CreateHuman ;
33000: LD_ADDR_VAR 0 14
33004: PUSH
33005: CALL_OW 44
33009: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33010: LD_ADDR_VAR 0 7
33014: PUSH
33015: LD_VAR 0 7
33019: PPUSH
33020: LD_INT 1
33022: PPUSH
33023: LD_VAR 0 14
33027: PPUSH
33028: CALL_OW 2
33032: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
33033: LD_VAR 0 14
33037: PPUSH
33038: LD_VAR 0 9
33042: PPUSH
33043: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
33047: LD_VAR 0 9
33051: PPUSH
33052: CALL_OW 313
33056: PUSH
33057: LD_INT 6
33059: EQUAL
33060: PUSH
33061: LD_VAR 0 9
33065: PPUSH
33066: CALL_OW 266
33070: PUSH
33071: LD_INT 32
33073: PUSH
33074: LD_INT 31
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: IN
33081: OR
33082: IFFALSE 32896
33084: GO 32893
33086: POP
33087: POP
// end else
33088: GO 33470
// for j = 1 to x do
33090: LD_ADDR_VAR 0 9
33094: PUSH
33095: DOUBLE
33096: LD_INT 1
33098: DEC
33099: ST_TO_ADDR
33100: LD_VAR 0 13
33104: PUSH
33105: FOR_TO
33106: IFFALSE 33468
// begin InitHc ;
33108: CALL_OW 19
// if not f then
33112: LD_VAR 0 12
33116: NOT
33117: IFFALSE 33206
// begin PrepareHuman ( false , i , skill ) ;
33119: LD_INT 0
33121: PPUSH
33122: LD_VAR 0 8
33126: PPUSH
33127: LD_VAR 0 4
33131: PPUSH
33132: CALL_OW 380
// un := CreateHuman ;
33136: LD_ADDR_VAR 0 14
33140: PUSH
33141: CALL_OW 44
33145: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33146: LD_ADDR_VAR 0 7
33150: PUSH
33151: LD_VAR 0 7
33155: PPUSH
33156: LD_INT 1
33158: PPUSH
33159: LD_VAR 0 14
33163: PPUSH
33164: CALL_OW 2
33168: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33169: LD_VAR 0 14
33173: PPUSH
33174: LD_VAR 0 1
33178: PPUSH
33179: CALL_OW 250
33183: PPUSH
33184: LD_VAR 0 1
33188: PPUSH
33189: CALL_OW 251
33193: PPUSH
33194: LD_INT 10
33196: PPUSH
33197: LD_INT 0
33199: PPUSH
33200: CALL_OW 50
// continue ;
33204: GO 33105
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
33206: LD_VAR 0 12
33210: PUSH
33211: LD_INT 1
33213: ARRAY
33214: PPUSH
33215: CALL_OW 313
33219: PUSH
33220: LD_VAR 0 12
33224: PUSH
33225: LD_INT 1
33227: ARRAY
33228: PPUSH
33229: CALL_OW 266
33233: PUSH
33234: LD_INT 32
33236: PUSH
33237: LD_INT 31
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: IN
33244: AND
33245: PUSH
33246: LD_VAR 0 12
33250: PUSH
33251: LD_INT 1
33253: ARRAY
33254: PPUSH
33255: CALL_OW 313
33259: PUSH
33260: LD_INT 6
33262: EQUAL
33263: OR
33264: IFFALSE 33284
// f := Delete ( f , 1 ) ;
33266: LD_ADDR_VAR 0 12
33270: PUSH
33271: LD_VAR 0 12
33275: PPUSH
33276: LD_INT 1
33278: PPUSH
33279: CALL_OW 3
33283: ST_TO_ADDR
// if not f then
33284: LD_VAR 0 12
33288: NOT
33289: IFFALSE 33307
// begin x := x + 2 ;
33291: LD_ADDR_VAR 0 13
33295: PUSH
33296: LD_VAR 0 13
33300: PUSH
33301: LD_INT 2
33303: PLUS
33304: ST_TO_ADDR
// continue ;
33305: GO 33105
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
33307: LD_VAR 0 12
33311: PUSH
33312: LD_INT 1
33314: ARRAY
33315: PPUSH
33316: CALL_OW 266
33320: PUSH
33321: LD_INT 5
33323: EQUAL
33324: IFFALSE 33398
// begin if UnitsInside ( f [ 1 ] ) < 3 then
33326: LD_VAR 0 12
33330: PUSH
33331: LD_INT 1
33333: ARRAY
33334: PPUSH
33335: CALL_OW 313
33339: PUSH
33340: LD_INT 3
33342: LESS
33343: IFFALSE 33379
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33345: LD_INT 0
33347: PPUSH
33348: LD_INT 5
33350: PUSH
33351: LD_INT 8
33353: PUSH
33354: LD_INT 9
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: LIST
33361: PUSH
33362: LD_VAR 0 17
33366: ARRAY
33367: PPUSH
33368: LD_VAR 0 4
33372: PPUSH
33373: CALL_OW 380
33377: GO 33396
// PrepareHuman ( false , i , skill ) ;
33379: LD_INT 0
33381: PPUSH
33382: LD_VAR 0 8
33386: PPUSH
33387: LD_VAR 0 4
33391: PPUSH
33392: CALL_OW 380
// end else
33396: GO 33415
// PrepareHuman ( false , i , skill ) ;
33398: LD_INT 0
33400: PPUSH
33401: LD_VAR 0 8
33405: PPUSH
33406: LD_VAR 0 4
33410: PPUSH
33411: CALL_OW 380
// un := CreateHuman ;
33415: LD_ADDR_VAR 0 14
33419: PUSH
33420: CALL_OW 44
33424: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33425: LD_ADDR_VAR 0 7
33429: PUSH
33430: LD_VAR 0 7
33434: PPUSH
33435: LD_INT 1
33437: PPUSH
33438: LD_VAR 0 14
33442: PPUSH
33443: CALL_OW 2
33447: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
33448: LD_VAR 0 14
33452: PPUSH
33453: LD_VAR 0 12
33457: PUSH
33458: LD_INT 1
33460: ARRAY
33461: PPUSH
33462: CALL_OW 52
// end ;
33466: GO 33105
33468: POP
33469: POP
// end ;
33470: GO 32407
33472: POP
33473: POP
// result := result ^ buildings ;
33474: LD_ADDR_VAR 0 7
33478: PUSH
33479: LD_VAR 0 7
33483: PUSH
33484: LD_VAR 0 18
33488: ADD
33489: ST_TO_ADDR
// end else
33490: GO 33633
// begin for i = 1 to personel do
33492: LD_ADDR_VAR 0 8
33496: PUSH
33497: DOUBLE
33498: LD_INT 1
33500: DEC
33501: ST_TO_ADDR
33502: LD_VAR 0 6
33506: PUSH
33507: FOR_TO
33508: IFFALSE 33631
// begin if i > 4 then
33510: LD_VAR 0 8
33514: PUSH
33515: LD_INT 4
33517: GREATER
33518: IFFALSE 33522
// break ;
33520: GO 33631
// x := personel [ i ] ;
33522: LD_ADDR_VAR 0 13
33526: PUSH
33527: LD_VAR 0 6
33531: PUSH
33532: LD_VAR 0 8
33536: ARRAY
33537: ST_TO_ADDR
// if x = - 1 then
33538: LD_VAR 0 13
33542: PUSH
33543: LD_INT 1
33545: NEG
33546: EQUAL
33547: IFFALSE 33551
// continue ;
33549: GO 33507
// PrepareHuman ( false , i , skill ) ;
33551: LD_INT 0
33553: PPUSH
33554: LD_VAR 0 8
33558: PPUSH
33559: LD_VAR 0 4
33563: PPUSH
33564: CALL_OW 380
// un := CreateHuman ;
33568: LD_ADDR_VAR 0 14
33572: PUSH
33573: CALL_OW 44
33577: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33578: LD_VAR 0 14
33582: PPUSH
33583: LD_VAR 0 1
33587: PPUSH
33588: CALL_OW 250
33592: PPUSH
33593: LD_VAR 0 1
33597: PPUSH
33598: CALL_OW 251
33602: PPUSH
33603: LD_INT 10
33605: PPUSH
33606: LD_INT 0
33608: PPUSH
33609: CALL_OW 50
// result := result ^ un ;
33613: LD_ADDR_VAR 0 7
33617: PUSH
33618: LD_VAR 0 7
33622: PUSH
33623: LD_VAR 0 14
33627: ADD
33628: ST_TO_ADDR
// end ;
33629: GO 33507
33631: POP
33632: POP
// end ; end ;
33633: LD_VAR 0 7
33637: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
33638: LD_INT 0
33640: PPUSH
33641: PPUSH
33642: PPUSH
33643: PPUSH
33644: PPUSH
33645: PPUSH
33646: PPUSH
33647: PPUSH
33648: PPUSH
33649: PPUSH
33650: PPUSH
33651: PPUSH
33652: PPUSH
33653: PPUSH
33654: PPUSH
33655: PPUSH
// result := false ;
33656: LD_ADDR_VAR 0 3
33660: PUSH
33661: LD_INT 0
33663: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
33664: LD_VAR 0 1
33668: NOT
33669: PUSH
33670: LD_VAR 0 1
33674: PPUSH
33675: CALL_OW 266
33679: PUSH
33680: LD_INT 32
33682: PUSH
33683: LD_INT 33
33685: PUSH
33686: EMPTY
33687: LIST
33688: LIST
33689: IN
33690: NOT
33691: OR
33692: IFFALSE 33696
// exit ;
33694: GO 34832
// nat := GetNation ( tower ) ;
33696: LD_ADDR_VAR 0 12
33700: PUSH
33701: LD_VAR 0 1
33705: PPUSH
33706: CALL_OW 248
33710: ST_TO_ADDR
// side := GetSide ( tower ) ;
33711: LD_ADDR_VAR 0 16
33715: PUSH
33716: LD_VAR 0 1
33720: PPUSH
33721: CALL_OW 255
33725: ST_TO_ADDR
// x := GetX ( tower ) ;
33726: LD_ADDR_VAR 0 10
33730: PUSH
33731: LD_VAR 0 1
33735: PPUSH
33736: CALL_OW 250
33740: ST_TO_ADDR
// y := GetY ( tower ) ;
33741: LD_ADDR_VAR 0 11
33745: PUSH
33746: LD_VAR 0 1
33750: PPUSH
33751: CALL_OW 251
33755: ST_TO_ADDR
// if not x or not y then
33756: LD_VAR 0 10
33760: NOT
33761: PUSH
33762: LD_VAR 0 11
33766: NOT
33767: OR
33768: IFFALSE 33772
// exit ;
33770: GO 34832
// weapon := 0 ;
33772: LD_ADDR_VAR 0 18
33776: PUSH
33777: LD_INT 0
33779: ST_TO_ADDR
// fac_list := [ ] ;
33780: LD_ADDR_VAR 0 17
33784: PUSH
33785: EMPTY
33786: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
33787: LD_ADDR_VAR 0 6
33791: PUSH
33792: LD_VAR 0 1
33796: PPUSH
33797: CALL_OW 274
33801: PPUSH
33802: LD_VAR 0 2
33806: PPUSH
33807: CALL 31410 0 2
33811: PPUSH
33812: LD_INT 30
33814: PUSH
33815: LD_INT 3
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: PPUSH
33822: CALL_OW 72
33826: ST_TO_ADDR
// if not factories then
33827: LD_VAR 0 6
33831: NOT
33832: IFFALSE 33836
// exit ;
33834: GO 34832
// for i in factories do
33836: LD_ADDR_VAR 0 8
33840: PUSH
33841: LD_VAR 0 6
33845: PUSH
33846: FOR_IN
33847: IFFALSE 33872
// fac_list := fac_list union AvailableWeaponList ( i ) ;
33849: LD_ADDR_VAR 0 17
33853: PUSH
33854: LD_VAR 0 17
33858: PUSH
33859: LD_VAR 0 8
33863: PPUSH
33864: CALL_OW 478
33868: UNION
33869: ST_TO_ADDR
33870: GO 33846
33872: POP
33873: POP
// if not fac_list then
33874: LD_VAR 0 17
33878: NOT
33879: IFFALSE 33883
// exit ;
33881: GO 34832
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
33883: LD_ADDR_VAR 0 5
33887: PUSH
33888: LD_INT 4
33890: PUSH
33891: LD_INT 5
33893: PUSH
33894: LD_INT 9
33896: PUSH
33897: LD_INT 10
33899: PUSH
33900: LD_INT 6
33902: PUSH
33903: LD_INT 7
33905: PUSH
33906: LD_INT 11
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: LIST
33916: LIST
33917: PUSH
33918: LD_INT 27
33920: PUSH
33921: LD_INT 28
33923: PUSH
33924: LD_INT 26
33926: PUSH
33927: LD_INT 30
33929: PUSH
33930: EMPTY
33931: LIST
33932: LIST
33933: LIST
33934: LIST
33935: PUSH
33936: LD_INT 43
33938: PUSH
33939: LD_INT 44
33941: PUSH
33942: LD_INT 46
33944: PUSH
33945: LD_INT 45
33947: PUSH
33948: LD_INT 47
33950: PUSH
33951: LD_INT 49
33953: PUSH
33954: EMPTY
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: LIST
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: LIST
33966: PUSH
33967: LD_VAR 0 12
33971: ARRAY
33972: ST_TO_ADDR
// for i in list do
33973: LD_ADDR_VAR 0 8
33977: PUSH
33978: LD_VAR 0 5
33982: PUSH
33983: FOR_IN
33984: IFFALSE 34017
// if not i in fac_list then
33986: LD_VAR 0 8
33990: PUSH
33991: LD_VAR 0 17
33995: IN
33996: NOT
33997: IFFALSE 34015
// list := list diff i ;
33999: LD_ADDR_VAR 0 5
34003: PUSH
34004: LD_VAR 0 5
34008: PUSH
34009: LD_VAR 0 8
34013: DIFF
34014: ST_TO_ADDR
34015: GO 33983
34017: POP
34018: POP
// if not list then
34019: LD_VAR 0 5
34023: NOT
34024: IFFALSE 34028
// exit ;
34026: GO 34832
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
34028: LD_VAR 0 12
34032: PUSH
34033: LD_INT 3
34035: EQUAL
34036: PUSH
34037: LD_INT 49
34039: PUSH
34040: LD_VAR 0 5
34044: IN
34045: AND
34046: PUSH
34047: LD_INT 31
34049: PPUSH
34050: LD_VAR 0 16
34054: PPUSH
34055: CALL_OW 321
34059: PUSH
34060: LD_INT 2
34062: EQUAL
34063: AND
34064: IFFALSE 34124
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
34066: LD_INT 22
34068: PUSH
34069: LD_VAR 0 16
34073: PUSH
34074: EMPTY
34075: LIST
34076: LIST
34077: PUSH
34078: LD_INT 35
34080: PUSH
34081: LD_INT 49
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: PUSH
34088: LD_INT 91
34090: PUSH
34091: LD_VAR 0 1
34095: PUSH
34096: LD_INT 10
34098: PUSH
34099: EMPTY
34100: LIST
34101: LIST
34102: LIST
34103: PUSH
34104: EMPTY
34105: LIST
34106: LIST
34107: LIST
34108: PPUSH
34109: CALL_OW 69
34113: NOT
34114: IFFALSE 34124
// weapon := ru_time_lapser ;
34116: LD_ADDR_VAR 0 18
34120: PUSH
34121: LD_INT 49
34123: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
34124: LD_VAR 0 12
34128: PUSH
34129: LD_INT 1
34131: PUSH
34132: LD_INT 2
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: IN
34139: PUSH
34140: LD_INT 11
34142: PUSH
34143: LD_VAR 0 5
34147: IN
34148: PUSH
34149: LD_INT 30
34151: PUSH
34152: LD_VAR 0 5
34156: IN
34157: OR
34158: AND
34159: PUSH
34160: LD_INT 6
34162: PPUSH
34163: LD_VAR 0 16
34167: PPUSH
34168: CALL_OW 321
34172: PUSH
34173: LD_INT 2
34175: EQUAL
34176: AND
34177: IFFALSE 34342
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
34179: LD_INT 22
34181: PUSH
34182: LD_VAR 0 16
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: PUSH
34191: LD_INT 2
34193: PUSH
34194: LD_INT 35
34196: PUSH
34197: LD_INT 11
34199: PUSH
34200: EMPTY
34201: LIST
34202: LIST
34203: PUSH
34204: LD_INT 35
34206: PUSH
34207: LD_INT 30
34209: PUSH
34210: EMPTY
34211: LIST
34212: LIST
34213: PUSH
34214: EMPTY
34215: LIST
34216: LIST
34217: LIST
34218: PUSH
34219: LD_INT 91
34221: PUSH
34222: LD_VAR 0 1
34226: PUSH
34227: LD_INT 18
34229: PUSH
34230: EMPTY
34231: LIST
34232: LIST
34233: LIST
34234: PUSH
34235: EMPTY
34236: LIST
34237: LIST
34238: LIST
34239: PPUSH
34240: CALL_OW 69
34244: NOT
34245: PUSH
34246: LD_INT 22
34248: PUSH
34249: LD_VAR 0 16
34253: PUSH
34254: EMPTY
34255: LIST
34256: LIST
34257: PUSH
34258: LD_INT 2
34260: PUSH
34261: LD_INT 30
34263: PUSH
34264: LD_INT 32
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: PUSH
34271: LD_INT 30
34273: PUSH
34274: LD_INT 33
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: PUSH
34281: EMPTY
34282: LIST
34283: LIST
34284: LIST
34285: PUSH
34286: LD_INT 91
34288: PUSH
34289: LD_VAR 0 1
34293: PUSH
34294: LD_INT 12
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: LIST
34301: PUSH
34302: EMPTY
34303: LIST
34304: LIST
34305: LIST
34306: PUSH
34307: EMPTY
34308: LIST
34309: PPUSH
34310: CALL_OW 69
34314: PUSH
34315: LD_INT 2
34317: GREATER
34318: AND
34319: IFFALSE 34342
// weapon := [ us_radar , ar_radar ] [ nat ] ;
34321: LD_ADDR_VAR 0 18
34325: PUSH
34326: LD_INT 11
34328: PUSH
34329: LD_INT 30
34331: PUSH
34332: EMPTY
34333: LIST
34334: LIST
34335: PUSH
34336: LD_VAR 0 12
34340: ARRAY
34341: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
34342: LD_VAR 0 18
34346: NOT
34347: PUSH
34348: LD_INT 40
34350: PPUSH
34351: LD_VAR 0 16
34355: PPUSH
34356: CALL_OW 321
34360: PUSH
34361: LD_INT 2
34363: EQUAL
34364: AND
34365: PUSH
34366: LD_INT 7
34368: PUSH
34369: LD_VAR 0 5
34373: IN
34374: PUSH
34375: LD_INT 28
34377: PUSH
34378: LD_VAR 0 5
34382: IN
34383: OR
34384: PUSH
34385: LD_INT 45
34387: PUSH
34388: LD_VAR 0 5
34392: IN
34393: OR
34394: AND
34395: IFFALSE 34649
// begin hex := GetHexInfo ( x , y ) ;
34397: LD_ADDR_VAR 0 4
34401: PUSH
34402: LD_VAR 0 10
34406: PPUSH
34407: LD_VAR 0 11
34411: PPUSH
34412: CALL_OW 546
34416: ST_TO_ADDR
// if hex [ 1 ] then
34417: LD_VAR 0 4
34421: PUSH
34422: LD_INT 1
34424: ARRAY
34425: IFFALSE 34429
// exit ;
34427: GO 34832
// height := hex [ 2 ] ;
34429: LD_ADDR_VAR 0 15
34433: PUSH
34434: LD_VAR 0 4
34438: PUSH
34439: LD_INT 2
34441: ARRAY
34442: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
34443: LD_ADDR_VAR 0 14
34447: PUSH
34448: LD_INT 0
34450: PUSH
34451: LD_INT 2
34453: PUSH
34454: LD_INT 3
34456: PUSH
34457: LD_INT 5
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: LIST
34464: LIST
34465: ST_TO_ADDR
// for i in tmp do
34466: LD_ADDR_VAR 0 8
34470: PUSH
34471: LD_VAR 0 14
34475: PUSH
34476: FOR_IN
34477: IFFALSE 34647
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
34479: LD_ADDR_VAR 0 9
34483: PUSH
34484: LD_VAR 0 10
34488: PPUSH
34489: LD_VAR 0 8
34493: PPUSH
34494: LD_INT 5
34496: PPUSH
34497: CALL_OW 272
34501: PUSH
34502: LD_VAR 0 11
34506: PPUSH
34507: LD_VAR 0 8
34511: PPUSH
34512: LD_INT 5
34514: PPUSH
34515: CALL_OW 273
34519: PUSH
34520: EMPTY
34521: LIST
34522: LIST
34523: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
34524: LD_VAR 0 9
34528: PUSH
34529: LD_INT 1
34531: ARRAY
34532: PPUSH
34533: LD_VAR 0 9
34537: PUSH
34538: LD_INT 2
34540: ARRAY
34541: PPUSH
34542: CALL_OW 488
34546: IFFALSE 34645
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
34548: LD_ADDR_VAR 0 4
34552: PUSH
34553: LD_VAR 0 9
34557: PUSH
34558: LD_INT 1
34560: ARRAY
34561: PPUSH
34562: LD_VAR 0 9
34566: PUSH
34567: LD_INT 2
34569: ARRAY
34570: PPUSH
34571: CALL_OW 546
34575: ST_TO_ADDR
// if hex [ 1 ] then
34576: LD_VAR 0 4
34580: PUSH
34581: LD_INT 1
34583: ARRAY
34584: IFFALSE 34588
// continue ;
34586: GO 34476
// h := hex [ 2 ] ;
34588: LD_ADDR_VAR 0 13
34592: PUSH
34593: LD_VAR 0 4
34597: PUSH
34598: LD_INT 2
34600: ARRAY
34601: ST_TO_ADDR
// if h + 7 < height then
34602: LD_VAR 0 13
34606: PUSH
34607: LD_INT 7
34609: PLUS
34610: PUSH
34611: LD_VAR 0 15
34615: LESS
34616: IFFALSE 34645
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
34618: LD_ADDR_VAR 0 18
34622: PUSH
34623: LD_INT 7
34625: PUSH
34626: LD_INT 28
34628: PUSH
34629: LD_INT 45
34631: PUSH
34632: EMPTY
34633: LIST
34634: LIST
34635: LIST
34636: PUSH
34637: LD_VAR 0 12
34641: ARRAY
34642: ST_TO_ADDR
// break ;
34643: GO 34647
// end ; end ; end ;
34645: GO 34476
34647: POP
34648: POP
// end ; if not weapon then
34649: LD_VAR 0 18
34653: NOT
34654: IFFALSE 34714
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
34656: LD_ADDR_VAR 0 5
34660: PUSH
34661: LD_VAR 0 5
34665: PUSH
34666: LD_INT 11
34668: PUSH
34669: LD_INT 30
34671: PUSH
34672: LD_INT 49
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: LIST
34679: DIFF
34680: ST_TO_ADDR
// if not list then
34681: LD_VAR 0 5
34685: NOT
34686: IFFALSE 34690
// exit ;
34688: GO 34832
// weapon := list [ rand ( 1 , list ) ] ;
34690: LD_ADDR_VAR 0 18
34694: PUSH
34695: LD_VAR 0 5
34699: PUSH
34700: LD_INT 1
34702: PPUSH
34703: LD_VAR 0 5
34707: PPUSH
34708: CALL_OW 12
34712: ARRAY
34713: ST_TO_ADDR
// end ; if weapon then
34714: LD_VAR 0 18
34718: IFFALSE 34832
// begin tmp := CostOfWeapon ( weapon ) ;
34720: LD_ADDR_VAR 0 14
34724: PUSH
34725: LD_VAR 0 18
34729: PPUSH
34730: CALL_OW 451
34734: ST_TO_ADDR
// j := GetBase ( tower ) ;
34735: LD_ADDR_VAR 0 9
34739: PUSH
34740: LD_VAR 0 1
34744: PPUSH
34745: CALL_OW 274
34749: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
34750: LD_VAR 0 9
34754: PPUSH
34755: LD_INT 1
34757: PPUSH
34758: CALL_OW 275
34762: PUSH
34763: LD_VAR 0 14
34767: PUSH
34768: LD_INT 1
34770: ARRAY
34771: GREATEREQUAL
34772: PUSH
34773: LD_VAR 0 9
34777: PPUSH
34778: LD_INT 2
34780: PPUSH
34781: CALL_OW 275
34785: PUSH
34786: LD_VAR 0 14
34790: PUSH
34791: LD_INT 2
34793: ARRAY
34794: GREATEREQUAL
34795: AND
34796: PUSH
34797: LD_VAR 0 9
34801: PPUSH
34802: LD_INT 3
34804: PPUSH
34805: CALL_OW 275
34809: PUSH
34810: LD_VAR 0 14
34814: PUSH
34815: LD_INT 3
34817: ARRAY
34818: GREATEREQUAL
34819: AND
34820: IFFALSE 34832
// result := weapon ;
34822: LD_ADDR_VAR 0 3
34826: PUSH
34827: LD_VAR 0 18
34831: ST_TO_ADDR
// end ; end ;
34832: LD_VAR 0 3
34836: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
34837: LD_INT 0
34839: PPUSH
34840: PPUSH
// result := true ;
34841: LD_ADDR_VAR 0 3
34845: PUSH
34846: LD_INT 1
34848: ST_TO_ADDR
// if array1 = array2 then
34849: LD_VAR 0 1
34853: PUSH
34854: LD_VAR 0 2
34858: EQUAL
34859: IFFALSE 34919
// begin for i = 1 to array1 do
34861: LD_ADDR_VAR 0 4
34865: PUSH
34866: DOUBLE
34867: LD_INT 1
34869: DEC
34870: ST_TO_ADDR
34871: LD_VAR 0 1
34875: PUSH
34876: FOR_TO
34877: IFFALSE 34915
// if array1 [ i ] <> array2 [ i ] then
34879: LD_VAR 0 1
34883: PUSH
34884: LD_VAR 0 4
34888: ARRAY
34889: PUSH
34890: LD_VAR 0 2
34894: PUSH
34895: LD_VAR 0 4
34899: ARRAY
34900: NONEQUAL
34901: IFFALSE 34913
// begin result := false ;
34903: LD_ADDR_VAR 0 3
34907: PUSH
34908: LD_INT 0
34910: ST_TO_ADDR
// break ;
34911: GO 34915
// end ;
34913: GO 34876
34915: POP
34916: POP
// end else
34917: GO 34927
// result := false ;
34919: LD_ADDR_VAR 0 3
34923: PUSH
34924: LD_INT 0
34926: ST_TO_ADDR
// end ;
34927: LD_VAR 0 3
34931: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
34932: LD_INT 0
34934: PPUSH
34935: PPUSH
34936: PPUSH
// pom := GetBase ( fac ) ;
34937: LD_ADDR_VAR 0 5
34941: PUSH
34942: LD_VAR 0 1
34946: PPUSH
34947: CALL_OW 274
34951: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
34952: LD_ADDR_VAR 0 4
34956: PUSH
34957: LD_VAR 0 2
34961: PUSH
34962: LD_INT 1
34964: ARRAY
34965: PPUSH
34966: LD_VAR 0 2
34970: PUSH
34971: LD_INT 2
34973: ARRAY
34974: PPUSH
34975: LD_VAR 0 2
34979: PUSH
34980: LD_INT 3
34982: ARRAY
34983: PPUSH
34984: LD_VAR 0 2
34988: PUSH
34989: LD_INT 4
34991: ARRAY
34992: PPUSH
34993: CALL_OW 449
34997: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34998: LD_ADDR_VAR 0 3
35002: PUSH
35003: LD_VAR 0 5
35007: PPUSH
35008: LD_INT 1
35010: PPUSH
35011: CALL_OW 275
35015: PUSH
35016: LD_VAR 0 4
35020: PUSH
35021: LD_INT 1
35023: ARRAY
35024: GREATEREQUAL
35025: PUSH
35026: LD_VAR 0 5
35030: PPUSH
35031: LD_INT 2
35033: PPUSH
35034: CALL_OW 275
35038: PUSH
35039: LD_VAR 0 4
35043: PUSH
35044: LD_INT 2
35046: ARRAY
35047: GREATEREQUAL
35048: AND
35049: PUSH
35050: LD_VAR 0 5
35054: PPUSH
35055: LD_INT 3
35057: PPUSH
35058: CALL_OW 275
35062: PUSH
35063: LD_VAR 0 4
35067: PUSH
35068: LD_INT 3
35070: ARRAY
35071: GREATEREQUAL
35072: AND
35073: ST_TO_ADDR
// end ;
35074: LD_VAR 0 3
35078: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
35079: LD_INT 0
35081: PPUSH
35082: PPUSH
35083: PPUSH
35084: PPUSH
// pom := GetBase ( building ) ;
35085: LD_ADDR_VAR 0 3
35089: PUSH
35090: LD_VAR 0 1
35094: PPUSH
35095: CALL_OW 274
35099: ST_TO_ADDR
// if not pom then
35100: LD_VAR 0 3
35104: NOT
35105: IFFALSE 35109
// exit ;
35107: GO 35279
// btype := GetBType ( building ) ;
35109: LD_ADDR_VAR 0 5
35113: PUSH
35114: LD_VAR 0 1
35118: PPUSH
35119: CALL_OW 266
35123: ST_TO_ADDR
// if btype = b_armoury then
35124: LD_VAR 0 5
35128: PUSH
35129: LD_INT 4
35131: EQUAL
35132: IFFALSE 35142
// btype := b_barracks ;
35134: LD_ADDR_VAR 0 5
35138: PUSH
35139: LD_INT 5
35141: ST_TO_ADDR
// if btype = b_depot then
35142: LD_VAR 0 5
35146: PUSH
35147: LD_INT 0
35149: EQUAL
35150: IFFALSE 35160
// btype := b_warehouse ;
35152: LD_ADDR_VAR 0 5
35156: PUSH
35157: LD_INT 1
35159: ST_TO_ADDR
// if btype = b_workshop then
35160: LD_VAR 0 5
35164: PUSH
35165: LD_INT 2
35167: EQUAL
35168: IFFALSE 35178
// btype := b_factory ;
35170: LD_ADDR_VAR 0 5
35174: PUSH
35175: LD_INT 3
35177: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35178: LD_ADDR_VAR 0 4
35182: PUSH
35183: LD_VAR 0 5
35187: PPUSH
35188: LD_VAR 0 1
35192: PPUSH
35193: CALL_OW 248
35197: PPUSH
35198: CALL_OW 450
35202: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35203: LD_ADDR_VAR 0 2
35207: PUSH
35208: LD_VAR 0 3
35212: PPUSH
35213: LD_INT 1
35215: PPUSH
35216: CALL_OW 275
35220: PUSH
35221: LD_VAR 0 4
35225: PUSH
35226: LD_INT 1
35228: ARRAY
35229: GREATEREQUAL
35230: PUSH
35231: LD_VAR 0 3
35235: PPUSH
35236: LD_INT 2
35238: PPUSH
35239: CALL_OW 275
35243: PUSH
35244: LD_VAR 0 4
35248: PUSH
35249: LD_INT 2
35251: ARRAY
35252: GREATEREQUAL
35253: AND
35254: PUSH
35255: LD_VAR 0 3
35259: PPUSH
35260: LD_INT 3
35262: PPUSH
35263: CALL_OW 275
35267: PUSH
35268: LD_VAR 0 4
35272: PUSH
35273: LD_INT 3
35275: ARRAY
35276: GREATEREQUAL
35277: AND
35278: ST_TO_ADDR
// end ;
35279: LD_VAR 0 2
35283: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
35284: LD_INT 0
35286: PPUSH
35287: PPUSH
35288: PPUSH
// pom := GetBase ( building ) ;
35289: LD_ADDR_VAR 0 4
35293: PUSH
35294: LD_VAR 0 1
35298: PPUSH
35299: CALL_OW 274
35303: ST_TO_ADDR
// if not pom then
35304: LD_VAR 0 4
35308: NOT
35309: IFFALSE 35313
// exit ;
35311: GO 35414
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35313: LD_ADDR_VAR 0 5
35317: PUSH
35318: LD_VAR 0 2
35322: PPUSH
35323: LD_VAR 0 1
35327: PPUSH
35328: CALL_OW 248
35332: PPUSH
35333: CALL_OW 450
35337: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35338: LD_ADDR_VAR 0 3
35342: PUSH
35343: LD_VAR 0 4
35347: PPUSH
35348: LD_INT 1
35350: PPUSH
35351: CALL_OW 275
35355: PUSH
35356: LD_VAR 0 5
35360: PUSH
35361: LD_INT 1
35363: ARRAY
35364: GREATEREQUAL
35365: PUSH
35366: LD_VAR 0 4
35370: PPUSH
35371: LD_INT 2
35373: PPUSH
35374: CALL_OW 275
35378: PUSH
35379: LD_VAR 0 5
35383: PUSH
35384: LD_INT 2
35386: ARRAY
35387: GREATEREQUAL
35388: AND
35389: PUSH
35390: LD_VAR 0 4
35394: PPUSH
35395: LD_INT 3
35397: PPUSH
35398: CALL_OW 275
35402: PUSH
35403: LD_VAR 0 5
35407: PUSH
35408: LD_INT 3
35410: ARRAY
35411: GREATEREQUAL
35412: AND
35413: ST_TO_ADDR
// end ;
35414: LD_VAR 0 3
35418: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
35419: LD_INT 0
35421: PPUSH
35422: PPUSH
35423: PPUSH
35424: PPUSH
35425: PPUSH
35426: PPUSH
35427: PPUSH
35428: PPUSH
35429: PPUSH
35430: PPUSH
// result := false ;
35431: LD_ADDR_VAR 0 6
35435: PUSH
35436: LD_INT 0
35438: ST_TO_ADDR
// if not base or not btype or not x or not y then
35439: LD_VAR 0 1
35443: NOT
35444: PUSH
35445: LD_VAR 0 2
35449: NOT
35450: OR
35451: PUSH
35452: LD_VAR 0 3
35456: NOT
35457: OR
35458: PUSH
35459: LD_VAR 0 4
35463: NOT
35464: OR
35465: IFFALSE 35469
// exit ;
35467: GO 36078
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
35469: LD_ADDR_VAR 0 12
35473: PUSH
35474: LD_VAR 0 2
35478: PPUSH
35479: LD_VAR 0 3
35483: PPUSH
35484: LD_VAR 0 4
35488: PPUSH
35489: LD_VAR 0 5
35493: PPUSH
35494: LD_VAR 0 1
35498: PUSH
35499: LD_INT 1
35501: ARRAY
35502: PPUSH
35503: CALL_OW 248
35507: PPUSH
35508: LD_INT 0
35510: PPUSH
35511: CALL 36915 0 6
35515: ST_TO_ADDR
// if not hexes then
35516: LD_VAR 0 12
35520: NOT
35521: IFFALSE 35525
// exit ;
35523: GO 36078
// for i = 1 to hexes do
35525: LD_ADDR_VAR 0 7
35529: PUSH
35530: DOUBLE
35531: LD_INT 1
35533: DEC
35534: ST_TO_ADDR
35535: LD_VAR 0 12
35539: PUSH
35540: FOR_TO
35541: IFFALSE 36076
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35543: LD_ADDR_VAR 0 11
35547: PUSH
35548: LD_VAR 0 12
35552: PUSH
35553: LD_VAR 0 7
35557: ARRAY
35558: PUSH
35559: LD_INT 1
35561: ARRAY
35562: PPUSH
35563: LD_VAR 0 12
35567: PUSH
35568: LD_VAR 0 7
35572: ARRAY
35573: PUSH
35574: LD_INT 2
35576: ARRAY
35577: PPUSH
35578: CALL_OW 428
35582: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
35583: LD_VAR 0 12
35587: PUSH
35588: LD_VAR 0 7
35592: ARRAY
35593: PUSH
35594: LD_INT 1
35596: ARRAY
35597: PPUSH
35598: LD_VAR 0 12
35602: PUSH
35603: LD_VAR 0 7
35607: ARRAY
35608: PUSH
35609: LD_INT 2
35611: ARRAY
35612: PPUSH
35613: CALL_OW 351
35617: PUSH
35618: LD_VAR 0 12
35622: PUSH
35623: LD_VAR 0 7
35627: ARRAY
35628: PUSH
35629: LD_INT 1
35631: ARRAY
35632: PPUSH
35633: LD_VAR 0 12
35637: PUSH
35638: LD_VAR 0 7
35642: ARRAY
35643: PUSH
35644: LD_INT 2
35646: ARRAY
35647: PPUSH
35648: CALL_OW 488
35652: NOT
35653: OR
35654: PUSH
35655: LD_VAR 0 11
35659: PPUSH
35660: CALL_OW 247
35664: PUSH
35665: LD_INT 3
35667: EQUAL
35668: OR
35669: IFFALSE 35675
// exit ;
35671: POP
35672: POP
35673: GO 36078
// if not tmp or not tmp in base then
35675: LD_VAR 0 11
35679: NOT
35680: PUSH
35681: LD_VAR 0 11
35685: PUSH
35686: LD_VAR 0 1
35690: IN
35691: NOT
35692: OR
35693: IFFALSE 35697
// continue ;
35695: GO 35540
// result := true ;
35697: LD_ADDR_VAR 0 6
35701: PUSH
35702: LD_INT 1
35704: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35705: LD_ADDR_VAR 0 15
35709: PUSH
35710: LD_VAR 0 1
35714: PPUSH
35715: LD_INT 22
35717: PUSH
35718: LD_VAR 0 11
35722: PPUSH
35723: CALL_OW 255
35727: PUSH
35728: EMPTY
35729: LIST
35730: LIST
35731: PUSH
35732: LD_INT 2
35734: PUSH
35735: LD_INT 30
35737: PUSH
35738: LD_INT 0
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PUSH
35745: LD_INT 30
35747: PUSH
35748: LD_INT 1
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: LIST
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: PPUSH
35764: CALL_OW 72
35768: ST_TO_ADDR
// if dep then
35769: LD_VAR 0 15
35773: IFFALSE 35909
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
35775: LD_ADDR_VAR 0 14
35779: PUSH
35780: LD_VAR 0 15
35784: PUSH
35785: LD_INT 1
35787: ARRAY
35788: PPUSH
35789: CALL_OW 250
35793: PPUSH
35794: LD_VAR 0 15
35798: PUSH
35799: LD_INT 1
35801: ARRAY
35802: PPUSH
35803: CALL_OW 254
35807: PPUSH
35808: LD_INT 5
35810: PPUSH
35811: CALL_OW 272
35815: PUSH
35816: LD_VAR 0 15
35820: PUSH
35821: LD_INT 1
35823: ARRAY
35824: PPUSH
35825: CALL_OW 251
35829: PPUSH
35830: LD_VAR 0 15
35834: PUSH
35835: LD_INT 1
35837: ARRAY
35838: PPUSH
35839: CALL_OW 254
35843: PPUSH
35844: LD_INT 5
35846: PPUSH
35847: CALL_OW 273
35851: PUSH
35852: EMPTY
35853: LIST
35854: LIST
35855: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
35856: LD_VAR 0 14
35860: PUSH
35861: LD_INT 1
35863: ARRAY
35864: PPUSH
35865: LD_VAR 0 14
35869: PUSH
35870: LD_INT 2
35872: ARRAY
35873: PPUSH
35874: CALL_OW 488
35878: IFFALSE 35909
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
35880: LD_VAR 0 11
35884: PPUSH
35885: LD_VAR 0 14
35889: PUSH
35890: LD_INT 1
35892: ARRAY
35893: PPUSH
35894: LD_VAR 0 14
35898: PUSH
35899: LD_INT 2
35901: ARRAY
35902: PPUSH
35903: CALL_OW 111
// continue ;
35907: GO 35540
// end ; end ; r := GetDir ( tmp ) ;
35909: LD_ADDR_VAR 0 13
35913: PUSH
35914: LD_VAR 0 11
35918: PPUSH
35919: CALL_OW 254
35923: ST_TO_ADDR
// if r = 5 then
35924: LD_VAR 0 13
35928: PUSH
35929: LD_INT 5
35931: EQUAL
35932: IFFALSE 35942
// r := 0 ;
35934: LD_ADDR_VAR 0 13
35938: PUSH
35939: LD_INT 0
35941: ST_TO_ADDR
// for j = r to 5 do
35942: LD_ADDR_VAR 0 8
35946: PUSH
35947: DOUBLE
35948: LD_VAR 0 13
35952: DEC
35953: ST_TO_ADDR
35954: LD_INT 5
35956: PUSH
35957: FOR_TO
35958: IFFALSE 36072
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
35960: LD_ADDR_VAR 0 9
35964: PUSH
35965: LD_VAR 0 11
35969: PPUSH
35970: CALL_OW 250
35974: PPUSH
35975: LD_VAR 0 8
35979: PPUSH
35980: LD_INT 2
35982: PPUSH
35983: CALL_OW 272
35987: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
35988: LD_ADDR_VAR 0 10
35992: PUSH
35993: LD_VAR 0 11
35997: PPUSH
35998: CALL_OW 251
36002: PPUSH
36003: LD_VAR 0 8
36007: PPUSH
36008: LD_INT 2
36010: PPUSH
36011: CALL_OW 273
36015: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
36016: LD_VAR 0 9
36020: PPUSH
36021: LD_VAR 0 10
36025: PPUSH
36026: CALL_OW 488
36030: PUSH
36031: LD_VAR 0 9
36035: PPUSH
36036: LD_VAR 0 10
36040: PPUSH
36041: CALL_OW 428
36045: NOT
36046: AND
36047: IFFALSE 36070
// begin ComMoveXY ( tmp , _x , _y ) ;
36049: LD_VAR 0 11
36053: PPUSH
36054: LD_VAR 0 9
36058: PPUSH
36059: LD_VAR 0 10
36063: PPUSH
36064: CALL_OW 111
// break ;
36068: GO 36072
// end ; end ;
36070: GO 35957
36072: POP
36073: POP
// end ;
36074: GO 35540
36076: POP
36077: POP
// end ;
36078: LD_VAR 0 6
36082: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
36083: LD_INT 0
36085: PPUSH
36086: PPUSH
36087: PPUSH
36088: PPUSH
36089: PPUSH
36090: PPUSH
36091: PPUSH
36092: PPUSH
36093: PPUSH
36094: PPUSH
// result := false ;
36095: LD_ADDR_VAR 0 6
36099: PUSH
36100: LD_INT 0
36102: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
36103: LD_VAR 0 1
36107: NOT
36108: PUSH
36109: LD_VAR 0 1
36113: PPUSH
36114: CALL_OW 266
36118: PUSH
36119: LD_INT 0
36121: PUSH
36122: LD_INT 1
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: IN
36129: NOT
36130: OR
36131: PUSH
36132: LD_VAR 0 2
36136: NOT
36137: OR
36138: PUSH
36139: LD_VAR 0 5
36143: PUSH
36144: LD_INT 0
36146: PUSH
36147: LD_INT 1
36149: PUSH
36150: LD_INT 2
36152: PUSH
36153: LD_INT 3
36155: PUSH
36156: LD_INT 4
36158: PUSH
36159: LD_INT 5
36161: PUSH
36162: EMPTY
36163: LIST
36164: LIST
36165: LIST
36166: LIST
36167: LIST
36168: LIST
36169: IN
36170: NOT
36171: OR
36172: PUSH
36173: LD_VAR 0 3
36177: PPUSH
36178: LD_VAR 0 4
36182: PPUSH
36183: CALL_OW 488
36187: NOT
36188: OR
36189: IFFALSE 36193
// exit ;
36191: GO 36910
// pom := GetBase ( depot ) ;
36193: LD_ADDR_VAR 0 10
36197: PUSH
36198: LD_VAR 0 1
36202: PPUSH
36203: CALL_OW 274
36207: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
36208: LD_ADDR_VAR 0 11
36212: PUSH
36213: LD_VAR 0 2
36217: PPUSH
36218: LD_VAR 0 1
36222: PPUSH
36223: CALL_OW 248
36227: PPUSH
36228: CALL_OW 450
36232: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
36233: LD_VAR 0 10
36237: PPUSH
36238: LD_INT 1
36240: PPUSH
36241: CALL_OW 275
36245: PUSH
36246: LD_VAR 0 11
36250: PUSH
36251: LD_INT 1
36253: ARRAY
36254: GREATEREQUAL
36255: PUSH
36256: LD_VAR 0 10
36260: PPUSH
36261: LD_INT 2
36263: PPUSH
36264: CALL_OW 275
36268: PUSH
36269: LD_VAR 0 11
36273: PUSH
36274: LD_INT 2
36276: ARRAY
36277: GREATEREQUAL
36278: AND
36279: PUSH
36280: LD_VAR 0 10
36284: PPUSH
36285: LD_INT 3
36287: PPUSH
36288: CALL_OW 275
36292: PUSH
36293: LD_VAR 0 11
36297: PUSH
36298: LD_INT 3
36300: ARRAY
36301: GREATEREQUAL
36302: AND
36303: NOT
36304: IFFALSE 36308
// exit ;
36306: GO 36910
// if GetBType ( depot ) = b_depot then
36308: LD_VAR 0 1
36312: PPUSH
36313: CALL_OW 266
36317: PUSH
36318: LD_INT 0
36320: EQUAL
36321: IFFALSE 36333
// dist := 28 else
36323: LD_ADDR_VAR 0 14
36327: PUSH
36328: LD_INT 28
36330: ST_TO_ADDR
36331: GO 36341
// dist := 36 ;
36333: LD_ADDR_VAR 0 14
36337: PUSH
36338: LD_INT 36
36340: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
36341: LD_VAR 0 1
36345: PPUSH
36346: LD_VAR 0 3
36350: PPUSH
36351: LD_VAR 0 4
36355: PPUSH
36356: CALL_OW 297
36360: PUSH
36361: LD_VAR 0 14
36365: GREATER
36366: IFFALSE 36370
// exit ;
36368: GO 36910
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
36370: LD_ADDR_VAR 0 12
36374: PUSH
36375: LD_VAR 0 2
36379: PPUSH
36380: LD_VAR 0 3
36384: PPUSH
36385: LD_VAR 0 4
36389: PPUSH
36390: LD_VAR 0 5
36394: PPUSH
36395: LD_VAR 0 1
36399: PPUSH
36400: CALL_OW 248
36404: PPUSH
36405: LD_INT 0
36407: PPUSH
36408: CALL 36915 0 6
36412: ST_TO_ADDR
// if not hexes then
36413: LD_VAR 0 12
36417: NOT
36418: IFFALSE 36422
// exit ;
36420: GO 36910
// hex := GetHexInfo ( x , y ) ;
36422: LD_ADDR_VAR 0 15
36426: PUSH
36427: LD_VAR 0 3
36431: PPUSH
36432: LD_VAR 0 4
36436: PPUSH
36437: CALL_OW 546
36441: ST_TO_ADDR
// if hex [ 1 ] then
36442: LD_VAR 0 15
36446: PUSH
36447: LD_INT 1
36449: ARRAY
36450: IFFALSE 36454
// exit ;
36452: GO 36910
// height := hex [ 2 ] ;
36454: LD_ADDR_VAR 0 13
36458: PUSH
36459: LD_VAR 0 15
36463: PUSH
36464: LD_INT 2
36466: ARRAY
36467: ST_TO_ADDR
// for i = 1 to hexes do
36468: LD_ADDR_VAR 0 7
36472: PUSH
36473: DOUBLE
36474: LD_INT 1
36476: DEC
36477: ST_TO_ADDR
36478: LD_VAR 0 12
36482: PUSH
36483: FOR_TO
36484: IFFALSE 36814
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
36486: LD_VAR 0 12
36490: PUSH
36491: LD_VAR 0 7
36495: ARRAY
36496: PUSH
36497: LD_INT 1
36499: ARRAY
36500: PPUSH
36501: LD_VAR 0 12
36505: PUSH
36506: LD_VAR 0 7
36510: ARRAY
36511: PUSH
36512: LD_INT 2
36514: ARRAY
36515: PPUSH
36516: CALL_OW 488
36520: NOT
36521: PUSH
36522: LD_VAR 0 12
36526: PUSH
36527: LD_VAR 0 7
36531: ARRAY
36532: PUSH
36533: LD_INT 1
36535: ARRAY
36536: PPUSH
36537: LD_VAR 0 12
36541: PUSH
36542: LD_VAR 0 7
36546: ARRAY
36547: PUSH
36548: LD_INT 2
36550: ARRAY
36551: PPUSH
36552: CALL_OW 428
36556: PUSH
36557: LD_INT 0
36559: GREATER
36560: OR
36561: PUSH
36562: LD_VAR 0 12
36566: PUSH
36567: LD_VAR 0 7
36571: ARRAY
36572: PUSH
36573: LD_INT 1
36575: ARRAY
36576: PPUSH
36577: LD_VAR 0 12
36581: PUSH
36582: LD_VAR 0 7
36586: ARRAY
36587: PUSH
36588: LD_INT 2
36590: ARRAY
36591: PPUSH
36592: CALL_OW 351
36596: OR
36597: IFFALSE 36603
// exit ;
36599: POP
36600: POP
36601: GO 36910
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36603: LD_ADDR_VAR 0 8
36607: PUSH
36608: LD_VAR 0 12
36612: PUSH
36613: LD_VAR 0 7
36617: ARRAY
36618: PUSH
36619: LD_INT 1
36621: ARRAY
36622: PPUSH
36623: LD_VAR 0 12
36627: PUSH
36628: LD_VAR 0 7
36632: ARRAY
36633: PUSH
36634: LD_INT 2
36636: ARRAY
36637: PPUSH
36638: CALL_OW 546
36642: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
36643: LD_VAR 0 8
36647: PUSH
36648: LD_INT 1
36650: ARRAY
36651: PUSH
36652: LD_VAR 0 8
36656: PUSH
36657: LD_INT 2
36659: ARRAY
36660: PUSH
36661: LD_VAR 0 13
36665: PUSH
36666: LD_INT 2
36668: PLUS
36669: GREATER
36670: OR
36671: PUSH
36672: LD_VAR 0 8
36676: PUSH
36677: LD_INT 2
36679: ARRAY
36680: PUSH
36681: LD_VAR 0 13
36685: PUSH
36686: LD_INT 2
36688: MINUS
36689: LESS
36690: OR
36691: PUSH
36692: LD_VAR 0 8
36696: PUSH
36697: LD_INT 3
36699: ARRAY
36700: PUSH
36701: LD_INT 0
36703: PUSH
36704: LD_INT 8
36706: PUSH
36707: LD_INT 9
36709: PUSH
36710: LD_INT 10
36712: PUSH
36713: LD_INT 11
36715: PUSH
36716: LD_INT 12
36718: PUSH
36719: LD_INT 13
36721: PUSH
36722: LD_INT 16
36724: PUSH
36725: LD_INT 17
36727: PUSH
36728: LD_INT 18
36730: PUSH
36731: LD_INT 19
36733: PUSH
36734: LD_INT 20
36736: PUSH
36737: LD_INT 21
36739: PUSH
36740: EMPTY
36741: LIST
36742: LIST
36743: LIST
36744: LIST
36745: LIST
36746: LIST
36747: LIST
36748: LIST
36749: LIST
36750: LIST
36751: LIST
36752: LIST
36753: LIST
36754: IN
36755: NOT
36756: OR
36757: PUSH
36758: LD_VAR 0 8
36762: PUSH
36763: LD_INT 5
36765: ARRAY
36766: NOT
36767: OR
36768: PUSH
36769: LD_VAR 0 8
36773: PUSH
36774: LD_INT 6
36776: ARRAY
36777: PUSH
36778: LD_INT 1
36780: PUSH
36781: LD_INT 2
36783: PUSH
36784: LD_INT 7
36786: PUSH
36787: LD_INT 9
36789: PUSH
36790: LD_INT 10
36792: PUSH
36793: LD_INT 11
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: LIST
36800: LIST
36801: LIST
36802: LIST
36803: IN
36804: NOT
36805: OR
36806: IFFALSE 36812
// exit ;
36808: POP
36809: POP
36810: GO 36910
// end ;
36812: GO 36483
36814: POP
36815: POP
// side := GetSide ( depot ) ;
36816: LD_ADDR_VAR 0 9
36820: PUSH
36821: LD_VAR 0 1
36825: PPUSH
36826: CALL_OW 255
36830: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
36831: LD_VAR 0 9
36835: PPUSH
36836: LD_VAR 0 3
36840: PPUSH
36841: LD_VAR 0 4
36845: PPUSH
36846: LD_INT 20
36848: PPUSH
36849: CALL 29564 0 4
36853: PUSH
36854: LD_INT 4
36856: ARRAY
36857: IFFALSE 36861
// exit ;
36859: GO 36910
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
36861: LD_VAR 0 2
36865: PUSH
36866: LD_INT 29
36868: PUSH
36869: LD_INT 30
36871: PUSH
36872: EMPTY
36873: LIST
36874: LIST
36875: IN
36876: PUSH
36877: LD_VAR 0 3
36881: PPUSH
36882: LD_VAR 0 4
36886: PPUSH
36887: LD_VAR 0 9
36891: PPUSH
36892: CALL_OW 440
36896: NOT
36897: AND
36898: IFFALSE 36902
// exit ;
36900: GO 36910
// result := true ;
36902: LD_ADDR_VAR 0 6
36906: PUSH
36907: LD_INT 1
36909: ST_TO_ADDR
// end ;
36910: LD_VAR 0 6
36914: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
36915: LD_INT 0
36917: PPUSH
36918: PPUSH
36919: PPUSH
36920: PPUSH
36921: PPUSH
36922: PPUSH
36923: PPUSH
36924: PPUSH
36925: PPUSH
36926: PPUSH
36927: PPUSH
36928: PPUSH
36929: PPUSH
36930: PPUSH
36931: PPUSH
36932: PPUSH
36933: PPUSH
36934: PPUSH
36935: PPUSH
36936: PPUSH
36937: PPUSH
36938: PPUSH
36939: PPUSH
36940: PPUSH
36941: PPUSH
36942: PPUSH
36943: PPUSH
36944: PPUSH
36945: PPUSH
36946: PPUSH
36947: PPUSH
36948: PPUSH
36949: PPUSH
36950: PPUSH
36951: PPUSH
36952: PPUSH
36953: PPUSH
36954: PPUSH
36955: PPUSH
36956: PPUSH
36957: PPUSH
36958: PPUSH
36959: PPUSH
36960: PPUSH
36961: PPUSH
36962: PPUSH
36963: PPUSH
36964: PPUSH
36965: PPUSH
36966: PPUSH
36967: PPUSH
36968: PPUSH
36969: PPUSH
36970: PPUSH
36971: PPUSH
36972: PPUSH
36973: PPUSH
36974: PPUSH
// result = [ ] ;
36975: LD_ADDR_VAR 0 7
36979: PUSH
36980: EMPTY
36981: ST_TO_ADDR
// temp_list = [ ] ;
36982: LD_ADDR_VAR 0 9
36986: PUSH
36987: EMPTY
36988: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
36989: LD_VAR 0 4
36993: PUSH
36994: LD_INT 0
36996: PUSH
36997: LD_INT 1
36999: PUSH
37000: LD_INT 2
37002: PUSH
37003: LD_INT 3
37005: PUSH
37006: LD_INT 4
37008: PUSH
37009: LD_INT 5
37011: PUSH
37012: EMPTY
37013: LIST
37014: LIST
37015: LIST
37016: LIST
37017: LIST
37018: LIST
37019: IN
37020: NOT
37021: PUSH
37022: LD_VAR 0 1
37026: PUSH
37027: LD_INT 0
37029: PUSH
37030: LD_INT 1
37032: PUSH
37033: EMPTY
37034: LIST
37035: LIST
37036: IN
37037: PUSH
37038: LD_VAR 0 5
37042: PUSH
37043: LD_INT 1
37045: PUSH
37046: LD_INT 2
37048: PUSH
37049: LD_INT 3
37051: PUSH
37052: EMPTY
37053: LIST
37054: LIST
37055: LIST
37056: IN
37057: NOT
37058: AND
37059: OR
37060: IFFALSE 37064
// exit ;
37062: GO 55455
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
37064: LD_VAR 0 1
37068: PUSH
37069: LD_INT 6
37071: PUSH
37072: LD_INT 7
37074: PUSH
37075: LD_INT 8
37077: PUSH
37078: LD_INT 13
37080: PUSH
37081: LD_INT 12
37083: PUSH
37084: LD_INT 15
37086: PUSH
37087: LD_INT 11
37089: PUSH
37090: LD_INT 14
37092: PUSH
37093: LD_INT 10
37095: PUSH
37096: EMPTY
37097: LIST
37098: LIST
37099: LIST
37100: LIST
37101: LIST
37102: LIST
37103: LIST
37104: LIST
37105: LIST
37106: IN
37107: IFFALSE 37117
// btype = b_lab ;
37109: LD_ADDR_VAR 0 1
37113: PUSH
37114: LD_INT 6
37116: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
37117: LD_VAR 0 6
37121: PUSH
37122: LD_INT 0
37124: PUSH
37125: LD_INT 1
37127: PUSH
37128: LD_INT 2
37130: PUSH
37131: EMPTY
37132: LIST
37133: LIST
37134: LIST
37135: IN
37136: NOT
37137: PUSH
37138: LD_VAR 0 1
37142: PUSH
37143: LD_INT 0
37145: PUSH
37146: LD_INT 1
37148: PUSH
37149: LD_INT 2
37151: PUSH
37152: LD_INT 3
37154: PUSH
37155: LD_INT 6
37157: PUSH
37158: LD_INT 36
37160: PUSH
37161: LD_INT 4
37163: PUSH
37164: LD_INT 5
37166: PUSH
37167: LD_INT 31
37169: PUSH
37170: LD_INT 32
37172: PUSH
37173: LD_INT 33
37175: PUSH
37176: EMPTY
37177: LIST
37178: LIST
37179: LIST
37180: LIST
37181: LIST
37182: LIST
37183: LIST
37184: LIST
37185: LIST
37186: LIST
37187: LIST
37188: IN
37189: NOT
37190: PUSH
37191: LD_VAR 0 6
37195: PUSH
37196: LD_INT 1
37198: EQUAL
37199: AND
37200: OR
37201: PUSH
37202: LD_VAR 0 1
37206: PUSH
37207: LD_INT 2
37209: PUSH
37210: LD_INT 3
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: IN
37217: NOT
37218: PUSH
37219: LD_VAR 0 6
37223: PUSH
37224: LD_INT 2
37226: EQUAL
37227: AND
37228: OR
37229: IFFALSE 37239
// mode = 0 ;
37231: LD_ADDR_VAR 0 6
37235: PUSH
37236: LD_INT 0
37238: ST_TO_ADDR
// case mode of 0 :
37239: LD_VAR 0 6
37243: PUSH
37244: LD_INT 0
37246: DOUBLE
37247: EQUAL
37248: IFTRUE 37252
37250: GO 48705
37252: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37253: LD_ADDR_VAR 0 11
37257: PUSH
37258: LD_INT 0
37260: PUSH
37261: LD_INT 0
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: PUSH
37268: LD_INT 0
37270: PUSH
37271: LD_INT 1
37273: NEG
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: PUSH
37279: LD_INT 1
37281: PUSH
37282: LD_INT 0
37284: PUSH
37285: EMPTY
37286: LIST
37287: LIST
37288: PUSH
37289: LD_INT 1
37291: PUSH
37292: LD_INT 1
37294: PUSH
37295: EMPTY
37296: LIST
37297: LIST
37298: PUSH
37299: LD_INT 0
37301: PUSH
37302: LD_INT 1
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: PUSH
37309: LD_INT 1
37311: NEG
37312: PUSH
37313: LD_INT 0
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: PUSH
37320: LD_INT 1
37322: NEG
37323: PUSH
37324: LD_INT 1
37326: NEG
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: PUSH
37332: LD_INT 1
37334: NEG
37335: PUSH
37336: LD_INT 2
37338: NEG
37339: PUSH
37340: EMPTY
37341: LIST
37342: LIST
37343: PUSH
37344: LD_INT 0
37346: PUSH
37347: LD_INT 2
37349: NEG
37350: PUSH
37351: EMPTY
37352: LIST
37353: LIST
37354: PUSH
37355: LD_INT 1
37357: PUSH
37358: LD_INT 1
37360: NEG
37361: PUSH
37362: EMPTY
37363: LIST
37364: LIST
37365: PUSH
37366: LD_INT 1
37368: PUSH
37369: LD_INT 2
37371: PUSH
37372: EMPTY
37373: LIST
37374: LIST
37375: PUSH
37376: LD_INT 0
37378: PUSH
37379: LD_INT 2
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: PUSH
37386: LD_INT 1
37388: NEG
37389: PUSH
37390: LD_INT 1
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: PUSH
37397: LD_INT 1
37399: PUSH
37400: LD_INT 3
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PUSH
37407: LD_INT 0
37409: PUSH
37410: LD_INT 3
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: PUSH
37417: LD_INT 1
37419: NEG
37420: PUSH
37421: LD_INT 2
37423: PUSH
37424: EMPTY
37425: LIST
37426: LIST
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: LIST
37432: LIST
37433: LIST
37434: LIST
37435: LIST
37436: LIST
37437: LIST
37438: LIST
37439: LIST
37440: LIST
37441: LIST
37442: LIST
37443: LIST
37444: LIST
37445: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37446: LD_ADDR_VAR 0 12
37450: PUSH
37451: LD_INT 0
37453: PUSH
37454: LD_INT 0
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PUSH
37461: LD_INT 0
37463: PUSH
37464: LD_INT 1
37466: NEG
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: PUSH
37472: LD_INT 1
37474: PUSH
37475: LD_INT 0
37477: PUSH
37478: EMPTY
37479: LIST
37480: LIST
37481: PUSH
37482: LD_INT 1
37484: PUSH
37485: LD_INT 1
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PUSH
37492: LD_INT 0
37494: PUSH
37495: LD_INT 1
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: PUSH
37502: LD_INT 1
37504: NEG
37505: PUSH
37506: LD_INT 0
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: LD_INT 1
37515: NEG
37516: PUSH
37517: LD_INT 1
37519: NEG
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: PUSH
37525: LD_INT 1
37527: PUSH
37528: LD_INT 1
37530: NEG
37531: PUSH
37532: EMPTY
37533: LIST
37534: LIST
37535: PUSH
37536: LD_INT 2
37538: PUSH
37539: LD_INT 0
37541: PUSH
37542: EMPTY
37543: LIST
37544: LIST
37545: PUSH
37546: LD_INT 2
37548: PUSH
37549: LD_INT 1
37551: PUSH
37552: EMPTY
37553: LIST
37554: LIST
37555: PUSH
37556: LD_INT 1
37558: NEG
37559: PUSH
37560: LD_INT 1
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: PUSH
37567: LD_INT 2
37569: NEG
37570: PUSH
37571: LD_INT 0
37573: PUSH
37574: EMPTY
37575: LIST
37576: LIST
37577: PUSH
37578: LD_INT 2
37580: NEG
37581: PUSH
37582: LD_INT 1
37584: NEG
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: PUSH
37590: LD_INT 2
37592: NEG
37593: PUSH
37594: LD_INT 1
37596: PUSH
37597: EMPTY
37598: LIST
37599: LIST
37600: PUSH
37601: LD_INT 3
37603: NEG
37604: PUSH
37605: LD_INT 0
37607: PUSH
37608: EMPTY
37609: LIST
37610: LIST
37611: PUSH
37612: LD_INT 3
37614: NEG
37615: PUSH
37616: LD_INT 1
37618: NEG
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: PUSH
37624: EMPTY
37625: LIST
37626: LIST
37627: LIST
37628: LIST
37629: LIST
37630: LIST
37631: LIST
37632: LIST
37633: LIST
37634: LIST
37635: LIST
37636: LIST
37637: LIST
37638: LIST
37639: LIST
37640: LIST
37641: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37642: LD_ADDR_VAR 0 13
37646: PUSH
37647: LD_INT 0
37649: PUSH
37650: LD_INT 0
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: PUSH
37657: LD_INT 0
37659: PUSH
37660: LD_INT 1
37662: NEG
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: PUSH
37668: LD_INT 1
37670: PUSH
37671: LD_INT 0
37673: PUSH
37674: EMPTY
37675: LIST
37676: LIST
37677: PUSH
37678: LD_INT 1
37680: PUSH
37681: LD_INT 1
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: PUSH
37688: LD_INT 0
37690: PUSH
37691: LD_INT 1
37693: PUSH
37694: EMPTY
37695: LIST
37696: LIST
37697: PUSH
37698: LD_INT 1
37700: NEG
37701: PUSH
37702: LD_INT 0
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: PUSH
37709: LD_INT 1
37711: NEG
37712: PUSH
37713: LD_INT 1
37715: NEG
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: PUSH
37721: LD_INT 1
37723: NEG
37724: PUSH
37725: LD_INT 2
37727: NEG
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: PUSH
37733: LD_INT 2
37735: PUSH
37736: LD_INT 1
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: PUSH
37743: LD_INT 2
37745: PUSH
37746: LD_INT 2
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: PUSH
37753: LD_INT 1
37755: PUSH
37756: LD_INT 2
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: PUSH
37763: LD_INT 2
37765: NEG
37766: PUSH
37767: LD_INT 1
37769: NEG
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: PUSH
37775: LD_INT 2
37777: NEG
37778: PUSH
37779: LD_INT 2
37781: NEG
37782: PUSH
37783: EMPTY
37784: LIST
37785: LIST
37786: PUSH
37787: LD_INT 2
37789: NEG
37790: PUSH
37791: LD_INT 3
37793: NEG
37794: PUSH
37795: EMPTY
37796: LIST
37797: LIST
37798: PUSH
37799: LD_INT 3
37801: NEG
37802: PUSH
37803: LD_INT 2
37805: NEG
37806: PUSH
37807: EMPTY
37808: LIST
37809: LIST
37810: PUSH
37811: LD_INT 3
37813: NEG
37814: PUSH
37815: LD_INT 3
37817: NEG
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: PUSH
37823: EMPTY
37824: LIST
37825: LIST
37826: LIST
37827: LIST
37828: LIST
37829: LIST
37830: LIST
37831: LIST
37832: LIST
37833: LIST
37834: LIST
37835: LIST
37836: LIST
37837: LIST
37838: LIST
37839: LIST
37840: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37841: LD_ADDR_VAR 0 14
37845: PUSH
37846: LD_INT 0
37848: PUSH
37849: LD_INT 0
37851: PUSH
37852: EMPTY
37853: LIST
37854: LIST
37855: PUSH
37856: LD_INT 0
37858: PUSH
37859: LD_INT 1
37861: NEG
37862: PUSH
37863: EMPTY
37864: LIST
37865: LIST
37866: PUSH
37867: LD_INT 1
37869: PUSH
37870: LD_INT 0
37872: PUSH
37873: EMPTY
37874: LIST
37875: LIST
37876: PUSH
37877: LD_INT 1
37879: PUSH
37880: LD_INT 1
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: PUSH
37887: LD_INT 0
37889: PUSH
37890: LD_INT 1
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: PUSH
37897: LD_INT 1
37899: NEG
37900: PUSH
37901: LD_INT 0
37903: PUSH
37904: EMPTY
37905: LIST
37906: LIST
37907: PUSH
37908: LD_INT 1
37910: NEG
37911: PUSH
37912: LD_INT 1
37914: NEG
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: PUSH
37920: LD_INT 1
37922: NEG
37923: PUSH
37924: LD_INT 2
37926: NEG
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: PUSH
37932: LD_INT 0
37934: PUSH
37935: LD_INT 2
37937: NEG
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: PUSH
37943: LD_INT 1
37945: PUSH
37946: LD_INT 1
37948: NEG
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: PUSH
37954: LD_INT 1
37956: PUSH
37957: LD_INT 2
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: PUSH
37964: LD_INT 0
37966: PUSH
37967: LD_INT 2
37969: PUSH
37970: EMPTY
37971: LIST
37972: LIST
37973: PUSH
37974: LD_INT 1
37976: NEG
37977: PUSH
37978: LD_INT 1
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: PUSH
37985: LD_INT 1
37987: NEG
37988: PUSH
37989: LD_INT 3
37991: NEG
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: PUSH
37997: LD_INT 0
37999: PUSH
38000: LD_INT 3
38002: NEG
38003: PUSH
38004: EMPTY
38005: LIST
38006: LIST
38007: PUSH
38008: LD_INT 1
38010: PUSH
38011: LD_INT 2
38013: NEG
38014: PUSH
38015: EMPTY
38016: LIST
38017: LIST
38018: PUSH
38019: EMPTY
38020: LIST
38021: LIST
38022: LIST
38023: LIST
38024: LIST
38025: LIST
38026: LIST
38027: LIST
38028: LIST
38029: LIST
38030: LIST
38031: LIST
38032: LIST
38033: LIST
38034: LIST
38035: LIST
38036: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38037: LD_ADDR_VAR 0 15
38041: PUSH
38042: LD_INT 0
38044: PUSH
38045: LD_INT 0
38047: PUSH
38048: EMPTY
38049: LIST
38050: LIST
38051: PUSH
38052: LD_INT 0
38054: PUSH
38055: LD_INT 1
38057: NEG
38058: PUSH
38059: EMPTY
38060: LIST
38061: LIST
38062: PUSH
38063: LD_INT 1
38065: PUSH
38066: LD_INT 0
38068: PUSH
38069: EMPTY
38070: LIST
38071: LIST
38072: PUSH
38073: LD_INT 1
38075: PUSH
38076: LD_INT 1
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: PUSH
38083: LD_INT 0
38085: PUSH
38086: LD_INT 1
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: PUSH
38093: LD_INT 1
38095: NEG
38096: PUSH
38097: LD_INT 0
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: PUSH
38104: LD_INT 1
38106: NEG
38107: PUSH
38108: LD_INT 1
38110: NEG
38111: PUSH
38112: EMPTY
38113: LIST
38114: LIST
38115: PUSH
38116: LD_INT 1
38118: PUSH
38119: LD_INT 1
38121: NEG
38122: PUSH
38123: EMPTY
38124: LIST
38125: LIST
38126: PUSH
38127: LD_INT 2
38129: PUSH
38130: LD_INT 0
38132: PUSH
38133: EMPTY
38134: LIST
38135: LIST
38136: PUSH
38137: LD_INT 2
38139: PUSH
38140: LD_INT 1
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PUSH
38147: LD_INT 1
38149: NEG
38150: PUSH
38151: LD_INT 1
38153: PUSH
38154: EMPTY
38155: LIST
38156: LIST
38157: PUSH
38158: LD_INT 2
38160: NEG
38161: PUSH
38162: LD_INT 0
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: PUSH
38169: LD_INT 2
38171: NEG
38172: PUSH
38173: LD_INT 1
38175: NEG
38176: PUSH
38177: EMPTY
38178: LIST
38179: LIST
38180: PUSH
38181: LD_INT 2
38183: PUSH
38184: LD_INT 1
38186: NEG
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: PUSH
38192: LD_INT 3
38194: PUSH
38195: LD_INT 0
38197: PUSH
38198: EMPTY
38199: LIST
38200: LIST
38201: PUSH
38202: LD_INT 3
38204: PUSH
38205: LD_INT 1
38207: PUSH
38208: EMPTY
38209: LIST
38210: LIST
38211: PUSH
38212: EMPTY
38213: LIST
38214: LIST
38215: LIST
38216: LIST
38217: LIST
38218: LIST
38219: LIST
38220: LIST
38221: LIST
38222: LIST
38223: LIST
38224: LIST
38225: LIST
38226: LIST
38227: LIST
38228: LIST
38229: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38230: LD_ADDR_VAR 0 16
38234: PUSH
38235: LD_INT 0
38237: PUSH
38238: LD_INT 0
38240: PUSH
38241: EMPTY
38242: LIST
38243: LIST
38244: PUSH
38245: LD_INT 0
38247: PUSH
38248: LD_INT 1
38250: NEG
38251: PUSH
38252: EMPTY
38253: LIST
38254: LIST
38255: PUSH
38256: LD_INT 1
38258: PUSH
38259: LD_INT 0
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: PUSH
38266: LD_INT 1
38268: PUSH
38269: LD_INT 1
38271: PUSH
38272: EMPTY
38273: LIST
38274: LIST
38275: PUSH
38276: LD_INT 0
38278: PUSH
38279: LD_INT 1
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: PUSH
38286: LD_INT 1
38288: NEG
38289: PUSH
38290: LD_INT 0
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: PUSH
38297: LD_INT 1
38299: NEG
38300: PUSH
38301: LD_INT 1
38303: NEG
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: PUSH
38309: LD_INT 1
38311: NEG
38312: PUSH
38313: LD_INT 2
38315: NEG
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: PUSH
38321: LD_INT 2
38323: PUSH
38324: LD_INT 1
38326: PUSH
38327: EMPTY
38328: LIST
38329: LIST
38330: PUSH
38331: LD_INT 2
38333: PUSH
38334: LD_INT 2
38336: PUSH
38337: EMPTY
38338: LIST
38339: LIST
38340: PUSH
38341: LD_INT 1
38343: PUSH
38344: LD_INT 2
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: PUSH
38351: LD_INT 2
38353: NEG
38354: PUSH
38355: LD_INT 1
38357: NEG
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: PUSH
38363: LD_INT 2
38365: NEG
38366: PUSH
38367: LD_INT 2
38369: NEG
38370: PUSH
38371: EMPTY
38372: LIST
38373: LIST
38374: PUSH
38375: LD_INT 3
38377: PUSH
38378: LD_INT 2
38380: PUSH
38381: EMPTY
38382: LIST
38383: LIST
38384: PUSH
38385: LD_INT 3
38387: PUSH
38388: LD_INT 3
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: PUSH
38395: LD_INT 2
38397: PUSH
38398: LD_INT 3
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: EMPTY
38406: LIST
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: LIST
38415: LIST
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38423: LD_ADDR_VAR 0 17
38427: PUSH
38428: LD_INT 0
38430: PUSH
38431: LD_INT 0
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: PUSH
38438: LD_INT 0
38440: PUSH
38441: LD_INT 1
38443: NEG
38444: PUSH
38445: EMPTY
38446: LIST
38447: LIST
38448: PUSH
38449: LD_INT 1
38451: PUSH
38452: LD_INT 0
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: PUSH
38459: LD_INT 1
38461: PUSH
38462: LD_INT 1
38464: PUSH
38465: EMPTY
38466: LIST
38467: LIST
38468: PUSH
38469: LD_INT 0
38471: PUSH
38472: LD_INT 1
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: PUSH
38479: LD_INT 1
38481: NEG
38482: PUSH
38483: LD_INT 0
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: PUSH
38490: LD_INT 1
38492: NEG
38493: PUSH
38494: LD_INT 1
38496: NEG
38497: PUSH
38498: EMPTY
38499: LIST
38500: LIST
38501: PUSH
38502: LD_INT 1
38504: NEG
38505: PUSH
38506: LD_INT 2
38508: NEG
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: PUSH
38514: LD_INT 0
38516: PUSH
38517: LD_INT 2
38519: NEG
38520: PUSH
38521: EMPTY
38522: LIST
38523: LIST
38524: PUSH
38525: LD_INT 1
38527: PUSH
38528: LD_INT 1
38530: NEG
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: LD_INT 2
38538: PUSH
38539: LD_INT 0
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: LD_INT 2
38548: PUSH
38549: LD_INT 1
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: PUSH
38556: LD_INT 2
38558: PUSH
38559: LD_INT 2
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: PUSH
38566: LD_INT 1
38568: PUSH
38569: LD_INT 2
38571: PUSH
38572: EMPTY
38573: LIST
38574: LIST
38575: PUSH
38576: LD_INT 0
38578: PUSH
38579: LD_INT 2
38581: PUSH
38582: EMPTY
38583: LIST
38584: LIST
38585: PUSH
38586: LD_INT 1
38588: NEG
38589: PUSH
38590: LD_INT 1
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PUSH
38597: LD_INT 2
38599: NEG
38600: PUSH
38601: LD_INT 0
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: PUSH
38608: LD_INT 2
38610: NEG
38611: PUSH
38612: LD_INT 1
38614: NEG
38615: PUSH
38616: EMPTY
38617: LIST
38618: LIST
38619: PUSH
38620: LD_INT 2
38622: NEG
38623: PUSH
38624: LD_INT 2
38626: NEG
38627: PUSH
38628: EMPTY
38629: LIST
38630: LIST
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: LIST
38636: LIST
38637: LIST
38638: LIST
38639: LIST
38640: LIST
38641: LIST
38642: LIST
38643: LIST
38644: LIST
38645: LIST
38646: LIST
38647: LIST
38648: LIST
38649: LIST
38650: LIST
38651: LIST
38652: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38653: LD_ADDR_VAR 0 18
38657: PUSH
38658: LD_INT 0
38660: PUSH
38661: LD_INT 0
38663: PUSH
38664: EMPTY
38665: LIST
38666: LIST
38667: PUSH
38668: LD_INT 0
38670: PUSH
38671: LD_INT 1
38673: NEG
38674: PUSH
38675: EMPTY
38676: LIST
38677: LIST
38678: PUSH
38679: LD_INT 1
38681: PUSH
38682: LD_INT 0
38684: PUSH
38685: EMPTY
38686: LIST
38687: LIST
38688: PUSH
38689: LD_INT 1
38691: PUSH
38692: LD_INT 1
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: PUSH
38699: LD_INT 0
38701: PUSH
38702: LD_INT 1
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: PUSH
38709: LD_INT 1
38711: NEG
38712: PUSH
38713: LD_INT 0
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: PUSH
38720: LD_INT 1
38722: NEG
38723: PUSH
38724: LD_INT 1
38726: NEG
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: PUSH
38732: LD_INT 1
38734: NEG
38735: PUSH
38736: LD_INT 2
38738: NEG
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: PUSH
38744: LD_INT 0
38746: PUSH
38747: LD_INT 2
38749: NEG
38750: PUSH
38751: EMPTY
38752: LIST
38753: LIST
38754: PUSH
38755: LD_INT 1
38757: PUSH
38758: LD_INT 1
38760: NEG
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: PUSH
38766: LD_INT 2
38768: PUSH
38769: LD_INT 0
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: PUSH
38776: LD_INT 2
38778: PUSH
38779: LD_INT 1
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: PUSH
38786: LD_INT 2
38788: PUSH
38789: LD_INT 2
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: PUSH
38796: LD_INT 1
38798: PUSH
38799: LD_INT 2
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: PUSH
38806: LD_INT 0
38808: PUSH
38809: LD_INT 2
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: PUSH
38816: LD_INT 1
38818: NEG
38819: PUSH
38820: LD_INT 1
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: PUSH
38827: LD_INT 2
38829: NEG
38830: PUSH
38831: LD_INT 0
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: PUSH
38838: LD_INT 2
38840: NEG
38841: PUSH
38842: LD_INT 1
38844: NEG
38845: PUSH
38846: EMPTY
38847: LIST
38848: LIST
38849: PUSH
38850: LD_INT 2
38852: NEG
38853: PUSH
38854: LD_INT 2
38856: NEG
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: LIST
38866: LIST
38867: LIST
38868: LIST
38869: LIST
38870: LIST
38871: LIST
38872: LIST
38873: LIST
38874: LIST
38875: LIST
38876: LIST
38877: LIST
38878: LIST
38879: LIST
38880: LIST
38881: LIST
38882: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38883: LD_ADDR_VAR 0 19
38887: PUSH
38888: LD_INT 0
38890: PUSH
38891: LD_INT 0
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: PUSH
38898: LD_INT 0
38900: PUSH
38901: LD_INT 1
38903: NEG
38904: PUSH
38905: EMPTY
38906: LIST
38907: LIST
38908: PUSH
38909: LD_INT 1
38911: PUSH
38912: LD_INT 0
38914: PUSH
38915: EMPTY
38916: LIST
38917: LIST
38918: PUSH
38919: LD_INT 1
38921: PUSH
38922: LD_INT 1
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: PUSH
38929: LD_INT 0
38931: PUSH
38932: LD_INT 1
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: PUSH
38939: LD_INT 1
38941: NEG
38942: PUSH
38943: LD_INT 0
38945: PUSH
38946: EMPTY
38947: LIST
38948: LIST
38949: PUSH
38950: LD_INT 1
38952: NEG
38953: PUSH
38954: LD_INT 1
38956: NEG
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: PUSH
38962: LD_INT 1
38964: NEG
38965: PUSH
38966: LD_INT 2
38968: NEG
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PUSH
38974: LD_INT 0
38976: PUSH
38977: LD_INT 2
38979: NEG
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: PUSH
38985: LD_INT 1
38987: PUSH
38988: LD_INT 1
38990: NEG
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: PUSH
38996: LD_INT 2
38998: PUSH
38999: LD_INT 0
39001: PUSH
39002: EMPTY
39003: LIST
39004: LIST
39005: PUSH
39006: LD_INT 2
39008: PUSH
39009: LD_INT 1
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: PUSH
39016: LD_INT 2
39018: PUSH
39019: LD_INT 2
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: PUSH
39026: LD_INT 1
39028: PUSH
39029: LD_INT 2
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: PUSH
39036: LD_INT 0
39038: PUSH
39039: LD_INT 2
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: PUSH
39046: LD_INT 1
39048: NEG
39049: PUSH
39050: LD_INT 1
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PUSH
39057: LD_INT 2
39059: NEG
39060: PUSH
39061: LD_INT 0
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 2
39070: NEG
39071: PUSH
39072: LD_INT 1
39074: NEG
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: PUSH
39080: LD_INT 2
39082: NEG
39083: PUSH
39084: LD_INT 2
39086: NEG
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: LIST
39096: LIST
39097: LIST
39098: LIST
39099: LIST
39100: LIST
39101: LIST
39102: LIST
39103: LIST
39104: LIST
39105: LIST
39106: LIST
39107: LIST
39108: LIST
39109: LIST
39110: LIST
39111: LIST
39112: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39113: LD_ADDR_VAR 0 20
39117: PUSH
39118: LD_INT 0
39120: PUSH
39121: LD_INT 0
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: PUSH
39128: LD_INT 0
39130: PUSH
39131: LD_INT 1
39133: NEG
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: PUSH
39139: LD_INT 1
39141: PUSH
39142: LD_INT 0
39144: PUSH
39145: EMPTY
39146: LIST
39147: LIST
39148: PUSH
39149: LD_INT 1
39151: PUSH
39152: LD_INT 1
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: PUSH
39159: LD_INT 0
39161: PUSH
39162: LD_INT 1
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: PUSH
39169: LD_INT 1
39171: NEG
39172: PUSH
39173: LD_INT 0
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: PUSH
39180: LD_INT 1
39182: NEG
39183: PUSH
39184: LD_INT 1
39186: NEG
39187: PUSH
39188: EMPTY
39189: LIST
39190: LIST
39191: PUSH
39192: LD_INT 1
39194: NEG
39195: PUSH
39196: LD_INT 2
39198: NEG
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: LD_INT 0
39206: PUSH
39207: LD_INT 2
39209: NEG
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: PUSH
39215: LD_INT 1
39217: PUSH
39218: LD_INT 1
39220: NEG
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: PUSH
39226: LD_INT 2
39228: PUSH
39229: LD_INT 0
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: PUSH
39236: LD_INT 2
39238: PUSH
39239: LD_INT 1
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: PUSH
39246: LD_INT 2
39248: PUSH
39249: LD_INT 2
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: PUSH
39256: LD_INT 1
39258: PUSH
39259: LD_INT 2
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: PUSH
39266: LD_INT 0
39268: PUSH
39269: LD_INT 2
39271: PUSH
39272: EMPTY
39273: LIST
39274: LIST
39275: PUSH
39276: LD_INT 1
39278: NEG
39279: PUSH
39280: LD_INT 1
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: PUSH
39287: LD_INT 2
39289: NEG
39290: PUSH
39291: LD_INT 0
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: PUSH
39298: LD_INT 2
39300: NEG
39301: PUSH
39302: LD_INT 1
39304: NEG
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: PUSH
39310: LD_INT 2
39312: NEG
39313: PUSH
39314: LD_INT 2
39316: NEG
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: LIST
39333: LIST
39334: LIST
39335: LIST
39336: LIST
39337: LIST
39338: LIST
39339: LIST
39340: LIST
39341: LIST
39342: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39343: LD_ADDR_VAR 0 21
39347: PUSH
39348: LD_INT 0
39350: PUSH
39351: LD_INT 0
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: PUSH
39358: LD_INT 0
39360: PUSH
39361: LD_INT 1
39363: NEG
39364: PUSH
39365: EMPTY
39366: LIST
39367: LIST
39368: PUSH
39369: LD_INT 1
39371: PUSH
39372: LD_INT 0
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: PUSH
39379: LD_INT 1
39381: PUSH
39382: LD_INT 1
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PUSH
39389: LD_INT 0
39391: PUSH
39392: LD_INT 1
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: PUSH
39399: LD_INT 1
39401: NEG
39402: PUSH
39403: LD_INT 0
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: PUSH
39410: LD_INT 1
39412: NEG
39413: PUSH
39414: LD_INT 1
39416: NEG
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: PUSH
39422: LD_INT 1
39424: NEG
39425: PUSH
39426: LD_INT 2
39428: NEG
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: PUSH
39434: LD_INT 0
39436: PUSH
39437: LD_INT 2
39439: NEG
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: LD_INT 1
39447: PUSH
39448: LD_INT 1
39450: NEG
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: PUSH
39456: LD_INT 2
39458: PUSH
39459: LD_INT 0
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: PUSH
39466: LD_INT 2
39468: PUSH
39469: LD_INT 1
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: PUSH
39476: LD_INT 2
39478: PUSH
39479: LD_INT 2
39481: PUSH
39482: EMPTY
39483: LIST
39484: LIST
39485: PUSH
39486: LD_INT 1
39488: PUSH
39489: LD_INT 2
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: PUSH
39496: LD_INT 0
39498: PUSH
39499: LD_INT 2
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: PUSH
39506: LD_INT 1
39508: NEG
39509: PUSH
39510: LD_INT 1
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: PUSH
39517: LD_INT 2
39519: NEG
39520: PUSH
39521: LD_INT 0
39523: PUSH
39524: EMPTY
39525: LIST
39526: LIST
39527: PUSH
39528: LD_INT 2
39530: NEG
39531: PUSH
39532: LD_INT 1
39534: NEG
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: PUSH
39540: LD_INT 2
39542: NEG
39543: PUSH
39544: LD_INT 2
39546: NEG
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: PUSH
39552: EMPTY
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: LIST
39569: LIST
39570: LIST
39571: LIST
39572: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39573: LD_ADDR_VAR 0 22
39577: PUSH
39578: LD_INT 0
39580: PUSH
39581: LD_INT 0
39583: PUSH
39584: EMPTY
39585: LIST
39586: LIST
39587: PUSH
39588: LD_INT 0
39590: PUSH
39591: LD_INT 1
39593: NEG
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: PUSH
39599: LD_INT 1
39601: PUSH
39602: LD_INT 0
39604: PUSH
39605: EMPTY
39606: LIST
39607: LIST
39608: PUSH
39609: LD_INT 1
39611: PUSH
39612: LD_INT 1
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: PUSH
39619: LD_INT 0
39621: PUSH
39622: LD_INT 1
39624: PUSH
39625: EMPTY
39626: LIST
39627: LIST
39628: PUSH
39629: LD_INT 1
39631: NEG
39632: PUSH
39633: LD_INT 0
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: PUSH
39640: LD_INT 1
39642: NEG
39643: PUSH
39644: LD_INT 1
39646: NEG
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: PUSH
39652: LD_INT 1
39654: NEG
39655: PUSH
39656: LD_INT 2
39658: NEG
39659: PUSH
39660: EMPTY
39661: LIST
39662: LIST
39663: PUSH
39664: LD_INT 0
39666: PUSH
39667: LD_INT 2
39669: NEG
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: PUSH
39675: LD_INT 1
39677: PUSH
39678: LD_INT 1
39680: NEG
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: LD_INT 2
39688: PUSH
39689: LD_INT 0
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: PUSH
39696: LD_INT 2
39698: PUSH
39699: LD_INT 1
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: PUSH
39706: LD_INT 2
39708: PUSH
39709: LD_INT 2
39711: PUSH
39712: EMPTY
39713: LIST
39714: LIST
39715: PUSH
39716: LD_INT 1
39718: PUSH
39719: LD_INT 2
39721: PUSH
39722: EMPTY
39723: LIST
39724: LIST
39725: PUSH
39726: LD_INT 0
39728: PUSH
39729: LD_INT 2
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: PUSH
39736: LD_INT 1
39738: NEG
39739: PUSH
39740: LD_INT 1
39742: PUSH
39743: EMPTY
39744: LIST
39745: LIST
39746: PUSH
39747: LD_INT 2
39749: NEG
39750: PUSH
39751: LD_INT 0
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: LD_INT 2
39760: NEG
39761: PUSH
39762: LD_INT 1
39764: NEG
39765: PUSH
39766: EMPTY
39767: LIST
39768: LIST
39769: PUSH
39770: LD_INT 2
39772: NEG
39773: PUSH
39774: LD_INT 2
39776: NEG
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: LIST
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: LIST
39797: LIST
39798: LIST
39799: LIST
39800: LIST
39801: LIST
39802: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39803: LD_ADDR_VAR 0 23
39807: PUSH
39808: LD_INT 0
39810: PUSH
39811: LD_INT 0
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: PUSH
39818: LD_INT 0
39820: PUSH
39821: LD_INT 1
39823: NEG
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: PUSH
39829: LD_INT 1
39831: PUSH
39832: LD_INT 0
39834: PUSH
39835: EMPTY
39836: LIST
39837: LIST
39838: PUSH
39839: LD_INT 1
39841: PUSH
39842: LD_INT 1
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: PUSH
39849: LD_INT 0
39851: PUSH
39852: LD_INT 1
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: PUSH
39859: LD_INT 1
39861: NEG
39862: PUSH
39863: LD_INT 0
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: LD_INT 1
39872: NEG
39873: PUSH
39874: LD_INT 1
39876: NEG
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: LD_INT 1
39884: NEG
39885: PUSH
39886: LD_INT 2
39888: NEG
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: PUSH
39894: LD_INT 0
39896: PUSH
39897: LD_INT 2
39899: NEG
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 1
39907: PUSH
39908: LD_INT 1
39910: NEG
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: LD_INT 2
39918: PUSH
39919: LD_INT 0
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: LD_INT 2
39928: PUSH
39929: LD_INT 1
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: LD_INT 2
39938: PUSH
39939: LD_INT 2
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: PUSH
39946: LD_INT 1
39948: PUSH
39949: LD_INT 2
39951: PUSH
39952: EMPTY
39953: LIST
39954: LIST
39955: PUSH
39956: LD_INT 0
39958: PUSH
39959: LD_INT 2
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: PUSH
39966: LD_INT 1
39968: NEG
39969: PUSH
39970: LD_INT 1
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: PUSH
39977: LD_INT 2
39979: NEG
39980: PUSH
39981: LD_INT 0
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: LD_INT 2
39990: NEG
39991: PUSH
39992: LD_INT 1
39994: NEG
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: PUSH
40000: LD_INT 2
40002: NEG
40003: PUSH
40004: LD_INT 2
40006: NEG
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: PUSH
40012: LD_INT 2
40014: NEG
40015: PUSH
40016: LD_INT 3
40018: NEG
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: PUSH
40024: LD_INT 1
40026: NEG
40027: PUSH
40028: LD_INT 3
40030: NEG
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: LD_INT 1
40038: PUSH
40039: LD_INT 2
40041: NEG
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: PUSH
40047: LD_INT 2
40049: PUSH
40050: LD_INT 1
40052: NEG
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
40083: LD_ADDR_VAR 0 24
40087: PUSH
40088: LD_INT 0
40090: PUSH
40091: LD_INT 0
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: LD_INT 0
40100: PUSH
40101: LD_INT 1
40103: NEG
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: PUSH
40109: LD_INT 1
40111: PUSH
40112: LD_INT 0
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 1
40121: PUSH
40122: LD_INT 1
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: PUSH
40129: LD_INT 0
40131: PUSH
40132: LD_INT 1
40134: PUSH
40135: EMPTY
40136: LIST
40137: LIST
40138: PUSH
40139: LD_INT 1
40141: NEG
40142: PUSH
40143: LD_INT 0
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: LD_INT 1
40152: NEG
40153: PUSH
40154: LD_INT 1
40156: NEG
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: LD_INT 1
40164: NEG
40165: PUSH
40166: LD_INT 2
40168: NEG
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PUSH
40174: LD_INT 0
40176: PUSH
40177: LD_INT 2
40179: NEG
40180: PUSH
40181: EMPTY
40182: LIST
40183: LIST
40184: PUSH
40185: LD_INT 1
40187: PUSH
40188: LD_INT 1
40190: NEG
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: PUSH
40196: LD_INT 2
40198: PUSH
40199: LD_INT 0
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: PUSH
40206: LD_INT 2
40208: PUSH
40209: LD_INT 1
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: PUSH
40216: LD_INT 2
40218: PUSH
40219: LD_INT 2
40221: PUSH
40222: EMPTY
40223: LIST
40224: LIST
40225: PUSH
40226: LD_INT 1
40228: PUSH
40229: LD_INT 2
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: PUSH
40236: LD_INT 0
40238: PUSH
40239: LD_INT 2
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: PUSH
40246: LD_INT 1
40248: NEG
40249: PUSH
40250: LD_INT 1
40252: PUSH
40253: EMPTY
40254: LIST
40255: LIST
40256: PUSH
40257: LD_INT 2
40259: NEG
40260: PUSH
40261: LD_INT 0
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: PUSH
40268: LD_INT 2
40270: NEG
40271: PUSH
40272: LD_INT 1
40274: NEG
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: PUSH
40280: LD_INT 2
40282: NEG
40283: PUSH
40284: LD_INT 2
40286: NEG
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: PUSH
40292: LD_INT 1
40294: PUSH
40295: LD_INT 2
40297: NEG
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: LD_INT 2
40305: PUSH
40306: LD_INT 1
40308: NEG
40309: PUSH
40310: EMPTY
40311: LIST
40312: LIST
40313: PUSH
40314: LD_INT 3
40316: PUSH
40317: LD_INT 1
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 3
40326: PUSH
40327: LD_INT 2
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: LIST
40338: LIST
40339: LIST
40340: LIST
40341: LIST
40342: LIST
40343: LIST
40344: LIST
40345: LIST
40346: LIST
40347: LIST
40348: LIST
40349: LIST
40350: LIST
40351: LIST
40352: LIST
40353: LIST
40354: LIST
40355: LIST
40356: LIST
40357: LIST
40358: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
40359: LD_ADDR_VAR 0 25
40363: PUSH
40364: LD_INT 0
40366: PUSH
40367: LD_INT 0
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PUSH
40374: LD_INT 0
40376: PUSH
40377: LD_INT 1
40379: NEG
40380: PUSH
40381: EMPTY
40382: LIST
40383: LIST
40384: PUSH
40385: LD_INT 1
40387: PUSH
40388: LD_INT 0
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: PUSH
40395: LD_INT 1
40397: PUSH
40398: LD_INT 1
40400: PUSH
40401: EMPTY
40402: LIST
40403: LIST
40404: PUSH
40405: LD_INT 0
40407: PUSH
40408: LD_INT 1
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: PUSH
40415: LD_INT 1
40417: NEG
40418: PUSH
40419: LD_INT 0
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: PUSH
40426: LD_INT 1
40428: NEG
40429: PUSH
40430: LD_INT 1
40432: NEG
40433: PUSH
40434: EMPTY
40435: LIST
40436: LIST
40437: PUSH
40438: LD_INT 1
40440: NEG
40441: PUSH
40442: LD_INT 2
40444: NEG
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: PUSH
40450: LD_INT 0
40452: PUSH
40453: LD_INT 2
40455: NEG
40456: PUSH
40457: EMPTY
40458: LIST
40459: LIST
40460: PUSH
40461: LD_INT 1
40463: PUSH
40464: LD_INT 1
40466: NEG
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: PUSH
40472: LD_INT 2
40474: PUSH
40475: LD_INT 0
40477: PUSH
40478: EMPTY
40479: LIST
40480: LIST
40481: PUSH
40482: LD_INT 2
40484: PUSH
40485: LD_INT 1
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: PUSH
40492: LD_INT 2
40494: PUSH
40495: LD_INT 2
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: PUSH
40502: LD_INT 1
40504: PUSH
40505: LD_INT 2
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: PUSH
40512: LD_INT 0
40514: PUSH
40515: LD_INT 2
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: PUSH
40522: LD_INT 1
40524: NEG
40525: PUSH
40526: LD_INT 1
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: PUSH
40533: LD_INT 2
40535: NEG
40536: PUSH
40537: LD_INT 0
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PUSH
40544: LD_INT 2
40546: NEG
40547: PUSH
40548: LD_INT 1
40550: NEG
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PUSH
40556: LD_INT 2
40558: NEG
40559: PUSH
40560: LD_INT 2
40562: NEG
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: LD_INT 3
40570: PUSH
40571: LD_INT 1
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: LD_INT 3
40580: PUSH
40581: LD_INT 2
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: PUSH
40588: LD_INT 2
40590: PUSH
40591: LD_INT 3
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_INT 1
40600: PUSH
40601: LD_INT 3
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: EMPTY
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: LIST
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
40633: LD_ADDR_VAR 0 26
40637: PUSH
40638: LD_INT 0
40640: PUSH
40641: LD_INT 0
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: PUSH
40648: LD_INT 0
40650: PUSH
40651: LD_INT 1
40653: NEG
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 1
40661: PUSH
40662: LD_INT 0
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: PUSH
40669: LD_INT 1
40671: PUSH
40672: LD_INT 1
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PUSH
40679: LD_INT 0
40681: PUSH
40682: LD_INT 1
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: LD_INT 1
40691: NEG
40692: PUSH
40693: LD_INT 0
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: LD_INT 1
40702: NEG
40703: PUSH
40704: LD_INT 1
40706: NEG
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: PUSH
40712: LD_INT 1
40714: NEG
40715: PUSH
40716: LD_INT 2
40718: NEG
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: LD_INT 0
40726: PUSH
40727: LD_INT 2
40729: NEG
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: PUSH
40735: LD_INT 1
40737: PUSH
40738: LD_INT 1
40740: NEG
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: LD_INT 2
40748: PUSH
40749: LD_INT 0
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: PUSH
40756: LD_INT 2
40758: PUSH
40759: LD_INT 1
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: PUSH
40766: LD_INT 2
40768: PUSH
40769: LD_INT 2
40771: PUSH
40772: EMPTY
40773: LIST
40774: LIST
40775: PUSH
40776: LD_INT 1
40778: PUSH
40779: LD_INT 2
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: LD_INT 0
40788: PUSH
40789: LD_INT 2
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: PUSH
40796: LD_INT 1
40798: NEG
40799: PUSH
40800: LD_INT 1
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: PUSH
40807: LD_INT 2
40809: NEG
40810: PUSH
40811: LD_INT 0
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: PUSH
40818: LD_INT 2
40820: NEG
40821: PUSH
40822: LD_INT 1
40824: NEG
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: PUSH
40830: LD_INT 2
40832: NEG
40833: PUSH
40834: LD_INT 2
40836: NEG
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: PUSH
40842: LD_INT 2
40844: PUSH
40845: LD_INT 3
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: LD_INT 1
40854: PUSH
40855: LD_INT 3
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: PUSH
40862: LD_INT 1
40864: NEG
40865: PUSH
40866: LD_INT 2
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: PUSH
40873: LD_INT 2
40875: NEG
40876: PUSH
40877: LD_INT 1
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: LIST
40908: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40909: LD_ADDR_VAR 0 27
40913: PUSH
40914: LD_INT 0
40916: PUSH
40917: LD_INT 0
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: PUSH
40924: LD_INT 0
40926: PUSH
40927: LD_INT 1
40929: NEG
40930: PUSH
40931: EMPTY
40932: LIST
40933: LIST
40934: PUSH
40935: LD_INT 1
40937: PUSH
40938: LD_INT 0
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: PUSH
40945: LD_INT 1
40947: PUSH
40948: LD_INT 1
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: LD_INT 0
40957: PUSH
40958: LD_INT 1
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: PUSH
40965: LD_INT 1
40967: NEG
40968: PUSH
40969: LD_INT 0
40971: PUSH
40972: EMPTY
40973: LIST
40974: LIST
40975: PUSH
40976: LD_INT 1
40978: NEG
40979: PUSH
40980: LD_INT 1
40982: NEG
40983: PUSH
40984: EMPTY
40985: LIST
40986: LIST
40987: PUSH
40988: LD_INT 1
40990: NEG
40991: PUSH
40992: LD_INT 2
40994: NEG
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: PUSH
41000: LD_INT 0
41002: PUSH
41003: LD_INT 2
41005: NEG
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: PUSH
41011: LD_INT 1
41013: PUSH
41014: LD_INT 1
41016: NEG
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: LD_INT 2
41024: PUSH
41025: LD_INT 0
41027: PUSH
41028: EMPTY
41029: LIST
41030: LIST
41031: PUSH
41032: LD_INT 2
41034: PUSH
41035: LD_INT 1
41037: PUSH
41038: EMPTY
41039: LIST
41040: LIST
41041: PUSH
41042: LD_INT 2
41044: PUSH
41045: LD_INT 2
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PUSH
41052: LD_INT 1
41054: PUSH
41055: LD_INT 2
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 0
41064: PUSH
41065: LD_INT 2
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PUSH
41072: LD_INT 1
41074: NEG
41075: PUSH
41076: LD_INT 1
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: PUSH
41083: LD_INT 2
41085: NEG
41086: PUSH
41087: LD_INT 0
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: PUSH
41094: LD_INT 2
41096: NEG
41097: PUSH
41098: LD_INT 1
41100: NEG
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: LD_INT 2
41108: NEG
41109: PUSH
41110: LD_INT 2
41112: NEG
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: PUSH
41118: LD_INT 1
41120: NEG
41121: PUSH
41122: LD_INT 2
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: LD_INT 2
41131: NEG
41132: PUSH
41133: LD_INT 1
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: LD_INT 3
41142: NEG
41143: PUSH
41144: LD_INT 1
41146: NEG
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: LD_INT 3
41154: NEG
41155: PUSH
41156: LD_INT 2
41158: NEG
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: PUSH
41164: EMPTY
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41189: LD_ADDR_VAR 0 28
41193: PUSH
41194: LD_INT 0
41196: PUSH
41197: LD_INT 0
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: LD_INT 0
41206: PUSH
41207: LD_INT 1
41209: NEG
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: LD_INT 1
41217: PUSH
41218: LD_INT 0
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PUSH
41225: LD_INT 1
41227: PUSH
41228: LD_INT 1
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: PUSH
41235: LD_INT 0
41237: PUSH
41238: LD_INT 1
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: LD_INT 1
41247: NEG
41248: PUSH
41249: LD_INT 0
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: LD_INT 1
41258: NEG
41259: PUSH
41260: LD_INT 1
41262: NEG
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: PUSH
41268: LD_INT 1
41270: NEG
41271: PUSH
41272: LD_INT 2
41274: NEG
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PUSH
41280: LD_INT 0
41282: PUSH
41283: LD_INT 2
41285: NEG
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: PUSH
41291: LD_INT 1
41293: PUSH
41294: LD_INT 1
41296: NEG
41297: PUSH
41298: EMPTY
41299: LIST
41300: LIST
41301: PUSH
41302: LD_INT 2
41304: PUSH
41305: LD_INT 0
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: PUSH
41312: LD_INT 2
41314: PUSH
41315: LD_INT 1
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: PUSH
41322: LD_INT 2
41324: PUSH
41325: LD_INT 2
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: PUSH
41332: LD_INT 1
41334: PUSH
41335: LD_INT 2
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 0
41344: PUSH
41345: LD_INT 2
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: LD_INT 1
41354: NEG
41355: PUSH
41356: LD_INT 1
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: PUSH
41363: LD_INT 2
41365: NEG
41366: PUSH
41367: LD_INT 0
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: PUSH
41374: LD_INT 2
41376: NEG
41377: PUSH
41378: LD_INT 1
41380: NEG
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: PUSH
41386: LD_INT 2
41388: NEG
41389: PUSH
41390: LD_INT 2
41392: NEG
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: LD_INT 2
41400: NEG
41401: PUSH
41402: LD_INT 3
41404: NEG
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: PUSH
41410: LD_INT 1
41412: NEG
41413: PUSH
41414: LD_INT 3
41416: NEG
41417: PUSH
41418: EMPTY
41419: LIST
41420: LIST
41421: PUSH
41422: LD_INT 3
41424: NEG
41425: PUSH
41426: LD_INT 1
41428: NEG
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: PUSH
41434: LD_INT 3
41436: NEG
41437: PUSH
41438: LD_INT 2
41440: NEG
41441: PUSH
41442: EMPTY
41443: LIST
41444: LIST
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: LIST
41461: LIST
41462: LIST
41463: LIST
41464: LIST
41465: LIST
41466: LIST
41467: LIST
41468: LIST
41469: LIST
41470: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41471: LD_ADDR_VAR 0 29
41475: PUSH
41476: LD_INT 0
41478: PUSH
41479: LD_INT 0
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PUSH
41486: LD_INT 0
41488: PUSH
41489: LD_INT 1
41491: NEG
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: PUSH
41497: LD_INT 1
41499: PUSH
41500: LD_INT 0
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: PUSH
41507: LD_INT 1
41509: PUSH
41510: LD_INT 1
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: PUSH
41517: LD_INT 0
41519: PUSH
41520: LD_INT 1
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: LD_INT 1
41529: NEG
41530: PUSH
41531: LD_INT 0
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 1
41540: NEG
41541: PUSH
41542: LD_INT 1
41544: NEG
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 1
41552: NEG
41553: PUSH
41554: LD_INT 2
41556: NEG
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: PUSH
41562: LD_INT 0
41564: PUSH
41565: LD_INT 2
41567: NEG
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: PUSH
41573: LD_INT 1
41575: PUSH
41576: LD_INT 1
41578: NEG
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: LD_INT 2
41586: PUSH
41587: LD_INT 0
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: PUSH
41594: LD_INT 2
41596: PUSH
41597: LD_INT 1
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: LD_INT 1
41606: PUSH
41607: LD_INT 2
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: PUSH
41614: LD_INT 0
41616: PUSH
41617: LD_INT 2
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: PUSH
41624: LD_INT 1
41626: NEG
41627: PUSH
41628: LD_INT 1
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: PUSH
41635: LD_INT 2
41637: NEG
41638: PUSH
41639: LD_INT 1
41641: NEG
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 2
41649: NEG
41650: PUSH
41651: LD_INT 2
41653: NEG
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PUSH
41659: LD_INT 2
41661: NEG
41662: PUSH
41663: LD_INT 3
41665: NEG
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: PUSH
41671: LD_INT 2
41673: PUSH
41674: LD_INT 1
41676: NEG
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: PUSH
41682: LD_INT 3
41684: PUSH
41685: LD_INT 1
41687: PUSH
41688: EMPTY
41689: LIST
41690: LIST
41691: PUSH
41692: LD_INT 1
41694: PUSH
41695: LD_INT 3
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: PUSH
41702: LD_INT 1
41704: NEG
41705: PUSH
41706: LD_INT 2
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: PUSH
41713: LD_INT 3
41715: NEG
41716: PUSH
41717: LD_INT 2
41719: NEG
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: PUSH
41725: EMPTY
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: LIST
41733: LIST
41734: LIST
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: LIST
41748: LIST
41749: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41750: LD_ADDR_VAR 0 30
41754: PUSH
41755: LD_INT 0
41757: PUSH
41758: LD_INT 0
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: PUSH
41765: LD_INT 0
41767: PUSH
41768: LD_INT 1
41770: NEG
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: PUSH
41776: LD_INT 1
41778: PUSH
41779: LD_INT 0
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: LD_INT 1
41788: PUSH
41789: LD_INT 1
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: PUSH
41796: LD_INT 0
41798: PUSH
41799: LD_INT 1
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 1
41808: NEG
41809: PUSH
41810: LD_INT 0
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: PUSH
41817: LD_INT 1
41819: NEG
41820: PUSH
41821: LD_INT 1
41823: NEG
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: PUSH
41829: LD_INT 1
41831: NEG
41832: PUSH
41833: LD_INT 2
41835: NEG
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 0
41843: PUSH
41844: LD_INT 2
41846: NEG
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 1
41854: PUSH
41855: LD_INT 1
41857: NEG
41858: PUSH
41859: EMPTY
41860: LIST
41861: LIST
41862: PUSH
41863: LD_INT 2
41865: PUSH
41866: LD_INT 0
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PUSH
41873: LD_INT 2
41875: PUSH
41876: LD_INT 1
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: PUSH
41883: LD_INT 2
41885: PUSH
41886: LD_INT 2
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: LD_INT 1
41895: PUSH
41896: LD_INT 2
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: PUSH
41903: LD_INT 1
41905: NEG
41906: PUSH
41907: LD_INT 1
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 2
41916: NEG
41917: PUSH
41918: LD_INT 0
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: LD_INT 2
41927: NEG
41928: PUSH
41929: LD_INT 1
41931: NEG
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: PUSH
41937: LD_INT 1
41939: NEG
41940: PUSH
41941: LD_INT 3
41943: NEG
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: LD_INT 1
41951: PUSH
41952: LD_INT 2
41954: NEG
41955: PUSH
41956: EMPTY
41957: LIST
41958: LIST
41959: PUSH
41960: LD_INT 3
41962: PUSH
41963: LD_INT 2
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: PUSH
41970: LD_INT 2
41972: PUSH
41973: LD_INT 3
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: PUSH
41980: LD_INT 2
41982: NEG
41983: PUSH
41984: LD_INT 1
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 3
41993: NEG
41994: PUSH
41995: LD_INT 1
41997: NEG
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: LIST
42026: LIST
42027: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42028: LD_ADDR_VAR 0 31
42032: PUSH
42033: LD_INT 0
42035: PUSH
42036: LD_INT 0
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: PUSH
42043: LD_INT 0
42045: PUSH
42046: LD_INT 1
42048: NEG
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: PUSH
42054: LD_INT 1
42056: PUSH
42057: LD_INT 0
42059: PUSH
42060: EMPTY
42061: LIST
42062: LIST
42063: PUSH
42064: LD_INT 1
42066: PUSH
42067: LD_INT 1
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: PUSH
42074: LD_INT 0
42076: PUSH
42077: LD_INT 1
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 1
42086: NEG
42087: PUSH
42088: LD_INT 0
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 1
42097: NEG
42098: PUSH
42099: LD_INT 1
42101: NEG
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: LD_INT 1
42109: NEG
42110: PUSH
42111: LD_INT 2
42113: NEG
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: LD_INT 1
42121: PUSH
42122: LD_INT 1
42124: NEG
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: LD_INT 2
42132: PUSH
42133: LD_INT 0
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 2
42142: PUSH
42143: LD_INT 1
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PUSH
42150: LD_INT 2
42152: PUSH
42153: LD_INT 2
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: LD_INT 1
42162: PUSH
42163: LD_INT 2
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 0
42172: PUSH
42173: LD_INT 2
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: PUSH
42180: LD_INT 1
42182: NEG
42183: PUSH
42184: LD_INT 1
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: LD_INT 2
42193: NEG
42194: PUSH
42195: LD_INT 1
42197: NEG
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: PUSH
42203: LD_INT 2
42205: NEG
42206: PUSH
42207: LD_INT 2
42209: NEG
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PUSH
42215: LD_INT 2
42217: NEG
42218: PUSH
42219: LD_INT 3
42221: NEG
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 2
42229: PUSH
42230: LD_INT 1
42232: NEG
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: PUSH
42238: LD_INT 3
42240: PUSH
42241: LD_INT 1
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 1
42250: PUSH
42251: LD_INT 3
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 1
42260: NEG
42261: PUSH
42262: LD_INT 2
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PUSH
42269: LD_INT 3
42271: NEG
42272: PUSH
42273: LD_INT 2
42275: NEG
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: LIST
42295: LIST
42296: LIST
42297: LIST
42298: LIST
42299: LIST
42300: LIST
42301: LIST
42302: LIST
42303: LIST
42304: LIST
42305: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42306: LD_ADDR_VAR 0 32
42310: PUSH
42311: LD_INT 0
42313: PUSH
42314: LD_INT 0
42316: PUSH
42317: EMPTY
42318: LIST
42319: LIST
42320: PUSH
42321: LD_INT 0
42323: PUSH
42324: LD_INT 1
42326: NEG
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: PUSH
42332: LD_INT 1
42334: PUSH
42335: LD_INT 0
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: PUSH
42342: LD_INT 1
42344: PUSH
42345: LD_INT 1
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 0
42354: PUSH
42355: LD_INT 1
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: PUSH
42362: LD_INT 1
42364: NEG
42365: PUSH
42366: LD_INT 0
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 1
42375: NEG
42376: PUSH
42377: LD_INT 1
42379: NEG
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: PUSH
42385: LD_INT 1
42387: NEG
42388: PUSH
42389: LD_INT 2
42391: NEG
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: PUSH
42397: LD_INT 0
42399: PUSH
42400: LD_INT 2
42402: NEG
42403: PUSH
42404: EMPTY
42405: LIST
42406: LIST
42407: PUSH
42408: LD_INT 1
42410: PUSH
42411: LD_INT 1
42413: NEG
42414: PUSH
42415: EMPTY
42416: LIST
42417: LIST
42418: PUSH
42419: LD_INT 2
42421: PUSH
42422: LD_INT 1
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: PUSH
42429: LD_INT 2
42431: PUSH
42432: LD_INT 2
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PUSH
42439: LD_INT 1
42441: PUSH
42442: LD_INT 2
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: PUSH
42449: LD_INT 0
42451: PUSH
42452: LD_INT 2
42454: PUSH
42455: EMPTY
42456: LIST
42457: LIST
42458: PUSH
42459: LD_INT 1
42461: NEG
42462: PUSH
42463: LD_INT 1
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: PUSH
42470: LD_INT 2
42472: NEG
42473: PUSH
42474: LD_INT 0
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: PUSH
42481: LD_INT 2
42483: NEG
42484: PUSH
42485: LD_INT 1
42487: NEG
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PUSH
42493: LD_INT 1
42495: NEG
42496: PUSH
42497: LD_INT 3
42499: NEG
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: PUSH
42505: LD_INT 1
42507: PUSH
42508: LD_INT 2
42510: NEG
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: LD_INT 3
42518: PUSH
42519: LD_INT 2
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: PUSH
42526: LD_INT 2
42528: PUSH
42529: LD_INT 3
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: LD_INT 2
42538: NEG
42539: PUSH
42540: LD_INT 1
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: PUSH
42547: LD_INT 3
42549: NEG
42550: PUSH
42551: LD_INT 1
42553: NEG
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: LIST
42583: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42584: LD_ADDR_VAR 0 33
42588: PUSH
42589: LD_INT 0
42591: PUSH
42592: LD_INT 0
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: PUSH
42599: LD_INT 0
42601: PUSH
42602: LD_INT 1
42604: NEG
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: LD_INT 1
42612: PUSH
42613: LD_INT 0
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: PUSH
42620: LD_INT 1
42622: PUSH
42623: LD_INT 1
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: LD_INT 0
42632: PUSH
42633: LD_INT 1
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_INT 1
42642: NEG
42643: PUSH
42644: LD_INT 0
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 1
42653: NEG
42654: PUSH
42655: LD_INT 1
42657: NEG
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: PUSH
42663: LD_INT 1
42665: NEG
42666: PUSH
42667: LD_INT 2
42669: NEG
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: LD_INT 1
42677: PUSH
42678: LD_INT 1
42680: NEG
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: PUSH
42686: LD_INT 2
42688: PUSH
42689: LD_INT 0
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: PUSH
42696: LD_INT 2
42698: PUSH
42699: LD_INT 1
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: PUSH
42706: LD_INT 1
42708: PUSH
42709: LD_INT 2
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: PUSH
42716: LD_INT 0
42718: PUSH
42719: LD_INT 2
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: PUSH
42726: LD_INT 1
42728: NEG
42729: PUSH
42730: LD_INT 1
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 2
42739: NEG
42740: PUSH
42741: LD_INT 0
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 2
42750: NEG
42751: PUSH
42752: LD_INT 1
42754: NEG
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: LD_INT 2
42762: NEG
42763: PUSH
42764: LD_INT 2
42766: NEG
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: PUSH
42772: LD_INT 2
42774: NEG
42775: PUSH
42776: LD_INT 3
42778: NEG
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: PUSH
42784: LD_INT 2
42786: PUSH
42787: LD_INT 1
42789: NEG
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 3
42797: PUSH
42798: LD_INT 1
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: PUSH
42805: LD_INT 1
42807: PUSH
42808: LD_INT 3
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 1
42817: NEG
42818: PUSH
42819: LD_INT 2
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: PUSH
42826: LD_INT 3
42828: NEG
42829: PUSH
42830: LD_INT 2
42832: NEG
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: EMPTY
42839: LIST
42840: LIST
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: LIST
42853: LIST
42854: LIST
42855: LIST
42856: LIST
42857: LIST
42858: LIST
42859: LIST
42860: LIST
42861: LIST
42862: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42863: LD_ADDR_VAR 0 34
42867: PUSH
42868: LD_INT 0
42870: PUSH
42871: LD_INT 0
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: PUSH
42878: LD_INT 0
42880: PUSH
42881: LD_INT 1
42883: NEG
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: PUSH
42889: LD_INT 1
42891: PUSH
42892: LD_INT 0
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: PUSH
42899: LD_INT 1
42901: PUSH
42902: LD_INT 1
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PUSH
42909: LD_INT 0
42911: PUSH
42912: LD_INT 1
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PUSH
42919: LD_INT 1
42921: NEG
42922: PUSH
42923: LD_INT 0
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: LD_INT 1
42932: NEG
42933: PUSH
42934: LD_INT 1
42936: NEG
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: PUSH
42942: LD_INT 1
42944: NEG
42945: PUSH
42946: LD_INT 2
42948: NEG
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: PUSH
42954: LD_INT 0
42956: PUSH
42957: LD_INT 2
42959: NEG
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: PUSH
42965: LD_INT 1
42967: PUSH
42968: LD_INT 1
42970: NEG
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 2
42978: PUSH
42979: LD_INT 1
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 2
42988: PUSH
42989: LD_INT 2
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: PUSH
42996: LD_INT 1
42998: PUSH
42999: LD_INT 2
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PUSH
43006: LD_INT 1
43008: NEG
43009: PUSH
43010: LD_INT 1
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: PUSH
43017: LD_INT 2
43019: NEG
43020: PUSH
43021: LD_INT 0
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: PUSH
43028: LD_INT 2
43030: NEG
43031: PUSH
43032: LD_INT 1
43034: NEG
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: PUSH
43040: LD_INT 2
43042: NEG
43043: PUSH
43044: LD_INT 2
43046: NEG
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PUSH
43052: LD_INT 1
43054: NEG
43055: PUSH
43056: LD_INT 3
43058: NEG
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: PUSH
43064: LD_INT 1
43066: PUSH
43067: LD_INT 2
43069: NEG
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: LD_INT 3
43077: PUSH
43078: LD_INT 2
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: LD_INT 2
43087: PUSH
43088: LD_INT 3
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: LD_INT 2
43097: NEG
43098: PUSH
43099: LD_INT 1
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 3
43108: NEG
43109: PUSH
43110: LD_INT 1
43112: NEG
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: LIST
43127: LIST
43128: LIST
43129: LIST
43130: LIST
43131: LIST
43132: LIST
43133: LIST
43134: LIST
43135: LIST
43136: LIST
43137: LIST
43138: LIST
43139: LIST
43140: LIST
43141: LIST
43142: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43143: LD_ADDR_VAR 0 35
43147: PUSH
43148: LD_INT 0
43150: PUSH
43151: LD_INT 0
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: LD_INT 0
43160: PUSH
43161: LD_INT 1
43163: NEG
43164: PUSH
43165: EMPTY
43166: LIST
43167: LIST
43168: PUSH
43169: LD_INT 1
43171: PUSH
43172: LD_INT 0
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: PUSH
43179: LD_INT 1
43181: PUSH
43182: LD_INT 1
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: PUSH
43189: LD_INT 0
43191: PUSH
43192: LD_INT 1
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: PUSH
43199: LD_INT 1
43201: NEG
43202: PUSH
43203: LD_INT 0
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PUSH
43210: LD_INT 1
43212: NEG
43213: PUSH
43214: LD_INT 1
43216: NEG
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: PUSH
43222: LD_INT 2
43224: PUSH
43225: LD_INT 1
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: PUSH
43232: LD_INT 2
43234: NEG
43235: PUSH
43236: LD_INT 1
43238: NEG
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: LIST
43253: LIST
43254: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43255: LD_ADDR_VAR 0 36
43259: PUSH
43260: LD_INT 0
43262: PUSH
43263: LD_INT 0
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: PUSH
43270: LD_INT 0
43272: PUSH
43273: LD_INT 1
43275: NEG
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: LD_INT 1
43283: PUSH
43284: LD_INT 0
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: PUSH
43291: LD_INT 1
43293: PUSH
43294: LD_INT 1
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: PUSH
43301: LD_INT 0
43303: PUSH
43304: LD_INT 1
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: PUSH
43311: LD_INT 1
43313: NEG
43314: PUSH
43315: LD_INT 0
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: PUSH
43322: LD_INT 1
43324: NEG
43325: PUSH
43326: LD_INT 1
43328: NEG
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 1
43336: NEG
43337: PUSH
43338: LD_INT 2
43340: NEG
43341: PUSH
43342: EMPTY
43343: LIST
43344: LIST
43345: PUSH
43346: LD_INT 1
43348: PUSH
43349: LD_INT 2
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: LIST
43360: LIST
43361: LIST
43362: LIST
43363: LIST
43364: LIST
43365: LIST
43366: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43367: LD_ADDR_VAR 0 37
43371: PUSH
43372: LD_INT 0
43374: PUSH
43375: LD_INT 0
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: LD_INT 0
43384: PUSH
43385: LD_INT 1
43387: NEG
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: PUSH
43393: LD_INT 1
43395: PUSH
43396: LD_INT 0
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: PUSH
43403: LD_INT 1
43405: PUSH
43406: LD_INT 1
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: LD_INT 0
43415: PUSH
43416: LD_INT 1
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PUSH
43423: LD_INT 1
43425: NEG
43426: PUSH
43427: LD_INT 0
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: LD_INT 1
43436: NEG
43437: PUSH
43438: LD_INT 1
43440: NEG
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 1
43448: PUSH
43449: LD_INT 1
43451: NEG
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: LD_INT 1
43459: NEG
43460: PUSH
43461: LD_INT 1
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: LIST
43477: LIST
43478: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43479: LD_ADDR_VAR 0 38
43483: PUSH
43484: LD_INT 0
43486: PUSH
43487: LD_INT 0
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 0
43496: PUSH
43497: LD_INT 1
43499: NEG
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: LD_INT 1
43507: PUSH
43508: LD_INT 0
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 1
43517: PUSH
43518: LD_INT 1
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 0
43527: PUSH
43528: LD_INT 1
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: LD_INT 1
43537: NEG
43538: PUSH
43539: LD_INT 0
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PUSH
43546: LD_INT 1
43548: NEG
43549: PUSH
43550: LD_INT 1
43552: NEG
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: PUSH
43558: LD_INT 2
43560: PUSH
43561: LD_INT 1
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: LD_INT 2
43570: NEG
43571: PUSH
43572: LD_INT 1
43574: NEG
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: LIST
43584: LIST
43585: LIST
43586: LIST
43587: LIST
43588: LIST
43589: LIST
43590: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43591: LD_ADDR_VAR 0 39
43595: PUSH
43596: LD_INT 0
43598: PUSH
43599: LD_INT 0
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 0
43608: PUSH
43609: LD_INT 1
43611: NEG
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 1
43619: PUSH
43620: LD_INT 0
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 1
43629: PUSH
43630: LD_INT 1
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PUSH
43637: LD_INT 0
43639: PUSH
43640: LD_INT 1
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 1
43649: NEG
43650: PUSH
43651: LD_INT 0
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: LD_INT 1
43660: NEG
43661: PUSH
43662: LD_INT 1
43664: NEG
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: PUSH
43670: LD_INT 1
43672: NEG
43673: PUSH
43674: LD_INT 2
43676: NEG
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 1
43684: PUSH
43685: LD_INT 2
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: LIST
43696: LIST
43697: LIST
43698: LIST
43699: LIST
43700: LIST
43701: LIST
43702: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43703: LD_ADDR_VAR 0 40
43707: PUSH
43708: LD_INT 0
43710: PUSH
43711: LD_INT 0
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: LD_INT 0
43720: PUSH
43721: LD_INT 1
43723: NEG
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: PUSH
43729: LD_INT 1
43731: PUSH
43732: LD_INT 0
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: LD_INT 1
43741: PUSH
43742: LD_INT 1
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PUSH
43749: LD_INT 0
43751: PUSH
43752: LD_INT 1
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: LD_INT 1
43761: NEG
43762: PUSH
43763: LD_INT 0
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: PUSH
43770: LD_INT 1
43772: NEG
43773: PUSH
43774: LD_INT 1
43776: NEG
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: PUSH
43782: LD_INT 1
43784: PUSH
43785: LD_INT 1
43787: NEG
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PUSH
43793: LD_INT 1
43795: NEG
43796: PUSH
43797: LD_INT 1
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: LIST
43808: LIST
43809: LIST
43810: LIST
43811: LIST
43812: LIST
43813: LIST
43814: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43815: LD_ADDR_VAR 0 41
43819: PUSH
43820: LD_INT 0
43822: PUSH
43823: LD_INT 0
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: LD_INT 0
43832: PUSH
43833: LD_INT 1
43835: NEG
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: PUSH
43841: LD_INT 1
43843: PUSH
43844: LD_INT 0
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: PUSH
43851: LD_INT 1
43853: PUSH
43854: LD_INT 1
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: LD_INT 0
43863: PUSH
43864: LD_INT 1
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: LD_INT 1
43873: NEG
43874: PUSH
43875: LD_INT 0
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 1
43884: NEG
43885: PUSH
43886: LD_INT 1
43888: NEG
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 1
43896: NEG
43897: PUSH
43898: LD_INT 2
43900: NEG
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 1
43908: PUSH
43909: LD_INT 1
43911: NEG
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: PUSH
43917: LD_INT 2
43919: PUSH
43920: LD_INT 0
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: PUSH
43927: LD_INT 2
43929: PUSH
43930: LD_INT 1
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: LD_INT 2
43939: PUSH
43940: LD_INT 2
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 1
43949: PUSH
43950: LD_INT 2
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 1
43959: NEG
43960: PUSH
43961: LD_INT 1
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: LD_INT 2
43970: NEG
43971: PUSH
43972: LD_INT 0
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 2
43981: NEG
43982: PUSH
43983: LD_INT 1
43985: NEG
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: LD_INT 2
43993: NEG
43994: PUSH
43995: LD_INT 2
43997: NEG
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 2
44005: NEG
44006: PUSH
44007: LD_INT 3
44009: NEG
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: LD_INT 2
44017: PUSH
44018: LD_INT 1
44020: NEG
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: PUSH
44026: LD_INT 3
44028: PUSH
44029: LD_INT 0
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: LD_INT 3
44038: PUSH
44039: LD_INT 1
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 3
44048: PUSH
44049: LD_INT 2
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 3
44058: PUSH
44059: LD_INT 3
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 2
44068: PUSH
44069: LD_INT 3
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 2
44078: NEG
44079: PUSH
44080: LD_INT 1
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 3
44089: NEG
44090: PUSH
44091: LD_INT 0
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 3
44100: NEG
44101: PUSH
44102: LD_INT 1
44104: NEG
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: LD_INT 3
44112: NEG
44113: PUSH
44114: LD_INT 2
44116: NEG
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: PUSH
44122: LD_INT 3
44124: NEG
44125: PUSH
44126: LD_INT 3
44128: NEG
44129: PUSH
44130: EMPTY
44131: LIST
44132: LIST
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: LIST
44141: LIST
44142: LIST
44143: LIST
44144: LIST
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: LIST
44153: LIST
44154: LIST
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44165: LD_ADDR_VAR 0 42
44169: PUSH
44170: LD_INT 0
44172: PUSH
44173: LD_INT 0
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 0
44182: PUSH
44183: LD_INT 1
44185: NEG
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 1
44193: PUSH
44194: LD_INT 0
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 1
44203: PUSH
44204: LD_INT 1
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: LD_INT 0
44213: PUSH
44214: LD_INT 1
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PUSH
44221: LD_INT 1
44223: NEG
44224: PUSH
44225: LD_INT 0
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 1
44234: NEG
44235: PUSH
44236: LD_INT 1
44238: NEG
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: LD_INT 1
44246: NEG
44247: PUSH
44248: LD_INT 2
44250: NEG
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 0
44258: PUSH
44259: LD_INT 2
44261: NEG
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: LD_INT 1
44269: PUSH
44270: LD_INT 1
44272: NEG
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: PUSH
44278: LD_INT 2
44280: PUSH
44281: LD_INT 1
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: PUSH
44288: LD_INT 2
44290: PUSH
44291: LD_INT 2
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: LD_INT 1
44300: PUSH
44301: LD_INT 2
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: PUSH
44308: LD_INT 0
44310: PUSH
44311: LD_INT 2
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PUSH
44318: LD_INT 1
44320: NEG
44321: PUSH
44322: LD_INT 1
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: LD_INT 2
44331: NEG
44332: PUSH
44333: LD_INT 1
44335: NEG
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 2
44343: NEG
44344: PUSH
44345: LD_INT 2
44347: NEG
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: LD_INT 2
44355: NEG
44356: PUSH
44357: LD_INT 3
44359: NEG
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: PUSH
44365: LD_INT 1
44367: NEG
44368: PUSH
44369: LD_INT 3
44371: NEG
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 0
44379: PUSH
44380: LD_INT 3
44382: NEG
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: PUSH
44388: LD_INT 1
44390: PUSH
44391: LD_INT 2
44393: NEG
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: PUSH
44399: LD_INT 3
44401: PUSH
44402: LD_INT 2
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: LD_INT 3
44411: PUSH
44412: LD_INT 3
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: LD_INT 2
44421: PUSH
44422: LD_INT 3
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: PUSH
44429: LD_INT 1
44431: PUSH
44432: LD_INT 3
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: PUSH
44439: LD_INT 0
44441: PUSH
44442: LD_INT 3
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: PUSH
44449: LD_INT 1
44451: NEG
44452: PUSH
44453: LD_INT 2
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_INT 3
44462: NEG
44463: PUSH
44464: LD_INT 2
44466: NEG
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: PUSH
44472: LD_INT 3
44474: NEG
44475: PUSH
44476: LD_INT 3
44478: NEG
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44515: LD_ADDR_VAR 0 43
44519: PUSH
44520: LD_INT 0
44522: PUSH
44523: LD_INT 0
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PUSH
44530: LD_INT 0
44532: PUSH
44533: LD_INT 1
44535: NEG
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: LD_INT 1
44543: PUSH
44544: LD_INT 0
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 1
44553: PUSH
44554: LD_INT 1
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 0
44563: PUSH
44564: LD_INT 1
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 1
44573: NEG
44574: PUSH
44575: LD_INT 0
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 1
44584: NEG
44585: PUSH
44586: LD_INT 1
44588: NEG
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: LD_INT 1
44596: NEG
44597: PUSH
44598: LD_INT 2
44600: NEG
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: LD_INT 0
44608: PUSH
44609: LD_INT 2
44611: NEG
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: PUSH
44617: LD_INT 1
44619: PUSH
44620: LD_INT 1
44622: NEG
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: LD_INT 2
44630: PUSH
44631: LD_INT 0
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 2
44640: PUSH
44641: LD_INT 1
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: PUSH
44648: LD_INT 1
44650: PUSH
44651: LD_INT 2
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: LD_INT 0
44660: PUSH
44661: LD_INT 2
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 1
44670: NEG
44671: PUSH
44672: LD_INT 1
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: LD_INT 2
44681: NEG
44682: PUSH
44683: LD_INT 0
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: PUSH
44690: LD_INT 2
44692: NEG
44693: PUSH
44694: LD_INT 1
44696: NEG
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: LD_INT 1
44704: NEG
44705: PUSH
44706: LD_INT 3
44708: NEG
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 0
44716: PUSH
44717: LD_INT 3
44719: NEG
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: LD_INT 1
44727: PUSH
44728: LD_INT 2
44730: NEG
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 2
44738: PUSH
44739: LD_INT 1
44741: NEG
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: LD_INT 3
44749: PUSH
44750: LD_INT 0
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 3
44759: PUSH
44760: LD_INT 1
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: LD_INT 1
44769: PUSH
44770: LD_INT 3
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: LD_INT 0
44779: PUSH
44780: LD_INT 3
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 1
44789: NEG
44790: PUSH
44791: LD_INT 2
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 2
44800: NEG
44801: PUSH
44802: LD_INT 1
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 3
44811: NEG
44812: PUSH
44813: LD_INT 0
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 3
44822: NEG
44823: PUSH
44824: LD_INT 1
44826: NEG
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: LIST
44862: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44863: LD_ADDR_VAR 0 44
44867: PUSH
44868: LD_INT 0
44870: PUSH
44871: LD_INT 0
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: PUSH
44878: LD_INT 0
44880: PUSH
44881: LD_INT 1
44883: NEG
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 1
44891: PUSH
44892: LD_INT 0
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 1
44901: PUSH
44902: LD_INT 1
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 0
44911: PUSH
44912: LD_INT 1
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 1
44921: NEG
44922: PUSH
44923: LD_INT 0
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 1
44932: NEG
44933: PUSH
44934: LD_INT 1
44936: NEG
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 1
44944: NEG
44945: PUSH
44946: LD_INT 2
44948: NEG
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 1
44956: PUSH
44957: LD_INT 1
44959: NEG
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: PUSH
44965: LD_INT 2
44967: PUSH
44968: LD_INT 0
44970: PUSH
44971: EMPTY
44972: LIST
44973: LIST
44974: PUSH
44975: LD_INT 2
44977: PUSH
44978: LD_INT 1
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: PUSH
44985: LD_INT 2
44987: PUSH
44988: LD_INT 2
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 1
44997: PUSH
44998: LD_INT 2
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 1
45007: NEG
45008: PUSH
45009: LD_INT 1
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 2
45018: NEG
45019: PUSH
45020: LD_INT 0
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: PUSH
45027: LD_INT 2
45029: NEG
45030: PUSH
45031: LD_INT 1
45033: NEG
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: LD_INT 2
45041: NEG
45042: PUSH
45043: LD_INT 2
45045: NEG
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 2
45053: NEG
45054: PUSH
45055: LD_INT 3
45057: NEG
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 2
45065: PUSH
45066: LD_INT 1
45068: NEG
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: LD_INT 3
45076: PUSH
45077: LD_INT 0
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 3
45086: PUSH
45087: LD_INT 1
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 3
45096: PUSH
45097: LD_INT 2
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 3
45106: PUSH
45107: LD_INT 3
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 2
45116: PUSH
45117: LD_INT 3
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 2
45126: NEG
45127: PUSH
45128: LD_INT 1
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: LD_INT 3
45137: NEG
45138: PUSH
45139: LD_INT 0
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 3
45148: NEG
45149: PUSH
45150: LD_INT 1
45152: NEG
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 3
45160: NEG
45161: PUSH
45162: LD_INT 2
45164: NEG
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 3
45172: NEG
45173: PUSH
45174: LD_INT 3
45176: NEG
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: LIST
45186: LIST
45187: LIST
45188: LIST
45189: LIST
45190: LIST
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45213: LD_ADDR_VAR 0 45
45217: PUSH
45218: LD_INT 0
45220: PUSH
45221: LD_INT 0
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: LD_INT 0
45230: PUSH
45231: LD_INT 1
45233: NEG
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: LD_INT 1
45241: PUSH
45242: LD_INT 0
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: LD_INT 1
45251: PUSH
45252: LD_INT 1
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: LD_INT 0
45261: PUSH
45262: LD_INT 1
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 1
45271: NEG
45272: PUSH
45273: LD_INT 0
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 1
45282: NEG
45283: PUSH
45284: LD_INT 1
45286: NEG
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 1
45294: NEG
45295: PUSH
45296: LD_INT 2
45298: NEG
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: LD_INT 0
45306: PUSH
45307: LD_INT 2
45309: NEG
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: LD_INT 1
45317: PUSH
45318: LD_INT 1
45320: NEG
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: LD_INT 2
45328: PUSH
45329: LD_INT 1
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 2
45338: PUSH
45339: LD_INT 2
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PUSH
45346: LD_INT 1
45348: PUSH
45349: LD_INT 2
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 0
45358: PUSH
45359: LD_INT 2
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 1
45368: NEG
45369: PUSH
45370: LD_INT 1
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 2
45379: NEG
45380: PUSH
45381: LD_INT 1
45383: NEG
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 2
45391: NEG
45392: PUSH
45393: LD_INT 2
45395: NEG
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: LD_INT 2
45403: NEG
45404: PUSH
45405: LD_INT 3
45407: NEG
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: LD_INT 1
45415: NEG
45416: PUSH
45417: LD_INT 3
45419: NEG
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: LD_INT 0
45427: PUSH
45428: LD_INT 3
45430: NEG
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 1
45438: PUSH
45439: LD_INT 2
45441: NEG
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 3
45449: PUSH
45450: LD_INT 2
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 3
45459: PUSH
45460: LD_INT 3
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: LD_INT 2
45469: PUSH
45470: LD_INT 3
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 1
45479: PUSH
45480: LD_INT 3
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 0
45489: PUSH
45490: LD_INT 3
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 1
45499: NEG
45500: PUSH
45501: LD_INT 2
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 3
45510: NEG
45511: PUSH
45512: LD_INT 2
45514: NEG
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: PUSH
45520: LD_INT 3
45522: NEG
45523: PUSH
45524: LD_INT 3
45526: NEG
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: LIST
45546: LIST
45547: LIST
45548: LIST
45549: LIST
45550: LIST
45551: LIST
45552: LIST
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45563: LD_ADDR_VAR 0 46
45567: PUSH
45568: LD_INT 0
45570: PUSH
45571: LD_INT 0
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 0
45580: PUSH
45581: LD_INT 1
45583: NEG
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 1
45591: PUSH
45592: LD_INT 0
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 1
45601: PUSH
45602: LD_INT 1
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 0
45611: PUSH
45612: LD_INT 1
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 1
45621: NEG
45622: PUSH
45623: LD_INT 0
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 1
45632: NEG
45633: PUSH
45634: LD_INT 1
45636: NEG
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 1
45644: NEG
45645: PUSH
45646: LD_INT 2
45648: NEG
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 0
45656: PUSH
45657: LD_INT 2
45659: NEG
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 1
45667: PUSH
45668: LD_INT 1
45670: NEG
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 2
45678: PUSH
45679: LD_INT 0
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 2
45688: PUSH
45689: LD_INT 1
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 1
45698: PUSH
45699: LD_INT 2
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: LD_INT 0
45708: PUSH
45709: LD_INT 2
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 1
45718: NEG
45719: PUSH
45720: LD_INT 1
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 2
45729: NEG
45730: PUSH
45731: LD_INT 0
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 2
45740: NEG
45741: PUSH
45742: LD_INT 1
45744: NEG
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: LD_INT 1
45752: NEG
45753: PUSH
45754: LD_INT 3
45756: NEG
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 0
45764: PUSH
45765: LD_INT 3
45767: NEG
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 1
45775: PUSH
45776: LD_INT 2
45778: NEG
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 2
45786: PUSH
45787: LD_INT 1
45789: NEG
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 3
45797: PUSH
45798: LD_INT 0
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 3
45807: PUSH
45808: LD_INT 1
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 1
45817: PUSH
45818: LD_INT 3
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 0
45827: PUSH
45828: LD_INT 3
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 1
45837: NEG
45838: PUSH
45839: LD_INT 2
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 2
45848: NEG
45849: PUSH
45850: LD_INT 1
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: LD_INT 3
45859: NEG
45860: PUSH
45861: LD_INT 0
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 3
45870: NEG
45871: PUSH
45872: LD_INT 1
45874: NEG
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: LIST
45909: LIST
45910: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45911: LD_ADDR_VAR 0 47
45915: PUSH
45916: LD_INT 0
45918: PUSH
45919: LD_INT 0
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 0
45928: PUSH
45929: LD_INT 1
45931: NEG
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 1
45939: PUSH
45940: LD_INT 0
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 1
45949: PUSH
45950: LD_INT 1
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 0
45959: PUSH
45960: LD_INT 1
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 1
45969: NEG
45970: PUSH
45971: LD_INT 0
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 1
45980: NEG
45981: PUSH
45982: LD_INT 1
45984: NEG
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: LD_INT 1
45992: NEG
45993: PUSH
45994: LD_INT 2
45996: NEG
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 0
46004: PUSH
46005: LD_INT 2
46007: NEG
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 1
46015: PUSH
46016: LD_INT 1
46018: NEG
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 2
46026: NEG
46027: PUSH
46028: LD_INT 1
46030: NEG
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 2
46038: NEG
46039: PUSH
46040: LD_INT 2
46042: NEG
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: LIST
46058: LIST
46059: LIST
46060: LIST
46061: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46062: LD_ADDR_VAR 0 48
46066: PUSH
46067: LD_INT 0
46069: PUSH
46070: LD_INT 0
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 0
46079: PUSH
46080: LD_INT 1
46082: NEG
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 1
46090: PUSH
46091: LD_INT 0
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 1
46100: PUSH
46101: LD_INT 1
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 0
46110: PUSH
46111: LD_INT 1
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 1
46120: NEG
46121: PUSH
46122: LD_INT 0
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 1
46131: NEG
46132: PUSH
46133: LD_INT 1
46135: NEG
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 1
46143: NEG
46144: PUSH
46145: LD_INT 2
46147: NEG
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 0
46155: PUSH
46156: LD_INT 2
46158: NEG
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 1
46166: PUSH
46167: LD_INT 1
46169: NEG
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 2
46177: PUSH
46178: LD_INT 0
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: LD_INT 2
46187: PUSH
46188: LD_INT 1
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46209: LD_ADDR_VAR 0 49
46213: PUSH
46214: LD_INT 0
46216: PUSH
46217: LD_INT 0
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 0
46226: PUSH
46227: LD_INT 1
46229: NEG
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 1
46237: PUSH
46238: LD_INT 0
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 1
46247: PUSH
46248: LD_INT 1
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 0
46257: PUSH
46258: LD_INT 1
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 1
46267: NEG
46268: PUSH
46269: LD_INT 0
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 1
46278: NEG
46279: PUSH
46280: LD_INT 1
46282: NEG
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 1
46290: PUSH
46291: LD_INT 1
46293: NEG
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 2
46301: PUSH
46302: LD_INT 0
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 2
46311: PUSH
46312: LD_INT 1
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 2
46321: PUSH
46322: LD_INT 2
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 1
46331: PUSH
46332: LD_INT 2
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46353: LD_ADDR_VAR 0 50
46357: PUSH
46358: LD_INT 0
46360: PUSH
46361: LD_INT 0
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 0
46370: PUSH
46371: LD_INT 1
46373: NEG
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 1
46381: PUSH
46382: LD_INT 0
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 1
46391: PUSH
46392: LD_INT 1
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 0
46401: PUSH
46402: LD_INT 1
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 1
46411: NEG
46412: PUSH
46413: LD_INT 0
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 1
46422: NEG
46423: PUSH
46424: LD_INT 1
46426: NEG
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 2
46434: PUSH
46435: LD_INT 1
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: LD_INT 2
46444: PUSH
46445: LD_INT 2
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: LD_INT 1
46454: PUSH
46455: LD_INT 2
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: LD_INT 0
46464: PUSH
46465: LD_INT 2
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 1
46474: NEG
46475: PUSH
46476: LD_INT 1
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: LIST
46487: LIST
46488: LIST
46489: LIST
46490: LIST
46491: LIST
46492: LIST
46493: LIST
46494: LIST
46495: LIST
46496: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
46497: LD_ADDR_VAR 0 51
46501: PUSH
46502: LD_INT 0
46504: PUSH
46505: LD_INT 0
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 0
46514: PUSH
46515: LD_INT 1
46517: NEG
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: LD_INT 1
46525: PUSH
46526: LD_INT 0
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 1
46535: PUSH
46536: LD_INT 1
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 0
46545: PUSH
46546: LD_INT 1
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 1
46555: NEG
46556: PUSH
46557: LD_INT 0
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 1
46566: NEG
46567: PUSH
46568: LD_INT 1
46570: NEG
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 1
46578: PUSH
46579: LD_INT 2
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 0
46588: PUSH
46589: LD_INT 2
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 1
46598: NEG
46599: PUSH
46600: LD_INT 1
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 2
46609: NEG
46610: PUSH
46611: LD_INT 0
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 2
46620: NEG
46621: PUSH
46622: LD_INT 1
46624: NEG
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: LIST
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46644: LD_ADDR_VAR 0 52
46648: PUSH
46649: LD_INT 0
46651: PUSH
46652: LD_INT 0
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 0
46661: PUSH
46662: LD_INT 1
46664: NEG
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 1
46672: PUSH
46673: LD_INT 0
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 1
46682: PUSH
46683: LD_INT 1
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 0
46692: PUSH
46693: LD_INT 1
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 1
46702: NEG
46703: PUSH
46704: LD_INT 0
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 1
46713: NEG
46714: PUSH
46715: LD_INT 1
46717: NEG
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: LD_INT 1
46725: NEG
46726: PUSH
46727: LD_INT 2
46729: NEG
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 1
46737: NEG
46738: PUSH
46739: LD_INT 1
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 2
46748: NEG
46749: PUSH
46750: LD_INT 0
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 2
46759: NEG
46760: PUSH
46761: LD_INT 1
46763: NEG
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 2
46771: NEG
46772: PUSH
46773: LD_INT 2
46775: NEG
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46795: LD_ADDR_VAR 0 53
46799: PUSH
46800: LD_INT 0
46802: PUSH
46803: LD_INT 0
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 0
46812: PUSH
46813: LD_INT 1
46815: NEG
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 1
46823: PUSH
46824: LD_INT 0
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 1
46833: PUSH
46834: LD_INT 1
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 0
46843: PUSH
46844: LD_INT 1
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 1
46853: NEG
46854: PUSH
46855: LD_INT 0
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 1
46864: NEG
46865: PUSH
46866: LD_INT 1
46868: NEG
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: PUSH
46874: LD_INT 1
46876: NEG
46877: PUSH
46878: LD_INT 2
46880: NEG
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 0
46888: PUSH
46889: LD_INT 2
46891: NEG
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: LD_INT 1
46899: PUSH
46900: LD_INT 1
46902: NEG
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 2
46910: PUSH
46911: LD_INT 0
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 2
46920: PUSH
46921: LD_INT 1
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: LD_INT 2
46930: PUSH
46931: LD_INT 2
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 1
46940: PUSH
46941: LD_INT 2
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 0
46950: PUSH
46951: LD_INT 2
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 1
46960: NEG
46961: PUSH
46962: LD_INT 1
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 2
46971: NEG
46972: PUSH
46973: LD_INT 0
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: PUSH
46980: LD_INT 2
46982: NEG
46983: PUSH
46984: LD_INT 1
46986: NEG
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 2
46994: NEG
46995: PUSH
46996: LD_INT 2
46998: NEG
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47025: LD_ADDR_VAR 0 54
47029: PUSH
47030: LD_INT 0
47032: PUSH
47033: LD_INT 0
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 0
47042: PUSH
47043: LD_INT 1
47045: NEG
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 1
47053: PUSH
47054: LD_INT 0
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: LD_INT 1
47063: PUSH
47064: LD_INT 1
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 0
47073: PUSH
47074: LD_INT 1
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 1
47083: NEG
47084: PUSH
47085: LD_INT 0
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 1
47094: NEG
47095: PUSH
47096: LD_INT 1
47098: NEG
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 1
47106: NEG
47107: PUSH
47108: LD_INT 2
47110: NEG
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 0
47118: PUSH
47119: LD_INT 2
47121: NEG
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 1
47129: PUSH
47130: LD_INT 1
47132: NEG
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 2
47140: PUSH
47141: LD_INT 0
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 2
47150: PUSH
47151: LD_INT 1
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 2
47160: PUSH
47161: LD_INT 2
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 1
47170: PUSH
47171: LD_INT 2
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 0
47180: PUSH
47181: LD_INT 2
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 1
47190: NEG
47191: PUSH
47192: LD_INT 1
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 2
47201: NEG
47202: PUSH
47203: LD_INT 0
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 2
47212: NEG
47213: PUSH
47214: LD_INT 1
47216: NEG
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 2
47224: NEG
47225: PUSH
47226: LD_INT 2
47228: NEG
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47255: LD_ADDR_VAR 0 55
47259: PUSH
47260: LD_INT 0
47262: PUSH
47263: LD_INT 0
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 0
47272: PUSH
47273: LD_INT 1
47275: NEG
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 1
47283: PUSH
47284: LD_INT 0
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 1
47293: PUSH
47294: LD_INT 1
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 0
47303: PUSH
47304: LD_INT 1
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 1
47313: NEG
47314: PUSH
47315: LD_INT 0
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 1
47324: NEG
47325: PUSH
47326: LD_INT 1
47328: NEG
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 1
47336: NEG
47337: PUSH
47338: LD_INT 2
47340: NEG
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 0
47348: PUSH
47349: LD_INT 2
47351: NEG
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 1
47359: PUSH
47360: LD_INT 1
47362: NEG
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 2
47370: PUSH
47371: LD_INT 0
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 2
47380: PUSH
47381: LD_INT 1
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 2
47390: PUSH
47391: LD_INT 2
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 1
47400: PUSH
47401: LD_INT 2
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 0
47410: PUSH
47411: LD_INT 2
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 1
47420: NEG
47421: PUSH
47422: LD_INT 1
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 2
47431: NEG
47432: PUSH
47433: LD_INT 0
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 2
47442: NEG
47443: PUSH
47444: LD_INT 1
47446: NEG
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 2
47454: NEG
47455: PUSH
47456: LD_INT 2
47458: NEG
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47485: LD_ADDR_VAR 0 56
47489: PUSH
47490: LD_INT 0
47492: PUSH
47493: LD_INT 0
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PUSH
47500: LD_INT 0
47502: PUSH
47503: LD_INT 1
47505: NEG
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PUSH
47511: LD_INT 1
47513: PUSH
47514: LD_INT 0
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 1
47523: PUSH
47524: LD_INT 1
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 0
47533: PUSH
47534: LD_INT 1
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 1
47543: NEG
47544: PUSH
47545: LD_INT 0
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 1
47554: NEG
47555: PUSH
47556: LD_INT 1
47558: NEG
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 1
47566: NEG
47567: PUSH
47568: LD_INT 2
47570: NEG
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 0
47578: PUSH
47579: LD_INT 2
47581: NEG
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 1
47589: PUSH
47590: LD_INT 1
47592: NEG
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 2
47600: PUSH
47601: LD_INT 0
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 2
47610: PUSH
47611: LD_INT 1
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 2
47620: PUSH
47621: LD_INT 2
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 1
47630: PUSH
47631: LD_INT 2
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: LD_INT 0
47640: PUSH
47641: LD_INT 2
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 1
47650: NEG
47651: PUSH
47652: LD_INT 1
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 2
47661: NEG
47662: PUSH
47663: LD_INT 0
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 2
47672: NEG
47673: PUSH
47674: LD_INT 1
47676: NEG
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 2
47684: NEG
47685: PUSH
47686: LD_INT 2
47688: NEG
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47715: LD_ADDR_VAR 0 57
47719: PUSH
47720: LD_INT 0
47722: PUSH
47723: LD_INT 0
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 0
47732: PUSH
47733: LD_INT 1
47735: NEG
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: LD_INT 1
47743: PUSH
47744: LD_INT 0
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 1
47753: PUSH
47754: LD_INT 1
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 0
47763: PUSH
47764: LD_INT 1
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 1
47773: NEG
47774: PUSH
47775: LD_INT 0
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 1
47784: NEG
47785: PUSH
47786: LD_INT 1
47788: NEG
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 1
47796: NEG
47797: PUSH
47798: LD_INT 2
47800: NEG
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 0
47808: PUSH
47809: LD_INT 2
47811: NEG
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 1
47819: PUSH
47820: LD_INT 1
47822: NEG
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 2
47830: PUSH
47831: LD_INT 0
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 2
47840: PUSH
47841: LD_INT 1
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 2
47850: PUSH
47851: LD_INT 2
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 1
47860: PUSH
47861: LD_INT 2
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 0
47870: PUSH
47871: LD_INT 2
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 1
47880: NEG
47881: PUSH
47882: LD_INT 1
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 2
47891: NEG
47892: PUSH
47893: LD_INT 0
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 2
47902: NEG
47903: PUSH
47904: LD_INT 1
47906: NEG
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 2
47914: NEG
47915: PUSH
47916: LD_INT 2
47918: NEG
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47945: LD_ADDR_VAR 0 58
47949: PUSH
47950: LD_INT 0
47952: PUSH
47953: LD_INT 0
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: LD_INT 0
47962: PUSH
47963: LD_INT 1
47965: NEG
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 1
47973: PUSH
47974: LD_INT 0
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 1
47983: PUSH
47984: LD_INT 1
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 0
47993: PUSH
47994: LD_INT 1
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 1
48003: NEG
48004: PUSH
48005: LD_INT 0
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 1
48014: NEG
48015: PUSH
48016: LD_INT 1
48018: NEG
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 1
48026: NEG
48027: PUSH
48028: LD_INT 2
48030: NEG
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 0
48038: PUSH
48039: LD_INT 2
48041: NEG
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: PUSH
48047: LD_INT 1
48049: PUSH
48050: LD_INT 1
48052: NEG
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: LD_INT 2
48060: PUSH
48061: LD_INT 0
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 2
48070: PUSH
48071: LD_INT 1
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 2
48080: PUSH
48081: LD_INT 2
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 1
48090: PUSH
48091: LD_INT 2
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 0
48100: PUSH
48101: LD_INT 2
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 1
48110: NEG
48111: PUSH
48112: LD_INT 1
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 2
48121: NEG
48122: PUSH
48123: LD_INT 0
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 2
48132: NEG
48133: PUSH
48134: LD_INT 1
48136: NEG
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 2
48144: NEG
48145: PUSH
48146: LD_INT 2
48148: NEG
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48175: LD_ADDR_VAR 0 59
48179: PUSH
48180: LD_INT 0
48182: PUSH
48183: LD_INT 0
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: LD_INT 0
48192: PUSH
48193: LD_INT 1
48195: NEG
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 1
48203: PUSH
48204: LD_INT 0
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: LD_INT 1
48213: PUSH
48214: LD_INT 1
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 0
48223: PUSH
48224: LD_INT 1
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 1
48233: NEG
48234: PUSH
48235: LD_INT 0
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 1
48244: NEG
48245: PUSH
48246: LD_INT 1
48248: NEG
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48263: LD_ADDR_VAR 0 60
48267: PUSH
48268: LD_INT 0
48270: PUSH
48271: LD_INT 0
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 0
48280: PUSH
48281: LD_INT 1
48283: NEG
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 1
48291: PUSH
48292: LD_INT 0
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 1
48301: PUSH
48302: LD_INT 1
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: LD_INT 0
48311: PUSH
48312: LD_INT 1
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: PUSH
48319: LD_INT 1
48321: NEG
48322: PUSH
48323: LD_INT 0
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 1
48332: NEG
48333: PUSH
48334: LD_INT 1
48336: NEG
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: LIST
48346: LIST
48347: LIST
48348: LIST
48349: LIST
48350: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48351: LD_ADDR_VAR 0 61
48355: PUSH
48356: LD_INT 0
48358: PUSH
48359: LD_INT 0
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 0
48368: PUSH
48369: LD_INT 1
48371: NEG
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 1
48379: PUSH
48380: LD_INT 0
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 1
48389: PUSH
48390: LD_INT 1
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 0
48399: PUSH
48400: LD_INT 1
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 1
48409: NEG
48410: PUSH
48411: LD_INT 0
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 1
48420: NEG
48421: PUSH
48422: LD_INT 1
48424: NEG
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48439: LD_ADDR_VAR 0 62
48443: PUSH
48444: LD_INT 0
48446: PUSH
48447: LD_INT 0
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 0
48456: PUSH
48457: LD_INT 1
48459: NEG
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 1
48467: PUSH
48468: LD_INT 0
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 1
48477: PUSH
48478: LD_INT 1
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 0
48487: PUSH
48488: LD_INT 1
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 1
48497: NEG
48498: PUSH
48499: LD_INT 0
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 1
48508: NEG
48509: PUSH
48510: LD_INT 1
48512: NEG
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48527: LD_ADDR_VAR 0 63
48531: PUSH
48532: LD_INT 0
48534: PUSH
48535: LD_INT 0
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 0
48544: PUSH
48545: LD_INT 1
48547: NEG
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 1
48555: PUSH
48556: LD_INT 0
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 1
48565: PUSH
48566: LD_INT 1
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 0
48575: PUSH
48576: LD_INT 1
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 1
48585: NEG
48586: PUSH
48587: LD_INT 0
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 1
48596: NEG
48597: PUSH
48598: LD_INT 1
48600: NEG
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: LIST
48614: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48615: LD_ADDR_VAR 0 64
48619: PUSH
48620: LD_INT 0
48622: PUSH
48623: LD_INT 0
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 0
48632: PUSH
48633: LD_INT 1
48635: NEG
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 1
48643: PUSH
48644: LD_INT 0
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 1
48653: PUSH
48654: LD_INT 1
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 0
48663: PUSH
48664: LD_INT 1
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 1
48673: NEG
48674: PUSH
48675: LD_INT 0
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 1
48684: NEG
48685: PUSH
48686: LD_INT 1
48688: NEG
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: ST_TO_ADDR
// end ; 1 :
48703: GO 54600
48705: LD_INT 1
48707: DOUBLE
48708: EQUAL
48709: IFTRUE 48713
48711: GO 51336
48713: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48714: LD_ADDR_VAR 0 11
48718: PUSH
48719: LD_INT 1
48721: NEG
48722: PUSH
48723: LD_INT 3
48725: NEG
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 0
48733: PUSH
48734: LD_INT 3
48736: NEG
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 1
48744: PUSH
48745: LD_INT 2
48747: NEG
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: LIST
48757: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48758: LD_ADDR_VAR 0 12
48762: PUSH
48763: LD_INT 2
48765: PUSH
48766: LD_INT 1
48768: NEG
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 3
48776: PUSH
48777: LD_INT 0
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 3
48786: PUSH
48787: LD_INT 1
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: LIST
48798: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48799: LD_ADDR_VAR 0 13
48803: PUSH
48804: LD_INT 3
48806: PUSH
48807: LD_INT 2
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 3
48816: PUSH
48817: LD_INT 3
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PUSH
48824: LD_INT 2
48826: PUSH
48827: LD_INT 3
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: LIST
48838: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48839: LD_ADDR_VAR 0 14
48843: PUSH
48844: LD_INT 1
48846: PUSH
48847: LD_INT 3
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: LD_INT 0
48856: PUSH
48857: LD_INT 3
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 1
48866: NEG
48867: PUSH
48868: LD_INT 2
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: LIST
48879: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48880: LD_ADDR_VAR 0 15
48884: PUSH
48885: LD_INT 2
48887: NEG
48888: PUSH
48889: LD_INT 1
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 3
48898: NEG
48899: PUSH
48900: LD_INT 0
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 3
48909: NEG
48910: PUSH
48911: LD_INT 1
48913: NEG
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: LIST
48923: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48924: LD_ADDR_VAR 0 16
48928: PUSH
48929: LD_INT 2
48931: NEG
48932: PUSH
48933: LD_INT 3
48935: NEG
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 3
48943: NEG
48944: PUSH
48945: LD_INT 2
48947: NEG
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 3
48955: NEG
48956: PUSH
48957: LD_INT 3
48959: NEG
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: LIST
48969: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48970: LD_ADDR_VAR 0 17
48974: PUSH
48975: LD_INT 1
48977: NEG
48978: PUSH
48979: LD_INT 3
48981: NEG
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 0
48989: PUSH
48990: LD_INT 3
48992: NEG
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 1
49000: PUSH
49001: LD_INT 2
49003: NEG
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: LIST
49013: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49014: LD_ADDR_VAR 0 18
49018: PUSH
49019: LD_INT 2
49021: PUSH
49022: LD_INT 1
49024: NEG
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 3
49032: PUSH
49033: LD_INT 0
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 3
49042: PUSH
49043: LD_INT 1
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: LIST
49054: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49055: LD_ADDR_VAR 0 19
49059: PUSH
49060: LD_INT 3
49062: PUSH
49063: LD_INT 2
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 3
49072: PUSH
49073: LD_INT 3
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 2
49082: PUSH
49083: LD_INT 3
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: LIST
49094: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49095: LD_ADDR_VAR 0 20
49099: PUSH
49100: LD_INT 1
49102: PUSH
49103: LD_INT 3
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: PUSH
49110: LD_INT 0
49112: PUSH
49113: LD_INT 3
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: LD_INT 1
49122: NEG
49123: PUSH
49124: LD_INT 2
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: LIST
49135: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49136: LD_ADDR_VAR 0 21
49140: PUSH
49141: LD_INT 2
49143: NEG
49144: PUSH
49145: LD_INT 1
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 3
49154: NEG
49155: PUSH
49156: LD_INT 0
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 3
49165: NEG
49166: PUSH
49167: LD_INT 1
49169: NEG
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: LIST
49179: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49180: LD_ADDR_VAR 0 22
49184: PUSH
49185: LD_INT 2
49187: NEG
49188: PUSH
49189: LD_INT 3
49191: NEG
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 3
49199: NEG
49200: PUSH
49201: LD_INT 2
49203: NEG
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 3
49211: NEG
49212: PUSH
49213: LD_INT 3
49215: NEG
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: LIST
49225: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
49226: LD_ADDR_VAR 0 23
49230: PUSH
49231: LD_INT 0
49233: PUSH
49234: LD_INT 3
49236: NEG
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 1
49244: NEG
49245: PUSH
49246: LD_INT 4
49248: NEG
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 1
49256: PUSH
49257: LD_INT 3
49259: NEG
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: LIST
49269: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
49270: LD_ADDR_VAR 0 24
49274: PUSH
49275: LD_INT 3
49277: PUSH
49278: LD_INT 0
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 3
49287: PUSH
49288: LD_INT 1
49290: NEG
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 4
49298: PUSH
49299: LD_INT 1
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: LIST
49310: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
49311: LD_ADDR_VAR 0 25
49315: PUSH
49316: LD_INT 3
49318: PUSH
49319: LD_INT 3
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 4
49328: PUSH
49329: LD_INT 3
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 3
49338: PUSH
49339: LD_INT 4
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: LIST
49350: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
49351: LD_ADDR_VAR 0 26
49355: PUSH
49356: LD_INT 0
49358: PUSH
49359: LD_INT 3
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 1
49368: PUSH
49369: LD_INT 4
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 1
49378: NEG
49379: PUSH
49380: LD_INT 3
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: LIST
49391: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
49392: LD_ADDR_VAR 0 27
49396: PUSH
49397: LD_INT 3
49399: NEG
49400: PUSH
49401: LD_INT 0
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 3
49410: NEG
49411: PUSH
49412: LD_INT 1
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 4
49421: NEG
49422: PUSH
49423: LD_INT 1
49425: NEG
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: LIST
49435: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
49436: LD_ADDR_VAR 0 28
49440: PUSH
49441: LD_INT 3
49443: NEG
49444: PUSH
49445: LD_INT 3
49447: NEG
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 3
49455: NEG
49456: PUSH
49457: LD_INT 4
49459: NEG
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 4
49467: NEG
49468: PUSH
49469: LD_INT 3
49471: NEG
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: LIST
49481: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
49482: LD_ADDR_VAR 0 29
49486: PUSH
49487: LD_INT 1
49489: NEG
49490: PUSH
49491: LD_INT 3
49493: NEG
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 0
49501: PUSH
49502: LD_INT 3
49504: NEG
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: LD_INT 1
49512: PUSH
49513: LD_INT 2
49515: NEG
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 1
49523: NEG
49524: PUSH
49525: LD_INT 4
49527: NEG
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 0
49535: PUSH
49536: LD_INT 4
49538: NEG
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 1
49546: PUSH
49547: LD_INT 3
49549: NEG
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 1
49557: NEG
49558: PUSH
49559: LD_INT 5
49561: NEG
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 0
49569: PUSH
49570: LD_INT 5
49572: NEG
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 1
49580: PUSH
49581: LD_INT 4
49583: NEG
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 1
49591: NEG
49592: PUSH
49593: LD_INT 6
49595: NEG
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 0
49603: PUSH
49604: LD_INT 6
49606: NEG
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 1
49614: PUSH
49615: LD_INT 5
49617: NEG
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
49637: LD_ADDR_VAR 0 30
49641: PUSH
49642: LD_INT 2
49644: PUSH
49645: LD_INT 1
49647: NEG
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 3
49655: PUSH
49656: LD_INT 0
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 3
49665: PUSH
49666: LD_INT 1
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 3
49675: PUSH
49676: LD_INT 1
49678: NEG
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 4
49686: PUSH
49687: LD_INT 0
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 4
49696: PUSH
49697: LD_INT 1
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 4
49706: PUSH
49707: LD_INT 1
49709: NEG
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 5
49717: PUSH
49718: LD_INT 0
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 5
49727: PUSH
49728: LD_INT 1
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PUSH
49735: LD_INT 5
49737: PUSH
49738: LD_INT 1
49740: NEG
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 6
49748: PUSH
49749: LD_INT 0
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 6
49758: PUSH
49759: LD_INT 1
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
49780: LD_ADDR_VAR 0 31
49784: PUSH
49785: LD_INT 3
49787: PUSH
49788: LD_INT 2
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 3
49797: PUSH
49798: LD_INT 3
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 2
49807: PUSH
49808: LD_INT 3
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 4
49817: PUSH
49818: LD_INT 3
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 4
49827: PUSH
49828: LD_INT 4
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 3
49837: PUSH
49838: LD_INT 4
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 5
49847: PUSH
49848: LD_INT 4
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: LD_INT 5
49857: PUSH
49858: LD_INT 5
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 4
49867: PUSH
49868: LD_INT 5
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 6
49877: PUSH
49878: LD_INT 5
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 6
49887: PUSH
49888: LD_INT 6
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: LD_INT 5
49897: PUSH
49898: LD_INT 6
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
49919: LD_ADDR_VAR 0 32
49923: PUSH
49924: LD_INT 1
49926: PUSH
49927: LD_INT 3
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_INT 0
49936: PUSH
49937: LD_INT 3
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: LD_INT 1
49946: NEG
49947: PUSH
49948: LD_INT 2
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 1
49957: PUSH
49958: LD_INT 4
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 0
49967: PUSH
49968: LD_INT 4
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 1
49977: NEG
49978: PUSH
49979: LD_INT 3
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 1
49988: PUSH
49989: LD_INT 5
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 0
49998: PUSH
49999: LD_INT 5
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 1
50008: NEG
50009: PUSH
50010: LD_INT 4
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_INT 1
50019: PUSH
50020: LD_INT 6
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 0
50029: PUSH
50030: LD_INT 6
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 1
50039: NEG
50040: PUSH
50041: LD_INT 5
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
50062: LD_ADDR_VAR 0 33
50066: PUSH
50067: LD_INT 2
50069: NEG
50070: PUSH
50071: LD_INT 1
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 3
50080: NEG
50081: PUSH
50082: LD_INT 0
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 3
50091: NEG
50092: PUSH
50093: LD_INT 1
50095: NEG
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 3
50103: NEG
50104: PUSH
50105: LD_INT 1
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 4
50114: NEG
50115: PUSH
50116: LD_INT 0
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PUSH
50123: LD_INT 4
50125: NEG
50126: PUSH
50127: LD_INT 1
50129: NEG
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 4
50137: NEG
50138: PUSH
50139: LD_INT 1
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 5
50148: NEG
50149: PUSH
50150: LD_INT 0
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 5
50159: NEG
50160: PUSH
50161: LD_INT 1
50163: NEG
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 5
50171: NEG
50172: PUSH
50173: LD_INT 1
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 6
50182: NEG
50183: PUSH
50184: LD_INT 0
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 6
50193: NEG
50194: PUSH
50195: LD_INT 1
50197: NEG
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
50217: LD_ADDR_VAR 0 34
50221: PUSH
50222: LD_INT 2
50224: NEG
50225: PUSH
50226: LD_INT 3
50228: NEG
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 3
50236: NEG
50237: PUSH
50238: LD_INT 2
50240: NEG
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 3
50248: NEG
50249: PUSH
50250: LD_INT 3
50252: NEG
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 3
50260: NEG
50261: PUSH
50262: LD_INT 4
50264: NEG
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 4
50272: NEG
50273: PUSH
50274: LD_INT 3
50276: NEG
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 4
50284: NEG
50285: PUSH
50286: LD_INT 4
50288: NEG
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 4
50296: NEG
50297: PUSH
50298: LD_INT 5
50300: NEG
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 5
50308: NEG
50309: PUSH
50310: LD_INT 4
50312: NEG
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 5
50320: NEG
50321: PUSH
50322: LD_INT 5
50324: NEG
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: LD_INT 5
50332: NEG
50333: PUSH
50334: LD_INT 6
50336: NEG
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 6
50344: NEG
50345: PUSH
50346: LD_INT 5
50348: NEG
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 6
50356: NEG
50357: PUSH
50358: LD_INT 6
50360: NEG
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: LIST
50374: LIST
50375: LIST
50376: LIST
50377: LIST
50378: LIST
50379: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
50380: LD_ADDR_VAR 0 41
50384: PUSH
50385: LD_INT 0
50387: PUSH
50388: LD_INT 2
50390: NEG
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 1
50398: NEG
50399: PUSH
50400: LD_INT 3
50402: NEG
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 1
50410: PUSH
50411: LD_INT 2
50413: NEG
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: LIST
50423: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
50424: LD_ADDR_VAR 0 42
50428: PUSH
50429: LD_INT 2
50431: PUSH
50432: LD_INT 0
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 2
50441: PUSH
50442: LD_INT 1
50444: NEG
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 3
50452: PUSH
50453: LD_INT 1
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: LIST
50464: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
50465: LD_ADDR_VAR 0 43
50469: PUSH
50470: LD_INT 2
50472: PUSH
50473: LD_INT 2
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: LD_INT 3
50482: PUSH
50483: LD_INT 2
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 2
50492: PUSH
50493: LD_INT 3
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: LIST
50504: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
50505: LD_ADDR_VAR 0 44
50509: PUSH
50510: LD_INT 0
50512: PUSH
50513: LD_INT 2
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 1
50522: PUSH
50523: LD_INT 3
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 1
50532: NEG
50533: PUSH
50534: LD_INT 2
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: LIST
50545: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50546: LD_ADDR_VAR 0 45
50550: PUSH
50551: LD_INT 2
50553: NEG
50554: PUSH
50555: LD_INT 0
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 2
50564: NEG
50565: PUSH
50566: LD_INT 1
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 3
50575: NEG
50576: PUSH
50577: LD_INT 1
50579: NEG
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: LIST
50589: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
50590: LD_ADDR_VAR 0 46
50594: PUSH
50595: LD_INT 2
50597: NEG
50598: PUSH
50599: LD_INT 2
50601: NEG
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 2
50609: NEG
50610: PUSH
50611: LD_INT 3
50613: NEG
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 3
50621: NEG
50622: PUSH
50623: LD_INT 2
50625: NEG
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: LIST
50635: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
50636: LD_ADDR_VAR 0 47
50640: PUSH
50641: LD_INT 2
50643: NEG
50644: PUSH
50645: LD_INT 3
50647: NEG
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 1
50655: NEG
50656: PUSH
50657: LD_INT 3
50659: NEG
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50669: LD_ADDR_VAR 0 48
50673: PUSH
50674: LD_INT 1
50676: PUSH
50677: LD_INT 2
50679: NEG
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 2
50687: PUSH
50688: LD_INT 1
50690: NEG
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
50700: LD_ADDR_VAR 0 49
50704: PUSH
50705: LD_INT 3
50707: PUSH
50708: LD_INT 1
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 3
50717: PUSH
50718: LD_INT 2
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
50729: LD_ADDR_VAR 0 50
50733: PUSH
50734: LD_INT 2
50736: PUSH
50737: LD_INT 3
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 1
50746: PUSH
50747: LD_INT 3
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50758: LD_ADDR_VAR 0 51
50762: PUSH
50763: LD_INT 1
50765: NEG
50766: PUSH
50767: LD_INT 2
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 2
50776: NEG
50777: PUSH
50778: LD_INT 1
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50789: LD_ADDR_VAR 0 52
50793: PUSH
50794: LD_INT 3
50796: NEG
50797: PUSH
50798: LD_INT 1
50800: NEG
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 3
50808: NEG
50809: PUSH
50810: LD_INT 2
50812: NEG
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50822: LD_ADDR_VAR 0 53
50826: PUSH
50827: LD_INT 1
50829: NEG
50830: PUSH
50831: LD_INT 3
50833: NEG
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 0
50841: PUSH
50842: LD_INT 3
50844: NEG
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 1
50852: PUSH
50853: LD_INT 2
50855: NEG
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: LIST
50865: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50866: LD_ADDR_VAR 0 54
50870: PUSH
50871: LD_INT 2
50873: PUSH
50874: LD_INT 1
50876: NEG
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 3
50884: PUSH
50885: LD_INT 0
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 3
50894: PUSH
50895: LD_INT 1
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: LIST
50906: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50907: LD_ADDR_VAR 0 55
50911: PUSH
50912: LD_INT 3
50914: PUSH
50915: LD_INT 2
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 3
50924: PUSH
50925: LD_INT 3
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 2
50934: PUSH
50935: LD_INT 3
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: LIST
50946: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50947: LD_ADDR_VAR 0 56
50951: PUSH
50952: LD_INT 1
50954: PUSH
50955: LD_INT 3
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 0
50964: PUSH
50965: LD_INT 3
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 1
50974: NEG
50975: PUSH
50976: LD_INT 2
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: LIST
50987: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50988: LD_ADDR_VAR 0 57
50992: PUSH
50993: LD_INT 2
50995: NEG
50996: PUSH
50997: LD_INT 1
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 3
51006: NEG
51007: PUSH
51008: LD_INT 0
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 3
51017: NEG
51018: PUSH
51019: LD_INT 1
51021: NEG
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: LIST
51031: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51032: LD_ADDR_VAR 0 58
51036: PUSH
51037: LD_INT 2
51039: NEG
51040: PUSH
51041: LD_INT 3
51043: NEG
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: LD_INT 3
51051: NEG
51052: PUSH
51053: LD_INT 2
51055: NEG
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 3
51063: NEG
51064: PUSH
51065: LD_INT 3
51067: NEG
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: LIST
51077: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
51078: LD_ADDR_VAR 0 59
51082: PUSH
51083: LD_INT 1
51085: NEG
51086: PUSH
51087: LD_INT 2
51089: NEG
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 0
51097: PUSH
51098: LD_INT 2
51100: NEG
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 1
51108: PUSH
51109: LD_INT 1
51111: NEG
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: LIST
51121: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51122: LD_ADDR_VAR 0 60
51126: PUSH
51127: LD_INT 1
51129: PUSH
51130: LD_INT 1
51132: NEG
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 2
51140: PUSH
51141: LD_INT 0
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 2
51150: PUSH
51151: LD_INT 1
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: LIST
51162: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51163: LD_ADDR_VAR 0 61
51167: PUSH
51168: LD_INT 2
51170: PUSH
51171: LD_INT 1
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 2
51180: PUSH
51181: LD_INT 2
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 1
51190: PUSH
51191: LD_INT 2
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: LIST
51202: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51203: LD_ADDR_VAR 0 62
51207: PUSH
51208: LD_INT 1
51210: PUSH
51211: LD_INT 2
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 0
51220: PUSH
51221: LD_INT 2
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 1
51230: NEG
51231: PUSH
51232: LD_INT 1
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: LIST
51243: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51244: LD_ADDR_VAR 0 63
51248: PUSH
51249: LD_INT 1
51251: NEG
51252: PUSH
51253: LD_INT 1
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 2
51262: NEG
51263: PUSH
51264: LD_INT 0
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 2
51273: NEG
51274: PUSH
51275: LD_INT 1
51277: NEG
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: LIST
51287: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51288: LD_ADDR_VAR 0 64
51292: PUSH
51293: LD_INT 1
51295: NEG
51296: PUSH
51297: LD_INT 2
51299: NEG
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 2
51307: NEG
51308: PUSH
51309: LD_INT 1
51311: NEG
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 2
51319: NEG
51320: PUSH
51321: LD_INT 2
51323: NEG
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: LIST
51333: ST_TO_ADDR
// end ; 2 :
51334: GO 54600
51336: LD_INT 2
51338: DOUBLE
51339: EQUAL
51340: IFTRUE 51344
51342: GO 54599
51344: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
51345: LD_ADDR_VAR 0 29
51349: PUSH
51350: LD_INT 4
51352: PUSH
51353: LD_INT 0
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 4
51362: PUSH
51363: LD_INT 1
51365: NEG
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 5
51373: PUSH
51374: LD_INT 0
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 5
51383: PUSH
51384: LD_INT 1
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 4
51393: PUSH
51394: LD_INT 1
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 3
51403: PUSH
51404: LD_INT 0
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 3
51413: PUSH
51414: LD_INT 1
51416: NEG
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 3
51424: PUSH
51425: LD_INT 2
51427: NEG
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 5
51435: PUSH
51436: LD_INT 2
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 3
51445: PUSH
51446: LD_INT 3
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 3
51455: PUSH
51456: LD_INT 2
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 4
51465: PUSH
51466: LD_INT 3
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: LD_INT 4
51475: PUSH
51476: LD_INT 4
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 3
51485: PUSH
51486: LD_INT 4
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 2
51495: PUSH
51496: LD_INT 3
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 2
51505: PUSH
51506: LD_INT 2
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 4
51515: PUSH
51516: LD_INT 2
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 2
51525: PUSH
51526: LD_INT 4
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 0
51535: PUSH
51536: LD_INT 4
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 0
51545: PUSH
51546: LD_INT 3
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 1
51555: PUSH
51556: LD_INT 4
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 1
51565: PUSH
51566: LD_INT 5
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 0
51575: PUSH
51576: LD_INT 5
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 1
51585: NEG
51586: PUSH
51587: LD_INT 4
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 1
51596: NEG
51597: PUSH
51598: LD_INT 3
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 2
51607: PUSH
51608: LD_INT 5
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 2
51617: NEG
51618: PUSH
51619: LD_INT 3
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 3
51628: NEG
51629: PUSH
51630: LD_INT 0
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 3
51639: NEG
51640: PUSH
51641: LD_INT 1
51643: NEG
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 2
51651: NEG
51652: PUSH
51653: LD_INT 0
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 2
51662: NEG
51663: PUSH
51664: LD_INT 1
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: LD_INT 3
51673: NEG
51674: PUSH
51675: LD_INT 1
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 4
51684: NEG
51685: PUSH
51686: LD_INT 0
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 4
51695: NEG
51696: PUSH
51697: LD_INT 1
51699: NEG
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 4
51707: NEG
51708: PUSH
51709: LD_INT 2
51711: NEG
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 2
51719: NEG
51720: PUSH
51721: LD_INT 2
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 4
51730: NEG
51731: PUSH
51732: LD_INT 4
51734: NEG
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 4
51742: NEG
51743: PUSH
51744: LD_INT 5
51746: NEG
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: PUSH
51752: LD_INT 3
51754: NEG
51755: PUSH
51756: LD_INT 4
51758: NEG
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: LD_INT 3
51766: NEG
51767: PUSH
51768: LD_INT 3
51770: NEG
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 4
51778: NEG
51779: PUSH
51780: LD_INT 3
51782: NEG
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 5
51790: NEG
51791: PUSH
51792: LD_INT 4
51794: NEG
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 5
51802: NEG
51803: PUSH
51804: LD_INT 5
51806: NEG
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: PUSH
51812: LD_INT 3
51814: NEG
51815: PUSH
51816: LD_INT 5
51818: NEG
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: PUSH
51824: LD_INT 5
51826: NEG
51827: PUSH
51828: LD_INT 3
51830: NEG
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
51883: LD_ADDR_VAR 0 30
51887: PUSH
51888: LD_INT 4
51890: PUSH
51891: LD_INT 4
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 4
51900: PUSH
51901: LD_INT 3
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: LD_INT 5
51910: PUSH
51911: LD_INT 4
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 5
51920: PUSH
51921: LD_INT 5
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 4
51930: PUSH
51931: LD_INT 5
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 3
51940: PUSH
51941: LD_INT 4
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 3
51950: PUSH
51951: LD_INT 3
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 5
51960: PUSH
51961: LD_INT 3
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 3
51970: PUSH
51971: LD_INT 5
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 0
51980: PUSH
51981: LD_INT 3
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 0
51990: PUSH
51991: LD_INT 2
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 1
52000: PUSH
52001: LD_INT 3
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: LD_INT 1
52010: PUSH
52011: LD_INT 4
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 0
52020: PUSH
52021: LD_INT 4
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 1
52030: NEG
52031: PUSH
52032: LD_INT 3
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 1
52041: NEG
52042: PUSH
52043: LD_INT 2
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 2
52052: PUSH
52053: LD_INT 4
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 2
52062: NEG
52063: PUSH
52064: LD_INT 2
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 4
52073: NEG
52074: PUSH
52075: LD_INT 0
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 4
52084: NEG
52085: PUSH
52086: LD_INT 1
52088: NEG
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 3
52096: NEG
52097: PUSH
52098: LD_INT 0
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 3
52107: NEG
52108: PUSH
52109: LD_INT 1
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 4
52118: NEG
52119: PUSH
52120: LD_INT 1
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 5
52129: NEG
52130: PUSH
52131: LD_INT 0
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 5
52140: NEG
52141: PUSH
52142: LD_INT 1
52144: NEG
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 5
52152: NEG
52153: PUSH
52154: LD_INT 2
52156: NEG
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 3
52164: NEG
52165: PUSH
52166: LD_INT 2
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 3
52175: NEG
52176: PUSH
52177: LD_INT 3
52179: NEG
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 3
52187: NEG
52188: PUSH
52189: LD_INT 4
52191: NEG
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 2
52199: NEG
52200: PUSH
52201: LD_INT 3
52203: NEG
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 2
52211: NEG
52212: PUSH
52213: LD_INT 2
52215: NEG
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 3
52223: NEG
52224: PUSH
52225: LD_INT 2
52227: NEG
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 4
52235: NEG
52236: PUSH
52237: LD_INT 3
52239: NEG
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 4
52247: NEG
52248: PUSH
52249: LD_INT 4
52251: NEG
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 2
52259: NEG
52260: PUSH
52261: LD_INT 4
52263: NEG
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 4
52271: NEG
52272: PUSH
52273: LD_INT 2
52275: NEG
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 0
52283: PUSH
52284: LD_INT 4
52286: NEG
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 0
52294: PUSH
52295: LD_INT 5
52297: NEG
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 1
52305: PUSH
52306: LD_INT 4
52308: NEG
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 1
52316: PUSH
52317: LD_INT 3
52319: NEG
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 0
52327: PUSH
52328: LD_INT 3
52330: NEG
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 1
52338: NEG
52339: PUSH
52340: LD_INT 4
52342: NEG
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 1
52350: NEG
52351: PUSH
52352: LD_INT 5
52354: NEG
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 2
52362: PUSH
52363: LD_INT 3
52365: NEG
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 2
52373: NEG
52374: PUSH
52375: LD_INT 5
52377: NEG
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
52430: LD_ADDR_VAR 0 31
52434: PUSH
52435: LD_INT 0
52437: PUSH
52438: LD_INT 4
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 0
52447: PUSH
52448: LD_INT 3
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 1
52457: PUSH
52458: LD_INT 4
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: LD_INT 1
52467: PUSH
52468: LD_INT 5
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 0
52477: PUSH
52478: LD_INT 5
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 1
52487: NEG
52488: PUSH
52489: LD_INT 4
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 1
52498: NEG
52499: PUSH
52500: LD_INT 3
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 2
52509: PUSH
52510: LD_INT 5
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 2
52519: NEG
52520: PUSH
52521: LD_INT 3
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: LD_INT 3
52530: NEG
52531: PUSH
52532: LD_INT 0
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: PUSH
52539: LD_INT 3
52541: NEG
52542: PUSH
52543: LD_INT 1
52545: NEG
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: PUSH
52551: LD_INT 2
52553: NEG
52554: PUSH
52555: LD_INT 0
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 2
52564: NEG
52565: PUSH
52566: LD_INT 1
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: LD_INT 3
52575: NEG
52576: PUSH
52577: LD_INT 1
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 4
52586: NEG
52587: PUSH
52588: LD_INT 0
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 4
52597: NEG
52598: PUSH
52599: LD_INT 1
52601: NEG
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: LD_INT 4
52609: NEG
52610: PUSH
52611: LD_INT 2
52613: NEG
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 2
52621: NEG
52622: PUSH
52623: LD_INT 2
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 4
52632: NEG
52633: PUSH
52634: LD_INT 4
52636: NEG
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 4
52644: NEG
52645: PUSH
52646: LD_INT 5
52648: NEG
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 3
52656: NEG
52657: PUSH
52658: LD_INT 4
52660: NEG
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 3
52668: NEG
52669: PUSH
52670: LD_INT 3
52672: NEG
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 4
52680: NEG
52681: PUSH
52682: LD_INT 3
52684: NEG
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 5
52692: NEG
52693: PUSH
52694: LD_INT 4
52696: NEG
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 5
52704: NEG
52705: PUSH
52706: LD_INT 5
52708: NEG
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 3
52716: NEG
52717: PUSH
52718: LD_INT 5
52720: NEG
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 5
52728: NEG
52729: PUSH
52730: LD_INT 3
52732: NEG
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 0
52740: PUSH
52741: LD_INT 3
52743: NEG
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 0
52751: PUSH
52752: LD_INT 4
52754: NEG
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 1
52762: PUSH
52763: LD_INT 3
52765: NEG
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 1
52773: PUSH
52774: LD_INT 2
52776: NEG
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 0
52784: PUSH
52785: LD_INT 2
52787: NEG
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 1
52795: NEG
52796: PUSH
52797: LD_INT 3
52799: NEG
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 1
52807: NEG
52808: PUSH
52809: LD_INT 4
52811: NEG
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 2
52819: PUSH
52820: LD_INT 2
52822: NEG
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 2
52830: NEG
52831: PUSH
52832: LD_INT 4
52834: NEG
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 4
52842: PUSH
52843: LD_INT 0
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 4
52852: PUSH
52853: LD_INT 1
52855: NEG
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 5
52863: PUSH
52864: LD_INT 0
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: LD_INT 5
52873: PUSH
52874: LD_INT 1
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 4
52883: PUSH
52884: LD_INT 1
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 3
52893: PUSH
52894: LD_INT 0
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: LD_INT 3
52903: PUSH
52904: LD_INT 1
52906: NEG
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 3
52914: PUSH
52915: LD_INT 2
52917: NEG
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 5
52925: PUSH
52926: LD_INT 2
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
52980: LD_ADDR_VAR 0 32
52984: PUSH
52985: LD_INT 4
52987: NEG
52988: PUSH
52989: LD_INT 0
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 4
52998: NEG
52999: PUSH
53000: LD_INT 1
53002: NEG
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: LD_INT 3
53010: NEG
53011: PUSH
53012: LD_INT 0
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 3
53021: NEG
53022: PUSH
53023: LD_INT 1
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 4
53032: NEG
53033: PUSH
53034: LD_INT 1
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 5
53043: NEG
53044: PUSH
53045: LD_INT 0
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 5
53054: NEG
53055: PUSH
53056: LD_INT 1
53058: NEG
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: PUSH
53064: LD_INT 5
53066: NEG
53067: PUSH
53068: LD_INT 2
53070: NEG
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 3
53078: NEG
53079: PUSH
53080: LD_INT 2
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 3
53089: NEG
53090: PUSH
53091: LD_INT 3
53093: NEG
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 3
53101: NEG
53102: PUSH
53103: LD_INT 4
53105: NEG
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 2
53113: NEG
53114: PUSH
53115: LD_INT 3
53117: NEG
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 2
53125: NEG
53126: PUSH
53127: LD_INT 2
53129: NEG
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 3
53137: NEG
53138: PUSH
53139: LD_INT 2
53141: NEG
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: LD_INT 4
53149: NEG
53150: PUSH
53151: LD_INT 3
53153: NEG
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 4
53161: NEG
53162: PUSH
53163: LD_INT 4
53165: NEG
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: LD_INT 2
53173: NEG
53174: PUSH
53175: LD_INT 4
53177: NEG
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 4
53185: NEG
53186: PUSH
53187: LD_INT 2
53189: NEG
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 0
53197: PUSH
53198: LD_INT 4
53200: NEG
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: LD_INT 0
53208: PUSH
53209: LD_INT 5
53211: NEG
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 1
53219: PUSH
53220: LD_INT 4
53222: NEG
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 1
53230: PUSH
53231: LD_INT 3
53233: NEG
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 0
53241: PUSH
53242: LD_INT 3
53244: NEG
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 1
53252: NEG
53253: PUSH
53254: LD_INT 4
53256: NEG
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 1
53264: NEG
53265: PUSH
53266: LD_INT 5
53268: NEG
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 2
53276: PUSH
53277: LD_INT 3
53279: NEG
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 2
53287: NEG
53288: PUSH
53289: LD_INT 5
53291: NEG
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 3
53299: PUSH
53300: LD_INT 0
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 3
53309: PUSH
53310: LD_INT 1
53312: NEG
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 4
53320: PUSH
53321: LD_INT 0
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 4
53330: PUSH
53331: LD_INT 1
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 3
53340: PUSH
53341: LD_INT 1
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 2
53350: PUSH
53351: LD_INT 0
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 2
53360: PUSH
53361: LD_INT 1
53363: NEG
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 2
53371: PUSH
53372: LD_INT 2
53374: NEG
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 4
53382: PUSH
53383: LD_INT 2
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 4
53392: PUSH
53393: LD_INT 4
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 4
53402: PUSH
53403: LD_INT 3
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 5
53412: PUSH
53413: LD_INT 4
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 5
53422: PUSH
53423: LD_INT 5
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 4
53432: PUSH
53433: LD_INT 5
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 3
53442: PUSH
53443: LD_INT 4
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 3
53452: PUSH
53453: LD_INT 3
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 5
53462: PUSH
53463: LD_INT 3
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 3
53472: PUSH
53473: LD_INT 5
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
53527: LD_ADDR_VAR 0 33
53531: PUSH
53532: LD_INT 4
53534: NEG
53535: PUSH
53536: LD_INT 4
53538: NEG
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 4
53546: NEG
53547: PUSH
53548: LD_INT 5
53550: NEG
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 3
53558: NEG
53559: PUSH
53560: LD_INT 4
53562: NEG
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 3
53570: NEG
53571: PUSH
53572: LD_INT 3
53574: NEG
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 4
53582: NEG
53583: PUSH
53584: LD_INT 3
53586: NEG
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 5
53594: NEG
53595: PUSH
53596: LD_INT 4
53598: NEG
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 5
53606: NEG
53607: PUSH
53608: LD_INT 5
53610: NEG
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 3
53618: NEG
53619: PUSH
53620: LD_INT 5
53622: NEG
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 5
53630: NEG
53631: PUSH
53632: LD_INT 3
53634: NEG
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 0
53642: PUSH
53643: LD_INT 3
53645: NEG
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 0
53653: PUSH
53654: LD_INT 4
53656: NEG
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 1
53664: PUSH
53665: LD_INT 3
53667: NEG
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 1
53675: PUSH
53676: LD_INT 2
53678: NEG
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 0
53686: PUSH
53687: LD_INT 2
53689: NEG
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 1
53697: NEG
53698: PUSH
53699: LD_INT 3
53701: NEG
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: LD_INT 1
53709: NEG
53710: PUSH
53711: LD_INT 4
53713: NEG
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 2
53721: PUSH
53722: LD_INT 2
53724: NEG
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 2
53732: NEG
53733: PUSH
53734: LD_INT 4
53736: NEG
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 4
53744: PUSH
53745: LD_INT 0
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 4
53754: PUSH
53755: LD_INT 1
53757: NEG
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: PUSH
53763: LD_INT 5
53765: PUSH
53766: LD_INT 0
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: LD_INT 5
53775: PUSH
53776: LD_INT 1
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: LD_INT 4
53785: PUSH
53786: LD_INT 1
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 3
53795: PUSH
53796: LD_INT 0
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 3
53805: PUSH
53806: LD_INT 1
53808: NEG
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 3
53816: PUSH
53817: LD_INT 2
53819: NEG
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 5
53827: PUSH
53828: LD_INT 2
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 3
53837: PUSH
53838: LD_INT 3
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 3
53847: PUSH
53848: LD_INT 2
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 4
53857: PUSH
53858: LD_INT 3
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: LD_INT 4
53867: PUSH
53868: LD_INT 4
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: LD_INT 3
53877: PUSH
53878: LD_INT 4
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 2
53887: PUSH
53888: LD_INT 3
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 2
53897: PUSH
53898: LD_INT 2
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 4
53907: PUSH
53908: LD_INT 2
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 2
53917: PUSH
53918: LD_INT 4
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 0
53927: PUSH
53928: LD_INT 4
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 0
53937: PUSH
53938: LD_INT 3
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 1
53947: PUSH
53948: LD_INT 4
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 1
53957: PUSH
53958: LD_INT 5
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 0
53967: PUSH
53968: LD_INT 5
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 1
53977: NEG
53978: PUSH
53979: LD_INT 4
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 1
53988: NEG
53989: PUSH
53990: LD_INT 3
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 2
53999: PUSH
54000: LD_INT 5
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 2
54009: NEG
54010: PUSH
54011: LD_INT 3
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
54065: LD_ADDR_VAR 0 34
54069: PUSH
54070: LD_INT 0
54072: PUSH
54073: LD_INT 4
54075: NEG
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 0
54083: PUSH
54084: LD_INT 5
54086: NEG
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 1
54094: PUSH
54095: LD_INT 4
54097: NEG
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 1
54105: PUSH
54106: LD_INT 3
54108: NEG
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 0
54116: PUSH
54117: LD_INT 3
54119: NEG
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 1
54127: NEG
54128: PUSH
54129: LD_INT 4
54131: NEG
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 1
54139: NEG
54140: PUSH
54141: LD_INT 5
54143: NEG
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 2
54151: PUSH
54152: LD_INT 3
54154: NEG
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 2
54162: NEG
54163: PUSH
54164: LD_INT 5
54166: NEG
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 3
54174: PUSH
54175: LD_INT 0
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 3
54184: PUSH
54185: LD_INT 1
54187: NEG
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 4
54195: PUSH
54196: LD_INT 0
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 4
54205: PUSH
54206: LD_INT 1
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 3
54215: PUSH
54216: LD_INT 1
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 2
54225: PUSH
54226: LD_INT 0
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 2
54235: PUSH
54236: LD_INT 1
54238: NEG
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 2
54246: PUSH
54247: LD_INT 2
54249: NEG
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 4
54257: PUSH
54258: LD_INT 2
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 4
54267: PUSH
54268: LD_INT 4
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 4
54277: PUSH
54278: LD_INT 3
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 5
54287: PUSH
54288: LD_INT 4
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 5
54297: PUSH
54298: LD_INT 5
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 4
54307: PUSH
54308: LD_INT 5
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 3
54317: PUSH
54318: LD_INT 4
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 3
54327: PUSH
54328: LD_INT 3
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 5
54337: PUSH
54338: LD_INT 3
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 3
54347: PUSH
54348: LD_INT 5
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 0
54357: PUSH
54358: LD_INT 3
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: LD_INT 0
54367: PUSH
54368: LD_INT 2
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 1
54377: PUSH
54378: LD_INT 3
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 1
54387: PUSH
54388: LD_INT 4
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 0
54397: PUSH
54398: LD_INT 4
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 1
54407: NEG
54408: PUSH
54409: LD_INT 3
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 1
54418: NEG
54419: PUSH
54420: LD_INT 2
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 2
54429: PUSH
54430: LD_INT 4
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 2
54439: NEG
54440: PUSH
54441: LD_INT 2
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 4
54450: NEG
54451: PUSH
54452: LD_INT 0
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 4
54461: NEG
54462: PUSH
54463: LD_INT 1
54465: NEG
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 3
54473: NEG
54474: PUSH
54475: LD_INT 0
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 3
54484: NEG
54485: PUSH
54486: LD_INT 1
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 4
54495: NEG
54496: PUSH
54497: LD_INT 1
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 5
54506: NEG
54507: PUSH
54508: LD_INT 0
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 5
54517: NEG
54518: PUSH
54519: LD_INT 1
54521: NEG
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 5
54529: NEG
54530: PUSH
54531: LD_INT 2
54533: NEG
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 3
54541: NEG
54542: PUSH
54543: LD_INT 2
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: ST_TO_ADDR
// end ; end ;
54597: GO 54600
54599: POP
// case btype of b_depot , b_warehouse :
54600: LD_VAR 0 1
54604: PUSH
54605: LD_INT 0
54607: DOUBLE
54608: EQUAL
54609: IFTRUE 54619
54611: LD_INT 1
54613: DOUBLE
54614: EQUAL
54615: IFTRUE 54619
54617: GO 54820
54619: POP
// case nation of nation_american :
54620: LD_VAR 0 5
54624: PUSH
54625: LD_INT 1
54627: DOUBLE
54628: EQUAL
54629: IFTRUE 54633
54631: GO 54689
54633: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
54634: LD_ADDR_VAR 0 9
54638: PUSH
54639: LD_VAR 0 11
54643: PUSH
54644: LD_VAR 0 12
54648: PUSH
54649: LD_VAR 0 13
54653: PUSH
54654: LD_VAR 0 14
54658: PUSH
54659: LD_VAR 0 15
54663: PUSH
54664: LD_VAR 0 16
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: PUSH
54677: LD_VAR 0 4
54681: PUSH
54682: LD_INT 1
54684: PLUS
54685: ARRAY
54686: ST_TO_ADDR
54687: GO 54818
54689: LD_INT 2
54691: DOUBLE
54692: EQUAL
54693: IFTRUE 54697
54695: GO 54753
54697: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
54698: LD_ADDR_VAR 0 9
54702: PUSH
54703: LD_VAR 0 17
54707: PUSH
54708: LD_VAR 0 18
54712: PUSH
54713: LD_VAR 0 19
54717: PUSH
54718: LD_VAR 0 20
54722: PUSH
54723: LD_VAR 0 21
54727: PUSH
54728: LD_VAR 0 22
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: PUSH
54741: LD_VAR 0 4
54745: PUSH
54746: LD_INT 1
54748: PLUS
54749: ARRAY
54750: ST_TO_ADDR
54751: GO 54818
54753: LD_INT 3
54755: DOUBLE
54756: EQUAL
54757: IFTRUE 54761
54759: GO 54817
54761: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
54762: LD_ADDR_VAR 0 9
54766: PUSH
54767: LD_VAR 0 23
54771: PUSH
54772: LD_VAR 0 24
54776: PUSH
54777: LD_VAR 0 25
54781: PUSH
54782: LD_VAR 0 26
54786: PUSH
54787: LD_VAR 0 27
54791: PUSH
54792: LD_VAR 0 28
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: PUSH
54805: LD_VAR 0 4
54809: PUSH
54810: LD_INT 1
54812: PLUS
54813: ARRAY
54814: ST_TO_ADDR
54815: GO 54818
54817: POP
54818: GO 55373
54820: LD_INT 2
54822: DOUBLE
54823: EQUAL
54824: IFTRUE 54834
54826: LD_INT 3
54828: DOUBLE
54829: EQUAL
54830: IFTRUE 54834
54832: GO 54890
54834: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
54835: LD_ADDR_VAR 0 9
54839: PUSH
54840: LD_VAR 0 29
54844: PUSH
54845: LD_VAR 0 30
54849: PUSH
54850: LD_VAR 0 31
54854: PUSH
54855: LD_VAR 0 32
54859: PUSH
54860: LD_VAR 0 33
54864: PUSH
54865: LD_VAR 0 34
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: PUSH
54878: LD_VAR 0 4
54882: PUSH
54883: LD_INT 1
54885: PLUS
54886: ARRAY
54887: ST_TO_ADDR
54888: GO 55373
54890: LD_INT 16
54892: DOUBLE
54893: EQUAL
54894: IFTRUE 54952
54896: LD_INT 17
54898: DOUBLE
54899: EQUAL
54900: IFTRUE 54952
54902: LD_INT 18
54904: DOUBLE
54905: EQUAL
54906: IFTRUE 54952
54908: LD_INT 19
54910: DOUBLE
54911: EQUAL
54912: IFTRUE 54952
54914: LD_INT 22
54916: DOUBLE
54917: EQUAL
54918: IFTRUE 54952
54920: LD_INT 20
54922: DOUBLE
54923: EQUAL
54924: IFTRUE 54952
54926: LD_INT 21
54928: DOUBLE
54929: EQUAL
54930: IFTRUE 54952
54932: LD_INT 23
54934: DOUBLE
54935: EQUAL
54936: IFTRUE 54952
54938: LD_INT 24
54940: DOUBLE
54941: EQUAL
54942: IFTRUE 54952
54944: LD_INT 25
54946: DOUBLE
54947: EQUAL
54948: IFTRUE 54952
54950: GO 55008
54952: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
54953: LD_ADDR_VAR 0 9
54957: PUSH
54958: LD_VAR 0 35
54962: PUSH
54963: LD_VAR 0 36
54967: PUSH
54968: LD_VAR 0 37
54972: PUSH
54973: LD_VAR 0 38
54977: PUSH
54978: LD_VAR 0 39
54982: PUSH
54983: LD_VAR 0 40
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: PUSH
54996: LD_VAR 0 4
55000: PUSH
55001: LD_INT 1
55003: PLUS
55004: ARRAY
55005: ST_TO_ADDR
55006: GO 55373
55008: LD_INT 6
55010: DOUBLE
55011: EQUAL
55012: IFTRUE 55064
55014: LD_INT 7
55016: DOUBLE
55017: EQUAL
55018: IFTRUE 55064
55020: LD_INT 8
55022: DOUBLE
55023: EQUAL
55024: IFTRUE 55064
55026: LD_INT 13
55028: DOUBLE
55029: EQUAL
55030: IFTRUE 55064
55032: LD_INT 12
55034: DOUBLE
55035: EQUAL
55036: IFTRUE 55064
55038: LD_INT 15
55040: DOUBLE
55041: EQUAL
55042: IFTRUE 55064
55044: LD_INT 11
55046: DOUBLE
55047: EQUAL
55048: IFTRUE 55064
55050: LD_INT 14
55052: DOUBLE
55053: EQUAL
55054: IFTRUE 55064
55056: LD_INT 10
55058: DOUBLE
55059: EQUAL
55060: IFTRUE 55064
55062: GO 55120
55064: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
55065: LD_ADDR_VAR 0 9
55069: PUSH
55070: LD_VAR 0 41
55074: PUSH
55075: LD_VAR 0 42
55079: PUSH
55080: LD_VAR 0 43
55084: PUSH
55085: LD_VAR 0 44
55089: PUSH
55090: LD_VAR 0 45
55094: PUSH
55095: LD_VAR 0 46
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: LIST
55107: PUSH
55108: LD_VAR 0 4
55112: PUSH
55113: LD_INT 1
55115: PLUS
55116: ARRAY
55117: ST_TO_ADDR
55118: GO 55373
55120: LD_INT 36
55122: DOUBLE
55123: EQUAL
55124: IFTRUE 55128
55126: GO 55184
55128: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
55129: LD_ADDR_VAR 0 9
55133: PUSH
55134: LD_VAR 0 47
55138: PUSH
55139: LD_VAR 0 48
55143: PUSH
55144: LD_VAR 0 49
55148: PUSH
55149: LD_VAR 0 50
55153: PUSH
55154: LD_VAR 0 51
55158: PUSH
55159: LD_VAR 0 52
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: LIST
55171: PUSH
55172: LD_VAR 0 4
55176: PUSH
55177: LD_INT 1
55179: PLUS
55180: ARRAY
55181: ST_TO_ADDR
55182: GO 55373
55184: LD_INT 4
55186: DOUBLE
55187: EQUAL
55188: IFTRUE 55210
55190: LD_INT 5
55192: DOUBLE
55193: EQUAL
55194: IFTRUE 55210
55196: LD_INT 34
55198: DOUBLE
55199: EQUAL
55200: IFTRUE 55210
55202: LD_INT 37
55204: DOUBLE
55205: EQUAL
55206: IFTRUE 55210
55208: GO 55266
55210: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
55211: LD_ADDR_VAR 0 9
55215: PUSH
55216: LD_VAR 0 53
55220: PUSH
55221: LD_VAR 0 54
55225: PUSH
55226: LD_VAR 0 55
55230: PUSH
55231: LD_VAR 0 56
55235: PUSH
55236: LD_VAR 0 57
55240: PUSH
55241: LD_VAR 0 58
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: PUSH
55254: LD_VAR 0 4
55258: PUSH
55259: LD_INT 1
55261: PLUS
55262: ARRAY
55263: ST_TO_ADDR
55264: GO 55373
55266: LD_INT 31
55268: DOUBLE
55269: EQUAL
55270: IFTRUE 55316
55272: LD_INT 32
55274: DOUBLE
55275: EQUAL
55276: IFTRUE 55316
55278: LD_INT 33
55280: DOUBLE
55281: EQUAL
55282: IFTRUE 55316
55284: LD_INT 27
55286: DOUBLE
55287: EQUAL
55288: IFTRUE 55316
55290: LD_INT 26
55292: DOUBLE
55293: EQUAL
55294: IFTRUE 55316
55296: LD_INT 28
55298: DOUBLE
55299: EQUAL
55300: IFTRUE 55316
55302: LD_INT 29
55304: DOUBLE
55305: EQUAL
55306: IFTRUE 55316
55308: LD_INT 30
55310: DOUBLE
55311: EQUAL
55312: IFTRUE 55316
55314: GO 55372
55316: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
55317: LD_ADDR_VAR 0 9
55321: PUSH
55322: LD_VAR 0 59
55326: PUSH
55327: LD_VAR 0 60
55331: PUSH
55332: LD_VAR 0 61
55336: PUSH
55337: LD_VAR 0 62
55341: PUSH
55342: LD_VAR 0 63
55346: PUSH
55347: LD_VAR 0 64
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: PUSH
55360: LD_VAR 0 4
55364: PUSH
55365: LD_INT 1
55367: PLUS
55368: ARRAY
55369: ST_TO_ADDR
55370: GO 55373
55372: POP
// temp_list2 = [ ] ;
55373: LD_ADDR_VAR 0 10
55377: PUSH
55378: EMPTY
55379: ST_TO_ADDR
// for i in temp_list do
55380: LD_ADDR_VAR 0 8
55384: PUSH
55385: LD_VAR 0 9
55389: PUSH
55390: FOR_IN
55391: IFFALSE 55443
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
55393: LD_ADDR_VAR 0 10
55397: PUSH
55398: LD_VAR 0 10
55402: PUSH
55403: LD_VAR 0 8
55407: PUSH
55408: LD_INT 1
55410: ARRAY
55411: PUSH
55412: LD_VAR 0 2
55416: PLUS
55417: PUSH
55418: LD_VAR 0 8
55422: PUSH
55423: LD_INT 2
55425: ARRAY
55426: PUSH
55427: LD_VAR 0 3
55431: PLUS
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: EMPTY
55438: LIST
55439: ADD
55440: ST_TO_ADDR
55441: GO 55390
55443: POP
55444: POP
// result = temp_list2 ;
55445: LD_ADDR_VAR 0 7
55449: PUSH
55450: LD_VAR 0 10
55454: ST_TO_ADDR
// end ;
55455: LD_VAR 0 7
55459: RET
// export function EnemyInRange ( unit , dist ) ; begin
55460: LD_INT 0
55462: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
55463: LD_ADDR_VAR 0 3
55467: PUSH
55468: LD_VAR 0 1
55472: PPUSH
55473: CALL_OW 255
55477: PPUSH
55478: LD_VAR 0 1
55482: PPUSH
55483: CALL_OW 250
55487: PPUSH
55488: LD_VAR 0 1
55492: PPUSH
55493: CALL_OW 251
55497: PPUSH
55498: LD_VAR 0 2
55502: PPUSH
55503: CALL 29564 0 4
55507: PUSH
55508: LD_INT 4
55510: ARRAY
55511: ST_TO_ADDR
// end ;
55512: LD_VAR 0 3
55516: RET
// export function PlayerSeeMe ( unit ) ; begin
55517: LD_INT 0
55519: PPUSH
// result := See ( your_side , unit ) ;
55520: LD_ADDR_VAR 0 2
55524: PUSH
55525: LD_OWVAR 2
55529: PPUSH
55530: LD_VAR 0 1
55534: PPUSH
55535: CALL_OW 292
55539: ST_TO_ADDR
// end ;
55540: LD_VAR 0 2
55544: RET
// export function ReverseDir ( unit ) ; begin
55545: LD_INT 0
55547: PPUSH
// if not unit then
55548: LD_VAR 0 1
55552: NOT
55553: IFFALSE 55557
// exit ;
55555: GO 55580
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
55557: LD_ADDR_VAR 0 2
55561: PUSH
55562: LD_VAR 0 1
55566: PPUSH
55567: CALL_OW 254
55571: PUSH
55572: LD_INT 3
55574: PLUS
55575: PUSH
55576: LD_INT 6
55578: MOD
55579: ST_TO_ADDR
// end ;
55580: LD_VAR 0 2
55584: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
55585: LD_INT 0
55587: PPUSH
55588: PPUSH
55589: PPUSH
55590: PPUSH
55591: PPUSH
// if not hexes then
55592: LD_VAR 0 2
55596: NOT
55597: IFFALSE 55601
// exit ;
55599: GO 55749
// dist := 9999 ;
55601: LD_ADDR_VAR 0 5
55605: PUSH
55606: LD_INT 9999
55608: ST_TO_ADDR
// for i = 1 to hexes do
55609: LD_ADDR_VAR 0 4
55613: PUSH
55614: DOUBLE
55615: LD_INT 1
55617: DEC
55618: ST_TO_ADDR
55619: LD_VAR 0 2
55623: PUSH
55624: FOR_TO
55625: IFFALSE 55737
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
55627: LD_VAR 0 1
55631: PPUSH
55632: LD_VAR 0 2
55636: PUSH
55637: LD_VAR 0 4
55641: ARRAY
55642: PUSH
55643: LD_INT 1
55645: ARRAY
55646: PPUSH
55647: LD_VAR 0 2
55651: PUSH
55652: LD_VAR 0 4
55656: ARRAY
55657: PUSH
55658: LD_INT 2
55660: ARRAY
55661: PPUSH
55662: CALL_OW 297
55666: PUSH
55667: LD_VAR 0 5
55671: LESS
55672: IFFALSE 55735
// begin hex := hexes [ i ] ;
55674: LD_ADDR_VAR 0 7
55678: PUSH
55679: LD_VAR 0 2
55683: PUSH
55684: LD_VAR 0 4
55688: ARRAY
55689: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55690: LD_ADDR_VAR 0 5
55694: PUSH
55695: LD_VAR 0 1
55699: PPUSH
55700: LD_VAR 0 2
55704: PUSH
55705: LD_VAR 0 4
55709: ARRAY
55710: PUSH
55711: LD_INT 1
55713: ARRAY
55714: PPUSH
55715: LD_VAR 0 2
55719: PUSH
55720: LD_VAR 0 4
55724: ARRAY
55725: PUSH
55726: LD_INT 2
55728: ARRAY
55729: PPUSH
55730: CALL_OW 297
55734: ST_TO_ADDR
// end ; end ;
55735: GO 55624
55737: POP
55738: POP
// result := hex ;
55739: LD_ADDR_VAR 0 3
55743: PUSH
55744: LD_VAR 0 7
55748: ST_TO_ADDR
// end ;
55749: LD_VAR 0 3
55753: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
55754: LD_INT 0
55756: PPUSH
55757: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
55758: LD_VAR 0 1
55762: NOT
55763: PUSH
55764: LD_VAR 0 1
55768: PUSH
55769: LD_INT 21
55771: PUSH
55772: LD_INT 2
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 23
55781: PUSH
55782: LD_INT 2
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PPUSH
55793: CALL_OW 69
55797: IN
55798: NOT
55799: OR
55800: IFFALSE 55804
// exit ;
55802: GO 55851
// for i = 1 to 3 do
55804: LD_ADDR_VAR 0 3
55808: PUSH
55809: DOUBLE
55810: LD_INT 1
55812: DEC
55813: ST_TO_ADDR
55814: LD_INT 3
55816: PUSH
55817: FOR_TO
55818: IFFALSE 55849
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
55820: LD_VAR 0 1
55824: PPUSH
55825: CALL_OW 250
55829: PPUSH
55830: LD_VAR 0 1
55834: PPUSH
55835: CALL_OW 251
55839: PPUSH
55840: LD_INT 1
55842: PPUSH
55843: CALL_OW 453
55847: GO 55817
55849: POP
55850: POP
// end ;
55851: LD_VAR 0 2
55855: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
55856: LD_INT 0
55858: PPUSH
55859: PPUSH
55860: PPUSH
55861: PPUSH
55862: PPUSH
55863: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
55864: LD_VAR 0 1
55868: NOT
55869: PUSH
55870: LD_VAR 0 2
55874: NOT
55875: OR
55876: PUSH
55877: LD_VAR 0 1
55881: PPUSH
55882: CALL_OW 314
55886: OR
55887: IFFALSE 55891
// exit ;
55889: GO 56332
// x := GetX ( enemy_unit ) ;
55891: LD_ADDR_VAR 0 7
55895: PUSH
55896: LD_VAR 0 2
55900: PPUSH
55901: CALL_OW 250
55905: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
55906: LD_ADDR_VAR 0 8
55910: PUSH
55911: LD_VAR 0 2
55915: PPUSH
55916: CALL_OW 251
55920: ST_TO_ADDR
// if not x or not y then
55921: LD_VAR 0 7
55925: NOT
55926: PUSH
55927: LD_VAR 0 8
55931: NOT
55932: OR
55933: IFFALSE 55937
// exit ;
55935: GO 56332
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
55937: LD_ADDR_VAR 0 6
55941: PUSH
55942: LD_VAR 0 7
55946: PPUSH
55947: LD_INT 0
55949: PPUSH
55950: LD_INT 4
55952: PPUSH
55953: CALL_OW 272
55957: PUSH
55958: LD_VAR 0 8
55962: PPUSH
55963: LD_INT 0
55965: PPUSH
55966: LD_INT 4
55968: PPUSH
55969: CALL_OW 273
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_VAR 0 7
55982: PPUSH
55983: LD_INT 1
55985: PPUSH
55986: LD_INT 4
55988: PPUSH
55989: CALL_OW 272
55993: PUSH
55994: LD_VAR 0 8
55998: PPUSH
55999: LD_INT 1
56001: PPUSH
56002: LD_INT 4
56004: PPUSH
56005: CALL_OW 273
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_VAR 0 7
56018: PPUSH
56019: LD_INT 2
56021: PPUSH
56022: LD_INT 4
56024: PPUSH
56025: CALL_OW 272
56029: PUSH
56030: LD_VAR 0 8
56034: PPUSH
56035: LD_INT 2
56037: PPUSH
56038: LD_INT 4
56040: PPUSH
56041: CALL_OW 273
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_VAR 0 7
56054: PPUSH
56055: LD_INT 3
56057: PPUSH
56058: LD_INT 4
56060: PPUSH
56061: CALL_OW 272
56065: PUSH
56066: LD_VAR 0 8
56070: PPUSH
56071: LD_INT 3
56073: PPUSH
56074: LD_INT 4
56076: PPUSH
56077: CALL_OW 273
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_VAR 0 7
56090: PPUSH
56091: LD_INT 4
56093: PPUSH
56094: LD_INT 4
56096: PPUSH
56097: CALL_OW 272
56101: PUSH
56102: LD_VAR 0 8
56106: PPUSH
56107: LD_INT 4
56109: PPUSH
56110: LD_INT 4
56112: PPUSH
56113: CALL_OW 273
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_VAR 0 7
56126: PPUSH
56127: LD_INT 5
56129: PPUSH
56130: LD_INT 4
56132: PPUSH
56133: CALL_OW 272
56137: PUSH
56138: LD_VAR 0 8
56142: PPUSH
56143: LD_INT 5
56145: PPUSH
56146: LD_INT 4
56148: PPUSH
56149: CALL_OW 273
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: ST_TO_ADDR
// for i = tmp downto 1 do
56166: LD_ADDR_VAR 0 4
56170: PUSH
56171: DOUBLE
56172: LD_VAR 0 6
56176: INC
56177: ST_TO_ADDR
56178: LD_INT 1
56180: PUSH
56181: FOR_DOWNTO
56182: IFFALSE 56283
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
56184: LD_VAR 0 6
56188: PUSH
56189: LD_VAR 0 4
56193: ARRAY
56194: PUSH
56195: LD_INT 1
56197: ARRAY
56198: PPUSH
56199: LD_VAR 0 6
56203: PUSH
56204: LD_VAR 0 4
56208: ARRAY
56209: PUSH
56210: LD_INT 2
56212: ARRAY
56213: PPUSH
56214: CALL_OW 488
56218: NOT
56219: PUSH
56220: LD_VAR 0 6
56224: PUSH
56225: LD_VAR 0 4
56229: ARRAY
56230: PUSH
56231: LD_INT 1
56233: ARRAY
56234: PPUSH
56235: LD_VAR 0 6
56239: PUSH
56240: LD_VAR 0 4
56244: ARRAY
56245: PUSH
56246: LD_INT 2
56248: ARRAY
56249: PPUSH
56250: CALL_OW 428
56254: PUSH
56255: LD_INT 0
56257: NONEQUAL
56258: OR
56259: IFFALSE 56281
// tmp := Delete ( tmp , i ) ;
56261: LD_ADDR_VAR 0 6
56265: PUSH
56266: LD_VAR 0 6
56270: PPUSH
56271: LD_VAR 0 4
56275: PPUSH
56276: CALL_OW 3
56280: ST_TO_ADDR
56281: GO 56181
56283: POP
56284: POP
// j := GetClosestHex ( unit , tmp ) ;
56285: LD_ADDR_VAR 0 5
56289: PUSH
56290: LD_VAR 0 1
56294: PPUSH
56295: LD_VAR 0 6
56299: PPUSH
56300: CALL 55585 0 2
56304: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
56305: LD_VAR 0 1
56309: PPUSH
56310: LD_VAR 0 5
56314: PUSH
56315: LD_INT 1
56317: ARRAY
56318: PPUSH
56319: LD_VAR 0 5
56323: PUSH
56324: LD_INT 2
56326: ARRAY
56327: PPUSH
56328: CALL_OW 111
// end ;
56332: LD_VAR 0 3
56336: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
56337: LD_INT 0
56339: PPUSH
56340: PPUSH
56341: PPUSH
// uc_side = 0 ;
56342: LD_ADDR_OWVAR 20
56346: PUSH
56347: LD_INT 0
56349: ST_TO_ADDR
// uc_nation = 0 ;
56350: LD_ADDR_OWVAR 21
56354: PUSH
56355: LD_INT 0
56357: ST_TO_ADDR
// InitHc_All ( ) ;
56358: CALL_OW 584
// InitVc ;
56362: CALL_OW 20
// if mastodonts then
56366: LD_VAR 0 6
56370: IFFALSE 56437
// for i = 1 to mastodonts do
56372: LD_ADDR_VAR 0 11
56376: PUSH
56377: DOUBLE
56378: LD_INT 1
56380: DEC
56381: ST_TO_ADDR
56382: LD_VAR 0 6
56386: PUSH
56387: FOR_TO
56388: IFFALSE 56435
// begin vc_chassis := 31 ;
56390: LD_ADDR_OWVAR 37
56394: PUSH
56395: LD_INT 31
56397: ST_TO_ADDR
// vc_control := control_rider ;
56398: LD_ADDR_OWVAR 38
56402: PUSH
56403: LD_INT 4
56405: ST_TO_ADDR
// animal := CreateVehicle ;
56406: LD_ADDR_VAR 0 12
56410: PUSH
56411: CALL_OW 45
56415: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56416: LD_VAR 0 12
56420: PPUSH
56421: LD_VAR 0 8
56425: PPUSH
56426: LD_INT 0
56428: PPUSH
56429: CALL 58625 0 3
// end ;
56433: GO 56387
56435: POP
56436: POP
// if horses then
56437: LD_VAR 0 5
56441: IFFALSE 56508
// for i = 1 to horses do
56443: LD_ADDR_VAR 0 11
56447: PUSH
56448: DOUBLE
56449: LD_INT 1
56451: DEC
56452: ST_TO_ADDR
56453: LD_VAR 0 5
56457: PUSH
56458: FOR_TO
56459: IFFALSE 56506
// begin hc_class := 21 ;
56461: LD_ADDR_OWVAR 28
56465: PUSH
56466: LD_INT 21
56468: ST_TO_ADDR
// hc_gallery :=  ;
56469: LD_ADDR_OWVAR 33
56473: PUSH
56474: LD_STRING 
56476: ST_TO_ADDR
// animal := CreateHuman ;
56477: LD_ADDR_VAR 0 12
56481: PUSH
56482: CALL_OW 44
56486: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56487: LD_VAR 0 12
56491: PPUSH
56492: LD_VAR 0 8
56496: PPUSH
56497: LD_INT 0
56499: PPUSH
56500: CALL 58625 0 3
// end ;
56504: GO 56458
56506: POP
56507: POP
// if birds then
56508: LD_VAR 0 1
56512: IFFALSE 56579
// for i = 1 to birds do
56514: LD_ADDR_VAR 0 11
56518: PUSH
56519: DOUBLE
56520: LD_INT 1
56522: DEC
56523: ST_TO_ADDR
56524: LD_VAR 0 1
56528: PUSH
56529: FOR_TO
56530: IFFALSE 56577
// begin hc_class = 18 ;
56532: LD_ADDR_OWVAR 28
56536: PUSH
56537: LD_INT 18
56539: ST_TO_ADDR
// hc_gallery =  ;
56540: LD_ADDR_OWVAR 33
56544: PUSH
56545: LD_STRING 
56547: ST_TO_ADDR
// animal := CreateHuman ;
56548: LD_ADDR_VAR 0 12
56552: PUSH
56553: CALL_OW 44
56557: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56558: LD_VAR 0 12
56562: PPUSH
56563: LD_VAR 0 8
56567: PPUSH
56568: LD_INT 0
56570: PPUSH
56571: CALL 58625 0 3
// end ;
56575: GO 56529
56577: POP
56578: POP
// if tigers then
56579: LD_VAR 0 2
56583: IFFALSE 56667
// for i = 1 to tigers do
56585: LD_ADDR_VAR 0 11
56589: PUSH
56590: DOUBLE
56591: LD_INT 1
56593: DEC
56594: ST_TO_ADDR
56595: LD_VAR 0 2
56599: PUSH
56600: FOR_TO
56601: IFFALSE 56665
// begin hc_class = class_tiger ;
56603: LD_ADDR_OWVAR 28
56607: PUSH
56608: LD_INT 14
56610: ST_TO_ADDR
// hc_gallery =  ;
56611: LD_ADDR_OWVAR 33
56615: PUSH
56616: LD_STRING 
56618: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
56619: LD_ADDR_OWVAR 35
56623: PUSH
56624: LD_INT 7
56626: NEG
56627: PPUSH
56628: LD_INT 7
56630: PPUSH
56631: CALL_OW 12
56635: ST_TO_ADDR
// animal := CreateHuman ;
56636: LD_ADDR_VAR 0 12
56640: PUSH
56641: CALL_OW 44
56645: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56646: LD_VAR 0 12
56650: PPUSH
56651: LD_VAR 0 8
56655: PPUSH
56656: LD_INT 0
56658: PPUSH
56659: CALL 58625 0 3
// end ;
56663: GO 56600
56665: POP
56666: POP
// if apemans then
56667: LD_VAR 0 3
56671: IFFALSE 56794
// for i = 1 to apemans do
56673: LD_ADDR_VAR 0 11
56677: PUSH
56678: DOUBLE
56679: LD_INT 1
56681: DEC
56682: ST_TO_ADDR
56683: LD_VAR 0 3
56687: PUSH
56688: FOR_TO
56689: IFFALSE 56792
// begin hc_class = class_apeman ;
56691: LD_ADDR_OWVAR 28
56695: PUSH
56696: LD_INT 12
56698: ST_TO_ADDR
// hc_gallery =  ;
56699: LD_ADDR_OWVAR 33
56703: PUSH
56704: LD_STRING 
56706: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
56707: LD_ADDR_OWVAR 35
56711: PUSH
56712: LD_INT 5
56714: NEG
56715: PPUSH
56716: LD_INT 5
56718: PPUSH
56719: CALL_OW 12
56723: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
56724: LD_ADDR_OWVAR 31
56728: PUSH
56729: LD_INT 1
56731: PPUSH
56732: LD_INT 3
56734: PPUSH
56735: CALL_OW 12
56739: PUSH
56740: LD_INT 1
56742: PPUSH
56743: LD_INT 3
56745: PPUSH
56746: CALL_OW 12
56750: PUSH
56751: LD_INT 0
56753: PUSH
56754: LD_INT 0
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: ST_TO_ADDR
// animal := CreateHuman ;
56763: LD_ADDR_VAR 0 12
56767: PUSH
56768: CALL_OW 44
56772: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56773: LD_VAR 0 12
56777: PPUSH
56778: LD_VAR 0 8
56782: PPUSH
56783: LD_INT 0
56785: PPUSH
56786: CALL 58625 0 3
// end ;
56790: GO 56688
56792: POP
56793: POP
// if enchidnas then
56794: LD_VAR 0 4
56798: IFFALSE 56865
// for i = 1 to enchidnas do
56800: LD_ADDR_VAR 0 11
56804: PUSH
56805: DOUBLE
56806: LD_INT 1
56808: DEC
56809: ST_TO_ADDR
56810: LD_VAR 0 4
56814: PUSH
56815: FOR_TO
56816: IFFALSE 56863
// begin hc_class = 13 ;
56818: LD_ADDR_OWVAR 28
56822: PUSH
56823: LD_INT 13
56825: ST_TO_ADDR
// hc_gallery =  ;
56826: LD_ADDR_OWVAR 33
56830: PUSH
56831: LD_STRING 
56833: ST_TO_ADDR
// animal := CreateHuman ;
56834: LD_ADDR_VAR 0 12
56838: PUSH
56839: CALL_OW 44
56843: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56844: LD_VAR 0 12
56848: PPUSH
56849: LD_VAR 0 8
56853: PPUSH
56854: LD_INT 0
56856: PPUSH
56857: CALL 58625 0 3
// end ;
56861: GO 56815
56863: POP
56864: POP
// if fishes then
56865: LD_VAR 0 7
56869: IFFALSE 56936
// for i = 1 to fishes do
56871: LD_ADDR_VAR 0 11
56875: PUSH
56876: DOUBLE
56877: LD_INT 1
56879: DEC
56880: ST_TO_ADDR
56881: LD_VAR 0 7
56885: PUSH
56886: FOR_TO
56887: IFFALSE 56934
// begin hc_class = 20 ;
56889: LD_ADDR_OWVAR 28
56893: PUSH
56894: LD_INT 20
56896: ST_TO_ADDR
// hc_gallery =  ;
56897: LD_ADDR_OWVAR 33
56901: PUSH
56902: LD_STRING 
56904: ST_TO_ADDR
// animal := CreateHuman ;
56905: LD_ADDR_VAR 0 12
56909: PUSH
56910: CALL_OW 44
56914: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
56915: LD_VAR 0 12
56919: PPUSH
56920: LD_VAR 0 9
56924: PPUSH
56925: LD_INT 0
56927: PPUSH
56928: CALL 58625 0 3
// end ;
56932: GO 56886
56934: POP
56935: POP
// end ;
56936: LD_VAR 0 10
56940: RET
// export function WantHeal ( sci , unit ) ; begin
56941: LD_INT 0
56943: PPUSH
// if GetTaskList ( sci ) > 0 then
56944: LD_VAR 0 1
56948: PPUSH
56949: CALL_OW 437
56953: PUSH
56954: LD_INT 0
56956: GREATER
56957: IFFALSE 57027
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
56959: LD_VAR 0 1
56963: PPUSH
56964: CALL_OW 437
56968: PUSH
56969: LD_INT 1
56971: ARRAY
56972: PUSH
56973: LD_INT 1
56975: ARRAY
56976: PUSH
56977: LD_STRING l
56979: EQUAL
56980: PUSH
56981: LD_VAR 0 1
56985: PPUSH
56986: CALL_OW 437
56990: PUSH
56991: LD_INT 1
56993: ARRAY
56994: PUSH
56995: LD_INT 4
56997: ARRAY
56998: PUSH
56999: LD_VAR 0 2
57003: EQUAL
57004: AND
57005: IFFALSE 57017
// result := true else
57007: LD_ADDR_VAR 0 3
57011: PUSH
57012: LD_INT 1
57014: ST_TO_ADDR
57015: GO 57025
// result := false ;
57017: LD_ADDR_VAR 0 3
57021: PUSH
57022: LD_INT 0
57024: ST_TO_ADDR
// end else
57025: GO 57035
// result := false ;
57027: LD_ADDR_VAR 0 3
57031: PUSH
57032: LD_INT 0
57034: ST_TO_ADDR
// end ;
57035: LD_VAR 0 3
57039: RET
// export function HealTarget ( sci ) ; begin
57040: LD_INT 0
57042: PPUSH
// if not sci then
57043: LD_VAR 0 1
57047: NOT
57048: IFFALSE 57052
// exit ;
57050: GO 57117
// result := 0 ;
57052: LD_ADDR_VAR 0 2
57056: PUSH
57057: LD_INT 0
57059: ST_TO_ADDR
// if GetTaskList ( sci ) then
57060: LD_VAR 0 1
57064: PPUSH
57065: CALL_OW 437
57069: IFFALSE 57117
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
57071: LD_VAR 0 1
57075: PPUSH
57076: CALL_OW 437
57080: PUSH
57081: LD_INT 1
57083: ARRAY
57084: PUSH
57085: LD_INT 1
57087: ARRAY
57088: PUSH
57089: LD_STRING l
57091: EQUAL
57092: IFFALSE 57117
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
57094: LD_ADDR_VAR 0 2
57098: PUSH
57099: LD_VAR 0 1
57103: PPUSH
57104: CALL_OW 437
57108: PUSH
57109: LD_INT 1
57111: ARRAY
57112: PUSH
57113: LD_INT 4
57115: ARRAY
57116: ST_TO_ADDR
// end ;
57117: LD_VAR 0 2
57121: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
57122: LD_INT 0
57124: PPUSH
57125: PPUSH
57126: PPUSH
57127: PPUSH
// if not base_units then
57128: LD_VAR 0 1
57132: NOT
57133: IFFALSE 57137
// exit ;
57135: GO 57224
// result := false ;
57137: LD_ADDR_VAR 0 2
57141: PUSH
57142: LD_INT 0
57144: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
57145: LD_ADDR_VAR 0 5
57149: PUSH
57150: LD_VAR 0 1
57154: PPUSH
57155: LD_INT 21
57157: PUSH
57158: LD_INT 3
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PPUSH
57165: CALL_OW 72
57169: ST_TO_ADDR
// if not tmp then
57170: LD_VAR 0 5
57174: NOT
57175: IFFALSE 57179
// exit ;
57177: GO 57224
// for i in tmp do
57179: LD_ADDR_VAR 0 3
57183: PUSH
57184: LD_VAR 0 5
57188: PUSH
57189: FOR_IN
57190: IFFALSE 57222
// begin result := EnemyInRange ( i , 22 ) ;
57192: LD_ADDR_VAR 0 2
57196: PUSH
57197: LD_VAR 0 3
57201: PPUSH
57202: LD_INT 22
57204: PPUSH
57205: CALL 55460 0 2
57209: ST_TO_ADDR
// if result then
57210: LD_VAR 0 2
57214: IFFALSE 57220
// exit ;
57216: POP
57217: POP
57218: GO 57224
// end ;
57220: GO 57189
57222: POP
57223: POP
// end ;
57224: LD_VAR 0 2
57228: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
57229: LD_INT 0
57231: PPUSH
57232: PPUSH
// if not units then
57233: LD_VAR 0 1
57237: NOT
57238: IFFALSE 57242
// exit ;
57240: GO 57312
// result := [ ] ;
57242: LD_ADDR_VAR 0 3
57246: PUSH
57247: EMPTY
57248: ST_TO_ADDR
// for i in units do
57249: LD_ADDR_VAR 0 4
57253: PUSH
57254: LD_VAR 0 1
57258: PUSH
57259: FOR_IN
57260: IFFALSE 57310
// if GetTag ( i ) = tag then
57262: LD_VAR 0 4
57266: PPUSH
57267: CALL_OW 110
57271: PUSH
57272: LD_VAR 0 2
57276: EQUAL
57277: IFFALSE 57308
// result := Insert ( result , result + 1 , i ) ;
57279: LD_ADDR_VAR 0 3
57283: PUSH
57284: LD_VAR 0 3
57288: PPUSH
57289: LD_VAR 0 3
57293: PUSH
57294: LD_INT 1
57296: PLUS
57297: PPUSH
57298: LD_VAR 0 4
57302: PPUSH
57303: CALL_OW 2
57307: ST_TO_ADDR
57308: GO 57259
57310: POP
57311: POP
// end ;
57312: LD_VAR 0 3
57316: RET
// export function IsDriver ( un ) ; begin
57317: LD_INT 0
57319: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
57320: LD_ADDR_VAR 0 2
57324: PUSH
57325: LD_VAR 0 1
57329: PUSH
57330: LD_INT 55
57332: PUSH
57333: EMPTY
57334: LIST
57335: PPUSH
57336: CALL_OW 69
57340: IN
57341: ST_TO_ADDR
// end ;
57342: LD_VAR 0 2
57346: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
57347: LD_INT 0
57349: PPUSH
57350: PPUSH
// list := [ ] ;
57351: LD_ADDR_VAR 0 5
57355: PUSH
57356: EMPTY
57357: ST_TO_ADDR
// case d of 0 :
57358: LD_VAR 0 3
57362: PUSH
57363: LD_INT 0
57365: DOUBLE
57366: EQUAL
57367: IFTRUE 57371
57369: GO 57504
57371: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
57372: LD_ADDR_VAR 0 5
57376: PUSH
57377: LD_VAR 0 1
57381: PUSH
57382: LD_INT 4
57384: MINUS
57385: PUSH
57386: LD_VAR 0 2
57390: PUSH
57391: LD_INT 4
57393: MINUS
57394: PUSH
57395: LD_INT 2
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: LIST
57402: PUSH
57403: LD_VAR 0 1
57407: PUSH
57408: LD_INT 3
57410: MINUS
57411: PUSH
57412: LD_VAR 0 2
57416: PUSH
57417: LD_INT 1
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: LIST
57424: PUSH
57425: LD_VAR 0 1
57429: PUSH
57430: LD_INT 4
57432: PLUS
57433: PUSH
57434: LD_VAR 0 2
57438: PUSH
57439: LD_INT 4
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: LIST
57446: PUSH
57447: LD_VAR 0 1
57451: PUSH
57452: LD_INT 3
57454: PLUS
57455: PUSH
57456: LD_VAR 0 2
57460: PUSH
57461: LD_INT 3
57463: PLUS
57464: PUSH
57465: LD_INT 5
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: LIST
57472: PUSH
57473: LD_VAR 0 1
57477: PUSH
57478: LD_VAR 0 2
57482: PUSH
57483: LD_INT 4
57485: PLUS
57486: PUSH
57487: LD_INT 0
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: LIST
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: ST_TO_ADDR
// end ; 1 :
57502: GO 58202
57504: LD_INT 1
57506: DOUBLE
57507: EQUAL
57508: IFTRUE 57512
57510: GO 57645
57512: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
57513: LD_ADDR_VAR 0 5
57517: PUSH
57518: LD_VAR 0 1
57522: PUSH
57523: LD_VAR 0 2
57527: PUSH
57528: LD_INT 4
57530: MINUS
57531: PUSH
57532: LD_INT 3
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: LIST
57539: PUSH
57540: LD_VAR 0 1
57544: PUSH
57545: LD_INT 3
57547: MINUS
57548: PUSH
57549: LD_VAR 0 2
57553: PUSH
57554: LD_INT 3
57556: MINUS
57557: PUSH
57558: LD_INT 2
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: LIST
57565: PUSH
57566: LD_VAR 0 1
57570: PUSH
57571: LD_INT 4
57573: MINUS
57574: PUSH
57575: LD_VAR 0 2
57579: PUSH
57580: LD_INT 1
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: LIST
57587: PUSH
57588: LD_VAR 0 1
57592: PUSH
57593: LD_VAR 0 2
57597: PUSH
57598: LD_INT 3
57600: PLUS
57601: PUSH
57602: LD_INT 0
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: LIST
57609: PUSH
57610: LD_VAR 0 1
57614: PUSH
57615: LD_INT 4
57617: PLUS
57618: PUSH
57619: LD_VAR 0 2
57623: PUSH
57624: LD_INT 4
57626: PLUS
57627: PUSH
57628: LD_INT 5
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: LIST
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: ST_TO_ADDR
// end ; 2 :
57643: GO 58202
57645: LD_INT 2
57647: DOUBLE
57648: EQUAL
57649: IFTRUE 57653
57651: GO 57782
57653: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
57654: LD_ADDR_VAR 0 5
57658: PUSH
57659: LD_VAR 0 1
57663: PUSH
57664: LD_VAR 0 2
57668: PUSH
57669: LD_INT 3
57671: MINUS
57672: PUSH
57673: LD_INT 3
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: LIST
57680: PUSH
57681: LD_VAR 0 1
57685: PUSH
57686: LD_INT 4
57688: PLUS
57689: PUSH
57690: LD_VAR 0 2
57694: PUSH
57695: LD_INT 4
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: LIST
57702: PUSH
57703: LD_VAR 0 1
57707: PUSH
57708: LD_VAR 0 2
57712: PUSH
57713: LD_INT 4
57715: PLUS
57716: PUSH
57717: LD_INT 0
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: LIST
57724: PUSH
57725: LD_VAR 0 1
57729: PUSH
57730: LD_INT 3
57732: MINUS
57733: PUSH
57734: LD_VAR 0 2
57738: PUSH
57739: LD_INT 1
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: LIST
57746: PUSH
57747: LD_VAR 0 1
57751: PUSH
57752: LD_INT 4
57754: MINUS
57755: PUSH
57756: LD_VAR 0 2
57760: PUSH
57761: LD_INT 4
57763: MINUS
57764: PUSH
57765: LD_INT 2
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: LIST
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: LIST
57777: LIST
57778: LIST
57779: ST_TO_ADDR
// end ; 3 :
57780: GO 58202
57782: LD_INT 3
57784: DOUBLE
57785: EQUAL
57786: IFTRUE 57790
57788: GO 57923
57790: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
57791: LD_ADDR_VAR 0 5
57795: PUSH
57796: LD_VAR 0 1
57800: PUSH
57801: LD_INT 3
57803: PLUS
57804: PUSH
57805: LD_VAR 0 2
57809: PUSH
57810: LD_INT 4
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: LIST
57817: PUSH
57818: LD_VAR 0 1
57822: PUSH
57823: LD_INT 4
57825: PLUS
57826: PUSH
57827: LD_VAR 0 2
57831: PUSH
57832: LD_INT 4
57834: PLUS
57835: PUSH
57836: LD_INT 5
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: LIST
57843: PUSH
57844: LD_VAR 0 1
57848: PUSH
57849: LD_INT 4
57851: MINUS
57852: PUSH
57853: LD_VAR 0 2
57857: PUSH
57858: LD_INT 1
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: LIST
57865: PUSH
57866: LD_VAR 0 1
57870: PUSH
57871: LD_VAR 0 2
57875: PUSH
57876: LD_INT 4
57878: MINUS
57879: PUSH
57880: LD_INT 3
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: LIST
57887: PUSH
57888: LD_VAR 0 1
57892: PUSH
57893: LD_INT 3
57895: MINUS
57896: PUSH
57897: LD_VAR 0 2
57901: PUSH
57902: LD_INT 3
57904: MINUS
57905: PUSH
57906: LD_INT 2
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: LIST
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: ST_TO_ADDR
// end ; 4 :
57921: GO 58202
57923: LD_INT 4
57925: DOUBLE
57926: EQUAL
57927: IFTRUE 57931
57929: GO 58064
57931: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
57932: LD_ADDR_VAR 0 5
57936: PUSH
57937: LD_VAR 0 1
57941: PUSH
57942: LD_VAR 0 2
57946: PUSH
57947: LD_INT 4
57949: PLUS
57950: PUSH
57951: LD_INT 0
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: LIST
57958: PUSH
57959: LD_VAR 0 1
57963: PUSH
57964: LD_INT 3
57966: PLUS
57967: PUSH
57968: LD_VAR 0 2
57972: PUSH
57973: LD_INT 3
57975: PLUS
57976: PUSH
57977: LD_INT 5
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: LIST
57984: PUSH
57985: LD_VAR 0 1
57989: PUSH
57990: LD_INT 4
57992: PLUS
57993: PUSH
57994: LD_VAR 0 2
57998: PUSH
57999: LD_INT 4
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: LIST
58006: PUSH
58007: LD_VAR 0 1
58011: PUSH
58012: LD_VAR 0 2
58016: PUSH
58017: LD_INT 3
58019: MINUS
58020: PUSH
58021: LD_INT 3
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: LIST
58028: PUSH
58029: LD_VAR 0 1
58033: PUSH
58034: LD_INT 4
58036: MINUS
58037: PUSH
58038: LD_VAR 0 2
58042: PUSH
58043: LD_INT 4
58045: MINUS
58046: PUSH
58047: LD_INT 2
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: LIST
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: LIST
58059: LIST
58060: LIST
58061: ST_TO_ADDR
// end ; 5 :
58062: GO 58202
58064: LD_INT 5
58066: DOUBLE
58067: EQUAL
58068: IFTRUE 58072
58070: GO 58201
58072: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
58073: LD_ADDR_VAR 0 5
58077: PUSH
58078: LD_VAR 0 1
58082: PUSH
58083: LD_INT 4
58085: MINUS
58086: PUSH
58087: LD_VAR 0 2
58091: PUSH
58092: LD_INT 1
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: LIST
58099: PUSH
58100: LD_VAR 0 1
58104: PUSH
58105: LD_VAR 0 2
58109: PUSH
58110: LD_INT 4
58112: MINUS
58113: PUSH
58114: LD_INT 3
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: LIST
58121: PUSH
58122: LD_VAR 0 1
58126: PUSH
58127: LD_INT 4
58129: PLUS
58130: PUSH
58131: LD_VAR 0 2
58135: PUSH
58136: LD_INT 4
58138: PLUS
58139: PUSH
58140: LD_INT 5
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: LIST
58147: PUSH
58148: LD_VAR 0 1
58152: PUSH
58153: LD_INT 3
58155: PLUS
58156: PUSH
58157: LD_VAR 0 2
58161: PUSH
58162: LD_INT 4
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: LIST
58169: PUSH
58170: LD_VAR 0 1
58174: PUSH
58175: LD_VAR 0 2
58179: PUSH
58180: LD_INT 3
58182: PLUS
58183: PUSH
58184: LD_INT 0
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: LIST
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: ST_TO_ADDR
// end ; end ;
58199: GO 58202
58201: POP
// result := list ;
58202: LD_ADDR_VAR 0 4
58206: PUSH
58207: LD_VAR 0 5
58211: ST_TO_ADDR
// end ;
58212: LD_VAR 0 4
58216: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
58217: LD_INT 0
58219: PPUSH
58220: PPUSH
58221: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
58222: LD_VAR 0 1
58226: NOT
58227: PUSH
58228: LD_VAR 0 2
58232: PUSH
58233: LD_INT 1
58235: PUSH
58236: LD_INT 2
58238: PUSH
58239: LD_INT 3
58241: PUSH
58242: LD_INT 4
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: LIST
58249: LIST
58250: IN
58251: NOT
58252: OR
58253: IFFALSE 58257
// exit ;
58255: GO 58349
// tmp := [ ] ;
58257: LD_ADDR_VAR 0 5
58261: PUSH
58262: EMPTY
58263: ST_TO_ADDR
// for i in units do
58264: LD_ADDR_VAR 0 4
58268: PUSH
58269: LD_VAR 0 1
58273: PUSH
58274: FOR_IN
58275: IFFALSE 58318
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
58277: LD_ADDR_VAR 0 5
58281: PUSH
58282: LD_VAR 0 5
58286: PPUSH
58287: LD_VAR 0 5
58291: PUSH
58292: LD_INT 1
58294: PLUS
58295: PPUSH
58296: LD_VAR 0 4
58300: PPUSH
58301: LD_VAR 0 2
58305: PPUSH
58306: CALL_OW 259
58310: PPUSH
58311: CALL_OW 2
58315: ST_TO_ADDR
58316: GO 58274
58318: POP
58319: POP
// if not tmp then
58320: LD_VAR 0 5
58324: NOT
58325: IFFALSE 58329
// exit ;
58327: GO 58349
// result := SortListByListDesc ( units , tmp ) ;
58329: LD_ADDR_VAR 0 3
58333: PUSH
58334: LD_VAR 0 1
58338: PPUSH
58339: LD_VAR 0 5
58343: PPUSH
58344: CALL_OW 77
58348: ST_TO_ADDR
// end ;
58349: LD_VAR 0 3
58353: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
58354: LD_INT 0
58356: PPUSH
58357: PPUSH
58358: PPUSH
// result := false ;
58359: LD_ADDR_VAR 0 3
58363: PUSH
58364: LD_INT 0
58366: ST_TO_ADDR
// x := GetX ( building ) ;
58367: LD_ADDR_VAR 0 4
58371: PUSH
58372: LD_VAR 0 2
58376: PPUSH
58377: CALL_OW 250
58381: ST_TO_ADDR
// y := GetY ( building ) ;
58382: LD_ADDR_VAR 0 5
58386: PUSH
58387: LD_VAR 0 2
58391: PPUSH
58392: CALL_OW 251
58396: ST_TO_ADDR
// if not building or not x or not y then
58397: LD_VAR 0 2
58401: NOT
58402: PUSH
58403: LD_VAR 0 4
58407: NOT
58408: OR
58409: PUSH
58410: LD_VAR 0 5
58414: NOT
58415: OR
58416: IFFALSE 58420
// exit ;
58418: GO 58512
// if GetTaskList ( unit ) then
58420: LD_VAR 0 1
58424: PPUSH
58425: CALL_OW 437
58429: IFFALSE 58512
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58431: LD_STRING e
58433: PUSH
58434: LD_VAR 0 1
58438: PPUSH
58439: CALL_OW 437
58443: PUSH
58444: LD_INT 1
58446: ARRAY
58447: PUSH
58448: LD_INT 1
58450: ARRAY
58451: EQUAL
58452: PUSH
58453: LD_VAR 0 4
58457: PUSH
58458: LD_VAR 0 1
58462: PPUSH
58463: CALL_OW 437
58467: PUSH
58468: LD_INT 1
58470: ARRAY
58471: PUSH
58472: LD_INT 2
58474: ARRAY
58475: EQUAL
58476: AND
58477: PUSH
58478: LD_VAR 0 5
58482: PUSH
58483: LD_VAR 0 1
58487: PPUSH
58488: CALL_OW 437
58492: PUSH
58493: LD_INT 1
58495: ARRAY
58496: PUSH
58497: LD_INT 3
58499: ARRAY
58500: EQUAL
58501: AND
58502: IFFALSE 58512
// result := true end ;
58504: LD_ADDR_VAR 0 3
58508: PUSH
58509: LD_INT 1
58511: ST_TO_ADDR
// end ;
58512: LD_VAR 0 3
58516: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
58517: LD_INT 0
58519: PPUSH
// result := false ;
58520: LD_ADDR_VAR 0 4
58524: PUSH
58525: LD_INT 0
58527: ST_TO_ADDR
// if GetTaskList ( unit ) then
58528: LD_VAR 0 1
58532: PPUSH
58533: CALL_OW 437
58537: IFFALSE 58620
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58539: LD_STRING M
58541: PUSH
58542: LD_VAR 0 1
58546: PPUSH
58547: CALL_OW 437
58551: PUSH
58552: LD_INT 1
58554: ARRAY
58555: PUSH
58556: LD_INT 1
58558: ARRAY
58559: EQUAL
58560: PUSH
58561: LD_VAR 0 2
58565: PUSH
58566: LD_VAR 0 1
58570: PPUSH
58571: CALL_OW 437
58575: PUSH
58576: LD_INT 1
58578: ARRAY
58579: PUSH
58580: LD_INT 2
58582: ARRAY
58583: EQUAL
58584: AND
58585: PUSH
58586: LD_VAR 0 3
58590: PUSH
58591: LD_VAR 0 1
58595: PPUSH
58596: CALL_OW 437
58600: PUSH
58601: LD_INT 1
58603: ARRAY
58604: PUSH
58605: LD_INT 3
58607: ARRAY
58608: EQUAL
58609: AND
58610: IFFALSE 58620
// result := true ;
58612: LD_ADDR_VAR 0 4
58616: PUSH
58617: LD_INT 1
58619: ST_TO_ADDR
// end ; end ;
58620: LD_VAR 0 4
58624: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
58625: LD_INT 0
58627: PPUSH
58628: PPUSH
58629: PPUSH
58630: PPUSH
// if not unit or not area then
58631: LD_VAR 0 1
58635: NOT
58636: PUSH
58637: LD_VAR 0 2
58641: NOT
58642: OR
58643: IFFALSE 58647
// exit ;
58645: GO 58811
// tmp := AreaToList ( area , i ) ;
58647: LD_ADDR_VAR 0 6
58651: PUSH
58652: LD_VAR 0 2
58656: PPUSH
58657: LD_VAR 0 5
58661: PPUSH
58662: CALL_OW 517
58666: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
58667: LD_ADDR_VAR 0 5
58671: PUSH
58672: DOUBLE
58673: LD_INT 1
58675: DEC
58676: ST_TO_ADDR
58677: LD_VAR 0 6
58681: PUSH
58682: LD_INT 1
58684: ARRAY
58685: PUSH
58686: FOR_TO
58687: IFFALSE 58809
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
58689: LD_ADDR_VAR 0 7
58693: PUSH
58694: LD_VAR 0 6
58698: PUSH
58699: LD_INT 1
58701: ARRAY
58702: PUSH
58703: LD_VAR 0 5
58707: ARRAY
58708: PUSH
58709: LD_VAR 0 6
58713: PUSH
58714: LD_INT 2
58716: ARRAY
58717: PUSH
58718: LD_VAR 0 5
58722: ARRAY
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
58728: LD_VAR 0 7
58732: PUSH
58733: LD_INT 1
58735: ARRAY
58736: PPUSH
58737: LD_VAR 0 7
58741: PUSH
58742: LD_INT 2
58744: ARRAY
58745: PPUSH
58746: CALL_OW 428
58750: PUSH
58751: LD_INT 0
58753: EQUAL
58754: IFFALSE 58807
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
58756: LD_VAR 0 1
58760: PPUSH
58761: LD_VAR 0 7
58765: PUSH
58766: LD_INT 1
58768: ARRAY
58769: PPUSH
58770: LD_VAR 0 7
58774: PUSH
58775: LD_INT 2
58777: ARRAY
58778: PPUSH
58779: LD_VAR 0 3
58783: PPUSH
58784: CALL_OW 48
// result := IsPlaced ( unit ) ;
58788: LD_ADDR_VAR 0 4
58792: PUSH
58793: LD_VAR 0 1
58797: PPUSH
58798: CALL_OW 305
58802: ST_TO_ADDR
// exit ;
58803: POP
58804: POP
58805: GO 58811
// end ; end ;
58807: GO 58686
58809: POP
58810: POP
// end ;
58811: LD_VAR 0 4
58815: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
58816: LD_INT 0
58818: PPUSH
58819: PPUSH
58820: PPUSH
// if not side or side > 8 then
58821: LD_VAR 0 1
58825: NOT
58826: PUSH
58827: LD_VAR 0 1
58831: PUSH
58832: LD_INT 8
58834: GREATER
58835: OR
58836: IFFALSE 58840
// exit ;
58838: GO 59027
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
58840: LD_ADDR_VAR 0 4
58844: PUSH
58845: LD_INT 22
58847: PUSH
58848: LD_VAR 0 1
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 21
58859: PUSH
58860: LD_INT 3
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PPUSH
58871: CALL_OW 69
58875: ST_TO_ADDR
// if not tmp then
58876: LD_VAR 0 4
58880: NOT
58881: IFFALSE 58885
// exit ;
58883: GO 59027
// enable_addtolog := true ;
58885: LD_ADDR_OWVAR 81
58889: PUSH
58890: LD_INT 1
58892: ST_TO_ADDR
// AddToLog ( [ ) ;
58893: LD_STRING [
58895: PPUSH
58896: CALL_OW 561
// for i in tmp do
58900: LD_ADDR_VAR 0 3
58904: PUSH
58905: LD_VAR 0 4
58909: PUSH
58910: FOR_IN
58911: IFFALSE 59018
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
58913: LD_STRING [
58915: PUSH
58916: LD_VAR 0 3
58920: PPUSH
58921: CALL_OW 266
58925: STR
58926: PUSH
58927: LD_STRING , 
58929: STR
58930: PUSH
58931: LD_VAR 0 3
58935: PPUSH
58936: CALL_OW 250
58940: STR
58941: PUSH
58942: LD_STRING , 
58944: STR
58945: PUSH
58946: LD_VAR 0 3
58950: PPUSH
58951: CALL_OW 251
58955: STR
58956: PUSH
58957: LD_STRING , 
58959: STR
58960: PUSH
58961: LD_VAR 0 3
58965: PPUSH
58966: CALL_OW 254
58970: STR
58971: PUSH
58972: LD_STRING , 
58974: STR
58975: PUSH
58976: LD_VAR 0 3
58980: PPUSH
58981: LD_INT 1
58983: PPUSH
58984: CALL_OW 268
58988: STR
58989: PUSH
58990: LD_STRING , 
58992: STR
58993: PUSH
58994: LD_VAR 0 3
58998: PPUSH
58999: LD_INT 2
59001: PPUSH
59002: CALL_OW 268
59006: STR
59007: PUSH
59008: LD_STRING ],
59010: STR
59011: PPUSH
59012: CALL_OW 561
// end ;
59016: GO 58910
59018: POP
59019: POP
// AddToLog ( ]; ) ;
59020: LD_STRING ];
59022: PPUSH
59023: CALL_OW 561
// end ;
59027: LD_VAR 0 2
59031: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
59032: LD_INT 0
59034: PPUSH
59035: PPUSH
59036: PPUSH
59037: PPUSH
59038: PPUSH
// if not area or not rate or not max then
59039: LD_VAR 0 1
59043: NOT
59044: PUSH
59045: LD_VAR 0 2
59049: NOT
59050: OR
59051: PUSH
59052: LD_VAR 0 4
59056: NOT
59057: OR
59058: IFFALSE 59062
// exit ;
59060: GO 59254
// while 1 do
59062: LD_INT 1
59064: IFFALSE 59254
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
59066: LD_ADDR_VAR 0 9
59070: PUSH
59071: LD_VAR 0 1
59075: PPUSH
59076: LD_INT 1
59078: PPUSH
59079: CALL_OW 287
59083: PUSH
59084: LD_INT 10
59086: MUL
59087: ST_TO_ADDR
// r := rate / 10 ;
59088: LD_ADDR_VAR 0 7
59092: PUSH
59093: LD_VAR 0 2
59097: PUSH
59098: LD_INT 10
59100: DIVREAL
59101: ST_TO_ADDR
// time := 1 1$00 ;
59102: LD_ADDR_VAR 0 8
59106: PUSH
59107: LD_INT 2100
59109: ST_TO_ADDR
// if amount < min then
59110: LD_VAR 0 9
59114: PUSH
59115: LD_VAR 0 3
59119: LESS
59120: IFFALSE 59138
// r := r * 2 else
59122: LD_ADDR_VAR 0 7
59126: PUSH
59127: LD_VAR 0 7
59131: PUSH
59132: LD_INT 2
59134: MUL
59135: ST_TO_ADDR
59136: GO 59164
// if amount > max then
59138: LD_VAR 0 9
59142: PUSH
59143: LD_VAR 0 4
59147: GREATER
59148: IFFALSE 59164
// r := r / 2 ;
59150: LD_ADDR_VAR 0 7
59154: PUSH
59155: LD_VAR 0 7
59159: PUSH
59160: LD_INT 2
59162: DIVREAL
59163: ST_TO_ADDR
// time := time / r ;
59164: LD_ADDR_VAR 0 8
59168: PUSH
59169: LD_VAR 0 8
59173: PUSH
59174: LD_VAR 0 7
59178: DIVREAL
59179: ST_TO_ADDR
// if time < 0 then
59180: LD_VAR 0 8
59184: PUSH
59185: LD_INT 0
59187: LESS
59188: IFFALSE 59205
// time := time * - 1 ;
59190: LD_ADDR_VAR 0 8
59194: PUSH
59195: LD_VAR 0 8
59199: PUSH
59200: LD_INT 1
59202: NEG
59203: MUL
59204: ST_TO_ADDR
// wait ( time ) ;
59205: LD_VAR 0 8
59209: PPUSH
59210: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
59214: LD_INT 35
59216: PPUSH
59217: LD_INT 875
59219: PPUSH
59220: CALL_OW 12
59224: PPUSH
59225: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
59229: LD_INT 1
59231: PPUSH
59232: LD_INT 5
59234: PPUSH
59235: CALL_OW 12
59239: PPUSH
59240: LD_VAR 0 1
59244: PPUSH
59245: LD_INT 1
59247: PPUSH
59248: CALL_OW 55
// end ;
59252: GO 59062
// end ;
59254: LD_VAR 0 5
59258: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
59259: LD_INT 0
59261: PPUSH
59262: PPUSH
59263: PPUSH
59264: PPUSH
59265: PPUSH
59266: PPUSH
59267: PPUSH
59268: PPUSH
// if not turrets or not factories then
59269: LD_VAR 0 1
59273: NOT
59274: PUSH
59275: LD_VAR 0 2
59279: NOT
59280: OR
59281: IFFALSE 59285
// exit ;
59283: GO 59592
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
59285: LD_ADDR_VAR 0 10
59289: PUSH
59290: LD_INT 5
59292: PUSH
59293: LD_INT 6
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 2
59302: PUSH
59303: LD_INT 4
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 3
59312: PUSH
59313: LD_INT 5
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: LIST
59324: PUSH
59325: LD_INT 24
59327: PUSH
59328: LD_INT 25
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: LD_INT 23
59337: PUSH
59338: LD_INT 27
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: LD_INT 42
59351: PUSH
59352: LD_INT 43
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PUSH
59359: LD_INT 44
59361: PUSH
59362: LD_INT 46
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PUSH
59369: LD_INT 45
59371: PUSH
59372: LD_INT 47
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: LIST
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: LIST
59388: ST_TO_ADDR
// result := [ ] ;
59389: LD_ADDR_VAR 0 3
59393: PUSH
59394: EMPTY
59395: ST_TO_ADDR
// for i in turrets do
59396: LD_ADDR_VAR 0 4
59400: PUSH
59401: LD_VAR 0 1
59405: PUSH
59406: FOR_IN
59407: IFFALSE 59590
// begin nat := GetNation ( i ) ;
59409: LD_ADDR_VAR 0 7
59413: PUSH
59414: LD_VAR 0 4
59418: PPUSH
59419: CALL_OW 248
59423: ST_TO_ADDR
// weapon := 0 ;
59424: LD_ADDR_VAR 0 8
59428: PUSH
59429: LD_INT 0
59431: ST_TO_ADDR
// if not nat then
59432: LD_VAR 0 7
59436: NOT
59437: IFFALSE 59441
// continue ;
59439: GO 59406
// for j in list [ nat ] do
59441: LD_ADDR_VAR 0 5
59445: PUSH
59446: LD_VAR 0 10
59450: PUSH
59451: LD_VAR 0 7
59455: ARRAY
59456: PUSH
59457: FOR_IN
59458: IFFALSE 59499
// if GetBWeapon ( i ) = j [ 1 ] then
59460: LD_VAR 0 4
59464: PPUSH
59465: CALL_OW 269
59469: PUSH
59470: LD_VAR 0 5
59474: PUSH
59475: LD_INT 1
59477: ARRAY
59478: EQUAL
59479: IFFALSE 59497
// begin weapon := j [ 2 ] ;
59481: LD_ADDR_VAR 0 8
59485: PUSH
59486: LD_VAR 0 5
59490: PUSH
59491: LD_INT 2
59493: ARRAY
59494: ST_TO_ADDR
// break ;
59495: GO 59499
// end ;
59497: GO 59457
59499: POP
59500: POP
// if not weapon then
59501: LD_VAR 0 8
59505: NOT
59506: IFFALSE 59510
// continue ;
59508: GO 59406
// for k in factories do
59510: LD_ADDR_VAR 0 6
59514: PUSH
59515: LD_VAR 0 2
59519: PUSH
59520: FOR_IN
59521: IFFALSE 59586
// begin weapons := AvailableWeaponList ( k ) ;
59523: LD_ADDR_VAR 0 9
59527: PUSH
59528: LD_VAR 0 6
59532: PPUSH
59533: CALL_OW 478
59537: ST_TO_ADDR
// if not weapons then
59538: LD_VAR 0 9
59542: NOT
59543: IFFALSE 59547
// continue ;
59545: GO 59520
// if weapon in weapons then
59547: LD_VAR 0 8
59551: PUSH
59552: LD_VAR 0 9
59556: IN
59557: IFFALSE 59584
// begin result := [ i , weapon ] ;
59559: LD_ADDR_VAR 0 3
59563: PUSH
59564: LD_VAR 0 4
59568: PUSH
59569: LD_VAR 0 8
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: ST_TO_ADDR
// exit ;
59578: POP
59579: POP
59580: POP
59581: POP
59582: GO 59592
// end ; end ;
59584: GO 59520
59586: POP
59587: POP
// end ;
59588: GO 59406
59590: POP
59591: POP
// end ;
59592: LD_VAR 0 3
59596: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
59597: LD_INT 0
59599: PPUSH
// if not side or side > 8 then
59600: LD_VAR 0 3
59604: NOT
59605: PUSH
59606: LD_VAR 0 3
59610: PUSH
59611: LD_INT 8
59613: GREATER
59614: OR
59615: IFFALSE 59619
// exit ;
59617: GO 59678
// if not range then
59619: LD_VAR 0 4
59623: NOT
59624: IFFALSE 59635
// range := - 12 ;
59626: LD_ADDR_VAR 0 4
59630: PUSH
59631: LD_INT 12
59633: NEG
59634: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
59635: LD_VAR 0 1
59639: PPUSH
59640: LD_VAR 0 2
59644: PPUSH
59645: LD_VAR 0 3
59649: PPUSH
59650: LD_VAR 0 4
59654: PPUSH
59655: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
59659: LD_VAR 0 1
59663: PPUSH
59664: LD_VAR 0 2
59668: PPUSH
59669: LD_VAR 0 3
59673: PPUSH
59674: CALL_OW 331
// end ;
59678: LD_VAR 0 5
59682: RET
// export function Video ( mode ) ; begin
59683: LD_INT 0
59685: PPUSH
// ingame_video = mode ;
59686: LD_ADDR_OWVAR 52
59690: PUSH
59691: LD_VAR 0 1
59695: ST_TO_ADDR
// interface_hidden = mode ;
59696: LD_ADDR_OWVAR 54
59700: PUSH
59701: LD_VAR 0 1
59705: ST_TO_ADDR
// end ;
59706: LD_VAR 0 2
59710: RET
// export function Join ( array , element ) ; begin
59711: LD_INT 0
59713: PPUSH
// result := Replace ( array , array + 1 , element ) ;
59714: LD_ADDR_VAR 0 3
59718: PUSH
59719: LD_VAR 0 1
59723: PPUSH
59724: LD_VAR 0 1
59728: PUSH
59729: LD_INT 1
59731: PLUS
59732: PPUSH
59733: LD_VAR 0 2
59737: PPUSH
59738: CALL_OW 1
59742: ST_TO_ADDR
// end ;
59743: LD_VAR 0 3
59747: RET
// export function JoinUnion ( array , element ) ; begin
59748: LD_INT 0
59750: PPUSH
// result := array union element ;
59751: LD_ADDR_VAR 0 3
59755: PUSH
59756: LD_VAR 0 1
59760: PUSH
59761: LD_VAR 0 2
59765: UNION
59766: ST_TO_ADDR
// end ;
59767: LD_VAR 0 3
59771: RET
// export function GetBehemoths ( side ) ; begin
59772: LD_INT 0
59774: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
59775: LD_ADDR_VAR 0 2
59779: PUSH
59780: LD_INT 22
59782: PUSH
59783: LD_VAR 0 1
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 31
59794: PUSH
59795: LD_INT 25
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PPUSH
59806: CALL_OW 69
59810: ST_TO_ADDR
// end ;
59811: LD_VAR 0 2
59815: RET
// export function Shuffle ( array ) ; var i , index ; begin
59816: LD_INT 0
59818: PPUSH
59819: PPUSH
59820: PPUSH
// result := [ ] ;
59821: LD_ADDR_VAR 0 2
59825: PUSH
59826: EMPTY
59827: ST_TO_ADDR
// if not array then
59828: LD_VAR 0 1
59832: NOT
59833: IFFALSE 59837
// exit ;
59835: GO 59936
// Randomize ;
59837: CALL_OW 10
// for i = array downto 1 do
59841: LD_ADDR_VAR 0 3
59845: PUSH
59846: DOUBLE
59847: LD_VAR 0 1
59851: INC
59852: ST_TO_ADDR
59853: LD_INT 1
59855: PUSH
59856: FOR_DOWNTO
59857: IFFALSE 59934
// begin index := rand ( 1 , array ) ;
59859: LD_ADDR_VAR 0 4
59863: PUSH
59864: LD_INT 1
59866: PPUSH
59867: LD_VAR 0 1
59871: PPUSH
59872: CALL_OW 12
59876: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
59877: LD_ADDR_VAR 0 2
59881: PUSH
59882: LD_VAR 0 2
59886: PPUSH
59887: LD_VAR 0 2
59891: PUSH
59892: LD_INT 1
59894: PLUS
59895: PPUSH
59896: LD_VAR 0 1
59900: PUSH
59901: LD_VAR 0 4
59905: ARRAY
59906: PPUSH
59907: CALL_OW 2
59911: ST_TO_ADDR
// array := Delete ( array , index ) ;
59912: LD_ADDR_VAR 0 1
59916: PUSH
59917: LD_VAR 0 1
59921: PPUSH
59922: LD_VAR 0 4
59926: PPUSH
59927: CALL_OW 3
59931: ST_TO_ADDR
// end ;
59932: GO 59856
59934: POP
59935: POP
// end ;
59936: LD_VAR 0 2
59940: RET
// export function GetBaseMaterials ( base ) ; begin
59941: LD_INT 0
59943: PPUSH
// result := [ 0 , 0 , 0 ] ;
59944: LD_ADDR_VAR 0 2
59948: PUSH
59949: LD_INT 0
59951: PUSH
59952: LD_INT 0
59954: PUSH
59955: LD_INT 0
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: LIST
59962: ST_TO_ADDR
// if not base then
59963: LD_VAR 0 1
59967: NOT
59968: IFFALSE 59972
// exit ;
59970: GO 60021
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
59972: LD_ADDR_VAR 0 2
59976: PUSH
59977: LD_VAR 0 1
59981: PPUSH
59982: LD_INT 1
59984: PPUSH
59985: CALL_OW 275
59989: PUSH
59990: LD_VAR 0 1
59994: PPUSH
59995: LD_INT 2
59997: PPUSH
59998: CALL_OW 275
60002: PUSH
60003: LD_VAR 0 1
60007: PPUSH
60008: LD_INT 3
60010: PPUSH
60011: CALL_OW 275
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: LIST
60020: ST_TO_ADDR
// end ;
60021: LD_VAR 0 2
60025: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
60026: LD_INT 0
60028: PPUSH
60029: PPUSH
// result := array ;
60030: LD_ADDR_VAR 0 3
60034: PUSH
60035: LD_VAR 0 1
60039: ST_TO_ADDR
// if size > 0 then
60040: LD_VAR 0 2
60044: PUSH
60045: LD_INT 0
60047: GREATER
60048: IFFALSE 60094
// for i := array downto size do
60050: LD_ADDR_VAR 0 4
60054: PUSH
60055: DOUBLE
60056: LD_VAR 0 1
60060: INC
60061: ST_TO_ADDR
60062: LD_VAR 0 2
60066: PUSH
60067: FOR_DOWNTO
60068: IFFALSE 60092
// result := Delete ( result , result ) ;
60070: LD_ADDR_VAR 0 3
60074: PUSH
60075: LD_VAR 0 3
60079: PPUSH
60080: LD_VAR 0 3
60084: PPUSH
60085: CALL_OW 3
60089: ST_TO_ADDR
60090: GO 60067
60092: POP
60093: POP
// end ;
60094: LD_VAR 0 3
60098: RET
// export function ComExit ( unit ) ; var tmp ; begin
60099: LD_INT 0
60101: PPUSH
60102: PPUSH
// if not IsInUnit ( unit ) then
60103: LD_VAR 0 1
60107: PPUSH
60108: CALL_OW 310
60112: NOT
60113: IFFALSE 60117
// exit ;
60115: GO 60177
// tmp := IsInUnit ( unit ) ;
60117: LD_ADDR_VAR 0 3
60121: PUSH
60122: LD_VAR 0 1
60126: PPUSH
60127: CALL_OW 310
60131: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
60132: LD_VAR 0 3
60136: PPUSH
60137: CALL_OW 247
60141: PUSH
60142: LD_INT 2
60144: EQUAL
60145: IFFALSE 60158
// ComExitVehicle ( unit ) else
60147: LD_VAR 0 1
60151: PPUSH
60152: CALL_OW 121
60156: GO 60167
// ComExitBuilding ( unit ) ;
60158: LD_VAR 0 1
60162: PPUSH
60163: CALL_OW 122
// result := tmp ;
60167: LD_ADDR_VAR 0 2
60171: PUSH
60172: LD_VAR 0 3
60176: ST_TO_ADDR
// end ;
60177: LD_VAR 0 2
60181: RET
// export function ResetHc ; begin
60182: LD_INT 0
60184: PPUSH
// InitHc ;
60185: CALL_OW 19
// hc_importance := 0 ;
60189: LD_ADDR_OWVAR 32
60193: PUSH
60194: LD_INT 0
60196: ST_TO_ADDR
// end ;
60197: LD_VAR 0 1
60201: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
60202: LD_INT 0
60204: PPUSH
60205: PPUSH
60206: PPUSH
// _x := ( x1 + x2 ) div 2 ;
60207: LD_ADDR_VAR 0 6
60211: PUSH
60212: LD_VAR 0 1
60216: PUSH
60217: LD_VAR 0 3
60221: PLUS
60222: PUSH
60223: LD_INT 2
60225: DIV
60226: ST_TO_ADDR
// if _x < 0 then
60227: LD_VAR 0 6
60231: PUSH
60232: LD_INT 0
60234: LESS
60235: IFFALSE 60252
// _x := _x * - 1 ;
60237: LD_ADDR_VAR 0 6
60241: PUSH
60242: LD_VAR 0 6
60246: PUSH
60247: LD_INT 1
60249: NEG
60250: MUL
60251: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
60252: LD_ADDR_VAR 0 7
60256: PUSH
60257: LD_VAR 0 2
60261: PUSH
60262: LD_VAR 0 4
60266: PLUS
60267: PUSH
60268: LD_INT 2
60270: DIV
60271: ST_TO_ADDR
// if _y < 0 then
60272: LD_VAR 0 7
60276: PUSH
60277: LD_INT 0
60279: LESS
60280: IFFALSE 60297
// _y := _y * - 1 ;
60282: LD_ADDR_VAR 0 7
60286: PUSH
60287: LD_VAR 0 7
60291: PUSH
60292: LD_INT 1
60294: NEG
60295: MUL
60296: ST_TO_ADDR
// result := [ _x , _y ] ;
60297: LD_ADDR_VAR 0 5
60301: PUSH
60302: LD_VAR 0 6
60306: PUSH
60307: LD_VAR 0 7
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: ST_TO_ADDR
// end ;
60316: LD_VAR 0 5
60320: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
60321: LD_INT 0
60323: PPUSH
60324: PPUSH
60325: PPUSH
60326: PPUSH
// task := GetTaskList ( unit ) ;
60327: LD_ADDR_VAR 0 7
60331: PUSH
60332: LD_VAR 0 1
60336: PPUSH
60337: CALL_OW 437
60341: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
60342: LD_VAR 0 7
60346: NOT
60347: PUSH
60348: LD_VAR 0 1
60352: PPUSH
60353: LD_VAR 0 2
60357: PPUSH
60358: CALL_OW 308
60362: NOT
60363: AND
60364: IFFALSE 60368
// exit ;
60366: GO 60486
// if IsInArea ( unit , area ) then
60368: LD_VAR 0 1
60372: PPUSH
60373: LD_VAR 0 2
60377: PPUSH
60378: CALL_OW 308
60382: IFFALSE 60400
// begin ComMoveToArea ( unit , goAway ) ;
60384: LD_VAR 0 1
60388: PPUSH
60389: LD_VAR 0 3
60393: PPUSH
60394: CALL_OW 113
// exit ;
60398: GO 60486
// end ; if task [ 1 ] [ 1 ] <> M then
60400: LD_VAR 0 7
60404: PUSH
60405: LD_INT 1
60407: ARRAY
60408: PUSH
60409: LD_INT 1
60411: ARRAY
60412: PUSH
60413: LD_STRING M
60415: NONEQUAL
60416: IFFALSE 60420
// exit ;
60418: GO 60486
// x := task [ 1 ] [ 2 ] ;
60420: LD_ADDR_VAR 0 5
60424: PUSH
60425: LD_VAR 0 7
60429: PUSH
60430: LD_INT 1
60432: ARRAY
60433: PUSH
60434: LD_INT 2
60436: ARRAY
60437: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
60438: LD_ADDR_VAR 0 6
60442: PUSH
60443: LD_VAR 0 7
60447: PUSH
60448: LD_INT 1
60450: ARRAY
60451: PUSH
60452: LD_INT 3
60454: ARRAY
60455: ST_TO_ADDR
// if InArea ( x , y , area ) then
60456: LD_VAR 0 5
60460: PPUSH
60461: LD_VAR 0 6
60465: PPUSH
60466: LD_VAR 0 2
60470: PPUSH
60471: CALL_OW 309
60475: IFFALSE 60486
// ComStop ( unit ) ;
60477: LD_VAR 0 1
60481: PPUSH
60482: CALL_OW 141
// end ;
60486: LD_VAR 0 4
60490: RET
// export function Abs ( value ) ; begin
60491: LD_INT 0
60493: PPUSH
// result := value ;
60494: LD_ADDR_VAR 0 2
60498: PUSH
60499: LD_VAR 0 1
60503: ST_TO_ADDR
// if value < 0 then
60504: LD_VAR 0 1
60508: PUSH
60509: LD_INT 0
60511: LESS
60512: IFFALSE 60529
// result := value * - 1 ;
60514: LD_ADDR_VAR 0 2
60518: PUSH
60519: LD_VAR 0 1
60523: PUSH
60524: LD_INT 1
60526: NEG
60527: MUL
60528: ST_TO_ADDR
// end ;
60529: LD_VAR 0 2
60533: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
60534: LD_INT 0
60536: PPUSH
60537: PPUSH
60538: PPUSH
60539: PPUSH
60540: PPUSH
60541: PPUSH
60542: PPUSH
60543: PPUSH
// if not unit or not building then
60544: LD_VAR 0 1
60548: NOT
60549: PUSH
60550: LD_VAR 0 2
60554: NOT
60555: OR
60556: IFFALSE 60560
// exit ;
60558: GO 60786
// x := GetX ( building ) ;
60560: LD_ADDR_VAR 0 4
60564: PUSH
60565: LD_VAR 0 2
60569: PPUSH
60570: CALL_OW 250
60574: ST_TO_ADDR
// y := GetY ( building ) ;
60575: LD_ADDR_VAR 0 6
60579: PUSH
60580: LD_VAR 0 2
60584: PPUSH
60585: CALL_OW 251
60589: ST_TO_ADDR
// d := GetDir ( building ) ;
60590: LD_ADDR_VAR 0 8
60594: PUSH
60595: LD_VAR 0 2
60599: PPUSH
60600: CALL_OW 254
60604: ST_TO_ADDR
// r := 4 ;
60605: LD_ADDR_VAR 0 9
60609: PUSH
60610: LD_INT 4
60612: ST_TO_ADDR
// for i := 1 to 5 do
60613: LD_ADDR_VAR 0 10
60617: PUSH
60618: DOUBLE
60619: LD_INT 1
60621: DEC
60622: ST_TO_ADDR
60623: LD_INT 5
60625: PUSH
60626: FOR_TO
60627: IFFALSE 60784
// begin _x := ShiftX ( x , d , r + i ) ;
60629: LD_ADDR_VAR 0 5
60633: PUSH
60634: LD_VAR 0 4
60638: PPUSH
60639: LD_VAR 0 8
60643: PPUSH
60644: LD_VAR 0 9
60648: PUSH
60649: LD_VAR 0 10
60653: PLUS
60654: PPUSH
60655: CALL_OW 272
60659: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
60660: LD_ADDR_VAR 0 7
60664: PUSH
60665: LD_VAR 0 6
60669: PPUSH
60670: LD_VAR 0 8
60674: PPUSH
60675: LD_VAR 0 9
60679: PUSH
60680: LD_VAR 0 10
60684: PLUS
60685: PPUSH
60686: CALL_OW 273
60690: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
60691: LD_VAR 0 5
60695: PPUSH
60696: LD_VAR 0 7
60700: PPUSH
60701: CALL_OW 488
60705: PUSH
60706: LD_VAR 0 5
60710: PPUSH
60711: LD_VAR 0 7
60715: PPUSH
60716: CALL_OW 428
60720: PPUSH
60721: CALL_OW 247
60725: PUSH
60726: LD_INT 3
60728: PUSH
60729: LD_INT 2
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: IN
60736: NOT
60737: AND
60738: IFFALSE 60782
// begin ComMoveXY ( unit , _x , _y ) ;
60740: LD_VAR 0 1
60744: PPUSH
60745: LD_VAR 0 5
60749: PPUSH
60750: LD_VAR 0 7
60754: PPUSH
60755: CALL_OW 111
// result := [ _x , _y ] ;
60759: LD_ADDR_VAR 0 3
60763: PUSH
60764: LD_VAR 0 5
60768: PUSH
60769: LD_VAR 0 7
60773: PUSH
60774: EMPTY
60775: LIST
60776: LIST
60777: ST_TO_ADDR
// exit ;
60778: POP
60779: POP
60780: GO 60786
// end ; end ;
60782: GO 60626
60784: POP
60785: POP
// end ; end_of_file
60786: LD_VAR 0 3
60790: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
60791: LD_VAR 0 1
60795: PUSH
60796: LD_INT 200
60798: DOUBLE
60799: GREATEREQUAL
60800: IFFALSE 60808
60802: LD_INT 299
60804: DOUBLE
60805: LESSEQUAL
60806: IFTRUE 60810
60808: GO 60842
60810: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
60811: LD_VAR 0 1
60815: PPUSH
60816: LD_VAR 0 2
60820: PPUSH
60821: LD_VAR 0 3
60825: PPUSH
60826: LD_VAR 0 4
60830: PPUSH
60831: LD_VAR 0 5
60835: PPUSH
60836: CALL 19703 0 5
60840: GO 60919
60842: LD_INT 300
60844: DOUBLE
60845: GREATEREQUAL
60846: IFFALSE 60854
60848: LD_INT 399
60850: DOUBLE
60851: LESSEQUAL
60852: IFTRUE 60856
60854: GO 60918
60856: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
60857: LD_VAR 0 1
60861: PPUSH
60862: LD_VAR 0 2
60866: PPUSH
60867: LD_VAR 0 3
60871: PPUSH
60872: LD_VAR 0 4
60876: PPUSH
60877: LD_VAR 0 5
60881: PPUSH
60882: LD_VAR 0 6
60886: PPUSH
60887: LD_VAR 0 7
60891: PPUSH
60892: LD_VAR 0 8
60896: PPUSH
60897: LD_VAR 0 9
60901: PPUSH
60902: LD_VAR 0 10
60906: PPUSH
60907: LD_VAR 0 11
60911: PPUSH
60912: CALL 17609 0 11
60916: GO 60919
60918: POP
// end ;
60919: PPOPN 11
60921: END
