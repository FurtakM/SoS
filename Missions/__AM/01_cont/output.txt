// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 32 0 0
// InitAmerican ;
  15: CALL 866 0 0
// InitRussian ;
  19: CALL 1114 0 0
// DebugMode ;
  23: CALL 160 0 0
// Action ;
  27: CALL 2673 0 0
// end ;
  31: END
// export debug ; export mission_prefix ; export active_russian_dialog , bobby_in_squad , powell_contact , macmilan_use_radio , cyrus_in_squad , active_road_patrol , macmilan_in_trap , meta_action , end_mission , bobby_saved , cyrus_saved , send_troops_to_forest , active_powell_dialog ; function Init ; begin
  32: LD_INT 0
  34: PPUSH
// mission_prefix := 01_ ;
  35: LD_ADDR_EXP 2
  39: PUSH
  40: LD_STRING 01_
  42: ST_TO_ADDR
// debug := 0 ;
  43: LD_ADDR_EXP 1
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// active_russian_dialog := false ;
  51: LD_ADDR_EXP 3
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// bobby_in_squad := false ;
  59: LD_ADDR_EXP 4
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// cyrus_in_squad := false ;
  67: LD_ADDR_EXP 7
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// powell_contact := false ;
  75: LD_ADDR_EXP 5
  79: PUSH
  80: LD_INT 0
  82: ST_TO_ADDR
// macmilan_use_radio := false ;
  83: LD_ADDR_EXP 6
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// active_road_patrol := false ;
  91: LD_ADDR_EXP 8
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// macmilan_in_trap := false ;
  99: LD_ADDR_EXP 9
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// meta_action := false ;
 107: LD_ADDR_EXP 10
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// end_mission := false ;
 115: LD_ADDR_EXP 11
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// bobby_saved := false ;
 123: LD_ADDR_EXP 12
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// cyrus_saved := false ;
 131: LD_ADDR_EXP 13
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// send_troops_to_forest := false ;
 139: LD_ADDR_EXP 14
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// active_powell_dialog := false ;
 147: LD_ADDR_EXP 15
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// end ;
 155: LD_VAR 0 1
 159: RET
// function DebugMode ; var i ; begin
 160: LD_INT 0
 162: PPUSH
 163: PPUSH
// if not debug then
 164: LD_EXP 1
 168: NOT
 169: IFFALSE 173
// exit ;
 171: GO 192
// Difficulty := 3 ;
 173: LD_ADDR_OWVAR 67
 177: PUSH
 178: LD_INT 3
 180: ST_TO_ADDR
// TurnFogOff ( ) ;
 181: CALL_OW 537
// FogOff ( 1 ) ;
 185: LD_INT 1
 187: PPUSH
 188: CALL_OW 344
// end ; end_of_file
 192: LD_VAR 0 1
 196: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 197: LD_INT 0
 199: PPUSH
 200: PPUSH
 201: PPUSH
// uc_side := GetSide ( b ) ;
 202: LD_ADDR_OWVAR 20
 206: PUSH
 207: LD_VAR 0 2
 211: PPUSH
 212: CALL_OW 255
 216: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 217: LD_ADDR_OWVAR 21
 221: PUSH
 222: LD_VAR 0 2
 226: PPUSH
 227: CALL_OW 248
 231: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 232: LD_INT 0
 234: PPUSH
 235: LD_INT 1
 237: PPUSH
 238: LD_VAR 0 1
 242: PPUSH
 243: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
 247: LD_ADDR_VAR 0 5
 251: PUSH
 252: LD_VAR 0 2
 256: PPUSH
 257: CALL_OW 254
 261: PUSH
 262: LD_INT 3
 264: MINUS
 265: ST_TO_ADDR
// if dir < 0 then
 266: LD_VAR 0 5
 270: PUSH
 271: LD_INT 0
 273: LESS
 274: IFFALSE 290
// dir := 6 + dir ;
 276: LD_ADDR_VAR 0 5
 280: PUSH
 281: LD_INT 6
 283: PUSH
 284: LD_VAR 0 5
 288: PLUS
 289: ST_TO_ADDR
// un := CreateHuman ;
 290: LD_ADDR_VAR 0 4
 294: PUSH
 295: CALL_OW 44
 299: ST_TO_ADDR
// SetDir ( un , dir ) ;
 300: LD_VAR 0 4
 304: PPUSH
 305: LD_VAR 0 5
 309: PPUSH
 310: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 314: LD_VAR 0 4
 318: PPUSH
 319: LD_VAR 0 2
 323: PPUSH
 324: CALL_OW 52
// end ;
 328: LD_VAR 0 3
 332: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 333: LD_INT 0
 335: PPUSH
// uc_side := side ;
 336: LD_ADDR_OWVAR 20
 340: PUSH
 341: LD_VAR 0 1
 345: ST_TO_ADDR
// uc_nation := nation ;
 346: LD_ADDR_OWVAR 21
 350: PUSH
 351: LD_VAR 0 2
 355: ST_TO_ADDR
// vc_chassis := chassis ;
 356: LD_ADDR_OWVAR 37
 360: PUSH
 361: LD_VAR 0 3
 365: ST_TO_ADDR
// vc_engine := engine ;
 366: LD_ADDR_OWVAR 39
 370: PUSH
 371: LD_VAR 0 4
 375: ST_TO_ADDR
// vc_control := control ;
 376: LD_ADDR_OWVAR 38
 380: PUSH
 381: LD_VAR 0 5
 385: ST_TO_ADDR
// vc_weapon := weapon ;
 386: LD_ADDR_OWVAR 40
 390: PUSH
 391: LD_VAR 0 6
 395: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 396: LD_ADDR_OWVAR 41
 400: PUSH
 401: LD_VAR 0 7
 405: ST_TO_ADDR
// result := CreateVehicle ;
 406: LD_ADDR_VAR 0 8
 410: PUSH
 411: CALL_OW 45
 415: ST_TO_ADDR
// end ;
 416: LD_VAR 0 8
 420: RET
// export function ComPatrol ( unit , mode , pause , coords ) ; var i ; begin
 421: LD_INT 0
 423: PPUSH
 424: PPUSH
// while ( active_road_patrol ) do
 425: LD_EXP 8
 429: IFFALSE 783
// begin Wait ( 0 0$01 ) ;
 431: LD_INT 35
 433: PPUSH
 434: CALL_OW 67
// if not unit then
 438: LD_VAR 0 1
 442: NOT
 443: IFFALSE 447
// exit ;
 445: GO 783
// if mode = road then
 447: LD_VAR 0 2
 451: PUSH
 452: LD_STRING road
 454: EQUAL
 455: IFFALSE 511
// if GetFuel ( unit ) < 50 and not See ( 1 , unit ) and not HasTask ( unit ) then
 457: LD_VAR 0 1
 461: PPUSH
 462: CALL_OW 261
 466: PUSH
 467: LD_INT 50
 469: LESS
 470: PUSH
 471: LD_INT 1
 473: PPUSH
 474: LD_VAR 0 1
 478: PPUSH
 479: CALL_OW 292
 483: NOT
 484: AND
 485: PUSH
 486: LD_VAR 0 1
 490: PPUSH
 491: CALL_OW 314
 495: NOT
 496: AND
 497: IFFALSE 511
// SetFuel ( unit , 100 ) ;
 499: LD_VAR 0 1
 503: PPUSH
 504: LD_INT 100
 506: PPUSH
 507: CALL_OW 240
// if mode = forest then
 511: LD_VAR 0 2
 515: PUSH
 516: LD_STRING forest
 518: EQUAL
 519: IFFALSE 599
// if GetLives ( unit ) < 600 then
 521: LD_VAR 0 1
 525: PPUSH
 526: CALL_OW 256
 530: PUSH
 531: LD_INT 600
 533: LESS
 534: IFFALSE 599
// begin ComMoveXY ( unit , 42 , 3 ) ;
 536: LD_VAR 0 1
 540: PPUSH
 541: LD_INT 42
 543: PPUSH
 544: LD_INT 3
 546: PPUSH
 547: CALL_OW 111
// SetRememberedX ( unit , GetX ( unit ) ) ;
 551: LD_VAR 0 1
 555: PPUSH
 556: LD_VAR 0 1
 560: PPUSH
 561: CALL_OW 250
 565: PPUSH
 566: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
 570: LD_VAR 0 1
 574: PPUSH
 575: LD_VAR 0 1
 579: PPUSH
 580: CALL_OW 251
 584: PPUSH
 585: CALL_OW 232
// send_troops_to_forest := true ;
 589: LD_ADDR_EXP 14
 593: PUSH
 594: LD_INT 1
 596: ST_TO_ADDR
// break ;
 597: GO 783
// end ; if not HasTask ( unit ) then
 599: LD_VAR 0 1
 603: PPUSH
 604: CALL_OW 314
 608: NOT
 609: IFFALSE 781
// begin for i = 1 to coords do
 611: LD_ADDR_VAR 0 6
 615: PUSH
 616: DOUBLE
 617: LD_INT 1
 619: DEC
 620: ST_TO_ADDR
 621: LD_VAR 0 4
 625: PUSH
 626: FOR_TO
 627: IFFALSE 694
// begin AddComAgressiveMove ( unit , coords [ i ] , coords [ i + 1 ] ) ;
 629: LD_VAR 0 1
 633: PPUSH
 634: LD_VAR 0 4
 638: PUSH
 639: LD_VAR 0 6
 643: ARRAY
 644: PPUSH
 645: LD_VAR 0 4
 649: PUSH
 650: LD_VAR 0 6
 654: PUSH
 655: LD_INT 1
 657: PLUS
 658: ARRAY
 659: PPUSH
 660: CALL_OW 174
// AddComWait ( unit , pause ) ;
 664: LD_VAR 0 1
 668: PPUSH
 669: LD_VAR 0 3
 673: PPUSH
 674: CALL_OW 202
// i := i + 1 ;
 678: LD_ADDR_VAR 0 6
 682: PUSH
 683: LD_VAR 0 6
 687: PUSH
 688: LD_INT 1
 690: PLUS
 691: ST_TO_ADDR
// end ;
 692: GO 626
 694: POP
 695: POP
// for i = coords downto 1 do
 696: LD_ADDR_VAR 0 6
 700: PUSH
 701: DOUBLE
 702: LD_VAR 0 4
 706: INC
 707: ST_TO_ADDR
 708: LD_INT 1
 710: PUSH
 711: FOR_DOWNTO
 712: IFFALSE 779
// begin AddComAgressiveMove ( unit , coords [ i - 1 ] , coords [ i ] ) ;
 714: LD_VAR 0 1
 718: PPUSH
 719: LD_VAR 0 4
 723: PUSH
 724: LD_VAR 0 6
 728: PUSH
 729: LD_INT 1
 731: MINUS
 732: ARRAY
 733: PPUSH
 734: LD_VAR 0 4
 738: PUSH
 739: LD_VAR 0 6
 743: ARRAY
 744: PPUSH
 745: CALL_OW 174
// AddComWait ( unit , pause ) ;
 749: LD_VAR 0 1
 753: PPUSH
 754: LD_VAR 0 3
 758: PPUSH
 759: CALL_OW 202
// i := i - 1 ;
 763: LD_ADDR_VAR 0 6
 767: PUSH
 768: LD_VAR 0 6
 772: PUSH
 773: LD_INT 1
 775: MINUS
 776: ST_TO_ADDR
// end ;
 777: GO 711
 779: POP
 780: POP
// end ; end ;
 781: GO 425
// end ;
 783: LD_VAR 0 5
 787: RET
// export function DebugSay ( dialog ) ; var speaker ; begin
 788: LD_INT 0
 790: PPUSH
 791: PPUSH
// uc_nation := 1 ;
 792: LD_ADDR_OWVAR 21
 796: PUSH
 797: LD_INT 1
 799: ST_TO_ADDR
// uc_side := 0 ;
 800: LD_ADDR_OWVAR 20
 804: PUSH
 805: LD_INT 0
 807: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
 808: LD_INT 0
 810: PPUSH
 811: LD_INT 1
 813: PPUSH
 814: LD_INT 0
 816: PPUSH
 817: CALL_OW 380
// hc_name := speaker ;
 821: LD_ADDR_OWVAR 26
 825: PUSH
 826: LD_STRING speaker
 828: ST_TO_ADDR
// hc_gallery :=  ;
 829: LD_ADDR_OWVAR 33
 833: PUSH
 834: LD_STRING 
 836: ST_TO_ADDR
// speaker := CreateHuman ;
 837: LD_ADDR_VAR 0 3
 841: PUSH
 842: CALL_OW 44
 846: ST_TO_ADDR
// Say ( speaker , dialog ) ;
 847: LD_VAR 0 3
 851: PPUSH
 852: LD_VAR 0 1
 856: PPUSH
 857: CALL_OW 88
// end ; end_of_file
 861: LD_VAR 0 2
 865: RET
// export JMM , Bobby , Cyrus , Powell , fakePokryshkin ; export function InitAmerican ; begin
 866: LD_INT 0
 868: PPUSH
// uc_nation := 1 ;
 869: LD_ADDR_OWVAR 21
 873: PUSH
 874: LD_INT 1
 876: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , false ,  ) ;
 877: LD_ADDR_EXP 16
 881: PUSH
 882: LD_STRING JMM
 884: PPUSH
 885: LD_INT 0
 887: PPUSH
 888: LD_STRING 
 890: PPUSH
 891: CALL 20994 0 3
 895: ST_TO_ADDR
// uc_side := 4 ;
 896: LD_ADDR_OWVAR 20
 900: PUSH
 901: LD_INT 4
 903: ST_TO_ADDR
// hc_gallery := us ;
 904: LD_ADDR_OWVAR 33
 908: PUSH
 909: LD_STRING us
 911: ST_TO_ADDR
// hc_face_number := 7 ;
 912: LD_ADDR_OWVAR 34
 916: PUSH
 917: LD_INT 7
 919: ST_TO_ADDR
// hc_sex := sex_male ;
 920: LD_ADDR_OWVAR 27
 924: PUSH
 925: LD_INT 1
 927: ST_TO_ADDR
// hc_name := . ;
 928: LD_ADDR_OWVAR 26
 932: PUSH
 933: LD_STRING .
 935: ST_TO_ADDR
// hc_class := 1 ;
 936: LD_ADDR_OWVAR 28
 940: PUSH
 941: LD_INT 1
 943: ST_TO_ADDR
// Powell := CreateHuman ;
 944: LD_ADDR_EXP 19
 948: PUSH
 949: CALL_OW 44
 953: ST_TO_ADDR
// hc_name := . ;
 954: LD_ADDR_OWVAR 26
 958: PUSH
 959: LD_STRING .
 961: ST_TO_ADDR
// hc_gallery := ru ;
 962: LD_ADDR_OWVAR 33
 966: PUSH
 967: LD_STRING ru
 969: ST_TO_ADDR
// hc_face_number := 4 ;
 970: LD_ADDR_OWVAR 34
 974: PUSH
 975: LD_INT 4
 977: ST_TO_ADDR
// hc_sex := sex_male ;
 978: LD_ADDR_OWVAR 27
 982: PUSH
 983: LD_INT 1
 985: ST_TO_ADDR
// fakePokryshkin := CreateHuman ;
 986: LD_ADDR_EXP 20
 990: PUSH
 991: CALL_OW 44
 995: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , false ,  ) ;
 996: LD_ADDR_EXP 17
1000: PUSH
1001: LD_STRING Bobby
1003: PPUSH
1004: LD_INT 0
1006: PPUSH
1007: LD_STRING 
1009: PPUSH
1010: CALL 20994 0 3
1014: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , false ,  ) ;
1015: LD_ADDR_EXP 18
1019: PUSH
1020: LD_STRING Cyrus
1022: PPUSH
1023: LD_INT 0
1025: PPUSH
1026: LD_STRING 
1028: PPUSH
1029: CALL 20994 0 3
1033: ST_TO_ADDR
// case Difficulty of 1 :
1034: LD_OWVAR 67
1038: PUSH
1039: LD_INT 1
1041: DOUBLE
1042: EQUAL
1043: IFTRUE 1047
1045: GO 1062
1047: POP
// SetLives ( Bobby , 500 ) ; 2 :
1048: LD_EXP 17
1052: PPUSH
1053: LD_INT 500
1055: PPUSH
1056: CALL_OW 234
1060: GO 1109
1062: LD_INT 2
1064: DOUBLE
1065: EQUAL
1066: IFTRUE 1070
1068: GO 1085
1070: POP
// SetLives ( Bobby , 460 ) ; 3 :
1071: LD_EXP 17
1075: PPUSH
1076: LD_INT 460
1078: PPUSH
1079: CALL_OW 234
1083: GO 1109
1085: LD_INT 3
1087: DOUBLE
1088: EQUAL
1089: IFTRUE 1093
1091: GO 1108
1093: POP
// SetLives ( Bobby , 420 ) ; end ;
1094: LD_EXP 17
1098: PPUSH
1099: LD_INT 420
1101: PPUSH
1102: CALL_OW 234
1106: GO 1109
1108: POP
// end ; end_of_file
1109: LD_VAR 0 1
1113: RET
// export russian_troops_1 , russian_troops_2 , russian_patrol_tanks , russian_meta_guards , russian_patrol_forest ; export Pokryshkin ; export function InitRussian ; var skill , i , un ; begin
1114: LD_INT 0
1116: PPUSH
1117: PPUSH
1118: PPUSH
1119: PPUSH
// skill := [ 1 , 2 , 3 ] [ Difficulty ] ;
1120: LD_ADDR_VAR 0 2
1124: PUSH
1125: LD_INT 1
1127: PUSH
1128: LD_INT 2
1130: PUSH
1131: LD_INT 3
1133: PUSH
1134: EMPTY
1135: LIST
1136: LIST
1137: LIST
1138: PUSH
1139: LD_OWVAR 67
1143: ARRAY
1144: ST_TO_ADDR
// uc_side := 3 ;
1145: LD_ADDR_OWVAR 20
1149: PUSH
1150: LD_INT 3
1152: ST_TO_ADDR
// uc_nation := 3 ;
1153: LD_ADDR_OWVAR 21
1157: PUSH
1158: LD_INT 3
1160: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
1161: LD_ADDR_EXP 26
1165: PUSH
1166: LD_STRING Pokryshkin
1168: PPUSH
1169: LD_INT 0
1171: PPUSH
1172: LD_STRING 
1174: PPUSH
1175: CALL 20994 0 3
1179: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 44 , 5 , false ) ;
1180: LD_EXP 26
1184: PPUSH
1185: LD_INT 44
1187: PPUSH
1188: LD_INT 5
1190: PPUSH
1191: LD_INT 0
1193: PPUSH
1194: CALL_OW 48
// hc_importance := 0 ;
1198: LD_ADDR_OWVAR 32
1202: PUSH
1203: LD_INT 0
1205: ST_TO_ADDR
// hc_gallery :=  ;
1206: LD_ADDR_OWVAR 33
1210: PUSH
1211: LD_STRING 
1213: ST_TO_ADDR
// hc_name :=  ;
1214: LD_ADDR_OWVAR 26
1218: PUSH
1219: LD_STRING 
1221: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1222: LD_INT 1
1224: PPUSH
1225: LD_INT 1
1227: PPUSH
1228: LD_VAR 0 2
1232: PPUSH
1233: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1237: LD_ADDR_OWVAR 33
1241: PUSH
1242: LD_STRING SecondCharsGal
1244: ST_TO_ADDR
// hc_face_number := 69 ;
1245: LD_ADDR_OWVAR 34
1249: PUSH
1250: LD_INT 69
1252: ST_TO_ADDR
// hc_sex := sex_male ;
1253: LD_ADDR_OWVAR 27
1257: PUSH
1258: LD_INT 1
1260: ST_TO_ADDR
// hc_name := Ilja Ivanov ;
1261: LD_ADDR_OWVAR 26
1265: PUSH
1266: LD_STRING Ilja Ivanov
1268: ST_TO_ADDR
// un := CreateHuman ;
1269: LD_ADDR_VAR 0 4
1273: PUSH
1274: CALL_OW 44
1278: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 1 , un ) ;
1279: LD_ADDR_EXP 21
1283: PUSH
1284: LD_EXP 21
1288: PPUSH
1289: LD_INT 1
1291: PPUSH
1292: LD_VAR 0 4
1296: PPUSH
1297: CALL_OW 2
1301: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1302: LD_VAR 0 4
1306: PPUSH
1307: LD_INT 3
1309: PPUSH
1310: LD_INT 0
1312: PPUSH
1313: CALL_OW 49
// PrepareHuman ( sex_male , 1 , skill ) ;
1317: LD_INT 1
1319: PPUSH
1320: LD_INT 1
1322: PPUSH
1323: LD_VAR 0 2
1327: PPUSH
1328: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1332: LD_ADDR_OWVAR 33
1336: PUSH
1337: LD_STRING SecondCharsGal
1339: ST_TO_ADDR
// hc_face_number := 70 ;
1340: LD_ADDR_OWVAR 34
1344: PUSH
1345: LD_INT 70
1347: ST_TO_ADDR
// hc_name := Pavel Starczy ;
1348: LD_ADDR_OWVAR 26
1352: PUSH
1353: LD_STRING Pavel Starczy
1355: ST_TO_ADDR
// un := CreateHuman ;
1356: LD_ADDR_VAR 0 4
1360: PUSH
1361: CALL_OW 44
1365: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 2 , un ) ;
1366: LD_ADDR_EXP 21
1370: PUSH
1371: LD_EXP 21
1375: PPUSH
1376: LD_INT 2
1378: PPUSH
1379: LD_VAR 0 4
1383: PPUSH
1384: CALL_OW 2
1388: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1389: LD_VAR 0 4
1393: PPUSH
1394: LD_INT 3
1396: PPUSH
1397: LD_INT 0
1399: PPUSH
1400: CALL_OW 49
// InitHc ;
1404: CALL_OW 19
// for i = 1 to 7 do
1408: LD_ADDR_VAR 0 3
1412: PUSH
1413: DOUBLE
1414: LD_INT 1
1416: DEC
1417: ST_TO_ADDR
1418: LD_INT 7
1420: PUSH
1421: FOR_TO
1422: IFFALSE 1573
// begin PrepareHuman ( false , 1 , skill ) ;
1424: LD_INT 0
1426: PPUSH
1427: LD_INT 1
1429: PPUSH
1430: LD_VAR 0 2
1434: PPUSH
1435: CALL_OW 380
// un := CreateHuman ;
1439: LD_ADDR_VAR 0 4
1443: PUSH
1444: CALL_OW 44
1448: ST_TO_ADDR
// if i mod 2 = 0 then
1449: LD_VAR 0 3
1453: PUSH
1454: LD_INT 2
1456: MOD
1457: PUSH
1458: LD_INT 0
1460: EQUAL
1461: IFFALSE 1518
// begin russian_troops_1 := Insert ( russian_troops_1 , russian_troops_1 + 1 , un ) ;
1463: LD_ADDR_EXP 21
1467: PUSH
1468: LD_EXP 21
1472: PPUSH
1473: LD_EXP 21
1477: PUSH
1478: LD_INT 1
1480: PLUS
1481: PPUSH
1482: LD_VAR 0 4
1486: PPUSH
1487: CALL_OW 2
1491: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1492: LD_VAR 0 4
1496: PPUSH
1497: LD_INT 3
1499: PPUSH
1500: LD_INT 0
1502: PPUSH
1503: CALL_OW 49
// ComHold ( un ) ;
1507: LD_VAR 0 4
1511: PPUSH
1512: CALL_OW 140
// end else
1516: GO 1571
// begin russian_troops_2 := Insert ( russian_troops_2 , russian_troops_2 + 1 , un ) ;
1518: LD_ADDR_EXP 22
1522: PUSH
1523: LD_EXP 22
1527: PPUSH
1528: LD_EXP 22
1532: PUSH
1533: LD_INT 1
1535: PLUS
1536: PPUSH
1537: LD_VAR 0 4
1541: PPUSH
1542: CALL_OW 2
1546: ST_TO_ADDR
// PlaceUnitArea ( un , guard_south , false ) ;
1547: LD_VAR 0 4
1551: PPUSH
1552: LD_INT 4
1554: PPUSH
1555: LD_INT 0
1557: PPUSH
1558: CALL_OW 49
// ComHold ( un ) ;
1562: LD_VAR 0 4
1566: PPUSH
1567: CALL_OW 140
// end ; end ;
1571: GO 1421
1573: POP
1574: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) do
1575: LD_ADDR_VAR 0 3
1579: PUSH
1580: LD_INT 22
1582: PUSH
1583: LD_INT 3
1585: PUSH
1586: EMPTY
1587: LIST
1588: LIST
1589: PUSH
1590: LD_INT 30
1592: PUSH
1593: LD_INT 31
1595: PUSH
1596: EMPTY
1597: LIST
1598: LIST
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: PPUSH
1604: CALL_OW 69
1608: PUSH
1609: FOR_IN
1610: IFFALSE 1628
// PrepareSolBun ( skill , i ) ;
1612: LD_VAR 0 2
1616: PPUSH
1617: LD_VAR 0 3
1621: PPUSH
1622: CALL 197 0 2
1626: GO 1609
1628: POP
1629: POP
// for i = 1 to 2 do
1630: LD_ADDR_VAR 0 3
1634: PUSH
1635: DOUBLE
1636: LD_INT 1
1638: DEC
1639: ST_TO_ADDR
1640: LD_INT 2
1642: PUSH
1643: FOR_TO
1644: IFFALSE 1775
// begin un := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1646: LD_ADDR_VAR 0 4
1650: PUSH
1651: LD_INT 3
1653: PPUSH
1654: LD_INT 3
1656: PPUSH
1657: LD_INT 22
1659: PPUSH
1660: LD_INT 1
1662: PPUSH
1663: LD_INT 1
1665: PPUSH
1666: LD_INT 42
1668: PPUSH
1669: LD_INT 100
1671: PPUSH
1672: CALL 333 0 7
1676: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
1677: LD_INT 0
1679: PPUSH
1680: LD_INT 3
1682: PPUSH
1683: LD_VAR 0 2
1687: PPUSH
1688: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1692: CALL_OW 44
1696: PPUSH
1697: LD_VAR 0 4
1701: PPUSH
1702: CALL_OW 52
// PlaceUnitXY ( un , [ 23 , 131 ] [ i ] , [ 14 , 87 ] [ i ] , false ) ;
1706: LD_VAR 0 4
1710: PPUSH
1711: LD_INT 23
1713: PUSH
1714: LD_INT 131
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: PUSH
1721: LD_VAR 0 3
1725: ARRAY
1726: PPUSH
1727: LD_INT 14
1729: PUSH
1730: LD_INT 87
1732: PUSH
1733: EMPTY
1734: LIST
1735: LIST
1736: PUSH
1737: LD_VAR 0 3
1741: ARRAY
1742: PPUSH
1743: LD_INT 0
1745: PPUSH
1746: CALL_OW 48
// russian_patrol_tanks := Insert ( russian_patrol_tanks , 1 , un ) ;
1750: LD_ADDR_EXP 23
1754: PUSH
1755: LD_EXP 23
1759: PPUSH
1760: LD_INT 1
1762: PPUSH
1763: LD_VAR 0 4
1767: PPUSH
1768: CALL_OW 2
1772: ST_TO_ADDR
// end ;
1773: GO 1643
1775: POP
1776: POP
// for i = 1 to 2 do
1777: LD_ADDR_VAR 0 3
1781: PUSH
1782: DOUBLE
1783: LD_INT 1
1785: DEC
1786: ST_TO_ADDR
1787: LD_INT 2
1789: PUSH
1790: FOR_TO
1791: IFFALSE 1882
// begin PrepareHuman ( [ sex_female , sex_male , sex_male ] [ i ] , 1 , 1 ) ;
1793: LD_INT 2
1795: PUSH
1796: LD_INT 1
1798: PUSH
1799: LD_INT 1
1801: PUSH
1802: EMPTY
1803: LIST
1804: LIST
1805: LIST
1806: PUSH
1807: LD_VAR 0 3
1811: ARRAY
1812: PPUSH
1813: LD_INT 1
1815: PPUSH
1816: LD_INT 1
1818: PPUSH
1819: CALL_OW 380
// un := CreateHuman ;
1823: LD_ADDR_VAR 0 4
1827: PUSH
1828: CALL_OW 44
1832: ST_TO_ADDR
// russian_meta_guards := Insert ( russian_meta_guards , 1 , un ) ;
1833: LD_ADDR_EXP 24
1837: PUSH
1838: LD_EXP 24
1842: PPUSH
1843: LD_INT 1
1845: PPUSH
1846: LD_VAR 0 4
1850: PPUSH
1851: CALL_OW 2
1855: ST_TO_ADDR
// PlaceUnitArea ( un , exitArea , false ) ;
1856: LD_VAR 0 4
1860: PPUSH
1861: LD_INT 10
1863: PPUSH
1864: LD_INT 0
1866: PPUSH
1867: CALL_OW 49
// ComHold ( un ) ;
1871: LD_VAR 0 4
1875: PPUSH
1876: CALL_OW 140
// end ;
1880: GO 1790
1882: POP
1883: POP
// if Difficulty < 3 then
1884: LD_OWVAR 67
1888: PUSH
1889: LD_INT 3
1891: LESS
1892: IFFALSE 1896
// exit ;
1894: GO 1939
// PrepareHuman ( false , 1 , skill ) ;
1896: LD_INT 0
1898: PPUSH
1899: LD_INT 1
1901: PPUSH
1902: LD_VAR 0 2
1906: PPUSH
1907: CALL_OW 380
// russian_patrol_forest := CreateHuman ;
1911: LD_ADDR_EXP 25
1915: PUSH
1916: CALL_OW 44
1920: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_forest , 82 , 2 , false ) ;
1921: LD_EXP 25
1925: PPUSH
1926: LD_INT 82
1928: PPUSH
1929: LD_INT 2
1931: PPUSH
1932: LD_INT 0
1934: PPUSH
1935: CALL_OW 48
// end ;
1939: LD_VAR 0 1
1943: RET
// every 0 0$01 trigger active_road_patrol do
1944: LD_EXP 8
1948: IFFALSE 2014
1950: GO 1952
1952: DISABLE
// ComPatrol ( russian_patrol_tanks [ 1 ] , road , 0 0$02 , [ 131 , 87 , 107 , 75 , 107 , 66 , 114 , 61 , 107 , 34 ] ) ;
1953: LD_EXP 23
1957: PUSH
1958: LD_INT 1
1960: ARRAY
1961: PPUSH
1962: LD_STRING road
1964: PPUSH
1965: LD_INT 70
1967: PPUSH
1968: LD_INT 131
1970: PUSH
1971: LD_INT 87
1973: PUSH
1974: LD_INT 107
1976: PUSH
1977: LD_INT 75
1979: PUSH
1980: LD_INT 107
1982: PUSH
1983: LD_INT 66
1985: PUSH
1986: LD_INT 114
1988: PUSH
1989: LD_INT 61
1991: PUSH
1992: LD_INT 107
1994: PUSH
1995: LD_INT 34
1997: PUSH
1998: EMPTY
1999: LIST
2000: LIST
2001: LIST
2002: LIST
2003: LIST
2004: LIST
2005: LIST
2006: LIST
2007: LIST
2008: LIST
2009: PPUSH
2010: CALL 421 0 4
2014: END
// every 0 0$01 trigger active_road_patrol do
2015: LD_EXP 8
2019: IFFALSE 2077
2021: GO 2023
2023: DISABLE
// ComPatrol ( russian_patrol_tanks [ 2 ] , road , 0 0$02 , [ 21 , 12 , 37 , 30 , 65 , 62 , 107 , 76 ] ) ;
2024: LD_EXP 23
2028: PUSH
2029: LD_INT 2
2031: ARRAY
2032: PPUSH
2033: LD_STRING road
2035: PPUSH
2036: LD_INT 70
2038: PPUSH
2039: LD_INT 21
2041: PUSH
2042: LD_INT 12
2044: PUSH
2045: LD_INT 37
2047: PUSH
2048: LD_INT 30
2050: PUSH
2051: LD_INT 65
2053: PUSH
2054: LD_INT 62
2056: PUSH
2057: LD_INT 107
2059: PUSH
2060: LD_INT 76
2062: PUSH
2063: EMPTY
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: LIST
2070: LIST
2071: LIST
2072: PPUSH
2073: CALL 421 0 4
2077: END
// every 0 0$01 trigger IsOk ( russian_patrol_forest ) do
2078: LD_EXP 25
2082: PPUSH
2083: CALL_OW 302
2087: IFFALSE 2149
2089: GO 2091
2091: DISABLE
// ComPatrol ( russian_patrol_forest , forest , 0 0$01 , [ 52 , 15 , 81 , 9 , 120 , 52 , 135 , 80 , 122 , 95 ] ) ;
2092: LD_EXP 25
2096: PPUSH
2097: LD_STRING forest
2099: PPUSH
2100: LD_INT 35
2102: PPUSH
2103: LD_INT 52
2105: PUSH
2106: LD_INT 15
2108: PUSH
2109: LD_INT 81
2111: PUSH
2112: LD_INT 9
2114: PUSH
2115: LD_INT 120
2117: PUSH
2118: LD_INT 52
2120: PUSH
2121: LD_INT 135
2123: PUSH
2124: LD_INT 80
2126: PUSH
2127: LD_INT 122
2129: PUSH
2130: LD_INT 95
2132: PUSH
2133: EMPTY
2134: LIST
2135: LIST
2136: LIST
2137: LIST
2138: LIST
2139: LIST
2140: LIST
2141: LIST
2142: LIST
2143: LIST
2144: PPUSH
2145: CALL 421 0 4
2149: END
// every 0 0$01 trigger macmilan_use_radio do
2150: LD_EXP 6
2154: IFFALSE 2215
2156: GO 2158
2158: DISABLE
// begin active_road_patrol := false ;
2159: LD_ADDR_EXP 8
2163: PUSH
2164: LD_INT 0
2166: ST_TO_ADDR
// ComStop ( russian_patrol_tanks ) ;
2167: LD_EXP 23
2171: PPUSH
2172: CALL_OW 141
// AddComAgressiveMove ( russian_patrol_tanks , 72 , 41 ) ;
2176: LD_EXP 23
2180: PPUSH
2181: LD_INT 72
2183: PPUSH
2184: LD_INT 41
2186: PPUSH
2187: CALL_OW 174
// ComExitBuilding ( russian_troops_2 ) ;
2191: LD_EXP 22
2195: PPUSH
2196: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , 72 , 41 ) ;
2200: LD_EXP 22
2204: PPUSH
2205: LD_INT 72
2207: PPUSH
2208: LD_INT 41
2210: PPUSH
2211: CALL_OW 174
// end ;
2215: END
// every 0 0$03 trigger FilterUnitsInArea ( def_south , [ f_side , 1 ] ) do var un ;
2216: LD_INT 9
2218: PPUSH
2219: LD_INT 22
2221: PUSH
2222: LD_INT 1
2224: PUSH
2225: EMPTY
2226: LIST
2227: LIST
2228: PPUSH
2229: CALL_OW 70
2233: IFFALSE 2307
2235: GO 2237
2237: DISABLE
2238: LD_INT 0
2240: PPUSH
// begin enable ;
2241: ENABLE
// un := FilterUnitsInArea ( def_south , [ f_side , 1 ] ) [ 1 ] ;
2242: LD_ADDR_VAR 0 1
2246: PUSH
2247: LD_INT 9
2249: PPUSH
2250: LD_INT 22
2252: PUSH
2253: LD_INT 1
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: PPUSH
2260: CALL_OW 70
2264: PUSH
2265: LD_INT 1
2267: ARRAY
2268: ST_TO_ADDR
// ComExitBuilding ( russian_troops_2 ) ;
2269: LD_EXP 22
2273: PPUSH
2274: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , GetX ( un ) , GetY ( un ) ) ;
2278: LD_EXP 22
2282: PPUSH
2283: LD_VAR 0 1
2287: PPUSH
2288: CALL_OW 250
2292: PPUSH
2293: LD_VAR 0 1
2297: PPUSH
2298: CALL_OW 251
2302: PPUSH
2303: CALL_OW 174
// end ;
2307: PPOPN 1
2309: END
// every 0 0$01 trigger ( GetLives ( russian_patrol_tanks [ 1 ] ) < 999 or GetLives ( russian_patrol_tanks [ 2 ] ) < 999 ) and See ( 3 , JMM ) do
2310: LD_EXP 23
2314: PUSH
2315: LD_INT 1
2317: ARRAY
2318: PPUSH
2319: CALL_OW 256
2323: PUSH
2324: LD_INT 999
2326: LESS
2327: PUSH
2328: LD_EXP 23
2332: PUSH
2333: LD_INT 2
2335: ARRAY
2336: PPUSH
2337: CALL_OW 256
2341: PUSH
2342: LD_INT 999
2344: LESS
2345: OR
2346: PUSH
2347: LD_INT 3
2349: PPUSH
2350: LD_EXP 16
2354: PPUSH
2355: CALL_OW 292
2359: AND
2360: IFFALSE 2387
2362: GO 2364
2364: DISABLE
// begin active_road_patrol := false ;
2365: LD_ADDR_EXP 8
2369: PUSH
2370: LD_INT 0
2372: ST_TO_ADDR
// ComAttackUnit ( russian_patrol_tanks , JMM ) ;
2373: LD_EXP 23
2377: PPUSH
2378: LD_EXP 16
2382: PPUSH
2383: CALL_OW 115
// end ;
2387: END
// every 0 0$01 trigger macmilan_in_trap do
2388: LD_EXP 9
2392: IFFALSE 2438
2394: GO 2396
2396: DISABLE
// begin ComExitBuilding ( russian_troops_2 ) ;
2397: LD_EXP 22
2401: PPUSH
2402: CALL_OW 122
// ComAttackUnit ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , JMM ) ;
2406: LD_EXP 21
2410: PUSH
2411: LD_EXP 22
2415: ADD
2416: PUSH
2417: LD_EXP 26
2421: ADD
2422: PUSH
2423: LD_EXP 23
2427: ADD
2428: PPUSH
2429: LD_EXP 16
2433: PPUSH
2434: CALL_OW 115
// end ;
2438: END
// every 0 0$01 trigger meta_action do
2439: LD_EXP 10
2443: IFFALSE 2489
2445: GO 2447
2447: DISABLE
// begin active_road_patrol := false ;
2448: LD_ADDR_EXP 8
2452: PUSH
2453: LD_INT 0
2455: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , 93 , 1 ) ;
2456: LD_EXP 21
2460: PUSH
2461: LD_EXP 22
2465: ADD
2466: PUSH
2467: LD_EXP 26
2471: ADD
2472: PUSH
2473: LD_EXP 23
2477: ADD
2478: PPUSH
2479: LD_INT 93
2481: PPUSH
2482: LD_INT 1
2484: PPUSH
2485: CALL_OW 114
// end ;
2489: END
// every 0 0$1 trigger GetLives ( Pokryshkin ) < 1000 do
2490: LD_EXP 26
2494: PPUSH
2495: CALL_OW 256
2499: PUSH
2500: LD_INT 1000
2502: LESS
2503: IFFALSE 2554
2505: GO 2507
2507: DISABLE
// begin enable ;
2508: ENABLE
// if HexInfo ( 18 , 1 ) = Pokryshkin then
2509: LD_INT 18
2511: PPUSH
2512: LD_INT 1
2514: PPUSH
2515: CALL_OW 428
2519: PUSH
2520: LD_EXP 26
2524: EQUAL
2525: IFFALSE 2539
// begin RemoveUnit ( Pokryshkin ) ;
2527: LD_EXP 26
2531: PPUSH
2532: CALL_OW 64
// disable ;
2536: DISABLE
// end else
2537: GO 2554
// ComMoveXY ( Pokryshkin , 18 , 1 ) ;
2539: LD_EXP 26
2543: PPUSH
2544: LD_INT 18
2546: PPUSH
2547: LD_INT 1
2549: PPUSH
2550: CALL_OW 111
// end ;
2554: END
// every 0 0$20 trigger send_troops_to_forest do
2555: LD_EXP 14
2559: IFFALSE 2613
2561: GO 2563
2563: DISABLE
// begin if not IsOk ( russian_patrol_forest ) then
2564: LD_EXP 25
2568: PPUSH
2569: CALL_OW 302
2573: NOT
2574: IFFALSE 2578
// exit ;
2576: GO 2613
// ComAgressiveMove ( russian_troops_1 ^ Pokryshkin , GetRememberedX ( russian_patrol_forest ) , GetRememberedY ( russian_patrol_forest ) ) ;
2578: LD_EXP 21
2582: PUSH
2583: LD_EXP 26
2587: ADD
2588: PPUSH
2589: LD_EXP 25
2593: PPUSH
2594: CALL_OW 252
2598: PPUSH
2599: LD_EXP 25
2603: PPUSH
2604: CALL_OW 253
2608: PPUSH
2609: CALL_OW 114
// end ;
2613: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) = 3 then
2614: LD_VAR 0 1
2618: PPUSH
2619: CALL_OW 255
2623: PUSH
2624: LD_INT 3
2626: EQUAL
2627: IFFALSE 2670
// begin wait ( 11 ) ;
2629: LD_INT 11
2631: PPUSH
2632: CALL_OW 67
// ComEnterUnit ( driver , NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_depot ] ) , driver ) ) ;
2636: LD_VAR 0 1
2640: PPUSH
2641: LD_INT 30
2643: PUSH
2644: LD_INT 0
2646: PUSH
2647: EMPTY
2648: LIST
2649: LIST
2650: PPUSH
2651: CALL_OW 69
2655: PPUSH
2656: LD_VAR 0 1
2660: PPUSH
2661: CALL_OW 74
2665: PPUSH
2666: CALL_OW 120
// end ; end ; end_of_file
2670: PPOPN 4
2672: END
// export function Action ; var i ; begin
2673: LD_INT 0
2675: PPUSH
2676: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
2677: LD_ADDR_VAR 0 2
2681: PUSH
2682: LD_INT 22
2684: PUSH
2685: LD_INT 3
2687: PUSH
2688: EMPTY
2689: LIST
2690: LIST
2691: PUSH
2692: LD_INT 25
2694: PUSH
2695: LD_INT 1
2697: PUSH
2698: EMPTY
2699: LIST
2700: LIST
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: PPUSH
2706: CALL_OW 69
2710: PUSH
2711: FOR_IN
2712: IFFALSE 2725
// ComHold ( i ) ;
2714: LD_VAR 0 2
2718: PPUSH
2719: CALL_OW 140
2723: GO 2711
2725: POP
2726: POP
// InGameOn ;
2727: CALL_OW 8
// CenterOnXY ( 79 , 76 ) ;
2731: LD_INT 79
2733: PPUSH
2734: LD_INT 76
2736: PPUSH
2737: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
2741: LD_INT 10
2743: PPUSH
2744: CALL_OW 67
// PlaceUnitXY ( JMM , 80 , 79 , true ) ;
2748: LD_EXP 16
2752: PPUSH
2753: LD_INT 80
2755: PPUSH
2756: LD_INT 79
2758: PPUSH
2759: LD_INT 1
2761: PPUSH
2762: CALL_OW 48
// Wait ( 0 0$03 ) ;
2766: LD_INT 105
2768: PPUSH
2769: CALL_OW 67
// ComMoveXY ( JMM , 80 , 76 ) ;
2773: LD_EXP 16
2777: PPUSH
2778: LD_INT 80
2780: PPUSH
2781: LD_INT 76
2783: PPUSH
2784: CALL_OW 111
// Say ( JMM , D1-JMM-1 ) ;
2788: LD_EXP 16
2792: PPUSH
2793: LD_STRING D1-JMM-1
2795: PPUSH
2796: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2800: LD_INT 10
2802: PPUSH
2803: CALL_OW 67
// ComMoveXY ( JMM , 76 , 76 ) ;
2807: LD_EXP 16
2811: PPUSH
2812: LD_INT 76
2814: PPUSH
2815: LD_INT 76
2817: PPUSH
2818: CALL_OW 111
// Say ( JMM , D1-JMM-1a ) ;
2822: LD_EXP 16
2826: PPUSH
2827: LD_STRING D1-JMM-1a
2829: PPUSH
2830: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2834: LD_INT 10
2836: PPUSH
2837: CALL_OW 67
// ComTurnXY ( JMM , 83 , 66 ) ;
2841: LD_EXP 16
2845: PPUSH
2846: LD_INT 83
2848: PPUSH
2849: LD_INT 66
2851: PPUSH
2852: CALL_OW 118
// Say ( JMM , D1-JMM-1b ) ;
2856: LD_EXP 16
2860: PPUSH
2861: LD_STRING D1-JMM-1b
2863: PPUSH
2864: CALL_OW 88
// Wait ( 0 0$0.5 ) ;
2868: LD_INT 18
2870: PPUSH
2871: CALL_OW 67
// Say ( JMM , D1-JMM-1c ) ;
2875: LD_EXP 16
2879: PPUSH
2880: LD_STRING D1-JMM-1c
2882: PPUSH
2883: CALL_OW 88
// Wait ( 0 0$0.2 ) ;
2887: LD_INT 7
2889: PPUSH
2890: CALL_OW 67
// SayRadioNoFace ( Powell , D1-Pow-1 ) ;
2894: LD_EXP 19
2898: PPUSH
2899: LD_STRING D1-Pow-1
2901: PPUSH
2902: CALL_OW 586
// Say ( JMM , D1-JMM-2 ) ;
2906: LD_EXP 16
2910: PPUSH
2911: LD_STRING D1-JMM-2
2913: PPUSH
2914: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-2 ) ;
2918: LD_EXP 19
2922: PPUSH
2923: LD_STRING D1-Pow-2
2925: PPUSH
2926: CALL_OW 586
// Say ( JMM , D1-JMM-3 ) ;
2930: LD_EXP 16
2934: PPUSH
2935: LD_STRING D1-JMM-3
2937: PPUSH
2938: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-3 ) ;
2942: LD_EXP 19
2946: PPUSH
2947: LD_STRING D1-Pow-3
2949: PPUSH
2950: CALL_OW 586
// Say ( JMM , D1-JMM-4 ) ;
2954: LD_EXP 16
2958: PPUSH
2959: LD_STRING D1-JMM-4
2961: PPUSH
2962: CALL_OW 88
// ComFree ( JMM ) ;
2966: LD_EXP 16
2970: PPUSH
2971: CALL_OW 139
// Wait ( 0 0$0.3 ) ;
2975: LD_INT 10
2977: PPUSH
2978: CALL_OW 67
// InGameOff ;
2982: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
2986: LD_STRING M1
2988: PPUSH
2989: CALL_OW 337
// SaveForQuickRestart ;
2993: CALL_OW 22
// active_russian_dialog := true ;
2997: LD_ADDR_EXP 3
3001: PUSH
3002: LD_INT 1
3004: ST_TO_ADDR
// active_road_patrol := true ;
3005: LD_ADDR_EXP 8
3009: PUSH
3010: LD_INT 1
3012: ST_TO_ADDR
// if Difficulty < 3 then
3013: LD_OWVAR 67
3017: PUSH
3018: LD_INT 3
3020: LESS
3021: IFFALSE 3052
// begin PlaceUnitXY ( Bobby , 41 , 71 , false ) ;
3023: LD_EXP 17
3027: PPUSH
3028: LD_INT 41
3030: PPUSH
3031: LD_INT 71
3033: PPUSH
3034: LD_INT 0
3036: PPUSH
3037: CALL_OW 48
// ComHold ( Bobby ) ;
3041: LD_EXP 17
3045: PPUSH
3046: CALL_OW 140
// end else
3050: GO 3100
// begin SetDir ( Bobby , 5 ) ;
3052: LD_EXP 17
3056: PPUSH
3057: LD_INT 5
3059: PPUSH
3060: CALL_OW 233
// PlaceUnitXY ( Bobby , 105 , 98 , false ) ;
3064: LD_EXP 17
3068: PPUSH
3069: LD_INT 105
3071: PPUSH
3072: LD_INT 98
3074: PPUSH
3075: LD_INT 0
3077: PPUSH
3078: CALL_OW 48
// ComCrawl ( Bobby ) ;
3082: LD_EXP 17
3086: PPUSH
3087: CALL_OW 137
// AddComHold ( Bobby ) ;
3091: LD_EXP 17
3095: PPUSH
3096: CALL_OW 200
// end ; PlaceUnitXY ( Cyrus , 90 , 42 , false ) ;
3100: LD_EXP 18
3104: PPUSH
3105: LD_INT 90
3107: PPUSH
3108: LD_INT 42
3110: PPUSH
3111: LD_INT 0
3113: PPUSH
3114: CALL_OW 48
// ComMoveXY ( Cyrus , 79 , 34 ) ;
3118: LD_EXP 18
3122: PPUSH
3123: LD_INT 79
3125: PPUSH
3126: LD_INT 34
3128: PPUSH
3129: CALL_OW 111
// AddComCrawl ( Cyrus ) ;
3133: LD_EXP 18
3137: PPUSH
3138: CALL_OW 197
// end ;
3142: LD_VAR 0 1
3146: RET
// every 0 0$01 trigger active_russian_dialog do var wait_points ;
3147: LD_EXP 3
3151: IFFALSE 3745
3153: GO 3155
3155: DISABLE
3156: LD_INT 0
3158: PPUSH
// begin wait_points := 0 ;
3159: LD_ADDR_VAR 0 1
3163: PUSH
3164: LD_INT 0
3166: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
3167: LD_INT 70
3169: PPUSH
3170: CALL_OW 67
// ComAgressiveMove ( russian_troops_1 , 79 , 83 ) ;
3174: LD_EXP 21
3178: PPUSH
3179: LD_INT 79
3181: PPUSH
3182: LD_INT 83
3184: PPUSH
3185: CALL_OW 114
// Say ( russian_troops_1 [ 2 ] , D1R-Rus1-1 ) ;
3189: LD_EXP 21
3193: PUSH
3194: LD_INT 2
3196: ARRAY
3197: PPUSH
3198: LD_STRING D1R-Rus1-1
3200: PPUSH
3201: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1R-Rus2-1 ) ;
3205: LD_EXP 21
3209: PUSH
3210: LD_INT 1
3212: ARRAY
3213: PPUSH
3214: LD_STRING D1R-Rus2-1
3216: PPUSH
3217: CALL_OW 88
// ComAgressiveMove ( russian_troops_2 , 91 , 80 ) ;
3221: LD_EXP 22
3225: PPUSH
3226: LD_INT 91
3228: PPUSH
3229: LD_INT 80
3231: PPUSH
3232: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
3236: LD_INT 35
3238: PPUSH
3239: CALL_OW 67
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 79 , 82 ) < 6 ;
3243: LD_EXP 21
3247: PUSH
3248: LD_INT 1
3250: ARRAY
3251: PPUSH
3252: LD_INT 79
3254: PPUSH
3255: LD_INT 82
3257: PPUSH
3258: CALL_OW 297
3262: PUSH
3263: LD_INT 6
3265: LESS
3266: IFFALSE 3236
// if not IsInArea ( JMM , jmm_spot ) then
3268: LD_EXP 16
3272: PPUSH
3273: LD_INT 5
3275: PPUSH
3276: CALL_OW 308
3280: NOT
3281: IFFALSE 3301
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1 ) else
3283: LD_EXP 21
3287: PUSH
3288: LD_INT 1
3290: ARRAY
3291: PPUSH
3292: LD_STRING D1Ra-Rus2-1
3294: PPUSH
3295: CALL_OW 88
3299: GO 3368
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3301: LD_EXP 21
3305: PUSH
3306: LD_INT 2
3308: ARRAY
3309: PPUSH
3310: LD_STRING D1Rb-Rus1-1
3312: PPUSH
3313: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Rb-Rus2-1 ) ;
3317: LD_EXP 21
3321: PUSH
3322: LD_INT 1
3324: ARRAY
3325: PPUSH
3326: LD_STRING D1Rb-Rus2-1
3328: PPUSH
3329: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 , GetX ( JMM ) , GetY ( JMM ) ) ;
3333: LD_EXP 21
3337: PUSH
3338: LD_EXP 22
3342: ADD
3343: PPUSH
3344: LD_EXP 16
3348: PPUSH
3349: CALL_OW 250
3353: PPUSH
3354: LD_EXP 16
3358: PPUSH
3359: CALL_OW 251
3363: PPUSH
3364: CALL_OW 114
// end ; wait_points := 10 ;
3368: LD_ADDR_VAR 0 1
3372: PUSH
3373: LD_INT 10
3375: ST_TO_ADDR
// if Difficulty > 1 then
3376: LD_OWVAR 67
3380: PUSH
3381: LD_INT 1
3383: GREATER
3384: IFFALSE 3466
// begin ComAgressiveMove ( russian_troops_1 , 78 , 95 ) ;
3386: LD_EXP 21
3390: PPUSH
3391: LD_INT 78
3393: PPUSH
3394: LD_INT 95
3396: PPUSH
3397: CALL_OW 114
// AddComWait ( russian_troops_1 , 0 0$05 ) ;
3401: LD_EXP 21
3405: PPUSH
3406: LD_INT 175
3408: PPUSH
3409: CALL_OW 202
// wait_points := wait_points + 15 ;
3413: LD_ADDR_VAR 0 1
3417: PUSH
3418: LD_VAR 0 1
3422: PUSH
3423: LD_INT 15
3425: PLUS
3426: ST_TO_ADDR
// if Difficulty > 2 then
3427: LD_OWVAR 67
3431: PUSH
3432: LD_INT 2
3434: GREATER
3435: IFFALSE 3466
// begin AddComAgressiveMove ( russian_troops_1 , 65 , 79 ) ;
3437: LD_EXP 21
3441: PPUSH
3442: LD_INT 65
3444: PPUSH
3445: LD_INT 79
3447: PPUSH
3448: CALL_OW 174
// wait_points := wait_points + 5 ;
3452: LD_ADDR_VAR 0 1
3456: PUSH
3457: LD_VAR 0 1
3461: PUSH
3462: LD_INT 5
3464: PLUS
3465: ST_TO_ADDR
// end ; end ; repeat wait ( 0 0$01 ) ;
3466: LD_INT 35
3468: PPUSH
3469: CALL_OW 67
// wait_points := wait_points - 1 ;
3473: LD_ADDR_VAR 0 1
3477: PUSH
3478: LD_VAR 0 1
3482: PUSH
3483: LD_INT 1
3485: MINUS
3486: ST_TO_ADDR
// if See ( 3 , JMM ) then
3487: LD_INT 3
3489: PPUSH
3490: LD_EXP 16
3494: PPUSH
3495: CALL_OW 292
3499: IFFALSE 3553
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3501: LD_EXP 21
3505: PUSH
3506: LD_INT 2
3508: ARRAY
3509: PPUSH
3510: LD_STRING D1Rb-Rus1-1
3512: PPUSH
3513: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3517: LD_EXP 21
3521: PPUSH
3522: LD_EXP 16
3526: PPUSH
3527: CALL_OW 250
3531: PPUSH
3532: LD_EXP 16
3536: PPUSH
3537: CALL_OW 251
3541: PPUSH
3542: CALL_OW 114
// Wait ( 0 0$03 ) ;
3546: LD_INT 105
3548: PPUSH
3549: CALL_OW 67
// end ; until wait_points = 0 ;
3553: LD_VAR 0 1
3557: PUSH
3558: LD_INT 0
3560: EQUAL
3561: IFFALSE 3466
// Say ( russian_troops_1 [ 2 ] , D1Rc-Rus1-1 ) ;
3563: LD_EXP 21
3567: PUSH
3568: LD_INT 2
3570: ARRAY
3571: PPUSH
3572: LD_STRING D1Rc-Rus1-1
3574: PPUSH
3575: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1a ) ;
3579: LD_EXP 21
3583: PUSH
3584: LD_INT 1
3586: ARRAY
3587: PPUSH
3588: LD_STRING D1Ra-Rus2-1a
3590: PPUSH
3591: CALL_OW 88
// active_powell_dialog := true ;
3595: LD_ADDR_EXP 15
3599: PUSH
3600: LD_INT 1
3602: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3603: LD_EXP 21
3607: PPUSH
3608: LD_INT 45
3610: PPUSH
3611: LD_INT 5
3613: PPUSH
3614: CALL_OW 114
// ComEnterUnit ( russian_troops_2 , rbar1 ) ;
3618: LD_EXP 22
3622: PPUSH
3623: LD_INT 26
3625: PPUSH
3626: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
3630: LD_INT 35
3632: PPUSH
3633: CALL_OW 67
// if See ( 3 , JMM ) then
3637: LD_INT 3
3639: PPUSH
3640: LD_EXP 16
3644: PPUSH
3645: CALL_OW 292
3649: IFFALSE 3705
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3651: LD_EXP 21
3655: PUSH
3656: LD_INT 2
3658: ARRAY
3659: PPUSH
3660: LD_STRING D1Rb-Rus1-1
3662: PPUSH
3663: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3667: LD_EXP 21
3671: PPUSH
3672: LD_EXP 16
3676: PPUSH
3677: CALL_OW 250
3681: PPUSH
3682: LD_EXP 16
3686: PPUSH
3687: CALL_OW 251
3691: PPUSH
3692: CALL_OW 114
// Wait ( 0 0$50 ) ;
3696: LD_INT 1750
3698: PPUSH
3699: CALL_OW 67
// end else
3703: GO 3720
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3705: LD_EXP 21
3709: PPUSH
3710: LD_INT 45
3712: PPUSH
3713: LD_INT 5
3715: PPUSH
3716: CALL_OW 114
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 45 , 5 ) < 10 ;
3720: LD_EXP 21
3724: PUSH
3725: LD_INT 1
3727: ARRAY
3728: PPUSH
3729: LD_INT 45
3731: PPUSH
3732: LD_INT 5
3734: PPUSH
3735: CALL_OW 297
3739: PUSH
3740: LD_INT 10
3742: LESS
3743: IFFALSE 3630
// end ;
3745: PPOPN 1
3747: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 6 ] ] ) and Difficulty = 1 do
3748: LD_INT 22
3750: PUSH
3751: LD_INT 3
3753: PUSH
3754: EMPTY
3755: LIST
3756: LIST
3757: PUSH
3758: LD_INT 92
3760: PUSH
3761: LD_INT 80
3763: PUSH
3764: LD_INT 83
3766: PUSH
3767: LD_INT 6
3769: PUSH
3770: EMPTY
3771: LIST
3772: LIST
3773: LIST
3774: LIST
3775: PUSH
3776: EMPTY
3777: LIST
3778: LIST
3779: PPUSH
3780: CALL_OW 69
3784: PUSH
3785: LD_OWVAR 67
3789: PUSH
3790: LD_INT 1
3792: EQUAL
3793: AND
3794: IFFALSE 3875
3796: GO 3798
3798: DISABLE
// begin PlaceSeeing ( 80 , 83 , 1 , - 7 ) ;
3799: LD_INT 80
3801: PPUSH
3802: LD_INT 83
3804: PPUSH
3805: LD_INT 1
3807: PPUSH
3808: LD_INT 7
3810: NEG
3811: PPUSH
3812: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
3816: LD_INT 35
3818: PPUSH
3819: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 10 ] ] ) ;
3823: LD_INT 22
3825: PUSH
3826: LD_INT 3
3828: PUSH
3829: EMPTY
3830: LIST
3831: LIST
3832: PUSH
3833: LD_INT 92
3835: PUSH
3836: LD_INT 80
3838: PUSH
3839: LD_INT 83
3841: PUSH
3842: LD_INT 10
3844: PUSH
3845: EMPTY
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: PUSH
3851: EMPTY
3852: LIST
3853: LIST
3854: PPUSH
3855: CALL_OW 69
3859: NOT
3860: IFFALSE 3816
// RemoveSeeing ( 80 , 83 , 1 ) ;
3862: LD_INT 80
3864: PPUSH
3865: LD_INT 83
3867: PPUSH
3868: LD_INT 1
3870: PPUSH
3871: CALL_OW 331
// end ;
3875: END
// every 0 0$02 trigger GetDistUnits ( JMM , Bobby ) < 9 and IsOk ( Bobby ) do
3876: LD_EXP 16
3880: PPUSH
3881: LD_EXP 17
3885: PPUSH
3886: CALL_OW 296
3890: PUSH
3891: LD_INT 9
3893: LESS
3894: PUSH
3895: LD_EXP 17
3899: PPUSH
3900: CALL_OW 302
3904: AND
3905: IFFALSE 4356
3907: GO 3909
3909: DISABLE
// begin ComWalk ( Bobby ) ;
3910: LD_EXP 17
3914: PPUSH
3915: CALL_OW 138
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
3919: LD_EXP 17
3923: PPUSH
3924: LD_EXP 16
3928: PPUSH
3929: CALL_OW 250
3933: PPUSH
3934: LD_EXP 16
3938: PPUSH
3939: CALL_OW 251
3943: PPUSH
3944: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
3948: LD_INT 35
3950: PPUSH
3951: CALL_OW 67
// until See ( 4 , JMM ) ;
3955: LD_INT 4
3957: PPUSH
3958: LD_EXP 16
3962: PPUSH
3963: CALL_OW 292
3967: IFFALSE 3948
// InGameOn ;
3969: CALL_OW 8
// ComTurnUnit ( JMM , Bobby ) ;
3973: LD_EXP 16
3977: PPUSH
3978: LD_EXP 17
3982: PPUSH
3983: CALL_OW 119
// if cyrus_in_squad and IsOk ( Cyrus ) and GetDistUnits ( JMM , Cyrus ) < 10 then
3987: LD_EXP 7
3991: PUSH
3992: LD_EXP 18
3996: PPUSH
3997: CALL_OW 302
4001: AND
4002: PUSH
4003: LD_EXP 16
4007: PPUSH
4008: LD_EXP 18
4012: PPUSH
4013: CALL_OW 296
4017: PUSH
4018: LD_INT 10
4020: LESS
4021: AND
4022: IFFALSE 4067
// begin ComMoveXY ( Cyrus , GetX ( JMM ) , GetY ( JMM ) ) ;
4024: LD_EXP 18
4028: PPUSH
4029: LD_EXP 16
4033: PPUSH
4034: CALL_OW 250
4038: PPUSH
4039: LD_EXP 16
4043: PPUSH
4044: CALL_OW 251
4048: PPUSH
4049: CALL_OW 111
// AddComTurnUnit ( Cyrus , Bobby ) ;
4053: LD_EXP 18
4057: PPUSH
4058: LD_EXP 17
4062: PPUSH
4063: CALL_OW 179
// end ; Say ( JMM , D2-JMM-1 ) ;
4067: LD_EXP 16
4071: PPUSH
4072: LD_STRING D2-JMM-1
4074: PPUSH
4075: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
4079: LD_INT 10
4081: PPUSH
4082: CALL_OW 67
// ComTurnUnit ( Bobby , JMM ) ;
4086: LD_EXP 17
4090: PPUSH
4091: LD_EXP 16
4095: PPUSH
4096: CALL_OW 119
// Say ( Bobby , D2-Bobby-1 ) ;
4100: LD_EXP 17
4104: PPUSH
4105: LD_STRING D2-Bobby-1
4107: PPUSH
4108: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
4112: LD_EXP 16
4116: PPUSH
4117: LD_STRING D2-JMM-2
4119: PPUSH
4120: CALL_OW 88
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4124: LD_EXP 17
4128: PPUSH
4129: LD_EXP 16
4133: PPUSH
4134: CALL_OW 250
4138: PPUSH
4139: LD_EXP 16
4143: PPUSH
4144: CALL_OW 251
4148: PPUSH
4149: CALL_OW 111
// Say ( Bobby , D2-Bobby-2 ) ;
4153: LD_EXP 17
4157: PPUSH
4158: LD_STRING D2-Bobby-2
4160: PPUSH
4161: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
4165: LD_EXP 16
4169: PPUSH
4170: LD_STRING D2-JMM-3
4172: PPUSH
4173: CALL_OW 88
// ComTurnUnit ( Bobby , JMM ) ;
4177: LD_EXP 17
4181: PPUSH
4182: LD_EXP 16
4186: PPUSH
4187: CALL_OW 119
// Say ( Bobby , D2-Bobby-3 ) ;
4191: LD_EXP 17
4195: PPUSH
4196: LD_STRING D2-Bobby-3
4198: PPUSH
4199: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
4203: LD_EXP 16
4207: PPUSH
4208: LD_STRING D2-JMM-4
4210: PPUSH
4211: CALL_OW 88
// Say ( Bobby , D2-Bobby-4 ) ;
4215: LD_EXP 17
4219: PPUSH
4220: LD_STRING D2-Bobby-4
4222: PPUSH
4223: CALL_OW 88
// Say ( JMM , D2-JMM-5 ) ;
4227: LD_EXP 16
4231: PPUSH
4232: LD_STRING D2-JMM-5
4234: PPUSH
4235: CALL_OW 88
// Say ( Bobby , D2-Bobby-5 ) ;
4239: LD_EXP 17
4243: PPUSH
4244: LD_STRING D2-Bobby-5
4246: PPUSH
4247: CALL_OW 88
// Say ( JMM , D2-JMM-6 ) ;
4251: LD_EXP 16
4255: PPUSH
4256: LD_STRING D2-JMM-6
4258: PPUSH
4259: CALL_OW 88
// if not powell_contact then
4263: LD_EXP 5
4267: NOT
4268: IFFALSE 4294
// begin Say ( Bobby , D2-Bobby-6 ) ;
4270: LD_EXP 17
4274: PPUSH
4275: LD_STRING D2-Bobby-6
4277: PPUSH
4278: CALL_OW 88
// Say ( JMM , D2-JMM-7 ) ;
4282: LD_EXP 16
4286: PPUSH
4287: LD_STRING D2-JMM-7
4289: PPUSH
4290: CALL_OW 88
// end ; InGameOff ;
4294: CALL_OW 9
// SetSide ( Bobby , 1 ) ;
4298: LD_EXP 17
4302: PPUSH
4303: LD_INT 1
4305: PPUSH
4306: CALL_OW 235
// ComFree ( [ JMM , Bobby ] ) ;
4310: LD_EXP 16
4314: PUSH
4315: LD_EXP 17
4319: PUSH
4320: EMPTY
4321: LIST
4322: LIST
4323: PPUSH
4324: CALL_OW 139
// bobby_in_squad := true ;
4328: LD_ADDR_EXP 4
4332: PUSH
4333: LD_INT 1
4335: ST_TO_ADDR
// if powell_contact and not cyrus_in_squad then
4336: LD_EXP 5
4340: PUSH
4341: LD_EXP 7
4345: NOT
4346: AND
4347: IFFALSE 4356
// ChangeMissionObjectives ( M2b ) ;
4349: LD_STRING M2b
4351: PPUSH
4352: CALL_OW 337
// end ;
4356: END
// every 0 0$45 trigger active_russian_dialog and not bobby_in_squad and Difficulty < 3 do
4357: LD_EXP 3
4361: PUSH
4362: LD_EXP 4
4366: NOT
4367: AND
4368: PUSH
4369: LD_OWVAR 67
4373: PUSH
4374: LD_INT 3
4376: LESS
4377: AND
4378: IFFALSE 4398
4380: GO 4382
4382: DISABLE
// ComMoveXY ( Bobby , 75 , 83 ) ;
4383: LD_EXP 17
4387: PPUSH
4388: LD_INT 75
4390: PPUSH
4391: LD_INT 83
4393: PPUSH
4394: CALL_OW 111
4398: END
// every 0 0$10 trigger cyrus_in_squad and not bobby_in_squad do
4399: LD_EXP 7
4403: PUSH
4404: LD_EXP 4
4408: NOT
4409: AND
4410: IFFALSE 4439
4412: GO 4414
4414: DISABLE
// begin ComMoveXY ( Bobby , 105 , 97 ) ;
4415: LD_EXP 17
4419: PPUSH
4420: LD_INT 105
4422: PPUSH
4423: LD_INT 97
4425: PPUSH
4426: CALL_OW 111
// AddComCrawl ( Bobby ) ;
4430: LD_EXP 17
4434: PPUSH
4435: CALL_OW 197
// end ;
4439: END
// every 0 0$01 trigger IsInArea ( JMM , obstacle_area ) and GetDistUnits ( JMM , Bobby ) < 7 and bobby_in_squad do
4440: LD_EXP 16
4444: PPUSH
4445: LD_INT 6
4447: PPUSH
4448: CALL_OW 308
4452: PUSH
4453: LD_EXP 16
4457: PPUSH
4458: LD_EXP 17
4462: PPUSH
4463: CALL_OW 296
4467: PUSH
4468: LD_INT 7
4470: LESS
4471: AND
4472: PUSH
4473: LD_EXP 4
4477: AND
4478: IFFALSE 4525
4480: GO 4482
4482: DISABLE
// begin ComHold ( [ JMM , Bobby ] ) ;
4483: LD_EXP 16
4487: PUSH
4488: LD_EXP 17
4492: PUSH
4493: EMPTY
4494: LIST
4495: LIST
4496: PPUSH
4497: CALL_OW 140
// Say ( JMM , D2a-JMM-1 ) ;
4501: LD_EXP 16
4505: PPUSH
4506: LD_STRING D2a-JMM-1
4508: PPUSH
4509: CALL_OW 88
// Say ( Bobby , D2a-Bobby-1 ) ;
4513: LD_EXP 17
4517: PPUSH
4518: LD_STRING D2a-Bobby-1
4520: PPUSH
4521: CALL_OW 88
// end ;
4525: END
// every 0 0$50 trigger active_powell_dialog and not See ( 3 , JMM ) do
4526: LD_EXP 15
4530: PUSH
4531: LD_INT 3
4533: PPUSH
4534: LD_EXP 16
4538: PPUSH
4539: CALL_OW 292
4543: NOT
4544: AND
4545: IFFALSE 4716
4547: GO 4549
4549: DISABLE
// begin wait ( 0 0$5 ) ;
4550: LD_INT 175
4552: PPUSH
4553: CALL_OW 67
// InGameOn ;
4557: CALL_OW 8
// DialogueOn ;
4561: CALL_OW 6
// SayRadioNoFace ( Powell , D3-Pow-1 ) ;
4565: LD_EXP 19
4569: PPUSH
4570: LD_STRING D3-Pow-1
4572: PPUSH
4573: CALL_OW 586
// Say ( JMM , D3-JMM-1 ) ;
4577: LD_EXP 16
4581: PPUSH
4582: LD_STRING D3-JMM-1
4584: PPUSH
4585: CALL_OW 88
// SayRadioNoFace ( Powell , D3-Pow-2 ) ;
4589: LD_EXP 19
4593: PPUSH
4594: LD_STRING D3-Pow-2
4596: PPUSH
4597: CALL_OW 586
// Say ( JMM , D3-JMM-2 ) ;
4601: LD_EXP 16
4605: PPUSH
4606: LD_STRING D3-JMM-2
4608: PPUSH
4609: CALL_OW 88
// SayRadioNoFace ( Powell , D3-Pow-3 ) ;
4613: LD_EXP 19
4617: PPUSH
4618: LD_STRING D3-Pow-3
4620: PPUSH
4621: CALL_OW 586
// DialogueOff ;
4625: CALL_OW 7
// InGameOff ;
4629: CALL_OW 9
// powell_contact := true ;
4633: LD_ADDR_EXP 5
4637: PUSH
4638: LD_INT 1
4640: ST_TO_ADDR
// SetAreaMapShow ( exitArea , 1 ) ;
4641: LD_INT 10
4643: PPUSH
4644: LD_INT 1
4646: PPUSH
4647: CALL_OW 424
// uc_side := 4 ;
4651: LD_ADDR_OWVAR 20
4655: PUSH
4656: LD_INT 4
4658: ST_TO_ADDR
// uc_nation := 1 ;
4659: LD_ADDR_OWVAR 21
4663: PUSH
4664: LD_INT 1
4666: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
4667: LD_ADDR_EXP 19
4671: PUSH
4672: LD_STRING Powell
4674: PPUSH
4675: LD_INT 0
4677: PPUSH
4678: LD_STRING 
4680: PPUSH
4681: CALL 20994 0 3
4685: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
4686: LD_STRING M2
4688: PPUSH
4689: CALL_OW 337
// if not bobby_in_squad then
4693: LD_EXP 4
4697: NOT
4698: IFFALSE 4709
// ChangeMissionObjectives ( M2a ) else
4700: LD_STRING M2a
4702: PPUSH
4703: CALL_OW 337
4707: GO 4716
// ChangeMissionObjectives ( M2b ) ;
4709: LD_STRING M2b
4711: PPUSH
4712: CALL_OW 337
// end ;
4716: END
// every 0 0$01 trigger IsInArea ( JMM , fakeArea ) do
4717: LD_EXP 16
4721: PPUSH
4722: LD_INT 7
4724: PPUSH
4725: CALL_OW 308
4729: IFFALSE 4864
4731: GO 4733
4733: DISABLE
// begin DialogueOn ;
4734: CALL_OW 6
// SayRadioNoFace ( fakePokryshkin , D4-Rus3-1 ) ;
4738: LD_EXP 20
4742: PPUSH
4743: LD_STRING D4-Rus3-1
4745: PPUSH
4746: CALL_OW 586
// DialogueOff ;
4750: CALL_OW 7
// ChangeMissionObjectives ( M3a ) ;
4754: LD_STRING M3a
4756: PPUSH
4757: CALL_OW 337
// SetAreaMapShow ( fakeEnd , 1 ) ;
4761: LD_INT 11
4763: PPUSH
4764: LD_INT 1
4766: PPUSH
4767: CALL_OW 424
// Wait ( 0 0$02 ) ;
4771: LD_INT 70
4773: PPUSH
4774: CALL_OW 67
// DialogueOn ;
4778: CALL_OW 6
// SayRadioNoFace ( Powell , D4-Pow-1 ) ;
4782: LD_EXP 19
4786: PPUSH
4787: LD_STRING D4-Pow-1
4789: PPUSH
4790: CALL_OW 586
// DialogueOff ;
4794: CALL_OW 7
// ChangeMissionObjectives ( M3b ) ;
4798: LD_STRING M3b
4800: PPUSH
4801: CALL_OW 337
// case Query ( Q1 ) of 1 :
4805: LD_STRING Q1
4807: PPUSH
4808: CALL_OW 97
4812: PUSH
4813: LD_INT 1
4815: DOUBLE
4816: EQUAL
4817: IFTRUE 4821
4819: GO 4852
4821: POP
// begin macmilan_use_radio := true ;
4822: LD_ADDR_EXP 6
4826: PUSH
4827: LD_INT 1
4829: ST_TO_ADDR
// DialogueOn ;
4830: CALL_OW 6
// Say ( JMM , D4a-JMM-1 ) ;
4834: LD_EXP 16
4838: PPUSH
4839: LD_STRING D4a-JMM-1
4841: PPUSH
4842: CALL_OW 88
// DialogueOff ;
4846: CALL_OW 7
// end ; 2 :
4850: GO 4864
4852: LD_INT 2
4854: DOUBLE
4855: EQUAL
4856: IFTRUE 4860
4858: GO 4863
4860: POP
// ; end ;
4861: GO 4864
4863: POP
// end ;
4864: END
// every 0 0$02 trigger GetDistUnits ( JMM , Cyrus ) < 8 and IsOk ( Cyrus ) do
4865: LD_EXP 16
4869: PPUSH
4870: LD_EXP 18
4874: PPUSH
4875: CALL_OW 296
4879: PUSH
4880: LD_INT 8
4882: LESS
4883: PUSH
4884: LD_EXP 18
4888: PPUSH
4889: CALL_OW 302
4893: AND
4894: IFFALSE 5185
4896: GO 4898
4898: DISABLE
// begin InGameOn ;
4899: CALL_OW 8
// ComMoveXY ( JMM , GetX ( Cyrus ) , GetY ( Cyrus ) ) ;
4903: LD_EXP 16
4907: PPUSH
4908: LD_EXP 18
4912: PPUSH
4913: CALL_OW 250
4917: PPUSH
4918: LD_EXP 18
4922: PPUSH
4923: CALL_OW 251
4927: PPUSH
4928: CALL_OW 111
// if IsOk ( Bobby ) and bobby_in_squad then
4932: LD_EXP 17
4936: PPUSH
4937: CALL_OW 302
4941: PUSH
4942: LD_EXP 4
4946: AND
4947: IFFALSE 4978
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4949: LD_EXP 17
4953: PPUSH
4954: LD_EXP 16
4958: PPUSH
4959: CALL_OW 250
4963: PPUSH
4964: LD_EXP 16
4968: PPUSH
4969: CALL_OW 251
4973: PPUSH
4974: CALL_OW 111
// Say ( JMM , D5-JMM-1 ) ;
4978: LD_EXP 16
4982: PPUSH
4983: LD_STRING D5-JMM-1
4985: PPUSH
4986: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
4990: LD_INT 10
4992: PPUSH
4993: CALL_OW 67
// ComTurnUnit ( JMM , Cyrus ) ;
4997: LD_EXP 16
5001: PPUSH
5002: LD_EXP 18
5006: PPUSH
5007: CALL_OW 119
// ComWalk ( Cyrus ) ;
5011: LD_EXP 18
5015: PPUSH
5016: CALL_OW 138
// ComTurnUnit ( Cyrus , JMM ) ;
5020: LD_EXP 18
5024: PPUSH
5025: LD_EXP 16
5029: PPUSH
5030: CALL_OW 119
// Say ( Cyrus , D5-Cyrus-1 ) ;
5034: LD_EXP 18
5038: PPUSH
5039: LD_STRING D5-Cyrus-1
5041: PPUSH
5042: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5046: LD_EXP 17
5050: PPUSH
5051: CALL_OW 302
5055: PUSH
5056: LD_EXP 4
5060: AND
5061: IFFALSE 5101
// begin ComTurnUnit ( Bobby , Cyrus ) ;
5063: LD_EXP 17
5067: PPUSH
5068: LD_EXP 18
5072: PPUSH
5073: CALL_OW 119
// Say ( Bobby , D5-Bobby-1 ) ;
5077: LD_EXP 17
5081: PPUSH
5082: LD_STRING D5-Bobby-1
5084: PPUSH
5085: CALL_OW 88
// Say ( JMM , D5-JMM-2 ) ;
5089: LD_EXP 16
5093: PPUSH
5094: LD_STRING D5-JMM-2
5096: PPUSH
5097: CALL_OW 88
// end ; InGameOff ;
5101: CALL_OW 9
// cyrus_in_squad := true ;
5105: LD_ADDR_EXP 7
5109: PUSH
5110: LD_INT 1
5112: ST_TO_ADDR
// SetSide ( Cyrus , 1 ) ;
5113: LD_EXP 18
5117: PPUSH
5118: LD_INT 1
5120: PPUSH
5121: CALL_OW 235
// if powell_contact and not bobby_in_squad then
5125: LD_EXP 5
5129: PUSH
5130: LD_EXP 4
5134: NOT
5135: AND
5136: IFFALSE 5145
// ChangeMissionObjectives ( M2b ) ;
5138: LD_STRING M2b
5140: PPUSH
5141: CALL_OW 337
// if not bobby_in_squad and GetSide ( Bobby ) = 4 and IsOk ( Bobby ) then
5145: LD_EXP 4
5149: NOT
5150: PUSH
5151: LD_EXP 17
5155: PPUSH
5156: CALL_OW 255
5160: PUSH
5161: LD_INT 4
5163: EQUAL
5164: AND
5165: PUSH
5166: LD_EXP 17
5170: PPUSH
5171: CALL_OW 302
5175: AND
5176: IFFALSE 5185
// SetAchievement ( ACH_CYRUS ) ;
5178: LD_STRING ACH_CYRUS
5180: PPUSH
5181: CALL_OW 543
// end ;
5185: END
// every 0 0$01 trigger bobby_in_squad and cyrus_in_squad do
5186: LD_EXP 4
5190: PUSH
5191: LD_EXP 7
5195: AND
5196: IFFALSE 5208
5198: GO 5200
5200: DISABLE
// ChangeMissionObjectives ( M2c ) ;
5201: LD_STRING M2c
5203: PPUSH
5204: CALL_OW 337
5208: END
// every 0 0$01 trigger IsInArea ( JMM , trap ) do
5209: LD_EXP 16
5213: PPUSH
5214: LD_INT 8
5216: PPUSH
5217: CALL_OW 308
5221: IFFALSE 5273
5223: GO 5225
5225: DISABLE
// begin macmilan_in_trap := true ;
5226: LD_ADDR_EXP 9
5230: PUSH
5231: LD_INT 1
5233: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
5234: LD_INT 35
5236: PPUSH
5237: CALL_OW 67
// DialogueOn ;
5241: CALL_OW 6
// Say ( Pokryshkin , D5-Pok-1 ) ;
5245: LD_EXP 26
5249: PPUSH
5250: LD_STRING D5-Pok-1
5252: PPUSH
5253: CALL_OW 88
// DialogueOff ;
5257: CALL_OW 7
// Say ( JMM , D4b-JMM-1 ) ;
5261: LD_EXP 16
5265: PPUSH
5266: LD_STRING D4b-JMM-1
5268: PPUSH
5269: CALL_OW 88
// end ;
5273: END
// every 0 0$01 trigger GetDistUnits ( JMM , russian_meta_guards [ russian_meta_guards ] ) < 12 or UnitFilter ( russian_meta_guards , [ f_not , [ f_lives , 990 ] ] ) do var i , hp ;
5274: LD_EXP 16
5278: PPUSH
5279: LD_EXP 24
5283: PUSH
5284: LD_EXP 24
5288: ARRAY
5289: PPUSH
5290: CALL_OW 296
5294: PUSH
5295: LD_INT 12
5297: LESS
5298: PUSH
5299: LD_EXP 24
5303: PPUSH
5304: LD_INT 3
5306: PUSH
5307: LD_INT 24
5309: PUSH
5310: LD_INT 990
5312: PUSH
5313: EMPTY
5314: LIST
5315: LIST
5316: PUSH
5317: EMPTY
5318: LIST
5319: LIST
5320: PPUSH
5321: CALL_OW 72
5325: OR
5326: IFFALSE 5556
5328: GO 5330
5330: DISABLE
5331: LD_INT 0
5333: PPUSH
5334: PPUSH
// begin hp := [ 300 , 250 , 200 ] [ Difficulty ] ;
5335: LD_ADDR_VAR 0 2
5339: PUSH
5340: LD_INT 300
5342: PUSH
5343: LD_INT 250
5345: PUSH
5346: LD_INT 200
5348: PUSH
5349: EMPTY
5350: LIST
5351: LIST
5352: LIST
5353: PUSH
5354: LD_OWVAR 67
5358: ARRAY
5359: ST_TO_ADDR
// for i in russian_meta_guards do
5360: LD_ADDR_VAR 0 1
5364: PUSH
5365: LD_EXP 24
5369: PUSH
5370: FOR_IN
5371: IFFALSE 5411
// if IsOk ( i ) then
5373: LD_VAR 0 1
5377: PPUSH
5378: CALL_OW 302
5382: IFFALSE 5409
// SetLives ( i , GetLives ( i ) - hp ) ;
5384: LD_VAR 0 1
5388: PPUSH
5389: LD_VAR 0 1
5393: PPUSH
5394: CALL_OW 256
5398: PUSH
5399: LD_VAR 0 2
5403: MINUS
5404: PPUSH
5405: CALL_OW 234
5409: GO 5370
5411: POP
5412: POP
// DialogueOn ;
5413: CALL_OW 6
// Say ( russian_meta_guards [ russian_meta_guards ] , D6-FRus1-1 ) ;
5417: LD_EXP 24
5421: PUSH
5422: LD_EXP 24
5426: ARRAY
5427: PPUSH
5428: LD_STRING D6-FRus1-1
5430: PPUSH
5431: CALL_OW 88
// Say ( JMM , D6-JMM-1 ) ;
5435: LD_EXP 16
5439: PPUSH
5440: LD_STRING D6-JMM-1
5442: PPUSH
5443: CALL_OW 88
// if IsOk ( Cyrus ) and cyrus_in_squad then
5447: LD_EXP 18
5451: PPUSH
5452: CALL_OW 302
5456: PUSH
5457: LD_EXP 7
5461: AND
5462: IFFALSE 5476
// Say ( Cyrus , D6-Cyrus-1 ) ;
5464: LD_EXP 18
5468: PPUSH
5469: LD_STRING D6-Cyrus-1
5471: PPUSH
5472: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5476: LD_EXP 17
5480: PPUSH
5481: CALL_OW 302
5485: PUSH
5486: LD_EXP 4
5490: AND
5491: IFFALSE 5505
// Say ( Bobby , D6-Bobby-1 ) ;
5493: LD_EXP 17
5497: PPUSH
5498: LD_STRING D6-Bobby-1
5500: PPUSH
5501: CALL_OW 88
// DialogueOff ;
5505: CALL_OW 7
// Wait ( [ 0 0$04 , 0 0$03 , 0 0$02 ] [ Difficulty ] ) ;
5509: LD_INT 140
5511: PUSH
5512: LD_INT 105
5514: PUSH
5515: LD_INT 70
5517: PUSH
5518: EMPTY
5519: LIST
5520: LIST
5521: LIST
5522: PUSH
5523: LD_OWVAR 67
5527: ARRAY
5528: PPUSH
5529: CALL_OW 67
// meta_action := true ;
5533: LD_ADDR_EXP 10
5537: PUSH
5538: LD_INT 1
5540: ST_TO_ADDR
// ComAgressiveMove ( russian_meta_guards , 94 , 8 ) ;
5541: LD_EXP 24
5545: PPUSH
5546: LD_INT 94
5548: PPUSH
5549: LD_INT 8
5551: PPUSH
5552: CALL_OW 114
// end ;
5556: PPOPN 2
5558: END
// every 0 0$01 trigger GetDistUnitXY ( JMM , 93 , 1 ) < 5 and FilterAllUnits ( [ f_side , 1 ] ) > 1 do
5559: LD_EXP 16
5563: PPUSH
5564: LD_INT 93
5566: PPUSH
5567: LD_INT 1
5569: PPUSH
5570: CALL_OW 297
5574: PUSH
5575: LD_INT 5
5577: LESS
5578: PUSH
5579: LD_INT 22
5581: PUSH
5582: LD_INT 1
5584: PUSH
5585: EMPTY
5586: LIST
5587: LIST
5588: PPUSH
5589: CALL_OW 69
5593: PUSH
5594: LD_INT 1
5596: GREATER
5597: AND
5598: IFFALSE 5615
5600: GO 5602
5602: DISABLE
// Say ( JMM , D6a-JMM-1 ) ;
5603: LD_EXP 16
5607: PPUSH
5608: LD_STRING D6a-JMM-1
5610: PPUSH
5611: CALL_OW 88
5615: END
// on UnitGoesToRed ( un ) do begin if un = JMM then
5616: LD_VAR 0 1
5620: PUSH
5621: LD_EXP 16
5625: EQUAL
5626: IFFALSE 5635
// YouLost ( JMM ) ;
5628: LD_STRING JMM
5630: PPUSH
5631: CALL_OW 104
// end ;
5635: PPOPN 1
5637: END
// on UnitDestroyed ( un ) do begin if un = JMM then
5638: LD_VAR 0 1
5642: PUSH
5643: LD_EXP 16
5647: EQUAL
5648: IFFALSE 5657
// YouLost ( JMM ) ;
5650: LD_STRING JMM
5652: PPUSH
5653: CALL_OW 104
// end ;
5657: PPOPN 1
5659: END
// every 0 0$01 trigger IsInArea ( Bobby , exitArea ) do
5660: LD_EXP 17
5664: PPUSH
5665: LD_INT 10
5667: PPUSH
5668: CALL_OW 308
5672: IFFALSE 5721
5674: GO 5676
5676: DISABLE
// begin bobby_saved := true ;
5677: LD_ADDR_EXP 12
5681: PUSH
5682: LD_INT 1
5684: ST_TO_ADDR
// SaveVariable ( GetLives ( Bobby ) , 01_BobbyLifePoints_1 ) ;
5685: LD_EXP 17
5689: PPUSH
5690: CALL_OW 256
5694: PPUSH
5695: LD_STRING 01_BobbyLifePoints_1
5697: PPUSH
5698: CALL_OW 39
// RemoveUnit ( Bobby ) ;
5702: LD_EXP 17
5706: PPUSH
5707: CALL_OW 64
// AddMedal ( Bobby , 1 ) ;
5711: LD_STRING Bobby
5713: PPUSH
5714: LD_INT 1
5716: PPUSH
5717: CALL_OW 101
// end ;
5721: END
// every 0 0$01 trigger IsInArea ( Cyrus , exitArea ) do
5722: LD_EXP 18
5726: PPUSH
5727: LD_INT 10
5729: PPUSH
5730: CALL_OW 308
5734: IFFALSE 5783
5736: GO 5738
5738: DISABLE
// begin cyrus_saved := true ;
5739: LD_ADDR_EXP 13
5743: PUSH
5744: LD_INT 1
5746: ST_TO_ADDR
// SaveVariable ( GetLives ( Cyrus ) , 01_CyrusLifePoints_1 ) ;
5747: LD_EXP 18
5751: PPUSH
5752: CALL_OW 256
5756: PPUSH
5757: LD_STRING 01_CyrusLifePoints_1
5759: PPUSH
5760: CALL_OW 39
// RemoveUnit ( Cyrus ) ;
5764: LD_EXP 18
5768: PPUSH
5769: CALL_OW 64
// AddMedal ( Cyrus , 1 ) ;
5773: LD_STRING Cyrus
5775: PPUSH
5776: LD_INT 1
5778: PPUSH
5779: CALL_OW 101
// end ;
5783: END
// every 0 0$01 trigger IsInArea ( JMM , exitArea ) do var i , to_reward , wait_for_them , m1 , m2 , m3 ;
5784: LD_EXP 16
5788: PPUSH
5789: LD_INT 10
5791: PPUSH
5792: CALL_OW 308
5796: IFFALSE 6404
5798: GO 5800
5800: DISABLE
5801: LD_INT 0
5803: PPUSH
5804: PPUSH
5805: PPUSH
5806: PPUSH
5807: PPUSH
5808: PPUSH
// begin if macmilan_use_radio then
5809: LD_EXP 6
5813: IFFALSE 5822
// SetAchievement ( ACH_RADIO ) ;
5815: LD_STRING ACH_RADIO
5817: PPUSH
5818: CALL_OW 543
// if ( not cyrus_saved and cyrus_in_squad and IsOk ( Cyrus ) ) or ( not bobby_saved and bobby_in_squad and IsOk ( Bobby ) ) then
5822: LD_EXP 13
5826: NOT
5827: PUSH
5828: LD_EXP 7
5832: AND
5833: PUSH
5834: LD_EXP 18
5838: PPUSH
5839: CALL_OW 302
5843: AND
5844: PUSH
5845: LD_EXP 12
5849: NOT
5850: PUSH
5851: LD_EXP 4
5855: AND
5856: PUSH
5857: LD_EXP 17
5861: PPUSH
5862: CALL_OW 302
5866: AND
5867: OR
5868: IFFALSE 5909
// case Query ( Q2 ) of 1 :
5870: LD_STRING Q2
5872: PPUSH
5873: CALL_OW 97
5877: PUSH
5878: LD_INT 1
5880: DOUBLE
5881: EQUAL
5882: IFTRUE 5886
5884: GO 5897
5886: POP
// wait_for_them := true ; 2 :
5887: LD_ADDR_VAR 0 3
5891: PUSH
5892: LD_INT 1
5894: ST_TO_ADDR
5895: GO 5909
5897: LD_INT 2
5899: DOUBLE
5900: EQUAL
5901: IFTRUE 5905
5903: GO 5908
5905: POP
// ; end ;
5906: GO 5909
5908: POP
// if wait_for_them then
5909: LD_VAR 0 3
5913: IFFALSE 6026
// repeat wait ( 0 0$01 ) ;
5915: LD_INT 35
5917: PPUSH
5918: CALL_OW 67
// until ( cyrus_saved and bobby_saved ) or ( cyrus_saved and ( not bobby_in_squad or IsDying ( Bobby ) or IsDead ( Bobby ) ) ) or ( bobby_saved and ( not cyrus_in_squad or IsDying ( Cyrus ) or IsDead ( Cyrus ) ) ) or ( IsDead ( Bobby ) and IsDead ( Cyrus ) ) ;
5922: LD_EXP 13
5926: PUSH
5927: LD_EXP 12
5931: AND
5932: PUSH
5933: LD_EXP 13
5937: PUSH
5938: LD_EXP 4
5942: NOT
5943: PUSH
5944: LD_EXP 17
5948: PPUSH
5949: CALL_OW 303
5953: OR
5954: PUSH
5955: LD_EXP 17
5959: PPUSH
5960: CALL_OW 301
5964: OR
5965: AND
5966: OR
5967: PUSH
5968: LD_EXP 12
5972: PUSH
5973: LD_EXP 7
5977: NOT
5978: PUSH
5979: LD_EXP 18
5983: PPUSH
5984: CALL_OW 303
5988: OR
5989: PUSH
5990: LD_EXP 18
5994: PPUSH
5995: CALL_OW 301
5999: OR
6000: AND
6001: OR
6002: PUSH
6003: LD_EXP 17
6007: PPUSH
6008: CALL_OW 301
6012: PUSH
6013: LD_EXP 18
6017: PPUSH
6018: CALL_OW 301
6022: AND
6023: OR
6024: IFFALSE 5915
// SaveVariable ( GetLives ( JMM ) , 01_JMMLifePoints_1 ) ;
6026: LD_EXP 16
6030: PPUSH
6031: CALL_OW 256
6035: PPUSH
6036: LD_STRING 01_JMMLifePoints_1
6038: PPUSH
6039: CALL_OW 39
// RemoveUnit ( JMM ) ;
6043: LD_EXP 16
6047: PPUSH
6048: CALL_OW 64
// to_reward := [ JMM ] ;
6052: LD_ADDR_VAR 0 2
6056: PUSH
6057: LD_EXP 16
6061: PUSH
6062: EMPTY
6063: LIST
6064: ST_TO_ADDR
// if bobby_saved then
6065: LD_EXP 12
6069: IFFALSE 6087
// to_reward := to_reward ^ Bobby ;
6071: LD_ADDR_VAR 0 2
6075: PUSH
6076: LD_VAR 0 2
6080: PUSH
6081: LD_EXP 17
6085: ADD
6086: ST_TO_ADDR
// if cyrus_saved then
6087: LD_EXP 13
6091: IFFALSE 6109
// to_reward := to_reward ^ Cyrus ;
6093: LD_ADDR_VAR 0 2
6097: PUSH
6098: LD_VAR 0 2
6102: PUSH
6103: LD_EXP 18
6107: ADD
6108: ST_TO_ADDR
// m1 := true ;
6109: LD_ADDR_VAR 0 4
6113: PUSH
6114: LD_INT 1
6116: ST_TO_ADDR
// m2 := bobby_saved ;
6117: LD_ADDR_VAR 0 5
6121: PUSH
6122: LD_EXP 12
6126: ST_TO_ADDR
// m3 := cyrus_saved ;
6127: LD_ADDR_VAR 0 6
6131: PUSH
6132: LD_EXP 13
6136: ST_TO_ADDR
// AddMedal ( JMM , 1 ) ;
6137: LD_STRING JMM
6139: PPUSH
6140: LD_INT 1
6142: PPUSH
6143: CALL_OW 101
// if not bobby_in_squad then
6147: LD_EXP 4
6151: NOT
6152: IFFALSE 6165
// AddMedal ( Bobby , - 1 ) ;
6154: LD_STRING Bobby
6156: PPUSH
6157: LD_INT 1
6159: NEG
6160: PPUSH
6161: CALL_OW 101
// if not bobby_saved and ( IsDying ( Bobby ) or IsDead ( Bobby ) ) then
6165: LD_EXP 12
6169: NOT
6170: PUSH
6171: LD_EXP 17
6175: PPUSH
6176: CALL_OW 303
6180: PUSH
6181: LD_EXP 17
6185: PPUSH
6186: CALL_OW 301
6190: OR
6191: AND
6192: IFFALSE 6205
// AddMedal ( Bobby , - 2 ) ;
6194: LD_STRING Bobby
6196: PPUSH
6197: LD_INT 2
6199: NEG
6200: PPUSH
6201: CALL_OW 101
// if not cyrus_in_squad then
6205: LD_EXP 7
6209: NOT
6210: IFFALSE 6223
// AddMedal ( Cyrus , - 1 ) ;
6212: LD_STRING Cyrus
6214: PPUSH
6215: LD_INT 1
6217: NEG
6218: PPUSH
6219: CALL_OW 101
// if not cyrus_saved and ( IsDying ( Cyrus ) or IsDead ( Cyrus ) ) then
6223: LD_EXP 13
6227: NOT
6228: PUSH
6229: LD_EXP 18
6233: PPUSH
6234: CALL_OW 303
6238: PUSH
6239: LD_EXP 18
6243: PPUSH
6244: CALL_OW 301
6248: OR
6249: AND
6250: IFFALSE 6263
// AddMedal ( Cyrus , - 2 ) ;
6252: LD_STRING Cyrus
6254: PPUSH
6255: LD_INT 2
6257: NEG
6258: PPUSH
6259: CALL_OW 101
// if Difficulty = 3 and m1 and m2 and m3 then
6263: LD_OWVAR 67
6267: PUSH
6268: LD_INT 3
6270: EQUAL
6271: PUSH
6272: LD_VAR 0 4
6276: AND
6277: PUSH
6278: LD_VAR 0 5
6282: AND
6283: PUSH
6284: LD_VAR 0 6
6288: AND
6289: IFFALSE 6301
// SetAchievementEX ( ACH_AMER , 1 ) ;
6291: LD_STRING ACH_AMER
6293: PPUSH
6294: LD_INT 1
6296: PPUSH
6297: CALL_OW 564
// GiveMedals ( MAIN ) ;
6301: LD_STRING MAIN
6303: PPUSH
6304: CALL_OW 102
// RewardPeople ( to_reward ) ;
6308: LD_VAR 0 2
6312: PPUSH
6313: CALL_OW 43
// if bobby_saved then
6317: LD_EXP 12
6321: IFFALSE 6341
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
6323: LD_EXP 17
6327: PPUSH
6328: LD_EXP 2
6332: PUSH
6333: LD_STRING Bobby
6335: STR
6336: PPUSH
6337: CALL_OW 38
// if cyrus_saved then
6341: LD_EXP 13
6345: IFFALSE 6365
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
6347: LD_EXP 18
6351: PPUSH
6352: LD_EXP 2
6356: PUSH
6357: LD_STRING Cyrus
6359: STR
6360: PPUSH
6361: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
6365: LD_EXP 16
6369: PPUSH
6370: LD_EXP 2
6374: PUSH
6375: LD_STRING JMM
6377: STR
6378: PPUSH
6379: CALL_OW 38
// if tick <= 3 3$00 then
6383: LD_OWVAR 1
6387: PUSH
6388: LD_INT 6300
6390: LESSEQUAL
6391: IFFALSE 6400
// SetAchievement ( ACH_ASPEED_1 ) ;
6393: LD_STRING ACH_ASPEED_1
6395: PPUSH
6396: CALL_OW 543
// YouWin ;
6400: CALL_OW 103
// end ; end_of_file end_of_file
6404: PPOPN 6
6406: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
6407: LD_VAR 0 2
6411: PUSH
6412: LD_INT 100
6414: EQUAL
6415: IFFALSE 7364
// begin if not StreamModeActive then
6417: LD_EXP 27
6421: NOT
6422: IFFALSE 6432
// StreamModeActive := true ;
6424: LD_ADDR_EXP 27
6428: PUSH
6429: LD_INT 1
6431: ST_TO_ADDR
// if p3 = 0 then
6432: LD_VAR 0 3
6436: PUSH
6437: LD_INT 0
6439: EQUAL
6440: IFFALSE 6446
// InitStreamMode ;
6442: CALL 7597 0 0
// if p3 = 1 then
6446: LD_VAR 0 3
6450: PUSH
6451: LD_INT 1
6453: EQUAL
6454: IFFALSE 6464
// sRocket := true ;
6456: LD_ADDR_EXP 32
6460: PUSH
6461: LD_INT 1
6463: ST_TO_ADDR
// if p3 = 2 then
6464: LD_VAR 0 3
6468: PUSH
6469: LD_INT 2
6471: EQUAL
6472: IFFALSE 6482
// sSpeed := true ;
6474: LD_ADDR_EXP 31
6478: PUSH
6479: LD_INT 1
6481: ST_TO_ADDR
// if p3 = 3 then
6482: LD_VAR 0 3
6486: PUSH
6487: LD_INT 3
6489: EQUAL
6490: IFFALSE 6500
// sEngine := true ;
6492: LD_ADDR_EXP 33
6496: PUSH
6497: LD_INT 1
6499: ST_TO_ADDR
// if p3 = 4 then
6500: LD_VAR 0 3
6504: PUSH
6505: LD_INT 4
6507: EQUAL
6508: IFFALSE 6518
// sSpec := true ;
6510: LD_ADDR_EXP 30
6514: PUSH
6515: LD_INT 1
6517: ST_TO_ADDR
// if p3 = 5 then
6518: LD_VAR 0 3
6522: PUSH
6523: LD_INT 5
6525: EQUAL
6526: IFFALSE 6536
// sLevel := true ;
6528: LD_ADDR_EXP 34
6532: PUSH
6533: LD_INT 1
6535: ST_TO_ADDR
// if p3 = 6 then
6536: LD_VAR 0 3
6540: PUSH
6541: LD_INT 6
6543: EQUAL
6544: IFFALSE 6554
// sArmoury := true ;
6546: LD_ADDR_EXP 35
6550: PUSH
6551: LD_INT 1
6553: ST_TO_ADDR
// if p3 = 7 then
6554: LD_VAR 0 3
6558: PUSH
6559: LD_INT 7
6561: EQUAL
6562: IFFALSE 6572
// sRadar := true ;
6564: LD_ADDR_EXP 36
6568: PUSH
6569: LD_INT 1
6571: ST_TO_ADDR
// if p3 = 8 then
6572: LD_VAR 0 3
6576: PUSH
6577: LD_INT 8
6579: EQUAL
6580: IFFALSE 6590
// sBunker := true ;
6582: LD_ADDR_EXP 37
6586: PUSH
6587: LD_INT 1
6589: ST_TO_ADDR
// if p3 = 9 then
6590: LD_VAR 0 3
6594: PUSH
6595: LD_INT 9
6597: EQUAL
6598: IFFALSE 6608
// sHack := true ;
6600: LD_ADDR_EXP 38
6604: PUSH
6605: LD_INT 1
6607: ST_TO_ADDR
// if p3 = 10 then
6608: LD_VAR 0 3
6612: PUSH
6613: LD_INT 10
6615: EQUAL
6616: IFFALSE 6626
// sFire := true ;
6618: LD_ADDR_EXP 39
6622: PUSH
6623: LD_INT 1
6625: ST_TO_ADDR
// if p3 = 11 then
6626: LD_VAR 0 3
6630: PUSH
6631: LD_INT 11
6633: EQUAL
6634: IFFALSE 6644
// sRefresh := true ;
6636: LD_ADDR_EXP 40
6640: PUSH
6641: LD_INT 1
6643: ST_TO_ADDR
// if p3 = 12 then
6644: LD_VAR 0 3
6648: PUSH
6649: LD_INT 12
6651: EQUAL
6652: IFFALSE 6662
// sExp := true ;
6654: LD_ADDR_EXP 41
6658: PUSH
6659: LD_INT 1
6661: ST_TO_ADDR
// if p3 = 13 then
6662: LD_VAR 0 3
6666: PUSH
6667: LD_INT 13
6669: EQUAL
6670: IFFALSE 6680
// sDepot := true ;
6672: LD_ADDR_EXP 42
6676: PUSH
6677: LD_INT 1
6679: ST_TO_ADDR
// if p3 = 14 then
6680: LD_VAR 0 3
6684: PUSH
6685: LD_INT 14
6687: EQUAL
6688: IFFALSE 6698
// sFlag := true ;
6690: LD_ADDR_EXP 43
6694: PUSH
6695: LD_INT 1
6697: ST_TO_ADDR
// if p3 = 15 then
6698: LD_VAR 0 3
6702: PUSH
6703: LD_INT 15
6705: EQUAL
6706: IFFALSE 6716
// sKamikadze := true ;
6708: LD_ADDR_EXP 51
6712: PUSH
6713: LD_INT 1
6715: ST_TO_ADDR
// if p3 = 16 then
6716: LD_VAR 0 3
6720: PUSH
6721: LD_INT 16
6723: EQUAL
6724: IFFALSE 6734
// sTroll := true ;
6726: LD_ADDR_EXP 52
6730: PUSH
6731: LD_INT 1
6733: ST_TO_ADDR
// if p3 = 17 then
6734: LD_VAR 0 3
6738: PUSH
6739: LD_INT 17
6741: EQUAL
6742: IFFALSE 6752
// sSlow := true ;
6744: LD_ADDR_EXP 53
6748: PUSH
6749: LD_INT 1
6751: ST_TO_ADDR
// if p3 = 18 then
6752: LD_VAR 0 3
6756: PUSH
6757: LD_INT 18
6759: EQUAL
6760: IFFALSE 6770
// sLack := true ;
6762: LD_ADDR_EXP 54
6766: PUSH
6767: LD_INT 1
6769: ST_TO_ADDR
// if p3 = 19 then
6770: LD_VAR 0 3
6774: PUSH
6775: LD_INT 19
6777: EQUAL
6778: IFFALSE 6788
// sTank := true ;
6780: LD_ADDR_EXP 56
6784: PUSH
6785: LD_INT 1
6787: ST_TO_ADDR
// if p3 = 20 then
6788: LD_VAR 0 3
6792: PUSH
6793: LD_INT 20
6795: EQUAL
6796: IFFALSE 6806
// sRemote := true ;
6798: LD_ADDR_EXP 57
6802: PUSH
6803: LD_INT 1
6805: ST_TO_ADDR
// if p3 = 21 then
6806: LD_VAR 0 3
6810: PUSH
6811: LD_INT 21
6813: EQUAL
6814: IFFALSE 6824
// sPowell := true ;
6816: LD_ADDR_EXP 58
6820: PUSH
6821: LD_INT 1
6823: ST_TO_ADDR
// if p3 = 22 then
6824: LD_VAR 0 3
6828: PUSH
6829: LD_INT 22
6831: EQUAL
6832: IFFALSE 6842
// sTeleport := true ;
6834: LD_ADDR_EXP 61
6838: PUSH
6839: LD_INT 1
6841: ST_TO_ADDR
// if p3 = 23 then
6842: LD_VAR 0 3
6846: PUSH
6847: LD_INT 23
6849: EQUAL
6850: IFFALSE 6860
// sOilTower := true ;
6852: LD_ADDR_EXP 63
6856: PUSH
6857: LD_INT 1
6859: ST_TO_ADDR
// if p3 = 24 then
6860: LD_VAR 0 3
6864: PUSH
6865: LD_INT 24
6867: EQUAL
6868: IFFALSE 6878
// sShovel := true ;
6870: LD_ADDR_EXP 64
6874: PUSH
6875: LD_INT 1
6877: ST_TO_ADDR
// if p3 = 25 then
6878: LD_VAR 0 3
6882: PUSH
6883: LD_INT 25
6885: EQUAL
6886: IFFALSE 6896
// sSheik := true ;
6888: LD_ADDR_EXP 65
6892: PUSH
6893: LD_INT 1
6895: ST_TO_ADDR
// if p3 = 26 then
6896: LD_VAR 0 3
6900: PUSH
6901: LD_INT 26
6903: EQUAL
6904: IFFALSE 6914
// sEarthquake := true ;
6906: LD_ADDR_EXP 67
6910: PUSH
6911: LD_INT 1
6913: ST_TO_ADDR
// if p3 = 27 then
6914: LD_VAR 0 3
6918: PUSH
6919: LD_INT 27
6921: EQUAL
6922: IFFALSE 6932
// sAI := true ;
6924: LD_ADDR_EXP 68
6928: PUSH
6929: LD_INT 1
6931: ST_TO_ADDR
// if p3 = 28 then
6932: LD_VAR 0 3
6936: PUSH
6937: LD_INT 28
6939: EQUAL
6940: IFFALSE 6950
// sCargo := true ;
6942: LD_ADDR_EXP 71
6946: PUSH
6947: LD_INT 1
6949: ST_TO_ADDR
// if p3 = 29 then
6950: LD_VAR 0 3
6954: PUSH
6955: LD_INT 29
6957: EQUAL
6958: IFFALSE 6968
// sDLaser := true ;
6960: LD_ADDR_EXP 72
6964: PUSH
6965: LD_INT 1
6967: ST_TO_ADDR
// if p3 = 30 then
6968: LD_VAR 0 3
6972: PUSH
6973: LD_INT 30
6975: EQUAL
6976: IFFALSE 6986
// sExchange := true ;
6978: LD_ADDR_EXP 73
6982: PUSH
6983: LD_INT 1
6985: ST_TO_ADDR
// if p3 = 31 then
6986: LD_VAR 0 3
6990: PUSH
6991: LD_INT 31
6993: EQUAL
6994: IFFALSE 7004
// sFac := true ;
6996: LD_ADDR_EXP 74
7000: PUSH
7001: LD_INT 1
7003: ST_TO_ADDR
// if p3 = 32 then
7004: LD_VAR 0 3
7008: PUSH
7009: LD_INT 32
7011: EQUAL
7012: IFFALSE 7022
// sPower := true ;
7014: LD_ADDR_EXP 75
7018: PUSH
7019: LD_INT 1
7021: ST_TO_ADDR
// if p3 = 33 then
7022: LD_VAR 0 3
7026: PUSH
7027: LD_INT 33
7029: EQUAL
7030: IFFALSE 7040
// sRandom := true ;
7032: LD_ADDR_EXP 76
7036: PUSH
7037: LD_INT 1
7039: ST_TO_ADDR
// if p3 = 34 then
7040: LD_VAR 0 3
7044: PUSH
7045: LD_INT 34
7047: EQUAL
7048: IFFALSE 7058
// sShield := true ;
7050: LD_ADDR_EXP 77
7054: PUSH
7055: LD_INT 1
7057: ST_TO_ADDR
// if p3 = 35 then
7058: LD_VAR 0 3
7062: PUSH
7063: LD_INT 35
7065: EQUAL
7066: IFFALSE 7076
// sTime := true ;
7068: LD_ADDR_EXP 78
7072: PUSH
7073: LD_INT 1
7075: ST_TO_ADDR
// if p3 = 36 then
7076: LD_VAR 0 3
7080: PUSH
7081: LD_INT 36
7083: EQUAL
7084: IFFALSE 7094
// sTools := true ;
7086: LD_ADDR_EXP 79
7090: PUSH
7091: LD_INT 1
7093: ST_TO_ADDR
// if p3 = 101 then
7094: LD_VAR 0 3
7098: PUSH
7099: LD_INT 101
7101: EQUAL
7102: IFFALSE 7112
// sSold := true ;
7104: LD_ADDR_EXP 44
7108: PUSH
7109: LD_INT 1
7111: ST_TO_ADDR
// if p3 = 102 then
7112: LD_VAR 0 3
7116: PUSH
7117: LD_INT 102
7119: EQUAL
7120: IFFALSE 7130
// sDiff := true ;
7122: LD_ADDR_EXP 45
7126: PUSH
7127: LD_INT 1
7129: ST_TO_ADDR
// if p3 = 103 then
7130: LD_VAR 0 3
7134: PUSH
7135: LD_INT 103
7137: EQUAL
7138: IFFALSE 7148
// sFog := true ;
7140: LD_ADDR_EXP 48
7144: PUSH
7145: LD_INT 1
7147: ST_TO_ADDR
// if p3 = 104 then
7148: LD_VAR 0 3
7152: PUSH
7153: LD_INT 104
7155: EQUAL
7156: IFFALSE 7166
// sReset := true ;
7158: LD_ADDR_EXP 49
7162: PUSH
7163: LD_INT 1
7165: ST_TO_ADDR
// if p3 = 105 then
7166: LD_VAR 0 3
7170: PUSH
7171: LD_INT 105
7173: EQUAL
7174: IFFALSE 7184
// sSun := true ;
7176: LD_ADDR_EXP 50
7180: PUSH
7181: LD_INT 1
7183: ST_TO_ADDR
// if p3 = 106 then
7184: LD_VAR 0 3
7188: PUSH
7189: LD_INT 106
7191: EQUAL
7192: IFFALSE 7202
// sTiger := true ;
7194: LD_ADDR_EXP 46
7198: PUSH
7199: LD_INT 1
7201: ST_TO_ADDR
// if p3 = 107 then
7202: LD_VAR 0 3
7206: PUSH
7207: LD_INT 107
7209: EQUAL
7210: IFFALSE 7220
// sBomb := true ;
7212: LD_ADDR_EXP 47
7216: PUSH
7217: LD_INT 1
7219: ST_TO_ADDR
// if p3 = 108 then
7220: LD_VAR 0 3
7224: PUSH
7225: LD_INT 108
7227: EQUAL
7228: IFFALSE 7238
// sWound := true ;
7230: LD_ADDR_EXP 55
7234: PUSH
7235: LD_INT 1
7237: ST_TO_ADDR
// if p3 = 109 then
7238: LD_VAR 0 3
7242: PUSH
7243: LD_INT 109
7245: EQUAL
7246: IFFALSE 7256
// sBetray := true ;
7248: LD_ADDR_EXP 59
7252: PUSH
7253: LD_INT 1
7255: ST_TO_ADDR
// if p3 = 110 then
7256: LD_VAR 0 3
7260: PUSH
7261: LD_INT 110
7263: EQUAL
7264: IFFALSE 7274
// sContamin := true ;
7266: LD_ADDR_EXP 60
7270: PUSH
7271: LD_INT 1
7273: ST_TO_ADDR
// if p3 = 111 then
7274: LD_VAR 0 3
7278: PUSH
7279: LD_INT 111
7281: EQUAL
7282: IFFALSE 7292
// sOil := true ;
7284: LD_ADDR_EXP 62
7288: PUSH
7289: LD_INT 1
7291: ST_TO_ADDR
// if p3 = 112 then
7292: LD_VAR 0 3
7296: PUSH
7297: LD_INT 112
7299: EQUAL
7300: IFFALSE 7310
// sStu := true ;
7302: LD_ADDR_EXP 66
7306: PUSH
7307: LD_INT 1
7309: ST_TO_ADDR
// if p3 = 113 then
7310: LD_VAR 0 3
7314: PUSH
7315: LD_INT 113
7317: EQUAL
7318: IFFALSE 7328
// sBazooka := true ;
7320: LD_ADDR_EXP 69
7324: PUSH
7325: LD_INT 1
7327: ST_TO_ADDR
// if p3 = 114 then
7328: LD_VAR 0 3
7332: PUSH
7333: LD_INT 114
7335: EQUAL
7336: IFFALSE 7346
// sMortar := true ;
7338: LD_ADDR_EXP 70
7342: PUSH
7343: LD_INT 1
7345: ST_TO_ADDR
// if p3 = 115 then
7346: LD_VAR 0 3
7350: PUSH
7351: LD_INT 115
7353: EQUAL
7354: IFFALSE 7364
// sRanger := true ;
7356: LD_ADDR_EXP 80
7360: PUSH
7361: LD_INT 1
7363: ST_TO_ADDR
// end ; if p2 = 101 then
7364: LD_VAR 0 2
7368: PUSH
7369: LD_INT 101
7371: EQUAL
7372: IFFALSE 7575
// begin case p3 of 1 :
7374: LD_VAR 0 3
7378: PUSH
7379: LD_INT 1
7381: DOUBLE
7382: EQUAL
7383: IFTRUE 7387
7385: GO 7394
7387: POP
// hHackUnlimitedResources ; 2 :
7388: CALL 17669 0 0
7392: GO 7575
7394: LD_INT 2
7396: DOUBLE
7397: EQUAL
7398: IFTRUE 7402
7400: GO 7409
7402: POP
// hHackSetLevel10 ; 3 :
7403: CALL 17802 0 0
7407: GO 7575
7409: LD_INT 3
7411: DOUBLE
7412: EQUAL
7413: IFTRUE 7417
7415: GO 7424
7417: POP
// hHackSetLevel10YourUnits ; 4 :
7418: CALL 17887 0 0
7422: GO 7575
7424: LD_INT 4
7426: DOUBLE
7427: EQUAL
7428: IFTRUE 7432
7430: GO 7454
7432: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
7433: LD_VAR 0 4
7437: PPUSH
7438: LD_VAR 0 5
7442: PPUSH
7443: LD_VAR 0 6
7447: PPUSH
7448: CALL 17977 0 3
7452: GO 7575
7454: LD_INT 5
7456: DOUBLE
7457: EQUAL
7458: IFTRUE 7462
7460: GO 7469
7462: POP
// hHackSpawnVehicle ; 6 :
7463: CALL 18038 0 0
7467: GO 7575
7469: LD_INT 6
7471: DOUBLE
7472: EQUAL
7473: IFTRUE 7477
7475: GO 7484
7477: POP
// hHackInvincible ; 7 :
7478: CALL 18584 0 0
7482: GO 7575
7484: LD_INT 7
7486: DOUBLE
7487: EQUAL
7488: IFTRUE 7492
7490: GO 7499
7492: POP
// hHackInvisible ; 8 :
7493: CALL 18695 0 0
7497: GO 7575
7499: LD_INT 8
7501: DOUBLE
7502: EQUAL
7503: IFTRUE 7507
7505: GO 7514
7507: POP
// hHackChangeYourSide ; 9 :
7508: CALL 18752 0 0
7512: GO 7575
7514: LD_INT 9
7516: DOUBLE
7517: EQUAL
7518: IFTRUE 7522
7520: GO 7529
7522: POP
// hHackChangeUnitSide ; 10 :
7523: CALL 18794 0 0
7527: GO 7575
7529: LD_INT 10
7531: DOUBLE
7532: EQUAL
7533: IFTRUE 7537
7535: GO 7544
7537: POP
// hHackFog ; 11 :
7538: CALL 18895 0 0
7542: GO 7575
7544: LD_INT 11
7546: DOUBLE
7547: EQUAL
7548: IFTRUE 7552
7550: GO 7559
7552: POP
// hHackApeman ; 12 :
7553: CALL 18910 0 0
7557: GO 7575
7559: LD_INT 12
7561: DOUBLE
7562: EQUAL
7563: IFTRUE 7567
7565: GO 7574
7567: POP
// hHackBoom ; end ;
7568: CALL 18995 0 0
7572: GO 7575
7574: POP
// end ; end ;
7575: PPOPN 6
7577: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
7578: GO 7580
7580: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
7581: LD_STRING initStreamRollete();
7583: PPUSH
7584: CALL_OW 559
// InitStreamMode ;
7588: CALL 7597 0 0
// DefineStreamItems ( ) ;
7592: CALL 8037 0 0
// end ;
7596: END
// function InitStreamMode ; begin
7597: LD_INT 0
7599: PPUSH
// streamModeActive := false ;
7600: LD_ADDR_EXP 27
7604: PUSH
7605: LD_INT 0
7607: ST_TO_ADDR
// normalCounter := 36 ;
7608: LD_ADDR_EXP 28
7612: PUSH
7613: LD_INT 36
7615: ST_TO_ADDR
// hardcoreCounter := 16 ;
7616: LD_ADDR_EXP 29
7620: PUSH
7621: LD_INT 16
7623: ST_TO_ADDR
// sRocket := false ;
7624: LD_ADDR_EXP 32
7628: PUSH
7629: LD_INT 0
7631: ST_TO_ADDR
// sSpeed := false ;
7632: LD_ADDR_EXP 31
7636: PUSH
7637: LD_INT 0
7639: ST_TO_ADDR
// sEngine := false ;
7640: LD_ADDR_EXP 33
7644: PUSH
7645: LD_INT 0
7647: ST_TO_ADDR
// sSpec := false ;
7648: LD_ADDR_EXP 30
7652: PUSH
7653: LD_INT 0
7655: ST_TO_ADDR
// sLevel := false ;
7656: LD_ADDR_EXP 34
7660: PUSH
7661: LD_INT 0
7663: ST_TO_ADDR
// sArmoury := false ;
7664: LD_ADDR_EXP 35
7668: PUSH
7669: LD_INT 0
7671: ST_TO_ADDR
// sRadar := false ;
7672: LD_ADDR_EXP 36
7676: PUSH
7677: LD_INT 0
7679: ST_TO_ADDR
// sBunker := false ;
7680: LD_ADDR_EXP 37
7684: PUSH
7685: LD_INT 0
7687: ST_TO_ADDR
// sHack := false ;
7688: LD_ADDR_EXP 38
7692: PUSH
7693: LD_INT 0
7695: ST_TO_ADDR
// sFire := false ;
7696: LD_ADDR_EXP 39
7700: PUSH
7701: LD_INT 0
7703: ST_TO_ADDR
// sRefresh := false ;
7704: LD_ADDR_EXP 40
7708: PUSH
7709: LD_INT 0
7711: ST_TO_ADDR
// sExp := false ;
7712: LD_ADDR_EXP 41
7716: PUSH
7717: LD_INT 0
7719: ST_TO_ADDR
// sDepot := false ;
7720: LD_ADDR_EXP 42
7724: PUSH
7725: LD_INT 0
7727: ST_TO_ADDR
// sFlag := false ;
7728: LD_ADDR_EXP 43
7732: PUSH
7733: LD_INT 0
7735: ST_TO_ADDR
// sKamikadze := false ;
7736: LD_ADDR_EXP 51
7740: PUSH
7741: LD_INT 0
7743: ST_TO_ADDR
// sTroll := false ;
7744: LD_ADDR_EXP 52
7748: PUSH
7749: LD_INT 0
7751: ST_TO_ADDR
// sSlow := false ;
7752: LD_ADDR_EXP 53
7756: PUSH
7757: LD_INT 0
7759: ST_TO_ADDR
// sLack := false ;
7760: LD_ADDR_EXP 54
7764: PUSH
7765: LD_INT 0
7767: ST_TO_ADDR
// sTank := false ;
7768: LD_ADDR_EXP 56
7772: PUSH
7773: LD_INT 0
7775: ST_TO_ADDR
// sRemote := false ;
7776: LD_ADDR_EXP 57
7780: PUSH
7781: LD_INT 0
7783: ST_TO_ADDR
// sPowell := false ;
7784: LD_ADDR_EXP 58
7788: PUSH
7789: LD_INT 0
7791: ST_TO_ADDR
// sTeleport := false ;
7792: LD_ADDR_EXP 61
7796: PUSH
7797: LD_INT 0
7799: ST_TO_ADDR
// sOilTower := false ;
7800: LD_ADDR_EXP 63
7804: PUSH
7805: LD_INT 0
7807: ST_TO_ADDR
// sShovel := false ;
7808: LD_ADDR_EXP 64
7812: PUSH
7813: LD_INT 0
7815: ST_TO_ADDR
// sSheik := false ;
7816: LD_ADDR_EXP 65
7820: PUSH
7821: LD_INT 0
7823: ST_TO_ADDR
// sEarthquake := false ;
7824: LD_ADDR_EXP 67
7828: PUSH
7829: LD_INT 0
7831: ST_TO_ADDR
// sAI := false ;
7832: LD_ADDR_EXP 68
7836: PUSH
7837: LD_INT 0
7839: ST_TO_ADDR
// sCargo := false ;
7840: LD_ADDR_EXP 71
7844: PUSH
7845: LD_INT 0
7847: ST_TO_ADDR
// sDLaser := false ;
7848: LD_ADDR_EXP 72
7852: PUSH
7853: LD_INT 0
7855: ST_TO_ADDR
// sExchange := false ;
7856: LD_ADDR_EXP 73
7860: PUSH
7861: LD_INT 0
7863: ST_TO_ADDR
// sFac := false ;
7864: LD_ADDR_EXP 74
7868: PUSH
7869: LD_INT 0
7871: ST_TO_ADDR
// sPower := false ;
7872: LD_ADDR_EXP 75
7876: PUSH
7877: LD_INT 0
7879: ST_TO_ADDR
// sRandom := false ;
7880: LD_ADDR_EXP 76
7884: PUSH
7885: LD_INT 0
7887: ST_TO_ADDR
// sShield := false ;
7888: LD_ADDR_EXP 77
7892: PUSH
7893: LD_INT 0
7895: ST_TO_ADDR
// sTime := false ;
7896: LD_ADDR_EXP 78
7900: PUSH
7901: LD_INT 0
7903: ST_TO_ADDR
// sTools := false ;
7904: LD_ADDR_EXP 79
7908: PUSH
7909: LD_INT 0
7911: ST_TO_ADDR
// sSold := false ;
7912: LD_ADDR_EXP 44
7916: PUSH
7917: LD_INT 0
7919: ST_TO_ADDR
// sDiff := false ;
7920: LD_ADDR_EXP 45
7924: PUSH
7925: LD_INT 0
7927: ST_TO_ADDR
// sFog := false ;
7928: LD_ADDR_EXP 48
7932: PUSH
7933: LD_INT 0
7935: ST_TO_ADDR
// sReset := false ;
7936: LD_ADDR_EXP 49
7940: PUSH
7941: LD_INT 0
7943: ST_TO_ADDR
// sSun := false ;
7944: LD_ADDR_EXP 50
7948: PUSH
7949: LD_INT 0
7951: ST_TO_ADDR
// sTiger := false ;
7952: LD_ADDR_EXP 46
7956: PUSH
7957: LD_INT 0
7959: ST_TO_ADDR
// sBomb := false ;
7960: LD_ADDR_EXP 47
7964: PUSH
7965: LD_INT 0
7967: ST_TO_ADDR
// sWound := false ;
7968: LD_ADDR_EXP 55
7972: PUSH
7973: LD_INT 0
7975: ST_TO_ADDR
// sBetray := false ;
7976: LD_ADDR_EXP 59
7980: PUSH
7981: LD_INT 0
7983: ST_TO_ADDR
// sContamin := false ;
7984: LD_ADDR_EXP 60
7988: PUSH
7989: LD_INT 0
7991: ST_TO_ADDR
// sOil := false ;
7992: LD_ADDR_EXP 62
7996: PUSH
7997: LD_INT 0
7999: ST_TO_ADDR
// sStu := false ;
8000: LD_ADDR_EXP 66
8004: PUSH
8005: LD_INT 0
8007: ST_TO_ADDR
// sBazooka := false ;
8008: LD_ADDR_EXP 69
8012: PUSH
8013: LD_INT 0
8015: ST_TO_ADDR
// sMortar := false ;
8016: LD_ADDR_EXP 70
8020: PUSH
8021: LD_INT 0
8023: ST_TO_ADDR
// sRanger := false ;
8024: LD_ADDR_EXP 80
8028: PUSH
8029: LD_INT 0
8031: ST_TO_ADDR
// end ;
8032: LD_VAR 0 1
8036: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
8037: LD_INT 0
8039: PPUSH
8040: PPUSH
8041: PPUSH
8042: PPUSH
8043: PPUSH
// result := [ ] ;
8044: LD_ADDR_VAR 0 1
8048: PUSH
8049: EMPTY
8050: ST_TO_ADDR
// if campaign_id = 1 then
8051: LD_OWVAR 69
8055: PUSH
8056: LD_INT 1
8058: EQUAL
8059: IFFALSE 10997
// begin case mission_number of 1 :
8061: LD_OWVAR 70
8065: PUSH
8066: LD_INT 1
8068: DOUBLE
8069: EQUAL
8070: IFTRUE 8074
8072: GO 8138
8074: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
8075: LD_ADDR_VAR 0 1
8079: PUSH
8080: LD_INT 2
8082: PUSH
8083: LD_INT 4
8085: PUSH
8086: LD_INT 11
8088: PUSH
8089: LD_INT 12
8091: PUSH
8092: LD_INT 15
8094: PUSH
8095: LD_INT 16
8097: PUSH
8098: LD_INT 22
8100: PUSH
8101: LD_INT 23
8103: PUSH
8104: LD_INT 26
8106: PUSH
8107: EMPTY
8108: LIST
8109: LIST
8110: LIST
8111: LIST
8112: LIST
8113: LIST
8114: LIST
8115: LIST
8116: LIST
8117: PUSH
8118: LD_INT 101
8120: PUSH
8121: LD_INT 102
8123: PUSH
8124: LD_INT 106
8126: PUSH
8127: EMPTY
8128: LIST
8129: LIST
8130: LIST
8131: PUSH
8132: EMPTY
8133: LIST
8134: LIST
8135: ST_TO_ADDR
8136: GO 10995
8138: LD_INT 2
8140: DOUBLE
8141: EQUAL
8142: IFTRUE 8146
8144: GO 8218
8146: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
8147: LD_ADDR_VAR 0 1
8151: PUSH
8152: LD_INT 2
8154: PUSH
8155: LD_INT 4
8157: PUSH
8158: LD_INT 11
8160: PUSH
8161: LD_INT 12
8163: PUSH
8164: LD_INT 15
8166: PUSH
8167: LD_INT 16
8169: PUSH
8170: LD_INT 22
8172: PUSH
8173: LD_INT 23
8175: PUSH
8176: LD_INT 26
8178: PUSH
8179: EMPTY
8180: LIST
8181: LIST
8182: LIST
8183: LIST
8184: LIST
8185: LIST
8186: LIST
8187: LIST
8188: LIST
8189: PUSH
8190: LD_INT 101
8192: PUSH
8193: LD_INT 102
8195: PUSH
8196: LD_INT 105
8198: PUSH
8199: LD_INT 106
8201: PUSH
8202: LD_INT 108
8204: PUSH
8205: EMPTY
8206: LIST
8207: LIST
8208: LIST
8209: LIST
8210: LIST
8211: PUSH
8212: EMPTY
8213: LIST
8214: LIST
8215: ST_TO_ADDR
8216: GO 10995
8218: LD_INT 3
8220: DOUBLE
8221: EQUAL
8222: IFTRUE 8226
8224: GO 8302
8226: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
8227: LD_ADDR_VAR 0 1
8231: PUSH
8232: LD_INT 2
8234: PUSH
8235: LD_INT 4
8237: PUSH
8238: LD_INT 5
8240: PUSH
8241: LD_INT 11
8243: PUSH
8244: LD_INT 12
8246: PUSH
8247: LD_INT 15
8249: PUSH
8250: LD_INT 16
8252: PUSH
8253: LD_INT 22
8255: PUSH
8256: LD_INT 26
8258: PUSH
8259: LD_INT 36
8261: PUSH
8262: EMPTY
8263: LIST
8264: LIST
8265: LIST
8266: LIST
8267: LIST
8268: LIST
8269: LIST
8270: LIST
8271: LIST
8272: LIST
8273: PUSH
8274: LD_INT 101
8276: PUSH
8277: LD_INT 102
8279: PUSH
8280: LD_INT 105
8282: PUSH
8283: LD_INT 106
8285: PUSH
8286: LD_INT 108
8288: PUSH
8289: EMPTY
8290: LIST
8291: LIST
8292: LIST
8293: LIST
8294: LIST
8295: PUSH
8296: EMPTY
8297: LIST
8298: LIST
8299: ST_TO_ADDR
8300: GO 10995
8302: LD_INT 4
8304: DOUBLE
8305: EQUAL
8306: IFTRUE 8310
8308: GO 8394
8310: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
8311: LD_ADDR_VAR 0 1
8315: PUSH
8316: LD_INT 2
8318: PUSH
8319: LD_INT 4
8321: PUSH
8322: LD_INT 5
8324: PUSH
8325: LD_INT 8
8327: PUSH
8328: LD_INT 11
8330: PUSH
8331: LD_INT 12
8333: PUSH
8334: LD_INT 15
8336: PUSH
8337: LD_INT 16
8339: PUSH
8340: LD_INT 22
8342: PUSH
8343: LD_INT 23
8345: PUSH
8346: LD_INT 26
8348: PUSH
8349: LD_INT 36
8351: PUSH
8352: EMPTY
8353: LIST
8354: LIST
8355: LIST
8356: LIST
8357: LIST
8358: LIST
8359: LIST
8360: LIST
8361: LIST
8362: LIST
8363: LIST
8364: LIST
8365: PUSH
8366: LD_INT 101
8368: PUSH
8369: LD_INT 102
8371: PUSH
8372: LD_INT 105
8374: PUSH
8375: LD_INT 106
8377: PUSH
8378: LD_INT 108
8380: PUSH
8381: EMPTY
8382: LIST
8383: LIST
8384: LIST
8385: LIST
8386: LIST
8387: PUSH
8388: EMPTY
8389: LIST
8390: LIST
8391: ST_TO_ADDR
8392: GO 10995
8394: LD_INT 5
8396: DOUBLE
8397: EQUAL
8398: IFTRUE 8402
8400: GO 8502
8402: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
8403: LD_ADDR_VAR 0 1
8407: PUSH
8408: LD_INT 2
8410: PUSH
8411: LD_INT 4
8413: PUSH
8414: LD_INT 5
8416: PUSH
8417: LD_INT 6
8419: PUSH
8420: LD_INT 8
8422: PUSH
8423: LD_INT 11
8425: PUSH
8426: LD_INT 12
8428: PUSH
8429: LD_INT 15
8431: PUSH
8432: LD_INT 16
8434: PUSH
8435: LD_INT 22
8437: PUSH
8438: LD_INT 23
8440: PUSH
8441: LD_INT 25
8443: PUSH
8444: LD_INT 26
8446: PUSH
8447: LD_INT 36
8449: PUSH
8450: EMPTY
8451: LIST
8452: LIST
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: LIST
8458: LIST
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: LIST
8464: LIST
8465: PUSH
8466: LD_INT 101
8468: PUSH
8469: LD_INT 102
8471: PUSH
8472: LD_INT 105
8474: PUSH
8475: LD_INT 106
8477: PUSH
8478: LD_INT 108
8480: PUSH
8481: LD_INT 109
8483: PUSH
8484: LD_INT 112
8486: PUSH
8487: EMPTY
8488: LIST
8489: LIST
8490: LIST
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: PUSH
8496: EMPTY
8497: LIST
8498: LIST
8499: ST_TO_ADDR
8500: GO 10995
8502: LD_INT 6
8504: DOUBLE
8505: EQUAL
8506: IFTRUE 8510
8508: GO 8630
8510: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
8511: LD_ADDR_VAR 0 1
8515: PUSH
8516: LD_INT 2
8518: PUSH
8519: LD_INT 4
8521: PUSH
8522: LD_INT 5
8524: PUSH
8525: LD_INT 6
8527: PUSH
8528: LD_INT 8
8530: PUSH
8531: LD_INT 11
8533: PUSH
8534: LD_INT 12
8536: PUSH
8537: LD_INT 15
8539: PUSH
8540: LD_INT 16
8542: PUSH
8543: LD_INT 20
8545: PUSH
8546: LD_INT 21
8548: PUSH
8549: LD_INT 22
8551: PUSH
8552: LD_INT 23
8554: PUSH
8555: LD_INT 25
8557: PUSH
8558: LD_INT 26
8560: PUSH
8561: LD_INT 30
8563: PUSH
8564: LD_INT 31
8566: PUSH
8567: LD_INT 32
8569: PUSH
8570: LD_INT 36
8572: PUSH
8573: EMPTY
8574: LIST
8575: LIST
8576: LIST
8577: LIST
8578: LIST
8579: LIST
8580: LIST
8581: LIST
8582: LIST
8583: LIST
8584: LIST
8585: LIST
8586: LIST
8587: LIST
8588: LIST
8589: LIST
8590: LIST
8591: LIST
8592: LIST
8593: PUSH
8594: LD_INT 101
8596: PUSH
8597: LD_INT 102
8599: PUSH
8600: LD_INT 105
8602: PUSH
8603: LD_INT 106
8605: PUSH
8606: LD_INT 108
8608: PUSH
8609: LD_INT 109
8611: PUSH
8612: LD_INT 112
8614: PUSH
8615: EMPTY
8616: LIST
8617: LIST
8618: LIST
8619: LIST
8620: LIST
8621: LIST
8622: LIST
8623: PUSH
8624: EMPTY
8625: LIST
8626: LIST
8627: ST_TO_ADDR
8628: GO 10995
8630: LD_INT 7
8632: DOUBLE
8633: EQUAL
8634: IFTRUE 8638
8636: GO 8738
8638: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
8639: LD_ADDR_VAR 0 1
8643: PUSH
8644: LD_INT 2
8646: PUSH
8647: LD_INT 4
8649: PUSH
8650: LD_INT 5
8652: PUSH
8653: LD_INT 7
8655: PUSH
8656: LD_INT 11
8658: PUSH
8659: LD_INT 12
8661: PUSH
8662: LD_INT 15
8664: PUSH
8665: LD_INT 16
8667: PUSH
8668: LD_INT 20
8670: PUSH
8671: LD_INT 21
8673: PUSH
8674: LD_INT 22
8676: PUSH
8677: LD_INT 23
8679: PUSH
8680: LD_INT 25
8682: PUSH
8683: LD_INT 26
8685: PUSH
8686: EMPTY
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: LIST
8698: LIST
8699: LIST
8700: LIST
8701: PUSH
8702: LD_INT 101
8704: PUSH
8705: LD_INT 102
8707: PUSH
8708: LD_INT 103
8710: PUSH
8711: LD_INT 105
8713: PUSH
8714: LD_INT 106
8716: PUSH
8717: LD_INT 108
8719: PUSH
8720: LD_INT 112
8722: PUSH
8723: EMPTY
8724: LIST
8725: LIST
8726: LIST
8727: LIST
8728: LIST
8729: LIST
8730: LIST
8731: PUSH
8732: EMPTY
8733: LIST
8734: LIST
8735: ST_TO_ADDR
8736: GO 10995
8738: LD_INT 8
8740: DOUBLE
8741: EQUAL
8742: IFTRUE 8746
8744: GO 8874
8746: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
8747: LD_ADDR_VAR 0 1
8751: PUSH
8752: LD_INT 2
8754: PUSH
8755: LD_INT 4
8757: PUSH
8758: LD_INT 5
8760: PUSH
8761: LD_INT 6
8763: PUSH
8764: LD_INT 7
8766: PUSH
8767: LD_INT 8
8769: PUSH
8770: LD_INT 11
8772: PUSH
8773: LD_INT 12
8775: PUSH
8776: LD_INT 15
8778: PUSH
8779: LD_INT 16
8781: PUSH
8782: LD_INT 20
8784: PUSH
8785: LD_INT 21
8787: PUSH
8788: LD_INT 22
8790: PUSH
8791: LD_INT 23
8793: PUSH
8794: LD_INT 25
8796: PUSH
8797: LD_INT 26
8799: PUSH
8800: LD_INT 30
8802: PUSH
8803: LD_INT 31
8805: PUSH
8806: LD_INT 32
8808: PUSH
8809: LD_INT 36
8811: PUSH
8812: EMPTY
8813: LIST
8814: LIST
8815: LIST
8816: LIST
8817: LIST
8818: LIST
8819: LIST
8820: LIST
8821: LIST
8822: LIST
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: LIST
8831: LIST
8832: LIST
8833: PUSH
8834: LD_INT 101
8836: PUSH
8837: LD_INT 102
8839: PUSH
8840: LD_INT 103
8842: PUSH
8843: LD_INT 105
8845: PUSH
8846: LD_INT 106
8848: PUSH
8849: LD_INT 108
8851: PUSH
8852: LD_INT 109
8854: PUSH
8855: LD_INT 112
8857: PUSH
8858: EMPTY
8859: LIST
8860: LIST
8861: LIST
8862: LIST
8863: LIST
8864: LIST
8865: LIST
8866: LIST
8867: PUSH
8868: EMPTY
8869: LIST
8870: LIST
8871: ST_TO_ADDR
8872: GO 10995
8874: LD_INT 9
8876: DOUBLE
8877: EQUAL
8878: IFTRUE 8882
8880: GO 9018
8882: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
8883: LD_ADDR_VAR 0 1
8887: PUSH
8888: LD_INT 2
8890: PUSH
8891: LD_INT 4
8893: PUSH
8894: LD_INT 5
8896: PUSH
8897: LD_INT 6
8899: PUSH
8900: LD_INT 7
8902: PUSH
8903: LD_INT 8
8905: PUSH
8906: LD_INT 11
8908: PUSH
8909: LD_INT 12
8911: PUSH
8912: LD_INT 15
8914: PUSH
8915: LD_INT 16
8917: PUSH
8918: LD_INT 20
8920: PUSH
8921: LD_INT 21
8923: PUSH
8924: LD_INT 22
8926: PUSH
8927: LD_INT 23
8929: PUSH
8930: LD_INT 25
8932: PUSH
8933: LD_INT 26
8935: PUSH
8936: LD_INT 28
8938: PUSH
8939: LD_INT 30
8941: PUSH
8942: LD_INT 31
8944: PUSH
8945: LD_INT 32
8947: PUSH
8948: LD_INT 36
8950: PUSH
8951: EMPTY
8952: LIST
8953: LIST
8954: LIST
8955: LIST
8956: LIST
8957: LIST
8958: LIST
8959: LIST
8960: LIST
8961: LIST
8962: LIST
8963: LIST
8964: LIST
8965: LIST
8966: LIST
8967: LIST
8968: LIST
8969: LIST
8970: LIST
8971: LIST
8972: LIST
8973: PUSH
8974: LD_INT 101
8976: PUSH
8977: LD_INT 102
8979: PUSH
8980: LD_INT 103
8982: PUSH
8983: LD_INT 105
8985: PUSH
8986: LD_INT 106
8988: PUSH
8989: LD_INT 108
8991: PUSH
8992: LD_INT 109
8994: PUSH
8995: LD_INT 112
8997: PUSH
8998: LD_INT 114
9000: PUSH
9001: EMPTY
9002: LIST
9003: LIST
9004: LIST
9005: LIST
9006: LIST
9007: LIST
9008: LIST
9009: LIST
9010: LIST
9011: PUSH
9012: EMPTY
9013: LIST
9014: LIST
9015: ST_TO_ADDR
9016: GO 10995
9018: LD_INT 10
9020: DOUBLE
9021: EQUAL
9022: IFTRUE 9026
9024: GO 9210
9026: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
9027: LD_ADDR_VAR 0 1
9031: PUSH
9032: LD_INT 2
9034: PUSH
9035: LD_INT 4
9037: PUSH
9038: LD_INT 5
9040: PUSH
9041: LD_INT 6
9043: PUSH
9044: LD_INT 7
9046: PUSH
9047: LD_INT 8
9049: PUSH
9050: LD_INT 9
9052: PUSH
9053: LD_INT 10
9055: PUSH
9056: LD_INT 11
9058: PUSH
9059: LD_INT 12
9061: PUSH
9062: LD_INT 13
9064: PUSH
9065: LD_INT 14
9067: PUSH
9068: LD_INT 15
9070: PUSH
9071: LD_INT 16
9073: PUSH
9074: LD_INT 17
9076: PUSH
9077: LD_INT 18
9079: PUSH
9080: LD_INT 19
9082: PUSH
9083: LD_INT 20
9085: PUSH
9086: LD_INT 21
9088: PUSH
9089: LD_INT 22
9091: PUSH
9092: LD_INT 23
9094: PUSH
9095: LD_INT 24
9097: PUSH
9098: LD_INT 25
9100: PUSH
9101: LD_INT 26
9103: PUSH
9104: LD_INT 28
9106: PUSH
9107: LD_INT 30
9109: PUSH
9110: LD_INT 31
9112: PUSH
9113: LD_INT 32
9115: PUSH
9116: LD_INT 36
9118: PUSH
9119: EMPTY
9120: LIST
9121: LIST
9122: LIST
9123: LIST
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: PUSH
9150: LD_INT 101
9152: PUSH
9153: LD_INT 102
9155: PUSH
9156: LD_INT 103
9158: PUSH
9159: LD_INT 104
9161: PUSH
9162: LD_INT 105
9164: PUSH
9165: LD_INT 106
9167: PUSH
9168: LD_INT 107
9170: PUSH
9171: LD_INT 108
9173: PUSH
9174: LD_INT 109
9176: PUSH
9177: LD_INT 110
9179: PUSH
9180: LD_INT 111
9182: PUSH
9183: LD_INT 112
9185: PUSH
9186: LD_INT 114
9188: PUSH
9189: EMPTY
9190: LIST
9191: LIST
9192: LIST
9193: LIST
9194: LIST
9195: LIST
9196: LIST
9197: LIST
9198: LIST
9199: LIST
9200: LIST
9201: LIST
9202: LIST
9203: PUSH
9204: EMPTY
9205: LIST
9206: LIST
9207: ST_TO_ADDR
9208: GO 10995
9210: LD_INT 11
9212: DOUBLE
9213: EQUAL
9214: IFTRUE 9218
9216: GO 9410
9218: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
9219: LD_ADDR_VAR 0 1
9223: PUSH
9224: LD_INT 2
9226: PUSH
9227: LD_INT 3
9229: PUSH
9230: LD_INT 4
9232: PUSH
9233: LD_INT 5
9235: PUSH
9236: LD_INT 6
9238: PUSH
9239: LD_INT 7
9241: PUSH
9242: LD_INT 8
9244: PUSH
9245: LD_INT 9
9247: PUSH
9248: LD_INT 10
9250: PUSH
9251: LD_INT 11
9253: PUSH
9254: LD_INT 12
9256: PUSH
9257: LD_INT 13
9259: PUSH
9260: LD_INT 14
9262: PUSH
9263: LD_INT 15
9265: PUSH
9266: LD_INT 16
9268: PUSH
9269: LD_INT 17
9271: PUSH
9272: LD_INT 18
9274: PUSH
9275: LD_INT 19
9277: PUSH
9278: LD_INT 20
9280: PUSH
9281: LD_INT 21
9283: PUSH
9284: LD_INT 22
9286: PUSH
9287: LD_INT 23
9289: PUSH
9290: LD_INT 24
9292: PUSH
9293: LD_INT 25
9295: PUSH
9296: LD_INT 26
9298: PUSH
9299: LD_INT 28
9301: PUSH
9302: LD_INT 30
9304: PUSH
9305: LD_INT 31
9307: PUSH
9308: LD_INT 32
9310: PUSH
9311: LD_INT 34
9313: PUSH
9314: LD_INT 36
9316: PUSH
9317: EMPTY
9318: LIST
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: LIST
9324: LIST
9325: LIST
9326: LIST
9327: LIST
9328: LIST
9329: LIST
9330: LIST
9331: LIST
9332: LIST
9333: LIST
9334: LIST
9335: LIST
9336: LIST
9337: LIST
9338: LIST
9339: LIST
9340: LIST
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: PUSH
9350: LD_INT 101
9352: PUSH
9353: LD_INT 102
9355: PUSH
9356: LD_INT 103
9358: PUSH
9359: LD_INT 104
9361: PUSH
9362: LD_INT 105
9364: PUSH
9365: LD_INT 106
9367: PUSH
9368: LD_INT 107
9370: PUSH
9371: LD_INT 108
9373: PUSH
9374: LD_INT 109
9376: PUSH
9377: LD_INT 110
9379: PUSH
9380: LD_INT 111
9382: PUSH
9383: LD_INT 112
9385: PUSH
9386: LD_INT 114
9388: PUSH
9389: EMPTY
9390: LIST
9391: LIST
9392: LIST
9393: LIST
9394: LIST
9395: LIST
9396: LIST
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: LIST
9402: LIST
9403: PUSH
9404: EMPTY
9405: LIST
9406: LIST
9407: ST_TO_ADDR
9408: GO 10995
9410: LD_INT 12
9412: DOUBLE
9413: EQUAL
9414: IFTRUE 9418
9416: GO 9626
9418: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
9419: LD_ADDR_VAR 0 1
9423: PUSH
9424: LD_INT 1
9426: PUSH
9427: LD_INT 2
9429: PUSH
9430: LD_INT 3
9432: PUSH
9433: LD_INT 4
9435: PUSH
9436: LD_INT 5
9438: PUSH
9439: LD_INT 6
9441: PUSH
9442: LD_INT 7
9444: PUSH
9445: LD_INT 8
9447: PUSH
9448: LD_INT 9
9450: PUSH
9451: LD_INT 10
9453: PUSH
9454: LD_INT 11
9456: PUSH
9457: LD_INT 12
9459: PUSH
9460: LD_INT 13
9462: PUSH
9463: LD_INT 14
9465: PUSH
9466: LD_INT 15
9468: PUSH
9469: LD_INT 16
9471: PUSH
9472: LD_INT 17
9474: PUSH
9475: LD_INT 18
9477: PUSH
9478: LD_INT 19
9480: PUSH
9481: LD_INT 20
9483: PUSH
9484: LD_INT 21
9486: PUSH
9487: LD_INT 22
9489: PUSH
9490: LD_INT 23
9492: PUSH
9493: LD_INT 24
9495: PUSH
9496: LD_INT 25
9498: PUSH
9499: LD_INT 26
9501: PUSH
9502: LD_INT 27
9504: PUSH
9505: LD_INT 28
9507: PUSH
9508: LD_INT 30
9510: PUSH
9511: LD_INT 31
9513: PUSH
9514: LD_INT 32
9516: PUSH
9517: LD_INT 33
9519: PUSH
9520: LD_INT 34
9522: PUSH
9523: LD_INT 36
9525: PUSH
9526: EMPTY
9527: LIST
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: LIST
9538: LIST
9539: LIST
9540: LIST
9541: LIST
9542: LIST
9543: LIST
9544: LIST
9545: LIST
9546: LIST
9547: LIST
9548: LIST
9549: LIST
9550: LIST
9551: LIST
9552: LIST
9553: LIST
9554: LIST
9555: LIST
9556: LIST
9557: LIST
9558: LIST
9559: LIST
9560: LIST
9561: PUSH
9562: LD_INT 101
9564: PUSH
9565: LD_INT 102
9567: PUSH
9568: LD_INT 103
9570: PUSH
9571: LD_INT 104
9573: PUSH
9574: LD_INT 105
9576: PUSH
9577: LD_INT 106
9579: PUSH
9580: LD_INT 107
9582: PUSH
9583: LD_INT 108
9585: PUSH
9586: LD_INT 109
9588: PUSH
9589: LD_INT 110
9591: PUSH
9592: LD_INT 111
9594: PUSH
9595: LD_INT 112
9597: PUSH
9598: LD_INT 113
9600: PUSH
9601: LD_INT 114
9603: PUSH
9604: EMPTY
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: PUSH
9620: EMPTY
9621: LIST
9622: LIST
9623: ST_TO_ADDR
9624: GO 10995
9626: LD_INT 13
9628: DOUBLE
9629: EQUAL
9630: IFTRUE 9634
9632: GO 9830
9634: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
9635: LD_ADDR_VAR 0 1
9639: PUSH
9640: LD_INT 1
9642: PUSH
9643: LD_INT 2
9645: PUSH
9646: LD_INT 3
9648: PUSH
9649: LD_INT 4
9651: PUSH
9652: LD_INT 5
9654: PUSH
9655: LD_INT 8
9657: PUSH
9658: LD_INT 9
9660: PUSH
9661: LD_INT 10
9663: PUSH
9664: LD_INT 11
9666: PUSH
9667: LD_INT 12
9669: PUSH
9670: LD_INT 14
9672: PUSH
9673: LD_INT 15
9675: PUSH
9676: LD_INT 16
9678: PUSH
9679: LD_INT 17
9681: PUSH
9682: LD_INT 18
9684: PUSH
9685: LD_INT 19
9687: PUSH
9688: LD_INT 20
9690: PUSH
9691: LD_INT 21
9693: PUSH
9694: LD_INT 22
9696: PUSH
9697: LD_INT 23
9699: PUSH
9700: LD_INT 24
9702: PUSH
9703: LD_INT 25
9705: PUSH
9706: LD_INT 26
9708: PUSH
9709: LD_INT 27
9711: PUSH
9712: LD_INT 28
9714: PUSH
9715: LD_INT 30
9717: PUSH
9718: LD_INT 31
9720: PUSH
9721: LD_INT 32
9723: PUSH
9724: LD_INT 33
9726: PUSH
9727: LD_INT 34
9729: PUSH
9730: LD_INT 36
9732: PUSH
9733: EMPTY
9734: LIST
9735: LIST
9736: LIST
9737: LIST
9738: LIST
9739: LIST
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: LIST
9745: LIST
9746: LIST
9747: LIST
9748: LIST
9749: LIST
9750: LIST
9751: LIST
9752: LIST
9753: LIST
9754: LIST
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: PUSH
9766: LD_INT 101
9768: PUSH
9769: LD_INT 102
9771: PUSH
9772: LD_INT 103
9774: PUSH
9775: LD_INT 104
9777: PUSH
9778: LD_INT 105
9780: PUSH
9781: LD_INT 106
9783: PUSH
9784: LD_INT 107
9786: PUSH
9787: LD_INT 108
9789: PUSH
9790: LD_INT 109
9792: PUSH
9793: LD_INT 110
9795: PUSH
9796: LD_INT 111
9798: PUSH
9799: LD_INT 112
9801: PUSH
9802: LD_INT 113
9804: PUSH
9805: LD_INT 114
9807: PUSH
9808: EMPTY
9809: LIST
9810: LIST
9811: LIST
9812: LIST
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: LIST
9823: PUSH
9824: EMPTY
9825: LIST
9826: LIST
9827: ST_TO_ADDR
9828: GO 10995
9830: LD_INT 14
9832: DOUBLE
9833: EQUAL
9834: IFTRUE 9838
9836: GO 10050
9838: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
9839: LD_ADDR_VAR 0 1
9843: PUSH
9844: LD_INT 1
9846: PUSH
9847: LD_INT 2
9849: PUSH
9850: LD_INT 3
9852: PUSH
9853: LD_INT 4
9855: PUSH
9856: LD_INT 5
9858: PUSH
9859: LD_INT 6
9861: PUSH
9862: LD_INT 7
9864: PUSH
9865: LD_INT 8
9867: PUSH
9868: LD_INT 9
9870: PUSH
9871: LD_INT 10
9873: PUSH
9874: LD_INT 11
9876: PUSH
9877: LD_INT 12
9879: PUSH
9880: LD_INT 13
9882: PUSH
9883: LD_INT 14
9885: PUSH
9886: LD_INT 15
9888: PUSH
9889: LD_INT 16
9891: PUSH
9892: LD_INT 17
9894: PUSH
9895: LD_INT 18
9897: PUSH
9898: LD_INT 19
9900: PUSH
9901: LD_INT 20
9903: PUSH
9904: LD_INT 21
9906: PUSH
9907: LD_INT 22
9909: PUSH
9910: LD_INT 23
9912: PUSH
9913: LD_INT 24
9915: PUSH
9916: LD_INT 25
9918: PUSH
9919: LD_INT 26
9921: PUSH
9922: LD_INT 27
9924: PUSH
9925: LD_INT 28
9927: PUSH
9928: LD_INT 29
9930: PUSH
9931: LD_INT 30
9933: PUSH
9934: LD_INT 31
9936: PUSH
9937: LD_INT 32
9939: PUSH
9940: LD_INT 33
9942: PUSH
9943: LD_INT 34
9945: PUSH
9946: LD_INT 36
9948: PUSH
9949: EMPTY
9950: LIST
9951: LIST
9952: LIST
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: LIST
9985: PUSH
9986: LD_INT 101
9988: PUSH
9989: LD_INT 102
9991: PUSH
9992: LD_INT 103
9994: PUSH
9995: LD_INT 104
9997: PUSH
9998: LD_INT 105
10000: PUSH
10001: LD_INT 106
10003: PUSH
10004: LD_INT 107
10006: PUSH
10007: LD_INT 108
10009: PUSH
10010: LD_INT 109
10012: PUSH
10013: LD_INT 110
10015: PUSH
10016: LD_INT 111
10018: PUSH
10019: LD_INT 112
10021: PUSH
10022: LD_INT 113
10024: PUSH
10025: LD_INT 114
10027: PUSH
10028: EMPTY
10029: LIST
10030: LIST
10031: LIST
10032: LIST
10033: LIST
10034: LIST
10035: LIST
10036: LIST
10037: LIST
10038: LIST
10039: LIST
10040: LIST
10041: LIST
10042: LIST
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: ST_TO_ADDR
10048: GO 10995
10050: LD_INT 15
10052: DOUBLE
10053: EQUAL
10054: IFTRUE 10058
10056: GO 10270
10058: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
10059: LD_ADDR_VAR 0 1
10063: PUSH
10064: LD_INT 1
10066: PUSH
10067: LD_INT 2
10069: PUSH
10070: LD_INT 3
10072: PUSH
10073: LD_INT 4
10075: PUSH
10076: LD_INT 5
10078: PUSH
10079: LD_INT 6
10081: PUSH
10082: LD_INT 7
10084: PUSH
10085: LD_INT 8
10087: PUSH
10088: LD_INT 9
10090: PUSH
10091: LD_INT 10
10093: PUSH
10094: LD_INT 11
10096: PUSH
10097: LD_INT 12
10099: PUSH
10100: LD_INT 13
10102: PUSH
10103: LD_INT 14
10105: PUSH
10106: LD_INT 15
10108: PUSH
10109: LD_INT 16
10111: PUSH
10112: LD_INT 17
10114: PUSH
10115: LD_INT 18
10117: PUSH
10118: LD_INT 19
10120: PUSH
10121: LD_INT 20
10123: PUSH
10124: LD_INT 21
10126: PUSH
10127: LD_INT 22
10129: PUSH
10130: LD_INT 23
10132: PUSH
10133: LD_INT 24
10135: PUSH
10136: LD_INT 25
10138: PUSH
10139: LD_INT 26
10141: PUSH
10142: LD_INT 27
10144: PUSH
10145: LD_INT 28
10147: PUSH
10148: LD_INT 29
10150: PUSH
10151: LD_INT 30
10153: PUSH
10154: LD_INT 31
10156: PUSH
10157: LD_INT 32
10159: PUSH
10160: LD_INT 33
10162: PUSH
10163: LD_INT 34
10165: PUSH
10166: LD_INT 36
10168: PUSH
10169: EMPTY
10170: LIST
10171: LIST
10172: LIST
10173: LIST
10174: LIST
10175: LIST
10176: LIST
10177: LIST
10178: LIST
10179: LIST
10180: LIST
10181: LIST
10182: LIST
10183: LIST
10184: LIST
10185: LIST
10186: LIST
10187: LIST
10188: LIST
10189: LIST
10190: LIST
10191: LIST
10192: LIST
10193: LIST
10194: LIST
10195: LIST
10196: LIST
10197: LIST
10198: LIST
10199: LIST
10200: LIST
10201: LIST
10202: LIST
10203: LIST
10204: LIST
10205: PUSH
10206: LD_INT 101
10208: PUSH
10209: LD_INT 102
10211: PUSH
10212: LD_INT 103
10214: PUSH
10215: LD_INT 104
10217: PUSH
10218: LD_INT 105
10220: PUSH
10221: LD_INT 106
10223: PUSH
10224: LD_INT 107
10226: PUSH
10227: LD_INT 108
10229: PUSH
10230: LD_INT 109
10232: PUSH
10233: LD_INT 110
10235: PUSH
10236: LD_INT 111
10238: PUSH
10239: LD_INT 112
10241: PUSH
10242: LD_INT 113
10244: PUSH
10245: LD_INT 114
10247: PUSH
10248: EMPTY
10249: LIST
10250: LIST
10251: LIST
10252: LIST
10253: LIST
10254: LIST
10255: LIST
10256: LIST
10257: LIST
10258: LIST
10259: LIST
10260: LIST
10261: LIST
10262: LIST
10263: PUSH
10264: EMPTY
10265: LIST
10266: LIST
10267: ST_TO_ADDR
10268: GO 10995
10270: LD_INT 16
10272: DOUBLE
10273: EQUAL
10274: IFTRUE 10278
10276: GO 10402
10278: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
10279: LD_ADDR_VAR 0 1
10283: PUSH
10284: LD_INT 2
10286: PUSH
10287: LD_INT 4
10289: PUSH
10290: LD_INT 5
10292: PUSH
10293: LD_INT 7
10295: PUSH
10296: LD_INT 11
10298: PUSH
10299: LD_INT 12
10301: PUSH
10302: LD_INT 15
10304: PUSH
10305: LD_INT 16
10307: PUSH
10308: LD_INT 20
10310: PUSH
10311: LD_INT 21
10313: PUSH
10314: LD_INT 22
10316: PUSH
10317: LD_INT 23
10319: PUSH
10320: LD_INT 25
10322: PUSH
10323: LD_INT 26
10325: PUSH
10326: LD_INT 30
10328: PUSH
10329: LD_INT 31
10331: PUSH
10332: LD_INT 32
10334: PUSH
10335: LD_INT 33
10337: PUSH
10338: LD_INT 34
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: LIST
10345: LIST
10346: LIST
10347: LIST
10348: LIST
10349: LIST
10350: LIST
10351: LIST
10352: LIST
10353: LIST
10354: LIST
10355: LIST
10356: LIST
10357: LIST
10358: LIST
10359: LIST
10360: LIST
10361: PUSH
10362: LD_INT 101
10364: PUSH
10365: LD_INT 102
10367: PUSH
10368: LD_INT 103
10370: PUSH
10371: LD_INT 106
10373: PUSH
10374: LD_INT 108
10376: PUSH
10377: LD_INT 112
10379: PUSH
10380: LD_INT 113
10382: PUSH
10383: LD_INT 114
10385: PUSH
10386: EMPTY
10387: LIST
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: LIST
10395: PUSH
10396: EMPTY
10397: LIST
10398: LIST
10399: ST_TO_ADDR
10400: GO 10995
10402: LD_INT 17
10404: DOUBLE
10405: EQUAL
10406: IFTRUE 10410
10408: GO 10622
10410: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
10411: LD_ADDR_VAR 0 1
10415: PUSH
10416: LD_INT 1
10418: PUSH
10419: LD_INT 2
10421: PUSH
10422: LD_INT 3
10424: PUSH
10425: LD_INT 4
10427: PUSH
10428: LD_INT 5
10430: PUSH
10431: LD_INT 6
10433: PUSH
10434: LD_INT 7
10436: PUSH
10437: LD_INT 8
10439: PUSH
10440: LD_INT 9
10442: PUSH
10443: LD_INT 10
10445: PUSH
10446: LD_INT 11
10448: PUSH
10449: LD_INT 12
10451: PUSH
10452: LD_INT 13
10454: PUSH
10455: LD_INT 14
10457: PUSH
10458: LD_INT 15
10460: PUSH
10461: LD_INT 16
10463: PUSH
10464: LD_INT 17
10466: PUSH
10467: LD_INT 18
10469: PUSH
10470: LD_INT 19
10472: PUSH
10473: LD_INT 20
10475: PUSH
10476: LD_INT 21
10478: PUSH
10479: LD_INT 22
10481: PUSH
10482: LD_INT 23
10484: PUSH
10485: LD_INT 24
10487: PUSH
10488: LD_INT 25
10490: PUSH
10491: LD_INT 26
10493: PUSH
10494: LD_INT 27
10496: PUSH
10497: LD_INT 28
10499: PUSH
10500: LD_INT 29
10502: PUSH
10503: LD_INT 30
10505: PUSH
10506: LD_INT 31
10508: PUSH
10509: LD_INT 32
10511: PUSH
10512: LD_INT 33
10514: PUSH
10515: LD_INT 34
10517: PUSH
10518: LD_INT 36
10520: PUSH
10521: EMPTY
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: LIST
10546: LIST
10547: LIST
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: LIST
10557: PUSH
10558: LD_INT 101
10560: PUSH
10561: LD_INT 102
10563: PUSH
10564: LD_INT 103
10566: PUSH
10567: LD_INT 104
10569: PUSH
10570: LD_INT 105
10572: PUSH
10573: LD_INT 106
10575: PUSH
10576: LD_INT 107
10578: PUSH
10579: LD_INT 108
10581: PUSH
10582: LD_INT 109
10584: PUSH
10585: LD_INT 110
10587: PUSH
10588: LD_INT 111
10590: PUSH
10591: LD_INT 112
10593: PUSH
10594: LD_INT 113
10596: PUSH
10597: LD_INT 114
10599: PUSH
10600: EMPTY
10601: LIST
10602: LIST
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: PUSH
10616: EMPTY
10617: LIST
10618: LIST
10619: ST_TO_ADDR
10620: GO 10995
10622: LD_INT 18
10624: DOUBLE
10625: EQUAL
10626: IFTRUE 10630
10628: GO 10766
10630: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
10631: LD_ADDR_VAR 0 1
10635: PUSH
10636: LD_INT 2
10638: PUSH
10639: LD_INT 4
10641: PUSH
10642: LD_INT 5
10644: PUSH
10645: LD_INT 7
10647: PUSH
10648: LD_INT 11
10650: PUSH
10651: LD_INT 12
10653: PUSH
10654: LD_INT 15
10656: PUSH
10657: LD_INT 16
10659: PUSH
10660: LD_INT 20
10662: PUSH
10663: LD_INT 21
10665: PUSH
10666: LD_INT 22
10668: PUSH
10669: LD_INT 23
10671: PUSH
10672: LD_INT 25
10674: PUSH
10675: LD_INT 26
10677: PUSH
10678: LD_INT 30
10680: PUSH
10681: LD_INT 31
10683: PUSH
10684: LD_INT 32
10686: PUSH
10687: LD_INT 33
10689: PUSH
10690: LD_INT 34
10692: PUSH
10693: LD_INT 35
10695: PUSH
10696: LD_INT 36
10698: PUSH
10699: EMPTY
10700: LIST
10701: LIST
10702: LIST
10703: LIST
10704: LIST
10705: LIST
10706: LIST
10707: LIST
10708: LIST
10709: LIST
10710: LIST
10711: LIST
10712: LIST
10713: LIST
10714: LIST
10715: LIST
10716: LIST
10717: LIST
10718: LIST
10719: LIST
10720: LIST
10721: PUSH
10722: LD_INT 101
10724: PUSH
10725: LD_INT 102
10727: PUSH
10728: LD_INT 103
10730: PUSH
10731: LD_INT 106
10733: PUSH
10734: LD_INT 108
10736: PUSH
10737: LD_INT 112
10739: PUSH
10740: LD_INT 113
10742: PUSH
10743: LD_INT 114
10745: PUSH
10746: LD_INT 115
10748: PUSH
10749: EMPTY
10750: LIST
10751: LIST
10752: LIST
10753: LIST
10754: LIST
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: PUSH
10760: EMPTY
10761: LIST
10762: LIST
10763: ST_TO_ADDR
10764: GO 10995
10766: LD_INT 19
10768: DOUBLE
10769: EQUAL
10770: IFTRUE 10774
10772: GO 10994
10774: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
10775: LD_ADDR_VAR 0 1
10779: PUSH
10780: LD_INT 1
10782: PUSH
10783: LD_INT 2
10785: PUSH
10786: LD_INT 3
10788: PUSH
10789: LD_INT 4
10791: PUSH
10792: LD_INT 5
10794: PUSH
10795: LD_INT 6
10797: PUSH
10798: LD_INT 7
10800: PUSH
10801: LD_INT 8
10803: PUSH
10804: LD_INT 9
10806: PUSH
10807: LD_INT 10
10809: PUSH
10810: LD_INT 11
10812: PUSH
10813: LD_INT 12
10815: PUSH
10816: LD_INT 13
10818: PUSH
10819: LD_INT 14
10821: PUSH
10822: LD_INT 15
10824: PUSH
10825: LD_INT 16
10827: PUSH
10828: LD_INT 17
10830: PUSH
10831: LD_INT 18
10833: PUSH
10834: LD_INT 19
10836: PUSH
10837: LD_INT 20
10839: PUSH
10840: LD_INT 21
10842: PUSH
10843: LD_INT 22
10845: PUSH
10846: LD_INT 23
10848: PUSH
10849: LD_INT 24
10851: PUSH
10852: LD_INT 25
10854: PUSH
10855: LD_INT 26
10857: PUSH
10858: LD_INT 27
10860: PUSH
10861: LD_INT 28
10863: PUSH
10864: LD_INT 29
10866: PUSH
10867: LD_INT 30
10869: PUSH
10870: LD_INT 31
10872: PUSH
10873: LD_INT 32
10875: PUSH
10876: LD_INT 33
10878: PUSH
10879: LD_INT 34
10881: PUSH
10882: LD_INT 35
10884: PUSH
10885: LD_INT 36
10887: PUSH
10888: EMPTY
10889: LIST
10890: LIST
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: LIST
10901: LIST
10902: LIST
10903: LIST
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: LIST
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: PUSH
10926: LD_INT 101
10928: PUSH
10929: LD_INT 102
10931: PUSH
10932: LD_INT 103
10934: PUSH
10935: LD_INT 104
10937: PUSH
10938: LD_INT 105
10940: PUSH
10941: LD_INT 106
10943: PUSH
10944: LD_INT 107
10946: PUSH
10947: LD_INT 108
10949: PUSH
10950: LD_INT 109
10952: PUSH
10953: LD_INT 110
10955: PUSH
10956: LD_INT 111
10958: PUSH
10959: LD_INT 112
10961: PUSH
10962: LD_INT 113
10964: PUSH
10965: LD_INT 114
10967: PUSH
10968: LD_INT 115
10970: PUSH
10971: EMPTY
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: PUSH
10988: EMPTY
10989: LIST
10990: LIST
10991: ST_TO_ADDR
10992: GO 10995
10994: POP
// end else
10995: GO 11214
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
10997: LD_ADDR_VAR 0 1
11001: PUSH
11002: LD_INT 1
11004: PUSH
11005: LD_INT 2
11007: PUSH
11008: LD_INT 3
11010: PUSH
11011: LD_INT 4
11013: PUSH
11014: LD_INT 5
11016: PUSH
11017: LD_INT 6
11019: PUSH
11020: LD_INT 7
11022: PUSH
11023: LD_INT 8
11025: PUSH
11026: LD_INT 9
11028: PUSH
11029: LD_INT 10
11031: PUSH
11032: LD_INT 11
11034: PUSH
11035: LD_INT 12
11037: PUSH
11038: LD_INT 13
11040: PUSH
11041: LD_INT 14
11043: PUSH
11044: LD_INT 15
11046: PUSH
11047: LD_INT 16
11049: PUSH
11050: LD_INT 17
11052: PUSH
11053: LD_INT 18
11055: PUSH
11056: LD_INT 19
11058: PUSH
11059: LD_INT 20
11061: PUSH
11062: LD_INT 21
11064: PUSH
11065: LD_INT 22
11067: PUSH
11068: LD_INT 23
11070: PUSH
11071: LD_INT 24
11073: PUSH
11074: LD_INT 25
11076: PUSH
11077: LD_INT 26
11079: PUSH
11080: LD_INT 27
11082: PUSH
11083: LD_INT 28
11085: PUSH
11086: LD_INT 29
11088: PUSH
11089: LD_INT 30
11091: PUSH
11092: LD_INT 31
11094: PUSH
11095: LD_INT 32
11097: PUSH
11098: LD_INT 33
11100: PUSH
11101: LD_INT 34
11103: PUSH
11104: LD_INT 35
11106: PUSH
11107: LD_INT 36
11109: PUSH
11110: EMPTY
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: LIST
11124: LIST
11125: LIST
11126: LIST
11127: LIST
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: LIST
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: LIST
11147: PUSH
11148: LD_INT 101
11150: PUSH
11151: LD_INT 102
11153: PUSH
11154: LD_INT 103
11156: PUSH
11157: LD_INT 104
11159: PUSH
11160: LD_INT 105
11162: PUSH
11163: LD_INT 106
11165: PUSH
11166: LD_INT 107
11168: PUSH
11169: LD_INT 108
11171: PUSH
11172: LD_INT 109
11174: PUSH
11175: LD_INT 110
11177: PUSH
11178: LD_INT 111
11180: PUSH
11181: LD_INT 112
11183: PUSH
11184: LD_INT 113
11186: PUSH
11187: LD_INT 114
11189: PUSH
11190: LD_INT 115
11192: PUSH
11193: EMPTY
11194: LIST
11195: LIST
11196: LIST
11197: LIST
11198: LIST
11199: LIST
11200: LIST
11201: LIST
11202: LIST
11203: LIST
11204: LIST
11205: LIST
11206: LIST
11207: LIST
11208: LIST
11209: PUSH
11210: EMPTY
11211: LIST
11212: LIST
11213: ST_TO_ADDR
// if result then
11214: LD_VAR 0 1
11218: IFFALSE 11507
// begin normal :=  ;
11220: LD_ADDR_VAR 0 3
11224: PUSH
11225: LD_STRING 
11227: ST_TO_ADDR
// hardcore :=  ;
11228: LD_ADDR_VAR 0 4
11232: PUSH
11233: LD_STRING 
11235: ST_TO_ADDR
// for i = 1 to normalCounter do
11236: LD_ADDR_VAR 0 5
11240: PUSH
11241: DOUBLE
11242: LD_INT 1
11244: DEC
11245: ST_TO_ADDR
11246: LD_EXP 28
11250: PUSH
11251: FOR_TO
11252: IFFALSE 11353
// begin tmp := 0 ;
11254: LD_ADDR_VAR 0 2
11258: PUSH
11259: LD_STRING 0
11261: ST_TO_ADDR
// if result [ 1 ] then
11262: LD_VAR 0 1
11266: PUSH
11267: LD_INT 1
11269: ARRAY
11270: IFFALSE 11335
// if result [ 1 ] [ 1 ] = i then
11272: LD_VAR 0 1
11276: PUSH
11277: LD_INT 1
11279: ARRAY
11280: PUSH
11281: LD_INT 1
11283: ARRAY
11284: PUSH
11285: LD_VAR 0 5
11289: EQUAL
11290: IFFALSE 11335
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
11292: LD_ADDR_VAR 0 1
11296: PUSH
11297: LD_VAR 0 1
11301: PPUSH
11302: LD_INT 1
11304: PPUSH
11305: LD_VAR 0 1
11309: PUSH
11310: LD_INT 1
11312: ARRAY
11313: PPUSH
11314: LD_INT 1
11316: PPUSH
11317: CALL_OW 3
11321: PPUSH
11322: CALL_OW 1
11326: ST_TO_ADDR
// tmp := 1 ;
11327: LD_ADDR_VAR 0 2
11331: PUSH
11332: LD_STRING 1
11334: ST_TO_ADDR
// end ; normal := normal & tmp ;
11335: LD_ADDR_VAR 0 3
11339: PUSH
11340: LD_VAR 0 3
11344: PUSH
11345: LD_VAR 0 2
11349: STR
11350: ST_TO_ADDR
// end ;
11351: GO 11251
11353: POP
11354: POP
// for i = 1 to hardcoreCounter do
11355: LD_ADDR_VAR 0 5
11359: PUSH
11360: DOUBLE
11361: LD_INT 1
11363: DEC
11364: ST_TO_ADDR
11365: LD_EXP 29
11369: PUSH
11370: FOR_TO
11371: IFFALSE 11476
// begin tmp := 0 ;
11373: LD_ADDR_VAR 0 2
11377: PUSH
11378: LD_STRING 0
11380: ST_TO_ADDR
// if result [ 2 ] then
11381: LD_VAR 0 1
11385: PUSH
11386: LD_INT 2
11388: ARRAY
11389: IFFALSE 11458
// if result [ 2 ] [ 1 ] = 100 + i then
11391: LD_VAR 0 1
11395: PUSH
11396: LD_INT 2
11398: ARRAY
11399: PUSH
11400: LD_INT 1
11402: ARRAY
11403: PUSH
11404: LD_INT 100
11406: PUSH
11407: LD_VAR 0 5
11411: PLUS
11412: EQUAL
11413: IFFALSE 11458
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
11415: LD_ADDR_VAR 0 1
11419: PUSH
11420: LD_VAR 0 1
11424: PPUSH
11425: LD_INT 2
11427: PPUSH
11428: LD_VAR 0 1
11432: PUSH
11433: LD_INT 2
11435: ARRAY
11436: PPUSH
11437: LD_INT 1
11439: PPUSH
11440: CALL_OW 3
11444: PPUSH
11445: CALL_OW 1
11449: ST_TO_ADDR
// tmp := 1 ;
11450: LD_ADDR_VAR 0 2
11454: PUSH
11455: LD_STRING 1
11457: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
11458: LD_ADDR_VAR 0 4
11462: PUSH
11463: LD_VAR 0 4
11467: PUSH
11468: LD_VAR 0 2
11472: STR
11473: ST_TO_ADDR
// end ;
11474: GO 11370
11476: POP
11477: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
11478: LD_STRING getStreamItemsFromMission("
11480: PUSH
11481: LD_VAR 0 3
11485: STR
11486: PUSH
11487: LD_STRING ","
11489: STR
11490: PUSH
11491: LD_VAR 0 4
11495: STR
11496: PUSH
11497: LD_STRING ")
11499: STR
11500: PPUSH
11501: CALL_OW 559
// end else
11505: GO 11514
// ToLua ( getStreamItemsFromMission("","") ) ;
11507: LD_STRING getStreamItemsFromMission("","")
11509: PPUSH
11510: CALL_OW 559
// end ;
11514: LD_VAR 0 1
11518: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11519: LD_EXP 27
11523: PUSH
11524: LD_EXP 32
11528: AND
11529: IFFALSE 11653
11531: GO 11533
11533: DISABLE
11534: LD_INT 0
11536: PPUSH
11537: PPUSH
// begin enable ;
11538: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11539: LD_ADDR_VAR 0 2
11543: PUSH
11544: LD_INT 22
11546: PUSH
11547: LD_OWVAR 2
11551: PUSH
11552: EMPTY
11553: LIST
11554: LIST
11555: PUSH
11556: LD_INT 2
11558: PUSH
11559: LD_INT 34
11561: PUSH
11562: LD_INT 7
11564: PUSH
11565: EMPTY
11566: LIST
11567: LIST
11568: PUSH
11569: LD_INT 34
11571: PUSH
11572: LD_INT 45
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: PUSH
11579: LD_INT 34
11581: PUSH
11582: LD_INT 28
11584: PUSH
11585: EMPTY
11586: LIST
11587: LIST
11588: PUSH
11589: LD_INT 34
11591: PUSH
11592: LD_INT 47
11594: PUSH
11595: EMPTY
11596: LIST
11597: LIST
11598: PUSH
11599: EMPTY
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: PUSH
11606: EMPTY
11607: LIST
11608: LIST
11609: PPUSH
11610: CALL_OW 69
11614: ST_TO_ADDR
// if not tmp then
11615: LD_VAR 0 2
11619: NOT
11620: IFFALSE 11624
// exit ;
11622: GO 11653
// for i in tmp do
11624: LD_ADDR_VAR 0 1
11628: PUSH
11629: LD_VAR 0 2
11633: PUSH
11634: FOR_IN
11635: IFFALSE 11651
// begin SetLives ( i , 0 ) ;
11637: LD_VAR 0 1
11641: PPUSH
11642: LD_INT 0
11644: PPUSH
11645: CALL_OW 234
// end ;
11649: GO 11634
11651: POP
11652: POP
// end ;
11653: PPOPN 2
11655: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11656: LD_EXP 27
11660: PUSH
11661: LD_EXP 33
11665: AND
11666: IFFALSE 11750
11668: GO 11670
11670: DISABLE
11671: LD_INT 0
11673: PPUSH
11674: PPUSH
// begin enable ;
11675: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11676: LD_ADDR_VAR 0 2
11680: PUSH
11681: LD_INT 22
11683: PUSH
11684: LD_OWVAR 2
11688: PUSH
11689: EMPTY
11690: LIST
11691: LIST
11692: PUSH
11693: LD_INT 32
11695: PUSH
11696: LD_INT 3
11698: PUSH
11699: EMPTY
11700: LIST
11701: LIST
11702: PUSH
11703: EMPTY
11704: LIST
11705: LIST
11706: PPUSH
11707: CALL_OW 69
11711: ST_TO_ADDR
// if not tmp then
11712: LD_VAR 0 2
11716: NOT
11717: IFFALSE 11721
// exit ;
11719: GO 11750
// for i in tmp do
11721: LD_ADDR_VAR 0 1
11725: PUSH
11726: LD_VAR 0 2
11730: PUSH
11731: FOR_IN
11732: IFFALSE 11748
// begin SetLives ( i , 0 ) ;
11734: LD_VAR 0 1
11738: PPUSH
11739: LD_INT 0
11741: PPUSH
11742: CALL_OW 234
// end ;
11746: GO 11731
11748: POP
11749: POP
// end ;
11750: PPOPN 2
11752: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11753: LD_EXP 27
11757: PUSH
11758: LD_EXP 30
11762: AND
11763: IFFALSE 11856
11765: GO 11767
11767: DISABLE
11768: LD_INT 0
11770: PPUSH
// begin enable ;
11771: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11772: LD_ADDR_VAR 0 1
11776: PUSH
11777: LD_INT 22
11779: PUSH
11780: LD_OWVAR 2
11784: PUSH
11785: EMPTY
11786: LIST
11787: LIST
11788: PUSH
11789: LD_INT 2
11791: PUSH
11792: LD_INT 25
11794: PUSH
11795: LD_INT 5
11797: PUSH
11798: EMPTY
11799: LIST
11800: LIST
11801: PUSH
11802: LD_INT 25
11804: PUSH
11805: LD_INT 9
11807: PUSH
11808: EMPTY
11809: LIST
11810: LIST
11811: PUSH
11812: LD_INT 25
11814: PUSH
11815: LD_INT 8
11817: PUSH
11818: EMPTY
11819: LIST
11820: LIST
11821: PUSH
11822: EMPTY
11823: LIST
11824: LIST
11825: LIST
11826: LIST
11827: PUSH
11828: EMPTY
11829: LIST
11830: LIST
11831: PPUSH
11832: CALL_OW 69
11836: PUSH
11837: FOR_IN
11838: IFFALSE 11854
// begin SetClass ( i , 1 ) ;
11840: LD_VAR 0 1
11844: PPUSH
11845: LD_INT 1
11847: PPUSH
11848: CALL_OW 336
// end ;
11852: GO 11837
11854: POP
11855: POP
// end ;
11856: PPOPN 1
11858: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
11859: LD_EXP 27
11863: PUSH
11864: LD_EXP 31
11868: AND
11869: PUSH
11870: LD_OWVAR 65
11874: PUSH
11875: LD_INT 7
11877: LESS
11878: AND
11879: IFFALSE 11893
11881: GO 11883
11883: DISABLE
// begin enable ;
11884: ENABLE
// game_speed := 7 ;
11885: LD_ADDR_OWVAR 65
11889: PUSH
11890: LD_INT 7
11892: ST_TO_ADDR
// end ;
11893: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11894: LD_EXP 27
11898: PUSH
11899: LD_EXP 34
11903: AND
11904: IFFALSE 12106
11906: GO 11908
11908: DISABLE
11909: LD_INT 0
11911: PPUSH
11912: PPUSH
11913: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11914: LD_ADDR_VAR 0 3
11918: PUSH
11919: LD_INT 81
11921: PUSH
11922: LD_OWVAR 2
11926: PUSH
11927: EMPTY
11928: LIST
11929: LIST
11930: PUSH
11931: LD_INT 21
11933: PUSH
11934: LD_INT 1
11936: PUSH
11937: EMPTY
11938: LIST
11939: LIST
11940: PUSH
11941: EMPTY
11942: LIST
11943: LIST
11944: PPUSH
11945: CALL_OW 69
11949: ST_TO_ADDR
// if not tmp then
11950: LD_VAR 0 3
11954: NOT
11955: IFFALSE 11959
// exit ;
11957: GO 12106
// if tmp > 5 then
11959: LD_VAR 0 3
11963: PUSH
11964: LD_INT 5
11966: GREATER
11967: IFFALSE 11979
// k := 5 else
11969: LD_ADDR_VAR 0 2
11973: PUSH
11974: LD_INT 5
11976: ST_TO_ADDR
11977: GO 11989
// k := tmp ;
11979: LD_ADDR_VAR 0 2
11983: PUSH
11984: LD_VAR 0 3
11988: ST_TO_ADDR
// for i := 1 to k do
11989: LD_ADDR_VAR 0 1
11993: PUSH
11994: DOUBLE
11995: LD_INT 1
11997: DEC
11998: ST_TO_ADDR
11999: LD_VAR 0 2
12003: PUSH
12004: FOR_TO
12005: IFFALSE 12104
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
12007: LD_VAR 0 3
12011: PUSH
12012: LD_VAR 0 1
12016: ARRAY
12017: PPUSH
12018: LD_VAR 0 1
12022: PUSH
12023: LD_INT 4
12025: MOD
12026: PUSH
12027: LD_INT 1
12029: PLUS
12030: PPUSH
12031: CALL_OW 259
12035: PUSH
12036: LD_INT 10
12038: LESS
12039: IFFALSE 12102
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12041: LD_VAR 0 3
12045: PUSH
12046: LD_VAR 0 1
12050: ARRAY
12051: PPUSH
12052: LD_VAR 0 1
12056: PUSH
12057: LD_INT 4
12059: MOD
12060: PUSH
12061: LD_INT 1
12063: PLUS
12064: PPUSH
12065: LD_VAR 0 3
12069: PUSH
12070: LD_VAR 0 1
12074: ARRAY
12075: PPUSH
12076: LD_VAR 0 1
12080: PUSH
12081: LD_INT 4
12083: MOD
12084: PUSH
12085: LD_INT 1
12087: PLUS
12088: PPUSH
12089: CALL_OW 259
12093: PUSH
12094: LD_INT 1
12096: PLUS
12097: PPUSH
12098: CALL_OW 237
12102: GO 12004
12104: POP
12105: POP
// end ;
12106: PPOPN 3
12108: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12109: LD_EXP 27
12113: PUSH
12114: LD_EXP 35
12118: AND
12119: IFFALSE 12139
12121: GO 12123
12123: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12124: LD_INT 4
12126: PPUSH
12127: LD_OWVAR 2
12131: PPUSH
12132: LD_INT 0
12134: PPUSH
12135: CALL_OW 324
12139: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12140: LD_EXP 27
12144: PUSH
12145: LD_EXP 64
12149: AND
12150: IFFALSE 12170
12152: GO 12154
12154: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
12155: LD_INT 19
12157: PPUSH
12158: LD_OWVAR 2
12162: PPUSH
12163: LD_INT 0
12165: PPUSH
12166: CALL_OW 324
12170: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
12171: LD_EXP 27
12175: PUSH
12176: LD_EXP 36
12180: AND
12181: IFFALSE 12283
12183: GO 12185
12185: DISABLE
12186: LD_INT 0
12188: PPUSH
12189: PPUSH
// begin enable ;
12190: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
12191: LD_ADDR_VAR 0 2
12195: PUSH
12196: LD_INT 22
12198: PUSH
12199: LD_OWVAR 2
12203: PUSH
12204: EMPTY
12205: LIST
12206: LIST
12207: PUSH
12208: LD_INT 2
12210: PUSH
12211: LD_INT 34
12213: PUSH
12214: LD_INT 11
12216: PUSH
12217: EMPTY
12218: LIST
12219: LIST
12220: PUSH
12221: LD_INT 34
12223: PUSH
12224: LD_INT 30
12226: PUSH
12227: EMPTY
12228: LIST
12229: LIST
12230: PUSH
12231: EMPTY
12232: LIST
12233: LIST
12234: LIST
12235: PUSH
12236: EMPTY
12237: LIST
12238: LIST
12239: PPUSH
12240: CALL_OW 69
12244: ST_TO_ADDR
// if not tmp then
12245: LD_VAR 0 2
12249: NOT
12250: IFFALSE 12254
// exit ;
12252: GO 12283
// for i in tmp do
12254: LD_ADDR_VAR 0 1
12258: PUSH
12259: LD_VAR 0 2
12263: PUSH
12264: FOR_IN
12265: IFFALSE 12281
// begin SetLives ( i , 0 ) ;
12267: LD_VAR 0 1
12271: PPUSH
12272: LD_INT 0
12274: PPUSH
12275: CALL_OW 234
// end ;
12279: GO 12264
12281: POP
12282: POP
// end ;
12283: PPOPN 2
12285: END
// every 0 0$1 trigger StreamModeActive and sBunker do
12286: LD_EXP 27
12290: PUSH
12291: LD_EXP 37
12295: AND
12296: IFFALSE 12316
12298: GO 12300
12300: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
12301: LD_INT 32
12303: PPUSH
12304: LD_OWVAR 2
12308: PPUSH
12309: LD_INT 0
12311: PPUSH
12312: CALL_OW 324
12316: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12317: LD_EXP 27
12321: PUSH
12322: LD_EXP 38
12326: AND
12327: IFFALSE 12508
12329: GO 12331
12331: DISABLE
12332: LD_INT 0
12334: PPUSH
12335: PPUSH
12336: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12337: LD_ADDR_VAR 0 2
12341: PUSH
12342: LD_INT 22
12344: PUSH
12345: LD_OWVAR 2
12349: PUSH
12350: EMPTY
12351: LIST
12352: LIST
12353: PUSH
12354: LD_INT 33
12356: PUSH
12357: LD_INT 3
12359: PUSH
12360: EMPTY
12361: LIST
12362: LIST
12363: PUSH
12364: EMPTY
12365: LIST
12366: LIST
12367: PPUSH
12368: CALL_OW 69
12372: ST_TO_ADDR
// if not tmp then
12373: LD_VAR 0 2
12377: NOT
12378: IFFALSE 12382
// exit ;
12380: GO 12508
// side := 0 ;
12382: LD_ADDR_VAR 0 3
12386: PUSH
12387: LD_INT 0
12389: ST_TO_ADDR
// for i := 1 to 8 do
12390: LD_ADDR_VAR 0 1
12394: PUSH
12395: DOUBLE
12396: LD_INT 1
12398: DEC
12399: ST_TO_ADDR
12400: LD_INT 8
12402: PUSH
12403: FOR_TO
12404: IFFALSE 12452
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12406: LD_OWVAR 2
12410: PUSH
12411: LD_VAR 0 1
12415: NONEQUAL
12416: PUSH
12417: LD_OWVAR 2
12421: PPUSH
12422: LD_VAR 0 1
12426: PPUSH
12427: CALL_OW 81
12431: PUSH
12432: LD_INT 2
12434: EQUAL
12435: AND
12436: IFFALSE 12450
// begin side := i ;
12438: LD_ADDR_VAR 0 3
12442: PUSH
12443: LD_VAR 0 1
12447: ST_TO_ADDR
// break ;
12448: GO 12452
// end ;
12450: GO 12403
12452: POP
12453: POP
// if not side then
12454: LD_VAR 0 3
12458: NOT
12459: IFFALSE 12463
// exit ;
12461: GO 12508
// for i := 1 to tmp do
12463: LD_ADDR_VAR 0 1
12467: PUSH
12468: DOUBLE
12469: LD_INT 1
12471: DEC
12472: ST_TO_ADDR
12473: LD_VAR 0 2
12477: PUSH
12478: FOR_TO
12479: IFFALSE 12506
// if Prob ( 60 ) then
12481: LD_INT 60
12483: PPUSH
12484: CALL_OW 13
12488: IFFALSE 12504
// SetSide ( i , side ) ;
12490: LD_VAR 0 1
12494: PPUSH
12495: LD_VAR 0 3
12499: PPUSH
12500: CALL_OW 235
12504: GO 12478
12506: POP
12507: POP
// end ;
12508: PPOPN 3
12510: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12511: LD_EXP 27
12515: PUSH
12516: LD_EXP 40
12520: AND
12521: IFFALSE 12640
12523: GO 12525
12525: DISABLE
12526: LD_INT 0
12528: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12529: LD_ADDR_VAR 0 1
12533: PUSH
12534: LD_INT 22
12536: PUSH
12537: LD_OWVAR 2
12541: PUSH
12542: EMPTY
12543: LIST
12544: LIST
12545: PUSH
12546: LD_INT 21
12548: PUSH
12549: LD_INT 1
12551: PUSH
12552: EMPTY
12553: LIST
12554: LIST
12555: PUSH
12556: LD_INT 3
12558: PUSH
12559: LD_INT 23
12561: PUSH
12562: LD_INT 0
12564: PUSH
12565: EMPTY
12566: LIST
12567: LIST
12568: PUSH
12569: EMPTY
12570: LIST
12571: LIST
12572: PUSH
12573: EMPTY
12574: LIST
12575: LIST
12576: LIST
12577: PPUSH
12578: CALL_OW 69
12582: PUSH
12583: FOR_IN
12584: IFFALSE 12638
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12586: LD_VAR 0 1
12590: PPUSH
12591: CALL_OW 257
12595: PUSH
12596: LD_INT 1
12598: PUSH
12599: LD_INT 2
12601: PUSH
12602: LD_INT 3
12604: PUSH
12605: LD_INT 4
12607: PUSH
12608: EMPTY
12609: LIST
12610: LIST
12611: LIST
12612: LIST
12613: IN
12614: IFFALSE 12636
// SetClass ( un , rand ( 1 , 4 ) ) ;
12616: LD_VAR 0 1
12620: PPUSH
12621: LD_INT 1
12623: PPUSH
12624: LD_INT 4
12626: PPUSH
12627: CALL_OW 12
12631: PPUSH
12632: CALL_OW 336
12636: GO 12583
12638: POP
12639: POP
// end ;
12640: PPOPN 1
12642: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12643: LD_EXP 27
12647: PUSH
12648: LD_EXP 39
12652: AND
12653: IFFALSE 12732
12655: GO 12657
12657: DISABLE
12658: LD_INT 0
12660: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12661: LD_ADDR_VAR 0 1
12665: PUSH
12666: LD_INT 22
12668: PUSH
12669: LD_OWVAR 2
12673: PUSH
12674: EMPTY
12675: LIST
12676: LIST
12677: PUSH
12678: LD_INT 21
12680: PUSH
12681: LD_INT 3
12683: PUSH
12684: EMPTY
12685: LIST
12686: LIST
12687: PUSH
12688: EMPTY
12689: LIST
12690: LIST
12691: PPUSH
12692: CALL_OW 69
12696: ST_TO_ADDR
// if not tmp then
12697: LD_VAR 0 1
12701: NOT
12702: IFFALSE 12706
// exit ;
12704: GO 12732
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12706: LD_VAR 0 1
12710: PUSH
12711: LD_INT 1
12713: PPUSH
12714: LD_VAR 0 1
12718: PPUSH
12719: CALL_OW 12
12723: ARRAY
12724: PPUSH
12725: LD_INT 100
12727: PPUSH
12728: CALL_OW 234
// end ;
12732: PPOPN 1
12734: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12735: LD_EXP 27
12739: PUSH
12740: LD_EXP 41
12744: AND
12745: IFFALSE 12843
12747: GO 12749
12749: DISABLE
12750: LD_INT 0
12752: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12753: LD_ADDR_VAR 0 1
12757: PUSH
12758: LD_INT 22
12760: PUSH
12761: LD_OWVAR 2
12765: PUSH
12766: EMPTY
12767: LIST
12768: LIST
12769: PUSH
12770: LD_INT 21
12772: PUSH
12773: LD_INT 1
12775: PUSH
12776: EMPTY
12777: LIST
12778: LIST
12779: PUSH
12780: EMPTY
12781: LIST
12782: LIST
12783: PPUSH
12784: CALL_OW 69
12788: ST_TO_ADDR
// if not tmp then
12789: LD_VAR 0 1
12793: NOT
12794: IFFALSE 12798
// exit ;
12796: GO 12843
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12798: LD_VAR 0 1
12802: PUSH
12803: LD_INT 1
12805: PPUSH
12806: LD_VAR 0 1
12810: PPUSH
12811: CALL_OW 12
12815: ARRAY
12816: PPUSH
12817: LD_INT 1
12819: PPUSH
12820: LD_INT 4
12822: PPUSH
12823: CALL_OW 12
12827: PPUSH
12828: LD_INT 3000
12830: PPUSH
12831: LD_INT 9000
12833: PPUSH
12834: CALL_OW 12
12838: PPUSH
12839: CALL_OW 492
// end ;
12843: PPOPN 1
12845: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12846: LD_EXP 27
12850: PUSH
12851: LD_EXP 42
12855: AND
12856: IFFALSE 12876
12858: GO 12860
12860: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
12861: LD_INT 1
12863: PPUSH
12864: LD_OWVAR 2
12868: PPUSH
12869: LD_INT 0
12871: PPUSH
12872: CALL_OW 324
12876: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
12877: LD_EXP 27
12881: PUSH
12882: LD_EXP 43
12886: AND
12887: IFFALSE 12970
12889: GO 12891
12891: DISABLE
12892: LD_INT 0
12894: PPUSH
12895: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12896: LD_ADDR_VAR 0 2
12900: PUSH
12901: LD_INT 22
12903: PUSH
12904: LD_OWVAR 2
12908: PUSH
12909: EMPTY
12910: LIST
12911: LIST
12912: PUSH
12913: LD_INT 21
12915: PUSH
12916: LD_INT 3
12918: PUSH
12919: EMPTY
12920: LIST
12921: LIST
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: PPUSH
12927: CALL_OW 69
12931: ST_TO_ADDR
// if not tmp then
12932: LD_VAR 0 2
12936: NOT
12937: IFFALSE 12941
// exit ;
12939: GO 12970
// for i in tmp do
12941: LD_ADDR_VAR 0 1
12945: PUSH
12946: LD_VAR 0 2
12950: PUSH
12951: FOR_IN
12952: IFFALSE 12968
// SetBLevel ( i , 10 ) ;
12954: LD_VAR 0 1
12958: PPUSH
12959: LD_INT 10
12961: PPUSH
12962: CALL_OW 241
12966: GO 12951
12968: POP
12969: POP
// end ;
12970: PPOPN 2
12972: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12973: LD_EXP 27
12977: PUSH
12978: LD_EXP 44
12982: AND
12983: IFFALSE 13094
12985: GO 12987
12987: DISABLE
12988: LD_INT 0
12990: PPUSH
12991: PPUSH
12992: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12993: LD_ADDR_VAR 0 3
12997: PUSH
12998: LD_INT 22
13000: PUSH
13001: LD_OWVAR 2
13005: PUSH
13006: EMPTY
13007: LIST
13008: LIST
13009: PUSH
13010: LD_INT 25
13012: PUSH
13013: LD_INT 1
13015: PUSH
13016: EMPTY
13017: LIST
13018: LIST
13019: PUSH
13020: EMPTY
13021: LIST
13022: LIST
13023: PPUSH
13024: CALL_OW 69
13028: ST_TO_ADDR
// if not tmp then
13029: LD_VAR 0 3
13033: NOT
13034: IFFALSE 13038
// exit ;
13036: GO 13094
// un := tmp [ rand ( 1 , tmp ) ] ;
13038: LD_ADDR_VAR 0 2
13042: PUSH
13043: LD_VAR 0 3
13047: PUSH
13048: LD_INT 1
13050: PPUSH
13051: LD_VAR 0 3
13055: PPUSH
13056: CALL_OW 12
13060: ARRAY
13061: ST_TO_ADDR
// if Crawls ( un ) then
13062: LD_VAR 0 2
13066: PPUSH
13067: CALL_OW 318
13071: IFFALSE 13082
// ComWalk ( un ) ;
13073: LD_VAR 0 2
13077: PPUSH
13078: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13082: LD_VAR 0 2
13086: PPUSH
13087: LD_INT 5
13089: PPUSH
13090: CALL_OW 336
// end ;
13094: PPOPN 3
13096: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
13097: LD_EXP 27
13101: PUSH
13102: LD_EXP 45
13106: AND
13107: PUSH
13108: LD_OWVAR 67
13112: PUSH
13113: LD_INT 3
13115: LESS
13116: AND
13117: IFFALSE 13136
13119: GO 13121
13121: DISABLE
// Difficulty := Difficulty + 1 ;
13122: LD_ADDR_OWVAR 67
13126: PUSH
13127: LD_OWVAR 67
13131: PUSH
13132: LD_INT 1
13134: PLUS
13135: ST_TO_ADDR
13136: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
13137: LD_EXP 27
13141: PUSH
13142: LD_EXP 46
13146: AND
13147: IFFALSE 13250
13149: GO 13151
13151: DISABLE
13152: LD_INT 0
13154: PPUSH
// begin for i := 1 to 5 do
13155: LD_ADDR_VAR 0 1
13159: PUSH
13160: DOUBLE
13161: LD_INT 1
13163: DEC
13164: ST_TO_ADDR
13165: LD_INT 5
13167: PUSH
13168: FOR_TO
13169: IFFALSE 13248
// begin uc_nation := nation_nature ;
13171: LD_ADDR_OWVAR 21
13175: PUSH
13176: LD_INT 0
13178: ST_TO_ADDR
// uc_side := 0 ;
13179: LD_ADDR_OWVAR 20
13183: PUSH
13184: LD_INT 0
13186: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13187: LD_ADDR_OWVAR 29
13191: PUSH
13192: LD_INT 12
13194: PUSH
13195: LD_INT 12
13197: PUSH
13198: EMPTY
13199: LIST
13200: LIST
13201: ST_TO_ADDR
// hc_agressivity := 20 ;
13202: LD_ADDR_OWVAR 35
13206: PUSH
13207: LD_INT 20
13209: ST_TO_ADDR
// hc_class := class_tiger ;
13210: LD_ADDR_OWVAR 28
13214: PUSH
13215: LD_INT 14
13217: ST_TO_ADDR
// hc_gallery :=  ;
13218: LD_ADDR_OWVAR 33
13222: PUSH
13223: LD_STRING 
13225: ST_TO_ADDR
// hc_name :=  ;
13226: LD_ADDR_OWVAR 26
13230: PUSH
13231: LD_STRING 
13233: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
13234: CALL_OW 44
13238: PPUSH
13239: LD_INT 0
13241: PPUSH
13242: CALL_OW 51
// end ;
13246: GO 13168
13248: POP
13249: POP
// end ;
13250: PPOPN 1
13252: END
// every 0 0$1 trigger StreamModeActive and sBomb do
13253: LD_EXP 27
13257: PUSH
13258: LD_EXP 47
13262: AND
13263: IFFALSE 13272
13265: GO 13267
13267: DISABLE
// StreamSibBomb ;
13268: CALL 13273 0 0
13272: END
// export function StreamSibBomb ; var i , x , y ; begin
13273: LD_INT 0
13275: PPUSH
13276: PPUSH
13277: PPUSH
13278: PPUSH
// result := false ;
13279: LD_ADDR_VAR 0 1
13283: PUSH
13284: LD_INT 0
13286: ST_TO_ADDR
// for i := 1 to 16 do
13287: LD_ADDR_VAR 0 2
13291: PUSH
13292: DOUBLE
13293: LD_INT 1
13295: DEC
13296: ST_TO_ADDR
13297: LD_INT 16
13299: PUSH
13300: FOR_TO
13301: IFFALSE 13500
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13303: LD_ADDR_VAR 0 3
13307: PUSH
13308: LD_INT 10
13310: PUSH
13311: LD_INT 20
13313: PUSH
13314: LD_INT 30
13316: PUSH
13317: LD_INT 40
13319: PUSH
13320: LD_INT 50
13322: PUSH
13323: LD_INT 60
13325: PUSH
13326: LD_INT 70
13328: PUSH
13329: LD_INT 80
13331: PUSH
13332: LD_INT 90
13334: PUSH
13335: LD_INT 100
13337: PUSH
13338: LD_INT 110
13340: PUSH
13341: LD_INT 120
13343: PUSH
13344: LD_INT 130
13346: PUSH
13347: LD_INT 140
13349: PUSH
13350: LD_INT 150
13352: PUSH
13353: EMPTY
13354: LIST
13355: LIST
13356: LIST
13357: LIST
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: LIST
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: LIST
13369: PUSH
13370: LD_INT 1
13372: PPUSH
13373: LD_INT 15
13375: PPUSH
13376: CALL_OW 12
13380: ARRAY
13381: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13382: LD_ADDR_VAR 0 4
13386: PUSH
13387: LD_INT 10
13389: PUSH
13390: LD_INT 20
13392: PUSH
13393: LD_INT 30
13395: PUSH
13396: LD_INT 40
13398: PUSH
13399: LD_INT 50
13401: PUSH
13402: LD_INT 60
13404: PUSH
13405: LD_INT 70
13407: PUSH
13408: LD_INT 80
13410: PUSH
13411: LD_INT 90
13413: PUSH
13414: LD_INT 100
13416: PUSH
13417: LD_INT 110
13419: PUSH
13420: LD_INT 120
13422: PUSH
13423: LD_INT 130
13425: PUSH
13426: LD_INT 140
13428: PUSH
13429: LD_INT 150
13431: PUSH
13432: EMPTY
13433: LIST
13434: LIST
13435: LIST
13436: LIST
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: PUSH
13449: LD_INT 1
13451: PPUSH
13452: LD_INT 15
13454: PPUSH
13455: CALL_OW 12
13459: ARRAY
13460: ST_TO_ADDR
// if ValidHex ( x , y ) then
13461: LD_VAR 0 3
13465: PPUSH
13466: LD_VAR 0 4
13470: PPUSH
13471: CALL_OW 488
13475: IFFALSE 13498
// begin result := [ x , y ] ;
13477: LD_ADDR_VAR 0 1
13481: PUSH
13482: LD_VAR 0 3
13486: PUSH
13487: LD_VAR 0 4
13491: PUSH
13492: EMPTY
13493: LIST
13494: LIST
13495: ST_TO_ADDR
// break ;
13496: GO 13500
// end ; end ;
13498: GO 13300
13500: POP
13501: POP
// if result then
13502: LD_VAR 0 1
13506: IFFALSE 13566
// begin ToLua ( playSibBomb() ) ;
13508: LD_STRING playSibBomb()
13510: PPUSH
13511: CALL_OW 559
// wait ( 0 0$14 ) ;
13515: LD_INT 490
13517: PPUSH
13518: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13522: LD_VAR 0 1
13526: PUSH
13527: LD_INT 1
13529: ARRAY
13530: PPUSH
13531: LD_VAR 0 1
13535: PUSH
13536: LD_INT 2
13538: ARRAY
13539: PPUSH
13540: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13544: LD_VAR 0 1
13548: PUSH
13549: LD_INT 1
13551: ARRAY
13552: PPUSH
13553: LD_VAR 0 1
13557: PUSH
13558: LD_INT 2
13560: ARRAY
13561: PPUSH
13562: CALL_OW 429
// end ; end ;
13566: LD_VAR 0 1
13570: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13571: LD_EXP 27
13575: PUSH
13576: LD_EXP 49
13580: AND
13581: IFFALSE 13593
13583: GO 13585
13585: DISABLE
// YouLost (  ) ;
13586: LD_STRING 
13588: PPUSH
13589: CALL_OW 104
13593: END
// every 0 0$1 trigger StreamModeActive and sFog do
13594: LD_EXP 27
13598: PUSH
13599: LD_EXP 48
13603: AND
13604: IFFALSE 13618
13606: GO 13608
13608: DISABLE
// FogOff ( your_side ) ;
13609: LD_OWVAR 2
13613: PPUSH
13614: CALL_OW 344
13618: END
// every 0 0$1 trigger StreamModeActive and sSun do
13619: LD_EXP 27
13623: PUSH
13624: LD_EXP 50
13628: AND
13629: IFFALSE 13657
13631: GO 13633
13633: DISABLE
// begin solar_recharge_percent := 0 ;
13634: LD_ADDR_OWVAR 79
13638: PUSH
13639: LD_INT 0
13641: ST_TO_ADDR
// wait ( 5 5$00 ) ;
13642: LD_INT 10500
13644: PPUSH
13645: CALL_OW 67
// solar_recharge_percent := 100 ;
13649: LD_ADDR_OWVAR 79
13653: PUSH
13654: LD_INT 100
13656: ST_TO_ADDR
// end ;
13657: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13658: LD_EXP 27
13662: PUSH
13663: LD_EXP 51
13667: AND
13668: IFFALSE 13907
13670: GO 13672
13672: DISABLE
13673: LD_INT 0
13675: PPUSH
13676: PPUSH
13677: PPUSH
// begin tmp := [ ] ;
13678: LD_ADDR_VAR 0 3
13682: PUSH
13683: EMPTY
13684: ST_TO_ADDR
// for i := 1 to 6 do
13685: LD_ADDR_VAR 0 1
13689: PUSH
13690: DOUBLE
13691: LD_INT 1
13693: DEC
13694: ST_TO_ADDR
13695: LD_INT 6
13697: PUSH
13698: FOR_TO
13699: IFFALSE 13804
// begin uc_nation := nation_nature ;
13701: LD_ADDR_OWVAR 21
13705: PUSH
13706: LD_INT 0
13708: ST_TO_ADDR
// uc_side := 0 ;
13709: LD_ADDR_OWVAR 20
13713: PUSH
13714: LD_INT 0
13716: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13717: LD_ADDR_OWVAR 29
13721: PUSH
13722: LD_INT 12
13724: PUSH
13725: LD_INT 12
13727: PUSH
13728: EMPTY
13729: LIST
13730: LIST
13731: ST_TO_ADDR
// hc_agressivity := 20 ;
13732: LD_ADDR_OWVAR 35
13736: PUSH
13737: LD_INT 20
13739: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13740: LD_ADDR_OWVAR 28
13744: PUSH
13745: LD_INT 17
13747: ST_TO_ADDR
// hc_gallery :=  ;
13748: LD_ADDR_OWVAR 33
13752: PUSH
13753: LD_STRING 
13755: ST_TO_ADDR
// hc_name :=  ;
13756: LD_ADDR_OWVAR 26
13760: PUSH
13761: LD_STRING 
13763: ST_TO_ADDR
// un := CreateHuman ;
13764: LD_ADDR_VAR 0 2
13768: PUSH
13769: CALL_OW 44
13773: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13774: LD_VAR 0 2
13778: PPUSH
13779: LD_INT 1
13781: PPUSH
13782: CALL_OW 51
// tmp := tmp ^ un ;
13786: LD_ADDR_VAR 0 3
13790: PUSH
13791: LD_VAR 0 3
13795: PUSH
13796: LD_VAR 0 2
13800: ADD
13801: ST_TO_ADDR
// end ;
13802: GO 13698
13804: POP
13805: POP
// repeat wait ( 0 0$1 ) ;
13806: LD_INT 35
13808: PPUSH
13809: CALL_OW 67
// for un in tmp do
13813: LD_ADDR_VAR 0 2
13817: PUSH
13818: LD_VAR 0 3
13822: PUSH
13823: FOR_IN
13824: IFFALSE 13898
// begin if IsDead ( un ) then
13826: LD_VAR 0 2
13830: PPUSH
13831: CALL_OW 301
13835: IFFALSE 13855
// begin tmp := tmp diff un ;
13837: LD_ADDR_VAR 0 3
13841: PUSH
13842: LD_VAR 0 3
13846: PUSH
13847: LD_VAR 0 2
13851: DIFF
13852: ST_TO_ADDR
// continue ;
13853: GO 13823
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13855: LD_VAR 0 2
13859: PPUSH
13860: LD_INT 3
13862: PUSH
13863: LD_INT 22
13865: PUSH
13866: LD_INT 0
13868: PUSH
13869: EMPTY
13870: LIST
13871: LIST
13872: PUSH
13873: EMPTY
13874: LIST
13875: LIST
13876: PPUSH
13877: CALL_OW 69
13881: PPUSH
13882: LD_VAR 0 2
13886: PPUSH
13887: CALL_OW 74
13891: PPUSH
13892: CALL_OW 115
// end ;
13896: GO 13823
13898: POP
13899: POP
// until not tmp ;
13900: LD_VAR 0 3
13904: NOT
13905: IFFALSE 13806
// end ;
13907: PPOPN 3
13909: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13910: LD_EXP 27
13914: PUSH
13915: LD_EXP 52
13919: AND
13920: IFFALSE 13974
13922: GO 13924
13924: DISABLE
// begin ToLua ( displayTroll(); ) ;
13925: LD_STRING displayTroll();
13927: PPUSH
13928: CALL_OW 559
// wait ( 3 3$00 ) ;
13932: LD_INT 6300
13934: PPUSH
13935: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13939: LD_STRING hideTroll();
13941: PPUSH
13942: CALL_OW 559
// wait ( 1 1$00 ) ;
13946: LD_INT 2100
13948: PPUSH
13949: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13953: LD_STRING displayTroll();
13955: PPUSH
13956: CALL_OW 559
// wait ( 1 1$00 ) ;
13960: LD_INT 2100
13962: PPUSH
13963: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13967: LD_STRING hideTroll();
13969: PPUSH
13970: CALL_OW 559
// end ;
13974: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13975: LD_EXP 27
13979: PUSH
13980: LD_EXP 53
13984: AND
13985: IFFALSE 14048
13987: GO 13989
13989: DISABLE
13990: LD_INT 0
13992: PPUSH
// begin p := 0 ;
13993: LD_ADDR_VAR 0 1
13997: PUSH
13998: LD_INT 0
14000: ST_TO_ADDR
// repeat game_speed := 1 ;
14001: LD_ADDR_OWVAR 65
14005: PUSH
14006: LD_INT 1
14008: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14009: LD_INT 35
14011: PPUSH
14012: CALL_OW 67
// p := p + 1 ;
14016: LD_ADDR_VAR 0 1
14020: PUSH
14021: LD_VAR 0 1
14025: PUSH
14026: LD_INT 1
14028: PLUS
14029: ST_TO_ADDR
// until p >= 60 ;
14030: LD_VAR 0 1
14034: PUSH
14035: LD_INT 60
14037: GREATEREQUAL
14038: IFFALSE 14001
// game_speed := 4 ;
14040: LD_ADDR_OWVAR 65
14044: PUSH
14045: LD_INT 4
14047: ST_TO_ADDR
// end ;
14048: PPOPN 1
14050: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14051: LD_EXP 27
14055: PUSH
14056: LD_EXP 54
14060: AND
14061: IFFALSE 14207
14063: GO 14065
14065: DISABLE
14066: LD_INT 0
14068: PPUSH
14069: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14070: LD_ADDR_VAR 0 1
14074: PUSH
14075: LD_INT 22
14077: PUSH
14078: LD_OWVAR 2
14082: PUSH
14083: EMPTY
14084: LIST
14085: LIST
14086: PUSH
14087: LD_INT 2
14089: PUSH
14090: LD_INT 30
14092: PUSH
14093: LD_INT 0
14095: PUSH
14096: EMPTY
14097: LIST
14098: LIST
14099: PUSH
14100: LD_INT 30
14102: PUSH
14103: LD_INT 1
14105: PUSH
14106: EMPTY
14107: LIST
14108: LIST
14109: PUSH
14110: EMPTY
14111: LIST
14112: LIST
14113: LIST
14114: PUSH
14115: EMPTY
14116: LIST
14117: LIST
14118: PPUSH
14119: CALL_OW 69
14123: ST_TO_ADDR
// if not depot then
14124: LD_VAR 0 1
14128: NOT
14129: IFFALSE 14133
// exit ;
14131: GO 14207
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
14133: LD_ADDR_VAR 0 2
14137: PUSH
14138: LD_VAR 0 1
14142: PUSH
14143: LD_INT 1
14145: PPUSH
14146: LD_VAR 0 1
14150: PPUSH
14151: CALL_OW 12
14155: ARRAY
14156: PPUSH
14157: CALL_OW 274
14161: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
14162: LD_VAR 0 2
14166: PPUSH
14167: LD_INT 1
14169: PPUSH
14170: LD_INT 0
14172: PPUSH
14173: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
14177: LD_VAR 0 2
14181: PPUSH
14182: LD_INT 2
14184: PPUSH
14185: LD_INT 0
14187: PPUSH
14188: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
14192: LD_VAR 0 2
14196: PPUSH
14197: LD_INT 3
14199: PPUSH
14200: LD_INT 0
14202: PPUSH
14203: CALL_OW 277
// end ;
14207: PPOPN 2
14209: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
14210: LD_EXP 27
14214: PUSH
14215: LD_EXP 55
14219: AND
14220: IFFALSE 14317
14222: GO 14224
14224: DISABLE
14225: LD_INT 0
14227: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14228: LD_ADDR_VAR 0 1
14232: PUSH
14233: LD_INT 22
14235: PUSH
14236: LD_OWVAR 2
14240: PUSH
14241: EMPTY
14242: LIST
14243: LIST
14244: PUSH
14245: LD_INT 21
14247: PUSH
14248: LD_INT 1
14250: PUSH
14251: EMPTY
14252: LIST
14253: LIST
14254: PUSH
14255: LD_INT 3
14257: PUSH
14258: LD_INT 23
14260: PUSH
14261: LD_INT 0
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: PUSH
14268: EMPTY
14269: LIST
14270: LIST
14271: PUSH
14272: EMPTY
14273: LIST
14274: LIST
14275: LIST
14276: PPUSH
14277: CALL_OW 69
14281: ST_TO_ADDR
// if not tmp then
14282: LD_VAR 0 1
14286: NOT
14287: IFFALSE 14291
// exit ;
14289: GO 14317
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
14291: LD_VAR 0 1
14295: PUSH
14296: LD_INT 1
14298: PPUSH
14299: LD_VAR 0 1
14303: PPUSH
14304: CALL_OW 12
14308: ARRAY
14309: PPUSH
14310: LD_INT 200
14312: PPUSH
14313: CALL_OW 234
// end ;
14317: PPOPN 1
14319: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14320: LD_EXP 27
14324: PUSH
14325: LD_EXP 56
14329: AND
14330: IFFALSE 14409
14332: GO 14334
14334: DISABLE
14335: LD_INT 0
14337: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14338: LD_ADDR_VAR 0 1
14342: PUSH
14343: LD_INT 22
14345: PUSH
14346: LD_OWVAR 2
14350: PUSH
14351: EMPTY
14352: LIST
14353: LIST
14354: PUSH
14355: LD_INT 21
14357: PUSH
14358: LD_INT 2
14360: PUSH
14361: EMPTY
14362: LIST
14363: LIST
14364: PUSH
14365: EMPTY
14366: LIST
14367: LIST
14368: PPUSH
14369: CALL_OW 69
14373: ST_TO_ADDR
// if not tmp then
14374: LD_VAR 0 1
14378: NOT
14379: IFFALSE 14383
// exit ;
14381: GO 14409
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14383: LD_VAR 0 1
14387: PUSH
14388: LD_INT 1
14390: PPUSH
14391: LD_VAR 0 1
14395: PPUSH
14396: CALL_OW 12
14400: ARRAY
14401: PPUSH
14402: LD_INT 60
14404: PPUSH
14405: CALL_OW 234
// end ;
14409: PPOPN 1
14411: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14412: LD_EXP 27
14416: PUSH
14417: LD_EXP 57
14421: AND
14422: IFFALSE 14521
14424: GO 14426
14426: DISABLE
14427: LD_INT 0
14429: PPUSH
14430: PPUSH
// begin enable ;
14431: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14432: LD_ADDR_VAR 0 1
14436: PUSH
14437: LD_INT 22
14439: PUSH
14440: LD_OWVAR 2
14444: PUSH
14445: EMPTY
14446: LIST
14447: LIST
14448: PUSH
14449: LD_INT 61
14451: PUSH
14452: EMPTY
14453: LIST
14454: PUSH
14455: LD_INT 33
14457: PUSH
14458: LD_INT 2
14460: PUSH
14461: EMPTY
14462: LIST
14463: LIST
14464: PUSH
14465: EMPTY
14466: LIST
14467: LIST
14468: LIST
14469: PPUSH
14470: CALL_OW 69
14474: ST_TO_ADDR
// if not tmp then
14475: LD_VAR 0 1
14479: NOT
14480: IFFALSE 14484
// exit ;
14482: GO 14521
// for i in tmp do
14484: LD_ADDR_VAR 0 2
14488: PUSH
14489: LD_VAR 0 1
14493: PUSH
14494: FOR_IN
14495: IFFALSE 14519
// if IsControledBy ( i ) then
14497: LD_VAR 0 2
14501: PPUSH
14502: CALL_OW 312
14506: IFFALSE 14517
// ComUnlink ( i ) ;
14508: LD_VAR 0 2
14512: PPUSH
14513: CALL_OW 136
14517: GO 14494
14519: POP
14520: POP
// end ;
14521: PPOPN 2
14523: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14524: LD_EXP 27
14528: PUSH
14529: LD_EXP 58
14533: AND
14534: IFFALSE 14674
14536: GO 14538
14538: DISABLE
14539: LD_INT 0
14541: PPUSH
14542: PPUSH
// begin ToLua ( displayPowell(); ) ;
14543: LD_STRING displayPowell();
14545: PPUSH
14546: CALL_OW 559
// uc_side := 0 ;
14550: LD_ADDR_OWVAR 20
14554: PUSH
14555: LD_INT 0
14557: ST_TO_ADDR
// uc_nation := 2 ;
14558: LD_ADDR_OWVAR 21
14562: PUSH
14563: LD_INT 2
14565: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14566: LD_ADDR_OWVAR 37
14570: PUSH
14571: LD_INT 14
14573: ST_TO_ADDR
// vc_engine := engine_siberite ;
14574: LD_ADDR_OWVAR 39
14578: PUSH
14579: LD_INT 3
14581: ST_TO_ADDR
// vc_control := control_apeman ;
14582: LD_ADDR_OWVAR 38
14586: PUSH
14587: LD_INT 5
14589: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
14590: LD_ADDR_OWVAR 40
14594: PUSH
14595: LD_INT 29
14597: ST_TO_ADDR
// un := CreateVehicle ;
14598: LD_ADDR_VAR 0 2
14602: PUSH
14603: CALL_OW 45
14607: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14608: LD_VAR 0 2
14612: PPUSH
14613: LD_INT 1
14615: PPUSH
14616: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14620: LD_INT 35
14622: PPUSH
14623: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14627: LD_VAR 0 2
14631: PPUSH
14632: LD_INT 22
14634: PUSH
14635: LD_OWVAR 2
14639: PUSH
14640: EMPTY
14641: LIST
14642: LIST
14643: PPUSH
14644: CALL_OW 69
14648: PPUSH
14649: LD_VAR 0 2
14653: PPUSH
14654: CALL_OW 74
14658: PPUSH
14659: CALL_OW 115
// until IsDead ( un ) ;
14663: LD_VAR 0 2
14667: PPUSH
14668: CALL_OW 301
14672: IFFALSE 14620
// end ;
14674: PPOPN 2
14676: END
// every 0 0$1 trigger StreamModeActive and sStu do
14677: LD_EXP 27
14681: PUSH
14682: LD_EXP 66
14686: AND
14687: IFFALSE 14703
14689: GO 14691
14691: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14692: LD_STRING displayStucuk();
14694: PPUSH
14695: CALL_OW 559
// ResetFog ;
14699: CALL_OW 335
// end ;
14703: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14704: LD_EXP 27
14708: PUSH
14709: LD_EXP 59
14713: AND
14714: IFFALSE 14855
14716: GO 14718
14718: DISABLE
14719: LD_INT 0
14721: PPUSH
14722: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14723: LD_ADDR_VAR 0 2
14727: PUSH
14728: LD_INT 22
14730: PUSH
14731: LD_OWVAR 2
14735: PUSH
14736: EMPTY
14737: LIST
14738: LIST
14739: PUSH
14740: LD_INT 21
14742: PUSH
14743: LD_INT 1
14745: PUSH
14746: EMPTY
14747: LIST
14748: LIST
14749: PUSH
14750: EMPTY
14751: LIST
14752: LIST
14753: PPUSH
14754: CALL_OW 69
14758: ST_TO_ADDR
// if not tmp then
14759: LD_VAR 0 2
14763: NOT
14764: IFFALSE 14768
// exit ;
14766: GO 14855
// un := tmp [ rand ( 1 , tmp ) ] ;
14768: LD_ADDR_VAR 0 1
14772: PUSH
14773: LD_VAR 0 2
14777: PUSH
14778: LD_INT 1
14780: PPUSH
14781: LD_VAR 0 2
14785: PPUSH
14786: CALL_OW 12
14790: ARRAY
14791: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14792: LD_VAR 0 1
14796: PPUSH
14797: LD_INT 0
14799: PPUSH
14800: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14804: LD_VAR 0 1
14808: PPUSH
14809: LD_OWVAR 3
14813: PUSH
14814: LD_VAR 0 1
14818: DIFF
14819: PPUSH
14820: LD_VAR 0 1
14824: PPUSH
14825: CALL_OW 74
14829: PPUSH
14830: CALL_OW 115
// wait ( 0 0$20 ) ;
14834: LD_INT 700
14836: PPUSH
14837: CALL_OW 67
// SetSide ( un , your_side ) ;
14841: LD_VAR 0 1
14845: PPUSH
14846: LD_OWVAR 2
14850: PPUSH
14851: CALL_OW 235
// end ;
14855: PPOPN 2
14857: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
14858: LD_EXP 27
14862: PUSH
14863: LD_EXP 60
14867: AND
14868: IFFALSE 14974
14870: GO 14872
14872: DISABLE
14873: LD_INT 0
14875: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14876: LD_ADDR_VAR 0 1
14880: PUSH
14881: LD_INT 22
14883: PUSH
14884: LD_OWVAR 2
14888: PUSH
14889: EMPTY
14890: LIST
14891: LIST
14892: PUSH
14893: LD_INT 2
14895: PUSH
14896: LD_INT 30
14898: PUSH
14899: LD_INT 0
14901: PUSH
14902: EMPTY
14903: LIST
14904: LIST
14905: PUSH
14906: LD_INT 30
14908: PUSH
14909: LD_INT 1
14911: PUSH
14912: EMPTY
14913: LIST
14914: LIST
14915: PUSH
14916: EMPTY
14917: LIST
14918: LIST
14919: LIST
14920: PUSH
14921: EMPTY
14922: LIST
14923: LIST
14924: PPUSH
14925: CALL_OW 69
14929: ST_TO_ADDR
// if not depot then
14930: LD_VAR 0 1
14934: NOT
14935: IFFALSE 14939
// exit ;
14937: GO 14974
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14939: LD_VAR 0 1
14943: PUSH
14944: LD_INT 1
14946: ARRAY
14947: PPUSH
14948: CALL_OW 250
14952: PPUSH
14953: LD_VAR 0 1
14957: PUSH
14958: LD_INT 1
14960: ARRAY
14961: PPUSH
14962: CALL_OW 251
14966: PPUSH
14967: LD_INT 70
14969: PPUSH
14970: CALL_OW 495
// end ;
14974: PPOPN 1
14976: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14977: LD_EXP 27
14981: PUSH
14982: LD_EXP 61
14986: AND
14987: IFFALSE 15198
14989: GO 14991
14991: DISABLE
14992: LD_INT 0
14994: PPUSH
14995: PPUSH
14996: PPUSH
14997: PPUSH
14998: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14999: LD_ADDR_VAR 0 5
15003: PUSH
15004: LD_INT 22
15006: PUSH
15007: LD_OWVAR 2
15011: PUSH
15012: EMPTY
15013: LIST
15014: LIST
15015: PUSH
15016: LD_INT 21
15018: PUSH
15019: LD_INT 1
15021: PUSH
15022: EMPTY
15023: LIST
15024: LIST
15025: PUSH
15026: EMPTY
15027: LIST
15028: LIST
15029: PPUSH
15030: CALL_OW 69
15034: ST_TO_ADDR
// if not tmp then
15035: LD_VAR 0 5
15039: NOT
15040: IFFALSE 15044
// exit ;
15042: GO 15198
// for i in tmp do
15044: LD_ADDR_VAR 0 1
15048: PUSH
15049: LD_VAR 0 5
15053: PUSH
15054: FOR_IN
15055: IFFALSE 15196
// begin d := rand ( 0 , 5 ) ;
15057: LD_ADDR_VAR 0 4
15061: PUSH
15062: LD_INT 0
15064: PPUSH
15065: LD_INT 5
15067: PPUSH
15068: CALL_OW 12
15072: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15073: LD_ADDR_VAR 0 2
15077: PUSH
15078: LD_VAR 0 1
15082: PPUSH
15083: CALL_OW 250
15087: PPUSH
15088: LD_VAR 0 4
15092: PPUSH
15093: LD_INT 3
15095: PPUSH
15096: LD_INT 12
15098: PPUSH
15099: CALL_OW 12
15103: PPUSH
15104: CALL_OW 272
15108: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15109: LD_ADDR_VAR 0 3
15113: PUSH
15114: LD_VAR 0 1
15118: PPUSH
15119: CALL_OW 251
15123: PPUSH
15124: LD_VAR 0 4
15128: PPUSH
15129: LD_INT 3
15131: PPUSH
15132: LD_INT 12
15134: PPUSH
15135: CALL_OW 12
15139: PPUSH
15140: CALL_OW 273
15144: ST_TO_ADDR
// if ValidHex ( x , y ) then
15145: LD_VAR 0 2
15149: PPUSH
15150: LD_VAR 0 3
15154: PPUSH
15155: CALL_OW 488
15159: IFFALSE 15194
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
15161: LD_VAR 0 1
15165: PPUSH
15166: LD_VAR 0 2
15170: PPUSH
15171: LD_VAR 0 3
15175: PPUSH
15176: LD_INT 3
15178: PPUSH
15179: LD_INT 6
15181: PPUSH
15182: CALL_OW 12
15186: PPUSH
15187: LD_INT 1
15189: PPUSH
15190: CALL_OW 483
// end ;
15194: GO 15054
15196: POP
15197: POP
// end ;
15198: PPOPN 5
15200: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
15201: LD_EXP 27
15205: PUSH
15206: LD_EXP 62
15210: AND
15211: IFFALSE 15305
15213: GO 15215
15215: DISABLE
15216: LD_INT 0
15218: PPUSH
15219: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
15220: LD_ADDR_VAR 0 2
15224: PUSH
15225: LD_INT 22
15227: PUSH
15228: LD_OWVAR 2
15232: PUSH
15233: EMPTY
15234: LIST
15235: LIST
15236: PUSH
15237: LD_INT 32
15239: PUSH
15240: LD_INT 1
15242: PUSH
15243: EMPTY
15244: LIST
15245: LIST
15246: PUSH
15247: LD_INT 21
15249: PUSH
15250: LD_INT 2
15252: PUSH
15253: EMPTY
15254: LIST
15255: LIST
15256: PUSH
15257: EMPTY
15258: LIST
15259: LIST
15260: LIST
15261: PPUSH
15262: CALL_OW 69
15266: ST_TO_ADDR
// if not tmp then
15267: LD_VAR 0 2
15271: NOT
15272: IFFALSE 15276
// exit ;
15274: GO 15305
// for i in tmp do
15276: LD_ADDR_VAR 0 1
15280: PUSH
15281: LD_VAR 0 2
15285: PUSH
15286: FOR_IN
15287: IFFALSE 15303
// SetFuel ( i , 0 ) ;
15289: LD_VAR 0 1
15293: PPUSH
15294: LD_INT 0
15296: PPUSH
15297: CALL_OW 240
15301: GO 15286
15303: POP
15304: POP
// end ;
15305: PPOPN 2
15307: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
15308: LD_EXP 27
15312: PUSH
15313: LD_EXP 63
15317: AND
15318: IFFALSE 15384
15320: GO 15322
15322: DISABLE
15323: LD_INT 0
15325: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15326: LD_ADDR_VAR 0 1
15330: PUSH
15331: LD_INT 22
15333: PUSH
15334: LD_OWVAR 2
15338: PUSH
15339: EMPTY
15340: LIST
15341: LIST
15342: PUSH
15343: LD_INT 30
15345: PUSH
15346: LD_INT 29
15348: PUSH
15349: EMPTY
15350: LIST
15351: LIST
15352: PUSH
15353: EMPTY
15354: LIST
15355: LIST
15356: PPUSH
15357: CALL_OW 69
15361: ST_TO_ADDR
// if not tmp then
15362: LD_VAR 0 1
15366: NOT
15367: IFFALSE 15371
// exit ;
15369: GO 15384
// DestroyUnit ( tmp [ 1 ] ) ;
15371: LD_VAR 0 1
15375: PUSH
15376: LD_INT 1
15378: ARRAY
15379: PPUSH
15380: CALL_OW 65
// end ;
15384: PPOPN 1
15386: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
15387: LD_EXP 27
15391: PUSH
15392: LD_EXP 65
15396: AND
15397: IFFALSE 15526
15399: GO 15401
15401: DISABLE
15402: LD_INT 0
15404: PPUSH
// begin uc_side := 0 ;
15405: LD_ADDR_OWVAR 20
15409: PUSH
15410: LD_INT 0
15412: ST_TO_ADDR
// uc_nation := nation_arabian ;
15413: LD_ADDR_OWVAR 21
15417: PUSH
15418: LD_INT 2
15420: ST_TO_ADDR
// hc_gallery :=  ;
15421: LD_ADDR_OWVAR 33
15425: PUSH
15426: LD_STRING 
15428: ST_TO_ADDR
// hc_name :=  ;
15429: LD_ADDR_OWVAR 26
15433: PUSH
15434: LD_STRING 
15436: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
15437: LD_INT 1
15439: PPUSH
15440: LD_INT 11
15442: PPUSH
15443: LD_INT 10
15445: PPUSH
15446: CALL_OW 380
// un := CreateHuman ;
15450: LD_ADDR_VAR 0 1
15454: PUSH
15455: CALL_OW 44
15459: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15460: LD_VAR 0 1
15464: PPUSH
15465: LD_INT 1
15467: PPUSH
15468: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15472: LD_INT 35
15474: PPUSH
15475: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15479: LD_VAR 0 1
15483: PPUSH
15484: LD_INT 22
15486: PUSH
15487: LD_OWVAR 2
15491: PUSH
15492: EMPTY
15493: LIST
15494: LIST
15495: PPUSH
15496: CALL_OW 69
15500: PPUSH
15501: LD_VAR 0 1
15505: PPUSH
15506: CALL_OW 74
15510: PPUSH
15511: CALL_OW 115
// until IsDead ( un ) ;
15515: LD_VAR 0 1
15519: PPUSH
15520: CALL_OW 301
15524: IFFALSE 15472
// end ;
15526: PPOPN 1
15528: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15529: LD_EXP 27
15533: PUSH
15534: LD_EXP 67
15538: AND
15539: IFFALSE 15551
15541: GO 15543
15543: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15544: LD_STRING earthquake(getX(game), 0, 32)
15546: PPUSH
15547: CALL_OW 559
15551: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15552: LD_EXP 27
15556: PUSH
15557: LD_EXP 68
15561: AND
15562: IFFALSE 15653
15564: GO 15566
15566: DISABLE
15567: LD_INT 0
15569: PPUSH
// begin enable ;
15570: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15571: LD_ADDR_VAR 0 1
15575: PUSH
15576: LD_INT 22
15578: PUSH
15579: LD_OWVAR 2
15583: PUSH
15584: EMPTY
15585: LIST
15586: LIST
15587: PUSH
15588: LD_INT 21
15590: PUSH
15591: LD_INT 2
15593: PUSH
15594: EMPTY
15595: LIST
15596: LIST
15597: PUSH
15598: LD_INT 33
15600: PUSH
15601: LD_INT 3
15603: PUSH
15604: EMPTY
15605: LIST
15606: LIST
15607: PUSH
15608: EMPTY
15609: LIST
15610: LIST
15611: LIST
15612: PPUSH
15613: CALL_OW 69
15617: ST_TO_ADDR
// if not tmp then
15618: LD_VAR 0 1
15622: NOT
15623: IFFALSE 15627
// exit ;
15625: GO 15653
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15627: LD_VAR 0 1
15631: PUSH
15632: LD_INT 1
15634: PPUSH
15635: LD_VAR 0 1
15639: PPUSH
15640: CALL_OW 12
15644: ARRAY
15645: PPUSH
15646: LD_INT 1
15648: PPUSH
15649: CALL_OW 234
// end ;
15653: PPOPN 1
15655: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15656: LD_EXP 27
15660: PUSH
15661: LD_EXP 69
15665: AND
15666: IFFALSE 15807
15668: GO 15670
15670: DISABLE
15671: LD_INT 0
15673: PPUSH
15674: PPUSH
15675: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15676: LD_ADDR_VAR 0 3
15680: PUSH
15681: LD_INT 22
15683: PUSH
15684: LD_OWVAR 2
15688: PUSH
15689: EMPTY
15690: LIST
15691: LIST
15692: PUSH
15693: LD_INT 25
15695: PUSH
15696: LD_INT 1
15698: PUSH
15699: EMPTY
15700: LIST
15701: LIST
15702: PUSH
15703: EMPTY
15704: LIST
15705: LIST
15706: PPUSH
15707: CALL_OW 69
15711: ST_TO_ADDR
// if not tmp then
15712: LD_VAR 0 3
15716: NOT
15717: IFFALSE 15721
// exit ;
15719: GO 15807
// un := tmp [ rand ( 1 , tmp ) ] ;
15721: LD_ADDR_VAR 0 2
15725: PUSH
15726: LD_VAR 0 3
15730: PUSH
15731: LD_INT 1
15733: PPUSH
15734: LD_VAR 0 3
15738: PPUSH
15739: CALL_OW 12
15743: ARRAY
15744: ST_TO_ADDR
// if Crawls ( un ) then
15745: LD_VAR 0 2
15749: PPUSH
15750: CALL_OW 318
15754: IFFALSE 15765
// ComWalk ( un ) ;
15756: LD_VAR 0 2
15760: PPUSH
15761: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15765: LD_VAR 0 2
15769: PPUSH
15770: LD_INT 9
15772: PPUSH
15773: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15777: LD_INT 28
15779: PPUSH
15780: LD_OWVAR 2
15784: PPUSH
15785: LD_INT 2
15787: PPUSH
15788: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15792: LD_INT 29
15794: PPUSH
15795: LD_OWVAR 2
15799: PPUSH
15800: LD_INT 2
15802: PPUSH
15803: CALL_OW 322
// end ;
15807: PPOPN 3
15809: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15810: LD_EXP 27
15814: PUSH
15815: LD_EXP 70
15819: AND
15820: IFFALSE 15931
15822: GO 15824
15824: DISABLE
15825: LD_INT 0
15827: PPUSH
15828: PPUSH
15829: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15830: LD_ADDR_VAR 0 3
15834: PUSH
15835: LD_INT 22
15837: PUSH
15838: LD_OWVAR 2
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: PUSH
15847: LD_INT 25
15849: PUSH
15850: LD_INT 1
15852: PUSH
15853: EMPTY
15854: LIST
15855: LIST
15856: PUSH
15857: EMPTY
15858: LIST
15859: LIST
15860: PPUSH
15861: CALL_OW 69
15865: ST_TO_ADDR
// if not tmp then
15866: LD_VAR 0 3
15870: NOT
15871: IFFALSE 15875
// exit ;
15873: GO 15931
// un := tmp [ rand ( 1 , tmp ) ] ;
15875: LD_ADDR_VAR 0 2
15879: PUSH
15880: LD_VAR 0 3
15884: PUSH
15885: LD_INT 1
15887: PPUSH
15888: LD_VAR 0 3
15892: PPUSH
15893: CALL_OW 12
15897: ARRAY
15898: ST_TO_ADDR
// if Crawls ( un ) then
15899: LD_VAR 0 2
15903: PPUSH
15904: CALL_OW 318
15908: IFFALSE 15919
// ComWalk ( un ) ;
15910: LD_VAR 0 2
15914: PPUSH
15915: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15919: LD_VAR 0 2
15923: PPUSH
15924: LD_INT 8
15926: PPUSH
15927: CALL_OW 336
// end ;
15931: PPOPN 3
15933: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15934: LD_EXP 27
15938: PUSH
15939: LD_EXP 71
15943: AND
15944: IFFALSE 16088
15946: GO 15948
15948: DISABLE
15949: LD_INT 0
15951: PPUSH
15952: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15953: LD_ADDR_VAR 0 2
15957: PUSH
15958: LD_INT 22
15960: PUSH
15961: LD_OWVAR 2
15965: PUSH
15966: EMPTY
15967: LIST
15968: LIST
15969: PUSH
15970: LD_INT 21
15972: PUSH
15973: LD_INT 2
15975: PUSH
15976: EMPTY
15977: LIST
15978: LIST
15979: PUSH
15980: LD_INT 2
15982: PUSH
15983: LD_INT 34
15985: PUSH
15986: LD_INT 12
15988: PUSH
15989: EMPTY
15990: LIST
15991: LIST
15992: PUSH
15993: LD_INT 34
15995: PUSH
15996: LD_INT 51
15998: PUSH
15999: EMPTY
16000: LIST
16001: LIST
16002: PUSH
16003: LD_INT 34
16005: PUSH
16006: LD_INT 32
16008: PUSH
16009: EMPTY
16010: LIST
16011: LIST
16012: PUSH
16013: EMPTY
16014: LIST
16015: LIST
16016: LIST
16017: LIST
16018: PUSH
16019: EMPTY
16020: LIST
16021: LIST
16022: LIST
16023: PPUSH
16024: CALL_OW 69
16028: ST_TO_ADDR
// if not tmp then
16029: LD_VAR 0 2
16033: NOT
16034: IFFALSE 16038
// exit ;
16036: GO 16088
// for i in tmp do
16038: LD_ADDR_VAR 0 1
16042: PUSH
16043: LD_VAR 0 2
16047: PUSH
16048: FOR_IN
16049: IFFALSE 16086
// if GetCargo ( i , mat_artifact ) = 0 then
16051: LD_VAR 0 1
16055: PPUSH
16056: LD_INT 4
16058: PPUSH
16059: CALL_OW 289
16063: PUSH
16064: LD_INT 0
16066: EQUAL
16067: IFFALSE 16084
// SetCargo ( i , mat_siberit , 100 ) ;
16069: LD_VAR 0 1
16073: PPUSH
16074: LD_INT 3
16076: PPUSH
16077: LD_INT 100
16079: PPUSH
16080: CALL_OW 290
16084: GO 16048
16086: POP
16087: POP
// end ;
16088: PPOPN 2
16090: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16091: LD_EXP 27
16095: PUSH
16096: LD_EXP 72
16100: AND
16101: IFFALSE 16284
16103: GO 16105
16105: DISABLE
16106: LD_INT 0
16108: PPUSH
16109: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16110: LD_ADDR_VAR 0 2
16114: PUSH
16115: LD_INT 22
16117: PUSH
16118: LD_OWVAR 2
16122: PUSH
16123: EMPTY
16124: LIST
16125: LIST
16126: PPUSH
16127: CALL_OW 69
16131: ST_TO_ADDR
// if not tmp then
16132: LD_VAR 0 2
16136: NOT
16137: IFFALSE 16141
// exit ;
16139: GO 16284
// for i := 1 to 2 do
16141: LD_ADDR_VAR 0 1
16145: PUSH
16146: DOUBLE
16147: LD_INT 1
16149: DEC
16150: ST_TO_ADDR
16151: LD_INT 2
16153: PUSH
16154: FOR_TO
16155: IFFALSE 16282
// begin uc_side := your_side ;
16157: LD_ADDR_OWVAR 20
16161: PUSH
16162: LD_OWVAR 2
16166: ST_TO_ADDR
// uc_nation := nation_american ;
16167: LD_ADDR_OWVAR 21
16171: PUSH
16172: LD_INT 1
16174: ST_TO_ADDR
// vc_chassis := us_morphling ;
16175: LD_ADDR_OWVAR 37
16179: PUSH
16180: LD_INT 5
16182: ST_TO_ADDR
// vc_engine := engine_siberite ;
16183: LD_ADDR_OWVAR 39
16187: PUSH
16188: LD_INT 3
16190: ST_TO_ADDR
// vc_control := control_computer ;
16191: LD_ADDR_OWVAR 38
16195: PUSH
16196: LD_INT 3
16198: ST_TO_ADDR
// vc_weapon := us_double_laser ;
16199: LD_ADDR_OWVAR 40
16203: PUSH
16204: LD_INT 10
16206: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
16207: LD_VAR 0 2
16211: PUSH
16212: LD_INT 1
16214: ARRAY
16215: PPUSH
16216: CALL_OW 310
16220: NOT
16221: IFFALSE 16268
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
16223: CALL_OW 45
16227: PPUSH
16228: LD_VAR 0 2
16232: PUSH
16233: LD_INT 1
16235: ARRAY
16236: PPUSH
16237: CALL_OW 250
16241: PPUSH
16242: LD_VAR 0 2
16246: PUSH
16247: LD_INT 1
16249: ARRAY
16250: PPUSH
16251: CALL_OW 251
16255: PPUSH
16256: LD_INT 12
16258: PPUSH
16259: LD_INT 1
16261: PPUSH
16262: CALL_OW 50
16266: GO 16280
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16268: CALL_OW 45
16272: PPUSH
16273: LD_INT 1
16275: PPUSH
16276: CALL_OW 51
// end ;
16280: GO 16154
16282: POP
16283: POP
// end ;
16284: PPOPN 2
16286: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
16287: LD_EXP 27
16291: PUSH
16292: LD_EXP 73
16296: AND
16297: IFFALSE 16519
16299: GO 16301
16301: DISABLE
16302: LD_INT 0
16304: PPUSH
16305: PPUSH
16306: PPUSH
16307: PPUSH
16308: PPUSH
16309: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16310: LD_ADDR_VAR 0 6
16314: PUSH
16315: LD_INT 22
16317: PUSH
16318: LD_OWVAR 2
16322: PUSH
16323: EMPTY
16324: LIST
16325: LIST
16326: PUSH
16327: LD_INT 21
16329: PUSH
16330: LD_INT 1
16332: PUSH
16333: EMPTY
16334: LIST
16335: LIST
16336: PUSH
16337: LD_INT 3
16339: PUSH
16340: LD_INT 23
16342: PUSH
16343: LD_INT 0
16345: PUSH
16346: EMPTY
16347: LIST
16348: LIST
16349: PUSH
16350: EMPTY
16351: LIST
16352: LIST
16353: PUSH
16354: EMPTY
16355: LIST
16356: LIST
16357: LIST
16358: PPUSH
16359: CALL_OW 69
16363: ST_TO_ADDR
// if not tmp then
16364: LD_VAR 0 6
16368: NOT
16369: IFFALSE 16373
// exit ;
16371: GO 16519
// s1 := rand ( 1 , 4 ) ;
16373: LD_ADDR_VAR 0 2
16377: PUSH
16378: LD_INT 1
16380: PPUSH
16381: LD_INT 4
16383: PPUSH
16384: CALL_OW 12
16388: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
16389: LD_ADDR_VAR 0 4
16393: PUSH
16394: LD_VAR 0 6
16398: PUSH
16399: LD_INT 1
16401: ARRAY
16402: PPUSH
16403: LD_VAR 0 2
16407: PPUSH
16408: CALL_OW 259
16412: ST_TO_ADDR
// if s1 = 1 then
16413: LD_VAR 0 2
16417: PUSH
16418: LD_INT 1
16420: EQUAL
16421: IFFALSE 16441
// s2 := rand ( 2 , 4 ) else
16423: LD_ADDR_VAR 0 3
16427: PUSH
16428: LD_INT 2
16430: PPUSH
16431: LD_INT 4
16433: PPUSH
16434: CALL_OW 12
16438: ST_TO_ADDR
16439: GO 16449
// s2 := 1 ;
16441: LD_ADDR_VAR 0 3
16445: PUSH
16446: LD_INT 1
16448: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
16449: LD_ADDR_VAR 0 5
16453: PUSH
16454: LD_VAR 0 6
16458: PUSH
16459: LD_INT 1
16461: ARRAY
16462: PPUSH
16463: LD_VAR 0 3
16467: PPUSH
16468: CALL_OW 259
16472: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
16473: LD_VAR 0 6
16477: PUSH
16478: LD_INT 1
16480: ARRAY
16481: PPUSH
16482: LD_VAR 0 2
16486: PPUSH
16487: LD_VAR 0 5
16491: PPUSH
16492: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16496: LD_VAR 0 6
16500: PUSH
16501: LD_INT 1
16503: ARRAY
16504: PPUSH
16505: LD_VAR 0 3
16509: PPUSH
16510: LD_VAR 0 4
16514: PPUSH
16515: CALL_OW 237
// end ;
16519: PPOPN 6
16521: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16522: LD_EXP 27
16526: PUSH
16527: LD_EXP 74
16531: AND
16532: IFFALSE 16611
16534: GO 16536
16536: DISABLE
16537: LD_INT 0
16539: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16540: LD_ADDR_VAR 0 1
16544: PUSH
16545: LD_INT 22
16547: PUSH
16548: LD_OWVAR 2
16552: PUSH
16553: EMPTY
16554: LIST
16555: LIST
16556: PUSH
16557: LD_INT 30
16559: PUSH
16560: LD_INT 3
16562: PUSH
16563: EMPTY
16564: LIST
16565: LIST
16566: PUSH
16567: EMPTY
16568: LIST
16569: LIST
16570: PPUSH
16571: CALL_OW 69
16575: ST_TO_ADDR
// if not tmp then
16576: LD_VAR 0 1
16580: NOT
16581: IFFALSE 16585
// exit ;
16583: GO 16611
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16585: LD_VAR 0 1
16589: PUSH
16590: LD_INT 1
16592: PPUSH
16593: LD_VAR 0 1
16597: PPUSH
16598: CALL_OW 12
16602: ARRAY
16603: PPUSH
16604: LD_INT 1
16606: PPUSH
16607: CALL_OW 234
// end ;
16611: PPOPN 1
16613: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
16614: LD_EXP 27
16618: PUSH
16619: LD_EXP 75
16623: AND
16624: IFFALSE 16736
16626: GO 16628
16628: DISABLE
16629: LD_INT 0
16631: PPUSH
16632: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
16633: LD_ADDR_VAR 0 2
16637: PUSH
16638: LD_INT 22
16640: PUSH
16641: LD_OWVAR 2
16645: PUSH
16646: EMPTY
16647: LIST
16648: LIST
16649: PUSH
16650: LD_INT 2
16652: PUSH
16653: LD_INT 30
16655: PUSH
16656: LD_INT 27
16658: PUSH
16659: EMPTY
16660: LIST
16661: LIST
16662: PUSH
16663: LD_INT 30
16665: PUSH
16666: LD_INT 26
16668: PUSH
16669: EMPTY
16670: LIST
16671: LIST
16672: PUSH
16673: LD_INT 30
16675: PUSH
16676: LD_INT 28
16678: PUSH
16679: EMPTY
16680: LIST
16681: LIST
16682: PUSH
16683: EMPTY
16684: LIST
16685: LIST
16686: LIST
16687: LIST
16688: PUSH
16689: EMPTY
16690: LIST
16691: LIST
16692: PPUSH
16693: CALL_OW 69
16697: ST_TO_ADDR
// if not tmp then
16698: LD_VAR 0 2
16702: NOT
16703: IFFALSE 16707
// exit ;
16705: GO 16736
// for i in tmp do
16707: LD_ADDR_VAR 0 1
16711: PUSH
16712: LD_VAR 0 2
16716: PUSH
16717: FOR_IN
16718: IFFALSE 16734
// SetLives ( i , 1 ) ;
16720: LD_VAR 0 1
16724: PPUSH
16725: LD_INT 1
16727: PPUSH
16728: CALL_OW 234
16732: GO 16717
16734: POP
16735: POP
// end ;
16736: PPOPN 2
16738: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16739: LD_EXP 27
16743: PUSH
16744: LD_EXP 76
16748: AND
16749: IFFALSE 17023
16751: GO 16753
16753: DISABLE
16754: LD_INT 0
16756: PPUSH
16757: PPUSH
16758: PPUSH
// begin i := rand ( 1 , 7 ) ;
16759: LD_ADDR_VAR 0 1
16763: PUSH
16764: LD_INT 1
16766: PPUSH
16767: LD_INT 7
16769: PPUSH
16770: CALL_OW 12
16774: ST_TO_ADDR
// case i of 1 :
16775: LD_VAR 0 1
16779: PUSH
16780: LD_INT 1
16782: DOUBLE
16783: EQUAL
16784: IFTRUE 16788
16786: GO 16798
16788: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16789: LD_STRING earthquake(getX(game), 0, 32)
16791: PPUSH
16792: CALL_OW 559
16796: GO 17023
16798: LD_INT 2
16800: DOUBLE
16801: EQUAL
16802: IFTRUE 16806
16804: GO 16820
16806: POP
// begin ToLua ( displayStucuk(); ) ;
16807: LD_STRING displayStucuk();
16809: PPUSH
16810: CALL_OW 559
// ResetFog ;
16814: CALL_OW 335
// end ; 3 :
16818: GO 17023
16820: LD_INT 3
16822: DOUBLE
16823: EQUAL
16824: IFTRUE 16828
16826: GO 16932
16828: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16829: LD_ADDR_VAR 0 2
16833: PUSH
16834: LD_INT 22
16836: PUSH
16837: LD_OWVAR 2
16841: PUSH
16842: EMPTY
16843: LIST
16844: LIST
16845: PUSH
16846: LD_INT 25
16848: PUSH
16849: LD_INT 1
16851: PUSH
16852: EMPTY
16853: LIST
16854: LIST
16855: PUSH
16856: EMPTY
16857: LIST
16858: LIST
16859: PPUSH
16860: CALL_OW 69
16864: ST_TO_ADDR
// if not tmp then
16865: LD_VAR 0 2
16869: NOT
16870: IFFALSE 16874
// exit ;
16872: GO 17023
// un := tmp [ rand ( 1 , tmp ) ] ;
16874: LD_ADDR_VAR 0 3
16878: PUSH
16879: LD_VAR 0 2
16883: PUSH
16884: LD_INT 1
16886: PPUSH
16887: LD_VAR 0 2
16891: PPUSH
16892: CALL_OW 12
16896: ARRAY
16897: ST_TO_ADDR
// if Crawls ( un ) then
16898: LD_VAR 0 3
16902: PPUSH
16903: CALL_OW 318
16907: IFFALSE 16918
// ComWalk ( un ) ;
16909: LD_VAR 0 3
16913: PPUSH
16914: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16918: LD_VAR 0 3
16922: PPUSH
16923: LD_INT 8
16925: PPUSH
16926: CALL_OW 336
// end ; 4 :
16930: GO 17023
16932: LD_INT 4
16934: DOUBLE
16935: EQUAL
16936: IFTRUE 16940
16938: GO 17001
16940: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16941: LD_ADDR_VAR 0 2
16945: PUSH
16946: LD_INT 22
16948: PUSH
16949: LD_OWVAR 2
16953: PUSH
16954: EMPTY
16955: LIST
16956: LIST
16957: PUSH
16958: LD_INT 30
16960: PUSH
16961: LD_INT 29
16963: PUSH
16964: EMPTY
16965: LIST
16966: LIST
16967: PUSH
16968: EMPTY
16969: LIST
16970: LIST
16971: PPUSH
16972: CALL_OW 69
16976: ST_TO_ADDR
// if not tmp then
16977: LD_VAR 0 2
16981: NOT
16982: IFFALSE 16986
// exit ;
16984: GO 17023
// DestroyUnit ( tmp [ 1 ] ) ;
16986: LD_VAR 0 2
16990: PUSH
16991: LD_INT 1
16993: ARRAY
16994: PPUSH
16995: CALL_OW 65
// end ; 5 .. 7 :
16999: GO 17023
17001: LD_INT 5
17003: DOUBLE
17004: GREATEREQUAL
17005: IFFALSE 17013
17007: LD_INT 7
17009: DOUBLE
17010: LESSEQUAL
17011: IFTRUE 17015
17013: GO 17022
17015: POP
// StreamSibBomb ; end ;
17016: CALL 13273 0 0
17020: GO 17023
17022: POP
// end ;
17023: PPOPN 3
17025: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17026: LD_EXP 27
17030: PUSH
17031: LD_EXP 77
17035: AND
17036: IFFALSE 17192
17038: GO 17040
17040: DISABLE
17041: LD_INT 0
17043: PPUSH
17044: PPUSH
17045: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17046: LD_ADDR_VAR 0 2
17050: PUSH
17051: LD_INT 81
17053: PUSH
17054: LD_OWVAR 2
17058: PUSH
17059: EMPTY
17060: LIST
17061: LIST
17062: PUSH
17063: LD_INT 2
17065: PUSH
17066: LD_INT 21
17068: PUSH
17069: LD_INT 1
17071: PUSH
17072: EMPTY
17073: LIST
17074: LIST
17075: PUSH
17076: LD_INT 21
17078: PUSH
17079: LD_INT 2
17081: PUSH
17082: EMPTY
17083: LIST
17084: LIST
17085: PUSH
17086: EMPTY
17087: LIST
17088: LIST
17089: LIST
17090: PUSH
17091: EMPTY
17092: LIST
17093: LIST
17094: PPUSH
17095: CALL_OW 69
17099: ST_TO_ADDR
// if not tmp then
17100: LD_VAR 0 2
17104: NOT
17105: IFFALSE 17109
// exit ;
17107: GO 17192
// p := 0 ;
17109: LD_ADDR_VAR 0 3
17113: PUSH
17114: LD_INT 0
17116: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17117: LD_INT 35
17119: PPUSH
17120: CALL_OW 67
// p := p + 1 ;
17124: LD_ADDR_VAR 0 3
17128: PUSH
17129: LD_VAR 0 3
17133: PUSH
17134: LD_INT 1
17136: PLUS
17137: ST_TO_ADDR
// for i in tmp do
17138: LD_ADDR_VAR 0 1
17142: PUSH
17143: LD_VAR 0 2
17147: PUSH
17148: FOR_IN
17149: IFFALSE 17180
// if GetLives ( i ) < 1000 then
17151: LD_VAR 0 1
17155: PPUSH
17156: CALL_OW 256
17160: PUSH
17161: LD_INT 1000
17163: LESS
17164: IFFALSE 17178
// SetLives ( i , 1000 ) ;
17166: LD_VAR 0 1
17170: PPUSH
17171: LD_INT 1000
17173: PPUSH
17174: CALL_OW 234
17178: GO 17148
17180: POP
17181: POP
// until p > 20 ;
17182: LD_VAR 0 3
17186: PUSH
17187: LD_INT 20
17189: GREATER
17190: IFFALSE 17117
// end ;
17192: PPOPN 3
17194: END
// every 0 0$1 trigger StreamModeActive and sTime do
17195: LD_EXP 27
17199: PUSH
17200: LD_EXP 78
17204: AND
17205: IFFALSE 17240
17207: GO 17209
17209: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
17210: LD_INT 28
17212: PPUSH
17213: LD_OWVAR 2
17217: PPUSH
17218: LD_INT 2
17220: PPUSH
17221: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
17225: LD_INT 30
17227: PPUSH
17228: LD_OWVAR 2
17232: PPUSH
17233: LD_INT 2
17235: PPUSH
17236: CALL_OW 322
// end ;
17240: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
17241: LD_EXP 27
17245: PUSH
17246: LD_EXP 79
17250: AND
17251: IFFALSE 17372
17253: GO 17255
17255: DISABLE
17256: LD_INT 0
17258: PPUSH
17259: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17260: LD_ADDR_VAR 0 2
17264: PUSH
17265: LD_INT 22
17267: PUSH
17268: LD_OWVAR 2
17272: PUSH
17273: EMPTY
17274: LIST
17275: LIST
17276: PUSH
17277: LD_INT 21
17279: PUSH
17280: LD_INT 1
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: PUSH
17287: LD_INT 3
17289: PUSH
17290: LD_INT 23
17292: PUSH
17293: LD_INT 0
17295: PUSH
17296: EMPTY
17297: LIST
17298: LIST
17299: PUSH
17300: EMPTY
17301: LIST
17302: LIST
17303: PUSH
17304: EMPTY
17305: LIST
17306: LIST
17307: LIST
17308: PPUSH
17309: CALL_OW 69
17313: ST_TO_ADDR
// if not tmp then
17314: LD_VAR 0 2
17318: NOT
17319: IFFALSE 17323
// exit ;
17321: GO 17372
// for i in tmp do
17323: LD_ADDR_VAR 0 1
17327: PUSH
17328: LD_VAR 0 2
17332: PUSH
17333: FOR_IN
17334: IFFALSE 17370
// begin if Crawls ( i ) then
17336: LD_VAR 0 1
17340: PPUSH
17341: CALL_OW 318
17345: IFFALSE 17356
// ComWalk ( i ) ;
17347: LD_VAR 0 1
17351: PPUSH
17352: CALL_OW 138
// SetClass ( i , 2 ) ;
17356: LD_VAR 0 1
17360: PPUSH
17361: LD_INT 2
17363: PPUSH
17364: CALL_OW 336
// end ;
17368: GO 17333
17370: POP
17371: POP
// end ;
17372: PPOPN 2
17374: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
17375: LD_EXP 27
17379: PUSH
17380: LD_EXP 80
17384: AND
17385: IFFALSE 17666
17387: GO 17389
17389: DISABLE
17390: LD_INT 0
17392: PPUSH
17393: PPUSH
17394: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
17395: LD_OWVAR 2
17399: PPUSH
17400: LD_INT 9
17402: PPUSH
17403: LD_INT 1
17405: PPUSH
17406: LD_INT 1
17408: PPUSH
17409: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
17413: LD_INT 9
17415: PPUSH
17416: LD_OWVAR 2
17420: PPUSH
17421: CALL_OW 343
// uc_side := 9 ;
17425: LD_ADDR_OWVAR 20
17429: PUSH
17430: LD_INT 9
17432: ST_TO_ADDR
// uc_nation := 2 ;
17433: LD_ADDR_OWVAR 21
17437: PUSH
17438: LD_INT 2
17440: ST_TO_ADDR
// hc_name := Dark Warrior ;
17441: LD_ADDR_OWVAR 26
17445: PUSH
17446: LD_STRING Dark Warrior
17448: ST_TO_ADDR
// hc_gallery :=  ;
17449: LD_ADDR_OWVAR 33
17453: PUSH
17454: LD_STRING 
17456: ST_TO_ADDR
// hc_noskilllimit := true ;
17457: LD_ADDR_OWVAR 76
17461: PUSH
17462: LD_INT 1
17464: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
17465: LD_ADDR_OWVAR 31
17469: PUSH
17470: LD_INT 30
17472: PUSH
17473: LD_INT 30
17475: PUSH
17476: LD_INT 30
17478: PUSH
17479: LD_INT 30
17481: PUSH
17482: EMPTY
17483: LIST
17484: LIST
17485: LIST
17486: LIST
17487: ST_TO_ADDR
// un := CreateHuman ;
17488: LD_ADDR_VAR 0 3
17492: PUSH
17493: CALL_OW 44
17497: ST_TO_ADDR
// hc_noskilllimit := false ;
17498: LD_ADDR_OWVAR 76
17502: PUSH
17503: LD_INT 0
17505: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17506: LD_VAR 0 3
17510: PPUSH
17511: LD_INT 1
17513: PPUSH
17514: CALL_OW 51
// p := 0 ;
17518: LD_ADDR_VAR 0 2
17522: PUSH
17523: LD_INT 0
17525: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17526: LD_INT 35
17528: PPUSH
17529: CALL_OW 67
// p := p + 1 ;
17533: LD_ADDR_VAR 0 2
17537: PUSH
17538: LD_VAR 0 2
17542: PUSH
17543: LD_INT 1
17545: PLUS
17546: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17547: LD_VAR 0 3
17551: PPUSH
17552: CALL_OW 256
17556: PUSH
17557: LD_INT 1000
17559: LESS
17560: IFFALSE 17574
// SetLives ( un , 1000 ) ;
17562: LD_VAR 0 3
17566: PPUSH
17567: LD_INT 1000
17569: PPUSH
17570: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
17574: LD_VAR 0 3
17578: PPUSH
17579: LD_INT 81
17581: PUSH
17582: LD_OWVAR 2
17586: PUSH
17587: EMPTY
17588: LIST
17589: LIST
17590: PUSH
17591: LD_INT 91
17593: PUSH
17594: LD_VAR 0 3
17598: PUSH
17599: LD_INT 30
17601: PUSH
17602: EMPTY
17603: LIST
17604: LIST
17605: LIST
17606: PUSH
17607: EMPTY
17608: LIST
17609: LIST
17610: PPUSH
17611: CALL_OW 69
17615: PPUSH
17616: LD_VAR 0 3
17620: PPUSH
17621: CALL_OW 74
17625: PPUSH
17626: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
17630: LD_VAR 0 2
17634: PUSH
17635: LD_INT 60
17637: GREATER
17638: PUSH
17639: LD_VAR 0 3
17643: PPUSH
17644: CALL_OW 301
17648: OR
17649: IFFALSE 17526
// if un then
17651: LD_VAR 0 3
17655: IFFALSE 17666
// RemoveUnit ( un ) ;
17657: LD_VAR 0 3
17661: PPUSH
17662: CALL_OW 64
// end ;
17666: PPOPN 3
17668: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
17669: LD_INT 0
17671: PPUSH
17672: PPUSH
17673: PPUSH
17674: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17675: LD_ADDR_VAR 0 4
17679: PUSH
17680: LD_INT 22
17682: PUSH
17683: LD_OWVAR 2
17687: PUSH
17688: EMPTY
17689: LIST
17690: LIST
17691: PUSH
17692: LD_INT 2
17694: PUSH
17695: LD_INT 30
17697: PUSH
17698: LD_INT 0
17700: PUSH
17701: EMPTY
17702: LIST
17703: LIST
17704: PUSH
17705: LD_INT 30
17707: PUSH
17708: LD_INT 1
17710: PUSH
17711: EMPTY
17712: LIST
17713: LIST
17714: PUSH
17715: EMPTY
17716: LIST
17717: LIST
17718: LIST
17719: PUSH
17720: EMPTY
17721: LIST
17722: LIST
17723: PPUSH
17724: CALL_OW 69
17728: ST_TO_ADDR
// if not tmp then
17729: LD_VAR 0 4
17733: NOT
17734: IFFALSE 17738
// exit ;
17736: GO 17797
// for i in tmp do
17738: LD_ADDR_VAR 0 2
17742: PUSH
17743: LD_VAR 0 4
17747: PUSH
17748: FOR_IN
17749: IFFALSE 17795
// for j = 1 to 3 do
17751: LD_ADDR_VAR 0 3
17755: PUSH
17756: DOUBLE
17757: LD_INT 1
17759: DEC
17760: ST_TO_ADDR
17761: LD_INT 3
17763: PUSH
17764: FOR_TO
17765: IFFALSE 17791
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
17767: LD_VAR 0 2
17771: PPUSH
17772: CALL_OW 274
17776: PPUSH
17777: LD_VAR 0 3
17781: PPUSH
17782: LD_INT 99999
17784: PPUSH
17785: CALL_OW 277
17789: GO 17764
17791: POP
17792: POP
17793: GO 17748
17795: POP
17796: POP
// end ;
17797: LD_VAR 0 1
17801: RET
// export function hHackSetLevel10 ; var i , j ; begin
17802: LD_INT 0
17804: PPUSH
17805: PPUSH
17806: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17807: LD_ADDR_VAR 0 2
17811: PUSH
17812: LD_INT 21
17814: PUSH
17815: LD_INT 1
17817: PUSH
17818: EMPTY
17819: LIST
17820: LIST
17821: PPUSH
17822: CALL_OW 69
17826: PUSH
17827: FOR_IN
17828: IFFALSE 17880
// if IsSelected ( i ) then
17830: LD_VAR 0 2
17834: PPUSH
17835: CALL_OW 306
17839: IFFALSE 17878
// begin for j := 1 to 4 do
17841: LD_ADDR_VAR 0 3
17845: PUSH
17846: DOUBLE
17847: LD_INT 1
17849: DEC
17850: ST_TO_ADDR
17851: LD_INT 4
17853: PUSH
17854: FOR_TO
17855: IFFALSE 17876
// SetSkill ( i , j , 10 ) ;
17857: LD_VAR 0 2
17861: PPUSH
17862: LD_VAR 0 3
17866: PPUSH
17867: LD_INT 10
17869: PPUSH
17870: CALL_OW 237
17874: GO 17854
17876: POP
17877: POP
// end ;
17878: GO 17827
17880: POP
17881: POP
// end ;
17882: LD_VAR 0 1
17886: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
17887: LD_INT 0
17889: PPUSH
17890: PPUSH
17891: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
17892: LD_ADDR_VAR 0 2
17896: PUSH
17897: LD_INT 22
17899: PUSH
17900: LD_OWVAR 2
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: PUSH
17909: LD_INT 21
17911: PUSH
17912: LD_INT 1
17914: PUSH
17915: EMPTY
17916: LIST
17917: LIST
17918: PUSH
17919: EMPTY
17920: LIST
17921: LIST
17922: PPUSH
17923: CALL_OW 69
17927: PUSH
17928: FOR_IN
17929: IFFALSE 17970
// begin for j := 1 to 4 do
17931: LD_ADDR_VAR 0 3
17935: PUSH
17936: DOUBLE
17937: LD_INT 1
17939: DEC
17940: ST_TO_ADDR
17941: LD_INT 4
17943: PUSH
17944: FOR_TO
17945: IFFALSE 17966
// SetSkill ( i , j , 10 ) ;
17947: LD_VAR 0 2
17951: PPUSH
17952: LD_VAR 0 3
17956: PPUSH
17957: LD_INT 10
17959: PPUSH
17960: CALL_OW 237
17964: GO 17944
17966: POP
17967: POP
// end ;
17968: GO 17928
17970: POP
17971: POP
// end ;
17972: LD_VAR 0 1
17976: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
17977: LD_INT 0
17979: PPUSH
// uc_side := your_side ;
17980: LD_ADDR_OWVAR 20
17984: PUSH
17985: LD_OWVAR 2
17989: ST_TO_ADDR
// uc_nation := nation ;
17990: LD_ADDR_OWVAR 21
17994: PUSH
17995: LD_VAR 0 1
17999: ST_TO_ADDR
// InitHc ;
18000: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
18004: LD_INT 0
18006: PPUSH
18007: LD_VAR 0 2
18011: PPUSH
18012: LD_VAR 0 3
18016: PPUSH
18017: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
18021: CALL_OW 44
18025: PPUSH
18026: LD_INT 1
18028: PPUSH
18029: CALL_OW 51
// end ;
18033: LD_VAR 0 4
18037: RET
// export function hHackSpawnVehicle ; begin
18038: LD_INT 0
18040: PPUSH
// uc_side := your_side ;
18041: LD_ADDR_OWVAR 20
18045: PUSH
18046: LD_OWVAR 2
18050: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
18051: LD_ADDR_OWVAR 21
18055: PUSH
18056: LD_INT 1
18058: PPUSH
18059: LD_INT 3
18061: PPUSH
18062: CALL_OW 12
18066: ST_TO_ADDR
// InitVc ;
18067: CALL_OW 20
// case uc_nation of 1 :
18071: LD_OWVAR 21
18075: PUSH
18076: LD_INT 1
18078: DOUBLE
18079: EQUAL
18080: IFTRUE 18084
18082: GO 18228
18084: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
18085: LD_ADDR_OWVAR 37
18089: PUSH
18090: LD_INT 1
18092: PUSH
18093: LD_INT 2
18095: PUSH
18096: LD_INT 3
18098: PUSH
18099: LD_INT 4
18101: PUSH
18102: LD_INT 5
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: LIST
18109: LIST
18110: LIST
18111: PUSH
18112: LD_INT 1
18114: PPUSH
18115: LD_INT 5
18117: PPUSH
18118: CALL_OW 12
18122: ARRAY
18123: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
18124: LD_ADDR_OWVAR 39
18128: PUSH
18129: LD_INT 1
18131: PPUSH
18132: LD_INT 3
18134: PPUSH
18135: CALL_OW 12
18139: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
18140: LD_ADDR_OWVAR 38
18144: PUSH
18145: LD_INT 1
18147: PUSH
18148: LD_INT 2
18150: PUSH
18151: LD_INT 3
18153: PUSH
18154: EMPTY
18155: LIST
18156: LIST
18157: LIST
18158: PUSH
18159: LD_INT 1
18161: PPUSH
18162: LD_INT 3
18164: PPUSH
18165: CALL_OW 12
18169: ARRAY
18170: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
18171: LD_ADDR_OWVAR 40
18175: PUSH
18176: LD_INT 2
18178: PUSH
18179: LD_INT 4
18181: PUSH
18182: LD_INT 5
18184: PUSH
18185: LD_INT 3
18187: PUSH
18188: LD_INT 7
18190: PUSH
18191: LD_INT 8
18193: PUSH
18194: LD_INT 9
18196: PUSH
18197: LD_INT 10
18199: PUSH
18200: LD_INT 6
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: LIST
18207: LIST
18208: LIST
18209: LIST
18210: LIST
18211: LIST
18212: LIST
18213: PUSH
18214: LD_INT 1
18216: PPUSH
18217: LD_INT 9
18219: PPUSH
18220: CALL_OW 12
18224: ARRAY
18225: ST_TO_ADDR
// end ; 2 :
18226: GO 18493
18228: LD_INT 2
18230: DOUBLE
18231: EQUAL
18232: IFTRUE 18236
18234: GO 18360
18236: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
18237: LD_ADDR_OWVAR 37
18241: PUSH
18242: LD_INT 11
18244: PUSH
18245: LD_INT 12
18247: PUSH
18248: LD_INT 13
18250: PUSH
18251: LD_INT 14
18253: PUSH
18254: EMPTY
18255: LIST
18256: LIST
18257: LIST
18258: LIST
18259: PUSH
18260: LD_INT 1
18262: PPUSH
18263: LD_INT 4
18265: PPUSH
18266: CALL_OW 12
18270: ARRAY
18271: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
18272: LD_ADDR_OWVAR 39
18276: PUSH
18277: LD_INT 1
18279: PPUSH
18280: LD_INT 3
18282: PPUSH
18283: CALL_OW 12
18287: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
18288: LD_ADDR_OWVAR 38
18292: PUSH
18293: LD_INT 1
18295: PUSH
18296: LD_INT 2
18298: PUSH
18299: LD_INT 5
18301: PUSH
18302: EMPTY
18303: LIST
18304: LIST
18305: LIST
18306: PUSH
18307: LD_INT 1
18309: PPUSH
18310: LD_INT 3
18312: PPUSH
18313: CALL_OW 12
18317: ARRAY
18318: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
18319: LD_ADDR_OWVAR 40
18323: PUSH
18324: LD_INT 24
18326: PUSH
18327: LD_INT 26
18329: PUSH
18330: LD_INT 27
18332: PUSH
18333: LD_INT 28
18335: PUSH
18336: LD_INT 29
18338: PUSH
18339: EMPTY
18340: LIST
18341: LIST
18342: LIST
18343: LIST
18344: LIST
18345: PUSH
18346: LD_INT 1
18348: PPUSH
18349: LD_INT 5
18351: PPUSH
18352: CALL_OW 12
18356: ARRAY
18357: ST_TO_ADDR
// end ; 3 :
18358: GO 18493
18360: LD_INT 3
18362: DOUBLE
18363: EQUAL
18364: IFTRUE 18368
18366: GO 18492
18368: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
18369: LD_ADDR_OWVAR 37
18373: PUSH
18374: LD_INT 21
18376: PUSH
18377: LD_INT 23
18379: PUSH
18380: LD_INT 22
18382: PUSH
18383: LD_INT 24
18385: PUSH
18386: EMPTY
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: PUSH
18392: LD_INT 1
18394: PPUSH
18395: LD_INT 4
18397: PPUSH
18398: CALL_OW 12
18402: ARRAY
18403: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
18404: LD_ADDR_OWVAR 39
18408: PUSH
18409: LD_INT 1
18411: PPUSH
18412: LD_INT 3
18414: PPUSH
18415: CALL_OW 12
18419: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
18420: LD_ADDR_OWVAR 38
18424: PUSH
18425: LD_INT 1
18427: PUSH
18428: LD_INT 3
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: PUSH
18435: LD_INT 1
18437: PPUSH
18438: LD_INT 2
18440: PPUSH
18441: CALL_OW 12
18445: ARRAY
18446: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
18447: LD_ADDR_OWVAR 40
18451: PUSH
18452: LD_INT 42
18454: PUSH
18455: LD_INT 43
18457: PUSH
18458: LD_INT 44
18460: PUSH
18461: LD_INT 46
18463: PUSH
18464: LD_INT 48
18466: PUSH
18467: LD_INT 47
18469: PUSH
18470: EMPTY
18471: LIST
18472: LIST
18473: LIST
18474: LIST
18475: LIST
18476: LIST
18477: PUSH
18478: LD_INT 1
18480: PPUSH
18481: LD_INT 6
18483: PPUSH
18484: CALL_OW 12
18488: ARRAY
18489: ST_TO_ADDR
// end ; end ;
18490: GO 18493
18492: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
18493: CALL_OW 45
18497: PPUSH
18498: LD_INT 1
18500: PPUSH
18501: CALL_OW 51
// end ;
18505: LD_VAR 0 1
18509: RET
// export hInvincible ; every 1 do
18510: GO 18512
18512: DISABLE
// hInvincible := [ ] ;
18513: LD_ADDR_EXP 81
18517: PUSH
18518: EMPTY
18519: ST_TO_ADDR
18520: END
// every 10 do var i ;
18521: GO 18523
18523: DISABLE
18524: LD_INT 0
18526: PPUSH
// begin enable ;
18527: ENABLE
// if not hInvincible then
18528: LD_EXP 81
18532: NOT
18533: IFFALSE 18537
// exit ;
18535: GO 18581
// for i in hInvincible do
18537: LD_ADDR_VAR 0 1
18541: PUSH
18542: LD_EXP 81
18546: PUSH
18547: FOR_IN
18548: IFFALSE 18579
// if GetLives ( i ) < 1000 then
18550: LD_VAR 0 1
18554: PPUSH
18555: CALL_OW 256
18559: PUSH
18560: LD_INT 1000
18562: LESS
18563: IFFALSE 18577
// SetLives ( i , 1000 ) ;
18565: LD_VAR 0 1
18569: PPUSH
18570: LD_INT 1000
18572: PPUSH
18573: CALL_OW 234
18577: GO 18547
18579: POP
18580: POP
// end ;
18581: PPOPN 1
18583: END
// export function hHackInvincible ; var i ; begin
18584: LD_INT 0
18586: PPUSH
18587: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
18588: LD_ADDR_VAR 0 2
18592: PUSH
18593: LD_INT 2
18595: PUSH
18596: LD_INT 21
18598: PUSH
18599: LD_INT 1
18601: PUSH
18602: EMPTY
18603: LIST
18604: LIST
18605: PUSH
18606: LD_INT 21
18608: PUSH
18609: LD_INT 2
18611: PUSH
18612: EMPTY
18613: LIST
18614: LIST
18615: PUSH
18616: EMPTY
18617: LIST
18618: LIST
18619: LIST
18620: PPUSH
18621: CALL_OW 69
18625: PUSH
18626: FOR_IN
18627: IFFALSE 18688
// if IsSelected ( i ) then
18629: LD_VAR 0 2
18633: PPUSH
18634: CALL_OW 306
18638: IFFALSE 18686
// begin if i in hInvincible then
18640: LD_VAR 0 2
18644: PUSH
18645: LD_EXP 81
18649: IN
18650: IFFALSE 18670
// hInvincible := hInvincible diff i else
18652: LD_ADDR_EXP 81
18656: PUSH
18657: LD_EXP 81
18661: PUSH
18662: LD_VAR 0 2
18666: DIFF
18667: ST_TO_ADDR
18668: GO 18686
// hInvincible := hInvincible union i ;
18670: LD_ADDR_EXP 81
18674: PUSH
18675: LD_EXP 81
18679: PUSH
18680: LD_VAR 0 2
18684: UNION
18685: ST_TO_ADDR
// end ;
18686: GO 18626
18688: POP
18689: POP
// end ;
18690: LD_VAR 0 1
18694: RET
// export function hHackInvisible ; var i , j ; begin
18695: LD_INT 0
18697: PPUSH
18698: PPUSH
18699: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18700: LD_ADDR_VAR 0 2
18704: PUSH
18705: LD_INT 21
18707: PUSH
18708: LD_INT 1
18710: PUSH
18711: EMPTY
18712: LIST
18713: LIST
18714: PPUSH
18715: CALL_OW 69
18719: PUSH
18720: FOR_IN
18721: IFFALSE 18745
// if IsSelected ( i ) then
18723: LD_VAR 0 2
18727: PPUSH
18728: CALL_OW 306
18732: IFFALSE 18743
// ComForceInvisible ( i ) ;
18734: LD_VAR 0 2
18738: PPUSH
18739: CALL_OW 496
18743: GO 18720
18745: POP
18746: POP
// end ;
18747: LD_VAR 0 1
18751: RET
// export function hHackChangeYourSide ; begin
18752: LD_INT 0
18754: PPUSH
// if your_side = 8 then
18755: LD_OWVAR 2
18759: PUSH
18760: LD_INT 8
18762: EQUAL
18763: IFFALSE 18775
// your_side := 0 else
18765: LD_ADDR_OWVAR 2
18769: PUSH
18770: LD_INT 0
18772: ST_TO_ADDR
18773: GO 18789
// your_side := your_side + 1 ;
18775: LD_ADDR_OWVAR 2
18779: PUSH
18780: LD_OWVAR 2
18784: PUSH
18785: LD_INT 1
18787: PLUS
18788: ST_TO_ADDR
// end ;
18789: LD_VAR 0 1
18793: RET
// export function hHackChangeUnitSide ; var i , j ; begin
18794: LD_INT 0
18796: PPUSH
18797: PPUSH
18798: PPUSH
// for i in all_units do
18799: LD_ADDR_VAR 0 2
18803: PUSH
18804: LD_OWVAR 3
18808: PUSH
18809: FOR_IN
18810: IFFALSE 18888
// if IsSelected ( i ) then
18812: LD_VAR 0 2
18816: PPUSH
18817: CALL_OW 306
18821: IFFALSE 18886
// begin j := GetSide ( i ) ;
18823: LD_ADDR_VAR 0 3
18827: PUSH
18828: LD_VAR 0 2
18832: PPUSH
18833: CALL_OW 255
18837: ST_TO_ADDR
// if j = 8 then
18838: LD_VAR 0 3
18842: PUSH
18843: LD_INT 8
18845: EQUAL
18846: IFFALSE 18858
// j := 0 else
18848: LD_ADDR_VAR 0 3
18852: PUSH
18853: LD_INT 0
18855: ST_TO_ADDR
18856: GO 18872
// j := j + 1 ;
18858: LD_ADDR_VAR 0 3
18862: PUSH
18863: LD_VAR 0 3
18867: PUSH
18868: LD_INT 1
18870: PLUS
18871: ST_TO_ADDR
// SetSide ( i , j ) ;
18872: LD_VAR 0 2
18876: PPUSH
18877: LD_VAR 0 3
18881: PPUSH
18882: CALL_OW 235
// end ;
18886: GO 18809
18888: POP
18889: POP
// end ;
18890: LD_VAR 0 1
18894: RET
// export function hHackFog ; begin
18895: LD_INT 0
18897: PPUSH
// FogOff ( true ) ;
18898: LD_INT 1
18900: PPUSH
18901: CALL_OW 344
// end ;
18905: LD_VAR 0 1
18909: RET
// export function hHackApeman ; begin
18910: LD_INT 0
18912: PPUSH
// uc_side := your_side ;
18913: LD_ADDR_OWVAR 20
18917: PUSH
18918: LD_OWVAR 2
18922: ST_TO_ADDR
// uc_nation := 0 ;
18923: LD_ADDR_OWVAR 21
18927: PUSH
18928: LD_INT 0
18930: ST_TO_ADDR
// hc_name :=  ;
18931: LD_ADDR_OWVAR 26
18935: PUSH
18936: LD_STRING 
18938: ST_TO_ADDR
// hc_gallery :=  ;
18939: LD_ADDR_OWVAR 33
18943: PUSH
18944: LD_STRING 
18946: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
18947: LD_ADDR_OWVAR 31
18951: PUSH
18952: LD_INT 0
18954: PUSH
18955: LD_INT 0
18957: PUSH
18958: LD_INT 0
18960: PUSH
18961: LD_INT 0
18963: PUSH
18964: EMPTY
18965: LIST
18966: LIST
18967: LIST
18968: LIST
18969: ST_TO_ADDR
// hc_class := class_apeman ;
18970: LD_ADDR_OWVAR 28
18974: PUSH
18975: LD_INT 12
18977: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
18978: CALL_OW 44
18982: PPUSH
18983: LD_INT 1
18985: PPUSH
18986: CALL_OW 51
// end ;
18990: LD_VAR 0 1
18994: RET
// export function hHackBoom ; begin
18995: LD_INT 0
18997: PPUSH
// uc_side := your_side ;
18998: LD_ADDR_OWVAR 20
19002: PUSH
19003: LD_OWVAR 2
19007: ST_TO_ADDR
// uc_nation := 1 ;
19008: LD_ADDR_OWVAR 21
19012: PUSH
19013: LD_INT 1
19015: ST_TO_ADDR
// vc_chassis := us_morphling ;
19016: LD_ADDR_OWVAR 37
19020: PUSH
19021: LD_INT 5
19023: ST_TO_ADDR
// vc_engine := engine_siberite ;
19024: LD_ADDR_OWVAR 39
19028: PUSH
19029: LD_INT 3
19031: ST_TO_ADDR
// vc_control := control_computer ;
19032: LD_ADDR_OWVAR 38
19036: PUSH
19037: LD_INT 3
19039: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
19040: LD_ADDR_OWVAR 40
19044: PUSH
19045: LD_INT 8
19047: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19048: CALL_OW 45
19052: PPUSH
19053: LD_INT 1
19055: PPUSH
19056: CALL_OW 51
// end ; end_of_file
19060: LD_VAR 0 1
19064: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
19065: LD_INT 0
19067: PPUSH
19068: PPUSH
19069: PPUSH
19070: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
19071: LD_VAR 0 1
19075: PPUSH
19076: CALL_OW 264
19080: PUSH
19081: LD_EXP 92
19085: EQUAL
19086: IFFALSE 19158
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
19088: LD_INT 68
19090: PPUSH
19091: LD_VAR 0 1
19095: PPUSH
19096: CALL_OW 255
19100: PPUSH
19101: CALL_OW 321
19105: PUSH
19106: LD_INT 2
19108: EQUAL
19109: IFFALSE 19121
// eff := 70 else
19111: LD_ADDR_VAR 0 4
19115: PUSH
19116: LD_INT 70
19118: ST_TO_ADDR
19119: GO 19129
// eff := 30 ;
19121: LD_ADDR_VAR 0 4
19125: PUSH
19126: LD_INT 30
19128: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
19129: LD_VAR 0 1
19133: PPUSH
19134: CALL_OW 250
19138: PPUSH
19139: LD_VAR 0 1
19143: PPUSH
19144: CALL_OW 251
19148: PPUSH
19149: LD_VAR 0 4
19153: PPUSH
19154: CALL_OW 495
// end ; end ;
19158: LD_VAR 0 2
19162: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
19163: LD_INT 0
19165: PPUSH
// end ;
19166: LD_VAR 0 4
19170: RET
// export function SOS_Command ( cmd ) ; begin
19171: LD_INT 0
19173: PPUSH
// end ;
19174: LD_VAR 0 2
19178: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
19179: LD_INT 0
19181: PPUSH
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
19182: LD_VAR 0 1
19186: PUSH
19187: LD_INT 254
19189: EQUAL
19190: PUSH
19191: LD_VAR 0 2
19195: PPUSH
19196: CALL_OW 264
19200: PUSH
19201: LD_EXP 90
19205: EQUAL
19206: AND
19207: PUSH
19208: LD_VAR 0 3
19212: PPUSH
19213: CALL_OW 263
19217: PUSH
19218: LD_INT 3
19220: EQUAL
19221: AND
19222: IFFALSE 19238
// HackDestroyVehicle ( unit , selectedUnit ) ;
19224: LD_VAR 0 2
19228: PPUSH
19229: LD_VAR 0 3
19233: PPUSH
19234: CALL 20747 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
19238: LD_VAR 0 1
19242: PUSH
19243: LD_INT 255
19245: EQUAL
19246: PUSH
19247: LD_VAR 0 2
19251: PPUSH
19252: CALL_OW 264
19256: PUSH
19257: LD_INT 14
19259: PUSH
19260: LD_INT 53
19262: PUSH
19263: EMPTY
19264: LIST
19265: LIST
19266: IN
19267: AND
19268: PUSH
19269: LD_VAR 0 4
19273: PPUSH
19274: LD_VAR 0 5
19278: PPUSH
19279: CALL_OW 488
19283: AND
19284: IFFALSE 19308
// CutTreeXYR ( unit , x , y , 12 ) ;
19286: LD_VAR 0 2
19290: PPUSH
19291: LD_VAR 0 4
19295: PPUSH
19296: LD_VAR 0 5
19300: PPUSH
19301: LD_INT 12
19303: PPUSH
19304: CALL 19313 0 4
// end ;
19308: LD_VAR 0 6
19312: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
19313: LD_INT 0
19315: PPUSH
19316: PPUSH
19317: PPUSH
19318: PPUSH
19319: PPUSH
19320: PPUSH
19321: PPUSH
19322: PPUSH
19323: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
19324: LD_VAR 0 1
19328: NOT
19329: PUSH
19330: LD_VAR 0 2
19334: PPUSH
19335: LD_VAR 0 3
19339: PPUSH
19340: CALL_OW 488
19344: NOT
19345: OR
19346: PUSH
19347: LD_VAR 0 4
19351: NOT
19352: OR
19353: IFFALSE 19357
// exit ;
19355: GO 19697
// list := [ ] ;
19357: LD_ADDR_VAR 0 13
19361: PUSH
19362: EMPTY
19363: ST_TO_ADDR
// if x - r < 0 then
19364: LD_VAR 0 2
19368: PUSH
19369: LD_VAR 0 4
19373: MINUS
19374: PUSH
19375: LD_INT 0
19377: LESS
19378: IFFALSE 19390
// min_x := 0 else
19380: LD_ADDR_VAR 0 7
19384: PUSH
19385: LD_INT 0
19387: ST_TO_ADDR
19388: GO 19406
// min_x := x - r ;
19390: LD_ADDR_VAR 0 7
19394: PUSH
19395: LD_VAR 0 2
19399: PUSH
19400: LD_VAR 0 4
19404: MINUS
19405: ST_TO_ADDR
// if y - r < 0 then
19406: LD_VAR 0 3
19410: PUSH
19411: LD_VAR 0 4
19415: MINUS
19416: PUSH
19417: LD_INT 0
19419: LESS
19420: IFFALSE 19432
// min_y := 0 else
19422: LD_ADDR_VAR 0 8
19426: PUSH
19427: LD_INT 0
19429: ST_TO_ADDR
19430: GO 19448
// min_y := y - r ;
19432: LD_ADDR_VAR 0 8
19436: PUSH
19437: LD_VAR 0 3
19441: PUSH
19442: LD_VAR 0 4
19446: MINUS
19447: ST_TO_ADDR
// max_x := x + r ;
19448: LD_ADDR_VAR 0 9
19452: PUSH
19453: LD_VAR 0 2
19457: PUSH
19458: LD_VAR 0 4
19462: PLUS
19463: ST_TO_ADDR
// max_y := y + r ;
19464: LD_ADDR_VAR 0 10
19468: PUSH
19469: LD_VAR 0 3
19473: PUSH
19474: LD_VAR 0 4
19478: PLUS
19479: ST_TO_ADDR
// for _x = min_x to max_x do
19480: LD_ADDR_VAR 0 11
19484: PUSH
19485: DOUBLE
19486: LD_VAR 0 7
19490: DEC
19491: ST_TO_ADDR
19492: LD_VAR 0 9
19496: PUSH
19497: FOR_TO
19498: IFFALSE 19615
// for _y = min_y to max_y do
19500: LD_ADDR_VAR 0 12
19504: PUSH
19505: DOUBLE
19506: LD_VAR 0 8
19510: DEC
19511: ST_TO_ADDR
19512: LD_VAR 0 10
19516: PUSH
19517: FOR_TO
19518: IFFALSE 19611
// begin if not ValidHex ( _x , _y ) then
19520: LD_VAR 0 11
19524: PPUSH
19525: LD_VAR 0 12
19529: PPUSH
19530: CALL_OW 488
19534: NOT
19535: IFFALSE 19539
// continue ;
19537: GO 19517
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
19539: LD_VAR 0 11
19543: PPUSH
19544: LD_VAR 0 12
19548: PPUSH
19549: CALL_OW 351
19553: PUSH
19554: LD_VAR 0 11
19558: PPUSH
19559: LD_VAR 0 12
19563: PPUSH
19564: CALL_OW 554
19568: AND
19569: IFFALSE 19609
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
19571: LD_ADDR_VAR 0 13
19575: PUSH
19576: LD_VAR 0 13
19580: PPUSH
19581: LD_VAR 0 13
19585: PUSH
19586: LD_INT 1
19588: PLUS
19589: PPUSH
19590: LD_VAR 0 11
19594: PUSH
19595: LD_VAR 0 12
19599: PUSH
19600: EMPTY
19601: LIST
19602: LIST
19603: PPUSH
19604: CALL_OW 2
19608: ST_TO_ADDR
// end ;
19609: GO 19517
19611: POP
19612: POP
19613: GO 19497
19615: POP
19616: POP
// if not list then
19617: LD_VAR 0 13
19621: NOT
19622: IFFALSE 19626
// exit ;
19624: GO 19697
// for i in list do
19626: LD_ADDR_VAR 0 6
19630: PUSH
19631: LD_VAR 0 13
19635: PUSH
19636: FOR_IN
19637: IFFALSE 19695
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
19639: LD_VAR 0 1
19643: PPUSH
19644: LD_STRING M
19646: PUSH
19647: LD_VAR 0 6
19651: PUSH
19652: LD_INT 1
19654: ARRAY
19655: PUSH
19656: LD_VAR 0 6
19660: PUSH
19661: LD_INT 2
19663: ARRAY
19664: PUSH
19665: LD_INT 0
19667: PUSH
19668: LD_INT 0
19670: PUSH
19671: LD_INT 0
19673: PUSH
19674: LD_INT 0
19676: PUSH
19677: EMPTY
19678: LIST
19679: LIST
19680: LIST
19681: LIST
19682: LIST
19683: LIST
19684: LIST
19685: PUSH
19686: EMPTY
19687: LIST
19688: PPUSH
19689: CALL_OW 447
19693: GO 19636
19695: POP
19696: POP
// end ;
19697: LD_VAR 0 5
19701: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
19702: LD_EXP 82
19706: NOT
19707: IFFALSE 19757
19709: GO 19711
19711: DISABLE
// begin initHack := true ;
19712: LD_ADDR_EXP 82
19716: PUSH
19717: LD_INT 1
19719: ST_TO_ADDR
// hackTanks := [ ] ;
19720: LD_ADDR_EXP 83
19724: PUSH
19725: EMPTY
19726: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
19727: LD_ADDR_EXP 84
19731: PUSH
19732: EMPTY
19733: ST_TO_ADDR
// hackLimit := 3 ;
19734: LD_ADDR_EXP 85
19738: PUSH
19739: LD_INT 3
19741: ST_TO_ADDR
// hackDist := 12 ;
19742: LD_ADDR_EXP 86
19746: PUSH
19747: LD_INT 12
19749: ST_TO_ADDR
// hackCounter := [ ] ;
19750: LD_ADDR_EXP 87
19754: PUSH
19755: EMPTY
19756: ST_TO_ADDR
// end ;
19757: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
19758: LD_EXP 82
19762: PUSH
19763: LD_INT 34
19765: PUSH
19766: LD_EXP 90
19770: PUSH
19771: EMPTY
19772: LIST
19773: LIST
19774: PPUSH
19775: CALL_OW 69
19779: AND
19780: IFFALSE 20035
19782: GO 19784
19784: DISABLE
19785: LD_INT 0
19787: PPUSH
19788: PPUSH
// begin enable ;
19789: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
19790: LD_ADDR_VAR 0 1
19794: PUSH
19795: LD_INT 34
19797: PUSH
19798: LD_EXP 90
19802: PUSH
19803: EMPTY
19804: LIST
19805: LIST
19806: PPUSH
19807: CALL_OW 69
19811: PUSH
19812: FOR_IN
19813: IFFALSE 20033
// begin if not i in hackTanks then
19815: LD_VAR 0 1
19819: PUSH
19820: LD_EXP 83
19824: IN
19825: NOT
19826: IFFALSE 19909
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
19828: LD_ADDR_EXP 83
19832: PUSH
19833: LD_EXP 83
19837: PPUSH
19838: LD_EXP 83
19842: PUSH
19843: LD_INT 1
19845: PLUS
19846: PPUSH
19847: LD_VAR 0 1
19851: PPUSH
19852: CALL_OW 1
19856: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
19857: LD_ADDR_EXP 84
19861: PUSH
19862: LD_EXP 84
19866: PPUSH
19867: LD_EXP 84
19871: PUSH
19872: LD_INT 1
19874: PLUS
19875: PPUSH
19876: EMPTY
19877: PPUSH
19878: CALL_OW 1
19882: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
19883: LD_ADDR_EXP 87
19887: PUSH
19888: LD_EXP 87
19892: PPUSH
19893: LD_EXP 87
19897: PUSH
19898: LD_INT 1
19900: PLUS
19901: PPUSH
19902: EMPTY
19903: PPUSH
19904: CALL_OW 1
19908: ST_TO_ADDR
// end ; if not IsOk ( i ) then
19909: LD_VAR 0 1
19913: PPUSH
19914: CALL_OW 302
19918: NOT
19919: IFFALSE 19932
// begin HackUnlinkAll ( i ) ;
19921: LD_VAR 0 1
19925: PPUSH
19926: CALL 20038 0 1
// continue ;
19930: GO 19812
// end ; HackCheckCapturedStatus ( i ) ;
19932: LD_VAR 0 1
19936: PPUSH
19937: CALL 20481 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
19941: LD_ADDR_VAR 0 2
19945: PUSH
19946: LD_INT 81
19948: PUSH
19949: LD_VAR 0 1
19953: PPUSH
19954: CALL_OW 255
19958: PUSH
19959: EMPTY
19960: LIST
19961: LIST
19962: PUSH
19963: LD_INT 33
19965: PUSH
19966: LD_INT 3
19968: PUSH
19969: EMPTY
19970: LIST
19971: LIST
19972: PUSH
19973: LD_INT 91
19975: PUSH
19976: LD_VAR 0 1
19980: PUSH
19981: LD_EXP 86
19985: PUSH
19986: EMPTY
19987: LIST
19988: LIST
19989: LIST
19990: PUSH
19991: LD_INT 50
19993: PUSH
19994: EMPTY
19995: LIST
19996: PUSH
19997: EMPTY
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: PPUSH
20003: CALL_OW 69
20007: ST_TO_ADDR
// if not tmp then
20008: LD_VAR 0 2
20012: NOT
20013: IFFALSE 20017
// continue ;
20015: GO 19812
// HackLink ( i , tmp ) ;
20017: LD_VAR 0 1
20021: PPUSH
20022: LD_VAR 0 2
20026: PPUSH
20027: CALL 20174 0 2
// end ;
20031: GO 19812
20033: POP
20034: POP
// end ;
20035: PPOPN 2
20037: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
20038: LD_INT 0
20040: PPUSH
20041: PPUSH
20042: PPUSH
// if not hack in hackTanks then
20043: LD_VAR 0 1
20047: PUSH
20048: LD_EXP 83
20052: IN
20053: NOT
20054: IFFALSE 20058
// exit ;
20056: GO 20169
// index := GetElementIndex ( hackTanks , hack ) ;
20058: LD_ADDR_VAR 0 4
20062: PUSH
20063: LD_EXP 83
20067: PPUSH
20068: LD_VAR 0 1
20072: PPUSH
20073: CALL 25725 0 2
20077: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
20078: LD_EXP 84
20082: PUSH
20083: LD_VAR 0 4
20087: ARRAY
20088: IFFALSE 20169
// begin for i in hackTanksCaptured [ index ] do
20090: LD_ADDR_VAR 0 3
20094: PUSH
20095: LD_EXP 84
20099: PUSH
20100: LD_VAR 0 4
20104: ARRAY
20105: PUSH
20106: FOR_IN
20107: IFFALSE 20133
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
20109: LD_VAR 0 3
20113: PUSH
20114: LD_INT 1
20116: ARRAY
20117: PPUSH
20118: LD_VAR 0 3
20122: PUSH
20123: LD_INT 2
20125: ARRAY
20126: PPUSH
20127: CALL_OW 235
20131: GO 20106
20133: POP
20134: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
20135: LD_ADDR_EXP 84
20139: PUSH
20140: LD_EXP 84
20144: PPUSH
20145: LD_VAR 0 4
20149: PPUSH
20150: EMPTY
20151: PPUSH
20152: CALL_OW 1
20156: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
20157: LD_VAR 0 1
20161: PPUSH
20162: LD_INT 0
20164: PPUSH
20165: CALL_OW 505
// end ; end ;
20169: LD_VAR 0 2
20173: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
20174: LD_INT 0
20176: PPUSH
20177: PPUSH
20178: PPUSH
// if not hack in hackTanks or not vehicles then
20179: LD_VAR 0 1
20183: PUSH
20184: LD_EXP 83
20188: IN
20189: NOT
20190: PUSH
20191: LD_VAR 0 2
20195: NOT
20196: OR
20197: IFFALSE 20201
// exit ;
20199: GO 20476
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
20201: LD_ADDR_VAR 0 2
20205: PUSH
20206: LD_VAR 0 1
20210: PPUSH
20211: LD_VAR 0 2
20215: PPUSH
20216: LD_INT 1
20218: PPUSH
20219: LD_INT 1
20221: PPUSH
20222: CALL 26375 0 4
20226: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
20227: LD_ADDR_VAR 0 5
20231: PUSH
20232: LD_EXP 83
20236: PPUSH
20237: LD_VAR 0 1
20241: PPUSH
20242: CALL 25725 0 2
20246: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
20247: LD_EXP 84
20251: PUSH
20252: LD_VAR 0 5
20256: ARRAY
20257: PUSH
20258: LD_EXP 85
20262: LESS
20263: IFFALSE 20452
// begin for i := 1 to vehicles do
20265: LD_ADDR_VAR 0 4
20269: PUSH
20270: DOUBLE
20271: LD_INT 1
20273: DEC
20274: ST_TO_ADDR
20275: LD_VAR 0 2
20279: PUSH
20280: FOR_TO
20281: IFFALSE 20450
// begin if hackTanksCaptured [ index ] = hackLimit then
20283: LD_EXP 84
20287: PUSH
20288: LD_VAR 0 5
20292: ARRAY
20293: PUSH
20294: LD_EXP 85
20298: EQUAL
20299: IFFALSE 20303
// break ;
20301: GO 20450
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
20303: LD_ADDR_EXP 87
20307: PUSH
20308: LD_EXP 87
20312: PPUSH
20313: LD_VAR 0 5
20317: PPUSH
20318: LD_EXP 87
20322: PUSH
20323: LD_VAR 0 5
20327: ARRAY
20328: PUSH
20329: LD_INT 1
20331: PLUS
20332: PPUSH
20333: CALL_OW 1
20337: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
20338: LD_ADDR_EXP 84
20342: PUSH
20343: LD_EXP 84
20347: PPUSH
20348: LD_VAR 0 5
20352: PUSH
20353: LD_EXP 84
20357: PUSH
20358: LD_VAR 0 5
20362: ARRAY
20363: PUSH
20364: LD_INT 1
20366: PLUS
20367: PUSH
20368: EMPTY
20369: LIST
20370: LIST
20371: PPUSH
20372: LD_VAR 0 2
20376: PUSH
20377: LD_VAR 0 4
20381: ARRAY
20382: PUSH
20383: LD_VAR 0 2
20387: PUSH
20388: LD_VAR 0 4
20392: ARRAY
20393: PPUSH
20394: CALL_OW 255
20398: PUSH
20399: EMPTY
20400: LIST
20401: LIST
20402: PPUSH
20403: CALL 25940 0 3
20407: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
20408: LD_VAR 0 2
20412: PUSH
20413: LD_VAR 0 4
20417: ARRAY
20418: PPUSH
20419: LD_VAR 0 1
20423: PPUSH
20424: CALL_OW 255
20428: PPUSH
20429: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
20433: LD_VAR 0 2
20437: PUSH
20438: LD_VAR 0 4
20442: ARRAY
20443: PPUSH
20444: CALL_OW 141
// end ;
20448: GO 20280
20450: POP
20451: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
20452: LD_VAR 0 1
20456: PPUSH
20457: LD_EXP 84
20461: PUSH
20462: LD_VAR 0 5
20466: ARRAY
20467: PUSH
20468: LD_INT 0
20470: PLUS
20471: PPUSH
20472: CALL_OW 505
// end ;
20476: LD_VAR 0 3
20480: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
20481: LD_INT 0
20483: PPUSH
20484: PPUSH
20485: PPUSH
20486: PPUSH
// if not hack in hackTanks then
20487: LD_VAR 0 1
20491: PUSH
20492: LD_EXP 83
20496: IN
20497: NOT
20498: IFFALSE 20502
// exit ;
20500: GO 20742
// index := GetElementIndex ( hackTanks , hack ) ;
20502: LD_ADDR_VAR 0 4
20506: PUSH
20507: LD_EXP 83
20511: PPUSH
20512: LD_VAR 0 1
20516: PPUSH
20517: CALL 25725 0 2
20521: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
20522: LD_ADDR_VAR 0 3
20526: PUSH
20527: DOUBLE
20528: LD_EXP 84
20532: PUSH
20533: LD_VAR 0 4
20537: ARRAY
20538: INC
20539: ST_TO_ADDR
20540: LD_INT 1
20542: PUSH
20543: FOR_DOWNTO
20544: IFFALSE 20716
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
20546: LD_ADDR_VAR 0 5
20550: PUSH
20551: LD_EXP 84
20555: PUSH
20556: LD_VAR 0 4
20560: ARRAY
20561: PUSH
20562: LD_VAR 0 3
20566: ARRAY
20567: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
20568: LD_VAR 0 5
20572: PUSH
20573: LD_INT 1
20575: ARRAY
20576: PPUSH
20577: CALL_OW 302
20581: NOT
20582: PUSH
20583: LD_VAR 0 5
20587: PUSH
20588: LD_INT 1
20590: ARRAY
20591: PPUSH
20592: CALL_OW 255
20596: PUSH
20597: LD_VAR 0 1
20601: PPUSH
20602: CALL_OW 255
20606: NONEQUAL
20607: OR
20608: IFFALSE 20714
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
20610: LD_VAR 0 5
20614: PUSH
20615: LD_INT 1
20617: ARRAY
20618: PPUSH
20619: CALL_OW 305
20623: PUSH
20624: LD_VAR 0 5
20628: PUSH
20629: LD_INT 1
20631: ARRAY
20632: PPUSH
20633: CALL_OW 255
20637: PUSH
20638: LD_VAR 0 1
20642: PPUSH
20643: CALL_OW 255
20647: EQUAL
20648: AND
20649: IFFALSE 20673
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
20651: LD_VAR 0 5
20655: PUSH
20656: LD_INT 1
20658: ARRAY
20659: PPUSH
20660: LD_VAR 0 5
20664: PUSH
20665: LD_INT 2
20667: ARRAY
20668: PPUSH
20669: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
20673: LD_ADDR_EXP 84
20677: PUSH
20678: LD_EXP 84
20682: PPUSH
20683: LD_VAR 0 4
20687: PPUSH
20688: LD_EXP 84
20692: PUSH
20693: LD_VAR 0 4
20697: ARRAY
20698: PPUSH
20699: LD_VAR 0 3
20703: PPUSH
20704: CALL_OW 3
20708: PPUSH
20709: CALL_OW 1
20713: ST_TO_ADDR
// end ; end ;
20714: GO 20543
20716: POP
20717: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
20718: LD_VAR 0 1
20722: PPUSH
20723: LD_EXP 84
20727: PUSH
20728: LD_VAR 0 4
20732: ARRAY
20733: PUSH
20734: LD_INT 0
20736: PLUS
20737: PPUSH
20738: CALL_OW 505
// end ;
20742: LD_VAR 0 2
20746: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
20747: LD_INT 0
20749: PPUSH
20750: PPUSH
20751: PPUSH
20752: PPUSH
// if not hack in hackTanks then
20753: LD_VAR 0 1
20757: PUSH
20758: LD_EXP 83
20762: IN
20763: NOT
20764: IFFALSE 20768
// exit ;
20766: GO 20853
// index := GetElementIndex ( hackTanks , hack ) ;
20768: LD_ADDR_VAR 0 5
20772: PUSH
20773: LD_EXP 83
20777: PPUSH
20778: LD_VAR 0 1
20782: PPUSH
20783: CALL 25725 0 2
20787: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
20788: LD_ADDR_VAR 0 4
20792: PUSH
20793: DOUBLE
20794: LD_INT 1
20796: DEC
20797: ST_TO_ADDR
20798: LD_EXP 84
20802: PUSH
20803: LD_VAR 0 5
20807: ARRAY
20808: PUSH
20809: FOR_TO
20810: IFFALSE 20851
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
20812: LD_EXP 84
20816: PUSH
20817: LD_VAR 0 5
20821: ARRAY
20822: PUSH
20823: LD_VAR 0 4
20827: ARRAY
20828: PUSH
20829: LD_INT 1
20831: ARRAY
20832: PUSH
20833: LD_VAR 0 2
20837: EQUAL
20838: IFFALSE 20849
// KillUnit ( vehicle ) ;
20840: LD_VAR 0 2
20844: PPUSH
20845: CALL_OW 66
20849: GO 20809
20851: POP
20852: POP
// end ; end_of_file
20853: LD_VAR 0 3
20857: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
20858: LD_INT 0
20860: PPUSH
// ar_crane := 88 ;
20861: LD_ADDR_EXP 94
20865: PUSH
20866: LD_INT 88
20868: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
20869: LD_ADDR_EXP 89
20873: PUSH
20874: LD_INT 89
20876: ST_TO_ADDR
// us_hack := 99 ;
20877: LD_ADDR_EXP 90
20881: PUSH
20882: LD_INT 99
20884: ST_TO_ADDR
// us_artillery := 97 ;
20885: LD_ADDR_EXP 91
20889: PUSH
20890: LD_INT 97
20892: ST_TO_ADDR
// ar_bio_bomb := 91 ;
20893: LD_ADDR_EXP 92
20897: PUSH
20898: LD_INT 91
20900: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
20901: LD_ADDR_EXP 93
20905: PUSH
20906: LD_INT 92
20908: ST_TO_ADDR
// ru_radar := 98 ;
20909: LD_ADDR_EXP 88
20913: PUSH
20914: LD_INT 98
20916: ST_TO_ADDR
// tech_Artillery := 80 ;
20917: LD_ADDR_EXP 95
20921: PUSH
20922: LD_INT 80
20924: ST_TO_ADDR
// tech_RadMat := 81 ;
20925: LD_ADDR_EXP 96
20929: PUSH
20930: LD_INT 81
20932: ST_TO_ADDR
// tech_BasicTools := 82 ;
20933: LD_ADDR_EXP 97
20937: PUSH
20938: LD_INT 82
20940: ST_TO_ADDR
// tech_Cargo := 83 ;
20941: LD_ADDR_EXP 98
20945: PUSH
20946: LD_INT 83
20948: ST_TO_ADDR
// tech_Track := 84 ;
20949: LD_ADDR_EXP 99
20953: PUSH
20954: LD_INT 84
20956: ST_TO_ADDR
// tech_Crane := 85 ;
20957: LD_ADDR_EXP 100
20961: PUSH
20962: LD_INT 85
20964: ST_TO_ADDR
// tech_Bulldozer := 86 ;
20965: LD_ADDR_EXP 101
20969: PUSH
20970: LD_INT 86
20972: ST_TO_ADDR
// tech_Hovercraft := 87 ;
20973: LD_ADDR_EXP 102
20977: PUSH
20978: LD_INT 87
20980: ST_TO_ADDR
// end ;
20981: LD_VAR 0 1
20985: RET
// every 1 do
20986: GO 20988
20988: DISABLE
// InitGlobalVariables ; end_of_file
20989: CALL 20858 0 0
20993: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
20994: LD_INT 0
20996: PPUSH
20997: PPUSH
// if exist_mode then
20998: LD_VAR 0 2
21002: IFFALSE 21027
// unit := CreateCharacter ( prefix & ident ) else
21004: LD_ADDR_VAR 0 5
21008: PUSH
21009: LD_VAR 0 3
21013: PUSH
21014: LD_VAR 0 1
21018: STR
21019: PPUSH
21020: CALL_OW 34
21024: ST_TO_ADDR
21025: GO 21042
// unit := NewCharacter ( ident ) ;
21027: LD_ADDR_VAR 0 5
21031: PUSH
21032: LD_VAR 0 1
21036: PPUSH
21037: CALL_OW 25
21041: ST_TO_ADDR
// result := unit ;
21042: LD_ADDR_VAR 0 4
21046: PUSH
21047: LD_VAR 0 5
21051: ST_TO_ADDR
// end ;
21052: LD_VAR 0 4
21056: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
21057: LD_INT 0
21059: PPUSH
21060: PPUSH
// if not side or not nation then
21061: LD_VAR 0 1
21065: NOT
21066: PUSH
21067: LD_VAR 0 2
21071: NOT
21072: OR
21073: IFFALSE 21077
// exit ;
21075: GO 21841
// case nation of nation_american :
21077: LD_VAR 0 2
21081: PUSH
21082: LD_INT 1
21084: DOUBLE
21085: EQUAL
21086: IFTRUE 21090
21088: GO 21304
21090: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
21091: LD_ADDR_VAR 0 4
21095: PUSH
21096: LD_INT 35
21098: PUSH
21099: LD_INT 45
21101: PUSH
21102: LD_INT 46
21104: PUSH
21105: LD_INT 47
21107: PUSH
21108: LD_INT 82
21110: PUSH
21111: LD_INT 83
21113: PUSH
21114: LD_INT 84
21116: PUSH
21117: LD_INT 85
21119: PUSH
21120: LD_INT 86
21122: PUSH
21123: LD_INT 1
21125: PUSH
21126: LD_INT 2
21128: PUSH
21129: LD_INT 6
21131: PUSH
21132: LD_INT 15
21134: PUSH
21135: LD_INT 16
21137: PUSH
21138: LD_INT 7
21140: PUSH
21141: LD_INT 12
21143: PUSH
21144: LD_INT 13
21146: PUSH
21147: LD_INT 10
21149: PUSH
21150: LD_INT 14
21152: PUSH
21153: LD_INT 20
21155: PUSH
21156: LD_INT 21
21158: PUSH
21159: LD_INT 22
21161: PUSH
21162: LD_INT 25
21164: PUSH
21165: LD_INT 32
21167: PUSH
21168: LD_INT 27
21170: PUSH
21171: LD_INT 36
21173: PUSH
21174: LD_INT 69
21176: PUSH
21177: LD_INT 39
21179: PUSH
21180: LD_INT 34
21182: PUSH
21183: LD_INT 40
21185: PUSH
21186: LD_INT 48
21188: PUSH
21189: LD_INT 49
21191: PUSH
21192: LD_INT 50
21194: PUSH
21195: LD_INT 51
21197: PUSH
21198: LD_INT 52
21200: PUSH
21201: LD_INT 53
21203: PUSH
21204: LD_INT 54
21206: PUSH
21207: LD_INT 55
21209: PUSH
21210: LD_INT 56
21212: PUSH
21213: LD_INT 57
21215: PUSH
21216: LD_INT 58
21218: PUSH
21219: LD_INT 59
21221: PUSH
21222: LD_INT 60
21224: PUSH
21225: LD_INT 61
21227: PUSH
21228: LD_INT 62
21230: PUSH
21231: LD_INT 80
21233: PUSH
21234: LD_INT 82
21236: PUSH
21237: LD_INT 83
21239: PUSH
21240: LD_INT 84
21242: PUSH
21243: LD_INT 85
21245: PUSH
21246: LD_INT 86
21248: PUSH
21249: EMPTY
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: LIST
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: LIST
21285: LIST
21286: LIST
21287: LIST
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: ST_TO_ADDR
21302: GO 21765
21304: LD_INT 2
21306: DOUBLE
21307: EQUAL
21308: IFTRUE 21312
21310: GO 21534
21312: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
21313: LD_ADDR_VAR 0 4
21317: PUSH
21318: LD_INT 35
21320: PUSH
21321: LD_INT 45
21323: PUSH
21324: LD_INT 46
21326: PUSH
21327: LD_INT 47
21329: PUSH
21330: LD_INT 82
21332: PUSH
21333: LD_INT 83
21335: PUSH
21336: LD_INT 84
21338: PUSH
21339: LD_INT 85
21341: PUSH
21342: LD_INT 87
21344: PUSH
21345: LD_INT 70
21347: PUSH
21348: LD_INT 1
21350: PUSH
21351: LD_INT 11
21353: PUSH
21354: LD_INT 3
21356: PUSH
21357: LD_INT 4
21359: PUSH
21360: LD_INT 5
21362: PUSH
21363: LD_INT 6
21365: PUSH
21366: LD_INT 15
21368: PUSH
21369: LD_INT 18
21371: PUSH
21372: LD_INT 7
21374: PUSH
21375: LD_INT 17
21377: PUSH
21378: LD_INT 8
21380: PUSH
21381: LD_INT 20
21383: PUSH
21384: LD_INT 21
21386: PUSH
21387: LD_INT 22
21389: PUSH
21390: LD_INT 72
21392: PUSH
21393: LD_INT 26
21395: PUSH
21396: LD_INT 69
21398: PUSH
21399: LD_INT 39
21401: PUSH
21402: LD_INT 40
21404: PUSH
21405: LD_INT 41
21407: PUSH
21408: LD_INT 42
21410: PUSH
21411: LD_INT 43
21413: PUSH
21414: LD_INT 48
21416: PUSH
21417: LD_INT 49
21419: PUSH
21420: LD_INT 50
21422: PUSH
21423: LD_INT 51
21425: PUSH
21426: LD_INT 52
21428: PUSH
21429: LD_INT 53
21431: PUSH
21432: LD_INT 54
21434: PUSH
21435: LD_INT 55
21437: PUSH
21438: LD_INT 56
21440: PUSH
21441: LD_INT 60
21443: PUSH
21444: LD_INT 61
21446: PUSH
21447: LD_INT 62
21449: PUSH
21450: LD_INT 66
21452: PUSH
21453: LD_INT 67
21455: PUSH
21456: LD_INT 68
21458: PUSH
21459: LD_INT 81
21461: PUSH
21462: LD_INT 82
21464: PUSH
21465: LD_INT 83
21467: PUSH
21468: LD_INT 84
21470: PUSH
21471: LD_INT 85
21473: PUSH
21474: LD_INT 87
21476: PUSH
21477: EMPTY
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: ST_TO_ADDR
21532: GO 21765
21534: LD_INT 3
21536: DOUBLE
21537: EQUAL
21538: IFTRUE 21542
21540: GO 21764
21542: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
21543: LD_ADDR_VAR 0 4
21547: PUSH
21548: LD_INT 46
21550: PUSH
21551: LD_INT 47
21553: PUSH
21554: LD_INT 1
21556: PUSH
21557: LD_INT 2
21559: PUSH
21560: LD_INT 82
21562: PUSH
21563: LD_INT 83
21565: PUSH
21566: LD_INT 84
21568: PUSH
21569: LD_INT 85
21571: PUSH
21572: LD_INT 86
21574: PUSH
21575: LD_INT 11
21577: PUSH
21578: LD_INT 9
21580: PUSH
21581: LD_INT 20
21583: PUSH
21584: LD_INT 19
21586: PUSH
21587: LD_INT 21
21589: PUSH
21590: LD_INT 24
21592: PUSH
21593: LD_INT 22
21595: PUSH
21596: LD_INT 25
21598: PUSH
21599: LD_INT 28
21601: PUSH
21602: LD_INT 29
21604: PUSH
21605: LD_INT 30
21607: PUSH
21608: LD_INT 31
21610: PUSH
21611: LD_INT 37
21613: PUSH
21614: LD_INT 38
21616: PUSH
21617: LD_INT 32
21619: PUSH
21620: LD_INT 27
21622: PUSH
21623: LD_INT 33
21625: PUSH
21626: LD_INT 69
21628: PUSH
21629: LD_INT 39
21631: PUSH
21632: LD_INT 34
21634: PUSH
21635: LD_INT 40
21637: PUSH
21638: LD_INT 71
21640: PUSH
21641: LD_INT 23
21643: PUSH
21644: LD_INT 44
21646: PUSH
21647: LD_INT 48
21649: PUSH
21650: LD_INT 49
21652: PUSH
21653: LD_INT 50
21655: PUSH
21656: LD_INT 51
21658: PUSH
21659: LD_INT 52
21661: PUSH
21662: LD_INT 53
21664: PUSH
21665: LD_INT 54
21667: PUSH
21668: LD_INT 55
21670: PUSH
21671: LD_INT 56
21673: PUSH
21674: LD_INT 57
21676: PUSH
21677: LD_INT 58
21679: PUSH
21680: LD_INT 59
21682: PUSH
21683: LD_INT 63
21685: PUSH
21686: LD_INT 64
21688: PUSH
21689: LD_INT 65
21691: PUSH
21692: LD_INT 82
21694: PUSH
21695: LD_INT 83
21697: PUSH
21698: LD_INT 84
21700: PUSH
21701: LD_INT 85
21703: PUSH
21704: LD_INT 86
21706: PUSH
21707: EMPTY
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: LIST
21759: LIST
21760: LIST
21761: ST_TO_ADDR
21762: GO 21765
21764: POP
// if state > - 1 and state < 3 then
21765: LD_VAR 0 3
21769: PUSH
21770: LD_INT 1
21772: NEG
21773: GREATER
21774: PUSH
21775: LD_VAR 0 3
21779: PUSH
21780: LD_INT 3
21782: LESS
21783: AND
21784: IFFALSE 21841
// for i in result do
21786: LD_ADDR_VAR 0 5
21790: PUSH
21791: LD_VAR 0 4
21795: PUSH
21796: FOR_IN
21797: IFFALSE 21839
// if GetTech ( i , side ) <> state then
21799: LD_VAR 0 5
21803: PPUSH
21804: LD_VAR 0 1
21808: PPUSH
21809: CALL_OW 321
21813: PUSH
21814: LD_VAR 0 3
21818: NONEQUAL
21819: IFFALSE 21837
// result := result diff i ;
21821: LD_ADDR_VAR 0 4
21825: PUSH
21826: LD_VAR 0 4
21830: PUSH
21831: LD_VAR 0 5
21835: DIFF
21836: ST_TO_ADDR
21837: GO 21796
21839: POP
21840: POP
// end ;
21841: LD_VAR 0 4
21845: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
21846: LD_INT 0
21848: PPUSH
21849: PPUSH
21850: PPUSH
// result := true ;
21851: LD_ADDR_VAR 0 3
21855: PUSH
21856: LD_INT 1
21858: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
21859: LD_ADDR_VAR 0 5
21863: PUSH
21864: LD_VAR 0 2
21868: PPUSH
21869: CALL_OW 480
21873: ST_TO_ADDR
// if not tmp then
21874: LD_VAR 0 5
21878: NOT
21879: IFFALSE 21883
// exit ;
21881: GO 21932
// for i in tmp do
21883: LD_ADDR_VAR 0 4
21887: PUSH
21888: LD_VAR 0 5
21892: PUSH
21893: FOR_IN
21894: IFFALSE 21930
// if GetTech ( i , side ) <> state_researched then
21896: LD_VAR 0 4
21900: PPUSH
21901: LD_VAR 0 1
21905: PPUSH
21906: CALL_OW 321
21910: PUSH
21911: LD_INT 2
21913: NONEQUAL
21914: IFFALSE 21928
// begin result := false ;
21916: LD_ADDR_VAR 0 3
21920: PUSH
21921: LD_INT 0
21923: ST_TO_ADDR
// exit ;
21924: POP
21925: POP
21926: GO 21932
// end ;
21928: GO 21893
21930: POP
21931: POP
// end ;
21932: LD_VAR 0 3
21936: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
21937: LD_INT 0
21939: PPUSH
21940: PPUSH
21941: PPUSH
21942: PPUSH
21943: PPUSH
21944: PPUSH
21945: PPUSH
21946: PPUSH
21947: PPUSH
21948: PPUSH
21949: PPUSH
21950: PPUSH
21951: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
21952: LD_VAR 0 1
21956: NOT
21957: PUSH
21958: LD_VAR 0 1
21962: PPUSH
21963: CALL_OW 257
21967: PUSH
21968: LD_INT 9
21970: NONEQUAL
21971: OR
21972: IFFALSE 21976
// exit ;
21974: GO 22549
// side := GetSide ( unit ) ;
21976: LD_ADDR_VAR 0 9
21980: PUSH
21981: LD_VAR 0 1
21985: PPUSH
21986: CALL_OW 255
21990: ST_TO_ADDR
// tech_space := tech_spacanom ;
21991: LD_ADDR_VAR 0 12
21995: PUSH
21996: LD_INT 29
21998: ST_TO_ADDR
// tech_time := tech_taurad ;
21999: LD_ADDR_VAR 0 13
22003: PUSH
22004: LD_INT 28
22006: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
22007: LD_ADDR_VAR 0 11
22011: PUSH
22012: LD_VAR 0 1
22016: PPUSH
22017: CALL_OW 310
22021: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
22022: LD_VAR 0 11
22026: PPUSH
22027: CALL_OW 247
22031: PUSH
22032: LD_INT 2
22034: EQUAL
22035: IFFALSE 22039
// exit ;
22037: GO 22549
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22039: LD_ADDR_VAR 0 8
22043: PUSH
22044: LD_INT 81
22046: PUSH
22047: LD_VAR 0 9
22051: PUSH
22052: EMPTY
22053: LIST
22054: LIST
22055: PUSH
22056: LD_INT 3
22058: PUSH
22059: LD_INT 21
22061: PUSH
22062: LD_INT 3
22064: PUSH
22065: EMPTY
22066: LIST
22067: LIST
22068: PUSH
22069: EMPTY
22070: LIST
22071: LIST
22072: PUSH
22073: EMPTY
22074: LIST
22075: LIST
22076: PPUSH
22077: CALL_OW 69
22081: ST_TO_ADDR
// if not tmp then
22082: LD_VAR 0 8
22086: NOT
22087: IFFALSE 22091
// exit ;
22089: GO 22549
// if in_unit then
22091: LD_VAR 0 11
22095: IFFALSE 22119
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
22097: LD_ADDR_VAR 0 10
22101: PUSH
22102: LD_VAR 0 8
22106: PPUSH
22107: LD_VAR 0 11
22111: PPUSH
22112: CALL_OW 74
22116: ST_TO_ADDR
22117: GO 22139
// enemy := NearestUnitToUnit ( tmp , unit ) ;
22119: LD_ADDR_VAR 0 10
22123: PUSH
22124: LD_VAR 0 8
22128: PPUSH
22129: LD_VAR 0 1
22133: PPUSH
22134: CALL_OW 74
22138: ST_TO_ADDR
// if not enemy then
22139: LD_VAR 0 10
22143: NOT
22144: IFFALSE 22148
// exit ;
22146: GO 22549
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
22148: LD_VAR 0 11
22152: PUSH
22153: LD_VAR 0 11
22157: PPUSH
22158: LD_VAR 0 10
22162: PPUSH
22163: CALL_OW 296
22167: PUSH
22168: LD_INT 13
22170: GREATER
22171: AND
22172: PUSH
22173: LD_VAR 0 1
22177: PPUSH
22178: LD_VAR 0 10
22182: PPUSH
22183: CALL_OW 296
22187: PUSH
22188: LD_INT 12
22190: GREATER
22191: OR
22192: IFFALSE 22196
// exit ;
22194: GO 22549
// missile := [ 1 ] ;
22196: LD_ADDR_VAR 0 14
22200: PUSH
22201: LD_INT 1
22203: PUSH
22204: EMPTY
22205: LIST
22206: ST_TO_ADDR
// if Researched ( side , tech_space ) then
22207: LD_VAR 0 9
22211: PPUSH
22212: LD_VAR 0 12
22216: PPUSH
22217: CALL_OW 325
22221: IFFALSE 22250
// missile := Insert ( missile , missile + 1 , 2 ) ;
22223: LD_ADDR_VAR 0 14
22227: PUSH
22228: LD_VAR 0 14
22232: PPUSH
22233: LD_VAR 0 14
22237: PUSH
22238: LD_INT 1
22240: PLUS
22241: PPUSH
22242: LD_INT 2
22244: PPUSH
22245: CALL_OW 2
22249: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
22250: LD_VAR 0 9
22254: PPUSH
22255: LD_VAR 0 13
22259: PPUSH
22260: CALL_OW 325
22264: PUSH
22265: LD_VAR 0 10
22269: PPUSH
22270: CALL_OW 255
22274: PPUSH
22275: LD_VAR 0 13
22279: PPUSH
22280: CALL_OW 325
22284: NOT
22285: AND
22286: IFFALSE 22315
// missile := Insert ( missile , missile + 1 , 3 ) ;
22288: LD_ADDR_VAR 0 14
22292: PUSH
22293: LD_VAR 0 14
22297: PPUSH
22298: LD_VAR 0 14
22302: PUSH
22303: LD_INT 1
22305: PLUS
22306: PPUSH
22307: LD_INT 3
22309: PPUSH
22310: CALL_OW 2
22314: ST_TO_ADDR
// if missile < 2 then
22315: LD_VAR 0 14
22319: PUSH
22320: LD_INT 2
22322: LESS
22323: IFFALSE 22327
// exit ;
22325: GO 22549
// x := GetX ( enemy ) ;
22327: LD_ADDR_VAR 0 4
22331: PUSH
22332: LD_VAR 0 10
22336: PPUSH
22337: CALL_OW 250
22341: ST_TO_ADDR
// y := GetY ( enemy ) ;
22342: LD_ADDR_VAR 0 5
22346: PUSH
22347: LD_VAR 0 10
22351: PPUSH
22352: CALL_OW 251
22356: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
22357: LD_ADDR_VAR 0 6
22361: PUSH
22362: LD_VAR 0 4
22366: PUSH
22367: LD_INT 1
22369: NEG
22370: PPUSH
22371: LD_INT 1
22373: PPUSH
22374: CALL_OW 12
22378: PLUS
22379: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
22380: LD_ADDR_VAR 0 7
22384: PUSH
22385: LD_VAR 0 5
22389: PUSH
22390: LD_INT 1
22392: NEG
22393: PPUSH
22394: LD_INT 1
22396: PPUSH
22397: CALL_OW 12
22401: PLUS
22402: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22403: LD_VAR 0 6
22407: PPUSH
22408: LD_VAR 0 7
22412: PPUSH
22413: CALL_OW 488
22417: NOT
22418: IFFALSE 22440
// begin _x := x ;
22420: LD_ADDR_VAR 0 6
22424: PUSH
22425: LD_VAR 0 4
22429: ST_TO_ADDR
// _y := y ;
22430: LD_ADDR_VAR 0 7
22434: PUSH
22435: LD_VAR 0 5
22439: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
22440: LD_ADDR_VAR 0 3
22444: PUSH
22445: LD_INT 1
22447: PPUSH
22448: LD_VAR 0 14
22452: PPUSH
22453: CALL_OW 12
22457: ST_TO_ADDR
// case i of 1 :
22458: LD_VAR 0 3
22462: PUSH
22463: LD_INT 1
22465: DOUBLE
22466: EQUAL
22467: IFTRUE 22471
22469: GO 22488
22471: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
22472: LD_VAR 0 1
22476: PPUSH
22477: LD_VAR 0 10
22481: PPUSH
22482: CALL_OW 115
22486: GO 22549
22488: LD_INT 2
22490: DOUBLE
22491: EQUAL
22492: IFTRUE 22496
22494: GO 22518
22496: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
22497: LD_VAR 0 1
22501: PPUSH
22502: LD_VAR 0 6
22506: PPUSH
22507: LD_VAR 0 7
22511: PPUSH
22512: CALL_OW 153
22516: GO 22549
22518: LD_INT 3
22520: DOUBLE
22521: EQUAL
22522: IFTRUE 22526
22524: GO 22548
22526: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
22527: LD_VAR 0 1
22531: PPUSH
22532: LD_VAR 0 6
22536: PPUSH
22537: LD_VAR 0 7
22541: PPUSH
22542: CALL_OW 154
22546: GO 22549
22548: POP
// end ;
22549: LD_VAR 0 2
22553: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
22554: LD_INT 0
22556: PPUSH
22557: PPUSH
22558: PPUSH
22559: PPUSH
22560: PPUSH
22561: PPUSH
// if not unit or not building then
22562: LD_VAR 0 1
22566: NOT
22567: PUSH
22568: LD_VAR 0 2
22572: NOT
22573: OR
22574: IFFALSE 22578
// exit ;
22576: GO 22736
// x := GetX ( building ) ;
22578: LD_ADDR_VAR 0 5
22582: PUSH
22583: LD_VAR 0 2
22587: PPUSH
22588: CALL_OW 250
22592: ST_TO_ADDR
// y := GetY ( building ) ;
22593: LD_ADDR_VAR 0 6
22597: PUSH
22598: LD_VAR 0 2
22602: PPUSH
22603: CALL_OW 251
22607: ST_TO_ADDR
// for i = 0 to 5 do
22608: LD_ADDR_VAR 0 4
22612: PUSH
22613: DOUBLE
22614: LD_INT 0
22616: DEC
22617: ST_TO_ADDR
22618: LD_INT 5
22620: PUSH
22621: FOR_TO
22622: IFFALSE 22734
// begin _x := ShiftX ( x , i , 3 ) ;
22624: LD_ADDR_VAR 0 7
22628: PUSH
22629: LD_VAR 0 5
22633: PPUSH
22634: LD_VAR 0 4
22638: PPUSH
22639: LD_INT 3
22641: PPUSH
22642: CALL_OW 272
22646: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
22647: LD_ADDR_VAR 0 8
22651: PUSH
22652: LD_VAR 0 6
22656: PPUSH
22657: LD_VAR 0 4
22661: PPUSH
22662: LD_INT 3
22664: PPUSH
22665: CALL_OW 273
22669: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22670: LD_VAR 0 7
22674: PPUSH
22675: LD_VAR 0 8
22679: PPUSH
22680: CALL_OW 488
22684: NOT
22685: IFFALSE 22689
// continue ;
22687: GO 22621
// if HexInfo ( _x , _y ) = 0 then
22689: LD_VAR 0 7
22693: PPUSH
22694: LD_VAR 0 8
22698: PPUSH
22699: CALL_OW 428
22703: PUSH
22704: LD_INT 0
22706: EQUAL
22707: IFFALSE 22732
// begin ComMoveXY ( unit , _x , _y ) ;
22709: LD_VAR 0 1
22713: PPUSH
22714: LD_VAR 0 7
22718: PPUSH
22719: LD_VAR 0 8
22723: PPUSH
22724: CALL_OW 111
// exit ;
22728: POP
22729: POP
22730: GO 22736
// end ; end ;
22732: GO 22621
22734: POP
22735: POP
// end ;
22736: LD_VAR 0 3
22740: RET
// export function ScanBase ( side , base_area ) ; begin
22741: LD_INT 0
22743: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
22744: LD_ADDR_VAR 0 3
22748: PUSH
22749: LD_VAR 0 2
22753: PPUSH
22754: LD_INT 81
22756: PUSH
22757: LD_VAR 0 1
22761: PUSH
22762: EMPTY
22763: LIST
22764: LIST
22765: PPUSH
22766: CALL_OW 70
22770: ST_TO_ADDR
// end ;
22771: LD_VAR 0 3
22775: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
22776: LD_INT 0
22778: PPUSH
22779: PPUSH
22780: PPUSH
22781: PPUSH
// result := false ;
22782: LD_ADDR_VAR 0 2
22786: PUSH
22787: LD_INT 0
22789: ST_TO_ADDR
// side := GetSide ( unit ) ;
22790: LD_ADDR_VAR 0 3
22794: PUSH
22795: LD_VAR 0 1
22799: PPUSH
22800: CALL_OW 255
22804: ST_TO_ADDR
// nat := GetNation ( unit ) ;
22805: LD_ADDR_VAR 0 4
22809: PUSH
22810: LD_VAR 0 1
22814: PPUSH
22815: CALL_OW 248
22819: ST_TO_ADDR
// case nat of 1 :
22820: LD_VAR 0 4
22824: PUSH
22825: LD_INT 1
22827: DOUBLE
22828: EQUAL
22829: IFTRUE 22833
22831: GO 22844
22833: POP
// tech := tech_lassight ; 2 :
22834: LD_ADDR_VAR 0 5
22838: PUSH
22839: LD_INT 12
22841: ST_TO_ADDR
22842: GO 22883
22844: LD_INT 2
22846: DOUBLE
22847: EQUAL
22848: IFTRUE 22852
22850: GO 22863
22852: POP
// tech := tech_mortar ; 3 :
22853: LD_ADDR_VAR 0 5
22857: PUSH
22858: LD_INT 41
22860: ST_TO_ADDR
22861: GO 22883
22863: LD_INT 3
22865: DOUBLE
22866: EQUAL
22867: IFTRUE 22871
22869: GO 22882
22871: POP
// tech := tech_bazooka ; end ;
22872: LD_ADDR_VAR 0 5
22876: PUSH
22877: LD_INT 44
22879: ST_TO_ADDR
22880: GO 22883
22882: POP
// if Researched ( side , tech ) then
22883: LD_VAR 0 3
22887: PPUSH
22888: LD_VAR 0 5
22892: PPUSH
22893: CALL_OW 325
22897: IFFALSE 22924
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
22899: LD_ADDR_VAR 0 2
22903: PUSH
22904: LD_INT 5
22906: PUSH
22907: LD_INT 8
22909: PUSH
22910: LD_INT 9
22912: PUSH
22913: EMPTY
22914: LIST
22915: LIST
22916: LIST
22917: PUSH
22918: LD_VAR 0 4
22922: ARRAY
22923: ST_TO_ADDR
// end ;
22924: LD_VAR 0 2
22928: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
22929: LD_INT 0
22931: PPUSH
22932: PPUSH
22933: PPUSH
// if not mines then
22934: LD_VAR 0 2
22938: NOT
22939: IFFALSE 22943
// exit ;
22941: GO 23087
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22943: LD_ADDR_VAR 0 5
22947: PUSH
22948: LD_INT 81
22950: PUSH
22951: LD_VAR 0 1
22955: PUSH
22956: EMPTY
22957: LIST
22958: LIST
22959: PUSH
22960: LD_INT 3
22962: PUSH
22963: LD_INT 21
22965: PUSH
22966: LD_INT 3
22968: PUSH
22969: EMPTY
22970: LIST
22971: LIST
22972: PUSH
22973: EMPTY
22974: LIST
22975: LIST
22976: PUSH
22977: EMPTY
22978: LIST
22979: LIST
22980: PPUSH
22981: CALL_OW 69
22985: ST_TO_ADDR
// for i in mines do
22986: LD_ADDR_VAR 0 4
22990: PUSH
22991: LD_VAR 0 2
22995: PUSH
22996: FOR_IN
22997: IFFALSE 23085
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
22999: LD_VAR 0 4
23003: PUSH
23004: LD_INT 1
23006: ARRAY
23007: PPUSH
23008: LD_VAR 0 4
23012: PUSH
23013: LD_INT 2
23015: ARRAY
23016: PPUSH
23017: CALL_OW 458
23021: NOT
23022: IFFALSE 23026
// continue ;
23024: GO 22996
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23026: LD_VAR 0 4
23030: PUSH
23031: LD_INT 1
23033: ARRAY
23034: PPUSH
23035: LD_VAR 0 4
23039: PUSH
23040: LD_INT 2
23042: ARRAY
23043: PPUSH
23044: CALL_OW 428
23048: PUSH
23049: LD_VAR 0 5
23053: IN
23054: IFFALSE 23083
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23056: LD_VAR 0 4
23060: PUSH
23061: LD_INT 1
23063: ARRAY
23064: PPUSH
23065: LD_VAR 0 4
23069: PUSH
23070: LD_INT 2
23072: ARRAY
23073: PPUSH
23074: LD_VAR 0 1
23078: PPUSH
23079: CALL_OW 456
// end ;
23083: GO 22996
23085: POP
23086: POP
// end ;
23087: LD_VAR 0 3
23091: RET
// export function Count ( array ) ; var i ; begin
23092: LD_INT 0
23094: PPUSH
23095: PPUSH
// result := 0 ;
23096: LD_ADDR_VAR 0 2
23100: PUSH
23101: LD_INT 0
23103: ST_TO_ADDR
// for i in array do
23104: LD_ADDR_VAR 0 3
23108: PUSH
23109: LD_VAR 0 1
23113: PUSH
23114: FOR_IN
23115: IFFALSE 23139
// if i then
23117: LD_VAR 0 3
23121: IFFALSE 23137
// result := result + 1 ;
23123: LD_ADDR_VAR 0 2
23127: PUSH
23128: LD_VAR 0 2
23132: PUSH
23133: LD_INT 1
23135: PLUS
23136: ST_TO_ADDR
23137: GO 23114
23139: POP
23140: POP
// end ;
23141: LD_VAR 0 2
23145: RET
// export function IsEmpty ( building ) ; begin
23146: LD_INT 0
23148: PPUSH
// if not building then
23149: LD_VAR 0 1
23153: NOT
23154: IFFALSE 23158
// exit ;
23156: GO 23201
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23158: LD_ADDR_VAR 0 2
23162: PUSH
23163: LD_VAR 0 1
23167: PUSH
23168: LD_INT 22
23170: PUSH
23171: LD_VAR 0 1
23175: PPUSH
23176: CALL_OW 255
23180: PUSH
23181: EMPTY
23182: LIST
23183: LIST
23184: PUSH
23185: LD_INT 58
23187: PUSH
23188: EMPTY
23189: LIST
23190: PUSH
23191: EMPTY
23192: LIST
23193: LIST
23194: PPUSH
23195: CALL_OW 69
23199: IN
23200: ST_TO_ADDR
// end ;
23201: LD_VAR 0 2
23205: RET
// export function IsNotFull ( building ) ; begin
23206: LD_INT 0
23208: PPUSH
// if not building then
23209: LD_VAR 0 1
23213: NOT
23214: IFFALSE 23218
// exit ;
23216: GO 23237
// result := UnitsInside ( building ) < 6 ;
23218: LD_ADDR_VAR 0 2
23222: PUSH
23223: LD_VAR 0 1
23227: PPUSH
23228: CALL_OW 313
23232: PUSH
23233: LD_INT 6
23235: LESS
23236: ST_TO_ADDR
// end ;
23237: LD_VAR 0 2
23241: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
23242: LD_INT 0
23244: PPUSH
23245: PPUSH
23246: PPUSH
23247: PPUSH
// tmp := [ ] ;
23248: LD_ADDR_VAR 0 3
23252: PUSH
23253: EMPTY
23254: ST_TO_ADDR
// list := [ ] ;
23255: LD_ADDR_VAR 0 5
23259: PUSH
23260: EMPTY
23261: ST_TO_ADDR
// for i = 16 to 25 do
23262: LD_ADDR_VAR 0 4
23266: PUSH
23267: DOUBLE
23268: LD_INT 16
23270: DEC
23271: ST_TO_ADDR
23272: LD_INT 25
23274: PUSH
23275: FOR_TO
23276: IFFALSE 23349
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
23278: LD_ADDR_VAR 0 3
23282: PUSH
23283: LD_VAR 0 3
23287: PUSH
23288: LD_INT 22
23290: PUSH
23291: LD_VAR 0 1
23295: PPUSH
23296: CALL_OW 255
23300: PUSH
23301: EMPTY
23302: LIST
23303: LIST
23304: PUSH
23305: LD_INT 91
23307: PUSH
23308: LD_VAR 0 1
23312: PUSH
23313: LD_INT 6
23315: PUSH
23316: EMPTY
23317: LIST
23318: LIST
23319: LIST
23320: PUSH
23321: LD_INT 30
23323: PUSH
23324: LD_VAR 0 4
23328: PUSH
23329: EMPTY
23330: LIST
23331: LIST
23332: PUSH
23333: EMPTY
23334: LIST
23335: LIST
23336: LIST
23337: PUSH
23338: EMPTY
23339: LIST
23340: PPUSH
23341: CALL_OW 69
23345: ADD
23346: ST_TO_ADDR
23347: GO 23275
23349: POP
23350: POP
// for i = 1 to tmp do
23351: LD_ADDR_VAR 0 4
23355: PUSH
23356: DOUBLE
23357: LD_INT 1
23359: DEC
23360: ST_TO_ADDR
23361: LD_VAR 0 3
23365: PUSH
23366: FOR_TO
23367: IFFALSE 23455
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
23369: LD_ADDR_VAR 0 5
23373: PUSH
23374: LD_VAR 0 5
23378: PUSH
23379: LD_VAR 0 3
23383: PUSH
23384: LD_VAR 0 4
23388: ARRAY
23389: PPUSH
23390: CALL_OW 266
23394: PUSH
23395: LD_VAR 0 3
23399: PUSH
23400: LD_VAR 0 4
23404: ARRAY
23405: PPUSH
23406: CALL_OW 250
23410: PUSH
23411: LD_VAR 0 3
23415: PUSH
23416: LD_VAR 0 4
23420: ARRAY
23421: PPUSH
23422: CALL_OW 251
23426: PUSH
23427: LD_VAR 0 3
23431: PUSH
23432: LD_VAR 0 4
23436: ARRAY
23437: PPUSH
23438: CALL_OW 254
23442: PUSH
23443: EMPTY
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: PUSH
23449: EMPTY
23450: LIST
23451: ADD
23452: ST_TO_ADDR
23453: GO 23366
23455: POP
23456: POP
// result := list ;
23457: LD_ADDR_VAR 0 2
23461: PUSH
23462: LD_VAR 0 5
23466: ST_TO_ADDR
// end ;
23467: LD_VAR 0 2
23471: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
23472: LD_INT 0
23474: PPUSH
23475: PPUSH
23476: PPUSH
23477: PPUSH
23478: PPUSH
23479: PPUSH
23480: PPUSH
// if not factory then
23481: LD_VAR 0 1
23485: NOT
23486: IFFALSE 23490
// exit ;
23488: GO 24083
// if control = control_apeman then
23490: LD_VAR 0 4
23494: PUSH
23495: LD_INT 5
23497: EQUAL
23498: IFFALSE 23607
// begin tmp := UnitsInside ( factory ) ;
23500: LD_ADDR_VAR 0 8
23504: PUSH
23505: LD_VAR 0 1
23509: PPUSH
23510: CALL_OW 313
23514: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
23515: LD_VAR 0 8
23519: PPUSH
23520: LD_INT 25
23522: PUSH
23523: LD_INT 12
23525: PUSH
23526: EMPTY
23527: LIST
23528: LIST
23529: PPUSH
23530: CALL_OW 72
23534: NOT
23535: IFFALSE 23545
// control := control_manual ;
23537: LD_ADDR_VAR 0 4
23541: PUSH
23542: LD_INT 1
23544: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
23545: LD_ADDR_VAR 0 8
23549: PUSH
23550: LD_VAR 0 1
23554: PPUSH
23555: CALL 23242 0 1
23559: ST_TO_ADDR
// if tmp then
23560: LD_VAR 0 8
23564: IFFALSE 23607
// begin for i in tmp do
23566: LD_ADDR_VAR 0 7
23570: PUSH
23571: LD_VAR 0 8
23575: PUSH
23576: FOR_IN
23577: IFFALSE 23605
// if i [ 1 ] = b_ext_radio then
23579: LD_VAR 0 7
23583: PUSH
23584: LD_INT 1
23586: ARRAY
23587: PUSH
23588: LD_INT 22
23590: EQUAL
23591: IFFALSE 23603
// begin control := control_remote ;
23593: LD_ADDR_VAR 0 4
23597: PUSH
23598: LD_INT 2
23600: ST_TO_ADDR
// break ;
23601: GO 23605
// end ;
23603: GO 23576
23605: POP
23606: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23607: LD_VAR 0 1
23611: PPUSH
23612: LD_VAR 0 2
23616: PPUSH
23617: LD_VAR 0 3
23621: PPUSH
23622: LD_VAR 0 4
23626: PPUSH
23627: LD_VAR 0 5
23631: PPUSH
23632: CALL_OW 448
23636: IFFALSE 23671
// begin result := [ chassis , engine , control , weapon ] ;
23638: LD_ADDR_VAR 0 6
23642: PUSH
23643: LD_VAR 0 2
23647: PUSH
23648: LD_VAR 0 3
23652: PUSH
23653: LD_VAR 0 4
23657: PUSH
23658: LD_VAR 0 5
23662: PUSH
23663: EMPTY
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: ST_TO_ADDR
// exit ;
23669: GO 24083
// end ; _chassis := AvailableChassisList ( factory ) ;
23671: LD_ADDR_VAR 0 9
23675: PUSH
23676: LD_VAR 0 1
23680: PPUSH
23681: CALL_OW 475
23685: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
23686: LD_ADDR_VAR 0 11
23690: PUSH
23691: LD_VAR 0 1
23695: PPUSH
23696: CALL_OW 476
23700: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
23701: LD_ADDR_VAR 0 12
23705: PUSH
23706: LD_VAR 0 1
23710: PPUSH
23711: CALL_OW 477
23715: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
23716: LD_ADDR_VAR 0 10
23720: PUSH
23721: LD_VAR 0 1
23725: PPUSH
23726: CALL_OW 478
23730: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
23731: LD_VAR 0 9
23735: NOT
23736: PUSH
23737: LD_VAR 0 11
23741: NOT
23742: OR
23743: PUSH
23744: LD_VAR 0 12
23748: NOT
23749: OR
23750: PUSH
23751: LD_VAR 0 10
23755: NOT
23756: OR
23757: IFFALSE 23792
// begin result := [ chassis , engine , control , weapon ] ;
23759: LD_ADDR_VAR 0 6
23763: PUSH
23764: LD_VAR 0 2
23768: PUSH
23769: LD_VAR 0 3
23773: PUSH
23774: LD_VAR 0 4
23778: PUSH
23779: LD_VAR 0 5
23783: PUSH
23784: EMPTY
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: ST_TO_ADDR
// exit ;
23790: GO 24083
// end ; if not chassis in _chassis then
23792: LD_VAR 0 2
23796: PUSH
23797: LD_VAR 0 9
23801: IN
23802: NOT
23803: IFFALSE 23829
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
23805: LD_ADDR_VAR 0 2
23809: PUSH
23810: LD_VAR 0 9
23814: PUSH
23815: LD_INT 1
23817: PPUSH
23818: LD_VAR 0 9
23822: PPUSH
23823: CALL_OW 12
23827: ARRAY
23828: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
23829: LD_VAR 0 2
23833: PPUSH
23834: LD_VAR 0 3
23838: PPUSH
23839: CALL 24088 0 2
23843: NOT
23844: IFFALSE 23903
// repeat engine := _engine [ 1 ] ;
23846: LD_ADDR_VAR 0 3
23850: PUSH
23851: LD_VAR 0 11
23855: PUSH
23856: LD_INT 1
23858: ARRAY
23859: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
23860: LD_ADDR_VAR 0 11
23864: PUSH
23865: LD_VAR 0 11
23869: PPUSH
23870: LD_INT 1
23872: PPUSH
23873: CALL_OW 3
23877: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
23878: LD_VAR 0 2
23882: PPUSH
23883: LD_VAR 0 3
23887: PPUSH
23888: CALL 24088 0 2
23892: PUSH
23893: LD_VAR 0 11
23897: PUSH
23898: EMPTY
23899: EQUAL
23900: OR
23901: IFFALSE 23846
// if not control in _control then
23903: LD_VAR 0 4
23907: PUSH
23908: LD_VAR 0 12
23912: IN
23913: NOT
23914: IFFALSE 23940
// control := _control [ rand ( 1 , _control ) ] ;
23916: LD_ADDR_VAR 0 4
23920: PUSH
23921: LD_VAR 0 12
23925: PUSH
23926: LD_INT 1
23928: PPUSH
23929: LD_VAR 0 12
23933: PPUSH
23934: CALL_OW 12
23938: ARRAY
23939: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
23940: LD_VAR 0 2
23944: PPUSH
23945: LD_VAR 0 5
23949: PPUSH
23950: CALL 24308 0 2
23954: NOT
23955: IFFALSE 24014
// repeat weapon := _weapon [ 1 ] ;
23957: LD_ADDR_VAR 0 5
23961: PUSH
23962: LD_VAR 0 10
23966: PUSH
23967: LD_INT 1
23969: ARRAY
23970: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
23971: LD_ADDR_VAR 0 10
23975: PUSH
23976: LD_VAR 0 10
23980: PPUSH
23981: LD_INT 1
23983: PPUSH
23984: CALL_OW 3
23988: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
23989: LD_VAR 0 2
23993: PPUSH
23994: LD_VAR 0 5
23998: PPUSH
23999: CALL 24308 0 2
24003: PUSH
24004: LD_VAR 0 10
24008: PUSH
24009: EMPTY
24010: EQUAL
24011: OR
24012: IFFALSE 23957
// result := [ ] ;
24014: LD_ADDR_VAR 0 6
24018: PUSH
24019: EMPTY
24020: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24021: LD_VAR 0 1
24025: PPUSH
24026: LD_VAR 0 2
24030: PPUSH
24031: LD_VAR 0 3
24035: PPUSH
24036: LD_VAR 0 4
24040: PPUSH
24041: LD_VAR 0 5
24045: PPUSH
24046: CALL_OW 448
24050: IFFALSE 24083
// result := [ chassis , engine , control , weapon ] ;
24052: LD_ADDR_VAR 0 6
24056: PUSH
24057: LD_VAR 0 2
24061: PUSH
24062: LD_VAR 0 3
24066: PUSH
24067: LD_VAR 0 4
24071: PUSH
24072: LD_VAR 0 5
24076: PUSH
24077: EMPTY
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: ST_TO_ADDR
// end ;
24083: LD_VAR 0 6
24087: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24088: LD_INT 0
24090: PPUSH
// if not chassis or not engine then
24091: LD_VAR 0 1
24095: NOT
24096: PUSH
24097: LD_VAR 0 2
24101: NOT
24102: OR
24103: IFFALSE 24107
// exit ;
24105: GO 24303
// case engine of engine_solar :
24107: LD_VAR 0 2
24111: PUSH
24112: LD_INT 2
24114: DOUBLE
24115: EQUAL
24116: IFTRUE 24120
24118: GO 24158
24120: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24121: LD_ADDR_VAR 0 3
24125: PUSH
24126: LD_INT 11
24128: PUSH
24129: LD_INT 12
24131: PUSH
24132: LD_INT 13
24134: PUSH
24135: LD_INT 14
24137: PUSH
24138: LD_INT 1
24140: PUSH
24141: LD_INT 2
24143: PUSH
24144: LD_INT 3
24146: PUSH
24147: EMPTY
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: ST_TO_ADDR
24156: GO 24287
24158: LD_INT 1
24160: DOUBLE
24161: EQUAL
24162: IFTRUE 24166
24164: GO 24228
24166: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24167: LD_ADDR_VAR 0 3
24171: PUSH
24172: LD_INT 11
24174: PUSH
24175: LD_INT 12
24177: PUSH
24178: LD_INT 13
24180: PUSH
24181: LD_INT 14
24183: PUSH
24184: LD_INT 1
24186: PUSH
24187: LD_INT 2
24189: PUSH
24190: LD_INT 3
24192: PUSH
24193: LD_INT 4
24195: PUSH
24196: LD_INT 5
24198: PUSH
24199: LD_INT 21
24201: PUSH
24202: LD_INT 23
24204: PUSH
24205: LD_INT 22
24207: PUSH
24208: LD_INT 24
24210: PUSH
24211: EMPTY
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: ST_TO_ADDR
24226: GO 24287
24228: LD_INT 3
24230: DOUBLE
24231: EQUAL
24232: IFTRUE 24236
24234: GO 24286
24236: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24237: LD_ADDR_VAR 0 3
24241: PUSH
24242: LD_INT 13
24244: PUSH
24245: LD_INT 14
24247: PUSH
24248: LD_INT 2
24250: PUSH
24251: LD_INT 3
24253: PUSH
24254: LD_INT 4
24256: PUSH
24257: LD_INT 5
24259: PUSH
24260: LD_INT 21
24262: PUSH
24263: LD_INT 22
24265: PUSH
24266: LD_INT 23
24268: PUSH
24269: LD_INT 24
24271: PUSH
24272: EMPTY
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: ST_TO_ADDR
24284: GO 24287
24286: POP
// result := ( chassis in result ) ;
24287: LD_ADDR_VAR 0 3
24291: PUSH
24292: LD_VAR 0 1
24296: PUSH
24297: LD_VAR 0 3
24301: IN
24302: ST_TO_ADDR
// end ;
24303: LD_VAR 0 3
24307: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
24308: LD_INT 0
24310: PPUSH
// if not chassis or not weapon then
24311: LD_VAR 0 1
24315: NOT
24316: PUSH
24317: LD_VAR 0 2
24321: NOT
24322: OR
24323: IFFALSE 24327
// exit ;
24325: GO 25353
// case weapon of us_machine_gun :
24327: LD_VAR 0 2
24331: PUSH
24332: LD_INT 2
24334: DOUBLE
24335: EQUAL
24336: IFTRUE 24340
24338: GO 24370
24340: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
24341: LD_ADDR_VAR 0 3
24345: PUSH
24346: LD_INT 1
24348: PUSH
24349: LD_INT 2
24351: PUSH
24352: LD_INT 3
24354: PUSH
24355: LD_INT 4
24357: PUSH
24358: LD_INT 5
24360: PUSH
24361: EMPTY
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: ST_TO_ADDR
24368: GO 25337
24370: LD_INT 3
24372: DOUBLE
24373: EQUAL
24374: IFTRUE 24378
24376: GO 24408
24378: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
24379: LD_ADDR_VAR 0 3
24383: PUSH
24384: LD_INT 1
24386: PUSH
24387: LD_INT 2
24389: PUSH
24390: LD_INT 3
24392: PUSH
24393: LD_INT 4
24395: PUSH
24396: LD_INT 5
24398: PUSH
24399: EMPTY
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: ST_TO_ADDR
24406: GO 25337
24408: LD_INT 11
24410: DOUBLE
24411: EQUAL
24412: IFTRUE 24416
24414: GO 24446
24416: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
24417: LD_ADDR_VAR 0 3
24421: PUSH
24422: LD_INT 1
24424: PUSH
24425: LD_INT 2
24427: PUSH
24428: LD_INT 3
24430: PUSH
24431: LD_INT 4
24433: PUSH
24434: LD_INT 5
24436: PUSH
24437: EMPTY
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: ST_TO_ADDR
24444: GO 25337
24446: LD_INT 4
24448: DOUBLE
24449: EQUAL
24450: IFTRUE 24454
24452: GO 24480
24454: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
24455: LD_ADDR_VAR 0 3
24459: PUSH
24460: LD_INT 2
24462: PUSH
24463: LD_INT 3
24465: PUSH
24466: LD_INT 4
24468: PUSH
24469: LD_INT 5
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: ST_TO_ADDR
24478: GO 25337
24480: LD_INT 5
24482: DOUBLE
24483: EQUAL
24484: IFTRUE 24488
24486: GO 24514
24488: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
24489: LD_ADDR_VAR 0 3
24493: PUSH
24494: LD_INT 2
24496: PUSH
24497: LD_INT 3
24499: PUSH
24500: LD_INT 4
24502: PUSH
24503: LD_INT 5
24505: PUSH
24506: EMPTY
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: ST_TO_ADDR
24512: GO 25337
24514: LD_INT 9
24516: DOUBLE
24517: EQUAL
24518: IFTRUE 24522
24520: GO 24548
24522: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
24523: LD_ADDR_VAR 0 3
24527: PUSH
24528: LD_INT 2
24530: PUSH
24531: LD_INT 3
24533: PUSH
24534: LD_INT 4
24536: PUSH
24537: LD_INT 5
24539: PUSH
24540: EMPTY
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: ST_TO_ADDR
24546: GO 25337
24548: LD_INT 7
24550: DOUBLE
24551: EQUAL
24552: IFTRUE 24556
24554: GO 24582
24556: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
24557: LD_ADDR_VAR 0 3
24561: PUSH
24562: LD_INT 2
24564: PUSH
24565: LD_INT 3
24567: PUSH
24568: LD_INT 4
24570: PUSH
24571: LD_INT 5
24573: PUSH
24574: EMPTY
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: ST_TO_ADDR
24580: GO 25337
24582: LD_INT 12
24584: DOUBLE
24585: EQUAL
24586: IFTRUE 24590
24588: GO 24616
24590: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
24591: LD_ADDR_VAR 0 3
24595: PUSH
24596: LD_INT 2
24598: PUSH
24599: LD_INT 3
24601: PUSH
24602: LD_INT 4
24604: PUSH
24605: LD_INT 5
24607: PUSH
24608: EMPTY
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: ST_TO_ADDR
24614: GO 25337
24616: LD_INT 13
24618: DOUBLE
24619: EQUAL
24620: IFTRUE 24624
24622: GO 24650
24624: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
24625: LD_ADDR_VAR 0 3
24629: PUSH
24630: LD_INT 2
24632: PUSH
24633: LD_INT 3
24635: PUSH
24636: LD_INT 4
24638: PUSH
24639: LD_INT 5
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: ST_TO_ADDR
24648: GO 25337
24650: LD_INT 14
24652: DOUBLE
24653: EQUAL
24654: IFTRUE 24658
24656: GO 24676
24658: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
24659: LD_ADDR_VAR 0 3
24663: PUSH
24664: LD_INT 4
24666: PUSH
24667: LD_INT 5
24669: PUSH
24670: EMPTY
24671: LIST
24672: LIST
24673: ST_TO_ADDR
24674: GO 25337
24676: LD_INT 6
24678: DOUBLE
24679: EQUAL
24680: IFTRUE 24684
24682: GO 24702
24684: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
24685: LD_ADDR_VAR 0 3
24689: PUSH
24690: LD_INT 4
24692: PUSH
24693: LD_INT 5
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: ST_TO_ADDR
24700: GO 25337
24702: LD_INT 10
24704: DOUBLE
24705: EQUAL
24706: IFTRUE 24710
24708: GO 24728
24710: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
24711: LD_ADDR_VAR 0 3
24715: PUSH
24716: LD_INT 4
24718: PUSH
24719: LD_INT 5
24721: PUSH
24722: EMPTY
24723: LIST
24724: LIST
24725: ST_TO_ADDR
24726: GO 25337
24728: LD_INT 22
24730: DOUBLE
24731: EQUAL
24732: IFTRUE 24736
24734: GO 24762
24736: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
24737: LD_ADDR_VAR 0 3
24741: PUSH
24742: LD_INT 11
24744: PUSH
24745: LD_INT 12
24747: PUSH
24748: LD_INT 13
24750: PUSH
24751: LD_INT 14
24753: PUSH
24754: EMPTY
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: ST_TO_ADDR
24760: GO 25337
24762: LD_INT 23
24764: DOUBLE
24765: EQUAL
24766: IFTRUE 24770
24768: GO 24796
24770: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
24771: LD_ADDR_VAR 0 3
24775: PUSH
24776: LD_INT 11
24778: PUSH
24779: LD_INT 12
24781: PUSH
24782: LD_INT 13
24784: PUSH
24785: LD_INT 14
24787: PUSH
24788: EMPTY
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: ST_TO_ADDR
24794: GO 25337
24796: LD_INT 24
24798: DOUBLE
24799: EQUAL
24800: IFTRUE 24804
24802: GO 24830
24804: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
24805: LD_ADDR_VAR 0 3
24809: PUSH
24810: LD_INT 11
24812: PUSH
24813: LD_INT 12
24815: PUSH
24816: LD_INT 13
24818: PUSH
24819: LD_INT 14
24821: PUSH
24822: EMPTY
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: ST_TO_ADDR
24828: GO 25337
24830: LD_INT 30
24832: DOUBLE
24833: EQUAL
24834: IFTRUE 24838
24836: GO 24864
24838: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
24839: LD_ADDR_VAR 0 3
24843: PUSH
24844: LD_INT 11
24846: PUSH
24847: LD_INT 12
24849: PUSH
24850: LD_INT 13
24852: PUSH
24853: LD_INT 14
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: ST_TO_ADDR
24862: GO 25337
24864: LD_INT 25
24866: DOUBLE
24867: EQUAL
24868: IFTRUE 24872
24870: GO 24890
24872: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
24873: LD_ADDR_VAR 0 3
24877: PUSH
24878: LD_INT 13
24880: PUSH
24881: LD_INT 14
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: ST_TO_ADDR
24888: GO 25337
24890: LD_INT 27
24892: DOUBLE
24893: EQUAL
24894: IFTRUE 24898
24896: GO 24916
24898: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
24899: LD_ADDR_VAR 0 3
24903: PUSH
24904: LD_INT 13
24906: PUSH
24907: LD_INT 14
24909: PUSH
24910: EMPTY
24911: LIST
24912: LIST
24913: ST_TO_ADDR
24914: GO 25337
24916: LD_INT 28
24918: DOUBLE
24919: EQUAL
24920: IFTRUE 24924
24922: GO 24942
24924: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
24925: LD_ADDR_VAR 0 3
24929: PUSH
24930: LD_INT 13
24932: PUSH
24933: LD_INT 14
24935: PUSH
24936: EMPTY
24937: LIST
24938: LIST
24939: ST_TO_ADDR
24940: GO 25337
24942: LD_INT 29
24944: DOUBLE
24945: EQUAL
24946: IFTRUE 24950
24948: GO 24968
24950: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
24951: LD_ADDR_VAR 0 3
24955: PUSH
24956: LD_INT 13
24958: PUSH
24959: LD_INT 14
24961: PUSH
24962: EMPTY
24963: LIST
24964: LIST
24965: ST_TO_ADDR
24966: GO 25337
24968: LD_INT 31
24970: DOUBLE
24971: EQUAL
24972: IFTRUE 24976
24974: GO 24994
24976: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
24977: LD_ADDR_VAR 0 3
24981: PUSH
24982: LD_INT 13
24984: PUSH
24985: LD_INT 14
24987: PUSH
24988: EMPTY
24989: LIST
24990: LIST
24991: ST_TO_ADDR
24992: GO 25337
24994: LD_INT 26
24996: DOUBLE
24997: EQUAL
24998: IFTRUE 25002
25000: GO 25020
25002: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25003: LD_ADDR_VAR 0 3
25007: PUSH
25008: LD_INT 13
25010: PUSH
25011: LD_INT 14
25013: PUSH
25014: EMPTY
25015: LIST
25016: LIST
25017: ST_TO_ADDR
25018: GO 25337
25020: LD_INT 42
25022: DOUBLE
25023: EQUAL
25024: IFTRUE 25028
25026: GO 25054
25028: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25029: LD_ADDR_VAR 0 3
25033: PUSH
25034: LD_INT 21
25036: PUSH
25037: LD_INT 22
25039: PUSH
25040: LD_INT 23
25042: PUSH
25043: LD_INT 24
25045: PUSH
25046: EMPTY
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: ST_TO_ADDR
25052: GO 25337
25054: LD_INT 43
25056: DOUBLE
25057: EQUAL
25058: IFTRUE 25062
25060: GO 25088
25062: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25063: LD_ADDR_VAR 0 3
25067: PUSH
25068: LD_INT 21
25070: PUSH
25071: LD_INT 22
25073: PUSH
25074: LD_INT 23
25076: PUSH
25077: LD_INT 24
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: ST_TO_ADDR
25086: GO 25337
25088: LD_INT 44
25090: DOUBLE
25091: EQUAL
25092: IFTRUE 25096
25094: GO 25122
25096: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25097: LD_ADDR_VAR 0 3
25101: PUSH
25102: LD_INT 21
25104: PUSH
25105: LD_INT 22
25107: PUSH
25108: LD_INT 23
25110: PUSH
25111: LD_INT 24
25113: PUSH
25114: EMPTY
25115: LIST
25116: LIST
25117: LIST
25118: LIST
25119: ST_TO_ADDR
25120: GO 25337
25122: LD_INT 45
25124: DOUBLE
25125: EQUAL
25126: IFTRUE 25130
25128: GO 25156
25130: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25131: LD_ADDR_VAR 0 3
25135: PUSH
25136: LD_INT 21
25138: PUSH
25139: LD_INT 22
25141: PUSH
25142: LD_INT 23
25144: PUSH
25145: LD_INT 24
25147: PUSH
25148: EMPTY
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: ST_TO_ADDR
25154: GO 25337
25156: LD_INT 49
25158: DOUBLE
25159: EQUAL
25160: IFTRUE 25164
25162: GO 25190
25164: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25165: LD_ADDR_VAR 0 3
25169: PUSH
25170: LD_INT 21
25172: PUSH
25173: LD_INT 22
25175: PUSH
25176: LD_INT 23
25178: PUSH
25179: LD_INT 24
25181: PUSH
25182: EMPTY
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: ST_TO_ADDR
25188: GO 25337
25190: LD_INT 51
25192: DOUBLE
25193: EQUAL
25194: IFTRUE 25198
25196: GO 25224
25198: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
25199: LD_ADDR_VAR 0 3
25203: PUSH
25204: LD_INT 21
25206: PUSH
25207: LD_INT 22
25209: PUSH
25210: LD_INT 23
25212: PUSH
25213: LD_INT 24
25215: PUSH
25216: EMPTY
25217: LIST
25218: LIST
25219: LIST
25220: LIST
25221: ST_TO_ADDR
25222: GO 25337
25224: LD_INT 52
25226: DOUBLE
25227: EQUAL
25228: IFTRUE 25232
25230: GO 25258
25232: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
25233: LD_ADDR_VAR 0 3
25237: PUSH
25238: LD_INT 21
25240: PUSH
25241: LD_INT 22
25243: PUSH
25244: LD_INT 23
25246: PUSH
25247: LD_INT 24
25249: PUSH
25250: EMPTY
25251: LIST
25252: LIST
25253: LIST
25254: LIST
25255: ST_TO_ADDR
25256: GO 25337
25258: LD_INT 53
25260: DOUBLE
25261: EQUAL
25262: IFTRUE 25266
25264: GO 25284
25266: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
25267: LD_ADDR_VAR 0 3
25271: PUSH
25272: LD_INT 23
25274: PUSH
25275: LD_INT 24
25277: PUSH
25278: EMPTY
25279: LIST
25280: LIST
25281: ST_TO_ADDR
25282: GO 25337
25284: LD_INT 46
25286: DOUBLE
25287: EQUAL
25288: IFTRUE 25292
25290: GO 25310
25292: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
25293: LD_ADDR_VAR 0 3
25297: PUSH
25298: LD_INT 23
25300: PUSH
25301: LD_INT 24
25303: PUSH
25304: EMPTY
25305: LIST
25306: LIST
25307: ST_TO_ADDR
25308: GO 25337
25310: LD_INT 47
25312: DOUBLE
25313: EQUAL
25314: IFTRUE 25318
25316: GO 25336
25318: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25319: LD_ADDR_VAR 0 3
25323: PUSH
25324: LD_INT 23
25326: PUSH
25327: LD_INT 24
25329: PUSH
25330: EMPTY
25331: LIST
25332: LIST
25333: ST_TO_ADDR
25334: GO 25337
25336: POP
// result := ( chassis in result ) ;
25337: LD_ADDR_VAR 0 3
25341: PUSH
25342: LD_VAR 0 1
25346: PUSH
25347: LD_VAR 0 3
25351: IN
25352: ST_TO_ADDR
// end ;
25353: LD_VAR 0 3
25357: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
25358: LD_INT 0
25360: PPUSH
25361: PPUSH
25362: PPUSH
25363: PPUSH
25364: PPUSH
25365: PPUSH
25366: PPUSH
// result := array ;
25367: LD_ADDR_VAR 0 5
25371: PUSH
25372: LD_VAR 0 1
25376: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
25377: LD_VAR 0 1
25381: NOT
25382: PUSH
25383: LD_VAR 0 2
25387: NOT
25388: OR
25389: PUSH
25390: LD_VAR 0 3
25394: NOT
25395: OR
25396: PUSH
25397: LD_VAR 0 2
25401: PUSH
25402: LD_VAR 0 1
25406: GREATER
25407: OR
25408: PUSH
25409: LD_VAR 0 3
25413: PUSH
25414: LD_VAR 0 1
25418: GREATER
25419: OR
25420: IFFALSE 25424
// exit ;
25422: GO 25720
// if direction then
25424: LD_VAR 0 4
25428: IFFALSE 25492
// begin d := 1 ;
25430: LD_ADDR_VAR 0 9
25434: PUSH
25435: LD_INT 1
25437: ST_TO_ADDR
// if i_from > i_to then
25438: LD_VAR 0 2
25442: PUSH
25443: LD_VAR 0 3
25447: GREATER
25448: IFFALSE 25474
// length := ( array - i_from ) + i_to else
25450: LD_ADDR_VAR 0 11
25454: PUSH
25455: LD_VAR 0 1
25459: PUSH
25460: LD_VAR 0 2
25464: MINUS
25465: PUSH
25466: LD_VAR 0 3
25470: PLUS
25471: ST_TO_ADDR
25472: GO 25490
// length := i_to - i_from ;
25474: LD_ADDR_VAR 0 11
25478: PUSH
25479: LD_VAR 0 3
25483: PUSH
25484: LD_VAR 0 2
25488: MINUS
25489: ST_TO_ADDR
// end else
25490: GO 25553
// begin d := - 1 ;
25492: LD_ADDR_VAR 0 9
25496: PUSH
25497: LD_INT 1
25499: NEG
25500: ST_TO_ADDR
// if i_from > i_to then
25501: LD_VAR 0 2
25505: PUSH
25506: LD_VAR 0 3
25510: GREATER
25511: IFFALSE 25531
// length := i_from - i_to else
25513: LD_ADDR_VAR 0 11
25517: PUSH
25518: LD_VAR 0 2
25522: PUSH
25523: LD_VAR 0 3
25527: MINUS
25528: ST_TO_ADDR
25529: GO 25553
// length := ( array - i_to ) + i_from ;
25531: LD_ADDR_VAR 0 11
25535: PUSH
25536: LD_VAR 0 1
25540: PUSH
25541: LD_VAR 0 3
25545: MINUS
25546: PUSH
25547: LD_VAR 0 2
25551: PLUS
25552: ST_TO_ADDR
// end ; if not length then
25553: LD_VAR 0 11
25557: NOT
25558: IFFALSE 25562
// exit ;
25560: GO 25720
// tmp := array ;
25562: LD_ADDR_VAR 0 10
25566: PUSH
25567: LD_VAR 0 1
25571: ST_TO_ADDR
// for i = 1 to length do
25572: LD_ADDR_VAR 0 6
25576: PUSH
25577: DOUBLE
25578: LD_INT 1
25580: DEC
25581: ST_TO_ADDR
25582: LD_VAR 0 11
25586: PUSH
25587: FOR_TO
25588: IFFALSE 25708
// begin for j = 1 to array do
25590: LD_ADDR_VAR 0 7
25594: PUSH
25595: DOUBLE
25596: LD_INT 1
25598: DEC
25599: ST_TO_ADDR
25600: LD_VAR 0 1
25604: PUSH
25605: FOR_TO
25606: IFFALSE 25694
// begin k := j + d ;
25608: LD_ADDR_VAR 0 8
25612: PUSH
25613: LD_VAR 0 7
25617: PUSH
25618: LD_VAR 0 9
25622: PLUS
25623: ST_TO_ADDR
// if k > array then
25624: LD_VAR 0 8
25628: PUSH
25629: LD_VAR 0 1
25633: GREATER
25634: IFFALSE 25644
// k := 1 ;
25636: LD_ADDR_VAR 0 8
25640: PUSH
25641: LD_INT 1
25643: ST_TO_ADDR
// if not k then
25644: LD_VAR 0 8
25648: NOT
25649: IFFALSE 25661
// k := array ;
25651: LD_ADDR_VAR 0 8
25655: PUSH
25656: LD_VAR 0 1
25660: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
25661: LD_ADDR_VAR 0 10
25665: PUSH
25666: LD_VAR 0 10
25670: PPUSH
25671: LD_VAR 0 8
25675: PPUSH
25676: LD_VAR 0 1
25680: PUSH
25681: LD_VAR 0 7
25685: ARRAY
25686: PPUSH
25687: CALL_OW 1
25691: ST_TO_ADDR
// end ;
25692: GO 25605
25694: POP
25695: POP
// array := tmp ;
25696: LD_ADDR_VAR 0 1
25700: PUSH
25701: LD_VAR 0 10
25705: ST_TO_ADDR
// end ;
25706: GO 25587
25708: POP
25709: POP
// result := array ;
25710: LD_ADDR_VAR 0 5
25714: PUSH
25715: LD_VAR 0 1
25719: ST_TO_ADDR
// end ;
25720: LD_VAR 0 5
25724: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
25725: LD_INT 0
25727: PPUSH
25728: PPUSH
// result := 0 ;
25729: LD_ADDR_VAR 0 3
25733: PUSH
25734: LD_INT 0
25736: ST_TO_ADDR
// if not array or not value in array then
25737: LD_VAR 0 1
25741: NOT
25742: PUSH
25743: LD_VAR 0 2
25747: PUSH
25748: LD_VAR 0 1
25752: IN
25753: NOT
25754: OR
25755: IFFALSE 25759
// exit ;
25757: GO 25813
// for i = 1 to array do
25759: LD_ADDR_VAR 0 4
25763: PUSH
25764: DOUBLE
25765: LD_INT 1
25767: DEC
25768: ST_TO_ADDR
25769: LD_VAR 0 1
25773: PUSH
25774: FOR_TO
25775: IFFALSE 25811
// if value = array [ i ] then
25777: LD_VAR 0 2
25781: PUSH
25782: LD_VAR 0 1
25786: PUSH
25787: LD_VAR 0 4
25791: ARRAY
25792: EQUAL
25793: IFFALSE 25809
// begin result := i ;
25795: LD_ADDR_VAR 0 3
25799: PUSH
25800: LD_VAR 0 4
25804: ST_TO_ADDR
// exit ;
25805: POP
25806: POP
25807: GO 25813
// end ;
25809: GO 25774
25811: POP
25812: POP
// end ;
25813: LD_VAR 0 3
25817: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
25818: LD_INT 0
25820: PPUSH
// vc_chassis := chassis ;
25821: LD_ADDR_OWVAR 37
25825: PUSH
25826: LD_VAR 0 1
25830: ST_TO_ADDR
// vc_engine := engine ;
25831: LD_ADDR_OWVAR 39
25835: PUSH
25836: LD_VAR 0 2
25840: ST_TO_ADDR
// vc_control := control ;
25841: LD_ADDR_OWVAR 38
25845: PUSH
25846: LD_VAR 0 3
25850: ST_TO_ADDR
// vc_weapon := weapon ;
25851: LD_ADDR_OWVAR 40
25855: PUSH
25856: LD_VAR 0 4
25860: ST_TO_ADDR
// vc_fuel_battery := fuel ;
25861: LD_ADDR_OWVAR 41
25865: PUSH
25866: LD_VAR 0 5
25870: ST_TO_ADDR
// end ;
25871: LD_VAR 0 6
25875: RET
// export function WantPlant ( unit ) ; var task ; begin
25876: LD_INT 0
25878: PPUSH
25879: PPUSH
// result := false ;
25880: LD_ADDR_VAR 0 2
25884: PUSH
25885: LD_INT 0
25887: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
25888: LD_ADDR_VAR 0 3
25892: PUSH
25893: LD_VAR 0 1
25897: PPUSH
25898: CALL_OW 437
25902: ST_TO_ADDR
// if task then
25903: LD_VAR 0 3
25907: IFFALSE 25935
// if task [ 1 ] [ 1 ] = p then
25909: LD_VAR 0 3
25913: PUSH
25914: LD_INT 1
25916: ARRAY
25917: PUSH
25918: LD_INT 1
25920: ARRAY
25921: PUSH
25922: LD_STRING p
25924: EQUAL
25925: IFFALSE 25935
// result := true ;
25927: LD_ADDR_VAR 0 2
25931: PUSH
25932: LD_INT 1
25934: ST_TO_ADDR
// end ;
25935: LD_VAR 0 2
25939: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
25940: LD_INT 0
25942: PPUSH
25943: PPUSH
25944: PPUSH
25945: PPUSH
// if pos < 1 then
25946: LD_VAR 0 2
25950: PUSH
25951: LD_INT 1
25953: LESS
25954: IFFALSE 25958
// exit ;
25956: GO 26261
// if pos = 1 then
25958: LD_VAR 0 2
25962: PUSH
25963: LD_INT 1
25965: EQUAL
25966: IFFALSE 25999
// result := Replace ( arr , pos [ 1 ] , value ) else
25968: LD_ADDR_VAR 0 4
25972: PUSH
25973: LD_VAR 0 1
25977: PPUSH
25978: LD_VAR 0 2
25982: PUSH
25983: LD_INT 1
25985: ARRAY
25986: PPUSH
25987: LD_VAR 0 3
25991: PPUSH
25992: CALL_OW 1
25996: ST_TO_ADDR
25997: GO 26261
// begin tmp := arr ;
25999: LD_ADDR_VAR 0 6
26003: PUSH
26004: LD_VAR 0 1
26008: ST_TO_ADDR
// s_arr := [ tmp ] ;
26009: LD_ADDR_VAR 0 7
26013: PUSH
26014: LD_VAR 0 6
26018: PUSH
26019: EMPTY
26020: LIST
26021: ST_TO_ADDR
// for i = 1 to pos - 1 do
26022: LD_ADDR_VAR 0 5
26026: PUSH
26027: DOUBLE
26028: LD_INT 1
26030: DEC
26031: ST_TO_ADDR
26032: LD_VAR 0 2
26036: PUSH
26037: LD_INT 1
26039: MINUS
26040: PUSH
26041: FOR_TO
26042: IFFALSE 26087
// begin tmp := tmp [ pos [ i ] ] ;
26044: LD_ADDR_VAR 0 6
26048: PUSH
26049: LD_VAR 0 6
26053: PUSH
26054: LD_VAR 0 2
26058: PUSH
26059: LD_VAR 0 5
26063: ARRAY
26064: ARRAY
26065: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26066: LD_ADDR_VAR 0 7
26070: PUSH
26071: LD_VAR 0 7
26075: PUSH
26076: LD_VAR 0 6
26080: PUSH
26081: EMPTY
26082: LIST
26083: ADD
26084: ST_TO_ADDR
// end ;
26085: GO 26041
26087: POP
26088: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26089: LD_ADDR_VAR 0 6
26093: PUSH
26094: LD_VAR 0 6
26098: PPUSH
26099: LD_VAR 0 2
26103: PUSH
26104: LD_VAR 0 2
26108: ARRAY
26109: PPUSH
26110: LD_VAR 0 3
26114: PPUSH
26115: CALL_OW 1
26119: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26120: LD_ADDR_VAR 0 7
26124: PUSH
26125: LD_VAR 0 7
26129: PPUSH
26130: LD_VAR 0 7
26134: PPUSH
26135: LD_VAR 0 6
26139: PPUSH
26140: CALL_OW 1
26144: ST_TO_ADDR
// for i = s_arr downto 2 do
26145: LD_ADDR_VAR 0 5
26149: PUSH
26150: DOUBLE
26151: LD_VAR 0 7
26155: INC
26156: ST_TO_ADDR
26157: LD_INT 2
26159: PUSH
26160: FOR_DOWNTO
26161: IFFALSE 26245
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26163: LD_ADDR_VAR 0 6
26167: PUSH
26168: LD_VAR 0 7
26172: PUSH
26173: LD_VAR 0 5
26177: PUSH
26178: LD_INT 1
26180: MINUS
26181: ARRAY
26182: PPUSH
26183: LD_VAR 0 2
26187: PUSH
26188: LD_VAR 0 5
26192: PUSH
26193: LD_INT 1
26195: MINUS
26196: ARRAY
26197: PPUSH
26198: LD_VAR 0 7
26202: PUSH
26203: LD_VAR 0 5
26207: ARRAY
26208: PPUSH
26209: CALL_OW 1
26213: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
26214: LD_ADDR_VAR 0 7
26218: PUSH
26219: LD_VAR 0 7
26223: PPUSH
26224: LD_VAR 0 5
26228: PUSH
26229: LD_INT 1
26231: MINUS
26232: PPUSH
26233: LD_VAR 0 6
26237: PPUSH
26238: CALL_OW 1
26242: ST_TO_ADDR
// end ;
26243: GO 26160
26245: POP
26246: POP
// result := s_arr [ 1 ] ;
26247: LD_ADDR_VAR 0 4
26251: PUSH
26252: LD_VAR 0 7
26256: PUSH
26257: LD_INT 1
26259: ARRAY
26260: ST_TO_ADDR
// end ; end ;
26261: LD_VAR 0 4
26265: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
26266: LD_INT 0
26268: PPUSH
26269: PPUSH
// if not list then
26270: LD_VAR 0 1
26274: NOT
26275: IFFALSE 26279
// exit ;
26277: GO 26370
// i := list [ pos1 ] ;
26279: LD_ADDR_VAR 0 5
26283: PUSH
26284: LD_VAR 0 1
26288: PUSH
26289: LD_VAR 0 2
26293: ARRAY
26294: ST_TO_ADDR
// if not i then
26295: LD_VAR 0 5
26299: NOT
26300: IFFALSE 26304
// exit ;
26302: GO 26370
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
26304: LD_ADDR_VAR 0 1
26308: PUSH
26309: LD_VAR 0 1
26313: PPUSH
26314: LD_VAR 0 2
26318: PPUSH
26319: LD_VAR 0 1
26323: PUSH
26324: LD_VAR 0 3
26328: ARRAY
26329: PPUSH
26330: CALL_OW 1
26334: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26335: LD_ADDR_VAR 0 1
26339: PUSH
26340: LD_VAR 0 1
26344: PPUSH
26345: LD_VAR 0 3
26349: PPUSH
26350: LD_VAR 0 5
26354: PPUSH
26355: CALL_OW 1
26359: ST_TO_ADDR
// result := list ;
26360: LD_ADDR_VAR 0 4
26364: PUSH
26365: LD_VAR 0 1
26369: ST_TO_ADDR
// end ;
26370: LD_VAR 0 4
26374: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
26375: LD_INT 0
26377: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
26378: LD_ADDR_VAR 0 5
26382: PUSH
26383: LD_VAR 0 1
26387: PPUSH
26388: CALL_OW 250
26392: PPUSH
26393: LD_VAR 0 1
26397: PPUSH
26398: CALL_OW 251
26402: PPUSH
26403: LD_VAR 0 2
26407: PPUSH
26408: LD_VAR 0 3
26412: PPUSH
26413: LD_VAR 0 4
26417: PPUSH
26418: CALL 26428 0 5
26422: ST_TO_ADDR
// end ;
26423: LD_VAR 0 5
26427: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
26428: LD_INT 0
26430: PPUSH
26431: PPUSH
26432: PPUSH
26433: PPUSH
// if not list then
26434: LD_VAR 0 3
26438: NOT
26439: IFFALSE 26443
// exit ;
26441: GO 26831
// result := [ ] ;
26443: LD_ADDR_VAR 0 6
26447: PUSH
26448: EMPTY
26449: ST_TO_ADDR
// for i in list do
26450: LD_ADDR_VAR 0 7
26454: PUSH
26455: LD_VAR 0 3
26459: PUSH
26460: FOR_IN
26461: IFFALSE 26663
// begin tmp := GetDistUnitXY ( i , x , y ) ;
26463: LD_ADDR_VAR 0 9
26467: PUSH
26468: LD_VAR 0 7
26472: PPUSH
26473: LD_VAR 0 1
26477: PPUSH
26478: LD_VAR 0 2
26482: PPUSH
26483: CALL_OW 297
26487: ST_TO_ADDR
// if not result then
26488: LD_VAR 0 6
26492: NOT
26493: IFFALSE 26519
// result := [ [ i , tmp ] ] else
26495: LD_ADDR_VAR 0 6
26499: PUSH
26500: LD_VAR 0 7
26504: PUSH
26505: LD_VAR 0 9
26509: PUSH
26510: EMPTY
26511: LIST
26512: LIST
26513: PUSH
26514: EMPTY
26515: LIST
26516: ST_TO_ADDR
26517: GO 26661
// begin if result [ result ] [ 2 ] < tmp then
26519: LD_VAR 0 6
26523: PUSH
26524: LD_VAR 0 6
26528: ARRAY
26529: PUSH
26530: LD_INT 2
26532: ARRAY
26533: PUSH
26534: LD_VAR 0 9
26538: LESS
26539: IFFALSE 26581
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
26541: LD_ADDR_VAR 0 6
26545: PUSH
26546: LD_VAR 0 6
26550: PPUSH
26551: LD_VAR 0 6
26555: PUSH
26556: LD_INT 1
26558: PLUS
26559: PPUSH
26560: LD_VAR 0 7
26564: PUSH
26565: LD_VAR 0 9
26569: PUSH
26570: EMPTY
26571: LIST
26572: LIST
26573: PPUSH
26574: CALL_OW 2
26578: ST_TO_ADDR
26579: GO 26661
// for j = 1 to result do
26581: LD_ADDR_VAR 0 8
26585: PUSH
26586: DOUBLE
26587: LD_INT 1
26589: DEC
26590: ST_TO_ADDR
26591: LD_VAR 0 6
26595: PUSH
26596: FOR_TO
26597: IFFALSE 26659
// begin if tmp < result [ j ] [ 2 ] then
26599: LD_VAR 0 9
26603: PUSH
26604: LD_VAR 0 6
26608: PUSH
26609: LD_VAR 0 8
26613: ARRAY
26614: PUSH
26615: LD_INT 2
26617: ARRAY
26618: LESS
26619: IFFALSE 26657
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26621: LD_ADDR_VAR 0 6
26625: PUSH
26626: LD_VAR 0 6
26630: PPUSH
26631: LD_VAR 0 8
26635: PPUSH
26636: LD_VAR 0 7
26640: PUSH
26641: LD_VAR 0 9
26645: PUSH
26646: EMPTY
26647: LIST
26648: LIST
26649: PPUSH
26650: CALL_OW 2
26654: ST_TO_ADDR
// break ;
26655: GO 26659
// end ; end ;
26657: GO 26596
26659: POP
26660: POP
// end ; end ;
26661: GO 26460
26663: POP
26664: POP
// if result and not asc then
26665: LD_VAR 0 6
26669: PUSH
26670: LD_VAR 0 4
26674: NOT
26675: AND
26676: IFFALSE 26751
// begin tmp := result ;
26678: LD_ADDR_VAR 0 9
26682: PUSH
26683: LD_VAR 0 6
26687: ST_TO_ADDR
// for i = tmp downto 1 do
26688: LD_ADDR_VAR 0 7
26692: PUSH
26693: DOUBLE
26694: LD_VAR 0 9
26698: INC
26699: ST_TO_ADDR
26700: LD_INT 1
26702: PUSH
26703: FOR_DOWNTO
26704: IFFALSE 26749
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
26706: LD_ADDR_VAR 0 6
26710: PUSH
26711: LD_VAR 0 6
26715: PPUSH
26716: LD_VAR 0 9
26720: PUSH
26721: LD_VAR 0 7
26725: MINUS
26726: PUSH
26727: LD_INT 1
26729: PLUS
26730: PPUSH
26731: LD_VAR 0 9
26735: PUSH
26736: LD_VAR 0 7
26740: ARRAY
26741: PPUSH
26742: CALL_OW 1
26746: ST_TO_ADDR
26747: GO 26703
26749: POP
26750: POP
// end ; tmp := [ ] ;
26751: LD_ADDR_VAR 0 9
26755: PUSH
26756: EMPTY
26757: ST_TO_ADDR
// if mode then
26758: LD_VAR 0 5
26762: IFFALSE 26831
// begin for i = 1 to result do
26764: LD_ADDR_VAR 0 7
26768: PUSH
26769: DOUBLE
26770: LD_INT 1
26772: DEC
26773: ST_TO_ADDR
26774: LD_VAR 0 6
26778: PUSH
26779: FOR_TO
26780: IFFALSE 26819
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
26782: LD_ADDR_VAR 0 9
26786: PUSH
26787: LD_VAR 0 9
26791: PPUSH
26792: LD_VAR 0 7
26796: PPUSH
26797: LD_VAR 0 6
26801: PUSH
26802: LD_VAR 0 7
26806: ARRAY
26807: PUSH
26808: LD_INT 1
26810: ARRAY
26811: PPUSH
26812: CALL_OW 1
26816: ST_TO_ADDR
26817: GO 26779
26819: POP
26820: POP
// result := tmp ;
26821: LD_ADDR_VAR 0 6
26825: PUSH
26826: LD_VAR 0 9
26830: ST_TO_ADDR
// end ; end ;
26831: LD_VAR 0 6
26835: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
26836: LD_INT 0
26838: PPUSH
26839: PPUSH
26840: PPUSH
26841: PPUSH
26842: PPUSH
26843: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
26844: LD_ADDR_VAR 0 5
26848: PUSH
26849: LD_INT 0
26851: PUSH
26852: LD_INT 0
26854: PUSH
26855: LD_INT 0
26857: PUSH
26858: EMPTY
26859: PUSH
26860: EMPTY
26861: LIST
26862: LIST
26863: LIST
26864: LIST
26865: ST_TO_ADDR
// if not x or not y then
26866: LD_VAR 0 2
26870: NOT
26871: PUSH
26872: LD_VAR 0 3
26876: NOT
26877: OR
26878: IFFALSE 26882
// exit ;
26880: GO 28528
// if not range then
26882: LD_VAR 0 4
26886: NOT
26887: IFFALSE 26897
// range := 10 ;
26889: LD_ADDR_VAR 0 4
26893: PUSH
26894: LD_INT 10
26896: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26897: LD_ADDR_VAR 0 8
26901: PUSH
26902: LD_INT 81
26904: PUSH
26905: LD_VAR 0 1
26909: PUSH
26910: EMPTY
26911: LIST
26912: LIST
26913: PUSH
26914: LD_INT 92
26916: PUSH
26917: LD_VAR 0 2
26921: PUSH
26922: LD_VAR 0 3
26926: PUSH
26927: LD_VAR 0 4
26931: PUSH
26932: EMPTY
26933: LIST
26934: LIST
26935: LIST
26936: LIST
26937: PUSH
26938: LD_INT 3
26940: PUSH
26941: LD_INT 21
26943: PUSH
26944: LD_INT 3
26946: PUSH
26947: EMPTY
26948: LIST
26949: LIST
26950: PUSH
26951: EMPTY
26952: LIST
26953: LIST
26954: PUSH
26955: EMPTY
26956: LIST
26957: LIST
26958: LIST
26959: PPUSH
26960: CALL_OW 69
26964: ST_TO_ADDR
// if not tmp then
26965: LD_VAR 0 8
26969: NOT
26970: IFFALSE 26974
// exit ;
26972: GO 28528
// for i in tmp do
26974: LD_ADDR_VAR 0 6
26978: PUSH
26979: LD_VAR 0 8
26983: PUSH
26984: FOR_IN
26985: IFFALSE 28503
// begin points := [ 0 , 0 , 0 ] ;
26987: LD_ADDR_VAR 0 9
26991: PUSH
26992: LD_INT 0
26994: PUSH
26995: LD_INT 0
26997: PUSH
26998: LD_INT 0
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: LIST
27005: ST_TO_ADDR
// bpoints := 1 ;
27006: LD_ADDR_VAR 0 10
27010: PUSH
27011: LD_INT 1
27013: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27014: LD_VAR 0 6
27018: PPUSH
27019: CALL_OW 247
27023: PUSH
27024: LD_INT 1
27026: DOUBLE
27027: EQUAL
27028: IFTRUE 27032
27030: GO 27610
27032: POP
// begin if GetClass ( i ) = 1 then
27033: LD_VAR 0 6
27037: PPUSH
27038: CALL_OW 257
27042: PUSH
27043: LD_INT 1
27045: EQUAL
27046: IFFALSE 27067
// points := [ 10 , 5 , 3 ] ;
27048: LD_ADDR_VAR 0 9
27052: PUSH
27053: LD_INT 10
27055: PUSH
27056: LD_INT 5
27058: PUSH
27059: LD_INT 3
27061: PUSH
27062: EMPTY
27063: LIST
27064: LIST
27065: LIST
27066: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27067: LD_VAR 0 6
27071: PPUSH
27072: CALL_OW 257
27076: PUSH
27077: LD_INT 2
27079: PUSH
27080: LD_INT 3
27082: PUSH
27083: LD_INT 4
27085: PUSH
27086: EMPTY
27087: LIST
27088: LIST
27089: LIST
27090: IN
27091: IFFALSE 27112
// points := [ 3 , 2 , 1 ] ;
27093: LD_ADDR_VAR 0 9
27097: PUSH
27098: LD_INT 3
27100: PUSH
27101: LD_INT 2
27103: PUSH
27104: LD_INT 1
27106: PUSH
27107: EMPTY
27108: LIST
27109: LIST
27110: LIST
27111: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27112: LD_VAR 0 6
27116: PPUSH
27117: CALL_OW 257
27121: PUSH
27122: LD_INT 5
27124: EQUAL
27125: IFFALSE 27146
// points := [ 130 , 5 , 2 ] ;
27127: LD_ADDR_VAR 0 9
27131: PUSH
27132: LD_INT 130
27134: PUSH
27135: LD_INT 5
27137: PUSH
27138: LD_INT 2
27140: PUSH
27141: EMPTY
27142: LIST
27143: LIST
27144: LIST
27145: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27146: LD_VAR 0 6
27150: PPUSH
27151: CALL_OW 257
27155: PUSH
27156: LD_INT 8
27158: EQUAL
27159: IFFALSE 27180
// points := [ 35 , 35 , 30 ] ;
27161: LD_ADDR_VAR 0 9
27165: PUSH
27166: LD_INT 35
27168: PUSH
27169: LD_INT 35
27171: PUSH
27172: LD_INT 30
27174: PUSH
27175: EMPTY
27176: LIST
27177: LIST
27178: LIST
27179: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27180: LD_VAR 0 6
27184: PPUSH
27185: CALL_OW 257
27189: PUSH
27190: LD_INT 9
27192: EQUAL
27193: IFFALSE 27214
// points := [ 20 , 55 , 40 ] ;
27195: LD_ADDR_VAR 0 9
27199: PUSH
27200: LD_INT 20
27202: PUSH
27203: LD_INT 55
27205: PUSH
27206: LD_INT 40
27208: PUSH
27209: EMPTY
27210: LIST
27211: LIST
27212: LIST
27213: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27214: LD_VAR 0 6
27218: PPUSH
27219: CALL_OW 257
27223: PUSH
27224: LD_INT 12
27226: PUSH
27227: LD_INT 16
27229: PUSH
27230: EMPTY
27231: LIST
27232: LIST
27233: IN
27234: IFFALSE 27255
// points := [ 5 , 3 , 2 ] ;
27236: LD_ADDR_VAR 0 9
27240: PUSH
27241: LD_INT 5
27243: PUSH
27244: LD_INT 3
27246: PUSH
27247: LD_INT 2
27249: PUSH
27250: EMPTY
27251: LIST
27252: LIST
27253: LIST
27254: ST_TO_ADDR
// if GetClass ( i ) = 17 then
27255: LD_VAR 0 6
27259: PPUSH
27260: CALL_OW 257
27264: PUSH
27265: LD_INT 17
27267: EQUAL
27268: IFFALSE 27289
// points := [ 100 , 50 , 75 ] ;
27270: LD_ADDR_VAR 0 9
27274: PUSH
27275: LD_INT 100
27277: PUSH
27278: LD_INT 50
27280: PUSH
27281: LD_INT 75
27283: PUSH
27284: EMPTY
27285: LIST
27286: LIST
27287: LIST
27288: ST_TO_ADDR
// if GetClass ( i ) = 15 then
27289: LD_VAR 0 6
27293: PPUSH
27294: CALL_OW 257
27298: PUSH
27299: LD_INT 15
27301: EQUAL
27302: IFFALSE 27323
// points := [ 10 , 5 , 3 ] ;
27304: LD_ADDR_VAR 0 9
27308: PUSH
27309: LD_INT 10
27311: PUSH
27312: LD_INT 5
27314: PUSH
27315: LD_INT 3
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: LIST
27322: ST_TO_ADDR
// if GetClass ( i ) = 14 then
27323: LD_VAR 0 6
27327: PPUSH
27328: CALL_OW 257
27332: PUSH
27333: LD_INT 14
27335: EQUAL
27336: IFFALSE 27357
// points := [ 10 , 0 , 0 ] ;
27338: LD_ADDR_VAR 0 9
27342: PUSH
27343: LD_INT 10
27345: PUSH
27346: LD_INT 0
27348: PUSH
27349: LD_INT 0
27351: PUSH
27352: EMPTY
27353: LIST
27354: LIST
27355: LIST
27356: ST_TO_ADDR
// if GetClass ( i ) = 11 then
27357: LD_VAR 0 6
27361: PPUSH
27362: CALL_OW 257
27366: PUSH
27367: LD_INT 11
27369: EQUAL
27370: IFFALSE 27391
// points := [ 30 , 10 , 5 ] ;
27372: LD_ADDR_VAR 0 9
27376: PUSH
27377: LD_INT 30
27379: PUSH
27380: LD_INT 10
27382: PUSH
27383: LD_INT 5
27385: PUSH
27386: EMPTY
27387: LIST
27388: LIST
27389: LIST
27390: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
27391: LD_VAR 0 1
27395: PPUSH
27396: LD_INT 5
27398: PPUSH
27399: CALL_OW 321
27403: PUSH
27404: LD_INT 2
27406: EQUAL
27407: IFFALSE 27424
// bpoints := bpoints * 1.8 ;
27409: LD_ADDR_VAR 0 10
27413: PUSH
27414: LD_VAR 0 10
27418: PUSH
27419: LD_REAL  1.80000000000000E+0000
27422: MUL
27423: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
27424: LD_VAR 0 6
27428: PPUSH
27429: CALL_OW 257
27433: PUSH
27434: LD_INT 1
27436: PUSH
27437: LD_INT 2
27439: PUSH
27440: LD_INT 3
27442: PUSH
27443: LD_INT 4
27445: PUSH
27446: EMPTY
27447: LIST
27448: LIST
27449: LIST
27450: LIST
27451: IN
27452: PUSH
27453: LD_VAR 0 1
27457: PPUSH
27458: LD_INT 51
27460: PPUSH
27461: CALL_OW 321
27465: PUSH
27466: LD_INT 2
27468: EQUAL
27469: AND
27470: IFFALSE 27487
// bpoints := bpoints * 1.2 ;
27472: LD_ADDR_VAR 0 10
27476: PUSH
27477: LD_VAR 0 10
27481: PUSH
27482: LD_REAL  1.20000000000000E+0000
27485: MUL
27486: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
27487: LD_VAR 0 6
27491: PPUSH
27492: CALL_OW 257
27496: PUSH
27497: LD_INT 5
27499: PUSH
27500: LD_INT 7
27502: PUSH
27503: LD_INT 9
27505: PUSH
27506: EMPTY
27507: LIST
27508: LIST
27509: LIST
27510: IN
27511: PUSH
27512: LD_VAR 0 1
27516: PPUSH
27517: LD_INT 52
27519: PPUSH
27520: CALL_OW 321
27524: PUSH
27525: LD_INT 2
27527: EQUAL
27528: AND
27529: IFFALSE 27546
// bpoints := bpoints * 1.5 ;
27531: LD_ADDR_VAR 0 10
27535: PUSH
27536: LD_VAR 0 10
27540: PUSH
27541: LD_REAL  1.50000000000000E+0000
27544: MUL
27545: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
27546: LD_VAR 0 1
27550: PPUSH
27551: LD_INT 66
27553: PPUSH
27554: CALL_OW 321
27558: PUSH
27559: LD_INT 2
27561: EQUAL
27562: IFFALSE 27579
// bpoints := bpoints * 1.1 ;
27564: LD_ADDR_VAR 0 10
27568: PUSH
27569: LD_VAR 0 10
27573: PUSH
27574: LD_REAL  1.10000000000000E+0000
27577: MUL
27578: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
27579: LD_ADDR_VAR 0 10
27583: PUSH
27584: LD_VAR 0 10
27588: PUSH
27589: LD_VAR 0 6
27593: PPUSH
27594: LD_INT 1
27596: PPUSH
27597: CALL_OW 259
27601: PUSH
27602: LD_REAL  1.15000000000000E+0000
27605: MUL
27606: MUL
27607: ST_TO_ADDR
// end ; unit_vehicle :
27608: GO 28432
27610: LD_INT 2
27612: DOUBLE
27613: EQUAL
27614: IFTRUE 27618
27616: GO 28420
27618: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
27619: LD_VAR 0 6
27623: PPUSH
27624: CALL_OW 264
27628: PUSH
27629: LD_INT 2
27631: PUSH
27632: LD_INT 42
27634: PUSH
27635: LD_INT 24
27637: PUSH
27638: EMPTY
27639: LIST
27640: LIST
27641: LIST
27642: IN
27643: IFFALSE 27664
// points := [ 25 , 5 , 3 ] ;
27645: LD_ADDR_VAR 0 9
27649: PUSH
27650: LD_INT 25
27652: PUSH
27653: LD_INT 5
27655: PUSH
27656: LD_INT 3
27658: PUSH
27659: EMPTY
27660: LIST
27661: LIST
27662: LIST
27663: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
27664: LD_VAR 0 6
27668: PPUSH
27669: CALL_OW 264
27673: PUSH
27674: LD_INT 4
27676: PUSH
27677: LD_INT 43
27679: PUSH
27680: LD_INT 25
27682: PUSH
27683: EMPTY
27684: LIST
27685: LIST
27686: LIST
27687: IN
27688: IFFALSE 27709
// points := [ 40 , 15 , 5 ] ;
27690: LD_ADDR_VAR 0 9
27694: PUSH
27695: LD_INT 40
27697: PUSH
27698: LD_INT 15
27700: PUSH
27701: LD_INT 5
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: LIST
27708: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
27709: LD_VAR 0 6
27713: PPUSH
27714: CALL_OW 264
27718: PUSH
27719: LD_INT 3
27721: PUSH
27722: LD_INT 23
27724: PUSH
27725: EMPTY
27726: LIST
27727: LIST
27728: IN
27729: IFFALSE 27750
// points := [ 7 , 25 , 8 ] ;
27731: LD_ADDR_VAR 0 9
27735: PUSH
27736: LD_INT 7
27738: PUSH
27739: LD_INT 25
27741: PUSH
27742: LD_INT 8
27744: PUSH
27745: EMPTY
27746: LIST
27747: LIST
27748: LIST
27749: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
27750: LD_VAR 0 6
27754: PPUSH
27755: CALL_OW 264
27759: PUSH
27760: LD_INT 5
27762: PUSH
27763: LD_INT 27
27765: PUSH
27766: LD_INT 44
27768: PUSH
27769: EMPTY
27770: LIST
27771: LIST
27772: LIST
27773: IN
27774: IFFALSE 27795
// points := [ 14 , 50 , 16 ] ;
27776: LD_ADDR_VAR 0 9
27780: PUSH
27781: LD_INT 14
27783: PUSH
27784: LD_INT 50
27786: PUSH
27787: LD_INT 16
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: LIST
27794: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
27795: LD_VAR 0 6
27799: PPUSH
27800: CALL_OW 264
27804: PUSH
27805: LD_INT 6
27807: PUSH
27808: LD_INT 46
27810: PUSH
27811: EMPTY
27812: LIST
27813: LIST
27814: IN
27815: IFFALSE 27836
// points := [ 32 , 120 , 70 ] ;
27817: LD_ADDR_VAR 0 9
27821: PUSH
27822: LD_INT 32
27824: PUSH
27825: LD_INT 120
27827: PUSH
27828: LD_INT 70
27830: PUSH
27831: EMPTY
27832: LIST
27833: LIST
27834: LIST
27835: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
27836: LD_VAR 0 6
27840: PPUSH
27841: CALL_OW 264
27845: PUSH
27846: LD_INT 7
27848: PUSH
27849: LD_INT 28
27851: PUSH
27852: LD_INT 45
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: LIST
27859: IN
27860: IFFALSE 27881
// points := [ 35 , 20 , 45 ] ;
27862: LD_ADDR_VAR 0 9
27866: PUSH
27867: LD_INT 35
27869: PUSH
27870: LD_INT 20
27872: PUSH
27873: LD_INT 45
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: LIST
27880: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
27881: LD_VAR 0 6
27885: PPUSH
27886: CALL_OW 264
27890: PUSH
27891: LD_INT 47
27893: PUSH
27894: EMPTY
27895: LIST
27896: IN
27897: IFFALSE 27918
// points := [ 67 , 45 , 75 ] ;
27899: LD_ADDR_VAR 0 9
27903: PUSH
27904: LD_INT 67
27906: PUSH
27907: LD_INT 45
27909: PUSH
27910: LD_INT 75
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: LIST
27917: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
27918: LD_VAR 0 6
27922: PPUSH
27923: CALL_OW 264
27927: PUSH
27928: LD_INT 26
27930: PUSH
27931: EMPTY
27932: LIST
27933: IN
27934: IFFALSE 27955
// points := [ 120 , 30 , 80 ] ;
27936: LD_ADDR_VAR 0 9
27940: PUSH
27941: LD_INT 120
27943: PUSH
27944: LD_INT 30
27946: PUSH
27947: LD_INT 80
27949: PUSH
27950: EMPTY
27951: LIST
27952: LIST
27953: LIST
27954: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
27955: LD_VAR 0 6
27959: PPUSH
27960: CALL_OW 264
27964: PUSH
27965: LD_INT 22
27967: PUSH
27968: EMPTY
27969: LIST
27970: IN
27971: IFFALSE 27992
// points := [ 40 , 1 , 1 ] ;
27973: LD_ADDR_VAR 0 9
27977: PUSH
27978: LD_INT 40
27980: PUSH
27981: LD_INT 1
27983: PUSH
27984: LD_INT 1
27986: PUSH
27987: EMPTY
27988: LIST
27989: LIST
27990: LIST
27991: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
27992: LD_VAR 0 6
27996: PPUSH
27997: CALL_OW 264
28001: PUSH
28002: LD_INT 29
28004: PUSH
28005: EMPTY
28006: LIST
28007: IN
28008: IFFALSE 28029
// points := [ 70 , 200 , 400 ] ;
28010: LD_ADDR_VAR 0 9
28014: PUSH
28015: LD_INT 70
28017: PUSH
28018: LD_INT 200
28020: PUSH
28021: LD_INT 400
28023: PUSH
28024: EMPTY
28025: LIST
28026: LIST
28027: LIST
28028: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28029: LD_VAR 0 6
28033: PPUSH
28034: CALL_OW 264
28038: PUSH
28039: LD_INT 14
28041: PUSH
28042: LD_INT 53
28044: PUSH
28045: EMPTY
28046: LIST
28047: LIST
28048: IN
28049: IFFALSE 28070
// points := [ 40 , 10 , 20 ] ;
28051: LD_ADDR_VAR 0 9
28055: PUSH
28056: LD_INT 40
28058: PUSH
28059: LD_INT 10
28061: PUSH
28062: LD_INT 20
28064: PUSH
28065: EMPTY
28066: LIST
28067: LIST
28068: LIST
28069: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28070: LD_VAR 0 6
28074: PPUSH
28075: CALL_OW 264
28079: PUSH
28080: LD_INT 9
28082: PUSH
28083: EMPTY
28084: LIST
28085: IN
28086: IFFALSE 28107
// points := [ 5 , 70 , 20 ] ;
28088: LD_ADDR_VAR 0 9
28092: PUSH
28093: LD_INT 5
28095: PUSH
28096: LD_INT 70
28098: PUSH
28099: LD_INT 20
28101: PUSH
28102: EMPTY
28103: LIST
28104: LIST
28105: LIST
28106: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28107: LD_VAR 0 6
28111: PPUSH
28112: CALL_OW 264
28116: PUSH
28117: LD_INT 10
28119: PUSH
28120: EMPTY
28121: LIST
28122: IN
28123: IFFALSE 28144
// points := [ 35 , 110 , 70 ] ;
28125: LD_ADDR_VAR 0 9
28129: PUSH
28130: LD_INT 35
28132: PUSH
28133: LD_INT 110
28135: PUSH
28136: LD_INT 70
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: LIST
28143: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28144: LD_VAR 0 6
28148: PPUSH
28149: CALL_OW 265
28153: PUSH
28154: LD_INT 25
28156: EQUAL
28157: IFFALSE 28178
// points := [ 80 , 65 , 100 ] ;
28159: LD_ADDR_VAR 0 9
28163: PUSH
28164: LD_INT 80
28166: PUSH
28167: LD_INT 65
28169: PUSH
28170: LD_INT 100
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: LIST
28177: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28178: LD_VAR 0 6
28182: PPUSH
28183: CALL_OW 263
28187: PUSH
28188: LD_INT 1
28190: EQUAL
28191: IFFALSE 28226
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28193: LD_ADDR_VAR 0 10
28197: PUSH
28198: LD_VAR 0 10
28202: PUSH
28203: LD_VAR 0 6
28207: PPUSH
28208: CALL_OW 311
28212: PPUSH
28213: LD_INT 3
28215: PPUSH
28216: CALL_OW 259
28220: PUSH
28221: LD_INT 4
28223: MUL
28224: MUL
28225: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28226: LD_VAR 0 6
28230: PPUSH
28231: CALL_OW 263
28235: PUSH
28236: LD_INT 2
28238: EQUAL
28239: IFFALSE 28290
// begin j := IsControledBy ( i ) ;
28241: LD_ADDR_VAR 0 7
28245: PUSH
28246: LD_VAR 0 6
28250: PPUSH
28251: CALL_OW 312
28255: ST_TO_ADDR
// if j then
28256: LD_VAR 0 7
28260: IFFALSE 28290
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
28262: LD_ADDR_VAR 0 10
28266: PUSH
28267: LD_VAR 0 10
28271: PUSH
28272: LD_VAR 0 7
28276: PPUSH
28277: LD_INT 3
28279: PPUSH
28280: CALL_OW 259
28284: PUSH
28285: LD_INT 3
28287: MUL
28288: MUL
28289: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
28290: LD_VAR 0 6
28294: PPUSH
28295: CALL_OW 264
28299: PUSH
28300: LD_INT 5
28302: PUSH
28303: LD_INT 6
28305: PUSH
28306: LD_INT 46
28308: PUSH
28309: LD_INT 44
28311: PUSH
28312: LD_INT 47
28314: PUSH
28315: LD_INT 45
28317: PUSH
28318: LD_INT 28
28320: PUSH
28321: LD_INT 7
28323: PUSH
28324: LD_INT 27
28326: PUSH
28327: LD_INT 29
28329: PUSH
28330: EMPTY
28331: LIST
28332: LIST
28333: LIST
28334: LIST
28335: LIST
28336: LIST
28337: LIST
28338: LIST
28339: LIST
28340: LIST
28341: IN
28342: PUSH
28343: LD_VAR 0 1
28347: PPUSH
28348: LD_INT 52
28350: PPUSH
28351: CALL_OW 321
28355: PUSH
28356: LD_INT 2
28358: EQUAL
28359: AND
28360: IFFALSE 28377
// bpoints := bpoints * 1.2 ;
28362: LD_ADDR_VAR 0 10
28366: PUSH
28367: LD_VAR 0 10
28371: PUSH
28372: LD_REAL  1.20000000000000E+0000
28375: MUL
28376: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
28377: LD_VAR 0 6
28381: PPUSH
28382: CALL_OW 264
28386: PUSH
28387: LD_INT 6
28389: PUSH
28390: LD_INT 46
28392: PUSH
28393: LD_INT 47
28395: PUSH
28396: EMPTY
28397: LIST
28398: LIST
28399: LIST
28400: IN
28401: IFFALSE 28418
// bpoints := bpoints * 1.2 ;
28403: LD_ADDR_VAR 0 10
28407: PUSH
28408: LD_VAR 0 10
28412: PUSH
28413: LD_REAL  1.20000000000000E+0000
28416: MUL
28417: ST_TO_ADDR
// end ; unit_building :
28418: GO 28432
28420: LD_INT 3
28422: DOUBLE
28423: EQUAL
28424: IFTRUE 28428
28426: GO 28431
28428: POP
// ; end ;
28429: GO 28432
28431: POP
// for j = 1 to 3 do
28432: LD_ADDR_VAR 0 7
28436: PUSH
28437: DOUBLE
28438: LD_INT 1
28440: DEC
28441: ST_TO_ADDR
28442: LD_INT 3
28444: PUSH
28445: FOR_TO
28446: IFFALSE 28499
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
28448: LD_ADDR_VAR 0 5
28452: PUSH
28453: LD_VAR 0 5
28457: PPUSH
28458: LD_VAR 0 7
28462: PPUSH
28463: LD_VAR 0 5
28467: PUSH
28468: LD_VAR 0 7
28472: ARRAY
28473: PUSH
28474: LD_VAR 0 9
28478: PUSH
28479: LD_VAR 0 7
28483: ARRAY
28484: PUSH
28485: LD_VAR 0 10
28489: MUL
28490: PLUS
28491: PPUSH
28492: CALL_OW 1
28496: ST_TO_ADDR
28497: GO 28445
28499: POP
28500: POP
// end ;
28501: GO 26984
28503: POP
28504: POP
// result := Replace ( result , 4 , tmp ) ;
28505: LD_ADDR_VAR 0 5
28509: PUSH
28510: LD_VAR 0 5
28514: PPUSH
28515: LD_INT 4
28517: PPUSH
28518: LD_VAR 0 8
28522: PPUSH
28523: CALL_OW 1
28527: ST_TO_ADDR
// end ;
28528: LD_VAR 0 5
28532: RET
// export function DangerAtRange ( unit , range ) ; begin
28533: LD_INT 0
28535: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
28536: LD_ADDR_VAR 0 3
28540: PUSH
28541: LD_VAR 0 1
28545: PPUSH
28546: CALL_OW 255
28550: PPUSH
28551: LD_VAR 0 1
28555: PPUSH
28556: CALL_OW 250
28560: PPUSH
28561: LD_VAR 0 1
28565: PPUSH
28566: CALL_OW 251
28570: PPUSH
28571: LD_VAR 0 2
28575: PPUSH
28576: CALL 26836 0 4
28580: ST_TO_ADDR
// end ;
28581: LD_VAR 0 3
28585: RET
// export function DangerInArea ( side , area ) ; begin
28586: LD_INT 0
28588: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
28589: LD_ADDR_VAR 0 3
28593: PUSH
28594: LD_VAR 0 2
28598: PPUSH
28599: LD_INT 81
28601: PUSH
28602: LD_VAR 0 1
28606: PUSH
28607: EMPTY
28608: LIST
28609: LIST
28610: PPUSH
28611: CALL_OW 70
28615: ST_TO_ADDR
// end ;
28616: LD_VAR 0 3
28620: RET
// export function IsExtension ( b ) ; begin
28621: LD_INT 0
28623: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
28624: LD_ADDR_VAR 0 2
28628: PUSH
28629: LD_VAR 0 1
28633: PUSH
28634: LD_INT 23
28636: PUSH
28637: LD_INT 20
28639: PUSH
28640: LD_INT 22
28642: PUSH
28643: LD_INT 17
28645: PUSH
28646: LD_INT 24
28648: PUSH
28649: LD_INT 21
28651: PUSH
28652: LD_INT 19
28654: PUSH
28655: LD_INT 16
28657: PUSH
28658: LD_INT 25
28660: PUSH
28661: LD_INT 18
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: LIST
28668: LIST
28669: LIST
28670: LIST
28671: LIST
28672: LIST
28673: LIST
28674: LIST
28675: IN
28676: ST_TO_ADDR
// end ;
28677: LD_VAR 0 2
28681: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
28682: LD_INT 0
28684: PPUSH
28685: PPUSH
28686: PPUSH
// result := [ ] ;
28687: LD_ADDR_VAR 0 3
28691: PUSH
28692: EMPTY
28693: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
28694: LD_ADDR_VAR 0 4
28698: PUSH
28699: LD_VAR 0 2
28703: PPUSH
28704: LD_INT 21
28706: PUSH
28707: LD_INT 3
28709: PUSH
28710: EMPTY
28711: LIST
28712: LIST
28713: PPUSH
28714: CALL_OW 70
28718: ST_TO_ADDR
// if not tmp then
28719: LD_VAR 0 4
28723: NOT
28724: IFFALSE 28728
// exit ;
28726: GO 28786
// for i in tmp do
28728: LD_ADDR_VAR 0 5
28732: PUSH
28733: LD_VAR 0 4
28737: PUSH
28738: FOR_IN
28739: IFFALSE 28774
// if GetBase ( i ) <> base then
28741: LD_VAR 0 5
28745: PPUSH
28746: CALL_OW 274
28750: PUSH
28751: LD_VAR 0 1
28755: NONEQUAL
28756: IFFALSE 28772
// ComLinkToBase ( base , i ) ;
28758: LD_VAR 0 1
28762: PPUSH
28763: LD_VAR 0 5
28767: PPUSH
28768: CALL_OW 169
28772: GO 28738
28774: POP
28775: POP
// result := tmp ;
28776: LD_ADDR_VAR 0 3
28780: PUSH
28781: LD_VAR 0 4
28785: ST_TO_ADDR
// end ;
28786: LD_VAR 0 3
28790: RET
// export function ComComplete ( unit , b ) ; var i ; begin
28791: LD_INT 0
28793: PPUSH
28794: PPUSH
// if BuildingStatus ( b ) = bs_build then
28795: LD_VAR 0 2
28799: PPUSH
28800: CALL_OW 461
28804: PUSH
28805: LD_INT 1
28807: EQUAL
28808: IFFALSE 28868
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
28810: LD_VAR 0 1
28814: PPUSH
28815: LD_STRING h
28817: PUSH
28818: LD_VAR 0 2
28822: PPUSH
28823: CALL_OW 250
28827: PUSH
28828: LD_VAR 0 2
28832: PPUSH
28833: CALL_OW 251
28837: PUSH
28838: LD_VAR 0 2
28842: PUSH
28843: LD_INT 0
28845: PUSH
28846: LD_INT 0
28848: PUSH
28849: LD_INT 0
28851: PUSH
28852: EMPTY
28853: LIST
28854: LIST
28855: LIST
28856: LIST
28857: LIST
28858: LIST
28859: LIST
28860: PUSH
28861: EMPTY
28862: LIST
28863: PPUSH
28864: CALL_OW 446
// end ;
28868: LD_VAR 0 3
28872: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
28873: LD_INT 0
28875: PPUSH
28876: PPUSH
28877: PPUSH
28878: PPUSH
28879: PPUSH
28880: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
28881: LD_VAR 0 1
28885: NOT
28886: PUSH
28887: LD_VAR 0 1
28891: PPUSH
28892: CALL_OW 263
28896: PUSH
28897: LD_INT 2
28899: EQUAL
28900: NOT
28901: OR
28902: IFFALSE 28906
// exit ;
28904: GO 29222
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
28906: LD_ADDR_VAR 0 6
28910: PUSH
28911: LD_INT 22
28913: PUSH
28914: LD_VAR 0 1
28918: PPUSH
28919: CALL_OW 255
28923: PUSH
28924: EMPTY
28925: LIST
28926: LIST
28927: PUSH
28928: LD_INT 2
28930: PUSH
28931: LD_INT 30
28933: PUSH
28934: LD_INT 36
28936: PUSH
28937: EMPTY
28938: LIST
28939: LIST
28940: PUSH
28941: LD_INT 34
28943: PUSH
28944: LD_INT 31
28946: PUSH
28947: EMPTY
28948: LIST
28949: LIST
28950: PUSH
28951: EMPTY
28952: LIST
28953: LIST
28954: LIST
28955: PUSH
28956: EMPTY
28957: LIST
28958: LIST
28959: PPUSH
28960: CALL_OW 69
28964: ST_TO_ADDR
// if not tmp then
28965: LD_VAR 0 6
28969: NOT
28970: IFFALSE 28974
// exit ;
28972: GO 29222
// result := [ ] ;
28974: LD_ADDR_VAR 0 2
28978: PUSH
28979: EMPTY
28980: ST_TO_ADDR
// for i in tmp do
28981: LD_ADDR_VAR 0 3
28985: PUSH
28986: LD_VAR 0 6
28990: PUSH
28991: FOR_IN
28992: IFFALSE 29063
// begin t := UnitsInside ( i ) ;
28994: LD_ADDR_VAR 0 4
28998: PUSH
28999: LD_VAR 0 3
29003: PPUSH
29004: CALL_OW 313
29008: ST_TO_ADDR
// if t then
29009: LD_VAR 0 4
29013: IFFALSE 29061
// for j in t do
29015: LD_ADDR_VAR 0 7
29019: PUSH
29020: LD_VAR 0 4
29024: PUSH
29025: FOR_IN
29026: IFFALSE 29059
// result := Insert ( result , result + 1 , j ) ;
29028: LD_ADDR_VAR 0 2
29032: PUSH
29033: LD_VAR 0 2
29037: PPUSH
29038: LD_VAR 0 2
29042: PUSH
29043: LD_INT 1
29045: PLUS
29046: PPUSH
29047: LD_VAR 0 7
29051: PPUSH
29052: CALL_OW 2
29056: ST_TO_ADDR
29057: GO 29025
29059: POP
29060: POP
// end ;
29061: GO 28991
29063: POP
29064: POP
// if not result then
29065: LD_VAR 0 2
29069: NOT
29070: IFFALSE 29074
// exit ;
29072: GO 29222
// mech := result [ 1 ] ;
29074: LD_ADDR_VAR 0 5
29078: PUSH
29079: LD_VAR 0 2
29083: PUSH
29084: LD_INT 1
29086: ARRAY
29087: ST_TO_ADDR
// if result > 1 then
29088: LD_VAR 0 2
29092: PUSH
29093: LD_INT 1
29095: GREATER
29096: IFFALSE 29208
// for i = 2 to result do
29098: LD_ADDR_VAR 0 3
29102: PUSH
29103: DOUBLE
29104: LD_INT 2
29106: DEC
29107: ST_TO_ADDR
29108: LD_VAR 0 2
29112: PUSH
29113: FOR_TO
29114: IFFALSE 29206
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29116: LD_ADDR_VAR 0 4
29120: PUSH
29121: LD_VAR 0 2
29125: PUSH
29126: LD_VAR 0 3
29130: ARRAY
29131: PPUSH
29132: LD_INT 3
29134: PPUSH
29135: CALL_OW 259
29139: PUSH
29140: LD_VAR 0 2
29144: PUSH
29145: LD_VAR 0 3
29149: ARRAY
29150: PPUSH
29151: CALL_OW 432
29155: MINUS
29156: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29157: LD_VAR 0 4
29161: PUSH
29162: LD_VAR 0 5
29166: PPUSH
29167: LD_INT 3
29169: PPUSH
29170: CALL_OW 259
29174: PUSH
29175: LD_VAR 0 5
29179: PPUSH
29180: CALL_OW 432
29184: MINUS
29185: GREATEREQUAL
29186: IFFALSE 29204
// mech := result [ i ] ;
29188: LD_ADDR_VAR 0 5
29192: PUSH
29193: LD_VAR 0 2
29197: PUSH
29198: LD_VAR 0 3
29202: ARRAY
29203: ST_TO_ADDR
// end ;
29204: GO 29113
29206: POP
29207: POP
// ComLinkTo ( vehicle , mech ) ;
29208: LD_VAR 0 1
29212: PPUSH
29213: LD_VAR 0 5
29217: PPUSH
29218: CALL_OW 135
// end ;
29222: LD_VAR 0 2
29226: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
29227: LD_INT 0
29229: PPUSH
29230: PPUSH
29231: PPUSH
29232: PPUSH
29233: PPUSH
29234: PPUSH
29235: PPUSH
29236: PPUSH
29237: PPUSH
29238: PPUSH
29239: PPUSH
29240: PPUSH
29241: PPUSH
// result := [ ] ;
29242: LD_ADDR_VAR 0 7
29246: PUSH
29247: EMPTY
29248: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
29249: LD_VAR 0 1
29253: PPUSH
29254: CALL_OW 266
29258: PUSH
29259: LD_INT 0
29261: PUSH
29262: LD_INT 1
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: IN
29269: NOT
29270: IFFALSE 29274
// exit ;
29272: GO 30905
// if name then
29274: LD_VAR 0 3
29278: IFFALSE 29294
// SetBName ( base_dep , name ) ;
29280: LD_VAR 0 1
29284: PPUSH
29285: LD_VAR 0 3
29289: PPUSH
29290: CALL_OW 500
// base := GetBase ( base_dep ) ;
29294: LD_ADDR_VAR 0 15
29298: PUSH
29299: LD_VAR 0 1
29303: PPUSH
29304: CALL_OW 274
29308: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
29309: LD_ADDR_VAR 0 16
29313: PUSH
29314: LD_VAR 0 1
29318: PPUSH
29319: CALL_OW 255
29323: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
29324: LD_ADDR_VAR 0 17
29328: PUSH
29329: LD_VAR 0 1
29333: PPUSH
29334: CALL_OW 248
29338: ST_TO_ADDR
// if sources then
29339: LD_VAR 0 5
29343: IFFALSE 29390
// for i = 1 to 3 do
29345: LD_ADDR_VAR 0 8
29349: PUSH
29350: DOUBLE
29351: LD_INT 1
29353: DEC
29354: ST_TO_ADDR
29355: LD_INT 3
29357: PUSH
29358: FOR_TO
29359: IFFALSE 29388
// AddResourceType ( base , i , sources [ i ] ) ;
29361: LD_VAR 0 15
29365: PPUSH
29366: LD_VAR 0 8
29370: PPUSH
29371: LD_VAR 0 5
29375: PUSH
29376: LD_VAR 0 8
29380: ARRAY
29381: PPUSH
29382: CALL_OW 276
29386: GO 29358
29388: POP
29389: POP
// buildings := GetBaseBuildings ( base , area ) ;
29390: LD_ADDR_VAR 0 18
29394: PUSH
29395: LD_VAR 0 15
29399: PPUSH
29400: LD_VAR 0 2
29404: PPUSH
29405: CALL 28682 0 2
29409: ST_TO_ADDR
// InitHc ;
29410: CALL_OW 19
// InitUc ;
29414: CALL_OW 18
// uc_side := side ;
29418: LD_ADDR_OWVAR 20
29422: PUSH
29423: LD_VAR 0 16
29427: ST_TO_ADDR
// uc_nation := nation ;
29428: LD_ADDR_OWVAR 21
29432: PUSH
29433: LD_VAR 0 17
29437: ST_TO_ADDR
// if buildings then
29438: LD_VAR 0 18
29442: IFFALSE 30764
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
29444: LD_ADDR_VAR 0 19
29448: PUSH
29449: LD_VAR 0 18
29453: PPUSH
29454: LD_INT 2
29456: PUSH
29457: LD_INT 30
29459: PUSH
29460: LD_INT 29
29462: PUSH
29463: EMPTY
29464: LIST
29465: LIST
29466: PUSH
29467: LD_INT 30
29469: PUSH
29470: LD_INT 30
29472: PUSH
29473: EMPTY
29474: LIST
29475: LIST
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: LIST
29481: PPUSH
29482: CALL_OW 72
29486: ST_TO_ADDR
// if tmp then
29487: LD_VAR 0 19
29491: IFFALSE 29539
// for i in tmp do
29493: LD_ADDR_VAR 0 8
29497: PUSH
29498: LD_VAR 0 19
29502: PUSH
29503: FOR_IN
29504: IFFALSE 29537
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
29506: LD_VAR 0 8
29510: PPUSH
29511: CALL_OW 250
29515: PPUSH
29516: LD_VAR 0 8
29520: PPUSH
29521: CALL_OW 251
29525: PPUSH
29526: LD_VAR 0 16
29530: PPUSH
29531: CALL_OW 441
29535: GO 29503
29537: POP
29538: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
29539: LD_VAR 0 18
29543: PPUSH
29544: LD_INT 2
29546: PUSH
29547: LD_INT 30
29549: PUSH
29550: LD_INT 32
29552: PUSH
29553: EMPTY
29554: LIST
29555: LIST
29556: PUSH
29557: LD_INT 30
29559: PUSH
29560: LD_INT 33
29562: PUSH
29563: EMPTY
29564: LIST
29565: LIST
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: LIST
29571: PPUSH
29572: CALL_OW 72
29576: IFFALSE 29664
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
29578: LD_ADDR_VAR 0 8
29582: PUSH
29583: LD_VAR 0 18
29587: PPUSH
29588: LD_INT 2
29590: PUSH
29591: LD_INT 30
29593: PUSH
29594: LD_INT 32
29596: PUSH
29597: EMPTY
29598: LIST
29599: LIST
29600: PUSH
29601: LD_INT 30
29603: PUSH
29604: LD_INT 33
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: PUSH
29611: EMPTY
29612: LIST
29613: LIST
29614: LIST
29615: PPUSH
29616: CALL_OW 72
29620: PUSH
29621: FOR_IN
29622: IFFALSE 29662
// begin if not GetBWeapon ( i ) then
29624: LD_VAR 0 8
29628: PPUSH
29629: CALL_OW 269
29633: NOT
29634: IFFALSE 29660
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
29636: LD_VAR 0 8
29640: PPUSH
29641: LD_VAR 0 8
29645: PPUSH
29646: LD_VAR 0 2
29650: PPUSH
29651: CALL 30910 0 2
29655: PPUSH
29656: CALL_OW 431
// end ;
29660: GO 29621
29662: POP
29663: POP
// end ; for i = 1 to personel do
29664: LD_ADDR_VAR 0 8
29668: PUSH
29669: DOUBLE
29670: LD_INT 1
29672: DEC
29673: ST_TO_ADDR
29674: LD_VAR 0 6
29678: PUSH
29679: FOR_TO
29680: IFFALSE 30744
// begin if i > 4 then
29682: LD_VAR 0 8
29686: PUSH
29687: LD_INT 4
29689: GREATER
29690: IFFALSE 29694
// break ;
29692: GO 30744
// case i of 1 :
29694: LD_VAR 0 8
29698: PUSH
29699: LD_INT 1
29701: DOUBLE
29702: EQUAL
29703: IFTRUE 29707
29705: GO 29787
29707: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
29708: LD_ADDR_VAR 0 12
29712: PUSH
29713: LD_VAR 0 18
29717: PPUSH
29718: LD_INT 22
29720: PUSH
29721: LD_VAR 0 16
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: PUSH
29730: LD_INT 58
29732: PUSH
29733: EMPTY
29734: LIST
29735: PUSH
29736: LD_INT 2
29738: PUSH
29739: LD_INT 30
29741: PUSH
29742: LD_INT 32
29744: PUSH
29745: EMPTY
29746: LIST
29747: LIST
29748: PUSH
29749: LD_INT 30
29751: PUSH
29752: LD_INT 4
29754: PUSH
29755: EMPTY
29756: LIST
29757: LIST
29758: PUSH
29759: LD_INT 30
29761: PUSH
29762: LD_INT 5
29764: PUSH
29765: EMPTY
29766: LIST
29767: LIST
29768: PUSH
29769: EMPTY
29770: LIST
29771: LIST
29772: LIST
29773: LIST
29774: PUSH
29775: EMPTY
29776: LIST
29777: LIST
29778: LIST
29779: PPUSH
29780: CALL_OW 72
29784: ST_TO_ADDR
29785: GO 30009
29787: LD_INT 2
29789: DOUBLE
29790: EQUAL
29791: IFTRUE 29795
29793: GO 29857
29795: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
29796: LD_ADDR_VAR 0 12
29800: PUSH
29801: LD_VAR 0 18
29805: PPUSH
29806: LD_INT 22
29808: PUSH
29809: LD_VAR 0 16
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: PUSH
29818: LD_INT 2
29820: PUSH
29821: LD_INT 30
29823: PUSH
29824: LD_INT 0
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: PUSH
29831: LD_INT 30
29833: PUSH
29834: LD_INT 1
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: PUSH
29841: EMPTY
29842: LIST
29843: LIST
29844: LIST
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PPUSH
29850: CALL_OW 72
29854: ST_TO_ADDR
29855: GO 30009
29857: LD_INT 3
29859: DOUBLE
29860: EQUAL
29861: IFTRUE 29865
29863: GO 29927
29865: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
29866: LD_ADDR_VAR 0 12
29870: PUSH
29871: LD_VAR 0 18
29875: PPUSH
29876: LD_INT 22
29878: PUSH
29879: LD_VAR 0 16
29883: PUSH
29884: EMPTY
29885: LIST
29886: LIST
29887: PUSH
29888: LD_INT 2
29890: PUSH
29891: LD_INT 30
29893: PUSH
29894: LD_INT 2
29896: PUSH
29897: EMPTY
29898: LIST
29899: LIST
29900: PUSH
29901: LD_INT 30
29903: PUSH
29904: LD_INT 3
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: LIST
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PPUSH
29920: CALL_OW 72
29924: ST_TO_ADDR
29925: GO 30009
29927: LD_INT 4
29929: DOUBLE
29930: EQUAL
29931: IFTRUE 29935
29933: GO 30008
29935: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
29936: LD_ADDR_VAR 0 12
29940: PUSH
29941: LD_VAR 0 18
29945: PPUSH
29946: LD_INT 22
29948: PUSH
29949: LD_VAR 0 16
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: PUSH
29958: LD_INT 2
29960: PUSH
29961: LD_INT 30
29963: PUSH
29964: LD_INT 6
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: PUSH
29971: LD_INT 30
29973: PUSH
29974: LD_INT 7
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: PUSH
29981: LD_INT 30
29983: PUSH
29984: LD_INT 8
29986: PUSH
29987: EMPTY
29988: LIST
29989: LIST
29990: PUSH
29991: EMPTY
29992: LIST
29993: LIST
29994: LIST
29995: LIST
29996: PUSH
29997: EMPTY
29998: LIST
29999: LIST
30000: PPUSH
30001: CALL_OW 72
30005: ST_TO_ADDR
30006: GO 30009
30008: POP
// if i = 1 then
30009: LD_VAR 0 8
30013: PUSH
30014: LD_INT 1
30016: EQUAL
30017: IFFALSE 30128
// begin tmp := [ ] ;
30019: LD_ADDR_VAR 0 19
30023: PUSH
30024: EMPTY
30025: ST_TO_ADDR
// for j in f do
30026: LD_ADDR_VAR 0 9
30030: PUSH
30031: LD_VAR 0 12
30035: PUSH
30036: FOR_IN
30037: IFFALSE 30110
// if GetBType ( j ) = b_bunker then
30039: LD_VAR 0 9
30043: PPUSH
30044: CALL_OW 266
30048: PUSH
30049: LD_INT 32
30051: EQUAL
30052: IFFALSE 30079
// tmp := Insert ( tmp , 1 , j ) else
30054: LD_ADDR_VAR 0 19
30058: PUSH
30059: LD_VAR 0 19
30063: PPUSH
30064: LD_INT 1
30066: PPUSH
30067: LD_VAR 0 9
30071: PPUSH
30072: CALL_OW 2
30076: ST_TO_ADDR
30077: GO 30108
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30079: LD_ADDR_VAR 0 19
30083: PUSH
30084: LD_VAR 0 19
30088: PPUSH
30089: LD_VAR 0 19
30093: PUSH
30094: LD_INT 1
30096: PLUS
30097: PPUSH
30098: LD_VAR 0 9
30102: PPUSH
30103: CALL_OW 2
30107: ST_TO_ADDR
30108: GO 30036
30110: POP
30111: POP
// if tmp then
30112: LD_VAR 0 19
30116: IFFALSE 30128
// f := tmp ;
30118: LD_ADDR_VAR 0 12
30122: PUSH
30123: LD_VAR 0 19
30127: ST_TO_ADDR
// end ; x := personel [ i ] ;
30128: LD_ADDR_VAR 0 13
30132: PUSH
30133: LD_VAR 0 6
30137: PUSH
30138: LD_VAR 0 8
30142: ARRAY
30143: ST_TO_ADDR
// if x = - 1 then
30144: LD_VAR 0 13
30148: PUSH
30149: LD_INT 1
30151: NEG
30152: EQUAL
30153: IFFALSE 30362
// begin for j in f do
30155: LD_ADDR_VAR 0 9
30159: PUSH
30160: LD_VAR 0 12
30164: PUSH
30165: FOR_IN
30166: IFFALSE 30358
// repeat InitHc ;
30168: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30172: LD_VAR 0 9
30176: PPUSH
30177: CALL_OW 266
30181: PUSH
30182: LD_INT 5
30184: EQUAL
30185: IFFALSE 30255
// begin if UnitsInside ( j ) < 3 then
30187: LD_VAR 0 9
30191: PPUSH
30192: CALL_OW 313
30196: PUSH
30197: LD_INT 3
30199: LESS
30200: IFFALSE 30236
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30202: LD_INT 0
30204: PPUSH
30205: LD_INT 5
30207: PUSH
30208: LD_INT 8
30210: PUSH
30211: LD_INT 9
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: LIST
30218: PUSH
30219: LD_VAR 0 17
30223: ARRAY
30224: PPUSH
30225: LD_VAR 0 4
30229: PPUSH
30230: CALL_OW 380
30234: GO 30253
// PrepareHuman ( false , i , skill ) ;
30236: LD_INT 0
30238: PPUSH
30239: LD_VAR 0 8
30243: PPUSH
30244: LD_VAR 0 4
30248: PPUSH
30249: CALL_OW 380
// end else
30253: GO 30272
// PrepareHuman ( false , i , skill ) ;
30255: LD_INT 0
30257: PPUSH
30258: LD_VAR 0 8
30262: PPUSH
30263: LD_VAR 0 4
30267: PPUSH
30268: CALL_OW 380
// un := CreateHuman ;
30272: LD_ADDR_VAR 0 14
30276: PUSH
30277: CALL_OW 44
30281: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30282: LD_ADDR_VAR 0 7
30286: PUSH
30287: LD_VAR 0 7
30291: PPUSH
30292: LD_INT 1
30294: PPUSH
30295: LD_VAR 0 14
30299: PPUSH
30300: CALL_OW 2
30304: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
30305: LD_VAR 0 14
30309: PPUSH
30310: LD_VAR 0 9
30314: PPUSH
30315: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
30319: LD_VAR 0 9
30323: PPUSH
30324: CALL_OW 313
30328: PUSH
30329: LD_INT 6
30331: EQUAL
30332: PUSH
30333: LD_VAR 0 9
30337: PPUSH
30338: CALL_OW 266
30342: PUSH
30343: LD_INT 32
30345: PUSH
30346: LD_INT 31
30348: PUSH
30349: EMPTY
30350: LIST
30351: LIST
30352: IN
30353: OR
30354: IFFALSE 30168
30356: GO 30165
30358: POP
30359: POP
// end else
30360: GO 30742
// for j = 1 to x do
30362: LD_ADDR_VAR 0 9
30366: PUSH
30367: DOUBLE
30368: LD_INT 1
30370: DEC
30371: ST_TO_ADDR
30372: LD_VAR 0 13
30376: PUSH
30377: FOR_TO
30378: IFFALSE 30740
// begin InitHc ;
30380: CALL_OW 19
// if not f then
30384: LD_VAR 0 12
30388: NOT
30389: IFFALSE 30478
// begin PrepareHuman ( false , i , skill ) ;
30391: LD_INT 0
30393: PPUSH
30394: LD_VAR 0 8
30398: PPUSH
30399: LD_VAR 0 4
30403: PPUSH
30404: CALL_OW 380
// un := CreateHuman ;
30408: LD_ADDR_VAR 0 14
30412: PUSH
30413: CALL_OW 44
30417: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30418: LD_ADDR_VAR 0 7
30422: PUSH
30423: LD_VAR 0 7
30427: PPUSH
30428: LD_INT 1
30430: PPUSH
30431: LD_VAR 0 14
30435: PPUSH
30436: CALL_OW 2
30440: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30441: LD_VAR 0 14
30445: PPUSH
30446: LD_VAR 0 1
30450: PPUSH
30451: CALL_OW 250
30455: PPUSH
30456: LD_VAR 0 1
30460: PPUSH
30461: CALL_OW 251
30465: PPUSH
30466: LD_INT 10
30468: PPUSH
30469: LD_INT 0
30471: PPUSH
30472: CALL_OW 50
// continue ;
30476: GO 30377
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
30478: LD_VAR 0 12
30482: PUSH
30483: LD_INT 1
30485: ARRAY
30486: PPUSH
30487: CALL_OW 313
30491: PUSH
30492: LD_VAR 0 12
30496: PUSH
30497: LD_INT 1
30499: ARRAY
30500: PPUSH
30501: CALL_OW 266
30505: PUSH
30506: LD_INT 32
30508: PUSH
30509: LD_INT 31
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: IN
30516: AND
30517: PUSH
30518: LD_VAR 0 12
30522: PUSH
30523: LD_INT 1
30525: ARRAY
30526: PPUSH
30527: CALL_OW 313
30531: PUSH
30532: LD_INT 6
30534: EQUAL
30535: OR
30536: IFFALSE 30556
// f := Delete ( f , 1 ) ;
30538: LD_ADDR_VAR 0 12
30542: PUSH
30543: LD_VAR 0 12
30547: PPUSH
30548: LD_INT 1
30550: PPUSH
30551: CALL_OW 3
30555: ST_TO_ADDR
// if not f then
30556: LD_VAR 0 12
30560: NOT
30561: IFFALSE 30579
// begin x := x + 2 ;
30563: LD_ADDR_VAR 0 13
30567: PUSH
30568: LD_VAR 0 13
30572: PUSH
30573: LD_INT 2
30575: PLUS
30576: ST_TO_ADDR
// continue ;
30577: GO 30377
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
30579: LD_VAR 0 12
30583: PUSH
30584: LD_INT 1
30586: ARRAY
30587: PPUSH
30588: CALL_OW 266
30592: PUSH
30593: LD_INT 5
30595: EQUAL
30596: IFFALSE 30670
// begin if UnitsInside ( f [ 1 ] ) < 3 then
30598: LD_VAR 0 12
30602: PUSH
30603: LD_INT 1
30605: ARRAY
30606: PPUSH
30607: CALL_OW 313
30611: PUSH
30612: LD_INT 3
30614: LESS
30615: IFFALSE 30651
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30617: LD_INT 0
30619: PPUSH
30620: LD_INT 5
30622: PUSH
30623: LD_INT 8
30625: PUSH
30626: LD_INT 9
30628: PUSH
30629: EMPTY
30630: LIST
30631: LIST
30632: LIST
30633: PUSH
30634: LD_VAR 0 17
30638: ARRAY
30639: PPUSH
30640: LD_VAR 0 4
30644: PPUSH
30645: CALL_OW 380
30649: GO 30668
// PrepareHuman ( false , i , skill ) ;
30651: LD_INT 0
30653: PPUSH
30654: LD_VAR 0 8
30658: PPUSH
30659: LD_VAR 0 4
30663: PPUSH
30664: CALL_OW 380
// end else
30668: GO 30687
// PrepareHuman ( false , i , skill ) ;
30670: LD_INT 0
30672: PPUSH
30673: LD_VAR 0 8
30677: PPUSH
30678: LD_VAR 0 4
30682: PPUSH
30683: CALL_OW 380
// un := CreateHuman ;
30687: LD_ADDR_VAR 0 14
30691: PUSH
30692: CALL_OW 44
30696: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30697: LD_ADDR_VAR 0 7
30701: PUSH
30702: LD_VAR 0 7
30706: PPUSH
30707: LD_INT 1
30709: PPUSH
30710: LD_VAR 0 14
30714: PPUSH
30715: CALL_OW 2
30719: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
30720: LD_VAR 0 14
30724: PPUSH
30725: LD_VAR 0 12
30729: PUSH
30730: LD_INT 1
30732: ARRAY
30733: PPUSH
30734: CALL_OW 52
// end ;
30738: GO 30377
30740: POP
30741: POP
// end ;
30742: GO 29679
30744: POP
30745: POP
// result := result ^ buildings ;
30746: LD_ADDR_VAR 0 7
30750: PUSH
30751: LD_VAR 0 7
30755: PUSH
30756: LD_VAR 0 18
30760: ADD
30761: ST_TO_ADDR
// end else
30762: GO 30905
// begin for i = 1 to personel do
30764: LD_ADDR_VAR 0 8
30768: PUSH
30769: DOUBLE
30770: LD_INT 1
30772: DEC
30773: ST_TO_ADDR
30774: LD_VAR 0 6
30778: PUSH
30779: FOR_TO
30780: IFFALSE 30903
// begin if i > 4 then
30782: LD_VAR 0 8
30786: PUSH
30787: LD_INT 4
30789: GREATER
30790: IFFALSE 30794
// break ;
30792: GO 30903
// x := personel [ i ] ;
30794: LD_ADDR_VAR 0 13
30798: PUSH
30799: LD_VAR 0 6
30803: PUSH
30804: LD_VAR 0 8
30808: ARRAY
30809: ST_TO_ADDR
// if x = - 1 then
30810: LD_VAR 0 13
30814: PUSH
30815: LD_INT 1
30817: NEG
30818: EQUAL
30819: IFFALSE 30823
// continue ;
30821: GO 30779
// PrepareHuman ( false , i , skill ) ;
30823: LD_INT 0
30825: PPUSH
30826: LD_VAR 0 8
30830: PPUSH
30831: LD_VAR 0 4
30835: PPUSH
30836: CALL_OW 380
// un := CreateHuman ;
30840: LD_ADDR_VAR 0 14
30844: PUSH
30845: CALL_OW 44
30849: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30850: LD_VAR 0 14
30854: PPUSH
30855: LD_VAR 0 1
30859: PPUSH
30860: CALL_OW 250
30864: PPUSH
30865: LD_VAR 0 1
30869: PPUSH
30870: CALL_OW 251
30874: PPUSH
30875: LD_INT 10
30877: PPUSH
30878: LD_INT 0
30880: PPUSH
30881: CALL_OW 50
// result := result ^ un ;
30885: LD_ADDR_VAR 0 7
30889: PUSH
30890: LD_VAR 0 7
30894: PUSH
30895: LD_VAR 0 14
30899: ADD
30900: ST_TO_ADDR
// end ;
30901: GO 30779
30903: POP
30904: POP
// end ; end ;
30905: LD_VAR 0 7
30909: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
30910: LD_INT 0
30912: PPUSH
30913: PPUSH
30914: PPUSH
30915: PPUSH
30916: PPUSH
30917: PPUSH
30918: PPUSH
30919: PPUSH
30920: PPUSH
30921: PPUSH
30922: PPUSH
30923: PPUSH
30924: PPUSH
30925: PPUSH
30926: PPUSH
30927: PPUSH
// result := false ;
30928: LD_ADDR_VAR 0 3
30932: PUSH
30933: LD_INT 0
30935: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
30936: LD_VAR 0 1
30940: NOT
30941: PUSH
30942: LD_VAR 0 1
30946: PPUSH
30947: CALL_OW 266
30951: PUSH
30952: LD_INT 32
30954: PUSH
30955: LD_INT 33
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: IN
30962: NOT
30963: OR
30964: IFFALSE 30968
// exit ;
30966: GO 32104
// nat := GetNation ( tower ) ;
30968: LD_ADDR_VAR 0 12
30972: PUSH
30973: LD_VAR 0 1
30977: PPUSH
30978: CALL_OW 248
30982: ST_TO_ADDR
// side := GetSide ( tower ) ;
30983: LD_ADDR_VAR 0 16
30987: PUSH
30988: LD_VAR 0 1
30992: PPUSH
30993: CALL_OW 255
30997: ST_TO_ADDR
// x := GetX ( tower ) ;
30998: LD_ADDR_VAR 0 10
31002: PUSH
31003: LD_VAR 0 1
31007: PPUSH
31008: CALL_OW 250
31012: ST_TO_ADDR
// y := GetY ( tower ) ;
31013: LD_ADDR_VAR 0 11
31017: PUSH
31018: LD_VAR 0 1
31022: PPUSH
31023: CALL_OW 251
31027: ST_TO_ADDR
// if not x or not y then
31028: LD_VAR 0 10
31032: NOT
31033: PUSH
31034: LD_VAR 0 11
31038: NOT
31039: OR
31040: IFFALSE 31044
// exit ;
31042: GO 32104
// weapon := 0 ;
31044: LD_ADDR_VAR 0 18
31048: PUSH
31049: LD_INT 0
31051: ST_TO_ADDR
// fac_list := [ ] ;
31052: LD_ADDR_VAR 0 17
31056: PUSH
31057: EMPTY
31058: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
31059: LD_ADDR_VAR 0 6
31063: PUSH
31064: LD_VAR 0 1
31068: PPUSH
31069: CALL_OW 274
31073: PPUSH
31074: LD_VAR 0 2
31078: PPUSH
31079: CALL 28682 0 2
31083: PPUSH
31084: LD_INT 30
31086: PUSH
31087: LD_INT 3
31089: PUSH
31090: EMPTY
31091: LIST
31092: LIST
31093: PPUSH
31094: CALL_OW 72
31098: ST_TO_ADDR
// if not factories then
31099: LD_VAR 0 6
31103: NOT
31104: IFFALSE 31108
// exit ;
31106: GO 32104
// for i in factories do
31108: LD_ADDR_VAR 0 8
31112: PUSH
31113: LD_VAR 0 6
31117: PUSH
31118: FOR_IN
31119: IFFALSE 31144
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31121: LD_ADDR_VAR 0 17
31125: PUSH
31126: LD_VAR 0 17
31130: PUSH
31131: LD_VAR 0 8
31135: PPUSH
31136: CALL_OW 478
31140: UNION
31141: ST_TO_ADDR
31142: GO 31118
31144: POP
31145: POP
// if not fac_list then
31146: LD_VAR 0 17
31150: NOT
31151: IFFALSE 31155
// exit ;
31153: GO 32104
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31155: LD_ADDR_VAR 0 5
31159: PUSH
31160: LD_INT 4
31162: PUSH
31163: LD_INT 5
31165: PUSH
31166: LD_INT 9
31168: PUSH
31169: LD_INT 10
31171: PUSH
31172: LD_INT 6
31174: PUSH
31175: LD_INT 7
31177: PUSH
31178: LD_INT 11
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: LIST
31187: LIST
31188: LIST
31189: PUSH
31190: LD_INT 27
31192: PUSH
31193: LD_INT 28
31195: PUSH
31196: LD_INT 26
31198: PUSH
31199: LD_INT 30
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: LIST
31206: LIST
31207: PUSH
31208: LD_INT 43
31210: PUSH
31211: LD_INT 44
31213: PUSH
31214: LD_INT 46
31216: PUSH
31217: LD_INT 45
31219: PUSH
31220: LD_INT 47
31222: PUSH
31223: LD_INT 49
31225: PUSH
31226: EMPTY
31227: LIST
31228: LIST
31229: LIST
31230: LIST
31231: LIST
31232: LIST
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: LIST
31238: PUSH
31239: LD_VAR 0 12
31243: ARRAY
31244: ST_TO_ADDR
// for i in list do
31245: LD_ADDR_VAR 0 8
31249: PUSH
31250: LD_VAR 0 5
31254: PUSH
31255: FOR_IN
31256: IFFALSE 31289
// if not i in fac_list then
31258: LD_VAR 0 8
31262: PUSH
31263: LD_VAR 0 17
31267: IN
31268: NOT
31269: IFFALSE 31287
// list := list diff i ;
31271: LD_ADDR_VAR 0 5
31275: PUSH
31276: LD_VAR 0 5
31280: PUSH
31281: LD_VAR 0 8
31285: DIFF
31286: ST_TO_ADDR
31287: GO 31255
31289: POP
31290: POP
// if not list then
31291: LD_VAR 0 5
31295: NOT
31296: IFFALSE 31300
// exit ;
31298: GO 32104
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
31300: LD_VAR 0 12
31304: PUSH
31305: LD_INT 3
31307: EQUAL
31308: PUSH
31309: LD_INT 49
31311: PUSH
31312: LD_VAR 0 5
31316: IN
31317: AND
31318: PUSH
31319: LD_INT 31
31321: PPUSH
31322: LD_VAR 0 16
31326: PPUSH
31327: CALL_OW 321
31331: PUSH
31332: LD_INT 2
31334: EQUAL
31335: AND
31336: IFFALSE 31396
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
31338: LD_INT 22
31340: PUSH
31341: LD_VAR 0 16
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: PUSH
31350: LD_INT 35
31352: PUSH
31353: LD_INT 49
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: LD_INT 91
31362: PUSH
31363: LD_VAR 0 1
31367: PUSH
31368: LD_INT 10
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: LIST
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: LIST
31380: PPUSH
31381: CALL_OW 69
31385: NOT
31386: IFFALSE 31396
// weapon := ru_time_lapser ;
31388: LD_ADDR_VAR 0 18
31392: PUSH
31393: LD_INT 49
31395: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
31396: LD_VAR 0 12
31400: PUSH
31401: LD_INT 1
31403: PUSH
31404: LD_INT 2
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: IN
31411: PUSH
31412: LD_INT 11
31414: PUSH
31415: LD_VAR 0 5
31419: IN
31420: PUSH
31421: LD_INT 30
31423: PUSH
31424: LD_VAR 0 5
31428: IN
31429: OR
31430: AND
31431: PUSH
31432: LD_INT 6
31434: PPUSH
31435: LD_VAR 0 16
31439: PPUSH
31440: CALL_OW 321
31444: PUSH
31445: LD_INT 2
31447: EQUAL
31448: AND
31449: IFFALSE 31614
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
31451: LD_INT 22
31453: PUSH
31454: LD_VAR 0 16
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: PUSH
31463: LD_INT 2
31465: PUSH
31466: LD_INT 35
31468: PUSH
31469: LD_INT 11
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: PUSH
31476: LD_INT 35
31478: PUSH
31479: LD_INT 30
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: PUSH
31486: EMPTY
31487: LIST
31488: LIST
31489: LIST
31490: PUSH
31491: LD_INT 91
31493: PUSH
31494: LD_VAR 0 1
31498: PUSH
31499: LD_INT 18
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: LIST
31506: PUSH
31507: EMPTY
31508: LIST
31509: LIST
31510: LIST
31511: PPUSH
31512: CALL_OW 69
31516: NOT
31517: PUSH
31518: LD_INT 22
31520: PUSH
31521: LD_VAR 0 16
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: PUSH
31530: LD_INT 2
31532: PUSH
31533: LD_INT 30
31535: PUSH
31536: LD_INT 32
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: PUSH
31543: LD_INT 30
31545: PUSH
31546: LD_INT 33
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: LIST
31557: PUSH
31558: LD_INT 91
31560: PUSH
31561: LD_VAR 0 1
31565: PUSH
31566: LD_INT 12
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: LIST
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: LIST
31578: PUSH
31579: EMPTY
31580: LIST
31581: PPUSH
31582: CALL_OW 69
31586: PUSH
31587: LD_INT 2
31589: GREATER
31590: AND
31591: IFFALSE 31614
// weapon := [ us_radar , ar_radar ] [ nat ] ;
31593: LD_ADDR_VAR 0 18
31597: PUSH
31598: LD_INT 11
31600: PUSH
31601: LD_INT 30
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: PUSH
31608: LD_VAR 0 12
31612: ARRAY
31613: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
31614: LD_VAR 0 18
31618: NOT
31619: PUSH
31620: LD_INT 40
31622: PPUSH
31623: LD_VAR 0 16
31627: PPUSH
31628: CALL_OW 321
31632: PUSH
31633: LD_INT 2
31635: EQUAL
31636: AND
31637: PUSH
31638: LD_INT 7
31640: PUSH
31641: LD_VAR 0 5
31645: IN
31646: PUSH
31647: LD_INT 28
31649: PUSH
31650: LD_VAR 0 5
31654: IN
31655: OR
31656: PUSH
31657: LD_INT 45
31659: PUSH
31660: LD_VAR 0 5
31664: IN
31665: OR
31666: AND
31667: IFFALSE 31921
// begin hex := GetHexInfo ( x , y ) ;
31669: LD_ADDR_VAR 0 4
31673: PUSH
31674: LD_VAR 0 10
31678: PPUSH
31679: LD_VAR 0 11
31683: PPUSH
31684: CALL_OW 546
31688: ST_TO_ADDR
// if hex [ 1 ] then
31689: LD_VAR 0 4
31693: PUSH
31694: LD_INT 1
31696: ARRAY
31697: IFFALSE 31701
// exit ;
31699: GO 32104
// height := hex [ 2 ] ;
31701: LD_ADDR_VAR 0 15
31705: PUSH
31706: LD_VAR 0 4
31710: PUSH
31711: LD_INT 2
31713: ARRAY
31714: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
31715: LD_ADDR_VAR 0 14
31719: PUSH
31720: LD_INT 0
31722: PUSH
31723: LD_INT 2
31725: PUSH
31726: LD_INT 3
31728: PUSH
31729: LD_INT 5
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: LIST
31736: LIST
31737: ST_TO_ADDR
// for i in tmp do
31738: LD_ADDR_VAR 0 8
31742: PUSH
31743: LD_VAR 0 14
31747: PUSH
31748: FOR_IN
31749: IFFALSE 31919
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
31751: LD_ADDR_VAR 0 9
31755: PUSH
31756: LD_VAR 0 10
31760: PPUSH
31761: LD_VAR 0 8
31765: PPUSH
31766: LD_INT 5
31768: PPUSH
31769: CALL_OW 272
31773: PUSH
31774: LD_VAR 0 11
31778: PPUSH
31779: LD_VAR 0 8
31783: PPUSH
31784: LD_INT 5
31786: PPUSH
31787: CALL_OW 273
31791: PUSH
31792: EMPTY
31793: LIST
31794: LIST
31795: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
31796: LD_VAR 0 9
31800: PUSH
31801: LD_INT 1
31803: ARRAY
31804: PPUSH
31805: LD_VAR 0 9
31809: PUSH
31810: LD_INT 2
31812: ARRAY
31813: PPUSH
31814: CALL_OW 488
31818: IFFALSE 31917
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
31820: LD_ADDR_VAR 0 4
31824: PUSH
31825: LD_VAR 0 9
31829: PUSH
31830: LD_INT 1
31832: ARRAY
31833: PPUSH
31834: LD_VAR 0 9
31838: PUSH
31839: LD_INT 2
31841: ARRAY
31842: PPUSH
31843: CALL_OW 546
31847: ST_TO_ADDR
// if hex [ 1 ] then
31848: LD_VAR 0 4
31852: PUSH
31853: LD_INT 1
31855: ARRAY
31856: IFFALSE 31860
// continue ;
31858: GO 31748
// h := hex [ 2 ] ;
31860: LD_ADDR_VAR 0 13
31864: PUSH
31865: LD_VAR 0 4
31869: PUSH
31870: LD_INT 2
31872: ARRAY
31873: ST_TO_ADDR
// if h + 7 < height then
31874: LD_VAR 0 13
31878: PUSH
31879: LD_INT 7
31881: PLUS
31882: PUSH
31883: LD_VAR 0 15
31887: LESS
31888: IFFALSE 31917
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
31890: LD_ADDR_VAR 0 18
31894: PUSH
31895: LD_INT 7
31897: PUSH
31898: LD_INT 28
31900: PUSH
31901: LD_INT 45
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: LIST
31908: PUSH
31909: LD_VAR 0 12
31913: ARRAY
31914: ST_TO_ADDR
// break ;
31915: GO 31919
// end ; end ; end ;
31917: GO 31748
31919: POP
31920: POP
// end ; if not weapon then
31921: LD_VAR 0 18
31925: NOT
31926: IFFALSE 31986
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
31928: LD_ADDR_VAR 0 5
31932: PUSH
31933: LD_VAR 0 5
31937: PUSH
31938: LD_INT 11
31940: PUSH
31941: LD_INT 30
31943: PUSH
31944: LD_INT 49
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: LIST
31951: DIFF
31952: ST_TO_ADDR
// if not list then
31953: LD_VAR 0 5
31957: NOT
31958: IFFALSE 31962
// exit ;
31960: GO 32104
// weapon := list [ rand ( 1 , list ) ] ;
31962: LD_ADDR_VAR 0 18
31966: PUSH
31967: LD_VAR 0 5
31971: PUSH
31972: LD_INT 1
31974: PPUSH
31975: LD_VAR 0 5
31979: PPUSH
31980: CALL_OW 12
31984: ARRAY
31985: ST_TO_ADDR
// end ; if weapon then
31986: LD_VAR 0 18
31990: IFFALSE 32104
// begin tmp := CostOfWeapon ( weapon ) ;
31992: LD_ADDR_VAR 0 14
31996: PUSH
31997: LD_VAR 0 18
32001: PPUSH
32002: CALL_OW 451
32006: ST_TO_ADDR
// j := GetBase ( tower ) ;
32007: LD_ADDR_VAR 0 9
32011: PUSH
32012: LD_VAR 0 1
32016: PPUSH
32017: CALL_OW 274
32021: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32022: LD_VAR 0 9
32026: PPUSH
32027: LD_INT 1
32029: PPUSH
32030: CALL_OW 275
32034: PUSH
32035: LD_VAR 0 14
32039: PUSH
32040: LD_INT 1
32042: ARRAY
32043: GREATEREQUAL
32044: PUSH
32045: LD_VAR 0 9
32049: PPUSH
32050: LD_INT 2
32052: PPUSH
32053: CALL_OW 275
32057: PUSH
32058: LD_VAR 0 14
32062: PUSH
32063: LD_INT 2
32065: ARRAY
32066: GREATEREQUAL
32067: AND
32068: PUSH
32069: LD_VAR 0 9
32073: PPUSH
32074: LD_INT 3
32076: PPUSH
32077: CALL_OW 275
32081: PUSH
32082: LD_VAR 0 14
32086: PUSH
32087: LD_INT 3
32089: ARRAY
32090: GREATEREQUAL
32091: AND
32092: IFFALSE 32104
// result := weapon ;
32094: LD_ADDR_VAR 0 3
32098: PUSH
32099: LD_VAR 0 18
32103: ST_TO_ADDR
// end ; end ;
32104: LD_VAR 0 3
32108: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32109: LD_INT 0
32111: PPUSH
32112: PPUSH
// result := true ;
32113: LD_ADDR_VAR 0 3
32117: PUSH
32118: LD_INT 1
32120: ST_TO_ADDR
// if array1 = array2 then
32121: LD_VAR 0 1
32125: PUSH
32126: LD_VAR 0 2
32130: EQUAL
32131: IFFALSE 32191
// begin for i = 1 to array1 do
32133: LD_ADDR_VAR 0 4
32137: PUSH
32138: DOUBLE
32139: LD_INT 1
32141: DEC
32142: ST_TO_ADDR
32143: LD_VAR 0 1
32147: PUSH
32148: FOR_TO
32149: IFFALSE 32187
// if array1 [ i ] <> array2 [ i ] then
32151: LD_VAR 0 1
32155: PUSH
32156: LD_VAR 0 4
32160: ARRAY
32161: PUSH
32162: LD_VAR 0 2
32166: PUSH
32167: LD_VAR 0 4
32171: ARRAY
32172: NONEQUAL
32173: IFFALSE 32185
// begin result := false ;
32175: LD_ADDR_VAR 0 3
32179: PUSH
32180: LD_INT 0
32182: ST_TO_ADDR
// break ;
32183: GO 32187
// end ;
32185: GO 32148
32187: POP
32188: POP
// end else
32189: GO 32199
// result := false ;
32191: LD_ADDR_VAR 0 3
32195: PUSH
32196: LD_INT 0
32198: ST_TO_ADDR
// end ;
32199: LD_VAR 0 3
32203: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32204: LD_INT 0
32206: PPUSH
32207: PPUSH
32208: PPUSH
// pom := GetBase ( fac ) ;
32209: LD_ADDR_VAR 0 5
32213: PUSH
32214: LD_VAR 0 1
32218: PPUSH
32219: CALL_OW 274
32223: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32224: LD_ADDR_VAR 0 4
32228: PUSH
32229: LD_VAR 0 2
32233: PUSH
32234: LD_INT 1
32236: ARRAY
32237: PPUSH
32238: LD_VAR 0 2
32242: PUSH
32243: LD_INT 2
32245: ARRAY
32246: PPUSH
32247: LD_VAR 0 2
32251: PUSH
32252: LD_INT 3
32254: ARRAY
32255: PPUSH
32256: LD_VAR 0 2
32260: PUSH
32261: LD_INT 4
32263: ARRAY
32264: PPUSH
32265: CALL_OW 449
32269: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32270: LD_ADDR_VAR 0 3
32274: PUSH
32275: LD_VAR 0 5
32279: PPUSH
32280: LD_INT 1
32282: PPUSH
32283: CALL_OW 275
32287: PUSH
32288: LD_VAR 0 4
32292: PUSH
32293: LD_INT 1
32295: ARRAY
32296: GREATEREQUAL
32297: PUSH
32298: LD_VAR 0 5
32302: PPUSH
32303: LD_INT 2
32305: PPUSH
32306: CALL_OW 275
32310: PUSH
32311: LD_VAR 0 4
32315: PUSH
32316: LD_INT 2
32318: ARRAY
32319: GREATEREQUAL
32320: AND
32321: PUSH
32322: LD_VAR 0 5
32326: PPUSH
32327: LD_INT 3
32329: PPUSH
32330: CALL_OW 275
32334: PUSH
32335: LD_VAR 0 4
32339: PUSH
32340: LD_INT 3
32342: ARRAY
32343: GREATEREQUAL
32344: AND
32345: ST_TO_ADDR
// end ;
32346: LD_VAR 0 3
32350: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
32351: LD_INT 0
32353: PPUSH
32354: PPUSH
32355: PPUSH
32356: PPUSH
// pom := GetBase ( building ) ;
32357: LD_ADDR_VAR 0 3
32361: PUSH
32362: LD_VAR 0 1
32366: PPUSH
32367: CALL_OW 274
32371: ST_TO_ADDR
// if not pom then
32372: LD_VAR 0 3
32376: NOT
32377: IFFALSE 32381
// exit ;
32379: GO 32551
// btype := GetBType ( building ) ;
32381: LD_ADDR_VAR 0 5
32385: PUSH
32386: LD_VAR 0 1
32390: PPUSH
32391: CALL_OW 266
32395: ST_TO_ADDR
// if btype = b_armoury then
32396: LD_VAR 0 5
32400: PUSH
32401: LD_INT 4
32403: EQUAL
32404: IFFALSE 32414
// btype := b_barracks ;
32406: LD_ADDR_VAR 0 5
32410: PUSH
32411: LD_INT 5
32413: ST_TO_ADDR
// if btype = b_depot then
32414: LD_VAR 0 5
32418: PUSH
32419: LD_INT 0
32421: EQUAL
32422: IFFALSE 32432
// btype := b_warehouse ;
32424: LD_ADDR_VAR 0 5
32428: PUSH
32429: LD_INT 1
32431: ST_TO_ADDR
// if btype = b_workshop then
32432: LD_VAR 0 5
32436: PUSH
32437: LD_INT 2
32439: EQUAL
32440: IFFALSE 32450
// btype := b_factory ;
32442: LD_ADDR_VAR 0 5
32446: PUSH
32447: LD_INT 3
32449: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32450: LD_ADDR_VAR 0 4
32454: PUSH
32455: LD_VAR 0 5
32459: PPUSH
32460: LD_VAR 0 1
32464: PPUSH
32465: CALL_OW 248
32469: PPUSH
32470: CALL_OW 450
32474: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32475: LD_ADDR_VAR 0 2
32479: PUSH
32480: LD_VAR 0 3
32484: PPUSH
32485: LD_INT 1
32487: PPUSH
32488: CALL_OW 275
32492: PUSH
32493: LD_VAR 0 4
32497: PUSH
32498: LD_INT 1
32500: ARRAY
32501: GREATEREQUAL
32502: PUSH
32503: LD_VAR 0 3
32507: PPUSH
32508: LD_INT 2
32510: PPUSH
32511: CALL_OW 275
32515: PUSH
32516: LD_VAR 0 4
32520: PUSH
32521: LD_INT 2
32523: ARRAY
32524: GREATEREQUAL
32525: AND
32526: PUSH
32527: LD_VAR 0 3
32531: PPUSH
32532: LD_INT 3
32534: PPUSH
32535: CALL_OW 275
32539: PUSH
32540: LD_VAR 0 4
32544: PUSH
32545: LD_INT 3
32547: ARRAY
32548: GREATEREQUAL
32549: AND
32550: ST_TO_ADDR
// end ;
32551: LD_VAR 0 2
32555: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
32556: LD_INT 0
32558: PPUSH
32559: PPUSH
32560: PPUSH
// pom := GetBase ( building ) ;
32561: LD_ADDR_VAR 0 4
32565: PUSH
32566: LD_VAR 0 1
32570: PPUSH
32571: CALL_OW 274
32575: ST_TO_ADDR
// if not pom then
32576: LD_VAR 0 4
32580: NOT
32581: IFFALSE 32585
// exit ;
32583: GO 32686
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32585: LD_ADDR_VAR 0 5
32589: PUSH
32590: LD_VAR 0 2
32594: PPUSH
32595: LD_VAR 0 1
32599: PPUSH
32600: CALL_OW 248
32604: PPUSH
32605: CALL_OW 450
32609: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32610: LD_ADDR_VAR 0 3
32614: PUSH
32615: LD_VAR 0 4
32619: PPUSH
32620: LD_INT 1
32622: PPUSH
32623: CALL_OW 275
32627: PUSH
32628: LD_VAR 0 5
32632: PUSH
32633: LD_INT 1
32635: ARRAY
32636: GREATEREQUAL
32637: PUSH
32638: LD_VAR 0 4
32642: PPUSH
32643: LD_INT 2
32645: PPUSH
32646: CALL_OW 275
32650: PUSH
32651: LD_VAR 0 5
32655: PUSH
32656: LD_INT 2
32658: ARRAY
32659: GREATEREQUAL
32660: AND
32661: PUSH
32662: LD_VAR 0 4
32666: PPUSH
32667: LD_INT 3
32669: PPUSH
32670: CALL_OW 275
32674: PUSH
32675: LD_VAR 0 5
32679: PUSH
32680: LD_INT 3
32682: ARRAY
32683: GREATEREQUAL
32684: AND
32685: ST_TO_ADDR
// end ;
32686: LD_VAR 0 3
32690: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
32691: LD_INT 0
32693: PPUSH
32694: PPUSH
32695: PPUSH
32696: PPUSH
32697: PPUSH
32698: PPUSH
32699: PPUSH
32700: PPUSH
32701: PPUSH
32702: PPUSH
// result := false ;
32703: LD_ADDR_VAR 0 6
32707: PUSH
32708: LD_INT 0
32710: ST_TO_ADDR
// if not base or not btype or not x or not y then
32711: LD_VAR 0 1
32715: NOT
32716: PUSH
32717: LD_VAR 0 2
32721: NOT
32722: OR
32723: PUSH
32724: LD_VAR 0 3
32728: NOT
32729: OR
32730: PUSH
32731: LD_VAR 0 4
32735: NOT
32736: OR
32737: IFFALSE 32741
// exit ;
32739: GO 33350
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
32741: LD_ADDR_VAR 0 12
32745: PUSH
32746: LD_VAR 0 2
32750: PPUSH
32751: LD_VAR 0 3
32755: PPUSH
32756: LD_VAR 0 4
32760: PPUSH
32761: LD_VAR 0 5
32765: PPUSH
32766: LD_VAR 0 1
32770: PUSH
32771: LD_INT 1
32773: ARRAY
32774: PPUSH
32775: CALL_OW 248
32779: PPUSH
32780: LD_INT 0
32782: PPUSH
32783: CALL 34187 0 6
32787: ST_TO_ADDR
// if not hexes then
32788: LD_VAR 0 12
32792: NOT
32793: IFFALSE 32797
// exit ;
32795: GO 33350
// for i = 1 to hexes do
32797: LD_ADDR_VAR 0 7
32801: PUSH
32802: DOUBLE
32803: LD_INT 1
32805: DEC
32806: ST_TO_ADDR
32807: LD_VAR 0 12
32811: PUSH
32812: FOR_TO
32813: IFFALSE 33348
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32815: LD_ADDR_VAR 0 11
32819: PUSH
32820: LD_VAR 0 12
32824: PUSH
32825: LD_VAR 0 7
32829: ARRAY
32830: PUSH
32831: LD_INT 1
32833: ARRAY
32834: PPUSH
32835: LD_VAR 0 12
32839: PUSH
32840: LD_VAR 0 7
32844: ARRAY
32845: PUSH
32846: LD_INT 2
32848: ARRAY
32849: PPUSH
32850: CALL_OW 428
32854: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
32855: LD_VAR 0 12
32859: PUSH
32860: LD_VAR 0 7
32864: ARRAY
32865: PUSH
32866: LD_INT 1
32868: ARRAY
32869: PPUSH
32870: LD_VAR 0 12
32874: PUSH
32875: LD_VAR 0 7
32879: ARRAY
32880: PUSH
32881: LD_INT 2
32883: ARRAY
32884: PPUSH
32885: CALL_OW 351
32889: PUSH
32890: LD_VAR 0 12
32894: PUSH
32895: LD_VAR 0 7
32899: ARRAY
32900: PUSH
32901: LD_INT 1
32903: ARRAY
32904: PPUSH
32905: LD_VAR 0 12
32909: PUSH
32910: LD_VAR 0 7
32914: ARRAY
32915: PUSH
32916: LD_INT 2
32918: ARRAY
32919: PPUSH
32920: CALL_OW 488
32924: NOT
32925: OR
32926: PUSH
32927: LD_VAR 0 11
32931: PPUSH
32932: CALL_OW 247
32936: PUSH
32937: LD_INT 3
32939: EQUAL
32940: OR
32941: IFFALSE 32947
// exit ;
32943: POP
32944: POP
32945: GO 33350
// if not tmp or not tmp in base then
32947: LD_VAR 0 11
32951: NOT
32952: PUSH
32953: LD_VAR 0 11
32957: PUSH
32958: LD_VAR 0 1
32962: IN
32963: NOT
32964: OR
32965: IFFALSE 32969
// continue ;
32967: GO 32812
// result := true ;
32969: LD_ADDR_VAR 0 6
32973: PUSH
32974: LD_INT 1
32976: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32977: LD_ADDR_VAR 0 15
32981: PUSH
32982: LD_VAR 0 1
32986: PPUSH
32987: LD_INT 22
32989: PUSH
32990: LD_VAR 0 11
32994: PPUSH
32995: CALL_OW 255
32999: PUSH
33000: EMPTY
33001: LIST
33002: LIST
33003: PUSH
33004: LD_INT 2
33006: PUSH
33007: LD_INT 30
33009: PUSH
33010: LD_INT 0
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: PUSH
33017: LD_INT 30
33019: PUSH
33020: LD_INT 1
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: LIST
33031: PUSH
33032: EMPTY
33033: LIST
33034: LIST
33035: PPUSH
33036: CALL_OW 72
33040: ST_TO_ADDR
// if dep then
33041: LD_VAR 0 15
33045: IFFALSE 33181
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33047: LD_ADDR_VAR 0 14
33051: PUSH
33052: LD_VAR 0 15
33056: PUSH
33057: LD_INT 1
33059: ARRAY
33060: PPUSH
33061: CALL_OW 250
33065: PPUSH
33066: LD_VAR 0 15
33070: PUSH
33071: LD_INT 1
33073: ARRAY
33074: PPUSH
33075: CALL_OW 254
33079: PPUSH
33080: LD_INT 5
33082: PPUSH
33083: CALL_OW 272
33087: PUSH
33088: LD_VAR 0 15
33092: PUSH
33093: LD_INT 1
33095: ARRAY
33096: PPUSH
33097: CALL_OW 251
33101: PPUSH
33102: LD_VAR 0 15
33106: PUSH
33107: LD_INT 1
33109: ARRAY
33110: PPUSH
33111: CALL_OW 254
33115: PPUSH
33116: LD_INT 5
33118: PPUSH
33119: CALL_OW 273
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33128: LD_VAR 0 14
33132: PUSH
33133: LD_INT 1
33135: ARRAY
33136: PPUSH
33137: LD_VAR 0 14
33141: PUSH
33142: LD_INT 2
33144: ARRAY
33145: PPUSH
33146: CALL_OW 488
33150: IFFALSE 33181
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33152: LD_VAR 0 11
33156: PPUSH
33157: LD_VAR 0 14
33161: PUSH
33162: LD_INT 1
33164: ARRAY
33165: PPUSH
33166: LD_VAR 0 14
33170: PUSH
33171: LD_INT 2
33173: ARRAY
33174: PPUSH
33175: CALL_OW 111
// continue ;
33179: GO 32812
// end ; end ; r := GetDir ( tmp ) ;
33181: LD_ADDR_VAR 0 13
33185: PUSH
33186: LD_VAR 0 11
33190: PPUSH
33191: CALL_OW 254
33195: ST_TO_ADDR
// if r = 5 then
33196: LD_VAR 0 13
33200: PUSH
33201: LD_INT 5
33203: EQUAL
33204: IFFALSE 33214
// r := 0 ;
33206: LD_ADDR_VAR 0 13
33210: PUSH
33211: LD_INT 0
33213: ST_TO_ADDR
// for j = r to 5 do
33214: LD_ADDR_VAR 0 8
33218: PUSH
33219: DOUBLE
33220: LD_VAR 0 13
33224: DEC
33225: ST_TO_ADDR
33226: LD_INT 5
33228: PUSH
33229: FOR_TO
33230: IFFALSE 33344
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
33232: LD_ADDR_VAR 0 9
33236: PUSH
33237: LD_VAR 0 11
33241: PPUSH
33242: CALL_OW 250
33246: PPUSH
33247: LD_VAR 0 8
33251: PPUSH
33252: LD_INT 2
33254: PPUSH
33255: CALL_OW 272
33259: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
33260: LD_ADDR_VAR 0 10
33264: PUSH
33265: LD_VAR 0 11
33269: PPUSH
33270: CALL_OW 251
33274: PPUSH
33275: LD_VAR 0 8
33279: PPUSH
33280: LD_INT 2
33282: PPUSH
33283: CALL_OW 273
33287: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
33288: LD_VAR 0 9
33292: PPUSH
33293: LD_VAR 0 10
33297: PPUSH
33298: CALL_OW 488
33302: PUSH
33303: LD_VAR 0 9
33307: PPUSH
33308: LD_VAR 0 10
33312: PPUSH
33313: CALL_OW 428
33317: NOT
33318: AND
33319: IFFALSE 33342
// begin ComMoveXY ( tmp , _x , _y ) ;
33321: LD_VAR 0 11
33325: PPUSH
33326: LD_VAR 0 9
33330: PPUSH
33331: LD_VAR 0 10
33335: PPUSH
33336: CALL_OW 111
// break ;
33340: GO 33344
// end ; end ;
33342: GO 33229
33344: POP
33345: POP
// end ;
33346: GO 32812
33348: POP
33349: POP
// end ;
33350: LD_VAR 0 6
33354: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
33355: LD_INT 0
33357: PPUSH
33358: PPUSH
33359: PPUSH
33360: PPUSH
33361: PPUSH
33362: PPUSH
33363: PPUSH
33364: PPUSH
33365: PPUSH
33366: PPUSH
// result := false ;
33367: LD_ADDR_VAR 0 6
33371: PUSH
33372: LD_INT 0
33374: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
33375: LD_VAR 0 1
33379: NOT
33380: PUSH
33381: LD_VAR 0 1
33385: PPUSH
33386: CALL_OW 266
33390: PUSH
33391: LD_INT 0
33393: PUSH
33394: LD_INT 1
33396: PUSH
33397: EMPTY
33398: LIST
33399: LIST
33400: IN
33401: NOT
33402: OR
33403: PUSH
33404: LD_VAR 0 2
33408: NOT
33409: OR
33410: PUSH
33411: LD_VAR 0 5
33415: PUSH
33416: LD_INT 0
33418: PUSH
33419: LD_INT 1
33421: PUSH
33422: LD_INT 2
33424: PUSH
33425: LD_INT 3
33427: PUSH
33428: LD_INT 4
33430: PUSH
33431: LD_INT 5
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: LIST
33438: LIST
33439: LIST
33440: LIST
33441: IN
33442: NOT
33443: OR
33444: PUSH
33445: LD_VAR 0 3
33449: PPUSH
33450: LD_VAR 0 4
33454: PPUSH
33455: CALL_OW 488
33459: NOT
33460: OR
33461: IFFALSE 33465
// exit ;
33463: GO 34182
// pom := GetBase ( depot ) ;
33465: LD_ADDR_VAR 0 10
33469: PUSH
33470: LD_VAR 0 1
33474: PPUSH
33475: CALL_OW 274
33479: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
33480: LD_ADDR_VAR 0 11
33484: PUSH
33485: LD_VAR 0 2
33489: PPUSH
33490: LD_VAR 0 1
33494: PPUSH
33495: CALL_OW 248
33499: PPUSH
33500: CALL_OW 450
33504: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
33505: LD_VAR 0 10
33509: PPUSH
33510: LD_INT 1
33512: PPUSH
33513: CALL_OW 275
33517: PUSH
33518: LD_VAR 0 11
33522: PUSH
33523: LD_INT 1
33525: ARRAY
33526: GREATEREQUAL
33527: PUSH
33528: LD_VAR 0 10
33532: PPUSH
33533: LD_INT 2
33535: PPUSH
33536: CALL_OW 275
33540: PUSH
33541: LD_VAR 0 11
33545: PUSH
33546: LD_INT 2
33548: ARRAY
33549: GREATEREQUAL
33550: AND
33551: PUSH
33552: LD_VAR 0 10
33556: PPUSH
33557: LD_INT 3
33559: PPUSH
33560: CALL_OW 275
33564: PUSH
33565: LD_VAR 0 11
33569: PUSH
33570: LD_INT 3
33572: ARRAY
33573: GREATEREQUAL
33574: AND
33575: NOT
33576: IFFALSE 33580
// exit ;
33578: GO 34182
// if GetBType ( depot ) = b_depot then
33580: LD_VAR 0 1
33584: PPUSH
33585: CALL_OW 266
33589: PUSH
33590: LD_INT 0
33592: EQUAL
33593: IFFALSE 33605
// dist := 28 else
33595: LD_ADDR_VAR 0 14
33599: PUSH
33600: LD_INT 28
33602: ST_TO_ADDR
33603: GO 33613
// dist := 36 ;
33605: LD_ADDR_VAR 0 14
33609: PUSH
33610: LD_INT 36
33612: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
33613: LD_VAR 0 1
33617: PPUSH
33618: LD_VAR 0 3
33622: PPUSH
33623: LD_VAR 0 4
33627: PPUSH
33628: CALL_OW 297
33632: PUSH
33633: LD_VAR 0 14
33637: GREATER
33638: IFFALSE 33642
// exit ;
33640: GO 34182
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
33642: LD_ADDR_VAR 0 12
33646: PUSH
33647: LD_VAR 0 2
33651: PPUSH
33652: LD_VAR 0 3
33656: PPUSH
33657: LD_VAR 0 4
33661: PPUSH
33662: LD_VAR 0 5
33666: PPUSH
33667: LD_VAR 0 1
33671: PPUSH
33672: CALL_OW 248
33676: PPUSH
33677: LD_INT 0
33679: PPUSH
33680: CALL 34187 0 6
33684: ST_TO_ADDR
// if not hexes then
33685: LD_VAR 0 12
33689: NOT
33690: IFFALSE 33694
// exit ;
33692: GO 34182
// hex := GetHexInfo ( x , y ) ;
33694: LD_ADDR_VAR 0 15
33698: PUSH
33699: LD_VAR 0 3
33703: PPUSH
33704: LD_VAR 0 4
33708: PPUSH
33709: CALL_OW 546
33713: ST_TO_ADDR
// if hex [ 1 ] then
33714: LD_VAR 0 15
33718: PUSH
33719: LD_INT 1
33721: ARRAY
33722: IFFALSE 33726
// exit ;
33724: GO 34182
// height := hex [ 2 ] ;
33726: LD_ADDR_VAR 0 13
33730: PUSH
33731: LD_VAR 0 15
33735: PUSH
33736: LD_INT 2
33738: ARRAY
33739: ST_TO_ADDR
// for i = 1 to hexes do
33740: LD_ADDR_VAR 0 7
33744: PUSH
33745: DOUBLE
33746: LD_INT 1
33748: DEC
33749: ST_TO_ADDR
33750: LD_VAR 0 12
33754: PUSH
33755: FOR_TO
33756: IFFALSE 34086
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
33758: LD_VAR 0 12
33762: PUSH
33763: LD_VAR 0 7
33767: ARRAY
33768: PUSH
33769: LD_INT 1
33771: ARRAY
33772: PPUSH
33773: LD_VAR 0 12
33777: PUSH
33778: LD_VAR 0 7
33782: ARRAY
33783: PUSH
33784: LD_INT 2
33786: ARRAY
33787: PPUSH
33788: CALL_OW 488
33792: NOT
33793: PUSH
33794: LD_VAR 0 12
33798: PUSH
33799: LD_VAR 0 7
33803: ARRAY
33804: PUSH
33805: LD_INT 1
33807: ARRAY
33808: PPUSH
33809: LD_VAR 0 12
33813: PUSH
33814: LD_VAR 0 7
33818: ARRAY
33819: PUSH
33820: LD_INT 2
33822: ARRAY
33823: PPUSH
33824: CALL_OW 428
33828: PUSH
33829: LD_INT 0
33831: GREATER
33832: OR
33833: PUSH
33834: LD_VAR 0 12
33838: PUSH
33839: LD_VAR 0 7
33843: ARRAY
33844: PUSH
33845: LD_INT 1
33847: ARRAY
33848: PPUSH
33849: LD_VAR 0 12
33853: PUSH
33854: LD_VAR 0 7
33858: ARRAY
33859: PUSH
33860: LD_INT 2
33862: ARRAY
33863: PPUSH
33864: CALL_OW 351
33868: OR
33869: IFFALSE 33875
// exit ;
33871: POP
33872: POP
33873: GO 34182
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33875: LD_ADDR_VAR 0 8
33879: PUSH
33880: LD_VAR 0 12
33884: PUSH
33885: LD_VAR 0 7
33889: ARRAY
33890: PUSH
33891: LD_INT 1
33893: ARRAY
33894: PPUSH
33895: LD_VAR 0 12
33899: PUSH
33900: LD_VAR 0 7
33904: ARRAY
33905: PUSH
33906: LD_INT 2
33908: ARRAY
33909: PPUSH
33910: CALL_OW 546
33914: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
33915: LD_VAR 0 8
33919: PUSH
33920: LD_INT 1
33922: ARRAY
33923: PUSH
33924: LD_VAR 0 8
33928: PUSH
33929: LD_INT 2
33931: ARRAY
33932: PUSH
33933: LD_VAR 0 13
33937: PUSH
33938: LD_INT 2
33940: PLUS
33941: GREATER
33942: OR
33943: PUSH
33944: LD_VAR 0 8
33948: PUSH
33949: LD_INT 2
33951: ARRAY
33952: PUSH
33953: LD_VAR 0 13
33957: PUSH
33958: LD_INT 2
33960: MINUS
33961: LESS
33962: OR
33963: PUSH
33964: LD_VAR 0 8
33968: PUSH
33969: LD_INT 3
33971: ARRAY
33972: PUSH
33973: LD_INT 0
33975: PUSH
33976: LD_INT 8
33978: PUSH
33979: LD_INT 9
33981: PUSH
33982: LD_INT 10
33984: PUSH
33985: LD_INT 11
33987: PUSH
33988: LD_INT 12
33990: PUSH
33991: LD_INT 13
33993: PUSH
33994: LD_INT 16
33996: PUSH
33997: LD_INT 17
33999: PUSH
34000: LD_INT 18
34002: PUSH
34003: LD_INT 19
34005: PUSH
34006: LD_INT 20
34008: PUSH
34009: LD_INT 21
34011: PUSH
34012: EMPTY
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: LIST
34026: IN
34027: NOT
34028: OR
34029: PUSH
34030: LD_VAR 0 8
34034: PUSH
34035: LD_INT 5
34037: ARRAY
34038: NOT
34039: OR
34040: PUSH
34041: LD_VAR 0 8
34045: PUSH
34046: LD_INT 6
34048: ARRAY
34049: PUSH
34050: LD_INT 1
34052: PUSH
34053: LD_INT 2
34055: PUSH
34056: LD_INT 7
34058: PUSH
34059: LD_INT 9
34061: PUSH
34062: LD_INT 10
34064: PUSH
34065: LD_INT 11
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: LIST
34072: LIST
34073: LIST
34074: LIST
34075: IN
34076: NOT
34077: OR
34078: IFFALSE 34084
// exit ;
34080: POP
34081: POP
34082: GO 34182
// end ;
34084: GO 33755
34086: POP
34087: POP
// side := GetSide ( depot ) ;
34088: LD_ADDR_VAR 0 9
34092: PUSH
34093: LD_VAR 0 1
34097: PPUSH
34098: CALL_OW 255
34102: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
34103: LD_VAR 0 9
34107: PPUSH
34108: LD_VAR 0 3
34112: PPUSH
34113: LD_VAR 0 4
34117: PPUSH
34118: LD_INT 20
34120: PPUSH
34121: CALL 26836 0 4
34125: PUSH
34126: LD_INT 4
34128: ARRAY
34129: IFFALSE 34133
// exit ;
34131: GO 34182
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
34133: LD_VAR 0 2
34137: PUSH
34138: LD_INT 29
34140: PUSH
34141: LD_INT 30
34143: PUSH
34144: EMPTY
34145: LIST
34146: LIST
34147: IN
34148: PUSH
34149: LD_VAR 0 3
34153: PPUSH
34154: LD_VAR 0 4
34158: PPUSH
34159: LD_VAR 0 9
34163: PPUSH
34164: CALL_OW 440
34168: NOT
34169: AND
34170: IFFALSE 34174
// exit ;
34172: GO 34182
// result := true ;
34174: LD_ADDR_VAR 0 6
34178: PUSH
34179: LD_INT 1
34181: ST_TO_ADDR
// end ;
34182: LD_VAR 0 6
34186: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
34187: LD_INT 0
34189: PPUSH
34190: PPUSH
34191: PPUSH
34192: PPUSH
34193: PPUSH
34194: PPUSH
34195: PPUSH
34196: PPUSH
34197: PPUSH
34198: PPUSH
34199: PPUSH
34200: PPUSH
34201: PPUSH
34202: PPUSH
34203: PPUSH
34204: PPUSH
34205: PPUSH
34206: PPUSH
34207: PPUSH
34208: PPUSH
34209: PPUSH
34210: PPUSH
34211: PPUSH
34212: PPUSH
34213: PPUSH
34214: PPUSH
34215: PPUSH
34216: PPUSH
34217: PPUSH
34218: PPUSH
34219: PPUSH
34220: PPUSH
34221: PPUSH
34222: PPUSH
34223: PPUSH
34224: PPUSH
34225: PPUSH
34226: PPUSH
34227: PPUSH
34228: PPUSH
34229: PPUSH
34230: PPUSH
34231: PPUSH
34232: PPUSH
34233: PPUSH
34234: PPUSH
34235: PPUSH
34236: PPUSH
34237: PPUSH
34238: PPUSH
34239: PPUSH
34240: PPUSH
34241: PPUSH
34242: PPUSH
34243: PPUSH
34244: PPUSH
34245: PPUSH
34246: PPUSH
// result = [ ] ;
34247: LD_ADDR_VAR 0 7
34251: PUSH
34252: EMPTY
34253: ST_TO_ADDR
// temp_list = [ ] ;
34254: LD_ADDR_VAR 0 9
34258: PUSH
34259: EMPTY
34260: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
34261: LD_VAR 0 4
34265: PUSH
34266: LD_INT 0
34268: PUSH
34269: LD_INT 1
34271: PUSH
34272: LD_INT 2
34274: PUSH
34275: LD_INT 3
34277: PUSH
34278: LD_INT 4
34280: PUSH
34281: LD_INT 5
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: LIST
34291: IN
34292: NOT
34293: PUSH
34294: LD_VAR 0 1
34298: PUSH
34299: LD_INT 0
34301: PUSH
34302: LD_INT 1
34304: PUSH
34305: EMPTY
34306: LIST
34307: LIST
34308: IN
34309: PUSH
34310: LD_VAR 0 5
34314: PUSH
34315: LD_INT 1
34317: PUSH
34318: LD_INT 2
34320: PUSH
34321: LD_INT 3
34323: PUSH
34324: EMPTY
34325: LIST
34326: LIST
34327: LIST
34328: IN
34329: NOT
34330: AND
34331: OR
34332: IFFALSE 34336
// exit ;
34334: GO 52727
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
34336: LD_VAR 0 1
34340: PUSH
34341: LD_INT 6
34343: PUSH
34344: LD_INT 7
34346: PUSH
34347: LD_INT 8
34349: PUSH
34350: LD_INT 13
34352: PUSH
34353: LD_INT 12
34355: PUSH
34356: LD_INT 15
34358: PUSH
34359: LD_INT 11
34361: PUSH
34362: LD_INT 14
34364: PUSH
34365: LD_INT 10
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: LIST
34372: LIST
34373: LIST
34374: LIST
34375: LIST
34376: LIST
34377: LIST
34378: IN
34379: IFFALSE 34389
// btype = b_lab ;
34381: LD_ADDR_VAR 0 1
34385: PUSH
34386: LD_INT 6
34388: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
34389: LD_VAR 0 6
34393: PUSH
34394: LD_INT 0
34396: PUSH
34397: LD_INT 1
34399: PUSH
34400: LD_INT 2
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: LIST
34407: IN
34408: NOT
34409: PUSH
34410: LD_VAR 0 1
34414: PUSH
34415: LD_INT 0
34417: PUSH
34418: LD_INT 1
34420: PUSH
34421: LD_INT 2
34423: PUSH
34424: LD_INT 3
34426: PUSH
34427: LD_INT 6
34429: PUSH
34430: LD_INT 36
34432: PUSH
34433: LD_INT 4
34435: PUSH
34436: LD_INT 5
34438: PUSH
34439: LD_INT 31
34441: PUSH
34442: LD_INT 32
34444: PUSH
34445: LD_INT 33
34447: PUSH
34448: EMPTY
34449: LIST
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: IN
34461: NOT
34462: PUSH
34463: LD_VAR 0 6
34467: PUSH
34468: LD_INT 1
34470: EQUAL
34471: AND
34472: OR
34473: PUSH
34474: LD_VAR 0 1
34478: PUSH
34479: LD_INT 2
34481: PUSH
34482: LD_INT 3
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: IN
34489: NOT
34490: PUSH
34491: LD_VAR 0 6
34495: PUSH
34496: LD_INT 2
34498: EQUAL
34499: AND
34500: OR
34501: IFFALSE 34511
// mode = 0 ;
34503: LD_ADDR_VAR 0 6
34507: PUSH
34508: LD_INT 0
34510: ST_TO_ADDR
// case mode of 0 :
34511: LD_VAR 0 6
34515: PUSH
34516: LD_INT 0
34518: DOUBLE
34519: EQUAL
34520: IFTRUE 34524
34522: GO 45977
34524: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34525: LD_ADDR_VAR 0 11
34529: PUSH
34530: LD_INT 0
34532: PUSH
34533: LD_INT 0
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: PUSH
34540: LD_INT 0
34542: PUSH
34543: LD_INT 1
34545: NEG
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: PUSH
34551: LD_INT 1
34553: PUSH
34554: LD_INT 0
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: PUSH
34561: LD_INT 1
34563: PUSH
34564: LD_INT 1
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: PUSH
34571: LD_INT 0
34573: PUSH
34574: LD_INT 1
34576: PUSH
34577: EMPTY
34578: LIST
34579: LIST
34580: PUSH
34581: LD_INT 1
34583: NEG
34584: PUSH
34585: LD_INT 0
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: PUSH
34592: LD_INT 1
34594: NEG
34595: PUSH
34596: LD_INT 1
34598: NEG
34599: PUSH
34600: EMPTY
34601: LIST
34602: LIST
34603: PUSH
34604: LD_INT 1
34606: NEG
34607: PUSH
34608: LD_INT 2
34610: NEG
34611: PUSH
34612: EMPTY
34613: LIST
34614: LIST
34615: PUSH
34616: LD_INT 0
34618: PUSH
34619: LD_INT 2
34621: NEG
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: PUSH
34627: LD_INT 1
34629: PUSH
34630: LD_INT 1
34632: NEG
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: PUSH
34638: LD_INT 1
34640: PUSH
34641: LD_INT 2
34643: PUSH
34644: EMPTY
34645: LIST
34646: LIST
34647: PUSH
34648: LD_INT 0
34650: PUSH
34651: LD_INT 2
34653: PUSH
34654: EMPTY
34655: LIST
34656: LIST
34657: PUSH
34658: LD_INT 1
34660: NEG
34661: PUSH
34662: LD_INT 1
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: PUSH
34669: LD_INT 1
34671: PUSH
34672: LD_INT 3
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: PUSH
34679: LD_INT 0
34681: PUSH
34682: LD_INT 3
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: PUSH
34689: LD_INT 1
34691: NEG
34692: PUSH
34693: LD_INT 2
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: LIST
34704: LIST
34705: LIST
34706: LIST
34707: LIST
34708: LIST
34709: LIST
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: LIST
34715: LIST
34716: LIST
34717: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34718: LD_ADDR_VAR 0 12
34722: PUSH
34723: LD_INT 0
34725: PUSH
34726: LD_INT 0
34728: PUSH
34729: EMPTY
34730: LIST
34731: LIST
34732: PUSH
34733: LD_INT 0
34735: PUSH
34736: LD_INT 1
34738: NEG
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: PUSH
34744: LD_INT 1
34746: PUSH
34747: LD_INT 0
34749: PUSH
34750: EMPTY
34751: LIST
34752: LIST
34753: PUSH
34754: LD_INT 1
34756: PUSH
34757: LD_INT 1
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: PUSH
34764: LD_INT 0
34766: PUSH
34767: LD_INT 1
34769: PUSH
34770: EMPTY
34771: LIST
34772: LIST
34773: PUSH
34774: LD_INT 1
34776: NEG
34777: PUSH
34778: LD_INT 0
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: LD_INT 1
34787: NEG
34788: PUSH
34789: LD_INT 1
34791: NEG
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: PUSH
34797: LD_INT 1
34799: PUSH
34800: LD_INT 1
34802: NEG
34803: PUSH
34804: EMPTY
34805: LIST
34806: LIST
34807: PUSH
34808: LD_INT 2
34810: PUSH
34811: LD_INT 0
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: PUSH
34818: LD_INT 2
34820: PUSH
34821: LD_INT 1
34823: PUSH
34824: EMPTY
34825: LIST
34826: LIST
34827: PUSH
34828: LD_INT 1
34830: NEG
34831: PUSH
34832: LD_INT 1
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: PUSH
34839: LD_INT 2
34841: NEG
34842: PUSH
34843: LD_INT 0
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: PUSH
34850: LD_INT 2
34852: NEG
34853: PUSH
34854: LD_INT 1
34856: NEG
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: PUSH
34862: LD_INT 2
34864: NEG
34865: PUSH
34866: LD_INT 1
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: PUSH
34873: LD_INT 3
34875: NEG
34876: PUSH
34877: LD_INT 0
34879: PUSH
34880: EMPTY
34881: LIST
34882: LIST
34883: PUSH
34884: LD_INT 3
34886: NEG
34887: PUSH
34888: LD_INT 1
34890: NEG
34891: PUSH
34892: EMPTY
34893: LIST
34894: LIST
34895: PUSH
34896: EMPTY
34897: LIST
34898: LIST
34899: LIST
34900: LIST
34901: LIST
34902: LIST
34903: LIST
34904: LIST
34905: LIST
34906: LIST
34907: LIST
34908: LIST
34909: LIST
34910: LIST
34911: LIST
34912: LIST
34913: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34914: LD_ADDR_VAR 0 13
34918: PUSH
34919: LD_INT 0
34921: PUSH
34922: LD_INT 0
34924: PUSH
34925: EMPTY
34926: LIST
34927: LIST
34928: PUSH
34929: LD_INT 0
34931: PUSH
34932: LD_INT 1
34934: NEG
34935: PUSH
34936: EMPTY
34937: LIST
34938: LIST
34939: PUSH
34940: LD_INT 1
34942: PUSH
34943: LD_INT 0
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: PUSH
34950: LD_INT 1
34952: PUSH
34953: LD_INT 1
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: PUSH
34960: LD_INT 0
34962: PUSH
34963: LD_INT 1
34965: PUSH
34966: EMPTY
34967: LIST
34968: LIST
34969: PUSH
34970: LD_INT 1
34972: NEG
34973: PUSH
34974: LD_INT 0
34976: PUSH
34977: EMPTY
34978: LIST
34979: LIST
34980: PUSH
34981: LD_INT 1
34983: NEG
34984: PUSH
34985: LD_INT 1
34987: NEG
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: PUSH
34993: LD_INT 1
34995: NEG
34996: PUSH
34997: LD_INT 2
34999: NEG
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: PUSH
35005: LD_INT 2
35007: PUSH
35008: LD_INT 1
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: PUSH
35015: LD_INT 2
35017: PUSH
35018: LD_INT 2
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PUSH
35025: LD_INT 1
35027: PUSH
35028: LD_INT 2
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: PUSH
35035: LD_INT 2
35037: NEG
35038: PUSH
35039: LD_INT 1
35041: NEG
35042: PUSH
35043: EMPTY
35044: LIST
35045: LIST
35046: PUSH
35047: LD_INT 2
35049: NEG
35050: PUSH
35051: LD_INT 2
35053: NEG
35054: PUSH
35055: EMPTY
35056: LIST
35057: LIST
35058: PUSH
35059: LD_INT 2
35061: NEG
35062: PUSH
35063: LD_INT 3
35065: NEG
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: LD_INT 3
35073: NEG
35074: PUSH
35075: LD_INT 2
35077: NEG
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: PUSH
35083: LD_INT 3
35085: NEG
35086: PUSH
35087: LD_INT 3
35089: NEG
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: PUSH
35095: EMPTY
35096: LIST
35097: LIST
35098: LIST
35099: LIST
35100: LIST
35101: LIST
35102: LIST
35103: LIST
35104: LIST
35105: LIST
35106: LIST
35107: LIST
35108: LIST
35109: LIST
35110: LIST
35111: LIST
35112: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35113: LD_ADDR_VAR 0 14
35117: PUSH
35118: LD_INT 0
35120: PUSH
35121: LD_INT 0
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: PUSH
35128: LD_INT 0
35130: PUSH
35131: LD_INT 1
35133: NEG
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: PUSH
35139: LD_INT 1
35141: PUSH
35142: LD_INT 0
35144: PUSH
35145: EMPTY
35146: LIST
35147: LIST
35148: PUSH
35149: LD_INT 1
35151: PUSH
35152: LD_INT 1
35154: PUSH
35155: EMPTY
35156: LIST
35157: LIST
35158: PUSH
35159: LD_INT 0
35161: PUSH
35162: LD_INT 1
35164: PUSH
35165: EMPTY
35166: LIST
35167: LIST
35168: PUSH
35169: LD_INT 1
35171: NEG
35172: PUSH
35173: LD_INT 0
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: PUSH
35180: LD_INT 1
35182: NEG
35183: PUSH
35184: LD_INT 1
35186: NEG
35187: PUSH
35188: EMPTY
35189: LIST
35190: LIST
35191: PUSH
35192: LD_INT 1
35194: NEG
35195: PUSH
35196: LD_INT 2
35198: NEG
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: PUSH
35204: LD_INT 0
35206: PUSH
35207: LD_INT 2
35209: NEG
35210: PUSH
35211: EMPTY
35212: LIST
35213: LIST
35214: PUSH
35215: LD_INT 1
35217: PUSH
35218: LD_INT 1
35220: NEG
35221: PUSH
35222: EMPTY
35223: LIST
35224: LIST
35225: PUSH
35226: LD_INT 1
35228: PUSH
35229: LD_INT 2
35231: PUSH
35232: EMPTY
35233: LIST
35234: LIST
35235: PUSH
35236: LD_INT 0
35238: PUSH
35239: LD_INT 2
35241: PUSH
35242: EMPTY
35243: LIST
35244: LIST
35245: PUSH
35246: LD_INT 1
35248: NEG
35249: PUSH
35250: LD_INT 1
35252: PUSH
35253: EMPTY
35254: LIST
35255: LIST
35256: PUSH
35257: LD_INT 1
35259: NEG
35260: PUSH
35261: LD_INT 3
35263: NEG
35264: PUSH
35265: EMPTY
35266: LIST
35267: LIST
35268: PUSH
35269: LD_INT 0
35271: PUSH
35272: LD_INT 3
35274: NEG
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: PUSH
35280: LD_INT 1
35282: PUSH
35283: LD_INT 2
35285: NEG
35286: PUSH
35287: EMPTY
35288: LIST
35289: LIST
35290: PUSH
35291: EMPTY
35292: LIST
35293: LIST
35294: LIST
35295: LIST
35296: LIST
35297: LIST
35298: LIST
35299: LIST
35300: LIST
35301: LIST
35302: LIST
35303: LIST
35304: LIST
35305: LIST
35306: LIST
35307: LIST
35308: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35309: LD_ADDR_VAR 0 15
35313: PUSH
35314: LD_INT 0
35316: PUSH
35317: LD_INT 0
35319: PUSH
35320: EMPTY
35321: LIST
35322: LIST
35323: PUSH
35324: LD_INT 0
35326: PUSH
35327: LD_INT 1
35329: NEG
35330: PUSH
35331: EMPTY
35332: LIST
35333: LIST
35334: PUSH
35335: LD_INT 1
35337: PUSH
35338: LD_INT 0
35340: PUSH
35341: EMPTY
35342: LIST
35343: LIST
35344: PUSH
35345: LD_INT 1
35347: PUSH
35348: LD_INT 1
35350: PUSH
35351: EMPTY
35352: LIST
35353: LIST
35354: PUSH
35355: LD_INT 0
35357: PUSH
35358: LD_INT 1
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: PUSH
35365: LD_INT 1
35367: NEG
35368: PUSH
35369: LD_INT 0
35371: PUSH
35372: EMPTY
35373: LIST
35374: LIST
35375: PUSH
35376: LD_INT 1
35378: NEG
35379: PUSH
35380: LD_INT 1
35382: NEG
35383: PUSH
35384: EMPTY
35385: LIST
35386: LIST
35387: PUSH
35388: LD_INT 1
35390: PUSH
35391: LD_INT 1
35393: NEG
35394: PUSH
35395: EMPTY
35396: LIST
35397: LIST
35398: PUSH
35399: LD_INT 2
35401: PUSH
35402: LD_INT 0
35404: PUSH
35405: EMPTY
35406: LIST
35407: LIST
35408: PUSH
35409: LD_INT 2
35411: PUSH
35412: LD_INT 1
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: PUSH
35419: LD_INT 1
35421: NEG
35422: PUSH
35423: LD_INT 1
35425: PUSH
35426: EMPTY
35427: LIST
35428: LIST
35429: PUSH
35430: LD_INT 2
35432: NEG
35433: PUSH
35434: LD_INT 0
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: PUSH
35441: LD_INT 2
35443: NEG
35444: PUSH
35445: LD_INT 1
35447: NEG
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: PUSH
35453: LD_INT 2
35455: PUSH
35456: LD_INT 1
35458: NEG
35459: PUSH
35460: EMPTY
35461: LIST
35462: LIST
35463: PUSH
35464: LD_INT 3
35466: PUSH
35467: LD_INT 0
35469: PUSH
35470: EMPTY
35471: LIST
35472: LIST
35473: PUSH
35474: LD_INT 3
35476: PUSH
35477: LD_INT 1
35479: PUSH
35480: EMPTY
35481: LIST
35482: LIST
35483: PUSH
35484: EMPTY
35485: LIST
35486: LIST
35487: LIST
35488: LIST
35489: LIST
35490: LIST
35491: LIST
35492: LIST
35493: LIST
35494: LIST
35495: LIST
35496: LIST
35497: LIST
35498: LIST
35499: LIST
35500: LIST
35501: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35502: LD_ADDR_VAR 0 16
35506: PUSH
35507: LD_INT 0
35509: PUSH
35510: LD_INT 0
35512: PUSH
35513: EMPTY
35514: LIST
35515: LIST
35516: PUSH
35517: LD_INT 0
35519: PUSH
35520: LD_INT 1
35522: NEG
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: PUSH
35528: LD_INT 1
35530: PUSH
35531: LD_INT 0
35533: PUSH
35534: EMPTY
35535: LIST
35536: LIST
35537: PUSH
35538: LD_INT 1
35540: PUSH
35541: LD_INT 1
35543: PUSH
35544: EMPTY
35545: LIST
35546: LIST
35547: PUSH
35548: LD_INT 0
35550: PUSH
35551: LD_INT 1
35553: PUSH
35554: EMPTY
35555: LIST
35556: LIST
35557: PUSH
35558: LD_INT 1
35560: NEG
35561: PUSH
35562: LD_INT 0
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: PUSH
35569: LD_INT 1
35571: NEG
35572: PUSH
35573: LD_INT 1
35575: NEG
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: PUSH
35581: LD_INT 1
35583: NEG
35584: PUSH
35585: LD_INT 2
35587: NEG
35588: PUSH
35589: EMPTY
35590: LIST
35591: LIST
35592: PUSH
35593: LD_INT 2
35595: PUSH
35596: LD_INT 1
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: PUSH
35603: LD_INT 2
35605: PUSH
35606: LD_INT 2
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: PUSH
35613: LD_INT 1
35615: PUSH
35616: LD_INT 2
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: PUSH
35623: LD_INT 2
35625: NEG
35626: PUSH
35627: LD_INT 1
35629: NEG
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: PUSH
35635: LD_INT 2
35637: NEG
35638: PUSH
35639: LD_INT 2
35641: NEG
35642: PUSH
35643: EMPTY
35644: LIST
35645: LIST
35646: PUSH
35647: LD_INT 3
35649: PUSH
35650: LD_INT 2
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: PUSH
35657: LD_INT 3
35659: PUSH
35660: LD_INT 3
35662: PUSH
35663: EMPTY
35664: LIST
35665: LIST
35666: PUSH
35667: LD_INT 2
35669: PUSH
35670: LD_INT 3
35672: PUSH
35673: EMPTY
35674: LIST
35675: LIST
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: LIST
35681: LIST
35682: LIST
35683: LIST
35684: LIST
35685: LIST
35686: LIST
35687: LIST
35688: LIST
35689: LIST
35690: LIST
35691: LIST
35692: LIST
35693: LIST
35694: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35695: LD_ADDR_VAR 0 17
35699: PUSH
35700: LD_INT 0
35702: PUSH
35703: LD_INT 0
35705: PUSH
35706: EMPTY
35707: LIST
35708: LIST
35709: PUSH
35710: LD_INT 0
35712: PUSH
35713: LD_INT 1
35715: NEG
35716: PUSH
35717: EMPTY
35718: LIST
35719: LIST
35720: PUSH
35721: LD_INT 1
35723: PUSH
35724: LD_INT 0
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: PUSH
35731: LD_INT 1
35733: PUSH
35734: LD_INT 1
35736: PUSH
35737: EMPTY
35738: LIST
35739: LIST
35740: PUSH
35741: LD_INT 0
35743: PUSH
35744: LD_INT 1
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: PUSH
35751: LD_INT 1
35753: NEG
35754: PUSH
35755: LD_INT 0
35757: PUSH
35758: EMPTY
35759: LIST
35760: LIST
35761: PUSH
35762: LD_INT 1
35764: NEG
35765: PUSH
35766: LD_INT 1
35768: NEG
35769: PUSH
35770: EMPTY
35771: LIST
35772: LIST
35773: PUSH
35774: LD_INT 1
35776: NEG
35777: PUSH
35778: LD_INT 2
35780: NEG
35781: PUSH
35782: EMPTY
35783: LIST
35784: LIST
35785: PUSH
35786: LD_INT 0
35788: PUSH
35789: LD_INT 2
35791: NEG
35792: PUSH
35793: EMPTY
35794: LIST
35795: LIST
35796: PUSH
35797: LD_INT 1
35799: PUSH
35800: LD_INT 1
35802: NEG
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: PUSH
35808: LD_INT 2
35810: PUSH
35811: LD_INT 0
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: PUSH
35818: LD_INT 2
35820: PUSH
35821: LD_INT 1
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: PUSH
35828: LD_INT 2
35830: PUSH
35831: LD_INT 2
35833: PUSH
35834: EMPTY
35835: LIST
35836: LIST
35837: PUSH
35838: LD_INT 1
35840: PUSH
35841: LD_INT 2
35843: PUSH
35844: EMPTY
35845: LIST
35846: LIST
35847: PUSH
35848: LD_INT 0
35850: PUSH
35851: LD_INT 2
35853: PUSH
35854: EMPTY
35855: LIST
35856: LIST
35857: PUSH
35858: LD_INT 1
35860: NEG
35861: PUSH
35862: LD_INT 1
35864: PUSH
35865: EMPTY
35866: LIST
35867: LIST
35868: PUSH
35869: LD_INT 2
35871: NEG
35872: PUSH
35873: LD_INT 0
35875: PUSH
35876: EMPTY
35877: LIST
35878: LIST
35879: PUSH
35880: LD_INT 2
35882: NEG
35883: PUSH
35884: LD_INT 1
35886: NEG
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: PUSH
35892: LD_INT 2
35894: NEG
35895: PUSH
35896: LD_INT 2
35898: NEG
35899: PUSH
35900: EMPTY
35901: LIST
35902: LIST
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: LIST
35908: LIST
35909: LIST
35910: LIST
35911: LIST
35912: LIST
35913: LIST
35914: LIST
35915: LIST
35916: LIST
35917: LIST
35918: LIST
35919: LIST
35920: LIST
35921: LIST
35922: LIST
35923: LIST
35924: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35925: LD_ADDR_VAR 0 18
35929: PUSH
35930: LD_INT 0
35932: PUSH
35933: LD_INT 0
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: PUSH
35940: LD_INT 0
35942: PUSH
35943: LD_INT 1
35945: NEG
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: PUSH
35951: LD_INT 1
35953: PUSH
35954: LD_INT 0
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: PUSH
35961: LD_INT 1
35963: PUSH
35964: LD_INT 1
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: PUSH
35971: LD_INT 0
35973: PUSH
35974: LD_INT 1
35976: PUSH
35977: EMPTY
35978: LIST
35979: LIST
35980: PUSH
35981: LD_INT 1
35983: NEG
35984: PUSH
35985: LD_INT 0
35987: PUSH
35988: EMPTY
35989: LIST
35990: LIST
35991: PUSH
35992: LD_INT 1
35994: NEG
35995: PUSH
35996: LD_INT 1
35998: NEG
35999: PUSH
36000: EMPTY
36001: LIST
36002: LIST
36003: PUSH
36004: LD_INT 1
36006: NEG
36007: PUSH
36008: LD_INT 2
36010: NEG
36011: PUSH
36012: EMPTY
36013: LIST
36014: LIST
36015: PUSH
36016: LD_INT 0
36018: PUSH
36019: LD_INT 2
36021: NEG
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: PUSH
36027: LD_INT 1
36029: PUSH
36030: LD_INT 1
36032: NEG
36033: PUSH
36034: EMPTY
36035: LIST
36036: LIST
36037: PUSH
36038: LD_INT 2
36040: PUSH
36041: LD_INT 0
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: PUSH
36048: LD_INT 2
36050: PUSH
36051: LD_INT 1
36053: PUSH
36054: EMPTY
36055: LIST
36056: LIST
36057: PUSH
36058: LD_INT 2
36060: PUSH
36061: LD_INT 2
36063: PUSH
36064: EMPTY
36065: LIST
36066: LIST
36067: PUSH
36068: LD_INT 1
36070: PUSH
36071: LD_INT 2
36073: PUSH
36074: EMPTY
36075: LIST
36076: LIST
36077: PUSH
36078: LD_INT 0
36080: PUSH
36081: LD_INT 2
36083: PUSH
36084: EMPTY
36085: LIST
36086: LIST
36087: PUSH
36088: LD_INT 1
36090: NEG
36091: PUSH
36092: LD_INT 1
36094: PUSH
36095: EMPTY
36096: LIST
36097: LIST
36098: PUSH
36099: LD_INT 2
36101: NEG
36102: PUSH
36103: LD_INT 0
36105: PUSH
36106: EMPTY
36107: LIST
36108: LIST
36109: PUSH
36110: LD_INT 2
36112: NEG
36113: PUSH
36114: LD_INT 1
36116: NEG
36117: PUSH
36118: EMPTY
36119: LIST
36120: LIST
36121: PUSH
36122: LD_INT 2
36124: NEG
36125: PUSH
36126: LD_INT 2
36128: NEG
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: LIST
36138: LIST
36139: LIST
36140: LIST
36141: LIST
36142: LIST
36143: LIST
36144: LIST
36145: LIST
36146: LIST
36147: LIST
36148: LIST
36149: LIST
36150: LIST
36151: LIST
36152: LIST
36153: LIST
36154: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36155: LD_ADDR_VAR 0 19
36159: PUSH
36160: LD_INT 0
36162: PUSH
36163: LD_INT 0
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: PUSH
36170: LD_INT 0
36172: PUSH
36173: LD_INT 1
36175: NEG
36176: PUSH
36177: EMPTY
36178: LIST
36179: LIST
36180: PUSH
36181: LD_INT 1
36183: PUSH
36184: LD_INT 0
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: PUSH
36191: LD_INT 1
36193: PUSH
36194: LD_INT 1
36196: PUSH
36197: EMPTY
36198: LIST
36199: LIST
36200: PUSH
36201: LD_INT 0
36203: PUSH
36204: LD_INT 1
36206: PUSH
36207: EMPTY
36208: LIST
36209: LIST
36210: PUSH
36211: LD_INT 1
36213: NEG
36214: PUSH
36215: LD_INT 0
36217: PUSH
36218: EMPTY
36219: LIST
36220: LIST
36221: PUSH
36222: LD_INT 1
36224: NEG
36225: PUSH
36226: LD_INT 1
36228: NEG
36229: PUSH
36230: EMPTY
36231: LIST
36232: LIST
36233: PUSH
36234: LD_INT 1
36236: NEG
36237: PUSH
36238: LD_INT 2
36240: NEG
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: PUSH
36246: LD_INT 0
36248: PUSH
36249: LD_INT 2
36251: NEG
36252: PUSH
36253: EMPTY
36254: LIST
36255: LIST
36256: PUSH
36257: LD_INT 1
36259: PUSH
36260: LD_INT 1
36262: NEG
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: PUSH
36268: LD_INT 2
36270: PUSH
36271: LD_INT 0
36273: PUSH
36274: EMPTY
36275: LIST
36276: LIST
36277: PUSH
36278: LD_INT 2
36280: PUSH
36281: LD_INT 1
36283: PUSH
36284: EMPTY
36285: LIST
36286: LIST
36287: PUSH
36288: LD_INT 2
36290: PUSH
36291: LD_INT 2
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: PUSH
36298: LD_INT 1
36300: PUSH
36301: LD_INT 2
36303: PUSH
36304: EMPTY
36305: LIST
36306: LIST
36307: PUSH
36308: LD_INT 0
36310: PUSH
36311: LD_INT 2
36313: PUSH
36314: EMPTY
36315: LIST
36316: LIST
36317: PUSH
36318: LD_INT 1
36320: NEG
36321: PUSH
36322: LD_INT 1
36324: PUSH
36325: EMPTY
36326: LIST
36327: LIST
36328: PUSH
36329: LD_INT 2
36331: NEG
36332: PUSH
36333: LD_INT 0
36335: PUSH
36336: EMPTY
36337: LIST
36338: LIST
36339: PUSH
36340: LD_INT 2
36342: NEG
36343: PUSH
36344: LD_INT 1
36346: NEG
36347: PUSH
36348: EMPTY
36349: LIST
36350: LIST
36351: PUSH
36352: LD_INT 2
36354: NEG
36355: PUSH
36356: LD_INT 2
36358: NEG
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: LIST
36368: LIST
36369: LIST
36370: LIST
36371: LIST
36372: LIST
36373: LIST
36374: LIST
36375: LIST
36376: LIST
36377: LIST
36378: LIST
36379: LIST
36380: LIST
36381: LIST
36382: LIST
36383: LIST
36384: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36385: LD_ADDR_VAR 0 20
36389: PUSH
36390: LD_INT 0
36392: PUSH
36393: LD_INT 0
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: PUSH
36400: LD_INT 0
36402: PUSH
36403: LD_INT 1
36405: NEG
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: PUSH
36411: LD_INT 1
36413: PUSH
36414: LD_INT 0
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: PUSH
36421: LD_INT 1
36423: PUSH
36424: LD_INT 1
36426: PUSH
36427: EMPTY
36428: LIST
36429: LIST
36430: PUSH
36431: LD_INT 0
36433: PUSH
36434: LD_INT 1
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: PUSH
36441: LD_INT 1
36443: NEG
36444: PUSH
36445: LD_INT 0
36447: PUSH
36448: EMPTY
36449: LIST
36450: LIST
36451: PUSH
36452: LD_INT 1
36454: NEG
36455: PUSH
36456: LD_INT 1
36458: NEG
36459: PUSH
36460: EMPTY
36461: LIST
36462: LIST
36463: PUSH
36464: LD_INT 1
36466: NEG
36467: PUSH
36468: LD_INT 2
36470: NEG
36471: PUSH
36472: EMPTY
36473: LIST
36474: LIST
36475: PUSH
36476: LD_INT 0
36478: PUSH
36479: LD_INT 2
36481: NEG
36482: PUSH
36483: EMPTY
36484: LIST
36485: LIST
36486: PUSH
36487: LD_INT 1
36489: PUSH
36490: LD_INT 1
36492: NEG
36493: PUSH
36494: EMPTY
36495: LIST
36496: LIST
36497: PUSH
36498: LD_INT 2
36500: PUSH
36501: LD_INT 0
36503: PUSH
36504: EMPTY
36505: LIST
36506: LIST
36507: PUSH
36508: LD_INT 2
36510: PUSH
36511: LD_INT 1
36513: PUSH
36514: EMPTY
36515: LIST
36516: LIST
36517: PUSH
36518: LD_INT 2
36520: PUSH
36521: LD_INT 2
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: PUSH
36528: LD_INT 1
36530: PUSH
36531: LD_INT 2
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: PUSH
36538: LD_INT 0
36540: PUSH
36541: LD_INT 2
36543: PUSH
36544: EMPTY
36545: LIST
36546: LIST
36547: PUSH
36548: LD_INT 1
36550: NEG
36551: PUSH
36552: LD_INT 1
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: PUSH
36559: LD_INT 2
36561: NEG
36562: PUSH
36563: LD_INT 0
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: PUSH
36570: LD_INT 2
36572: NEG
36573: PUSH
36574: LD_INT 1
36576: NEG
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PUSH
36582: LD_INT 2
36584: NEG
36585: PUSH
36586: LD_INT 2
36588: NEG
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: LIST
36598: LIST
36599: LIST
36600: LIST
36601: LIST
36602: LIST
36603: LIST
36604: LIST
36605: LIST
36606: LIST
36607: LIST
36608: LIST
36609: LIST
36610: LIST
36611: LIST
36612: LIST
36613: LIST
36614: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36615: LD_ADDR_VAR 0 21
36619: PUSH
36620: LD_INT 0
36622: PUSH
36623: LD_INT 0
36625: PUSH
36626: EMPTY
36627: LIST
36628: LIST
36629: PUSH
36630: LD_INT 0
36632: PUSH
36633: LD_INT 1
36635: NEG
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: PUSH
36641: LD_INT 1
36643: PUSH
36644: LD_INT 0
36646: PUSH
36647: EMPTY
36648: LIST
36649: LIST
36650: PUSH
36651: LD_INT 1
36653: PUSH
36654: LD_INT 1
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: PUSH
36661: LD_INT 0
36663: PUSH
36664: LD_INT 1
36666: PUSH
36667: EMPTY
36668: LIST
36669: LIST
36670: PUSH
36671: LD_INT 1
36673: NEG
36674: PUSH
36675: LD_INT 0
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: PUSH
36682: LD_INT 1
36684: NEG
36685: PUSH
36686: LD_INT 1
36688: NEG
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: PUSH
36694: LD_INT 1
36696: NEG
36697: PUSH
36698: LD_INT 2
36700: NEG
36701: PUSH
36702: EMPTY
36703: LIST
36704: LIST
36705: PUSH
36706: LD_INT 0
36708: PUSH
36709: LD_INT 2
36711: NEG
36712: PUSH
36713: EMPTY
36714: LIST
36715: LIST
36716: PUSH
36717: LD_INT 1
36719: PUSH
36720: LD_INT 1
36722: NEG
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: PUSH
36728: LD_INT 2
36730: PUSH
36731: LD_INT 0
36733: PUSH
36734: EMPTY
36735: LIST
36736: LIST
36737: PUSH
36738: LD_INT 2
36740: PUSH
36741: LD_INT 1
36743: PUSH
36744: EMPTY
36745: LIST
36746: LIST
36747: PUSH
36748: LD_INT 2
36750: PUSH
36751: LD_INT 2
36753: PUSH
36754: EMPTY
36755: LIST
36756: LIST
36757: PUSH
36758: LD_INT 1
36760: PUSH
36761: LD_INT 2
36763: PUSH
36764: EMPTY
36765: LIST
36766: LIST
36767: PUSH
36768: LD_INT 0
36770: PUSH
36771: LD_INT 2
36773: PUSH
36774: EMPTY
36775: LIST
36776: LIST
36777: PUSH
36778: LD_INT 1
36780: NEG
36781: PUSH
36782: LD_INT 1
36784: PUSH
36785: EMPTY
36786: LIST
36787: LIST
36788: PUSH
36789: LD_INT 2
36791: NEG
36792: PUSH
36793: LD_INT 0
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: PUSH
36800: LD_INT 2
36802: NEG
36803: PUSH
36804: LD_INT 1
36806: NEG
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: PUSH
36812: LD_INT 2
36814: NEG
36815: PUSH
36816: LD_INT 2
36818: NEG
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: LIST
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: LIST
36836: LIST
36837: LIST
36838: LIST
36839: LIST
36840: LIST
36841: LIST
36842: LIST
36843: LIST
36844: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36845: LD_ADDR_VAR 0 22
36849: PUSH
36850: LD_INT 0
36852: PUSH
36853: LD_INT 0
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: LD_INT 0
36862: PUSH
36863: LD_INT 1
36865: NEG
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: PUSH
36871: LD_INT 1
36873: PUSH
36874: LD_INT 0
36876: PUSH
36877: EMPTY
36878: LIST
36879: LIST
36880: PUSH
36881: LD_INT 1
36883: PUSH
36884: LD_INT 1
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: PUSH
36891: LD_INT 0
36893: PUSH
36894: LD_INT 1
36896: PUSH
36897: EMPTY
36898: LIST
36899: LIST
36900: PUSH
36901: LD_INT 1
36903: NEG
36904: PUSH
36905: LD_INT 0
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: PUSH
36912: LD_INT 1
36914: NEG
36915: PUSH
36916: LD_INT 1
36918: NEG
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: PUSH
36924: LD_INT 1
36926: NEG
36927: PUSH
36928: LD_INT 2
36930: NEG
36931: PUSH
36932: EMPTY
36933: LIST
36934: LIST
36935: PUSH
36936: LD_INT 0
36938: PUSH
36939: LD_INT 2
36941: NEG
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: PUSH
36947: LD_INT 1
36949: PUSH
36950: LD_INT 1
36952: NEG
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: PUSH
36958: LD_INT 2
36960: PUSH
36961: LD_INT 0
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: PUSH
36968: LD_INT 2
36970: PUSH
36971: LD_INT 1
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: PUSH
36978: LD_INT 2
36980: PUSH
36981: LD_INT 2
36983: PUSH
36984: EMPTY
36985: LIST
36986: LIST
36987: PUSH
36988: LD_INT 1
36990: PUSH
36991: LD_INT 2
36993: PUSH
36994: EMPTY
36995: LIST
36996: LIST
36997: PUSH
36998: LD_INT 0
37000: PUSH
37001: LD_INT 2
37003: PUSH
37004: EMPTY
37005: LIST
37006: LIST
37007: PUSH
37008: LD_INT 1
37010: NEG
37011: PUSH
37012: LD_INT 1
37014: PUSH
37015: EMPTY
37016: LIST
37017: LIST
37018: PUSH
37019: LD_INT 2
37021: NEG
37022: PUSH
37023: LD_INT 0
37025: PUSH
37026: EMPTY
37027: LIST
37028: LIST
37029: PUSH
37030: LD_INT 2
37032: NEG
37033: PUSH
37034: LD_INT 1
37036: NEG
37037: PUSH
37038: EMPTY
37039: LIST
37040: LIST
37041: PUSH
37042: LD_INT 2
37044: NEG
37045: PUSH
37046: LD_INT 2
37048: NEG
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: PUSH
37054: EMPTY
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: LIST
37065: LIST
37066: LIST
37067: LIST
37068: LIST
37069: LIST
37070: LIST
37071: LIST
37072: LIST
37073: LIST
37074: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37075: LD_ADDR_VAR 0 23
37079: PUSH
37080: LD_INT 0
37082: PUSH
37083: LD_INT 0
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: PUSH
37090: LD_INT 0
37092: PUSH
37093: LD_INT 1
37095: NEG
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: PUSH
37101: LD_INT 1
37103: PUSH
37104: LD_INT 0
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: PUSH
37111: LD_INT 1
37113: PUSH
37114: LD_INT 1
37116: PUSH
37117: EMPTY
37118: LIST
37119: LIST
37120: PUSH
37121: LD_INT 0
37123: PUSH
37124: LD_INT 1
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: PUSH
37131: LD_INT 1
37133: NEG
37134: PUSH
37135: LD_INT 0
37137: PUSH
37138: EMPTY
37139: LIST
37140: LIST
37141: PUSH
37142: LD_INT 1
37144: NEG
37145: PUSH
37146: LD_INT 1
37148: NEG
37149: PUSH
37150: EMPTY
37151: LIST
37152: LIST
37153: PUSH
37154: LD_INT 1
37156: NEG
37157: PUSH
37158: LD_INT 2
37160: NEG
37161: PUSH
37162: EMPTY
37163: LIST
37164: LIST
37165: PUSH
37166: LD_INT 0
37168: PUSH
37169: LD_INT 2
37171: NEG
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: PUSH
37177: LD_INT 1
37179: PUSH
37180: LD_INT 1
37182: NEG
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: PUSH
37188: LD_INT 2
37190: PUSH
37191: LD_INT 0
37193: PUSH
37194: EMPTY
37195: LIST
37196: LIST
37197: PUSH
37198: LD_INT 2
37200: PUSH
37201: LD_INT 1
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: PUSH
37208: LD_INT 2
37210: PUSH
37211: LD_INT 2
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: PUSH
37218: LD_INT 1
37220: PUSH
37221: LD_INT 2
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: PUSH
37228: LD_INT 0
37230: PUSH
37231: LD_INT 2
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: PUSH
37238: LD_INT 1
37240: NEG
37241: PUSH
37242: LD_INT 1
37244: PUSH
37245: EMPTY
37246: LIST
37247: LIST
37248: PUSH
37249: LD_INT 2
37251: NEG
37252: PUSH
37253: LD_INT 0
37255: PUSH
37256: EMPTY
37257: LIST
37258: LIST
37259: PUSH
37260: LD_INT 2
37262: NEG
37263: PUSH
37264: LD_INT 1
37266: NEG
37267: PUSH
37268: EMPTY
37269: LIST
37270: LIST
37271: PUSH
37272: LD_INT 2
37274: NEG
37275: PUSH
37276: LD_INT 2
37278: NEG
37279: PUSH
37280: EMPTY
37281: LIST
37282: LIST
37283: PUSH
37284: LD_INT 2
37286: NEG
37287: PUSH
37288: LD_INT 3
37290: NEG
37291: PUSH
37292: EMPTY
37293: LIST
37294: LIST
37295: PUSH
37296: LD_INT 1
37298: NEG
37299: PUSH
37300: LD_INT 3
37302: NEG
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: PUSH
37308: LD_INT 1
37310: PUSH
37311: LD_INT 2
37313: NEG
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: PUSH
37319: LD_INT 2
37321: PUSH
37322: LD_INT 1
37324: NEG
37325: PUSH
37326: EMPTY
37327: LIST
37328: LIST
37329: PUSH
37330: EMPTY
37331: LIST
37332: LIST
37333: LIST
37334: LIST
37335: LIST
37336: LIST
37337: LIST
37338: LIST
37339: LIST
37340: LIST
37341: LIST
37342: LIST
37343: LIST
37344: LIST
37345: LIST
37346: LIST
37347: LIST
37348: LIST
37349: LIST
37350: LIST
37351: LIST
37352: LIST
37353: LIST
37354: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
37355: LD_ADDR_VAR 0 24
37359: PUSH
37360: LD_INT 0
37362: PUSH
37363: LD_INT 0
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: PUSH
37370: LD_INT 0
37372: PUSH
37373: LD_INT 1
37375: NEG
37376: PUSH
37377: EMPTY
37378: LIST
37379: LIST
37380: PUSH
37381: LD_INT 1
37383: PUSH
37384: LD_INT 0
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: PUSH
37391: LD_INT 1
37393: PUSH
37394: LD_INT 1
37396: PUSH
37397: EMPTY
37398: LIST
37399: LIST
37400: PUSH
37401: LD_INT 0
37403: PUSH
37404: LD_INT 1
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: PUSH
37411: LD_INT 1
37413: NEG
37414: PUSH
37415: LD_INT 0
37417: PUSH
37418: EMPTY
37419: LIST
37420: LIST
37421: PUSH
37422: LD_INT 1
37424: NEG
37425: PUSH
37426: LD_INT 1
37428: NEG
37429: PUSH
37430: EMPTY
37431: LIST
37432: LIST
37433: PUSH
37434: LD_INT 1
37436: NEG
37437: PUSH
37438: LD_INT 2
37440: NEG
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: PUSH
37446: LD_INT 0
37448: PUSH
37449: LD_INT 2
37451: NEG
37452: PUSH
37453: EMPTY
37454: LIST
37455: LIST
37456: PUSH
37457: LD_INT 1
37459: PUSH
37460: LD_INT 1
37462: NEG
37463: PUSH
37464: EMPTY
37465: LIST
37466: LIST
37467: PUSH
37468: LD_INT 2
37470: PUSH
37471: LD_INT 0
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: PUSH
37478: LD_INT 2
37480: PUSH
37481: LD_INT 1
37483: PUSH
37484: EMPTY
37485: LIST
37486: LIST
37487: PUSH
37488: LD_INT 2
37490: PUSH
37491: LD_INT 2
37493: PUSH
37494: EMPTY
37495: LIST
37496: LIST
37497: PUSH
37498: LD_INT 1
37500: PUSH
37501: LD_INT 2
37503: PUSH
37504: EMPTY
37505: LIST
37506: LIST
37507: PUSH
37508: LD_INT 0
37510: PUSH
37511: LD_INT 2
37513: PUSH
37514: EMPTY
37515: LIST
37516: LIST
37517: PUSH
37518: LD_INT 1
37520: NEG
37521: PUSH
37522: LD_INT 1
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: PUSH
37529: LD_INT 2
37531: NEG
37532: PUSH
37533: LD_INT 0
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: PUSH
37540: LD_INT 2
37542: NEG
37543: PUSH
37544: LD_INT 1
37546: NEG
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: PUSH
37552: LD_INT 2
37554: NEG
37555: PUSH
37556: LD_INT 2
37558: NEG
37559: PUSH
37560: EMPTY
37561: LIST
37562: LIST
37563: PUSH
37564: LD_INT 1
37566: PUSH
37567: LD_INT 2
37569: NEG
37570: PUSH
37571: EMPTY
37572: LIST
37573: LIST
37574: PUSH
37575: LD_INT 2
37577: PUSH
37578: LD_INT 1
37580: NEG
37581: PUSH
37582: EMPTY
37583: LIST
37584: LIST
37585: PUSH
37586: LD_INT 3
37588: PUSH
37589: LD_INT 1
37591: PUSH
37592: EMPTY
37593: LIST
37594: LIST
37595: PUSH
37596: LD_INT 3
37598: PUSH
37599: LD_INT 2
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: LIST
37614: LIST
37615: LIST
37616: LIST
37617: LIST
37618: LIST
37619: LIST
37620: LIST
37621: LIST
37622: LIST
37623: LIST
37624: LIST
37625: LIST
37626: LIST
37627: LIST
37628: LIST
37629: LIST
37630: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
37631: LD_ADDR_VAR 0 25
37635: PUSH
37636: LD_INT 0
37638: PUSH
37639: LD_INT 0
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: PUSH
37646: LD_INT 0
37648: PUSH
37649: LD_INT 1
37651: NEG
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: PUSH
37657: LD_INT 1
37659: PUSH
37660: LD_INT 0
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: PUSH
37667: LD_INT 1
37669: PUSH
37670: LD_INT 1
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: PUSH
37677: LD_INT 0
37679: PUSH
37680: LD_INT 1
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: PUSH
37687: LD_INT 1
37689: NEG
37690: PUSH
37691: LD_INT 0
37693: PUSH
37694: EMPTY
37695: LIST
37696: LIST
37697: PUSH
37698: LD_INT 1
37700: NEG
37701: PUSH
37702: LD_INT 1
37704: NEG
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: PUSH
37710: LD_INT 1
37712: NEG
37713: PUSH
37714: LD_INT 2
37716: NEG
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: PUSH
37722: LD_INT 0
37724: PUSH
37725: LD_INT 2
37727: NEG
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: PUSH
37733: LD_INT 1
37735: PUSH
37736: LD_INT 1
37738: NEG
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: PUSH
37744: LD_INT 2
37746: PUSH
37747: LD_INT 0
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 2
37756: PUSH
37757: LD_INT 1
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PUSH
37764: LD_INT 2
37766: PUSH
37767: LD_INT 2
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: PUSH
37774: LD_INT 1
37776: PUSH
37777: LD_INT 2
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: PUSH
37784: LD_INT 0
37786: PUSH
37787: LD_INT 2
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: PUSH
37794: LD_INT 1
37796: NEG
37797: PUSH
37798: LD_INT 1
37800: PUSH
37801: EMPTY
37802: LIST
37803: LIST
37804: PUSH
37805: LD_INT 2
37807: NEG
37808: PUSH
37809: LD_INT 0
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: PUSH
37816: LD_INT 2
37818: NEG
37819: PUSH
37820: LD_INT 1
37822: NEG
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: PUSH
37828: LD_INT 2
37830: NEG
37831: PUSH
37832: LD_INT 2
37834: NEG
37835: PUSH
37836: EMPTY
37837: LIST
37838: LIST
37839: PUSH
37840: LD_INT 3
37842: PUSH
37843: LD_INT 1
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: PUSH
37850: LD_INT 3
37852: PUSH
37853: LD_INT 2
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: PUSH
37860: LD_INT 2
37862: PUSH
37863: LD_INT 3
37865: PUSH
37866: EMPTY
37867: LIST
37868: LIST
37869: PUSH
37870: LD_INT 1
37872: PUSH
37873: LD_INT 3
37875: PUSH
37876: EMPTY
37877: LIST
37878: LIST
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: LIST
37884: LIST
37885: LIST
37886: LIST
37887: LIST
37888: LIST
37889: LIST
37890: LIST
37891: LIST
37892: LIST
37893: LIST
37894: LIST
37895: LIST
37896: LIST
37897: LIST
37898: LIST
37899: LIST
37900: LIST
37901: LIST
37902: LIST
37903: LIST
37904: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37905: LD_ADDR_VAR 0 26
37909: PUSH
37910: LD_INT 0
37912: PUSH
37913: LD_INT 0
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: PUSH
37920: LD_INT 0
37922: PUSH
37923: LD_INT 1
37925: NEG
37926: PUSH
37927: EMPTY
37928: LIST
37929: LIST
37930: PUSH
37931: LD_INT 1
37933: PUSH
37934: LD_INT 0
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: PUSH
37941: LD_INT 1
37943: PUSH
37944: LD_INT 1
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: PUSH
37951: LD_INT 0
37953: PUSH
37954: LD_INT 1
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: PUSH
37961: LD_INT 1
37963: NEG
37964: PUSH
37965: LD_INT 0
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: PUSH
37972: LD_INT 1
37974: NEG
37975: PUSH
37976: LD_INT 1
37978: NEG
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: PUSH
37984: LD_INT 1
37986: NEG
37987: PUSH
37988: LD_INT 2
37990: NEG
37991: PUSH
37992: EMPTY
37993: LIST
37994: LIST
37995: PUSH
37996: LD_INT 0
37998: PUSH
37999: LD_INT 2
38001: NEG
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: PUSH
38007: LD_INT 1
38009: PUSH
38010: LD_INT 1
38012: NEG
38013: PUSH
38014: EMPTY
38015: LIST
38016: LIST
38017: PUSH
38018: LD_INT 2
38020: PUSH
38021: LD_INT 0
38023: PUSH
38024: EMPTY
38025: LIST
38026: LIST
38027: PUSH
38028: LD_INT 2
38030: PUSH
38031: LD_INT 1
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: PUSH
38038: LD_INT 2
38040: PUSH
38041: LD_INT 2
38043: PUSH
38044: EMPTY
38045: LIST
38046: LIST
38047: PUSH
38048: LD_INT 1
38050: PUSH
38051: LD_INT 2
38053: PUSH
38054: EMPTY
38055: LIST
38056: LIST
38057: PUSH
38058: LD_INT 0
38060: PUSH
38061: LD_INT 2
38063: PUSH
38064: EMPTY
38065: LIST
38066: LIST
38067: PUSH
38068: LD_INT 1
38070: NEG
38071: PUSH
38072: LD_INT 1
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: PUSH
38079: LD_INT 2
38081: NEG
38082: PUSH
38083: LD_INT 0
38085: PUSH
38086: EMPTY
38087: LIST
38088: LIST
38089: PUSH
38090: LD_INT 2
38092: NEG
38093: PUSH
38094: LD_INT 1
38096: NEG
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: PUSH
38102: LD_INT 2
38104: NEG
38105: PUSH
38106: LD_INT 2
38108: NEG
38109: PUSH
38110: EMPTY
38111: LIST
38112: LIST
38113: PUSH
38114: LD_INT 2
38116: PUSH
38117: LD_INT 3
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: PUSH
38124: LD_INT 1
38126: PUSH
38127: LD_INT 3
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: PUSH
38134: LD_INT 1
38136: NEG
38137: PUSH
38138: LD_INT 2
38140: PUSH
38141: EMPTY
38142: LIST
38143: LIST
38144: PUSH
38145: LD_INT 2
38147: NEG
38148: PUSH
38149: LD_INT 1
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: PUSH
38156: EMPTY
38157: LIST
38158: LIST
38159: LIST
38160: LIST
38161: LIST
38162: LIST
38163: LIST
38164: LIST
38165: LIST
38166: LIST
38167: LIST
38168: LIST
38169: LIST
38170: LIST
38171: LIST
38172: LIST
38173: LIST
38174: LIST
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: LIST
38180: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38181: LD_ADDR_VAR 0 27
38185: PUSH
38186: LD_INT 0
38188: PUSH
38189: LD_INT 0
38191: PUSH
38192: EMPTY
38193: LIST
38194: LIST
38195: PUSH
38196: LD_INT 0
38198: PUSH
38199: LD_INT 1
38201: NEG
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: PUSH
38207: LD_INT 1
38209: PUSH
38210: LD_INT 0
38212: PUSH
38213: EMPTY
38214: LIST
38215: LIST
38216: PUSH
38217: LD_INT 1
38219: PUSH
38220: LD_INT 1
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: PUSH
38227: LD_INT 0
38229: PUSH
38230: LD_INT 1
38232: PUSH
38233: EMPTY
38234: LIST
38235: LIST
38236: PUSH
38237: LD_INT 1
38239: NEG
38240: PUSH
38241: LD_INT 0
38243: PUSH
38244: EMPTY
38245: LIST
38246: LIST
38247: PUSH
38248: LD_INT 1
38250: NEG
38251: PUSH
38252: LD_INT 1
38254: NEG
38255: PUSH
38256: EMPTY
38257: LIST
38258: LIST
38259: PUSH
38260: LD_INT 1
38262: NEG
38263: PUSH
38264: LD_INT 2
38266: NEG
38267: PUSH
38268: EMPTY
38269: LIST
38270: LIST
38271: PUSH
38272: LD_INT 0
38274: PUSH
38275: LD_INT 2
38277: NEG
38278: PUSH
38279: EMPTY
38280: LIST
38281: LIST
38282: PUSH
38283: LD_INT 1
38285: PUSH
38286: LD_INT 1
38288: NEG
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: PUSH
38294: LD_INT 2
38296: PUSH
38297: LD_INT 0
38299: PUSH
38300: EMPTY
38301: LIST
38302: LIST
38303: PUSH
38304: LD_INT 2
38306: PUSH
38307: LD_INT 1
38309: PUSH
38310: EMPTY
38311: LIST
38312: LIST
38313: PUSH
38314: LD_INT 2
38316: PUSH
38317: LD_INT 2
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: PUSH
38324: LD_INT 1
38326: PUSH
38327: LD_INT 2
38329: PUSH
38330: EMPTY
38331: LIST
38332: LIST
38333: PUSH
38334: LD_INT 0
38336: PUSH
38337: LD_INT 2
38339: PUSH
38340: EMPTY
38341: LIST
38342: LIST
38343: PUSH
38344: LD_INT 1
38346: NEG
38347: PUSH
38348: LD_INT 1
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: PUSH
38355: LD_INT 2
38357: NEG
38358: PUSH
38359: LD_INT 0
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: PUSH
38366: LD_INT 2
38368: NEG
38369: PUSH
38370: LD_INT 1
38372: NEG
38373: PUSH
38374: EMPTY
38375: LIST
38376: LIST
38377: PUSH
38378: LD_INT 2
38380: NEG
38381: PUSH
38382: LD_INT 2
38384: NEG
38385: PUSH
38386: EMPTY
38387: LIST
38388: LIST
38389: PUSH
38390: LD_INT 1
38392: NEG
38393: PUSH
38394: LD_INT 2
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: PUSH
38401: LD_INT 2
38403: NEG
38404: PUSH
38405: LD_INT 1
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: PUSH
38412: LD_INT 3
38414: NEG
38415: PUSH
38416: LD_INT 1
38418: NEG
38419: PUSH
38420: EMPTY
38421: LIST
38422: LIST
38423: PUSH
38424: LD_INT 3
38426: NEG
38427: PUSH
38428: LD_INT 2
38430: NEG
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38461: LD_ADDR_VAR 0 28
38465: PUSH
38466: LD_INT 0
38468: PUSH
38469: LD_INT 0
38471: PUSH
38472: EMPTY
38473: LIST
38474: LIST
38475: PUSH
38476: LD_INT 0
38478: PUSH
38479: LD_INT 1
38481: NEG
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PUSH
38487: LD_INT 1
38489: PUSH
38490: LD_INT 0
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: LD_INT 1
38499: PUSH
38500: LD_INT 1
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: PUSH
38507: LD_INT 0
38509: PUSH
38510: LD_INT 1
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: PUSH
38517: LD_INT 1
38519: NEG
38520: PUSH
38521: LD_INT 0
38523: PUSH
38524: EMPTY
38525: LIST
38526: LIST
38527: PUSH
38528: LD_INT 1
38530: NEG
38531: PUSH
38532: LD_INT 1
38534: NEG
38535: PUSH
38536: EMPTY
38537: LIST
38538: LIST
38539: PUSH
38540: LD_INT 1
38542: NEG
38543: PUSH
38544: LD_INT 2
38546: NEG
38547: PUSH
38548: EMPTY
38549: LIST
38550: LIST
38551: PUSH
38552: LD_INT 0
38554: PUSH
38555: LD_INT 2
38557: NEG
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: PUSH
38563: LD_INT 1
38565: PUSH
38566: LD_INT 1
38568: NEG
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: PUSH
38574: LD_INT 2
38576: PUSH
38577: LD_INT 0
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: PUSH
38584: LD_INT 2
38586: PUSH
38587: LD_INT 1
38589: PUSH
38590: EMPTY
38591: LIST
38592: LIST
38593: PUSH
38594: LD_INT 2
38596: PUSH
38597: LD_INT 2
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: PUSH
38604: LD_INT 1
38606: PUSH
38607: LD_INT 2
38609: PUSH
38610: EMPTY
38611: LIST
38612: LIST
38613: PUSH
38614: LD_INT 0
38616: PUSH
38617: LD_INT 2
38619: PUSH
38620: EMPTY
38621: LIST
38622: LIST
38623: PUSH
38624: LD_INT 1
38626: NEG
38627: PUSH
38628: LD_INT 1
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: PUSH
38635: LD_INT 2
38637: NEG
38638: PUSH
38639: LD_INT 0
38641: PUSH
38642: EMPTY
38643: LIST
38644: LIST
38645: PUSH
38646: LD_INT 2
38648: NEG
38649: PUSH
38650: LD_INT 1
38652: NEG
38653: PUSH
38654: EMPTY
38655: LIST
38656: LIST
38657: PUSH
38658: LD_INT 2
38660: NEG
38661: PUSH
38662: LD_INT 2
38664: NEG
38665: PUSH
38666: EMPTY
38667: LIST
38668: LIST
38669: PUSH
38670: LD_INT 2
38672: NEG
38673: PUSH
38674: LD_INT 3
38676: NEG
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: PUSH
38682: LD_INT 1
38684: NEG
38685: PUSH
38686: LD_INT 3
38688: NEG
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: PUSH
38694: LD_INT 3
38696: NEG
38697: PUSH
38698: LD_INT 1
38700: NEG
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: PUSH
38706: LD_INT 3
38708: NEG
38709: PUSH
38710: LD_INT 2
38712: NEG
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: LIST
38722: LIST
38723: LIST
38724: LIST
38725: LIST
38726: LIST
38727: LIST
38728: LIST
38729: LIST
38730: LIST
38731: LIST
38732: LIST
38733: LIST
38734: LIST
38735: LIST
38736: LIST
38737: LIST
38738: LIST
38739: LIST
38740: LIST
38741: LIST
38742: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38743: LD_ADDR_VAR 0 29
38747: PUSH
38748: LD_INT 0
38750: PUSH
38751: LD_INT 0
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: PUSH
38758: LD_INT 0
38760: PUSH
38761: LD_INT 1
38763: NEG
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: PUSH
38769: LD_INT 1
38771: PUSH
38772: LD_INT 0
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PUSH
38779: LD_INT 1
38781: PUSH
38782: LD_INT 1
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: PUSH
38789: LD_INT 0
38791: PUSH
38792: LD_INT 1
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: PUSH
38799: LD_INT 1
38801: NEG
38802: PUSH
38803: LD_INT 0
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: PUSH
38810: LD_INT 1
38812: NEG
38813: PUSH
38814: LD_INT 1
38816: NEG
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: PUSH
38822: LD_INT 1
38824: NEG
38825: PUSH
38826: LD_INT 2
38828: NEG
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: PUSH
38834: LD_INT 0
38836: PUSH
38837: LD_INT 2
38839: NEG
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: PUSH
38845: LD_INT 1
38847: PUSH
38848: LD_INT 1
38850: NEG
38851: PUSH
38852: EMPTY
38853: LIST
38854: LIST
38855: PUSH
38856: LD_INT 2
38858: PUSH
38859: LD_INT 0
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: PUSH
38866: LD_INT 2
38868: PUSH
38869: LD_INT 1
38871: PUSH
38872: EMPTY
38873: LIST
38874: LIST
38875: PUSH
38876: LD_INT 1
38878: PUSH
38879: LD_INT 2
38881: PUSH
38882: EMPTY
38883: LIST
38884: LIST
38885: PUSH
38886: LD_INT 0
38888: PUSH
38889: LD_INT 2
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: PUSH
38896: LD_INT 1
38898: NEG
38899: PUSH
38900: LD_INT 1
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: PUSH
38907: LD_INT 2
38909: NEG
38910: PUSH
38911: LD_INT 1
38913: NEG
38914: PUSH
38915: EMPTY
38916: LIST
38917: LIST
38918: PUSH
38919: LD_INT 2
38921: NEG
38922: PUSH
38923: LD_INT 2
38925: NEG
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: PUSH
38931: LD_INT 2
38933: NEG
38934: PUSH
38935: LD_INT 3
38937: NEG
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: PUSH
38943: LD_INT 2
38945: PUSH
38946: LD_INT 1
38948: NEG
38949: PUSH
38950: EMPTY
38951: LIST
38952: LIST
38953: PUSH
38954: LD_INT 3
38956: PUSH
38957: LD_INT 1
38959: PUSH
38960: EMPTY
38961: LIST
38962: LIST
38963: PUSH
38964: LD_INT 1
38966: PUSH
38967: LD_INT 3
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PUSH
38974: LD_INT 1
38976: NEG
38977: PUSH
38978: LD_INT 2
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: PUSH
38985: LD_INT 3
38987: NEG
38988: PUSH
38989: LD_INT 2
38991: NEG
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: LIST
39001: LIST
39002: LIST
39003: LIST
39004: LIST
39005: LIST
39006: LIST
39007: LIST
39008: LIST
39009: LIST
39010: LIST
39011: LIST
39012: LIST
39013: LIST
39014: LIST
39015: LIST
39016: LIST
39017: LIST
39018: LIST
39019: LIST
39020: LIST
39021: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39022: LD_ADDR_VAR 0 30
39026: PUSH
39027: LD_INT 0
39029: PUSH
39030: LD_INT 0
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: PUSH
39037: LD_INT 0
39039: PUSH
39040: LD_INT 1
39042: NEG
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: PUSH
39048: LD_INT 1
39050: PUSH
39051: LD_INT 0
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 1
39060: PUSH
39061: LD_INT 1
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 0
39070: PUSH
39071: LD_INT 1
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: LD_INT 1
39080: NEG
39081: PUSH
39082: LD_INT 0
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PUSH
39089: LD_INT 1
39091: NEG
39092: PUSH
39093: LD_INT 1
39095: NEG
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: PUSH
39101: LD_INT 1
39103: NEG
39104: PUSH
39105: LD_INT 2
39107: NEG
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: PUSH
39113: LD_INT 0
39115: PUSH
39116: LD_INT 2
39118: NEG
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: PUSH
39124: LD_INT 1
39126: PUSH
39127: LD_INT 1
39129: NEG
39130: PUSH
39131: EMPTY
39132: LIST
39133: LIST
39134: PUSH
39135: LD_INT 2
39137: PUSH
39138: LD_INT 0
39140: PUSH
39141: EMPTY
39142: LIST
39143: LIST
39144: PUSH
39145: LD_INT 2
39147: PUSH
39148: LD_INT 1
39150: PUSH
39151: EMPTY
39152: LIST
39153: LIST
39154: PUSH
39155: LD_INT 2
39157: PUSH
39158: LD_INT 2
39160: PUSH
39161: EMPTY
39162: LIST
39163: LIST
39164: PUSH
39165: LD_INT 1
39167: PUSH
39168: LD_INT 2
39170: PUSH
39171: EMPTY
39172: LIST
39173: LIST
39174: PUSH
39175: LD_INT 1
39177: NEG
39178: PUSH
39179: LD_INT 1
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: PUSH
39186: LD_INT 2
39188: NEG
39189: PUSH
39190: LD_INT 0
39192: PUSH
39193: EMPTY
39194: LIST
39195: LIST
39196: PUSH
39197: LD_INT 2
39199: NEG
39200: PUSH
39201: LD_INT 1
39203: NEG
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: PUSH
39209: LD_INT 1
39211: NEG
39212: PUSH
39213: LD_INT 3
39215: NEG
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: PUSH
39221: LD_INT 1
39223: PUSH
39224: LD_INT 2
39226: NEG
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: PUSH
39232: LD_INT 3
39234: PUSH
39235: LD_INT 2
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: PUSH
39242: LD_INT 2
39244: PUSH
39245: LD_INT 3
39247: PUSH
39248: EMPTY
39249: LIST
39250: LIST
39251: PUSH
39252: LD_INT 2
39254: NEG
39255: PUSH
39256: LD_INT 1
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: PUSH
39263: LD_INT 3
39265: NEG
39266: PUSH
39267: LD_INT 1
39269: NEG
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: LIST
39279: LIST
39280: LIST
39281: LIST
39282: LIST
39283: LIST
39284: LIST
39285: LIST
39286: LIST
39287: LIST
39288: LIST
39289: LIST
39290: LIST
39291: LIST
39292: LIST
39293: LIST
39294: LIST
39295: LIST
39296: LIST
39297: LIST
39298: LIST
39299: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39300: LD_ADDR_VAR 0 31
39304: PUSH
39305: LD_INT 0
39307: PUSH
39308: LD_INT 0
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PUSH
39315: LD_INT 0
39317: PUSH
39318: LD_INT 1
39320: NEG
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: PUSH
39326: LD_INT 1
39328: PUSH
39329: LD_INT 0
39331: PUSH
39332: EMPTY
39333: LIST
39334: LIST
39335: PUSH
39336: LD_INT 1
39338: PUSH
39339: LD_INT 1
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: PUSH
39346: LD_INT 0
39348: PUSH
39349: LD_INT 1
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: LD_INT 1
39358: NEG
39359: PUSH
39360: LD_INT 0
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: PUSH
39367: LD_INT 1
39369: NEG
39370: PUSH
39371: LD_INT 1
39373: NEG
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: PUSH
39379: LD_INT 1
39381: NEG
39382: PUSH
39383: LD_INT 2
39385: NEG
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: PUSH
39391: LD_INT 1
39393: PUSH
39394: LD_INT 1
39396: NEG
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: PUSH
39402: LD_INT 2
39404: PUSH
39405: LD_INT 0
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: PUSH
39412: LD_INT 2
39414: PUSH
39415: LD_INT 1
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: PUSH
39422: LD_INT 2
39424: PUSH
39425: LD_INT 2
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: PUSH
39432: LD_INT 1
39434: PUSH
39435: LD_INT 2
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: LD_INT 0
39444: PUSH
39445: LD_INT 2
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: PUSH
39452: LD_INT 1
39454: NEG
39455: PUSH
39456: LD_INT 1
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: PUSH
39463: LD_INT 2
39465: NEG
39466: PUSH
39467: LD_INT 1
39469: NEG
39470: PUSH
39471: EMPTY
39472: LIST
39473: LIST
39474: PUSH
39475: LD_INT 2
39477: NEG
39478: PUSH
39479: LD_INT 2
39481: NEG
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: PUSH
39487: LD_INT 2
39489: NEG
39490: PUSH
39491: LD_INT 3
39493: NEG
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: PUSH
39499: LD_INT 2
39501: PUSH
39502: LD_INT 1
39504: NEG
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: PUSH
39510: LD_INT 3
39512: PUSH
39513: LD_INT 1
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 1
39522: PUSH
39523: LD_INT 3
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PUSH
39530: LD_INT 1
39532: NEG
39533: PUSH
39534: LD_INT 2
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: PUSH
39541: LD_INT 3
39543: NEG
39544: PUSH
39545: LD_INT 2
39547: NEG
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: EMPTY
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: LIST
39569: LIST
39570: LIST
39571: LIST
39572: LIST
39573: LIST
39574: LIST
39575: LIST
39576: LIST
39577: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39578: LD_ADDR_VAR 0 32
39582: PUSH
39583: LD_INT 0
39585: PUSH
39586: LD_INT 0
39588: PUSH
39589: EMPTY
39590: LIST
39591: LIST
39592: PUSH
39593: LD_INT 0
39595: PUSH
39596: LD_INT 1
39598: NEG
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: PUSH
39604: LD_INT 1
39606: PUSH
39607: LD_INT 0
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: PUSH
39614: LD_INT 1
39616: PUSH
39617: LD_INT 1
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: PUSH
39624: LD_INT 0
39626: PUSH
39627: LD_INT 1
39629: PUSH
39630: EMPTY
39631: LIST
39632: LIST
39633: PUSH
39634: LD_INT 1
39636: NEG
39637: PUSH
39638: LD_INT 0
39640: PUSH
39641: EMPTY
39642: LIST
39643: LIST
39644: PUSH
39645: LD_INT 1
39647: NEG
39648: PUSH
39649: LD_INT 1
39651: NEG
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: PUSH
39657: LD_INT 1
39659: NEG
39660: PUSH
39661: LD_INT 2
39663: NEG
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: PUSH
39669: LD_INT 0
39671: PUSH
39672: LD_INT 2
39674: NEG
39675: PUSH
39676: EMPTY
39677: LIST
39678: LIST
39679: PUSH
39680: LD_INT 1
39682: PUSH
39683: LD_INT 1
39685: NEG
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: PUSH
39691: LD_INT 2
39693: PUSH
39694: LD_INT 1
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: PUSH
39701: LD_INT 2
39703: PUSH
39704: LD_INT 2
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: PUSH
39711: LD_INT 1
39713: PUSH
39714: LD_INT 2
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: LD_INT 0
39723: PUSH
39724: LD_INT 2
39726: PUSH
39727: EMPTY
39728: LIST
39729: LIST
39730: PUSH
39731: LD_INT 1
39733: NEG
39734: PUSH
39735: LD_INT 1
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: PUSH
39742: LD_INT 2
39744: NEG
39745: PUSH
39746: LD_INT 0
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: PUSH
39753: LD_INT 2
39755: NEG
39756: PUSH
39757: LD_INT 1
39759: NEG
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: PUSH
39765: LD_INT 1
39767: NEG
39768: PUSH
39769: LD_INT 3
39771: NEG
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: PUSH
39777: LD_INT 1
39779: PUSH
39780: LD_INT 2
39782: NEG
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: PUSH
39788: LD_INT 3
39790: PUSH
39791: LD_INT 2
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: PUSH
39798: LD_INT 2
39800: PUSH
39801: LD_INT 3
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: PUSH
39808: LD_INT 2
39810: NEG
39811: PUSH
39812: LD_INT 1
39814: PUSH
39815: EMPTY
39816: LIST
39817: LIST
39818: PUSH
39819: LD_INT 3
39821: NEG
39822: PUSH
39823: LD_INT 1
39825: NEG
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: LIST
39835: LIST
39836: LIST
39837: LIST
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: LIST
39843: LIST
39844: LIST
39845: LIST
39846: LIST
39847: LIST
39848: LIST
39849: LIST
39850: LIST
39851: LIST
39852: LIST
39853: LIST
39854: LIST
39855: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39856: LD_ADDR_VAR 0 33
39860: PUSH
39861: LD_INT 0
39863: PUSH
39864: LD_INT 0
39866: PUSH
39867: EMPTY
39868: LIST
39869: LIST
39870: PUSH
39871: LD_INT 0
39873: PUSH
39874: LD_INT 1
39876: NEG
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: LD_INT 1
39884: PUSH
39885: LD_INT 0
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: PUSH
39892: LD_INT 1
39894: PUSH
39895: LD_INT 1
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: PUSH
39902: LD_INT 0
39904: PUSH
39905: LD_INT 1
39907: PUSH
39908: EMPTY
39909: LIST
39910: LIST
39911: PUSH
39912: LD_INT 1
39914: NEG
39915: PUSH
39916: LD_INT 0
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: PUSH
39923: LD_INT 1
39925: NEG
39926: PUSH
39927: LD_INT 1
39929: NEG
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: PUSH
39935: LD_INT 1
39937: NEG
39938: PUSH
39939: LD_INT 2
39941: NEG
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: PUSH
39947: LD_INT 1
39949: PUSH
39950: LD_INT 1
39952: NEG
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: PUSH
39958: LD_INT 2
39960: PUSH
39961: LD_INT 0
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: PUSH
39968: LD_INT 2
39970: PUSH
39971: LD_INT 1
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: PUSH
39978: LD_INT 1
39980: PUSH
39981: LD_INT 2
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: LD_INT 0
39990: PUSH
39991: LD_INT 2
39993: PUSH
39994: EMPTY
39995: LIST
39996: LIST
39997: PUSH
39998: LD_INT 1
40000: NEG
40001: PUSH
40002: LD_INT 1
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: PUSH
40009: LD_INT 2
40011: NEG
40012: PUSH
40013: LD_INT 0
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: PUSH
40020: LD_INT 2
40022: NEG
40023: PUSH
40024: LD_INT 1
40026: NEG
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: PUSH
40032: LD_INT 2
40034: NEG
40035: PUSH
40036: LD_INT 2
40038: NEG
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: PUSH
40044: LD_INT 2
40046: NEG
40047: PUSH
40048: LD_INT 3
40050: NEG
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: PUSH
40056: LD_INT 2
40058: PUSH
40059: LD_INT 1
40061: NEG
40062: PUSH
40063: EMPTY
40064: LIST
40065: LIST
40066: PUSH
40067: LD_INT 3
40069: PUSH
40070: LD_INT 1
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PUSH
40077: LD_INT 1
40079: PUSH
40080: LD_INT 3
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: PUSH
40087: LD_INT 1
40089: NEG
40090: PUSH
40091: LD_INT 2
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: LD_INT 3
40100: NEG
40101: PUSH
40102: LD_INT 2
40104: NEG
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: LIST
40114: LIST
40115: LIST
40116: LIST
40117: LIST
40118: LIST
40119: LIST
40120: LIST
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: LIST
40126: LIST
40127: LIST
40128: LIST
40129: LIST
40130: LIST
40131: LIST
40132: LIST
40133: LIST
40134: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40135: LD_ADDR_VAR 0 34
40139: PUSH
40140: LD_INT 0
40142: PUSH
40143: LD_INT 0
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: LD_INT 0
40152: PUSH
40153: LD_INT 1
40155: NEG
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: LD_INT 1
40163: PUSH
40164: LD_INT 0
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: PUSH
40171: LD_INT 1
40173: PUSH
40174: LD_INT 1
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: PUSH
40181: LD_INT 0
40183: PUSH
40184: LD_INT 1
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: PUSH
40191: LD_INT 1
40193: NEG
40194: PUSH
40195: LD_INT 0
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PUSH
40202: LD_INT 1
40204: NEG
40205: PUSH
40206: LD_INT 1
40208: NEG
40209: PUSH
40210: EMPTY
40211: LIST
40212: LIST
40213: PUSH
40214: LD_INT 1
40216: NEG
40217: PUSH
40218: LD_INT 2
40220: NEG
40221: PUSH
40222: EMPTY
40223: LIST
40224: LIST
40225: PUSH
40226: LD_INT 0
40228: PUSH
40229: LD_INT 2
40231: NEG
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: PUSH
40237: LD_INT 1
40239: PUSH
40240: LD_INT 1
40242: NEG
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PUSH
40248: LD_INT 2
40250: PUSH
40251: LD_INT 1
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: PUSH
40258: LD_INT 2
40260: PUSH
40261: LD_INT 2
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: PUSH
40268: LD_INT 1
40270: PUSH
40271: LD_INT 2
40273: PUSH
40274: EMPTY
40275: LIST
40276: LIST
40277: PUSH
40278: LD_INT 1
40280: NEG
40281: PUSH
40282: LD_INT 1
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: PUSH
40289: LD_INT 2
40291: NEG
40292: PUSH
40293: LD_INT 0
40295: PUSH
40296: EMPTY
40297: LIST
40298: LIST
40299: PUSH
40300: LD_INT 2
40302: NEG
40303: PUSH
40304: LD_INT 1
40306: NEG
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 2
40314: NEG
40315: PUSH
40316: LD_INT 2
40318: NEG
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 1
40326: NEG
40327: PUSH
40328: LD_INT 3
40330: NEG
40331: PUSH
40332: EMPTY
40333: LIST
40334: LIST
40335: PUSH
40336: LD_INT 1
40338: PUSH
40339: LD_INT 2
40341: NEG
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: PUSH
40347: LD_INT 3
40349: PUSH
40350: LD_INT 2
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PUSH
40357: LD_INT 2
40359: PUSH
40360: LD_INT 3
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: PUSH
40367: LD_INT 2
40369: NEG
40370: PUSH
40371: LD_INT 1
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: PUSH
40378: LD_INT 3
40380: NEG
40381: PUSH
40382: LD_INT 1
40384: NEG
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: PUSH
40390: EMPTY
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: LIST
40407: LIST
40408: LIST
40409: LIST
40410: LIST
40411: LIST
40412: LIST
40413: LIST
40414: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40415: LD_ADDR_VAR 0 35
40419: PUSH
40420: LD_INT 0
40422: PUSH
40423: LD_INT 0
40425: PUSH
40426: EMPTY
40427: LIST
40428: LIST
40429: PUSH
40430: LD_INT 0
40432: PUSH
40433: LD_INT 1
40435: NEG
40436: PUSH
40437: EMPTY
40438: LIST
40439: LIST
40440: PUSH
40441: LD_INT 1
40443: PUSH
40444: LD_INT 0
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: PUSH
40451: LD_INT 1
40453: PUSH
40454: LD_INT 1
40456: PUSH
40457: EMPTY
40458: LIST
40459: LIST
40460: PUSH
40461: LD_INT 0
40463: PUSH
40464: LD_INT 1
40466: PUSH
40467: EMPTY
40468: LIST
40469: LIST
40470: PUSH
40471: LD_INT 1
40473: NEG
40474: PUSH
40475: LD_INT 0
40477: PUSH
40478: EMPTY
40479: LIST
40480: LIST
40481: PUSH
40482: LD_INT 1
40484: NEG
40485: PUSH
40486: LD_INT 1
40488: NEG
40489: PUSH
40490: EMPTY
40491: LIST
40492: LIST
40493: PUSH
40494: LD_INT 2
40496: PUSH
40497: LD_INT 1
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: LD_INT 2
40506: NEG
40507: PUSH
40508: LD_INT 1
40510: NEG
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: LIST
40520: LIST
40521: LIST
40522: LIST
40523: LIST
40524: LIST
40525: LIST
40526: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40527: LD_ADDR_VAR 0 36
40531: PUSH
40532: LD_INT 0
40534: PUSH
40535: LD_INT 0
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: PUSH
40542: LD_INT 0
40544: PUSH
40545: LD_INT 1
40547: NEG
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: PUSH
40553: LD_INT 1
40555: PUSH
40556: LD_INT 0
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: LD_INT 1
40565: PUSH
40566: LD_INT 1
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: PUSH
40573: LD_INT 0
40575: PUSH
40576: LD_INT 1
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PUSH
40583: LD_INT 1
40585: NEG
40586: PUSH
40587: LD_INT 0
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: PUSH
40594: LD_INT 1
40596: NEG
40597: PUSH
40598: LD_INT 1
40600: NEG
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: PUSH
40606: LD_INT 1
40608: NEG
40609: PUSH
40610: LD_INT 2
40612: NEG
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 1
40620: PUSH
40621: LD_INT 2
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40639: LD_ADDR_VAR 0 37
40643: PUSH
40644: LD_INT 0
40646: PUSH
40647: LD_INT 0
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 0
40656: PUSH
40657: LD_INT 1
40659: NEG
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: LD_INT 1
40667: PUSH
40668: LD_INT 0
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: PUSH
40675: LD_INT 1
40677: PUSH
40678: LD_INT 1
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: PUSH
40685: LD_INT 0
40687: PUSH
40688: LD_INT 1
40690: PUSH
40691: EMPTY
40692: LIST
40693: LIST
40694: PUSH
40695: LD_INT 1
40697: NEG
40698: PUSH
40699: LD_INT 0
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: PUSH
40706: LD_INT 1
40708: NEG
40709: PUSH
40710: LD_INT 1
40712: NEG
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: PUSH
40718: LD_INT 1
40720: PUSH
40721: LD_INT 1
40723: NEG
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: PUSH
40729: LD_INT 1
40731: NEG
40732: PUSH
40733: LD_INT 1
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: LIST
40744: LIST
40745: LIST
40746: LIST
40747: LIST
40748: LIST
40749: LIST
40750: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40751: LD_ADDR_VAR 0 38
40755: PUSH
40756: LD_INT 0
40758: PUSH
40759: LD_INT 0
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: PUSH
40766: LD_INT 0
40768: PUSH
40769: LD_INT 1
40771: NEG
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: PUSH
40777: LD_INT 1
40779: PUSH
40780: LD_INT 0
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: PUSH
40787: LD_INT 1
40789: PUSH
40790: LD_INT 1
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: PUSH
40797: LD_INT 0
40799: PUSH
40800: LD_INT 1
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: PUSH
40807: LD_INT 1
40809: NEG
40810: PUSH
40811: LD_INT 0
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: PUSH
40818: LD_INT 1
40820: NEG
40821: PUSH
40822: LD_INT 1
40824: NEG
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: PUSH
40830: LD_INT 2
40832: PUSH
40833: LD_INT 1
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 2
40842: NEG
40843: PUSH
40844: LD_INT 1
40846: NEG
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: LIST
40856: LIST
40857: LIST
40858: LIST
40859: LIST
40860: LIST
40861: LIST
40862: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40863: LD_ADDR_VAR 0 39
40867: PUSH
40868: LD_INT 0
40870: PUSH
40871: LD_INT 0
40873: PUSH
40874: EMPTY
40875: LIST
40876: LIST
40877: PUSH
40878: LD_INT 0
40880: PUSH
40881: LD_INT 1
40883: NEG
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: LD_INT 1
40891: PUSH
40892: LD_INT 0
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: PUSH
40899: LD_INT 1
40901: PUSH
40902: LD_INT 1
40904: PUSH
40905: EMPTY
40906: LIST
40907: LIST
40908: PUSH
40909: LD_INT 0
40911: PUSH
40912: LD_INT 1
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: PUSH
40919: LD_INT 1
40921: NEG
40922: PUSH
40923: LD_INT 0
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: PUSH
40930: LD_INT 1
40932: NEG
40933: PUSH
40934: LD_INT 1
40936: NEG
40937: PUSH
40938: EMPTY
40939: LIST
40940: LIST
40941: PUSH
40942: LD_INT 1
40944: NEG
40945: PUSH
40946: LD_INT 2
40948: NEG
40949: PUSH
40950: EMPTY
40951: LIST
40952: LIST
40953: PUSH
40954: LD_INT 1
40956: PUSH
40957: LD_INT 2
40959: PUSH
40960: EMPTY
40961: LIST
40962: LIST
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40975: LD_ADDR_VAR 0 40
40979: PUSH
40980: LD_INT 0
40982: PUSH
40983: LD_INT 0
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: PUSH
40990: LD_INT 0
40992: PUSH
40993: LD_INT 1
40995: NEG
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: PUSH
41001: LD_INT 1
41003: PUSH
41004: LD_INT 0
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: PUSH
41011: LD_INT 1
41013: PUSH
41014: LD_INT 1
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: PUSH
41021: LD_INT 0
41023: PUSH
41024: LD_INT 1
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: PUSH
41031: LD_INT 1
41033: NEG
41034: PUSH
41035: LD_INT 0
41037: PUSH
41038: EMPTY
41039: LIST
41040: LIST
41041: PUSH
41042: LD_INT 1
41044: NEG
41045: PUSH
41046: LD_INT 1
41048: NEG
41049: PUSH
41050: EMPTY
41051: LIST
41052: LIST
41053: PUSH
41054: LD_INT 1
41056: PUSH
41057: LD_INT 1
41059: NEG
41060: PUSH
41061: EMPTY
41062: LIST
41063: LIST
41064: PUSH
41065: LD_INT 1
41067: NEG
41068: PUSH
41069: LD_INT 1
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: LIST
41080: LIST
41081: LIST
41082: LIST
41083: LIST
41084: LIST
41085: LIST
41086: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41087: LD_ADDR_VAR 0 41
41091: PUSH
41092: LD_INT 0
41094: PUSH
41095: LD_INT 0
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: PUSH
41102: LD_INT 0
41104: PUSH
41105: LD_INT 1
41107: NEG
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: PUSH
41113: LD_INT 1
41115: PUSH
41116: LD_INT 0
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: PUSH
41123: LD_INT 1
41125: PUSH
41126: LD_INT 1
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PUSH
41133: LD_INT 0
41135: PUSH
41136: LD_INT 1
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: PUSH
41143: LD_INT 1
41145: NEG
41146: PUSH
41147: LD_INT 0
41149: PUSH
41150: EMPTY
41151: LIST
41152: LIST
41153: PUSH
41154: LD_INT 1
41156: NEG
41157: PUSH
41158: LD_INT 1
41160: NEG
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: PUSH
41166: LD_INT 1
41168: NEG
41169: PUSH
41170: LD_INT 2
41172: NEG
41173: PUSH
41174: EMPTY
41175: LIST
41176: LIST
41177: PUSH
41178: LD_INT 1
41180: PUSH
41181: LD_INT 1
41183: NEG
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PUSH
41189: LD_INT 2
41191: PUSH
41192: LD_INT 0
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PUSH
41199: LD_INT 2
41201: PUSH
41202: LD_INT 1
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: PUSH
41209: LD_INT 2
41211: PUSH
41212: LD_INT 2
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: LD_INT 1
41221: PUSH
41222: LD_INT 2
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: PUSH
41229: LD_INT 1
41231: NEG
41232: PUSH
41233: LD_INT 1
41235: PUSH
41236: EMPTY
41237: LIST
41238: LIST
41239: PUSH
41240: LD_INT 2
41242: NEG
41243: PUSH
41244: LD_INT 0
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: PUSH
41251: LD_INT 2
41253: NEG
41254: PUSH
41255: LD_INT 1
41257: NEG
41258: PUSH
41259: EMPTY
41260: LIST
41261: LIST
41262: PUSH
41263: LD_INT 2
41265: NEG
41266: PUSH
41267: LD_INT 2
41269: NEG
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: PUSH
41275: LD_INT 2
41277: NEG
41278: PUSH
41279: LD_INT 3
41281: NEG
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PUSH
41287: LD_INT 2
41289: PUSH
41290: LD_INT 1
41292: NEG
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 3
41300: PUSH
41301: LD_INT 0
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: PUSH
41308: LD_INT 3
41310: PUSH
41311: LD_INT 1
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 3
41320: PUSH
41321: LD_INT 2
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: PUSH
41328: LD_INT 3
41330: PUSH
41331: LD_INT 3
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: LD_INT 2
41340: PUSH
41341: LD_INT 3
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: PUSH
41348: LD_INT 2
41350: NEG
41351: PUSH
41352: LD_INT 1
41354: PUSH
41355: EMPTY
41356: LIST
41357: LIST
41358: PUSH
41359: LD_INT 3
41361: NEG
41362: PUSH
41363: LD_INT 0
41365: PUSH
41366: EMPTY
41367: LIST
41368: LIST
41369: PUSH
41370: LD_INT 3
41372: NEG
41373: PUSH
41374: LD_INT 1
41376: NEG
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: PUSH
41382: LD_INT 3
41384: NEG
41385: PUSH
41386: LD_INT 2
41388: NEG
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: LD_INT 3
41396: NEG
41397: PUSH
41398: LD_INT 3
41400: NEG
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: LIST
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41437: LD_ADDR_VAR 0 42
41441: PUSH
41442: LD_INT 0
41444: PUSH
41445: LD_INT 0
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: PUSH
41452: LD_INT 0
41454: PUSH
41455: LD_INT 1
41457: NEG
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 1
41465: PUSH
41466: LD_INT 0
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: LD_INT 1
41475: PUSH
41476: LD_INT 1
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: LD_INT 0
41485: PUSH
41486: LD_INT 1
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: LD_INT 1
41495: NEG
41496: PUSH
41497: LD_INT 0
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 1
41506: NEG
41507: PUSH
41508: LD_INT 1
41510: NEG
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: PUSH
41516: LD_INT 1
41518: NEG
41519: PUSH
41520: LD_INT 2
41522: NEG
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: PUSH
41528: LD_INT 0
41530: PUSH
41531: LD_INT 2
41533: NEG
41534: PUSH
41535: EMPTY
41536: LIST
41537: LIST
41538: PUSH
41539: LD_INT 1
41541: PUSH
41542: LD_INT 1
41544: NEG
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 2
41552: PUSH
41553: LD_INT 1
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 2
41562: PUSH
41563: LD_INT 2
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 1
41572: PUSH
41573: LD_INT 2
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 0
41582: PUSH
41583: LD_INT 2
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: PUSH
41590: LD_INT 1
41592: NEG
41593: PUSH
41594: LD_INT 1
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: PUSH
41601: LD_INT 2
41603: NEG
41604: PUSH
41605: LD_INT 1
41607: NEG
41608: PUSH
41609: EMPTY
41610: LIST
41611: LIST
41612: PUSH
41613: LD_INT 2
41615: NEG
41616: PUSH
41617: LD_INT 2
41619: NEG
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: PUSH
41625: LD_INT 2
41627: NEG
41628: PUSH
41629: LD_INT 3
41631: NEG
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 1
41639: NEG
41640: PUSH
41641: LD_INT 3
41643: NEG
41644: PUSH
41645: EMPTY
41646: LIST
41647: LIST
41648: PUSH
41649: LD_INT 0
41651: PUSH
41652: LD_INT 3
41654: NEG
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: PUSH
41660: LD_INT 1
41662: PUSH
41663: LD_INT 2
41665: NEG
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: PUSH
41671: LD_INT 3
41673: PUSH
41674: LD_INT 2
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PUSH
41681: LD_INT 3
41683: PUSH
41684: LD_INT 3
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: LD_INT 2
41693: PUSH
41694: LD_INT 3
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: PUSH
41701: LD_INT 1
41703: PUSH
41704: LD_INT 3
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: LD_INT 0
41713: PUSH
41714: LD_INT 3
41716: PUSH
41717: EMPTY
41718: LIST
41719: LIST
41720: PUSH
41721: LD_INT 1
41723: NEG
41724: PUSH
41725: LD_INT 2
41727: PUSH
41728: EMPTY
41729: LIST
41730: LIST
41731: PUSH
41732: LD_INT 3
41734: NEG
41735: PUSH
41736: LD_INT 2
41738: NEG
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: PUSH
41744: LD_INT 3
41746: NEG
41747: PUSH
41748: LD_INT 3
41750: NEG
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: LIST
41760: LIST
41761: LIST
41762: LIST
41763: LIST
41764: LIST
41765: LIST
41766: LIST
41767: LIST
41768: LIST
41769: LIST
41770: LIST
41771: LIST
41772: LIST
41773: LIST
41774: LIST
41775: LIST
41776: LIST
41777: LIST
41778: LIST
41779: LIST
41780: LIST
41781: LIST
41782: LIST
41783: LIST
41784: LIST
41785: LIST
41786: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41787: LD_ADDR_VAR 0 43
41791: PUSH
41792: LD_INT 0
41794: PUSH
41795: LD_INT 0
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 0
41804: PUSH
41805: LD_INT 1
41807: NEG
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: PUSH
41813: LD_INT 1
41815: PUSH
41816: LD_INT 0
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: PUSH
41823: LD_INT 1
41825: PUSH
41826: LD_INT 1
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: PUSH
41833: LD_INT 0
41835: PUSH
41836: LD_INT 1
41838: PUSH
41839: EMPTY
41840: LIST
41841: LIST
41842: PUSH
41843: LD_INT 1
41845: NEG
41846: PUSH
41847: LD_INT 0
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: PUSH
41854: LD_INT 1
41856: NEG
41857: PUSH
41858: LD_INT 1
41860: NEG
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: PUSH
41866: LD_INT 1
41868: NEG
41869: PUSH
41870: LD_INT 2
41872: NEG
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: PUSH
41878: LD_INT 0
41880: PUSH
41881: LD_INT 2
41883: NEG
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: PUSH
41889: LD_INT 1
41891: PUSH
41892: LD_INT 1
41894: NEG
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: PUSH
41900: LD_INT 2
41902: PUSH
41903: LD_INT 0
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PUSH
41910: LD_INT 2
41912: PUSH
41913: LD_INT 1
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: LD_INT 1
41922: PUSH
41923: LD_INT 2
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: LD_INT 0
41932: PUSH
41933: LD_INT 2
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: PUSH
41940: LD_INT 1
41942: NEG
41943: PUSH
41944: LD_INT 1
41946: PUSH
41947: EMPTY
41948: LIST
41949: LIST
41950: PUSH
41951: LD_INT 2
41953: NEG
41954: PUSH
41955: LD_INT 0
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PUSH
41962: LD_INT 2
41964: NEG
41965: PUSH
41966: LD_INT 1
41968: NEG
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: LD_INT 1
41976: NEG
41977: PUSH
41978: LD_INT 3
41980: NEG
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: LD_INT 0
41988: PUSH
41989: LD_INT 3
41991: NEG
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: PUSH
41997: LD_INT 1
41999: PUSH
42000: LD_INT 2
42002: NEG
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: PUSH
42008: LD_INT 2
42010: PUSH
42011: LD_INT 1
42013: NEG
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: PUSH
42019: LD_INT 3
42021: PUSH
42022: LD_INT 0
42024: PUSH
42025: EMPTY
42026: LIST
42027: LIST
42028: PUSH
42029: LD_INT 3
42031: PUSH
42032: LD_INT 1
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: LD_INT 1
42041: PUSH
42042: LD_INT 3
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PUSH
42049: LD_INT 0
42051: PUSH
42052: LD_INT 3
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: PUSH
42059: LD_INT 1
42061: NEG
42062: PUSH
42063: LD_INT 2
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: PUSH
42070: LD_INT 2
42072: NEG
42073: PUSH
42074: LD_INT 1
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: PUSH
42081: LD_INT 3
42083: NEG
42084: PUSH
42085: LD_INT 0
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: PUSH
42092: LD_INT 3
42094: NEG
42095: PUSH
42096: LD_INT 1
42098: NEG
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: LIST
42108: LIST
42109: LIST
42110: LIST
42111: LIST
42112: LIST
42113: LIST
42114: LIST
42115: LIST
42116: LIST
42117: LIST
42118: LIST
42119: LIST
42120: LIST
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: LIST
42132: LIST
42133: LIST
42134: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42135: LD_ADDR_VAR 0 44
42139: PUSH
42140: LD_INT 0
42142: PUSH
42143: LD_INT 0
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PUSH
42150: LD_INT 0
42152: PUSH
42153: LD_INT 1
42155: NEG
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: LD_INT 1
42163: PUSH
42164: LD_INT 0
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: PUSH
42171: LD_INT 1
42173: PUSH
42174: LD_INT 1
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 0
42183: PUSH
42184: LD_INT 1
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: LD_INT 1
42193: NEG
42194: PUSH
42195: LD_INT 0
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: LD_INT 1
42204: NEG
42205: PUSH
42206: LD_INT 1
42208: NEG
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: PUSH
42214: LD_INT 1
42216: NEG
42217: PUSH
42218: LD_INT 2
42220: NEG
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: PUSH
42226: LD_INT 1
42228: PUSH
42229: LD_INT 1
42231: NEG
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: LD_INT 2
42239: PUSH
42240: LD_INT 0
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: PUSH
42247: LD_INT 2
42249: PUSH
42250: LD_INT 1
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: LD_INT 2
42259: PUSH
42260: LD_INT 2
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: PUSH
42267: LD_INT 1
42269: PUSH
42270: LD_INT 2
42272: PUSH
42273: EMPTY
42274: LIST
42275: LIST
42276: PUSH
42277: LD_INT 1
42279: NEG
42280: PUSH
42281: LD_INT 1
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: PUSH
42288: LD_INT 2
42290: NEG
42291: PUSH
42292: LD_INT 0
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 2
42301: NEG
42302: PUSH
42303: LD_INT 1
42305: NEG
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: LD_INT 2
42313: NEG
42314: PUSH
42315: LD_INT 2
42317: NEG
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: PUSH
42323: LD_INT 2
42325: NEG
42326: PUSH
42327: LD_INT 3
42329: NEG
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PUSH
42335: LD_INT 2
42337: PUSH
42338: LD_INT 1
42340: NEG
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 3
42348: PUSH
42349: LD_INT 0
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 3
42358: PUSH
42359: LD_INT 1
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: PUSH
42366: LD_INT 3
42368: PUSH
42369: LD_INT 2
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PUSH
42376: LD_INT 3
42378: PUSH
42379: LD_INT 3
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: PUSH
42386: LD_INT 2
42388: PUSH
42389: LD_INT 3
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: PUSH
42396: LD_INT 2
42398: NEG
42399: PUSH
42400: LD_INT 1
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PUSH
42407: LD_INT 3
42409: NEG
42410: PUSH
42411: LD_INT 0
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: PUSH
42418: LD_INT 3
42420: NEG
42421: PUSH
42422: LD_INT 1
42424: NEG
42425: PUSH
42426: EMPTY
42427: LIST
42428: LIST
42429: PUSH
42430: LD_INT 3
42432: NEG
42433: PUSH
42434: LD_INT 2
42436: NEG
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PUSH
42442: LD_INT 3
42444: NEG
42445: PUSH
42446: LD_INT 3
42448: NEG
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: LIST
42474: LIST
42475: LIST
42476: LIST
42477: LIST
42478: LIST
42479: LIST
42480: LIST
42481: LIST
42482: LIST
42483: LIST
42484: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42485: LD_ADDR_VAR 0 45
42489: PUSH
42490: LD_INT 0
42492: PUSH
42493: LD_INT 0
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: LD_INT 0
42502: PUSH
42503: LD_INT 1
42505: NEG
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: LD_INT 1
42513: PUSH
42514: LD_INT 0
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 1
42523: PUSH
42524: LD_INT 1
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: LD_INT 0
42533: PUSH
42534: LD_INT 1
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: PUSH
42541: LD_INT 1
42543: NEG
42544: PUSH
42545: LD_INT 0
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: LD_INT 1
42554: NEG
42555: PUSH
42556: LD_INT 1
42558: NEG
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: PUSH
42564: LD_INT 1
42566: NEG
42567: PUSH
42568: LD_INT 2
42570: NEG
42571: PUSH
42572: EMPTY
42573: LIST
42574: LIST
42575: PUSH
42576: LD_INT 0
42578: PUSH
42579: LD_INT 2
42581: NEG
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: LD_INT 1
42589: PUSH
42590: LD_INT 1
42592: NEG
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 2
42600: PUSH
42601: LD_INT 1
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: PUSH
42608: LD_INT 2
42610: PUSH
42611: LD_INT 2
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 1
42620: PUSH
42621: LD_INT 2
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: PUSH
42628: LD_INT 0
42630: PUSH
42631: LD_INT 2
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: LD_INT 1
42640: NEG
42641: PUSH
42642: LD_INT 1
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: PUSH
42649: LD_INT 2
42651: NEG
42652: PUSH
42653: LD_INT 1
42655: NEG
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 2
42663: NEG
42664: PUSH
42665: LD_INT 2
42667: NEG
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: LD_INT 2
42675: NEG
42676: PUSH
42677: LD_INT 3
42679: NEG
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: PUSH
42685: LD_INT 1
42687: NEG
42688: PUSH
42689: LD_INT 3
42691: NEG
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: PUSH
42697: LD_INT 0
42699: PUSH
42700: LD_INT 3
42702: NEG
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: PUSH
42708: LD_INT 1
42710: PUSH
42711: LD_INT 2
42713: NEG
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: LD_INT 3
42721: PUSH
42722: LD_INT 2
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: PUSH
42729: LD_INT 3
42731: PUSH
42732: LD_INT 3
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: PUSH
42739: LD_INT 2
42741: PUSH
42742: LD_INT 3
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: PUSH
42749: LD_INT 1
42751: PUSH
42752: LD_INT 3
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: LD_INT 0
42761: PUSH
42762: LD_INT 3
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: LD_INT 1
42771: NEG
42772: PUSH
42773: LD_INT 2
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: PUSH
42780: LD_INT 3
42782: NEG
42783: PUSH
42784: LD_INT 2
42786: NEG
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: PUSH
42792: LD_INT 3
42794: NEG
42795: PUSH
42796: LD_INT 3
42798: NEG
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: LIST
42808: LIST
42809: LIST
42810: LIST
42811: LIST
42812: LIST
42813: LIST
42814: LIST
42815: LIST
42816: LIST
42817: LIST
42818: LIST
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42835: LD_ADDR_VAR 0 46
42839: PUSH
42840: LD_INT 0
42842: PUSH
42843: LD_INT 0
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: PUSH
42850: LD_INT 0
42852: PUSH
42853: LD_INT 1
42855: NEG
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: LD_INT 1
42863: PUSH
42864: LD_INT 0
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: PUSH
42871: LD_INT 1
42873: PUSH
42874: LD_INT 1
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: PUSH
42881: LD_INT 0
42883: PUSH
42884: LD_INT 1
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: LD_INT 1
42893: NEG
42894: PUSH
42895: LD_INT 0
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: LD_INT 1
42904: NEG
42905: PUSH
42906: LD_INT 1
42908: NEG
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: PUSH
42914: LD_INT 1
42916: NEG
42917: PUSH
42918: LD_INT 2
42920: NEG
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: PUSH
42926: LD_INT 0
42928: PUSH
42929: LD_INT 2
42931: NEG
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: LD_INT 1
42939: PUSH
42940: LD_INT 1
42942: NEG
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 2
42950: PUSH
42951: LD_INT 0
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 2
42960: PUSH
42961: LD_INT 1
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: LD_INT 1
42970: PUSH
42971: LD_INT 2
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 0
42980: PUSH
42981: LD_INT 2
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: LD_INT 1
42990: NEG
42991: PUSH
42992: LD_INT 1
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: LD_INT 2
43001: NEG
43002: PUSH
43003: LD_INT 0
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: LD_INT 2
43012: NEG
43013: PUSH
43014: LD_INT 1
43016: NEG
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: PUSH
43022: LD_INT 1
43024: NEG
43025: PUSH
43026: LD_INT 3
43028: NEG
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: LD_INT 0
43036: PUSH
43037: LD_INT 3
43039: NEG
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: PUSH
43045: LD_INT 1
43047: PUSH
43048: LD_INT 2
43050: NEG
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: PUSH
43056: LD_INT 2
43058: PUSH
43059: LD_INT 1
43061: NEG
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: LD_INT 3
43069: PUSH
43070: LD_INT 0
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: PUSH
43077: LD_INT 3
43079: PUSH
43080: LD_INT 1
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: PUSH
43087: LD_INT 1
43089: PUSH
43090: LD_INT 3
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: PUSH
43097: LD_INT 0
43099: PUSH
43100: LD_INT 3
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: LD_INT 1
43109: NEG
43110: PUSH
43111: LD_INT 2
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: LD_INT 2
43120: NEG
43121: PUSH
43122: LD_INT 1
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: LD_INT 3
43131: NEG
43132: PUSH
43133: LD_INT 0
43135: PUSH
43136: EMPTY
43137: LIST
43138: LIST
43139: PUSH
43140: LD_INT 3
43142: NEG
43143: PUSH
43144: LD_INT 1
43146: NEG
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: LIST
43156: LIST
43157: LIST
43158: LIST
43159: LIST
43160: LIST
43161: LIST
43162: LIST
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: LIST
43173: LIST
43174: LIST
43175: LIST
43176: LIST
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43183: LD_ADDR_VAR 0 47
43187: PUSH
43188: LD_INT 0
43190: PUSH
43191: LD_INT 0
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: LD_INT 0
43200: PUSH
43201: LD_INT 1
43203: NEG
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: PUSH
43209: LD_INT 1
43211: PUSH
43212: LD_INT 0
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: PUSH
43219: LD_INT 1
43221: PUSH
43222: LD_INT 1
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: PUSH
43229: LD_INT 0
43231: PUSH
43232: LD_INT 1
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: LD_INT 1
43241: NEG
43242: PUSH
43243: LD_INT 0
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: LD_INT 1
43252: NEG
43253: PUSH
43254: LD_INT 1
43256: NEG
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PUSH
43262: LD_INT 1
43264: NEG
43265: PUSH
43266: LD_INT 2
43268: NEG
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: LD_INT 0
43276: PUSH
43277: LD_INT 2
43279: NEG
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PUSH
43285: LD_INT 1
43287: PUSH
43288: LD_INT 1
43290: NEG
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: PUSH
43296: LD_INT 2
43298: NEG
43299: PUSH
43300: LD_INT 1
43302: NEG
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 2
43310: NEG
43311: PUSH
43312: LD_INT 2
43314: NEG
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: LIST
43324: LIST
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43334: LD_ADDR_VAR 0 48
43338: PUSH
43339: LD_INT 0
43341: PUSH
43342: LD_INT 0
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: LD_INT 0
43351: PUSH
43352: LD_INT 1
43354: NEG
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: LD_INT 1
43362: PUSH
43363: LD_INT 0
43365: PUSH
43366: EMPTY
43367: LIST
43368: LIST
43369: PUSH
43370: LD_INT 1
43372: PUSH
43373: LD_INT 1
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: PUSH
43380: LD_INT 0
43382: PUSH
43383: LD_INT 1
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: LD_INT 1
43392: NEG
43393: PUSH
43394: LD_INT 0
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: LD_INT 1
43403: NEG
43404: PUSH
43405: LD_INT 1
43407: NEG
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: LD_INT 1
43415: NEG
43416: PUSH
43417: LD_INT 2
43419: NEG
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: LD_INT 0
43427: PUSH
43428: LD_INT 2
43430: NEG
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 1
43438: PUSH
43439: LD_INT 1
43441: NEG
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: LD_INT 2
43449: PUSH
43450: LD_INT 0
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: LD_INT 2
43459: PUSH
43460: LD_INT 1
43462: PUSH
43463: EMPTY
43464: LIST
43465: LIST
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: LIST
43480: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43481: LD_ADDR_VAR 0 49
43485: PUSH
43486: LD_INT 0
43488: PUSH
43489: LD_INT 0
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: LD_INT 0
43498: PUSH
43499: LD_INT 1
43501: NEG
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: PUSH
43507: LD_INT 1
43509: PUSH
43510: LD_INT 0
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 1
43519: PUSH
43520: LD_INT 1
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 0
43529: PUSH
43530: LD_INT 1
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: LD_INT 1
43539: NEG
43540: PUSH
43541: LD_INT 0
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: LD_INT 1
43550: NEG
43551: PUSH
43552: LD_INT 1
43554: NEG
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: LD_INT 1
43562: PUSH
43563: LD_INT 1
43565: NEG
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: LD_INT 2
43573: PUSH
43574: LD_INT 0
43576: PUSH
43577: EMPTY
43578: LIST
43579: LIST
43580: PUSH
43581: LD_INT 2
43583: PUSH
43584: LD_INT 1
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: PUSH
43591: LD_INT 2
43593: PUSH
43594: LD_INT 2
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: LD_INT 1
43603: PUSH
43604: LD_INT 2
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43625: LD_ADDR_VAR 0 50
43629: PUSH
43630: LD_INT 0
43632: PUSH
43633: LD_INT 0
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: PUSH
43640: LD_INT 0
43642: PUSH
43643: LD_INT 1
43645: NEG
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 1
43653: PUSH
43654: LD_INT 0
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: LD_INT 1
43663: PUSH
43664: LD_INT 1
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: LD_INT 0
43673: PUSH
43674: LD_INT 1
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 1
43683: NEG
43684: PUSH
43685: LD_INT 0
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 1
43694: NEG
43695: PUSH
43696: LD_INT 1
43698: NEG
43699: PUSH
43700: EMPTY
43701: LIST
43702: LIST
43703: PUSH
43704: LD_INT 2
43706: PUSH
43707: LD_INT 1
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PUSH
43714: LD_INT 2
43716: PUSH
43717: LD_INT 2
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: LD_INT 1
43726: PUSH
43727: LD_INT 2
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 0
43736: PUSH
43737: LD_INT 2
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_INT 1
43746: NEG
43747: PUSH
43748: LD_INT 1
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43769: LD_ADDR_VAR 0 51
43773: PUSH
43774: LD_INT 0
43776: PUSH
43777: LD_INT 0
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: LD_INT 0
43786: PUSH
43787: LD_INT 1
43789: NEG
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: PUSH
43795: LD_INT 1
43797: PUSH
43798: LD_INT 0
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: LD_INT 1
43807: PUSH
43808: LD_INT 1
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PUSH
43815: LD_INT 0
43817: PUSH
43818: LD_INT 1
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: LD_INT 1
43827: NEG
43828: PUSH
43829: LD_INT 0
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: PUSH
43836: LD_INT 1
43838: NEG
43839: PUSH
43840: LD_INT 1
43842: NEG
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: LD_INT 1
43850: PUSH
43851: LD_INT 2
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: LD_INT 0
43860: PUSH
43861: LD_INT 2
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: LD_INT 1
43870: NEG
43871: PUSH
43872: LD_INT 1
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PUSH
43879: LD_INT 2
43881: NEG
43882: PUSH
43883: LD_INT 0
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PUSH
43890: LD_INT 2
43892: NEG
43893: PUSH
43894: LD_INT 1
43896: NEG
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: LIST
43906: LIST
43907: LIST
43908: LIST
43909: LIST
43910: LIST
43911: LIST
43912: LIST
43913: LIST
43914: LIST
43915: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43916: LD_ADDR_VAR 0 52
43920: PUSH
43921: LD_INT 0
43923: PUSH
43924: LD_INT 0
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: PUSH
43931: LD_INT 0
43933: PUSH
43934: LD_INT 1
43936: NEG
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: PUSH
43942: LD_INT 1
43944: PUSH
43945: LD_INT 0
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: PUSH
43952: LD_INT 1
43954: PUSH
43955: LD_INT 1
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: PUSH
43962: LD_INT 0
43964: PUSH
43965: LD_INT 1
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: PUSH
43972: LD_INT 1
43974: NEG
43975: PUSH
43976: LD_INT 0
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: LD_INT 1
43985: NEG
43986: PUSH
43987: LD_INT 1
43989: NEG
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: PUSH
43995: LD_INT 1
43997: NEG
43998: PUSH
43999: LD_INT 2
44001: NEG
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: LD_INT 1
44009: NEG
44010: PUSH
44011: LD_INT 1
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 2
44020: NEG
44021: PUSH
44022: LD_INT 0
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: LD_INT 2
44031: NEG
44032: PUSH
44033: LD_INT 1
44035: NEG
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 2
44043: NEG
44044: PUSH
44045: LD_INT 2
44047: NEG
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: LIST
44057: LIST
44058: LIST
44059: LIST
44060: LIST
44061: LIST
44062: LIST
44063: LIST
44064: LIST
44065: LIST
44066: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44067: LD_ADDR_VAR 0 53
44071: PUSH
44072: LD_INT 0
44074: PUSH
44075: LD_INT 0
44077: PUSH
44078: EMPTY
44079: LIST
44080: LIST
44081: PUSH
44082: LD_INT 0
44084: PUSH
44085: LD_INT 1
44087: NEG
44088: PUSH
44089: EMPTY
44090: LIST
44091: LIST
44092: PUSH
44093: LD_INT 1
44095: PUSH
44096: LD_INT 0
44098: PUSH
44099: EMPTY
44100: LIST
44101: LIST
44102: PUSH
44103: LD_INT 1
44105: PUSH
44106: LD_INT 1
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PUSH
44113: LD_INT 0
44115: PUSH
44116: LD_INT 1
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: LD_INT 1
44125: NEG
44126: PUSH
44127: LD_INT 0
44129: PUSH
44130: EMPTY
44131: LIST
44132: LIST
44133: PUSH
44134: LD_INT 1
44136: NEG
44137: PUSH
44138: LD_INT 1
44140: NEG
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: LD_INT 1
44148: NEG
44149: PUSH
44150: LD_INT 2
44152: NEG
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: LD_INT 0
44160: PUSH
44161: LD_INT 2
44163: NEG
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: LD_INT 1
44171: PUSH
44172: LD_INT 1
44174: NEG
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 2
44182: PUSH
44183: LD_INT 0
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: PUSH
44190: LD_INT 2
44192: PUSH
44193: LD_INT 1
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_INT 2
44202: PUSH
44203: LD_INT 2
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: LD_INT 1
44212: PUSH
44213: LD_INT 2
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 0
44222: PUSH
44223: LD_INT 2
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PUSH
44230: LD_INT 1
44232: NEG
44233: PUSH
44234: LD_INT 1
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: LD_INT 2
44243: NEG
44244: PUSH
44245: LD_INT 0
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: PUSH
44252: LD_INT 2
44254: NEG
44255: PUSH
44256: LD_INT 1
44258: NEG
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: LD_INT 2
44266: NEG
44267: PUSH
44268: LD_INT 2
44270: NEG
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: LIST
44289: LIST
44290: LIST
44291: LIST
44292: LIST
44293: LIST
44294: LIST
44295: LIST
44296: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44297: LD_ADDR_VAR 0 54
44301: PUSH
44302: LD_INT 0
44304: PUSH
44305: LD_INT 0
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: LD_INT 0
44314: PUSH
44315: LD_INT 1
44317: NEG
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PUSH
44323: LD_INT 1
44325: PUSH
44326: LD_INT 0
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: LD_INT 1
44335: PUSH
44336: LD_INT 1
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 0
44345: PUSH
44346: LD_INT 1
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: LD_INT 1
44355: NEG
44356: PUSH
44357: LD_INT 0
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: LD_INT 1
44366: NEG
44367: PUSH
44368: LD_INT 1
44370: NEG
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 1
44378: NEG
44379: PUSH
44380: LD_INT 2
44382: NEG
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: PUSH
44388: LD_INT 0
44390: PUSH
44391: LD_INT 2
44393: NEG
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: PUSH
44399: LD_INT 1
44401: PUSH
44402: LD_INT 1
44404: NEG
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 2
44412: PUSH
44413: LD_INT 0
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: LD_INT 2
44422: PUSH
44423: LD_INT 1
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: LD_INT 2
44432: PUSH
44433: LD_INT 2
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: LD_INT 1
44442: PUSH
44443: LD_INT 2
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 0
44452: PUSH
44453: LD_INT 2
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_INT 1
44462: NEG
44463: PUSH
44464: LD_INT 1
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: LD_INT 2
44473: NEG
44474: PUSH
44475: LD_INT 0
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: PUSH
44482: LD_INT 2
44484: NEG
44485: PUSH
44486: LD_INT 1
44488: NEG
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: PUSH
44494: LD_INT 2
44496: NEG
44497: PUSH
44498: LD_INT 2
44500: NEG
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: LIST
44522: LIST
44523: LIST
44524: LIST
44525: LIST
44526: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44527: LD_ADDR_VAR 0 55
44531: PUSH
44532: LD_INT 0
44534: PUSH
44535: LD_INT 0
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: LD_INT 0
44544: PUSH
44545: LD_INT 1
44547: NEG
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: LD_INT 1
44555: PUSH
44556: LD_INT 0
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: PUSH
44563: LD_INT 1
44565: PUSH
44566: LD_INT 1
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 0
44575: PUSH
44576: LD_INT 1
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 1
44585: NEG
44586: PUSH
44587: LD_INT 0
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: LD_INT 1
44596: NEG
44597: PUSH
44598: LD_INT 1
44600: NEG
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: LD_INT 1
44608: NEG
44609: PUSH
44610: LD_INT 2
44612: NEG
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: LD_INT 0
44620: PUSH
44621: LD_INT 2
44623: NEG
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: PUSH
44629: LD_INT 1
44631: PUSH
44632: LD_INT 1
44634: NEG
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: PUSH
44640: LD_INT 2
44642: PUSH
44643: LD_INT 0
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: PUSH
44650: LD_INT 2
44652: PUSH
44653: LD_INT 1
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: PUSH
44660: LD_INT 2
44662: PUSH
44663: LD_INT 2
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: PUSH
44670: LD_INT 1
44672: PUSH
44673: LD_INT 2
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 0
44682: PUSH
44683: LD_INT 2
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: PUSH
44690: LD_INT 1
44692: NEG
44693: PUSH
44694: LD_INT 1
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 2
44703: NEG
44704: PUSH
44705: LD_INT 0
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 2
44714: NEG
44715: PUSH
44716: LD_INT 1
44718: NEG
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 2
44726: NEG
44727: PUSH
44728: LD_INT 2
44730: NEG
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: LIST
44740: LIST
44741: LIST
44742: LIST
44743: LIST
44744: LIST
44745: LIST
44746: LIST
44747: LIST
44748: LIST
44749: LIST
44750: LIST
44751: LIST
44752: LIST
44753: LIST
44754: LIST
44755: LIST
44756: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44757: LD_ADDR_VAR 0 56
44761: PUSH
44762: LD_INT 0
44764: PUSH
44765: LD_INT 0
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: LD_INT 0
44774: PUSH
44775: LD_INT 1
44777: NEG
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: PUSH
44783: LD_INT 1
44785: PUSH
44786: LD_INT 0
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_INT 1
44795: PUSH
44796: LD_INT 1
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 0
44805: PUSH
44806: LD_INT 1
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: LD_INT 1
44815: NEG
44816: PUSH
44817: LD_INT 0
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 1
44826: NEG
44827: PUSH
44828: LD_INT 1
44830: NEG
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 1
44838: NEG
44839: PUSH
44840: LD_INT 2
44842: NEG
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 0
44850: PUSH
44851: LD_INT 2
44853: NEG
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 1
44861: PUSH
44862: LD_INT 1
44864: NEG
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 2
44872: PUSH
44873: LD_INT 0
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 2
44882: PUSH
44883: LD_INT 1
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 2
44892: PUSH
44893: LD_INT 2
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 1
44902: PUSH
44903: LD_INT 2
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 0
44912: PUSH
44913: LD_INT 2
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 1
44922: NEG
44923: PUSH
44924: LD_INT 1
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 2
44933: NEG
44934: PUSH
44935: LD_INT 0
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 2
44944: NEG
44945: PUSH
44946: LD_INT 1
44948: NEG
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 2
44956: NEG
44957: PUSH
44958: LD_INT 2
44960: NEG
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: LIST
44986: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44987: LD_ADDR_VAR 0 57
44991: PUSH
44992: LD_INT 0
44994: PUSH
44995: LD_INT 0
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 0
45004: PUSH
45005: LD_INT 1
45007: NEG
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 1
45015: PUSH
45016: LD_INT 0
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: LD_INT 1
45025: PUSH
45026: LD_INT 1
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 0
45035: PUSH
45036: LD_INT 1
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 1
45045: NEG
45046: PUSH
45047: LD_INT 0
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: LD_INT 1
45056: NEG
45057: PUSH
45058: LD_INT 1
45060: NEG
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: LD_INT 1
45068: NEG
45069: PUSH
45070: LD_INT 2
45072: NEG
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 0
45080: PUSH
45081: LD_INT 2
45083: NEG
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 1
45091: PUSH
45092: LD_INT 1
45094: NEG
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 2
45102: PUSH
45103: LD_INT 0
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: PUSH
45110: LD_INT 2
45112: PUSH
45113: LD_INT 1
45115: PUSH
45116: EMPTY
45117: LIST
45118: LIST
45119: PUSH
45120: LD_INT 2
45122: PUSH
45123: LD_INT 2
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 1
45132: PUSH
45133: LD_INT 2
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 0
45142: PUSH
45143: LD_INT 2
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: LD_INT 1
45152: NEG
45153: PUSH
45154: LD_INT 1
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 2
45163: NEG
45164: PUSH
45165: LD_INT 0
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 2
45174: NEG
45175: PUSH
45176: LD_INT 1
45178: NEG
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: LD_INT 2
45186: NEG
45187: PUSH
45188: LD_INT 2
45190: NEG
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45217: LD_ADDR_VAR 0 58
45221: PUSH
45222: LD_INT 0
45224: PUSH
45225: LD_INT 0
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: PUSH
45232: LD_INT 0
45234: PUSH
45235: LD_INT 1
45237: NEG
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: LD_INT 1
45245: PUSH
45246: LD_INT 0
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: LD_INT 1
45255: PUSH
45256: LD_INT 1
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 0
45265: PUSH
45266: LD_INT 1
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 1
45275: NEG
45276: PUSH
45277: LD_INT 0
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: LD_INT 1
45286: NEG
45287: PUSH
45288: LD_INT 1
45290: NEG
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: LD_INT 1
45298: NEG
45299: PUSH
45300: LD_INT 2
45302: NEG
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: LD_INT 0
45310: PUSH
45311: LD_INT 2
45313: NEG
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 1
45321: PUSH
45322: LD_INT 1
45324: NEG
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 2
45332: PUSH
45333: LD_INT 0
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: LD_INT 2
45342: PUSH
45343: LD_INT 1
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: PUSH
45350: LD_INT 2
45352: PUSH
45353: LD_INT 2
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 1
45362: PUSH
45363: LD_INT 2
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_INT 0
45372: PUSH
45373: LD_INT 2
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 1
45382: NEG
45383: PUSH
45384: LD_INT 1
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: PUSH
45391: LD_INT 2
45393: NEG
45394: PUSH
45395: LD_INT 0
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 2
45404: NEG
45405: PUSH
45406: LD_INT 1
45408: NEG
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: LD_INT 2
45416: NEG
45417: PUSH
45418: LD_INT 2
45420: NEG
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: LIST
45441: LIST
45442: LIST
45443: LIST
45444: LIST
45445: LIST
45446: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45447: LD_ADDR_VAR 0 59
45451: PUSH
45452: LD_INT 0
45454: PUSH
45455: LD_INT 0
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 0
45464: PUSH
45465: LD_INT 1
45467: NEG
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 1
45475: PUSH
45476: LD_INT 0
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 1
45485: PUSH
45486: LD_INT 1
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 0
45495: PUSH
45496: LD_INT 1
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 1
45505: NEG
45506: PUSH
45507: LD_INT 0
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 1
45516: NEG
45517: PUSH
45518: LD_INT 1
45520: NEG
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45535: LD_ADDR_VAR 0 60
45539: PUSH
45540: LD_INT 0
45542: PUSH
45543: LD_INT 0
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: LD_INT 0
45552: PUSH
45553: LD_INT 1
45555: NEG
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 1
45563: PUSH
45564: LD_INT 0
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 1
45573: PUSH
45574: LD_INT 1
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 0
45583: PUSH
45584: LD_INT 1
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 1
45593: NEG
45594: PUSH
45595: LD_INT 0
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 1
45604: NEG
45605: PUSH
45606: LD_INT 1
45608: NEG
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45623: LD_ADDR_VAR 0 61
45627: PUSH
45628: LD_INT 0
45630: PUSH
45631: LD_INT 0
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: LD_INT 0
45640: PUSH
45641: LD_INT 1
45643: NEG
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: PUSH
45649: LD_INT 1
45651: PUSH
45652: LD_INT 0
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: LD_INT 1
45661: PUSH
45662: LD_INT 1
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: LD_INT 0
45671: PUSH
45672: LD_INT 1
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 1
45681: NEG
45682: PUSH
45683: LD_INT 0
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PUSH
45690: LD_INT 1
45692: NEG
45693: PUSH
45694: LD_INT 1
45696: NEG
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45711: LD_ADDR_VAR 0 62
45715: PUSH
45716: LD_INT 0
45718: PUSH
45719: LD_INT 0
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 0
45728: PUSH
45729: LD_INT 1
45731: NEG
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: LD_INT 1
45739: PUSH
45740: LD_INT 0
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 1
45749: PUSH
45750: LD_INT 1
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 0
45759: PUSH
45760: LD_INT 1
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 1
45769: NEG
45770: PUSH
45771: LD_INT 0
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 1
45780: NEG
45781: PUSH
45782: LD_INT 1
45784: NEG
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45799: LD_ADDR_VAR 0 63
45803: PUSH
45804: LD_INT 0
45806: PUSH
45807: LD_INT 0
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 0
45816: PUSH
45817: LD_INT 1
45819: NEG
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 1
45827: PUSH
45828: LD_INT 0
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 1
45837: PUSH
45838: LD_INT 1
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 0
45847: PUSH
45848: LD_INT 1
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: LD_INT 1
45857: NEG
45858: PUSH
45859: LD_INT 0
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 1
45868: NEG
45869: PUSH
45870: LD_INT 1
45872: NEG
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45887: LD_ADDR_VAR 0 64
45891: PUSH
45892: LD_INT 0
45894: PUSH
45895: LD_INT 0
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 0
45904: PUSH
45905: LD_INT 1
45907: NEG
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 1
45915: PUSH
45916: LD_INT 0
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 1
45925: PUSH
45926: LD_INT 1
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 0
45935: PUSH
45936: LD_INT 1
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 1
45945: NEG
45946: PUSH
45947: LD_INT 0
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: LD_INT 1
45956: NEG
45957: PUSH
45958: LD_INT 1
45960: NEG
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: ST_TO_ADDR
// end ; 1 :
45975: GO 51872
45977: LD_INT 1
45979: DOUBLE
45980: EQUAL
45981: IFTRUE 45985
45983: GO 48608
45985: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45986: LD_ADDR_VAR 0 11
45990: PUSH
45991: LD_INT 1
45993: NEG
45994: PUSH
45995: LD_INT 3
45997: NEG
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 0
46005: PUSH
46006: LD_INT 3
46008: NEG
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 1
46016: PUSH
46017: LD_INT 2
46019: NEG
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: LIST
46029: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46030: LD_ADDR_VAR 0 12
46034: PUSH
46035: LD_INT 2
46037: PUSH
46038: LD_INT 1
46040: NEG
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 3
46048: PUSH
46049: LD_INT 0
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 3
46058: PUSH
46059: LD_INT 1
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: LIST
46070: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46071: LD_ADDR_VAR 0 13
46075: PUSH
46076: LD_INT 3
46078: PUSH
46079: LD_INT 2
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 3
46088: PUSH
46089: LD_INT 3
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 2
46098: PUSH
46099: LD_INT 3
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: LIST
46110: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46111: LD_ADDR_VAR 0 14
46115: PUSH
46116: LD_INT 1
46118: PUSH
46119: LD_INT 3
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 0
46128: PUSH
46129: LD_INT 3
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: LD_INT 1
46138: NEG
46139: PUSH
46140: LD_INT 2
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: LIST
46151: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46152: LD_ADDR_VAR 0 15
46156: PUSH
46157: LD_INT 2
46159: NEG
46160: PUSH
46161: LD_INT 1
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: LD_INT 3
46170: NEG
46171: PUSH
46172: LD_INT 0
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: LD_INT 3
46181: NEG
46182: PUSH
46183: LD_INT 1
46185: NEG
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: LIST
46195: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46196: LD_ADDR_VAR 0 16
46200: PUSH
46201: LD_INT 2
46203: NEG
46204: PUSH
46205: LD_INT 3
46207: NEG
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 3
46215: NEG
46216: PUSH
46217: LD_INT 2
46219: NEG
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 3
46227: NEG
46228: PUSH
46229: LD_INT 3
46231: NEG
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: LIST
46241: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46242: LD_ADDR_VAR 0 17
46246: PUSH
46247: LD_INT 1
46249: NEG
46250: PUSH
46251: LD_INT 3
46253: NEG
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 0
46261: PUSH
46262: LD_INT 3
46264: NEG
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 1
46272: PUSH
46273: LD_INT 2
46275: NEG
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: LIST
46285: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46286: LD_ADDR_VAR 0 18
46290: PUSH
46291: LD_INT 2
46293: PUSH
46294: LD_INT 1
46296: NEG
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 3
46304: PUSH
46305: LD_INT 0
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 3
46314: PUSH
46315: LD_INT 1
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: LIST
46326: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46327: LD_ADDR_VAR 0 19
46331: PUSH
46332: LD_INT 3
46334: PUSH
46335: LD_INT 2
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 3
46344: PUSH
46345: LD_INT 3
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 2
46354: PUSH
46355: LD_INT 3
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: LIST
46366: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46367: LD_ADDR_VAR 0 20
46371: PUSH
46372: LD_INT 1
46374: PUSH
46375: LD_INT 3
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: PUSH
46382: LD_INT 0
46384: PUSH
46385: LD_INT 3
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 1
46394: NEG
46395: PUSH
46396: LD_INT 2
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: LIST
46407: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46408: LD_ADDR_VAR 0 21
46412: PUSH
46413: LD_INT 2
46415: NEG
46416: PUSH
46417: LD_INT 1
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 3
46426: NEG
46427: PUSH
46428: LD_INT 0
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 3
46437: NEG
46438: PUSH
46439: LD_INT 1
46441: NEG
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: LIST
46451: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46452: LD_ADDR_VAR 0 22
46456: PUSH
46457: LD_INT 2
46459: NEG
46460: PUSH
46461: LD_INT 3
46463: NEG
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 3
46471: NEG
46472: PUSH
46473: LD_INT 2
46475: NEG
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 3
46483: NEG
46484: PUSH
46485: LD_INT 3
46487: NEG
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: LIST
46497: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
46498: LD_ADDR_VAR 0 23
46502: PUSH
46503: LD_INT 0
46505: PUSH
46506: LD_INT 3
46508: NEG
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 1
46516: NEG
46517: PUSH
46518: LD_INT 4
46520: NEG
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 1
46528: PUSH
46529: LD_INT 3
46531: NEG
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: LIST
46541: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
46542: LD_ADDR_VAR 0 24
46546: PUSH
46547: LD_INT 3
46549: PUSH
46550: LD_INT 0
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: LD_INT 3
46559: PUSH
46560: LD_INT 1
46562: NEG
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 4
46570: PUSH
46571: LD_INT 1
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: LIST
46582: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
46583: LD_ADDR_VAR 0 25
46587: PUSH
46588: LD_INT 3
46590: PUSH
46591: LD_INT 3
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 4
46600: PUSH
46601: LD_INT 3
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 3
46610: PUSH
46611: LD_INT 4
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: LIST
46622: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
46623: LD_ADDR_VAR 0 26
46627: PUSH
46628: LD_INT 0
46630: PUSH
46631: LD_INT 3
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 1
46640: PUSH
46641: LD_INT 4
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 1
46650: NEG
46651: PUSH
46652: LD_INT 3
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: LIST
46663: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
46664: LD_ADDR_VAR 0 27
46668: PUSH
46669: LD_INT 3
46671: NEG
46672: PUSH
46673: LD_INT 0
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 3
46682: NEG
46683: PUSH
46684: LD_INT 1
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: PUSH
46691: LD_INT 4
46693: NEG
46694: PUSH
46695: LD_INT 1
46697: NEG
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: LIST
46707: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
46708: LD_ADDR_VAR 0 28
46712: PUSH
46713: LD_INT 3
46715: NEG
46716: PUSH
46717: LD_INT 3
46719: NEG
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 3
46727: NEG
46728: PUSH
46729: LD_INT 4
46731: NEG
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: LD_INT 4
46739: NEG
46740: PUSH
46741: LD_INT 3
46743: NEG
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: LIST
46753: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
46754: LD_ADDR_VAR 0 29
46758: PUSH
46759: LD_INT 1
46761: NEG
46762: PUSH
46763: LD_INT 3
46765: NEG
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 0
46773: PUSH
46774: LD_INT 3
46776: NEG
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 1
46784: PUSH
46785: LD_INT 2
46787: NEG
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: LD_INT 1
46795: NEG
46796: PUSH
46797: LD_INT 4
46799: NEG
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: LD_INT 0
46807: PUSH
46808: LD_INT 4
46810: NEG
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: PUSH
46816: LD_INT 1
46818: PUSH
46819: LD_INT 3
46821: NEG
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 1
46829: NEG
46830: PUSH
46831: LD_INT 5
46833: NEG
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 0
46841: PUSH
46842: LD_INT 5
46844: NEG
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 1
46852: PUSH
46853: LD_INT 4
46855: NEG
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 1
46863: NEG
46864: PUSH
46865: LD_INT 6
46867: NEG
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 0
46875: PUSH
46876: LD_INT 6
46878: NEG
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 1
46886: PUSH
46887: LD_INT 5
46889: NEG
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
46909: LD_ADDR_VAR 0 30
46913: PUSH
46914: LD_INT 2
46916: PUSH
46917: LD_INT 1
46919: NEG
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 3
46927: PUSH
46928: LD_INT 0
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 3
46937: PUSH
46938: LD_INT 1
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 3
46947: PUSH
46948: LD_INT 1
46950: NEG
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 4
46958: PUSH
46959: LD_INT 0
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 4
46968: PUSH
46969: LD_INT 1
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 4
46978: PUSH
46979: LD_INT 1
46981: NEG
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 5
46989: PUSH
46990: LD_INT 0
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 5
46999: PUSH
47000: LD_INT 1
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 5
47009: PUSH
47010: LD_INT 1
47012: NEG
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 6
47020: PUSH
47021: LD_INT 0
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 6
47030: PUSH
47031: LD_INT 1
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: LIST
47042: LIST
47043: LIST
47044: LIST
47045: LIST
47046: LIST
47047: LIST
47048: LIST
47049: LIST
47050: LIST
47051: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
47052: LD_ADDR_VAR 0 31
47056: PUSH
47057: LD_INT 3
47059: PUSH
47060: LD_INT 2
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 3
47069: PUSH
47070: LD_INT 3
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 2
47079: PUSH
47080: LD_INT 3
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 4
47089: PUSH
47090: LD_INT 3
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: LD_INT 4
47099: PUSH
47100: LD_INT 4
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: LD_INT 3
47109: PUSH
47110: LD_INT 4
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 5
47119: PUSH
47120: LD_INT 4
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 5
47129: PUSH
47130: LD_INT 5
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 4
47139: PUSH
47140: LD_INT 5
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 6
47149: PUSH
47150: LD_INT 5
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 6
47159: PUSH
47160: LD_INT 6
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: LD_INT 5
47169: PUSH
47170: LD_INT 6
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
47191: LD_ADDR_VAR 0 32
47195: PUSH
47196: LD_INT 1
47198: PUSH
47199: LD_INT 3
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 0
47208: PUSH
47209: LD_INT 3
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 1
47218: NEG
47219: PUSH
47220: LD_INT 2
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 1
47229: PUSH
47230: LD_INT 4
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 0
47239: PUSH
47240: LD_INT 4
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 1
47249: NEG
47250: PUSH
47251: LD_INT 3
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 1
47260: PUSH
47261: LD_INT 5
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 0
47270: PUSH
47271: LD_INT 5
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 1
47280: NEG
47281: PUSH
47282: LD_INT 4
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 1
47291: PUSH
47292: LD_INT 6
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 0
47301: PUSH
47302: LD_INT 6
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 1
47311: NEG
47312: PUSH
47313: LD_INT 5
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
47334: LD_ADDR_VAR 0 33
47338: PUSH
47339: LD_INT 2
47341: NEG
47342: PUSH
47343: LD_INT 1
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 3
47352: NEG
47353: PUSH
47354: LD_INT 0
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 3
47363: NEG
47364: PUSH
47365: LD_INT 1
47367: NEG
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 3
47375: NEG
47376: PUSH
47377: LD_INT 1
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 4
47386: NEG
47387: PUSH
47388: LD_INT 0
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 4
47397: NEG
47398: PUSH
47399: LD_INT 1
47401: NEG
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 4
47409: NEG
47410: PUSH
47411: LD_INT 1
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 5
47420: NEG
47421: PUSH
47422: LD_INT 0
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 5
47431: NEG
47432: PUSH
47433: LD_INT 1
47435: NEG
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 5
47443: NEG
47444: PUSH
47445: LD_INT 1
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 6
47454: NEG
47455: PUSH
47456: LD_INT 0
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 6
47465: NEG
47466: PUSH
47467: LD_INT 1
47469: NEG
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
47489: LD_ADDR_VAR 0 34
47493: PUSH
47494: LD_INT 2
47496: NEG
47497: PUSH
47498: LD_INT 3
47500: NEG
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 3
47508: NEG
47509: PUSH
47510: LD_INT 2
47512: NEG
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 3
47520: NEG
47521: PUSH
47522: LD_INT 3
47524: NEG
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 3
47532: NEG
47533: PUSH
47534: LD_INT 4
47536: NEG
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: LD_INT 4
47544: NEG
47545: PUSH
47546: LD_INT 3
47548: NEG
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 4
47556: NEG
47557: PUSH
47558: LD_INT 4
47560: NEG
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: LD_INT 4
47568: NEG
47569: PUSH
47570: LD_INT 5
47572: NEG
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 5
47580: NEG
47581: PUSH
47582: LD_INT 4
47584: NEG
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 5
47592: NEG
47593: PUSH
47594: LD_INT 5
47596: NEG
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 5
47604: NEG
47605: PUSH
47606: LD_INT 6
47608: NEG
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 6
47616: NEG
47617: PUSH
47618: LD_INT 5
47620: NEG
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 6
47628: NEG
47629: PUSH
47630: LD_INT 6
47632: NEG
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
47652: LD_ADDR_VAR 0 41
47656: PUSH
47657: LD_INT 0
47659: PUSH
47660: LD_INT 2
47662: NEG
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 1
47670: NEG
47671: PUSH
47672: LD_INT 3
47674: NEG
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 1
47682: PUSH
47683: LD_INT 2
47685: NEG
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: LIST
47695: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
47696: LD_ADDR_VAR 0 42
47700: PUSH
47701: LD_INT 2
47703: PUSH
47704: LD_INT 0
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 2
47713: PUSH
47714: LD_INT 1
47716: NEG
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 3
47724: PUSH
47725: LD_INT 1
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: LIST
47736: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
47737: LD_ADDR_VAR 0 43
47741: PUSH
47742: LD_INT 2
47744: PUSH
47745: LD_INT 2
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: LD_INT 3
47754: PUSH
47755: LD_INT 2
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 2
47764: PUSH
47765: LD_INT 3
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: LIST
47776: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
47777: LD_ADDR_VAR 0 44
47781: PUSH
47782: LD_INT 0
47784: PUSH
47785: LD_INT 2
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 1
47794: PUSH
47795: LD_INT 3
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 1
47804: NEG
47805: PUSH
47806: LD_INT 2
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: LIST
47817: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47818: LD_ADDR_VAR 0 45
47822: PUSH
47823: LD_INT 2
47825: NEG
47826: PUSH
47827: LD_INT 0
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 2
47836: NEG
47837: PUSH
47838: LD_INT 1
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: LD_INT 3
47847: NEG
47848: PUSH
47849: LD_INT 1
47851: NEG
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: LIST
47861: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
47862: LD_ADDR_VAR 0 46
47866: PUSH
47867: LD_INT 2
47869: NEG
47870: PUSH
47871: LD_INT 2
47873: NEG
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 2
47881: NEG
47882: PUSH
47883: LD_INT 3
47885: NEG
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 3
47893: NEG
47894: PUSH
47895: LD_INT 2
47897: NEG
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: LIST
47907: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
47908: LD_ADDR_VAR 0 47
47912: PUSH
47913: LD_INT 2
47915: NEG
47916: PUSH
47917: LD_INT 3
47919: NEG
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 1
47927: NEG
47928: PUSH
47929: LD_INT 3
47931: NEG
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47941: LD_ADDR_VAR 0 48
47945: PUSH
47946: LD_INT 1
47948: PUSH
47949: LD_INT 2
47951: NEG
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 2
47959: PUSH
47960: LD_INT 1
47962: NEG
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
47972: LD_ADDR_VAR 0 49
47976: PUSH
47977: LD_INT 3
47979: PUSH
47980: LD_INT 1
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 3
47989: PUSH
47990: LD_INT 2
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
48001: LD_ADDR_VAR 0 50
48005: PUSH
48006: LD_INT 2
48008: PUSH
48009: LD_INT 3
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 1
48018: PUSH
48019: LD_INT 3
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48030: LD_ADDR_VAR 0 51
48034: PUSH
48035: LD_INT 1
48037: NEG
48038: PUSH
48039: LD_INT 2
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 2
48048: NEG
48049: PUSH
48050: LD_INT 1
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48061: LD_ADDR_VAR 0 52
48065: PUSH
48066: LD_INT 3
48068: NEG
48069: PUSH
48070: LD_INT 1
48072: NEG
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 3
48080: NEG
48081: PUSH
48082: LD_INT 2
48084: NEG
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48094: LD_ADDR_VAR 0 53
48098: PUSH
48099: LD_INT 1
48101: NEG
48102: PUSH
48103: LD_INT 3
48105: NEG
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 0
48113: PUSH
48114: LD_INT 3
48116: NEG
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 1
48124: PUSH
48125: LD_INT 2
48127: NEG
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: LIST
48137: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48138: LD_ADDR_VAR 0 54
48142: PUSH
48143: LD_INT 2
48145: PUSH
48146: LD_INT 1
48148: NEG
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 3
48156: PUSH
48157: LD_INT 0
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 3
48166: PUSH
48167: LD_INT 1
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: LIST
48178: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48179: LD_ADDR_VAR 0 55
48183: PUSH
48184: LD_INT 3
48186: PUSH
48187: LD_INT 2
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 3
48196: PUSH
48197: LD_INT 3
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 2
48206: PUSH
48207: LD_INT 3
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: LIST
48218: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48219: LD_ADDR_VAR 0 56
48223: PUSH
48224: LD_INT 1
48226: PUSH
48227: LD_INT 3
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 0
48236: PUSH
48237: LD_INT 3
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: LD_INT 1
48246: NEG
48247: PUSH
48248: LD_INT 2
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: LIST
48259: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48260: LD_ADDR_VAR 0 57
48264: PUSH
48265: LD_INT 2
48267: NEG
48268: PUSH
48269: LD_INT 1
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 3
48278: NEG
48279: PUSH
48280: LD_INT 0
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 3
48289: NEG
48290: PUSH
48291: LD_INT 1
48293: NEG
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: LIST
48303: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48304: LD_ADDR_VAR 0 58
48308: PUSH
48309: LD_INT 2
48311: NEG
48312: PUSH
48313: LD_INT 3
48315: NEG
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 3
48323: NEG
48324: PUSH
48325: LD_INT 2
48327: NEG
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 3
48335: NEG
48336: PUSH
48337: LD_INT 3
48339: NEG
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: LIST
48349: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
48350: LD_ADDR_VAR 0 59
48354: PUSH
48355: LD_INT 1
48357: NEG
48358: PUSH
48359: LD_INT 2
48361: NEG
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 0
48369: PUSH
48370: LD_INT 2
48372: NEG
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 1
48380: PUSH
48381: LD_INT 1
48383: NEG
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: LIST
48393: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48394: LD_ADDR_VAR 0 60
48398: PUSH
48399: LD_INT 1
48401: PUSH
48402: LD_INT 1
48404: NEG
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 2
48412: PUSH
48413: LD_INT 0
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 2
48422: PUSH
48423: LD_INT 1
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: LIST
48434: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48435: LD_ADDR_VAR 0 61
48439: PUSH
48440: LD_INT 2
48442: PUSH
48443: LD_INT 1
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 2
48452: PUSH
48453: LD_INT 2
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: LD_INT 1
48462: PUSH
48463: LD_INT 2
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: LIST
48474: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48475: LD_ADDR_VAR 0 62
48479: PUSH
48480: LD_INT 1
48482: PUSH
48483: LD_INT 2
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: LD_INT 0
48492: PUSH
48493: LD_INT 2
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 1
48502: NEG
48503: PUSH
48504: LD_INT 1
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: LIST
48515: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48516: LD_ADDR_VAR 0 63
48520: PUSH
48521: LD_INT 1
48523: NEG
48524: PUSH
48525: LD_INT 1
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 2
48534: NEG
48535: PUSH
48536: LD_INT 0
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 2
48545: NEG
48546: PUSH
48547: LD_INT 1
48549: NEG
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: LIST
48559: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48560: LD_ADDR_VAR 0 64
48564: PUSH
48565: LD_INT 1
48567: NEG
48568: PUSH
48569: LD_INT 2
48571: NEG
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PUSH
48577: LD_INT 2
48579: NEG
48580: PUSH
48581: LD_INT 1
48583: NEG
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 2
48591: NEG
48592: PUSH
48593: LD_INT 2
48595: NEG
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: LIST
48605: ST_TO_ADDR
// end ; 2 :
48606: GO 51872
48608: LD_INT 2
48610: DOUBLE
48611: EQUAL
48612: IFTRUE 48616
48614: GO 51871
48616: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
48617: LD_ADDR_VAR 0 29
48621: PUSH
48622: LD_INT 4
48624: PUSH
48625: LD_INT 0
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PUSH
48632: LD_INT 4
48634: PUSH
48635: LD_INT 1
48637: NEG
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: LD_INT 5
48645: PUSH
48646: LD_INT 0
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: PUSH
48653: LD_INT 5
48655: PUSH
48656: LD_INT 1
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 4
48665: PUSH
48666: LD_INT 1
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 3
48675: PUSH
48676: LD_INT 0
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 3
48685: PUSH
48686: LD_INT 1
48688: NEG
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 3
48696: PUSH
48697: LD_INT 2
48699: NEG
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 5
48707: PUSH
48708: LD_INT 2
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: PUSH
48715: LD_INT 3
48717: PUSH
48718: LD_INT 3
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 3
48727: PUSH
48728: LD_INT 2
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: LD_INT 4
48737: PUSH
48738: LD_INT 3
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 4
48747: PUSH
48748: LD_INT 4
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 3
48757: PUSH
48758: LD_INT 4
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 2
48767: PUSH
48768: LD_INT 3
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 2
48777: PUSH
48778: LD_INT 2
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 4
48787: PUSH
48788: LD_INT 2
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 2
48797: PUSH
48798: LD_INT 4
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 0
48807: PUSH
48808: LD_INT 4
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: LD_INT 0
48817: PUSH
48818: LD_INT 3
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: LD_INT 1
48827: PUSH
48828: LD_INT 4
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 1
48837: PUSH
48838: LD_INT 5
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 0
48847: PUSH
48848: LD_INT 5
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 1
48857: NEG
48858: PUSH
48859: LD_INT 4
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 1
48868: NEG
48869: PUSH
48870: LD_INT 3
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 2
48879: PUSH
48880: LD_INT 5
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 2
48889: NEG
48890: PUSH
48891: LD_INT 3
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 3
48900: NEG
48901: PUSH
48902: LD_INT 0
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 3
48911: NEG
48912: PUSH
48913: LD_INT 1
48915: NEG
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 2
48923: NEG
48924: PUSH
48925: LD_INT 0
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 2
48934: NEG
48935: PUSH
48936: LD_INT 1
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 3
48945: NEG
48946: PUSH
48947: LD_INT 1
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 4
48956: NEG
48957: PUSH
48958: LD_INT 0
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: LD_INT 4
48967: NEG
48968: PUSH
48969: LD_INT 1
48971: NEG
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 4
48979: NEG
48980: PUSH
48981: LD_INT 2
48983: NEG
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 2
48991: NEG
48992: PUSH
48993: LD_INT 2
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 4
49002: NEG
49003: PUSH
49004: LD_INT 4
49006: NEG
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 4
49014: NEG
49015: PUSH
49016: LD_INT 5
49018: NEG
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: PUSH
49024: LD_INT 3
49026: NEG
49027: PUSH
49028: LD_INT 4
49030: NEG
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 3
49038: NEG
49039: PUSH
49040: LD_INT 3
49042: NEG
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 4
49050: NEG
49051: PUSH
49052: LD_INT 3
49054: NEG
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 5
49062: NEG
49063: PUSH
49064: LD_INT 4
49066: NEG
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 5
49074: NEG
49075: PUSH
49076: LD_INT 5
49078: NEG
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 3
49086: NEG
49087: PUSH
49088: LD_INT 5
49090: NEG
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 5
49098: NEG
49099: PUSH
49100: LD_INT 3
49102: NEG
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
49155: LD_ADDR_VAR 0 30
49159: PUSH
49160: LD_INT 4
49162: PUSH
49163: LD_INT 4
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 4
49172: PUSH
49173: LD_INT 3
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: PUSH
49180: LD_INT 5
49182: PUSH
49183: LD_INT 4
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: LD_INT 5
49192: PUSH
49193: LD_INT 5
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 4
49202: PUSH
49203: LD_INT 5
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 3
49212: PUSH
49213: LD_INT 4
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 3
49222: PUSH
49223: LD_INT 3
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 5
49232: PUSH
49233: LD_INT 3
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 3
49242: PUSH
49243: LD_INT 5
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 0
49252: PUSH
49253: LD_INT 3
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: PUSH
49260: LD_INT 0
49262: PUSH
49263: LD_INT 2
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: LD_INT 1
49272: PUSH
49273: LD_INT 3
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: LD_INT 1
49282: PUSH
49283: LD_INT 4
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: PUSH
49290: LD_INT 0
49292: PUSH
49293: LD_INT 4
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 1
49302: NEG
49303: PUSH
49304: LD_INT 3
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 1
49313: NEG
49314: PUSH
49315: LD_INT 2
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 2
49324: PUSH
49325: LD_INT 4
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 2
49334: NEG
49335: PUSH
49336: LD_INT 2
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: LD_INT 4
49345: NEG
49346: PUSH
49347: LD_INT 0
49349: PUSH
49350: EMPTY
49351: LIST
49352: LIST
49353: PUSH
49354: LD_INT 4
49356: NEG
49357: PUSH
49358: LD_INT 1
49360: NEG
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 3
49368: NEG
49369: PUSH
49370: LD_INT 0
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: LD_INT 3
49379: NEG
49380: PUSH
49381: LD_INT 1
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 4
49390: NEG
49391: PUSH
49392: LD_INT 1
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 5
49401: NEG
49402: PUSH
49403: LD_INT 0
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 5
49412: NEG
49413: PUSH
49414: LD_INT 1
49416: NEG
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 5
49424: NEG
49425: PUSH
49426: LD_INT 2
49428: NEG
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 3
49436: NEG
49437: PUSH
49438: LD_INT 2
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 3
49447: NEG
49448: PUSH
49449: LD_INT 3
49451: NEG
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 3
49459: NEG
49460: PUSH
49461: LD_INT 4
49463: NEG
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 2
49471: NEG
49472: PUSH
49473: LD_INT 3
49475: NEG
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 2
49483: NEG
49484: PUSH
49485: LD_INT 2
49487: NEG
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 3
49495: NEG
49496: PUSH
49497: LD_INT 2
49499: NEG
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 4
49507: NEG
49508: PUSH
49509: LD_INT 3
49511: NEG
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 4
49519: NEG
49520: PUSH
49521: LD_INT 4
49523: NEG
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 2
49531: NEG
49532: PUSH
49533: LD_INT 4
49535: NEG
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 4
49543: NEG
49544: PUSH
49545: LD_INT 2
49547: NEG
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 0
49555: PUSH
49556: LD_INT 4
49558: NEG
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 0
49566: PUSH
49567: LD_INT 5
49569: NEG
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 1
49577: PUSH
49578: LD_INT 4
49580: NEG
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 1
49588: PUSH
49589: LD_INT 3
49591: NEG
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: LD_INT 0
49599: PUSH
49600: LD_INT 3
49602: NEG
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 1
49610: NEG
49611: PUSH
49612: LD_INT 4
49614: NEG
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 1
49622: NEG
49623: PUSH
49624: LD_INT 5
49626: NEG
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 2
49634: PUSH
49635: LD_INT 3
49637: NEG
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 2
49645: NEG
49646: PUSH
49647: LD_INT 5
49649: NEG
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
49702: LD_ADDR_VAR 0 31
49706: PUSH
49707: LD_INT 0
49709: PUSH
49710: LD_INT 4
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: LD_INT 0
49719: PUSH
49720: LD_INT 3
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: PUSH
49727: LD_INT 1
49729: PUSH
49730: LD_INT 4
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: LD_INT 1
49739: PUSH
49740: LD_INT 5
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: LD_INT 0
49749: PUSH
49750: LD_INT 5
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 1
49759: NEG
49760: PUSH
49761: LD_INT 4
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: LD_INT 1
49770: NEG
49771: PUSH
49772: LD_INT 3
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 2
49781: PUSH
49782: LD_INT 5
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 2
49791: NEG
49792: PUSH
49793: LD_INT 3
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 3
49802: NEG
49803: PUSH
49804: LD_INT 0
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 3
49813: NEG
49814: PUSH
49815: LD_INT 1
49817: NEG
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 2
49825: NEG
49826: PUSH
49827: LD_INT 0
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 2
49836: NEG
49837: PUSH
49838: LD_INT 1
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 3
49847: NEG
49848: PUSH
49849: LD_INT 1
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: LD_INT 4
49858: NEG
49859: PUSH
49860: LD_INT 0
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: LD_INT 4
49869: NEG
49870: PUSH
49871: LD_INT 1
49873: NEG
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 4
49881: NEG
49882: PUSH
49883: LD_INT 2
49885: NEG
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 2
49893: NEG
49894: PUSH
49895: LD_INT 2
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 4
49904: NEG
49905: PUSH
49906: LD_INT 4
49908: NEG
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 4
49916: NEG
49917: PUSH
49918: LD_INT 5
49920: NEG
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 3
49928: NEG
49929: PUSH
49930: LD_INT 4
49932: NEG
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 3
49940: NEG
49941: PUSH
49942: LD_INT 3
49944: NEG
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: LD_INT 4
49952: NEG
49953: PUSH
49954: LD_INT 3
49956: NEG
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 5
49964: NEG
49965: PUSH
49966: LD_INT 4
49968: NEG
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 5
49976: NEG
49977: PUSH
49978: LD_INT 5
49980: NEG
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 3
49988: NEG
49989: PUSH
49990: LD_INT 5
49992: NEG
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: LD_INT 5
50000: NEG
50001: PUSH
50002: LD_INT 3
50004: NEG
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 0
50012: PUSH
50013: LD_INT 3
50015: NEG
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 0
50023: PUSH
50024: LD_INT 4
50026: NEG
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 1
50034: PUSH
50035: LD_INT 3
50037: NEG
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 1
50045: PUSH
50046: LD_INT 2
50048: NEG
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 0
50056: PUSH
50057: LD_INT 2
50059: NEG
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 1
50067: NEG
50068: PUSH
50069: LD_INT 3
50071: NEG
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 1
50079: NEG
50080: PUSH
50081: LD_INT 4
50083: NEG
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 2
50091: PUSH
50092: LD_INT 2
50094: NEG
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 2
50102: NEG
50103: PUSH
50104: LD_INT 4
50106: NEG
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 4
50114: PUSH
50115: LD_INT 0
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 4
50124: PUSH
50125: LD_INT 1
50127: NEG
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: PUSH
50133: LD_INT 5
50135: PUSH
50136: LD_INT 0
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: LD_INT 5
50145: PUSH
50146: LD_INT 1
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: PUSH
50153: LD_INT 4
50155: PUSH
50156: LD_INT 1
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: LD_INT 3
50165: PUSH
50166: LD_INT 0
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 3
50175: PUSH
50176: LD_INT 1
50178: NEG
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 3
50186: PUSH
50187: LD_INT 2
50189: NEG
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 5
50197: PUSH
50198: LD_INT 2
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
50252: LD_ADDR_VAR 0 32
50256: PUSH
50257: LD_INT 4
50259: NEG
50260: PUSH
50261: LD_INT 0
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: PUSH
50268: LD_INT 4
50270: NEG
50271: PUSH
50272: LD_INT 1
50274: NEG
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 3
50282: NEG
50283: PUSH
50284: LD_INT 0
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 3
50293: NEG
50294: PUSH
50295: LD_INT 1
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 4
50304: NEG
50305: PUSH
50306: LD_INT 1
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 5
50315: NEG
50316: PUSH
50317: LD_INT 0
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 5
50326: NEG
50327: PUSH
50328: LD_INT 1
50330: NEG
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 5
50338: NEG
50339: PUSH
50340: LD_INT 2
50342: NEG
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 3
50350: NEG
50351: PUSH
50352: LD_INT 2
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 3
50361: NEG
50362: PUSH
50363: LD_INT 3
50365: NEG
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 3
50373: NEG
50374: PUSH
50375: LD_INT 4
50377: NEG
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 2
50385: NEG
50386: PUSH
50387: LD_INT 3
50389: NEG
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 2
50397: NEG
50398: PUSH
50399: LD_INT 2
50401: NEG
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 3
50409: NEG
50410: PUSH
50411: LD_INT 2
50413: NEG
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 4
50421: NEG
50422: PUSH
50423: LD_INT 3
50425: NEG
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 4
50433: NEG
50434: PUSH
50435: LD_INT 4
50437: NEG
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 2
50445: NEG
50446: PUSH
50447: LD_INT 4
50449: NEG
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 4
50457: NEG
50458: PUSH
50459: LD_INT 2
50461: NEG
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 0
50469: PUSH
50470: LD_INT 4
50472: NEG
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 0
50480: PUSH
50481: LD_INT 5
50483: NEG
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 1
50491: PUSH
50492: LD_INT 4
50494: NEG
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 1
50502: PUSH
50503: LD_INT 3
50505: NEG
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 0
50513: PUSH
50514: LD_INT 3
50516: NEG
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 1
50524: NEG
50525: PUSH
50526: LD_INT 4
50528: NEG
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_INT 1
50536: NEG
50537: PUSH
50538: LD_INT 5
50540: NEG
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 2
50548: PUSH
50549: LD_INT 3
50551: NEG
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 2
50559: NEG
50560: PUSH
50561: LD_INT 5
50563: NEG
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 3
50571: PUSH
50572: LD_INT 0
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 3
50581: PUSH
50582: LD_INT 1
50584: NEG
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 4
50592: PUSH
50593: LD_INT 0
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 4
50602: PUSH
50603: LD_INT 1
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: LD_INT 3
50612: PUSH
50613: LD_INT 1
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 2
50622: PUSH
50623: LD_INT 0
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 2
50632: PUSH
50633: LD_INT 1
50635: NEG
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 2
50643: PUSH
50644: LD_INT 2
50646: NEG
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 4
50654: PUSH
50655: LD_INT 2
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 4
50664: PUSH
50665: LD_INT 4
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 4
50674: PUSH
50675: LD_INT 3
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 5
50684: PUSH
50685: LD_INT 4
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 5
50694: PUSH
50695: LD_INT 5
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 4
50704: PUSH
50705: LD_INT 5
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 3
50714: PUSH
50715: LD_INT 4
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 3
50724: PUSH
50725: LD_INT 3
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 5
50734: PUSH
50735: LD_INT 3
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 3
50744: PUSH
50745: LD_INT 5
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
50799: LD_ADDR_VAR 0 33
50803: PUSH
50804: LD_INT 4
50806: NEG
50807: PUSH
50808: LD_INT 4
50810: NEG
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 4
50818: NEG
50819: PUSH
50820: LD_INT 5
50822: NEG
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 3
50830: NEG
50831: PUSH
50832: LD_INT 4
50834: NEG
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 3
50842: NEG
50843: PUSH
50844: LD_INT 3
50846: NEG
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 4
50854: NEG
50855: PUSH
50856: LD_INT 3
50858: NEG
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 5
50866: NEG
50867: PUSH
50868: LD_INT 4
50870: NEG
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 5
50878: NEG
50879: PUSH
50880: LD_INT 5
50882: NEG
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 3
50890: NEG
50891: PUSH
50892: LD_INT 5
50894: NEG
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 5
50902: NEG
50903: PUSH
50904: LD_INT 3
50906: NEG
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 0
50914: PUSH
50915: LD_INT 3
50917: NEG
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 0
50925: PUSH
50926: LD_INT 4
50928: NEG
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_INT 1
50936: PUSH
50937: LD_INT 3
50939: NEG
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 1
50947: PUSH
50948: LD_INT 2
50950: NEG
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 0
50958: PUSH
50959: LD_INT 2
50961: NEG
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 1
50969: NEG
50970: PUSH
50971: LD_INT 3
50973: NEG
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 1
50981: NEG
50982: PUSH
50983: LD_INT 4
50985: NEG
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 2
50993: PUSH
50994: LD_INT 2
50996: NEG
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 2
51004: NEG
51005: PUSH
51006: LD_INT 4
51008: NEG
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 4
51016: PUSH
51017: LD_INT 0
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 4
51026: PUSH
51027: LD_INT 1
51029: NEG
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 5
51037: PUSH
51038: LD_INT 0
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 5
51047: PUSH
51048: LD_INT 1
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 4
51057: PUSH
51058: LD_INT 1
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 3
51067: PUSH
51068: LD_INT 0
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 3
51077: PUSH
51078: LD_INT 1
51080: NEG
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 3
51088: PUSH
51089: LD_INT 2
51091: NEG
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 5
51099: PUSH
51100: LD_INT 2
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 3
51109: PUSH
51110: LD_INT 3
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 3
51119: PUSH
51120: LD_INT 2
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 4
51129: PUSH
51130: LD_INT 3
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 4
51139: PUSH
51140: LD_INT 4
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 3
51149: PUSH
51150: LD_INT 4
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 2
51159: PUSH
51160: LD_INT 3
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 2
51169: PUSH
51170: LD_INT 2
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 4
51179: PUSH
51180: LD_INT 2
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 2
51189: PUSH
51190: LD_INT 4
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 0
51199: PUSH
51200: LD_INT 4
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 0
51209: PUSH
51210: LD_INT 3
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 1
51219: PUSH
51220: LD_INT 4
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 1
51229: PUSH
51230: LD_INT 5
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 0
51239: PUSH
51240: LD_INT 5
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 1
51249: NEG
51250: PUSH
51251: LD_INT 4
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 1
51260: NEG
51261: PUSH
51262: LD_INT 3
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 2
51271: PUSH
51272: LD_INT 5
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 2
51281: NEG
51282: PUSH
51283: LD_INT 3
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
51337: LD_ADDR_VAR 0 34
51341: PUSH
51342: LD_INT 0
51344: PUSH
51345: LD_INT 4
51347: NEG
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 0
51355: PUSH
51356: LD_INT 5
51358: NEG
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 1
51366: PUSH
51367: LD_INT 4
51369: NEG
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: LD_INT 1
51377: PUSH
51378: LD_INT 3
51380: NEG
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 0
51388: PUSH
51389: LD_INT 3
51391: NEG
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 1
51399: NEG
51400: PUSH
51401: LD_INT 4
51403: NEG
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 1
51411: NEG
51412: PUSH
51413: LD_INT 5
51415: NEG
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 2
51423: PUSH
51424: LD_INT 3
51426: NEG
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 2
51434: NEG
51435: PUSH
51436: LD_INT 5
51438: NEG
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 3
51446: PUSH
51447: LD_INT 0
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 3
51456: PUSH
51457: LD_INT 1
51459: NEG
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 4
51467: PUSH
51468: LD_INT 0
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 4
51477: PUSH
51478: LD_INT 1
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 3
51487: PUSH
51488: LD_INT 1
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 2
51497: PUSH
51498: LD_INT 0
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 2
51507: PUSH
51508: LD_INT 1
51510: NEG
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 2
51518: PUSH
51519: LD_INT 2
51521: NEG
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: PUSH
51527: LD_INT 4
51529: PUSH
51530: LD_INT 2
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 4
51539: PUSH
51540: LD_INT 4
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 4
51549: PUSH
51550: LD_INT 3
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 5
51559: PUSH
51560: LD_INT 4
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 5
51569: PUSH
51570: LD_INT 5
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 4
51579: PUSH
51580: LD_INT 5
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 3
51589: PUSH
51590: LD_INT 4
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 3
51599: PUSH
51600: LD_INT 3
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 5
51609: PUSH
51610: LD_INT 3
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 3
51619: PUSH
51620: LD_INT 5
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 0
51629: PUSH
51630: LD_INT 3
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 0
51639: PUSH
51640: LD_INT 2
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 1
51649: PUSH
51650: LD_INT 3
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 1
51659: PUSH
51660: LD_INT 4
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 0
51669: PUSH
51670: LD_INT 4
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 1
51679: NEG
51680: PUSH
51681: LD_INT 3
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 1
51690: NEG
51691: PUSH
51692: LD_INT 2
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 2
51701: PUSH
51702: LD_INT 4
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 2
51711: NEG
51712: PUSH
51713: LD_INT 2
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 4
51722: NEG
51723: PUSH
51724: LD_INT 0
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 4
51733: NEG
51734: PUSH
51735: LD_INT 1
51737: NEG
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 3
51745: NEG
51746: PUSH
51747: LD_INT 0
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 3
51756: NEG
51757: PUSH
51758: LD_INT 1
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 4
51767: NEG
51768: PUSH
51769: LD_INT 1
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 5
51778: NEG
51779: PUSH
51780: LD_INT 0
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 5
51789: NEG
51790: PUSH
51791: LD_INT 1
51793: NEG
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 5
51801: NEG
51802: PUSH
51803: LD_INT 2
51805: NEG
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 3
51813: NEG
51814: PUSH
51815: LD_INT 2
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: ST_TO_ADDR
// end ; end ;
51869: GO 51872
51871: POP
// case btype of b_depot , b_warehouse :
51872: LD_VAR 0 1
51876: PUSH
51877: LD_INT 0
51879: DOUBLE
51880: EQUAL
51881: IFTRUE 51891
51883: LD_INT 1
51885: DOUBLE
51886: EQUAL
51887: IFTRUE 51891
51889: GO 52092
51891: POP
// case nation of nation_american :
51892: LD_VAR 0 5
51896: PUSH
51897: LD_INT 1
51899: DOUBLE
51900: EQUAL
51901: IFTRUE 51905
51903: GO 51961
51905: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
51906: LD_ADDR_VAR 0 9
51910: PUSH
51911: LD_VAR 0 11
51915: PUSH
51916: LD_VAR 0 12
51920: PUSH
51921: LD_VAR 0 13
51925: PUSH
51926: LD_VAR 0 14
51930: PUSH
51931: LD_VAR 0 15
51935: PUSH
51936: LD_VAR 0 16
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: LIST
51945: LIST
51946: LIST
51947: LIST
51948: PUSH
51949: LD_VAR 0 4
51953: PUSH
51954: LD_INT 1
51956: PLUS
51957: ARRAY
51958: ST_TO_ADDR
51959: GO 52090
51961: LD_INT 2
51963: DOUBLE
51964: EQUAL
51965: IFTRUE 51969
51967: GO 52025
51969: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
51970: LD_ADDR_VAR 0 9
51974: PUSH
51975: LD_VAR 0 17
51979: PUSH
51980: LD_VAR 0 18
51984: PUSH
51985: LD_VAR 0 19
51989: PUSH
51990: LD_VAR 0 20
51994: PUSH
51995: LD_VAR 0 21
51999: PUSH
52000: LD_VAR 0 22
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: PUSH
52013: LD_VAR 0 4
52017: PUSH
52018: LD_INT 1
52020: PLUS
52021: ARRAY
52022: ST_TO_ADDR
52023: GO 52090
52025: LD_INT 3
52027: DOUBLE
52028: EQUAL
52029: IFTRUE 52033
52031: GO 52089
52033: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
52034: LD_ADDR_VAR 0 9
52038: PUSH
52039: LD_VAR 0 23
52043: PUSH
52044: LD_VAR 0 24
52048: PUSH
52049: LD_VAR 0 25
52053: PUSH
52054: LD_VAR 0 26
52058: PUSH
52059: LD_VAR 0 27
52063: PUSH
52064: LD_VAR 0 28
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: PUSH
52077: LD_VAR 0 4
52081: PUSH
52082: LD_INT 1
52084: PLUS
52085: ARRAY
52086: ST_TO_ADDR
52087: GO 52090
52089: POP
52090: GO 52645
52092: LD_INT 2
52094: DOUBLE
52095: EQUAL
52096: IFTRUE 52106
52098: LD_INT 3
52100: DOUBLE
52101: EQUAL
52102: IFTRUE 52106
52104: GO 52162
52106: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
52107: LD_ADDR_VAR 0 9
52111: PUSH
52112: LD_VAR 0 29
52116: PUSH
52117: LD_VAR 0 30
52121: PUSH
52122: LD_VAR 0 31
52126: PUSH
52127: LD_VAR 0 32
52131: PUSH
52132: LD_VAR 0 33
52136: PUSH
52137: LD_VAR 0 34
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: PUSH
52150: LD_VAR 0 4
52154: PUSH
52155: LD_INT 1
52157: PLUS
52158: ARRAY
52159: ST_TO_ADDR
52160: GO 52645
52162: LD_INT 16
52164: DOUBLE
52165: EQUAL
52166: IFTRUE 52224
52168: LD_INT 17
52170: DOUBLE
52171: EQUAL
52172: IFTRUE 52224
52174: LD_INT 18
52176: DOUBLE
52177: EQUAL
52178: IFTRUE 52224
52180: LD_INT 19
52182: DOUBLE
52183: EQUAL
52184: IFTRUE 52224
52186: LD_INT 22
52188: DOUBLE
52189: EQUAL
52190: IFTRUE 52224
52192: LD_INT 20
52194: DOUBLE
52195: EQUAL
52196: IFTRUE 52224
52198: LD_INT 21
52200: DOUBLE
52201: EQUAL
52202: IFTRUE 52224
52204: LD_INT 23
52206: DOUBLE
52207: EQUAL
52208: IFTRUE 52224
52210: LD_INT 24
52212: DOUBLE
52213: EQUAL
52214: IFTRUE 52224
52216: LD_INT 25
52218: DOUBLE
52219: EQUAL
52220: IFTRUE 52224
52222: GO 52280
52224: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
52225: LD_ADDR_VAR 0 9
52229: PUSH
52230: LD_VAR 0 35
52234: PUSH
52235: LD_VAR 0 36
52239: PUSH
52240: LD_VAR 0 37
52244: PUSH
52245: LD_VAR 0 38
52249: PUSH
52250: LD_VAR 0 39
52254: PUSH
52255: LD_VAR 0 40
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: PUSH
52268: LD_VAR 0 4
52272: PUSH
52273: LD_INT 1
52275: PLUS
52276: ARRAY
52277: ST_TO_ADDR
52278: GO 52645
52280: LD_INT 6
52282: DOUBLE
52283: EQUAL
52284: IFTRUE 52336
52286: LD_INT 7
52288: DOUBLE
52289: EQUAL
52290: IFTRUE 52336
52292: LD_INT 8
52294: DOUBLE
52295: EQUAL
52296: IFTRUE 52336
52298: LD_INT 13
52300: DOUBLE
52301: EQUAL
52302: IFTRUE 52336
52304: LD_INT 12
52306: DOUBLE
52307: EQUAL
52308: IFTRUE 52336
52310: LD_INT 15
52312: DOUBLE
52313: EQUAL
52314: IFTRUE 52336
52316: LD_INT 11
52318: DOUBLE
52319: EQUAL
52320: IFTRUE 52336
52322: LD_INT 14
52324: DOUBLE
52325: EQUAL
52326: IFTRUE 52336
52328: LD_INT 10
52330: DOUBLE
52331: EQUAL
52332: IFTRUE 52336
52334: GO 52392
52336: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
52337: LD_ADDR_VAR 0 9
52341: PUSH
52342: LD_VAR 0 41
52346: PUSH
52347: LD_VAR 0 42
52351: PUSH
52352: LD_VAR 0 43
52356: PUSH
52357: LD_VAR 0 44
52361: PUSH
52362: LD_VAR 0 45
52366: PUSH
52367: LD_VAR 0 46
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: LIST
52378: LIST
52379: PUSH
52380: LD_VAR 0 4
52384: PUSH
52385: LD_INT 1
52387: PLUS
52388: ARRAY
52389: ST_TO_ADDR
52390: GO 52645
52392: LD_INT 36
52394: DOUBLE
52395: EQUAL
52396: IFTRUE 52400
52398: GO 52456
52400: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
52401: LD_ADDR_VAR 0 9
52405: PUSH
52406: LD_VAR 0 47
52410: PUSH
52411: LD_VAR 0 48
52415: PUSH
52416: LD_VAR 0 49
52420: PUSH
52421: LD_VAR 0 50
52425: PUSH
52426: LD_VAR 0 51
52430: PUSH
52431: LD_VAR 0 52
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: PUSH
52444: LD_VAR 0 4
52448: PUSH
52449: LD_INT 1
52451: PLUS
52452: ARRAY
52453: ST_TO_ADDR
52454: GO 52645
52456: LD_INT 4
52458: DOUBLE
52459: EQUAL
52460: IFTRUE 52482
52462: LD_INT 5
52464: DOUBLE
52465: EQUAL
52466: IFTRUE 52482
52468: LD_INT 34
52470: DOUBLE
52471: EQUAL
52472: IFTRUE 52482
52474: LD_INT 37
52476: DOUBLE
52477: EQUAL
52478: IFTRUE 52482
52480: GO 52538
52482: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
52483: LD_ADDR_VAR 0 9
52487: PUSH
52488: LD_VAR 0 53
52492: PUSH
52493: LD_VAR 0 54
52497: PUSH
52498: LD_VAR 0 55
52502: PUSH
52503: LD_VAR 0 56
52507: PUSH
52508: LD_VAR 0 57
52512: PUSH
52513: LD_VAR 0 58
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: PUSH
52526: LD_VAR 0 4
52530: PUSH
52531: LD_INT 1
52533: PLUS
52534: ARRAY
52535: ST_TO_ADDR
52536: GO 52645
52538: LD_INT 31
52540: DOUBLE
52541: EQUAL
52542: IFTRUE 52588
52544: LD_INT 32
52546: DOUBLE
52547: EQUAL
52548: IFTRUE 52588
52550: LD_INT 33
52552: DOUBLE
52553: EQUAL
52554: IFTRUE 52588
52556: LD_INT 27
52558: DOUBLE
52559: EQUAL
52560: IFTRUE 52588
52562: LD_INT 26
52564: DOUBLE
52565: EQUAL
52566: IFTRUE 52588
52568: LD_INT 28
52570: DOUBLE
52571: EQUAL
52572: IFTRUE 52588
52574: LD_INT 29
52576: DOUBLE
52577: EQUAL
52578: IFTRUE 52588
52580: LD_INT 30
52582: DOUBLE
52583: EQUAL
52584: IFTRUE 52588
52586: GO 52644
52588: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
52589: LD_ADDR_VAR 0 9
52593: PUSH
52594: LD_VAR 0 59
52598: PUSH
52599: LD_VAR 0 60
52603: PUSH
52604: LD_VAR 0 61
52608: PUSH
52609: LD_VAR 0 62
52613: PUSH
52614: LD_VAR 0 63
52618: PUSH
52619: LD_VAR 0 64
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: PUSH
52632: LD_VAR 0 4
52636: PUSH
52637: LD_INT 1
52639: PLUS
52640: ARRAY
52641: ST_TO_ADDR
52642: GO 52645
52644: POP
// temp_list2 = [ ] ;
52645: LD_ADDR_VAR 0 10
52649: PUSH
52650: EMPTY
52651: ST_TO_ADDR
// for i in temp_list do
52652: LD_ADDR_VAR 0 8
52656: PUSH
52657: LD_VAR 0 9
52661: PUSH
52662: FOR_IN
52663: IFFALSE 52715
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
52665: LD_ADDR_VAR 0 10
52669: PUSH
52670: LD_VAR 0 10
52674: PUSH
52675: LD_VAR 0 8
52679: PUSH
52680: LD_INT 1
52682: ARRAY
52683: PUSH
52684: LD_VAR 0 2
52688: PLUS
52689: PUSH
52690: LD_VAR 0 8
52694: PUSH
52695: LD_INT 2
52697: ARRAY
52698: PUSH
52699: LD_VAR 0 3
52703: PLUS
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: EMPTY
52710: LIST
52711: ADD
52712: ST_TO_ADDR
52713: GO 52662
52715: POP
52716: POP
// result = temp_list2 ;
52717: LD_ADDR_VAR 0 7
52721: PUSH
52722: LD_VAR 0 10
52726: ST_TO_ADDR
// end ;
52727: LD_VAR 0 7
52731: RET
// export function EnemyInRange ( unit , dist ) ; begin
52732: LD_INT 0
52734: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
52735: LD_ADDR_VAR 0 3
52739: PUSH
52740: LD_VAR 0 1
52744: PPUSH
52745: CALL_OW 255
52749: PPUSH
52750: LD_VAR 0 1
52754: PPUSH
52755: CALL_OW 250
52759: PPUSH
52760: LD_VAR 0 1
52764: PPUSH
52765: CALL_OW 251
52769: PPUSH
52770: LD_VAR 0 2
52774: PPUSH
52775: CALL 26836 0 4
52779: PUSH
52780: LD_INT 4
52782: ARRAY
52783: ST_TO_ADDR
// end ;
52784: LD_VAR 0 3
52788: RET
// export function PlayerSeeMe ( unit ) ; begin
52789: LD_INT 0
52791: PPUSH
// result := See ( your_side , unit ) ;
52792: LD_ADDR_VAR 0 2
52796: PUSH
52797: LD_OWVAR 2
52801: PPUSH
52802: LD_VAR 0 1
52806: PPUSH
52807: CALL_OW 292
52811: ST_TO_ADDR
// end ;
52812: LD_VAR 0 2
52816: RET
// export function ReverseDir ( unit ) ; begin
52817: LD_INT 0
52819: PPUSH
// if not unit then
52820: LD_VAR 0 1
52824: NOT
52825: IFFALSE 52829
// exit ;
52827: GO 52852
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
52829: LD_ADDR_VAR 0 2
52833: PUSH
52834: LD_VAR 0 1
52838: PPUSH
52839: CALL_OW 254
52843: PUSH
52844: LD_INT 3
52846: PLUS
52847: PUSH
52848: LD_INT 6
52850: MOD
52851: ST_TO_ADDR
// end ;
52852: LD_VAR 0 2
52856: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
52857: LD_INT 0
52859: PPUSH
52860: PPUSH
52861: PPUSH
52862: PPUSH
52863: PPUSH
// if not hexes then
52864: LD_VAR 0 2
52868: NOT
52869: IFFALSE 52873
// exit ;
52871: GO 53021
// dist := 9999 ;
52873: LD_ADDR_VAR 0 5
52877: PUSH
52878: LD_INT 9999
52880: ST_TO_ADDR
// for i = 1 to hexes do
52881: LD_ADDR_VAR 0 4
52885: PUSH
52886: DOUBLE
52887: LD_INT 1
52889: DEC
52890: ST_TO_ADDR
52891: LD_VAR 0 2
52895: PUSH
52896: FOR_TO
52897: IFFALSE 53009
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
52899: LD_VAR 0 1
52903: PPUSH
52904: LD_VAR 0 2
52908: PUSH
52909: LD_VAR 0 4
52913: ARRAY
52914: PUSH
52915: LD_INT 1
52917: ARRAY
52918: PPUSH
52919: LD_VAR 0 2
52923: PUSH
52924: LD_VAR 0 4
52928: ARRAY
52929: PUSH
52930: LD_INT 2
52932: ARRAY
52933: PPUSH
52934: CALL_OW 297
52938: PUSH
52939: LD_VAR 0 5
52943: LESS
52944: IFFALSE 53007
// begin hex := hexes [ i ] ;
52946: LD_ADDR_VAR 0 7
52950: PUSH
52951: LD_VAR 0 2
52955: PUSH
52956: LD_VAR 0 4
52960: ARRAY
52961: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52962: LD_ADDR_VAR 0 5
52966: PUSH
52967: LD_VAR 0 1
52971: PPUSH
52972: LD_VAR 0 2
52976: PUSH
52977: LD_VAR 0 4
52981: ARRAY
52982: PUSH
52983: LD_INT 1
52985: ARRAY
52986: PPUSH
52987: LD_VAR 0 2
52991: PUSH
52992: LD_VAR 0 4
52996: ARRAY
52997: PUSH
52998: LD_INT 2
53000: ARRAY
53001: PPUSH
53002: CALL_OW 297
53006: ST_TO_ADDR
// end ; end ;
53007: GO 52896
53009: POP
53010: POP
// result := hex ;
53011: LD_ADDR_VAR 0 3
53015: PUSH
53016: LD_VAR 0 7
53020: ST_TO_ADDR
// end ;
53021: LD_VAR 0 3
53025: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
53026: LD_INT 0
53028: PPUSH
53029: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
53030: LD_VAR 0 1
53034: NOT
53035: PUSH
53036: LD_VAR 0 1
53040: PUSH
53041: LD_INT 21
53043: PUSH
53044: LD_INT 2
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PUSH
53051: LD_INT 23
53053: PUSH
53054: LD_INT 2
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PPUSH
53065: CALL_OW 69
53069: IN
53070: NOT
53071: OR
53072: IFFALSE 53076
// exit ;
53074: GO 53123
// for i = 1 to 3 do
53076: LD_ADDR_VAR 0 3
53080: PUSH
53081: DOUBLE
53082: LD_INT 1
53084: DEC
53085: ST_TO_ADDR
53086: LD_INT 3
53088: PUSH
53089: FOR_TO
53090: IFFALSE 53121
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
53092: LD_VAR 0 1
53096: PPUSH
53097: CALL_OW 250
53101: PPUSH
53102: LD_VAR 0 1
53106: PPUSH
53107: CALL_OW 251
53111: PPUSH
53112: LD_INT 1
53114: PPUSH
53115: CALL_OW 453
53119: GO 53089
53121: POP
53122: POP
// end ;
53123: LD_VAR 0 2
53127: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
53128: LD_INT 0
53130: PPUSH
53131: PPUSH
53132: PPUSH
53133: PPUSH
53134: PPUSH
53135: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
53136: LD_VAR 0 1
53140: NOT
53141: PUSH
53142: LD_VAR 0 2
53146: NOT
53147: OR
53148: PUSH
53149: LD_VAR 0 1
53153: PPUSH
53154: CALL_OW 314
53158: OR
53159: IFFALSE 53163
// exit ;
53161: GO 53604
// x := GetX ( enemy_unit ) ;
53163: LD_ADDR_VAR 0 7
53167: PUSH
53168: LD_VAR 0 2
53172: PPUSH
53173: CALL_OW 250
53177: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
53178: LD_ADDR_VAR 0 8
53182: PUSH
53183: LD_VAR 0 2
53187: PPUSH
53188: CALL_OW 251
53192: ST_TO_ADDR
// if not x or not y then
53193: LD_VAR 0 7
53197: NOT
53198: PUSH
53199: LD_VAR 0 8
53203: NOT
53204: OR
53205: IFFALSE 53209
// exit ;
53207: GO 53604
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
53209: LD_ADDR_VAR 0 6
53213: PUSH
53214: LD_VAR 0 7
53218: PPUSH
53219: LD_INT 0
53221: PPUSH
53222: LD_INT 4
53224: PPUSH
53225: CALL_OW 272
53229: PUSH
53230: LD_VAR 0 8
53234: PPUSH
53235: LD_INT 0
53237: PPUSH
53238: LD_INT 4
53240: PPUSH
53241: CALL_OW 273
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_VAR 0 7
53254: PPUSH
53255: LD_INT 1
53257: PPUSH
53258: LD_INT 4
53260: PPUSH
53261: CALL_OW 272
53265: PUSH
53266: LD_VAR 0 8
53270: PPUSH
53271: LD_INT 1
53273: PPUSH
53274: LD_INT 4
53276: PPUSH
53277: CALL_OW 273
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: LD_VAR 0 7
53290: PPUSH
53291: LD_INT 2
53293: PPUSH
53294: LD_INT 4
53296: PPUSH
53297: CALL_OW 272
53301: PUSH
53302: LD_VAR 0 8
53306: PPUSH
53307: LD_INT 2
53309: PPUSH
53310: LD_INT 4
53312: PPUSH
53313: CALL_OW 273
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_VAR 0 7
53326: PPUSH
53327: LD_INT 3
53329: PPUSH
53330: LD_INT 4
53332: PPUSH
53333: CALL_OW 272
53337: PUSH
53338: LD_VAR 0 8
53342: PPUSH
53343: LD_INT 3
53345: PPUSH
53346: LD_INT 4
53348: PPUSH
53349: CALL_OW 273
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_VAR 0 7
53362: PPUSH
53363: LD_INT 4
53365: PPUSH
53366: LD_INT 4
53368: PPUSH
53369: CALL_OW 272
53373: PUSH
53374: LD_VAR 0 8
53378: PPUSH
53379: LD_INT 4
53381: PPUSH
53382: LD_INT 4
53384: PPUSH
53385: CALL_OW 273
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_VAR 0 7
53398: PPUSH
53399: LD_INT 5
53401: PPUSH
53402: LD_INT 4
53404: PPUSH
53405: CALL_OW 272
53409: PUSH
53410: LD_VAR 0 8
53414: PPUSH
53415: LD_INT 5
53417: PPUSH
53418: LD_INT 4
53420: PPUSH
53421: CALL_OW 273
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: ST_TO_ADDR
// for i = tmp downto 1 do
53438: LD_ADDR_VAR 0 4
53442: PUSH
53443: DOUBLE
53444: LD_VAR 0 6
53448: INC
53449: ST_TO_ADDR
53450: LD_INT 1
53452: PUSH
53453: FOR_DOWNTO
53454: IFFALSE 53555
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
53456: LD_VAR 0 6
53460: PUSH
53461: LD_VAR 0 4
53465: ARRAY
53466: PUSH
53467: LD_INT 1
53469: ARRAY
53470: PPUSH
53471: LD_VAR 0 6
53475: PUSH
53476: LD_VAR 0 4
53480: ARRAY
53481: PUSH
53482: LD_INT 2
53484: ARRAY
53485: PPUSH
53486: CALL_OW 488
53490: NOT
53491: PUSH
53492: LD_VAR 0 6
53496: PUSH
53497: LD_VAR 0 4
53501: ARRAY
53502: PUSH
53503: LD_INT 1
53505: ARRAY
53506: PPUSH
53507: LD_VAR 0 6
53511: PUSH
53512: LD_VAR 0 4
53516: ARRAY
53517: PUSH
53518: LD_INT 2
53520: ARRAY
53521: PPUSH
53522: CALL_OW 428
53526: PUSH
53527: LD_INT 0
53529: NONEQUAL
53530: OR
53531: IFFALSE 53553
// tmp := Delete ( tmp , i ) ;
53533: LD_ADDR_VAR 0 6
53537: PUSH
53538: LD_VAR 0 6
53542: PPUSH
53543: LD_VAR 0 4
53547: PPUSH
53548: CALL_OW 3
53552: ST_TO_ADDR
53553: GO 53453
53555: POP
53556: POP
// j := GetClosestHex ( unit , tmp ) ;
53557: LD_ADDR_VAR 0 5
53561: PUSH
53562: LD_VAR 0 1
53566: PPUSH
53567: LD_VAR 0 6
53571: PPUSH
53572: CALL 52857 0 2
53576: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
53577: LD_VAR 0 1
53581: PPUSH
53582: LD_VAR 0 5
53586: PUSH
53587: LD_INT 1
53589: ARRAY
53590: PPUSH
53591: LD_VAR 0 5
53595: PUSH
53596: LD_INT 2
53598: ARRAY
53599: PPUSH
53600: CALL_OW 111
// end ;
53604: LD_VAR 0 3
53608: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
53609: LD_INT 0
53611: PPUSH
53612: PPUSH
53613: PPUSH
// uc_side = 0 ;
53614: LD_ADDR_OWVAR 20
53618: PUSH
53619: LD_INT 0
53621: ST_TO_ADDR
// uc_nation = 0 ;
53622: LD_ADDR_OWVAR 21
53626: PUSH
53627: LD_INT 0
53629: ST_TO_ADDR
// InitHc ;
53630: CALL_OW 19
// InitVc ;
53634: CALL_OW 20
// if mastodonts then
53638: LD_VAR 0 6
53642: IFFALSE 53709
// for i = 1 to mastodonts do
53644: LD_ADDR_VAR 0 11
53648: PUSH
53649: DOUBLE
53650: LD_INT 1
53652: DEC
53653: ST_TO_ADDR
53654: LD_VAR 0 6
53658: PUSH
53659: FOR_TO
53660: IFFALSE 53707
// begin vc_chassis := 31 ;
53662: LD_ADDR_OWVAR 37
53666: PUSH
53667: LD_INT 31
53669: ST_TO_ADDR
// vc_control := control_rider ;
53670: LD_ADDR_OWVAR 38
53674: PUSH
53675: LD_INT 4
53677: ST_TO_ADDR
// animal := CreateVehicle ;
53678: LD_ADDR_VAR 0 12
53682: PUSH
53683: CALL_OW 45
53687: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53688: LD_VAR 0 12
53692: PPUSH
53693: LD_VAR 0 8
53697: PPUSH
53698: LD_INT 0
53700: PPUSH
53701: CALL 55778 0 3
// end ;
53705: GO 53659
53707: POP
53708: POP
// if horses then
53709: LD_VAR 0 5
53713: IFFALSE 53780
// for i = 1 to horses do
53715: LD_ADDR_VAR 0 11
53719: PUSH
53720: DOUBLE
53721: LD_INT 1
53723: DEC
53724: ST_TO_ADDR
53725: LD_VAR 0 5
53729: PUSH
53730: FOR_TO
53731: IFFALSE 53778
// begin hc_class := 21 ;
53733: LD_ADDR_OWVAR 28
53737: PUSH
53738: LD_INT 21
53740: ST_TO_ADDR
// hc_gallery :=  ;
53741: LD_ADDR_OWVAR 33
53745: PUSH
53746: LD_STRING 
53748: ST_TO_ADDR
// animal := CreateHuman ;
53749: LD_ADDR_VAR 0 12
53753: PUSH
53754: CALL_OW 44
53758: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53759: LD_VAR 0 12
53763: PPUSH
53764: LD_VAR 0 8
53768: PPUSH
53769: LD_INT 0
53771: PPUSH
53772: CALL 55778 0 3
// end ;
53776: GO 53730
53778: POP
53779: POP
// if birds then
53780: LD_VAR 0 1
53784: IFFALSE 53851
// for i = 1 to birds do
53786: LD_ADDR_VAR 0 11
53790: PUSH
53791: DOUBLE
53792: LD_INT 1
53794: DEC
53795: ST_TO_ADDR
53796: LD_VAR 0 1
53800: PUSH
53801: FOR_TO
53802: IFFALSE 53849
// begin hc_class = 18 ;
53804: LD_ADDR_OWVAR 28
53808: PUSH
53809: LD_INT 18
53811: ST_TO_ADDR
// hc_gallery =  ;
53812: LD_ADDR_OWVAR 33
53816: PUSH
53817: LD_STRING 
53819: ST_TO_ADDR
// animal := CreateHuman ;
53820: LD_ADDR_VAR 0 12
53824: PUSH
53825: CALL_OW 44
53829: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53830: LD_VAR 0 12
53834: PPUSH
53835: LD_VAR 0 8
53839: PPUSH
53840: LD_INT 0
53842: PPUSH
53843: CALL 55778 0 3
// end ;
53847: GO 53801
53849: POP
53850: POP
// if tigers then
53851: LD_VAR 0 2
53855: IFFALSE 53939
// for i = 1 to tigers do
53857: LD_ADDR_VAR 0 11
53861: PUSH
53862: DOUBLE
53863: LD_INT 1
53865: DEC
53866: ST_TO_ADDR
53867: LD_VAR 0 2
53871: PUSH
53872: FOR_TO
53873: IFFALSE 53937
// begin hc_class = class_tiger ;
53875: LD_ADDR_OWVAR 28
53879: PUSH
53880: LD_INT 14
53882: ST_TO_ADDR
// hc_gallery =  ;
53883: LD_ADDR_OWVAR 33
53887: PUSH
53888: LD_STRING 
53890: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
53891: LD_ADDR_OWVAR 35
53895: PUSH
53896: LD_INT 7
53898: NEG
53899: PPUSH
53900: LD_INT 7
53902: PPUSH
53903: CALL_OW 12
53907: ST_TO_ADDR
// animal := CreateHuman ;
53908: LD_ADDR_VAR 0 12
53912: PUSH
53913: CALL_OW 44
53917: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53918: LD_VAR 0 12
53922: PPUSH
53923: LD_VAR 0 8
53927: PPUSH
53928: LD_INT 0
53930: PPUSH
53931: CALL 55778 0 3
// end ;
53935: GO 53872
53937: POP
53938: POP
// if apemans then
53939: LD_VAR 0 3
53943: IFFALSE 54066
// for i = 1 to apemans do
53945: LD_ADDR_VAR 0 11
53949: PUSH
53950: DOUBLE
53951: LD_INT 1
53953: DEC
53954: ST_TO_ADDR
53955: LD_VAR 0 3
53959: PUSH
53960: FOR_TO
53961: IFFALSE 54064
// begin hc_class = class_apeman ;
53963: LD_ADDR_OWVAR 28
53967: PUSH
53968: LD_INT 12
53970: ST_TO_ADDR
// hc_gallery =  ;
53971: LD_ADDR_OWVAR 33
53975: PUSH
53976: LD_STRING 
53978: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
53979: LD_ADDR_OWVAR 35
53983: PUSH
53984: LD_INT 5
53986: NEG
53987: PPUSH
53988: LD_INT 5
53990: PPUSH
53991: CALL_OW 12
53995: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
53996: LD_ADDR_OWVAR 31
54000: PUSH
54001: LD_INT 1
54003: PPUSH
54004: LD_INT 3
54006: PPUSH
54007: CALL_OW 12
54011: PUSH
54012: LD_INT 1
54014: PPUSH
54015: LD_INT 3
54017: PPUSH
54018: CALL_OW 12
54022: PUSH
54023: LD_INT 0
54025: PUSH
54026: LD_INT 0
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: ST_TO_ADDR
// animal := CreateHuman ;
54035: LD_ADDR_VAR 0 12
54039: PUSH
54040: CALL_OW 44
54044: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54045: LD_VAR 0 12
54049: PPUSH
54050: LD_VAR 0 8
54054: PPUSH
54055: LD_INT 0
54057: PPUSH
54058: CALL 55778 0 3
// end ;
54062: GO 53960
54064: POP
54065: POP
// if enchidnas then
54066: LD_VAR 0 4
54070: IFFALSE 54137
// for i = 1 to enchidnas do
54072: LD_ADDR_VAR 0 11
54076: PUSH
54077: DOUBLE
54078: LD_INT 1
54080: DEC
54081: ST_TO_ADDR
54082: LD_VAR 0 4
54086: PUSH
54087: FOR_TO
54088: IFFALSE 54135
// begin hc_class = 13 ;
54090: LD_ADDR_OWVAR 28
54094: PUSH
54095: LD_INT 13
54097: ST_TO_ADDR
// hc_gallery =  ;
54098: LD_ADDR_OWVAR 33
54102: PUSH
54103: LD_STRING 
54105: ST_TO_ADDR
// animal := CreateHuman ;
54106: LD_ADDR_VAR 0 12
54110: PUSH
54111: CALL_OW 44
54115: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54116: LD_VAR 0 12
54120: PPUSH
54121: LD_VAR 0 8
54125: PPUSH
54126: LD_INT 0
54128: PPUSH
54129: CALL 55778 0 3
// end ;
54133: GO 54087
54135: POP
54136: POP
// if fishes then
54137: LD_VAR 0 7
54141: IFFALSE 54208
// for i = 1 to fishes do
54143: LD_ADDR_VAR 0 11
54147: PUSH
54148: DOUBLE
54149: LD_INT 1
54151: DEC
54152: ST_TO_ADDR
54153: LD_VAR 0 7
54157: PUSH
54158: FOR_TO
54159: IFFALSE 54206
// begin hc_class = 20 ;
54161: LD_ADDR_OWVAR 28
54165: PUSH
54166: LD_INT 20
54168: ST_TO_ADDR
// hc_gallery =  ;
54169: LD_ADDR_OWVAR 33
54173: PUSH
54174: LD_STRING 
54176: ST_TO_ADDR
// animal := CreateHuman ;
54177: LD_ADDR_VAR 0 12
54181: PUSH
54182: CALL_OW 44
54186: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
54187: LD_VAR 0 12
54191: PPUSH
54192: LD_VAR 0 9
54196: PPUSH
54197: LD_INT 0
54199: PPUSH
54200: CALL 55778 0 3
// end ;
54204: GO 54158
54206: POP
54207: POP
// end ;
54208: LD_VAR 0 10
54212: RET
// export function WantHeal ( sci , unit ) ; begin
54213: LD_INT 0
54215: PPUSH
// if GetTaskList ( sci ) > 0 then
54216: LD_VAR 0 1
54220: PPUSH
54221: CALL_OW 437
54225: PUSH
54226: LD_INT 0
54228: GREATER
54229: IFFALSE 54299
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
54231: LD_VAR 0 1
54235: PPUSH
54236: CALL_OW 437
54240: PUSH
54241: LD_INT 1
54243: ARRAY
54244: PUSH
54245: LD_INT 1
54247: ARRAY
54248: PUSH
54249: LD_STRING l
54251: EQUAL
54252: PUSH
54253: LD_VAR 0 1
54257: PPUSH
54258: CALL_OW 437
54262: PUSH
54263: LD_INT 1
54265: ARRAY
54266: PUSH
54267: LD_INT 4
54269: ARRAY
54270: PUSH
54271: LD_VAR 0 2
54275: EQUAL
54276: AND
54277: IFFALSE 54289
// result := true else
54279: LD_ADDR_VAR 0 3
54283: PUSH
54284: LD_INT 1
54286: ST_TO_ADDR
54287: GO 54297
// result := false ;
54289: LD_ADDR_VAR 0 3
54293: PUSH
54294: LD_INT 0
54296: ST_TO_ADDR
// end else
54297: GO 54307
// result := false ;
54299: LD_ADDR_VAR 0 3
54303: PUSH
54304: LD_INT 0
54306: ST_TO_ADDR
// end ;
54307: LD_VAR 0 3
54311: RET
// export function HealTarget ( sci ) ; begin
54312: LD_INT 0
54314: PPUSH
// if not sci then
54315: LD_VAR 0 1
54319: NOT
54320: IFFALSE 54324
// exit ;
54322: GO 54389
// result := 0 ;
54324: LD_ADDR_VAR 0 2
54328: PUSH
54329: LD_INT 0
54331: ST_TO_ADDR
// if GetTaskList ( sci ) then
54332: LD_VAR 0 1
54336: PPUSH
54337: CALL_OW 437
54341: IFFALSE 54389
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
54343: LD_VAR 0 1
54347: PPUSH
54348: CALL_OW 437
54352: PUSH
54353: LD_INT 1
54355: ARRAY
54356: PUSH
54357: LD_INT 1
54359: ARRAY
54360: PUSH
54361: LD_STRING l
54363: EQUAL
54364: IFFALSE 54389
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
54366: LD_ADDR_VAR 0 2
54370: PUSH
54371: LD_VAR 0 1
54375: PPUSH
54376: CALL_OW 437
54380: PUSH
54381: LD_INT 1
54383: ARRAY
54384: PUSH
54385: LD_INT 4
54387: ARRAY
54388: ST_TO_ADDR
// end ;
54389: LD_VAR 0 2
54393: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
54394: LD_INT 0
54396: PPUSH
54397: PPUSH
54398: PPUSH
54399: PPUSH
// if not base_units then
54400: LD_VAR 0 1
54404: NOT
54405: IFFALSE 54409
// exit ;
54407: GO 54496
// result := false ;
54409: LD_ADDR_VAR 0 2
54413: PUSH
54414: LD_INT 0
54416: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
54417: LD_ADDR_VAR 0 5
54421: PUSH
54422: LD_VAR 0 1
54426: PPUSH
54427: LD_INT 21
54429: PUSH
54430: LD_INT 3
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PPUSH
54437: CALL_OW 72
54441: ST_TO_ADDR
// if not tmp then
54442: LD_VAR 0 5
54446: NOT
54447: IFFALSE 54451
// exit ;
54449: GO 54496
// for i in tmp do
54451: LD_ADDR_VAR 0 3
54455: PUSH
54456: LD_VAR 0 5
54460: PUSH
54461: FOR_IN
54462: IFFALSE 54494
// begin result := EnemyInRange ( i , 22 ) ;
54464: LD_ADDR_VAR 0 2
54468: PUSH
54469: LD_VAR 0 3
54473: PPUSH
54474: LD_INT 22
54476: PPUSH
54477: CALL 52732 0 2
54481: ST_TO_ADDR
// if result then
54482: LD_VAR 0 2
54486: IFFALSE 54492
// exit ;
54488: POP
54489: POP
54490: GO 54496
// end ;
54492: GO 54461
54494: POP
54495: POP
// end ;
54496: LD_VAR 0 2
54500: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
54501: LD_INT 0
54503: PPUSH
54504: PPUSH
// if not units then
54505: LD_VAR 0 1
54509: NOT
54510: IFFALSE 54514
// exit ;
54512: GO 54584
// result := [ ] ;
54514: LD_ADDR_VAR 0 3
54518: PUSH
54519: EMPTY
54520: ST_TO_ADDR
// for i in units do
54521: LD_ADDR_VAR 0 4
54525: PUSH
54526: LD_VAR 0 1
54530: PUSH
54531: FOR_IN
54532: IFFALSE 54582
// if GetTag ( i ) = tag then
54534: LD_VAR 0 4
54538: PPUSH
54539: CALL_OW 110
54543: PUSH
54544: LD_VAR 0 2
54548: EQUAL
54549: IFFALSE 54580
// result := Insert ( result , result + 1 , i ) ;
54551: LD_ADDR_VAR 0 3
54555: PUSH
54556: LD_VAR 0 3
54560: PPUSH
54561: LD_VAR 0 3
54565: PUSH
54566: LD_INT 1
54568: PLUS
54569: PPUSH
54570: LD_VAR 0 4
54574: PPUSH
54575: CALL_OW 2
54579: ST_TO_ADDR
54580: GO 54531
54582: POP
54583: POP
// end ;
54584: LD_VAR 0 3
54588: RET
// export function IsDriver ( un ) ; begin
54589: LD_INT 0
54591: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
54592: LD_ADDR_VAR 0 2
54596: PUSH
54597: LD_VAR 0 1
54601: PUSH
54602: LD_INT 55
54604: PUSH
54605: EMPTY
54606: LIST
54607: PPUSH
54608: CALL_OW 69
54612: IN
54613: ST_TO_ADDR
// end ;
54614: LD_VAR 0 2
54618: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
54619: LD_INT 0
54621: PPUSH
54622: PPUSH
// list := [ ] ;
54623: LD_ADDR_VAR 0 5
54627: PUSH
54628: EMPTY
54629: ST_TO_ADDR
// case d of 0 :
54630: LD_VAR 0 3
54634: PUSH
54635: LD_INT 0
54637: DOUBLE
54638: EQUAL
54639: IFTRUE 54643
54641: GO 54776
54643: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
54644: LD_ADDR_VAR 0 5
54648: PUSH
54649: LD_VAR 0 1
54653: PUSH
54654: LD_INT 4
54656: MINUS
54657: PUSH
54658: LD_VAR 0 2
54662: PUSH
54663: LD_INT 4
54665: MINUS
54666: PUSH
54667: LD_INT 2
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: LIST
54674: PUSH
54675: LD_VAR 0 1
54679: PUSH
54680: LD_INT 3
54682: MINUS
54683: PUSH
54684: LD_VAR 0 2
54688: PUSH
54689: LD_INT 1
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: LIST
54696: PUSH
54697: LD_VAR 0 1
54701: PUSH
54702: LD_INT 4
54704: PLUS
54705: PUSH
54706: LD_VAR 0 2
54710: PUSH
54711: LD_INT 4
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: LIST
54718: PUSH
54719: LD_VAR 0 1
54723: PUSH
54724: LD_INT 3
54726: PLUS
54727: PUSH
54728: LD_VAR 0 2
54732: PUSH
54733: LD_INT 3
54735: PLUS
54736: PUSH
54737: LD_INT 5
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: LIST
54744: PUSH
54745: LD_VAR 0 1
54749: PUSH
54750: LD_VAR 0 2
54754: PUSH
54755: LD_INT 4
54757: PLUS
54758: PUSH
54759: LD_INT 0
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: LIST
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: ST_TO_ADDR
// end ; 1 :
54774: GO 55474
54776: LD_INT 1
54778: DOUBLE
54779: EQUAL
54780: IFTRUE 54784
54782: GO 54917
54784: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
54785: LD_ADDR_VAR 0 5
54789: PUSH
54790: LD_VAR 0 1
54794: PUSH
54795: LD_VAR 0 2
54799: PUSH
54800: LD_INT 4
54802: MINUS
54803: PUSH
54804: LD_INT 3
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: LIST
54811: PUSH
54812: LD_VAR 0 1
54816: PUSH
54817: LD_INT 3
54819: MINUS
54820: PUSH
54821: LD_VAR 0 2
54825: PUSH
54826: LD_INT 3
54828: MINUS
54829: PUSH
54830: LD_INT 2
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: LIST
54837: PUSH
54838: LD_VAR 0 1
54842: PUSH
54843: LD_INT 4
54845: MINUS
54846: PUSH
54847: LD_VAR 0 2
54851: PUSH
54852: LD_INT 1
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: LIST
54859: PUSH
54860: LD_VAR 0 1
54864: PUSH
54865: LD_VAR 0 2
54869: PUSH
54870: LD_INT 3
54872: PLUS
54873: PUSH
54874: LD_INT 0
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: LIST
54881: PUSH
54882: LD_VAR 0 1
54886: PUSH
54887: LD_INT 4
54889: PLUS
54890: PUSH
54891: LD_VAR 0 2
54895: PUSH
54896: LD_INT 4
54898: PLUS
54899: PUSH
54900: LD_INT 5
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: LIST
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: ST_TO_ADDR
// end ; 2 :
54915: GO 55474
54917: LD_INT 2
54919: DOUBLE
54920: EQUAL
54921: IFTRUE 54925
54923: GO 55054
54925: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
54926: LD_ADDR_VAR 0 5
54930: PUSH
54931: LD_VAR 0 1
54935: PUSH
54936: LD_VAR 0 2
54940: PUSH
54941: LD_INT 3
54943: MINUS
54944: PUSH
54945: LD_INT 3
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: LIST
54952: PUSH
54953: LD_VAR 0 1
54957: PUSH
54958: LD_INT 4
54960: PLUS
54961: PUSH
54962: LD_VAR 0 2
54966: PUSH
54967: LD_INT 4
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: LIST
54974: PUSH
54975: LD_VAR 0 1
54979: PUSH
54980: LD_VAR 0 2
54984: PUSH
54985: LD_INT 4
54987: PLUS
54988: PUSH
54989: LD_INT 0
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: LIST
54996: PUSH
54997: LD_VAR 0 1
55001: PUSH
55002: LD_INT 3
55004: MINUS
55005: PUSH
55006: LD_VAR 0 2
55010: PUSH
55011: LD_INT 1
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: LIST
55018: PUSH
55019: LD_VAR 0 1
55023: PUSH
55024: LD_INT 4
55026: MINUS
55027: PUSH
55028: LD_VAR 0 2
55032: PUSH
55033: LD_INT 4
55035: MINUS
55036: PUSH
55037: LD_INT 2
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: LIST
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: ST_TO_ADDR
// end ; 3 :
55052: GO 55474
55054: LD_INT 3
55056: DOUBLE
55057: EQUAL
55058: IFTRUE 55062
55060: GO 55195
55062: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
55063: LD_ADDR_VAR 0 5
55067: PUSH
55068: LD_VAR 0 1
55072: PUSH
55073: LD_INT 3
55075: PLUS
55076: PUSH
55077: LD_VAR 0 2
55081: PUSH
55082: LD_INT 4
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: LIST
55089: PUSH
55090: LD_VAR 0 1
55094: PUSH
55095: LD_INT 4
55097: PLUS
55098: PUSH
55099: LD_VAR 0 2
55103: PUSH
55104: LD_INT 4
55106: PLUS
55107: PUSH
55108: LD_INT 5
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: LIST
55115: PUSH
55116: LD_VAR 0 1
55120: PUSH
55121: LD_INT 4
55123: MINUS
55124: PUSH
55125: LD_VAR 0 2
55129: PUSH
55130: LD_INT 1
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: LIST
55137: PUSH
55138: LD_VAR 0 1
55142: PUSH
55143: LD_VAR 0 2
55147: PUSH
55148: LD_INT 4
55150: MINUS
55151: PUSH
55152: LD_INT 3
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: LIST
55159: PUSH
55160: LD_VAR 0 1
55164: PUSH
55165: LD_INT 3
55167: MINUS
55168: PUSH
55169: LD_VAR 0 2
55173: PUSH
55174: LD_INT 3
55176: MINUS
55177: PUSH
55178: LD_INT 2
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: LIST
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: ST_TO_ADDR
// end ; 4 :
55193: GO 55474
55195: LD_INT 4
55197: DOUBLE
55198: EQUAL
55199: IFTRUE 55203
55201: GO 55336
55203: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
55204: LD_ADDR_VAR 0 5
55208: PUSH
55209: LD_VAR 0 1
55213: PUSH
55214: LD_VAR 0 2
55218: PUSH
55219: LD_INT 4
55221: PLUS
55222: PUSH
55223: LD_INT 0
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: LIST
55230: PUSH
55231: LD_VAR 0 1
55235: PUSH
55236: LD_INT 3
55238: PLUS
55239: PUSH
55240: LD_VAR 0 2
55244: PUSH
55245: LD_INT 3
55247: PLUS
55248: PUSH
55249: LD_INT 5
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: LIST
55256: PUSH
55257: LD_VAR 0 1
55261: PUSH
55262: LD_INT 4
55264: PLUS
55265: PUSH
55266: LD_VAR 0 2
55270: PUSH
55271: LD_INT 4
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: LIST
55278: PUSH
55279: LD_VAR 0 1
55283: PUSH
55284: LD_VAR 0 2
55288: PUSH
55289: LD_INT 3
55291: MINUS
55292: PUSH
55293: LD_INT 3
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: LIST
55300: PUSH
55301: LD_VAR 0 1
55305: PUSH
55306: LD_INT 4
55308: MINUS
55309: PUSH
55310: LD_VAR 0 2
55314: PUSH
55315: LD_INT 4
55317: MINUS
55318: PUSH
55319: LD_INT 2
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: LIST
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: ST_TO_ADDR
// end ; 5 :
55334: GO 55474
55336: LD_INT 5
55338: DOUBLE
55339: EQUAL
55340: IFTRUE 55344
55342: GO 55473
55344: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
55345: LD_ADDR_VAR 0 5
55349: PUSH
55350: LD_VAR 0 1
55354: PUSH
55355: LD_INT 4
55357: MINUS
55358: PUSH
55359: LD_VAR 0 2
55363: PUSH
55364: LD_INT 1
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: LIST
55371: PUSH
55372: LD_VAR 0 1
55376: PUSH
55377: LD_VAR 0 2
55381: PUSH
55382: LD_INT 4
55384: MINUS
55385: PUSH
55386: LD_INT 3
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: LIST
55393: PUSH
55394: LD_VAR 0 1
55398: PUSH
55399: LD_INT 4
55401: PLUS
55402: PUSH
55403: LD_VAR 0 2
55407: PUSH
55408: LD_INT 4
55410: PLUS
55411: PUSH
55412: LD_INT 5
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: LIST
55419: PUSH
55420: LD_VAR 0 1
55424: PUSH
55425: LD_INT 3
55427: PLUS
55428: PUSH
55429: LD_VAR 0 2
55433: PUSH
55434: LD_INT 4
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: LIST
55441: PUSH
55442: LD_VAR 0 1
55446: PUSH
55447: LD_VAR 0 2
55451: PUSH
55452: LD_INT 3
55454: PLUS
55455: PUSH
55456: LD_INT 0
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: LIST
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: ST_TO_ADDR
// end ; end ;
55471: GO 55474
55473: POP
// result := list ;
55474: LD_ADDR_VAR 0 4
55478: PUSH
55479: LD_VAR 0 5
55483: ST_TO_ADDR
// end ;
55484: LD_VAR 0 4
55488: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
55489: LD_INT 0
55491: PPUSH
55492: PPUSH
55493: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
55494: LD_VAR 0 1
55498: NOT
55499: PUSH
55500: LD_VAR 0 2
55504: PUSH
55505: LD_INT 1
55507: PUSH
55508: LD_INT 2
55510: PUSH
55511: LD_INT 3
55513: PUSH
55514: LD_INT 4
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: IN
55523: NOT
55524: OR
55525: IFFALSE 55529
// exit ;
55527: GO 55621
// tmp := [ ] ;
55529: LD_ADDR_VAR 0 5
55533: PUSH
55534: EMPTY
55535: ST_TO_ADDR
// for i in units do
55536: LD_ADDR_VAR 0 4
55540: PUSH
55541: LD_VAR 0 1
55545: PUSH
55546: FOR_IN
55547: IFFALSE 55590
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
55549: LD_ADDR_VAR 0 5
55553: PUSH
55554: LD_VAR 0 5
55558: PPUSH
55559: LD_VAR 0 5
55563: PUSH
55564: LD_INT 1
55566: PLUS
55567: PPUSH
55568: LD_VAR 0 4
55572: PPUSH
55573: LD_VAR 0 2
55577: PPUSH
55578: CALL_OW 259
55582: PPUSH
55583: CALL_OW 2
55587: ST_TO_ADDR
55588: GO 55546
55590: POP
55591: POP
// if not tmp then
55592: LD_VAR 0 5
55596: NOT
55597: IFFALSE 55601
// exit ;
55599: GO 55621
// result := SortListByListDesc ( units , tmp ) ;
55601: LD_ADDR_VAR 0 3
55605: PUSH
55606: LD_VAR 0 1
55610: PPUSH
55611: LD_VAR 0 5
55615: PPUSH
55616: CALL_OW 77
55620: ST_TO_ADDR
// end ;
55621: LD_VAR 0 3
55625: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
55626: LD_INT 0
55628: PPUSH
55629: PPUSH
55630: PPUSH
// x := GetX ( building ) ;
55631: LD_ADDR_VAR 0 4
55635: PUSH
55636: LD_VAR 0 2
55640: PPUSH
55641: CALL_OW 250
55645: ST_TO_ADDR
// y := GetY ( building ) ;
55646: LD_ADDR_VAR 0 5
55650: PUSH
55651: LD_VAR 0 2
55655: PPUSH
55656: CALL_OW 251
55660: ST_TO_ADDR
// if GetTaskList ( unit ) then
55661: LD_VAR 0 1
55665: PPUSH
55666: CALL_OW 437
55670: IFFALSE 55765
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
55672: LD_STRING e
55674: PUSH
55675: LD_VAR 0 1
55679: PPUSH
55680: CALL_OW 437
55684: PUSH
55685: LD_INT 1
55687: ARRAY
55688: PUSH
55689: LD_INT 1
55691: ARRAY
55692: EQUAL
55693: PUSH
55694: LD_VAR 0 4
55698: PUSH
55699: LD_VAR 0 1
55703: PPUSH
55704: CALL_OW 437
55708: PUSH
55709: LD_INT 1
55711: ARRAY
55712: PUSH
55713: LD_INT 2
55715: ARRAY
55716: EQUAL
55717: AND
55718: PUSH
55719: LD_VAR 0 5
55723: PUSH
55724: LD_VAR 0 1
55728: PPUSH
55729: CALL_OW 437
55733: PUSH
55734: LD_INT 1
55736: ARRAY
55737: PUSH
55738: LD_INT 3
55740: ARRAY
55741: EQUAL
55742: AND
55743: IFFALSE 55755
// result := true else
55745: LD_ADDR_VAR 0 3
55749: PUSH
55750: LD_INT 1
55752: ST_TO_ADDR
55753: GO 55763
// result := false ;
55755: LD_ADDR_VAR 0 3
55759: PUSH
55760: LD_INT 0
55762: ST_TO_ADDR
// end else
55763: GO 55773
// result := false ;
55765: LD_ADDR_VAR 0 3
55769: PUSH
55770: LD_INT 0
55772: ST_TO_ADDR
// end ;
55773: LD_VAR 0 3
55777: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
55778: LD_INT 0
55780: PPUSH
55781: PPUSH
55782: PPUSH
55783: PPUSH
// if not unit or not area then
55784: LD_VAR 0 1
55788: NOT
55789: PUSH
55790: LD_VAR 0 2
55794: NOT
55795: OR
55796: IFFALSE 55800
// exit ;
55798: GO 55964
// tmp := AreaToList ( area , i ) ;
55800: LD_ADDR_VAR 0 6
55804: PUSH
55805: LD_VAR 0 2
55809: PPUSH
55810: LD_VAR 0 5
55814: PPUSH
55815: CALL_OW 517
55819: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
55820: LD_ADDR_VAR 0 5
55824: PUSH
55825: DOUBLE
55826: LD_INT 1
55828: DEC
55829: ST_TO_ADDR
55830: LD_VAR 0 6
55834: PUSH
55835: LD_INT 1
55837: ARRAY
55838: PUSH
55839: FOR_TO
55840: IFFALSE 55962
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
55842: LD_ADDR_VAR 0 7
55846: PUSH
55847: LD_VAR 0 6
55851: PUSH
55852: LD_INT 1
55854: ARRAY
55855: PUSH
55856: LD_VAR 0 5
55860: ARRAY
55861: PUSH
55862: LD_VAR 0 6
55866: PUSH
55867: LD_INT 2
55869: ARRAY
55870: PUSH
55871: LD_VAR 0 5
55875: ARRAY
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
55881: LD_VAR 0 7
55885: PUSH
55886: LD_INT 1
55888: ARRAY
55889: PPUSH
55890: LD_VAR 0 7
55894: PUSH
55895: LD_INT 2
55897: ARRAY
55898: PPUSH
55899: CALL_OW 428
55903: PUSH
55904: LD_INT 0
55906: EQUAL
55907: IFFALSE 55960
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
55909: LD_VAR 0 1
55913: PPUSH
55914: LD_VAR 0 7
55918: PUSH
55919: LD_INT 1
55921: ARRAY
55922: PPUSH
55923: LD_VAR 0 7
55927: PUSH
55928: LD_INT 2
55930: ARRAY
55931: PPUSH
55932: LD_VAR 0 3
55936: PPUSH
55937: CALL_OW 48
// result := IsPlaced ( unit ) ;
55941: LD_ADDR_VAR 0 4
55945: PUSH
55946: LD_VAR 0 1
55950: PPUSH
55951: CALL_OW 305
55955: ST_TO_ADDR
// exit ;
55956: POP
55957: POP
55958: GO 55964
// end ; end ;
55960: GO 55839
55962: POP
55963: POP
// end ;
55964: LD_VAR 0 4
55968: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
55969: LD_INT 0
55971: PPUSH
55972: PPUSH
55973: PPUSH
// if not side or side > 8 then
55974: LD_VAR 0 1
55978: NOT
55979: PUSH
55980: LD_VAR 0 1
55984: PUSH
55985: LD_INT 8
55987: GREATER
55988: OR
55989: IFFALSE 55993
// exit ;
55991: GO 56180
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
55993: LD_ADDR_VAR 0 4
55997: PUSH
55998: LD_INT 22
56000: PUSH
56001: LD_VAR 0 1
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 21
56012: PUSH
56013: LD_INT 3
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PPUSH
56024: CALL_OW 69
56028: ST_TO_ADDR
// if not tmp then
56029: LD_VAR 0 4
56033: NOT
56034: IFFALSE 56038
// exit ;
56036: GO 56180
// enable_addtolog := true ;
56038: LD_ADDR_OWVAR 81
56042: PUSH
56043: LD_INT 1
56045: ST_TO_ADDR
// AddToLog ( [ ) ;
56046: LD_STRING [
56048: PPUSH
56049: CALL_OW 561
// for i in tmp do
56053: LD_ADDR_VAR 0 3
56057: PUSH
56058: LD_VAR 0 4
56062: PUSH
56063: FOR_IN
56064: IFFALSE 56171
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
56066: LD_STRING [
56068: PUSH
56069: LD_VAR 0 3
56073: PPUSH
56074: CALL_OW 266
56078: STR
56079: PUSH
56080: LD_STRING , 
56082: STR
56083: PUSH
56084: LD_VAR 0 3
56088: PPUSH
56089: CALL_OW 250
56093: STR
56094: PUSH
56095: LD_STRING , 
56097: STR
56098: PUSH
56099: LD_VAR 0 3
56103: PPUSH
56104: CALL_OW 251
56108: STR
56109: PUSH
56110: LD_STRING , 
56112: STR
56113: PUSH
56114: LD_VAR 0 3
56118: PPUSH
56119: CALL_OW 254
56123: STR
56124: PUSH
56125: LD_STRING , 
56127: STR
56128: PUSH
56129: LD_VAR 0 3
56133: PPUSH
56134: LD_INT 1
56136: PPUSH
56137: CALL_OW 268
56141: STR
56142: PUSH
56143: LD_STRING , 
56145: STR
56146: PUSH
56147: LD_VAR 0 3
56151: PPUSH
56152: LD_INT 2
56154: PPUSH
56155: CALL_OW 268
56159: STR
56160: PUSH
56161: LD_STRING ],
56163: STR
56164: PPUSH
56165: CALL_OW 561
// end ;
56169: GO 56063
56171: POP
56172: POP
// AddToLog ( ]; ) ;
56173: LD_STRING ];
56175: PPUSH
56176: CALL_OW 561
// end ;
56180: LD_VAR 0 2
56184: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
56185: LD_INT 0
56187: PPUSH
56188: PPUSH
56189: PPUSH
56190: PPUSH
56191: PPUSH
// if not area or not rate or not max then
56192: LD_VAR 0 1
56196: NOT
56197: PUSH
56198: LD_VAR 0 2
56202: NOT
56203: OR
56204: PUSH
56205: LD_VAR 0 4
56209: NOT
56210: OR
56211: IFFALSE 56215
// exit ;
56213: GO 56407
// while 1 do
56215: LD_INT 1
56217: IFFALSE 56407
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
56219: LD_ADDR_VAR 0 9
56223: PUSH
56224: LD_VAR 0 1
56228: PPUSH
56229: LD_INT 1
56231: PPUSH
56232: CALL_OW 287
56236: PUSH
56237: LD_INT 10
56239: MUL
56240: ST_TO_ADDR
// r := rate / 10 ;
56241: LD_ADDR_VAR 0 7
56245: PUSH
56246: LD_VAR 0 2
56250: PUSH
56251: LD_INT 10
56253: DIVREAL
56254: ST_TO_ADDR
// time := 1 1$00 ;
56255: LD_ADDR_VAR 0 8
56259: PUSH
56260: LD_INT 2100
56262: ST_TO_ADDR
// if amount < min then
56263: LD_VAR 0 9
56267: PUSH
56268: LD_VAR 0 3
56272: LESS
56273: IFFALSE 56291
// r := r * 2 else
56275: LD_ADDR_VAR 0 7
56279: PUSH
56280: LD_VAR 0 7
56284: PUSH
56285: LD_INT 2
56287: MUL
56288: ST_TO_ADDR
56289: GO 56317
// if amount > max then
56291: LD_VAR 0 9
56295: PUSH
56296: LD_VAR 0 4
56300: GREATER
56301: IFFALSE 56317
// r := r / 2 ;
56303: LD_ADDR_VAR 0 7
56307: PUSH
56308: LD_VAR 0 7
56312: PUSH
56313: LD_INT 2
56315: DIVREAL
56316: ST_TO_ADDR
// time := time / r ;
56317: LD_ADDR_VAR 0 8
56321: PUSH
56322: LD_VAR 0 8
56326: PUSH
56327: LD_VAR 0 7
56331: DIVREAL
56332: ST_TO_ADDR
// if time < 0 then
56333: LD_VAR 0 8
56337: PUSH
56338: LD_INT 0
56340: LESS
56341: IFFALSE 56358
// time := time * - 1 ;
56343: LD_ADDR_VAR 0 8
56347: PUSH
56348: LD_VAR 0 8
56352: PUSH
56353: LD_INT 1
56355: NEG
56356: MUL
56357: ST_TO_ADDR
// wait ( time ) ;
56358: LD_VAR 0 8
56362: PPUSH
56363: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
56367: LD_INT 35
56369: PPUSH
56370: LD_INT 875
56372: PPUSH
56373: CALL_OW 12
56377: PPUSH
56378: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
56382: LD_INT 1
56384: PPUSH
56385: LD_INT 5
56387: PPUSH
56388: CALL_OW 12
56392: PPUSH
56393: LD_VAR 0 1
56397: PPUSH
56398: LD_INT 1
56400: PPUSH
56401: CALL_OW 55
// end ;
56405: GO 56215
// end ;
56407: LD_VAR 0 5
56411: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
56412: LD_INT 0
56414: PPUSH
56415: PPUSH
56416: PPUSH
56417: PPUSH
56418: PPUSH
56419: PPUSH
56420: PPUSH
56421: PPUSH
// if not turrets or not factories then
56422: LD_VAR 0 1
56426: NOT
56427: PUSH
56428: LD_VAR 0 2
56432: NOT
56433: OR
56434: IFFALSE 56438
// exit ;
56436: GO 56745
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
56438: LD_ADDR_VAR 0 10
56442: PUSH
56443: LD_INT 5
56445: PUSH
56446: LD_INT 6
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 2
56455: PUSH
56456: LD_INT 4
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 3
56465: PUSH
56466: LD_INT 5
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 24
56480: PUSH
56481: LD_INT 25
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 23
56490: PUSH
56491: LD_INT 27
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: LD_INT 42
56504: PUSH
56505: LD_INT 43
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 44
56514: PUSH
56515: LD_INT 46
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_INT 45
56524: PUSH
56525: LD_INT 47
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: LIST
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: LIST
56541: ST_TO_ADDR
// result := [ ] ;
56542: LD_ADDR_VAR 0 3
56546: PUSH
56547: EMPTY
56548: ST_TO_ADDR
// for i in turrets do
56549: LD_ADDR_VAR 0 4
56553: PUSH
56554: LD_VAR 0 1
56558: PUSH
56559: FOR_IN
56560: IFFALSE 56743
// begin nat := GetNation ( i ) ;
56562: LD_ADDR_VAR 0 7
56566: PUSH
56567: LD_VAR 0 4
56571: PPUSH
56572: CALL_OW 248
56576: ST_TO_ADDR
// weapon := 0 ;
56577: LD_ADDR_VAR 0 8
56581: PUSH
56582: LD_INT 0
56584: ST_TO_ADDR
// if not nat then
56585: LD_VAR 0 7
56589: NOT
56590: IFFALSE 56594
// continue ;
56592: GO 56559
// for j in list [ nat ] do
56594: LD_ADDR_VAR 0 5
56598: PUSH
56599: LD_VAR 0 10
56603: PUSH
56604: LD_VAR 0 7
56608: ARRAY
56609: PUSH
56610: FOR_IN
56611: IFFALSE 56652
// if GetBWeapon ( i ) = j [ 1 ] then
56613: LD_VAR 0 4
56617: PPUSH
56618: CALL_OW 269
56622: PUSH
56623: LD_VAR 0 5
56627: PUSH
56628: LD_INT 1
56630: ARRAY
56631: EQUAL
56632: IFFALSE 56650
// begin weapon := j [ 2 ] ;
56634: LD_ADDR_VAR 0 8
56638: PUSH
56639: LD_VAR 0 5
56643: PUSH
56644: LD_INT 2
56646: ARRAY
56647: ST_TO_ADDR
// break ;
56648: GO 56652
// end ;
56650: GO 56610
56652: POP
56653: POP
// if not weapon then
56654: LD_VAR 0 8
56658: NOT
56659: IFFALSE 56663
// continue ;
56661: GO 56559
// for k in factories do
56663: LD_ADDR_VAR 0 6
56667: PUSH
56668: LD_VAR 0 2
56672: PUSH
56673: FOR_IN
56674: IFFALSE 56739
// begin weapons := AvailableWeaponList ( k ) ;
56676: LD_ADDR_VAR 0 9
56680: PUSH
56681: LD_VAR 0 6
56685: PPUSH
56686: CALL_OW 478
56690: ST_TO_ADDR
// if not weapons then
56691: LD_VAR 0 9
56695: NOT
56696: IFFALSE 56700
// continue ;
56698: GO 56673
// if weapon in weapons then
56700: LD_VAR 0 8
56704: PUSH
56705: LD_VAR 0 9
56709: IN
56710: IFFALSE 56737
// begin result := [ i , weapon ] ;
56712: LD_ADDR_VAR 0 3
56716: PUSH
56717: LD_VAR 0 4
56721: PUSH
56722: LD_VAR 0 8
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: ST_TO_ADDR
// exit ;
56731: POP
56732: POP
56733: POP
56734: POP
56735: GO 56745
// end ; end ;
56737: GO 56673
56739: POP
56740: POP
// end ;
56741: GO 56559
56743: POP
56744: POP
// end ;
56745: LD_VAR 0 3
56749: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
56750: LD_INT 0
56752: PPUSH
// if not side or side > 8 then
56753: LD_VAR 0 3
56757: NOT
56758: PUSH
56759: LD_VAR 0 3
56763: PUSH
56764: LD_INT 8
56766: GREATER
56767: OR
56768: IFFALSE 56772
// exit ;
56770: GO 56831
// if not range then
56772: LD_VAR 0 4
56776: NOT
56777: IFFALSE 56788
// range := - 12 ;
56779: LD_ADDR_VAR 0 4
56783: PUSH
56784: LD_INT 12
56786: NEG
56787: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
56788: LD_VAR 0 1
56792: PPUSH
56793: LD_VAR 0 2
56797: PPUSH
56798: LD_VAR 0 3
56802: PPUSH
56803: LD_VAR 0 4
56807: PPUSH
56808: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
56812: LD_VAR 0 1
56816: PPUSH
56817: LD_VAR 0 2
56821: PPUSH
56822: LD_VAR 0 3
56826: PPUSH
56827: CALL_OW 331
// end ;
56831: LD_VAR 0 5
56835: RET
// export function Video ( mode ) ; begin
56836: LD_INT 0
56838: PPUSH
// ingame_video = mode ;
56839: LD_ADDR_OWVAR 52
56843: PUSH
56844: LD_VAR 0 1
56848: ST_TO_ADDR
// interface_hidden = mode ;
56849: LD_ADDR_OWVAR 54
56853: PUSH
56854: LD_VAR 0 1
56858: ST_TO_ADDR
// end ;
56859: LD_VAR 0 2
56863: RET
// export function Join ( array , element ) ; begin
56864: LD_INT 0
56866: PPUSH
// result := Replace ( array , array + 1 , element ) ;
56867: LD_ADDR_VAR 0 3
56871: PUSH
56872: LD_VAR 0 1
56876: PPUSH
56877: LD_VAR 0 1
56881: PUSH
56882: LD_INT 1
56884: PLUS
56885: PPUSH
56886: LD_VAR 0 2
56890: PPUSH
56891: CALL_OW 1
56895: ST_TO_ADDR
// end ;
56896: LD_VAR 0 3
56900: RET
// export function JoinUnion ( array , element ) ; begin
56901: LD_INT 0
56903: PPUSH
// result := array union element ;
56904: LD_ADDR_VAR 0 3
56908: PUSH
56909: LD_VAR 0 1
56913: PUSH
56914: LD_VAR 0 2
56918: UNION
56919: ST_TO_ADDR
// end ;
56920: LD_VAR 0 3
56924: RET
// export function GetBehemoths ( side ) ; begin
56925: LD_INT 0
56927: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
56928: LD_ADDR_VAR 0 2
56932: PUSH
56933: LD_INT 22
56935: PUSH
56936: LD_VAR 0 1
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 31
56947: PUSH
56948: LD_INT 25
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PPUSH
56959: CALL_OW 69
56963: ST_TO_ADDR
// end ;
56964: LD_VAR 0 2
56968: RET
// export function Shuffle ( array ) ; var i , index ; begin
56969: LD_INT 0
56971: PPUSH
56972: PPUSH
56973: PPUSH
// result := [ ] ;
56974: LD_ADDR_VAR 0 2
56978: PUSH
56979: EMPTY
56980: ST_TO_ADDR
// if not array then
56981: LD_VAR 0 1
56985: NOT
56986: IFFALSE 56990
// exit ;
56988: GO 57089
// Randomize ;
56990: CALL_OW 10
// for i = array downto 1 do
56994: LD_ADDR_VAR 0 3
56998: PUSH
56999: DOUBLE
57000: LD_VAR 0 1
57004: INC
57005: ST_TO_ADDR
57006: LD_INT 1
57008: PUSH
57009: FOR_DOWNTO
57010: IFFALSE 57087
// begin index := rand ( 1 , array ) ;
57012: LD_ADDR_VAR 0 4
57016: PUSH
57017: LD_INT 1
57019: PPUSH
57020: LD_VAR 0 1
57024: PPUSH
57025: CALL_OW 12
57029: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
57030: LD_ADDR_VAR 0 2
57034: PUSH
57035: LD_VAR 0 2
57039: PPUSH
57040: LD_VAR 0 2
57044: PUSH
57045: LD_INT 1
57047: PLUS
57048: PPUSH
57049: LD_VAR 0 1
57053: PUSH
57054: LD_VAR 0 4
57058: ARRAY
57059: PPUSH
57060: CALL_OW 2
57064: ST_TO_ADDR
// array := Delete ( array , index ) ;
57065: LD_ADDR_VAR 0 1
57069: PUSH
57070: LD_VAR 0 1
57074: PPUSH
57075: LD_VAR 0 4
57079: PPUSH
57080: CALL_OW 3
57084: ST_TO_ADDR
// end ;
57085: GO 57009
57087: POP
57088: POP
// end ;
57089: LD_VAR 0 2
57093: RET
// export function GetBaseMaterials ( base ) ; begin
57094: LD_INT 0
57096: PPUSH
// result := [ 0 , 0 , 0 ] ;
57097: LD_ADDR_VAR 0 2
57101: PUSH
57102: LD_INT 0
57104: PUSH
57105: LD_INT 0
57107: PUSH
57108: LD_INT 0
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: LIST
57115: ST_TO_ADDR
// if not base then
57116: LD_VAR 0 1
57120: NOT
57121: IFFALSE 57125
// exit ;
57123: GO 57174
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
57125: LD_ADDR_VAR 0 2
57129: PUSH
57130: LD_VAR 0 1
57134: PPUSH
57135: LD_INT 1
57137: PPUSH
57138: CALL_OW 275
57142: PUSH
57143: LD_VAR 0 1
57147: PPUSH
57148: LD_INT 2
57150: PPUSH
57151: CALL_OW 275
57155: PUSH
57156: LD_VAR 0 1
57160: PPUSH
57161: LD_INT 3
57163: PPUSH
57164: CALL_OW 275
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: LIST
57173: ST_TO_ADDR
// end ;
57174: LD_VAR 0 2
57178: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
57179: LD_INT 0
57181: PPUSH
57182: PPUSH
// result := array ;
57183: LD_ADDR_VAR 0 3
57187: PUSH
57188: LD_VAR 0 1
57192: ST_TO_ADDR
// if size > 0 then
57193: LD_VAR 0 2
57197: PUSH
57198: LD_INT 0
57200: GREATER
57201: IFFALSE 57247
// for i := array downto size do
57203: LD_ADDR_VAR 0 4
57207: PUSH
57208: DOUBLE
57209: LD_VAR 0 1
57213: INC
57214: ST_TO_ADDR
57215: LD_VAR 0 2
57219: PUSH
57220: FOR_DOWNTO
57221: IFFALSE 57245
// result := Delete ( result , result ) ;
57223: LD_ADDR_VAR 0 3
57227: PUSH
57228: LD_VAR 0 3
57232: PPUSH
57233: LD_VAR 0 3
57237: PPUSH
57238: CALL_OW 3
57242: ST_TO_ADDR
57243: GO 57220
57245: POP
57246: POP
// end ;
57247: LD_VAR 0 3
57251: RET
// export function ComExit ( unit ) ; var tmp ; begin
57252: LD_INT 0
57254: PPUSH
57255: PPUSH
// if not IsInUnit ( unit ) then
57256: LD_VAR 0 1
57260: PPUSH
57261: CALL_OW 310
57265: NOT
57266: IFFALSE 57270
// exit ;
57268: GO 57330
// tmp := IsInUnit ( unit ) ;
57270: LD_ADDR_VAR 0 3
57274: PUSH
57275: LD_VAR 0 1
57279: PPUSH
57280: CALL_OW 310
57284: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
57285: LD_VAR 0 3
57289: PPUSH
57290: CALL_OW 247
57294: PUSH
57295: LD_INT 2
57297: EQUAL
57298: IFFALSE 57311
// ComExitVehicle ( unit ) else
57300: LD_VAR 0 1
57304: PPUSH
57305: CALL_OW 121
57309: GO 57320
// ComExitBuilding ( unit ) ;
57311: LD_VAR 0 1
57315: PPUSH
57316: CALL_OW 122
// result := tmp ;
57320: LD_ADDR_VAR 0 2
57324: PUSH
57325: LD_VAR 0 3
57329: ST_TO_ADDR
// end ;
57330: LD_VAR 0 2
57334: RET
// export function ResetHc ; begin
57335: LD_INT 0
57337: PPUSH
// InitHc ;
57338: CALL_OW 19
// hc_importance := 0 ;
57342: LD_ADDR_OWVAR 32
57346: PUSH
57347: LD_INT 0
57349: ST_TO_ADDR
// end ; end_of_file
57350: LD_VAR 0 1
57354: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ;
57355: LD_VAR 0 1
57359: PPUSH
57360: LD_VAR 0 2
57364: PPUSH
57365: LD_VAR 0 3
57369: PPUSH
57370: LD_VAR 0 4
57374: PPUSH
57375: LD_VAR 0 5
57379: PPUSH
57380: CALL 19179 0 5
// end ;
57384: PPOPN 5
57386: END
