// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 32 0 0
// InitAmerican ;
  15: CALL 866 0 0
// InitRussian ;
  19: CALL 1114 0 0
// DebugMode ;
  23: CALL 160 0 0
// Action ;
  27: CALL 2673 0 0
// end ;
  31: END
// export debug ; export mission_prefix ; export active_russian_dialog , bobby_in_squad , powell_contact , macmilan_use_radio , cyrus_in_squad , active_road_patrol , macmilan_in_trap , meta_action , end_mission , bobby_saved , cyrus_saved , send_troops_to_forest , active_powell_dialog ; function Init ; begin
  32: LD_INT 0
  34: PPUSH
// mission_prefix := 01_ ;
  35: LD_ADDR_EXP 2
  39: PUSH
  40: LD_STRING 01_
  42: ST_TO_ADDR
// debug := 0 ;
  43: LD_ADDR_EXP 1
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// active_russian_dialog := false ;
  51: LD_ADDR_EXP 3
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// bobby_in_squad := false ;
  59: LD_ADDR_EXP 4
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// cyrus_in_squad := false ;
  67: LD_ADDR_EXP 7
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// powell_contact := false ;
  75: LD_ADDR_EXP 5
  79: PUSH
  80: LD_INT 0
  82: ST_TO_ADDR
// macmilan_use_radio := false ;
  83: LD_ADDR_EXP 6
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// active_road_patrol := false ;
  91: LD_ADDR_EXP 8
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// macmilan_in_trap := false ;
  99: LD_ADDR_EXP 9
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// meta_action := false ;
 107: LD_ADDR_EXP 10
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// end_mission := false ;
 115: LD_ADDR_EXP 11
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// bobby_saved := false ;
 123: LD_ADDR_EXP 12
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// cyrus_saved := false ;
 131: LD_ADDR_EXP 13
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// send_troops_to_forest := false ;
 139: LD_ADDR_EXP 14
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// active_powell_dialog := false ;
 147: LD_ADDR_EXP 15
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// end ;
 155: LD_VAR 0 1
 159: RET
// function DebugMode ; var i ; begin
 160: LD_INT 0
 162: PPUSH
 163: PPUSH
// if not debug then
 164: LD_EXP 1
 168: NOT
 169: IFFALSE 173
// exit ;
 171: GO 192
// Difficulty := 3 ;
 173: LD_ADDR_OWVAR 67
 177: PUSH
 178: LD_INT 3
 180: ST_TO_ADDR
// TurnFogOff ( ) ;
 181: CALL_OW 537
// FogOff ( 1 ) ;
 185: LD_INT 1
 187: PPUSH
 188: CALL_OW 344
// end ; end_of_file
 192: LD_VAR 0 1
 196: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 197: LD_INT 0
 199: PPUSH
 200: PPUSH
 201: PPUSH
// uc_side := GetSide ( b ) ;
 202: LD_ADDR_OWVAR 20
 206: PUSH
 207: LD_VAR 0 2
 211: PPUSH
 212: CALL_OW 255
 216: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 217: LD_ADDR_OWVAR 21
 221: PUSH
 222: LD_VAR 0 2
 226: PPUSH
 227: CALL_OW 248
 231: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 232: LD_INT 0
 234: PPUSH
 235: LD_INT 1
 237: PPUSH
 238: LD_VAR 0 1
 242: PPUSH
 243: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
 247: LD_ADDR_VAR 0 5
 251: PUSH
 252: LD_VAR 0 2
 256: PPUSH
 257: CALL_OW 254
 261: PUSH
 262: LD_INT 3
 264: MINUS
 265: ST_TO_ADDR
// if dir < 0 then
 266: LD_VAR 0 5
 270: PUSH
 271: LD_INT 0
 273: LESS
 274: IFFALSE 290
// dir := 6 + dir ;
 276: LD_ADDR_VAR 0 5
 280: PUSH
 281: LD_INT 6
 283: PUSH
 284: LD_VAR 0 5
 288: PLUS
 289: ST_TO_ADDR
// un := CreateHuman ;
 290: LD_ADDR_VAR 0 4
 294: PUSH
 295: CALL_OW 44
 299: ST_TO_ADDR
// SetDir ( un , dir ) ;
 300: LD_VAR 0 4
 304: PPUSH
 305: LD_VAR 0 5
 309: PPUSH
 310: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 314: LD_VAR 0 4
 318: PPUSH
 319: LD_VAR 0 2
 323: PPUSH
 324: CALL_OW 52
// end ;
 328: LD_VAR 0 3
 332: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 333: LD_INT 0
 335: PPUSH
// uc_side := side ;
 336: LD_ADDR_OWVAR 20
 340: PUSH
 341: LD_VAR 0 1
 345: ST_TO_ADDR
// uc_nation := nation ;
 346: LD_ADDR_OWVAR 21
 350: PUSH
 351: LD_VAR 0 2
 355: ST_TO_ADDR
// vc_chassis := chassis ;
 356: LD_ADDR_OWVAR 37
 360: PUSH
 361: LD_VAR 0 3
 365: ST_TO_ADDR
// vc_engine := engine ;
 366: LD_ADDR_OWVAR 39
 370: PUSH
 371: LD_VAR 0 4
 375: ST_TO_ADDR
// vc_control := control ;
 376: LD_ADDR_OWVAR 38
 380: PUSH
 381: LD_VAR 0 5
 385: ST_TO_ADDR
// vc_weapon := weapon ;
 386: LD_ADDR_OWVAR 40
 390: PUSH
 391: LD_VAR 0 6
 395: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 396: LD_ADDR_OWVAR 41
 400: PUSH
 401: LD_VAR 0 7
 405: ST_TO_ADDR
// result := CreateVehicle ;
 406: LD_ADDR_VAR 0 8
 410: PUSH
 411: CALL_OW 45
 415: ST_TO_ADDR
// end ;
 416: LD_VAR 0 8
 420: RET
// export function ComPatrol ( unit , mode , pause , coords ) ; var i ; begin
 421: LD_INT 0
 423: PPUSH
 424: PPUSH
// while ( active_road_patrol ) do
 425: LD_EXP 8
 429: IFFALSE 783
// begin Wait ( 0 0$01 ) ;
 431: LD_INT 35
 433: PPUSH
 434: CALL_OW 67
// if not unit then
 438: LD_VAR 0 1
 442: NOT
 443: IFFALSE 447
// exit ;
 445: GO 783
// if mode = road then
 447: LD_VAR 0 2
 451: PUSH
 452: LD_STRING road
 454: EQUAL
 455: IFFALSE 511
// if GetFuel ( unit ) < 50 and not See ( 1 , unit ) and not HasTask ( unit ) then
 457: LD_VAR 0 1
 461: PPUSH
 462: CALL_OW 261
 466: PUSH
 467: LD_INT 50
 469: LESS
 470: PUSH
 471: LD_INT 1
 473: PPUSH
 474: LD_VAR 0 1
 478: PPUSH
 479: CALL_OW 292
 483: NOT
 484: AND
 485: PUSH
 486: LD_VAR 0 1
 490: PPUSH
 491: CALL_OW 314
 495: NOT
 496: AND
 497: IFFALSE 511
// SetFuel ( unit , 100 ) ;
 499: LD_VAR 0 1
 503: PPUSH
 504: LD_INT 100
 506: PPUSH
 507: CALL_OW 240
// if mode = forest then
 511: LD_VAR 0 2
 515: PUSH
 516: LD_STRING forest
 518: EQUAL
 519: IFFALSE 599
// if GetLives ( unit ) < 600 then
 521: LD_VAR 0 1
 525: PPUSH
 526: CALL_OW 256
 530: PUSH
 531: LD_INT 600
 533: LESS
 534: IFFALSE 599
// begin ComMoveXY ( unit , 42 , 3 ) ;
 536: LD_VAR 0 1
 540: PPUSH
 541: LD_INT 42
 543: PPUSH
 544: LD_INT 3
 546: PPUSH
 547: CALL_OW 111
// SetRememberedX ( unit , GetX ( unit ) ) ;
 551: LD_VAR 0 1
 555: PPUSH
 556: LD_VAR 0 1
 560: PPUSH
 561: CALL_OW 250
 565: PPUSH
 566: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
 570: LD_VAR 0 1
 574: PPUSH
 575: LD_VAR 0 1
 579: PPUSH
 580: CALL_OW 251
 584: PPUSH
 585: CALL_OW 232
// send_troops_to_forest := true ;
 589: LD_ADDR_EXP 14
 593: PUSH
 594: LD_INT 1
 596: ST_TO_ADDR
// break ;
 597: GO 783
// end ; if not HasTask ( unit ) then
 599: LD_VAR 0 1
 603: PPUSH
 604: CALL_OW 314
 608: NOT
 609: IFFALSE 781
// begin for i = 1 to coords do
 611: LD_ADDR_VAR 0 6
 615: PUSH
 616: DOUBLE
 617: LD_INT 1
 619: DEC
 620: ST_TO_ADDR
 621: LD_VAR 0 4
 625: PUSH
 626: FOR_TO
 627: IFFALSE 694
// begin AddComAgressiveMove ( unit , coords [ i ] , coords [ i + 1 ] ) ;
 629: LD_VAR 0 1
 633: PPUSH
 634: LD_VAR 0 4
 638: PUSH
 639: LD_VAR 0 6
 643: ARRAY
 644: PPUSH
 645: LD_VAR 0 4
 649: PUSH
 650: LD_VAR 0 6
 654: PUSH
 655: LD_INT 1
 657: PLUS
 658: ARRAY
 659: PPUSH
 660: CALL_OW 174
// AddComWait ( unit , pause ) ;
 664: LD_VAR 0 1
 668: PPUSH
 669: LD_VAR 0 3
 673: PPUSH
 674: CALL_OW 202
// i := i + 1 ;
 678: LD_ADDR_VAR 0 6
 682: PUSH
 683: LD_VAR 0 6
 687: PUSH
 688: LD_INT 1
 690: PLUS
 691: ST_TO_ADDR
// end ;
 692: GO 626
 694: POP
 695: POP
// for i = coords downto 1 do
 696: LD_ADDR_VAR 0 6
 700: PUSH
 701: DOUBLE
 702: LD_VAR 0 4
 706: INC
 707: ST_TO_ADDR
 708: LD_INT 1
 710: PUSH
 711: FOR_DOWNTO
 712: IFFALSE 779
// begin AddComAgressiveMove ( unit , coords [ i - 1 ] , coords [ i ] ) ;
 714: LD_VAR 0 1
 718: PPUSH
 719: LD_VAR 0 4
 723: PUSH
 724: LD_VAR 0 6
 728: PUSH
 729: LD_INT 1
 731: MINUS
 732: ARRAY
 733: PPUSH
 734: LD_VAR 0 4
 738: PUSH
 739: LD_VAR 0 6
 743: ARRAY
 744: PPUSH
 745: CALL_OW 174
// AddComWait ( unit , pause ) ;
 749: LD_VAR 0 1
 753: PPUSH
 754: LD_VAR 0 3
 758: PPUSH
 759: CALL_OW 202
// i := i - 1 ;
 763: LD_ADDR_VAR 0 6
 767: PUSH
 768: LD_VAR 0 6
 772: PUSH
 773: LD_INT 1
 775: MINUS
 776: ST_TO_ADDR
// end ;
 777: GO 711
 779: POP
 780: POP
// end ; end ;
 781: GO 425
// end ;
 783: LD_VAR 0 5
 787: RET
// export function DebugSay ( dialog ) ; var speaker ; begin
 788: LD_INT 0
 790: PPUSH
 791: PPUSH
// uc_nation := 1 ;
 792: LD_ADDR_OWVAR 21
 796: PUSH
 797: LD_INT 1
 799: ST_TO_ADDR
// uc_side := 0 ;
 800: LD_ADDR_OWVAR 20
 804: PUSH
 805: LD_INT 0
 807: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
 808: LD_INT 0
 810: PPUSH
 811: LD_INT 1
 813: PPUSH
 814: LD_INT 0
 816: PPUSH
 817: CALL_OW 380
// hc_name := speaker ;
 821: LD_ADDR_OWVAR 26
 825: PUSH
 826: LD_STRING speaker
 828: ST_TO_ADDR
// hc_gallery :=  ;
 829: LD_ADDR_OWVAR 33
 833: PUSH
 834: LD_STRING 
 836: ST_TO_ADDR
// speaker := CreateHuman ;
 837: LD_ADDR_VAR 0 3
 841: PUSH
 842: CALL_OW 44
 846: ST_TO_ADDR
// Say ( speaker , dialog ) ;
 847: LD_VAR 0 3
 851: PPUSH
 852: LD_VAR 0 1
 856: PPUSH
 857: CALL_OW 88
// end ; end_of_file
 861: LD_VAR 0 2
 865: RET
// export JMM , Bobby , Cyrus , Powell , fakePokryshkin ; export function InitAmerican ; begin
 866: LD_INT 0
 868: PPUSH
// uc_nation := 1 ;
 869: LD_ADDR_OWVAR 21
 873: PUSH
 874: LD_INT 1
 876: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , false ,  ) ;
 877: LD_ADDR_EXP 16
 881: PUSH
 882: LD_STRING JMM
 884: PPUSH
 885: LD_INT 0
 887: PPUSH
 888: LD_STRING 
 890: PPUSH
 891: CALL 21503 0 3
 895: ST_TO_ADDR
// uc_side := 4 ;
 896: LD_ADDR_OWVAR 20
 900: PUSH
 901: LD_INT 4
 903: ST_TO_ADDR
// hc_gallery := us ;
 904: LD_ADDR_OWVAR 33
 908: PUSH
 909: LD_STRING us
 911: ST_TO_ADDR
// hc_face_number := 7 ;
 912: LD_ADDR_OWVAR 34
 916: PUSH
 917: LD_INT 7
 919: ST_TO_ADDR
// hc_sex := sex_male ;
 920: LD_ADDR_OWVAR 27
 924: PUSH
 925: LD_INT 1
 927: ST_TO_ADDR
// hc_name := . ;
 928: LD_ADDR_OWVAR 26
 932: PUSH
 933: LD_STRING .
 935: ST_TO_ADDR
// hc_class := 1 ;
 936: LD_ADDR_OWVAR 28
 940: PUSH
 941: LD_INT 1
 943: ST_TO_ADDR
// Powell := CreateHuman ;
 944: LD_ADDR_EXP 19
 948: PUSH
 949: CALL_OW 44
 953: ST_TO_ADDR
// hc_name := . ;
 954: LD_ADDR_OWVAR 26
 958: PUSH
 959: LD_STRING .
 961: ST_TO_ADDR
// hc_gallery := ru ;
 962: LD_ADDR_OWVAR 33
 966: PUSH
 967: LD_STRING ru
 969: ST_TO_ADDR
// hc_face_number := 4 ;
 970: LD_ADDR_OWVAR 34
 974: PUSH
 975: LD_INT 4
 977: ST_TO_ADDR
// hc_sex := sex_male ;
 978: LD_ADDR_OWVAR 27
 982: PUSH
 983: LD_INT 1
 985: ST_TO_ADDR
// fakePokryshkin := CreateHuman ;
 986: LD_ADDR_EXP 20
 990: PUSH
 991: CALL_OW 44
 995: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , false ,  ) ;
 996: LD_ADDR_EXP 17
1000: PUSH
1001: LD_STRING Bobby
1003: PPUSH
1004: LD_INT 0
1006: PPUSH
1007: LD_STRING 
1009: PPUSH
1010: CALL 21503 0 3
1014: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , false ,  ) ;
1015: LD_ADDR_EXP 18
1019: PUSH
1020: LD_STRING Cyrus
1022: PPUSH
1023: LD_INT 0
1025: PPUSH
1026: LD_STRING 
1028: PPUSH
1029: CALL 21503 0 3
1033: ST_TO_ADDR
// case Difficulty of 1 :
1034: LD_OWVAR 67
1038: PUSH
1039: LD_INT 1
1041: DOUBLE
1042: EQUAL
1043: IFTRUE 1047
1045: GO 1062
1047: POP
// SetLives ( Bobby , 500 ) ; 2 :
1048: LD_EXP 17
1052: PPUSH
1053: LD_INT 500
1055: PPUSH
1056: CALL_OW 234
1060: GO 1109
1062: LD_INT 2
1064: DOUBLE
1065: EQUAL
1066: IFTRUE 1070
1068: GO 1085
1070: POP
// SetLives ( Bobby , 460 ) ; 3 :
1071: LD_EXP 17
1075: PPUSH
1076: LD_INT 460
1078: PPUSH
1079: CALL_OW 234
1083: GO 1109
1085: LD_INT 3
1087: DOUBLE
1088: EQUAL
1089: IFTRUE 1093
1091: GO 1108
1093: POP
// SetLives ( Bobby , 420 ) ; end ;
1094: LD_EXP 17
1098: PPUSH
1099: LD_INT 420
1101: PPUSH
1102: CALL_OW 234
1106: GO 1109
1108: POP
// end ; end_of_file
1109: LD_VAR 0 1
1113: RET
// export russian_troops_1 , russian_troops_2 , russian_patrol_tanks , russian_meta_guards , russian_patrol_forest ; export Pokryshkin ; export function InitRussian ; var skill , i , un ; begin
1114: LD_INT 0
1116: PPUSH
1117: PPUSH
1118: PPUSH
1119: PPUSH
// skill := [ 1 , 2 , 3 ] [ Difficulty ] ;
1120: LD_ADDR_VAR 0 2
1124: PUSH
1125: LD_INT 1
1127: PUSH
1128: LD_INT 2
1130: PUSH
1131: LD_INT 3
1133: PUSH
1134: EMPTY
1135: LIST
1136: LIST
1137: LIST
1138: PUSH
1139: LD_OWVAR 67
1143: ARRAY
1144: ST_TO_ADDR
// uc_side := 3 ;
1145: LD_ADDR_OWVAR 20
1149: PUSH
1150: LD_INT 3
1152: ST_TO_ADDR
// uc_nation := 3 ;
1153: LD_ADDR_OWVAR 21
1157: PUSH
1158: LD_INT 3
1160: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
1161: LD_ADDR_EXP 26
1165: PUSH
1166: LD_STRING Pokryshkin
1168: PPUSH
1169: LD_INT 0
1171: PPUSH
1172: LD_STRING 
1174: PPUSH
1175: CALL 21503 0 3
1179: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 44 , 5 , false ) ;
1180: LD_EXP 26
1184: PPUSH
1185: LD_INT 44
1187: PPUSH
1188: LD_INT 5
1190: PPUSH
1191: LD_INT 0
1193: PPUSH
1194: CALL_OW 48
// hc_importance := 0 ;
1198: LD_ADDR_OWVAR 32
1202: PUSH
1203: LD_INT 0
1205: ST_TO_ADDR
// hc_gallery :=  ;
1206: LD_ADDR_OWVAR 33
1210: PUSH
1211: LD_STRING 
1213: ST_TO_ADDR
// hc_name :=  ;
1214: LD_ADDR_OWVAR 26
1218: PUSH
1219: LD_STRING 
1221: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1222: LD_INT 1
1224: PPUSH
1225: LD_INT 1
1227: PPUSH
1228: LD_VAR 0 2
1232: PPUSH
1233: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1237: LD_ADDR_OWVAR 33
1241: PUSH
1242: LD_STRING SecondCharsGal
1244: ST_TO_ADDR
// hc_face_number := 69 ;
1245: LD_ADDR_OWVAR 34
1249: PUSH
1250: LD_INT 69
1252: ST_TO_ADDR
// hc_sex := sex_male ;
1253: LD_ADDR_OWVAR 27
1257: PUSH
1258: LD_INT 1
1260: ST_TO_ADDR
// hc_name := Ilja Ivanov ;
1261: LD_ADDR_OWVAR 26
1265: PUSH
1266: LD_STRING Ilja Ivanov
1268: ST_TO_ADDR
// un := CreateHuman ;
1269: LD_ADDR_VAR 0 4
1273: PUSH
1274: CALL_OW 44
1278: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 1 , un ) ;
1279: LD_ADDR_EXP 21
1283: PUSH
1284: LD_EXP 21
1288: PPUSH
1289: LD_INT 1
1291: PPUSH
1292: LD_VAR 0 4
1296: PPUSH
1297: CALL_OW 2
1301: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1302: LD_VAR 0 4
1306: PPUSH
1307: LD_INT 3
1309: PPUSH
1310: LD_INT 0
1312: PPUSH
1313: CALL_OW 49
// PrepareHuman ( sex_male , 1 , skill ) ;
1317: LD_INT 1
1319: PPUSH
1320: LD_INT 1
1322: PPUSH
1323: LD_VAR 0 2
1327: PPUSH
1328: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1332: LD_ADDR_OWVAR 33
1336: PUSH
1337: LD_STRING SecondCharsGal
1339: ST_TO_ADDR
// hc_face_number := 70 ;
1340: LD_ADDR_OWVAR 34
1344: PUSH
1345: LD_INT 70
1347: ST_TO_ADDR
// hc_name := Pavel Starczy ;
1348: LD_ADDR_OWVAR 26
1352: PUSH
1353: LD_STRING Pavel Starczy
1355: ST_TO_ADDR
// un := CreateHuman ;
1356: LD_ADDR_VAR 0 4
1360: PUSH
1361: CALL_OW 44
1365: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 2 , un ) ;
1366: LD_ADDR_EXP 21
1370: PUSH
1371: LD_EXP 21
1375: PPUSH
1376: LD_INT 2
1378: PPUSH
1379: LD_VAR 0 4
1383: PPUSH
1384: CALL_OW 2
1388: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1389: LD_VAR 0 4
1393: PPUSH
1394: LD_INT 3
1396: PPUSH
1397: LD_INT 0
1399: PPUSH
1400: CALL_OW 49
// InitHc ;
1404: CALL_OW 19
// for i = 1 to 7 do
1408: LD_ADDR_VAR 0 3
1412: PUSH
1413: DOUBLE
1414: LD_INT 1
1416: DEC
1417: ST_TO_ADDR
1418: LD_INT 7
1420: PUSH
1421: FOR_TO
1422: IFFALSE 1573
// begin PrepareHuman ( false , 1 , skill ) ;
1424: LD_INT 0
1426: PPUSH
1427: LD_INT 1
1429: PPUSH
1430: LD_VAR 0 2
1434: PPUSH
1435: CALL_OW 380
// un := CreateHuman ;
1439: LD_ADDR_VAR 0 4
1443: PUSH
1444: CALL_OW 44
1448: ST_TO_ADDR
// if i mod 2 = 0 then
1449: LD_VAR 0 3
1453: PUSH
1454: LD_INT 2
1456: MOD
1457: PUSH
1458: LD_INT 0
1460: EQUAL
1461: IFFALSE 1518
// begin russian_troops_1 := Insert ( russian_troops_1 , russian_troops_1 + 1 , un ) ;
1463: LD_ADDR_EXP 21
1467: PUSH
1468: LD_EXP 21
1472: PPUSH
1473: LD_EXP 21
1477: PUSH
1478: LD_INT 1
1480: PLUS
1481: PPUSH
1482: LD_VAR 0 4
1486: PPUSH
1487: CALL_OW 2
1491: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1492: LD_VAR 0 4
1496: PPUSH
1497: LD_INT 3
1499: PPUSH
1500: LD_INT 0
1502: PPUSH
1503: CALL_OW 49
// ComHold ( un ) ;
1507: LD_VAR 0 4
1511: PPUSH
1512: CALL_OW 140
// end else
1516: GO 1571
// begin russian_troops_2 := Insert ( russian_troops_2 , russian_troops_2 + 1 , un ) ;
1518: LD_ADDR_EXP 22
1522: PUSH
1523: LD_EXP 22
1527: PPUSH
1528: LD_EXP 22
1532: PUSH
1533: LD_INT 1
1535: PLUS
1536: PPUSH
1537: LD_VAR 0 4
1541: PPUSH
1542: CALL_OW 2
1546: ST_TO_ADDR
// PlaceUnitArea ( un , guard_south , false ) ;
1547: LD_VAR 0 4
1551: PPUSH
1552: LD_INT 4
1554: PPUSH
1555: LD_INT 0
1557: PPUSH
1558: CALL_OW 49
// ComHold ( un ) ;
1562: LD_VAR 0 4
1566: PPUSH
1567: CALL_OW 140
// end ; end ;
1571: GO 1421
1573: POP
1574: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) do
1575: LD_ADDR_VAR 0 3
1579: PUSH
1580: LD_INT 22
1582: PUSH
1583: LD_INT 3
1585: PUSH
1586: EMPTY
1587: LIST
1588: LIST
1589: PUSH
1590: LD_INT 30
1592: PUSH
1593: LD_INT 31
1595: PUSH
1596: EMPTY
1597: LIST
1598: LIST
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: PPUSH
1604: CALL_OW 69
1608: PUSH
1609: FOR_IN
1610: IFFALSE 1628
// PrepareSolBun ( skill , i ) ;
1612: LD_VAR 0 2
1616: PPUSH
1617: LD_VAR 0 3
1621: PPUSH
1622: CALL 197 0 2
1626: GO 1609
1628: POP
1629: POP
// for i = 1 to 2 do
1630: LD_ADDR_VAR 0 3
1634: PUSH
1635: DOUBLE
1636: LD_INT 1
1638: DEC
1639: ST_TO_ADDR
1640: LD_INT 2
1642: PUSH
1643: FOR_TO
1644: IFFALSE 1775
// begin un := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1646: LD_ADDR_VAR 0 4
1650: PUSH
1651: LD_INT 3
1653: PPUSH
1654: LD_INT 3
1656: PPUSH
1657: LD_INT 22
1659: PPUSH
1660: LD_INT 1
1662: PPUSH
1663: LD_INT 1
1665: PPUSH
1666: LD_INT 42
1668: PPUSH
1669: LD_INT 100
1671: PPUSH
1672: CALL 333 0 7
1676: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
1677: LD_INT 0
1679: PPUSH
1680: LD_INT 3
1682: PPUSH
1683: LD_VAR 0 2
1687: PPUSH
1688: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1692: CALL_OW 44
1696: PPUSH
1697: LD_VAR 0 4
1701: PPUSH
1702: CALL_OW 52
// PlaceUnitXY ( un , [ 23 , 131 ] [ i ] , [ 14 , 87 ] [ i ] , false ) ;
1706: LD_VAR 0 4
1710: PPUSH
1711: LD_INT 23
1713: PUSH
1714: LD_INT 131
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: PUSH
1721: LD_VAR 0 3
1725: ARRAY
1726: PPUSH
1727: LD_INT 14
1729: PUSH
1730: LD_INT 87
1732: PUSH
1733: EMPTY
1734: LIST
1735: LIST
1736: PUSH
1737: LD_VAR 0 3
1741: ARRAY
1742: PPUSH
1743: LD_INT 0
1745: PPUSH
1746: CALL_OW 48
// russian_patrol_tanks := Insert ( russian_patrol_tanks , 1 , un ) ;
1750: LD_ADDR_EXP 23
1754: PUSH
1755: LD_EXP 23
1759: PPUSH
1760: LD_INT 1
1762: PPUSH
1763: LD_VAR 0 4
1767: PPUSH
1768: CALL_OW 2
1772: ST_TO_ADDR
// end ;
1773: GO 1643
1775: POP
1776: POP
// for i = 1 to 2 do
1777: LD_ADDR_VAR 0 3
1781: PUSH
1782: DOUBLE
1783: LD_INT 1
1785: DEC
1786: ST_TO_ADDR
1787: LD_INT 2
1789: PUSH
1790: FOR_TO
1791: IFFALSE 1882
// begin PrepareHuman ( [ sex_female , sex_male , sex_male ] [ i ] , 1 , 1 ) ;
1793: LD_INT 2
1795: PUSH
1796: LD_INT 1
1798: PUSH
1799: LD_INT 1
1801: PUSH
1802: EMPTY
1803: LIST
1804: LIST
1805: LIST
1806: PUSH
1807: LD_VAR 0 3
1811: ARRAY
1812: PPUSH
1813: LD_INT 1
1815: PPUSH
1816: LD_INT 1
1818: PPUSH
1819: CALL_OW 380
// un := CreateHuman ;
1823: LD_ADDR_VAR 0 4
1827: PUSH
1828: CALL_OW 44
1832: ST_TO_ADDR
// russian_meta_guards := Insert ( russian_meta_guards , 1 , un ) ;
1833: LD_ADDR_EXP 24
1837: PUSH
1838: LD_EXP 24
1842: PPUSH
1843: LD_INT 1
1845: PPUSH
1846: LD_VAR 0 4
1850: PPUSH
1851: CALL_OW 2
1855: ST_TO_ADDR
// PlaceUnitArea ( un , exitArea , false ) ;
1856: LD_VAR 0 4
1860: PPUSH
1861: LD_INT 10
1863: PPUSH
1864: LD_INT 0
1866: PPUSH
1867: CALL_OW 49
// ComHold ( un ) ;
1871: LD_VAR 0 4
1875: PPUSH
1876: CALL_OW 140
// end ;
1880: GO 1790
1882: POP
1883: POP
// if Difficulty < 3 then
1884: LD_OWVAR 67
1888: PUSH
1889: LD_INT 3
1891: LESS
1892: IFFALSE 1896
// exit ;
1894: GO 1939
// PrepareHuman ( false , 1 , skill ) ;
1896: LD_INT 0
1898: PPUSH
1899: LD_INT 1
1901: PPUSH
1902: LD_VAR 0 2
1906: PPUSH
1907: CALL_OW 380
// russian_patrol_forest := CreateHuman ;
1911: LD_ADDR_EXP 25
1915: PUSH
1916: CALL_OW 44
1920: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_forest , 82 , 2 , false ) ;
1921: LD_EXP 25
1925: PPUSH
1926: LD_INT 82
1928: PPUSH
1929: LD_INT 2
1931: PPUSH
1932: LD_INT 0
1934: PPUSH
1935: CALL_OW 48
// end ;
1939: LD_VAR 0 1
1943: RET
// every 0 0$01 trigger active_road_patrol do
1944: LD_EXP 8
1948: IFFALSE 2014
1950: GO 1952
1952: DISABLE
// ComPatrol ( russian_patrol_tanks [ 1 ] , road , 0 0$02 , [ 131 , 87 , 107 , 75 , 107 , 66 , 114 , 61 , 107 , 34 ] ) ;
1953: LD_EXP 23
1957: PUSH
1958: LD_INT 1
1960: ARRAY
1961: PPUSH
1962: LD_STRING road
1964: PPUSH
1965: LD_INT 70
1967: PPUSH
1968: LD_INT 131
1970: PUSH
1971: LD_INT 87
1973: PUSH
1974: LD_INT 107
1976: PUSH
1977: LD_INT 75
1979: PUSH
1980: LD_INT 107
1982: PUSH
1983: LD_INT 66
1985: PUSH
1986: LD_INT 114
1988: PUSH
1989: LD_INT 61
1991: PUSH
1992: LD_INT 107
1994: PUSH
1995: LD_INT 34
1997: PUSH
1998: EMPTY
1999: LIST
2000: LIST
2001: LIST
2002: LIST
2003: LIST
2004: LIST
2005: LIST
2006: LIST
2007: LIST
2008: LIST
2009: PPUSH
2010: CALL 421 0 4
2014: END
// every 0 0$01 trigger active_road_patrol do
2015: LD_EXP 8
2019: IFFALSE 2077
2021: GO 2023
2023: DISABLE
// ComPatrol ( russian_patrol_tanks [ 2 ] , road , 0 0$02 , [ 21 , 12 , 37 , 30 , 65 , 62 , 107 , 76 ] ) ;
2024: LD_EXP 23
2028: PUSH
2029: LD_INT 2
2031: ARRAY
2032: PPUSH
2033: LD_STRING road
2035: PPUSH
2036: LD_INT 70
2038: PPUSH
2039: LD_INT 21
2041: PUSH
2042: LD_INT 12
2044: PUSH
2045: LD_INT 37
2047: PUSH
2048: LD_INT 30
2050: PUSH
2051: LD_INT 65
2053: PUSH
2054: LD_INT 62
2056: PUSH
2057: LD_INT 107
2059: PUSH
2060: LD_INT 76
2062: PUSH
2063: EMPTY
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: LIST
2070: LIST
2071: LIST
2072: PPUSH
2073: CALL 421 0 4
2077: END
// every 0 0$01 trigger IsOk ( russian_patrol_forest ) do
2078: LD_EXP 25
2082: PPUSH
2083: CALL_OW 302
2087: IFFALSE 2149
2089: GO 2091
2091: DISABLE
// ComPatrol ( russian_patrol_forest , forest , 0 0$01 , [ 52 , 15 , 81 , 9 , 120 , 52 , 135 , 80 , 122 , 95 ] ) ;
2092: LD_EXP 25
2096: PPUSH
2097: LD_STRING forest
2099: PPUSH
2100: LD_INT 35
2102: PPUSH
2103: LD_INT 52
2105: PUSH
2106: LD_INT 15
2108: PUSH
2109: LD_INT 81
2111: PUSH
2112: LD_INT 9
2114: PUSH
2115: LD_INT 120
2117: PUSH
2118: LD_INT 52
2120: PUSH
2121: LD_INT 135
2123: PUSH
2124: LD_INT 80
2126: PUSH
2127: LD_INT 122
2129: PUSH
2130: LD_INT 95
2132: PUSH
2133: EMPTY
2134: LIST
2135: LIST
2136: LIST
2137: LIST
2138: LIST
2139: LIST
2140: LIST
2141: LIST
2142: LIST
2143: LIST
2144: PPUSH
2145: CALL 421 0 4
2149: END
// every 0 0$01 trigger macmilan_use_radio do
2150: LD_EXP 6
2154: IFFALSE 2215
2156: GO 2158
2158: DISABLE
// begin active_road_patrol := false ;
2159: LD_ADDR_EXP 8
2163: PUSH
2164: LD_INT 0
2166: ST_TO_ADDR
// ComStop ( russian_patrol_tanks ) ;
2167: LD_EXP 23
2171: PPUSH
2172: CALL_OW 141
// AddComAgressiveMove ( russian_patrol_tanks , 72 , 41 ) ;
2176: LD_EXP 23
2180: PPUSH
2181: LD_INT 72
2183: PPUSH
2184: LD_INT 41
2186: PPUSH
2187: CALL_OW 174
// ComExitBuilding ( russian_troops_2 ) ;
2191: LD_EXP 22
2195: PPUSH
2196: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , 72 , 41 ) ;
2200: LD_EXP 22
2204: PPUSH
2205: LD_INT 72
2207: PPUSH
2208: LD_INT 41
2210: PPUSH
2211: CALL_OW 174
// end ;
2215: END
// every 0 0$03 trigger FilterUnitsInArea ( def_south , [ f_side , 1 ] ) do var un ;
2216: LD_INT 9
2218: PPUSH
2219: LD_INT 22
2221: PUSH
2222: LD_INT 1
2224: PUSH
2225: EMPTY
2226: LIST
2227: LIST
2228: PPUSH
2229: CALL_OW 70
2233: IFFALSE 2307
2235: GO 2237
2237: DISABLE
2238: LD_INT 0
2240: PPUSH
// begin enable ;
2241: ENABLE
// un := FilterUnitsInArea ( def_south , [ f_side , 1 ] ) [ 1 ] ;
2242: LD_ADDR_VAR 0 1
2246: PUSH
2247: LD_INT 9
2249: PPUSH
2250: LD_INT 22
2252: PUSH
2253: LD_INT 1
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: PPUSH
2260: CALL_OW 70
2264: PUSH
2265: LD_INT 1
2267: ARRAY
2268: ST_TO_ADDR
// ComExitBuilding ( russian_troops_2 ) ;
2269: LD_EXP 22
2273: PPUSH
2274: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , GetX ( un ) , GetY ( un ) ) ;
2278: LD_EXP 22
2282: PPUSH
2283: LD_VAR 0 1
2287: PPUSH
2288: CALL_OW 250
2292: PPUSH
2293: LD_VAR 0 1
2297: PPUSH
2298: CALL_OW 251
2302: PPUSH
2303: CALL_OW 174
// end ;
2307: PPOPN 1
2309: END
// every 0 0$01 trigger ( GetLives ( russian_patrol_tanks [ 1 ] ) < 999 or GetLives ( russian_patrol_tanks [ 2 ] ) < 999 ) and See ( 3 , JMM ) do
2310: LD_EXP 23
2314: PUSH
2315: LD_INT 1
2317: ARRAY
2318: PPUSH
2319: CALL_OW 256
2323: PUSH
2324: LD_INT 999
2326: LESS
2327: PUSH
2328: LD_EXP 23
2332: PUSH
2333: LD_INT 2
2335: ARRAY
2336: PPUSH
2337: CALL_OW 256
2341: PUSH
2342: LD_INT 999
2344: LESS
2345: OR
2346: PUSH
2347: LD_INT 3
2349: PPUSH
2350: LD_EXP 16
2354: PPUSH
2355: CALL_OW 292
2359: AND
2360: IFFALSE 2387
2362: GO 2364
2364: DISABLE
// begin active_road_patrol := false ;
2365: LD_ADDR_EXP 8
2369: PUSH
2370: LD_INT 0
2372: ST_TO_ADDR
// ComAttackUnit ( russian_patrol_tanks , JMM ) ;
2373: LD_EXP 23
2377: PPUSH
2378: LD_EXP 16
2382: PPUSH
2383: CALL_OW 115
// end ;
2387: END
// every 0 0$01 trigger macmilan_in_trap do
2388: LD_EXP 9
2392: IFFALSE 2438
2394: GO 2396
2396: DISABLE
// begin ComExitBuilding ( russian_troops_2 ) ;
2397: LD_EXP 22
2401: PPUSH
2402: CALL_OW 122
// ComAttackUnit ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , JMM ) ;
2406: LD_EXP 21
2410: PUSH
2411: LD_EXP 22
2415: ADD
2416: PUSH
2417: LD_EXP 26
2421: ADD
2422: PUSH
2423: LD_EXP 23
2427: ADD
2428: PPUSH
2429: LD_EXP 16
2433: PPUSH
2434: CALL_OW 115
// end ;
2438: END
// every 0 0$01 trigger meta_action do
2439: LD_EXP 10
2443: IFFALSE 2489
2445: GO 2447
2447: DISABLE
// begin active_road_patrol := false ;
2448: LD_ADDR_EXP 8
2452: PUSH
2453: LD_INT 0
2455: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , 93 , 1 ) ;
2456: LD_EXP 21
2460: PUSH
2461: LD_EXP 22
2465: ADD
2466: PUSH
2467: LD_EXP 26
2471: ADD
2472: PUSH
2473: LD_EXP 23
2477: ADD
2478: PPUSH
2479: LD_INT 93
2481: PPUSH
2482: LD_INT 1
2484: PPUSH
2485: CALL_OW 114
// end ;
2489: END
// every 0 0$1 trigger GetLives ( Pokryshkin ) < 1000 do
2490: LD_EXP 26
2494: PPUSH
2495: CALL_OW 256
2499: PUSH
2500: LD_INT 1000
2502: LESS
2503: IFFALSE 2554
2505: GO 2507
2507: DISABLE
// begin enable ;
2508: ENABLE
// if HexInfo ( 18 , 1 ) = Pokryshkin then
2509: LD_INT 18
2511: PPUSH
2512: LD_INT 1
2514: PPUSH
2515: CALL_OW 428
2519: PUSH
2520: LD_EXP 26
2524: EQUAL
2525: IFFALSE 2539
// begin RemoveUnit ( Pokryshkin ) ;
2527: LD_EXP 26
2531: PPUSH
2532: CALL_OW 64
// disable ;
2536: DISABLE
// end else
2537: GO 2554
// ComMoveXY ( Pokryshkin , 18 , 1 ) ;
2539: LD_EXP 26
2543: PPUSH
2544: LD_INT 18
2546: PPUSH
2547: LD_INT 1
2549: PPUSH
2550: CALL_OW 111
// end ;
2554: END
// every 0 0$20 trigger send_troops_to_forest do
2555: LD_EXP 14
2559: IFFALSE 2613
2561: GO 2563
2563: DISABLE
// begin if not IsOk ( russian_patrol_forest ) then
2564: LD_EXP 25
2568: PPUSH
2569: CALL_OW 302
2573: NOT
2574: IFFALSE 2578
// exit ;
2576: GO 2613
// ComAgressiveMove ( russian_troops_1 ^ Pokryshkin , GetRememberedX ( russian_patrol_forest ) , GetRememberedY ( russian_patrol_forest ) ) ;
2578: LD_EXP 21
2582: PUSH
2583: LD_EXP 26
2587: ADD
2588: PPUSH
2589: LD_EXP 25
2593: PPUSH
2594: CALL_OW 252
2598: PPUSH
2599: LD_EXP 25
2603: PPUSH
2604: CALL_OW 253
2608: PPUSH
2609: CALL_OW 114
// end ;
2613: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) = 3 then
2614: LD_VAR 0 1
2618: PPUSH
2619: CALL_OW 255
2623: PUSH
2624: LD_INT 3
2626: EQUAL
2627: IFFALSE 2670
// begin wait ( 11 ) ;
2629: LD_INT 11
2631: PPUSH
2632: CALL_OW 67
// ComEnterUnit ( driver , NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_depot ] ) , driver ) ) ;
2636: LD_VAR 0 1
2640: PPUSH
2641: LD_INT 30
2643: PUSH
2644: LD_INT 0
2646: PUSH
2647: EMPTY
2648: LIST
2649: LIST
2650: PPUSH
2651: CALL_OW 69
2655: PPUSH
2656: LD_VAR 0 1
2660: PPUSH
2661: CALL_OW 74
2665: PPUSH
2666: CALL_OW 120
// end ; end ; end_of_file
2670: PPOPN 4
2672: END
// export function Action ; var i ; begin
2673: LD_INT 0
2675: PPUSH
2676: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
2677: LD_ADDR_VAR 0 2
2681: PUSH
2682: LD_INT 22
2684: PUSH
2685: LD_INT 3
2687: PUSH
2688: EMPTY
2689: LIST
2690: LIST
2691: PUSH
2692: LD_INT 25
2694: PUSH
2695: LD_INT 1
2697: PUSH
2698: EMPTY
2699: LIST
2700: LIST
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: PPUSH
2706: CALL_OW 69
2710: PUSH
2711: FOR_IN
2712: IFFALSE 2725
// ComHold ( i ) ;
2714: LD_VAR 0 2
2718: PPUSH
2719: CALL_OW 140
2723: GO 2711
2725: POP
2726: POP
// InGameOn ;
2727: CALL_OW 8
// CenterOnXY ( 79 , 76 ) ;
2731: LD_INT 79
2733: PPUSH
2734: LD_INT 76
2736: PPUSH
2737: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
2741: LD_INT 10
2743: PPUSH
2744: CALL_OW 67
// PlaceUnitXY ( JMM , 80 , 79 , true ) ;
2748: LD_EXP 16
2752: PPUSH
2753: LD_INT 80
2755: PPUSH
2756: LD_INT 79
2758: PPUSH
2759: LD_INT 1
2761: PPUSH
2762: CALL_OW 48
// Wait ( 0 0$03 ) ;
2766: LD_INT 105
2768: PPUSH
2769: CALL_OW 67
// ComMoveXY ( JMM , 80 , 76 ) ;
2773: LD_EXP 16
2777: PPUSH
2778: LD_INT 80
2780: PPUSH
2781: LD_INT 76
2783: PPUSH
2784: CALL_OW 111
// Say ( JMM , D1-JMM-1 ) ;
2788: LD_EXP 16
2792: PPUSH
2793: LD_STRING D1-JMM-1
2795: PPUSH
2796: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2800: LD_INT 10
2802: PPUSH
2803: CALL_OW 67
// ComMoveXY ( JMM , 76 , 76 ) ;
2807: LD_EXP 16
2811: PPUSH
2812: LD_INT 76
2814: PPUSH
2815: LD_INT 76
2817: PPUSH
2818: CALL_OW 111
// Say ( JMM , D1-JMM-1a ) ;
2822: LD_EXP 16
2826: PPUSH
2827: LD_STRING D1-JMM-1a
2829: PPUSH
2830: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2834: LD_INT 10
2836: PPUSH
2837: CALL_OW 67
// ComTurnXY ( JMM , 83 , 66 ) ;
2841: LD_EXP 16
2845: PPUSH
2846: LD_INT 83
2848: PPUSH
2849: LD_INT 66
2851: PPUSH
2852: CALL_OW 118
// Say ( JMM , D1-JMM-1b ) ;
2856: LD_EXP 16
2860: PPUSH
2861: LD_STRING D1-JMM-1b
2863: PPUSH
2864: CALL_OW 88
// Wait ( 0 0$0.5 ) ;
2868: LD_INT 18
2870: PPUSH
2871: CALL_OW 67
// Say ( JMM , D1-JMM-1c ) ;
2875: LD_EXP 16
2879: PPUSH
2880: LD_STRING D1-JMM-1c
2882: PPUSH
2883: CALL_OW 88
// Wait ( 0 0$0.2 ) ;
2887: LD_INT 7
2889: PPUSH
2890: CALL_OW 67
// SayRadioNoFace ( Powell , D1-Pow-1 ) ;
2894: LD_EXP 19
2898: PPUSH
2899: LD_STRING D1-Pow-1
2901: PPUSH
2902: CALL_OW 586
// Say ( JMM , D1-JMM-2 ) ;
2906: LD_EXP 16
2910: PPUSH
2911: LD_STRING D1-JMM-2
2913: PPUSH
2914: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-2 ) ;
2918: LD_EXP 19
2922: PPUSH
2923: LD_STRING D1-Pow-2
2925: PPUSH
2926: CALL_OW 586
// Say ( JMM , D1-JMM-3 ) ;
2930: LD_EXP 16
2934: PPUSH
2935: LD_STRING D1-JMM-3
2937: PPUSH
2938: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-3 ) ;
2942: LD_EXP 19
2946: PPUSH
2947: LD_STRING D1-Pow-3
2949: PPUSH
2950: CALL_OW 586
// Say ( JMM , D1-JMM-4 ) ;
2954: LD_EXP 16
2958: PPUSH
2959: LD_STRING D1-JMM-4
2961: PPUSH
2962: CALL_OW 88
// ComFree ( JMM ) ;
2966: LD_EXP 16
2970: PPUSH
2971: CALL_OW 139
// Wait ( 0 0$0.3 ) ;
2975: LD_INT 10
2977: PPUSH
2978: CALL_OW 67
// InGameOff ;
2982: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
2986: LD_STRING M1
2988: PPUSH
2989: CALL_OW 337
// SaveForQuickRestart ;
2993: CALL_OW 22
// active_russian_dialog := true ;
2997: LD_ADDR_EXP 3
3001: PUSH
3002: LD_INT 1
3004: ST_TO_ADDR
// active_road_patrol := true ;
3005: LD_ADDR_EXP 8
3009: PUSH
3010: LD_INT 1
3012: ST_TO_ADDR
// if Difficulty < 3 then
3013: LD_OWVAR 67
3017: PUSH
3018: LD_INT 3
3020: LESS
3021: IFFALSE 3052
// begin PlaceUnitXY ( Bobby , 41 , 71 , false ) ;
3023: LD_EXP 17
3027: PPUSH
3028: LD_INT 41
3030: PPUSH
3031: LD_INT 71
3033: PPUSH
3034: LD_INT 0
3036: PPUSH
3037: CALL_OW 48
// ComHold ( Bobby ) ;
3041: LD_EXP 17
3045: PPUSH
3046: CALL_OW 140
// end else
3050: GO 3100
// begin SetDir ( Bobby , 5 ) ;
3052: LD_EXP 17
3056: PPUSH
3057: LD_INT 5
3059: PPUSH
3060: CALL_OW 233
// PlaceUnitXY ( Bobby , 105 , 98 , false ) ;
3064: LD_EXP 17
3068: PPUSH
3069: LD_INT 105
3071: PPUSH
3072: LD_INT 98
3074: PPUSH
3075: LD_INT 0
3077: PPUSH
3078: CALL_OW 48
// ComCrawl ( Bobby ) ;
3082: LD_EXP 17
3086: PPUSH
3087: CALL_OW 137
// AddComHold ( Bobby ) ;
3091: LD_EXP 17
3095: PPUSH
3096: CALL_OW 200
// end ; PlaceUnitXY ( Cyrus , 90 , 42 , false ) ;
3100: LD_EXP 18
3104: PPUSH
3105: LD_INT 90
3107: PPUSH
3108: LD_INT 42
3110: PPUSH
3111: LD_INT 0
3113: PPUSH
3114: CALL_OW 48
// ComMoveXY ( Cyrus , 79 , 34 ) ;
3118: LD_EXP 18
3122: PPUSH
3123: LD_INT 79
3125: PPUSH
3126: LD_INT 34
3128: PPUSH
3129: CALL_OW 111
// AddComCrawl ( Cyrus ) ;
3133: LD_EXP 18
3137: PPUSH
3138: CALL_OW 197
// end ;
3142: LD_VAR 0 1
3146: RET
// every 0 0$01 trigger active_russian_dialog do var wait_points ;
3147: LD_EXP 3
3151: IFFALSE 3745
3153: GO 3155
3155: DISABLE
3156: LD_INT 0
3158: PPUSH
// begin wait_points := 0 ;
3159: LD_ADDR_VAR 0 1
3163: PUSH
3164: LD_INT 0
3166: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
3167: LD_INT 70
3169: PPUSH
3170: CALL_OW 67
// ComAgressiveMove ( russian_troops_1 , 79 , 83 ) ;
3174: LD_EXP 21
3178: PPUSH
3179: LD_INT 79
3181: PPUSH
3182: LD_INT 83
3184: PPUSH
3185: CALL_OW 114
// Say ( russian_troops_1 [ 2 ] , D1R-Rus1-1 ) ;
3189: LD_EXP 21
3193: PUSH
3194: LD_INT 2
3196: ARRAY
3197: PPUSH
3198: LD_STRING D1R-Rus1-1
3200: PPUSH
3201: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1R-Rus2-1 ) ;
3205: LD_EXP 21
3209: PUSH
3210: LD_INT 1
3212: ARRAY
3213: PPUSH
3214: LD_STRING D1R-Rus2-1
3216: PPUSH
3217: CALL_OW 88
// ComAgressiveMove ( russian_troops_2 , 91 , 80 ) ;
3221: LD_EXP 22
3225: PPUSH
3226: LD_INT 91
3228: PPUSH
3229: LD_INT 80
3231: PPUSH
3232: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
3236: LD_INT 35
3238: PPUSH
3239: CALL_OW 67
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 79 , 82 ) < 6 ;
3243: LD_EXP 21
3247: PUSH
3248: LD_INT 1
3250: ARRAY
3251: PPUSH
3252: LD_INT 79
3254: PPUSH
3255: LD_INT 82
3257: PPUSH
3258: CALL_OW 297
3262: PUSH
3263: LD_INT 6
3265: LESS
3266: IFFALSE 3236
// if not IsInArea ( JMM , jmm_spot ) then
3268: LD_EXP 16
3272: PPUSH
3273: LD_INT 5
3275: PPUSH
3276: CALL_OW 308
3280: NOT
3281: IFFALSE 3301
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1 ) else
3283: LD_EXP 21
3287: PUSH
3288: LD_INT 1
3290: ARRAY
3291: PPUSH
3292: LD_STRING D1Ra-Rus2-1
3294: PPUSH
3295: CALL_OW 88
3299: GO 3368
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3301: LD_EXP 21
3305: PUSH
3306: LD_INT 2
3308: ARRAY
3309: PPUSH
3310: LD_STRING D1Rb-Rus1-1
3312: PPUSH
3313: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Rb-Rus2-1 ) ;
3317: LD_EXP 21
3321: PUSH
3322: LD_INT 1
3324: ARRAY
3325: PPUSH
3326: LD_STRING D1Rb-Rus2-1
3328: PPUSH
3329: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 , GetX ( JMM ) , GetY ( JMM ) ) ;
3333: LD_EXP 21
3337: PUSH
3338: LD_EXP 22
3342: ADD
3343: PPUSH
3344: LD_EXP 16
3348: PPUSH
3349: CALL_OW 250
3353: PPUSH
3354: LD_EXP 16
3358: PPUSH
3359: CALL_OW 251
3363: PPUSH
3364: CALL_OW 114
// end ; wait_points := 10 ;
3368: LD_ADDR_VAR 0 1
3372: PUSH
3373: LD_INT 10
3375: ST_TO_ADDR
// if Difficulty > 1 then
3376: LD_OWVAR 67
3380: PUSH
3381: LD_INT 1
3383: GREATER
3384: IFFALSE 3466
// begin ComAgressiveMove ( russian_troops_1 , 78 , 95 ) ;
3386: LD_EXP 21
3390: PPUSH
3391: LD_INT 78
3393: PPUSH
3394: LD_INT 95
3396: PPUSH
3397: CALL_OW 114
// AddComWait ( russian_troops_1 , 0 0$05 ) ;
3401: LD_EXP 21
3405: PPUSH
3406: LD_INT 175
3408: PPUSH
3409: CALL_OW 202
// wait_points := wait_points + 15 ;
3413: LD_ADDR_VAR 0 1
3417: PUSH
3418: LD_VAR 0 1
3422: PUSH
3423: LD_INT 15
3425: PLUS
3426: ST_TO_ADDR
// if Difficulty > 2 then
3427: LD_OWVAR 67
3431: PUSH
3432: LD_INT 2
3434: GREATER
3435: IFFALSE 3466
// begin AddComAgressiveMove ( russian_troops_1 , 65 , 79 ) ;
3437: LD_EXP 21
3441: PPUSH
3442: LD_INT 65
3444: PPUSH
3445: LD_INT 79
3447: PPUSH
3448: CALL_OW 174
// wait_points := wait_points + 5 ;
3452: LD_ADDR_VAR 0 1
3456: PUSH
3457: LD_VAR 0 1
3461: PUSH
3462: LD_INT 5
3464: PLUS
3465: ST_TO_ADDR
// end ; end ; repeat wait ( 0 0$01 ) ;
3466: LD_INT 35
3468: PPUSH
3469: CALL_OW 67
// wait_points := wait_points - 1 ;
3473: LD_ADDR_VAR 0 1
3477: PUSH
3478: LD_VAR 0 1
3482: PUSH
3483: LD_INT 1
3485: MINUS
3486: ST_TO_ADDR
// if See ( 3 , JMM ) then
3487: LD_INT 3
3489: PPUSH
3490: LD_EXP 16
3494: PPUSH
3495: CALL_OW 292
3499: IFFALSE 3553
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3501: LD_EXP 21
3505: PUSH
3506: LD_INT 2
3508: ARRAY
3509: PPUSH
3510: LD_STRING D1Rb-Rus1-1
3512: PPUSH
3513: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3517: LD_EXP 21
3521: PPUSH
3522: LD_EXP 16
3526: PPUSH
3527: CALL_OW 250
3531: PPUSH
3532: LD_EXP 16
3536: PPUSH
3537: CALL_OW 251
3541: PPUSH
3542: CALL_OW 114
// Wait ( 0 0$03 ) ;
3546: LD_INT 105
3548: PPUSH
3549: CALL_OW 67
// end ; until wait_points = 0 ;
3553: LD_VAR 0 1
3557: PUSH
3558: LD_INT 0
3560: EQUAL
3561: IFFALSE 3466
// Say ( russian_troops_1 [ 2 ] , D1Rc-Rus1-1 ) ;
3563: LD_EXP 21
3567: PUSH
3568: LD_INT 2
3570: ARRAY
3571: PPUSH
3572: LD_STRING D1Rc-Rus1-1
3574: PPUSH
3575: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1a ) ;
3579: LD_EXP 21
3583: PUSH
3584: LD_INT 1
3586: ARRAY
3587: PPUSH
3588: LD_STRING D1Ra-Rus2-1a
3590: PPUSH
3591: CALL_OW 88
// active_powell_dialog := true ;
3595: LD_ADDR_EXP 15
3599: PUSH
3600: LD_INT 1
3602: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3603: LD_EXP 21
3607: PPUSH
3608: LD_INT 45
3610: PPUSH
3611: LD_INT 5
3613: PPUSH
3614: CALL_OW 114
// ComEnterUnit ( russian_troops_2 , rbar1 ) ;
3618: LD_EXP 22
3622: PPUSH
3623: LD_INT 26
3625: PPUSH
3626: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
3630: LD_INT 35
3632: PPUSH
3633: CALL_OW 67
// if See ( 3 , JMM ) then
3637: LD_INT 3
3639: PPUSH
3640: LD_EXP 16
3644: PPUSH
3645: CALL_OW 292
3649: IFFALSE 3705
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3651: LD_EXP 21
3655: PUSH
3656: LD_INT 2
3658: ARRAY
3659: PPUSH
3660: LD_STRING D1Rb-Rus1-1
3662: PPUSH
3663: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3667: LD_EXP 21
3671: PPUSH
3672: LD_EXP 16
3676: PPUSH
3677: CALL_OW 250
3681: PPUSH
3682: LD_EXP 16
3686: PPUSH
3687: CALL_OW 251
3691: PPUSH
3692: CALL_OW 114
// Wait ( 0 0$50 ) ;
3696: LD_INT 1750
3698: PPUSH
3699: CALL_OW 67
// end else
3703: GO 3720
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3705: LD_EXP 21
3709: PPUSH
3710: LD_INT 45
3712: PPUSH
3713: LD_INT 5
3715: PPUSH
3716: CALL_OW 114
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 45 , 5 ) < 10 ;
3720: LD_EXP 21
3724: PUSH
3725: LD_INT 1
3727: ARRAY
3728: PPUSH
3729: LD_INT 45
3731: PPUSH
3732: LD_INT 5
3734: PPUSH
3735: CALL_OW 297
3739: PUSH
3740: LD_INT 10
3742: LESS
3743: IFFALSE 3630
// end ;
3745: PPOPN 1
3747: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 6 ] ] ) and Difficulty = 1 do
3748: LD_INT 22
3750: PUSH
3751: LD_INT 3
3753: PUSH
3754: EMPTY
3755: LIST
3756: LIST
3757: PUSH
3758: LD_INT 92
3760: PUSH
3761: LD_INT 80
3763: PUSH
3764: LD_INT 83
3766: PUSH
3767: LD_INT 6
3769: PUSH
3770: EMPTY
3771: LIST
3772: LIST
3773: LIST
3774: LIST
3775: PUSH
3776: EMPTY
3777: LIST
3778: LIST
3779: PPUSH
3780: CALL_OW 69
3784: PUSH
3785: LD_OWVAR 67
3789: PUSH
3790: LD_INT 1
3792: EQUAL
3793: AND
3794: IFFALSE 3875
3796: GO 3798
3798: DISABLE
// begin PlaceSeeing ( 80 , 83 , 1 , - 7 ) ;
3799: LD_INT 80
3801: PPUSH
3802: LD_INT 83
3804: PPUSH
3805: LD_INT 1
3807: PPUSH
3808: LD_INT 7
3810: NEG
3811: PPUSH
3812: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
3816: LD_INT 35
3818: PPUSH
3819: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 10 ] ] ) ;
3823: LD_INT 22
3825: PUSH
3826: LD_INT 3
3828: PUSH
3829: EMPTY
3830: LIST
3831: LIST
3832: PUSH
3833: LD_INT 92
3835: PUSH
3836: LD_INT 80
3838: PUSH
3839: LD_INT 83
3841: PUSH
3842: LD_INT 10
3844: PUSH
3845: EMPTY
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: PUSH
3851: EMPTY
3852: LIST
3853: LIST
3854: PPUSH
3855: CALL_OW 69
3859: NOT
3860: IFFALSE 3816
// RemoveSeeing ( 80 , 83 , 1 ) ;
3862: LD_INT 80
3864: PPUSH
3865: LD_INT 83
3867: PPUSH
3868: LD_INT 1
3870: PPUSH
3871: CALL_OW 331
// end ;
3875: END
// every 0 0$02 trigger GetDistUnits ( JMM , Bobby ) < 9 and IsOk ( Bobby ) do
3876: LD_EXP 16
3880: PPUSH
3881: LD_EXP 17
3885: PPUSH
3886: CALL_OW 296
3890: PUSH
3891: LD_INT 9
3893: LESS
3894: PUSH
3895: LD_EXP 17
3899: PPUSH
3900: CALL_OW 302
3904: AND
3905: IFFALSE 4356
3907: GO 3909
3909: DISABLE
// begin ComWalk ( Bobby ) ;
3910: LD_EXP 17
3914: PPUSH
3915: CALL_OW 138
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
3919: LD_EXP 17
3923: PPUSH
3924: LD_EXP 16
3928: PPUSH
3929: CALL_OW 250
3933: PPUSH
3934: LD_EXP 16
3938: PPUSH
3939: CALL_OW 251
3943: PPUSH
3944: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
3948: LD_INT 35
3950: PPUSH
3951: CALL_OW 67
// until See ( 4 , JMM ) ;
3955: LD_INT 4
3957: PPUSH
3958: LD_EXP 16
3962: PPUSH
3963: CALL_OW 292
3967: IFFALSE 3948
// InGameOn ;
3969: CALL_OW 8
// ComTurnUnit ( JMM , Bobby ) ;
3973: LD_EXP 16
3977: PPUSH
3978: LD_EXP 17
3982: PPUSH
3983: CALL_OW 119
// if cyrus_in_squad and IsOk ( Cyrus ) and GetDistUnits ( JMM , Cyrus ) < 10 then
3987: LD_EXP 7
3991: PUSH
3992: LD_EXP 18
3996: PPUSH
3997: CALL_OW 302
4001: AND
4002: PUSH
4003: LD_EXP 16
4007: PPUSH
4008: LD_EXP 18
4012: PPUSH
4013: CALL_OW 296
4017: PUSH
4018: LD_INT 10
4020: LESS
4021: AND
4022: IFFALSE 4067
// begin ComMoveXY ( Cyrus , GetX ( JMM ) , GetY ( JMM ) ) ;
4024: LD_EXP 18
4028: PPUSH
4029: LD_EXP 16
4033: PPUSH
4034: CALL_OW 250
4038: PPUSH
4039: LD_EXP 16
4043: PPUSH
4044: CALL_OW 251
4048: PPUSH
4049: CALL_OW 111
// AddComTurnUnit ( Cyrus , Bobby ) ;
4053: LD_EXP 18
4057: PPUSH
4058: LD_EXP 17
4062: PPUSH
4063: CALL_OW 179
// end ; Say ( JMM , D2-JMM-1 ) ;
4067: LD_EXP 16
4071: PPUSH
4072: LD_STRING D2-JMM-1
4074: PPUSH
4075: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
4079: LD_INT 10
4081: PPUSH
4082: CALL_OW 67
// ComTurnUnit ( Bobby , JMM ) ;
4086: LD_EXP 17
4090: PPUSH
4091: LD_EXP 16
4095: PPUSH
4096: CALL_OW 119
// Say ( Bobby , D2-Bobby-1 ) ;
4100: LD_EXP 17
4104: PPUSH
4105: LD_STRING D2-Bobby-1
4107: PPUSH
4108: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
4112: LD_EXP 16
4116: PPUSH
4117: LD_STRING D2-JMM-2
4119: PPUSH
4120: CALL_OW 88
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4124: LD_EXP 17
4128: PPUSH
4129: LD_EXP 16
4133: PPUSH
4134: CALL_OW 250
4138: PPUSH
4139: LD_EXP 16
4143: PPUSH
4144: CALL_OW 251
4148: PPUSH
4149: CALL_OW 111
// Say ( Bobby , D2-Bobby-2 ) ;
4153: LD_EXP 17
4157: PPUSH
4158: LD_STRING D2-Bobby-2
4160: PPUSH
4161: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
4165: LD_EXP 16
4169: PPUSH
4170: LD_STRING D2-JMM-3
4172: PPUSH
4173: CALL_OW 88
// ComTurnUnit ( Bobby , JMM ) ;
4177: LD_EXP 17
4181: PPUSH
4182: LD_EXP 16
4186: PPUSH
4187: CALL_OW 119
// Say ( Bobby , D2-Bobby-3 ) ;
4191: LD_EXP 17
4195: PPUSH
4196: LD_STRING D2-Bobby-3
4198: PPUSH
4199: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
4203: LD_EXP 16
4207: PPUSH
4208: LD_STRING D2-JMM-4
4210: PPUSH
4211: CALL_OW 88
// Say ( Bobby , D2-Bobby-4 ) ;
4215: LD_EXP 17
4219: PPUSH
4220: LD_STRING D2-Bobby-4
4222: PPUSH
4223: CALL_OW 88
// Say ( JMM , D2-JMM-5 ) ;
4227: LD_EXP 16
4231: PPUSH
4232: LD_STRING D2-JMM-5
4234: PPUSH
4235: CALL_OW 88
// Say ( Bobby , D2-Bobby-5 ) ;
4239: LD_EXP 17
4243: PPUSH
4244: LD_STRING D2-Bobby-5
4246: PPUSH
4247: CALL_OW 88
// Say ( JMM , D2-JMM-6 ) ;
4251: LD_EXP 16
4255: PPUSH
4256: LD_STRING D2-JMM-6
4258: PPUSH
4259: CALL_OW 88
// if not powell_contact then
4263: LD_EXP 5
4267: NOT
4268: IFFALSE 4294
// begin Say ( Bobby , D2-Bobby-6 ) ;
4270: LD_EXP 17
4274: PPUSH
4275: LD_STRING D2-Bobby-6
4277: PPUSH
4278: CALL_OW 88
// Say ( JMM , D2-JMM-7 ) ;
4282: LD_EXP 16
4286: PPUSH
4287: LD_STRING D2-JMM-7
4289: PPUSH
4290: CALL_OW 88
// end ; InGameOff ;
4294: CALL_OW 9
// SetSide ( Bobby , 1 ) ;
4298: LD_EXP 17
4302: PPUSH
4303: LD_INT 1
4305: PPUSH
4306: CALL_OW 235
// ComFree ( [ JMM , Bobby ] ) ;
4310: LD_EXP 16
4314: PUSH
4315: LD_EXP 17
4319: PUSH
4320: EMPTY
4321: LIST
4322: LIST
4323: PPUSH
4324: CALL_OW 139
// bobby_in_squad := true ;
4328: LD_ADDR_EXP 4
4332: PUSH
4333: LD_INT 1
4335: ST_TO_ADDR
// if powell_contact and not cyrus_in_squad then
4336: LD_EXP 5
4340: PUSH
4341: LD_EXP 7
4345: NOT
4346: AND
4347: IFFALSE 4356
// ChangeMissionObjectives ( M2b ) ;
4349: LD_STRING M2b
4351: PPUSH
4352: CALL_OW 337
// end ;
4356: END
// every 0 0$45 trigger active_russian_dialog and not bobby_in_squad and Difficulty < 3 do
4357: LD_EXP 3
4361: PUSH
4362: LD_EXP 4
4366: NOT
4367: AND
4368: PUSH
4369: LD_OWVAR 67
4373: PUSH
4374: LD_INT 3
4376: LESS
4377: AND
4378: IFFALSE 4398
4380: GO 4382
4382: DISABLE
// ComMoveXY ( Bobby , 75 , 83 ) ;
4383: LD_EXP 17
4387: PPUSH
4388: LD_INT 75
4390: PPUSH
4391: LD_INT 83
4393: PPUSH
4394: CALL_OW 111
4398: END
// every 0 0$10 trigger cyrus_in_squad and not bobby_in_squad do
4399: LD_EXP 7
4403: PUSH
4404: LD_EXP 4
4408: NOT
4409: AND
4410: IFFALSE 4439
4412: GO 4414
4414: DISABLE
// begin ComMoveXY ( Bobby , 105 , 97 ) ;
4415: LD_EXP 17
4419: PPUSH
4420: LD_INT 105
4422: PPUSH
4423: LD_INT 97
4425: PPUSH
4426: CALL_OW 111
// AddComCrawl ( Bobby ) ;
4430: LD_EXP 17
4434: PPUSH
4435: CALL_OW 197
// end ;
4439: END
// every 0 0$01 trigger IsInArea ( JMM , obstacle_area ) and GetDistUnits ( JMM , Bobby ) < 7 and bobby_in_squad do
4440: LD_EXP 16
4444: PPUSH
4445: LD_INT 6
4447: PPUSH
4448: CALL_OW 308
4452: PUSH
4453: LD_EXP 16
4457: PPUSH
4458: LD_EXP 17
4462: PPUSH
4463: CALL_OW 296
4467: PUSH
4468: LD_INT 7
4470: LESS
4471: AND
4472: PUSH
4473: LD_EXP 4
4477: AND
4478: IFFALSE 4525
4480: GO 4482
4482: DISABLE
// begin ComHold ( [ JMM , Bobby ] ) ;
4483: LD_EXP 16
4487: PUSH
4488: LD_EXP 17
4492: PUSH
4493: EMPTY
4494: LIST
4495: LIST
4496: PPUSH
4497: CALL_OW 140
// Say ( JMM , D2a-JMM-1 ) ;
4501: LD_EXP 16
4505: PPUSH
4506: LD_STRING D2a-JMM-1
4508: PPUSH
4509: CALL_OW 88
// Say ( Bobby , D2a-Bobby-1 ) ;
4513: LD_EXP 17
4517: PPUSH
4518: LD_STRING D2a-Bobby-1
4520: PPUSH
4521: CALL_OW 88
// end ;
4525: END
// every 0 0$50 trigger active_powell_dialog and not See ( 3 , JMM ) do
4526: LD_EXP 15
4530: PUSH
4531: LD_INT 3
4533: PPUSH
4534: LD_EXP 16
4538: PPUSH
4539: CALL_OW 292
4543: NOT
4544: AND
4545: IFFALSE 4716
4547: GO 4549
4549: DISABLE
// begin wait ( 0 0$5 ) ;
4550: LD_INT 175
4552: PPUSH
4553: CALL_OW 67
// InGameOn ;
4557: CALL_OW 8
// DialogueOn ;
4561: CALL_OW 6
// SayRadioNoFace ( Powell , D3-Pow-1 ) ;
4565: LD_EXP 19
4569: PPUSH
4570: LD_STRING D3-Pow-1
4572: PPUSH
4573: CALL_OW 586
// Say ( JMM , D3-JMM-1 ) ;
4577: LD_EXP 16
4581: PPUSH
4582: LD_STRING D3-JMM-1
4584: PPUSH
4585: CALL_OW 88
// SayRadioNoFace ( Powell , D3-Pow-2 ) ;
4589: LD_EXP 19
4593: PPUSH
4594: LD_STRING D3-Pow-2
4596: PPUSH
4597: CALL_OW 586
// Say ( JMM , D3-JMM-2 ) ;
4601: LD_EXP 16
4605: PPUSH
4606: LD_STRING D3-JMM-2
4608: PPUSH
4609: CALL_OW 88
// SayRadioNoFace ( Powell , D3-Pow-3 ) ;
4613: LD_EXP 19
4617: PPUSH
4618: LD_STRING D3-Pow-3
4620: PPUSH
4621: CALL_OW 586
// DialogueOff ;
4625: CALL_OW 7
// InGameOff ;
4629: CALL_OW 9
// powell_contact := true ;
4633: LD_ADDR_EXP 5
4637: PUSH
4638: LD_INT 1
4640: ST_TO_ADDR
// SetAreaMapShow ( exitArea , 1 ) ;
4641: LD_INT 10
4643: PPUSH
4644: LD_INT 1
4646: PPUSH
4647: CALL_OW 424
// uc_side := 4 ;
4651: LD_ADDR_OWVAR 20
4655: PUSH
4656: LD_INT 4
4658: ST_TO_ADDR
// uc_nation := 1 ;
4659: LD_ADDR_OWVAR 21
4663: PUSH
4664: LD_INT 1
4666: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
4667: LD_ADDR_EXP 19
4671: PUSH
4672: LD_STRING Powell
4674: PPUSH
4675: LD_INT 0
4677: PPUSH
4678: LD_STRING 
4680: PPUSH
4681: CALL 21503 0 3
4685: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
4686: LD_STRING M2
4688: PPUSH
4689: CALL_OW 337
// if not bobby_in_squad then
4693: LD_EXP 4
4697: NOT
4698: IFFALSE 4709
// ChangeMissionObjectives ( M2a ) else
4700: LD_STRING M2a
4702: PPUSH
4703: CALL_OW 337
4707: GO 4716
// ChangeMissionObjectives ( M2b ) ;
4709: LD_STRING M2b
4711: PPUSH
4712: CALL_OW 337
// end ;
4716: END
// every 0 0$01 trigger IsInArea ( JMM , fakeArea ) do
4717: LD_EXP 16
4721: PPUSH
4722: LD_INT 7
4724: PPUSH
4725: CALL_OW 308
4729: IFFALSE 4864
4731: GO 4733
4733: DISABLE
// begin DialogueOn ;
4734: CALL_OW 6
// SayRadioNoFace ( fakePokryshkin , D4-Rus3-1 ) ;
4738: LD_EXP 20
4742: PPUSH
4743: LD_STRING D4-Rus3-1
4745: PPUSH
4746: CALL_OW 586
// DialogueOff ;
4750: CALL_OW 7
// ChangeMissionObjectives ( M3a ) ;
4754: LD_STRING M3a
4756: PPUSH
4757: CALL_OW 337
// SetAreaMapShow ( fakeEnd , 1 ) ;
4761: LD_INT 11
4763: PPUSH
4764: LD_INT 1
4766: PPUSH
4767: CALL_OW 424
// Wait ( 0 0$02 ) ;
4771: LD_INT 70
4773: PPUSH
4774: CALL_OW 67
// DialogueOn ;
4778: CALL_OW 6
// SayRadioNoFace ( Powell , D4-Pow-1 ) ;
4782: LD_EXP 19
4786: PPUSH
4787: LD_STRING D4-Pow-1
4789: PPUSH
4790: CALL_OW 586
// DialogueOff ;
4794: CALL_OW 7
// ChangeMissionObjectives ( M3b ) ;
4798: LD_STRING M3b
4800: PPUSH
4801: CALL_OW 337
// case Query ( Q1 ) of 1 :
4805: LD_STRING Q1
4807: PPUSH
4808: CALL_OW 97
4812: PUSH
4813: LD_INT 1
4815: DOUBLE
4816: EQUAL
4817: IFTRUE 4821
4819: GO 4852
4821: POP
// begin macmilan_use_radio := true ;
4822: LD_ADDR_EXP 6
4826: PUSH
4827: LD_INT 1
4829: ST_TO_ADDR
// DialogueOn ;
4830: CALL_OW 6
// Say ( JMM , D4a-JMM-1 ) ;
4834: LD_EXP 16
4838: PPUSH
4839: LD_STRING D4a-JMM-1
4841: PPUSH
4842: CALL_OW 88
// DialogueOff ;
4846: CALL_OW 7
// end ; 2 :
4850: GO 4864
4852: LD_INT 2
4854: DOUBLE
4855: EQUAL
4856: IFTRUE 4860
4858: GO 4863
4860: POP
// ; end ;
4861: GO 4864
4863: POP
// end ;
4864: END
// every 0 0$02 trigger GetDistUnits ( JMM , Cyrus ) < 8 and IsOk ( Cyrus ) do
4865: LD_EXP 16
4869: PPUSH
4870: LD_EXP 18
4874: PPUSH
4875: CALL_OW 296
4879: PUSH
4880: LD_INT 8
4882: LESS
4883: PUSH
4884: LD_EXP 18
4888: PPUSH
4889: CALL_OW 302
4893: AND
4894: IFFALSE 5185
4896: GO 4898
4898: DISABLE
// begin InGameOn ;
4899: CALL_OW 8
// ComMoveXY ( JMM , GetX ( Cyrus ) , GetY ( Cyrus ) ) ;
4903: LD_EXP 16
4907: PPUSH
4908: LD_EXP 18
4912: PPUSH
4913: CALL_OW 250
4917: PPUSH
4918: LD_EXP 18
4922: PPUSH
4923: CALL_OW 251
4927: PPUSH
4928: CALL_OW 111
// if IsOk ( Bobby ) and bobby_in_squad then
4932: LD_EXP 17
4936: PPUSH
4937: CALL_OW 302
4941: PUSH
4942: LD_EXP 4
4946: AND
4947: IFFALSE 4978
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4949: LD_EXP 17
4953: PPUSH
4954: LD_EXP 16
4958: PPUSH
4959: CALL_OW 250
4963: PPUSH
4964: LD_EXP 16
4968: PPUSH
4969: CALL_OW 251
4973: PPUSH
4974: CALL_OW 111
// Say ( JMM , D5-JMM-1 ) ;
4978: LD_EXP 16
4982: PPUSH
4983: LD_STRING D5-JMM-1
4985: PPUSH
4986: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
4990: LD_INT 10
4992: PPUSH
4993: CALL_OW 67
// ComTurnUnit ( JMM , Cyrus ) ;
4997: LD_EXP 16
5001: PPUSH
5002: LD_EXP 18
5006: PPUSH
5007: CALL_OW 119
// ComWalk ( Cyrus ) ;
5011: LD_EXP 18
5015: PPUSH
5016: CALL_OW 138
// ComTurnUnit ( Cyrus , JMM ) ;
5020: LD_EXP 18
5024: PPUSH
5025: LD_EXP 16
5029: PPUSH
5030: CALL_OW 119
// Say ( Cyrus , D5-Cyrus-1 ) ;
5034: LD_EXP 18
5038: PPUSH
5039: LD_STRING D5-Cyrus-1
5041: PPUSH
5042: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5046: LD_EXP 17
5050: PPUSH
5051: CALL_OW 302
5055: PUSH
5056: LD_EXP 4
5060: AND
5061: IFFALSE 5101
// begin ComTurnUnit ( Bobby , Cyrus ) ;
5063: LD_EXP 17
5067: PPUSH
5068: LD_EXP 18
5072: PPUSH
5073: CALL_OW 119
// Say ( Bobby , D5-Bobby-1 ) ;
5077: LD_EXP 17
5081: PPUSH
5082: LD_STRING D5-Bobby-1
5084: PPUSH
5085: CALL_OW 88
// Say ( JMM , D5-JMM-2 ) ;
5089: LD_EXP 16
5093: PPUSH
5094: LD_STRING D5-JMM-2
5096: PPUSH
5097: CALL_OW 88
// end ; InGameOff ;
5101: CALL_OW 9
// cyrus_in_squad := true ;
5105: LD_ADDR_EXP 7
5109: PUSH
5110: LD_INT 1
5112: ST_TO_ADDR
// SetSide ( Cyrus , 1 ) ;
5113: LD_EXP 18
5117: PPUSH
5118: LD_INT 1
5120: PPUSH
5121: CALL_OW 235
// if powell_contact and not bobby_in_squad then
5125: LD_EXP 5
5129: PUSH
5130: LD_EXP 4
5134: NOT
5135: AND
5136: IFFALSE 5145
// ChangeMissionObjectives ( M2b ) ;
5138: LD_STRING M2b
5140: PPUSH
5141: CALL_OW 337
// if not bobby_in_squad and GetSide ( Bobby ) = 4 and IsOk ( Bobby ) then
5145: LD_EXP 4
5149: NOT
5150: PUSH
5151: LD_EXP 17
5155: PPUSH
5156: CALL_OW 255
5160: PUSH
5161: LD_INT 4
5163: EQUAL
5164: AND
5165: PUSH
5166: LD_EXP 17
5170: PPUSH
5171: CALL_OW 302
5175: AND
5176: IFFALSE 5185
// SetAchievement ( ACH_CYRUS ) ;
5178: LD_STRING ACH_CYRUS
5180: PPUSH
5181: CALL_OW 543
// end ;
5185: END
// every 0 0$01 trigger bobby_in_squad and cyrus_in_squad do
5186: LD_EXP 4
5190: PUSH
5191: LD_EXP 7
5195: AND
5196: IFFALSE 5208
5198: GO 5200
5200: DISABLE
// ChangeMissionObjectives ( M2c ) ;
5201: LD_STRING M2c
5203: PPUSH
5204: CALL_OW 337
5208: END
// every 0 0$01 trigger IsInArea ( JMM , trap ) do
5209: LD_EXP 16
5213: PPUSH
5214: LD_INT 8
5216: PPUSH
5217: CALL_OW 308
5221: IFFALSE 5273
5223: GO 5225
5225: DISABLE
// begin macmilan_in_trap := true ;
5226: LD_ADDR_EXP 9
5230: PUSH
5231: LD_INT 1
5233: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
5234: LD_INT 35
5236: PPUSH
5237: CALL_OW 67
// DialogueOn ;
5241: CALL_OW 6
// Say ( Pokryshkin , D5-Pok-1 ) ;
5245: LD_EXP 26
5249: PPUSH
5250: LD_STRING D5-Pok-1
5252: PPUSH
5253: CALL_OW 88
// DialogueOff ;
5257: CALL_OW 7
// Say ( JMM , D4b-JMM-1 ) ;
5261: LD_EXP 16
5265: PPUSH
5266: LD_STRING D4b-JMM-1
5268: PPUSH
5269: CALL_OW 88
// end ;
5273: END
// every 0 0$01 trigger GetDistUnits ( JMM , russian_meta_guards [ russian_meta_guards ] ) < 12 or UnitFilter ( russian_meta_guards , [ f_not , [ f_lives , 990 ] ] ) do var i , hp ;
5274: LD_EXP 16
5278: PPUSH
5279: LD_EXP 24
5283: PUSH
5284: LD_EXP 24
5288: ARRAY
5289: PPUSH
5290: CALL_OW 296
5294: PUSH
5295: LD_INT 12
5297: LESS
5298: PUSH
5299: LD_EXP 24
5303: PPUSH
5304: LD_INT 3
5306: PUSH
5307: LD_INT 24
5309: PUSH
5310: LD_INT 990
5312: PUSH
5313: EMPTY
5314: LIST
5315: LIST
5316: PUSH
5317: EMPTY
5318: LIST
5319: LIST
5320: PPUSH
5321: CALL_OW 72
5325: OR
5326: IFFALSE 5556
5328: GO 5330
5330: DISABLE
5331: LD_INT 0
5333: PPUSH
5334: PPUSH
// begin hp := [ 300 , 250 , 200 ] [ Difficulty ] ;
5335: LD_ADDR_VAR 0 2
5339: PUSH
5340: LD_INT 300
5342: PUSH
5343: LD_INT 250
5345: PUSH
5346: LD_INT 200
5348: PUSH
5349: EMPTY
5350: LIST
5351: LIST
5352: LIST
5353: PUSH
5354: LD_OWVAR 67
5358: ARRAY
5359: ST_TO_ADDR
// for i in russian_meta_guards do
5360: LD_ADDR_VAR 0 1
5364: PUSH
5365: LD_EXP 24
5369: PUSH
5370: FOR_IN
5371: IFFALSE 5411
// if IsOk ( i ) then
5373: LD_VAR 0 1
5377: PPUSH
5378: CALL_OW 302
5382: IFFALSE 5409
// SetLives ( i , GetLives ( i ) - hp ) ;
5384: LD_VAR 0 1
5388: PPUSH
5389: LD_VAR 0 1
5393: PPUSH
5394: CALL_OW 256
5398: PUSH
5399: LD_VAR 0 2
5403: MINUS
5404: PPUSH
5405: CALL_OW 234
5409: GO 5370
5411: POP
5412: POP
// DialogueOn ;
5413: CALL_OW 6
// Say ( russian_meta_guards [ russian_meta_guards ] , D6-FRus1-1 ) ;
5417: LD_EXP 24
5421: PUSH
5422: LD_EXP 24
5426: ARRAY
5427: PPUSH
5428: LD_STRING D6-FRus1-1
5430: PPUSH
5431: CALL_OW 88
// Say ( JMM , D6-JMM-1 ) ;
5435: LD_EXP 16
5439: PPUSH
5440: LD_STRING D6-JMM-1
5442: PPUSH
5443: CALL_OW 88
// if IsOk ( Cyrus ) and cyrus_in_squad then
5447: LD_EXP 18
5451: PPUSH
5452: CALL_OW 302
5456: PUSH
5457: LD_EXP 7
5461: AND
5462: IFFALSE 5476
// Say ( Cyrus , D6-Cyrus-1 ) ;
5464: LD_EXP 18
5468: PPUSH
5469: LD_STRING D6-Cyrus-1
5471: PPUSH
5472: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5476: LD_EXP 17
5480: PPUSH
5481: CALL_OW 302
5485: PUSH
5486: LD_EXP 4
5490: AND
5491: IFFALSE 5505
// Say ( Bobby , D6-Bobby-1 ) ;
5493: LD_EXP 17
5497: PPUSH
5498: LD_STRING D6-Bobby-1
5500: PPUSH
5501: CALL_OW 88
// DialogueOff ;
5505: CALL_OW 7
// Wait ( [ 0 0$04 , 0 0$03 , 0 0$02 ] [ Difficulty ] ) ;
5509: LD_INT 140
5511: PUSH
5512: LD_INT 105
5514: PUSH
5515: LD_INT 70
5517: PUSH
5518: EMPTY
5519: LIST
5520: LIST
5521: LIST
5522: PUSH
5523: LD_OWVAR 67
5527: ARRAY
5528: PPUSH
5529: CALL_OW 67
// meta_action := true ;
5533: LD_ADDR_EXP 10
5537: PUSH
5538: LD_INT 1
5540: ST_TO_ADDR
// ComAgressiveMove ( russian_meta_guards , 94 , 8 ) ;
5541: LD_EXP 24
5545: PPUSH
5546: LD_INT 94
5548: PPUSH
5549: LD_INT 8
5551: PPUSH
5552: CALL_OW 114
// end ;
5556: PPOPN 2
5558: END
// every 0 0$01 trigger GetDistUnitXY ( JMM , 93 , 1 ) < 5 and FilterAllUnits ( [ f_side , 1 ] ) > 1 do
5559: LD_EXP 16
5563: PPUSH
5564: LD_INT 93
5566: PPUSH
5567: LD_INT 1
5569: PPUSH
5570: CALL_OW 297
5574: PUSH
5575: LD_INT 5
5577: LESS
5578: PUSH
5579: LD_INT 22
5581: PUSH
5582: LD_INT 1
5584: PUSH
5585: EMPTY
5586: LIST
5587: LIST
5588: PPUSH
5589: CALL_OW 69
5593: PUSH
5594: LD_INT 1
5596: GREATER
5597: AND
5598: IFFALSE 5615
5600: GO 5602
5602: DISABLE
// Say ( JMM , D6a-JMM-1 ) ;
5603: LD_EXP 16
5607: PPUSH
5608: LD_STRING D6a-JMM-1
5610: PPUSH
5611: CALL_OW 88
5615: END
// on UnitGoesToRed ( un ) do begin if un = JMM then
5616: LD_VAR 0 1
5620: PUSH
5621: LD_EXP 16
5625: EQUAL
5626: IFFALSE 5635
// YouLost ( JMM ) ;
5628: LD_STRING JMM
5630: PPUSH
5631: CALL_OW 104
// end ;
5635: PPOPN 1
5637: END
// on UnitDestroyed ( un ) do begin if un = JMM then
5638: LD_VAR 0 1
5642: PUSH
5643: LD_EXP 16
5647: EQUAL
5648: IFFALSE 5657
// YouLost ( JMM ) ;
5650: LD_STRING JMM
5652: PPUSH
5653: CALL_OW 104
// end ;
5657: PPOPN 1
5659: END
// every 0 0$01 trigger IsInArea ( Bobby , exitArea ) do
5660: LD_EXP 17
5664: PPUSH
5665: LD_INT 10
5667: PPUSH
5668: CALL_OW 308
5672: IFFALSE 5721
5674: GO 5676
5676: DISABLE
// begin bobby_saved := true ;
5677: LD_ADDR_EXP 12
5681: PUSH
5682: LD_INT 1
5684: ST_TO_ADDR
// SaveVariable ( GetLives ( Bobby ) , 01_BobbyLifePoints_1 ) ;
5685: LD_EXP 17
5689: PPUSH
5690: CALL_OW 256
5694: PPUSH
5695: LD_STRING 01_BobbyLifePoints_1
5697: PPUSH
5698: CALL_OW 39
// RemoveUnit ( Bobby ) ;
5702: LD_EXP 17
5706: PPUSH
5707: CALL_OW 64
// AddMedal ( Bobby , 1 ) ;
5711: LD_STRING Bobby
5713: PPUSH
5714: LD_INT 1
5716: PPUSH
5717: CALL_OW 101
// end ;
5721: END
// every 0 0$01 trigger IsInArea ( Cyrus , exitArea ) do
5722: LD_EXP 18
5726: PPUSH
5727: LD_INT 10
5729: PPUSH
5730: CALL_OW 308
5734: IFFALSE 5783
5736: GO 5738
5738: DISABLE
// begin cyrus_saved := true ;
5739: LD_ADDR_EXP 13
5743: PUSH
5744: LD_INT 1
5746: ST_TO_ADDR
// SaveVariable ( GetLives ( Cyrus ) , 01_CyrusLifePoints_1 ) ;
5747: LD_EXP 18
5751: PPUSH
5752: CALL_OW 256
5756: PPUSH
5757: LD_STRING 01_CyrusLifePoints_1
5759: PPUSH
5760: CALL_OW 39
// RemoveUnit ( Cyrus ) ;
5764: LD_EXP 18
5768: PPUSH
5769: CALL_OW 64
// AddMedal ( Cyrus , 1 ) ;
5773: LD_STRING Cyrus
5775: PPUSH
5776: LD_INT 1
5778: PPUSH
5779: CALL_OW 101
// end ;
5783: END
// every 0 0$01 trigger IsInArea ( JMM , exitArea ) do var i , to_reward , wait_for_them , m1 , m2 , m3 ;
5784: LD_EXP 16
5788: PPUSH
5789: LD_INT 10
5791: PPUSH
5792: CALL_OW 308
5796: IFFALSE 6404
5798: GO 5800
5800: DISABLE
5801: LD_INT 0
5803: PPUSH
5804: PPUSH
5805: PPUSH
5806: PPUSH
5807: PPUSH
5808: PPUSH
// begin if macmilan_use_radio then
5809: LD_EXP 6
5813: IFFALSE 5822
// SetAchievement ( ACH_RADIO ) ;
5815: LD_STRING ACH_RADIO
5817: PPUSH
5818: CALL_OW 543
// if ( not cyrus_saved and cyrus_in_squad and IsOk ( Cyrus ) ) or ( not bobby_saved and bobby_in_squad and IsOk ( Bobby ) ) then
5822: LD_EXP 13
5826: NOT
5827: PUSH
5828: LD_EXP 7
5832: AND
5833: PUSH
5834: LD_EXP 18
5838: PPUSH
5839: CALL_OW 302
5843: AND
5844: PUSH
5845: LD_EXP 12
5849: NOT
5850: PUSH
5851: LD_EXP 4
5855: AND
5856: PUSH
5857: LD_EXP 17
5861: PPUSH
5862: CALL_OW 302
5866: AND
5867: OR
5868: IFFALSE 5909
// case Query ( Q2 ) of 1 :
5870: LD_STRING Q2
5872: PPUSH
5873: CALL_OW 97
5877: PUSH
5878: LD_INT 1
5880: DOUBLE
5881: EQUAL
5882: IFTRUE 5886
5884: GO 5897
5886: POP
// wait_for_them := true ; 2 :
5887: LD_ADDR_VAR 0 3
5891: PUSH
5892: LD_INT 1
5894: ST_TO_ADDR
5895: GO 5909
5897: LD_INT 2
5899: DOUBLE
5900: EQUAL
5901: IFTRUE 5905
5903: GO 5908
5905: POP
// ; end ;
5906: GO 5909
5908: POP
// if wait_for_them then
5909: LD_VAR 0 3
5913: IFFALSE 6026
// repeat wait ( 0 0$01 ) ;
5915: LD_INT 35
5917: PPUSH
5918: CALL_OW 67
// until ( cyrus_saved and bobby_saved ) or ( cyrus_saved and ( not bobby_in_squad or IsDying ( Bobby ) or IsDead ( Bobby ) ) ) or ( bobby_saved and ( not cyrus_in_squad or IsDying ( Cyrus ) or IsDead ( Cyrus ) ) ) or ( IsDead ( Bobby ) and IsDead ( Cyrus ) ) ;
5922: LD_EXP 13
5926: PUSH
5927: LD_EXP 12
5931: AND
5932: PUSH
5933: LD_EXP 13
5937: PUSH
5938: LD_EXP 4
5942: NOT
5943: PUSH
5944: LD_EXP 17
5948: PPUSH
5949: CALL_OW 303
5953: OR
5954: PUSH
5955: LD_EXP 17
5959: PPUSH
5960: CALL_OW 301
5964: OR
5965: AND
5966: OR
5967: PUSH
5968: LD_EXP 12
5972: PUSH
5973: LD_EXP 7
5977: NOT
5978: PUSH
5979: LD_EXP 18
5983: PPUSH
5984: CALL_OW 303
5988: OR
5989: PUSH
5990: LD_EXP 18
5994: PPUSH
5995: CALL_OW 301
5999: OR
6000: AND
6001: OR
6002: PUSH
6003: LD_EXP 17
6007: PPUSH
6008: CALL_OW 301
6012: PUSH
6013: LD_EXP 18
6017: PPUSH
6018: CALL_OW 301
6022: AND
6023: OR
6024: IFFALSE 5915
// SaveVariable ( GetLives ( JMM ) , 01_JMMLifePoints_1 ) ;
6026: LD_EXP 16
6030: PPUSH
6031: CALL_OW 256
6035: PPUSH
6036: LD_STRING 01_JMMLifePoints_1
6038: PPUSH
6039: CALL_OW 39
// RemoveUnit ( JMM ) ;
6043: LD_EXP 16
6047: PPUSH
6048: CALL_OW 64
// to_reward := [ JMM ] ;
6052: LD_ADDR_VAR 0 2
6056: PUSH
6057: LD_EXP 16
6061: PUSH
6062: EMPTY
6063: LIST
6064: ST_TO_ADDR
// if bobby_saved then
6065: LD_EXP 12
6069: IFFALSE 6087
// to_reward := to_reward ^ Bobby ;
6071: LD_ADDR_VAR 0 2
6075: PUSH
6076: LD_VAR 0 2
6080: PUSH
6081: LD_EXP 17
6085: ADD
6086: ST_TO_ADDR
// if cyrus_saved then
6087: LD_EXP 13
6091: IFFALSE 6109
// to_reward := to_reward ^ Cyrus ;
6093: LD_ADDR_VAR 0 2
6097: PUSH
6098: LD_VAR 0 2
6102: PUSH
6103: LD_EXP 18
6107: ADD
6108: ST_TO_ADDR
// m1 := true ;
6109: LD_ADDR_VAR 0 4
6113: PUSH
6114: LD_INT 1
6116: ST_TO_ADDR
// m2 := bobby_saved ;
6117: LD_ADDR_VAR 0 5
6121: PUSH
6122: LD_EXP 12
6126: ST_TO_ADDR
// m3 := cyrus_saved ;
6127: LD_ADDR_VAR 0 6
6131: PUSH
6132: LD_EXP 13
6136: ST_TO_ADDR
// AddMedal ( JMM , 1 ) ;
6137: LD_STRING JMM
6139: PPUSH
6140: LD_INT 1
6142: PPUSH
6143: CALL_OW 101
// if not bobby_in_squad then
6147: LD_EXP 4
6151: NOT
6152: IFFALSE 6165
// AddMedal ( Bobby , - 1 ) ;
6154: LD_STRING Bobby
6156: PPUSH
6157: LD_INT 1
6159: NEG
6160: PPUSH
6161: CALL_OW 101
// if not bobby_saved and ( IsDying ( Bobby ) or IsDead ( Bobby ) ) then
6165: LD_EXP 12
6169: NOT
6170: PUSH
6171: LD_EXP 17
6175: PPUSH
6176: CALL_OW 303
6180: PUSH
6181: LD_EXP 17
6185: PPUSH
6186: CALL_OW 301
6190: OR
6191: AND
6192: IFFALSE 6205
// AddMedal ( Bobby , - 2 ) ;
6194: LD_STRING Bobby
6196: PPUSH
6197: LD_INT 2
6199: NEG
6200: PPUSH
6201: CALL_OW 101
// if not cyrus_in_squad then
6205: LD_EXP 7
6209: NOT
6210: IFFALSE 6223
// AddMedal ( Cyrus , - 1 ) ;
6212: LD_STRING Cyrus
6214: PPUSH
6215: LD_INT 1
6217: NEG
6218: PPUSH
6219: CALL_OW 101
// if not cyrus_saved and ( IsDying ( Cyrus ) or IsDead ( Cyrus ) ) then
6223: LD_EXP 13
6227: NOT
6228: PUSH
6229: LD_EXP 18
6233: PPUSH
6234: CALL_OW 303
6238: PUSH
6239: LD_EXP 18
6243: PPUSH
6244: CALL_OW 301
6248: OR
6249: AND
6250: IFFALSE 6263
// AddMedal ( Cyrus , - 2 ) ;
6252: LD_STRING Cyrus
6254: PPUSH
6255: LD_INT 2
6257: NEG
6258: PPUSH
6259: CALL_OW 101
// if Difficulty = 3 and m1 and m2 and m3 then
6263: LD_OWVAR 67
6267: PUSH
6268: LD_INT 3
6270: EQUAL
6271: PUSH
6272: LD_VAR 0 4
6276: AND
6277: PUSH
6278: LD_VAR 0 5
6282: AND
6283: PUSH
6284: LD_VAR 0 6
6288: AND
6289: IFFALSE 6301
// SetAchievementEX ( ACH_AMER , 1 ) ;
6291: LD_STRING ACH_AMER
6293: PPUSH
6294: LD_INT 1
6296: PPUSH
6297: CALL_OW 564
// GiveMedals ( MAIN ) ;
6301: LD_STRING MAIN
6303: PPUSH
6304: CALL_OW 102
// RewardPeople ( to_reward ) ;
6308: LD_VAR 0 2
6312: PPUSH
6313: CALL_OW 43
// if bobby_saved then
6317: LD_EXP 12
6321: IFFALSE 6341
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
6323: LD_EXP 17
6327: PPUSH
6328: LD_EXP 2
6332: PUSH
6333: LD_STRING Bobby
6335: STR
6336: PPUSH
6337: CALL_OW 38
// if cyrus_saved then
6341: LD_EXP 13
6345: IFFALSE 6365
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
6347: LD_EXP 18
6351: PPUSH
6352: LD_EXP 2
6356: PUSH
6357: LD_STRING Cyrus
6359: STR
6360: PPUSH
6361: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
6365: LD_EXP 16
6369: PPUSH
6370: LD_EXP 2
6374: PUSH
6375: LD_STRING JMM
6377: STR
6378: PPUSH
6379: CALL_OW 38
// if tick <= 3 3$00 then
6383: LD_OWVAR 1
6387: PUSH
6388: LD_INT 6300
6390: LESSEQUAL
6391: IFFALSE 6400
// SetAchievement ( ACH_ASPEED_1 ) ;
6393: LD_STRING ACH_ASPEED_1
6395: PPUSH
6396: CALL_OW 543
// YouWin ;
6400: CALL_OW 103
// end ; end_of_file end_of_file
6404: PPOPN 6
6406: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
6407: LD_VAR 0 2
6411: PUSH
6412: LD_INT 100
6414: EQUAL
6415: IFFALSE 7364
// begin if not StreamModeActive then
6417: LD_EXP 27
6421: NOT
6422: IFFALSE 6432
// StreamModeActive := true ;
6424: LD_ADDR_EXP 27
6428: PUSH
6429: LD_INT 1
6431: ST_TO_ADDR
// if p3 = 0 then
6432: LD_VAR 0 3
6436: PUSH
6437: LD_INT 0
6439: EQUAL
6440: IFFALSE 6446
// InitStreamMode ;
6442: CALL 7522 0 0
// if p3 = 1 then
6446: LD_VAR 0 3
6450: PUSH
6451: LD_INT 1
6453: EQUAL
6454: IFFALSE 6464
// sRocket := true ;
6456: LD_ADDR_EXP 32
6460: PUSH
6461: LD_INT 1
6463: ST_TO_ADDR
// if p3 = 2 then
6464: LD_VAR 0 3
6468: PUSH
6469: LD_INT 2
6471: EQUAL
6472: IFFALSE 6482
// sSpeed := true ;
6474: LD_ADDR_EXP 31
6478: PUSH
6479: LD_INT 1
6481: ST_TO_ADDR
// if p3 = 3 then
6482: LD_VAR 0 3
6486: PUSH
6487: LD_INT 3
6489: EQUAL
6490: IFFALSE 6500
// sEngine := true ;
6492: LD_ADDR_EXP 33
6496: PUSH
6497: LD_INT 1
6499: ST_TO_ADDR
// if p3 = 4 then
6500: LD_VAR 0 3
6504: PUSH
6505: LD_INT 4
6507: EQUAL
6508: IFFALSE 6518
// sSpec := true ;
6510: LD_ADDR_EXP 30
6514: PUSH
6515: LD_INT 1
6517: ST_TO_ADDR
// if p3 = 5 then
6518: LD_VAR 0 3
6522: PUSH
6523: LD_INT 5
6525: EQUAL
6526: IFFALSE 6536
// sLevel := true ;
6528: LD_ADDR_EXP 34
6532: PUSH
6533: LD_INT 1
6535: ST_TO_ADDR
// if p3 = 6 then
6536: LD_VAR 0 3
6540: PUSH
6541: LD_INT 6
6543: EQUAL
6544: IFFALSE 6554
// sArmoury := true ;
6546: LD_ADDR_EXP 35
6550: PUSH
6551: LD_INT 1
6553: ST_TO_ADDR
// if p3 = 7 then
6554: LD_VAR 0 3
6558: PUSH
6559: LD_INT 7
6561: EQUAL
6562: IFFALSE 6572
// sRadar := true ;
6564: LD_ADDR_EXP 36
6568: PUSH
6569: LD_INT 1
6571: ST_TO_ADDR
// if p3 = 8 then
6572: LD_VAR 0 3
6576: PUSH
6577: LD_INT 8
6579: EQUAL
6580: IFFALSE 6590
// sBunker := true ;
6582: LD_ADDR_EXP 37
6586: PUSH
6587: LD_INT 1
6589: ST_TO_ADDR
// if p3 = 9 then
6590: LD_VAR 0 3
6594: PUSH
6595: LD_INT 9
6597: EQUAL
6598: IFFALSE 6608
// sHack := true ;
6600: LD_ADDR_EXP 38
6604: PUSH
6605: LD_INT 1
6607: ST_TO_ADDR
// if p3 = 10 then
6608: LD_VAR 0 3
6612: PUSH
6613: LD_INT 10
6615: EQUAL
6616: IFFALSE 6626
// sFire := true ;
6618: LD_ADDR_EXP 39
6622: PUSH
6623: LD_INT 1
6625: ST_TO_ADDR
// if p3 = 11 then
6626: LD_VAR 0 3
6630: PUSH
6631: LD_INT 11
6633: EQUAL
6634: IFFALSE 6644
// sRefresh := true ;
6636: LD_ADDR_EXP 40
6640: PUSH
6641: LD_INT 1
6643: ST_TO_ADDR
// if p3 = 12 then
6644: LD_VAR 0 3
6648: PUSH
6649: LD_INT 12
6651: EQUAL
6652: IFFALSE 6662
// sExp := true ;
6654: LD_ADDR_EXP 41
6658: PUSH
6659: LD_INT 1
6661: ST_TO_ADDR
// if p3 = 13 then
6662: LD_VAR 0 3
6666: PUSH
6667: LD_INT 13
6669: EQUAL
6670: IFFALSE 6680
// sDepot := true ;
6672: LD_ADDR_EXP 42
6676: PUSH
6677: LD_INT 1
6679: ST_TO_ADDR
// if p3 = 14 then
6680: LD_VAR 0 3
6684: PUSH
6685: LD_INT 14
6687: EQUAL
6688: IFFALSE 6698
// sFlag := true ;
6690: LD_ADDR_EXP 43
6694: PUSH
6695: LD_INT 1
6697: ST_TO_ADDR
// if p3 = 15 then
6698: LD_VAR 0 3
6702: PUSH
6703: LD_INT 15
6705: EQUAL
6706: IFFALSE 6716
// sKamikadze := true ;
6708: LD_ADDR_EXP 51
6712: PUSH
6713: LD_INT 1
6715: ST_TO_ADDR
// if p3 = 16 then
6716: LD_VAR 0 3
6720: PUSH
6721: LD_INT 16
6723: EQUAL
6724: IFFALSE 6734
// sTroll := true ;
6726: LD_ADDR_EXP 52
6730: PUSH
6731: LD_INT 1
6733: ST_TO_ADDR
// if p3 = 17 then
6734: LD_VAR 0 3
6738: PUSH
6739: LD_INT 17
6741: EQUAL
6742: IFFALSE 6752
// sSlow := true ;
6744: LD_ADDR_EXP 53
6748: PUSH
6749: LD_INT 1
6751: ST_TO_ADDR
// if p3 = 18 then
6752: LD_VAR 0 3
6756: PUSH
6757: LD_INT 18
6759: EQUAL
6760: IFFALSE 6770
// sLack := true ;
6762: LD_ADDR_EXP 54
6766: PUSH
6767: LD_INT 1
6769: ST_TO_ADDR
// if p3 = 19 then
6770: LD_VAR 0 3
6774: PUSH
6775: LD_INT 19
6777: EQUAL
6778: IFFALSE 6788
// sTank := true ;
6780: LD_ADDR_EXP 56
6784: PUSH
6785: LD_INT 1
6787: ST_TO_ADDR
// if p3 = 20 then
6788: LD_VAR 0 3
6792: PUSH
6793: LD_INT 20
6795: EQUAL
6796: IFFALSE 6806
// sRemote := true ;
6798: LD_ADDR_EXP 57
6802: PUSH
6803: LD_INT 1
6805: ST_TO_ADDR
// if p3 = 21 then
6806: LD_VAR 0 3
6810: PUSH
6811: LD_INT 21
6813: EQUAL
6814: IFFALSE 6824
// sPowell := true ;
6816: LD_ADDR_EXP 58
6820: PUSH
6821: LD_INT 1
6823: ST_TO_ADDR
// if p3 = 22 then
6824: LD_VAR 0 3
6828: PUSH
6829: LD_INT 22
6831: EQUAL
6832: IFFALSE 6842
// sTeleport := true ;
6834: LD_ADDR_EXP 61
6838: PUSH
6839: LD_INT 1
6841: ST_TO_ADDR
// if p3 = 23 then
6842: LD_VAR 0 3
6846: PUSH
6847: LD_INT 23
6849: EQUAL
6850: IFFALSE 6860
// sOilTower := true ;
6852: LD_ADDR_EXP 63
6856: PUSH
6857: LD_INT 1
6859: ST_TO_ADDR
// if p3 = 24 then
6860: LD_VAR 0 3
6864: PUSH
6865: LD_INT 24
6867: EQUAL
6868: IFFALSE 6878
// sShovel := true ;
6870: LD_ADDR_EXP 64
6874: PUSH
6875: LD_INT 1
6877: ST_TO_ADDR
// if p3 = 25 then
6878: LD_VAR 0 3
6882: PUSH
6883: LD_INT 25
6885: EQUAL
6886: IFFALSE 6896
// sSheik := true ;
6888: LD_ADDR_EXP 65
6892: PUSH
6893: LD_INT 1
6895: ST_TO_ADDR
// if p3 = 26 then
6896: LD_VAR 0 3
6900: PUSH
6901: LD_INT 26
6903: EQUAL
6904: IFFALSE 6914
// sEarthquake := true ;
6906: LD_ADDR_EXP 67
6910: PUSH
6911: LD_INT 1
6913: ST_TO_ADDR
// if p3 = 27 then
6914: LD_VAR 0 3
6918: PUSH
6919: LD_INT 27
6921: EQUAL
6922: IFFALSE 6932
// sAI := true ;
6924: LD_ADDR_EXP 68
6928: PUSH
6929: LD_INT 1
6931: ST_TO_ADDR
// if p3 = 28 then
6932: LD_VAR 0 3
6936: PUSH
6937: LD_INT 28
6939: EQUAL
6940: IFFALSE 6950
// sCargo := true ;
6942: LD_ADDR_EXP 71
6946: PUSH
6947: LD_INT 1
6949: ST_TO_ADDR
// if p3 = 29 then
6950: LD_VAR 0 3
6954: PUSH
6955: LD_INT 29
6957: EQUAL
6958: IFFALSE 6968
// sDLaser := true ;
6960: LD_ADDR_EXP 72
6964: PUSH
6965: LD_INT 1
6967: ST_TO_ADDR
// if p3 = 30 then
6968: LD_VAR 0 3
6972: PUSH
6973: LD_INT 30
6975: EQUAL
6976: IFFALSE 6986
// sExchange := true ;
6978: LD_ADDR_EXP 73
6982: PUSH
6983: LD_INT 1
6985: ST_TO_ADDR
// if p3 = 31 then
6986: LD_VAR 0 3
6990: PUSH
6991: LD_INT 31
6993: EQUAL
6994: IFFALSE 7004
// sFac := true ;
6996: LD_ADDR_EXP 74
7000: PUSH
7001: LD_INT 1
7003: ST_TO_ADDR
// if p3 = 32 then
7004: LD_VAR 0 3
7008: PUSH
7009: LD_INT 32
7011: EQUAL
7012: IFFALSE 7022
// sPower := true ;
7014: LD_ADDR_EXP 75
7018: PUSH
7019: LD_INT 1
7021: ST_TO_ADDR
// if p3 = 33 then
7022: LD_VAR 0 3
7026: PUSH
7027: LD_INT 33
7029: EQUAL
7030: IFFALSE 7040
// sRandom := true ;
7032: LD_ADDR_EXP 76
7036: PUSH
7037: LD_INT 1
7039: ST_TO_ADDR
// if p3 = 34 then
7040: LD_VAR 0 3
7044: PUSH
7045: LD_INT 34
7047: EQUAL
7048: IFFALSE 7058
// sShield := true ;
7050: LD_ADDR_EXP 77
7054: PUSH
7055: LD_INT 1
7057: ST_TO_ADDR
// if p3 = 35 then
7058: LD_VAR 0 3
7062: PUSH
7063: LD_INT 35
7065: EQUAL
7066: IFFALSE 7076
// sTime := true ;
7068: LD_ADDR_EXP 78
7072: PUSH
7073: LD_INT 1
7075: ST_TO_ADDR
// if p3 = 36 then
7076: LD_VAR 0 3
7080: PUSH
7081: LD_INT 36
7083: EQUAL
7084: IFFALSE 7094
// sTools := true ;
7086: LD_ADDR_EXP 79
7090: PUSH
7091: LD_INT 1
7093: ST_TO_ADDR
// if p3 = 101 then
7094: LD_VAR 0 3
7098: PUSH
7099: LD_INT 101
7101: EQUAL
7102: IFFALSE 7112
// sSold := true ;
7104: LD_ADDR_EXP 44
7108: PUSH
7109: LD_INT 1
7111: ST_TO_ADDR
// if p3 = 102 then
7112: LD_VAR 0 3
7116: PUSH
7117: LD_INT 102
7119: EQUAL
7120: IFFALSE 7130
// sDiff := true ;
7122: LD_ADDR_EXP 45
7126: PUSH
7127: LD_INT 1
7129: ST_TO_ADDR
// if p3 = 103 then
7130: LD_VAR 0 3
7134: PUSH
7135: LD_INT 103
7137: EQUAL
7138: IFFALSE 7148
// sFog := true ;
7140: LD_ADDR_EXP 48
7144: PUSH
7145: LD_INT 1
7147: ST_TO_ADDR
// if p3 = 104 then
7148: LD_VAR 0 3
7152: PUSH
7153: LD_INT 104
7155: EQUAL
7156: IFFALSE 7166
// sReset := true ;
7158: LD_ADDR_EXP 49
7162: PUSH
7163: LD_INT 1
7165: ST_TO_ADDR
// if p3 = 105 then
7166: LD_VAR 0 3
7170: PUSH
7171: LD_INT 105
7173: EQUAL
7174: IFFALSE 7184
// sSun := true ;
7176: LD_ADDR_EXP 50
7180: PUSH
7181: LD_INT 1
7183: ST_TO_ADDR
// if p3 = 106 then
7184: LD_VAR 0 3
7188: PUSH
7189: LD_INT 106
7191: EQUAL
7192: IFFALSE 7202
// sTiger := true ;
7194: LD_ADDR_EXP 46
7198: PUSH
7199: LD_INT 1
7201: ST_TO_ADDR
// if p3 = 107 then
7202: LD_VAR 0 3
7206: PUSH
7207: LD_INT 107
7209: EQUAL
7210: IFFALSE 7220
// sBomb := true ;
7212: LD_ADDR_EXP 47
7216: PUSH
7217: LD_INT 1
7219: ST_TO_ADDR
// if p3 = 108 then
7220: LD_VAR 0 3
7224: PUSH
7225: LD_INT 108
7227: EQUAL
7228: IFFALSE 7238
// sWound := true ;
7230: LD_ADDR_EXP 55
7234: PUSH
7235: LD_INT 1
7237: ST_TO_ADDR
// if p3 = 109 then
7238: LD_VAR 0 3
7242: PUSH
7243: LD_INT 109
7245: EQUAL
7246: IFFALSE 7256
// sBetray := true ;
7248: LD_ADDR_EXP 59
7252: PUSH
7253: LD_INT 1
7255: ST_TO_ADDR
// if p3 = 110 then
7256: LD_VAR 0 3
7260: PUSH
7261: LD_INT 110
7263: EQUAL
7264: IFFALSE 7274
// sContamin := true ;
7266: LD_ADDR_EXP 60
7270: PUSH
7271: LD_INT 1
7273: ST_TO_ADDR
// if p3 = 111 then
7274: LD_VAR 0 3
7278: PUSH
7279: LD_INT 111
7281: EQUAL
7282: IFFALSE 7292
// sOil := true ;
7284: LD_ADDR_EXP 62
7288: PUSH
7289: LD_INT 1
7291: ST_TO_ADDR
// if p3 = 112 then
7292: LD_VAR 0 3
7296: PUSH
7297: LD_INT 112
7299: EQUAL
7300: IFFALSE 7310
// sStu := true ;
7302: LD_ADDR_EXP 66
7306: PUSH
7307: LD_INT 1
7309: ST_TO_ADDR
// if p3 = 113 then
7310: LD_VAR 0 3
7314: PUSH
7315: LD_INT 113
7317: EQUAL
7318: IFFALSE 7328
// sBazooka := true ;
7320: LD_ADDR_EXP 69
7324: PUSH
7325: LD_INT 1
7327: ST_TO_ADDR
// if p3 = 114 then
7328: LD_VAR 0 3
7332: PUSH
7333: LD_INT 114
7335: EQUAL
7336: IFFALSE 7346
// sMortar := true ;
7338: LD_ADDR_EXP 70
7342: PUSH
7343: LD_INT 1
7345: ST_TO_ADDR
// if p3 = 115 then
7346: LD_VAR 0 3
7350: PUSH
7351: LD_INT 115
7353: EQUAL
7354: IFFALSE 7364
// sRanger := true ;
7356: LD_ADDR_EXP 80
7360: PUSH
7361: LD_INT 1
7363: ST_TO_ADDR
// end ; if p2 = 101 then
7364: LD_VAR 0 2
7368: PUSH
7369: LD_INT 101
7371: EQUAL
7372: IFFALSE 7500
// begin case p3 of 1 :
7374: LD_VAR 0 3
7378: PUSH
7379: LD_INT 1
7381: DOUBLE
7382: EQUAL
7383: IFTRUE 7387
7385: GO 7394
7387: POP
// hHackUnlimitedResources ; 2 :
7388: CALL 18535 0 0
7392: GO 7500
7394: LD_INT 2
7396: DOUBLE
7397: EQUAL
7398: IFTRUE 7402
7400: GO 7409
7402: POP
// hHackSetLevel10 ; 3 :
7403: CALL 18668 0 0
7407: GO 7500
7409: LD_INT 3
7411: DOUBLE
7412: EQUAL
7413: IFTRUE 7417
7415: GO 7424
7417: POP
// hHackSetLevel10YourUnits ; 4 :
7418: CALL 18753 0 0
7422: GO 7500
7424: LD_INT 4
7426: DOUBLE
7427: EQUAL
7428: IFTRUE 7432
7430: GO 7439
7432: POP
// hHackInvincible ; 5 :
7433: CALL 19201 0 0
7437: GO 7500
7439: LD_INT 5
7441: DOUBLE
7442: EQUAL
7443: IFTRUE 7447
7445: GO 7454
7447: POP
// hHackInvisible ; 6 :
7448: CALL 19312 0 0
7452: GO 7500
7454: LD_INT 6
7456: DOUBLE
7457: EQUAL
7458: IFTRUE 7462
7460: GO 7469
7462: POP
// hHackChangeYourSide ; 7 :
7463: CALL 19369 0 0
7467: GO 7500
7469: LD_INT 7
7471: DOUBLE
7472: EQUAL
7473: IFTRUE 7477
7475: GO 7484
7477: POP
// hHackChangeUnitSide ; 8 :
7478: CALL 19411 0 0
7482: GO 7500
7484: LD_INT 8
7486: DOUBLE
7487: EQUAL
7488: IFTRUE 7492
7490: GO 7499
7492: POP
// hHackFog ; end ;
7493: CALL 19512 0 0
7497: GO 7500
7499: POP
// end ; end ;
7500: PPOPN 6
7502: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
7503: GO 7505
7505: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
7506: LD_STRING initStreamRollete();
7508: PPUSH
7509: CALL_OW 559
// InitStreamMode ;
7513: CALL 7522 0 0
// DefineStreamItems ( ) ;
7517: CALL 7962 0 0
// end ;
7521: END
// function InitStreamMode ; begin
7522: LD_INT 0
7524: PPUSH
// streamModeActive := false ;
7525: LD_ADDR_EXP 27
7529: PUSH
7530: LD_INT 0
7532: ST_TO_ADDR
// normalCounter := 36 ;
7533: LD_ADDR_EXP 28
7537: PUSH
7538: LD_INT 36
7540: ST_TO_ADDR
// hardcoreCounter := 16 ;
7541: LD_ADDR_EXP 29
7545: PUSH
7546: LD_INT 16
7548: ST_TO_ADDR
// sRocket := false ;
7549: LD_ADDR_EXP 32
7553: PUSH
7554: LD_INT 0
7556: ST_TO_ADDR
// sSpeed := false ;
7557: LD_ADDR_EXP 31
7561: PUSH
7562: LD_INT 0
7564: ST_TO_ADDR
// sEngine := false ;
7565: LD_ADDR_EXP 33
7569: PUSH
7570: LD_INT 0
7572: ST_TO_ADDR
// sSpec := false ;
7573: LD_ADDR_EXP 30
7577: PUSH
7578: LD_INT 0
7580: ST_TO_ADDR
// sLevel := false ;
7581: LD_ADDR_EXP 34
7585: PUSH
7586: LD_INT 0
7588: ST_TO_ADDR
// sArmoury := false ;
7589: LD_ADDR_EXP 35
7593: PUSH
7594: LD_INT 0
7596: ST_TO_ADDR
// sRadar := false ;
7597: LD_ADDR_EXP 36
7601: PUSH
7602: LD_INT 0
7604: ST_TO_ADDR
// sBunker := false ;
7605: LD_ADDR_EXP 37
7609: PUSH
7610: LD_INT 0
7612: ST_TO_ADDR
// sHack := false ;
7613: LD_ADDR_EXP 38
7617: PUSH
7618: LD_INT 0
7620: ST_TO_ADDR
// sFire := false ;
7621: LD_ADDR_EXP 39
7625: PUSH
7626: LD_INT 0
7628: ST_TO_ADDR
// sRefresh := false ;
7629: LD_ADDR_EXP 40
7633: PUSH
7634: LD_INT 0
7636: ST_TO_ADDR
// sExp := false ;
7637: LD_ADDR_EXP 41
7641: PUSH
7642: LD_INT 0
7644: ST_TO_ADDR
// sDepot := false ;
7645: LD_ADDR_EXP 42
7649: PUSH
7650: LD_INT 0
7652: ST_TO_ADDR
// sFlag := false ;
7653: LD_ADDR_EXP 43
7657: PUSH
7658: LD_INT 0
7660: ST_TO_ADDR
// sKamikadze := false ;
7661: LD_ADDR_EXP 51
7665: PUSH
7666: LD_INT 0
7668: ST_TO_ADDR
// sTroll := false ;
7669: LD_ADDR_EXP 52
7673: PUSH
7674: LD_INT 0
7676: ST_TO_ADDR
// sSlow := false ;
7677: LD_ADDR_EXP 53
7681: PUSH
7682: LD_INT 0
7684: ST_TO_ADDR
// sLack := false ;
7685: LD_ADDR_EXP 54
7689: PUSH
7690: LD_INT 0
7692: ST_TO_ADDR
// sTank := false ;
7693: LD_ADDR_EXP 56
7697: PUSH
7698: LD_INT 0
7700: ST_TO_ADDR
// sRemote := false ;
7701: LD_ADDR_EXP 57
7705: PUSH
7706: LD_INT 0
7708: ST_TO_ADDR
// sPowell := false ;
7709: LD_ADDR_EXP 58
7713: PUSH
7714: LD_INT 0
7716: ST_TO_ADDR
// sTeleport := false ;
7717: LD_ADDR_EXP 61
7721: PUSH
7722: LD_INT 0
7724: ST_TO_ADDR
// sOilTower := false ;
7725: LD_ADDR_EXP 63
7729: PUSH
7730: LD_INT 0
7732: ST_TO_ADDR
// sShovel := false ;
7733: LD_ADDR_EXP 64
7737: PUSH
7738: LD_INT 0
7740: ST_TO_ADDR
// sSheik := false ;
7741: LD_ADDR_EXP 65
7745: PUSH
7746: LD_INT 0
7748: ST_TO_ADDR
// sEarthquake := false ;
7749: LD_ADDR_EXP 67
7753: PUSH
7754: LD_INT 0
7756: ST_TO_ADDR
// sAI := false ;
7757: LD_ADDR_EXP 68
7761: PUSH
7762: LD_INT 0
7764: ST_TO_ADDR
// sCargo := false ;
7765: LD_ADDR_EXP 71
7769: PUSH
7770: LD_INT 0
7772: ST_TO_ADDR
// sDLaser := false ;
7773: LD_ADDR_EXP 72
7777: PUSH
7778: LD_INT 0
7780: ST_TO_ADDR
// sExchange := false ;
7781: LD_ADDR_EXP 73
7785: PUSH
7786: LD_INT 0
7788: ST_TO_ADDR
// sFac := false ;
7789: LD_ADDR_EXP 74
7793: PUSH
7794: LD_INT 0
7796: ST_TO_ADDR
// sPower := false ;
7797: LD_ADDR_EXP 75
7801: PUSH
7802: LD_INT 0
7804: ST_TO_ADDR
// sRandom := false ;
7805: LD_ADDR_EXP 76
7809: PUSH
7810: LD_INT 0
7812: ST_TO_ADDR
// sShield := false ;
7813: LD_ADDR_EXP 77
7817: PUSH
7818: LD_INT 0
7820: ST_TO_ADDR
// sTime := false ;
7821: LD_ADDR_EXP 78
7825: PUSH
7826: LD_INT 0
7828: ST_TO_ADDR
// sTools := false ;
7829: LD_ADDR_EXP 79
7833: PUSH
7834: LD_INT 0
7836: ST_TO_ADDR
// sSold := false ;
7837: LD_ADDR_EXP 44
7841: PUSH
7842: LD_INT 0
7844: ST_TO_ADDR
// sDiff := false ;
7845: LD_ADDR_EXP 45
7849: PUSH
7850: LD_INT 0
7852: ST_TO_ADDR
// sFog := false ;
7853: LD_ADDR_EXP 48
7857: PUSH
7858: LD_INT 0
7860: ST_TO_ADDR
// sReset := false ;
7861: LD_ADDR_EXP 49
7865: PUSH
7866: LD_INT 0
7868: ST_TO_ADDR
// sSun := false ;
7869: LD_ADDR_EXP 50
7873: PUSH
7874: LD_INT 0
7876: ST_TO_ADDR
// sTiger := false ;
7877: LD_ADDR_EXP 46
7881: PUSH
7882: LD_INT 0
7884: ST_TO_ADDR
// sBomb := false ;
7885: LD_ADDR_EXP 47
7889: PUSH
7890: LD_INT 0
7892: ST_TO_ADDR
// sWound := false ;
7893: LD_ADDR_EXP 55
7897: PUSH
7898: LD_INT 0
7900: ST_TO_ADDR
// sBetray := false ;
7901: LD_ADDR_EXP 59
7905: PUSH
7906: LD_INT 0
7908: ST_TO_ADDR
// sContamin := false ;
7909: LD_ADDR_EXP 60
7913: PUSH
7914: LD_INT 0
7916: ST_TO_ADDR
// sOil := false ;
7917: LD_ADDR_EXP 62
7921: PUSH
7922: LD_INT 0
7924: ST_TO_ADDR
// sStu := false ;
7925: LD_ADDR_EXP 66
7929: PUSH
7930: LD_INT 0
7932: ST_TO_ADDR
// sBazooka := false ;
7933: LD_ADDR_EXP 69
7937: PUSH
7938: LD_INT 0
7940: ST_TO_ADDR
// sMortar := false ;
7941: LD_ADDR_EXP 70
7945: PUSH
7946: LD_INT 0
7948: ST_TO_ADDR
// sRanger := false ;
7949: LD_ADDR_EXP 80
7953: PUSH
7954: LD_INT 0
7956: ST_TO_ADDR
// end ;
7957: LD_VAR 0 1
7961: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
7962: LD_INT 0
7964: PPUSH
7965: PPUSH
7966: PPUSH
7967: PPUSH
7968: PPUSH
// result := [ ] ;
7969: LD_ADDR_VAR 0 1
7973: PUSH
7974: EMPTY
7975: ST_TO_ADDR
// if campaign_id = 1 then
7976: LD_OWVAR 69
7980: PUSH
7981: LD_INT 1
7983: EQUAL
7984: IFFALSE 10922
// begin case mission_number of 1 :
7986: LD_OWVAR 70
7990: PUSH
7991: LD_INT 1
7993: DOUBLE
7994: EQUAL
7995: IFTRUE 7999
7997: GO 8063
7999: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
8000: LD_ADDR_VAR 0 1
8004: PUSH
8005: LD_INT 2
8007: PUSH
8008: LD_INT 4
8010: PUSH
8011: LD_INT 11
8013: PUSH
8014: LD_INT 12
8016: PUSH
8017: LD_INT 15
8019: PUSH
8020: LD_INT 16
8022: PUSH
8023: LD_INT 22
8025: PUSH
8026: LD_INT 23
8028: PUSH
8029: LD_INT 26
8031: PUSH
8032: EMPTY
8033: LIST
8034: LIST
8035: LIST
8036: LIST
8037: LIST
8038: LIST
8039: LIST
8040: LIST
8041: LIST
8042: PUSH
8043: LD_INT 101
8045: PUSH
8046: LD_INT 102
8048: PUSH
8049: LD_INT 106
8051: PUSH
8052: EMPTY
8053: LIST
8054: LIST
8055: LIST
8056: PUSH
8057: EMPTY
8058: LIST
8059: LIST
8060: ST_TO_ADDR
8061: GO 10920
8063: LD_INT 2
8065: DOUBLE
8066: EQUAL
8067: IFTRUE 8071
8069: GO 8143
8071: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
8072: LD_ADDR_VAR 0 1
8076: PUSH
8077: LD_INT 2
8079: PUSH
8080: LD_INT 4
8082: PUSH
8083: LD_INT 11
8085: PUSH
8086: LD_INT 12
8088: PUSH
8089: LD_INT 15
8091: PUSH
8092: LD_INT 16
8094: PUSH
8095: LD_INT 22
8097: PUSH
8098: LD_INT 23
8100: PUSH
8101: LD_INT 26
8103: PUSH
8104: EMPTY
8105: LIST
8106: LIST
8107: LIST
8108: LIST
8109: LIST
8110: LIST
8111: LIST
8112: LIST
8113: LIST
8114: PUSH
8115: LD_INT 101
8117: PUSH
8118: LD_INT 102
8120: PUSH
8121: LD_INT 105
8123: PUSH
8124: LD_INT 106
8126: PUSH
8127: LD_INT 108
8129: PUSH
8130: EMPTY
8131: LIST
8132: LIST
8133: LIST
8134: LIST
8135: LIST
8136: PUSH
8137: EMPTY
8138: LIST
8139: LIST
8140: ST_TO_ADDR
8141: GO 10920
8143: LD_INT 3
8145: DOUBLE
8146: EQUAL
8147: IFTRUE 8151
8149: GO 8227
8151: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
8152: LD_ADDR_VAR 0 1
8156: PUSH
8157: LD_INT 2
8159: PUSH
8160: LD_INT 4
8162: PUSH
8163: LD_INT 5
8165: PUSH
8166: LD_INT 11
8168: PUSH
8169: LD_INT 12
8171: PUSH
8172: LD_INT 15
8174: PUSH
8175: LD_INT 16
8177: PUSH
8178: LD_INT 22
8180: PUSH
8181: LD_INT 26
8183: PUSH
8184: LD_INT 36
8186: PUSH
8187: EMPTY
8188: LIST
8189: LIST
8190: LIST
8191: LIST
8192: LIST
8193: LIST
8194: LIST
8195: LIST
8196: LIST
8197: LIST
8198: PUSH
8199: LD_INT 101
8201: PUSH
8202: LD_INT 102
8204: PUSH
8205: LD_INT 105
8207: PUSH
8208: LD_INT 106
8210: PUSH
8211: LD_INT 108
8213: PUSH
8214: EMPTY
8215: LIST
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: PUSH
8221: EMPTY
8222: LIST
8223: LIST
8224: ST_TO_ADDR
8225: GO 10920
8227: LD_INT 4
8229: DOUBLE
8230: EQUAL
8231: IFTRUE 8235
8233: GO 8319
8235: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
8236: LD_ADDR_VAR 0 1
8240: PUSH
8241: LD_INT 2
8243: PUSH
8244: LD_INT 4
8246: PUSH
8247: LD_INT 5
8249: PUSH
8250: LD_INT 8
8252: PUSH
8253: LD_INT 11
8255: PUSH
8256: LD_INT 12
8258: PUSH
8259: LD_INT 15
8261: PUSH
8262: LD_INT 16
8264: PUSH
8265: LD_INT 22
8267: PUSH
8268: LD_INT 23
8270: PUSH
8271: LD_INT 26
8273: PUSH
8274: LD_INT 36
8276: PUSH
8277: EMPTY
8278: LIST
8279: LIST
8280: LIST
8281: LIST
8282: LIST
8283: LIST
8284: LIST
8285: LIST
8286: LIST
8287: LIST
8288: LIST
8289: LIST
8290: PUSH
8291: LD_INT 101
8293: PUSH
8294: LD_INT 102
8296: PUSH
8297: LD_INT 105
8299: PUSH
8300: LD_INT 106
8302: PUSH
8303: LD_INT 108
8305: PUSH
8306: EMPTY
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: PUSH
8313: EMPTY
8314: LIST
8315: LIST
8316: ST_TO_ADDR
8317: GO 10920
8319: LD_INT 5
8321: DOUBLE
8322: EQUAL
8323: IFTRUE 8327
8325: GO 8427
8327: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
8328: LD_ADDR_VAR 0 1
8332: PUSH
8333: LD_INT 2
8335: PUSH
8336: LD_INT 4
8338: PUSH
8339: LD_INT 5
8341: PUSH
8342: LD_INT 6
8344: PUSH
8345: LD_INT 8
8347: PUSH
8348: LD_INT 11
8350: PUSH
8351: LD_INT 12
8353: PUSH
8354: LD_INT 15
8356: PUSH
8357: LD_INT 16
8359: PUSH
8360: LD_INT 22
8362: PUSH
8363: LD_INT 23
8365: PUSH
8366: LD_INT 25
8368: PUSH
8369: LD_INT 26
8371: PUSH
8372: LD_INT 36
8374: PUSH
8375: EMPTY
8376: LIST
8377: LIST
8378: LIST
8379: LIST
8380: LIST
8381: LIST
8382: LIST
8383: LIST
8384: LIST
8385: LIST
8386: LIST
8387: LIST
8388: LIST
8389: LIST
8390: PUSH
8391: LD_INT 101
8393: PUSH
8394: LD_INT 102
8396: PUSH
8397: LD_INT 105
8399: PUSH
8400: LD_INT 106
8402: PUSH
8403: LD_INT 108
8405: PUSH
8406: LD_INT 109
8408: PUSH
8409: LD_INT 112
8411: PUSH
8412: EMPTY
8413: LIST
8414: LIST
8415: LIST
8416: LIST
8417: LIST
8418: LIST
8419: LIST
8420: PUSH
8421: EMPTY
8422: LIST
8423: LIST
8424: ST_TO_ADDR
8425: GO 10920
8427: LD_INT 6
8429: DOUBLE
8430: EQUAL
8431: IFTRUE 8435
8433: GO 8555
8435: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
8436: LD_ADDR_VAR 0 1
8440: PUSH
8441: LD_INT 2
8443: PUSH
8444: LD_INT 4
8446: PUSH
8447: LD_INT 5
8449: PUSH
8450: LD_INT 6
8452: PUSH
8453: LD_INT 8
8455: PUSH
8456: LD_INT 11
8458: PUSH
8459: LD_INT 12
8461: PUSH
8462: LD_INT 15
8464: PUSH
8465: LD_INT 16
8467: PUSH
8468: LD_INT 20
8470: PUSH
8471: LD_INT 21
8473: PUSH
8474: LD_INT 22
8476: PUSH
8477: LD_INT 23
8479: PUSH
8480: LD_INT 25
8482: PUSH
8483: LD_INT 26
8485: PUSH
8486: LD_INT 30
8488: PUSH
8489: LD_INT 31
8491: PUSH
8492: LD_INT 32
8494: PUSH
8495: LD_INT 36
8497: PUSH
8498: EMPTY
8499: LIST
8500: LIST
8501: LIST
8502: LIST
8503: LIST
8504: LIST
8505: LIST
8506: LIST
8507: LIST
8508: LIST
8509: LIST
8510: LIST
8511: LIST
8512: LIST
8513: LIST
8514: LIST
8515: LIST
8516: LIST
8517: LIST
8518: PUSH
8519: LD_INT 101
8521: PUSH
8522: LD_INT 102
8524: PUSH
8525: LD_INT 105
8527: PUSH
8528: LD_INT 106
8530: PUSH
8531: LD_INT 108
8533: PUSH
8534: LD_INT 109
8536: PUSH
8537: LD_INT 112
8539: PUSH
8540: EMPTY
8541: LIST
8542: LIST
8543: LIST
8544: LIST
8545: LIST
8546: LIST
8547: LIST
8548: PUSH
8549: EMPTY
8550: LIST
8551: LIST
8552: ST_TO_ADDR
8553: GO 10920
8555: LD_INT 7
8557: DOUBLE
8558: EQUAL
8559: IFTRUE 8563
8561: GO 8663
8563: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
8564: LD_ADDR_VAR 0 1
8568: PUSH
8569: LD_INT 2
8571: PUSH
8572: LD_INT 4
8574: PUSH
8575: LD_INT 5
8577: PUSH
8578: LD_INT 7
8580: PUSH
8581: LD_INT 11
8583: PUSH
8584: LD_INT 12
8586: PUSH
8587: LD_INT 15
8589: PUSH
8590: LD_INT 16
8592: PUSH
8593: LD_INT 20
8595: PUSH
8596: LD_INT 21
8598: PUSH
8599: LD_INT 22
8601: PUSH
8602: LD_INT 23
8604: PUSH
8605: LD_INT 25
8607: PUSH
8608: LD_INT 26
8610: PUSH
8611: EMPTY
8612: LIST
8613: LIST
8614: LIST
8615: LIST
8616: LIST
8617: LIST
8618: LIST
8619: LIST
8620: LIST
8621: LIST
8622: LIST
8623: LIST
8624: LIST
8625: LIST
8626: PUSH
8627: LD_INT 101
8629: PUSH
8630: LD_INT 102
8632: PUSH
8633: LD_INT 103
8635: PUSH
8636: LD_INT 105
8638: PUSH
8639: LD_INT 106
8641: PUSH
8642: LD_INT 108
8644: PUSH
8645: LD_INT 112
8647: PUSH
8648: EMPTY
8649: LIST
8650: LIST
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: LIST
8656: PUSH
8657: EMPTY
8658: LIST
8659: LIST
8660: ST_TO_ADDR
8661: GO 10920
8663: LD_INT 8
8665: DOUBLE
8666: EQUAL
8667: IFTRUE 8671
8669: GO 8799
8671: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
8672: LD_ADDR_VAR 0 1
8676: PUSH
8677: LD_INT 2
8679: PUSH
8680: LD_INT 4
8682: PUSH
8683: LD_INT 5
8685: PUSH
8686: LD_INT 6
8688: PUSH
8689: LD_INT 7
8691: PUSH
8692: LD_INT 8
8694: PUSH
8695: LD_INT 11
8697: PUSH
8698: LD_INT 12
8700: PUSH
8701: LD_INT 15
8703: PUSH
8704: LD_INT 16
8706: PUSH
8707: LD_INT 20
8709: PUSH
8710: LD_INT 21
8712: PUSH
8713: LD_INT 22
8715: PUSH
8716: LD_INT 23
8718: PUSH
8719: LD_INT 25
8721: PUSH
8722: LD_INT 26
8724: PUSH
8725: LD_INT 30
8727: PUSH
8728: LD_INT 31
8730: PUSH
8731: LD_INT 32
8733: PUSH
8734: LD_INT 36
8736: PUSH
8737: EMPTY
8738: LIST
8739: LIST
8740: LIST
8741: LIST
8742: LIST
8743: LIST
8744: LIST
8745: LIST
8746: LIST
8747: LIST
8748: LIST
8749: LIST
8750: LIST
8751: LIST
8752: LIST
8753: LIST
8754: LIST
8755: LIST
8756: LIST
8757: LIST
8758: PUSH
8759: LD_INT 101
8761: PUSH
8762: LD_INT 102
8764: PUSH
8765: LD_INT 103
8767: PUSH
8768: LD_INT 105
8770: PUSH
8771: LD_INT 106
8773: PUSH
8774: LD_INT 108
8776: PUSH
8777: LD_INT 109
8779: PUSH
8780: LD_INT 112
8782: PUSH
8783: EMPTY
8784: LIST
8785: LIST
8786: LIST
8787: LIST
8788: LIST
8789: LIST
8790: LIST
8791: LIST
8792: PUSH
8793: EMPTY
8794: LIST
8795: LIST
8796: ST_TO_ADDR
8797: GO 10920
8799: LD_INT 9
8801: DOUBLE
8802: EQUAL
8803: IFTRUE 8807
8805: GO 8943
8807: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
8808: LD_ADDR_VAR 0 1
8812: PUSH
8813: LD_INT 2
8815: PUSH
8816: LD_INT 4
8818: PUSH
8819: LD_INT 5
8821: PUSH
8822: LD_INT 6
8824: PUSH
8825: LD_INT 7
8827: PUSH
8828: LD_INT 8
8830: PUSH
8831: LD_INT 11
8833: PUSH
8834: LD_INT 12
8836: PUSH
8837: LD_INT 15
8839: PUSH
8840: LD_INT 16
8842: PUSH
8843: LD_INT 20
8845: PUSH
8846: LD_INT 21
8848: PUSH
8849: LD_INT 22
8851: PUSH
8852: LD_INT 23
8854: PUSH
8855: LD_INT 25
8857: PUSH
8858: LD_INT 26
8860: PUSH
8861: LD_INT 28
8863: PUSH
8864: LD_INT 30
8866: PUSH
8867: LD_INT 31
8869: PUSH
8870: LD_INT 32
8872: PUSH
8873: LD_INT 36
8875: PUSH
8876: EMPTY
8877: LIST
8878: LIST
8879: LIST
8880: LIST
8881: LIST
8882: LIST
8883: LIST
8884: LIST
8885: LIST
8886: LIST
8887: LIST
8888: LIST
8889: LIST
8890: LIST
8891: LIST
8892: LIST
8893: LIST
8894: LIST
8895: LIST
8896: LIST
8897: LIST
8898: PUSH
8899: LD_INT 101
8901: PUSH
8902: LD_INT 102
8904: PUSH
8905: LD_INT 103
8907: PUSH
8908: LD_INT 105
8910: PUSH
8911: LD_INT 106
8913: PUSH
8914: LD_INT 108
8916: PUSH
8917: LD_INT 109
8919: PUSH
8920: LD_INT 112
8922: PUSH
8923: LD_INT 114
8925: PUSH
8926: EMPTY
8927: LIST
8928: LIST
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: PUSH
8937: EMPTY
8938: LIST
8939: LIST
8940: ST_TO_ADDR
8941: GO 10920
8943: LD_INT 10
8945: DOUBLE
8946: EQUAL
8947: IFTRUE 8951
8949: GO 9135
8951: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
8952: LD_ADDR_VAR 0 1
8956: PUSH
8957: LD_INT 2
8959: PUSH
8960: LD_INT 4
8962: PUSH
8963: LD_INT 5
8965: PUSH
8966: LD_INT 6
8968: PUSH
8969: LD_INT 7
8971: PUSH
8972: LD_INT 8
8974: PUSH
8975: LD_INT 9
8977: PUSH
8978: LD_INT 10
8980: PUSH
8981: LD_INT 11
8983: PUSH
8984: LD_INT 12
8986: PUSH
8987: LD_INT 13
8989: PUSH
8990: LD_INT 14
8992: PUSH
8993: LD_INT 15
8995: PUSH
8996: LD_INT 16
8998: PUSH
8999: LD_INT 17
9001: PUSH
9002: LD_INT 18
9004: PUSH
9005: LD_INT 19
9007: PUSH
9008: LD_INT 20
9010: PUSH
9011: LD_INT 21
9013: PUSH
9014: LD_INT 22
9016: PUSH
9017: LD_INT 23
9019: PUSH
9020: LD_INT 24
9022: PUSH
9023: LD_INT 25
9025: PUSH
9026: LD_INT 26
9028: PUSH
9029: LD_INT 28
9031: PUSH
9032: LD_INT 30
9034: PUSH
9035: LD_INT 31
9037: PUSH
9038: LD_INT 32
9040: PUSH
9041: LD_INT 36
9043: PUSH
9044: EMPTY
9045: LIST
9046: LIST
9047: LIST
9048: LIST
9049: LIST
9050: LIST
9051: LIST
9052: LIST
9053: LIST
9054: LIST
9055: LIST
9056: LIST
9057: LIST
9058: LIST
9059: LIST
9060: LIST
9061: LIST
9062: LIST
9063: LIST
9064: LIST
9065: LIST
9066: LIST
9067: LIST
9068: LIST
9069: LIST
9070: LIST
9071: LIST
9072: LIST
9073: LIST
9074: PUSH
9075: LD_INT 101
9077: PUSH
9078: LD_INT 102
9080: PUSH
9081: LD_INT 103
9083: PUSH
9084: LD_INT 104
9086: PUSH
9087: LD_INT 105
9089: PUSH
9090: LD_INT 106
9092: PUSH
9093: LD_INT 107
9095: PUSH
9096: LD_INT 108
9098: PUSH
9099: LD_INT 109
9101: PUSH
9102: LD_INT 110
9104: PUSH
9105: LD_INT 111
9107: PUSH
9108: LD_INT 112
9110: PUSH
9111: LD_INT 114
9113: PUSH
9114: EMPTY
9115: LIST
9116: LIST
9117: LIST
9118: LIST
9119: LIST
9120: LIST
9121: LIST
9122: LIST
9123: LIST
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: PUSH
9129: EMPTY
9130: LIST
9131: LIST
9132: ST_TO_ADDR
9133: GO 10920
9135: LD_INT 11
9137: DOUBLE
9138: EQUAL
9139: IFTRUE 9143
9141: GO 9335
9143: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
9144: LD_ADDR_VAR 0 1
9148: PUSH
9149: LD_INT 2
9151: PUSH
9152: LD_INT 3
9154: PUSH
9155: LD_INT 4
9157: PUSH
9158: LD_INT 5
9160: PUSH
9161: LD_INT 6
9163: PUSH
9164: LD_INT 7
9166: PUSH
9167: LD_INT 8
9169: PUSH
9170: LD_INT 9
9172: PUSH
9173: LD_INT 10
9175: PUSH
9176: LD_INT 11
9178: PUSH
9179: LD_INT 12
9181: PUSH
9182: LD_INT 13
9184: PUSH
9185: LD_INT 14
9187: PUSH
9188: LD_INT 15
9190: PUSH
9191: LD_INT 16
9193: PUSH
9194: LD_INT 17
9196: PUSH
9197: LD_INT 18
9199: PUSH
9200: LD_INT 19
9202: PUSH
9203: LD_INT 20
9205: PUSH
9206: LD_INT 21
9208: PUSH
9209: LD_INT 22
9211: PUSH
9212: LD_INT 23
9214: PUSH
9215: LD_INT 24
9217: PUSH
9218: LD_INT 25
9220: PUSH
9221: LD_INT 26
9223: PUSH
9224: LD_INT 28
9226: PUSH
9227: LD_INT 30
9229: PUSH
9230: LD_INT 31
9232: PUSH
9233: LD_INT 32
9235: PUSH
9236: LD_INT 34
9238: PUSH
9239: LD_INT 36
9241: PUSH
9242: EMPTY
9243: LIST
9244: LIST
9245: LIST
9246: LIST
9247: LIST
9248: LIST
9249: LIST
9250: LIST
9251: LIST
9252: LIST
9253: LIST
9254: LIST
9255: LIST
9256: LIST
9257: LIST
9258: LIST
9259: LIST
9260: LIST
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: LIST
9274: PUSH
9275: LD_INT 101
9277: PUSH
9278: LD_INT 102
9280: PUSH
9281: LD_INT 103
9283: PUSH
9284: LD_INT 104
9286: PUSH
9287: LD_INT 105
9289: PUSH
9290: LD_INT 106
9292: PUSH
9293: LD_INT 107
9295: PUSH
9296: LD_INT 108
9298: PUSH
9299: LD_INT 109
9301: PUSH
9302: LD_INT 110
9304: PUSH
9305: LD_INT 111
9307: PUSH
9308: LD_INT 112
9310: PUSH
9311: LD_INT 114
9313: PUSH
9314: EMPTY
9315: LIST
9316: LIST
9317: LIST
9318: LIST
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: LIST
9324: LIST
9325: LIST
9326: LIST
9327: LIST
9328: PUSH
9329: EMPTY
9330: LIST
9331: LIST
9332: ST_TO_ADDR
9333: GO 10920
9335: LD_INT 12
9337: DOUBLE
9338: EQUAL
9339: IFTRUE 9343
9341: GO 9551
9343: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
9344: LD_ADDR_VAR 0 1
9348: PUSH
9349: LD_INT 1
9351: PUSH
9352: LD_INT 2
9354: PUSH
9355: LD_INT 3
9357: PUSH
9358: LD_INT 4
9360: PUSH
9361: LD_INT 5
9363: PUSH
9364: LD_INT 6
9366: PUSH
9367: LD_INT 7
9369: PUSH
9370: LD_INT 8
9372: PUSH
9373: LD_INT 9
9375: PUSH
9376: LD_INT 10
9378: PUSH
9379: LD_INT 11
9381: PUSH
9382: LD_INT 12
9384: PUSH
9385: LD_INT 13
9387: PUSH
9388: LD_INT 14
9390: PUSH
9391: LD_INT 15
9393: PUSH
9394: LD_INT 16
9396: PUSH
9397: LD_INT 17
9399: PUSH
9400: LD_INT 18
9402: PUSH
9403: LD_INT 19
9405: PUSH
9406: LD_INT 20
9408: PUSH
9409: LD_INT 21
9411: PUSH
9412: LD_INT 22
9414: PUSH
9415: LD_INT 23
9417: PUSH
9418: LD_INT 24
9420: PUSH
9421: LD_INT 25
9423: PUSH
9424: LD_INT 26
9426: PUSH
9427: LD_INT 27
9429: PUSH
9430: LD_INT 28
9432: PUSH
9433: LD_INT 30
9435: PUSH
9436: LD_INT 31
9438: PUSH
9439: LD_INT 32
9441: PUSH
9442: LD_INT 33
9444: PUSH
9445: LD_INT 34
9447: PUSH
9448: LD_INT 36
9450: PUSH
9451: EMPTY
9452: LIST
9453: LIST
9454: LIST
9455: LIST
9456: LIST
9457: LIST
9458: LIST
9459: LIST
9460: LIST
9461: LIST
9462: LIST
9463: LIST
9464: LIST
9465: LIST
9466: LIST
9467: LIST
9468: LIST
9469: LIST
9470: LIST
9471: LIST
9472: LIST
9473: LIST
9474: LIST
9475: LIST
9476: LIST
9477: LIST
9478: LIST
9479: LIST
9480: LIST
9481: LIST
9482: LIST
9483: LIST
9484: LIST
9485: LIST
9486: PUSH
9487: LD_INT 101
9489: PUSH
9490: LD_INT 102
9492: PUSH
9493: LD_INT 103
9495: PUSH
9496: LD_INT 104
9498: PUSH
9499: LD_INT 105
9501: PUSH
9502: LD_INT 106
9504: PUSH
9505: LD_INT 107
9507: PUSH
9508: LD_INT 108
9510: PUSH
9511: LD_INT 109
9513: PUSH
9514: LD_INT 110
9516: PUSH
9517: LD_INT 111
9519: PUSH
9520: LD_INT 112
9522: PUSH
9523: LD_INT 113
9525: PUSH
9526: LD_INT 114
9528: PUSH
9529: EMPTY
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: LIST
9538: LIST
9539: LIST
9540: LIST
9541: LIST
9542: LIST
9543: LIST
9544: PUSH
9545: EMPTY
9546: LIST
9547: LIST
9548: ST_TO_ADDR
9549: GO 10920
9551: LD_INT 13
9553: DOUBLE
9554: EQUAL
9555: IFTRUE 9559
9557: GO 9755
9559: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
9560: LD_ADDR_VAR 0 1
9564: PUSH
9565: LD_INT 1
9567: PUSH
9568: LD_INT 2
9570: PUSH
9571: LD_INT 3
9573: PUSH
9574: LD_INT 4
9576: PUSH
9577: LD_INT 5
9579: PUSH
9580: LD_INT 8
9582: PUSH
9583: LD_INT 9
9585: PUSH
9586: LD_INT 10
9588: PUSH
9589: LD_INT 11
9591: PUSH
9592: LD_INT 12
9594: PUSH
9595: LD_INT 14
9597: PUSH
9598: LD_INT 15
9600: PUSH
9601: LD_INT 16
9603: PUSH
9604: LD_INT 17
9606: PUSH
9607: LD_INT 18
9609: PUSH
9610: LD_INT 19
9612: PUSH
9613: LD_INT 20
9615: PUSH
9616: LD_INT 21
9618: PUSH
9619: LD_INT 22
9621: PUSH
9622: LD_INT 23
9624: PUSH
9625: LD_INT 24
9627: PUSH
9628: LD_INT 25
9630: PUSH
9631: LD_INT 26
9633: PUSH
9634: LD_INT 27
9636: PUSH
9637: LD_INT 28
9639: PUSH
9640: LD_INT 30
9642: PUSH
9643: LD_INT 31
9645: PUSH
9646: LD_INT 32
9648: PUSH
9649: LD_INT 33
9651: PUSH
9652: LD_INT 34
9654: PUSH
9655: LD_INT 36
9657: PUSH
9658: EMPTY
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: PUSH
9691: LD_INT 101
9693: PUSH
9694: LD_INT 102
9696: PUSH
9697: LD_INT 103
9699: PUSH
9700: LD_INT 104
9702: PUSH
9703: LD_INT 105
9705: PUSH
9706: LD_INT 106
9708: PUSH
9709: LD_INT 107
9711: PUSH
9712: LD_INT 108
9714: PUSH
9715: LD_INT 109
9717: PUSH
9718: LD_INT 110
9720: PUSH
9721: LD_INT 111
9723: PUSH
9724: LD_INT 112
9726: PUSH
9727: LD_INT 113
9729: PUSH
9730: LD_INT 114
9732: PUSH
9733: EMPTY
9734: LIST
9735: LIST
9736: LIST
9737: LIST
9738: LIST
9739: LIST
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: LIST
9745: LIST
9746: LIST
9747: LIST
9748: PUSH
9749: EMPTY
9750: LIST
9751: LIST
9752: ST_TO_ADDR
9753: GO 10920
9755: LD_INT 14
9757: DOUBLE
9758: EQUAL
9759: IFTRUE 9763
9761: GO 9975
9763: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
9764: LD_ADDR_VAR 0 1
9768: PUSH
9769: LD_INT 1
9771: PUSH
9772: LD_INT 2
9774: PUSH
9775: LD_INT 3
9777: PUSH
9778: LD_INT 4
9780: PUSH
9781: LD_INT 5
9783: PUSH
9784: LD_INT 6
9786: PUSH
9787: LD_INT 7
9789: PUSH
9790: LD_INT 8
9792: PUSH
9793: LD_INT 9
9795: PUSH
9796: LD_INT 10
9798: PUSH
9799: LD_INT 11
9801: PUSH
9802: LD_INT 12
9804: PUSH
9805: LD_INT 13
9807: PUSH
9808: LD_INT 14
9810: PUSH
9811: LD_INT 15
9813: PUSH
9814: LD_INT 16
9816: PUSH
9817: LD_INT 17
9819: PUSH
9820: LD_INT 18
9822: PUSH
9823: LD_INT 19
9825: PUSH
9826: LD_INT 20
9828: PUSH
9829: LD_INT 21
9831: PUSH
9832: LD_INT 22
9834: PUSH
9835: LD_INT 23
9837: PUSH
9838: LD_INT 24
9840: PUSH
9841: LD_INT 25
9843: PUSH
9844: LD_INT 26
9846: PUSH
9847: LD_INT 27
9849: PUSH
9850: LD_INT 28
9852: PUSH
9853: LD_INT 29
9855: PUSH
9856: LD_INT 30
9858: PUSH
9859: LD_INT 31
9861: PUSH
9862: LD_INT 32
9864: PUSH
9865: LD_INT 33
9867: PUSH
9868: LD_INT 34
9870: PUSH
9871: LD_INT 36
9873: PUSH
9874: EMPTY
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: LIST
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: LIST
9906: LIST
9907: LIST
9908: LIST
9909: LIST
9910: PUSH
9911: LD_INT 101
9913: PUSH
9914: LD_INT 102
9916: PUSH
9917: LD_INT 103
9919: PUSH
9920: LD_INT 104
9922: PUSH
9923: LD_INT 105
9925: PUSH
9926: LD_INT 106
9928: PUSH
9929: LD_INT 107
9931: PUSH
9932: LD_INT 108
9934: PUSH
9935: LD_INT 109
9937: PUSH
9938: LD_INT 110
9940: PUSH
9941: LD_INT 111
9943: PUSH
9944: LD_INT 112
9946: PUSH
9947: LD_INT 113
9949: PUSH
9950: LD_INT 114
9952: PUSH
9953: EMPTY
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: PUSH
9969: EMPTY
9970: LIST
9971: LIST
9972: ST_TO_ADDR
9973: GO 10920
9975: LD_INT 15
9977: DOUBLE
9978: EQUAL
9979: IFTRUE 9983
9981: GO 10195
9983: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
9984: LD_ADDR_VAR 0 1
9988: PUSH
9989: LD_INT 1
9991: PUSH
9992: LD_INT 2
9994: PUSH
9995: LD_INT 3
9997: PUSH
9998: LD_INT 4
10000: PUSH
10001: LD_INT 5
10003: PUSH
10004: LD_INT 6
10006: PUSH
10007: LD_INT 7
10009: PUSH
10010: LD_INT 8
10012: PUSH
10013: LD_INT 9
10015: PUSH
10016: LD_INT 10
10018: PUSH
10019: LD_INT 11
10021: PUSH
10022: LD_INT 12
10024: PUSH
10025: LD_INT 13
10027: PUSH
10028: LD_INT 14
10030: PUSH
10031: LD_INT 15
10033: PUSH
10034: LD_INT 16
10036: PUSH
10037: LD_INT 17
10039: PUSH
10040: LD_INT 18
10042: PUSH
10043: LD_INT 19
10045: PUSH
10046: LD_INT 20
10048: PUSH
10049: LD_INT 21
10051: PUSH
10052: LD_INT 22
10054: PUSH
10055: LD_INT 23
10057: PUSH
10058: LD_INT 24
10060: PUSH
10061: LD_INT 25
10063: PUSH
10064: LD_INT 26
10066: PUSH
10067: LD_INT 27
10069: PUSH
10070: LD_INT 28
10072: PUSH
10073: LD_INT 29
10075: PUSH
10076: LD_INT 30
10078: PUSH
10079: LD_INT 31
10081: PUSH
10082: LD_INT 32
10084: PUSH
10085: LD_INT 33
10087: PUSH
10088: LD_INT 34
10090: PUSH
10091: LD_INT 36
10093: PUSH
10094: EMPTY
10095: LIST
10096: LIST
10097: LIST
10098: LIST
10099: LIST
10100: LIST
10101: LIST
10102: LIST
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: LIST
10120: LIST
10121: LIST
10122: LIST
10123: LIST
10124: LIST
10125: LIST
10126: LIST
10127: LIST
10128: LIST
10129: LIST
10130: PUSH
10131: LD_INT 101
10133: PUSH
10134: LD_INT 102
10136: PUSH
10137: LD_INT 103
10139: PUSH
10140: LD_INT 104
10142: PUSH
10143: LD_INT 105
10145: PUSH
10146: LD_INT 106
10148: PUSH
10149: LD_INT 107
10151: PUSH
10152: LD_INT 108
10154: PUSH
10155: LD_INT 109
10157: PUSH
10158: LD_INT 110
10160: PUSH
10161: LD_INT 111
10163: PUSH
10164: LD_INT 112
10166: PUSH
10167: LD_INT 113
10169: PUSH
10170: LD_INT 114
10172: PUSH
10173: EMPTY
10174: LIST
10175: LIST
10176: LIST
10177: LIST
10178: LIST
10179: LIST
10180: LIST
10181: LIST
10182: LIST
10183: LIST
10184: LIST
10185: LIST
10186: LIST
10187: LIST
10188: PUSH
10189: EMPTY
10190: LIST
10191: LIST
10192: ST_TO_ADDR
10193: GO 10920
10195: LD_INT 16
10197: DOUBLE
10198: EQUAL
10199: IFTRUE 10203
10201: GO 10327
10203: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
10204: LD_ADDR_VAR 0 1
10208: PUSH
10209: LD_INT 2
10211: PUSH
10212: LD_INT 4
10214: PUSH
10215: LD_INT 5
10217: PUSH
10218: LD_INT 7
10220: PUSH
10221: LD_INT 11
10223: PUSH
10224: LD_INT 12
10226: PUSH
10227: LD_INT 15
10229: PUSH
10230: LD_INT 16
10232: PUSH
10233: LD_INT 20
10235: PUSH
10236: LD_INT 21
10238: PUSH
10239: LD_INT 22
10241: PUSH
10242: LD_INT 23
10244: PUSH
10245: LD_INT 25
10247: PUSH
10248: LD_INT 26
10250: PUSH
10251: LD_INT 30
10253: PUSH
10254: LD_INT 31
10256: PUSH
10257: LD_INT 32
10259: PUSH
10260: LD_INT 33
10262: PUSH
10263: LD_INT 34
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: LIST
10270: LIST
10271: LIST
10272: LIST
10273: LIST
10274: LIST
10275: LIST
10276: LIST
10277: LIST
10278: LIST
10279: LIST
10280: LIST
10281: LIST
10282: LIST
10283: LIST
10284: LIST
10285: LIST
10286: PUSH
10287: LD_INT 101
10289: PUSH
10290: LD_INT 102
10292: PUSH
10293: LD_INT 103
10295: PUSH
10296: LD_INT 106
10298: PUSH
10299: LD_INT 108
10301: PUSH
10302: LD_INT 112
10304: PUSH
10305: LD_INT 113
10307: PUSH
10308: LD_INT 114
10310: PUSH
10311: EMPTY
10312: LIST
10313: LIST
10314: LIST
10315: LIST
10316: LIST
10317: LIST
10318: LIST
10319: LIST
10320: PUSH
10321: EMPTY
10322: LIST
10323: LIST
10324: ST_TO_ADDR
10325: GO 10920
10327: LD_INT 17
10329: DOUBLE
10330: EQUAL
10331: IFTRUE 10335
10333: GO 10547
10335: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
10336: LD_ADDR_VAR 0 1
10340: PUSH
10341: LD_INT 1
10343: PUSH
10344: LD_INT 2
10346: PUSH
10347: LD_INT 3
10349: PUSH
10350: LD_INT 4
10352: PUSH
10353: LD_INT 5
10355: PUSH
10356: LD_INT 6
10358: PUSH
10359: LD_INT 7
10361: PUSH
10362: LD_INT 8
10364: PUSH
10365: LD_INT 9
10367: PUSH
10368: LD_INT 10
10370: PUSH
10371: LD_INT 11
10373: PUSH
10374: LD_INT 12
10376: PUSH
10377: LD_INT 13
10379: PUSH
10380: LD_INT 14
10382: PUSH
10383: LD_INT 15
10385: PUSH
10386: LD_INT 16
10388: PUSH
10389: LD_INT 17
10391: PUSH
10392: LD_INT 18
10394: PUSH
10395: LD_INT 19
10397: PUSH
10398: LD_INT 20
10400: PUSH
10401: LD_INT 21
10403: PUSH
10404: LD_INT 22
10406: PUSH
10407: LD_INT 23
10409: PUSH
10410: LD_INT 24
10412: PUSH
10413: LD_INT 25
10415: PUSH
10416: LD_INT 26
10418: PUSH
10419: LD_INT 27
10421: PUSH
10422: LD_INT 28
10424: PUSH
10425: LD_INT 29
10427: PUSH
10428: LD_INT 30
10430: PUSH
10431: LD_INT 31
10433: PUSH
10434: LD_INT 32
10436: PUSH
10437: LD_INT 33
10439: PUSH
10440: LD_INT 34
10442: PUSH
10443: LD_INT 36
10445: PUSH
10446: EMPTY
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: LIST
10453: LIST
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: LIST
10459: LIST
10460: LIST
10461: LIST
10462: LIST
10463: LIST
10464: LIST
10465: LIST
10466: LIST
10467: LIST
10468: LIST
10469: LIST
10470: LIST
10471: LIST
10472: LIST
10473: LIST
10474: LIST
10475: LIST
10476: LIST
10477: LIST
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: PUSH
10483: LD_INT 101
10485: PUSH
10486: LD_INT 102
10488: PUSH
10489: LD_INT 103
10491: PUSH
10492: LD_INT 104
10494: PUSH
10495: LD_INT 105
10497: PUSH
10498: LD_INT 106
10500: PUSH
10501: LD_INT 107
10503: PUSH
10504: LD_INT 108
10506: PUSH
10507: LD_INT 109
10509: PUSH
10510: LD_INT 110
10512: PUSH
10513: LD_INT 111
10515: PUSH
10516: LD_INT 112
10518: PUSH
10519: LD_INT 113
10521: PUSH
10522: LD_INT 114
10524: PUSH
10525: EMPTY
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: PUSH
10541: EMPTY
10542: LIST
10543: LIST
10544: ST_TO_ADDR
10545: GO 10920
10547: LD_INT 18
10549: DOUBLE
10550: EQUAL
10551: IFTRUE 10555
10553: GO 10691
10555: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
10556: LD_ADDR_VAR 0 1
10560: PUSH
10561: LD_INT 2
10563: PUSH
10564: LD_INT 4
10566: PUSH
10567: LD_INT 5
10569: PUSH
10570: LD_INT 7
10572: PUSH
10573: LD_INT 11
10575: PUSH
10576: LD_INT 12
10578: PUSH
10579: LD_INT 15
10581: PUSH
10582: LD_INT 16
10584: PUSH
10585: LD_INT 20
10587: PUSH
10588: LD_INT 21
10590: PUSH
10591: LD_INT 22
10593: PUSH
10594: LD_INT 23
10596: PUSH
10597: LD_INT 25
10599: PUSH
10600: LD_INT 26
10602: PUSH
10603: LD_INT 30
10605: PUSH
10606: LD_INT 31
10608: PUSH
10609: LD_INT 32
10611: PUSH
10612: LD_INT 33
10614: PUSH
10615: LD_INT 34
10617: PUSH
10618: LD_INT 35
10620: PUSH
10621: LD_INT 36
10623: PUSH
10624: EMPTY
10625: LIST
10626: LIST
10627: LIST
10628: LIST
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: PUSH
10647: LD_INT 101
10649: PUSH
10650: LD_INT 102
10652: PUSH
10653: LD_INT 103
10655: PUSH
10656: LD_INT 106
10658: PUSH
10659: LD_INT 108
10661: PUSH
10662: LD_INT 112
10664: PUSH
10665: LD_INT 113
10667: PUSH
10668: LD_INT 114
10670: PUSH
10671: LD_INT 115
10673: PUSH
10674: EMPTY
10675: LIST
10676: LIST
10677: LIST
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: PUSH
10685: EMPTY
10686: LIST
10687: LIST
10688: ST_TO_ADDR
10689: GO 10920
10691: LD_INT 19
10693: DOUBLE
10694: EQUAL
10695: IFTRUE 10699
10697: GO 10919
10699: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
10700: LD_ADDR_VAR 0 1
10704: PUSH
10705: LD_INT 1
10707: PUSH
10708: LD_INT 2
10710: PUSH
10711: LD_INT 3
10713: PUSH
10714: LD_INT 4
10716: PUSH
10717: LD_INT 5
10719: PUSH
10720: LD_INT 6
10722: PUSH
10723: LD_INT 7
10725: PUSH
10726: LD_INT 8
10728: PUSH
10729: LD_INT 9
10731: PUSH
10732: LD_INT 10
10734: PUSH
10735: LD_INT 11
10737: PUSH
10738: LD_INT 12
10740: PUSH
10741: LD_INT 13
10743: PUSH
10744: LD_INT 14
10746: PUSH
10747: LD_INT 15
10749: PUSH
10750: LD_INT 16
10752: PUSH
10753: LD_INT 17
10755: PUSH
10756: LD_INT 18
10758: PUSH
10759: LD_INT 19
10761: PUSH
10762: LD_INT 20
10764: PUSH
10765: LD_INT 21
10767: PUSH
10768: LD_INT 22
10770: PUSH
10771: LD_INT 23
10773: PUSH
10774: LD_INT 24
10776: PUSH
10777: LD_INT 25
10779: PUSH
10780: LD_INT 26
10782: PUSH
10783: LD_INT 27
10785: PUSH
10786: LD_INT 28
10788: PUSH
10789: LD_INT 29
10791: PUSH
10792: LD_INT 30
10794: PUSH
10795: LD_INT 31
10797: PUSH
10798: LD_INT 32
10800: PUSH
10801: LD_INT 33
10803: PUSH
10804: LD_INT 34
10806: PUSH
10807: LD_INT 35
10809: PUSH
10810: LD_INT 36
10812: PUSH
10813: EMPTY
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: PUSH
10851: LD_INT 101
10853: PUSH
10854: LD_INT 102
10856: PUSH
10857: LD_INT 103
10859: PUSH
10860: LD_INT 104
10862: PUSH
10863: LD_INT 105
10865: PUSH
10866: LD_INT 106
10868: PUSH
10869: LD_INT 107
10871: PUSH
10872: LD_INT 108
10874: PUSH
10875: LD_INT 109
10877: PUSH
10878: LD_INT 110
10880: PUSH
10881: LD_INT 111
10883: PUSH
10884: LD_INT 112
10886: PUSH
10887: LD_INT 113
10889: PUSH
10890: LD_INT 114
10892: PUSH
10893: LD_INT 115
10895: PUSH
10896: EMPTY
10897: LIST
10898: LIST
10899: LIST
10900: LIST
10901: LIST
10902: LIST
10903: LIST
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: LIST
10909: LIST
10910: LIST
10911: LIST
10912: PUSH
10913: EMPTY
10914: LIST
10915: LIST
10916: ST_TO_ADDR
10917: GO 10920
10919: POP
// end else
10920: GO 11139
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
10922: LD_ADDR_VAR 0 1
10926: PUSH
10927: LD_INT 1
10929: PUSH
10930: LD_INT 2
10932: PUSH
10933: LD_INT 3
10935: PUSH
10936: LD_INT 4
10938: PUSH
10939: LD_INT 5
10941: PUSH
10942: LD_INT 6
10944: PUSH
10945: LD_INT 7
10947: PUSH
10948: LD_INT 8
10950: PUSH
10951: LD_INT 9
10953: PUSH
10954: LD_INT 10
10956: PUSH
10957: LD_INT 11
10959: PUSH
10960: LD_INT 12
10962: PUSH
10963: LD_INT 13
10965: PUSH
10966: LD_INT 14
10968: PUSH
10969: LD_INT 15
10971: PUSH
10972: LD_INT 16
10974: PUSH
10975: LD_INT 17
10977: PUSH
10978: LD_INT 18
10980: PUSH
10981: LD_INT 19
10983: PUSH
10984: LD_INT 20
10986: PUSH
10987: LD_INT 21
10989: PUSH
10990: LD_INT 22
10992: PUSH
10993: LD_INT 23
10995: PUSH
10996: LD_INT 24
10998: PUSH
10999: LD_INT 25
11001: PUSH
11002: LD_INT 26
11004: PUSH
11005: LD_INT 27
11007: PUSH
11008: LD_INT 28
11010: PUSH
11011: LD_INT 29
11013: PUSH
11014: LD_INT 30
11016: PUSH
11017: LD_INT 31
11019: PUSH
11020: LD_INT 32
11022: PUSH
11023: LD_INT 33
11025: PUSH
11026: LD_INT 34
11028: PUSH
11029: LD_INT 35
11031: PUSH
11032: LD_INT 36
11034: PUSH
11035: EMPTY
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: LIST
11071: LIST
11072: PUSH
11073: LD_INT 101
11075: PUSH
11076: LD_INT 102
11078: PUSH
11079: LD_INT 103
11081: PUSH
11082: LD_INT 104
11084: PUSH
11085: LD_INT 105
11087: PUSH
11088: LD_INT 106
11090: PUSH
11091: LD_INT 107
11093: PUSH
11094: LD_INT 108
11096: PUSH
11097: LD_INT 109
11099: PUSH
11100: LD_INT 110
11102: PUSH
11103: LD_INT 111
11105: PUSH
11106: LD_INT 112
11108: PUSH
11109: LD_INT 113
11111: PUSH
11112: LD_INT 114
11114: PUSH
11115: LD_INT 115
11117: PUSH
11118: EMPTY
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: LIST
11124: LIST
11125: LIST
11126: LIST
11127: LIST
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: ST_TO_ADDR
// if result then
11139: LD_VAR 0 1
11143: IFFALSE 11432
// begin normal :=  ;
11145: LD_ADDR_VAR 0 3
11149: PUSH
11150: LD_STRING 
11152: ST_TO_ADDR
// hardcore :=  ;
11153: LD_ADDR_VAR 0 4
11157: PUSH
11158: LD_STRING 
11160: ST_TO_ADDR
// for i = 1 to normalCounter do
11161: LD_ADDR_VAR 0 5
11165: PUSH
11166: DOUBLE
11167: LD_INT 1
11169: DEC
11170: ST_TO_ADDR
11171: LD_EXP 28
11175: PUSH
11176: FOR_TO
11177: IFFALSE 11278
// begin tmp := 0 ;
11179: LD_ADDR_VAR 0 2
11183: PUSH
11184: LD_STRING 0
11186: ST_TO_ADDR
// if result [ 1 ] then
11187: LD_VAR 0 1
11191: PUSH
11192: LD_INT 1
11194: ARRAY
11195: IFFALSE 11260
// if result [ 1 ] [ 1 ] = i then
11197: LD_VAR 0 1
11201: PUSH
11202: LD_INT 1
11204: ARRAY
11205: PUSH
11206: LD_INT 1
11208: ARRAY
11209: PUSH
11210: LD_VAR 0 5
11214: EQUAL
11215: IFFALSE 11260
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
11217: LD_ADDR_VAR 0 1
11221: PUSH
11222: LD_VAR 0 1
11226: PPUSH
11227: LD_INT 1
11229: PPUSH
11230: LD_VAR 0 1
11234: PUSH
11235: LD_INT 1
11237: ARRAY
11238: PPUSH
11239: LD_INT 1
11241: PPUSH
11242: CALL_OW 3
11246: PPUSH
11247: CALL_OW 1
11251: ST_TO_ADDR
// tmp := 1 ;
11252: LD_ADDR_VAR 0 2
11256: PUSH
11257: LD_STRING 1
11259: ST_TO_ADDR
// end ; normal := normal & tmp ;
11260: LD_ADDR_VAR 0 3
11264: PUSH
11265: LD_VAR 0 3
11269: PUSH
11270: LD_VAR 0 2
11274: STR
11275: ST_TO_ADDR
// end ;
11276: GO 11176
11278: POP
11279: POP
// for i = 1 to hardcoreCounter do
11280: LD_ADDR_VAR 0 5
11284: PUSH
11285: DOUBLE
11286: LD_INT 1
11288: DEC
11289: ST_TO_ADDR
11290: LD_EXP 29
11294: PUSH
11295: FOR_TO
11296: IFFALSE 11401
// begin tmp := 0 ;
11298: LD_ADDR_VAR 0 2
11302: PUSH
11303: LD_STRING 0
11305: ST_TO_ADDR
// if result [ 2 ] then
11306: LD_VAR 0 1
11310: PUSH
11311: LD_INT 2
11313: ARRAY
11314: IFFALSE 11383
// if result [ 2 ] [ 1 ] = 100 + i then
11316: LD_VAR 0 1
11320: PUSH
11321: LD_INT 2
11323: ARRAY
11324: PUSH
11325: LD_INT 1
11327: ARRAY
11328: PUSH
11329: LD_INT 100
11331: PUSH
11332: LD_VAR 0 5
11336: PLUS
11337: EQUAL
11338: IFFALSE 11383
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
11340: LD_ADDR_VAR 0 1
11344: PUSH
11345: LD_VAR 0 1
11349: PPUSH
11350: LD_INT 2
11352: PPUSH
11353: LD_VAR 0 1
11357: PUSH
11358: LD_INT 2
11360: ARRAY
11361: PPUSH
11362: LD_INT 1
11364: PPUSH
11365: CALL_OW 3
11369: PPUSH
11370: CALL_OW 1
11374: ST_TO_ADDR
// tmp := 1 ;
11375: LD_ADDR_VAR 0 2
11379: PUSH
11380: LD_STRING 1
11382: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
11383: LD_ADDR_VAR 0 4
11387: PUSH
11388: LD_VAR 0 4
11392: PUSH
11393: LD_VAR 0 2
11397: STR
11398: ST_TO_ADDR
// end ;
11399: GO 11295
11401: POP
11402: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
11403: LD_STRING getStreamItemsFromMission("
11405: PUSH
11406: LD_VAR 0 3
11410: STR
11411: PUSH
11412: LD_STRING ","
11414: STR
11415: PUSH
11416: LD_VAR 0 4
11420: STR
11421: PUSH
11422: LD_STRING ")
11424: STR
11425: PPUSH
11426: CALL_OW 559
// end else
11430: GO 11439
// ToLua ( getStreamItemsFromMission("","") ) ;
11432: LD_STRING getStreamItemsFromMission("","")
11434: PPUSH
11435: CALL_OW 559
// end ;
11439: LD_VAR 0 1
11443: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11444: LD_EXP 27
11448: PUSH
11449: LD_EXP 32
11453: AND
11454: IFFALSE 11578
11456: GO 11458
11458: DISABLE
11459: LD_INT 0
11461: PPUSH
11462: PPUSH
// begin enable ;
11463: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11464: LD_ADDR_VAR 0 2
11468: PUSH
11469: LD_INT 22
11471: PUSH
11472: LD_OWVAR 2
11476: PUSH
11477: EMPTY
11478: LIST
11479: LIST
11480: PUSH
11481: LD_INT 2
11483: PUSH
11484: LD_INT 34
11486: PUSH
11487: LD_INT 7
11489: PUSH
11490: EMPTY
11491: LIST
11492: LIST
11493: PUSH
11494: LD_INT 34
11496: PUSH
11497: LD_INT 45
11499: PUSH
11500: EMPTY
11501: LIST
11502: LIST
11503: PUSH
11504: LD_INT 34
11506: PUSH
11507: LD_INT 28
11509: PUSH
11510: EMPTY
11511: LIST
11512: LIST
11513: PUSH
11514: LD_INT 34
11516: PUSH
11517: LD_INT 47
11519: PUSH
11520: EMPTY
11521: LIST
11522: LIST
11523: PUSH
11524: EMPTY
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: PUSH
11531: EMPTY
11532: LIST
11533: LIST
11534: PPUSH
11535: CALL_OW 69
11539: ST_TO_ADDR
// if not tmp then
11540: LD_VAR 0 2
11544: NOT
11545: IFFALSE 11549
// exit ;
11547: GO 11578
// for i in tmp do
11549: LD_ADDR_VAR 0 1
11553: PUSH
11554: LD_VAR 0 2
11558: PUSH
11559: FOR_IN
11560: IFFALSE 11576
// begin SetLives ( i , 0 ) ;
11562: LD_VAR 0 1
11566: PPUSH
11567: LD_INT 0
11569: PPUSH
11570: CALL_OW 234
// end ;
11574: GO 11559
11576: POP
11577: POP
// end ;
11578: PPOPN 2
11580: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11581: LD_EXP 27
11585: PUSH
11586: LD_EXP 33
11590: AND
11591: IFFALSE 11675
11593: GO 11595
11595: DISABLE
11596: LD_INT 0
11598: PPUSH
11599: PPUSH
// begin enable ;
11600: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11601: LD_ADDR_VAR 0 2
11605: PUSH
11606: LD_INT 22
11608: PUSH
11609: LD_OWVAR 2
11613: PUSH
11614: EMPTY
11615: LIST
11616: LIST
11617: PUSH
11618: LD_INT 32
11620: PUSH
11621: LD_INT 3
11623: PUSH
11624: EMPTY
11625: LIST
11626: LIST
11627: PUSH
11628: EMPTY
11629: LIST
11630: LIST
11631: PPUSH
11632: CALL_OW 69
11636: ST_TO_ADDR
// if not tmp then
11637: LD_VAR 0 2
11641: NOT
11642: IFFALSE 11646
// exit ;
11644: GO 11675
// for i in tmp do
11646: LD_ADDR_VAR 0 1
11650: PUSH
11651: LD_VAR 0 2
11655: PUSH
11656: FOR_IN
11657: IFFALSE 11673
// begin SetLives ( i , 0 ) ;
11659: LD_VAR 0 1
11663: PPUSH
11664: LD_INT 0
11666: PPUSH
11667: CALL_OW 234
// end ;
11671: GO 11656
11673: POP
11674: POP
// end ;
11675: PPOPN 2
11677: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11678: LD_EXP 27
11682: PUSH
11683: LD_EXP 30
11687: AND
11688: IFFALSE 11781
11690: GO 11692
11692: DISABLE
11693: LD_INT 0
11695: PPUSH
// begin enable ;
11696: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11697: LD_ADDR_VAR 0 1
11701: PUSH
11702: LD_INT 22
11704: PUSH
11705: LD_OWVAR 2
11709: PUSH
11710: EMPTY
11711: LIST
11712: LIST
11713: PUSH
11714: LD_INT 2
11716: PUSH
11717: LD_INT 25
11719: PUSH
11720: LD_INT 5
11722: PUSH
11723: EMPTY
11724: LIST
11725: LIST
11726: PUSH
11727: LD_INT 25
11729: PUSH
11730: LD_INT 9
11732: PUSH
11733: EMPTY
11734: LIST
11735: LIST
11736: PUSH
11737: LD_INT 25
11739: PUSH
11740: LD_INT 8
11742: PUSH
11743: EMPTY
11744: LIST
11745: LIST
11746: PUSH
11747: EMPTY
11748: LIST
11749: LIST
11750: LIST
11751: LIST
11752: PUSH
11753: EMPTY
11754: LIST
11755: LIST
11756: PPUSH
11757: CALL_OW 69
11761: PUSH
11762: FOR_IN
11763: IFFALSE 11779
// begin SetClass ( i , 1 ) ;
11765: LD_VAR 0 1
11769: PPUSH
11770: LD_INT 1
11772: PPUSH
11773: CALL_OW 336
// end ;
11777: GO 11762
11779: POP
11780: POP
// end ;
11781: PPOPN 1
11783: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
11784: LD_EXP 27
11788: PUSH
11789: LD_EXP 31
11793: AND
11794: PUSH
11795: LD_OWVAR 65
11799: PUSH
11800: LD_INT 7
11802: LESS
11803: AND
11804: IFFALSE 11818
11806: GO 11808
11808: DISABLE
// begin enable ;
11809: ENABLE
// game_speed := 7 ;
11810: LD_ADDR_OWVAR 65
11814: PUSH
11815: LD_INT 7
11817: ST_TO_ADDR
// end ;
11818: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11819: LD_EXP 27
11823: PUSH
11824: LD_EXP 34
11828: AND
11829: IFFALSE 12031
11831: GO 11833
11833: DISABLE
11834: LD_INT 0
11836: PPUSH
11837: PPUSH
11838: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11839: LD_ADDR_VAR 0 3
11843: PUSH
11844: LD_INT 81
11846: PUSH
11847: LD_OWVAR 2
11851: PUSH
11852: EMPTY
11853: LIST
11854: LIST
11855: PUSH
11856: LD_INT 21
11858: PUSH
11859: LD_INT 1
11861: PUSH
11862: EMPTY
11863: LIST
11864: LIST
11865: PUSH
11866: EMPTY
11867: LIST
11868: LIST
11869: PPUSH
11870: CALL_OW 69
11874: ST_TO_ADDR
// if not tmp then
11875: LD_VAR 0 3
11879: NOT
11880: IFFALSE 11884
// exit ;
11882: GO 12031
// if tmp > 5 then
11884: LD_VAR 0 3
11888: PUSH
11889: LD_INT 5
11891: GREATER
11892: IFFALSE 11904
// k := 5 else
11894: LD_ADDR_VAR 0 2
11898: PUSH
11899: LD_INT 5
11901: ST_TO_ADDR
11902: GO 11914
// k := tmp ;
11904: LD_ADDR_VAR 0 2
11908: PUSH
11909: LD_VAR 0 3
11913: ST_TO_ADDR
// for i := 1 to k do
11914: LD_ADDR_VAR 0 1
11918: PUSH
11919: DOUBLE
11920: LD_INT 1
11922: DEC
11923: ST_TO_ADDR
11924: LD_VAR 0 2
11928: PUSH
11929: FOR_TO
11930: IFFALSE 12029
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11932: LD_VAR 0 3
11936: PUSH
11937: LD_VAR 0 1
11941: ARRAY
11942: PPUSH
11943: LD_VAR 0 1
11947: PUSH
11948: LD_INT 4
11950: MOD
11951: PUSH
11952: LD_INT 1
11954: PLUS
11955: PPUSH
11956: CALL_OW 259
11960: PUSH
11961: LD_INT 10
11963: LESS
11964: IFFALSE 12027
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
11966: LD_VAR 0 3
11970: PUSH
11971: LD_VAR 0 1
11975: ARRAY
11976: PPUSH
11977: LD_VAR 0 1
11981: PUSH
11982: LD_INT 4
11984: MOD
11985: PUSH
11986: LD_INT 1
11988: PLUS
11989: PPUSH
11990: LD_VAR 0 3
11994: PUSH
11995: LD_VAR 0 1
11999: ARRAY
12000: PPUSH
12001: LD_VAR 0 1
12005: PUSH
12006: LD_INT 4
12008: MOD
12009: PUSH
12010: LD_INT 1
12012: PLUS
12013: PPUSH
12014: CALL_OW 259
12018: PUSH
12019: LD_INT 1
12021: PLUS
12022: PPUSH
12023: CALL_OW 237
12027: GO 11929
12029: POP
12030: POP
// end ;
12031: PPOPN 3
12033: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12034: LD_EXP 27
12038: PUSH
12039: LD_EXP 35
12043: AND
12044: IFFALSE 12064
12046: GO 12048
12048: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12049: LD_INT 4
12051: PPUSH
12052: LD_OWVAR 2
12056: PPUSH
12057: LD_INT 0
12059: PPUSH
12060: CALL_OW 324
12064: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12065: LD_EXP 27
12069: PUSH
12070: LD_EXP 64
12074: AND
12075: IFFALSE 12095
12077: GO 12079
12079: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
12080: LD_INT 19
12082: PPUSH
12083: LD_OWVAR 2
12087: PPUSH
12088: LD_INT 0
12090: PPUSH
12091: CALL_OW 324
12095: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
12096: LD_EXP 27
12100: PUSH
12101: LD_EXP 36
12105: AND
12106: IFFALSE 12208
12108: GO 12110
12110: DISABLE
12111: LD_INT 0
12113: PPUSH
12114: PPUSH
// begin enable ;
12115: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
12116: LD_ADDR_VAR 0 2
12120: PUSH
12121: LD_INT 22
12123: PUSH
12124: LD_OWVAR 2
12128: PUSH
12129: EMPTY
12130: LIST
12131: LIST
12132: PUSH
12133: LD_INT 2
12135: PUSH
12136: LD_INT 34
12138: PUSH
12139: LD_INT 11
12141: PUSH
12142: EMPTY
12143: LIST
12144: LIST
12145: PUSH
12146: LD_INT 34
12148: PUSH
12149: LD_INT 30
12151: PUSH
12152: EMPTY
12153: LIST
12154: LIST
12155: PUSH
12156: EMPTY
12157: LIST
12158: LIST
12159: LIST
12160: PUSH
12161: EMPTY
12162: LIST
12163: LIST
12164: PPUSH
12165: CALL_OW 69
12169: ST_TO_ADDR
// if not tmp then
12170: LD_VAR 0 2
12174: NOT
12175: IFFALSE 12179
// exit ;
12177: GO 12208
// for i in tmp do
12179: LD_ADDR_VAR 0 1
12183: PUSH
12184: LD_VAR 0 2
12188: PUSH
12189: FOR_IN
12190: IFFALSE 12206
// begin SetLives ( i , 0 ) ;
12192: LD_VAR 0 1
12196: PPUSH
12197: LD_INT 0
12199: PPUSH
12200: CALL_OW 234
// end ;
12204: GO 12189
12206: POP
12207: POP
// end ;
12208: PPOPN 2
12210: END
// every 0 0$1 trigger StreamModeActive and sBunker do
12211: LD_EXP 27
12215: PUSH
12216: LD_EXP 37
12220: AND
12221: IFFALSE 12241
12223: GO 12225
12225: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
12226: LD_INT 32
12228: PPUSH
12229: LD_OWVAR 2
12233: PPUSH
12234: LD_INT 0
12236: PPUSH
12237: CALL_OW 324
12241: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12242: LD_EXP 27
12246: PUSH
12247: LD_EXP 38
12251: AND
12252: IFFALSE 12433
12254: GO 12256
12256: DISABLE
12257: LD_INT 0
12259: PPUSH
12260: PPUSH
12261: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12262: LD_ADDR_VAR 0 2
12266: PUSH
12267: LD_INT 22
12269: PUSH
12270: LD_OWVAR 2
12274: PUSH
12275: EMPTY
12276: LIST
12277: LIST
12278: PUSH
12279: LD_INT 33
12281: PUSH
12282: LD_INT 3
12284: PUSH
12285: EMPTY
12286: LIST
12287: LIST
12288: PUSH
12289: EMPTY
12290: LIST
12291: LIST
12292: PPUSH
12293: CALL_OW 69
12297: ST_TO_ADDR
// if not tmp then
12298: LD_VAR 0 2
12302: NOT
12303: IFFALSE 12307
// exit ;
12305: GO 12433
// side := 0 ;
12307: LD_ADDR_VAR 0 3
12311: PUSH
12312: LD_INT 0
12314: ST_TO_ADDR
// for i := 1 to 8 do
12315: LD_ADDR_VAR 0 1
12319: PUSH
12320: DOUBLE
12321: LD_INT 1
12323: DEC
12324: ST_TO_ADDR
12325: LD_INT 8
12327: PUSH
12328: FOR_TO
12329: IFFALSE 12377
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12331: LD_OWVAR 2
12335: PUSH
12336: LD_VAR 0 1
12340: NONEQUAL
12341: PUSH
12342: LD_OWVAR 2
12346: PPUSH
12347: LD_VAR 0 1
12351: PPUSH
12352: CALL_OW 81
12356: PUSH
12357: LD_INT 2
12359: EQUAL
12360: AND
12361: IFFALSE 12375
// begin side := i ;
12363: LD_ADDR_VAR 0 3
12367: PUSH
12368: LD_VAR 0 1
12372: ST_TO_ADDR
// break ;
12373: GO 12377
// end ;
12375: GO 12328
12377: POP
12378: POP
// if not side then
12379: LD_VAR 0 3
12383: NOT
12384: IFFALSE 12388
// exit ;
12386: GO 12433
// for i := 1 to tmp do
12388: LD_ADDR_VAR 0 1
12392: PUSH
12393: DOUBLE
12394: LD_INT 1
12396: DEC
12397: ST_TO_ADDR
12398: LD_VAR 0 2
12402: PUSH
12403: FOR_TO
12404: IFFALSE 12431
// if Prob ( 60 ) then
12406: LD_INT 60
12408: PPUSH
12409: CALL_OW 13
12413: IFFALSE 12429
// SetSide ( i , side ) ;
12415: LD_VAR 0 1
12419: PPUSH
12420: LD_VAR 0 3
12424: PPUSH
12425: CALL_OW 235
12429: GO 12403
12431: POP
12432: POP
// end ;
12433: PPOPN 3
12435: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12436: LD_EXP 27
12440: PUSH
12441: LD_EXP 40
12445: AND
12446: IFFALSE 12565
12448: GO 12450
12450: DISABLE
12451: LD_INT 0
12453: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12454: LD_ADDR_VAR 0 1
12458: PUSH
12459: LD_INT 22
12461: PUSH
12462: LD_OWVAR 2
12466: PUSH
12467: EMPTY
12468: LIST
12469: LIST
12470: PUSH
12471: LD_INT 21
12473: PUSH
12474: LD_INT 1
12476: PUSH
12477: EMPTY
12478: LIST
12479: LIST
12480: PUSH
12481: LD_INT 3
12483: PUSH
12484: LD_INT 23
12486: PUSH
12487: LD_INT 0
12489: PUSH
12490: EMPTY
12491: LIST
12492: LIST
12493: PUSH
12494: EMPTY
12495: LIST
12496: LIST
12497: PUSH
12498: EMPTY
12499: LIST
12500: LIST
12501: LIST
12502: PPUSH
12503: CALL_OW 69
12507: PUSH
12508: FOR_IN
12509: IFFALSE 12563
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12511: LD_VAR 0 1
12515: PPUSH
12516: CALL_OW 257
12520: PUSH
12521: LD_INT 1
12523: PUSH
12524: LD_INT 2
12526: PUSH
12527: LD_INT 3
12529: PUSH
12530: LD_INT 4
12532: PUSH
12533: EMPTY
12534: LIST
12535: LIST
12536: LIST
12537: LIST
12538: IN
12539: IFFALSE 12561
// SetClass ( un , rand ( 1 , 4 ) ) ;
12541: LD_VAR 0 1
12545: PPUSH
12546: LD_INT 1
12548: PPUSH
12549: LD_INT 4
12551: PPUSH
12552: CALL_OW 12
12556: PPUSH
12557: CALL_OW 336
12561: GO 12508
12563: POP
12564: POP
// end ;
12565: PPOPN 1
12567: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12568: LD_EXP 27
12572: PUSH
12573: LD_EXP 39
12577: AND
12578: IFFALSE 12657
12580: GO 12582
12582: DISABLE
12583: LD_INT 0
12585: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12586: LD_ADDR_VAR 0 1
12590: PUSH
12591: LD_INT 22
12593: PUSH
12594: LD_OWVAR 2
12598: PUSH
12599: EMPTY
12600: LIST
12601: LIST
12602: PUSH
12603: LD_INT 21
12605: PUSH
12606: LD_INT 3
12608: PUSH
12609: EMPTY
12610: LIST
12611: LIST
12612: PUSH
12613: EMPTY
12614: LIST
12615: LIST
12616: PPUSH
12617: CALL_OW 69
12621: ST_TO_ADDR
// if not tmp then
12622: LD_VAR 0 1
12626: NOT
12627: IFFALSE 12631
// exit ;
12629: GO 12657
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12631: LD_VAR 0 1
12635: PUSH
12636: LD_INT 1
12638: PPUSH
12639: LD_VAR 0 1
12643: PPUSH
12644: CALL_OW 12
12648: ARRAY
12649: PPUSH
12650: LD_INT 100
12652: PPUSH
12653: CALL_OW 234
// end ;
12657: PPOPN 1
12659: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12660: LD_EXP 27
12664: PUSH
12665: LD_EXP 41
12669: AND
12670: IFFALSE 12768
12672: GO 12674
12674: DISABLE
12675: LD_INT 0
12677: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12678: LD_ADDR_VAR 0 1
12682: PUSH
12683: LD_INT 22
12685: PUSH
12686: LD_OWVAR 2
12690: PUSH
12691: EMPTY
12692: LIST
12693: LIST
12694: PUSH
12695: LD_INT 21
12697: PUSH
12698: LD_INT 1
12700: PUSH
12701: EMPTY
12702: LIST
12703: LIST
12704: PUSH
12705: EMPTY
12706: LIST
12707: LIST
12708: PPUSH
12709: CALL_OW 69
12713: ST_TO_ADDR
// if not tmp then
12714: LD_VAR 0 1
12718: NOT
12719: IFFALSE 12723
// exit ;
12721: GO 12768
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12723: LD_VAR 0 1
12727: PUSH
12728: LD_INT 1
12730: PPUSH
12731: LD_VAR 0 1
12735: PPUSH
12736: CALL_OW 12
12740: ARRAY
12741: PPUSH
12742: LD_INT 1
12744: PPUSH
12745: LD_INT 4
12747: PPUSH
12748: CALL_OW 12
12752: PPUSH
12753: LD_INT 3000
12755: PPUSH
12756: LD_INT 9000
12758: PPUSH
12759: CALL_OW 12
12763: PPUSH
12764: CALL_OW 492
// end ;
12768: PPOPN 1
12770: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12771: LD_EXP 27
12775: PUSH
12776: LD_EXP 42
12780: AND
12781: IFFALSE 12801
12783: GO 12785
12785: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
12786: LD_INT 1
12788: PPUSH
12789: LD_OWVAR 2
12793: PPUSH
12794: LD_INT 0
12796: PPUSH
12797: CALL_OW 324
12801: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
12802: LD_EXP 27
12806: PUSH
12807: LD_EXP 43
12811: AND
12812: IFFALSE 12895
12814: GO 12816
12816: DISABLE
12817: LD_INT 0
12819: PPUSH
12820: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12821: LD_ADDR_VAR 0 2
12825: PUSH
12826: LD_INT 22
12828: PUSH
12829: LD_OWVAR 2
12833: PUSH
12834: EMPTY
12835: LIST
12836: LIST
12837: PUSH
12838: LD_INT 21
12840: PUSH
12841: LD_INT 3
12843: PUSH
12844: EMPTY
12845: LIST
12846: LIST
12847: PUSH
12848: EMPTY
12849: LIST
12850: LIST
12851: PPUSH
12852: CALL_OW 69
12856: ST_TO_ADDR
// if not tmp then
12857: LD_VAR 0 2
12861: NOT
12862: IFFALSE 12866
// exit ;
12864: GO 12895
// for i in tmp do
12866: LD_ADDR_VAR 0 1
12870: PUSH
12871: LD_VAR 0 2
12875: PUSH
12876: FOR_IN
12877: IFFALSE 12893
// SetBLevel ( i , 10 ) ;
12879: LD_VAR 0 1
12883: PPUSH
12884: LD_INT 10
12886: PPUSH
12887: CALL_OW 241
12891: GO 12876
12893: POP
12894: POP
// end ;
12895: PPOPN 2
12897: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12898: LD_EXP 27
12902: PUSH
12903: LD_EXP 44
12907: AND
12908: IFFALSE 13019
12910: GO 12912
12912: DISABLE
12913: LD_INT 0
12915: PPUSH
12916: PPUSH
12917: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12918: LD_ADDR_VAR 0 3
12922: PUSH
12923: LD_INT 22
12925: PUSH
12926: LD_OWVAR 2
12930: PUSH
12931: EMPTY
12932: LIST
12933: LIST
12934: PUSH
12935: LD_INT 25
12937: PUSH
12938: LD_INT 1
12940: PUSH
12941: EMPTY
12942: LIST
12943: LIST
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: PPUSH
12949: CALL_OW 69
12953: ST_TO_ADDR
// if not tmp then
12954: LD_VAR 0 3
12958: NOT
12959: IFFALSE 12963
// exit ;
12961: GO 13019
// un := tmp [ rand ( 1 , tmp ) ] ;
12963: LD_ADDR_VAR 0 2
12967: PUSH
12968: LD_VAR 0 3
12972: PUSH
12973: LD_INT 1
12975: PPUSH
12976: LD_VAR 0 3
12980: PPUSH
12981: CALL_OW 12
12985: ARRAY
12986: ST_TO_ADDR
// if Crawls ( un ) then
12987: LD_VAR 0 2
12991: PPUSH
12992: CALL_OW 318
12996: IFFALSE 13007
// ComWalk ( un ) ;
12998: LD_VAR 0 2
13002: PPUSH
13003: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13007: LD_VAR 0 2
13011: PPUSH
13012: LD_INT 5
13014: PPUSH
13015: CALL_OW 336
// end ;
13019: PPOPN 3
13021: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
13022: LD_EXP 27
13026: PUSH
13027: LD_EXP 45
13031: AND
13032: PUSH
13033: LD_OWVAR 67
13037: PUSH
13038: LD_INT 3
13040: LESS
13041: AND
13042: IFFALSE 13061
13044: GO 13046
13046: DISABLE
// Difficulty := Difficulty + 1 ;
13047: LD_ADDR_OWVAR 67
13051: PUSH
13052: LD_OWVAR 67
13056: PUSH
13057: LD_INT 1
13059: PLUS
13060: ST_TO_ADDR
13061: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
13062: LD_EXP 27
13066: PUSH
13067: LD_EXP 46
13071: AND
13072: IFFALSE 13175
13074: GO 13076
13076: DISABLE
13077: LD_INT 0
13079: PPUSH
// begin for i := 1 to 5 do
13080: LD_ADDR_VAR 0 1
13084: PUSH
13085: DOUBLE
13086: LD_INT 1
13088: DEC
13089: ST_TO_ADDR
13090: LD_INT 5
13092: PUSH
13093: FOR_TO
13094: IFFALSE 13173
// begin uc_nation := nation_nature ;
13096: LD_ADDR_OWVAR 21
13100: PUSH
13101: LD_INT 0
13103: ST_TO_ADDR
// uc_side := 0 ;
13104: LD_ADDR_OWVAR 20
13108: PUSH
13109: LD_INT 0
13111: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13112: LD_ADDR_OWVAR 29
13116: PUSH
13117: LD_INT 12
13119: PUSH
13120: LD_INT 12
13122: PUSH
13123: EMPTY
13124: LIST
13125: LIST
13126: ST_TO_ADDR
// hc_agressivity := 20 ;
13127: LD_ADDR_OWVAR 35
13131: PUSH
13132: LD_INT 20
13134: ST_TO_ADDR
// hc_class := class_tiger ;
13135: LD_ADDR_OWVAR 28
13139: PUSH
13140: LD_INT 14
13142: ST_TO_ADDR
// hc_gallery :=  ;
13143: LD_ADDR_OWVAR 33
13147: PUSH
13148: LD_STRING 
13150: ST_TO_ADDR
// hc_name :=  ;
13151: LD_ADDR_OWVAR 26
13155: PUSH
13156: LD_STRING 
13158: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
13159: CALL_OW 44
13163: PPUSH
13164: LD_INT 0
13166: PPUSH
13167: CALL_OW 51
// end ;
13171: GO 13093
13173: POP
13174: POP
// end ;
13175: PPOPN 1
13177: END
// every 0 0$1 trigger StreamModeActive and sBomb do
13178: LD_EXP 27
13182: PUSH
13183: LD_EXP 47
13187: AND
13188: IFFALSE 13197
13190: GO 13192
13192: DISABLE
// StreamSibBomb ;
13193: CALL 13198 0 0
13197: END
// export function StreamSibBomb ; var i , x , y ; begin
13198: LD_INT 0
13200: PPUSH
13201: PPUSH
13202: PPUSH
13203: PPUSH
// result := false ;
13204: LD_ADDR_VAR 0 1
13208: PUSH
13209: LD_INT 0
13211: ST_TO_ADDR
// for i := 1 to 16 do
13212: LD_ADDR_VAR 0 2
13216: PUSH
13217: DOUBLE
13218: LD_INT 1
13220: DEC
13221: ST_TO_ADDR
13222: LD_INT 16
13224: PUSH
13225: FOR_TO
13226: IFFALSE 13425
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13228: LD_ADDR_VAR 0 3
13232: PUSH
13233: LD_INT 10
13235: PUSH
13236: LD_INT 20
13238: PUSH
13239: LD_INT 30
13241: PUSH
13242: LD_INT 40
13244: PUSH
13245: LD_INT 50
13247: PUSH
13248: LD_INT 60
13250: PUSH
13251: LD_INT 70
13253: PUSH
13254: LD_INT 80
13256: PUSH
13257: LD_INT 90
13259: PUSH
13260: LD_INT 100
13262: PUSH
13263: LD_INT 110
13265: PUSH
13266: LD_INT 120
13268: PUSH
13269: LD_INT 130
13271: PUSH
13272: LD_INT 140
13274: PUSH
13275: LD_INT 150
13277: PUSH
13278: EMPTY
13279: LIST
13280: LIST
13281: LIST
13282: LIST
13283: LIST
13284: LIST
13285: LIST
13286: LIST
13287: LIST
13288: LIST
13289: LIST
13290: LIST
13291: LIST
13292: LIST
13293: LIST
13294: PUSH
13295: LD_INT 1
13297: PPUSH
13298: LD_INT 15
13300: PPUSH
13301: CALL_OW 12
13305: ARRAY
13306: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13307: LD_ADDR_VAR 0 4
13311: PUSH
13312: LD_INT 10
13314: PUSH
13315: LD_INT 20
13317: PUSH
13318: LD_INT 30
13320: PUSH
13321: LD_INT 40
13323: PUSH
13324: LD_INT 50
13326: PUSH
13327: LD_INT 60
13329: PUSH
13330: LD_INT 70
13332: PUSH
13333: LD_INT 80
13335: PUSH
13336: LD_INT 90
13338: PUSH
13339: LD_INT 100
13341: PUSH
13342: LD_INT 110
13344: PUSH
13345: LD_INT 120
13347: PUSH
13348: LD_INT 130
13350: PUSH
13351: LD_INT 140
13353: PUSH
13354: LD_INT 150
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: LIST
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: LIST
13369: LIST
13370: LIST
13371: LIST
13372: LIST
13373: PUSH
13374: LD_INT 1
13376: PPUSH
13377: LD_INT 15
13379: PPUSH
13380: CALL_OW 12
13384: ARRAY
13385: ST_TO_ADDR
// if ValidHex ( x , y ) then
13386: LD_VAR 0 3
13390: PPUSH
13391: LD_VAR 0 4
13395: PPUSH
13396: CALL_OW 488
13400: IFFALSE 13423
// begin result := [ x , y ] ;
13402: LD_ADDR_VAR 0 1
13406: PUSH
13407: LD_VAR 0 3
13411: PUSH
13412: LD_VAR 0 4
13416: PUSH
13417: EMPTY
13418: LIST
13419: LIST
13420: ST_TO_ADDR
// break ;
13421: GO 13425
// end ; end ;
13423: GO 13225
13425: POP
13426: POP
// if result then
13427: LD_VAR 0 1
13431: IFFALSE 13491
// begin ToLua ( playSibBomb() ) ;
13433: LD_STRING playSibBomb()
13435: PPUSH
13436: CALL_OW 559
// wait ( 0 0$14 ) ;
13440: LD_INT 490
13442: PPUSH
13443: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13447: LD_VAR 0 1
13451: PUSH
13452: LD_INT 1
13454: ARRAY
13455: PPUSH
13456: LD_VAR 0 1
13460: PUSH
13461: LD_INT 2
13463: ARRAY
13464: PPUSH
13465: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13469: LD_VAR 0 1
13473: PUSH
13474: LD_INT 1
13476: ARRAY
13477: PPUSH
13478: LD_VAR 0 1
13482: PUSH
13483: LD_INT 2
13485: ARRAY
13486: PPUSH
13487: CALL_OW 429
// end ; end ;
13491: LD_VAR 0 1
13495: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13496: LD_EXP 27
13500: PUSH
13501: LD_EXP 49
13505: AND
13506: IFFALSE 13518
13508: GO 13510
13510: DISABLE
// YouLost (  ) ;
13511: LD_STRING 
13513: PPUSH
13514: CALL_OW 104
13518: END
// every 0 0$1 trigger StreamModeActive and sFog do
13519: LD_EXP 27
13523: PUSH
13524: LD_EXP 48
13528: AND
13529: IFFALSE 13543
13531: GO 13533
13533: DISABLE
// FogOff ( your_side ) ;
13534: LD_OWVAR 2
13538: PPUSH
13539: CALL_OW 344
13543: END
// every 0 0$1 trigger StreamModeActive and sSun do
13544: LD_EXP 27
13548: PUSH
13549: LD_EXP 50
13553: AND
13554: IFFALSE 13582
13556: GO 13558
13558: DISABLE
// begin solar_recharge_percent := 0 ;
13559: LD_ADDR_OWVAR 79
13563: PUSH
13564: LD_INT 0
13566: ST_TO_ADDR
// wait ( 5 5$00 ) ;
13567: LD_INT 10500
13569: PPUSH
13570: CALL_OW 67
// solar_recharge_percent := 100 ;
13574: LD_ADDR_OWVAR 79
13578: PUSH
13579: LD_INT 100
13581: ST_TO_ADDR
// end ;
13582: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13583: LD_EXP 27
13587: PUSH
13588: LD_EXP 51
13592: AND
13593: IFFALSE 13832
13595: GO 13597
13597: DISABLE
13598: LD_INT 0
13600: PPUSH
13601: PPUSH
13602: PPUSH
// begin tmp := [ ] ;
13603: LD_ADDR_VAR 0 3
13607: PUSH
13608: EMPTY
13609: ST_TO_ADDR
// for i := 1 to 6 do
13610: LD_ADDR_VAR 0 1
13614: PUSH
13615: DOUBLE
13616: LD_INT 1
13618: DEC
13619: ST_TO_ADDR
13620: LD_INT 6
13622: PUSH
13623: FOR_TO
13624: IFFALSE 13729
// begin uc_nation := nation_nature ;
13626: LD_ADDR_OWVAR 21
13630: PUSH
13631: LD_INT 0
13633: ST_TO_ADDR
// uc_side := 0 ;
13634: LD_ADDR_OWVAR 20
13638: PUSH
13639: LD_INT 0
13641: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13642: LD_ADDR_OWVAR 29
13646: PUSH
13647: LD_INT 12
13649: PUSH
13650: LD_INT 12
13652: PUSH
13653: EMPTY
13654: LIST
13655: LIST
13656: ST_TO_ADDR
// hc_agressivity := 20 ;
13657: LD_ADDR_OWVAR 35
13661: PUSH
13662: LD_INT 20
13664: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13665: LD_ADDR_OWVAR 28
13669: PUSH
13670: LD_INT 17
13672: ST_TO_ADDR
// hc_gallery :=  ;
13673: LD_ADDR_OWVAR 33
13677: PUSH
13678: LD_STRING 
13680: ST_TO_ADDR
// hc_name :=  ;
13681: LD_ADDR_OWVAR 26
13685: PUSH
13686: LD_STRING 
13688: ST_TO_ADDR
// un := CreateHuman ;
13689: LD_ADDR_VAR 0 2
13693: PUSH
13694: CALL_OW 44
13698: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13699: LD_VAR 0 2
13703: PPUSH
13704: LD_INT 1
13706: PPUSH
13707: CALL_OW 51
// tmp := tmp ^ un ;
13711: LD_ADDR_VAR 0 3
13715: PUSH
13716: LD_VAR 0 3
13720: PUSH
13721: LD_VAR 0 2
13725: ADD
13726: ST_TO_ADDR
// end ;
13727: GO 13623
13729: POP
13730: POP
// repeat wait ( 0 0$1 ) ;
13731: LD_INT 35
13733: PPUSH
13734: CALL_OW 67
// for un in tmp do
13738: LD_ADDR_VAR 0 2
13742: PUSH
13743: LD_VAR 0 3
13747: PUSH
13748: FOR_IN
13749: IFFALSE 13823
// begin if IsDead ( un ) then
13751: LD_VAR 0 2
13755: PPUSH
13756: CALL_OW 301
13760: IFFALSE 13780
// begin tmp := tmp diff un ;
13762: LD_ADDR_VAR 0 3
13766: PUSH
13767: LD_VAR 0 3
13771: PUSH
13772: LD_VAR 0 2
13776: DIFF
13777: ST_TO_ADDR
// continue ;
13778: GO 13748
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13780: LD_VAR 0 2
13784: PPUSH
13785: LD_INT 3
13787: PUSH
13788: LD_INT 22
13790: PUSH
13791: LD_INT 0
13793: PUSH
13794: EMPTY
13795: LIST
13796: LIST
13797: PUSH
13798: EMPTY
13799: LIST
13800: LIST
13801: PPUSH
13802: CALL_OW 69
13806: PPUSH
13807: LD_VAR 0 2
13811: PPUSH
13812: CALL_OW 74
13816: PPUSH
13817: CALL_OW 115
// end ;
13821: GO 13748
13823: POP
13824: POP
// until not tmp ;
13825: LD_VAR 0 3
13829: NOT
13830: IFFALSE 13731
// end ;
13832: PPOPN 3
13834: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13835: LD_EXP 27
13839: PUSH
13840: LD_EXP 52
13844: AND
13845: IFFALSE 13899
13847: GO 13849
13849: DISABLE
// begin ToLua ( displayTroll(); ) ;
13850: LD_STRING displayTroll();
13852: PPUSH
13853: CALL_OW 559
// wait ( 3 3$00 ) ;
13857: LD_INT 6300
13859: PPUSH
13860: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13864: LD_STRING hideTroll();
13866: PPUSH
13867: CALL_OW 559
// wait ( 1 1$00 ) ;
13871: LD_INT 2100
13873: PPUSH
13874: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13878: LD_STRING displayTroll();
13880: PPUSH
13881: CALL_OW 559
// wait ( 1 1$00 ) ;
13885: LD_INT 2100
13887: PPUSH
13888: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13892: LD_STRING hideTroll();
13894: PPUSH
13895: CALL_OW 559
// end ;
13899: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13900: LD_EXP 27
13904: PUSH
13905: LD_EXP 53
13909: AND
13910: IFFALSE 13973
13912: GO 13914
13914: DISABLE
13915: LD_INT 0
13917: PPUSH
// begin p := 0 ;
13918: LD_ADDR_VAR 0 1
13922: PUSH
13923: LD_INT 0
13925: ST_TO_ADDR
// repeat game_speed := 1 ;
13926: LD_ADDR_OWVAR 65
13930: PUSH
13931: LD_INT 1
13933: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13934: LD_INT 35
13936: PPUSH
13937: CALL_OW 67
// p := p + 1 ;
13941: LD_ADDR_VAR 0 1
13945: PUSH
13946: LD_VAR 0 1
13950: PUSH
13951: LD_INT 1
13953: PLUS
13954: ST_TO_ADDR
// until p >= 60 ;
13955: LD_VAR 0 1
13959: PUSH
13960: LD_INT 60
13962: GREATEREQUAL
13963: IFFALSE 13926
// game_speed := 4 ;
13965: LD_ADDR_OWVAR 65
13969: PUSH
13970: LD_INT 4
13972: ST_TO_ADDR
// end ;
13973: PPOPN 1
13975: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
13976: LD_EXP 27
13980: PUSH
13981: LD_EXP 54
13985: AND
13986: IFFALSE 14132
13988: GO 13990
13990: DISABLE
13991: LD_INT 0
13993: PPUSH
13994: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13995: LD_ADDR_VAR 0 1
13999: PUSH
14000: LD_INT 22
14002: PUSH
14003: LD_OWVAR 2
14007: PUSH
14008: EMPTY
14009: LIST
14010: LIST
14011: PUSH
14012: LD_INT 2
14014: PUSH
14015: LD_INT 30
14017: PUSH
14018: LD_INT 0
14020: PUSH
14021: EMPTY
14022: LIST
14023: LIST
14024: PUSH
14025: LD_INT 30
14027: PUSH
14028: LD_INT 1
14030: PUSH
14031: EMPTY
14032: LIST
14033: LIST
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: LIST
14039: PUSH
14040: EMPTY
14041: LIST
14042: LIST
14043: PPUSH
14044: CALL_OW 69
14048: ST_TO_ADDR
// if not depot then
14049: LD_VAR 0 1
14053: NOT
14054: IFFALSE 14058
// exit ;
14056: GO 14132
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
14058: LD_ADDR_VAR 0 2
14062: PUSH
14063: LD_VAR 0 1
14067: PUSH
14068: LD_INT 1
14070: PPUSH
14071: LD_VAR 0 1
14075: PPUSH
14076: CALL_OW 12
14080: ARRAY
14081: PPUSH
14082: CALL_OW 274
14086: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
14087: LD_VAR 0 2
14091: PPUSH
14092: LD_INT 1
14094: PPUSH
14095: LD_INT 0
14097: PPUSH
14098: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
14102: LD_VAR 0 2
14106: PPUSH
14107: LD_INT 2
14109: PPUSH
14110: LD_INT 0
14112: PPUSH
14113: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
14117: LD_VAR 0 2
14121: PPUSH
14122: LD_INT 3
14124: PPUSH
14125: LD_INT 0
14127: PPUSH
14128: CALL_OW 277
// end ;
14132: PPOPN 2
14134: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
14135: LD_EXP 27
14139: PUSH
14140: LD_EXP 55
14144: AND
14145: IFFALSE 14242
14147: GO 14149
14149: DISABLE
14150: LD_INT 0
14152: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14153: LD_ADDR_VAR 0 1
14157: PUSH
14158: LD_INT 22
14160: PUSH
14161: LD_OWVAR 2
14165: PUSH
14166: EMPTY
14167: LIST
14168: LIST
14169: PUSH
14170: LD_INT 21
14172: PUSH
14173: LD_INT 1
14175: PUSH
14176: EMPTY
14177: LIST
14178: LIST
14179: PUSH
14180: LD_INT 3
14182: PUSH
14183: LD_INT 23
14185: PUSH
14186: LD_INT 0
14188: PUSH
14189: EMPTY
14190: LIST
14191: LIST
14192: PUSH
14193: EMPTY
14194: LIST
14195: LIST
14196: PUSH
14197: EMPTY
14198: LIST
14199: LIST
14200: LIST
14201: PPUSH
14202: CALL_OW 69
14206: ST_TO_ADDR
// if not tmp then
14207: LD_VAR 0 1
14211: NOT
14212: IFFALSE 14216
// exit ;
14214: GO 14242
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
14216: LD_VAR 0 1
14220: PUSH
14221: LD_INT 1
14223: PPUSH
14224: LD_VAR 0 1
14228: PPUSH
14229: CALL_OW 12
14233: ARRAY
14234: PPUSH
14235: LD_INT 200
14237: PPUSH
14238: CALL_OW 234
// end ;
14242: PPOPN 1
14244: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14245: LD_EXP 27
14249: PUSH
14250: LD_EXP 56
14254: AND
14255: IFFALSE 14334
14257: GO 14259
14259: DISABLE
14260: LD_INT 0
14262: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14263: LD_ADDR_VAR 0 1
14267: PUSH
14268: LD_INT 22
14270: PUSH
14271: LD_OWVAR 2
14275: PUSH
14276: EMPTY
14277: LIST
14278: LIST
14279: PUSH
14280: LD_INT 21
14282: PUSH
14283: LD_INT 2
14285: PUSH
14286: EMPTY
14287: LIST
14288: LIST
14289: PUSH
14290: EMPTY
14291: LIST
14292: LIST
14293: PPUSH
14294: CALL_OW 69
14298: ST_TO_ADDR
// if not tmp then
14299: LD_VAR 0 1
14303: NOT
14304: IFFALSE 14308
// exit ;
14306: GO 14334
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14308: LD_VAR 0 1
14312: PUSH
14313: LD_INT 1
14315: PPUSH
14316: LD_VAR 0 1
14320: PPUSH
14321: CALL_OW 12
14325: ARRAY
14326: PPUSH
14327: LD_INT 60
14329: PPUSH
14330: CALL_OW 234
// end ;
14334: PPOPN 1
14336: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14337: LD_EXP 27
14341: PUSH
14342: LD_EXP 57
14346: AND
14347: IFFALSE 14446
14349: GO 14351
14351: DISABLE
14352: LD_INT 0
14354: PPUSH
14355: PPUSH
// begin enable ;
14356: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14357: LD_ADDR_VAR 0 1
14361: PUSH
14362: LD_INT 22
14364: PUSH
14365: LD_OWVAR 2
14369: PUSH
14370: EMPTY
14371: LIST
14372: LIST
14373: PUSH
14374: LD_INT 61
14376: PUSH
14377: EMPTY
14378: LIST
14379: PUSH
14380: LD_INT 33
14382: PUSH
14383: LD_INT 2
14385: PUSH
14386: EMPTY
14387: LIST
14388: LIST
14389: PUSH
14390: EMPTY
14391: LIST
14392: LIST
14393: LIST
14394: PPUSH
14395: CALL_OW 69
14399: ST_TO_ADDR
// if not tmp then
14400: LD_VAR 0 1
14404: NOT
14405: IFFALSE 14409
// exit ;
14407: GO 14446
// for i in tmp do
14409: LD_ADDR_VAR 0 2
14413: PUSH
14414: LD_VAR 0 1
14418: PUSH
14419: FOR_IN
14420: IFFALSE 14444
// if IsControledBy ( i ) then
14422: LD_VAR 0 2
14426: PPUSH
14427: CALL_OW 312
14431: IFFALSE 14442
// ComUnlink ( i ) ;
14433: LD_VAR 0 2
14437: PPUSH
14438: CALL_OW 136
14442: GO 14419
14444: POP
14445: POP
// end ;
14446: PPOPN 2
14448: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14449: LD_EXP 27
14453: PUSH
14454: LD_EXP 58
14458: AND
14459: IFFALSE 14599
14461: GO 14463
14463: DISABLE
14464: LD_INT 0
14466: PPUSH
14467: PPUSH
// begin ToLua ( displayPowell(); ) ;
14468: LD_STRING displayPowell();
14470: PPUSH
14471: CALL_OW 559
// uc_side := 0 ;
14475: LD_ADDR_OWVAR 20
14479: PUSH
14480: LD_INT 0
14482: ST_TO_ADDR
// uc_nation := 2 ;
14483: LD_ADDR_OWVAR 21
14487: PUSH
14488: LD_INT 2
14490: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14491: LD_ADDR_OWVAR 37
14495: PUSH
14496: LD_INT 14
14498: ST_TO_ADDR
// vc_engine := engine_siberite ;
14499: LD_ADDR_OWVAR 39
14503: PUSH
14504: LD_INT 3
14506: ST_TO_ADDR
// vc_control := control_apeman ;
14507: LD_ADDR_OWVAR 38
14511: PUSH
14512: LD_INT 5
14514: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
14515: LD_ADDR_OWVAR 40
14519: PUSH
14520: LD_INT 29
14522: ST_TO_ADDR
// un := CreateVehicle ;
14523: LD_ADDR_VAR 0 2
14527: PUSH
14528: CALL_OW 45
14532: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14533: LD_VAR 0 2
14537: PPUSH
14538: LD_INT 1
14540: PPUSH
14541: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14545: LD_INT 35
14547: PPUSH
14548: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14552: LD_VAR 0 2
14556: PPUSH
14557: LD_INT 22
14559: PUSH
14560: LD_OWVAR 2
14564: PUSH
14565: EMPTY
14566: LIST
14567: LIST
14568: PPUSH
14569: CALL_OW 69
14573: PPUSH
14574: LD_VAR 0 2
14578: PPUSH
14579: CALL_OW 74
14583: PPUSH
14584: CALL_OW 115
// until IsDead ( un ) ;
14588: LD_VAR 0 2
14592: PPUSH
14593: CALL_OW 301
14597: IFFALSE 14545
// end ;
14599: PPOPN 2
14601: END
// every 0 0$1 trigger StreamModeActive and sStu do
14602: LD_EXP 27
14606: PUSH
14607: LD_EXP 66
14611: AND
14612: IFFALSE 14628
14614: GO 14616
14616: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14617: LD_STRING displayStucuk();
14619: PPUSH
14620: CALL_OW 559
// ResetFog ;
14624: CALL_OW 335
// end ;
14628: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14629: LD_EXP 27
14633: PUSH
14634: LD_EXP 59
14638: AND
14639: IFFALSE 14780
14641: GO 14643
14643: DISABLE
14644: LD_INT 0
14646: PPUSH
14647: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14648: LD_ADDR_VAR 0 2
14652: PUSH
14653: LD_INT 22
14655: PUSH
14656: LD_OWVAR 2
14660: PUSH
14661: EMPTY
14662: LIST
14663: LIST
14664: PUSH
14665: LD_INT 21
14667: PUSH
14668: LD_INT 1
14670: PUSH
14671: EMPTY
14672: LIST
14673: LIST
14674: PUSH
14675: EMPTY
14676: LIST
14677: LIST
14678: PPUSH
14679: CALL_OW 69
14683: ST_TO_ADDR
// if not tmp then
14684: LD_VAR 0 2
14688: NOT
14689: IFFALSE 14693
// exit ;
14691: GO 14780
// un := tmp [ rand ( 1 , tmp ) ] ;
14693: LD_ADDR_VAR 0 1
14697: PUSH
14698: LD_VAR 0 2
14702: PUSH
14703: LD_INT 1
14705: PPUSH
14706: LD_VAR 0 2
14710: PPUSH
14711: CALL_OW 12
14715: ARRAY
14716: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14717: LD_VAR 0 1
14721: PPUSH
14722: LD_INT 0
14724: PPUSH
14725: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14729: LD_VAR 0 1
14733: PPUSH
14734: LD_OWVAR 3
14738: PUSH
14739: LD_VAR 0 1
14743: DIFF
14744: PPUSH
14745: LD_VAR 0 1
14749: PPUSH
14750: CALL_OW 74
14754: PPUSH
14755: CALL_OW 115
// wait ( 0 0$20 ) ;
14759: LD_INT 700
14761: PPUSH
14762: CALL_OW 67
// SetSide ( un , your_side ) ;
14766: LD_VAR 0 1
14770: PPUSH
14771: LD_OWVAR 2
14775: PPUSH
14776: CALL_OW 235
// end ;
14780: PPOPN 2
14782: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
14783: LD_EXP 27
14787: PUSH
14788: LD_EXP 60
14792: AND
14793: IFFALSE 14899
14795: GO 14797
14797: DISABLE
14798: LD_INT 0
14800: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14801: LD_ADDR_VAR 0 1
14805: PUSH
14806: LD_INT 22
14808: PUSH
14809: LD_OWVAR 2
14813: PUSH
14814: EMPTY
14815: LIST
14816: LIST
14817: PUSH
14818: LD_INT 2
14820: PUSH
14821: LD_INT 30
14823: PUSH
14824: LD_INT 0
14826: PUSH
14827: EMPTY
14828: LIST
14829: LIST
14830: PUSH
14831: LD_INT 30
14833: PUSH
14834: LD_INT 1
14836: PUSH
14837: EMPTY
14838: LIST
14839: LIST
14840: PUSH
14841: EMPTY
14842: LIST
14843: LIST
14844: LIST
14845: PUSH
14846: EMPTY
14847: LIST
14848: LIST
14849: PPUSH
14850: CALL_OW 69
14854: ST_TO_ADDR
// if not depot then
14855: LD_VAR 0 1
14859: NOT
14860: IFFALSE 14864
// exit ;
14862: GO 14899
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14864: LD_VAR 0 1
14868: PUSH
14869: LD_INT 1
14871: ARRAY
14872: PPUSH
14873: CALL_OW 250
14877: PPUSH
14878: LD_VAR 0 1
14882: PUSH
14883: LD_INT 1
14885: ARRAY
14886: PPUSH
14887: CALL_OW 251
14891: PPUSH
14892: LD_INT 70
14894: PPUSH
14895: CALL_OW 495
// end ;
14899: PPOPN 1
14901: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14902: LD_EXP 27
14906: PUSH
14907: LD_EXP 61
14911: AND
14912: IFFALSE 15123
14914: GO 14916
14916: DISABLE
14917: LD_INT 0
14919: PPUSH
14920: PPUSH
14921: PPUSH
14922: PPUSH
14923: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14924: LD_ADDR_VAR 0 5
14928: PUSH
14929: LD_INT 22
14931: PUSH
14932: LD_OWVAR 2
14936: PUSH
14937: EMPTY
14938: LIST
14939: LIST
14940: PUSH
14941: LD_INT 21
14943: PUSH
14944: LD_INT 1
14946: PUSH
14947: EMPTY
14948: LIST
14949: LIST
14950: PUSH
14951: EMPTY
14952: LIST
14953: LIST
14954: PPUSH
14955: CALL_OW 69
14959: ST_TO_ADDR
// if not tmp then
14960: LD_VAR 0 5
14964: NOT
14965: IFFALSE 14969
// exit ;
14967: GO 15123
// for i in tmp do
14969: LD_ADDR_VAR 0 1
14973: PUSH
14974: LD_VAR 0 5
14978: PUSH
14979: FOR_IN
14980: IFFALSE 15121
// begin d := rand ( 0 , 5 ) ;
14982: LD_ADDR_VAR 0 4
14986: PUSH
14987: LD_INT 0
14989: PPUSH
14990: LD_INT 5
14992: PPUSH
14993: CALL_OW 12
14997: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
14998: LD_ADDR_VAR 0 2
15002: PUSH
15003: LD_VAR 0 1
15007: PPUSH
15008: CALL_OW 250
15012: PPUSH
15013: LD_VAR 0 4
15017: PPUSH
15018: LD_INT 3
15020: PPUSH
15021: LD_INT 12
15023: PPUSH
15024: CALL_OW 12
15028: PPUSH
15029: CALL_OW 272
15033: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15034: LD_ADDR_VAR 0 3
15038: PUSH
15039: LD_VAR 0 1
15043: PPUSH
15044: CALL_OW 251
15048: PPUSH
15049: LD_VAR 0 4
15053: PPUSH
15054: LD_INT 3
15056: PPUSH
15057: LD_INT 12
15059: PPUSH
15060: CALL_OW 12
15064: PPUSH
15065: CALL_OW 273
15069: ST_TO_ADDR
// if ValidHex ( x , y ) then
15070: LD_VAR 0 2
15074: PPUSH
15075: LD_VAR 0 3
15079: PPUSH
15080: CALL_OW 488
15084: IFFALSE 15119
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
15086: LD_VAR 0 1
15090: PPUSH
15091: LD_VAR 0 2
15095: PPUSH
15096: LD_VAR 0 3
15100: PPUSH
15101: LD_INT 3
15103: PPUSH
15104: LD_INT 6
15106: PPUSH
15107: CALL_OW 12
15111: PPUSH
15112: LD_INT 1
15114: PPUSH
15115: CALL_OW 483
// end ;
15119: GO 14979
15121: POP
15122: POP
// end ;
15123: PPOPN 5
15125: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
15126: LD_EXP 27
15130: PUSH
15131: LD_EXP 62
15135: AND
15136: IFFALSE 15230
15138: GO 15140
15140: DISABLE
15141: LD_INT 0
15143: PPUSH
15144: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
15145: LD_ADDR_VAR 0 2
15149: PUSH
15150: LD_INT 22
15152: PUSH
15153: LD_OWVAR 2
15157: PUSH
15158: EMPTY
15159: LIST
15160: LIST
15161: PUSH
15162: LD_INT 32
15164: PUSH
15165: LD_INT 1
15167: PUSH
15168: EMPTY
15169: LIST
15170: LIST
15171: PUSH
15172: LD_INT 21
15174: PUSH
15175: LD_INT 2
15177: PUSH
15178: EMPTY
15179: LIST
15180: LIST
15181: PUSH
15182: EMPTY
15183: LIST
15184: LIST
15185: LIST
15186: PPUSH
15187: CALL_OW 69
15191: ST_TO_ADDR
// if not tmp then
15192: LD_VAR 0 2
15196: NOT
15197: IFFALSE 15201
// exit ;
15199: GO 15230
// for i in tmp do
15201: LD_ADDR_VAR 0 1
15205: PUSH
15206: LD_VAR 0 2
15210: PUSH
15211: FOR_IN
15212: IFFALSE 15228
// SetFuel ( i , 0 ) ;
15214: LD_VAR 0 1
15218: PPUSH
15219: LD_INT 0
15221: PPUSH
15222: CALL_OW 240
15226: GO 15211
15228: POP
15229: POP
// end ;
15230: PPOPN 2
15232: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
15233: LD_EXP 27
15237: PUSH
15238: LD_EXP 63
15242: AND
15243: IFFALSE 15309
15245: GO 15247
15247: DISABLE
15248: LD_INT 0
15250: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15251: LD_ADDR_VAR 0 1
15255: PUSH
15256: LD_INT 22
15258: PUSH
15259: LD_OWVAR 2
15263: PUSH
15264: EMPTY
15265: LIST
15266: LIST
15267: PUSH
15268: LD_INT 30
15270: PUSH
15271: LD_INT 29
15273: PUSH
15274: EMPTY
15275: LIST
15276: LIST
15277: PUSH
15278: EMPTY
15279: LIST
15280: LIST
15281: PPUSH
15282: CALL_OW 69
15286: ST_TO_ADDR
// if not tmp then
15287: LD_VAR 0 1
15291: NOT
15292: IFFALSE 15296
// exit ;
15294: GO 15309
// DestroyUnit ( tmp [ 1 ] ) ;
15296: LD_VAR 0 1
15300: PUSH
15301: LD_INT 1
15303: ARRAY
15304: PPUSH
15305: CALL_OW 65
// end ;
15309: PPOPN 1
15311: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
15312: LD_EXP 27
15316: PUSH
15317: LD_EXP 65
15321: AND
15322: IFFALSE 15451
15324: GO 15326
15326: DISABLE
15327: LD_INT 0
15329: PPUSH
// begin uc_side := 0 ;
15330: LD_ADDR_OWVAR 20
15334: PUSH
15335: LD_INT 0
15337: ST_TO_ADDR
// uc_nation := nation_arabian ;
15338: LD_ADDR_OWVAR 21
15342: PUSH
15343: LD_INT 2
15345: ST_TO_ADDR
// hc_gallery :=  ;
15346: LD_ADDR_OWVAR 33
15350: PUSH
15351: LD_STRING 
15353: ST_TO_ADDR
// hc_name :=  ;
15354: LD_ADDR_OWVAR 26
15358: PUSH
15359: LD_STRING 
15361: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
15362: LD_INT 1
15364: PPUSH
15365: LD_INT 11
15367: PPUSH
15368: LD_INT 10
15370: PPUSH
15371: CALL_OW 380
// un := CreateHuman ;
15375: LD_ADDR_VAR 0 1
15379: PUSH
15380: CALL_OW 44
15384: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15385: LD_VAR 0 1
15389: PPUSH
15390: LD_INT 1
15392: PPUSH
15393: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15397: LD_INT 35
15399: PPUSH
15400: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15404: LD_VAR 0 1
15408: PPUSH
15409: LD_INT 22
15411: PUSH
15412: LD_OWVAR 2
15416: PUSH
15417: EMPTY
15418: LIST
15419: LIST
15420: PPUSH
15421: CALL_OW 69
15425: PPUSH
15426: LD_VAR 0 1
15430: PPUSH
15431: CALL_OW 74
15435: PPUSH
15436: CALL_OW 115
// until IsDead ( un ) ;
15440: LD_VAR 0 1
15444: PPUSH
15445: CALL_OW 301
15449: IFFALSE 15397
// end ;
15451: PPOPN 1
15453: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15454: LD_EXP 27
15458: PUSH
15459: LD_EXP 67
15463: AND
15464: IFFALSE 15476
15466: GO 15468
15468: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15469: LD_STRING earthquake(getX(game), 0, 32)
15471: PPUSH
15472: CALL_OW 559
15476: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15477: LD_EXP 27
15481: PUSH
15482: LD_EXP 68
15486: AND
15487: IFFALSE 15578
15489: GO 15491
15491: DISABLE
15492: LD_INT 0
15494: PPUSH
// begin enable ;
15495: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15496: LD_ADDR_VAR 0 1
15500: PUSH
15501: LD_INT 22
15503: PUSH
15504: LD_OWVAR 2
15508: PUSH
15509: EMPTY
15510: LIST
15511: LIST
15512: PUSH
15513: LD_INT 21
15515: PUSH
15516: LD_INT 2
15518: PUSH
15519: EMPTY
15520: LIST
15521: LIST
15522: PUSH
15523: LD_INT 33
15525: PUSH
15526: LD_INT 3
15528: PUSH
15529: EMPTY
15530: LIST
15531: LIST
15532: PUSH
15533: EMPTY
15534: LIST
15535: LIST
15536: LIST
15537: PPUSH
15538: CALL_OW 69
15542: ST_TO_ADDR
// if not tmp then
15543: LD_VAR 0 1
15547: NOT
15548: IFFALSE 15552
// exit ;
15550: GO 15578
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15552: LD_VAR 0 1
15556: PUSH
15557: LD_INT 1
15559: PPUSH
15560: LD_VAR 0 1
15564: PPUSH
15565: CALL_OW 12
15569: ARRAY
15570: PPUSH
15571: LD_INT 1
15573: PPUSH
15574: CALL_OW 234
// end ;
15578: PPOPN 1
15580: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15581: LD_EXP 27
15585: PUSH
15586: LD_EXP 69
15590: AND
15591: IFFALSE 15732
15593: GO 15595
15595: DISABLE
15596: LD_INT 0
15598: PPUSH
15599: PPUSH
15600: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15601: LD_ADDR_VAR 0 3
15605: PUSH
15606: LD_INT 22
15608: PUSH
15609: LD_OWVAR 2
15613: PUSH
15614: EMPTY
15615: LIST
15616: LIST
15617: PUSH
15618: LD_INT 25
15620: PUSH
15621: LD_INT 1
15623: PUSH
15624: EMPTY
15625: LIST
15626: LIST
15627: PUSH
15628: EMPTY
15629: LIST
15630: LIST
15631: PPUSH
15632: CALL_OW 69
15636: ST_TO_ADDR
// if not tmp then
15637: LD_VAR 0 3
15641: NOT
15642: IFFALSE 15646
// exit ;
15644: GO 15732
// un := tmp [ rand ( 1 , tmp ) ] ;
15646: LD_ADDR_VAR 0 2
15650: PUSH
15651: LD_VAR 0 3
15655: PUSH
15656: LD_INT 1
15658: PPUSH
15659: LD_VAR 0 3
15663: PPUSH
15664: CALL_OW 12
15668: ARRAY
15669: ST_TO_ADDR
// if Crawls ( un ) then
15670: LD_VAR 0 2
15674: PPUSH
15675: CALL_OW 318
15679: IFFALSE 15690
// ComWalk ( un ) ;
15681: LD_VAR 0 2
15685: PPUSH
15686: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15690: LD_VAR 0 2
15694: PPUSH
15695: LD_INT 9
15697: PPUSH
15698: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15702: LD_INT 28
15704: PPUSH
15705: LD_OWVAR 2
15709: PPUSH
15710: LD_INT 2
15712: PPUSH
15713: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15717: LD_INT 29
15719: PPUSH
15720: LD_OWVAR 2
15724: PPUSH
15725: LD_INT 2
15727: PPUSH
15728: CALL_OW 322
// end ;
15732: PPOPN 3
15734: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15735: LD_EXP 27
15739: PUSH
15740: LD_EXP 70
15744: AND
15745: IFFALSE 15856
15747: GO 15749
15749: DISABLE
15750: LD_INT 0
15752: PPUSH
15753: PPUSH
15754: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15755: LD_ADDR_VAR 0 3
15759: PUSH
15760: LD_INT 22
15762: PUSH
15763: LD_OWVAR 2
15767: PUSH
15768: EMPTY
15769: LIST
15770: LIST
15771: PUSH
15772: LD_INT 25
15774: PUSH
15775: LD_INT 1
15777: PUSH
15778: EMPTY
15779: LIST
15780: LIST
15781: PUSH
15782: EMPTY
15783: LIST
15784: LIST
15785: PPUSH
15786: CALL_OW 69
15790: ST_TO_ADDR
// if not tmp then
15791: LD_VAR 0 3
15795: NOT
15796: IFFALSE 15800
// exit ;
15798: GO 15856
// un := tmp [ rand ( 1 , tmp ) ] ;
15800: LD_ADDR_VAR 0 2
15804: PUSH
15805: LD_VAR 0 3
15809: PUSH
15810: LD_INT 1
15812: PPUSH
15813: LD_VAR 0 3
15817: PPUSH
15818: CALL_OW 12
15822: ARRAY
15823: ST_TO_ADDR
// if Crawls ( un ) then
15824: LD_VAR 0 2
15828: PPUSH
15829: CALL_OW 318
15833: IFFALSE 15844
// ComWalk ( un ) ;
15835: LD_VAR 0 2
15839: PPUSH
15840: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15844: LD_VAR 0 2
15848: PPUSH
15849: LD_INT 8
15851: PPUSH
15852: CALL_OW 336
// end ;
15856: PPOPN 3
15858: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15859: LD_EXP 27
15863: PUSH
15864: LD_EXP 71
15868: AND
15869: IFFALSE 16013
15871: GO 15873
15873: DISABLE
15874: LD_INT 0
15876: PPUSH
15877: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15878: LD_ADDR_VAR 0 2
15882: PUSH
15883: LD_INT 22
15885: PUSH
15886: LD_OWVAR 2
15890: PUSH
15891: EMPTY
15892: LIST
15893: LIST
15894: PUSH
15895: LD_INT 21
15897: PUSH
15898: LD_INT 2
15900: PUSH
15901: EMPTY
15902: LIST
15903: LIST
15904: PUSH
15905: LD_INT 2
15907: PUSH
15908: LD_INT 34
15910: PUSH
15911: LD_INT 12
15913: PUSH
15914: EMPTY
15915: LIST
15916: LIST
15917: PUSH
15918: LD_INT 34
15920: PUSH
15921: LD_INT 51
15923: PUSH
15924: EMPTY
15925: LIST
15926: LIST
15927: PUSH
15928: LD_INT 34
15930: PUSH
15931: LD_INT 32
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: PUSH
15938: EMPTY
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: PUSH
15944: EMPTY
15945: LIST
15946: LIST
15947: LIST
15948: PPUSH
15949: CALL_OW 69
15953: ST_TO_ADDR
// if not tmp then
15954: LD_VAR 0 2
15958: NOT
15959: IFFALSE 15963
// exit ;
15961: GO 16013
// for i in tmp do
15963: LD_ADDR_VAR 0 1
15967: PUSH
15968: LD_VAR 0 2
15972: PUSH
15973: FOR_IN
15974: IFFALSE 16011
// if GetCargo ( i , mat_artifact ) = 0 then
15976: LD_VAR 0 1
15980: PPUSH
15981: LD_INT 4
15983: PPUSH
15984: CALL_OW 289
15988: PUSH
15989: LD_INT 0
15991: EQUAL
15992: IFFALSE 16009
// SetCargo ( i , mat_siberit , 100 ) ;
15994: LD_VAR 0 1
15998: PPUSH
15999: LD_INT 3
16001: PPUSH
16002: LD_INT 100
16004: PPUSH
16005: CALL_OW 290
16009: GO 15973
16011: POP
16012: POP
// end ;
16013: PPOPN 2
16015: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16016: LD_EXP 27
16020: PUSH
16021: LD_EXP 72
16025: AND
16026: IFFALSE 16209
16028: GO 16030
16030: DISABLE
16031: LD_INT 0
16033: PPUSH
16034: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16035: LD_ADDR_VAR 0 2
16039: PUSH
16040: LD_INT 22
16042: PUSH
16043: LD_OWVAR 2
16047: PUSH
16048: EMPTY
16049: LIST
16050: LIST
16051: PPUSH
16052: CALL_OW 69
16056: ST_TO_ADDR
// if not tmp then
16057: LD_VAR 0 2
16061: NOT
16062: IFFALSE 16066
// exit ;
16064: GO 16209
// for i := 1 to 2 do
16066: LD_ADDR_VAR 0 1
16070: PUSH
16071: DOUBLE
16072: LD_INT 1
16074: DEC
16075: ST_TO_ADDR
16076: LD_INT 2
16078: PUSH
16079: FOR_TO
16080: IFFALSE 16207
// begin uc_side := your_side ;
16082: LD_ADDR_OWVAR 20
16086: PUSH
16087: LD_OWVAR 2
16091: ST_TO_ADDR
// uc_nation := nation_american ;
16092: LD_ADDR_OWVAR 21
16096: PUSH
16097: LD_INT 1
16099: ST_TO_ADDR
// vc_chassis := us_morphling ;
16100: LD_ADDR_OWVAR 37
16104: PUSH
16105: LD_INT 5
16107: ST_TO_ADDR
// vc_engine := engine_siberite ;
16108: LD_ADDR_OWVAR 39
16112: PUSH
16113: LD_INT 3
16115: ST_TO_ADDR
// vc_control := control_computer ;
16116: LD_ADDR_OWVAR 38
16120: PUSH
16121: LD_INT 3
16123: ST_TO_ADDR
// vc_weapon := us_double_laser ;
16124: LD_ADDR_OWVAR 40
16128: PUSH
16129: LD_INT 10
16131: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
16132: LD_VAR 0 2
16136: PUSH
16137: LD_INT 1
16139: ARRAY
16140: PPUSH
16141: CALL_OW 310
16145: NOT
16146: IFFALSE 16193
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
16148: CALL_OW 45
16152: PPUSH
16153: LD_VAR 0 2
16157: PUSH
16158: LD_INT 1
16160: ARRAY
16161: PPUSH
16162: CALL_OW 250
16166: PPUSH
16167: LD_VAR 0 2
16171: PUSH
16172: LD_INT 1
16174: ARRAY
16175: PPUSH
16176: CALL_OW 251
16180: PPUSH
16181: LD_INT 12
16183: PPUSH
16184: LD_INT 1
16186: PPUSH
16187: CALL_OW 50
16191: GO 16205
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16193: CALL_OW 45
16197: PPUSH
16198: LD_INT 1
16200: PPUSH
16201: CALL_OW 51
// end ;
16205: GO 16079
16207: POP
16208: POP
// end ;
16209: PPOPN 2
16211: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
16212: LD_EXP 27
16216: PUSH
16217: LD_EXP 73
16221: AND
16222: IFFALSE 16444
16224: GO 16226
16226: DISABLE
16227: LD_INT 0
16229: PPUSH
16230: PPUSH
16231: PPUSH
16232: PPUSH
16233: PPUSH
16234: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16235: LD_ADDR_VAR 0 6
16239: PUSH
16240: LD_INT 22
16242: PUSH
16243: LD_OWVAR 2
16247: PUSH
16248: EMPTY
16249: LIST
16250: LIST
16251: PUSH
16252: LD_INT 21
16254: PUSH
16255: LD_INT 1
16257: PUSH
16258: EMPTY
16259: LIST
16260: LIST
16261: PUSH
16262: LD_INT 3
16264: PUSH
16265: LD_INT 23
16267: PUSH
16268: LD_INT 0
16270: PUSH
16271: EMPTY
16272: LIST
16273: LIST
16274: PUSH
16275: EMPTY
16276: LIST
16277: LIST
16278: PUSH
16279: EMPTY
16280: LIST
16281: LIST
16282: LIST
16283: PPUSH
16284: CALL_OW 69
16288: ST_TO_ADDR
// if not tmp then
16289: LD_VAR 0 6
16293: NOT
16294: IFFALSE 16298
// exit ;
16296: GO 16444
// s1 := rand ( 1 , 4 ) ;
16298: LD_ADDR_VAR 0 2
16302: PUSH
16303: LD_INT 1
16305: PPUSH
16306: LD_INT 4
16308: PPUSH
16309: CALL_OW 12
16313: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
16314: LD_ADDR_VAR 0 4
16318: PUSH
16319: LD_VAR 0 6
16323: PUSH
16324: LD_INT 1
16326: ARRAY
16327: PPUSH
16328: LD_VAR 0 2
16332: PPUSH
16333: CALL_OW 259
16337: ST_TO_ADDR
// if s1 = 1 then
16338: LD_VAR 0 2
16342: PUSH
16343: LD_INT 1
16345: EQUAL
16346: IFFALSE 16366
// s2 := rand ( 2 , 4 ) else
16348: LD_ADDR_VAR 0 3
16352: PUSH
16353: LD_INT 2
16355: PPUSH
16356: LD_INT 4
16358: PPUSH
16359: CALL_OW 12
16363: ST_TO_ADDR
16364: GO 16374
// s2 := 1 ;
16366: LD_ADDR_VAR 0 3
16370: PUSH
16371: LD_INT 1
16373: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
16374: LD_ADDR_VAR 0 5
16378: PUSH
16379: LD_VAR 0 6
16383: PUSH
16384: LD_INT 1
16386: ARRAY
16387: PPUSH
16388: LD_VAR 0 3
16392: PPUSH
16393: CALL_OW 259
16397: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
16398: LD_VAR 0 6
16402: PUSH
16403: LD_INT 1
16405: ARRAY
16406: PPUSH
16407: LD_VAR 0 2
16411: PPUSH
16412: LD_VAR 0 5
16416: PPUSH
16417: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16421: LD_VAR 0 6
16425: PUSH
16426: LD_INT 1
16428: ARRAY
16429: PPUSH
16430: LD_VAR 0 3
16434: PPUSH
16435: LD_VAR 0 4
16439: PPUSH
16440: CALL_OW 237
// end ;
16444: PPOPN 6
16446: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16447: LD_EXP 27
16451: PUSH
16452: LD_EXP 74
16456: AND
16457: IFFALSE 16536
16459: GO 16461
16461: DISABLE
16462: LD_INT 0
16464: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16465: LD_ADDR_VAR 0 1
16469: PUSH
16470: LD_INT 22
16472: PUSH
16473: LD_OWVAR 2
16477: PUSH
16478: EMPTY
16479: LIST
16480: LIST
16481: PUSH
16482: LD_INT 30
16484: PUSH
16485: LD_INT 3
16487: PUSH
16488: EMPTY
16489: LIST
16490: LIST
16491: PUSH
16492: EMPTY
16493: LIST
16494: LIST
16495: PPUSH
16496: CALL_OW 69
16500: ST_TO_ADDR
// if not tmp then
16501: LD_VAR 0 1
16505: NOT
16506: IFFALSE 16510
// exit ;
16508: GO 16536
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16510: LD_VAR 0 1
16514: PUSH
16515: LD_INT 1
16517: PPUSH
16518: LD_VAR 0 1
16522: PPUSH
16523: CALL_OW 12
16527: ARRAY
16528: PPUSH
16529: LD_INT 1
16531: PPUSH
16532: CALL_OW 234
// end ;
16536: PPOPN 1
16538: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
16539: LD_EXP 27
16543: PUSH
16544: LD_EXP 75
16548: AND
16549: IFFALSE 16661
16551: GO 16553
16553: DISABLE
16554: LD_INT 0
16556: PPUSH
16557: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
16558: LD_ADDR_VAR 0 2
16562: PUSH
16563: LD_INT 22
16565: PUSH
16566: LD_OWVAR 2
16570: PUSH
16571: EMPTY
16572: LIST
16573: LIST
16574: PUSH
16575: LD_INT 2
16577: PUSH
16578: LD_INT 30
16580: PUSH
16581: LD_INT 27
16583: PUSH
16584: EMPTY
16585: LIST
16586: LIST
16587: PUSH
16588: LD_INT 30
16590: PUSH
16591: LD_INT 26
16593: PUSH
16594: EMPTY
16595: LIST
16596: LIST
16597: PUSH
16598: LD_INT 30
16600: PUSH
16601: LD_INT 28
16603: PUSH
16604: EMPTY
16605: LIST
16606: LIST
16607: PUSH
16608: EMPTY
16609: LIST
16610: LIST
16611: LIST
16612: LIST
16613: PUSH
16614: EMPTY
16615: LIST
16616: LIST
16617: PPUSH
16618: CALL_OW 69
16622: ST_TO_ADDR
// if not tmp then
16623: LD_VAR 0 2
16627: NOT
16628: IFFALSE 16632
// exit ;
16630: GO 16661
// for i in tmp do
16632: LD_ADDR_VAR 0 1
16636: PUSH
16637: LD_VAR 0 2
16641: PUSH
16642: FOR_IN
16643: IFFALSE 16659
// SetLives ( i , 1 ) ;
16645: LD_VAR 0 1
16649: PPUSH
16650: LD_INT 1
16652: PPUSH
16653: CALL_OW 234
16657: GO 16642
16659: POP
16660: POP
// end ;
16661: PPOPN 2
16663: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16664: LD_EXP 27
16668: PUSH
16669: LD_EXP 76
16673: AND
16674: IFFALSE 16948
16676: GO 16678
16678: DISABLE
16679: LD_INT 0
16681: PPUSH
16682: PPUSH
16683: PPUSH
// begin i := rand ( 1 , 7 ) ;
16684: LD_ADDR_VAR 0 1
16688: PUSH
16689: LD_INT 1
16691: PPUSH
16692: LD_INT 7
16694: PPUSH
16695: CALL_OW 12
16699: ST_TO_ADDR
// case i of 1 :
16700: LD_VAR 0 1
16704: PUSH
16705: LD_INT 1
16707: DOUBLE
16708: EQUAL
16709: IFTRUE 16713
16711: GO 16723
16713: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16714: LD_STRING earthquake(getX(game), 0, 32)
16716: PPUSH
16717: CALL_OW 559
16721: GO 16948
16723: LD_INT 2
16725: DOUBLE
16726: EQUAL
16727: IFTRUE 16731
16729: GO 16745
16731: POP
// begin ToLua ( displayStucuk(); ) ;
16732: LD_STRING displayStucuk();
16734: PPUSH
16735: CALL_OW 559
// ResetFog ;
16739: CALL_OW 335
// end ; 3 :
16743: GO 16948
16745: LD_INT 3
16747: DOUBLE
16748: EQUAL
16749: IFTRUE 16753
16751: GO 16857
16753: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16754: LD_ADDR_VAR 0 2
16758: PUSH
16759: LD_INT 22
16761: PUSH
16762: LD_OWVAR 2
16766: PUSH
16767: EMPTY
16768: LIST
16769: LIST
16770: PUSH
16771: LD_INT 25
16773: PUSH
16774: LD_INT 1
16776: PUSH
16777: EMPTY
16778: LIST
16779: LIST
16780: PUSH
16781: EMPTY
16782: LIST
16783: LIST
16784: PPUSH
16785: CALL_OW 69
16789: ST_TO_ADDR
// if not tmp then
16790: LD_VAR 0 2
16794: NOT
16795: IFFALSE 16799
// exit ;
16797: GO 16948
// un := tmp [ rand ( 1 , tmp ) ] ;
16799: LD_ADDR_VAR 0 3
16803: PUSH
16804: LD_VAR 0 2
16808: PUSH
16809: LD_INT 1
16811: PPUSH
16812: LD_VAR 0 2
16816: PPUSH
16817: CALL_OW 12
16821: ARRAY
16822: ST_TO_ADDR
// if Crawls ( un ) then
16823: LD_VAR 0 3
16827: PPUSH
16828: CALL_OW 318
16832: IFFALSE 16843
// ComWalk ( un ) ;
16834: LD_VAR 0 3
16838: PPUSH
16839: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16843: LD_VAR 0 3
16847: PPUSH
16848: LD_INT 8
16850: PPUSH
16851: CALL_OW 336
// end ; 4 :
16855: GO 16948
16857: LD_INT 4
16859: DOUBLE
16860: EQUAL
16861: IFTRUE 16865
16863: GO 16926
16865: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16866: LD_ADDR_VAR 0 2
16870: PUSH
16871: LD_INT 22
16873: PUSH
16874: LD_OWVAR 2
16878: PUSH
16879: EMPTY
16880: LIST
16881: LIST
16882: PUSH
16883: LD_INT 30
16885: PUSH
16886: LD_INT 29
16888: PUSH
16889: EMPTY
16890: LIST
16891: LIST
16892: PUSH
16893: EMPTY
16894: LIST
16895: LIST
16896: PPUSH
16897: CALL_OW 69
16901: ST_TO_ADDR
// if not tmp then
16902: LD_VAR 0 2
16906: NOT
16907: IFFALSE 16911
// exit ;
16909: GO 16948
// DestroyUnit ( tmp [ 1 ] ) ;
16911: LD_VAR 0 2
16915: PUSH
16916: LD_INT 1
16918: ARRAY
16919: PPUSH
16920: CALL_OW 65
// end ; 5 .. 7 :
16924: GO 16948
16926: LD_INT 5
16928: DOUBLE
16929: GREATEREQUAL
16930: IFFALSE 16938
16932: LD_INT 7
16934: DOUBLE
16935: LESSEQUAL
16936: IFTRUE 16940
16938: GO 16947
16940: POP
// StreamSibBomb ; end ;
16941: CALL 13198 0 0
16945: GO 16948
16947: POP
// end ;
16948: PPOPN 3
16950: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
16951: LD_EXP 27
16955: PUSH
16956: LD_EXP 77
16960: AND
16961: IFFALSE 17117
16963: GO 16965
16965: DISABLE
16966: LD_INT 0
16968: PPUSH
16969: PPUSH
16970: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
16971: LD_ADDR_VAR 0 2
16975: PUSH
16976: LD_INT 81
16978: PUSH
16979: LD_OWVAR 2
16983: PUSH
16984: EMPTY
16985: LIST
16986: LIST
16987: PUSH
16988: LD_INT 2
16990: PUSH
16991: LD_INT 21
16993: PUSH
16994: LD_INT 1
16996: PUSH
16997: EMPTY
16998: LIST
16999: LIST
17000: PUSH
17001: LD_INT 21
17003: PUSH
17004: LD_INT 2
17006: PUSH
17007: EMPTY
17008: LIST
17009: LIST
17010: PUSH
17011: EMPTY
17012: LIST
17013: LIST
17014: LIST
17015: PUSH
17016: EMPTY
17017: LIST
17018: LIST
17019: PPUSH
17020: CALL_OW 69
17024: ST_TO_ADDR
// if not tmp then
17025: LD_VAR 0 2
17029: NOT
17030: IFFALSE 17034
// exit ;
17032: GO 17117
// p := 0 ;
17034: LD_ADDR_VAR 0 3
17038: PUSH
17039: LD_INT 0
17041: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17042: LD_INT 35
17044: PPUSH
17045: CALL_OW 67
// p := p + 1 ;
17049: LD_ADDR_VAR 0 3
17053: PUSH
17054: LD_VAR 0 3
17058: PUSH
17059: LD_INT 1
17061: PLUS
17062: ST_TO_ADDR
// for i in tmp do
17063: LD_ADDR_VAR 0 1
17067: PUSH
17068: LD_VAR 0 2
17072: PUSH
17073: FOR_IN
17074: IFFALSE 17105
// if GetLives ( i ) < 1000 then
17076: LD_VAR 0 1
17080: PPUSH
17081: CALL_OW 256
17085: PUSH
17086: LD_INT 1000
17088: LESS
17089: IFFALSE 17103
// SetLives ( i , 1000 ) ;
17091: LD_VAR 0 1
17095: PPUSH
17096: LD_INT 1000
17098: PPUSH
17099: CALL_OW 234
17103: GO 17073
17105: POP
17106: POP
// until p > 20 ;
17107: LD_VAR 0 3
17111: PUSH
17112: LD_INT 20
17114: GREATER
17115: IFFALSE 17042
// end ;
17117: PPOPN 3
17119: END
// every 0 0$1 trigger StreamModeActive and sTime do
17120: LD_EXP 27
17124: PUSH
17125: LD_EXP 78
17129: AND
17130: IFFALSE 17165
17132: GO 17134
17134: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
17135: LD_INT 28
17137: PPUSH
17138: LD_OWVAR 2
17142: PPUSH
17143: LD_INT 2
17145: PPUSH
17146: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
17150: LD_INT 30
17152: PPUSH
17153: LD_OWVAR 2
17157: PPUSH
17158: LD_INT 2
17160: PPUSH
17161: CALL_OW 322
// end ;
17165: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
17166: LD_EXP 27
17170: PUSH
17171: LD_EXP 79
17175: AND
17176: IFFALSE 17297
17178: GO 17180
17180: DISABLE
17181: LD_INT 0
17183: PPUSH
17184: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17185: LD_ADDR_VAR 0 2
17189: PUSH
17190: LD_INT 22
17192: PUSH
17193: LD_OWVAR 2
17197: PUSH
17198: EMPTY
17199: LIST
17200: LIST
17201: PUSH
17202: LD_INT 21
17204: PUSH
17205: LD_INT 1
17207: PUSH
17208: EMPTY
17209: LIST
17210: LIST
17211: PUSH
17212: LD_INT 3
17214: PUSH
17215: LD_INT 23
17217: PUSH
17218: LD_INT 0
17220: PUSH
17221: EMPTY
17222: LIST
17223: LIST
17224: PUSH
17225: EMPTY
17226: LIST
17227: LIST
17228: PUSH
17229: EMPTY
17230: LIST
17231: LIST
17232: LIST
17233: PPUSH
17234: CALL_OW 69
17238: ST_TO_ADDR
// if not tmp then
17239: LD_VAR 0 2
17243: NOT
17244: IFFALSE 17248
// exit ;
17246: GO 17297
// for i in tmp do
17248: LD_ADDR_VAR 0 1
17252: PUSH
17253: LD_VAR 0 2
17257: PUSH
17258: FOR_IN
17259: IFFALSE 17295
// begin if Crawls ( i ) then
17261: LD_VAR 0 1
17265: PPUSH
17266: CALL_OW 318
17270: IFFALSE 17281
// ComWalk ( i ) ;
17272: LD_VAR 0 1
17276: PPUSH
17277: CALL_OW 138
// SetClass ( i , 2 ) ;
17281: LD_VAR 0 1
17285: PPUSH
17286: LD_INT 2
17288: PPUSH
17289: CALL_OW 336
// end ;
17293: GO 17258
17295: POP
17296: POP
// end ;
17297: PPOPN 2
17299: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
17300: LD_EXP 27
17304: PUSH
17305: LD_EXP 80
17309: AND
17310: IFFALSE 17591
17312: GO 17314
17314: DISABLE
17315: LD_INT 0
17317: PPUSH
17318: PPUSH
17319: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
17320: LD_OWVAR 2
17324: PPUSH
17325: LD_INT 9
17327: PPUSH
17328: LD_INT 1
17330: PPUSH
17331: LD_INT 1
17333: PPUSH
17334: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
17338: LD_INT 9
17340: PPUSH
17341: LD_OWVAR 2
17345: PPUSH
17346: CALL_OW 343
// uc_side := 9 ;
17350: LD_ADDR_OWVAR 20
17354: PUSH
17355: LD_INT 9
17357: ST_TO_ADDR
// uc_nation := 2 ;
17358: LD_ADDR_OWVAR 21
17362: PUSH
17363: LD_INT 2
17365: ST_TO_ADDR
// hc_name := Dark Warrior ;
17366: LD_ADDR_OWVAR 26
17370: PUSH
17371: LD_STRING Dark Warrior
17373: ST_TO_ADDR
// hc_gallery :=  ;
17374: LD_ADDR_OWVAR 33
17378: PUSH
17379: LD_STRING 
17381: ST_TO_ADDR
// hc_noskilllimit := true ;
17382: LD_ADDR_OWVAR 76
17386: PUSH
17387: LD_INT 1
17389: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
17390: LD_ADDR_OWVAR 31
17394: PUSH
17395: LD_INT 30
17397: PUSH
17398: LD_INT 30
17400: PUSH
17401: LD_INT 30
17403: PUSH
17404: LD_INT 30
17406: PUSH
17407: EMPTY
17408: LIST
17409: LIST
17410: LIST
17411: LIST
17412: ST_TO_ADDR
// un := CreateHuman ;
17413: LD_ADDR_VAR 0 3
17417: PUSH
17418: CALL_OW 44
17422: ST_TO_ADDR
// hc_noskilllimit := false ;
17423: LD_ADDR_OWVAR 76
17427: PUSH
17428: LD_INT 0
17430: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17431: LD_VAR 0 3
17435: PPUSH
17436: LD_INT 1
17438: PPUSH
17439: CALL_OW 51
// p := 0 ;
17443: LD_ADDR_VAR 0 2
17447: PUSH
17448: LD_INT 0
17450: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17451: LD_INT 35
17453: PPUSH
17454: CALL_OW 67
// p := p + 1 ;
17458: LD_ADDR_VAR 0 2
17462: PUSH
17463: LD_VAR 0 2
17467: PUSH
17468: LD_INT 1
17470: PLUS
17471: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17472: LD_VAR 0 3
17476: PPUSH
17477: CALL_OW 256
17481: PUSH
17482: LD_INT 1000
17484: LESS
17485: IFFALSE 17499
// SetLives ( un , 1000 ) ;
17487: LD_VAR 0 3
17491: PPUSH
17492: LD_INT 1000
17494: PPUSH
17495: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
17499: LD_VAR 0 3
17503: PPUSH
17504: LD_INT 81
17506: PUSH
17507: LD_OWVAR 2
17511: PUSH
17512: EMPTY
17513: LIST
17514: LIST
17515: PUSH
17516: LD_INT 91
17518: PUSH
17519: LD_VAR 0 3
17523: PUSH
17524: LD_INT 30
17526: PUSH
17527: EMPTY
17528: LIST
17529: LIST
17530: LIST
17531: PUSH
17532: EMPTY
17533: LIST
17534: LIST
17535: PPUSH
17536: CALL_OW 69
17540: PPUSH
17541: LD_VAR 0 3
17545: PPUSH
17546: CALL_OW 74
17550: PPUSH
17551: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
17555: LD_VAR 0 2
17559: PUSH
17560: LD_INT 60
17562: GREATER
17563: PUSH
17564: LD_VAR 0 3
17568: PPUSH
17569: CALL_OW 301
17573: OR
17574: IFFALSE 17451
// if un then
17576: LD_VAR 0 3
17580: IFFALSE 17591
// RemoveUnit ( un ) ;
17582: LD_VAR 0 3
17586: PPUSH
17587: CALL_OW 64
// end ;
17591: PPOPN 3
17593: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17594: LD_INT 0
17596: PPUSH
// case cmd of 301 :
17597: LD_VAR 0 1
17601: PUSH
17602: LD_INT 301
17604: DOUBLE
17605: EQUAL
17606: IFTRUE 17610
17608: GO 17642
17610: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
17611: LD_VAR 0 6
17615: PPUSH
17616: LD_VAR 0 7
17620: PPUSH
17621: LD_VAR 0 8
17625: PPUSH
17626: LD_VAR 0 4
17630: PPUSH
17631: LD_VAR 0 5
17635: PPUSH
17636: CALL 18843 0 5
17640: GO 17763
17642: LD_INT 302
17644: DOUBLE
17645: EQUAL
17646: IFTRUE 17650
17648: GO 17687
17650: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
17651: LD_VAR 0 6
17655: PPUSH
17656: LD_VAR 0 7
17660: PPUSH
17661: LD_VAR 0 8
17665: PPUSH
17666: LD_VAR 0 9
17670: PPUSH
17671: LD_VAR 0 4
17675: PPUSH
17676: LD_VAR 0 5
17680: PPUSH
17681: CALL 18934 0 6
17685: GO 17763
17687: LD_INT 303
17689: DOUBLE
17690: EQUAL
17691: IFTRUE 17695
17693: GO 17732
17695: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
17696: LD_VAR 0 6
17700: PPUSH
17701: LD_VAR 0 7
17705: PPUSH
17706: LD_VAR 0 8
17710: PPUSH
17711: LD_VAR 0 9
17715: PPUSH
17716: LD_VAR 0 4
17720: PPUSH
17721: LD_VAR 0 5
17725: PPUSH
17726: CALL 17768 0 6
17730: GO 17763
17732: LD_INT 304
17734: DOUBLE
17735: EQUAL
17736: IFTRUE 17740
17738: GO 17762
17740: POP
// hHackTeleport ( unit , x , y ) ; end ;
17741: LD_VAR 0 2
17745: PPUSH
17746: LD_VAR 0 4
17750: PPUSH
17751: LD_VAR 0 5
17755: PPUSH
17756: CALL 19527 0 3
17760: GO 17763
17762: POP
// end ;
17763: LD_VAR 0 12
17767: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
17768: LD_INT 0
17770: PPUSH
17771: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
17772: LD_VAR 0 1
17776: PUSH
17777: LD_INT 1
17779: LESS
17780: PUSH
17781: LD_VAR 0 1
17785: PUSH
17786: LD_INT 3
17788: GREATER
17789: OR
17790: PUSH
17791: LD_VAR 0 5
17795: PPUSH
17796: LD_VAR 0 6
17800: PPUSH
17801: CALL_OW 428
17805: OR
17806: IFFALSE 17810
// exit ;
17808: GO 18530
// uc_side := your_side ;
17810: LD_ADDR_OWVAR 20
17814: PUSH
17815: LD_OWVAR 2
17819: ST_TO_ADDR
// uc_nation := nation ;
17820: LD_ADDR_OWVAR 21
17824: PUSH
17825: LD_VAR 0 1
17829: ST_TO_ADDR
// bc_level = 1 ;
17830: LD_ADDR_OWVAR 43
17834: PUSH
17835: LD_INT 1
17837: ST_TO_ADDR
// case btype of 1 :
17838: LD_VAR 0 2
17842: PUSH
17843: LD_INT 1
17845: DOUBLE
17846: EQUAL
17847: IFTRUE 17851
17849: GO 17862
17851: POP
// bc_type := b_depot ; 2 :
17852: LD_ADDR_OWVAR 42
17856: PUSH
17857: LD_INT 0
17859: ST_TO_ADDR
17860: GO 18474
17862: LD_INT 2
17864: DOUBLE
17865: EQUAL
17866: IFTRUE 17870
17868: GO 17881
17870: POP
// bc_type := b_warehouse ; 3 :
17871: LD_ADDR_OWVAR 42
17875: PUSH
17876: LD_INT 1
17878: ST_TO_ADDR
17879: GO 18474
17881: LD_INT 3
17883: DOUBLE
17884: EQUAL
17885: IFTRUE 17889
17887: GO 17900
17889: POP
// bc_type := b_lab ; 4 .. 9 :
17890: LD_ADDR_OWVAR 42
17894: PUSH
17895: LD_INT 6
17897: ST_TO_ADDR
17898: GO 18474
17900: LD_INT 4
17902: DOUBLE
17903: GREATEREQUAL
17904: IFFALSE 17912
17906: LD_INT 9
17908: DOUBLE
17909: LESSEQUAL
17910: IFTRUE 17914
17912: GO 17966
17914: POP
// begin bc_type := b_lab_half ;
17915: LD_ADDR_OWVAR 42
17919: PUSH
17920: LD_INT 7
17922: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
17923: LD_ADDR_OWVAR 44
17927: PUSH
17928: LD_INT 10
17930: PUSH
17931: LD_INT 11
17933: PUSH
17934: LD_INT 12
17936: PUSH
17937: LD_INT 15
17939: PUSH
17940: LD_INT 14
17942: PUSH
17943: LD_INT 13
17945: PUSH
17946: EMPTY
17947: LIST
17948: LIST
17949: LIST
17950: LIST
17951: LIST
17952: LIST
17953: PUSH
17954: LD_VAR 0 2
17958: PUSH
17959: LD_INT 3
17961: MINUS
17962: ARRAY
17963: ST_TO_ADDR
// end ; 10 .. 13 :
17964: GO 18474
17966: LD_INT 10
17968: DOUBLE
17969: GREATEREQUAL
17970: IFFALSE 17978
17972: LD_INT 13
17974: DOUBLE
17975: LESSEQUAL
17976: IFTRUE 17980
17978: GO 18057
17980: POP
// begin bc_type := b_lab_full ;
17981: LD_ADDR_OWVAR 42
17985: PUSH
17986: LD_INT 8
17988: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
17989: LD_ADDR_OWVAR 44
17993: PUSH
17994: LD_INT 10
17996: PUSH
17997: LD_INT 12
17999: PUSH
18000: LD_INT 14
18002: PUSH
18003: LD_INT 13
18005: PUSH
18006: EMPTY
18007: LIST
18008: LIST
18009: LIST
18010: LIST
18011: PUSH
18012: LD_VAR 0 2
18016: PUSH
18017: LD_INT 9
18019: MINUS
18020: ARRAY
18021: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
18022: LD_ADDR_OWVAR 45
18026: PUSH
18027: LD_INT 11
18029: PUSH
18030: LD_INT 15
18032: PUSH
18033: LD_INT 12
18035: PUSH
18036: LD_INT 15
18038: PUSH
18039: EMPTY
18040: LIST
18041: LIST
18042: LIST
18043: LIST
18044: PUSH
18045: LD_VAR 0 2
18049: PUSH
18050: LD_INT 9
18052: MINUS
18053: ARRAY
18054: ST_TO_ADDR
// end ; 14 :
18055: GO 18474
18057: LD_INT 14
18059: DOUBLE
18060: EQUAL
18061: IFTRUE 18065
18063: GO 18076
18065: POP
// bc_type := b_workshop ; 15 :
18066: LD_ADDR_OWVAR 42
18070: PUSH
18071: LD_INT 2
18073: ST_TO_ADDR
18074: GO 18474
18076: LD_INT 15
18078: DOUBLE
18079: EQUAL
18080: IFTRUE 18084
18082: GO 18095
18084: POP
// bc_type := b_factory ; 16 :
18085: LD_ADDR_OWVAR 42
18089: PUSH
18090: LD_INT 3
18092: ST_TO_ADDR
18093: GO 18474
18095: LD_INT 16
18097: DOUBLE
18098: EQUAL
18099: IFTRUE 18103
18101: GO 18114
18103: POP
// bc_type := b_ext_gun ; 17 :
18104: LD_ADDR_OWVAR 42
18108: PUSH
18109: LD_INT 17
18111: ST_TO_ADDR
18112: GO 18474
18114: LD_INT 17
18116: DOUBLE
18117: EQUAL
18118: IFTRUE 18122
18120: GO 18150
18122: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
18123: LD_ADDR_OWVAR 42
18127: PUSH
18128: LD_INT 19
18130: PUSH
18131: LD_INT 23
18133: PUSH
18134: LD_INT 19
18136: PUSH
18137: EMPTY
18138: LIST
18139: LIST
18140: LIST
18141: PUSH
18142: LD_VAR 0 1
18146: ARRAY
18147: ST_TO_ADDR
18148: GO 18474
18150: LD_INT 18
18152: DOUBLE
18153: EQUAL
18154: IFTRUE 18158
18156: GO 18169
18158: POP
// bc_type := b_ext_radar ; 19 :
18159: LD_ADDR_OWVAR 42
18163: PUSH
18164: LD_INT 20
18166: ST_TO_ADDR
18167: GO 18474
18169: LD_INT 19
18171: DOUBLE
18172: EQUAL
18173: IFTRUE 18177
18175: GO 18188
18177: POP
// bc_type := b_ext_radio ; 20 :
18178: LD_ADDR_OWVAR 42
18182: PUSH
18183: LD_INT 22
18185: ST_TO_ADDR
18186: GO 18474
18188: LD_INT 20
18190: DOUBLE
18191: EQUAL
18192: IFTRUE 18196
18194: GO 18207
18196: POP
// bc_type := b_ext_siberium ; 21 :
18197: LD_ADDR_OWVAR 42
18201: PUSH
18202: LD_INT 21
18204: ST_TO_ADDR
18205: GO 18474
18207: LD_INT 21
18209: DOUBLE
18210: EQUAL
18211: IFTRUE 18215
18213: GO 18226
18215: POP
// bc_type := b_ext_computer ; 22 :
18216: LD_ADDR_OWVAR 42
18220: PUSH
18221: LD_INT 24
18223: ST_TO_ADDR
18224: GO 18474
18226: LD_INT 22
18228: DOUBLE
18229: EQUAL
18230: IFTRUE 18234
18232: GO 18245
18234: POP
// bc_type := b_ext_track ; 23 :
18235: LD_ADDR_OWVAR 42
18239: PUSH
18240: LD_INT 16
18242: ST_TO_ADDR
18243: GO 18474
18245: LD_INT 23
18247: DOUBLE
18248: EQUAL
18249: IFTRUE 18253
18251: GO 18264
18253: POP
// bc_type := b_ext_laser ; 24 :
18254: LD_ADDR_OWVAR 42
18258: PUSH
18259: LD_INT 25
18261: ST_TO_ADDR
18262: GO 18474
18264: LD_INT 24
18266: DOUBLE
18267: EQUAL
18268: IFTRUE 18272
18270: GO 18283
18272: POP
// bc_type := b_control_tower ; 25 :
18273: LD_ADDR_OWVAR 42
18277: PUSH
18278: LD_INT 36
18280: ST_TO_ADDR
18281: GO 18474
18283: LD_INT 25
18285: DOUBLE
18286: EQUAL
18287: IFTRUE 18291
18289: GO 18302
18291: POP
// bc_type := b_breastwork ; 26 :
18292: LD_ADDR_OWVAR 42
18296: PUSH
18297: LD_INT 31
18299: ST_TO_ADDR
18300: GO 18474
18302: LD_INT 26
18304: DOUBLE
18305: EQUAL
18306: IFTRUE 18310
18308: GO 18321
18310: POP
// bc_type := b_bunker ; 27 :
18311: LD_ADDR_OWVAR 42
18315: PUSH
18316: LD_INT 32
18318: ST_TO_ADDR
18319: GO 18474
18321: LD_INT 27
18323: DOUBLE
18324: EQUAL
18325: IFTRUE 18329
18327: GO 18340
18329: POP
// bc_type := b_turret ; 28 :
18330: LD_ADDR_OWVAR 42
18334: PUSH
18335: LD_INT 33
18337: ST_TO_ADDR
18338: GO 18474
18340: LD_INT 28
18342: DOUBLE
18343: EQUAL
18344: IFTRUE 18348
18346: GO 18359
18348: POP
// bc_type := b_armoury ; 29 :
18349: LD_ADDR_OWVAR 42
18353: PUSH
18354: LD_INT 4
18356: ST_TO_ADDR
18357: GO 18474
18359: LD_INT 29
18361: DOUBLE
18362: EQUAL
18363: IFTRUE 18367
18365: GO 18378
18367: POP
// bc_type := b_barracks ; 30 :
18368: LD_ADDR_OWVAR 42
18372: PUSH
18373: LD_INT 5
18375: ST_TO_ADDR
18376: GO 18474
18378: LD_INT 30
18380: DOUBLE
18381: EQUAL
18382: IFTRUE 18386
18384: GO 18397
18386: POP
// bc_type := b_solar_power ; 31 :
18387: LD_ADDR_OWVAR 42
18391: PUSH
18392: LD_INT 27
18394: ST_TO_ADDR
18395: GO 18474
18397: LD_INT 31
18399: DOUBLE
18400: EQUAL
18401: IFTRUE 18405
18403: GO 18416
18405: POP
// bc_type := b_oil_power ; 32 :
18406: LD_ADDR_OWVAR 42
18410: PUSH
18411: LD_INT 26
18413: ST_TO_ADDR
18414: GO 18474
18416: LD_INT 32
18418: DOUBLE
18419: EQUAL
18420: IFTRUE 18424
18422: GO 18435
18424: POP
// bc_type := b_siberite_power ; 33 :
18425: LD_ADDR_OWVAR 42
18429: PUSH
18430: LD_INT 28
18432: ST_TO_ADDR
18433: GO 18474
18435: LD_INT 33
18437: DOUBLE
18438: EQUAL
18439: IFTRUE 18443
18441: GO 18454
18443: POP
// bc_type := b_oil_mine ; 34 :
18444: LD_ADDR_OWVAR 42
18448: PUSH
18449: LD_INT 29
18451: ST_TO_ADDR
18452: GO 18474
18454: LD_INT 34
18456: DOUBLE
18457: EQUAL
18458: IFTRUE 18462
18460: GO 18473
18462: POP
// bc_type := b_siberite_mine ; end ;
18463: LD_ADDR_OWVAR 42
18467: PUSH
18468: LD_INT 30
18470: ST_TO_ADDR
18471: GO 18474
18473: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
18474: LD_ADDR_VAR 0 8
18478: PUSH
18479: LD_VAR 0 5
18483: PPUSH
18484: LD_VAR 0 6
18488: PPUSH
18489: LD_VAR 0 3
18493: PPUSH
18494: CALL_OW 47
18498: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
18499: LD_OWVAR 42
18503: PUSH
18504: LD_INT 32
18506: PUSH
18507: LD_INT 33
18509: PUSH
18510: EMPTY
18511: LIST
18512: LIST
18513: IN
18514: IFFALSE 18530
// PlaceWeaponTurret ( b , weapon ) ;
18516: LD_VAR 0 8
18520: PPUSH
18521: LD_VAR 0 4
18525: PPUSH
18526: CALL_OW 431
// end ;
18530: LD_VAR 0 7
18534: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
18535: LD_INT 0
18537: PPUSH
18538: PPUSH
18539: PPUSH
18540: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18541: LD_ADDR_VAR 0 4
18545: PUSH
18546: LD_INT 22
18548: PUSH
18549: LD_OWVAR 2
18553: PUSH
18554: EMPTY
18555: LIST
18556: LIST
18557: PUSH
18558: LD_INT 2
18560: PUSH
18561: LD_INT 30
18563: PUSH
18564: LD_INT 0
18566: PUSH
18567: EMPTY
18568: LIST
18569: LIST
18570: PUSH
18571: LD_INT 30
18573: PUSH
18574: LD_INT 1
18576: PUSH
18577: EMPTY
18578: LIST
18579: LIST
18580: PUSH
18581: EMPTY
18582: LIST
18583: LIST
18584: LIST
18585: PUSH
18586: EMPTY
18587: LIST
18588: LIST
18589: PPUSH
18590: CALL_OW 69
18594: ST_TO_ADDR
// if not tmp then
18595: LD_VAR 0 4
18599: NOT
18600: IFFALSE 18604
// exit ;
18602: GO 18663
// for i in tmp do
18604: LD_ADDR_VAR 0 2
18608: PUSH
18609: LD_VAR 0 4
18613: PUSH
18614: FOR_IN
18615: IFFALSE 18661
// for j = 1 to 3 do
18617: LD_ADDR_VAR 0 3
18621: PUSH
18622: DOUBLE
18623: LD_INT 1
18625: DEC
18626: ST_TO_ADDR
18627: LD_INT 3
18629: PUSH
18630: FOR_TO
18631: IFFALSE 18657
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
18633: LD_VAR 0 2
18637: PPUSH
18638: CALL_OW 274
18642: PPUSH
18643: LD_VAR 0 3
18647: PPUSH
18648: LD_INT 99999
18650: PPUSH
18651: CALL_OW 277
18655: GO 18630
18657: POP
18658: POP
18659: GO 18614
18661: POP
18662: POP
// end ;
18663: LD_VAR 0 1
18667: RET
// export function hHackSetLevel10 ; var i , j ; begin
18668: LD_INT 0
18670: PPUSH
18671: PPUSH
18672: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18673: LD_ADDR_VAR 0 2
18677: PUSH
18678: LD_INT 21
18680: PUSH
18681: LD_INT 1
18683: PUSH
18684: EMPTY
18685: LIST
18686: LIST
18687: PPUSH
18688: CALL_OW 69
18692: PUSH
18693: FOR_IN
18694: IFFALSE 18746
// if IsSelected ( i ) then
18696: LD_VAR 0 2
18700: PPUSH
18701: CALL_OW 306
18705: IFFALSE 18744
// begin for j := 1 to 4 do
18707: LD_ADDR_VAR 0 3
18711: PUSH
18712: DOUBLE
18713: LD_INT 1
18715: DEC
18716: ST_TO_ADDR
18717: LD_INT 4
18719: PUSH
18720: FOR_TO
18721: IFFALSE 18742
// SetSkill ( i , j , 10 ) ;
18723: LD_VAR 0 2
18727: PPUSH
18728: LD_VAR 0 3
18732: PPUSH
18733: LD_INT 10
18735: PPUSH
18736: CALL_OW 237
18740: GO 18720
18742: POP
18743: POP
// end ;
18744: GO 18693
18746: POP
18747: POP
// end ;
18748: LD_VAR 0 1
18752: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
18753: LD_INT 0
18755: PPUSH
18756: PPUSH
18757: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
18758: LD_ADDR_VAR 0 2
18762: PUSH
18763: LD_INT 22
18765: PUSH
18766: LD_OWVAR 2
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: PUSH
18775: LD_INT 21
18777: PUSH
18778: LD_INT 1
18780: PUSH
18781: EMPTY
18782: LIST
18783: LIST
18784: PUSH
18785: EMPTY
18786: LIST
18787: LIST
18788: PPUSH
18789: CALL_OW 69
18793: PUSH
18794: FOR_IN
18795: IFFALSE 18836
// begin for j := 1 to 4 do
18797: LD_ADDR_VAR 0 3
18801: PUSH
18802: DOUBLE
18803: LD_INT 1
18805: DEC
18806: ST_TO_ADDR
18807: LD_INT 4
18809: PUSH
18810: FOR_TO
18811: IFFALSE 18832
// SetSkill ( i , j , 10 ) ;
18813: LD_VAR 0 2
18817: PPUSH
18818: LD_VAR 0 3
18822: PPUSH
18823: LD_INT 10
18825: PPUSH
18826: CALL_OW 237
18830: GO 18810
18832: POP
18833: POP
// end ;
18834: GO 18794
18836: POP
18837: POP
// end ;
18838: LD_VAR 0 1
18842: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
18843: LD_INT 0
18845: PPUSH
// uc_side := your_side ;
18846: LD_ADDR_OWVAR 20
18850: PUSH
18851: LD_OWVAR 2
18855: ST_TO_ADDR
// uc_nation := nation ;
18856: LD_ADDR_OWVAR 21
18860: PUSH
18861: LD_VAR 0 1
18865: ST_TO_ADDR
// InitHc ;
18866: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
18870: LD_INT 0
18872: PPUSH
18873: LD_VAR 0 2
18877: PPUSH
18878: LD_VAR 0 3
18882: PPUSH
18883: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
18887: LD_VAR 0 4
18891: PPUSH
18892: LD_VAR 0 5
18896: PPUSH
18897: CALL_OW 428
18901: PUSH
18902: LD_INT 0
18904: EQUAL
18905: IFFALSE 18929
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
18907: CALL_OW 44
18911: PPUSH
18912: LD_VAR 0 4
18916: PPUSH
18917: LD_VAR 0 5
18921: PPUSH
18922: LD_INT 1
18924: PPUSH
18925: CALL_OW 48
// end ;
18929: LD_VAR 0 6
18933: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
18934: LD_INT 0
18936: PPUSH
18937: PPUSH
// uc_side := your_side ;
18938: LD_ADDR_OWVAR 20
18942: PUSH
18943: LD_OWVAR 2
18947: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
18948: LD_VAR 0 1
18952: PUSH
18953: LD_INT 1
18955: PUSH
18956: LD_INT 2
18958: PUSH
18959: LD_INT 3
18961: PUSH
18962: LD_INT 4
18964: PUSH
18965: LD_INT 5
18967: PUSH
18968: EMPTY
18969: LIST
18970: LIST
18971: LIST
18972: LIST
18973: LIST
18974: IN
18975: IFFALSE 18987
// uc_nation := nation_american else
18977: LD_ADDR_OWVAR 21
18981: PUSH
18982: LD_INT 1
18984: ST_TO_ADDR
18985: GO 19030
// if chassis in [ 11 , 12 , 13 , 14 ] then
18987: LD_VAR 0 1
18991: PUSH
18992: LD_INT 11
18994: PUSH
18995: LD_INT 12
18997: PUSH
18998: LD_INT 13
19000: PUSH
19001: LD_INT 14
19003: PUSH
19004: EMPTY
19005: LIST
19006: LIST
19007: LIST
19008: LIST
19009: IN
19010: IFFALSE 19022
// uc_nation := nation_arabian else
19012: LD_ADDR_OWVAR 21
19016: PUSH
19017: LD_INT 2
19019: ST_TO_ADDR
19020: GO 19030
// uc_nation := nation_russian ;
19022: LD_ADDR_OWVAR 21
19026: PUSH
19027: LD_INT 3
19029: ST_TO_ADDR
// vc_chassis := chassis ;
19030: LD_ADDR_OWVAR 37
19034: PUSH
19035: LD_VAR 0 1
19039: ST_TO_ADDR
// vc_engine := engine ;
19040: LD_ADDR_OWVAR 39
19044: PUSH
19045: LD_VAR 0 2
19049: ST_TO_ADDR
// vc_control := control ;
19050: LD_ADDR_OWVAR 38
19054: PUSH
19055: LD_VAR 0 3
19059: ST_TO_ADDR
// vc_weapon := weapon ;
19060: LD_ADDR_OWVAR 40
19064: PUSH
19065: LD_VAR 0 4
19069: ST_TO_ADDR
// un := CreateVehicle ;
19070: LD_ADDR_VAR 0 8
19074: PUSH
19075: CALL_OW 45
19079: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
19080: LD_VAR 0 8
19084: PPUSH
19085: LD_INT 0
19087: PPUSH
19088: LD_INT 5
19090: PPUSH
19091: CALL_OW 12
19095: PPUSH
19096: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
19100: LD_VAR 0 8
19104: PPUSH
19105: LD_VAR 0 5
19109: PPUSH
19110: LD_VAR 0 6
19114: PPUSH
19115: LD_INT 1
19117: PPUSH
19118: CALL_OW 48
// end ;
19122: LD_VAR 0 7
19126: RET
// export hInvincible ; every 1 do
19127: GO 19129
19129: DISABLE
// hInvincible := [ ] ;
19130: LD_ADDR_EXP 81
19134: PUSH
19135: EMPTY
19136: ST_TO_ADDR
19137: END
// every 10 do var i ;
19138: GO 19140
19140: DISABLE
19141: LD_INT 0
19143: PPUSH
// begin enable ;
19144: ENABLE
// if not hInvincible then
19145: LD_EXP 81
19149: NOT
19150: IFFALSE 19154
// exit ;
19152: GO 19198
// for i in hInvincible do
19154: LD_ADDR_VAR 0 1
19158: PUSH
19159: LD_EXP 81
19163: PUSH
19164: FOR_IN
19165: IFFALSE 19196
// if GetLives ( i ) < 1000 then
19167: LD_VAR 0 1
19171: PPUSH
19172: CALL_OW 256
19176: PUSH
19177: LD_INT 1000
19179: LESS
19180: IFFALSE 19194
// SetLives ( i , 1000 ) ;
19182: LD_VAR 0 1
19186: PPUSH
19187: LD_INT 1000
19189: PPUSH
19190: CALL_OW 234
19194: GO 19164
19196: POP
19197: POP
// end ;
19198: PPOPN 1
19200: END
// export function hHackInvincible ; var i ; begin
19201: LD_INT 0
19203: PPUSH
19204: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
19205: LD_ADDR_VAR 0 2
19209: PUSH
19210: LD_INT 2
19212: PUSH
19213: LD_INT 21
19215: PUSH
19216: LD_INT 1
19218: PUSH
19219: EMPTY
19220: LIST
19221: LIST
19222: PUSH
19223: LD_INT 21
19225: PUSH
19226: LD_INT 2
19228: PUSH
19229: EMPTY
19230: LIST
19231: LIST
19232: PUSH
19233: EMPTY
19234: LIST
19235: LIST
19236: LIST
19237: PPUSH
19238: CALL_OW 69
19242: PUSH
19243: FOR_IN
19244: IFFALSE 19305
// if IsSelected ( i ) then
19246: LD_VAR 0 2
19250: PPUSH
19251: CALL_OW 306
19255: IFFALSE 19303
// begin if i in hInvincible then
19257: LD_VAR 0 2
19261: PUSH
19262: LD_EXP 81
19266: IN
19267: IFFALSE 19287
// hInvincible := hInvincible diff i else
19269: LD_ADDR_EXP 81
19273: PUSH
19274: LD_EXP 81
19278: PUSH
19279: LD_VAR 0 2
19283: DIFF
19284: ST_TO_ADDR
19285: GO 19303
// hInvincible := hInvincible union i ;
19287: LD_ADDR_EXP 81
19291: PUSH
19292: LD_EXP 81
19296: PUSH
19297: LD_VAR 0 2
19301: UNION
19302: ST_TO_ADDR
// end ;
19303: GO 19243
19305: POP
19306: POP
// end ;
19307: LD_VAR 0 1
19311: RET
// export function hHackInvisible ; var i , j ; begin
19312: LD_INT 0
19314: PPUSH
19315: PPUSH
19316: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19317: LD_ADDR_VAR 0 2
19321: PUSH
19322: LD_INT 21
19324: PUSH
19325: LD_INT 1
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: PPUSH
19332: CALL_OW 69
19336: PUSH
19337: FOR_IN
19338: IFFALSE 19362
// if IsSelected ( i ) then
19340: LD_VAR 0 2
19344: PPUSH
19345: CALL_OW 306
19349: IFFALSE 19360
// ComForceInvisible ( i ) ;
19351: LD_VAR 0 2
19355: PPUSH
19356: CALL_OW 496
19360: GO 19337
19362: POP
19363: POP
// end ;
19364: LD_VAR 0 1
19368: RET
// export function hHackChangeYourSide ; begin
19369: LD_INT 0
19371: PPUSH
// if your_side = 8 then
19372: LD_OWVAR 2
19376: PUSH
19377: LD_INT 8
19379: EQUAL
19380: IFFALSE 19392
// your_side := 0 else
19382: LD_ADDR_OWVAR 2
19386: PUSH
19387: LD_INT 0
19389: ST_TO_ADDR
19390: GO 19406
// your_side := your_side + 1 ;
19392: LD_ADDR_OWVAR 2
19396: PUSH
19397: LD_OWVAR 2
19401: PUSH
19402: LD_INT 1
19404: PLUS
19405: ST_TO_ADDR
// end ;
19406: LD_VAR 0 1
19410: RET
// export function hHackChangeUnitSide ; var i , j ; begin
19411: LD_INT 0
19413: PPUSH
19414: PPUSH
19415: PPUSH
// for i in all_units do
19416: LD_ADDR_VAR 0 2
19420: PUSH
19421: LD_OWVAR 3
19425: PUSH
19426: FOR_IN
19427: IFFALSE 19505
// if IsSelected ( i ) then
19429: LD_VAR 0 2
19433: PPUSH
19434: CALL_OW 306
19438: IFFALSE 19503
// begin j := GetSide ( i ) ;
19440: LD_ADDR_VAR 0 3
19444: PUSH
19445: LD_VAR 0 2
19449: PPUSH
19450: CALL_OW 255
19454: ST_TO_ADDR
// if j = 8 then
19455: LD_VAR 0 3
19459: PUSH
19460: LD_INT 8
19462: EQUAL
19463: IFFALSE 19475
// j := 0 else
19465: LD_ADDR_VAR 0 3
19469: PUSH
19470: LD_INT 0
19472: ST_TO_ADDR
19473: GO 19489
// j := j + 1 ;
19475: LD_ADDR_VAR 0 3
19479: PUSH
19480: LD_VAR 0 3
19484: PUSH
19485: LD_INT 1
19487: PLUS
19488: ST_TO_ADDR
// SetSide ( i , j ) ;
19489: LD_VAR 0 2
19493: PPUSH
19494: LD_VAR 0 3
19498: PPUSH
19499: CALL_OW 235
// end ;
19503: GO 19426
19505: POP
19506: POP
// end ;
19507: LD_VAR 0 1
19511: RET
// export function hHackFog ; begin
19512: LD_INT 0
19514: PPUSH
// FogOff ( true ) ;
19515: LD_INT 1
19517: PPUSH
19518: CALL_OW 344
// end ;
19522: LD_VAR 0 1
19526: RET
// export function hHackTeleport ( unit , x , y ) ; begin
19527: LD_INT 0
19529: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
19530: LD_VAR 0 1
19534: PPUSH
19535: LD_VAR 0 2
19539: PPUSH
19540: LD_VAR 0 3
19544: PPUSH
19545: LD_INT 1
19547: PPUSH
19548: LD_INT 1
19550: PPUSH
19551: CALL_OW 483
// CenterOnXY ( x , y ) ;
19555: LD_VAR 0 2
19559: PPUSH
19560: LD_VAR 0 3
19564: PPUSH
19565: CALL_OW 84
// end ; end_of_file
19569: LD_VAR 0 4
19573: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
19574: LD_INT 0
19576: PPUSH
19577: PPUSH
19578: PPUSH
19579: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
19580: LD_VAR 0 1
19584: PPUSH
19585: CALL_OW 264
19589: PUSH
19590: LD_EXP 92
19594: EQUAL
19595: IFFALSE 19667
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
19597: LD_INT 68
19599: PPUSH
19600: LD_VAR 0 1
19604: PPUSH
19605: CALL_OW 255
19609: PPUSH
19610: CALL_OW 321
19614: PUSH
19615: LD_INT 2
19617: EQUAL
19618: IFFALSE 19630
// eff := 70 else
19620: LD_ADDR_VAR 0 4
19624: PUSH
19625: LD_INT 70
19627: ST_TO_ADDR
19628: GO 19638
// eff := 30 ;
19630: LD_ADDR_VAR 0 4
19634: PUSH
19635: LD_INT 30
19637: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
19638: LD_VAR 0 1
19642: PPUSH
19643: CALL_OW 250
19647: PPUSH
19648: LD_VAR 0 1
19652: PPUSH
19653: CALL_OW 251
19657: PPUSH
19658: LD_VAR 0 4
19662: PPUSH
19663: CALL_OW 495
// end ; end ;
19667: LD_VAR 0 2
19671: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
19672: LD_INT 0
19674: PPUSH
// end ;
19675: LD_VAR 0 4
19679: RET
// export function SOS_Command ( cmd ) ; begin
19680: LD_INT 0
19682: PPUSH
// end ;
19683: LD_VAR 0 2
19687: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
19688: LD_INT 0
19690: PPUSH
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
19691: LD_VAR 0 1
19695: PUSH
19696: LD_INT 254
19698: EQUAL
19699: PUSH
19700: LD_VAR 0 2
19704: PPUSH
19705: CALL_OW 264
19709: PUSH
19710: LD_EXP 90
19714: EQUAL
19715: AND
19716: PUSH
19717: LD_VAR 0 3
19721: PPUSH
19722: CALL_OW 263
19726: PUSH
19727: LD_INT 3
19729: EQUAL
19730: AND
19731: IFFALSE 19747
// HackDestroyVehicle ( unit , selectedUnit ) ;
19733: LD_VAR 0 2
19737: PPUSH
19738: LD_VAR 0 3
19742: PPUSH
19743: CALL 21256 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
19747: LD_VAR 0 1
19751: PUSH
19752: LD_INT 255
19754: EQUAL
19755: PUSH
19756: LD_VAR 0 2
19760: PPUSH
19761: CALL_OW 264
19765: PUSH
19766: LD_INT 14
19768: PUSH
19769: LD_INT 53
19771: PUSH
19772: EMPTY
19773: LIST
19774: LIST
19775: IN
19776: AND
19777: PUSH
19778: LD_VAR 0 4
19782: PPUSH
19783: LD_VAR 0 5
19787: PPUSH
19788: CALL_OW 488
19792: AND
19793: IFFALSE 19817
// CutTreeXYR ( unit , x , y , 12 ) ;
19795: LD_VAR 0 2
19799: PPUSH
19800: LD_VAR 0 4
19804: PPUSH
19805: LD_VAR 0 5
19809: PPUSH
19810: LD_INT 12
19812: PPUSH
19813: CALL 19822 0 4
// end ;
19817: LD_VAR 0 6
19821: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
19822: LD_INT 0
19824: PPUSH
19825: PPUSH
19826: PPUSH
19827: PPUSH
19828: PPUSH
19829: PPUSH
19830: PPUSH
19831: PPUSH
19832: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
19833: LD_VAR 0 1
19837: NOT
19838: PUSH
19839: LD_VAR 0 2
19843: PPUSH
19844: LD_VAR 0 3
19848: PPUSH
19849: CALL_OW 488
19853: NOT
19854: OR
19855: PUSH
19856: LD_VAR 0 4
19860: NOT
19861: OR
19862: IFFALSE 19866
// exit ;
19864: GO 20206
// list := [ ] ;
19866: LD_ADDR_VAR 0 13
19870: PUSH
19871: EMPTY
19872: ST_TO_ADDR
// if x - r < 0 then
19873: LD_VAR 0 2
19877: PUSH
19878: LD_VAR 0 4
19882: MINUS
19883: PUSH
19884: LD_INT 0
19886: LESS
19887: IFFALSE 19899
// min_x := 0 else
19889: LD_ADDR_VAR 0 7
19893: PUSH
19894: LD_INT 0
19896: ST_TO_ADDR
19897: GO 19915
// min_x := x - r ;
19899: LD_ADDR_VAR 0 7
19903: PUSH
19904: LD_VAR 0 2
19908: PUSH
19909: LD_VAR 0 4
19913: MINUS
19914: ST_TO_ADDR
// if y - r < 0 then
19915: LD_VAR 0 3
19919: PUSH
19920: LD_VAR 0 4
19924: MINUS
19925: PUSH
19926: LD_INT 0
19928: LESS
19929: IFFALSE 19941
// min_y := 0 else
19931: LD_ADDR_VAR 0 8
19935: PUSH
19936: LD_INT 0
19938: ST_TO_ADDR
19939: GO 19957
// min_y := y - r ;
19941: LD_ADDR_VAR 0 8
19945: PUSH
19946: LD_VAR 0 3
19950: PUSH
19951: LD_VAR 0 4
19955: MINUS
19956: ST_TO_ADDR
// max_x := x + r ;
19957: LD_ADDR_VAR 0 9
19961: PUSH
19962: LD_VAR 0 2
19966: PUSH
19967: LD_VAR 0 4
19971: PLUS
19972: ST_TO_ADDR
// max_y := y + r ;
19973: LD_ADDR_VAR 0 10
19977: PUSH
19978: LD_VAR 0 3
19982: PUSH
19983: LD_VAR 0 4
19987: PLUS
19988: ST_TO_ADDR
// for _x = min_x to max_x do
19989: LD_ADDR_VAR 0 11
19993: PUSH
19994: DOUBLE
19995: LD_VAR 0 7
19999: DEC
20000: ST_TO_ADDR
20001: LD_VAR 0 9
20005: PUSH
20006: FOR_TO
20007: IFFALSE 20124
// for _y = min_y to max_y do
20009: LD_ADDR_VAR 0 12
20013: PUSH
20014: DOUBLE
20015: LD_VAR 0 8
20019: DEC
20020: ST_TO_ADDR
20021: LD_VAR 0 10
20025: PUSH
20026: FOR_TO
20027: IFFALSE 20120
// begin if not ValidHex ( _x , _y ) then
20029: LD_VAR 0 11
20033: PPUSH
20034: LD_VAR 0 12
20038: PPUSH
20039: CALL_OW 488
20043: NOT
20044: IFFALSE 20048
// continue ;
20046: GO 20026
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
20048: LD_VAR 0 11
20052: PPUSH
20053: LD_VAR 0 12
20057: PPUSH
20058: CALL_OW 351
20062: PUSH
20063: LD_VAR 0 11
20067: PPUSH
20068: LD_VAR 0 12
20072: PPUSH
20073: CALL_OW 554
20077: AND
20078: IFFALSE 20118
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
20080: LD_ADDR_VAR 0 13
20084: PUSH
20085: LD_VAR 0 13
20089: PPUSH
20090: LD_VAR 0 13
20094: PUSH
20095: LD_INT 1
20097: PLUS
20098: PPUSH
20099: LD_VAR 0 11
20103: PUSH
20104: LD_VAR 0 12
20108: PUSH
20109: EMPTY
20110: LIST
20111: LIST
20112: PPUSH
20113: CALL_OW 2
20117: ST_TO_ADDR
// end ;
20118: GO 20026
20120: POP
20121: POP
20122: GO 20006
20124: POP
20125: POP
// if not list then
20126: LD_VAR 0 13
20130: NOT
20131: IFFALSE 20135
// exit ;
20133: GO 20206
// for i in list do
20135: LD_ADDR_VAR 0 6
20139: PUSH
20140: LD_VAR 0 13
20144: PUSH
20145: FOR_IN
20146: IFFALSE 20204
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
20148: LD_VAR 0 1
20152: PPUSH
20153: LD_STRING M
20155: PUSH
20156: LD_VAR 0 6
20160: PUSH
20161: LD_INT 1
20163: ARRAY
20164: PUSH
20165: LD_VAR 0 6
20169: PUSH
20170: LD_INT 2
20172: ARRAY
20173: PUSH
20174: LD_INT 0
20176: PUSH
20177: LD_INT 0
20179: PUSH
20180: LD_INT 0
20182: PUSH
20183: LD_INT 0
20185: PUSH
20186: EMPTY
20187: LIST
20188: LIST
20189: LIST
20190: LIST
20191: LIST
20192: LIST
20193: LIST
20194: PUSH
20195: EMPTY
20196: LIST
20197: PPUSH
20198: CALL_OW 447
20202: GO 20145
20204: POP
20205: POP
// end ;
20206: LD_VAR 0 5
20210: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
20211: LD_EXP 82
20215: NOT
20216: IFFALSE 20266
20218: GO 20220
20220: DISABLE
// begin initHack := true ;
20221: LD_ADDR_EXP 82
20225: PUSH
20226: LD_INT 1
20228: ST_TO_ADDR
// hackTanks := [ ] ;
20229: LD_ADDR_EXP 83
20233: PUSH
20234: EMPTY
20235: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
20236: LD_ADDR_EXP 84
20240: PUSH
20241: EMPTY
20242: ST_TO_ADDR
// hackLimit := 3 ;
20243: LD_ADDR_EXP 85
20247: PUSH
20248: LD_INT 3
20250: ST_TO_ADDR
// hackDist := 12 ;
20251: LD_ADDR_EXP 86
20255: PUSH
20256: LD_INT 12
20258: ST_TO_ADDR
// hackCounter := [ ] ;
20259: LD_ADDR_EXP 87
20263: PUSH
20264: EMPTY
20265: ST_TO_ADDR
// end ;
20266: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
20267: LD_EXP 82
20271: PUSH
20272: LD_INT 34
20274: PUSH
20275: LD_EXP 90
20279: PUSH
20280: EMPTY
20281: LIST
20282: LIST
20283: PPUSH
20284: CALL_OW 69
20288: AND
20289: IFFALSE 20544
20291: GO 20293
20293: DISABLE
20294: LD_INT 0
20296: PPUSH
20297: PPUSH
// begin enable ;
20298: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
20299: LD_ADDR_VAR 0 1
20303: PUSH
20304: LD_INT 34
20306: PUSH
20307: LD_EXP 90
20311: PUSH
20312: EMPTY
20313: LIST
20314: LIST
20315: PPUSH
20316: CALL_OW 69
20320: PUSH
20321: FOR_IN
20322: IFFALSE 20542
// begin if not i in hackTanks then
20324: LD_VAR 0 1
20328: PUSH
20329: LD_EXP 83
20333: IN
20334: NOT
20335: IFFALSE 20418
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
20337: LD_ADDR_EXP 83
20341: PUSH
20342: LD_EXP 83
20346: PPUSH
20347: LD_EXP 83
20351: PUSH
20352: LD_INT 1
20354: PLUS
20355: PPUSH
20356: LD_VAR 0 1
20360: PPUSH
20361: CALL_OW 1
20365: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
20366: LD_ADDR_EXP 84
20370: PUSH
20371: LD_EXP 84
20375: PPUSH
20376: LD_EXP 84
20380: PUSH
20381: LD_INT 1
20383: PLUS
20384: PPUSH
20385: EMPTY
20386: PPUSH
20387: CALL_OW 1
20391: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
20392: LD_ADDR_EXP 87
20396: PUSH
20397: LD_EXP 87
20401: PPUSH
20402: LD_EXP 87
20406: PUSH
20407: LD_INT 1
20409: PLUS
20410: PPUSH
20411: EMPTY
20412: PPUSH
20413: CALL_OW 1
20417: ST_TO_ADDR
// end ; if not IsOk ( i ) then
20418: LD_VAR 0 1
20422: PPUSH
20423: CALL_OW 302
20427: NOT
20428: IFFALSE 20441
// begin HackUnlinkAll ( i ) ;
20430: LD_VAR 0 1
20434: PPUSH
20435: CALL 20547 0 1
// continue ;
20439: GO 20321
// end ; HackCheckCapturedStatus ( i ) ;
20441: LD_VAR 0 1
20445: PPUSH
20446: CALL 20990 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
20450: LD_ADDR_VAR 0 2
20454: PUSH
20455: LD_INT 81
20457: PUSH
20458: LD_VAR 0 1
20462: PPUSH
20463: CALL_OW 255
20467: PUSH
20468: EMPTY
20469: LIST
20470: LIST
20471: PUSH
20472: LD_INT 33
20474: PUSH
20475: LD_INT 3
20477: PUSH
20478: EMPTY
20479: LIST
20480: LIST
20481: PUSH
20482: LD_INT 91
20484: PUSH
20485: LD_VAR 0 1
20489: PUSH
20490: LD_EXP 86
20494: PUSH
20495: EMPTY
20496: LIST
20497: LIST
20498: LIST
20499: PUSH
20500: LD_INT 50
20502: PUSH
20503: EMPTY
20504: LIST
20505: PUSH
20506: EMPTY
20507: LIST
20508: LIST
20509: LIST
20510: LIST
20511: PPUSH
20512: CALL_OW 69
20516: ST_TO_ADDR
// if not tmp then
20517: LD_VAR 0 2
20521: NOT
20522: IFFALSE 20526
// continue ;
20524: GO 20321
// HackLink ( i , tmp ) ;
20526: LD_VAR 0 1
20530: PPUSH
20531: LD_VAR 0 2
20535: PPUSH
20536: CALL 20683 0 2
// end ;
20540: GO 20321
20542: POP
20543: POP
// end ;
20544: PPOPN 2
20546: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
20547: LD_INT 0
20549: PPUSH
20550: PPUSH
20551: PPUSH
// if not hack in hackTanks then
20552: LD_VAR 0 1
20556: PUSH
20557: LD_EXP 83
20561: IN
20562: NOT
20563: IFFALSE 20567
// exit ;
20565: GO 20678
// index := GetElementIndex ( hackTanks , hack ) ;
20567: LD_ADDR_VAR 0 4
20571: PUSH
20572: LD_EXP 83
20576: PPUSH
20577: LD_VAR 0 1
20581: PPUSH
20582: CALL 26234 0 2
20586: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
20587: LD_EXP 84
20591: PUSH
20592: LD_VAR 0 4
20596: ARRAY
20597: IFFALSE 20678
// begin for i in hackTanksCaptured [ index ] do
20599: LD_ADDR_VAR 0 3
20603: PUSH
20604: LD_EXP 84
20608: PUSH
20609: LD_VAR 0 4
20613: ARRAY
20614: PUSH
20615: FOR_IN
20616: IFFALSE 20642
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
20618: LD_VAR 0 3
20622: PUSH
20623: LD_INT 1
20625: ARRAY
20626: PPUSH
20627: LD_VAR 0 3
20631: PUSH
20632: LD_INT 2
20634: ARRAY
20635: PPUSH
20636: CALL_OW 235
20640: GO 20615
20642: POP
20643: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
20644: LD_ADDR_EXP 84
20648: PUSH
20649: LD_EXP 84
20653: PPUSH
20654: LD_VAR 0 4
20658: PPUSH
20659: EMPTY
20660: PPUSH
20661: CALL_OW 1
20665: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
20666: LD_VAR 0 1
20670: PPUSH
20671: LD_INT 0
20673: PPUSH
20674: CALL_OW 505
// end ; end ;
20678: LD_VAR 0 2
20682: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
20683: LD_INT 0
20685: PPUSH
20686: PPUSH
20687: PPUSH
// if not hack in hackTanks or not vehicles then
20688: LD_VAR 0 1
20692: PUSH
20693: LD_EXP 83
20697: IN
20698: NOT
20699: PUSH
20700: LD_VAR 0 2
20704: NOT
20705: OR
20706: IFFALSE 20710
// exit ;
20708: GO 20985
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
20710: LD_ADDR_VAR 0 2
20714: PUSH
20715: LD_VAR 0 1
20719: PPUSH
20720: LD_VAR 0 2
20724: PPUSH
20725: LD_INT 1
20727: PPUSH
20728: LD_INT 1
20730: PPUSH
20731: CALL 26884 0 4
20735: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
20736: LD_ADDR_VAR 0 5
20740: PUSH
20741: LD_EXP 83
20745: PPUSH
20746: LD_VAR 0 1
20750: PPUSH
20751: CALL 26234 0 2
20755: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
20756: LD_EXP 84
20760: PUSH
20761: LD_VAR 0 5
20765: ARRAY
20766: PUSH
20767: LD_EXP 85
20771: LESS
20772: IFFALSE 20961
// begin for i := 1 to vehicles do
20774: LD_ADDR_VAR 0 4
20778: PUSH
20779: DOUBLE
20780: LD_INT 1
20782: DEC
20783: ST_TO_ADDR
20784: LD_VAR 0 2
20788: PUSH
20789: FOR_TO
20790: IFFALSE 20959
// begin if hackTanksCaptured [ index ] = hackLimit then
20792: LD_EXP 84
20796: PUSH
20797: LD_VAR 0 5
20801: ARRAY
20802: PUSH
20803: LD_EXP 85
20807: EQUAL
20808: IFFALSE 20812
// break ;
20810: GO 20959
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
20812: LD_ADDR_EXP 87
20816: PUSH
20817: LD_EXP 87
20821: PPUSH
20822: LD_VAR 0 5
20826: PPUSH
20827: LD_EXP 87
20831: PUSH
20832: LD_VAR 0 5
20836: ARRAY
20837: PUSH
20838: LD_INT 1
20840: PLUS
20841: PPUSH
20842: CALL_OW 1
20846: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
20847: LD_ADDR_EXP 84
20851: PUSH
20852: LD_EXP 84
20856: PPUSH
20857: LD_VAR 0 5
20861: PUSH
20862: LD_EXP 84
20866: PUSH
20867: LD_VAR 0 5
20871: ARRAY
20872: PUSH
20873: LD_INT 1
20875: PLUS
20876: PUSH
20877: EMPTY
20878: LIST
20879: LIST
20880: PPUSH
20881: LD_VAR 0 2
20885: PUSH
20886: LD_VAR 0 4
20890: ARRAY
20891: PUSH
20892: LD_VAR 0 2
20896: PUSH
20897: LD_VAR 0 4
20901: ARRAY
20902: PPUSH
20903: CALL_OW 255
20907: PUSH
20908: EMPTY
20909: LIST
20910: LIST
20911: PPUSH
20912: CALL 26449 0 3
20916: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
20917: LD_VAR 0 2
20921: PUSH
20922: LD_VAR 0 4
20926: ARRAY
20927: PPUSH
20928: LD_VAR 0 1
20932: PPUSH
20933: CALL_OW 255
20937: PPUSH
20938: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
20942: LD_VAR 0 2
20946: PUSH
20947: LD_VAR 0 4
20951: ARRAY
20952: PPUSH
20953: CALL_OW 141
// end ;
20957: GO 20789
20959: POP
20960: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
20961: LD_VAR 0 1
20965: PPUSH
20966: LD_EXP 84
20970: PUSH
20971: LD_VAR 0 5
20975: ARRAY
20976: PUSH
20977: LD_INT 0
20979: PLUS
20980: PPUSH
20981: CALL_OW 505
// end ;
20985: LD_VAR 0 3
20989: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
20990: LD_INT 0
20992: PPUSH
20993: PPUSH
20994: PPUSH
20995: PPUSH
// if not hack in hackTanks then
20996: LD_VAR 0 1
21000: PUSH
21001: LD_EXP 83
21005: IN
21006: NOT
21007: IFFALSE 21011
// exit ;
21009: GO 21251
// index := GetElementIndex ( hackTanks , hack ) ;
21011: LD_ADDR_VAR 0 4
21015: PUSH
21016: LD_EXP 83
21020: PPUSH
21021: LD_VAR 0 1
21025: PPUSH
21026: CALL 26234 0 2
21030: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
21031: LD_ADDR_VAR 0 3
21035: PUSH
21036: DOUBLE
21037: LD_EXP 84
21041: PUSH
21042: LD_VAR 0 4
21046: ARRAY
21047: INC
21048: ST_TO_ADDR
21049: LD_INT 1
21051: PUSH
21052: FOR_DOWNTO
21053: IFFALSE 21225
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
21055: LD_ADDR_VAR 0 5
21059: PUSH
21060: LD_EXP 84
21064: PUSH
21065: LD_VAR 0 4
21069: ARRAY
21070: PUSH
21071: LD_VAR 0 3
21075: ARRAY
21076: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
21077: LD_VAR 0 5
21081: PUSH
21082: LD_INT 1
21084: ARRAY
21085: PPUSH
21086: CALL_OW 302
21090: NOT
21091: PUSH
21092: LD_VAR 0 5
21096: PUSH
21097: LD_INT 1
21099: ARRAY
21100: PPUSH
21101: CALL_OW 255
21105: PUSH
21106: LD_VAR 0 1
21110: PPUSH
21111: CALL_OW 255
21115: NONEQUAL
21116: OR
21117: IFFALSE 21223
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
21119: LD_VAR 0 5
21123: PUSH
21124: LD_INT 1
21126: ARRAY
21127: PPUSH
21128: CALL_OW 305
21132: PUSH
21133: LD_VAR 0 5
21137: PUSH
21138: LD_INT 1
21140: ARRAY
21141: PPUSH
21142: CALL_OW 255
21146: PUSH
21147: LD_VAR 0 1
21151: PPUSH
21152: CALL_OW 255
21156: EQUAL
21157: AND
21158: IFFALSE 21182
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
21160: LD_VAR 0 5
21164: PUSH
21165: LD_INT 1
21167: ARRAY
21168: PPUSH
21169: LD_VAR 0 5
21173: PUSH
21174: LD_INT 2
21176: ARRAY
21177: PPUSH
21178: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
21182: LD_ADDR_EXP 84
21186: PUSH
21187: LD_EXP 84
21191: PPUSH
21192: LD_VAR 0 4
21196: PPUSH
21197: LD_EXP 84
21201: PUSH
21202: LD_VAR 0 4
21206: ARRAY
21207: PPUSH
21208: LD_VAR 0 3
21212: PPUSH
21213: CALL_OW 3
21217: PPUSH
21218: CALL_OW 1
21222: ST_TO_ADDR
// end ; end ;
21223: GO 21052
21225: POP
21226: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21227: LD_VAR 0 1
21231: PPUSH
21232: LD_EXP 84
21236: PUSH
21237: LD_VAR 0 4
21241: ARRAY
21242: PUSH
21243: LD_INT 0
21245: PLUS
21246: PPUSH
21247: CALL_OW 505
// end ;
21251: LD_VAR 0 2
21255: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
21256: LD_INT 0
21258: PPUSH
21259: PPUSH
21260: PPUSH
21261: PPUSH
// if not hack in hackTanks then
21262: LD_VAR 0 1
21266: PUSH
21267: LD_EXP 83
21271: IN
21272: NOT
21273: IFFALSE 21277
// exit ;
21275: GO 21362
// index := GetElementIndex ( hackTanks , hack ) ;
21277: LD_ADDR_VAR 0 5
21281: PUSH
21282: LD_EXP 83
21286: PPUSH
21287: LD_VAR 0 1
21291: PPUSH
21292: CALL 26234 0 2
21296: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
21297: LD_ADDR_VAR 0 4
21301: PUSH
21302: DOUBLE
21303: LD_INT 1
21305: DEC
21306: ST_TO_ADDR
21307: LD_EXP 84
21311: PUSH
21312: LD_VAR 0 5
21316: ARRAY
21317: PUSH
21318: FOR_TO
21319: IFFALSE 21360
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
21321: LD_EXP 84
21325: PUSH
21326: LD_VAR 0 5
21330: ARRAY
21331: PUSH
21332: LD_VAR 0 4
21336: ARRAY
21337: PUSH
21338: LD_INT 1
21340: ARRAY
21341: PUSH
21342: LD_VAR 0 2
21346: EQUAL
21347: IFFALSE 21358
// KillUnit ( vehicle ) ;
21349: LD_VAR 0 2
21353: PPUSH
21354: CALL_OW 66
21358: GO 21318
21360: POP
21361: POP
// end ; end_of_file
21362: LD_VAR 0 3
21366: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
21367: LD_INT 0
21369: PPUSH
// ar_crane := 88 ;
21370: LD_ADDR_EXP 94
21374: PUSH
21375: LD_INT 88
21377: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
21378: LD_ADDR_EXP 89
21382: PUSH
21383: LD_INT 89
21385: ST_TO_ADDR
// us_hack := 99 ;
21386: LD_ADDR_EXP 90
21390: PUSH
21391: LD_INT 99
21393: ST_TO_ADDR
// us_artillery := 97 ;
21394: LD_ADDR_EXP 91
21398: PUSH
21399: LD_INT 97
21401: ST_TO_ADDR
// ar_bio_bomb := 91 ;
21402: LD_ADDR_EXP 92
21406: PUSH
21407: LD_INT 91
21409: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
21410: LD_ADDR_EXP 93
21414: PUSH
21415: LD_INT 92
21417: ST_TO_ADDR
// ru_radar := 98 ;
21418: LD_ADDR_EXP 88
21422: PUSH
21423: LD_INT 98
21425: ST_TO_ADDR
// tech_Artillery := 80 ;
21426: LD_ADDR_EXP 95
21430: PUSH
21431: LD_INT 80
21433: ST_TO_ADDR
// tech_RadMat := 81 ;
21434: LD_ADDR_EXP 96
21438: PUSH
21439: LD_INT 81
21441: ST_TO_ADDR
// tech_BasicTools := 82 ;
21442: LD_ADDR_EXP 97
21446: PUSH
21447: LD_INT 82
21449: ST_TO_ADDR
// tech_Cargo := 83 ;
21450: LD_ADDR_EXP 98
21454: PUSH
21455: LD_INT 83
21457: ST_TO_ADDR
// tech_Track := 84 ;
21458: LD_ADDR_EXP 99
21462: PUSH
21463: LD_INT 84
21465: ST_TO_ADDR
// tech_Crane := 85 ;
21466: LD_ADDR_EXP 100
21470: PUSH
21471: LD_INT 85
21473: ST_TO_ADDR
// tech_Bulldozer := 86 ;
21474: LD_ADDR_EXP 101
21478: PUSH
21479: LD_INT 86
21481: ST_TO_ADDR
// tech_Hovercraft := 87 ;
21482: LD_ADDR_EXP 102
21486: PUSH
21487: LD_INT 87
21489: ST_TO_ADDR
// end ;
21490: LD_VAR 0 1
21494: RET
// every 1 do
21495: GO 21497
21497: DISABLE
// InitGlobalVariables ; end_of_file
21498: CALL 21367 0 0
21502: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
21503: LD_INT 0
21505: PPUSH
21506: PPUSH
// if exist_mode then
21507: LD_VAR 0 2
21511: IFFALSE 21536
// unit := CreateCharacter ( prefix & ident ) else
21513: LD_ADDR_VAR 0 5
21517: PUSH
21518: LD_VAR 0 3
21522: PUSH
21523: LD_VAR 0 1
21527: STR
21528: PPUSH
21529: CALL_OW 34
21533: ST_TO_ADDR
21534: GO 21551
// unit := NewCharacter ( ident ) ;
21536: LD_ADDR_VAR 0 5
21540: PUSH
21541: LD_VAR 0 1
21545: PPUSH
21546: CALL_OW 25
21550: ST_TO_ADDR
// result := unit ;
21551: LD_ADDR_VAR 0 4
21555: PUSH
21556: LD_VAR 0 5
21560: ST_TO_ADDR
// end ;
21561: LD_VAR 0 4
21565: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
21566: LD_INT 0
21568: PPUSH
21569: PPUSH
// if not side or not nation then
21570: LD_VAR 0 1
21574: NOT
21575: PUSH
21576: LD_VAR 0 2
21580: NOT
21581: OR
21582: IFFALSE 21586
// exit ;
21584: GO 22350
// case nation of nation_american :
21586: LD_VAR 0 2
21590: PUSH
21591: LD_INT 1
21593: DOUBLE
21594: EQUAL
21595: IFTRUE 21599
21597: GO 21813
21599: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
21600: LD_ADDR_VAR 0 4
21604: PUSH
21605: LD_INT 35
21607: PUSH
21608: LD_INT 45
21610: PUSH
21611: LD_INT 46
21613: PUSH
21614: LD_INT 47
21616: PUSH
21617: LD_INT 82
21619: PUSH
21620: LD_INT 83
21622: PUSH
21623: LD_INT 84
21625: PUSH
21626: LD_INT 85
21628: PUSH
21629: LD_INT 86
21631: PUSH
21632: LD_INT 1
21634: PUSH
21635: LD_INT 2
21637: PUSH
21638: LD_INT 6
21640: PUSH
21641: LD_INT 15
21643: PUSH
21644: LD_INT 16
21646: PUSH
21647: LD_INT 7
21649: PUSH
21650: LD_INT 12
21652: PUSH
21653: LD_INT 13
21655: PUSH
21656: LD_INT 10
21658: PUSH
21659: LD_INT 14
21661: PUSH
21662: LD_INT 20
21664: PUSH
21665: LD_INT 21
21667: PUSH
21668: LD_INT 22
21670: PUSH
21671: LD_INT 25
21673: PUSH
21674: LD_INT 32
21676: PUSH
21677: LD_INT 27
21679: PUSH
21680: LD_INT 36
21682: PUSH
21683: LD_INT 69
21685: PUSH
21686: LD_INT 39
21688: PUSH
21689: LD_INT 34
21691: PUSH
21692: LD_INT 40
21694: PUSH
21695: LD_INT 48
21697: PUSH
21698: LD_INT 49
21700: PUSH
21701: LD_INT 50
21703: PUSH
21704: LD_INT 51
21706: PUSH
21707: LD_INT 52
21709: PUSH
21710: LD_INT 53
21712: PUSH
21713: LD_INT 54
21715: PUSH
21716: LD_INT 55
21718: PUSH
21719: LD_INT 56
21721: PUSH
21722: LD_INT 57
21724: PUSH
21725: LD_INT 58
21727: PUSH
21728: LD_INT 59
21730: PUSH
21731: LD_INT 60
21733: PUSH
21734: LD_INT 61
21736: PUSH
21737: LD_INT 62
21739: PUSH
21740: LD_INT 80
21742: PUSH
21743: LD_INT 82
21745: PUSH
21746: LD_INT 83
21748: PUSH
21749: LD_INT 84
21751: PUSH
21752: LD_INT 85
21754: PUSH
21755: LD_INT 86
21757: PUSH
21758: EMPTY
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: ST_TO_ADDR
21811: GO 22274
21813: LD_INT 2
21815: DOUBLE
21816: EQUAL
21817: IFTRUE 21821
21819: GO 22043
21821: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
21822: LD_ADDR_VAR 0 4
21826: PUSH
21827: LD_INT 35
21829: PUSH
21830: LD_INT 45
21832: PUSH
21833: LD_INT 46
21835: PUSH
21836: LD_INT 47
21838: PUSH
21839: LD_INT 82
21841: PUSH
21842: LD_INT 83
21844: PUSH
21845: LD_INT 84
21847: PUSH
21848: LD_INT 85
21850: PUSH
21851: LD_INT 87
21853: PUSH
21854: LD_INT 70
21856: PUSH
21857: LD_INT 1
21859: PUSH
21860: LD_INT 11
21862: PUSH
21863: LD_INT 3
21865: PUSH
21866: LD_INT 4
21868: PUSH
21869: LD_INT 5
21871: PUSH
21872: LD_INT 6
21874: PUSH
21875: LD_INT 15
21877: PUSH
21878: LD_INT 18
21880: PUSH
21881: LD_INT 7
21883: PUSH
21884: LD_INT 17
21886: PUSH
21887: LD_INT 8
21889: PUSH
21890: LD_INT 20
21892: PUSH
21893: LD_INT 21
21895: PUSH
21896: LD_INT 22
21898: PUSH
21899: LD_INT 72
21901: PUSH
21902: LD_INT 26
21904: PUSH
21905: LD_INT 69
21907: PUSH
21908: LD_INT 39
21910: PUSH
21911: LD_INT 40
21913: PUSH
21914: LD_INT 41
21916: PUSH
21917: LD_INT 42
21919: PUSH
21920: LD_INT 43
21922: PUSH
21923: LD_INT 48
21925: PUSH
21926: LD_INT 49
21928: PUSH
21929: LD_INT 50
21931: PUSH
21932: LD_INT 51
21934: PUSH
21935: LD_INT 52
21937: PUSH
21938: LD_INT 53
21940: PUSH
21941: LD_INT 54
21943: PUSH
21944: LD_INT 55
21946: PUSH
21947: LD_INT 56
21949: PUSH
21950: LD_INT 60
21952: PUSH
21953: LD_INT 61
21955: PUSH
21956: LD_INT 62
21958: PUSH
21959: LD_INT 66
21961: PUSH
21962: LD_INT 67
21964: PUSH
21965: LD_INT 68
21967: PUSH
21968: LD_INT 81
21970: PUSH
21971: LD_INT 82
21973: PUSH
21974: LD_INT 83
21976: PUSH
21977: LD_INT 84
21979: PUSH
21980: LD_INT 85
21982: PUSH
21983: LD_INT 87
21985: PUSH
21986: EMPTY
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: ST_TO_ADDR
22041: GO 22274
22043: LD_INT 3
22045: DOUBLE
22046: EQUAL
22047: IFTRUE 22051
22049: GO 22273
22051: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
22052: LD_ADDR_VAR 0 4
22056: PUSH
22057: LD_INT 46
22059: PUSH
22060: LD_INT 47
22062: PUSH
22063: LD_INT 1
22065: PUSH
22066: LD_INT 2
22068: PUSH
22069: LD_INT 82
22071: PUSH
22072: LD_INT 83
22074: PUSH
22075: LD_INT 84
22077: PUSH
22078: LD_INT 85
22080: PUSH
22081: LD_INT 86
22083: PUSH
22084: LD_INT 11
22086: PUSH
22087: LD_INT 9
22089: PUSH
22090: LD_INT 20
22092: PUSH
22093: LD_INT 19
22095: PUSH
22096: LD_INT 21
22098: PUSH
22099: LD_INT 24
22101: PUSH
22102: LD_INT 22
22104: PUSH
22105: LD_INT 25
22107: PUSH
22108: LD_INT 28
22110: PUSH
22111: LD_INT 29
22113: PUSH
22114: LD_INT 30
22116: PUSH
22117: LD_INT 31
22119: PUSH
22120: LD_INT 37
22122: PUSH
22123: LD_INT 38
22125: PUSH
22126: LD_INT 32
22128: PUSH
22129: LD_INT 27
22131: PUSH
22132: LD_INT 33
22134: PUSH
22135: LD_INT 69
22137: PUSH
22138: LD_INT 39
22140: PUSH
22141: LD_INT 34
22143: PUSH
22144: LD_INT 40
22146: PUSH
22147: LD_INT 71
22149: PUSH
22150: LD_INT 23
22152: PUSH
22153: LD_INT 44
22155: PUSH
22156: LD_INT 48
22158: PUSH
22159: LD_INT 49
22161: PUSH
22162: LD_INT 50
22164: PUSH
22165: LD_INT 51
22167: PUSH
22168: LD_INT 52
22170: PUSH
22171: LD_INT 53
22173: PUSH
22174: LD_INT 54
22176: PUSH
22177: LD_INT 55
22179: PUSH
22180: LD_INT 56
22182: PUSH
22183: LD_INT 57
22185: PUSH
22186: LD_INT 58
22188: PUSH
22189: LD_INT 59
22191: PUSH
22192: LD_INT 63
22194: PUSH
22195: LD_INT 64
22197: PUSH
22198: LD_INT 65
22200: PUSH
22201: LD_INT 82
22203: PUSH
22204: LD_INT 83
22206: PUSH
22207: LD_INT 84
22209: PUSH
22210: LD_INT 85
22212: PUSH
22213: LD_INT 86
22215: PUSH
22216: EMPTY
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: ST_TO_ADDR
22271: GO 22274
22273: POP
// if state > - 1 and state < 3 then
22274: LD_VAR 0 3
22278: PUSH
22279: LD_INT 1
22281: NEG
22282: GREATER
22283: PUSH
22284: LD_VAR 0 3
22288: PUSH
22289: LD_INT 3
22291: LESS
22292: AND
22293: IFFALSE 22350
// for i in result do
22295: LD_ADDR_VAR 0 5
22299: PUSH
22300: LD_VAR 0 4
22304: PUSH
22305: FOR_IN
22306: IFFALSE 22348
// if GetTech ( i , side ) <> state then
22308: LD_VAR 0 5
22312: PPUSH
22313: LD_VAR 0 1
22317: PPUSH
22318: CALL_OW 321
22322: PUSH
22323: LD_VAR 0 3
22327: NONEQUAL
22328: IFFALSE 22346
// result := result diff i ;
22330: LD_ADDR_VAR 0 4
22334: PUSH
22335: LD_VAR 0 4
22339: PUSH
22340: LD_VAR 0 5
22344: DIFF
22345: ST_TO_ADDR
22346: GO 22305
22348: POP
22349: POP
// end ;
22350: LD_VAR 0 4
22354: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
22355: LD_INT 0
22357: PPUSH
22358: PPUSH
22359: PPUSH
// result := true ;
22360: LD_ADDR_VAR 0 3
22364: PUSH
22365: LD_INT 1
22367: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
22368: LD_ADDR_VAR 0 5
22372: PUSH
22373: LD_VAR 0 2
22377: PPUSH
22378: CALL_OW 480
22382: ST_TO_ADDR
// if not tmp then
22383: LD_VAR 0 5
22387: NOT
22388: IFFALSE 22392
// exit ;
22390: GO 22441
// for i in tmp do
22392: LD_ADDR_VAR 0 4
22396: PUSH
22397: LD_VAR 0 5
22401: PUSH
22402: FOR_IN
22403: IFFALSE 22439
// if GetTech ( i , side ) <> state_researched then
22405: LD_VAR 0 4
22409: PPUSH
22410: LD_VAR 0 1
22414: PPUSH
22415: CALL_OW 321
22419: PUSH
22420: LD_INT 2
22422: NONEQUAL
22423: IFFALSE 22437
// begin result := false ;
22425: LD_ADDR_VAR 0 3
22429: PUSH
22430: LD_INT 0
22432: ST_TO_ADDR
// exit ;
22433: POP
22434: POP
22435: GO 22441
// end ;
22437: GO 22402
22439: POP
22440: POP
// end ;
22441: LD_VAR 0 3
22445: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
22446: LD_INT 0
22448: PPUSH
22449: PPUSH
22450: PPUSH
22451: PPUSH
22452: PPUSH
22453: PPUSH
22454: PPUSH
22455: PPUSH
22456: PPUSH
22457: PPUSH
22458: PPUSH
22459: PPUSH
22460: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
22461: LD_VAR 0 1
22465: NOT
22466: PUSH
22467: LD_VAR 0 1
22471: PPUSH
22472: CALL_OW 257
22476: PUSH
22477: LD_INT 9
22479: NONEQUAL
22480: OR
22481: IFFALSE 22485
// exit ;
22483: GO 23058
// side := GetSide ( unit ) ;
22485: LD_ADDR_VAR 0 9
22489: PUSH
22490: LD_VAR 0 1
22494: PPUSH
22495: CALL_OW 255
22499: ST_TO_ADDR
// tech_space := tech_spacanom ;
22500: LD_ADDR_VAR 0 12
22504: PUSH
22505: LD_INT 29
22507: ST_TO_ADDR
// tech_time := tech_taurad ;
22508: LD_ADDR_VAR 0 13
22512: PUSH
22513: LD_INT 28
22515: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
22516: LD_ADDR_VAR 0 11
22520: PUSH
22521: LD_VAR 0 1
22525: PPUSH
22526: CALL_OW 310
22530: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
22531: LD_VAR 0 11
22535: PPUSH
22536: CALL_OW 247
22540: PUSH
22541: LD_INT 2
22543: EQUAL
22544: IFFALSE 22548
// exit ;
22546: GO 23058
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22548: LD_ADDR_VAR 0 8
22552: PUSH
22553: LD_INT 81
22555: PUSH
22556: LD_VAR 0 9
22560: PUSH
22561: EMPTY
22562: LIST
22563: LIST
22564: PUSH
22565: LD_INT 3
22567: PUSH
22568: LD_INT 21
22570: PUSH
22571: LD_INT 3
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: PUSH
22578: EMPTY
22579: LIST
22580: LIST
22581: PUSH
22582: EMPTY
22583: LIST
22584: LIST
22585: PPUSH
22586: CALL_OW 69
22590: ST_TO_ADDR
// if not tmp then
22591: LD_VAR 0 8
22595: NOT
22596: IFFALSE 22600
// exit ;
22598: GO 23058
// if in_unit then
22600: LD_VAR 0 11
22604: IFFALSE 22628
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
22606: LD_ADDR_VAR 0 10
22610: PUSH
22611: LD_VAR 0 8
22615: PPUSH
22616: LD_VAR 0 11
22620: PPUSH
22621: CALL_OW 74
22625: ST_TO_ADDR
22626: GO 22648
// enemy := NearestUnitToUnit ( tmp , unit ) ;
22628: LD_ADDR_VAR 0 10
22632: PUSH
22633: LD_VAR 0 8
22637: PPUSH
22638: LD_VAR 0 1
22642: PPUSH
22643: CALL_OW 74
22647: ST_TO_ADDR
// if not enemy then
22648: LD_VAR 0 10
22652: NOT
22653: IFFALSE 22657
// exit ;
22655: GO 23058
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
22657: LD_VAR 0 11
22661: PUSH
22662: LD_VAR 0 11
22666: PPUSH
22667: LD_VAR 0 10
22671: PPUSH
22672: CALL_OW 296
22676: PUSH
22677: LD_INT 13
22679: GREATER
22680: AND
22681: PUSH
22682: LD_VAR 0 1
22686: PPUSH
22687: LD_VAR 0 10
22691: PPUSH
22692: CALL_OW 296
22696: PUSH
22697: LD_INT 12
22699: GREATER
22700: OR
22701: IFFALSE 22705
// exit ;
22703: GO 23058
// missile := [ 1 ] ;
22705: LD_ADDR_VAR 0 14
22709: PUSH
22710: LD_INT 1
22712: PUSH
22713: EMPTY
22714: LIST
22715: ST_TO_ADDR
// if Researched ( side , tech_space ) then
22716: LD_VAR 0 9
22720: PPUSH
22721: LD_VAR 0 12
22725: PPUSH
22726: CALL_OW 325
22730: IFFALSE 22759
// missile := Insert ( missile , missile + 1 , 2 ) ;
22732: LD_ADDR_VAR 0 14
22736: PUSH
22737: LD_VAR 0 14
22741: PPUSH
22742: LD_VAR 0 14
22746: PUSH
22747: LD_INT 1
22749: PLUS
22750: PPUSH
22751: LD_INT 2
22753: PPUSH
22754: CALL_OW 2
22758: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
22759: LD_VAR 0 9
22763: PPUSH
22764: LD_VAR 0 13
22768: PPUSH
22769: CALL_OW 325
22773: PUSH
22774: LD_VAR 0 10
22778: PPUSH
22779: CALL_OW 255
22783: PPUSH
22784: LD_VAR 0 13
22788: PPUSH
22789: CALL_OW 325
22793: NOT
22794: AND
22795: IFFALSE 22824
// missile := Insert ( missile , missile + 1 , 3 ) ;
22797: LD_ADDR_VAR 0 14
22801: PUSH
22802: LD_VAR 0 14
22806: PPUSH
22807: LD_VAR 0 14
22811: PUSH
22812: LD_INT 1
22814: PLUS
22815: PPUSH
22816: LD_INT 3
22818: PPUSH
22819: CALL_OW 2
22823: ST_TO_ADDR
// if missile < 2 then
22824: LD_VAR 0 14
22828: PUSH
22829: LD_INT 2
22831: LESS
22832: IFFALSE 22836
// exit ;
22834: GO 23058
// x := GetX ( enemy ) ;
22836: LD_ADDR_VAR 0 4
22840: PUSH
22841: LD_VAR 0 10
22845: PPUSH
22846: CALL_OW 250
22850: ST_TO_ADDR
// y := GetY ( enemy ) ;
22851: LD_ADDR_VAR 0 5
22855: PUSH
22856: LD_VAR 0 10
22860: PPUSH
22861: CALL_OW 251
22865: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
22866: LD_ADDR_VAR 0 6
22870: PUSH
22871: LD_VAR 0 4
22875: PUSH
22876: LD_INT 1
22878: NEG
22879: PPUSH
22880: LD_INT 1
22882: PPUSH
22883: CALL_OW 12
22887: PLUS
22888: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
22889: LD_ADDR_VAR 0 7
22893: PUSH
22894: LD_VAR 0 5
22898: PUSH
22899: LD_INT 1
22901: NEG
22902: PPUSH
22903: LD_INT 1
22905: PPUSH
22906: CALL_OW 12
22910: PLUS
22911: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22912: LD_VAR 0 6
22916: PPUSH
22917: LD_VAR 0 7
22921: PPUSH
22922: CALL_OW 488
22926: NOT
22927: IFFALSE 22949
// begin _x := x ;
22929: LD_ADDR_VAR 0 6
22933: PUSH
22934: LD_VAR 0 4
22938: ST_TO_ADDR
// _y := y ;
22939: LD_ADDR_VAR 0 7
22943: PUSH
22944: LD_VAR 0 5
22948: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
22949: LD_ADDR_VAR 0 3
22953: PUSH
22954: LD_INT 1
22956: PPUSH
22957: LD_VAR 0 14
22961: PPUSH
22962: CALL_OW 12
22966: ST_TO_ADDR
// case i of 1 :
22967: LD_VAR 0 3
22971: PUSH
22972: LD_INT 1
22974: DOUBLE
22975: EQUAL
22976: IFTRUE 22980
22978: GO 22997
22980: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
22981: LD_VAR 0 1
22985: PPUSH
22986: LD_VAR 0 10
22990: PPUSH
22991: CALL_OW 115
22995: GO 23058
22997: LD_INT 2
22999: DOUBLE
23000: EQUAL
23001: IFTRUE 23005
23003: GO 23027
23005: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
23006: LD_VAR 0 1
23010: PPUSH
23011: LD_VAR 0 6
23015: PPUSH
23016: LD_VAR 0 7
23020: PPUSH
23021: CALL_OW 153
23025: GO 23058
23027: LD_INT 3
23029: DOUBLE
23030: EQUAL
23031: IFTRUE 23035
23033: GO 23057
23035: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
23036: LD_VAR 0 1
23040: PPUSH
23041: LD_VAR 0 6
23045: PPUSH
23046: LD_VAR 0 7
23050: PPUSH
23051: CALL_OW 154
23055: GO 23058
23057: POP
// end ;
23058: LD_VAR 0 2
23062: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
23063: LD_INT 0
23065: PPUSH
23066: PPUSH
23067: PPUSH
23068: PPUSH
23069: PPUSH
23070: PPUSH
// if not unit or not building then
23071: LD_VAR 0 1
23075: NOT
23076: PUSH
23077: LD_VAR 0 2
23081: NOT
23082: OR
23083: IFFALSE 23087
// exit ;
23085: GO 23245
// x := GetX ( building ) ;
23087: LD_ADDR_VAR 0 5
23091: PUSH
23092: LD_VAR 0 2
23096: PPUSH
23097: CALL_OW 250
23101: ST_TO_ADDR
// y := GetY ( building ) ;
23102: LD_ADDR_VAR 0 6
23106: PUSH
23107: LD_VAR 0 2
23111: PPUSH
23112: CALL_OW 251
23116: ST_TO_ADDR
// for i = 0 to 5 do
23117: LD_ADDR_VAR 0 4
23121: PUSH
23122: DOUBLE
23123: LD_INT 0
23125: DEC
23126: ST_TO_ADDR
23127: LD_INT 5
23129: PUSH
23130: FOR_TO
23131: IFFALSE 23243
// begin _x := ShiftX ( x , i , 3 ) ;
23133: LD_ADDR_VAR 0 7
23137: PUSH
23138: LD_VAR 0 5
23142: PPUSH
23143: LD_VAR 0 4
23147: PPUSH
23148: LD_INT 3
23150: PPUSH
23151: CALL_OW 272
23155: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
23156: LD_ADDR_VAR 0 8
23160: PUSH
23161: LD_VAR 0 6
23165: PPUSH
23166: LD_VAR 0 4
23170: PPUSH
23171: LD_INT 3
23173: PPUSH
23174: CALL_OW 273
23178: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23179: LD_VAR 0 7
23183: PPUSH
23184: LD_VAR 0 8
23188: PPUSH
23189: CALL_OW 488
23193: NOT
23194: IFFALSE 23198
// continue ;
23196: GO 23130
// if HexInfo ( _x , _y ) = 0 then
23198: LD_VAR 0 7
23202: PPUSH
23203: LD_VAR 0 8
23207: PPUSH
23208: CALL_OW 428
23212: PUSH
23213: LD_INT 0
23215: EQUAL
23216: IFFALSE 23241
// begin ComMoveXY ( unit , _x , _y ) ;
23218: LD_VAR 0 1
23222: PPUSH
23223: LD_VAR 0 7
23227: PPUSH
23228: LD_VAR 0 8
23232: PPUSH
23233: CALL_OW 111
// exit ;
23237: POP
23238: POP
23239: GO 23245
// end ; end ;
23241: GO 23130
23243: POP
23244: POP
// end ;
23245: LD_VAR 0 3
23249: RET
// export function ScanBase ( side , base_area ) ; begin
23250: LD_INT 0
23252: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
23253: LD_ADDR_VAR 0 3
23257: PUSH
23258: LD_VAR 0 2
23262: PPUSH
23263: LD_INT 81
23265: PUSH
23266: LD_VAR 0 1
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: PPUSH
23275: CALL_OW 70
23279: ST_TO_ADDR
// end ;
23280: LD_VAR 0 3
23284: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23285: LD_INT 0
23287: PPUSH
23288: PPUSH
23289: PPUSH
23290: PPUSH
// result := false ;
23291: LD_ADDR_VAR 0 2
23295: PUSH
23296: LD_INT 0
23298: ST_TO_ADDR
// side := GetSide ( unit ) ;
23299: LD_ADDR_VAR 0 3
23303: PUSH
23304: LD_VAR 0 1
23308: PPUSH
23309: CALL_OW 255
23313: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23314: LD_ADDR_VAR 0 4
23318: PUSH
23319: LD_VAR 0 1
23323: PPUSH
23324: CALL_OW 248
23328: ST_TO_ADDR
// case nat of 1 :
23329: LD_VAR 0 4
23333: PUSH
23334: LD_INT 1
23336: DOUBLE
23337: EQUAL
23338: IFTRUE 23342
23340: GO 23353
23342: POP
// tech := tech_lassight ; 2 :
23343: LD_ADDR_VAR 0 5
23347: PUSH
23348: LD_INT 12
23350: ST_TO_ADDR
23351: GO 23392
23353: LD_INT 2
23355: DOUBLE
23356: EQUAL
23357: IFTRUE 23361
23359: GO 23372
23361: POP
// tech := tech_mortar ; 3 :
23362: LD_ADDR_VAR 0 5
23366: PUSH
23367: LD_INT 41
23369: ST_TO_ADDR
23370: GO 23392
23372: LD_INT 3
23374: DOUBLE
23375: EQUAL
23376: IFTRUE 23380
23378: GO 23391
23380: POP
// tech := tech_bazooka ; end ;
23381: LD_ADDR_VAR 0 5
23385: PUSH
23386: LD_INT 44
23388: ST_TO_ADDR
23389: GO 23392
23391: POP
// if Researched ( side , tech ) then
23392: LD_VAR 0 3
23396: PPUSH
23397: LD_VAR 0 5
23401: PPUSH
23402: CALL_OW 325
23406: IFFALSE 23433
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23408: LD_ADDR_VAR 0 2
23412: PUSH
23413: LD_INT 5
23415: PUSH
23416: LD_INT 8
23418: PUSH
23419: LD_INT 9
23421: PUSH
23422: EMPTY
23423: LIST
23424: LIST
23425: LIST
23426: PUSH
23427: LD_VAR 0 4
23431: ARRAY
23432: ST_TO_ADDR
// end ;
23433: LD_VAR 0 2
23437: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23438: LD_INT 0
23440: PPUSH
23441: PPUSH
23442: PPUSH
// if not mines then
23443: LD_VAR 0 2
23447: NOT
23448: IFFALSE 23452
// exit ;
23450: GO 23596
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23452: LD_ADDR_VAR 0 5
23456: PUSH
23457: LD_INT 81
23459: PUSH
23460: LD_VAR 0 1
23464: PUSH
23465: EMPTY
23466: LIST
23467: LIST
23468: PUSH
23469: LD_INT 3
23471: PUSH
23472: LD_INT 21
23474: PUSH
23475: LD_INT 3
23477: PUSH
23478: EMPTY
23479: LIST
23480: LIST
23481: PUSH
23482: EMPTY
23483: LIST
23484: LIST
23485: PUSH
23486: EMPTY
23487: LIST
23488: LIST
23489: PPUSH
23490: CALL_OW 69
23494: ST_TO_ADDR
// for i in mines do
23495: LD_ADDR_VAR 0 4
23499: PUSH
23500: LD_VAR 0 2
23504: PUSH
23505: FOR_IN
23506: IFFALSE 23594
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23508: LD_VAR 0 4
23512: PUSH
23513: LD_INT 1
23515: ARRAY
23516: PPUSH
23517: LD_VAR 0 4
23521: PUSH
23522: LD_INT 2
23524: ARRAY
23525: PPUSH
23526: CALL_OW 458
23530: NOT
23531: IFFALSE 23535
// continue ;
23533: GO 23505
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23535: LD_VAR 0 4
23539: PUSH
23540: LD_INT 1
23542: ARRAY
23543: PPUSH
23544: LD_VAR 0 4
23548: PUSH
23549: LD_INT 2
23551: ARRAY
23552: PPUSH
23553: CALL_OW 428
23557: PUSH
23558: LD_VAR 0 5
23562: IN
23563: IFFALSE 23592
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23565: LD_VAR 0 4
23569: PUSH
23570: LD_INT 1
23572: ARRAY
23573: PPUSH
23574: LD_VAR 0 4
23578: PUSH
23579: LD_INT 2
23581: ARRAY
23582: PPUSH
23583: LD_VAR 0 1
23587: PPUSH
23588: CALL_OW 456
// end ;
23592: GO 23505
23594: POP
23595: POP
// end ;
23596: LD_VAR 0 3
23600: RET
// export function Count ( array ) ; var i ; begin
23601: LD_INT 0
23603: PPUSH
23604: PPUSH
// result := 0 ;
23605: LD_ADDR_VAR 0 2
23609: PUSH
23610: LD_INT 0
23612: ST_TO_ADDR
// for i in array do
23613: LD_ADDR_VAR 0 3
23617: PUSH
23618: LD_VAR 0 1
23622: PUSH
23623: FOR_IN
23624: IFFALSE 23648
// if i then
23626: LD_VAR 0 3
23630: IFFALSE 23646
// result := result + 1 ;
23632: LD_ADDR_VAR 0 2
23636: PUSH
23637: LD_VAR 0 2
23641: PUSH
23642: LD_INT 1
23644: PLUS
23645: ST_TO_ADDR
23646: GO 23623
23648: POP
23649: POP
// end ;
23650: LD_VAR 0 2
23654: RET
// export function IsEmpty ( building ) ; begin
23655: LD_INT 0
23657: PPUSH
// if not building then
23658: LD_VAR 0 1
23662: NOT
23663: IFFALSE 23667
// exit ;
23665: GO 23710
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23667: LD_ADDR_VAR 0 2
23671: PUSH
23672: LD_VAR 0 1
23676: PUSH
23677: LD_INT 22
23679: PUSH
23680: LD_VAR 0 1
23684: PPUSH
23685: CALL_OW 255
23689: PUSH
23690: EMPTY
23691: LIST
23692: LIST
23693: PUSH
23694: LD_INT 58
23696: PUSH
23697: EMPTY
23698: LIST
23699: PUSH
23700: EMPTY
23701: LIST
23702: LIST
23703: PPUSH
23704: CALL_OW 69
23708: IN
23709: ST_TO_ADDR
// end ;
23710: LD_VAR 0 2
23714: RET
// export function IsNotFull ( building ) ; begin
23715: LD_INT 0
23717: PPUSH
// if not building then
23718: LD_VAR 0 1
23722: NOT
23723: IFFALSE 23727
// exit ;
23725: GO 23746
// result := UnitsInside ( building ) < 6 ;
23727: LD_ADDR_VAR 0 2
23731: PUSH
23732: LD_VAR 0 1
23736: PPUSH
23737: CALL_OW 313
23741: PUSH
23742: LD_INT 6
23744: LESS
23745: ST_TO_ADDR
// end ;
23746: LD_VAR 0 2
23750: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
23751: LD_INT 0
23753: PPUSH
23754: PPUSH
23755: PPUSH
23756: PPUSH
// tmp := [ ] ;
23757: LD_ADDR_VAR 0 3
23761: PUSH
23762: EMPTY
23763: ST_TO_ADDR
// list := [ ] ;
23764: LD_ADDR_VAR 0 5
23768: PUSH
23769: EMPTY
23770: ST_TO_ADDR
// for i = 16 to 25 do
23771: LD_ADDR_VAR 0 4
23775: PUSH
23776: DOUBLE
23777: LD_INT 16
23779: DEC
23780: ST_TO_ADDR
23781: LD_INT 25
23783: PUSH
23784: FOR_TO
23785: IFFALSE 23858
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
23787: LD_ADDR_VAR 0 3
23791: PUSH
23792: LD_VAR 0 3
23796: PUSH
23797: LD_INT 22
23799: PUSH
23800: LD_VAR 0 1
23804: PPUSH
23805: CALL_OW 255
23809: PUSH
23810: EMPTY
23811: LIST
23812: LIST
23813: PUSH
23814: LD_INT 91
23816: PUSH
23817: LD_VAR 0 1
23821: PUSH
23822: LD_INT 6
23824: PUSH
23825: EMPTY
23826: LIST
23827: LIST
23828: LIST
23829: PUSH
23830: LD_INT 30
23832: PUSH
23833: LD_VAR 0 4
23837: PUSH
23838: EMPTY
23839: LIST
23840: LIST
23841: PUSH
23842: EMPTY
23843: LIST
23844: LIST
23845: LIST
23846: PUSH
23847: EMPTY
23848: LIST
23849: PPUSH
23850: CALL_OW 69
23854: ADD
23855: ST_TO_ADDR
23856: GO 23784
23858: POP
23859: POP
// for i = 1 to tmp do
23860: LD_ADDR_VAR 0 4
23864: PUSH
23865: DOUBLE
23866: LD_INT 1
23868: DEC
23869: ST_TO_ADDR
23870: LD_VAR 0 3
23874: PUSH
23875: FOR_TO
23876: IFFALSE 23964
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
23878: LD_ADDR_VAR 0 5
23882: PUSH
23883: LD_VAR 0 5
23887: PUSH
23888: LD_VAR 0 3
23892: PUSH
23893: LD_VAR 0 4
23897: ARRAY
23898: PPUSH
23899: CALL_OW 266
23903: PUSH
23904: LD_VAR 0 3
23908: PUSH
23909: LD_VAR 0 4
23913: ARRAY
23914: PPUSH
23915: CALL_OW 250
23919: PUSH
23920: LD_VAR 0 3
23924: PUSH
23925: LD_VAR 0 4
23929: ARRAY
23930: PPUSH
23931: CALL_OW 251
23935: PUSH
23936: LD_VAR 0 3
23940: PUSH
23941: LD_VAR 0 4
23945: ARRAY
23946: PPUSH
23947: CALL_OW 254
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: PUSH
23958: EMPTY
23959: LIST
23960: ADD
23961: ST_TO_ADDR
23962: GO 23875
23964: POP
23965: POP
// result := list ;
23966: LD_ADDR_VAR 0 2
23970: PUSH
23971: LD_VAR 0 5
23975: ST_TO_ADDR
// end ;
23976: LD_VAR 0 2
23980: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
23981: LD_INT 0
23983: PPUSH
23984: PPUSH
23985: PPUSH
23986: PPUSH
23987: PPUSH
23988: PPUSH
23989: PPUSH
// if not factory then
23990: LD_VAR 0 1
23994: NOT
23995: IFFALSE 23999
// exit ;
23997: GO 24592
// if control = control_apeman then
23999: LD_VAR 0 4
24003: PUSH
24004: LD_INT 5
24006: EQUAL
24007: IFFALSE 24116
// begin tmp := UnitsInside ( factory ) ;
24009: LD_ADDR_VAR 0 8
24013: PUSH
24014: LD_VAR 0 1
24018: PPUSH
24019: CALL_OW 313
24023: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24024: LD_VAR 0 8
24028: PPUSH
24029: LD_INT 25
24031: PUSH
24032: LD_INT 12
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: PPUSH
24039: CALL_OW 72
24043: NOT
24044: IFFALSE 24054
// control := control_manual ;
24046: LD_ADDR_VAR 0 4
24050: PUSH
24051: LD_INT 1
24053: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
24054: LD_ADDR_VAR 0 8
24058: PUSH
24059: LD_VAR 0 1
24063: PPUSH
24064: CALL 23751 0 1
24068: ST_TO_ADDR
// if tmp then
24069: LD_VAR 0 8
24073: IFFALSE 24116
// begin for i in tmp do
24075: LD_ADDR_VAR 0 7
24079: PUSH
24080: LD_VAR 0 8
24084: PUSH
24085: FOR_IN
24086: IFFALSE 24114
// if i [ 1 ] = b_ext_radio then
24088: LD_VAR 0 7
24092: PUSH
24093: LD_INT 1
24095: ARRAY
24096: PUSH
24097: LD_INT 22
24099: EQUAL
24100: IFFALSE 24112
// begin control := control_remote ;
24102: LD_ADDR_VAR 0 4
24106: PUSH
24107: LD_INT 2
24109: ST_TO_ADDR
// break ;
24110: GO 24114
// end ;
24112: GO 24085
24114: POP
24115: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24116: LD_VAR 0 1
24120: PPUSH
24121: LD_VAR 0 2
24125: PPUSH
24126: LD_VAR 0 3
24130: PPUSH
24131: LD_VAR 0 4
24135: PPUSH
24136: LD_VAR 0 5
24140: PPUSH
24141: CALL_OW 448
24145: IFFALSE 24180
// begin result := [ chassis , engine , control , weapon ] ;
24147: LD_ADDR_VAR 0 6
24151: PUSH
24152: LD_VAR 0 2
24156: PUSH
24157: LD_VAR 0 3
24161: PUSH
24162: LD_VAR 0 4
24166: PUSH
24167: LD_VAR 0 5
24171: PUSH
24172: EMPTY
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: ST_TO_ADDR
// exit ;
24178: GO 24592
// end ; _chassis := AvailableChassisList ( factory ) ;
24180: LD_ADDR_VAR 0 9
24184: PUSH
24185: LD_VAR 0 1
24189: PPUSH
24190: CALL_OW 475
24194: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24195: LD_ADDR_VAR 0 11
24199: PUSH
24200: LD_VAR 0 1
24204: PPUSH
24205: CALL_OW 476
24209: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
24210: LD_ADDR_VAR 0 12
24214: PUSH
24215: LD_VAR 0 1
24219: PPUSH
24220: CALL_OW 477
24224: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
24225: LD_ADDR_VAR 0 10
24229: PUSH
24230: LD_VAR 0 1
24234: PPUSH
24235: CALL_OW 478
24239: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
24240: LD_VAR 0 9
24244: NOT
24245: PUSH
24246: LD_VAR 0 11
24250: NOT
24251: OR
24252: PUSH
24253: LD_VAR 0 12
24257: NOT
24258: OR
24259: PUSH
24260: LD_VAR 0 10
24264: NOT
24265: OR
24266: IFFALSE 24301
// begin result := [ chassis , engine , control , weapon ] ;
24268: LD_ADDR_VAR 0 6
24272: PUSH
24273: LD_VAR 0 2
24277: PUSH
24278: LD_VAR 0 3
24282: PUSH
24283: LD_VAR 0 4
24287: PUSH
24288: LD_VAR 0 5
24292: PUSH
24293: EMPTY
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: ST_TO_ADDR
// exit ;
24299: GO 24592
// end ; if not chassis in _chassis then
24301: LD_VAR 0 2
24305: PUSH
24306: LD_VAR 0 9
24310: IN
24311: NOT
24312: IFFALSE 24338
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
24314: LD_ADDR_VAR 0 2
24318: PUSH
24319: LD_VAR 0 9
24323: PUSH
24324: LD_INT 1
24326: PPUSH
24327: LD_VAR 0 9
24331: PPUSH
24332: CALL_OW 12
24336: ARRAY
24337: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24338: LD_VAR 0 2
24342: PPUSH
24343: LD_VAR 0 3
24347: PPUSH
24348: CALL 24597 0 2
24352: NOT
24353: IFFALSE 24412
// repeat engine := _engine [ 1 ] ;
24355: LD_ADDR_VAR 0 3
24359: PUSH
24360: LD_VAR 0 11
24364: PUSH
24365: LD_INT 1
24367: ARRAY
24368: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
24369: LD_ADDR_VAR 0 11
24373: PUSH
24374: LD_VAR 0 11
24378: PPUSH
24379: LD_INT 1
24381: PPUSH
24382: CALL_OW 3
24386: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24387: LD_VAR 0 2
24391: PPUSH
24392: LD_VAR 0 3
24396: PPUSH
24397: CALL 24597 0 2
24401: PUSH
24402: LD_VAR 0 11
24406: PUSH
24407: EMPTY
24408: EQUAL
24409: OR
24410: IFFALSE 24355
// if not control in _control then
24412: LD_VAR 0 4
24416: PUSH
24417: LD_VAR 0 12
24421: IN
24422: NOT
24423: IFFALSE 24449
// control := _control [ rand ( 1 , _control ) ] ;
24425: LD_ADDR_VAR 0 4
24429: PUSH
24430: LD_VAR 0 12
24434: PUSH
24435: LD_INT 1
24437: PPUSH
24438: LD_VAR 0 12
24442: PPUSH
24443: CALL_OW 12
24447: ARRAY
24448: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24449: LD_VAR 0 2
24453: PPUSH
24454: LD_VAR 0 5
24458: PPUSH
24459: CALL 24817 0 2
24463: NOT
24464: IFFALSE 24523
// repeat weapon := _weapon [ 1 ] ;
24466: LD_ADDR_VAR 0 5
24470: PUSH
24471: LD_VAR 0 10
24475: PUSH
24476: LD_INT 1
24478: ARRAY
24479: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24480: LD_ADDR_VAR 0 10
24484: PUSH
24485: LD_VAR 0 10
24489: PPUSH
24490: LD_INT 1
24492: PPUSH
24493: CALL_OW 3
24497: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24498: LD_VAR 0 2
24502: PPUSH
24503: LD_VAR 0 5
24507: PPUSH
24508: CALL 24817 0 2
24512: PUSH
24513: LD_VAR 0 10
24517: PUSH
24518: EMPTY
24519: EQUAL
24520: OR
24521: IFFALSE 24466
// result := [ ] ;
24523: LD_ADDR_VAR 0 6
24527: PUSH
24528: EMPTY
24529: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24530: LD_VAR 0 1
24534: PPUSH
24535: LD_VAR 0 2
24539: PPUSH
24540: LD_VAR 0 3
24544: PPUSH
24545: LD_VAR 0 4
24549: PPUSH
24550: LD_VAR 0 5
24554: PPUSH
24555: CALL_OW 448
24559: IFFALSE 24592
// result := [ chassis , engine , control , weapon ] ;
24561: LD_ADDR_VAR 0 6
24565: PUSH
24566: LD_VAR 0 2
24570: PUSH
24571: LD_VAR 0 3
24575: PUSH
24576: LD_VAR 0 4
24580: PUSH
24581: LD_VAR 0 5
24585: PUSH
24586: EMPTY
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: ST_TO_ADDR
// end ;
24592: LD_VAR 0 6
24596: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24597: LD_INT 0
24599: PPUSH
// if not chassis or not engine then
24600: LD_VAR 0 1
24604: NOT
24605: PUSH
24606: LD_VAR 0 2
24610: NOT
24611: OR
24612: IFFALSE 24616
// exit ;
24614: GO 24812
// case engine of engine_solar :
24616: LD_VAR 0 2
24620: PUSH
24621: LD_INT 2
24623: DOUBLE
24624: EQUAL
24625: IFTRUE 24629
24627: GO 24667
24629: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24630: LD_ADDR_VAR 0 3
24634: PUSH
24635: LD_INT 11
24637: PUSH
24638: LD_INT 12
24640: PUSH
24641: LD_INT 13
24643: PUSH
24644: LD_INT 14
24646: PUSH
24647: LD_INT 1
24649: PUSH
24650: LD_INT 2
24652: PUSH
24653: LD_INT 3
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: ST_TO_ADDR
24665: GO 24796
24667: LD_INT 1
24669: DOUBLE
24670: EQUAL
24671: IFTRUE 24675
24673: GO 24737
24675: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24676: LD_ADDR_VAR 0 3
24680: PUSH
24681: LD_INT 11
24683: PUSH
24684: LD_INT 12
24686: PUSH
24687: LD_INT 13
24689: PUSH
24690: LD_INT 14
24692: PUSH
24693: LD_INT 1
24695: PUSH
24696: LD_INT 2
24698: PUSH
24699: LD_INT 3
24701: PUSH
24702: LD_INT 4
24704: PUSH
24705: LD_INT 5
24707: PUSH
24708: LD_INT 21
24710: PUSH
24711: LD_INT 23
24713: PUSH
24714: LD_INT 22
24716: PUSH
24717: LD_INT 24
24719: PUSH
24720: EMPTY
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: ST_TO_ADDR
24735: GO 24796
24737: LD_INT 3
24739: DOUBLE
24740: EQUAL
24741: IFTRUE 24745
24743: GO 24795
24745: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24746: LD_ADDR_VAR 0 3
24750: PUSH
24751: LD_INT 13
24753: PUSH
24754: LD_INT 14
24756: PUSH
24757: LD_INT 2
24759: PUSH
24760: LD_INT 3
24762: PUSH
24763: LD_INT 4
24765: PUSH
24766: LD_INT 5
24768: PUSH
24769: LD_INT 21
24771: PUSH
24772: LD_INT 22
24774: PUSH
24775: LD_INT 23
24777: PUSH
24778: LD_INT 24
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: ST_TO_ADDR
24793: GO 24796
24795: POP
// result := ( chassis in result ) ;
24796: LD_ADDR_VAR 0 3
24800: PUSH
24801: LD_VAR 0 1
24805: PUSH
24806: LD_VAR 0 3
24810: IN
24811: ST_TO_ADDR
// end ;
24812: LD_VAR 0 3
24816: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
24817: LD_INT 0
24819: PPUSH
// if not chassis or not weapon then
24820: LD_VAR 0 1
24824: NOT
24825: PUSH
24826: LD_VAR 0 2
24830: NOT
24831: OR
24832: IFFALSE 24836
// exit ;
24834: GO 25862
// case weapon of us_machine_gun :
24836: LD_VAR 0 2
24840: PUSH
24841: LD_INT 2
24843: DOUBLE
24844: EQUAL
24845: IFTRUE 24849
24847: GO 24879
24849: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
24850: LD_ADDR_VAR 0 3
24854: PUSH
24855: LD_INT 1
24857: PUSH
24858: LD_INT 2
24860: PUSH
24861: LD_INT 3
24863: PUSH
24864: LD_INT 4
24866: PUSH
24867: LD_INT 5
24869: PUSH
24870: EMPTY
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: ST_TO_ADDR
24877: GO 25846
24879: LD_INT 3
24881: DOUBLE
24882: EQUAL
24883: IFTRUE 24887
24885: GO 24917
24887: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
24888: LD_ADDR_VAR 0 3
24892: PUSH
24893: LD_INT 1
24895: PUSH
24896: LD_INT 2
24898: PUSH
24899: LD_INT 3
24901: PUSH
24902: LD_INT 4
24904: PUSH
24905: LD_INT 5
24907: PUSH
24908: EMPTY
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: ST_TO_ADDR
24915: GO 25846
24917: LD_INT 11
24919: DOUBLE
24920: EQUAL
24921: IFTRUE 24925
24923: GO 24955
24925: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
24926: LD_ADDR_VAR 0 3
24930: PUSH
24931: LD_INT 1
24933: PUSH
24934: LD_INT 2
24936: PUSH
24937: LD_INT 3
24939: PUSH
24940: LD_INT 4
24942: PUSH
24943: LD_INT 5
24945: PUSH
24946: EMPTY
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: ST_TO_ADDR
24953: GO 25846
24955: LD_INT 4
24957: DOUBLE
24958: EQUAL
24959: IFTRUE 24963
24961: GO 24989
24963: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
24964: LD_ADDR_VAR 0 3
24968: PUSH
24969: LD_INT 2
24971: PUSH
24972: LD_INT 3
24974: PUSH
24975: LD_INT 4
24977: PUSH
24978: LD_INT 5
24980: PUSH
24981: EMPTY
24982: LIST
24983: LIST
24984: LIST
24985: LIST
24986: ST_TO_ADDR
24987: GO 25846
24989: LD_INT 5
24991: DOUBLE
24992: EQUAL
24993: IFTRUE 24997
24995: GO 25023
24997: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
24998: LD_ADDR_VAR 0 3
25002: PUSH
25003: LD_INT 2
25005: PUSH
25006: LD_INT 3
25008: PUSH
25009: LD_INT 4
25011: PUSH
25012: LD_INT 5
25014: PUSH
25015: EMPTY
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: ST_TO_ADDR
25021: GO 25846
25023: LD_INT 9
25025: DOUBLE
25026: EQUAL
25027: IFTRUE 25031
25029: GO 25057
25031: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
25032: LD_ADDR_VAR 0 3
25036: PUSH
25037: LD_INT 2
25039: PUSH
25040: LD_INT 3
25042: PUSH
25043: LD_INT 4
25045: PUSH
25046: LD_INT 5
25048: PUSH
25049: EMPTY
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: ST_TO_ADDR
25055: GO 25846
25057: LD_INT 7
25059: DOUBLE
25060: EQUAL
25061: IFTRUE 25065
25063: GO 25091
25065: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
25066: LD_ADDR_VAR 0 3
25070: PUSH
25071: LD_INT 2
25073: PUSH
25074: LD_INT 3
25076: PUSH
25077: LD_INT 4
25079: PUSH
25080: LD_INT 5
25082: PUSH
25083: EMPTY
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: ST_TO_ADDR
25089: GO 25846
25091: LD_INT 12
25093: DOUBLE
25094: EQUAL
25095: IFTRUE 25099
25097: GO 25125
25099: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
25100: LD_ADDR_VAR 0 3
25104: PUSH
25105: LD_INT 2
25107: PUSH
25108: LD_INT 3
25110: PUSH
25111: LD_INT 4
25113: PUSH
25114: LD_INT 5
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: ST_TO_ADDR
25123: GO 25846
25125: LD_INT 13
25127: DOUBLE
25128: EQUAL
25129: IFTRUE 25133
25131: GO 25159
25133: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
25134: LD_ADDR_VAR 0 3
25138: PUSH
25139: LD_INT 2
25141: PUSH
25142: LD_INT 3
25144: PUSH
25145: LD_INT 4
25147: PUSH
25148: LD_INT 5
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: ST_TO_ADDR
25157: GO 25846
25159: LD_INT 14
25161: DOUBLE
25162: EQUAL
25163: IFTRUE 25167
25165: GO 25185
25167: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25168: LD_ADDR_VAR 0 3
25172: PUSH
25173: LD_INT 4
25175: PUSH
25176: LD_INT 5
25178: PUSH
25179: EMPTY
25180: LIST
25181: LIST
25182: ST_TO_ADDR
25183: GO 25846
25185: LD_INT 6
25187: DOUBLE
25188: EQUAL
25189: IFTRUE 25193
25191: GO 25211
25193: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25194: LD_ADDR_VAR 0 3
25198: PUSH
25199: LD_INT 4
25201: PUSH
25202: LD_INT 5
25204: PUSH
25205: EMPTY
25206: LIST
25207: LIST
25208: ST_TO_ADDR
25209: GO 25846
25211: LD_INT 10
25213: DOUBLE
25214: EQUAL
25215: IFTRUE 25219
25217: GO 25237
25219: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
25220: LD_ADDR_VAR 0 3
25224: PUSH
25225: LD_INT 4
25227: PUSH
25228: LD_INT 5
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: ST_TO_ADDR
25235: GO 25846
25237: LD_INT 22
25239: DOUBLE
25240: EQUAL
25241: IFTRUE 25245
25243: GO 25271
25245: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
25246: LD_ADDR_VAR 0 3
25250: PUSH
25251: LD_INT 11
25253: PUSH
25254: LD_INT 12
25256: PUSH
25257: LD_INT 13
25259: PUSH
25260: LD_INT 14
25262: PUSH
25263: EMPTY
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: ST_TO_ADDR
25269: GO 25846
25271: LD_INT 23
25273: DOUBLE
25274: EQUAL
25275: IFTRUE 25279
25277: GO 25305
25279: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
25280: LD_ADDR_VAR 0 3
25284: PUSH
25285: LD_INT 11
25287: PUSH
25288: LD_INT 12
25290: PUSH
25291: LD_INT 13
25293: PUSH
25294: LD_INT 14
25296: PUSH
25297: EMPTY
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: ST_TO_ADDR
25303: GO 25846
25305: LD_INT 24
25307: DOUBLE
25308: EQUAL
25309: IFTRUE 25313
25311: GO 25339
25313: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
25314: LD_ADDR_VAR 0 3
25318: PUSH
25319: LD_INT 11
25321: PUSH
25322: LD_INT 12
25324: PUSH
25325: LD_INT 13
25327: PUSH
25328: LD_INT 14
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: ST_TO_ADDR
25337: GO 25846
25339: LD_INT 30
25341: DOUBLE
25342: EQUAL
25343: IFTRUE 25347
25345: GO 25373
25347: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
25348: LD_ADDR_VAR 0 3
25352: PUSH
25353: LD_INT 11
25355: PUSH
25356: LD_INT 12
25358: PUSH
25359: LD_INT 13
25361: PUSH
25362: LD_INT 14
25364: PUSH
25365: EMPTY
25366: LIST
25367: LIST
25368: LIST
25369: LIST
25370: ST_TO_ADDR
25371: GO 25846
25373: LD_INT 25
25375: DOUBLE
25376: EQUAL
25377: IFTRUE 25381
25379: GO 25399
25381: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25382: LD_ADDR_VAR 0 3
25386: PUSH
25387: LD_INT 13
25389: PUSH
25390: LD_INT 14
25392: PUSH
25393: EMPTY
25394: LIST
25395: LIST
25396: ST_TO_ADDR
25397: GO 25846
25399: LD_INT 27
25401: DOUBLE
25402: EQUAL
25403: IFTRUE 25407
25405: GO 25425
25407: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25408: LD_ADDR_VAR 0 3
25412: PUSH
25413: LD_INT 13
25415: PUSH
25416: LD_INT 14
25418: PUSH
25419: EMPTY
25420: LIST
25421: LIST
25422: ST_TO_ADDR
25423: GO 25846
25425: LD_INT 28
25427: DOUBLE
25428: EQUAL
25429: IFTRUE 25433
25431: GO 25451
25433: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25434: LD_ADDR_VAR 0 3
25438: PUSH
25439: LD_INT 13
25441: PUSH
25442: LD_INT 14
25444: PUSH
25445: EMPTY
25446: LIST
25447: LIST
25448: ST_TO_ADDR
25449: GO 25846
25451: LD_INT 29
25453: DOUBLE
25454: EQUAL
25455: IFTRUE 25459
25457: GO 25477
25459: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25460: LD_ADDR_VAR 0 3
25464: PUSH
25465: LD_INT 13
25467: PUSH
25468: LD_INT 14
25470: PUSH
25471: EMPTY
25472: LIST
25473: LIST
25474: ST_TO_ADDR
25475: GO 25846
25477: LD_INT 31
25479: DOUBLE
25480: EQUAL
25481: IFTRUE 25485
25483: GO 25503
25485: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25486: LD_ADDR_VAR 0 3
25490: PUSH
25491: LD_INT 13
25493: PUSH
25494: LD_INT 14
25496: PUSH
25497: EMPTY
25498: LIST
25499: LIST
25500: ST_TO_ADDR
25501: GO 25846
25503: LD_INT 26
25505: DOUBLE
25506: EQUAL
25507: IFTRUE 25511
25509: GO 25529
25511: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25512: LD_ADDR_VAR 0 3
25516: PUSH
25517: LD_INT 13
25519: PUSH
25520: LD_INT 14
25522: PUSH
25523: EMPTY
25524: LIST
25525: LIST
25526: ST_TO_ADDR
25527: GO 25846
25529: LD_INT 42
25531: DOUBLE
25532: EQUAL
25533: IFTRUE 25537
25535: GO 25563
25537: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25538: LD_ADDR_VAR 0 3
25542: PUSH
25543: LD_INT 21
25545: PUSH
25546: LD_INT 22
25548: PUSH
25549: LD_INT 23
25551: PUSH
25552: LD_INT 24
25554: PUSH
25555: EMPTY
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: ST_TO_ADDR
25561: GO 25846
25563: LD_INT 43
25565: DOUBLE
25566: EQUAL
25567: IFTRUE 25571
25569: GO 25597
25571: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25572: LD_ADDR_VAR 0 3
25576: PUSH
25577: LD_INT 21
25579: PUSH
25580: LD_INT 22
25582: PUSH
25583: LD_INT 23
25585: PUSH
25586: LD_INT 24
25588: PUSH
25589: EMPTY
25590: LIST
25591: LIST
25592: LIST
25593: LIST
25594: ST_TO_ADDR
25595: GO 25846
25597: LD_INT 44
25599: DOUBLE
25600: EQUAL
25601: IFTRUE 25605
25603: GO 25631
25605: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25606: LD_ADDR_VAR 0 3
25610: PUSH
25611: LD_INT 21
25613: PUSH
25614: LD_INT 22
25616: PUSH
25617: LD_INT 23
25619: PUSH
25620: LD_INT 24
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: LIST
25627: LIST
25628: ST_TO_ADDR
25629: GO 25846
25631: LD_INT 45
25633: DOUBLE
25634: EQUAL
25635: IFTRUE 25639
25637: GO 25665
25639: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25640: LD_ADDR_VAR 0 3
25644: PUSH
25645: LD_INT 21
25647: PUSH
25648: LD_INT 22
25650: PUSH
25651: LD_INT 23
25653: PUSH
25654: LD_INT 24
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: LIST
25661: LIST
25662: ST_TO_ADDR
25663: GO 25846
25665: LD_INT 49
25667: DOUBLE
25668: EQUAL
25669: IFTRUE 25673
25671: GO 25699
25673: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25674: LD_ADDR_VAR 0 3
25678: PUSH
25679: LD_INT 21
25681: PUSH
25682: LD_INT 22
25684: PUSH
25685: LD_INT 23
25687: PUSH
25688: LD_INT 24
25690: PUSH
25691: EMPTY
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: ST_TO_ADDR
25697: GO 25846
25699: LD_INT 51
25701: DOUBLE
25702: EQUAL
25703: IFTRUE 25707
25705: GO 25733
25707: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
25708: LD_ADDR_VAR 0 3
25712: PUSH
25713: LD_INT 21
25715: PUSH
25716: LD_INT 22
25718: PUSH
25719: LD_INT 23
25721: PUSH
25722: LD_INT 24
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: LIST
25729: LIST
25730: ST_TO_ADDR
25731: GO 25846
25733: LD_INT 52
25735: DOUBLE
25736: EQUAL
25737: IFTRUE 25741
25739: GO 25767
25741: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
25742: LD_ADDR_VAR 0 3
25746: PUSH
25747: LD_INT 21
25749: PUSH
25750: LD_INT 22
25752: PUSH
25753: LD_INT 23
25755: PUSH
25756: LD_INT 24
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: LIST
25763: LIST
25764: ST_TO_ADDR
25765: GO 25846
25767: LD_INT 53
25769: DOUBLE
25770: EQUAL
25771: IFTRUE 25775
25773: GO 25793
25775: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
25776: LD_ADDR_VAR 0 3
25780: PUSH
25781: LD_INT 23
25783: PUSH
25784: LD_INT 24
25786: PUSH
25787: EMPTY
25788: LIST
25789: LIST
25790: ST_TO_ADDR
25791: GO 25846
25793: LD_INT 46
25795: DOUBLE
25796: EQUAL
25797: IFTRUE 25801
25799: GO 25819
25801: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
25802: LD_ADDR_VAR 0 3
25806: PUSH
25807: LD_INT 23
25809: PUSH
25810: LD_INT 24
25812: PUSH
25813: EMPTY
25814: LIST
25815: LIST
25816: ST_TO_ADDR
25817: GO 25846
25819: LD_INT 47
25821: DOUBLE
25822: EQUAL
25823: IFTRUE 25827
25825: GO 25845
25827: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25828: LD_ADDR_VAR 0 3
25832: PUSH
25833: LD_INT 23
25835: PUSH
25836: LD_INT 24
25838: PUSH
25839: EMPTY
25840: LIST
25841: LIST
25842: ST_TO_ADDR
25843: GO 25846
25845: POP
// result := ( chassis in result ) ;
25846: LD_ADDR_VAR 0 3
25850: PUSH
25851: LD_VAR 0 1
25855: PUSH
25856: LD_VAR 0 3
25860: IN
25861: ST_TO_ADDR
// end ;
25862: LD_VAR 0 3
25866: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
25867: LD_INT 0
25869: PPUSH
25870: PPUSH
25871: PPUSH
25872: PPUSH
25873: PPUSH
25874: PPUSH
25875: PPUSH
// result := array ;
25876: LD_ADDR_VAR 0 5
25880: PUSH
25881: LD_VAR 0 1
25885: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
25886: LD_VAR 0 1
25890: NOT
25891: PUSH
25892: LD_VAR 0 2
25896: NOT
25897: OR
25898: PUSH
25899: LD_VAR 0 3
25903: NOT
25904: OR
25905: PUSH
25906: LD_VAR 0 2
25910: PUSH
25911: LD_VAR 0 1
25915: GREATER
25916: OR
25917: PUSH
25918: LD_VAR 0 3
25922: PUSH
25923: LD_VAR 0 1
25927: GREATER
25928: OR
25929: IFFALSE 25933
// exit ;
25931: GO 26229
// if direction then
25933: LD_VAR 0 4
25937: IFFALSE 26001
// begin d := 1 ;
25939: LD_ADDR_VAR 0 9
25943: PUSH
25944: LD_INT 1
25946: ST_TO_ADDR
// if i_from > i_to then
25947: LD_VAR 0 2
25951: PUSH
25952: LD_VAR 0 3
25956: GREATER
25957: IFFALSE 25983
// length := ( array - i_from ) + i_to else
25959: LD_ADDR_VAR 0 11
25963: PUSH
25964: LD_VAR 0 1
25968: PUSH
25969: LD_VAR 0 2
25973: MINUS
25974: PUSH
25975: LD_VAR 0 3
25979: PLUS
25980: ST_TO_ADDR
25981: GO 25999
// length := i_to - i_from ;
25983: LD_ADDR_VAR 0 11
25987: PUSH
25988: LD_VAR 0 3
25992: PUSH
25993: LD_VAR 0 2
25997: MINUS
25998: ST_TO_ADDR
// end else
25999: GO 26062
// begin d := - 1 ;
26001: LD_ADDR_VAR 0 9
26005: PUSH
26006: LD_INT 1
26008: NEG
26009: ST_TO_ADDR
// if i_from > i_to then
26010: LD_VAR 0 2
26014: PUSH
26015: LD_VAR 0 3
26019: GREATER
26020: IFFALSE 26040
// length := i_from - i_to else
26022: LD_ADDR_VAR 0 11
26026: PUSH
26027: LD_VAR 0 2
26031: PUSH
26032: LD_VAR 0 3
26036: MINUS
26037: ST_TO_ADDR
26038: GO 26062
// length := ( array - i_to ) + i_from ;
26040: LD_ADDR_VAR 0 11
26044: PUSH
26045: LD_VAR 0 1
26049: PUSH
26050: LD_VAR 0 3
26054: MINUS
26055: PUSH
26056: LD_VAR 0 2
26060: PLUS
26061: ST_TO_ADDR
// end ; if not length then
26062: LD_VAR 0 11
26066: NOT
26067: IFFALSE 26071
// exit ;
26069: GO 26229
// tmp := array ;
26071: LD_ADDR_VAR 0 10
26075: PUSH
26076: LD_VAR 0 1
26080: ST_TO_ADDR
// for i = 1 to length do
26081: LD_ADDR_VAR 0 6
26085: PUSH
26086: DOUBLE
26087: LD_INT 1
26089: DEC
26090: ST_TO_ADDR
26091: LD_VAR 0 11
26095: PUSH
26096: FOR_TO
26097: IFFALSE 26217
// begin for j = 1 to array do
26099: LD_ADDR_VAR 0 7
26103: PUSH
26104: DOUBLE
26105: LD_INT 1
26107: DEC
26108: ST_TO_ADDR
26109: LD_VAR 0 1
26113: PUSH
26114: FOR_TO
26115: IFFALSE 26203
// begin k := j + d ;
26117: LD_ADDR_VAR 0 8
26121: PUSH
26122: LD_VAR 0 7
26126: PUSH
26127: LD_VAR 0 9
26131: PLUS
26132: ST_TO_ADDR
// if k > array then
26133: LD_VAR 0 8
26137: PUSH
26138: LD_VAR 0 1
26142: GREATER
26143: IFFALSE 26153
// k := 1 ;
26145: LD_ADDR_VAR 0 8
26149: PUSH
26150: LD_INT 1
26152: ST_TO_ADDR
// if not k then
26153: LD_VAR 0 8
26157: NOT
26158: IFFALSE 26170
// k := array ;
26160: LD_ADDR_VAR 0 8
26164: PUSH
26165: LD_VAR 0 1
26169: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
26170: LD_ADDR_VAR 0 10
26174: PUSH
26175: LD_VAR 0 10
26179: PPUSH
26180: LD_VAR 0 8
26184: PPUSH
26185: LD_VAR 0 1
26189: PUSH
26190: LD_VAR 0 7
26194: ARRAY
26195: PPUSH
26196: CALL_OW 1
26200: ST_TO_ADDR
// end ;
26201: GO 26114
26203: POP
26204: POP
// array := tmp ;
26205: LD_ADDR_VAR 0 1
26209: PUSH
26210: LD_VAR 0 10
26214: ST_TO_ADDR
// end ;
26215: GO 26096
26217: POP
26218: POP
// result := array ;
26219: LD_ADDR_VAR 0 5
26223: PUSH
26224: LD_VAR 0 1
26228: ST_TO_ADDR
// end ;
26229: LD_VAR 0 5
26233: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
26234: LD_INT 0
26236: PPUSH
26237: PPUSH
// result := 0 ;
26238: LD_ADDR_VAR 0 3
26242: PUSH
26243: LD_INT 0
26245: ST_TO_ADDR
// if not array or not value in array then
26246: LD_VAR 0 1
26250: NOT
26251: PUSH
26252: LD_VAR 0 2
26256: PUSH
26257: LD_VAR 0 1
26261: IN
26262: NOT
26263: OR
26264: IFFALSE 26268
// exit ;
26266: GO 26322
// for i = 1 to array do
26268: LD_ADDR_VAR 0 4
26272: PUSH
26273: DOUBLE
26274: LD_INT 1
26276: DEC
26277: ST_TO_ADDR
26278: LD_VAR 0 1
26282: PUSH
26283: FOR_TO
26284: IFFALSE 26320
// if value = array [ i ] then
26286: LD_VAR 0 2
26290: PUSH
26291: LD_VAR 0 1
26295: PUSH
26296: LD_VAR 0 4
26300: ARRAY
26301: EQUAL
26302: IFFALSE 26318
// begin result := i ;
26304: LD_ADDR_VAR 0 3
26308: PUSH
26309: LD_VAR 0 4
26313: ST_TO_ADDR
// exit ;
26314: POP
26315: POP
26316: GO 26322
// end ;
26318: GO 26283
26320: POP
26321: POP
// end ;
26322: LD_VAR 0 3
26326: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
26327: LD_INT 0
26329: PPUSH
// vc_chassis := chassis ;
26330: LD_ADDR_OWVAR 37
26334: PUSH
26335: LD_VAR 0 1
26339: ST_TO_ADDR
// vc_engine := engine ;
26340: LD_ADDR_OWVAR 39
26344: PUSH
26345: LD_VAR 0 2
26349: ST_TO_ADDR
// vc_control := control ;
26350: LD_ADDR_OWVAR 38
26354: PUSH
26355: LD_VAR 0 3
26359: ST_TO_ADDR
// vc_weapon := weapon ;
26360: LD_ADDR_OWVAR 40
26364: PUSH
26365: LD_VAR 0 4
26369: ST_TO_ADDR
// vc_fuel_battery := fuel ;
26370: LD_ADDR_OWVAR 41
26374: PUSH
26375: LD_VAR 0 5
26379: ST_TO_ADDR
// end ;
26380: LD_VAR 0 6
26384: RET
// export function WantPlant ( unit ) ; var task ; begin
26385: LD_INT 0
26387: PPUSH
26388: PPUSH
// result := false ;
26389: LD_ADDR_VAR 0 2
26393: PUSH
26394: LD_INT 0
26396: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
26397: LD_ADDR_VAR 0 3
26401: PUSH
26402: LD_VAR 0 1
26406: PPUSH
26407: CALL_OW 437
26411: ST_TO_ADDR
// if task then
26412: LD_VAR 0 3
26416: IFFALSE 26444
// if task [ 1 ] [ 1 ] = p then
26418: LD_VAR 0 3
26422: PUSH
26423: LD_INT 1
26425: ARRAY
26426: PUSH
26427: LD_INT 1
26429: ARRAY
26430: PUSH
26431: LD_STRING p
26433: EQUAL
26434: IFFALSE 26444
// result := true ;
26436: LD_ADDR_VAR 0 2
26440: PUSH
26441: LD_INT 1
26443: ST_TO_ADDR
// end ;
26444: LD_VAR 0 2
26448: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26449: LD_INT 0
26451: PPUSH
26452: PPUSH
26453: PPUSH
26454: PPUSH
// if pos < 1 then
26455: LD_VAR 0 2
26459: PUSH
26460: LD_INT 1
26462: LESS
26463: IFFALSE 26467
// exit ;
26465: GO 26770
// if pos = 1 then
26467: LD_VAR 0 2
26471: PUSH
26472: LD_INT 1
26474: EQUAL
26475: IFFALSE 26508
// result := Replace ( arr , pos [ 1 ] , value ) else
26477: LD_ADDR_VAR 0 4
26481: PUSH
26482: LD_VAR 0 1
26486: PPUSH
26487: LD_VAR 0 2
26491: PUSH
26492: LD_INT 1
26494: ARRAY
26495: PPUSH
26496: LD_VAR 0 3
26500: PPUSH
26501: CALL_OW 1
26505: ST_TO_ADDR
26506: GO 26770
// begin tmp := arr ;
26508: LD_ADDR_VAR 0 6
26512: PUSH
26513: LD_VAR 0 1
26517: ST_TO_ADDR
// s_arr := [ tmp ] ;
26518: LD_ADDR_VAR 0 7
26522: PUSH
26523: LD_VAR 0 6
26527: PUSH
26528: EMPTY
26529: LIST
26530: ST_TO_ADDR
// for i = 1 to pos - 1 do
26531: LD_ADDR_VAR 0 5
26535: PUSH
26536: DOUBLE
26537: LD_INT 1
26539: DEC
26540: ST_TO_ADDR
26541: LD_VAR 0 2
26545: PUSH
26546: LD_INT 1
26548: MINUS
26549: PUSH
26550: FOR_TO
26551: IFFALSE 26596
// begin tmp := tmp [ pos [ i ] ] ;
26553: LD_ADDR_VAR 0 6
26557: PUSH
26558: LD_VAR 0 6
26562: PUSH
26563: LD_VAR 0 2
26567: PUSH
26568: LD_VAR 0 5
26572: ARRAY
26573: ARRAY
26574: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26575: LD_ADDR_VAR 0 7
26579: PUSH
26580: LD_VAR 0 7
26584: PUSH
26585: LD_VAR 0 6
26589: PUSH
26590: EMPTY
26591: LIST
26592: ADD
26593: ST_TO_ADDR
// end ;
26594: GO 26550
26596: POP
26597: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26598: LD_ADDR_VAR 0 6
26602: PUSH
26603: LD_VAR 0 6
26607: PPUSH
26608: LD_VAR 0 2
26612: PUSH
26613: LD_VAR 0 2
26617: ARRAY
26618: PPUSH
26619: LD_VAR 0 3
26623: PPUSH
26624: CALL_OW 1
26628: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26629: LD_ADDR_VAR 0 7
26633: PUSH
26634: LD_VAR 0 7
26638: PPUSH
26639: LD_VAR 0 7
26643: PPUSH
26644: LD_VAR 0 6
26648: PPUSH
26649: CALL_OW 1
26653: ST_TO_ADDR
// for i = s_arr downto 2 do
26654: LD_ADDR_VAR 0 5
26658: PUSH
26659: DOUBLE
26660: LD_VAR 0 7
26664: INC
26665: ST_TO_ADDR
26666: LD_INT 2
26668: PUSH
26669: FOR_DOWNTO
26670: IFFALSE 26754
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26672: LD_ADDR_VAR 0 6
26676: PUSH
26677: LD_VAR 0 7
26681: PUSH
26682: LD_VAR 0 5
26686: PUSH
26687: LD_INT 1
26689: MINUS
26690: ARRAY
26691: PPUSH
26692: LD_VAR 0 2
26696: PUSH
26697: LD_VAR 0 5
26701: PUSH
26702: LD_INT 1
26704: MINUS
26705: ARRAY
26706: PPUSH
26707: LD_VAR 0 7
26711: PUSH
26712: LD_VAR 0 5
26716: ARRAY
26717: PPUSH
26718: CALL_OW 1
26722: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
26723: LD_ADDR_VAR 0 7
26727: PUSH
26728: LD_VAR 0 7
26732: PPUSH
26733: LD_VAR 0 5
26737: PUSH
26738: LD_INT 1
26740: MINUS
26741: PPUSH
26742: LD_VAR 0 6
26746: PPUSH
26747: CALL_OW 1
26751: ST_TO_ADDR
// end ;
26752: GO 26669
26754: POP
26755: POP
// result := s_arr [ 1 ] ;
26756: LD_ADDR_VAR 0 4
26760: PUSH
26761: LD_VAR 0 7
26765: PUSH
26766: LD_INT 1
26768: ARRAY
26769: ST_TO_ADDR
// end ; end ;
26770: LD_VAR 0 4
26774: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
26775: LD_INT 0
26777: PPUSH
26778: PPUSH
// if not list then
26779: LD_VAR 0 1
26783: NOT
26784: IFFALSE 26788
// exit ;
26786: GO 26879
// i := list [ pos1 ] ;
26788: LD_ADDR_VAR 0 5
26792: PUSH
26793: LD_VAR 0 1
26797: PUSH
26798: LD_VAR 0 2
26802: ARRAY
26803: ST_TO_ADDR
// if not i then
26804: LD_VAR 0 5
26808: NOT
26809: IFFALSE 26813
// exit ;
26811: GO 26879
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
26813: LD_ADDR_VAR 0 1
26817: PUSH
26818: LD_VAR 0 1
26822: PPUSH
26823: LD_VAR 0 2
26827: PPUSH
26828: LD_VAR 0 1
26832: PUSH
26833: LD_VAR 0 3
26837: ARRAY
26838: PPUSH
26839: CALL_OW 1
26843: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26844: LD_ADDR_VAR 0 1
26848: PUSH
26849: LD_VAR 0 1
26853: PPUSH
26854: LD_VAR 0 3
26858: PPUSH
26859: LD_VAR 0 5
26863: PPUSH
26864: CALL_OW 1
26868: ST_TO_ADDR
// result := list ;
26869: LD_ADDR_VAR 0 4
26873: PUSH
26874: LD_VAR 0 1
26878: ST_TO_ADDR
// end ;
26879: LD_VAR 0 4
26883: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
26884: LD_INT 0
26886: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
26887: LD_ADDR_VAR 0 5
26891: PUSH
26892: LD_VAR 0 1
26896: PPUSH
26897: CALL_OW 250
26901: PPUSH
26902: LD_VAR 0 1
26906: PPUSH
26907: CALL_OW 251
26911: PPUSH
26912: LD_VAR 0 2
26916: PPUSH
26917: LD_VAR 0 3
26921: PPUSH
26922: LD_VAR 0 4
26926: PPUSH
26927: CALL 26937 0 5
26931: ST_TO_ADDR
// end ;
26932: LD_VAR 0 5
26936: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
26937: LD_INT 0
26939: PPUSH
26940: PPUSH
26941: PPUSH
26942: PPUSH
// if not list then
26943: LD_VAR 0 3
26947: NOT
26948: IFFALSE 26952
// exit ;
26950: GO 27340
// result := [ ] ;
26952: LD_ADDR_VAR 0 6
26956: PUSH
26957: EMPTY
26958: ST_TO_ADDR
// for i in list do
26959: LD_ADDR_VAR 0 7
26963: PUSH
26964: LD_VAR 0 3
26968: PUSH
26969: FOR_IN
26970: IFFALSE 27172
// begin tmp := GetDistUnitXY ( i , x , y ) ;
26972: LD_ADDR_VAR 0 9
26976: PUSH
26977: LD_VAR 0 7
26981: PPUSH
26982: LD_VAR 0 1
26986: PPUSH
26987: LD_VAR 0 2
26991: PPUSH
26992: CALL_OW 297
26996: ST_TO_ADDR
// if not result then
26997: LD_VAR 0 6
27001: NOT
27002: IFFALSE 27028
// result := [ [ i , tmp ] ] else
27004: LD_ADDR_VAR 0 6
27008: PUSH
27009: LD_VAR 0 7
27013: PUSH
27014: LD_VAR 0 9
27018: PUSH
27019: EMPTY
27020: LIST
27021: LIST
27022: PUSH
27023: EMPTY
27024: LIST
27025: ST_TO_ADDR
27026: GO 27170
// begin if result [ result ] [ 2 ] < tmp then
27028: LD_VAR 0 6
27032: PUSH
27033: LD_VAR 0 6
27037: ARRAY
27038: PUSH
27039: LD_INT 2
27041: ARRAY
27042: PUSH
27043: LD_VAR 0 9
27047: LESS
27048: IFFALSE 27090
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27050: LD_ADDR_VAR 0 6
27054: PUSH
27055: LD_VAR 0 6
27059: PPUSH
27060: LD_VAR 0 6
27064: PUSH
27065: LD_INT 1
27067: PLUS
27068: PPUSH
27069: LD_VAR 0 7
27073: PUSH
27074: LD_VAR 0 9
27078: PUSH
27079: EMPTY
27080: LIST
27081: LIST
27082: PPUSH
27083: CALL_OW 2
27087: ST_TO_ADDR
27088: GO 27170
// for j = 1 to result do
27090: LD_ADDR_VAR 0 8
27094: PUSH
27095: DOUBLE
27096: LD_INT 1
27098: DEC
27099: ST_TO_ADDR
27100: LD_VAR 0 6
27104: PUSH
27105: FOR_TO
27106: IFFALSE 27168
// begin if tmp < result [ j ] [ 2 ] then
27108: LD_VAR 0 9
27112: PUSH
27113: LD_VAR 0 6
27117: PUSH
27118: LD_VAR 0 8
27122: ARRAY
27123: PUSH
27124: LD_INT 2
27126: ARRAY
27127: LESS
27128: IFFALSE 27166
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27130: LD_ADDR_VAR 0 6
27134: PUSH
27135: LD_VAR 0 6
27139: PPUSH
27140: LD_VAR 0 8
27144: PPUSH
27145: LD_VAR 0 7
27149: PUSH
27150: LD_VAR 0 9
27154: PUSH
27155: EMPTY
27156: LIST
27157: LIST
27158: PPUSH
27159: CALL_OW 2
27163: ST_TO_ADDR
// break ;
27164: GO 27168
// end ; end ;
27166: GO 27105
27168: POP
27169: POP
// end ; end ;
27170: GO 26969
27172: POP
27173: POP
// if result and not asc then
27174: LD_VAR 0 6
27178: PUSH
27179: LD_VAR 0 4
27183: NOT
27184: AND
27185: IFFALSE 27260
// begin tmp := result ;
27187: LD_ADDR_VAR 0 9
27191: PUSH
27192: LD_VAR 0 6
27196: ST_TO_ADDR
// for i = tmp downto 1 do
27197: LD_ADDR_VAR 0 7
27201: PUSH
27202: DOUBLE
27203: LD_VAR 0 9
27207: INC
27208: ST_TO_ADDR
27209: LD_INT 1
27211: PUSH
27212: FOR_DOWNTO
27213: IFFALSE 27258
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
27215: LD_ADDR_VAR 0 6
27219: PUSH
27220: LD_VAR 0 6
27224: PPUSH
27225: LD_VAR 0 9
27229: PUSH
27230: LD_VAR 0 7
27234: MINUS
27235: PUSH
27236: LD_INT 1
27238: PLUS
27239: PPUSH
27240: LD_VAR 0 9
27244: PUSH
27245: LD_VAR 0 7
27249: ARRAY
27250: PPUSH
27251: CALL_OW 1
27255: ST_TO_ADDR
27256: GO 27212
27258: POP
27259: POP
// end ; tmp := [ ] ;
27260: LD_ADDR_VAR 0 9
27264: PUSH
27265: EMPTY
27266: ST_TO_ADDR
// if mode then
27267: LD_VAR 0 5
27271: IFFALSE 27340
// begin for i = 1 to result do
27273: LD_ADDR_VAR 0 7
27277: PUSH
27278: DOUBLE
27279: LD_INT 1
27281: DEC
27282: ST_TO_ADDR
27283: LD_VAR 0 6
27287: PUSH
27288: FOR_TO
27289: IFFALSE 27328
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27291: LD_ADDR_VAR 0 9
27295: PUSH
27296: LD_VAR 0 9
27300: PPUSH
27301: LD_VAR 0 7
27305: PPUSH
27306: LD_VAR 0 6
27310: PUSH
27311: LD_VAR 0 7
27315: ARRAY
27316: PUSH
27317: LD_INT 1
27319: ARRAY
27320: PPUSH
27321: CALL_OW 1
27325: ST_TO_ADDR
27326: GO 27288
27328: POP
27329: POP
// result := tmp ;
27330: LD_ADDR_VAR 0 6
27334: PUSH
27335: LD_VAR 0 9
27339: ST_TO_ADDR
// end ; end ;
27340: LD_VAR 0 6
27344: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27345: LD_INT 0
27347: PPUSH
27348: PPUSH
27349: PPUSH
27350: PPUSH
27351: PPUSH
27352: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27353: LD_ADDR_VAR 0 5
27357: PUSH
27358: LD_INT 0
27360: PUSH
27361: LD_INT 0
27363: PUSH
27364: LD_INT 0
27366: PUSH
27367: EMPTY
27368: PUSH
27369: EMPTY
27370: LIST
27371: LIST
27372: LIST
27373: LIST
27374: ST_TO_ADDR
// if not x or not y then
27375: LD_VAR 0 2
27379: NOT
27380: PUSH
27381: LD_VAR 0 3
27385: NOT
27386: OR
27387: IFFALSE 27391
// exit ;
27389: GO 29037
// if not range then
27391: LD_VAR 0 4
27395: NOT
27396: IFFALSE 27406
// range := 10 ;
27398: LD_ADDR_VAR 0 4
27402: PUSH
27403: LD_INT 10
27405: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27406: LD_ADDR_VAR 0 8
27410: PUSH
27411: LD_INT 81
27413: PUSH
27414: LD_VAR 0 1
27418: PUSH
27419: EMPTY
27420: LIST
27421: LIST
27422: PUSH
27423: LD_INT 92
27425: PUSH
27426: LD_VAR 0 2
27430: PUSH
27431: LD_VAR 0 3
27435: PUSH
27436: LD_VAR 0 4
27440: PUSH
27441: EMPTY
27442: LIST
27443: LIST
27444: LIST
27445: LIST
27446: PUSH
27447: LD_INT 3
27449: PUSH
27450: LD_INT 21
27452: PUSH
27453: LD_INT 3
27455: PUSH
27456: EMPTY
27457: LIST
27458: LIST
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: PUSH
27464: EMPTY
27465: LIST
27466: LIST
27467: LIST
27468: PPUSH
27469: CALL_OW 69
27473: ST_TO_ADDR
// if not tmp then
27474: LD_VAR 0 8
27478: NOT
27479: IFFALSE 27483
// exit ;
27481: GO 29037
// for i in tmp do
27483: LD_ADDR_VAR 0 6
27487: PUSH
27488: LD_VAR 0 8
27492: PUSH
27493: FOR_IN
27494: IFFALSE 29012
// begin points := [ 0 , 0 , 0 ] ;
27496: LD_ADDR_VAR 0 9
27500: PUSH
27501: LD_INT 0
27503: PUSH
27504: LD_INT 0
27506: PUSH
27507: LD_INT 0
27509: PUSH
27510: EMPTY
27511: LIST
27512: LIST
27513: LIST
27514: ST_TO_ADDR
// bpoints := 1 ;
27515: LD_ADDR_VAR 0 10
27519: PUSH
27520: LD_INT 1
27522: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27523: LD_VAR 0 6
27527: PPUSH
27528: CALL_OW 247
27532: PUSH
27533: LD_INT 1
27535: DOUBLE
27536: EQUAL
27537: IFTRUE 27541
27539: GO 28119
27541: POP
// begin if GetClass ( i ) = 1 then
27542: LD_VAR 0 6
27546: PPUSH
27547: CALL_OW 257
27551: PUSH
27552: LD_INT 1
27554: EQUAL
27555: IFFALSE 27576
// points := [ 10 , 5 , 3 ] ;
27557: LD_ADDR_VAR 0 9
27561: PUSH
27562: LD_INT 10
27564: PUSH
27565: LD_INT 5
27567: PUSH
27568: LD_INT 3
27570: PUSH
27571: EMPTY
27572: LIST
27573: LIST
27574: LIST
27575: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27576: LD_VAR 0 6
27580: PPUSH
27581: CALL_OW 257
27585: PUSH
27586: LD_INT 2
27588: PUSH
27589: LD_INT 3
27591: PUSH
27592: LD_INT 4
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: LIST
27599: IN
27600: IFFALSE 27621
// points := [ 3 , 2 , 1 ] ;
27602: LD_ADDR_VAR 0 9
27606: PUSH
27607: LD_INT 3
27609: PUSH
27610: LD_INT 2
27612: PUSH
27613: LD_INT 1
27615: PUSH
27616: EMPTY
27617: LIST
27618: LIST
27619: LIST
27620: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27621: LD_VAR 0 6
27625: PPUSH
27626: CALL_OW 257
27630: PUSH
27631: LD_INT 5
27633: EQUAL
27634: IFFALSE 27655
// points := [ 130 , 5 , 2 ] ;
27636: LD_ADDR_VAR 0 9
27640: PUSH
27641: LD_INT 130
27643: PUSH
27644: LD_INT 5
27646: PUSH
27647: LD_INT 2
27649: PUSH
27650: EMPTY
27651: LIST
27652: LIST
27653: LIST
27654: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27655: LD_VAR 0 6
27659: PPUSH
27660: CALL_OW 257
27664: PUSH
27665: LD_INT 8
27667: EQUAL
27668: IFFALSE 27689
// points := [ 35 , 35 , 30 ] ;
27670: LD_ADDR_VAR 0 9
27674: PUSH
27675: LD_INT 35
27677: PUSH
27678: LD_INT 35
27680: PUSH
27681: LD_INT 30
27683: PUSH
27684: EMPTY
27685: LIST
27686: LIST
27687: LIST
27688: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27689: LD_VAR 0 6
27693: PPUSH
27694: CALL_OW 257
27698: PUSH
27699: LD_INT 9
27701: EQUAL
27702: IFFALSE 27723
// points := [ 20 , 55 , 40 ] ;
27704: LD_ADDR_VAR 0 9
27708: PUSH
27709: LD_INT 20
27711: PUSH
27712: LD_INT 55
27714: PUSH
27715: LD_INT 40
27717: PUSH
27718: EMPTY
27719: LIST
27720: LIST
27721: LIST
27722: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27723: LD_VAR 0 6
27727: PPUSH
27728: CALL_OW 257
27732: PUSH
27733: LD_INT 12
27735: PUSH
27736: LD_INT 16
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: IN
27743: IFFALSE 27764
// points := [ 5 , 3 , 2 ] ;
27745: LD_ADDR_VAR 0 9
27749: PUSH
27750: LD_INT 5
27752: PUSH
27753: LD_INT 3
27755: PUSH
27756: LD_INT 2
27758: PUSH
27759: EMPTY
27760: LIST
27761: LIST
27762: LIST
27763: ST_TO_ADDR
// if GetClass ( i ) = 17 then
27764: LD_VAR 0 6
27768: PPUSH
27769: CALL_OW 257
27773: PUSH
27774: LD_INT 17
27776: EQUAL
27777: IFFALSE 27798
// points := [ 100 , 50 , 75 ] ;
27779: LD_ADDR_VAR 0 9
27783: PUSH
27784: LD_INT 100
27786: PUSH
27787: LD_INT 50
27789: PUSH
27790: LD_INT 75
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: LIST
27797: ST_TO_ADDR
// if GetClass ( i ) = 15 then
27798: LD_VAR 0 6
27802: PPUSH
27803: CALL_OW 257
27807: PUSH
27808: LD_INT 15
27810: EQUAL
27811: IFFALSE 27832
// points := [ 10 , 5 , 3 ] ;
27813: LD_ADDR_VAR 0 9
27817: PUSH
27818: LD_INT 10
27820: PUSH
27821: LD_INT 5
27823: PUSH
27824: LD_INT 3
27826: PUSH
27827: EMPTY
27828: LIST
27829: LIST
27830: LIST
27831: ST_TO_ADDR
// if GetClass ( i ) = 14 then
27832: LD_VAR 0 6
27836: PPUSH
27837: CALL_OW 257
27841: PUSH
27842: LD_INT 14
27844: EQUAL
27845: IFFALSE 27866
// points := [ 10 , 0 , 0 ] ;
27847: LD_ADDR_VAR 0 9
27851: PUSH
27852: LD_INT 10
27854: PUSH
27855: LD_INT 0
27857: PUSH
27858: LD_INT 0
27860: PUSH
27861: EMPTY
27862: LIST
27863: LIST
27864: LIST
27865: ST_TO_ADDR
// if GetClass ( i ) = 11 then
27866: LD_VAR 0 6
27870: PPUSH
27871: CALL_OW 257
27875: PUSH
27876: LD_INT 11
27878: EQUAL
27879: IFFALSE 27900
// points := [ 30 , 10 , 5 ] ;
27881: LD_ADDR_VAR 0 9
27885: PUSH
27886: LD_INT 30
27888: PUSH
27889: LD_INT 10
27891: PUSH
27892: LD_INT 5
27894: PUSH
27895: EMPTY
27896: LIST
27897: LIST
27898: LIST
27899: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
27900: LD_VAR 0 1
27904: PPUSH
27905: LD_INT 5
27907: PPUSH
27908: CALL_OW 321
27912: PUSH
27913: LD_INT 2
27915: EQUAL
27916: IFFALSE 27933
// bpoints := bpoints * 1.8 ;
27918: LD_ADDR_VAR 0 10
27922: PUSH
27923: LD_VAR 0 10
27927: PUSH
27928: LD_REAL  1.80000000000000E+0000
27931: MUL
27932: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
27933: LD_VAR 0 6
27937: PPUSH
27938: CALL_OW 257
27942: PUSH
27943: LD_INT 1
27945: PUSH
27946: LD_INT 2
27948: PUSH
27949: LD_INT 3
27951: PUSH
27952: LD_INT 4
27954: PUSH
27955: EMPTY
27956: LIST
27957: LIST
27958: LIST
27959: LIST
27960: IN
27961: PUSH
27962: LD_VAR 0 1
27966: PPUSH
27967: LD_INT 51
27969: PPUSH
27970: CALL_OW 321
27974: PUSH
27975: LD_INT 2
27977: EQUAL
27978: AND
27979: IFFALSE 27996
// bpoints := bpoints * 1.2 ;
27981: LD_ADDR_VAR 0 10
27985: PUSH
27986: LD_VAR 0 10
27990: PUSH
27991: LD_REAL  1.20000000000000E+0000
27994: MUL
27995: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
27996: LD_VAR 0 6
28000: PPUSH
28001: CALL_OW 257
28005: PUSH
28006: LD_INT 5
28008: PUSH
28009: LD_INT 7
28011: PUSH
28012: LD_INT 9
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: LIST
28019: IN
28020: PUSH
28021: LD_VAR 0 1
28025: PPUSH
28026: LD_INT 52
28028: PPUSH
28029: CALL_OW 321
28033: PUSH
28034: LD_INT 2
28036: EQUAL
28037: AND
28038: IFFALSE 28055
// bpoints := bpoints * 1.5 ;
28040: LD_ADDR_VAR 0 10
28044: PUSH
28045: LD_VAR 0 10
28049: PUSH
28050: LD_REAL  1.50000000000000E+0000
28053: MUL
28054: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
28055: LD_VAR 0 1
28059: PPUSH
28060: LD_INT 66
28062: PPUSH
28063: CALL_OW 321
28067: PUSH
28068: LD_INT 2
28070: EQUAL
28071: IFFALSE 28088
// bpoints := bpoints * 1.1 ;
28073: LD_ADDR_VAR 0 10
28077: PUSH
28078: LD_VAR 0 10
28082: PUSH
28083: LD_REAL  1.10000000000000E+0000
28086: MUL
28087: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28088: LD_ADDR_VAR 0 10
28092: PUSH
28093: LD_VAR 0 10
28097: PUSH
28098: LD_VAR 0 6
28102: PPUSH
28103: LD_INT 1
28105: PPUSH
28106: CALL_OW 259
28110: PUSH
28111: LD_REAL  1.15000000000000E+0000
28114: MUL
28115: MUL
28116: ST_TO_ADDR
// end ; unit_vehicle :
28117: GO 28941
28119: LD_INT 2
28121: DOUBLE
28122: EQUAL
28123: IFTRUE 28127
28125: GO 28929
28127: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28128: LD_VAR 0 6
28132: PPUSH
28133: CALL_OW 264
28137: PUSH
28138: LD_INT 2
28140: PUSH
28141: LD_INT 42
28143: PUSH
28144: LD_INT 24
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: LIST
28151: IN
28152: IFFALSE 28173
// points := [ 25 , 5 , 3 ] ;
28154: LD_ADDR_VAR 0 9
28158: PUSH
28159: LD_INT 25
28161: PUSH
28162: LD_INT 5
28164: PUSH
28165: LD_INT 3
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: LIST
28172: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
28173: LD_VAR 0 6
28177: PPUSH
28178: CALL_OW 264
28182: PUSH
28183: LD_INT 4
28185: PUSH
28186: LD_INT 43
28188: PUSH
28189: LD_INT 25
28191: PUSH
28192: EMPTY
28193: LIST
28194: LIST
28195: LIST
28196: IN
28197: IFFALSE 28218
// points := [ 40 , 15 , 5 ] ;
28199: LD_ADDR_VAR 0 9
28203: PUSH
28204: LD_INT 40
28206: PUSH
28207: LD_INT 15
28209: PUSH
28210: LD_INT 5
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: LIST
28217: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
28218: LD_VAR 0 6
28222: PPUSH
28223: CALL_OW 264
28227: PUSH
28228: LD_INT 3
28230: PUSH
28231: LD_INT 23
28233: PUSH
28234: EMPTY
28235: LIST
28236: LIST
28237: IN
28238: IFFALSE 28259
// points := [ 7 , 25 , 8 ] ;
28240: LD_ADDR_VAR 0 9
28244: PUSH
28245: LD_INT 7
28247: PUSH
28248: LD_INT 25
28250: PUSH
28251: LD_INT 8
28253: PUSH
28254: EMPTY
28255: LIST
28256: LIST
28257: LIST
28258: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28259: LD_VAR 0 6
28263: PPUSH
28264: CALL_OW 264
28268: PUSH
28269: LD_INT 5
28271: PUSH
28272: LD_INT 27
28274: PUSH
28275: LD_INT 44
28277: PUSH
28278: EMPTY
28279: LIST
28280: LIST
28281: LIST
28282: IN
28283: IFFALSE 28304
// points := [ 14 , 50 , 16 ] ;
28285: LD_ADDR_VAR 0 9
28289: PUSH
28290: LD_INT 14
28292: PUSH
28293: LD_INT 50
28295: PUSH
28296: LD_INT 16
28298: PUSH
28299: EMPTY
28300: LIST
28301: LIST
28302: LIST
28303: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28304: LD_VAR 0 6
28308: PPUSH
28309: CALL_OW 264
28313: PUSH
28314: LD_INT 6
28316: PUSH
28317: LD_INT 46
28319: PUSH
28320: EMPTY
28321: LIST
28322: LIST
28323: IN
28324: IFFALSE 28345
// points := [ 32 , 120 , 70 ] ;
28326: LD_ADDR_VAR 0 9
28330: PUSH
28331: LD_INT 32
28333: PUSH
28334: LD_INT 120
28336: PUSH
28337: LD_INT 70
28339: PUSH
28340: EMPTY
28341: LIST
28342: LIST
28343: LIST
28344: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
28345: LD_VAR 0 6
28349: PPUSH
28350: CALL_OW 264
28354: PUSH
28355: LD_INT 7
28357: PUSH
28358: LD_INT 28
28360: PUSH
28361: LD_INT 45
28363: PUSH
28364: EMPTY
28365: LIST
28366: LIST
28367: LIST
28368: IN
28369: IFFALSE 28390
// points := [ 35 , 20 , 45 ] ;
28371: LD_ADDR_VAR 0 9
28375: PUSH
28376: LD_INT 35
28378: PUSH
28379: LD_INT 20
28381: PUSH
28382: LD_INT 45
28384: PUSH
28385: EMPTY
28386: LIST
28387: LIST
28388: LIST
28389: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28390: LD_VAR 0 6
28394: PPUSH
28395: CALL_OW 264
28399: PUSH
28400: LD_INT 47
28402: PUSH
28403: EMPTY
28404: LIST
28405: IN
28406: IFFALSE 28427
// points := [ 67 , 45 , 75 ] ;
28408: LD_ADDR_VAR 0 9
28412: PUSH
28413: LD_INT 67
28415: PUSH
28416: LD_INT 45
28418: PUSH
28419: LD_INT 75
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: LIST
28426: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28427: LD_VAR 0 6
28431: PPUSH
28432: CALL_OW 264
28436: PUSH
28437: LD_INT 26
28439: PUSH
28440: EMPTY
28441: LIST
28442: IN
28443: IFFALSE 28464
// points := [ 120 , 30 , 80 ] ;
28445: LD_ADDR_VAR 0 9
28449: PUSH
28450: LD_INT 120
28452: PUSH
28453: LD_INT 30
28455: PUSH
28456: LD_INT 80
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: LIST
28463: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28464: LD_VAR 0 6
28468: PPUSH
28469: CALL_OW 264
28473: PUSH
28474: LD_INT 22
28476: PUSH
28477: EMPTY
28478: LIST
28479: IN
28480: IFFALSE 28501
// points := [ 40 , 1 , 1 ] ;
28482: LD_ADDR_VAR 0 9
28486: PUSH
28487: LD_INT 40
28489: PUSH
28490: LD_INT 1
28492: PUSH
28493: LD_INT 1
28495: PUSH
28496: EMPTY
28497: LIST
28498: LIST
28499: LIST
28500: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28501: LD_VAR 0 6
28505: PPUSH
28506: CALL_OW 264
28510: PUSH
28511: LD_INT 29
28513: PUSH
28514: EMPTY
28515: LIST
28516: IN
28517: IFFALSE 28538
// points := [ 70 , 200 , 400 ] ;
28519: LD_ADDR_VAR 0 9
28523: PUSH
28524: LD_INT 70
28526: PUSH
28527: LD_INT 200
28529: PUSH
28530: LD_INT 400
28532: PUSH
28533: EMPTY
28534: LIST
28535: LIST
28536: LIST
28537: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28538: LD_VAR 0 6
28542: PPUSH
28543: CALL_OW 264
28547: PUSH
28548: LD_INT 14
28550: PUSH
28551: LD_INT 53
28553: PUSH
28554: EMPTY
28555: LIST
28556: LIST
28557: IN
28558: IFFALSE 28579
// points := [ 40 , 10 , 20 ] ;
28560: LD_ADDR_VAR 0 9
28564: PUSH
28565: LD_INT 40
28567: PUSH
28568: LD_INT 10
28570: PUSH
28571: LD_INT 20
28573: PUSH
28574: EMPTY
28575: LIST
28576: LIST
28577: LIST
28578: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28579: LD_VAR 0 6
28583: PPUSH
28584: CALL_OW 264
28588: PUSH
28589: LD_INT 9
28591: PUSH
28592: EMPTY
28593: LIST
28594: IN
28595: IFFALSE 28616
// points := [ 5 , 70 , 20 ] ;
28597: LD_ADDR_VAR 0 9
28601: PUSH
28602: LD_INT 5
28604: PUSH
28605: LD_INT 70
28607: PUSH
28608: LD_INT 20
28610: PUSH
28611: EMPTY
28612: LIST
28613: LIST
28614: LIST
28615: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28616: LD_VAR 0 6
28620: PPUSH
28621: CALL_OW 264
28625: PUSH
28626: LD_INT 10
28628: PUSH
28629: EMPTY
28630: LIST
28631: IN
28632: IFFALSE 28653
// points := [ 35 , 110 , 70 ] ;
28634: LD_ADDR_VAR 0 9
28638: PUSH
28639: LD_INT 35
28641: PUSH
28642: LD_INT 110
28644: PUSH
28645: LD_INT 70
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: LIST
28652: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28653: LD_VAR 0 6
28657: PPUSH
28658: CALL_OW 265
28662: PUSH
28663: LD_INT 25
28665: EQUAL
28666: IFFALSE 28687
// points := [ 80 , 65 , 100 ] ;
28668: LD_ADDR_VAR 0 9
28672: PUSH
28673: LD_INT 80
28675: PUSH
28676: LD_INT 65
28678: PUSH
28679: LD_INT 100
28681: PUSH
28682: EMPTY
28683: LIST
28684: LIST
28685: LIST
28686: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28687: LD_VAR 0 6
28691: PPUSH
28692: CALL_OW 263
28696: PUSH
28697: LD_INT 1
28699: EQUAL
28700: IFFALSE 28735
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28702: LD_ADDR_VAR 0 10
28706: PUSH
28707: LD_VAR 0 10
28711: PUSH
28712: LD_VAR 0 6
28716: PPUSH
28717: CALL_OW 311
28721: PPUSH
28722: LD_INT 3
28724: PPUSH
28725: CALL_OW 259
28729: PUSH
28730: LD_INT 4
28732: MUL
28733: MUL
28734: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28735: LD_VAR 0 6
28739: PPUSH
28740: CALL_OW 263
28744: PUSH
28745: LD_INT 2
28747: EQUAL
28748: IFFALSE 28799
// begin j := IsControledBy ( i ) ;
28750: LD_ADDR_VAR 0 7
28754: PUSH
28755: LD_VAR 0 6
28759: PPUSH
28760: CALL_OW 312
28764: ST_TO_ADDR
// if j then
28765: LD_VAR 0 7
28769: IFFALSE 28799
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
28771: LD_ADDR_VAR 0 10
28775: PUSH
28776: LD_VAR 0 10
28780: PUSH
28781: LD_VAR 0 7
28785: PPUSH
28786: LD_INT 3
28788: PPUSH
28789: CALL_OW 259
28793: PUSH
28794: LD_INT 3
28796: MUL
28797: MUL
28798: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
28799: LD_VAR 0 6
28803: PPUSH
28804: CALL_OW 264
28808: PUSH
28809: LD_INT 5
28811: PUSH
28812: LD_INT 6
28814: PUSH
28815: LD_INT 46
28817: PUSH
28818: LD_INT 44
28820: PUSH
28821: LD_INT 47
28823: PUSH
28824: LD_INT 45
28826: PUSH
28827: LD_INT 28
28829: PUSH
28830: LD_INT 7
28832: PUSH
28833: LD_INT 27
28835: PUSH
28836: LD_INT 29
28838: PUSH
28839: EMPTY
28840: LIST
28841: LIST
28842: LIST
28843: LIST
28844: LIST
28845: LIST
28846: LIST
28847: LIST
28848: LIST
28849: LIST
28850: IN
28851: PUSH
28852: LD_VAR 0 1
28856: PPUSH
28857: LD_INT 52
28859: PPUSH
28860: CALL_OW 321
28864: PUSH
28865: LD_INT 2
28867: EQUAL
28868: AND
28869: IFFALSE 28886
// bpoints := bpoints * 1.2 ;
28871: LD_ADDR_VAR 0 10
28875: PUSH
28876: LD_VAR 0 10
28880: PUSH
28881: LD_REAL  1.20000000000000E+0000
28884: MUL
28885: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
28886: LD_VAR 0 6
28890: PPUSH
28891: CALL_OW 264
28895: PUSH
28896: LD_INT 6
28898: PUSH
28899: LD_INT 46
28901: PUSH
28902: LD_INT 47
28904: PUSH
28905: EMPTY
28906: LIST
28907: LIST
28908: LIST
28909: IN
28910: IFFALSE 28927
// bpoints := bpoints * 1.2 ;
28912: LD_ADDR_VAR 0 10
28916: PUSH
28917: LD_VAR 0 10
28921: PUSH
28922: LD_REAL  1.20000000000000E+0000
28925: MUL
28926: ST_TO_ADDR
// end ; unit_building :
28927: GO 28941
28929: LD_INT 3
28931: DOUBLE
28932: EQUAL
28933: IFTRUE 28937
28935: GO 28940
28937: POP
// ; end ;
28938: GO 28941
28940: POP
// for j = 1 to 3 do
28941: LD_ADDR_VAR 0 7
28945: PUSH
28946: DOUBLE
28947: LD_INT 1
28949: DEC
28950: ST_TO_ADDR
28951: LD_INT 3
28953: PUSH
28954: FOR_TO
28955: IFFALSE 29008
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
28957: LD_ADDR_VAR 0 5
28961: PUSH
28962: LD_VAR 0 5
28966: PPUSH
28967: LD_VAR 0 7
28971: PPUSH
28972: LD_VAR 0 5
28976: PUSH
28977: LD_VAR 0 7
28981: ARRAY
28982: PUSH
28983: LD_VAR 0 9
28987: PUSH
28988: LD_VAR 0 7
28992: ARRAY
28993: PUSH
28994: LD_VAR 0 10
28998: MUL
28999: PLUS
29000: PPUSH
29001: CALL_OW 1
29005: ST_TO_ADDR
29006: GO 28954
29008: POP
29009: POP
// end ;
29010: GO 27493
29012: POP
29013: POP
// result := Replace ( result , 4 , tmp ) ;
29014: LD_ADDR_VAR 0 5
29018: PUSH
29019: LD_VAR 0 5
29023: PPUSH
29024: LD_INT 4
29026: PPUSH
29027: LD_VAR 0 8
29031: PPUSH
29032: CALL_OW 1
29036: ST_TO_ADDR
// end ;
29037: LD_VAR 0 5
29041: RET
// export function DangerAtRange ( unit , range ) ; begin
29042: LD_INT 0
29044: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
29045: LD_ADDR_VAR 0 3
29049: PUSH
29050: LD_VAR 0 1
29054: PPUSH
29055: CALL_OW 255
29059: PPUSH
29060: LD_VAR 0 1
29064: PPUSH
29065: CALL_OW 250
29069: PPUSH
29070: LD_VAR 0 1
29074: PPUSH
29075: CALL_OW 251
29079: PPUSH
29080: LD_VAR 0 2
29084: PPUSH
29085: CALL 27345 0 4
29089: ST_TO_ADDR
// end ;
29090: LD_VAR 0 3
29094: RET
// export function DangerInArea ( side , area ) ; begin
29095: LD_INT 0
29097: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29098: LD_ADDR_VAR 0 3
29102: PUSH
29103: LD_VAR 0 2
29107: PPUSH
29108: LD_INT 81
29110: PUSH
29111: LD_VAR 0 1
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: PPUSH
29120: CALL_OW 70
29124: ST_TO_ADDR
// end ;
29125: LD_VAR 0 3
29129: RET
// export function IsExtension ( b ) ; begin
29130: LD_INT 0
29132: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29133: LD_ADDR_VAR 0 2
29137: PUSH
29138: LD_VAR 0 1
29142: PUSH
29143: LD_INT 23
29145: PUSH
29146: LD_INT 20
29148: PUSH
29149: LD_INT 22
29151: PUSH
29152: LD_INT 17
29154: PUSH
29155: LD_INT 24
29157: PUSH
29158: LD_INT 21
29160: PUSH
29161: LD_INT 19
29163: PUSH
29164: LD_INT 16
29166: PUSH
29167: LD_INT 25
29169: PUSH
29170: LD_INT 18
29172: PUSH
29173: EMPTY
29174: LIST
29175: LIST
29176: LIST
29177: LIST
29178: LIST
29179: LIST
29180: LIST
29181: LIST
29182: LIST
29183: LIST
29184: IN
29185: ST_TO_ADDR
// end ;
29186: LD_VAR 0 2
29190: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
29191: LD_INT 0
29193: PPUSH
29194: PPUSH
29195: PPUSH
// result := [ ] ;
29196: LD_ADDR_VAR 0 3
29200: PUSH
29201: EMPTY
29202: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
29203: LD_ADDR_VAR 0 4
29207: PUSH
29208: LD_VAR 0 2
29212: PPUSH
29213: LD_INT 21
29215: PUSH
29216: LD_INT 3
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: PPUSH
29223: CALL_OW 70
29227: ST_TO_ADDR
// if not tmp then
29228: LD_VAR 0 4
29232: NOT
29233: IFFALSE 29237
// exit ;
29235: GO 29295
// for i in tmp do
29237: LD_ADDR_VAR 0 5
29241: PUSH
29242: LD_VAR 0 4
29246: PUSH
29247: FOR_IN
29248: IFFALSE 29283
// if GetBase ( i ) <> base then
29250: LD_VAR 0 5
29254: PPUSH
29255: CALL_OW 274
29259: PUSH
29260: LD_VAR 0 1
29264: NONEQUAL
29265: IFFALSE 29281
// ComLinkToBase ( base , i ) ;
29267: LD_VAR 0 1
29271: PPUSH
29272: LD_VAR 0 5
29276: PPUSH
29277: CALL_OW 169
29281: GO 29247
29283: POP
29284: POP
// result := tmp ;
29285: LD_ADDR_VAR 0 3
29289: PUSH
29290: LD_VAR 0 4
29294: ST_TO_ADDR
// end ;
29295: LD_VAR 0 3
29299: RET
// export function ComComplete ( unit , b ) ; var i ; begin
29300: LD_INT 0
29302: PPUSH
29303: PPUSH
// if BuildingStatus ( b ) = bs_build then
29304: LD_VAR 0 2
29308: PPUSH
29309: CALL_OW 461
29313: PUSH
29314: LD_INT 1
29316: EQUAL
29317: IFFALSE 29377
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29319: LD_VAR 0 1
29323: PPUSH
29324: LD_STRING h
29326: PUSH
29327: LD_VAR 0 2
29331: PPUSH
29332: CALL_OW 250
29336: PUSH
29337: LD_VAR 0 2
29341: PPUSH
29342: CALL_OW 251
29346: PUSH
29347: LD_VAR 0 2
29351: PUSH
29352: LD_INT 0
29354: PUSH
29355: LD_INT 0
29357: PUSH
29358: LD_INT 0
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: LIST
29365: LIST
29366: LIST
29367: LIST
29368: LIST
29369: PUSH
29370: EMPTY
29371: LIST
29372: PPUSH
29373: CALL_OW 446
// end ;
29377: LD_VAR 0 3
29381: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29382: LD_INT 0
29384: PPUSH
29385: PPUSH
29386: PPUSH
29387: PPUSH
29388: PPUSH
29389: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
29390: LD_VAR 0 1
29394: NOT
29395: PUSH
29396: LD_VAR 0 1
29400: PPUSH
29401: CALL_OW 263
29405: PUSH
29406: LD_INT 2
29408: EQUAL
29409: NOT
29410: OR
29411: IFFALSE 29415
// exit ;
29413: GO 29731
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29415: LD_ADDR_VAR 0 6
29419: PUSH
29420: LD_INT 22
29422: PUSH
29423: LD_VAR 0 1
29427: PPUSH
29428: CALL_OW 255
29432: PUSH
29433: EMPTY
29434: LIST
29435: LIST
29436: PUSH
29437: LD_INT 2
29439: PUSH
29440: LD_INT 30
29442: PUSH
29443: LD_INT 36
29445: PUSH
29446: EMPTY
29447: LIST
29448: LIST
29449: PUSH
29450: LD_INT 34
29452: PUSH
29453: LD_INT 31
29455: PUSH
29456: EMPTY
29457: LIST
29458: LIST
29459: PUSH
29460: EMPTY
29461: LIST
29462: LIST
29463: LIST
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PPUSH
29469: CALL_OW 69
29473: ST_TO_ADDR
// if not tmp then
29474: LD_VAR 0 6
29478: NOT
29479: IFFALSE 29483
// exit ;
29481: GO 29731
// result := [ ] ;
29483: LD_ADDR_VAR 0 2
29487: PUSH
29488: EMPTY
29489: ST_TO_ADDR
// for i in tmp do
29490: LD_ADDR_VAR 0 3
29494: PUSH
29495: LD_VAR 0 6
29499: PUSH
29500: FOR_IN
29501: IFFALSE 29572
// begin t := UnitsInside ( i ) ;
29503: LD_ADDR_VAR 0 4
29507: PUSH
29508: LD_VAR 0 3
29512: PPUSH
29513: CALL_OW 313
29517: ST_TO_ADDR
// if t then
29518: LD_VAR 0 4
29522: IFFALSE 29570
// for j in t do
29524: LD_ADDR_VAR 0 7
29528: PUSH
29529: LD_VAR 0 4
29533: PUSH
29534: FOR_IN
29535: IFFALSE 29568
// result := Insert ( result , result + 1 , j ) ;
29537: LD_ADDR_VAR 0 2
29541: PUSH
29542: LD_VAR 0 2
29546: PPUSH
29547: LD_VAR 0 2
29551: PUSH
29552: LD_INT 1
29554: PLUS
29555: PPUSH
29556: LD_VAR 0 7
29560: PPUSH
29561: CALL_OW 2
29565: ST_TO_ADDR
29566: GO 29534
29568: POP
29569: POP
// end ;
29570: GO 29500
29572: POP
29573: POP
// if not result then
29574: LD_VAR 0 2
29578: NOT
29579: IFFALSE 29583
// exit ;
29581: GO 29731
// mech := result [ 1 ] ;
29583: LD_ADDR_VAR 0 5
29587: PUSH
29588: LD_VAR 0 2
29592: PUSH
29593: LD_INT 1
29595: ARRAY
29596: ST_TO_ADDR
// if result > 1 then
29597: LD_VAR 0 2
29601: PUSH
29602: LD_INT 1
29604: GREATER
29605: IFFALSE 29717
// for i = 2 to result do
29607: LD_ADDR_VAR 0 3
29611: PUSH
29612: DOUBLE
29613: LD_INT 2
29615: DEC
29616: ST_TO_ADDR
29617: LD_VAR 0 2
29621: PUSH
29622: FOR_TO
29623: IFFALSE 29715
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29625: LD_ADDR_VAR 0 4
29629: PUSH
29630: LD_VAR 0 2
29634: PUSH
29635: LD_VAR 0 3
29639: ARRAY
29640: PPUSH
29641: LD_INT 3
29643: PPUSH
29644: CALL_OW 259
29648: PUSH
29649: LD_VAR 0 2
29653: PUSH
29654: LD_VAR 0 3
29658: ARRAY
29659: PPUSH
29660: CALL_OW 432
29664: MINUS
29665: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29666: LD_VAR 0 4
29670: PUSH
29671: LD_VAR 0 5
29675: PPUSH
29676: LD_INT 3
29678: PPUSH
29679: CALL_OW 259
29683: PUSH
29684: LD_VAR 0 5
29688: PPUSH
29689: CALL_OW 432
29693: MINUS
29694: GREATEREQUAL
29695: IFFALSE 29713
// mech := result [ i ] ;
29697: LD_ADDR_VAR 0 5
29701: PUSH
29702: LD_VAR 0 2
29706: PUSH
29707: LD_VAR 0 3
29711: ARRAY
29712: ST_TO_ADDR
// end ;
29713: GO 29622
29715: POP
29716: POP
// ComLinkTo ( vehicle , mech ) ;
29717: LD_VAR 0 1
29721: PPUSH
29722: LD_VAR 0 5
29726: PPUSH
29727: CALL_OW 135
// end ;
29731: LD_VAR 0 2
29735: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
29736: LD_INT 0
29738: PPUSH
29739: PPUSH
29740: PPUSH
29741: PPUSH
29742: PPUSH
29743: PPUSH
29744: PPUSH
29745: PPUSH
29746: PPUSH
29747: PPUSH
29748: PPUSH
29749: PPUSH
29750: PPUSH
// result := [ ] ;
29751: LD_ADDR_VAR 0 7
29755: PUSH
29756: EMPTY
29757: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
29758: LD_VAR 0 1
29762: PPUSH
29763: CALL_OW 266
29767: PUSH
29768: LD_INT 0
29770: PUSH
29771: LD_INT 1
29773: PUSH
29774: EMPTY
29775: LIST
29776: LIST
29777: IN
29778: NOT
29779: IFFALSE 29783
// exit ;
29781: GO 31414
// if name then
29783: LD_VAR 0 3
29787: IFFALSE 29803
// SetBName ( base_dep , name ) ;
29789: LD_VAR 0 1
29793: PPUSH
29794: LD_VAR 0 3
29798: PPUSH
29799: CALL_OW 500
// base := GetBase ( base_dep ) ;
29803: LD_ADDR_VAR 0 15
29807: PUSH
29808: LD_VAR 0 1
29812: PPUSH
29813: CALL_OW 274
29817: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
29818: LD_ADDR_VAR 0 16
29822: PUSH
29823: LD_VAR 0 1
29827: PPUSH
29828: CALL_OW 255
29832: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
29833: LD_ADDR_VAR 0 17
29837: PUSH
29838: LD_VAR 0 1
29842: PPUSH
29843: CALL_OW 248
29847: ST_TO_ADDR
// if sources then
29848: LD_VAR 0 5
29852: IFFALSE 29899
// for i = 1 to 3 do
29854: LD_ADDR_VAR 0 8
29858: PUSH
29859: DOUBLE
29860: LD_INT 1
29862: DEC
29863: ST_TO_ADDR
29864: LD_INT 3
29866: PUSH
29867: FOR_TO
29868: IFFALSE 29897
// AddResourceType ( base , i , sources [ i ] ) ;
29870: LD_VAR 0 15
29874: PPUSH
29875: LD_VAR 0 8
29879: PPUSH
29880: LD_VAR 0 5
29884: PUSH
29885: LD_VAR 0 8
29889: ARRAY
29890: PPUSH
29891: CALL_OW 276
29895: GO 29867
29897: POP
29898: POP
// buildings := GetBaseBuildings ( base , area ) ;
29899: LD_ADDR_VAR 0 18
29903: PUSH
29904: LD_VAR 0 15
29908: PPUSH
29909: LD_VAR 0 2
29913: PPUSH
29914: CALL 29191 0 2
29918: ST_TO_ADDR
// InitHc ;
29919: CALL_OW 19
// InitUc ;
29923: CALL_OW 18
// uc_side := side ;
29927: LD_ADDR_OWVAR 20
29931: PUSH
29932: LD_VAR 0 16
29936: ST_TO_ADDR
// uc_nation := nation ;
29937: LD_ADDR_OWVAR 21
29941: PUSH
29942: LD_VAR 0 17
29946: ST_TO_ADDR
// if buildings then
29947: LD_VAR 0 18
29951: IFFALSE 31273
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
29953: LD_ADDR_VAR 0 19
29957: PUSH
29958: LD_VAR 0 18
29962: PPUSH
29963: LD_INT 2
29965: PUSH
29966: LD_INT 30
29968: PUSH
29969: LD_INT 29
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: PUSH
29976: LD_INT 30
29978: PUSH
29979: LD_INT 30
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: LIST
29990: PPUSH
29991: CALL_OW 72
29995: ST_TO_ADDR
// if tmp then
29996: LD_VAR 0 19
30000: IFFALSE 30048
// for i in tmp do
30002: LD_ADDR_VAR 0 8
30006: PUSH
30007: LD_VAR 0 19
30011: PUSH
30012: FOR_IN
30013: IFFALSE 30046
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
30015: LD_VAR 0 8
30019: PPUSH
30020: CALL_OW 250
30024: PPUSH
30025: LD_VAR 0 8
30029: PPUSH
30030: CALL_OW 251
30034: PPUSH
30035: LD_VAR 0 16
30039: PPUSH
30040: CALL_OW 441
30044: GO 30012
30046: POP
30047: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30048: LD_VAR 0 18
30052: PPUSH
30053: LD_INT 2
30055: PUSH
30056: LD_INT 30
30058: PUSH
30059: LD_INT 32
30061: PUSH
30062: EMPTY
30063: LIST
30064: LIST
30065: PUSH
30066: LD_INT 30
30068: PUSH
30069: LD_INT 33
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: PUSH
30076: EMPTY
30077: LIST
30078: LIST
30079: LIST
30080: PPUSH
30081: CALL_OW 72
30085: IFFALSE 30173
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30087: LD_ADDR_VAR 0 8
30091: PUSH
30092: LD_VAR 0 18
30096: PPUSH
30097: LD_INT 2
30099: PUSH
30100: LD_INT 30
30102: PUSH
30103: LD_INT 32
30105: PUSH
30106: EMPTY
30107: LIST
30108: LIST
30109: PUSH
30110: LD_INT 30
30112: PUSH
30113: LD_INT 33
30115: PUSH
30116: EMPTY
30117: LIST
30118: LIST
30119: PUSH
30120: EMPTY
30121: LIST
30122: LIST
30123: LIST
30124: PPUSH
30125: CALL_OW 72
30129: PUSH
30130: FOR_IN
30131: IFFALSE 30171
// begin if not GetBWeapon ( i ) then
30133: LD_VAR 0 8
30137: PPUSH
30138: CALL_OW 269
30142: NOT
30143: IFFALSE 30169
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
30145: LD_VAR 0 8
30149: PPUSH
30150: LD_VAR 0 8
30154: PPUSH
30155: LD_VAR 0 2
30159: PPUSH
30160: CALL 31419 0 2
30164: PPUSH
30165: CALL_OW 431
// end ;
30169: GO 30130
30171: POP
30172: POP
// end ; for i = 1 to personel do
30173: LD_ADDR_VAR 0 8
30177: PUSH
30178: DOUBLE
30179: LD_INT 1
30181: DEC
30182: ST_TO_ADDR
30183: LD_VAR 0 6
30187: PUSH
30188: FOR_TO
30189: IFFALSE 31253
// begin if i > 4 then
30191: LD_VAR 0 8
30195: PUSH
30196: LD_INT 4
30198: GREATER
30199: IFFALSE 30203
// break ;
30201: GO 31253
// case i of 1 :
30203: LD_VAR 0 8
30207: PUSH
30208: LD_INT 1
30210: DOUBLE
30211: EQUAL
30212: IFTRUE 30216
30214: GO 30296
30216: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
30217: LD_ADDR_VAR 0 12
30221: PUSH
30222: LD_VAR 0 18
30226: PPUSH
30227: LD_INT 22
30229: PUSH
30230: LD_VAR 0 16
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: PUSH
30239: LD_INT 58
30241: PUSH
30242: EMPTY
30243: LIST
30244: PUSH
30245: LD_INT 2
30247: PUSH
30248: LD_INT 30
30250: PUSH
30251: LD_INT 32
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: PUSH
30258: LD_INT 30
30260: PUSH
30261: LD_INT 4
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: PUSH
30268: LD_INT 30
30270: PUSH
30271: LD_INT 5
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: LIST
30282: LIST
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: LIST
30288: PPUSH
30289: CALL_OW 72
30293: ST_TO_ADDR
30294: GO 30518
30296: LD_INT 2
30298: DOUBLE
30299: EQUAL
30300: IFTRUE 30304
30302: GO 30366
30304: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30305: LD_ADDR_VAR 0 12
30309: PUSH
30310: LD_VAR 0 18
30314: PPUSH
30315: LD_INT 22
30317: PUSH
30318: LD_VAR 0 16
30322: PUSH
30323: EMPTY
30324: LIST
30325: LIST
30326: PUSH
30327: LD_INT 2
30329: PUSH
30330: LD_INT 30
30332: PUSH
30333: LD_INT 0
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PUSH
30340: LD_INT 30
30342: PUSH
30343: LD_INT 1
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: PUSH
30350: EMPTY
30351: LIST
30352: LIST
30353: LIST
30354: PUSH
30355: EMPTY
30356: LIST
30357: LIST
30358: PPUSH
30359: CALL_OW 72
30363: ST_TO_ADDR
30364: GO 30518
30366: LD_INT 3
30368: DOUBLE
30369: EQUAL
30370: IFTRUE 30374
30372: GO 30436
30374: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
30375: LD_ADDR_VAR 0 12
30379: PUSH
30380: LD_VAR 0 18
30384: PPUSH
30385: LD_INT 22
30387: PUSH
30388: LD_VAR 0 16
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: PUSH
30397: LD_INT 2
30399: PUSH
30400: LD_INT 30
30402: PUSH
30403: LD_INT 2
30405: PUSH
30406: EMPTY
30407: LIST
30408: LIST
30409: PUSH
30410: LD_INT 30
30412: PUSH
30413: LD_INT 3
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: PUSH
30420: EMPTY
30421: LIST
30422: LIST
30423: LIST
30424: PUSH
30425: EMPTY
30426: LIST
30427: LIST
30428: PPUSH
30429: CALL_OW 72
30433: ST_TO_ADDR
30434: GO 30518
30436: LD_INT 4
30438: DOUBLE
30439: EQUAL
30440: IFTRUE 30444
30442: GO 30517
30444: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30445: LD_ADDR_VAR 0 12
30449: PUSH
30450: LD_VAR 0 18
30454: PPUSH
30455: LD_INT 22
30457: PUSH
30458: LD_VAR 0 16
30462: PUSH
30463: EMPTY
30464: LIST
30465: LIST
30466: PUSH
30467: LD_INT 2
30469: PUSH
30470: LD_INT 30
30472: PUSH
30473: LD_INT 6
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: PUSH
30480: LD_INT 30
30482: PUSH
30483: LD_INT 7
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: PUSH
30490: LD_INT 30
30492: PUSH
30493: LD_INT 8
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: PPUSH
30510: CALL_OW 72
30514: ST_TO_ADDR
30515: GO 30518
30517: POP
// if i = 1 then
30518: LD_VAR 0 8
30522: PUSH
30523: LD_INT 1
30525: EQUAL
30526: IFFALSE 30637
// begin tmp := [ ] ;
30528: LD_ADDR_VAR 0 19
30532: PUSH
30533: EMPTY
30534: ST_TO_ADDR
// for j in f do
30535: LD_ADDR_VAR 0 9
30539: PUSH
30540: LD_VAR 0 12
30544: PUSH
30545: FOR_IN
30546: IFFALSE 30619
// if GetBType ( j ) = b_bunker then
30548: LD_VAR 0 9
30552: PPUSH
30553: CALL_OW 266
30557: PUSH
30558: LD_INT 32
30560: EQUAL
30561: IFFALSE 30588
// tmp := Insert ( tmp , 1 , j ) else
30563: LD_ADDR_VAR 0 19
30567: PUSH
30568: LD_VAR 0 19
30572: PPUSH
30573: LD_INT 1
30575: PPUSH
30576: LD_VAR 0 9
30580: PPUSH
30581: CALL_OW 2
30585: ST_TO_ADDR
30586: GO 30617
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30588: LD_ADDR_VAR 0 19
30592: PUSH
30593: LD_VAR 0 19
30597: PPUSH
30598: LD_VAR 0 19
30602: PUSH
30603: LD_INT 1
30605: PLUS
30606: PPUSH
30607: LD_VAR 0 9
30611: PPUSH
30612: CALL_OW 2
30616: ST_TO_ADDR
30617: GO 30545
30619: POP
30620: POP
// if tmp then
30621: LD_VAR 0 19
30625: IFFALSE 30637
// f := tmp ;
30627: LD_ADDR_VAR 0 12
30631: PUSH
30632: LD_VAR 0 19
30636: ST_TO_ADDR
// end ; x := personel [ i ] ;
30637: LD_ADDR_VAR 0 13
30641: PUSH
30642: LD_VAR 0 6
30646: PUSH
30647: LD_VAR 0 8
30651: ARRAY
30652: ST_TO_ADDR
// if x = - 1 then
30653: LD_VAR 0 13
30657: PUSH
30658: LD_INT 1
30660: NEG
30661: EQUAL
30662: IFFALSE 30871
// begin for j in f do
30664: LD_ADDR_VAR 0 9
30668: PUSH
30669: LD_VAR 0 12
30673: PUSH
30674: FOR_IN
30675: IFFALSE 30867
// repeat InitHc ;
30677: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30681: LD_VAR 0 9
30685: PPUSH
30686: CALL_OW 266
30690: PUSH
30691: LD_INT 5
30693: EQUAL
30694: IFFALSE 30764
// begin if UnitsInside ( j ) < 3 then
30696: LD_VAR 0 9
30700: PPUSH
30701: CALL_OW 313
30705: PUSH
30706: LD_INT 3
30708: LESS
30709: IFFALSE 30745
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30711: LD_INT 0
30713: PPUSH
30714: LD_INT 5
30716: PUSH
30717: LD_INT 8
30719: PUSH
30720: LD_INT 9
30722: PUSH
30723: EMPTY
30724: LIST
30725: LIST
30726: LIST
30727: PUSH
30728: LD_VAR 0 17
30732: ARRAY
30733: PPUSH
30734: LD_VAR 0 4
30738: PPUSH
30739: CALL_OW 380
30743: GO 30762
// PrepareHuman ( false , i , skill ) ;
30745: LD_INT 0
30747: PPUSH
30748: LD_VAR 0 8
30752: PPUSH
30753: LD_VAR 0 4
30757: PPUSH
30758: CALL_OW 380
// end else
30762: GO 30781
// PrepareHuman ( false , i , skill ) ;
30764: LD_INT 0
30766: PPUSH
30767: LD_VAR 0 8
30771: PPUSH
30772: LD_VAR 0 4
30776: PPUSH
30777: CALL_OW 380
// un := CreateHuman ;
30781: LD_ADDR_VAR 0 14
30785: PUSH
30786: CALL_OW 44
30790: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30791: LD_ADDR_VAR 0 7
30795: PUSH
30796: LD_VAR 0 7
30800: PPUSH
30801: LD_INT 1
30803: PPUSH
30804: LD_VAR 0 14
30808: PPUSH
30809: CALL_OW 2
30813: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
30814: LD_VAR 0 14
30818: PPUSH
30819: LD_VAR 0 9
30823: PPUSH
30824: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
30828: LD_VAR 0 9
30832: PPUSH
30833: CALL_OW 313
30837: PUSH
30838: LD_INT 6
30840: EQUAL
30841: PUSH
30842: LD_VAR 0 9
30846: PPUSH
30847: CALL_OW 266
30851: PUSH
30852: LD_INT 32
30854: PUSH
30855: LD_INT 31
30857: PUSH
30858: EMPTY
30859: LIST
30860: LIST
30861: IN
30862: OR
30863: IFFALSE 30677
30865: GO 30674
30867: POP
30868: POP
// end else
30869: GO 31251
// for j = 1 to x do
30871: LD_ADDR_VAR 0 9
30875: PUSH
30876: DOUBLE
30877: LD_INT 1
30879: DEC
30880: ST_TO_ADDR
30881: LD_VAR 0 13
30885: PUSH
30886: FOR_TO
30887: IFFALSE 31249
// begin InitHc ;
30889: CALL_OW 19
// if not f then
30893: LD_VAR 0 12
30897: NOT
30898: IFFALSE 30987
// begin PrepareHuman ( false , i , skill ) ;
30900: LD_INT 0
30902: PPUSH
30903: LD_VAR 0 8
30907: PPUSH
30908: LD_VAR 0 4
30912: PPUSH
30913: CALL_OW 380
// un := CreateHuman ;
30917: LD_ADDR_VAR 0 14
30921: PUSH
30922: CALL_OW 44
30926: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30927: LD_ADDR_VAR 0 7
30931: PUSH
30932: LD_VAR 0 7
30936: PPUSH
30937: LD_INT 1
30939: PPUSH
30940: LD_VAR 0 14
30944: PPUSH
30945: CALL_OW 2
30949: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30950: LD_VAR 0 14
30954: PPUSH
30955: LD_VAR 0 1
30959: PPUSH
30960: CALL_OW 250
30964: PPUSH
30965: LD_VAR 0 1
30969: PPUSH
30970: CALL_OW 251
30974: PPUSH
30975: LD_INT 10
30977: PPUSH
30978: LD_INT 0
30980: PPUSH
30981: CALL_OW 50
// continue ;
30985: GO 30886
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
30987: LD_VAR 0 12
30991: PUSH
30992: LD_INT 1
30994: ARRAY
30995: PPUSH
30996: CALL_OW 313
31000: PUSH
31001: LD_VAR 0 12
31005: PUSH
31006: LD_INT 1
31008: ARRAY
31009: PPUSH
31010: CALL_OW 266
31014: PUSH
31015: LD_INT 32
31017: PUSH
31018: LD_INT 31
31020: PUSH
31021: EMPTY
31022: LIST
31023: LIST
31024: IN
31025: AND
31026: PUSH
31027: LD_VAR 0 12
31031: PUSH
31032: LD_INT 1
31034: ARRAY
31035: PPUSH
31036: CALL_OW 313
31040: PUSH
31041: LD_INT 6
31043: EQUAL
31044: OR
31045: IFFALSE 31065
// f := Delete ( f , 1 ) ;
31047: LD_ADDR_VAR 0 12
31051: PUSH
31052: LD_VAR 0 12
31056: PPUSH
31057: LD_INT 1
31059: PPUSH
31060: CALL_OW 3
31064: ST_TO_ADDR
// if not f then
31065: LD_VAR 0 12
31069: NOT
31070: IFFALSE 31088
// begin x := x + 2 ;
31072: LD_ADDR_VAR 0 13
31076: PUSH
31077: LD_VAR 0 13
31081: PUSH
31082: LD_INT 2
31084: PLUS
31085: ST_TO_ADDR
// continue ;
31086: GO 30886
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31088: LD_VAR 0 12
31092: PUSH
31093: LD_INT 1
31095: ARRAY
31096: PPUSH
31097: CALL_OW 266
31101: PUSH
31102: LD_INT 5
31104: EQUAL
31105: IFFALSE 31179
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31107: LD_VAR 0 12
31111: PUSH
31112: LD_INT 1
31114: ARRAY
31115: PPUSH
31116: CALL_OW 313
31120: PUSH
31121: LD_INT 3
31123: LESS
31124: IFFALSE 31160
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31126: LD_INT 0
31128: PPUSH
31129: LD_INT 5
31131: PUSH
31132: LD_INT 8
31134: PUSH
31135: LD_INT 9
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: LIST
31142: PUSH
31143: LD_VAR 0 17
31147: ARRAY
31148: PPUSH
31149: LD_VAR 0 4
31153: PPUSH
31154: CALL_OW 380
31158: GO 31177
// PrepareHuman ( false , i , skill ) ;
31160: LD_INT 0
31162: PPUSH
31163: LD_VAR 0 8
31167: PPUSH
31168: LD_VAR 0 4
31172: PPUSH
31173: CALL_OW 380
// end else
31177: GO 31196
// PrepareHuman ( false , i , skill ) ;
31179: LD_INT 0
31181: PPUSH
31182: LD_VAR 0 8
31186: PPUSH
31187: LD_VAR 0 4
31191: PPUSH
31192: CALL_OW 380
// un := CreateHuman ;
31196: LD_ADDR_VAR 0 14
31200: PUSH
31201: CALL_OW 44
31205: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31206: LD_ADDR_VAR 0 7
31210: PUSH
31211: LD_VAR 0 7
31215: PPUSH
31216: LD_INT 1
31218: PPUSH
31219: LD_VAR 0 14
31223: PPUSH
31224: CALL_OW 2
31228: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
31229: LD_VAR 0 14
31233: PPUSH
31234: LD_VAR 0 12
31238: PUSH
31239: LD_INT 1
31241: ARRAY
31242: PPUSH
31243: CALL_OW 52
// end ;
31247: GO 30886
31249: POP
31250: POP
// end ;
31251: GO 30188
31253: POP
31254: POP
// result := result ^ buildings ;
31255: LD_ADDR_VAR 0 7
31259: PUSH
31260: LD_VAR 0 7
31264: PUSH
31265: LD_VAR 0 18
31269: ADD
31270: ST_TO_ADDR
// end else
31271: GO 31414
// begin for i = 1 to personel do
31273: LD_ADDR_VAR 0 8
31277: PUSH
31278: DOUBLE
31279: LD_INT 1
31281: DEC
31282: ST_TO_ADDR
31283: LD_VAR 0 6
31287: PUSH
31288: FOR_TO
31289: IFFALSE 31412
// begin if i > 4 then
31291: LD_VAR 0 8
31295: PUSH
31296: LD_INT 4
31298: GREATER
31299: IFFALSE 31303
// break ;
31301: GO 31412
// x := personel [ i ] ;
31303: LD_ADDR_VAR 0 13
31307: PUSH
31308: LD_VAR 0 6
31312: PUSH
31313: LD_VAR 0 8
31317: ARRAY
31318: ST_TO_ADDR
// if x = - 1 then
31319: LD_VAR 0 13
31323: PUSH
31324: LD_INT 1
31326: NEG
31327: EQUAL
31328: IFFALSE 31332
// continue ;
31330: GO 31288
// PrepareHuman ( false , i , skill ) ;
31332: LD_INT 0
31334: PPUSH
31335: LD_VAR 0 8
31339: PPUSH
31340: LD_VAR 0 4
31344: PPUSH
31345: CALL_OW 380
// un := CreateHuman ;
31349: LD_ADDR_VAR 0 14
31353: PUSH
31354: CALL_OW 44
31358: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31359: LD_VAR 0 14
31363: PPUSH
31364: LD_VAR 0 1
31368: PPUSH
31369: CALL_OW 250
31373: PPUSH
31374: LD_VAR 0 1
31378: PPUSH
31379: CALL_OW 251
31383: PPUSH
31384: LD_INT 10
31386: PPUSH
31387: LD_INT 0
31389: PPUSH
31390: CALL_OW 50
// result := result ^ un ;
31394: LD_ADDR_VAR 0 7
31398: PUSH
31399: LD_VAR 0 7
31403: PUSH
31404: LD_VAR 0 14
31408: ADD
31409: ST_TO_ADDR
// end ;
31410: GO 31288
31412: POP
31413: POP
// end ; end ;
31414: LD_VAR 0 7
31418: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31419: LD_INT 0
31421: PPUSH
31422: PPUSH
31423: PPUSH
31424: PPUSH
31425: PPUSH
31426: PPUSH
31427: PPUSH
31428: PPUSH
31429: PPUSH
31430: PPUSH
31431: PPUSH
31432: PPUSH
31433: PPUSH
31434: PPUSH
31435: PPUSH
31436: PPUSH
// result := false ;
31437: LD_ADDR_VAR 0 3
31441: PUSH
31442: LD_INT 0
31444: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31445: LD_VAR 0 1
31449: NOT
31450: PUSH
31451: LD_VAR 0 1
31455: PPUSH
31456: CALL_OW 266
31460: PUSH
31461: LD_INT 32
31463: PUSH
31464: LD_INT 33
31466: PUSH
31467: EMPTY
31468: LIST
31469: LIST
31470: IN
31471: NOT
31472: OR
31473: IFFALSE 31477
// exit ;
31475: GO 32613
// nat := GetNation ( tower ) ;
31477: LD_ADDR_VAR 0 12
31481: PUSH
31482: LD_VAR 0 1
31486: PPUSH
31487: CALL_OW 248
31491: ST_TO_ADDR
// side := GetSide ( tower ) ;
31492: LD_ADDR_VAR 0 16
31496: PUSH
31497: LD_VAR 0 1
31501: PPUSH
31502: CALL_OW 255
31506: ST_TO_ADDR
// x := GetX ( tower ) ;
31507: LD_ADDR_VAR 0 10
31511: PUSH
31512: LD_VAR 0 1
31516: PPUSH
31517: CALL_OW 250
31521: ST_TO_ADDR
// y := GetY ( tower ) ;
31522: LD_ADDR_VAR 0 11
31526: PUSH
31527: LD_VAR 0 1
31531: PPUSH
31532: CALL_OW 251
31536: ST_TO_ADDR
// if not x or not y then
31537: LD_VAR 0 10
31541: NOT
31542: PUSH
31543: LD_VAR 0 11
31547: NOT
31548: OR
31549: IFFALSE 31553
// exit ;
31551: GO 32613
// weapon := 0 ;
31553: LD_ADDR_VAR 0 18
31557: PUSH
31558: LD_INT 0
31560: ST_TO_ADDR
// fac_list := [ ] ;
31561: LD_ADDR_VAR 0 17
31565: PUSH
31566: EMPTY
31567: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
31568: LD_ADDR_VAR 0 6
31572: PUSH
31573: LD_VAR 0 1
31577: PPUSH
31578: CALL_OW 274
31582: PPUSH
31583: LD_VAR 0 2
31587: PPUSH
31588: CALL 29191 0 2
31592: PPUSH
31593: LD_INT 30
31595: PUSH
31596: LD_INT 3
31598: PUSH
31599: EMPTY
31600: LIST
31601: LIST
31602: PPUSH
31603: CALL_OW 72
31607: ST_TO_ADDR
// if not factories then
31608: LD_VAR 0 6
31612: NOT
31613: IFFALSE 31617
// exit ;
31615: GO 32613
// for i in factories do
31617: LD_ADDR_VAR 0 8
31621: PUSH
31622: LD_VAR 0 6
31626: PUSH
31627: FOR_IN
31628: IFFALSE 31653
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31630: LD_ADDR_VAR 0 17
31634: PUSH
31635: LD_VAR 0 17
31639: PUSH
31640: LD_VAR 0 8
31644: PPUSH
31645: CALL_OW 478
31649: UNION
31650: ST_TO_ADDR
31651: GO 31627
31653: POP
31654: POP
// if not fac_list then
31655: LD_VAR 0 17
31659: NOT
31660: IFFALSE 31664
// exit ;
31662: GO 32613
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31664: LD_ADDR_VAR 0 5
31668: PUSH
31669: LD_INT 4
31671: PUSH
31672: LD_INT 5
31674: PUSH
31675: LD_INT 9
31677: PUSH
31678: LD_INT 10
31680: PUSH
31681: LD_INT 6
31683: PUSH
31684: LD_INT 7
31686: PUSH
31687: LD_INT 11
31689: PUSH
31690: EMPTY
31691: LIST
31692: LIST
31693: LIST
31694: LIST
31695: LIST
31696: LIST
31697: LIST
31698: PUSH
31699: LD_INT 27
31701: PUSH
31702: LD_INT 28
31704: PUSH
31705: LD_INT 26
31707: PUSH
31708: LD_INT 30
31710: PUSH
31711: EMPTY
31712: LIST
31713: LIST
31714: LIST
31715: LIST
31716: PUSH
31717: LD_INT 43
31719: PUSH
31720: LD_INT 44
31722: PUSH
31723: LD_INT 46
31725: PUSH
31726: LD_INT 45
31728: PUSH
31729: LD_INT 47
31731: PUSH
31732: LD_INT 49
31734: PUSH
31735: EMPTY
31736: LIST
31737: LIST
31738: LIST
31739: LIST
31740: LIST
31741: LIST
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: LIST
31747: PUSH
31748: LD_VAR 0 12
31752: ARRAY
31753: ST_TO_ADDR
// for i in list do
31754: LD_ADDR_VAR 0 8
31758: PUSH
31759: LD_VAR 0 5
31763: PUSH
31764: FOR_IN
31765: IFFALSE 31798
// if not i in fac_list then
31767: LD_VAR 0 8
31771: PUSH
31772: LD_VAR 0 17
31776: IN
31777: NOT
31778: IFFALSE 31796
// list := list diff i ;
31780: LD_ADDR_VAR 0 5
31784: PUSH
31785: LD_VAR 0 5
31789: PUSH
31790: LD_VAR 0 8
31794: DIFF
31795: ST_TO_ADDR
31796: GO 31764
31798: POP
31799: POP
// if not list then
31800: LD_VAR 0 5
31804: NOT
31805: IFFALSE 31809
// exit ;
31807: GO 32613
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
31809: LD_VAR 0 12
31813: PUSH
31814: LD_INT 3
31816: EQUAL
31817: PUSH
31818: LD_INT 49
31820: PUSH
31821: LD_VAR 0 5
31825: IN
31826: AND
31827: PUSH
31828: LD_INT 31
31830: PPUSH
31831: LD_VAR 0 16
31835: PPUSH
31836: CALL_OW 321
31840: PUSH
31841: LD_INT 2
31843: EQUAL
31844: AND
31845: IFFALSE 31905
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
31847: LD_INT 22
31849: PUSH
31850: LD_VAR 0 16
31854: PUSH
31855: EMPTY
31856: LIST
31857: LIST
31858: PUSH
31859: LD_INT 35
31861: PUSH
31862: LD_INT 49
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: PUSH
31869: LD_INT 91
31871: PUSH
31872: LD_VAR 0 1
31876: PUSH
31877: LD_INT 10
31879: PUSH
31880: EMPTY
31881: LIST
31882: LIST
31883: LIST
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: LIST
31889: PPUSH
31890: CALL_OW 69
31894: NOT
31895: IFFALSE 31905
// weapon := ru_time_lapser ;
31897: LD_ADDR_VAR 0 18
31901: PUSH
31902: LD_INT 49
31904: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
31905: LD_VAR 0 12
31909: PUSH
31910: LD_INT 1
31912: PUSH
31913: LD_INT 2
31915: PUSH
31916: EMPTY
31917: LIST
31918: LIST
31919: IN
31920: PUSH
31921: LD_INT 11
31923: PUSH
31924: LD_VAR 0 5
31928: IN
31929: PUSH
31930: LD_INT 30
31932: PUSH
31933: LD_VAR 0 5
31937: IN
31938: OR
31939: AND
31940: PUSH
31941: LD_INT 6
31943: PPUSH
31944: LD_VAR 0 16
31948: PPUSH
31949: CALL_OW 321
31953: PUSH
31954: LD_INT 2
31956: EQUAL
31957: AND
31958: IFFALSE 32123
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
31960: LD_INT 22
31962: PUSH
31963: LD_VAR 0 16
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: PUSH
31972: LD_INT 2
31974: PUSH
31975: LD_INT 35
31977: PUSH
31978: LD_INT 11
31980: PUSH
31981: EMPTY
31982: LIST
31983: LIST
31984: PUSH
31985: LD_INT 35
31987: PUSH
31988: LD_INT 30
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: LIST
31999: PUSH
32000: LD_INT 91
32002: PUSH
32003: LD_VAR 0 1
32007: PUSH
32008: LD_INT 18
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: LIST
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: LIST
32020: PPUSH
32021: CALL_OW 69
32025: NOT
32026: PUSH
32027: LD_INT 22
32029: PUSH
32030: LD_VAR 0 16
32034: PUSH
32035: EMPTY
32036: LIST
32037: LIST
32038: PUSH
32039: LD_INT 2
32041: PUSH
32042: LD_INT 30
32044: PUSH
32045: LD_INT 32
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: PUSH
32052: LD_INT 30
32054: PUSH
32055: LD_INT 33
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: PUSH
32062: EMPTY
32063: LIST
32064: LIST
32065: LIST
32066: PUSH
32067: LD_INT 91
32069: PUSH
32070: LD_VAR 0 1
32074: PUSH
32075: LD_INT 12
32077: PUSH
32078: EMPTY
32079: LIST
32080: LIST
32081: LIST
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: LIST
32087: PUSH
32088: EMPTY
32089: LIST
32090: PPUSH
32091: CALL_OW 69
32095: PUSH
32096: LD_INT 2
32098: GREATER
32099: AND
32100: IFFALSE 32123
// weapon := [ us_radar , ar_radar ] [ nat ] ;
32102: LD_ADDR_VAR 0 18
32106: PUSH
32107: LD_INT 11
32109: PUSH
32110: LD_INT 30
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: PUSH
32117: LD_VAR 0 12
32121: ARRAY
32122: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
32123: LD_VAR 0 18
32127: NOT
32128: PUSH
32129: LD_INT 40
32131: PPUSH
32132: LD_VAR 0 16
32136: PPUSH
32137: CALL_OW 321
32141: PUSH
32142: LD_INT 2
32144: EQUAL
32145: AND
32146: PUSH
32147: LD_INT 7
32149: PUSH
32150: LD_VAR 0 5
32154: IN
32155: PUSH
32156: LD_INT 28
32158: PUSH
32159: LD_VAR 0 5
32163: IN
32164: OR
32165: PUSH
32166: LD_INT 45
32168: PUSH
32169: LD_VAR 0 5
32173: IN
32174: OR
32175: AND
32176: IFFALSE 32430
// begin hex := GetHexInfo ( x , y ) ;
32178: LD_ADDR_VAR 0 4
32182: PUSH
32183: LD_VAR 0 10
32187: PPUSH
32188: LD_VAR 0 11
32192: PPUSH
32193: CALL_OW 546
32197: ST_TO_ADDR
// if hex [ 1 ] then
32198: LD_VAR 0 4
32202: PUSH
32203: LD_INT 1
32205: ARRAY
32206: IFFALSE 32210
// exit ;
32208: GO 32613
// height := hex [ 2 ] ;
32210: LD_ADDR_VAR 0 15
32214: PUSH
32215: LD_VAR 0 4
32219: PUSH
32220: LD_INT 2
32222: ARRAY
32223: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
32224: LD_ADDR_VAR 0 14
32228: PUSH
32229: LD_INT 0
32231: PUSH
32232: LD_INT 2
32234: PUSH
32235: LD_INT 3
32237: PUSH
32238: LD_INT 5
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: LIST
32245: LIST
32246: ST_TO_ADDR
// for i in tmp do
32247: LD_ADDR_VAR 0 8
32251: PUSH
32252: LD_VAR 0 14
32256: PUSH
32257: FOR_IN
32258: IFFALSE 32428
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
32260: LD_ADDR_VAR 0 9
32264: PUSH
32265: LD_VAR 0 10
32269: PPUSH
32270: LD_VAR 0 8
32274: PPUSH
32275: LD_INT 5
32277: PPUSH
32278: CALL_OW 272
32282: PUSH
32283: LD_VAR 0 11
32287: PPUSH
32288: LD_VAR 0 8
32292: PPUSH
32293: LD_INT 5
32295: PPUSH
32296: CALL_OW 273
32300: PUSH
32301: EMPTY
32302: LIST
32303: LIST
32304: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32305: LD_VAR 0 9
32309: PUSH
32310: LD_INT 1
32312: ARRAY
32313: PPUSH
32314: LD_VAR 0 9
32318: PUSH
32319: LD_INT 2
32321: ARRAY
32322: PPUSH
32323: CALL_OW 488
32327: IFFALSE 32426
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32329: LD_ADDR_VAR 0 4
32333: PUSH
32334: LD_VAR 0 9
32338: PUSH
32339: LD_INT 1
32341: ARRAY
32342: PPUSH
32343: LD_VAR 0 9
32347: PUSH
32348: LD_INT 2
32350: ARRAY
32351: PPUSH
32352: CALL_OW 546
32356: ST_TO_ADDR
// if hex [ 1 ] then
32357: LD_VAR 0 4
32361: PUSH
32362: LD_INT 1
32364: ARRAY
32365: IFFALSE 32369
// continue ;
32367: GO 32257
// h := hex [ 2 ] ;
32369: LD_ADDR_VAR 0 13
32373: PUSH
32374: LD_VAR 0 4
32378: PUSH
32379: LD_INT 2
32381: ARRAY
32382: ST_TO_ADDR
// if h + 7 < height then
32383: LD_VAR 0 13
32387: PUSH
32388: LD_INT 7
32390: PLUS
32391: PUSH
32392: LD_VAR 0 15
32396: LESS
32397: IFFALSE 32426
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32399: LD_ADDR_VAR 0 18
32403: PUSH
32404: LD_INT 7
32406: PUSH
32407: LD_INT 28
32409: PUSH
32410: LD_INT 45
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: LIST
32417: PUSH
32418: LD_VAR 0 12
32422: ARRAY
32423: ST_TO_ADDR
// break ;
32424: GO 32428
// end ; end ; end ;
32426: GO 32257
32428: POP
32429: POP
// end ; if not weapon then
32430: LD_VAR 0 18
32434: NOT
32435: IFFALSE 32495
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32437: LD_ADDR_VAR 0 5
32441: PUSH
32442: LD_VAR 0 5
32446: PUSH
32447: LD_INT 11
32449: PUSH
32450: LD_INT 30
32452: PUSH
32453: LD_INT 49
32455: PUSH
32456: EMPTY
32457: LIST
32458: LIST
32459: LIST
32460: DIFF
32461: ST_TO_ADDR
// if not list then
32462: LD_VAR 0 5
32466: NOT
32467: IFFALSE 32471
// exit ;
32469: GO 32613
// weapon := list [ rand ( 1 , list ) ] ;
32471: LD_ADDR_VAR 0 18
32475: PUSH
32476: LD_VAR 0 5
32480: PUSH
32481: LD_INT 1
32483: PPUSH
32484: LD_VAR 0 5
32488: PPUSH
32489: CALL_OW 12
32493: ARRAY
32494: ST_TO_ADDR
// end ; if weapon then
32495: LD_VAR 0 18
32499: IFFALSE 32613
// begin tmp := CostOfWeapon ( weapon ) ;
32501: LD_ADDR_VAR 0 14
32505: PUSH
32506: LD_VAR 0 18
32510: PPUSH
32511: CALL_OW 451
32515: ST_TO_ADDR
// j := GetBase ( tower ) ;
32516: LD_ADDR_VAR 0 9
32520: PUSH
32521: LD_VAR 0 1
32525: PPUSH
32526: CALL_OW 274
32530: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32531: LD_VAR 0 9
32535: PPUSH
32536: LD_INT 1
32538: PPUSH
32539: CALL_OW 275
32543: PUSH
32544: LD_VAR 0 14
32548: PUSH
32549: LD_INT 1
32551: ARRAY
32552: GREATEREQUAL
32553: PUSH
32554: LD_VAR 0 9
32558: PPUSH
32559: LD_INT 2
32561: PPUSH
32562: CALL_OW 275
32566: PUSH
32567: LD_VAR 0 14
32571: PUSH
32572: LD_INT 2
32574: ARRAY
32575: GREATEREQUAL
32576: AND
32577: PUSH
32578: LD_VAR 0 9
32582: PPUSH
32583: LD_INT 3
32585: PPUSH
32586: CALL_OW 275
32590: PUSH
32591: LD_VAR 0 14
32595: PUSH
32596: LD_INT 3
32598: ARRAY
32599: GREATEREQUAL
32600: AND
32601: IFFALSE 32613
// result := weapon ;
32603: LD_ADDR_VAR 0 3
32607: PUSH
32608: LD_VAR 0 18
32612: ST_TO_ADDR
// end ; end ;
32613: LD_VAR 0 3
32617: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32618: LD_INT 0
32620: PPUSH
32621: PPUSH
// result := true ;
32622: LD_ADDR_VAR 0 3
32626: PUSH
32627: LD_INT 1
32629: ST_TO_ADDR
// if array1 = array2 then
32630: LD_VAR 0 1
32634: PUSH
32635: LD_VAR 0 2
32639: EQUAL
32640: IFFALSE 32700
// begin for i = 1 to array1 do
32642: LD_ADDR_VAR 0 4
32646: PUSH
32647: DOUBLE
32648: LD_INT 1
32650: DEC
32651: ST_TO_ADDR
32652: LD_VAR 0 1
32656: PUSH
32657: FOR_TO
32658: IFFALSE 32696
// if array1 [ i ] <> array2 [ i ] then
32660: LD_VAR 0 1
32664: PUSH
32665: LD_VAR 0 4
32669: ARRAY
32670: PUSH
32671: LD_VAR 0 2
32675: PUSH
32676: LD_VAR 0 4
32680: ARRAY
32681: NONEQUAL
32682: IFFALSE 32694
// begin result := false ;
32684: LD_ADDR_VAR 0 3
32688: PUSH
32689: LD_INT 0
32691: ST_TO_ADDR
// break ;
32692: GO 32696
// end ;
32694: GO 32657
32696: POP
32697: POP
// end else
32698: GO 32708
// result := false ;
32700: LD_ADDR_VAR 0 3
32704: PUSH
32705: LD_INT 0
32707: ST_TO_ADDR
// end ;
32708: LD_VAR 0 3
32712: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32713: LD_INT 0
32715: PPUSH
32716: PPUSH
32717: PPUSH
// pom := GetBase ( fac ) ;
32718: LD_ADDR_VAR 0 5
32722: PUSH
32723: LD_VAR 0 1
32727: PPUSH
32728: CALL_OW 274
32732: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32733: LD_ADDR_VAR 0 4
32737: PUSH
32738: LD_VAR 0 2
32742: PUSH
32743: LD_INT 1
32745: ARRAY
32746: PPUSH
32747: LD_VAR 0 2
32751: PUSH
32752: LD_INT 2
32754: ARRAY
32755: PPUSH
32756: LD_VAR 0 2
32760: PUSH
32761: LD_INT 3
32763: ARRAY
32764: PPUSH
32765: LD_VAR 0 2
32769: PUSH
32770: LD_INT 4
32772: ARRAY
32773: PPUSH
32774: CALL_OW 449
32778: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32779: LD_ADDR_VAR 0 3
32783: PUSH
32784: LD_VAR 0 5
32788: PPUSH
32789: LD_INT 1
32791: PPUSH
32792: CALL_OW 275
32796: PUSH
32797: LD_VAR 0 4
32801: PUSH
32802: LD_INT 1
32804: ARRAY
32805: GREATEREQUAL
32806: PUSH
32807: LD_VAR 0 5
32811: PPUSH
32812: LD_INT 2
32814: PPUSH
32815: CALL_OW 275
32819: PUSH
32820: LD_VAR 0 4
32824: PUSH
32825: LD_INT 2
32827: ARRAY
32828: GREATEREQUAL
32829: AND
32830: PUSH
32831: LD_VAR 0 5
32835: PPUSH
32836: LD_INT 3
32838: PPUSH
32839: CALL_OW 275
32843: PUSH
32844: LD_VAR 0 4
32848: PUSH
32849: LD_INT 3
32851: ARRAY
32852: GREATEREQUAL
32853: AND
32854: ST_TO_ADDR
// end ;
32855: LD_VAR 0 3
32859: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
32860: LD_INT 0
32862: PPUSH
32863: PPUSH
32864: PPUSH
32865: PPUSH
// pom := GetBase ( building ) ;
32866: LD_ADDR_VAR 0 3
32870: PUSH
32871: LD_VAR 0 1
32875: PPUSH
32876: CALL_OW 274
32880: ST_TO_ADDR
// if not pom then
32881: LD_VAR 0 3
32885: NOT
32886: IFFALSE 32890
// exit ;
32888: GO 33060
// btype := GetBType ( building ) ;
32890: LD_ADDR_VAR 0 5
32894: PUSH
32895: LD_VAR 0 1
32899: PPUSH
32900: CALL_OW 266
32904: ST_TO_ADDR
// if btype = b_armoury then
32905: LD_VAR 0 5
32909: PUSH
32910: LD_INT 4
32912: EQUAL
32913: IFFALSE 32923
// btype := b_barracks ;
32915: LD_ADDR_VAR 0 5
32919: PUSH
32920: LD_INT 5
32922: ST_TO_ADDR
// if btype = b_depot then
32923: LD_VAR 0 5
32927: PUSH
32928: LD_INT 0
32930: EQUAL
32931: IFFALSE 32941
// btype := b_warehouse ;
32933: LD_ADDR_VAR 0 5
32937: PUSH
32938: LD_INT 1
32940: ST_TO_ADDR
// if btype = b_workshop then
32941: LD_VAR 0 5
32945: PUSH
32946: LD_INT 2
32948: EQUAL
32949: IFFALSE 32959
// btype := b_factory ;
32951: LD_ADDR_VAR 0 5
32955: PUSH
32956: LD_INT 3
32958: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32959: LD_ADDR_VAR 0 4
32963: PUSH
32964: LD_VAR 0 5
32968: PPUSH
32969: LD_VAR 0 1
32973: PPUSH
32974: CALL_OW 248
32978: PPUSH
32979: CALL_OW 450
32983: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32984: LD_ADDR_VAR 0 2
32988: PUSH
32989: LD_VAR 0 3
32993: PPUSH
32994: LD_INT 1
32996: PPUSH
32997: CALL_OW 275
33001: PUSH
33002: LD_VAR 0 4
33006: PUSH
33007: LD_INT 1
33009: ARRAY
33010: GREATEREQUAL
33011: PUSH
33012: LD_VAR 0 3
33016: PPUSH
33017: LD_INT 2
33019: PPUSH
33020: CALL_OW 275
33024: PUSH
33025: LD_VAR 0 4
33029: PUSH
33030: LD_INT 2
33032: ARRAY
33033: GREATEREQUAL
33034: AND
33035: PUSH
33036: LD_VAR 0 3
33040: PPUSH
33041: LD_INT 3
33043: PPUSH
33044: CALL_OW 275
33048: PUSH
33049: LD_VAR 0 4
33053: PUSH
33054: LD_INT 3
33056: ARRAY
33057: GREATEREQUAL
33058: AND
33059: ST_TO_ADDR
// end ;
33060: LD_VAR 0 2
33064: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
33065: LD_INT 0
33067: PPUSH
33068: PPUSH
33069: PPUSH
// pom := GetBase ( building ) ;
33070: LD_ADDR_VAR 0 4
33074: PUSH
33075: LD_VAR 0 1
33079: PPUSH
33080: CALL_OW 274
33084: ST_TO_ADDR
// if not pom then
33085: LD_VAR 0 4
33089: NOT
33090: IFFALSE 33094
// exit ;
33092: GO 33195
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33094: LD_ADDR_VAR 0 5
33098: PUSH
33099: LD_VAR 0 2
33103: PPUSH
33104: LD_VAR 0 1
33108: PPUSH
33109: CALL_OW 248
33113: PPUSH
33114: CALL_OW 450
33118: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33119: LD_ADDR_VAR 0 3
33123: PUSH
33124: LD_VAR 0 4
33128: PPUSH
33129: LD_INT 1
33131: PPUSH
33132: CALL_OW 275
33136: PUSH
33137: LD_VAR 0 5
33141: PUSH
33142: LD_INT 1
33144: ARRAY
33145: GREATEREQUAL
33146: PUSH
33147: LD_VAR 0 4
33151: PPUSH
33152: LD_INT 2
33154: PPUSH
33155: CALL_OW 275
33159: PUSH
33160: LD_VAR 0 5
33164: PUSH
33165: LD_INT 2
33167: ARRAY
33168: GREATEREQUAL
33169: AND
33170: PUSH
33171: LD_VAR 0 4
33175: PPUSH
33176: LD_INT 3
33178: PPUSH
33179: CALL_OW 275
33183: PUSH
33184: LD_VAR 0 5
33188: PUSH
33189: LD_INT 3
33191: ARRAY
33192: GREATEREQUAL
33193: AND
33194: ST_TO_ADDR
// end ;
33195: LD_VAR 0 3
33199: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
33200: LD_INT 0
33202: PPUSH
33203: PPUSH
33204: PPUSH
33205: PPUSH
33206: PPUSH
33207: PPUSH
33208: PPUSH
33209: PPUSH
33210: PPUSH
33211: PPUSH
// result := false ;
33212: LD_ADDR_VAR 0 6
33216: PUSH
33217: LD_INT 0
33219: ST_TO_ADDR
// if not base or not btype or not x or not y then
33220: LD_VAR 0 1
33224: NOT
33225: PUSH
33226: LD_VAR 0 2
33230: NOT
33231: OR
33232: PUSH
33233: LD_VAR 0 3
33237: NOT
33238: OR
33239: PUSH
33240: LD_VAR 0 4
33244: NOT
33245: OR
33246: IFFALSE 33250
// exit ;
33248: GO 33859
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
33250: LD_ADDR_VAR 0 12
33254: PUSH
33255: LD_VAR 0 2
33259: PPUSH
33260: LD_VAR 0 3
33264: PPUSH
33265: LD_VAR 0 4
33269: PPUSH
33270: LD_VAR 0 5
33274: PPUSH
33275: LD_VAR 0 1
33279: PUSH
33280: LD_INT 1
33282: ARRAY
33283: PPUSH
33284: CALL_OW 248
33288: PPUSH
33289: LD_INT 0
33291: PPUSH
33292: CALL 34696 0 6
33296: ST_TO_ADDR
// if not hexes then
33297: LD_VAR 0 12
33301: NOT
33302: IFFALSE 33306
// exit ;
33304: GO 33859
// for i = 1 to hexes do
33306: LD_ADDR_VAR 0 7
33310: PUSH
33311: DOUBLE
33312: LD_INT 1
33314: DEC
33315: ST_TO_ADDR
33316: LD_VAR 0 12
33320: PUSH
33321: FOR_TO
33322: IFFALSE 33857
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33324: LD_ADDR_VAR 0 11
33328: PUSH
33329: LD_VAR 0 12
33333: PUSH
33334: LD_VAR 0 7
33338: ARRAY
33339: PUSH
33340: LD_INT 1
33342: ARRAY
33343: PPUSH
33344: LD_VAR 0 12
33348: PUSH
33349: LD_VAR 0 7
33353: ARRAY
33354: PUSH
33355: LD_INT 2
33357: ARRAY
33358: PPUSH
33359: CALL_OW 428
33363: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
33364: LD_VAR 0 12
33368: PUSH
33369: LD_VAR 0 7
33373: ARRAY
33374: PUSH
33375: LD_INT 1
33377: ARRAY
33378: PPUSH
33379: LD_VAR 0 12
33383: PUSH
33384: LD_VAR 0 7
33388: ARRAY
33389: PUSH
33390: LD_INT 2
33392: ARRAY
33393: PPUSH
33394: CALL_OW 351
33398: PUSH
33399: LD_VAR 0 12
33403: PUSH
33404: LD_VAR 0 7
33408: ARRAY
33409: PUSH
33410: LD_INT 1
33412: ARRAY
33413: PPUSH
33414: LD_VAR 0 12
33418: PUSH
33419: LD_VAR 0 7
33423: ARRAY
33424: PUSH
33425: LD_INT 2
33427: ARRAY
33428: PPUSH
33429: CALL_OW 488
33433: NOT
33434: OR
33435: PUSH
33436: LD_VAR 0 11
33440: PPUSH
33441: CALL_OW 247
33445: PUSH
33446: LD_INT 3
33448: EQUAL
33449: OR
33450: IFFALSE 33456
// exit ;
33452: POP
33453: POP
33454: GO 33859
// if not tmp or not tmp in base then
33456: LD_VAR 0 11
33460: NOT
33461: PUSH
33462: LD_VAR 0 11
33466: PUSH
33467: LD_VAR 0 1
33471: IN
33472: NOT
33473: OR
33474: IFFALSE 33478
// continue ;
33476: GO 33321
// result := true ;
33478: LD_ADDR_VAR 0 6
33482: PUSH
33483: LD_INT 1
33485: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33486: LD_ADDR_VAR 0 15
33490: PUSH
33491: LD_VAR 0 1
33495: PPUSH
33496: LD_INT 22
33498: PUSH
33499: LD_VAR 0 11
33503: PPUSH
33504: CALL_OW 255
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: PUSH
33513: LD_INT 2
33515: PUSH
33516: LD_INT 30
33518: PUSH
33519: LD_INT 0
33521: PUSH
33522: EMPTY
33523: LIST
33524: LIST
33525: PUSH
33526: LD_INT 30
33528: PUSH
33529: LD_INT 1
33531: PUSH
33532: EMPTY
33533: LIST
33534: LIST
33535: PUSH
33536: EMPTY
33537: LIST
33538: LIST
33539: LIST
33540: PUSH
33541: EMPTY
33542: LIST
33543: LIST
33544: PPUSH
33545: CALL_OW 72
33549: ST_TO_ADDR
// if dep then
33550: LD_VAR 0 15
33554: IFFALSE 33690
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33556: LD_ADDR_VAR 0 14
33560: PUSH
33561: LD_VAR 0 15
33565: PUSH
33566: LD_INT 1
33568: ARRAY
33569: PPUSH
33570: CALL_OW 250
33574: PPUSH
33575: LD_VAR 0 15
33579: PUSH
33580: LD_INT 1
33582: ARRAY
33583: PPUSH
33584: CALL_OW 254
33588: PPUSH
33589: LD_INT 5
33591: PPUSH
33592: CALL_OW 272
33596: PUSH
33597: LD_VAR 0 15
33601: PUSH
33602: LD_INT 1
33604: ARRAY
33605: PPUSH
33606: CALL_OW 251
33610: PPUSH
33611: LD_VAR 0 15
33615: PUSH
33616: LD_INT 1
33618: ARRAY
33619: PPUSH
33620: CALL_OW 254
33624: PPUSH
33625: LD_INT 5
33627: PPUSH
33628: CALL_OW 273
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33637: LD_VAR 0 14
33641: PUSH
33642: LD_INT 1
33644: ARRAY
33645: PPUSH
33646: LD_VAR 0 14
33650: PUSH
33651: LD_INT 2
33653: ARRAY
33654: PPUSH
33655: CALL_OW 488
33659: IFFALSE 33690
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33661: LD_VAR 0 11
33665: PPUSH
33666: LD_VAR 0 14
33670: PUSH
33671: LD_INT 1
33673: ARRAY
33674: PPUSH
33675: LD_VAR 0 14
33679: PUSH
33680: LD_INT 2
33682: ARRAY
33683: PPUSH
33684: CALL_OW 111
// continue ;
33688: GO 33321
// end ; end ; r := GetDir ( tmp ) ;
33690: LD_ADDR_VAR 0 13
33694: PUSH
33695: LD_VAR 0 11
33699: PPUSH
33700: CALL_OW 254
33704: ST_TO_ADDR
// if r = 5 then
33705: LD_VAR 0 13
33709: PUSH
33710: LD_INT 5
33712: EQUAL
33713: IFFALSE 33723
// r := 0 ;
33715: LD_ADDR_VAR 0 13
33719: PUSH
33720: LD_INT 0
33722: ST_TO_ADDR
// for j = r to 5 do
33723: LD_ADDR_VAR 0 8
33727: PUSH
33728: DOUBLE
33729: LD_VAR 0 13
33733: DEC
33734: ST_TO_ADDR
33735: LD_INT 5
33737: PUSH
33738: FOR_TO
33739: IFFALSE 33853
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
33741: LD_ADDR_VAR 0 9
33745: PUSH
33746: LD_VAR 0 11
33750: PPUSH
33751: CALL_OW 250
33755: PPUSH
33756: LD_VAR 0 8
33760: PPUSH
33761: LD_INT 2
33763: PPUSH
33764: CALL_OW 272
33768: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
33769: LD_ADDR_VAR 0 10
33773: PUSH
33774: LD_VAR 0 11
33778: PPUSH
33779: CALL_OW 251
33783: PPUSH
33784: LD_VAR 0 8
33788: PPUSH
33789: LD_INT 2
33791: PPUSH
33792: CALL_OW 273
33796: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
33797: LD_VAR 0 9
33801: PPUSH
33802: LD_VAR 0 10
33806: PPUSH
33807: CALL_OW 488
33811: PUSH
33812: LD_VAR 0 9
33816: PPUSH
33817: LD_VAR 0 10
33821: PPUSH
33822: CALL_OW 428
33826: NOT
33827: AND
33828: IFFALSE 33851
// begin ComMoveXY ( tmp , _x , _y ) ;
33830: LD_VAR 0 11
33834: PPUSH
33835: LD_VAR 0 9
33839: PPUSH
33840: LD_VAR 0 10
33844: PPUSH
33845: CALL_OW 111
// break ;
33849: GO 33853
// end ; end ;
33851: GO 33738
33853: POP
33854: POP
// end ;
33855: GO 33321
33857: POP
33858: POP
// end ;
33859: LD_VAR 0 6
33863: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
33864: LD_INT 0
33866: PPUSH
33867: PPUSH
33868: PPUSH
33869: PPUSH
33870: PPUSH
33871: PPUSH
33872: PPUSH
33873: PPUSH
33874: PPUSH
33875: PPUSH
// result := false ;
33876: LD_ADDR_VAR 0 6
33880: PUSH
33881: LD_INT 0
33883: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
33884: LD_VAR 0 1
33888: NOT
33889: PUSH
33890: LD_VAR 0 1
33894: PPUSH
33895: CALL_OW 266
33899: PUSH
33900: LD_INT 0
33902: PUSH
33903: LD_INT 1
33905: PUSH
33906: EMPTY
33907: LIST
33908: LIST
33909: IN
33910: NOT
33911: OR
33912: PUSH
33913: LD_VAR 0 2
33917: NOT
33918: OR
33919: PUSH
33920: LD_VAR 0 5
33924: PUSH
33925: LD_INT 0
33927: PUSH
33928: LD_INT 1
33930: PUSH
33931: LD_INT 2
33933: PUSH
33934: LD_INT 3
33936: PUSH
33937: LD_INT 4
33939: PUSH
33940: LD_INT 5
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: IN
33951: NOT
33952: OR
33953: PUSH
33954: LD_VAR 0 3
33958: PPUSH
33959: LD_VAR 0 4
33963: PPUSH
33964: CALL_OW 488
33968: NOT
33969: OR
33970: IFFALSE 33974
// exit ;
33972: GO 34691
// pom := GetBase ( depot ) ;
33974: LD_ADDR_VAR 0 10
33978: PUSH
33979: LD_VAR 0 1
33983: PPUSH
33984: CALL_OW 274
33988: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
33989: LD_ADDR_VAR 0 11
33993: PUSH
33994: LD_VAR 0 2
33998: PPUSH
33999: LD_VAR 0 1
34003: PPUSH
34004: CALL_OW 248
34008: PPUSH
34009: CALL_OW 450
34013: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
34014: LD_VAR 0 10
34018: PPUSH
34019: LD_INT 1
34021: PPUSH
34022: CALL_OW 275
34026: PUSH
34027: LD_VAR 0 11
34031: PUSH
34032: LD_INT 1
34034: ARRAY
34035: GREATEREQUAL
34036: PUSH
34037: LD_VAR 0 10
34041: PPUSH
34042: LD_INT 2
34044: PPUSH
34045: CALL_OW 275
34049: PUSH
34050: LD_VAR 0 11
34054: PUSH
34055: LD_INT 2
34057: ARRAY
34058: GREATEREQUAL
34059: AND
34060: PUSH
34061: LD_VAR 0 10
34065: PPUSH
34066: LD_INT 3
34068: PPUSH
34069: CALL_OW 275
34073: PUSH
34074: LD_VAR 0 11
34078: PUSH
34079: LD_INT 3
34081: ARRAY
34082: GREATEREQUAL
34083: AND
34084: NOT
34085: IFFALSE 34089
// exit ;
34087: GO 34691
// if GetBType ( depot ) = b_depot then
34089: LD_VAR 0 1
34093: PPUSH
34094: CALL_OW 266
34098: PUSH
34099: LD_INT 0
34101: EQUAL
34102: IFFALSE 34114
// dist := 28 else
34104: LD_ADDR_VAR 0 14
34108: PUSH
34109: LD_INT 28
34111: ST_TO_ADDR
34112: GO 34122
// dist := 36 ;
34114: LD_ADDR_VAR 0 14
34118: PUSH
34119: LD_INT 36
34121: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
34122: LD_VAR 0 1
34126: PPUSH
34127: LD_VAR 0 3
34131: PPUSH
34132: LD_VAR 0 4
34136: PPUSH
34137: CALL_OW 297
34141: PUSH
34142: LD_VAR 0 14
34146: GREATER
34147: IFFALSE 34151
// exit ;
34149: GO 34691
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
34151: LD_ADDR_VAR 0 12
34155: PUSH
34156: LD_VAR 0 2
34160: PPUSH
34161: LD_VAR 0 3
34165: PPUSH
34166: LD_VAR 0 4
34170: PPUSH
34171: LD_VAR 0 5
34175: PPUSH
34176: LD_VAR 0 1
34180: PPUSH
34181: CALL_OW 248
34185: PPUSH
34186: LD_INT 0
34188: PPUSH
34189: CALL 34696 0 6
34193: ST_TO_ADDR
// if not hexes then
34194: LD_VAR 0 12
34198: NOT
34199: IFFALSE 34203
// exit ;
34201: GO 34691
// hex := GetHexInfo ( x , y ) ;
34203: LD_ADDR_VAR 0 15
34207: PUSH
34208: LD_VAR 0 3
34212: PPUSH
34213: LD_VAR 0 4
34217: PPUSH
34218: CALL_OW 546
34222: ST_TO_ADDR
// if hex [ 1 ] then
34223: LD_VAR 0 15
34227: PUSH
34228: LD_INT 1
34230: ARRAY
34231: IFFALSE 34235
// exit ;
34233: GO 34691
// height := hex [ 2 ] ;
34235: LD_ADDR_VAR 0 13
34239: PUSH
34240: LD_VAR 0 15
34244: PUSH
34245: LD_INT 2
34247: ARRAY
34248: ST_TO_ADDR
// for i = 1 to hexes do
34249: LD_ADDR_VAR 0 7
34253: PUSH
34254: DOUBLE
34255: LD_INT 1
34257: DEC
34258: ST_TO_ADDR
34259: LD_VAR 0 12
34263: PUSH
34264: FOR_TO
34265: IFFALSE 34595
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
34267: LD_VAR 0 12
34271: PUSH
34272: LD_VAR 0 7
34276: ARRAY
34277: PUSH
34278: LD_INT 1
34280: ARRAY
34281: PPUSH
34282: LD_VAR 0 12
34286: PUSH
34287: LD_VAR 0 7
34291: ARRAY
34292: PUSH
34293: LD_INT 2
34295: ARRAY
34296: PPUSH
34297: CALL_OW 488
34301: NOT
34302: PUSH
34303: LD_VAR 0 12
34307: PUSH
34308: LD_VAR 0 7
34312: ARRAY
34313: PUSH
34314: LD_INT 1
34316: ARRAY
34317: PPUSH
34318: LD_VAR 0 12
34322: PUSH
34323: LD_VAR 0 7
34327: ARRAY
34328: PUSH
34329: LD_INT 2
34331: ARRAY
34332: PPUSH
34333: CALL_OW 428
34337: PUSH
34338: LD_INT 0
34340: GREATER
34341: OR
34342: PUSH
34343: LD_VAR 0 12
34347: PUSH
34348: LD_VAR 0 7
34352: ARRAY
34353: PUSH
34354: LD_INT 1
34356: ARRAY
34357: PPUSH
34358: LD_VAR 0 12
34362: PUSH
34363: LD_VAR 0 7
34367: ARRAY
34368: PUSH
34369: LD_INT 2
34371: ARRAY
34372: PPUSH
34373: CALL_OW 351
34377: OR
34378: IFFALSE 34384
// exit ;
34380: POP
34381: POP
34382: GO 34691
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34384: LD_ADDR_VAR 0 8
34388: PUSH
34389: LD_VAR 0 12
34393: PUSH
34394: LD_VAR 0 7
34398: ARRAY
34399: PUSH
34400: LD_INT 1
34402: ARRAY
34403: PPUSH
34404: LD_VAR 0 12
34408: PUSH
34409: LD_VAR 0 7
34413: ARRAY
34414: PUSH
34415: LD_INT 2
34417: ARRAY
34418: PPUSH
34419: CALL_OW 546
34423: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
34424: LD_VAR 0 8
34428: PUSH
34429: LD_INT 1
34431: ARRAY
34432: PUSH
34433: LD_VAR 0 8
34437: PUSH
34438: LD_INT 2
34440: ARRAY
34441: PUSH
34442: LD_VAR 0 13
34446: PUSH
34447: LD_INT 2
34449: PLUS
34450: GREATER
34451: OR
34452: PUSH
34453: LD_VAR 0 8
34457: PUSH
34458: LD_INT 2
34460: ARRAY
34461: PUSH
34462: LD_VAR 0 13
34466: PUSH
34467: LD_INT 2
34469: MINUS
34470: LESS
34471: OR
34472: PUSH
34473: LD_VAR 0 8
34477: PUSH
34478: LD_INT 3
34480: ARRAY
34481: PUSH
34482: LD_INT 0
34484: PUSH
34485: LD_INT 8
34487: PUSH
34488: LD_INT 9
34490: PUSH
34491: LD_INT 10
34493: PUSH
34494: LD_INT 11
34496: PUSH
34497: LD_INT 12
34499: PUSH
34500: LD_INT 13
34502: PUSH
34503: LD_INT 16
34505: PUSH
34506: LD_INT 17
34508: PUSH
34509: LD_INT 18
34511: PUSH
34512: LD_INT 19
34514: PUSH
34515: LD_INT 20
34517: PUSH
34518: LD_INT 21
34520: PUSH
34521: EMPTY
34522: LIST
34523: LIST
34524: LIST
34525: LIST
34526: LIST
34527: LIST
34528: LIST
34529: LIST
34530: LIST
34531: LIST
34532: LIST
34533: LIST
34534: LIST
34535: IN
34536: NOT
34537: OR
34538: PUSH
34539: LD_VAR 0 8
34543: PUSH
34544: LD_INT 5
34546: ARRAY
34547: NOT
34548: OR
34549: PUSH
34550: LD_VAR 0 8
34554: PUSH
34555: LD_INT 6
34557: ARRAY
34558: PUSH
34559: LD_INT 1
34561: PUSH
34562: LD_INT 2
34564: PUSH
34565: LD_INT 7
34567: PUSH
34568: LD_INT 9
34570: PUSH
34571: LD_INT 10
34573: PUSH
34574: LD_INT 11
34576: PUSH
34577: EMPTY
34578: LIST
34579: LIST
34580: LIST
34581: LIST
34582: LIST
34583: LIST
34584: IN
34585: NOT
34586: OR
34587: IFFALSE 34593
// exit ;
34589: POP
34590: POP
34591: GO 34691
// end ;
34593: GO 34264
34595: POP
34596: POP
// side := GetSide ( depot ) ;
34597: LD_ADDR_VAR 0 9
34601: PUSH
34602: LD_VAR 0 1
34606: PPUSH
34607: CALL_OW 255
34611: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
34612: LD_VAR 0 9
34616: PPUSH
34617: LD_VAR 0 3
34621: PPUSH
34622: LD_VAR 0 4
34626: PPUSH
34627: LD_INT 20
34629: PPUSH
34630: CALL 27345 0 4
34634: PUSH
34635: LD_INT 4
34637: ARRAY
34638: IFFALSE 34642
// exit ;
34640: GO 34691
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
34642: LD_VAR 0 2
34646: PUSH
34647: LD_INT 29
34649: PUSH
34650: LD_INT 30
34652: PUSH
34653: EMPTY
34654: LIST
34655: LIST
34656: IN
34657: PUSH
34658: LD_VAR 0 3
34662: PPUSH
34663: LD_VAR 0 4
34667: PPUSH
34668: LD_VAR 0 9
34672: PPUSH
34673: CALL_OW 440
34677: NOT
34678: AND
34679: IFFALSE 34683
// exit ;
34681: GO 34691
// result := true ;
34683: LD_ADDR_VAR 0 6
34687: PUSH
34688: LD_INT 1
34690: ST_TO_ADDR
// end ;
34691: LD_VAR 0 6
34695: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
34696: LD_INT 0
34698: PPUSH
34699: PPUSH
34700: PPUSH
34701: PPUSH
34702: PPUSH
34703: PPUSH
34704: PPUSH
34705: PPUSH
34706: PPUSH
34707: PPUSH
34708: PPUSH
34709: PPUSH
34710: PPUSH
34711: PPUSH
34712: PPUSH
34713: PPUSH
34714: PPUSH
34715: PPUSH
34716: PPUSH
34717: PPUSH
34718: PPUSH
34719: PPUSH
34720: PPUSH
34721: PPUSH
34722: PPUSH
34723: PPUSH
34724: PPUSH
34725: PPUSH
34726: PPUSH
34727: PPUSH
34728: PPUSH
34729: PPUSH
34730: PPUSH
34731: PPUSH
34732: PPUSH
34733: PPUSH
34734: PPUSH
34735: PPUSH
34736: PPUSH
34737: PPUSH
34738: PPUSH
34739: PPUSH
34740: PPUSH
34741: PPUSH
34742: PPUSH
34743: PPUSH
34744: PPUSH
34745: PPUSH
34746: PPUSH
34747: PPUSH
34748: PPUSH
34749: PPUSH
34750: PPUSH
34751: PPUSH
34752: PPUSH
34753: PPUSH
34754: PPUSH
34755: PPUSH
// result = [ ] ;
34756: LD_ADDR_VAR 0 7
34760: PUSH
34761: EMPTY
34762: ST_TO_ADDR
// temp_list = [ ] ;
34763: LD_ADDR_VAR 0 9
34767: PUSH
34768: EMPTY
34769: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
34770: LD_VAR 0 4
34774: PUSH
34775: LD_INT 0
34777: PUSH
34778: LD_INT 1
34780: PUSH
34781: LD_INT 2
34783: PUSH
34784: LD_INT 3
34786: PUSH
34787: LD_INT 4
34789: PUSH
34790: LD_INT 5
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: LIST
34800: IN
34801: NOT
34802: PUSH
34803: LD_VAR 0 1
34807: PUSH
34808: LD_INT 0
34810: PUSH
34811: LD_INT 1
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: IN
34818: PUSH
34819: LD_VAR 0 5
34823: PUSH
34824: LD_INT 1
34826: PUSH
34827: LD_INT 2
34829: PUSH
34830: LD_INT 3
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: LIST
34837: IN
34838: NOT
34839: AND
34840: OR
34841: IFFALSE 34845
// exit ;
34843: GO 53236
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
34845: LD_VAR 0 1
34849: PUSH
34850: LD_INT 6
34852: PUSH
34853: LD_INT 7
34855: PUSH
34856: LD_INT 8
34858: PUSH
34859: LD_INT 13
34861: PUSH
34862: LD_INT 12
34864: PUSH
34865: LD_INT 15
34867: PUSH
34868: LD_INT 11
34870: PUSH
34871: LD_INT 14
34873: PUSH
34874: LD_INT 10
34876: PUSH
34877: EMPTY
34878: LIST
34879: LIST
34880: LIST
34881: LIST
34882: LIST
34883: LIST
34884: LIST
34885: LIST
34886: LIST
34887: IN
34888: IFFALSE 34898
// btype = b_lab ;
34890: LD_ADDR_VAR 0 1
34894: PUSH
34895: LD_INT 6
34897: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
34898: LD_VAR 0 6
34902: PUSH
34903: LD_INT 0
34905: PUSH
34906: LD_INT 1
34908: PUSH
34909: LD_INT 2
34911: PUSH
34912: EMPTY
34913: LIST
34914: LIST
34915: LIST
34916: IN
34917: NOT
34918: PUSH
34919: LD_VAR 0 1
34923: PUSH
34924: LD_INT 0
34926: PUSH
34927: LD_INT 1
34929: PUSH
34930: LD_INT 2
34932: PUSH
34933: LD_INT 3
34935: PUSH
34936: LD_INT 6
34938: PUSH
34939: LD_INT 36
34941: PUSH
34942: LD_INT 4
34944: PUSH
34945: LD_INT 5
34947: PUSH
34948: LD_INT 31
34950: PUSH
34951: LD_INT 32
34953: PUSH
34954: LD_INT 33
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: LIST
34961: LIST
34962: LIST
34963: LIST
34964: LIST
34965: LIST
34966: LIST
34967: LIST
34968: LIST
34969: IN
34970: NOT
34971: PUSH
34972: LD_VAR 0 6
34976: PUSH
34977: LD_INT 1
34979: EQUAL
34980: AND
34981: OR
34982: PUSH
34983: LD_VAR 0 1
34987: PUSH
34988: LD_INT 2
34990: PUSH
34991: LD_INT 3
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: IN
34998: NOT
34999: PUSH
35000: LD_VAR 0 6
35004: PUSH
35005: LD_INT 2
35007: EQUAL
35008: AND
35009: OR
35010: IFFALSE 35020
// mode = 0 ;
35012: LD_ADDR_VAR 0 6
35016: PUSH
35017: LD_INT 0
35019: ST_TO_ADDR
// case mode of 0 :
35020: LD_VAR 0 6
35024: PUSH
35025: LD_INT 0
35027: DOUBLE
35028: EQUAL
35029: IFTRUE 35033
35031: GO 46486
35033: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35034: LD_ADDR_VAR 0 11
35038: PUSH
35039: LD_INT 0
35041: PUSH
35042: LD_INT 0
35044: PUSH
35045: EMPTY
35046: LIST
35047: LIST
35048: PUSH
35049: LD_INT 0
35051: PUSH
35052: LD_INT 1
35054: NEG
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: PUSH
35060: LD_INT 1
35062: PUSH
35063: LD_INT 0
35065: PUSH
35066: EMPTY
35067: LIST
35068: LIST
35069: PUSH
35070: LD_INT 1
35072: PUSH
35073: LD_INT 1
35075: PUSH
35076: EMPTY
35077: LIST
35078: LIST
35079: PUSH
35080: LD_INT 0
35082: PUSH
35083: LD_INT 1
35085: PUSH
35086: EMPTY
35087: LIST
35088: LIST
35089: PUSH
35090: LD_INT 1
35092: NEG
35093: PUSH
35094: LD_INT 0
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: PUSH
35101: LD_INT 1
35103: NEG
35104: PUSH
35105: LD_INT 1
35107: NEG
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: PUSH
35113: LD_INT 1
35115: NEG
35116: PUSH
35117: LD_INT 2
35119: NEG
35120: PUSH
35121: EMPTY
35122: LIST
35123: LIST
35124: PUSH
35125: LD_INT 0
35127: PUSH
35128: LD_INT 2
35130: NEG
35131: PUSH
35132: EMPTY
35133: LIST
35134: LIST
35135: PUSH
35136: LD_INT 1
35138: PUSH
35139: LD_INT 1
35141: NEG
35142: PUSH
35143: EMPTY
35144: LIST
35145: LIST
35146: PUSH
35147: LD_INT 1
35149: PUSH
35150: LD_INT 2
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: PUSH
35157: LD_INT 0
35159: PUSH
35160: LD_INT 2
35162: PUSH
35163: EMPTY
35164: LIST
35165: LIST
35166: PUSH
35167: LD_INT 1
35169: NEG
35170: PUSH
35171: LD_INT 1
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: PUSH
35178: LD_INT 1
35180: PUSH
35181: LD_INT 3
35183: PUSH
35184: EMPTY
35185: LIST
35186: LIST
35187: PUSH
35188: LD_INT 0
35190: PUSH
35191: LD_INT 3
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: PUSH
35198: LD_INT 1
35200: NEG
35201: PUSH
35202: LD_INT 2
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: PUSH
35209: EMPTY
35210: LIST
35211: LIST
35212: LIST
35213: LIST
35214: LIST
35215: LIST
35216: LIST
35217: LIST
35218: LIST
35219: LIST
35220: LIST
35221: LIST
35222: LIST
35223: LIST
35224: LIST
35225: LIST
35226: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35227: LD_ADDR_VAR 0 12
35231: PUSH
35232: LD_INT 0
35234: PUSH
35235: LD_INT 0
35237: PUSH
35238: EMPTY
35239: LIST
35240: LIST
35241: PUSH
35242: LD_INT 0
35244: PUSH
35245: LD_INT 1
35247: NEG
35248: PUSH
35249: EMPTY
35250: LIST
35251: LIST
35252: PUSH
35253: LD_INT 1
35255: PUSH
35256: LD_INT 0
35258: PUSH
35259: EMPTY
35260: LIST
35261: LIST
35262: PUSH
35263: LD_INT 1
35265: PUSH
35266: LD_INT 1
35268: PUSH
35269: EMPTY
35270: LIST
35271: LIST
35272: PUSH
35273: LD_INT 0
35275: PUSH
35276: LD_INT 1
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: PUSH
35283: LD_INT 1
35285: NEG
35286: PUSH
35287: LD_INT 0
35289: PUSH
35290: EMPTY
35291: LIST
35292: LIST
35293: PUSH
35294: LD_INT 1
35296: NEG
35297: PUSH
35298: LD_INT 1
35300: NEG
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: PUSH
35306: LD_INT 1
35308: PUSH
35309: LD_INT 1
35311: NEG
35312: PUSH
35313: EMPTY
35314: LIST
35315: LIST
35316: PUSH
35317: LD_INT 2
35319: PUSH
35320: LD_INT 0
35322: PUSH
35323: EMPTY
35324: LIST
35325: LIST
35326: PUSH
35327: LD_INT 2
35329: PUSH
35330: LD_INT 1
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: PUSH
35337: LD_INT 1
35339: NEG
35340: PUSH
35341: LD_INT 1
35343: PUSH
35344: EMPTY
35345: LIST
35346: LIST
35347: PUSH
35348: LD_INT 2
35350: NEG
35351: PUSH
35352: LD_INT 0
35354: PUSH
35355: EMPTY
35356: LIST
35357: LIST
35358: PUSH
35359: LD_INT 2
35361: NEG
35362: PUSH
35363: LD_INT 1
35365: NEG
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: PUSH
35371: LD_INT 2
35373: NEG
35374: PUSH
35375: LD_INT 1
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: PUSH
35382: LD_INT 3
35384: NEG
35385: PUSH
35386: LD_INT 0
35388: PUSH
35389: EMPTY
35390: LIST
35391: LIST
35392: PUSH
35393: LD_INT 3
35395: NEG
35396: PUSH
35397: LD_INT 1
35399: NEG
35400: PUSH
35401: EMPTY
35402: LIST
35403: LIST
35404: PUSH
35405: EMPTY
35406: LIST
35407: LIST
35408: LIST
35409: LIST
35410: LIST
35411: LIST
35412: LIST
35413: LIST
35414: LIST
35415: LIST
35416: LIST
35417: LIST
35418: LIST
35419: LIST
35420: LIST
35421: LIST
35422: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35423: LD_ADDR_VAR 0 13
35427: PUSH
35428: LD_INT 0
35430: PUSH
35431: LD_INT 0
35433: PUSH
35434: EMPTY
35435: LIST
35436: LIST
35437: PUSH
35438: LD_INT 0
35440: PUSH
35441: LD_INT 1
35443: NEG
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: PUSH
35449: LD_INT 1
35451: PUSH
35452: LD_INT 0
35454: PUSH
35455: EMPTY
35456: LIST
35457: LIST
35458: PUSH
35459: LD_INT 1
35461: PUSH
35462: LD_INT 1
35464: PUSH
35465: EMPTY
35466: LIST
35467: LIST
35468: PUSH
35469: LD_INT 0
35471: PUSH
35472: LD_INT 1
35474: PUSH
35475: EMPTY
35476: LIST
35477: LIST
35478: PUSH
35479: LD_INT 1
35481: NEG
35482: PUSH
35483: LD_INT 0
35485: PUSH
35486: EMPTY
35487: LIST
35488: LIST
35489: PUSH
35490: LD_INT 1
35492: NEG
35493: PUSH
35494: LD_INT 1
35496: NEG
35497: PUSH
35498: EMPTY
35499: LIST
35500: LIST
35501: PUSH
35502: LD_INT 1
35504: NEG
35505: PUSH
35506: LD_INT 2
35508: NEG
35509: PUSH
35510: EMPTY
35511: LIST
35512: LIST
35513: PUSH
35514: LD_INT 2
35516: PUSH
35517: LD_INT 1
35519: PUSH
35520: EMPTY
35521: LIST
35522: LIST
35523: PUSH
35524: LD_INT 2
35526: PUSH
35527: LD_INT 2
35529: PUSH
35530: EMPTY
35531: LIST
35532: LIST
35533: PUSH
35534: LD_INT 1
35536: PUSH
35537: LD_INT 2
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: PUSH
35544: LD_INT 2
35546: NEG
35547: PUSH
35548: LD_INT 1
35550: NEG
35551: PUSH
35552: EMPTY
35553: LIST
35554: LIST
35555: PUSH
35556: LD_INT 2
35558: NEG
35559: PUSH
35560: LD_INT 2
35562: NEG
35563: PUSH
35564: EMPTY
35565: LIST
35566: LIST
35567: PUSH
35568: LD_INT 2
35570: NEG
35571: PUSH
35572: LD_INT 3
35574: NEG
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: PUSH
35580: LD_INT 3
35582: NEG
35583: PUSH
35584: LD_INT 2
35586: NEG
35587: PUSH
35588: EMPTY
35589: LIST
35590: LIST
35591: PUSH
35592: LD_INT 3
35594: NEG
35595: PUSH
35596: LD_INT 3
35598: NEG
35599: PUSH
35600: EMPTY
35601: LIST
35602: LIST
35603: PUSH
35604: EMPTY
35605: LIST
35606: LIST
35607: LIST
35608: LIST
35609: LIST
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: LIST
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: LIST
35620: LIST
35621: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35622: LD_ADDR_VAR 0 14
35626: PUSH
35627: LD_INT 0
35629: PUSH
35630: LD_INT 0
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: PUSH
35637: LD_INT 0
35639: PUSH
35640: LD_INT 1
35642: NEG
35643: PUSH
35644: EMPTY
35645: LIST
35646: LIST
35647: PUSH
35648: LD_INT 1
35650: PUSH
35651: LD_INT 0
35653: PUSH
35654: EMPTY
35655: LIST
35656: LIST
35657: PUSH
35658: LD_INT 1
35660: PUSH
35661: LD_INT 1
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: PUSH
35668: LD_INT 0
35670: PUSH
35671: LD_INT 1
35673: PUSH
35674: EMPTY
35675: LIST
35676: LIST
35677: PUSH
35678: LD_INT 1
35680: NEG
35681: PUSH
35682: LD_INT 0
35684: PUSH
35685: EMPTY
35686: LIST
35687: LIST
35688: PUSH
35689: LD_INT 1
35691: NEG
35692: PUSH
35693: LD_INT 1
35695: NEG
35696: PUSH
35697: EMPTY
35698: LIST
35699: LIST
35700: PUSH
35701: LD_INT 1
35703: NEG
35704: PUSH
35705: LD_INT 2
35707: NEG
35708: PUSH
35709: EMPTY
35710: LIST
35711: LIST
35712: PUSH
35713: LD_INT 0
35715: PUSH
35716: LD_INT 2
35718: NEG
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: PUSH
35724: LD_INT 1
35726: PUSH
35727: LD_INT 1
35729: NEG
35730: PUSH
35731: EMPTY
35732: LIST
35733: LIST
35734: PUSH
35735: LD_INT 1
35737: PUSH
35738: LD_INT 2
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PUSH
35745: LD_INT 0
35747: PUSH
35748: LD_INT 2
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: PUSH
35755: LD_INT 1
35757: NEG
35758: PUSH
35759: LD_INT 1
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: PUSH
35766: LD_INT 1
35768: NEG
35769: PUSH
35770: LD_INT 3
35772: NEG
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: PUSH
35778: LD_INT 0
35780: PUSH
35781: LD_INT 3
35783: NEG
35784: PUSH
35785: EMPTY
35786: LIST
35787: LIST
35788: PUSH
35789: LD_INT 1
35791: PUSH
35792: LD_INT 2
35794: NEG
35795: PUSH
35796: EMPTY
35797: LIST
35798: LIST
35799: PUSH
35800: EMPTY
35801: LIST
35802: LIST
35803: LIST
35804: LIST
35805: LIST
35806: LIST
35807: LIST
35808: LIST
35809: LIST
35810: LIST
35811: LIST
35812: LIST
35813: LIST
35814: LIST
35815: LIST
35816: LIST
35817: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35818: LD_ADDR_VAR 0 15
35822: PUSH
35823: LD_INT 0
35825: PUSH
35826: LD_INT 0
35828: PUSH
35829: EMPTY
35830: LIST
35831: LIST
35832: PUSH
35833: LD_INT 0
35835: PUSH
35836: LD_INT 1
35838: NEG
35839: PUSH
35840: EMPTY
35841: LIST
35842: LIST
35843: PUSH
35844: LD_INT 1
35846: PUSH
35847: LD_INT 0
35849: PUSH
35850: EMPTY
35851: LIST
35852: LIST
35853: PUSH
35854: LD_INT 1
35856: PUSH
35857: LD_INT 1
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: PUSH
35864: LD_INT 0
35866: PUSH
35867: LD_INT 1
35869: PUSH
35870: EMPTY
35871: LIST
35872: LIST
35873: PUSH
35874: LD_INT 1
35876: NEG
35877: PUSH
35878: LD_INT 0
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: PUSH
35885: LD_INT 1
35887: NEG
35888: PUSH
35889: LD_INT 1
35891: NEG
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: PUSH
35897: LD_INT 1
35899: PUSH
35900: LD_INT 1
35902: NEG
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: PUSH
35908: LD_INT 2
35910: PUSH
35911: LD_INT 0
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: PUSH
35918: LD_INT 2
35920: PUSH
35921: LD_INT 1
35923: PUSH
35924: EMPTY
35925: LIST
35926: LIST
35927: PUSH
35928: LD_INT 1
35930: NEG
35931: PUSH
35932: LD_INT 1
35934: PUSH
35935: EMPTY
35936: LIST
35937: LIST
35938: PUSH
35939: LD_INT 2
35941: NEG
35942: PUSH
35943: LD_INT 0
35945: PUSH
35946: EMPTY
35947: LIST
35948: LIST
35949: PUSH
35950: LD_INT 2
35952: NEG
35953: PUSH
35954: LD_INT 1
35956: NEG
35957: PUSH
35958: EMPTY
35959: LIST
35960: LIST
35961: PUSH
35962: LD_INT 2
35964: PUSH
35965: LD_INT 1
35967: NEG
35968: PUSH
35969: EMPTY
35970: LIST
35971: LIST
35972: PUSH
35973: LD_INT 3
35975: PUSH
35976: LD_INT 0
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: PUSH
35983: LD_INT 3
35985: PUSH
35986: LD_INT 1
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: LIST
35997: LIST
35998: LIST
35999: LIST
36000: LIST
36001: LIST
36002: LIST
36003: LIST
36004: LIST
36005: LIST
36006: LIST
36007: LIST
36008: LIST
36009: LIST
36010: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36011: LD_ADDR_VAR 0 16
36015: PUSH
36016: LD_INT 0
36018: PUSH
36019: LD_INT 0
36021: PUSH
36022: EMPTY
36023: LIST
36024: LIST
36025: PUSH
36026: LD_INT 0
36028: PUSH
36029: LD_INT 1
36031: NEG
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: PUSH
36037: LD_INT 1
36039: PUSH
36040: LD_INT 0
36042: PUSH
36043: EMPTY
36044: LIST
36045: LIST
36046: PUSH
36047: LD_INT 1
36049: PUSH
36050: LD_INT 1
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: PUSH
36057: LD_INT 0
36059: PUSH
36060: LD_INT 1
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: PUSH
36067: LD_INT 1
36069: NEG
36070: PUSH
36071: LD_INT 0
36073: PUSH
36074: EMPTY
36075: LIST
36076: LIST
36077: PUSH
36078: LD_INT 1
36080: NEG
36081: PUSH
36082: LD_INT 1
36084: NEG
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: PUSH
36090: LD_INT 1
36092: NEG
36093: PUSH
36094: LD_INT 2
36096: NEG
36097: PUSH
36098: EMPTY
36099: LIST
36100: LIST
36101: PUSH
36102: LD_INT 2
36104: PUSH
36105: LD_INT 1
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: PUSH
36112: LD_INT 2
36114: PUSH
36115: LD_INT 2
36117: PUSH
36118: EMPTY
36119: LIST
36120: LIST
36121: PUSH
36122: LD_INT 1
36124: PUSH
36125: LD_INT 2
36127: PUSH
36128: EMPTY
36129: LIST
36130: LIST
36131: PUSH
36132: LD_INT 2
36134: NEG
36135: PUSH
36136: LD_INT 1
36138: NEG
36139: PUSH
36140: EMPTY
36141: LIST
36142: LIST
36143: PUSH
36144: LD_INT 2
36146: NEG
36147: PUSH
36148: LD_INT 2
36150: NEG
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: PUSH
36156: LD_INT 3
36158: PUSH
36159: LD_INT 2
36161: PUSH
36162: EMPTY
36163: LIST
36164: LIST
36165: PUSH
36166: LD_INT 3
36168: PUSH
36169: LD_INT 3
36171: PUSH
36172: EMPTY
36173: LIST
36174: LIST
36175: PUSH
36176: LD_INT 2
36178: PUSH
36179: LD_INT 3
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: PUSH
36186: EMPTY
36187: LIST
36188: LIST
36189: LIST
36190: LIST
36191: LIST
36192: LIST
36193: LIST
36194: LIST
36195: LIST
36196: LIST
36197: LIST
36198: LIST
36199: LIST
36200: LIST
36201: LIST
36202: LIST
36203: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36204: LD_ADDR_VAR 0 17
36208: PUSH
36209: LD_INT 0
36211: PUSH
36212: LD_INT 0
36214: PUSH
36215: EMPTY
36216: LIST
36217: LIST
36218: PUSH
36219: LD_INT 0
36221: PUSH
36222: LD_INT 1
36224: NEG
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: PUSH
36230: LD_INT 1
36232: PUSH
36233: LD_INT 0
36235: PUSH
36236: EMPTY
36237: LIST
36238: LIST
36239: PUSH
36240: LD_INT 1
36242: PUSH
36243: LD_INT 1
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: PUSH
36250: LD_INT 0
36252: PUSH
36253: LD_INT 1
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: PUSH
36260: LD_INT 1
36262: NEG
36263: PUSH
36264: LD_INT 0
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: PUSH
36271: LD_INT 1
36273: NEG
36274: PUSH
36275: LD_INT 1
36277: NEG
36278: PUSH
36279: EMPTY
36280: LIST
36281: LIST
36282: PUSH
36283: LD_INT 1
36285: NEG
36286: PUSH
36287: LD_INT 2
36289: NEG
36290: PUSH
36291: EMPTY
36292: LIST
36293: LIST
36294: PUSH
36295: LD_INT 0
36297: PUSH
36298: LD_INT 2
36300: NEG
36301: PUSH
36302: EMPTY
36303: LIST
36304: LIST
36305: PUSH
36306: LD_INT 1
36308: PUSH
36309: LD_INT 1
36311: NEG
36312: PUSH
36313: EMPTY
36314: LIST
36315: LIST
36316: PUSH
36317: LD_INT 2
36319: PUSH
36320: LD_INT 0
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: PUSH
36327: LD_INT 2
36329: PUSH
36330: LD_INT 1
36332: PUSH
36333: EMPTY
36334: LIST
36335: LIST
36336: PUSH
36337: LD_INT 2
36339: PUSH
36340: LD_INT 2
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: PUSH
36347: LD_INT 1
36349: PUSH
36350: LD_INT 2
36352: PUSH
36353: EMPTY
36354: LIST
36355: LIST
36356: PUSH
36357: LD_INT 0
36359: PUSH
36360: LD_INT 2
36362: PUSH
36363: EMPTY
36364: LIST
36365: LIST
36366: PUSH
36367: LD_INT 1
36369: NEG
36370: PUSH
36371: LD_INT 1
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: PUSH
36378: LD_INT 2
36380: NEG
36381: PUSH
36382: LD_INT 0
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: PUSH
36389: LD_INT 2
36391: NEG
36392: PUSH
36393: LD_INT 1
36395: NEG
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: PUSH
36401: LD_INT 2
36403: NEG
36404: PUSH
36405: LD_INT 2
36407: NEG
36408: PUSH
36409: EMPTY
36410: LIST
36411: LIST
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: LIST
36417: LIST
36418: LIST
36419: LIST
36420: LIST
36421: LIST
36422: LIST
36423: LIST
36424: LIST
36425: LIST
36426: LIST
36427: LIST
36428: LIST
36429: LIST
36430: LIST
36431: LIST
36432: LIST
36433: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36434: LD_ADDR_VAR 0 18
36438: PUSH
36439: LD_INT 0
36441: PUSH
36442: LD_INT 0
36444: PUSH
36445: EMPTY
36446: LIST
36447: LIST
36448: PUSH
36449: LD_INT 0
36451: PUSH
36452: LD_INT 1
36454: NEG
36455: PUSH
36456: EMPTY
36457: LIST
36458: LIST
36459: PUSH
36460: LD_INT 1
36462: PUSH
36463: LD_INT 0
36465: PUSH
36466: EMPTY
36467: LIST
36468: LIST
36469: PUSH
36470: LD_INT 1
36472: PUSH
36473: LD_INT 1
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: PUSH
36480: LD_INT 0
36482: PUSH
36483: LD_INT 1
36485: PUSH
36486: EMPTY
36487: LIST
36488: LIST
36489: PUSH
36490: LD_INT 1
36492: NEG
36493: PUSH
36494: LD_INT 0
36496: PUSH
36497: EMPTY
36498: LIST
36499: LIST
36500: PUSH
36501: LD_INT 1
36503: NEG
36504: PUSH
36505: LD_INT 1
36507: NEG
36508: PUSH
36509: EMPTY
36510: LIST
36511: LIST
36512: PUSH
36513: LD_INT 1
36515: NEG
36516: PUSH
36517: LD_INT 2
36519: NEG
36520: PUSH
36521: EMPTY
36522: LIST
36523: LIST
36524: PUSH
36525: LD_INT 0
36527: PUSH
36528: LD_INT 2
36530: NEG
36531: PUSH
36532: EMPTY
36533: LIST
36534: LIST
36535: PUSH
36536: LD_INT 1
36538: PUSH
36539: LD_INT 1
36541: NEG
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: PUSH
36547: LD_INT 2
36549: PUSH
36550: LD_INT 0
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: PUSH
36557: LD_INT 2
36559: PUSH
36560: LD_INT 1
36562: PUSH
36563: EMPTY
36564: LIST
36565: LIST
36566: PUSH
36567: LD_INT 2
36569: PUSH
36570: LD_INT 2
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: PUSH
36577: LD_INT 1
36579: PUSH
36580: LD_INT 2
36582: PUSH
36583: EMPTY
36584: LIST
36585: LIST
36586: PUSH
36587: LD_INT 0
36589: PUSH
36590: LD_INT 2
36592: PUSH
36593: EMPTY
36594: LIST
36595: LIST
36596: PUSH
36597: LD_INT 1
36599: NEG
36600: PUSH
36601: LD_INT 1
36603: PUSH
36604: EMPTY
36605: LIST
36606: LIST
36607: PUSH
36608: LD_INT 2
36610: NEG
36611: PUSH
36612: LD_INT 0
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: PUSH
36619: LD_INT 2
36621: NEG
36622: PUSH
36623: LD_INT 1
36625: NEG
36626: PUSH
36627: EMPTY
36628: LIST
36629: LIST
36630: PUSH
36631: LD_INT 2
36633: NEG
36634: PUSH
36635: LD_INT 2
36637: NEG
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: PUSH
36643: EMPTY
36644: LIST
36645: LIST
36646: LIST
36647: LIST
36648: LIST
36649: LIST
36650: LIST
36651: LIST
36652: LIST
36653: LIST
36654: LIST
36655: LIST
36656: LIST
36657: LIST
36658: LIST
36659: LIST
36660: LIST
36661: LIST
36662: LIST
36663: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36664: LD_ADDR_VAR 0 19
36668: PUSH
36669: LD_INT 0
36671: PUSH
36672: LD_INT 0
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: PUSH
36679: LD_INT 0
36681: PUSH
36682: LD_INT 1
36684: NEG
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: PUSH
36690: LD_INT 1
36692: PUSH
36693: LD_INT 0
36695: PUSH
36696: EMPTY
36697: LIST
36698: LIST
36699: PUSH
36700: LD_INT 1
36702: PUSH
36703: LD_INT 1
36705: PUSH
36706: EMPTY
36707: LIST
36708: LIST
36709: PUSH
36710: LD_INT 0
36712: PUSH
36713: LD_INT 1
36715: PUSH
36716: EMPTY
36717: LIST
36718: LIST
36719: PUSH
36720: LD_INT 1
36722: NEG
36723: PUSH
36724: LD_INT 0
36726: PUSH
36727: EMPTY
36728: LIST
36729: LIST
36730: PUSH
36731: LD_INT 1
36733: NEG
36734: PUSH
36735: LD_INT 1
36737: NEG
36738: PUSH
36739: EMPTY
36740: LIST
36741: LIST
36742: PUSH
36743: LD_INT 1
36745: NEG
36746: PUSH
36747: LD_INT 2
36749: NEG
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: PUSH
36755: LD_INT 0
36757: PUSH
36758: LD_INT 2
36760: NEG
36761: PUSH
36762: EMPTY
36763: LIST
36764: LIST
36765: PUSH
36766: LD_INT 1
36768: PUSH
36769: LD_INT 1
36771: NEG
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: PUSH
36777: LD_INT 2
36779: PUSH
36780: LD_INT 0
36782: PUSH
36783: EMPTY
36784: LIST
36785: LIST
36786: PUSH
36787: LD_INT 2
36789: PUSH
36790: LD_INT 1
36792: PUSH
36793: EMPTY
36794: LIST
36795: LIST
36796: PUSH
36797: LD_INT 2
36799: PUSH
36800: LD_INT 2
36802: PUSH
36803: EMPTY
36804: LIST
36805: LIST
36806: PUSH
36807: LD_INT 1
36809: PUSH
36810: LD_INT 2
36812: PUSH
36813: EMPTY
36814: LIST
36815: LIST
36816: PUSH
36817: LD_INT 0
36819: PUSH
36820: LD_INT 2
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: PUSH
36827: LD_INT 1
36829: NEG
36830: PUSH
36831: LD_INT 1
36833: PUSH
36834: EMPTY
36835: LIST
36836: LIST
36837: PUSH
36838: LD_INT 2
36840: NEG
36841: PUSH
36842: LD_INT 0
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: PUSH
36849: LD_INT 2
36851: NEG
36852: PUSH
36853: LD_INT 1
36855: NEG
36856: PUSH
36857: EMPTY
36858: LIST
36859: LIST
36860: PUSH
36861: LD_INT 2
36863: NEG
36864: PUSH
36865: LD_INT 2
36867: NEG
36868: PUSH
36869: EMPTY
36870: LIST
36871: LIST
36872: PUSH
36873: EMPTY
36874: LIST
36875: LIST
36876: LIST
36877: LIST
36878: LIST
36879: LIST
36880: LIST
36881: LIST
36882: LIST
36883: LIST
36884: LIST
36885: LIST
36886: LIST
36887: LIST
36888: LIST
36889: LIST
36890: LIST
36891: LIST
36892: LIST
36893: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36894: LD_ADDR_VAR 0 20
36898: PUSH
36899: LD_INT 0
36901: PUSH
36902: LD_INT 0
36904: PUSH
36905: EMPTY
36906: LIST
36907: LIST
36908: PUSH
36909: LD_INT 0
36911: PUSH
36912: LD_INT 1
36914: NEG
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: PUSH
36920: LD_INT 1
36922: PUSH
36923: LD_INT 0
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: PUSH
36930: LD_INT 1
36932: PUSH
36933: LD_INT 1
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: PUSH
36940: LD_INT 0
36942: PUSH
36943: LD_INT 1
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: PUSH
36950: LD_INT 1
36952: NEG
36953: PUSH
36954: LD_INT 0
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: PUSH
36961: LD_INT 1
36963: NEG
36964: PUSH
36965: LD_INT 1
36967: NEG
36968: PUSH
36969: EMPTY
36970: LIST
36971: LIST
36972: PUSH
36973: LD_INT 1
36975: NEG
36976: PUSH
36977: LD_INT 2
36979: NEG
36980: PUSH
36981: EMPTY
36982: LIST
36983: LIST
36984: PUSH
36985: LD_INT 0
36987: PUSH
36988: LD_INT 2
36990: NEG
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: PUSH
36996: LD_INT 1
36998: PUSH
36999: LD_INT 1
37001: NEG
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: PUSH
37007: LD_INT 2
37009: PUSH
37010: LD_INT 0
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: PUSH
37017: LD_INT 2
37019: PUSH
37020: LD_INT 1
37022: PUSH
37023: EMPTY
37024: LIST
37025: LIST
37026: PUSH
37027: LD_INT 2
37029: PUSH
37030: LD_INT 2
37032: PUSH
37033: EMPTY
37034: LIST
37035: LIST
37036: PUSH
37037: LD_INT 1
37039: PUSH
37040: LD_INT 2
37042: PUSH
37043: EMPTY
37044: LIST
37045: LIST
37046: PUSH
37047: LD_INT 0
37049: PUSH
37050: LD_INT 2
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: PUSH
37057: LD_INT 1
37059: NEG
37060: PUSH
37061: LD_INT 1
37063: PUSH
37064: EMPTY
37065: LIST
37066: LIST
37067: PUSH
37068: LD_INT 2
37070: NEG
37071: PUSH
37072: LD_INT 0
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: PUSH
37079: LD_INT 2
37081: NEG
37082: PUSH
37083: LD_INT 1
37085: NEG
37086: PUSH
37087: EMPTY
37088: LIST
37089: LIST
37090: PUSH
37091: LD_INT 2
37093: NEG
37094: PUSH
37095: LD_INT 2
37097: NEG
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: LIST
37107: LIST
37108: LIST
37109: LIST
37110: LIST
37111: LIST
37112: LIST
37113: LIST
37114: LIST
37115: LIST
37116: LIST
37117: LIST
37118: LIST
37119: LIST
37120: LIST
37121: LIST
37122: LIST
37123: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37124: LD_ADDR_VAR 0 21
37128: PUSH
37129: LD_INT 0
37131: PUSH
37132: LD_INT 0
37134: PUSH
37135: EMPTY
37136: LIST
37137: LIST
37138: PUSH
37139: LD_INT 0
37141: PUSH
37142: LD_INT 1
37144: NEG
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: PUSH
37150: LD_INT 1
37152: PUSH
37153: LD_INT 0
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: PUSH
37160: LD_INT 1
37162: PUSH
37163: LD_INT 1
37165: PUSH
37166: EMPTY
37167: LIST
37168: LIST
37169: PUSH
37170: LD_INT 0
37172: PUSH
37173: LD_INT 1
37175: PUSH
37176: EMPTY
37177: LIST
37178: LIST
37179: PUSH
37180: LD_INT 1
37182: NEG
37183: PUSH
37184: LD_INT 0
37186: PUSH
37187: EMPTY
37188: LIST
37189: LIST
37190: PUSH
37191: LD_INT 1
37193: NEG
37194: PUSH
37195: LD_INT 1
37197: NEG
37198: PUSH
37199: EMPTY
37200: LIST
37201: LIST
37202: PUSH
37203: LD_INT 1
37205: NEG
37206: PUSH
37207: LD_INT 2
37209: NEG
37210: PUSH
37211: EMPTY
37212: LIST
37213: LIST
37214: PUSH
37215: LD_INT 0
37217: PUSH
37218: LD_INT 2
37220: NEG
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: PUSH
37226: LD_INT 1
37228: PUSH
37229: LD_INT 1
37231: NEG
37232: PUSH
37233: EMPTY
37234: LIST
37235: LIST
37236: PUSH
37237: LD_INT 2
37239: PUSH
37240: LD_INT 0
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: PUSH
37247: LD_INT 2
37249: PUSH
37250: LD_INT 1
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: PUSH
37257: LD_INT 2
37259: PUSH
37260: LD_INT 2
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: PUSH
37267: LD_INT 1
37269: PUSH
37270: LD_INT 2
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: PUSH
37277: LD_INT 0
37279: PUSH
37280: LD_INT 2
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: PUSH
37287: LD_INT 1
37289: NEG
37290: PUSH
37291: LD_INT 1
37293: PUSH
37294: EMPTY
37295: LIST
37296: LIST
37297: PUSH
37298: LD_INT 2
37300: NEG
37301: PUSH
37302: LD_INT 0
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: PUSH
37309: LD_INT 2
37311: NEG
37312: PUSH
37313: LD_INT 1
37315: NEG
37316: PUSH
37317: EMPTY
37318: LIST
37319: LIST
37320: PUSH
37321: LD_INT 2
37323: NEG
37324: PUSH
37325: LD_INT 2
37327: NEG
37328: PUSH
37329: EMPTY
37330: LIST
37331: LIST
37332: PUSH
37333: EMPTY
37334: LIST
37335: LIST
37336: LIST
37337: LIST
37338: LIST
37339: LIST
37340: LIST
37341: LIST
37342: LIST
37343: LIST
37344: LIST
37345: LIST
37346: LIST
37347: LIST
37348: LIST
37349: LIST
37350: LIST
37351: LIST
37352: LIST
37353: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37354: LD_ADDR_VAR 0 22
37358: PUSH
37359: LD_INT 0
37361: PUSH
37362: LD_INT 0
37364: PUSH
37365: EMPTY
37366: LIST
37367: LIST
37368: PUSH
37369: LD_INT 0
37371: PUSH
37372: LD_INT 1
37374: NEG
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: PUSH
37380: LD_INT 1
37382: PUSH
37383: LD_INT 0
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: PUSH
37390: LD_INT 1
37392: PUSH
37393: LD_INT 1
37395: PUSH
37396: EMPTY
37397: LIST
37398: LIST
37399: PUSH
37400: LD_INT 0
37402: PUSH
37403: LD_INT 1
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: PUSH
37410: LD_INT 1
37412: NEG
37413: PUSH
37414: LD_INT 0
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: PUSH
37421: LD_INT 1
37423: NEG
37424: PUSH
37425: LD_INT 1
37427: NEG
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: PUSH
37433: LD_INT 1
37435: NEG
37436: PUSH
37437: LD_INT 2
37439: NEG
37440: PUSH
37441: EMPTY
37442: LIST
37443: LIST
37444: PUSH
37445: LD_INT 0
37447: PUSH
37448: LD_INT 2
37450: NEG
37451: PUSH
37452: EMPTY
37453: LIST
37454: LIST
37455: PUSH
37456: LD_INT 1
37458: PUSH
37459: LD_INT 1
37461: NEG
37462: PUSH
37463: EMPTY
37464: LIST
37465: LIST
37466: PUSH
37467: LD_INT 2
37469: PUSH
37470: LD_INT 0
37472: PUSH
37473: EMPTY
37474: LIST
37475: LIST
37476: PUSH
37477: LD_INT 2
37479: PUSH
37480: LD_INT 1
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: PUSH
37487: LD_INT 2
37489: PUSH
37490: LD_INT 2
37492: PUSH
37493: EMPTY
37494: LIST
37495: LIST
37496: PUSH
37497: LD_INT 1
37499: PUSH
37500: LD_INT 2
37502: PUSH
37503: EMPTY
37504: LIST
37505: LIST
37506: PUSH
37507: LD_INT 0
37509: PUSH
37510: LD_INT 2
37512: PUSH
37513: EMPTY
37514: LIST
37515: LIST
37516: PUSH
37517: LD_INT 1
37519: NEG
37520: PUSH
37521: LD_INT 1
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: PUSH
37528: LD_INT 2
37530: NEG
37531: PUSH
37532: LD_INT 0
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: PUSH
37539: LD_INT 2
37541: NEG
37542: PUSH
37543: LD_INT 1
37545: NEG
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: PUSH
37551: LD_INT 2
37553: NEG
37554: PUSH
37555: LD_INT 2
37557: NEG
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: LIST
37569: LIST
37570: LIST
37571: LIST
37572: LIST
37573: LIST
37574: LIST
37575: LIST
37576: LIST
37577: LIST
37578: LIST
37579: LIST
37580: LIST
37581: LIST
37582: LIST
37583: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37584: LD_ADDR_VAR 0 23
37588: PUSH
37589: LD_INT 0
37591: PUSH
37592: LD_INT 0
37594: PUSH
37595: EMPTY
37596: LIST
37597: LIST
37598: PUSH
37599: LD_INT 0
37601: PUSH
37602: LD_INT 1
37604: NEG
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: PUSH
37610: LD_INT 1
37612: PUSH
37613: LD_INT 0
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: PUSH
37620: LD_INT 1
37622: PUSH
37623: LD_INT 1
37625: PUSH
37626: EMPTY
37627: LIST
37628: LIST
37629: PUSH
37630: LD_INT 0
37632: PUSH
37633: LD_INT 1
37635: PUSH
37636: EMPTY
37637: LIST
37638: LIST
37639: PUSH
37640: LD_INT 1
37642: NEG
37643: PUSH
37644: LD_INT 0
37646: PUSH
37647: EMPTY
37648: LIST
37649: LIST
37650: PUSH
37651: LD_INT 1
37653: NEG
37654: PUSH
37655: LD_INT 1
37657: NEG
37658: PUSH
37659: EMPTY
37660: LIST
37661: LIST
37662: PUSH
37663: LD_INT 1
37665: NEG
37666: PUSH
37667: LD_INT 2
37669: NEG
37670: PUSH
37671: EMPTY
37672: LIST
37673: LIST
37674: PUSH
37675: LD_INT 0
37677: PUSH
37678: LD_INT 2
37680: NEG
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: PUSH
37686: LD_INT 1
37688: PUSH
37689: LD_INT 1
37691: NEG
37692: PUSH
37693: EMPTY
37694: LIST
37695: LIST
37696: PUSH
37697: LD_INT 2
37699: PUSH
37700: LD_INT 0
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: PUSH
37707: LD_INT 2
37709: PUSH
37710: LD_INT 1
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: PUSH
37717: LD_INT 2
37719: PUSH
37720: LD_INT 2
37722: PUSH
37723: EMPTY
37724: LIST
37725: LIST
37726: PUSH
37727: LD_INT 1
37729: PUSH
37730: LD_INT 2
37732: PUSH
37733: EMPTY
37734: LIST
37735: LIST
37736: PUSH
37737: LD_INT 0
37739: PUSH
37740: LD_INT 2
37742: PUSH
37743: EMPTY
37744: LIST
37745: LIST
37746: PUSH
37747: LD_INT 1
37749: NEG
37750: PUSH
37751: LD_INT 1
37753: PUSH
37754: EMPTY
37755: LIST
37756: LIST
37757: PUSH
37758: LD_INT 2
37760: NEG
37761: PUSH
37762: LD_INT 0
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: PUSH
37769: LD_INT 2
37771: NEG
37772: PUSH
37773: LD_INT 1
37775: NEG
37776: PUSH
37777: EMPTY
37778: LIST
37779: LIST
37780: PUSH
37781: LD_INT 2
37783: NEG
37784: PUSH
37785: LD_INT 2
37787: NEG
37788: PUSH
37789: EMPTY
37790: LIST
37791: LIST
37792: PUSH
37793: LD_INT 2
37795: NEG
37796: PUSH
37797: LD_INT 3
37799: NEG
37800: PUSH
37801: EMPTY
37802: LIST
37803: LIST
37804: PUSH
37805: LD_INT 1
37807: NEG
37808: PUSH
37809: LD_INT 3
37811: NEG
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: PUSH
37817: LD_INT 1
37819: PUSH
37820: LD_INT 2
37822: NEG
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: PUSH
37828: LD_INT 2
37830: PUSH
37831: LD_INT 1
37833: NEG
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: LIST
37843: LIST
37844: LIST
37845: LIST
37846: LIST
37847: LIST
37848: LIST
37849: LIST
37850: LIST
37851: LIST
37852: LIST
37853: LIST
37854: LIST
37855: LIST
37856: LIST
37857: LIST
37858: LIST
37859: LIST
37860: LIST
37861: LIST
37862: LIST
37863: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
37864: LD_ADDR_VAR 0 24
37868: PUSH
37869: LD_INT 0
37871: PUSH
37872: LD_INT 0
37874: PUSH
37875: EMPTY
37876: LIST
37877: LIST
37878: PUSH
37879: LD_INT 0
37881: PUSH
37882: LD_INT 1
37884: NEG
37885: PUSH
37886: EMPTY
37887: LIST
37888: LIST
37889: PUSH
37890: LD_INT 1
37892: PUSH
37893: LD_INT 0
37895: PUSH
37896: EMPTY
37897: LIST
37898: LIST
37899: PUSH
37900: LD_INT 1
37902: PUSH
37903: LD_INT 1
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: PUSH
37910: LD_INT 0
37912: PUSH
37913: LD_INT 1
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: PUSH
37920: LD_INT 1
37922: NEG
37923: PUSH
37924: LD_INT 0
37926: PUSH
37927: EMPTY
37928: LIST
37929: LIST
37930: PUSH
37931: LD_INT 1
37933: NEG
37934: PUSH
37935: LD_INT 1
37937: NEG
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: PUSH
37943: LD_INT 1
37945: NEG
37946: PUSH
37947: LD_INT 2
37949: NEG
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: PUSH
37955: LD_INT 0
37957: PUSH
37958: LD_INT 2
37960: NEG
37961: PUSH
37962: EMPTY
37963: LIST
37964: LIST
37965: PUSH
37966: LD_INT 1
37968: PUSH
37969: LD_INT 1
37971: NEG
37972: PUSH
37973: EMPTY
37974: LIST
37975: LIST
37976: PUSH
37977: LD_INT 2
37979: PUSH
37980: LD_INT 0
37982: PUSH
37983: EMPTY
37984: LIST
37985: LIST
37986: PUSH
37987: LD_INT 2
37989: PUSH
37990: LD_INT 1
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: PUSH
37997: LD_INT 2
37999: PUSH
38000: LD_INT 2
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: PUSH
38007: LD_INT 1
38009: PUSH
38010: LD_INT 2
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: PUSH
38017: LD_INT 0
38019: PUSH
38020: LD_INT 2
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: PUSH
38027: LD_INT 1
38029: NEG
38030: PUSH
38031: LD_INT 1
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: PUSH
38038: LD_INT 2
38040: NEG
38041: PUSH
38042: LD_INT 0
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: PUSH
38049: LD_INT 2
38051: NEG
38052: PUSH
38053: LD_INT 1
38055: NEG
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: PUSH
38061: LD_INT 2
38063: NEG
38064: PUSH
38065: LD_INT 2
38067: NEG
38068: PUSH
38069: EMPTY
38070: LIST
38071: LIST
38072: PUSH
38073: LD_INT 1
38075: PUSH
38076: LD_INT 2
38078: NEG
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: PUSH
38084: LD_INT 2
38086: PUSH
38087: LD_INT 1
38089: NEG
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: PUSH
38095: LD_INT 3
38097: PUSH
38098: LD_INT 1
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: PUSH
38105: LD_INT 3
38107: PUSH
38108: LD_INT 2
38110: PUSH
38111: EMPTY
38112: LIST
38113: LIST
38114: PUSH
38115: EMPTY
38116: LIST
38117: LIST
38118: LIST
38119: LIST
38120: LIST
38121: LIST
38122: LIST
38123: LIST
38124: LIST
38125: LIST
38126: LIST
38127: LIST
38128: LIST
38129: LIST
38130: LIST
38131: LIST
38132: LIST
38133: LIST
38134: LIST
38135: LIST
38136: LIST
38137: LIST
38138: LIST
38139: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
38140: LD_ADDR_VAR 0 25
38144: PUSH
38145: LD_INT 0
38147: PUSH
38148: LD_INT 0
38150: PUSH
38151: EMPTY
38152: LIST
38153: LIST
38154: PUSH
38155: LD_INT 0
38157: PUSH
38158: LD_INT 1
38160: NEG
38161: PUSH
38162: EMPTY
38163: LIST
38164: LIST
38165: PUSH
38166: LD_INT 1
38168: PUSH
38169: LD_INT 0
38171: PUSH
38172: EMPTY
38173: LIST
38174: LIST
38175: PUSH
38176: LD_INT 1
38178: PUSH
38179: LD_INT 1
38181: PUSH
38182: EMPTY
38183: LIST
38184: LIST
38185: PUSH
38186: LD_INT 0
38188: PUSH
38189: LD_INT 1
38191: PUSH
38192: EMPTY
38193: LIST
38194: LIST
38195: PUSH
38196: LD_INT 1
38198: NEG
38199: PUSH
38200: LD_INT 0
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: PUSH
38207: LD_INT 1
38209: NEG
38210: PUSH
38211: LD_INT 1
38213: NEG
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: PUSH
38219: LD_INT 1
38221: NEG
38222: PUSH
38223: LD_INT 2
38225: NEG
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: PUSH
38231: LD_INT 0
38233: PUSH
38234: LD_INT 2
38236: NEG
38237: PUSH
38238: EMPTY
38239: LIST
38240: LIST
38241: PUSH
38242: LD_INT 1
38244: PUSH
38245: LD_INT 1
38247: NEG
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: PUSH
38253: LD_INT 2
38255: PUSH
38256: LD_INT 0
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: PUSH
38263: LD_INT 2
38265: PUSH
38266: LD_INT 1
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: PUSH
38273: LD_INT 2
38275: PUSH
38276: LD_INT 2
38278: PUSH
38279: EMPTY
38280: LIST
38281: LIST
38282: PUSH
38283: LD_INT 1
38285: PUSH
38286: LD_INT 2
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: PUSH
38293: LD_INT 0
38295: PUSH
38296: LD_INT 2
38298: PUSH
38299: EMPTY
38300: LIST
38301: LIST
38302: PUSH
38303: LD_INT 1
38305: NEG
38306: PUSH
38307: LD_INT 1
38309: PUSH
38310: EMPTY
38311: LIST
38312: LIST
38313: PUSH
38314: LD_INT 2
38316: NEG
38317: PUSH
38318: LD_INT 0
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: PUSH
38325: LD_INT 2
38327: NEG
38328: PUSH
38329: LD_INT 1
38331: NEG
38332: PUSH
38333: EMPTY
38334: LIST
38335: LIST
38336: PUSH
38337: LD_INT 2
38339: NEG
38340: PUSH
38341: LD_INT 2
38343: NEG
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: PUSH
38349: LD_INT 3
38351: PUSH
38352: LD_INT 1
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: PUSH
38359: LD_INT 3
38361: PUSH
38362: LD_INT 2
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: PUSH
38369: LD_INT 2
38371: PUSH
38372: LD_INT 3
38374: PUSH
38375: EMPTY
38376: LIST
38377: LIST
38378: PUSH
38379: LD_INT 1
38381: PUSH
38382: LD_INT 3
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38414: LD_ADDR_VAR 0 26
38418: PUSH
38419: LD_INT 0
38421: PUSH
38422: LD_INT 0
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: PUSH
38429: LD_INT 0
38431: PUSH
38432: LD_INT 1
38434: NEG
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: PUSH
38440: LD_INT 1
38442: PUSH
38443: LD_INT 0
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: PUSH
38450: LD_INT 1
38452: PUSH
38453: LD_INT 1
38455: PUSH
38456: EMPTY
38457: LIST
38458: LIST
38459: PUSH
38460: LD_INT 0
38462: PUSH
38463: LD_INT 1
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: PUSH
38470: LD_INT 1
38472: NEG
38473: PUSH
38474: LD_INT 0
38476: PUSH
38477: EMPTY
38478: LIST
38479: LIST
38480: PUSH
38481: LD_INT 1
38483: NEG
38484: PUSH
38485: LD_INT 1
38487: NEG
38488: PUSH
38489: EMPTY
38490: LIST
38491: LIST
38492: PUSH
38493: LD_INT 1
38495: NEG
38496: PUSH
38497: LD_INT 2
38499: NEG
38500: PUSH
38501: EMPTY
38502: LIST
38503: LIST
38504: PUSH
38505: LD_INT 0
38507: PUSH
38508: LD_INT 2
38510: NEG
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: PUSH
38516: LD_INT 1
38518: PUSH
38519: LD_INT 1
38521: NEG
38522: PUSH
38523: EMPTY
38524: LIST
38525: LIST
38526: PUSH
38527: LD_INT 2
38529: PUSH
38530: LD_INT 0
38532: PUSH
38533: EMPTY
38534: LIST
38535: LIST
38536: PUSH
38537: LD_INT 2
38539: PUSH
38540: LD_INT 1
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: PUSH
38547: LD_INT 2
38549: PUSH
38550: LD_INT 2
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PUSH
38557: LD_INT 1
38559: PUSH
38560: LD_INT 2
38562: PUSH
38563: EMPTY
38564: LIST
38565: LIST
38566: PUSH
38567: LD_INT 0
38569: PUSH
38570: LD_INT 2
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: PUSH
38577: LD_INT 1
38579: NEG
38580: PUSH
38581: LD_INT 1
38583: PUSH
38584: EMPTY
38585: LIST
38586: LIST
38587: PUSH
38588: LD_INT 2
38590: NEG
38591: PUSH
38592: LD_INT 0
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: PUSH
38599: LD_INT 2
38601: NEG
38602: PUSH
38603: LD_INT 1
38605: NEG
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PUSH
38611: LD_INT 2
38613: NEG
38614: PUSH
38615: LD_INT 2
38617: NEG
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: LD_INT 2
38625: PUSH
38626: LD_INT 3
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: PUSH
38633: LD_INT 1
38635: PUSH
38636: LD_INT 3
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PUSH
38643: LD_INT 1
38645: NEG
38646: PUSH
38647: LD_INT 2
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PUSH
38654: LD_INT 2
38656: NEG
38657: PUSH
38658: LD_INT 1
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: LIST
38669: LIST
38670: LIST
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: LIST
38676: LIST
38677: LIST
38678: LIST
38679: LIST
38680: LIST
38681: LIST
38682: LIST
38683: LIST
38684: LIST
38685: LIST
38686: LIST
38687: LIST
38688: LIST
38689: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38690: LD_ADDR_VAR 0 27
38694: PUSH
38695: LD_INT 0
38697: PUSH
38698: LD_INT 0
38700: PUSH
38701: EMPTY
38702: LIST
38703: LIST
38704: PUSH
38705: LD_INT 0
38707: PUSH
38708: LD_INT 1
38710: NEG
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: PUSH
38716: LD_INT 1
38718: PUSH
38719: LD_INT 0
38721: PUSH
38722: EMPTY
38723: LIST
38724: LIST
38725: PUSH
38726: LD_INT 1
38728: PUSH
38729: LD_INT 1
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: PUSH
38736: LD_INT 0
38738: PUSH
38739: LD_INT 1
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: PUSH
38746: LD_INT 1
38748: NEG
38749: PUSH
38750: LD_INT 0
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: PUSH
38757: LD_INT 1
38759: NEG
38760: PUSH
38761: LD_INT 1
38763: NEG
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: PUSH
38769: LD_INT 1
38771: NEG
38772: PUSH
38773: LD_INT 2
38775: NEG
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: PUSH
38781: LD_INT 0
38783: PUSH
38784: LD_INT 2
38786: NEG
38787: PUSH
38788: EMPTY
38789: LIST
38790: LIST
38791: PUSH
38792: LD_INT 1
38794: PUSH
38795: LD_INT 1
38797: NEG
38798: PUSH
38799: EMPTY
38800: LIST
38801: LIST
38802: PUSH
38803: LD_INT 2
38805: PUSH
38806: LD_INT 0
38808: PUSH
38809: EMPTY
38810: LIST
38811: LIST
38812: PUSH
38813: LD_INT 2
38815: PUSH
38816: LD_INT 1
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: PUSH
38823: LD_INT 2
38825: PUSH
38826: LD_INT 2
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: PUSH
38833: LD_INT 1
38835: PUSH
38836: LD_INT 2
38838: PUSH
38839: EMPTY
38840: LIST
38841: LIST
38842: PUSH
38843: LD_INT 0
38845: PUSH
38846: LD_INT 2
38848: PUSH
38849: EMPTY
38850: LIST
38851: LIST
38852: PUSH
38853: LD_INT 1
38855: NEG
38856: PUSH
38857: LD_INT 1
38859: PUSH
38860: EMPTY
38861: LIST
38862: LIST
38863: PUSH
38864: LD_INT 2
38866: NEG
38867: PUSH
38868: LD_INT 0
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PUSH
38875: LD_INT 2
38877: NEG
38878: PUSH
38879: LD_INT 1
38881: NEG
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: PUSH
38887: LD_INT 2
38889: NEG
38890: PUSH
38891: LD_INT 2
38893: NEG
38894: PUSH
38895: EMPTY
38896: LIST
38897: LIST
38898: PUSH
38899: LD_INT 1
38901: NEG
38902: PUSH
38903: LD_INT 2
38905: PUSH
38906: EMPTY
38907: LIST
38908: LIST
38909: PUSH
38910: LD_INT 2
38912: NEG
38913: PUSH
38914: LD_INT 1
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: PUSH
38921: LD_INT 3
38923: NEG
38924: PUSH
38925: LD_INT 1
38927: NEG
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: PUSH
38933: LD_INT 3
38935: NEG
38936: PUSH
38937: LD_INT 2
38939: NEG
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: PUSH
38945: EMPTY
38946: LIST
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: LIST
38955: LIST
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: LIST
38967: LIST
38968: LIST
38969: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38970: LD_ADDR_VAR 0 28
38974: PUSH
38975: LD_INT 0
38977: PUSH
38978: LD_INT 0
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: PUSH
38985: LD_INT 0
38987: PUSH
38988: LD_INT 1
38990: NEG
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: PUSH
38996: LD_INT 1
38998: PUSH
38999: LD_INT 0
39001: PUSH
39002: EMPTY
39003: LIST
39004: LIST
39005: PUSH
39006: LD_INT 1
39008: PUSH
39009: LD_INT 1
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: PUSH
39016: LD_INT 0
39018: PUSH
39019: LD_INT 1
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: PUSH
39026: LD_INT 1
39028: NEG
39029: PUSH
39030: LD_INT 0
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: PUSH
39037: LD_INT 1
39039: NEG
39040: PUSH
39041: LD_INT 1
39043: NEG
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: PUSH
39049: LD_INT 1
39051: NEG
39052: PUSH
39053: LD_INT 2
39055: NEG
39056: PUSH
39057: EMPTY
39058: LIST
39059: LIST
39060: PUSH
39061: LD_INT 0
39063: PUSH
39064: LD_INT 2
39066: NEG
39067: PUSH
39068: EMPTY
39069: LIST
39070: LIST
39071: PUSH
39072: LD_INT 1
39074: PUSH
39075: LD_INT 1
39077: NEG
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: PUSH
39083: LD_INT 2
39085: PUSH
39086: LD_INT 0
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: PUSH
39093: LD_INT 2
39095: PUSH
39096: LD_INT 1
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: PUSH
39103: LD_INT 2
39105: PUSH
39106: LD_INT 2
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: PUSH
39113: LD_INT 1
39115: PUSH
39116: LD_INT 2
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: PUSH
39123: LD_INT 0
39125: PUSH
39126: LD_INT 2
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: PUSH
39133: LD_INT 1
39135: NEG
39136: PUSH
39137: LD_INT 1
39139: PUSH
39140: EMPTY
39141: LIST
39142: LIST
39143: PUSH
39144: LD_INT 2
39146: NEG
39147: PUSH
39148: LD_INT 0
39150: PUSH
39151: EMPTY
39152: LIST
39153: LIST
39154: PUSH
39155: LD_INT 2
39157: NEG
39158: PUSH
39159: LD_INT 1
39161: NEG
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: PUSH
39167: LD_INT 2
39169: NEG
39170: PUSH
39171: LD_INT 2
39173: NEG
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: PUSH
39179: LD_INT 2
39181: NEG
39182: PUSH
39183: LD_INT 3
39185: NEG
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: PUSH
39191: LD_INT 1
39193: NEG
39194: PUSH
39195: LD_INT 3
39197: NEG
39198: PUSH
39199: EMPTY
39200: LIST
39201: LIST
39202: PUSH
39203: LD_INT 3
39205: NEG
39206: PUSH
39207: LD_INT 1
39209: NEG
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: PUSH
39215: LD_INT 3
39217: NEG
39218: PUSH
39219: LD_INT 2
39221: NEG
39222: PUSH
39223: EMPTY
39224: LIST
39225: LIST
39226: PUSH
39227: EMPTY
39228: LIST
39229: LIST
39230: LIST
39231: LIST
39232: LIST
39233: LIST
39234: LIST
39235: LIST
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: LIST
39242: LIST
39243: LIST
39244: LIST
39245: LIST
39246: LIST
39247: LIST
39248: LIST
39249: LIST
39250: LIST
39251: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39252: LD_ADDR_VAR 0 29
39256: PUSH
39257: LD_INT 0
39259: PUSH
39260: LD_INT 0
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: PUSH
39267: LD_INT 0
39269: PUSH
39270: LD_INT 1
39272: NEG
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: PUSH
39278: LD_INT 1
39280: PUSH
39281: LD_INT 0
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: PUSH
39288: LD_INT 1
39290: PUSH
39291: LD_INT 1
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: PUSH
39298: LD_INT 0
39300: PUSH
39301: LD_INT 1
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: PUSH
39308: LD_INT 1
39310: NEG
39311: PUSH
39312: LD_INT 0
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: LD_INT 1
39321: NEG
39322: PUSH
39323: LD_INT 1
39325: NEG
39326: PUSH
39327: EMPTY
39328: LIST
39329: LIST
39330: PUSH
39331: LD_INT 1
39333: NEG
39334: PUSH
39335: LD_INT 2
39337: NEG
39338: PUSH
39339: EMPTY
39340: LIST
39341: LIST
39342: PUSH
39343: LD_INT 0
39345: PUSH
39346: LD_INT 2
39348: NEG
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: PUSH
39354: LD_INT 1
39356: PUSH
39357: LD_INT 1
39359: NEG
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: PUSH
39365: LD_INT 2
39367: PUSH
39368: LD_INT 0
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: PUSH
39375: LD_INT 2
39377: PUSH
39378: LD_INT 1
39380: PUSH
39381: EMPTY
39382: LIST
39383: LIST
39384: PUSH
39385: LD_INT 1
39387: PUSH
39388: LD_INT 2
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: PUSH
39395: LD_INT 0
39397: PUSH
39398: LD_INT 2
39400: PUSH
39401: EMPTY
39402: LIST
39403: LIST
39404: PUSH
39405: LD_INT 1
39407: NEG
39408: PUSH
39409: LD_INT 1
39411: PUSH
39412: EMPTY
39413: LIST
39414: LIST
39415: PUSH
39416: LD_INT 2
39418: NEG
39419: PUSH
39420: LD_INT 1
39422: NEG
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: PUSH
39428: LD_INT 2
39430: NEG
39431: PUSH
39432: LD_INT 2
39434: NEG
39435: PUSH
39436: EMPTY
39437: LIST
39438: LIST
39439: PUSH
39440: LD_INT 2
39442: NEG
39443: PUSH
39444: LD_INT 3
39446: NEG
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: PUSH
39452: LD_INT 2
39454: PUSH
39455: LD_INT 1
39457: NEG
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: PUSH
39463: LD_INT 3
39465: PUSH
39466: LD_INT 1
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: PUSH
39473: LD_INT 1
39475: PUSH
39476: LD_INT 3
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: PUSH
39483: LD_INT 1
39485: NEG
39486: PUSH
39487: LD_INT 2
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: PUSH
39494: LD_INT 3
39496: NEG
39497: PUSH
39498: LD_INT 2
39500: NEG
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39531: LD_ADDR_VAR 0 30
39535: PUSH
39536: LD_INT 0
39538: PUSH
39539: LD_INT 0
39541: PUSH
39542: EMPTY
39543: LIST
39544: LIST
39545: PUSH
39546: LD_INT 0
39548: PUSH
39549: LD_INT 1
39551: NEG
39552: PUSH
39553: EMPTY
39554: LIST
39555: LIST
39556: PUSH
39557: LD_INT 1
39559: PUSH
39560: LD_INT 0
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: PUSH
39567: LD_INT 1
39569: PUSH
39570: LD_INT 1
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: PUSH
39577: LD_INT 0
39579: PUSH
39580: LD_INT 1
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: PUSH
39587: LD_INT 1
39589: NEG
39590: PUSH
39591: LD_INT 0
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: PUSH
39598: LD_INT 1
39600: NEG
39601: PUSH
39602: LD_INT 1
39604: NEG
39605: PUSH
39606: EMPTY
39607: LIST
39608: LIST
39609: PUSH
39610: LD_INT 1
39612: NEG
39613: PUSH
39614: LD_INT 2
39616: NEG
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: PUSH
39622: LD_INT 0
39624: PUSH
39625: LD_INT 2
39627: NEG
39628: PUSH
39629: EMPTY
39630: LIST
39631: LIST
39632: PUSH
39633: LD_INT 1
39635: PUSH
39636: LD_INT 1
39638: NEG
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: PUSH
39644: LD_INT 2
39646: PUSH
39647: LD_INT 0
39649: PUSH
39650: EMPTY
39651: LIST
39652: LIST
39653: PUSH
39654: LD_INT 2
39656: PUSH
39657: LD_INT 1
39659: PUSH
39660: EMPTY
39661: LIST
39662: LIST
39663: PUSH
39664: LD_INT 2
39666: PUSH
39667: LD_INT 2
39669: PUSH
39670: EMPTY
39671: LIST
39672: LIST
39673: PUSH
39674: LD_INT 1
39676: PUSH
39677: LD_INT 2
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: PUSH
39684: LD_INT 1
39686: NEG
39687: PUSH
39688: LD_INT 1
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: PUSH
39695: LD_INT 2
39697: NEG
39698: PUSH
39699: LD_INT 0
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: PUSH
39706: LD_INT 2
39708: NEG
39709: PUSH
39710: LD_INT 1
39712: NEG
39713: PUSH
39714: EMPTY
39715: LIST
39716: LIST
39717: PUSH
39718: LD_INT 1
39720: NEG
39721: PUSH
39722: LD_INT 3
39724: NEG
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: PUSH
39730: LD_INT 1
39732: PUSH
39733: LD_INT 2
39735: NEG
39736: PUSH
39737: EMPTY
39738: LIST
39739: LIST
39740: PUSH
39741: LD_INT 3
39743: PUSH
39744: LD_INT 2
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: PUSH
39751: LD_INT 2
39753: PUSH
39754: LD_INT 3
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PUSH
39761: LD_INT 2
39763: NEG
39764: PUSH
39765: LD_INT 1
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: PUSH
39772: LD_INT 3
39774: NEG
39775: PUSH
39776: LD_INT 1
39778: NEG
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: LIST
39797: LIST
39798: LIST
39799: LIST
39800: LIST
39801: LIST
39802: LIST
39803: LIST
39804: LIST
39805: LIST
39806: LIST
39807: LIST
39808: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39809: LD_ADDR_VAR 0 31
39813: PUSH
39814: LD_INT 0
39816: PUSH
39817: LD_INT 0
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: PUSH
39824: LD_INT 0
39826: PUSH
39827: LD_INT 1
39829: NEG
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: PUSH
39835: LD_INT 1
39837: PUSH
39838: LD_INT 0
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: PUSH
39845: LD_INT 1
39847: PUSH
39848: LD_INT 1
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: PUSH
39855: LD_INT 0
39857: PUSH
39858: LD_INT 1
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: PUSH
39865: LD_INT 1
39867: NEG
39868: PUSH
39869: LD_INT 0
39871: PUSH
39872: EMPTY
39873: LIST
39874: LIST
39875: PUSH
39876: LD_INT 1
39878: NEG
39879: PUSH
39880: LD_INT 1
39882: NEG
39883: PUSH
39884: EMPTY
39885: LIST
39886: LIST
39887: PUSH
39888: LD_INT 1
39890: NEG
39891: PUSH
39892: LD_INT 2
39894: NEG
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: PUSH
39900: LD_INT 1
39902: PUSH
39903: LD_INT 1
39905: NEG
39906: PUSH
39907: EMPTY
39908: LIST
39909: LIST
39910: PUSH
39911: LD_INT 2
39913: PUSH
39914: LD_INT 0
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: PUSH
39921: LD_INT 2
39923: PUSH
39924: LD_INT 1
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 2
39933: PUSH
39934: LD_INT 2
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: PUSH
39941: LD_INT 1
39943: PUSH
39944: LD_INT 2
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: PUSH
39951: LD_INT 0
39953: PUSH
39954: LD_INT 2
39956: PUSH
39957: EMPTY
39958: LIST
39959: LIST
39960: PUSH
39961: LD_INT 1
39963: NEG
39964: PUSH
39965: LD_INT 1
39967: PUSH
39968: EMPTY
39969: LIST
39970: LIST
39971: PUSH
39972: LD_INT 2
39974: NEG
39975: PUSH
39976: LD_INT 1
39978: NEG
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: PUSH
39984: LD_INT 2
39986: NEG
39987: PUSH
39988: LD_INT 2
39990: NEG
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: PUSH
39996: LD_INT 2
39998: NEG
39999: PUSH
40000: LD_INT 3
40002: NEG
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: PUSH
40008: LD_INT 2
40010: PUSH
40011: LD_INT 1
40013: NEG
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: PUSH
40019: LD_INT 3
40021: PUSH
40022: LD_INT 1
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PUSH
40029: LD_INT 1
40031: PUSH
40032: LD_INT 3
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: PUSH
40039: LD_INT 1
40041: NEG
40042: PUSH
40043: LD_INT 2
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: PUSH
40050: LD_INT 3
40052: NEG
40053: PUSH
40054: LD_INT 2
40056: NEG
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40087: LD_ADDR_VAR 0 32
40091: PUSH
40092: LD_INT 0
40094: PUSH
40095: LD_INT 0
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: PUSH
40102: LD_INT 0
40104: PUSH
40105: LD_INT 1
40107: NEG
40108: PUSH
40109: EMPTY
40110: LIST
40111: LIST
40112: PUSH
40113: LD_INT 1
40115: PUSH
40116: LD_INT 0
40118: PUSH
40119: EMPTY
40120: LIST
40121: LIST
40122: PUSH
40123: LD_INT 1
40125: PUSH
40126: LD_INT 1
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: PUSH
40133: LD_INT 0
40135: PUSH
40136: LD_INT 1
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: PUSH
40143: LD_INT 1
40145: NEG
40146: PUSH
40147: LD_INT 0
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: PUSH
40154: LD_INT 1
40156: NEG
40157: PUSH
40158: LD_INT 1
40160: NEG
40161: PUSH
40162: EMPTY
40163: LIST
40164: LIST
40165: PUSH
40166: LD_INT 1
40168: NEG
40169: PUSH
40170: LD_INT 2
40172: NEG
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: PUSH
40178: LD_INT 0
40180: PUSH
40181: LD_INT 2
40183: NEG
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: LD_INT 1
40191: PUSH
40192: LD_INT 1
40194: NEG
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: PUSH
40200: LD_INT 2
40202: PUSH
40203: LD_INT 1
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: PUSH
40210: LD_INT 2
40212: PUSH
40213: LD_INT 2
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: PUSH
40220: LD_INT 1
40222: PUSH
40223: LD_INT 2
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: PUSH
40230: LD_INT 0
40232: PUSH
40233: LD_INT 2
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: PUSH
40240: LD_INT 1
40242: NEG
40243: PUSH
40244: LD_INT 1
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: LD_INT 2
40253: NEG
40254: PUSH
40255: LD_INT 0
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: PUSH
40262: LD_INT 2
40264: NEG
40265: PUSH
40266: LD_INT 1
40268: NEG
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 1
40276: NEG
40277: PUSH
40278: LD_INT 3
40280: NEG
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: PUSH
40286: LD_INT 1
40288: PUSH
40289: LD_INT 2
40291: NEG
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: PUSH
40297: LD_INT 3
40299: PUSH
40300: LD_INT 2
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: PUSH
40307: LD_INT 2
40309: PUSH
40310: LD_INT 3
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: LD_INT 2
40319: NEG
40320: PUSH
40321: LD_INT 1
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: LD_INT 3
40330: NEG
40331: PUSH
40332: LD_INT 1
40334: NEG
40335: PUSH
40336: EMPTY
40337: LIST
40338: LIST
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: LIST
40344: LIST
40345: LIST
40346: LIST
40347: LIST
40348: LIST
40349: LIST
40350: LIST
40351: LIST
40352: LIST
40353: LIST
40354: LIST
40355: LIST
40356: LIST
40357: LIST
40358: LIST
40359: LIST
40360: LIST
40361: LIST
40362: LIST
40363: LIST
40364: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40365: LD_ADDR_VAR 0 33
40369: PUSH
40370: LD_INT 0
40372: PUSH
40373: LD_INT 0
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: PUSH
40380: LD_INT 0
40382: PUSH
40383: LD_INT 1
40385: NEG
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: PUSH
40391: LD_INT 1
40393: PUSH
40394: LD_INT 0
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: PUSH
40401: LD_INT 1
40403: PUSH
40404: LD_INT 1
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: PUSH
40411: LD_INT 0
40413: PUSH
40414: LD_INT 1
40416: PUSH
40417: EMPTY
40418: LIST
40419: LIST
40420: PUSH
40421: LD_INT 1
40423: NEG
40424: PUSH
40425: LD_INT 0
40427: PUSH
40428: EMPTY
40429: LIST
40430: LIST
40431: PUSH
40432: LD_INT 1
40434: NEG
40435: PUSH
40436: LD_INT 1
40438: NEG
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: PUSH
40444: LD_INT 1
40446: NEG
40447: PUSH
40448: LD_INT 2
40450: NEG
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: LD_INT 1
40458: PUSH
40459: LD_INT 1
40461: NEG
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 2
40469: PUSH
40470: LD_INT 0
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: PUSH
40477: LD_INT 2
40479: PUSH
40480: LD_INT 1
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: PUSH
40487: LD_INT 1
40489: PUSH
40490: LD_INT 2
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: PUSH
40497: LD_INT 0
40499: PUSH
40500: LD_INT 2
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: LD_INT 1
40509: NEG
40510: PUSH
40511: LD_INT 1
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PUSH
40518: LD_INT 2
40520: NEG
40521: PUSH
40522: LD_INT 0
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: PUSH
40529: LD_INT 2
40531: NEG
40532: PUSH
40533: LD_INT 1
40535: NEG
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: LD_INT 2
40543: NEG
40544: PUSH
40545: LD_INT 2
40547: NEG
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: PUSH
40553: LD_INT 2
40555: NEG
40556: PUSH
40557: LD_INT 3
40559: NEG
40560: PUSH
40561: EMPTY
40562: LIST
40563: LIST
40564: PUSH
40565: LD_INT 2
40567: PUSH
40568: LD_INT 1
40570: NEG
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: PUSH
40576: LD_INT 3
40578: PUSH
40579: LD_INT 1
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PUSH
40586: LD_INT 1
40588: PUSH
40589: LD_INT 3
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: PUSH
40596: LD_INT 1
40598: NEG
40599: PUSH
40600: LD_INT 2
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: PUSH
40607: LD_INT 3
40609: NEG
40610: PUSH
40611: LD_INT 2
40613: NEG
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: LIST
40640: LIST
40641: LIST
40642: LIST
40643: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40644: LD_ADDR_VAR 0 34
40648: PUSH
40649: LD_INT 0
40651: PUSH
40652: LD_INT 0
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 0
40661: PUSH
40662: LD_INT 1
40664: NEG
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PUSH
40670: LD_INT 1
40672: PUSH
40673: LD_INT 0
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PUSH
40680: LD_INT 1
40682: PUSH
40683: LD_INT 1
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: PUSH
40690: LD_INT 0
40692: PUSH
40693: LD_INT 1
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: LD_INT 1
40702: NEG
40703: PUSH
40704: LD_INT 0
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 1
40713: NEG
40714: PUSH
40715: LD_INT 1
40717: NEG
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: PUSH
40723: LD_INT 1
40725: NEG
40726: PUSH
40727: LD_INT 2
40729: NEG
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: PUSH
40735: LD_INT 0
40737: PUSH
40738: LD_INT 2
40740: NEG
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: LD_INT 1
40748: PUSH
40749: LD_INT 1
40751: NEG
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: LD_INT 2
40759: PUSH
40760: LD_INT 1
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: PUSH
40767: LD_INT 2
40769: PUSH
40770: LD_INT 2
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: PUSH
40777: LD_INT 1
40779: PUSH
40780: LD_INT 2
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: PUSH
40787: LD_INT 1
40789: NEG
40790: PUSH
40791: LD_INT 1
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: PUSH
40798: LD_INT 2
40800: NEG
40801: PUSH
40802: LD_INT 0
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: PUSH
40809: LD_INT 2
40811: NEG
40812: PUSH
40813: LD_INT 1
40815: NEG
40816: PUSH
40817: EMPTY
40818: LIST
40819: LIST
40820: PUSH
40821: LD_INT 2
40823: NEG
40824: PUSH
40825: LD_INT 2
40827: NEG
40828: PUSH
40829: EMPTY
40830: LIST
40831: LIST
40832: PUSH
40833: LD_INT 1
40835: NEG
40836: PUSH
40837: LD_INT 3
40839: NEG
40840: PUSH
40841: EMPTY
40842: LIST
40843: LIST
40844: PUSH
40845: LD_INT 1
40847: PUSH
40848: LD_INT 2
40850: NEG
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: PUSH
40856: LD_INT 3
40858: PUSH
40859: LD_INT 2
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: PUSH
40866: LD_INT 2
40868: PUSH
40869: LD_INT 3
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PUSH
40876: LD_INT 2
40878: NEG
40879: PUSH
40880: LD_INT 1
40882: PUSH
40883: EMPTY
40884: LIST
40885: LIST
40886: PUSH
40887: LD_INT 3
40889: NEG
40890: PUSH
40891: LD_INT 1
40893: NEG
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: LIST
40908: LIST
40909: LIST
40910: LIST
40911: LIST
40912: LIST
40913: LIST
40914: LIST
40915: LIST
40916: LIST
40917: LIST
40918: LIST
40919: LIST
40920: LIST
40921: LIST
40922: LIST
40923: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40924: LD_ADDR_VAR 0 35
40928: PUSH
40929: LD_INT 0
40931: PUSH
40932: LD_INT 0
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: PUSH
40939: LD_INT 0
40941: PUSH
40942: LD_INT 1
40944: NEG
40945: PUSH
40946: EMPTY
40947: LIST
40948: LIST
40949: PUSH
40950: LD_INT 1
40952: PUSH
40953: LD_INT 0
40955: PUSH
40956: EMPTY
40957: LIST
40958: LIST
40959: PUSH
40960: LD_INT 1
40962: PUSH
40963: LD_INT 1
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: PUSH
40970: LD_INT 0
40972: PUSH
40973: LD_INT 1
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: PUSH
40980: LD_INT 1
40982: NEG
40983: PUSH
40984: LD_INT 0
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: PUSH
40991: LD_INT 1
40993: NEG
40994: PUSH
40995: LD_INT 1
40997: NEG
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: LD_INT 2
41005: PUSH
41006: LD_INT 1
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: PUSH
41013: LD_INT 2
41015: NEG
41016: PUSH
41017: LD_INT 1
41019: NEG
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: LIST
41029: LIST
41030: LIST
41031: LIST
41032: LIST
41033: LIST
41034: LIST
41035: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41036: LD_ADDR_VAR 0 36
41040: PUSH
41041: LD_INT 0
41043: PUSH
41044: LD_INT 0
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: LD_INT 0
41053: PUSH
41054: LD_INT 1
41056: NEG
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 1
41064: PUSH
41065: LD_INT 0
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PUSH
41072: LD_INT 1
41074: PUSH
41075: LD_INT 1
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: PUSH
41082: LD_INT 0
41084: PUSH
41085: LD_INT 1
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: PUSH
41092: LD_INT 1
41094: NEG
41095: PUSH
41096: LD_INT 0
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: LD_INT 1
41105: NEG
41106: PUSH
41107: LD_INT 1
41109: NEG
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: PUSH
41115: LD_INT 1
41117: NEG
41118: PUSH
41119: LD_INT 2
41121: NEG
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: PUSH
41127: LD_INT 1
41129: PUSH
41130: LD_INT 2
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: LIST
41141: LIST
41142: LIST
41143: LIST
41144: LIST
41145: LIST
41146: LIST
41147: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41148: LD_ADDR_VAR 0 37
41152: PUSH
41153: LD_INT 0
41155: PUSH
41156: LD_INT 0
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: PUSH
41163: LD_INT 0
41165: PUSH
41166: LD_INT 1
41168: NEG
41169: PUSH
41170: EMPTY
41171: LIST
41172: LIST
41173: PUSH
41174: LD_INT 1
41176: PUSH
41177: LD_INT 0
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: PUSH
41184: LD_INT 1
41186: PUSH
41187: LD_INT 1
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: PUSH
41194: LD_INT 0
41196: PUSH
41197: LD_INT 1
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: LD_INT 1
41206: NEG
41207: PUSH
41208: LD_INT 0
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: LD_INT 1
41217: NEG
41218: PUSH
41219: LD_INT 1
41221: NEG
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: LD_INT 1
41229: PUSH
41230: LD_INT 1
41232: NEG
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 1
41240: NEG
41241: PUSH
41242: LD_INT 1
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: LIST
41253: LIST
41254: LIST
41255: LIST
41256: LIST
41257: LIST
41258: LIST
41259: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41260: LD_ADDR_VAR 0 38
41264: PUSH
41265: LD_INT 0
41267: PUSH
41268: LD_INT 0
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: PUSH
41275: LD_INT 0
41277: PUSH
41278: LD_INT 1
41280: NEG
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: PUSH
41286: LD_INT 1
41288: PUSH
41289: LD_INT 0
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: PUSH
41296: LD_INT 1
41298: PUSH
41299: LD_INT 1
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: PUSH
41306: LD_INT 0
41308: PUSH
41309: LD_INT 1
41311: PUSH
41312: EMPTY
41313: LIST
41314: LIST
41315: PUSH
41316: LD_INT 1
41318: NEG
41319: PUSH
41320: LD_INT 0
41322: PUSH
41323: EMPTY
41324: LIST
41325: LIST
41326: PUSH
41327: LD_INT 1
41329: NEG
41330: PUSH
41331: LD_INT 1
41333: NEG
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: PUSH
41339: LD_INT 2
41341: PUSH
41342: LD_INT 1
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: PUSH
41349: LD_INT 2
41351: NEG
41352: PUSH
41353: LD_INT 1
41355: NEG
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: EMPTY
41362: LIST
41363: LIST
41364: LIST
41365: LIST
41366: LIST
41367: LIST
41368: LIST
41369: LIST
41370: LIST
41371: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41372: LD_ADDR_VAR 0 39
41376: PUSH
41377: LD_INT 0
41379: PUSH
41380: LD_INT 0
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 0
41389: PUSH
41390: LD_INT 1
41392: NEG
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: LD_INT 1
41400: PUSH
41401: LD_INT 0
41403: PUSH
41404: EMPTY
41405: LIST
41406: LIST
41407: PUSH
41408: LD_INT 1
41410: PUSH
41411: LD_INT 1
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: PUSH
41418: LD_INT 0
41420: PUSH
41421: LD_INT 1
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 1
41430: NEG
41431: PUSH
41432: LD_INT 0
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 1
41441: NEG
41442: PUSH
41443: LD_INT 1
41445: NEG
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 1
41453: NEG
41454: PUSH
41455: LD_INT 2
41457: NEG
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 1
41465: PUSH
41466: LD_INT 2
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: LIST
41477: LIST
41478: LIST
41479: LIST
41480: LIST
41481: LIST
41482: LIST
41483: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41484: LD_ADDR_VAR 0 40
41488: PUSH
41489: LD_INT 0
41491: PUSH
41492: LD_INT 0
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: PUSH
41499: LD_INT 0
41501: PUSH
41502: LD_INT 1
41504: NEG
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: PUSH
41510: LD_INT 1
41512: PUSH
41513: LD_INT 0
41515: PUSH
41516: EMPTY
41517: LIST
41518: LIST
41519: PUSH
41520: LD_INT 1
41522: PUSH
41523: LD_INT 1
41525: PUSH
41526: EMPTY
41527: LIST
41528: LIST
41529: PUSH
41530: LD_INT 0
41532: PUSH
41533: LD_INT 1
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: PUSH
41540: LD_INT 1
41542: NEG
41543: PUSH
41544: LD_INT 0
41546: PUSH
41547: EMPTY
41548: LIST
41549: LIST
41550: PUSH
41551: LD_INT 1
41553: NEG
41554: PUSH
41555: LD_INT 1
41557: NEG
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: PUSH
41563: LD_INT 1
41565: PUSH
41566: LD_INT 1
41568: NEG
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: PUSH
41574: LD_INT 1
41576: NEG
41577: PUSH
41578: LD_INT 1
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: LIST
41589: LIST
41590: LIST
41591: LIST
41592: LIST
41593: LIST
41594: LIST
41595: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41596: LD_ADDR_VAR 0 41
41600: PUSH
41601: LD_INT 0
41603: PUSH
41604: LD_INT 0
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: PUSH
41611: LD_INT 0
41613: PUSH
41614: LD_INT 1
41616: NEG
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PUSH
41622: LD_INT 1
41624: PUSH
41625: LD_INT 0
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: LD_INT 1
41634: PUSH
41635: LD_INT 1
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: PUSH
41642: LD_INT 0
41644: PUSH
41645: LD_INT 1
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PUSH
41652: LD_INT 1
41654: NEG
41655: PUSH
41656: LD_INT 0
41658: PUSH
41659: EMPTY
41660: LIST
41661: LIST
41662: PUSH
41663: LD_INT 1
41665: NEG
41666: PUSH
41667: LD_INT 1
41669: NEG
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: PUSH
41675: LD_INT 1
41677: NEG
41678: PUSH
41679: LD_INT 2
41681: NEG
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PUSH
41687: LD_INT 1
41689: PUSH
41690: LD_INT 1
41692: NEG
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: LD_INT 2
41700: PUSH
41701: LD_INT 0
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: PUSH
41708: LD_INT 2
41710: PUSH
41711: LD_INT 1
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: PUSH
41718: LD_INT 2
41720: PUSH
41721: LD_INT 2
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: PUSH
41728: LD_INT 1
41730: PUSH
41731: LD_INT 2
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: LD_INT 1
41740: NEG
41741: PUSH
41742: LD_INT 1
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: PUSH
41749: LD_INT 2
41751: NEG
41752: PUSH
41753: LD_INT 0
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: PUSH
41760: LD_INT 2
41762: NEG
41763: PUSH
41764: LD_INT 1
41766: NEG
41767: PUSH
41768: EMPTY
41769: LIST
41770: LIST
41771: PUSH
41772: LD_INT 2
41774: NEG
41775: PUSH
41776: LD_INT 2
41778: NEG
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: PUSH
41784: LD_INT 2
41786: NEG
41787: PUSH
41788: LD_INT 3
41790: NEG
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: PUSH
41796: LD_INT 2
41798: PUSH
41799: LD_INT 1
41801: NEG
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: PUSH
41807: LD_INT 3
41809: PUSH
41810: LD_INT 0
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: PUSH
41817: LD_INT 3
41819: PUSH
41820: LD_INT 1
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PUSH
41827: LD_INT 3
41829: PUSH
41830: LD_INT 2
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: PUSH
41837: LD_INT 3
41839: PUSH
41840: LD_INT 3
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: LD_INT 2
41849: PUSH
41850: LD_INT 3
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 2
41859: NEG
41860: PUSH
41861: LD_INT 1
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: PUSH
41868: LD_INT 3
41870: NEG
41871: PUSH
41872: LD_INT 0
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: PUSH
41879: LD_INT 3
41881: NEG
41882: PUSH
41883: LD_INT 1
41885: NEG
41886: PUSH
41887: EMPTY
41888: LIST
41889: LIST
41890: PUSH
41891: LD_INT 3
41893: NEG
41894: PUSH
41895: LD_INT 2
41897: NEG
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: PUSH
41903: LD_INT 3
41905: NEG
41906: PUSH
41907: LD_INT 3
41909: NEG
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: LIST
41919: LIST
41920: LIST
41921: LIST
41922: LIST
41923: LIST
41924: LIST
41925: LIST
41926: LIST
41927: LIST
41928: LIST
41929: LIST
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: LIST
41943: LIST
41944: LIST
41945: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41946: LD_ADDR_VAR 0 42
41950: PUSH
41951: LD_INT 0
41953: PUSH
41954: LD_INT 0
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: PUSH
41961: LD_INT 0
41963: PUSH
41964: LD_INT 1
41966: NEG
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: LD_INT 1
41974: PUSH
41975: LD_INT 0
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: LD_INT 1
41984: PUSH
41985: LD_INT 1
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: PUSH
41992: LD_INT 0
41994: PUSH
41995: LD_INT 1
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 1
42004: NEG
42005: PUSH
42006: LD_INT 0
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: LD_INT 1
42015: NEG
42016: PUSH
42017: LD_INT 1
42019: NEG
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: PUSH
42025: LD_INT 1
42027: NEG
42028: PUSH
42029: LD_INT 2
42031: NEG
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PUSH
42037: LD_INT 0
42039: PUSH
42040: LD_INT 2
42042: NEG
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 1
42050: PUSH
42051: LD_INT 1
42053: NEG
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: PUSH
42059: LD_INT 2
42061: PUSH
42062: LD_INT 1
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: PUSH
42069: LD_INT 2
42071: PUSH
42072: LD_INT 2
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PUSH
42079: LD_INT 1
42081: PUSH
42082: LD_INT 2
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: PUSH
42089: LD_INT 0
42091: PUSH
42092: LD_INT 2
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: LD_INT 1
42101: NEG
42102: PUSH
42103: LD_INT 1
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: PUSH
42110: LD_INT 2
42112: NEG
42113: PUSH
42114: LD_INT 1
42116: NEG
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PUSH
42122: LD_INT 2
42124: NEG
42125: PUSH
42126: LD_INT 2
42128: NEG
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: LD_INT 2
42136: NEG
42137: PUSH
42138: LD_INT 3
42140: NEG
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PUSH
42146: LD_INT 1
42148: NEG
42149: PUSH
42150: LD_INT 3
42152: NEG
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PUSH
42158: LD_INT 0
42160: PUSH
42161: LD_INT 3
42163: NEG
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: PUSH
42169: LD_INT 1
42171: PUSH
42172: LD_INT 2
42174: NEG
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: PUSH
42180: LD_INT 3
42182: PUSH
42183: LD_INT 2
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: PUSH
42190: LD_INT 3
42192: PUSH
42193: LD_INT 3
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: PUSH
42200: LD_INT 2
42202: PUSH
42203: LD_INT 3
42205: PUSH
42206: EMPTY
42207: LIST
42208: LIST
42209: PUSH
42210: LD_INT 1
42212: PUSH
42213: LD_INT 3
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: PUSH
42220: LD_INT 0
42222: PUSH
42223: LD_INT 3
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: PUSH
42230: LD_INT 1
42232: NEG
42233: PUSH
42234: LD_INT 2
42236: PUSH
42237: EMPTY
42238: LIST
42239: LIST
42240: PUSH
42241: LD_INT 3
42243: NEG
42244: PUSH
42245: LD_INT 2
42247: NEG
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: PUSH
42253: LD_INT 3
42255: NEG
42256: PUSH
42257: LD_INT 3
42259: NEG
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: LIST
42295: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42296: LD_ADDR_VAR 0 43
42300: PUSH
42301: LD_INT 0
42303: PUSH
42304: LD_INT 0
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: LD_INT 0
42313: PUSH
42314: LD_INT 1
42316: NEG
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 1
42324: PUSH
42325: LD_INT 0
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: PUSH
42332: LD_INT 1
42334: PUSH
42335: LD_INT 1
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: PUSH
42342: LD_INT 0
42344: PUSH
42345: LD_INT 1
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 1
42354: NEG
42355: PUSH
42356: LD_INT 0
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 1
42365: NEG
42366: PUSH
42367: LD_INT 1
42369: NEG
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: PUSH
42375: LD_INT 1
42377: NEG
42378: PUSH
42379: LD_INT 2
42381: NEG
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: PUSH
42387: LD_INT 0
42389: PUSH
42390: LD_INT 2
42392: NEG
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PUSH
42398: LD_INT 1
42400: PUSH
42401: LD_INT 1
42403: NEG
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: PUSH
42409: LD_INT 2
42411: PUSH
42412: LD_INT 0
42414: PUSH
42415: EMPTY
42416: LIST
42417: LIST
42418: PUSH
42419: LD_INT 2
42421: PUSH
42422: LD_INT 1
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: PUSH
42429: LD_INT 1
42431: PUSH
42432: LD_INT 2
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PUSH
42439: LD_INT 0
42441: PUSH
42442: LD_INT 2
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: PUSH
42449: LD_INT 1
42451: NEG
42452: PUSH
42453: LD_INT 1
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: PUSH
42460: LD_INT 2
42462: NEG
42463: PUSH
42464: LD_INT 0
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: PUSH
42471: LD_INT 2
42473: NEG
42474: PUSH
42475: LD_INT 1
42477: NEG
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PUSH
42483: LD_INT 1
42485: NEG
42486: PUSH
42487: LD_INT 3
42489: NEG
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: LD_INT 0
42497: PUSH
42498: LD_INT 3
42500: NEG
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: LD_INT 1
42508: PUSH
42509: LD_INT 2
42511: NEG
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: PUSH
42517: LD_INT 2
42519: PUSH
42520: LD_INT 1
42522: NEG
42523: PUSH
42524: EMPTY
42525: LIST
42526: LIST
42527: PUSH
42528: LD_INT 3
42530: PUSH
42531: LD_INT 0
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: PUSH
42538: LD_INT 3
42540: PUSH
42541: LD_INT 1
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: PUSH
42548: LD_INT 1
42550: PUSH
42551: LD_INT 3
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: PUSH
42558: LD_INT 0
42560: PUSH
42561: LD_INT 3
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: PUSH
42568: LD_INT 1
42570: NEG
42571: PUSH
42572: LD_INT 2
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: LD_INT 2
42581: NEG
42582: PUSH
42583: LD_INT 1
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: LD_INT 3
42592: NEG
42593: PUSH
42594: LD_INT 0
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: PUSH
42601: LD_INT 3
42603: NEG
42604: PUSH
42605: LD_INT 1
42607: NEG
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: LIST
42617: LIST
42618: LIST
42619: LIST
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: LIST
42625: LIST
42626: LIST
42627: LIST
42628: LIST
42629: LIST
42630: LIST
42631: LIST
42632: LIST
42633: LIST
42634: LIST
42635: LIST
42636: LIST
42637: LIST
42638: LIST
42639: LIST
42640: LIST
42641: LIST
42642: LIST
42643: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42644: LD_ADDR_VAR 0 44
42648: PUSH
42649: LD_INT 0
42651: PUSH
42652: LD_INT 0
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: PUSH
42659: LD_INT 0
42661: PUSH
42662: LD_INT 1
42664: NEG
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: PUSH
42670: LD_INT 1
42672: PUSH
42673: LD_INT 0
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: PUSH
42680: LD_INT 1
42682: PUSH
42683: LD_INT 1
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: LD_INT 0
42692: PUSH
42693: LD_INT 1
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: LD_INT 1
42702: NEG
42703: PUSH
42704: LD_INT 0
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: LD_INT 1
42713: NEG
42714: PUSH
42715: LD_INT 1
42717: NEG
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: PUSH
42723: LD_INT 1
42725: NEG
42726: PUSH
42727: LD_INT 2
42729: NEG
42730: PUSH
42731: EMPTY
42732: LIST
42733: LIST
42734: PUSH
42735: LD_INT 1
42737: PUSH
42738: LD_INT 1
42740: NEG
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: LD_INT 2
42748: PUSH
42749: LD_INT 0
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: PUSH
42756: LD_INT 2
42758: PUSH
42759: LD_INT 1
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: PUSH
42766: LD_INT 2
42768: PUSH
42769: LD_INT 2
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: PUSH
42776: LD_INT 1
42778: PUSH
42779: LD_INT 2
42781: PUSH
42782: EMPTY
42783: LIST
42784: LIST
42785: PUSH
42786: LD_INT 1
42788: NEG
42789: PUSH
42790: LD_INT 1
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: PUSH
42797: LD_INT 2
42799: NEG
42800: PUSH
42801: LD_INT 0
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: PUSH
42808: LD_INT 2
42810: NEG
42811: PUSH
42812: LD_INT 1
42814: NEG
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: LD_INT 2
42822: NEG
42823: PUSH
42824: LD_INT 2
42826: NEG
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: PUSH
42832: LD_INT 2
42834: NEG
42835: PUSH
42836: LD_INT 3
42838: NEG
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: PUSH
42844: LD_INT 2
42846: PUSH
42847: LD_INT 1
42849: NEG
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 3
42857: PUSH
42858: LD_INT 0
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PUSH
42865: LD_INT 3
42867: PUSH
42868: LD_INT 1
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: PUSH
42875: LD_INT 3
42877: PUSH
42878: LD_INT 2
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: PUSH
42885: LD_INT 3
42887: PUSH
42888: LD_INT 3
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: PUSH
42895: LD_INT 2
42897: PUSH
42898: LD_INT 3
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: LD_INT 2
42907: NEG
42908: PUSH
42909: LD_INT 1
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 3
42918: NEG
42919: PUSH
42920: LD_INT 0
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: LD_INT 3
42929: NEG
42930: PUSH
42931: LD_INT 1
42933: NEG
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: PUSH
42939: LD_INT 3
42941: NEG
42942: PUSH
42943: LD_INT 2
42945: NEG
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: PUSH
42951: LD_INT 3
42953: NEG
42954: PUSH
42955: LD_INT 3
42957: NEG
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: LIST
42967: LIST
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: LIST
42973: LIST
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: LIST
42980: LIST
42981: LIST
42982: LIST
42983: LIST
42984: LIST
42985: LIST
42986: LIST
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42994: LD_ADDR_VAR 0 45
42998: PUSH
42999: LD_INT 0
43001: PUSH
43002: LD_INT 0
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PUSH
43009: LD_INT 0
43011: PUSH
43012: LD_INT 1
43014: NEG
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: PUSH
43020: LD_INT 1
43022: PUSH
43023: LD_INT 0
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PUSH
43030: LD_INT 1
43032: PUSH
43033: LD_INT 1
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: PUSH
43040: LD_INT 0
43042: PUSH
43043: LD_INT 1
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: PUSH
43050: LD_INT 1
43052: NEG
43053: PUSH
43054: LD_INT 0
43056: PUSH
43057: EMPTY
43058: LIST
43059: LIST
43060: PUSH
43061: LD_INT 1
43063: NEG
43064: PUSH
43065: LD_INT 1
43067: NEG
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 1
43075: NEG
43076: PUSH
43077: LD_INT 2
43079: NEG
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: LD_INT 0
43087: PUSH
43088: LD_INT 2
43090: NEG
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 1
43098: PUSH
43099: LD_INT 1
43101: NEG
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: LD_INT 2
43109: PUSH
43110: LD_INT 1
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: PUSH
43117: LD_INT 2
43119: PUSH
43120: LD_INT 2
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: LD_INT 1
43129: PUSH
43130: LD_INT 2
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: PUSH
43137: LD_INT 0
43139: PUSH
43140: LD_INT 2
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_INT 1
43149: NEG
43150: PUSH
43151: LD_INT 1
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: LD_INT 2
43160: NEG
43161: PUSH
43162: LD_INT 1
43164: NEG
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: LD_INT 2
43172: NEG
43173: PUSH
43174: LD_INT 2
43176: NEG
43177: PUSH
43178: EMPTY
43179: LIST
43180: LIST
43181: PUSH
43182: LD_INT 2
43184: NEG
43185: PUSH
43186: LD_INT 3
43188: NEG
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: PUSH
43194: LD_INT 1
43196: NEG
43197: PUSH
43198: LD_INT 3
43200: NEG
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: PUSH
43206: LD_INT 0
43208: PUSH
43209: LD_INT 3
43211: NEG
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: LD_INT 1
43219: PUSH
43220: LD_INT 2
43222: NEG
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 3
43230: PUSH
43231: LD_INT 2
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: LD_INT 3
43240: PUSH
43241: LD_INT 3
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: PUSH
43248: LD_INT 2
43250: PUSH
43251: LD_INT 3
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 1
43260: PUSH
43261: LD_INT 3
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 0
43270: PUSH
43271: LD_INT 3
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 1
43280: NEG
43281: PUSH
43282: LD_INT 2
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 3
43291: NEG
43292: PUSH
43293: LD_INT 2
43295: NEG
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: PUSH
43301: LD_INT 3
43303: NEG
43304: PUSH
43305: LD_INT 3
43307: NEG
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: LIST
43320: LIST
43321: LIST
43322: LIST
43323: LIST
43324: LIST
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43344: LD_ADDR_VAR 0 46
43348: PUSH
43349: LD_INT 0
43351: PUSH
43352: LD_INT 0
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PUSH
43359: LD_INT 0
43361: PUSH
43362: LD_INT 1
43364: NEG
43365: PUSH
43366: EMPTY
43367: LIST
43368: LIST
43369: PUSH
43370: LD_INT 1
43372: PUSH
43373: LD_INT 0
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: PUSH
43380: LD_INT 1
43382: PUSH
43383: LD_INT 1
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: LD_INT 0
43392: PUSH
43393: LD_INT 1
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: LD_INT 1
43402: NEG
43403: PUSH
43404: LD_INT 0
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 1
43413: NEG
43414: PUSH
43415: LD_INT 1
43417: NEG
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PUSH
43423: LD_INT 1
43425: NEG
43426: PUSH
43427: LD_INT 2
43429: NEG
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: LD_INT 0
43437: PUSH
43438: LD_INT 2
43440: NEG
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 1
43448: PUSH
43449: LD_INT 1
43451: NEG
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: LD_INT 2
43459: PUSH
43460: LD_INT 0
43462: PUSH
43463: EMPTY
43464: LIST
43465: LIST
43466: PUSH
43467: LD_INT 2
43469: PUSH
43470: LD_INT 1
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: LD_INT 1
43479: PUSH
43480: LD_INT 2
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: PUSH
43487: LD_INT 0
43489: PUSH
43490: LD_INT 2
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: PUSH
43497: LD_INT 1
43499: NEG
43500: PUSH
43501: LD_INT 1
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: PUSH
43508: LD_INT 2
43510: NEG
43511: PUSH
43512: LD_INT 0
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PUSH
43519: LD_INT 2
43521: NEG
43522: PUSH
43523: LD_INT 1
43525: NEG
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PUSH
43531: LD_INT 1
43533: NEG
43534: PUSH
43535: LD_INT 3
43537: NEG
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 0
43545: PUSH
43546: LD_INT 3
43548: NEG
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: LD_INT 1
43556: PUSH
43557: LD_INT 2
43559: NEG
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: PUSH
43565: LD_INT 2
43567: PUSH
43568: LD_INT 1
43570: NEG
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: PUSH
43576: LD_INT 3
43578: PUSH
43579: LD_INT 0
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: LD_INT 3
43588: PUSH
43589: LD_INT 1
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 1
43598: PUSH
43599: LD_INT 3
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 0
43608: PUSH
43609: LD_INT 3
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PUSH
43616: LD_INT 1
43618: NEG
43619: PUSH
43620: LD_INT 2
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 2
43629: NEG
43630: PUSH
43631: LD_INT 1
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: PUSH
43638: LD_INT 3
43640: NEG
43641: PUSH
43642: LD_INT 0
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: LD_INT 3
43651: NEG
43652: PUSH
43653: LD_INT 1
43655: NEG
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: LIST
43672: LIST
43673: LIST
43674: LIST
43675: LIST
43676: LIST
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43692: LD_ADDR_VAR 0 47
43696: PUSH
43697: LD_INT 0
43699: PUSH
43700: LD_INT 0
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: LD_INT 0
43709: PUSH
43710: LD_INT 1
43712: NEG
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: LD_INT 1
43720: PUSH
43721: LD_INT 0
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PUSH
43728: LD_INT 1
43730: PUSH
43731: LD_INT 1
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PUSH
43738: LD_INT 0
43740: PUSH
43741: LD_INT 1
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: LD_INT 1
43750: NEG
43751: PUSH
43752: LD_INT 0
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: LD_INT 1
43761: NEG
43762: PUSH
43763: LD_INT 1
43765: NEG
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PUSH
43771: LD_INT 1
43773: NEG
43774: PUSH
43775: LD_INT 2
43777: NEG
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 0
43785: PUSH
43786: LD_INT 2
43788: NEG
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 1
43796: PUSH
43797: LD_INT 1
43799: NEG
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: LD_INT 2
43807: NEG
43808: PUSH
43809: LD_INT 1
43811: NEG
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 2
43819: NEG
43820: PUSH
43821: LD_INT 2
43823: NEG
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43843: LD_ADDR_VAR 0 48
43847: PUSH
43848: LD_INT 0
43850: PUSH
43851: LD_INT 0
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: LD_INT 0
43860: PUSH
43861: LD_INT 1
43863: NEG
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: PUSH
43869: LD_INT 1
43871: PUSH
43872: LD_INT 0
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PUSH
43879: LD_INT 1
43881: PUSH
43882: LD_INT 1
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: PUSH
43889: LD_INT 0
43891: PUSH
43892: LD_INT 1
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: PUSH
43899: LD_INT 1
43901: NEG
43902: PUSH
43903: LD_INT 0
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: PUSH
43910: LD_INT 1
43912: NEG
43913: PUSH
43914: LD_INT 1
43916: NEG
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 1
43924: NEG
43925: PUSH
43926: LD_INT 2
43928: NEG
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 0
43936: PUSH
43937: LD_INT 2
43939: NEG
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PUSH
43945: LD_INT 1
43947: PUSH
43948: LD_INT 1
43950: NEG
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 2
43958: PUSH
43959: LD_INT 0
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: PUSH
43966: LD_INT 2
43968: PUSH
43969: LD_INT 1
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: LIST
43982: LIST
43983: LIST
43984: LIST
43985: LIST
43986: LIST
43987: LIST
43988: LIST
43989: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43990: LD_ADDR_VAR 0 49
43994: PUSH
43995: LD_INT 0
43997: PUSH
43998: LD_INT 0
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: PUSH
44005: LD_INT 0
44007: PUSH
44008: LD_INT 1
44010: NEG
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_INT 1
44018: PUSH
44019: LD_INT 0
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: PUSH
44026: LD_INT 1
44028: PUSH
44029: LD_INT 1
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: LD_INT 0
44038: PUSH
44039: LD_INT 1
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 1
44048: NEG
44049: PUSH
44050: LD_INT 0
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: PUSH
44057: LD_INT 1
44059: NEG
44060: PUSH
44061: LD_INT 1
44063: NEG
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 1
44071: PUSH
44072: LD_INT 1
44074: NEG
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 2
44082: PUSH
44083: LD_INT 0
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 2
44092: PUSH
44093: LD_INT 1
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: PUSH
44100: LD_INT 2
44102: PUSH
44103: LD_INT 2
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: LD_INT 1
44112: PUSH
44113: LD_INT 2
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: LIST
44132: LIST
44133: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44134: LD_ADDR_VAR 0 50
44138: PUSH
44139: LD_INT 0
44141: PUSH
44142: LD_INT 0
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_INT 0
44151: PUSH
44152: LD_INT 1
44154: NEG
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 1
44162: PUSH
44163: LD_INT 0
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 1
44172: PUSH
44173: LD_INT 1
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 0
44182: PUSH
44183: LD_INT 1
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: PUSH
44190: LD_INT 1
44192: NEG
44193: PUSH
44194: LD_INT 0
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 1
44203: NEG
44204: PUSH
44205: LD_INT 1
44207: NEG
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 2
44215: PUSH
44216: LD_INT 1
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: LD_INT 2
44225: PUSH
44226: LD_INT 2
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: LD_INT 1
44235: PUSH
44236: LD_INT 2
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 0
44245: PUSH
44246: LD_INT 2
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 1
44255: NEG
44256: PUSH
44257: LD_INT 1
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: LIST
44268: LIST
44269: LIST
44270: LIST
44271: LIST
44272: LIST
44273: LIST
44274: LIST
44275: LIST
44276: LIST
44277: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44278: LD_ADDR_VAR 0 51
44282: PUSH
44283: LD_INT 0
44285: PUSH
44286: LD_INT 0
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: LD_INT 0
44295: PUSH
44296: LD_INT 1
44298: NEG
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: LD_INT 1
44306: PUSH
44307: LD_INT 0
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: LD_INT 1
44316: PUSH
44317: LD_INT 1
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 0
44326: PUSH
44327: LD_INT 1
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: PUSH
44334: LD_INT 1
44336: NEG
44337: PUSH
44338: LD_INT 0
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: LD_INT 1
44347: NEG
44348: PUSH
44349: LD_INT 1
44351: NEG
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 1
44359: PUSH
44360: LD_INT 2
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 0
44369: PUSH
44370: LD_INT 2
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 1
44379: NEG
44380: PUSH
44381: LD_INT 1
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: PUSH
44388: LD_INT 2
44390: NEG
44391: PUSH
44392: LD_INT 0
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: PUSH
44399: LD_INT 2
44401: NEG
44402: PUSH
44403: LD_INT 1
44405: NEG
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44425: LD_ADDR_VAR 0 52
44429: PUSH
44430: LD_INT 0
44432: PUSH
44433: LD_INT 0
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: LD_INT 0
44442: PUSH
44443: LD_INT 1
44445: NEG
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PUSH
44451: LD_INT 1
44453: PUSH
44454: LD_INT 0
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PUSH
44461: LD_INT 1
44463: PUSH
44464: LD_INT 1
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: LD_INT 0
44473: PUSH
44474: LD_INT 1
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 1
44483: NEG
44484: PUSH
44485: LD_INT 0
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: LD_INT 1
44494: NEG
44495: PUSH
44496: LD_INT 1
44498: NEG
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 1
44506: NEG
44507: PUSH
44508: LD_INT 2
44510: NEG
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 1
44518: NEG
44519: PUSH
44520: LD_INT 1
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 2
44529: NEG
44530: PUSH
44531: LD_INT 0
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: PUSH
44538: LD_INT 2
44540: NEG
44541: PUSH
44542: LD_INT 1
44544: NEG
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 2
44552: NEG
44553: PUSH
44554: LD_INT 2
44556: NEG
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: LIST
44572: LIST
44573: LIST
44574: LIST
44575: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44576: LD_ADDR_VAR 0 53
44580: PUSH
44581: LD_INT 0
44583: PUSH
44584: LD_INT 0
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 0
44593: PUSH
44594: LD_INT 1
44596: NEG
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 1
44604: PUSH
44605: LD_INT 0
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 1
44614: PUSH
44615: LD_INT 1
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 0
44624: PUSH
44625: LD_INT 1
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PUSH
44632: LD_INT 1
44634: NEG
44635: PUSH
44636: LD_INT 0
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 1
44645: NEG
44646: PUSH
44647: LD_INT 1
44649: NEG
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PUSH
44655: LD_INT 1
44657: NEG
44658: PUSH
44659: LD_INT 2
44661: NEG
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 0
44669: PUSH
44670: LD_INT 2
44672: NEG
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 1
44680: PUSH
44681: LD_INT 1
44683: NEG
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 2
44691: PUSH
44692: LD_INT 0
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 2
44701: PUSH
44702: LD_INT 1
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: PUSH
44709: LD_INT 2
44711: PUSH
44712: LD_INT 2
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 1
44721: PUSH
44722: LD_INT 2
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 0
44731: PUSH
44732: LD_INT 2
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: LD_INT 1
44741: NEG
44742: PUSH
44743: LD_INT 1
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: PUSH
44750: LD_INT 2
44752: NEG
44753: PUSH
44754: LD_INT 0
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 2
44763: NEG
44764: PUSH
44765: LD_INT 1
44767: NEG
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 2
44775: NEG
44776: PUSH
44777: LD_INT 2
44779: NEG
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44806: LD_ADDR_VAR 0 54
44810: PUSH
44811: LD_INT 0
44813: PUSH
44814: LD_INT 0
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 0
44823: PUSH
44824: LD_INT 1
44826: NEG
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 1
44834: PUSH
44835: LD_INT 0
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 1
44844: PUSH
44845: LD_INT 1
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 0
44854: PUSH
44855: LD_INT 1
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 1
44864: NEG
44865: PUSH
44866: LD_INT 0
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 1
44875: NEG
44876: PUSH
44877: LD_INT 1
44879: NEG
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 1
44887: NEG
44888: PUSH
44889: LD_INT 2
44891: NEG
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: LD_INT 0
44899: PUSH
44900: LD_INT 2
44902: NEG
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 1
44910: PUSH
44911: LD_INT 1
44913: NEG
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 2
44921: PUSH
44922: LD_INT 0
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: LD_INT 2
44931: PUSH
44932: LD_INT 1
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 2
44941: PUSH
44942: LD_INT 2
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: LD_INT 1
44951: PUSH
44952: LD_INT 2
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 0
44961: PUSH
44962: LD_INT 2
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: LD_INT 1
44971: NEG
44972: PUSH
44973: LD_INT 1
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: PUSH
44980: LD_INT 2
44982: NEG
44983: PUSH
44984: LD_INT 0
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 2
44993: NEG
44994: PUSH
44995: LD_INT 1
44997: NEG
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PUSH
45003: LD_INT 2
45005: NEG
45006: PUSH
45007: LD_INT 2
45009: NEG
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: LIST
45019: LIST
45020: LIST
45021: LIST
45022: LIST
45023: LIST
45024: LIST
45025: LIST
45026: LIST
45027: LIST
45028: LIST
45029: LIST
45030: LIST
45031: LIST
45032: LIST
45033: LIST
45034: LIST
45035: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45036: LD_ADDR_VAR 0 55
45040: PUSH
45041: LD_INT 0
45043: PUSH
45044: LD_INT 0
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 0
45053: PUSH
45054: LD_INT 1
45056: NEG
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: LD_INT 1
45064: PUSH
45065: LD_INT 0
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 1
45074: PUSH
45075: LD_INT 1
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 0
45084: PUSH
45085: LD_INT 1
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 1
45094: NEG
45095: PUSH
45096: LD_INT 0
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 1
45105: NEG
45106: PUSH
45107: LD_INT 1
45109: NEG
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 1
45117: NEG
45118: PUSH
45119: LD_INT 2
45121: NEG
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 0
45129: PUSH
45130: LD_INT 2
45132: NEG
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 1
45140: PUSH
45141: LD_INT 1
45143: NEG
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 2
45151: PUSH
45152: LD_INT 0
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 2
45161: PUSH
45162: LD_INT 1
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 2
45171: PUSH
45172: LD_INT 2
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 1
45181: PUSH
45182: LD_INT 2
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 0
45191: PUSH
45192: LD_INT 2
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: LD_INT 1
45201: NEG
45202: PUSH
45203: LD_INT 1
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 2
45212: NEG
45213: PUSH
45214: LD_INT 0
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 2
45223: NEG
45224: PUSH
45225: LD_INT 1
45227: NEG
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 2
45235: NEG
45236: PUSH
45237: LD_INT 2
45239: NEG
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45266: LD_ADDR_VAR 0 56
45270: PUSH
45271: LD_INT 0
45273: PUSH
45274: LD_INT 0
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 0
45283: PUSH
45284: LD_INT 1
45286: NEG
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 1
45294: PUSH
45295: LD_INT 0
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 1
45304: PUSH
45305: LD_INT 1
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 0
45314: PUSH
45315: LD_INT 1
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: LD_INT 1
45324: NEG
45325: PUSH
45326: LD_INT 0
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 1
45335: NEG
45336: PUSH
45337: LD_INT 1
45339: NEG
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 1
45347: NEG
45348: PUSH
45349: LD_INT 2
45351: NEG
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: LD_INT 0
45359: PUSH
45360: LD_INT 2
45362: NEG
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 1
45370: PUSH
45371: LD_INT 1
45373: NEG
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 2
45381: PUSH
45382: LD_INT 0
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 2
45391: PUSH
45392: LD_INT 1
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 2
45401: PUSH
45402: LD_INT 2
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 1
45411: PUSH
45412: LD_INT 2
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 0
45421: PUSH
45422: LD_INT 2
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: LD_INT 1
45431: NEG
45432: PUSH
45433: LD_INT 1
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 2
45442: NEG
45443: PUSH
45444: LD_INT 0
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 2
45453: NEG
45454: PUSH
45455: LD_INT 1
45457: NEG
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 2
45465: NEG
45466: PUSH
45467: LD_INT 2
45469: NEG
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: LIST
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45496: LD_ADDR_VAR 0 57
45500: PUSH
45501: LD_INT 0
45503: PUSH
45504: LD_INT 0
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 0
45513: PUSH
45514: LD_INT 1
45516: NEG
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 1
45524: PUSH
45525: LD_INT 0
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 1
45534: PUSH
45535: LD_INT 1
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 0
45544: PUSH
45545: LD_INT 1
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: LD_INT 1
45554: NEG
45555: PUSH
45556: LD_INT 0
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 1
45565: NEG
45566: PUSH
45567: LD_INT 1
45569: NEG
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: LD_INT 1
45577: NEG
45578: PUSH
45579: LD_INT 2
45581: NEG
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: LD_INT 0
45589: PUSH
45590: LD_INT 2
45592: NEG
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 1
45600: PUSH
45601: LD_INT 1
45603: NEG
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 2
45611: PUSH
45612: LD_INT 0
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 2
45621: PUSH
45622: LD_INT 1
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 2
45631: PUSH
45632: LD_INT 2
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: PUSH
45639: LD_INT 1
45641: PUSH
45642: LD_INT 2
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: PUSH
45649: LD_INT 0
45651: PUSH
45652: LD_INT 2
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: LD_INT 1
45661: NEG
45662: PUSH
45663: LD_INT 1
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 2
45672: NEG
45673: PUSH
45674: LD_INT 0
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 2
45683: NEG
45684: PUSH
45685: LD_INT 1
45687: NEG
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 2
45695: NEG
45696: PUSH
45697: LD_INT 2
45699: NEG
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45726: LD_ADDR_VAR 0 58
45730: PUSH
45731: LD_INT 0
45733: PUSH
45734: LD_INT 0
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 0
45743: PUSH
45744: LD_INT 1
45746: NEG
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 1
45754: PUSH
45755: LD_INT 0
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 1
45764: PUSH
45765: LD_INT 1
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 0
45774: PUSH
45775: LD_INT 1
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 1
45784: NEG
45785: PUSH
45786: LD_INT 0
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 1
45795: NEG
45796: PUSH
45797: LD_INT 1
45799: NEG
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 1
45807: NEG
45808: PUSH
45809: LD_INT 2
45811: NEG
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: LD_INT 0
45819: PUSH
45820: LD_INT 2
45822: NEG
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 1
45830: PUSH
45831: LD_INT 1
45833: NEG
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 2
45841: PUSH
45842: LD_INT 0
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 2
45851: PUSH
45852: LD_INT 1
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 2
45861: PUSH
45862: LD_INT 2
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 1
45871: PUSH
45872: LD_INT 2
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 0
45881: PUSH
45882: LD_INT 2
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 1
45891: NEG
45892: PUSH
45893: LD_INT 1
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 2
45902: NEG
45903: PUSH
45904: LD_INT 0
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 2
45913: NEG
45914: PUSH
45915: LD_INT 1
45917: NEG
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 2
45925: NEG
45926: PUSH
45927: LD_INT 2
45929: NEG
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45956: LD_ADDR_VAR 0 59
45960: PUSH
45961: LD_INT 0
45963: PUSH
45964: LD_INT 0
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: PUSH
45971: LD_INT 0
45973: PUSH
45974: LD_INT 1
45976: NEG
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 1
45984: PUSH
45985: LD_INT 0
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 1
45994: PUSH
45995: LD_INT 1
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 0
46004: PUSH
46005: LD_INT 1
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 1
46014: NEG
46015: PUSH
46016: LD_INT 0
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 1
46025: NEG
46026: PUSH
46027: LD_INT 1
46029: NEG
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: LIST
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46044: LD_ADDR_VAR 0 60
46048: PUSH
46049: LD_INT 0
46051: PUSH
46052: LD_INT 0
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 0
46061: PUSH
46062: LD_INT 1
46064: NEG
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: LD_INT 1
46072: PUSH
46073: LD_INT 0
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 1
46082: PUSH
46083: LD_INT 1
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 0
46092: PUSH
46093: LD_INT 1
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 1
46102: NEG
46103: PUSH
46104: LD_INT 0
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 1
46113: NEG
46114: PUSH
46115: LD_INT 1
46117: NEG
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46132: LD_ADDR_VAR 0 61
46136: PUSH
46137: LD_INT 0
46139: PUSH
46140: LD_INT 0
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: LD_INT 0
46149: PUSH
46150: LD_INT 1
46152: NEG
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 1
46160: PUSH
46161: LD_INT 0
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: LD_INT 1
46170: PUSH
46171: LD_INT 1
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 0
46180: PUSH
46181: LD_INT 1
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 1
46190: NEG
46191: PUSH
46192: LD_INT 0
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: LD_INT 1
46201: NEG
46202: PUSH
46203: LD_INT 1
46205: NEG
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: LIST
46218: LIST
46219: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46220: LD_ADDR_VAR 0 62
46224: PUSH
46225: LD_INT 0
46227: PUSH
46228: LD_INT 0
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 0
46237: PUSH
46238: LD_INT 1
46240: NEG
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 1
46248: PUSH
46249: LD_INT 0
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 1
46258: PUSH
46259: LD_INT 1
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 0
46268: PUSH
46269: LD_INT 1
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 1
46278: NEG
46279: PUSH
46280: LD_INT 0
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 1
46289: NEG
46290: PUSH
46291: LD_INT 1
46293: NEG
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: LIST
46303: LIST
46304: LIST
46305: LIST
46306: LIST
46307: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46308: LD_ADDR_VAR 0 63
46312: PUSH
46313: LD_INT 0
46315: PUSH
46316: LD_INT 0
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 0
46325: PUSH
46326: LD_INT 1
46328: NEG
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: LD_INT 1
46336: PUSH
46337: LD_INT 0
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 1
46346: PUSH
46347: LD_INT 1
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: LD_INT 0
46356: PUSH
46357: LD_INT 1
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: LD_INT 1
46366: NEG
46367: PUSH
46368: LD_INT 0
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 1
46377: NEG
46378: PUSH
46379: LD_INT 1
46381: NEG
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: LIST
46391: LIST
46392: LIST
46393: LIST
46394: LIST
46395: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46396: LD_ADDR_VAR 0 64
46400: PUSH
46401: LD_INT 0
46403: PUSH
46404: LD_INT 0
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 0
46413: PUSH
46414: LD_INT 1
46416: NEG
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 1
46424: PUSH
46425: LD_INT 0
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 1
46434: PUSH
46435: LD_INT 1
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: LD_INT 0
46444: PUSH
46445: LD_INT 1
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: LD_INT 1
46454: NEG
46455: PUSH
46456: LD_INT 0
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 1
46465: NEG
46466: PUSH
46467: LD_INT 1
46469: NEG
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: ST_TO_ADDR
// end ; 1 :
46484: GO 52381
46486: LD_INT 1
46488: DOUBLE
46489: EQUAL
46490: IFTRUE 46494
46492: GO 49117
46494: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46495: LD_ADDR_VAR 0 11
46499: PUSH
46500: LD_INT 1
46502: NEG
46503: PUSH
46504: LD_INT 3
46506: NEG
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 0
46514: PUSH
46515: LD_INT 3
46517: NEG
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: LD_INT 1
46525: PUSH
46526: LD_INT 2
46528: NEG
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: LIST
46538: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46539: LD_ADDR_VAR 0 12
46543: PUSH
46544: LD_INT 2
46546: PUSH
46547: LD_INT 1
46549: NEG
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 3
46557: PUSH
46558: LD_INT 0
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 3
46567: PUSH
46568: LD_INT 1
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: LIST
46579: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46580: LD_ADDR_VAR 0 13
46584: PUSH
46585: LD_INT 3
46587: PUSH
46588: LD_INT 2
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 3
46597: PUSH
46598: LD_INT 3
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 2
46607: PUSH
46608: LD_INT 3
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: LIST
46619: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46620: LD_ADDR_VAR 0 14
46624: PUSH
46625: LD_INT 1
46627: PUSH
46628: LD_INT 3
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: PUSH
46635: LD_INT 0
46637: PUSH
46638: LD_INT 3
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 1
46647: NEG
46648: PUSH
46649: LD_INT 2
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: LIST
46660: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46661: LD_ADDR_VAR 0 15
46665: PUSH
46666: LD_INT 2
46668: NEG
46669: PUSH
46670: LD_INT 1
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 3
46679: NEG
46680: PUSH
46681: LD_INT 0
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 3
46690: NEG
46691: PUSH
46692: LD_INT 1
46694: NEG
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: LIST
46704: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46705: LD_ADDR_VAR 0 16
46709: PUSH
46710: LD_INT 2
46712: NEG
46713: PUSH
46714: LD_INT 3
46716: NEG
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 3
46724: NEG
46725: PUSH
46726: LD_INT 2
46728: NEG
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 3
46736: NEG
46737: PUSH
46738: LD_INT 3
46740: NEG
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: LIST
46750: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46751: LD_ADDR_VAR 0 17
46755: PUSH
46756: LD_INT 1
46758: NEG
46759: PUSH
46760: LD_INT 3
46762: NEG
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 0
46770: PUSH
46771: LD_INT 3
46773: NEG
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 1
46781: PUSH
46782: LD_INT 2
46784: NEG
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: LIST
46794: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46795: LD_ADDR_VAR 0 18
46799: PUSH
46800: LD_INT 2
46802: PUSH
46803: LD_INT 1
46805: NEG
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 3
46813: PUSH
46814: LD_INT 0
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 3
46823: PUSH
46824: LD_INT 1
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: LIST
46835: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46836: LD_ADDR_VAR 0 19
46840: PUSH
46841: LD_INT 3
46843: PUSH
46844: LD_INT 2
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 3
46853: PUSH
46854: LD_INT 3
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 2
46863: PUSH
46864: LD_INT 3
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: LIST
46875: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46876: LD_ADDR_VAR 0 20
46880: PUSH
46881: LD_INT 1
46883: PUSH
46884: LD_INT 3
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 0
46893: PUSH
46894: LD_INT 3
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: PUSH
46901: LD_INT 1
46903: NEG
46904: PUSH
46905: LD_INT 2
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: LIST
46916: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46917: LD_ADDR_VAR 0 21
46921: PUSH
46922: LD_INT 2
46924: NEG
46925: PUSH
46926: LD_INT 1
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: LD_INT 3
46935: NEG
46936: PUSH
46937: LD_INT 0
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 3
46946: NEG
46947: PUSH
46948: LD_INT 1
46950: NEG
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: LIST
46960: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46961: LD_ADDR_VAR 0 22
46965: PUSH
46966: LD_INT 2
46968: NEG
46969: PUSH
46970: LD_INT 3
46972: NEG
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: LD_INT 3
46980: NEG
46981: PUSH
46982: LD_INT 2
46984: NEG
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: PUSH
46990: LD_INT 3
46992: NEG
46993: PUSH
46994: LD_INT 3
46996: NEG
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: LIST
47006: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
47007: LD_ADDR_VAR 0 23
47011: PUSH
47012: LD_INT 0
47014: PUSH
47015: LD_INT 3
47017: NEG
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 1
47025: NEG
47026: PUSH
47027: LD_INT 4
47029: NEG
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 1
47037: PUSH
47038: LD_INT 3
47040: NEG
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: LIST
47050: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
47051: LD_ADDR_VAR 0 24
47055: PUSH
47056: LD_INT 3
47058: PUSH
47059: LD_INT 0
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 3
47068: PUSH
47069: LD_INT 1
47071: NEG
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 4
47079: PUSH
47080: LD_INT 1
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: LIST
47091: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
47092: LD_ADDR_VAR 0 25
47096: PUSH
47097: LD_INT 3
47099: PUSH
47100: LD_INT 3
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: LD_INT 4
47109: PUSH
47110: LD_INT 3
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 3
47119: PUSH
47120: LD_INT 4
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: LIST
47131: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
47132: LD_ADDR_VAR 0 26
47136: PUSH
47137: LD_INT 0
47139: PUSH
47140: LD_INT 3
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 1
47149: PUSH
47150: LD_INT 4
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 1
47159: NEG
47160: PUSH
47161: LD_INT 3
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: LIST
47172: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
47173: LD_ADDR_VAR 0 27
47177: PUSH
47178: LD_INT 3
47180: NEG
47181: PUSH
47182: LD_INT 0
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 3
47191: NEG
47192: PUSH
47193: LD_INT 1
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 4
47202: NEG
47203: PUSH
47204: LD_INT 1
47206: NEG
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: LIST
47216: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
47217: LD_ADDR_VAR 0 28
47221: PUSH
47222: LD_INT 3
47224: NEG
47225: PUSH
47226: LD_INT 3
47228: NEG
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 3
47236: NEG
47237: PUSH
47238: LD_INT 4
47240: NEG
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 4
47248: NEG
47249: PUSH
47250: LD_INT 3
47252: NEG
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: LIST
47262: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
47263: LD_ADDR_VAR 0 29
47267: PUSH
47268: LD_INT 1
47270: NEG
47271: PUSH
47272: LD_INT 3
47274: NEG
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 0
47282: PUSH
47283: LD_INT 3
47285: NEG
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 1
47293: PUSH
47294: LD_INT 2
47296: NEG
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 1
47304: NEG
47305: PUSH
47306: LD_INT 4
47308: NEG
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 0
47316: PUSH
47317: LD_INT 4
47319: NEG
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 1
47327: PUSH
47328: LD_INT 3
47330: NEG
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 1
47338: NEG
47339: PUSH
47340: LD_INT 5
47342: NEG
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 0
47350: PUSH
47351: LD_INT 5
47353: NEG
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 1
47361: PUSH
47362: LD_INT 4
47364: NEG
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 1
47372: NEG
47373: PUSH
47374: LD_INT 6
47376: NEG
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 0
47384: PUSH
47385: LD_INT 6
47387: NEG
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 1
47395: PUSH
47396: LD_INT 5
47398: NEG
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
47418: LD_ADDR_VAR 0 30
47422: PUSH
47423: LD_INT 2
47425: PUSH
47426: LD_INT 1
47428: NEG
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 3
47436: PUSH
47437: LD_INT 0
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 3
47446: PUSH
47447: LD_INT 1
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 3
47456: PUSH
47457: LD_INT 1
47459: NEG
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 4
47467: PUSH
47468: LD_INT 0
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 4
47477: PUSH
47478: LD_INT 1
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 4
47487: PUSH
47488: LD_INT 1
47490: NEG
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 5
47498: PUSH
47499: LD_INT 0
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 5
47508: PUSH
47509: LD_INT 1
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 5
47518: PUSH
47519: LD_INT 1
47521: NEG
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 6
47529: PUSH
47530: LD_INT 0
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 6
47539: PUSH
47540: LD_INT 1
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
47561: LD_ADDR_VAR 0 31
47565: PUSH
47566: LD_INT 3
47568: PUSH
47569: LD_INT 2
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 3
47578: PUSH
47579: LD_INT 3
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: PUSH
47586: LD_INT 2
47588: PUSH
47589: LD_INT 3
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 4
47598: PUSH
47599: LD_INT 3
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 4
47608: PUSH
47609: LD_INT 4
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 3
47618: PUSH
47619: LD_INT 4
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 5
47628: PUSH
47629: LD_INT 4
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 5
47638: PUSH
47639: LD_INT 5
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 4
47648: PUSH
47649: LD_INT 5
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 6
47658: PUSH
47659: LD_INT 5
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 6
47668: PUSH
47669: LD_INT 6
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 5
47678: PUSH
47679: LD_INT 6
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: LIST
47690: LIST
47691: LIST
47692: LIST
47693: LIST
47694: LIST
47695: LIST
47696: LIST
47697: LIST
47698: LIST
47699: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
47700: LD_ADDR_VAR 0 32
47704: PUSH
47705: LD_INT 1
47707: PUSH
47708: LD_INT 3
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 0
47717: PUSH
47718: LD_INT 3
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 1
47727: NEG
47728: PUSH
47729: LD_INT 2
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 1
47738: PUSH
47739: LD_INT 4
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 0
47748: PUSH
47749: LD_INT 4
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 1
47758: NEG
47759: PUSH
47760: LD_INT 3
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 1
47769: PUSH
47770: LD_INT 5
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 0
47779: PUSH
47780: LD_INT 5
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 1
47789: NEG
47790: PUSH
47791: LD_INT 4
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 1
47800: PUSH
47801: LD_INT 6
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 0
47810: PUSH
47811: LD_INT 6
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 1
47820: NEG
47821: PUSH
47822: LD_INT 5
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
47843: LD_ADDR_VAR 0 33
47847: PUSH
47848: LD_INT 2
47850: NEG
47851: PUSH
47852: LD_INT 1
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 3
47861: NEG
47862: PUSH
47863: LD_INT 0
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 3
47872: NEG
47873: PUSH
47874: LD_INT 1
47876: NEG
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 3
47884: NEG
47885: PUSH
47886: LD_INT 1
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 4
47895: NEG
47896: PUSH
47897: LD_INT 0
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 4
47906: NEG
47907: PUSH
47908: LD_INT 1
47910: NEG
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 4
47918: NEG
47919: PUSH
47920: LD_INT 1
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 5
47929: NEG
47930: PUSH
47931: LD_INT 0
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 5
47940: NEG
47941: PUSH
47942: LD_INT 1
47944: NEG
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 5
47952: NEG
47953: PUSH
47954: LD_INT 1
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 6
47963: NEG
47964: PUSH
47965: LD_INT 0
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 6
47974: NEG
47975: PUSH
47976: LD_INT 1
47978: NEG
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
47998: LD_ADDR_VAR 0 34
48002: PUSH
48003: LD_INT 2
48005: NEG
48006: PUSH
48007: LD_INT 3
48009: NEG
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 3
48017: NEG
48018: PUSH
48019: LD_INT 2
48021: NEG
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 3
48029: NEG
48030: PUSH
48031: LD_INT 3
48033: NEG
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 3
48041: NEG
48042: PUSH
48043: LD_INT 4
48045: NEG
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PUSH
48051: LD_INT 4
48053: NEG
48054: PUSH
48055: LD_INT 3
48057: NEG
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 4
48065: NEG
48066: PUSH
48067: LD_INT 4
48069: NEG
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 4
48077: NEG
48078: PUSH
48079: LD_INT 5
48081: NEG
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 5
48089: NEG
48090: PUSH
48091: LD_INT 4
48093: NEG
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 5
48101: NEG
48102: PUSH
48103: LD_INT 5
48105: NEG
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 5
48113: NEG
48114: PUSH
48115: LD_INT 6
48117: NEG
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 6
48125: NEG
48126: PUSH
48127: LD_INT 5
48129: NEG
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: PUSH
48135: LD_INT 6
48137: NEG
48138: PUSH
48139: LD_INT 6
48141: NEG
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
48161: LD_ADDR_VAR 0 41
48165: PUSH
48166: LD_INT 0
48168: PUSH
48169: LD_INT 2
48171: NEG
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 1
48179: NEG
48180: PUSH
48181: LD_INT 3
48183: NEG
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 1
48191: PUSH
48192: LD_INT 2
48194: NEG
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: LIST
48204: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
48205: LD_ADDR_VAR 0 42
48209: PUSH
48210: LD_INT 2
48212: PUSH
48213: LD_INT 0
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 2
48222: PUSH
48223: LD_INT 1
48225: NEG
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 3
48233: PUSH
48234: LD_INT 1
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: LIST
48245: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
48246: LD_ADDR_VAR 0 43
48250: PUSH
48251: LD_INT 2
48253: PUSH
48254: LD_INT 2
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 3
48263: PUSH
48264: LD_INT 2
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 2
48273: PUSH
48274: LD_INT 3
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: LIST
48285: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
48286: LD_ADDR_VAR 0 44
48290: PUSH
48291: LD_INT 0
48293: PUSH
48294: LD_INT 2
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 1
48303: PUSH
48304: LD_INT 3
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 1
48313: NEG
48314: PUSH
48315: LD_INT 2
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: LIST
48326: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48327: LD_ADDR_VAR 0 45
48331: PUSH
48332: LD_INT 2
48334: NEG
48335: PUSH
48336: LD_INT 0
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 2
48345: NEG
48346: PUSH
48347: LD_INT 1
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 3
48356: NEG
48357: PUSH
48358: LD_INT 1
48360: NEG
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: LIST
48370: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
48371: LD_ADDR_VAR 0 46
48375: PUSH
48376: LD_INT 2
48378: NEG
48379: PUSH
48380: LD_INT 2
48382: NEG
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 2
48390: NEG
48391: PUSH
48392: LD_INT 3
48394: NEG
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: PUSH
48400: LD_INT 3
48402: NEG
48403: PUSH
48404: LD_INT 2
48406: NEG
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: LIST
48416: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
48417: LD_ADDR_VAR 0 47
48421: PUSH
48422: LD_INT 2
48424: NEG
48425: PUSH
48426: LD_INT 3
48428: NEG
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 1
48436: NEG
48437: PUSH
48438: LD_INT 3
48440: NEG
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48450: LD_ADDR_VAR 0 48
48454: PUSH
48455: LD_INT 1
48457: PUSH
48458: LD_INT 2
48460: NEG
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 2
48468: PUSH
48469: LD_INT 1
48471: NEG
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
48481: LD_ADDR_VAR 0 49
48485: PUSH
48486: LD_INT 3
48488: PUSH
48489: LD_INT 1
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 3
48498: PUSH
48499: LD_INT 2
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
48510: LD_ADDR_VAR 0 50
48514: PUSH
48515: LD_INT 2
48517: PUSH
48518: LD_INT 3
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: PUSH
48525: LD_INT 1
48527: PUSH
48528: LD_INT 3
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48539: LD_ADDR_VAR 0 51
48543: PUSH
48544: LD_INT 1
48546: NEG
48547: PUSH
48548: LD_INT 2
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: LD_INT 2
48557: NEG
48558: PUSH
48559: LD_INT 1
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48570: LD_ADDR_VAR 0 52
48574: PUSH
48575: LD_INT 3
48577: NEG
48578: PUSH
48579: LD_INT 1
48581: NEG
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: LD_INT 3
48589: NEG
48590: PUSH
48591: LD_INT 2
48593: NEG
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48603: LD_ADDR_VAR 0 53
48607: PUSH
48608: LD_INT 1
48610: NEG
48611: PUSH
48612: LD_INT 3
48614: NEG
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 0
48622: PUSH
48623: LD_INT 3
48625: NEG
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 1
48633: PUSH
48634: LD_INT 2
48636: NEG
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: LIST
48646: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48647: LD_ADDR_VAR 0 54
48651: PUSH
48652: LD_INT 2
48654: PUSH
48655: LD_INT 1
48657: NEG
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 3
48665: PUSH
48666: LD_INT 0
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 3
48675: PUSH
48676: LD_INT 1
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: LIST
48687: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48688: LD_ADDR_VAR 0 55
48692: PUSH
48693: LD_INT 3
48695: PUSH
48696: LD_INT 2
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: LD_INT 3
48705: PUSH
48706: LD_INT 3
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 2
48715: PUSH
48716: LD_INT 3
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: LIST
48727: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48728: LD_ADDR_VAR 0 56
48732: PUSH
48733: LD_INT 1
48735: PUSH
48736: LD_INT 3
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 0
48745: PUSH
48746: LD_INT 3
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 1
48755: NEG
48756: PUSH
48757: LD_INT 2
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: LIST
48768: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48769: LD_ADDR_VAR 0 57
48773: PUSH
48774: LD_INT 2
48776: NEG
48777: PUSH
48778: LD_INT 1
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 3
48787: NEG
48788: PUSH
48789: LD_INT 0
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 3
48798: NEG
48799: PUSH
48800: LD_INT 1
48802: NEG
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: LIST
48812: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48813: LD_ADDR_VAR 0 58
48817: PUSH
48818: LD_INT 2
48820: NEG
48821: PUSH
48822: LD_INT 3
48824: NEG
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 3
48832: NEG
48833: PUSH
48834: LD_INT 2
48836: NEG
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 3
48844: NEG
48845: PUSH
48846: LD_INT 3
48848: NEG
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: LIST
48858: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
48859: LD_ADDR_VAR 0 59
48863: PUSH
48864: LD_INT 1
48866: NEG
48867: PUSH
48868: LD_INT 2
48870: NEG
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 0
48878: PUSH
48879: LD_INT 2
48881: NEG
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 1
48889: PUSH
48890: LD_INT 1
48892: NEG
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: LIST
48902: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48903: LD_ADDR_VAR 0 60
48907: PUSH
48908: LD_INT 1
48910: PUSH
48911: LD_INT 1
48913: NEG
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 2
48921: PUSH
48922: LD_INT 0
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 2
48931: PUSH
48932: LD_INT 1
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: LIST
48943: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48944: LD_ADDR_VAR 0 61
48948: PUSH
48949: LD_INT 2
48951: PUSH
48952: LD_INT 1
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 2
48961: PUSH
48962: LD_INT 2
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 1
48971: PUSH
48972: LD_INT 2
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: LIST
48983: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48984: LD_ADDR_VAR 0 62
48988: PUSH
48989: LD_INT 1
48991: PUSH
48992: LD_INT 2
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 0
49001: PUSH
49002: LD_INT 2
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: LD_INT 1
49011: NEG
49012: PUSH
49013: LD_INT 1
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: LIST
49024: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49025: LD_ADDR_VAR 0 63
49029: PUSH
49030: LD_INT 1
49032: NEG
49033: PUSH
49034: LD_INT 1
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: LD_INT 2
49043: NEG
49044: PUSH
49045: LD_INT 0
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 2
49054: NEG
49055: PUSH
49056: LD_INT 1
49058: NEG
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: LIST
49068: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49069: LD_ADDR_VAR 0 64
49073: PUSH
49074: LD_INT 1
49076: NEG
49077: PUSH
49078: LD_INT 2
49080: NEG
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 2
49088: NEG
49089: PUSH
49090: LD_INT 1
49092: NEG
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 2
49100: NEG
49101: PUSH
49102: LD_INT 2
49104: NEG
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: LIST
49114: ST_TO_ADDR
// end ; 2 :
49115: GO 52381
49117: LD_INT 2
49119: DOUBLE
49120: EQUAL
49121: IFTRUE 49125
49123: GO 52380
49125: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
49126: LD_ADDR_VAR 0 29
49130: PUSH
49131: LD_INT 4
49133: PUSH
49134: LD_INT 0
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 4
49143: PUSH
49144: LD_INT 1
49146: NEG
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 5
49154: PUSH
49155: LD_INT 0
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 5
49164: PUSH
49165: LD_INT 1
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 4
49174: PUSH
49175: LD_INT 1
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 3
49184: PUSH
49185: LD_INT 0
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 3
49194: PUSH
49195: LD_INT 1
49197: NEG
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 3
49205: PUSH
49206: LD_INT 2
49208: NEG
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 5
49216: PUSH
49217: LD_INT 2
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 3
49226: PUSH
49227: LD_INT 3
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 3
49236: PUSH
49237: LD_INT 2
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 4
49246: PUSH
49247: LD_INT 3
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 4
49256: PUSH
49257: LD_INT 4
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 3
49266: PUSH
49267: LD_INT 4
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 2
49276: PUSH
49277: LD_INT 3
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 2
49286: PUSH
49287: LD_INT 2
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 4
49296: PUSH
49297: LD_INT 2
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 2
49306: PUSH
49307: LD_INT 4
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 0
49316: PUSH
49317: LD_INT 4
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 0
49326: PUSH
49327: LD_INT 3
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 1
49336: PUSH
49337: LD_INT 4
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: PUSH
49344: LD_INT 1
49346: PUSH
49347: LD_INT 5
49349: PUSH
49350: EMPTY
49351: LIST
49352: LIST
49353: PUSH
49354: LD_INT 0
49356: PUSH
49357: LD_INT 5
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 1
49366: NEG
49367: PUSH
49368: LD_INT 4
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 1
49377: NEG
49378: PUSH
49379: LD_INT 3
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 2
49388: PUSH
49389: LD_INT 5
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 2
49398: NEG
49399: PUSH
49400: LD_INT 3
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 3
49409: NEG
49410: PUSH
49411: LD_INT 0
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 3
49420: NEG
49421: PUSH
49422: LD_INT 1
49424: NEG
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 2
49432: NEG
49433: PUSH
49434: LD_INT 0
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 2
49443: NEG
49444: PUSH
49445: LD_INT 1
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 3
49454: NEG
49455: PUSH
49456: LD_INT 1
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: LD_INT 4
49465: NEG
49466: PUSH
49467: LD_INT 0
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 4
49476: NEG
49477: PUSH
49478: LD_INT 1
49480: NEG
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: LD_INT 4
49488: NEG
49489: PUSH
49490: LD_INT 2
49492: NEG
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 2
49500: NEG
49501: PUSH
49502: LD_INT 2
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 4
49511: NEG
49512: PUSH
49513: LD_INT 4
49515: NEG
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 4
49523: NEG
49524: PUSH
49525: LD_INT 5
49527: NEG
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 3
49535: NEG
49536: PUSH
49537: LD_INT 4
49539: NEG
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 3
49547: NEG
49548: PUSH
49549: LD_INT 3
49551: NEG
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 4
49559: NEG
49560: PUSH
49561: LD_INT 3
49563: NEG
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 5
49571: NEG
49572: PUSH
49573: LD_INT 4
49575: NEG
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 5
49583: NEG
49584: PUSH
49585: LD_INT 5
49587: NEG
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 3
49595: NEG
49596: PUSH
49597: LD_INT 5
49599: NEG
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 5
49607: NEG
49608: PUSH
49609: LD_INT 3
49611: NEG
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: LIST
49640: LIST
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
49664: LD_ADDR_VAR 0 30
49668: PUSH
49669: LD_INT 4
49671: PUSH
49672: LD_INT 4
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 4
49681: PUSH
49682: LD_INT 3
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: LD_INT 5
49691: PUSH
49692: LD_INT 4
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 5
49701: PUSH
49702: LD_INT 5
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 4
49711: PUSH
49712: LD_INT 5
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 3
49721: PUSH
49722: LD_INT 4
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 3
49731: PUSH
49732: LD_INT 3
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 5
49741: PUSH
49742: LD_INT 3
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 3
49751: PUSH
49752: LD_INT 5
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 0
49761: PUSH
49762: LD_INT 3
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 0
49771: PUSH
49772: LD_INT 2
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 1
49781: PUSH
49782: LD_INT 3
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 1
49791: PUSH
49792: LD_INT 4
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: LD_INT 0
49801: PUSH
49802: LD_INT 4
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: LD_INT 1
49811: NEG
49812: PUSH
49813: LD_INT 3
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 1
49822: NEG
49823: PUSH
49824: LD_INT 2
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 2
49833: PUSH
49834: LD_INT 4
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 2
49843: NEG
49844: PUSH
49845: LD_INT 2
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 4
49854: NEG
49855: PUSH
49856: LD_INT 0
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 4
49865: NEG
49866: PUSH
49867: LD_INT 1
49869: NEG
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 3
49877: NEG
49878: PUSH
49879: LD_INT 0
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 3
49888: NEG
49889: PUSH
49890: LD_INT 1
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 4
49899: NEG
49900: PUSH
49901: LD_INT 1
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 5
49910: NEG
49911: PUSH
49912: LD_INT 0
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 5
49921: NEG
49922: PUSH
49923: LD_INT 1
49925: NEG
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 5
49933: NEG
49934: PUSH
49935: LD_INT 2
49937: NEG
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: LD_INT 3
49945: NEG
49946: PUSH
49947: LD_INT 2
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 3
49956: NEG
49957: PUSH
49958: LD_INT 3
49960: NEG
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 3
49968: NEG
49969: PUSH
49970: LD_INT 4
49972: NEG
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 2
49980: NEG
49981: PUSH
49982: LD_INT 3
49984: NEG
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 2
49992: NEG
49993: PUSH
49994: LD_INT 2
49996: NEG
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 3
50004: NEG
50005: PUSH
50006: LD_INT 2
50008: NEG
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: LD_INT 4
50016: NEG
50017: PUSH
50018: LD_INT 3
50020: NEG
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: LD_INT 4
50028: NEG
50029: PUSH
50030: LD_INT 4
50032: NEG
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 2
50040: NEG
50041: PUSH
50042: LD_INT 4
50044: NEG
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 4
50052: NEG
50053: PUSH
50054: LD_INT 2
50056: NEG
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 0
50064: PUSH
50065: LD_INT 4
50067: NEG
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 0
50075: PUSH
50076: LD_INT 5
50078: NEG
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 1
50086: PUSH
50087: LD_INT 4
50089: NEG
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 1
50097: PUSH
50098: LD_INT 3
50100: NEG
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 0
50108: PUSH
50109: LD_INT 3
50111: NEG
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 1
50119: NEG
50120: PUSH
50121: LD_INT 4
50123: NEG
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 1
50131: NEG
50132: PUSH
50133: LD_INT 5
50135: NEG
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 2
50143: PUSH
50144: LD_INT 3
50146: NEG
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 2
50154: NEG
50155: PUSH
50156: LD_INT 5
50158: NEG
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: LIST
50168: LIST
50169: LIST
50170: LIST
50171: LIST
50172: LIST
50173: LIST
50174: LIST
50175: LIST
50176: LIST
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
50211: LD_ADDR_VAR 0 31
50215: PUSH
50216: LD_INT 0
50218: PUSH
50219: LD_INT 4
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 0
50228: PUSH
50229: LD_INT 3
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 1
50238: PUSH
50239: LD_INT 4
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 1
50248: PUSH
50249: LD_INT 5
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: LD_INT 0
50258: PUSH
50259: LD_INT 5
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 1
50268: NEG
50269: PUSH
50270: LD_INT 4
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 1
50279: NEG
50280: PUSH
50281: LD_INT 3
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 2
50290: PUSH
50291: LD_INT 5
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 2
50300: NEG
50301: PUSH
50302: LD_INT 3
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 3
50311: NEG
50312: PUSH
50313: LD_INT 0
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 3
50322: NEG
50323: PUSH
50324: LD_INT 1
50326: NEG
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 2
50334: NEG
50335: PUSH
50336: LD_INT 0
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 2
50345: NEG
50346: PUSH
50347: LD_INT 1
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 3
50356: NEG
50357: PUSH
50358: LD_INT 1
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 4
50367: NEG
50368: PUSH
50369: LD_INT 0
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 4
50378: NEG
50379: PUSH
50380: LD_INT 1
50382: NEG
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 4
50390: NEG
50391: PUSH
50392: LD_INT 2
50394: NEG
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 2
50402: NEG
50403: PUSH
50404: LD_INT 2
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 4
50413: NEG
50414: PUSH
50415: LD_INT 4
50417: NEG
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 4
50425: NEG
50426: PUSH
50427: LD_INT 5
50429: NEG
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 3
50437: NEG
50438: PUSH
50439: LD_INT 4
50441: NEG
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 3
50449: NEG
50450: PUSH
50451: LD_INT 3
50453: NEG
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PUSH
50459: LD_INT 4
50461: NEG
50462: PUSH
50463: LD_INT 3
50465: NEG
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 5
50473: NEG
50474: PUSH
50475: LD_INT 4
50477: NEG
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 5
50485: NEG
50486: PUSH
50487: LD_INT 5
50489: NEG
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 3
50497: NEG
50498: PUSH
50499: LD_INT 5
50501: NEG
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 5
50509: NEG
50510: PUSH
50511: LD_INT 3
50513: NEG
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 0
50521: PUSH
50522: LD_INT 3
50524: NEG
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 0
50532: PUSH
50533: LD_INT 4
50535: NEG
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 1
50543: PUSH
50544: LD_INT 3
50546: NEG
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 1
50554: PUSH
50555: LD_INT 2
50557: NEG
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: LD_INT 0
50565: PUSH
50566: LD_INT 2
50568: NEG
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 1
50576: NEG
50577: PUSH
50578: LD_INT 3
50580: NEG
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_INT 1
50588: NEG
50589: PUSH
50590: LD_INT 4
50592: NEG
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 2
50600: PUSH
50601: LD_INT 2
50603: NEG
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 2
50611: NEG
50612: PUSH
50613: LD_INT 4
50615: NEG
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 4
50623: PUSH
50624: LD_INT 0
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: LD_INT 4
50633: PUSH
50634: LD_INT 1
50636: NEG
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 5
50644: PUSH
50645: LD_INT 0
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 5
50654: PUSH
50655: LD_INT 1
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 4
50664: PUSH
50665: LD_INT 1
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 3
50674: PUSH
50675: LD_INT 0
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 3
50684: PUSH
50685: LD_INT 1
50687: NEG
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: LD_INT 3
50695: PUSH
50696: LD_INT 2
50698: NEG
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: PUSH
50704: LD_INT 5
50706: PUSH
50707: LD_INT 2
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: LIST
50718: LIST
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: LIST
50724: LIST
50725: LIST
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
50761: LD_ADDR_VAR 0 32
50765: PUSH
50766: LD_INT 4
50768: NEG
50769: PUSH
50770: LD_INT 0
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 4
50779: NEG
50780: PUSH
50781: LD_INT 1
50783: NEG
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 3
50791: NEG
50792: PUSH
50793: LD_INT 0
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: LD_INT 3
50802: NEG
50803: PUSH
50804: LD_INT 1
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 4
50813: NEG
50814: PUSH
50815: LD_INT 1
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 5
50824: NEG
50825: PUSH
50826: LD_INT 0
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 5
50835: NEG
50836: PUSH
50837: LD_INT 1
50839: NEG
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 5
50847: NEG
50848: PUSH
50849: LD_INT 2
50851: NEG
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 3
50859: NEG
50860: PUSH
50861: LD_INT 2
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 3
50870: NEG
50871: PUSH
50872: LD_INT 3
50874: NEG
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 3
50882: NEG
50883: PUSH
50884: LD_INT 4
50886: NEG
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 2
50894: NEG
50895: PUSH
50896: LD_INT 3
50898: NEG
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 2
50906: NEG
50907: PUSH
50908: LD_INT 2
50910: NEG
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 3
50918: NEG
50919: PUSH
50920: LD_INT 2
50922: NEG
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PUSH
50928: LD_INT 4
50930: NEG
50931: PUSH
50932: LD_INT 3
50934: NEG
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 4
50942: NEG
50943: PUSH
50944: LD_INT 4
50946: NEG
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 2
50954: NEG
50955: PUSH
50956: LD_INT 4
50958: NEG
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 4
50966: NEG
50967: PUSH
50968: LD_INT 2
50970: NEG
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: LD_INT 0
50978: PUSH
50979: LD_INT 4
50981: NEG
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 0
50989: PUSH
50990: LD_INT 5
50992: NEG
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 1
51000: PUSH
51001: LD_INT 4
51003: NEG
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 1
51011: PUSH
51012: LD_INT 3
51014: NEG
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 0
51022: PUSH
51023: LD_INT 3
51025: NEG
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 1
51033: NEG
51034: PUSH
51035: LD_INT 4
51037: NEG
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 1
51045: NEG
51046: PUSH
51047: LD_INT 5
51049: NEG
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 2
51057: PUSH
51058: LD_INT 3
51060: NEG
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 2
51068: NEG
51069: PUSH
51070: LD_INT 5
51072: NEG
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 3
51080: PUSH
51081: LD_INT 0
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: LD_INT 3
51090: PUSH
51091: LD_INT 1
51093: NEG
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 4
51101: PUSH
51102: LD_INT 0
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 4
51111: PUSH
51112: LD_INT 1
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 3
51121: PUSH
51122: LD_INT 1
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 2
51131: PUSH
51132: LD_INT 0
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 2
51141: PUSH
51142: LD_INT 1
51144: NEG
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 2
51152: PUSH
51153: LD_INT 2
51155: NEG
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 4
51163: PUSH
51164: LD_INT 2
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: LD_INT 4
51173: PUSH
51174: LD_INT 4
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: PUSH
51181: LD_INT 4
51183: PUSH
51184: LD_INT 3
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 5
51193: PUSH
51194: LD_INT 4
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 5
51203: PUSH
51204: LD_INT 5
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 4
51213: PUSH
51214: LD_INT 5
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: LD_INT 3
51223: PUSH
51224: LD_INT 4
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 3
51233: PUSH
51234: LD_INT 3
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 5
51243: PUSH
51244: LD_INT 3
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 3
51253: PUSH
51254: LD_INT 5
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
51308: LD_ADDR_VAR 0 33
51312: PUSH
51313: LD_INT 4
51315: NEG
51316: PUSH
51317: LD_INT 4
51319: NEG
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 4
51327: NEG
51328: PUSH
51329: LD_INT 5
51331: NEG
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 3
51339: NEG
51340: PUSH
51341: LD_INT 4
51343: NEG
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 3
51351: NEG
51352: PUSH
51353: LD_INT 3
51355: NEG
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 4
51363: NEG
51364: PUSH
51365: LD_INT 3
51367: NEG
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 5
51375: NEG
51376: PUSH
51377: LD_INT 4
51379: NEG
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 5
51387: NEG
51388: PUSH
51389: LD_INT 5
51391: NEG
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 3
51399: NEG
51400: PUSH
51401: LD_INT 5
51403: NEG
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 5
51411: NEG
51412: PUSH
51413: LD_INT 3
51415: NEG
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 0
51423: PUSH
51424: LD_INT 3
51426: NEG
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 0
51434: PUSH
51435: LD_INT 4
51437: NEG
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 1
51445: PUSH
51446: LD_INT 3
51448: NEG
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 1
51456: PUSH
51457: LD_INT 2
51459: NEG
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 0
51467: PUSH
51468: LD_INT 2
51470: NEG
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 1
51478: NEG
51479: PUSH
51480: LD_INT 3
51482: NEG
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 1
51490: NEG
51491: PUSH
51492: LD_INT 4
51494: NEG
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: LD_INT 2
51502: PUSH
51503: LD_INT 2
51505: NEG
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 2
51513: NEG
51514: PUSH
51515: LD_INT 4
51517: NEG
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 4
51525: PUSH
51526: LD_INT 0
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 4
51535: PUSH
51536: LD_INT 1
51538: NEG
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 5
51546: PUSH
51547: LD_INT 0
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 5
51556: PUSH
51557: LD_INT 1
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 4
51566: PUSH
51567: LD_INT 1
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 3
51576: PUSH
51577: LD_INT 0
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 3
51586: PUSH
51587: LD_INT 1
51589: NEG
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 3
51597: PUSH
51598: LD_INT 2
51600: NEG
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 5
51608: PUSH
51609: LD_INT 2
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 3
51618: PUSH
51619: LD_INT 3
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 3
51628: PUSH
51629: LD_INT 2
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 4
51638: PUSH
51639: LD_INT 3
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 4
51648: PUSH
51649: LD_INT 4
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 3
51658: PUSH
51659: LD_INT 4
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 2
51668: PUSH
51669: LD_INT 3
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 2
51678: PUSH
51679: LD_INT 2
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 4
51688: PUSH
51689: LD_INT 2
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 2
51698: PUSH
51699: LD_INT 4
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 0
51708: PUSH
51709: LD_INT 4
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 0
51718: PUSH
51719: LD_INT 3
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 1
51728: PUSH
51729: LD_INT 4
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 1
51738: PUSH
51739: LD_INT 5
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 0
51748: PUSH
51749: LD_INT 5
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: LD_INT 1
51758: NEG
51759: PUSH
51760: LD_INT 4
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 1
51769: NEG
51770: PUSH
51771: LD_INT 3
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 2
51780: PUSH
51781: LD_INT 5
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 2
51790: NEG
51791: PUSH
51792: LD_INT 3
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
51846: LD_ADDR_VAR 0 34
51850: PUSH
51851: LD_INT 0
51853: PUSH
51854: LD_INT 4
51856: NEG
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 0
51864: PUSH
51865: LD_INT 5
51867: NEG
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 1
51875: PUSH
51876: LD_INT 4
51878: NEG
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 1
51886: PUSH
51887: LD_INT 3
51889: NEG
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 0
51897: PUSH
51898: LD_INT 3
51900: NEG
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 1
51908: NEG
51909: PUSH
51910: LD_INT 4
51912: NEG
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 1
51920: NEG
51921: PUSH
51922: LD_INT 5
51924: NEG
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 2
51932: PUSH
51933: LD_INT 3
51935: NEG
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 2
51943: NEG
51944: PUSH
51945: LD_INT 5
51947: NEG
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 3
51955: PUSH
51956: LD_INT 0
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 3
51965: PUSH
51966: LD_INT 1
51968: NEG
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 4
51976: PUSH
51977: LD_INT 0
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: LD_INT 4
51986: PUSH
51987: LD_INT 1
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 3
51996: PUSH
51997: LD_INT 1
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 2
52006: PUSH
52007: LD_INT 0
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 2
52016: PUSH
52017: LD_INT 1
52019: NEG
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 2
52027: PUSH
52028: LD_INT 2
52030: NEG
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 4
52038: PUSH
52039: LD_INT 2
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 4
52048: PUSH
52049: LD_INT 4
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 4
52058: PUSH
52059: LD_INT 3
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 5
52068: PUSH
52069: LD_INT 4
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 5
52078: PUSH
52079: LD_INT 5
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 4
52088: PUSH
52089: LD_INT 5
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 3
52098: PUSH
52099: LD_INT 4
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 3
52108: PUSH
52109: LD_INT 3
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 5
52118: PUSH
52119: LD_INT 3
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 3
52128: PUSH
52129: LD_INT 5
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 0
52138: PUSH
52139: LD_INT 3
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 0
52148: PUSH
52149: LD_INT 2
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 1
52158: PUSH
52159: LD_INT 3
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 1
52168: PUSH
52169: LD_INT 4
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 0
52178: PUSH
52179: LD_INT 4
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 1
52188: NEG
52189: PUSH
52190: LD_INT 3
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 1
52199: NEG
52200: PUSH
52201: LD_INT 2
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 2
52210: PUSH
52211: LD_INT 4
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 2
52220: NEG
52221: PUSH
52222: LD_INT 2
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 4
52231: NEG
52232: PUSH
52233: LD_INT 0
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 4
52242: NEG
52243: PUSH
52244: LD_INT 1
52246: NEG
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 3
52254: NEG
52255: PUSH
52256: LD_INT 0
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 3
52265: NEG
52266: PUSH
52267: LD_INT 1
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 4
52276: NEG
52277: PUSH
52278: LD_INT 1
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 5
52287: NEG
52288: PUSH
52289: LD_INT 0
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: LD_INT 5
52298: NEG
52299: PUSH
52300: LD_INT 1
52302: NEG
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: LD_INT 5
52310: NEG
52311: PUSH
52312: LD_INT 2
52314: NEG
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 3
52322: NEG
52323: PUSH
52324: LD_INT 2
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: LIST
52370: LIST
52371: LIST
52372: LIST
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: ST_TO_ADDR
// end ; end ;
52378: GO 52381
52380: POP
// case btype of b_depot , b_warehouse :
52381: LD_VAR 0 1
52385: PUSH
52386: LD_INT 0
52388: DOUBLE
52389: EQUAL
52390: IFTRUE 52400
52392: LD_INT 1
52394: DOUBLE
52395: EQUAL
52396: IFTRUE 52400
52398: GO 52601
52400: POP
// case nation of nation_american :
52401: LD_VAR 0 5
52405: PUSH
52406: LD_INT 1
52408: DOUBLE
52409: EQUAL
52410: IFTRUE 52414
52412: GO 52470
52414: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
52415: LD_ADDR_VAR 0 9
52419: PUSH
52420: LD_VAR 0 11
52424: PUSH
52425: LD_VAR 0 12
52429: PUSH
52430: LD_VAR 0 13
52434: PUSH
52435: LD_VAR 0 14
52439: PUSH
52440: LD_VAR 0 15
52444: PUSH
52445: LD_VAR 0 16
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: LIST
52454: LIST
52455: LIST
52456: LIST
52457: PUSH
52458: LD_VAR 0 4
52462: PUSH
52463: LD_INT 1
52465: PLUS
52466: ARRAY
52467: ST_TO_ADDR
52468: GO 52599
52470: LD_INT 2
52472: DOUBLE
52473: EQUAL
52474: IFTRUE 52478
52476: GO 52534
52478: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
52479: LD_ADDR_VAR 0 9
52483: PUSH
52484: LD_VAR 0 17
52488: PUSH
52489: LD_VAR 0 18
52493: PUSH
52494: LD_VAR 0 19
52498: PUSH
52499: LD_VAR 0 20
52503: PUSH
52504: LD_VAR 0 21
52508: PUSH
52509: LD_VAR 0 22
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: PUSH
52522: LD_VAR 0 4
52526: PUSH
52527: LD_INT 1
52529: PLUS
52530: ARRAY
52531: ST_TO_ADDR
52532: GO 52599
52534: LD_INT 3
52536: DOUBLE
52537: EQUAL
52538: IFTRUE 52542
52540: GO 52598
52542: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
52543: LD_ADDR_VAR 0 9
52547: PUSH
52548: LD_VAR 0 23
52552: PUSH
52553: LD_VAR 0 24
52557: PUSH
52558: LD_VAR 0 25
52562: PUSH
52563: LD_VAR 0 26
52567: PUSH
52568: LD_VAR 0 27
52572: PUSH
52573: LD_VAR 0 28
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: PUSH
52586: LD_VAR 0 4
52590: PUSH
52591: LD_INT 1
52593: PLUS
52594: ARRAY
52595: ST_TO_ADDR
52596: GO 52599
52598: POP
52599: GO 53154
52601: LD_INT 2
52603: DOUBLE
52604: EQUAL
52605: IFTRUE 52615
52607: LD_INT 3
52609: DOUBLE
52610: EQUAL
52611: IFTRUE 52615
52613: GO 52671
52615: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
52616: LD_ADDR_VAR 0 9
52620: PUSH
52621: LD_VAR 0 29
52625: PUSH
52626: LD_VAR 0 30
52630: PUSH
52631: LD_VAR 0 31
52635: PUSH
52636: LD_VAR 0 32
52640: PUSH
52641: LD_VAR 0 33
52645: PUSH
52646: LD_VAR 0 34
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: LIST
52658: PUSH
52659: LD_VAR 0 4
52663: PUSH
52664: LD_INT 1
52666: PLUS
52667: ARRAY
52668: ST_TO_ADDR
52669: GO 53154
52671: LD_INT 16
52673: DOUBLE
52674: EQUAL
52675: IFTRUE 52733
52677: LD_INT 17
52679: DOUBLE
52680: EQUAL
52681: IFTRUE 52733
52683: LD_INT 18
52685: DOUBLE
52686: EQUAL
52687: IFTRUE 52733
52689: LD_INT 19
52691: DOUBLE
52692: EQUAL
52693: IFTRUE 52733
52695: LD_INT 22
52697: DOUBLE
52698: EQUAL
52699: IFTRUE 52733
52701: LD_INT 20
52703: DOUBLE
52704: EQUAL
52705: IFTRUE 52733
52707: LD_INT 21
52709: DOUBLE
52710: EQUAL
52711: IFTRUE 52733
52713: LD_INT 23
52715: DOUBLE
52716: EQUAL
52717: IFTRUE 52733
52719: LD_INT 24
52721: DOUBLE
52722: EQUAL
52723: IFTRUE 52733
52725: LD_INT 25
52727: DOUBLE
52728: EQUAL
52729: IFTRUE 52733
52731: GO 52789
52733: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
52734: LD_ADDR_VAR 0 9
52738: PUSH
52739: LD_VAR 0 35
52743: PUSH
52744: LD_VAR 0 36
52748: PUSH
52749: LD_VAR 0 37
52753: PUSH
52754: LD_VAR 0 38
52758: PUSH
52759: LD_VAR 0 39
52763: PUSH
52764: LD_VAR 0 40
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: PUSH
52777: LD_VAR 0 4
52781: PUSH
52782: LD_INT 1
52784: PLUS
52785: ARRAY
52786: ST_TO_ADDR
52787: GO 53154
52789: LD_INT 6
52791: DOUBLE
52792: EQUAL
52793: IFTRUE 52845
52795: LD_INT 7
52797: DOUBLE
52798: EQUAL
52799: IFTRUE 52845
52801: LD_INT 8
52803: DOUBLE
52804: EQUAL
52805: IFTRUE 52845
52807: LD_INT 13
52809: DOUBLE
52810: EQUAL
52811: IFTRUE 52845
52813: LD_INT 12
52815: DOUBLE
52816: EQUAL
52817: IFTRUE 52845
52819: LD_INT 15
52821: DOUBLE
52822: EQUAL
52823: IFTRUE 52845
52825: LD_INT 11
52827: DOUBLE
52828: EQUAL
52829: IFTRUE 52845
52831: LD_INT 14
52833: DOUBLE
52834: EQUAL
52835: IFTRUE 52845
52837: LD_INT 10
52839: DOUBLE
52840: EQUAL
52841: IFTRUE 52845
52843: GO 52901
52845: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
52846: LD_ADDR_VAR 0 9
52850: PUSH
52851: LD_VAR 0 41
52855: PUSH
52856: LD_VAR 0 42
52860: PUSH
52861: LD_VAR 0 43
52865: PUSH
52866: LD_VAR 0 44
52870: PUSH
52871: LD_VAR 0 45
52875: PUSH
52876: LD_VAR 0 46
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: PUSH
52889: LD_VAR 0 4
52893: PUSH
52894: LD_INT 1
52896: PLUS
52897: ARRAY
52898: ST_TO_ADDR
52899: GO 53154
52901: LD_INT 36
52903: DOUBLE
52904: EQUAL
52905: IFTRUE 52909
52907: GO 52965
52909: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
52910: LD_ADDR_VAR 0 9
52914: PUSH
52915: LD_VAR 0 47
52919: PUSH
52920: LD_VAR 0 48
52924: PUSH
52925: LD_VAR 0 49
52929: PUSH
52930: LD_VAR 0 50
52934: PUSH
52935: LD_VAR 0 51
52939: PUSH
52940: LD_VAR 0 52
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: PUSH
52953: LD_VAR 0 4
52957: PUSH
52958: LD_INT 1
52960: PLUS
52961: ARRAY
52962: ST_TO_ADDR
52963: GO 53154
52965: LD_INT 4
52967: DOUBLE
52968: EQUAL
52969: IFTRUE 52991
52971: LD_INT 5
52973: DOUBLE
52974: EQUAL
52975: IFTRUE 52991
52977: LD_INT 34
52979: DOUBLE
52980: EQUAL
52981: IFTRUE 52991
52983: LD_INT 37
52985: DOUBLE
52986: EQUAL
52987: IFTRUE 52991
52989: GO 53047
52991: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
52992: LD_ADDR_VAR 0 9
52996: PUSH
52997: LD_VAR 0 53
53001: PUSH
53002: LD_VAR 0 54
53006: PUSH
53007: LD_VAR 0 55
53011: PUSH
53012: LD_VAR 0 56
53016: PUSH
53017: LD_VAR 0 57
53021: PUSH
53022: LD_VAR 0 58
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: PUSH
53035: LD_VAR 0 4
53039: PUSH
53040: LD_INT 1
53042: PLUS
53043: ARRAY
53044: ST_TO_ADDR
53045: GO 53154
53047: LD_INT 31
53049: DOUBLE
53050: EQUAL
53051: IFTRUE 53097
53053: LD_INT 32
53055: DOUBLE
53056: EQUAL
53057: IFTRUE 53097
53059: LD_INT 33
53061: DOUBLE
53062: EQUAL
53063: IFTRUE 53097
53065: LD_INT 27
53067: DOUBLE
53068: EQUAL
53069: IFTRUE 53097
53071: LD_INT 26
53073: DOUBLE
53074: EQUAL
53075: IFTRUE 53097
53077: LD_INT 28
53079: DOUBLE
53080: EQUAL
53081: IFTRUE 53097
53083: LD_INT 29
53085: DOUBLE
53086: EQUAL
53087: IFTRUE 53097
53089: LD_INT 30
53091: DOUBLE
53092: EQUAL
53093: IFTRUE 53097
53095: GO 53153
53097: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
53098: LD_ADDR_VAR 0 9
53102: PUSH
53103: LD_VAR 0 59
53107: PUSH
53108: LD_VAR 0 60
53112: PUSH
53113: LD_VAR 0 61
53117: PUSH
53118: LD_VAR 0 62
53122: PUSH
53123: LD_VAR 0 63
53127: PUSH
53128: LD_VAR 0 64
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: PUSH
53141: LD_VAR 0 4
53145: PUSH
53146: LD_INT 1
53148: PLUS
53149: ARRAY
53150: ST_TO_ADDR
53151: GO 53154
53153: POP
// temp_list2 = [ ] ;
53154: LD_ADDR_VAR 0 10
53158: PUSH
53159: EMPTY
53160: ST_TO_ADDR
// for i in temp_list do
53161: LD_ADDR_VAR 0 8
53165: PUSH
53166: LD_VAR 0 9
53170: PUSH
53171: FOR_IN
53172: IFFALSE 53224
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
53174: LD_ADDR_VAR 0 10
53178: PUSH
53179: LD_VAR 0 10
53183: PUSH
53184: LD_VAR 0 8
53188: PUSH
53189: LD_INT 1
53191: ARRAY
53192: PUSH
53193: LD_VAR 0 2
53197: PLUS
53198: PUSH
53199: LD_VAR 0 8
53203: PUSH
53204: LD_INT 2
53206: ARRAY
53207: PUSH
53208: LD_VAR 0 3
53212: PLUS
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: EMPTY
53219: LIST
53220: ADD
53221: ST_TO_ADDR
53222: GO 53171
53224: POP
53225: POP
// result = temp_list2 ;
53226: LD_ADDR_VAR 0 7
53230: PUSH
53231: LD_VAR 0 10
53235: ST_TO_ADDR
// end ;
53236: LD_VAR 0 7
53240: RET
// export function EnemyInRange ( unit , dist ) ; begin
53241: LD_INT 0
53243: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
53244: LD_ADDR_VAR 0 3
53248: PUSH
53249: LD_VAR 0 1
53253: PPUSH
53254: CALL_OW 255
53258: PPUSH
53259: LD_VAR 0 1
53263: PPUSH
53264: CALL_OW 250
53268: PPUSH
53269: LD_VAR 0 1
53273: PPUSH
53274: CALL_OW 251
53278: PPUSH
53279: LD_VAR 0 2
53283: PPUSH
53284: CALL 27345 0 4
53288: PUSH
53289: LD_INT 4
53291: ARRAY
53292: ST_TO_ADDR
// end ;
53293: LD_VAR 0 3
53297: RET
// export function PlayerSeeMe ( unit ) ; begin
53298: LD_INT 0
53300: PPUSH
// result := See ( your_side , unit ) ;
53301: LD_ADDR_VAR 0 2
53305: PUSH
53306: LD_OWVAR 2
53310: PPUSH
53311: LD_VAR 0 1
53315: PPUSH
53316: CALL_OW 292
53320: ST_TO_ADDR
// end ;
53321: LD_VAR 0 2
53325: RET
// export function ReverseDir ( unit ) ; begin
53326: LD_INT 0
53328: PPUSH
// if not unit then
53329: LD_VAR 0 1
53333: NOT
53334: IFFALSE 53338
// exit ;
53336: GO 53361
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
53338: LD_ADDR_VAR 0 2
53342: PUSH
53343: LD_VAR 0 1
53347: PPUSH
53348: CALL_OW 254
53352: PUSH
53353: LD_INT 3
53355: PLUS
53356: PUSH
53357: LD_INT 6
53359: MOD
53360: ST_TO_ADDR
// end ;
53361: LD_VAR 0 2
53365: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
53366: LD_INT 0
53368: PPUSH
53369: PPUSH
53370: PPUSH
53371: PPUSH
53372: PPUSH
// if not hexes then
53373: LD_VAR 0 2
53377: NOT
53378: IFFALSE 53382
// exit ;
53380: GO 53530
// dist := 9999 ;
53382: LD_ADDR_VAR 0 5
53386: PUSH
53387: LD_INT 9999
53389: ST_TO_ADDR
// for i = 1 to hexes do
53390: LD_ADDR_VAR 0 4
53394: PUSH
53395: DOUBLE
53396: LD_INT 1
53398: DEC
53399: ST_TO_ADDR
53400: LD_VAR 0 2
53404: PUSH
53405: FOR_TO
53406: IFFALSE 53518
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
53408: LD_VAR 0 1
53412: PPUSH
53413: LD_VAR 0 2
53417: PUSH
53418: LD_VAR 0 4
53422: ARRAY
53423: PUSH
53424: LD_INT 1
53426: ARRAY
53427: PPUSH
53428: LD_VAR 0 2
53432: PUSH
53433: LD_VAR 0 4
53437: ARRAY
53438: PUSH
53439: LD_INT 2
53441: ARRAY
53442: PPUSH
53443: CALL_OW 297
53447: PUSH
53448: LD_VAR 0 5
53452: LESS
53453: IFFALSE 53516
// begin hex := hexes [ i ] ;
53455: LD_ADDR_VAR 0 7
53459: PUSH
53460: LD_VAR 0 2
53464: PUSH
53465: LD_VAR 0 4
53469: ARRAY
53470: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53471: LD_ADDR_VAR 0 5
53475: PUSH
53476: LD_VAR 0 1
53480: PPUSH
53481: LD_VAR 0 2
53485: PUSH
53486: LD_VAR 0 4
53490: ARRAY
53491: PUSH
53492: LD_INT 1
53494: ARRAY
53495: PPUSH
53496: LD_VAR 0 2
53500: PUSH
53501: LD_VAR 0 4
53505: ARRAY
53506: PUSH
53507: LD_INT 2
53509: ARRAY
53510: PPUSH
53511: CALL_OW 297
53515: ST_TO_ADDR
// end ; end ;
53516: GO 53405
53518: POP
53519: POP
// result := hex ;
53520: LD_ADDR_VAR 0 3
53524: PUSH
53525: LD_VAR 0 7
53529: ST_TO_ADDR
// end ;
53530: LD_VAR 0 3
53534: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
53535: LD_INT 0
53537: PPUSH
53538: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
53539: LD_VAR 0 1
53543: NOT
53544: PUSH
53545: LD_VAR 0 1
53549: PUSH
53550: LD_INT 21
53552: PUSH
53553: LD_INT 2
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 23
53562: PUSH
53563: LD_INT 2
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PPUSH
53574: CALL_OW 69
53578: IN
53579: NOT
53580: OR
53581: IFFALSE 53585
// exit ;
53583: GO 53632
// for i = 1 to 3 do
53585: LD_ADDR_VAR 0 3
53589: PUSH
53590: DOUBLE
53591: LD_INT 1
53593: DEC
53594: ST_TO_ADDR
53595: LD_INT 3
53597: PUSH
53598: FOR_TO
53599: IFFALSE 53630
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
53601: LD_VAR 0 1
53605: PPUSH
53606: CALL_OW 250
53610: PPUSH
53611: LD_VAR 0 1
53615: PPUSH
53616: CALL_OW 251
53620: PPUSH
53621: LD_INT 1
53623: PPUSH
53624: CALL_OW 453
53628: GO 53598
53630: POP
53631: POP
// end ;
53632: LD_VAR 0 2
53636: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
53637: LD_INT 0
53639: PPUSH
53640: PPUSH
53641: PPUSH
53642: PPUSH
53643: PPUSH
53644: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
53645: LD_VAR 0 1
53649: NOT
53650: PUSH
53651: LD_VAR 0 2
53655: NOT
53656: OR
53657: PUSH
53658: LD_VAR 0 1
53662: PPUSH
53663: CALL_OW 314
53667: OR
53668: IFFALSE 53672
// exit ;
53670: GO 54113
// x := GetX ( enemy_unit ) ;
53672: LD_ADDR_VAR 0 7
53676: PUSH
53677: LD_VAR 0 2
53681: PPUSH
53682: CALL_OW 250
53686: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
53687: LD_ADDR_VAR 0 8
53691: PUSH
53692: LD_VAR 0 2
53696: PPUSH
53697: CALL_OW 251
53701: ST_TO_ADDR
// if not x or not y then
53702: LD_VAR 0 7
53706: NOT
53707: PUSH
53708: LD_VAR 0 8
53712: NOT
53713: OR
53714: IFFALSE 53718
// exit ;
53716: GO 54113
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
53718: LD_ADDR_VAR 0 6
53722: PUSH
53723: LD_VAR 0 7
53727: PPUSH
53728: LD_INT 0
53730: PPUSH
53731: LD_INT 4
53733: PPUSH
53734: CALL_OW 272
53738: PUSH
53739: LD_VAR 0 8
53743: PPUSH
53744: LD_INT 0
53746: PPUSH
53747: LD_INT 4
53749: PPUSH
53750: CALL_OW 273
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_VAR 0 7
53763: PPUSH
53764: LD_INT 1
53766: PPUSH
53767: LD_INT 4
53769: PPUSH
53770: CALL_OW 272
53774: PUSH
53775: LD_VAR 0 8
53779: PPUSH
53780: LD_INT 1
53782: PPUSH
53783: LD_INT 4
53785: PPUSH
53786: CALL_OW 273
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_VAR 0 7
53799: PPUSH
53800: LD_INT 2
53802: PPUSH
53803: LD_INT 4
53805: PPUSH
53806: CALL_OW 272
53810: PUSH
53811: LD_VAR 0 8
53815: PPUSH
53816: LD_INT 2
53818: PPUSH
53819: LD_INT 4
53821: PPUSH
53822: CALL_OW 273
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: LD_VAR 0 7
53835: PPUSH
53836: LD_INT 3
53838: PPUSH
53839: LD_INT 4
53841: PPUSH
53842: CALL_OW 272
53846: PUSH
53847: LD_VAR 0 8
53851: PPUSH
53852: LD_INT 3
53854: PPUSH
53855: LD_INT 4
53857: PPUSH
53858: CALL_OW 273
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_VAR 0 7
53871: PPUSH
53872: LD_INT 4
53874: PPUSH
53875: LD_INT 4
53877: PPUSH
53878: CALL_OW 272
53882: PUSH
53883: LD_VAR 0 8
53887: PPUSH
53888: LD_INT 4
53890: PPUSH
53891: LD_INT 4
53893: PPUSH
53894: CALL_OW 273
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_VAR 0 7
53907: PPUSH
53908: LD_INT 5
53910: PPUSH
53911: LD_INT 4
53913: PPUSH
53914: CALL_OW 272
53918: PUSH
53919: LD_VAR 0 8
53923: PPUSH
53924: LD_INT 5
53926: PPUSH
53927: LD_INT 4
53929: PPUSH
53930: CALL_OW 273
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: ST_TO_ADDR
// for i = tmp downto 1 do
53947: LD_ADDR_VAR 0 4
53951: PUSH
53952: DOUBLE
53953: LD_VAR 0 6
53957: INC
53958: ST_TO_ADDR
53959: LD_INT 1
53961: PUSH
53962: FOR_DOWNTO
53963: IFFALSE 54064
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
53965: LD_VAR 0 6
53969: PUSH
53970: LD_VAR 0 4
53974: ARRAY
53975: PUSH
53976: LD_INT 1
53978: ARRAY
53979: PPUSH
53980: LD_VAR 0 6
53984: PUSH
53985: LD_VAR 0 4
53989: ARRAY
53990: PUSH
53991: LD_INT 2
53993: ARRAY
53994: PPUSH
53995: CALL_OW 488
53999: NOT
54000: PUSH
54001: LD_VAR 0 6
54005: PUSH
54006: LD_VAR 0 4
54010: ARRAY
54011: PUSH
54012: LD_INT 1
54014: ARRAY
54015: PPUSH
54016: LD_VAR 0 6
54020: PUSH
54021: LD_VAR 0 4
54025: ARRAY
54026: PUSH
54027: LD_INT 2
54029: ARRAY
54030: PPUSH
54031: CALL_OW 428
54035: PUSH
54036: LD_INT 0
54038: NONEQUAL
54039: OR
54040: IFFALSE 54062
// tmp := Delete ( tmp , i ) ;
54042: LD_ADDR_VAR 0 6
54046: PUSH
54047: LD_VAR 0 6
54051: PPUSH
54052: LD_VAR 0 4
54056: PPUSH
54057: CALL_OW 3
54061: ST_TO_ADDR
54062: GO 53962
54064: POP
54065: POP
// j := GetClosestHex ( unit , tmp ) ;
54066: LD_ADDR_VAR 0 5
54070: PUSH
54071: LD_VAR 0 1
54075: PPUSH
54076: LD_VAR 0 6
54080: PPUSH
54081: CALL 53366 0 2
54085: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
54086: LD_VAR 0 1
54090: PPUSH
54091: LD_VAR 0 5
54095: PUSH
54096: LD_INT 1
54098: ARRAY
54099: PPUSH
54100: LD_VAR 0 5
54104: PUSH
54105: LD_INT 2
54107: ARRAY
54108: PPUSH
54109: CALL_OW 111
// end ;
54113: LD_VAR 0 3
54117: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
54118: LD_INT 0
54120: PPUSH
54121: PPUSH
54122: PPUSH
// uc_side = 0 ;
54123: LD_ADDR_OWVAR 20
54127: PUSH
54128: LD_INT 0
54130: ST_TO_ADDR
// uc_nation = 0 ;
54131: LD_ADDR_OWVAR 21
54135: PUSH
54136: LD_INT 0
54138: ST_TO_ADDR
// InitHc ;
54139: CALL_OW 19
// InitVc ;
54143: CALL_OW 20
// if mastodonts then
54147: LD_VAR 0 6
54151: IFFALSE 54218
// for i = 1 to mastodonts do
54153: LD_ADDR_VAR 0 11
54157: PUSH
54158: DOUBLE
54159: LD_INT 1
54161: DEC
54162: ST_TO_ADDR
54163: LD_VAR 0 6
54167: PUSH
54168: FOR_TO
54169: IFFALSE 54216
// begin vc_chassis := 31 ;
54171: LD_ADDR_OWVAR 37
54175: PUSH
54176: LD_INT 31
54178: ST_TO_ADDR
// vc_control := control_rider ;
54179: LD_ADDR_OWVAR 38
54183: PUSH
54184: LD_INT 4
54186: ST_TO_ADDR
// animal := CreateVehicle ;
54187: LD_ADDR_VAR 0 12
54191: PUSH
54192: CALL_OW 45
54196: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54197: LD_VAR 0 12
54201: PPUSH
54202: LD_VAR 0 8
54206: PPUSH
54207: LD_INT 0
54209: PPUSH
54210: CALL 56287 0 3
// end ;
54214: GO 54168
54216: POP
54217: POP
// if horses then
54218: LD_VAR 0 5
54222: IFFALSE 54289
// for i = 1 to horses do
54224: LD_ADDR_VAR 0 11
54228: PUSH
54229: DOUBLE
54230: LD_INT 1
54232: DEC
54233: ST_TO_ADDR
54234: LD_VAR 0 5
54238: PUSH
54239: FOR_TO
54240: IFFALSE 54287
// begin hc_class := 21 ;
54242: LD_ADDR_OWVAR 28
54246: PUSH
54247: LD_INT 21
54249: ST_TO_ADDR
// hc_gallery :=  ;
54250: LD_ADDR_OWVAR 33
54254: PUSH
54255: LD_STRING 
54257: ST_TO_ADDR
// animal := CreateHuman ;
54258: LD_ADDR_VAR 0 12
54262: PUSH
54263: CALL_OW 44
54267: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54268: LD_VAR 0 12
54272: PPUSH
54273: LD_VAR 0 8
54277: PPUSH
54278: LD_INT 0
54280: PPUSH
54281: CALL 56287 0 3
// end ;
54285: GO 54239
54287: POP
54288: POP
// if birds then
54289: LD_VAR 0 1
54293: IFFALSE 54360
// for i = 1 to birds do
54295: LD_ADDR_VAR 0 11
54299: PUSH
54300: DOUBLE
54301: LD_INT 1
54303: DEC
54304: ST_TO_ADDR
54305: LD_VAR 0 1
54309: PUSH
54310: FOR_TO
54311: IFFALSE 54358
// begin hc_class = 18 ;
54313: LD_ADDR_OWVAR 28
54317: PUSH
54318: LD_INT 18
54320: ST_TO_ADDR
// hc_gallery =  ;
54321: LD_ADDR_OWVAR 33
54325: PUSH
54326: LD_STRING 
54328: ST_TO_ADDR
// animal := CreateHuman ;
54329: LD_ADDR_VAR 0 12
54333: PUSH
54334: CALL_OW 44
54338: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54339: LD_VAR 0 12
54343: PPUSH
54344: LD_VAR 0 8
54348: PPUSH
54349: LD_INT 0
54351: PPUSH
54352: CALL 56287 0 3
// end ;
54356: GO 54310
54358: POP
54359: POP
// if tigers then
54360: LD_VAR 0 2
54364: IFFALSE 54448
// for i = 1 to tigers do
54366: LD_ADDR_VAR 0 11
54370: PUSH
54371: DOUBLE
54372: LD_INT 1
54374: DEC
54375: ST_TO_ADDR
54376: LD_VAR 0 2
54380: PUSH
54381: FOR_TO
54382: IFFALSE 54446
// begin hc_class = class_tiger ;
54384: LD_ADDR_OWVAR 28
54388: PUSH
54389: LD_INT 14
54391: ST_TO_ADDR
// hc_gallery =  ;
54392: LD_ADDR_OWVAR 33
54396: PUSH
54397: LD_STRING 
54399: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
54400: LD_ADDR_OWVAR 35
54404: PUSH
54405: LD_INT 7
54407: NEG
54408: PPUSH
54409: LD_INT 7
54411: PPUSH
54412: CALL_OW 12
54416: ST_TO_ADDR
// animal := CreateHuman ;
54417: LD_ADDR_VAR 0 12
54421: PUSH
54422: CALL_OW 44
54426: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54427: LD_VAR 0 12
54431: PPUSH
54432: LD_VAR 0 8
54436: PPUSH
54437: LD_INT 0
54439: PPUSH
54440: CALL 56287 0 3
// end ;
54444: GO 54381
54446: POP
54447: POP
// if apemans then
54448: LD_VAR 0 3
54452: IFFALSE 54575
// for i = 1 to apemans do
54454: LD_ADDR_VAR 0 11
54458: PUSH
54459: DOUBLE
54460: LD_INT 1
54462: DEC
54463: ST_TO_ADDR
54464: LD_VAR 0 3
54468: PUSH
54469: FOR_TO
54470: IFFALSE 54573
// begin hc_class = class_apeman ;
54472: LD_ADDR_OWVAR 28
54476: PUSH
54477: LD_INT 12
54479: ST_TO_ADDR
// hc_gallery =  ;
54480: LD_ADDR_OWVAR 33
54484: PUSH
54485: LD_STRING 
54487: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
54488: LD_ADDR_OWVAR 35
54492: PUSH
54493: LD_INT 5
54495: NEG
54496: PPUSH
54497: LD_INT 5
54499: PPUSH
54500: CALL_OW 12
54504: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
54505: LD_ADDR_OWVAR 31
54509: PUSH
54510: LD_INT 1
54512: PPUSH
54513: LD_INT 3
54515: PPUSH
54516: CALL_OW 12
54520: PUSH
54521: LD_INT 1
54523: PPUSH
54524: LD_INT 3
54526: PPUSH
54527: CALL_OW 12
54531: PUSH
54532: LD_INT 0
54534: PUSH
54535: LD_INT 0
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: ST_TO_ADDR
// animal := CreateHuman ;
54544: LD_ADDR_VAR 0 12
54548: PUSH
54549: CALL_OW 44
54553: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54554: LD_VAR 0 12
54558: PPUSH
54559: LD_VAR 0 8
54563: PPUSH
54564: LD_INT 0
54566: PPUSH
54567: CALL 56287 0 3
// end ;
54571: GO 54469
54573: POP
54574: POP
// if enchidnas then
54575: LD_VAR 0 4
54579: IFFALSE 54646
// for i = 1 to enchidnas do
54581: LD_ADDR_VAR 0 11
54585: PUSH
54586: DOUBLE
54587: LD_INT 1
54589: DEC
54590: ST_TO_ADDR
54591: LD_VAR 0 4
54595: PUSH
54596: FOR_TO
54597: IFFALSE 54644
// begin hc_class = 13 ;
54599: LD_ADDR_OWVAR 28
54603: PUSH
54604: LD_INT 13
54606: ST_TO_ADDR
// hc_gallery =  ;
54607: LD_ADDR_OWVAR 33
54611: PUSH
54612: LD_STRING 
54614: ST_TO_ADDR
// animal := CreateHuman ;
54615: LD_ADDR_VAR 0 12
54619: PUSH
54620: CALL_OW 44
54624: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54625: LD_VAR 0 12
54629: PPUSH
54630: LD_VAR 0 8
54634: PPUSH
54635: LD_INT 0
54637: PPUSH
54638: CALL 56287 0 3
// end ;
54642: GO 54596
54644: POP
54645: POP
// if fishes then
54646: LD_VAR 0 7
54650: IFFALSE 54717
// for i = 1 to fishes do
54652: LD_ADDR_VAR 0 11
54656: PUSH
54657: DOUBLE
54658: LD_INT 1
54660: DEC
54661: ST_TO_ADDR
54662: LD_VAR 0 7
54666: PUSH
54667: FOR_TO
54668: IFFALSE 54715
// begin hc_class = 20 ;
54670: LD_ADDR_OWVAR 28
54674: PUSH
54675: LD_INT 20
54677: ST_TO_ADDR
// hc_gallery =  ;
54678: LD_ADDR_OWVAR 33
54682: PUSH
54683: LD_STRING 
54685: ST_TO_ADDR
// animal := CreateHuman ;
54686: LD_ADDR_VAR 0 12
54690: PUSH
54691: CALL_OW 44
54695: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
54696: LD_VAR 0 12
54700: PPUSH
54701: LD_VAR 0 9
54705: PPUSH
54706: LD_INT 0
54708: PPUSH
54709: CALL 56287 0 3
// end ;
54713: GO 54667
54715: POP
54716: POP
// end ;
54717: LD_VAR 0 10
54721: RET
// export function WantHeal ( sci , unit ) ; begin
54722: LD_INT 0
54724: PPUSH
// if GetTaskList ( sci ) > 0 then
54725: LD_VAR 0 1
54729: PPUSH
54730: CALL_OW 437
54734: PUSH
54735: LD_INT 0
54737: GREATER
54738: IFFALSE 54808
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
54740: LD_VAR 0 1
54744: PPUSH
54745: CALL_OW 437
54749: PUSH
54750: LD_INT 1
54752: ARRAY
54753: PUSH
54754: LD_INT 1
54756: ARRAY
54757: PUSH
54758: LD_STRING l
54760: EQUAL
54761: PUSH
54762: LD_VAR 0 1
54766: PPUSH
54767: CALL_OW 437
54771: PUSH
54772: LD_INT 1
54774: ARRAY
54775: PUSH
54776: LD_INT 4
54778: ARRAY
54779: PUSH
54780: LD_VAR 0 2
54784: EQUAL
54785: AND
54786: IFFALSE 54798
// result := true else
54788: LD_ADDR_VAR 0 3
54792: PUSH
54793: LD_INT 1
54795: ST_TO_ADDR
54796: GO 54806
// result := false ;
54798: LD_ADDR_VAR 0 3
54802: PUSH
54803: LD_INT 0
54805: ST_TO_ADDR
// end else
54806: GO 54816
// result := false ;
54808: LD_ADDR_VAR 0 3
54812: PUSH
54813: LD_INT 0
54815: ST_TO_ADDR
// end ;
54816: LD_VAR 0 3
54820: RET
// export function HealTarget ( sci ) ; begin
54821: LD_INT 0
54823: PPUSH
// if not sci then
54824: LD_VAR 0 1
54828: NOT
54829: IFFALSE 54833
// exit ;
54831: GO 54898
// result := 0 ;
54833: LD_ADDR_VAR 0 2
54837: PUSH
54838: LD_INT 0
54840: ST_TO_ADDR
// if GetTaskList ( sci ) then
54841: LD_VAR 0 1
54845: PPUSH
54846: CALL_OW 437
54850: IFFALSE 54898
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
54852: LD_VAR 0 1
54856: PPUSH
54857: CALL_OW 437
54861: PUSH
54862: LD_INT 1
54864: ARRAY
54865: PUSH
54866: LD_INT 1
54868: ARRAY
54869: PUSH
54870: LD_STRING l
54872: EQUAL
54873: IFFALSE 54898
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
54875: LD_ADDR_VAR 0 2
54879: PUSH
54880: LD_VAR 0 1
54884: PPUSH
54885: CALL_OW 437
54889: PUSH
54890: LD_INT 1
54892: ARRAY
54893: PUSH
54894: LD_INT 4
54896: ARRAY
54897: ST_TO_ADDR
// end ;
54898: LD_VAR 0 2
54902: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
54903: LD_INT 0
54905: PPUSH
54906: PPUSH
54907: PPUSH
54908: PPUSH
// if not base_units then
54909: LD_VAR 0 1
54913: NOT
54914: IFFALSE 54918
// exit ;
54916: GO 55005
// result := false ;
54918: LD_ADDR_VAR 0 2
54922: PUSH
54923: LD_INT 0
54925: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
54926: LD_ADDR_VAR 0 5
54930: PUSH
54931: LD_VAR 0 1
54935: PPUSH
54936: LD_INT 21
54938: PUSH
54939: LD_INT 3
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PPUSH
54946: CALL_OW 72
54950: ST_TO_ADDR
// if not tmp then
54951: LD_VAR 0 5
54955: NOT
54956: IFFALSE 54960
// exit ;
54958: GO 55005
// for i in tmp do
54960: LD_ADDR_VAR 0 3
54964: PUSH
54965: LD_VAR 0 5
54969: PUSH
54970: FOR_IN
54971: IFFALSE 55003
// begin result := EnemyInRange ( i , 22 ) ;
54973: LD_ADDR_VAR 0 2
54977: PUSH
54978: LD_VAR 0 3
54982: PPUSH
54983: LD_INT 22
54985: PPUSH
54986: CALL 53241 0 2
54990: ST_TO_ADDR
// if result then
54991: LD_VAR 0 2
54995: IFFALSE 55001
// exit ;
54997: POP
54998: POP
54999: GO 55005
// end ;
55001: GO 54970
55003: POP
55004: POP
// end ;
55005: LD_VAR 0 2
55009: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
55010: LD_INT 0
55012: PPUSH
55013: PPUSH
// if not units then
55014: LD_VAR 0 1
55018: NOT
55019: IFFALSE 55023
// exit ;
55021: GO 55093
// result := [ ] ;
55023: LD_ADDR_VAR 0 3
55027: PUSH
55028: EMPTY
55029: ST_TO_ADDR
// for i in units do
55030: LD_ADDR_VAR 0 4
55034: PUSH
55035: LD_VAR 0 1
55039: PUSH
55040: FOR_IN
55041: IFFALSE 55091
// if GetTag ( i ) = tag then
55043: LD_VAR 0 4
55047: PPUSH
55048: CALL_OW 110
55052: PUSH
55053: LD_VAR 0 2
55057: EQUAL
55058: IFFALSE 55089
// result := Insert ( result , result + 1 , i ) ;
55060: LD_ADDR_VAR 0 3
55064: PUSH
55065: LD_VAR 0 3
55069: PPUSH
55070: LD_VAR 0 3
55074: PUSH
55075: LD_INT 1
55077: PLUS
55078: PPUSH
55079: LD_VAR 0 4
55083: PPUSH
55084: CALL_OW 2
55088: ST_TO_ADDR
55089: GO 55040
55091: POP
55092: POP
// end ;
55093: LD_VAR 0 3
55097: RET
// export function IsDriver ( un ) ; begin
55098: LD_INT 0
55100: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
55101: LD_ADDR_VAR 0 2
55105: PUSH
55106: LD_VAR 0 1
55110: PUSH
55111: LD_INT 55
55113: PUSH
55114: EMPTY
55115: LIST
55116: PPUSH
55117: CALL_OW 69
55121: IN
55122: ST_TO_ADDR
// end ;
55123: LD_VAR 0 2
55127: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
55128: LD_INT 0
55130: PPUSH
55131: PPUSH
// list := [ ] ;
55132: LD_ADDR_VAR 0 5
55136: PUSH
55137: EMPTY
55138: ST_TO_ADDR
// case d of 0 :
55139: LD_VAR 0 3
55143: PUSH
55144: LD_INT 0
55146: DOUBLE
55147: EQUAL
55148: IFTRUE 55152
55150: GO 55285
55152: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
55153: LD_ADDR_VAR 0 5
55157: PUSH
55158: LD_VAR 0 1
55162: PUSH
55163: LD_INT 4
55165: MINUS
55166: PUSH
55167: LD_VAR 0 2
55171: PUSH
55172: LD_INT 4
55174: MINUS
55175: PUSH
55176: LD_INT 2
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: LIST
55183: PUSH
55184: LD_VAR 0 1
55188: PUSH
55189: LD_INT 3
55191: MINUS
55192: PUSH
55193: LD_VAR 0 2
55197: PUSH
55198: LD_INT 1
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: LIST
55205: PUSH
55206: LD_VAR 0 1
55210: PUSH
55211: LD_INT 4
55213: PLUS
55214: PUSH
55215: LD_VAR 0 2
55219: PUSH
55220: LD_INT 4
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: LIST
55227: PUSH
55228: LD_VAR 0 1
55232: PUSH
55233: LD_INT 3
55235: PLUS
55236: PUSH
55237: LD_VAR 0 2
55241: PUSH
55242: LD_INT 3
55244: PLUS
55245: PUSH
55246: LD_INT 5
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: LIST
55253: PUSH
55254: LD_VAR 0 1
55258: PUSH
55259: LD_VAR 0 2
55263: PUSH
55264: LD_INT 4
55266: PLUS
55267: PUSH
55268: LD_INT 0
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: LIST
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: ST_TO_ADDR
// end ; 1 :
55283: GO 55983
55285: LD_INT 1
55287: DOUBLE
55288: EQUAL
55289: IFTRUE 55293
55291: GO 55426
55293: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
55294: LD_ADDR_VAR 0 5
55298: PUSH
55299: LD_VAR 0 1
55303: PUSH
55304: LD_VAR 0 2
55308: PUSH
55309: LD_INT 4
55311: MINUS
55312: PUSH
55313: LD_INT 3
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: LIST
55320: PUSH
55321: LD_VAR 0 1
55325: PUSH
55326: LD_INT 3
55328: MINUS
55329: PUSH
55330: LD_VAR 0 2
55334: PUSH
55335: LD_INT 3
55337: MINUS
55338: PUSH
55339: LD_INT 2
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: LIST
55346: PUSH
55347: LD_VAR 0 1
55351: PUSH
55352: LD_INT 4
55354: MINUS
55355: PUSH
55356: LD_VAR 0 2
55360: PUSH
55361: LD_INT 1
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: LIST
55368: PUSH
55369: LD_VAR 0 1
55373: PUSH
55374: LD_VAR 0 2
55378: PUSH
55379: LD_INT 3
55381: PLUS
55382: PUSH
55383: LD_INT 0
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: LIST
55390: PUSH
55391: LD_VAR 0 1
55395: PUSH
55396: LD_INT 4
55398: PLUS
55399: PUSH
55400: LD_VAR 0 2
55404: PUSH
55405: LD_INT 4
55407: PLUS
55408: PUSH
55409: LD_INT 5
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: LIST
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: ST_TO_ADDR
// end ; 2 :
55424: GO 55983
55426: LD_INT 2
55428: DOUBLE
55429: EQUAL
55430: IFTRUE 55434
55432: GO 55563
55434: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
55435: LD_ADDR_VAR 0 5
55439: PUSH
55440: LD_VAR 0 1
55444: PUSH
55445: LD_VAR 0 2
55449: PUSH
55450: LD_INT 3
55452: MINUS
55453: PUSH
55454: LD_INT 3
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: LIST
55461: PUSH
55462: LD_VAR 0 1
55466: PUSH
55467: LD_INT 4
55469: PLUS
55470: PUSH
55471: LD_VAR 0 2
55475: PUSH
55476: LD_INT 4
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: LIST
55483: PUSH
55484: LD_VAR 0 1
55488: PUSH
55489: LD_VAR 0 2
55493: PUSH
55494: LD_INT 4
55496: PLUS
55497: PUSH
55498: LD_INT 0
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: LIST
55505: PUSH
55506: LD_VAR 0 1
55510: PUSH
55511: LD_INT 3
55513: MINUS
55514: PUSH
55515: LD_VAR 0 2
55519: PUSH
55520: LD_INT 1
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: LIST
55527: PUSH
55528: LD_VAR 0 1
55532: PUSH
55533: LD_INT 4
55535: MINUS
55536: PUSH
55537: LD_VAR 0 2
55541: PUSH
55542: LD_INT 4
55544: MINUS
55545: PUSH
55546: LD_INT 2
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: LIST
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: ST_TO_ADDR
// end ; 3 :
55561: GO 55983
55563: LD_INT 3
55565: DOUBLE
55566: EQUAL
55567: IFTRUE 55571
55569: GO 55704
55571: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
55572: LD_ADDR_VAR 0 5
55576: PUSH
55577: LD_VAR 0 1
55581: PUSH
55582: LD_INT 3
55584: PLUS
55585: PUSH
55586: LD_VAR 0 2
55590: PUSH
55591: LD_INT 4
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: LIST
55598: PUSH
55599: LD_VAR 0 1
55603: PUSH
55604: LD_INT 4
55606: PLUS
55607: PUSH
55608: LD_VAR 0 2
55612: PUSH
55613: LD_INT 4
55615: PLUS
55616: PUSH
55617: LD_INT 5
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: LIST
55624: PUSH
55625: LD_VAR 0 1
55629: PUSH
55630: LD_INT 4
55632: MINUS
55633: PUSH
55634: LD_VAR 0 2
55638: PUSH
55639: LD_INT 1
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: LIST
55646: PUSH
55647: LD_VAR 0 1
55651: PUSH
55652: LD_VAR 0 2
55656: PUSH
55657: LD_INT 4
55659: MINUS
55660: PUSH
55661: LD_INT 3
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: LIST
55668: PUSH
55669: LD_VAR 0 1
55673: PUSH
55674: LD_INT 3
55676: MINUS
55677: PUSH
55678: LD_VAR 0 2
55682: PUSH
55683: LD_INT 3
55685: MINUS
55686: PUSH
55687: LD_INT 2
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: LIST
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: ST_TO_ADDR
// end ; 4 :
55702: GO 55983
55704: LD_INT 4
55706: DOUBLE
55707: EQUAL
55708: IFTRUE 55712
55710: GO 55845
55712: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
55713: LD_ADDR_VAR 0 5
55717: PUSH
55718: LD_VAR 0 1
55722: PUSH
55723: LD_VAR 0 2
55727: PUSH
55728: LD_INT 4
55730: PLUS
55731: PUSH
55732: LD_INT 0
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: LIST
55739: PUSH
55740: LD_VAR 0 1
55744: PUSH
55745: LD_INT 3
55747: PLUS
55748: PUSH
55749: LD_VAR 0 2
55753: PUSH
55754: LD_INT 3
55756: PLUS
55757: PUSH
55758: LD_INT 5
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: LIST
55765: PUSH
55766: LD_VAR 0 1
55770: PUSH
55771: LD_INT 4
55773: PLUS
55774: PUSH
55775: LD_VAR 0 2
55779: PUSH
55780: LD_INT 4
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: LIST
55787: PUSH
55788: LD_VAR 0 1
55792: PUSH
55793: LD_VAR 0 2
55797: PUSH
55798: LD_INT 3
55800: MINUS
55801: PUSH
55802: LD_INT 3
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: LIST
55809: PUSH
55810: LD_VAR 0 1
55814: PUSH
55815: LD_INT 4
55817: MINUS
55818: PUSH
55819: LD_VAR 0 2
55823: PUSH
55824: LD_INT 4
55826: MINUS
55827: PUSH
55828: LD_INT 2
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: LIST
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: ST_TO_ADDR
// end ; 5 :
55843: GO 55983
55845: LD_INT 5
55847: DOUBLE
55848: EQUAL
55849: IFTRUE 55853
55851: GO 55982
55853: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
55854: LD_ADDR_VAR 0 5
55858: PUSH
55859: LD_VAR 0 1
55863: PUSH
55864: LD_INT 4
55866: MINUS
55867: PUSH
55868: LD_VAR 0 2
55872: PUSH
55873: LD_INT 1
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: LIST
55880: PUSH
55881: LD_VAR 0 1
55885: PUSH
55886: LD_VAR 0 2
55890: PUSH
55891: LD_INT 4
55893: MINUS
55894: PUSH
55895: LD_INT 3
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: LIST
55902: PUSH
55903: LD_VAR 0 1
55907: PUSH
55908: LD_INT 4
55910: PLUS
55911: PUSH
55912: LD_VAR 0 2
55916: PUSH
55917: LD_INT 4
55919: PLUS
55920: PUSH
55921: LD_INT 5
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: LIST
55928: PUSH
55929: LD_VAR 0 1
55933: PUSH
55934: LD_INT 3
55936: PLUS
55937: PUSH
55938: LD_VAR 0 2
55942: PUSH
55943: LD_INT 4
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: LIST
55950: PUSH
55951: LD_VAR 0 1
55955: PUSH
55956: LD_VAR 0 2
55960: PUSH
55961: LD_INT 3
55963: PLUS
55964: PUSH
55965: LD_INT 0
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: LIST
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: ST_TO_ADDR
// end ; end ;
55980: GO 55983
55982: POP
// result := list ;
55983: LD_ADDR_VAR 0 4
55987: PUSH
55988: LD_VAR 0 5
55992: ST_TO_ADDR
// end ;
55993: LD_VAR 0 4
55997: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
55998: LD_INT 0
56000: PPUSH
56001: PPUSH
56002: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
56003: LD_VAR 0 1
56007: NOT
56008: PUSH
56009: LD_VAR 0 2
56013: PUSH
56014: LD_INT 1
56016: PUSH
56017: LD_INT 2
56019: PUSH
56020: LD_INT 3
56022: PUSH
56023: LD_INT 4
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: IN
56032: NOT
56033: OR
56034: IFFALSE 56038
// exit ;
56036: GO 56130
// tmp := [ ] ;
56038: LD_ADDR_VAR 0 5
56042: PUSH
56043: EMPTY
56044: ST_TO_ADDR
// for i in units do
56045: LD_ADDR_VAR 0 4
56049: PUSH
56050: LD_VAR 0 1
56054: PUSH
56055: FOR_IN
56056: IFFALSE 56099
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
56058: LD_ADDR_VAR 0 5
56062: PUSH
56063: LD_VAR 0 5
56067: PPUSH
56068: LD_VAR 0 5
56072: PUSH
56073: LD_INT 1
56075: PLUS
56076: PPUSH
56077: LD_VAR 0 4
56081: PPUSH
56082: LD_VAR 0 2
56086: PPUSH
56087: CALL_OW 259
56091: PPUSH
56092: CALL_OW 2
56096: ST_TO_ADDR
56097: GO 56055
56099: POP
56100: POP
// if not tmp then
56101: LD_VAR 0 5
56105: NOT
56106: IFFALSE 56110
// exit ;
56108: GO 56130
// result := SortListByListDesc ( units , tmp ) ;
56110: LD_ADDR_VAR 0 3
56114: PUSH
56115: LD_VAR 0 1
56119: PPUSH
56120: LD_VAR 0 5
56124: PPUSH
56125: CALL_OW 77
56129: ST_TO_ADDR
// end ;
56130: LD_VAR 0 3
56134: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
56135: LD_INT 0
56137: PPUSH
56138: PPUSH
56139: PPUSH
// x := GetX ( building ) ;
56140: LD_ADDR_VAR 0 4
56144: PUSH
56145: LD_VAR 0 2
56149: PPUSH
56150: CALL_OW 250
56154: ST_TO_ADDR
// y := GetY ( building ) ;
56155: LD_ADDR_VAR 0 5
56159: PUSH
56160: LD_VAR 0 2
56164: PPUSH
56165: CALL_OW 251
56169: ST_TO_ADDR
// if GetTaskList ( unit ) then
56170: LD_VAR 0 1
56174: PPUSH
56175: CALL_OW 437
56179: IFFALSE 56274
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56181: LD_STRING e
56183: PUSH
56184: LD_VAR 0 1
56188: PPUSH
56189: CALL_OW 437
56193: PUSH
56194: LD_INT 1
56196: ARRAY
56197: PUSH
56198: LD_INT 1
56200: ARRAY
56201: EQUAL
56202: PUSH
56203: LD_VAR 0 4
56207: PUSH
56208: LD_VAR 0 1
56212: PPUSH
56213: CALL_OW 437
56217: PUSH
56218: LD_INT 1
56220: ARRAY
56221: PUSH
56222: LD_INT 2
56224: ARRAY
56225: EQUAL
56226: AND
56227: PUSH
56228: LD_VAR 0 5
56232: PUSH
56233: LD_VAR 0 1
56237: PPUSH
56238: CALL_OW 437
56242: PUSH
56243: LD_INT 1
56245: ARRAY
56246: PUSH
56247: LD_INT 3
56249: ARRAY
56250: EQUAL
56251: AND
56252: IFFALSE 56264
// result := true else
56254: LD_ADDR_VAR 0 3
56258: PUSH
56259: LD_INT 1
56261: ST_TO_ADDR
56262: GO 56272
// result := false ;
56264: LD_ADDR_VAR 0 3
56268: PUSH
56269: LD_INT 0
56271: ST_TO_ADDR
// end else
56272: GO 56282
// result := false ;
56274: LD_ADDR_VAR 0 3
56278: PUSH
56279: LD_INT 0
56281: ST_TO_ADDR
// end ;
56282: LD_VAR 0 3
56286: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
56287: LD_INT 0
56289: PPUSH
56290: PPUSH
56291: PPUSH
56292: PPUSH
// if not unit or not area then
56293: LD_VAR 0 1
56297: NOT
56298: PUSH
56299: LD_VAR 0 2
56303: NOT
56304: OR
56305: IFFALSE 56309
// exit ;
56307: GO 56473
// tmp := AreaToList ( area , i ) ;
56309: LD_ADDR_VAR 0 6
56313: PUSH
56314: LD_VAR 0 2
56318: PPUSH
56319: LD_VAR 0 5
56323: PPUSH
56324: CALL_OW 517
56328: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
56329: LD_ADDR_VAR 0 5
56333: PUSH
56334: DOUBLE
56335: LD_INT 1
56337: DEC
56338: ST_TO_ADDR
56339: LD_VAR 0 6
56343: PUSH
56344: LD_INT 1
56346: ARRAY
56347: PUSH
56348: FOR_TO
56349: IFFALSE 56471
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
56351: LD_ADDR_VAR 0 7
56355: PUSH
56356: LD_VAR 0 6
56360: PUSH
56361: LD_INT 1
56363: ARRAY
56364: PUSH
56365: LD_VAR 0 5
56369: ARRAY
56370: PUSH
56371: LD_VAR 0 6
56375: PUSH
56376: LD_INT 2
56378: ARRAY
56379: PUSH
56380: LD_VAR 0 5
56384: ARRAY
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
56390: LD_VAR 0 7
56394: PUSH
56395: LD_INT 1
56397: ARRAY
56398: PPUSH
56399: LD_VAR 0 7
56403: PUSH
56404: LD_INT 2
56406: ARRAY
56407: PPUSH
56408: CALL_OW 428
56412: PUSH
56413: LD_INT 0
56415: EQUAL
56416: IFFALSE 56469
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
56418: LD_VAR 0 1
56422: PPUSH
56423: LD_VAR 0 7
56427: PUSH
56428: LD_INT 1
56430: ARRAY
56431: PPUSH
56432: LD_VAR 0 7
56436: PUSH
56437: LD_INT 2
56439: ARRAY
56440: PPUSH
56441: LD_VAR 0 3
56445: PPUSH
56446: CALL_OW 48
// result := IsPlaced ( unit ) ;
56450: LD_ADDR_VAR 0 4
56454: PUSH
56455: LD_VAR 0 1
56459: PPUSH
56460: CALL_OW 305
56464: ST_TO_ADDR
// exit ;
56465: POP
56466: POP
56467: GO 56473
// end ; end ;
56469: GO 56348
56471: POP
56472: POP
// end ;
56473: LD_VAR 0 4
56477: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
56478: LD_INT 0
56480: PPUSH
56481: PPUSH
56482: PPUSH
// if not side or side > 8 then
56483: LD_VAR 0 1
56487: NOT
56488: PUSH
56489: LD_VAR 0 1
56493: PUSH
56494: LD_INT 8
56496: GREATER
56497: OR
56498: IFFALSE 56502
// exit ;
56500: GO 56689
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
56502: LD_ADDR_VAR 0 4
56506: PUSH
56507: LD_INT 22
56509: PUSH
56510: LD_VAR 0 1
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 21
56521: PUSH
56522: LD_INT 3
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PPUSH
56533: CALL_OW 69
56537: ST_TO_ADDR
// if not tmp then
56538: LD_VAR 0 4
56542: NOT
56543: IFFALSE 56547
// exit ;
56545: GO 56689
// enable_addtolog := true ;
56547: LD_ADDR_OWVAR 81
56551: PUSH
56552: LD_INT 1
56554: ST_TO_ADDR
// AddToLog ( [ ) ;
56555: LD_STRING [
56557: PPUSH
56558: CALL_OW 561
// for i in tmp do
56562: LD_ADDR_VAR 0 3
56566: PUSH
56567: LD_VAR 0 4
56571: PUSH
56572: FOR_IN
56573: IFFALSE 56680
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
56575: LD_STRING [
56577: PUSH
56578: LD_VAR 0 3
56582: PPUSH
56583: CALL_OW 266
56587: STR
56588: PUSH
56589: LD_STRING , 
56591: STR
56592: PUSH
56593: LD_VAR 0 3
56597: PPUSH
56598: CALL_OW 250
56602: STR
56603: PUSH
56604: LD_STRING , 
56606: STR
56607: PUSH
56608: LD_VAR 0 3
56612: PPUSH
56613: CALL_OW 251
56617: STR
56618: PUSH
56619: LD_STRING , 
56621: STR
56622: PUSH
56623: LD_VAR 0 3
56627: PPUSH
56628: CALL_OW 254
56632: STR
56633: PUSH
56634: LD_STRING , 
56636: STR
56637: PUSH
56638: LD_VAR 0 3
56642: PPUSH
56643: LD_INT 1
56645: PPUSH
56646: CALL_OW 268
56650: STR
56651: PUSH
56652: LD_STRING , 
56654: STR
56655: PUSH
56656: LD_VAR 0 3
56660: PPUSH
56661: LD_INT 2
56663: PPUSH
56664: CALL_OW 268
56668: STR
56669: PUSH
56670: LD_STRING ],
56672: STR
56673: PPUSH
56674: CALL_OW 561
// end ;
56678: GO 56572
56680: POP
56681: POP
// AddToLog ( ]; ) ;
56682: LD_STRING ];
56684: PPUSH
56685: CALL_OW 561
// end ;
56689: LD_VAR 0 2
56693: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
56694: LD_INT 0
56696: PPUSH
56697: PPUSH
56698: PPUSH
56699: PPUSH
56700: PPUSH
// if not area or not rate or not max then
56701: LD_VAR 0 1
56705: NOT
56706: PUSH
56707: LD_VAR 0 2
56711: NOT
56712: OR
56713: PUSH
56714: LD_VAR 0 4
56718: NOT
56719: OR
56720: IFFALSE 56724
// exit ;
56722: GO 56916
// while 1 do
56724: LD_INT 1
56726: IFFALSE 56916
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
56728: LD_ADDR_VAR 0 9
56732: PUSH
56733: LD_VAR 0 1
56737: PPUSH
56738: LD_INT 1
56740: PPUSH
56741: CALL_OW 287
56745: PUSH
56746: LD_INT 10
56748: MUL
56749: ST_TO_ADDR
// r := rate / 10 ;
56750: LD_ADDR_VAR 0 7
56754: PUSH
56755: LD_VAR 0 2
56759: PUSH
56760: LD_INT 10
56762: DIVREAL
56763: ST_TO_ADDR
// time := 1 1$00 ;
56764: LD_ADDR_VAR 0 8
56768: PUSH
56769: LD_INT 2100
56771: ST_TO_ADDR
// if amount < min then
56772: LD_VAR 0 9
56776: PUSH
56777: LD_VAR 0 3
56781: LESS
56782: IFFALSE 56800
// r := r * 2 else
56784: LD_ADDR_VAR 0 7
56788: PUSH
56789: LD_VAR 0 7
56793: PUSH
56794: LD_INT 2
56796: MUL
56797: ST_TO_ADDR
56798: GO 56826
// if amount > max then
56800: LD_VAR 0 9
56804: PUSH
56805: LD_VAR 0 4
56809: GREATER
56810: IFFALSE 56826
// r := r / 2 ;
56812: LD_ADDR_VAR 0 7
56816: PUSH
56817: LD_VAR 0 7
56821: PUSH
56822: LD_INT 2
56824: DIVREAL
56825: ST_TO_ADDR
// time := time / r ;
56826: LD_ADDR_VAR 0 8
56830: PUSH
56831: LD_VAR 0 8
56835: PUSH
56836: LD_VAR 0 7
56840: DIVREAL
56841: ST_TO_ADDR
// if time < 0 then
56842: LD_VAR 0 8
56846: PUSH
56847: LD_INT 0
56849: LESS
56850: IFFALSE 56867
// time := time * - 1 ;
56852: LD_ADDR_VAR 0 8
56856: PUSH
56857: LD_VAR 0 8
56861: PUSH
56862: LD_INT 1
56864: NEG
56865: MUL
56866: ST_TO_ADDR
// wait ( time ) ;
56867: LD_VAR 0 8
56871: PPUSH
56872: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
56876: LD_INT 35
56878: PPUSH
56879: LD_INT 875
56881: PPUSH
56882: CALL_OW 12
56886: PPUSH
56887: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
56891: LD_INT 1
56893: PPUSH
56894: LD_INT 5
56896: PPUSH
56897: CALL_OW 12
56901: PPUSH
56902: LD_VAR 0 1
56906: PPUSH
56907: LD_INT 1
56909: PPUSH
56910: CALL_OW 55
// end ;
56914: GO 56724
// end ;
56916: LD_VAR 0 5
56920: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
56921: LD_INT 0
56923: PPUSH
56924: PPUSH
56925: PPUSH
56926: PPUSH
56927: PPUSH
56928: PPUSH
56929: PPUSH
56930: PPUSH
// if not turrets or not factories then
56931: LD_VAR 0 1
56935: NOT
56936: PUSH
56937: LD_VAR 0 2
56941: NOT
56942: OR
56943: IFFALSE 56947
// exit ;
56945: GO 57254
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
56947: LD_ADDR_VAR 0 10
56951: PUSH
56952: LD_INT 5
56954: PUSH
56955: LD_INT 6
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: LD_INT 2
56964: PUSH
56965: LD_INT 4
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 3
56974: PUSH
56975: LD_INT 5
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 24
56989: PUSH
56990: LD_INT 25
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 23
56999: PUSH
57000: LD_INT 27
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 42
57013: PUSH
57014: LD_INT 43
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 44
57023: PUSH
57024: LD_INT 46
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 45
57033: PUSH
57034: LD_INT 47
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: LIST
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: LIST
57050: ST_TO_ADDR
// result := [ ] ;
57051: LD_ADDR_VAR 0 3
57055: PUSH
57056: EMPTY
57057: ST_TO_ADDR
// for i in turrets do
57058: LD_ADDR_VAR 0 4
57062: PUSH
57063: LD_VAR 0 1
57067: PUSH
57068: FOR_IN
57069: IFFALSE 57252
// begin nat := GetNation ( i ) ;
57071: LD_ADDR_VAR 0 7
57075: PUSH
57076: LD_VAR 0 4
57080: PPUSH
57081: CALL_OW 248
57085: ST_TO_ADDR
// weapon := 0 ;
57086: LD_ADDR_VAR 0 8
57090: PUSH
57091: LD_INT 0
57093: ST_TO_ADDR
// if not nat then
57094: LD_VAR 0 7
57098: NOT
57099: IFFALSE 57103
// continue ;
57101: GO 57068
// for j in list [ nat ] do
57103: LD_ADDR_VAR 0 5
57107: PUSH
57108: LD_VAR 0 10
57112: PUSH
57113: LD_VAR 0 7
57117: ARRAY
57118: PUSH
57119: FOR_IN
57120: IFFALSE 57161
// if GetBWeapon ( i ) = j [ 1 ] then
57122: LD_VAR 0 4
57126: PPUSH
57127: CALL_OW 269
57131: PUSH
57132: LD_VAR 0 5
57136: PUSH
57137: LD_INT 1
57139: ARRAY
57140: EQUAL
57141: IFFALSE 57159
// begin weapon := j [ 2 ] ;
57143: LD_ADDR_VAR 0 8
57147: PUSH
57148: LD_VAR 0 5
57152: PUSH
57153: LD_INT 2
57155: ARRAY
57156: ST_TO_ADDR
// break ;
57157: GO 57161
// end ;
57159: GO 57119
57161: POP
57162: POP
// if not weapon then
57163: LD_VAR 0 8
57167: NOT
57168: IFFALSE 57172
// continue ;
57170: GO 57068
// for k in factories do
57172: LD_ADDR_VAR 0 6
57176: PUSH
57177: LD_VAR 0 2
57181: PUSH
57182: FOR_IN
57183: IFFALSE 57248
// begin weapons := AvailableWeaponList ( k ) ;
57185: LD_ADDR_VAR 0 9
57189: PUSH
57190: LD_VAR 0 6
57194: PPUSH
57195: CALL_OW 478
57199: ST_TO_ADDR
// if not weapons then
57200: LD_VAR 0 9
57204: NOT
57205: IFFALSE 57209
// continue ;
57207: GO 57182
// if weapon in weapons then
57209: LD_VAR 0 8
57213: PUSH
57214: LD_VAR 0 9
57218: IN
57219: IFFALSE 57246
// begin result := [ i , weapon ] ;
57221: LD_ADDR_VAR 0 3
57225: PUSH
57226: LD_VAR 0 4
57230: PUSH
57231: LD_VAR 0 8
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: ST_TO_ADDR
// exit ;
57240: POP
57241: POP
57242: POP
57243: POP
57244: GO 57254
// end ; end ;
57246: GO 57182
57248: POP
57249: POP
// end ;
57250: GO 57068
57252: POP
57253: POP
// end ;
57254: LD_VAR 0 3
57258: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
57259: LD_INT 0
57261: PPUSH
// if not side or side > 8 then
57262: LD_VAR 0 3
57266: NOT
57267: PUSH
57268: LD_VAR 0 3
57272: PUSH
57273: LD_INT 8
57275: GREATER
57276: OR
57277: IFFALSE 57281
// exit ;
57279: GO 57340
// if not range then
57281: LD_VAR 0 4
57285: NOT
57286: IFFALSE 57297
// range := - 12 ;
57288: LD_ADDR_VAR 0 4
57292: PUSH
57293: LD_INT 12
57295: NEG
57296: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
57297: LD_VAR 0 1
57301: PPUSH
57302: LD_VAR 0 2
57306: PPUSH
57307: LD_VAR 0 3
57311: PPUSH
57312: LD_VAR 0 4
57316: PPUSH
57317: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
57321: LD_VAR 0 1
57325: PPUSH
57326: LD_VAR 0 2
57330: PPUSH
57331: LD_VAR 0 3
57335: PPUSH
57336: CALL_OW 331
// end ;
57340: LD_VAR 0 5
57344: RET
// export function Video ( mode ) ; begin
57345: LD_INT 0
57347: PPUSH
// ingame_video = mode ;
57348: LD_ADDR_OWVAR 52
57352: PUSH
57353: LD_VAR 0 1
57357: ST_TO_ADDR
// interface_hidden = mode ;
57358: LD_ADDR_OWVAR 54
57362: PUSH
57363: LD_VAR 0 1
57367: ST_TO_ADDR
// end ;
57368: LD_VAR 0 2
57372: RET
// export function Join ( array , element ) ; begin
57373: LD_INT 0
57375: PPUSH
// result := Replace ( array , array + 1 , element ) ;
57376: LD_ADDR_VAR 0 3
57380: PUSH
57381: LD_VAR 0 1
57385: PPUSH
57386: LD_VAR 0 1
57390: PUSH
57391: LD_INT 1
57393: PLUS
57394: PPUSH
57395: LD_VAR 0 2
57399: PPUSH
57400: CALL_OW 1
57404: ST_TO_ADDR
// end ;
57405: LD_VAR 0 3
57409: RET
// export function JoinUnion ( array , element ) ; begin
57410: LD_INT 0
57412: PPUSH
// result := array union element ;
57413: LD_ADDR_VAR 0 3
57417: PUSH
57418: LD_VAR 0 1
57422: PUSH
57423: LD_VAR 0 2
57427: UNION
57428: ST_TO_ADDR
// end ;
57429: LD_VAR 0 3
57433: RET
// export function GetBehemoths ( side ) ; begin
57434: LD_INT 0
57436: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
57437: LD_ADDR_VAR 0 2
57441: PUSH
57442: LD_INT 22
57444: PUSH
57445: LD_VAR 0 1
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 31
57456: PUSH
57457: LD_INT 25
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PPUSH
57468: CALL_OW 69
57472: ST_TO_ADDR
// end ;
57473: LD_VAR 0 2
57477: RET
// export function Shuffle ( array ) ; var i , index ; begin
57478: LD_INT 0
57480: PPUSH
57481: PPUSH
57482: PPUSH
// result := [ ] ;
57483: LD_ADDR_VAR 0 2
57487: PUSH
57488: EMPTY
57489: ST_TO_ADDR
// if not array then
57490: LD_VAR 0 1
57494: NOT
57495: IFFALSE 57499
// exit ;
57497: GO 57598
// Randomize ;
57499: CALL_OW 10
// for i = array downto 1 do
57503: LD_ADDR_VAR 0 3
57507: PUSH
57508: DOUBLE
57509: LD_VAR 0 1
57513: INC
57514: ST_TO_ADDR
57515: LD_INT 1
57517: PUSH
57518: FOR_DOWNTO
57519: IFFALSE 57596
// begin index := rand ( 1 , array ) ;
57521: LD_ADDR_VAR 0 4
57525: PUSH
57526: LD_INT 1
57528: PPUSH
57529: LD_VAR 0 1
57533: PPUSH
57534: CALL_OW 12
57538: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
57539: LD_ADDR_VAR 0 2
57543: PUSH
57544: LD_VAR 0 2
57548: PPUSH
57549: LD_VAR 0 2
57553: PUSH
57554: LD_INT 1
57556: PLUS
57557: PPUSH
57558: LD_VAR 0 1
57562: PUSH
57563: LD_VAR 0 4
57567: ARRAY
57568: PPUSH
57569: CALL_OW 2
57573: ST_TO_ADDR
// array := Delete ( array , index ) ;
57574: LD_ADDR_VAR 0 1
57578: PUSH
57579: LD_VAR 0 1
57583: PPUSH
57584: LD_VAR 0 4
57588: PPUSH
57589: CALL_OW 3
57593: ST_TO_ADDR
// end ;
57594: GO 57518
57596: POP
57597: POP
// end ;
57598: LD_VAR 0 2
57602: RET
// export function GetBaseMaterials ( base ) ; begin
57603: LD_INT 0
57605: PPUSH
// result := [ 0 , 0 , 0 ] ;
57606: LD_ADDR_VAR 0 2
57610: PUSH
57611: LD_INT 0
57613: PUSH
57614: LD_INT 0
57616: PUSH
57617: LD_INT 0
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: LIST
57624: ST_TO_ADDR
// if not base then
57625: LD_VAR 0 1
57629: NOT
57630: IFFALSE 57634
// exit ;
57632: GO 57683
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
57634: LD_ADDR_VAR 0 2
57638: PUSH
57639: LD_VAR 0 1
57643: PPUSH
57644: LD_INT 1
57646: PPUSH
57647: CALL_OW 275
57651: PUSH
57652: LD_VAR 0 1
57656: PPUSH
57657: LD_INT 2
57659: PPUSH
57660: CALL_OW 275
57664: PUSH
57665: LD_VAR 0 1
57669: PPUSH
57670: LD_INT 3
57672: PPUSH
57673: CALL_OW 275
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: LIST
57682: ST_TO_ADDR
// end ;
57683: LD_VAR 0 2
57687: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
57688: LD_INT 0
57690: PPUSH
57691: PPUSH
// result := array ;
57692: LD_ADDR_VAR 0 3
57696: PUSH
57697: LD_VAR 0 1
57701: ST_TO_ADDR
// if size > 0 then
57702: LD_VAR 0 2
57706: PUSH
57707: LD_INT 0
57709: GREATER
57710: IFFALSE 57756
// for i := array downto size do
57712: LD_ADDR_VAR 0 4
57716: PUSH
57717: DOUBLE
57718: LD_VAR 0 1
57722: INC
57723: ST_TO_ADDR
57724: LD_VAR 0 2
57728: PUSH
57729: FOR_DOWNTO
57730: IFFALSE 57754
// result := Delete ( result , result ) ;
57732: LD_ADDR_VAR 0 3
57736: PUSH
57737: LD_VAR 0 3
57741: PPUSH
57742: LD_VAR 0 3
57746: PPUSH
57747: CALL_OW 3
57751: ST_TO_ADDR
57752: GO 57729
57754: POP
57755: POP
// end ;
57756: LD_VAR 0 3
57760: RET
// export function ComExit ( unit ) ; var tmp ; begin
57761: LD_INT 0
57763: PPUSH
57764: PPUSH
// if not IsInUnit ( unit ) then
57765: LD_VAR 0 1
57769: PPUSH
57770: CALL_OW 310
57774: NOT
57775: IFFALSE 57779
// exit ;
57777: GO 57839
// tmp := IsInUnit ( unit ) ;
57779: LD_ADDR_VAR 0 3
57783: PUSH
57784: LD_VAR 0 1
57788: PPUSH
57789: CALL_OW 310
57793: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
57794: LD_VAR 0 3
57798: PPUSH
57799: CALL_OW 247
57803: PUSH
57804: LD_INT 2
57806: EQUAL
57807: IFFALSE 57820
// ComExitVehicle ( unit ) else
57809: LD_VAR 0 1
57813: PPUSH
57814: CALL_OW 121
57818: GO 57829
// ComExitBuilding ( unit ) ;
57820: LD_VAR 0 1
57824: PPUSH
57825: CALL_OW 122
// result := tmp ;
57829: LD_ADDR_VAR 0 2
57833: PUSH
57834: LD_VAR 0 3
57838: ST_TO_ADDR
// end ;
57839: LD_VAR 0 2
57843: RET
// export function ResetHc ; begin
57844: LD_INT 0
57846: PPUSH
// InitHc ;
57847: CALL_OW 19
// hc_importance := 0 ;
57851: LD_ADDR_OWVAR 32
57855: PUSH
57856: LD_INT 0
57858: ST_TO_ADDR
// end ; end_of_file
57859: LD_VAR 0 1
57863: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
57864: LD_VAR 0 1
57868: PUSH
57869: LD_INT 200
57871: DOUBLE
57872: GREATEREQUAL
57873: IFFALSE 57881
57875: LD_INT 299
57877: DOUBLE
57878: LESSEQUAL
57879: IFTRUE 57883
57881: GO 57915
57883: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
57884: LD_VAR 0 1
57888: PPUSH
57889: LD_VAR 0 2
57893: PPUSH
57894: LD_VAR 0 3
57898: PPUSH
57899: LD_VAR 0 4
57903: PPUSH
57904: LD_VAR 0 5
57908: PPUSH
57909: CALL 19688 0 5
57913: GO 57992
57915: LD_INT 300
57917: DOUBLE
57918: GREATEREQUAL
57919: IFFALSE 57927
57921: LD_INT 399
57923: DOUBLE
57924: LESSEQUAL
57925: IFTRUE 57929
57927: GO 57991
57929: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
57930: LD_VAR 0 1
57934: PPUSH
57935: LD_VAR 0 2
57939: PPUSH
57940: LD_VAR 0 3
57944: PPUSH
57945: LD_VAR 0 4
57949: PPUSH
57950: LD_VAR 0 5
57954: PPUSH
57955: LD_VAR 0 6
57959: PPUSH
57960: LD_VAR 0 7
57964: PPUSH
57965: LD_VAR 0 8
57969: PPUSH
57970: LD_VAR 0 9
57974: PPUSH
57975: LD_VAR 0 10
57979: PPUSH
57980: LD_VAR 0 11
57984: PPUSH
57985: CALL 17594 0 11
57989: GO 57992
57991: POP
// end ;
57992: PPOPN 11
57994: END
